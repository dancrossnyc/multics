07/10/84  Multics Pascal File I/O

Multics allows Pascal programs to read and write storage system files,
both sequentially and via direct access (indexed) I/O. This feature is
an extension to the ISO standard.


Predefined files:
Pascal provides three predefined file variables named "input",
"output", and "error".  A program that uses any of these must include
its name in the parameter list of the program header.  These file
variables are not, however, to be declared in the "var" section of the
main program.  Default attachments are:

	Pascal file name	I/O switch name	Attachment
	----------------	---------------	----------
	input		pascal_input_	syn_ user_input
	output		pascal_output_	syn_ user_output
	error		pascal_error_	syn_ error_output


All three files are, by default, open at the beginning of program
execution: reset(input), rewrite(output), rewrite(error).

The "error" file is a Multics SOL extension to standard Pascal.
Its use requires compilation with the -full_extensions (-full) or
-sol control argument.


User-declared file variables:
All files other than the predefined "input", "output", and "error"
correspond to I/O switches of the same name.  There are three types of
user-declared Pascal file variables: permanent, static, and local.

Permanent files are named in the parameter list of the program header
and are also declared in the "var" section of the main program.
Permanent files have no default attachment and are not opened by
default.


Static files are not named in the parameter list of the program header
but are declared in the "var" section of the main program.  A static
file has a default attach description that refers to a temporary
segment allocated in the process directory at the first invocation of
the program.  This segment remains until the end of the process or
"termination" of the program.  Static files are not opened by default.

Local files are declared in the internal procedures of the program. A
local file has a default attach description that refers to a temporary
segment that is allocated in the process directory when the procedure
is invoked and freed when the procedure exits (via return, release, or
nonlocal goto). Local files are not opened by default.


Files that are not attached by default must be attached explicitly with
the "fconnect" statement.  Files that are not opened by default must be
opened explicitly with the "reset" statement (for input) or the
"rewrite" statement (for output). See "Attaching a file from within a
program" below.


Redirecting I/O of a Pascal program:
To divert input or output to a Multics file, use the io_call (io)
command (type "help io") using the syntax:

	io attach file_variable_name vfile_ pathname

where file_variable_name is the lowercase name of a Pascal file
variable on which the program performs I/O (for example, the
predefined file variables "input", "output", and "error") and pathname
is the pathname of a Multics file.


For example, to allow a program to take input (on the "input" file
variable) from a segment named test_data, type the following command
line before running the program--

	io attach pascal_input_ vfile_ test_data

To restore terminal input, type--

	io detach pascal_input_

If "input" is not explicitly attached, running a Pascal program that
uses the "input" file variable causes it to be attached to the
terminal.  When the program completes, "input" remains attached to the
terminal and must be detached via "io detach pascal_input_" before it
can be re-attached elsewhere.


To divert program output on "output" to a segment named test_results,
issue the following command line before running the program--

	io attach pascal_output_ vfile_ test_results

To restore terminal output, type the command line--

	io detach pascal_output_


Attaching a file from within a program:
The Pascal "fconnect" statement attaches files within a Pascal
program.  This statement is a nonstandard Multics SOL Pascal extension
and requires the program to be compiled with the -full_extensions
(-full) control argument.  The syntax of this statement is:

	fconnect (file_name, attach_description);

where file_name is the name of the file to be connected (for example,
"input") and attach_description is a Multics attach description (for
example, "vfile_ test_data").  The "fconnect" statement closes the
file if it was open, detaches the file if it was attached, and
attaches the file using attach_description.


Opening a file:
Once a file is attached, it must be opened using the "reset" statement
(for input) or the "rewrite" statement (for output). If a file is not
attached when either of these statements is executed, the default
attach description (if any; for example, "syn_ user_input" for "input")
is used to attach the file. If there is no default attach description,
an error occurs. If the file is already opened, it is closed and
re-opened with the same attachment.


Closing a file:
A file is closed automatically when the procedure in which it is
declared exits (via "return", "end", or nonlocal "goto"). To close a
file at any time before that, use the nonstandard "fclose" statement.
This is a Multics extension to standard Pascal. Its syntax is:

	fclose (file_name);

On close (implicit or explicit), the file is detached if it has been
attached in the program by the fconnect procedure.  If it was attached
before execution of the program, it is not detached.


Sequential I/O:
Sequential input and output to files is performed via the standard
Pascal I/O statements.  A Multics SOL extension adds the following
statement:

          flush (file_name);

which prints the contents of the output buffer for file_name, which
contains the results of any previous "write" operations, without
outputting a newline character.


Random access I/O:
The following nonstandard I/O statements are offered as Multics SOL
extensions to standard Pascal:

fupdate (file_name);
   opens a switch for direct update.
fput (file_name, integer_expression);
   transfers an item into the file buffer.  Execution of this
   statement causes the item in the file file_name to be output to the
   file to which file_name is attached, as a data record with the
   character representation of integer_expression as the key.
fget (file_name, integer_expression);
   transfers an item from the file buffer.  The specified record is
   input into the file file_name.


Use of these statements requires compilation with the -full_extensions
(-full) control argument.  Files used by these statements must be
attached.


Example of random I/O:
The following program writes 100 records to the direct access file
named >udd>Foo>Bar>squares. Each record has key "N" where N is an
integer from 1 to 100, and has data value N**2. Finally, the program
reads the record whose key is "50" and prints out its value.


   program square (output, squarefile);
      var
         squarefile: file of integer;
         i: integer;
      begin
         fconnect (squarefile, 'vfile_ >udd>Foo>Bar>squares');
         fupdate (squarefile);
         for i := 1 to 100 do
	  begin
	     squarefile^ := i**2;
	     fput (squarefile, i)
	  end;
         fget (squarefile, 50);
         writeln (squarefile^);
      END.
