02/27/84  ed_mgt

Syntax:  ed_mgt {path}


Function:  allows the system administrator to edit a copy of the master
group table (MGT).  The MGT defines work classes and load control
groups, which determine the number of users from each group that are
permitted to log in, and the percentage of system resources that they
are allocated while logged in.  A complete discussion of load control
groups and work classes is found in Section 5 of MAM -- System
Administrator Manual, Order No. AK50.


Arguments:
path
   is the pathname of the copy of the MGT to be edited.  If the
   pathname is not given, the default is the segment MGT.mgt, in the
   working directory.  If the segment does not exist, it is created and
   initialized.  (The suffix, mgt, is not assumed, or required, by
   ed_mgt -- the MGT to be edited may have any name.  However, the
   suffix is required by the install command.)


Notes: Normal practice is to edit the MGT.mgt segment in
>udd>SysAdmin>admin and then install it, using the install command.
The install command merges it with the system copy in the >sc1
directory, preserving the current load figures in the system copy.
The system copy of the MGT should never be edited directly.  (The
load_ctl_status command may be used to display the contents of the
system copy.)


The MGT consists of a header and an array of entries.  The first 16 are
always work classes 1 through 16; the rest are site-defined load
control groups.  Some requests operate on only one of these two entry
types; others operate on both types.  There is a conceptual pointer
that always points to one of the entries.  There are several requests
that move this pointer.  Some requests operate only on the entry
specified by the pointer; others operate on all entries of one of the
types, or on all entries in the MGT.


Requests that operate on more than one entry do not move the pointer.
Requests that do move the pointer print the type and name of the entry
to which it is moved (unless there are further requests on the line
after the one that moved the pointer).  When ed_mgt is entered, the
pointer is set to the first load control group (the 17th entry).  If
there are no groups (which is the case if the MGT did not exist), then
ed_mgt prompts the user for the name and parameters of a group to add.


List of requests:
find entry, f entry
   moves the pointer to the entry (group or work class) whose name is
   given, and prints its type and name.  If the entry does not exist,
   the pointer is not moved.
next, n
   moves the pointer to the next entry, and prints its type and name.
   If the pointer is already at the last entry, it remains there, and
   "EOF" is printed.
- (minus sign)
   moves the pointer to the previous entry and prints its type and
   name.  If the pointer is already at the first entry, it remains
   there, and "TOP" is printed.
top, t
   moves the pointer to the first entry and prints its type and name.


add group constant work_class, a group constant work_class
   adds a new group, after the last group in the MGT.  The first
   argument is the group name, which can be a maximum of eight
   characters, and must begin with a capital letter.  The second
   argument is the constant in the maximum primary users equation for
   the new group.  (The group is allowed at least this number of
   primary users, on any configuration of the system.)  The third
   argument is the work class that all users in this group (both
   interactive and absentee) are assigned to, on all defined shifts.
   After the group has been added, the change request can be used to
   modify its parameters or add new ones.


   The pointer is set to the new group.  If the group already exists, a
   message to that effect is printed, and the pointer is set to the
   existing group.  The add request can only add groups.  Entries for
   the 16 possible work classes always exist, although the unused ones
   are marked as undefined.  The change request can be used to define
   an undefined work class.  An attempt to add one of the 16 work
   classes produces an error message, but leaves the pointer set to
   that work class.


delete
   deletes the current load control group, if the current pointer
   points to a load control group.  If the current pointer points to a
   work class, an error message is printed.  See the note under the
   verify request regarding restrictions on deleting groups.
define shift_spec {like shift_number}
   sets the group and work class values for the specified shifts to
   valid, consistent values.  If the optional "like shift_number"
   parameter is given, the values are set to the respective values from
   the specified shift.  Otherwise, the values are set to defaults:
   all groups are placed in work class 1; work class 1 is given 100% of
   available virtual CPU time; its scheduling mode is set to normal;
   and normal scheduling mode is set to percent.  If the specified
   shifts are already defined, an error message is printed, and no
   changes are made.


redefine shift_spec {like shift_number}
   operates like the define request, except that it can be used to
   change the values for a shift that is already defined.
undefine shift_spec
   sets the group and work class values for the specified shifts to
   null values, and undefines all work classes on the specified shifts.
   It is recommended that shifts not used at the site be undefined.
   This minimizes the output produced by the pall request and prevents
   the verify request from printing extraneous error messages.
print, p
   prints all information about the current entry.


pall type1 type2 ..., pa type1 type2 ..., p* type1 type2 ...
   prints all information about some or all entries or the header.
   When no type arguments are given, the default is to print all
   information in the MGT.  Valid type arguments are;
   total, tot
      print header
   group, lcg
      print all load control groups
   work_class, wc
      print all work classes
   xref, cref
      print cross reference showing which groups are in each work
      class, on each shift


   Printing of a cross reference should only be attempted for an MGT
   that passes the consistency tests made by the verify request.  The
   results of a cross reference of an inconsistent MGT are
   unpredictable.


write, w
   writes the edited copy of the MGT back into the original.  (Editing
   is performed on a temporary copy.)
quit, q
   exits from ed_mgt.  If a write request is not issued before
   quitting, the editing is lost, and the original copy remains
   unchanged.
verify max_errors, v max_errors
   examines the edited MGT for internal consistency and correctness,
   and reports errors that it finds.  The max_errors argument is an
   integer that indicates how many errors are reported before the user
   is asked if the verify request should be continued.  This argument
   is optional; if omitted, a default value of 5 is used.


global_change entry_type change_arguments,
gc entry_type change_arguments
   allows the specified changes to be made to all groups or all defined
   work classes.  The entry_type argument may be "group", "lcg",
   "work_class", or "wc".  This request enters change mode, and accepts
   a series of code-qualifier-value groups (see "Notes on change codes"
   below.  Each change is made to all entries of the specified type
   before the next change is processed.  Values of "."  or "*" for code
   cause an exit from change mode and return to ed_mgt request level.


change code qualifiers values ...,
c code qualifiers values ...
   The change request puts ed_mgt into change mode, in which successive
   code-qualifier-value groups are read and processed.  A code of "."
   or "*" causes an exit from change mode and return to ed_mgt request
   level.  Except for the header codes (prio_sked, normal_mode, and
   shifts), changes are made to the entry pointed to by the pointer.
   See "Notes on change codes" below.


Notes on change codes:  The following is a summary of the
code-qualifier-values acceptable to the change request, grouped
according to the entry type to which they apply.

   Group                               Group and Work Class
      id                                  num1
      constant, const, con                denom1, den1
      numerator, num                      work_class, wc
      denominator, denom,                 absentee_max
      max_prim, maxp, maxu, m             absentee_min
      abs_max, abs, minamax               absentee_pct
				  absentee


   Header                              Work Class
      prio_sked, prio                     percent, pct, %
      normal_mode, norm                   defined, def
      shifts                              int_resp, ir
		                      int_quantum, iq
 	                                resp, r
                                          quantum, q

There are several qualifier and value formats and many relationships
between the two that are common to several of the codes.  For a
more detailed description, see MAM -- System Administrator Manual,
Order No. AK50.
