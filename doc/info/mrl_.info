01/30/84  mrl_

Entry points in mrl_:
     (list is generated by the help command)


:Entry: mrl_: 01/30/84  mrl_

Function:  moves a character string by copying the characters from
right to left.


Syntax:
declare mrl_ entry (ptr, fixed bin(21), ptr, fixed bin(21));
call mrl_ (input_ptr, input_lth, output_ptr, output_lth);


Arguments:
input_ptr
   is a pointer to the input character string.  (Input)
input_lth
   is the length of the input string in characters.  (Input)
output_ptr
   is a pointer to the output character string.  (Input)
output_lth
   is the length of the output string in characters.  (Input)


Notes: If the output string is shorter than the input string, only the
last output_lth characters of the input string are moved.  If the
output string is longer than the input string, the output string is
padded on the left with blanks.


The following call to mrl_ --

     call mrl_ (addcharno (addr (text), start), lth,
                addcharno (addr (text), start+N), lth);

where N is a positive number is equivalent to the following PL/I loop--

     do i = lth to 1 by -1;
       substr (text, (start+N+i-1), 1) = substr (text, (start+i-1), 1);
     end;

Due to the nature of the Multics hardware, if the input and output
strings overlap and the output string is to the left of the input
string (ie: N, above, were a negative number), the results of the call
to mrl_ will be different from the results of the above PL/I loop.


Note that the following PL/I statement --

     substr (text, start+N, lth) = substr (text, start, lth);

will not work properly as the code generated by the compiler moves the
character string from left to right which destroys the contents of the
string.
