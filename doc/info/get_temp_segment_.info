04/21/82  get_temp_segment_


Entry points in get_temp_segment_:
   (List is generated by the help command)


:Entry:  get_temp_segment_:  09/25/86  get_temp_segment_


Function: acquires a temporary segment in the process directory.  The
segment returned to the caller is zero-length.

A free pool of temporary segments is associated with each user process.
The pool concept makes it possible to use the same temporary segment
more than once during the life of a process.  Reusing temporary
segments in this way avoids the cost of creating a segment each time
one is needed.

If more than one temporary segment is required, use the
get_temp_segments_ subroutine.


Syntax:
declare get_temp_segment_ entry (char(*), ptr, fixed bin(35));
call get_temp_segment_ (program, temp_seg_ptr, code);


Arguments:
program
   is a 32-character field identifying the program on whose behalf the
   temporary segment is to be used.  This field is displayed by the
   list_temp_segments command.  Besides giving the name of the command
   or subroutine invoked by the user, it can also briefly describe how
   the temporary segment is used; for example, "sort_seg (sort
   indexes)."  (Input)
temp_seg_ptr
   is a returned pointer to the requested temporary segment.  (Output)
code
   is a standard status code.  (Output)


Notes:  This subroutine assigns a temporary segment to its caller.  It
creates a new temporary segment and adds it to the free pool if one is
not currently available to satisfy the request.  The temporary segment
is created in the process directory with a unique name including the
temp.xxxx suffix, where xxxx is the segment number of the segment in
octal.  See the description of the release_temp_segment_ or the
release_temp_segments_ subroutine for a description of how to return a
temporary segment to the free pool.

The list_temp_segments command (described in the MPM Commands) can be
used to list the temporary segments being used by a process.
