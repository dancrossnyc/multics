11/18/87  pc_bft_


This is a collection of subroutines (found in pc_bft_.archive) which
provide a subroutine interface to BFT on the PC.


Entry points in pc_bft_:
    (List to be generated by the help command)


:Entry: bftfetch: 11/18/87  bftfetch


Function: Transfers a file from Multics to the local machine (PC).  If
a file already exists with the destination name on the local machine,
it will be overwritten if possible.


Syntax:
bftfetch  (source_filename,  destination_filename, priority, flags);
   char *source_filename;
   char *destination_filename;
   int   priority;
   long  flags;


Arguments:
source_filename
   The Multics pathname of the file which is to be transferred from
   Multics to the PC.  (Input)
destination_filename
   The pathname where the file sent from the remote machine is to be
   stored.  (Input)


priority
   The priority of the queue into which the fetch request is to be
   placed.  These range in value from 1..4, with 1 being of highest
   priority.  (Default 3)
flags
   A collection of bits signifying transfer characteristics.  (Input)
   The following definitions should be ORed together to obtain the
   appropriate settings (defined in BFT.H)

      BFT_BINARY	- ignore <CR><NL> - <NL> conversions
      BFT_NOTIFY	- notify user upon completion


Examples:
bftfetch (">udd>multics>bob>wonk", "c:\user\pete\wonk", 0, 4);
bftfetch ("<o>foo", "foo", BFT_BINARY | BFT_NOTIFY, 1);


:Entry: bftstore: 11/18/87  bftstore


Function: Sends a file from the local machine and stores it on the
remote machine (Multics).  If a file already exists with the
destination name on the remote machine, it will be overwritten if
possible.


Syntax:
bftstore  (source_filename,  destination_filename, flags, priority);
   char *source_filename;
   char *destination_filename;
   long  flags;
   int   priority;


Arguments:
source_filename
   The PC pathname of the file which is to be transferred from the PC
   to Multics.  (Input)
destination_filename
   The pathname where the file is to be sent to on the remote system.
   (Input)


flags
   A collection of bits signifying transfer characteristics.  (Input)
   The following definitions should be ORed together to obtain the
   appropriate settings (defined in BFT.H)

      BFT_BINARY	- ignore <CR><NL> - <NL> conversions
      BFT_NOTIFY	- notify user upon completion
priority
   The priority of the queue into which the fetch request is to be
   placed.  These range in value from 1..4, with 1 being of highest
   priority.  (Default 3)


Examples:
bftstore ("c:\user\bob\wonk", ">udd>multics>bob>wonk", 0, 1);
bftstore ("c:joe", ">udd>games>chess", BFT_BINARY, 4);


:Entry: bftcan: 11/18/87  bftcan


Function: Remove the specified entry from the containing transfer
queue, causing the transfer request not to be found and ultimately
terminating the request.


Syntax:
bftcan (id_type, entry_id);
   int   id_type;
   char *entry_id;


Arguments:
id_type
   is the type of the request identifier that has been given.  It must
   take on one of the values BFT_PATH_ID, BFT_ENTRY_ID, or BFT_TIME_ID
   defined in the include file bft.incl.pl1. (Input)
entry_id
   is the request identifier of the entry to be removed.  It may be
   one of relative pathname, entry name, or request ID.  (Input)


Examples:
bft_$cancel (BFT_ENTRY_ID, "foo");
bft_$cancel (BFT_PATH_ID,  ">udd>m>bob>foo");
bft_$cancel (BFT_PATH_ID,  "C:\TMP\BAR");
bft_$cancel (BFT_TIME_ID,  "173611.1");


:Entry: bftrecfe: 11/18/87  bftrecfe


Function: Continues receiving a file from the remote system (Multics)
after the interruption of a previous fetch command.  The length of the
destination file is checked on the local machine, and the remainder of
the file is transferred.


Syntax:
bftrecfe ();


:Entry: bftrecst: 11/18/87  bftrecst


Function: Continues sending a file to the remote system (Multics)
after the interruption of a previous store command.  The length of the
destination file is checked on the remote system, and the remainder of
the file is sent.


Syntax:
bftrecst ();


:Entry: bftunld: 11/18/87  bftunld


Function: This unloads the BFT server modules from both the PC and
Multics.  All transfers in progress will be interrupted and the queues
will remain intact with the current entries.


Syntax:
bftunld ()
