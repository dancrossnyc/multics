08/04/86 Multics Pascal implementation restrictions and
	deviations from ISO standard

This segment lists the size restrictions and other limits imposed by
the Multics implementation of Pascal.  See "Implementation
restrictions" below.  It also lists any features that are omitted from
the accepted ISO standard.  See "Deviations from standard" below.


Implementation restrictions:
The following numerical restrictions are properties of Multics Pascal:

Maximum length of identifier names = 32 characters

Maximum positive integer (maxint) = 34359738367

Maximum positive real (maxreal) = 1.70141183460469232E+38

Minimum positive real (minreal) = 1.46936793852785938E-39

Maximum set range = 288 elements
  It is not possible to define a set of (x..y) if y < 0 or y > 287 .
  or if ord (y) > 287.

Maximum storage for global variables
  (declared in outer procedure and not imported or exported)
	= 32K words

Maximum storage for local variables (internal to procedures)
	= 32K words


Deviations from standard:
Although Multics Pascal adheres to the ISO Pascal standard, certain
incompatible deviations exist in its implementation. These are listed
below. Numbers in parentheses (eg, 6.2.3.5) refer to the ISO Pascal
standard document.

   o  The concept of an undefined variable is not implemented
      (i.e., the compiler does not "flag" undefined variables);
      their use is not detected as an error.  The following undefined
      variables are not implemented:

         -  uninitialized variables (6.2.3.5, 6.6.5.4.)

         -  the control variable of a "for" statement after the
            "for" statement (6.8.3.9)

         -  the field of an inactive variant or an uninitialized
            field (6.4.3.3)

         -  the buffer variable after a "put" statement

         -  an undefined pointer after a call to "dispose" (has
            a null value)(6.6.5.3)

   o  In a "dispose", no error is detected if the pointer points to
      a variable that is the actual variable of an active
      procedure or used with an active "with" statement
      (6.6.5.3).

   o  In a "dispose" of the long form, it is generally not an
      error if the parameters passed do not have the same value
      or are not of the same number than in the corresponding
      "new" statement (the control is perfomed only on the
      length).

   o  No error is detected if you use in an expression, assign in a
      statement, or pass as an actual parameter a variable
      created by a "new" of the long form (6.6.5.3).

   o  No error is detected if you modify a selector of a variant when
      it has been defined in a "new" statement of the long form
      (6.6.5.3).

   o  A component of an array cannot be a file (6.4.3.2).

   o  A record cannot have a component of file type (6.4.3.3).

   o  Using a component of a record that has not been initialized
      is not detected as an error.  Using a component of a record
      when the case selector has an incorrect value is not
      detected as an error (6.4.3.3).

   o  The maximum size of a set is 288 elements.  For that reason, it
      is impossible to define set_type = set of ordinal_type if
      the ordinal type has more than 288 elements (6.4.3.4).

   o  "pack" and "unpack" are not allowed on conformant arrays
      (6.6.3.7).

   o  No error is detected if the current file position of a file
      "f" is altered while the file's buffer variable "f^" is an
      actual variable parameter, or an element of the record
      variable list of a "with" statement, or both (6.5.5).

   o  (* ....  *) is a comment, as well as { ....  }.  But "(*"
      and "{" , "*)" and "}" are not synonyms.  A comment which
      begins with "(*" must end with "*)" and a comment which
      begins with "{" must end with "}" (6.1.9).

   o  set overlapping is not always detected (6.4.5, 6.4.6,
      6.7.2.4).

   o  Modification of the selector field of a record when this
      record has been allocated by a "new" statement of the long
      form (using the value of this field) is not detected as an
      error .

   o  A selector field can be passed to a procedure (6.6.3.3).

   o  An error is not detected if the control variable of a "for"
      statement is modified in a procedure contained in the block
      (6.8.3.9).

   o  An array which is component of a packed type can be passed as
      an actual parameter to a variable conformant array.
      (6.6.3.7.3).

   o  Two  string  constants  of  the  same  length  can  be passed
      as actual parameters to variables conformant arrays of same schema
      (6.6.3.8).
