:Info: help_responses: hr:
07/15/88  help_responses, hr


List of help responses:
brief, bf
   prints a summary of a command, active function or subroutine info.
control_arg STR, ca STR
   prints descriptions of control args whose names contain STR.
entry_point {EP_NAME}, ep {EP_NAME}
   skips to the description of subroutine entry point EP_NAME.
header, he
   prints a long heading line for the current info seg.
list_entry_points, lep
   lists the entry points in a subroutine info segment.
list_requests, lr
   prints a brief description of selected help responses.
no, n
   exits from the current info seg.


quit, q
   causes the help command to return.
rest
   prints the rest of the requested information.
search {STRs}, srh {STRs}
   skips to the next paragraph containing STRs.
section {STRs}, scn {STRs}
   skips to the next section whose title contains STRs.
skip, s
   skips the next paragraph and asks whether the user wants to see the
   paragraph following it.
title
   lists titles and line counts of all sections remaining in the
   current info seg.


top, t
   skips to the beginning of the info seg, prints the heading line, and
   asks whether the user wants to see the first section.
yes, y
   prints the next paragraph of information, then asks whether the user
   wants more help.
?
   prints a list of available responses.
.
   prints "help" to identify the current interactive environment.
.. command_line
   passes the remainder of the response to the Multics command
   processor as a command line.


:Info: brief: bf:
02/24/87  Response:  brief, bf

Syntax:  bf


Function: prints a summary of a command, active function or subroutine
info seg, including Syntax section and a list of control arguments,
then repeats the previous question.



:Info: control_arg: ca:
02/24/87  Response:  control_arg, ca

Syntax:  ca STR


Function: prints descriptions of control (or other) arguments whose
names contain STR, then repeats the previous question.


:Info: entry_point: ep:
02/24/87  Response:  entry_point, ep

Syntax:  ep {EP_NAME}


Function: skips to the description of subroutine entry point.


Arguments:
EP_NAME
   is the subroutine entry point whose description is printed.  It can
   be specified as entry_point_name or subroutine_$entry_point_name.
   If EP_NAME is omitted, help skips to the description of the
   subroutine_$subroutine_ entry point, if one exists.


:Info: header: he:
02/24/87  Response:  header, he

Syntax: he


Function: prints a long heading line to identify the current info seg.
The line consists of the pathname of the info seg, heading, and line
count.


:Info: list_entry_points: lep:
02/24/87  Response:  list_entry_points, lep

Syntax: lep


Function: lists the entry points in a subroutine info segment.


:Info: list_requests: lr:
08/08/88  Response:  list_requests, lr

Syntax:  lr {response_names}


Function: describes the responses the user can give to queries asked by
the help command.


Arguments:
response_names
   are the names of one or more responses.  If the user gives a
   response name, that response is described in detail.  If no response
   names are given, then a list of responses is printed with a brief
   description of each.  The star convention is accepted.


:Info: no: n:
02/24/87  Response:  no, n

Syntax: n


Function: exits from the current info seg, and begins printing the next
info seg selected by info_names given in the help command.  Returns
from the help command if all selected info segs have been printed.


:Info: quit: q:
02/24/87  Response:  quit, q

Syntax: q


Function: causes the help command to return without printing the
remaining info segs selected by the info_names.


:Info: rest: r:
06/22/88  Response:  rest, r

Syntax:   r {-control_arg}


Function: prints the rest of the requested information.


Control arguments:
-all_entrypoints, -aep
   help prints descriptions of the remaining subroutine entry points in
   the info segment.
-entrypoint, -ep
   help prints the rest of the description for the current info
   segment, or for the current subroutine entry point in the info
   segment.  If other subroutine entry point descriptions follow the
   current entry point, help asks whether the user wants to see the
   next entry point description. (default)
-section, -scn
   help prints the rest of the current section without questions.  It
   then asks whether the user wants to see the next section.


:Info: search: srh:
07/15/88  Response:  search, srh

Syntax:  srh {STRs} {-control_args}


Function: looks for a section title or paragraph containing a match for
user-specified search strings.


Arguments:
STRs
   are one or more strings to search for.  The next paragraph whose
   text (including section title) contains a match for all of the
   string is printed.  If no STRs are given, help uses the search
   strings from the previous search response, or from the -search
   control argument if no previous search response was given.


Control arguments:
-case_sensitive, -cs
   searches for paragraphs which match the case of the search strings
   given in the search response.
-non_case_sensitive, -ncs
   ignores the case of letters in the search strings when looking for
   matching paragraphs. (default)
-top, -t
   begins searching from the top of the info segment or current
   subroutine entry point description.  The default is to search
   forward from the current position.


:Info: section: scn:
07/15/88  Response:  section, scn

Syntax:  scn {STRs} {-control_args}


Function: looks for a section title containing a match for
user-specified search strings.


Arguments:
STRs
   are one or more strings to search for.  The next section whose title
   contains a match for all of the string is printed.  If no STRs are
   given, help uses the search strings from the previous section
   response, or from the -section control argument if no previous
   section response was given.


Control arguments:
-case_sensitive, -cs
   searches for section titles which match the case of the search
   strings given in the section response.
-non_case_sensitive, -ncs
   ignores the case of letters in the search strings when looking for
   matching section titles. (default)
-top, -t
   begins searching from the top of the info segment or current
   subroutine entry point description.  The default is to search
   forward from the current position.


:Info: skip: s:
02/24/87  Response:  skip, s

Syntax:  s {-control_arg}


Function: skips the next paragraph and asks whether the user wants to
see the paragraph following it.


Control arguments:
-entrypoint, -ep,
-rest, -r
   help skips the rest of this info segment or subroutine entry point
   description, and continues with the next info segment or entry
   point. 
-section, -scn
   help skips remaining paragraphs of the current section, and
   continues with the next section.
-seen
   help skips to the next paragraph that the user has not seen.


Notes: One or none of the above control arguments may be given in each
skip response.  If none are given, help skips the next paragraph and
asks the user whether to print the subsequent paragraph.


:Info: titles: title:
02/24/87  Response:  titles, title

Syntax:  titles {-control_arg}


Function:  lists the section titles and line counts for remaining
sections in the info segment or subroutine entry point description.


Control arguments:
-top, -t
   lists titles from the beginning of the current info segment or
   subroutine entry point description.


:Info: top: t:
02/24/87  Response:  top, t

Syntax:  t


Function: skips to the beginning of the info seg, prints the heading
line, and asks whether the user wants to see the first section.  This
is useful if the user wishes to review earlier parts of the info seg,
or parts that were skipped over.


:Info: yes: y:
02/24/87  Response:  yes, y

Syntax:  y


Function: prints the next paragraph of information, then asks whether
the user wants more help.


:Info:  ?:
02/24/87  Response:  ?

Syntax:  ?


Function: lists available responses to questions asked by help.


:Info:  .:
02/24/87  Response:  .

Syntax:  .


Function: prints "help" to identify the current interactive
environment.


:Info:  ..:
02/24/87  Response:  ..

Syntax:  .. command_line


Function: passes the portion of the response following ..  to the
Multics command processor as a command line.  This allows the user to
temporarily escape from help to execute another command.


Arguments:
command_line
   is the string which represents the command line to be execute.  It
   may contain spaces, parentheses, etc, and will be passed to the
   command processor exactly as typed.
