12/07/88  calc

Syntax:  calc {expression}


Syntax as an active function:  [calc expression]


Function:  provides you with a calculator capable of evaluating
arithmetic expressions with operator precedence, a set of often-used
functions, and a memory that is symbolically addressable (i.e., by
identifier).


Arguments:
expression
   is an arithmetic expression to be evaluated.  If this argument is
   specified, the calc command prints its value and returns to
   command level.  The expression must be quoted if it contains
   spaces or other command language characters.  Variables are not
   allowed.


List of requests:
<expression>
   prints out the value of expression.
<variable>=<expression>
   assigns value of expression to variable.
list
   prints out the names and values of all the variables that have
   been declared so far.
<variable>
   prints out the name and value of variable.


q
   returns to command level.
.
   causes calc to identify itself by printing "calc".
..<command_line>
   causes the remainder of the line to be passed to Multics as a
   command line and executed.


Notes:  Invocation of calc with a newline enters calculator mode.  You
can then type in expressions, assignment statements, or list requests,
separated from each other by one or more newline characters.  All of
these operations are described below.

You must use the quit request with a newline character to return
to command level.


Notes on expressions: Arithmetic expressions involve real values and
the operands +, -, *, /, and ** (addition, subtraction,
multiplication, division, and exponentiation).  A prefix of plus (+)
or minus (-) is allowed.  Parentheses can be used, and blanks between
operators and values are ignored.  Calc evaluates each expression
according to rules of precedence and prints out the result.  The quit
request (followed by a newline character) returns you to command
level.  The order of evaluation is as follows:

  expressions within parentheses
  function references
  prefix +, prefix -
  **
  *, /
  +, -


For example, if you type

   2 + 3 * 4

calc responds

   = 14


Operations of the same level are processed from left to right except
for the prefix plus and minus, which are processed from right to left.
This means 2**3**4 is evaluated as (2**3)**4.

Numbers can be integers (123), fixed point (1.23) and floating point
(1.23e+2, 1.23e2, 1.23E2, or 1230E-1).  All are stored as float
bin(27).  An accuracy of about seven figures is maintained.  Variables
(see below) can be used in place of constants, e.g., pi * r ** 2.

Seven functions are provided--sin, cos, tan, atan, abs, ln, and log
(ln is base e, log is base 10).  They can be nested to any level, e.g.,
sin(ln(var).5*pi/180).


Notes on assignment statements:  The value of an expression can be
assigned to a variable.  The name of the variable must be from one to
eight characters and must be made up of letters (uppercase and/or
lowercase), digits (if not at the beginning of the name), and the
underscore character (_).  The form is

     <variable>=<expression>

For example, the following are legal assignment statements--

     x = 35

     Rho = sin(2*theta)


The calc command does not print any response to assignment statements.
The variables "pi" and "e" have preassigned values of 3.14159265 and
2.7182818, respectively.
