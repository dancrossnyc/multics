08/01/84  gcos, gc

Syntax as a command:  gcos job_deck_path {-control_args}


Function:  The gcos command invokes the GCOS batch environment
simulator to run a single GCOS job in the user's process.

Related facilities include the GCOS daemon, which provides batch
processing for GCOS jobs under Multics, and the gcos_sysprint,
gcos_syspunch, and gcos_card_utility commands, which may be used to
manipulate GCOS format files that reside in the Multics storage system.


Arguments:
job_deck_path
   is the pathname of a file (segment or multisegment file) containing
   a GCOS job deck.  The file may contain ASCII lines (as produced by
   one of the Multics editors) representing card images; or it may be a
   GCOS standard system format file, containing BCD and binary card
   images.  It is assumed to contain ASCII lines unless the GCOS format
   is specified.  One way of specifying GCOS format is to have the name
   of the file end with the gcos suffix.  The other way is the -gcos
   control argument, described below.


Control arguments:  specifying the input supplied to the simulator are:
-ascii, -aci
   the input file contains ASCII lines, as produced by one of the
   Multics editors.  This is the default, but this argument may be used
   if the name of an ASCII file ends with the suffix gcos (to avoid the
   necessity of renaming the file).
-gcos, -gc
   the input file is in GCOS standard system format, containing BCD and
   binary card images.  Such a file could have been produced as output
   of a previous GCOS job, or by the gcos_card_utility command.


-no_canonicalize, -nocan
   may be used to save processing time when an ASCII input file
   contains no tab characters, and the fields on all the card images
   are aligned in the columns required by GCOS.  Normally, an ASCII
   input file may contain tabs separating the fields on each line.  The
   process of replacing these tabs by the appropriate number of blanks
   to align the fields in the columns required by GCOS is known as
   canonicalization.  Logical tab stops are known for GCOS $ control
   cards and for all the languages supported by the simulator.
-truncate, -tc
   if any ASCII input file (the job deck file, or any $ SELECTed file)
   contains lines longer than 80 characters (after canonicalization),
   the extra characters are assumed to be part of comments, and are
   discarded without warning.  If this argument is not given, the first
   line longer than 80 characters causes the job to be rejected.


Control arguments:  specifying the disposition of output from the
   simulator are:
-dprint, -dp
   queue the converted print files for printing by the Multics I/O
   daemon, followed by deletion.  (The -list argument is implied and
   need not be given.)
-dprint_options "options", -dpo "options"
   queue the converted print files for printing by the I/O daemon, but
   use the dprint control arguments supplied in the options string
   instead of the default of -delete.  The options must be enclosed in
   quotation marks if they contain blanks or other delimiter characters
   recognized by the command processor.  The dprint command is called
   via cu_$cp so that a user-defined abbreviation for dprint (that
   supplies default heading and destination arguments, for example)


   would be used in this call.  (The -list and -dprint arguments are
   implied and need not be given.)
-dpunch, -dpn
   queue the converted punch files for punching by the I/O daemon in
   raw mode, followed by deletion.  (The -raw argument is implied and
   need not be given.)
-dpunch_options "options", -dpno "options"
   queue the converted punch files for punching by the I/O daemon, but
   use the dpunch control arguments supplied in the options string.
   The -raw argument is always used for dpunch, since the converted
   punch files are not suitable for punching in any other mode.  The
   explanations under -dprint_options above, regarding quotation marks
   and abbreviations, apply to this argument as well.  (The -raw and
   -dpunch arguments are implied and need not be given.)


-hold, -hd
   do not perform the default conversion and daemon output of print and
   punch files.  The default is:
        -dpo -dl -dpno "-dl -raw"
   Since the default for each file type (print or punch) is overridden
   when any of the above arguments is specified for the given file
   type, the -hold argument is only required when one of the file types
   is to be left in GCOS standard system format, with no conversion or
   daemon output being performed.
-list, -ls
   convert print files (both SYSOUT and simulated printer) from BCD to
   ASCII and delete the BCD copy.  (This conversion is performed by a
   call to the gcos_sysprint command for each file.)


-lower_case, -lc
   translate alphabetic BCD characters in print files to lowercase
   ASCII.  (Default is uppercase)
-raw
   convert punch files (both SYSOUT and simulated card punch) from BCD
   (or binary) to an internal format suitable for punching by the
   Multics I/O daemon in raw mode (960 bits per card image) and delete
   the BCD copy.  (This conversion is performed by a call to the
   gcos_syspunch command for each file.)


Control arguments:  governing the creation and use of files by the
   simulator are:
-job_id id, -id id
   use the job identification specified by id in the names of files
   created by the simulator for this job.  See Section 2 of this manual
   for more information on the naming of files.  The id may be any
   character string up to 18 characters to be used in file names, or it
   may be one of the following control arguments:
   -unique
      -unique use a Multics unique name as the job id.  (A unique name
      is a 15-character string, generated by the unique_chars_
      subroutine, beginning with an exclamation point and guaranteed to
      be unique within the system.)


   -jd_seg, -jd
      use the entryname of the job deck segment as the job id.  If the
      entryname ends with gcos, that suffix is removed from the id.
      (Default)
-syot_dir path, -sd path
   use the pathname of a directory specified by path for the GCOS
   format copies of print, punch, and sysout files.  By default, the
   working directory is used.  (The converted copies of these files are
   always placed in the working directory.)
-temp_dir path, -td path
   use the pathname of a directory specified by path for temporary GCOS
   files.  (Default is the process directory)


Control arguments:  Other control arguments are:
-parameter STRs, -pm STRs
   where STR strings override GCOS JCL parameter values specified on
   the $ PARAM card (i.e., specify the #n values in the JCL input).
-brief, -bf
   suppresses the printing of all terminal output produced by the
   simulator except for fatal error messages.  Output from the slave
   program is not suppressed.
-continue, -ctu
   continues processing of the job when a nonfatal error occurs.
   Unless the -brief control argument is given, a warning message is
   printed on the user's terminal.  If this argument is not given, the
   first nonfatal error causes the job to be rejected.  Nonfatal errors
   occur mainly in control card processing.


-debug, -db
   invokes interactive debugging aid to be used in the Multics
   environment (refer to the debug command).
   Normally, unrecoverable errors cause an immediate abort of the
   current function and a reset to command level.  Use of this control
   argument causes batch to call the debugging tool for further
   analysis of the problem and possible correction.
-long, -lg
   requests certain lines from the execution report, including the
   begin and end activity lines (containing program switch word, etc.)
   to be printed in addition to the normal terminal output.
-userlib
   enables the use of GCOS slave software libraries supplied by the
   user, instead of, or in addition to, the copies of the libraries
   installed in the system.


Notes:  If no control arguments are given, the defaults are such that
the command:
     gcos path
is equivalent to the command:
     gcos path -aci -dpo -dl -dpno "-dl -raw" -id -jd
Any $TAPE control card in the job deck issues a mount message (to the
operator) for the designated tape.  The mount message requests
insertion of a write ring in the tape reel unless the -noring or -nr
control is included as a comment on the $TAPE card (see the job deck
example included in the -parameter control argument above).

For tape processing, the simulator assigns drive numbers according to
the order in which tape devices are requested.  These numbers are used
in reporting information to the caller and have no correspondence to
the tape unit identifiers used by Multics.


When tape density of 1600 or less is specified, and a tape drive
capable of both 1600 and 6250 bpi is used, difficulties with tape
processing may occur.  The problem can be circumvented by using the
Multics assign_resource command to request a tape drive (i.e., one that
does not support both 1600 and 6250 bpi).
