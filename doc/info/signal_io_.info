02/25/85  signal_io_


The signal_io_ I/O module signals a condition whenever an iox_ I/O
operation is performed.  The condition has an info structure that
allows a handler of the condition to either abort the operation or
complete it by setting values in the structure and restarting the
condition signal.  When the condition is restarted, the signal_io_ I/O
module returns control to the caller of iox_ and returns the output
data in the structure as corresponding parameters of the iox_ call.

Applications using this I/O module must have a handler on the stack at
all times to handle the signal_io_ condition.


Attach description:
   signal_io_


Open operation:
All opening modes are supported.

I/O OPERATIONS (get_chars, get_line, put_chars, read_record,
rewrite_record, delete_record, read_length, position, seek_key,
read_key, write_record, control, modes)

All operations are supported in appropriate opening modes.  See NOTES
for a discussion of handing the condition associated with these
operations.


Notes:  When this module is called through iox_ to perform an I/O
operation as listed above, it signals the "signal_io_" condition with
an info structure given here.  The condition is restartable.

Applications using this module must establish a handler for the
condition that calls find_condition_info_ to locate the info structure.
If the condition is not handled, the default_error_handler_ will print
a default error message, unless the condition is associated with
user_i/o, user_output, user_input or error_output.  For these I/O
switches, terminates the process.

The returned_error_code in signal_io_info is initially set to
error_table_$action_not_performed, so if the condition is restarted
without first having the structure filled in, the iox_ call will return
error_table_$action_not_performed.


This condition does NOT pass through the condition walls established
when for new command levels.  If the application is attaching, for
example, user_i/o via this module, it must establish a command level
intermediary procedure (via cu_$set_cl_intermediary) that establishes a
new handler for the signal_io_ condition before calling the standard
intermediary (located via cu_$get_cl_intermediary).

