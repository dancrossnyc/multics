08/11/2016  call, cl

Syntax as a command:
  cl {global_opts} virtual_entry {arg_value_specifiers}


Syntax as an active function:
  [cl {global_opts} virtual_entry {arg_value_specifiers}]


Function:
call invokes subroutine and function interfaces directly from the
command line, to facilitate testing an entrypoint interface.

Operating as either a command or an active function, call invokes an
entrypoint by passing data given by arg_value specifiers for each
entrypoint parameter.  Upon return from the entrypoint, it displays or
returns selected argument values.


Arguments:
virtual_entry
  character representation of an external entrypoint to be invoked.
  Format of this string is described in: virtual_entries.gi.info

arg_value_specifier
  one or more strings and options defining an argument to be passed to
  the entrypoint.  See "List of arg_value_specifiers".


List of arg_value_specifiers:
  An argument corresponding to each entrypoint parameter is prepared
  using the following directional specifiers.

-input arg_value {arg_options},
-in arg_value {arg_options},
-i arg_value {arg_options},
arg_value {arg_options}
  gives an initial value for an entrypoint input argument before the
  call is made.  The argument value is not displayed after the
  entrypoint returns.  -input is the default if no direction option is
  given with an arg_value.


-inout arg_value {arg_options},
-io arg_value {arg_options}
  sets the initial value for the corresponding input-output argument
  before the entrypoint is called.  This argument value is displayed
  after the entrypoint returns.


-output {arg_options},
-out {arg_options},
-o {arg_options}
  no arg_value is provided, so call clears storage for the
  corresponding output argument before the entrypoint is called.
  This argument value is displayed after the entrypoint returns.
-outignore {arg_options},
-ignore {arg_options},
-ig {arg_options}
  clears storage for the corresponding argument before the entrypoint
  is called.  The argument value is not displayed after the
  entrypoint returns.


List of arg_options:
  Each arg_value_specifier may end with one or more of the following
  options.
-id ID
  gives an identifier for the argument.  This identifier is used when
  displaying an output argument, or when naming a -length ID in
  another argument's declaration.  (See -addr and -length below.)
-return, -ret
  selects the argument that should be returned when call is invoked as
  an active function.  Only one argument may be returned as the value
  of the active function.  See "Notes on call as an active function".


-code, -cd
  argument is a Multics status code (fixed bin(35) aligned).  For an
  input argument, the arg_value is a status code name (e.g.,
  error_table_$bad_arg).  For an output argument, status code name
  and the long status message is displayed/returned.
-date_time,
-date, -dt,
-time, -tm
  argument is a Multics clock value (fixed bin(71) aligned).  For an
  input argument, arg_value is a string representation of a date or
  time value, acceptable to the convert_date_to_binary_ subroutine.
  For an output argument, clock value is converted to default process
  date_time, date, or time format.


-octal, -oc
  displays an octal representation of storage for the argument,
  as well as a character string interpretation.  The final block
  of octal may include bytes (or bits) beyond the end of the
  argument's storage.
-declare DECLARATION,
-dcl DECLARATION
  argument has the attributes given in DECLARATION.  A descriptor
  with these attributes is passed with this argument.  -dcl is useful
  when calling an entrypoint that accepts a variable number of
  parameters, or parameters of various data types.


-addr DECLARATION
  for a pointer argument, sets its value to point to storage described
  by the PL/I DECLARATION, which is a single string defining data type
  and length attributes (e.g., "char(20)").  For an input argument,
  the arg_value initializes this storage.  For an output argument, the
  addressed storage is displayed or returned.

  A string DECLARATION may include the ID for another input parameter.
  For example: -addr "char(buffL)", where -id buffL is given for
  another fixed binary input parameter; the initial value for this
  referenced parameter specifies length of the character string to be
  allocated.


-max_length M, -ml M
  for a string or area parameter with star extents (e.g., char(*),
  char(*) var, bit(*), bit(*) var), gives the actual extent size M in
  characters, bits, or area words of the storage for the corresponding
  argument.
-length L, -ln L
-length ID, -ln ID
  for a string argument, gives the length L in characters or bits to
  be displayed upon return from the entrypoint.  The -length operand
  may also be the ID (see -id above) of another integer output
  argument, which gives the string length to display.


List of global options:
  Global options are given either before or immediately after the
  virtual_entry.  They are as follows.
-all, -a
  display all arguments upon return from entrypoint.  The default
  is to display only arguments with -inout or -out specifiers.
-octal, -oc
  display all arguments with an octal storage representation, in
  addition to its character string interpretation.
-debug INT, -db INT
  displays debug information as call prepares to invoke the
  virtual_entry.  An INT equaling 1 provides basic debugging data;
  values between 2 and 5 provide additional details.


Notes on call as an active function:
call as an active function selects and returns its active function
value as follows:
  - If any argument has the -code option and a non-zero status as its
    value upon return from the entrypoint, the active function returns
    the status code name and its associated long message.
  - Otherwise, if any argument has the -return option, the active
    function returns the character interpretation of that argument.
  - Otherwise, if the entrypoint is a function, and the corresponding
    return argument does not have an -ignore option, the active
    function returns the character interpretation of the return
    argument.
  - Otherwise, the active function returns an empty string.


Notes on entrypoint parameters:
When the PL/I compiler creates object segments, each external
entrypoint is preceded by an entrypoint parameter list that includes:
  - entrypoint attributes (e.g., subroutine or function; fixed or
    variable argument count);  and
  - a descriptor for each entrypoint parameter (including a function's
    return value).

These entrypoint descriptors give data type, storage requirements, and
other attributes for the parameter.  In effect, this entrypoint
parameter list includes all information needed to display a PL/I
declaration for the entrypoint.


External interfaces coded in assembly language (alm) do not provide
entrypoint parameter descriptors.  This includes all gate interfaces
to inner-ring routines.  Such interfaces are supported by call only if
an equivalent PL/I declaration for the entrypoint is found in a data
segment named by the "declare" search paths.

Use the display_entry_point_dcl (depd) command to display the entry
parameter list for a given entrypoint.  This command looks for either:
a declaration of the entrypoint found using the "declare" search
paths; or an entrypoint parameter list compiled into the object
segment.  The call command uses this same information to actually
invoke the entrypoint.  See the "Notes on user-provided data files"
section of depd.info for information about declaring new entrypoints,
or customizing the declaration for existing entrypoints.


Notes on building the argument list:
Before invoking the entrypoint, call does the following for each
entrypoint parameter descriptor:
  - allocate storage to hold an argument to pass to the parameter.
  - convert the corresponding arg_value (if given) to the attributes
    of the parameter descriptor.   PL/I rules for type conversion are
    followed.  arg_values for pointer and entry data types use formats
    accepted by cv_ptr_ and cv_entry_ subroutines, respectively.
  - copy the converted value to its assigned storage location.
  - for parameter with star extents (e.g., char(*), bit(*), etc),
    update the parameter descriptor with actual size for the argument
    being passed to the parameter.
  - store pointers to assigned argument storage and its (perhaps
    updated) descriptor in an argument list.
  - invoke entrypoint using the constructed argument list.


Upon return from the invoked entrypoint, the call command does the
following for each -inout or -out argument when invoked as a command:
  - convert its value from the parameter data type to a string
    representation.
  - display the value.
  - for a function call, display the return value.


Notes on example - initiate_file_:
The initiate_file_ subroutine has the following PL/I calling sequence:

   call initiate_file_( dir, entry, access_mode, ptr,
           bit_count, code);

The attributes for each parameter may be displayed by using the depd
command:

   depd initiate_file_
   dcl initiate_file_ entry( char(*), char(*), bit(*), ptr,
           fixed bin(24), fixed bin(35));


The following command initiates a file for reading; the file in the
current working directory is named 'my_file'.  Upon return from
initiate_file_, call displays the output arguments: a pointer to the
initiated file, its bit count, and a Multics status code:

   call initiate_file_  [wd]  my_file  100  -out  -out  -out -code


Notes on example - cv_ptr_:
Calling sequence for a function includes a descriptor for its returns
attribute.  This defines data the function returns to the caller.  For
example:

   ptr_value = cv_ptr_ (virtual_pointer, code);

   depd cv_ptr_
     dcl cv_ptr_ entry (char(*), fixed bin(35)) returns(ptr);

   call cv_ptr_  [hd]>[user name].profile  -out -code


The default action is equivalent to

   call cv_ptr_  [hd]>[user name].profile  -out -code  -out

which displays both the status code and function return value
(ptr_value).  To display only the status code for the given
virtual_pointer (not displaying the function return value), use:

   call cv_ptr_  [hd]>[user name].profile  -out -code  -ignore


Notes on example - iox_$get_line:
When calling a subroutine that accepts inputs of a buffer pointer and
its maxlength, and outputs the number of valid characters in that
buffer, use the -addr and -length options to have the returned data
displayed.  iox_$get_line is described as follows:

   call iox_$get_line (iocb_ptr, buff_ptr, buff_max_len, n_read,
          code);

   depd iox_$get_line
     dcl iox_$get_line entry (ptr, ptr, fixed bin(21), fixed bin(21),
          fixed bin(35));


Use call to invoke iox_$get_line, as follows.  [Input shown on
several lines should actually be given in a single command line.]

   call iox_$get_line -i [io find_iocb user_i/o]
                      -o -id buff -addr "char(buffL)" -length readN
		  -i 200 -id buffL
		  -o -id readN
		  -o -code


With user input...
   Results from iox_$get_line are this line.

call displays...
   -- Return from: iox_$get_line -------
    buff      337|2056 -> Results from iox_$get_line are this line.

    readN     42
    code05    OK


Argument 1 names an I/O switch.  call converts this initial value to
  an IOCB ptr.
Argument 2, named buff, is an output buffer pointer.  Call creates
  storage for "char(buffL)" characters, where buffL is the input value
  for the third argument.  Upon return, -length readN tells call how
  many characters in this buffer to display, where readN references
  the output value for the fourth argument.
Argument 3, named buffL, is an input argument giving max length (200
  characters) for the buffer in the second argument.
Argument 4, named readN, is an output argument giving actual length to
  display from the buffer in the second argument.
Argument 5 is a status code.


Notes on example - ioa_:
When calling a subroutine that accepts a variable number and type of
arguments, arguments have default attributes:  char(*) unaligned.
Use the -dcl option to specify the attributes of a different type.
ioa_ is described as:

   call ioa_ (control_string, arg1, ..., argN);

   depd ioa_
     dcl ioa_ entry() options(variable);


Use call to pass a character control_string that displays a pointer
and fixed bin(35) number.  [Input shown on several lines should
actually be given in a single command line.]

   call ioa_ "data at: ^p (^d bits)"
             247|400 -dcl ptr
             39786   -dcl "fixed bin(35)"

   data at: 247|400 (39786 bits)


Notes on supported data attributes:
Every parameter of a PL/I entrypoint has a data type, an aggregate
type, and an alignment type.  The call command follows PL/I rules when
converting arg_value string to the corresponding parameter attributes.
  - Alignment of storage supports both aligned and unaligned data.
  - Aggregate (array and structure) data is not supported.

The following data types are supported.


real fixed bin(P,S)
  fixed-point binary data type, with or without a precision (P) and
  scale factor (S).
real float bin(P)
  floating-point binary data, with or without a precision (P).
real fixed dec(P,S)
  fixed-point decimal data type, with or without a precision (P) and
  scale factor (S).
real float dec(P)
  floating-point decimal data type, with or without a precision (P).
char(N), char(N) varying, char(*), char(*) varying
  character data, with a given length (N) or unspecified length (*).
bit(N), bit(N) varying, bit(*), bit(*) varying
  bit string data, with a given length (N) or unspecified length (*).


pointer, ptr
  pointer data.
entry
  entry variable data.
area
  PL/I allocation area of given size.


List of unsupported data types:
  complex fixed bin(P,S)
  complex float bin(P)
  complex fixed dec(P,S)
  complex float dec(P)
  picture
  offset
  file
  format
  label


Notes on arg_value formats:
Each input arg_value includes a character representation of the
initial value for a subroutine argument.  In general, numbers and bit
strings are initialized by character data, in any format accepted by
PL/I conversion rules for character-to-numeric or character-to-bit.


real numbers (binary or decimal, fixed or float)
  23  -23.45
  2e3   (equivalent to 2000)
  0.2345e5  2.45e-6

  Fixed binary arguments may also be entered as octal or hexadecimal
  bit strings.  Bits are assigned to argument storage from
  right-to-left, following PL/I rules for converting a bit string to
  an fixed bin(17) parameter:
    55b3     (uses octal suffix b3:       equivalent to  45)
    2aDb4    (uses hexadecimal suffix b4: equivalent to 685)
    777777b3 (uses octal suffix b3:       equivalent to  -1)


bit string data
  Entered as a sequence of 1 and 0 characters (e.g., 10101101) which
  are converted to a bit string following PL/I character-to-bit
  conversion rules, and assigned left-to-right to the parameter.

  Values may also be entered in octal or hexadecimal format,
  as shown above for real numbers.  Bits are assigned to parameter
  storage from left-to-right.


pointer, ptr
  Use any format given in: virtual_pointers.gi.info.
entry pointer
  Use any format given in: virtual_entries.gi.info.


area
  Since there is no way to provide an initialize an area, or display
  its output value, an area is usually specified using the -ignore
  arg_value specifier.  If an area parameter is declared:
     dcl  area_parm area(*);
  you can specify an actual size for the corresponding argument using
  the -max_length M option:
     -ignore -max_length 2000
  Often, the parameter is declared as a pointer to an area:
     dcl  area_ptr ptr;
  In such cases, you can specify a pointer to an area of given word
  size:
     -ignore -addr "area(2000)"
