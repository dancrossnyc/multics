03/08/85  system_info_


The system_info_ subroutine allows the user to obtain information
concerning system parameters.  All entry points that accept more than
one argument count their arguments and only return values for the
number of arguments given.  Certain arguments, such as the price
arrays, must be dimensioned as shown.


Entry points in system_info_:
   (List is generated by the help command)


:Entry:  abs_chn:  03/08/85 system_info_$abs_chn


Function:  This entry point returns the event channel and process ID
for the process that is running the absentee user manager.


Syntax:
declare system_info_$abs_chn entry (fixed bin(71), bit(36) aligned);
call system_info_$abs_chn (ec, p_id);


Arguments:
ec
   is the event channel over which signals to absentee_user_manager_
   should be sent.  (Output)
p_id
   is the process ID of the absentee manager process (currently the
   initializer).  (Output)


:Entry:  abs_prices:  03/08/85 system_info_$abs_prices


Function:  This entry point returns the prices for CPU and real time
for each absentee queue.


Syntax:
declare system_info_$abs_prices entry ((4) float bin, (4) float bin);
call system_info_$abs_prices (cpurate, realrate);


Arguments:
cpurate
   is the price per CPU hour for absentee queues 1 to 4.  (Output)
realrate
   is the memory unit rate for absentee queues 1 to 4.  (Output)


:Entry:  access_ceiling:  03/08/85 system_info_$access_ceiling


Function:  This entry point returns the system_high access
authorization or class.


Syntax:
declare system_info_$access_ceiling entry (bit(72) aligned);
call system_info_$access_ceiling (ceil);


Arguments:
ceil
   is the access ceiling.  (Output)


:Entry:  category_names:  03/08/85 system_info_$category_names


Function:  This entry point returns the 32-character long names and the
eight-character short names for the access categories.


Syntax:
declare system_info_$category_names entry (dim(18) char(32), dim(18)
     char(8));
call system_info_$category_names (long, short);


Arguments:
long
   is an array of the long level names.  (Output)
short
   is an array of the short level names.  (Output)


:Entry: default_absentee_queue: 03/08/85 system_info_$default_absentee_queue


Function:  This entry point returns the number of the default absentee
queue used for submission of absentee jobs by the enter_abs_request,
pl1_abs, fortran_abs, etc., commands.


Syntax:
declare system_info_$default_absentee_queue entry (fixed bin);
call system_info_$default_absentee_queue (default_q);


Arguments:
default_q
   is the default absentee queue.  (Output)


:Entry:  device_prices:  03/08/85 system_info_$device_prices


Function:  This entry point returns the per-shift prices for system
device usage.


Syntax:
declare system_info_$device_prices entry (fixed bin, ptr);
call system_info_$device_prices (ndev, dev_ptr);


Arguments:
ndev
   is the number of devices with prices.  (Output)
dev_ptr
   points to an array where device prices are stored.  (Input)


Notes:  In the above entry point, the user must provide the following
array (in his storage) for device prices:
   dcl 1 dvt(16)                 based (dev_ptr) aligned,
         2 device_id             char(8),
         2 device_price          (0:7) float bin;


   Structure elements:
   dvt
      is the user structure.  Only the first ndev of the 16 is filled
      in.
   device_id
      is the name of the device.
   device_price
      is the per-hour, per-shift price for the device.


:Entry:  installation_id:  03/08/85 system_info_$installation_id


Function:  This entry point returns the 32-character installation
identifier that is typed in the header of the how_many_users command
when the -long control argument is specified.


Syntax:
declare system_info_$installation_id entry (char(*));
call system_info_$installation_id (id);


Arguments:
id
   is the installation identifier.  (Output)


:Entry:  io_prices:  03/08/85 system_info_$io_prices


Function:  This entry point returns the prices for unit processing for
each I/O daemon queue.


Syntax:
declare system_info_$io_prices entry ((4) float bin);
call system_info_$io_prices (rp);


Arguments:
rp
   is the price per 1000 lines for each I/O daemon queue.  (Output)


:Entry:  last_shutdown:  03/08/85 system_info_$last_shutdown


Function:  This entry point returns the clock time of the last shutdown
or crash and an eight-character string giving the ERF (error report
form) number of the last crash (blank if the last shutdown was not a
crash).


Syntax:
declare system_info_$last_shutdown entry (fixed bin(71), char(*));
call system_info_$last_shutdown (time, erfno);


Arguments:
time
   is the clock time of the last shutdown.  (Output)
erfno
   is the ERF number of the last crash, or blank.  (Output)


:Entry:  level_names:  03/08/85 system_info_$level_names


Function:  This entry point returns the 32-character long names and
eight-character short names for sensitivity levels.


Syntax:
declare system_info_$level_names entry (dim(0:7) char(32), dim(0:7)
     char(8));
call system_info_$level_names (long, short);


Arguments:
long
   is an array of the long level names.  (Output)
short
   is an array of the short level names.  (Output)


:Entry:  max_rs_number:  03/08/85 system_info_$max_rs_number


Function:  This entry point returns the largest valid rate structure
number.


Syntax:
declare system_info_$max_rs_number entry (fixed bin(17));
call system_info_$max_rs_number (rs_number);


Arguments:
rs_number
   is the largest valid rate structure number.  If it is zero, there
   are no rate structures defined, other than the default one in
   installation_parms.  (Output)


:Entry:  next_shift_change:  03/08/85 system_info_$next_shift_change


Function:  This entry point returns the number of the current shift,
the time it started, the time it will end, and the number of the next
shift.


Syntax:
declare system_info_$next_shift_change entry (fixed bin, fixed bin(71),
     fixed bin, fixed bin(71);
call system_info_$next_shift_change (now_shift, change_time, new_shift,
     start_time);


Arguments:
now_shift
   is the current shift number.  (Output)
change_time
   is the time the shift changes.  (Output)
new_shift
   is the shift after change_time.  (Output)
start_time
   is the time the current shift started.  (Output)


:Entry:  next_shutdown:  03/08/85 system_info_$next_shutdown


Function:  This entry point returns the time of the next scheduled
shutdown, the reason for the shutdown, and the time when the system
will return, if these data are available.


Syntax:
declare system_info_$next_shutdown entry (fixed bin(71), char(*),
     fixed bin(71));
call system_info_$next_shutdown (td, rsn, tn);


Arguments:
td
   is the time of the next scheduled shutdown.  If none is scheduled,
   this is 0.  (Output)
rsn
   is the reason for the next shutdown (a maximum of 32 characters).
   If it is not known, it is blank.  (Output)
tn
   is the time the system will return.  If it is not known, it is 0.
   (Output)


:Entry:  prices:  03/08/85 system_info_$prices


Function:  This entry point returns the per-shift prices for
interactive use.


Syntax:
declare system_info_$prices entry ((0:7) float bin, (0:7) float bin,
     (0:7) float bin, (0:7) float bin, float bin, float bin);
call system_info_$prices (cpu, log, prc, cor, dsk, reg);


Arguments:
cpu
   is the CPU-hour rate per shift.  (Output)
log
   is the connect-hour rate per shift.  (Output)
prc
   is the process-hour rate per shift.  (Output)
cor
   is the page-second rate for main memory per shift.  (Output)
dsk
   is the page-second rate for secondary storage.  (Output)
reg
   is the registration fee per user per month.  (Output)


:Entry:  resource_price:  03/08/85 system_info_$resource_price


Function:
 This entry point returns the price of a specified resource.


Syntax:
declare system_info_$resource_price entry (char(*), float bin, fixed
     bin (35));
call system_info_$resource_price entry (name, price, code);


Arguments:
name
   is the name of the resource.  (Input)
price
   is the price of the resource in dollars per unit.  (Output)
code
   is a standard status code.  It will be error_table_$noentry if the
   resource is not in the price list.  (Output)


:Entry:  rs_name:  03/08/85 system_info_$rs_name


Function:  This entry point returns the rate structure name
corresponding to a rate structure number.


Syntax:
declare system_info_$rs_name entry (fixed bin(17), char(*),
     fixed bin(35));
call system_info_$rs_name (rs_number, rs_name, code);


Arguments:
rs_number
   is the number of a rate structure.  (Input)
rs_name
   is the name corresponding to rs_number.  (The name can be up to 32
   characters long.)  (Output)
code
   is zero if no error occurred, or error_table_$noentry if rs_number
   is not the number of a defined rate structure.  (Output)


:Entry:  rs_number:  03/08/85 system_info_$rs_number


Function:  This entry point returns the rate structure number
corresponding to a rate structure name.


Syntax:
declare system_info_$rs_number entry (char(*), fixed bin(17),
     fixed bin(35));
call system_info_$rs_number (rs_name, rs_number, code);


Arguments:
rs_name
   is the name of a rate structure.  (Input)
rs_number
   is the number corresponding to rs_name.  (Output)
code
   is zero if no error occurred, or error_table_$noentry if rs_name is
   not the name of a rate structure.  (Output)


:Entry:  shift_table:  03/08/85 system_info_$shift_table


Function:  This entry point returns the local shift definition table of
the system.


Syntax:
declare system_info_$shift_table entry ((336) fixed bin);
call system_info_$shift_table (stt);


Arguments:
stt
   is a table of shifts, indexed by half-hour within the week e.g.,
   stt(1) gives the shift for 0000-0030 Mondays.  (Output)


:Entry:  trusted_path:  03/08/85 system_info_$trusted_path


Function:  This entry point returns bit flags indicating which trusted
path facilities are required by the site.  At present, only one,
"login" is implemented under the control of the "trusted_path_login"
installation parameter, to disable the use of logout -hold and new_proc
-authorization.


Syntax:
declare system_info_$trusted_path entry () returns (bit (36) aligned;
string (trusted_path) = system_info_$trusted_path ();
declare 1 trusted_path
             2 login bit(1) unaligned,
             2 pad bit(35) unaligned;


Arguments:
trusted_path_login
   indicates the state of the "trusted_path_login" installation
   parameter.


:Entry:  sysid:  03/08/85 system_info_$sysid


Function:  This entry point returns the eight-character system
identifier that is typed in the header of the who command and at
dial-up time.


Syntax:
declare system_info_$sysid entry (char(*));
call system_info_$sysid (sys);


Arguments:
sys
   is the system identifier that identifies the current system.
   (Output) Normally this is the Multics Release number (eg, MR10.1).


:Entry:  timeup:  03/08/85 system_info_$timeup


Function:  This entry point returns the time at which the system was
last started up.


Syntax:
declare system_info_$timeup entry (fixed bin(71));
call system_info_$timeup (tu);


Arguments:
tu
   is when the system came up.  (Output)


:Entry:  titles:  03/08/85 system_info_$titles


Function:  This entry point returns several character strings that more
formally identify the installation.


Syntax:
declare system_info_$titles entry (char(*), char(*), char(*), char(*));
call system_info_$titles (c, d, cc, dd);


Arguments:
c
   is the company or institution name (a maximum of 64 characters).
   (Output)
d
   is the department or division name (a maximum of 64 characters).
   (Output)
cc
   is the company name, double spaced (a maximum of 120 characters).
   (Output)
dd
   is the department name, double spaced (a maximum of 120 characters).
   (Output)


:Entry:  users:  03/08/85 system_info_$users


Function:  This entry point returns the current and maximum number of
load units and users.


Syntax:
declare system_info_$users entry (fixed bin, fixed bin, fixed bin,
     fixed bin);
call system_info_$users (mn, nn, mu, nu);


Arguments:
mn
   is the maximum number of users.  (Output)
nn
   is the current number of users.  (Output)
mu
   is the maximum number of load units (times 10).  (Output)
nu
   is the current number of load units (times 10).  (Output)


:Entry:  version_id:  03/08/85 system_info_$version_id


Function:  This entry point returns the eight-character version
identifier that is written on the hardcore system tape currently
running.  This might be set to "37-19.3", which is an internal version
number.  This information is different from the information that is
obtained with the system_info_$sysid entry point.


Syntax:
declare system_info$_version_id entry (char(*));
call system_info_$version_id (vers);


Arguments:
vers
   is the version identifier that identifies the current version of the
   system.  (Output)
