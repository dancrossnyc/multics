:Info: window_call: wdc: 03/01/85  window_call, wdc

Syntax as a command:  wdc arguments {-control_args}


Syntax as an active function:  [wdc arguments {-control_args}]


Function: provides a command interface to the video system (see the
Programmer's Reference Manual for a description of the video system).


List of operations:
   For a detailed description of any operation, type
   "help wdc.OPNAME".
bell
change_window, chgwd
clear_region, clrgn
clear_to_end_of_line, cleol
clear_to_end_of_window, cleowd
clear_window, clwd
create_window, crwd
delete_chars, dlch
delete_window, dlwd
get_echoed_chars, gech
get_first_line, gfl
get_one_unechoed_char, gouch


get_position, gpos
get_terminal_height, gtmhgt
get_terminal_width, gtmwid
get_unechoed_chars, guch
get_window_height, gwdhgt
insert_text, itx
invoke
overwrite_text, otx
revoke
scroll_region, scrgn
set_position, spos
set_position_rel, sposrel


supported_terminal
sync
video_invoked
write_sync_read, wsr


:Info: window_call.bell: wdc.bell: 03/01/85  window_call bell operation

Syntax as a command:  wdc bell {-io_switch STR}


Function: activates the terminal bell.  On some terminals, this may
produce a visual indication instead of an audible tone.  The cursor
position must be defined.  The cursor is positioned to the current
position of the specified window, if it is elsewhere on the screen.


Control arguments:
-io_switch STR, -is STR
   specifies the name of an I/O switch for a window.  This serves to
   identify the window.  If you don't provide it, user_i/o is assumed.


:Info: window_call.change_window: wdc.change_window: window_call.chgwd: wdc.chgwd: 03/01/85  window_call change_window operation

Syntax as a command:  wdc chgwd {-line N} {-column N} {-height N}
   {-width N} {-io_switch STR}


Function: changes the origin or size of the specified window.  You
must give at least one of -column, -height, -line, or -width.  If you
give only -line (changing the top line of the window), the window
length is automatically adjusted: i.e., if -line increases the value
of the top line number (moving the window down), the window length
shrinks accordingly; however if -line decreases the top line number
(moving the window up), the length remains the same.  If you supply
only -height (changing the window length), the origin line remains the
same.  If you select only -width (changing the window width), the
origin column remains the same.


Control arguments:
-column N, -col N
   specifies a column on the screen.  If you don't give it, the default
   is the remainder of the screen.  (Default: 1, the leftmost column)
-height N, -hgt N
   specifies the height of a region or a window for a request.  If you
   don't supply it, the default is the remainder of the screen.
-io_switch STR, -is STR
   specifies the name of an I/O switch for a window.  This serves to
   identify the window.  If you don't provide it, user_i/o is assumed.
-line N
   specifies a line on the screen.  (Default: 1, the top line)
-width N, -wid N
   specifies the width of a region for a request.  If you don't provide
   it, the default is the remainder of the screen.


:Info: window_call.clear_region: wdc.clear_region: window_call.clrgn: wdc.clrgn: 03/01/85  window_call clear_region operation

Syntax as a command:
   wdc clrgn -line N -column N -height N -width N {-io_switch STR}


Function: clears the specified rectangular region of the window to
blanks.  The region may be part or all of the window.


Control arguments:
-column N, -col N
   specifies a column on the screen.  If you don't give it, the default
   is the remainder of the screen.  (Default: 1, the leftmost column)
-height N, -hgt N
   specifies the height of a region or a window for a request.  If you
   don't supply it, the default is the remainder of the screen.
-io_switch STR, -is STR
   specifies the name of an I/O switch for a window.  This serves to
   identify the window.  If you don't provide it, user_i/o is assumed.
-line N
   specifies a line on the screen.  (Default: 1, the top line)
-width N, -wid N
   specifies the width of a region for a request.  If you don't provide
   it, the default is the remainder of the screen.


:Info: wdc.clear_to_end_of_line: window_call.cleol: wdc.cleol: 02/09/84  window_call clear_to_end_of_line operation


Syntax as a command:  wdc cleol {-io_switch STR}


Function: clears the line from the current cursor position to the end
of the line to blanks.  You must define the current cursor position.


Control arguments:
-io_switch STR, -is STR
   specifies the name of an I/O switch for a window.  This serves to
   identify the window.  If you don't provide it, user_i/o is assumed.


:Info: wdc.clear_to_end_of_window: window_call.cleowd: wdc.cleowd: 03/01/85  window_call clear_to_end_of_window operation


Syntax as a command:  wdc cleowd {-io_switch STR}


Function:  clears the window from the current cursor position to the
end of the window to blanks.  You must define the current cursor
position.


Control arguments:
-io_switch STR, -is STR
   specifies the name of an I/O switch for a window.  This serves to
   identify the window.  If you don't provide it, user_i/o is assumed.


:Info: window_call.clear_window: wdc.clear_window: window_call.clwd: wdc.clwd: 03/01/85  window_call clear_window operation

Syntax as a command:  wdc clwd {-io_switch STR}


Function: clears the specified window so that its content becomes
entirely blank.  The current cursor position is defined to be at line
1, column 1 of the specified window.


Control arguments:
-io_switch STR, -is STR
   specifies the name of an I/O switch for a window.  This serves to
   identify the window.  If you don't provide it, user_i/o is assumed.


:Info: window_call.create_window: wdc.create_window: window_call.crwd: wdc.crwd: 03/01/85  window_call create_window operation

Syntax as a command:  wdc crwd -io_switch STR {-line N -column N
   -height N -width N}


Function: creates a new window on the screen with name (and I/O
switch) STR.  The window is blank when created, and the cursor position
is line 1, column 1 of the new window.


Control arguments:
-column N, -col N
   specifies a column on the screen.  If you don't give it, the default
   is the remainder of the screen.  (Default: 1, the leftmost column)
-height N, -hgt N
   specifies the height of a region or a window for a request.  If you
   don't supply it, the default is the remainder of the screen.
-io_switch STR, -is STR
   specifies the name of an I/O switch for a window.  This serves to
   identify the window.  If you don't provide it, user_i/o is assumed.
-line N
   specifies a line on the screen.  (Default: 1, the top line)
-width N, -wid N
   specifies the width of a region for a request.  If you don't provide
   it, the default is the remainder of the screen.


:Info: window_call.delete_chars: wdc.delete_chars: window_call.dlch: wdc.dlch: 03/01/85  window_call delete_chars operation


Syntax as a command:  wdc dlch -count N {-io_switch STR}


Function: deletes N characters to the right of the current cursor
position on the current line.  The cursor remains stationary;
characters to the right of the deleted characters move to the left to
fill the vacated space.  You must define the current cursor position.


Control arguments:
-count N, -ct N
   specifies a count.
-io_switch STR, -is STR
   specifies the name of an I/O switch for a window.  This serves to
   identify the window.  If you don't provide it, user_i/o is assumed.


:Info: window_call.delete_window: wdc.delete_window: window_call.dlwd: wdc.dlwd: 03/01/85  window_call delete_window operation

Syntax as a command:  wdc dlwd -io_switch STR


Function: destroys the specified window.  The I/O switch is closed and
detached.


Control arguments:
-io_switch STR, -is STR
   specifies the name of an I/O switch for a window.  This serves to
   identify the window.  If you don't provide it, user_i/o is assumed.


:Info: wdc.get_echoed_chars: window_call.gech: wdc.gech: 03/01/85  window_call get_echoed_chars operation


Syntax as a command:  wdc gech -count N {-io_switch STR}


Syntax as an active function:  [wdc gech -count N {-io_switch STR}]


Function: reads characters from the terminal until either N characters
or a break character is read.  All characters except the break are
echoed on the screen in the current window.  For information on break
characters, see the break_table control order in the description of
window_io_.  You must define the current cursor position.  As an active
function, two strings are returned:  the first contains any nonbreak
characters read, and the second contains the break character, if any.


Control arguments:
-count N, -ct N
   specifies a count.
-io_switch STR, -is STR
   specifies the name of an I/O switch for a window.  This serves to
   identify the window.  If you don't provide it, user_i/o is assumed.


:Info: window_call.get_first_line: wdc.get_first_line: window_call.gfl: wdc.gfl: 03/01/85  window_call get_first_line operation

Syntax as a command:  wdc gfl {-io_switch STR}


Syntax as an active function:  [wdc gfl {-io_switch STR}]


Function: prints/returns the line on the screen where the specified
window begins.


Control arguments:
-io_switch STR, -is STR
   specifies the name of an I/O switch for a window.  This serves to
   identify the window.  If you don't provide it, user_i/o is assumed.


:Info: wdc.get_one_unechoed_char: window_call.gouch: wdc.gouch: 03/01/85  window_call get_one_unechoed_char operation

Syntax as a command:  wdc gouch {-io_switch STR}


Syntax as an active function:  [wdc gouch {-io_switch STR}]


Function: reads/returns a single unechoed character from the terminal.


Control arguments:
-io_switch STR, -is STR
   specifies the name of an I/O switch for a window.  This serves to
   identify the window.  If you don't provide it, user_i/o is assumed.


:Info: window_call.get_position: wdc.get_position: window_call.gpos: wdc.gpos: 03/01/85  window_call get_position operation

Syntax as a command:  wdc gpos {-io_switch STR}


Syntax as an active function:  [wdc gpos {-io_switch STR}]


Function: prints the current line and column position of the cursor.
As an active function, returns the line and column position as a pair
of integers separated by a space.


Control arguments:
-io_switch STR, -is STR
   specifies the name of an I/O switch for a window.  This serves to
   identify the window.  If you don't provide it, user_i/o is assumed.


:Info: wdc.get_terminal_height: window_call.gtmhgt: wdc.gtmhgt: 03/01/85  window_call get_terminal_height operation

Syntax as a command:  wdc gtmhgt


Syntax as an active function:  [wdc gtmhgt]


Function: prints/returns the total number of lines on your terminal.


:Info: wdc.get_terminal_width: window_call.gtmwid: wdc.gtmwid: 03/01/85  window_call get_terminal_width operation

Syntax as a command:  wdc gtmwid


Syntax as an active function:  [wdc gtmwid]


Function: prints the total number of columns on your terminal.  As an
active function, returns the total number of columns on your the
terminal until either a break character or N characters are read.  You
must define the current cursor position.


:Info: wdc.get_unechoed_chars: window_call.guch: wdc.guch: 03/01/85  window_call get_unechoed_chars operation

Syntax as a command:  wdc guch -count N {-io_switch STR}


Syntax as an active function:  [wdc guch -count N {-io_switch STR}]


Function: reads characters from the terminal until either N characters
or a break character are read.  You must define the current cursor
position.  As an active string, returns two strings:  the first
contains any nonbreak characters read, the second contains the break
character, if any.


Control arguments:
-count N, -ct N
   specifies a count.
-io_switch STR, -is STR
   specifies the name of an I/O switch for a window.  This serves to
   identify the window.  If you don't provide it, user_i/o is assumed.


:Info: wdc.get_window_height: window_call.gwdhgt: wdc.gwdhgt: 03/01/85  window_call get_window_height operation


Syntax as a command:  wdc gwdhgt {-io_switch STR}


Function: prints the height of the specified window.


Control arguments:
-io_switch STR, -is STR
   specifies the name of an I/O switch for a window.  This serves to
   identify the window.  If you don't provide it, user_i/o is assumed.


:Info: window_call.insert_text: wdc.insert_text: window_call.itx: wdc.itx: 03/01/85  window_call insert_text operation

Syntax as a command:  wdc itx -string STR {-io_switch STR}


Function:  displays the text string STR at the current cursor position.
If there are any characters to the right of the current position on the
current line, they are moved to the right to accommodate the new
string.  There is no wrap-around feature:  if text goes off the screen,
it is dropped.  The text string STR must contain only printable ASCII
characters.  Use "io_call put_chars" to display nonprintable characters
in a readable form.


Control arguments:
-io_switch STR, -is STR
   specifies the name of an I/O switch for a window.  This serves to
   identify the window.  If you don't provide it, user_i/o is assumed.
-string STR, -str STR
   specifies a text string for display, where N must be quoted if it
   contains blanks.


:Info: window_call.invoke: wdc.invoke: 03/01/85 window_call invoke operation


Syntax as a command:  wdc invoke {-line_speed N}


Function: activates the video system on your terminal.  If you give no
line speed, the current one is used.  Your terminal must be attached
with the tty_ I/O module.  If graphics or auditing is in use, remove it
before you give this command.  The settings of the following tty_ modes
are copied when you invoke the video system:  vertsp, can, erkl, esc,
red, and ctl_char.  In addition, if ^pl is set on video system
invocation, ^more will be set in the video system.  (For more details
on modes, see the window_io_ I/O module.)  Similarly, the settings of
the current erase and kill characters are copied when the video system
is invoked.


Control arguments:
-line_speed N, -ls N
   specifies the speed of the terminal's connection to Multics, where N
   is in characters per second.


:Info: window_call.overwrite_text: wdc.overwrite_text: window_call.otx: wdc.otx: 02/09/84  window_call overwrite_text operation


Syntax as a command:  wdc otx -string STR {-io_switch STR}


Function: displays the text string STR at the current cursor position
in the window.  If there is any text to the right of the current
position in the window, it is overwritten with the string supplied.
The text string STR must contain only printable ASCII characters.  Use
"io_call put_chars" to display nonprintable characters in a readable
form.


Control arguments:
-io_switch STR, -is STR
   specifies the name of an I/O switch for a window.  This serves to
   identify the window.  If you don't provide it, user_i/o is assumed.
-string STR, -str STR
   specifies a text string for display, where N must be quoted if it
   contains blanks.


:Info: window_call.revoke: wdc.revoke: 03/01/85 window_call revoke operation


Syntax as a command:  wdc revoke


Function: removes the video system from your terminal.  The standard
tty_ attachment is restored.  The settings of the following modes are
copied when you revoke the video system:  vertsp, can, erkl, esc, red,
and ctl_char.  If ^more is set while in the video system, ^pl mode is
set after revoking the video system.  (For more details on modes, see
the window_io_ I/O module.)  Similarly, the settings of the current
erase and kill characters are copied when the video system is revoked.


:Info: window_call.scroll_region: wdc.scroll_region: window_call.scrgn: wdc.scrgn: 03/01/85  window_call scroll_region operation


Syntax as a command:
   wdc scrgn -count N {-line N -height N -io_switch STR}


Function: scrolls the specified region N lines as indicated by -count.
The specified region is the whole width of the screen.  It can be a
whole window or part of a window.  If -count N is negative, the window
is scrolled down; if positive, the window is scrolled up.  If lines are
scrolled off the screen, they are dropped.


Control arguments:
-count N, -ct N
   specifies a count.
-height N, -hgt N
   specifies the height of a region or a window for a request.  If you
   don't supply it, the default is the remainder of the screen.
-io_switch STR, -is STR
   specifies the name of an I/O switch for a window.  This serves to
   identify the window.  If you don't provide it, user_i/o is assumed.
-line_speed N, -ls N
   specifies the speed of the terminal's connection to Multics, where N
   is in characters per second.


:Info: window_call.set_position: wdc.set_position: window_call.spos: wdc.spos: 03/01/85  window_call set_position operation

Syntax as a command:  wdc spos -line N -column N {-io_switch STR}


Function:  positions the cursor to the specified line and column of the
specific window.


Control arguments:
-column N, -col N
   specifies a column on the screen.  If you don't give it, the default
   is the remainder of the screen.  (Default: 1, the leftmost column)
-io_switch STR, -is STR
   specifies the name of an I/O switch for a window.  This serves to
   identify the window.  If you don't provide it, user_i/o is assumed.
-line_speed N, -ls N
   specifies the speed of the terminal's connection to Multics, where N
   is in characters per second.


:Info: wdc.set_position_rel: window_call.sposrel: wdc.sposrel: 03/01/85  window_call set_position_rel operation

Syntax as a command:  wdc sposrel -line N -column N {-io_switch STR}


Function: changes the cursor position by N lines and N columns.  You
must define the current cursor position.  You must give one of -line or
-column and can use both; whichever control argument you don't supply
defaults to zero.


Control arguments:
-column N, -col N
   specifies a column on the screen.  If you don't give it, the default
   is the remainder of the screen.  (Default: 1, the leftmost column)
-io_switch STR, -is STR
   specifies the name of an I/O switch for a window.  This serves to
   identify the window.  If you don't provide it, user_i/o is assumed.
-line_speed N, -ls N
   specifies the speed of the terminal's connection to Multics, where N
   is in characters per second.


:Info: wdc.supported_terminal: 03/01/85  window_call supported_terminal operation


Syntax as a command:  wdc supported_terminal {-ttp terminal_type}


Syntax as an active function:
   [wdc supported_terminal {-ttp terminal_type}]


Function: prints the terminal type that is supported by the video
system.  If you don't supply a terminal type, the current one is used.
As an active function, returns "true" if you can invoke the video
system on the given terminal type, "false" otherwise.


Control arguments:
-terminal_type STR, -ttp STR
   states the name of the terminal type, where STR is a terminal type.
   To see accepted terminal types, type "print_terminal_types."


:Info: window_call.sync: wdc.sync: 03/01/85  window_call sync operation

Syntax as a command:  wdc sync {-io_switch STR}


Function: waits for the last operation performed on the window to be
completed.  Over certain networks it may not be possible to actually
wait for delivery of the characters to the terminals.


Control arguments:
-io_switch STR, -is STR
   specifies the name of an I/O switch for a window.  This serves to
   identify the window.  If you don't provide it, user_i/o is assumed.


:Info: window_call.video_invoked: wdc.video_invoked: 03/01/85  window_call video_invoked operation


Syntax as a command:  wdc video_invoked


Syntax as an active function:  [wdc video_invoked]


Function: prints the message "The video system has been invoked" if
you are already in the video system; otherwise it prints "The video
system has not been invoked."  As an active function, returns "true" if
the video system is in use in your process, "false" othewise.


:Info: window_call.write_sync_read: wdc.write_sync_read:  window_call.wsr: wdc.wsr: 02/09/84  window_call write_sync_read operation


Syntax as a command:  wdc wsr -string STR -count N {-io_switch STR}


Syntax as an active function:
   [wdc wsr -string STR -count N {-io_switch STR}]


Function: displays a prompting string STR at the current cursor
position in the window and then reads input typed in response to the
prompt.  Characters are read unechoed until either N characters or a
break character is read.  As an active function, prints a prompting
string and returns the characters read.


Control arguments:
-count N, -ct N
   specifies a count.
-io_switch STR, -is STR
   specifies the name of an I/O switch for a window.  This serves to
   identify the window.  If you don't provide it, user_i/o is assumed.
-string STR, -str STR
   specifies a text string for display, where N must be quoted if it
   contains blanks.
