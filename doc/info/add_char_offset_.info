06/25/81	add_char_offset_


Entry points in add_char_offset_:
   (List is generated by the help command)


:Entry: add_char_offset_: 05/11/81  add_char_offset_

Function: returns a pointer to a character relative to the character
referenced by the input pointer.  The displacement to the desired
character may be positive, negative, or zero.


Syntax:
dcl add_char_offset_ entry (ptr, fixed bin (21)) returns (ptr)
     reducible;
new_pointer_value = add_char_offset_ (pointer_value,
     char_displacement);


Arguments:
pointer_value
   is the original pointer to which the character displacement is
   applied.  (Input)
char_displacement
   is the displacement in characters to be applied to the above
   pointer.  (Input)
new_pointer_value
   is the result of this operation.  (Output)


Notes:  If the pointer supplied to add_char_offset_ does not point to a
character boundary, this operation is applied to a pointer value which
references the character containing the bit located by the input
pointer.

Thus, the program fragment
     a_ptr = add_char_offset_ (a_ptr, 0);
may be used to insure that "a_ptr" points to a character boundary.

If the result of applying the displacement would cause the pointer to
reference outside the legal boundaries of a segment (either a negative
offset or an offset beyond 256K words), the result of the call
is not defined.


Examples:
The program fragment

     current_char_ptr = add_char_offset (current_char_ptr, -1);

changes the value of current_char_ptr to locate the previous character
in the segment.
