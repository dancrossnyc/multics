10/04/85	set_lock_

The set_lock_ subroutine enables cooperating processes to coordinate
their use of shared resources.


Entry points in set_lock_:
   (List is generated by the help command)


:Entry: lock:  10/04/85  set_lock_$lock


Function:	 This entry point attempts to place the lock identifier of
the calling process in the given lock word.


Usage:
declare set_lock_$lock entry (bit(36) aligned, fixed bin,
     fixed bin(35));
call set_lock_$lock (lock_word, wait_time, code);


Arguments:
lock_word
   is the word to be locked.	(Input/Output)
wait_time
   indicates the length of real time, in seconds, that the
   set_lock_$lock entry point should wait for a validly locked lock
   word to be unlocked before returning unsuccessfully.  (Input) A
   value of -1 indicates no time limit.


code
   is a standard status code.	 (Output) It can be one of the following:
   error_table_$invalid_lock_reset
        indicates that the lock word was successfully locked, but the
        lock word previously contained an invalid lock identifier that
        was overwritten
   error_table_$locked_by_this_process
        indicates that the lock word already contained the lock
        identifier of the calling process and was not modified
   error_table_$lock_wait_time_exceeded
        indicates that the lock word contained a valid lock identifier
        of another process and could not be locked in the given time
        limit


   error_table_$no_w_permission
        indicates that calling process does not have proper write
        permission to lock_word


Notes:
It is suggested that set_lock_$lock be called as follows for
applications where efficiency is important:

   if ^stacq (lock_word, static_var_initialized_to_lock_id, ""b)
      then call set_lock_$lock (lock_word, wait_time, code);
      else code = 0;


:Entry: unlock:  10/04/85  set_lock_$unlock


Function:	 This entry point attempts to reset a given lock word to "0"b
and is successful if the lock word contained the lock identifier of the
calling process.


Usage:
declare set_lock_$unlock entry (bit(36) aligned, fixed bin (35));
call set_lock_$unlock (lock_word, code);


Arguments:
lock_word
   is the lock word to be reset.  (Input/Output)
code
   is a standard status code.	 (Output)
   error_table_$lock_not_locked
        indicates that the lock was not locked
   error_table_$locked_by_other_process
        indicates that the lock was not locked by this process and
        therefore was not unlocked
   error_table_$no_w_permission
        indicates that calling process does not have proper write
        permission to lock_word


Notes:
It is suggested that set_lock_$unlock be called as follows for
applications where efficiency is important:

   if ^stacq (lock_word, ""b, static_var_initialized_to_lock_id)
      then call set_lock_$unlock (lock_word, code);
      else code = 0;
