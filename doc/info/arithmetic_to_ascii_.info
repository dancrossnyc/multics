03/05/85  arithmetic_to_ascii_


The arithmetic_to_ascii_ subroutine formats any arithmetic value into a
compact ascii form.  An integer, fractional, or exponential format can
be used, depending on the number to be converted.  Fixed-point numbers
are truncated during the formatting process; floating-point numbers are
rounded.


Entry points in arithmetic_to_ascii_:
   (List is generated by the help command)


:Entry: arithmetic_to_ascii_: 03/05/85  arithmetic_to_ascii_


Function:
This entry point formats any arithmetic value into a compact ascii 
form.


Syntax:
declare arithmetic_to_ascii_ entry (ptr, fixed bin, bit(1) aligned,
     fixed bin, fixed bin, char(132) varying);
call arithmetic_to_ascii_ (v_ptr, type, packed, precision, scale,
     result);


Arguments:
v_ptr
   is a pointer to the value to be converted.  (Input) It can be any
   arithmetic data type (real or complex, fixed or float, binary or
   decimal, single or double precision).
type
   is a standard Multics descriptor type.  (Input) See the Programmer's
   Reference Manual for a list of standard Multics data types.
packed
   indicates whether the value is packed or unpacked.  (Input)
   "0"b   value is unpacked.
   "1"b   value is packed.
precision
   is the precision of the value to be converted.  (Input)
scale
   is the scale factor of the value to be converted.  (Input)
result
   is the character-string representation of the value to be converted;
   it contains no blanks.  (Output)


Notes:  If the value is complex, the real and imaginary parts are
formatted by correcting them to float decimal(59) and converting each
part separately.  The result returned by the arithmetic_to_ascii_
subroutine is the concatenation of the real and imaginary converted
parts, with a leading sign and trailing "i" supplied for the imaginary
part.
