03/08/85  dprint_


This subroutine contains several entry points used to submit requests
to the I/O daemon for printing or punching of segments and multisegment
files.


Entry points in dprint_:
   (List is generated by the help command)


:Entry: dprint_: 03/08/85 dprint_


Function:
The dprint_ entry point adds a request to print, punch, or plot a
segment or multisegment file to the specified queue.


Syntax:
declare dprint_ entry (char(*), char(*), ptr, fixed bin(35));
call dprint_ (dir_name, entryname, dprint_arg_ptr, code);


Arguments:
dir_name
   is the absolute pathname of the containing directory.  (Input)
entryname
   is the entry name of the segment, multisegment file, or link to the
   segment or multisegment file to be printed, punched, or plotted.
   (Input)
dprint_arg_ptr
   is a pointer to the dprint_arg structure (described in system
   include file dprint_arg.incl.pl1) that defines the options for
   this request.  If this pointer   is null, the default settings are
    used for all options.  (Input)
code
   is a standard status code.  (Output)


Notes: The dprint_ subroutine uses the structure, defined in
the system include file dprint_arg.incl.pl1, to determine the details
of the request.  If no structure is supplied, default values are used.


:Entry: check_daemon_access: 03/08/85 dprint_$check_daemon_access


Function: This entry point checks the I/O daemon's access to a given
segment or multisegment file.  It returns whether the daemon
responsible for a given request type has "r" access to the file and "s"
access to the containing directory and whether the I/O daemon
coordinator can delete the file if requested.


Syntax:
declare dprint_$check_daemon_access entry (char(*), char(*), char(*),
     bit(1) aligned, bit(1) aligned, bit(1) aligned, char(*),
     fixed bin(35));
call dprint_$check_daemon_access (dirname, entryname, request_type,
     delete_permission, read_permission, status_permission,
     driver_userid, code);


Arguments:
dirname
   is the absolute pathname of the containing directory.  (Input)
entryname
   is the entry name of the segment, or multisegment file, or a link to
   the segment or multisegment file for which the daemon's access is to
   be checked.  (Input)
request_type
   is the name of the request type in which a request to print, punch
   or plot the file will be placed.  The access of the driver process
   for this request type will be returned.  (Input)
delete_permission
   indicates whether the I/O coordinator has sufficient access to
   delete the file if requested.  The coordinator requires "m" access
   to the containing directory to delete the file.  (Output)


read_permission
   indicates whether the driver process of the given request type has
   "r" access to the given segment or multisegment file.  (Output)
status_permission
   indicates whether the driver process of the given request type has
   "s" access to the directory containing the segment or multisegment
   file.  (Output)
driver_userid
   is the name of the process that processes requests for the specified
   type.  This value is in the form "Person_id.Project_id.*".  (Output)
code
   is a standard system status code.  (Output)


Notes: The user must have "s" access to the directory containing the
segment or multisegment file to determine whether the driver has read
access to the file.

The user must have "s" access to the directory containing the directory
containing the segment or multisegment file in order to determine
whether the I/O coordinator can delete the file and whether the driver
process has "s" access to the containing directory.


:Entry: queue_contents: 03/08/85 dprint_$queue_contents


Function: This entry point returns the number of requests in a
specific I/O daemon queue.


Syntax:
declare dprint_$queue_contents entry (char(*), fixed bin, fixed bin,
     fixed bin(35));
call dprint_$queue_contents (request_type, queue, n_requests, code);


Arguments:
request_type
   is the name of the request type whose queue is to be checked.
   (Input)
queue
   is the number of the queue to be examined.  If -1 is specified, the
   default queue of the given request type is checked and the number of
   the default queue is returned in this parameter.  (Input/Output)
n_requests
   is the number of requests in the specified queue.  (Output)
code
   is a standard system status code.  (Output)


:Entry: request_id: 11/27/85 dprint_$request_id


 The request_id entry point adds a request to print, punch, or plot a
 segment or multisegment file to the specified queue, and returns the
 message identifier of the queue entry being made.


 Syntax:
 declare dprint_$request_id entry (char(*), char(*), ptr, fixed bin (71),
        fixed bin(35));
 call dprint_$request_id (dir_name, entryname, arg_ptr, request_id,
        code);


 Arguments:
 dir_name
    is the absolute pathname of the containing directory.  (Input)
 entryname
    is the entry name of the segment, multisegment file, or link to the
    segment or multisegment file to be printed, punched, or plotted.
    (Input)
 dprint_arg_ptr
    is a pointer to the dprint_arg structure (described in system
    include file dprint_arg.incl.pl1) that defines the options for
    this request.  If this pointer   is null, the default settings are
    used for all options.  (Input)
 request_id
    is the message identifier of the request being enqueued. (Output)
 code
    is a standard status code.  (Output)


 Notes: The dprint_$request_id entry uses the structure defined in
 the system include file dprint_arg.incl.pl1 to determine the details
 of the request.  If no structure is supplied, default values are used.
