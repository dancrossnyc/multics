06/20/87  timer_manager_

The timer_manager_ subroutine allows many CPU usage timers and
real-time timers to be used simultaneously by a process.  The caller
can specify for each timer whether a wakeup is to be issued or a
specified procedure is to be called when the timer goes off.  If a
procedure is to be called, the calling procedure can specify a data
pointer to pass to that procedure.

Detailed information can be found in Multics Subroutines and I/O
Modules (AG93).


Entry points in timer_manager_:
   (List is generated by the help command)


:Entry: alarm_call:  06/20/87 timer_manager_$alarm_call


Function:  This entry point sets up a real-time timer that calls the
routine specified when the timer goes off.


Syntax:
dcl timer_manager_$alarm_call entry (fixed bin(71), bit(2), entry,
     ptr);
call timer_manager_$alarm_call (time, flags, routine, data_ptr);


Arguments:
time
   is the time at which the wakeup or call is desired.
flags
   is a 2-bit string that determines how time is to be interpreted.
   timer_manager_constants.incl.pl1 defines the following named
   constants:
    ABSOLUTE_MICROSECONDS (="00"b)
    ABSOLUTE_SECONDS (="01"b)
    RELATIVE_MICROSECONDS (="10"b)
    RELATIVE_SECONDS (="11"b)
routine
   is a procedure entry point that is called when the timer goes off.


data_ptr
   is a pointer to a data structure which is to be associated with this
   particular timer.


:Entry:  alarm_call_inhibit:  06/20/87 timer_manager_$alarm_call_inhibit


Function:  This entry point sets up a real-time timer that calls the
handler routine specified when the timer goes off.  The call is made
with all interrupts inhibited (i.e., all interprocess signal (IPS) are
masked off).  When the handler routine returns, interrupts are
reenabled.  If the handler routine does not return, interrupts are not
reenabled and the user process may malfunction.


Syntax:
dcl timer_manager_$alarm_call_inhibit entry (fixed bin(71), bit(2),
     entry, ptr);
call timer_manager_$alarm_call_inhibit (time, flags, routine,
     data_ptr);


Arguments:
time
   is the time at which the wakeup or call is desired.
flags
   is a 2-bit string that determines how time is to be interpreted.
   timer_manager_constants.incl.pl1 defines the following named
   constants:
    ABSOLUTE_MICROSECONDS (="00"b)
    ABSOLUTE_SECONDS (="01"b)
    RELATIVE_MICROSECONDS (="10"b)
    RELATIVE_SECONDS (="11"b)
routine
   is a procedure entry point that is called when the timer goes off.


data_ptr
   is a pointer to a data structure which is to be associated with this
   particular timer.


:Entry:  alarm_wakeup:  06/20/87 timer_manager_$alarm_wakeup


Function:  This entry point sets up a real-time timer that issues a
wakeup on the event channel specified when the timer goes off.  The
event message passed is the string "alarm___".  (See the ipc_
subroutine for a discussion of event channels.)


Syntax:
declare timer_manager_$alarm_wakeup entry (fixed bin(71), bit(2),
     fixed bin(71));
call timer_manager_$alarm_wakeup (time, flags, channel);


Arguments:
time
   is the time at which the wakeup or call is desired.
flags
   is a 2-bit string that determines how time is to be interpreted.
   timer_manager_constants.incl.pl1 defines the following named
   constants:
    ABSOLUTE_MICROSECONDS (="00"b)
    ABSOLUTE_SECONDS (="01"b)
    RELATIVE_MICROSECONDS (="10"b)
    RELATIVE_SECONDS (="11"b)


channel
   is the name of the event channel over which a
   wakeup is desired.  Two or more timers can be running
   simultaneously, all of which may, if desired, issue a wakeup on the
   same event channel.


:Entry:  cpu_call:  06/20/87 timer_manager_$cpu_call


Function:  This entry point sets up a CPU timer that calls the routine
specified when the timer goes off.


Syntax:
dcl timer_manager_$cpu_call entry (fixed bin(71), bit(2), entry, ptr);
call timer_manager_$cpu_call (time, flags, routine, data_ptr);


Arguments:
time
   is the time at which the wakeup or call is desired.
flags
   is a 2-bit string that determines how time is to be interpreted.
   timer_manager_constants.incl.pl1 defines the following named
   constants:
    ABSOLUTE_MICROSECONDS (="00"b)
    ABSOLUTE_SECONDS (="01"b)
    RELATIVE_MICROSECONDS (="10"b)
    RELATIVE_SECONDS (="11"b)
routine
   is a procedure entry point that is called when the timer goes off.


data_ptr
   is a pointer to a data structure which is to be associated with this
   particular timer.


:Entry:  cpu_call_inhibit:  06/20/87 timer_manager_$cpu_call_inhibit


Function:  This entry point sets up a CPU timer that calls the handler
routine specified when the timer goes off.  The call is made with all
interrupts inhibited (i.e., all IPS are masked off).  When the handler
routine returns, interrupts are reenabled.  If the handler routine does
not return, interrupts are not reenabled and the user process may
malfunction.


Syntax:
dcl timer_manager_$cpu_call_inhibit entry (fixed bin(71), bit(2),
     entry, ptr);
call timer_manager_$cpu_call_inhibit (time, flags, routine, data_ptr);


Arguments:
time
   is the time at which the wakeup or call is desired.
flags
   is a 2-bit string that determines how time is to be interpreted.
   timer_manager_constants.incl.pl1 defines the following named
   constants:
    ABSOLUTE_MICROSECONDS (="00"b)
    ABSOLUTE_SECONDS (="01"b)
    RELATIVE_MICROSECONDS (="10"b)
    RELATIVE_SECONDS (="11"b)
routine
   is a procedure entry point that is called when the timer goes off.


data_ptr
   is a pointer to a data structure which is to be associated with this
   particular timer.


:Entry:  cpu_wakeup:  04/12/87 timer_manager_$cpu_wakeup


Function:  This entry point sets up a CPU timer that issues a wakeup on
the event channel specified when the timer goes off.  The event message
passed is the string "cpu_time".


Syntax:
declare timer_manager_$cpu_wakeup entry (fixed bin(71), bit(2),
     fixed bin(71));
call timer_manager_$cpu_wakeup (time, flags, channel);


Arguments:
time
   is the time at which the wakeup or call is desired.
flags
   is a 2-bit string that determines how time is to be interpreted.
   timer_manager_constants.incl.pl1 defines the following named
   constants:
    ABSOLUTE_MICROSECONDS (="00"b)
    ABSOLUTE_SECONDS (="01"b)
    RELATIVE_MICROSECONDS (="10"b)
    RELATIVE_SECONDS (="11"b)


channel
   is the name of the event channel over which a
   wakeup is desired.  Two or more timers can be running
   simultaneously, all of which may, if desired, issue a wakeup on the
   same event channel.


:Entry:  reset_alarm_call:  04/12/87 timer_manager_$reset_alarm_call


Function:  This entry point turns off all real-time timers that call
the routine specified when they go off.


Syntax:
dcl timer_manager_$reset_alarm_call entry (entry);
call timer_manager_$reset_alarm_call (routine);
   OR
dcl timer_manager_$reset_alarm_call entry (entry, ptr);
call timer_manager_$reset_alarm_call (routine, data_ptr);


Arguments:
routine
   is a procedure entry point that is called when the timer goes off.
data_ptr
   is a pointer to a data structure which is to be associated with this
   particular timer.


Notes: If the data_ptr is provided, all real-time timers which are to
call the given routine with that value of data_ptr are cancelled.
Otherwise, all real-time timers which are to call that routine with
any value of data_ptr are cancelled.


:Entry:  reset_alarm_wakeup:  04/12/87 timer_manager_$reset_alarm_wakeup


Function:  This entry point turns off all real-time timers that issue a
wakeup on the event channel specified when they go off.


Syntax:
declare timer_manager_$reset_alarm_wakeup entry (fixed bin(71));
call timer_manager_$reset_alarm_wakeup (channel);


Arguments:
channel
   is the name of the event channel over which a
   wakeup is desired.  Two or more timers can be running
   simultaneously, all of which may, if desired, issue a wakeup on the
   same event channel.


:Entry:  reset_cpu_call:  04/12/87 timer_manager_$reset_cpu_call


Function:  This entry point turns off all CPU timers that call the
routine specified when they go off.


Syntax:
declare timer_manager_$reset_cpu_call entry (entry);
call timer_manager_$reset_cpu_call (routine);
   OR
declare timer_manager_$reset_cpu_call entry (entry, ptr);
call timer_manager_$reset_cpu_call (routine, data_ptr);


Arguments:
routine
   is a procedure entry point that is called when the timer goes off.
data_ptr
   is a pointer to a data structure which is to be associated with this
   particular timer.


Notes: If the data_ptr is provided, all CPU timers which are to call
the given routine with that value of data_ptr are cancelled.
Otherwise, all CPU timers which are to call the routine with any value
of data_ptr are cancelled.


:Entry:  reset_cpu_wakeup:  04/12/87 timer_manager_$reset_cpu_wakeup


Function:  This entry point turns off all CPU timers that issue a
wakeup on the event channel specified when they go off.


Syntax:
declare timer_manager_$reset_cpu_wakeup entry (fixed bin(71));
call timer_manager_$reset_cpu_wakeup (channel);


Arguments:
channel
   is the name of the event channel over which a
   wakeup is desired.  Two or more timers can be running
   simultaneously, all of which may, if desired, issue a wakeup on the
   same event channel.


:Entry:  sleep:  04/12/87 timer_manager_$sleep


Function:  This entry point causes the process to go blocked for a
period of real time.  Other timers that are active continue to be
processed whenever they go off; however, this routine does not return
until the real time has been passed.


Syntax:
dcl timer_manager_$sleep entry (fixed bin(71), bit(2));
call timer_manager_$sleep (time, flags);


Arguments:
time
   is the time at which the wakeup or call is desired.
flags
   is a 2-bit string that determines how time is to be interpreted.
   timer_manager_constants.incl.pl1 defines the following named
   constants:
    ABSOLUTE_MICROSECONDS (="00"b)
    ABSOLUTE_SECONDS (="01"b)
    RELATIVE_MICROSECONDS (="10"b)
    RELATIVE_SECONDS (="11"b)
