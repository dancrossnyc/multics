08/04/86 Pascal compile-time options

This segment describes the $include compiler directive, used to insert
text from a segment into a Pascal program at compilation time, and the
$options compiler directive, used to control various aspects of
compilation and listing output.


Include files:
Stored portions of text can be inserted in a program at compilation
time by use of the $include compiler directive. Include files are
particularly useful when the same set of declarations are to be used in
several programs, and ensure that they appear identically in all
programs.


The syntax of $include is--
   $include 'file_name' {,begin_string, end_string} $
where begin_string and end_string are either quoted character strings
to specify starting and ending positions within the included file, or *
to indicate the beginning and end of the file.

If begin_string is 'foo', for example, the included portion of
file_name begins with the character immediately following the first
occurrence of the literal string "foo".  If end_string is 'bar', for
example, the included portion of file_name ends with the character
immediately preceding the first occurrence of "bar".  These strings
are NOT interpreted as qedx regular expressions but using Pascal
character strings.  (same use of '' for ' char).

The included file is named file_name.incl.pascal and is found via the
"translator" search list.

Occurrences of $include in the include file itself are expanded
recursively.


Examples of $include:
The source line -- $include 'record_dcls' $
is replaced by the entire contents of the segment
record_dcls.incl.pascal found via the "translator" search list. This
example is equivalent to:

	$include 'record_dcls',*,* $


The source line-- $include 'record_dcls','V1-START','V1-END'$
is replaced by the portion of record_dcls.incl.pascal that starts
with the character immediately following the first occurrence of
"V1-START" and ends with the character immediately preceding the first
occurrence of "V1-END" after "V1-START".


The source line-- $include 'record_dcls',*,'END-HEADER'$
is replaced by the portion of record_dcls.incl.pascal that starts at
the beginning of the segment and ends with the character immediately
preceding the first occurrence of "END-HEADER".


Compiler options:
The $options compiler directive accepts a variety of keywords that
control the format of the output compilation listing, the portion of
the source that is compiled, and the generation of debugging checks in
the code as produced by "pascal -debug".

The $options directive with most keywords can test the values of
compiler switches, which take true/false values.  Compiler switches
must be declared within the source program by lines of the form:

   $options switch switch_name1 {:= value1}
	        {, switch_name2 {:= value2}} $

where the switch names have the same syntax as Pascal identifiers.  The
optional values can be either "true" or "false"; the default is
"false".  Switches must be declared before they are referenced in other
$options directives, but their values can be changed at any time by
additional "$options switch" directives.  Switch values can also be set
using the -cond control argument to the pascal command, which overrides
any values set within the source program.


Listing page breaks:
The directive:

	$options page $

causes the compilation listing to skip to a new page.


Listing source text:
The directive:

	$options listing = true/false $
 or:
	$options listing = [not] switch_name $

controls whether source subsequent source lines are written into the
compilation listing. The default is "true".


Debugging checks:
The directive-- $options debug = true/false $
           or-- $options debug = [not] switch_name $
controls whether special code is to be generated to cause harmless
faults for uninitialized pointers and to provide other safeguards
against program errors. These checks are the same ones that are
generated by the -debug control argument to the pascal command. The
default value is "true". All values for debug are overridden by -debug
or -no_debug on the command line.


Conditional compilation:
The directive-- $options compile = true/false $
           or-- $options compile = [not] switch_name $
controls whether succeeding text is to be included in the compilation.
This feature allows a source segment to contain multiple versions of
program text, which are selected based on the values of switches as
assigned by the -cond control argument to the pascal command. The
default value is "true".


Examples of conditional compilation:
The following sample program prints a terse message if the compiler is
invoked with "-cond brief true", otherwise it prints a longer message:

     procedure print_not_found
		 (name : packed array [a..b : integer] of char);
       begin
       $options switch brief := false $   {default is not-brief}
       $options compile = brief $
	writeln ('Not found: ', name);
       $options compile = not brief $
	writeln ('Unable to find program, check library for: ', name);
       $options compile = true $
     end;
