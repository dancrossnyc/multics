04/21/82	send_mail_


Entry points in send_mail_:
   (List is generated by the help command)


:Entry: send_mail_:  04/05/82  send_mail_


Function: sends an interactive message or mail to a specified user.


Syntax:
declare send_mail_ entry (char(*), char(*), ptr, fixed bin(35));
call send_mail_ (destination, message, info_ptr, code);


Arguments:
destination
   is a Person_id.Project_id destination.  (Input)
message
   is the text of the message to be sent.  (Input)
info_ptr
   points to the structure declared in send_mail_info.incl.pl1.
   (Input)  See "Notes on info structure" below.


code
   is a standard status code.	 (Output) It may be one of the following:
   error_table_$noentry
        if the mailbox is not found
   error_table_$no_append
        if the sending process has insufficient access to add a message
   error_table_$wakeup_denied
        the sending process has insufficient access to send a wakeup
   error_table_$messages_deferred
        if the recipient process is deferring messages
   error_table_$messages_off
        if the recipient is not logged in or the recipient process has
        not been initialized for receiving messages
   error_table_$no_info
        if the sending process is not given any information because it
        has a lower AIM authorization than the recipient process


Notes on info structure:
The info_ptr pointer points to the following structure (found in the
include file, send_mail_info.incl.pl1):

     dcl 1 send_mail_info    aligned,
     	 2 version         fixed bin,
     	 2 sent_from       char(32) aligned,
     	 2 switches,
     	   3 wakeup        bit(1) unal,
     	   3 mbz 1         bit(1) unal,
     	   3 always_add    bit(1) unal,
     	   3 never_add     bit(1) unal,
     	   3 notify        bit(1) unal,
     	   3 acknowledge   bit(1) unal,
     	   3 mbz	         bit(30) unal;


Structure elements:
   version
      identifies the version of the structure being used.  Currently
      this number must be 2.
   sent_from
      gives additional information about the sender, e.g., name of
      anonymous user or name of network site.
   wakeup
      indicates whether a wakeup is sent with the message.
      "1"b   yes
      "0"b   no


   always_add
      indicates whether the message is to be added even if a wakeup
      could not be sent.
      "1"b   yes
      "0"b   no
   never_add
      tests whether a wakeup can be sent, without trying to add a
      message.
      "1"b   yes
      "0"b   no


   notify
      indicates that this message is a mail notification.  After
      sending a piece of mail, a second message should be sent which
      has the bit ON so that the receiving process (if any) will print
      the "You have mail." notification.
      "1"b   this is a mail notification
      "0"b   this is NOT a mail notification, but either mail or an
	   interactive message depending on the "wakeup" bit above.
   acknowledge
      indicates whether an acknowledgement is requested when the
      message is read.
      "1"b   yes
      "0"b   no
   mbz1, mbz
      are not used and must be set to "0"b.


:Entry: access_class:  04/05/82  send_mail_$access_class


Function:	 This entry is identical to send_mail_, except that the
caller may specify the access class of the message.  (In send_mail_,
the access class of the message is always equal to the authorization of
the calling process.)  This entry is of use only if a site is using
AIM.  For information on access classes, see "Nondiscretionary Access
Control" in Section VI of the MPM Reference Guide.


Syntax:
declare send_mail_$access_class entry (char(*), char(*), ptr,
     bit(72) aligned, fixed bin(35));
call send_mail_$access_class (destination, message, info_ptr,
     access_class, code);


Arguments:
destination
   is a Person_id.Project_id destination.  (Input)
message
   is the text of the message to be sent.  (Input)
info_ptr
   points to the structure declared in send_mail_info.incl.pl1.
   (Input)  See "Notes on info structure" under the description of the
   send_mail_ entry point.
access_class
   is the access class of the message.	(Input)
code
   is a standard status code. (Output)


Notes:  Normally the message is written into the mailbox of the
receiver at the access_class specified by the sender.  However, if
send_mail_info.wakeup is "1"b and the receiver is accepting messages,
and further, if the authorization of the receiver is greater than or
equal to the access_class of the message, the access_class of the
message is automatically upgraded to the authorization of the receiver.
This allows the receiver to delete the message once he has read it.


:Entry: path:  04/05/82  send_mail_$path


Function:	 This entry point sends an interactive message or mail to a
specified mailbox.


Syntax:
declare send_mail_$path entry (char(*), char(*), char(*), ptr,
     fixed bin (35));
call send_mail_$path (dir_name, entryname, message, info_ptr, code);


Arguments:
dir_name
   is the directory name of a mailbox.	(Input)
entryname
   is the entryname of a mailbox.  (Input) The .mbx suffix is added if
   it is not supplied.
message
   is the text of the message to be sent.  (Input)
info_ptr
   points to the structure declared in send_mail_info.incl.pl1.  
   (Input)  See "Notes on info structure" under the description of the
   send_mail_ entry point.
code
   is a standard status code.	 (Output)


:Entry: path_access_class:  04/05/82  send_mail_$path_access_class


Function:	 This entry point sends a message to a specified mailbox,
allowing the user to specify the access class of the message.


Syntax:
declare send_mail_$path_access_class entry (char(*), char(*), char(*),
     ptr, bit(72) aligned, fixed bin (35));
call send_mail_$path_access_class (dir_name, entryname, message,
     info_ptr, access_class, code);


Arguments:
dir_name
   is the directory name of a mailbox.	(Input)
entryname
   is the entryname of a mailbox.  (Input) The .mbx suffix is added if
   it is not supplied.
message
   is the text of the message to be sent.  (Input)
info_ptr
   points to the structure declared in send_mail_info.incl.pl1.
   (Input)  See "Notes on info structure" under the description of the
   send_mail_ entry point.
access_class
   is the access class of the message.	(Input)
code
   is a standard status code.	 (Output)
