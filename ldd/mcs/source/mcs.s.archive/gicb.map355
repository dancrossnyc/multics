* ***********************************************************
* *                                                         *
* * Copyright, (C) Honeywell Information Systems Inc., 1982 *
* *                                                         *
* * Copyright (c) 1972 by Massachusetts Institute of        *
* * Technology and Honeywell Information Systems, Inc.      *
* *                                                         *
* ***********************************************************

	lbl	gicb,gicb
	ttl	mcs/fnp intercomputer bootload routine
	ttls	copyright 1970 by honeywell information systems inc.
************************************************************
*
*  note:  cs means "central system"
*
************************************************************
*	change list
*
*	modified to run on dia by rbs june 24, 1972
*	modified for multics boot of fnp by mjg may 25, 1976
*
************************************************************
	pcc	on	print assembler control cards
	pmc	on	print macro expansions
	editp	on	print special edit control characters
	abs		assemble in absolute format
	rem
cksum	macro		checksum calculation macro
	ldx3	2	get return address
	tra	cksum-*	calculate checksum
	ind	*	location of 'here' and 'now'
	endm	cksum
	rem
parity	macro	c,m	dia parity calculation macro
	ldx3	2	get location of dcw
	tsy	parity-*	call parity calculation routine
	ind	#1	location of dia dcw
	endm	parity
	rem
	systm		define system description symbols
	comreg
	ttls	intercomputer symbol definitions
	rem
	rem	dia icw symbol definitions
	rem
csadd	equ	0	cs store address
intopc	equ	1	interrupt cell and op-code
fnpadd	equ	2	fnp address (36 bit data transfer)
tally	equ	3	tally (36 bit words)
	rem
	rem	dia operation code symbol definitions
	rem
diatrg	bool	65	transfer gate from cs to fnp
diadis	bool	70	disconnect
diainf	bool	71	interrupt fnp
diajmp	bool	72	jump
diainc	bool	73	interrupt cs
diardc	bool	74	read configuration switches
diaftc	bool	75	data transfer from fnp to cs
diactf	bool	76	data transfer from cs to fnp
diawrp	bool	77	wraparound
	ttls	datanet fnp hardware communication region
	rem
	rem	i n t e r r u p t   v e c t o r s
	rem
	rem
	rem		channel 00 interrupt vectors
	rem
	vfd	3/w.2,15/*+2	bootload list icw
	vfd	3/0,1/1,1/1,13/2
	zero
	vfd	18/diadis	disconnect dcw
	zero	0,w.2	with 36 bit xfer mode
	zero
	dup	1,10
	ind	.rtrn.	spring loaded interrupt vector
	rem
	rem		channel 01 interrupt vectors
	rem
	ind	.icft.	iom fault vector
	dup	1,15
	ind	.rtrn.	spring loaded interrupt vector
	rem
	rem		channel 02 interrupt vectors
	rem
	ind	.icft.	iom fault vector
	dup	1,15
	ind	.rtrn.	spring loaded interrupt vector
	rem
	rem		channel 03 interrupt vectors
	rem
	ind	.icft.	iom fault vector
	ind	.rtrn.	spring loaded interrupt vector
	ind	.dia3.	entry for dia on channel 3
	dup	1,13
	ind	.rtrn.	spring loaded interrupt vector
	rem
	rem		channel 04 interrupt vectors
	rem
	ind	.icft.	iom fault vector
	ind	.rtrn.	spring loaded interrupt vector
	ind	.dia4.	entry for dia on channel 4
	dup	1,13
	ind	.rtrn.	spring loaded interrupt vector
	rem
	rem		channel 05 interrupt vectors
	rem
	ind	.icft.	iom fault vector
	ind	.rtrn.	spring loaded interrupt vector
	ind	.dia5.	entry for dia on channel 5
	dup	1,13
	ind	.rtrn.	spring loaded interrupt vector
	rem
	rem		channel 06 interrupt vectors
	rem
	ind	.icft.	iom fault vector
	dup	1,15
	ind	.rtrn.	spring loaded interrupt vector
	rem
	rem		channel 07 interrupt vectors
	rem
	ind	.icft.	iom fault vector
	dup	1,15
	ind	.rtrn.	spring loaded interrupt vector
	rem
	rem		channel 08 interrupt vectors
	rem
	ind	.icft.	iom fault vector
	dup	1,15
	ind	.rtrn.	spring loaded interrupt vector
	rem
	rem		channel 09 interrupt vectors
	rem
	ind	.icft.	iom fault vector
	dup	1,15
	ind	.rtrn.	spring loaded interrupt vector
	rem
	rem		channel 10 interrupt vectors
	rem
	ind	.icft.	iom fault vector
	dup	1,15
	ind	.rtrn.	spring loaded interrupt vector
	rem
	rem		channel 11 interrupt vectors
	rem
	ind	.icft.	iom fault vector
	dup	1,15
	ind	.rtrn.	spring loaded interrupt vector
	rem
	rem		channel 12 interrupt vectors
	rem
	ind	.icft.	iom fault vector
	ind	.rtrn.	spring loaded interrupt vector
	ind	.dia14	entry for dia on channel 14(8)
	dup	1,13
	ind	.rtrn.	spring loaded interrupt vector
	rem
	rem		channel 13 interrupt vectors
	rem
	ind	.icft.	iom fault vector
	dup	1,15
	ind	.rtrn.	spring loaded interrupt vector
	rem
	rem		channel 14 interrupt vectors
	rem
	ind	.icft.	iom fault vector
	dup	1,15
	ind	.rtrn.	spring loaded interrupt vector
	rem
	rem		channel 15 interrupt vectors
	rem
	ind	.icft.	iom fault vector
	dup	1,15
	ind	.rtrn.	spring loaded interrupt vector
	eject
	rem
	rem	i n t e r r u p t   c e l l s
	rem
	dec	0	level  0
	dec	0	level  1
	dec	0	level  2
	dec	0	level  3
	dec	0	level  4
	dec	0	level  5
	dec	0	level  6
	dec	0	level  7
	dec	0	level  8
	dec	0	level  9
	dec	0	level 10
	dec	0	level 11
	dec	0	level 12
	dec	0	level 13
	dec	0	level 14
	dec	0	level 15
	rem
	rem	i o m   f a u l t   s t a t u s
	rem
	dec	0	channel  0
	dec	0	channel  1
	dec	0	channel  2
	dec	0	channel  3
	dec	0	channel  4
	dec	0	channel  5
	dec	0	channel  6
	dec	0	channel  7
	dec	0	channel  8
	dec	0	channel  9
	dec	0	channel 10
	dec	0	channel 11
	dec	0	channel 12
	dec	0	channel 13
	dec	0	channel 14
	dec	0	channel 15
	eject
	rem
	rem	p r o c e s s o r   f a u l t   v e c t o r s
	rem
	ind	.falt.	startup fault
	ind	.falt.	shutdown fault
	ind	.falt.	memory parity fault
	ind	.falt.	illegal operation code fault
	ind	.falt.	overflow fault
	ind	.falt.	illegal memory operation fault
	ind	.falt.	divide check fault
	ind	.falt.	illegal program interrupt fault
	rem
	rem	i o m   m a i l b o x   c o m m   r e g i o n
	rem
	dec	0	interval timer mailbox
	dec	0	elapsed timer mailbox
diaind	dec	0	indicator storage area for checksum
	dec	0
	even
diasts	dec	0,0	bootload dia status storage area
	vfd	3/w.2,15/diasts	dia status icw
	vfd	3/0,1/0,1/1,1/1,12/2
	ttls	load mcs/fnp system
	rem
icbt10	null
	ldaq	iclist-*	get list icw for mcs load
	ldx1	l.trm2-*	set where to go after loading mcs/fnp
	tra	diaioc-*	initiate mcs/fnp loading
.trm2	ind	**
	rem
	rem	check dia status from mcs/fnp read
	rem
	ldq	diasts+1-*	check second status word
	tnz	icgtsr-*	bad status - e r r o r
	rem
	rem	compute checksum
	rem
	lda	iclmts+1-*	calculate length of mcs
	sba	iclmts-*	*
	cax1		move to index one
	ldi	icindc-*	reset indicator storage
	sti	diaind-*	*
	tra	5	branch around zeroes
	rem
	dec	0	two words of zeroes that must be at loc
	dec	0	474 & 475 so that pager won't be activated
	dec	0	476-477 is dn6670 'yellow' counter and is
	dec	0	 incremented by one for each edac error
	rem
	ldx2	lmcs2-*	get starting location plus two
	ldaq	.mcs.-*	get first two words
	iacx1	-2	reduce length
	cksum		calculate checksum for mcs/fnp
	sbaq	icksma-*	compare cksum to that made by cs system
	tnz	icgtcr-*	***checksum error***
	eject
	rem
	rem	move mcs/fnp system into position
	rem
	lda	iclmts+1-*	calculate end of mcs code
	ada	lmcs-*	*
	cax2		move to index two
	sta	.mov1a-*	store start of .mov1 code
	ldx1	s.mov-*	get beginning of move code
	rem
icbt40	lda	0,1	move
	sta	0,2	the
	iacx1	1	move
	iacx2	1	code
	aos	l.mov-*	reduce counter
	tnz	icbt40-*	not done, continue
	rem
	lda	icintn-*	get execute interrupt cell number
	arl	3	shift off emergency int cell no.
	als	12	position number
	ora	dimbx-*	add in mailbox base address
	cax3		move to index three
	ldx2	iclmts-*	get the start of mcs
	ldx1	lmcs-*	get where it is right now
	tra	.mov1a-*,*	enter move one routine
	eject
	rem
	rem	send unsuccessful bootload status to cs system
	rem
icgtsr	null		dia status error when reading mcs
	lda	.ssts2-*	set to store status error status
	tra	icbt50-*
icgtcr	null		checksum error on mcs data
	lda	.ssts1-*	set to store checksum error status
	ilq	0	clear the q
	tra	icbt50-*
dianfr	null		dia configuration error
	ora	.ssts3-*	set to store configuration error status
	stz	icepc-*	no exception processing for this one
icbt50	null
	aos	icepc-*	reduce exception processing counter
	tmi	icbt10-*	dont give up yet, reissue command
	staq	.sstat-*	store status to be sent to cs
	lda	dimbx-*	calculate location of bootload status
	iaa	6	add offset of bootload status area
	sta	stdcw1-*	store in data transfer dcw
	lda	icintn-*	get execute interrupt cell to set
	arl	3	shift off emergency int cell no.
	als	6	position cell number
	orsa	stdcw2+1-*	store in interrupt dcw
	ldx1	lstsls-*	get length of status dcw block
	parity	stslst	calculate parity for status dcw's
	ldaq	stslst-*	get list icw for status store
	ldx1	l.trm3-*	set where to go after storing status
	tra	diaioc-*	store bad status of the bootload
	eject
	rem
	rem	checksum calculation routine
	rem
cksum	null
	ldi	diaind-*	get the indicators
	tnc	2	test for carry
	adaq	diary-*	carry. simulate awc instruction
	adaq	0,2	add in next word
	sti	diaind-*	save indicators
	iacx2	2	bump data pointer
	iacx1	-2	reduce counter
	tnz	cksum-*	continue to end of block
	tra	1,3	return
	rem
	rem	initiate i/o on dia channel
	rem
diaioc	staq	list-*	set list icw mailbox
	lda	dialst-*	get pointer to list icw
	ilq	56	get command of 70 for pcw
	staq	dimb-*	store in pcw mailbox
	stx1	lditm-*,*	set terminate vector
	ila	2	set word count for parity check
	cax1		*
	parity	dimb	calculate dia parity for pcw mailbox
	cioc	dimb-*	initiate i/o in dia channel
	dis		wait for interrupt
	tra	-1	*
	rem
	rem	calculate dia parity
	rem
parity	ind	**	return address
	ldq	0,3	get first word of dcw
	lda	1,3	get second word of dcw
	qlp	18	calculate parity for 1st word
	tnz	2	odd parity...
	ora	parwd1-*	even - set parity bit
	alp	18	calculate parity for 2nd word
	tnz	2	odd parity...
	ora	parwd2-*	even - set parity bit
	sta	1,3	restore second word with parity bits
	iacx3	2	bump pointer to next pair of words
	iacx1	-2	decrement word count
	tnz	parity+1-*	more to do
	aos	parity-*	increment return pointer
	tra	parity-*,*	and return
	ttls	constants and buffers
	rem
list	equ	298	list icw storage
	rem
stslst	dcw	stdcw1,6	send bootload status list icw
stdcw1	vfd	18/,18/diaftc	data transfer fnp to cs dcw
	dcw	.sstat,1
stdcw2	vfd	18/,18/diainc	interrupt cs dcw
	zero	0,w.2
	zero
	vfd	18/,18/diadis	disconnect dcw
	zero	0,w.2
	zero
lstsls	ind	*-stslst	length of status dcw block
	rem
icepc	dec	-3	exception processing counter
	rem
	even
diary	dec	0,1	cksum carry constant
icindc	oct	024000	indicator register constant
lditm	ind	**	location of dia terminate vector
	rem		(filled in depending on which one gets used)
	rem
parwd1	oct	040000	parity bit for 1st word of dia dcw
parwd2	oct	020000	parity bit for 2nd word of dia dcw
	rem
	even
.sstat	oct	400000,000000	status for successful bootload
.ssts1	oct	410000	status for checksum error on bootload
.ssts2	oct	420000	status for bad status on bootload
.ssts3	oct	430000	status for configuration error
	rem
l.trm2	ind	.trm2	terminate vector when reading mcs/fnp
l.trm3	ind	icbtsp-1	terminate vector for storing status
	rem
.mcs.	equ	512	loading base for mcs/fnp system
lmcs	ind	.mcs.	base of mcs/fnp system
lmcs2	ind	.mcs.+2	location of mcs/fnp loading base + two
dialst	ind	list,w.2	location of  list icw with 36 bit xfer
	rem
	eject
	rem
	rem	move program
	rem
mvllmt	equ	*-4	low limits of mcs
mvhlmt	equ	*-3	high limit of mcs
mvwdct	equ	*-2	word count for mcs
mventy	equ	*-1	entry point for mcs
	rem
.mov1	ldq	0,1	move mcs/fnp system
	stq	0,2	*
	iacx1	1	bump load pointer
	iacx2	1	bump store pointer
	cmpx1	.mov1a-*	everything moved?
	tnz	.mov1-*	no. continue moving
	lda	movchn-*	yes. pass dia channel to init routine
	ldx2	mvhlmt-*	also upper limit of mcs for clearing memory
	ldx1	mventy-*	get entry point of mcs
	tra	-1,1	enter mcs
.mov1a	ind	**	location of .mov1 at end of mcs program
	rem
movchn	oct	0	dia channel will be stored here
s.mov	ind	.mov1	location  of the beginning of move code
l.mov	vfd	18/-movchn+.mov1-1  length of move code (negated)
	eject
	rem
	rem
	rem	* * * * * * * * * * * * * * * * * * * * * * * * * * * *
	rem	*  n.b.  the following org means one must be very careful
	rem	*        when adding code above loc 722 (8)
	rem	* * * * * * * * * * * * * * * * * * * * * * * * * * * *
	rem
	org	466
	rem
.icft.	ind	**	dia channel fault
	dis	1	stop on iom fault
	tra	-1
	rem
.falt.	ind	**	processor fault
	dis	2	stop on fault
	tra	-1
	rem
icser	dis	3	bad dia status on bootload
	tra	-1	stop on bad status
	rem
diaksr	dis	4	checksum error on bootload data
	tra	-1	stop on checksum error
	rem
icbtsp	dis	5	unsuccessful bootload attempt
	tra	-1	stop on unsuccessful bootload
	rem
.rtrn.	ind	**	spring loaded vector for
	tra	-1,*	extraneous interrupts
	ttls	future site of bootload communication block
	rem
	org	480
	rem
	dup	1,32	reserve communication area
btcomm	dec	0
	ttls	cs bootload validation
	rem
	org	512
	rem
.dia3.	ind	**	entry when dia is on channel 3
	ila	3
	sta	diachn-*
	stz	.dia3.-*	so as not to gum up checksum
	tra	.icbt.-*
	rem
.dia4.	ind	**	entry when dia is on channel 4
	ila	4
	sta	diachn-*
	stz	.dia4.-*	so as not to gum up checksum
	tra	.icbt.-*
	rem
.dia5.	ind	**	entry when dia is on channel 5
	ila	5
	sta	diachn-*
	stz	.dia5.-*	so as not to gum up checksum
	tra	.icbt.-*
	rem
.dia14	ind	**	entry when dia is on channel 14 (8)
	ila	12
	sta	diachn-*
	stz	.dia14-*	so as not to gum up checksum
	tra	.icbt.-*
	rem
.icbt.	null		start of bootload program
	rem
	rem	check dia status from bootload
	rem
	ldq	diasts+1-*	check second status word
	tnz	icser-*	bad status means bad bootload
	rem
	rem	compute checksum
	rem
	rem
	ldi	icindc-*	reset indicator storage word
	sti	diaind-*	*
	stz	.rtrn.-*	reset interrupt spring vector
	ldx2	sintv2-*	get the start of the interrupt vectors
	ldaq	intvc-*	get the first words which were there
	ldx1	diant1-*	get the first cksum counter
	cksum		calculate cksum 1/4
	ldx1	diant2-*	get second cksum counter
	ldx2	sfltst-*	start of fault status words
	cksum		calculate cksum 2/4
	ldx1	diant3-*	get third cksum counter
	ldx2	sdiast-*	location of dia status icw
	cksum		calculate cksum 3/4
	ldx1	diant4-*	get fourth cksum counter
	ldx2	sdimb4-*	location of dia dcw mailbox plus four
	cksum		calculate cksum 4/4
	staq	temp-*	save checksum
	eject
	rem
	rem	move bootload communication region
	rem
	ldx1	ltbtcm-*	get pointer to temporary comm region
	ldx2	lbtcom-*	get pointer to permenant comm region
	ilq	-32	set counter
btcmov	lda	0,1	move bootload
	sta	0,2	communication block
	iacx1	1	increment
	iacx2	1	block pointers
	iaq	1	reduce counter
	tnz	btcmov-*	continue
	rem
	rem	store dia channel in saved indicators and set
	rem	dia interrupt vector
	rem
	lda	diachn-*	get channel number
	sta	movchn-*	put it where it can be found by move routine
	orsa	icindc-*	put it in select register portion of indicators
	ldi	icindc-*	set the indicators
	als	4	convert to interrupt vector address
	iaa	2
	sta	lditm-*	save it
	rem
	rem	check bootload checksum
	rem
	ldaq	temp-*	get checksum
	sbaq	icksmb-*	compare cksum to that made by cs
	tnz	diaksr-*	...checksum error...
	ldx2	sintv2-*	get pointer to start of interrupt vector
	ldaq	14,2	reset vectors used during bootload
	staq	-2,2	*
	ldaq	12,2	*
	staq	0,2	*
	staq	2,2	*
	eject
	rem
	rem	read dia configuration
	rem
	ldx1	lcnfls-*	get length of configuration dcw block
	parity	cnflst	calculate parity for configuration dcw's
	ldx1	l.trm1-*	set return address for terminate from
	ldaq	cnflst-*	get configuration list icw
	tra	diaioc-*	the configuration read & go initiate i/o
	rem
.trm1	ind	**
	ldq	csmbx-*	get the mailbox address from the switches
	lda	csics-*	get the interrupt cell number
	cmpq	dimbx-*	is it the same as the cs said?
	tnz	dianfr-*	no. configuration error
	rem
	cmpa	icintn-*	compare interrupt cell switches
	tnz	dianfr-*	no good, report error
	rem
	tra	lbt10-*,*	all ok so far, load mcs
	rem
lbt10	ind	icbt10	location of the mcs load routine
	rem
ltbtcm	ind	tbtcom	location of temporary boot comm region
lbtcom	ind	btcomm	location of permanent boot comm region
	even
temp	dec	0,0	temporary storage
	rem
	rem	dia configuration data area
	rem
	even
config	null
cspab	oct		port a and port b
cspcd	oct		port c and port d
csmbx	oct		cs mailbox address
csics	oct		cs interrupt cell switch
cslwa	oct		lower address bounds switches
csupc	oct		upper address bounds switches
	bss	2
	eject
sintv2	ind	intv+2	location of interrupt vectors plus two
sfltst	ind	fltst	location of iom fault status words
sdiast	ind	dist	location of dia status icw
sdimb4	ind	dimb+4	location of dia pcw mailbox plus four
diant1	dec	254	cksum counter for interrupt vector area
diant2	dec	24	cksum counter for flt vctrs & flt status
diant3	dec	2	cksum counter for dia status icw
diant4	ind	end-icbt10-2	cksum counter for bootload program
	rem
cnflst	dcw	*+2,4	configuration list icw
	vfd	18/,18/diardc	read configuration dcw
	dcw	config,4
	vfd	18/,18/diadis	disconnect dcw
	zero	0,w.2
	zero
lcnfls	ind	*-cnflst	length of configuration dcw block
	rem
	rem
l.trm1	ind	.trm1	terminate vector for configuration read
	even
intvc	vfd	3/w.2,15/2	first words of interrupt vector area
	vfd	3/0,1/1,1/1,13/2
	rem
	rem
	date
	ttls	bootload communication block
	rem
tbtcom	even
end	equ	*+32	last location to be included in checksum
	rem		of bootload program
	loc	480
	rem
	rem	mcs/fnp list icw control block
	rem
iclist	dcw	icdcw1,**	list icw
icdcw1	vfd	18/,18/diactf	dcw number one
	vfd	3/w.2,15/.mcs.	load 0 - 8k
	vfd	6/0,12/0
icdcw2	vfd	18/,18/diactf	dcw number two
	vfd	3/w.2,15/.mcs.+8192 load 8 - 16k
	vfd	6/0,12/0
icdcw3	vfd	18/,18/diactf	dcw number three
	vfd	3/w.2,15/.mcs.+16384 load 16 - 24k
	vfd	6/0,12/0
icdcw4	vfd	18/,18/diactf	dcw number four
	vfd	3/w.2,15/.mcs.+24576 load 24 - 32k
	vfd	6/0,12/0
icdcw5	vfd	18/,18/diadis	dcw number five - disconnect
	vfd	18/0,18/0
dimbx	dec	0	cs mailbox address
icintn	dec	0	cs interrupt cells
	dec	0,0	unused
iclmts	dec	0,0	mcs load limits
icksma	dec	0,0	mcs checksum
icksmb	dec	0,0	bootload checksum
	rem
	org	end
diachn	oct	0	dia channel number is deliberately stored
	rem		outside checksum area
	end
