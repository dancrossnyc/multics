* ***********************************************************
* *                                                         *
* * Copyright, (C) Honeywell Information Systems Inc., 1982 *
* *                                                         *
* * Copyright (c) 1972 by Massachusetts Institute of        *
* * Technology and Honeywell Information Systems, Inc.      *
* *                                                         *
* ***********************************************************

	ttl	fnp metering subroutines
	lbl	,meters
	pcc	off
	pmc	on
	editp	on
	rem
*************************************************************
*
*	this set of subroutines implements the updating of
*	meters kept by the fnp
*
*	it has entries for incrementing single- and double-
*	word meters, for updating cumulative meters
*	intended for maintaining averages, and for keeping
*	track of synchronous message counts and lengths.
*
*	all entries must run with interrupts and overflow
*	faults inhibited.
*
*************************************************************
	rem
meters	null
	start	meters
	rem
	symdef	mincs
	symdef	mincd
	symdef	mupdat
	symdef	mmsg
	rem
	symref	setbpt
	rem
	buffer
	ttls	mincs, mincd -- simple increment meters
	pmc	off
	rem
*************************************************************
*
*	mincs -- single precision increment
*
*	inputs:
*	    a -- address of single-word meter
*	    q -- increment (positive or negative)
*
*************************************************************
	rem
mincs	subr	ics,(inh,x2)
	ldi	l.a001-*	inhbit interrupts and overflow
	cax2		get address of meter
	cqa
	asa	0,2	update it
	return	mincs
	rem
	rem
*************************************************************
*
*	mincd -- increment a double-precision meter
*
*	inputs:
*	    a -- address of doubleword to update
*	    q -- increment (positive or negative)
*
*************************************************************
	rem
mincd	subr	icd,(inh,x2)
	ldi	l.a001-*	inhibit interrupts and overflow
	cax2		get address of meter
	cqa
	lrs	18	get double-precision increment in aq
	adaq	0,2	update meter
	staq	0,2
	return	mincd
	ttls	mupdat -- update cumulative meter
	rem
*************************************************************
*
*	mupdat -- updates a cumulative meter for averaging
*
*	inputs:
*	    a -- address of doubleword meter, followed by
*	         doubleword count of updates
*
*	    q -- increment (positive or negative)
*
*************************************************************
	rem
mupdat	subr	upd,(inh,x2)
	ldi	l.a001-*	inhibit interrupts and overflow
	cax2		get address of meter
	cqa
	lrs	18	get doubleword increment in aq
	adaq	0,2
	staq	0,2	update meter
	ila	0	get double-precision 1
	ilq	1
	adaq	2,2	add it to update count
	staq	2,2
	return	mupdat
	ttls	mmsg -- update count & length of message
	rem
*************************************************************
*
*	mmsg -- increments counts and maintains average
*	        length for synchronous messages. also
*	        keeps track of minimum and maximum length
*
*	inputs:
*	    a -- address of 6-word area containing the
*	         following:
*	         message count (2 words)
*	         cumulative message length (2 words)
*	         minimum message length (1 word)
*	         maximum message length (1 word)
*
*	    x3 - address of first buffer in message
*
*************************************************************
	rem
mmsg	subr	msg,(inh,x2,x3)
	ldi	l.a001-*	inhibit interrupts and overflows
	cax2		get address of metering area
	stz	maccum-*	initialize total length
	cx3a
	tze	msgbak-*	no message, never mind
	rem
msg010	tsy	a.a001-*,*	setbpt
	cax3
	lda	bf.tly,3	get the buffer tally
	ana	l.a002-*	=buftmk
	asa	maccum-*	increment running total
	lda	bf.flg,3	last buffer in message?
	cana	l.a003-*	=bfflst
	tnz	msg020-*	yes, stop counting
	lda	bf.nxt,3	next buffer
	tnz	msg010-*	if any
	rem
msg020	ila	0	get double-precision 1
	ilq	1
	adaq	0,2	update message count
	staq	0,2
	ila	0
	ldq	maccum-*	get accumulated message length
	adaq	2,2
	staq	2,2	add it into total lengths
	ldq	maccum-*	get message length again
	szn	4,2	was the minimum ever set?
	tze	msg040-*	no, just set min. and max.
	cmpq	4,2	check minimum
	tpl	msg030-*	we haven't got a new one
	stq	4,2	we do, store it
	tra	msgbak-*	done
	rem
msg030	cmpq	5,2	check maximum
	tmi	msgbak-*	we haven't beaten it
	stq	5,2	we have, store new one
	tra	msgbak-*
	rem
msg040	stq	4,2	first time, set both
	stq	5,2
msgbak	return	mmsg
	rem
	ttls	storage for all metering subroutines
	rem
l.a001	oct	024000	bits to inhibit interrupts and overflow
l.a002	zero	buftmk
l.a003	vfd	18/bfflst
	rem
a.a001	ind	setbpt
	rem
maccum	bss	1	for accumulate length of current message
	rem
	end
