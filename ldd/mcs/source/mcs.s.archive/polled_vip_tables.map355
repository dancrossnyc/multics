* ***********************************************************
* *                                                         *
* * Copyright, (C) Honeywell Information Systems Inc., 1982 *
* *                                                         *
* * Copyright (c) 1972 by Massachusetts Institute of        *
* * Technology and Honeywell Information Systems, Inc.      *
* *                                                         *
* ***********************************************************

	lbl	,polled_vip_tables
	ttl	polled_vip_tables
	editp	on
	pmc	off
	detail	off
	pcc	off
*********************************************************************
*
*	polled_vip_tables
*
*	These control tables are designed to support the polled VIP
*	communication protocol.  Both controller polling and
*	round-robin station polling are available.
*
*	Coded November 1978 by Jerry Stern
*
*********************************************************************
	rem
pvip	null
	rem
	symdef	pvstar
	rem
	symref	begin
	symref	hungup
	symref	adbyte
	symref	cvaddr
	rem
	pmc	save,on
	tib
	meters
	csbits
	tconst
	pmc	restore
	ttls	polled vip cct
	cctdef
	rem
ct.eot	equ	ct.sw+ct.t0s+ct.syn
	rem
	rem
	base	64
vipcct	null	* cct for polled vip
	rem	* table 0 - terminate on eot, ignore syn
	rem
	vfd	9/ct.ncs,9/ct.ncs * 000   001
	vfd	9/ct.ncs,9/ct.tb1 * 002   etx
	vfd	9/ct.eot,9/ct.ncs * eot   005
	vfd	9/ct.ncs,9/ct.ncs * 006   007
	vfd	9/ct.ncs,9/ct.ncs * 010   011
	vfd	9/ct.ncs,9/ct.ncs * 012   013
	vfd	9/ct.ncs,9/ct.ncs * 014   015
	vfd	9/ct.ncs,9/ct.ncs * 016   017
	vfd	9/ct.ncs,9/ct.ncs * 020   021
	vfd	9/ct.ncs,9/ct.ncs * 022   023
	vfd	9/ct.ncs,9/ct.ncs * 024   025
	vfd	9/ct.ign,9/ct.ncs * syn   027
	vfd	9/ct.ncs,9/ct.ncs * 030   031
	vfd	9/ct.ncs,9/ct.ncs * 032   033
	vfd	9/ct.ncs,9/ct.ncs * 034   035
	vfd	9/ct.ncs,9/ct.ncs * 036   037
	dup	1,48
	vfd	9/ct.ncs,9/ct.ncs * 040 - 177
	rem
	rem
	rem	* table 1 - store lrc char and switch to table 0
	rem
	dup	1,64
	vfd	9/ct.ncs,9/ct.ncs * 000 - 177
	rem
	rem
	rem
	start	pvip
	ttls	polled vip tib extension symbols
	tibex	poladr,char	/* poll address */
	tibex	argadr,char	/* address char subroutine arg */
	tibex	argsta,char	/* status char subroutine arg */
	tibex	inadr,char	/* input message address */
	tibex	insta,char	/* input message status char */
	tibex	outdev,char	/* output message device address */
	tibex	savdev,char	/* pending output message device address */
	tibex	repadr,char	/* station address for reply */
	tibex	reptyp,char	/* reply type - ack or nak */
	tibex	dspsta,char	/* display status */
	tibex	prtsta,char	/* printer status */
	tibex	blkend,char	/* end of block - etx or etb */
	rem
	tibex	stat0,word	/* line status/line control words */
	tibex	stat1,word
	tibex	stat2,word
	tibex	stat3,word
	tibex	nsbchn,word	/* number of subchannels */
	tibex	sbchn1,word	/* subchannel mask - part 1 */
	tibex	sbchn2,word	/* subchannel mask - part 2 */
	tibex	curadr,word	/* current poll address */
	tibex	inkcnt,word	/* count of consecutive naks for bad input */
	tibex	onkcnt,word	/* count of consecutive naks for bad output */
	tibex	itocnt,word	/* count of consecutive timeouts */
	tibex	msgcnt,word	/* count of status messages in input frame */
	tibex	qcount,word	/* count of consecutive quiescent responses */
	tibex	ptime,word	/* pause time between quiescent response cycles */
	tibex	wrtcnt,word	/* count of consecutive writes */
	tibex	echom1,word	/* echo mask - part 1 */
	tibex	echom2,word	/* echo mask - part 2 */

	rem
	tibex	tbxflg,word	/* flag word */
idle	bool	000001	/* ON if polling stopped */
quiet	bool	000002	/* ON if got quiescent input frame */
datrcv	bool	000004	/* ON if got input during output */
rflag	bool	000010	/* ON if reading while writing */
textsw	bool	000020	/* ON if got text msg in input frame */
rderr	bool	000040	/* ON if error reading input frame */
cntrlr	bool	000100	/* ON if controller polling enabled */
echosw	bool	000200	/* ON if CRLF echoing enabled */
afrsw	bool	000400	/* ON to await first response */
rdpar	bool	001000	/* ON if parity error in input frame */
blderr	bool	002000	/* ON if bdbld done  */
	rem		/* return label for error handling */
	tibex	rtnlbl,word
	ttls	polled vip constant symbols
*** control characters ***
	rem
dspdev	bool	140	/* display device address */
prtdev	bool	150	/* printer device address */
etb	bool	027
prt	bool	032	/* printer message type */
ctlpol	bool	010	/* controller poll address */
eof	bool	400	/* special end-of-frame marker */
pgof	bool	156	/* page overflow status char */
	rem
	rem
*** line status types ***
	rem
lstpst	equ	1	/* printer status */
lstito	equ	2	/* input timeout */
lstink	equ	3	/* input nak */
lstonk	equ	4	/* output nak */
lstbof	equ	5	/* bad output frame */
lstoto	equ	6	/* output timeout */
lstdst	equ	7	/* display status */
lstchu	equ	8	/* i hung up the channel */
	rem
	rem
*** line control types ***
	rem
lctssp	equ	1	/* start station polling */
lctscp	equ	2	/* start controller polling */
lctstp	equ	3	/* stop polling */
lctspt	equ	4	/* set pause time */
lctsem	equ	5	/* set echo mask */
lctafr	equ	6	/* awit first poll response */
	rem
	rem
*** inscan control strings ***
	rem
quiet1	chstr	(rescan,match,eot)
quiet2	chstr	(match,eot)
getsoh	chstr	(rescan,match,soh,ignore)
mormsg	chstr	(search,soh,ignore)
regmsg	chstr	(strlrc,movchr,inadr,nxtchr,movchr,insta,nxtchr,nxtchr,nx
	etc	tchr,match,stx,nxtchr,serch2,etx,etb,movchr,blkend,ignore
	etc	,cmplrc,ignore)
chgadr	chstr	(replac,repadr)
skpmsg	chstr	(serch2,etx,etb,ignore,ignore,match,soh,ignore)
	rem
	rem
*** outscn control strings ***
	rem
outfrm	chstr	(rescan,endchn,match,eof,replac,eot,seteom)
outadr	chstr	(rescan,search,soh,ignore,movchr,repadr,search,etx,ignore
	etc	,ignore,search,soh,ignore,movchr,outdev)
setlrc	chstr	(rescan,search,soh,ignore,strlrc,search,etx,ignore,outlrc
	etc	)
nxtlrc	chstr	(search,soh,ignore,strlrc,search,etx,ignore,outlrc)
setpol	chstr	(rescan,search,soh,ignore,replac,poladr)
	rem
	rem
*** bldmsg control strings ***
	rem
polmsg	chstr	(syn,syn,syn,syn,soh,poladr,null,space,space,stx,etx,spac
	etc	e,syn,syn,syn,syn,eot,seteom)
repmsg	chstr	(syn,syn,syn,syn,soh,repadr,null,space,space,stx,etx,spac
	etc	e,syn,syn,syn,syn,soh,dspdev,reptyp,space,space,stx,etx,s
	etc	pace,syn,syn,syn,syn,eot,seteom)
	rem
echmsg	chstr	(syn,syn,syn,syn,soh,repadr,null,space,space,stx,etx,spac
	etc	e,syn,syn,syn,syn,soh,dspdev,reptyp,space,space,stx,cr,nl
	etc	,etx,space,syn,syn,syn,syn,eot,seteom)
	ttls	polled vip dialup and initialization
*********************************************************************
*
*	Wait for line to dial up, i.e., wait for dsr to come on.
*
*********************************************************************
	rem
pvstar	tstflg	tflisn,lisn	/* told to listen ? */
	wait	0,0,begin	/* no, start over */
	rem
lisn	tstflg	tfdlup,dulisn	/* handle dialup line */
	contrl	sdtr+srts+stat	/* ready full duplex line */
	wait	0,0,cklisn
	status	cts+dsr,0,ckdlup
	rem
dulisn	contrl	sdtr+rrts+stat	/* ready halfduplex line */
	wait	0,0,cklisn
	status	dsr,0,ckdlup
	rem
ckdlup	setime	1	/* wait for dsr to stabilize */
	wait	ckdsr,0,cklisn
	rem
ckdsr	contrl	stat	/* find out if dsr is still up */
	wait	0,0,cklisn
	status	dsr,0,dialed	/* yes, this is a real dial up */
	status	0,dsr,hungup	/* no, dsr vanished */
	rem
cklisn	tstflg	tfhang,hang
	tstflg	tflisn,golisn
	goto	hungup
golisn	waitm
	rem
	rem
*********************************************************************
*
*	Line has dialed up. Initialize and signal dialup.
*
*********************************************************************
	rem
dialed	getext	,hang1    /* cant do anything without a tib extension */
	setcct	vipcct
	config		/* configure send and rcv odd parity */
	smode	fg.lpr+fg.lps+fg.lpo
	rem
	setflg	tfmrcv	/* use message rcv mode */
	setlcl	ptime,1	/* default pause time = 1 sec */
	rem
	signal	dialup
	ttls	polled vip basic work loop
*********************************************************************
*
*	Enter idle state.  Do nothing until told to start polling.
*
*********************************************************************
	rem
	setlcf	tbxflg,idle	/* set idle state */
isleep	wait	0,0,tstate	/* wait for a line control order */
	status	0,dsr,hang
	rem
notidl	clrlcf	tbxflg,idle	/* test-state handler transfers here */
	dumpin
	calsub	dmpall
	rem
	setlcl	qcount,0	/* initialize a few things */
	setlcl	wrtcnt,0
	clrlcf	tbxflg,quiet
	setchr	savdev,nochar
	setlcf	tbxflg,afrsw
	rem
	rem
*********************************************************************
*
*	Find something to do.  If there is output, send it.  Otherwise,
*	send a poll.  Before polling, however, see if we should pause.
*
*********************************************************************
	rem
getwrk	setlcl	inkcnt,0	/* reset error counters */
	setlcl	onkcnt,0
	setlcl	itocnt,0
	rem
	tstlcl	wrtcnt,2,forcep	/* force poll after 2 consecutive writes */
	tstwrt	writef	/* have any output ? */
	tstlcf	tbxflg,idle,isleep /* if idle, go to sleep */
	rem
	tstlcf	tbxflg,quiet,qcycle /* last response was quiescent ? */
forcep	setlcl	qcount,0	/* no, reset counter */
	goto	poll
	rem
qcycle	tstlcl	ptime,0,poll	/* no pause wanted */
	tstlcf	tbxflg,cntrlr,pause /* controller polling enabled ? */
	addlcl	qcount,1	/* no, bump counter */
	tstlcv	qcount,nsbchn,pause /* finished quiescent cycle ? */
	goto	poll	/* no */
	rem
pause	setlcl	qcount,0	/* reset counter */
	setimv	ptime	/* set timer */
	wait	poll,writef,tstate /* wait for timer or anything else */
	status	0,dsr,hang
	eject
*********************************************************************
*
*	Send output if we have a complete frame.
*
*********************************************************************
	rem
writef	addlcl	wrtcnt,1	/* bump write counter */
	clrlcf	tbxflg,quiet	/* for output, ignore quiescent response */
ckeot	outscn	outfrm,noeot	/* is there a complete frame ? */
	signal	sndout	/* yes, start the next one coming */
	rem
	outscn	outadr,badout	/* repadr <- select addr, outdev <- device addr */
	setchr	savdev,outdev	/* save device address of this output */
	setchr	argadr,repadr
	calasm	swapps	/* convert select addr to poll addr */
	setchr	poladr,argadr	/* output frame ends with poll to this addr */
	meterm	1
	goto	sndfrm	/* send it */
	rem
badout	dmpout		/* ugh, a bad output frame */
	setchr	savdev,nochar
	setlcl	stat0,lstbof	/* indicate bad output frame */
	linsta	stat0	/* send line status */
	goto	getwrk
	rem
noeot	signal	sndout	/* ask for rest of frame */
	meter2	m.cnt4,1
	clrflg	tfwabt	/* so we can detect write abort at next wait */
	setime	5	/* wait at most 5 secs */
	wait	otosta,ckeot,tswabt
	status	0,dsr,hang
	rem
otosta	setlcl	stat0,lstoto	/* indicate output timeouts status */
	linsta	stat0	/* send line status */
	dmpout		/* discard incomplete output */
	goto	getwrk
	eject
*********************************************************************
*
*	Build a poll message.
*
*********************************************************************
	rem
poll	setlcl	wrtcnt,0	/* reset write counter */
	setlcf	tbxflg,quiet	/* assume quiescent response */
	tstlcf	tbxflg,cntrlr,cpoll /* controller polling enabled ? */
	rem
	calasm	getspa	/* get station poll address */
	setchr	argadr,poladr
	calasm	swapps	/* convert to select address */
	setchr	repadr,argadr	/* and save for reply */
	goto	poll1
	rem
bldfld	setlcl	stat0,lstchu	/* hung up the channel */
	linsta	stat0	/* tell host */
	goto	hang	/* and say goodbye */
	rem	/* if i've been here, tell host and hangup */
bdbld	tstlcf	tbxflg,blderr,bldfld
	setime	1	/* wait 1 sec and then retry */
	wait	bldwt,0,tstate
	status	0,dsr,hang
bldwt	setlcf	tbxflg,blderr /* note that i've been here */
	gotov	rtnlbl	/* back to where i'm told */

	rem
cpoll	setchr	poladr,ctlpol	/* prepare for controller poll */
	setchr	repadr,nochar	/* don't know who will respond */
poll1	clrlcf	tbxflg,blderr	/* reset */
	setlcl	rtnlbl,poll1a	/* where to go */
poll1a	bldmsg	polmsg,bdbld	/* build the poll message */
poll2	clrlcf	tbxflg,blderr	/* reset */
	setlcl	rtnlbl,poll2a
poll2a	outscn	setlrc,bdbld
poll3	setchr	outdev,nochar	/* no output device, i.e., not a select msg */
	eject
*********************************************************************
*
*	Send the output frame and wait for a response.
*
*********************************************************************
	rem
sndfrm	calsub	writer	/* enter rcv mode and write the frame */
	tstlcf	tbxflg,datrcv,read /* got input during write ? */
	tstlcf	tbxflg,rdpar,read /* got par err for input during write? */
	rem
	setime	3	/* set 3 second timeout */
	wait	timout,0,tstate
	status	0,dsr,hang
	status	brkchr,0,read
	status	exh,0,exhsta
	status	xte,0,xtesta
	status	parity,0,parsta
	rem
timout	meter2	m.cnt3,1
	calsub	stprcv	/* timed out, leave rcv mode */
	dumpin		/* dump any incomplete input */
	clrlcf	tbxflg,quiet	/* did not get quiescent response */
	addlcl	itocnt,1	/* bump counter */
	tstlcl	itocnt,3,itosta /* too many timeouts ? */
	goto	sndfrm	/* not yet, send it again */
	rem
itosta	tstlcf	tbxflg,afrsw,dmpfrm /* skip line status if waiting for response */
	setlcl	stat0,lstito	/* indicate input timeout status */
	setchr	argadr,repadr
	calasm	ldstat	/* put repadr in stat1 */
	linsta	stat0	/* send line status */
	rem
dmpfrm	dmpout		/* dump whatever output we had */
	cmpchr	outdev,nochar,rstest /* if poll, check for pending output */
	setchr	savdev,nochar	/* no pending output */
	goto	getwrk	/* better luck next time */
	rem
parsta	setlcf	tbxflg,rdpar	/* parity error on input */
	goto	read	/* meter it later */
exhsta	meter2	m.exh,1
	goto	read
xtesta	meter1	m.xte,1
	eject
*********************************************************************
*
*	Got an input frame.  See what messages it contains.
*
*********************************************************************
	rem
read	calsub	stprcv	/* exit rcv mode */
	clrlcf	tbxflg,afrsw	/* no longer awaiting first response */
	setlcl	itocnt,0	/* did not time out */
	tstlcf	tbxflg,rdpar,badpar /* parity error in input frame */
	setchr	reptyp,ack	/* default reply is an ack */
	setchr	dspsta,nak	/* default display status is NAK */
	setchr	prtsta,nochar	/* default printer status is none */
	clrlcf	tbxflg,textsw+rderr /* init these flags */
	setlcl	msgcnt,0	/* init status message count */
	rem
	inscan	quiet1,rdsoh	/* type 1 quiescent frame ? */
	goto	endfrm	/* yes */
rdsoh	inscan	getsoh,sndnak	/* frame must start with soh */
	inscan	quiet2,notqui	/* type 2 quiescent message ? */
	goto	endfrm	/* yes */
notqui	clrlcf	tbxflg,quiet	/* not a quiescent frame */
	rem
rdloop	setchr	insta,nochar	/* init message status */
	setchr	inadr,nochar	/* init message address */
	setchr	blkend,nochar	/* init block end char */
	inscan	regmsg,badmsg	/* is there a regular message ? */
	goto	goodms	/* yes, looks good */
	rem
badmsg	setlcf	tbxflg,rderr	/* a sick message */
	goto	nxtmsg
	rem
badpar	meter1	m.par,1	/* meter the parity error */
	clrlcf	tbxflg,rdpar	/* reset the flag for next time */
	goto	sndnak	/* nak the input frame */
	rem
goodms	cmpchr	poladr,ctlpol,ckmcnt /* sent controller poll ? */
	goto	notpol	/* no */
ckmcnt	tstlcl	msgcnt,0,ispol	/* yes, is this first message ? */
	goto	notpol	/* no */
	rem
ispol	setchr	argadr,inadr	/* get poll addr of responding station */
	calasm	swapps	/* convert to select address */
	setchr	repadr,argadr	/* that's who we reply to */
	goto	nxtmsg
	rem
notpol	cmpchr	insta,null,txtmsg /* got a text message */
	cmpchr	insta,prt,txtmsg /* likewise */
	rem
	cmpchr	inadr,dspdev,dspsav /* got display status */
	cmpchr	inadr,prtdev,prtsav /* got printer status */
	rem
	goto	nxtmsg	/* got garbage */
	rem
dspsav	setchr	dspsta,insta	/* save display status */
	goto	nxtmsg
	rem
prtsav	setchr	prtsta,insta	/* save printer status */
	rem
nxtmsg	inscan	mormsg,endfrm	/* more messages in input frame ? */
	addlcl	msgcnt,1	/* yes, bump status message count */
	goto	rdloop	/* process next message */
	rem
endfrm	dumpin		/* discard the input */
	tstlcf	tbxflg,rderr,sndnak /* might have lost text msg, so send nak */
	goto	dostat
	rem
	rem
*********************************************************************
*
*	Got a text message.  There can only be one text message per
*	frame and it must be the last message.  See if we sent a
*	controller poll.  If so, the first message of the frame
*	will be a poll message which contains the responding station
*	address.  If not, we must change the device address in the
*	text message to a station address to identify the message
*	source.
*
*********************************************************************
	rem
txtmsg	tstlcf	tbxflg,rderr,sndnak /* get a clean frame */
	setlcf	tbxflg,textsw	/* remember getting text message */
	cmpchr	poladr,ctlpol,sndtxt /* sent controller poll ? */
	rem
	inscan	getsoh,sndnak	/* position to start of input frame */
findtx	tstlcl	msgcnt,0,chgtxt	/* status message next ? */
	addlcl	msgcnt,-1	/* yes, decrement status message count */
	inscan	skpmsg,sndnak	/* skip the status message */
	goto	findtx	/* keep scanning for text message */
	rem
chgtxt	inscan	chgadr,sndnak	/* change the address */
sndtxt	meterm	0
	sendin		/* send input to Multics */
	goto	reply	/* send ack for text message */
	eject
*********************************************************************
*
*	Got bad input.  Reply by sending a nak.
*
*********************************************************************
	rem
sndnak	dumpin		/* discard bad input */
	meter2	m.cnt1,1
	clrlcf	tbxflg,quiet	/* not a quiescent response */
	setchr	reptyp,nak	/* reply type is nak */
	cmpchr	repadr,nochar,dostat /* station adress known ? */
	tstlcl	inkcnt,3,inksta	/* have we sent too many naks ? */
	addlcl	inkcnt,1	/* not yet, bump count */
	goto	reply
	rem
inksta	setlcl	stat0,lstink	/* indicate input nak status */
	setchr	argadr,repadr
	calasm	ldstat	/* put repadr in stat1 */
	linsta	stat0	/* send line status */
	rem
	rem
*********************************************************************
*
*	Reply	to input frame.  Send ack or nak frame.
*
*********************************************************************
	rem
reply	cmpchr	reptyp,nak,reply3 /* ordinary nak message */
	tstlcf	tbxflg,echosw,reply2 /* echoing enabled ? */
	goto	reply3	/* no */
	rem
reply2	calasm	testem	/* test echo mask for current station */
	tstlcl	temflg,0,reply3	/* temflg = 0 means don't echo */
	clrlcf	tbxflg,blderr	/* first time here */
	setlcl	rtnlbl,repl2a	/* set to come back there */
repl2a	bldmsg	echmsg,bdbld	/* build reply frame with echo */
	goto	reply4
	rem
reply3	clrlcf	tbxflg,blderr	/* reset */
	setlcl	rtnlbl,repl3a
repl3a	bldmsg	repmsg,bdbld	/* build ordinary reply frame */
	rem
reply4	clrlcf	tbxflg,blderr	/* reset */
	setlcl	rtnlbl,repl4a
repl4a	outscn	setlrc,bdbld	/* put lrc on select message */
	clrlcf	tbxflg,blderr	/* reset */
	setlcl	rtnlbl,repl4b
repl4b	outscn	nxtlrc,bdbld	/* put lrc on status message */
	rem
	calsub	write	/* send it */
	dmpout		/* and throw it away */
	eject
*********************************************************************
*
*	Process saved input status.  Delete output unless it must
*	be resent.  Note that the receipt of text input from a
*	display implies that any output sent was ignored and must
*	be resent.
*
*********************************************************************
	rem
dostat	cmpchr	reptyp,nak,dspck /* did we nak the input ? */
	setlcl	inkcnt,0	/* no, reset counter */
	rem
dspck	cmpchr	outdev,dspdev,dspsnt /* sent display output ? */
	goto	prtck1	/* no */
	rem
dspsnt	setchr	argsta,dspsta	/* set arg for cknak subr */
	calsub	cknak	/* check for nak status */
	cmpchr	argsta,nak,prtck2 /* was it nak ? */
	cmpchr	dspsta,pgof,dsplst /* was it PGOF ? */
	goto	txtck	/* no */
	rem
dsplst	setlcl	stat0,lstdst	/* send line status */
	setchr	argadr,repadr
	calasm	ldstat	/* put repadr and dspsta in stat1 */
	linsta	stat0
	rem
txtck	tstlcf	tbxflg,textsw,prtck2 /* text message received ? */
	goto	delout	/* no, discard the output */
	rem
prtck1	cmpchr	outdev,prtdev,prtsnt /* sent printer output ? */
	goto	prtck2	/* no */
	rem
prtsnt	setchr	argsta,prtsta	/* set arg for cknak subr */
	calsub	cknak	/* check for nak status */
	cmpchr	argsta,nak,rptest /* was it nak ? */
	rem
delout	dmpout		/* discard the output frame */
	setchr	savdev,nochar	/* no output pending */
	rem
prtck2	cmpchr	prtsta,nochar,rptest /* got printer status ? */
	setlcl	stat0,lstpst	/* indicate printer status */
	setchr	argadr,repadr
	setchr	argsta,prtsta
	calasm	ldstat	/* put repadr and prtsta in stat1 */
	linsta	stat0	/* send line status */
	eject
*********************************************************************
*
*	See if it is necessary to repoll the same station.
*
*********************************************************************
	rem
rptest	cmpchr	repadr,nochar,ckdel /* station adress known ? */
	cmpchr	reptyp,nak,rptst2 /* did we nak the input ? */
	tstlcf	tbxflg,textsw,cketb /* got a text message ? */
	goto	ckdel	/* no, don't have to repoll */
	rem
cketb	cmpchr	blkend,etb,rptst2 /* did text block end with etb ? */
	goto	ckdel	/* no */
	rem
rptst2	cmpchr	outdev,nochar,rptst3 /* last output was a poll, reuse it */
	goto	poll1	/* build a poll message */
	rem
rptst3	cmpchr	poladr,ctlpol,rptst4 /* was last poll to controller ? */
	goto	poll3	/* no, already have station poll */
	rem
rptst4	setchr	argadr,repadr	/* get station select address */
	calasm	swapps	/* convert to poll address */
	setchr	poladr,argadr
	clrlcf	tbxflg,blderr	/* reset */
	setlcl	rtnlbl,rptst5
rptst5	outscn	setpol,bdbld	/* update into poll message */
	goto	poll2
	rem
ckdel	cmpchr	outdev,nochar,delpol /* was last output a poll ? */
	goto	rstest	/* no */
delpol	dmpout		/* yes, delete it */
	rem
	rem
*********************************************************************
*
*	Check for pending output to be resent.
*
*********************************************************************
	rem
rstest	cmpchr	savdev,nochar,getwrk /* if no saved output, start at top */
	setchr	outdev,savdev	/* saved output now current again */
	goto	sndfrm	/* resend it */
	ttls	polled vip test-state handler
*********************************************************************
*
*	Test-state handler.
*
*********************************************************************
	rem
tstate	tstflg	tfhang,hang
	linctl	stat0,tsret	/* check for line control */
	tstlcl	stat0,lctssp,setspl /* start station polling */
	tstlcl	stat0,lctscp,setcpl /* start controller polling */
	tstlcl	stat0,lctstp,poloff /* stop polling */
	tstlcl	stat0,lctspt,setpt /* set pause time */
	tstlcl	stat0,lctsem,echomk /* set echo mask */
	tstlcl	stat0,lctafr,setafr /* set await first response switch */
tsret	waitm
	rem
setspl	tstlcl	stat1,0,poloff	/* if zero subchan count, stop polling */
	tstlcl	stat2,0,cksta3	/* first part of subchan mask is zero ? */
	goto	dossp	/* no */
cksta3	tstlcl	stat3,0,poloff	/* if zero subchan mask, stop polling */
	rem
dossp	setlcv	nsbchn,stat1	/* copy subchannel count */
	setlcv	sbchn1,stat2	/* copy subchannel mask */
	setlcv	sbchn2,stat3
	setlcl	curadr,0	/* init current station address */
	clrlcf	tbxflg,cntrlr	/* disable controller polling */
	rem
	tstlcf	tbxflg,idle,notidl /* if idle, go to work */
	waitm
	rem
setcpl	setlcf	tbxflg,cntrlr	/* enable controller polling */
	tstlcf	tbxflg,idle,notidl /* if idle, go to work */
	waitm
	rem
poloff	setlcf	tbxflg,idle	/* enter idle state */
	waitm
	rem
setpt	setlcv	ptime,stat1	/* set pause time */
	waitm
	rem
echomk	setlcv	echom1,stat2	/* save echo mask */
	setlcv	echom2,stat3
	tstlcl	stat1,0,noecho	/* stat1 = 0 means null mask */
	setlcf	tbxflg,echosw
	waitm
noecho	clrlcf	tbxflg,echosw
	waitm
	rem
setafr	setlcf	tbxflg,afrsw	/* await first poll response */
	waitm
	rem
tswabt	tstflg	tfwabt,wabort	/* check for write abort */
	goto	tstate	/* nope, do standard test-state stuff */
wabort	dmpout		/* discard output */
	goto	getwrk
	ttls	polled vip hangup and punt handlers
*********************************************************************
*
*	Come here to hang up the line.
*
*********************************************************************
	rem
hang	unwind		/* in case we jumped out of a subroutine */
	retext		/* free tib extension */
hang1	stpchn
	dumpin
	calsub	dmpall
	rem
	contrl	rdtr	/* drop dtr */
	clrflg	(tflisn,tfhang)
	signal	hangup
	goto	hungup
	ttls	polled vip write subroutine
************************************************************************
*
*	subroutine to write the current output stuff.
*	it can be called at "write", in which case only output
*	is done, or it can be called at "writer", which
*	also sets receive mode during the output. the flag
*	"datrcv" in the tib ext will be set if data is read while
*	the output is in progress.
*
*	this routine was adapted from the bsc_tables counterpart
*
************************************************************************
	rem
write	clrlcf	tbxflg,rflag	/* remember which entry */
	goto	write1
	rem
writer	setlcf	tbxflg,rflag
	rem
write1	setime	0
	clrlcf	tbxflg,datrcv
	holdot		/* hold all output */
	rem
	tstflg	tfdlup,write3	/* half duplex */
	goto	write4	/* full duplex */
	rem
write3	tstlcf	tbxflg,rflag,write5 /* choose between dcw lists */
	dcwlst
	cmd	sxmit+srts
	output	(outmsg)
	cmd	rxmit+rrts+sterm
	goto	write6
	rem
write5	dcwlst
	cmd	sxmit+srec+srts
	output	(outmsg)
	cmd	rxmit+rrts+sterm
	goto	write6
	rem
write4	tstlcf	tbxflg,rflag,write7 /* choose between fulldpx dcwlists */
	dcwlst
	cmd	sxmit
	output	(outmsg)
	cmd	rxmit+sterm
	goto	write6
	rem
write7	dcwlst
	cmd	sxmit+srec
	output	(outmsg)
	cmd	rxmit+sterm
	rem
write6	wait	0,0,tstate	/* common wait block */
	status	0,dsr,hang
	status	term,0,write9
	status	brkchr,0,write8	/* got input during output */
	status	parity,0,write2
	rem
write2	setlcf	tbxflg,rdpar	/* remember parity error on input frame */
	waitm			/* continue waiting for output to finish */
	rem
write8	setlcf	tbxflg,datrcv	/* remember data came in */
	waitm
	rem
write9	retsub
	ttls	polled vip utility routines
*********************************************************************
*
*	Routine to exit receive mode.
*
*********************************************************************
	rem
stprcv	contrl	rrec+smark
	wait	0,0,tstate
	status	marker,0,rcvoff
	rem
rcvoff	retsub
	rem
	rem
*********************************************************************
*
*	Routine to dump all output.
*
*********************************************************************
	rem
dmpall	dmpout
	tstwrt	dmpall
	retsub
	rem
	rem
*********************************************************************
*
*	Routine to handle received nak status.
*
*********************************************************************
	rem
cknak	cmpchr	argsta,nak,cknak2 /* got a nak ? */
	setlcl	onkcnt,0	/* no, reset counter */
	retsub
	rem
cknak2	meter2	m.cnt2,1
	addlcl	onkcnt,1	/* bump count */
	tstlcl	onkcnt,3,cknak3	/* too many naks received ? */
	retsub
	rem
cknak3	setlcl	onkcnt,0	/* pretend it was an ack */
	setchr	argsta,ack
	rem
	setlcl	stat0,lstonk	/* indicate output nak status */
	setchr	argadr,repadr
	calasm	ldstat	/* put repadr in stat1 */
	linsta	stat0	/* send line status */
	retsub
	ttls	polled vip assembler routines
*********************************************************************
*
*	swapps - swap poll/select
*
*	converts the address specified by argadr from a poll address
*	to a corresponding select address or vice versa.
*
*********************************************************************
	rem
swapps	subr	sps,(x3)
	rem
	lda	l.a000-*	(=argadr) get addr of argadr
	tsy	a.a000-*,*	(=adbyte) convert it
	oct	0	conversion failed, die
	lda	0,3,b.0	get value of argadr
	iera	96	flip the poll/select bits
	sta	0,3,b.0	update argadr
	rem
	return	swapps
	eject
*********************************************************************
*
*
*	ldstat - load status
*
*	Stores an address character (argadr) and a status
*	character (argsta) into stat1.
*
*********************************************************************
	rem
ldstat	subr	lds,(x3)
	rem
	lda	l.a003-*	(=argsta) get addr of argsta
	tsy	a.a000-*,*	(=adbyte) convert it
	oct	0	conversion failed, die
	lda	0,3,b.0	get value of argsta
	lrs	9	shift into q
	stq	ldstmp-*	save it
	rem
	lda	l.a000-*	(=argadr) get addr of argadr
	tsy	a.a000-*,*	convert it
	oct	0	conversion failed, die
	lda	0,3,b.0	get value of argadr
	ldq	ldstmp-*	get back argsta
	lrs	9	combine with argadr
	rem
	ldx3	l.a004-*	(=stat1) get addr of stat1
	tsy	a.a001-*,*	(=cvaddr) convert it
	stq	0,3	store status in stat1
	rem
	return	ldstat
	rem
ldstmp	bss	1
	eject
*********************************************************************
*
*	getspa - get station poll address
*
*	Computes the address of the next station to poll based on the
*	subchannel configuration data.  Stores the poll address in
*	poladr.
*
*********************************************************************
	rem
getspa	subr	gsp,(x2,x3)
	rem
	ldx3	l.a006-*	(=sbchn1) get addr of sbchn1
	tsy	a.a001-*,*	(=cvaddr) convert it
	lda	0,3	get value of sbchn1
	ldq	1,3	get value of sbchn2 (assumed adjacent)
	staq	gspsc-*	save subchannel mask
	rem
	ldx3	l.a010-*	(=curadr) get addr of curadr
	tsy	a.a001-*,*	(=cvaddr) convert it
	lda	0,3	get value of curadr
	ora	l.a009-*	(=llr 0) make llr instruction
	sta	gsp010-*	put in place
	rem
	ldaq	gspsc-*	get subchannel mask
gsp010	llr	0	rotate to current subchan
	rem
	ldx2	l.a007-*	(=37) init shift counter
gsp020	iacx2	-1	decrement shift counter
	tze	gsp025-*	error, no subchans found
	llr	1	rotate subchan mask
	tmi	gsp030-*	subchan is configured
	tra	gsp020-*	keep looking
	rem
gsp025	oct	0	die
	rem
gsp030	stx2	gsptmp-*	store shift counter
	lda	l.a007-*	(=37) get original value
	sba	gsptmp-*	get number of shifts
	ada	0,3	add in starting address
	cmpa	l.a008-*	(=36) did we wrap around ?
	tmi	gsp035-*	no
	sba	l.a008-*	(=36) yes, normalize
gsp035	sta	0,3	update curadr
	sta	gsptmp-*	save a copy
	rem
	lda	l.a001-*	(=poladr) get addr of poladr
	tsy	a.a000-*,*	(=adbyte) convert it
	oct	0	conversion failed, die
	ldq	gsptmp-*	get current subchan addr
	iaq	32	convert to poll addr
	stq	0,3,b.0	update poladr
	rem
	return	getspa
	rem
	even
gspsc	bss	2
gsptmp	bss	1
	eject
******************************************************************
*
*	testem - test echo mask
*
*	tests the echo mask to see if echoing is required for
*	the station whose select address is given by repadr.
*
******************************************************************
	rem
testem	subr	tem,(x3)
	rem
	ldx3	l.a002-*	(=echom1) get addr of echom1
	tsy	a.a001-*,*	(=cvaddr) convert it
	lda	0,3	get value of echom1
	ldq	1,3	get value of echom2 (assumed adjacent)
	staq	temdbl-*	save echo mask
	rem
	lda	l.a005-*	(=repadr) get addr of repadr
	tsy	a.a000-*,*	(=adbyte) convert it
	oct	0	conversion failed, die
	lda	0,3,b.0	get value of repadr
	iana	31	mask out high-order bits
	ora	l.a009-*	(=llr 0) make llr instruction
	sta	tem010-*	put in place
	rem
	ila	1
	sta	temflg-*	assume echo enabled
	rem
	ldaq	temdbl-*	get back echo mask
tem010	llr	0	rotate to station of interest
	tmi	temret-*	echo is enabled
	stz	temflg-*	echo is disabled
	rem
temret	return	testem
	rem
	even
temdbl	bss	2
temflg	bss	1
	eject
l.a000	vfd	18/argadr
l.a001	vfd	18/poladr
l.a002	vfd	18/echom1
l.a003	vfd	18/argsta
l.a004	vfd	18/stat1
l.a005	vfd	18/repadr
l.a006	vfd	18/sbchn1
l.a007	dec	37
l.a008	dec	36
l.a009	llr	0
l.a010	vfd	18/curadr
l.a011	oct	377777
	rem
a.a000	ind	adbyte
a.a001	ind	cvaddr
	rem
	end
