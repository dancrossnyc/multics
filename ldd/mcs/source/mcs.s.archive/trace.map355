* ***********************************************************
* *                                                         *
* * Copyright, (C) Honeywell Information Systems Inc., 1982 *
* *                                                         *
* * Copyright (c) 1972 by Massachusetts Institute of        *
* * Technology and Honeywell Information Systems, Inc.      *
* *                                                         *
* ***********************************************************

	ttl	multics/mcs trace package
	ttls	multics/mcs trace package
	lbl	,trace
	pcc	off
	pmc	off
	editp	on
	detail	on
	rem
************************************************************************
*
*	trace
*
*	this routine is the interface for all trace calls
*	made by other mcs routines. it does memory tracing
*	directly and calls printer_trace to do any
*	required printer tracing. the module number
*	and a tracing type are always supplied by the
*	caller.
*
*	memory tracing involves putting entries in a circular
*	trace buffer which is printed by the various
*	fnp dumping programs.
*
*	printer tracing is done under control of the
*	processor switches and a switch word passed in
*	the call. the printer_trace module need not
*	be loaded, and the printer is an
*	optional part of the configuration.
*
*	buffer tracing is a special form of printer
*	tracing which causes buffers to be dumped
*	to the printer
*
*   coded november 1974 by robert s. coren
*   modified 1979 june 10 by art beattie to put trace data at high end
*     of memory.
*
************************************************************************
	rem
	rem
	pmc	save,on
	systm
	rem
	comreg
	ttls	macros, symdefs, etc.
mpy	macro
	mpf 	#1
	lrl	1
	endm
	rem
	rem
	symdef	trac
	symdef	trace	memory and printer tracing
	symdef	traceb	buffer tracing
	symdef	nxtrce	pointer to next entry in trace buffer
	symdef	endtrc	pointer to last word in trace buffer
	rem
	symref	simclk
	symref	ptrace
	symref	ptrabf
	symref	mvpgtg	move data paging target
	symref	setptw	virtualize absolute address and set ptw
	rem
	rem
	rem
	rem
trac	null
	start	trac,8
	pmc	restore
	ttls	trace -- entry for memory and printer tracing
	rem
************************************************************************
*
*   trace is used for memory and printer tracing (other than buffer
*   tracing). if bit corresponding to calling module in trace enable mask
*   is off, tracing will not occur.
*
*   calling sequence:
*
*	tsy	addr-*,*
*	vfd	6/count,12/type	count = number of data words
*	vfd	6/modnum,12/switch
* addr	ind	trace
*	bss	count	data words
*	---		return point
*
*   printer tracing will be done only if all "on" bits
*   in modnum-switch word are on in processor switches, and "switch" is
*   non-zero
*
************************************************************************
	rem
	rem
trace	subr	tra,(inh,q,x1,x2,x3)
	rem
	lda	trace-*,*	get count-type word
	lrl	12	separate items
	qrl	6	and store them locally
	staq	count-*
	aos	trace-*	bump to modnum-switch word
	lda	trace-*,*
	lrl	12	treat it similarly
	qrl	6
	staq	modsw-*
	rem
	szn	a.a006-*,*	(.crtsw) is tracing disabled?
	tnz	trabak-*	yes
	rem
	iaa	-1	get module number - 1
	ora	l.a007-*	combine with shift template
	sta	trashf-*	put it in shift instruction
	ila	1
	als	17	get high-order bit alone in a
trashf	arl	**	(modified above)
	rem		now we have bt corresponding to modnum
	cana	a.a001-*,*	(.crtra) is mask bit on?
	tze	trabak-*	if not, skip the whole thing
	orsa	switch-*	hang on to bit
	rem		we will now do memory trace
	lda	a.a010-*,*	(.crpte,*) remember current page table word
	sta	tsvpte-*
	rem
	ldx1	nxtrce-*	get next available spot in trace table
	cx1a
	ldi	l.a001-*	(=o024000) inhibit overflow for this
	ada	count-*	add data count
	iaa	2	and two words for header
	cmpa	endtrc-*	room for this entry?
	tnc	tra010-*	yes
	cx1a		no. copy address to a
	tsy	a.a009-*,*	(setptw) virtualize absolute address
	cax1		put it in original register
	lda	l.a002-*	(525250) else put in end marker
	sta	0,1
	ila	1	make sure we make wraparound check
	sta	wrap-*
	rem
	ldx1	a.a002-*,*	(.crtrb) physical beginning of table
	cx1a
	sta	nxtrce-*	is new next pointer
	ada	count-*
	iaa	3	for header and end marker
	tra	tra020-*
	rem
tra010	null		a contains pointer to end of next entry already
	iaa	1	except for end marker
tra020	null		have we ever wrapped around table?
	szn	wrap-*
	tze	tra030-*	no, skip overwrite test
	rem
	rem		will we overwrite more than one entry?
	cmpa	a.a003-*,*	(.crtrc) oldest complete entry
	tnc	tra030-*	will not be overwritten
	rem		fall through if it will, we must update .crtrc
	sta	temp3-*	save pointer to next free word
	ldq	a.a003-*,*	(.crtrc)
tra025	null
	cqa		copy address to a
	tsy	a.a009-*,*	(setptw) virtualize absolute address
	cax2		put it in x2
	lda	0,2	get first word of entry
	iana	63	isolate word count
	iaa	2
	sta	temp1-*
	adq	temp1-*	bump pointer
	cqa		copy address to a
	tsy	a.a009-*,*	(setptw) virtualize absolute address
	cax2		put it in x2
	lda	0,2	does it now point to physical end?
	cmpa	l.a002-*	(525250)
	tze	tra028-*	yes, start at beginning again
	rem		else see if we've gone far enough
	cmpq	temp3-*	is start of next entry in the clear?
	tnc	tra025-*	no, we will overwrite it too
	tra	tra029-*	else store new value
tra028	null
	ldq	a.a002-*,*	(.crtrb)
	stz	wrap-*	don't test for overwrite again until
	rem		new entries wrap around
tra029	null
	stq	a.a003-*,*	(.crtrc)
	rem
tra030	null		ready to make new entry
	ldq	count-*	get data count
	iaq	3	2 words of header and end marker
	stq	memlen-*	save length of trace entry
	rem		first put in new end marker
	ldx1	a.a008-*	x1 points to beginning of new entry
	ldx3	a.a008-*
	adcx3	count-*
	lda	l.a003-*	(=o525252) logical end marker
	sta	2,3	include 2 words for header
	rem
	lda	modsw-*	get modnum
	als	6
	ora	ttype-*	and type
	als	6
	ora	count-*	and count
	sta	0,1	this is entry header word
	rem		get time now
	lda	a.a005-*,*	(itmb) interval timer
	sta	ttime+1-*	store as 36-bit quantity
	ldaq	a.a004-*,*	(simclk)
	sbaq	ttime-*	subract saved interval timer
	stq	1,1	put it in trace entry (low-order 18 bits only)
	iacx1	2	point to data area
	ldx2	trace-*	point to input data
	iacx2	2
	stx2	datap-*	save data pointer for possible printer tracing
	ldq	count-*	get count of data words
	tze	tra050-*	if any
	rem
tra040	null
	lda	0,2	copy data word into
	sta	0,1	temporary storage
	iacx1	1
	iacx2	1	bump pointers
	iaq	-1	decrement count
	tnz	tra040-*	get next word if any
	rem
*
*  move data from temporary storage to trace data buffer
	rem
tra050	null
	ldx2	a.a008-*	source address
	ldx3	nxtrce-*	target address
	ldq	memlen-*	length of move
	tsy	a.a007-*,*	(mvpgtg)
*
*  restore cpu page table entry
*
	lda	tsvpte-*	previous value
	sta	a.a010-*,*	(.crpte,*) is restored
	rem
	lda	nxtrce-*	update pointer
	ada	count-*	data count
	iaa	2	2 word header
	sta	nxtrce-*	marker is overwritten by next entry
	rem
	rem		now find out if we're supposed to do
	rem		printer tracing
	rem
	ldx2	a.a014-*,*	(.criom) get ptr to iom table
	szn	lpch*2,2	is a printer configured?
	tze	trabak-*	no, don't try tracing
	rem
	lda	switch-*	get switch word
	cana	l.a004-*	(=o007777) are switches all zero?
	tze	trabak-*	yes, no printer tracing
	rem		else read processor switches to find out
	sel	swch	if specified ones are on
	stex	procsw-*
	rem
	ana	procsw-*	are all relevant switches on?
	cmpa	switch-*	these will compare equal if so
	tnz	trabak-*	if they aren't don't print
	rem
	lda	modsw-*	get module sw for ptrace
	ldq	ttype-*	and the type too
	ldx2	datap-*	get ptr to data
	tsy	a.a015-*,*	(ptrace) do actual printer tracing
	rem
trabak	null		return from trace
	rem		"tsy" word now points 2 words past call
	lda	count-*
	asa	trace-*	bump it over data and address of trace routine
	aos	trace-*
	aos	trace-*
	return	trace	goodbye
	ttls	traceb -- entry for buffer tracing
	rem
************************************************************************
*
*   traceb is used to print the contents of a buffer on the printer
*
*   calling sequence:
*
*	ldx3	bufadr-*	address of buffer
*	tsy	addr-*,*
*	vfd	6/modnum,12/size	size of buffer is in words
*addr	ind	traceb
*	---		return point
*
*   if the printer is configured, the call will be passed on to trabf
*   to do the work, otherwise traceb just returns.
*
************************************************************************
	rem
traceb	subr	trc,(inh,q,x1,x2,x3)
	rem
	ldx2	a.a014-*,*	(.criom) get ptr to iom table
	szn	lpch*2,2	printer configured?
	tze	trcbak-*	no, just return
	lda	traceb-*,*	get modnum/size word
	tsy	a.a013-*,*	(ptrabf)
	rem
trcbak	null
	aos	traceb-*	bump return pointer past arguments
	aos	traceb-*
	return	traceb
	ttls	trace symbols
	rem
a.a001	ind	.crtra	trace enable mask
a.a002	ind	.crtrb	base of trace table
a.a003	ind	.crtrc	pointer to oldest valid entry in trace table
a.a004	ind	simclk	next timer interrupt time
a.a005	ind	itmb	interval timer
a.a006	ind	.crtsw	global trace control switch
a.a007	ind	mvpgtg	move data paging target
a.a008	ind	trctmp	temporary storage for trace data
a.a009	ind	setptw	virtualize absolute address and set ptw
a.a010	ind	.crpte,*	page table entry for ptw
a.a013	ind	ptrabf	real buffer tracing subroutine
a.a014	ind	.criom
a.a015	ind	ptrace
	rem
l.a001	oct	024000	inhibit overflow & interrupt
l.a002	oct	525250	tag for physical end of trace table
l.a003	oct	525252	tag for logical end of trace table
l.a004	oct	007777	mask for switches
l.a007	arl	0	model for "arl" instruction
	rem
memlen	oct	0
	rem
	even
count	bss	1	count of data words passed
ttype	bss	1	trace type
modsw	bss	1	module number
switch	bss	1	printer tracing switch(es)
	rem
	even
ttime	oct	0,0	interval timer value saved as 36-bit number
tsvpte	oct	0	save-store for ptw on entry to trace
	rem
nxtrce	oct	0	pointer to next available entry in trace buffer
	rem		table (initialized to point to base)
endtrc	oct	0	end of table addr
	rem
wrap	oct	0	flag indicating that the trace buffer has
	rem		wrapped around
	rem
procsw	bss	1	word for reading processor switches
temp1	bss	1	a temporary
temp3	bss	1	another one
datap	bss	1	address of current data word
	rem
trctmp	bss	32	storage to copy data into before copying into
	rem		  trace data buffer
	end
