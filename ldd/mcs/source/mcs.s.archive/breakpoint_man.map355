* ***********************************************************
* *                                                         *
* * Copyright, (C) Honeywell Information Systems Inc., 1982 *
* *                                                         *
* * Copyright (c) 1972 by Massachusetts Institute of        *
* * Technology and Honeywell Information Systems, Inc.      *
* *                                                         *
* ***********************************************************

	ttl	module to handle breakpoints in control tables
	ttls
	lbl	,breakpoint_man
	editp	on
	pmc	on
	detail	off
	pcc	off
	rem
	rem
	tib
	comreg
	pmc	off
	ttls
bkpt	null
	symdef	bkpt
	start	bkpt
	rem
	symdef	brkptr	handles requests from diaman
	symdef	brkhit	handles breaks ops for interpreter
	symdef	brktab	address of break table pointer
	rem
	symref	istbrk
	symref	gettib
	symref	setptw
	rem
sm.cd	equ	4	location of cmd data in sub-mbx
	rem
brline	equ	sm.cd+0	line number
braddr	equ	sm.cd+1	addr of break
bractc	equ	sm.cd+2	action code
brflag	equ	sm.cd+3	flags
	rem
*	values for action codes
	rem
actset	equ	1	set break
actrst	equ	2	reset break
actstr	equ	3	restart line from breakpoint
	rem
	rem
*	format of break table
	rem
nbreak	equ	10	max number of breaks
	rem
btbadr	equ	0	addr of break
btblin	equ	1	line number
btborg	equ	2	origional op_block code
btbflg	equ	3	flags
btblen	equ	4	length of entry in table
	rem
*	btbflg values
	rem
trcoff	bool	400000	stop tracing when break is hit
	eject
*	define address and length of break table
*	ring-4 multics software finds the following 3 words thru
*	.crbrk and pretends to understand their meaning
	rem
brktab	ind	brtab
	vfd	18/nbreak
ercode	oct	0	error code from last bkpt request.
	rem		after performing a bkpt operation, ring-4
	rem		multics software will read this word
	rem		to check for errors.
	rem
*	values for ercode
	rem
*	1 = bad address
*	2 = bad line
*	3 = no entry in table
*	4 = line not at break
*	5 = no room in table
*	6 = no opblock at address
*	7 = invalid request
	rem
	rem
************************************************************************
*
*	modified 79 july 27 by art beattie to call setptw after
*	  call to gettib.
*
************************************************************************
	eject
*	subroutine to handle request from dia_man.
*	entered with sub-mbx addr in x3
	rem
brkptr	subr	brq,(x1,x2,x3)
	rem
*	check address supplied in args
	rem
	ila	1	error code, in case bad
	ldq	braddr,3	pick up value
	tmi	brqerr-*
	cmpq	a.a004-*,*	=.crmem
	tpl	brqerr-*	toobig
	rem
*	check that line number, if given, is ok
	rem
	stz	tibadr-*	0 will mean no line
	lda	brline,3	get line from mbx
	tmi	brqgo-*	none
	tsy	a.a005-*,*	=gettib, get real tib address
	tsy	a.a007-*,*	(setptw) virtualize tib address
	sta	tibadr-*
	szn	tibadr-*	was an addr returned?
	tnz	brqgo-*	yes
	ila	2	bad line number
	tra	brqerr-*
	rem
*	check action code to see what kind of request this is
	rem
brqgo	stz	ercode-*
	lda	bractc,3	get code
	icmpa	actset
	tze	set-*	to set a break
	icmpa	actrst
	tze	reset-*	to reset a break
	icmpa	actstr
	tze	start-*	to restart after a break
brqinv	ila	7	error, invalid request
	rem
brqerr	sta	ercode-*	come here to store error
brqret	return	brkptr
	eject
*	set a breakpoint
	rem
set	lda	braddr,3*	get current opblock
	ana	l.a001-*	=777000
	cmpa	l.a001-*	does it look like valid opblock?
	tze	set1-*	yes
	ila	6	error code, no opblock
	tra	brqerr-*
set1	ldx1	a.a001-*	=brtab, address of break table
	lda	braddr,3	pickup break addr
set5	cmpa	btbadr,1	entry for this address?
	tze	set4-*	yes, just update it
	iacx1	btblen
	cmpx1	a.a002-*	=brttbe, end of table?
	tnz	set5-*	no
	rem
	ldx1	a.a001-*	scan table again for free entry
set3	szn	btbadr,1	look for free empty
	tze	set2-*	found one
	iacx1	btblen	next entry
	cmpx1	a.a002-*	end of table?
	tnz	set3-*	no
	ila	5	error, no room
	tra	brqerr-*	no room for entry, give up
	rem
set2	ldx2	braddr,3	address to set break
	stx2	btbadr,1	save in break table
	lda	0,2	get orig opblock
	sta	btborg,1	save in table
	lda	bkop-*	get a breakpoint opblock
	sta	0,2	break is set
set4	lda	brline,3	line number
	sta	btblin,1
	lda	brflag,3	copy flags
	sta	btbflg,1
	tra	brqret-*	done
	eject
	rem
*	reset a break
	rem
reset	ldx2	braddr,3	address of break toreset
	tze	reset3-*	bad
	ldx1	a.a001-*	=brtab, start of table
reset2	cmpx2	btbadr,1	find entry for this break
	tze	reset1-*	got it
	iacx1	btblen
	cmpx1	a.a002-*	=brttbe, end of table
	tnz	reset2-*
reset3	ila	3	error, no entry
	tra	brqerr-*	cant find entry, give up
reset1	lda	btborg,1	get origional opblock
	sta	0,2	replace it
	stz	btbadr,1	free table entry
	tra	brqret-*	done
	eject
*	restart a line at a breakpoint
	rem
start	szn	tibadr-*	line specified?
	tze	brqinv-*	no, done
	ldx1	tibadr-*	addr of tib
	lda	t.flg3,1	third word of flags
	cana	l.a002-*	=tfbkpt see if at break
	tnz	start5-*	is is
	ila	4	error, not at break
	tra	brqerr-*
start5	ldx2	braddr,3	get starting address specified
	tze	start7-*	none given, use t.cur
	lda	0,2	be sure opblock at start address
	ana	l.a001-*	=777000
	cmpa	l.a001-*
	tze	start6-*	good opblock
	ila	6	error, no opblock
	tra	brqerr-*
start6	stx2	t.cur,1	starting address becomes t.cur
	ila	0	no new opblock for intp
	tra	start2-*
start7	ldx2	t.cur,1	addr of current opblock
	lda	0,2	pick it up
	cmpa	bkop-*	is it a break?
	tze	start1-*	yes, intpreter will want something else
	ila	0	not a break, interpeter can use real op
	tra	start2-*
start1	ldx1	a.a001-*	=brtab, must scan to find real op
start4	cmpx2	btbadr,1	found entry?
	tze	start3-*	yes
	iacx1	btblen
	cmpx1	a.a002-*	end of tab?
	tnz	start4-*
	lda	nullop-*	give intpreter a nullop to exec
	tra	start2-*
start3	lda	btborg,1	give interpreter the origional op
start2	sta	saveop-*	saveop for intp
	lda	brflag,3	get flags
	cana	l.a004-*	asked to start tracing?
	tze	2	no
	stz	a.a006-*,*	=.crtsw
	ldx1	tibadr-*	interpreter needs tib addr
	lda	saveop-*	op for intp
	tsy	a.a003-*,*	=istbrk, restart after break
	tra	brqret-*	done
saveop	bss	1
	eject
*	subroutine called by the intpreterer when a break point op
*	is found. entered with tib in x1, current op pointer in x2.
*	an in line return indicates that the break should not be
*	taken; the a will contain the opblock to execute instead.
*	a skip return will mean take the break.
	rem
brkhit	subr	hit,(x3)
	rem
	ldx3	a.a001-*	=brtab, start of break table
hit2	cmpx2	btbadr,3	entry for current opblock?
	tze	hit1-*	yes, found it
	iacx3	btblen
	cmpx3	a.a002-*	end of table
	tnz	hit2-*
	tra	hit3-*	no entry in table, so must take break
hit1	szn	btblin,3	is break for special line?
	tmi	hit4-*	no, take break
	lda	t.line,1	check to see if this is the line
	cmpa	btblin,3
	tze	hit4-*	it is, take break
	lda	btborg,3	no break, return origional opblock
	tra	hitret-*
hit4	lda	btbflg,3	get flag word
	cana	l.a003-*	=trcoff, should we stop tracing?
	tze	hit3-*	no
	ila	1
	sta	a.a006-*,*	=.crtsw
hit3	aos	brkhit-*	skip means take break
hitret	return	brkhit
	eject
	rem
	rem
a.a001	ind	brtab	address of break table
a.a002	ind	brtabe	address of end of table
a.a003	ind	istbrk	control table rtn to restart break
a.a004	ind	.crmem
a.a005	ind	gettib
a.a006	ind	.crtsw
a.a007	ind	setptw
	rem
l.a001	vfd	o18/777000
l.a002	vfd	o18/tfbkpt
l.a003	vfd	o18/trcoff
l.a004	vfd	o18/400000
	rem
tibadr	bss	1
	rem
bkop	bkptop		a breakpoint opblock
nullop	nullop		a no-operation opblock
	rem
brtab	null		the break table
	bss	btblen*nbreak
brtabe	null
	rem
	end
