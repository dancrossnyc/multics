* ***********************************************************
* *                                                         *
* * Copyright, (C) Honeywell Information Systems Inc., 1982 *
* *                                                         *
* * Copyright (c) 1972 by Massachusetts Institute of        *
* * Technology and Honeywell Information Systems, Inc.      *
* *                                                         *
* ***********************************************************

	ttl	multics/mcs printer trace package
	ttls	multics/mcs printer trace package
	lbl	,printer_trace
	pcc	off
	pmc	off
	editp	on
	detail	on
	rem
***********************************************************
*
*	printer_trace
*
*	     this routine does actual printer tracing
*	if the trace routine decides that we should be
*	called at all. if we are called we must
*	assume that a printer is configured and the
*	correct processor switches are set, and we
*	will forge ahead and print the stuff.
*
*	there are two entries, ptrace and ptrabf.
*	the first is for standard trace data msgs
*	and the second to dump buffers to the printer.
*
*	this routine uses a queueing technique to handle
*	the printer. standard trace messages must fit
*	in one buffer (60 chars), and we will not allocate
*	any buffers for printer trace if there are fewer
*	than 64 left in the free pool.
*
***********************************************************
	rem
	symdef	ptrace
	symdef	ptrabf
	symdef	pterm
	symdef	pspec
	rem
	symref	octasc
	symref	getbuf
	symref	frebuf
	symref	meterc
	rem
	pmc	save,on
	systm
	comreg
	buffer
	ttls	macros, constants and stuff
	rem
ptrc	null
	start	ptrc,10
	pmc	restore
	rem
mesg	macro
	pmc	save,off
	pcc	save,off
temp	set	#1+1
temp	set	temp/2
	dec	#1
	ascii	temp,#2
	pcc	restore
	pmc	restore
	endm
	rem
mpy	macro
	mpf	#1
	lrl	1
	endm	mpy
	rem
	rem
thresh	equ	64	we won't allocate a buffer if there aren't
	rem		at least this many left
	rem
bufsw	bool	000001
blank	bool	040
star	bool	052	* character
tslew	bool	02	bit to tell printer to slew to top of form
ntslew	equ	-3	complement of tslew
	ttls	ptrace - entry to do normal printer tracing
ptrace	subr	ptr,(x1,x3)
	rem
***********************************************************
*
*	ptrace
*
*	     this routine prepares and prints normal
*	printer tracing messages.
*
*	at entry:
*	     x2 - points to trace data words
*	     a  - contains module number and switches
*	     q  - contains trace type indicator
*
***********************************************************
	rem
	stx2	datap-*	save ptr for awhile
	sta	modsw-*	save module number/switch word
	stq	ttype-*	and trace type word, too
	rem
	ldx1	modsw-*	get module number of caller
	ldx1	a.a006-*,*	(modtab,1) get address of module's message table
	rem		(-1 to index by module)
	adcx1	ttype-*	index by type
	ldx1	-1,1	x1 now points to message for specified module
	rem		and specified trace type
	rem		find out how many buffers are left
	lda	a.a012-*,*	.crnbf
	icmpa	thresh	are there enough?
	tmi	tra160-*	if not, send "lost" message
	ilq	bufsiz	else we will get a buffer to send to printer
	tsy	a.a007-*,*	getbuf
	tra	tra160-*	if we couldn't get one, send "lost" message
	stx3	bufadr-*	save address of buffer
	cx3a
	ada	l.a005-*	bf.dta,b.0
	cax2		data target address into x2 (with char addr)
	rem
	lda	0,1	get message length in chars
	sta	bf.tly,3	it will be buffer tally
	iera	-1	negate it
	rem		this is actually -(tally+1) in case we need blank
	sta	msglen-*	save the complement
	rem
	cx1a		set x1 to point to beginning of message
	ada	l.a006-*	1,b.0
	cax1		with character addressing
	rem
	rem		start copying characters into data buffer
tra100	null
	lda	0,1,b.0	get message character
	icmpa	star	is it a *?
	tnz	tra150-*	no, just copy char into buffer
	rem		else must substitute program data
	ldx3	a.a008-*	addr(conv),b.0
	ldq	datap-*,*	get data word to convert to ascii
	tsy	a.a009-*,*	octasc
	ilq	0	initialize count of digits
	ldx3	a.a008-*	get starting address again
tra110	null
	iaq	1	increment digit count
	iacx1	0,b.1	point to next char
	aos	msglen-*	if any
	tze	tra120-*
	lda	0,1,b.0	get character
	icmpa	star	another star?
	tze	tra110-*	yes, up digit count and check again
	rem
tra120	null		store digits in buffer
	cqa		first figure out where to start
	iaa	-6
	tze	tra140-*	want all six
tra130	null
	iacx3	0,b.1	skip leading zero
	iaa	1	any more to skip?
	tmi	tra130-*	yes, check again
	rem
tra140	null
	lda	0,3,b.0	get x3 -> digit
	sta	0,2,b.0	put it in message buffer
	iacx3	0,b.1	bump from and
	iacx2	0,b.1	to pointers
	iaq	-1	any more digits?
	tnz	tra140-*	yes, get next one
	szn	msglen-*	end of message
	tze	tra170-*	yes, go queue it
	lda	0,1,b.0	no, get character after stars
	aos	datap-*	pick up next data word next time
	rem
tra150	null		literal character from message
	sta	0,2,b.0	into buffer
	aos	msglen-*	any more?
	tze	tra170-*	no, go send it
	iacx1	0,b.1	yes, bump from and
	iacx2	0,b.1	to pointers
	tra	tra100-*	go around again
	rem
tra160	null		if no buffer could be allocated,
	rem		queue the dummy buffer that says "lost"
	ldx3	a.a010-*	addr(lost)
	szn	0,3	is it already queued?
	tnz	trabak-*	yes, forget it
	tra	tra180-*
	rem
tra170	null
	ldx3	bufadr-*
tra180	null		x3 points to buffer to be queued for printing
	tsy	a.a011-*,*	pquer
	rem
trabak	return	ptrace
	rem
	rem
a.a006	ind	modtab-1,1	to address table of message table addresses
a.a007	ind	getbuf	buffer allocating suroutine
a.a008	zero	conv,b.0
a.a009	ind	octasc
a.a010	ind	lost
a.a011	ind	pquer
a.a012	ind	.crnbf	number of buffers available
	rem
l.a005	zero	bf.dta,b.0
l.a006	zero	1,b.0
	rem
	even
lost	dec	0	dummy buffer for "lost" message
	dec	4
	aci	2,lost
	rem
bufadr	bss	1	address of allocated buffer
datap	bss	1	address of current data word
msglen	bss	1	-(remaining no. of chars in message)
conv	bss	3	space for putting data word converted to ascii
modsw	bss	1	module number and switch word
ttype	bss	1	trace type
	ttls	ptrabf -- subroutine to do actual printer tracing
	rem
************************************************************************
*
*   ptrabf is called by traceb if the printer is configured
*
*   the word containing the module number and buffer size is passed in the a
*
*   the low-order processor switch and the switch corresponding to the
*   module number must be on for tracing to occur
*
*   eight words per line will be sent to the printer
*
************************************************************************
	rem
ptrabf	subr	trb
	rem
	lrl	12	isolate modnum
	iaa	-1	subtract one
	ora	l.b002-*	get shift template
	sta	trbshf-*	for shift instruction
	ila	1	get high-order bit alone in a
	als	17	for shifting
trbshf	arl	**	(modified above)
	rem
	cana	a.b001-*,*	.crtra
	tze	trbbak-*	bit not on in enable mask
	rem
	sel	swch	get processor switches
	stex	bprcsw-*
	rem
	iora	bufsw	bufsw + module switch
	sta	temp2-*	must both be on
	ana	bprcsw-*
	cmpa	temp2-*
	tnz	trbbak-*	else we'll skip it
	ila	0
	rem		size is in q(0-11)
	rem		if we shift 9 high-order bits into a
	lls	9	we will have size/8
	iera	-1	negate it
	iaa	1
	sta	remain-*	this will be main loop counter
	stx3	datptr-*	hang on to origin of buffer
	rem		put out heading message
	ilq	bufsiz	get a buffer
	tsy	a.b002-*,*	getbuf
	tra	trb040-*	no buffer, just say "lost"
	ila	16	set tally for introductory message
	sta	bf.tly,3
	stx3	outptr-*
	ldq	datptr-*	get address of buffer being dumped
	ldx3	a.b005-*	adrasc,b.0
	tsy	a.b003-*,*	(octasc) convert it for output
	ila	-4
	sta	temp2-*
	ldx1	outptr-*
	iacx1	bf.dta	point x1 at word 2 of output buffer
	ldx2	a.b006-*	addr(bufmsg)
	rem
trb010	null
	ldaq	0,2	put heading message into buffer
	staq	0,1
	iacx2	2
	iacx1	2
	aos	temp2-*
	tmi	trb010-*
	rem		now send it to the printer
	ldx3	outptr-*
	tsy	a.b004-*,*	pquer
	rem
	rem		for every 8 words, we will build
	rem		a buffer full of octal ascii digits
	rem
	ldx2	datptr-*
trb020	null
	ilq	bufsiz	get a buffer
	tsy	a.b002-*,*	getbuf
	tra	trb040-*	"lost" if no buffer
	stx3	outptr-*	save buffer pointer for queuing routine
	ila	55	these buffers have 55 characters always
	sta	bf.tly,3
	cx3a
	ada	l.b001-*	bf.dta,b.0
	cax3		x3 points to data portion of output buffer
	rem		now put eight words wotrth of ascii
	rem		into that buffer
	ila	-8
	sta	temp2-*
	rem
trb030	null
	ldq	0,2	get data words
	tsy	a.b003-*,*	(octasc) convert into output buffer
	ila	blank	followed by a blank
	sta	0,3,b.0
	iacx3	0,b.1	put in a blank
	iacx2	1	get next data word
	aos	temp2-*	done eight words yet?
	tmi	trb030-*	no, do the next one
	rem		yes, queue the line for printing
	ldx3	outptr-*
	tsy	a.b004-*,*	pquer
	rem		bump to next line
	aos	remain-*	are there any more?
	tmi	trb020-*	yes, go process next line
	rem
	rem
trbbak	null		all done
	return	ptrabf
	rem
	rem
	rem
trb040	null		if we couldn't get a buffer,
	rem		we'll queue the "lost" message
	ldx3	a.b007-*	addr(lost)
	szn	0,3	if it's not queued already
	tnz	trbbak-*
	tsy	a.b004-*,*	pquer
	tra	trbbak-*	now return
	rem
	rem
	rem
	rem
a.b001	ind	.crtra	trace enable mask
a.b002	ind	getbuf
a.b003	ind	octasc	octal-ascii conversion routine
a.b004	ind	pquer
a.b005	zero	adrasc,b.0
a.b006	zero	bufmsg
a.b007	ind	lost
	rem
	rem
l.b001	zero	bf.dta,b.0
l.b002	arl	0
	rem
	rem
bprcsw	bss	1	for processor switches
temp2	bss	1	a temporary
remain	bss	1	number of lines remaining to print
datptr	bss	1	pointer to input buffer
outptr	bss	1	pointer to output buffer
	rem
	even
bufmsg	ascii	5,buffer at
adrasc	bss	3	address will be converted here
	rem
	ttls	pquer -- queue a line for printing
	rem
************************************************************************
*
*   pquer is called from ptrace or ptrabf to queue a line for the printer
*
*   the address of the buffer containing the line is passed in x3
*   if nothing is already queued, pwrite will be called to initiate the i/o;
*   otherwise, the buffer will be added to the chain of queued i/o
*
************************************************************************
	rem
pquer	subr	pqu,(inh,x1)
	rem
	ldx1	plast-*	prepare to add buffer to queue
	tnz	pqu010-*
	rem		if no old chain,
	stx3	pfirst-*	make this first and last
	stx3	plast-*
	tsy	pwrite-*	and start i/o
	tra	pqubak-*	and return
	rem
pqu010	null		a chain is there,
	stx3	plast-*	make this the last buffer
	stx3	0,1	and chain it to previous one
	rem
pqubak	null
	return	pquer
	ttls	pwrite -- start i/o on the printer
	rem
************************************************************************
*
*   pfirst points to the buffer to be printed, whose second word contains
*   a character tally and whose data starts in the third word
*
*   we will keep a line count per page so as to slew to top of
*   form every 66 lines.
*
************************************************************************
	rem
pwrite	subr	pwr,(i,x3,a,q)
	rem
*
*	load print buffer for prt300 here, once only
*
	rem
	ldx3	pfirst-*	get pointer to head of i/o chain
	tze	pwrbak-*	oops, there isn't any
	cx3a		get data address
	ada	l.c001-*	bf.dta,c.0
	sta	a.c001-*,*	lpicw (printer data icw mailbox)
	rem		we have to send the printer a tally of
	rem		6-bit bytes (god knows why)
	lda	bf.tly,3	get tally
	iaa	1	make sure shift doesn't truncate
	ars	1	divide by 2
	mpy	l.c005-*	=3
	stq	a.c006-*,*	lpicw+1
	rem
	stz	pstat-*	zero out printer status
	stz	pstat+1-*
	ldaq	l.c002-*	printer status icw
	staq	a.c002-*,*	lpst (printer status icw mailbox)
	rem
	lda	linect-*	get line count for this page
	iaa	1	bump it
	cmpa	maxlin-*	will this be last line on page?
	tmi	pwr010-*	no, branch
	rem		yes, twiddle pcw to do slew to
	rem		top-of-form
	ila	tslew
	orsa	prtpcw+1-*
	stz	linect-*	zero line count
	tra	2
pwr010	null
	sta	linect-*	update line count
	rem
	inh		inhibit indicators for sel and cioc
	sel	lpch	select the line printer channel
	cioc	prtpcw-*	connect
	rem
pwrbak	return	pwrite
	rem
	ttls	pterm -- printer terminate interrupt processor
	rem
************************************************************************
*
*   assuming good status, buffer at head of printer i/o queue (pfirst)
*   will be freed, unless it was dummy buffer containing "lost" message
*
*   if we find we just did slew to top of form (linect = 0),
*   we must fix pcw to resume slewing one line at a time
*
************************************************************************
	rem
pterm	subr	pte,(inh,a,q,x3)
	rem
	ldaq	pstat-*	get status
	tze	ptebak-*	no status, don't bother
	rem
	cana	l.c003-*	=o200000, power off
	tnz	ptebak-*	is useless
	cana	l.c004-*	170000, major status mask
	tze	pte100-*	it's cool we'll proceed
	rem
************************************************************************
*	code to deal with imperfect status goes here
*	just meter it for now
************************************************************************
	rem
	ilq	6
	tsy	a.c007-*,*	meterc
	rem
pte100	null
	ldx3	pfirst-*	get address of block just printed
	lda	0,3	pointer to next block
	sta	pfirst-*	is now first
	tnz	2	if there is none,
	stz	plast-*	no last pointer either
	rem
	cmpx3	a.c003-*	addr(lost)
	tze	pte110-*	if line printed was "lost" message, don't free it
	ilq	bufsiz	else free the buffer
	tsy	a.c004-*,*	frebuf
	tra	2
pte110	null		if "lost", just unchain the buffer
	stz	0,3
	rem
	szn	linect-*	just started a new page?
	tnz	pte120-*
	ila	ntslew	yes, change pcw back to slew one line
	ansa	prtpcw+1-*
	rem
pte120	null
	szn	pfirst-*	another line to print?
	tze	ptebak-*	no, go away
	tsy	pwrite-*	yes, start it off
	rem
ptebak	return	pterm
	ttls	pspec -- for printer special interrupts
	rem
	rem		just start any outstanding printer i/o
	rem
pspec	subr	psp,(inh)
	rem
	szn	pfirst-*	is there any i/o?
	tze	2	no, forget it
	tsy	pwrite-*	yes, start it up
	rem
	return	pspec
	ttls	data for printer code
	rem
a.c001	ind	lpicw	printer data icw mailbox
a.c002	ind	lpst	printer status icw mailbox
a.c003	ind	lost	dummy buffer for lost output
a.c004	ind	frebuf
a.c006	ind	lpicw+1	for storing tally
a.c007	ind	meterc
	rem
l.c001	zero	bf.dta,c.0
	even
l.c002	icw	pstat,w.2,1
l.c003	oct	200000
l.c004	oct	170000
l.c005	dec	3
	rem
	rem
linect	zero	0	number of lines on current page
maxlin	dec	60	maximum lines/page
called	oct	0	1 = pwrite has been called, 0 =
	rem		never been called
	rem
	even
prtpcw	oct	0,111	non-edited, slew one line (changed on occasion
	rem		to slew to top-of-form)
pstat	oct	0,0	printer status
	rem
pfirst	zero	0	head of printer i/o queue
plast	zero	0	tail of printer i/o queue
	ttls	printer tracing tables and messages
modtab	null
	ind	skdtrc
	ind	diatrc
	ind	inttrc
	ind	utltrc
	ind	lsltrc
	ind	hsltrc
	rem
	rem
skdtrc	null		scheduler tracing messages
	ind	msg1.1
	ind	msg1.2
	ind	msg1.3
	ind	msg1.4
	ind	msg1.5
	ind	msg1.6
	ind	msg1.7
	ind	msg1.8
	rem
msg1.1	mesg	31,(interrupt at *****, 3wjt ******)
msg1.2	mesg	35,(idle, indicators ******, ier ******)
msg1.3	mesg	28,(run interrupt routine ******)
msg1.4	mesg	37,(restart interrupted routine at ******)
msg1.5	mesg	25,(run queued routine ******)
msg1.6	mesg	31,(set timer ****** for tib ******)
msg1.7	mesg	49,(interval timer runout, current time ****** ******)
msg1.8	mesg	48,(queue routine, pri ******, rtn ******, x1 ******)
	rem
diatrc	null		dia tracing messages
	ind	msg2.1
	ind	msg2.2
	ind	msg2.3
	ind	msg2.4
	ind	msg2.5
	ind	msg2.6
	ind	msg2.7
	ind	msg2.8
	ind	msg2.9
	ind	ms2.10
	ind	ms2.11
	ind	ms2.12
	ind	ms2.13	dial out
	rem
msg2.1	mesg	26,(dia terminate, tcword = **)
msg2.2	mesg	28,(dia interrupt for mailbox **)
msg2.3	mesg	22,(dia reading mailbox **)
msg2.4	mesg	49,(new entry in dia i/o queue: opcode ***, line ****)
msg2.5	mesg	40,(wcd in mailbox **: opcode ***, line ****)
msg2.6	mesg	48,(using dia i/o queue entry: opcode ***, line ****)
msg2.7	mesg	47,(dia sending input count of ****** for line ****)
msg2.8	mesg	22,(dia writing mailbox **)
msg2.9	mesg	22,(dia freeing mailbox **)
ms2.10	mesg	44,(wtx in mailbox ** for line ****, *** buffers)
ms2.11	mesg	31,(rtx in mailbox ** for line ****)
ms2.12	mesg	24,(alter parameters: ******)
ms2.13	mesg	46,(dial: *** digits - ****** ****** ****** ******)
	rem
inttrc	null		interpreter tracing messages
	rem
	ind	msg3.1
	ind	msg3.2
	ind	msg3.3
	ind	msg3.4
	ind	msg3.5
	rem
msg3.1	mesg	36,(itest: tib at ******, t.cur = ******)
msg3.2	mesg	37,(iwrite: tib at ******, t.cur = ******)
msg3.3	mesg	51,(istat: tib at ******, t.cur = ******, status ******)
msg3.4	mesg	36,(itime: tib at ******, t.cur = ******)
msg3.5	mesg	30,(op block at ******, type = ***)
	rem
	rem
utltrc	null		utilities tracing messages
	ind	msg4.1
	ind	msg4.2
	ind	msg4.3
	ind	msg4.4
	rem
msg4.1	mesg	38,(buffer allocated at ******, size = ***)
msg4.2	mesg	34,(buffer freed at ******, size = ***)
msg4.3	mesg	34,(request for ** buffers of size ***)
msg4.4	mesg	29,(freeing buffer list at ******)
	rem
lsltrc	null		lsla tracing messages
	rem
	ind	msg5.1
	ind	msg5.2
	ind	msg5.3
	ind	msg5.4
	ind	msg5.5
	ind	msg5.6
	ind	msg5.7
	rem
msg5.1	mesg	29,(lsla interrupt, 3wjt = ******)
msg5.2	mesg	43,(lsla output frame at ******, sfcm at ******)
msg5.3	mesg	28,(lsla output buffer at ******)
msg5.4	mesg	42,(lsla input frame at ******, sfcm at ******)
msg5.5	mesg	27,(lsla input buffer at ******)
msg5.6	mesg	41,(sending *** to lsla slot ** for line ****)
msg5.7	mesg	36,(escape in lsla slot ** for line ****)
	rem
	rem
hsltrc	null		hsla tracing messages
	ind	msg6.1
	ind	msg6.2
	ind	msg6.3
	ind	msg6.4
	ind	msg6.5
	rem
msg6.1	mesg	51,(hsla dcw processor, tib ******, list ******, len **)
msg6.2	mesg	39,(hsla pcw, tib ******, pcw ****** ******)
msg6.3	mesg	29,(hsla interrupt, 3wjt = ******)
msg6.4	mesg	45,(hsla status, tib ******, status ****** ******)
msg6.5	mesg	51,(hsla, tib ******, attempting icw indicator recovery)
	rem
	end
