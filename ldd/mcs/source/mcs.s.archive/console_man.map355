* ***********************************************************
* *                                                         *
* * Copyright, (C) Honeywell Information Systems Inc., 1982 *
* *                                                         *
* * Copyright (c) 1972 by Massachusetts Institute of        *
* * Technology and Honeywell Information Systems, Inc.      *
* *                                                         *
* ***********************************************************

	lbl	,console_man
	ttl	console manager for 355 with multics
	rem
	rem
	pmc	off
	pcc	on
	detail	on
	editp	on
	rem
	rem
	symdef	cons
	rem
	symdef	wcon	write console routine
	rem		called from outside in emergency
	symdef	contip	terminate interrupt processor for above
	rem
	symdef	consol	console interrupt processing routine
	symdef	consjt	so init can find jump tables
	rem
	symref	mdisp	dispatcher return
	symref	secdsp	event dispatcher return
	symref	dspqur	dispatcher queuer entry
	symref	conabt	console operator abort routine
	symref	invp	main interrupt processing routine
	symref	g3wjt	get 3rd word of jump table routine
	symref	octasc	octal to ascii conversion subroutine
	rem
	rem
	rem
	rem
	rem
	pmc	save,on
cons	null
	start	cons,7
	ttls	console read and write routines
************************************************************************
*
* these routines are used to write messages
* on the datanet-355 console and/or to receive messages from the
* system operator.
*
* the routines have no queueing capability, so a "busy flag" is used to
* prevent more than one access to the console at a time.  if the console
* is busy at the time the user calls "write" or "wrcon," a return is made
* immediately to a special "busy return" point in the user's calling
* sequence.  at this time the user would (perhaps) queue up a time
* delayed routine to retry at a later time.  if the console is not busy
* when the user calls, his request will be initiated and control
* returned to his "accepted return" point.
*
************************************************************************
*
* calling sequence for "write" --
*	pre-set registers -- the a, q, and x1 registers must be set up as
*		required by the dispatcher queuer.  this specifies the        
*		routine which will be queued when the write operation        
*		terminates.        
*
*	tsy     write-*
*	zero    <address of data icw>
*	---     <accepted return point>
*	---     <busy return point>
*
************************************************************************
*
* calling sequence for "wrcon" --
*
*	pre-set registers -- the a, q, and x1 registers must
*		be set up as required by the dispatcher queuer.        
*		this specifies the routine which will be queued        
*		when the read operation has terminated.        
*
*	tsy     wrcon-*
*	zero    <address of output data icw>
*	zero    <address of input-area data icw>
*	---     <accepted return point>
*	---     <busy return point>
*
************************************************************************
	eject
************************************************************************
*
* console "terminate interrupt" processing routine
*
* the "terminate interrupt" is caused, naturally enough, when data
* transfer between the console teletypewriter and the 355 terminates.
*
* several "abnormal" events can also cause this interrupt, and these
* are indicated in the code.
*
* the routine responds to this interrupt by indicating to the approprate
* user routine that his requested data transfer has been completed.
*
************************************************************************
*
* console "special interrupt" processing routine
*
* the "special interrupt" is caused by pressing the "break" key on the
* console tty.  the routine "spcon" is called in response to this
* interrupt.  this is the method to be used by the operator to request
* the performance of the several special operations provided.
*
* the routine responds to the special interrupt by printing "???" to
* which the operator is expected to type in one of the commands
* listed below --
*
*	command variable(s)     function
*
*	abort                   abort 355.  cause an immediate dump.
*	alter   aaaaa,bbbbbb    store bbbbbb in location aaaaa, absolute.
*	peek    aaaaa           write contents of loc aaaaa, absolute
*	peek    aaaaa,n         write n words starting at aaaaa.
*	test                    call the on-line t&d system.
*
* n.b. -- future developers
*	command words must be at least four (4) characters in length.  to
*	increase the number of variable fields, see the comments in the
*	"idx" subroutine.
************************************************************************
	rem
	rem
	systm
	comreg
	rem
	pmc	restore
cr	bool	15
lf	bool	12
xoff	bool	23
	ttls	write -- write console routine
************************************************************************
*
*	write    write console routine
*
************************************************************************
	rem
write	subr	wri,(x1,inh)
	rem
	szn	nocon-*	see if console is not configured or down
	tnz	w05-*	yes
	szn	conbsy-*	? console busy ?
	tze	w10-*	no
w05	null
	aos	write-*	yes, go to user's "busy return"
	tra	wribak-*
	rem
	rem
	rem
w10	null
	aos	conbsy-*	set busy flag
	aos	cwrite-*	set write operation control flag
	aos	cwconf-*	set wcon routine in control flag
	ldi	wrisi-*	>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	rem
	staq	cqueaq-*	save parameters of routine to be queued
	stx1	cquex1-*	when write operation terminates
	ldaq	csicw-*	set up status icw mailbox
	staq	csicwa-*,*
	ldx1	write-*,*	set up data icw mailbox
	ldaq	0,1
	staq	cdicwa-*,*
	staq	cwwicw-*	save output data icw
	rem
	sel	tych	issue write command
	cioc	cwpcw-*
	rem
wribak	null
	aos	write-*
	return	write
	ttls	wrcon -- write-then-read console routine
************************************************************************
*
*	wrcon   write-then-read console routine
*
************************************************************************
	rem
wrcon	subr	wrc,(inh,x1)
	rem
	szn	nocon-*	see if console is not configured or down
	tnz	w105-*	yes
	szn	conbsy-*	? console busy ?
	tze	w110-*	no
w105	null
	aos	wrcon-*	yes, go to user's "busy return"
	aos	wrcon-*
	tra	wrcbak-*
	rem
	rem
	rem
w110	null
	aos	conbsy-*	set busy flag
	aos	cwrite-*	set write operation control flag
	stz	cwconf-*	clear wcon routine in control flag
	ldi	wrcsi-*	>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	rem
	staq	cqueaq-*	save parameters of routine to be queued
	stx1	cquex1-*	when read operation terminates
	ldaq	csicw-*	set up status icw mailbox
	staq	csicwa-*,*
	ldx1	wrcon-*,*	set up data icw mailbox
	ldaq	0,1
	staq	cdicwa-*,*
	staq	cwwicw-*	save output data dcw
	aos	wrcon-*	save input-area data icw
	ldx1	wrcon-*,*
	ldaq	0,1
	staq	cwricw-*
	rem
	sel	tych	issue write command
	cioc	cwpcw-*
	rem
wrcbak	null
	aos	wrcon-*	go to user's "accepted return" point
	tra	wrcon-*,*
	rem
	rem	*********************************************************
	rem	* continue after write operation terminates and initiate
	rem	* the read operation
	rem	*********************************************************
	rem
wrcont	null
	stz	cwrite-*	clear write operation control flag
	ldaq	csicw-*	set up status icw mailbox
	staq	csicwa-*,*
	ldaq	cwricw-*	set up input-area data icw mailbox
	staq	cdicwa-*,*
	rem
	cioc	crpcw-*
	rem
	tra	1,*	return to dispatcher
cdisp	ind	secdsp
	ttls	wcon -- emergency write routine
	rem
	rem
**********************************************************************
*   wcon is the routine called from outside console_man to write error
*   messages and crash warnings on the console.
*
*   it does not return to its caller until the write is complete.
*   it expects that only level 0, 1, and 2 interrupts are enabled,
*   and that other interrupts will go to an "ignore" subroutine.
*
*   in general, contip will be the terminate interrupt processor
*   associated with this routine, rather than consol as for write
*   and wrcon.
*
*   calling sequence:
*
*	tsy     wcon-*
*	zero    <address of data icw>
*	---     <error return>
*	---     <normal return>
*
**********************************************************************
	rem
	rem
cntrlx	bool	30
sbits	bool	50
	rem
	rem
	rem
wcon	subr	wco,(x1,inh)
	rem
	szn	nocon-*	is there a console?
	tnz	wcobak-*	take error return if not
	rem
	szn	conflg-*,*	(=.crcon) console io enabled now?
	tnz	wcook-*	no, ignore call
	rem
	aos	conbsy-*	mark console busy
	ldx1	wcon-*,*	get icw address
	ldaq	0,1	get icw
	staq	cdicwa-*,*	put it in mailbox
	ldaq	csicw-*	get status icw
	staq	csicwa-*,*
	rem
	sel	tych
	cioc	cwpcw-*	(write pcw)
	rem
wco010	null
	eni		>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	dis		wait for interrupt
	tra	-1
	rem
	ttls	contip -- terminate interrupt ptocessor for wcon
	rem
contip	ind	**
	sti	conind-*	hang on to indicators
	inh		<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	szn	conbsy-*	if console isn't busy,
	tnz	wco020-*
	ldi	conind-*	restore indicators and
	tra	contip-*,*	ignore interrupt
	rem
wco020	null
	lda	cstat-*	get status; is it "ready"?
	tpl	wcobak-*	no, take error return
	rem
	arl	9	ptro or control char?
	icana	sbits
	tze	wcobak-*	neither, take error return
	rem
	ldx1	cdicwa-*,*	pick up last character transmitted
	lda	-1,1,b.1
	icmpa	cntrlx	"control-x"?
	tze	wcobak-*	yes, error return
	rem
wcook	aos	wcon-*	else bump for good return
	rem
wcobak	null
	aos	wcon-*	bump return address once
	stz	conbsy-*	not busy any more
	rem
	return	wcon
	rem
	rem
conind	bss	1	for storing indicators
	ttls	data for wcon, wrcon, write
	rem
	even
csicw	icw	cstat,b.0,1	status icw image
cwpcw	oct	0,44	pcw -- write
crpcw	oct	0,50	pcw -- read
cwwicw	bss	2	wrcon's current output data icw
cwricw	bss	2	wrcon's current input data icw
cqueaq	bss	2	queue data for wrcon
	rem
cstat	bss	1	status store area
cquex1	bss	1	queue data for wrcon
conbsy	bss	1	console busy flag (<>0=busy)
nocon	bss	1	no console (<>0) flag
cwrite	bss	1	write operation control flag
cwconf	bss	1	wcon routine in control (<>0) flag
	rem
csicwa	ind	tyst	address of console status icw mailbox
cdicwa	ind	tyicw	address of console data icw mailbox
	rem
conflg	ind	.crcon
	ttls	consol -- console interrupt processing routine
************************************************************************
*
* the sequence of events in processing the terminate and special
* interrupts from the system console is as follows:
*
*	1.      the appropriate interrupt cell is set by the iom.
*
*	2.      the processor acknowledges the interrupt by executing a
*		"tsy x,*" where "x" is the address of the appropriate        
*		interrupt vector, which points to a "jump table."        
*
*	3.      the jump table routine stores the value of the ic and
*		sends control to the "invp" routine.        
*
*	4.      the "invp" routine saves registers and sends control to
*		the routine "consol" below.        
*
*	5.      "consol" determines from the 3rd word of the jump table
*		which console interrupt (terminate or special) occurred,        
*		and enters the appropriate parameters into the event        
*		dispatcher's queue.        
*
************************************************************************
	rem
	rem	*********************************************************
	rem	* terminate and special interrupt jump tables
	rem	*********************************************************
	rem
consjt	null		symbol that init finds
contmj	ind	**
	tsy	invpx-*,*
	vfd	12/0,6/modcon
	rem
conspj	ind	**
	tsy	invpx-*,*
	vfd	12/-1,6/modcon
	eject
	rem	*********************************************************
	rem	* console interrupt processing routine
	rem	*********************************************************
	rem
consol	null
	inh		<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	tsy	g3wjtx-*,*	get 3rd word of jump table
	iaq	0	? terminate or special interrupt ?
	tmi	con20-*	special, go process
	rem
	rem	terminate interrupt...
	rem
	ldaq	tmaq-*	queue up the terminate interrupt
	ldx1	tmx1-*	processing routine in event
con10	null
	tsy	tmquer-*,*	dispatcher
	tra	cmdisp-*,*
	rem
	rem	special interrupt...
	rem
con20	null
	szn	sibusy-*	? special interrupt already active ?
	tnz	cmdisp-*,*	yes, ignore this one
	aos	sibusy-*	no, set flag to block others
	ldaq	spaq-*	queue up the special interrupt
	ldx1	spx1-*	processing routine in event
	tra	con10-*
	rem
	rem
	rem
invpx	ind	invp	main interrupt processor
g3wjtx	ind	g3wjt
cmdisp	ind	mdisp	return to master dispatcher
	rem
modcon	set	6
	ttls	tmcon -- console terminate interrupt processor
************************************************************************
*
*	tmcon   console terminate interrupt processor -- part 1
*
************************************************************************
	rem
tmcon	null
	szn	conbsy-*	? busy flag set ?
	tnz	t10-*	yes, as it should be!
	aos	tmeict-*	no, count this extraneous interrupt
	tra	cdisp-*,*	return to dispatcher
	rem
t10	null
tsel	sel	**	select console channel
	szn	cwrite-*	? read or write termination ?
	tze	tmread-*	read, go process accordingly
	rem
	rem	*********************************************************
	rem	* process write termination status
	rem	*********************************************************
	rem
	lda	cstat-*	? status = ready ?
	tmi	t30-*	yes
	rem
t20	null
	aos	cwrite-*
	lda	cwrite-*	test to see if console may be down
	cmpa	cntrbl-*	(377777 octal)
	tnz	t25-*	no, keep hanging in there
	rem
	rem	we have tried to go to the console 131071 times.
	rem	it must be down. set a switch to indicate this
	rem	and disable interrupts for the console.
	rem
	sel	tych	select console channel
	cioc	cnmpcw-*	connect to mask pcw
	aos	nocon-*	set switch to indicate no console
	tra	cdisp-*,*	return to dispatcher
t25	null
	ldaq	csicw-*	re-issue the write command
	staq	csicwa-*,*
	ldaq	cwwicw-*
	staq	cdicwa-*,*
	cioc	cwpcw-*
	tra	cdisp-*,*
	rem
t30	null
	arl	9
	icana	32	(000040)     ? status = ptro ?
	tze	t20-*	no, re-issue write command
	szn	cwconf-*	? wcon or wrcon initiated write ?
	tze	wrcont-*	wrcon, return to issue read
	rem
texit	null
	inh		<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	stz	cwrite-*	no longer in write sequence
	ldaq	cqueaq-*	queue user's courtesy call routine
	ldx1	cquex1-*
	tsy	tmquer-*,*
	stz	conbsy-*	clear console busy flag
	rem
	szn	spint-*	? special interrupt waiting ?
	tze	cdisp-*,*	no, return to dispatcher
	ldaq	spaq-*	yes, queue special interrupt
	ldx1	spx1-*	processor
	tsy	tmquer-*,*
	stz	spint-*
	tra	cdisp-*,*	return to dispatcher
	rem
	rem	*********************************************************
	rem	* process read termination status
	rem	*********************************************************
	rem
tmread	null
	lda	cstat-*
	arl	9
	icana	128	(000200)    ? status = timer runout ?
	tnz	t20-*	yes, re-issue write command
	rem
t40	null
	icana	64	(000100)     ? status = tro ?
	tnz	t20-*	yes, re-issue write command
	ldx1	cdicwa-*,*	no, get last input character
	lda	-1,1,b.1
	icmpa	cntrlx	? control-x ?
	tze	t20-*	yes, re-issue write command
	icmpa	cr+pbit	? carriage return ?
	tze	t50-*	yes
	icmpa	xoff+pbit	? x-off ?
	tnz	t20-*	no, re-issue write command
	rem
t50	null
	lda	cstat-*	? status = ready ?
	tpl	t20-*	no, re-issue write command
	tra	texit-*
	rem
	rem
	rem
	even
tmaq	oct	13
	ind	tmcon
tmx1	zero	0
	rem
tmquer	ind	dspqur
tmeict	bss	1	count of extraneous interrupts
cntrbl	oct	377777
	even
cnmpcw	oct	0,010000	mask bit on to disable channel
	ttls	spcon -- console special interrupt processor
************************************************************************
*
*	 spcon  console special interrupt processor
*
************************************************************************
	rem
spcon	null
	szn	conbsy-*	? any outstanding console io ?
	tze	sp9-*	no, proceed
	aos	spint-*	yes, set special interrupt flag
	tra	cdisp-*,*	return to dispatcher
	rem
sp9	null
	lda	msg1p-*	set message "???"
sp9a	null
	sta	sp15-*
	rem
sp10	null
	ldaq	spbaq-*	write-then-read message 1, 2, or 3
	ldx1	spbx1-*
	tsy	wrcon-*
sp15	zero	**
	zero	spicwi
	tra	cdisp-*,*	accepted -- return to dispatcher
	rem
	ldaq	spaqt-*	busy -- re-queue with 5-second
	ldx1	spx1-*	time delay
	tsy	tmquer-*,*
	tra	cdisp-*,*
	rem
	rem	*********************************************************
	rem	* continue after operator's message has been read
	rem	*********************************************************
	rem
spconb	null
	ldx1	spoptb-*	x1 points to op-code table
	rem
sp100	null
	ldaq	input-*	get 1st 4 characters of input data
	cmpa	0,1	search
	tnz	sp110-*	op-code
	cmpq	1,1	table
	tze	2,1*	for match
	rem
sp110	null
	iacx1	3	bump pointer
	cmpx1	spopnd-*	? end of table ?
	tnz	sp100-*	no, continue search
	rem
	arl	9
	icmpa	cr+pbit	? null line -- cr only ?
	tze	sp115-*	yes, exit
	rem
	lda	msg3p-*	set message "what?"
	tra	sp9a-*
	rem
sp115	null
	inh		<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	stz	sibusy-*	yes, ignore this message
	tra	cdisp-*,*
	rem
	rem
	rem
	even
spicw1	icw	msg1,b.0,6
spicw2	icw	msg2,b.0,8
spicw3	icw	msg3,b.0,8
spicwi	icw	input,b.0,24
spaq	vfd	12/0,o6/14,18/spcon
spbaq	vfd	12/0,o6/14,18/spconb
spaqt	vfd	12/5,o6/14,18/spcon
input	bss	12
	rem
pbit	bool	200
spx1	zero	0
spbx1	zero	0
spint	bss	1
sibusy	bss	1	"special interrupt processor" flag
	rem
msg1p	zero	spicw1
msg2p	zero	spicw2
msg3p	zero	spicw3
	rem
msg1	vfd	9/cr,9/lf
	aci	2,???
msg2	vfd	9/cr,9/lf
	aci	3,more?
msg3	vfd	9/cr,9/lf
	aci	3,what?
	rem
	rem
	rem
spoptb	zero	*+1
	vfd	o18/101102
	vfd	o18/317322
	vfd	18/xabort
	vfd	o18/120305
	vfd	o18/305113
	vfd	18/xpeek
	vfd	o18/101314
	vfd	o18/324305
	vfd	18/xalter
	vfd	o18/324305
	vfd	o18/123324
	vfd	18/xtest
spopnd	zero	*
	ttls	operator command processing routines
************************************************************************
*
*	abort
*
* this command causes an immediate system disaster dump (if a printer is
* configured) just as though a processor fault had occurred.
*
************************************************************************
	rem
xabort	null
	stz	sibusy-*
	tsy	1,*
	ind	conabt
	eject
************************************************************************
*
*	peek    aaaaa
*	peek    aaaaa,n
*
* this command causes the contents of specified locations to be written
* onto the console teletypewriter.  if "n" is present, it specifies the
* number of words to be written, otherwise only one word will be written
* aaaaa specifies the address of the first, or only, word written.
*
* up to eight words will be printed per line
*
************************************************************************
	rem
xpeek	null
	ldx3	spicwi-*	x3 points to input message
	tsy	idx-*	extract one or two octal fields
	rem
	rem	c(idxof1) = address of 1st, or only, word to be typed
	rem	c(idxof2) = number of words to be typed (0 = one word)
	rem
	szn	idxof2-*	if zero was specified, make it 1
	tnz	2
	aos	idxof2-*
	rem
xpk10	null
	lda	xalmem-*,*	mask address to allowable range
	ansa	idxof1-*
	ldq	idxof1-*	convert address to ascii
	ldx3	xpkout-*
	tsy	xpkcnv-*,*
	rem
	iacx3	0,b.1	leave extra blank after address
	ila	9	initialize tally
	sta	xpkicw+1-*
	rem
	lda	idxof2-*	get remaining count
	icmpa	8
	tmi	2	if it's less than 8, use as is
	ila	8	else use 8
	rem
	iera	-1	c(a) <- -c(a)
	iaa	1
	sta	remain-*	hang on to remainder
	rem
xpk15	null		conversion loop
	iacx3	0,b.1	precede word with a blank
	ldq	idxof1-*,*	convert data word to ascii
	tsy	xpkcnv-*,*
	rem
	ila	7
	asa	xpkicw+1-*	increment tally
	aos	idxof1-*	and data address
	aos	remain-*	more data words for this line?
	tnz	xpk15-*	yes, go convert next one
	rem		else write out the line
	rem
xpk20	null
	ldaq	xpkqa1-*
	ldx1	xpkqx1-*
	tsy	xpkwc-*,*	write address and contents
	zero	xpkicw
	tra	xpdisp-*,*	(accepted)
	tra	xpk20-*	(busy)
	rem
	rem	*********************************************************
	rem	* continue processing after 1st write terminates
	rem	*********************************************************
	rem
xpeekb	null
	rem
	ila	-8	any more words to be typed?
	asa	idxof2-*	yes if result > 0
	tmi	2	no
	tnz	xpk10-*	yes
	rem
xpk50	null
	lda	msg2p-*	set message "more?"
	tra	sp9a-*
	rem
	rem
	rem
	even
xpkqa1	vfd	12/0,o6/14
	ind	xpeekb
xpkicw	icw	xpkmsg,b.0,**
	rem
	rem		new-line and 64 blanks initially
xpkmsg	vfd	9/cr,9/lf
	aci	16
	aci	16
	rem
xpkout	zero	xpkmsg+1,b.0
xpkcnv	ind	octasc
xpkqx1	zero	0
xpkwc	ind	write
xpdisp	ind	secdsp
remain	bss	1	number of words remaining to be printed on line
	eject
************************************************************************
*
*	alter   aaaaa,bbbbbb
*
* this command causes the octal number  bbbbbb  to be stored in the
* location whose absolute octal address is aaaaa.
* the octal address, aaaaa, will be "anded" with either 077777 or
* 037777, depending on the size of core storage in use.
*
************************************************************************
	rem
xalter	null
	ldx3	spicwi-*	x3 points to input message
	tsy	idx-*	extract one or two octal fields
	rem
	lda	idxof1-*	limit address to 16k or 32k size
	ana	xalmem-*,*
	cax1
	lda	idxof2-*	store data in specified address
	sta	0,1
	ila	1
	sta	idxof2-*	peek location just altered
	tra	xpk10-*
	rem
	rem
	rem
xalmem	ind	.crmem	contains highest address in core
	eject
************************************************************************
*
*	test                    call the on-line t&d system
*
* this command will allow the future on-line t&d system to be called by
* the 355 console operator.
*
************************************************************************
	rem
xtest	null
	stz	sibusy-*
	tra	1,*	(temporary return)
	ind	secdsp
	rem
	ttls	idx -- console input data extraction subroutine
************************************************************************
*
* this subroutine is used to extract octal numbers from the input string
* typed on the system console.  the routine was designed to permit the
* operator to make quick corrections to the octal numbers he may be
* required to type.
*
* for the purposes of this subroutine, the input string is assumed to be
* one octal number or two octal numbers separated by a comma.  in the
* examples which follow, the first column is the input string, the
* symbol <eom> stands for either a "carriage return" or "x-off"
* character.  the second and third columns are the output of this sub-
* routine -- idxof1 = octal field #1 and idxof2 = octal field #2
*
* as the input string is scanned (from left to right), octits (which is
* the word used to refer to octal integers) are saved in one of the
* "octal field registers" until a non-octit is encountered.  if this
* non-octit is --
*
*	-- <eom>, control is immediately returned to the calling program.
*
*	-- a comma, the saving of octits in the current octal field
*		register is stopped, a pointer (x2) is bumped to point to        
*		the next octal field register, and scanning continues.        
*
*	-- letter x, all octits and resulting octal fields are ignored,
*		the octal field registers are reset to zero, and scanning        
*		begins with the next input character.        
*
*	-- any other non-octit, the octits thus far typed and being saved
*		in the current octal field register are ignored, the        
*		current octal field register is reset to zero, and        
*		scanning continues at the next character.        
*
* the octal field registers will contain a maximum of six octits.  since
* each new octit enters the register at the right end by moving the pre-
* vious contents left, typing more than six octits removes the high
* order extra octits and saves only the low order six octits.
*
* examples --
*
*	input string                    idxof1  idxof2
*
*	123456<eom>                     123456  000000
*	123456,654321<eom>              123456  654321
*	1<eom>                          000001  000000
*	1,2<eom>                        000001  000002
*	1234567432,7654321346<eom>      567432  321346
*	13e12,456e556<eom>              000012  000556
*	123,456x321,654<eom>            000321  000654
*
************************************************************************
*
* calling sequence --
*
*	x3 = character/word address of start of the input string
*
*	tsy     idx-*
*
* exit conditions --
*
*	x2 = address of last octal field register used
*
* n.b. -- future developers...
*		the following must be done to modify this subroutine to        
*		handle more than the present two octal fields.        
*	1.  following the instruction at <idx10+2>,
*	    insert <stz idxof3-*>, <stz idxof4-*>, etc.
*	2.  change the instruction at <idxlof> to <idxlof zero idxof#+1>,
*	    where # is the number of octal fields.
*	3.  following the instruction at <idxof2>,
*	    insert <idxof3 bss 1>, <idxof4 bss 1>, etc.
*
************************************************************************
	rem
idx	ind	**
	rem
idx10	null
	ldx2	idxfof-*	x2 points to octal field register
	stz	idxof1-*	clear octal field registers
	stz	idxof2-*
	stz	idxpco-*	clear pco flag
	rem
idx20	null
	lda	0,3,b.0	get current input character
	icmpa	cr+pbit	? carriage return ?
	tze	idx-*,*	yes, return to user
	icmpa	xoff+pbit	? x-off ?
	tze	idx-*,*	yes, return to user
	iacx3	0,b.1	bump input character pointer
	cmpx2	idxlof-*	? more than 2 octal fields ?
	tze	idx-*,*	yes, return to user
	rem
	iana	127 (000177)	strip parity bit
	caq
	qrl	3
	iaq	-6	? current character an octit ?
	tnz	idx30-*	no
	szn	idxpco-*	? previous character an octit ?
	tnz	3	yes
	stz	0,2	no, clear current octal field register,
	aos	idxpco-*	set pco flag
	ldq	0,2	store octit
	als	18-3	in current octal
	llr	3	field
	stq	0,2	register
	tra	idx20-*
	rem
idx30	null
	stz	idxpco-*	clear pco flag
	icmpa	44	(000054)     ? current input character a comma ?
	tnz	3	no
	iacx2	1	yes, bump pointer to next field reg.
	tra	idx20-*
	rem
	icmpa	88 (000130)	? current input character the letter x ?
	tze	idx10-*	yes, clear all and start over
	tra	idx20-*	no, resume scanning
	rem
	rem
	rem
idxfof	zero	idxof1
idxlof	zero	idxof2+1
idxof1	bss	1	octal field register #1
idxof2	bss	1	octal field register #2
idxpco	bss	1	previous character octit flag
	end
