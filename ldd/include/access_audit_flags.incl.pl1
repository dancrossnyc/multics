/* begin include file - access_audit_flags.incl.pl1 */

/* NOTE: All changes must be done also to access_audit_flags.incl.alm !!!!!! */

/* Modified 85-01-14 by EJ Sharpe for n_audit_access_types, constants for
			indexing into flags array */
/* Modified 85-01-07 by EJ Sharpe for cleanup */
/* Modified 84-11-16 by EJ Sharpe to add alternate dcl */

/* The following structure describes the per-process audit
data which determines which events must be audited. */

dcl 1 audit_flags		based aligned,
      2 objects (6) unal,	/* n_audit_objects */
        3 grant_level	fixed bin (2) uns unal,
        3 deny_level	fixed bin (2) uns unal,
      2 pad		bit (7) unal,
      2 admin_ops		bit (1) unal,
      2 priv_ops		bit (1) unal,
      2 faults		bit (1) unal,
      2 cc_1_10		bit (1) unal,	/* small channel */
      2 cc_10_100		bit (1) unal;	/* moderate channel */

dcl 1 audit_flags_alt	based aligned,
      2 objects (6) unal,	/* n_audit_objects */
        3 grant_level	fixed bin (2) uns unal,
        3 deny_level	fixed bin (2) uns unal,
      2 pad		bit (7) unal,
      2 flags (5) bit (1) unal /* n_audit_flags */;

dcl n_audit_objects 	init (6)
		fixed bin int static options (constant);
dcl n_audit_flags		init (5)
		fixed bin int static options (constant);
dcl n_audit_access_types	init (3)
		fixed bin int static options (constant);

/* constants for indexing into the "objects" array */
dcl (
    FSOBJ_AUDIT_OBJECT_INDEX	init (1),
    FSATTR_AUDIT_OBJECT_INDEX	init (2),
    RCP_AUDIT_OBJECT_INDEX	init (3),
    ADMIN_AUDIT_OBJECT_INDEX	init (4),
    SPECIAL_AUDIT_OBJECT_INDEX init (5),
    OTHER_AUDIT_OBJECT_INDEX	init (6)
    )		fixed bin int static options (constant);

/* constants for indexing into the flags array (in the alternate dcl) */
dcl (
    ADMIN_OP_AUDIT_FLAG_INDEX		init (1),
    PRIV_OP_AUDIT_FLAG_INDEX		init (2),
    FAULTS_AUDIT_FLAG_INDEX		init (3),
    CC_1_10_AUDIT_FLAG_INDEX		init (4),
    CC_10_100_AUDIT_FLAG_INDEX	init (5)
    )		fixed bin int static options (constant);

/* constants which define the meaning of the level values / access types */
dcl (
    NONE			init (0),
    MODIFY_ACCESS		init (1),
    MODIFY		init (2),
    READ			init (3)
    )	fixed bin (2) uns int static options (constant);

/* Note:	"MODIFY" implies "MODIFY_ACCESS" as well;
	"READ" implies "MODIFY" and "MODIFY_ACCESS" as well */

/* Note:	The size of the metering data in active_hardcore_data is
	dependant upon the number of audit flags and objects.
	Specifically, the number of metering buckets is:
	n_audit_objects*2*n_audit_access_types+n_audit_flags+1
	(the extra "1" is for debugging purposes)		*/

/* end include file - access_audit_flags.incl.pl1 */
