/*  START OF:	pl1_symbol_type_fcns.incl.pl1		  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

	
/****^  HISTORY COMMENTS:
  1) change(2016-08-09,GDixon), approve(2016-10-13,MCR10014),
     audit(2016-10-13,Swenson), install(2016-10-13,MR12.6f-0002):
     Initial version of subroutines to manipulate/display the "type" structure
     from pl1_symbol_type.incl.pl1 file.
                                                   END HISTORY COMMENTS */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */
	/*									        */
	/* Name: type_for_descriptor_set						        */
	/*									        */
	/* Function:								        */
	/*  1) Validate whether the PL/I attributes selected in type structure (pl1_symbol_type.incl.pl1) */
	/*     form a self-consistent declaration of an entrypoint argument (what the PL/I Language       */
	/*     Specification calls a <descriptor-set>).					        */
	/*  2) Apply PL/I defaults for missing attributes to form a complete <descriptor-set>.  This      */
	/*     includes supplying precision for an arithmetic descriptor.			        */
	/*									        */
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

type_for_descriptor_set:
     proc (type_bv_in, prec_in, type_bv_out, prec_out) returns (bit(1) aligned);
     
  dcl  type_bv_in bit(36) aligned;			/* Caller-supplied attribute list.                   (in) */
  dcl  prec_in fixed bin(24);				/* Caller-supplied precision for arithmetic type.    (in) */
						/*  This may be set to 0, to indicate precision was       */
						/*  not supplied, as part of the input data.	        */
  dcl  type_bv_out bit(36) aligned;			/* Completed attribute list, after defaults applied.(out) */
  dcl  prec_out fixed bin(24);			/* Precision for arithmetic type, as supplied by    (out) */
						/*  caller, or stemming from attribute defaults.          */

  dcl (F init("0"b), T init("1"b)) bit(1) aligned int static options(constant);
  dcl  precUNSET fixed bin(24) int static options(constant) init(0);

  dcl (bin, min, string) builtin;

%include pl1_symbol_type;

%page;     
  dcl 1 tp aligned,
      2 t like type unaligned;
     string(tp.t) = type_bv_in;			/* Copy caller's input argument, so we can apply defaults */
						/*  to it.				        */

						/* Descriptor Attribute Set - finding summary...	        */
  dcl (DSin,					/*  - for the input set, defined in t structure.	        */
       DSout)					/*  - for the output set, returned in type_out	        */
                    fixed bin(2) aligned unsigned init(UNSET);

  dcl (UNSET init(0), CONSISTENT init(1), INCONSISTENT init(2)) 
                    fixed bin(2) aligned unsigned int static options(constant);
						/* Possible summary values.			        */


	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */
	/*									        */
	/* Major attribute categories of a descriptor set.				        */
	/*      <descriptor set>::= <data type><alignment>[dimension][member] [<sign type>]	        */
	/*									        */
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

  dcl (DSdata_type,					/* Summary of data_type attributes		        */
       DSalignment,					/* Summary of alignment attributes		        */
       DSdimensioned,				/* Summary of array dimension attributes	        */
       DSsign_type)					/* Summary of sign attributes			        */
                    fixed bin(2) aligned unsigned init(UNSET);


	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */
	/*									        */
	/* Subcategories describing the data type:					        */
	/*      <data type>::= <arithmetic>|<string>|<entry>|structure[like]|			        */
	/*           pointer|offset|area|label[local]|format[local]|file			        */
	/*									        */
	/* Attributes within each subcategory:						        */
	/*      <arithmetic>::= {fixed|float}{binary|decimal}{real|complex}			        */
	/*      	   precision							        */
	/*									        */
	/*      <string>::= picture[real|complex]|					        */
	/*           {bit|character}{varying|nonvarying}					        */
	/*									        */
	/*      <entry>::= entry[options]						        */
	/*           {reducible returns|irreducible[returns]}				        */
	/*									        */
	/*      <alignment>::= aligned|unaligned					        */
	/*									        */
	/*      <sign type>::= signed|unsigned						        */
	/*									        */
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

  dcl (DTarithmetic, DTstring, DTentry)			/* Subcategory summary variables		        */
                    fixed bin(2) aligned unsigned init(UNSET);


  dcl (Oreal_cplx)	fixed bin(2) aligned unsigned init(UNSET);
						/* {real|complex} used in 2 subcats: arithmetic & string  */
     Oreal_cplx = bin(t.real) + bin(t.complex);


     if  t.fixed | t.float | t.binary | t.decimal | t.precision  then
	DTarithmetic = CONSISTENT;			/* Assume DTarithmetic is CONSISTENT if any arithmetic    */
						/*  attribute is given. (Oreal_cplx added in later.)      */
     if  t.fixed  & t.float    then DTarithmetic = INCONSISTENT;
     if  t.binary & t.decimal  then DTarithmetic = INCONSISTENT;
						/* No consistency, if paired attributes conflict.         */

     DTstring = min(INCONSISTENT, bin(t.bit) + bin(t.char) + bin(t.picture));
     if (DTstring = UNSET) & t.varying  then DTstring = INCONSISTENT;
						/* Summarize string data type consistency.	        */

     if (Oreal_cplx = CONSISTENT)  then do;		/* real/complex can be applied either to string or        */
						/*  arithmetic data_type; but not to both.	        */
	if  t.picture & (DTstring = CONSISTENT) & (DTarithmetic ^= UNSET) then do;
	     DTarithmetic = INCONSISTENT;
	     DTstring = INCONSISTENT;
	     end;
	else if (DTstring = UNSET) & (DTarithmetic = UNSET) then
	     DTarithmetic = CONSISTENT;		/* If real|complex are the only attributes given, they    */
	end;					/*  apply to the arithmetic subcategory, via defaults.    */

     else if (Oreal_cplx = INCONSISTENT) then do;		/* If both real and complex are given, both subcategories */
	DTarithmetic = INCONSISTENT;			/*  become inconsistent.			        */
	DTstring = INCONSISTENT;
	end;
     

     if  t.entry | t.reducible | t.irreducible | t.returns  then
	DTentry = CONSISTENT;			/* Summarize entry data type consistency.	        */
     if  t.reducible & t.irreducible  then DTentry = INCONSISTENT;


     DSdata_type = min(INCONSISTENT, DTarithmetic + DTstring + DTentry + bin(t.structure) +
	bin(t.ptr) + bin(t.offset) + bin(t.area) + bin(t.label) + bin(t.format) + bin(t.file));
						/* A scalar declaration must include attributes for only  */
						/*  one data type.				        */

     if  t.aligned | t.unaligned  then DSalignment = CONSISTENT;
     if  t.aligned & t.unaligned  then DSalignment = INCONSISTENT;
						/* Summarize alignment descriptor components.	        */

     if  t.dimensioned  then DSdimensioned = CONSISTENT;	/* Summarize array dimension descriptor component.        */

     if (t.signed | t.unsigned ) then DSsign_type = CONSISTENT;
						/* Summarize sign_type descriptor components.	        */
     if (t.signed & t.unsigned ) then DSsign_type = INCONSISTENT;
     if (DSsign_type = CONSISTENT) & (DSdata_type = CONSISTENT) & (DTarithmetic ^= CONSISTENT) then
	DSsign_type = INCONSISTENT;			/*   Sign may only be given with arithmetic data.	        */

     if (DSdata_type   = UNSET) & (DSalignment = UNSET) &	/* Overall summary of consistency of input descriptor set.*/
        (DSdimensioned = UNSET) & (DSsign_type = UNSET)  
     then DSin = UNSET;
     else if (DSdata_type   < INCONSISTENT) & (DSalignment < INCONSISTENT) & 
	   (DSdimensioned < INCONSISTENT) & (DSsign_type < INCONSISTENT) then
	DSin = CONSISTENT;
     else DSin = INCONSISTENT;
%page;
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */
	/*									        */
	/* Arithmetic Defaults							        */
	/*									        */
	/*      default(^(character|bit|pointer|offset|area|label|format|entry|file|	        (Rule 1)  */
	/* 	 fixed|float|picture|binary|decimal|real|complex|				        */
	/* 	 builtin|generic|condition|constant)) fixed binary real;			        */
	/*      default((real|complex)&^(picture|float|constant)) fixed;		        (Rule 2)  */
	/*      default((binary|decimal)&^(float|constant)) fixed;			        (Rule 3)  */
	/*      default((fixed|float)&^(complex|constant)) real;			        (Rule 4)  */
	/*      default((fixed|float)&^(decimal|constant)) binary;			        (Rule 5)  */
	/*      default(fixed&binary&^precision&^constant) precision(17,0);		        (Rule 6)  */
	/*      default(fixed&decimal&^precision&^constant) precision(7,0);		        (Rule 7)  */
	/*      default(float&binary&^precision&^constant) precision(27);		        (Rule 8)  */
	/*      default(float&decimal&^precision&^constant) precision(10);		        (Rule 9)  */
	/*									        */
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

     if (DSdata_type = UNSET) then do;			/* Apply arithmetic default if no attributes set.	        */
	t.fixed = T;				/*  Rule 1 (see comment on "Arithmetic Defaults", above)  */
	t.binary = T;
	t.real = T;
	DTarithmetic = CONSISTENT;
	DSdata_type = CONSISTENT;
	end;
     
     prec_out = prec_in;				/* Apply other arithmetic defaults.		        */
     if (DSdata_type < INCONSISTENT) then do;
	if (Oreal_cplx = CONSISTENT) & ^(t.picture | t.float | t.fixed)  then do;
	     t.fixed = T;				/*  Rule 2				        */
	     if (DTarithmetic = UNSET) then 
		DTarithmetic = CONSISTENT;
	     if (DSdata_type = UNSET) then
		DSdata_type = CONSISTENT;
	     end;
	if (t.binary | t.decimal) & ^(t.float | t.fixed)  then 
	     t.fixed = T;				/*  Rule 3				        */
	if (t.fixed | t.float) & ^(t.real | t.complex)  then 
	     t.real = T;				/*  Rule 4				        */
	if (t.fixed | t.float) & ^(t.binary | t.decimal)  then 
	     t.binary = T;				/*  Rule 5				        */
	if (t.fixed & t.binary & (^t.precision | prec_out = precUNSET))  then do;
	     t.precision = T;			/*  Rule 6				        */
	     prec_out = 17;
	     end;
	if (t.fixed & t.decimal & (^t.precision | prec_out = precUNSET))  then do;
	     t.precision = T;			/*  Rule 7				        */
	     prec_out = 7;
	     end;
	if (t.float & t.binary & (^t.precision | prec_out = precUNSET))  then do;
	     t.precision = T;			/*  Rule 8				        */
	     prec_out = 27;
	     end;
	if (t.float & t.decimal & (^t.precision | prec_out = precUNSET))  then do;
	     t.precision = T;			/*  Rule 9				        */
	     prec_out = 10;
	     end;
	end;


	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */
	/*									        */
	/* Storage Mapping Defaults							        */
	/*									        */
	/*      default((character|bit|picture|structure)&^(aligned|constant))		        */
	/* 	 unaligned;							        */
	/*      default(^(constant|builtin|generic|unaligned}) aligned;			        */
	/*      default ((fixed|float)&^unsigned) signed;					        */
	/*									        */
	/* Though not stated in the PL/I Language Specification, other manuals descriptor layout of       */
	/* storage note that varying strings are always aligned on a word boundary.  In fact, the PL/I    */
	/* compiler produces a descriptor for:  char(N) varying unaligned			        */
	/* which says the variable is actually not-packed (i.e., aligned).			        */
	/*									        */
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

     if DSalignment = UNSET then do;			/* Apply "Storage Mapping Defaults" (see above)	        */
	if (DTstring = CONSISTENT) | t.structure  then do;
	     t.unaligned = T;
	     DSalignment = CONSISTENT;
	     end;
	if (DSalignment = UNSET) then do;
	     t.aligned = T;
	     DSalignment = CONSISTENT;
	     end;
	end;
     if (DSdata_type = CONSISTENT) & (DTstring = CONSISTENT) & (DSalignment = CONSISTENT) & 
	t.varying & t.unaligned then do;
	t.unaligned = F;
	t.aligned = T;
	end;

     if (DTarithmetic = CONSISTENT) & (DSsign_type = UNSET)  then do;
	t.signed = T;
	DSsign_type = CONSISTENT;
	end;
     

	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */
	/*									        */
	/* Entry Defaults								        */
	/*									        */
	/*       default (returns|reducible|irreducible|options) entry;			        */
	/*       default (entry&^reducible) irreducible;					        */
	/*									        */
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

     if (DTentry = CONSISTENT) & ^t.entry  then
	t.entry = T;
     if (DTentry = CONSISTENT) & ^t.reducible  then
	t.irreducible = T;
     

     if (DSdata_type   = UNSET) & (DSalignment = UNSET) &	/* Overall summary of consistency of output descriptor    */
        (DSdimensioned = UNSET) & (DSsign_type = UNSET)	/*  set (after all defaults have been applied).	        */
     then DSout = UNSET;
     else if (DSdata_type   < INCONSISTENT) & (DSalignment < INCONSISTENT) & 
	   (DSdimensioned < INCONSISTENT) & (DSsign_type < INCONSISTENT) then
	DSout = CONSISTENT;
     else DSout = INCONSISTENT;

     type_bv_out = string(tp.t);			/* Return modified descriptor attribute set.	        */
     return (DSout = CONSISTENT);

     end type_for_descriptor_set;
%page;
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */
	/*									        */
	/* Name: type_as_string							        */
	/*									        */
	/* Function:  Convert selected attributes in the type structure (pl1_symbol_type.incl.pl1) to a   */
	/* string, in the order of their typical use in a PL/I declaration.  Add ability to include       */
	/* related data (not in the type structure) needed for a complete PL/I declaration, including:    */
	/*  - structure level							        */
	/*  - variable name or label for the attributes					        */
	/*  - array bounds (dimension)						        */
	/*  - precision and scale (for fixed arithmetic data); precision for float data.	        */
	/*  - size (for bit, character, and area data)					        */
	/*  - picture string (e.g., "zzz9") for pictured data				        */
	/*									        */
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

type_as_string:
     proc (type_bv_in, level, label, dimension, precision, scale, size, picture) returns(char(500) var);

  dcl  type_bv_in bit(36) aligned;			/* Caller-supplied attribute list.                   (in) */
  dcl  level fixed bin;				/* Is the structure level number to output before    (in) */
						/*  label of a structure attribute list.	        */
						/*  If 0, the word "structure" is shown, without a level. */
  dcl  label char(*);				/* String to be output before attributes in list.    (in) */
  dcl  dimension char(40) var;			/* String to be output after a dimension attribute.  (in) */
						/*  If empty string, an asterisk is output.               */
  dcl  precision fixed bin(24);			/* Precision to be output with an arithmetic type.   (in) */
						/*  If 0, only the precision attribute keyword is output. */
  dcl  scale fixed bin(24);				/* Scale to be output with a fixed-point type.       (in) */
						/*  If precision is 0, no scale data is output.           */
						/*   -128 <= scale <= 127			        */
						/*  If scale is 0, this is the default value for a scale  */
						/*  value, so no scale is output.		        */
  dcl  size fixed bin(24);				/* Size to be displayed with string and area type.   (in) */
						/*  If 0, no size is output.			        */
						/*  If 16777215, then * is output as the size.	        */
  dcl  picture char(40) var;				/* Picture string to be output following the picture (in) */
						/*  attribute.  If empty, no picture string is output.    */

  dcl (F init("0"b), T init("1"b)) bit(1) aligned int static options(constant);
  dcl  levelUNSET fixed bin int static options(constant) init(0);
  dcl  precUNSET fixed bin(24) int static options(constant) init(0);
  dcl  sizeUNSET fixed bin(24) int static options(constant) init(0);
  dcl  sizeSTAR  fixed bin(24) int static options (constant) init (16777215);
                                                            /* size value in descriptor for bit(*) and char(*) parms  */
  dcl  ioa_ entry() options(variable);

  dcl (char, ltrim, string) builtin;

%include pl1_symbol_type;

%page;     
  dcl 1 tp aligned,
      2 t like type unaligned;
     string(tp.t) = type_bv_in;			/* Copy caller's input argument, so we access attributes  */
						/*  by name.				        */
  dcl  d char(500) var init("");
     
     if t.structure       then do;
	if level = levelUNSET then
			 d = d || label || " structure";
          else                 d = d || ltrim(char(level)) || " " || label;
	end;
     else                      d = d || label;

     if t.dimensioned     then do;
          if length(dimension) = 0 then
                               d = d || " (*)";
	else		 d = d || " (" || dimension || ")";
	end;

     if t.fixed	      then d = d || " fixed";
     if t.float	      then d = d || " float";
     if t.decimal	      then d = d || " decimal";
     if t.binary	      then d = d || " binary";
     if t.precision	      then do;
          if precision ^= precUNSET then 
	     if t.fixed then
	          if scale ^= 0 then
	                     d = d || "(" || ltrim(char(precision)) || ", " || ltrim(char(scale)) || ")";
                    else       d = d || "(" || ltrim(char(precision)) || ")";
	     else            d = d || "(" || ltrim(char(precision)) || ")";
          else                 d = d || " precision";
	end;

     if t.area	      then d = d || " area";

     if t.bit	      then d = d || " bit";
     if t.char	      then d = d || " char";
     
     if (t.bit | t.char | t.area) & (size ^= sizeUNSET) then do;
	if size = sizeSTAR then
	                     d = d || "(*)";
	else                 d = d || "(" || ltrim(char(size)) || ")";
	end;

     if t.picture	      then do;
			 d = d || " picture";
          if length(picture) > 0 then
                               d = d || " """ || picture || """";
	end;

     if t.real	      then d = d || " real";
     if t.complex	      then d = d || " complex";

     if t.varying	      then d = d || " varying";

     if t.entry	      then d = d || " entry";
     if t.reducible	      then d = d || " reducible";
     if t.irreducible     then d = d || " irreducible";
     if t.returns	      then d = d || " returns";

     if t.ptr	      then d = d || " ptr";
     if t.offset	      then d = d || " offset";
     if t.label	      then d = d || " label";
     if t.file	      then d = d || " file";
     if t.format	      then d = d || " format";

     if t.aligned	      then d = d || " aligned";
     if t.unaligned	      then d = d || " unaligned";
     if t.signed	      then d = d || " signed";
     if t.unsigned	      then d = d || " unsigned";
     if t.initialed	      then d = d || " initial";

     if t.arg_descriptor  then d = d || " arg_descriptor";
     if t.storage_block   then d = d || " storage_block";
     if t.explicit_packed then d = d || " explicit_packed";
     if t.condition	      then d = d || " condition";
     if t.builtin	      then d = d || " builtin";
     if t.generic	      then d = d || " generic";
     if t.local	      then d = d || " local";
     if t.variable	      then d = d || " variable";
     
     return (d);

     end type_as_string;
%page;
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */
	/*									        */
	/* Source of this information:						        */
	/*									        */
	/* 		PL/I Language Specification Manual, AG94-02, RevE 03/81		        */
	/*									        */
	/* Consistent Attribute Sets (from page 5-33)					        */
	/*									        */
	/* Each <literal constant set> must be produced by the declaration of a <literal constant>        */
	/* and each <descriptor set> must be produced by the declaration derived from a <descriptor>.     */
	/* A <named constant set>, other than an external entry constant or file constant, must           */
	/* be produced by a declaration derived from a <label prefix>.			        */
	/*									        */
	/* Syntax:								        */
	/*									        */
	/*      <consistent attribute set>::= <condition set>|<builtin set>|			        */
	/*           <generic set>|<literal constant set>|				        */
	/*       	   <named constant set>|<descriptor set>|				        */
	/*           <variable set>							        */
	/*									        */
	/*      <condition set>::= external condition					        */
	/*									        */
	/*      <builtin set>::= internal builtin					        */
	/*									        */
	/*      <generic set>::= internal generic					        */
	/*									        */
	/*      <literal constant set>::= {<arithmetic>|bit|character}			        */
	/*           constant							        */
	/*									        */
	/*      <named constant set>::= internal label constant[dimension]|			        */
	/*           internal format constant|<scope><entry>constant|			        */
	/* 	   <scope>file<consistent file description>constant			        */
	/*									        */
	/*      <descriptor set>::= <data type><alignment>[dimension][member] [<sign type>]	        */
	/*									        */
	/*      <variable set>::= variable<data type><alignment>[dimension]			        */
	/*           <scope class>[initial] [<sign type>]					        */
	/*									        */
	/*      <data type>::= <arithmetic>|<string>|<entry>|structure[like]|			        */
	/*           pointer|offset|area|label[local]|format[local]|file			        */
	/*									        */
	/*      <arithmetic>::= {fixed|float}{binary|decimal}{real|complex}			        */
	/*      	   precision							        */
	/*									        */
	/*      <string>::= picture[real|complex]|					        */
	/*           {bit|character}{varying|nonvarying}					        */
	/*									        */
	/*      <entry>::= entry[options]						        */
	/*           {reducible returns|irreducible[returns]}				        */
	/*									        */
	/*      <alignment>::= aligned|unaligned					        */
	/*									        */
	/*      <scope>::= internal|external						        */
	/*									        */
	/*      <scope class>::= automatic internal|based internal|				        */
	/*           static<scope>|controlled<scope>|parameter internal|			        */
	/* 	   defined internal[position]|member internal				        */
	/*									        */
	/*      <consistent file description>::= <stream description>|<record description>	        */
	/*									        */
	/*      <stream description>::= stream{input|output[print][environment]}		        */
	/*									        */
	/*      <record description>::= record{input|output|update}				        */
	/*           {<sequential description>|<direct description>}[environment]		        */
	/*									        */
	/*      <sequential description>::= sequential[keyed]				        */
	/*									        */
	/*      <direct description>::= direct keyed					        */
	/*									        */
	/*      <sign type>::= signed|unsigned						        */
	/*									        */
	/*									        */
	/*									        */
	/* 5.3.3 Language Default Rules (page 5-13 ff)					        */
	/*									        */
	/* Entry Defaults								        */
	/*									        */
	/*       default (returns|reducible|irreducible|options) entry;			        */
	/*       default (entry&^reducible) irreducible;					        */
	/*									        */
	/* File Default								        */
	/*									        */
	/*      default(input|output|update|stream|record|print|keyed|direct|			        */
	/* 	 sequential|environment) file;					        */
	/*									        */
	/* Arithmetic Defaults							        */
	/*									        */
	/*      default(^(character|bit|pointer|offset|area|label|format|entry|file|	        (Rule 1)  */
	/* 	 fixed|float|picture|binary|decimal|real|complex|				        */
	/* 	 builtin|generic|condition|constant)) fixed binary real;			        */
	/*      default((real|complex)&^(picture|float|constant)) fixed;		        (Rule 2)  */
	/*      default((binary|decimal)&^(float|constant)) fixed;			        (Rule 3)  */
	/*      default((fixed|float)&^(complex|constant)) real;			        (Rule 4)  */
	/*      default((fixed|float)&^(decimal|constant)) binary;			        (Rule 5)  */
	/*      default(fixed&binary&^precision&^constant) precision(17,0);		        (Rule 6)  */
	/*      default(fixed&decimal&^precision&^constant) precision(7,0);		        (Rule 7)  */
	/*      default(float&binary&^precision&^constant) precision(27);		        (Rule 8)  */
	/*      default(float&decimal&^precision&^constant) precision(10);		        (Rule 9)  */
	/*									        */
	/* String Default								        */
	/*									        */
	/*      default((character|bit)&^(varying|constant)) nonvarying;			        */
	/*									        */
	/* Scope and Storage Class Defaults						        */
	/*									        */
	/*      default((entry|file)&(automatic|based|static|parameter|			        */
	/* 	 defined|controlled|member|aligned|unaligned|				        */
	/* 	 initial) variable;							        */
	/*      default((entry|file)&range(*)&^variable) constant;				        */
	/*      default(^(constant|builtin|generic|condition)&range(*))			        */
	/*         variable;							        */
	/*      default((file|entry)&range(*)&constant&^internal) external;			        */
	/*      default(condition) external;						        */
	/*      default(^external&range(*)) internal;					        */
	/*      default(variable&external&^controlled) static;				        */
	/*      default(variable&^(based|controlled|static|defined|parameter|			        */
	/*         member)) automatic;						        */
	/*									        */
	/* Storage Mapping Defaults							        */
	/*									        */
	/*      default((character|bit|picture|structure)&^(aligned|constant))		        */
	/* 	 unaligned;							        */
	/*      default(^(constant|builtin|generic|unaligned}) aligned;			        */
	/*      default ((fixed|float)&^unsigned) signed;					        */
	/*									        */
	/* Example:								        */
	/* 	declare i fixed;							        */
	/* 	declare j float;							        */
	/* 	declare a;							        */
	/* 	declare X external;							        */
	/* 	declare E entry returns(fixed);					        */
	/*									        */
	/*									        */
	/* After application of the language defaults, these declarations are:		        */
	/*									        */
	/*       declare i fixed binary real precision(17,0)				        */
	/*       	      aligned variable automatic internal signed;				        */
	/*       declare j float binary real precision(27)				        */
	/*       	      aligned variable automatiautomatic internal signed;			        */
	/*       declare X fixed binary real precision(17,0)				        */
	/*       	      aligned variable static external signed;				        */
	/*       declare E entry constant external irreducible				        */
	/*       	      returns(fixed binary real precision(17,0) aligned signed);		        */
	/*									        */
	/*									        */
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/*  END OF:	pl1_symbol_type_fcns.incl.pl1		  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
