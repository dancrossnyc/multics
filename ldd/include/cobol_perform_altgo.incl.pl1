
/*  BEGIN INCLUDE FILE ... cobol_perform_altgo.incl.pl1		 */
/*  Last modified September 3, 1974 by AEG		   */

/*  Input structure for   cobol_addr			   */

declare 1 input_struc_basic aligned static,
	2 type fixed bin aligned init(1),
	2 operand_no fixed bin aligned init(0),
	2 lock fixed bin aligned init(0),
	2 segno fixed bin aligned,
	2 char_offset fixed bin(24) aligned,
	2 send_receive fixed bin aligned init(0);

/*
type	   indicates type of addressing requested.  Type 1
	   indicates basic; i.e., data to be addressed is
	   specified by segno and char_offset.

operand_no   not applicable to type 1.

lock	   indicates lock requirements for registers used in
	   addressing; 0 - do not lock registers used.

segno	   is the compiler designation of the segment in which
	   the data to be addressed is located.

char_offset  is the character offset within segno of the data to
	   be addressed.

send_receive indicates whether the data being addressed is a
	   sending or receiving field for the instruction whose
	   address field is being set; 0 indicates sending.
						   */

/*  Input structure for mc_register$load		   */

declare 1 register_request aligned static,
	2 requested_reg fixed bin aligned init(1),
	2 assigned_reg bit(4) aligned,
	2 lock fixed bin aligned init(0),
	2 reg_set_now fixed bin aligned,
	2 use_code fixed bin aligned init(0),
	2 adjust_ptr_addr fixed bin aligned init(0),
	2 content_ptr ptr aligned init(null),
	2 literal_content bit(36) aligned init((36)"0"b);

/*
requested_reg   is a code designating the register requested;
	      1 designates the a register.

assigned_reg    is a code designating the register assigned.  It
	      has no significance if a specific register is
	      requested.

lock	      indicates locking requirements; 1 requests that
	      the register be locked.

reg_set_now     not applicable for use_code = 0.

use_code 	      specifies how the register is to be used by the
	      requester; 0 signifies that such information is
	      not meaningful for register optimization.

adjust_ptr_addr inserted to make evident that since all pointers
	      must be allocated on even word boundaries, the
	      pl1 compiler will allocate structures containing
	      pointers and all pointers therein on even word  
	      boundaries leaving "gaps" where necessary.

content_ptr     not applicable for use_code = 0.

literal_content not applicable for use_code = 0.
						   */

/*  End-of-perform range alterable go instruction pair	   */

declare prfrm_altgo_inst_pr(4) bit(18) unaligned static init
	("000000000000000000"b, "010011101001000110"b,
	 "000000000000000000"b, "111001000000000101"b);

/*
The instructions are:

     lda  0
     tra  0,al

						   */

/*  END INCLUDE FILE ... cobol_perform_altgo.incl.pl1		 */

