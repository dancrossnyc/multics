     declare		/* Structures returned by hcs_$star_list_ */


	1 entries (total_entries) aligned based (entries_ptr),	/* general structure of an entry */

	  2 type bit(2) unaligned,				/* type of entry */
	  2 number_names bit(16) unaligned,			/* number of names on entry */
	  2 names_index bit(18) unaligned,			/* index in names array of first entry */
	  2 date_time_modified bit(36) unaligned,		/* date time last modified */
	  2 pad1 bit(36) unaligned,				/* different for branches and links */
	  2 pad2 bit(36) unaligned,				/* different for branches and links */


	1 branches (total_entries) aligned based (entries_ptr),	/* complete information for an branch */

	  2 type bit(2) unaligned,				/* as above */
	  2 number_names bit(16) unaligned,
	  2 names_index bit(18) unaligned,
	  2 date_time_modified bit(36) unaligned,
	  2 date_time_used bit(36) unaligned,			/* date time last used */
	  2 mode bit(5) unaligned,				/* effective user access mode */
	  2 pad bit(13) unaligned,
	  2 records bit(18) unaligned,			/* records allocated */


	1 links (total_entries) aligned based (entries_ptr),	/* complete information for a link */

	  2 type bit(2) unaligned,				/* as above */
	  2 number_names bit(16) unaligned,
	  2 names_index bit(18) unaligned,
	  2 date_time_modified bit(36) unaligned,		/* date time entry modified */
	  2 date_time_dumped bit(36) unaligned,			/* date time entry dumped */
	  2 pathname_len bit(18) unaligned,			/* length of target pathname */
	  2 pathname_index bit(18) unaligned,			/* index in names array of first part of path */


	names (total_names) character(32) aligned based (names_ptr),     /* array of names returned */


	pathname character(fixed (links(link_index).pathname_len)) aligned based
	   (addr (names(fixed (links(link_index).pathname_index)))),
							/* pathname of link being examined */


	entries_ptr pointer,
	names_ptr pointer;


