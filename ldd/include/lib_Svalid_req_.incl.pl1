/* START OF:	lib_Svalid_req_.incl.pl1		  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* N__a_m_e:  lib_Svalid_req_.incl.pl1						*/
	/*									*/
	/*      This include segment defines the switches which request/validate the fields	*/
	/* in a status node produced by lib_get_tree_.  This segment, lib_Scontrol_.incl.pl1,	*/
	/* and lib_args_.incl.pl1 define the complete set of structures required as input to	*/
	/* the lib_descriptor_ subroutine.  This subroutine is called by all of the library	*/
	/* descriptor commands to obtain information about entries in a library.		*/
	/*									*/
	/*      If a switch is on, then the corresponding information in the node is valid, or 	*/
	/* is requested for output.							*/
	/*									*/
	/* S__t_a_t_u_s									*/
	/*									*/
	/* 0) Created on:   April 8, 1975  by  G. C. Dixon				*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */


     dcl	1 Svalid_req		aligned based,
	  2 primary_name		bit(1) unal,	/* switch: output includes primary name	   	*/
	  2 matching_names		bit(1) unal,	/* switch: output includes matching names  	*/
	  2 names			bit(1) unal,	/* switch: output includes all names	   	*/

	  2 pathname		bit(1) unal,	/* switch: output include pathname of node target	*/
	  2 kids			bit(1) unal,	/* switch: children nodes (inferior) exist	*/
	  2 kids_error		bit(1) unal,	/* switch: error occurred obtaining kid's info	*/

	  2 type			bit(1) unal,	/* switch: type 			   	*/
	  2 mode			bit(1) unal,	/* switch: user's access mode to node target	*/
	  2 safety		bit(1) unal,	/* switch: safety switch setting		*/

	  2 aim			bit(1) unal,	/* switch: Access Isolation Mechanism switches	*/
	  2 copy			bit(1) unal,	/* switch: copy-on-write switch setting		*/
	  2 unique_id		bit(1) unal,	/* switch: unique identifier		   	*/

	  2 author		bit(1) unal,	/* switch: author of node target		*/
	  2 dtem			bit(1) unal,	/* switch: date attributes modified	   	*/
	  2 dtd			bit(1) unal,	/* switch: date dumped		   	*/

	  2 link_target		bit(1) unal,	/* switch: target pathname of link node		*/
	  2 dtm			bit(1) unal,	/* switch: date modified		   	*/
	  2 dtu			bit(1) unal,	/* switch: date used		   	*/

	  2 rb			bit(1) unal,	/* switch: ring brackets		   	*/
	  2 access_class		bit(1) unal,	/* switch: AIM access class		   	*/
	  2 records_used		bit(1) unal,	/* switch: records used		   	*/

	  2 current_length		bit(1) unal,	/* switch: current length		   	*/
	  2 max_length		bit(1) unal,	/* switch: maximum length			*/
	  2 msf_indicator		bit(1) unal,	/* switch: count of MSF components.		*/

	  2 bit_count		bit(1) unal,	/* switch: bit count		   	*/
	  2 bit_count_author	bit(1) unal,	/* switch: bit count author.			*/
	  2 offset		bit(1) unal,	/* switch: offset from segment base	   	*/

	  2 entry_bound		bit(1) unal,	/* switch: call limit for gate node		*/
	  2 lvid			bit(1) unal,	/* switch: logical volume id	   		*/
	  2 pvid			bit(1) unal,	/* switch: physical volume id			*/

	  2 quota			bit(1) unal,	/* switch: directory quota information		*/
	  2 acl			bit(1) unal,	/* switch: ACL			   	*/
	  2 iacl			bit(1) unal,	/* switch: initial ACLs		   	*/

	  2 dtc			bit(1) unal,	/* switch: date-time compiled      		*/
	  2 compiler_name		bit(1) unal,	/* switch: name of compiler			*/
	  2 compiler_version	bit(1) unal,	/* switch: compiler version number         	*/

	  2 compiler_options	bit(1) unal,	/* switch: compiler options info	   	*/
	  2 object_info		bit(1) unal,	/* switch: other object segment info       	*/
	  2 not_ascii		bit(1) unal,	/* switch: contents is not printable       	*/

	  2 user			bit(1) unal,	/* switch: user-defined node information	*/
	  2 root_search_proc	bit(1) unal,	/* switch: root search procedure info.		*/
	  2 prev_mode		bit(1) unal,	/* switch: user's previous acces mode set.	*/
	  2 pad			bit(26) unal,

	  2 delete		bit(1) unal,	/* switch: on (for lcln) if node to be deleted.	*/

	  2 cross_ref		bit(1) unal,	/* switch: cross-reference all names       	*/
	  2 level			bit(1) unal,	/* switch: output status tree level number	*/
	  2 new_line		bit(1) unal;	/* switch: output begins with newline char	*/

	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/*      The following declarations define a series of bit strings to be overlaid by 	*/
	/* structures which are exactly like Svalid_req above, except for their level 1 name.	*/
	/* These structures are used throughout the library descriptor commands and subroutines.	*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */


     dcl	1 S			aligned based (addr(Srequirements)) like Svalid_req,
	Srequirements		bit(72) aligned;

/* END OF:	lib_Svalid_req_.incl.pl1		  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
