/* ====== BEGIN INCLUDE FILE		lister_entries.incl.pl1 =================================== */

/*
   Modified 800521 by PB to add code to calling sequence for lister_merge_.
   Modified 800702 by PB to add lister_status_.
   Modified 800813 by PB to add lister_assign_.
   Modified 800826 by PB to add lister_create_record_$retain_uid.
   Modified 801008 by PB to add display to calling sequence for lister_print_.
   Modified 801024 by PB to add lister_convert_.
   Modified 810226 by PB to add listform_path to calling sequence for lister_print_.
*/

dcl       lister_assign_
	                    entry (ptr, bit (1) aligned, ptr, ptr);
	                    /* param 1          (input)   ptr to lister segment */
	                    /* param 2          (input)   "1"b iff all records are to be modified */
	                    /* param 3          (input)   ptr to selected records */
	                    /* param 4          (input)   ptr to assign info structure */
	
dcl	lister_compile_listin_
			entry (ptr, ptr, fixed bin (21), ptr, fixed bin, char (*), fixed bin (35));
			/* param 1	(input)	ptr to new file segment */
			/* param 2	(input)	ptr to listin segment */
			/* param 3	(input)	length in chars of listin segment */
			/* param 4	(input)	ptr to system free area */
			/* param 5	(output)	number of records parsed */
			/* param 6	(output)	error token, if any errors */
			/* param 7	(output)	status code */

dcl	lister_compile_select_
			entry (char (*), ptr, ptr, ptr, char (*), fixed bin (35));
			/* param 1	(input)	select expression to be parsed */
			/* param 2	(input)	ptr to file that will be searched */
			/* param 3	(input)	ptr to area */
			/* param 4	(output)	ptr to compiled select expression */
			/* param 5	(output)	error token */
			/* param 6	(output)	standard status code */

dcl	lister_compile_sort_
			entry (char (*), ptr, ptr, ptr, char (*), fixed bin (35));
			/* param 1	(input)	sort string to be parsed */
			/* param 2	(input)	ptr to file */
			/* param 3	(input)	ptr to area */
			/* param 4	(output)	ptr to compiled sort expression */
			/* param 5	(output)	token in error (if any error) */
			/* param 6	(output)	standard status code */

dcl       lister_convert_     entry (ptr, fixed bin (35));
	                    /* param 1          (input)   input file ptr */
                              /* param 2          (output)  standard status code */

dcl	lister_copy_file_head_
			entry (ptr, ptr);
			/* param 1	(input)	input file ptr */
			/* param 2	(input)	output file ptr */

dcl	lister_copy_records_
			entry (ptr, ptr, ptr);
			/* param 1	(input)	ptr to input file */
			/* param 2	(input)	ptr to output file */
			/* param 3	(input)	ptr to list of records to be copied */

dcl	lister_compare_field_tables_
			entry (ptr, ptr)
			returns (bit (1) aligned);
			/* param 1	(input)	ptr to file 1 */
			/* param 2	(input)	ptr to file 2 */
			/* return		(output)	"1"b if field tables are equal */

dcl	lister_create_record_
			entry (ptr)
			returns (ptr);
			/* param 1	(input)	file ptr */
			/* return		(output)	record ptr */

dcl	lister_create_record_$after
			entry (ptr, ptr)
			returns (ptr);
			/* param 1	(input)	ptr to file to create record in */
			/* param 2	(input)	ptr to record that is to be just before created record */
			/* return		(output)	ptr to created record */

dcl	lister_create_record_$retain_uid
			entry (ptr, fixed bin (24) unsigned unaligned)
			returns (ptr);
			/* param 1	(input)	file ptr */
                              /* param 2          (input)   uid to be retained */
			/* return		(output)	record ptr */

dcl	lister_delete_
			entry (ptr, ptr);
			/* param 1	(input)	file ptr */
			/* param 2	(input)	ptr to list of record to be deleted */

dcl	lister_expand_
			entry (ptr, ptr, fixed bin (21), fixed bin, bit (1) aligned)
			returns (fixed bin);
			/* param 1	(input)	file ptr */
			/* param 2	(input)	ptr to output segment */
			/* param 3	(in/out)	1-origin char index of next free char in output segment */
			/* param 4	(input)	line length to use */
			/* param 5	(input)	"1"b iff field names are always to appear */
			/* return		(output)	number of records expanded */

dcl	lister_hash_fid_ reducible
			entry (ptr, char (*))
			returns (fixed bin);
			/* param 1	(input)	file ptr */
			/* param 2	(input)	field identifier */
			/* return		(output)	field index */

dcl	lister_hash_fid_$enter irreducible
			entry (ptr, char (*))
			returns (ptr);
			/* param 1	(input)	file ptr */
			/* param 2	(input)	field identifier */
			/* return		(output)	field identifier node offset */

dcl	lister_format_parse_
			entry (ptr, ptr, char (*), ptr, char (*), fixed bin (35));
			/* param 1	(input)	ptr to file containing field table */
			/* param 2	(input)	ptr to area */
			/* param 3	(input)	listform string */
			/* param 4	(output)	format table ptr */
			/* param 5	(output)	error token */
			/* param 6	(output)	status code */

dcl	lister_merge_	entry (ptr, ptr, ptr, (*) fixed bin, fixed bin, fixed bin, fixed bin(35))
			returns ((3) fixed bin);
			/* param 1	(input)	input file ptr */
			/* param 2	(input)	update file ptr */
			/* param 3	(input)	output file ptr */
			/* param 4	(input)	array of fields to merge on */
			/* param 5	(input)	1-origin number of elements in field_list */
			/* param 6	(input)	type of merge */
	                    /* param 7          (output)  status code */
			/* return		(output)	count of number of input, update, output records */

dcl	lister_print_	entry (ptr, ptr, ptr, fixed bin (21), bit (1) aligned, 
	ptr, ptr, fixed bin, bit (1) aligned, bit (1) aligned, char (*));
			/* param 1	(input)	ptr to file to be printed */
			/* param 2	(input)	format table ptr */
			/* param 3	(input)	ptr to base of output segment */
			/* param 4	(in/out)	index of next output character */
			/* param 5	(input)	"1"b iff all records are to be printed */
			/* param 6	(input)	ptr to list of records to print */
			/*			null => print no records */
			/* param 7	(input)	ptr to argument list for -ag */
			/* param 8	(input)	index of -ag in above argument list */
			/* param 9	(input)	brief error flag */
	                    /* param 10         (input)   "1"b iff called by display_list af */
                              /* param 11         (input)   pathname of listform segment */

dcl	lister_select_	entry (ptr, ptr, ptr, ptr)
			returns (fixed bin);
			/* param 1	(input)	ptr to file to be searched */
			/* param 2	(input)	ptr to select_expression */
			/* param 3	(input)	ptr to area */
			/* param 4	(output)	ptr to list of selected records */
			/* return		(output)	number of records found */

dcl	lister_sort_	entry (ptr, ptr, ptr);
			/* param 1	(input)	file ptr */
			/* param 2	(input)	ptr to list of records */
			/* param 3	(input)	ptr to sort list array */

dcl       lister_status_      entry (ptr, char (*), bit (1) aligned, ptr);
	                    /* param 1          (input)   ptr to lister segment */
	                    /* param 2          (input)   entryname of lister segment */
	                    /* param 3          (input)   on if no selection expression given */
	                    /* param 4          (input)   ptr to status info structure */
	
/* ------ END INCLUDE FILE		lister_entries.incl.pl1 ----------------------------------- */
