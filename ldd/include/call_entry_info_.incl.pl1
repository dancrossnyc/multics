/*  START OF:	call_entry_info_.incl.pl1      	  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

/****^  HISTORY COMMENTS:
  1) change(2016-08-09,GDixon), approve(2016-10-13,MCR10014),
     audit(2016-10-13,Swenson), install(2016-10-13,MR12.6f-0002):
     Initial version of include file for call_entry_info_$from_XXX subroutines.
                                                   END HISTORY COMMENTS */

  dcl  entry_info_parm_count fixed bin;			/* Dimension for allocating entry_info structure.         */
  dcl  entry_info_ptr ptr;				/* Parameter pointing to allocated entry_info structure.  */

  dcl 1 entry_info aligned based(entry_info_ptr),		/* Output from call_entry_info_$from_XXX entrypoint.      */
      2 header like entry_info_header,			/* - Header data, as shown above.		        */
      2 cleanup_data_ptr ptr,				/* - Data used by call_entry_info_$cleanup.	        */
      2 descriptor_ptrs (entry_info_parm_count refer(entry_info.parm_count)) ptr;
						/* - Array of pointers to the parameter descriptors.      */

  dcl 1 entry_info_header aligned,			/* Substructure at start of entry_info, contains all      */
						/*  entrypoint info, except pointers to each parameter    */
						/*  descriptor.				        */
      2 version char(4),				/* - version is entry_info_v1.		        */
      2 areaP ptr,					/* - translator_temp_ allocation segment.	        */

      2 entrypoint,					/* - entrypoint described by this structure.              */
        3 nameString char(256) var,			/*   . entrypoint (format: seg$ep) whose calling sequence */
						/*     is described.			        */
        3 entryVar entry variable options (variable),       /*   . virtual_entry converted to an entry variable.      */

      2 callingSequence,                                    /* - Calling sequence data:			        */
        3 function bit (1) unaligned,                       /*    . Entry is a function.			        */
                                                            /*      (Last parameter descriptor is the return value.)  */
        3 options_variable bit (1) unaligned,               /*    . Entry defined as options(variable).	        */
                                                            /*      (Not sure PL/I compiler ever sets this.)	        */
        3 pad1 bit(34) unaligned,
        3 parm_count fixed bin;                             /*    . Number of parms given in entry's calling seq.     */
						/*      This includes its returns descriptor, if entry is */
						/*      a function.				        */

  dcl  entry_info_v1 char(4) aligned int static options(constant) init("ei01");
						/* Version of the structure shown above.	        */
  dcl  eiParmCountNotDetermined fixed bin int static options(constant) init(-1);
						/* Only used by call_entry_info_$from_virtual_entry.  This*/
						/*  is value returned in parm_count if no calling sequence*/
						/*  data was found.  This probably means the entrypoint   */
						/*  was not compiled by PL/I, or is an inaccessible gate  */
						/*  entrypoint (or both).			        */

  dcl  call_entry_info_$from_virtual_entry entry (char(*), char(*), uns fixed bin(3), ptr, fixed bin(35));
  dcl  call_entry_info_$from_declaration entry (char(*), char(*), char(*) var, uns fixed bin(3), ptr, fixed bin(35));
  dcl  call_entry_info_$cleanup entry (ptr);

/*  END OF:	call_entry_info_.incl.pl1      	  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
