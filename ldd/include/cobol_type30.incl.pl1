
/* BEGIN INCLUDE FILE ... cobol_type30.incl.pl1 */
/* Last modified on 11/19/76 by ORN */

/*
An internal tag token is created in the procedure division minpral file by
the procedure division syntax phase whenever the introduction of a
compiler-generated procedure definition is required to maintain the proper
logical flow between minpral statements.  A typical usage of type 30 tokens
is as labels of simple conditions within a compound condition.
*/

dcl tag_ptr ptr;

/* BEGIN DECLARATION OF TYPE30 (INTERNAL TAG) TOKEN */
dcl 1 int_tag based (tag_ptr),
	/* header */
	2 size fixed bin (15),
	2 line fixed bin (15),
	2 column fixed bin (15),
	2 type fixed bin (15),
	/* body */
	2 filler1 ptr,
	2 filler2 ptr,
	2 perform_bit bit (1),
	2 true_path bit (1),
	2 filler3 bit (6),
	2 filler4 char (2),
	2 filler5 bit (8),
	2 filler6 fixed bin (15),
	2 proc_num fixed bin (15),
	2 filler7 fixed bin (15),
	2 filler8 char (1);
/* END DECLARATION OF TYPE30 (INTERNAL TAG) TOKEN */

/*
FIELD	CONTENTS

size	The total size in bytes of this internal tag token.
line	0
column	0
type	30
filler1	Available for future use.
filler2	Available for future use.
perform_bit	Set to "1"b when this token is issued at the
	end of a condition in a format #3 or format #4
	perform.
true_path	This field is significant only when perform_bit is
	"1"b. Set to "1"b when this token represents the true
	path of a condition. Set to "0"b when this token
	represents the false path of a condition.
filler3	Available for future use.
filler4	Available for future use.
filler5	Available for future use.
filler6	Available for future use.
proc_num	The internally generated procedure number of the tag
	defined by this token.
filler7	Available for future use.
filler8	Available for future use.
*/

/* END INCLUDE FILE ... cobol_type30.incl.pl1 */

