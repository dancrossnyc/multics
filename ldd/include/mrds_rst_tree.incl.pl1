/* BEGIN INCLUDE FILE mrds_rst_tree.incl.pl1   jeg 7/19/78 */

/* common declarations for threaded binary tree routines

   The tree maintains an inorder list of it's keys.
   this means that for a given node, any key in it's left subtree
   is "less" than the given node's key and that any key in it's
   right subtree is "greater" than the given node's key.

   Threads are maintained to allow fast and easy traversal of the tree.
   threads occupy the position of null pointers of an straight binary tree,
   thus they only occur in leaf nodes.
   left threads point to that nodes inorder predecessor.
   right threads point to that nodes inorder successor.

   note: root_ptr must be passed by reference
   ( not by value ) so it can be changed .
   Also, each parameter must be a different
   variable. The same variable used for two
   or more arguments when any of the tree
   routines are called will produce errors */


declare  key char (32) aligned ;			/* data key directing search */

declare  root_ptr ptr ;				/* pointer to head of desired list */
declare  node_ptr ptr ;				/* pointer to key node, when success */
declare  parent_ptr ptr ;				/* pointer to direct parent of current node */
declare  data_ptr ptr ;				/* pointer from tree node to data structure headed by node */
declare  successor_ptr ptr ;				/* pointer to inorder successor of current node in tree */
declare  successor_parent_ptr ptr ;			/* pointer to immediate tree parent of inorder successor node */
declare  predecessor_ptr ptr ;			/* pointer to inorder predecessor of current node */
declare  predecessor_parent_ptr ptr ;			/* pointer to direct parent of predecessor */
declare  area_ptr ptr ;				/* pointer to based area for node allocation/freeing */

declare  work_area area based (area_ptr) ;		/* area of storage for tree */

declare  success bit (1) ;				/* on if operation successful */
declare  thread bit (1) aligned ;			/* current thread indicator, on = thread, off = pointer */

declare 1 node based (node_ptr) aligned,		/* tree element */
        2 data ptr,					/* data field link */
        2 key char (32),				/* data key */
        2 right,					/* right branch link */
	3 thread bit (1),				/* indicates whether link is thread or pointer */
	3 link ptr,				/* pointer to right descendent or thread to successor */
        2 left,					/* left branch link */
	3 thread bit (1),				/* indicates whether link is thread or pointer */
	3 link ptr,				/* pointer to left descendent or thread to predecessor */
        2 pad bit (34) ;				/* reserved for future flags */

/* END INCLUDE FILE mrds_rst_tree.incl.pl1  */




