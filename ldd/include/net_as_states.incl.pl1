
/*        BEGIN include file net_as_states.incl.pl1                   */

/*             This include file contains declarations for the        */
/*        states of the various pseudo-devices and services that the  */
/*        Network portion of the Answering Service.  Be aware that    */
/*        due to the lack of an effective case statement in PL/I,     */
/*        these states wil also show up in label vector constants     */
/*        as the corresponding decimal integer.  Hopefully, the       */
/*        names as declared in this include file will be associated   */
/*        with the label location in a comment field.                 */

/*        Originally created by D. M. Wells 1976, Jan. 17.            */

                                        /* Declaration of the state of the TTY "LINE" -- the Network          */
                                        /* connections -- which can not open instantaneously                  */
     declare
         (LINE_CLOSED         initial (0),        /* no connections exist, should be quiescent                */
          LINE_OPENING        initial (1),        /* have issued RFCs, now waiting for replies                */
          LINE_AS_CONTROL     initial (2),        /* Line is open, AS gets read terminate wakeups             */
          LINE_UP_CONTROL     initial (3),        /* Line is open, User Process gets I/O wakeups              */
          LINE_CLOSING        initial (4))        /* CLSs have been issued, waiting for replies               */
               fixed binary (3) internal static options (constant);

     declare
          LINE_states (0 : 4) character (28) internal static options (constant) initial (
                    "Line closed",
                    "Line opening",
                    "Answering Service Control",
                    "User Process Control",
                    "Line Closing");

                                        /* Pseudo-TTY states -- These are seen by the rest of the             */
                                        /* Answering Service and are similar to those of the TTYDIM.          */
     declare
         (TTY_DETACHED        initial (0),        /* TTY doesn't exist or isn't known                         */
          TTY_HUNGUP          initial (1),        /* TTY isn't being used, and won't answer                   */
          TTY_LISTENING       initial (2),        /* TTY isn't being used, but will answer if dialed          */
          TTY_EXPERIMENTING   initial (3),        /* TTY has been dialed, and is answering                    */
          TTY_DIALED          initial (5))        /* TTY is dialed up, and communications can proceed         */
               fixed binary (4) internal static options (constant);

     declare
          TTY_states (0 : 5) character (16) internal static options (constant) initial (
                    "Detached",
                    "Hungup",
                    "Listening",
                    "Experimenting",
                    "State 4?",
                    "Dialed-up");

                                        /* Pseudo-TTY states -- states of the pseudo-tty as used internally   */
                                        /* to determine attachment status of pseudo-TTY.                      */
     declare
         (PTTY_detached                 initial (0),        /* Pseudo-TTY is not attached           */
          PTTY_attached                 initial (1),        /* Pseudo-TTY is attached and functioning         */
          PTTY_broken                   initial (2))        /* Pseudo-TTY is attached but doesn't work        */
               fixed binary (17) internal static options (constant);

     declare
          PTTY_states (0 : 2) character (12) internal static options (constant) initial (
                    "Detached",
                    "Attached",
                    "Broken");

                                        /* Service states -- states of the service provided by Server         */
                                        /* ICP sockets.                                                       */
     declare
         (SERVICE_unavailable           initial (0),        /* Service is turned off                          */
          SERVICE_listening             initial (1),        /* Service is listening for requests              */
          SERVICE_allocation_wait       initial (2),        /* Request present, waiting to send pseudo-tty id */
          SERVICE_close_wait            initial (3))        /* Request processed -- waiting for close         */
               fixed binary (3) internal static options (constant);

     declare
          SERVICE_states (0 : 3) character (16) internal static options (constant) initial (
                    "Unavailable",
                    "Listening",
                    "Allocation wait",
                    "Close wait");

                                        /* Logger states -- states of this entire service module.             */
     declare
         (LOGGER_services_off           initial (0),        /* All services turned off or never initialized   */
          LOGGER_network_down           initial (1),        /* Some services on, but network is not up        */
          LOGGER_services_up            initial (2))        /* Logger turned on and network is up             */
               fixed binary (3) internal static options (constant);

     declare
          LOGGER_states (0 : 2) character (12) internal static options (constant) initial (
                    "Logger off",
                    "Network down",
                    "Logger up");

     declare
         (SERVICE_login                 initial (1),        /* channel is used for normal logins              */
          SERVICE_ftp                   initial (2))        /* channel is used for File Transfer Protocol     */
               fixed binary (17) internal static options (constant);

     declare
          SERVICE_type (1 : 2) character (8) internal static options (constant) initial (
                    "login",
                    "FTP");

/*        END include file net_as_states.incl.pl1                     */

