/* BEGIN INCLUDE FILE ... _imft_ft_commands.incl.pl1 */

/* Created:  April 1982 by G. Palter */
/* Modified: July 1982 by G. Palter for true AIM support */
/* Modified: March 1983 by Robert Coren to add remote request record */
/* Modified: April 1983 by Robert Coren to add eof_reply record */


/****^  HISTORY COMMENTS:
  1) change(88-11-10,Beattie), approve(88-08-01,PBF7948),
     audit(88-11-14,Farley), install(88-11-14,MR12.2-1214):
     Change declaration of request_number to match up with what is
     coming from request_descriptor structure to prevent size condtions.
                                                   END HISTORY COMMENTS */


/* Command and reply control records used by the IMFT file transfer protocol */


/* Command/reply types */

dcl (IMFT_BOF		initial (11),		/* start a file/subtree transfer */
     IMFT_EOF		initial (12),		/* end of a file/subtree transfer */
     IMFT_REMOTE_REQUEST	initial (13))		/* request for remote transfer */
	fixed binary (7) unaligned unsigned static options (constant);


/* File/subtree transfer command record */

dcl 1 bof_command aligned based (bof_command_ptr),
      2 global,					/* data pertaining to both systems */
        3 object_type fixed binary (2),			/* type of object (segment/directory/MSF) */
        3 object_access_class bit (72),			/* access class of the object we transmitted */
        3 request_number fixed binary (35),		/* daemon's sequence number for this request */
        3 queue fixed binary,				/* priority queue */
        3 flags aligned,
	4 notify bit (1) unaligned,			/* ON => send notifications when successfull */
	4 continued bit (1) unaligned,		/* ON => this is continuation of a previous request */
	4 restarted bit (1) unaligned,		/* ON => this is a restart of a previous request */
	4 priority_request bit (1) unaligned,		/* ON => this request was given high priority */
	4 pad bit (32) unaligned,
      2 local_system,				/* data pertaining to local (source) system */
        3 local_user character (32) unaligned,		/* Person.Project of user who requested the transfer */
        3 local_user_authorization bit (72),		/* process authorization of the user who issued request */
        3 local_user_ring fixed binary,			/* ring of execution of user when he issued request */
        3 local_dirname character (168) unaligned,	/* where the branch is on the local system */
        3 local_ename character (32) unaligned,		/* ... */
      2 foreign_system like ft_request.request;		/* data pertaining to foreign (target) system */

dcl  bof_command_ptr pointer;


/* Remote request command record */

dcl  1 remote_request aligned based (rem_req_ptr),
       2 global,
         3 request_number fixed binary (35),		/* sequence # of this request */
         3 queue fixed binary,			/* priority queue in which this request was submitted */
         3 flags,
	 4 priority_request bit (1) unaligned,
	 4 pad bit (35) unaligned,
       2 local_system,
         3 local_user character (32) aligned,		/* Person.Project of user who submitted the request */
         3 local_user_authorization bit (72),		/* process authorization of user who issued the request */
         3 local_user_ring fixed binary,		/* ring of execution of user when request issued */
       2 request_info like ft_request;			/* defined in _imft_ft_request.incl.pl1 */

dcl rem_req_ptr pointer;


/* File/subtree transfer reply record */

dcl  1 bof_reply aligned based (bof_reply_ptr),
       2 request_number fixed binary (35),		/* sequence # of the request for which this is the reply */
       2 abort_request bit (1) aligned,			/* ON => remote system refuses to accept this file/subtree */
       2 abort_message character (1024) varying;		/* reason why the remote system rejects the request */

dcl  bof_reply_ptr pointer;


/* File_subtree end-of-file command record */

dcl 1 eof_command aligned based (eof_command_ptr),
      2 request_number fixed binary (35),
      2 backup_errors bit (1) aligned;			/* ON => errors reported by backup_dump_ */

dcl eof_command_ptr pointer;


/* File/subtree end-of-file reply record */

dcl  1 eof_reply aligned based (eof_reply_ptr),
       2 request_number fixed binary (35),		/* sequence # of the request whose completion this acknowledges */
       2 error bit (1) aligned;			/* ON => remote system was unable to load the object successfully */

dcl  eof_reply_ptr pointer;


/* Types of objects which can be transmitted by IMFT */

dcl (LINK		initial (0),			/* links actually aren't allowed, but... */
     SEGMENT	initial (1),
     DIRECTORY	initial (2),			/* actually the entire subtree is transferred */
     MSF		initial (3))
	fixed binary (2) static options (constant);

dcl  OBJECT_TYPES (0:3) character (32) static options (constant) initial (
	"link",	"segment",	"subtree",	"multisegment file");

/* END INCLUDE FILE ... _imft_ft_commands.incl.pl1 */
