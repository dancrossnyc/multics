/* BEGIN INCLUDE FILE ... compare_alias.incl.pl1 */

/* This subroutine is an include file and is included in the optimizer and in the
   code generator.  It determines whether or not two potentially aliased variables are capable of
   occupying the same generation of storage.  Its input is a pair of pointers each pointing
   to a symbol node.  */

compare_alias: proc(pa,pb) reducible returns(aligned bit);

dcl	(a,b,pa,pb) ptr;
%include picture_image;

	a = pa;
	b = pb;
	if equal_types(a,b)|(bit_overlay(a)&bit_overlay(b))|(char_overlay(a)&char_overlay(b))
	     then return("1"b);		/* coded this way for efficiency */
	     else return("0"b);

equal_types: proc(a,b) reducible returns(aligned bit);

dcl	(a,b) ptr;


	if string(a->symbol.data_type)=string(b->symbol.data_type)
	   then if a->symbol.aligned=b->symbol.aligned
	   then if a -> symbol.unsigned = b -> symbol.unsigned
	   then if a->symbol.varying=b->symbol.varying
	   then if a->symbol.binary=b->symbol.binary
	   then if a->symbol.real=b->symbol.real
	   then if(a->symbol.c_dcl_size=b->symbol.c_dcl_size|^(a->symbol.fixed|a->symbol.float))
	   then if a->symbol.scale=b->symbol.scale
	   then if a->symbol.picture
		then return(a->symbol.general->reference.symbol->symbol.initial->picture_image.chars =
				b->symbol.general->reference.symbol->symbol.initial->picture_image.chars);
		else return("1"b);
	return("0"b);
	end; /* equal_types */

bit_overlay: proc(a) reducible returns(aligned bit);

dcl	(a,p) ptr;

	p = a;
	do while(p->symbol.structure);
	p = p->symbol.son;
	end;
	return(a->symbol.packed&p->symbol.bit);
	end; /* bit_overlay */

char_overlay: proc(a) reducible returns(aligned bit);

dcl	(a,p) ptr;

	p = a;
	do while(p->symbol.structure);
	p = p->symbol.son;
	end;
	return(a->symbol.packed&(p->symbol.char|p->symbol.picture));
	end; /* char_overlay */

	end; /* compare_alias */

/* END INCLUDE FILE ... compare_alias.incl.pl1 */
