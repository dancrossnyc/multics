/* BEGIN INCLUDE FILE dm_cm_basic_ci.incl.pl1 */

/* DESCRIPTION:

        The collection_manager_ manages the structure of the addressable
   portion of a control interval.  The addressable portion is that portion of
   a control interval which the file_manager_ will allow the
   collection_manager_ to address.  In this description control interval will
   be used to mean the addressable portion of a control interval.
   
        A control interval is divided into four parts: the header, the datum
   position table (also known as the slot table or slots), un-used space and
   used space.  The beginning of the header is at offset 0, and the end of the
   used space is at the end of the control interval (curently offset 4072).
   Pictoriarly, a control interval is structured as follows:
   
   ----------------------------------------------------------------------
   |        || | | | | | ||               ||   | / / |       |/|   |    |
   | Header || | slot  | || un-used space ||   |/ / /|       |/|   |    |
   |        || | table | ||               ||   | / / |       |/|   |    |
   |        || | | | | | ||               ||   |/ / /|       |/|   |    |
   ----------------------------------------------------------------------
                                           ^ ^    ^      ^    ^  ^   ^
                                           | |    |      |    |  |   |
                                           | |...........|.......|...|
                        start of used space|      |           |      |
                                                  |           |  each|
                                          scattered free space|  is a used
                                                                 datum
   
      The basic_control_interval structure describes the header
   (basic_control_interval.header, bci_header) and the slots
   (basic_control_interval.datum_position_table, datum_slot for one only).
   Each datum_slot contains the offset (in bytes) and the length (in bits) of
   a datum in the used space.  If the offset is equal to FREE_SLOT (declared
   in dm_cm_basic_ci_const.incl.pl1), the slot is un-used.  The slot also
   contains flags describing the type of datum (see dm_cm_datum.incl.pl1).
*/

/* HISTORY:
Written by Matthew Pierret, 02/07/82.
Modified:
03/25/82 by Matthew Pierret: Fixed alignment differences basic_control_interval
            and its sub-structures.
06/14/82 by Matthew Pierret: Removed common header and buffers. Changed
            basic_ci_header to bci_header. Added previous_control_interval.
07/12/82 by Matthew Pierret: Changed collection_id to be bit (36) aligned.
10/29/82 by Matthew Pierret: Added flags to datum slots. 
11/10/82 by Matthew Pierret: Removed continued_datum_is_present flag, as it
            is not used.
03/28/84 by Matthew Pierret: Added the constants BCI_HEADER_LENGTH_IN_BYTES
            and DATUM_POSITION_TABLE_OFFSET_IN_BYTES.
*/

/* format: style2 */
     dcl	   1 basic_control_interval
			      aligned based (basic_control_interval_ptr),
	     2 header	      like bci_header,
	     2 datum_position_table
			      (0 refer (basic_control_interval.number_of_datums)) like datum_slot;


     dcl	   1 bci_header	      aligned based (bci_header_ptr),
	     2 layout_type	      char (4) aligned,
	     2 collection_id      bit (36) aligned,
	     2 next_control_interval
			      fixed bin (24) uns unal,
	     2 previous_control_interval
			      fixed bin (24) uns unal,
	     2 flags	      unal,
	       3 continuation_datum_is_present
			      bit (1) unal,
	       3 free_slot_is_present
			      bit (1) unal,
	       3 must_be_zero     bit (4) unal,		/* reserved */
	     2 scattered_free_space
			      fixed bin (17) unal,
	     2 start_of_used_space
			      fixed bin (17) unal,
	     2 number_of_datums   fixed bin (17) unal;

     dcl	   1 datum_slot	      aligned based (datum_slot_ptr),
	     2 flags	      unal,
	       3 special_format_datum
			      bit (1) unal,		/* reserved */
	       3 is_continued     bit (1) unal,
	       3 is_continuation  bit (1) unal,
	       3 mbz	      bit (1) unal,		/* reserved */
	     2 offset_in_bytes    fixed bin (15) uns unal,
	     2 length_in_bits     fixed bin (17) uns unal;

     dcl	   basic_control_interval_ptr
			      ptr;
     dcl	   bci_header_ptr	      ptr;
     dcl	   datum_slot_ptr	      ptr;

     dcl	   BASIC_CI_LAYOUT_1      char (4) aligned init ("bci1") internal static options (constant);

/* END INCLUDE FILE dm_cm_basic_ci.incl.pl1 */
