	/* START OF:	rdc_stack_fcns_.incl.pl1	  *  *  *  *  *  *  */

	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
	/*							*/
	/* N__a_m_e:  rdc_stack_fcns_.incl.pl1				*/
	/*							*/
	/*      This include segment is used by compilers generated by the	*/
	/* reduction_compiler.  It includes code for manipulating the 	*/
	/* reduction label stack.					*/
	/*							*/
	/* S__t_a_t_u_s							*/
	/*							*/
	/* 0) Created:  April, 1974 by G. C. Dixon			*/
	/*							*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

RD_STACK:	if STACK_DEPTH > 0 then do;
	     NRED = STACK (STACK_DEPTH);
	     go to RD_TEST_REDUCTION;
	     end;
	else
	     go to RD_NEXT_REDUCTION;

RD_STACK_POP:
	if STACK_DEPTH > 0 then do;
	     NRED = STACK (STACK_DEPTH);
	     STACK_DEPTH = max (STACK_DEPTH-1, 0);
	     go to RD_TEST_REDUCTION;
	     end;
	else
	     go to RD_NEXT_REDUCTION;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


PUSH:	procedure (N);				/* invoked to push reduction number 'N' onto	*/
						/* the reduction stack.			*/
     dcl	N			fixed bin;

     dcl (addr, dimension, length, null)
				builtin;

     dcl	cu_$cl			entry,
	iox_$put_chars		entry (ptr, ptr, fixed bin, fixed bin(35)),
	iox_$error_output		ptr ext static,
	lex_error_		entry options(variable);

     dcl	brief_error		char(4) varying initial ("") int static,
	long_error		char(234) varying int static init(
"An internal stack (the reduction stack) has overflowed.
The translation has failed.  Contact translator maintenance
personnel for assistance.
     Processing reduction: ^d
     Reduction being stacked: ^d
     Maximum stack depth: ^d"),
	non_restart_error		char(33) int static init ("Translation cannot be restarted.
");

	if STACK_DEPTH >= dimension (STACK, 1) then do;
	     call lex_error_ (0, "0"b, 4, 0, null, null, "11"b, long_error, brief_error, NRED, N,
			  dimension(STACK,1));
get_to_cl:     call cu_$cl();
	     call iox_$put_chars (iox_$error_output, addr(non_restart_error), length(non_restart_error), 0);
	     go to get_to_cl;
	     end;					/* stack overflow is a non-recoverable error.	*/
	else
	     STACK_DEPTH = STACK_DEPTH + 1;
	STACK (STACK_DEPTH) = N;

	end PUSH;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

	/* END OF:	rdc_stack_fcns_.incl.pl1	  *  *  *  *  *  *  */
