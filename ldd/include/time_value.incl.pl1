/* START OF*	time_value.incl.pl1 	  *  *  *  *  *  *  *  *   */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */
/*							       */
/* Name:  time_value.incl.pl1				       */
/*							       */
/*	This structure holds output from date_time_$from_clock	       */
/*	                  and input to   date_time_$to_clock	       */
/* (A clock value is a combination of a day portion and a time portion.      */
/*  clock_days represents one part and clock_time the other.)	       */
/*      to_clock accepts "day" (as opposed to "time") data only in certain   */
/*  combinations.  This table shows with the *'s which fields may be present */
/*  together.  All others must be zero.				       */
/* +-1-+-2-+-3-+-4-+--------------+				       */
/* | * | * |   |   |         year |    In cases 1, 2, & 4, if day_in_week is */
/* | * |   |   |   |           mm |    present,  it is used to verify the    */
/* | * |   |   |   |           dd |    value converted.		       */
/* |   |   | * |   |  fiscal_week |    In case 3 it actually defines a day.  */
/* |   |   |(*)|   |  day_in_week |    If not present, Monday is assumed.    */
/* |   | * |   |   |  day_in_year |				       */
/* |   |   |   | * | day_in_clock |				       */
/* +-v-+-v-+-v-+-v-+--------------+				       */
/*   |   |   |   +-- clock_days = day_in_calendar			       */
/*   |   |   +------ clock_days = converted (fiscal_week,day_in_week)	       */
/*   |   +---------- clock_days = converted (year,day_in_year)	       */
/*   +-------------- clock_days = converted (year,mm,dd)		       */
/*							       */
/*    clock_time = converted (HH,MM,SS,UUUUUU)			       */
/*							       */
/* The zone adjustment may be in one of two forms:		       */
/*    if zone^="" then zone_index = INDEX_IN_time_info_OF (zone);	       */
/* 		[ERROR if not found]			       */
/*    if zone="" & zone_index=0 then zone_index = time_defaults_$zone_index  */
/* After these two steps, if zone_index=0, it is an ERROR.		       */
/* The value in time_info_ of zone_delta (zone_index) is used to adjust      */
/* clock_time.						       */
/*							       */
/* If leap_year^=0 it is an ERROR.  All values are range checked, e.g.       */
/*   year<0 or year>9999.  Out-of-range is an ERROR.		       */
/*							       */
/*  Refer to time_offset_.incl.pl1 for the structure used to input data to   */
/*  date_time_$offset_to_clock.				       */
/*							       */
/* Status							       */
/*							       */
/* 0) Created by:   J. Falksen - 06/20/78			       */
/* 1) Updated:	jaf	 - 84-11-01 US & fw enlarged to bin(20)	       */
/*							       */
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/*	 All values in this structure are zone adjusted, not GMT.	       */

dcl 1 time_value		aligned based(Ptime_value),
      2 version	char (8),
      2 yc 	fixed bin,	/* Year part of date (eg, 1978)      */
      2 my 	fixed bin,	/* Month part of date (eg, 7= July)  */
      2 dm 	fixed bin,	/* Day of month part of date (eg, 4) */
      2 Hd 	fixed bin,	/* Hour of the day (eg, 18)	       */
      2 MH 	fixed bin,	/* Minute of the hour (eg, 35)       */
      2 SM 	fixed bin,	/* Second of the minute (eg, 59)     */
      2 US 	fixed bin (20),	/* Microseconds in excess of second  */
      2 fw	fixed bin (20),	/* the digits are yyyyww	 [OUT] */
      2 dw	fixed bin,	/* Day of the week (1=Mon, 7=Sun).   */
      2 dy	fixed bin,	/* Day of the year		       */
				/*  (eg, 12/31 = 365 or 366).	       */
      2 dc	fixed bin(22),	/* Day in calendar value	       */
				/*  (eg, 1 = Jan 1, 0001).	       */
      2 Uc	fixed bin(71),	/* Microsecond in calendar value     */
				/*  (eg, 0 = 0001-01-01m)	       */
      2 za	char (5),		/* Zone abbreviation	       */
      2 zone_index	fixed bin,	/* Index in time_table_$zone_names,  */
				/*  of zone in which time expressed  */
      2 leap_year	fixed bin,	/* 1- this is a leap year	 [OUT] */

     Ptime_value	ptr,
     Vtime_value_3	char(8) int static options(constant) init("timeval3");

/* END OF*	time_value.incl.pl1	  *  *  *  *  *  *  *  *   */
