/* BEGIN INCLUDE FILE ... tp_input_queue.incl.pl1 */

/* Revised 9-Jan-79 by M. N. Davidoff
   Modified 13-Aug-79 by M. N. Davidoff to add NO_CALL_CONV_EP_ABORT, NO_COMMAND_ABORT and NO_TEST_MODE_ABORT. */

/* automatic */

     declare transaction_record_buffer_length
			      fixed binary (21);
     declare transaction_record_ptr pointer;

/* based */

     declare 1 transaction_record   aligned based (transaction_record_ptr),
	     2 in_progress_lock   bit (36),		/* locked by worker when trying the transaction */
	     2 completion_status  fixed binary (17),	/* how transaction finished */
	     2 transaction_no     fixed decimal (30),	/* TP subsystem's transaction number */
	     2 deadline	      fixed binary (71),	/* deadline of this transaction */
	     2 tp_user_id	      char (32) unaligned,	/* tp_user who entered this transaction */
	     2 user_index	      fixed binary (17),	/* user table index of tp_user_id */
	     2 flags	      unaligned,
	       3 test_mode	      bit (1),		/* transaction was entered in test mode */
	       3 pad	      bit (35),
	     2 meters,
	       3 io_process_name  char (32) unaligned,	/* I/O process that accepted the transaction */
	       3 worker_process_name
			      char (32) unaligned,	/* worker process that did the transaction */
	       3 time_queued      fixed binary (71),	/* time transaction was queued */
	       3 xcn_start_time   fixed binary (71),	/* time transaction was started */
	       3 xcn_finish_time  fixed binary (71),	/* time transaction finished */
	       3 tpr_cpu	      fixed binary (71),	/* virtual cpu time used by TPR including retries */
	       3 tpr_page_faults  fixed binary (17),	/* page faults taken by TPR including retries */
	       3 retries	      fixed binary (17),	/* how many times the TPR was called */
	     2 command_name	      char (32) unaligned,	/* command user typed */
	     2 buffer_length      fixed binary (21),	/* length of buffer */
	     2 buffer	      char (transaction_record_buffer_length refer (transaction_record.buffer_length))
			      unaligned;		/* input without command name */

/* internal static */

     declare INPUT_QUEUE_IO_SWITCH_NAME
			      char (15) internal static options (constant) initial ("tp_input_queue_");
     declare INPUT_QUEUE_NAME	      char (8) internal static options (constant) initial ("tp.tpinq");
     declare INPUT_QUEUE_SUFFIX     char (5) internal static options (constant) initial ("tpinq");
     declare INPUT_QUEUE_TRANSACTION_MODE_IO_SWITCH_NAME
			      char (26) internal static options (constant) initial ("tp_input_queue_trans_mode_");
     declare IQ_KEY_SEPARATOR	      char (1) internal static options (constant) initial ("$");
     declare MAX_TRANSACTION_RECORD_BUFFER_LENGTH
			      fixed binary (21) internal static options (constant) initial (2048);

/* transaction completion status codes */

     declare INCOMPLETE	      fixed binary internal static options (constant) initial (0);
     declare NORMAL		      fixed binary internal static options (constant) initial (1);
     declare ERROR_ABORT	      fixed binary internal static options (constant) initial (2);
     declare RETRY_ABORT	      fixed binary internal static options (constant) initial (3);
     declare CPU_TIME_ABORT	      fixed binary internal static options (constant) initial (4);
     declare REAL_TIME_ABORT	      fixed binary internal static options (constant) initial (5);
     declare TEST_MODE_ABORT	      fixed binary internal static options (constant) initial (6);
     declare COMMAND_LINE_ABORT     fixed binary internal static options (constant) initial (7);
     declare NO_CALL_CONV_EP_ABORT  fixed binary internal static options (constant) initial (8);
     declare NO_COMMAND_EP_ABORT    fixed binary internal static options (constant) initial (9);
     declare NO_COMMAND_ABORT	      fixed binary internal static options (constant) initial (10);
     declare NO_TEST_MODE_ABORT     fixed binary internal static options (constant) initial (11);
     declare CANCEL_ABORT	      fixed binary internal static options (constant) initial (12);

/* input queue key prefixes */

     declare UNPROCESSED_KEY_PREFIX char (5) internal static options (constant) initial ("Input");
     declare NORMAL_COMPLETION_KEY_PREFIX
			      char (4) internal static options (constant) initial ("Done");
     declare RETRY_ABORT_KEY_PREFIX char (5) internal static options (constant) initial ("Retry");
     declare TEST_MODE_ABORT_KEY_PREFIX
			      char (9) internal static options (constant) initial ("Test_mode");
     declare ALL_ERROR_ABORTS_KEY_PREFIX
			      char (6) internal static options (constant) initial ("Errors");

/* completion_status to key_prefix array */

     declare INPUT_QUEUE_KEY_PREFIX (0:12) char (12) varying internal static options (constant)
			      initial ("Input", "Done", "Errors", "Retry", "Errors", "Errors", "Test_mode", "Errors",
			      "Errors", "Errors", "Errors", "Errors", "Errors");

/* what each completion status code means */

     declare completion_status_meanings
			      (0:12) char (40) internal static options (constant)
			      initial ("unprocessed", "finished", "finished with an error", "retry limit exceeded",
			      "cpu time limit exceeded", "real time limit exceeded", "finished in test mode",
			      "command line error", "call convention entry point not found",
			      "command entry point not found", "unknown command", "test mode was unavailable",
			      "canceled");

/* END INCLUDE FILE ... tp_input_queue.incl.pl1 */
