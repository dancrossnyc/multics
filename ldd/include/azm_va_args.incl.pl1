/*  START OF:	azm_va_args.incl.pl1		  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/* This is a structure for argument processing of virtual addresses (VAs) and its related arguments. 
   These related arguments can be a an offset modifier EXP which can be a positive or negative
   octal number and a RANGE can be specified. Both EXP and RANGE are optional arguments. The VA
   must always be specified. These three args are non-positional on the request line but there
   is an implicit order among the three. The first non-control argument on the request line must be 
   a VA. The second non-control argument on the request line can be a EXP or a RANGE. If it is a 
   RANGE then an EXP cannot be specified. In other words, a EXP must follow a VA.
*/

/* Created: 22 MAY 84 by BLB */

dcl 1 va_args			aligned,
					/* fully resolved segment number of the virtual address  */
      2 segno			fixed bin (18) aligned, 
					/* fully resolved offset of the virtual address  */
      2 offset			fixed bin(18) unaligned,
					/* offset modifier (+N, -N) of the virtual address  */
      2 offset_modifier		fixed bin(18),
					/* The range of the addr area specified  */
      2 range			fixed bin(18) unaligned,
      2 va_switches			unaligned,
        3 valid_va			bit (1) unaligned,	/* on if valid virtual address		*/
        3 valid_modifier		bit (1) unaligned,  /* on if valid offset modifier		*/
        3 valid_range		bit (1) unaligned,	/* on if valid range			*/
        3 modifier_before_indirect      bit(1) unaligned,  /* on if the offset modifier is specified */ 
						/* before indirection eg. A|B+10,*		*/
        3 va_pad			bit (32) unaligned, /* must be zero 				*/
      2 va_position			aligned,            /* index into the argument list for: 		*/
        3 va_idx			fixed bin,          /* virtual address				*/
        3 mod_idx			fixed bin,	/* the offset modifier index			*/
        3 range_idx			fixed bin,	/* the range argument index			*/
      2 resolved_va			ptr,		/* The resolved virtual address		*/
      2 ecode			fixed bin(35),	/* error code				*/
      2 error_msg			char(80) var,	/* error message				*/
      2 va_string			char(256) var;	/* The complete virtual address after parsing thru the args. */

dcl 1 va				based (va_args_ptr) like va_args;
dcl va_args_ptr			ptr;

/*  END OF:	azm_va_args.incl.pl1		  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
