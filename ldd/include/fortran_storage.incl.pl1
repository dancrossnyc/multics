/* BEGIN include file fortran_storage.incl.pl1 */

/* Created 82-09-21 by T. Oke (UNCA) */

/* Modification History:

Modified:  1 October 1982, TO - add pointer_count and pointer entries.
Modified:  9 November 1982, TO - Move pointer_count, add common_link.
*/

/* Definitions of the structures controlling the creation of and initialization
   lists for fortran_storage_driver. */

/* For VLA entries there may be a number of pointers, each of which points to a
   single VLA entity within the VLA.  Each such pointer supplies an offset and
   is stored by 'fortran_storage_'.

   For VLA COMMON, there is a pointer to the link in the linkage section.  The
   unsnapped link (which is in the template linkage section) supplies an offset
   to find the expression_word in the definition section, which offsets to the
   type_pair, which supplies the initialization information. */

dcl 1 create_entry based,				/* creation list entry */
      2 location fixed bin (18) unsigned unaligned,	/* location of base */
      2 flags unaligned structure,
        3 auto bit (1) unaligned,			/* automatic storage entry */
        3 static bit (1) unaligned,			/* static storage entry */
        3 common bit (1) unaligned,			/* common storage entry */
        3 LA bit (1) unaligned,			/* Large Array (255K) */
        3 VLA bit (1) unaligned,			/* Very Large Array (>255K) */
        3 K256 bit (1) unaligned,			/* alloc 256K segs */
        3 init bit (1) unaligned,			/* initialized */
        3 pad bit (2) unaligned,			/* FUTURE EXPANSION */
        3 pointer_count fixed bin (9) unsigned unaligned,	/* number of pointers to fill in */
      2 length fixed bin (24) aligned,			/* number of words required */
      2 next fixed bin (18) unsigned unaligned,		/* offset to next create entry */
      2 name_length fixed bin (17) unaligned,		/* size of block name field */
      2 common_link fixed bin (18) unsigned unaligned,	/* location of link if COMMON */

      2 block_name char (0 refer (create_entry.name_length)),
      2 pointer_offsets (0 refer (create_entry.pointer_count)) aligned,
        3 pad bit (12) unaligned,
        3 offset fixed bin (24) unsigned unaligned;

/* Pointers will be created for each VLA sub-entity, so the pointer_count field
   indicates how many pointers follow the block_name. */




/* Initialization data.  The length and datum are bit items, to permit a wide
   range of inputs.

   1. A 'repeat' of '0' signifies skipping of 'length' bits.
   2. A 'length' of '0' signifies the last item of the list.

   COMMON, VLA's, and LA's, are presumed to start at the base pointer of their
   particular storage section. */


dcl 1 create_init_entry based,
      2 length fixed bin (35) aligned,		/* size of datum */
      2 pad bit (6) unaligned,		/* FUTURE EXPANSION */
      2 repeat fixed bin (30) unsigned unaligned,	/* number of times to repeat datum */
      2 datum bit (0 refer (create_init_entry.length));


/* END include file fortran_storage.incl.pl1 */
