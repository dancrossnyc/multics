/*  START OF:	dm_fast_lock_strucs.incl.pl1 ... June 1982   *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/* DESCRIPTION:
   There is a fast_lock_block per segment to be locked.  There is a
   fast_lock_wakeup_block per waiter on the lock.  The fast*block's are
   taken from the fast_lock_data.list, which is a list of lock_list_block's.
*/

/* HISTORY:
Written by J. Bongiovanni, 06/15/82.
Modified:
10/12/84 by Stanford S. Cox:  Added version constants.
11/14/84 by Stanford S. Cox:  Chg to make fast_lock_data.free_list_head
   like lock_list_head.
*/

/* format: style2,^inddcls,ifthenstmt,ifthendo,^indnoniterdo,^inditerdo,ind3,idind32 */
dcl     fast_lock_ptr		ptr;
dcl     fast_lock_block_ptr		ptr;
dcl     fast_lock_wakeup_block_ptr	ptr;
dcl     fast_lock_data_ptr		ptr;

dcl     FAST_LOCK_DATA_VERSION_1	char (8) aligned init ("fastlk 1") int static options (constant);

dcl     1 fast_lock			aligned based (fast_lock_ptr),
						/* A fast lock */
	2 lock_word		bit (36) aligned,	/* "0"b (unlocked) or processid (locked) */
	2 notify_sw		bit (1) unal,	/* ON => notify on unlock */
	2 pad			bit (17) unal,
	2 offset			bit (18) unal;	/* Offset of block in fast_lock_data */


dcl     1 fast_lock_block		aligned based (fast_lock_block_ptr),
						/* Per-lock info, inner-ring */
	2 uid			bit (36) aligned,	/* Unique ID of segment */
	2 offset			bit (18) unal,	/* Offset of lock in segment */
	2 pad			bit (18) unal,
	2 list_head		bit (18) unal,	/* Thread pointer for wakeups */
	2 mbz			bit (18) unal,
	2 pad1			bit (36) aligned;


dcl     1 fast_lock_wakeup_block	aligned based (fast_lock_wakeup_block_ptr),
						/* Notify info */
	2 event_channel		fixed bin (71),
	2 processid		bit (36) aligned,
	2 message			char (4);

dcl     1 fast_lock_data		aligned based (fast_lock_data_ptr),
	2 version			char (8),
	2 size			fixed bin,
	2 n_list_entries		fixed bin,
	2 free_list_head		aligned like lock_list_head,
	2 list			fixed bin (71) aligned;

/*  END OF:	dm_fast_lock_strucs.incl.pl1		  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
