	/*  START OF:	lex_descriptors_.incl.pl1	  *  *  *  *  *  *  */
	
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
	/*							*/
	/* Name:  lex_descriptors_.incl.pl1				*/
	/*							*/
	/*      This include segment defines the structure of the token	*/
	/* descriptor, statement descriptor, and comment descriptor created	*/
	/* by the lex_string_ program.				*/
	/*							*/
	/* Status:						*/
	/*							*/
	/* 0) Created:  Dec, 1973 by G. C. Dixon			*/
	/*							*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
	
	
	
	
     dcl	
	1 comment			aligned based (Pcomment),
						/* descriptor for a comment.			*/
	  2 group1		unaligned,
	    3 version		fixed bin(17),	/* comment descriptor version.		*/
	    3 size		fixed bin(17),	/* comment descriptor size (in words).		*/
	  2 Pnext			ptr unal,		/* ptr to next comment descriptor.		*/
	  2 Plast			ptr unal,		/* ptr to last comment descriptor.		*/
	  2 Pvalue		ptr unal,		/* ptr to comment.				*/
	  2 Lvalue		fixed bin(18),	/* length of comment.			*/
	  2 group2		unaligned,
	    3 line_no		fixed bin(17),	/* line no of line containing comment.		*/
	    3 S,					/* switches:				*/
	      4 before_stmt		bit(1),		/* comment is before 1st token of stmt.		*/
	      4 contiguous		bit(1),		/* no tokens between this and last comment.	*/
	      4 pad		bit(16),
	comment_value		char(comment.Lvalue) based (comment.Pvalue),
						/* body of comment.				*/
	Pcomment			ptr;		/* ptr to comment descriptor.			*/
	
     dcl	
	1 stmt			aligned based (Pstmt),
						/* descriptor for a statement.		*/
	  2 group1		unaligned,
	    3 version		fixed bin(17),	/* statement descriptor version.		*/
	    3 size		fixed bin(17),	/* statement descriptor size (in words).	*/
	  2 Pnext			ptr unal,		/* ptr to next statement descriptor.		*/
	  2 Plast			ptr unal,		/* ptr to last statement descriptor.		*/
	  2 Pvalue		ptr unal,		/* ptr to statement.			*/
	  2 Lvalue		fixed bin(18),	/* length of statement.			*/
	  2 Pfirst_token		ptr unal,		/* ptr to 1st token of statement.		*/
	  2 Plast_token		ptr unal,		/* ptr to last token of statement.		*/
	  2 Pcomments		ptr unal,		/* ptr to comments in statement.		*/
	  2 Puser			ptr unal,		/* user-defined ptr.			*/
	  2 group2		unaligned,
	    3 Ntokens		fixed bin(17),	/* number of tokens in statement.		*/
	    3 line_no		fixed bin(17),	/* line no of line on which statement begins.	*/
	    3 Istmt_in_line		fixed bin(17),	/* number of stmts in line containing this stmt.	*/
						/* (the number includes this stmt.)		*/
	    3 semant_type		fixed bin(17),	/* semantic type of the statement.		*/
	    3 S,					/* switches:				*/
	      4 error_in_stmt	bit(1),		/* stmt contains a syntactic error.		*/
	      4 output_in_err_msg	bit(1),		/* stmt has been output in previous error message.*/
	      4 pad		bit(34),
	stmt_value		char(stmt.Lvalue) based (stmt.Pvalue),
						/* text of the statement.			*/
	Pstmt			ptr;		/* ptr to a stmt descriptor. 			*/
	
     dcl	
	1 token			aligned based (Ptoken),
						/* descriptor for a token.			*/
	  2 group1		unaligned,
	    3 version		fixed bin(17),	/* token descriptor version.			*/
	    3 size		fixed bin(17),	/* token descriptor size (in words).		*/
	  2 Pnext			ptr unal,		/* ptr to next token descriptor.		*/
	  2 Plast			ptr unal,		/* ptr to last token descriptor.		*/
	  2 Pvalue		ptr unal,		/* ptr to token.				*/
	  2 Lvalue		fixed bin(18),	/* length of token.				*/
	  2 Pstmt			ptr unal,		/* ptr to descriptor of stmt containing token.	*/
	  2 Psemant		ptr unal,		/* ptr to descriptor(s) of token's semantic value.*/
	  2 group2		unaligned,
	    3 Itoken_in_stmt	fixed bin(17),	/* position of token within its statement.	*/
	    3 line_no		fixed bin(17),	/* line number of the line containing the token.	*/
	    3 Nvalue		fixed bin(35),	/* numeric value of decimal-integer tokens.	*/
	    3 S,					/* switches:				*/
	      4 end_of_stmt		bit(1),		/* token is an end-of-stmt token.		*/
	      4 quoted_string	bit(1),		/* token is a quoted string.			*/
	      4 quotes_in_string	bit(1),		/* on if quote-close delimiters appear in quoted	*/
						/* string (as doubled quotes on input.)		*/
	      4 quotes_doubled	bit(1),		/* on if quotes in the string are doubled after	*/
						/* string has been lexed into a token.		*/
	      4 pad2		bit(32),
	token_value		char(token.Lvalue) based (token.Pvalue),
						/* value of the token.			*/
	Ptoken			ptr;		/* ptr to a token descriptor.			*/

	/*  END OF:	lex_descriptors_.incl.pl1	  *  *  *  *  *  *  */
