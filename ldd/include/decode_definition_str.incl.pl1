/* BEGIN INCLUDE FILE ... decode_definition_str.incl.pl1

   describes the output structures used by decode_definition
   James R. Davis 25 Mar 79 */

dcl 1 decode_definition_common_header based aligned,
     2 next_def	      ptr,		/* to next def in list */
     2 prev_def	      ptr,		/* to previous def in list */
     2 block_ptr	      ptr,		/* to either defblock or segname */
     2 section	      char (4) aligned,	/* "text", "link", "symb", "segn" */
     2 offset	      fixed bin,		/* if section isnt "segn", offset of def in section */
     2 entrypoint	      fixed bin;		/* if entrypoint non0 offset of entry in text section */

dcl 1 decode_definition_str based aligned,	/* for callers of decode_definition_ */
     2 header	      like decode_definition_common_header,
     2 symbol	      char (32) aligned;	/* for symbolic name */

dcl 1 decode_definition_full based aligned,	/* for callers of decode_definition_$full */
     2 header	      like decode_definition_common_header,
     2 symbol	      char (256) aligned,	/* symbolic name */
     2 symbol_lng	      fixed bin,		/* actual length of the symbol */
     2 flags,				/* same as in definition */
       3 new_format	      bit (1) unal,		/* def is in new format */
       3 ignore	      bit (1) unal,		/* linker should ignore this def */
       3 entrypt_flag     bit (1) unal,		/*  this def is for an entrypoint */
       3 retain	      bit (1) unal,
       3 arg_count	      bit (1) unal,		/* there is an arg count for entry */
       3 desc_sw	      bit (1) unal,		/* there are descriptors */
       3 unused	      bit (30) unal,
     2 nargs	      fixed bin,		/* number of args entry expects */
     2 desc_ptr	      ptr;		/* to array of rel ptrs to descriptors */


dcl 1 decode_definition_acc based aligned,	/* for callers of decode_cref entry */
     2 header	      like decode_definition_common_header,
     2 acc_ptr	      ptr;		/* to ACC string of symbolic name */

/* END INCLUDE FILE  decode_definition_str.incl.pl1 */
