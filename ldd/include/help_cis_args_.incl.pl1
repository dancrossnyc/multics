/*	BEGIN OF:	help_cis_args_.incl.pl1	  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

	

/****^  HISTORY COMMENTS:
  1) change(86-03-07,LJAdams), approve(86-03-07,MCR7327),
     audit(86-03-10,Lippard), install(86-04-24,MR12.0-1048):
     Changed segment type from bit(2) to fixed bin(2) uns.
  2) change(86-05-12,LJAdams), approve(86-05-14,MCR7416),
     audit(86-05-19,Gilcrease), install(86-06-12,MR12.0-1074):
     Added E as an unique identifier for entry_point name to be used during
     sorting.
  3) change(87-02-18,LJAdams), approve(87-09-03,MCR7766),
     audit(88-05-03,GDixon), install(88-09-13,MR12.2-1109):
     Added X as a sort identifier to be used when sorting via sort_items_$char
     as the original order of the records is not maintained when sorting equal
     items.
  4) change(88-03-14,LJAdams), approve(88-06-01,MCR7873),
     audit(88-05-03,GDixon), install(88-09-13,MR12.2-1109):
     Changed order of fields being sorted and added a pad field to maintain
     alignment.
                                                   END HISTORY COMMENTS */


/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* Name:	help_cis_args_.incl.pl1						*/
	/*									*/
	/* This include file declares the structures returned by help_$check_info_segs for use	*/
	/* in the check_info_segs command.  The structures contain information about the	*/
	/* segments which check_info_segs will process.  The structures are allocated in the temp	*/
	/* segment obtained in the call to help_$init.  They SHOULD NOT BE FREED.  Instead, the	*/
	/* help_$term entry should be called to release the entire temporary segment.		*/
	/*									*/
	/* Status									*/
	/*									*/
	/* 0) Created:   October, 1978	by Gary Dixon				*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

     dcl	1 Dinfo_seg		aligned based,	/* Information  about one info segment.		*/
						/* NOTE: code depends upon Scross_ref, dir and ent*/
						/*   1st, 2nd & 3rd elements of item substruc.	*/
	    3 Scross_ref		bit(36) aligned,	/*   bit 1 on if same info appears in diff. dirs.	*/
	    3 dir			char(168) unal,	/*   dir part of its pathname.		*/
	    3 ent			char(32) unal,	/*   ent part of its pathname.		*/
	    3 info_name		char(32) unal,	/*   info_name used to find info, if different	*/
						/*     from ent (without suffix).		*/
	    3 ep			char(32) var,	/*   entry point name requested in command line.	*/
	    3 uid			bit(36),		/*   unique ID of containing segment.		*/
	    3 I			fixed bin(35),
                                                  	/*   index of 1st character of the info.	*/
	    3 E                       char(32),		/*   ep name to be used for sorting		*/
              3 X                       fixed bin(35),
                                                            /*   index of original record order		*/
              3 pad2                    fixed bin(35),
	    3 L			fixed bin,	/*   length, in chars.			*/
	    3 date		fixed bin(71),	/*   date_time_entry_modified of info segment.	*/
	   (3 segment_type		fixed bin(2) uns,	/*   00 - link, 01 - segment			*/
	    3 mode		bit(3),		/*   access mode.				*/
	    3 pad1		bit(31)) unal,
	    3 code		fixed bin(35),	/*   error code encounter in processing seg.	*/
	1 PDinfo_seg		aligned based(PPDinfo_seg),
	  2 version		fixed bin,	/* Version of this return structure (= 2).	*/
	  2 N			fixed bin(24),	/* Count of info segments data returned for.	*/
	  2 P (0 refer (PDinfo_seg.N))		/* Pointers to Dinfo_seg structure for each info.	*/
				ptr unal,
	PPDinfo_seg		ptr,
	VPDinfo_seg_2		fixed bin int static options(constant) init(2);

     dcl	help_$check_info_segs	entry (char(*), ptr, char(*), fixed bin, fixed bin(35), ptr);

/*	END OF:	help_cis_args_.incl.pl1	  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
