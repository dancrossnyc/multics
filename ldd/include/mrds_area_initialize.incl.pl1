/* BEGINNING OF:  mrds_area_initialize.incl.pl1    * * * * * * * * * * * * * */

/* HISTORY:

   Created by:  Thanh Nguyen      01/15/85

 */


mrds_area_initialize:  proc (mrds_area_ptr);

/* This procedure resets the given temporary segment and initializes the offset
   and length of the free space to beginning of the segment.  Function 
   mrds_space_allocate in mrds_space_allocate.incl.pl1 must be used to allocate
   any storage into this temporary segment.
 */

          dcl     mrds_area_ptr           ptr;       /* ptr to the temporary segment. */
	dcl     MRDS_AREA               char (8) init ("MRDSAREA");

          dcl     1 mrds_area             based (mrds_area_ptr),
	          2 area_id             char (8),
		2 offset_to_free_word fixed bin (35), /* offset to the next free word in temp seg.  */
		2 length_free_space   fixed bin (35); /* length of remaining free space in temp seg.*/

          dcl     sys_info$max_seg_size   fixed bin(35) ext static;


	if mrds_area_ptr ^= null then do;
	     /* Set our identification, so we can recognize it later */
	     mrds_area.area_id = MRDS_AREA;
	     /* Start from word four right after our heading structure. */
	     mrds_area.offset_to_free_word = 4;
	     mrds_area.length_free_space = sys_info$max_seg_size - 4;
	end;
	return;

end mrds_area_initialize;

/* END OF:        mrds_area_initialize.incl.pl1    * * * * * * * * * * * * * */
