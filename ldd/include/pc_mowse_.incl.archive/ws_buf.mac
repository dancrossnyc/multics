;/* BEGIN INCLUDE FILE ws_buf.mac */

; HISTORY COMMENTS:
;  1) change(86-04-10,Westcott), approve(87-07-13,mcr7580),
;     audit(87-07-13,Leskiw), install(87-08-07,MR12.1-1072):
;     Created.
;                                                      END HISTORY COMMENTS

;/* : FUNCTION
;
;Defines macros that support circular buffers.
;*/

bstruc  struc
bsize   dw      ?       ;size of buffer
bfirst  dw      ?       ; start of buffer
blast   dw      ?       ; end of buffer
bin     dw      ?       ; next empty space in buffer
bout    dw      ?       ; next char to be removed
bminor  db      ?       ; minor capability associated
mbuffer dw      ?       ; placeholder for message
bstruc  ends

def_buf macro   bname,bufsize   ;define circular buffer
bname   bstruc  <bufsize>
        db      bufsize dup(?)
        endm

init_buf macro  bname           ; initialize circular buffer
        mov     bx, offset bname
        mov     ax, offset bname.mbuffer
        mov     bfirst[bx],ax
        mov     bin[bx],ax
        mov     bout[bx],ax
        add     ax,bname.bsize
        mov     blast[bx],ax
        endm

put_buf macro   bname,nostop    ; insert character into buffer
        push    si
        push    bx
        mov     bx,offset bname
        mov     si, bin[bx]
        mov     byte ptr ds:[si],al

;        inbuff = inbuff + 1
;        if (inbuff is at end of buffer)
;           inbuff = start of buffer

        inc     si
        cmp     si,blast[bx]
nae1    =       $
        jbe     short $+(nae2-nae1)   ;if not at end of buffer
        mov     si,bfirst[bx]
nae2    =       $

;        if (not overflow) store inbuff, clear error code, and return */
        mov     ax,1            ;set error return code, just in case
        ifb     <nostop>
        cmp     si, bout[bx]
novf1   =       $
        je      $ + (novf2 - novf1)
        endif
        mov     bin[bx],si
        xor     ax,ax           ;set return code
novf2   =       $
        pop     bx
        pop     si
        endm

get_buf macro   bname           ; get character from buffer
        push    si
        push    bx
        mov     bx, offset bname
        mov     si,bout[bx]
        cmp     si,bin[bx]
bemp1   =       $
        je      $ + (bemp2 - bemp1)

;/* : if (buffer not empty) get character into AX */

        mov     al,byte ptr ds:[si]

;/* : outbuff = outbuff + 1
;     if (outbuff = end of buffer) outbuff = start of buffer */

        inc     si
        cmp     si,blast[bx]
nae3    =       $
        jbe     $ + (nae4 - nae3)
        mov     si,bfirst[bx]
nae4    =       $
        mov     bout[bx],si
        stc             ; SET carry flag to indicate data available
bnemp1  =       $
        jmp     $ + (bnemp2 - bnemp1)

;/* : if (buffer empty) clear carry flag, and return */

bemp2   = $
        clc             ; CLEAR carry flag to indicate no data
bnemp2  = $
        pop     bx
        pop     si
        endm

len_buf macro   bname           ; calculate empty space in buffer
        push    bx
        mov     bx,offset bname
        mov     ax,bout[bx]
        sub     ax,bin[bx]
lb1     =       $
        ja      $ + (lb2-lb1)   ; if no wrap
        add     ax,bsize[bx]
lb2     =       $
        pop     bx
        endm

;/* END INCLUDE FILE ws_buf.mac */

