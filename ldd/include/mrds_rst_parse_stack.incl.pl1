/* BEGIN INCLUDE FILE mrds_rst_parse_stack.incl.pl1  jeg 8/8/78 */

declare 1 lex_stack (-5:50) based (lex_stack_ptr),
        2 symptr ptr,				/* pointer to terminal symbol in source input */
        2 symlen fixed binary (24),			/* length of terminal symbol in input */
        2 line fixed binary (24),			/* line number in source for this symbol */
        2 symbol fixed binary (24),			/* parser's encoding value for the terminal symbol */
        2 val fixed binary (71),			/* conversion value for numbers */
        2 float float binary (63),			/* conversion value if floating point number */
        2 line_strt ptr,				/* pointer to start of current line */
        2 line_size fixed binary (24),			/* current length of line */
        2 token_num fixed binary (24) ;			/* number of this token in current line,
						   0 if <error_symbol> for missing or wrong symbol */

declare  lex_stack_ptr ptr ;				/* pointer to lexical stack */

declare  debug_sw bit (1) static init ("0"b) ;		/* on => output debug messages */

dcl 1 p_struct (50) aligned based (p_struct_ptr),
    2 parse_stack fixed bin (24),			/* * parse stack */
    2 parse_stack2 fixed bin (24);			/* * copy of parse stack used
						   with local error recovery */

dcl  p_struct_ptr ptr ;


dcl  cur_lex_top (50) fixed bin (24) aligned based (cur_lex_top_ptr) ; /* current lex top stack (with parse_stack) */

declare  cur_lex_top_ptr ptr ;


/* END INCLUDE FILE mrds_rst_parse_stack.incl.pl1 */

