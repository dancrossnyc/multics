/* BEGIN INCLUDE FILE mrds_expressions.incl.pl1 -- jaw 2/15/79 */

/* HISTORY:

   81-06-01 Jim Gray : removed assn len and type elements
   since mu_covnert is now being used.

*/


dcl 1 expr aligned based (expr_ptr),			/* internal representation of an expression,
						   expression is stored in postfix polish form */
    2 nitems fixed bin,				/* no. items in expression */
    2 item (nexp_items_init refer (expr.nitems)),
      3 type fixed bin (3) unal,			/* 1 => data item
						   2 => operator
						   3 => scalar function */
      3 op_code fixed bin (3) unal,			/* 1 => add
						   2 => subtract
						   3 => multiply
						   4 => divide */
      3 data_type fixed bin (2) unal,			/* 1 => literal
						   2 => database */
      3 reserved bit (25) unal,
      3 desc bit (36),				/* data descriptor of data item or fun. result */
      3 loc_index fixed bin (18),			/* location index of data item or fun. result */
      3 bit_length fixed bin (18),			/* bit length of data item or fun. result */
      3 assn_ptr ptr,				/* pointer to item storage loc. */
      3 ai_ptr ptr,					/* to attr info if database item */
      3 fn_ptr ptr;					/* pointer to function structure if scalar function */

dcl  expr_ptr ptr;
dcl  nexp_items_init fixed bin;

dcl 1 scalfn aligned based (sfn_ptr),			/* internal representation of a scalar function */
    2 entry_ptr ptr,				/* pointer to entry to be called */
    2 arg_list_ptr ptr,				/* pointer to arg list to be used for calling function */
    2 rslt_desc bit (36),				/* descriptor for result */
    2 nargs fixed bin,				/* number of input args */
    2 arg (nsf_args_init refer (scalfn.nargs)),		/* arg info */
      3 type fixed bin (3) unal,			/* 1 => literal
						   2 => database
						   3 => scalar function
						   4 => expression */
      3 must_convert bit (1) unal,			/* on if arg must be converted to match requirements */
      3 reserved bit (31) unal,
      3 desc bit (36),				/* descriptor of data or result */
      3 loc_index fixed bin (18),			/* location index of data item or result */
      3 bit_length fixed bin (18),			/* bit length of data item or result */
      3 assn_ptr ptr,				/* pointer to item storage loc. */
      3 arg_desc bit (36),				/* descriptor for arg if must convert */
      3 arg_assn_ptr ptr,				/* assign_ ptr for arg in must convert */
      3 ai_ptr ptr,					/* to attr info if database item */
      3 ef_ptr ptr;					/* pointer to expression or function structure, or null */

dcl  sfn_ptr ptr;
dcl  nsf_args_init fixed bin;

dcl ((DATA init (1)),
    (OPERATOR init (2)),
    (SCAL_FUN init (3)),
    (EXPR init (4)),
    (ADD init (1)),
    (SUBT init (2)),
    (MULT init (3)),
    (DIV init (4)),
    (LITERAL init (1)),
    (DATABASE init (2))) fixed bin int static options (constant);

dcl  CFLTD59 bit (36) aligned int static options (constant)
     init ("100110000000000000000000000000111011"b);
dcl  RFLTD59 bit (36) aligned int static options (constant)
     init ("100101000000000000000000000000111011"b);

/* END INCLUDE FILE mrds_expressions.incl.pl1 */

