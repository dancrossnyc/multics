
/*
cobol_arg_descriptor: proc(in_word, out_word,out_conoff);

create an argument descriptor for a non array element.
See subsystem writers guide (volume V of the MPM)  for a
definition of the argument descriptor and a definition of the
parameters described below. The argument descriptor will
be pooled on a word boundry in the constant portion of the
text segment.

dcl	in_word bit (36);
dcl	out_word bit (36);
dcl	out_conoff	fixed bin;

 in_word	will contain the input information it the
	following bit positions. (input)
	0	always 1
	1-6	data type
	7	has a value of 1 if the data item
		is packed
	8-11	unused
	12-35	size of the data item
 out_word	will contain the word offset (from the
	logical instruction counter) of the argument
	descriptor in bits 0-17. This is a form suitable
	to be used in a machine instruction with
	IC modification. (output)
*/


/*
type9:	entry (token_ptr, out_word,out_conoff);

create an argument descriptor from a type 9 token.
See subsystem writers guide (volume V of the MPM)
for a definition of the argument descriptor. The argument
descriptor will be pooled on a word boundry in the constant
portion of the text segment.

 token_ptr is a pointer to the type 9 token (input)
 out_word	will contain the word offset (from the logical
	instruction counter) of the argument descriptor
	in bits 0-17. This is a form suitable to be used in
	a machine instruction with IC modification. (output)
*/

