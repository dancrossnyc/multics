/*  START OF:	input_history_data.incl.pl1		  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

/****^  HISTORY COMMENTS:
  1) change(2016-03-27,GDixon), approve(2016-06-12,MCR10013),
     audit(2016-06-12,Swenson):
     Initial version of data structure for the input_history_.pl1 I/O module.
  2) change(2016-05-09,GDixon), approve(2016-06-12,MCR10013),
     audit(2016-06-12,Swenson):
     Adds new elements to ihData supporting input_history_ version 2 functions.
  3) change(2016-05-16,GDixon), approve(2016-06-12,MCR10013),
     audit(2016-06-12,Swenson):
     Adds new elements to ihData supporting input_history_ version 3 functions.
                                                   END HISTORY COMMENTS */

  dcl   ihDataP ptr;
  dcl  1 ihData aligned based(ihDataP),

       2 ioModule,					/* I/O module data required by iox_.		        */
         3 history_iocbP ptr,				/* Pointer to input_history_ IOCB (often user_i/o)        */
						/*  Identifies IOCB that owns this attach data structure. */
         3 source_iocbP ptr,				/* Pointer to source (window_io_) IOCB		        */
						/*  Our stream routines use it to get/put terminal chars. */
         3 source_is_window_io_ bit(1) aligned,		/* Flag indicating source is attached to window_io_.      */
						/*  This permits adding input line editing requests to    */
						/*  search/edit/re-enter lines from the history file.     */
         3 ioModulePad fixed bin,
         3 attach_descrip char(128) var,		/* input_history_ I/O attach description.	        */
         3 open_descrip char(32) var,			/* input_history_ open description.		        */

       2 hist,					/* Captured input lines (The History)		        */

         3 attachOpt,				/* History segment description from attach options.       */
           4 path_dir char(168) unal,			/*  - directory containing this segment.	        */
           4 path_ename char(32) unal,			/*  - entryname of this segment.		        */
           4 limit_linesN fixed bin(21),		/*  - desired max lines kepts in this segment.	        */
						/*     - Actual lines may be greater, as we limit data    */
						/*       movement within segment to 1 page at a time.     */
	 4 attachOptPad fixed bin,

         3 segmentData,				/* Physical information about the history segment.        */
	 4 segLockP ptr,				/*  - history lock segment (for permanent history)        */
           4 segP ptr,				/*  - baseptr of containing history segment.	        */
           4 bc fixed bin(24),			/*  - length of this segment (in bits).		        */
           4 segL fixed bin(21),			/*  - length of this segment (in characters).	        */
           4 linesN fixed bin(21),			/*  - length of this segment (in lines).	        */
	 4 scrollableL fixed bin(21),			/*  - length of first page (in chars).                    */
						/*     Note that if final scrollable line starts on first */
						/*     page, and extends onto subsequent page(s),         */
						/*     scrollableL include all characters of this line.   */
           4 scrollable_linesN fixed bin(21),		/*  - length of first page of this segment (in lines).    */
	 4 extraLineL fixed bin(21),			/*  - if >0: length of window_io_ editor line appended    */
						/*    temporarily to History Segment.	   	        */
						/*    Should be >0 only when in our XXX_search requests.  */
	 4 flags aligned,
             5 permanent bit(1) unaligned,		/*  - TRUE = permanent history segment; FALSE = temporary */
             5 debug bit(1) aligned,			/*  - TRUE = trace operations on history segment.	        */
	   5 flags_pad bit(70) unaligned,
           
       2 edit,					/* Line editor request data saved between calls from the  */
						/* window_io_ line editor.			        */
         3 currentLine aligned like historyLinePosition,	/*  - If linesFromEnd ^= 0, then this is history line     */
						/*     when the prior editing request returned.	        */
						/*     Otherwise, it does not contain meaningful data.    */
						/*      - Each time the window_io_ line editor returns an */
						/*        input line (in iox_$get_line call), currentLine */
						/*        is reset to END_OF_HISTORY.		        */
         3 whenEditing,				/*  Data valid only which running in an editor request.   */
           4 workingLine aligned like historyLinePosition,	/*  - This is position data used while an editing         */
						/*     function runs.  It is constructed by editing fcn   */
						/*     support routines.  Just before editing function    */
						/*     returns, it is moved to currentLine. 	        */
           4 origEditorBuffer char(512) var,		/*  - Contents of line_editor_info.buffer when a history  */
						/*     editing request first used in this invocation of   */
						/*     the window line editor.  May need this to restore  */
						/*     what user started typing before deciding to look   */
						/*     back at prior input lines.  (^N eventually         */
						/*     positions beyond end of History Segment, at which  */
						/*     time this original buffer is given back to editor. */
           4 origCursorI fixed bin(21),			/*  - Cursor position in line_editor_info.buffer when     */
						/*     history edit request starts.		        */

       2 savedKeyBindingsP ptr;			/* window_io_ line editor key bindings to be restored at  */
						/*  detach time.				        */

  dcl 1 historyLinePosition,				/* Location identifier for lines in History Segment.      */
      2 linesFromEnd fixed bin(21),			/* = 0  positioned just after last line in history seg.   */
						/*      (at EOF, lineP may not be set)		        */
						/* =-1  positioned at last (possibly incomplete) line.    */
						/* =-2  positioned at 2nd-to-last,  (complete) line       */
						/*      (Lines deemed "complete" when a line(-fragment)   */
						/*       ending with NL is read via iox_$get_line.)       */
      2 lineL fixed bin(21),				/* Length of this history line (not including any NL)     */
      2 lineP ptr,					/* Pointer to start of this history line.	        */
      2 cursorI fixed bin(21),			/* Base_1 index of cursor within the line:                */
						/*   assert: 0 < cursorI <= lineL+1   (AFTER end-of-line) */
      2 matchL fixed bin(21);				/* Length of most recent matched string in this line.     */
						/*   = 0, when line reached via ^P or ^N.	        */
			    /* NOTE:  If lineI is the Base_1 index of line within entire History Segment, then  */
			    /*          assert: lineI = hist.segmentData.linesN + linesFromEnd + 1              */


  dcl 1 END_OF_HISTORY aligned int static options(constant),/* Special historyLinePosition that denotes start of a    */
      2 linesFromEnd fixed bin(21) init(0),		/*  window_io_ line editor invocation.  ih_get_line sets  */
      2 lineL fixed bin(21)	     init(0),		/*  ihData.currentLine = END_OF_HISTORY each time a line  */
      2 lineP ptr		     init(null()),		/*  (fragment) is read by the process.		        */
      2 cursorI fixed bin(21)	     init(1),
      2 matchL fixed bin(21)	     init(0);

  dcl 1 searchStackItem aligned,			/* Item in the line editor request searchStack.	        */
      2 dir fixed bin(1),				/*  - search direction: -1 = REVERSE; +1 = FORWARD        */
      2 search char(40) var,				/*  - current searchString for the incremental search.    */
      2 pos like historyLinePosition;			/*  - position after search succeeded.		        */

  dcl 1 hLockSeg aligned based (ihData.hist.segmentData.segLockP),
      2 lock_descriptor char(80),
      2 history_path char(168),
      2 lock_sentinel char(12),
      2 lock_word bit(36),
      2 lock_terminator char(28);

  dcl  hLockSegDESCRIPTOR char(80) aligned int static options(constant) 
	init("Please do not modify or delete this segment.
It contains the lock word for:
    ");
  dcl  hLockSegSENTINEL_LOCKED char(12) aligned int static options(constant) init("

   Lock:  ");
  dcl  hLockSegSENTINEL_UNLOCKED char(12) aligned int static options(constant) init("

Unlocked  ");
  dcl  hLockSegTERMINATOR char(28) aligned int static options(constant) init("
          ________________
");
/*  END OF:	input_history_data.incl.pl1		  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
