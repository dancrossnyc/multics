/* BEGIN INCLUDE FILE ... pl1_cg_dcls.incl.pl1 */

/* format: style3,idind30 */

declare	adjust_ref_count		entry (ptr, fixed bin);
declare	aq_man$check_strings	entry (fixed bin);
declare	aq_man$clear_q		entry ();
declare	aq_man$fix_scale		entry (ptr, fixed bin, fixed bin);
declare	aq_man$left_shift		entry (fixed bin (8), bit (1) aligned);
declare	aq_man$load_any_const	entry (fixed bin (24), fixed bin (2));
declare	aq_man$load_any_var		entry (ptr, fixed bin (2), fixed bin (24));
declare	aq_man$load_any_var_and_lock	entry (ptr, fixed bin (2));
declare	aq_man$load_var		entry (ptr, fixed bin (2));
declare	aq_man$lock		entry (ptr, fixed bin (2));
declare	aq_man$pad_aq		entry (fixed bin, fixed bin);
declare	aq_man$right_shift		entry (fixed bin (8), bit (1) aligned);
declare	aq_man$save_aq		entry (ptr, fixed bin);
declare	aq_man$trim_aq		entry (fixed bin);
declare	arith_op			entry (ptr, (3) ptr, (3) bit (1) aligned);
declare	assign_desc_op		entry (ptr) returns (ptr);
declare	assign_op			entry (ptr);
declare	assign_op$fix_dec_scaled	entry (ptr);
declare	assign_op$length_of_varying	entry (ptr, ptr);
declare	assign_op$to_dec_scaled	entry (ptr, ptr);
declare	assign_storage		entry (ptr);
declare	base_man$load_any_var	entry (fixed bin, ptr, bit (3) aligned);
declare	base_man$load_any_var_and_lock
				entry (fixed bin, ptr, bit (3) aligned);
declare	base_man$load_arg		entry (fixed bin, ptr, bit (3) aligned);
declare	base_man$load_arg_ptr	entry (fixed bin, ptr, fixed bin, bit (3) aligned);
declare	base_man$load_controlled	entry (fixed bin, fixed bin, bit (3) aligned);
declare	base_man$load_display	entry (fixed bin, bit (3) aligned);
declare	base_man$load_link_indirect	entry (fixed bin, bit (12) aligned, bit (3) aligned);
declare	base_man$load_linkage	entry (bit (3) aligned);
declare	base_man$load_packed	entry (ptr, fixed bin);
declare	base_man$load_stack_indirect	entry (fixed bin, bit (3) aligned);
declare	base_man$load_static	entry (bit (3) aligned);
declare	base_man$load_var		entry (fixed bin, ptr, fixed bin);
declare	base_man$load_var_and_lock	entry (fixed bin, ptr, fixed bin);
declare	base_man$lock		entry (fixed bin);
declare	base_man$store_ptr_to	entry (ptr, ptr);
declare	base_man$unlock		entry (fixed bin);
declare	base_man$update_base	entry (fixed bin, ptr, fixed bin);
declare	base_to_core		entry (fixed bin, ptr);
declare	c_a			entry (fixed bin (15), fixed bin) returns (ptr);
declare	call_op			entry (ptr) returns (ptr);
declare	cat_op			entry (ptr, (3) ptr, fixed bin);
declare	cg_error			entry (fixed bin, fixed bin);
declare	check_o_and_s		entry (ptr) returns (ptr);
declare	code_gen_			entry (char (32) var, char (3) var, char (132) var, ptr, ptr, ptr, ptr, ptr, ptr,
				fixed bin (71), fixed bin, bit (1) aligned, bit (1) aligned, bit (1) aligned,
				bit (1) aligned, bit (1) aligned, bit (1) aligned, bit (1) aligned, entry, entry,
				fixed bin (22), fixed bin, fixed bin (71), bit (1) aligned, ptr, bit (1) aligned,
				fixed bin, fixed bin (71), bit (1) aligned);
declare	code_gen_$return_bit_count	entry (fixed bin, fixed bin, fixed bin (71), fixed bin, fixed bin (71));
declare	code_generator$clean_up	entry ();
declare	combine_tests		entry (ptr, ptr);
declare	compile_block		entry (ptr);
declare	compile_block$begin_block	entry (ptr);
declare	compile_entry		entry (ptr, fixed bin (18));
declare	compile_exp		entry (ptr);
declare	compile_exp$for_test	entry (ptr);
declare	compile_exp$save		entry (ptr, ptr);
declare	compile_exp$save_exp	entry (ptr, ptr);
declare	compile_exp$save_fix_scaled	entry (ptr, fixed bin, fixed bin) returns (ptr);
declare	compile_exp$save_float_2	entry (ptr) returns (ptr);
declare	compile_formats		entry ();
declare	compile_link		entry (char (*) aligned, bit (18) aligned, fixed bin (15)) returns (fixed bin (18));
declare	compile_statement		entry (ptr);
declare	compile_statement$recover	entry ();
declare	compile_tree		entry (ptr);
declare	constant_zero		entry (ptr) returns (bit (1));
declare	convert_arithmetic		entry (ptr, ptr, bit (1) aligned, bit (1) aligned);
declare	convert_chars		entry (ptr, ptr, bit (1) aligned, bit (1) aligned);
declare	copy_temp			entry (ptr) returns (ptr);
declare	decimal_op		entry (ptr, (3) ptr, (3) bit (1) aligned);
declare	decimal_op$change_target	entry (ptr) returns (bit (1) aligned);
declare	decimal_op$get_float_temp	entry (fixed bin (24), bit (1) aligned) returns (ptr);
declare	e_v			entry (ptr, fixed bin, ptr, fixed bin, fixed bin, bit (36) aligned);
declare	e_v$l_v			entry (ptr, fixed bin, ptr, fixed bin, fixed bin, bit (36) aligned);
declare	eval_exp			entry (ptr, bit (1) aligned) returns (ptr);
declare	exp_op			entry (ptr, (3) ptr, (3) bit (1) aligned);
declare	expmac			entry (fixed bin, ptr);
declare	expmac$abs		entry (ptr, fixed bin);
declare	expmac$conditional		entry (fixed bin, ptr, (4) ptr, (4) bit (1) aligned);
declare	expmac$eis		entry (fixed bin, ptr);
declare	expmac$fill_usage		entry (fixed bin, fixed bin);
declare	expmac$interpret		entry (fixed bin, ptr, (4) ptr, (4) bit (1) aligned);
declare	expmac$many		entry (fixed bin, ptr, fixed bin);
declare	expmac$many_eis		entry (fixed bin, ptr, fixed bin);
declare	expmac$one		entry (fixed bin, ptr, fixed bin);
declare	expmac$one_eis		entry (fixed bin, ptr);
declare	expmac$two_eis		entry (fixed bin, ptr, ptr);
declare	expmac$zero		entry (fixed bin);
declare	expmac_test		entry (fixed bin, ptr, (3) ptr, (3) bit (1) aligned) returns (bit (1));
declare	fixed_to_float		entry (ptr);
declare	float_to_fixed		entry (ptr);
declare	gen_arithmetic_builtin	entry (ptr, (3) ptr, (3) bit (1) aligned, fixed bin);
declare	gen_arithmetic_call		entry (ptr, (3) ptr, (3) bit (1) aligned);
declare	gen_pl1_linkage		entry (ptr);
declare	gen_pl1_linkage$init_linkage	entry ();
declare	gen_pl1_symbol$beg_symbol	entry ();
declare	gen_pl1_symbol$end_symbol	entry ();
declare	generate_constant$bit_string	entry (bit (*) aligned, fixed bin) returns (ptr);
declare	generate_constant$char_string entry (char (*) aligned, fixed bin) returns (ptr);
declare	generate_constant$generate_constant
				entry (bit (*) aligned, fixed bin) returns (ptr);
declare	generate_constant$real_fix_bin_1
				entry (fixed bin) returns (ptr);
declare	generate_constant$relocatable entry (ptr, fixed bin, bit (1) aligned) returns (ptr);
declare	generate_definition		entry (char (*) aligned, fixed bin (3), bit (18) aligned);
declare	get_imaginary		entry (ptr) returns (ptr);
declare	get_reference		entry () returns (ptr);
declare	get_single_ref		entry (ptr) returns (ptr);
declare	get_variable		entry (ptr) returns (ptr);
declare	initialize_ext_static	entry (ptr) returns (bit (18) aligned);
declare	initialize_int_static	entry (ptr, ptr);
declare	inline_operation		entry (ptr, (3) ptr, (3) bit (1) aligned) returns (bit (1) aligned);
declare	io_op			entry (ptr);
declare	io_op$init_ps		entry ();
declare	jump_op			entry (ptr);
declare	jump_op$eval_primaries	entry (ptr);
declare	length_op			entry (ptr) returns (ptr);
declare	load			entry (ptr, fixed bin);
declare	load$for_save		entry (ptr, fixed bin);
declare	load$for_store		entry (ptr, fixed bin);
declare	load$for_test		entry (ptr, fixed bin);
declare	load$long_string		entry (ptr);
declare	load$short_string		entry (ptr, fixed bin);
declare	load_size			entry (ptr);
declare	load_size$a_or_q		entry (ptr, fixed bin);
declare	load_size$xr_or_aq		entry (ptr, bit (4) aligned);
declare	long_op			entry (ptr, fixed bin, fixed bin (15));
declare	long_op$c_or_b		entry (ptr, fixed bin, fixed bin (15));
declare	long_op$eis		entry (ptr, fixed bin, fixed bin (15));
declare	long_op$eis_operator	entry (ptr, ptr, fixed bin (15));
declare	long_op$extend_stack	entry (ptr, fixed bin (15));
declare	long_op$io		entry (ptr, fixed bin (15));
declare	long_op$no_size		entry (ptr, fixed bin (15));
declare	long_op$one_eis		entry (ptr, fixed bin, fixed bin (15));
declare	long_op$two_eis		entry (ptr, fixed bin, fixed bin (15), ptr);
declare	long_op$with_arg		entry (ptr, fixed bin, fixed bin (15), ptr);
declare	m_a			entry (ptr, bit (2) aligned);
declare	make_both_addressable	entry (ptr, ptr, bit (1) aligned);
declare	make_n_addressable		entry (ptr, fixed bin);
declare	make_mod			entry (fixed bin, fixed bin) returns (fixed bin);
declare	min_max			entry (ptr);
declare	move_data			entry (ptr);
declare	move_data$move_block	entry (ptr, ptr, fixed bin);
declare	mst$block_nodes		entry (ptr, fixed bin (18)) returns (fixed bin (18));
declare	mst$data_nodes		entry (ptr, fixed bin (18)) returns (fixed bin (18));
declare	name_assign		entry (char (*) aligned) returns (bit (18) aligned);
declare	need_temp			entry (ptr, bit (2) aligned);
declare	optimize_if		entry (ptr);
declare	picture_op		entry (ptr);
declare	pointer_builtins		entry (ptr, bit (1) aligned);
declare	power_of_two		entry (fixed bin (18)) returns (fixed bin (18));
declare	prepare_operand		entry (ptr, fixed bin, bit (1) aligned) returns (ptr);
declare	save_value		entry (ptr);
declare	set_indicators		entry (ptr, ptr, ptr, fixed bin) returns (fixed bin (1));
declare	stack_temp$assign_aggregate	entry (ptr);
declare	stack_temp$assign_block	entry (ptr, fixed bin);
declare	stack_temp$assign_return_value
				entry (ptr);
declare	stack_temp$assign_temp	entry (ptr);
declare	stack_temp$free_aggregates	entry ();
declare	stack_temp$free_temp	entry (ptr);
declare	state_man$create_ms		entry (ptr);
declare	state_man$discard_ms	entry ();
declare	state_man$erase_reg		entry (bit (19) aligned);
declare	state_man$erase_temps	entry ();
declare	state_man$flush		entry ();
declare	state_man$flush_address	entry (ptr);
declare	state_man$flush_ref		entry (ptr);
declare	state_man$flush_sym		entry (ptr);
declare	state_man$merge_ms		entry (ptr);
declare	state_man$save_ms		entry (ptr, bit (1) aligned);
declare	state_man$set_aliasables	entry (ptr);
declare	state_man$unlock		entry ();
declare	state_man$update_ref	entry (ptr);
declare	state_man$update_reg	entry (ptr, bit (19) aligned);
declare	store			entry (ptr);
declare	store$all_ones		entry (ptr);
declare	store$all_zeros		entry (ptr);
declare	store$force		entry (ptr);
declare	store$save_string_temp	entry (ptr);
declare	store_bit_address		entry (ptr, ptr, fixed bin (18));
declare	string_op			entry (ptr, (3) ptr, fixed bin (15));
declare	string_temp		entry (ptr, ptr, ptr) returns (ptr);
declare	xr_man$add_any_const	entry (fixed bin (18), fixed bin, fixed bin);
declare	xr_man$load_any_const	entry (fixed bin (18), fixed bin);
declare	xr_man$load_any_var		entry (ptr, fixed bin, fixed bin (18));
declare	xr_man$load_any_var_and_lock	entry (ptr, fixed bin, fixed bin (18));
declare	xr_man$load_const		entry (fixed bin (18), fixed bin);
declare	xr_man$load_var		entry (ptr, fixed bin);
declare	xr_man$lock		entry (ptr, fixed bin);
declare	xr_man$super_lock		entry (fixed bin);
declare	xr_man$super_unlock		entry (fixed bin);
declare	xr_man$unlock		entry (fixed bin);
declare	xr_man$update_xr		entry (ptr, fixed bin);

/* END INCLUDE FILE ... pl1_cg_dcls.incl.pl1 */
