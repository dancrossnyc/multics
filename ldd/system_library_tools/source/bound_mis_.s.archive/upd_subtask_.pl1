/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


upd_subtask_:	procedure (ctlw, areap, parentp, acode, asev, taskp, seqno, listp, temp)
		options ( rename (( alloc_, smart_alloc_)) );


/*

	This procedure is the subtask dispatcher for the Multics Online Updater.
	If the task list supplied at "listp" is not empty, upd_subtask_ will add
	a task call to itself to the task list, specifying a lower-level sublist,
	will establish a condition handler for the "thread_task_" condition, which
	will cause all subtasks generated while processing the task list to be
	inserted into this sublist, and will call upd_task_ to invoke all tasks
	in the list.  The control word is masked to eliminate all immediate-call
	bits for subtasks.

	P. Bos, June 1972

*/

     dcl	ctlw			bit(36) aligned,	/* task control word */
	areap			ptr,		/* pointer to caller area */
	parentp			ptr,		/* pointer to caller's arglist */
	acode			fixed bin(35),	/* status code (not used here) */
	asev			fixed bin,	/* severity code (not used here) */
	taskp			ptr,		/* task pointer for this call */
	seqno			fixed bin,	/* task sequence number for all upd_subtask_ tasks */
	listp			ptr,		/* pointer to first task in list to be processed */
	temp			ptr;		/* pointer to "t" structure (initially null) */

     dcl	condition_		entry (char(*), entry),
	cu_$arg_list_ptr		entry (ptr),
	upd_add_task_		entry (char(*), ptr),
	upd_gen_call_		entry (ptr, ptr),
	upd_task_			entry (bit(1), ptr, entry, ptr);

     dcl	upd_subtask_		entry (bit(36) aligned, ptr, ptr, fixed bin(35), fixed bin, ptr, fixed bin,
				ptr, ptr);

     dcl (addr, null)		builtin;

     dcl (argp, cp, tp)		ptr;		/* arglist pointer, control word pointer, temp copy */

     dcl	xctl			bit(36) aligned;	/* subtask control word */

     dcl	area			area based (areap);	/* caller-supplied area */

     dcl	1 c			aligned based (cp),	/* exploded control word */
	 (2 rsw			bit(1),		/* non-zero if in reverse mode */
	  2 tasksw		bit(1),		/* non-zero if to set up task */
	  2 compsw		bit(1),		/* non-zero if compile-only task */
	  2 runsw			bit(1),		/* non-zero if call to be processed immediately */
	  2 trunsw		bit(1),		/* non-zero if subtask list to be processed */
	  2 logsw			bit(1),		/* non-zero if in print mode */
	  2 errsw			bit(1)) unal;	/* non-zero if to print error tasks only */

/**/

     dcl	1 t			aligned based (tp),	/* super-static storage */
	 (2 argp			ptr,		/* copy of "argp" */
	  2 taskp			ptr,		/* task pointer for subtask */
	  2 listp			ptr,		/* task sublist pointer */
	  2 temp			ptr) init (null),	/* "temp" for subtask */
	  2 subsw			bit(1) aligned init ("0"b);	/* non-zero if subtask allocated */


/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


	call cu_$arg_list_ptr (argp);			/* get arglist pointer */
	cp = addr (ctlw);				/* and control word pointer */
	if c.tasksw then				/* is this allocate call? */
	     call upd_add_task_("upd_subtask_", argp);	/* yes, go make a task */
	if temp = null then do;			/* have we gotten temps yet? */
	     allocate t in (area);			/* no, go do it */
	     temp = tp;				/* and have caller save pointer for us */
	     end;
	else					/* yes we did */
	     tp = temp;				/* restore pointer */

	xctl = ctlw & "10101"b;			/* mask unwanted bits from control word */
	if (xctl & "00101"b) then do;			/* anything left? */
	     t.argp = argp;				/* yes, put arglist pointer in static */
	     if ^t.subsw then if listp ^= null then do;	/* need to allocate subtask? */
		call upd_subtask_("01"b, areap, t.argp, acode, asev, t.taskp, seqno, t.listp, t.temp);
		t.subsw = "1"b;			/* don't keep doing it */
		end;
	     call condition_("thread_task_", thread_task);	/* set up somebody to catch generated tasks */
	     call upd_task_(c.rsw, listp, upd_gen_call_, addr (xctl));	/* process list */
	     end;

	return;					/* finished */


/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


thread_task:	procedure (mcp, name, wcp, taskp, csw);	/* handler for "thread_task_" condition */


     dcl	mcp			ptr,		/* machine condition pointer */
	name			char(*),		/* condition name */
	wcp			ptr,		/* wall-crossing pointer */
	taskp			ptr,		/* "info_ptr", points to allocated task */
	csw			bit(1) aligned;	/* continue switch */

     dcl	upd_thread_task_		entry (ptr, ptr);


	call upd_thread_task_(t.listp, taskp);		/* thread task onto current list */
	return;					/* that's all */

	end thread_task;


	end upd_subtask_;
