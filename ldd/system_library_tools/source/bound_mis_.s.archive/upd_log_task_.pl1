/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


upd_log_task_:	procedure;


     dcl						/*	automatic variables			*/
	Ldir			fixed bin,	/* length of the non-blank part of dir.		*/
	Llog_name			fixed bin,	/* length of the non-blank part of log_name.	*/
	Plock			ptr,		/* ptr to the lock segment.			*/
	Stype			fixed bin(2),	/* type of found installation log;  1 = segment,	*/
						/* 2 = directory, 3 = MSF.			*/
	bitc			fixed bin(24),
	bitct			fixed bin(24),	/* bit count */
	code			fixed bin(35),	/* a status code.				*/
	dir			char(168) aligned,	/* directory part of log_name (absolute) path	*/
	dummy_code		fixed bin(35),	/* dummy code value 			*/
	e			fixed bin,	/* entry variable		 		*/
	entry			char(32) aligned,	/* entry part of log_name (absolute) path	*/
	lock_seg			char(32) aligned,	/* entry part of properly-suffixed lock seg path.	*/
	log_file			char(32) aligned,	/* entry part of found log file's path.		*/
	log_name			char(168),	/* relative or absolute path of installation log	*/
	mode			fixed bin(5),	/* installer's access mode to found log.	*/
	p			ptr,
	path			char(168) aligned,	/* absolute path name of found installation log.	*/
	status_code		bit(72) aligned,	/* an IO system status code.			*/
	time			fixed bin;	/* time (in sec) we will wait for lock to unlock	*/

     dcl						/*	based variables			*/
	1 lock			based (Plock),	/* structure of the lock segment.		*/
	  2 word			bit(36) aligned,	/* the lock word.				*/
	  2 process_group_id	char(32) aligned,	/* installer who has locked the lock.		*/
	  2 program		char(65) aligned,	/* the program he is running which did the locking*/
	1 status			based (addr (status_code)),
						/* overlay for the IO status code.		*/
	  2 code			fixed bin(35);	/* for file_; this is a regular status code.	*/

     dcl  1 acl aligned,				/*  acl structure				*/
	 2  userid char (32),			/* user id				*/
	 2  mode bit(36),				/* access mode				*/
	 2  pad bit(36) init ("0"b),			/* padding				*/
	 2  code fixed bin (35);			/* error code				*/

     dcl  1 diracl aligned,				/* directory acl structure			*/
	 2  userid char (32),			/* user					*/
	 2  dir_mode bit (36),			/* bits 1-3 are "sma"			*/
	 2  code fixed bin (35);			/* error code				*/

     dcl						/* 	entries and builtin functions		*/
	addr			builtin,
	expand_path_		entry (ptr, fixed bin, ptr, ptr, fixed bin(35)),
	get_group_id_		entry returns (char(32) aligned),
	get_group_id_$tag_star	entry returns (char(32) aligned),
	hcs_$add_acl_entries	entry (char(*) aligned, char(*) aligned, ptr, fixed bin, fixed bin(35)),
	hcs_$add_dir_acl_entries	entry (char(*) aligned, char(*) aligned, ptr, fixed bin, fixed bin(35)),
	hcs_$initiate_count		entry ( char(*) aligned, char(*) aligned, char(*) aligned,
				     fixed bin(24), fixed bin(2), ptr, fixed bin(35) ),
	hcs_$make_seg		entry (char(*) aligned, char(*) aligned, char(*) aligned, fixed bin(5),
				       ptr, fixed bin(35)),
	hcs_$terminate_noname	entry (ptr, fixed bin(35)),
	index			builtin,
	ios_$attach		entry (char(*) aligned, char(*) aligned, char(*) aligned, char(*) aligned,
				       bit(72) aligned),
	ios_$detach		entry (char(*) aligned, char(*) aligned, char(*) aligned, bit(72) aligned),
	mod			builtin,
	null			builtin,
	set_lock_$lock		entry (bit(36) aligned, fixed bin, fixed bin(35)),
	set_lock_$unlock		entry (bit(36) aligned, fixed bin(35)),
	substr			builtin,
	suffixed_name_$find		entry (char(*) aligned, char(*) aligned, char(*) aligned, char(32) aligned,
				       fixed bin(2), fixed bin(5), fixed bin(35)),
	suffixed_name_$new_suffix	entry (char(*) aligned, char(*) aligned, char(*) aligned, char(32) aligned,
				       fixed bin(35)),
	upd_print_err_		entry options (variable);

     dcl						/*	static variables			*/
	directory			fixed bin(2) int static init (2),
	error_table_$dirseg		fixed bin(35) ext static,
	error_table_$file_is_full	fixed bin(35) ext static,
	error_table_$incorrect_access	fixed bin(35) ext static,
	error_table_$invalid_lock_reset
				fixed bin(35) ext static,
	error_table_$locked_by_this_process
				fixed bin(35) ext static,
	error_table_$lock_wait_time_exceeded
				fixed bin(35) ext static,
	error_table_$moderr		fixed bin(35) ext static,
	error_table_$namedup	fixed bin(35) ext static,
	error_table_$noentry	fixed bin(35) ext static,
	error_table_$segknown	fixed bin(35) ext static,
	msf			fixed bin(2) int static init (3),
	proc			char (32) aligned int static init ("upd_log_task_");
	
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


lock:	entry (log_name, code);

	e = 1;
	go to COMMON;

unlock:	entry ( log_name, code);

	e = 2;

COMMON:
	Llog_name = mod (index (log_name, " ")+168, 169);	/* get length of non-blank part of log name path.	*/
	call expand_path_ (addr (log_name), Llog_name, addr (dir), addr (entry), code);
	if code ^= 0 then				/* split the path into directory and entry parts.	*/
	     return;
	if index ( entry, ".log") ^= 0 then
	     call suffixed_name_$new_suffix (entry, "log", "lock", lock_seg, code);
	else
	     call suffixed_name_$new_suffix (entry, "info", "lock", lock_seg, code);
	if code ^= 0 then				/* get name of lock segment assoc. with log.	*/
	     return;
	go to start(e);

start(1):
	acl.userid = get_group_id_$tag_star();		/* find out who the installer is.		*/
	acl.mode = "101"b;				/* set his "mode" to "rw".			*/
	acl.code = 0;				/* zap error code.				*/
	call hcs_$make_seg (dir, lock_seg, "", 01010b, Plock, code);
	if code ^= 0 then do;			/* try to create the lock segment.		*/
	     if code = error_table_$namedup | code = error_table_$segknown | code = error_table_$moderr then do;
		call hcs_$add_acl_entries (dir, lock_seg, addr(acl), 1, code);
		if code ^= 0 then			/* if it already exists, make sure the installer	*/
		     return;			/* has "rw" access to it.			*/
		end;
	     else					/* treat any other errors as such.		*/
		return;
	     end;
	else					/* if we had to create the lock segment, then	*/
						/* warn the installer.			*/
	     call upd_print_err_ (0, 0, "Warning", "", (proc), "", "^2xCreating  ^a>^a .", dir, lock_seg);

	time = 60;				/* lock the lock segment.  Wait 60 sec for it to	*/
lock_it:	call set_lock_$lock (lock.word, time, code);	/* be unlocked, if its already locked.		*/
	if code ^= 0 then do;
	     if code = error_table_$invalid_lock_reset then do;
		call upd_print_err_ ( code, 0, "Warning", "", (proc), "",
		     "^/^a ^R^a>^a^B  ^/^a", "Installation lock segment",
		     dir, lock_seg, "The lock has been re-locked by this process.");
		code = 0;				/* someone had it locked when his process or system failed */
		end;
	     else
		if code = error_table_$locked_by_this_process then
		code = 0;				/* I was the guy that previously locked it. */
	     else
		if code = error_table_$lock_wait_time_exceeded then do;
		     if time = 60 then do;		/* if its already locked, tell user.		*/
		          call upd_print_err_ (code, 0, "Warning", "", (proc), "",
			     "^/^a  ^R^a>^a^B  ^/^a  ^a (^a).^/^a ^a.", "Installation lock segment",
			     dir, lock_seg, "has been locked for  1  minute by", lock.process_group_id,
			     lock.program, (proc), "will continue waiting on this lock for  20  minutes");
		          time = 1200;		/* this time, wait for 20 minutes on the lock.	*/
		          go to lock_it;
		          end;
		else				/* if lock isn't unlocked after 21 minutes, then	*/
		     return;			/* quit.		*/
		end;
	     end;
	lock.process_group_id = get_group_id_();	/* it's locked.				*/
	lock.program = proc;			/* let other processes know who's in control.	*/

	if index ( entry, ".log") ^= 0 then
	     call suffixed_name_$find (dir, entry, "log", log_file, Stype, mode, code);
	else
	     call suffixed_name_$find (dir, entry, "info", log_file, Stype, mode, code);
						/* find the installation log.			*/
	Ldir = mod (index (dir, " ")+168, 169);		/* get length of non-blank part of directory.	*/
	path = substr (dir, 1, Ldir) || ">" || log_file;	/* concatenate directory and log entry name.	*/
	if (code = 0 | code = error_table_$incorrect_access) then do;
						/* log exists.				*/
	     if Stype = directory then do;		/* make sure it's not a directory.		*/
		code = error_table_$dirseg;
		go to un_lock;
		end;
	     else if Stype = msf then do;		/* if log is an MSF, then make sure installer is	*/
						/* on the ACL of the MSF directory.		*/
		if index ( log_file, ".info") ^= 0 then do; /* unless it's an info file		*/
		     code = error_table_$file_is_full;	/* then we don't allow further expansion		*/
		     go to un_lock;
		     end;
		diracl.userid = get_group_id_$tag_star();/* who is the installer			*/
		diracl.dir_mode = "111"b;		/* set acl to "sma"				*/
		diracl.code = 0;			/* zap error code				*/
		call hcs_$add_dir_acl_entries (path, "", addr(diracl), 1, code);
		if code ^= 0 then
		     go to un_lock;
		end;
						/* and if it's a segment,			*/
	     else if mode ^= 101b then do;		/* make sure installer has access to the log.	*/
		call hcs_$add_acl_entries (dir, log_file, addr(acl), 1, code);
		if code ^= 0 then
		     go to un_lock;
		end;
	     end;
	else
	     if code = error_table_$noentry then do;	/* if there's no entry, then warn the installer	*/
		call upd_print_err_ (0, 0, "Warning", "", (proc), "", "^2xCreating  ^a>^a .", dir, log_file);
		call hcs_$make_seg (dir, log_file, "", 01010b, p, code);
		if code ^= 0 then
		     goto un_lock;
		end;
	else					/* the only other error is incorrect_access.	*/
	     go to un_lock;				/* entlong cannot happen since we already made 	*/
						/* the lock_seg name.  Tell user.		*/

	return;


start(2):
	call hcs_$initiate_count ( dir, lock_seg, "", bitc, 0, Plock, code);
	if Plock = null then
	     return;				/* something's wrong.			*/
	code = 0;					/* clear "segknown code */

un_lock:	call set_lock_$unlock (lock.word, dummy_code);	/* unlock the lock segment.			*/
	if dummy_code ^= 0 then
	     call upd_print_err_ (dummy_code, 0, "Warning", "", (proc), "^/While unlocking  ^R^a>^a^B .",
		dir, lock_seg);
	call hcs_$terminate_noname (Plock, dummy_code);	/* clean up completely.			*/
	return;					/* That's All, Folks!			*/

	end upd_log_task_;
