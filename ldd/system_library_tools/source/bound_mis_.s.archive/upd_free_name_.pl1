/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


upd_free_name_:	procedure (dir, seg, code);


/*

	This procedure is used to rename a segment entry name to its corresponding
	backup name.  The transformation is "name" -> "name.1" (-> "name.2", etc.).
	If the backup name already exists in the directory, it will be renamed as
	well by a recursive call to upd_free_name_.  Entry point upd_free_name_$restore
	effects the inverse operation; all contiguous names in the series will be
	renamed to the previous name in the series.

	P. Bos, May 1972

     Modified: 09/04/81 by GA Texada to call appropriate hcs_ entries on linkage error.
     Modified: 09/10/84 by BL Braun to add $retain_suffix and $restore_with_suffix entrypoints.
*/

     dcl	dir			char(*),		/* dirname of affected segment */
	seg			char(*),		/* entryname to be transformed */
	suffix			char(*),            /* suffix of the entryname */
	code			fixed bin(35);	/* status code */

     dcl	backup_name_		entry (char(*)) returns (char(32)),
	chname_entry		entry(char(*), char(*), char(*), char(*), fixed bin(35)) variable,
	hcs_$chname_file		entry (char(*), char(*), char(*), char(*), fixed bin(35)),
	installation_tools_$chname_file	entry (char(*), char(*), char(*), char(*), fixed bin(35)),
	suffixed_name_$make		entry (char(*), char(*), char(32), fixed bin(35)),
	upd_free_name_		entry (char(*), char(*), fixed bin(35)),
	upd_free_name_$restore	entry (char(*), char(*), fixed bin(35)),
	upd_free_name_$restore_with_suffix 
				entry (char(*), char(*), char(*), fixed bin(35)),
	upd_free_name_$retain_suffix	entry (char(*), char(*), char(*), fixed bin(35));
		
     dcl linkage_error		condition;

     dcl (error_table_$namedup,
	error_table_$noentry)	ext fixed bin(35);

     dcl  (after, reverse, rtrim)	builtin;

     dcl  dot_suffix		char(32) var;
     dcl	name			char(32);		/* backup name */
     dcl  name_without_suffix		char(32);
     dcl  new_name			char(32);
     dcl  old_name			char(32);
/**/
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

	name = backup_name_(seg);			/* get name transform */
	on linkage_error begin;
	     chname_entry = hcs_$chname_file;
	     goto revert_linkage_error_1;
	     end;
	chname_entry = installation_tools_$chname_file;
revert_linkage_error_1:
	revert linkage_error;
	

	call chname_entry (dir, seg, seg, name, code);	/* attempt to rename it */
	if code = error_table_$namedup then do;		/* backup name already in use */
	     call upd_free_name_(dir, name, code);	/* attempt to rename it also */
	     if code = 0 then			/* if that worked, try rename again */
		call chname_entry (dir, seg, seg, name, code);
	     end;

	return;					/* finis */


restore:		entry (dir, seg, code);		/* inverse operation */


	name = backup_name_(seg);			/* form backup name */
	on linkage_error begin;
	     chname_entry = hcs_$chname_file;
	     goto revert_linkage_error_2;
	     end;
	chname_entry = installation_tools_$chname_file;

revert_linkage_error_2:
	revert linkage_error;
	call chname_entry (dir, name, name, seg, code);	/* attempt to restore this name */
	if code = 0 then do;			/* worked, try next segment in series */
	     call upd_free_name_$restore (dir, name, code);		/* and the next, and the next, ... */
	     if code = error_table_$noentry then	/* if end of series reached, */
		code = 0;				/* no big thing */
	     end;

	return;					/* done */
/**/
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

retain_suffix:  entry  (dir, seg, suffix, code);

          code = 0;
          call suffixed_name_$make (seg, suffix, old_name, code);
	if code ^= 0 then return;
	dot_suffix = "." || rtrim(suffix);
	name_without_suffix = reverse(after(reverse(old_name), reverse(dot_suffix)));
						/* get name transform */
	name_without_suffix = backup_name_(name_without_suffix); 
	new_name = rtrim(name_without_suffix) || dot_suffix;
	
	on linkage_error begin;
	     chname_entry = hcs_$chname_file;
	     goto revert_linkage_error_3;
	     end;
	chname_entry = installation_tools_$chname_file;

revert_linkage_error_3:
	revert linkage_error;

						/* attempt to rename it */
	call chname_entry (dir, old_name, old_name, new_name, code);
	if code = error_table_$namedup then do;		/* backup name already in use */
						/* attempt to rename it also */
	     call upd_free_name_$retain_suffix(dir, new_name, suffix, code);
	     if code = 0 then			/* if that worked, try rename again */
		call chname_entry (dir, old_name, old_name, new_name, code);
	     end;
	return;					
/**/
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

restore_with_suffix:  entry  (dir, seg, suffix, code);

          code = 0;
          call suffixed_name_$make (seg, suffix, old_name, code);
	if code ^= 0 then return;
	dot_suffix = "." || rtrim(suffix);
	name_without_suffix = reverse(after(reverse(old_name), reverse(dot_suffix)));
						/* get name transform */
	name_without_suffix = backup_name_(name_without_suffix);
	new_name = rtrim(name_without_suffix) || dot_suffix;

	on linkage_error begin;
	     chname_entry = hcs_$chname_file;
	     goto revert_linkage_error_4;
	     end;
	chname_entry = installation_tools_$chname_file;

revert_linkage_error_4:
	revert linkage_error;
						/* attempt to restore this name */
	call chname_entry (dir, new_name, new_name, old_name, code);
	if code = 0 then do;			/* worked, try next segment in series */
	     call upd_free_name_$restore_with_suffix (dir, new_name, suffix, code);
						/* and the next, and the next, ... */
	     if code = error_table_$noentry then	/* if end of series reached, */
		code = 0;				/* no big thing */
	     end;

	return;					/* done */


	end upd_free_name_;
