/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


upd_thread_task_:	procedure (listp, taskp);


/*

	This procedure is used within the Multics Online Updater to insert
	updater tasks into the task list.  Tasks are ordered by task sequence
	number, which is argument 7 to all updater tasks.  This procedure is
	restartable; if the task to be inserted is found to be already in the
	task list, the call is ignored, otherwise insertion is completed at
	the same place in the list.

	P. Bos, June 1972

*/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


     dcl	listp			ptr,		/* pointer to first task in list */
	taskp			ptr;		/* pointer to task to be inserted */

     dcl (addr, null)		builtin;

     dcl (p, q, r)			ptr;		/* previous, current, next tasks during insertion */

     dcl	seqno			fixed bin based;	/* used to access seqno argument via arglist */

     dcl	1 task			aligned based,	/* task element */
	  2 nextp			ptr,		/* pointer to following task */
	  2 backp			ptr,		/* pointer to previous task */
	  2 procp			ptr,		/* procedure pointer */
	  2 arglist,				/* argument list */
	    3 hdr			bit(72),		/* argument count, etc. */
	    3 p (100)		ptr;		/* arg pointer array */

/**/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


	p = addr (listp);				/* fudge: use listp as task.nextp */
	r = listp;				/* window points ahead of first task */
	q = taskp;				/* simplify accessing */
	do while (r ^= null);			/* search task list for place to put him */
	     if q = r then				/* already in list, must have been interrupted */
		return;				/* just exit */
	     if r -> task.arglist.p(7) -> seqno > q -> task.arglist.p(7) -> seqno then do;
append:		q -> task.nextp = r;		/* set pointer to next task */
		p -> task.nextp = q;		/* and make final connection */
		return;				/* done, exit */
		end;
	     p = r;				/* advance window */
	     r = p -> task.nextp;
	     end;
	go to append;				/* ran off end, append task there */


	end upd_thread_task_;
