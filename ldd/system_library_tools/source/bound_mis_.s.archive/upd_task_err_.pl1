/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


upd_task_err_:	procedure (code, sev, argp);


/*

	This procedure is used within the Multics Online Updater to signal
	task errors.  Calling sequence is as follows:

	     call upd_task_err_(code, sev, argp, name, string, args);

	     (1)	code	fixed bin(35)	status code
	     (2)	sev	fixed bin		severity code
	     (3)	argp	ptr		pointer to caller's arglist
	     (4)	name	char(*)		caller's entryname, e.g. a$b
	     (5)	string	char(*) (optional)	format string
	     (6)	args	(optional)	format args

	upd_task_err_ performs the following functions:

	     (1)	Updates the caller's status code, if the current error
		is of higher severity, and does the same for all parent
		tasks (updater task arg 3 is parent arglist pointer)

	     (3)	signals the condition "task_error_" and passes an updater
		status block via the info_ptr.

*/

/**/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


     dcl	code			fixed bin(35),	/* status code */
	sev			fixed bin,	/* severity code */
	argp			ptr,		/* caller arglist pointer */
	name			char(nl) based (np),/* entry point name of caller */
	line			char(ll) based (lp);/* format string */

     dcl	cu_$arg_count		entry (fixed bin),
	cu_$arg_list_ptr		entry returns (ptr),
	cu_$arg_ptr		entry (fixed bin, ptr, fixed bin, fixed bin(35)),
	decode_entryname_		entry (char(*), char(32), char(32)),
	ioa_$general_rs		entry (ptr, fixed bin, fixed bin, char(*) aligned, fixed bin(35),
				       bit(1) aligned, bit(1) aligned),
	signal_			entry (char(*), ptr, ptr, ptr),
	upd_print_err_		entry options (variable);

     dcl (addr, length, null)		builtin;

     dcl	based_p			ptr based,	/* based pointer */
	cdp			ptr,		/* baseptr for "cd" */
	lp			ptr,		/* arg ptr for "line" */
	np			ptr,		/* arg ptr for "name" */
	p			ptr,		/* random */
	svp			ptr;		/* baseptr for "sv" */

     dcl	cd			fixed bin(35) based (cdp),	/* task procedure status code arg */
	ignore			fixed bin(35),	/* status code */
	ll			fixed bin,	/* arg length for "line" */
	n			fixed bin,	/* arg count */
	nl			fixed bin,	/* arg length for "name" */
	sv			fixed bin based (svp);	/* task procedure severity code arg */

     dcl	1 arglist			aligned based (argp),	/* argument list */
	  2 hdr			bit(72),		/* arg count, etc. */
	  2 p (5)			ptr;		/* arg pointer array */

     dcl	1 ts			aligned,		/* internal status block */
	  2 proc			char(32) unal,
	  2 entry			char(32) unal,
	  2 code			fixed bin(35),
	  2 sev			fixed bin,
	  2 string		char(200);

/**/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


	p = argp;					/* copy pointer to current task arglist */
	do while (p ^= null);			/* update his status code */
	     cdp = p -> arglist.p(4);			/* status code is updater task arg 4 */
	     svp = p -> arglist.p(5);			/* severity code is arg 5 */
	     if sev > sv then do;			/* if current error is higher severity, */
		cd = code;			/* update his status code */
		sv = sev;				/* and severity code */
		end;
	     else					/* somebody else got there first; we are done */
		go to skip;			/* exit from loop */
	     p = p -> arglist.p(3) -> based_p;		/* not done, get parent arglist pointer (arg 3) */
	     end;
skip:	call cu_$arg_ptr (4, np, nl, ignore);		/* locate 4th arg (entryname) */
	call decode_entryname_(name, ts.proc, ts.entry);	/* break up into refname and entryname */
	ts.code = code;				/* copy status code */
	ts.sev = sev;				/* and severity code */
	call cu_$arg_count (n);			/* get our own arg count */
	if n > 5 then				/* did caller specify formatted message? */
	     call ioa_$general_rs (cu_$arg_list_ptr(), 5, 6, ts.string, ignore, "1"b, "1"b);
						/* yes, format it. */
	else if n > 4 then do;			/* no, but he did provide the string */
	     call cu_$arg_ptr (5, lp, ll, ignore);	/* get pointer and length */
	     ts.string = line;			/* copy it without call to formline_ */
	     end;
	else					/* no, he didn't supply anything like that */
	     ts.string = "";			/* blank out message */
	p = addr (ts);				/* get pointer to temp status block */
	call signal_("task_error_", null, p, null);	/* signal error */


	end upd_task_err_;
