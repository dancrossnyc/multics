/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


upd_acl_task_:	procedure;


/*

	This procedure includes all acl task primitives for the Multics Online
	Updater; the following are entries:

		upd_acl_task_$list		list acl
		upd_acl_task_$add		add acl entries
		upd_acl_task_$delete	delete acl entries
		upd_acl_task_$replace	replace acl
		upd_acl_task_$list_inacl	list IACL of the target dir

      *   Calling sequences are identical, being

	     call upd_acl_task_$xxx (ctlw, areap, parentp, acode, asev, taskp, seqno,
		dir, seg, msgseg, uid, ap, an, recover);

	     (1)	ctlw	bit(36) aligned	updater task control word
	     (2)	areap	ptr		caller-supplied area
	     (3)	parentp	ptr		pointer to parent arglist
	     (4)	acode	fixed bin(35)	status code
	     (5)	asev	fixed bin		severity code
	     (6)	taskp	ptr init(null)	task pointer
	     (7)	seqno	fixed bin		task sequence no.
	     (8)	dir	char(168)		dirname of affected segment
	     (9)	seg	char(32)		entryname of segment
	    (10)  msgseg	char(32)		entryname of segment for use in messages
	    (11)	uid	bit(36) aligned	unique id of segment (may be ""b)
	    (12)	ap	ptr		pointer to acl structure
	    (13)	an	fixed bin		size of acl structure
	    (14)  recover	bit(1)		on if upd_acl_task_$replace should give this user and
					*.SysDaemon.*  rwa access to segment when running
					in "reverse" mode.
	*   (15)  rings	(3) fixed bin(5)	Extra arg for the "list_inacl" entry.  Determines
					the ring of the IACL to be listed.
	These entry points are restartable, e.g. after a system or process
	failure, provided that all parameters are preserved as of the time
	of the interruption.  Note, however, that severity 1 errors may occur
	if upd_acl_task_$delete is restarted, due to limitations in hardcore
	procedures.  "acode", "asev", and "taskp" are expected to be initialized
	to "0", "0", and "null" respectively.  The "list" entry in addition
	expects "ap" to be initially null.

	P. Bos, May 1972

	Modified Apr. 3, 1973 by Peter B. Kelley	to change acl structures and calls to
						use the new hcs_ acl primitives.
	Modified Jun. 1973 by P.B. Kelley		change to acl_form_sw because of drop
						of bit 2 in options to print_acl_; also renamed
						print_acl_ to upd_print_acl_.
	Modified Mar. 1980 by P. B. Kelley
	     The entry upd_acl_task_$list_inacl was added to list the IACL
	     of the target directory.

          Modified: 09/04/81 by GA Texada to call appropriate hcs_ entries on linkage error.

*/

/**/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

     dcl	ctlw			bit(36) aligned,	/* updater control word */
	areap			ptr,		/* caller area pointer */
	parentp			ptr,		/* pointer to parent arglist */
	acode			fixed bin(35),	/* status code */
	asev			fixed bin,	/* severity code */
	taskp			ptr,		/* task pointer */
	seqno			fixed bin,	/* task sequence no., for ordering */
	dir			char(168),	/* dirname of affected segment */
	seg			char(32),		/* entryname of segment */
	msgseg			char(32),		/* entryname of segment used in messages.	*/
						/* guaranteed not to be a unique name.		*/
	uid			bit(36) aligned,	/* unique id of segment */
	ap			ptr,		/* pointer to acl structure */
	an			fixed bin,	/* acl count */
	recover			bit(1);		/* on if OK to run "replace" in "reverse" */
dcl
	rings (3)			fixed bin(5),	/* for the "list_inacl" entry */
	Parent_dir		char(168),	/* parent dir of the target seg */
	Idir			char(168);	/* list the INACL of this dir */

     dcl	cu_$arg_list_ptr		entry (ptr),
	cv_acl_			entry (ptr, fixed bin, char(*), fixed bin, bit(*)),
	expand_pathname_		entry ( char(*), char(*), char(*), fixed bin(35)),
	get_group_id_$tag_star	entry returns (char(32)),
	add_acl_entries_entry	entry (char(*), char(*), ptr, fixed bin, fixed bin(35)) variable,
	delete_acl_entries_entry	entry (char(*), char(*), ptr, fixed bin, fixed bin(35)) variable,
	replace_acl_entry		entry (char(*), char(*), ptr, fixed bin, bit(1), fixed bin(35)) variable,
	hcs_$add_acl_entries	entry (char(*), char(*), ptr, fixed bin, fixed bin(35)),
	hcs_$delete_acl_entries	entry (char(*), char(*), ptr, fixed bin, fixed bin(35)),
	hcs_$list_acl		entry (char(*), char(*), ptr, ptr, ptr, fixed bin, fixed bin(35)),
	hcs_$list_inacl		entry ( char(*), char(*), ptr, ptr, ptr, fixed bin, fixed bin(5), fixed bin(35)),
	hcs_$replace_acl		entry (char(*), char(*), ptr, fixed bin, bit(1), fixed bin(35)),
	ioa_$ioa_stream		entry options (variable),
	upd_print_acl_		entry (ptr, fixed bin, bit(*) aligned),
	upd_add_task_		entry (char(*) aligned, ptr),
	installation_tools_$add_acl_entries	entry (char(*), char(*), ptr, fixed bin, fixed bin(35)),
	installation_tools_$delete_acl_entries	entry (char(*), char(*), ptr, fixed bin, fixed bin(35)),
	installation_tools_$replace_acl	entry (char(*), char(*), ptr, fixed bin, bit(1) aligned, fixed bin(35)),
	upd_status_$long		entry (char(*), char(*), fixed bin(1), ptr, ptr, fixed bin(35)),
	upd_task_err_		entry options (variable);

     dcl (addr, bit, fixed, null)	builtin;

     dcl linkage_error		condition;

     dcl (error_table_$bad_ring_brackets,
	error_table_$empty_acl,
	error_table_$newnamerr,
	error_table_$non_matching_uid,
	error_table_$user_not_found)	ext fixed bin(35);

     dcl	acl_form_sw (5)		bit(3) aligned int static init (
				     "100"b,		/* e = 1	*/
				     "110"b,		/* e = 2	*/
				     "010"b,		/* e = 3	*/
				     "110"b,		/* e = 4	*/
				     "100"b),		/* e = 5  */
	entry (5)			char(32) aligned int static init (
				     "upd_acl_task_$list",		/* e = 1	*/
				     "upd_acl_task_$add",		/* e = 2	*/
				     "upd_acl_task_$delete",		/* e = 3	*/
			 	     "upd_acl_task_$replace",		/* e = 4	*/
				     "upd_acl_task_$list_inacl");	/* e = 5  */
     dcl	string			char(52);		/* return string for cv_acl_ */

     dcl	msg (5)			char(12) aligned int static init (
				"List ACL", "Set ACL", "Delete ACL", "Replace ACL", "List INACL");

     dcl	code			fixed bin(35),	/* status code */
	e			fixed bin,	/* entry index */
         (i, n)			fixed bin,	/* random */
	sev			fixed bin;	/* severity code */

     dcl	logsw			bit(1) aligned,	/* non-zero if printing */
	rsw			bit(1) aligned,	/* non-zero if processing in reverse direction	*/
	runsw			bit(1) aligned;	/* non-zero if processing */

     dcl	argp			ptr,		/* arglist pointer */
	cp			ptr,		/* base pointer for expanded control word */
	p			ptr;		/* random */

     dcl	1 c			aligned based (cp),	/* exploded control word */
	 (2 rsw			bit(1),		/* non-zero if in reverse mode */
	  2 tasksw		bit(1),		/* non-zero if to set up task */
	  2 compsw		bit(1),		/* non-zero if compile-only task */
	  2 runsw			bit(1),		/* non-zero if call to be processed immediately */
	  2 trunsw		bit(1),		/* non-zero if subtask list to be processed */
	  2 logsw			bit(1),		/* non-zero if in print mode */
	  2 errsw			bit(1),		/* non-zero if to print error tasks only */
	  2 briefsw		bit(1),		/* ignored */
	  2 detailsw		bit(1),		/* non-zero if to list acl when logsw is non-zero */
	  2 clear_code_sw		bit(1)) unal;	/* non-zero if error codes are to be cleared. */

     dcl	1 stat			aligned,		/* data structure for status_ */
	 (2 type			bit(2),		/* entry type */
	  2 nnames		bit(16),		/* number of names returned */
	  2 nrp			bit(18),		/* rel pointer to name array */
	  2 dtm			bit(36),		/* date/time modified */
	  2 dtu			bit(36),		/* date/time used */
	  2 mode			bit(5),		/* t, r, e, w, a */
	  2 pad			bit(13),		/* unused */
	  2 recs			bit(18),		/* pages used */
	  2 dtd			bit(36),		/* date/time dumped */
	  2 dtem			bit(36),		/* date/time entry modified */
	  2 acct			bit(36),		/* accounting data */
	  2 curlen		bit(12),		/* length of segment */
	  2 bitcnt		bit(24),		/* bitcount of segment */
	  2 did			bit(4),		/* device id */
	  2 mdid			bit(4),		/* ? */
	  2 copysw		bit(1),		/* segment copy switch */
	  2 pad2			bit(9),		/* unused */
	  2 rbs (0:2)		bit(6),		/* ring brackets */
	  2 uid			bit(36)) unal;	/* unique id */

     dcl	1 acl (an)		aligned based (ap),	/* acl array */
	  2 userid		char(32),		/* user name for this entry */
	  2 mode			bit(36),		/* 1-3 "rew", rest 0 */
	  2 pad			bit(36),		/* must be 0 */
	  2 code			fixed bin(35);	/* status code */

     dcl	1 acle 			aligned,		/* a temporary ACL array, with only one element.	*/
	  2 userid		char(32),		/* user name for this entry */
	  2 mode			bit(36),		/* 1-3 "rew", rest 0 */
	  2 pad			bit(36) init ("0"b),/* must be 0 */
	  2 code			fixed bin(35);	/* status code */

     dcl	1 del_acl (an)		aligned,		/* acl array for delete_acl_entries */
	  2  userid		char(32),		/* user name for entry */
	  2  code			fixed bin(35);	/* status code */


/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

list:	entry (ctlw, areap, parentp, acode, asev, taskp, seqno, dir, seg, msgseg, uid, ap, an);

	if ctlw & "10000000011"b then			/* this entry doesn't run in "reverse" or */
	     return;				/* "clear" modes. return. */
	e = 1;					/* set transfer vector index */
	go to common;				/* join common code */


add:	entry (ctlw, areap, parentp, acode, asev, taskp, seqno, dir, seg, msgseg, uid, ap, an);

	if ctlw & "10000000001"b then			/* this entry doesn't run in "reverse" or */
	     return;				/* "clear uid" modes */
	e = 2;					/* transfer vector index */
	go to common;				/* skip */


delete:	entry (ctlw, areap, parentp, acode, asev, taskp, seqno, dir, seg, msgseg, uid, ap, an);

	if ctlw & "10000000001"b then			/* this entry doesn't run in "reverse" or */
	     return;				/* "clear uid" modes */
	e = 3;					/* transfer vector index */
	do i = 1 to an;				/* transfer regular acl structure into  */
	     del_acl(an).userid = acl(an).userid;	/* "delete" acl structure  */
	     del_acl(an).code = acl(an).code;		/* copy userid and codes  */
	     end;
	go to common;				/* join common code */


replace:	entry (ctlw, areap, parentp, acode, asev, taskp, seqno, dir, seg, msgseg, uid, ap, an, recover);

	if ctlw & "00000000001"b then			/* this entry doesn't run in "clear uid" mode */
	     return;
	if ctlw & "1"b then if ^recover then		/* this entry only runs in "reverse" mode if */
	     return;				/* full recovery is possible. */
	e = 4;					/* transfer vector index */
	go to common;


list_inacl:  entry (ctlw, areap, parentp, acode, asev, taskp, seqno, dir, seg, msgseg, uid, ap, an, rings);

	if ctlw & "10000000011"b then			/* this entry doesn't run in "reverse" or */
	     return;				/* "clear" modes. return. */
	e = 5;					/* set transfer vector index */



common:	call cu_$arg_list_ptr (argp);			/* locate arglist */
	cp = addr (ctlw);				/* get pointer to control word */
	rsw = c.rsw;				/* set reverse switch from control word.	*/
	logsw = c.logsw;				/* non-zero if to print */
	if c.errsw then if asev = 0 then		/* errors only to be printed */
	     logsw = "0"b;				/* customer is always right */
	runsw = c.runsw | c.trunsw;			/* non-zero if to process */

	if c.clear_code_sw then			/* if in "clear code" mode, then clear acl codes */
	     if ap ^= null then do i = 1 to an;
		acl(i).code = 0;
		end;

	if c.tasksw then				/* is this a task call? */
	     call upd_add_task_((entry(e)), argp);	/* yes, do it */

	if logsw then do;				/* user is nosy */
	     if e = 5
		then call ioa_$ioa_stream ("installation_list_", "^5x^15a^a  (ring ^d)", msg(e), dir, rings(1));
	     else do;
		if seg = msgseg then
		     call ioa_$ioa_stream ("installation_list_", "^5x^15a^a>^a", msg(e), dir, seg);
		else
		     call ioa_$ioa_stream ("installation_list_", "^5x^15a^a>^a  (^a)", msg(e), dir, seg, msgseg);
	     end;
	end;

	if runsw then do;				/* are we to process call now? */
	     if uid ^= ""b then do;			/* does caller want uid verified? */
		call upd_status_$long (dir, seg, 1, addr(stat), null, code);
		if code = 0 then if uid ^= stat.uid then	/* does it match? */
		     code = error_table_$non_matching_uid;	/* no */
		if code ^= 0 then			/* success? */
		     go to aclerr;			/* no, go give error */
		end;
	     on linkage_error begin;
		add_acl_entries_entry = hcs_$add_acl_entries;
		delete_acl_entries_entry = hcs_$delete_acl_entries;
		replace_acl_entry = hcs_$replace_acl;
		goto revert_linkage_error;
		end;

	     replace_acl_entry = installation_tools_$replace_acl;
	     delete_acl_entries_entry =  installation_tools_$delete_acl_entries;
	     add_acl_entries_entry = installation_tools_$add_acl_entries;
revert_linkage_error:
	     revert linkage_error;
	     if ^rsw then				/* if running forward, then		*/
		go to forward(e);			/* skip to proper function.*/
	     else					/* otherwise, we're running in reverse for	*/
		go to reverse;			/* upd_acl_task_$replace.	*/
	     end;
	go to pracl;				/* skip to print acl */


/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


forward(1):
	if ap ^= null then				/* list acl task, see if already done */
	     go to pracl;				/* yes, skip processing again */
	an = 0;					/* zero count */
	call hcs_$list_acl (dir, seg, areap, p, null, n, code);/* ask, and ye shall receive */
	if code ^= 0 then				/* was there an error? */
	     go to aclerr;				/* yes, is fatal */
	an = n;					/* set array count */
	ap = p;					/* and pointer (set pointer last) */
	go to pracl;				/* skip to print generated structure, if wanted */


forward(2):


	call add_acl_entries_entry (dir, seg, ap, an, code);	/* add acl task, call ring 1 entry */
forward2a:
	if code ^= 0 then if code ^= error_table_$newnamerr then if code ^= error_table_$bad_ring_brackets then
	     go to aclerr;				/* any other error is fatal */
	go to ckacl;				/* no fatal error, check for unprocessed entries */


forward(3):


	call delete_acl_entries_entry (dir,seg,addr(del_acl),an,code); /* delete acl task, call ring 1 */
	do i = 1 to an;				/* put info back into "standard" acl structure */
	     acl(an).code = del_acl(an).code;		/* "userid" will remain the same */
	     end;					/* so just copy the codes   */
	if code ^= 0 then if code ^= error_table_$user_not_found then if code ^= error_table_$newnamerr then
	     go to aclerr;				/* fatal error */
	go to ckacl;				/* no, go check acl codes */


forward(4):
	if (ap = null) | (an = 0) then		/* if there's no replacement ACL */
	     go to pracl;				/* then we're done. */


	call replace_acl_entry (dir, seg, ap, an, "1"b, code); /* replace acl task, ask ring 1 */
	go to forward2a;				/* join code for add function */


forward(5):
	if ap ^= null then				/* list acl task, see if already done */
	     go to pracl;				/* yes, skip processing again */
	an = 0;					/* zero count */
	call expand_pathname_ ( dir, Parent_dir, Idir, code);
	if code ^= 0
	     then go to aclerr;
	call hcs_$list_inacl (Parent_dir, Idir, areap, p, null, n, rings(1), code);/* ask, and ye shall receive */
	if code ^= 0 | n = 0			/* was there an error? */
	     then go to aclerr;			/* yes, is fatal */
	an = n;					/* set array count */
	ap = p;					/* and pointer (set pointer last) */
	go to pracl;				/* skip to print generated structure, if wanted */


reverse:	acle.userid = get_group_id_$tag_star();		/* replace ACL with one giving this user rw access 	*/
	acle.mode = "101"b;
	acle.code = 0;
	call replace_acl_entry (dir, seg, addr (acle), 1, "0"b, code);
	if code ^= 0 then				/* any error is fatal.	*/
	     go to aclerr;
	go to pracl;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */



/**/


/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


aclerr:	if e = 5 then do;
	     code = error_table_$empty_acl;
	     call upd_task_err_ (code, 3, argp, (entry(e)), "^/Referencing ^a  (ring ^d) .", dir, rings(1));
	end;
	else do;
	     if seg = msgseg then
		call upd_task_err_ (code, 3, argp, (entry(e)), "^/Referencing ^a>^a .", dir, seg);
	     else
		call upd_task_err_ (code, 3, argp, (entry(e)), "^/Referencing ^a>^a^/(^a>^a).", dir, seg, dir, msgseg);
	end;
	go to pracl;				/* go print acl if needed */


ckacl:	do i = 1 to an;				/* here to check for error on acl entries */
	     code = acl(i).code;			/* extract status code for this entry */
	     if code = error_table_$user_not_found then	/* happens on delete function */
		sev = 1;				/* and is severity 1 warning */
	     else if code ^= 0 then			/* any other code means unprocessed entry */
		sev = 2;				/* severity 2 */
	     if code ^= 0 then do;			/* if we have an error */
		call cv_acl_(ap, i, string, n, acl_form_sw(e) & "110"b);	/* format acl entry for error msg */
		if seg = msgseg then
		     call upd_task_err_(code, sev, argp, (entry(e)),
			"^/Referencing ^a>^a .^/Offending entry is:^-^a .",
			dir, seg, string);
		else
		     call upd_task_err_(code, sev, argp, (entry(e)),
			"^/Referencing ^a>^a^/(^a>^a).^/Offending entry is:^-^a.",
			dir, seg, dir, msgseg, string);
		end;
	     end;

pracl:	if logsw then				/* reenter here to print acl for user */
	     if (c.detailsw | c.errsw) then		/* .. with proper options */
		call upd_print_acl_(ap, an, (acl_form_sw(e)));

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


	end upd_acl_task_;
