/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */



	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* N__a_m_e:  upd_message_task_							*/
	/*									*/
	/*      This procedure types messages on the user's console.  Two messages are supplied	*/
	/* by the caller: one to be typed while processing in the "forward" direction; and a	*/
	/* second to be typed while processing in the "reverse" direction.			*/
	/*									*/
	/* U__s_a_g_e									*/
	/*									*/
	/*      dcl  upd_message_task_ entry(bit(36) aligned, ptr, ptr, fixed bin(35), fixed bin,	*/
	/*		ptr, fixed bin, bit(1), bit(1), bit(1) aligned, 			*/
	/*		ptr, fixed bin, ptr, fixed bin);				*/
	/*									*/
	/*      call upd_message_task_ (ctlw, areap, parentp, code, sev, taskp, seqno, 		*/
	/*		fwd_msg_sw, rev_msg_sw, fwd_done_sw, fwd_msgp, fwd_msgl, rev_msgp,	*/
	/*		rev_msgl);						*/
	/*									*/
	/* 1) ctlw	updater task control word.(In)				*/
	/* 2) areap	ptr to caller-supplied area.(In)				*/
	/* 3) parentp	ptr to caller's arglist.(In)					*/
	/* 4) code	0. (In)							*/
	/*		status code of highest-severity error encountered during 		*/
	/*		processing.(Out)						*/
	/* 5) sev		0. (In)							*/
	/*		severity of highest error encountered during processing.(Out)	*/
	/* 6) taskp	null pointer.(In)						*/
	/*		task pointer.(Out)						*/
	/* 7) seqno	sequence number.(In)					*/
	/* 8) fwd_msg_sw	on if fwd_msg is to be typed. (In)				*/
	/* 9) rev_msg_sw	on if rev_msg is to be typed. (In)				*/
	/* 10) fwd_done_sw	on if fwd_msg has been typed; off if rev_msg has been typed.(In/Out)	*/
	/* 11) fwd_msgp	ptr to message to be typed when "run" in "forward" mode.(In)	*/
	/* 12) fwd_msgl	length of message to be typed when "run" in "forward" mode.(In)	*/
	/* 13) rev_msgp	ptr to message to be typed when "run" in "reverse" mode.(In)	*/
	/* 14) rev_msgl	length of message to be typed when "run" in "reverse" mode.(In)	*/
	/*									*/
	/* S__t_a_t_u_s									*/
	/*									*/
	/* 1) Created:  in Dec 1972 by G. C. Dixon					*/
	/* 2) Modified: in Dec 1972 by G. C. Dixon; pass ptr/length of strings to be typed,	*/
	/*				    rather than strings themselves to avoid	*/
	/*				    references through descriptors.		*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */


/**/


/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


upd_message_task_:	procedure (ctlw, areap, parentp, code, sev, taskp, seqno, 
			 fwd_msg_sw, rev_msg_sw, fwd_done_sw, fwd_msgp, fwd_msgl, rev_msgp, rev_msgl);


     dcl						/*	parameters			*/
	ctlw			bit(36) aligned,	/* updater control word.			*/
	areap			ptr,		/* caller-supplied area.			*/
	parentp			ptr,		/* parent's arglist ptr.			*/
	code			fixed bin(35),	/* status code.				*/
	sev			fixed bin,	/* severity code.				*/
	taskp			ptr,		/* task ptr.				*/
	seqno			fixed bin,	/* task sequence no.			*/
	fwd_msg_sw		bit(1) unal,	/* on if fwd message to be printed. 		*/
	rev_msg_sw		bit(1) unal,	/* on if rev message to be print. 		*/
	fwd_done_sw		bit(1) aligned,	/* on if fwd message has been printed. 		*/
	fwd_msgp			ptr,		/* ptr to message to be typed in forward mode.	*/
	fwd_msgl			fixed bin,	/* length of message to be typed in forward	*/
	rev_msgp			ptr,		/* ptr to message to be typed in reverse mode.	*/
	rev_msgl			fixed bin;	/* length of message to be typed in reverse mode.	*/

     dcl						/*	automatic variables			*/
	Lmsg			fixed bin,	/* length of message			*/
	Pmsg			ptr,		/* ptr to message.				*/
	Psw			ptr,		/* ptr to msg_sw				*/
	argp			ptr,		/* ptr to our argument list.			*/
	cp			ptr,		/* ptr to task control word.			*/
	nelemt			fixed bin,	/* number of elements actually written.		*/
	rsw			bit(1) aligned,	/* copy of c.rsw for efficiency.		*/
	status_code		bit(72) aligned;	/* an IO system status code.			*/

     dcl						/*	based variables			*/
	1 c			aligned based (cp),	/* overlay for task control word.		*/
	 (2 rsw			bit(1),		/* non-zero if in reverse mode.		*/
	  2 tasksw		bit(1),		/* non-zero if to set up a task call to ourself.	*/
	  2 compsw		bit(1),		/* ignored.				*/
	  2 runsw			bit(1),		/* non-zero if messages to be typed immediately	*/
	  2 trunsw		bit(1)) unaligned,	/* non-zero if this task to be processed	*/
						/* immediately, but not its subtasks.		*/
	sw			bit(1) based (Psw);	/* on if message is to be printed.		*/

     dcl						/*	entries and builtin functions		*/
	addr			builtin,
	cu_$arg_list_ptr		entry (ptr),
	ios_$write		entry (char(*), ptr, fixed bin, fixed bin, fixed bin, bit(72) aligned),
	length			builtin,
	upd_add_task_		entry (char(*), ptr);

     dcl						/*	static variable			*/
	nl			char(1) aligned int static init ("
");						/* a new-line character.			*/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */





/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


	call cu_$arg_list_ptr (argp);			/* get ptr to arglist for "task" mode.		*/
	cp = addr (ctlw);				/* overlay our control word.			*/
	if c.tasksw then				/* called in "task" mode? Then create a task call	*/
						/* to ourself.				*/
	     call upd_add_task_ ("upd_message_task_", argp);

	if ^c.runsw then if ^c.trunsw then		/* no more to do? Then quit.			*/
	     return;

	rsw = c.rsw;				/* copy reverse switch for efficiency.		*/
	if ^rsw then do;				/* "Forward" Ho!				*/
	     Psw = addr (fwd_msg_sw);			/* use fwd msg switch.			*/
	     Lmsg = fwd_msgl;			/* set length and ptr to msg.			*/
	     Pmsg = fwd_msgp;
	     end;
	else do;					/* "Reverse" Away!				*/
	     Psw = addr (rev_msg_sw);			/* use rev msg switch.			*/
	     Lmsg = rev_msgl;
	     Pmsg = rev_msgp;
	     end;

	if rsw = fwd_done_sw then do;			/* if "forward" mode and "forward" hasn't been 	*/
						/* done, or vica versa for "reverse".		*/
	     if sw then				/* if we're supposed to type message, then	*/
		if Lmsg > 0 then do;		/* if there is a message, then type it.		*/
		     call ios_$write ("installation_list_", Pmsg, 0, Lmsg, nelemt, status_code);
		     call ios_$write ("installation_list_", addr (nl), 0, 1, nelemt, status_code);
		     end;
	     fwd_done_sw = ^rsw;			/* set our current direction done.		*/
	     end;


/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


	end upd_message_task_;
