/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


upd_print_names_:		procedure (np, n, asw);


/*

	This procedure is used within the Multics Online Updater to
	print standard updater-format name lists on the user's terminal.
	Options allow suppression of error messages which correspond
	to the process and restore status codes.

	P. Bos, May 1972

*/

     dcl	np			ptr,		/* pointer to name array */
	n			fixed bin,	/* size of array */
	asw			bit(*);		/* option switches */

     dcl	check_fs_errcode_		entry (fixed bin(35), char(8) aligned, char(100) aligned),
	ios_$write		entry (char(*), ptr, fixed bin, fixed bin, fixed bin, bit(72) aligned);

     dcl (addr, null, length)		builtin;

     dcl	error_table_$not_done	ext fixed bin(35);

     dcl (p, sp)			ptr;

     dcl	code			fixed bin(35),
	status_code		bit(72) aligned;

     dcl	chars			char(j) based (p),	/* char string overlay */
         (dummy			char(8),
	info			char(100),
	line			char(266)) aligned;

     dcl	sws			bit(2) aligned;	/* copy of asw */

     dcl	1 s			based (sp),	/* overlaid on sws */
	 (2 psw			bit(1),		/* non-zero if to interpret process code */
	  2 rsw			bit(1)) unal;	/* non-zero if to interpret restore code */

     dcl	1 names (n)		aligned based (np),	/* updater-format names array */
	  2 name			char(32),		/* segment name */
	  2 pcode			fixed bin(35),	/* status code during processing */
	  2 rcode			fixed bin(35);	/* status code during restore */

     dcl	empty			char(21) aligned init ("	Name list is empty.
");
     dcl (i, j, l, ll, lmax, nelemt)	fixed bin;

/**/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


	if np ^= null then if n ^= 0 then		/* see if null name list */
	     go to skip;				/* no, go print it */
	call ios_$write ("installation_list_", addr (empty), 0, 21, nelemt, status_code);
						/* yes, print message saying this, */
	return;					/* and exit */

skip:	sws = asw;				/* align option bits */
	sp = addr (sws);				/* get pointer for overlay */
	lmax = length (line);			/* set max. line length for addchr */
	do i = 1 to n;				/* once over lightly */
	     line = "	";			/* blank out line image and start with a tab */
	     l = 1;				/* nothing in it yet */
	     p = addr (names(i).name);		/* get pointer to this name */
	     j = 32;				/* and length */
	     call adjust (p, j);			/* strip blanks */
	     call addchr (chars);			/* and insert into output line */
	     if s.psw then do;			/* user want process code? */
		code = names(i).pcode;		/* copy status code */
		if code = 0 then			/* nothing there */
		     go to skip1;			/* well, don't put it in then */
		if l < 30 then			/* most names will fit in 30 chars */
		     l = 30;			/* make error message fall on tab stop */
		else				/* big name */
		     l = l + 1;			/* add a blank */
		call check_fs_errcode_(code, dummy, info);	/* get error_table_ message */
		p = addr (info);			/* get pointer to it */
		j = 100;				/* and length */
		call adjust (p, j);			/* pajamas too big? */
		call addchr (chars);		/* just right, now */
		end;
skip1:	     if s.rsw then do;			/* want restore code? */
		code = names(i).rcode;		/* copy it */
		if code ^= 0 then if code ^= error_table_$not_done then do;
		     call check_fs_errcode_(code, dummy, info);	/* expand message */
		     call addchr ("
 (restore)                    ");			/* 20 blanks on end */
		     p = addr (info);		/* get pointer to message */
		     j = 100;			/* and length */
		     call adjust (p, j);		/* strip blanks */
		     call addchr (chars);		/* and insert it */
		     end;
		end;
	     call addchr ("
");	     call ios_$write ("installation_list_", addr (line), 0, l, nelemt, status_code);
						/* append <nl> and write it on listing stream. */
	     end;

	return;					/* done, exit */

/**/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


addchr:		procedure (arg);			/* procedure to add arg to line */


     dcl	arg			char(*);		/* char string to insert into line */

     dcl (length, substr)		builtin;

     dcl	t			fixed bin;	/* temp */


	t = length (arg);				/* get size of string to add */
	if t > lmax - l then			/* maximum of lmax chars in message */
	     t = lmax - l;				/* make sure we don't run off end */
	if t ^= 0 then do;				/* still room, put it in */
	     substr (line, l+1, t) = arg;		/* after what's already there */
	     l = l + t;				/* line got longer */
	     end;
	return;					/* done */

	end addchr;


/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


adjust:		procedure (argp, argl);		/* procedure to strip leading, trailing blanks */


     dcl	argp			ptr,		/* pointer to char string */
	argl			fixed bin;	/* length of string */

     dcl	t			fixed bin;	/* temp */

     dcl	1 c			based (argp),	/* char array overlaid on string */
	  2 char (argl)		char(1) unal;	/* makes better code than substr */


	do t = 1 to argl;				/* scan from front for first non-blank */
	     if c.char(t) ^= " " then			/* non-blank? */
		go to first;			/* yes, exit loop */
	     end;
first:	argp = addr (c.char(t));			/* adjust pointer to point to it */
	argl = argl - t + 1;			/* adjust length */
	if argl ^= 0 then do;			/* if string not all blank */
	     do t = argl to 1 by -1;			/* scan from end for last non-blank */
		if c.char(t) ^= " " then		/* found it? */
		     go to last;			/* yes, skip */
		end;
last:	     argl = t;				/* set new length */
	     end;
	return;					/* bye... */

	end adjust;


	end upd_print_names_;
