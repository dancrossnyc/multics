/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


upd_task_:	procedure (rsw, taskp, gen_call, ctlp);


/*

	This procedure is the task dispatcher for the Multics Online Updater.
	A task consists of a pointer defining a procedure to be called, and an
	argument list to be passed when making the call, plus forward and back
	pointers for threading.  For each task in the input task list, caller-
	supplied procedure gen_call is invoked, by

		call gen_call (task.procp, addr (task.arglist));

	Within the Updater, upd_gen_call_ should be provided as gen_call, as
	the procedure pointers obtained from upd_add_task_ are indirect.
	If task.procp is a true procedure pointer (i.e. from hcs_$make_ptr),
	then cu_$gen_call may be supplied for this purpose.  If "rsw" is non-
	zero, the task list will be processed backward, starting at the task
	pointed to by "taskp", otherwise, it will be processed normally.  "taskp"
	will always point to the current (or last) task being processed.

	Task list back pointers are stored as the task list is processed in
	the forward direction.  Forward pointers are never modified.

	P. Bos, June 1972

*/

     dcl	rsw			bit(1),		/* forward or backward */
	taskp			ptr,		/* pointer to first or next task */
	gen_call			entry (ptr, ptr),	/* user-supplied procedure to invoke task */
	ctlp			ptr;		/* control argument pointer */

     dcl (addr, fixed, null)		builtin;

     dcl (p, q)			ptr;		/* random */

     dcl	1 task			aligned based (p),	/* task element */
	  2 nextp (0:1)		ptr,		/* pointers to next, previous tasks */
	  2 procp			ptr,		/* procedure entry pointer or equivalent */
	  2 arglist,				/* argument list */
	    3 hdr			bit(72),		/* arg count, etc. */
	    3 p (1)		ptr;		/* argument pointers */

/**/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


	p = taskp;				/* begin at the beginning */
	do while (p ^= null);			/* .. and continue until the end */
	     taskp = p;				/* update caller task pointer */
	     q = addr (task.arglist);			/* get arglist pointer */
	     if ctlp ^= null then			/* if caller supplied control arg, */
		task.arglist.p(1) = ctlp;		/* give it to all tasks */
	     call gen_call (task.procp, q);		/* invoke task procedure via user routine */
	     p = task.nextp (fixed (rsw));		/* get pointer to next or previous task */
	     if ^rsw then if p ^= null then		/* if processing forward, */
		task.nextp(1) = taskp;		/* set back pointer on following task */
	     end;

	return;					/* .. then stop */


	end upd_task_;
