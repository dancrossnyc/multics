/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


upd_print_err_:	procedure (code, sev);


/*

	This procedure will format and print an error message, given a
	status code, severity code, condition name, procedure name, and
	optional ioa_ string and arguments.  Character string arguments
	which are "" (null string) will result in suppression of the
	corresponding portions of the message, as will status code and
	severity code of 0.  In addition, the case of severity code only
	is special-cased to produce the message

		"An error of severity _n has occurred."

	and the case of status code/format string and procedure/entry
	name only is special-cased to produce

		"proc$entry: Expanded error message."

	in the format of com_err_.  Calling sequence to print_err_ is:

	     call upd_print_err_(code, sev, prefix, condition,
		     proc, entry, string, args ...);

	     (1)	code	fixed bin(35)	status code
	     (2)	sev	fixed bin		severity code
	     (3)	prefix	char(*)		instead of "Error"
	     (4)	condition	char(*)		condition name
	     (5)	proc	char(*)		procedure name
	     (6)	entry	char(*)		entry point name
	     (7)	string	char(*)		format string
	     (8)	args	...		format args

	The error message produced will be a subset of:

	     Error (severity _n): condition condition from proc$entry
	     Expanded error message.  Optional formatted string.

	Trailing unwanted arguments may be omitted.

	P. Bos, May 1972

*/

/**/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


     dcl	code			fixed bin(35),	/* status code */
	sev			fixed bin,	/* severity code */
	prefix			char(xl) based(xp),	/* message prefix */
	condition			char(cl) based(cp),	/* condition name */
	proc			char(pl) based(pp),	/* procedure name */
	entry			char(el) based(ep),	/* entry point name */
	string			char(sl) based(sp);	/* ioa_$general_rs control_ string */

     dcl	check_fs_errcode_		entry (fixed bin(35), char(8) aligned, char(300) aligned),
	convert_binary_integer_$decimal_string	entry (fixed bin) returns (char(12) varying),
	cu_$arg_count		entry (fixed bin),
	cu_$arg_list_ptr		entry (ptr),
	cu_$arg_ptr		entry (fixed bin, ptr, fixed bin, fixed bin(35)),
	ioa_$general_rs		entry (ptr, fixed bin, fixed bin, char(*) aligned, fixed bin, bit(1) aligned,
				       bit(1) aligned),
	ios_$write		entry (char(*), ptr, fixed bin, fixed bin, fixed bin, bit(72) aligned);

     dcl (addr, null)		builtin;

     dcl	sws			bit(5) aligned;	/* control bits for message subfields */

     dcl (cl, el, i, l, n, pl, sl, xl)	fixed bin,
	ignore			fixed bin(35),
	nelemt			fixed bin,
	status_code		bit(72) aligned;

     dcl (argp, cp, ep, p, pp, sp, swp, xp)
				ptr;

     dcl	chars			char(i) based(p),	/* unaligned char string overlay */
	dummy			char(8) aligned,	/* ignored short format from check_fs_errcode_ */
	info			char(300) aligned,	/* long form message from same */
	line			char(400) aligned;	/* output message */

     dcl	1 s			aligned based(swp),	/* bit array overlaid on "sws" */
	  2 sw (5)		bit(1) unal;

/**/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


	sws = "00000"b;				/* initialize */
	sl, el, pl, cl, xl = 0;			/* nobody home yet */
	swp = addr (sws);				/* for bit array overlay */
	call cu_$arg_count (n);			/* get number of arguments supplied */
	if n > 6 then do;				/* user supplied ioa_$general_rs control_ string */
	     call cu_$arg_ptr (7, sp, sl, ignore);	/* get arg pointer and size */
	     call adjust (sp, sl);			/* strip leading & trailing blanks */
	     if sl ^= 0 then			/* anything left? */
		s.sw(1) = "1"b;			/* error message switch */
	     go to a;				/* skip */
	     end;
	if n > 5 then do;				/* entry name supplied */
a:	     call cu_$arg_ptr (6, ep, el, ignore);	/* get pointer and length */
	     call adjust (ep, el);			/* get rid of leading and trailing blanks */
	     if el ^= 0 then			/* anything left? */
		s.sw(4) = "1"b;			/* proc$entry switch */
	     go to b;				/* skip */
	     end;
	if n > 4 then do;				/* procedure name supplied */
b:	     call cu_$arg_ptr (5, pp, pl, ignore);	/* get pointer and length */
	     call adjust (pp, pl);			/* strip leading & trailing blanks */
	     if pl ^= 0 then			/* all blanks? */
		s.sw(4) = "1"b;			/* proc$entry switch */
	     go to c;				/* skip */
	     end;
	if n > 3 then do;				/* condition name supplied */
c:	     call cu_$arg_ptr (4, cp, cl, ignore);	/* get pointer and length */
	     call adjust (cp, cl);			/* strip blanks */
	     if cl ^= 0 then			/* was it really supplied? */
		s.sw(3) = "1"b;			/* yes */
	     go to d;				/* skip */
	     end;
	if n > 2 then do;				/* prefix arg supplied? */
d:	     call cu_$arg_ptr (3, xp, xl, ignore);	/* yes, get it */
	     call adjust (xp, xl);			/* get rid of blanks */
	     if xl ^= 0 then			/* was it really supplied ? */
		s.sw(5) = "1"b;			/* yes */
	     go to h;				/* skip */
	     end;
	if n > 1 then do;				/* severity code supplied? */
h:	     if sev ^= 0 then			/* omitted if zero */
		s.sw(2) = "1"b;			/* but it's there */
	     go to e;				/* skip */
	     end;
	if n ^= 0 then				/* how about status code? */
e:	     if code ^= 0 then			/* zero code implies not there */
		s.sw(1) = "1"b;			/* error message switch */

	l = 1;					/* output message starts out length one */
	line = "
";						/* start with a carriage return. */
	if sws = "01000"b then			/* special case for severity code only */
	     go to sevmsg;				/* skip */
	if sws = "10010"b then			/* and for status code/procedure name */
	     go to errmsg;				/* skip also */

	if xl ^= 0 then				/* did caller specify prefix string? */
	     call addchr (prefix);			/* yes, use his */
	else					/* no, */
	     call addchr ("Error");			/* use canned one */
	if sws & "0100"b then			/* severity code supplied? */
	     call addchr (" (severity " || convert_binary_integer_$decimal_string (sev) || ")");
	if ((sws & "1001"b) = "1000"b) | (sws & "0011"b) then
						/* if followed by err msg, cond name, or proc name */
	     call addchr (":");			/* add colon */
	if sws & "0010"b then			/* N.B. note red, black shift chars */
	     call addchr (" " || condition || " condition");	/* around condition name */
	if sws & "0001"b then do;			/* procedure/entry name supplied? */
	     call addchr (" from ");			/* note red shift after "from" */
	     if pl ^= 0 then			/* if procedure name there, */
		call addchr (proc);			/* insert it */
	     if el ^= 0 then			/* if entry name there, */
		call addchr ("$" || entry);		/* add him too */
	     call addchr ("");			/* black shift */
	     end;
	if sws & "1000"b then do;			/* status code or format string */
	     if (sws & "0011"b) then			/* if condition name or procedure name, */
		call addchr ("
");	     else					/* new_line in previous stmt */
		call addchr (" ");			/* if not, rest goes on same line */
f:	     if code ^= 0 then do;			/* status code? */
		call check_fs_errcode_(code, dummy, info);	/* expand it into a message */
		p = addr (info);			/* get pointer, size for adjust */
		i = 100;
		call adjust (p, i);			/* strip leading, trailing blanks */
		if i ^= 0 then			/* anything left? */
		     call addchr (chars);		/* do it to it */
		if sl ^= 0 then do;			/* if formatted string there also, */
		     call addchr ("  ");		/* insert couple of blanks */
		     go to g;			/* skip */
		     end;
		end;
	     if sl ^= 0 then do;			/* did user supply ioa_$general_rs control_ string? */
g:		if n > 7 then do;			/* yes, were there args to be formatted? */
		     sp = addr (info);		/* yes, get a place to put them */
		     sl = 300;			/* initialize length */
		     call cu_$arg_list_ptr (argp);	/* get ptr to our argument list. */
		     call ioa_$general_rs (argp, 7, 8, info, sl, "0"b, "1"b);
		     end;				/* otherwise, sp, sl still point to arg 6 */
		call addchr (string);		/* insert it */
		end;
	     end;
	call addchr ("
");						/* add terminal carriage return */

write:	call ios_$write ("installation_error_", addr (line), 0, l, nelemt, status_code);
						/* write message onto error stream. */
	return;					/* done. */


sevmsg:	call addchr ("An error of severity " || convert_binary_integer_$decimal_string (sev) || " has occurred.
");	go to write;				/* lots of new_line's in strings */


errmsg:	if pl ^= 0 then				/* here to form com_err_ style message */
	     call addchr (proc);			/* procedure name */
	if el ^= 0 then
	     call addchr ("$" || entry);		/* entry name */
	call addchr (": ");				/* colon, spaces */
	go to f;					/* join common code to add error message, string */

/**/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


addchr:		procedure (arg);			/* procedure to add arg to line */


     dcl	arg			char(*);		/* char string to insert into line */

     dcl (length, substr)		builtin;

     dcl	t			fixed bin;	/* temp */


	t = length (arg);				/* get size of string to add */
	if t > 400 - l then				/* maximum of 400 chars in message */
	     t = 400 - l;				/* make sure we don't run off end */
	if t ^= 0 then do;				/* still room, put it in */
	     substr (line, l+1, t) = arg;		/* after what's already there */
	     l = l + t;				/* line got longer */
	     end;
	return;					/* done */

	end addchr;


/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


adjust:		procedure (argp, argl);		/* procedure to strip leading, trailing blanks */


     dcl	argp			ptr,		/* pointer to char string */
	argl			fixed bin;	/* length of string */

     dcl	t			fixed bin;	/* temp */

     dcl	1 c			based (argp),	/* char array overlaid on string */
	  2 char (argl)		char(1) unal;	/* makes better code than substr */


	do t = 1 to argl;				/* scan from front for first non-blank */
	     if c.char(t) ^= " " then			/* non-blank? */
		go to first;			/* yes, exit loop */
	     end;
first:	argp = addr (c.char(t));			/* adjust pointer to point to it */
	argl = argl - t + 1;			/* adjust length */
	if argl ^= 0 then do;			/* if string not all blank */
	     do t = argl to 1 by -1;			/* scan from end for last non-blank */
		if c.char(t) ^= " " then		/* found it? */
		     go to last;			/* yes, skip */
		end;
last:	     argl = t;				/* set new length */
	     end;
	return;					/* bye... */

	end adjust;


	end upd_print_err_;
