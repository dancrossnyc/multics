/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


backup_name_:	procedure (name) returns (char(32));


/*

	This procedure, given a name in the series "name", "name.1", "name.2",
	etc., will return the next name in the series.

	P. Bos, May 1972

*/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


     dcl	name			char(*);

     dcl	convert_binary_integer_$decimal_string	entry (fixed bin) returns (char(12) varying),
	cv_dec_			entry (char(*)) returns (fixed bin(35));

     dcl (index, length, substr)	builtin;

     dcl (i, j, k, l)		fixed bin;

     dcl	chr			char(1),
	string			char(12) varying;

/**/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


	l = index (name, " ") - 1;			/* get length of segment name */
	if l = -1 then
	     l = length (name);			/* adjust if necessary */
	k = 0;					/* count of digits found */
	do i = l by -1 to 1;			/* start at end of name, work backwards */
	     chr = substr (name, i, 1);		/* get char at this position */
	     if chr = "." then			/* looking for ".nnn" suffix */
		go to dot;
	     else if (chr >= "0") then if (chr <= "9") then	/* char is a digit */
		go to skip;			/* will try again */
	     go to first;				/* other char; we are done */
skip:	     k = k + 1;				/* count chars, continue scan */
	     end;
	go to first;				/* all-digit name no good */

dot:	if k = 0 then				/* terminal "." no good either */
	     go to first;
	j = cv_dec_(substr (name, i+1, k));		/* convert number part of name to binary */
	if j = 0 then				/* if number part = 0, also no good */
first:	     string = "1";				/* fudge up string to avoid call */
	else do;					/* current name already part of series, */
	     j = j + 1;				/* increment suffix */
	     l = i - 1;				/* adjust length to exclude current suffix */
	     string = convert_binary_integer_$decimal_string (j);	/* convert to ascii */
	     end;

rtn:	k = length (string);			/* compute length of suffix */
	if l > 32 - k - 1 then			/* see if name too long to add suffix */
	     l = 32 - k - 1;			/* if so, truncate front part */
	return (substr (name, 1, l) || "." || string);	/* form new name and return */

	end backup_name_;
