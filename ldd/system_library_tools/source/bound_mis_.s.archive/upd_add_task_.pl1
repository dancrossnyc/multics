/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


upd_add_task_:	procedure (name, argp)
		options ( rename (( alloc_, smart_alloc_)) );


/*

	This procedure is used within the Multics Online Updater to construct
	the task list (which is a list of procedure calls including arguments).
	The "thread_task_" condition is signalled (supplying a pointer to the
	generated task) to add the task to the current task list.

	The following are entries:

	     upd_add_task_		allocates a task element and inserts
				it into the current task list by signalling
				the "thread_task_" condition.

	     upd_add_task_$init	specifies the area and linkage table
				to be used for all generated tasks

	     upd_add_task_$reset	reinitializes all procedure entry
				pointers in the task linkage table
				(used to resurrect the updater in
				a new process)

	The pointers specified on the initialization call are not copied;
	rather, internal static pointers to them are maintained, thereby
	allowing the caller to modify the actual pointers.  This is primarily
	useful to allow area switching to be done when the "area" condition
	is signalled.

	Within the Updater, this procedure is restartable, i.e. system or
	process failures are "programmed around".

	P. Bos, May 1972

*/

/**/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


     dcl	name			char(*),		/* name of entry point to be called, e.g. a$b */
	argp			ptr;		/* argument list pointer */

     dcl	decode_entryname_		entry (char(*), char(32), char(32)),
	signal_			entry (char(*), ptr, ptr, ptr);

     dcl (addr, fixed, null)		builtin;

     dcl	ename			char(32),		/* entryname portion of "name" */
	rname			char(32);		/* refname portion of "name" */

     dcl	based_p			ptr based,	/* the obvious */
         (p, q, r)			ptr;		/* random */

     dcl (ap, lp)			ptr int static init (null);	/* pointers to areap, linkp */

     dcl	size			fixed bin,	/* computed arglist size */
	space (size)		fixed bin based;	/* overlay for arglist copy */

     dcl	area			area based (ap -> based_p);	/* user area to allocate tasks in */

     dcl	1 arglist			aligned based (argp),	/* argument list */
	 (2 an			bit(18),		/* argument count */
	  2 sn			bit(18),		/* sp flag (for internal calls) */
	  2 dn			bit(18),		/* descriptor count */
	  2 pad			bit(18)) unal,	/* unused */
	  2 p (100)		ptr;		/* arg pointers for standard updater task args */

     dcl	1 l			aligned based (p),	/* linkage table (list) entry */
	  2 nextp			ptr,		/* pointer to next link in list */
	  2 procp			ptr,		/* procedure entry pointer */
	 (2 rname			char(32),		/* procedure refname and entryname */
	  2 ename			char(32)) unal;	/* (fudge alignment for stupid pl1) */

     dcl	1 task			aligned based (q),	/* task element */
	  2 nextp			ptr,		/* pointer to following task */
	  2 backp			ptr,		/* pointer to previous task */
	  2 procp			ptr,		/* task procedure pointer */
	  2 arglist (size)		fixed bin;	/* argument list for this task */

/**/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


	call decode_entryname_(name, rname, ename);	/* get refname, entry point name separately */
	q = lp;					/* get linkage list root pointer */
	p = q -> based_p;				/* and pointer to first link */
	do while (p ^= null);			/* search linkage table (list) for this entry point */
	     if rname = l.rname then if ename = l.ename then	/* does it match? */
		go to found;			/* yes, go allocate task */
	     q = p;				/* no, remember him in case we fall off end */
	     p = l.nextp;				/* get next linkage entry */
	     end;
	allocate l in (area);			/* allocate new linkage block */
	l.nextp = null;				/* will be on end of list */
	l.procp = null;				/* null procedure pointer */
	l.rname = rname;				/* and procedure name */
	l.ename = ename;				/* and entry point name */
	q -> l.nextp = p;				/* add it to list */

found:	q = arglist.p(6) -> based_p;			/* 6th arg to all updater tasks is task pointer */
	if q = null then do;			/* if no task there yet, */
	     size = fixed (arglist.an) + fixed (arglist.dn) + 2;	/* compute arglist size */
	     if fixed (arglist.sn) = 2 then		/* what dummy added values "4" and "8" here? */
		size = size + 2;			/* .. once upon a time, we could just add */
	     else if fixed (arglist.sn) = 8 then	/* .. all three halfwords to get arglist size */
		size = size + 2;			/* .. and save all this diddling */
	     allocate task in (area);			/* allocate task element */
	     task.nextp, task.backp = null;		/* not connected to anybody */
	     task.procp = addr (l.procp);		/* task procedure pointer points to linkage table entry */
	     r = addr (task.arglist);			/* get pointer to arglist substructure */
	     r -> space = argp -> space;		/* copy arglist into task block */
	     arglist.p(6) -> based_p = q;		/* give caller pointer to task in his taskp argument */
	     end;
	call signal_("thread_task_", null, q, null);	/* throw task in the air, see who catches it */

	return;					/* done, exit */

/**/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


     dcl	areap			ptr,		/* pointer to caller's area */
	linkp			ptr;		/* pointer to linkage table */


init:		entry (areap, linkp);		/* initialization entry point */


	ap = addr (areap);				/* save pointer to user's areap */
	lp = addr (linkp);				/* and to his linkp */
	return;					/* not much of a cough... */


reset:		entry (linkp);			/* entry to reinitialize linkage table */


	p = linkp;				/* get pointer to first entry in table */
	do while (p ^= null);			/* linkage table is threaded list */
	     l.procp = null;			/* make entry pointer null */
	     p = l.nextp;				/* get pointer to next linkage entry */
	     end;
	return;					/* done, exit */


	end upd_add_task_;
