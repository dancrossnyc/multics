/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


upd_status_task_:	procedure;


/*

	This procedure includes various utility task functions which return
	status information about a directory entry, used by the Multics Online
	Updater.  The following are entries:

		upd_status_task_$get_uid	get segment unique id

	The first 10 arguments are identical for each entry, being:

	     (1)	ctlw	bit(36) aligned	updater control word
	     (2)	areap	ptr		caller area pointer
	     (3)	parentp	ptr		pointer to parent arglist
	     (4)	acode	fixed bin(35)	status code
	     (5)	asev	fixed bin		severity code
	     (6)	taskp	ptr		task pointer
	     (7)	seqno	fixed bin		task sequence no.
	     (8)	dir	char(168)		dirname of segment
	     (9)	seg	char(32)		entryname of segment
	    (10)	uid	bit(36) aligned	unique id (output for "uid" entry)

	These entry points are restartable.  "acode", "asev", and "taskp" should
	be initialized to "0", "0", and "null", respectively.  upd_status_task_$get_uid
	additionally expects "uid" to be initialized to "0"b; any non-zero value
	will be assumed to have been output prior to a system or process failure,
	and will be verified instead of being overwritten.

	P. Bos, May 1972

	Modified Apr. 4, 1973 by Peter B. Kelley	to put in a check to issue a warning if
						the "directory entry" is a directory.

*/

/**/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


     dcl	ctlw			bit(36) aligned,	/* updater task control word */
	areap			ptr,		/* caller area pointer */
	parentp			ptr,		/* pointer to parent arglist */
	acode			fixed bin(35),	/* status code */
	asev			fixed bin,	/* severity code */
	taskp			ptr,		/* task pointer */
	seqno			fixed bin,	/* task sequence no. */
	dir			char(168),	/* dirname of segment */
	seg			char(32),		/* entryname of segment */
	uid			bit(36) aligned;	/* unique id of segment */

     dcl	cu_$arg_list_ptr		entry (ptr),
	ioa_$ioa_stream		entry options (variable),
	upd_add_task_		entry (char(*), ptr),
	upd_print_err_		entry options (variable),
	upd_status_$long		entry (char(*), char(*), fixed bin(1), ptr, ptr, fixed bin(35)),
	upd_task_err_		entry options (variable);

     dcl (addr, null)		builtin;

     dcl	error_table_$non_matching_uid	ext fixed bin(35),
          error_table_$not_seg_type     ext fixed bin(35);

     dcl	argp			ptr,		/* arglist pointer */
	cp			ptr;		/* control word pointer */

     dcl	code			fixed bin(35),	/* status code for call */
          sev               		fixed bin init (3);	/* severity code for call */

     dcl	logsw			bit(1) aligned,	/* c.logsw | (c.errsw & asev ^= 0) */
	runsw			bit(1) aligned;	/* c.runsw | c.trunsw */

     dcl	1 c			aligned based (cp),	/* exploded control word */
	 (2 rsw			bit(1),		/* non-zero if in reverse mode */
	  2 tasksw		bit(1),		/* non-zero if to set up task */
	  2 compsw		bit(1),		/* non-zero if compile-only task */
	  2 runsw			bit(1),		/* non-zero if call to be processed immediately */
	  2 trunsw		bit(1),		/* non-zero if subtask list to be processed */
	  2 logsw			bit(1),		/* non-zero if in print mode */
	  2 errsw			bit(1)) unal;	/* non-zero if to print error tasks only */

     dcl	1 stat			aligned,		/* data structure for status_ */
	 (2 type			bit(2),		/* entry type */
	  2 nnames		bit(16),		/* number of names returned */
	  2 nrp			bit(18),		/* rel pointer to name array */
	  2 dtm			bit(36),		/* date/time modified */
	  2 dtu			bit(36),		/* date/time used */
	  2 mode			bit(5),		/* t, r, e, w, a */
	  2 pad			bit(13),		/* unused */
	  2 recs			bit(18),		/* pages used */
	  2 dtd			bit(36),		/* date/time dumped */
	  2 dtem			bit(36),		/* date/time entry modified */
	  2 acct			bit(36),		/* accounting data */
	  2 curlen		bit(12),		/* length of segment */
	  2 bitcnt		bit(24),		/* bitcount of segment */
	  2 did			bit(4),		/* device id */
	  2 mdid			bit(4),		/* ? */
	  2 copysw		bit(1),		/* segment copy switch */
	  2 pad2			bit(9),		/* unused */
	  2 rbs (0:2)		bit(6),		/* ring brackets */
	  2 uid			bit(36)) unal;	/* unique id */

/**/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


get_uid:		entry (ctlw, areap, parentp, acode, asev, taskp, seqno, dir, seg, uid);

	call cu_$arg_list_ptr (argp);			/* get arglist pointer for alloc_task_, etc. */
	cp = addr (ctlw);				/* get control word pointer */
	if c.rsw then				/* if in restore phase, we don't do that */
	     return;				/* scram */
	if c.tasksw then				/* are we to allocate a task? */
	     call upd_add_task_("upd_status_task_$get_uid", argp);
	logsw = c.logsw;				/* non-zero if printing */
	if c.errsw then if asev = 0 then		/* errors only? */
	     logsw = "0"b;				/* happy to oblige */
	runsw = c.runsw | c.trunsw;			/* non-zero if processing */
	if logsw then do;				/* user is nosy */
	     call ioa_$ioa_stream ("installation_list_", "^5x^RGet unique id^B^-^a>^a", dir, seg);
	     if asev ^= 0 then			/* was there an error last time? */
		call upd_print_err_(acode, asev);	/* yes, tell user */
	     end;
	if runsw then do;				/* are we in process mode? */
	     call upd_status_$long (dir, seg, 1, addr(stat), null, code);
	     if code = 0 then if stat.type = "10"b then do; /* is entry a directory ? */
		code = error_table_$not_seg_type;	/* give user some kind of error */
		sev = 0;				/* but only a sev of 0, he might want this! */
		end;
	     if code = 0 then if uid ^= ""b then if uid ^= stat.uid then do;
		code = error_table_$non_matching_uid;	/* verify unique id */
		sev = 3;				/* make sure severity is 3 here */
		end;
	     if code ^= 0 then do;			/* error? */
err:		call upd_task_err_(code, sev, argp, "upd_status_task_$get_uid", "^a>^a", dir, seg);
		return;				/* exit */
		end;
	     end;
	if runsw then				/* do it? */
	     uid = stat.uid;			/* do it */
	if logsw then if uid ^= "0"b then		/* printing too? */
	     call ioa_$ioa_stream ("installation_list_", "^-^w", uid);/* yes, print non-zero uid */
	return;					/* not much of a cough... */


	end upd_status_task_;
