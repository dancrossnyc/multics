/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


upd_ring_task_:	proc;

dcl					/* arguments passed */
     ctlw		bit (36) aligned,
     areap	ptr,
     parentp	ptr,
     acode	fixed bin (35),
     asev		fixed bin,
     taskp	ptr,
     seqno	fixed bin,
     dir		char (168),
     seg		char (32),
     msgseg	char (32),
     Uid		bit (36) aligned,
     Rb (3)	fixed bin (3),
     recover	bit (1);

dcl  1  c  aligned based ( addr(ctlw) ),	/* expanded view of control_word (ctlw) */
      (2  rsw		bit (1),
       2  task_sw		bit (1),
       2  compile_sw	bit (1),
       2  run_sw		bit (1),
       2  task_run_sw	bit (1),
       2  log_sw		bit (1),
       2  error_sw		bit (1),
       2  brief_sw		bit (1),
       2  detail_sw		bit (1),
       2  clear_code_sw	bit (1),
       2  clear_uid_sw	bit (1)) unaligned;

dcl  1  Stat aligned,			/* area for info gotten from upd_status_ */
      (2  type		bit (2),
       2  nnames		bit (16),
       2  nrp		bit (18),
       2  dtm		bit (36),
       2  dtu		bit (36),
       2  mode		bit (5),
       2  pad		bit (13),
       2  rec		bit (18),
       2  dtd		bit (36),
       2  dtem		bit (36),
       2  acct		bit (36),
       2  curlen		bit (12),
       2  bitcnt		bit (24),
       2  did		bit (4),
       2  mdid		bit (4),
       2  copysw		bit (1),
       2  pad2		bit (9),
       2  rbs (3)		bit (6),
       2  uid		bit (36) ) unaligned;

dcl
     cu_$arg_list_ptr			entry (ptr),
     cu_$level_get				entry returns (fixed bin),
     upd_add_task_				entry ( char(*), ptr),
     upd_print_err_				entry options (variable),
     upd_status_$long			entry ( char(*), char(*), fixed bin, ptr, ptr, fixed bin (35) ),
     upd_task_err_				entry options (variable),
     hcs_$get_ring_brackets			entry (char(*), char(*), (3) fixed bin(3), fixed bin(35)),
     set_ring_brackets_entry			entry (char(*), char(*), (3)fixed bin(3), fixed bin(35)) variable,
     hcs_$set_ring_brackets			entry (char(*), char(*), (3)fixed bin(3), fixed bin(35)),
     installation_tools_$set_ring_brackets	entry (char(*), char(*), (3) fixed bin(3), fixed bin(35)),
     ioa_$ioa_stream			entry options (variable);

dcl linkage_error			condition;
dcl  error_table_$non_matching_uid	ext fixed bin (35);
dcl  null builtin;

dcl
     argp		ptr,
     e		fixed bin,
     i		fixed bin,
     sev		fixed bin init (3),
     code		fixed bin (35) init (0),
     logsw	bit (1),
     runsw	bit (1),
     trb (3)	fixed bin (3),
     Entry (2)	char (32) init (
		     "upd_ring_task_$list",
		     "upd_ring_task_$set" ),
     amsg (2)	char (4) init (
		     "List",
		     "Set " );


list:	entry ( ctlw, areap, parentp, acode, asev, taskp, seqno, dir, seg, msgseg, Uid, Rb);

	if ctlw & "10000000011"b		/* this entry doesn't run in reverse mode or */
	     then return;			/* in "clear" mode                       */
	e = 1;
	goto common;

set:	entry ( ctlw, areap, parentp, acode, asev, taskp, seqno, dir, seg, msgseg, Uid, Rb, recover);

	if ctlw & "00000000011"b		/* doesn't run in "clear" mode             */
	     then return;
	if ctlw & "10000000000"b		/* but does run in reverse if full           */
	     then if ^recover		/* recovery is possible                      */
		then return;
	e = 2;

common:
	call cu_$arg_list_ptr (argp);
	logsw = c.log_sw;
	runsw = c.run_sw | c.task_run_sw;
	if c.error_sw			/* if printing errors, and we have */
	     then if asev = 0		/* no errors to print then         */
		then logsw = "0"b;		/* we won't print any!             */
	if c.task_sw
	     then call upd_add_task_ ( (Entry(e)), argp);	/* add my task to list */
	if logsw
	     then do;
	          if seg = msgseg
		     then call ioa_$ioa_stream ("installation_list_","^5x^R^a rings^-^a>^a^B",amsg(e),dir,seg);
		     else call ioa_$ioa_stream("installation_list_","^5x^R^a rings^-^a>^a^2x(^a)^B",
						amsg(e),dir,seg,msgseg);
		if Rb(1) ^= 0		/* zero here means deferred information gathering */
		     then call ioa_$ioa_stream("installation_list_","^-^R^d,^d,^d^B",Rb(1),Rb(2),Rb(3));
		     else if e = 2 
			then call ioa_$ioa_stream("installation_list_","^-^RRing list is empty.^B");
		if asev ^= 0
		     then call upd_print_err_ (acode,asev);
		end;
	if runsw
	     then do;
		call upd_status_$long ( dir, seg, 1, addr(Stat), null, code);
		     if code ^= 0 then goto baderr;
		if Uid ^= ""b
		     then do;
			if Uid ^= Stat.uid
			     then code = error_table_$non_matching_uid;
			if code ^= 0 then goto baderr;
			end;
		     on linkage_error begin;
			set_ring_brackets_entry = hcs_$set_ring_brackets;
			goto revert_linkage_error;
			end;
		     set_ring_brackets_entry = installation_tools_$set_ring_brackets;
revert_linkage_error:    revert linkage_error;
		if ^c.rsw
		     then goto lable(e);
		     else goto reverse;
		end;
	goto exit;

baderr:
	call upd_task_err_ (code, sev, argp, (Entry(e)),"^a>^a", dir, seg);
	return;

lable(1):
	if Rb(1) = 0			/* if we haven't already gotten the info, */
	     then call hcs_$get_ring_brackets (dir, seg, Rb, code); /* then get the ring brackets */
	goto exit;

lable(2):
	call set_ring_brackets_entry ( dir, seg, Rb, code);
	     if code ^= 0 then goto baderr;
	goto exit;

reverse:
	trb(1), trb(2), trb(3) = fixed ( cu_$level_get(), 3);
	call set_ring_brackets_entry ( dir, seg, trb, code);
	     if code ^= 0 then goto baderr;
exit:
	return;					/* normal exit */


	end;
