/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


upd_status_:	procedure (dir, seg, chase, statp, areap, code);


/*

	This procedure provides an interface to hcs_$status which makes
	links transparent to the caller if the chase switch in the call
	is non-zero, i.e. status of the target branch is returned with
	names on the link.

	P. Bos, May 1972

*/

     dcl	dir			char(*),		/* dirname of segment in question */
	seg			char(*),		/* entryname of segment */
	chase			fixed bin(1),	/* non-zero if to chase link */
	statp			ptr,		/* pointer to status structure */
	areap			ptr,		/* pointer to area */
	code			fixed bin(35);	/* status code for call */

     dcl	hcs_$status_		entry (char(*), char(*), fixed bin(1), ptr, ptr, fixed bin(35)),
	hcs_$status_long		entry (char(*), char(*), fixed bin(1), ptr, ptr, fixed bin(35));

     dcl	null			builtin;

     dcl	error_table_$no_s_permission	fixed bin(35) ext static;

     dcl	long_status_block		bit(360) aligned based (statp),
						/* overlay for status block */
	status_block		bit(144) aligned based (statp);
						/* ditto */

     dcl	1 stat			aligned based (statp),	/* first part of status block */
	 (2 type			bit(2),		/* entry type */
	  2 nnames		bit(16),		/* number of names on entry */
	  2 nrp			bit(18)) unal;	/* rel. pointer to name array */

     dcl (nnames			bit(16),
	nrp			bit(18),
	sw			bit(1)) aligned;

/**/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


	sw = "0"b;				/* short mode of status_ call */
	status_block = "0"b;			/* hcs_$status_ doesn't zero entries in stat */
	call hcs_$status_(dir, seg, 0, statp, areap, code);
	go to join;				/* skip */


long:		entry (dir, seg, chase, statp, areap, code);


	sw = "1"b;				/* long mode */
	long_status_block = "0"b;			/* hcs_$status_long doesn't zero entries either. */
	call hcs_$status_long (dir, seg, 0, statp, areap, code);

join:	if code ^= 0 then				/* was there an error? */
	     if code ^= error_table_$no_s_permission then	/* ignore no_s_permission errors. */
		return;
	     else if areap ^= null then		/* unless user wants names also. */
		return;
	if chase ^= 0 then if stat.type = "00"b then do;	/* user wants to chase link */
	     nnames = stat.nnames;			/* save count and pointer */
	     nrp = stat.nrp;			/* of current name list */
	     if sw then				/* call status_ again with chase option */
		call hcs_$status_long (dir, seg, 1, statp, null, code);
	     else					/* but without names */
		call hcs_$status_(dir, seg, 1, statp, null, code);
	     stat.nnames = nnames;			/* put back original name list */
	     stat.nrp = nrp;			/* count and pointer */
	     end;

	if code = error_table_$no_s_permission then	/* ignore this error. */
	     code = 0;


	end upd_status_;
