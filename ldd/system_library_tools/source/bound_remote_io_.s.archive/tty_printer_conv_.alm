" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1982 *
" *                                                         *
" * Copyright (c) 1972 by Massachusetts Institute of        *
" * Technology and Honeywell Information Systems, Inc.      *
" *                                                         *
" ***********************************************************


" tty_printer_conv_ - co-routine for prt_conv_ to be used
" from the remote_teleprinter_ and remote_printer_
" IO modules when attaching through the tty_printer_ IO module.
"
"	coded 4/79 by J. C. Whitmore (with print_conv_ and ibm2780_conv_ as guides)
"

	include	stack_header

	include	prt_conv_info

	name	tty_printer_conv_

	segdef	tty_printer_conv_
	segdef	teleprinter
	segdef	printer

	even
	tempd	saved_lp
	temp	char,VTstop,residue,last_print,a_reg,temp1,temp2

tty_printer_conv_:
teleprinter:
printer:
	tra	print_send_init
	tra	print_send_chars
	tra	print_send_slew_pattern
	tra	print_send_slew_count

" 
" Entry called at beginning of conversion

print_send_init:
	stz	last_print	no print positions used yet
	ldq	lb|pci.line	get current line or end of slew
	sbq	lb|pci.slew_residue	calc actual line for this call
	sbq	1,dl		.. cause VT stops are at 11 ...
	div	10,dl		compute starting VT stop
	stq	VTstop		save tab stop of current line
	sta	residue		save number of lines from current tab stop
	tra	sb|0		return

" 

print_send_chars:
"
" Here we are to write out the number of chars given in "au" after
" putting out the number of white spaces shown in X2.
" We are starting from the char position defined by last_print
"
	eax2	0,2		set indicators from X2
	tmoz	nospace		if no white space, skip following

	sta	a_reg		save the printable char count
	sprilp	saved_lp		save the current lp
	epaq	*		get our seg no in au
	epbplp	sp|0		find the stack base
	lprplp	lp|stack_header.lot_ptr,*au	get static ptr in lp
	ldq	lp|send_ht	see if we can send HT chars
	tmoz	no_ht		if not just use space chars

	ldq	last_print	look for current HT stop
	div	10,dl		get starting HT stop in ql
	stq	temp1		save this
	sta	temp2		save positions after stop
	eaq	0,2		get space count in Q
	qrs	18		move to ql
	adq	last_print	get target position
	div	10,dl		get total tabs to target
	sbq	temp1		convert to relative tabs
"				spaces beyond last tab are in al
	tze	no_ht		if none, just use spaces

	mlr	(),(pr,rl),fill(011)
	desc9a	*,0		move nothing...
	desc9a	bb|0,ql		but fill with "ql" tabs
	a9bd	bb|0,ql		move output pointer past the tabs

	eax2	0,al		put the remaining space count back in x2
	lda	10,dl
	sba	temp2		get spaces for first tab
	sta	temp2		and save it
	sbq	1,dl		take first tab from count
	mpy	10,dl		get spaces for other tabs
	adq	temp2		get total spaces
	asq	last_print	update the last position used

no_ht:	lda	a_reg		restore the original A register
	epp4	saved_lp,*	restore the lp
	mlr	(),(pr,rl),fill(040)  insert blanks into output
	desc9a	*,0		..
	desc9a	bb|0,x2		..

	a9bd	bb|0,2		step output pointer over blanks
	eaq	0,2		get the space count
	qrs	18		..into ql
	asq	last_print	and update the last position used
	eax2	0		set white space count back to zero

nospace:	mlr	(pr,rl),(pr,rl)	copy characters into output
	desc9a	bp|0,au		..
	desc9a	bb|0,au		..

	a9bd	bp|0,au		step input and output pointers
	a9bd	bb|0,au		..

	ars	18		move char count to al
	asa	last_print	and update the position count
	als	18		restore it, just in case
	tra	sb|0		return to caller

" 

print_send_slew_pattern:
"
" The A contains the pattern to search for 000 -> FF, 013 -> TOIP, 011 -> TOOP.
" But, for tty_printer_conv_ we can only assume the device supports a FF and no
" other patterns.  So, always give a form feed for this entry.
"
	lda	ffchar
	sta	char

stslew:	mlr	(pr),(pr)		move the slew char in "char" to output string
	desc9a	char,1		..
	desc9a	bb|0,1		..
	ldq	1,dl
	a9bd	bb|0,ql		move output pointer past the slew char
	tra	sb|0		return to caller


nlchar:	vfd	o9/012
crchar:	vfd	o9/015
vtchar:	vfd	o9/013
ffchar:	vfd	o9/014
" 
print_send_slew_count:
"
" When called at this entry, the count of the number of lines to slew
" is in the A register (al).  If the target device can accept VT chars
" to get to the target line, we will try to send them instead of
" writting out the slew count as NL chars.
"
	cmpa	1,dl		try to optomize for CR and NL alone
	tmoz	no_vt

	sta	a_reg		save the slew count for later
	sprilp	saved_lp		save the current lp
	epaq	*		get our seg no in au
	epbplp	sp|0		find the stack base
	lprplp	lp|stack_header.lot_ptr,*au	get static ptr in lp
	ldq	lp|send_vt	see if we can send VT chars at all
	tmoz	send_nl		if not send NL chars

	ldq	lb|pci.line	pickup target of slew
	sbq	1,dl		correct for tabs at 11, 21,...
	div	10,dl		get total VT stops in ql
	sbq	VTstop		reduce the total VT count by current VTstop
	tze	send_nl		if not passing a stop, send new_lines

	ldq	vtchar		put out one VT char for this call
	stq	char		save where stslew can find it
	ldq	10,dl		max lines per stop to ql
	sbq	residue		compute number of lines slewed by VT
	stq	temp1		..
	epp4	saved_lp,*
	lda	a_reg		restore the original slew count
	sba	temp1		reduce the slew count by lines slewed
	tra	stslew		let common code do the work

send_nl:	epp4	saved_lp,*	restore the lp
	lda	a_reg
no_vt:	ldq	crchar
	sba	1,dl		one at a time
	tmi	2,ic
	ldq	nlchar
	stq	char
	tra	stslew
"
" EXTERNAL VARIABLES - to be set by the IO module to control
" which slew characters can be put into the output string.
"
	use internal_static
	join	/link/internal_static

	segdef	send_vt
	segdef	send_ht


send_vt:
	even
	vfd	o36/0		if zero, don't output VT chars

send_ht:

	vfd	o36/0		if zero, don't output HT chars



	end
