/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: style4 */

/* format: off */

/* remote_printer_: An I/O module for communicating with a remote printer or its equivilent */

/* Created:  March 1977 by David Vinograd */
/* Modified: May 1978 by David Vinograd to clean up and interface to user TTFs */
/* Modified: November 1978 by J. C. Whitmore to make all attach options for remote_xxx_ dims consistent */
/* Modified: March 1980 by J. C. Whitmore to use the terminal_io_record interface to the terminal IO module */
/* Modified: 13 December 1981 by G. Palter to not use illegal PL/I and provide sufficient extra space for prt_conv_ to
      output control sequences */

/****^  HISTORY COMMENTS:
  1) change(88-06-07,Brunelle), approve(88-06-07,MCR7911),
     audit(88-10-24,Farley), install(88-11-08,MR12.2-1205):
     Add support for model name argument on attach.  This includes calling a
     module based on the model name to setup for any special processing
     required.  Also add support to disable prt_conv_ processing and
     recognize rawo modes and pass them to tty_ module.
                                                   END HISTORY COMMENTS */

/* format: on */

remote_printer_: procedure ();

/* Parameters */

dcl  a_code fixed bin (35) parameter;			/* error code */
dcl  a_data_chars fixed bin (21) parameter;		/* number of chars to be input/output */
dcl  a_data_ptr ptr parameter;			/* ptr to chars to be input/output */
dcl  a_infop ptr parameter;				/* info ptr to control order */
dcl  a_iocbp ptr parameter;				/* iocb ptr */
dcl  a_mode fixed bin parameter;			/* The open mode */
dcl  a_new_modes char (*) parameter;			/* new modes to assign */
dcl  a_old_modes char (*) parameter;			/* current modes */
dcl  a_option (*) char (*) var parameter;		/* options for attach */
dcl  a_order char (*) parameter;			/* order to be executed */
dcl  a_pos_type fixed bin parameter;			/* iox_$position positioning type */
dcl  a_pos_value fixed bin (21) parameter;		/* iox_$position positioning count */
dcl  a_sw bit (1) parameter;				/* com_err_ switch for attach */

/* Automatic */

dcl  attach_entry entry (ptr, fixed bin (35)) variable;	/* special model entry to call to complete attachment */
dcl  attach_entry_name char (64);			/* module name for special model attachment */
dcl  charp ptr;					/* ptr to next char for output in put_chars entrypoint */
dcl  code fixed bin (35);				/* general error code */
dcl  com_err_sw bit (1);				/* Set if com_err_ should be called on attach error */
dcl  cur_page fixed bin (24);				/* current page number being output as returned by prt_conv_ */
dcl  device_opt char (32) var;
dcl  dummy char (32) var;				/* type of device for attachment */
dcl  ec fixed bin (35);				/* secondary error code */
dcl  i fixed bin (21);				/* misc counter */
dcl  idx fixed bin;					/* attachment argument index */
dcl  ignore fixed bin (35);				/* dummy error code */
dcl  infop ptr;					/* internal copy of control order info pointer */
dcl  iocbp ptr;					/* internal copy of iocb ptr */
dcl  mask bit (36) aligned;				/* for setting ips mask */
dcl  my_options char (256) var;			/* some of the attachment options */
dcl  open_mode fixed bin;				/* copy of user supplied input mode */
dcl  order char (32);				/* copy of user supplied order */
dcl  prt_conv_outp ptr;				/* where prt_conv_ is to put processed data */
dcl  record_len fixed bin (21);			/* length of prt_conv_ processed record */
dcl  remaining_chars fixed bin (21);			/* number of chars left for prt_conv_ to process */
dcl  temp_iocbp ptr;				/* temporary IOCB prt */
dcl  terminal_attach_desc char (256) var;
dcl  terminal_attach_options char (256) var;
dcl  terminal_switch_name char (32) var;
dcl  total_chars fixed bin (24);			/* number of chars requested for put_chars */

/* Internal Static */

dcl  attach_count fixed bin int static init (0);
dcl  my_area_ptr ptr int static init (null);
dcl  my_area area based (my_area_ptr);
dcl  prt_conv_on bit (1) internal static init ("1"b);
dcl  static_comerr_sw bit (1) int static init ("0"b);

/* Constants */

dcl  printer_device char (32) int static options (constant) init ("printer");
dcl  remote_device_name char (15) int static options (constant) init ("remote_printer_");
dcl  space char (1) static init (" ") int options (constant);

/* External Procedures & Variables */

dcl  com_err_ entry options (variable);
dcl  continue_to_signal_ entry (fixed bin (35));
dcl  cv_entry_ entry (char (*), ptr, fixed bin (35)) returns (entry);
dcl  error_table_$bad_arg ext fixed bin (35);
dcl  error_table_$bad_conversion fixed bin (35) ext;
dcl  error_table_$bad_mode ext fixed bin (35);
dcl  error_table_$noarg ext fixed bin (35);
dcl  error_table_$not_attached ext fixed bin (35);
dcl  error_table_$not_closed ext fixed bin (35);
dcl  error_table_$not_detached ext fixed bin (35);
dcl  error_table_$not_open ext fixed bin (35);
dcl  error_table_$request_pending ext fixed bin (35);
dcl  error_table_$wrong_no_of_args ext fixed bin (35);
dcl  get_system_free_area_ entry () returns (pointer);
dcl  hcs_$make_ptr entry (ptr, char (*), char (*), ptr, fixed bin (35));
dcl  hcs_$reset_ips_mask entry (bit (36) aligned, bit (36) aligned);
dcl  hcs_$set_ips_mask entry (bit (36) aligned, bit (36) aligned);
dcl  ioa_ entry options (variable);
dcl  iox_$attach_ioname entry (char (*), ptr, char (*), fixed bin (35));
dcl  iox_$close entry (ptr, fixed bin (35));
dcl  iox_$control entry (ptr, char (*), ptr, fixed bin (35));
dcl  iox_$detach_iocb entry (ptr, fixed bin (35));
dcl  iox_$err_no_operation entry;
dcl  iox_$modes entry (ptr, char (*), char (*), fixed bin (35));
dcl  iox_$open entry (ptr, fixed bin, bit (36), fixed bin (35));
dcl  iox_$position entry (ptr, fixed bin, fixed bin (21), fixed bin (35));
dcl  iox_$propagate entry (ptr);
dcl  iox_$put_chars entry (ptr, ptr, fixed bin (21), fixed bin (35));
dcl  iox_$write_record entry (ptr, ptr, fixed bin, fixed bin (35));
dcl  prt_conv_ entry (ptr, fixed bin (21), ptr, fixed bin (21), ptr);
dcl  remote_printer_control_ entry (ptr, char (*), ptr, fixed bin (35));
dcl  remote_printer_modes_ entry (ptr, char (*), char (*), fixed bin (35));
dcl  sys_info$max_seg_size fixed bin ext;

/* Conditions and Builtins */

dcl  (conversion, cleanup, any_other) condition;

dcl  (addr, bin, char, currentsize, hbound, index, ltrim, null, rtrim, substr, unspec) builtin;
%page;

remote_printer_attach:
     entry (a_iocbp, a_option, a_sw, a_code);

	iocbp = a_iocbp;
	com_err_sw = a_sw | static_comerr_sw;		/* report errors if either is on */
	code, a_code = 0;

	if my_area_ptr = null then
	     my_area_ptr = get_system_free_area_ ();

	adp = null;
	if iocbp -> iocb.attach_descrip_ptr ^= null then do;
	     code = error_table_$not_detached;
	     call abort_attach (code, "Switch name: ^a", iocbp -> iocb.name);
	end;

	if hbound (a_option, 1) < 1 then do;		/* Must be at least one */
	     code = error_table_$wrong_no_of_args;
	     call abort_attach (code, "Bad attach description.", "");
	end;

	on cleanup call clean_up;

	allocate ad in (my_area) set (adp);		/* make space for the attach data structure */

/* Initialize the Attach Data Structure variables */

	ad.bits = "0"b;
	ad.fixed = 0;
	ad.ptrs = null;
	ad.chars = "";
	unspec (ad.remote_pci) = "0"b;
	unspec (ad.info) = "0"b;
	ad.device_type = PRINTER_DEVICE;		/* default for terminal_io_record structure */
	ad.sheets_per_page = 1;
	ad.phys_line_length = 132;			/* this will normally get reset by a paper_info control order */
	ad.phys_page_length = 66;
	ad.lpi = 6;
	ad.line = 1;
	ad.cv_proc = null;				/* not defined until the open operation */

/* Process options */

	terminal_attach_options = "";
	my_options = "";
	terminal_attach_desc = "";
	device_opt = "printer";			/* our default device option */

	do idx = 1 to hbound (a_option, 1);
	     if a_option (idx) = "-physical_line_length" | a_option (idx) = "-pll" then do;
		ad.phys_line_length = cv_dec_arg (idx);
		terminal_attach_options = terminal_attach_options || " -pll " || a_option (idx);
	     end;
	     else if a_option (idx) = "-physical_page_length" | a_option (idx) = "-ppl" then do;
		ad.phys_page_length = cv_dec_arg (idx);
		my_options = my_options || " -ppl " || a_option (idx);
	     end;
	     else if a_option (idx) = "-horizontal_tab" | a_option (idx) = "-htab" then do;
		ad.ht = "1"b;
		terminal_attach_options = terminal_attach_options || space || a_option (idx);
	     end;
	     else if a_option (idx) = "-runout_spacing" | a_option (idx) = "-runsp" then do; /* grab this and next arg */
		dummy = get_arg (idx);		/* don't pass on but say we got it */
		my_options = my_options || " -runsp " || dummy;
	     end;
	     else if a_option (idx) = "-terminal" then do;
		ad.terminal = get_arg (idx);
		my_options = my_options || " -terminal " || ad.terminal;
	     end;
	     else if a_option (idx) = "-device" then
		device_opt = get_arg (idx);		/* check out this option */
	     else if a_option (idx) = "-model" then do;
		ad.chars.model = get_arg (idx);
	     end;
	     else terminal_attach_options = terminal_attach_options || space || a_option (idx);
	end;

	if ad.terminal = "" then do;
	     code = error_table_$noarg;
	     call abort_attach (code, "No terminal IO Module specified.", "");
	end;

	if ad.phys_line_length < 1 | ad.phys_line_length > 512 then do;
	     code = error_table_$bad_arg;
	     call abort_attach (code, "Invalid line length specified.", "");
	end;

	if ad.phys_page_length < 10 | ad.phys_page_length > 128 then do;
	     code = error_table_$bad_arg;
	     call abort_attach (code, "Invalid page length specified.", "");
	end;

	if device_opt ^= "printer" then do;		/* was it changed? */
	     code = error_table_$bad_arg;
	     call abort_attach (code, "Invalid -device option: ", (device_opt));
	end;

/* Attach through terminal dim */

	attach_count = attach_count + 1;		/* new attach name tag number each time */
	if attach_count > 999 then
	     attach_count = 1;
	terminal_switch_name = remote_device_name || ltrim (char (attach_count));
						/* make the  switch name */

	terminal_attach_options = ltrim (terminal_attach_options) || " -device " || device_opt;
	terminal_attach_desc = ad.terminal || space || terminal_attach_options;
	ad.attach_desc = remote_device_name || my_options || space || terminal_attach_options;

	call iox_$attach_ioname ((terminal_switch_name), temp_iocbp, (terminal_attach_desc), code);
	if code ^= 0 then
	     call abort_attach (code, "Unable to attach to terminal ", "");

	ad.terminal_iocbp = temp_iocbp;

/* Now mask and complete the iocb */

	mask = "0"b;

	on any_other call handler;

	call hcs_$set_ips_mask ("0"b, mask);
	iocbp -> iocb.attach_descrip_ptr = addr (ad.attach_desc);
	iocbp -> iocb.attach_data_ptr = adp;
	iocbp -> iocb.open = remote_printer_open;
	iocbp -> iocb.detach_iocb = remote_printer_detach;
	call iox_$propagate (iocbp);
	call hcs_$reset_ips_mask (mask, mask);

	revert any_other;

/* if a model is defined, special processing might be required for some of
   them.  See if there is a special processing module to complete the
   attachment.  If there is, call it and let it fiddle with the iocb */

	if ad.chars.model ^= "" then do;
	     attach_entry_name = "iodd_" || rtrim (ad.chars.model) || "_support_$complete_attach";
	     attach_entry = cv_entry_ (attach_entry_name, null, code);
	     if code ^= 0 then
		call abort_attach (code, "Unable to locate ^a.", (attach_entry_name));
	     call attach_entry (iocbp, code);
	     if code ^= 0 then
		call abort_attach (code, "Calling ^a.", (attach_entry_name));
	end;

	call remote_printer_control_ (iocbp, "reset", null, code);
	if code ^= 0 then
	     call abort_attach (code, "Unable to reset printer data", "");

attach_return:
	return;
%page;

remote_printer_detach:
     entry (a_iocbp, a_code);

	iocbp = a_iocbp;
	code, a_code = 0;
	adp = iocbp -> iocb.attach_data_ptr;

	if adp = null then do;
	     a_code = error_table_$not_attached;
	     return;
	end;

	if iocbp -> iocb.open_descrip_ptr ^= null then do;
	     a_code = error_table_$not_closed;
	     return;
	end;

	call clean_up;

	mask = "0"b;

	on any_other call handler;

	call hcs_$set_ips_mask ("0"b, mask);

	iocbp -> iocb.attach_descrip_ptr = null;

	call iox_$propagate (iocbp);

	call hcs_$reset_ips_mask (mask, mask);

	revert any_other;

	return;
%page;

remote_printer_open:
     entry (a_iocbp, a_mode, a_sw, a_code);

	iocbp = a_iocbp -> iocb.actual_iocb_ptr;
	code, a_code = 0;
	adp = iocbp -> iocb.attach_data_ptr;

	if adp = null then do;
	     a_code = error_table_$not_attached;
	     return;
	end;

	if iocbp -> iocb.open_descrip_ptr ^= null then do;
	     a_code = error_table_$not_closed;
	     return;
	end;

	open_mode = a_mode;
	if ^((open_mode = Stream_output) | (open_mode = Stream_input_output)) then do;
	     a_code = error_table_$bad_mode;
	     return;
	end;

	call iox_$open (ad.terminal_iocbp, Sequential_output, "0"b, a_code);
						/* try for record output */
	if a_code = 0 then do;
	     ad.record_io = "1"b;			/* we have record interface approval */
	     call hcs_$make_ptr (null, "remote_conv_", "printer", ad.cv_proc, a_code);
	     if a_code ^= 0 then
		return;
	end;
	else do;
	     ad.record_io = "0"b;			/* try for stream interface */
	     call iox_$open (ad.terminal_iocbp, Stream_output, "0"b, a_code);
	     if a_code ^= 0 then
		return;
	     call hcs_$make_ptr (null, ad.terminal || "conv_", "printer", ad.cv_proc, a_code);
	     if a_code ^= 0 then
		return;
	end;

	ad.open_description = rtrim (iox_modes (open_mode));
	mask = "0"b;

	on any_other call handler;

	call hcs_$set_ips_mask ("0"b, mask);

	iocbp -> iocb.put_chars = remote_printer_put_chars;
	iocbp -> iocb.control = remote_printer_control;
	iocbp -> iocb.modes = remote_printer_modes;
	iocbp -> iocb.position = remote_printer_position;
	iocbp -> iocb.close = remote_printer_close;
	iocbp -> iocb.open_descrip_ptr = addr (ad.open_description);

	call iox_$propagate (iocbp);

	call hcs_$reset_ips_mask (mask, mask);

	revert any_other;

	return;
%page;

remote_printer_close:
     entry (a_iocbp, a_code);

	iocbp = a_iocbp -> iocb.actual_iocb_ptr;
	a_code = 0;
	adp = iocbp -> iocb.attach_data_ptr;

	if adp = null then do;
	     a_code = error_table_$not_attached;
	     return;
	end;

	if iocbp -> iocb.open_descrip_ptr = null then do;
	     a_code = error_table_$not_open;
	     return;
	end;

	call iox_$close (ad.terminal_iocbp, a_code);
	if a_code = error_table_$not_open | a_code = error_table_$not_attached then
	     a_code = 0;

	mask = "0"b;

	on any_other call handler;

	call hcs_$set_ips_mask ("0"b, mask);

	iocbp -> iocb.open_descrip_ptr = null;
	iocbp -> iocb.open = remote_printer_open;
	iocbp -> iocb.detach_iocb = remote_printer_detach;
	iocbp -> iocb.control = iox_$err_no_operation;
	iocbp -> iocb.position = iox_$err_no_operation;
	iocbp -> iocb.modes = iox_$err_no_operation;

	call iox_$propagate (iocbp);

	call hcs_$reset_ips_mask (mask, mask);

	revert any_other;

	return;
%page;

remote_printer_put_chars:
     entry (a_iocbp, a_data_ptr, a_data_chars, a_code);

	iocbp = a_iocbp -> iocb.actual_iocb_ptr;
	code, a_code = 0;
	adp = iocbp -> iocb.attach_data_ptr;

	if adp = null then do;
	     a_code = error_table_$not_attached;
	     return;
	end;

	if iocbp -> iocb.open_descrip_ptr = null then do;
	     a_code = error_table_$not_open;
	     return;
	end;

	if a_data_chars < 0 | a_data_chars > sys_info$max_seg_size * 4 then do;
	     a_code = error_table_$bad_arg;
	     return;
	end;

	total_chars, remaining_chars = a_data_chars;	/* remaining_chars is decremented as data is sent */
	charp = a_data_ptr;				/* charp is bumped by prt_conv_ as data is sent */

	terminal_io_record_ptr = null ();		/* for the cleanup handler */

	call iox_$control (ad.terminal_iocbp, "select_device", addr (printer_device), code);
						/* HACK FOR THE ibm2780_ TERMINAL DIM */
	if code ^= 0 then
	     go to put_chars_ret;

	pcip = addr (ad.remote_pci);			/* ready for the prt_conv_ hack.  We must force a write of
						   all trailing NL chars, even though they have already been
						   accounted for in the remaining chars. */

	terminal_io_record_element_size = 9;		/* always character data */
	terminal_io_record_n_elements = 3 * ad.phys_line_length;
						/* enough room for 1 printing character and 2 non-printing
						   characters per column (eg: DC1-u X) */

	on cleanup
	     begin;
	     if terminal_io_record_ptr ^= null () then
		free terminal_io_record_ptr -> terminal_io_record in (my_area);
	end;

	call alloc_tio_rec;				/* allocate and initialize the terminal_io_record */

	if ad.record_io then
	     prt_conv_outp = terminal_io_record_ptr;	/* full record for record interface */
	else prt_conv_outp = addr (terminal_io_record.data);
						/* use the string for stream interface */

	do while (remaining_chars > 0 | pci.slew_residue > 0);
						/* so keep trying while there is anything to slew */
	     cur_page = pci.page_count;		/* save the page number */

/* ********************************************************************
   *  Call prt_conv_ or not, depending on the value of the static	*
   *  switch prt_conv_on.					*
   ******************************************************************** */

	     if prt_conv_on then
		call prt_conv_ (charp, remaining_chars, prt_conv_outp, record_len, pcip);
	     else do;
		prt_conv_outp = charp;
		record_len = remaining_chars;
		remaining_chars = 0;
	     end;

	     if ^ad.noprint then do;			/* if actually printing, send to the terminal */
		if ad.record_io & prt_conv_on then do;
		     call iox_$write_record (ad.terminal_iocbp, terminal_io_record_ptr,
			4 * currentsize (terminal_io_record), code);
		end;
		else do;				/* stream output */
		     call iox_$put_chars (ad.terminal_iocbp, prt_conv_outp, record_len, code);
		end;
		if code ^= 0 then
		     go to put_chars_ret;		/* trouble */
	     end;

	     if cur_page ^= ad.page_count then do;	/* did we turn another page? */
		ad.stop_counter = ad.stop_counter + 1;	/* bump the page stop counter */
		if ad.single_page | (ad.stop_every ^= 0 & ad.stop_counter >= ad.stop_every) then do;
		     ad.stop_counter = 0;
		     code = error_table_$request_pending;
						/* say we were not done yet */
		     go to put_chars_ret;		/* exit the loop and return to caller */
		end;
	     end;
	end;

put_chars_ret:
	if terminal_io_record_ptr ^= null () then
	     free terminal_io_record_ptr -> terminal_io_record in (my_area);

	ad.chars_printed = ad.chars_printed + total_chars - remaining_chars;
						/* record our progress */

	a_code = code;

	return;
%page;

remote_printer_control:
     entry (a_iocbp, a_order, a_infop, a_code);

	iocbp = a_iocbp -> iocb.actual_iocb_ptr;
	adp = iocbp -> iocb.attach_data_ptr;

	if adp = null then do;
	     a_code = error_table_$not_attached;
	     return;
	end;

	if iocbp -> iocb.open_descrip_ptr = null then do;
	     a_code = error_table_$not_open;
	     return;
	end;

	infop = a_infop;
	order = a_order;
	code, a_code = 0;

	if order = "io_call" then do;
	     if a_infop = null then do;
		a_code = error_table_$bad_arg;
		return;
	     end;
	     order = infop -> io_call_info.order_name;
	     infop = null;
	end;

/* check for prt_conv_on/prt_conv_off orders and handle them
   directly without calling remote_printer_control_. */

	if order = "prt_conv_on" | order = "prt_conv_off" then do;
	     prt_conv_on = order = "prt_conv_on";
	     return;
	end;

	call remote_printer_control_ (iocbp, order, infop, code);
	if code ^= 0 then do;			/* if not done or partially completed, pass it on */
	     call iox_$control (ad.terminal_iocbp, order, infop, ec);
	     if ec = 0 then
		code = 0;				/* let the code from remote_printer_control preveil */
	end;

	if order = "reset" then do;
	     call iox_$control (ad.terminal_iocbp, order, infop, ignore);
	     prt_conv_on = "1"b;
	end;
	a_code = code;

	return;
%page;

remote_printer_modes:
     entry (a_iocbp, a_new_modes, a_old_modes, a_code);

	iocbp = a_iocbp -> iocb.actual_iocb_ptr;
	adp = iocbp -> iocb.attach_data_ptr;
	code, a_code = 0;

	if adp = null then do;
	     a_code = error_table_$not_attached;
	     return;
	end;

	if iocbp -> iocb.open_descrip_ptr = null then do;
	     a_code = error_table_$not_open;
	     return;
	end;

	call remote_printer_modes_ (iocbp, a_new_modes, a_old_modes, a_code);

	if a_new_modes = "default" then do;
	     call iox_$modes (ad.terminal_iocbp, a_new_modes, "", ignore);
	end;
	else if index (a_new_modes, "non_edited") ^= 0 then do;
	     i = index (a_new_modes, "non_edited");
	     if i = 1 then
		call iox_$modes (ad.terminal_iocbp, "non_edited", "", ignore);
	     else if substr (a_new_modes, i - 1, 1) = "^" then
		call iox_$modes (ad.terminal_iocbp, "default", "", ignore);
	     else call iox_$modes (ad.terminal_iocbp, "non_edited", "", ignore);
	end;
	else if index (a_new_modes, "rawo") ^= 0 then do;
	     i = index (a_new_modes, "rawo");
	     if i = 1 then
		call iox_$modes (ad.terminal_iocbp, "rawo", "", ignore);
	     else if substr (a_new_modes, i - 1, 1) = "^" then
		call iox_$modes (ad.terminal_iocbp, "^rawo", "", ignore);
	     else call iox_$modes (ad.terminal_iocbp, "rawo", "", ignore);
	end;

	return;
%page;

remote_printer_position:
     entry (a_iocbp, a_pos_type, a_pos_value, a_code);

	iocbp = a_iocbp -> iocb.actual_iocb_ptr;
	adp = iocbp -> iocb.attach_data_ptr;
	code, a_code = 0;

	if adp = null then do;
	     a_code = error_table_$not_attached;
	     return;
	end;

	if iocbp -> iocb.open_descrip_ptr = null then do;
	     a_code = error_table_$not_open;
	     return;
	end;

	call iox_$position (ad.terminal_iocbp, a_pos_type, a_pos_value, a_code);

	return;






flip_com_err_sw:
     entry;

	static_comerr_sw = ^static_comerr_sw;		/* flip the bit */

	call ioa_ ("The printer com err sw is now: ^[on^;off^]", static_comerr_sw);

	return;
%page;

get_arg:
     procedure (idx) returns (character (*));

dcl  idx fixed bin;

	idx = idx + 1;				/* advance the arg index of the main loop */
	if idx > hbound (a_option, 1) then do;
	     code = error_table_$noarg;
	     call abort_attach (code, "No argument after ^a.", (a_option (idx - 1)));
	end;

	return (a_option (idx));

     end get_arg;



cv_dec_arg:
     procedure (idx) returns (fixed binary);

dcl  idx fixed bin;

	idx = idx + 1;				/* advance the arg index of the main loop */
	if idx > hbound (a_option, 1) then do;
	     code = error_table_$noarg;
	     call abort_attach (code, "No argument after ^a.", (a_option (idx - 1)));
	end;

	on conversion go to bad_dec_arg;

	return (bin (a_option (idx)));

bad_dec_arg:
	code = error_table_$bad_conversion;
	call abort_attach (code, "Invalid decimal number. ^a", (a_option (idx)));

     end cv_dec_arg;



abort_attach:
     procedure (code, str1, str2);

dcl  code fixed bin (35);
dcl  (str1, str2) char (*) aligned;

/* This proc handles attach errors */

	if com_err_sw then
	     call com_err_ (code, remote_device_name, str1, str2);

	a_code = code;

	call clean_up;

	go to attach_return;			/* abort the attach by non-local go to */

     end abort_attach;
%page;

alloc_tio_rec:
     procedure ();

	allocate terminal_io_record in (my_area) set (terminal_io_record_ptr);

	unspec (terminal_io_record) = "0"b;		/* clear everything */

	terminal_io_record.version = terminal_io_record_version_1;
						/* our view of the record structure */
	terminal_io_record.device_type = ad.device_type;
	terminal_io_record.element_size = terminal_io_record_element_size;
						/* set by our caller */

	return;

     end alloc_tio_rec;



clean_up:
     procedure ();

/* this is for any form of abort during attachment */

	if adp ^= null then do;
	     if ad.terminal_iocbp ^= null then
		call iox_$detach_iocb (ad.terminal_iocbp, ignore);
	     free adp -> ad in (my_area);
	     adp = null;
	end;

	iocbp -> iocb.attach_descrip_ptr = null;	/* be sure iox_ knows */
	iocbp -> iocb.attach_data_ptr = null;
	iocbp -> iocb.open = iox_$err_no_operation;

	return;

     end clean_up;


handler:
     procedure ();

dcl  ignore fixed bin (35);

/* This proc handles faults that occur while masked */

	if mask then
	     call hcs_$reset_ips_mask (mask, mask);

	mask = ""b;

	call continue_to_signal_ (ignore);

	return;

     end handler;
%page; %include io_call_info;
%page; %include iocb;
%page; %include iox_modes;
%page; %include prt_conv_info;
%page; %include prt_info;
%page; %include remote_attach_data;
%page; %include terminal_io_record;

     end remote_printer_;
