/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


remote_input_: proc;

/* remote_input_: An I/O module for receiving character records from a remote host. */

/* Coded March 1980 by J. C. Whitmore, modeled after the remote_reader_ IO Module */


/* Parameters */

dcl  a_iocbp ptr parameter;
dcl  a_option (*) char (*) var parameter;		/* Options for attach */
dcl  a_sw bit (1) parameter;				/* com_err_ switch for attach */
dcl  a_code fixed bin (35) parameter;
dcl  a_mode fixed bin parameter;			/* The open mode */
dcl  a_buf_ptr ptr parameter;
dcl  a_buf_chars fixed bin (21) parameter;
dcl  a_data_chars fixed bin (21) parameter;
dcl  a_pos_type fixed bin parameter;
dcl  a_pos_value fixed bin (21) parameter;
dcl  a_order char (*) parameter;
dcl  a_infop ptr parameter;
dcl  a_old_modes char (*) parameter;
dcl  a_new_modes char (*) parameter;

/* AUTOMATIC VARIABLES */

dcl  com_err_sw bit (1);				/* Set if com_err_ sould be called on attach error */
dcl  dummy char (32) var;
dcl  total_chars fixed bin (21);			/* number of chars in a record */
dcl  code fixed bin (35);
dcl  iocbp ptr;
dcl  temp_iocbp ptr;
dcl  slew_string char (128) var;
dcl  mask bit (36) aligned;				/* For setting ips mask */
dcl  device_opt char (32) var;
dcl  idx fixed bin;
dcl  record_len fixed bin;
dcl  max_record_size fixed bin;
dcl  open_mode fixed bin;
dcl  order char (32);
dcl  infop ptr;
dcl  terminal_switch_name char (32) var;
dcl  terminal_attach_options char (256) var;
dcl  my_options char (64) var;
dcl  terminal_attach_desc char (256) var;

/* Constants */

dcl  remote_device_name char (13) int static options (constant) init ("remote_input_");
dcl  space char (1) int static options (constant) init (" ");
dcl  ESC_c char (2) int static options (constant) init ("c");
dcl  ETX char (1) int static options (constant) init ("");
dcl  CR char (1) int static options (constant) init ("");
dcl  NL char (1) int static options (constant) init ("
");
dcl  FF char (1) int static options (constant) init ("");

/* Internal Static and Based variables */

dcl  areap ptr int static init (null);
dcl  attach_count int static init (0) fixed bin;
dcl  static_comerr_sw bit (1) int static init ("0"b);

dcl  my_area area (262144) based (areap);
dcl  char_string char (1024) based;

/* External stuff */

dcl  ioa_ entry options (variable);
dcl  iox_$modes entry (ptr, char (*), char (*), fixed bin (35));
dcl  continue_to_signal_ entry (fixed bin (35));
dcl  get_temp_segment_ entry (char (*), ptr, fixed bin (35));
dcl  hcs_$reset_ips_mask entry (bit (36) aligned, bit (36) aligned);
dcl  hcs_$set_ips_mask entry (bit (36) aligned, bit (36) aligned);
dcl  iox_$propagate entry (ptr);
dcl  com_err_ entry options (variable);
dcl  iox_$position entry (ptr, fixed bin, fixed bin (21), fixed bin (35));
dcl  iox_$attach_ioname entry (char (*), ptr, char (*), fixed bin (35));
dcl  iox_$detach_iocb entry (ptr, fixed bin (35));
dcl  iox_$close entry (ptr, fixed bin (35));
dcl  iox_$open entry (ptr, fixed bin, bit (36), fixed bin (35));
dcl  iox_$get_chars entry (ptr, ptr, fixed bin, fixed bin, fixed bin (35));
dcl  iox_$read_record entry (ptr, ptr, fixed bin, fixed bin, fixed bin (35));
dcl  iox_$control entry (ptr, char (*), ptr, fixed bin (35));
dcl  iox_$err_no_operation entry;

dcl (addr, bin, hbound, min, null, length, substr, rtrim, ltrim, char, size, unspec, copy, empty) builtin;

dcl  error_table_$bad_mode fixed bin (35) ext;
dcl  error_table_$bad_arg fixed bin (35) ext;
dcl  error_table_$eof_record ext fixed bin (35);
dcl  error_table_$not_detached ext fixed bin (35);
dcl  error_table_$not_attached ext fixed bin (35);
dcl  error_table_$not_open ext fixed bin (35);
dcl  error_table_$not_closed ext fixed bin (35);
dcl  error_table_$wrong_no_of_args ext fixed bin (35);
dcl  error_table_$noarg ext fixed bin (35);
dcl  error_table_$bad_conversion ext fixed bin (35);
dcl  error_table_$unimplemented_version ext fixed bin (35);
dcl  error_table_$badopt ext fixed bin (35);
dcl  error_table_$data_loss ext fixed bin (35);

dcl (any_other, cleanup, conversion) condition;


dcl  adp ptr;					/* pointer to the attach data structure */

dcl 1 ad aligned based (adp),
    2 fixed,
      3 device_type fixed bin,			/* type code for terminal_io_record */
      3 rec_length fixed bin,				/* max data length of input record */
      3 record_count fixed bin (35),			/* total records read since last reset control order */
      3 fixed_pad fixed bin,
    2 ptrs,
      3 terminal_iocbp ptr,				/* pointer to the iocbp of the next dim level */
    2 bits,
      3 record_io bit (1) unal,			/* TRUE - if terminal io module uses record interface */
      3 bit_pad bit (35) unal,
    2 chars,
      3 terminal char (32) var,			/* name of the terminal io module */
      3 attach_desc char (256) var,			/* our attach description */
      3 open_description char (24) var;			/* our open description */


dcl 1 count_structure aligned based,			/* structure used for the get_count control order */
    2 line fixed bin,				/* most fields are pads, because this structure */
    2 page_len fixed bin,				/* is based on the printer defined structure */
    2 lmarg fixed bin,				/* shown in prt_order_info.incl.pl1 */
    2 rmarg fixed bin,
    2 records fixed bin (35),				/* this is the normal line count field */
    2 page_count fixed bin;


%include iocb;

%include iox_modes;

%include terminal_io_record;

remote_reader_attach:				/* compatibility */
remote_input_attach: entry (a_iocbp, a_option, a_sw, a_code);

	iocbp = a_iocbp;
	com_err_sw = a_sw | static_comerr_sw;		/* if either one is set ... */
	code, a_code = 0;

	adp = null;
	if iocbp -> iocb.attach_descrip_ptr ^= null then do;
	     code = error_table_$not_detached;
	     call abort_attach (code, "Switch name: ^a", iocbp -> iocb.name);
	end;

	if hbound (a_option, 1) < 1 then do;		/* Must be at least one */
	     code = error_table_$wrong_no_of_args;
	     call abort_attach (code, "Bad attach description.", "");
	end;

	if areap = null then do;
	     call get_temp_segment_ (remote_device_name, areap, code); /* Temp segment for attach data */
	     if code ^= 0 then call abort_attach (code, "Unable to allocate temp segment.", "");
	     areap -> my_area = empty ();		/* initialize our private area */
	end;

	on cleanup call clean_up;

	allocate ad in (my_area) set (adp);

/* Initialize Attach Data Structure variables */

	ad.bits = "0"b;
	ad.ptrs = null;
	ad.chars = "";
	ad.rec_length = -1;				/* mark this as not specified */
	ad.record_count = 0;


/* Process options */

	terminal_attach_options = "";
	my_options = "";
	terminal_attach_desc = "";
	device_opt = "reader";			/* default to reader if no -device is given */

	do idx = 1 to hbound (a_option, 1);
	     if a_option (idx) = "-terminal" then do;
		ad.terminal = get_arg (idx);
		my_options = my_options || " -terminal " || ad.terminal;
	     end;
	     else if a_option (idx) = "-device" then device_opt = get_arg (idx); /* we specify this one */
	     else if a_option (idx) = "-runout_spacing" | a_option (idx) = "-runsp" then do; /* skip this and next arg */
		dummy = get_arg (idx);
		my_options = my_options || " -runsp " || dummy;
	     end;
	     else if a_option (idx) = "-physical_page_length" | a_option (idx) = "-ppl" then do; /* skip this too */
		dummy = get_arg (idx);
		my_options = my_options || " -ppl " || dummy;
	     end;
	     else if a_option (idx) = "-record_len" then do; /* redefine the max record length */
		ad.rec_length = cv_dec_arg (idx);
		my_options = my_options || " -record_len " || a_option (idx);
	     end;
	     else terminal_attach_options = terminal_attach_options || space || a_option (idx);
	end;

	if ad.terminal = "" then do;
	     code = error_table_$noarg;
	     call abort_attach (code, "No terminal IO module specified.", "");
	end;

	if device_opt = "" then do;			/* caller didn't specify */
	     code = error_table_$noarg;
	     call abort_attach (code, "Missing argument to -device option.", "");
	end;
	else if device_opt = "printer_in" then do;
	     ad.device_type = PRINTER_DEVICE;
	     device_opt = "printer";			/* this is for the attachment to the terminal */
	end;
	else if device_opt = "punch_in" then do;
	     ad.device_type = PUNCH_DEVICE;
	     device_opt = "punch";			/* again for the attach description to the terminal */
	end;
	else if device_opt = "reader" then do;
	     ad.device_type = READER_DEVICE;
	end;
	else do;					/* not recognized */
	     code = error_table_$badopt;
	     call abort_attach (code, "Invalid -device option: ^a", (device_opt));
	end;

	if ad.rec_length = -1 then do;		/* not specified - set default max record size */
	     if ad.device_type = READER_DEVICE then ad.rec_length = 160;
	     else ad.rec_length = 1024;		/* lots of room for print lines/files */
	end;

	if ad.device_type = READER_DEVICE then do;	/* range check the record length */
	     if ad.rec_length < 80 | ad.rec_length > 160 then do; /* OOPS - not reasonable */
		code = error_table_$bad_arg;
		call abort_attach (code, "Value for -record_len option out of range.", "");
	     end;
	end;
	else do;
	     if ad.rec_length < 10 | ad.rec_length > 1024 then do;
		code = error_table_$bad_arg;
		call abort_attach (code, "Value for -record_len option out of range.", "");
	     end;
	end;

/* Attach through terminal dim */

	attach_count = attach_count + 1;		/* new attach name tag number each time */
	if attach_count > 999 then attach_count = 1;
	terminal_switch_name = remote_device_name || ltrim (char (attach_count)); /* make the  switch name */

	terminal_attach_options = ltrim (terminal_attach_options) || " -device " || device_opt;
	terminal_attach_desc = ad.terminal || space || terminal_attach_options;
	ad.attach_desc = remote_device_name || my_options || space || terminal_attach_options;

	call iox_$attach_ioname ((terminal_switch_name), temp_iocbp, (terminal_attach_desc), code);
	if code ^= 0 then call abort_attach (code, "Unable to attach to terminal: ^a", (ad.terminal));

	ad.terminal_iocbp = temp_iocbp;

/* Now mask and complete the iocb */

	mask = "0"b;

	on any_other call handler;

	call hcs_$set_ips_mask ("0"b, mask);

	iocbp -> iocb.attach_descrip_ptr = addr (ad.attach_desc);
	iocbp -> iocb.attach_data_ptr = adp;
	iocbp -> iocb.open = remote_input_open;
	iocbp -> iocb.detach_iocb = remote_input_detach;

	call iox_$propagate (iocbp);

	call hcs_$reset_ips_mask (mask, mask);

	revert any_other;

attach_return:

	return;

remote_input_detach: entry (a_iocbp, a_code);

	iocbp = a_iocbp -> iocb.actual_iocb_ptr;
	a_code = 0;
	adp = iocbp -> iocb.attach_data_ptr;

	if adp = null then do;
	     a_code = error_table_$not_attached;
	     return;
	end;

	if iocbp -> iocb.open_descrip_ptr ^= null then do;
	     a_code = error_table_$not_closed;
	     return;
	end;

	call clean_up;

	mask = "0"b;

	on any_other call handler;

	call hcs_$set_ips_mask ("0"b, mask);

	iocbp -> iocb.attach_descrip_ptr = null;

	call iox_$propagate (iocbp);

	call hcs_$reset_ips_mask (mask, mask);

	revert any_other;

	return;

remote_input_open: entry (a_iocbp, a_mode, a_sw, a_code);

	iocbp = a_iocbp -> iocb.actual_iocb_ptr;
	code, a_code = 0;
	adp = iocbp -> iocb.attach_data_ptr;

	if adp = null then do;
	     a_code = error_table_$not_attached;
	     return;
	end;

	if iocbp -> iocb.open_descrip_ptr ^= null then do;
	     a_code = error_table_$not_closed;
	     return;
	end;

	open_mode = a_mode;
	if ^(open_mode = Stream_input | open_mode = Stream_input_output) then do;
	     a_code = error_table_$bad_mode;
	     return;
	end;

	ad.open_description = rtrim (iox_modes (open_mode));

	call iox_$open (ad.terminal_iocbp, Sequential_input, "0"b, a_code); /* try for the record interface */
	if a_code = 0 then do;			/* well we made it, records approved */
	     ad.record_io = "1"b;			/* record the fact */
	end;
	else do;					/* Ok, so we try for the stream interface */
	     ad.record_io = "0"b;
	     call iox_$open (ad.terminal_iocbp, Stream_input, "0"b, a_code);
	     if a_code ^= 0 then return;		/* Oh, well */
	end;

	mask = "0"b;

	on any_other call handler;

	call hcs_$set_ips_mask ("0"b, mask);

	iocbp -> iocb.get_chars = remote_input_get_chars;
	iocbp -> iocb.get_line = remote_input_get_chars;
	iocbp -> iocb.position = remote_input_position;
	iocbp -> iocb.control = remote_input_control;
	iocbp -> iocb.modes = remote_input_modes;
	iocbp -> iocb.close = remote_input_close;
	iocbp -> iocb.open_descrip_ptr = addr (ad.open_description);

	call iox_$propagate (iocbp);

	call hcs_$reset_ips_mask (mask, mask);

	revert any_other;

	return;

remote_input_close: entry (a_iocbp, a_code);

	iocbp = a_iocbp -> iocb.actual_iocb_ptr;
	code, a_code = 0;
	adp = iocbp -> iocb.attach_data_ptr;

	if adp = null then do;
	     a_code = error_table_$not_attached;
	     return;
	end;

	if iocbp -> iocb.open_descrip_ptr = null then do;
	     a_code = error_table_$not_open;
	     return;
	end;

	call iox_$close (ad.terminal_iocbp, a_code);	/* try to close the terminal switch too */
	if a_code = error_table_$not_open | a_code = error_table_$not_attached then code = 0;
						/* make it easy to re-synch attachments */

	mask = "0"b;

	on any_other call handler;

	call hcs_$set_ips_mask ("0"b, mask);

	iocbp -> iocb.open_descrip_ptr = null;
	iocbp -> iocb.open = remote_input_open;
	iocbp -> iocb.detach_iocb = remote_input_detach;
	iocbp -> iocb.control = iox_$err_no_operation;
	iocbp -> iocb.modes = iox_$err_no_operation;
	iocbp -> iocb.position = iox_$err_no_operation;

	call iox_$propagate (iocbp);

	call hcs_$reset_ips_mask (mask, mask);

	revert any_other;

	return;

remote_input_get_chars: entry (a_iocbp, a_buf_ptr, a_buf_chars, a_data_chars, a_code);

	iocbp = a_iocbp -> iocb.actual_iocb_ptr;
	adp = iocbp -> iocb.attach_data_ptr;
	a_data_chars, a_code, code = 0;

	if adp = null then do;
	     a_code = error_table_$not_attached;
	     return;
	end;

	if iocbp -> iocb.open_descrip_ptr = null then do;
	     a_code = error_table_$not_open;
	     return;
	end;

	max_record_size = ad.rec_length;		/* put into automatic for this call */

	terminal_io_record_ptr = null;		/* for the cleanup handler */
	terminal_io_record_element_size = 9;		/* always character data */
	terminal_io_record_n_elements = max_record_size;	/* set the max record size allowed */

	on cleanup begin;
	     if terminal_io_record_ptr ^= null then
		free terminal_io_record_ptr -> terminal_io_record in (my_area);
	end;

	call alloc_tio_rec;				/* allocate and initialize terminal_io_record */

	terminal_io_record.n_elements = max_record_size;	/* set to the max size for the read call */

/* Read the next record from the terminal IO Module */

	if ad.record_io then do;
	     call iox_$read_record (ad.terminal_iocbp, terminal_io_record_ptr, 4 * size (terminal_io_record),
		record_len, code);
	     if code ^= 0 then go to get_chars_ret;	/* accept EOF from the terminal as well */
	     if terminal_io_record.version ^= terminal_io_record_version_1 then do;
		code = error_table_$unimplemented_version;
		go to get_chars_ret;
	     end;

	     if ad.device_type ^= READER_DEVICE then do;	/* no slews for the reader */
		if terminal_io_record.slew_type = SLEW_BY_COUNT then do;
		     if terminal_io_record.slew_count = 0 then
			slew_string = CR;		/* this is the overprint case */
		     else slew_string = copy (NL, terminal_io_record.slew_count);
		end;
		else if terminal_io_record.slew_type = SLEW_TO_CHANNEL then do;
		     slew_string = ESC_c || ltrim (char (terminal_io_record.slew_count)) || ETX;
		end;
		else do;				/* TOIP = TOOP = TOP for seg text */
		     slew_string = FF;		/* so just add one FF char */
		end;
	     end;
	     else do;				/* for the reader, check for ++EOF cards */
		if terminal_io_record_data_chars = "++EOF" | terminal_io_record_data_chars = "++eof" then do;
		     code = error_table_$eof_record;
		     go to get_chars_ret;
		end;
		slew_string = "";			/* no additional slew chars will be added */
	     end;
	end;
	else do;
	     call iox_$get_chars (ad.terminal_iocbp, addr (terminal_io_record.data), max_record_size, record_len, code);
	     if code ^= 0 then go to get_chars_ret;	/* accept EOF from the terminal as well */
	     terminal_io_record.n_elements = record_len;	/* make a legal varying string */

/*	For stream input, all slew chars must be in the stream already */

	     if ad.device_type = READER_DEVICE then do;	/* look for EOF cards from reader */
		if terminal_io_record_data_chars = "++EOF" | terminal_io_record_data_chars = "++eof" then do;
		     code = error_table_$eof_record;
		     go to get_chars_ret;
		end;
	     end;
	     slew_string = "";			/* all slews must be in the stream */
	end;

/*	at this point, we must have a record of the form:  <text chars><slew chars> */

	total_chars = terminal_io_record.n_elements + length (slew_string); /* get the updated count */
	if total_chars > a_buf_chars then
	     code = error_table_$data_loss;		/* tell caller we truncated the record */

	a_data_chars = min (a_buf_chars, total_chars);
	if terminal_io_record.preslew then
	     substr (a_buf_ptr -> char_string, 1, a_data_chars) = slew_string || terminal_io_record_data_chars;
	else substr (a_buf_ptr -> char_string, 1, a_data_chars) = terminal_io_record_data_chars || slew_string;
	ad.record_count = ad.record_count + 1;		/* increment the total read */

get_chars_ret:

	free terminal_io_record_ptr -> terminal_io_record in (my_area);
	revert cleanup;

	a_code = code;

	return;

remote_input_control: entry (a_iocbp, a_order, a_infop, a_code);

	iocbp = a_iocbp -> iocb.actual_iocb_ptr;
	adp = iocbp -> iocb.attach_data_ptr;

	if adp = null then do;
	     a_code = error_table_$not_attached;
	     return;
	end;

	if iocbp -> iocb.open_descrip_ptr = null then do;
	     a_code = error_table_$not_open;
	     return;
	end;

	infop = a_infop;
	order = a_order;
	a_code = 0;

	if order = "reset" then do;			/* go to a known clean state */
	     ad.record_count = 0;			/* we just clear the count of records read */
	     go to pass_on;				/* and then give it to the terminal IO Module */
	end;
	else if order = "get_count" then do;		/* this is for us alone */
	     if infop ^= null then infop -> count_structure.records = ad.record_count; /* give back the count */
	     else a_code = error_table_$bad_arg;
	end;
	else do;
pass_on:	     call iox_$control (ad.terminal_iocbp, order, infop, a_code);
	end;

	return;

remote_input_modes: entry (a_iocbp, a_new_modes, a_old_modes, a_code);

	iocbp = a_iocbp -> iocb.actual_iocb_ptr;
	adp = iocbp -> iocb.attach_data_ptr;

	if adp = null then do;
	     a_code = error_table_$not_attached;
	     return;
	end;

	if iocbp -> iocb.open_descrip_ptr = null then do;
	     a_code = error_table_$not_open;
	     return;
	end;

	a_code = 0;

	call iox_$modes (ad.terminal_iocbp, a_new_modes, a_old_modes, a_code);

	return;

remote_input_position: entry (a_iocbp, a_pos_type, a_pos_value, a_code);

	iocbp = a_iocbp -> iocb.actual_iocb_ptr;
	adp = iocbp -> iocb.attach_data_ptr;

	if adp = null then do;
	     a_code = error_table_$not_attached;
	     return;
	end;

	if iocbp -> iocb.open_descrip_ptr = null then do;
	     a_code = error_table_$not_open;
	     return;
	end;

	a_code = 0;

	call iox_$position (ad.terminal_iocbp, a_pos_type, a_pos_value, a_code);

	return;




flip_com_err_sw: entry;

	static_comerr_sw = ^static_comerr_sw;		/* flip the bit */

	call ioa_ ("The INPUT com err sw is now: ^[on^;off^]", static_comerr_sw);

	return;


get_arg:	proc (idx) returns (char (*));

dcl  idx fixed bin;

	     idx = idx + 1;
	     if idx > hbound (a_option, 1) then do;
		code = error_table_$noarg;
		call abort_attach (code, "No argument after ^a.", (a_option (idx - 1)));
	     end;

	     return (a_option (idx));

	end get_arg;



cv_dec_arg: proc (idx) returns (fixed bin);

dcl  idx fixed bin;

	     idx = idx + 1;				/* advance the index of the major loop */
	     if idx > hbound (a_option, 1) then do;
		code = error_table_$noarg;
		call abort_attach (code, "No argument after ^a.", (a_option (idx - 1)));
	     end;

	     on conversion go to bad_dec_arg;

	     return (bin (a_option (idx)));
bad_dec_arg:
	     code = error_table_$bad_conversion;
	     call abort_attach (code, "Invalid decimal number. ^a", (a_option (idx)));

	end cv_dec_arg;


abort_attach: proc (code, str1, str2);

dcl  code fixed bin (35);
dcl (str1, str2) char (*) aligned;

/* This proc handles attach errors */

	     if com_err_sw then call com_err_ (code, remote_device_name, str1, str2);

	     a_code = code;				/* copy back the error, MUST be non-zero */

	     call clean_up;

	     go to attach_return;			/* finish the abort by non-local return */

	end abort_attach;




alloc_tio_rec: proc;

	     allocate terminal_io_record in (my_area) set (terminal_io_record_ptr);

	     unspec (terminal_io_record) = "0"b;	/* clear everything */

	     terminal_io_record.version = terminal_io_record_version_1; /* our view of the record structure */
	     terminal_io_record.device_type = ad.device_type;
	     terminal_io_record.element_size = terminal_io_record_element_size; /* set by our caller */

	     return;

	end alloc_tio_rec;


clean_up:	proc;

dcl  ignore fixed bin (35);

	     if adp ^= null then do;
		if ad.terminal_iocbp ^= null then call iox_$detach_iocb (ad.terminal_iocbp, ignore);
		free adp -> ad in (my_area);
		adp = null;
	     end;

	     iocbp -> iocb.attach_descrip_ptr = null;	/* be sure iox_ knows */
	     iocbp -> iocb.attach_data_ptr = null;
	     iocbp -> iocb.open = iox_$err_no_operation;

	     return;

	end clean_up;





handler:	proc;

dcl  ignore fixed bin (35);

/* This proc handles faults that occur while masked */

	     if mask then
		call hcs_$reset_ips_mask (mask, mask);

	     mask = ""b;

	     call continue_to_signal_ (ignore);

	     return;

	end handler;

     end remote_input_;
