/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* format: style4,delnl,insnl,tree,ifthenstmt,indnoniterend */
tty_printer_:
     procedure;


/* tty_printer_: An I/O module for communicating with tty_ or syn_ from any remote_XXX_ I/O module */

/* Coded 4/79 by J. C. Whitmore */
/* Modified October 1981 by C. Hornig to not call dial_manager_. */

/* Parameters */

dcl  a_iocbp ptr;
dcl  a_option (*) char (*) var;			/* Options for attach */
dcl  a_sw bit (1);					/* com_err_ switch for attach */
dcl  a_code fixed bin (35);
dcl  a_mode fixed bin;				/* The open mode */
dcl  a_buf_ptr ptr;
dcl  a_data_ptr ptr;
dcl  a_buf_chars fixed bin (21);
dcl  a_data_chars fixed bin (21);
dcl  a_pos_type fixed bin;
dcl  a_pos_value fixed bin (21);
dcl  a_order char (*);
dcl  a_infop ptr;
dcl  a_new_modes char (*);
dcl  a_old_modes char (*);

/* Automatic */

dcl  com_err_sw bit (1);				/* Set if com_err_ sould be called on attach error */
dcl  attach_tag picture "99";
dcl  code fixed bin (35);
dcl  iocbp ptr;
dcl  mask bit (36) aligned;				/* For setting ips mask */
dcl  i fixed bin (21);
dcl  open_mode fixed bin;
dcl  modes char (64);				/* for setting initial modes or "reset" control */
dcl  old_modes char (256);
dcl  order char (32);
dcl  infop ptr;
dcl  temp_ptr ptr;					/* for the repeat loop chain search */
dcl  term_type char (32);
dcl  my_attach_options char (256) var;
dcl  next_attach_options char (256) var;
dcl  next_attach_desc char (256) var;
dcl  next_module char (32) var;
dcl  target_device char (32) var;

/* Internal static */

dcl  attach_count fixed bin init (0) int static;
dcl  first_dibp ptr int static init (null);		/* pointer to first device info block in chain */
dcl  last_dibp ptr int static init (null);		/* pointer to the tail of the info block chain */
dcl  areap ptr int static init (null);			/* pointer to our area segment */
dcl  static_com_err_sw bit (1) int static init ("0"b);	/* for testing only */

/* Based variables */

dcl  my_area area (262144) based (areap);

dcl  info_fixed fixed bin based (infop);		/* fixed bin control argument */


/* Constants */

dcl  my_device_name char (12) int static options (constant) init ("tty_printer_");
dcl  space char (1) static int init (" ") options (constant);

dcl  error_table_$bad_conversion fixed bin (35) ext;
dcl  error_table_$no_operation fixed bin (35) ext;
dcl  error_table_$bad_mode ext fixed bin (35);
dcl  error_table_$not_detached ext fixed bin (35);
dcl  error_table_$not_attached ext fixed bin (35);
dcl  error_table_$not_open ext fixed bin (35);
dcl  error_table_$not_closed ext fixed bin (35);
dcl  error_table_$wrong_no_of_args ext fixed bin (35);
dcl  error_table_$noarg ext fixed bin (35);
dcl  error_table_$badopt ext fixed bin (35);


/* External stuff */

dcl  (
     ioa_,
     ioa_$rsnnl
     ) entry options (variable);
dcl  com_err_ entry options (variable);
dcl  continue_to_signal_ entry (fixed bin (35));
dcl  get_temp_segment_ entry (char (*), ptr, fixed bin (35));
dcl  hcs_$reset_ips_mask entry (bit (36) aligned, bit (36) aligned);
dcl  hcs_$set_ips_mask entry (bit (36) aligned, bit (36) aligned);
dcl  convert_ipc_code_ entry (fixed bin (35));
dcl  ipc_$block entry (ptr, ptr, fixed bin (35));
dcl  iox_$attach_name entry (char (*), ptr, char (*), ptr, fixed bin (35));
dcl  iox_$close entry (ptr, fixed bin (35));
dcl  iox_$control entry (ptr, char (*), ptr, fixed bin (35));
dcl  iox_$detach_iocb entry (ptr, fixed bin (35));
dcl  iox_$err_no_operation entry;
dcl  iox_$get_chars entry (ptr, ptr, fixed bin (21), fixed bin (21), fixed bin (35));
dcl  iox_$get_line entry (ptr, ptr, fixed bin (21), fixed bin (21), fixed bin (35));
dcl  iox_$modes entry (ptr, char (*), char (*), fixed bin (35));
dcl  iox_$open entry (ptr, fixed bin, bit (36), fixed bin (35));
dcl  iox_$position entry (ptr, fixed bin, fixed bin (21), fixed bin (35));
dcl  iox_$propagate entry (ptr);
dcl  iox_$put_chars entry (ptr, ptr, fixed bin (21), fixed bin (35));



/* External Variables */

dcl  tty_printer_conv_$send_vt fixed bin ext;
dcl  tty_printer_conv_$send_ht fixed bin ext;


/* Internal PL/I Stuff */

dcl  (addr, bin, codeptr, hbound, null, rtrim, empty, unspec, max, fixed) builtin;

dcl  conversion condition;
dcl  any_other condition;
dcl  cleanup condition;
%page;
dcl  adp ptr;					/* local copy of pointer to attach data */

dcl  1 ad aligned based (adp),
       2 fixed,
         3 phys_line_length fixed bin,
       2 bits unal,
         3 ht bit (1),				/* on if caller wants to send tabs */
         3 vt bit (1),				/* on if caller wants to send VT chars */
       2 ptrs,
         3 dibp ptr,				/* device info block pointer for this attachment */
         3 iocbp ptr,				/* for easy debugging, ptr back to our iocb */
       2 chars,
         3 device_type char (32),			/* device type using this switch (e.g. printer, teleprinter) */
         3 term_type char (32),			/* the -ttp option for this attachment */
         3 attach_desc char (256) var,			/* how this switch was attached */
         3 open_description char (24) var;		/* and how it was opened */


dcl  dibp ptr;					/* pointer to device info block */

dcl  1 dib aligned based (dibp),			/* device info block for per target device data */
       2 term_type,					/* info for the set_term_type control order */
         3 version fixed bin,				/* version if this structure (=1) */
         3 name char (32) unal,			/* terminal type name */
         3 flags,
	 4 initial_string bit (1) unal,		/* TRUE - if initial string should be sent (tab set) */
	 4 modes bit (1) unal,			/* TRUE - if default initial modes are to be set */
	 4 ignore_line_type bit (1) unal,		/* always FALSE for us, we want the cross check */
	 4 MBZ bit (33) unal,			/* Must Be Zero */
       2 device char (32),				/* name of the target device or switch */
       2 module char (32),				/* name of the next IO module */
       2 output_switch char (32) unaligned,		/* what we are attached to (sw name) */
       2 next_iocbp ptr,				/* iocb ptr for output_switch */
       2 fwd_ptr ptr,				/* forward pointer in chain of info blocks */
       2 back_ptr ptr,				/* backwards pointer to previous block */
       2 wait_list,					/* list for ipc_$block, must start on even word */
         3 n_chan fixed bin,				/* number of channels in list (Must Be 1) */
         3 wait_pad fixed bin,
         3 channel fixed bin (71),			/* IPC channel to get wakeup */
       2 flags,
         3 attached bit (1) unal,			/* device is ready to be opened */
         3 open bit (1) unal,				/* device is ready to do I/O */
       2 n_attached fixed bin,			/* number of switches attached to this device */
       2 max_line_length fixed bin;			/* the longest phys_line_length requested */

dcl  1 event_info aligned like event_wait_info;

dcl  1 write_info aligned,
       2 channel fixed bin (71),
       2 write_pending bit (1);
%page;
/* Attach entry point */

tty_printer_attach:
     entry (a_iocbp, a_option, a_sw, a_code);

	iocbp = a_iocbp;
	com_err_sw = a_sw;
	code, a_code = 0;

	adp, dibp = null;				/* these will be checked by abort_attach */

	if iocbp -> iocb.attach_descrip_ptr ^= null then do;
	     code = error_table_$not_detached;
	     call abort_attach ("^a", iocbp -> iocb.name);
	     end;

	if areap = null then do;			/* make an area once per process */
	     call get_temp_segment_ (my_device_name, areap, code);
	     if code ^= 0 then call abort_attach ("Unable to allocate temp segment.", "");
	     my_area = empty ();			/* initialize the area */
	     end;

	on cleanup call clean_up;			/* save the area, please */

	allocate ad in (my_area) set (adp);		/* make an attach data structure allocation */

/* Initialize variables */

	ad.bits = "0"b;
	ad.ptrs = null;
	ad.chars = "";
	ad.phys_line_length = 0;
	ad.iocbp = iocbp;				/* so we can find the IOCB for debugging */

	next_attach_desc, next_attach_options = "";
	target_device, next_module, term_type = "";
	my_attach_options = "";

/* Are there enough attach options specified? */

	if hbound (a_option, 1) < 4 then do;		/* Must be at least -tty XX and -comm YY */
	     code = error_table_$wrong_no_of_args;
	     call abort_attach ("Bad attach description.", "");
	     end;
%page;
/* Process options */

	do i = 1 to hbound (a_option, 1);
	     if a_option (i) ^= "-comm" then my_attach_options = my_attach_options || space || a_option (i);
	     if /* case */ a_option (i) = "-terminal_type" | a_option (i) = "-ttp" then do;
		term_type = get_arg ();
		end;
	     else if a_option (i) = "-physical_line_length" | a_option (i) = "-pll"
	     then ad.phys_line_length = cv_dec_arg ();
	     else if a_option (i) = "-horizontal_tab" | a_option (i) = "-htab" then ad.ht = "1"b;
	     else if a_option (i) = "-vtab" then ad.vt = "1"b;
	     else if a_option (i) = "-device" then ad.device_type = get_arg ();
	     else if a_option (i) = "-auto_call"
	     then next_attach_options = next_attach_options || " -destination " || get_arg ();
	     else if a_option (i) = "-tty" then target_device = get_arg ();
	     else if a_option (i) = "-comm" then do;
		i = i + 1;
		if i > hbound (a_option, 1) then goto no_arg;
		next_module = a_option (i);
		end;
	     else next_attach_options = next_attach_options || space || a_option (i);
	end;

	if target_device = "" then do;
	     code = error_table_$badopt;
	     call abort_attach ("No ""-tty"" option given.", "");
	     end;

	if next_module = "" then do;
	     code = error_table_$badopt;
	     call abort_attach ("No ""-comm"" option given.", "");
	     end;

/* find a device info block for the target device */

	do temp_ptr = first_dibp repeat (temp_ptr -> dib.fwd_ptr) while (temp_ptr ^= null & dibp = null);
	     if temp_ptr -> dib.device = target_device
	     then					/* previously defined? */
		dibp = temp_ptr;
	end;

	if dibp = null then do;			/* first for this device */
	     call make_dib (dibp);			/* create a device info block for the target device */
	     dib.device = target_device;
	     dib.module = next_module;
	     dib.term_type.name = term_type;		/* ready to give set_term_type control */
	     dib.term_type.initial_string = "1"b;	/* send the initial tab string if it exists */
	     dib.term_type.modes = "1"b;		/* we always want the default modes set */
	     end;

	ad.dibp = dibp;				/* point this back to its device info block */
	ad.term_type = term_type;			/* record the -ttp option */

/* Before attaching, finish the attach data by checking for default values of optional attach options */

	if ad.device_type = "" then ad.device_type = "teleprinter";
						/* the default */

	if ad.phys_line_length = 0
	then					/* if not given */
	     if ad.device_type = "printer"
	     then ad.phys_line_length = 136;
	     else ad.phys_line_length = 118;		/* for a terminet */

	ad.attach_desc = my_device_name || space || next_module || space || my_attach_options;

/* If we need to attach, attach through next_module to target_device (which may be a switch) */

	if ^dib.attached then do;			/* just once per target device */
	     attach_count = attach_count + 1;
	     attach_tag = attach_count;
	     dib.output_switch = my_device_name || attach_tag;
						/* make up a new switch name for the next level */
	     next_attach_desc = next_module || space || target_device || space || next_attach_options;

	     call iox_$attach_name (dib.output_switch, dib.next_iocbp, (next_attach_desc), codeptr (tty_printer_attach),
		code);
	     if code ^= 0 then call abort_attach ("Unable to attach to target device/switch", "");

	     dib.attached = "1"b;			/* we have a new attachment */
	     dib.open = "0"b;			/* don't forget to open it */
	     end;

/* Set up the target device modes via the next IO module */

	if ^dib.open then do;			/* if not open, do it */
	     call iox_$open (dib.next_iocbp, Stream_input_output, "0"b, code);
	     if code ^= 0
	     then					/* OOPS */
		if code ^= error_table_$not_closed
		then				/* if open, let it go */
		     call abort_attach ("Unable to open target device stream.", "");

	     if dib.term_type.name ^= "" then do;	/* set the terminal type if specified */
		call iox_$control (dib.next_iocbp, "set_term_type", addr (dib.term_type), code);
		if code ^= 0 then call abort_attach ("Unable to set terminal type.", "");
		end;

	     call iox_$control (dib.next_iocbp, "quit_enable", null, (0));

	     call iox_$control (dib.next_iocbp, "write_status", addr (write_info), code);
	     if code = 0 then do;			/* if OK, set up wait list for runout control */
		dib.n_chan = 1;
		dib.channel = write_info.channel;
		end;
	     else do;				/* can't block for output completion */
		code = 0;				/* this is OK */
		dib.wait_list = 0;			/* clear the list */
		end;

	     tty_printer_conv_$send_ht = fixed (ad.ht);
	     tty_printer_conv_$send_vt = fixed (ad.vt);

	     dib.open = "1"b;
	     end;

	dib.max_line_length = max (dib.max_line_length, ad.phys_line_length);

	call ioa_$rsnnl ("^^edited^[,vertsp^],ll^d^[,tabs^]", modes, i, ad.vt, dib.max_line_length, ad.ht);

	old_modes = "";
	call iox_$modes (dib.next_iocbp, modes, old_modes, code);
						/* don't abort now, just try the set up */
	if code ^= 0 & (com_err_sw | static_com_err_sw)
	then call com_err_ (code, my_device_name, "Modes error: ^a  From: ^a", rtrim (modes), rtrim (old_modes));

/* Mask and complete the iocb */

	mask = "0"b;
	on any_other call handler;

	call hcs_$set_ips_mask ("0"b, mask);

	iocbp -> iocb.attach_descrip_ptr = addr (ad.attach_desc);
	iocbp -> iocb.attach_data_ptr = adp;
	iocbp -> iocb.open = tty_printer_open;
	iocbp -> iocb.detach_iocb = tty_printer_detach;

	dib.n_attached = dib.n_attached + 1;		/* bump the number of switches to this device */

	call iox_$propagate (iocbp);

	revert cleanup;				/* it is good from here on */

	call hcs_$reset_ips_mask (mask, mask);

	revert any_other;





attach_return:
	return;
no_arg:
	code = error_table_$noarg;
	call abort_attach ("No argument after ^a.", (a_option (i - 1)));
%page;
/* Detach entry point */

tty_printer_detach:
     entry (a_iocbp, a_code);

	iocbp = a_iocbp;
	a_code = 0;
	adp = iocbp -> iocb.attach_data_ptr;

	if iocbp -> iocb.open_descrip_ptr ^= null then do;/* not closed? */
	     a_code = error_table_$not_closed;
	     return;
	     end;

	if adp ^= null then do;
	     dibp = ad.dibp;			/* find the device info block */
	     dib.n_attached = dib.n_attached - 1;	/* this one is gone! */
	     if dib.n_attached < 1 then do;		/* when the last, take the block and attachment too */
		if dib.next_iocbp ^= null then do;
		     call iox_$close (dib.next_iocbp, (0));
						/* force the issue */
		     call iox_$detach_iocb (dib.next_iocbp, (0));
		     end;
		call delete_dib (dibp);
		end;
	     iocbp -> iocb.attach_data_ptr = null;	/* this is about to become invalid */
	     free adp -> ad in (my_area);		/* drop the attach data structure for sure */
	     end;

	mask = "0"b;
	on any_other call handler;

	call hcs_$set_ips_mask ("0"b, mask);

	iocbp -> iocb.attach_descrip_ptr = null;
	iocbp -> iocb.open = iox_$err_no_operation;	/* remaining invalid functions */
	iocbp -> iocb.close = iox_$err_no_operation;

	call iox_$propagate (iocbp);

	call hcs_$reset_ips_mask (mask, mask);

	revert any_other;

	return;
%page;
/* Open entry point */

tty_printer_open:
     entry (a_iocbp, a_mode, a_sw, a_code);

	iocbp = a_iocbp -> iocb.actual_iocb_ptr;
	a_code = 0;
	adp = iocbp -> iocb.attach_data_ptr;

	if iocbp -> iocb.open_descrip_ptr ^= null then do;/* already open? */
	     a_code = error_table_$not_closed;
	     return;
	     end;

	if adp = null then do;			/* must be valid */
	     a_code = error_table_$not_attached;
	     return;
	     end;

	open_mode = a_mode;
	if ^((open_mode = Stream_input) | (open_mode = Stream_output) | (open_mode = Stream_input_output)) then do;
bad_mode:
	     a_code = error_table_$bad_mode;
	     return;
	     end;

	ad.open_description = rtrim (iox_modes (open_mode));

	mask = "0"b;
	on any_other call handler;

	call hcs_$set_ips_mask ("0"b, mask);

	if ((open_mode = Stream_input) | (open_mode = Stream_input_output)) then do;
	     iocbp -> iocb.get_chars = tty_printer_get_chars;
	     iocbp -> iocb.get_line = tty_printer_get_line;
	     end;

	if ((open_mode = Stream_output) | (open_mode = Stream_input_output)) then do;
	     iocbp -> iocb.put_chars = tty_printer_put_chars;
	     end;

	iocbp -> iocb.control = tty_printer_control;
	iocbp -> iocb.position = tty_printer_position;
	iocbp -> iocb.modes = tty_printer_modes;
	iocbp -> iocb.close = tty_printer_close;
	iocbp -> iocb.detach_iocb = tty_printer_detach;
	iocbp -> iocb.open_descrip_ptr = addr (ad.open_description);

	call iox_$propagate (iocbp);

	call hcs_$reset_ips_mask (mask, mask);

	revert any_other;

	return;
%page;
/* Close entry point */

tty_printer_close:
     entry (a_iocbp, a_code);

	iocbp = a_iocbp -> iocb.actual_iocb_ptr;
	a_code = 0;

	if iocbp -> iocb.open_descrip_ptr = null then do; /* already closed? */
	     a_code = error_table_$not_open;
	     return;
	     end;

	mask = "0"b;
	on any_other call handler;

	call hcs_$set_ips_mask ("0"b, mask);

	iocbp -> iocb.open_descrip_ptr = null;
	iocbp -> iocb.open = tty_printer_open;
	iocbp -> iocb.detach_iocb = tty_printer_detach;
	iocbp -> iocb.control = iox_$err_no_operation;
	iocbp -> iocb.position = iox_$err_no_operation;
	iocbp -> iocb.modes = iox_$err_no_operation;
	iocbp -> iocb.put_chars = iox_$err_no_operation;
	iocbp -> iocb.get_chars = iox_$err_no_operation;
	iocbp -> iocb.get_line = iox_$err_no_operation;

	call iox_$propagate (iocbp);

	call hcs_$reset_ips_mask (mask, mask);

	revert any_other;

	return;
%page;
/* Put_chars entry point */

tty_printer_put_chars:
     entry (a_iocbp, a_data_ptr, a_data_chars, a_code);

	iocbp = a_iocbp -> iocb.actual_iocb_ptr;
	adp = iocbp -> iocb.attach_data_ptr;

	if adp = null then do;			/* must be valid */
	     a_code = error_table_$not_attached;
	     return;
	     end;

	if iocbp -> iocb.open_descrip_ptr = null then do; /* is it open? */
	     a_code = error_table_$not_open;
	     return;
	     end;

	a_code = 0;
	dibp = ad.dibp;				/* find the device info block */

	call iox_$put_chars (dib.next_iocbp, a_data_ptr, a_data_chars, a_code);

	return;
%page;
/* Get_chars entry point */

tty_printer_get_chars:
     entry (a_iocbp, a_buf_ptr, a_buf_chars, a_data_chars, a_code);

	iocbp = a_iocbp -> iocb.actual_iocb_ptr;
	adp = iocbp -> iocb.attach_data_ptr;

	if adp = null then do;			/* must be valid */
	     a_code = error_table_$not_attached;
	     return;
	     end;

	if iocbp -> iocb.open_descrip_ptr = null then do; /* is it open? */
	     a_code = error_table_$not_open;
	     return;
	     end;

	a_code = 0;
	dibp = ad.dibp;				/* find the device info block */

	call iox_$get_chars (dib.next_iocbp, a_buf_ptr, a_buf_chars, a_data_chars, a_code);

	return;






/* Get_line entry point */

tty_printer_get_line:
     entry (a_iocbp, a_buf_ptr, a_buf_chars, a_data_chars, a_code);

	iocbp = a_iocbp -> iocb.actual_iocb_ptr;
	adp = iocbp -> iocb.attach_data_ptr;

	if adp = null then do;			/* must be valid */
	     a_code = error_table_$not_attached;
	     return;
	     end;

	if iocbp -> iocb.open_descrip_ptr = null then do; /* is it open? */
	     a_code = error_table_$not_open;
	     return;
	     end;

	a_code = 0;
	dibp = ad.dibp;				/* find the device info block */

	call iox_$get_line (dib.next_iocbp, a_buf_ptr, a_buf_chars, a_data_chars, a_code);

	return;
%page;
/* Control entry point */

tty_printer_control:
     entry (a_iocbp, a_order, a_infop, a_code);

	iocbp = a_iocbp -> iocb.actual_iocb_ptr;
	adp = iocbp -> iocb.attach_data_ptr;

	if adp = null then do;			/* must be valid */
	     a_code = error_table_$not_attached;
	     return;
	     end;

	if iocbp -> iocb.open_descrip_ptr = null then do; /* is it open? */
	     a_code = error_table_$not_open;
	     return;
	     end;

	code, a_code = 0;
	dibp = ad.dibp;

	infop = a_infop;
	order = a_order;

	if order = "io_call" then do;			/* we can use a simple mapping for this */
	     io_call_infop = infop;
	     order = io_call_info.order_name;
	     infop = null;				/* can't have an info ptr with io_call */
	     end;

	if /* case */ order = "select_device" then do;
	     if ad.term_type ^= dib.term_type.name then do;
		dib.term_type.name = ad.term_type;	/* establish the other terminal type */
		if dib.term_type.name ^= ""
		then				/* set the terminal type if specified */
		     call iox_$control (dib.next_iocbp, "set_term_type", addr (dib.term_type), code);
		end;

	     tty_printer_conv_$send_ht = fixed (ad.ht);
	     tty_printer_conv_$send_vt = fixed (ad.vt);

	     call ioa_$rsnnl ("^^edited^[,vertsp^],ll^d^[,tabs^]", modes, i, ad.vt, dib.max_line_length, ad.ht);
	     call iox_$modes (dib.next_iocbp, modes, old_modes, (0));
						/* don't abort now, just try the set up */
	     end;
	else if order = "runout" then do;		/* here we wait for the output to complete */
	     if dib.n_chan = 0 then return;		/* in case we can't block */
	     write_info.write_pending = "0"b;		/* clear the flag */

	     call iox_$control (dib.next_iocbp, "write_status", addr (write_info), code);
	     if write_info.write_pending then do;

		call ipc_$block (addr (dib.wait_list), addr (event_info), code);
		if code ^= 0 then call convert_ipc_code_ (code);
		end;
	     end;
	else if order = "hangup" & dib.module = "syn_" then do;
						/* trap this order here */
						/* so we don't hangup user_i/o */
	     end;
	else if order = "reset" then do;
	     call ioa_$rsnnl ("^^edited^[,vertsp^],ll^d^[,tabs^]", modes, i, ad.vt, dib.max_line_length, ad.ht);
	     call iox_$modes (dib.next_iocbp, modes, old_modes, (0));
						/* don't abort now, just try the set up */
	     end;
	else if order = "get_error_count" then do;
	     if infop = null then go to no_op;		/* not for io_call or a bad ptr */
	     infop -> info_fixed = 0;			/* return a count of zero for now */
	     end;
	else do;
	     call iox_$control (dib.next_iocbp, a_order, a_infop, code);
	     end;

	a_code = code;
	return;

no_op:
	a_code = error_table_$no_operation;		/* it couldn't be done as called */
	return;
%page;
/* Position entry point */

tty_printer_position:
     entry (a_iocbp, a_pos_type, a_pos_value, a_code);

	iocbp = a_iocbp -> iocb.actual_iocb_ptr;
	adp = iocbp -> iocb.attach_data_ptr;

	if adp = null then do;			/* must be valid */
	     a_code = error_table_$not_attached;
	     return;
	     end;

	if iocbp -> iocb.open_descrip_ptr = null then do; /* is it open? */
	     a_code = error_table_$not_open;
	     return;
	     end;

	a_code = 0;
	dibp = ad.dibp;				/* find the device info block */

	call iox_$position (dib.next_iocbp, a_pos_type, a_pos_value, a_code);

	return;
%page;
tty_printer_modes:
     entry (a_iocbp, a_new_modes, a_old_modes, a_code);

	iocbp = a_iocbp -> iocb.actual_iocb_ptr;
	adp = iocbp -> iocb.attach_data_ptr;

	if adp = null then do;			/* must be valid */
	     a_code = error_table_$not_attached;
	     return;
	     end;

	if iocbp -> iocb.open_descrip_ptr = null then do; /* is it open? */
	     a_code = error_table_$not_open;
	     return;
	     end;

	a_code = 0;
	dibp = ad.dibp;				/* find the device info block */

	call iox_$modes (dib.next_iocbp, a_new_modes, a_old_modes, a_code);

	return;
%page;
cv_dec_arg:
     proc returns (fixed bin);

/* This proc picks up the next arg in the attach option array and returns it as fixed bin */

	i = i + 1;				/* Advance to next arg */
	if i > hbound (a_option, 1) then goto no_arg;
	my_attach_options = my_attach_options || space || a_option (i);
	on conversion go to bad_dec_arg;
	return (bin ((a_option (i))));
bad_dec_arg:
	code = error_table_$bad_conversion;
	call abort_attach ("Invalid decimal number. ^a", ((a_option (i))));

     end cv_dec_arg;





get_arg:
     proc returns (char (*) var);

/* This proc picks up the next arg in the attach option array and returns it as a character string */

	i = i + 1;
	if i > hbound (a_option, 1) then goto no_arg;
	my_attach_options = my_attach_options || space || a_option (i);
	return ((a_option (i)));

     end get_arg;
%page;
make_dib:
     proc (new_dibp);

dcl  new_dibp ptr;					/* pointer to new info block in chain (output) */


	allocate dib in (my_area) set (new_dibp);
	unspec (new_dibp -> dib) = "0"b;		/* set it all to zero */
	new_dibp -> dib.fwd_ptr = null;		/* chain ends here */
	new_dibp -> dib.device = "";			/* for string compares */
	new_dibp -> dib.module = "";
	new_dibp -> dib.output_switch = "";
	new_dibp -> dib.back_ptr = last_dibp;		/* if the first, this is null */
	new_dibp -> dib.next_iocbp = null;
	new_dibp -> dib.term_type.version = 1;		/* be sure we give the right version */
	new_dibp -> dib.term_type.name = "";		/* not defined yet */

	if first_dibp = null
	then first_dibp = new_dibp;			/* set the head of the chain */
	else last_dibp -> dib.fwd_ptr = new_dibp;	/* otherwise, link it into the list */
	last_dibp = new_dibp;			/* record the new end of of the chain */

     end make_dib;





delete_dib:
     proc (dibp);

dcl  dibp ptr;					/* pointer to the info block to be deleted */


	if dibp -> dib.back_ptr = null
	then					/* it was the head of the chain */
	     first_dibp = dibp -> dib.fwd_ptr;
	else dibp -> dib.back_ptr -> dib.fwd_ptr = dibp -> dib.fwd_ptr;
						/* move our fwd ptr to previous block */

	if dibp -> dib.fwd_ptr = null
	then					/* if the tail of the chain */
	     last_dibp = dibp -> dib.back_ptr;
	else dibp -> dib.fwd_ptr -> dib.back_ptr = dibp -> dib.back_ptr;
						/* move our back ptr to next block */

	free dibp -> dib in (my_area);
	dibp = null;

	return;

     end delete_dib;
%page;
abort_attach:
     proc (str1, str2);
dcl  (str1, str2) char (*) aligned;

/* This proc handles attach errors */

	if com_err_sw | static_com_err_sw then call com_err_ (code, my_device_name, str1, str2);
	a_code = code;

	call clean_up;				/* free things up */

	go to attach_return;

     end abort_attach;


clean_up:
     procedure;

/* clean up procedure for cleanup condition and abort_attach,  kills the attempted attachment */

	if adp ^= null then free adp -> ad in (my_area);

	if dibp ^= null
	then if dib.n_attached < 1 then do;
		if dib.next_iocbp ^= null then do;
		     call iox_$close (dib.next_iocbp, (0));
						/* just in case */
		     call iox_$detach_iocb (dib.next_iocbp, (0));
		     end;

		call delete_dib (dibp);		/* drop it */
		end;

	iocbp -> iocb.attach_descrip_ptr = null;
	iocbp -> iocb.attach_data_ptr = null;

	return;

     end clean_up;


handler:
     procedure;

/* This proc handles faults that occur while masked */

	if mask then call hcs_$reset_ips_mask (mask, mask);
	mask = "0"b;

	call continue_to_signal_ (code);
	return;

     end handler;
%page;
flip_com_err_sw:
     entry;

/* this entry is for testing so the state of the static com_err_sw can be changed */

	static_com_err_sw = ^static_com_err_sw;

	call ioa_ ("The static switch is now ^[on^;off^].", static_com_err_sw);

	return;
%page;
%include iocb;
%include iox_modes;
%include io_call_info;
%include event_wait_info;

     end tty_printer_;
