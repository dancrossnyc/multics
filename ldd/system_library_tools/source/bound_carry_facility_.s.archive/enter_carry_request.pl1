/* ************************************************************
   *                                                          *
   * Copyright, (C) Honeywell Information Systems Inc., 1982  *
   *                                                          *
   * Copyright, (C) Honeywell Information Systems Inc., 1980. *
   *                                                          *
   ************************************************************ */


enter_carry_request: ecr: proc;

/* This module implements the commands:

   enter_carry_request, ecr
   list_carry_requests, lcr
   cancel_carry_requests, ccr

   Usage:

   enter_carry_request paths {-control_args}

   where the -new_dir PATH control argument causes the entry named by the
   preceding path argument to be reloaded under PATH instead.
   -notify sends the requestor mail when the request is dumped.

   list_carry_requests {-control_args}

   cancel_carry_request paths {-control_args}

   The last two accept the -admin (-am) control argument, allowing them to list
   or cancel any user's requests (the default is their own) if the user
   has r access to the carry queue.

   All the commands accept:

   -destination DEST, -ds DEST
   where DEST is up to 23 characters long, naming the queue
   DEST.carry.ms instead of the default queue carry.ms, the name
   added to the queue for the default destination.

   -queue_dir PATH, -qd PATH
   looks in the specified directory for the queue, rather than
   in >daemon_dir_dir>carry_dir.

   Steve Herbst 07/26/78 */
/* -notify added 04/18/79 S. Herbst */
/* -trim added, bugs fixed 08/03/79 S. Herbst */
/* MCR 4297 -user added 01/09/80 S. Herbst */
/* Add -entry for ccr, * conv for lcr & ccr, and clean up access forcing and messages 08/14/80 S. Herbst */
/* Add star convention to ecr 12/15/80 S. Herbst */
/* Fixed for "new" error code from hcs_$star_, 1/6/85 Keith Loepere. */

dcl default_destination char (23) int static init ("default destination");

dcl (default_queue_dir, mseg_dir) char (168) init (">daemon_dir_dir>carry_dir");
dcl  mseg_name char (32) init ("carry.ms");

dcl 1 entries (ecount) aligned based (entries_ptr),
    2 entry_type bit (2) unaligned,
    2 nnames fixed bin (15) unaligned,
    2 nindex fixed bin unaligned;

dcl  names (99 /* unlimited */) char (32) based (names_ptr);

dcl  arg char (arg_len) based (arg_ptr);
dcl  line char (line_len) based (line_ptr);
dcl  request char (500);
dcl  move_line char (200);
dcl (request_dir) char (168);
dcl  answer char (32) varying;
dcl (group_id, new_user, request_name, ME) char (32);
dcl  admin (acl_count) char (32) based (admin_ptr);
dcl  atime char (24);
dcl  destination char (23) init ("default destination");
dcl  type_string char (7);

dcl (admin_mode, all_queues, cancelling, ds_sw, expecting_ds, expecting_path) bit (1) aligned init ("0"b);
dcl (hold_sw, listing, trim_sw) bit (1) aligned init ("0"b);
dcl (first, header_printed, no_access, notify_sw, queried_once, warn_hdr_printed) bit (1) aligned;
dcl (SEG init ("0"b), DIR init ("1"b)) bit (1) aligned int static options (constant);
dcl  SEG_TYPE bit (2) int static options (constant) init ("01"b);
dcl  ADROS_ACCESS bit (5) aligned int static options (constant) init ("11111"b);
dcl  request_id bit (36);

dcl  area area based (area_ptr);

dcl (acl_ptr, admin_ptr, line_ptr) ptr init (null);
dcl (arg_ptr, area_ptr, entries_ptr, names_ptr) ptr;

dcl  time fixed bin (71);
dcl (mode, (R_ACCESS init (8), S_ACCESS init (8), SMA_ACCESS init (11)) int static options (constant)) fixed bin (5);
dcl ALL_ENTRIES fixed bin (2) int static options (constant) init (3);
dcl (type, (seg_type init (1), dir_type init (2)) int static) fixed bin (2);
dcl (op, ecr_op init (1), lcr_op init (2), ccr_op init (3)) fixed bin;
dcl (acl_count, admin_count, arg_count, arg_len, ds_count, ecount, ej, name_len) fixed bin;
dcl (i, j, k, level, line_len, request_count, request_len, saved_line_len, walk_level) fixed bin;
dcl  mseg_index fixed bin init (0);
dcl (code, code1) fixed bin (35);

dcl  error_table_$badopt fixed bin (35) ext;
dcl  error_table_$badstar fixed bin (35) ext;
dcl  error_table_$incorrect_access fixed bin (35) ext;
dcl  error_table_$moderr fixed bin (35) ext;
dcl  error_table_$no_message fixed bin (35) ext;
dcl  error_table_$no_s_permission fixed bin (35) ext;
dcl  error_table_$nomatch fixed bin (35) ext;
dcl  error_table_$nostars fixed bin (35) ext;

dcl 1 request_array (arg_count) based (request_array_ptr),
    2 dn char (168),
    2 en char (32),
    2 star_sw bit (1),
    2 matched bit (1);
dcl  new_dir (arg_count) char (168) based (new_dir_ptr);
dcl (request_array_ptr, new_dir_ptr) ptr init (null);

dcl 1 segment_acl aligned,				/* for forcing access */
    2 access_name char (32) unaligned,
    2 modes bit (36),
    2 pad bit (72);

dcl 1 acl (acl_count) aligned based (acl_ptr),
    2 user_id char (32),
    2 mode bit (36),
    2 exmode bit (36),
    2 status_code fixed bin (35);

%include query_info;
%include branch_status;
%include mseg_return_args;
dcl 1 mseg_args like mseg_return_args;

dcl  iox_$error_output ptr ext;

dcl  absolute_pathname_ entry (char (*), char (*), fixed bin (35));
dcl  check_star_name_$entry entry (char (*), fixed bin (35));
dcl  check_star_name_$path entry (char (*), fixed bin (35));
dcl (com_err_, com_err_$suppress_name) entry options (variable);
dcl  command_query_ entry options (variable);
dcl  cu_$arg_count entry (fixed bin);
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  cu_$level_get entry (fixed bin);
dcl  date_time_ entry (fixed bin (71), char (*));
dcl  expand_path_ entry (ptr, fixed bin, ptr, ptr, fixed bin (35));
dcl  expand_pathname_ entry (char (*), char (*), char (*), fixed bin (35));
dcl  get_group_id_$tag_star entry returns (char (32));
dcl  get_system_free_area_ entry returns (ptr);
dcl  hcs_$add_acl_entries entry (char (*), char (*), ptr, fixed bin, fixed bin (35));
dcl  hcs_$add_dir_acl_entries entry (char (*), char (*), ptr, fixed bin, fixed bin (35));
dcl  hcs_$get_user_effmode entry (char (*), char (*), char (*), fixed bin, fixed bin (5), fixed bin (35));
dcl  hcs_$star_ entry (char (*), char (*), fixed bin (2), ptr, fixed bin, ptr, ptr, fixed bin (35));
dcl  hcs_$status_long entry (char (*), char (*), fixed bin (1), ptr, ptr, fixed bin (35));
dcl  hcs_$status_minf entry (char (*), char (*), fixed bin (1), fixed bin (2), fixed bin (24), fixed bin (35));
dcl (ioa_, ioa_$ioa_switch, ioa_$ioa_switch_nnl, ioa_$rs, ioa_$rsnnl) entry options (variable);
dcl  match_star_name_ entry (char (*), char (*), fixed bin (35));
dcl  message_segment_$add_index entry (fixed bin, ptr, fixed bin, bit (72), fixed bin (35));
dcl  message_segment_$close entry (fixed bin, fixed bin (35));
dcl  message_segment_$delete_index entry (fixed bin, bit (72), fixed bin (35));
dcl  message_segment_$incremental_read_index entry (fixed bin, ptr, bit (2), bit (72), ptr, fixed bin (35));
dcl  message_segment_$ms_acl_list entry (char (*), char (*), ptr, fixed bin, ptr, fixed bin (35));
dcl  message_segment_$open entry (char (*), char (*), fixed bin, fixed bin (35));
dcl  message_segment_$own_incremental_read_index entry (fixed bin, ptr, bit (2), bit (72), ptr, fixed bin (35));
dcl  message_segment_$own_read_index entry (fixed bin, ptr, bit (1), ptr, fixed bin (35));
dcl  message_segment_$read_index entry (fixed bin, ptr, bit (1), ptr, fixed bin (35));

dcl (addr, addrel, after, before, divide, fixed, index, length, null, ptr, rtrim, substr, unspec) builtin;

dcl  cleanup condition;
%page;
						/* enter_carry_request: ecr: proc; */

	ME = "enter_carry_request";
	op = ecr_op;
	notify_sw = "0"b;
	go to COMMON;

list_carry_requests: lcr: entry;

	ME = "list_carry_requests";
	op = lcr_op;
	listing = "1"b;
	go to COMMON;

cancel_carry_request: ccr: entry;

	ME = "cancel_carry_request";
	op = ccr_op;
	listing, cancelling = "1"b;

COMMON:	call cu_$arg_count (arg_count);
	if arg_count = 0 & op ^= lcr_op then do;
USAGE:	     call com_err_$suppress_name (0, ME, "Usage:  ^a ^[paths ^]{-control_args}", ME, op ^= lcr_op);
	     return;
	end;
	area_ptr = get_system_free_area_ ();
	entries_ptr, names_ptr = null;

	on condition (cleanup) call clean_up;

	allocate request_array in (area) set (request_array_ptr);
	allocate new_dir in (area) set (new_dir_ptr);
	ds_count, request_count = 0;
	ds_sw = "0"b;
	new_user = "";

	do i = 1 to arg_count;

	     call cu_$arg_ptr (i, arg_ptr, arg_len, code);

	     if substr (arg, 1, 1) ^= "-" then do;	/* pathname */
		if op = lcr_op then go to USAGE;
		request_count = request_count+1;
		call expand_pathname_ (arg, dn (request_count), en (request_count), code);
		if code ^= 0 then do;
		     call com_err_ (code, ME, "^a", arg);
		     go to RETURN;
		end;
		call check_star_name_$entry (en (request_count), code);
		if (code = 1 | code = 2) then star_sw (request_count) = "1"b;  /* valid starname */
		else if code ^= 0 then do;
BAD_STARNAME:	     call com_err_ (code, ME, "^a", en (request_count));
		     go to RETURN;
		end;
		else star_sw (request_count) = "0"b;
		matched (request_count) = "0"b;
		new_dir (request_count) = "";
	     end;


	     else if arg = "-destination" | arg = "-ds" then do;
		i = i+1;
		call cu_$arg_ptr (i, arg_ptr, arg_len, code);
		if code ^= 0 then do;
		     call com_err_ (0, ME, "-destination value missing.");
		     go to RETURN;
		end;
		ds_sw = "1"b;
		destination = arg;
		mseg_name = arg || ".carry.ms";
		call hcs_$status_minf (mseg_dir, mseg_name, 1, (0), (0), code);
		if code ^= 0 & code ^= error_table_$no_s_permission then do;
		     call com_err_ (0, ME, "Invalid destination ^a", arg);
		     go to RETURN;
		end;
	     end;

	     else if arg = "-entry" | arg = "-et" then do;
		if op ^= ccr_op then go to BADOPT;
		i = i + 1;
		call cu_$arg_ptr (i, arg_ptr, arg_len, code);
		if code ^= 0 then do;
		     call com_err_ (0, ME, "No value specified for -entry");
		     go to RETURN;
		end;
		call check_star_name_$entry (arg, code);
		if (code = 1 | code = 2) then star_sw (request_count) = "1"b;
		else if code ^= 0 then go to BAD_STARNAME;
		else star_sw (request_count) = "0"b;
		request_count = request_count + 1;
		dn (request_count) = "";
		en (request_count) = arg;
		matched (request_count) = "0"b;
		new_dir (request_count) = "";
	     end;

	     else if arg = "-queue_dir" | arg = "-qd" then do;
		i = i+1;
		call cu_$arg_ptr (i, arg_ptr, arg_len, code);
		if code ^= 0 then do;
		     call com_err_ (0, ME, "No value specified for -queue_dir");
		     go to RETURN;
		end;
		call absolute_pathname_ (arg, mseg_dir, code);
		if code ^= 0 then do;
		     call com_err_ (code, ME, "^a", arg);
		     go to RETURN;
		end;
		default_destination = "default destination";  /* have to recompute */
	     end;

	     else if arg = "-admin" | arg = "-am" then
		if op = ecr_op then go to BADOPT;
		else admin_mode = "1"b;

	     else if arg = "-all" | arg = "-a" then do;
		if op ^= lcr_op then go to BADOPT;
		all_queues = "1"b;
	     end;

	     else if op ^= ecr_op then go to BADOPT;	/* the rest are for ecr */

	     else if arg = "-hold" | arg = "-hd" then hold_sw = "1"b;
	     else if arg = "-trim" then trim_sw = "1"b;
	     else if arg = "-no_trim" | arg = "-notrim" then trim_sw = "0"b;
	     else if arg = "-notify" | arg = "-nt" then notify_sw = "1"b;
	     else if arg = "-no_notify" | arg = "-nnt" then notify_sw = "0"b;
	     else if arg = "-new_dir" | arg = "-nd" then do;
		if request_count = 0 then do;
		     call com_err_ (0, ME, "No path preceding ^a.", arg);
		     go to RETURN;
		end;
		i = i+1;
		call cu_$arg_ptr (i, arg_ptr, arg_len, code);
		if code ^= 0 then do;
		     call com_err_ (0, ME, "No value specified for -new_dir");
		     go to RETURN;
		end;
		if arg = "" then do;
		     call com_err_ (0, ME, "Invalid -new_dir argument """".");
		     go to RETURN;
		end;
		call absolute_pathname_ (arg, new_dir (request_count), code);
		if code ^= 0 then do;
		     call com_err_ (code, ME, "^a", arg);
		     go to RETURN;
		end;
		call check_star_name_$path (new_dir (request_count), code);
		if code ^= 0 then do;		/* bad syntax, equal or starname */
		     call com_err_ (error_table_$badstar, ME, "^a", new_dir (request_count));
		     go to RETURN;
		end;
	     end;

	     else if arg = "-user" then do;
		i = i+1;
		call cu_$arg_ptr (i, arg_ptr, arg_len, code);
		if code ^= 0 then do;
		     call com_err_ (0, ME, "No value specified for -user");
		     go to RETURN;
		end;
		new_user = arg;
		j = index (new_user, ".");
		if j = 0 then do;
		     call com_err_ (0, ME, "-user argument not of the form Person.Project");
		     go to RETURN;
		end;
		k = index (substr (new_user, j + 1), ".");
		if k ^= 0 then new_user = substr (new_user, 1, j + k - 1);
	     end;

	     else do;
BADOPT:		call com_err_ (error_table_$badopt, ME, "^a", arg);
		go to RETURN;
	     end;
	end;

	if all_queues & ds_sw & op = lcr_op then do;
	     call com_err_ (0, ME, "Incompatible control arguments -all and -ds");
	     go to RETURN;
	end;

	if ^ds_sw then destination = default_destination;

	if request_count = 0 & (^listing | cancelling) then do;
	     call com_err_ (0, ME, "No pathnames specified.");
	     go to RETURN;
	end;

	if op = ecr_op then go to ENTER_REQUESTS;

	header_printed = "0"b;

	if ^all_queues then do;
	     if destination = "default destination" then call get_default_destination (mseg_dir, mseg_name);

	     call list_queue (mseg_dir, mseg_name);
	end;

	else do;
	     call hcs_$star_ (mseg_dir, "**.carry.ms", 2 /* segs */, area_ptr, ecount, entries_ptr, names_ptr, code);
	     if code ^= 0 then do;
		call com_err_ (code, ME, "^a^[>^]**.carry.ms", mseg_dir, mseg_dir ^= ">");
		go to RETURN;
	     end;

	     do ej = 1 to ecount;
		if entries (ej).entry_type = SEG_TYPE then do;
		     mseg_name = names_ptr -> names (entries_ptr -> entries (ej).nindex);

		     call get_destination (mseg_dir, mseg_name);

		     call list_queue (mseg_dir, mseg_name);
		end;
	     end;
	end;

	go to RETURN;
%page;
ENTER_REQUESTS:

	call message_segment_$open (mseg_dir, mseg_name, mseg_index, code);
	if mseg_index = 0 then do;
	     call com_err_ (code, ME, "^a^[>^]^a", mseg_dir, mseg_dir ^= ">", mseg_name);
	     go to RETURN;
	end;

	call cu_$level_get (level);
	group_id = get_group_id_$tag_star ();
	call get_administrators;

	do i = 1 to request_count;

	     if star_sw (i) then call enter_stars (dn (i), en (i));

	     else call enter_one (dn (i), en (i));

END:	end;

RETURN:	call clean_up;

	return;
%page;
enter_one: proc (P_dn, P_en);

dcl (P_dn, P_en) char (*);
dcl j fixed bin;

	     do j = 1 to admin_count;
		mode = 0;
		call hcs_$get_user_effmode (P_dn, "", admin (j), level, mode, code);
		if code ^= 0 | mode < S_ACCESS then do;
		     if code = error_table_$incorrect_access then
			call ioa_$ioa_switch (iox_$error_output,
			"Warning: Unable to check access on ^a", dn (j));
		     else call ioa_$ioa_switch (iox_$error_output,
			"Warning: ^a lacks s access to ^a", admin (j), dn (j));
		end;
	     end;

	     no_access, warn_hdr_printed = "0"b;
	     walk_level = 0;
	     queried_once = "0"b;			/* about forcing access for this request */

	     call carry_access (P_dn, P_en, type);

	     if no_access then do;
		call com_err_$suppress_name (0, "enter_carry_request", "Request ^a^[>^]^a not queued.",
		     P_dn, P_dn ^= ">", P_en);
		go to END;
	     end;

	     if type = dir_type then type_string = "Subtree";
	     else type_string = "Segment";

	     call ioa_$rs ("^a ^a^[>^]^a^[ -user ^a^;^s^]^[ -trim^]^[ -new_dir ^a^;^s^]^[ -notify^]^[ -hold^]",
		request, request_len, type_string, P_dn, P_dn ^= ">", P_en,
		new_user ^= "", new_user, trim_sw, new_dir (i) ^= "", new_dir (i), notify_sw, hold_sw);

	     call message_segment_$add_index (mseg_index, addr (request), request_len*9, (mseg_args.ms_id), code);
	     if code ^= 0 then do;
		call com_err_ (code, ME, "^a>^a", mseg_dir, mseg_name);
		go to RETURN;
	     end;

end enter_one;
%page;
enter_stars: proc (P_dn, P_starname);

dcl (P_dn, P_starname) char (*);
dcl 1 entries (entry_count) based (entries_ptr),
   2 pad bit (18) unaligned,
   2 nindex bit (18) unaligned;
dcl names (999) char (32) aligned based (names_ptr);
dcl en char (32);
dcl area area based (area_ptr);
dcl (area_ptr, entries_ptr, names_ptr) ptr;
dcl (entry_count, j) fixed bin;

	area_ptr = get_system_free_area_ ();
	entries_ptr, names_ptr = null;

	on cleanup call star_cleanup;

	call hcs_$star_ (P_dn, P_starname, ALL_ENTRIES, area_ptr, entry_count, entries_ptr, names_ptr, code);
	if code ^= 0 then do;
	     call com_err_ (code, ME, "^a^[>^]^a", P_dn, P_dn ^= ">", P_starname);
	     return;
	end;

	do j = 1 to entry_count;

	     en = names_ptr -> names (fixed (entries_ptr -> entries (j).nindex));

	     call enter_one (P_dn, en);
	end;

	call star_cleanup;

	return;

star_cleanup: proc;

	if entries_ptr ^= null then free entries in (area);
	if names_ptr ^= null then free names in (area);

end star_cleanup;

end enter_stars;
%page;
list_queue: proc (P_dn, P_en);

/* Lists requests in a single queue */

dcl (P_dn, P_en) char (*);

	     call message_segment_$open (P_dn, P_en, mseg_index, code);
	     if mseg_index = 0 then do;
		call com_err_ (code, ME, "^a>^a", P_dn, P_en);
		return;
	     end;

	     first = "1"b;

LOOP:	     if first then do;

		first = "0"b;

		if admin_mode then call message_segment_$read_index (mseg_index, area_ptr, "0"b, addr (mseg_args), code);
		else call message_segment_$own_read_index (mseg_index, area_ptr, "0"b, addr (mseg_args), code);
		if code ^= 0 then do;
		     if code = error_table_$no_message then
			if admin_mode then call ioa_ ("Queue ^a is empty.", queue_name (P_dn, P_en));
			else call ioa_ ("You have no requests in queue ^a", queue_name (P_dn, P_en));
		     else call com_err_ (code, ME, "^a>^a", P_dn, P_en);
QUEUE_RETURN:	     call message_segment_$close (mseg_index, code);
		     return;
		end;

		if admin_mode & ^cancelling & ^header_printed then do;
		     call ioa_ ("DATE ENTERED^6xSENDER^26xTYPE^4xPATHNAME");
		     header_printed = "1"b;
		end;
	     end;

	     else do;
		if admin_mode then call message_segment_$incremental_read_index
		     (mseg_index, area_ptr, "01"b, mseg_args.ms_id, addr (mseg_args), code);
		else call message_segment_$own_incremental_read_index
		     (mseg_index, area_ptr, "01"b, mseg_args.ms_id, addr (mseg_args), code);
		if code ^= 0 then do;
		     if code = error_table_$no_message then do;
			if cancelling then do i = 1 to request_count;
			     if ^matched (i) then call com_err_ (0, ME,
				"^a^[>^]^a not found in queue ^a", dn (i), dn (i) ^= "", en (i),
				queue_name (P_dn, P_en));
			end;
			if admin_mode then call ioa_ ("");
		     end;
		     else call com_err_ (code, ME, "^a>^a", P_dn, P_en);
		     go to QUEUE_RETURN;
		end;
	     end;

	     line_ptr = mseg_args.ms_ptr;
	     line_len, saved_line_len = divide (mseg_args.ms_len, 9, 17, 0)-1;

	     if ^cancelling /* listing */ & request_count = 0 then go to LIST;

	     i = index (line, " -") - 1;
	     if i > 0 then line_len = i;
	     call expand_path_ (addrel (line_ptr, 2), line_len-8, addr (request_dir), addr (request_name), code);
	     name_len = length (rtrim (request_name));
	     do i = 1 to request_count;

		if dn (i) = request_dir | dn (i) = "" /* -entry */ then do;
		     call match_star_name_ (request_name, en (i), code);
		     if code = 0 then do;

PROCESS:			if cancelling then do;
			     matched (i) = "1"b;	/* found a match for this argument */
			     call message_segment_$delete_index (mseg_index, mseg_args.ms_id, code);
			     if code ^= 0 then call com_err_ (code, ME,
				"Unable to delete ^a^[>^]^a from queue ^a",
				request_dir, request_dir ^= ">", request_name,
				queue_name (P_dn, P_en));
			     else do;
				call ioa_ ("Carry of ^a>^a to ^a cancelled.", request_dir, request_name, destination);
			     end;
			     go to NEXT;
			end;

			else do;
LIST:			     line_len = saved_line_len;
			     unspec (time) = mseg_args.ms_id;
			     call date_time_ (time, atime);
			     i = index (line, " -new_dir");
			     if i ^= 0 then do;
				move_line = substr (line, i + 1);
				line_len = i - 1;
			     end;
			     else move_line = "";
			     if admin_mode then call ioa_ ("^16a  ^32a^a^[ (destination ^a)^]",
				substr (atime, 1, 16), mseg_args.sender_id, line, all_queues, destination);
			     else call ioa_ ("^16a  ^a^[  (destination ^a)^]",
				substr (atime, 1, 16), line, all_queues, destination);
			     if move_line ^= "" then call ioa_ ("^10x^a", move_line);
			     go to NEXT;
			end;
		     end;
		end;

/* If pathnames differ but entrynames are the same, compare unique id's */

		else if en (i) = request_name then do;
		     call hcs_$status_long (request_dir, request_name, 1, addr (branch_status), null, code);
		     if code = 0 then do;
			request_id = branch_status.unique_id;
			call hcs_$status_long (dn (i), en (i), 1, addr (branch_status), null, code);
			if code = 0 & branch_status.unique_id = request_id then go to PROCESS;
		     end;
		end;
	     end;

NEXT:	     free line in (area);

	     go to LOOP;

	end list_queue;
%page;
clean_up:	proc;

	     if mseg_index ^= 0 then call message_segment_$close (mseg_index, code);
	     if line_ptr ^= null then free line in (area);
	     if request_array_ptr ^= null then free request_array in (area);
	     if new_dir_ptr ^= null then free new_dir in (area);
	     if acl_ptr ^= null then free acl in (area);
	     if admin_ptr ^= null then free admin in (area);
	     if entries_ptr ^= null then free entries in (area);
	     if names_ptr ^= null then free names in (area);

	     if mseg_dir ^= default_queue_dir then default_destination = "default destination";  /* restore */

	end clean_up;
%page;
carry_access: proc (access_dn, access_en, a_type);

dcl  access_dn char (*);
dcl  access_en char (*);
dcl (a_type, type) fixed bin (2);

dcl  dir_path char (168);
dcl (entries_ptr, names_ptr) ptr init (null);
dcl (ecount, ej) fixed bin;

dcl 1 entries (ecount) aligned based (entries_ptr),
    2 entry_type bit (2) unaligned,
    2 nnames fixed bin (15) unaligned,
    2 nindex fixed bin unaligned;

dcl  names (99) char (32) based (names_ptr);

	     walk_level = walk_level + 1;

	     on condition (cleanup) begin;
		if entries_ptr ^= null then free entries in (area);
		if names_ptr ^= null then free names in (area);
	     end;

	     call hcs_$status_minf (access_dn, access_en, 1, a_type, (0), code);
	     if code ^= 0 then do;
		no_access = "1"b;
		call com_err_ (code, ME, "^a>^a", access_dn, access_en);
		warn_hdr_printed = "0"b;
		return;
	     end;

	     if a_type = seg_type then do;

		call hcs_$get_user_effmode (access_dn, access_en, group_id, level, mode, code);
		if code ^= 0 | mode<R_ACCESS then do;
		     if ^force_access (group_id, SEG) then do;
			if walk_level > 1 then call warn;
			else do;
			     no_access = "1"b;
			     if code = error_table_$incorrect_access then do;
NO_S:				call com_err_ (code, ME, "^/Unable to check access to ^a>^a",
				     access_dn, access_en);
				warn_hdr_printed = "0"b;
				return;
			     end;
			     call com_err_ (0, ME, "You need r access to ^a>^a", access_dn, access_en);
			     warn_hdr_printed = "0"b;
			     return;
			end;
		     end;
		end;
		do j = 1 to admin_count;
		     call hcs_$get_user_effmode (access_dn, access_en, admin (j), level, mode, code);
		     if code ^= 0 | mode<R_ACCESS then do;
			if ^force_access (admin (j), SEG) then do;
			     if walk_level > 1 then call warn;
			     else do;
				no_access = "1"b;
				call com_err_ (0, ME, "^a needs r access to ^a>^a",
				     admin (j), access_dn, access_en);
				warn_hdr_printed = "0"b;
				return;
			     end;
			end;
		     end;
		end;
	     end;

	     else do;				/* directory */

		do j = 1 to admin_count;
		     call hcs_$get_user_effmode (access_dn, access_en, admin (j), level, mode, code);
		     if code ^= 0 | mode<SMA_ACCESS then do;
			if ^force_access (admin (j), DIR) then do;
			     if walk_level > 1 then call warn;
			     else do;
				no_access = "1"b;
				if code = error_table_$incorrect_access then go to NO_S;
				call com_err_ (0, ME, "^a needs sma access to ^a>^a",
				     admin (j), access_dn, access_en);
				warn_hdr_printed = "0"b;
				return;
			     end;
			end;
		     end;
		end;
		call ioa_$rsnnl ("^a>^a", dir_path, (168), access_dn, access_en);
STAR:		call hcs_$star_ (dir_path, "**", 2, area_ptr, ecount, entries_ptr, names_ptr, code);
		if code ^= 0 then
		     if code = error_table_$nomatch then do;
			if walk_level = 1 then no_access = "1"b;  /* request is not queued */
			return;
		     end;
		     else do;
			if ^force_access (group_id, DIR) then do;
			     if walk_level > 1 then call warn;
			     else do;
				no_access = "1"b;
				if code = error_table_$moderr then code = 0;
				call com_err_ (code, ME, "^[You need sma access to ^]^a^[>^]^a",
				     code = 0, access_dn, access_dn ^= ">", access_en);
				warn_hdr_printed = "0"b;
				return;
			     end;
			end;
			else go to STAR;
		     end;

		do ej = 1 to ecount;

		     call carry_access (dir_path, names (nindex (ej)), type);

		     if no_access then do;
			free entries in (area);
			free names in (area);
			return;
		     end;

		end;

		free entries in (area);
		free names in (area);
	     end;


force_access:  proc (a_id, a_sw) returns (bit (1));

dcl  a_id char (32);
dcl  a_sw bit (1) aligned;

		if ^queried_once then do;
		     queried_once = "1"b;

		     query_info.version = query_info_version_4;
		     query_info.yes_or_no_sw = "1"b;

		     call command_query_ (addr (query_info), answer, "enter_carry_request",
			"Do you want to force access to Carry and/or yourself?");
		     if answer ^= "yes" then go to CA_RETURN;
		end;
		segment_acl.access_name = a_id;
		if a_sw = DIR then segment_acl.modes = "111"b; /* sma */
		else segment_acl.modes = "100"b;	/* r */
		if a_sw = DIR then call hcs_$add_dir_acl_entries
		     (access_dn, access_en, addr (segment_acl), 1, code1);
		else call hcs_$add_acl_entries (access_dn, access_en, addr (segment_acl), 1, code1);
		if code1 ^= 0 then return ("0"b);
		return ("1"b);

	     end force_access;

warn:	     proc;

		if code = 0 then do;
		     if ^warn_hdr_printed then do;
			warn_hdr_printed = "1"b;
			call ioa_$ioa_switch (iox_$error_output,
			     "Warning: Entries in subtree will be omitted due to lack of access:^/^5x^a>^a",
			     access_dn, access_en);
		     end;
		     else call ioa_$ioa_switch (iox_$error_output, "^5x^a>^a", access_dn, access_en);
		     go to CA_RETURN;
		end;
		warn_hdr_printed = "0"b;
		call ioa_$ioa_switch_nnl (iox_$error_output, "Warning: ");
		call com_err_$suppress_name (code, ME, "Entry in subtree will be omitted:  ^a>^a",
		     access_dn, access_en);

		go to CA_RETURN;

	     end warn;


CA_RETURN:     return;

	end carry_access;
%page;
queue_name: proc (P_dn, P_en) returns (char (168));

dcl (P_dn, P_en) char (*);
dcl  path char (168);

/* returns "for destination STR" if queue is in the default dir, else pathname */

	     if mseg_dir = default_queue_dir then do;
		if destination = "default destination" then
		     call get_default_destination (mseg_dir, mseg_name);
		if destination = "" | destination = "default destination" then
		     return ("for default destination");
		else return ("for destination " || destination);
	     end;

	     call ioa_$rsnnl ("^a^[>^]^a", path, length (path), P_dn, P_dn ^= ">", P_en);
	     return (path);

	end queue_name;
%page;
get_default_destination: proc (P_dn, P_en);

/* Sets the default destination by calling get_destination */

dcl (P_dn, P_en) char (*);

	if default_destination ^= "default destination" then do;  /* if already set, just return it */
	     destination = default_destination;
	     return;
	end;

	call get_destination (P_dn, "carry.ms");

	default_destination = destination;

end get_default_destination;
%page;
get_destination: proc (P_dn, P_en);

/* Determines the destination name from the prefixed entryname of the queue */

dcl (P_dn, P_en) char (*);
dcl (i, j, names_count) fixed bin;
dcl names_ptr ptr;
dcl names (names_count) char (32) based (names_ptr);

	call hcs_$status_long (P_dn, P_en, 1, addr (branch_status), area_ptr, code);
	if code ^= 0 then do;
NO_DS:	     destination = "unknown destination";
	     return;
	end;
	names_ptr = ptr (area_ptr, branch_status.names_rel_pointer);
	names_count = fixed (branch_status.number_names);
	do j = 1 to names_count;
	     if after (names (j), ".") = "carry.ms" then do;  /* DEST.carry.ms */
		destination = before (names (j), ".");
		free names in (area);
		return;
	     end;
	end;
	free names in (area);
	go to NO_DS;

end get_destination;
%page;
get_administrators: proc;

/* This internal procedure enumerates users having "adros"
   extended access to the carry queue. */

dcl  i fixed bin;

	     acl_count = -1;
	     call message_segment_$ms_acl_list (mseg_dir, mseg_name, acl_ptr, acl_count, area_ptr, code);
	     allocate admin in (area) set (admin_ptr);
	     admin_count = 0;
	     do i = 1 to acl_count;
		if substr (acl.exmode (i), 1, 5) = ADROS_ACCESS then do;
		     admin_count = admin_count+1;
		     admin (admin_count) = acl.user_id (i);
		end;
	     end;

	end get_administrators;

     end enter_carry_request;
