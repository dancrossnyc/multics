/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


carry_total: ct: proc;

/* This active function returns the number of carry requests in a given queue.

   Usage:
	     [carry_total {-control_args}]

   where control args can be:

   -admin
	to include all requests. By default, only the user's own requests
	are included.
   -destination XXXX, -ds XXXX
	to specify a destination and thereby the queue XXXX.carry.ms.
   -queue_dir path, -qd path
	to specify the pathname of a carry queue.

   Steve Herbst 9/21/76 */


dcl mseg_dir char(168) init(">daemon_dir_dir>carry_dir");
dcl mseg_name char(32) init("carry.ms");

dcl arg char(arg_len) based(arg_ptr);
dcl return_arg char(return_len) varying based(return_ptr);
dcl message char(mseg_args.ms_len) based(mseg_args.ms_ptr);
dcl buffer char(8) aligned;

dcl (active_function, admin_mode) bit(1) aligned;

dcl area area based(area_ptr);

dcl (area_ptr, arg_ptr, return_ptr) ptr;

dcl (arg_count, arg_len, i, j, message_count, mseg_index, return_len) fixed bin;
dcl code fixed bin(35);

dcl error_table_$badopt fixed bin(35) ext;
dcl error_table_$entlong fixed bin(35) ext;
dcl error_table_$no_message fixed bin(35) ext;
dcl error_table_$no_s_permission fixed bin(35) ext;
dcl error_table_$not_act_fnc fixed bin(35) ext;

%include mseg_return_args;
dcl 1 mseg_args like mseg_return_args;

dcl complain entry variable options(variable);

dcl active_fnc_err_ entry options(variable);
dcl com_err_ entry options(variable);
dcl cu_$af_return_arg entry(fixed bin,ptr,fixed bin,fixed bin(35));
dcl cu_$arg_ptr entry(fixed bin,ptr,fixed bin,fixed bin(35));
dcl expand_path_ entry(ptr,fixed bin,ptr,ptr,fixed bin(35));
dcl get_system_free_area_ entry returns(ptr);
dcl hcs_$status_minf entry(char(*),char(*),fixed bin(1),fixed bin(2),fixed bin(24),fixed bin(35));
dcl ioa_ entry options(variable);
dcl ioa_$rsnnl entry options(variable);
dcl message_segment_$close entry(fixed bin,fixed bin(35));
dcl message_segment_$get_message_count_index entry(fixed bin,fixed bin,fixed bin(35));
dcl message_segment_$open entry(char(*),char(*),fixed bin,fixed bin(35));
dcl message_segment_$own_incremental_read_index entry(fixed bin,ptr,bit(2),bit(72),ptr,fixed bin(35));
dcl message_segment_$own_read_index entry(fixed bin,ptr,bit(1),ptr,fixed bin(35));

dcl (addr, length, null, reverse, substr, verify) builtin;
/**/
	call cu_$af_return_arg(arg_count,return_ptr,return_len,code);
	if code=error_table_$not_act_fnc then do;
	     active_function = "0"b;
	     complain = com_err_;
	end;
	else do;
	     active_function = "1"b;
	     complain = active_fnc_err_;
	end;
	admin_mode = "0"b;

	do i = 1 to arg_count;

	     call cu_$arg_ptr(i,arg_ptr,arg_len,code);

	     if substr(arg,1,1)^="-" then do;
  USAGE:		if active_function then call active_fnc_err_(0,"",
		     "Usage:  [carry_total {-control_args}]");
		else call com_err_(0,"","Usage:  carry_total -control_args-");
		return;
	     end;
	     else if arg="-admin" then admin_mode = "1"b;
	     else if arg="-destination" | arg="-ds" then do;
		i = i+1;
		call cu_$arg_ptr(i,arg_ptr,arg_len,code);
		if code^=0 then do;
		     call complain(0,"carry_total","Destination missing.");
		     return;
		end;
		mseg_name = arg || ".carry.ms";
		call hcs_$status_minf(mseg_dir,mseg_name,1,(0),(0),code);
		if code^=0 & code^=error_table_$no_s_permission then do;
		     call complain(0,"carry_total","Invalid destination ^a",arg);
		     return;
		end;
	     end;
	     else if arg="-queue_dir" | arg="-qd" then do;
		i = i+1;
		call cu_$arg_ptr(i,arg_ptr,arg_len,code);
		if code^=0 then do;
		     call complain(0,"carry_total","Queue directory pathname missing.");
		     return;
		end;
		call expand_path_(arg_ptr,arg_len,addr(mseg_dir),null,code);
		if code^=0 then do;
		     call complain(code,"carry_total","^a",arg);
		     return;
		end;
	     end;
	     else do;
		call complain(error_table_$badopt,"carry_total","^a",arg);
		return;
	     end;
	end;
/**/
	call message_segment_$open(mseg_dir,mseg_name,mseg_index,code);
	if mseg_index=0 then do;
	     call complain(code,"carry_total","^a>^a",mseg_dir,mseg_name);
	     return;
	end;

	if admin_mode then do;
	     call message_segment_$get_message_count_index(mseg_index,message_count,code);
	     if code^=0 then do;
  MSEG_ERROR:	call complain(code,"carry_total","^a>^a",mseg_dir,mseg_name);
		go to CLOSE;
	     end;
	end;

	else do;
	     area_ptr = get_system_free_area_();
	     message_count = 0;
	     call message_segment_$own_read_index(mseg_index,area_ptr,"0"b,addr(mseg_args),code);

	     do while(code=0);
		message_count = message_count+1;
		free mseg_args.ms_ptr->message in(area);
		call message_segment_$own_incremental_read_index
		     (mseg_index,area_ptr,"01"b,mseg_args.ms_id,addr(mseg_args),code);
	     end;

	     if code^=error_table_$no_message then go to MSEG_ERROR;
	end;

	if active_function then do;
	     call ioa_$rsnnl("^d",buffer,j,message_count);
	     return_arg = substr(buffer,1,j);
	end;
	else if admin_mode then call ioa_("There are ^d carry requests in ^a>^a",
					message_count,mseg_dir,mseg_name);
	else call ioa_("You have ^d carry requests in ^a>^a",message_count,mseg_dir,mseg_name);

  CLOSE:	call message_segment_$close(mseg_index,code);

end carry_total;
