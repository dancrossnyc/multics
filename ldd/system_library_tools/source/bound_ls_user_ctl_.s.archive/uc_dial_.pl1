/****^  ********************************************
        *                                          *
        * Copyright, (C) Honeywell Bull Inc., 1987 *
        *                                          *
        ******************************************** */

/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* This module is part of the Multics Network Architecture (MNA) version of  */
/* user control.  MNA user control serves users coming into Multics via      */
/* separate networks (eg, the Distributed Systems Architecture (DSA)	       */
/* network.  MNA user control is not used for logins through the Multics     */
/* Communications System (MCS).  A separate MCS user control system serves   */
/* MCS users.						       */
/*							       */
/* To Be Supplied:						       */
/*  1) Brief module description.  See MDD010 or MTBs 751 and 752 for details */
/*     about this module, and its relationship to modules in the MCS user    */
/*     control system.					       */
/*  2) Operator error message documentation.  This program calls	       */
/*     sys_log_$general but does not contain the required descriptions of    */
/*     these messages.  This omission was waived for initial installation    */
/*     of the subsystem by the auditor, security coordinator, and by MDC     */
/*     management.						       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

/****^  HISTORY COMMENTS:
  1) change(86-04-27,Swenson), approve(87-07-13,MCR7737),
     audit(87-05-18,GDixon), install(87-08-04,MR12.1-1055):
     Initial coding.
  2) change(87-04-27,GDixon), approve(87-07-13,MCR7737),
     audit(87-07-30,Brunelle), install(87-08-04,MR12.1-1055):
     Upgraded for change to answer_table.incl.pl1 and user_table_entry.incl.pl1
  3) change(87-05-18,GDixon), approve(87-07-13,MCR7737),
     audit(87-07-30,Brunelle), install(87-08-04,MR12.1-1055):
      A) Correct coding standard violations.
      B) Standardize format of audit messages.
  4) change(87-06-01,GDixon), approve(87-07-13,MCR7737),
     audit(87-07-30,Brunelle), install(87-08-04,MR12.1-1055):
      A) Expand aliases in "dial DIAL_ID person.project".
  5) change(87-06-11,GDixon), approve(87-07-13,MCR7737),
     audit(87-07-30,Brunelle), install(87-08-04,MR12.1-1055):
      A) Change to call as_access_audit_$channel to audit dialins.
                                                   END HISTORY COMMENTS */

/* format: style4,indattr,insnl */

uc_dial_:
     procedure (P_utep, P_dial_qualifier, P_person_id, P_project_id,
	P_connection_name, P_connection_access_class_range, P_target_utep,
	P_code);

/* Parameters */

dcl  P_utep	        ptr parameter;
dcl  P_dial_qualifier       char (*) parameter;
dcl  P_person_id	        char (*) parameter;
dcl  P_project_id	        char (*) parameter;
dcl  P_connection_name      char (*) parameter;
dcl  P_connection_access_class_range
		        (2) bit (72) aligned parameter;
dcl  P_target_utep	        ptr parameter;
dcl  P_code	        fixed bin (35) parameter;

/* Automatic */

dcl  1 auto_channel_audit_info
		        aligned like channel_audit_info automatic;
dcl  code		        fixed bin (35) automatic;
dcl  dial_qualifier	        char (32) automatic;
dcl  find_person_project    bit (1) aligned automatic;
dcl  target_person_id       char (32) automatic;
dcl  target_project_id      char (32) automatic;
dcl  target_utep	        ptr automatic;
dcl  user_validated	        bit (1) aligned automatic;

/* Based */

dcl  1 target_ute	        aligned like ute based (target_utep);


/* Entries */

dcl  aim_check_$in_range    entry (bit (72) aligned, (2) bit (72) aligned) returns (bit (1) aligned);
dcl  as_access_audit_$channel
		        entry (ptr, ptr, ptr, fixed bin, ptr, char(*));
dcl  convert_status_code_   entry (fixed bin (35), char (8) aligned, char (100) aligned);
dcl  hash_$search	        entry (ptr, char (*), fixed bin (35), fixed bin (35));
dcl  pnt_manager_$admin_get_entry
		        entry (char (*), ptr, fixed bin (35));


/* External */

dcl  (
     as_error_table_$dialnoline,
     as_error_table_$dialnotup,
     error_table_$action_not_performed,
     error_table_$ai_restricted,
     error_table_$id_not_found
     )		        fixed bin (35) ext static;

/* Constant */

dcl  DENIED	        bit (1) aligned initial ("0"b) internal static options (constant);
dcl  FALSE	        bit (1) aligned initial ("0"b) internal static options (constant);
dcl  GRANTED	        bit (1) aligned initial ("1"b) internal static options (constant);
dcl  ME		        char (8) initial ("uc_dial_") int static options (constant);
dcl  TRUE		        bit (1) aligned initial ("1"b) internal static options (constant);

/* Builtin */

dcl  (addr, length, null, rtrim, substr)
		        builtin;
%page;
/* Program */

	code = 0;
	utep = P_utep;
	if utep = null ()
	then
	     user_validated = FALSE;
	else user_validated = TRUE;

	ansp = as_data_$ansp;
	dutp = as_data_$dutp;
	autp = as_data_$autp;

	dial_qualifier = P_dial_qualifier;
	if dial_qualifier = ""
	then
	     call Abort (as_error_table_$dialnoline);

	if dial_qualifier = "system"
	then
	     call Abort (error_table_$action_not_performed);

	target_person_id = P_person_id;
	target_project_id = P_project_id;
	if target_person_id = ""
	then
	     find_person_project = FALSE;
	else do;
	     find_person_project = TRUE;
	     if ^convert_aliases (target_person_id, target_project_id)
	     then call Abort (as_error_table_$dialnotup);
	end;

	target_utep = find_dialable_process ();
	if target_utep = null ()
	then
	     call Abort (as_error_table_$dialnotup);

/**** Mark the UTE has having a client */
	target_ute.ndialed_consoles =
	     target_ute.ndialed_consoles + 1;

/**** Audit the DIALIN */

	call Audit_dialin (target_utep, GRANTED, "");

	code = 0;

RETURN:
	if code = 0
	then
	     P_target_utep = target_utep;
	else P_target_utep = null ();

	P_code = code;
	return;
%page;
convert_aliases:
     procedure (rq_person, rq_project) returns (bit (1));

dcl  rq_person	        char (32);
dcl  rq_project	        char (32);

dcl  code		        fixed bin (35);
dcl  satx		        fixed bin (35);

	call pnt_manager_$admin_get_entry (rq_person, addr (pnte), code);
	if code = error_table_$id_not_found
	then return (FALSE);
	else if code ^= 0
	then do;
	     call Log_Error (code,
		"Can't find PNT entry: ^a", rq_person);
	     return (FALSE);
	end;
	else rq_person = substr (pnte.user_id, 1, length (rq_person));

	if rq_project = ""
	then
	     rq_project = pnte.default_project;
	else do;
	     call hash_$search (as_data_$sat_htp, rq_project, satx, code);
	     if code ^= 0
	     then return (FALSE);
	     satp = as_data_$satp;
	     satep = addr (sat.project (satx));
	     if rq_project ^= project.project_id
	     then if rq_project ^= project.alias
		then do;
		     call Log_Error (-1,
			"^a: sat.ht has ""^a"", sat has ""^a"" at ^p", rq_project,
			project.project_id, satep);
		     return (FALSE);
		end;
	     rq_project = project.project_id;
	end;

	return (TRUE);
     end convert_aliases;
%page;
find_dialable_process:
     procedure () returns (ptr);

dcl  i		        fixed bin automatic;
dcl  temp_utep	        ptr automatic;

	do i = 1 to anstbl.current_size;
	     temp_utep = addr (anstbl.entry (i));
	     if ok_for_dial (temp_utep)
	     then
		return (temp_utep);
	end;

	do i = 1 to dutbl.current_size;
	     temp_utep = addr (dutbl.entry (i));
	     if ok_for_dial (temp_utep)
	     then
		return (temp_utep);
	end;

	do i = 1 to autbl.current_size;
	     temp_utep = addr (autbl.entry (i));
	     if ok_for_dial (temp_utep)
	     then
		return (temp_utep);
	end;

	return (null ());				/* couldn't find any dialable process */
%page;
ok_for_dial:
	procedure (P_utep) returns (bit (1) aligned);

dcl  P_utep	        ptr parameter;

	     if P_utep -> ute.active ^= NOW_HAS_PROCESS
	     then
		return (FALSE);
	     if find_person_project
	     then
		do;
		if P_utep -> ute.person ^= target_person_id
		then
		     return (FALSE);
		if P_utep -> ute.project ^= target_project_id
		then
		     return (FALSE);
	     end;
	     else do;				/* we want a registered dial server */
		if ^P_utep -> ute.registered_dial_server
		then
		     return (FALSE);
	     end;

	     if P_utep -> ute.dial_qualifier ^= dial_qualifier
	     then
		return (FALSE);
	     if ^P_utep -> ute.at.dialok
	     then
		return (FALSE);
	     if P_utep -> ute.dial_ev_chn = 0
	     then
		return (FALSE);

/**** Now perform access checks (these should be done first) */
	     if ^aim_check_$in_range (P_utep -> ute.process_authorization,
		P_connection_access_class_range)
	     then
		do;
		code = error_table_$ai_restricted;
		call Audit_denied_dialin (P_utep, code);
		return (FALSE);
	     end;

/**** TBS: We should perform discretionary access control checks too. */
	     return (TRUE);
	end ok_for_dial;

     end find_dialable_process;
%page;
Abort:
     procedure (P_code);

dcl  P_code	        fixed bin (35) parameter;

	code = P_code;
	goto RETURN;

     end Abort;
%page;
Audit_denied_dialin:
     procedure (P_utep, P_code);

dcl  P_utep	        pointer parameter;
dcl  P_code	        fixed bin (35) parameter;
dcl  reason	        char (100) aligned automatic;

	if P_code = 0
	then
	     reason = "";
	else
	     call convert_status_code_ (P_code, (""), reason);

	call Audit_dialin (P_utep, DENIED, rtrim(reason));
	return;

     end Audit_denied_dialin;
%page;
Audit_dialin:
     procedure (P_target_utep, grant_sw, reason);
     
dcl  P_target_utep	        ptr parameter;
dcl  grant_sw	        bit(1) aligned parameter;
dcl  reason	        char(*) parameter;

dcl  action	        fixed bin(17) automatic;
dcl  target_utep	        ptr automatic;
dcl  1 target_ute	        aligned like ute based (target_utep);

	target_utep = P_target_utep;

	channel_audit_info_ptr = addr(auto_channel_audit_info);
	channel_audit_info.channel_name = P_connection_name;
	channel_audit_info.valid = FALSE;
	channel_audit_info.valid.service_info = TRUE;
	channel_audit_info.valid.user_validation_level = TRUE;
	channel_audit_info.valid.access_class = TRUE;
	channel_audit_info.valid.access_class_range = TRUE;
	channel_audit_info.service_info = dial_qualifier;
	channel_audit_info.user_validation_level = target_ute.initial_ring;
	channel_audit_info.access_class = target_ute.process_authorization;
	channel_audit_info.access_class_range =
	   P_connection_access_class_range;

	action = AS_AUDIT_CHANNEL_DIALIN;
	if ^grant_sw then action = -action;

	call as_access_audit_$channel (null, utep, target_utep,
	   action, addr(channel_audit_info), reason);

     end Audit_dialin;
%page;
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* Log_Error:  Report errors via sys_log_$general.		       */
/*							       */
/* Syntax:  call Log_Error (code, ioa_ctl, args);			       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */


Log_Error:
     procedure options (variable);

dcl  cu_$arg_list_ptr       entry returns (ptr);
dcl  sys_log_$general       entry (ptr);

	sl_info = sl_info_code_msg;
	sl_info.arg_list_ptr = cu_$arg_list_ptr ();
	sl_info.severity = SL_LOG_BEEP;
	sl_info.caller = ME;
	call sys_log_$general (addr (sl_info));
	return;

     end Log_Error;


/* format: off */
%page; %include absentee_user_table;
%page; %include access_audit_bin_header;
%page; %include answer_table;
%page; %include as_data_;
%page; %include as_audit_structures;
%page; %include daemon_user_table;
%page; %include dialup_values;
%page; %include pnt_entry;

dcl  1 pnte	        structure aligned like pnt_entry;
%page; %include sat;

dcl  satep	        ptr;
dcl  satp		        ptr;
%page; %include sys_log_constants;
%page; %include user_attributes;
%page; %include user_table_entry;
%page; %include user_table_header;

     end uc_dial_;
