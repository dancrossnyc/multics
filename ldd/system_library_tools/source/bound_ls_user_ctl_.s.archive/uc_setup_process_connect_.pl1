/****^  ********************************************
        *                                          *
        * Copyright, (C) Honeywell Bull Inc., 1987 *
        *                                          *
        ******************************************** */

/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* This module is part of the Multics Network Architecture (MNA) version of  */
/* user control.  MNA user control serves users coming into Multics via      */
/* separate networks (eg, the Distributed Systems Architecture (DSA)	       */
/* network.  MNA user control is not used for logins through the Multics     */
/* Communications System (MCS).  A separate MCS user control system serves   */
/* MCS users.						       */
/*							       */
/* To Be Supplied:						       */
/*  1) Brief module description.  See MDD010 or MTBs 751 and 752 for details */
/*     about this module, and its relationship to modules in the MCS user    */
/*     control system.					       */
/*  2) Operator error message documentation.  This program calls	       */
/*     sys_log_$general but does not contain the required descriptions of    */
/*     these messages.  This omission was waived for initial installation    */
/*     of the subsystem by the auditor, security coordinator, and by MDC     */
/*     management.						       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

/****^  HISTORY COMMENTS:
  1) change(86-04-04,Swenson), approve(87-07-13,MCR7737),
     audit(87-05-16,GDixon), install(87-08-04,MR12.1-1055):
     Initial coding.
  2) change(87-04-28,GDixon), approve(87-07-13,MCR7737),
     audit(87-07-30,Brunelle), install(87-08-04,MR12.1-1055):
     Updated for change to user_table_entry.incl.pl1.
  3) change(87-05-15,GDixon), approve(87-07-13,MCR7737),
     audit(87-07-30,Brunelle), install(87-08-04,MR12.1-1055):
      A) Add cleanup handler; convert to sys_log_$general.
      B) Add check for process ring below minimum login server ring.
      C) Set ute.line_type.
      D) Allow reconnecting user to respecify ute.outer_module.
  4) change(87-05-20,GDixon), approve(87-07-13,MCR7737),
     audit(87-07-30,Brunelle), install(87-08-04,MR12.1-1055):
     When an MNA user logs in, a UTE is created.  When this user connects to an
     existing process, that proc's UTE is retained and the login UTE is freed;
     but the whotab is never updated to reflect freeing of the login UTE.
      A) Call uc_logout_$reconnect to do all aspects of logging out the login
         UTE except for auditing the LOGOUT.  Instead, we audit a CONNECT
         operation.
  5) change(87-07-28,GDixon), approve(87-07-28,MCR7737),
     audit(87-07-30,Brunelle), install(87-08-04,MR12.1-1055):
      A) Remove redundant statement in Set_Outer_Module proc.
                                                   END HISTORY COMMENTS */

/* format: style4,indattr */

uc_setup_process_connect_:
     procedure (P_ls_request_server_info_ptr,
	P_ls_request_ptr, P_ls_request_lth,
	P_ls_response_ptr, P_ls_response_lth,
	P_ls_ipc_reply_ptr, P_utep, P_code);

/* Parameters */

dcl  P_ls_request_server_info_ptr ptr parameter;
dcl  P_ls_request_ptr       ptr parameter;
dcl  P_ls_request_lth       fixed bin (18) parameter;
dcl  P_ls_response_ptr      ptr parameter;
dcl  P_ls_response_lth      fixed bin (18) parameter;
dcl  P_ls_ipc_reply_ptr     ptr parameter;
dcl  P_utep	        ptr parameter;
dcl  P_code	        fixed bin (35) parameter;

/* Automatic */

dcl  added_info	        char(128);
dcl  code		        fixed bin (35) automatic;
dcl  process_number	        fixed bin automatic;
dcl  saved_utep	        ptr automatic;
dcl  temp_utep	        ptr automatic;
dcl  whoptr	        ptr automatic;

/* Entries */

dcl  aim_check_$equal       entry (bit (72) aligned, bit (72) aligned) returns (bit (1) aligned);
dcl  as_access_audit_$process entry (ptr, fixed bin, char (*));
dcl  as_access_audit_$process_connect_denied entry (ptr, ptr, char (*));
dcl  as_any_other_handler_$no_cleanup entry (char (*), label);
dcl  asu_$release_suspended_process entry (ptr);
dcl  asu_$setup_login_server_handle entry (ptr);
dcl  display_access_class_  entry (bit(72) aligned) returns(char(32) aligned);
dcl  get_system_free_area_  entry() returns(ptr);
dcl  ioa_$rsnnl	        entry () options (variable);
dcl  ipc_$decl_event_call_chn entry (fixed bin (71), entry, ptr, fixed bin, fixed bin (35));
dcl  uc_list_disconnected_procs_ entry (ptr, ptr, ptr);
dcl  uc_logout_$reconnect   entry (ptr, char(*));
dcl  uc_proc_term_handler_  entry (ptr);
dcl  uc_set_pit_tty_info_   entry (ptr, fixed bin (35));
dcl  user_table_mgr_$free entry (ptr);
dcl  user_table_mgr_$utep_from_handle entry (bit (72) aligned) returns (ptr);

/* External */

dcl  as_error_table_$dialup_error fixed bin (35) ext static;
dcl  as_error_table_$illegal_om_arg fixed bin(35) ext static;
dcl  as_error_table_$no_connect_aclass fixed bin (35) ext static;
dcl  as_error_table_$no_disconnected_procs fixed bin (35) ext static;
dcl  as_error_table_$no_such_process_msg fixed bin (35) ext static;
dcl  as_error_table_$ring_too_low fixed bin(35) ext static;
dcl  error_table_$bad_arg   fixed bin (35) ext static;
dcl  error_table_$id_not_found fixed bin (35) ext static;

/* Based */

dcl  system_area	        area based (system_area_ptr);

/* Internal */

dcl  system_area_ptr        ptr int static init(null);

/* Constant */

dcl  FALSE	        bit (1) aligned initial ("0"b) internal static options (constant);
dcl  ME		        char (25) initial ("uc_setup_process_connect_") internal static options (constant);
dcl  TRUE		        bit (1) aligned initial ("1"b) internal static options (constant);

/* Conditions */

dcl (any_other, cleanup)    condition;

/* Builtins */

dcl (addr, currentsize, max, null, unspec)
		        builtin;

/* Program */

	ls_request_server_info_ptr = P_ls_request_server_info_ptr;
	ls_request_ptr = P_ls_request_ptr;
	ls_reply_message_ptr = P_ls_ipc_reply_ptr;
	P_utep = null;
	code = 0;

	if system_area_ptr = null then
	     system_area_ptr = get_system_free_area_();
	uc_disconnected_process_list_ptr = null ();
	on cleanup begin;
	     if uc_disconnected_process_list_ptr ^= null then
		free uc_disconnected_process_list in (system_area);
	end;

	on any_other
	     call as_any_other_handler_$no_cleanup (ME, FAULT_LABEL);

	utep = user_table_mgr_$utep_from_handle (
	     login_server_process_request.handle);
	if utep = null () then
	     call Abort_With_Error (SL_LOG_SILENT,
	     error_table_$id_not_found, 
	     "Could not locate user table entry for handle ^24.3b.",
	     login_server_process_request.handle);

	if ute.person ^= login_server_process_request.person_id |
	     ute.project ^= login_server_process_request.project_id then
	     call Abort_With_Error (SL_LOG_SILENT, error_table_$bad_arg,
	     "Person.Project in connect request (^a.^a) do not match UTE (^a.^a).",
	     login_server_process_request.person_id,
	     login_server_process_request.project_id, ute.person,
	     ute.project);

	call uc_list_disconnected_procs_ (utep, addr(system_area),
	     uc_disconnected_process_list_ptr);

	if uc_disconnected_process_list_ptr = null () then
	     call Abort (as_error_table_$no_disconnected_procs);

	if uc_disconnected_process_list.n_disconnected_processes = 0 then
	     call Abort (as_error_table_$no_disconnected_procs);

	process_number = login_server_process_request.process_number;
	if process_number = 0 &
	     uc_disconnected_process_list.n_disconnected_processes = 1 then
	     process_number = 1;

	if process_number < 1 |
	   process_number >
	     uc_disconnected_process_list.n_disconnected_processes then
	     call Abort (as_error_table_$no_such_process_msg);

	temp_utep =
	     uc_disconnected_process_list.process (process_number).utep;

	if ^aim_check_$equal (ute.process_authorization,
	     temp_utep -> ute.process_authorization) then do;
	     call ioa_$rsnnl ("User authorization = ^a, Process authorization = ^a",
		added_info, (0),
		display_access_class_ (ute.process_authorization),
		display_access_class_ (
		temp_utep -> ute.process_authorization));
	     call as_access_audit_$process_connect_denied (utep, temp_utep,
		added_info);
	     call Abort (as_error_table_$no_connect_aclass);
	end;
     
	if login_server_process_request.other_flags.minimum_ring_given then
	     if temp_utep -> ute.initial_ring <
		login_server_process_request.minimum_ring then do;
		call ioa_$rsnnl ("Connection minimum ring = ^d, Process initial ring = ^d",
		     added_info, (0),
		     login_server_process_request.minimum_ring,
		     temp_utep -> ute.initial_ring);
		call as_access_audit_$process_connect_denied (utep,
		     temp_utep, added_info);
		call Abort (as_error_table_$ring_too_low);
	     end;

/**** Make UTE for disconnected process ute associated with this connection.
      This includes copying ute lock state into the disconnected UTE.        */
	temp_utep -> ute.lock_value =
	     temp_utep -> ute.lock_value + ute.lock_value;
	saved_utep = utep;				/* save old UTE pointer */
	utep = temp_utep;				/* switch UTEs */
	P_utep = utep;				/* tell caller where we are */

/**** Update the connection information into the new UTE.		       */
	ute.tty_name = login_server_process_request.connection_info.connection_name;
	ute.tty_id_code = login_server_process_request.connection_info.terminal_id;
	ute.terminal_type = login_server_process_request.connection_info.terminal_type;
	ute.line_type = login_server_process_request.connection_info.line_type;

/**** We should allow the user to specify a new outer module.  We must,
      however, validate the user's ability to select one. */
	call Setup_Outer_Module();

	if login_server_process_request.switch_flags.brief_given then do;
	     ute.at.brief = login_server_process_request.switch_values.brief;
	     ute.ur_at.brief = TRUE;
	end;

/**** Copy the login_server process_id, event_channel, and handle from
      the new UTE into the old UTE.  Keep the handle which encodes the old
      UTE, however. */

	ute.login_server_info.his_handle = saved_utep -> ute.login_server_info.his_handle;
	ute.login_server_info.response_event_channel = saved_utep -> ute.login_server_info.response_event_channel;
	ute.login_server_info.termination_event_channel = saved_utep -> ute.login_server_info.termination_event_channel;
	ute.login_server_info.process_id = saved_utep -> ute.login_server_info.process_id;

/**** If, however, login_server_info.our_handle equals 0, then this UTE was
      created via MCS (not MNA).  We must create a handle. */

	if ute.login_server_info.our_handle = ""b then
	     call asu_$setup_login_server_handle (utep);

/**** Here, we re-declare the event channel associated with this UTE to
      be associated with our event call handler, uc_proc_term_handler_.
      This UTE might have been associated with an MCS channel before, and
      hence used another event call handler (presumably dialup_). */

	call ipc_$decl_event_call_chn (ute.event, uc_proc_term_handler_, utep, 1 /* priority */, code);
	if code ^= 0 then				/* let user reconnect, but they'll be problems later */
	     call Error_No_Abort (SL_LOG_BEEP, code,
	     "Setting event call handler at reconnection for ^a.^a ^a ^w.",
	     ute.person, ute.project, ute.tty_name, ute.proc_id);

	call as_access_audit_$process (utep, AS_AUDIT_PROCESS_CONNECT,
	     "");
	call uc_logout_$reconnect (saved_utep, "");	/* Remove login UTE from whotab */
	call user_table_mgr_$free (saved_utep);
	call uc_set_pit_tty_info_ (utep, code);
	if code ^= 0 then
	     call Error_No_Abort (SL_LOG_SILENT, code,
	     "Setting pit tty info at reconnection for ^a.^a ^a ^w.",
	     ute.person, ute.project, ute.tty_name, ute.proc_id);

	call asu_$release_suspended_process (utep);

	ute.pdtep -> user.n_disconnected =
	     max (0, ute.pdtep -> user.n_disconnected - 1);
	ute.disconnected = FALSE;
	if ute.whotabx > 0 then do;
	     whoptr = as_data_$whoptr;
	     whotab.e (ute.whotabx).disconnected = FALSE;
	     whotab.e (ute.whotabx).idcode = ute.tty_id_code;
	end;
	ute.destroy_flag = WAIT_LOGOUT_SIG;

/**** Setup login_server_process_response */
	ls_response_ptr = P_ls_response_ptr;
	ls_process_response_accounting_message_length = 0;
	unspec (login_server_process_response) = ""b;
	login_server_process_response.header.message_type = LS_PROCESS_RESPONSE;
	login_server_process_response.header.version = LOGIN_SERVER_PROCESS_RESPONSE_VERSION_1;
	login_server_process_response.status_code = 0;
	login_server_process_response.process_id = ute.proc_id;
	login_server_process_response.new_handle = ute.login_server_info.our_handle;
	login_server_process_response.authorization = ute.process_authorization;
	call ioa_$rsnnl ("^a.^a.^a",
	     login_server_process_response.process_group_id, (0),
	     ute.person, ute.project, ute.tag);
	login_server_process_response.process_number = process_number;
	login_server_process_response.n_disconnected_processes =
	     ute.pdtep -> user.n_disconnected;
	login_server_process_response.start_event_channel = ute.sus_channel;
	login_server_process_response.initial_ring = ute.initial_ring;

/**** login_server_process_response.flags must be set by our caller since we
      don't know the caller's true intention.  He may be reconnecting to do
      a new_proc, to destroy the process, or to continue operation in the 
      suspended process.  This corresponds to different flag settings.       */

	P_ls_response_lth = currentsize (login_server_process_response);
RETURN:
	if uc_disconnected_process_list_ptr ^= null () then
	     free uc_disconnected_process_list in (system_area);
	P_code = code;
	return;

FAULT_LABEL:
	code = as_error_table_$dialup_error;
	goto RETURN;

/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* Abort:  Stop reconnection by returning nonzero code to our caller.  No    */
/* log message is produced.					       */
/*							       */
/* Syntax:  call Abort (code);				       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */


Abort:
     procedure (P_code);

dcl  P_code	        fixed bin (35) parameter;

	code = P_code;
	goto RETURN;
     end Abort;


/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* Abort_With_Error:  Stop reconnection by emitting an explanatory as log    */
/* message, and returning nonzero code to our caller.		       */
/*							       */
/* Syntax:  call Abort_With_Error (severity, code, ioa_ctl, args);	       */
/*							       */
/*							       */
/* Error_No_Abort: Add error message to as log, but do not stop	       */
/* reconnection.						       */
/*							       */
/* Syntax:  call Error_No_Abort (severity, code, ioa_ctl, args);	       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

Abort_With_Error:
     procedure options (variable);

dcl  cu_$arg_list_ptr      entry returns(ptr);
dcl  sys_log_$general      entry (ptr);

     	sl_info = sl_info_sev_code_msg;
	sl_info.arg_list_ptr = cu_$arg_list_ptr();
	sl_info.caller = ME;
	call sys_log_$general (addr(sl_info));
	code = sl_info.code;
	go to RETURN;

Error_No_Abort:
	entry options (variable);
	
     	sl_info = sl_info_sev_code_msg;
	sl_info.arg_list_ptr = cu_$arg_list_ptr();
	sl_info.caller = ME;
	call sys_log_$general (addr(sl_info));
     end Abort_With_Error;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */


Setup_Outer_Module:
     procedure ();

	if login_server_process_request.outer_module ^= "" then
	     if ^ute.at.vinitproc then
		call Abort (as_error_table_$illegal_om_arg);
	     else ute.outer_module =
		login_server_process_request.outer_module;
	else if ute.outer_module = ute.pdtep -> user.outer_module then;
	else if ute.outer_module = as_data_$tty_dim then do;
	     if login_server_process_request.default_io_module ^= "" then
		ute.outer_module =
		login_server_process_request.default_io_module;
	end;
	return;
     end Setup_Outer_Module;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */


/* format: off */
 %include as_data_;
 %include access_audit_bin_header; /* not used by needed by PL/I */
 %include as_audit_structures;
 %include dialup_values;
 %include login_server_messages;
 %include ls_request_server_info;
 %include pdt;

dcl  pdtp		        ptr automatic init (null);	/* pdt needs it. */
 %include sys_log_constants;
 %include uc_disc_proc_list;
 %include user_attributes;
 %include user_table_entry;
 %include whotab;

end uc_setup_process_connect_;
