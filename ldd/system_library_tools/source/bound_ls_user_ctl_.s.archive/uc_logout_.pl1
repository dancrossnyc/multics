/****^  ********************************************
        *                                          *
        * Copyright, (C) Honeywell Bull Inc., 1987 *
        *                                          *
        ******************************************** */

/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* This module is part of the Multics Network Architecture (MNA) version of  */
/* user control.  MNA user control serves users coming into Multics via      */
/* separate networks (eg, the Distributed Systems Architecture (DSA)	       */
/* network.  MNA user control is not used for logins through the Multics     */
/* Communications System (MCS).  A separate MCS user control system serves   */
/* MCS users.						       */
/*							       */
/* To Be Supplied:						       */
/*  1) Brief module description.  See MDD010 or MTBs 751 and 752 for details */
/*     about this module, and its relationship to modules in the MCS user    */
/*     control system.					       */
/*  2) Operator error message documentation.  This program calls	       */
/*     sys_log_$general but does not contain the required descriptions of    */
/*     these messages.  This omission was waived for initial installation    */
/*     of the subsystem by the auditor, security coordinator, and by MDC     */
/*     management.						       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

/****^  HISTORY COMMENTS:
  1) change(86-04-27,Swenson), approve(87-07-13,MCR7737),
     audit(87-05-18,GDixon), install(87-08-04,MR12.1-1055):
     Initial coding.
  2) change(87-04-27,GDixon), approve(87-07-13,MCR7737),
     audit(87-07-30,Brunelle), install(87-08-04,MR12.1-1055):
     Upgraded for change to answer_table.incl.pl1 and user_table_entry.incl.pl1
  3) change(87-05-18,GDixon), approve(87-07-13,MCR7737),
     audit(87-07-30,Brunelle), install(87-08-04,MR12.1-1055):
      A) Use sys_log_$general to report errors.
      B) Correct error in maintenance of whotab.
  4) change(87-05-20,GDixon), approve(87-07-13,MCR7737),
     audit(87-07-30,Brunelle), install(87-08-04,MR12.1-1055):
     When an MNA user logs in, a UTE is created.  When this user connects to an
     existing process, that proc's UTE is retained and the login UTE is freed;
     but the whotab is never updated to reflect freeing of the login UTE.
      A) Add uc_logout_$reconnect to do all aspects of logging out the login
         UTE except for auditing the LOGOUT.  Instead,
         uc_setup_process_connect_ audits a CONNECT operation.
                                                   END HISTORY COMMENTS */

/* format: style4,indattr */

uc_logout_:
     procedure (P_utep, P_added_info);

/* Parameters */

dcl  P_added_info	        char (*) parameter;
dcl  P_utep	        ptr parameter;

/* Automatic */

dcl  added_info	        char (32) automatic;
dcl  reconnect_sw	        bit (1);
dcl  satep	        ptr automatic;
dcl  whoptr	        ptr automatic;

/* Entries */

dcl  as_access_audit_$logout entry (ptr, char (*));
dcl  load_ctl_$unload       entry (ptr, fixed bin);
dcl  terminate_file_        entry (ptr, fixed bin (24), bit (*), fixed bin (35));

/* External */

dcl  error_table_$action_not_performed fixed bin(35) ext static;

/* Constants */

dcl (FALSE	        init("0"b),
     TRUE		        init("1"b)) bit(1) int static options(constant);
dcl  ME		        char(10) int static options(constant) init("uc_logout_");

/* Builtins */

dcl  (addr, null)	        builtin;

%page;
/* Program */
	reconnect_sw = FALSE;
	go to COMMON;

reconnect:
	entry (P_utep, P_added_info);

	reconnect_sw = TRUE;
	go to COMMON;

COMMON:	utep = P_utep;
	added_info = P_added_info;

	call Setup ();

	if ute.active ^= NOW_LOGGED_IN then
	     call Abort (error_table_$action_not_performed,
		"UTE (^d, ^p in ^a) not logged in (active= ^a, ^d).",
		ute.ute_index, utep, TABLE_NAMES(ute.process_type),
		ACTIVE_VALUES(ute.active), ute.active);

	call Update_Whotab ();			/* Make sure whotab gets updated.  Do it first. */

	if ute.uflags.proc_create_ok then
	     call load_ctl_$unload (utep, ute.process_type);

	if ute.uprojp ^= null () then do;
	     satep = ute.uprojp;
	     if project.n_users <= 0 then
		if project.project_id ^= "SysDaemon" then do;
		     call terminate_file_ (project.pdt_ptr, 0,
			TERM_FILE_TERM, (0));
		     ute.pdtep = null ();
		end;
	end;

	ute.active = NOW_DIALED;

	if ^reconnect_sw then			/* reconnect audited in uc_setup_process_connect_ */
	     call as_access_audit_$logout (utep, added_info);

RETURN:	return;
%page;
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* Abort:  Report errors via sys_log_$general and stop execution.	       */
/*							       */
/* Syntax:  call Abort (code, ioa_ctl, args);			       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

Abort:
     procedure options (variable);

dcl  cu_$arg_list_ptr       entry returns (ptr);
dcl  sys_log_$general       entry (ptr);

	sl_info = sl_info_code_msg;
	sl_info.arg_list_ptr = cu_$arg_list_ptr ();
	sl_info.severity = SL_LOG_BEEP;
	sl_info.caller = ME;
	call sys_log_$general (addr (sl_info));
	goto RETURN;

     end Abort;
%page;
Setup:
     procedure ();

	ansp = as_data_$ansp;
	return;
     end Setup;
%page;
Update_Whotab:
     procedure ();

dcl  whotab_idx	        fixed bin automatic;

	whoptr = as_data_$whoptr;

	whotab.n_users = whotab.n_users - 1;
	whotab.n_units = whotab.n_units - ute.user_weight;
	whotab_idx = ute.whotabx;
	if whotab_idx ^= 0 then
	     do;
	     whotab.e (whotab_idx).active = NOW_FREE;
	     whotab.e (whotab_idx).person = "";
	     whotab.e (whotab_idx).project = "";
	     whotab.e (whotab_idx).chain = whotab.freep;	/* chain free entries together */
	     whotab.freep = whotab_idx;		/* on top of free queue */
	     ute.whotabx = 0;
	end;

	if ute.process_type = PT_ABSENTEE then do;
	     if ute.queue > 0 then			/* background absentee */
		whotab.abs_users = whotab.abs_users - 1;
	     else whotab.fg_abs_users = whotab.fg_abs_users - 1;
	end;
	else if ute.process_type = PT_DAEMON then
	     whotab.n_daemons = whotab.n_daemons - 1;
	return;
     end Update_Whotab;

/* format: off */
%page; %include answer_table;
%page; %include as_data_;
%page; %include dialup_values;
%page; %include sat;

dcl  satp		        ptr automatic init (null);	/* sat needs it  */
%page; %include sys_log_constants;
%page; %include terminate_file;
%page; %include user_attributes;
%page; %include user_table_entry;
%page; %include user_table_header;
%page; %include whotab;

     end uc_logout_;
