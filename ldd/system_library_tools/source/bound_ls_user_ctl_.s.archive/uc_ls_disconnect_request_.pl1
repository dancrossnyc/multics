/****^  ********************************************
        *                                          *
        * Copyright, (C) Honeywell Bull Inc., 1987 *
        *                                          *
        ******************************************** */


/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* This module is part of the Multics Network Architecture (MNA) version of  */
/* user control.  MNA user control serves users coming into Multics via      */
/* separate networks (eg, the Distributed Systems Architecture (DSA)	       */
/* network.  MNA user control is not used for logins through the Multics     */
/* Communications System (MCS).  A separate MCS user control system serves   */
/* MCS users.						       */
/*							       */
/* To Be Supplied:						       */
/*  1) Brief module description.  See MDD010 or MTBs 751 and 752 for details */
/*     about this module, and its relationship to modules in the MCS user    */
/*     control system.					       */
/*  2) Operator error message documentation.  This program calls	       */
/*     sys_log_$general but does not contain the required descriptions of    */
/*     these messages.  This omission was waived for initial installation    */
/*     of the subsystem by the auditor, security coordinator, and by MDC     */
/*     management.						       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

/****^  HISTORY COMMENTS:
  1) change(86-04-27,Swenson), approve(87-07-13,MCR7737),
     audit(87-05-18,GDixon), install(87-08-04,MR12.1-1055):
     Initial coding.
  2) change(87-04-27,GDixon), approve(87-07-13,MCR7737),
     audit(87-07-30,Brunelle), install(87-08-04,MR12.1-1055):
     Upgraded for change to answer_table.incl.pl1 and user_table_entry.incl.pl1
  3) change(87-05-18,GDixon), approve(87-07-13,MCR7737),
     audit(87-07-30,Brunelle), install(87-08-04,MR12.1-1055):
      A) Use sys_log_$general for error reporting.
      B) Correct coding standard violations.
      C) Complete sys_log_ error messages.
                                                   END HISTORY COMMENTS */

/* format: style4,indattr */

uc_ls_disconnect_request_:
     procedure (P_ls_request_server_info_ptr,
	P_ls_request_ptr, P_ls_request_lth,
	P_ls_response_ptr, P_ls_response_lth,
	P_ls_ipc_reply_ptr, P_code);

/* Parameters */

dcl  P_ls_request_server_info_ptr ptr parameter;
dcl  P_ls_request_ptr       ptr parameter;
dcl  P_ls_request_lth       fixed bin (18) parameter;
dcl  P_ls_response_ptr      ptr parameter;
dcl  P_ls_response_lth      fixed bin (18) parameter;
dcl  P_ls_ipc_reply_ptr     ptr parameter;
dcl  P_code	        fixed bin (35) parameter;

/* Automatic */

dcl  code		        fixed bin (35) automatic;
dcl  hangup_ev_message      fixed bin (71) automatic;

/* Entries */

dcl  hcs_$wakeup	        entry (bit (36) aligned, fixed bin (71), fixed bin (71), fixed bin (35));
dcl  uc_logout_	        entry (ptr, char (*));
dcl  user_table_mgr_$free entry (ptr);
dcl  user_table_mgr_$utep_from_handle entry (bit (72) aligned) returns (ptr);

/* External */

dcl  error_table_$action_not_performed fixed bin (35) ext static;
dcl  error_table_$id_not_found fixed bin (35) ext static;

/* Constant */

dcl  HANGUP_EV_MESSAGE      char (8) initial ("hangup") internal static options (constant);
dcl  ME		        char (32) initial ("uc_ls_disconnect_request_") internal static options (constant);

/* Builtin */

dcl (addr, null, unspec)    builtin;
%page;
/* Program */

	ls_request_server_info_ptr = P_ls_request_server_info_ptr;
	ls_request_ptr = P_ls_request_ptr;
	ls_reply_message_ptr = P_ls_ipc_reply_ptr;
	code = 0;

	utep = user_table_mgr_$utep_from_handle (
	     login_server_disconnect_request.handle);
	if utep = null () then
	     call Abort (SL_LOG_SILENT, error_table_$id_not_found,
		"Could not locate user table entry for handle ^24.3b.",
		login_server_disconnect_request.handle);

	if ute.active = NOW_LOGGED_IN then do;		/* no process yet */
	     call uc_logout_ (utep, "hangup, no process");
	     call user_table_mgr_$free (utep);
	     P_ls_response_lth = 0;
	end;
	else if ute.active = NOW_HAS_PROCESS then do;
	     unspec (hangup_ev_message) = unspec (HANGUP_EV_MESSAGE);
	     ansp = as_data_$ansp;
	     call hcs_$wakeup (anstbl.as_procid, ute.event,
		hangup_ev_message, code);
	     if code ^= 0 then
		call Abort (SL_LOG_BEEP, code,
		"Sending hangup wakeup for ^[*^]^a.^a ^a ^12.3b.",
		(ute.anonymous=1), ute.person, ute.project, ute.tty_name,
		ute.proc_id);
	end;
	else do;
	     call Abort (SL_LOG_BEEP, error_table_$action_not_performed,
		"UTE (^d, ^p in ^a) not logged in (active= ^a, ^d).",
		ute.ute_index, utep, TABLE_NAMES(ute.process_type),
		ACTIVE_VALUES(ute.active), ute.active);
	end;
RETURN:
	P_code = 0;
	return;
%page;
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* Abort:  Report errors via sys_log_$general and stop execution.	       */
/*							       */
/* Syntax:  call Abort (severity, code, ioa_ctl, args);		       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

Abort:
     procedure options (variable);

dcl  cu_$arg_list_ptr       entry returns (ptr);
dcl  sys_log_$general       entry (ptr);

	sl_info = sl_info_sev_code_msg;
	sl_info.arg_list_ptr = cu_$arg_list_ptr ();
	sl_info.caller = ME;
	call sys_log_$general (addr (sl_info));
	code = sl_info.code;
	if code ^= 0 then go to RETURN;

     end Abort;

/* format: off */
%page; %include answer_table;
%page; %include as_data_;
%page; %include dialup_values;
%page; %include login_server_messages;
%page; %include ls_request_server_info;
%page; %include sys_log_constants;
%page; %include user_attributes;
%page; %include user_table_entry;
%page; %include user_table_header;

     end uc_ls_disconnect_request_;
