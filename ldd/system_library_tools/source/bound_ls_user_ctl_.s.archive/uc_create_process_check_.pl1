/****^  ********************************************
        *                                          *
        * Copyright, (C) Honeywell Bull Inc., 1987 *
        *                                          *
        ******************************************** */

/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* This module is part of the Multics Network Architecture (MNA) version of  */
/* user control.  MNA user control serves users coming into Multics via      */
/* separate networks (eg, the Distributed Systems Architecture (DSA)	       */
/* network.  MNA user control is not used for logins through the Multics     */
/* Communications System (MCS).  A separate MCS user control system serves   */
/* MCS users.						       */
/*							       */
/* To Be Supplied:						       */
/*  1) Brief module description.  See MDD010 or MTBs 751 and 752 for details */
/*     about this module, and its relationship to modules in the MCS user    */
/*     control system.					       */
/*  2) Operator error message documentation.  This program calls	       */
/*     sys_log_$general but does not contain the required descriptions of    */
/*     these messages.  This omission was waived for initial installation    */
/*     of the subsystem by the auditor, security coordinator, and by MDC     */
/*     management.						       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

/****^  HISTORY COMMENTS:
  1) change(86-04-27,Swenson), approve(87-07-13,MCR7737),
     audit(87-05-16,GDixon), install(87-08-04,MR12.1-1055):
     Initial coding.
  2) change(87-04-27,GDixon), approve(87-07-13,MCR7737),
     audit(87-07-30,Brunelle), install(87-08-04,MR12.1-1055):
      A) Upgraded for change to answer_table.incl.pl1 and
         user_table_entry.incl.pl1.
      B) Move notification of other processes into uc_login_, now that the
         login operation is distinguished from process creation.
      C) Add support for minimum MNA terminal manager ring check.  Data comes
         from login_server_process_request.minimum_ring.
  3) change(87-05-09,GDixon), approve(87-07-13,MCR7737),
     audit(87-07-30,Brunelle), install(87-08-04,MR12.1-1055):
     Corrected to reference login_server_process_request.default_io_module,
     rather than .outer_module.  login_server_process_request.outer_module was
     assign to ute.outer_mode in uc_ls_create_request_.
  4) change(88-02-02,Parisek), approve(88-02-11,MCR7849),
     audit(88-03-22,Lippard), install(88-07-13,MR12.2-1047):
     Added setting of new UTE element lowest_ring. SCP6367
                                                   END HISTORY COMMENTS */

/* format: style4,indattr */

uc_create_process_check_:
     procedure (P_utep, P_ls_process_request_ptr, P_code);

/* Parameters */

dcl  P_ls_process_request_ptr ptr parameter;		/* ptr to process request data structure */
dcl  P_utep	        ptr parameter;
dcl  P_code	        fixed bin (35) parameter;

/* Automatic */

dcl  code		        fixed bin (35) automatic;
dcl  pdtep	        ptr automatic;
dcl  satp		        ptr automatic;
dcl  satep	        ptr automatic;

/* Entries */

dcl  act_ctl_$check_for_process_creation entry (ptr, char (8) aligned, char (168) var, fixed bin (35));
dcl  load_ctl_$check_for_process_creation entry (ptr, fixed bin (35));

/* External */

dcl  as_error_table_$illegal_om_arg fixed bin (35) external static;
dcl  as_error_table_$already_logged_in fixed bin (35) external static;
dcl  as_error_table_$illegal_hd_arg fixed bin (35) external static;
dcl  as_error_table_$illegal_ip_arg fixed bin (35) external static;
dcl  as_error_table_$illegal_ss_arg fixed bin (35) external static;
dcl  as_error_table_$long_ip_arg fixed bin (35) external static;
dcl  as_error_table_$long_ss_arg fixed bin (35) external static;
dcl  as_error_table_$no_primary fixed bin (35) ext static;
dcl  as_error_table_$ring_too_high fixed bin (35) external static;
dcl  as_error_table_$ring_too_low fixed bin (35) external static;
dcl  as_error_table_$user_fg_cpu_limit fixed bin (35) ext static;
dcl  as_error_table_$user_max_bg fixed bin (35) ext static;
dcl  as_error_table_$user_max_fg fixed bin (35) ext static;
dcl  error_table_$bad_arg   fixed bin (35) ext static;
dcl  error_table_$out_of_sequence fixed bin (35) ext static;

/* Constant */

dcl  ME		        char (24) int static options (constant) init ("uc_create_process_check_");
dcl  (TRUE	        initial ("1"b),
     FALSE	        initial ("0"b)) bit (1) aligned internal static options (constant);

/* Builtin */

dcl  (addr, clock, index, length, max, min, null, rtrim, substr)
		        builtin;
%page;
/* Program */

	call Setup ();
	if ute.active ^= NOW_LOGGED_IN then
	     call Abort_Create (error_table_$out_of_sequence);

	call Check_Process_Limits ();
	call Check_For_Multiple_Logins ();
	call Check_With_Accounting ();
	call Setup_Initial_Procedure_And_Subsystem ();
	call Setup_Login_Ring ();
	call Setup_Outer_Module ();
	call Setup_Miscellaneous_Variables ();
	call Check_With_Load_Control ();

	ute.uflags.proc_create_ok = TRUE;
RETURN:
	P_code = code;
	return;
%page;
Setup:
     procedure ();

	utep = P_utep;
	ls_request_ptr = P_ls_process_request_ptr;
	code = 0;

	ansp = as_data_$ansp;
	satp = as_data_$satp;
	satep = ute.uprojp;
	pdtep = ute.pdtep;

	anstbl.current_time = clock ();
	return;
     end Setup;
%page;
Abort_Create:
     procedure (P_code);

dcl  P_code	        fixed bin (35) parameter;

	code = P_code;
	goto RETURN;
     end Abort_Create;
%page;
Check_Process_Limits:
     procedure ();

dcl  limit	        fixed bin automatic;

	if ute.queue <= 0 then do;			/* foreground process */
	     if ute.process_type = PT_ABSENTEE then do;

/**** Check foreground absentee CPU limits */
		limit = project.abs_foreground_cpu_limit;
		if limit = 0 then			/* no SAT limit */
		     limit = user.abs_foreground_cpu_limit;
		else if user.abs_foreground_cpu_limit > 0 then /* PDT limit */
		     limit = min (limit, user.abs_foreground_cpu_limit);

		if limit > 0 then			/* there is a SAT or PDT limit */
		     if ute.max_cpu_time > limit then
			call Abort_Create (as_error_table_$user_fg_cpu_limit);
		if ^ute.at.pm_ok &			/* primary not allowed */
		     ^ute.uflags.foreground_secondary_ok/* secondary not ok */
		then call Abort_Create (as_error_table_$no_primary);
	     end;

/**** Check foreground absentee process limits */

	     limit = project.max_foreground;
	     if limit = 0 then			/* no SAT limit */
		limit = user.max_foreground;		/* use PDT limit */
	     else if user.max_foreground > 0 then	/* there is a PDT limit */
		limit = min (limit, user.max_foreground);
	     if limit > 0 then			/* there is a limit */
		if user.n_foreground ^< limit then do;	/* user at limit */
		     if ute.process_type = PT_INTERACTIVE then do;
			if user.n_interactive > 0 &	/* already has one */
			     ^ute.at.multip then do;	/* no multip */
			     call Abort_Create (as_error_table_$already_logged_in);
			end;			/* end already has one */
		     end;				/* end interactive */
		     else				/* foreground absentee */
			call Abort_Create (as_error_table_$user_max_fg);
		end;				/* user at limit */
	end;					/* foreground process */
	else do;					/* background process */
	     if ^ute.abs_run then do;			/* not force-run by operator */
		limit = project.max_background;
		if limit = 0 then			/* no SAT limit */
		     limit = user.max_background;	/* pick up PDT limit */
		else if user.max_background > 0 then	/* there is a PDT limit */
		     limit = min (limit, user.max_background); /* get smaller */
		if limit > 0 then			/* if there is a limit */
		     if user.n_background ^< limit then /* user at limit */
			call Abort_Create (as_error_table_$user_max_bg);
	     end;					/* end not force-run by operator */
	end;					/* end background process */
	return;
%page;

     end Check_Process_Limits;
%page;
Check_For_Multiple_Logins:
     procedure ();

	if ute.process_type ^= PT_INTERACTIVE | ute.anonymous = 1 then
	     return;

	if user.n_interactive > 0 then do;
	     if ^ute.at.multip then			/* no multip */
		call Abort_Create (as_error_table_$already_logged_in);
	end;
	return;
     end Check_For_Multiple_Logins;
%page;
Check_With_Accounting:
     procedure ();

dcl  short_info	        char (8) aligned automatic;
dcl  long_info	        char (168) varying automatic;

	call act_ctl_$check_for_process_creation (utep, short_info, long_info, code);
	if code ^= 0 then
	     call Abort_Create (code);
	return;
     end Check_With_Accounting;
%page;
Setup_Initial_Procedure_And_Subsystem:
     procedure ();

dcl  ip_len	        fixed bin automatic;
dcl  ss_len	        fixed bin automatic;
dcl  subsystem	        char (64) automatic;

/**** Check if login is restricted to using a special process overseer.
      If it is, use this correct overseer_. */

	if ute.network_connection_type ^= 0 &
	     ute.network_connection_type ^= NETWORK_CONNECTION_LOGIN then do;
	     if ute.network_connection_type ^=
		NETWORK_CONNECTION_DSA_FILE_TRANSFER then
		call Abort_Create (error_table_$bad_arg);
	     else do;				/* DSA file transfer connection */
		ute.init_proc = "dsa_uft_server_overseer_";
		ute.ip_len = length (rtrim (ute.init_proc));
		ute.ss_len = 0;			/* no subsystem */
		ute.uflags.dont_call_init_admin = FALSE;
	     end;
	end;
	else do;					/* Normal LOGIN  */
/**** Save the subsystem so that we don't clobber it below */

	     if ute.uflags.ss_given then
		subsystem = substr (ute.init_proc, ute.ip_len + 1, ute.ss_len);

	     if ute.uflags.ip_given then do;
		if ^ute.at.vinitproc then
		     call Abort_Create (as_error_table_$illegal_ip_arg);
	     end;
	     else do;				/* not supplied on command line, use PDT */
		if user.uflags.ip_given then		/* length stored in PDT */
		     ip_len = user.ip_len;
		else do;				/* must scan and figure it out */
		     ip_len = -1 + index (user.initial_procedure, " ");
		     if ip_len = -1 then		/* if no blanks, then */
			ip_len = length (user.initial_procedure);
		end;				/* it is 64 characters long */

		substr (ute.init_proc, 1, ip_len) =
		     substr (user.initial_procedure, 1, ip_len);
		ute.ip_len = ip_len;
		ute.uflags.dont_call_init_admin = user.uflags.dont_call_init_admin;
	     end;

	     if ute.ip_len > length (",direct") then
		if substr (ute.init_proc,
		     ute.ip_len - length (",direct") + 1,
		     length (",direct")) = ",direct" then do;
		     ute.uflags.dont_call_init_admin = TRUE;
		     ute.ip_len = ute.ip_len - length (",direct");
		end;

/**** Now process the subsystem.  We may have it already from above */

	     if ute.uflags.ss_given then do;
		if ^ute.at.vinitproc then
		     call Abort_Create (as_error_table_$illegal_ss_arg);
		ss_len = ute.ss_len;
	     end;
	     else
		if user.uflags.ss_given then do;	/* is it supplied in PDT? */
		ss_len = user.ss_len;
		subsystem = substr (user.initial_procedure, user.ip_len + 1,
		     user.ss_len);
	     end;
	     else ss_len = -1;			/* not supplied at all */

	     if ss_len ^= -1 then do;			/* we have a subsystem */
		if ss_len + ute.ip_len > length (ute.init_proc) then do;
						/* no room */
		     if ute.uflags.ip_given then
			call Abort_Create (as_error_table_$long_ip_arg);
		     else call Abort_Create (as_error_table_$long_ss_arg);
		end;
		else do;
		     substr (ute.init_proc, ute.ip_len + 1, ss_len) =
			substr (subsystem, 1, ss_len);
		     ute.ss_len = ss_len;
		     ute.uflags.ss_given = TRUE;
		end;
	     end;
	end;
	return;
     end Setup_Initial_Procedure_And_Subsystem;
%page;
Setup_Login_Ring:
     procedure ();

dcl  ring		        fixed bin (3) automatic;

	if user.low_ring < project.min_ring then
	     call Log ("Raised min ring for ^a.^a from ^d (in PDTE) to ^d (in SATE).",
		ute.person, ute.project, user.low_ring, project.min_ring);

	if ute.initial_ring ^= -1 then		/* user specified it */
	     ring = ute.initial_ring;
	else ring = user.default_ring;		/* otherwise use PDT default */

	ring = max (project.min_ring, user.low_ring, ring);
	if ring <= 0 then
	     ring = as_data_$dft_user_ring;

	if login_server_process_request.minimum_ring_given then do;
	     if ring < login_server_process_request.minimum_ring then do;
		call Log ("Raised min ring for ^a.^a from ^d (in SATE/PDTE) to ^d (of Login Server)",
		     ute.person, ute.project, ring,
		     login_server_process_request.minimum_ring);
		ring = login_server_process_request.minimum_ring;
	     end;
	end;

	if ute.initial_ring ^= -1 then
	     if ute.initial_ring < ring then
		call Abort_Create (as_error_table_$ring_too_low);

	if ring > as_data_$max_user_ring then
	     ring = as_data_$max_user_ring;

	ute.lowest_ring = max (project.min_ring, user.low_ring);
	ute.initial_ring = ring;

/**** Determine max user ring */

	if user.high_ring > project.max_ring then
	     call Log ("Lowered max ring for ^a.^a from ^d (in PDTE) to ^d (in SATE).",
		ute.person, ute.project, user.high_ring, project.max_ring);

	if project.max_ring <= 0 then
	     ring = as_data_$dft_user_ring + 1;
	else ring = project.max_ring;

	ring = min (ring, user.high_ring, as_data_$max_user_ring);

	if ring < ute.initial_ring then
	     call Abort_Create (as_error_table_$ring_too_high);

	ute.highest_ring = ring;

	return;
     end Setup_Login_Ring;
%page;
Setup_Outer_Module:
     procedure ();

	if ute.outer_module ^= "" then
	     if ^ute.at.vinitproc then
		call Abort_Create (as_error_table_$illegal_om_arg);

	if ute.outer_module = "" then do;
	     ute.outer_module = user.outer_module;
	     if ute.outer_module = "" |
		ute.outer_module = as_data_$tty_dim then do;

		if login_server_process_request.default_io_module ^= "" then
		     ute.outer_module =
			login_server_process_request.default_io_module;
		else
		     ute.outer_module = as_data_$tty_dim;
	     end;
	end;
	return;
     end Setup_Outer_Module;
%page;
Setup_Miscellaneous_Variables:
     procedure ();

dcl  i		        fixed bin automatic;

/**** Constraint process directory quota */

	if project.pdir_quota > 0 then do;		/* there is a SAT limit */
	     if user.pdir_quota > project.pdir_quota then
		call Log ("Reduced pdir quota for ^a.^a from ^d (in PDTE) to ^d (in SATE).",
		     ute.person, ute.project, user.pdir_quota,
		     project.pdir_quota);
	     ute.pdir_quota = min (project.pdir_quota, user.pdir_quota);
	end;
	else					/* no SAT limit */
	     ute.pdir_quota = user.pdir_quota;

/**** Copy various tables sizes from the PDT */

	ute.lot_size = user.lot_size;
	ute.kst_size = user.kst_size;
	ute.cls_size = user.cls_size;

/**** Determine user's load control weight */

	ute.user_weight = -1;			/* not yet set */
	do i = 1 to sat.uwt_size while (ute.user_weight = -1);
	     if ute.init_proc = sat.uwt (i).initproc then
		ute.user_weight = sat.uwt (i).units;
	end;
	if ute.user_weight = -1 then
	     ute.user_weight = as_data_$default_weight;

/**** Locate user's home directory */

	if ute.home_dir ^= "" then			/* user supplied home directory? */
	     if ^ute.at.vhomedir then			/* allowed */
		call Abort_Create (as_error_table_$illegal_hd_arg);
	     else ;
	else ute.home_dir = user.home_dir;		/* use PDT default */

/**** Process disconnection/saving checks. */

	if ute.process_type = PT_INTERACTIVE then do;	/* only for interactive processes */
	     if ute.at.save_on_disconnect & ute.at.disconnect_ok then
		ute.uflags.save_if_disconnected = TRUE;
	     else ute.uflags.save_if_disconnected = FALSE;
	end;
	return;
     end Setup_Miscellaneous_Variables;
%page;
Check_With_Load_Control:
     procedure ();

	call load_ctl_$check_for_process_creation (utep, code);
	if code ^= 0 then
	     call Abort_Create (code);
	return;
     end Check_With_Load_Control;
%page;
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* Log:  log information about process creation restrictions in AS log.      */
/*							       */
/* Syntax:  call Log (ioa_ctl, args);				       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

Log:
     procedure () options (variable);

dcl  cu_$arg_list_ptr       entry returns (ptr);
dcl  sys_log_$general       entry (ptr);

	sl_info = sl_info_msg;
	sl_info.caller = ME;
	sl_info.arg_list_ptr = cu_$arg_list_ptr ();
	call sys_log_$general (addr (sl_info));

     end Log;

/* format: off */
%page; %include answer_table;
%page; %include as_data_;
%page; %include dialup_values;
%page; %include login_server_messages;
%page; %include pdt;

dcl  pdtp		        ptr automatic init (null);	/* pdt needs it  */
%page; %include sat;
%page; %include sys_log_constants;
%page; %include user_attributes;
%page; %include user_table_entry;
%page; %include user_table_header;

     end uc_create_process_check_;
