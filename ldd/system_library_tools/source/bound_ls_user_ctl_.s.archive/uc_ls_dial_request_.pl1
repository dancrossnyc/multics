/****^  ********************************************
        *                                          *
        * Copyright, (C) Honeywell Bull Inc., 1987 *
        *                                          *
        ******************************************** */


/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* This module is part of the Multics Network Architecture (MNA) version of  */
/* user control.  MNA user control serves users coming into Multics via      */
/* separate networks (eg, the Distributed Systems Architecture (DSA)	       */
/* network.  MNA user control is not used for logins through the Multics     */
/* Communications System (MCS).  A separate MCS user control system serves   */
/* MCS users.						       */
/*							       */
/* To Be Supplied:						       */
/*  1) Brief module description.  See MDD010 or MTBs 751 and 752 for details */
/*     about this module, and its relationship to modules in the MCS user    */
/*     control system.					       */
/*  2) Operator error message documentation.  This program calls	       */
/*     sys_log_$general but does not contain the required descriptions of    */
/*     these messages.  This omission was waived for initial installation    */
/*     of the subsystem by the auditor, security coordinator, and by MDC     */
/*     management.						       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

/****^  HISTORY COMMENTS:
  1) change(86-04-27,Swenson), approve(87-07-13,MCR7737),
     audit(87-05-18,GDixon), install(87-08-04,MR12.1-1055):
     Initial coding.
  2) change(87-04-28,GDixon), approve(87-07-13,MCR7737),
     audit(87-07-30,Brunelle), install(87-08-04,MR12.1-1055):
     Updated for change to user_table_entry.incl.pl1.
  3) change(87-05-18,GDixon), approve(87-07-13,MCR7737),
     audit(87-07-30,Brunelle), install(87-08-04,MR12.1-1055):
      A) Use sys_log_$general to report errors.
  4) change(87-06-09,GDixon), approve(87-07-13,MCR7737),
     audit(87-07-30,Brunelle), install(87-08-04,MR12.1-1055):
      A) Save process ID of target process in ute for dialed terminal.
         uc_proc_term_handler_, when invoked to bump the dialed terminal, can
         then include proper process id in the terminate response message.
                                                   END HISTORY COMMENTS */

/* format: style4,indattr,insnl */

uc_ls_dial_request_:
     procedure (P_ls_request_server_info_ptr,
	P_ls_request_ptr, P_ls_request_lth,
	P_ls_response_ptr, P_ls_response_lth,
	P_ls_ipc_reply_ptr, P_code);

/* Parameters */

dcl  P_ls_request_server_info_ptr
		        ptr parameter;
dcl  P_ls_request_ptr       ptr parameter;
dcl  P_ls_request_lth       fixed bin (18) parameter;
dcl  P_ls_response_ptr      ptr parameter;
dcl  P_ls_response_lth      fixed bin (18) parameter;
dcl  P_ls_ipc_reply_ptr     ptr parameter;
dcl  P_code	        fixed bin (35) parameter;

/* Automatic */

dcl  code		        fixed bin (35) automatic;
dcl  target_utep	        ptr automatic;

/* Entries */

dcl  ioa_$rsnnl	        entry () options (variable);
dcl  uc_dial_	        entry (ptr, char (*), char (*), char (*), char (*), (2) bit (72) aligned, ptr, fixed bin (35))
		        ;
dcl  uc_logout_	        entry (ptr, char (*));
dcl  user_table_mgr_$utep_from_handle
		        entry (bit (72) aligned) returns (ptr);

/* External */

dcl  error_table_$id_not_found
		        fixed bin (35) ext static;
dcl  error_table_$unimplemented_version
		        fixed bin (35) ext static;

/* Constant */

dcl  ME		        char (32) initial ("uc_ls_dial_request_") internal static options (constant);
dcl  TRUE		        bit (1) aligned initial ("1"b) internal static options (constant);

/* Builtins */

dcl (addr, currentsize, null, unspec)
		        builtin;

%page;
/* Program */

	ls_request_server_info_ptr = P_ls_request_server_info_ptr;
	ls_request_ptr = P_ls_request_ptr;
	ls_reply_message_ptr = P_ls_ipc_reply_ptr;
	code = 0;

	if login_server_dial_request.request_version ^= LS_DIAL_REQUEST_VERSION_1
	then
	     call Abort (error_table_$unimplemented_version,
	     "login_server_dial_request version is ^a, ^a expected.",
	     login_server_dial_request.request_version,
	     LS_DIAL_REQUEST_VERSION_1);

/**** The dial request can be sent to us either with or without user
      identification and authentication.  That is, there may not be any
      user table entry associated with this request when we receive it.
      We can tell this from the handle supplied by the login server.
      If it is 0, then no validation has been performed and there is no
      UTE associated with the request. */

	if login_server_dial_request.initializer_handle = ""b
	then
	     utep = null ();			/* user has not been validated */
	else do;					/* already have a UTE.  Let's check */
	     utep = user_table_mgr_$utep_from_handle (
		login_server_dial_request.initializer_handle);
	     if utep = null ()
	     then
		call Abort (error_table_$id_not_found,
		"Could not locate user table entry for handle ^24.3b.",
		login_server_dial_request.initializer_handle);
	end;

	target_utep = null ();

	call uc_dial_ (utep, (login_server_dial_request.dial_qualifier),
	     (login_server_dial_request.person_id),
	     (login_server_dial_request.project_id),
	     (login_server_dial_request.connection_info.connection_name),
	     login_server_dial_request.connection_info.access_class_range,
	     target_utep, code);
%page;
	if code ^= 0 then do;
	     if utep ^= null ()
	     then
		call uc_logout_ (utep, "dial failed");
	end;
	else do;					/* dial worked.  */
	     if utep ^= null then			/* save owner pid*/
		ute.proc_id = target_utep->ute.proc_id; /* in dial ute.  */

	     ls_response_ptr = P_ls_response_ptr;	/* respond to    */
	     unspec (login_server_dial_response) = ""b;	/* login server  */
	     login_server_dial_response.header.message_type =
		LS_DIAL_RESPONSE;
	     login_server_dial_response.header.version =
		LOGIN_SERVER_DIAL_RESPONSE_VERSION_1;
	     login_server_dial_response.status_code = code;
	     login_server_dial_response.process_id =
		target_utep -> ute.proc_id;
	     call ioa_$rsnnl ("^a.^a.^a",
		login_server_dial_response.process_group_id, (0),
		target_utep -> ute.person, target_utep -> ute.project,
		target_utep -> ute.tag);
	     login_server_dial_response.authorization =
		target_utep -> ute.process_authorization;
	     login_server_dial_response.start_event_channel =
		target_utep -> ute.dial_ev_chn;
	     login_server_dial_response.process_ring =
		target_utep -> ute.initial_ring;
	     P_ls_response_lth = currentsize (login_server_dial_response);
	end;
RETURN:
	P_code = code;
	return;
%page;
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* Abort: Report an error via sys_log_$general and stop execution if a       */
/* nonzero code was given.					       */
/*							       */
/* Syntax:  call Abort (code, ioa_ctl, args);			       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

Abort:
     procedure options (variable);

dcl  cu_$arg_list_ptr       entry returns (ptr);
dcl  sys_log_$general       entry (ptr);

	sl_info = sl_info_code_msg;
	sl_info.severity = SL_LOG_SILENT;
	sl_info.caller = ME;
	sl_info.arg_list_ptr = cu_$arg_list_ptr ();
	call sys_log_$general (addr (sl_info));
	code = sl_info.code;
	if code ^= 0
	then go to RETURN;

     end Abort;

/* format: off */
%page; %include login_server_messages;
%page; %include ls_request_server_info;
%page; %include sys_log_constants;
%page; %include user_attributes;
%page; %include user_table_entry;

end uc_ls_dial_request_;
