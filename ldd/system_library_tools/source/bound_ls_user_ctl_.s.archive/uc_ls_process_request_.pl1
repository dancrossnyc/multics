/****^  ********************************************
        *                                          *
        * Copyright, (C) Honeywell Bull Inc., 1987 *
        *                                          *
        ******************************************** */



/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* This module is part of the Multics Network Architecture (MNA) version of  */
/* user control.  MNA user control serves users coming into Multics via      */
/* separate networks (eg, the Distributed Systems Architecture (DSA)	       */
/* network.  MNA user control is not used for logins through the Multics     */
/* Communications System (MCS).  A separate MCS user control system serves   */
/* MCS users.						       */
/*							       */
/* To Be Supplied:						       */
/*  1) Brief module description.  See MDD010 or MTBs 751 and 752 for details */
/*     about this module, and its relationship to modules in the MCS user    */
/*     control system.					       */
/*  2) Operator error message documentation.  This program calls	       */
/*     sys_log_$general but does not contain the required descriptions of    */
/*     these messages.  This omission was waived for initial installation    */
/*     of the subsystem by the auditor, security coordinator, and by MDC     */
/*     management.						       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

/****^  HISTORY COMMENTS:
  1) change(86-04-24,Swenson), approve(87-07-13,MCR7737),
     audit(87-04-23,GDixon), install(87-08-04,MR12.1-1055):
     Initial coding.
  2) change(87-04-24,GDixon), approve(87-07-13,MCR7737),
     audit(87-07-30,Brunelle), install(87-08-04,MR12.1-1055):
      A) Upgrade to use sys_log_$general to report errors.
      B) Handle enter and enterp preaccess commands.
                                                   END HISTORY COMMENTS */

/* format: style4,indattr */

uc_ls_process_request_:
     procedure (P_ls_request_server_info_ptr,
	P_ls_request_ptr, P_ls_request_lth,
	P_ls_response_ptr, P_ls_response_lth,
	P_ls_ipc_reply_ptr, P_code);

/* Parameters */

dcl  P_ls_request_server_info_ptr ptr parameter;
dcl  P_ls_request_ptr       ptr parameter;
dcl  P_ls_request_lth       fixed bin (18) parameter;
dcl  P_ls_response_ptr      ptr parameter;
dcl  P_ls_response_lth      fixed bin (18) parameter;
dcl  P_ls_ipc_reply_ptr     ptr parameter;
dcl  P_code	        fixed bin (35) parameter;

/* Automatic */

dcl  abort_label	        label automatic;
dcl  code		        fixed bin (35) automatic;
dcl  entry_to_call	        entry (ptr, ptr, fixed bin (18), ptr, fixed bin (18), ptr, fixed bin (35)) variable;

/* Entries */

dcl  uc_ls_create_request_  entry (ptr, ptr, fixed bin (18), ptr, fixed bin (18), ptr, fixed bin (35));
dcl  uc_ls_destroy_request_ entry (ptr, ptr, fixed bin (18), ptr, fixed bin (18), ptr, fixed bin (35));
dcl  uc_ls_connect_request_ entry (ptr, ptr, fixed bin (18), ptr, fixed bin (18), ptr, fixed bin (35));
dcl  uc_ls_new_proc_request_ entry (ptr, ptr, fixed bin (18), ptr, fixed bin (18), ptr, fixed bin (35));

/* External */

dcl  error_table_$bad_arg   fixed bin (35) ext static;

/* Constant */

dcl  ME		        char (22) initial ("uc_ls_process_request_") internal static options (constant);

/* Builtins */

dcl  addr		        builtin;

%page;
/* Program */

	ls_request_server_info_ptr = P_ls_request_server_info_ptr;
	ls_request_ptr = P_ls_request_ptr;
	ls_reply_message_ptr = P_ls_ipc_reply_ptr;
	code = 0;

	abort_label = RETURN;

	if login_server_process_request.header.request_version ^=
	     LS_PROCESS_REQUEST_VERSION_1 then
	     call Abort (SL_LOG_SILENT, code,
		"login_server_process_request version is ^a, should be ^a.",
		login_server_process_request.header.request_version,
		LS_PROCESS_REQUEST_VERSION_1);

	if login_server_process_request.command_type = LOGIN_REQ then
	     entry_to_call = uc_ls_create_request_;
	else if login_server_process_request.command_type = CREATE_REQ then
	     entry_to_call = uc_ls_create_request_;
	else if login_server_process_request.command_type = DESTROY_REQ then
	     entry_to_call = uc_ls_destroy_request_;
	else if login_server_process_request.command_type = CONNECT_REQ then
	     entry_to_call = uc_ls_connect_request_;
	else if login_server_process_request.command_type = NEW_PROC_REQ then
	     entry_to_call = uc_ls_new_proc_request_;
	else if login_server_process_request.command_type = ENTER_REQ then
	     entry_to_call = uc_ls_create_request_;
	else if login_server_process_request.command_type = ENTERP_REQ then
	     entry_to_call = uc_ls_create_request_;
	else call Abort (SL_LOG_SILENT, error_table_$bad_arg,
		"command_type is invalid (^d).",
		login_server_process_request.command_type);

/**** Dispatch on subrequest */

	call entry_to_call (P_ls_request_server_info_ptr, P_ls_request_ptr,
	     P_ls_request_lth, P_ls_response_ptr, P_ls_response_lth,
	     P_ls_ipc_reply_ptr, code);

RETURN:
	P_code = code;
	return;
%page;
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* Abort: Report an error via sys_log_$general and stop execution if a       */
/* nonzero code was given.					       */
/*							       */
/* Syntax:  call Abort (severity, code, ioa_ctl, args);		       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

Abort:
     procedure options (variable);

dcl  cu_$arg_list_ptr       entry returns (ptr);
dcl  sys_log_$general       entry (ptr);

	sl_info = sl_info_sev_code_msg;
	sl_info.caller = ME;
	sl_info.arg_list_ptr = cu_$arg_list_ptr ();
	call sys_log_$general (addr (sl_info));
	code = sl_info.code;
	if code ^= 0 then go to abort_label;

     end Abort;

/* format: off */
%page; %include login_server_messages;
%page; %include ls_request_server_info;
%page; %include sys_log_constants;

end uc_ls_process_request_;
