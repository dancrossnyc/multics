/****^  ********************************************
        *                                          *
        * Copyright, (C) Honeywell Bull Inc., 1987 *
        *                                          *
        ******************************************** */

/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* This module is part of the Multics Network Architecture (MNA) version of  */
/* user control.  MNA user control serves users coming into Multics via      */
/* separate networks (eg, the Distributed Systems Architecture (DSA)	       */
/* network.  MNA user control is not used for logins through the Multics     */
/* Communications System (MCS).  A separate MCS user control system serves   */
/* MCS users.						       */
/*							       */
/* To Be Supplied:						       */
/*  1) Brief module description.  See MDD010 or MTBs 751 and 752 for details */
/*     about this module, and its relationship to modules in the MCS user    */
/*     control system.					       */
/*  2) Operator error message documentation.  This program calls	       */
/*     sys_log_$general but does not contain the required descriptions of    */
/*     these messages.  This omission was waived for initial installation    */
/*     of the subsystem by the auditor, security coordinator, and by MDC     */
/*     management.						       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

/****^  HISTORY COMMENTS:
  1) change(86-04-27,Swenson), approve(87-07-13,MCR7737),
     audit(87-05-16,GDixon), install(87-08-04,MR12.1-1055):
     Initial coding.
  2) change(87-04-27,GDixon), approve(87-07-13,MCR7737),
     audit(87-07-30,Brunelle), install(87-08-04,MR12.1-1055):
     Upgraded for change to answer_table.incl.pl1 and user_table_entry.incl.pl1
  3) change(87-05-16,GDixon), approve(87-07-13,MCR7737),
     audit(87-07-30,Brunelle), install(87-08-04,MR12.1-1055):
      A) Add cleanup handler.
      B) Convert to sys_log_$general.
  4) change(87-05-20,GDixon), approve(87-07-13,MCR7737),
     audit(87-07-30,Brunelle), install(87-08-04,MR12.1-1055):
      A) Correct problem which damaged ute.ute_index.
  5) change(87-07-29,GDixon), approve(87-07-29,MCR7737),
     audit(87-07-30,Brunelle), install(87-08-04,MR12.1-1055):
      A) Correctly handle case where number of disconnected processes exceeds
         user.n_disconnected.
                                                   END HISTORY COMMENTS */

/* format: style4,indattr */

uc_list_disconnected_procs_:
     procedure (P_utep, P_area_ptr, P_uc_disconnected_process_list_ptr);

/* Parameters */

dcl  P_utep	        ptr parameter;
dcl  P_area_ptr	        ptr parameter;
dcl  P_uc_disconnected_process_list_ptr ptr parameter;

/* Automatic */

dcl  area_ptr	        ptr automatic;
dcl  code		        fixed bin (35) automatic;
dcl  processes_found        fixed bin automatic;
dcl  temp_list	        ptr automatic;
dcl  temp_utep	        ptr automatic;
dcl  ute_index	        fixed bin;

/* Based */

dcl  system_area	        area based (area_ptr);

/* Entries */

dcl  get_system_free_area_  entry () returns (ptr);

/* External */

dcl  error_table_$null_info_ptr fixed bin (35) ext static;

/* Constant */

dcl  ME		        char (27) initial ("uc_list_disconnected_procs_") internal static options (constant);

/* Builtins */

dcl  (addr, null)	        builtin;


/* Conditions */

dcl  cleanup	        condition;
%page;
/* Program */

	utep = P_utep;
	area_ptr = P_area_ptr;
	uc_disconnected_process_list_ptr = null ();
	code = 0;

	if utep = null () then
	     call Abort (error_table_$null_info_ptr,
		"Pointer to UTE is null.");

	pdtep = ute.pdtep;
	if pdtep = null () then
	     call Abort (-1, "Null PDT entry pointer for ^a.^a ^a.",
		ute.person, ute.project, ute.tty_name);

/**** If the user has no disconnected processes, save ourselves a lot of
      work and time by just returning a null pointer to the disconnected
      process list information. */

	if user.n_disconnected = 0 then
	     goto RETURN;

	if area_ptr = null () then
	     area_ptr = get_system_free_area_ ();

	temp_list = null;
	on cleanup begin;
	     if temp_list ^= null &
		temp_list ^= uc_disconnected_process_list_ptr
	     then free temp_list -> uc_disconnected_process_list in (system_area);
	     if uc_disconnected_process_list_ptr ^= null
	     then free uc_disconnected_process_list in (system_area);
	end;

	uc_n_disconnected_processes = user.n_disconnected;
	allocate uc_disconnected_process_list in (system_area);
	uc_disconnected_process_list.version =
	     UC_DISCONNECTED_PROCESS_LIST_VERSION_1;
	uc_disconnected_process_list.n_disconnected_processes =
	     uc_n_disconnected_processes;

	ansp = as_data_$ansp;
	processes_found = 0;

	do ute_index = 1 to anstbl.current_size;
	     temp_utep = addr (anstbl.entry (ute_index));
	     if temp_utep -> ute.active > NOW_LOGGED_IN &
		temp_utep ^= utep &
		temp_utep -> ute.anonymous = 0 &
		temp_utep -> ute.person = ute.person &
		temp_utep -> ute.project = ute.project &
		temp_utep -> ute.disconnected then do;
		processes_found = processes_found + 1;	/* count */
		if processes_found >
		     uc_disconnected_process_list.n_disconnected_processes
		     then do;
		     uc_n_disconnected_processes = processes_found;
		     allocate uc_disconnected_process_list in (system_area)
			set (temp_list);
		     temp_list -> uc_disconnected_process_list.n_disconnected_processes =
			uc_disconnected_process_list.n_disconnected_processes;
		     temp_list -> uc_disconnected_process_list = uc_disconnected_process_list;
		     free uc_disconnected_process_list in (system_area);
		     uc_disconnected_process_list_ptr = temp_list;
		     temp_list = null;
		     uc_disconnected_process_list.n_disconnected_processes = processes_found;
		end;
		uc_disconnected_process_list.process (processes_found).utep = temp_utep;
	     end;
	end;

	if processes_found ^= user.n_disconnected then do;
	     call Error_No_Abort (
		"Disconnected process count = ^d; PDT entry = ^d.",
		processes_found, user.n_disconnected);
	end;

RETURN:
	P_uc_disconnected_process_list_ptr =
	     uc_disconnected_process_list_ptr;
	return;

ABORT_RETURN:
	if uc_disconnected_process_list_ptr ^= null () then do;
	     free uc_disconnected_process_list in (system_area);
	     uc_disconnected_process_list_ptr = null ();
	end;
	goto RETURN;
%page;
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* Abort: Stop disconnected process list operation by emitting an	       */
/* explanatory as log message, and returning nonzero code to our caller.     */
/*							       */
/* Syntax:  call Abort (code, ioa_ctl, args);			       */
/*							       */
/*							       */
/* Error_No_Abort: Add error message to as log, but do not stop	       */
/* the list operation.					       */
/*							       */
/* Syntax:  call Error_No_Abort (ioa_ctl, args);			       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

Abort:
     procedure options (variable);

dcl  cu_$arg_list_ptr       entry returns (ptr);
dcl  sys_log_$general       entry (ptr);

	sl_info = sl_info_code_msg;
	sl_info.arg_list_ptr = cu_$arg_list_ptr ();
	sl_info.severity = SL_LOG_SILENT;
	sl_info.caller = ME;
	call sys_log_$general (addr (sl_info));
	code = sl_info.code;
	go to ABORT_RETURN;

Error_No_Abort:
     entry options (variable);

	sl_info = sl_info_msg;
	sl_info.arg_list_ptr = cu_$arg_list_ptr ();
	sl_info.severity = SL_LOG_SILENT;
	sl_info.caller = ME;
	call sys_log_$general (addr (sl_info));
	return;

     end Abort;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/* format: off */
%page; %include answer_table;
%page; %include as_data_;
%page; %include dialup_values;
%page; %include pdt;

dcl  pdtp		        ptr automatic init (null);	/* pdt needs it. */
%page; %include sys_log_constants;
%page; %include uc_disc_proc_list;
%page; %include user_attributes;
%page; %include user_table_entry;
%page; %include user_table_header;

end uc_list_disconnected_procs_;
