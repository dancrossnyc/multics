/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


cross_reference: cref:
     procedure options (variable);

/* CROSS_REFERENCE

   Program to make a cross reference listing from object
   segments.

   Modified 741127 by PG for Version II PL/I
   Modified 750411 by PG to handle errors better
   Totally discombobulated to change command syntax by C. D. Tavares, 02/76
   Modified 11/19/76 by CDT to allow output to be an MSF.
   Modified 09/24/78 by CDT to fix a few bugs in input file parsing.
   Modified 10/13/80 by CDT to add -line_length control arg.
   Modified 2/82 BIM for add_suffix.
*/

/* automatic */

dcl 1 auto_area_info like area_info aligned automatic;	/* see include file below */

dcl  eof bit (1) aligned,
     char_idx fixed bin (21),
     temp_dir char (168) varying,
     temp_string char (168),
     search_dir char (168),
     token char (200) varying,
     save_token char (200) varying,
     master_node pointer,
     al fixed bin (21),
     bitcount fixed bin (24),
     seg_count fixed bin,
     char_count fixed bin (21),
     code fixed bin (35),
    (i, j) fixed bin,
     n_pathnames fixed bin,
     given_ll fixed bin,
     nargs fixed bin,
    (input_seg_ptr, test_outseg_ptr, output_seg_ptr, err_seg_ptr, msf_fcb_ptr, ap) ptr,
     cur_dir_description char (168) varying;

dcl  first_pass bit (1) aligned,
     cur_all_option bit (1) aligned,
     first_switch bit (1) aligned,
     do_include_files bit (1) aligned,
     short_switch bit (1) aligned,
     brief_switch bit (1) aligned;

dcl (input_filename, output_filename) char (168),
    (input_filedir, output_filedir) char (168);

/* external static */

dcl (error_table_$noarg,
     error_table_$inconsistent,
     error_table_$badopt) fixed bin (35) external static;

dcl  sys_info$max_seg_size ext fixed bin (35) static;

/* internal static */

dcl (Segs_only fixed bin initial (2),
     Nondir_segment bit (2) initial ("01"b)) static options (constant);

/* based variables and their pointers */

dcl 1 star_structure (seg_count) aligned based (star_struc_ptr),
    2 type bit (2) unaligned,
    2 nnames bit (16) unaligned,
    2 nindex bit (18) unaligned;

dcl  star_struc_ptr pointer;

dcl  star_names (1000) based (star_names_ptr) char (32);

dcl  star_names_ptr pointer;

dcl  system_free_area area based (system_free_ptr),
     system_free_ptr pointer;

dcl 1 search_dir_struc aligned based (search_dir_ptr),
    2 make_all_names_external bit (1) aligned,
    2 max_dirs fixed bin,
    2 n_dirs fixed bin,
    2 item (N_DIRS refer (search_dir_struc.max_dirs)),
      3 search_dirs char (168),
      3 search_dir_descriptions char (168) varying;

dcl  N_DIRS fixed bin static options (constant) initial (32),
     search_dir_ptr pointer;
dcl  CROSSREF char (8) internal static options (constant) init ("crossref");
dcl 1 pathname_struc based (pathname_ptr),
    2 xxx fixed bin,
    2 array (nargs refer (xxx)),
      3 pathname char (168),
      3 dirname char (168),
      3 ename char (32),
      3 dir_description char (168) varying,
      3 is_starname bit (1),
      3 all_option bit (1) aligned;

dcl  pathname_ptr pointer;


dcl  arg char (al) based (ap);

%include area_info;
%include access_mode_values;
%include terminate_file;

/* entries */

dcl  define_area_ ext entry (pointer, fixed bin (35)),
     release_area_ ext entry (pointer);

dcl  com_err_ entry options (variable),
     cref_sort_ ext entry,
     cref_listman_$init ext entry (ptr),
     cref_analyze_$init ext entry (bit (1) aligned, bit (1) aligned, pointer),
     cu_$arg_ptr entry (fixed, ptr, fixed bin (21), fixed bin (35)),
     cu_$arg_count ext entry (fixed bin),
     cv_dec_check_ entry (char (*), fixed bin (35)) returns (fixed bin (35)),
     expand_pathname_ entry (char (*), char (*), char (*), fixed bin (35)),
     cref_filegen_$init ext entry (ptr, bit (1) aligned, bit (1) aligned, pointer, fixed bin),
     cref_filegen_ entry (ptr, ptr),
     hcs_$delentry_seg entry (ptr, fixed bin (35)),
     initiate_file_ entry (character (*), character (*), bit (*), pointer, fixed binary (24),
	fixed binary (35)),
     terminate_file_ entry (pointer, fixed binary (24), bit (*), fixed binary (35)),
     absolute_pathname_$add_suffix ext entry (char (*), char (*), char (*), fixed bin (35)),
    (get_temp_segment_, release_temp_segment_) ext entry (char (*), pointer, fixed bin (35)),
     hcs_$truncate_seg ext entry (pointer, fixed bin, fixed bin (35)),
     pathname_ entry (character (*), character (*)) returns(character (168)),
     cref_analyze_ entry (char (*), bit (1) aligned);

dcl  get_system_free_area_ ext entry returns (pointer);

dcl  hcs_$star_ ext entry (char (*), char (*), fixed bin, pointer, fixed bin, pointer, pointer, fixed bin (35)),
     check_star_name_$entry ext entry (char (*), fixed bin (35));

dcl  cref_listman_$predefine_primary_block_char ext entry (char (*) varying, pointer, pointer,
     bit (1) aligned, bit (1) aligned, bit (1) aligned) returns (pointer),
     cref_listman_$create_syn_block ext entry (char (*) varying, pointer, pointer, bit (1) aligned, pointer);

dcl  msf_manager_$open ext entry (char (*), char (*), pointer, fixed bin (35)),
     msf_manager_$get_ptr ext entry (pointer, fixed bin, bit (1) aligned, pointer, fixed bin (24), fixed bin (35)),
     msf_manager_$adjust ext entry (pointer, fixed bin, fixed bin (24), bit (3) aligned, fixed bin (35)),
     msf_manager_$close ext entry (pointer);

/* builtins */

dcl (addr, binary, hbound, length, null, rtrim, search, substr, unspec, verify) builtin;

/* conditions */

dcl (cleanup, cref_abort_) condition;


/* program */

/* initialize random variables */

	unspec (auto_area_info) = ""b;

	test_outseg_ptr, err_seg_ptr, auto_area_info.areap, search_dir_ptr,
	     input_seg_ptr, output_seg_ptr, pathname_ptr, star_struc_ptr, star_names_ptr, msf_fcb_ptr = null;
	input_filename, output_filename = "";
	cur_all_option = ""b;
	given_ll = -1;

	system_free_ptr = get_system_free_area_ ();
	first_switch = ""b;
	short_switch, do_include_files = ""b;
	brief_switch = ""b;

	call cu_$arg_count (nargs);
	if nargs = 0 then do;			/* if no args */
	     call com_err_ (error_table_$noarg, "cross_reference", "
     Basic usage: cross_reference pathname1 ... pathname_n");
	     return;
	end;

	auto_area_info.version = area_info_version_1;
	auto_area_info.extend, auto_area_info.no_freeing = "1"b; /* currently doesn't work */
	auto_area_info.size = sys_info$max_seg_size;
	auto_area_info.owner = "cross_reference";

	call define_area_ (addr (auto_area_info), code);
	if code ^= 0 then call crump (code, "temp area creation.");

	allocate search_dir_struc in (system_free_area);

	search_dir_struc.make_all_names_external = ""b;
	search_dir_struc.n_dirs = 0;

	allocate pathname_struc in (system_free_area);

	n_pathnames = 0;
	cur_dir_description = "";

	do i = 1 to nargs;

	     call cu_$arg_ptr (i, ap, al, code);

	     if substr (arg, 1, 1) = "-" then do;

		if (arg = "-input_file") | (arg = "-if") then do;
		     if input_filename ^= "" then call crump (error_table_$inconsistent,
			"Input file may only be specified once.");
		     if i = nargs then call crump (error_table_$noarg,
			"-input_file must be followed by the name of an input file.");

		     i = i + 1;
		     call cu_$arg_ptr (i, ap, al, code);
		     call absolute_pathname_$add_suffix (arg, "crl", input_filename, code);
		     if code ^= 0 then call crump (code, arg);
		end;

		else if (arg = "-output_file") | (arg = "-of") then do;
		     if output_filename ^= "" then call crump (error_table_$inconsistent,
			"Output file may only be specified once.");
		     if i = nargs then call crump (error_table_$noarg,
			"-output_file must be followed by the name of an output file.");

		     i = i + 1;
		     call cu_$arg_ptr (i, ap, al, code);
		     call absolute_pathname_$add_suffix (arg, CROSSREF, output_filename, code);
		     if code ^= 0 then call crump (code, arg);
		end;

		else if arg = "-first" then first_switch = "1"b;

		else if (arg = "-brief" | arg = "-bf") then brief_switch = "1"b;

		else if arg = "-all" then cur_all_option = "1"b;

		else if (arg = "-library" | arg = "-lb") then do;
		     cur_all_option = ""b;
		     i = i + 1;
		     call cu_$arg_ptr (i, ap, al, code);
		     cur_dir_description = arg;
		end;

		else if (arg = "-include_files" | arg = "-icf") then do_include_files = "1"b;

		else if (arg = "-short" | arg = "-sh") then short_switch = "1"b;

		else if (arg = "-ll" | arg = "-line_length") then do;
		     if i = nargs then call crump (error_table_$noarg,
			"-ll must be followed by number.");

		     i = i + 1;
		     call cu_$arg_ptr (i, ap, al, code);
		     given_ll = cv_dec_check_ (arg, code);
		     if code ^= 0 then call crump (0, arg || " non-numeric.");
		end;

		else call crump (error_table_$badopt, arg);
	     end;

	     else do;
		n_pathnames = n_pathnames + 1;
		pathname (n_pathnames) = arg;
		dir_description (n_pathnames) = cur_dir_description;
		all_option (i) = cur_all_option;
	     end;
	end;

/* check for wierd and illegal combinations of control args */

	if input_filename ^= "" then
	     if n_pathnames > 0 then call crump (error_table_$inconsistent,
		"-input_file cannot be specified with explicit pathnames.");
	     else if cur_dir_description ^= "" then call crump (error_table_$inconsistent, "-input_file and -library");

	if n_pathnames > 0 then
	     if first_switch
	     then call crump (error_table_$inconsistent, "-first meaningless with explicit pathnames.");


/* Create temp files, etc. */

	if output_filename = "" then
	     if input_filename = "" then
		output_filename = "crossref.crossref";
	     else do;

		call expand_pathname_ (input_filename, (""), output_filename, code);
		if code ^= 0 then call crump (code, output_filename);

		output_filename = rtrim (before (output_filename, ".crl")) || "." ||
		     CROSSREF;

	     end;


	call get_temp_segment_ ("cross_reference", err_seg_ptr, code);
	if err_seg_ptr = null then call crump (code, "err segment creation.");

	temp_string = output_filename;
	call expand_pathname_ (temp_string, output_filedir, output_filename, code);
	if code ^= 0 then call crump (code, temp_string);

	call msf_manager_$open (output_filedir, output_filename, msf_fcb_ptr, code);
	if msf_fcb_ptr = null then goto output_seg_err;

	call msf_manager_$get_ptr (msf_fcb_ptr, /* component */ 0, "1"b /* ok to create */, test_outseg_ptr, 0, code);
						/* initiate it just to see if everything is OK, but NOT
						   using output_seg_ptr so that we don't delete the seg on
						   an error, in case there is already something in it */
	if test_outseg_ptr = null then do;
output_seg_err:
	     call com_err_ (code, "cross_reference", "^a.", pathname_ (output_filedir, output_filename));
	     goto err_return;
	end;

	if code = 0 then output_seg_ptr = test_outseg_ptr;
						/* we really did create it, OK to delete on an err */


	call cref_listman_$init (auto_area_info.areap);
	call cref_analyze_$init (first_switch, do_include_files, search_dir_ptr);
	call cref_filegen_$init (err_seg_ptr, brief_switch, short_switch,
	     auto_area_info.areap, given_ll);


	on cref_abort_ go to unwind_and_abort;		/* handle error case */
	on cleanup call clean_up;			/* and cleanups, too  */
	
	if input_filename ^= "" then do;		/* do the whole thing out of an input file */

	     temp_string = input_filename;
	     call expand_pathname_ (temp_string, input_filedir, input_filename, code);
	     if code ^= 0 then call crump (code, temp_string);

	     call initiate_file_ (input_filedir, input_filename, R_ACCESS, input_seg_ptr, bitcount, code);

	     if code ^= 0 then do;
		if input_seg_ptr ^= null /* zero_length */
		then call terminate_file_ (input_seg_ptr, (0), TERM_FILE_TERM, (0));
		call com_err_ (code, "cross_reference", "^a", pathname_ (input_filedir, input_filename));
		goto err_return;
	     end;

	     char_count = divide (bitcount, 9, 35, 0);

	     do first_pass = "1"b, ""b;
		char_idx = 1;			/* char index into driving file */
		eof = ""b;

		token = get_token ();

		do while (^eof);

		     if (token = "-library" | token = "-lb") then do;

			token = get_token ();

			if token = "-all" then do;
			     cur_all_option = "1"b;
			     token = get_token ();
			end;

			else cur_all_option = ""b;

			if token ^= ":" then call crump (0,
			     "Unexpected token || """ || token || """ in -library statement.");

			search_dir_struc.make_all_names_external = ""b;
			search_dir_struc.n_dirs = 0;

			search_dir = get_token ();

			do while (search_dir ^= ";");

			     if eof then
				call crump (0, "Unexpected end-of-file while processing search list; possible missing semicolon in input file.");

			     if search_dir = "-wd" then search_dir = "";
			     else if search_dir = "-working_directory" then search_dir = "";
			     cur_dir_description = rest_of_line ();
			     call expand_pathname_ (search_dir, dirname (1), ename (1), code);
			     if code ^= 0 then if first_pass then call com_err_ (code, "cross_reference",
				     "Directory ^a not searched.", search_dir);

				else;

			     else do;
				temp_dir = pathname_ (dirname (1), ename (1));

				search_dir_struc.n_dirs = search_dir_struc.n_dirs + 1;

				if search_dir_struc.n_dirs > hbound (search_dir_struc.item, 1) then do;
				     call com_err_ (0, "cross_reference", "More than ^d search paths specified.", hbound (search_dir_struc.item, 1));
				     signal cref_abort_;
				end;

				if cur_dir_description ^= "" then
				     search_dir_struc.search_dir_descriptions (search_dir_struc.n_dirs) = cur_dir_description;
				else search_dir_struc.search_dir_descriptions (search_dir_struc.n_dirs) = temp_dir;

				search_dir_struc.search_dirs (search_dir_struc.n_dirs) = temp_dir;

				search_dir_struc.make_all_names_external = cur_all_option;

			     end;

			     search_dir = get_token ();
			end;

			token = get_token ();
		     end;

		     if peek_rest_of_line () ^= "" then /* this is a synonym definition line */
			if first_pass then do;	/* define syns on first pass only */

			     save_token = token;

			     master_node = cref_listman_$predefine_primary_block_char (token, null, null, "1"b, ""b, "1"b);

			     do while (peek_rest_of_line () ^= "");
				token = get_token ();
				call cref_listman_$create_syn_block (token, null, null, "1"b, master_node);
			     end;

			     token = save_token;
			end;			/* but don't analyze seg, may not be freestanding */

			else temp_string = rest_of_line (); /* throw line away on second pass */

		     else call cref_analyze_ ((token), first_pass); /* one-token line, analyze seg */

		     token = get_token ();
		end;
	     end;
	end;
	
	else do;					/* process by argument list */

	     do i = 1 to n_pathnames;
		call expand_pathname_ (pathname (i), dirname (i), ename (i), code);
		if code ^= 0 then call crump (code, pathname (i));

		call check_star_name_$entry (ename (i), code);
		if code = 0 then is_starname (i) = ""b;
		else if code < 3 then is_starname (i) = "1"b;
		else call crump (code, ename (i));
	     end;

	     do first_pass = "1"b, ""b;

		do i = 1 to n_pathnames;

		     search_dir_struc.make_all_names_external = ""b;
		     search_dir_struc.n_dirs = 0;

		     if search_dir_struc.n_dirs > hbound (search_dir_struc.item, 1) then do;
			call com_err_ (0, "cross_reference", "More than ^d search paths specified.", hbound (search_dir_struc.item, 1));
			signal cref_abort_;
		     end;

		     search_dir_struc.n_dirs = search_dir_struc.n_dirs + 1;

		     if dir_description (i) ^= "" then
			search_dir_struc.search_dir_descriptions (search_dir_struc.n_dirs) = dir_description (i);
		     else search_dir_struc.search_dir_descriptions (search_dir_struc.n_dirs) = rtrim (dirname (i), " ");

		     search_dir_struc.search_dirs (search_dir_struc.n_dirs) = dirname (i);

		     search_dir_struc.make_all_names_external = all_option (i);

		     if is_starname (i) then do;

			call hcs_$star_ (dirname (i), ename (i), Segs_only, system_free_ptr,
			     seg_count, star_struc_ptr, star_names_ptr, code);
			if code ^= 0 then
			     if first_pass then call com_err_ (code, "cross_reference", "^a.  Continuing...",
				pathname_ (dirname (i), ename (i)));

			     else;

			else do;
			     do j = 1 to seg_count;

				if star_structure.type (j) = Nondir_segment
				then do;

				     call cref_analyze_ (star_names (binary (star_structure (j).nindex, 17)),
					first_pass);
				end;
			     end;

			     free star_names in (system_free_area),
				star_structure in (system_free_area);

			     star_names_ptr, star_struc_ptr = null;
			end;
		     end;

		     else do;
			call cref_analyze_ (ename (i), first_pass);
		     end;
		end;
	     end;

	end;

	call cref_sort_;				/* make cross ref lists */

	output_seg_ptr = test_outseg_ptr;		/* now we should delete it if we abort */
	call hcs_$truncate_seg (output_seg_ptr, 0, code); /* This is not the most efficient, but cref_filegen_ may depend on it */
	if code ^= 0 then goto output_seg_err;

	call cref_filegen_ (output_seg_ptr, msf_fcb_ptr); /* create output seg when done */

	call msf_manager_$close (msf_fcb_ptr);
	msf_fcb_ptr = null;

	call terminate_file_ (output_seg_ptr, (0), TERM_FILE_TERM, code);
	output_seg_ptr = null;

	
err_return:
	call clean_up;
	return;

unwind_and_abort:
	call com_err_ (0, "cross_reference", "Fatal error. Invocation aborted.");
	call clean_up;
	return;

clean_up:
	procedure;

	     if msf_fcb_ptr ^= null then do;		/* output seg never successfully finished */
		call msf_manager_$adjust (msf_fcb_ptr, 0, 0, "110"b, code);
		if output_seg_ptr ^= null then call hcs_$delentry_seg (output_seg_ptr, code);
		call msf_manager_$close (msf_fcb_ptr);
	     end;
	     if auto_area_info.areap ^= null then call release_area_ (auto_area_info.areap);
	     if err_seg_ptr ^= null then call release_temp_segment_ ("cross_reference", err_seg_ptr, code);
	     if input_seg_ptr ^= null then call terminate_file_ (input_seg_ptr, (0), TERM_FILE_TERM, (0));
	     if star_struc_ptr ^= null then free star_structure in (system_free_area);
	     if star_names_ptr ^= null then free star_names in (system_free_area);
	     if pathname_ptr ^= null then free pathname_struc in (system_free_area);
	     if search_dir_ptr ^= null then free search_dir_struc in (system_free_area);

	end clean_up;


crump:	proc (code, reason);

dcl  code fixed bin (35) parameter,
     reason char (*) parameter;

	     call com_err_ (code, "cross_reference", reason);
	     goto err_return;
	end crump;

get_token: proc returns (char (200) varying);

dcl  token char (200) varying;

dcl  input_seg char (char_count) based (input_seg_ptr);

dcl  separators char (3) static initial ("
	 "),						/* nl, tab, space */
     terminators char (2) static initial ("
;"),
     breaks_and_separators char (5) static initial ("
	 :;");						/* nl, tab, space, colon, semi */

dcl  i fixed bin (21);


	     if char_idx > char_count then goto set_eof;

	     i = verify (substr (input_seg, char_idx), separators) - 1;
	     if i = -1 then goto set_eof;

	     char_idx = char_idx + i;

	     i = search (substr (input_seg, char_idx), breaks_and_separators) - 1;
	     if i = -1 then i = char_count - char_idx + 1;
	     else if i = 0 then i = 1;

	     token = substr (input_seg, char_idx, i);

	     char_idx = char_idx + i;

	     if char_idx > char_count then goto set_eof;

	     return (token);

rest_of_line:  entry returns (char (200) varying);

	     peek_switch = ""b;
	     goto common;

peek_rest_of_line: entry returns (char (200) varying);

dcl  peek_switch bit (1);

dcl  whitespace char (2) static initial ("	 ");		/* tab, space */

	     peek_switch = "1"b;

common:
	     if char_idx > char_count then goto set_eof;

	     i = verify (substr (input_seg, char_idx), whitespace) - 1;
	     if i = -1 then goto set_eof;

	     char_idx = char_idx + i;

	     i = search (substr (input_seg, char_idx), terminators) - 1;
	     if i = -1 then token = substr (input_seg, char_idx);
	     else token = substr (input_seg, char_idx, i);

	     if ^peek_switch then char_idx = char_idx + i;

	     return (token);

set_eof:
	     char_idx = char_count + 1;
	     eof = "1"b;
	     return ("");

	end get_token;

     end cross_reference;
