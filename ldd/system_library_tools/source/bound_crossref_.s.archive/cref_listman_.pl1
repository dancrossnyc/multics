/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* format: style1,^inddcls,ifthenstmt,ifthendo,ifthen,indcomtxt,dclind5 */
cref_listman_: proc;

/* This subroutine handles all the list structuring operations in the
   cross-referencer database.
   Completely redesigned and rewritten by C. D. Tavares
   Modified by CDT 08/30/76 to fix minor chain-ordering bug in include file
   block entry.
   Modified 09/24/79 by CDT to make error message on line 589 more meaningful--
   also global cosmetic change to keep new version of PL/I compiler happy
   (can't declare a like a anymore).
   Modified 11/30/80 by CDT to fix misdeclared parameter.
   Last modified 09/81 by CDT to retain language suffixes
*/

dcl  cref_area_ptr	        pointer static,
     cref_area	        area (sys_info$max_seg_size) based (cref_area_ptr);

dcl  1 cref_database        aligned based (cref_database_ptr),
       2 a_nullp	        pointer unaligned,
       2 nullps	        (7) pointer unaligned,
       2 buckets	        (0:2703) pointer unaligned,
       2 environment_buckets
		        (0:127) pointer unaligned,
       2 include_file_buckets
		        (0:127) pointer unaligned;

dcl  cref_database_ptr      pointer static initial (null);

dcl  1 primary_block        aligned based (primary_block_ptr),
       2 forward_chain      pointer unaligned,
       2 flags	        aligned,
         3 is_segname       bit (1) unaligned,
         3 created_by_ref   bit (1) unaligned,
         3 is_external      bit (1) unaligned,
         3 ref_mismatch_noted
		        bit (1) unaligned,
         3 only_predefined  bit (1) unaligned,
         3 predefined_unused_noted
		        bit (1) unaligned,
       2 bound_seg_node     pointer unaligned,
       2 dir_node	        pointer unaligned,
       2 synonym_forward_chain
		        pointer unaligned,
       2 master_synonym_node
		        pointer unaligned,
       2 definition_node    pointer unaligned,
       2 reference_node     pointer unaligned,
       2 implicit_definition_chain
		        pointer unaligned,
       2 include_file_node  pointer unaligned,
       2 crossref_chain     pointer unaligned,
       2 crossref_chain_end pointer unaligned,
       2 lang_suffix_node   pointer unaligned,
       2 acc_length	        fixed bin (8) unaligned,
       2 name	        char (charlen refer (primary_block.acc_length))
		        unaligned;

dcl  primary_block_ptr      pointer;

dcl  1 attribute_block      aligned based (attribute_ptr),
       2 n_entries	        fixed bin (35),
       2 attribute_nodes    (n_elements refer (n_entries)) pointer unaligned;

dcl  attribute_ptr	        pointer;

dcl  1 include_file_block   aligned based (include_file_ptr),
       2 forward_chain      pointer unaligned,
       2 dtm	        bit (72),
       2 crossref_chain     pointer unaligned,
       2 crossref_chain_end pointer unaligned,
       2 acc_length	        fixed bin (8) unaligned,
       2 name	        char
		        (charlen refer (include_file_block.acc_length))
		        unaligned;

dcl  include_file_ptr       pointer;

dcl  1 string_block	        aligned based (string_ptr),
       2 forward_chain      pointer unaligned,
       2 bindfile_found     bit (1) unaligned,
       2 pad	        bit (8) unaligned,
       2 acc_length	        fixed bin (8) unaligned,
       2 string	        char (charlen refer (string_block.acc_length))
		        unaligned;

dcl  string_ptr	        pointer;

dcl  1 crossref_block       aligned based (crossref_block_ptr),
       2 forward_chain      pointer unaligned,
       2 crossref_node      pointer unaligned;

dcl  crossref_block_ptr     pointer;

dcl  1 implicit_def_block   aligned based (implicit_def_block_ptr),
       2 forward_chain      pointer unaligned,
       2 def_node	        pointer unaligned;

dcl  implicit_def_block_ptr pointer;

dcl  cref_filegen_$report_error
		        entry options (variable),
     sub_err_	        entry options (variable),
     error_table_$namedup   ext fixed bin (35),
     error_table_$noentry   ext fixed bin (35),
     sys_info$max_seg_size  fixed bin (35) external,
     charlen	        fixed bin;

dcl  i		        fixed bin;
%page;
create_primary_block_acc:
     entry (acc_ptr, bound_seg_node, dir_node, is_segname, defining,
	is_external) returns (pointer);

dcl  acc_ptr	        pointer parameter,
     (bound_seg_node,
     dir_node)	        pointer parameter,
     (is_segname,
     defining,
     is_external)	        bit (1) aligned;

dcl  node		        pointer;

dcl  1 based_acc_string     aligned based (acc_ptr),
       2 length	        fixed bin (9) unaligned unsigned,
       2 string	        char (based_acc_string.length) unaligned;

dcl  temp_ptr	        pointer,
     first_block_ptr        pointer,
     bucket	        fixed bin,
     prev_ptr	        pointer;

dcl  (addr, dim, hbound,
     index, length,
     max, null, rank,
     rtrim, substr)	        builtin;


	node = match_or_create_block ((based_acc_string.string),
	     bound_seg_node, dir_node, null, is_segname, defining,
	     ""b, is_external);

	return (node);
%skip (5);
create_primary_block_char:
     entry (char_string, bound_seg_node, dir_node, suffix_node,
	is_segname, defining, is_external) returns (pointer);

dcl  (char_string	        char (*) varying,
     suffix_node	        pointer) parameter;

	node = match_or_create_block ((char_string),
	     bound_seg_node, dir_node, suffix_node, is_segname, defining,
	     ""b, is_external);

	return (node);
%skip (5);
predefine_primary_block_char:
     entry (char_string, bound_seg_node, dir_node, is_segname, defining,
	is_external) returns (pointer);

	node = match_or_create_block ((char_string),
	     bound_seg_node, dir_node, null, is_segname, defining,
	     "1"b, is_external);

	return (node);
%skip (5);
/* format: ind3 */

match_or_create_block: proc (name, bound_seg_node, dir_node, suffix_node,
      is_segname, defining, predefining, is_external)
      returns (pointer);

dcl  name		        char (32) varying parameter,
     (bound_seg_node,
     dir_node,
     suffix_node)	        pointer parameter,
     (is_segname,
     defining,
     predefining,
     is_external)	        bit (1) aligned parameter;

dcl  found	        bit (1) aligned;

dcl  primary_blk_ptr        pointer;

dcl  1 primary_blk	        like primary_block aligned based (primary_blk_ptr);

dcl  already_found	        bit (1) aligned,
     already_found_ptr      pointer;

dcl  node		        pointer;


/* Try to find a block with this name already created. */

      primary_blk_ptr = null;

      call find_block (name, primary_blk_ptr, is_segname, found);

      if found then do;

	  if is_segname then do;

/* The block found must abide by certain rules controlling environment
   matching.  Prepare to see it it does.  Remember where we found the first
   matching block in case none of the rules work out.  */

	        first_block_ptr = primary_blk_ptr;

	        if defining then do;

/* Expect we really wanted to create one.  Before creating, check to see that
   no other external symbol exists in the same directory with the same name.
   Print different error messages depending on whether both names (if found)
   are found in the same bound segment.  (unlikely, but stranger things...) */

		    do while (found);

		       if primary_blk.dir_node = dir_node then do;

/* Claims there's a seg of the same name in the same dir.  Check it out. */

			   if check_dups_in_dir_ok () then
			        return (primary_blk_ptr);
			end;

		       else if primary_blk.dir_node = null &
			     primary_blk.bound_seg_node = null then
			do;

/* This block is a predefined synonym.  Polish it off. */

			   call set_predefined_synonym;
			   return (primary_blk_ptr);
			end;

		       call find_block
			(name, primary_blk_ptr, is_segname, found);
		    end;
		 end;


/* If we're not defining, we're searching. */

	        else do;

/* First rule: Search for name in same bound_seg in same dir.  If found, use
   it.  */

		    do while (found);

		       if primary_blk.bound_seg_node = bound_seg_node
			& primary_blk.dir_node = dir_node then
			  return
			     (find_master_block (primary_blk_ptr));

		       call find_block
			(name, primary_blk_ptr, is_segname, found);
		    end;

/* Second rule: Search for external occurrence of same name in same dir.  If
   found, use.  */

		    found = "1"b;
		    primary_blk_ptr = first_block_ptr;

		    do while (found);

		       if primary_blk.dir_node = dir_node
			& primary_blk.is_external then
			  return
			     (find_master_block (primary_blk_ptr));

		       call find_block
			(name, primary_blk_ptr, is_segname, found);
		    end;

/* Third rule: Search for any external occurrence of segname, and use it.
   Just for safety's sake, continue to check for another match with same
   criteria.  If more than once match does occur, complain, but stick to your
   choice, because it's as good as any.  */

		    already_found = ""b;
		    found = "1"b;
		    primary_blk_ptr = first_block_ptr;

		    do while (found);

		       if primary_blk.is_external then
			  if already_found then do;
			        call cref_filegen_$report_error
				 (error_table_$namedup,
				 "cref_listman_",
				 "References to ^a are ambiguous.",
				 name);

/* Don't print the error message more than once */

			        already_found_ptr ->
				 primary_blk.ref_mismatch_noted
				 = "1"b;

			        return (already_found_ptr);
			     end;

			  else do;
			        if primary_blk.ref_mismatch_noted

/* No use complaining about this one again */

			        then return (find_master_block
				      (primary_blk_ptr));

			        already_found_ptr =
				 find_master_block
				 (primary_blk_ptr);
			        already_found = "1"b;
			     end;

		       call find_block
			(name, primary_blk_ptr, is_segname, found);
		    end;

/* Return the solid match, if we got one */

		    if already_found then return (already_found_ptr);

		 end;
	     end;


/* If it isn't a segname, it's a definition.  Try to match the environments */

	  else do while (found);
	        if primary_blk.bound_seg_node = bound_seg_node then
		   return (primary_blk_ptr);

	        call find_block
		 (name, primary_blk_ptr, is_segname, found);
	     end;

         end;


/* Couldn't find any match.  Time to create a new block. */

      prev_ptr = primary_blk_ptr;

      charlen = length (name);
      allocate primary_blk in (cref_area);

/* Insert name and environmentts */

      primary_blk.name = name;
      primary_blk.lang_suffix_node = suffix_node;
      primary_blk.synonym_forward_chain = null;
      primary_blk.master_synonym_node = null;
      primary_blk.definition_node = null;
      primary_blk.reference_node = null;
      primary_blk.implicit_definition_chain = null;
      primary_blk.include_file_node = null;
      primary_blk.crossref_chain = null;
      primary_blk.crossref_chain_end = null;
      primary_blk.bound_seg_node = bound_seg_node;
      primary_blk.dir_node = dir_node;
      primary_blk.flags.is_segname = is_segname;
      primary_blk.is_external = is_external | ^defining;
      primary_blk.only_predefined = predefining;

/* If we are defining a synonym make sure it doesn't look like a wild ref */

      if (dir_node ^= null & bound_seg_node ^= null) then
	 primary_blk.created_by_ref = ^defining & is_segname;

      call chain_on (prev_ptr, primary_blk_ptr);

      return (primary_blk_ptr);
%page;
check_dups_in_dir_ok: proc returns (bit (1));

/* Why an internal procedure?  To control the damn indenting. */

      if primary_blk.bound_seg_node = bound_seg_node then do;

/* Same module already defined.  What's up? */

	  if (dir_node ^= null | bound_seg_node ^= null) then

/* It's a solid match, not just a don't care match... */

	       if ^predefining then do;

/* ...and we're not predefining it now from a bindfile... */

		   if ^primary_blk.only_predefined then

/* ...and it wasn't formerly predefined by a bindfile-- must be an error */

		        call cref_filegen_$report_error
			 (error_table_$namedup, "cref_listman_",
			 "^a (^a) in ^a", name,
			 bound_seg_node -> string_block.string,
			 dir_node -> string_block.string);

/* In any case, we're defining it NOW, so turn off the predefined bit */

		   else do;
		         primary_blk.only_predefined = ""b;
		         primary_blk.lang_suffix_node = suffix_node;
		      end;
		end;
	  return ("1"b);
         end;

      else if is_external then

/* Aarrgh.  The dirs are the same, but the bound segs are different. */

	 if primary_blk.is_external then
	      call cref_filegen_$report_error
	         (error_table_$namedup, "cref_listman_",
	         "Multiple occurrences of ^a in ^a.",
	         name, dir_node -> string_block.string);

      return ("0"b);

   end check_dups_in_dir_ok;
%skip (5);
set_predefined_synonym: proc;


/* Find the master synonym upon which to work our wiles. */

      if primary_blk.master_synonym_node = null then
	 temp_ptr = primary_blk_ptr;
      else temp_ptr =
	    primary_blk.master_synonym_node;

      node = temp_ptr;				/* anything's OK */

/* Chain through all the synonyms, setting the environments */

      do temp_ptr = temp_ptr repeat (node) while (node ^= null);

         temp_ptr -> primary_blk.dir_node = dir_node;
         temp_ptr -> primary_blk.bound_seg_node = bound_seg_node;

         node = temp_ptr -> primary_blk.synonym_forward_chain;

      end;

      return;

   end set_predefined_synonym;
%skip (5);
find_block: procedure (string, primary_blk_ptr, is_segname, found);

dcl  string	        char (32) varying parameter,
     primary_blk_ptr        pointer parameter,
     found	        bit (1) aligned parameter,
     is_segname	        bit (1) aligned parameter;

dcl  1 primary_blk	        like primary_block aligned based (primary_blk_ptr);

dcl  key		        char (2),
     (high_hash, low_hash)  fixed bin;

dcl  legal_chars	        char (52) static initial
		        ("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz");

/* These aren't the only legal chars of course, but they are the only chars
   allowed as the first char in a segname or entryname.  */


      found = ""b;

/* If this is a plain old search, hash the string and get to it */

      if primary_blk_ptr = null then do;
(nostrz):	  key = string;
	  high_hash = index (legal_chars, substr (key, 1, 1)) - 1;
	  low_hash = index (legal_chars, substr (key, 2, 1)) - 1;
	  bucket = max (high_hash * length (legal_chars) + low_hash, 0);

/* Set fake prev_ptr to point to bucket chain in case first loop exits */

	  prev_ptr = addr (cref_database.buckets (bucket));

	  if cref_database.buckets (bucket) = null then do;
	        found = ""b;
	        primary_blk_ptr = prev_ptr;
	        return;
	     end;

	  primary_blk_ptr = cref_database.buckets (bucket);
         end;

      else do;
	  if primary_blk.forward_chain = null then return;
	  prev_ptr = primary_blk_ptr;
	  primary_blk_ptr = primary_blk.forward_chain;
         end;


      do primary_blk_ptr = primary_blk_ptr
         repeat (primary_blk.forward_chain);

/* Look for match or at least a good place to add new block */

         if primary_blk.is_segname = is_segname then	/* MUST match */
	    if primary_blk.name = string then do;
		found = "1"b;
		return;
	       end;

/* If we've run too far in alphabetical order, back up and point to good place
   to chain in */

         if primary_blk.name > string then do;
	     primary_blk_ptr = prev_ptr;
	     return;
	  end;

/* End of chain?  Maybe we will want to chain in here later. */

         else if primary_blk.forward_chain = null then return;

         prev_ptr = primary_blk_ptr;			/* loop... */
      end;

   end find_block;
%skip (5);
find_master_block: proc (found_ptr) returns (ptr);

dcl  found_ptr	        pointer;


      if found_ptr -> primary_blk.master_synonym_node = null then
	 return (found_ptr);
      return (found_ptr -> primary_blk.master_synonym_node);

   end find_master_block;
   end match_or_create_block;

/* format: revert */
%page;
create_syn_block: entry (char_string, bound_seg_node, dir_node, is_external,
	master_synonym_node);

dcl  master_synonym_node    pointer;

dcl  master_block_ptr       pointer;


	master_block_ptr = master_synonym_node;

/* Don't syn anything to itself */

	if master_block_ptr -> primary_block.name = char_string then return;

	primary_block_ptr = match_or_create_block
	     ((char_string), bound_seg_node, dir_node, null, "1"b,
	     ^master_block_ptr -> primary_block.created_by_ref, ""b,
	     is_external);

/* Don't do the same syn twice */

	if primary_block.master_synonym_node ^= null then do;
		temp_ptr = primary_block.master_synonym_node;
		call cref_filegen_$report_error (0, "cref_listman_",
		     "^a cannot be made synonymous with ^a;
^-already synonymous to ^a.",
		     char_string, master_block_ptr -> primary_block.name,
		     temp_ptr -> primary_block.name);
		return;
	     end;

/* Patch new block into the forward synonym chain */

	if (primary_block_ptr = null | master_block_ptr = null) then
	     call sub_err_ (0, "cross_reference", "s", null, 0,
		"Inconsistency in synonym chains.");

	primary_block_ptr -> primary_block.synonym_forward_chain =
	     master_block_ptr -> primary_block.synonym_forward_chain;
	master_block_ptr -> primary_block.synonym_forward_chain =
	     primary_block_ptr;

/* Chain master synonym slot to head honcho synonym */

	primary_block_ptr -> primary_block.master_synonym_node =
	     master_synonym_node;

	return;
%skip (5);
create_include_file_block: entry (char_string, date_time_modified)
	returns (pointer);

dcl  date_time_modified     bit (72) parameter;

dcl  satisfied	        bit (1);


/* Hash by first character */

	bucket = rank (substr (char_string, 1, 1));

	satisfied = ""b;

	prev_ptr = addr (cref_database.include_file_buckets (bucket));

/* Try finding an already existing block for this include file */

	if cref_database.include_file_buckets (bucket) ^= null then
	     do include_file_ptr =
		cref_database.include_file_buckets (bucket)
		repeat (include_file_block.forward_chain)
		while (^satisfied);

		if include_file_block.name = char_string then
		     if include_file_block.dtm = date_time_modified then
			return (include_file_ptr);

		     else if include_file_block.dtm > date_time_modified
		     then do;

/* Remember to keep them sorted by dtm */

			     include_file_ptr = prev_ptr;
			     satisfied = "1"b;
			end;

/* If we've passed it in alphabetical order, back up */

		if include_file_block.name > char_string then do;
			include_file_ptr = prev_ptr;
			satisfied = "1"b;
		     end;

/* If we're at the end of the chain, punt */

		else if include_file_block.forward_chain = null then
		     satisfied = "1"b;

		prev_ptr = include_file_ptr;
	     end;

/* Didn't find it; looks like time to create one */

	charlen = length (char_string);
	allocate include_file_block in (cref_area);

	include_file_block.dtm = date_time_modified;
	include_file_block.name = char_string;
	include_file_block.forward_chain = null;
	include_file_block.crossref_chain = null;
	include_file_block.crossref_chain_end = null;

	call chain_on (prev_ptr, include_file_ptr);

	return (include_file_ptr);
%skip (5);
create_environment: entry (description, bindfile_found) returns (pointer);

dcl  description	        char (*) varying parameter,
     bindfile_found	        bit (1) aligned parameter;

	node = make_string (description);
	return (node);
%skip (5);
get_name: entry (node_no) returns (char (32) varying);

dcl  node_no	        pointer parameter;

dcl  temp_string	        char (32) varying;

	primary_block_ptr = node_no;
	temp_string = primary_block.name;
	return (temp_string);


get_name_with_suffix: entry (node_no) returns (char (32) varying);

	primary_block_ptr = node_no;
	temp_string = primary_block.name;
	string_ptr = primary_block.lang_suffix_node;
	if string_ptr ^= null then
	     temp_string = rtrim (temp_string) || string_block.string;
	else temp_string = rtrim (temp_string) || ".?";
	return (temp_string);
%page;
assign_def_block: entry (attribute_array, n_elements, master_node);

dcl  master_node	        pointer parameter,
     attribute_array        (*) pointer parameter,
     n_elements	        fixed bin;

	primary_block_ptr = master_node;

	primary_block.definition_node = assign_attribute_block ();
	return;


assign_ref_block: entry (attribute_array, n_elements, master_node);

	primary_block_ptr = master_node;

	primary_block.reference_node = assign_attribute_block ();
	return;


assign_include_file_block: entry (attribute_array, n_elements, master_node);

	primary_block_ptr = master_node;

	primary_block.include_file_node = assign_attribute_block ();
	return;
%skip (5);
assign_attribute_block: proc returns (pointer);

	if n_elements = 0 then return (null);

	allocate attribute_block in (cref_area);

	do i = 1 to n_elements;
	     attribute_block.attribute_nodes (i) = attribute_array (i);
	end;

	return (attribute_ptr);

     end assign_attribute_block;
%page;
/* format: ind3 */

get_consecutive_segnames: entry (node_arg, bucket_arg) returns (pointer aligned);

dcl  node_arg	        pointer parameter,
     bucket_arg	        fixed bin parameter;


	node = node_arg;

/* If there is no "leftover" node input value, this is the first call to me */

	if node = null then bucket_arg = 0;

/* Otherwise, start search from the next bucket */

	else do;
	      primary_block_ptr = node;
	      node = primary_block_ptr -> primary_block.forward_chain;
	      if node = null then bucket_arg = bucket_arg + 1;
	   end;

/* Chain through buckets to find next block */

	do while ("1"b);

/* Skip dead buckets */

	   do bucket_arg = bucket_arg to hbound (buckets, 1)
	      while (cref_database.buckets (bucket_arg) = null);
	   end;

/* When we run out of buckets, quit */

	   if bucket_arg > hbound (buckets, 1) then return (null);

/* Special initial conditions case */

	   if node = null then
	        node = cref_database.buckets (bucket_arg);

	   primary_block_ptr = node;

	   do primary_block_ptr = primary_block_ptr
	      repeat (node) while (node ^= null);

	      if primary_block.only_predefined then do;
		  if ^primary_block.predefined_unused_noted then do;
		        call cref_filegen_$report_error
			 (0, "cref_listman_",
			 "Warning: Synonyms were defined for ^a,
^-but ^a was not in the search list.",
			 primary_block.name, primary_block.name);
		        primary_block.predefined_unused_noted = "1"b;
		     end;
	         end;


	      else if primary_block.flags.is_segname then do;

/* Got one.  Make sure it's not an internal synonym */

		  if primary_block.is_external then return (node);

/* Of course, if it's internal and NOT a synonym, we still want it */

		  else if primary_block.master_synonym_node = null then
		       return (node);
	         end;

	      node = primary_block.forward_chain;
	   end;

	   bucket_arg = bucket_arg + 1;		/* next bucket */

	end;
%page;
get_consecutive_include_files: entry (node_arg, bucket_arg, char_string, date_time_modified) returns (pointer aligned);


/* This is much the same as the entry above.  See it for comments. */

	node = node_arg;

	if node = null then bucket_arg = 0;

	else do;
	      include_file_ptr = node;
	      node = include_file_ptr -> include_file_block.forward_chain;
	      if node = null then bucket_arg = bucket_arg + 1;
	   end;

	do bucket_arg = bucket_arg to hbound (include_file_buckets, 1)
	   while (cref_database.include_file_buckets (bucket_arg) = null);
	end;

	if bucket_arg > hbound (include_file_buckets, 1) then return (null);

	if node = null then
	     node = cref_database.include_file_buckets (bucket_arg);

	include_file_ptr = node;

	char_string = include_file_block.name;
	date_time_modified = include_file_block.dtm;
	return (node);
%page;
get_refs: entry (node_arg, attribute_array, n_elements);

dcl  (Refs	        initial (1),
     Defs		        initial (2),
     Incls	        initial (3)) internal static fixed bin
		        options (constant);

	call get_attribute_block (Refs);
	return;


get_defs: entry (node_arg, attribute_array, n_elements);

	call get_attribute_block (Defs);
	return;


get_include_files: entry (node_arg, attribute_array, n_elements);

	call get_attribute_block (Incls);
	return;
%skip (5);
get_attribute_block: proc (which_type);

dcl  which_type	        fixed bin;

dcl  which_node	        pointer;


      n_elements = 0;

      primary_block_ptr = node_arg;

/* Don't return refs or include files for synonyms; otherwise find master
   block for this synonym */

      if primary_block.master_synonym_node ^= null then
	 if which_type ^= Defs then return;
	 else primary_block_ptr = primary_block.master_synonym_node;

      if which_type = Refs then
	 which_node = primary_block.reference_node;
      else if which_type = Defs then
	 which_node = primary_block.definition_node;
      else if which_type = Incls then
	 which_node = primary_block.include_file_node;
      else which_node = null;

      if which_node = null then return;

      attribute_ptr = which_node;

      if attribute_block.n_entries > dim (attribute_array, 1) then do;
	  n_elements = -1;
	  return;
         end;

      n_elements = attribute_block.n_entries;

      do i = 1 to n_elements;
         attribute_array (i) = attribute_block.attribute_nodes (i);
      end;

      return;
   end get_attribute_block;
%page;
assign_crossref: entry (node_arg, crossref_node);

dcl  crossref_node	        pointer;

dcl  (Program	        initial (1),
     Include_file	        initial (2)) static options (constant) fixed bin;

	call append_crossref (Program);
	return;



assign_include_file_crossref: entry (node_arg, crossref_node);

	call append_crossref (Include_file);
	return;
%skip (5);
append_crossref: proc (which_type);

dcl  which_type	        fixed bin;

      allocate crossref_block in (cref_area);

      crossref_block.crossref_node = crossref_node;
      crossref_block.forward_chain = null;

      if which_type = Program then do;

	  primary_block_ptr = node_arg;

/* Find master if this is synonym */

	  if primary_block.master_synonym_node ^= null then
	       primary_block_ptr = primary_block.master_synonym_node;

	  if primary_block.crossref_chain = null then	/* start chain */
	       primary_block.crossref_chain = crossref_block_ptr;

	  else do;

/* Spend a little care to keep them in alphabetical order */

	        temp_ptr = primary_block.crossref_chain_end;
	        call chain_on (temp_ptr, crossref_block_ptr);
	     end;

	  primary_block.crossref_chain_end = crossref_block_ptr;
         end;


      else if which_type = Include_file then do;

/* Same comments as above */

	  include_file_ptr = node_arg;

	  if include_file_block.crossref_chain = null then
	       include_file_block.crossref_chain = crossref_block_ptr;

	  else do;
	        temp_ptr = include_file_block.crossref_chain_end;
	        call chain_on (temp_ptr, crossref_block_ptr);
	     end;

	  include_file_block.crossref_chain_end = crossref_block_ptr;
         end;

      return;
   end append_crossref;
%page;
create_implicit_def: entry (node_arg, new_def_node);

dcl  new_def_node	        pointer;


	allocate implicit_def_block in (cref_area);

	implicit_def_block.def_node = new_def_node;
	implicit_def_block.forward_chain = null;

	primary_block_ptr = node_arg;

/* Don't take any wooden synonyms */

	if primary_block.master_synonym_node ^= null then
	     primary_block_ptr = primary_block.master_synonym_node;

	if primary_block.implicit_definition_chain = null then
	     primary_block.implicit_definition_chain =
	        implicit_def_block_ptr;

	else call chain_on
	        (addr (primary_block.implicit_definition_chain),
	        implicit_def_block_ptr);

	return;
%skip (5);
get_primary_block_long: entry (node_arg, name_array, n_names, is_synonym,
        dir_description, bound_segment_name);

dcl  name_array	        char (32) varying dimension (*),
     is_synonym	        bit (1) aligned parameter,
     (dir_description,
     bound_segment_name)    char (*) varying parameter,
     n_names	        fixed bin parameter;


	primary_block_ptr = node_arg;

/* No environments for things that were created by reference (unfound) or
   synonyms */

	if primary_block.created_by_ref then
	     dir_description, bound_segment_name = "";

	else if primary_block.master_synonym_node ^= null then
	     dir_description, bound_segment_name = "";


	else do;
	      string_ptr = primary_block.dir_node;
	      dir_description = string_block.string;

	      string_ptr = primary_block.bound_seg_node;
	      bound_segment_name = string_block.string;
	      if ^string_block.bindfile_found then do;
		  call cref_filegen_$report_error
		     (0, "cref_listman_",
		     "Warning - no bindfile found for ^a.",
		     bound_segment_name);

/* Hack the bindfile-found bit just to shut up multiple error messages */

		  string_block.bindfile_found = "1"b;
	         end;

	      if primary_block.only_predefined then do;
		  call cref_filegen_$report_error
		     (error_table_$noentry, "cref_listman_",
		     "Bindfile for ^a contained nonexistent component ^a",
		     bound_segment_name, primary_block.name);

/* Hack this bit too, same reason */

		  primary_block.only_predefined = ""b;
	         end;
	   end;

	name_array (1) = primary_block.name;
	n_names = 1;

	if primary_block.master_synonym_node ^= null then do;
	      is_synonym = "1"b;
	      primary_block_ptr = primary_block.master_synonym_node;

	      if dim (name_array, 1) < 2 then do;
		  n_names = -1;
		  return;
	         end;

	      n_names = 2;
	      name_array (2) = primary_block.name;
	      return;
	   end;

	else is_synonym = ""b;

	if primary_block.synonym_forward_chain ^= null then do;

	      do n_names = 2 by 1
	         while (primary_block.synonym_forward_chain ^= null);

/* Fill in synonyms */

	         primary_block_ptr = primary_block.synonym_forward_chain;

	         if n_names > dim (name_array, 1) then do;
		     n_names = -1;
		     return;
		  end;

	         name_array (n_names) = primary_block.name;
	      end;

	      n_names = n_names - 1;			/* hack for loop */
	   end;

	return;
%skip (5);
get_implicit_defs: entry (node_arg, attribute_array, n_elements);


/* This is like all the entries above, look up for comments. */

	primary_block_ptr = node_arg;
	n_elements = 0;

	if primary_block.master_synonym_node ^= null then
	     primary_block_ptr = primary_block.master_synonym_node;

	if primary_block.implicit_definition_chain = null then return;

	node = primary_block.implicit_definition_chain;

	do implicit_def_block_ptr = primary_block.implicit_definition_chain
	   repeat (node)
	   while (node ^= null);			/* chain thru, picking up implicit defs */

	   n_elements = n_elements + 1;
	   if n_elements > dim (attribute_array, 1) then do;
	         n_elements = -1;
	         return;
	      end;

	   attribute_array (n_elements) = implicit_def_block.def_node;

	   node = implicit_def_block.forward_chain;
	end;

	return;
%skip (5);
get_crossrefs: entry (node_arg, attribute_array, n_elements);

	call get_crossref_chain (Program);
	return;



get_include_file_crossrefs: entry (node_arg, attribute_array, n_elements);

	call get_crossref_chain (Include_file);
	return;
%skip (5);
get_crossref_chain: proc (which_type);

dcl  which_type	        fixed bin parameter;

      n_elements = 0;

      if which_type = Program then do;
	  primary_block_ptr = node_arg;

	  if primary_block.crossref_chain = null then return;

	  node = primary_block.crossref_chain;
         end;

      else if which_type = Include_file then do;
	  include_file_ptr = node_arg;

	  if include_file_block.crossref_chain = null then return;

	  node = include_file_block.crossref_chain;
         end;

      do crossref_block_ptr = node
         repeat (node) while (node ^= null);

         n_elements = n_elements + 1;
         if n_elements > dim (attribute_array, 1) then do;
	     n_elements = -1;
	     return;
	  end;

         attribute_array (n_elements) = crossref_block.crossref_node;

         node = crossref_block.forward_chain;
      end;

      return;
   end get_crossref_chain;
%page;
init: entry (segp);

dcl  segp		        pointer;


	cref_area_ptr = segp;

	allocate cref_database in (cref_area);

	cref_database.nullps = null;			/* to catch bugs */
	cref_database.a_nullp = null;			/* same here */
	cref_database.buckets = null;
	cref_database.environment_buckets = null;
	cref_database.include_file_buckets = null;
	return;
%page;
chain_on: proc (chain_word_ptr, curr_block_ptr);

/* This internal subroutine causes the chain word at chain_word_ptr to point
   to the block at curr_block_ptr, relinking the chain after chaining the
   curent block in.  */

dcl  (chain_word_ptr, curr_block_ptr) pointer parameter;

dcl  based_pointer	        pointer unaligned based;

      curr_block_ptr -> based_pointer = chain_word_ptr -> based_pointer;
      chain_word_ptr -> based_pointer = curr_block_ptr;
      return;

   end chain_on;
%skip (5);
make_string: proc (string_arg) returns (pointer);

dcl  string_arg	        char (*) varying;

dcl  satisfied	        bit (1) aligned;


      bucket = rank (substr (string_arg, max (1, length (string_arg) - 2), 1));

/* We use the next-to-last char, not first, because using first would cause
   all the "bound_..." to hash into "b", all the dirs to hash into ">", and
   almost nothing anywhere else.  Using last char would mean having a run on
   "_".  */

      satisfied = ""b;

      prev_ptr = addr (cref_database.environment_buckets (bucket));

      if cref_database.environment_buckets (bucket) ^= null then
         do string_ptr = cref_database.environment_buckets (bucket)
	  repeat (string_block.forward_chain)
	  while (^satisfied);

	  if string_block.string = string_arg then do;
	        if bindfile_found then string_block.bindfile_found = "1"b;
	        return (string_ptr);
	     end;

	  if string_block.forward_chain = null then do;
	        satisfied = "1"b;
	        string_ptr = prev_ptr;
	     end;

	  prev_ptr = string_ptr;
         end;

      charlen = length (string_arg);
      allocate string_block in (cref_area);

      string_block.string = string_arg;
      string_block.forward_chain = null;
      string_block.bindfile_found = bindfile_found;

      call chain_on (prev_ptr, string_ptr);

      return (string_ptr);
   end make_string;

     end cref_listman_;
