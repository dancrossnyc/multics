/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */

/****^  HISTORY COMMENTS:
  1) change(2016-01-15,Swenson), approve(2016-01-15,MCR10003):
     Fix to support 4-character time zone abbreviations.
                                                   END HISTORY COMMENTS */

/* * meter plotting command
   f.j. corbat'o, Jan. 1970, modified April 1970, modified April 1971
   Last modified January 1981 by J. Bongiovanni to fix minor bugs
   Modified November 1984 by M. Pandolf to include hc_lock.
*/
	

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */


system_performance_graph: spg: proc;

dcl (mn, nn, mu, nu) fixed bin;
dcl  ss char (arglen) based (argp);
dcl  arglen fixed bin;
dcl  argp ptr;
dcl  ct fixed bin static;
dcl  short_lines bit (1) int static init ("0"b);
dcl  llen fixed bin;

dcl  unique fixed bin static init (0);
dcl  first_time bit (1) aligned static init ("1"b);
dcl (i, length, chsw, qc) fixed bin (17);
dcl  code fixed bin (35);
dcl (sstp1, sstp2, tcdp1, tcdp2) ptr static;
dcl (pzi, pnmpi, pmpi, pint, ptc, ppf, psf, puse_rz, px, meter_time) float;
dcl (pdio, dkio, vtio) fixed bin;
dcl (time, wakeup_time) fixed bin (52);
dcl  minute_time fixed bin (35);
dcl  chname fixed bin (71) int static init (0);
dcl  str char (24);
dcl 1 st aligned,
    (2 hour pic "99",
    2 min pic "99.v99",
    2 blank char (1),
    2 graph char (101)) unal;
dcl  cstring char (110) aligned;
dcl  mplot_mode bit (1) aligned;
dcl  mplot_switch ptr static init (null());
dcl  outfilename char (168) var;
dcl (k, arg_count) fixed bin;
dcl  month fixed bin,
     dom fixed bin,
     tod fixed bin (52),
     year fixed bin,
     dow fixed bin,
     hour fixed bin (35),
     minute float bin,
     zone char (4) aligned;

dcl  iox_$user_output ptr ext,
     error_table_$badopt fixed bin (35) ext;

dcl  cu_$arg_count entry (fixed bin),
     cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35)),
     com_err_ entry options (variable),
     iox_$attach_ioname entry (char (*), ptr, char (*), fixed bin (35)),
     iox_$open entry (ptr, fixed bin, bit (1) aligned, fixed bin (35)),
     iox_$close entry (ptr, fixed bin (35)),
     iox_$detach_iocb entry (ptr, fixed bin (35)),
     iox_$control entry (ptr, char(*), ptr, fixed bin(35)),
     ioa_$ioa_switch entry options (variable),
     date_time_ entry (fixed bin (52), char (*)),
     decode_clock_value_ entry (fixed bin (52), fixed bin, fixed bin, fixed bin, fixed bin (52),
     fixed bin, char (4) aligned),
     clock_ entry returns (fixed bin (52)),
     meter_util_$get_buffers entry (fixed bin, ptr, ptr, ptr, ptr, fixed bin (35)),
     meter_util_$fill_buffers entry (fixed bin),
     meter_util_$reset entry (fixed bin),
     spg_util_$reset entry (fixed bin, ptr, ptr, ptr, ptr),
     spg_util_ entry (float, float, float, float, float, float, float, float, float,
     char (110) aligned, fixed bin, fixed bin),
     spg_fs_info_ entry (fixed bin, fixed bin, fixed bin),
     system_info_$users entry (fixed bin, fixed bin, fixed bin, fixed bin),
     ipc_$create_ev_chn entry (fixed bin (71), fixed bin (35)),
     ipc_$decl_ev_call_chn entry (fixed bin (71), entry, ptr, fixed bin, fixed bin (35)),
     ipc_$drain_chn entry (fixed bin (71), fixed bin (35)),
     ipc_$delete_ev_chn entry (fixed bin (71), fixed bin (35)),
     timer_manager_$alarm_wakeup entry (fixed bin (52), bit (2), fixed bin (71)),
     timer_manager_$reset_alarm_wakeup entry (fixed bin (71));

dcl (bin, max, min, null, string, substr) builtin;

dcl  conversion condition;
			 

	

	mplot_mode = "0"b;
	ct = 0;

	call cu_$arg_count (arg_count);
	do k = 1 to arg_count;

	     call cu_$arg_ptr (k, argp, arglen, code);
	     if code ^= 0 then go to error;
	     
	     if substr (ss, 1, 1) ^= "-" then do;
		on conversion goto arg_error;
		ct = bin (ss, 17);
		revert conversion;
		if ct <= 0 then goto arg_error;
	     end;
	     else if ss = "-short" then short_lines = "1"b;
	     else if ss = "-long" | ss = "-lg" then short_lines = "0"b;
	     else if ss = "-output_file" | ss = "-of" then do;
		mplot_mode = "1"b;
		call cu_$arg_ptr (k + 1, argp, arglen, code);
		if (code = 0) & (substr (ss, 1, 1) ^= "-") then do;
		     outfilename = ss;
		     k = k + 1;
		end;
		else
		outfilename = "spg_output";
	     end;
	     else if ss = "-halt" | ss = "-ht" then
		go to stop;
	     else do;
arg_error:	call com_err_ (error_table_$badopt, "spg", ss);
		return;
	     end;

	end;

	if ^first_time then do;
	     call com_err_ (0, "spg", "Already invoked. Use -halt to terminate other invocation");
	     return;
	end;

	if ct = 0 then do;
	     call com_err_ (0, "spg", "Wakeup interval not specified.");
	     return;
	end;

	if mplot_mode then do;
	     call iox_$attach_ioname ("spg_output_", mplot_switch, "vfile_ " || outfilename || " -extend", code);
	     if code ^= 0 then go to error;
	     call iox_$open (mplot_switch, 2, "0"b, code);
	     if code ^= 0 then go to error;
	end;
	else
	mplot_switch = iox_$user_output;

	call date_time_ (clock_ (), str);		/* time_stamp output */
	call ioa_$ioa_switch (mplot_switch, "^5-^a", str);

	call meter_util_$get_buffers (unique, sstp1, sstp2, tcdp1, tcdp2, code);
	call meter_util_$fill_buffers (unique);
	call spg_util_$reset (unique, sstp1, sstp2, tcdp1, tcdp2);

	

	call date_time_ ((tcdp2 -> tcm.initialize_time), str);

	call ioa_$ioa_switch (mplot_switch, "up= ^20a, sys_hours= ^.1f, cpu_hours= ^.1f", substr (str, 1, 20),
	     (tcdp2 -> tcm.last_time - tcdp2 -> tcm.initialize_time)/36e8, tcdp2 -> tcm.processor_time/36e8);

	if chname = 0 then do;			/* create event channel */
	     call ipc_$create_ev_chn (chname, code);
	     if code ^= 0 then go to error;
	     call ipc_$decl_ev_call_chn (chname, line, null (), 1, code);
	     if code ^= 0 then go to error;
	end;
	else do;
	     call ipc_$drain_chn (chname, code);
	     if code ^= 0 then go to error;
	end;

	call line;

	return;



error:	call com_err_ (code, "spg", "");


stop:
	if mplot_switch ^= iox_$user_output & mplot_switch ^= null() then do;
	     call iox_$close (mplot_switch, code);
	     call iox_$detach_iocb (mplot_switch, code);
	end;
	mplot_switch = null();
	

	if chname ^= 0 then do;
	     call timer_manager_$reset_alarm_wakeup (chname);

	     call ipc_$delete_ev_chn (chname, code);
	     chname = 0;
	end;

	first_time = "1"b;
	short_lines = "0"b;

	return;

	

line:	entry;					/* routine to do a line */

	time = clock_ ();
	call decode_clock_value_ (time, month, dom, year, tod, dow, zone);
	hour = tod/3.6e9;
	minute = tod / 6.0e7 - hour * 60;

	st.hour = hour;
	st.min = minute;
	st.blank = " ";
	st.graph = (11)"|    .    ";

	call meter_util_$fill_buffers (unique);
	call spg_util_ (pzi, pnmpi, pmpi, pint, ptc, ppf, psf, puse_rz, px, cstring, length, chsw);

/* * print line if configuration or tuning has changed */
	if chsw ^= 0 then
	     call ioa_$ioa_switch (mplot_switch, substr (cstring, 1, length));


	call fill_in (pzi + pnmpi + pmpi + pint + ptc + ppf + psf + puse_rz, 0e0, "y");
	call fill_in (pzi + pnmpi + pmpi + pint + ptc + ppf, psf, "s");
	call fill_in (pzi + pnmpi + pmpi + pint + ptc, ppf, "p");
	call fill_in (pzi + pnmpi + pmpi + pint, ptc, "t");
	call fill_in (pzi + pnmpi + pmpi, pint, "i");
						/*	call fill_in (pzi + pnmpi + pmpi + px, 0e0, "x");	NOTE: px not currently being used */
	call fill_in (pzi + pnmpi, pmpi, "m");		/* m is mp_idle */
	call fill_in (pzi, pnmpi, "*");		/* * is nmp_idle */

	call fill_in ((tcdp2 -> tcm.avequeue), 0e0, "q");
	call fill_in ((tcdp2 -> tcm.ave_eligible), 0e0, "e");

	if (tcdp2 -> tcm.response_count - tcdp1 -> tcm.response_count) ^= 0 then
	     call fill_in ((tcdp2 -> tcm.response_time - tcdp1 -> tcm.response_time) /
	     ((tcdp2 -> tcm.response_count - tcdp1 -> tcm.response_count) * 1e5), 0e0, "r");

	if first_time then
	     meter_time = tcdp2 -> tcm.last_time - tcdp2 -> tcm.initialize_time;
	else
	meter_time = tcdp2 -> tcm.last_time - tcdp1 -> tcm.last_time;

	qc = 0;
	do i = 0 to 5;
	     qc = qc + tcdp2 -> tcm.quit_counts (i) - tcdp1 -> tcm.quit_counts (i);
	end;

	call fill_in (qc/ (meter_time/60e6), 0e0, "Q");
	call fill_in ((tcdp2 -> tcm.schedulings - tcdp1 -> tcm.schedulings)/ (meter_time/1e7), 0e0, "S");

	call spg_fs_info_ (pdio, dkio, vtio);
	call fill_in (1e2 - pdio / (meter_time / 1e5), 0e0, "P"); /* 1000 max */
	call fill_in (1e2 - dkio / (meter_time / 1e5), 0e0, "D"); /* 1000 max */
	call fill_in (1e2 - vtio / (meter_time / 1e5), 0e0, "V"); /* 1000 max */

	call system_info_$users (mn, nn, mu, nu);
	call fill_in (nu / 1e1, 0e0, "-");
	call fill_in ((nn), 0e0, "+");

	if short_lines then llen = 59;
	else llen = 109;
	do i = 10 to 90 by 10;			/* re-place some "|" for clarity */
	     if substr (graph, i, 1) = substr (graph, i+2, 1) then
		if substr (graph, i, 1) = substr (graph, i+1, 1) then
		     substr (graph, i+1, 1) = "|";
	end;
	call ioa_$ioa_switch (mplot_switch, substr (string (st), 1, llen));

	minute_time = time/60e6;
	wakeup_time = (minute_time + ct) * 60000000;

	call timer_manager_$alarm_wakeup (wakeup_time, "00"b, chname);

	if ^first_time then
	     call iox_$control (mplot_switch, "start", null (), code);

	call meter_util_$reset (unique);
	first_time = "0"b;

	return;

	

/* internal procedure */

fill_in:	proc (x, delx, token);

dcl (x, delx) float,
     token char (1) aligned;

dcl (i1, i2) fixed bin;


	     if ^short_lines then do;
		i1 = max (min (bin (x + .5e0, 17), 100), 0);
		i2 = max (min (bin (x + delx + .5e0, 17), 100), 0);
	     end;
	     else do;
		i1 = max (min (bin (x*.5e0 + .5e0, 17), 50), 0);
		i2 = max (min (bin ((x + delx)*.5e0 + .5e0, 17), 50), 0);
	     end;
	     do i = i1 to i2;
		substr (st.graph, i + 1, 1) = token;
	     end;

	     return;


	end fill_in;

	

% include tcm;

% include hc_lock;



     end;
