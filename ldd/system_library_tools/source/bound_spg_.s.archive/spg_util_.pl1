/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
/* Program to prepare metering information for SPG program.

   This program uses buffers set up by meter_util_ as called by spg
   itself. These buffers are refernecd via the unique index passed to
   this program through the reset entry.	

   Modified March 1981 by J. Bongiovanni to fix segfault time computation
   Modified November 1984 by M. Pandolf to include hc_lock.
*/
	

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */


spg_util_: proc (pzi, pnmpi, pmpi, pint, ptc, ppf, psf, puse_rz, px, string, length, chsw);

dcl  pzi float bin,					/* % zero idle time */
     pnmpi float bin,				/* % nmp idle time */
     pmpi float bin,				/* % mp idle time */
     pint float bin,				/* % interrupt time */
     ptc float bin,					/* % time in traffic controller */
     ppf float bin,					/* % page fault time */
     psf float bin,					/* % segfault time */
     puse_rz float bin,				/* % time in ring 0 */
     px float bin,					/* % paging interrupt time */
     string char (110),				/* returned output string */
     length fixed bin,				/* length of string */
     chsw fixed bin (1);				/* nonzero if output to be printed */

dcl  unique fixed bin int static;
dcl (sstp1, sstp2, tcdp1, tcdp2) ptr static;
dcl  time_rz fixed bin (52),
    (meter_time, n_pf, n_pf_sf,
     time_int_xd, time_pf, time_sf, time_tc) float;
dcl  spg_ring_0_info_ entry (fixed bin (52));
dcl  ioa_$rsnnl entry options (variable);

dcl 1 cf aligned,					/* config and tuning data */
    2 nproc fixed bin,				/* number of CPUs */
    2 nused fixed bin (18),				/* number of main memory pages used */
    2 min_eligible fixed bin (30),			/* min number of eligible processes */
    2 max_eligible fixed bin (30),			/* max number of eligible processes */
    2 working_set_addend fixed bin (18),		/* additive working set parameter */
    2 working_set_factor fixed bin (35, 18),		/* working set factor */
    2 tefirst fixed bin (30),				/* first eligible time */
    2 telast fixed bin (30),				/* last eligible time */
    2 timax fixed bin (35);				/* time in queue for lowest level */

dcl 1 iscf static aligned like cf;			/* static copy of config and tuning data */

dcl (divide, float, unspec) builtin;



/* check if configuration or tuning has changed */

	cf.nproc = tcdp2 -> tcm.ncpu;
	cf.nused = sstp2 -> sst.nused;
	cf.min_eligible = tcdp2 -> tcm.min_eligible;
	cf.max_eligible = tcdp2 -> tcm.max_eligible;
	cf.working_set_addend = tcdp2 -> tcm.working_set_addend;
	cf.working_set_factor = tcdp2 -> tcm.working_set_factor;
	cf.tefirst = tcdp2 -> tcm.tefirst;
	cf.telast = tcdp2 -> tcm.telast;
	cf.timax = tcdp2 -> tcm.timax;

	chsw = 0;
	if unspec (cf) ^= unspec (iscf) then do;	/* If data changed ... */
	     chsw = 1;				/* set switch. */

	     call ioa_$rsnnl (
	     "^7xcpu= ^d, pages= ^d, min_e= ^d, max_e= ^d, wsa= ^d, wsf= ^.2f, tefirst= ^5.2f, telast= ^5.2f, timax= ^5.2f.",
	     string, length,
	     cf.nproc, cf.nused,
	     divide (cf.min_eligible, 262144, 17, 0), divide (cf.max_eligible, 262144, 17, 0),
	     cf.working_set_addend, float (cf.working_set_factor, 27),
	     cf.tefirst * 1.e-6, cf.telast * 1.e-6, cf.timax * 1.e-6);

	     unspec (iscf) = unspec (cf);		/* Save new data. */
	end;



/* determine basic metering period */

	if tcdp2 -> tcm.processor_time = tcdp1 -> tcm.processor_time then do;
						/* probably no access to ring-0		*/
	     pzi, pnmpi, pmpi, pint, ptc, ppf, psf, puse_rz, px = 0.0;
	     return;
	end;
	
	     

	meter_time = (tcdp2 -> tcm.processor_time - tcdp1 -> tcm.processor_time) * 1.e-2;

/* compute idle times */

	pzi = (tcdp2 -> tcm.zero_idle - tcdp1 -> tcm.zero_idle) / meter_time;
	pnmpi = (tcdp2 -> tcm.nmp_idle - tcdp1 -> tcm.nmp_idle) / meter_time;
	pmpi = (tcdp2 -> tcm.mp_idle - tcdp1 -> tcm.mp_idle +
	     tcdp2 -> tcm.loading_idle - tcdp1 -> tcm.loading_idle) / meter_time;

/* compute info on interrupts, traffic controller, page faults, segment faults, and ring zero usage */

	time_int_xd = tcdp2 -> tcm.interrupt_time - tcdp1 -> tcm.interrupt_time;
	pint = time_int_xd / meter_time;
	px = 0.0;					/* No diferentiation for paging interrupts */

	time_tc = (tcdp2 -> tcm.getwork_time - tcdp1 -> tcm.getwork_time);
	ptc = time_tc / meter_time;

	time_pf = tcdp2 -> tcm.cpu_pf_time - tcdp1 -> tcm.cpu_pf_time;
	n_pf = tcdp2 -> tcm.cpu_pf_count - tcdp1 -> tcm.cpu_pf_count;
	n_pf_sf = sstp2 -> sst.total_sf_pf - sstp1 -> sst.total_sf_pf;
	ppf = time_pf / meter_time;

	time_sf = sstp2 -> sst.cpu_sf_time - sstp1 -> sst.cpu_sf_time;
	psf = time_sf / meter_time;

	call spg_ring_0_info_ (time_rz);
	puse_rz = time_rz / meter_time;

	return;



/* reset entry point */

reset:	entry (unique_a, sstp1_a, sstp2_a, tcdp1_a, tcdp2_a);

dcl  unique_a fixed bin,
    (sstp1_a, sstp2_a, tcdp1_a, tcdp2_a) ptr;

	unique = unique_a;				/* copy args */
	sstp1 = sstp1_a;
	sstp2 = sstp2_a;
	tcdp1 = tcdp1_a;
	tcdp2 = tcdp2_a;
	unspec (iscf) = "0"b;
	

	return;



% include tcm;

%include hc_lock;



% include sst;


     end;
