/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
/* SPG_FS_INFO_ - Get Bulk Store and Disk I/O Activity Meters.
	coded 9/24/76 by Noel I. Morris	*/

/* Modified May 1984 by T. Oke for adaptive disk optimization mods. */
/* Modified Oct 1984 by T. Oke to fix bugs of adaptive mods. */
/* Modified Dec 1984 by T. Oke to restrict peek size to limit of buffer. */

spg_fs_info_: procedure (pdio, dkio, vtio) options (separate_static);

	dcl     pdio		 fixed bin,	/* paging device I/O count */
	        dkio		 fixed bin,	/* disk page I/O count */
	        vtio		 fixed bin;	/* VTOC I/O count */

	dcl     code		 fixed bin (35),	/* error code */
	        (cur_dkio, cur_vtio)	 fixed bin,	/* current values */
	        dev		 fixed bin,	/* device in disktab */
	        type		 fixed bin,	/* IO type in devtab */
	        sx		 fixed bin,	/* disk subsystem index */
	        r0dp		 ptr;		/* pointer to ring zero disk database */

	dcl     buffer		 (3000) fixed bin;	/* data buffer */

	dcl     dsp		 (31) ptr static init ((31) null ()), /* pointers to disk database */
	        subsys_size		 (32) fixed bin (18) static, /* size of each sub-system */
	        subsystems		 fixed bin static init (0), /* number of disk subsystems */
	        (prev_dkio, prev_vtio) fixed bin static init (0); /* previous values */

	dcl     ring0_get_$segptr	 entry (char (*), char (*), ptr, fixed bin (35)),
	        ring_zero_peek_	 entry (ptr, ptr, fixed bin (18), fixed bin (35));

	dcl     (addr, hbound, lbound, null, ptr, size) builtin;

	if subsystems = 0 then do;			/* Get pointer to disk_seg. */
		call ring0_get_$segptr ("", "disk_seg", r0dp, code);
		if code = 0 then do;
			disksp = addr (buffer);
			call ring_zero_peek_ (r0dp, disksp, size (disk_data), code);
			if code = 0 then do;
				subsystems = disk_data.subsystems;
				do sx = 1 to subsystems;
				     dsp (sx) = ptr (r0dp, disk_data.offset (sx));
				     if sx ^= disk_data.subsystems then
					subsys_size (sx) = bin (disk_data.offset (sx + 1)) -
					     bin (disk_data.offset (sx));
				     else subsys_size (sx) = bin (disk_data.free_offset) -
					     bin (disk_data.offset (sx));
				end;
			     end;
		     end;
	     end;

	pdio, dkio, vtio = 0;
	cur_dkio, cur_vtio = 0;
	diskp = addr (buffer);
	do sx = 1 to subsystems;			/* Iterate through disk subsystems. */
	     call ring_zero_peek_ (dsp (sx), diskp, min (hbound (buffer, 1), subsys_size (sx)), code);
	     if code ^= 0 then return;
	     do dev = lbound (disktab.devtab, 1) to hbound (disktab.devtab, 1);
		dp = addr (disktab.devtab (dev));
		cur_dkio = cur_dkio + devtab.opt_info (PAGE_READ).seek_count +
		     devtab.opt_info (PAGE_WRITE).seek_count;
		cur_vtio = cur_vtio + devtab.opt_info (VTOC_READ).seek_count +
		     devtab.opt_info (VTOC_WRITE).seek_count;
	     end;
	end;
	dkio = cur_dkio - prev_dkio;
	prev_dkio = cur_dkio;
	vtio = cur_vtio - prev_vtio;
	prev_vtio = cur_vtio;

	return;
%page;
%include dskdcl;

     end;
