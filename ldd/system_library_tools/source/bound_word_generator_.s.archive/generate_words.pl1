/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
generate_words: gw: procedure;
dcl  cu_$arg_ptr entry (fixed, ptr, fixed, fixed bin (35));
dcl  cu_$arg_ptr_rel entry (fixed bin, ptr, fixed bin, fixed bin (35), ptr);
dcl  cu_$arg_list_ptr entry (ptr);
dcl  argno fixed;
dcl  new_line char (1) init ("
");
dcl  error_table_$badopt external fixed bin (35);
dcl  arglen fixed bin;
dcl  generate_word_ entry (char (*), char (*), fixed bin, fixed bin);
dcl  generate_word_$init_seed entry (fixed bin (35));
dcl  ios_$write_ptr entry (ptr, fixed bin, fixed bin);
dcl  argptr ptr;
dcl  hyphenate bit (1) init ("0"b);
dcl  cv_dec_check_ entry (char (*), fixed bin) returns (fixed bin (35));
dcl  maximum_length fixed bin init (-1);		/* set to maximum length of words */
dcl  minimum_length fixed bin init (-1);		/* minimum length of words */
dcl  seed_value fixed bin (35) init (-1);		/* value of seed typed by user */
dcl  com_err_ entry options (variable);
dcl  i fixed, code fixed bin (35) init (0);
dcl  unique_bits_ entry returns (fixed bin (70));
dcl  result fixed bin;
dcl  nwords fixed init (0);
dcl  max_words fixed init (0);
dcl  arg char (arglen) based (argptr) unaligned;
dcl  maximum_hyphenated fixed bin;
dcl  area char (56);				/* where output line goes */
dcl  output_line_length fixed bin;			/* length of the output line in area */
dcl  unhyphenated_word char (maximum_length) based (addr (area));
dcl  hyphenated_word char (maximum_hyphenated) based (hph_ptr);
dcl  hph_ptr ptr;					/* pointer to position in area where hyphenated word goes */

dcl  arglistptr ptr;

	call cu_$arg_list_ptr (arglistptr);
	do argno = 1 by 1 while (code = 0);
	     call cu_$arg_ptr (argno, argptr, arglen, code);
	     if code = 0
	     then
		if arg = "-hph" | arg = "-hyphenate"
		then hyphenate = "1"b;
		else
		if arg = "-max"
		then maximum_length = value ("maximum");
		else
		if arg = "-min"
		then minimum_length = value ("minimum");
		else
		if arg = "-length" | arg = "-ln"
		then do;
		     maximum_length = value ("length");
		     minimum_length = maximum_length;
		end;
		else
		if arg = "-seed" then do;
		     seed_value = value ("seed");
		     call generate_word_$init_seed (seed_value);
		end;
		else do;
		     nwords = cv_dec_check_ (arg, result); /* look for number of words */
		     if result = 0 & nwords > 0
		     then max_words = nwords;
		     else call ugly (error_table_$badopt, arg);
		end;
	end;

/* Below we decide whether minimum, maximum, both, or none have been specified,
   and set their default values accordingly. */

	if nwords = 0 then max_words = 1;
	if minimum_length = -1
	then if maximum_length = -1
	     then do;
		minimum_length = 6;
		maximum_length = 8;
	     end;
	     else minimum_length = 4;
	else if maximum_length = -1
	then maximum_length = 20;
	if minimum_length < 4 | minimum_length > maximum_length |
	maximum_length > 20 then
	     call ugly (0, "Bad value of lengths: 3<min<max<21 required.");

	maximum_hyphenated = maximum_length + 2*maximum_length/3; /* maximum length of hyphenated word */

	hph_ptr = addr (substr (area, maximum_length + 2)); /* where hyphenated word is put */
						/* even if we're not printing it out, it needs a place to go */
	if hyphenate				/* for efficiency, put newline character in expected place in output string */
	then do;
	     substr (unhyphenated_word, maximum_length + 1, 1) = " ";
	     substr (hyphenated_word, maximum_hyphenated + 1, 1) = new_line;
	     output_line_length = maximum_length + maximum_hyphenated + 2;
	end;
	else do;
	     substr (unhyphenated_word, maximum_length + 1, 1) = new_line;
	     output_line_length = maximum_length + 1;
	end;

/* generate max_words and write them all out */

	do i = 1 to max_words;
	     call generate_word_ (unhyphenated_word, hyphenated_word, minimum_length, maximum_length);
	     call ios_$write_ptr (addr (area), 0, output_line_length);
	end;


ugly:	procedure (codex, message);
dcl (code, codex) fixed bin (35);
dcl  message char (*);
	     call com_err_ (codex, "generate_words", message);
	     goto return;
	end;

value:	procedure (name) returns (fixed bin (35));
dcl  number fixed bin (35);
dcl  name char (*);
	     argno = argno + 1;
	     call cu_$arg_ptr_rel (argno, argptr, arglen, code, arglistptr);
	     if code ^= 0 then call ugly (code, "Value of " || name);
	     number = cv_dec_check_ (arg, result);
	     if result ^= 0 | number < 0
	     then call ugly (0, "Bad " || name || " value. " || arg);
	     return (number);
	end;

return:
     end;
