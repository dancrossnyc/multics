/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
/* This is the standard random unit generating routine for random_word_.
   It is specified in the call to random_word_ by generate_word_.
   It does not reference the digram table, but assumes that it contains
   34 units in a certain order.  This routine attempts to return
   unit indexes with a distribution approaching that of the distribution
   of the 34 units in English.  In order to do this, a random number
   (supposedly uniformly distributed as returned from encipher_)
   is used to do a table lookup into an array containing unit indexes.
   There are 211 entries in the array for the random_unit_ entry point.
   The probablity of a particular unit being generated is equal to the
   fraction of those 211 entries that contain that unit index.  For example,
   the letter "a" is unit number 1.  Since unit index 1 appears 10 times
   in the array, the probability of selecting an "a" is 10/211.

   Changes may be made to the digram table without affect to this procedure
   providing the letter-to-number correspondence of the units does
   not change.  Likewise, the distribution of the 34 units may be altered
   (and the array size may be changed) in this procedure without affecting
   the digram table or any other programs using the random_word_ subroutine.
*/

random_unit_: procedure (number);
dcl  numbers (0:210) fixed static init ((10)1, (8)2, (12)3, (12)4, (12)5, (8)6,
    (8)7, (6)8, (10)9, (8)10, (8)11, (6)12, (6)13, (10)14, (10)15, (6)16,
    (10)17, (8)18, (10)19, (6)20, (8)21, (8)22, 23, (8)24, 25,
     26, 27, 28, 29, (2)30, (2)31, 32, 33, 34);
dcl  vowel_numbers (0:11) fixed static init (1, 1, 5, 5, 5, 9, 9, 15, 15, 20, 20, 24);
dcl  encipher_ entry (fixed bin (71), (*) fixed bin (71), (*) fixed bin (71), fixed bin);
dcl  random_unit_stat_$seed (1) external fixed bin (71);
dcl  number fixed bin;

	call encipher_ (random_unit_stat_$seed (1), random_unit_stat_$seed, random_unit_stat_$seed, 1);
	number = numbers (mod (abs (fixed (random_unit_stat_$seed (1), 17)), 211));
	return;
random_vowel: entry (number);
	call encipher_ (random_unit_stat_$seed (1), random_unit_stat_$seed, random_unit_stat_$seed, 1);
	number = vowel_numbers (mod (abs (fixed (random_unit_stat_$seed (1), 17)), 12));
	return;

/* This entry returns the probabilities of the 34 units in two arrays.
   The first array contains the probabilities of all units assuming
   the random_unit_ entry was called.  The second array contains the
   probabilities of all units assuming random_vowel was called.
   Of course, there will be a lot of zeros in this second array, since
   most units aren't vowels.

   This entry is used by hyphenate_$probability to find out what the
   probabilities of the different units are.  Hyphenate_ does not know
   how many units there are or what their probabilities are.  It also
   makes no assumption about the unit index - to - letter correspondence
   of the units.  Thus this program can be replaced without changing
   anything in hyphenate_.
*/

probabilities: entry (unit_probs, vowel_probs);
dcl  unit_probs (34) float bin;
dcl  vowel_probs (34) float bin;
dcl  i fixed bin;

	unit_probs, vowel_probs = 0;

/* These probabilities are calculated merely by adding up the number of
   occurances of each of the unit indexes in the numbers array and the
   vowel_numbers array. */

	do i = 0 to 210;
	     unit_probs (numbers (i)) = unit_probs (numbers (i)) + 1;
	     if i < 12
	     then vowel_probs (vowel_numbers (i)) = vowel_probs (vowel_numbers (i)) + 1;
	end;

	unit_probs = unit_probs/211;			/* Normalize these values so they add up to 1.0 */
	vowel_probs = vowel_probs/12;
	return;
     end;
