/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
/* This command compiles a source segment containing digrams for
   the word generator and puts the compiled output in a segment
   named "digrams".

   Usage: digram_table_compiler pathname -option-

   Where: option may be one of the following:

   -ls, -list  Lists the output on the terminal after compilation.
   -ls, n, -list n  Lists as above, but in n columns.

   Usage: print_digram_table -n-

   n    Lists the output in n columns.  Allow 14 positions for each column.
   This call assuumes that the digrams segment already exists
   and has been compiled correctly.
*/

digram_table_compiler: procedure;
dcl (start, size) fixed bin;
dcl  nrows fixed bin;
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  code fixed bin (35);
dcl  codex fixed bin;
dcl  cv_dec_check_ entry (char (*), fixed bin) returns (fixed bin (35));
dcl  hcs_$truncate_seg entry (ptr, fixed bin, fixed bin (35));
dcl  hcs_$terminate_name entry (char (*), fixed bin (35));
dcl  com_err_ entry options (variable);
dcl (error_table_$noarg, error_table_$badopt) external fixed bin (35);
dcl  get_line_length_$switch entry (ptr, fixed bin (35)) returns (fixed bin (17));
dcl  read_table_ entry (ptr, fixed bin (24)) returns (bit (1));
dcl  compile bit (1);
dcl  who char (25) varying;
dcl  list bit (1);
dcl  segptr ptr static init (null);
dcl  dirname char (168) aligned;
dcl  ename char (32) aligned;
dcl  ename_length fixed bin;
dcl  null builtin;
dcl  arg char (length) based (pp);
dcl  hcs_$initiate_count entry (char (*), char (*), char (*),
     fixed bin (24), fixed bin (2), ptr, fixed bin (35));
dcl  hcs_$terminate_noname entry (ptr, fixed bin (35));
dcl  expand_path_ entry (ptr, fixed bin, ptr, ptr, fixed bin (35));
dcl  bc fixed bin (24);
dcl  i fixed;
%include digram_structure;
dcl  pp ptr;
dcl (j, k) fixed;
dcl  max fixed;
dcl  length fixed bin;
dcl  ioa_$nnl entry options (variable);
dcl  argno fixed bin;
dcl (diff, last, ncolumns init (0), remainder, middle, first) fixed;
dcl  ioa_ entry options (variable);

	who = "digram_table_compiler";
	goto start1;

dtc:	entry;
	who = "dtc";

start1:

	compile = "1"b;				/* set switch to compile */
	call cu_$arg_ptr (1, pp, length, code);
	argno = 1;
	if code ^= 0 then goto argerr;
	call expand_path_ (pp, length, addr (dirname), addr (ename), code);
	if code ^= 0 then goto argerr;
	ename_length = index (ename, " ");
	if ename_length = 0
	then ename_length = 32;
	else ename_length = ename_length - 1;
	if ename_length >= 4
	then
	     if substr (ename, ename_length - 3, 4) = ".dtc"
	     then ename_length = ename_length - 4;

	argno = 2;
	call cu_$arg_ptr (2, pp, length, code);		/* get option */
	if code ^= 0
	then list = "0"b;				/* no listing desired */
	else
	if arg = "-ls" | arg = "-list"
	then do;
	     list = "1"b;
	     argno = 3;
	end;
	else do;
	     code = error_table_$badopt;
	     goto argerr;
	end;
	goto get_ncolumns;

pdt:	entry;
	who = "pdt";
	goto start2;

print_digram_table: entry;
	who = "print_digram_table";

start2:

	list = "1"b;
	argno = 1;
	compile = "0"b;

get_ncolumns:
	call cu_$arg_ptr (argno, pp, length, code);
	if code ^= 0
	then do;
	     ncolumns = get_line_length_$switch (null, code);
	     if code ^= 0 then do;
		code = 0;
		ncolumns = 132;
	     end;
	     ncolumns = divide (ncolumns, 14, 17, 0);
	end;
	else do;
	     ncolumns = cv_dec_check_ (arg, codex);
	     if codex ^= 0
	     then do;
		code = error_table_$badopt;
		goto argerr;
	     end;
	end;
	


	if ^compile then goto dont_compile;

/* now initiate the source segment */

	call hcs_$initiate_count ((dirname), substr (ename, 1, ename_length) ||
	     ".dtc", "", bc, 0, segptr, code);
	if segptr = null
	then do;
	     call com_err_ (code, who, "^a>^a.dtc", dirname, substr (ename, 1, ename_length));
	     return;
	end;

/* compile the segment */

	call hcs_$terminate_name ("digrams", code);	/* terminate previous copies */
	if read_table_ (segptr, bc)			/* any error? */
	then
	     do;
	     call com_err_ (0, who, "Error in source segment.");
	     return;
	end;
	


/* terminate the source now */
	


	call hcs_$terminate_noname (segptr, code);
	if ^list then return;			/* if no listing wanted, leave now */
	


dont_compile:
	if compile then call ioa_ ("^/^/^/^/");
	nrows = (n_units-1)/ncolumns + 1;		/* This is the first reference to the digrams segment */
	if ncolumns ^= 0
	then
	     do;
	     do i = 1 to nrows;
		do j = i by nrows while (j <= n_units);
		     call ioa_$nnl ("    ^2d ^2a ^1b^1b^1b^1b", j, letters (j), rules (j).not_begin_syllable,
			rules (j).no_final_split, rules (j).vowel, rules (j).alternate_vowel);
		end;
		call ioa_ ("");
	     end;
	     call ioa_ ("");
	     do start = 1, ncolumns* (59-nrows) + 1 by ncolumns*60
		     while (start<n_units**2);
		if start = 1
		then size = min (n_units*n_units, ncolumns* (59-nrows));
		else size = min (n_units*n_units-start+1, ncolumns*60);
		diff = size/ncolumns;
		remainder = size - diff*ncolumns;
		last = (size + ncolumns - 1)/ncolumns + start - 1;
		do first = start to last;
		     middle = first + remainder* (diff + 1);
		     if first = last & middle ^= first
		     then max = middle - (diff+1);
		     else max = middle + (ncolumns - remainder - 1)*diff;
		     do i = first to middle by diff+1 while (i <= max), middle+diff to max by diff;
			j = (i-1)/n_units + 1;
			k = i - (j-1)*n_units;
			call ioa_$nnl ("   ^1b^1b^1b" || charac () || characc (j) || letters (k) || chara () || "^1b^1b",
			     digrams (j, k).begin, digrams (j, k).not_begin,
			     digrams (j, k).break, digrams (j, k).end, digrams (j, k).not_end);
		     end;
		     call ioa_ ("");
		end;
		if start = 1
		then call ioa_$nnl (copy ("^/", 66-first-nrows));
		else call ioa_$nnl (copy ("^/", start+66-first));
	     end;
	end;
	return;

charac:	proc returns (char (1));
	     if digrams (j, k).prefix then return ("-"); else return (" ");
	end;

chara:	proc returns (char (1));
	     if digrams (j, k).illegal_pair
	     then return ("+");
	     else
	     if digrams (j, k).suffix
	     then return ("-");
	     else return (" ");
	end;

characc:	proc (c) returns (char (2));
dcl  c fixed;
	     if letters_split (c).second = " "
	     then return (" " || letters_split (c).first);
	     else return (letters (c));
	end;

argerr:
	if code = error_table_$noarg
	then call com_err_ (code, who);
	else
	do;
	     call cu_$arg_ptr (argno, pp, length, 0);
	     call com_err_ (code, who, arg);
	end;

     end;
