/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: style4,delnl,insnl,^ifthenstmt */

/* format: off */

/* I/O daemon handler for messages from the answering service concerning the channels attached to the daemon */

/* Created:  1975 by J. C. Whitmore */
/* Modified: July 1978 by J. C. Whitmore to convert to iodd_msg_ subroutine */
/* Modified: November 1978 by J. C. Whitmore to support attach_type 4: variable line type */
/* Modified: March 1979 by J. C. Whitmore for minor message fixes */
/* Modified: 18 December 1981 by G. Palter to treat any hangup as requiring the driver to be reinitialized as the only
      channels for which this procedure is defined to handle wakeups are of immediate concern to the driver; in
      particular, when the channel is attached via a dial preaccess request, it isn't possible to check its name against
      any values in iodd_static */

/****^  HISTORY COMMENTS:
  1) change(88-08-19,Brunelle), approve(88-08-19,MCR7911),
     audit(88-10-19,Wallman), install(88-11-08,MR12.2-1199):
     Upgraded to version 5 iod tables.
  2) change(88-11-03,Brunelle), approve(88-11-03,MCR7911),
     audit(88-11-08,Wallman), install(88-11-08,MR12.2-1199):
     Changed to allow "y" & "n" for yes/no answers.
                                                   END HISTORY COMMENTS */

/* format: on */


iodd_hangup_:
     procedure (arg_p);

dcl  arg_p ptr;

dcl  code fixed bin (35);
dcl  dev_name char (32);
dcl  dim_name char (32);
dcl  answer char (80) aligned;
dcl  master_state bit (1);				/* state of the master hold bit */
dcl  nelt fixed bin;
dcl  n_dialed fixed bin;

dcl  iodd_stat_p pointer external static;		/* external static pointer to iodd_static */

dcl  1 ev_info based (arg_p),
       2 channel fixed bin (71),
       2 message fixed bin (71),
       2 sender bit (36),				/* process id sending the wakeup */
       2 origin bit (36),				/* ring and device data..don't care */
       2 data_p ptr;				/* argument from call chan creation */

dcl  io_stat bit (72) aligned;			/* ios status code */

dcl  1 status_flags aligned,
       2 dialed_up bit (1) unal,
       2 hung_up bit (1) unal,
       2 control bit (1) unal,
       2 pad (33) bit (1) unal;

dcl  convert_dial_message_
	entry (fixed bin (71), char (*), char (*), fixed bin, 1 aligned like status_flags, fixed bin (35));
dcl  new_proc entry ();
dcl  iodd_msg_ entry options (variable);
dcl  ios_$attach entry (char (*), char (*), char (*), char (*), bit (72) aligned);
dcl  ios_$detach entry (char (*) aligned, char (*) aligned, char (*) aligned, bit (72) aligned);
dcl  iox_$get_line entry (ptr, ptr, fixed bin, fixed bin, fixed bin (35));
dcl  iox_$control entry (ptr, char (*), ptr, fixed bin (35));
dcl  iox_$close entry (ptr, fixed bin (35));
dcl  iox_$detach_iocb entry (ptr, fixed bin (35));

dcl  re_init condition;

dcl  (addr, null, substr) builtin;

dcl  master fixed bin int static options (constant) init (1);
dcl  stars char (40) int static options (constant) init ((40)"*");
dcl  bells char (40) int static options (constant) init ((40)"");
						/* 40 bells 007 octal */

/**/

	stat_p = iodd_stat_p;			/* get a pointer to iodd_static */

	master_state = iodd_static.master_hold;		/* save the state */
	iodd_static.master_hold = "1"b;		/* default to master hold set */

	call iox_$control (iodd_static.master_in, "resetread", null, code);
						/* unprocessed input is invalid */
	call iox_$control (iodd_static.master_in, "start", null, code);
						/* be sure not to lose a wakeup */

	call convert_dial_message_ (ev_info.message, dev_name, dim_name, n_dialed, status_flags, code);

	if code = 0 then do;

	     if status_flags.hung_up & dev_name = iodd_static.ctl_device then do;

/* The control terminal has hungup: ask the central site operator if he wishes to continue */

		if ^iodd_static.ctl_term.attached then do;
						/* ignore if control terminal not in use */
		     iodd_static.master_hold = master_state;
		     return;
		end;

		call ios_$attach ("error_output", "syn", "error_i/o", "", io_stat);
		call ios_$detach (iodd_static.ctl_io, "", "", io_stat);
		call ios_$detach ("broadcast_errors", iodd_static.ctl_output, "", io_stat);
		call ios_$detach (iodd_static.ctl_input, "", "", io_stat);
		call ios_$detach (iodd_static.ctl_output, "", "", io_stat);
		iodd_static.ctl_term.attached = "0"b;	/* control terminal is now detached ... */
		iodd_static.ctl_ev_chan = 0;

		if iodd_static.ctl_output = iodd_static.slave_output then do;
		     iodd_static.slave.active = "0"b;	/* control terminal was the slave terminal also */
		     iodd_static.allow_quits = "0"b;
		     iodd_static.slave.accept_input = "0"b;
		end;

		call iodd_msg_ (2, master, 0, "", "^/^a^/Control terminal hangup received.^/^a^a", stars, bells,
		     stars);

		call iodd_msg_ (1, master, 0, "", "^/Do you want to continue without control terminal?^/");
read:
		answer = "";			/* clear the string of crud */
		call iox_$get_line (iodd_static.master_in, addr (answer), 80, nelt, code);
		if code ^= 0
		then call new_proc ();		/* this is tooooo..bad to correct */
		call iox_$control (iodd_static.master_in, "start", null, code);
						/* send wakeup after each read */
		if substr (answer, 1, 3) = "yes" | substr (answer, 1, 1) = "y" then do;
		     iodd_static.forms = "0"b;	/* can't simulate forms */
		     iodd_static.master_hold = master_state;
		     return;			/* restore the state as we go on */
		end;
		if substr (answer, 1, 2) = "no" | substr (answer, 1, 1) = "n" then do;
		     signal re_init;		/* reinitialize to get the control terminal back */
		end;
		call iodd_msg_ (1, master, 0, "", "Please answer ""yes"" or ""no"".");
		call iox_$control (iodd_static.master_in, "resetread", null, code);
		go to read;
	     end;


	     else if status_flags.hung_up then do;

/* A channel other than the control terminal has hungup: assume it is the device's channel and reinitialize the driver */

		call iodd_msg_ (1, master, 0, "", "^a^/Hangup received for device ""^a"" on channel ""^a"".^/^a^a",
		     stars, iodd_static.major_device, dev_name, bells, stars);

		call ios_$attach ("error_output", "syn", "error_i/o", "", io_stat);

		if iodd_static.attach_type = 4 then do; /* variable line: detach it now as reinitialization won't */
		     call iox_$close (iodd_static.slave_out, code);
		     call iox_$detach_iocb (iodd_static.slave_out, code);
		     iodd_static.slave_out, iodd_static.slave_in = null;
		     iodd_static.slave.active = "0"b;	/* slave must be re-defined */
		     iodd_static.slave.allow_quits = "0"b;
		     iodd_static.slave.accept_input = "0"b;
		     iodd_static.slave.print_errors = "0"b;
		     iodd_static.slave.log_msg = "0"b;	/* must ask for log messages */
		     iodd_static.slave.echo_cmd = "0"b; /* don't echo cmds by default */
		     iodd_static.slave.priv1 = "0"b;	/* driver module defined privleges */
		     iodd_static.slave.priv2 = "0"b;	/* " */
		     iodd_static.slave.priv3 = "0"b;	/* " */
		     iodd_static.slave_output, iodd_static.slave_input = "Undefined_Stream";
		     iodd_static.attach_name = "";	/* no longer defined */
		end;

		if ^iodd_static.re_init_in_progress
		then signal re_init;
		return;
	     end;


	     else if status_flags.dialed_up then do;

/* A channel issued a dial request: ignore it */

		call iodd_msg_ (1, master, 0, "iodd_hangup_", "Dial received from device ""^a"".", dev_name);
		iodd_static.master_hold = master_state; /* not fatal, restore state and return */
		return;
	     end;


	     else do;
		call iodd_msg_ (1, master, 0, "iodd_hangup_",
		     "Dial control signal received. There are ^d dialed devices.", n_dialed);
		iodd_static.master_hold = master_state; /* this is also non-fatal */
		return;
	     end;
	end;

	call iodd_msg_ (2, master, code, "iodd_hangup_", "Unable to convert message from dial control.");

	return;
%page;
%include iod_tables_hdr;
%page;
%include iodd_static;

     end iodd_hangup_;
