/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

iodd_signal_handler_: proc;

/* Unclaimed signal handler for I/O Daemon driver process. In "test"
   mode it will invoke the "debug" command; otherwise it will attempt
   to move on to whatever is to be done next.
*/

/* Coded September 1973 by Robert S. Coren */
/* Modified January 1975 by J. C. Whitmore to work with iodd_ */
/* Modified November 1975 by M. A. Braida to special case seg_fault_error on user's segment */
/* Modified Sept 1977 by J. C. Whitmore to not terminate driver status segs (now done by iodd_) */
/* Modified by J. C. Whitmore, 11/78, to use iodd_msg_ instead of ioa_ for messages */
/* Modified by J. C. Whitmore, 3/79, to correct a misplaced end statement */
/* Modified BIM 84-01-06 for default_restart, quiet_restart */
/* Modified by C. Marker, 02/23/85, to use version 5 message segments */


/****^  HISTORY COMMENTS:
  1) change(88-08-19,Brunelle), approve(88-08-19,MCR7911),
     audit(88-10-19,Wallman), install(88-10-28,MR12.2-1199):
     Upgraded to version 5 iod tables.
                                                   END HISTORY COMMENTS */


	dcl     bel_string		 char (40) aligned int static;
	dcl     stars		 char (50) aligned int static options (constant) init ((5)"**********");
	dcl     condition		 char (32);	/* fixed length string for condition name */
	dcl     io_stat		 bit (72) aligned;
	dcl     ec		 fixed bin (35);	/* error code */

	dcl     ios_$attach		 entry (char (*) aligned, char (*), char (*), char (*), bit (72) aligned);
	dcl     ios_$order		 entry (char (*), char (*), ptr, bit (72) aligned);
	dcl     iodd_msg_		 entry options (variable);
	dcl     new_proc		 entry ();
	dcl     iodd_quit_handler_$command_level entry ();
	dcl     debug		 entry;
	dcl     timer_manager_$sleep	 entry (fixed bin (71), bit (2) aligned);
	dcl     condition_interpreter_ entry (ptr, ptr, fixed bin, fixed bin, ptr, char (*), ptr, ptr);
	dcl     find_condition_info_	 entry (ptr, ptr, fixed bin (35));
	dcl     continue_to_signal_	 entry (fixed bin (35));
	dcl     get_system_free_area_	 entry (ptr);

	dcl     areap		 ptr;
	dcl     msgp		 ptr;
	dcl     msg_len		 fixed bin;
	dcl     err_message		 char (msg_len) based (msgp);
	dcl     sys_area		 area (262144) based (areap);

	dcl     id		 char (24) int static options (constant) init ("iodd_signal_handler_");
	dcl     master		 fixed bin int static options (constant) init (1);
	dcl     both		 fixed bin int static options (constant) init (0);
	dcl     error		 fixed bin int static options (constant) init (2);
	dcl     normal		 fixed bin int static options (constant) init (1);

	dcl     recursion_count	 fixed bin int static init (0); /* depth of signals */

	dcl     (null, fixed, addr, baseno) builtin;

	dcl     (resume, any_other, cleanup, daemon_again, daemon_new_device) condition;

%page;

	dcl     1 local_condition_info aligned like condition_info;

/*  */
	on cleanup call ios_$order ("user_i/o", "start", null, io_stat);

	local_condition_info.version = condition_info_version_1; /* version of the condition_info structure */

	call find_condition_info_ (null (), addr (local_condition_info), ec); /* get condition data */

	condition = local_condition_info.condition_name;	/* change to fixed string for the compiler */

	if condition = "alrm" then do;		/* pass these on...quits will never come here */
pass_on:		call continue_to_signal_ (ec);	/* pass the condition on to someone else */
		return;
	     end;
	condition_info_header_ptr = local_condition_info.info_ptr;
	if condition = "cput" then goto pass_on;
	if condition = "finish" then goto pass_on;
	if iodd_static.test_entry
	then if condition = "mme2" then go to pass_on;	/* to be able to use debug */
	     else if condition = "program_interrupt" then go to pass_on;
	if condition = "command_error" then return;
	if condition = "command_question" then return;
	if condition_info_header_ptr ^= null
	then if condition_info_header.quiet_restart |
		condition_info_header.default_restart
	     then go to pass_on;

	if condition = "daemon_new_device" then go to proc_dies; /* this procedure should never see this */

/*	that's all for the benign system conditions, time to be careful */

	if ^iodd_static.recursion_flag then recursion_count = 0; /* coming from known state? */

	iodd_static.recursion_flag = "1"b;		/* start watching for trouble */

	recursion_count = recursion_count + 1;		/* increment the counter */

	if recursion_count > 4 then call new_proc;	/* maximum trouble, calls for drastic action */

	if recursion_count = 3 then
	     call iodd_msg_ (error, both, 0, id, "recursive errors, driver may new_proc.");

	if condition = "no_coord" then /* for this condition.... */
	     if iodd_static.no_coord_flag then do;	/* be sure process is ready to accept */

/*		This condition is signalled if the coordinator process has gone away. We will attempt */
/*		to reinitialize, but not until the coordinator process id recorded in iodc_data */
/*		has changed (signifying the advent of a new coordinator). */

		     iodd_static.re_init_in_progress = "1"b; /* let others know what happened */

		     call iodd_msg_ (error, both, 0, id, """no_coord"" condition signalled.");

		     go to iodd_static.no_coord_label;	/* invoke all the cleanup handlers */

		end;

	if condition = "re_init" | condition = "resume" then do;
		on any_other signal daemon_new_device;

/*		This condition is signalled when the driver is in trouble.  We will attempt */
/*		to reinitialize the device specified by the operator without asking */
/*		him to input the device again. */

		iodd_static.re_init_in_progress = "1"b;
		call iodd_msg_ (error, both, 0, id, "Driver starting reinitialization");

		go to iodd_static.re_init_label;	/* first catch the cleanup handlers */
	     end;


	if condition = "io_error" then do;		/* in this case we have to be careful about */
						/* writing on the slave stream to avoid another error */
						/* the control terminal probably got hung up */
		call timer_manager_$sleep (5, "11"b);	/* give the hangup handler a chance */

		iodd_static.master_hold = "1"b;	/* force operator attention */

		if recursion_count > 3 then go to proc_dies; /* multiple times is too much */
		call ios_$attach ("error_output", "syn", "error_i/o", "", io_stat); /* only talk to the master */
		if iodd_static.slave.active | iodd_static.ctl_term.attached then do;
			iodd_static.forms = "0"b;	/* can't simulate forms now */
			iodd_static.slave.allow_quits = "0"b;
			iodd_static.slave.accept_input = "0"b;
			iodd_static.slave.print_errors = "0"b;

			call iodd_msg_ (error, both, 0, id,
			     "^/^a^/Condition ""io_error"" signalled.  Slave functions have been terminated.^/^a",
			     stars, stars);
		     end;

		if request_in_progress then do;	/* maybe we can continue */
			call iodd_msg_ (normal, both, 0, "", "Current request will be restarted.");
			signal daemon_again;	/* restart the request */
		     end;
	     end;

	if condition = "seg_fault_error" then do;	/* find out if current segment caused the condition */

		mcp = local_condition_info.mc_ptr;	/* set machine condition ptr */
		scup = addr (mc.scu);		/* find segment number in machine condition */
		if fixed (baseno (iodd_static.segptr), 17, 0) = fixed (scu.tpr.tsr, 17, 0) then
		     /* if the segment numbers are the same ... */
		     go to driver_default;		/* skip the long error message */
	     end;

	call get_system_free_area_ (areap);

	msgp = null;
	call condition_interpreter_ (areap, msgp, msg_len, 3, local_condition_info.mc_ptr, condition, local_condition_info.wc_ptr, local_condition_info.info_ptr);

	if msgp ^= null then do;
		call iodd_msg_ (error, both, 0, id, err_message);
		free msgp -> err_message in (sys_area);
	     end;
	else call iodd_msg_ (error, both, 0, id, "^a condition signalled.", condition);

	if condition = "stack"
	then go to proc_dies;			/* we will not attempt to deal with this */

	on resume go to continue;			/* to get around CP in test mode */

	if iodd_static.test_entry
	then do;					/* give programmer chance to find out what happened */
		if ^iodd_static.initialized then do;	/* be careful about blocking before init is done */
			call iodd_msg_ (error, master, 0, id, "Warning - initialization is not complete");
						/* some commands won't work */
			call iodd_msg_ (normal, master, 0, "", "Calling debug");
			call debug;		/* this should do the trick */
		     end;
		else call iodd_quit_handler_$command_level (); /* give programmer a shot */
		return;				/* assume problem was fixed, so start */
	     end;

continue:

	revert resume;				/* drop the handler...we may signal it */
	if recursion_count > 1 then
	     call iodd_msg_ (error, both, 0, id,
		"^a^/Condition ^a signalled while handling unclaimed signal.^/^a^a",
		stars, condition, stars, bel_string);

	if recursion_count > 2 then do;		/* after two conditions, give up */
proc_dies:
		on any_other call new_proc;		/* dont take chances, we are in trouble */

		call iodd_msg_ (error, both, 0, id, "New process will be created.");
		call new_proc ();
	     end;

driver_default:

	if iodd_static.initialized then do;		/* is there enough data to do more? */

		call driver_default_handler (addr (local_condition_info)); /* see if the driver module needs the condition */
						/* the driver module is responsible for cleaning up */
						/* any requests in progress */
		signal resume;			/* if we return, pass back to iodd_listen_ */
	     end;
	else do;					/* no data, tell someone and commit suicide */
		call iodd_msg_ (error, both, 0, id, "^a^/Condition ^a occured before full initialization.",
		     stars, condition);
		signal daemon_new_device;
	     end;
	go to proc_dies;				/* this should never happen, but .... */

init: entry (a_ptr);

	dcl     a_ptr		 ptr;

	stat_p = a_ptr;
	if iodd_static.test_entry then bel_string = "";	/* null for testing */
	else bel_string = (40)"";			/* 40 bells (007(8)) */

	return;
%page; %include condition_info;
%page; %include condition_info_header;
%page; %include driver_ptr_list;
%page; %include driver_status;
%page; %include iod_event_message;
%page; %include iod_tables_hdr;
%page; %include iodd_static;
%page; %include mc;
%page; %include mseg_message_info;
%page; %include request_descriptor;

     end iodd_signal_handler_;
