/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* Constructs a command line for execution by the I/O daemon command processor:  This Multics command is intended for use
   within I/O daemon extended commands (exec_coms) when it is necessary to issue actual I/O daemon commands.  For example,

      iod_command defer_time pica_10 30

   sets the automatic defer time for the "pica_10" minor device to 30 minutes */

/* Note: The "go" command may not be issued using this interface */

/* Created:  27 September 1981 by G. Palter */


iod_command:
     procedure () options (variable);


dcl  argument character (argument_lth) unaligned based (argument_ptr);
dcl  argument_lth fixed binary (21);
dcl  argument_ptr pointer;

dcl  system_area area based (system_area_ptr);
dcl  system_area_ptr pointer;

dcl  local_buffer character (512);

dcl  buffer character (buffer_lth) based (buffer_ptr);
dcl  buffer_lth fixed binary (21);
dcl  buffer_ptr pointer;

dcl  command_line character (command_line_lth) based (buffer_ptr);
dcl  command_line_lth fixed binary (21);

dcl  new_buffer character (new_buffer_lth) based (new_buffer_ptr);
dcl  new_buffer_lth fixed binary (21);
dcl  new_buffer_ptr pointer;

dcl (n_arguments, idx) fixed binary;

dcl  code fixed binary (35);

dcl  IOD_COMMAND character (32) static options (constant) initial ("iod_command");

dcl (MASTER		initial (1),		/* command line from the master console ... */
     RECURSIVE_COMMAND_LEVEL	initial (2))		/* ... being executed from within another command */
	fixed binary static options (constant);

dcl (com_err_, com_err_$suppress_name) entry () options (variable);
dcl  cu_$arg_count entry (fixed binary, fixed binary (35));
dcl  cu_$arg_ptr entry (fixed binary, pointer, fixed binary (21), fixed binary (35));
dcl  get_system_free_area_ entry () returns (pointer);
dcl  iodd_command_processor_ entry (fixed binary, fixed binary, character (*), fixed binary (35));

dcl  cleanup condition;

dcl (addr, length, max, substr) builtin;

/*  */

/* iod_command: entry () options (variable); */

	call cu_$arg_count (n_arguments, code);
	     if code ^= 0 then do;			/* not called as a command */
		call com_err_ (code, IOD_COMMAND);
		return;
	     end;

	if n_arguments = 0 then do;
	     call com_err_$suppress_name (0, IOD_COMMAND, "Usage: ^a command_line", IOD_COMMAND);
	     return;
	end;

	command_line_lth = 0;

	buffer_ptr = addr (local_buffer);
	buffer_lth = length (local_buffer);

	system_area_ptr = get_system_free_area_ ();

	on condition (cleanup)
	     begin;
		if buffer_ptr ^= addr (local_buffer) then
		     free buffer in (system_area);
	     end;


/* Construct the command line: for consistency with other commands that take command lines as unquoted arguments, the
   individual words of the command line are not requoted */

	do idx = 1 to n_arguments;

	     call cu_$arg_ptr (idx, argument_ptr, argument_lth, code);
		if code ^= 0 then do;
		     call com_err_ (code, IOD_COMMAND, "Fetching argument #^d.", idx);
		     go to RETURN_FROM_IOD_COMMAND;
		end;

	     if (command_line_lth + argument_lth + 1) > buffer_lth
	     then do;				/* need to expand the buffer being constructed */
		new_buffer_lth = max ((buffer_lth + 512), (command_line_lth + argument_lth + 128));
		allocate new_buffer in (system_area) set (new_buffer_ptr);
		new_buffer = buffer;		/* copy what we have so far ... */
		if buffer_ptr ^= addr (local_buffer) then    /* current buffer was allocated */
		     free buffer in (system_area);
		buffer_ptr = new_buffer_ptr;		/* switch to new buffer */
		buffer_lth = new_buffer_lth;
	     end;

	     substr (buffer, (command_line_lth+1), (argument_lth+1)) = argument;

	     command_line_lth = command_line_lth + argument_lth + 1;
	end;

	command_line_lth = command_line_lth - 1;	/* added an extra trailing space */


/* Pass the command on for execution: let the I/O daemon environment handle all errors */

	call iodd_command_processor_ (MASTER, RECURSIVE_COMMAND_LEVEL, command_line, (0));


/* Clean up */

RETURN_FROM_IOD_COMMAND:
	if buffer_ptr ^= addr (local_buffer) then
	     free buffer in (system_area);

	return;

     end iod_command;
