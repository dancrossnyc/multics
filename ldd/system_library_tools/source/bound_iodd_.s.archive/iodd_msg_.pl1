/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

iodd_msg_: proc (a_sev, a_target, a_code, proc_name);

/* Procedure to print messages to the operator(s) of the IO Daemon driver.
   This is an alternative to com_err_ in that it has the same calling sequence
   starting with the code argument.  It does not signal any conditions.
   It will write to the log, the error output switch, or to the user output switch.

   a_sev = 0	write a log message
   a_sev = 1	write a normal operator message
   a_sev = 2	write an error message

   It will write to the master, the slave or both.

   a_target = 0	write to both the master and the slave
   a_target = 1	write to the master only
   a_target = 2	write to the slave (if not active, write to master)

   */

/* Originally coded Nov 1977 by J. C. Whitmore */
/* Modified by J. C. Whitmore, 11/79, to decode the error code parameter descriptor */



/****^  HISTORY COMMENTS:
  1) change(88-08-19,Brunelle), approve(88-08-19,MCR7911),
     audit(88-10-19,Wallman), install(88-10-28,MR12.2-1199):
     Upgraded to version 5 iod tables.
                                                   END HISTORY COMMENTS */


	dcl     a_sev		 fixed bin;	/* severity:  0 = log, 1 = normal, 2 = error */
	dcl     a_target		 fixed bin;	/* 0 = master and slave, 1 = master, 2 = slave */
	dcl     a_code		 fixed bin (35);	/* error a_code for the message */
	dcl     proc_name		 char (*);	/* calling proc */

	dcl     log		 fixed bin int static options (constant) init (0);
	dcl     normal		 fixed bin int static options (constant) init (1);
	dcl     error		 fixed bin int static options (constant) init (2);
	dcl     master		 fixed bin int static options (constant) init (1);
	dcl     slave		 fixed bin int static options (constant) init (2);
	dcl     both		 fixed bin int static options (constant) init (0);
	dcl     NL		 char (1) int static options (constant) init ("
");

	dcl     aptr		 ptr;		/* arg list ptr */
	dcl     arg_count		 fixed bin;
	dcl     (ec, code)		 fixed bin (35);
	dcl     full_msg		 char (512) aligned;/* message buffer */
	dcl     proc_msg		 char (256) aligned;/* msg from ioa_$general_rs based on args */
	dcl     short		 char (8) aligned;	/* short error_table_ msg */
	dcl     long		 char (100) aligned;/* long error_table_ msg */
	dcl     target		 fixed bin;
	dcl     sev		 fixed bin;
	dcl     (lth, n, l)		 fixed bin;
	dcl     type		 fixed bin;
	dcl     packed		 bit (1) aligned;
	dcl     ndims		 fixed bin;
	dcl     prec		 fixed bin;
	dcl     scale		 fixed bin;
	dcl     arg_ptr		 ptr;


	dcl     based_code		 fixed bin (35) based;

	dcl     iodd_stat_p		 ptr ext static;

	dcl     convert_status_code_	 entry (fixed bin (35), char (*) aligned, char (*) aligned);
	dcl     decode_descriptor_	 ext entry (ptr, fixed bin, fixed bin, bit (1) aligned, fixed bin, fixed bin, fixed bin);
	dcl     cu_$arg_ptr		 ext entry (fixed bin, ptr, fixed bin, fixed bin (35));
	dcl     cu_$arg_list_ptr	 entry (ptr);
	dcl     cu_$arg_count	 entry (fixed bin);
	dcl     ioa_$general_rs	 entry options (variable);
	dcl     iox_$put_chars	 entry (ptr, ptr, fixed bin, fixed bin (35));

	dcl     (addr, substr, rtrim, length, bin) builtin;
%page;

	call cu_$arg_count (arg_count);		/* how many args passed? */
	if arg_count < 4 then return;			/* must be something or forget it */

	stat_p = iodd_stat_p;			/* copy the iodd_static ptr for easy ref */

	target = a_target;				/* copy the args */
	sev = a_sev;
	if ^(target = master | target = slave) then target = both; /* validate the args */
	if ^(sev = log | sev = error) then sev = normal;

	l = 1;					/* ready to build full message at char 1 */

	if proc_name ^= "" then do;
		n = length (rtrim (proc_name));	/* how long is it? */
		full_msg = substr (proc_name, 1, n) || ": "; /* insert name */
		l = l + n + 2;			/* bump the index */
	     end;

	call cu_$arg_list_ptr (aptr);
	call cu_$arg_ptr (3, arg_ptr, (0), ec);
	call decode_descriptor_ (aptr, 1, type, packed, ndims, prec, scale);

	if (type = real_fix_bin_1_dtype) & (packed = "0"b)
	then code = arg_ptr -> based_code;
	else do;
		intype = 2 * type + bin (packed, 1);

		if (type >= bit_dtype) & (type <= varying_char_dtype)
		then inclength = prec;
		else do;
			info.inscale = scale;
			info.inprec = prec;
		     end;
		outtype = 2 * real_fix_bin_1_dtype;
		outfo.outscale = 0;
		outfo.outprec = 35;
		call assign_ (addr (code), outtype, outscale_prec, arg_ptr, intype, inscale_prec);
	     end;

	if code ^= 0 then do;			/* will there be an error_table message? */
		short, long = "";			/* clear the strings */
		call convert_status_code_ (code, short, long);
		n = length (rtrim (long));		/* how long is it */
		substr (full_msg, l) = substr (long, 1, n) || NL; /* fill it in and start a new line */
		l = l + n + 1;			/* bump the index */
	     end;

	if arg_count > 4 then do;			/* is there an additional message from the proc? */
		call ioa_$general_rs (aptr, 5, 6, proc_msg, lth, "0"b, "0"b); /* format the msg */
		if lth > 0 then do;			/* is anything there */
			substr (full_msg, l) = substr (proc_msg, 1, lth) || NL; /* add in a new line */
			l = l + lth + 1;
		     end;
	     end;

	lth = l - 1;				/* this is the number of chars that were good */
	if lth < 1 then return;			/* just checking */

/*	now see who we will tell about it */

	if sev = log then do;			/* just a message for the log */

		if target = slave | target = both then
		     if iodd_static.slave.active & iodd_static.slave.log_msg then do; /* maybe to the slave */
			     call write_msg (iodd_static.slave_out, ec);
			     if ec ^= 0 then target = master; /* OOPS - tell the master */
			end;
		     else target = master;		/* if not possible, tell someone */

		if target = master | target = both then
		     call write_msg (iodd_static.log_iocbp, ec); /* send it to the iodd log */

	     end;

	else if sev = error then do;			/* it is an error message, sound the beeper */

		if target = slave | target = both then /* protect the slave */
		     if iodd_static.slave.active & iodd_static.slave.print_errors then do;
			     call write_msg (iodd_static.slave_out, ec);
			     if ec ^= 0 then target = master;
			end;
		     else target = master;

		if target = master | target = both then call write_msg (iodd_static.error_io, ec);
						/* avoid error_output due to broadcast */

	     end;

	else do;					/* the normal operator message case */

		if target = slave | target = both then
		     if iodd_static.slave.active then do;
			     call write_msg (iodd_static.slave_out, ec);
			     if ec ^= 0 then target = master;
			end;
		     else target = master;		/* be sure someone gets the message */

		if target = master | target = both then call write_msg (iodd_static.master_out, ec);

	     end;

	return;


write_msg: proc (iocbp, ec);

	dcl     ec		 fixed bin (35);
	dcl     iocbp		 ptr;


	call iox_$put_chars (iocbp, addr (full_msg), lth, ec);

	return;					/* if it didn't work...well we tried */

     end write_msg;
%page; %include desc_dcls;
%page; %include iod_tables_hdr;
%page; %include iodd_static;
%page; %include std_descriptor_types;

     end iodd_msg_;
