/****^  ********************************************
        *                                          *
        * Copyright, (C) Honeywell Bull Inc., 1988 *
        *                                          *
        ******************************************** */


/****^  HISTORY COMMENTS:
  1) change(88-06-13,Brunelle), approve(88-06-13,MCR7911),
     audit(88-10-21,Wallman), install(88-10-28,MR12.2-1199):
     Created.
                                                   END HISTORY COMMENTS */

/* format: style4 */

/* This is a common procedure containing entrypoints to parse an input command
   line and to parse a major/minor arguments string */

iodd_parse_: proc;

/* no entry here */
	return;

/* Arguments */

/* Following two are for iodd_parse_$args */
dcl  key char (*) var parameter;			/* key string to look for */
dcl  arg_string char (*) parameter;			/* string to examine */

/* following three are for iodd_parse_$command */
dcl  command_line char (*) parameter;			/* command line to parse */
dcl  elements_ptr ptr parameter;			/* pointer to the structure we fill in */
dcl  ec fixed bin (35);				/* error code */

/* External Procedures & Variables */

dcl  error_table_$noarg fixed bin (35) ext static;
dcl  error_table_$bigarg fixed bin (35) ext static;
dcl  error_table_$unbalanced_quotes ext fixed bin (35);

/* Builtins */

dcl  (addr, index, length, ltrim, rtrim, search, substr, verify) builtin;

/* Internal Static */

dcl  COMMA char (1) defined QUOTE_COMMA pos (2);
dcl  NEWLINE char (1) defined WHITESPACE pos (4);
dcl  SPACE_OR_TAB char (2) defined WHITESPACE pos (2);
dcl  QUOTE char (1) defined QUOTE_COMMA pos (1);
dcl  QUOTE_COMMA char (2) int static options (constant) init (""",");

/* whitespace - BS SP HT NL VT NP CR */
dcl  WHITESPACE char (7) static options (constant) init (" 	
");

/* Automatic */

dcl  break_char_index fixed bin;			/* location of break char following keyword string */
dcl  first char (1) based (addr (line));		/* first char of the line */
dcl  i fixed bin;					/* do index */
dcl  keyword_location fixed bin;			/* location of keyword within arg_string */
dcl  len fixed bin;					/* general index variable for length */
dcl  line char (128);				/* internal copy of the command line */
dcl  one_char char (1);				/* obvious */
dcl  start fixed bin;				/* starting position of the token */
dcl  string_offset fixed bin;
dcl  temp char (256) var;
dcl  value char (256) var;

dcl  1 elements aligned based (elements_ptr),		/* this is the structure we fill in */
       2 max_wanted fixed bin,			/* the number of tokens to look for */
       2 n fixed bin,				/* number of valid tokens */
       2 token (max_wanted) char (64) var;		/* save exact length with each */
%page;
args: entry (key, arg_string) returns (char (256) var);

/* this entry is a common argument parsing routine used by the I/O daemon
   driver processes on the system.  It was originally extracted from
   remote_driver_.pl1.

   Each of the drivers on the system use this routine to parse the data in
   their major and/or minor argument strings.  The format for data within the
   strings is

   <keyword> [optional space] <keyword value>[, <keyword> [optional space] <keyword value>]
*/

/* make gross pass to see if key exists in input string.  if not, get out quick */
	keyword_location = index (arg_string, key);
	if keyword_location = 0 then do;
	     return ("");
	end;

/* the keyword exists.  if it is 1st keyword or preceeded by whitespace, it is
   valid keyword; otherwise it is last part of another type of keyword and we
   must look further */

	if keyword_location > 1 then do;
try_again:     one_char = substr (arg_string, keyword_location - 1, 1);
	     if index (WHITESPACE, one_char) ^= 0 then	/* preceeded by whitespace */
		goto copy_to_temp_string;
	     if one_char = COMMA then			/* preceeded by a comma */
		goto copy_to_temp_string;

	     if keyword_location < length (arg_string) then do;
		string_offset = keyword_location + length (key);
		keyword_location = index (substr (arg_string, string_offset), key);
		if keyword_location ^= 0 then do;
		     keyword_location = keyword_location + string_offset - 1;
		     go to try_again;
		end;
	     end;
	     return ("");
	end;
	else do;

/* copy all of string following the keyword, removing leading and trailing whitespace */
copy_to_temp_string:
	     string_offset = keyword_location + length (key);
	     temp = rtrim (ltrim (substr (arg_string, string_offset), WHITESPACE), WHITESPACE);

	     if temp = "" then do;			/* all blanks */
		return ("");
	     end;

/* look for a break char to terminate end of return string.  If no break char
   is found, return value is rest of string so just return it as is */
	     break_char_index = search (temp, QUOTE_COMMA);
	     if break_char_index = 0 then do;
		return (temp);
	     end;

/* found some sort of break char, must process based on type of character it
   is.  If it is a comma, this terminates the end of the string to return so
   return everything up to the comma */
	     if substr (temp, break_char_index, 1) = COMMA then do;
		return (substr (temp, 1, break_char_index - 1));
	     end;

/* the break character was a start quote then we must look for an end quote */
/* copy everything up to the quote into return string */
	     value = substr (temp, 1, break_char_index - 1);

find_level_1:  if break_char_index = length (temp) then	/* quotes don't balance */
		return ("");
	     temp = substr (temp, break_char_index + 1);	/* skip starting quote */
	     break_char_index = search (temp, QUOTE);	/* look for closing quote */
						/* allow commas within quotes */
	     if break_char_index = 0 then do;		/* quotes do not balance */
		return ("");			/* so return nothing */
	     end;

/* copy everything up to the new quote */
	     value = value || substr (temp, 1, break_char_index - 1);

	     if break_char_index = length (temp) then	/* unbalanced quotes */
		return ("");
	     if substr (temp, break_char_index + 1, 1) = QUOTE then do; /* double quote? */
		value = value || QUOTE;		/* replace with a single quote */
		break_char_index = break_char_index + 1;/* move the index */
		go to find_level_1;			/* and search on */
	     end;
	end;

	temp = value;

	return (rtrim (temp));
%page;


command: entry (command_line, elements_ptr, ec);

/* entry to parse the command_line string into a structure containing one
   element per token up to the maximum requested */

	elements.n = 0;				/* initialize to none found */
	len = length (command_line);			/* how long is it? */
	if len > 127 then do;			/* if too long to leave trailing blank */
	     ec = error_table_$bigarg;		/* give a code */
	     return;				/* and quit now */
	end;
	line = command_line;			/* copy the string */
	i = index (line, NEWLINE);			/* see if there was a nl char */
	if i > 0 then line = substr (line, 1, i - 1);	/* and drop it and the rest */
	do i = 1 to max_wanted;			/* look for max_wanted tokens */
	     len = verify (line, SPACE_OR_TAB);		/* correct for leading spaces or tabs */
	     if len = 0 then go to tally;		/* nothing left so quit */
	     if len > 1 then line = substr (line, len);	/* left justify */
	     start = 1;				/* assume the first char is good */
	     if first = QUOTE then do;		/* different action for quoted string */
		start = 2;			/* so we will skip the quote later */
		len = index (substr (line, 2), QUOTE);	/* find the closing quote */
		if len = 0 then do;
		     ec = error_table_$unbalanced_quotes; /* too bad */
		     return;			/* return what we found */
		end;
	     end;
	     else len = search (line, SPACE_OR_TAB);	/* find end of token */
	     if len > 64 then do;			/* complain if too long */
		ec = error_table_$bigarg;
		return;				/* return what we found */
	     end;
	     elements.n = elements.n + 1;		/* add one more token to the list */
	     elements.token (elements.n) = substr (line, start, len - 1);
	     line = substr (line, len + start);		/* get ready for the next one...left shift */
	end;

tally:	if elements.n = 0 then			/* if none found, give an error */
	     ec = error_table_$noarg;
	else ec = 0;
	return;

     end iodd_parse_;
