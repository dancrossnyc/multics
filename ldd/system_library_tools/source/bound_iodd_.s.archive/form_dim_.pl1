/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */



form_dim_: procedure;

	return;					/* this is not a legal entry point */

/* Splicing dim to control the printing of forms on the IO daemon driver control terminal.
   This dim accepts a page length and line length as order calls and keeps track of the current line
   number on the terminal so that it can output enough line feeds to bring the form to the top of the
   page when a form feed character is written.  The read entry also updates the current line position. */

/* Originally coded by J. Whitmore, Jan 1975, based on an old ttydim */


dcl (sdb_p, sp, vp, p) ptr,				/* temporary storage */
    (k, i) fixed bin;

dcl 1 first_sdb int static aligned like sdb;		/* first allocation of an SDB */

dcl 1 sdb based (sdb_p) aligned,			/* one entry in list of stream data control blocks */
    2 dim_name char (32),				/* the name of this DIM */
    2 device_name_list ptr,				/* ptr to threaded list of device names for ios_ */
    2 next_device ptr,				/* this should be null..device_name_list points here */
    2 device_name_size fixed bin,			/* number of chars in device name */
    2 device_name char (32) unal,			/* stream or device attached to */
    2 n_attached fixed bin,				/* number of different streams using this SDB */
    2 active bit (1) unal,				/* "1" means this entry is active */
    2 aligned bit (1) unal,				/* "1" means paper is aligned on terminal */
    2 pad bit (34) unal,
    2 page_size fixed bin,				/* number of lines on the form */
    2 line_length fixed bin,				/* number of print positions per line */
    2 carg_pos fixed bin,				/* last known carriage position */
    2 line_no fixed bin,				/* current line on the page */
    2 nextp ptr;					/* pointer to next entry in sdb list */

dcl 1 st based (sp) aligned,				/* breakdown of I/O system status word */
    2 code fixed bin (35),				/* error status code (0 = OK) */
    2 comp bit (4) unaligned,				/* completion status, LI, LC, PI, PC */
    2 end bit (1) unaligned,				/* end-of-file */
    2 pad1 bit (4) unaligned,
    2 eod bit (1) unaligned,				/* end of physical data */
    2 pad2 bit (4) unaligned,
    2 abs bit (1) unaligned,
    2 det bit (1) unaligned,				/* detach flag */
    2 quit bit (1) unaligned,				/* quit flag */
    2 abort bit (1) unaligned,			/* abort flag */
    2 callx bit (18) unaligned;			/* rel pointer to last transaction */

dcl  hcs_$assign_linkage ext entry (fixed bin, ptr, fixed bin (35));

dcl  form_dim_$form_changemode entry (ptr, char (*), char (*), bit (72) aligned);

dcl  onechar char (1),				/* temp for compares */
     code fixed bin (35),
     init bit (1) int static init ("0"b),		/* sdb initialization flag */
     bel char (1) init (""),				/* a bel char */
     space char (1) int static init (" "),		/* a space char */
     spaces char (12) int static init ("           "),	/* string of spaces */
     nl char (1) int static init ("
"),
     ht char (1) int static init ("	"),
     bs char (1) int static init ("");

dcl (addr, null, mod, index, substr, search, length) builtin;

dcl  any_other condition;

dcl  error_table_$ionmat fixed bin (35) ext static;	/* code indicating stream already attached */

dcl  cv_dec_check_ entry (char (*), fixed bin (35)) returns (fixed bin);

dcl  ios_$order entry (char (*), char (*), ptr, bit (72)aligned);
dcl  ios_$read entry (char (*), ptr, fixed bin, fixed bin, fixed bin, bit (72) aligned);
dcl  ios_$write entry (char (*), ptr, fixed bin, fixed bin, fixed bin, bit (72) aligned);
dcl  ios_$abort entry (char (*), bit (72) aligned, bit (72) aligned);
dcl  ios_$resetread entry (char (*), bit (72) aligned);
dcl  ios_$resetwrite entry (char (*), bit (72) aligned);
dcl  ios_$changemode entry (char (*), char (*), char (*), bit (72) aligned);

dcl  VT char (1) int static init ("");			/* a vertical tab character */

dcl  ff char (1) int static init ("");			/* form feed char */

form_attach: entry (from_stream, dim_name, to_stream, mode, status, sdb_ptr);

dcl  from_stream char (*),				/* stream name (e.g. user_i/o) */
     dim_name char (*),				/* IOSIM name used to get here */
     to_stream char (*),				/* stream we are attaching to */
     mode char (*),					/* attachment mode */
     status bit (72) aligned,				/* I/O system status code (returned) */
     sdb_ptr ptr;					/* device attachment pointer (returned) */

	status = "0"b;				/* clear status code */
	sp = addr (status);				/* pick up pointer to status code argument */
	if sdb_ptr ^= null then do;			/* this is a multiple attachment from the same source */
	     st.code = error_table_$ionmat;		/* no good, so return error code */
	     return;				/* return */
	end;
	sdb_p = addr (first_sdb);			/* get pointer to first entry in SDB list */
	if ^init then do;				/* be sure we initialize sdb first in the process */
	     sdb.active = "0"b;			/* not active yet */
	     sdb.nextp = null;			/* list ends here */
	     init = "1"b;				/* we are now initialized for sdb search */
	end;
	vp = null;				/* use vp to locate first vacant entry (if any) */
	do while (sdb_p ^= null);			/* search entire SDB list */
	     p = sdb_p;				/* keep track of last entry in temp ptr p */
	     if ^sdb.active then do;			/* is this entry an unused (vacant) entry? */
		if vp = null then vp = sdb_p;		/* record first vacant entry found in list */
	     end;
	     else if sdb.device_name = to_stream then do; /* not vacant, is stream already attached? */
		sdb_ptr = sdb_p;			/* if so, return attachment ptr to this entry */
		sdb.n_attached = sdb.n_attached + 1;	/* allow multiple sources */
		go to attrtn;			/* and return to caller */
	     end;
	     sdb_p = sdb.nextp;			/* get pointer to next entry (if any) in list */
	end;
	if vp = null then do;			/* if no vacant entry found in sdb list, */
	     call hcs_$assign_linkage (32, vp, code);	/* then we must allocate space for a new entry */
	     if code ^= 0 then go to atterr;
	     vp -> sdb.active = "0"b;			/* initialize new sdb list entry */
	     vp -> sdb.nextp = null;			/* indicate new entry is last entry in list */
	     p -> sdb.nextp = vp;			/* thread new entry into sdb list */
	end;
	sdb_p, sdb_ptr = vp;			/* set caller's attachment pointer */
	sdb.active = "1"b;				/* initialize remainder of sdb list entry */
	sdb.n_attached = 1;				/* this is the first source for this SDB */
	sdb.device_name = to_stream;			/* save stream we will do I/O on */
	sdb.dim_name = dim_name;			/* initialize name of DIM */
	sdb.device_name_list = addr (sdb.next_device);	/* get pointer to list of device names */
	sdb.next_device = null;			/* this is last entry in list */
	sdb.device_name_size = index (to_stream, " ") - 1; /* there should be a trailing space */
	if sdb.device_name_size < 1 then sdb.device_name_size = length (to_stream);
	sdb.page_size = 66;				/* default is 66 lines per page */
	sdb.line_length = 79;			/* assume 79 as a default */
	sdb.carg_pos = 1;				/* assume carrage in col 1 */
	sdb.line_no = 1;				/* assume top of page */
	sdb.aligned = "0"b;				/* but, that paper is not aligned */
						/* we can't assume that "to_stream" is attached yet, but */
	call ios_$changemode (sdb.device_name, "edited", "", status); /* set edited mode if possible */

attrtn:	if mode ^= "" then
	     call ios_$changemode (sdb.device_name, mode, "", status);
						/* if mode is specified then establish it */
	call set_line_length;			/* get ll from device or take default */
	status = "0"b;				/* all is well even if other stream not there */
	st.end = "1"b;				/* indicate stream at "end of file" */
	return;					/* and return to caller */

atterr:	st.code = code;				/* here on error, return status code to caller */
	st.det = "1"b;				/* indicate stream not attached */
	return;
						/*  */
form_write: entry (sdb_ptr, wp, offset, ne, net, status);	/* entry to write  */

dcl  wp ptr,					/* pointer to base of user's workspace */
     offset fixed bin,				/* character offset from wp */
     ne fixed bin,					/* number of elements (characters) to write (or read) */
     net fixed bin;					/* number of elements actually written (or read) */

dcl  source char (512) based (wp);			/* input buffer */

dcl  next_char fixed bin,				/* index of next unprocessed char from user */
     last_char fixed bin,				/* index of the last char to write */
     write_flag bit (1),				/* flag to write after nl unless space gets tight */
     out_pos fixed bin,				/* index of next available slot in out_buf */
     out_buf char (640);				/* output buffer built from user's workspace */

dcl  fold char (3) int static init ("
\*");						/* line folding char sequence nl||\||* */


	sdb_p = sdb_ptr;				/* get pointer to entry for this attachment */
	status = "0"b;				/* initialize status code to zero */
	sp = addr (status);				/* get pointer to status code argument */
	if ne = 0 then go to wrtn;			/* skip to return if nothing to write */
	net = 0;					/* initialize elements-written to zero */
	next_char = offset + 1;			/* index of first char to write */
	last_char = offset + ne;			/* index of last char to write */

outer_loop: do while (next_char <= last_char);		/* write all chars requested */

	     out_pos = 1;				/* start a new output string */
	     write_flag = "0"b;			/* indicate that we want to buffer */

inner_loop:    do while (^write_flag & (next_char <= last_char) & (out_pos < 638)); /* write in small blocks */
		onechar = substr (source, next_char, 1); /* get next input character */
		if onechar < space then do;		/* check for ctl char */

		     if onechar = nl then do;		/* it was a new line */
			substr (out_buf, out_pos, 1) = nl; /* put out and count */
			out_pos = out_pos + 1;	/* update output index */
			sdb.carg_pos = 1;		/* carriage now in column 1 */
			sdb.line_no = sdb.line_no + 1; /* count the line position on the form */
			if sdb.line_no > sdb.page_size then sdb.line_no = 1; /* top of form */
			write_flag = "1"b;		/* if buffer full we will write */
		     end;

		     else if onechar = ff then do;	/* it was a form feed */
			if sdb.aligned then do;	/* if alignment set, go to top */
			     if ^((sdb.line_no = 1) & (sdb.carg_pos = 1)) then do; /* are we there? */
				do i = 1 to (sdb.page_size - sdb.line_no + 1); /* put out enough new lines */
				     substr (out_buf, out_pos, 1) = nl;
				     out_pos = out_pos + 1;
				end;
				sdb.carg_pos = 1;	/* carriage position is now 1 */
				sdb.line_no = 1;	/* now at top */
				write_flag = "1"b;	/* we can write if needed */
			     end;
			end;
			else do;
			     substr (out_buf, out_pos, 1) = ff; /* put it out when not aligned */
			     out_pos = out_pos + 1;
			end;
		     end;

		     else if onechar = VT then do;	/* it was a vertical tab */
			if sdb.aligned then do;	/* if alignment is set we simulate */
			     k = 10 - mod (sdb.line_no + 9, 10); /* how far to 1, 11, 21, 31, ... */
			     if sdb.line_no + k > sdb.page_size then /* but don't overflow a page */
				k = sdb.page_size - sdb.line_no + 1; /* go to top of form */

			     do i = 1 to k;

				substr (out_buf, out_pos, 1) = nl; /* write out "k" new lines */
				out_pos = out_pos + 1;

			     end;

			     sdb.carg_pos = 1;	/* back to column 1 */
			     sdb.line_no = sdb.line_no + k; /* update the line count */
			     if sdb.line_no > sdb.page_size then sdb.line_no = 1; /* we didn't go past line 1 */
			     write_flag = "1"b;	/* this is a good time to write */

			end;
			else do;			/* not aligned, just put it out */

			     substr (out_buf, out_pos, 1) = VT;
			     out_pos = out_pos + 1;

			end;
		     end;

		     else if onechar = ht then do;	/* it was a tab */
			i = mod (sdb.carg_pos, 10);	/* locate position in tab field */
			if i = 0 then sdb.carg_pos = sdb.carg_pos + 1;
			else sdb.carg_pos = sdb.carg_pos + 11 - i; /* indicate new carriage position */
			if sdb.carg_pos <= sdb.line_length then do; /* check for end of carriage */
			     substr (out_buf, out_pos, 1) = ht; /* ok, put it out */
			     out_pos = out_pos + 1;
			end;
			else do;			/* must fold the line */
			     substr (out_buf, out_pos, 3) = fold; /* put in nl||\||c */
			     out_pos = out_pos + 3;
			     sdb.line_no = sdb.line_no + 1;
			     if sdb.line_no > sdb.page_size then sdb.line_no = 1; /* top of form */
			     i = sdb.carg_pos - sdb.line_length - 1; /* how much overhang? */
			     if i > 0 then do;
				substr (out_buf, out_pos, i) = substr (spaces, 1, i); /* pad out */
				out_pos = out_pos + i;
			     end;
			     sdb.carg_pos = 3 + i;
			     write_flag = "1"b;	/* write if buffer full */
			end;
		     end;

		     else if onechar = bs then do;	/* it was a back space */
			substr (out_buf, out_pos, 1) = bs; /* put it out */
			out_pos = out_pos + 1;
			sdb.carg_pos = sdb.carg_pos - 1; /* back up the carriage position */
		     end;

		     else if onechar = bel then do;	/* it was a bel char, thats OK. */
			substr (out_buf, out_pos, 1) = bel;
			out_pos = out_pos + 1;	/* this will not move the carriage */
		     end;

/* 			otherwise drop the character */

		     next_char = next_char + 1;	/* either way, get ready for next char */

		end;

		else do;				/* printable char, so put it out */

		     substr (out_buf, out_pos, 1) = onechar;
		     out_pos = out_pos + 1;
		     sdb.carg_pos = sdb.carg_pos + 1;
		     next_char = next_char + 1;	/* move the source index */
		     if next_char <= last_char then	/* is the next char legal? */
			if sdb.carg_pos > sdb.line_length then do; /* may need to fold */
			     if substr (source, next_char, 1) ^= nl then do; /* fold if next char not nl */
				substr (out_buf, out_pos, 3) = fold; /* insert fold sequence */
				out_pos = out_pos + 3;
				sdb.carg_pos = 3;
				write_flag = "1"b;
				sdb.line_no = sdb.line_no + 1;
				if sdb.line_no > sdb.page_size then sdb.line_no = 1; /* at the top */
			     end;

			     else do;		/* just put in new line */
				substr (out_buf, out_pos, 1) = nl;
				out_pos = out_pos + 1;
				sdb.line_no = sdb.line_no + 1;
				if sdb.line_no > sdb.page_size then sdb.line_no = 1;
				sdb.carg_pos = 1;
				next_char = next_char + 1; /* already checked it */
				write_flag = "1"b;
			     end;
			end;
		end;

		if out_pos < 512 then write_flag = "0"b; /* then write after nl if 512 chars buffered */

	     end;					/* end of inner do while loop */
	     call ios_$write (sdb.device_name, addr (out_buf), 0, out_pos - 1, i, status);
	     if st.code ^= 0 then do;			/* on error, throw it back to caller */
		net = i;				/* tell him how many written */
		return;
	     end;

	end outer_loop;
wrtn:	st.end = "1"b;				/* indicate stream at "end-of-file" */
	st.comp = "1110"b;				/* return I/O completion indicators */
	net = ne;					/* indicate that all elements were transferred */
	return;

/*      */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

form_read: entry (sdb_ptr, wp, offset, ne, net, status);	/* entry to read from attachment */

	sdb_p = sdb_ptr;				/* get pointer to entry for this attachment */
	status = "0"b;				/* initialize status code to zero */

	call ios_$read (sdb.device_name, wp, offset, ne, net, status); /* pass it on */
	if substr (source, offset + net, 1) = nl then do; /* adjust for manual nl's */
	     sdb.line_no = sdb.line_no + 1;		/* increment the line count */
	     if sdb.line_no > sdb.page_size then sdb.line_no = 1; /* top of page? */
	     sdb.carg_pos = 1;			/* he had to give a nl char */
	end;

	return;					/* and return control to caller */

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

form_resetread: entry (sdb_ptr, stat2);			/* entry to reset read-ahead data */

dcl  stat2 bit (72) aligned;				/* I/O system status code (returned) */

	sdb_p = sdb_ptr;
	sdb.aligned = "0"b;				/* form alignment is gone */

	call ios_$resetread (sdb.device_name, stat2);	/* pass it along */

	return;

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

form_resetwrite: entry (sdb_ptr, stat2);		/* entry to reset write-behind buffers */

	sdb_p = sdb_ptr;
	sdb.aligned = "0"b;				/* form alignment is gone */

	call ios_$resetwrite (sdb.device_name, stat2);	/* pass it along for now */

	return;

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

form_abort: entry (sdb_ptr, stat2, stat3);		/* entry to reset read, write and quit condition */

dcl  stat3 bit (72) aligned;				/* I/O system status code (returned) */

	sdb_p = sdb_ptr;				/* get pointer to entry for this attachment */
	sdb.aligned = "0"b;				/* form alignment is gone */

	call ios_$abort (sdb.device_name, stat2, stat3);	/* call other DIM to do the work */

	return;					/* and return */

/*   */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

form_order: entry (sdb_ptr, request, argptr, stat4);	/* entry to issue attachment orders */

dcl  request char (*),				/* symbol attachment request order code */
     argptr ptr,					/* pointer to additional arguments (if any) */
     stat4 bit (72) aligned;				/* I/O system status code (returned) */

dcl 1 form aligned based (argptr),			/* structure for reading form data */
    2 page_size fixed bin,
    2 line_length fixed bin,
    2 line_no fixed bin,
    2 carg_pos fixed bin,
    2 aligned bit (1) unal,
    2 pad bit (35) unal;

dcl  error_table_$undefined_order_request fixed bin (35) ext static;

dcl 1 modes based (argptr),
    2 len fixed bin,
    2 string char (len);

dcl  argnum fixed bin based (argptr);

	on any_other go to order_err;			/* in case some fool gives a bad argptr */
	sdb_p = sdb_ptr;				/* get pointer to entry for this attachment */
	stat4 = "0"b;				/* initialize status code to zero */
	sp = addr (stat4);				/* get pointer to status code argument */

	if request = "page_length" then do;
	     if (argnum > 5) & (argnum < 133) then	/* a "page" may be from 6 to 132 lines long */
		sdb.page_size = argnum;		/* if in range save it */
	     else st.code = error_table_$undefined_order_request; /* out of range */
	     return;				/* we handled it, don't pass it along */
	end;

	else if request = "form_aligned" then do;	/* get ready to simulate form feeds */
	     sdb.aligned = "1"b;
	     sdb.line_no = 1;
	     sdb.carg_pos = 1;
	     return;
	end;

	else if request = "form_status" then do;	/* give back everything..in case */
	     form.page_size = sdb.page_size;
	     form.line_length = sdb.line_length;
	     form.line_no = sdb.line_no;
	     form.carg_pos = sdb.carg_pos;
	     form.aligned = sdb.aligned;
	     return;
	end;

passon:	call ios_$order (sdb.device_name, request, argptr, stat4); /* pass order call to other DIM */

	call set_line_length;			/* the "modes" order could change ll */

	return;					/* and return to caller */

order_err: st.code = error_table_$undefined_order_request;
	return;


/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

form_changemode: entry (sdb_ptr, mode, omode, stat4);	/* entry to modify the attachment mode */

dcl  omode char (*);				/* returned mode prior to this call */

	sdb_p = sdb_ptr;				/* get pointer to SDB for this attachment */
	stat4 = "0"b;				/* initialize status to OK */
	sp = addr (stat4);				/* pick up pointer to status argument */
	call ios_$changemode (sdb.device_name, mode, omode, stat4); /* call other DIM to change modes */

	call set_line_length;			/* see if there is a new line length */

	return;


/*   */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

form_getsize: entry (sdb_ptr, size, stat3);		/* entry to return current element size */

dcl  size fixed bin;				/* current element size (returned) */

	size = 9;					/* element size for consoles is always 9 */
	stat3 = "0"b;
	return;					/* so return the constant 9 to the caller */

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

form_detach: entry (sdb_ptr, ch2, disposal, stat4);	/* entry to detach one input stream */

dcl (ch2, disposal) char (*);				/* these arguments ignored in this implementation */

	sdb_p = sdb_ptr;				/* get pointer to entry for this attachment */
	stat4 = "0"b;				/* initialize status code to zero */
	sp = addr (stat4);				/* get pointer to status code argument */
	st.det = "1"b;				/* set code to detach this ioname */
	sdb.n_attached = sdb.n_attached - 1;		/* count one less source */
	if sdb.n_attached < 1 then sdb.active = "0"b;	/* indicate sdb list entry no longer in use */
	return;					/* and return */

/* ********************************************************************** */

/* ** internal procedure to set internal line length ** */

set_line_length: proc;

dcl  ec fixed bin (35);
dcl  v char (12) var;
dcl  k fixed bin;
dcl  status bit (72) aligned;
dcl  get_line_length_$stream entry (char (*), fixed bin (35)) returns (fixed bin);
dcl  convert_binary_integer_$decimal_string entry (fixed bin) returns (char (12) var);

	     k = get_line_length_$stream (sdb.device_name, ec); /* see what ll is set on output stream */
	     if ec ^= 0 then do;			/* it must not be there, take default */
		sdb.line_length = 79;
		return;
	     end;
	     if k < 11 | k > 132 then do;		/* must be a mistake, keep current value */
		v = convert_binary_integer_$decimal_string (sdb.line_length);
		v = "ll" || v;			/* make a mode string out of it */

		call ios_$changemode (sdb.device_name, (v), "", status); /* this is the best we can do */
		return;
	     end;

	     sdb.line_length = k;			/* record the new line length so we are in sync */

	     return;

	end set_line_length;

     end form_dim_;
