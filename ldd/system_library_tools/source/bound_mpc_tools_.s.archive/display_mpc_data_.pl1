/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* DISPLAY_MPC_DATA_ - Print MPC and Device Statistics for MPC.
   coded December 1980 by Rich Coppola	*/
/* Modified May 1982 by Rich Coppola to add EURC support */
/* Modified June 1984 by Paul Farley for DAU (MSP800) support and
   to change "MTC Read Count" to "MTC Read Retry Count" */

/* format: style4,delnl,insnl,ifthenstmt,indnoniterend */

display_mpc_data_:
     proc (a_poll_mpc_datap, a_sw, short_sw);


/* Arguments */

dcl  a_poll_mpc_datap ptr;				/* Pointer to mpc data structure */
dcl  a_sw ptr;					/* Pointer to ioa_switch */
dcl  short_sw bit (1);				/* Set to fit display on 80 char terminal */


/* Automatic */

dcl  sw ptr;					/* Pointer to ioa_switch */

dcl  (i, j, k, l, index) fixed bin,			/* Iteration variables */
     dt char (24);					/* Current date and time */
dcl  pic6 picture "zzzzz9";
dcl  pic99 picture "99";
dcl  ndev fixed bin;
dcl  num_to_print fixed bin;
dcl  nprint fixed bin;
dcl  nblabel fixed bin;
dcl  blabelp ptr;
dcl  hint bit (1);
dcl  tape_sw bit (1);
dcl  mpc_only bit (1) init ("0"b);
dcl  print_mpc_line bit (1);
dcl  have_stats bit (1) init ("0"b);
dcl  (urp_sw, eurc_sw) bit (1) init ("0"b);
dcl  dau_sw bit (1) init ("0"b);
dcl  (nonzero_error_reg, nonzero_cntrs) bit (1);
dcl  header_line char (136);
dcl  retl fixed bin (21);
dcl  (my_n_devices, my_n_stats) fixed bin;
dcl  (my_dev_ptr, my_stat_ptr) ptr;
dcl  SUBSYSTEM char (3);
dcl  field_count fixed bin (35);
dcl  lines_printed fixed bin;
dcl  lines_needed fixed bin;

dcl  1 line unal,
       2 title char (28),
       2 field (16) char (6);

dcl  1 dev_statistic (64),
       2 counter (16) fixed bin;


/* Constants */

dcl  eurlabel (15) char (28) static options (constant)
	init ("PDSI Receiver Errors", "PDSI Transmission Errors", "Cards Punched", "Cards Read", "PDSI Frames Received",
	"PDSI Frames Transmitted", "Connect PCW's", "Total PCW's", "IOM Transactions (L)", "IOM Transactions (U)",
	"IOM Word Transmissions (L)", "IOM Word Transmissions (U)", "Lines Printed", "PDSI Re-Transmissions",
	"Pages printed");


dcl  tlabel (8) char (28) static options (constant)
	init ("Records Read", "Records Written", "Records with Write Error", "Records with Read Error",
	"Transfer Timing Errors", "Marginal Records", "Single Track Corrections", "MTC Read Retry Count");

dcl  dlabel (16) char (28) int static options (constant)
	init ("Movement Seeks", "Data Sectors Written", "Data Sectors Read", "Data Transfer Commands",
	"Seek Incompletes", "Header Verification Errors", "Transfer Timing Errors", "Data Check Character Alerts",
	"Count Check Character Alerts", "Parity Errors", "Alternate Tracks Processed", "EDAC Correctable Errors",
	"EDAC Uncorrectable Errors", "Positioner Offsets", "Data Correction Init", "Search Alerts");

dcl  daulabel (16) char (28) int static options (constant)
	init ("Movement Seeks", "Data Sectors Written", "Data Sectors Read", "Data Transfer Commands",
	"Seek Incompletes", "Header Verification Errors", "Transfer Timing Errors", "Data Check Character Alerts",
	"Count Check Character Alerts", "Interface Errors", "Alternate Tracks Processed", "EDAC Correctable Errors",
	"EDAC Uncorrectable Errors", "Latencies", "Record Retry", "Sync Failures");


/* Based */

dcl  blabel (nblabel) char (28) based (blabelp);
dcl  1 my_dev_info (my_n_devices) like dev_info based (my_dev_ptr);
dcl  1 my_stat_info (my_n_stats) like stat_info based (my_stat_ptr);

/* External Entries */

dcl  (
     ioa_$ioa_switch,
     ioa_$ioa_switch_nnl,
     ioa_$rs
     ) entry options (variable);
dcl  date_time_ entry (fixed bin (52), char (*));
dcl  decode_mpc_stats_$stat_ctrs_ entry (ptr, ptr);
dcl  decode_mpc_stats_$dau_stat_ctrs_ entry (ptr, ptr);
dcl  decode_mpc_stats_$err_data_ entry (ptr, ptr);
dcl  (addr, clock, hbound, min, null, rtrim, string, substr) builtin;
dcl  cv_dec_ entry (char (*)) returns (fixed bin (35));
%page;
start:
	poll_mpc_datap = a_poll_mpc_datap;
	poll_mpc_specp = addr (poll_mpc_data.specific);
	my_dev_ptr, my_stat_ptr = null;
	my_n_devices, my_n_stats = 0;
	sw = a_sw;

	call date_time_ (clock (), dt);		/* Get current date and time. */

	if short_sw
	then num_to_print = 8;
	else num_to_print = 16;
	lines_printed = 0;
	nonzero_error_reg = "0"b;

	if substr (poll_mpc_data.name, 1, 3) = "urp" then do;
	     call ioa_$rs ("^5xStatistics for ^a controller.^3x^a", header_line, retl, poll_mpc_data.name, dt);
	     ndev = 0;
	     urp_sw = "1"b;
	     eurc_sw = "0"b;
	     do i = 1 to hbound (eurc_model_numbers, 1) while (eurc_sw = "0"b);
		if poll_mpc_data.model = eurc_model_numbers (i) then eurc_sw = "1"b;
	     end;
	     if eurc_sw = "1"b then do;		/* If EURC controller ... */
		my_n_devices, ndev = poll_eurc_data.n_devices;
		my_dev_ptr = addr (poll_eurc_data.dev_info);
		my_n_stats = poll_eurc_data.n_stats;
		my_stat_ptr = addr (poll_eurc_data.stat_info);
		nblabel = hbound (eurlabel, 1);
		blabelp = addr (eurlabel);
		lines_needed = 16;
		go to display_eurc;
		end;
	     if poll_urp_data.register ^= "0"b then nonzero_error_reg = "1"b;
	     end;


	else if substr (poll_mpc_data.name, 1, 3) = "mtp" then do;
						/* If tape controller ... */
	     call ioa_$rs ("^5xStatistics for ^a controller. FW Rev. ^a^3x^a", header_line, retl, poll_mpc_data.name,
		poll_mtp_data.firmware_rev, dt);
	     my_n_devices, ndev = poll_mtp_data.n_devices;
	     my_dev_ptr = addr (poll_mtp_data.dev_info);
	     my_n_stats = poll_mtp_data.n_stats;
	     my_stat_ptr = addr (poll_mtp_data.stat_info);
	     nblabel = hbound (tlabel, 1);
	     blabelp = addr (tlabel);
	     tape_sw = "1"b;
	     SUBSYSTEM = "tap";
	     lines_needed = 8;
	     if poll_mtp_data.register ^= "0"b then nonzero_error_reg = "1"b;
	     end;

	else if substr (poll_mpc_data.name, 1, 3) = "msp" then do;
						/* If disk controller ... */
	     if poll_mpc_data.model = 800 then do;	/* DAU? */
		call ioa_$rs ("^5xStatistics for ^a DAU. FW Rev. ^a, HW Rev. ^2.4b(hex)^3x^a", header_line, retl,
		     poll_mpc_data.name, poll_dau_data.fw_rev, poll_dau_data.hw_rev, dt);
		my_n_devices, ndev = poll_dau_data.n_devices;
		my_dev_ptr = addr (poll_dau_data.dev_info);
		my_n_stats = poll_dau_data.n_stats;
		my_stat_ptr = addr (poll_dau_data.stat_info);
		nblabel = hbound (daulabel, 1);
		blabelp = addr (daulabel);
		dau_sw = "1"b;
		end;
	     else do;
		call ioa_$rs ("^5xStatistics for ^a controller. FW Rev. ^a^3x^a", header_line, retl,
		     poll_mpc_data.name, poll_msp_data.firmware_rev, dt);
		my_n_devices, ndev = poll_msp_data.n_devices;
		my_dev_ptr = addr (poll_msp_data.dev_info);
		my_n_stats = poll_msp_data.n_stats;
		my_stat_ptr = addr (poll_msp_data.stat_info);
		nblabel = hbound (dlabel, 1);
		blabelp = addr (dlabel);
		if poll_msp_data.register ^= "0"b then nonzero_error_reg = "1"b;
		end;
	     tape_sw = "0"b;
	     SUBSYSTEM = "dsk";
	     lines_needed = 16;
	     end;

	call ioa_$ioa_switch (sw, "^|^a^/", substr (header_line, 1, retl));

	allocate mpc_stat_anal;
	print_mpc_line = "0"b;


	if ^urp_sw & ^dau_sw then do;			/* old disk & tape */
	     nonzero_cntrs = "0"b;
	     do i = 1 to 12 while (^nonzero_cntrs);
		if poll_mtp_data.polled_stat_counters (i) ^= 0 then nonzero_cntrs = "1"b;
	     end;

	     if nonzero_cntrs then do;
		call decode_mpc_stats_$stat_ctrs_ (poll_mpc_datap, mpc_stat_analp);

		call ioa_$ioa_switch (sw, "^/The LA-PSI ERROR COUNTERS contain the following information:");

		do i = 1 to mpc_stat_anal.num_ctr_interps;
		     call ioa_$ioa_switch (sw, "^a = ^d", rtrim (mpc_stat_anal.interp_stat_ctrs (i)),
			mpc_stat_anal.stat_cntr_cnt (i));
		     lines_printed = lines_printed + 1;
		end;
		print_mpc_line = "1"b;		/* remember */
		call ioa_$ioa_switch (sw, "^/");
		end;

	     end;


	else if dau_sw then do;			/* DAU? */
	     call ioa_$ioa_switch (sw, "^/Channel Interface Configuration:");
	     call ioa_$ioa_switch_nnl (sw, "^xCI-0 ^[on^;off^]line, CI-1 ^[on^;off^]line, ", poll_dau_data.ci_0_online,
		poll_dau_data.ci_1_online);
	     call ioa_$ioa_switch_nnl (sw, "^xPSI-0 ^[2^;4^]trip, PSI-1 ^[2^;4^]trip, ", poll_dau_data.psi0_2trip,
		poll_dau_data.psi1_2trip);
	     call ioa_$ioa_switch (sw, "^xPSI-2 ^[2^;4^]trip, PSI-3 ^[2^;4^]trip^/", poll_dau_data.psi2_2trip,
		poll_dau_data.psi3_2trip);
	     lines_printed = lines_printed + 6;

	     nonzero_cntrs = "0"b;
	     do i = 1 to 20 while (^nonzero_cntrs);
		if poll_dau_data.psi_cntr (i) ^= 0 then nonzero_cntrs = "1"b;
	     end;

	     if nonzero_cntrs | poll_dau_data.err_interrupts ^= 0 then do;
		call decode_mpc_stats_$dau_stat_ctrs_ (poll_mpc_datap, mpc_stat_analp);

		call ioa_$ioa_switch (sw, "^/The DAU/PSI ERROR COUNTERS contain the following information:");
		lines_printed = lines_printed + 2;

		do i = 1 to mpc_stat_anal.num_ctr_interps;
		     call ioa_$ioa_switch (sw, "^x^a = ^d", rtrim (mpc_stat_anal.interp_stat_ctrs (i)),
			mpc_stat_anal.stat_cntr_cnt (i));
		     lines_printed = lines_printed + 1;
		end;

		if poll_dau_data.ext_size ^= 0 then do;
		     call ioa_$ioa_switch (sw, "^/DAU Extended Error Info (72 Bytes):^3(^/^24( ^2.4b^)^)",
			poll_dau_data.err_info);
		     lines_printed = lines_printed + 5;
		     end;
		print_mpc_line = "1"b;		/* remember */
		call ioa_$ioa_switch (sw, "^/");
		end;

	     end;


	if nonzero_error_reg then do;
	     call decode_mpc_stats_$err_data_ (poll_mpc_datap, mpc_stat_analp);

	     if mpc_stat_anal.num_interps ^= 0 then print_mpc_line = "1"b;
						/* remember */
	     call ioa_$ioa_switch (sw, "^/The MPC ERROR DATA REGISTER contains the following information:");

	     do i = 1 to mpc_stat_anal.num_interps;
		if mpc_stat_anal.HINT (i) ^= ""
		then hint = "1"b;
		else hint = "0"b;
		call ioa_$ioa_switch (sw, "^a^[ Suspect: ^a^]", rtrim (mpc_stat_anal.message (i)), hint,
		     rtrim (mpc_stat_anal.HINT (i)));
		lines_printed = lines_printed + 1;
	     end;

	     call ioa_$ioa_switch (sw, "The last INTAR address is:^2x^4.4b", mpc_stat_anal.intar);

	     if SUBSYSTEM = "dsk"
	     then					/* AUXAR only valid for disk MPCs */
		call ioa_$ioa_switch (sw, "The last AUXAR address is:^2x^4.4b", mpc_stat_anal.auxar);
	     call ioa_$ioa_switch (sw, "ERROR INTERRUPT COUNTER = ^6d^/", mpc_stat_anal.err_ctr);
	     lines_printed = lines_printed + 5;
	     end;


	if urp_sw & ^print_mpc_line
	then call ioa_$ioa_switch (sw, "^2/No error indications encountered for MPC ^a.^2/", poll_mpc_data.name);

	if (urp_sw | mpc_only) then return;

display_eurc:
	dev_statistic (*) = 0;

	if eurc_sw then do;				/* do eurc specifics */
	     call ioa_$ioa_switch (sw, "PROM	  CORE  IOM  SPECIAL-CONTROLLER  LINK/EDIT  PDSI  SELF-TEST  DAI");
	     call ioa_$ioa_switch (sw, "REVISION^15t^2.4b^20t^2.4b^40t^2.4b^51t^2.4b^57t^2.4b^68t^2.4b^73t^2.4b",
		poll_eurc_data.core, poll_eurc_data.iom, poll_eurc_data.special_controller, poll_eurc_data.link_edit,
		poll_eurc_data.pdsi_application, poll_eurc_data.self_test, poll_eurc_data.dai_application);
	     call ioa_$ioa_switch (sw, "^/Uptime Clock-seconds ^12d^/", poll_eurc_data.uptime_clock);
	     end;

	have_stats = "0"b;

	do l = 1 to my_n_stats;
	     dev_statistic (my_stat_info (l).dev_index).counter (my_stat_info (l).stat_index) = my_stat_info (l).value;
	     if my_stat_info (l).value ^= 0 then have_stats = "1"b;
	end;

/* If no stats available, then quit */

	if ^have_stats then do;
	     call ioa_$ioa_switch (sw, "Statistics block for ^[DAU^;MPC^] ^a is empty.^/", dau_sw, poll_mpc_data.name);
	     return;
	     end;

	do i = 1 to ndev by num_to_print;
	     nprint = min (num_to_print, ndev + 1 - i);

	     if i >= nprint
	     then l = ndev;
	     else l = nprint;
	     have_stats = "0"b;
	     do j = i to l while (have_stats = "0"b);
		do k = 1 to hbound (blabel, 1);
		     if dev_statistic (j).counter (k) ^= 0 then have_stats = "1"b;
		end;
	     end;

	     if ^have_stats then go to try_next_set;

	     if (lines_printed + lines_needed) > 56 then do;
		lines_printed = 0;
		call ioa_$ioa_switch (sw, "^|^a^/", substr (header_line, 1, retl));
		end;

	     string (line) = "";
	     if eurc_sw
	     then line.title = "Device Name";

	     else line.title = "Subsystem";
	     lines_printed = lines_printed + 8;

	     if ^eurc_sw
	     then do j = 1 to nprint;
		substr (line.field (j), 3) = SUBSYSTEM || my_dev_info.subsystem (i + j - 1);
	     end;

	     else do j = 1 to nprint;
		line.field (j) = "  " || rtrim (my_dev_info.dev_name (i + j - 1));
	     end;

	     call ioa_$ioa_switch (sw, "^a", string (line));

	     string (line) = "";
	     if ^eurc_sw
	     then line.title = "Drive";

	     else line.title = "Logical Channel";

	     do j = 1 to nprint;
		pic6 = my_dev_info.driveno (i + j - 1);
		line.field (j) = pic6;
	     end;
	     call ioa_$ioa_switch (sw, "^a", string (line));

	     string (line) = "";
	     line.title = "Model";
	     do j = 1 to nprint;
		if ^eurc_sw
		then line.field (j) = my_dev_info.dev_model (i + j - 1);
		else do;
		     pic6 = cv_dec_ (my_dev_info.dev_model (i + j - 1));
		     line.field (j) = pic6;
		     end;
	     end;

	     call ioa_$ioa_switch (sw, "^a", string (line));

	     string (line) = "";

	     if eurc_sw then go to display_stats;
	     if tape_sw then do;
		if poll_mpc_data.model < 610
		then line.title = "Port";
		else line.title = "TM/Port";
		end;

	     else if dau_sw then line.title = "Port";

	     else line.title = "CA/Port";

	     do j = 1 to nprint;
		index = (i + j - 1);
		line.field (j) = "";
		if (^tape_sw | poll_mpc_data.model > 602) & ^dau_sw then do;
		     line.field (j) = "   /  ";
		     pic6 = my_dev_info.ca (index);
		     substr (line.field (j), 3, 1) = substr (pic6, 6, 1);
		     pic99 = my_dev_info.port (index);
		     substr (line.field (j), 5, 2) = pic99;
		     end;

		else do;
		     pic6 = my_dev_info.port (index);
		     line.field (j) = pic6;
		     end;
	     end;

	     call ioa_$ioa_switch (sw, "^a", string (line));

	     line.title = "OPI";
	     do j = 1 to nprint;
		line.field (j) = "";
		if my_dev_info.opi (i + j - 1)
		then line.field (j) = "    ON";
		else line.field (j) = "   OFF";
	     end;

	     call ioa_$ioa_switch (sw, "^a^/", string (line));

display_stats:
	     do k = 1 to hbound (blabel, 1);
		string (line) = "";
		line.title = blabel (k);
		field_count = 0;

		do j = 1 to nprint;
		     index = (i + j - 1);
		     field_count = dev_statistic (index).counter (k) + field_count;
		     pic6 = dev_statistic (index).counter (k);
		     line.field (j) = pic6;
		end;
		if field_count > 0 then do;
		     call ioa_$ioa_switch (sw, "^a", string (line));
		     lines_printed = lines_printed + 1;
		     end;
	     end;

	     call ioa_$ioa_switch (sw, "^/");

try_next_set:
	end;

	return;
%page;
display_mpc_:
     entry (a_poll_mpc_datap, a_sw);

	mpc_only = "1"b;
	go to start;


%page;
%include poll_mpc_data;
%page;
%include dump_mpc_data;
%page;
%include eurc_model_numbers;

     end display_mpc_data_;
