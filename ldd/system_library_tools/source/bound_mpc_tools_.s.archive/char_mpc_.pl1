/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/*
   *  CHAR_MPC_ - Procedure for locating important data in the mpc dump
   *
   *  Written origionally by Jim Bush
   *  Modified March 1977 by Larry Johnson
   *  Modified October 1980 by Rich Coppola to add mpc error counters/register
   *   addresses to mpc_data.
   *  Modified Aug 1981 by Rich Coppola to add recognition of MTP611
   *  Modified Aug 1981 by Rich Coppola to add recognition of EURC
   *  Modified Jan 1983 by Rich Coppola to correct offset for MTC501 psi error
   *   ctr.
   *  Modified Jan 1984 by Art Beattie to add boot device numbers and expand
   *   firmware revision handling in disk_char structure.
   *  Modified June 1984 by Paul Farley for DAU support and to use a pointer
   *   parameter to reference the MPC memory image.
   *  Modified March 1985 by Paul Farley to correct a problem with the calculation
   *   of the tape fw revision (fw was in error and this will allow for it).
*/

/* format: style4,delnl,insnl,ifthenstmt,indnoniterend */

char_mpc_:
     proc (image_ptr, mpc_datap);

dcl  image_ptr ptr parameter;
dcl  image (0:4095) bit (16) unal based (image_ptr);	/* MPC memory image */

dcl  (bin, fixed, addr, substr, hbound, mod) builtin;
dcl  i fixed bin;
dcl  eurc_sw bit (1) init ("0"b);
dcl  revision char (2);
dcl  hex char (16) int static options (constant) init ("0123456789ABCDEF");

dcl  (
     mtc500_char init (0000000011100000b),		/* Mtc500 characteristics table at 00E0 (hex) */
     mtc601_char init (0000001000010000b),		/* Mtc601 characteristics table at 0210 (hex) */
     mtc610_char init (0000000101010000b),		/* MTP610/611 characteristics table at 0150 (hex) */
     dsc191_char init (0000010011110000b)
     )						/* Dsc191,190 & 181 characteristics table at 04F0 (hex) */
	fixed bin (16) int static options (constant);

dcl  char_ptr ptr;

dcl  1 tape_char based (char_ptr) unaligned,
       2 mem_sze bit (16),				/* Read/write memory size */
       2 config_sw bit (16),				/* Configuration switch settings */
       2 trace_tab_p bit (16),			/* Trace table begin ptr */
       2 trace_tab_size bit (16),			/* Trace table size */
       2 trace_tab_cur bit (16),			/* Trace table current entry ptr */
       2 mpc_stat bit (16),				/* Mpc statistics table pointer */
       2 dev_stat bit (16),				/* Device statistics table pointer */
       2 rev_l_tab bit (16),				/* Revision level table? */
       2 fw_id bit (16),				/* Firmware identifacation */
       2 fw_rev,					/* Firmware revision */
         3 pad1 bit (4),
         3 lrev (2) bit (4),				/* Letter revision */
         3 srev bit (4),				/* Sub revision */
       2 as_date,					/* Assembly date */
         3 month bit (8),
         3 day bit (8),
       2 pad2 (5) bit (16);

dcl  1 disk_char based (char_ptr) unaligned,
       2 mem_sze bit (16),				/* Read/write memory size */
       2 config_sw bit (16),				/* Configuration switch settings */
       2 trace_tab_p bit (16),			/* Trace table begin ptr */
       2 trace_tab_size bit (16),			/* Trace table size */
       2 trace_tab_cur bit (16),			/* Trace table current entry ptr */
       2 mpc_stat bit (16),				/* Mpc statistics table pointer */
       2 dev_stat bit (16),				/* Device statistics table pointer */
       2 rev_l_tab bit (16),				/* Revision level table? */
       2 fw_rev_old,				/* Firmware revision */
         3 com_fw_id bit (8),				/* Common firmware identifier */
         3 srev bit (4),				/* Sub revision */
         3 lrev bit (4),				/* Letter revision */
       2 as_date,					/* Assembly date */
         3 month bit (8),
         3 day bit (8),
       2 fw_rev,					/* Firmware revision */
         3 pad1 bit (4),
         3 lrev (2) bit (4),				/* Letter revision */
         3 srev bit (4),				/* Sub revision */
       2 pad2 (3) bit (16),
       2 boot_device,				/* Boot device numbers for */
         3 la0_psi0 bit (8),				/*  each MPC channel. */
         3 la0_psi1 bit (8),
         3 la1_psi0 bit (8),
         3 la1_psi1 bit (8);

dcl  1 dau_char based (image_ptr) unaligned,		/* Config data */
       2 type bit (8),				/* = 12 HEX */
       2 hw_rev bit (8) unal,				/* DAU rev */
       2 fw_maj_rev bit (8) unal,			/* firmware rev letter */
       2 fw_sub_rev bit (8) unal;			/* firmware rev number */

%page;
	mpc_data.fw_rev = "";
	mpc_data.trace_start = 0;
	mpc_data.trace_size = 0;
	mpc_data.trace_cur = 0;
	mpc_data.dev_stat_addr = 0;
	mpc_data.config_sw = "0"b;
	mpc_data.mpc_stat_addr = 0;
	mpc_data.mpc_err_int_ctr_addr = 0;
	mpc_data.mpc_err_data_reg_addr = 0;
	mpc_data.dau_rev = "0"b;


	if mpc_data.type = "mtp" then do;
	     if mpc_data.model = 500 | mpc_data.model = 501 | mpc_data.model = 502 | mpc_data.model = 600
	     then char_ptr = addr (image (mtc500_char));
	     else if mpc_data.model = 601 | mpc_data.model = 602 then char_ptr = addr (image (mtc601_char));
	     else if mpc_data.model = 610 | mpc_data.model = 611 then char_ptr = addr (image (mtc610_char));
	     else return;				/* Don't know this one */
						/* Convert hex to dec */
	     substr (revision, 1, 1) = tape_rev_letter (tape_char.lrev (1), tape_char.lrev (2));
						/* This is the tape major revision */
	     substr (revision, 2, 1) = substr (hex, fixed (tape_char.srev, 4) + 1, 1);
						/* And sub revision */
	     mpc_data.fw_rev = revision;
	     mpc_data.trace_start = bin (tape_char.trace_tab_p);
	     mpc_data.trace_size = bin (tape_char.trace_tab_size);
	     mpc_data.trace_cur = bin (tape_char.trace_tab_cur);
	     mpc_data.dev_stat_addr = bin (tape_char.dev_stat);
	     mpc_data.config_sw = tape_char.config_sw;
	     mpc_data.mpc_stat_addr = bin (tape_char.mpc_stat);

	     if mpc_data.model = 500 | mpc_data.model = 501 | mpc_data.model = 502 | mpc_data.model = 600 then do;
		mpc_data.mpc_err_int_ctr_addr = 253;	/* 00FD */
		mpc_data.mpc_err_data_reg_addr = 254;	/* 00FE */
		end;

	     else if mpc_data.model = 601 then do;
		mpc_data.mpc_err_int_ctr_addr = 381;	/* 017D */
		mpc_data.mpc_err_data_reg_addr = 382;	/* 017E */
		end;

	     else if mpc_data.model = 610 | mpc_data.model = 611 then do;
		mpc_data.mpc_err_int_ctr_addr = 439;	/* 01B7 */
		mpc_data.mpc_err_data_reg_addr = 440;	/* 01B8 */
		end;
	     end;
	else if mpc_data.type = "msp" then do;		/* All MSPs */
	     if mpc_data.model = 800 then do;		/* DAU? */
		unspec (mpc_data.fw_rev) = "0"b || dau_char.fw_maj_rev || "0"b || dau_char.fw_sub_rev;
		mpc_data.dau_rev = dau_char.hw_rev;
		return;
		end;
	     char_ptr = addr (image (dsc191_char));

	     if disk_char.fw_rev_old.srev = "f"b4 & disk_char.fw_rev_old.lrev = "f"b4 then do;
						/* New format for disk firmware revision */
		substr (revision, 1, 1) = revision_letter (disk_char.fw_rev.lrev (1), disk_char.fw_rev.lrev (2));
		substr (revision, 2, 1) = substr (hex, fixed (disk_char.fw_rev.srev, 4) + 1, 1);
		end;
	     else do;				/* Old format for disk firmware revision */
		substr (revision, 1, 1) = revision_letter ("0"b4, disk_char.fw_rev_old.lrev);
		substr (revision, 2, 1) = substr (hex, fixed (disk_char.fw_rev_old.srev, 4) + 1, 1);
		end;

	     mpc_data.fw_rev = revision;
	     mpc_data.trace_start = bin (disk_char.trace_tab_p);
	     mpc_data.trace_size = bin (disk_char.trace_tab_size);
	     mpc_data.trace_cur = bin (disk_char.trace_tab_cur);
	     mpc_data.dev_stat_addr = bin (disk_char.dev_stat);
	     mpc_data.config_sw = disk_char.config_sw;
	     mpc_data.mpc_stat_addr = bin (disk_char.mpc_stat);
	     mpc_data.mpc_err_int_ctr_addr = 252;	/* 00FC */
	     mpc_data.mpc_err_data_reg_addr = 253;	/* 00FD */
	     end;


	else if mpc_data.type = "urp" then do;
	     eurc_sw = "0"b;
	     do i = 1 to hbound (eurc_model_numbers, 1) while (eurc_sw = "0"b);
		if mpc_data.model = eurc_model_numbers (i) then eurc_sw = "1"b;
	     end;
	     if eurc_sw = "1"b then do;
		mpc_data.fw_rev = "";		/* he doesn't have any */
		mpc_data.trace_start = 0;
		mpc_data.trace_size = 0;
		mpc_data.trace_cur = 0;
		mpc_data.dev_stat_addr = 0;
		mpc_data.config_sw = "0"b;
		mpc_data.mpc_stat_addr = 0;
		mpc_data.mpc_err_int_ctr_addr = 0;
		mpc_data.mpc_err_data_reg_addr = 0;
		end;

	     else if mpc_data.model = 2 | mpc_data.model = 600 then do;
		mpc_data.fw_rev = "";
		mpc_data.trace_start = bin ("0f00"b4);
		mpc_data.trace_size = bin ("0100"b4);
		mpc_data.trace_cur = bin (image (bin ("00af"b4)));
						/* Contents of af */
		mpc_data.dev_stat_addr = 0;
		mpc_data.config_sw = "0"b;
		mpc_data.mpc_stat_addr = 0;		/* he doesn't have any */
		mpc_data.mpc_err_int_ctr_addr = 167;	/* 00A7 */
		mpc_data.mpc_err_data_reg_addr = 168;	/* 0A8 */
		end;
	     end;
	return;

revision_letter:
     proc (msb, lsb) returns (char (1));

dcl  (msb, lsb) bit (4) unaligned;
dcl  rev_letters char (26) int static options (constant) init ("ZABCDEFGHIJKLMNOPQRSTUVWXY");

	return (substr (rev_letters, mod (fixed (msb, 4) * 16 + fixed (lsb, 4), 26) + 1, 1));
     end revision_letter;

/* The above is the proper method of getting the revision. The following is
   a kludge to get the proper tape revision. */

tape_rev_letter:
     proc (msb, lsb) returns (char (1));

dcl  (msb, lsb) bit (4) unaligned;
dcl  mtc500_rev_letters char (38) int static options (constant) init
     ("ZABCDEFGHJ??????KLM?N?P?RS??????TUVWXY");
dcl  rev_letters char (24) int static options (constant) init
     ("ZABCDEFGH?JKLMNPRSTUVWXY");

	if mpc_data.model = 500 | mpc_data.model = 501 | mpc_data.model = 502 | mpc_data.model = 600
	     then return (substr (mtc500_rev_letters, mod (fixed (msb, 4) * 16 + fixed (lsb, 4), 24) + 1, 1));
	else return (substr (rev_letters, mod (fixed (msb, 4) * 16 + fixed (lsb, 4), 24) + 1, 1));
     end tape_rev_letter;
%page;
%include dump_mpc_data;
%page;
%include eurc_model_numbers;

     end char_mpc_;
