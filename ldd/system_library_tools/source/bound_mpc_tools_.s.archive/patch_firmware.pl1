/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */

/* format: style4,delnl,insnl,^ifthendo */

/*
   PATCH_FIRMWARE: Implements the patch_firmware and dump_firmware commands.
   These commands patch and dump the contents of segments containing firmware
   modules.

   Written July 1976 by Larry Johnson.
   Modified 84June by Art Beattie to deal with DAU firmware.
   Modified March 1985 by Paul Farley to fix minor bug with DAU checking (PBF).
*/

patch_firmware:
     proc;

/* Start here for patch_firmware command */

	name = "patch_firmware";
	patch = "1"b;
	go to start;

/* Start here for dump_firmware command */

dump_firmware:
     entry;

	name = "dump_firmware";
	patch = "0"b;

/* Command starts here */

start:
	call cu_$arg_list_ptr (arg_list_ptr);
	call cu_$arg_count (nargs);
	if nargs = 0
	then do;
	     if patch
	     then call ioa_ ("Usage: ^a path cs/rw addr(hex) word1(hex) ... wordn(hex)", name);
	     else call ioa_ ("Usage: ^a path cs/rw/size addr(hex) count(hex)", name);
	     return;
	end;

	on cleanup call clean_up;

	call scan_args;

	call find_fw;

	if size_sw
	then call print_size;
	else if patch
	then call patch_fw;
	else call dump_fw;

done:
	call clean_up;
	if patch_worked
	then call ioa_ ("Patch complete.");
	return;

/* Procedure to scan argument list */

scan_args:
     proc;

	arg_name = "Pathname";			/* Need path first */
	call get_arg;
	call expand_path_ (arg_ptr, arg_len, addr (dir), addr (ename), code);
	if code ^= 0
	then do;
	     call com_err_ (code, name, "^a", arg);
	     go to done;
	end;

	arg_name = "Memory type";
	call get_arg;
	if arg = "cs"
	then cs_sw = "1"b;
	else if arg = "rw"
	then cs_sw = "0"b;
	else if ^patch & arg = "size"
	then do;
	     size_sw = "1"b;
	     return;
	end;
	else do;
	     if patch
	     then call com_err_ (0, name, "Second arg must be cs or rw, not ^a.", arg);
	     else call com_err_ (0, name, "Second arg must be cs, rw, or size, not ^a.", arg);
	     go to done;
	end;

	arg_name = "Address";
	address = get_hex_arg ();

	if ^patch
	then do;
	     arg_name = "Word count";
	     count = get_hex_arg ();
	     if count < 1
	     then do;
		call com_err_ (0, name, "Invalid word count: ^a", arg);
		go to done;
	     end;
	end;
	else do;
	     count = nargs - arg_no + 1;
	     if count = 0
	     then do;
		call com_err_ (error_table_$noarg, name, "Patch data.");
		go to done;
	     end;
	     if count > 16
	     then do;
		call com_err_ (error_table_$too_many_args, name, "Patch data.");
		go to done;
	     end;
	     do i = 1 to count;
		data (i) = get_hex_arg ();
	     end;
	end;

	return;
     end scan_args;

/* Get next argument */

get_arg:
     proc;

	call cu_$arg_ptr_rel (arg_no, arg_ptr, arg_len, code, arg_list_ptr);
	if code ^= 0
	then do;
	     call com_err_ (code, name, "^a", arg_name);
	     go to done;
	end;
	arg_no = arg_no + 1;
	return;

     end get_arg;

get_hex_arg:
     proc returns (fixed bin (35));			/* Get next argument in hex */

dcl  (i, j) fixed bin;
dcl  v fixed bin (35);

	call get_arg;
	v = 0;
	do i = 1 to length (arg);
	     j = index ("0123456789abcdef", substr (arg, i, 1));
	     if j = 0
	     then do;				/* Try caps */
		j = index ("ABCDEF", substr (arg, i, 1));
		if j = 0
		then do;				/* Still not found */
		     call com_err_ (0, name, "Invalid hexadecimal number: ^a", arg);
		     go to done;
		end;
		j = j + 10;
	     end;
	     v = 16 * v + j - 1;
	     if v > 1111111111111111b
	     then do;				/* Too big */
		call com_err_ (0, name, "Hexadecimal number not in range 0-FFFF: ^a", arg);
		go to done;
	     end;
	end;
	return (v);

     end get_hex_arg;

/* Procedure to initiate the firmware segment and decode it */

find_fw:
     proc;

	call hcs_$initiate_count (dir, ename, "", bit_count, 0, seg_ptr, code);
	if seg_ptr = null
	then do;
	     call com_err_ (code, name, "^a>^a", dir, ename);
	     go to done;
	end;

	word_count = divide (bit_count, 36, 17, 0);

	if word_count ^> 10
	then do;
	     call com_err_ (0, name, "Segment too small to be firmware segment.");
	     go to done;
	end;
	if seg (word_count) ^= mpcbot
	then do;					/* Check magic word */
	     call com_err_ (0, name, "Last word of segment does not contain ^12.3b, which is is BCD for 'MPCBOT'.",
		mpcbot);
	     go to done;
	end;

	call gcos_cv_gebcd_ascii_ (addr (seg (word_count - 7)), 6, addr (fw_type));
	call gcos_cv_gebcd_ascii_ (addr (seg (word_count - 9)), 6, addr (fw_ident));
	call gcos_cv_gebcd_ascii_ (addr (seg (word_count - 6)), 4, addr (fw_name));
	call gcos_cv_gebcd_ascii_ (addr (seg (word_count - 8)), 6, addr (fw_rev));

	if fw_ident = "msp800"
	then do;					/* DAU firmware has to be handled differently. */
	     dau_sw = "1"b;
	     dau_factor = 2;
	     word_length = 8;
	     words_per_line = 16;
	end;
	else do;					/* Normal stuff */
	     dau_sw = "0"b;
	     dau_factor = 1;
	     word_length = 16;
	     words_per_line = 8;
	end;

/* Even if DAU firmware, need to have the following. */

	cs_start = 1;				/* Control store starts in beginning */
	rw_start = bin (substr (seg (word_count - 5), 1, 18), 18);
						/* RW start is hidden here */
	if rw_start = 0
	then do;					/* No rw overlay, probably itr */
	     cs_length = word_count - 10;		/* Whole seg is control store */
	     rw_length = 0;				/* This says no read write overlay */
	end;
	else do;
	     cs_length = rw_start;			/* Control store is everything before read/write */
	     rw_length = word_count - rw_start - 10;
	     rw_start = rw_start + 1;			/* Because array starts at 1 */
	end;

	if ((rw_length > 0) | substr (fw_type, 4) = "itr") & fw_type ^= "msp800"
	then					/* If itr, or common firmware but not DAU */
	     cs_low = 512;				/* Adjust control store start */
	else cs_low = 0;
	cs_high = cs_low + 2 * cs_length * dau_factor - 1;
	rw_low = 0;
	if rw_length > 0
	then rw_high = rw_low + 2 * rw_length * dau_factor - 1;
	else rw_high = 0;

	if size_sw
	then return;				/* If just printing size, no more analysis needed */

/* Now that memory overlays are isolated, be sure request is consistent */

	if dau_sw
	then do;
	     fw_low = cs_low;
	     fw_high = cs_high + rw_high + 1;
	     mem_name = "dau";
	end;

	else if cs_sw
	then do;					/* Working with control store */
	     fwp = addr (seg (cs_start));
	     fw_low = cs_low;
	     fw_high = cs_high;
	     mem_name = "control store";		/* In case error printed */
	end;
	else do;
	     if rw_start = 0
	     then do;				/* R/W overlay non-existant */
		call com_err_ (0, name, "No read/write overlay in segment.");
		go to done;
	     end;
	     fwp = addr (seg (rw_start));
	     fw_low = rw_low;
	     fw_high = rw_high;
	     mem_name = "read/write";
	end;

	if ^patch
	then addr_limit = fw_high;			/* Allow dump of entire module */
	else addr_limit = fw_high - 2 * dau_factor;	/* But don't allow patch of checksum word  */

	if address < fw_low | address > addr_limit
	then do;					/* Bad addr */
	     call com_err_ (0, name, "Starting address not in ^a memory. Range is ^.4b:^.4b", mem_name,
		bit (bin (fw_low, 16), 16), bit (bin (addr_limit, 16), 16));
	     go to done;
	end;
	if address + count - 1 > addr_limit
	then do;
	     call com_err_ (0, name, "Ending address not in ^a memory. Range is ^.4b:^.4b", mem_name,
		bit (bin (fw_low, 16), 16), bit (bin (addr_limit, 16), 16));
	     go to done;
	end;

	if dau_sw
	then do;

	     rw_low = cs_high + 1;
	     rw_high = rw_low + rw_high;
	     daup = addr (seg (1));
	     dau_low = 0;
	     dau_high = rw_high;

	     if patch
	     then do i = cs_high - 3 to cs_high;
		if i >= address & i <= address + count - 1
		then do;
		     call com_err_ (0, name, "Cannot patch checksum for part one of the DAU firmware; ^.4b:^.4b",
			bit (bin (cs_high - 3, 16), 16), bit (bin (cs_high, 16), 16));
		     go to done;
		end;
	     end;					/* check for patching checksum for lower part */
						/* This has to be done on both parts of DAU firmware. */
	     fw_low = 0;
	     fw_high = 2 * cs_length - 1;		/* Checksum is done using MPC word length (16 bits) */
	     fwp = addr (seg (1));
	     call compute_checksum;

	     if get_word (fw_high - 1) ^= checksum
	     then do;
		call com_err_ (0, name, "Checksum for lower part of DAU firmware is not correct.");
		go to done;
	     end;

	     fwp = addr (seg (rw_start));
	     fw_high = 2 * rw_length - 1;
	     call compute_checksum;

	     if get_word (fw_high - 1) ^= checksum
	     then do;
		call com_err_ (0, name, "Checksum for upper part of DAU firmware is not correct.");
		go to done;
	     end;
	end;					/* dau firmware checksum check */

	else do;
	     call compute_checksum;			/* Be sure checksum starts correct */
	     if get_word (fw_high - 1) ^= checksum
	     then do;
		call com_err_ (0, name, "Checksum for ^a is not correct.", mem_name);
		go to done;
	     end;
	end;					/* normal firmware checksum check */

	return;

     end find_fw;

/* Procedure that can get a DAU firmware word */

get_dau_word:
     proc (get_address) returns (bit (16));

dcl  get_address fixed bin;

	return (dau.byte (get_address) || "00"b4);

     end get_dau_word;


/* Procedure that can reconstruct a firmware word */

get_mpc_word:
     proc (get_address) returns (bit (16));

dcl  get_address fixed bin;

	return (fw.byte1 (get_address) || fw.byte2 (get_address));

     end get_mpc_word;


/* Procedure which can store a DAU firmware word */

put_dau_word:
     proc (address, new_word);

dcl  (address) fixed bin;
dcl  new_word bit (16);

	dau.byte (address) = substr (new_word, 1, 8);

     end put_dau_word;


/* Procedure which can store a mpc firmware word */

put_mpc_word:
     proc (address, new_word);

dcl  address fixed bin;
dcl  new_word bit (16);

	fw.byte1 (address) = substr (new_word, 1, 8);
	fw.byte2 (address) = substr (new_word, 9, 8);

     end put_mpc_word;


/* Procedure that can compute a checksum from a mpc memory image */

compute_checksum:
     proc;

dcl  sum fixed bin (35);
dcl  i fixed bin;

	get_word = get_mpc_word;
	sum = 0;
	do i = 0 to fw_high - 2;
	     sum = sum + bin (get_word (i), 16);
	     do while (sum > 1111111111111111b);
		sum = sum - 10000000000000000b;
		sum = sum + 1;
	     end;
	end;
	sum = -sum;
	checksum = substr (unspec (sum), 21);		/* Get last 16 bits */
	return;

     end compute_checksum;

/* Procedure to copy a firmware overlay as a character string for efficiency */

copy_fw:
     proc (from_ptr, to_ptr);

dcl  (from_ptr, to_ptr) ptr;
dcl  char_len fixed bin;
dcl  char_overlay char (char_len) based;

	char_len = 2 * (fw_high - fw_low + 1);
	to_ptr -> char_overlay = from_ptr -> char_overlay;
	return;

     end copy_fw;

/* Procedure that can dump firmware words */

dump_fw:
     proc;

dcl  buffer (words_per_line) bit (word_length) aligned;
dcl  nwords fixed bin;
dcl  based_buffer (nwords) bit (word_length) aligned based (addr (buffer));
dcl  i fixed bin;
dcl  dump_fw_display char (64);

	if dau_sw
	then do;
	     get_word = get_dau_word;
	     dump_fw_display = "^4.4b   ^(^2.4b ^)";
	end;
	else do;
	     get_word = get_mpc_word;
	     dump_fw_display = "^4.4b   ^(^4.4b ^)";
	end;

	do while (count > 0);
	     nwords = min (words_per_line, count);	/* Words this line */
	     do i = 1 to nwords;
		buffer (i) = get_word (address + i - 1);
	     end;
	     call ioa_ (dump_fw_display, bit (bin (address, 16), 16), based_buffer);
	     count = count - nwords;
	     address = address + nwords;
	end;
	return;

     end dump_fw;

/* Procedure to patch firmware */

patch_fw:
     proc;

dcl  (real_fwp, temp_fwp) ptr;
dcl  (i, patch_address) fixed bin;
dcl  new_dat bit (16);
dcl  answer char (3) var;
dcl  patch_data_display char (64);
dcl  dau_base fixed bin;
dcl  patch_checksum_display char (64);
dcl  ctrl_checksum_display fixed bin;

dcl  1 query_info aligned,
       2 version fixed bin init (2),
       2 yes_or_no bit (1) unal init ("1"b),
       2 suppress_name bit (1) unal init ("0"b),
       2 status_code fixed bin (35) init (0),
       2 query_code fixed bin (35) init (0);

	if dau_sw
	then do;
	     patch_data_display = "^4.4b  ^2.4b to ^2.4b";
	     get_word = get_dau_word;
	     put_word = put_dau_word;
	     if address < rw_low			/* patching either lower or upper but not both */
	     then do;
		fwp = addr (seg (1));
		fw_high = 2 * cs_length - 1;
		ctrl_checksum_display = 2;
		dau_base = 0;
	     end;
	     else do;
		fwp = addr (seg (rw_start));
		fw_high = 2 * rw_length - 3;
		ctrl_checksum_display = 3;
		dau_base = rw_low;
		address = address - dau_base;
	     end;
	end;
	else do;
	     patch_data_display = "^4.4b  ^4.4b to ^4.4b";
	     get_word = get_mpc_word;
	     put_word = put_mpc_word;
	     ctrl_checksum_display = 1;
	end;

	call get_temp_segments_ (name, ptr_array, code);	/* Get seg for temp copy */
	if code ^= 0
	then do;
	     call com_err_ (code, name, "Unable to allocate temp segment.");
	     go to done;
	end;
	temp_fwp = ptr_array (1);
	call copy_fw (fwp, temp_fwp);			/* Copy only the section of */
						/* firmware that will be changed */
	real_fwp = fwp;				/* Save pointer to old data */
	fwp = temp_fwp;				/* The "fw" structure now defines temp copy */
	daup = temp_fwp;
	patch_checksum_display = "^4.4b  ^4.4b to ^4.4b (^[^;lower ^;upper ^]checksum)";

	do i = 1 to count;				/* Print changes */
	     patch_address = address + i - 1;
	     if dau_sw
	     then new_dat = bit (bin (data (i), 8), 16);
	     else new_dat = bit (bin (data (i), 16), 16);
	     call ioa_ (patch_data_display, bit (bin (patch_address + dau_base, 16), 16), get_word (patch_address),
		new_dat);
	     call put_word (patch_address, new_dat);	/* This makes the patch */
	end;

	check_addr = fw_high - 1;
	call compute_checksum;			/* Get checksum for patched module */
	call ioa_ (patch_checksum_display, bit (bin (check_addr * dau_factor + dau_base, 16), 16),
	     get_mpc_word (check_addr), checksum, ctrl_checksum_display);
	call put_mpc_word (check_addr, checksum);

	call command_query_ (addr (query_info), answer, name, "Type yes if patches are correct -- ");
	if answer ^= "yes"
	then return;				/* Bad patch */
	call copy_fw (temp_fwp, real_fwp);		/* Replace firmware */
	fwp = real_fwp;
	call compute_checksum;			/* Recalculate checksum, just to be sure */
	if get_word (check_addr) ^= checksum
	then do;					/* Logically, this can't fail, but... */
	     call com_err_ (0, name, "Firmware patched incorrectly. ^a now has a bad checksum.", ename);
	     go to done;
	end;
	patch_worked = "1"b;
	return;

     end patch_fw;

/* Procedure to print sizes of memory overlays */

print_size:
     proc;

	call ioa_ ("Firmware type: ^a,^a ^a (^a)", fw_type, fw_ident, fw_name, fw_rev);
	if dau_sw					/* There are four bytes that cannot be used in the middle */
	then call print_size_subr ("DAU", cs_start, cs_length + rw_length, cs_low, cs_high + rw_high + 1 - 4);
	else do;
	     call print_size_subr ("Control store", cs_start, cs_length, cs_low, cs_high - 2);
	     call print_size_subr ("Read/write", rw_start, rw_length, rw_low, rw_high - 2);
	end;
	return;

     end print_size;

print_size_subr:
     proc (mem_nm, start, len, low_adr, up_adr);

dcl  mem_nm char (*);
dcl  (start, len, low_adr, up_adr) fixed bin;

	if len = 0
	then do;
	     call ioa_ ("No ^a overlay.", mem_nm);
	     return;
	end;

	call ioa_ ("^a overlay at ^a|^o for ^d Multics words, ^.4b MPC(hex) words (addresses ^.4b:^.4b).", mem_nm,
	     ename, start - 1, len, bit (bin (up_adr - low_adr + 1, 16), 16), bit (bin (low_adr, 16), 16),
	     bit (bin (up_adr, 16), 16));
	return;

     end print_size_subr;



/* Cleanup handler */

clean_up:
     proc;

	if seg_ptr ^= null
	then call hcs_$terminate_noname (seg_ptr, code);
	if ptr_array (1) ^= null
	then call release_temp_segments_ (name, ptr_array, code);
	return;

     end clean_up;

%page;
dcl  get_word entry (fixed bin) returns (bit (16)) variable;
dcl  put_word entry (fixed bin, bit (16)) variable;
dcl  name char (16);				/* Name called by */
dcl  code fixed bin (35);
dcl  arg_ptr ptr;
dcl  arg_len fixed bin;
dcl  arg char (arg_len) based (arg_ptr);
dcl  arg_list_ptr ptr;
dcl  nargs fixed bin;
dcl  patch bit (1);					/* 1 for patch, 0 for dump */
dcl  arg_no fixed bin init (1);
dcl  arg_name char (16);
dcl  data (16) fixed bin;
dcl  dau_factor fixed bin;				/* DAU addresses twice that of normal firmware */
dcl  word_length fixed bin;
dcl  words_per_line fixed bin;			/* for displaying memory */
dcl  cs_sw bit (1);					/* 1 for control store, 0 for read/write */
dcl  dau_sw bit (1) init ("0"b);			/* 1 for DAU firmware, 0 for everthing else */
dcl  address fixed bin;
dcl  dir char (168);
dcl  ename char (32);
dcl  i fixed bin;
dcl  count fixed bin;
dcl  cs_start fixed bin;				/* offset of cs in fw module in Multics words */
dcl  cs_length fixed bin;				/* length of cs in Multics words */
dcl  rw_start fixed bin;				/* offset of rw in fw module in Multics words */
dcl  rw_length fixed bin;				/* length of rw in Multics words */
dcl  word_count fixed bin;
dcl  bit_count fixed bin (24);
dcl  mem_name char (16);
dcl  seg_ptr ptr init (null);
dcl  (cs_low, cs_high) fixed bin;			/* Range of valid control store addresses */
dcl  (rw_low, rw_high) fixed bin;			/* Range of valid read/write addresses */
dcl  (dau_low, dau_high) fixed bin;			/* Range for current overlay in DAU words */
dcl  (fw_low, fw_high) fixed bin;			/* Range for current overlay in MPC words */
dcl  fw_type char (6);				/* Type of firmware, decoded from bcd */
dcl  fw_ident char (6);				/* Firmware ident field, decoded from bcd */
dcl  fw_name char (4);
dcl  fw_rev char (6);
dcl  daup ptr;
dcl  fwp ptr;
dcl  checksum bit (16);
dcl  check_addr fixed bin;				/* Address of the checksum word */
dcl  ptr_array (1) ptr init (null);
dcl  patch_worked bit (1) init ("0"b);
dcl  size_sw bit (1) init ("0"b);
dcl  addr_limit fixed bin;

dcl  mpcbot bit (36) aligned int static options (constant) init ("100100100111010011010010100110110011"b);
						/* Bcd for MPCBOT */

dcl  seg (word_count) bit (36) aligned based (seg_ptr);	/* Entire segment */

dcl  1 dau based (daup),
       2 dau_word (dau_low:dau_high) unal,
         3 fill bit (1),
         3 byte bit (8);

dcl  1 fw based (fwp),				/* A memory overlay */
       2 fw_word (fw_low:fw_high) unal,
         3 fill1 bit (1) unal,
         3 byte1 bit (8) unal,
         3 fill2 bit (1) unal,
         3 byte2 bit (8) unal;

dcl  cu_$arg_list_ptr entry (ptr);
dcl  cu_$arg_count entry (fixed bin);
dcl  cu_$arg_ptr_rel entry (fixed bin, ptr, fixed bin, fixed bin (35), ptr);
dcl  ioa_ entry options (variable);
dcl  com_err_ entry options (variable);
dcl  expand_path_ entry (ptr, fixed bin, ptr, ptr, fixed bin (35));
dcl  hcs_$initiate_count entry (char (*), char (*), char (*), fixed bin (24), fixed bin (2), ptr, fixed bin (35));
dcl  hcs_$terminate_noname entry (ptr, fixed bin (35));
dcl  get_temp_segments_ entry (char (*), dim (*) ptr, fixed bin (35));
dcl  release_temp_segments_ entry (char (*), dim (*) ptr, fixed bin (35));
dcl  command_query_ entry options (variable);
dcl  gcos_cv_gebcd_ascii_ entry (ptr, fixed bin, ptr);

dcl  error_table_$noarg ext fixed bin (35);
dcl  error_table_$too_many_args ext fixed bin (35);

dcl  cleanup condition;

dcl  (addr, bin, bit, divide, index, length, min, null, substr, unspec) builtin;

     end patch_firmware;
