/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* format: style4,delnl,insnl,ifthenstmt,indnoniterend */

/* DECODE_MPC_STATS_ - Decode MPC counters and registers.
   coded December 1980 by Rich Coppola	*/
/* Modified June 1984 by Paul Farley for DAU (MSP800) support */

decode_mpc_stats_:
     proc;


/* Arguments */

dcl  a_poll_mpc_datap ptr;				/* pointer to mpc data structure */
dcl  a_mpc_data_summaryp ptr;				/* pointer to mpc data summary structure */


/* AUTOMATIC */

dcl  (i, j) fixed bin;
dcl  my_mpc_stat_analp ptr;
dcl  error_reg bit (16);

/* STATIC */


dcl  mpc_stat_name (12) char (18) static options (constant)
	init ("LA0-PSI0 Parities", "LA0-PSI0 OPI Drops", "LA0-PSI1 Parities", "LA0-PSI1 OPI Drops", "LA1-PSI0 Parities",
	"LA1-PSI0 OPI Drops", "LA1-PSI1 Parities", "LA1-PSI1 OPI Drops", " ", "LA0 Alert Counter", " ",
	"LA1 Alert Counter");

dcl  dau_stat_name (20) char (18) static options (constant)
	init ("PSI0 OPI Drops", "PSI1 OPI Drops", "PSI2 OPI Drops", "PSI3 OPI Drops", "PSI0 OPO Drops",
	"PSI1 OPO Drops", "PSI2 OPO Drops", "PSI3 OPO Drops", "PSI0 Time-outs", "PSI1 Time-outs", "PSI2 Time-outs",
	"PSI3 Time-outs", "PSI0 IIW Faults", "PSI1 IIW Faults", "PSI2 IIW Faults", "PSI3 IIW Faults",
	"PSI0 Parity Errors", "PSI1 Parity Errors", "PSI2 Parity Errors", "PSI3 Parity Errors");

dcl  err_reg_name (16) char (43) static options (constant)
	init ("POWER WARNING (Bit 0)", "X/Y OPERAND PARITY (Bit 1)", "FUNCTIONAL NETWORK (Bit 2)", "",
	"INTERVAL TIMER PARITY (Bit 4)", "INTERVAL TIMER EXHAUST (Bit 5)", "EXTERNAL PARITY (Bit 6)",
	"BRANCH TEST REGISTER PARITY (Bit 7)", "ERROR TIMEOUT (Bit 8)", "MAIN MEMORY (Bit 9)",
	"DAI NON-OPERATIONAL PORT (Bit 10)", "ROSAR PARITY (Bit 11)", "ROR PARITY (Bit 12)", "ROS NOT PRESENT (Bit 13)",
	"SIM ERROR INTERRUPT (bit 14)", "ERROR TIMEOUT WHILE INHIBITING EN1 (Bit 15)");

dcl  err_reg_hint (16) char (21) static options (constant)
	init ("", "FN WWB.", "FN WWB.", "", "IM WWB.", "", "MOS or RA WWBs.", "FN WWB or CA problem.", "LA WWB.",
	"MOS WWB.", "", "RA WWB.", "Control Store WWB(s).", "", "", "");

/* BUILTINS */

dcl  (addr, substr) builtin;

	return;					/* do not enter here */
%page;
stat_ctrs_:
     entry (a_poll_mpc_datap, my_mpc_stat_analp);

	mpc_stat_analp = my_mpc_stat_analp;
	poll_mpc_datap = a_poll_mpc_datap;
	poll_mpc_specp = addr (poll_mpc_data.specific);
	j = 0;

	do i = 1 to 12;				/* cycle thru all counters */
	     if poll_mtp_data.polled_stat_counters (i) ^= 0 then do;
		j = j + 1;
		mpc_stat_anal.interp_stat_ctrs (j) = mpc_stat_name (i);
		mpc_stat_anal.stat_cntr_cnt (j) = poll_mtp_data.polled_stat_counters (i);
		end;
	end;

	mpc_stat_anal.num_ctr_interps = j;

	return;
%page;
dau_stat_ctrs_:
     entry (a_poll_mpc_datap, my_mpc_stat_analp);

	mpc_stat_analp = my_mpc_stat_analp;
	poll_mpc_datap = a_poll_mpc_datap;
	poll_mpc_specp = addr (poll_mpc_data.specific);
	j = 0;

	do i = 1 to 20;				/* cycle thru all counters */
	     if poll_dau_data.psi_cntr (i) ^= 0 then do;
		j = j + 1;
		mpc_stat_anal.interp_stat_ctrs (j) = dau_stat_name (i);
		mpc_stat_anal.stat_cntr_cnt (j) = poll_dau_data.psi_cntr (i);
		end;
	end;

	if poll_dau_data.err_interrupts ^= 0 then do;
	     j = j + 1;
	     mpc_stat_anal.interp_stat_ctrs (j) = "Error Interrupts";
	     mpc_stat_anal.stat_cntr_cnt (j) = poll_dau_data.err_interrupts;
	     end;

	mpc_stat_anal.num_ctr_interps = j;

	return;
%page;
/* **********************************************************
   *   This entry is used to receive a decode of the error   *
   *   data register only				   *
   ********************************************************** */

err_data_:
     entry (a_poll_mpc_datap, my_mpc_stat_analp);

	mpc_stat_analp = my_mpc_stat_analp;
	poll_mpc_datap = a_poll_mpc_datap;
	poll_mpc_specp = addr (poll_mpc_data.specific);
	j = 0;

	if substr (poll_mpc_data.name, 1, 3) = "urp" then do;
						/* old URP controller */
	     error_reg = poll_urp_data.register;
	     mpc_stat_anal.auxar = "0"b;
	     mpc_stat_anal.intar = poll_urp_data.INTAR;
	     mpc_stat_anal.err_ctr = poll_urp_data.interrupt_counter;
	     end;
	else do;					/* old disk or tape controller */
	     error_reg = poll_mtp_data.register;
	     mpc_stat_anal.auxar = poll_mtp_data.AUXAR;
	     mpc_stat_anal.intar = poll_mtp_data.INTAR;
	     mpc_stat_anal.err_ctr = poll_mtp_data.interrupt_counter;
	     end;

	do i = 1 to 16;
	     if substr (error_reg, i, 1) = "1"b then do;
		j = j + 1;
		mpc_stat_anal.message (j) = err_reg_name (i);
		mpc_stat_anal.HINT (j) = err_reg_hint (i);
		end;
	end;

	mpc_stat_anal.num_interps = j;
	return;

%page;
stat_ctrs_for_summary_:
     entry (a_mpc_data_summaryp, my_mpc_stat_analp);

	mpc_stat_analp = my_mpc_stat_analp;
	mpc_data_summaryp = a_mpc_data_summaryp;
	j = 0;

	do i = 1 to 12;				/* cycle thru all counters */
	     if mpc_data_summary.polled_stat_counters (i) ^= 0 then do;
		j = j + 1;
		mpc_stat_anal.interp_stat_ctrs (j) = mpc_stat_name (i);
		mpc_stat_anal.stat_cntr_cnt (j) = mpc_data_summary.polled_stat_counters (i);
		end;
	end;

	mpc_stat_anal.num_ctr_interps = j;

	return;
%page;
dau_stat_ctrs_for_summary_:
     entry (a_mpc_data_summaryp, my_mpc_stat_analp);

	mpc_stat_analp = my_mpc_stat_analp;
	mpc_data_summaryp = a_mpc_data_summaryp;
	j = 0;

	do i = 1 to 20;				/* cycle thru all counters */
	     if mpc_data_summary.psi_cntr (i) ^= 0 then do;
		j = j + 1;
		mpc_stat_anal.interp_stat_ctrs (j) = dau_stat_name (i);
		mpc_stat_anal.stat_cntr_cnt (j) = mpc_data_summary.psi_cntr (i);
		end;
	end;

	if mpc_data_summary.err_interrupts ^= 0 then do;
	     j = j + 1;
	     mpc_stat_anal.interp_stat_ctrs (j) = "Error Interrupts";
	     mpc_stat_anal.stat_cntr_cnt (j) = mpc_data_summary.err_interrupts;
	     end;

	mpc_stat_anal.num_ctr_interps = j;

	return;
%page;
/* **********************************************************
   *   This entry is used to receive a decode of the error   *
   *   data register only				   *
   ********************************************************** */

err_data_for_summary_:
     entry (a_mpc_data_summaryp, my_mpc_stat_analp);

	mpc_stat_analp = my_mpc_stat_analp;
	mpc_data_summaryp = a_mpc_data_summaryp;
	j = 0;

	if substr (mpc_data_summary.name, 1, 3) = "urp" then do;
						/* old URP controller */
	     error_reg = mpc_data_summary.register;
	     mpc_stat_anal.auxar = "0"b;
	     mpc_stat_anal.intar = mpc_data_summary.INTAR;
	     mpc_stat_anal.err_ctr = mpc_data_summary.interrupt_counter;
	     end;
	else do;					/* old disk or tape controller */
	     error_reg = mpc_data_summary.register;
	     mpc_stat_anal.auxar = mpc_data_summary.AUXAR;
	     mpc_stat_anal.intar = mpc_data_summary.INTAR;
	     mpc_stat_anal.err_ctr = mpc_data_summary.interrupt_counter;
	     end;

	do i = 1 to 16;
	     if substr (error_reg, i, 1) = "1"b then do;
		j = j + 1;
		mpc_stat_anal.message (j) = err_reg_name (i);
		mpc_stat_anal.HINT (j) = err_reg_hint (i);
		end;
	end;

	mpc_stat_anal.num_interps = j;
	return;

%page;
%include poll_mpc_data;
%page;
%include dump_mpc_data;

     end decode_mpc_stats_;
