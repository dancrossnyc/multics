/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* LOAD_MPC_FW_INFO_ - Subroutine used by the load_mpc command to locate firmware for an MPC. */
/* Given an MPC type, a model, and an optional firmware revisions, this module will locate the
   proper firmware in the T & D deckfile. */
/* Written February 1980 by Larry Johnson */
/* Modified October 1982 by C. Hornig for new config tools.
   /* Modified November 1982 by Rich Coppola to correct disk MPC model recognition
   which somehow got removed. */
/* Modified June 1984 by Paul Farley to add DAU (MSP800) support. */
/* Modified Nov. 1984 by Paul Farley to allow for a CCU (read/punch), see phx18465. */

/* format: style4,indattr,insnl,delnl */

load_mpc_fw_info_:
     proc (arg_mpcp, arg_fw_revision, arg_itr_needed, arg_fw_needed, arg_fwlistp, arg_code);

/* Parameters */

dcl  arg_mpcp	        ptr;
dcl  arg_fw_revision        char (*);
dcl  arg_code	        fixed bin (35);
dcl  arg_fwlistp	        ptr;
dcl  arg_itr_needed	        bit (1);
dcl  arg_fw_needed	        bit (1);

/* Automatic */

dcl  mpc_type	        char (3);
dcl  model	        fixed bin;
dcl  fw_mpc_name	        char (6);
dcl  cata_key	        char (32);
dcl  fw_revision	        char (2);
dcl  code		        fixed bin (35);
dcl  (i, j, k)	        fixed bin;
dcl  temp_string	        char (64) var;
dcl  answer	        char (32) var;
dcl  rv		        char (2);
dcl  module_listp	        ptr;
dcl  found_itr	        bit (1);
dcl  found_fw	        bit (1);
dcl  found_dev	        bit (1);
dcl  deck_ptr	        ptr;
dcl  fwsegp	        ptr;
dcl  fwsegl	        fixed bin;
dcl  rw_index	        fixed bin;
dcl  deck_iocbp	        ptr;
dcl  needed	        bit (1);
dcl  chan		        fixed bin (6);
dcl  dev_fw_err	        bit (1);
dcl  dev_fw_fnd	        bit (1);

dcl  1 cata_list	        aligned,
       2 n	        fixed bin,
       2 keys	        (10) char (24) unal;

dcl  1 module_list	        aligned based (module_listp),
       2 n	        fixed bin,
       2 name	        (0 refer (module_list.n)) char (24) unal;

dcl  fwseg	        (fwsegl) bit (36) aligned based (fwsegp);

/* Constants */

dcl  name		        char (8) int static options (constant) init ("load_mpc");
						/* I am really part of this guy */
dcl  MPCBOT	        bit (36) int static options (constant) init ("444723224663"b3);
						/* BCD for "MPCBOT" */

/* External */

dcl  tolts_util_$cata_sel   entry (ptr, char (32), ptr, fixed bin (35));
dcl  tolts_util_$search     entry (ptr, char (32), ptr, fixed bin, fixed bin (35));
dcl  command_query_	        entry options (variable);
dcl  com_err_	        entry options (variable);
dcl  get_temp_segment_      entry (char (*), pointer, fixed bin (35));
dcl  release_temp_segment_  entry (char (*), pointer, fixed bin (35));
dcl  gload_	        entry (ptr, ptr, fixed bin (18), ptr, fixed bin (35));
dcl  iox_$close	        entry (ptr, fixed bin (35));
dcl  iox_$detach_iocb       entry (ptr, fixed bin (35));
dcl  find_config_card_$prph_for_channel
		        entry (fixed bin (3), fixed bin (6), ptr);

dcl  error_table_$bad_arg   ext fixed bin (35);
dcl  error_table_$noentry   ext fixed bin (35);

dcl  cleanup	        condition;

dcl  (addr, bin, hbound, null, substr, unspec)
		        builtin;
%page;
	mpc_cardp = arg_mpcp;
	mpc_type = substr (mpc_card.name, 1, 3);
	model = mpc_card.model;
	fw_revision = arg_fw_revision;
	fwlistp = null ();
	deck_iocbp = null ();

	on cleanup call clean_up;

/* Tranlate the mpc name and model as Multics knows it to the name T&D knows it by. */

	if mpc_type = "urp"
	then fw_mpc_name = "urcmpc";
	else if mpc_type = "mtp" then do;
	     if model = 500 | model = 501 | model = 502 | model = 600
	     then fw_mpc_name = "mtc500";
	     else if model = 601 | model = 602
	     then fw_mpc_name = "mtp601";
	     else if model = 610 | model = 611
	     then fw_mpc_name = "mtp610";
	     else go to unknown_model;
	end;
	else if mpc_type = "msp" then do;
	     if model = 181
	     then fw_mpc_name = "dsc181";
	     else if model = 190
	     then fw_mpc_name = "dsc190";
	     else if model = 191 | model = 400 | model = 450 | model = 451 | model = 601 | model = 603
	     then fw_mpc_name = "dsc191";
	     else if model = 607 | model = 609 | model = 611 | model = 612 | model = 500
	     then fw_mpc_name = "dsc500";
	     else if model = 800
	     then fw_mpc_name = "msp800";		/* DAU */
	     else go to unknown_model;
	end;
	else do;
unknown_model:
	     call com_err_ (0, name, "Firmware type for ^a model ^d not known.", mpc_type, model);
	     code = error_table_$bad_arg;
	     go to error_return;
	end;

/* Locate firmware in the T&D deckfile */

	cata_key = "cata.itr." || fw_mpc_name;

	call tolts_util_$cata_sel (deck_iocbp, cata_key, addr (cata_list), code);
	if code ^= 0 then do;
	     call com_err_ (code, name, "Unable to find catalog for ^a firmware for ^a model ^d.", fw_mpc_name,
		mpc_type, model);
	     go to error_return;
	end;

/* Check requested revision against whats in file */

	temp_string = "";
	do i = 1 to cata_list.n;
	     if i > 1
	     then temp_string = temp_string || ", ";
	     rv = extract_rev (cata_list.keys (i));
	     if fw_revision ^= ""
	     then if fw_revision = rv then do;
		     cata_key = cata_list.keys (i);
		     go to got_key;
		end;
	     temp_string = temp_string || rv;
	end;
	if fw_revision ^= "" then do;
	     call com_err_ (0, name,
		"^a firmware revison ^a for ^a model ^d not found. Revision^[s^] available ^[is^;are^]: ^a.",
		fw_mpc_name, fw_revision, mpc_type, model, (cata_list.n ^= 1), (cata_list.n = 1), temp_string);
	     code = error_table_$noentry;
	     go to error_return;
	end;
	if cata_list.n = 1 then do;			/* If only 1, use it */
	     cata_key = cata_list.keys (1);
	     fw_revision = extract_rev (cata_list.keys (1));
	     go to got_key;
	end;

/* Multiple revision exists, and user didn't specify. So ask. */

	temp_string = temp_string || ", or no.";

repeat:
	query_info.version = query_info_version_4;
	call command_query_ (addr (query_info), answer, name,
	     "Multiple revisions of ^a firmware for ^a model ^d. Choose from ^a - ", fw_mpc_name, mpc_type, model,
	     temp_string);
	if answer = "no" | answer = "quit" | answer = "q" then do;
	     code = error_table_$noentry;
	     go to error_return;
	end;

	do i = 1 to cata_list.n;
	     if answer = extract_rev (cata_list.keys (i)) then do;
		cata_key = cata_list.keys (i);
		fw_revision = answer;
		go to got_key;
	     end;
	end;
	go to repeat;

/* Now that revision is decided, find catalog entry for it. */

got_key:
	call tolts_util_$search (deck_iocbp, cata_key, module_listp, (0), code);
	if code ^= 0 then do;
	     call com_err_ (code, name, "Unable to find catalog for ^a. Deckfile may be damaged.", cata_key);
	     go to error_return;
	end;

/* Now identify each of the programs */

	fwlist_n = module_list.n;
	allocate fwlist;

	found_itr, found_fw, found_dev = "0"b;

	do i = 1 to module_list.n;
	     fwep = addr (fwlist.entry (i));
	     fwe.name = module_list.name (i);
	     fwe.segp = null ();
	     fwe.device (*) = "";
	     fwe.cs_ptr, fwe.rw_ptr = null ();
	     fwe.cs_len, fwe.rw_len = 0;
	     fwe.port_mask = "0"b;
	     if substr (fwe.name, 1, 4) = "itr." then do;
		fwe.type = FWE_TYPE_ITR;
		found_itr = "1"b;
	     end;
	     else if ^found_fw then do;
		found_fw = "1"b;
		fwe.type = FWE_TYPE_FW;
	     end;
	     else if mpc_type = "urp" & found_fw then do;
		if substr (fwe.name, 1, 7) = "400ovl." then do;
		     fwe.type = FWE_TYPE_DEV;
		     fwe.device (1) = "prt";
		     found_dev = "1"b;
		end;
		else if substr (fwe.name, 1, 7) = "300ovl." then do;
		     fwe.type = FWE_TYPE_DEV;
		     fwe.device (1) = "rdr";
		     fwe.device (2) = "pun";
		     fwe.device (3) = "ccu";
		end;
		else go to cant_identify;
	     end;
	     else do;
cant_identify:
		code = error_table_$noentry;
		call com_err_ (0, name, "Can't identify firmware module ^a for ^a model ^d.", fwe.name, mpc_type,
		     model);
		go to error_return;
	     end;
	end;

/* For unit record device firmware, find out for which ports each module is needed */

	if mpc_type = "urp" then do;
	     dev_fw_fnd, dev_fw_err = "0"b;
	     do i = 1 to mpc_card.nchan (1);		/* Check each channel for device */
		chan = mpc_card.chan (1) + i - 1;
		call find_config_card_$prph_for_channel ((mpc_card.iom (1)), chan, prph_cardp);
		if prph_cardp = null ()
		then go to next_channel;
		do j = 1 to fwlist.n;		/* Find firmware for this device */
		     fwep = addr (fwlist.entry (j));
		     if fwe.type = FWE_TYPE_DEV then do;
			do k = 1 to hbound (fwe.device, 1);
			     if fwe.device (k) = substr (prph_card.name, 1, 3) then do;
						/* Got it */
				substr (fwe.port_mask, i, 1) = "1"b;
				dev_fw_fnd = "1"b;
				go to next_channel;
			     end;
			end;
		     end;
		end;
		call com_err_ (0, name, "No firmware for device ^a on mpc ^a", mpc_card.name, prph_card.name);
		dev_fw_err = "1"b;
next_channel:
	     end;

	     if ^dev_fw_fnd then do;
		call com_err_ (0, name, "No device firmware to load into mpc ^a.", mpc_card.name);
		dev_fw_err = "1"b;
	     end;
	     if dev_fw_err then do;
		code = error_table_$noentry;
		go to error_return;
	     end;
	end;

/* Now load each of the modules */

	if arg_itr_needed & ^found_itr then do;
	     code = error_table_$noentry;
	     call com_err_ (code, name, "No ITR's found for ^a model ^d.", mpc_type, model);
	     go to error_return;
	end;
	if arg_fw_needed & ^found_fw then do;
	     code = error_table_$noentry;
	     call com_err_ (code, name, "No firmware found for ^a model ^d.", mpc_type, model);
	     go to error_return;
	end;

	do i = 1 to fwlist.n;
	     fwep = addr (fwlist.entry (i));
	     needed = "0"b;
	     if fwe.type = FWE_TYPE_ITR
	     then needed = arg_itr_needed;
	     else if fwe.type = FWE_TYPE_FW
	     then needed = arg_fw_needed;
	     else if fwe.type = FWE_TYPE_DEV
	     then needed = arg_fw_needed & (fwe.port_mask ^= "0"b);
	     if needed then do;
		call get_temp_segment_ (name, fwe.segp, code);
		if code ^= 0 then do;
		     call com_err_ (code, name, "Can't get temp segment for ^a.", fwe.name);
		     go to error_return;
		end;
		call tolts_util_$search (deck_iocbp, (fwe.name), deck_ptr, (0), code);
		if code ^= 0 then do;
		     call com_err_ (code, name, "Unable to find ^a in deckfile.", fwe.name);
		     go to error_return;
		end;
		call gload_ (deck_ptr, fwe.segp, 0, addr (gload_data), code);
		if code ^= 0 then do;
		     call com_err_ (code, name, "^a. Loading ^a.", gload_data.diagnostic, fwe.name);
		     go to error_return;
		end;
		fwsegp = fwe.segp;
		fwsegl = bin (gload_data.text_len);
		if fwsegl <= 10 then do;
		     code = error_table_$noentry;
		     call com_err_ (0, name, "^a too short to be firmware module. length = ^d.", fwe.name, fwsegl);
		     go to error_return;
		end;
		if fwseg (fwsegl) ^= MPCBOT then do;
		     code = error_table_$noentry;
		     call com_err_ (0, name, "^a segment does not end with ""MPCBOT"".", fwe.name);
		     go to error_return;
		end;
		rw_index = bin (substr (fwseg (fwsegl - 5), 1, 18));
		fwe.cs_ptr = fwe.segp;
		if rw_index = 0
		then				/* No r/w overlay */
		     fwe.cs_len = fwsegl - 10;
		else do;
		     fwe.cs_len = rw_index;
		     fwe.rw_ptr = addr (fwseg (rw_index + 1));
		     fwe.rw_len = fwsegl - rw_index - 10;
		end;
		call check_checksum ("control store", control_store_overlay);
		if fwe.rw_ptr ^= null ()
		then call check_checksum ("read write", read_write_overlay);
		if fwe.type = FWE_TYPE_FW & fwe.rw_ptr = null () then do;
		     code = error_table_$noentry;
		     call com_err_ (0, name, "^a is missing a read/write overlay.", fwe.name);
		     go to error_return;
		end;
		if fwe.type ^= FWE_TYPE_FW & fwe.rw_ptr ^= null () then do;
		     code = error_table_$noentry;
		     call com_err_ (0, name, "^a has an unwanted read/write overlay.", fwe.name);
		     go to error_return;
		end;
	     end;
	end;

	call iox_$close (deck_iocbp, code);
	call iox_$detach_iocb (deck_iocbp, code);
	arg_fwlistp = fwlistp;
	if arg_fw_revision = ""
	then arg_fw_revision = fw_revision;
	arg_code = 0;
	return;

error_return:
	arg_fwlistp = null ();
	arg_code = code;
	call clean_up;
	return;
%page;
/* Compute a checksum */

check_checksum:
     proc (overlay_name, overlay);

dcl  overlay_name	        char (*);
dcl  overlay	        (*) bit (36) aligned;
dcl  check_sum	        fixed bin (35);
dcl  check_bit	        bit (36);
dcl  i		        fixed bin;
dcl  answer	        bit (18);

	check_sum = 0;
	do i = 1 to (hbound (overlay, 1) - 1);
	     call ch_add (substr (overlay (i), 1, 18));
	     call ch_add (substr (overlay (i), 19, 18));
	end;
	check_sum = -check_sum;
	check_bit = unspec (check_sum);
	answer = "0"b || substr (check_bit, 21, 8) || "0"b || substr (check_bit, 29, 8);
	if answer ^= substr (overlay (hbound (overlay, 1)), 1, 18) then do;
	     code = error_table_$noentry;
	     call com_err_ (0, name, "Checksum error in ^a overlay of ^a.", overlay_name, fwe.name);
	     go to error_return;
	end;
	return;

/* Do 16 bit addtion with end-around carry */

ch_add:
	proc (word);

dcl  word		        bit (18);
dcl  addval	        fixed bin (16);

	     addval = bin (substr (word, 2, 8) || substr (word, 11, 8));
	     check_sum = check_sum + addval;
	     do while (check_sum > 1111111111111111b);
		check_sum = check_sum - 10000000000000000b;
		check_sum = check_sum + 1;
	     end;

	end ch_add;

     end check_checksum;

extract_rev:
     proc (c) returns (char (2));

dcl  c		        char (*);

	return (substr (c, 17, 2));

     end extract_rev;

clean_up:
     proc;

	if deck_iocbp ^= null () then do;
	     call iox_$close (deck_iocbp, code);
	     call iox_$detach_iocb (deck_iocbp, code);
	end;
	if fwlistp ^= null () then do;
	     do i = 1 to fwlist.n;
		fwep = addr (fwlist.entry (i));
		if fwe.segp ^= null ()
		then call release_temp_segment_ (name, fwe.segp, code);
	     end;
	     fwlist_n = fwlist.n;
	     free fwlist;
	end;
	return;

     end clean_up;
%page;
%include query_info;
%include config_mpc_card;
%include config_prph_card;
%include gload_data;
%include load_mpc_info;

     end load_mpc_fw_info_;
