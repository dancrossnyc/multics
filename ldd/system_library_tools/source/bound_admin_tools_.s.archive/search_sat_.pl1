/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* format: style4 */

/*
   Written Feb 1980 by M. B. Armstrong to implement multiple rate structures. (UNCA)
   Modified June 1981 by E. N. Kittlitz to implement UNCA rate structures.
   Modified June 1982 by E. N. Kittlitz to return initiate error code correctly.
*/

search_sat_:
     proc;					/* this entry should not be called */
	return;

/*
   This procedure locates the named project in the sat and returns project information
   Current entry points are:
   search_sat_$rs_number (P_project, P_rs_number, error_code)            return the rate_structure index
   search_sat_$sequential (P_first, P_project, P_rs_number, error_code)    get the next entry in sat - first if P_first = "1"b
   search_sat_$clean_up                                              reset internal static variables
*/

/* Parameters */

dcl  P_code fixed bin (35);
dcl  P_project_name char (*);
dcl  P_first bit (1) aligned;
dcl  P_rs_number fixed bin;

/* Automatic */

dcl  satep ptr;
dcl  code fixed bin (35);

/* Internal static */

dcl  static_satx fixed bin internal static;		/* index into sat projects */
dcl  satp internal static ptr init (null);		/* pointer to SAT */
dcl  shtp internal static ptr init (null);		/* pointer to SAT hash table */
dcl  no_hash bit (1) aligned internal static init ("0"b);	/* on if we couldn't find the sat.ht */
dcl  no_sat bit (1) aligned internal static init ("0"b);	/* on if we couldn't find the sat */

/* External entries */

dcl  hash_$search entry (ptr, char (*), fixed bin, fixed bin (35));
dcl  hcs_$initiate entry (char (*), char (*), char (*), fixed bin, fixed bin, ptr, fixed bin (35));
dcl  hcs_$terminate_noname entry (ptr, fixed bin (35));	/* file system */

/* External static */

dcl  (
     error_table_$noentry,
     error_table_$end_of_info
     ) external fixed bin (35);

/* builtins and conditions */

dcl  no_write_permission condition;

dcl  (addr, null) builtin;
%page;
/* =================================================== */

rs_number:
     entry (P_project_name, P_rs_number, P_code);		/* This entry returns the rate index for the named project */

	if ^setup () then do;
	     P_rs_number = 0;
	     go to error_return;
	end;
	satep = find_project (P_project_name);
	if satep = null then do;
	     P_rs_number = 0;
	     P_code = error_table_$noentry;
	end;
	else do;
	     P_rs_number = project.rs_number;
	     P_code = 0;
	end;
	return;

/* =================================================== */

sequential:
     entry (P_first, P_project_name, P_rs_number, P_code);	/* This entry will search the sat sequentially */

	if ^setup () then do;
	     P_project_name = "";
	     P_rs_number = 0;
	     go to error_return;
	end;
	if P_first then static_satx = 0;		/* start at the beginning */

next:
	static_satx = static_satx + 1;
	if static_satx > sat.current_size then do;	/* all finished? */
	     P_project_name = "";
	     P_rs_number = 0;
	     P_code = error_table_$end_of_info;
	     return;
	end;
	satep = addr (sat.project (static_satx));	/* point to the project */
	if project.state = 0 then goto next;		/* not a valid entry */

	P_project_name = project.project_id;
	P_rs_number = project.rs_number;
	P_code = 0;
	return;

/* =================================================== */

clean_up:
     entry;					/* This entry allows a process to clean up its KST */

	call hcs_$terminate_noname (satp, code);	/* clean up */
	call hcs_$terminate_noname (shtp, code);	/* clean up */
	satp, shtp = null;				/* reset internal static */
	no_hash, no_sat = "0"b;
	static_satx = 0;
	return;

error_return:
	if code ^= 0 then
	     P_code = code;
	else P_code = error_table_$noentry;
	return;
%page;
find_project:
     proc (P_proj) returns (ptr);			/* internal procedure to locate a project in the sat */

dcl  P_proj char (*);
dcl  satx fixed bin;

	if ^no_hash then do;			/* i.e. there is a hash table */
	     on no_write_permission
		begin;
		     revert no_write_permission;
		     no_hash = "1"b;
		     goto sequential_search;		/* too bad but them's the breaks */
		end;
	     call hash_$search (shtp, P_proj, satx, code);/* search the SAT hash table for project */
	     revert no_write_permission;
	     if code = 0 then			/* don't believe everything you're told */
		if addr (sat.project (satx)) -> project.state ^= 0
		     & addr (sat.project (satx)) -> project.project_id = P_proj then
		     return (addr (sat.project (satx)));
	end;

sequential_search:
	do satx = 1 to sat.current_size;
	     satep = addr (sat.project (satx));		/* point to a project */
	     if project.state ^= 0 then		/* is it not a hole? */
		if project.project_id = P_proj then return (addr (sat.project (satx)));
	end;
	return (null);				/* couldn't find the project anywhere */

     end find_project;


setup:
     proc returns (bit (1) aligned);			/* initiates the sat and the sat hash table */

	code = 0;
	if no_sat then return ("0"b);
	if satp ^= null then return ("1"b);
	call hcs_$initiate (">system_control_dir", "sat", "", 0, 0, satp, code);
	if satp = null then do;
	     no_hash = "1"b;
	     no_sat = "1"b;
	     return ("0"b);
	end;
	call hcs_$initiate (">system_control_dir", "sat.ht", "", 0, 0, shtp, code);
	if shtp = null then no_hash = "1"b;		/* must search whole sat */
	return ("1"b);

     end setup;
%page;
%include sat;
%page;
%include user_attributes;

     end search_sat_;
