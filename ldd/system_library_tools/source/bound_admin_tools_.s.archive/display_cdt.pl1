/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* format: style2 */

display_cdt:
     procedure;

/* DUMP_CDT - dump Channel Definition Table.

   THVV
   Modified by Mike Grady 5/10/76 for -cmf arg, also
   for version 2 CDT.
   Modified for error code from dump_cdt_ and dump_cmf_ BIM 1/82 
   */

	dcl     (path, dn)		 char (168),
	        en		 char (32),
	        ec		 fixed bin,
	        cdtp		 ptr,
	        sch_tty		 char (32) init (""),
	        al		 fixed bin (21),
	        ap		 ptr,
	        arg		 char (al) based (ap) unaligned;


	dcl     arg_count		 fixed bin;
	dcl     arg_list_ptr	 pointer;
	dcl     argx		 fixed bin;

	dcl     (addr, null, substr)	 builtin;

	dcl     dump_cmf_		 entry (ptr, ptr);

	dcl     dump_cdt_		 entry (ptr, fixed bin (35));

	dcl     cu_$arg_count	 entry (fixed bin, fixed bin (35));
	dcl     cu_$arg_list_ptr	 entry (ptr);
	dcl     cu_$arg_ptr_rel	 entry (fixed bin, ptr, fixed bin (21), fixed bin (35), ptr);
	dcl     check_star_name_$entry entry (char (*), fixed bin (35));

	dcl     expand_pathname_	 entry (char (*), char (*), char (*), fixed bin (35)),
	        com_err_		 entry options (variable);

	dcl     cleanup		 condition;

	dcl     (
	        error_table_$noarg,
	        error_table_$badopt,
	        error_table_$too_many_args,
	        error_table_$inconsistent
	        )			 fixed bin (35) ext;


	dcl     initiate_file_	 entry (char (*), char (*), bit (*), ptr, fixed bin (24), fixed bin (35));
	dcl     terminate_file_	 entry (ptr, fixed bin (24), bit (*), fixed bin (35));
	dcl     pathname_		 entry (char (*), char (*)) returns (char (168));
	dcl     unique_chars_	 entry (bit (*)) returns (char (15));
	dcl     sc_stat_$sysdir	 char (168) aligned external;
	dcl     1 dca		 aligned like dump_cdt_args;
	dcl     cmf_sw		 bit (1) aligned;
	dcl     code		 fixed bin (35);

	dcl     ME		 char (32) init ("display_cdt") internal static options (constant);


	call cu_$arg_count (arg_count, code);
	if code ^= 0
	then do;
		call com_err_ (code, ME);
		goto RETURN;
	     end;

	if arg_count = 0
	then do;
		call com_err_ (0, ME,
		     "Usage: display_cdt {channel} {-cmf PATH|-all|-header|-pathname PATH|-brief|-long");
		return;
	     end;

	call cu_$arg_list_ptr (arg_list_ptr);		/* For rel calls */

	cdtp, dca.switch = null;
	on cleanup call clean_up;

	unspec (dca) = ""b;
	dca.channel_name = "";
	cmf_sw = "0"b;
	path = "";

	argx = 0;
	do while (argx < arg_count);

	     call get_next_arg ("");

	     if al > 0
	     then if substr (arg, 1, 1) = "-"
		then do;
			if arg = "-all" | arg = "-a"
			then dca.all = "1"b;
			else if arg = "-subtree"
			then dca.subtree = "1"b;
			else if arg = "-brief" | arg = "-bf"
			then dca.brief = "1"b;
			else if arg = "-long" | arg = "-lg"
			then dca.brief = "0"b;
			else if arg = "-no_header" | arg = "-nhe"
			then dca.hdr = "0"b;
			else if arg = "-header" | arg = "-he"
			then dca.hdr = "1"b;
			else if arg = "-channel" | arg = "-chn"
			then do;
				call get_next_arg ("A channel with -channel");
CHANNEL_ARG:
				if dca.channel_name ^= ""
				then do;
					call com_err_ (error_table_$too_many_args, ME,
					     "Multiple -channel args are not permitted.");
					go to RETURN;
				     end;
				call check_star_name_$entry (arg, code);
				dca.channel_name = arg;
				if code = 0
				then dca.all = "0"b;
				else if code = 1
				then do;
					dca.starname = "1"b;
					dca.all = "0"b;
				     end;
				else if code = 2
				then dca.all = "1"b;
				else do;
					call com_err_ (code, ME, "Bad channel name: ^a", arg);
					go to RETURN;
				     end;
			     end;
			else if arg = "-cmf"
			then do;
				cmf_sw = "1"b;
				call get_next_arg ("Pathname following -cmf");
				call iox_$attach_name (unique_chars_ (""b) || ".dump_cdt_output_", dca.switch,
				     "vfile_ " || arg, null, code);
				if code ^= 0
				then do;
					call com_err_ (code, "display_cdt", "Unable to attach output file");
					go to RETURN;
				     end;
				call iox_$open (dca.switch, Stream_output, "0"b, code);
				if code ^= 0
				then do;
					call com_err_ (code, "display_cdt", "Unable to open output file");
					go to RETURN;
				     end;
			     end;
			else if arg = "-pathname" | arg = "-pn"
			then do;
				call get_next_arg ("A pathname following -pathname");
				path = arg;
			     end;
			else do;
				call com_err_ (error_table_$badopt, "display_cdt", """^a""", arg);
				go to RETURN;
			     end;
		     end;
		else go to CHANNEL_ARG;		/* positional = -channel */
	end;

	if path = ""
	then path = pathname_ ((sc_stat_$sysdir), "cdt");

	call expand_pathname_ (path, dn, en, code);
	if code ^= 0
	then do;
		call com_err_ (code, "display_cdt", "^a", path);
		go to RETURN;
	     end;

	call initiate_file_ (dn, en, R_ACCESS, cdtp, (0), code);

	if code ^= 0
	then do;
		call com_err_ (code, "display_cdt", "^a", en);
		go to RETURN;
	     end;

	if cmf_sw
	then call dump_cmf_ (cdtp, dca.switch);		/* dump cdt in form of cmf */
	else do;
		dca.switch = iox_$user_output;
		dca.cdt_ptr = cdtp;
		call dump_cdt_ (addr (dca), code);
		if code ^= 0
		then call com_err_ (code, ME, "^a", dca.channel_name);
	     end;

RETURN:
	call clean_up;
	return;

clean_up:
     procedure;
	if dca.switch ^= null & dca.switch ^= iox_$user_output
	then do;
		call iox_$close (dca.switch, code);
		call iox_$detach_iocb (dca.switch, code);
		call iox_$destroy_iocb (dca.switch, code);
	     end;
	if cdtp ^= null
	then call terminate_file_ (cdtp, (0), TERM_FILE_TERM, (0));
	cdtp = null;
     end clean_up;

get_next_arg:
     procedure (what_did_we_want);
	declare what_did_we_want	 char (*);
	argx = argx + 1;
	if argx > arg_count
	then do;
		call com_err_ (error_table_$noarg, ME, "^a", what_did_we_want);
		go to RETURN;
	     end;
	call cu_$arg_ptr_rel (argx, ap, al, (0), arg_list_ptr);
     end get_next_arg;

%include dump_cdt_args_;
%include terminate_file;
%include access_mode_values;
%include iox_dcls;
%include iox_modes;
     end display_cdt;
