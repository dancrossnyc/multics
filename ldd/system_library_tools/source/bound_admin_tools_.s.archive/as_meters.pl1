/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

as_meters: proc;

/* Command to print >sc1>as_meter_table.
   Coded by Tom Casey, March 1980.
   Modified May 1981 by T. Casey to print asmt meters in header.
   Modified June 1981 by T. Casey for MR9.0 to print the ABS_TRYLOG meter.
   Modified July 1981 by T. Casey to add -reset, -report_reset, &c.
*/


/****^  HISTORY COMMENTS:
  1) change(1987-07-21,Herbst), approve(1987-07-21,MCR7694),
     audit(1987-07-21,GDixon), install(1987-08-04,MR12.1-1055):
      A) Update for AS_METER_NAMES array declared in
         as_meter_numbers.incl.pl1.
  2) change(2016-02-24,Swenson), approve(2016-02-24,MCR10009),
     audit(2016-04-10,GDixon), install(2016-04-10,MR12.6e-0005):
     Fix references to (en de)code_clock_value_ to use 4-character time zone.
                                                   END HISTORY COMMENTS */


/* Ext. Entries */

dcl  cu_$arg_count entry returns (fixed bin);
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl (ioa_, ioa_$rsnnl, com_err_) entry options (variable);
dcl  date_time_ entry (fixed bin (71), char (*));
dcl  decode_clock_value_$date_time entry (fixed bin (71), fixed bin, fixed bin, fixed bin,
     fixed bin, fixed bin, fixed bin, fixed bin (71), fixed bin, char (4), fixed bin (35));
dcl  get_temp_segment_ entry (char (*), ptr, fixed bin (35));
dcl  hcs_$initiate entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr, fixed bin (35));
dcl  hcs_$terminate_noname entry (ptr, fixed bin (35));
dcl  release_temp_segment_ entry (char (*), ptr, fixed bin (35));

/* Automatic and Based */

dcl  code fixed bin (35);
dcl  ignore_code fixed bin (35);			/* crossref will show where we ignore return codes */
dcl  i fixed bin;
dcl (month, day, year, hour, minute, second, dow) fixed bin;
dcl  usec fixed bin (71);
dcl  zone char (4) init ("");
dcl (asmtp, asmtep) ptr init (null);
dcl  argp ptr, argl fixed bin, arg char (argl) based (argp);
dcl  totalsw bit (1) aligned init (""b);
dcl  namesw bit (1) aligned init ("1"b);
dcl  shortnamesw bit (1) aligned init (""b);
dcl  total_real_time fixed bin (71);
dcl  sigma_vcpu fixed bin (71) init (0);
dcl  sigma_pf fixed bin (34) init (0);

dcl  dtstr char (16);
dcl  now fixed bin (71);
dcl  today char (8);
dcl (reset_sw, report_reset_sw, un_reset_sw, temp_un_reset_sw, pct_sw,
     no_header_sw, meter_sw) bit (1) aligned init (""b);

dcl  asmt_copy (asmt_length) fixed bin (35) aligned based;	/* overlay to copy asmt segment */
dcl  asmt_length fixed bin;				/* length of overlay */

dcl 1 rasmt like asmt aligned based (real_asmtp);		/* "rasmt" is easier to type than "real_asmtp -> asmt" */

/* Static */

dcl  real_asmtp ptr int static init (null);		/* ptr to real as_meter_table, in >sc1 (or test dir) */
dcl  temp_ptr (2) ptr int static init ((2) null);		/* ptrs to two temp segs */
dcl  prev_asmtp ptr defined (temp_ptr (1));		/* 1st one points to copy of as_meter_table made at reset time */
dcl  diff_asmtp ptr defined (temp_ptr (2));		/* 2nd one points to difference between copy and current values */

dcl  reset bit (1) int static init (""b);		/* on if we have saved a copy because user said -reset */
dcl  reset_time fixed bin (71) int static;		/* time that reset was done */

dcl  selected (36) bit (1) unaligned int static init ((36) (1)"1"b);
dcl  sysdir char (168) int static init (">sc1");

/* Constant */

dcl  me char (9) int static options (constant) init ("as_meters");
dcl  digits char (10) int static options (constant) init ("0123456789");

dcl  UPPER char (26) int static options (constant) init ("ABCDEFGHIJKLMNOPQRSTUVWXYZ");
dcl  LOWER char (26) int static options (constant) init ("abcdefghijklmnopqrstuvwxyz");

/* Builtin */

dcl (addr, clock, divide, float, hbound, length, ltrim, mod, null, size, substr, translate) builtin;

	if real_asmtp = null then do;			/* get ptr to as_meter_table if we don't already have it */
	     call hcs_$initiate (sysdir, "as_meter_table", "", (0), (1), real_asmtp, code);
	     if real_asmtp = null then do;
		call com_err_ (code, me, "^a>as_meter_table", sysdir);
		return;
	     end;
	end;

	now = clock ();
	call date_time_ (now, dtstr);
	today = substr (dtstr, 1, 8);

	do i = 1 to cu_$arg_count ();
	     call cu_$arg_ptr (i, argp, argl, ignore_code);
	     if arg = "-tt" | arg = "-total" | arg = "-totals" then
		totalsw = "1"b;
	     else if arg = "-sh" | arg = "-short"
	     | arg = "-short_name" | arg = "-shnm" then do;
		shortnamesw = "1"b;
		namesw = ""b;
	     end;
	     else if arg = "-rs" | arg = "-reset" then
		reset_sw = "1"b;
	     else if arg = "-rrs" | arg = "-report_reset" then
		reset_sw, report_reset_sw = "1"b;
	     else if arg = "-urs" | arg = "-unreset" then
		un_reset_sw = "1"b;
	     else if arg = "-turs" | arg = "-temp_unreset" then
		temp_un_reset_sw = "1"b;
	     else if arg = "-pct" | arg = "-percent" then
		pct_sw = "1"b;
	     else if arg = "-nhe" | arg = "-no_header" then
		no_header_sw = "1"b;
	     else if arg = "-mt" | arg = "-meter" then
		call get_selected_meter_names;
	     else do;
		call com_err_ (0, "as_meters", "Unknown argument: ^a", arg);
		return;
	     end;
	end;					/* end loop thru arglist */

/* Decide what to do: report, reset, or some combination or variation of them */

	if reset_sw then				/* if user wants to reset now */
	     if ^report_reset_sw then			/* and he doesn't want a report first */
		goto do_reset;			/* go do the reset */

	asmtp = real_asmtp;				/* assume we'll print real asmt, until we discover otherwise */

	if un_reset_sw then				/* if user wants to permanently cancel a previous reset */
	     if reset then				/* and there was one */
		do;				/* then cancel it */
		reset = ""b;			/* forget it was done */
		call release_temp_segment_ (me, prev_asmtp, code); /* release the seg it was in */
		if code ^= 0 then goto temp_seg_error;
	     end;

	if reset then				/* if we did a reset previously */
	     if ^temp_un_reset_sw then		/* and user doesn't want to temporarily ignore it */
		do;				/* then subtract previous values from current ones */
		call get_temp_segment_ (me, diff_asmtp, code); /* we always release this when done printing */
		if code ^= 0 then goto temp_seg_error;
		asmtp = diff_asmtp;			/* we'll print the seg containing the differences */
		asmt =				/* if this works, I'll buy the compiler writers a beer */
		     real_asmtp -> asmt - prev_asmtp -> asmt; /* subtract everything */
	     end;

/* Compute total real time. This does not include real time spent in un-metered code, so it is a little low. */

	total_real_time = 0;
	do i = 1 to hbound (asmt.entry, 1);		/* add up individual real times */
	     total_real_time = total_real_time + asmt.entry (i).real_time; /* NOT tot_real_time */
	end;					/* that would be double counting */

/* Print header */

	if no_header_sw then goto skip_header;

	if ^totalsw then				/* print heading (different if reset or not) */
	     if reset & ^temp_un_reset_sw then
		call ioa_ ("Reset at ^a; metering time: ^a", dt (reset_time), ti (now - reset_time));
	     else call ioa_ ("Startup at ^a, vcpu = ^.3f, pf = ^d; metering time: ^a", dt (asmt.startup_clock),
		asmt.startup_vcpu/1.0e6, asmt.startup_pf, ti (now - asmt.startup_clock));
	call ioa_ ("Latest update^[ (in progress)^] at ^a, rt = ^.3f, vcpu = ^.3f, pf = ^d",
	     (rasmt.update_in_progress ^= 0), dt (rasmt.latest_clock),
	     total_real_time/1.0e6, asmt.latest_vcpu/1.0e6, asmt.latest_pf);

	if totalsw then goto do_reset;		/* no more output wanted; go reset (if wanted) & return */

	if rasmt.global_entered > 0 then
	     call ioa_ ("There ^[is^;are^] ^d call^[s^] in progress.",
	     (rasmt.global_entered = 1), rasmt.global_entered, (rasmt.global_entered > 1));

	call ioa_ ("Logins: ^d int, ^d abs, ^d dmn; logouts: ^d int, ^d abs, ^d dmn.", asmt.logins, asmt.logouts);

	call ioa_ ("ASMT: ^d, RT: ^.3f, VCPU: ^.3f, PF: ^d^/",
	     asmt.asmt_count, asmt.asmt_real_time/1.0e6, asmt.asmt_vcpu/1.0e6, asmt.asmt_pf);

/* Print a line of column headings, and then one or more lines for each used (and selected) entry */

	call ioa_ ("^5tUPD_TIME^14tCOUNT^20tTOTAL_REAL^31tTOTAL_VCPU^42tTOTALPF^50t^6xREAL^61t^6xVCPU^72t^5xPF");
	if pct_sw then call ioa_;			/* blank line if printing 4-line group per entry */

skip_header:

	do i = 1 to hbound (asmt.entry, 1);
	     asmtep = addr (asmt.entry (i));
	     if asmte.entry_count > 0 & selected (i) then do;
		call ioa_ (
"^[^3a^s^;^s^2d)^]^[*^;^x^]^8a^14t^5d^[(^d)^;^s^]^20t^10.3f^31t^10.3f^42t^7d^50t^10.3f^61t^10.3f^72t^7d^[^x^a^]",
		     shortnamesw, substr (AS_METER_NAMES (i), 1, 3), i, 
		     asmte.entered > 0, tm (rasmt.entry (i).update_clock),
		     asmte.entry_count, (asmte.recursive_entry_count ^= 0),
		     asmte.recursive_entry_count,
		     asmte.tot_real_time/1.0e6, asmte.tot_vcpu/1.0e6,
		     asmte.tot_pf, 
		     asmte.real_time/1.0e6, asmte.vcpu/1.0e6, asmte.pf,
		     namesw, AS_METER_NAMES (i));
		sigma_vcpu = sigma_vcpu + asmte.vcpu;
		sigma_pf = sigma_pf + asmte.pf;

/* If -pct arg given, print 3 more lines for this entry:
     percent of total, per-call usage, pf per (real vcpu) sec */

		if pct_sw then do;

/* percent of total */
		     if asmt.latest_pf > 0 then	/* avoid zerodivides */
			call ioa_ ("^5t% of tot^20t^8.1f%^31t^8.1f%^42t^6.1f%^50t^8.1f%^61t^8.1f%^72t^6.1f%",
			(1.0e2*asmte.tot_real_time)/total_real_time,
			(1.0e2*asmte.tot_vcpu)/asmt.latest_vcpu,
			(1.0e2*asmte.tot_pf)/asmt.latest_pf,
			(1.0e2*asmte.real_time)/total_real_time,
			(1.0e2*asmte.vcpu)/asmt.latest_vcpu,
			(1.0e2*asmte.pf)/asmt.latest_pf);

/* per-call usage */
		     call ioa_ ("^5tper-call^20t^10.3f^31t^10.3f^42t^7.2f^50t^10.3f^61t^10.3f^72t^7.2f",
			asmte.tot_real_time / (1.0e6*asmte.entry_count),
			asmte.tot_vcpu/ (1.0e6*asmte.entry_count),
			float (asmte.tot_pf)/asmte.entry_count,
			asmte.real_time/ (1.0e6*asmte.entry_count),
			asmte.vcpu/ (1.0e6*asmte.entry_count),
			float (asmte.pf)/asmte.entry_count);

/* page faults per real and vcpu second */
		     if asmte.vcpu > 0 then		/* avoid zerodivides */
			call ioa_ ("^5tpf/sec^20t^8.1f^31t^8.1f^50t^8.1f^61t^8.1f",
			(1.0e6*asmte.tot_pf)/asmte.tot_real_time,
			(1.0e6*asmte.tot_pf)/asmte.tot_vcpu,
			(1.0e6*asmte.pf)/asmte.real_time,
			(1.0e6*asmte.pf)/asmte.vcpu);
		     call ioa_;			/* separate the 4-line per-entry groups with blank lines */
		end;				/* end -pct given */
	     end;					/* end this entry used and selected */
	end;					/* end loop thru all entries */

/* Compute and print the "Other" usage, i.e. that not included in any of the above meters */

	if ^meter_sw then do;			/* only when printing all meters */
	     sigma_vcpu = asmt.latest_vcpu - sigma_vcpu - asmt.startup_vcpu;
	     sigma_pf = asmt.latest_pf - sigma_pf - asmt.startup_pf;
	     call ioa_ ("^/Other (not metered) vcpu and pf:^61t^10.3f^72t^7d", sigma_vcpu/1.0e6, sigma_pf);
	     if pct_sw
	     & asmt.latest_pf > 0 then		/* avoid zerodivides */
		call ioa_ ("^61t^8.1f%^72t^6.1f%", (1.0e2*sigma_vcpu)/asmt.latest_vcpu, (1.0e2*sigma_pf)/asmt.latest_pf);
	     call ioa_;				/* blank line at end */
	end;

/* If we did a reset previously, release the temp seg containing the differences. */
	if reset then do;
	     call release_temp_segment_ (me, diff_asmtp, code);
	     if code ^= 0 then goto temp_seg_error;
	end;

/* If user wants to do a reset now, save a copy of the live asmt */

do_reset:	if reset_sw then do;			/* if user wants to reset now, save current values */
	     if prev_asmtp = null then do;		/* if we don't have a temp seg to save them, get one */
		call get_temp_segment_ (me, prev_asmtp, code);
		if code ^= 0 then goto temp_seg_error;
	     end;
	     asmt_length = size (asmt);		/* size of stuff to copy */
	     prev_asmtp -> asmt_copy = real_asmtp -> asmt_copy;
	     reset_time = now;
	     reset = "1"b;				/* remember that we have saved the values */
	end;

	return;

temp_seg_error: call com_err_ (code, me, "(temp segment)");
error_return:
	return;

/* ******************** */

dt:	proc (clk) returns (char (17) varying);		/* to format and return the date (if not today) and time */

dcl  clk fixed bin (71);
dcl  c17 char (17) varying;
dcl  c8 char (8);
dcl  hhmmss char (8) init ("hh:mm:ss");
dcl  dtsw bit (1) aligned;

	     dtsw = "1"b;
	     goto dt_common;

tm:	     entry (clk) returns (char (8));		/* to format and return just the time */

	     dtsw = ""b;

dt_common:
	     call date_time_ (clk, dtstr);
	     call decode_clock_value_$date_time (clk, month, day, year, hour, minute, second, usec, dow, zone, code);
	     substr (hhmmss, 1, 2) = substr (dtstr, 11, 2); /* whoever invented the tenths of a minute date time format */
	     substr (hhmmss, 4, 2) = substr (dtstr, 13, 2); /* should be forced to use watches and clocks */
	     if code = 0 then do;			/* whose faces are calibrated in tenths of a minute */
		substr (hhmmss, 7, 1) = substr (digits, 1+divide (second, 10, 17, 0)); /* and whose second hands */
		substr (hhmmss, 8, 1) = substr (digits, 1+mod (second, 10)); /* jump ahead every 6 seconds */
	     end;
	     else substr (hhmmss, 7, 2) = "??";		/* if code is nonzero, we don't know the seconds */

	     if dtsw then do;			/* return date (if not today) as well as time */
		if substr (dtstr, 1, 8) = today then
		     c17 = hhmmss;			/* just return time, since date is today */
		else do;
		     c17 = substr (dtstr, 1, 8);
		     c17 = c17 || " ";
		     c17 = c17 || hhmmss;
		end;
		return (c17);
	     end;
	     else do;				/* we can only return 8 chars, so just return time */
		c8 = hhmmss;
		if substr (dtstr, 1, 8) ^= today then do; /* KLUDGE to flag time as not in current day */
		     substr (c8, 3, 1) = "!";		/* I said it was a kludge ... */
		     substr (c8, 6, 1) = "!";		/* but we only have 8 characters */
		end;

		return (c8);
	     end;

	end dt;

/* ******************** */

get_selected_meter_names: proc;			/* process args after -meter */

dcl  ix fixed bin;
dcl  name_arg char (8) varying;

	     if ^meter_sw then do;			/* if this is first -meter arg on command line */
		selected (*) = ""b;			/* clear all the switches */
		meter_sw = "1"b;			/* remember that we did so */
	     end;

get_next_meter_arg:
	     call cu_$arg_ptr (i+1, argp, argl, code);	/* look at next arg */
	     if code ^= 0 then return;		/* if no more args */
	     if substr (arg, 1, 1) = "-" then return;	/* if it is a control arg */

	     i = i + 1;				/* we're going to use this arg; bump index to next one */

	     if arg = "all" then do;
		selected (*) = "1"b;
		meter_sw = ""b;			/* we aren't printing a subset of the meters */
		return;
	     end;

	     name_arg = translate (arg, UPPER, LOWER);	/* get it in all upper case */

	     do ix = 1 to hbound (AS_METER_NAMES, 1)	/* look for exact match between arg and meter name */
		while (AS_METER_NAMES (ix) ^= name_arg); end;

	     if ix <= hbound (AS_METER_NAMES, 1) then do;
		selected (ix) = "1"b;
		goto get_next_meter_arg;
	     end;

	     do ix = 1 to hbound (AS_METER_NAMES, 1)	/* look for match between arg and first few chars of meter name */
		while (substr (AS_METER_NAMES (ix), 1, length (name_arg)) ^= name_arg); end;

	     if ix <= hbound (AS_METER_NAMES, 1) then do;
		selected (ix) = "1"b;
		goto get_next_meter_arg;
	     end;

	     call com_err_ (0, me, "Unknown meter name: ^a", arg);
	     goto error_return;

	end get_selected_meter_names;

/* ******************** */

ti:	proc (int) returns (char (9) varying);		/* format and return a time interval as HHH:MM:SS */

dcl  int fixed bin (71);
dcl  rs char (9) varying;
dcl  int_pic pic "zzzzzzzz9";
dcl  sum fixed bin;

	     hour = divide (int, 3600*1000000, 71, 0);
	     minute = divide (int, 60*1000000, 71, 0) - hour*60;
	     second = divide (int, 1000000, 71, 0) - hour*3600 - minute*60;
	     sum = second + minute*1000 + hour*1000000;	/* HHH0MM0SS */

	     if sum > 999999999 then do;		/* avoid blowup in picture conversion */
		if hour > 999999 then
		     rs = "999999+hr";
		else call ioa_$rsnnl ("^6d+hr", rs, (0), hour);
	     end;
	     else do;
		int_pic = sum;
		if substr (int_pic, 3, 1) ^= " " then substr (int_pic, 4, 1) = ":"; /* HHH:MM0SS */
		if substr (int_pic, 6, 1) ^= " " then substr (int_pic, 7, 1) = ":"; /* HHH:MM:SS */
		rs = ltrim (int_pic);
	     end;

	     return (rs);

	end ti;

/* ******************** */

test:	entry (testdir);

dcl  testdir char (*);

	sysdir = testdir;				/* the arg better be there, or we'll take a fault */

	if real_asmtp ^= null then			/* be sure to initiate new segs */
	     call hcs_$terminate_noname (real_asmtp, ignore_code);

	do i = 1 to 2;
	     if temp_ptr (i) ^= null then
		call release_temp_segment_ (me, temp_ptr (i), ignore_code);
	end;
	reset = ""b;				/* in case there was a reset in effect */

	return;
 %include as_meter_numbers;
 %include as_meter_table;

     end as_meters;
