/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


disk_usage_stat: proc;

/* program to do some disk statistics
   THVV
   Fixed up by R. Holmsedt and C. Hornig, September 1979.
   */

dcl  path char (168),				/* root of tree */
     level fixed bin,				/* current depth relative to root. */
     ctime char (24),
    (co, dp) char (128),				/* titles for report */
     junk char (1),
    (i, j, k) fixed bin,
    (t1, t2, t3) fixed bin,
     half fixed bin,				/* Half the number of records. for median ages. */
     rolder (0: 90) fixed bin,
     folder (0: 90) fixed bin,
     nxt_midnight fixed bin (71),
     slp ptr,
     lth fixed bin (24),
     NL char (1) int static init ("
"),
     kk fixed bin,
     gap fixed bin,
     ap ptr,
     al fixed bin,
     bchr char (al) unaligned based (ap),
     ec fixed bin (35);

dcl (nsegs (0: 15),
     ndirs (0: 15),
     nlinks (0: 15),
     nrecs (0: 15),
     ndrecs (0: 15),
     nnames (0: 15)) fixed bin,
    (mscale, maxlv) fixed bin,
     nscale fixed bin,
     urage (0: 90) fixed bin,
     ufage (0: 90) fixed bin,
     mrage (0: 90) fixed bin,
     mfage (0: 90) fixed bin,
     max_seg_size fixed bin,
     rsize (0: 256) fixed bin,
     n_ents_w_i_names (0: 2048) fixed bin,
     n_dirs_w_i_names (0: 2048) fixed bin,
     tnnames fixed bin,
     max_names_in_dir fixed bin,
     max_names_on_ent fixed bin,
     current_pathname char (168),
     path_with_max_names char (168),
     dir_with_max_names char (168),
     bigseg_name char (168),
     bigdir fixed bin,				/* Size of biggest dir, in records. */
     bigdir_name char (168),
     lrm fixed bin,					/* Age of least-recently-modified seg */
     lrm_segname char (168),
     lru fixed bin,					/* Age of least-recently-used seg */
     lru_segname char (168),
     pending_names (0: 15) fixed bin,			/* Pushdown list */
     savlvl fixed bin;				/* Level in pdl */

dcl  has_starstar bit (1) init ("0"b),
     starname_name (128) char (32),
     starname_type (128) fixed bin,
     starname_recs (128) fixed bin,
     starname_fils (128) fixed bin,
     starname_lnks (128) fixed bin,
     nsfx fixed bin;

dcl  xxx char (120) int static init ((120)"x");

dcl  datebin_$this_midnight entry (fixed bin (71)),
     cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35)),
     system_info_$titles entry (char (*), char (*), char (*), char (*)),
     sweep_disk_ entry (char (168), entry),
     absolute_pathname_ entry (char (*), char (*), fixed bin (35)),
     check_star_name_$entry entry (char (*), fixed bin (35)),
     match_star_name_ entry (char (*), char (*), fixed bin (35)),
    (ioa_, ioa_$rsnnl) entry options (variable),
     com_err_ entry options (variable),
     date_time_ entry (fixed bin (71), char (*)),
     hcs_$initiate_count entry (char (*), char (*), char (*), fixed bin (24), fixed bin (2), ptr, fixed bin (35)),
     get_wdir_ entry () returns (char (168)),
     hcs_$terminate_noname entry (ptr, fixed bin (35));

dcl  bcs char (262144) based (slp);

dcl (binary, clock, divide, substr, addr, null, index, fixed) builtin;

/* ======================================================= */

	call cu_$arg_ptr (1, ap, al, ec);
	if ec ^= 0 then path = ">";
	else do;
	     call absolute_pathname_ (bchr, path, ec);
	     if ec ^= 0 then do;
		call com_err_ (ec, "disk_usage_stat", "^a", bchr);
		return;
	     end;
	end;

	call datebin_$this_midnight (nxt_midnight);

	bigdir,
	     lrm, lru,
	     mscale,
	     maxlv, savlvl,
	     nsegs (*), nlinks (*), ndirs (*),
	     pending_names (*),
	     nrecs (*), ndrecs (*), nnames (*),
	     max_seg_size,
	     rsize (*),
	     urage (*), mrage (*), ufage (*), mfage (*),
	     n_ents_w_i_names (*), n_dirs_w_i_names (*),
	     starname_recs (*), starname_fils (*), starname_lnks (*),
	     tnnames,
	     max_names_in_dir,
	     max_names_on_ent = 0;

	nsfx = 0;
	call hcs_$initiate_count ((get_wdir_ ()), "starname_list", "", lth, 0, slp, ec);
	if slp = null then go to no_sl;
	lth = divide (lth, 9, 17, 0);
	kk = 1;
	do k = 1 to lth while (nsfx < 100);
	     if substr (bcs, k, 1) = NL then do;
		if substr (bcs, kk, 1) = "&" then go to skipline; /* Skip comment. */
		nsfx = nsfx + 1;
		starname_name (nsfx) = substr (bcs, kk, k-kk);
		call check_star_name_$entry (starname_name (nsfx), ec);
		if ec >= 0 & ec <= 2
		then starname_type (nsfx) = ec;
		else do;
		     call com_err_ (ec, "disk_usage_stat", "^a", starname_name (nsfx));
		     starname_type (nsfx) = 0;
		end;
		if starname_type (nsfx) = 2 then has_starstar = "1"b;
skipline:		kk = k + 1;
	     end;
	end;
	call hcs_$terminate_noname (slp, ec);
no_sl:	if ^has_starstar then do;
	     nsfx = nsfx + 1;
	     starname_name (nsfx) = "**";
	     starname_type (nsfx) = 2;
	end;

/* Now, go to work. Call disk sweeper program */

	call sweep_disk_ (path, counter);

/* On return from sweep of hierarchy, print the report. */

	do while (savlvl > 0);
	     i = pending_names (savlvl);
	     n_dirs_w_i_names (i) = n_dirs_w_i_names (i) + 1;
	     if i > max_names_in_dir then do;
		max_names_in_dir = i;
		call set_dwmn ();
	     end;
	     savlvl = savlvl - 1;
	end;

	call date_time_ ((clock ()), ctime);

	call system_info_$titles (junk, junk, co, dp);
	call ioa_ ("^|^a^/^/^-^a", co, dp);
	call ioa_ ("^/Multics disk usage for ""^a"" - ^a", path, ctime);

	call ioa_ ("^/Depth^3xSegs^3xDirs  Links^3xRecs  Dir Recs  Names^/");
	do i = 0 to maxlv;
	     call ioa_ ("^5d ^6d ^6d ^6d ^6d ^9d ^6d", i,
		nsegs (i), ndirs (i), nlinks (i), nrecs (i), ndrecs (i), nnames (i));
	     if i > 0 then do;
		nsegs (0) = nsegs (0) + nsegs (i);
		ndirs (0) = ndirs (0) + ndirs (i);
		nlinks (0) = nlinks (0) + nlinks (i);
		nrecs (0) = nrecs (0) + nrecs (i);
		ndrecs (0) = ndrecs (0) + ndrecs (i);
		nnames (0) = nnames (0) + nnames (i);
	     end;
	end;
	call ioa_ ("-----  -----  -----  -----  -----  --------  -----");
	call ioa_ ("Total ^6d ^6d ^6d ^6d ^9d ^6d",
	     nsegs (0), ndirs (0), nlinks (0), nrecs (0), ndrecs (0), nnames (0));

	if nsegs (0) = 0 then do;
	     call ioa_ ("^/No segments exist for ""^a""", path);
	end;
	else
	call ioa_ ("^/^10xAverage segment size:^7x^7.1f records", (1e0*nrecs (0))/nsegs (0));
	if ndirs (0) = 0 then do;
	     call ioa_ ("^/No directories exist under ""^a""", path);
	     go to nodirs;
	end;
	else
	call ioa_ ("^10xAverage directory size:^5x^7.1f records", (1e0*ndrecs (0))/ndirs (0));
	call ioa_ ("^10xAverage segments/directory: ^7.1f", (1e0*nsegs (0))/ndirs (0));
	call ioa_ ("^10xAverage links/directory:^4x^7.1f", (1e0*nlinks (0))/ndirs (0));
	call ioa_ ("^10xAverage names/directory:^4x^7.1f", (1e0*nnames (0))/ndirs (0));
nodirs:
	half = divide (nsegs (0), 2, 17, 0);		/* Get half the number of segments. */
	t1, t2, t3 = 0;
	do i = 90 to 0 by -1;
	     t1, rolder (i) = t1 + urage (i);
	     t2, folder (i) = t2 + ufage (i);
	     if t2 > half then if t3 = 0 then t3 = i;
	end;
	if nsegs (0) = 0 then goto fini;
	else
	call set_scale (100, t1, nscale);
	call ioa_ ("^/Distribution by date of last reference");
	call ioa_ ("^/^10xMedian number of days since last reference is ^d.", t3);
	if lru = 0 then lru_segname = "(none)";		/* puts out junk otherwise */
	call ioa_ ("^10xLeast recently used segment (^d days) is ^a", lru, lru_segname);
	call ioa_ ("^/Age^3xSegs  Older^3xRecs  Older  Scale: one ""x"" is ^d records", nscale);
	do i = 0 to 90;
	     call ioa_ ("^3d^7d^7d^7d^7d  ^a", i, ufage (i), folder (i), urage (i), rolder (i),
		substr (xxx, 1, divide (rolder (i)+nscale-1, nscale, 17, 0)));
	end;

	t1, t2, t3 = 0;
	do i = 90 to 0 by -1;
	     t1, rolder (i) = t1 + mrage (i);
	     t2, folder (i) = t2 + mfage (i);
	     if t2 > half then if t3 = 0 then t3 = i;
	end;
	call set_scale (100, t1, nscale);
	call head;
	call ioa_ ("^/Distribution by date of last modification");
	call ioa_ ("^/^10xMedian number of days since last modification is ^d.", t3);
	if lrm = 0 then lrm_segname = "(none)";		/* puts out junk if =0 days */
	call ioa_ ("^10xLeast recently modified segment (^d days) is ^a", lrm, lrm_segname);
	call ioa_ ("^/Age^3xSegs  Older^3xRecs  Older  Scale: one ""x"" is ^d records", nscale);
	do i = 0 to 90;
	     call ioa_ ("^3d^7d^7d^7d^7d  ^a", i, mfage (i), folder (i), mrage (i), rolder (i),
		substr (xxx, 1, divide (rolder (i)+nscale-1, nscale, 17, 0)));
	end;

	call head;
	call ioa_ ("^/Distribution by segment size: ^d records total", nrecs (0));
	call ioa_ ("^/^10xLargest segment (^d recs) is ^a", max_seg_size, bigseg_name);
	if ndirs (0) = 0
	then call ioa_ ("^/No other directories exist under ""^a""", path);
	else call ioa_ ("^10xLargest directory (^d recs) is ^a", bigdir, bigdir_name);
	call set_scale (120, mscale, mscale);
	call ioa_ ("^/   K  Count  Scale: one ""x"" is ^d segments", mscale);
	gap = 0;
	do i = 0 to max_seg_size;
	     if rsize (i) = 0 then do;		/* Check for gap. */
		gap = gap + 1;
		go to sgap1;
	     end;
	     if gap > 0 then do;
		if gap < 4 then do j = (i-gap) to (i-1);
		     call ioa_ ("^4d^7d", j, 0);
		end;
		else call ioa_ ("^4x(^d)", gap);
		gap = 0;
	     end;
	     call ioa_ ("^4d^7d  ^a", i, rsize (i),	/* print row of x's */
		substr (xxx, 1, divide (rsize (i)+mscale-1, mscale, 17, 0)));
sgap1:	end;

	call head;
	call ioa_ ("^/Distribution by segment name");
	call ioa_ ("^/Name^30xSegs^3xRecs  Links^/");
	t1, t2, t3 = 0;
	do i = 1 to nsfx;
	     call ioa_ ("^32a^6d^7d^7d", starname_name (i), starname_fils (i), starname_recs (i), starname_lnks (i));
	     t1 = t1 + starname_fils (i);
	     t2 = t2 + starname_recs (i);
	     t3 = t3 + starname_lnks (i);
	end;
	call ioa_ ("^/TOTAL^26x^7d^7d^7d", t1, t2, t3);

	call head;
	call ioa_ ("^/Entry distribution by number of names: ^d entries total", nsegs (0) + ndirs (0) + nlinks (0));
	call ioa_ ("^/^10xEntry with most names (^d) is ^a", max_names_on_ent, path_with_max_names);
	t1 = 0;
	do i = 1 to max_names_on_ent;
	     if n_ents_w_i_names (i) > t1 then t1 = n_ents_w_i_names (i);
	end;
	call set_scale (100, t1, nscale);
	call ioa_ ("^/Nnames  Nents  Scale: one ""x"" is ^d entries", nscale);
	gap = 0;
	do i = 1 to max_names_on_ent;
	     if n_ents_w_i_names (i) = 0 then do;	/* Check for gap. */
		gap = gap + 1;
		go to sgap2;
	     end;
	     if gap > 0 then do;
		if gap < 4 then do j = (i-gap) to (i-1);
		     call ioa_ ("^6d^7d", j, 0);
		end;
		else call ioa_ ("^6x(^d)", gap);
		gap = 0;
	     end;
	     call ioa_ ("^6d^7d  ^a", i, n_ents_w_i_names (i),
		substr (xxx, 1, divide (n_ents_w_i_names (i)+nscale-1, nscale, 17, 0)));
sgap2:	end;

	call head;
	call ioa_ ("^/Directory distribution by number of names: ^d directories total", ndirs (0));
	call ioa_ ("^/^10xDirectory containing most names (^d) is ^a", max_names_in_dir, dir_with_max_names);
	t1, t2 = 0;
	do i = 1 to max_names_in_dir;			/* Empty directories are not scanned. */
	     if t1 < n_dirs_w_i_names (i) then t1 = n_dirs_w_i_names (i);
	     t2 = t2 + n_dirs_w_i_names (i);
	end;
	n_dirs_w_i_names (0) = ndirs (0) - t2;
	if t1 < n_dirs_w_i_names (0) then t1 = n_dirs_w_i_names (0);
	call set_scale (100, t1, nscale);
	if ndirs (0) = 0 then goto sgap;		/* attempt to access beyond end of stack if no dirs */
	else
	call ioa_ ("^/Nnames  Ndirs  Scale: one ""x"" is ^d directories", nscale);
	gap = 0;
	do i = 0 to max_names_in_dir;
	     if n_dirs_w_i_names (i) = 0 then do;	/* Check for gap. */
		gap = gap + 1;
		go to sgap;
	     end;
	     if gap > 0 then do;
		if gap < 4 then do j = (i-gap) to (i-1);
		     call ioa_ ("^6d^7d", j, 0);
		end;
		else call ioa_ ("^6x(^d)", gap);
		gap = 0;
	     end;
	     call ioa_ ("^6d^7d  ^a", i, n_dirs_w_i_names (i),
		substr (xxx, 1, divide (n_dirs_w_i_names (i)+nscale-1, nscale, 17, 0)));
sgap:	end;

	return;

/* -------------------------------------------------------- */

counter:	proc (sdn, sen, lvl, een, bptr, nptr);

dcl  sdn char (168),				/* superior dir name */
     sen char (32),					/* dirname */
     lvl fixed bin,					/* distance from root */
     een char (32),					/* entry name */
     bptr ptr,					/* ptr to info structure */
     nptr ptr;					/* ptr to names structure */

dcl  seg_length fixed bin,				/* length of seg in records */
     no_of_names fixed bin,				/* number of names on segment */
     nnames_in_dir fixed bin,				/* number of names in a directory */
     ndays fixed bin,				/* number of days since use or mod */
     date_temp fixed bin (71);			/* date temp */
dcl  ecc fixed bin (35);

dcl 1 branch based (bptr) aligned,			/* thing returned by star_long */
    2 type bit (2) unal,
    2 nname bit (16) unal,
    2 nindex bit (18) unal,
    2 dtm bit (36) unal,
    2 dtu bit (36) unal,
    2 mode bit (5) unal,
    2 pad bit (13) unal,
    2 records bit (18) unal;

	     level = lvl;				/* save in global. */
	     if lvl > maxlv then maxlv = lvl;
	     no_of_names = fixed (branch.nname, 16);
	     nnames (lvl) = nnames (lvl) + no_of_names;
	     n_ents_w_i_names (no_of_names) = n_ents_w_i_names (no_of_names) + 1;
	     do while (lvl < savlvl);
		nnames_in_dir = pending_names (savlvl);
		n_dirs_w_i_names (nnames_in_dir) = n_dirs_w_i_names (nnames_in_dir) + 1;
		if nnames_in_dir > max_names_in_dir then do;
		     max_names_in_dir = nnames_in_dir;
		     call set_dwmn ();
		end;
		pending_names (savlvl) = 0;
		savlvl = savlvl - 1;
	     end;
	     savlvl = lvl;
	     pending_names (savlvl) = pending_names (savlvl) + no_of_names;
	     call ioa_$rsnnl ("^a^[>^]^a^[>^]^a", current_pathname, (0), sdn, (sdn ^= ""), sen, (sen ^= ""), een);
	     if no_of_names > max_names_on_ent then do;
		max_names_on_ent = no_of_names;
		path_with_max_names = current_pathname;
	     end;

	     if branch.type = "00"b then do;		/* link? */
		nlinks (lvl) = nlinks (lvl) + 1;
	     end;
	     else if branch.type = "01"b then do;	/* seg? */
		nsegs (lvl) = nsegs (lvl) + 1;
		seg_length = fixed (records, 18);
		if seg_length > max_seg_size then do;	/* Biggest? */
		     max_seg_size = seg_length;
		     bigseg_name = current_pathname;
		end;
		nrecs (lvl) = nrecs (lvl) + seg_length;
		rsize (seg_length) = rsize (seg_length) + 1;
		if rsize (seg_length) > mscale then mscale = rsize (seg_length);
		date_temp = binary (branch.dtu) * 1e16b;
		ndays = divide (nxt_midnight - date_temp, 86400000000, 17, 0);
		if ndays < 0 then ndays = 0;		/* Correct for oprs running system with bad clock. */
		if ndays < 5000 then if ndays > lru then do; /* Oldest (no segment is 13 years old) */
			lru = ndays;
			lru_segname = current_pathname;
		     end;
		if ndays > 90 then ndays = 90;
		ufage (ndays) = ufage (ndays) + 1;
		urage (ndays) = urage (ndays) + seg_length;
		date_temp = binary (branch.dtm) * 1e16b;
		ndays = divide (nxt_midnight - date_temp, 86400000000, 17, 0);
		if ndays < 0 then ndays = 0;		/* No science-fiction */
		if ndays < 5000 then if ndays > lrm then do; /* Oldest? */
			lrm = ndays;
			lrm_segname = current_pathname;
		     end;
		if ndays > 90 then ndays = 90;
		mfage (ndays) = mfage (ndays) + 1;
		mrage (ndays) = mrage (ndays) + seg_length;
	     end;
	     else if branch.type = "10"b then do;	/* dir? */
		seg_length = fixed (records, 16);
		if seg_length > bigdir then do;	/* Biggest? */
		     bigdir = seg_length;
		     bigdir_name = current_pathname;
		end;
		ndrecs (lvl) = ndrecs (lvl) + seg_length;
		ndirs (lvl) = ndirs (lvl) + 1;
	     end;

	     do k = 1 to nsfx;			/* Classify by type of name */
		if starname_type (k) = 0 then ecc = binary (een ^= starname_name (k));
		else if starname_type (k) = 2 then ecc = 0;
		else call match_star_name_ (een, starname_name (k), ecc);
		if ecc = 0 then do;
		     if branch.type = "01"b then do;
			starname_recs (k) = starname_recs (k) + seg_length;
			starname_fils (k) = starname_fils (k) + 1;
		     end;
		     else if branch.type = "00"b then starname_lnks (k) = starname_lnks (k) + 1;
		     go to sf1;
		end;
	     end;
sf1:	     ;

	end counter;

set_scale: proc (Page_width, Line_max, Scale);

dcl (Page_width, Line_max, Scale) fixed bin;
dcl (t1, t2, t3) fixed bin;

	     Scale = divide (Line_max, Page_width, 35, 0);
	     t1, t2 = 1;
	     do while (Scale >= t1);
		t3 = divide (t1, t2, 17, 0);
		if t3 = 1 then t1 = 2 * t2;
		else if t3 = 2 then t1 = 5 * t2;
		else t1, t2 = 10 * t2;
	     end;
	     Scale = t1;

	end set_scale;

set_dwmn:	proc ();

dcl (i, j, k) fixed bin;

	     k = savlvl - level;			/* Going to strip of this many >'s */
	     j = 168;
	     do while (k > 0);
		do i = j to 1 by -1 while (substr (current_pathname, i, 1) ^= ">"); end;
		j = i-1;
		k = k - 1;
	     end;
	     dir_with_max_names = substr (current_pathname, 1, j);

	end set_dwmn;

head:	proc;

	     call ioa_ ("^|Disk usage for ""^a"" - ^a", path, ctime);

	end;

fini:
     end disk_usage_stat;
