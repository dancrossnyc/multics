/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* Name: command_usage_count							*/
	/*									*/
	/* Status:								*/
	/* 1) Modified in July, 1983 by G. Dixon - increase number of commands which can be	*/
	/*    monitored from 200 (user_list_size) to max number of usage_list.commands entries	*/
	/*    which will fit in a segment.						*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */


command_usage_count:
cuc:
     procedure () options (variable);

dcl  code fixed bin (35),
     errsw bit (1),
     first fixed bin init (user_list_size),
     last_index fixed bin init (0),
     me char (19) static init ("command_usage_count"),
     message char (80) var,
     tempstring char (32) var,
     userseg_name char (32);

dcl  arg char (argl) based (argp),			/* argument from cu_$arg_ptr */
     argl fixed bin,
     argp ptr;

dcl  arg_no fixed bin init (1),			/* no. of argument being processed */
     nargs fixed bin;				/* no. of arguments */

dcl  comlist (40) char (32) var,			/* array for command name arguments */
     ncom fixed bin init (0);				/* length of the array */

dcl (i, j, k, list_size, maxj, total) fixed bin;		/* temporaries */

dcl (usage_list_ptr, segptr, usage_totals_ptr, user_list_ptr) pointer;

dcl (add,						/* add request given */
     all,						/* -all option given */
     clear,					/* -clear option given */
     delete,					/* delete request given */
     header,					/* heading printed */
     i_locked_it,					/* control lock needs opened */
     print,					/* print request given */
     total_only) bit (1) init ("0"b);			/* -total option given */

%include command_usage;

dcl  com_err_ ext entry options (variable),
     copy_acl_ ext entry (char (*), char (*), char (*), char (*), bit (1), fixed bin (35)),
     cu_$arg_count ext entry (fixed bin),
     cu_$arg_ptr ext entry (fixed bin, ptr, fixed bin, fixed bin (35)),
     cv_dec_check_ ext entry (char (*), fixed bin (35)) returns (fixed bin (35)),
     hcs_$delentry_file ext entry (char (*), char (*), fixed bin (35)),
     hcs_$fs_get_path_name ext entry (ptr, char (*), fixed bin, char (*), fixed bin (35)),
     hcs_$initiate ext entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr, fixed bin (35)),
     hcs_$make_ptr ext entry (ptr, char (*), char (*), ptr, fixed bin (35)),
     hcs_$make_seg ext entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35)),
     hcs_$terminate_noname ext entry (ptr, fixed bin (35)),
     hcs_$truncate_seg ext entry (ptr, fixed bin, fixed bin (35)),
     get_temp_segment_ entry (character (*), pointer, fixed binary (35)),
     release_temp_segment_ entry (character (*), pointer, fixed binary (35)),
     ioa_ entry options (variable);

dcl (error_table_$badcall,
     error_table_$badopt,
     error_table_$bad_conversion,
     error_table_$bigarg,
     error_table_$inconsistent,
     error_table_$namedup,
     error_table_$noarg,
     error_table_$noentry,
     error_table_$notalloc,
     error_table_$seglock,
     error_table_$too_many_names,
     error_table_$zero_length_seg) external static fixed bin (35);

dcl  cleanup condition;

dcl (addr, fixed, index, length, null, rel, size, substr) builtin;

/* PROCESS ARGUMENT LIST */


	call cu_$arg_count (nargs);
arg_get:	call cu_$arg_ptr (arg_no, argp, argl, code);
	if code ^= 0 then go to err_nomsg;
	if arg_no = 1 then go to key;

	if substr (arg, 1, 1) = "-" then go to ctl_arg;	/* control argument found */

	if ncom >= 40 then do;			/* too many command name arguments ? */
	     code = error_table_$too_many_names;
	     go to err_nomsg;
	end;

	if argl > 32 then do;			/* command name argument too long ? */
	     code = error_table_$bigarg;
	     go to arg_err;
	end;

	ncom = ncom + 1;
	comlist (ncom) = arg;
	go to arg_loop;

ctl_arg:	if add | print then				/* for add or print requests only: */
	     if arg = "-tt" | arg = "-total" then do;	/*   check for "-total" option */
	     total_only = "1"b;
	     go to arg_loop;
	end;

	if delete | print then			/* for delete or print requests only: */
	     if arg = "-a" | arg = "-all" then do;	/*   check for "-all" option */
	     all = "1"b;
	     go to arg_loop;
	end;

	if print then				/* for print requests only: */
	     if arg = "-ft" | arg = "-first" then do;	/*   check for "-first n" option */
	     arg_no = arg_no + 1;
	     call cu_$arg_ptr (arg_no, argp, argl, code);
	     if code ^= 0 then go to err_nomsg;
	     first = cv_dec_check_ (arg, code);
	     if code ^= 0 then do;
		code = error_table_$bad_conversion;
		go to arg_err;
	     end;
	     go to arg_loop;
	end;

	if print then				/* for print requests only: */
	     if arg = "-cl" | arg = "-clear" then do;	/*   check for "-clear" option */
	     clear = "1"b;
	     go to arg_loop;
	end;

	if print then				/* for print requests only: */
	     if arg = "-brief" | arg = "-bf" then do;	/*   check for "-brief" option */
	     header = "1"b;				/* don't print heading */
	     go to arg_loop;
	end;

	code = error_table_$badopt;			/* unknown control option */
	go to arg_err;

key:	if arg = "pr" | arg = "print" then do;		/* print request */
	     print = "1"b;
	     go to arg_loop;
	end;
	if arg = "add" then do;			/* add request */
	     add = "1"b;
	     go to arg_loop;
	end;
	if arg = "dl" | arg = "delete" then do;		/* delete request */
	     delete = "1"b;
	     go to arg_loop;
	end;
	code = error_table_$badcall;			/* unknown key argument */
	go to arg_err;

arg_loop: arg_no = arg_no + 1;
	if arg_no <= nargs then go to arg_get;



/* CHECK ARGUMENT CONSISTENCY */


	if all & ncom ^= 0 then do;
	     code = error_table_$inconsistent;
	     message = "-all and " || comlist (1);
	     go to err_msg;
	end;
	if total_only & first ^= user_list_size then do;
	     code = error_table_$inconsistent;
	     message = "-total and -first";
	     go to err_msg;
	end;

	if ncom = 0 then				/* add request must specify a command name list */
	     if add | (delete & ^all) then do;		/* "-all" is default for print, but not for delete */
	     code = error_table_$noarg;
	     go to err_nomsg;
	end;


/* INITIATE LIST AND TOTALS SEGMENTS */

	call hcs_$make_ptr (null, "command_usage_list_", "", usage_list_ptr, code);
	if code ^= 0 then go to list_err;

	call hcs_$make_ptr (null, "command_usage_totals_", "", usage_totals_ptr, code);
	if code ^= 0 then go to totals_err;


/* SET LOCK FOR MODIFICATION REQUESTS */


	if add | delete | clear then do;		/* if any modification of the control or */
	     if ^usage_list.locked then do;		/* usage segments is requested, then set */
		usage_list.locked = "1"b;		/* a lock against other modification requests */
		i_locked_it = "1"b;			/* remember to reset the lock */

		on cleanup begin;			/* reset lock if aborted */
		     usage_list.locked = "0"b;	/* entrance to this condition proves */
		end;				/* that i set lock */

	     end;
	     else do;				/* lock is already set */
		code = error_table_$seglock;
		message = "command_usage_list_^/The command list is being edited - try again later.";
		go to err_msg;
	     end;
	end;

	list_size = usage_list.n_commands;		/* copy command name list size */

	if add then go to add_com;


/* PROCESS PRINT AND DELETE REQUESTS */


	if list_size = 0 then do;			/* see if anything is there to process. */
	     code = error_table_$zero_length_seg;
	     message = "command_usage_list_^/The command name list is empty.";
	     go to err_msg;
	end;
	if print & ^total_only then do;		/* get a scratch segment if needed */
	     call get_temp_segment_ ((me), user_list_ptr, code);
	     if user_list_ptr = null () then go to temp_err;
	end;

/* If we are deleting entries, things get juggled around, so turn off usage
   monitoring for a few milliseconds.  We don't want to set a lock that would
   be waited on by any process executing any command (including one attempting
   to reset that lock).  Losing a few tallies isn't that important. */

	if delete then usage_list.n_commands = 0;

	if ncom ^= 0 then go to select;		/* print or delete selected entries */

	do k = 1 to list_size;			/* print or delete all entries */
	     if commands.primary (k) then call print_or_delete; /* process each command name group */
	end;
	if ^delete then go to print_done;
						/* we just deleted every thing, so */
						/* truncate segments to zero length */
	call hcs_$truncate_seg (usage_list_ptr, 0, code);
	if code ^= 0 then go to list_err;
	call hcs_$truncate_seg (usage_totals_ptr, 0, code);
	if code ^= 0 then go to totals_err;
						/* Note: truncating command_usage_list_ resets the lock */
	return;					/* so just return */

select:	do j = 1 to ncom;				/* go through list of command name arguments */
	     do k = 1 to list_size;			/* find name in the control list */
		if commands.name (k) = comlist (j) then go to found;
	     end;
	     go to next_com;			/* not there, print error message when done */
found:	     if ^commands.primary (k) then k = commands.slot (k);	/* get the primary entry of the command group */
	     call print_or_delete;			/* process command group */
	     comlist (j) = "";			/* clear argument from list to say we did it */
next_com: end;

	if delete then do;				/* truncate control segment */
	     call hcs_$truncate_seg (usage_list_ptr, fixed (rel (addr (commands.name (list_size+1)))), code);
	     if code ^= 0 then go to list_err;
	     usage_list.n_commands = list_size;		/* turn monitoring back on */
	end;
	do j = 1 to ncom;				/* check for names not found */
	     if comlist (j) ^= "" then
		call com_err_ (error_table_$noentry, (me), "^a", comlist (j));
	end;
print_done:
	if print & ^total_only then
	     call release_temp_segment_ ((me), user_list_ptr, (0));

	go to quit;				/* done */


/* PROCESS ADD REQUESTS */


add_com:	if list_size = 0 then do;			/* initialize */
	     call hcs_$fs_get_path_name (usage_totals_ptr, usage_list.directory, k, "", code);
	     if code ^= 0 then go to totals_err;
	     call hcs_$truncate_seg (usage_totals_ptr, 0, code);
	     if code ^= 0 then go to totals_err;
	end;

	do k = 1 to list_size;			/* check for duplication of command names */
	     do j = 1 to ncom;
		if commands.name (k) = comlist (j) then do;
		     code = error_table_$namedup;
		     message = comlist (j) || "^/Command name already in table.";
		     go to err_msg;
		end;
	     end;
	     if commands.primary (k) then last_index = commands.slot (k); /* locate last used index in totals list */
	end;

          usage_list_size = ncom + list_size;
	if usage_list_size > 7000 then do;
	     code = error_table_$notalloc;		/* would adding this command group make too many ? */
	     message = "command_usage_list_^/The command name list is full.";
	     go to err_msg;
	end;

	if ^total_only then do;			/* if creating a user usage segment, */
	     if length (comlist (1)) < 27 then go to add_user_seg; /* check length of the first command name */
	     do j = 2 to ncom;			/* too long - search names for a shorter one */
		if length (comlist (j)) < 27 then do;	/* found one - move to the front of the list */
		     tempstring = comlist (1);
		     comlist (1) = comlist (j);
		     comlist (j) = tempstring;
		     go to add_user_seg;
		end;
	     end;

	     code = error_table_$bigarg;
	     message = "Some command name must be less than 27 characters long.^/Add request ignored.";
	     go to err_msg;

add_user_seg:  
	     userseg_name = comlist (1) || ".usage";	/* create segment name */
	     call hcs_$make_seg (usage_list.directory, userseg_name, "", 01011b, user_list_ptr, code);
	     if user_list_ptr = null then go to userseg_err;
	     call copy_acl_ (usage_list.directory, "command_usage_totals_",
	     usage_list.directory, userseg_name, errsw, code);
	     if code ^= 0 then
		if errsw then go to userseg_err;
	     else go to totals_err;

	     call hcs_$truncate_seg (user_list_ptr, 0, code); /* truncate segment */
	     if code ^= 0 then go to userseg_err;

	     call hcs_$terminate_noname (user_list_ptr, code); /* done with user segment */
	     if code ^= 0 then go to userseg_err;

	end;

	do j = 1 to ncom;
	     commands.name (list_size+j) = comlist (j);	/* copy command name to list entry */
	     commands.primary (list_size+j) = "0"b;		/* say entry is not a primary one */
	     commands.slot (list_size+j) = list_size + 1;	/* make secondaries point to primary entry */
	end;

	commands.primary (list_size+1) = "1"b;		/* now make the first entry a primary entry */
	commands.slot (list_size+1) = last_index + 1;	/* it's slot element points to the usage totals tally */
	commands.count_users (list_size+1) = ^total_only;	/* says whether a user usage segment exists */
	usage_totals (last_index + 1) = 0;		/* clear usage total tally */
	usage_list.n_commands = list_size + ncom;		/* finally increase size of command name list */



/* EXIT */


quit:	if i_locked_it then usage_list.locked = "0"b;	/* if lock set by this process, reset it */
	return;
	

/* INTERNAL PROCEDURE TO PROCESS A SINGLE PRINT OR DELETE REQUEST */


print_or_delete: proc;
dcl  j fixed bin;

	     if delete then go to delete_com;

	     if ^header then do;			/* heading needed */
		if total_only then

		     call ioa_ ("USAGE^-COMMAND^/COUNT^-GROUP^/");
		else
		call ioa_ ("USAGE^-COMMAND^-USER^-USER^/COUNT^-GROUP^-COUNT^-NAME^/");
		header = "1"b;			/* heading now printed */
	     end;

	     total = usage_totals (commands.slot (k));	/* save usage total */

	     if clear then				/* reset total if clearing */
		usage_totals (commands.slot (k)) = 0;

	     if commands.count_users (k) then			/* if a user usage segment exists and */
		if ^total_only | clear then do;	/* we need it, then initiate it */

		userseg_name = commands.name (k) || ".usage"; /* segment name */
		call hcs_$initiate (usage_list.directory, userseg_name, "", 0, 1, segptr, code);
		if segptr = null () then go to userseg_err;

		if ^total_only then			/* if printing user counts, copy them to temporary */
		     user_list_ptr -> user_list = segptr -> user_list;

		if clear then do;			/* reset user counts if clearing */
		     call hcs_$truncate_seg (segptr, 0, code);
		     if code ^= 0 then go to userseg_err;
		end;

		call hcs_$terminate_noname (segptr, code); /* done with segment */
		if code ^= 0 then go to userseg_err;

	     end;

	     call ioa_ ("^5d^-^a", total, commands.name (k));	/* now do the printing */
	     do i = k+1 to list_size while (^commands.primary (i));
		call ioa_ ("^-^a", commands.name (i));	/* print all names in the command group */
	     end;

	     if ^commands.count_users (k) | total_only then return;

	     do i = 1 to user_list_size;			/* print the user usage counts */
		maxj = 1;				/* in descending order */
		do j = 1 to user_list_size;		/* find the largest tally */
		     if user_list.count (j) > user_list.count (maxj) then maxj = j;
		end;

		if user_list.count (maxj) = 0 then go to end_of_print; /* if the largest is zero, then done */
		if i > first then go to end_of_print;	/* check -first n value */
		total = total - user_list.count (maxj);	/* check user counts against total */

		tempstring = user_list.name (maxj);	/* copy user identifcation */
		j = index (tempstring, "*");		/* form is "person.project.*" */
		if j ^= 0 then			/* we want only "person.project" */
		     tempstring = substr (tempstring, 1, j-2);
		call ioa_ ("^2-^5d^-^a", user_list.count (maxj), tempstring); /* print a line */
		user_list.count (maxj) = 0;		/* clear this entry and repeat */
	     end;

end_of_print:  if total > 0 then			/* print result of error check */
		call ioa_ ("^2-^5d^-^a", total, "all others");
	     call ioa_ ("");
	     return;

delete_com:    if commands.count_users (k) then do;		/* is there a user usage segment ? */
		userseg_name = commands.name (k) || ".usage"; /* yes */
		call hcs_$delentry_file (usage_list.directory, userseg_name, code); /* delete it */
		if code ^= 0 then go to userseg_err;
	     end;
	     if all then return;			/* if deleting everything, the following is not needed */

	     do i = commands.slot (k) to user_list_size;		/* move total tallies past deleted one down by one */
		usage_totals (i) = usage_totals (i+1);
	     end;

	     do i = k+1 to list_size while (^commands.primary (i)); /* find size of command group we are deleting */
	     end;
	     i = i - k;				/* "i" is now the size */

	     do j = k to list_size;			/* move command entries past this group down */
		commands.name (j) = commands.name (j+i);
		commands.primary (j) = commands.primary (j+i);
		if commands.primary (j) then commands.slot (j) = commands.slot (j+i) - 1; /* total tally moved down one */
		else commands.slot (j) = commands.slot (j+i) - i;	/* primary entry moved down by i */
		commands.count_users (j) = commands.count_users (j+i);
	     end;
	     list_size = list_size - i;		/* shorten command list length */
	     return;				/* done */
	end print_or_delete;
	

/* ERROR ROUTINES */


arg_err:	call com_err_ (code, (me), arg);		/* never called with lock set */
	return;

list_err: message = "command_usage_list_";
	go to err_msg;

totals_err: message = "command_usage_totals_";
	go to err_msg;

userseg_err: message = userseg_name;
	go to err_msg;

temp_err: message = "temporay segment";

err_msg:	if i_locked_it then				/* may be called with lock set */
	     if delete & ^all then usage_list.n_commands = list_size;
	call com_err_ (code, (me), message);
	go to quit;

err_nomsg: call com_err_ (code, (me));			/* never called with lock set */
	return;

     end command_usage_count;
