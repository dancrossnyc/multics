/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: style4 */
get_userid_: proc (procid, pers, proj, type, anon, ecode);

/* GET_USERID_ - program to find out who a user is, given process id. */
/* Modified November 1981, E. N. Kittlitz.  user_table_entry conversion. */


/****^  HISTORY COMMENTS:
  1) change(87-04-26,GDixon), approve(87-07-09,MCR7741),
     audit(87-05-06,Parisek), install(87-08-04,MR12.1-1055):
     Upgraded for change to answer_table.incl.pl1 and user_table_entry.incl.pl1
  2) change(87-05-31,GDixon), approve(87-07-09,MCR7719),
     audit(87-07-13,Hartogs), install(87-08-04,MR12.1-1055):
     Add $info entrypoint.
                                                   END HISTORY COMMENTS */


dcl  procid bit (36),				/* input process id */
     pers char (*),					/* output person id */
     proj char (*),					/* output project id */
     tag char (*),					/* output instance tag */
     process_type fixed bin,				/* output process type */
     abs_queue fixed bin,				/* output absentee queue, 0 = fg */
     type fixed bin,				/* 0 = interactive, -1 daemon, >0 abs queue */
     anon fixed bin,				/* 1 if anonymous, else 0 */
     ecode fixed bin (35);

dcl  ec fixed bin (35),
     i fixed bin,
     info_entry bit(1);

dcl (static_ansp, static_autp, static_dutp) ptr int static init(null);

dcl  sysdir char (64) aligned int static options(constant) init (">system_control_dir");

dcl (addr, null) builtin;

dcl  hcs_$initiate entry (char (*) aligned, char (*) aligned, char (*) aligned,
	fixed bin (1), fixed bin (2), ptr, fixed bin (35));

dcl  error_table_$noentry fixed bin(35) ext static;

/* --------------------------------------------- */

	info_entry = "0"b;
	go to JOIN;
	
info:	entry (procid, pers, proj, tag, process_type, anon, abs_queue, ecode);

	info_entry = "1"b;
	
JOIN:	ecode = 0;
	if static_ansp = null then
	     call hcs_$initiate (sysdir, "answer_table", "", 0, 1, static_ansp, ec);
	if static_autp = null then 
	     call hcs_$initiate (sysdir, "absentee_user_table", "", 0, 1, static_autp, ec);
	if static_dutp = null then
	     call hcs_$initiate (sysdir, "daemon_user_table", "", 0, 1, static_dutp, ec);

	ansp = static_ansp;
	autp = static_autp;
	dutp = static_dutp;

	if ansp = null & autp = null & dutp = null then do;
	     ecode = ec;
	     return;
	end;

	if ansp ^= null then do;
	     do i = 1 to anstbl.current_size;
		utep = addr (anstbl.entry (i));
		if ute.active >= NOW_HAS_PROCESS then do;
		     if ute.proc_id = procid then do;
			pers = ute.person;
			proj = ute.project;
			if info_entry then do;
			     tag = ute.tag;
			     process_type = ute.process_type;
			     abs_queue = 0;
			end;
			else type = ute.queue;
			anon = ute.anonymous;
			return;
		     end;
		end;
	     end;
	end;

	if autp ^= null then do;			/* check access to table */
	     do i = 1 to autp -> autbl.current_size while (autp -> autbl.n_abs_run > 0);
		utep = addr (autp -> autbl.entry (i));
		if ute.active >= NOW_HAS_PROCESS then do;
		     if ute.proc_id = procid then do;
			pers = ute.person;
			proj = ute.project;
			if info_entry then do;
			     tag = ute.tag;
			     process_type = ute.process_type;
			     abs_queue = ute.queue;
			end;
			else type = ute.queue;
			anon = ute.anonymous;
			return;
		     end;
		end;
	     end;
	end;					/* end of autbl search */

	if dutp ^= null then do;
	     do i = 1 to dutbl.current_size;
		utep = addr (dutbl.entry (i));
		if ute.active >= NOW_HAS_PROCESS then do;
		     if ute.proc_id = procid then do;
			pers = ute.person;
			proj = ute.project;
			if info_entry then do;
			     tag = ute.tag;
			     process_type = ute.process_type;
			     abs_queue = 0;
			end;
			else type = ute.queue;
			anon = ute.anonymous;
			return;
		     end;
		end;
	     end;
	end;					/* end daemon table search */

	ecode = error_table_$noentry;

%page; %include absentee_user_table;
%page; %include answer_table;
%page; %include daemon_user_table;
%page; %include dialup_values;
%page; %include user_attributes;
%page; %include user_table_entry;
%page; %include user_table_header;

     end get_userid_;
