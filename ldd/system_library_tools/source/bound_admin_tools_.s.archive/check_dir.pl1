/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


check_dir: proc;

dcl (path, dn) char (168) aligned,
    (en, char32) char (32) aligned,
     myid char (32) aligned,
     line char (120) aligned,
     datstr char (16) aligned,
    (c1, char1) char (1) aligned,
    (i, j, k, l, m, n) fixed bin,
    (ii, jj) fixed bin,
    (pers, tpers (10)) char (32) aligned,
    (proj, tproj (10)) char (32) aligned,
    (tag, ttag (10)) char (4) aligned,
     nids fixed bin init (1),
     idx fixed bin init (2),
     fb71 fixed bin (71) init (0),
     bitc fixed bin (24),
     movelen fixed bin,
     areap ptr init (null),
     barea area ((512)) based (areap),
    (eptr, nptr) ptr init (null),
     ap ptr,
     al fixed bin,
     bchr char (al) unaligned based (ap),
     ec fixed bin (35),
    (p, q) ptr;

dcl  bcs char (131071) based (p) aligned;

dcl  NL char (1) aligned int static init ("
");

dcl (addr, null, substr, index, unspec, length, bit, fixed, divide, mod, abs) builtin;

dcl  establish_cleanup_proc_ entry (entry),
     cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35)),
     get_wdir_ entry () returns (char (168) aligned),
     get_system_free_area_ entry (ptr),
     get_group_id_$tag_star entry () returns (char (32) aligned),
     expand_path_ entry (ptr, fixed bin, ptr, ptr, fixed bin (35)),
     ioa_ entry options (variable),
     ioa_$rsnnl entry options (variable),
     ioa_$nnl entry options (variable),
     ioa_$rs entry options (variable),
     date_time_ entry (fixed bin (71), char (*) aligned),
     com_err_ entry options (variable);

dcl  hcs_$star_list_ entry (char (*) aligned, char (*) aligned, fixed bin (3),
     ptr, fixed bin, fixed bin, ptr, ptr, fixed bin (35)),
     hcs_$get_bc_author entry (char (*) aligned, char (*) aligned, char (*) aligned, fixed bin (35));

dcl  hcs_$list_acl entry (char (*) aligned, char (*) aligned, ptr, ptr, ptr, fixed bin, fixed bin (35)),
     hcs_$list_dir_acl entry (char (*) aligned, char (*) aligned, ptr, ptr, ptr, fixed bin, fixed bin (35)),
     hcs_$add_acl_entries entry (char (*) aligned, char (*) aligned, ptr, fixed bin, fixed bin (35)),
     hcs_$add_dir_acl_entries entry (char (*) aligned, char (*) aligned, ptr, fixed bin, fixed bin (35)),
     hcs_$delete_acl_entries entry (char (*) aligned, char (*) aligned, ptr, fixed bin, fixed bin (35)),
     hcs_$delete_dir_acl_entries entry (char (*) aligned, char (*) aligned, ptr, fixed bin, fixed bin (35)),
     hcs_$replace_acl entry (char (*) aligned, char (*) aligned, ptr, fixed bin, bit (1) aligned, fixed bin (35)),
     hcs_$replace_dir_acl entry (char (*) aligned, char (*) aligned, ptr, fixed bin, bit (1) aligned, fixed bin (35));

dcl 1 btime based aligned,
    2 xpad bit (20) unal,
    2 xdtm bit (36) unal,
    2 ypad bit (16) unal;

dcl 1 br (n) based (eptr) aligned,
    2 type bit (2) unal,
    2 nnam bit (16) unal,
    2 nindex bit (18) unal,
    2 dtm bit (36) unal,
    2 dtu bit (36) unal,
    2 mode bit (5) unal,
    2 pad bit (13) unal,
    2 recs bit (18) unal;

dcl  names (100) char (32) aligned based (nptr);

/* ------------------------------------------------------ */

	call cu_$arg_ptr (1, ap, al, ec);
	if ec ^= 0 then do;
wd:	     dn = get_wdir_ ();
	     go to join;
	end;
	else if bchr = "-wd" then go to wd;

	call expand_path_ (ap, al, addr (dn), null, ec);
	if ec ^= 0 then go to er;

join:	call get_system_free_area_ (areap);
	call establish_cleanup_proc_ (clean);
	myid = get_group_id_$tag_star ();
idlp:	tpers (nids), tproj (nids), ttag (nids) = "*";
	i = index (myid, ".");
	if i = 0 then tpers (nids) = myid;
	else do;
	     if i > 1 then tpers (nids) = substr (myid, 1, i-1);
	     j = index (substr (myid, i+1), ".");
	     if j = 0 then tproj (nids) = substr (myid, i+1);
	     else do;
		tproj (nids) = substr (myid, i+1, j-1);
		ttag (nids) = substr (myid, i+j+1);
	     end;
	end;
	call cu_$arg_ptr (idx, ap, al, ec);
	if ec = 0 then do;				/* If given any ids, override */
	     nids = idx - 1;
	     idx = idx + 1;
	     myid = bchr;
	     go to idlp;
	end;

	call hcs_$star_list_ (dn, "**", 2, areap, n, k, eptr, nptr, ec);
	if ec ^= 0 then do;
er:	     call com_err_ (ec, "check_dir", dn);
	     return;
	end;

	do i = 1 to n;
	     if br (i).type = "10"b then go to skip;
	     en = names (fixed (br (i).nindex, 18));
	     call hcs_$get_bc_author (dn, en, char32, ec);
	     if ec ^= 0 then call com_err_ (ec, "check_dir", "^a>^a", dn, en);
	     else do;
		ii = index (char32, ".");
		pers = substr (char32, 1, ii-1);
		jj = index (substr (char32, ii+1), ".");
		proj = substr (char32, ii+1, jj-1);
		tag = substr (char32, ii+jj+1);
		do m = 1 to nids;
		     if tpers (m) = "*" then;
		     else if tpers (m) ^= pers then go to fail;
		     if tproj (m) = "*" then;
		     else if tproj (m) ^= proj then go to fail;
		     if ttag (m) = "*" then;
		     else if ttag (m) ^= tag then go to fail;
		     go to skip;			/* all match. so not list */
fail:		end;

list:		addr (fb71) -> xdtm = br (i).dtm;
		call date_time_ (fb71, datstr);
		call ioa_ ("^32a^8x^16a  ^32a", en, datstr, char32);
	     end;
skip:	end;

	call clean;

	return;

clean:	proc;

	     if eptr ^= null then
	     free eptr -> br in (barea);
	     if nptr ^= null then
	     free nptr -> names in (barea);

	end clean;

     end;
