/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   *********************************************************** */
syserr_log_util_:
     procedure ();

/* *	SYSERR_LOG_UTIL_
   *
   *	Interim version of syserr interface to new logging software, to be used
   *	until all relevant programs have been converted to use log_read_ instead.
   *
   *	84-09-30, W. Olin Sibert: Initial coding
   *    1985-01-21, BIM, EJ Sharpe: reverse-convert new data classes.
   */

declare	P_pathname char (*) parameter;
declare	P_access bit (36) aligned parameter;
declare	P_buffer_ptr pointer parameter;
declare	P_buffer_lth fixed bin parameter;
declare	P_message_lth fixed bin parameter;
declare	P_search_time fixed bin (71) parameter;
declare	P_position fixed bin (35) parameter;
declare	P_message_time fixed bin (71) parameter;
declare	P_message_sequence fixed bin (35) parameter;
declare	P_status_ptr pointer parameter;
declare	P_code fixed bin (35) parameter;

declare   binary_present bit (1) aligned;
declare	data_idx fixed bin;
declare	log_dname char (168);
declare	log_ename char (32);
declare   new_binary bit (1) aligned;
declare   old_data_class fixed bin (35);
declare	position_idx fixed bin (35);
declare	temp_code fixed bin (35);
declare	this_lth fixed bin;

declare	static_read_data_ptr pointer internal static init (null ());
declare	static_message_ptr pointer internal static init (null ());
declare	static_open_count fixed bin internal static init (0);

declare	error_table_$end_of_info fixed bin (35) external static;
declare	error_table_$long_record fixed bin (35) external static;
declare	error_table_$no_log_message fixed bin (35) external static;
declare	error_table_$not_open fixed bin (35) external static;
declare	error_table_$unsupported_operation fixed bin (35) external static;

declare	log_data_$syserr_log_dir char (168) external static;
declare	log_data_$syserr_log_name char (32) external static;

declare	com_err_ entry options (variable);
declare	expand_pathname_ entry (char (*), char (*), char (*), fixed bin (35));
declare	log_read_$close entry (pointer, fixed bin (35));
declare	log_read_$next_message entry (pointer, pointer, fixed bin (35));
declare	log_read_$open entry (char (*), char (*), pointer, fixed bin (35));
declare	log_read_$position_time entry (pointer, fixed bin (71), bit (1) aligned, pointer, fixed bin (35));
declare	log_read_$prev_message entry (pointer, pointer, fixed bin (35));

declare  (abs, binary, currentsize, dimension, divide, hbound, length, max, null, size) builtin;

/* */

syserr_log_util_$open:
     entry (P_access, P_code);

	log_dname = log_data_$syserr_log_dir;
	log_ename = log_data_$syserr_log_name;
	goto OPEN_COMMON;



syserr_log_util_$open_path:
     entry (P_pathname, P_access, P_code);

	if (P_pathname = "") then do;
	     log_dname = log_data_$syserr_log_dir;
	     log_ename = log_data_$syserr_log_name;
	     end;

	else do;
	     call expand_pathname_ (P_pathname, log_dname, log_ename, P_code);
	     if (P_code ^= 0) then
		return;
	     end;


OPEN_COMMON:
	if (static_read_data_ptr = null ()) then do;
	     call log_read_$open (log_dname, log_ename, static_read_data_ptr, P_code);
	     if (P_code ^= 0) then			/* Open failed */
		return;
	     end;

	static_open_count = static_open_count + 1;

/* Once open, position to the first message in the log */

	call log_read_$position_time (static_read_data_ptr, 0, "1"b, static_message_ptr, P_code);
	P_access = "11"b;
	return;

/* */

syserr_log_util_$close:
     entry (P_code);

	if (static_read_data_ptr ^= null ()) then do;
	     call log_read_$close (static_read_data_ptr, (0));
	     static_open_count = static_open_count - 1;
	     static_message_ptr = null ();
	     end;

	P_code = 0;
	return;

/* */

syserr_log_util_$read:
     entry (P_buffer_ptr, P_buffer_lth, P_message_lth, P_code);

/* This entry converts from old format to new format */

	if (static_read_data_ptr = null ()) then do;
	     P_code = error_table_$not_open;
	     return;
	     end;

	if (static_message_ptr = null ()) then do;
	     P_code = error_table_$end_of_info;		/* Let our caller know we're done */
	     return;
	     end;

	log_message_ptr = static_message_ptr;	/* New format (input) */
	syserr_msgp = P_buffer_ptr;			/* Old format (output) */
	P_message_lth = 0;

/**** Investigate the data class, if any */

	if dimension (log_message.data, 1) = 0 then binary_present = "0"b;
	else do;
	     binary_present = "1"b;
	     if log_message.data_class = "syserr"
	     then new_binary = "0"b;		/* old data class is tucked into first word of binary */
					/* this was a compatability feature used across
					several implementation phases of the new logger */
	     else do;
		new_binary = "1"b;		/* old data class not in message */
		call convert_data_class (old_data_class);
		if old_data_class = -1	/* unrecognized? */
		then binary_present = "0"b;	/* ignore it */
	     end;
	end;
		    
	this_lth = size (syserr_msg);			/* Evaluate WITHOUT refer extents, to get header size only */
	this_lth = this_lth + divide ((3 + length (log_message.text)), 4, 17, 0);
	if binary_present then 
	     if new_binary then this_lth = this_lth + dimension (log_message.data, 1); /* binary is already the right length */
	else  this_lth = this_lth + max (0, dimension (log_message.data, 1) - 1); /* in old case, remove the word with the data class */

	if (this_lth > P_buffer_lth) then do;
	     P_code = error_table_$long_record;
	     return;
	     end;

	syserr_msg.seq_num = log_message.sequence;
	syserr_msg.time = log_message.time;
	syserr_msg.code = log_message.severity;
	syserr_msg.text_len = length (log_message.text);
	syserr_msg.text = log_message.text;
	syserr_msg.pad = ""b;

	if binary_present then do;
	     if ^new_binary then do;
		syserr_msg.data_code = binary (log_message.data (1));
		syserr_msg.data_size = dimension (log_message.data, 1) - 1;
		do data_idx = 2 to dimension (log_message.data, 1);
		     syserr_msg.data (data_idx - 1) = log_message.data (data_idx);
		end;
	     end;
	     else do;
		syserr_msg.data_code = old_data_class;
		syserr_msg.data_size = dimension (log_message.data, 1);
		syserr_msg.data (*) = log_message.data (*);
	     end;
	end;
	else do;
	     syserr_msg.data_code = 0;
	     syserr_msg.data_size = 0;
	     end;

	call log_read_$next_message (static_read_data_ptr, static_message_ptr, temp_code);
	if (temp_code = error_table_$no_log_message) then	     /* Prevent reading at the next call */
	     static_message_ptr = null ();

	P_message_lth = currentsize (syserr_msg);
	P_code = 0;
	return;

/* */

syserr_log_util_$search:
     entry (P_search_time, P_message_time, P_message_sequence, P_code);

	if (static_read_data_ptr = null ()) then do;
	     P_code = error_table_$not_open;
	     return;
	     end;

	if (P_search_time >= 0) then
	     call log_read_$position_time (static_read_data_ptr, P_search_time, "1"b, static_message_ptr, P_code);
	else call log_read_$position_time (static_read_data_ptr, 1f70b, "0"b, static_message_ptr, P_code);
	if (P_code ^= 0) then
	     return;

	P_message_time = static_message_ptr -> log_message.time;
	P_message_sequence = static_message_ptr -> log_message.sequence;
	P_code = 0;
	return;

/* */

syserr_log_util_$position:
     entry (P_position, P_message_time, P_message_sequence, P_code);

	if (static_read_data_ptr = null ()) then do;
	     P_code = error_table_$not_open;
	     return;
	     end;

	do position_idx = 1 to abs (P_position);
	     if (P_position > 0) then
		call log_read_$next_message (static_read_data_ptr, static_message_ptr, P_code);
	     else call log_read_$prev_message (static_read_data_ptr, static_message_ptr, P_code);

	     if (P_code ^= 0) then
		return;
	     end;

	P_message_time = static_message_ptr -> log_message.time;
	P_message_sequence = static_message_ptr -> log_message.sequence;
	P_code = 0;
	return;

/* */

/* Some unsupported or useless entrypoints */

syserr_log_util_$debug:
     entry ();

	return;



syserr_log_util_$trim:
     entry (P_search_time, P_code);

	goto TRIM_COMMON;



syserr_log_util_$trim_path:
     entry (P_pathname, P_search_time, P_code);


TRIM_COMMON:
	call com_err_ (0, "syserr_log_util_", "New format logs can only be trimmed with date_deleter.");
	P_code = error_table_$unsupported_operation;
	return;



syserr_log_util_$status:
     entry (P_status_ptr, P_code);;

declare 1 so_called_syserr_log_status aligned based,
	2 version fixed bin;


	P_status_ptr -> so_called_syserr_log_status.version = 1;
	P_code = 0;
	return;

convert_data_class:
	procedure (data_class);
declare data_class fixed bin (35);
declare i fixed bin;

/**** This converts character string data classes back into fixed bin
      ones. Note that some data is lost --- e.g. there is no distinguishing
      "disk_err" and "ioi" messages, they are both of new class io_status. */

       data_class = -1;

       do i = 1 to hbound(SB_char_data_classes, 1) while (data_class = -1);
	  if log_message.data_class = SB_char_data_classes(i)
	  then data_class = i;	/* pick up index of first match */
       end;

       if data_class = -1 then return;	/* didn't find a match */

       /* we can make a better guess on the io_status data */
       if log_message.data_class = "io_status" then 
	  if dimension (log_message.data, 1) > size (io_msg)
	  then data_class = SB_io_err_detail;
	  else data_class = SB_io_err;

       return;
       end convert_data_class;
       
%page; %include log_message;
%page; %include syserr_message;
%page; %include syserr_binary_def;
%page; %include io_syserr_msg;
	end syserr_log_util_;
