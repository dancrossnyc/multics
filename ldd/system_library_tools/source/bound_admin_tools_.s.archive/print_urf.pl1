/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


print_urf: procedure options (variable);

%include urf_entry;

dcl  argument char (al) based (ap);

dcl (error_table_$bad_index,
     error_table_$no_record) fixed bin (35) external;

dcl (ioa_, com_err_) entry options (variable);
dcl  cu_$arg_count entry returns (fixed bin);
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl  urf_manager_$get_abs_entry entry (fixed bin (35), char (*), ptr, fixed bin (35));
dcl  urf_manager_$get_entry entry (char (*), ptr, fixed bin (35));

dcl 1 urfe aligned like urf_entry;
dcl  rec fixed bin (35);
dcl  i fixed bin;
dcl  ap ptr;
dcl  al fixed bin (21);
dcl  code fixed bin (35);
dcl  uid char (32);

	if cu_$arg_count () = 0
	then do rec = 1 by 1;
	     call urf_manager_$get_abs_entry (rec, uid, addr (urfe), code);
	     if code = error_table_$bad_index then return;
	     if code = 0 then call print_entry;
	     else if code ^= error_table_$no_record then do;
		call com_err_ (code, "print_urf");
		return;
	     end;
	end;
	else do i = 1 by 1;
	     call cu_$arg_ptr (i, ap, al, code);
	     if code ^= 0 then return;
	     uid = argument;
	     call urf_manager_$get_entry (uid, addr (urfe), code);
	     if code = 0
	     then call print_entry;
	     else call com_err_ (code, "print_urf", "Getting entry for ^a.", uid);
	end;
	return;

print_entry: procedure;
	     call ioa_ ("^20a ^9a ^a ^a, ^[^a: ^;^s^]^a; ^a; ^a",
		uid, urfe.project, urfe.prog_number, urfe.last_name, (urfe.title ^= ""), urfe.title, urfe.first_name,
		urfe.address, urfe.notes);
	end;
     end;
