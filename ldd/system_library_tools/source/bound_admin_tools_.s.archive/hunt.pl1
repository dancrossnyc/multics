/* ******************************************************
   *                                                    *
   *                                                    *
   *    Copyright, (C) Honeywell Information Systems    *
   *    Inc., 1980.                                     *
   *                                                    *
   *                                                    *
   ****************************************************** */

hunt: proc;

/* HUNT - find a segment in a given subtree. */
/* Modified 780905 by PG to terminate archive segments when finished with them. */
/* Fixed to find secondary names and check for no r on an archive, 05/10/79 S. Herbst */
/* Changed to call sweep_disk_$dir_list 05/29/79 S. Herbst */
/* MCR 4264 fixed to complain about top node 01/07/80 S. Herbst */
/* Implement as active function and fix for multiple archive names 05/14/80 S. Herbst */
/* Fixed to work on the root 01/12/81 S. Herbst */
/* Fixed not to stall when a damaged archive is hit, LA Newcomb, 3Nov1982 */
/* Fixed to look at archive contents before the addmanes, LA Newcomb, 16Nov1982 */

/* format:  style4,indattr,ifthenstmt,ifthen,idind33,^indcomtxt */

%include archive_header;
%include branch_status;

/* static */

dcl  total		        fixed bin int static;
dcl  R_ACCESS		        fixed bin (5) int static options (constant) init (01000b);
dcl  S_ACCESS		        fixed bin (5) int static options (constant) init (01000b);

dcl  arg			        char (arg_len) based (arg_ptr);
dcl  return_arg		        char (return_len) varying based (return_ptr);
dcl  dir_path		        char (168);
dcl  starname		        char (32);

dcl  (af_sw, allsw, archive_sw, firstsw, got_dir, got_starname) bit (1) aligned;

dcl  (arg_ptr, header_ptr, return_ptr, segp) ptr;

dcl  seg_mode		        fixed bin (5);
dcl  (arg_count, arg_len, i, j, return_len) fixed bin;
dcl  code			        fixed bin (35);

dcl  error_table_$badopt	        fixed bin (35) ext;
dcl  error_table_$incorrect_access    fixed bin (35) ext;
dcl  error_table_$no_s_permission     fixed bin (35) ext;
dcl  error_table_$root	        fixed bin (35) ext;
dcl  error_table_$seg_busted	        fixed bin (35) ext;

dcl  complain		        entry variable options (variable);

dcl  absolute_pathname_	        entry (char (*), char (*), fixed bin (35));
dcl  (active_fnc_err_, active_fnc_err_$suppress_name) entry options (variable);
dcl  archive_util_$first_element      entry (ptr, fixed bin (35));
dcl  archive_util_$next_element       entry (ptr, fixed bin (35));
dcl  check_star_name_$entry	        entry (char (*), fixed bin (35));
dcl  (com_err_, com_err_$suppress_name) entry options (variable);
dcl  cu_$af_return_arg	        entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  cu_$arg_ptr		        entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  get_wdir_		        entry returns (char (168));
dcl  hcs_$fs_get_mode	        entry (ptr, fixed bin (5), fixed bin (35));
dcl  hcs_$initiate		        entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr, fixed bin (35));
dcl  hcs_$status_		        entry (char (*), char (*), fixed bin (1), ptr, ptr, fixed bin (35));
dcl  hcs_$terminate_noname	        entry (ptr, fixed bin (35));
dcl  (ioa_, ioa_$rsnnl)	        entry options (variable);
dcl  match_star_name_	        entry (char (*), char (*), fixed bin (35));
dcl  sweep_disk_$dir_list	        entry (char (168), entry);

dcl  (addr, fixed, length, null, rtrim, substr) builtin;
dcl  (seg_fault_error, cleanup)       condition;
%page;
	call cu_$af_return_arg (arg_count, return_ptr, return_len, code);
	if code = 0 then do;
	     af_sw = "1"b;
	     complain = active_fnc_err_;
	     return_arg = "";
	end;
	else do;
	     af_sw = "0"b;
	     complain = com_err_;
	end;

	allsw, firstsw, got_dir, got_starname = "0"b;
	archive_sw = "1"b;

	do i = 1 to arg_count;

	     call cu_$arg_ptr (i, arg_ptr, arg_len, code);

	     if substr (arg, 1, 1) ^= "-" then
		if got_dir then do;
USAGE:		     if af_sw then call active_fnc_err_$suppress_name (0, "hunt",
			     "Usage:  [hunt starname {root_of_tree} {-control_arg}]");
		     else call com_err_$suppress_name (0, "hunt",
			     "Usage:  hunt starname {root_of_tree} {-control_args}");
		     return;
		end;
		else if got_starname then do;
		     call absolute_pathname_ (arg, dir_path, code);
		     if code ^= 0 then do;
			call complain (code, "hunt", "^a", arg);
			return;
		     end;
		     got_dir = "1"b;
		end;
		else do;
		     starname = arg;
		     call check_star_name_$entry (starname, code);
		     if code ^= 0 & code ^= 1 & code ^= 2 then do;
			call complain (code, "hunt", "^a", starname);
			return;
		     end;
		     got_starname = "1"b;
		end;

/* control arg */

	     else if arg = "-all" | arg = "-a" then allsw = "1"b;
	     else if arg = "-first" | arg = "-ft" then firstsw = "1"b;
	     else if arg = "-archive" | arg = "-ac" then archive_sw = "1"b;
	     else if arg = "-no_archive" | arg = "-nac" then archive_sw = "0"b;
	     else do;
		call complain (error_table_$badopt, "hunt", "^a", arg);
		return;
	     end;
	end;

	if ^got_starname then go to USAGE;
	else if ^got_dir then dir_path = get_wdir_ ();

	call hcs_$status_ (dir_path, "", 1, addr (branch_status), null, code);
	if code = error_table_$root then do;
	     code = 0;
	     branch_status.mode = "01000"b;
	end;
	if code ^= 0 & code ^= error_table_$no_s_permission & code ^= error_table_$incorrect_access then do;
	     call complain (code, "hunt", "^a", dir_path);
	     return;
	end;
	if fixed (branch_status.mode, 5) < S_ACCESS then do;
	     call complain (0, "hunt", "No s permission on ^a", dir_path);
	     return;
	end;

	total = 0;

	segp = null ();				/* for cleaning up */
	on cleanup begin;
		if segp ^= null () then
		     call hcs_$terminate_noname (segp, code);
	     end;

	call sweep_disk_$dir_list (dir_path, counter);

bust:	if ^af_sw then call ioa_ ("Total ^d", total);

	return;
%page;
counter: proc (sdn, sen, lvl, een, bptr, nptr);

dcl  sdn			        char (168) aligned,	/* superior dir name */
     sen			        char (32) aligned,	/* dirname */
     lvl			        fixed bin,		/* distance from root */
     een			        char (32),		/* entry name */
     bptr			        ptr,		/* ptr to info structure */
     nptr			        ptr;		/* ptr to names structure */

dcl  xp			        char (168),
     ename		        char (32),
     (ni, xi)		        fixed bin;

dcl  1 branch		        based (bptr) aligned, /* thing returned by star_long */
       2 type		        bit (2) unal,
       2 nname		        bit (16) unal,
       2 nindex		        bit (18) unal,
       2 dtm		        bit (36) unal,
       2 dtu		        bit (36) unal,
       2 mode		        bit (5) unal,
       2 pad		        bit (13) unal,
       2 records		        bit (18) unal;

dcl  names		        (99 /* arbitrary */) char (32) aligned based (nptr);

dcl  ecc			        fixed bin (35);

dcl  (						/* constants */
     bty			        char (4) dim (0:3) init ("link", "seg", "dir", "??"),
     SEG_TYPE		        fixed bin init (1)
     )			        int static options (constant);

	call ioa_$rsnnl ("^a^[>^]^a", xp, xi, sdn, sdn ^= ">", sen);
	if ^allsw then
	     if fixed (branch.type) ^= SEG_TYPE then
		return;
	ecc = 1;					/* so loops will start */
%page;
	if archive_sw then				/* we are to check archive components */
	     if fixed (branch.type) = SEG_TYPE then do;	/* archive may only be a segment */

		on seg_fault_error begin;		/* must handle damaged archives */
			call complain (error_table_$seg_busted, "hunt",
			     "^a^[>^]^a", xp, xp ^= ">", ename);
			go to check_storage_sys_name;
		     end;

		do ni = 1 to fixed (branch.nname) while (ecc ^= 0);

		     ename = names (fixed (branch.nindex) + ni - 1);

		     j = length (rtrim (ename));
		     if j > 8 then
			if substr (ename, j - 7, 8) = ".archive" then do;
			     call hcs_$initiate (xp, ename, "", 0b, 0b, segp, ecc);
			     if segp = null then
				go to check_storage_sys_name;
			     call hcs_$fs_get_mode (segp, seg_mode, ecc);
			     if ecc ^= 0 then
				go to terminate_archive;
			     if seg_mode < R_ACCESS then
				go to terminate_archive;
			     header_ptr = segp;
			     call archive_util_$first_element (header_ptr, ecc);
			     do while (ecc = 0);
				call match_star_name_ ((header_ptr -> archive_header.name), starname, ecc);
				if ecc = 0 then do;
				     total = total + 1;
				     if af_sw then do; /* append archive_path::component_name */
					if return_arg ^= "" then return_arg = return_arg || " ";
					if xp = ">" then return_arg = return_arg || ">";
					else return_arg = return_arg || rtrim (xp) || ">";
					return_arg = return_arg || rtrim (ename);
					return_arg = return_arg || "::";
					return_arg = return_arg || rtrim (header_ptr -> archive_header.name);
				     end;
				     else call ioa_ ("^a ^a^[>^]^a contains ^a", bty (fixed (branch.type)),
					     xp, xp ^= ">", ename, header_ptr -> archive_header.name);
				     if firstsw then do;
					call hcs_$terminate_noname (segp, ecc);
					segp = null (); /* so cleanuyp doesn't get a crack at it */
					go to bust;
				     end;
				end;
				call archive_util_$next_element (header_ptr, ecc);
			     end;
terminate_archive:
			     call hcs_$terminate_noname (segp, ecc);
			     segp = null ();
			     go to check_storage_sys_name; /* done with the archive components */
			end;
		end;
	     end;
%page;
check_storage_sys_name:
	ecc = 1;					/* so loop will go */
	do ni = 1 to fixed (branch.nname) while (ecc ^= 0);
	     ename = names (fixed (branch.nindex) + ni - 1);
	     call match_star_name_ (ename, starname, ecc);
	     if ecc = 0 then do;
		total = total + 1;
		if af_sw then do;
		     if return_arg ^= "" then return_arg = return_arg || " ";
		     if xp ^= ">" then return_arg = return_arg || rtrim (xp);
		     return_arg = return_arg || ">";
		     return_arg = return_arg || rtrim (ename);
		end;
		else call ioa_ ("^a ^a^[>^]^a", bty (fixed (branch.type)), xp, xp ^= ">", ename);
		if firstsw then go to bust;
	     end;
	end;


	return;
     end counter;

     end hunt;
