/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1991   *
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/* format: style4 */

/* AS_WHO - print information about who's on Multics.
   This is a privileged version for use by the Answering Service.
   This entry point also works as an active function, which returns
   Person_id.Project_id of processes which would have been printed.

   AS_WHO$LONG - same thing, but more information.

   AS_WHO$HMU - give header lines with nusers and load.

   This command types out the userid's of listed logged-in users
   from the segment "answer_table", which is maintained by the answering service
   program "lg_ctl_". The possible arguments are as follows:

   .	-lg	print "long who"
   .	-nhe	omit headers
   .	-as	print information on absentee users
   .	-dmn	print information on daemon users
   .	-sc	print information on secondary users
   .      -cpu      print information about cpu usage
   .      -idle     print information about idle time
   .	-connected   
   .                print information about connected processes
   .	-disc	print information about disconnected processes
   .      -process_id, -pid 
   .                print out the process id for each process listed
   .	-pdir_volume {LVname}
   .	-pdv {LVname}  
   .                print pdir volumes, or print only users with pdir volume = LVname
   . 	-channel channel_id_starname
   . 	-chn channel_id_starname
   .		print information on users using named channels
   .	-gp xx	print information on group xx
   .	-nm	sort lines on user name
   .	-pj	sort lines on project id
   .		(the default sort is by time logged in)
   .      -ia       print information on interactive users
   .	Name	list only users with person name "Name"
   .	.Proj	list only users with project name "Proj"
   .	Name.Proj	list only users with person name "Name" and project "Proj"
   END DESCRIPTION */


/****^  HISTORY COMMENTS:
  1) change(70-09-06,VanVleck), approve(), audit(), install():
     Initial coding.
  2) change(71-07-01,EDS), approve(), audit(), install():
     for absentees.
  3) change(76-07-01,Wells), approve(), audit(), install():
     to understand about FTP channels.
  4) change(77-08-01,Casey), approve(), audit(), install():
     to optionally print the pdir volume of each user.
  5) change(78-09-01,Johnson), approve(), audit(), install():
     for long tty channel names (ring0 demultiplexing).
  6) change(78-12-01,Casey), approve(), audit(), install():
     to know about the foreground absentee queue.
  7) change(79-03-21,GDixon), approve(), audit(), install():
     to add -channel, -no_header and [as_who].
  8) change(79-04-01,Casey), approve(), audit(), install():
     for MR7.0a to print foreground and background absentee users
     separately in heading.
  9) change(79-12-01,Hornig), approve(), audit(), install():
     for process preservation and max_users.
 10) change(80-09-06,VanVleck), approve(), audit(), install():
     for CPU and Idle.
 11) change(80-12-01,Kittlitz), approve(), audit(), install():
     for hmu ignore most control args.
 12) change(81-07-07,Herbst), approve(), audit(), install():
     to allow starnames and not implicitly assume Name -> Name*.
 13) change(81-07-07,Herbst), approve(), audit(), install():
     as_who$hmu fixed not to list names with -ia.
 14) change(81-11-01,Kittlitz), approve(), audit(), install():
     user_table_entry conversion.
 15) change(81-12-01,Kittlitz), approve(), audit(), install():
     whotab changes.
 16) change(84-11-01,Pandolf), approve(), audit(), install():
     to include hc_lock.
 17) change(85-12-12,Newcomb), approve(85-12-12,MCR7263),
     audit(86-01-09,Margolin), install(86-01-28,MR12.0-1008):
     added the -connected ctl arg; made some minor corrections to declarations
     and argument processing/AF usage; changed to use ssu_ standalone
     invocation; fixed some unreported bugs.
 18) change(86-03-18,MSharpe), approve(86-04-28,MCR7405),
     audit(86-07-01,EJSharpe), install(86-08-18,MR12.0-1130):
     Added -process_id (-pid) control arg, Removed undocumented -net
     control arg.
 19) change(86-07-10,Hartogs), approve(86-07-10,MCR7451),
     audit(86-08-14,GWMay), install(86-08-18,MR12.0-1130):
     Fix bugs in as_who.  Correct so that idle and cpu times include number of
     hours.  Access ring0_peek only when necessary, thereby allowing use by
     users with access to some system tables.
 20) change(86-08-22,Hartogs), approve(86-08-22,PBF7451),
     audit(86-08-22,Lippard), install(86-08-22,MR12.0-1139):
     Fixed to work with .project_id.
 21) change(87-04-26,GDixon), approve(87-05-01,MCR7741),
     audit(87-05-06,Parisek), install(87-08-03,MR12.1-1055):
     Upgraded for change to answer_table.incl.pl1 and user_table_entry.incl.pl1
 22) change(87-08-11,Hartogs), approve(87-08-11,MCR7714),
     audit(87-08-11,Lippard), install(87-08-13,MR12.1-1085):
     Fixed to work correctly on successive invocation with -idle and -cpu.
 23) change(91-03-21,Vu), approve(91-03-21,MCR8244), audit(91-12-05,Zimmerman),
     install(91-12-06,MR12.5-1002):
     as_who incorrectly interprets preemption.
 24) change(92-10-02,Zimmerman), approve(92-10-02,MCR8269),
     audit(92-10-05,WAAnderson), install(92-10-16,MR12.5-1026):
     Lack of access to copy info from tc_data is now reported on each
     invocation, rather than once per process.
                                                   END HISTORY COMMENTS */

%page;
as_who:
     procedure options (variable, separate_static);

/* START OF DECLARATIONS */

/* Automatic */
dcl  argno fixed bin init (0),			/* number of argument */
     arg_count fixed bin init (0),
     retp ptr init (null ()),				/* ptr to af return arg. */
     ap ptr init (null ()),				/* ptr to argument */
     (pp1, pp2) ptr init (null ()),			/* temporaries */
     al fixed bin (21) init (0),			/* lth of argument */
     code fixed bin (35) init (0),			/* file-system error code */
     (f1, f2) float bin init (0),			/* conversion temps */
     retl fixed bin (21) init (0),			/* max length of af return arg. */
     sort fixed bin init (SORT_BY_DATE),		/* type of sort */
     no_usage bit (1) init (FALSE),			/* 1 if can't get CPU usage */
     have_read_apt bit (1) init (FALSE),
     long bit (1) aligned init (FALSE),			/* 1 if long who wanted */
     abs bit (1) aligned init (FALSE),			/* 1 if only information on absentee users */
     afsw bit (1) aligned init (FALSE),			/* 1 if as_who entry invoked as active fnc */
     dmn bit (1) aligned init (FALSE),			/* 1 if only info on daemon users */
     iasw bit (1) aligned init (FALSE),			/* 1 if interactives. */
     connected_sw bit (1) aligned init (FALSE),		/* 1 if only connected */
     disc_sw bit (1) aligned init (FALSE),		/* 1 if only disconnected */
     chnsw bit (1) aligned init (FALSE),		/* 1 if only users of given channels selected. */
     nhesw bit (1) aligned init (FALSE),		/* 1 if headings should not be printed. */
     no_ulist bit (1) aligned init (FALSE),		/* 1 if only header ("hmu" cmd) */
     pid_sw bit (1) aligned init (FALSE),		/* 1 if displaying pid */
     sbsw bit (1) aligned init (FALSE),			/* 1 if only secondarys */
     selgp char (8) aligned init (""),			/* Selects group */
     selx fixed bin init (0),				/* if particular users wanted */
     sel_starsw bit (1) init (FALSE),			/* ON if asking for a set of users */
     dotl fixed bin init (0),				/* location of dot in arg */
     channel_name char (32),				
     chnnm char (32) init ("**"),		/* channels tag used to select users. */
     sel_names (100) char (32),
     (i, j) fixed bin init (0),			/* index */
     ary (256) fixed bin,				/* sort array */
     d fixed bin init (0),				/* distance between sorted elems */
     last fixed bin init (0),				/* highest index in whotab */
     swap fixed bin init (0),				/* 1 if a swap was done */
     ajd fixed bin init (0),				/* temp for sort, ary(j+d) */
     (time, time1) char (16) init (""),			/* ASCII time */
     why char (124) init (""),			/* reason for shutdown */
     clock_time fixed bin (71) init (0),
     (prim, nolist, anon) char (1) init (""),		/* pretty print temps */
     grp char (8) init (""),				/* ... */
     absdn char (168) init (""),			/* ... */
     absen char (32) init (""),			/* ... */
     aj fixed bin init (0),				/* temp, ary(j) */
     did fixed bin init (0),				/* count of lines printed */
     abs_name char (6) init (""),			/* temp for absentee equiv of tty name */
     select_sw fixed bin init (0),			/* switch to indicate whether user is selected */
     pers char (28) init (""),			/* temp for name */
     proj char (28) init (""),			/* temp for project */
     process_id bit (36),				/* temp for 1st half of pid */
     absentee_users fixed bin init (0),			/* temp for max number of absentee users */
     abs_running fixed bin init (0),			/* Shows any residual users */
     foreground_users fixed bin init (0),		/* temp for number of foreground absentee users */
     fancy char (1),				/* used to eliminate certain new line chars on hmu */
     k fixed bin init (0);				/* index */
dcl  max_chan_name fixed bin init (6);			/* max length of name of a tty channel */
dcl  pdvsw bit (1) init (FALSE);
dcl  pdlvix fixed bin init (0);
dcl  lvnm char (32) init ("");
dcl  proc_usage char (10) init ("");
dcl  proc_idle char (10) init ("");
dcl  (cpusw, idlesw) bit (1) init (FALSE);
dcl  sci_ptr ptr init (null ());

/* Based */
dcl
     arg char (al) unaligned based (ap),		/* pickup for args */
     ret char (retl) varying based (retp);		/* af return argument. */

/* Constant */
dcl  (
     FALSE bit (1) init ("0"b),
     MY_NAME char (6) init ("as_who"),
     MY_NAME_HMU char (21) init ("as_who$how_many_users"),
     MY_NAME_LONG char (11) init ("as_who$long"),
     NL char (1) init ("
"),
     SORT_BY_DATE fixed bin init (0),
     SORT_BY_NAME fixed bin init (1),
     SORT_BY_PROJECT fixed bin init (2),
     TEN_UNITS fixed bin init (10.0e0),                    /* Ten units are stored for each normal user */
     TRUE bit (1) init ("1"b)
     ) int static options (constant);

/* Internal Static */
dcl  (
     ip ptr init (null),				/* ptr to installation_parms */
     initializer_process bit (1) init ("0"b /* FALSE */),
     static_ansp ptr init (null),			/* ptr to answer table */
     static_autp ptr init (null),			/* ptr to absentee user table, used to decide when to */
						/* re-init various pointers to tables */
     static_dtp ptr init (null),
     static_dutp ptr init (null),			/* ptr to daemon user table */
     sysdir char (64) init (""),			/* must be set first time through */
     tcml fixed bin (19) init (0),
     tcmp0 ptr init (null ()),
     whoptr ptr init (null)				/* ptr to system "whotab" */
     ) int static;

/* Error codes */
dcl  (error_table_$badopt,
     error_table_$logical_volume_not_defined,
     error_table_$noarg,
     error_table_$too_many_args
     ) fixed bin (35) ext static;

/* Entry */
dcl  check_star_name_$entry entry (char(*), fixed bin(35));
dcl  match_star_name_ entry (char(*), char(*), fixed bin(35));
dcl  disk_table_$get_dtp entry (ptr);
dcl  mdc_$read_disk_table entry (ptr, fixed bin (35));
dcl  get_process_id_ entry returns (bit (36));
dcl  initiate_file_ entry (char (*), char (*), bit (*), ptr, fixed bin (24), fixed bin (35));
dcl  (ioa_, ioa_$nnl) entry options (variable);
dcl  ioa_$rsnnl entry options (variable);
dcl  date_time_ entry (fixed bin (71), char (*));
dcl  expand_pathname_ entry (char (*), char (*), char (*), fixed bin (35));
dcl  ring0_get_$segptr entry (char (*), char (*), ptr, fixed bin (35));
dcl  ring_zero_peek_ entry (ptr, ptr, fixed bin (19), fixed bin (35));
dcl  ring_zero_peek_$get_max_length_ptr entry (ptr, fixed bin (19), fixed bin (35));
dcl  ssu_$abort_line entry () options (variable);
dcl  ssu_$arg_count entry (ptr, fixed bin);
dcl  ssu_$arg_ptr entry (ptr, fixed bin, ptr, fixed bin (21));
dcl  ssu_$destroy_invocation entry (ptr);
dcl  ssu_$get_temp_segment entry (ptr, char (*), ptr);
dcl  ssu_$return_arg entry (ptr, fixed bin, bit (1) aligned, ptr,
	fixed bin (21));
dcl  ssu_$standalone_invocation entry (ptr, char (*), char (*), ptr, entry,
	fixed bin (35));

/* External static */
dcl  sys_info$system_control_dir char (168) varying aligned external static;

/* Builtin */
dcl  (addr, addrel, clock, divide, fixed, hbound, index, length, max, null, rtrim, search, substr) builtin;

/* Condition */
dcl  cleanup condition;
%page;
/* as_who:					*/
/*     procedure options (variable, separate_static);	*/

	on cleanup call clean_up ();
	call ssu_$standalone_invocation (sci_ptr, MY_NAME, "",
	     null (), ABORT_ENTRY, code);
	if code ^= 0 then go to exit_no_cleanup;

	call ssu_$return_arg (sci_ptr, arg_count, afsw,
	     retp, retl);

	if afsw then do;
	     ret = "";
	     nhesw = TRUE;
	end;

arglp:	if arg_count ^= 0 then
READ_ARGS:     do argno = 1 to arg_count;
	     call ssu_$arg_ptr (sci_ptr, argno, ap, al);	/* get nth argument */

	     if arg = "-nm" | arg = "-name" then sort = SORT_BY_NAME;
	     else if arg = "-pj" | arg = "-project" then sort = SORT_BY_PROJECT;
	     else if arg = "-lg" | arg = "-long" then long = TRUE; /* long who? */
	     else if arg = "-nhe" | arg = "-no_header" then nhesw = TRUE; /* omit headers ? */
	     else if arg = "-as" | arg = "-absentee" then abs = TRUE; /* absentee users? */
	     else if arg = "-dmn" | arg = "-daemon" then dmn = TRUE; /* Daemons? */
	     else if arg = "-ia" | arg = "-interactive" then iasw = TRUE;
	     else if arg = "-connected" then connected_sw = TRUE;
	     else if arg = "-disconnected" | arg = "-disc" then disc_sw = TRUE; /* disconnected processes */
	     else if arg = "-process_id" | arg = "-pid" then pid_sw = TRUE; /* display the process_id */
	     else if arg = "-gp" | arg = "-group" then do;
		if argno = arg_count then
BAD_GROUP:	     call ssu_$abort_line (sci_ptr, error_table_$noarg, "-group requires a load control group name.");
		argno = argno + 1;
		call ssu_$arg_ptr (sci_ptr, argno, ap, al);
		if index (arg, "-") = 1 then
		     go to BAD_GROUP;
		selgp = arg;
	     end;
	     else if arg = "-sc" | arg = "-secondary" then sbsw = TRUE; /* Secondary users? */
	     else if arg = "-pdir_volume" | arg = "-pdv" then
PROCESS_PDIR_VOL_ARG:
		do;				/* optionally followed by LVname */
		if argno = arg_count then
		     pdvsw = TRUE;			/* no lvname */
		else do;				/* see if next arg is lvname or ctl arg */
		     call ssu_$arg_ptr (sci_ptr, argno + 1, ap, al);
		     if index (arg, "-") = 1 then
			pdvsw = TRUE;		/* ctl arg ==> no LV name */
		     else do;
			lvnm = arg;		/* remember the name, for later lookup in disk_table */
			pdvsw = FALSE;		/* don't print each users pdlvname - they will all be the same */
			argno = argno + 1;		/* increment so we don't re-process LVname */
		     end;
		end;
	     end PROCESS_PDIR_VOL_ARG;
	     else if arg = "-cpu" then cpusw = TRUE;
	     else if arg = "-idle" then idlesw = TRUE;

	     else if arg = "-chn" | arg = "-channel" then do;
		chnsw = TRUE;
		if argno = arg_count then
bad_chn:		     call ssu_$abort_line (sci_ptr, error_table_$noarg, "-channel requires a channel id argument.");
		argno = argno + 1;
		call ssu_$arg_ptr (sci_ptr, argno, ap, al);
		if index (arg, "-") = 1 then
		     go to bad_chn;
		chnnm = arg;
		call check_star_name_$entry (chnnm, code);
		if code < 0 | code > 2 then
		     call ssu_$abort_line (sci_ptr, code, "Invalid channel id ^a.", arg);
	     end;
	     else if index (arg, "-") = 1 then
		call ssu_$abort_line (sci_ptr, error_table_$badopt, "^a", arg);
	     else do;				/* n.o.t.a., must be user-selection */
		selx = selx + 1;			/* up index in select array */
		if selx > hbound (sel_names, 1) then
		     call ssu_$abort_line (sci_ptr, error_table_$too_many_args,
			"Too many selection parameters given, maximum is ^d.", hbound (sel_names, 1));
		if search (arg, "*?") ^= 0 then sel_starsw = TRUE; /* stars specified at all */
		dotl = index (arg, ".");		/* where's the dot? */
		if dotl = 0 then sel_names (selx) = arg || ".*"; /* Person_starname -> Person_starname.* */
		else if dotl = 1 then do;
		     sel_starsw = TRUE;		/* asking for a set of users */
		     sel_names (selx) = "*" || arg;	/* Proj_starname -> *.Proj_starname */
		end;
		else sel_names (selx) = arg;
	     end;
	end READ_ARGS;

go:	if static_autp = null then do;		/* is this the first call? */
	     if sysdir = "" then sysdir = sys_info$system_control_dir;
	     call initiate_file_ (sysdir, "installation_parms", R_ACCESS, ip, (0) /* ignore bit count */, code);
	     if ip = null then call ssu_$abort_line (sci_ptr, code, "installation_parms");
	     call initiate_file_ (sysdir, "daemon_user_table", R_ACCESS, static_dutp, (0) /* ignore bit count */, code);
	     if static_dutp = null then call ssu_$abort_line (sci_ptr, code, "daemon_user_table");
	     call initiate_file_ (sysdir, "whotab", R_ACCESS, whoptr, (0) /* ignore bit count */, code);
	     if whoptr = null then call ssu_$abort_line (sci_ptr, code, "whotab");
	     call initiate_file_ (sysdir, "answer_table", R_ACCESS, static_ansp, (0) /* ignore bit count */, code);
	     if static_ansp = null then call ssu_$abort_line (sci_ptr, code, "answer_table");

	     if static_ansp->anstbl.as_procid = get_process_id_ () then
						/* if we are the initializer process */
		initializer_process = TRUE;		/* remember that because we have a disk table copy */
	     else initializer_process = FALSE;		/* we don't, so we have to make one */
						/* set autp so we don't re-initialize every invocation */
	     call initiate_file_ (sysdir, "absentee_user_table", R_ACCESS, static_autp, (0) /* ignore bit count */, code);
	     if static_autp = null then call ssu_$abort_line (sci_ptr, code, "absentee_user_table");
	end;

          if (cpusw | idlesw) & tcmp0 = null then do;
	     call ring0_get_$segptr ("", "tc_data", tcmp0, code);
	     if code ^= 0 then call ssu_$abort_line (sci_ptr, code, "tc_data");
	     call ring_zero_peek_$get_max_length_ptr (tcmp0, tcml, code);
	     if code ^= 0 then do;
		tcmp0 = null;
		call ssu_$abort_line (sci_ptr, code, "tc_data");
	     end;
	     
          end;

	ansp = static_ansp;
	autp = static_autp;
	dutp = static_dutp;

	if connected_sw & disc_sw then do;
	     iasw = TRUE;				/* conn & disc users = interactive */
	     connected_sw, disc_sw = FALSE;
	end;

	if pdvsw | lvnm ^= "" then do;		/* if we need disk_table */
	     if static_dtp = null then do;		/* if we don't have it, get it */
		if initializer_process then		/* if this is the initializer process, we always have a copy */
		     call disk_table_$get_dtp (static_dtp); /* of disk_table in ring 4, so get ptr to that */
		else				/* otherwise we have to make a copy and update it each time */
		     call ssu_$get_temp_segment (sci_ptr, "disk_table", static_dtp);
	     end;

	     if ^initializer_process then do;		/* update as_who_disk_table */
		call mdc_$read_disk_table (static_dtp, code);
		if code ^= 0 then call ssu_$abort_line (sci_ptr, code, "error from mdc_$read_disk_table");
	     end;

	     dtp = static_dtp;

	     if lvnm ^= "" then do;			/* if -pdv LVname given, look up LVname in disk_table */
		do i = 1 to dt.n_lv_entries
		     while (dt.lv_array (i).lvname ^= lvnm); end;
		if i > dt.n_lv_entries then
		     call ssu_$abort_line (sci_ptr, error_table_$logical_volume_not_defined, "^a", lvnm);
		pdlvix = i;			/* remember disk table index of the specified vol */
	     end;
	end;
	max_chan_name = 6;				/* compute length of longest channel name */
	do j = 1 to anstbl.current_size;
	     utep = addr (anstbl.entry (j));
	     if ute.active >= NOW_LOGGED_IN then
		max_chan_name = max (max_chan_name, length (rtrim (ute.tty_name)));
	end;

	if nhesw then go to no_header;
	if no_ulist then fancy = " ";			/* reduce number of new lines between totals */
	else fancy = NL;

	clock_time = clock ();
	absentee_users = autbl.max_abs_users;
	abs_running = absentee_users + autbl.n_abs_run;
	foreground_users = autbl.n_abs_run - autbl.n_background_abs;

	if ^sbsw &
	     ^chnsw &
	     selgp = "" &
	     pdlvix = 0 &
	     selx = 0 then do;			/* print header if no users selected */
	     if dmn then do;
		call ioa_ ("^d daemons.", whotab.n_daemons);
		if no_ulist then go to pnl;
	     end;
	     if (connected_sw | disc_sw | iasw | chnsw) then do;
		if no_ulist then do;
		     f1 = anstbl.n_units / TEN_UNITS;
		     f2 = anstbl.max_units / TEN_UNITS;
		     go to print_ia_hdr;
		end;
		call ioa_ ("");
		if long then go to prt_user_header;
		else go to ias;
	     end;
	     if abs then do;
		if long then do;
		     call ioa_ ("Absentee users = ^d background^[,^x^d foreground^;^s^]; Max background absentee users = ^d^a",
			autbl.n_background_abs, (foreground_users ^= 0), foreground_users, absentee_users, fancy);
		     go to prt_user_header;		/* Print listing header */
		end;
		call ioa_ ("");			/* Print blank line first */
		go to print_abs_hdr;		/* print short absentee header only */
	     end;
	     if dmn then do;
		call ioa_ ("");
		if long then go to prt_user_header;
		else go to daemons;
	     end;

	     f1 = anstbl.n_units / TEN_UNITS;		/* format up units */
	     f2 = anstbl.max_units / TEN_UNITS;		/* ... */
	     if long then do;			/* long who? */
		call date_time_ (whotab.timeup, time);	/* yup. make heading */
		call ioa_ ("^/Multics ^a; ^a", whotab.sysid, installation_parms.installation_id);
		call ioa_ ("Load = ^.1f of ^.1f units; users = ^d of ^d", f1, f2, anstbl.n_users, anstbl.max_users);
		if abs_running > 0
		then call ioa_ ("Absentee users = ^d background^[,^x^d foreground^;^s^]; Max background absentee users = ^d",
			autbl.n_background_abs, (foreground_users ^= 0), foreground_users, absentee_users);
		call ioa_ ("Daemon users = ^d", whotab.n_daemons);
		call ioa_ ("System up since ^a", time);
		if whotab.nextsd ^= 0 then do;
		     why = whotab.why;
		     if why < "" then why = "";
		     call date_time_ (whotab.nextsd, time);
		     if whotab.until = 0 then call ioa_ ("Scheduled shutdown at ^a ^a", time, why);
		     else do;
			call date_time_ (whotab.until, time1);
			call ioa_ ("Scheduled shutdown from ^a to ^a ^a", time, time1, why);
		     end;
		end;
		call date_time_ (whotab.lastsd, time);
		if whotab.erfno = "crash" then call ioa_ ("Last crash was at ^a^a", time, fancy);
		else if whotab.lastsd = 0 then call ioa_ ("^a", fancy);
		else if whotab.erfno = "" then call ioa_ ("Last shutdown was at ^a^a", time, fancy);
		else call ioa_ ("Last crash (ERF# ^a) was at ^a^a", whotab.erfno, time, fancy);
prt_user_header:
		if no_ulist then go to pnl;
		call ioa_ ("^4xLogin at^6xTTY  Load^3xChan^vxGroup^3x^[^3xCPU^3x   ^]^[^3xIdle^2x  ^]^[ Process ID  ^] PNDS  User ID^[^2x(pdir_volume)^]^/",
		     max_chan_name - length ("   "), cpusw, idlesw, pid_sw, pdvsw);
	     end;
	     else do;				/* short who. */
print_ia_hdr:	call ioa_ ("^/Multics ^a, load ^.1f/^.1f; ^d/^d users, ^d daemons.", whotab.sysid,
		     f1, f2, anstbl.n_users, anstbl.max_users, whotab.n_daemons);
		if abs_running > 0 & (^no_ulist | abs | (^iasw & ^dmn))
		then				/* ! */
print_abs_hdr:	     call ioa_ ("Absentee users ^d/^d^[^x(+^d FG)^]",
			autbl.n_background_abs, absentee_users, (foreground_users ^= 0), foreground_users);
		call ioa_$nnl ("^a", fancy);		/* Could have put in a conditional */
	     end;
	end;
no_header:
	if no_ulist then go to pnl;			/* if "hmu" command */
	if (connected_sw | disc_sw | iasw) then go to ias;
	if abs then go to abs_portion;		/* if "as_who -as" command */
	if dmn then go to daemons;

ias:	last = anstbl.current_size;			/* save high limit on who */
	do j = 1 to last;				/* set up sort array */
	     ary (j) = j;				/* ... */
	end;

	d = last;					/* set up for Shell sort */
pass:	d = divide (d + 1, 2, 17, 0);			/* ... */
	swap = 0;					/* ... */
	do j = 1 to last - d;			/* comparison loop */
	     aj = ary (j);				/* make temps */
	     ajd = ary (j + d);			/* ... */
	     pp1 = addr (anstbl.entry (aj));
	     pp2 = addr (anstbl.entry (ajd));
	     if sort = SORT_BY_DATE then
		if pp1 -> ute.login_time > pp2 -> ute.login_time then go to ic;
	     if sort = SORT_BY_NAME then
		if pp1 -> ute.person > pp2 -> ute.person then go to ic;
	     if sort = SORT_BY_PROJECT then
		if pp1 -> ute.project > pp2 -> ute.project then go to ic;
		else if pp1 -> ute.project = pp2 -> ute.project then
		     if pp1 -> ute.person > pp2 -> ute.person then do;
ic:			ary (j) = ajd;		/* No. Swap entries */
			ary (j + d) = aj;		/* ... */
			swap = swap + 1;		/* remember a swap */
		     end;
	end;
	if swap > 0 then go to pass;			/* if out of order do it again */
	if d > 1 then go to pass;			/* ... */

	do j = 1 to last;				/* now the print loop */
	     utep = addr (anstbl.entry (ary (j)));	/* set up ptr to user */
	     if ute.active < NOW_LOGGED_IN then go to skip; /* skip dead entries */
	     pers = ute.person;			/* copy personal name */
	     proj = ute.project;			/* copy project */
	     if pid_sw then process_id = ute.proc_id;     /* copy process id */
	     if selgp ^= "" then if ute.group ^= selgp then go to skip;
	     if pdlvix > 0 & ute.pdir_lvix ^= pdlvix then goto skip;
	     if sbsw then if ute.standby_line = 0 then go to skip;
	     if connected_sw then
		if ute.uflags.disconnected then go to skip;
	     if disc_sw then if ^ute.uflags.disconnected then goto skip;
	     if chnsw then do;			/* select users by channel id. */
		call match_star_name_ (ute.tty_name, chnnm, code);
		if code ^= 0 then go to skip;
	     end;

	     if selx = 0 then go to print;		/* any users selected? */
	     call select;				/* check for selected users */
	     if select_sw = 0 then go to skip;		/* user not in selected group */

print:	     did = did + 1;				/* remember we did one */
	     if ute.anonymous = 0 then anon = " ";
	     else anon = "*";
	     if ute.preempted ^= 0 then prim = "X";
	     else if ute.at.nobump then prim = "+";	/* Can be bumped by operator? */
	     else if ute.standby_line = 1 then prim = "S";/* Secondary? */
	     else if ute.cant_bump_until < clock_time then prim = ">";
	     else prim = " ";
	     if pdvsw then call get_lvnm ((ute.pdir_lvix)); /* sets lvnm */
	     call get_usage (ute.proc_id, ute.cpu_usage);
	     if afsw then do;
                    ret = ret || rtrim (pers);
                    ret = ret || ".";
                    ret = ret || rtrim (proj);
                    ret = ret || " ";
               end;
	     else if long then do;			/* long who? */
		call date_time_ (ute.login_time, time); /* yup. */
		if substr (time, 1, length ("mm/dd/yy")) = substr (time1, 1, length ("mm/dd/yy")) then substr (time, 1, length ("mm/dd/yy")) = (8)" ";
		else time1 = time;
		f1 = ute.user_weight / TEN_UNITS;	/* get nice units */
		if ute.at.nolist then nolist = "N";
		else nolist = " ";
		grp = ute.group;			/* Get group */
		if grp = "Other" then grp = "";

/**** Avoid operator mistakes by not displaying channel name when the user
      is disconnected.  This channel name is not terribly useful anyway in
      this case, and prevents attempting to bump disconnected users by channel
      name (which may result in bumping the user currently on that channel). */
		if ute.uflags.disconnected then channel_name = "";
		   else channel_name = ute.tty_name;
		call ioa_ ("^16a  ^4a ^4.1f^3x^va ^8a^[^11a ^;^s^]^[^11a^;^s^] ^[^12.3b ^;^s^]^1a^1a^[D^; ^]^[S^; ^] ^1a^a.^a^[^2x(^a)^;^s^]",
		     time, ute.tty_id_code, f1,
		     max_chan_name, channel_name, grp,
		     cpusw, proc_usage,
		     idlesw, proc_idle, pid_sw, process_id,
		     prim, nolist, ute.uflags.disconnected, ute.uflags.suspended, anon,
		     pers, proj, pdvsw, lvnm);
	     end;
	     else do;				/* short who. */
		call ioa_ ("^[^11a ^;^s^]^[^11a ^;^s^]^[^12.3b  ^;^s^]^a^a.^a ^a^[^2x(^a)^;^s^]",
		     cpusw, proc_usage,
		     idlesw, proc_idle, pid_sw, process_id,
		     anon, pers, proj, prim, pdvsw, lvnm);
	     end;
skip:	end;
	if (connected_sw | disc_sw | iasw) then if ^abs then if ^dmn then go to done;
		else go to daemons;

abs_portion:
	if autbl.n_abs_run <= 0 then go to daemons;
	do j = 1 to autbl.current_size;		/* run through table */
	     utep = addr (autbl.entry (j));		/* get address of abs user entry */
	     if ute.active = 0 then go to skip1;	/* only look at used entries */
	     pers = ute.person;			/* copy personal name */
	     proj = ute.project;			/* copy project name */
	     if pid_sw then process_id = ute.proc_id;     /* copy process id */
	     if selgp ^= "" then if ute.group ^= selgp then go to skip1;
	     if pdlvix > 0 & ute.pdir_lvix ^= pdlvix then goto skip1;
	     if sbsw then go to skip1;

	     call ioa_$rsnnl ("abs^d", abs_name, k, j);
	     if chnsw then do;			/* select absentee users by abs_name. */
		call match_star_name_ (abs_name, chnnm, code);
		if code ^= 0 then go to skip1;
	     end;

	     if selx = 0 then go to print1;		/* are any users selected */
	     call select;				/* check for selected users */
	     if select_sw = 0 then go to skip1;		/* user not in selected group */
print1:	     did = did + 1;				/* increment count of printed persons */
	     if ute.anonymous = 0 then anon = " ";
	     else anon = "*";
	     call expand_pathname_ ((ute.input_seg), absdn, absen, code);
	     k = index (absen, ".absin");
	     if k > 0 then substr (absen, k) = "";
	     if pdvsw then call get_lvnm ((ute.pdir_lvix)); /* sets lvnm */
	     call get_usage (ute.proc_id, ute.cpu_usage);
	     if afsw then do;
                    ret = ret || rtrim (pers);
	          ret = ret || ".";
		ret = ret || rtrim (proj);
		ret = ret || " ";
	     end;    
               else if long then do;
		call date_time_ (ute.login_time, time);
		if substr (time, 1, length ("mm/dd/yy")) = substr (time1, 1, length ("mm/dd/yy")) then substr (time, 1, length ("mm/dd/yy")) = (8)" ";
		else time1 = time;
		f1 = ute.user_weight / TEN_UNITS;
		grp = ute.group;
		if grp = "Other" then grp = "";
		call ioa_ ("^16a  Q ^[FG^s^;^d^x^] ^4.1f^3x^va ^8a^[^11a ^;^s^]^[^11a^;^s^]^[ ^12.3b^;^s^] A  ^[S^; ^] ^1a^a.^a (^a)^[^2x(^a)^;^s^]",
		     time, (ute.queue = 0), ute.queue, f1,
		     max_chan_name, abs_name, grp,
		     cpusw, proc_usage,
		     idlesw, proc_idle, pid_sw, process_id,
		     ute.uflags.suspended,
		     anon, pers, proj, absen, pdvsw, lvnm);
	     end;
	     else call ioa_ ("^[^11a ^;^s^]^[^11a ^;^s^]^[^12.3b  ^;^s^]^a^a.^a (^a)^[^2x(^a)^;^s^]",
		     cpusw, proc_usage,
		     idlesw, proc_idle, pid_sw, process_id,
		     anon, pers, proj, absen, pdvsw, lvnm);
skip1:	end;

daemons:	if abs then if ^dmn then go to done;
	do j = 1 to dutbl.current_size;		/* print out daemons */
	     utep = addr (dutbl.entry (j));
	     if ute.active ^= NOW_HAS_PROCESS then go to skip2; /* skip if not in */
	     pers = ute.person;
	     proj = ute.project;
	     if pid_sw then process_id = ute.proc_id;
	     if selgp ^= "" then if ute.group ^= selgp then go to skip2;
	     if pdlvix > 0 & ute.pdir_lvix ^= pdlvix then goto skip2;
	     if sbsw then go to skip2;

	     if chnsw then do;			/* select daemons by tty_name */
		call match_star_name_ (ute.tty_name, chnnm, code);
		if code ^= 0 then go to skip2;
	     end;

	     if selx = 0 then go to print2;
	     call select;
	     if select_sw = 0 then go to skip2;
print2:	     did = did + 1;
	     if pdvsw then call get_lvnm ((ute.pdir_lvix)); /* sets lvnm */
	     call get_usage (ute.proc_id, ute.cpu_usage);
	     if afsw then do;
	          ret = ret || rtrim (pers);
		ret = ret || ".";
		ret = ret || rtrim (proj);
		ret = ret || " ";
               end;
	     else if long then do;
		call date_time_ (ute.login_time, time);
		if substr (time, 1, length ("mm/dd/yy")) = substr (time1, 1, length ("mm/dd/yy")) then substr (time, 1, length ("mm/dd/yy")) = (8)" ";
		else time1 = time;
		f1 = ute.user_weight / 1e1;
		if ute.at.nolist then nolist = "N"; else nolist = " ";
		grp = ute.group;
		if grp = "Other" then grp = "";

/**** Avoid operator mistakes by not displaying channel name when the user
      is disconnected.  This channel name is not terribly useful anyway in
      this case, and prevents attempting to bump disconnected users by channel
      name (which may result in bumping the user currently on that channel). */
		if ute.uflags.disconnected then channel_name = "";
		else channel_name = ute.tty_name;
		call ioa_ ("^16a  ^4a ^4.1f^3x^va ^8a^[^11a ^;^s^]^[^11a^;^s^]^[^12.3b^;^s^] D^1a    ^a.^a^[^2x(^a)^;^s^]",
		     time, ute.tty_id_code, f1,
		     max_chan_name, channel_name, grp,
		     cpusw, proc_usage,
		     idlesw, proc_idle, pid_sw, process_id,
		     nolist, pers, proj, pdvsw, lvnm);
	     end;
	     else do;				/* short */
		call ioa_ ("^[^11a ^;^s^]^[^11a ^;^s^]^[^12.3b  ^;^s^]^a.^a D^[^2x(^a)^;^s^]",
		     cpusw, proc_usage,
		     idlesw, proc_idle, pid_sw, process_id,
		     pers, proj, pdvsw, lvnm);
	     end;
skip2:	end;

done:	if afsw then do;
	     if length (ret) > 0 then			/* remove trailing blank from list of pers.proj ids */
		ret = substr (ret, 1, length (ret) - 1);
	end;
	else if selx ^= 0 then			/* If user names specified */
	     if did = 0 then do;			/* if printed nobody */
		if pdlvix = 0 then			/* if users were not eliminated because of -pdv LVname */
		     call ioa_ ("User^[s^] not logged in.", selx > 1 | sel_starsw);
	     end;
	     else					/* ! */
pnl:		call ioa_ ("");			/* extra CR */
	else if did ^= 0				/* were any printed? */
	then go to pnl;

	if pdlvix ^= 0 & did = 0 then
	     call ioa_ ("No^[ne of the specified^] users have process directories on volume ""^a""",
		((selgp ^= "") | sbsw | selx ^= 0 | connected_sw | disc_sw | iasw | abs | dmn), lvnm);

exit:	call clean_up;				/* releases temp segs etc. */
exit_no_cleanup:
	return;					/* done. */

/* end as_who; */
%page;
clean_up: proc;

/* reset a pointer and get rid of the ssu invocation, and thus */
/* any temporary storage acquired. */

	if ^initializer_process then static_dtp = null;	/* destroy will release temp seg, if acquired */
	if sci_ptr ^= null then call ssu_$destroy_invocation (sci_ptr);

     end clean_up;
%skip (6);
as_who$long: entry;
	on cleanup call clean_up ();
	call ssu_$standalone_invocation (sci_ptr, MY_NAME_LONG, "",
	     null (), ABORT_ENTRY, code);
	if code ^= 0 then go to exit_no_cleanup;

	call ssu_$arg_count (sci_ptr, arg_count);	/* not allowed to be an AF */

	long = TRUE;				/* set switch and join up */
	go to arglp;
%skip (6);
as_who$how_many_users:
as_who$hmu: entry ();

	call ssu_$standalone_invocation (sci_ptr, MY_NAME_HMU, "",
	     null (), ABORT_ENTRY, code);
	if code ^= 0 then go to exit_no_cleanup;

	call ssu_$arg_count (sci_ptr, arg_count);	/* not allowed to be an AF */
	if arg_count > 0				/* no args allowed */
	then call ssu_$abort_line (sci_ptr, error_table_$too_many_args, "No arguments allowed, ^d given.", arg_count);

	no_ulist = TRUE;				/* do just a
						   header */
	go to go;
%page;
as_who$as_who_init: entry (sysdirname);

dcl  sysdirname char (*) parameter;

	sysdir = sysdirname;
	static_ansp, static_autp, static_dutp = null;
	return;
%skip (6);
ABORT_ENTRY:
     procedure ();
	go to exit;
     end ABORT_ENTRY;
%skip (6);
select: proc;
						/* internal procedure to see if user is selected by name */

dcl  group_id char (32);
dcl  code fixed bin (35);

	select_sw = 1;				/* assume that user is part of selected group */
	group_id = rtrim (pers) || "." || proj;
	do k = 1 to selx;				/* search all classes of selection */
	     call match_star_name_ (group_id, sel_names (k), code);
	     if code = 0 then return;
	end;

	select_sw = 0;				/* user is not part of selected group */
	return;
     end select;
%skip (6);
get_lvnm: proc (lvix);
dcl  lvix fixed bin;

	if lvix > 0 & lvix <= dt.n_lv_entries then
	     lvnm = dt.lv_array (lvix).lvname;
	else lvnm = "?";
	return;

     end get_lvnm;
%page;

get_usage: proc (x, y);

dcl  x bit (36) aligned;
dcl  y fixed bin (71);
dcl  i fixed bin, code fixed bin (35);
dcl  white_len fixed bin;
dcl  date_time_$format entry (char (*), fixed bin (71), char (*), char (*)) returns (char (250) var);
dcl find_char_$last_in_list entry (char (*), char (*)) returns (fixed bin (21));
	if no_usage then do;
abort:	     proc_usage = "";
	     proc_idle = "";
	     return;
	end;

/* Grab metering data we need. */

	if ^have_read_apt then do;
	     call ssu_$get_temp_segment (sci_ptr, "apt", tcmp);
	     call ring_zero_peek_ (tcmp0, tcmp, tcml, code);
	     if code ^= 0 then do;
		no_usage = TRUE;
		go to abort;
	     end;	
	     have_read_apt = TRUE;
	end;

	aptep = addrel (tcmp, tcm.apt_offset);
	do i = 0 to tcm.apt_size - 1;
	     if apte.processid = x then go to found;
	     aptep = addrel (aptep, tcm.apt_entry_size);
	end;
	go to abort;
found:	proc_usage = date_time_$format ("^ZZHd:^ZZMH:^99.(6)9UM", apte.virtual_cpu_time+ y, "gmt", "");
          if substr (proc_usage, 1, length ("::")) = "::" then substr (proc_usage, 1, length ("  ")) = "  ";
          if substr (proc_usage, 1, length (":")) = ":" then substr (proc_usage, 1, length (" ")) = " ";
	proc_usage = substr (proc_usage, 1, find_char_$last_in_list (proc_usage, ".") + 1);
          do white_len = 1 to 9 - find_char_$last_in_list (proc_usage, ".");
             	proc_usage = " " || substr (proc_usage, 1, find_char_$last_in_list (proc_usage, ".") + 1);
          end;
          proc_idle = date_time_$format ("^ZZHd:^ZZMH:^99.(6)9UM", clock () - apte.state_change_time, "gmt", "");
	if substr (proc_idle, 1, length ("::")) = "::" then substr (proc_idle, 1, length ("  ")) = "  ";
	if substr (proc_idle, 1, length (":")) = ":" then substr (proc_idle, 1, length (" ")) = " ";
	proc_idle = substr (proc_idle, 1, find_char_$last_in_list (proc_idle, ".") + 1);
	do white_len = 1 to 9 - find_char_$last_in_list (proc_idle, ".");
		proc_idle = " " || substr (proc_idle, 1, find_char_$last_in_list (proc_idle, ".") + 1);
          end;   
	if fixed (apte.state, 18) = 2 then proc_idle = (9)" " || "R";
	else if fixed (apte.state, 18) = 3 then proc_idle = (9)" " || "W";
	else if fixed (apte.state, 18) = 1 then proc_idle = (9)" " || "X";
	return;

     end get_usage;

%page; %include absentee_user_table;
%page; %include access_mode_values;
%page; %include answer_table;
%page; %include apte;
%page; %include daemon_user_table;
%page; %include dialup_values;
%page; %include disk_table;
%page; %include hc_lock;
%page; %include installation_parms;
%page; %include tcm;
%page; %include user_attributes;
%page; %include user_table_entry;
%page; %include user_table_header;
%page; %include whotab;

     end as_who;
