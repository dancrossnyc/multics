/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* DUMP_ABS_DATA - Program to dump >sc1>absentee_data
   Written 751022 by PG
   Modified by T. Casey, May 1978, to dump resource list information.
   Modified by T. Casey, November 1978 for MR7.0 absentee enhancements.
   Modified by T. Casey, June 1981, for MR9.0, to dump version 2 abs_data structure.
*/

dump_abs_data:
     procedure;

/* automatic */

declare (adp, arg_ptr) ptr,
        (aix, argno, n, queuex) fixed bin,
         arg_len fixed bin (21),
         code fixed bin (35),
         date_time char (24),
         dname char (168),
         ename char (32),
         line char (136) varying,
         long bit (1) aligned;

dcl  fq fixed bin init (-1);
dcl  lq fixed bin init (4);

/* based */

declare  arg_string char (arg_len) based (arg_ptr);

/* builtins */

declare (addr, length, null, substr, unspec) builtin;

/* conditions */

declare  cleanup condition;

/* pictures */

declare  five_digits picture "zzzz9";

/* internal static */

declare  my_name char (13) internal static initial ("dump_abs_data");

dcl  lc_reasons (0:3) char (16) int static options (constant) init (
     "zero",
     "user_limit",
     "project_limit",
     "group_limit");

/* external static */

dcl  error_table_$badopt ext fixed bin (35);

/* entries */

declare  clock_ entry () returns (fixed bin (71)),
         com_err_ entry options (variable),
         cv_dec_check_ entry (char (*) aligned, fixed bin (35)) returns (fixed bin (35)),
         cu_$arg_count entry returns (fixed bin),
         cu_$arg_ptr entry (fixed bin, ptr, fixed bin (21), fixed bin (35)),
         date_time_ entry (fixed bin (71), char (*)),
         expand_pathname_ entry (char (*), char (*), char (*), fixed bin (35)),
         hcs_$initiate entry (char (*), char (*), char (*), fixed bin, fixed bin, ptr, fixed bin (35)),
         hcs_$terminate_noname entry (ptr, fixed bin (35)),
         ioa_ entry options (variable);
dcl  request_id_ entry (fixed bin (71)) returns (char (19));

/* include files */

%include abs_data;

/* program */

	long = "0"b;
	dname = ">system_control_1";
	ename = "absentee_data";
	adp = null;

	do argno = 1 to cu_$arg_count ();
	     call cu_$arg_ptr (argno, arg_ptr, arg_len, code);
	     if code = 0 then do;
		if arg_string = "-lg" | arg_string = "-long" then
		     long = "1"b;
		else if arg_string = "-q" | arg_string = "-queue" then do;
		     argno = argno + 1;
		     call cu_$arg_ptr (argno, arg_ptr, arg_len, code);
		     if code ^= 0 then do;
			call com_err_ (code, my_name, "after -queue");
			return;
		     end;
		     if arg_string = "fg" | arg_string = "foreground" then fq, lq = -1;
		     else fq, lq = cv_dec_check_ ((arg_string), code);
		     if code ^= 0 then do;
badq:			call com_err_ (0, my_name, "Illegal queue number: ""^a""", arg_string);
			return;
		     end;
		     if fq < -1 | fq > 4 then goto badq;
		end;
		else if substr (arg_string, 1, 1) = "-" then do;
		     call com_err_ (error_table_$badopt, my_name, "^a", arg_string);
		     return;
		end;
		else do;
		     call expand_pathname_ (arg_string, dname, ename, code);
		     if code ^= 0 then do;
			call com_err_ (code, my_name, "^a", arg_string);
			return;
		     end;
		end;
	     end;
	     else call com_err_ (code, my_name);
	end;					/* end loop through args */

	on cleanup call clean_up;

	call hcs_$initiate (dname, ename, "", 0, 1, adp, code);
	if adp = null then do;
	     call com_err_ (code, my_name, "^a>^a", dname, ename);
	     return;
	end;

	if absentee_data.version ^= ABS_DATA_version_2 then do; /* check for wrong version */
	     call com_err_ (0, my_name, "Incorrect structure version (^d) in ^a>^a", absentee_data.version, dname, ename);
	     return;
	end;

	call date_time_ (clock_ (), date_time);
	call ioa_ ("^/Dump of ^a>^a - ^a^/", dname, ename, date_time);

	call ioa_ ("last:^21t^d", absentee_data.last);
	line = "
FREE LIST:  ";
	do n = absentee_data.tail_free repeat (abs_info.prev_free) while (n ^= 0);
	     aip = addr (absentee_data.entry (n));
	     five_digits = n;
	     if length (line) > 70
	     then do;
		call ioa_ (line);
		line = (18)" ";
	     end;
	     line = line || five_digits;
	end;

	if length (line) > length (" FREE LIST:  ")
	then call ioa_ (line);

	do queuex = fq to lq;
	     call ioa_ ("^/QUEUE ^d", queuex);

	     line = "      SKIP LIST: ";
	     do n = absentee_data.queue_data (queuex).head_skip repeat (abs_info.next_skip)
		     while (n ^= 0);

		aip = addr (absentee_data.entry (n));
		five_digits = n;
		if length (line) > 70
		then do;
		     call ioa_ (line);
		     line = (17)" ";
		end;
		line = line || five_digits;
	     end;

	     if length (line) > length ("      SKIP LIST: ")
	     then call ioa_ (line);

	     if absentee_data.queue_data (queuex).tail_run ^= 0 then
		call ioa_ ("^2xTAIL RUN:^21t^d", absentee_data.queue_data (queuex).tail_run);

	     line = "     READY LIST: ";
	     do n = absentee_data.queue_data (queuex).head_ready repeat (abs_info.next_ready)
		     while (n ^= 0);

		aip = addr (absentee_data.entry (n));
		five_digits = n;
		if length (line) > 70
		then do;
		     call ioa_ (line);
		     line = (17)" ";
		end;
		line = line || five_digits;
	     end;

	     if length (line) > length ("     READY LIST: ")
	     then call ioa_ (line);

	     if absentee_data.queue_data (queuex).tail_resource ^= 0 then
		call ioa_ ("^2xTAIL RESOURCE:^21t^d", absentee_data.queue_data (queuex).tail_resource);

	     line = "     CPUT LIST: ";
	     do n = absentee_data.queue_data (queuex).head_cput repeat (abs_info.next_cput)
		     while (n ^= 0);

		aip = addr (absentee_data.entry (n));
		five_digits = n;
		if length (line) > 70
		then do;
		     call ioa_ (line);
		     line = (17)" ";
		end;
		line = line || five_digits;
	     end;

	     if length (line) > length ("     CPUT LIST: ")
	     then call ioa_ (line);
	end;

	line = "
DEFER LIST: ";
	do n = absentee_data.head_defer repeat (abs_info.next_defer) while (n ^= 0);
	     aip = addr (absentee_data.entry (n));
	     five_digits = n;

	     if length (line) > 70
	     then do;
		call ioa_ (line);
		line = "            ";
	     end;
	     line = line || five_digits;
	end;

	if length (line) > length (" DEFER LIST: ")
	then call ioa_ (line);

	do aix = 1 to absentee_data.last;
	     aip = addr (absentee_data.entry (aix));

	     if abs_info.queue < fq | abs_info.queue > lq then /* if user specified queue, and entry is from wrong queue */
		goto skip_this_entry;		/* then skip it */

/* Start of future dump_entry internal procedure */

	     call ioa_ ("^/ENTRY ^d", aix);
	     if abs_info.free_list then
		call ioa_ ("^xFREE");
	     else do;
		if long then do;
		     call ioa_ ("next_skip:^21t^d", abs_info.next_skip);
		     call ioa_ ("prev_skip:^21t^d", abs_info.prev_skip);

		     if abs_info.defer_list then do;
			call ioa_ ("next_defer:^21t^d", abs_info.next_defer);
			call ioa_ ("prev_defer:^21t^d", abs_info.prev_defer);
		     end;

		     if abs_info.ready_list then do;	/* if on ready list */
			call ioa_ ("next_ready:^21t^d", abs_info.next_ready);
			call ioa_ ("prev_ready:^21t^d", abs_info.prev_ready);
		     end;

		     if abs_info.cput_list then do;
			call ioa_ ("next_cput:^21t^d", abs_info.next_cput);
			call ioa_ ("prev_cput:^21t^d", abs_info.prev_cput);
		     end;

		     if abs_info.prev_free ^= 0
		     then call ioa_ ("prev_free:^21t^d", abs_info.prev_free);
		end;				/* end -long */

		call ioa_ ("queue:^21t^d", abs_info.queue);

/* CHANGE TO "switches:    sA, sB, ... " */
		if abs_info.waiting_for_resources then
		     call ioa_ ("waiting_for_resources:^21tON");
		if abs_info.can_run then call ioa_ ("can_run:^21tON");

		if abs_info.time ^= 0 then do;
		     call date_time_ (abs_info.time, date_time);
		     call ioa_ ("time:^21t^a", date_time);
		end;
		call ioa_ ("message_id:^21t^24.3b", abs_info.message_id);
		call ioa_ ("request_id:^21t^a", request_id_ (abs_info.request_id));

		if abs_info.last_message_id ^= ""b
		then call ioa_ ("last_message_id:^21t^24.3b", abs_info.last_message_id);

		call ioa_ ("user:^21t^a.^a^[^x(^a)^]", abs_info.person, abs_info.project,
		     (abs_info.group ^= ""), abs_info.group);
		if abs_info.waiting_for_load_ctl then
		     call ioa_ ("deferred:^21t^a", lc_reasons (abs_info.lc_reason));
	     end;

/* end of future dump_entry internal procedure */

skip_this_entry:
	end;

	call ioa_ ("^/END OF ABSENTEE_DATA");

	call clean_up;
	return;

clean_up:
	procedure;

	     if adp ^= null then
		call hcs_$terminate_noname (adp, code);
	     return;

	end clean_up;

/* Make a dump_entry (aix) internal procedure, from the body of text marked above.
   Call it in the 1 to last loop.
   Add alternative options to print the entries in a particular list, in list order.
   Implement that by calling print_entry with the indices of the elements in that list.
   Add options -he (= just print the header (the lists, not the entries);
   .          -nhe (= don't print the header).
*/

     end dump_abs_data;
