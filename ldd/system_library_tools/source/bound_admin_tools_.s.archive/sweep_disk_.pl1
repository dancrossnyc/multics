/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


sweep_disk_: proc (path, counter);

/* SWEEP_DISK_ - driver for statistics programs.

   This program is called with a pathname, the root node of a tree
   to sweep, and a function, which will be called for each directory entry.
   The program recursively walks down the directory tree and
   calls the user function for each entry found.

   This version of the program will try to give itself access if it doesn't have it

   THVV

   Modified on 9 September 1976 by R. G. Bratt to not terminate and to use (get release)_temp_segments_.
   Modified on 5 June 1975 by J. C. Whitmore to attempt to set system privileges.
   sweep_disk_$dir_list entry point added to call hcs_$star_dir_list_ 05/29/79 S. Herbst

   */

dcl  path char (168) aligned,				/* path name to sweep */
     counter entry (char (168) aligned, char (32) aligned, fixed bin,
     char (32) aligned, ptr, ptr);

dcl  areap ptr,					/* ptr to area segment. */
     one_ptr (1) ptr init (null),
     myname char (11) init ("sweep_disk_") static options (constant),
     ec fixed bin (35);				/* err code */

dcl  bfsw bit (1) int static init ("1"b);		/* default will suppress non fatal errors */
dcl  dir_list_sw bit (1);				/* ON: sweep_disk_$dir_list */
dcl  priv_set bit (1);				/* flag to tell that system privileges are off */
dcl  priv fixed bin (35);				/* this will be zero if we set system privileges */

dcl  sys_info$max_seg_size fixed bin (35) ext;

dcl 1 acla (1) aligned,
    2 userid char (32),
    2 modes bit (36),
    2 erc fixed bin (35);

dcl 1 delacla (1) aligned,
    2 userid char (32),
    2 erc fixed bin (35);


dcl  com_err_ entry options (variable),
     get_group_id_ entry () returns (char (32) aligned),
     expand_path_ entry (ptr, fixed bin, ptr, ptr, fixed bin (35)),
     area_ entry (fixed bin (35), ptr);

dcl  error_table_$ai_restricted fixed bin (35) ext;

dcl  system_privilege_$dir_priv_on entry (fixed bin (35));
dcl  system_privilege_$dir_priv_off entry (fixed bin (35));
dcl  hcs_$add_dir_acl_entries entry (char (*) aligned, char (*) aligned, ptr, fixed bin, fixed bin (35));
dcl hcs_$delete_dir_acl_entries entry (char (*) aligned, char (*) aligned, ptr, fixed bin, fixed bin (35));
dcl (hcs_$star_list_, hcs_$star_dir_list_) entry
     (char (*) aligned, char (*) aligned, fixed bin (3), ptr, fixed bin, fixed bin, ptr, ptr, fixed bin (35));
dcl  get_temp_segments_ entry (char (*), (*) ptr, fixed bin (35));
dcl  release_temp_segments_ entry (char (*), (*) ptr, fixed bin (35));

dcl (cleanup, linkage_error) condition;
dcl (addr, fixed, index, null, substr) builtin;

/* - - - - */


	dir_list_sw = "0"b;				/* sweep_disk_ entry */
	go to COMMON;

dir_list: entry (path, counter);

	dir_list_sw = "1"b;

COMMON:	call get_temp_segments_ (myname, one_ptr, ec);
	areap = one_ptr (1);
	call area_ (sys_info$max_seg_size, areap);
	acla (1).userid = get_group_id_ ();
	delacla (1).userid = acla (1).userid;
	acla (1).modes = "111"b;

	priv_set = "0"b;
	priv = 1;

	on cleanup call clean_up;			/* so we can undo what we did */

	call process (path, 0, dir_list_sw);		/* start recursion */
	call clean_up;

	return;					/* Done. */


/* - - - - - - - - - - - - - - */

process:	proc (apth, lvl, asw);

/* internal doit procedure */

dcl  apth char (168) aligned,				/* path of tree to process */
     lvl fixed bin,					/* recursion level */
     asw bit (1);					/* ON: star_dir_list_; OFF: star_list_ */

dcl  npth char (168) aligned,				/* new path for recursion */
     dstar char (32) aligned init ("**") internal static,	/* for star, gets all. */
     ddn char (168) aligned,				/* ... for expand */
     een char (32) aligned,				/* ... */
     c32 char (32) aligned,
     error_table_$nomatch fixed bin ext,
     ifail fixed bin (35),
    (eptr, nptr) ptr init (null),			/* for star */
     ecc fixed bin (35),
    (t, bcount, lc, ii, nix) fixed bin;			/* indices */

dcl  names (100) char (32) aligned based (nptr);		/* Structure returned by star_ */

dcl 1 branches (100) aligned based (eptr),		/* ... */
    2 type bit (2) unaligned,				/* 10b is directory */
    2 nnam bit (16) unaligned,			/* number of names this seg */
    2 nindex bit (18) unaligned,			/* index in names structure */
    2 padx bit (108) unaligned;

	     on cleanup begin;
		if eptr ^= null then free eptr -> branches;
		if nptr ^= null then free nptr -> names;
		if ifail = 0 then call hcs_$delete_dir_acl_entries (ddn, een, addr (delacla), 1, ecc);
	     end;

	     t = index (apth, " ") - 1;
	     call expand_path_ (addr (apth), t, addr (ddn), addr (een), ecc);
	     if ecc ^= 0 then do;
		call com_err_ (ecc, myname, apth);
		return;
	     end;
RETRY:	     call hcs_$add_dir_acl_entries (ddn, een, addr (acla), 1, ifail);
	     if ifail ^= 0 then
		if ifail = error_table_$ai_restricted & ^priv_set then do;

		     on linkage_error go to REVERT_HANDLER;

		     call system_privilege_$dir_priv_on (priv);
		     priv_set = "1"b;
REVERT_HANDLER:
		     revert linkage_error;
		     if ^priv_set then do;		/* linkage_error */
			if ^bfsw then call com_err_ (0, myname,
			     "Unable to set directory privilege.
Cannot reference AIM-restricted directory.");
			priv = 1;
		     end;

		     priv_set = "1"b;		/* try only once to set priv */
		     go to RETRY;
		end;
	     if asw then call hcs_$star_dir_list_ (apth, dstar, 111b, areap, bcount, lc, eptr, nptr, ecc);
	     else call hcs_$star_list_ (apth, dstar, 111b, areap, bcount, lc, eptr, nptr, ecc);
	     if ecc = error_table_$nomatch then go to pexit; /* Get all names. If none, go. */
	     if ecc ^= 0 then do;			/* If any other error from star, name it. */
		if ^bfsw then call com_err_ (ecc, myname, "Error listing contents of ^a", apth);
		go to pexit;
	     end;
inloop:	     do ii = 1 to bcount + lc;		/* Now do all branches, look for sub-dirs. */
		nix = fixed (eptr -> branches (ii).nindex);
		c32 = nptr -> names (nix);
		call counter (ddn, een, lvl, c32, addr (eptr -> branches (ii)), nptr);
		if eptr -> branches (ii).type = "10"b then do;
		     if t > 1 then			/* Fabricate path name. */
			npth = substr (apth, 1, t) || ">" || c32;
		     else do;			/* The root is special. */
			npth = ">" || c32;
			if npth = ">process_dir_dir" then go to nopdir;
			if npth = ">pdd" then go to nopdir;
			if npth = ">PDD" then go to nopdir;
		     end;
		     call process (npth, lvl+1, asw);	/* recursion here */
nopdir:		end;
	     end inloop;
	     free eptr -> branches;			/* Clean up area. */
	     free nptr -> names;			/* ... */
pexit:	     if ifail = 0 then call hcs_$delete_dir_acl_entries (ddn, een, addr (delacla), 1, ecc);
	end process;				/* Whew. */


loud:	entry;					/* entry to print more error messages */
	bfsw = "0"b;
	return;

clean_up:	proc;
	     if priv = 0 then call system_privilege_$dir_priv_off (priv);
	     if one_ptr (1) ^= null () then call release_temp_segments_ (myname, one_ptr, ec);
	     return;
	end clean_up;

     end;
