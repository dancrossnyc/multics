/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


restore_pdt_access: proc;

/* RESTORE_PDT_ACCESS - This program can be run after a crash to regenerate the ACL's of
   the PDT's in >sc1>pdt, and also the ACL of >sc1>update.
   (Access control lists seem to be expecially vulnerable to crashes.)

   THVV 1/74 */
/* Modified March 1982 by E. N. Kittlitz to eliminate proj_admin_seg */

dcl  pdtdir char (168) aligned int static init (">system_control_1>pdt"),
     pdtname char (32) aligned,
     sc1 char (168) aligned int static init (">system_control_1"),
     nacl fixed bin,
     sel_proj char (32) aligned init (""),
     sat_name char (32) aligned,
     datestr char (16) aligned,
    (i, ii, iii, m, lng, sm, slng, j, k) fixed bin,
     ec fixed bin (35),
     an fixed bin init (1),
    (argp, satp, satep) pointer,
     arg char (slng) based (argp),
     strn1 char (28) aligned init (""),
     ct fixed bin init (0),
     ct1 fixed bin init (0);

dcl  expand_path_ entry (ptr, fixed bin, ptr, ptr, fixed bin (35)),
     cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35)),
     com_err_ entry options (variable),
     ioa_ entry options (variable),
     ioa_$rsnnl entry options (variable),
     hcs_$initiate entry (char (*) aligned, char (*) aligned, char (*) aligned,
     fixed bin (1), fixed bin (2), ptr, fixed bin (35)),
     hcs_$terminate_noname entry (ptr, fixed bin (35)),
     clock_ entry () returns (fixed bin (71)),
     date_time_ entry (fixed bin (71), char (*) aligned);
dcl  hcs_$add_acl_entries entry (char (*) aligned, char (*) aligned, ptr, fixed bin, fixed bin (35));
dcl  hcs_$add_dir_acl_entries entry (char (*) aligned, char (*) aligned, ptr, fixed bin, fixed bin (35));

dcl 1 acls (6) aligned,
    2 name char (32),
    2 modes bit (36),
    2 mbz bit (36),
    2 erc fixed bin (35);

dcl 1 dacls (6) aligned,
    2 name char (32),
    2 modes bit (36),
    2 erc fixed bin (35);

dcl (addr, null, fixed, substr) builtin;

/* ================================================ */

%include sat;
%include user_attributes;
/* ================================================ */

/* INITIALIZATION - LOCATE AND INITIATE SAT */


	do j = 1 to 6;				/* Set up acl structures. */
	     acls.mbz (j) = "0"b;
	     acls.modes (j) = "100"b;			/* "R" access for pdt */
	     dacls.modes (j) = "001"b;		/* "A" access for dir update */
	end;
	acls.name (1) = "*.SysDaemon.*";
	acls.name (2) = "*.SysAdmin.*";
	acls.modes (1), acls.modes (2) = "101"b;	/* These guys get RW. */

	call hcs_$initiate (sc1, "sat", "", 0, 0, satp, ec);
	if satp = null then do;
	     call com_err_ (ec, "restore_pdt_access", "sat");
	     return;
	end;
	if sat.version ^= SAT_version then do;
	     call com_err_ (0, "restore_pdt_access",
	     "SAT version is inconsistent with declarations used by this program");
	     go to exit;
	end;

arglp:	call cu_$arg_ptr (an, argp, slng, ec);		/* get next arg -- a project name */
	if ec ^= 0 then go to endarg;			/* last arg? */
	else do;
	     sel_proj = arg;
	end;

next_arg: an = an + 1;
	go to arglp;				/* loop on args */
endarg:	if sel_proj ^= "" then go to quickie;

quickie:	do i = 1 to sat.current_size;			/* loop thru SAT looking for delegated projects */
	     satep = addr (sat.project (i));		/* get ptr to slide down sat entries */
	     if project.state = 1 then do;
		if sel_proj ^= "" then if sel_proj ^= project.project_id then go to endsatloop;
		ct = ct + 1;			/* Count all valid projects found. */
		call ioa_$rsnnl ("^a.pdt", pdtname, k, project.project_id);
		if project.admin (1).userid = "" then do;
		     call hcs_$add_acl_entries (pdtdir, pdtname, addr (acls), 2, ec);
		     if ec ^= 0 then call com_err_ (ec, "restore_pdt_access", "Cannot set ACL of ^a", pdtname);
		end;
		else do;
		     ct1 = ct1 + 1;
		     nacl = 0;			/* Found pdt to be fixed. */
		     do j = 1 to 4;			/* Make up acls. */
			acls.name (j+2) = project.admin.userid (j);
			if acls.name (j+2) = "" then go to setit;
			k = index (acls.name (j+2), " ");
			substr (acls.name (j+2), k, 2) = ".*";
			dacls.name (j) = acls.name (j+2);
			nacl = nacl + 1;
		     end;
setit:		     call hcs_$add_acl_entries (pdtdir, pdtname, addr (acls), nacl+2, ec);
		     if ec ^= 0 then call com_err_ (ec, "restore_pdt_access", "Cannot restore ACL of ^a", pdtname);
		     call hcs_$add_dir_acl_entries (sc1, "update", addr (dacls), nacl, ec);
		     if ec ^= 0 then call com_err_ (ec, "restore_pdt_access", "Cannot add ACL to update: ^a",
			project.project_id);
		end;
	     end;
endsatloop: end;
	if sel_proj ^= "" then if ct = 0 then do;
	     call ioa_ (" Project ^a not found in SAT", sel_proj);
	end;
	else if ct1 = 0 then do;
	     call ioa_ ("^a is not currently a delegated project", sel_proj);
	end;

exit:	call hcs_$terminate_noname (satp, ec);
	return;

     end restore_pdt_access;
