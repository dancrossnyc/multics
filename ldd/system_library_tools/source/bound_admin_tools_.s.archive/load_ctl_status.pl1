/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: style4 */
lcs: load_ctl_status: proc;

/* print group totals */
/* Modified by T. Casey, July 1975, to print work class information */
/* Modified by T. Casey, September 1977, to count anstbl.extra_units in "all the rest" computation */
/* Modified by G. Dixon, February, 1977 to terminate Answer Table using ansp, to align output columns, to
   support more than 99 users in a group.  */
/* Modified by T. Casey, January 1979 for MR7.0 absentee enhancements */
/* Modified November 1981, E. N. Kittlitz.  user_table_entry conversion. */

/****^  HISTORY COMMENTS:
  1) change(87-04-26,GDixon), approve(87-05-01,MCR7741),
     audit(87-05-06,Parisek), install(87-08-04,MR12.1-1055):
     Upgraded for change to answer_table.incl.pl1.
  2) change(87-08-25,GDixon), approve(88-08-15,MCR7969),
     audit(88-08-04,Lippard), install(88-08-29,MR12.2-1093):
     Correct ioa_ control string. (Answering_Service 354, phx16706)
                                                   END HISTORY COMMENTS */

dcl  sysdir char (168) aligned int static init (">system_control_dir"),
     en char (32) aligned,
     datstr char (16) aligned,
     wcstr char (10) aligned init (""),
     an fixed bin,
     selgp char (8) aligned init (""),
     selgl fixed bin init (0),
     (long, prio_sked, totalsw) bit (1) aligned init ("0"b),
     shift_change_time fixed bin (71),
     (shift, next_shift) fixed bin,
     sysi char (8) aligned,
     inst char (32) aligned,
     (f1, f2, f3, f4, f5) float bin,
     (i, k, n) fixed bin,
     ap ptr,
     al fixed bin,
     bchr char (al) unaligned based (ap),
     first_group fixed bin,
     ec fixed bin,
     fudge_flag char (1),
     extra_units fixed bin,
     whoptr ptr,
     mgtp ptr;

dcl  (addr, null, substr) builtin;

dcl  clock_ entry () returns (fixed bin (71)),
     system_info_$installation_id entry (char (*) aligned),
     system_info_$sysid entry (char (*) aligned),
     system_info_$next_shift_change entry (fixed bin, fixed bin (71), fixed bin),
     cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin),
     ioa_ entry options (variable),
     ioa_$rsnnl entry options (variable),
     ioa_$nnl entry options (variable),
     date_time_ entry (fixed bin (71), char (*) aligned),
     com_err_ entry options (variable);

dcl  hcs_$initiate entry (char (*) aligned, char (*) aligned, char (*) aligned, fixed bin (1),
	fixed bin (2), ptr, fixed bin);
dcl  hcs_$terminate_noname entry (ptr, fixed bin);


	ansp = null;
	k = 0;
	en = "mgt";
try_init: call hcs_$initiate (sysdir, en, "", 0, 1, mgtp, ec);
	if mgtp = null then do;
	     if en = "mgt" then do;			/* TEMPORARY - FOR FIRST RELEASE OF PRIORITY SCHEDULER SYSTEM */
		en = "master_group_table";
		goto try_init;
	     end;
er:	     call com_err_ (ec, "load_ctl_status", en);
	     return;
	end;

	first_group = 1;
	if mgt.version_indicator = "VERSION " then
	     if mgt.version >= 2 then do;
		first_group = 17;
		if mgt.switches.prio_sked_enabled then prio_sked = "1"b;
	     end;

	en = "whotab";
	call hcs_$initiate (sysdir, en, "", 0, 1, whoptr, ec);
	if whoptr = null then go to er;
	f1 = whotab.n_units / 1e1;
	f2 = whotab.mxunits / 1e1;
	call date_time_ ((clock_ ()), datstr);
	call system_info_$next_shift_change (shift, shift_change_time, next_shift);

	an = 1;
arglp:	call cu_$arg_ptr (an, ap, al, ec);
	if ec ^= 0 then go to endarg;
	if al = 0 then ;
	else if substr (bchr, 1, 1) = "-" then do;
	     if bchr = "-lg" then long = "1"b;
	     else if bchr = "-long" then long = "1"b;
	     else if bchr = "-tt" then totalsw = "1"b;
	     else if bchr = "-total" then totalsw = "1"b;
	     else if bchr = "-totals" then totalsw = "1"b;
	     else do;
		call com_err_ (0, "load_ctl_status", "invalid argument ^a", bchr);
		return;
	     end;
	end;
	else do;					/* must be group id */
	     selgp = bchr;
	     selgl = al;
	end;
	an = an + 1;
	go to arglp;

endarg:	if long then do;
	     call system_info_$sysid (sysi);
	     call system_info_$installation_id (inst);
	     call ioa_ ("^/Multics^x^a;^x^a^2x^a^/Load =^x^.1f out of^x^.1f units; users =^x^d absentee = ^d, daemons = ^d",
		sysi, inst, datstr, f1, f2, whotab.n_users, whotab.abs_users, whotab.n_daemons);

	     call date_time_ (shift_change_time, datstr);
	     call ioa_ ("Shift ^d until ^a", shift, datstr);
	end;
	else do;
	     call ioa_ ("^/^16a^x^.1f/^.1f^x^d^x(^d,^d)",
		datstr, f1, f2, whotab.n_users, whotab.abs_users, whotab.n_daemons);
	     if selgl ^= 0 then go to xlp;
	end;

	if prio_sked then do;
	     call ioa_$nnl ("^/Work Classes:");
	     do i = 1 to 16;
		if mgt.user_wc_defined (i) then
		     call ioa_$nnl ("^2x^2d", i);
	     end;
	     call ioa_$nnl ("^/Percents:^4x");
	     do i = 1 to 16;
		if mgt.user_wc_defined (i) then
		     call ioa_$nnl ("^2x^2d", mgt.user_wc_min_pct (i));
	     end;
	     if totalsw then goto exit;		/* if just totals, exit before printing heading */
	     call ioa_ ("^2/Group^3xMaxprime^xMaxabs^2xPrime^xSecondary^2xAbs^4xTot / Max^4xPercent^2xIWC^xAWC^/");
	end;

	else if ^totalsw then
	     call ioa_ ("^/Group^3xMaxprime^xMaxabs^2xPrime^xSecondary^2xAbs^4xTot / Max^4xPercent^/");
xlp:
	if totalsw then goto exit;
	do i = first_group to mgt.current_size;
	     mgtep = addr (mgt.entry (i));
	     if selgl ^= 0 then			/* only one group wanted? */
		if selgp ^= substr (group.group_id, 1, selgl) then go to skip;
	     k = k + 1;
	     fudge_flag = "";
	     if group.max_prim >= 0 then f1 = group.max_prim / 1e1;
	     else do;				/* this group takes "all the rest" */
		call hcs_$initiate (sysdir, "answer_table", "", 0, 1, ansp, ec);
		if ansp ^= null () then
		     extra_units = anstbl.extra_units;
		else do;
		     extra_units = (whotab.abs_users + whotab.n_daemons) * 10;
		     fudge_flag = "*";
		end;
		f1 = (whotab.mxunits - mgt.total_units - extra_units) / 1e1;
	     end;
	     f2 = group.n_prim / 1e1;
	     f3 = group.n_sec / 1e1;
	     f4 = (group.n_prim + group.n_sec) / 1e1;
	     f5 = f4 * 1e3 / whotab.n_units;
	     if group.absolute_max < 32767 then call ioa_$rsnnl ("^5.1f/^.1f", datstr, n,
		     f4, group.absolute_max / 1e1);
	     else call ioa_$rsnnl ("^5.1f/------", datstr, n, f4);
	     if prio_sked then
		call ioa_$rsnnl ("^2x^2d^2x^2d", wcstr, n, group.int_wc (shift), group.abs_wc (shift));
	     call ioa_ ("^8a^3x^5.1f^1a^6d^2x^5.1f^5x^5.1f^5d^3x^12a^3x^5.1f%^a",
		group.group_id, f1, fudge_flag, group.absentee_limit, f2, f3, group.n_abs, datstr, f5, wcstr);
	     if fudge_flag = "*" then
		call ioa_ ("^/* This figure might be inaccurate because you lack read access to the answer table.");
skip:	end;

	if selgl ^= 0 then if k = 0 then call ioa_ ("group ""^a"" not found", selgp);
exit:
	call hcs_$terminate_noname (mgtp, ec);
	call hcs_$terminate_noname (whoptr, ec);
	if ansp ^= null () then
	     call hcs_$terminate_noname (ansp, ec);
	call ioa_ ("");

	return;

test: entry (a_sysdir);

dcl  a_sysdir char (*);

	sysdir = a_sysdir;

%page; %include answer_table;
%page; %include mgt;
%page; %include user_table_header;
%page; %include whotab;


     end load_ctl_status;
