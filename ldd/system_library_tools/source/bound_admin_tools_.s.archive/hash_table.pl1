/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
%;
/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

hash_table: proc;					/* originally coded by k.willis 2/71 */



%include hashst;



dcl  htp pointer;					/* hash table pointer */
dcl  buffer char (152),				/* input buffer string */
     1 input based (ip),				/* input character array-overlays buffer */
     2 line (0: 151) char (1) unaligned,
    (ip, q, ap) pointer,
     abuffer char (152) aligned,
     bit_count fixed bin (24),			/* number of bits in hash table */
     len fixed bin,					/* length of argument from console */
     more_needed bit (1),				/* switch that indicates expected argument when on */
    (val, i, j, count, ec, al, buckets) fixed bin,
     bc fixed bin init (152),				/* number of characters in input line */
     hash_$in entry (ptr, char (*) aligned, fixed bin, fixed bin),
     hash_$out entry (ptr, char (*) aligned, fixed bin, fixed bin),
     hash_$search entry (ptr, char (*) aligned, fixed bin, fixed bin),
     hash_$make entry (ptr, fixed bin, fixed bin),
     ios_$read_ptr entry (ptr, fixed bin (17), fixed bin (17)),
     cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin),
     aa fixed bin (35),
     bchr char (al) based (ap) unaligned,		/* character string for command args */
    (error_table_$segknown, error_table_$namedup, error_table_$noarg, error_table_$invalid_elsize) ext fixed bin (17),
     error_table_$full_hashtbl ext fixed bin (17),
     path char (168) aligned,
     expand_path_ entry (ptr, fixed bin (17), ptr, ptr, fixed bin (17)),
     com_err_ entry options (variable),
     ioa_ entry options (variable),
     hcs_$make_seg entry (char (*) aligned, char (*) aligned, char (*) aligned, fixed bin (5),
     ptr, fixed bin),
     hcs_$set_bc entry (char (*) aligned, char (*) aligned, fixed bin (24), fixed bin),
     term_ entry (char (*) aligned, char (*) aligned, fixed bin),
     cv_dec_ entry (char (*) aligned) returns (fixed bin (35)),
     dn char (168) aligned,				/* directory name */
     en char (32) aligned,				/* entry name */
     chr char (1) aligned,				/* request code */
     getback label local,
    (srchname, addname) char (32) aligned;		/* entry name and value to be passed to hash_ */
dcl  default fixed bin init (995),			/* size of hash table if none given */
     max fixed bin init (6552);			/* max number of buckets that will fit in one segment */

dcl (substr, null, addr) builtin;









/* the hash_table command is used to create a hash table and to insert, delete, and search for entries in it.

   usage:  hash_table path -nb-
   where "path" specifies the name of an existing hash table or the name to be given to the hash table
   created with "nb" buckets or entries.  if "nb" is not specifiedor not within bounds(0<nb<=6552) then
   a default value is assigned to it.


   the user may type the following four input lines(all must begin in column 1)
   q
   a name1 value1 ...... namen valuen
   d name1 ... namen
   s name1 ... namen

   "q" quits and returns to command level
   "a" adds entry "namei" to the hash table with value "valuei"
   "s" searches for entry "namei" and prints the value found
   "d" deletes entry "namei" and prints the value it was associated with

   "namei" is a character string <= 32 characters and "valuei" is a decimal number
   one argument is required for requests "d" and "s" while two are required for "a"
   */




ht:	entry;					/* command may be called by "ht" or "hash_table" */
	call cu_$arg_ptr (1, ap, al, ec);		/* get pointer to first argument(entry name) */
	if ec ^= 0 then do;				/* it did not exist */
err:	     call com_err_ (ec, "hash_table", "");	/* call standard error printing routine */
	     return;				/* return to caller */
	end;
	path = bchr;				/* align argument */
	call expand_path_ (addr (path), al, addr (dn), addr (en), ec); /* obtain full directory and entry names */
	if ec ^= 0 then go to err;
	call hcs_$make_seg (dn, en, "", 1011b, q, ec);	/* create or make known the segment with entry name given */
	if q = null then go to err;			/* unable to create or locate */
	if ec = 0 then do;				/* it did not previously exist */
	     call cu_$arg_ptr (2, ap, al, ec);		/* get pointer to optional second arg(number of buckets) */
	     if ec ^= 0 then buckets = default;		/* no buckets-assign default value */
	     else do;
		aa = cv_dec_ (substr (ap -> bchr, 1, al)); /* convert the decimal number to binary */
		if aa <= 0 then buckets = default;	/* check range of buckets */
		else if aa>max then do;
		     buckets = max;			/* buckets cannot be more than will fit in 1 segment */
		     call ioa_ ("too many buckets: ^d maximum", max); /* print console message */
		end;
		else buckets = aa;			/* change precision of valid number of buckets */
	     end;
	     bit_count = 36* (buckets*10+8);		/* there are 36 bits in each word and 10 words in each bucket with 8 at top */
	     call hcs_$set_bc (dn, en, bit_count, ec);	/* set the bit count of segment created */
	     if ec ^= 0 then go to err;
	     call hash_$make (q, buckets, ec);		/* this entry initializes the created hash table */
	     if ec ^= 0 then go to err;
	end;
	ip = addr (buffer);				/* common to existing and new hash tables */




next:	
	call ios_$read_ptr (ip, bc, count);		/* get request */
	if count = 1 then go to next;			/* nl character-try again */
	abuffer = buffer;				/* align input */
	chr = substr (abuffer, 1, 1);			/* treat first character as request code */




	if chr = "q" then do;			/* quit */
	     call term_ (dn, en, ec);			/* remove segment from address space */
	     if ec ^= 0 then go to err;
	     return;				/* return to caller */
	end;




	j = 1;					/* the next char examined in input will be the second(input.line(j)) */
	more_needed = "1"b;				/* 1 argument must be present */




	if chr = "s" then do;			/* search */
	     getback = s;				/* set return label to s */
	     go to getarg;				/* get first argument */
s:	     more_needed = "0"b;			/* any further arguments are optional */
	     call hash_$search (q, srchname, val, ec);	/* entry point to find val of srchname */
	     if ec ^= 0 then go to err2;		/* could not find it */
	     call ioa_ ("'^a' has value ^d", srchname, val); /* print the value */
	     go to getarg;				/* repeat the process if more arguments */
	end;




	if chr = "d" then do;			/* delete */
	     getback = d;				/* set ruturn label to d */
	     go to getarg;				/* get first argument */
d:	     more_needed = "0"b;			/* any further arguments are optional */
	     call hash_$out (q, srchname, val, ec);	/* entry point to delete srchname */
	     if ec ^= 0 then go to err2;		/* could not find it */
	     else call ioa_ ("'^a' deleted with value ^d", srchname, val); /* print console message */
	     go to getarg;				/* repeat the process for any remaining arguments */
	end;




	if chr = "a" then do;			/* insert */
	     getback = a;				/* set return label to a */
	     go to getarg;				/* get first argument */
a:	     more_needed = "1"b;			/* two arguments are required for "a" and others must be in pairs */
	     addname = srchname;			/* save entry name in addname */
	     getback = a2;				/* set return label to a2 */
	     go to getarg;				/* get value corresponding to addname */
a2:	     more_needed = "0"b;			/* another argument is not required */
	     aa = cv_dec_ (srchname);			/* convert value to binary */
	     val = aa;				/* change the precision */
	     call hash_$in (q, addname, val, ec);	/* entry point to insert the entry and value in hash table */
	     getback = a;
	     if ec = 0 then go to getarg;		/* get any remaining arguments */
	     go to err2;
	end;




	call ioa_ ("'^a' not a hash_table request", chr);	/* invalid request */
	go to next;				/* try again */






getarg:	do i = j to count-2 while (ip -> input.line (i) = " "); /* set i to point to first char in name and j to blank after */
	end;					/* i points to first nonblank character */
	if i>count-2 then do;			/* no argument existed */
	     if more_needed then go to err1;		/* print error message if argument expected */
	     else go to next;			/* otherwise get next request */
	end;
	else do j = i+1 to count-2 while (ip -> input.line (j) ^= " ");
	end;					/* j now points to blank after name or nl character */
	if j-i>32 then do;				/* maximum length of name is 32 characters */
	     call ioa_ ("'^a' truncated to 32 characters", substr (abuffer, i+1, j-i)); /* print message */
	     len = 32;				/* continue the process with 32 characters */
	end;
	else len = j-i;				/* assign len the actual length if <32 characters */
	srchname = substr (abuffer, i+1, len);		/* put name in srchname */
	go to getback;				/* return to routine to process srchname */






err1:	ec = error_table_$noarg;			/* expected argument missing */
	call com_err_ (ec, "hash_table", "");		/* common error message routine */
	go to next;				/* get next request */
err2:	if ec = error_table_$full_hashtbl then go to err;	/* if hash table was full or inefficient */
	call com_err_ (ec, "hash_table", "");		/* print message for all other errors */
	go to getarg;				/* get any remaining arguments for request */
     end hash_table;
