/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: style4 */
dump_anstbl_: proc (anp, hsw, osw, verb, sct, scu, stream);

/* DUMP_ANSTBL_ - subroutine to take a dump of the answer table.

   Called by dump_anstbl command and as_dump_.
   Modified 750506 by PG for new anstbl format
   Modified May 1976 by T. Casey and P. Green to print new anstbl variables.
   Modified June 1977 by Robert Coren to remove obsolete terminal type fields.
   Modified May 1978 by T. Casey to print new vars: pdir_lvix, logout_index, and pdir_quota.
   Modified March 1979 by T. Casey to print new variables added for MR7.0 and MR7.0a.
   Modified  July 1979 by T. Casey for MR8.0 to print process preservation variables.
   Modified Feb 1980 by M. B. Armstrong to implement multiple rate structures. (UNCA)
   Modified January 1981 by E. N. Kittlitz for new answer_table entries
   Modified June 1981 by E. N. Kittlitz for UNCA rate structures
   Modified June 1981 by T. Casey for MR9.0 to print absentee load control variables.
   Modified November 1981, E. N. Kittlitz.  user_table_entry conversion.
   Modified 1984-09-12 BIM for login auth ranges, com channel aim.
   Modified 1984-12-31 Keith Loepere for pdir_dir_quota.
   Modified 1985-01-15 by E. Swenson to add anstbl.session_uid_counter.
   Modified 1985-03-04 by EJ Sharpe to convert audit flags to string representation
*/


/****^  HISTORY COMMENTS:
  1) change(85-11-16,Swenson), approve(87-07-13,MCR7737),
     audit(87-05-06,Parisek), install(87-08-04,MR12.1-1055):
     Added support for displaying new fields and upgraded to new date time
     code.  Also converted inline code for time breakdowns to use of
     subroutine.
  2) change(87-04-20,GDixon), approve(87-07-13,MCR7741),
     audit(87-05-06,Parisek), install(87-08-04,MR12.1-1055):
      A) Reordered output to reflect reorganization of
         user_table_entry.incl.pl1 and changes for user_table_header.incl.pl1.
      B) Improved date handling to detect unset dates and report them as such.
  3) change(87-05-13,GDixon), approve(87-07-13,MCR7741),
     audit(87-07-14,Hartogs), install(87-08-04,MR12.1-1055):
      A) Modified to accommodate new layout of table headers and user table
         entry.
      B) Fold longer lines in a more readable fashion.
  4) change(87-05-15,GDixon), approve(87-07-13,MCR7741),
     audit(87-07-14,Hartogs), install(87-08-04,MR12.1-1055):
      A) Handle ute.line_type.
      B) Interpret ute.preempted.
  5) change(87-05-20,GDixon), approve(87-07-13,MCR7741),
     audit(87-07-14,Hartogs), install(87-08-04,MR12.1-1055):
      A) Correct ioa_ctl string for anstbl.update_pending.
      B) Enlarge sch_tty to hold 32 character channel names.
      C) Allow sch_tty to be a starname.
  6) change(88-03-18,Parisek), approve(88-03-18,MCR7849),
     audit(88-03-22,Lippard), install(88-07-13,MR12.2-1047):
     Add ute.lowest_ring to display items.
                                                   END HISTORY COMMENTS */


dcl  anp ptr,					/* ptr to answer table */
     hsw bit (1),					/* TRUE if header to be dumpted */
     osw bit (1),					/* TRUE if dump in octal too */
     verb fixed bin,				/* output verbe */
     sct char (*),					/* select tty chan */
     scu char (*),					/* select user */
     stream char (*);				/* output stream name */

dcl  S char (32) aligned,				/* stream name */
     out entry options(variable) variable,
     hdr bit (1),					/* header switch */
     oct bit (1),					/* octal */
     mode fixed bin,				/* output mode */
     time char (16),				/* temp */
     (on_flags, off_flags) char (128) varying aligned,	/* temp */
     rs_name char (32),
     code fixed bin (35),
     line_length fixed bin,
     tp ptr,
     vstr char (512) varying,
     audit_str char (512),
     i fixed bin,
     sch_tty char (32),
     sch_user char (32),
     sch_project char (32);

dcl  table_name char (13) aligned;
dcl  table_type fixed bin;
dcl  table_size fixed bin;
dcl  max_rs_number fixed bin;

/* builtins */

dcl  (addr, addrel, after, before, binary, char, clock, convert, fixed, hbound,
      index, lbound, length, ltrim, null, rel, rtrim, size, string, substr,
      unspec) builtin;

/* entries */

dcl  convert_access_audit_flags_$to_string entry (bit (36) aligned, char (*), fixed bin (35));
dcl  date_time_$format entry (char (*), fixed bin (71), char (*), char (*)) returns (char (250) var);
dcl  display_access_class_ entry (bit (72) aligned) returns (character (32) aligned);
dcl  display_access_class_$range entry ((2) bit (72) aligned) returns (character (32) aligned);
dcl  format_attributes_ entry (ptr, char (*) var);
dcl  get_line_length_$switch	entry (ptr, fixed bin(35)) returns(fixed bin);
dcl  ioa_$ioa_stream entry options (variable);
dcl  match_star_name_ entry (char(*), char(*), fixed bin(35));
dcl  request_id_ entry (fixed bin (71) aligned) returns (char (19));
dcl  system_info_$max_rs_number entry (fixed bin);
dcl  system_info_$rs_name entry (fixed bin, char (*), fixed bin (35));

/* structures and int static */

dcl  NL_SP char(2) int static options(constant) init("
 ");
dcl  SP_COMMA char(2) int static options(constant) init(" ,");

dcl  1 last_flag aligned based,
       2 name char(20) varying,
       2 (lower_x, upper_x) fixed bin,
       2 range char(32) varying;

dcl  1 to based (tp) aligned,
       2 w1 fixed bin,
       2 w2 fixed bin,
       2 w3 fixed bin,
       2 w4 fixed bin,
       2 w5 fixed bin,
       2 w6 fixed bin,
       2 w7 fixed bin,
       2 w8 fixed bin;

dcl  table_names (3) char (13) aligned int static options (constant) init (
	"ANSWER",
	"ABSENTEE USER",
	"DAEMON USER");

dcl  two_digits picture "99";


	table_type = PT_INTERACTIVE;			/* answer table */
	ansp = anp;
	table_size = anstbl.current_size;

common:
	table_name = table_names (table_type);
	line_length = get_line_length_$switch (null, code);
	if code ^= 0 then line_length = 79;
	call system_info_$max_rs_number (max_rs_number);	/* get number of RS */

	mode = verb;
	S = stream;
	out = ioa_$ioa_stream;
	hdr = hsw;
	oct = osw;
	sch_user = before (scu, ".");
	sch_project = after (scu, ".");
	sch_tty = sct;

	call out(S, "^/DUMP OF ^a TABLE - ^a^/", table_name,
	     cv_date (clock ()));

	if ^hdr then go to ents;

	if table_type = PT_INTERACTIVE then
	     uthp = ansp;
	else if table_type = PT_ABSENTEE then
	     uthp = autp;
	else if table_type = PT_DAEMON then
	     uthp = dutp;

	call out(S, "header_version:^21t^d", uth.header_version);
	call out(S, "entry_version:^21t^d", uth.entry_version);
	call out(S, "user_table_type:^21t^d (^a)",
	     uth.user_table_type, TABLE_NAMES(uth.user_table_type));
	call out(S, "header_length:^21t^d words", uth.header_length);
	call out(S, "max_size:^21t^d entries", uth.max_size);
	call out(S, "current_size:^21t^d entries", uth.current_size);
	call out(S, "number_free:^21t^d entries", uth.number_free);
	call out(S, "first_free:^21t^d", uth.first_free);
	call out(S, "as_procid:^21t^w", uth.as_procid);

	if table_type = PT_INTERACTIVE then do;		/* answer table */
	     call out(S, "nlin:^21t^d", anstbl.nlin);
	     call out(S, "mxlin:^21t^d", anstbl.mxlin);
	     call out(S, "n_users:^21t^d", anstbl.n_users);
	     call out(S, "max_users:^21t^d", anstbl.max_users);
	     call out(S, "n_units:^21t^d", anstbl.n_units);
	     call out(S, "max_units:^21t^d", anstbl.max_units);
	     call out(S, "n_sessions:^21t^d", anstbl.n_sessions);
	     call out(S, "sysdir:^21t^a", anstbl.sysdir);
	     call out(S, "as_tty:^21t^a", anstbl.as_tty);
	     call out(S, "login_word:^21t^a", anstbl.login_word);
	     call out(S, "session:^21t^a", anstbl.session);
	     call out(S, "special_message:^21t^a",
	        rtrim(anstbl.special_message, NL_SP));
	     call out(S, "message_update_time:^21t^a",
		cv_date (anstbl.message_update_time));
	     call out(S, "message_lng:^21t^d", anstbl.message_lng);
	     call out(S, "lock_count:^21t^d", anstbl.lock_count);
	     call out(S, "update_pending:^21t^[ON^;OFF^]",
		anstbl.update_pending);
	     call out(S, "update_channel:^21t^24.3b",
		unspec (anstbl.update_channel));
	     call out(S, "acct_update_chn:^21t^24.3b",
		unspec (anstbl.acct_update_chn));
	     call out(S, "acct_last_update_time:^21t^a",
	          cv_date (anstbl.acct_last_update_time));
	     call out(S, "acct_alarm_fail:^21t^d", anstbl.acct_alarm_fail);
	     call out(S, "current_time:^21t^a",
		cv_date (anstbl.current_time));
	     call out(S, "processid_index:^21t^d", anstbl.processid_index);
	     call out(S, "session_uid_counter:^21t^d",
		anstbl.session_uid_counter);
	     call out(S, "shift:^21t^d", anstbl.shift);
	     call out(S, "auto_maxu:^21t^d", anstbl.auto_maxu);
	     call out(S, "extra_units:^21t^d", anstbl.extra_units);
	     call out(S, "response_high:^21t^d", anstbl.response_high);
	     call out(S, "response_low:^21t^d", anstbl.response_low);
	     call out(S, "ls_request_server_event_channel:^21t^24.3b",
		unspec (anstbl.ls_request_server_event_channel));
	     call out(S, "ls_request_server_process_id:^21t^w",
		anstbl.ls_request_server_process_id);
	     call out(S, "login_server_present:^21t^[ON^;OFF^]",
		anstbl.login_server_present);
	     if oct then call odump (ansp, fixed (rel (addr (anstbl.entry (1)))));
	end;

	else if table_type = PT_ABSENTEE then do;	/* absentee user table */
	     call out(S, "n_abs_run:^21t^d", autbl.n_abs_run);
	     call out(S, "max_abs_users:^21t^d", autbl.max_abs_users);
	     call out(S, "n_background_abs:^21t^d", autbl.n_background_abs);
	     call out(S, "n_sec_fg:^21t^d", autbl.n_sec_fg);
	     call out(S, "idle_units:^21t^d", autbl.idle_units);
	     call out(S, "abs_units:^21t^d", autbl.abs_units);
	     call out(S, "n_abs(1:4):^21t^(^d^x^)", autbl.n_abs);
	     call out(S, "qres(1:4):^21t^(^d^x^)", autbl.qres);
	     call out(S, "rsc_waiting(-1:4):^21t^(^d^x^)",
		autbl.rsc_waiting);
	     call out(S, "qerr(-1:4):^21t^(^d^x^)", autbl.qerr);
	     call out(S, "cpu_limit(1:4):^21t^(^d^x^)", autbl.cpu_limit);
	     call out(S, "defer_channel:^21t^24.3b",
		unspec (autbl.defer_channel));
	     call out(S, "absentee_rq_chn:^21t^24.3b",
		unspec (autbl.absentee_rq_chn));
	     call out(S, "last_queue_searched:^x^d",
		autbl.last_queue_searched);
	     on_flags, off_flags = "";
	     if autbl.debugging = 1 then
		on_flags = "debugging, ";
	     else if autbl.debugging = 0 then
		off_flags = "debugging, ";
	     else call out(S, "debugging:^21t^d",autbl.debugging);
	     call display_flags (on_flags, off_flags, string(autbl.control),
		AUTBL_CONTROL_NAMES, "control");
	     if oct then call odump (ansp, fixed (rel (addr (autbl.entry (1)))));
	end;

	else if table_type = PT_DAEMON then do;		/* daemon user table */
	     call out(S, "active_count:^21t^d", dutbl.active_count);
	     if oct then call odump (ansp, fixed (rel (addr (dutbl.entry (1)))));
	end;

ents:	do i = 1 to table_size;
	     if table_type = PT_INTERACTIVE then
		utep = addr (anstbl.entry (i));
	     else if table_type = PT_ABSENTEE then
		utep = addr (autbl.entry (i));
	     else utep = addr (dutbl.entry (i));

	     if ute.active = NOW_FREE then
		goto skip_entry;

	     if mode > 0 then			/* be selective */
		if mode = 9 then do;
		     if sch_tty ^= "" then do;
			call match_star_name_ (ute.tty_name, sch_tty,
			     code);
			if code ^= 0 then go to skip_entry;
		     end;
		     else if sch_user ^= "" then do;
			if ute.person ^= sch_user then go to skip_entry;
			else if sch_project ^= "" then
			     if ute.project ^= sch_project then go to skip_entry;
		     end;
		     else if sch_project ^= "" then
			if ute.project ^= sch_project then go to skip_entry;
		     if ute.active <= 0 then go to skip_entry;
		end;				/* mode 9 */
		else if mode = 1 then if ute.active < 0 then go to skip_entry;
		     else if mode = 2 then if ute.lock_value <= 0 then go to skip_entry;
			else if mode = 3 then if ute.active <= 3 then go to skip_entry;
			     else if mode = 4 then if ute.active <= 2 then go to skip_entry;
				else go to skip_entry;

/* Variables which give state of this entry */
	     call out(S, "^/ENTRY ^d at ^p  ^[(^a.^a)^]", i, utep,
		(ute.person || ute.project ^= ""), ute.person, ute.project);
	     call out(S, "active:^21t^d (^a)",
		ute.active, ACTIVE_VALUES (ute.active));
	     if ute.process_type ^= table_type then
		call out(S, "process_type:^21t^d (SHOULD BE ^d)",
		ute.process_type, table_type);
	     call out(S, "ute_index:^21t^d ^[(SHOULD BE ^d)^]",
		ute.ute_index, i^=ute.ute_index, i);
	     if ute.active = NOW_FREE then
		call out(S, "next_free:^21t^d", ute.next_free);
	     else if ute.next_free ^= 0 then
		call out(S, "next_free:^21t^d (SHOULD BE 0)",
		ute.next_free);

/* Information user gave about person_id associated with this entry. */
	     call out(S, "person:^21t^a", ute.person);
	     call out(S, "project:^21t^a", ute.project);
	     call out(S, "tag:^21t^a", ute.tag);

	     on_flags = "";
	     off_flags = "";
	     if ute.anonymous = 0 then
		off_flags = "anonymous, ";
	     else if ute.anonymous = 1 then
		on_flags = "anonymous, ";
	     else call out(S, "anonymous:^21t^d", ute.anonymous);

	     if MASK_CTL_NAMES (binary (ute.mask_ctl,2)) ^= "" then do;
		on_flags = on_flags ||
		     MASK_CTL_NAMES (binary(ute.mask_ctl,2));
		on_flags = on_flags || ", ";
	     end;

	     call display_flags (on_flags, off_flags,
		substr(string(ute.login_flags),1,34), PW_FLAG_NAMES,
		"login_flags");

	     if ute.generated_pw ^= "" then
		call out(S, "generated_pw:^21t^a", ute.generated_pw);
	     if ute.old_password ^= "" then
		time = "(scramble)";
	     else time = "";
	     call out(S, "old_password:^21t^a", time);
	     call out_line("process_authorization:^21t^a", 21,
		display_access_class_ (ute.process_authorization));

/* Information user gave about process associated with this entry. */
	     call out(S, "outer_module:^21t^a", ute.outer_module);
	     call out(S, "home_dir:^21t^a", ute.home_dir);
	     call out(S, "init_proc:^21t^a",
		substr (ute.init_proc, 1, ute.ip_len));
	     call out(S, "subsystem:^21t^a",
		substr (ute.init_proc, ute.ip_len + 1));
	     call format_attributes_ (addr (ute.ur_at), vstr);
	     call out_line("ur_at:^21t^a", 21, vstr);
	     call format_attributes_ (addr (ute.at), vstr);
	     call out_line("attributes:^21t^a", 21, vstr);
	     call out(S, "initial_ring:^21t^d", ute.initial_ring);
	     call out(S, "arg_count:^21t^d", ute.arg_count);
	     call out(S, "ln_args:^21t^d", ute.ln_args);
	     call out(S, "arg_lengths_ptr:^21t^p", ute.arg_lengths_ptr);
	     call out(S, "args_ptr:^21t^p", ute.args_ptr);

/* Most of the following information is relevant only to absentee processes */
	     if table_type = PT_ABSENTEE then do;	/* absentee user table is longer than the other 2 */
		call out(S, "input_seg:^21t^a", ute.input_seg);
		call out(S, "output_seg:^21t^a", ute.output_seg);
		call out(S, "request_id:^21t^a",
		     request_id_ (ute.request_id));
		if ute.reservation_id ^= 0 then
		     call out(S, "reservation_id:^21t^24.3b",
		     unspec (ute.reservation_id));
		call out(S, "message_id:^21t^24.3b", ute.message_id);
		call out(S, "deferred_time:^21t^a",
		     cv_date (ute.deferred_time));
		call out(S, "max_cpu_time:^21t^a",
		     cv_usecs (ute.max_cpu_time * 1000000));
		call out(S, "queue:^21t^d", ute.queue);
		call out(S, "real_queue:^21t^d", ute.real_queue);
		call display_flags ("", "", string(ute.abs_attributes),
		     ABS_ATTRIBUTE_NAMES, "abs_attributes");
		call display_flags ("", "", string(ute.abs_flags),
		     ABS_FLAG_NAMES, "abs_flags");
		call out(S, "abs_group:^21t^a", ute.abs_group);
		if ute.sender ^= "" then
		     call out(S, "sender:^21t^a", ute.sender);
		if ute.proxy_person || ute.proxy_project ^= "" then
		     call out(S, "proxy:^21t^a.^a", ute.proxy_person,
		     ute.proxy_project);
	     end;					/* end of absentee specific items */

/* Information about process actually created */
	     call out(S, "proc_id:^21t^12.3b", ute.proc_id);
	     call out(S, "session_uid:^21t^d", ute.session_uid);
	     call out_line("process_authorization_range:^21t^a", 21,
		display_access_class_$range (
		ute.process_authorization_range));
	     call convert_access_audit_flags_$to_string (ute.audit,
		audit_str, code);
	     if code ^= 0
	     then call out(S, "audit:^21t^12.3b (illegal format)",
		ute.audit);
	     else call out_line("audit:^21t^a", 21, rtrim(audit_str));
	     if ute.lot_size ^= 0 then
		call out(S, "lot_size:^21t^d", ute.lot_size);
	     if ute.kst_size ^= 0 then
		call out(S, "kst_size:^21t^d", ute.kst_size);
	     if ute.cls_size ^= 0 then
		call out(S, "cls_size:^21t^d", ute.cls_size);
	     call out(S, "sus_channel:^21t^24.3b", unspec (ute.sus_channel));
	     call out(S, "lowest_ring:^21t^d", ute.lowest_ring);	     
	     call out(S, "highest_ring:^21t^d", ute.highest_ring);
	     call out(S, "pdir_lvix:^21t^d", ute.pdir_lvix);
	     call out(S, "pdir_quota:^21t^d", ute.pdir_quota);
	     call out(S, "pdir_dir_quota:^21t^d", ute.pdir_dir_quota);

/* Information about primary terminal associated with this entry */
	     call out(S, "tty_name:^21t^a", ute.tty_name);
	     call out(S, "terminal_type:^21t^a", ute.terminal_type);
	     call out(S, "line_type:^21t^a (^d)", line_types(ute.line_type),
	        ute.line_type);
	     call out(S, "tty_id_code:^21t^a", ute.tty_id_code);
	     call out(S, "network_connection_type:^21t^a",
		NETWORK_TYPE_VALUES(ute.network_connection_type));
	     call out(S, "channel:^21t^p", ute.channel);

/* Variables useful for dialed terminals */
	     call out(S, "ndialed_consoles:^21t^d", ute.ndialed_consoles);
	     if ute.dial_qualifier ^= "" then do;
		call out(S,
		"dial_qualifier:^21t^a in ring ^d",
		ute.dial_qualifier, ute.dial_server_ring);
		call display_flags ("", "", string(ute.dial_server_flags),
		     DIAL_SERVER_FLAG_NAMES, "dial_server_flags");
	     end;
	     call out(S, "dial_ev_chn:^21t^24.3b", unspec (ute.dial_ev_chn));

/* Information about usage/accounting. */
	     call out(S, "pdtep:^21t^p", ute.pdtep);
	     call out(S, "cpu_this_process:^21t^a",
		cv_usecs (ute.cpu_this_process));
	     call out(S, "cpu_usage:^21t^a", cv_usecs (ute.cpu_usage));
	     call out(S, "mem_usage:^21t^f", ute.mem_usage / 1e3);
	     call out(S, "mem_this_process:^21t^f",
		ute.mem_this_process / 1e3);
	     call out(S, "last_update_time:^21t^a",
		cv_date (ute.last_update_time));
	     call out(S, "session_cost:^21t$^.2f", ute.session_cost);
	     call out(S, "ndevices:^21t^d", ute.ndevices);
	     call out(S, "device_head:^21t^d", ute.device_head);
	     call out(S, "device_tail:^21t^d", ute.device_tail);

	     if max_rs_number > 0 then do;
		call system_info_$rs_name ((ute.rs_number), rs_name, code);
		call out(S, "rate structure: ^21t^d (^a)",
		     ute.rs_number, rs_name);
	     end;

/* Information for dialup_ (control variables). */
	     call out(S, "event:^21t^24.3b", unspec (ute.event));
	     call out(S, "uprojp:^21t^p", ute.uprojp);
	     call out(S, "login_time:^21t^a", cv_date (ute.login_time));
	     call out(S, "cant_bump_until:^21t^a",
		cv_date (ute.cant_bump_until));
	     call out(S, "recent_fatal_error_time: ^a",
		cv_date (ute.recent_fatal_error_time));
	     call out(S, "recent_fatal_error_count: ^d",
		ute.recent_fatal_error_count);
	     if ute.failure_reason ^= 0 then
		call out(S, "failure_reason:^21t^d", ute.failure_reason);
	     call out(S, "count:^21t^d", ute.count);
	     call out(S, "n_processes:^21t^d", ute.n_processes);
	     call out(S, "lock_value:^21t^d", ute.lock_value);
	     call out(S, "login_result:^21t^d (^a)", ute.login_result,
		LOGIN_RESULT_VALUES (ute.login_result));
	     call out(S, "login_code:^21t^a", ute.login_code);
	     call out(S, "preempted:^21t^d (^a)", ute.preempted,
		PREEMPT_VALUES(ute.preempted));
	     call out(S, "destroy_flag:^21t^d (^a)",
		ute.destroy_flag, TRA_VEC_VALUES (ute.destroy_flag));
	     call out(S, "logout_type:^21t^a", ute.logout_type);
	     call out(S, "logout_index:^21t^d", ute.logout_index);
	     call out(S, "disconnect rel min:^21t^d",
		ute.disconnection_rel_minutes);
	     call out(S, "next_disconnected_ate_index:^21t^d",
		ute.next_disconnected_ate_index);
	     call out(S, "work_class:^21t^d", ute.work_class);
	     call out(S, "group:^21t^a", ute.group);
	     call out(S, "whotabx:^21t^d", ute.whotabx);
	     call display_flags ("", "", string(ute.uflags), UFLAG_NAMES,
		"uflags");

/* Information used by load_ctl_ for the process */
	     call out(S, "user_weight:^21t^d", ute.user_weight);
	     call out(S, "standby_line:^21t^d", ute.standby_line);
	     call out(S, "bump_grace:^21t^a", cv_usecs (ute.bump_grace));

/* Information for login server */
	     call out(S, "ls our_handle:^21t^24.3b",
		ute.login_server_info.our_handle);
	     call out(S, "ls his_handle:^21t^24.3b",
		ute.login_server_info.his_handle);
	     call out(S, "ls termination_event_channel:^21t^24.3b",
		unspec (ute.login_server_info.termination_event_channel));
	     call out(S, "ls response_event_channel:^21t^24.3b",
		unspec (ute.login_server_info.response_event_channel));
	     call out(S, "ls process_id:^21t^w",
		ute.login_server_info.process_id);
	     if oct then call odump (utep, size (ute));
skip_entry:
	end;

	call out(S, "^/END ^a TABLE^/", table_name);
	return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */


dump_autbl_: entry (anp, hsw, osw, verb, sct, scu, stream);

	table_type = PT_ABSENTEE;			/* 2 = absentee */
	autp = anp;				/* autbl is based on p */
	table_size = autbl.current_size;
	goto common;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */


dump_dutbl_: entry (anp, hsw, osw, verb, sct, scu, stream);

	table_type = PT_DAEMON;			/* 3 = daemon */
	dutp = anp;				/* dut is based on dutp */
	table_size = dutbl.current_size;
	goto common;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

cv_date:	procedure (clock_value) returns (char(250) varying);

dcl  clock_value fixed bin(71);
	
	if clock_value = 0 then
	     return ("(unset)");
	else return (date_time_$format ("date_time", clock_value, "", ""));

	end cv_date;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */


cv_usecs:
     procedure (P_usecs) returns (char (32));

dcl  P_usecs fixed bin (71) parameter;			/* number of micro seconds */

dcl  code fixed bin (35) automatic;
dcl  time char (32) automatic;
dcl  1 time_offset_auto aligned like time_offset automatic;

dcl  date_time_$from_clock_interval entry (fixed bin (71), fixed bin (71), ptr,
	fixed bin (35));
dcl  ioa_$rsnnl entry () options (variable);

	Ptime_offset = addr (time_offset_auto);
	unspec (time_offset) = ""b;
	time_offset.version = Vtime_offset_2;
	time_offset.flag.hr = 1;
	time_offset.flag.min = 1;
	time_offset.flag.sec = 1;
	call date_time_$from_clock_interval (0, P_usecs, Ptime_offset, code);
	if code ^= 0 then
	     return ("-Invalid Time-");
	else do;
	     call ioa_$rsnnl ("^d hours, ^d mins, ^d secs", time, (0),
		time_offset.val.hr, time_offset.val.min, time_offset.val.sec);
	     return (time);
	end;

/* format: off */
%include time_offset;
/* format: on */
     end cv_usecs;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */


display_flags:
     	procedure (init_on_flags, init_off_flags, flag_bits, flag_names,
	     heading);

dcl (init_on_flags, init_off_flags) char(*) varying;
dcl  flag_bits bit(36) aligned;
dcl  flag_names (*) char (*) varying;
dcl  heading char(*);

dcl  j fixed bin;
dcl (on_flags, off_flags) char(512) varying;
dcl  1 (on_lflags, off_lflags) aligned like last_flag;

	call FLAG_init (init_on_flags, on_flags, on_lflags);
	call FLAG_init (init_off_flags, off_flags, off_lflags);
	do j = lbound (flag_names, 1) to hbound (flag_names, 1);
	     if substr (flag_bits, j, 1) then
		call FLAG_set (on_flags, on_lflags, flag_names(j));
	     else call FLAG_set (off_flags, off_lflags, flag_names(j));
	end;
	do j = j to length(flag_bits);		/* print any new flags whose names we don't know yet */
	     if substr (flag_bits, j, 1) then do;
		two_digits = j;
		call FLAG_set (on_flags, on_lflags,
		     heading || "(" || two_digits || ")");
	     end;
	end;
	call FLAG_emit (on_flags, on_lflags);
	call FLAG_emit (off_flags, off_lflags);
	if on_flags ^= "" then
	     on_flags = rtrim(on_flags, SP_COMMA);
	if off_flags ^= "" then
	     off_flags = rtrim(off_flags, SP_COMMA);
	if on_flags ^= "" then do;
	     call out_line(heading || ":^21tON:  ^a", 26, on_flags);
	     if off_flags ^= "" then
		call out_line("^21tOFF: ^a", 26, off_flags);
	end;
	else if off_flags ^= "" then 
	     call out_line(heading || ":^21tOFF: ^a", 26, off_flags);

	end display_flags;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

FLAG_emit:
     	procedure (flag_string, lflag);

dcl  flag_string_init char(*) varying;
dcl  flag_string char(512) varying;
dcl  flag_name char(*) varying;
dcl  1 lflag aligned like last_flag;

	if lflag.name ^= "" then
	     call FLAG_ARRAY_emit (flag_string, lflag);	     
	return;
	

FLAG_init:
     	entry (flag_string_init, flag_string, lflag);

	flag_string = flag_string_init;
	call FLAG_ARRAY_init (lflag);
	return;


FLAG_set:	entry (flag_string, lflag, flag_name);

	if index(flag_name, "(") > 0 then do;		/* new flag array*/
	     if lflag.name ^= "" then do;		/* old flag array*/
		if before(flag_name, "(") = lflag.name then 
						/* same flag     */
		     call FLAG_ARRAY_set_upper (flag_name, lflag);
		else do;				/* different flag*/
		     call FLAG_ARRAY_emit (flag_string, lflag);
		     call FLAG_ARRAY_set_lower (flag_name, lflag);
		end;
	     end;
	     else					/* no old flag   */
		call FLAG_ARRAY_set_lower (flag_name, lflag);
	end;
	else do;
	     if lflag.name ^= "" then			/* old flag array*/
		call FLAG_ARRAY_emit (flag_string, lflag);
	     flag_string = flag_string || flag_name;
	     flag_string = flag_string || ", ";
	     end;
	end FLAG_emit;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */


FLAG_ARRAY_emit:
     	procedure (flag_string, lflag);
	
dcl  flag_name char(*) varying;
dcl  flag_string char(512) varying;
dcl  1 lflag aligned like last_flag;

dcl  flag_x fixed bin;

	flag_string = flag_string || lflag.name;
	flag_string = flag_string || "(";
	if lflag.range ^= "" then do;
	     flag_string = flag_string || lflag.range;
	     flag_string = flag_string || ";";
	     end;
	flag_string = flag_string || ltrim(char(lflag.lower_x));
	if lflag.lower_x ^= lflag.upper_x then do;
	     flag_string = flag_string || ":";
	     flag_string = flag_string || ltrim(char(lflag.upper_x));
	     end;
	flag_string = flag_string || ")";
	flag_string = flag_string || ", ";
	

FLAG_ARRAY_init:
	entry (lflag);

	lflag.name = "";
	lflag.lower_x, lflag.upper_x = 0;
	lflag.range = "";
	return;
	

FLAG_ARRAY_set_lower:
	entry (flag_name, lflag);

	flag_x = convert (flag_x, before (after (flag_name, "("), ")"));
	lflag.name = before (flag_name, "(");
	lflag.lower_x, lflag.upper_x = flag_x;
	lflag.range = "";
	return;

FLAG_ARRAY_set_upper:
	entry (flag_name, lflag);

	flag_x = convert (flag_x, before (after (flag_name, "("), ")"));
	if flag_x = lflag.upper_x + 1 then
	     lflag.upper_x = flag_x;
	else do;
	     if lflag.range ^= "" then
		lflag.range = ";";
	     lflag.range = lflag.range || ltrim(char(lflag.lower_x));
	     if lflag.lower_x ^= lflag.upper_x then do;
		lflag.range = lflag.range || ":";
		lflag.range = lflag.range || ltrim(char(lflag.upper_x));
	     end;
	     lflag.lower_x, lflag.upper_x = flag_x;
	end;
          end FLAG_ARRAY_emit;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */


odump: proc (loc, nw);
dcl  loc ptr, nw fixed bin;

dcl  kk fixed bin;

	do kk = 0 to nw - 1 by 8;
	     tp = addrel (loc, kk);
	     call out(S, "^4o ^w ^w ^w ^w ^w ^w ^w ^w", kk,
		to.w1, to.w2, to.w3, to.w4,
		to.w5, to.w6, to.w7, to.w8);
	end;

     end odump;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */


out_line:	procedure (ioa_ctl, continue_col, value);
	
dcl  ioa_ctl char(*);
dcl  continue_col fixed bin;
dcl  value char(*) varying;

dcl  cur_ioa char(60) varying;
dcl  cur_line char(512) varying;
dcl  data_region fixed bin;
dcl  remainder char(512) varying;

dcl  NON_COMMA_CHARS char(97) int static options(constant) init(
 "!""#$%&'()=~|1234567890-^\`@{}[]+*/.<>;:_
	abcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ");

	cur_ioa = ioa_ctl;
	data_region = line_length - (continue_col-1);
	remainder = value;
	do while (length(remainder) > data_region);
	     cur_line = substr(remainder,1,data_region);
	     cur_line = rtrim(cur_line, NON_COMMA_CHARS);
	     if cur_line = "" then do;
		cur_line = before (remainder, ",");
		if cur_line ^= remainder then
		     cur_line = cur_line || ",";
	     end;
	     remainder = after (remainder, cur_line);
	     cur_line = ltrim(cur_line);
	     call out(S, cur_ioa, cur_line);
	     cur_ioa = "^" || ltrim(char(continue_col)) || "t^a";
	     end;
	if remainder ^= "" then do;
	     remainder = ltrim(remainder);
	     call out(S, cur_ioa, remainder);
	end;
	end out_line;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/* format: off */
 %include absentee_user_table;
 %include answer_table;
 %include daemon_user_table;
 %include dialup_values;
 %include line_types;
 %include net_event_message;
 %include ttyp;
 %include user_attributes;
 %include user_table_entry;
 %include user_table_header;

dcl	1 uth			aligned like ut_header based(uthp),
	uthp			ptr;

     end dump_anstbl_;
