/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1986 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(86-11-12,Parisek), approve(86-12-18,MCR7588),
     audit(87-07-17,Johnson), install(87-08-07,MR12.1-1070):
     Initially coded to scan the system answering service logs for login and
     logout messages, and build a list of used terminal types based on this
     information.
                                                   END HISTORY COMMENTS */

terminal_report:
	proc;

	log_read_ptr, log_message_ptr, vptr, sci_ptr, vptr_ansb, vptr_two,
	     temp_ptr, temp_two_ptr, ttp_tot_ptr, temp_as_ptr = null ();

	on cleanup begin;
	     if sci_ptr ^= null () then
		call ssu_$destroy_invocation (sci_ptr);
	end;
	
	call ssu_$standalone_invocation (sci_ptr, "terminal_report", "1.0",
	     cu_$arg_list_ptr (), ssu_abort, code);
	if code ^= 0 then do;
	     call com_err_ (code, "terminal_report", "Failed to create ssu_ invocation.");
	     return;
	end;					/* Using ssu_ entries because calls to log subroutines require the sci_ptr */

	call initialize_options ();
	
	on condition (cleanup)
	     call clean_up ();
	
	call log_match_$add_match (opt.lmd_ptr, "LOGIN");
						/* scan the logs for LOGIN messages only */
	call process_arguments ();			/* validate arguments */
	if ttpsw & usersw then do;
	     call ssu_$abort_line (sci_ptr, error_table_$inconsistent, "-user and -ttp");
	     call clean_up;
	end;
	if output_file ^= "" then do;			/* not default */
	     call iox_$attach_name ("terminal_report_output", opt.iocb,
		"vfile_ " || output_file, null, code);
	     if code ^= 0 then do;
		call ssu_$abort_line (sci_ptr, code, "Could not attach to ^a", output_file);
		call clean_up ();
	     end;
	     attached = "1"b;			/* output file is attached */
	     call iox_$open (opt.iocb, 2, ""b, code);
	     if code ^= 0 then do;
		call ssu_$abort_line (sci_ptr, code, "Could not open file ^a", output_file);
		call iox_$detach_iocb (opt.iocb, code);
		call clean_up ();
	     end;
	     opened = "1"b;				/* output file is opened */
	end;

	if opt.reader_procedure = "" then do;
	     call log_read_$open (">sc1>as_logs", "log", log_read_ptr, code);
	end;					/* get ptr to log segment */
	if code ^= 0 then 
	     call ssu_$abort_line (sci_ptr, code, "Cannot open log");

	call log_limit_scan_ (sci_ptr, addr(opt.limit), "0"b, log_read_ptr);
						/* determine where to start & stop in log scanning */
	log_message_ptr = opt.first_msg;
	first_msg_count, ansb_msg_count, index_count = 0;
						/* initialize */

	call get_temp_segments_ ("terminal_report", temp_ptrs, code);
	if code ^= 0 then do;
	     call com_err_ (code, "terminal_report", "Error opening temporary segment.");
	     call clean_up ();
	end;
	temp_ptr = temp_ptrs (1);
	temp_as_ptr = temp_ptrs (2);
	temp_two_ptr = temp_ptrs (3);
	ttp = temp_ptrs (4);
	ttp_tot_ptr = temp_ptrs (5);

	on condition (out_of_bounds)
	     call oob ();				/* it's possible we will fill a temp segment past 255K */

	call system_info_$titles (coxx, dpxx, cods, dpds);
						/* Report banner stuff */
	call ioa_$ioa_switch (opt.iocb, "^a^/^a^/", cods, dpds);
	if opt.first_msg = null () then
	     call ioa_$ioa_switch (opt.iocb, "Terminal report to ^a^3/", 
	     log_format_time_ ((opt.last_msg -> log_message.time)));
	else if opt.last_msg = null () then
	     call ioa_$ioa_switch (opt.iocb, "Terminal report from ^a^3/", 
	     log_format_time_ ((opt.first_msg -> log_message.time)));
	else call ioa_$ioa_switch (opt.iocb, "Terminal report from ^a to ^a^3/", 
	     log_format_time_ ((opt.first_msg -> log_message.time)),
	     log_format_time_ ((opt.last_msg -> log_message.time)));

scan_log: 
	do while (log_message_ptr ^= null ());
	     if log_match_$test (opt.lmd_ptr, log_message_ptr, "") then do;
						/* find log message containing info we want, based on match data */
		audit_record_ptr = addr (log_message.data (1));
		audit_record_size = dimension (log_message.data, 1);
		info_ptr = audit_record_ptr;
		info_size = audit_record_size;
		info_size = info_size - size (audit_record_header);
		info_ptr = addrel (info_ptr, size (audit_record_header));
						/* ptr to expanded data */
		if info_size > 0 & audit_record_header.subject.tag = "a"
		     & audit_record_header.subject.process_id = ""b then do;
						/* interactive only */
		     if looking_for ^= "" then do;
			if usersw then do;
			     if audit_record_header.subject.person ^= choosen_name then goto Next;
			end;
			else do;
			     if rtrim(info_ptr -> as_ia_audit_record_.terminal_type)
				^= rtrim(looking_for) then goto Next;
			end;			/* skip message if TTP match not found when -match was given */
		     end;
		     first_msg_count = first_msg_count + 1;
						/* increment valid message count */
		     temp.ttp (first_msg_count) = info_ptr -> as_ia_audit_record_.terminal_type;
		     temp.name (first_msg_count) = audit_record_header.subject.person;
		     temp.chn (first_msg_count) = info_ptr -> as_ia_audit_record_.channel;
		     temp.ansb (first_msg_count) = info_ptr -> as_ia_audit_record_.answerback;
		     temp_as.ansb (first_msg_count) = info_ptr -> as_ia_audit_record_.answerback;
		     temp.time (first_msg_count) = log_message.time;
		     temp.cpu (first_msg_count), temp.connect (first_msg_count) = "";
						/* fill in temp array data */
		     if index (log_message.text, "DENIED") ^= 0 then do;
						/* if this is a "LOGIN DENIED" message */
			temp.failed (first_msg_count) = "1"b;
			failsw = "1"b;
			call add_ttp_data ();
			failsw = ""b;
			first_msg_count = first_msg_count - 1;
			goto Next;
		     end;
		     else do;
			temp.failed (first_msg_count) = ""b;
			call add_ttp_data ();
		     end;
		     temp.logins (first_msg_count) = 1;
		     if ^mtsw then do;
			call check_for_dups (MCH);
			if MCH then first_msg_count = first_msg_count - 1;
			goto Next;
		     end;
		     NAME = rtrim(temp.name (first_msg_count));
		     CHN = rtrim(temp.chn (first_msg_count));
		     TIME = temp.time (first_msg_count);
		     auto_log_read_ptr = log_read_ptr;
		     auto_log_message_ptr = log_message_ptr;
		     call scan_LOGOUTS (NAME, CHN, TIME);
						/* called only for looking up cpu & connect data */
		     log_message_ptr = auto_log_message_ptr;
		     log_read_ptr = auto_log_read_ptr;
		end;
               end;

Next:
	     call log_read_$next_message (log_read_ptr, log_message_ptr, code);
	     if code = error_table_$no_log_message then log_message_ptr = null ();
						/* find next log message */
	     if log_message_ptr = opt.last_msg then goto sort_em;
	     else goto scan_log;
	end;

sort_em:						/* sort items */

	vptr = pointer (temp_ptr, currentsize (temp));
	vptr_ansb = pointer (temp_as_ptr, currentsize (temp_as));
	vptr_two = pointer (ttp_tot_ptr, currentsize (ttp_tot));

	V.n = first_msg_count;
	V_thr.n_thr = first_msg_count;

	do inx = 1 to V.n;
	     V.vector (inx) = addr (temp_ptr -> temp.data (inx));
	end;

	do inx = 1 to V_thr.n_thr;
	     V_thr.vector_thr (inx) = addr (temp_as_ptr -> temp_as.ansbs (inx));
	end;

	V_two.n_two = ttx;
	do inx = 1 to V_two.n_two;
	     V_two.vector_two (inx) = addr (ttp_tot_ptr -> ttp_tot.tot_data (inx));
	end;
	if V.n > 1 then call sort_items_$varying_char (vptr);
	if V_two.n_two > 1 then call sort_items_$varying_char (vptr_two);
	if V_thr.n_thr > 1 then call sort_items_$varying_char (vptr_ansb);

	if mtsw then call ioa_$ioa_switch (opt.iocb, 
	     "Terminal usage sorted by type:^50t(*) = Still active^2/");
	else call ioa_$ioa_switch (opt.iocb, 
	     "Terminal usage sorted by type:^2/");
	if mtsw then call ioa_$ioa_switch (opt.iocb, 
	     "Type^36tLogins^50tNologins^62tCpu^70tConnect^/");
	else call ioa_$ioa_switch (opt.iocb, "Type^36tLogins^50tNologins^/");
	if mtsw then do;
	     ttp_meters, final_tab = "1"b;
	end;
	do inx = 1 to ttx;
	     tot_logi, tot_logo = 0;
	     tot_cpu, tot_connect = "";
	     do inxx = 1 to V_two.vector_two (inx) -> ttp_tot_data.ascnt;
		tot_logi = tot_logi + V_two.vector_two (inx) 
		     -> ttp_tot_data.ansbks.login (inxx);
		tot_logo = tot_logo + V_two.vector_two (inx) 
		     -> ttp_tot_data.ansbks.fails (inxx);
		if mtsw then do;
		     add_cpus = "1"b;
		     if tot_cpu = "" then tot_cpu = "000:00";
		     call add_common_times ();
		     add_cpus = ""b;
		     if tot_connect = "" then tot_connect = "00000:00";
		     call add_common_times ();
		end;
	     end;
						/* add up number of logins and failed logins */

	     if mtsw then call ioa_$ioa_switch (opt.iocb, "^a^36t^5d^50t^5d^60t^a^70t^a", 
		V_two.vector_two (inx) -> ttp_tot_data.type, tot_logi, tot_logo, tot_cpu, tot_connect);
	     else call ioa_$ioa_switch (opt.iocb, "^a^36t^5d^50t^5d", 
		V_two.vector_two (inx) -> ttp_tot_data.type, tot_logi, tot_logo);
	end;
	if ttp_meters then ttp_meters, final_tab = ""b;

	if mtsw then call ioa_$ioa_switch (opt.iocb, 
	     "^3/Terminal usage sorted by Answerback:^50t(*) = Still active^2/");
	else call ioa_$ioa_switch (opt.iocb, 
	     "^3/Terminal usage sorted by Answerback:^2/");
	if mtsw then call ioa_$ioa_switch (opt.iocb, 
	     "Ansbk^8tType^38tLogins^52tNologins^64tCpu^72tConnect");
	else call ioa_$ioa_switch (opt.iocb, 
	     "Ansbk^8tType^38tLogins^52tNologins");
	call ioa_$ioa_switch (opt.iocb, "^10tUser");
	call output_data ();

	call clean_up;
	return;

						/* procedure for determining cpu times */
get_cpu_time:
	proc ();

	datax = index (temp_two.text (1), "$") - 7;
	cpu_data = substr (temp_two.text (1), datax, 6);
	temp.cpu (first_msg_count) = cpu_data;
	call get_connect_time ();
	ttp_meters = "1"b;
	call add_ttp_data ();
	ttp_meters = ""b;
	return;

     end get_cpu_time;

	
check_for_dups:					/* procedure to add cpu times up if user 
	     & ttp are listed in our temp array more than once */
          proc (match_made);

dcl match_made bit (1) aligned parameter;

	if first_msg_count < 2 then return;
	match_made = ""b;
	do inx = 1 to first_msg_count-1;
	     if rtrim(temp.ttp (inx)) = rtrim(temp.ttp (first_msg_count)) & 
		rtrim(temp.name (inx)) = rtrim(temp.name (first_msg_count)) &
		rtrim(temp.ansb (inx)) = rtrim(temp.ansb (first_msg_count)) then do;
		temp.logins (inx) = temp.logins (inx) + 1;
		if ^mtsw then do;
		     match_made = "1"b;
		     return;
		end;
		if index (temp.cpu (inx), ":") ^= 0 &
		     rtrim(temp.cpu (first_msg_count)) = "" then 
		     temp.cpu (inx) = rtrim(temp.cpu (inx)) || " (*)";
		else if index (temp.cpu (first_msg_count), ":") ^= 0 &
		     rtrim(temp.cpu (inx)) = "" then 
		     temp.cpu (inx) = rtrim(temp.cpu (first_msg_count)) || " (*)";
		else if index (temp.cpu (inx), ":") ^= 0 then do;
		     add_cpus = "1"b;     
		     call add_common_times ();
		     add_cpus = ""b;
		     call add_common_times ();
		end;
		match_made = "1"b;			/* match was found */
		return;
	     end;
	end;
	return;
	
     end check_for_dups;


get_connect_time:					/* procedure to determine connect times */
          proc ();

dcl date_time_$from_clock_interval entry (fixed bin(71), fixed bin(71), ptr, fixed bin(35));
dcl 1 to aligned like time_offset;
dcl 1 toa aligned like time_offset_array;
dcl (time_one, time_two) fixed bin (71);
dcl (ihour, imin, isec) fixed bin;
dcl connect_time char (8);

	to.version, toa.version = Vtime_offset_2;
	toa.flag (1) = UNUSED;
	toa.flag (2) = UNUSED;
	toa.flag (3) = UNUSED;
	toa.flag (4) = UNUSED;
	toa.flag (5) = INTEGER;
	toa.flag (6) = INTEGER;
	toa.flag (7) = INTEGER;
	toa.flag (8) = UNUSED;
	time_one = temp_two.time (1);
	time_two = temp.time (first_msg_count);
	call date_time_$from_clock_interval (time_two, time_one, addr(toa), code);
	ihour = toa.val (5) + .0;
	imin = toa.val (6) + .0;
	isec = toa.val (7) + .0;
	imin = imin + ihour*60;
	call ioa_$rsnnl ("^5d:^2d", connect_time, len, imin, isec);
	temp.connect (first_msg_count) = connect_time;
	
	return;
     end get_connect_time;
	

add_common_times:					/* procedure to add cpu/connect times for common ttps/users */
          proc ();

dcl (common_temp, common_tempx) char (8);
dcl (sub_one_one, sub_one_two, sub_two_one, sub_two_two,
	common_min_char, common_sec_char) char (5);
dcl (common_one_one, common_one_two, common_two_one, common_two_two,
	common_min, common_sec) fixed bin;

	if ttp_meters then do;
	     if add_cpus then do;
		if final_tab then do;
		     common_temp = rtrim(V_two.vector_two (inx) -> 
			ttp_tot_data.ansbks.cpu (inxx));
		     common_tempx = rtrim(tot_cpu);
		end;
		else do;
		     common_temp = rtrim(temp.cpu (first_msg_count));
		     common_tempx = rtrim(tot_cpu);
		end;
	     end;
	     else do;
		if final_tab then do;
		     common_temp = rtrim(V_two.vector_two (inx) ->
			ttp_tot_data.ansbks.connect (inxx));
		     common_tempx = rtrim(tot_connect);
		end;
		else do;
		     common_temp = rtrim(temp.connect (first_msg_count));
		     common_tempx = rtrim(tot_connect);
		end;
	     end;
	end;

	else do;
	     if add_cpus then do;
		common_temp = rtrim(temp.cpu (inx));
		common_tempx = rtrim(temp.cpu (first_msg_count));
	     end;
	     else do;
		common_temp = rtrim(temp.connect (inx));
		common_tempx = rtrim(temp.connect (first_msg_count));
	     end;
	end;

	if add_cpus then do;
	     sub_one_one = substr (common_temp, 1, 3);
	     sub_one_two = substr (common_temp, 5, 2);
	     sub_two_one = substr (common_tempx, 1, 3);
	     sub_two_two = substr (common_tempx, 5, 2);
	end;
	else do;
	     sub_one_one = substr (common_temp, 1, 5);
	     sub_one_two = substr (common_temp, 7, 2);
	     sub_two_one = substr (common_tempx, 1, 5);
	     sub_two_two = substr (common_tempx, 7, 2);
	end;
	
	common_one_one = cv_dec_check_ (rtrim(ltrim(sub_one_one)), code);
	common_one_two = cv_dec_check_ (rtrim(sub_one_two), code);
	common_two_one = cv_dec_check_ (rtrim(ltrim(sub_two_one)), code);
	common_two_two = cv_dec_check_ (rtrim(sub_two_two), code);
	
	common_min = common_one_one + common_two_one;
	common_sec = common_one_two + common_two_two;
	if common_sec > 59 then do;
	     common_min = common_min + 1;
	     common_sec = common_sec - 60;
	end;
	
	if add_cpus then call ioa_$rsnnl ("^3d", common_min_char, len, common_min);
	else call ioa_$rsnnl ("^5d", common_min_char, len, common_min);
	call ioa_$rsnnl ("^2d", common_sec_char, len, common_sec);
	if ttp_meters then do;
	     if add_cpus then tot_cpu = rtrim(common_min_char) || ":" || rtrim(common_sec_char);
	     else tot_connect = rtrim(common_min_char) || ":" || rtrim(common_sec_char);
	     return;
	end;
	if add_cpus then temp.cpu (inx) = rtrim(common_min_char) || ":" || rtrim(common_sec_char);
	else temp.connect (inx) = rtrim(common_min_char) || ":" || rtrim(common_sec_char);
	return;
     end add_common_times;



scan_LOGOUTS:
          proc (login_name, chan_name, login_time);	/* procedure that scans the logs finding "LOGOUT" messages
	     that correspond to "LOGIN" messages for determining cpu & connect time usage */

dcl login_name char(22) parameter;
dcl chan_name char(32) parameter;
dcl login_time fixed bin (71) parameter;
dcl msg_count fixed bin (35);

	msg_count = 0;
	log_message_ptr = opt.first_msg;		/* start with first message again */
	call log_match_$clear_text_strings (opt.lmd_ptr);
	call log_match_$add_match (opt.lmd_ptr, "LOGOUT");
						/* change the match string from LOGIN to LOGOUT */
	do while (log_message_ptr ^= null ());
	     if log_match_$test (opt.lmd_ptr, log_message_ptr, "") then do;
		msg_count = msg_count + 1;
		audit_record_ptr = addr (log_message.data (1));
		audit_record_size = dimension (log_message.data, 1);
		info_ptr = audit_record_ptr;
		info_size = audit_record_size;
		info_size = info_size - size (audit_record_header);
		info_ptr = addrel (info_ptr, size (audit_record_header));
		if index (log_message.text, "disconnect") = 0 then do;	
		     if index (log_message.text, rtrim(login_name)) ^= 0 &
			index (log_message.text, rtrim(chan_name)) ^= 0 &
			log_message.time > login_time then do;
			if index_count > 0 then do inx = 1 to index_count;
			     if msg_count = temp_thr.index (inx) then goto skip_msg_count;
			end;
			temp_two.text (1) = log_message.text;
			temp_two.time (1) = log_message.time;
			index_count = index_count + 1;
			temp_thr.index (index_count) = msg_count;
			call get_cpu_time ();
			goto setup;
		     end;
		end;
               end;
skip_msg_count:
	     
	     call log_read_$next_message (log_read_ptr, log_message_ptr, code);
						/* goto next log message */
	     if log_message_ptr = opt.last_msg then do;
		temp.cpu (first_msg_count) = "";
		temp.connect (first_msg_count) = "";
		goto setup;
	     end;
	     if code = error_table_$no_log_message then log_message_ptr = null ();
	end;

setup:	call check_for_dups (MCH);
	if MCH then first_msg_count = first_msg_count - 1;
	call log_match_$clear_text_strings (opt.lmd_ptr);
	call log_match_$add_match (opt.lmd_ptr, "LOGIN");
						/* change the match string back to LOGIN before returning
		to original log scan */
	return;

     end scan_LOGOUTS;
     

add_ttp_data:
          proc ();					/* procedure for adding up & sorting different answerbacks
	     per different ttps */

	if ttx = 0 then do;
	     ttx = ttx + 1;
	     ttp_tot.type (ttx) = temp.ttp (first_msg_count);
	     ttp_tot.ascnt (ttx) = 1;
	     ttp_tot.ansbks (ttx).ansbk (1) = temp.ansb (first_msg_count);
	     if failsw then ttp_tot.ansbks (ttx).fails (1) = 1;
     	     else ttp_tot.ansbks (ttx).login (1) = 1;
	     ttp_tot.ansbks (ttx).cpu (1) = "  0: 0";
	     ttp_tot.ansbks (ttx).connect (1) = "    0: 0";
	end;
	else do;
	     do inx = 1 to ttx;
		if temp.ttp (first_msg_count) = ttp_tot.type (inx) then do;
		     do ttxx = 1 to ttp_tot.ascnt (inx);
			if ttp_tot.ansbks (inx).ansbk (ttxx) = 
			     temp.ansb (first_msg_count) then do;
			     if ttp_meters then do;
				add_cpus = "1"b;
				if tot_cpu = "" then tot_cpu = "000:00";
				else tot_cpu = ttp_tot.ansbks (inx).cpu (ttxx);
				call add_common_times ();
				add_cpus = ""b;
				ttp_tot.ansbks (inx).cpu (ttxx) = 
				     tot_cpu;
				if tot_connect = "" then tot_connect = "00000:00";
				else tot_connect = ttp_tot.ansbks (inx).connect (ttxx);
				call add_common_times ();
				ttp_tot.ansbks (inx).connect (ttxx) = 
				     tot_connect;
			     end;
			     else if failsw then ttp_tot.ansbks (inx).fails (ttxx) = 
				ttp_tot.ansbks (inx).fails (ttxx) + 1;
			     else ttp_tot.ansbks (inx).login (ttxx) = 
				ttp_tot.ansbks (inx).login (ttxx) + 1;
			     return;
			end;
		     end;
		     ttp_tot.ascnt (inx) = ttp_tot.ascnt (inx) + 1;
		     ttp_tot.ansbks (inx).ansbk (ttp_tot.ascnt (inx)) = 
			temp.ansb (first_msg_count);
		     ttp_tot.ansbks (inx).cpu (ttp_tot.ascnt (inx)) = "  0: 0";
		     ttp_tot.ansbks (inx).connect (ttp_tot.ascnt (inx)) = "    0: 0";
		     if failsw then ttp_tot.ansbks (inx).fails (ttp_tot.ascnt (inx)) = 
			ttp_tot.ansbks (inx).fails (ttp_tot.ascnt (inx)) + 1;
		     else ttp_tot.ansbks (inx).login (ttp_tot.ascnt (inx)) = 
			ttp_tot.ansbks (inx).login (ttp_tot.ascnt (inx)) + 1;
		     return;
		end;
	     end;
	     ttx = ttx + 1;
	     ttp_tot.ascnt (ttx) = 1;
	     ttp_tot.type (ttx) = temp.ttp (first_msg_count);
	     ttp_tot.ansbks (ttx).ansbk (ttp_tot.ascnt (ttx)) = 
		temp.ansb (first_msg_count);
	     ttp_tot.ansbks (ttx).cpu (ttp_tot.ascnt (ttx)) = "  0: 0";
	     ttp_tot.ansbks (ttx).connect (ttp_tot.ascnt (ttx)) = "    0: 0";
	     if failsw then ttp_tot.ansbks (ttx).fails (ttp_tot.ascnt (ttx)) = 1;
	     else ttp_tot.ansbks (ttx).login (ttp_tot.ascnt (ttx)) = 1;
	end;
	return;
     end add_ttp_data;
	     

output_data:
          proc ();					/* display results to user_output or output file */

dcl (inxxx, inxxxx) fixed bin;
dcl atype char (36) varying;

	ttype, atype = "";
	
	do inx = 1 to V_thr.n_thr;
	     if  V_thr.vector_thr (inx) -> temporary_ansb.ansb ^= atype then do;
		atype = V_thr.vector_thr (inx) -> temporary_ansb.ansb;
	     end;
	     else goto skip_call;
	     do inxx = 1 to V_two.n_two;
		do inxxx = 1 to V.n;
		     if V.vector (inxxx) -> temporary.ttp = 
			V_two.vector_two (inxx) -> ttp_tot_data.type & V.vector (inxxx) -> temporary.ansb = 
			V_thr.vector_thr (inx) -> temporary_ansb.ansb then do;
			if ttype ^= V_thr.vector_thr (inx) -> temporary_ansb.ansb 
			     || "   " || V_two.vector_two (inxx) -> ttp_tot_data.type then do;
			     ttype = V_thr.vector_thr (inx) -> temporary_ansb.ansb 
				|| "   " || V_two.vector_two (inxx) -> ttp_tot_data.type;
			     tot_logi, tot_logo = 0;
			     do inxxxx = 1 to V_two.vector_two (inxx) -> ttp_tot_data.ascnt;
				if V_two.vector_two (inxx) -> ttp_tot_data.ansbk (inxxxx) = 
				     V_thr.vector_thr (inx) -> temporary_ansb.ansb then do;
				     tot_logi = tot_logi + V_two.vector_two (inxx) 
					-> ttp_tot_data.ansbks.login (inxxxx);
				     tot_logo = tot_logo + V_two.vector_two (inxx) 
					-> ttp_tot_data.ansbks.fails (inxxxx);
				     if mtsw then do;
					tot_cpu = V_two.vector_two (inxx)
					-> ttp_tot_data.ansbks.cpu (inxxxx);
					tot_connect = V_two.vector_two (inxx)
					-> ttp_tot_data.ansbks.connect (inxxxx);
				     end;
				end;
			     end;
			     if mtsw then call ioa_$ioa_switch (opt.iocb, "^/^a^38t^5d^52t^5d^62t^a^72t^a", 
				ttype, tot_logi, tot_logo, tot_cpu, tot_connect);
			     else call ioa_$ioa_switch (opt.iocb, "^/^a^38t^5d^52t^5d", 
				ttype, tot_logi, tot_logo);
			end;
			if mtsw then do;
			     if index (V.vector (inxxx) -> temporary.cpu, ":") = 0 then
			     V.vector (inxxx) -> temporary.cpu = "  (*)";
			call ioa_$ioa_switch (opt.iocb, "^10t^a^38t^5d^62t^a^72t^a", 
			     V.vector (inxxx) -> temporary.name,
			     V.vector (inxxx) -> temporary.logins,
			     V.vector (inxxx) -> temporary.cpu,
			     V.vector (inxxx) -> temporary.connect);
                   	          end;
			else do;
			     call ioa_$ioa_switch (opt.iocb, "^10t^a^38t^5d",
				V.vector (inxxx) -> temporary.name,
				V.vector (inxxx) -> temporary.logins);
			end;
		     end;
		end;
	     end;
skip_call:     
	end;
	return;
     end output_data;


oob:      proc ();
	call ioa_$ioa_switch (opt.iocb, "Cannot continue... Out_of_bounds condition detected.");
	call clean_up ();
     end oob;
     

	
clean_up:	proc ();
	if log_read_ptr ^= null () then
	     call log_read_$close (log_read_ptr, (0));
	if opt.lmd_ptr ^= null () then
	     call log_match_$free (opt.lmd_ptr);
	if temp_ptrs (1) ^= null () then
	     call release_temp_segments_ ("terminal_report", temp_ptrs, code);
	if opened then do;
	     call iox_$close (opt.iocb, code);
	     if code ^= 0 then do;
		call ssu_$abort_line (sci_ptr, code, "Could not close file ^a", output_file);
	     end;
	     opened = ""b;
	end;
	if attached then do;
	     call iox_$detach_iocb (opt.iocb, code);
	     if code ^= 0 then do;
		call ssu_$abort_line (sci_ptr, code, "Could not detach file ^a", output_file);
	     end;
	     attached = ""b;
	end;
	if sci_ptr ^= null () then
	     call ssu_$destroy_invocation (sci_ptr);

	goto exit;
     end clean_up;

     
exit:	return;
	

process_arguments:
          proc ();					/* validate arguments */
	
dcl arg char (argl) based (argp);
dcl (argn, nargs) fixed bin;
dcl argl fixed bin (21);
dcl argp ptr;
dcl cu_$arg_ptr entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
	
	call ssu_$arg_count (sci_ptr, nargs);

	looking_for = "";
	do argn = 1 to nargs;
	     call ssu_$arg_ptr (sci_ptr, argn, argp, argl);
	     if arg = "-from" | arg = "-fm" then 
		call get_next_arg (opt.limit.from_opt);
	     else if arg = "-to" then call get_next_arg (opt.limit.to_opt);
	     else if arg = "-for" then call get_next_arg (opt.limit.for_opt);
	     else if arg = "-last" | arg = "-lt" then 
		call get_next_arg (opt.limit.last_opt);
	     else if arg = "-output_file" | arg = "-of" then do;
		call get_next_arg (output_file);
		if code ^= 0 then output_file = "terminal_report_output";
		else output_file = arg;
	     end;
	     else if arg = "-no_output_file" | arg = "-nof" then output_file = "";
	     else if arg = "-terminal_type" | arg = "-ttp" then do;
		call get_next_arg (looking_for);
		call process_looking_for ();
		ttpsw = "1"b;
	     end;
	     else if arg = "-all_terminal_types" | arg = "-att" then do;
		looking_for = "";
		ttpsw = "0"b;
	     end;
	     else if arg = "-user" then do;
		call get_next_arg (looking_for);     
		call process_looking_for ();
		choosen_name = looking_for;
		usersw = "1"b;
	     end;
	     else if arg = "-all_users" | arg = "-au" then do;
		looking_for = "";
		usersw = "0"b;
	     end;
	     else if arg = "-meters" | arg = "-mt" then mtsw = "1"b;
	     else if arg = "-nometers" | arg = "-nmt" then mtsw = ""b;
	     else if substr (arg, 1, 1) = "-" then do;
		call ssu_$abort_line (sci_ptr, error_table_$badopt, "^a", arg);
		call clean_up ();
	     end;
	     else call ssu_$abort_line (sci_ptr, error_table_$bad_arg, "^a", arg);
	end;
	call check_options ();
	return;
	

process_looking_for:
	proc ();					/* procedure for validating -match or -ttp strings */

	if substr (arg, 1, 1) = "/" & substr (arg, argl, 1) ^= "/" then do;
INVALID_ERROR:
	          call ssu_$abort_line (sci_ptr, error_table_$bad_arg,
		"Invalid regular expression ""^a""", arg);
		call clean_up ();
	     end;
	     else if substr (arg, argl, 1) = "/" & substr (arg, 1, 1) ^= "/" then
		goto INVALID_ERROR;
	     else if arg = "/" then goto INVALID_ERROR;
	     return;
     end process_looking_for;


get_next_arg:
          proc (option);

dcl option char (*) varying parameter;
	
	argn = argn + 1;
	call cu_$arg_ptr (argn, argp, argl, code);
	option = arg;
	return;
     end get_next_arg;
     
check_options:
          proc ();					/* procedure for determining what date/time to start & stop
	     log scanning */
	
dcl temp_number fixed bin;
dcl (from_time, to_time) fixed bin(71);
dcl exchange_opt char (50) varying;

	if opt.limit.from_opt ^= "" & opt.limit.to_opt ^= "" then do;
	     temp_number = cv_dec_check_ ((opt.limit.from_opt), code);
	     if code ^= 0 then do;
		temp_number = cv_dec_check_ ((opt.limit.to_opt), code);
		if code ^= 0 then do;
		     call convert_date_to_binary_ ((opt.limit.from_opt), from_time, 0);
		     call convert_date_to_binary_ ((opt.limit.to_opt), to_time, 0);
		     if from_time > to_time then do;
			exchange_opt = opt.limit.from_opt;
			opt.limit.from_opt = opt.limit.to_opt;
			opt.limit.to_opt = exchange_opt;
		     end;
		end;
	     end;
	end;
	return;
     end check_options;
     end process_arguments;

     
ssu_abort:
	proc ();
	call clean_up ();
	return;
     end ssu_abort;
     

initialize_options:
	proc ();
	unspec (opt) = ""b;
	opt.pointers = null ();
	opt.lmd_ptr = null ();
	opt.limit.version = LOG_LIMIT_INFO_VERSION_1;
	opt.limit.to_opt = "";
	opt.limit.from_opt = "";
	opt.limit.for_opt = "";
	opt.log_pathname = "";
	opt.iocb = iox_$user_output;
	opt.reader_procedure = "";
/*	unspec (log_message) = ""b;*/
	output_file, tot_cpu, tot_connect = "";
	attached, opened, mtsw, failsw, ttp_meters, final_tab, usersw,
	     ttpsw = ""b;
	ttx = 0;
	unspec (ttp_tot) = ""b;
	return;
     end initialize_options;
     


%include log_limit_info;
%include as_audit_structures;
%include log_message;
%include user_attributes;
%include access_audit_bin_header;
%include time_offset;


/* Builtins */

dcl (index, substr, addr, addrel, currentsize, ltrim, rtrim,
     null, pointer, unspec, dimension, size) builtin;


/* Automatic */

dcl 1 opt automatic,				/* structure required by the system log subroutines */
      2 log_pathname char (168),
      2 pointers,
        3 expand_select_ptr ptr,
        3 lmd_ptr ptr,
      2 limit aligned like log_limit_info,
      2 reader_procedure char (32) varying,
      2 iocb ptr,
      2 flags aligned,
        3 debug_sw bit (1),
        3 dm_system_log_sw bit (1),
        3 reverse_sw bit (1),
        3 from_sw bit (1),
        3 to_sw bit (1),
        3 for_sw bit (1),
        3 last_sw bit (1),
        3 expand_sw bit (1),
        3 octal_sw bit (1),
        3 interpret_sw bit (1),
        3 log_path_sw bit (1),
        3 no_header_sw bit (1),
        3 limit_sw bit (1),
        3 process_id_sw bit (1),
        3 data_class_sw bit (1);

dcl 1 ttp_tot (ttx) aligned based (ttp_tot_ptr),
      2 tot_data like ttp_tot_data;
						/* ttp & ansback data */
dcl 1 ttp_tot_data aligned based,			/* above data sorted */
      2 type char(32) varying,
      2 ascnt fixed bin,
      2 ansbks (1000),
        3 ansbk char(4),
        3 login fixed bin(35),
        3 fails fixed bin(35),
        3 connect char(8),
        3 cpu char(6);

dcl 1 temp_as (first_msg_count) aligned based (temp_as_ptr),
      2 ansbs like temporary_ansb;			/* ansback data */
dcl 1 temporary_ansb aligned based,
      2 ansb char (4) varying;			/* above data sorted */

dcl 1 temporary aligned based,			/* terminal data */
      2 name char (22) varying,
      2 ttp char(32),
      2 ansb char(4),
      2 chn char(32),
      2 time fixed bin(71),
      2 logins fixed bin(35),
      2 failed bit (1) aligned,
      2 connect char(8),
      2 cpu char(10);

dcl 1 temp (first_msg_count) aligned based (temp_ptr),
      2 data like temporary;				/* above data sorted */

dcl 1 temp_two (1) aligned based (temp_two_ptr),
      2 text char(128) varying,			/* LOGOUT data */
      2 time fixed bin(71);

dcl 1 temp_thr (index_count) aligned based (ttp),
      2 index fixed bin (35);				/* array of LOGOUT messages already seen and matched */

dcl 1 V aligned based (vptr),
      2 n fixed bin(18),
      2 vector (n) ptr unaligned;
dcl 1 V_two aligned based (vptr_two),
      2 n_two fixed bin(18),
      2 vector_two (n_two) ptr unaligned;
dcl 1 V_thr aligned based (vptr_ansb),
      2 n_thr fixed bin(18),
      2 vector_thr (n_thr) ptr unaligned;

dcl (info_size, audit_record_size, ttx, ttxx, inx, inxx, datax, tot_logi,
          tot_logo) fixed bin;
dcl tot_connect char (8);
dcl tot_cpu char (6);
dcl choosen_name char (22) varying;
dcl looking_for char (32) varying;
dcl CHN char (32);
dcl NAME char (22);
dcl (cods, dpds) char (120) aligned;
dcl (coxx, dpxx) char (4) aligned;
dcl cpu_data char (9);
dcl output_file char (168) varying;
dcl ttype char (32);
dcl (code, index_count) fixed bin (35);
dcl (attached, opened, add_cpus) bit (1);
dcl (failsw, ttp_meters, final_tab, MCH, mtsw, usersw, ttpsw) bit (1) aligned;
dcl TIME fixed bin (71);
dcl len fixed bin (21);
dcl (first_msg_count, ansb_msg_count) fixed bin (35);


/* External entries */

dcl log_read_$open entry (char (*), char (*), ptr, fixed bin (35));
dcl log_read_$close entry (ptr, fixed bin (35));
dcl log_read_$next_message entry (ptr, ptr, fixed bin (35));
dcl log_match_$add_match entry (ptr, char (*));
dcl log_match_$free entry (ptr);
dcl log_match_$test entry (ptr, ptr, char (*) varying) returns (bit (1) aligned);
dcl log_match_$clear_text_strings entry (ptr);
dcl log_limit_scan_ entry (ptr, ptr, bit (1) aligned, ptr);
dcl log_format_time_ entry (fixed bin (71)) returns (char (32) varying);
dcl (ioa_$ioa_switch, ioa_$rsnnl, com_err_) entry options (variable);
dcl cv_dec_check_ entry (char (*), fixed bin (35)) returns (fixed bin (35));
dcl convert_date_to_binary_ entry (char (*), fixed bin (71), fixed bin (35));
dcl system_info_$titles entry (char (*) aligned, char (*) aligned,
          char (*) aligned, char (*) aligned);
dcl sort_items_$varying_char entry (ptr);
dcl (get_temp_segments_, release_temp_segments_) entry (char (*), (*) ptr,
          fixed bin (35));
dcl ssu_$standalone_invocation entry (ptr, char (*), char (*), ptr, entry,
          fixed bin (35));
dcl ssu_$destroy_invocation entry (ptr);
dcl ssu_$abort_line entry options (variable);
dcl ssu_$arg_ptr entry (ptr, fixed bin, ptr, fixed bin (21));
dcl ssu_$arg_list_ptr entry returns (ptr);
dcl ssu_$arg_count entry (ptr, fixed bin);
dcl cu_$arg_list_ptr entry returns (ptr);
dcl iox_$attach_name entry (char (*), ptr, char (*), ptr, fixed bin (35));
dcl iox_$open entry (ptr, fixed bin, bit (*), fixed bin (35));
dcl iox_$detach_iocb entry (ptr, fixed bin (35));
dcl iox_$close entry (ptr, fixed bin (35));


/* Pointers */

dcl (log_read_ptr, temp_as_ptr, temp_ptrs (5), auto_log_read_ptr,
          auto_log_message_ptr, sci_ptr, temp_ptr, temp_two_ptr, ttp_tot_ptr,
          ttp, vptr, vptr_two, vptr_ansb, info_ptr) ptr;
dcl iox_$user_output ptr ext static;


/* conditions */

dcl (out_of_bounds, cleanup) condition;


/* error messages */

dcl (error_table_$no_log_message, error_table_$badopt, error_table_$bad_arg,
          error_table_$inconsistent) fixed bin (35) ext static;

end;
