/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */





/****^  HISTORY COMMENTS:
  1) change(88-12-30,Parisek), approve(88-12-30,MCR8040),
     audit(89-01-04,Farley), install(89-01-17,MR12.3-1005):
     Revise the rc_messages array declaration so the second dimension of the
     array represents the actual count of 11 messages.  The eleventh message
     was added for MR12.2.
                                                   END HISTORY COMMENTS */


/* format: style4,delnl,insnl,indattr,ifthen,dclind10 */
reconfigure:
     proc;

/* This program is the user ring interface the supervisor reconfiguration software.
   The following entries (all of which can be invoked as commands) are provided:

   *	addcpu tag
   *	delcpu tag
   *	addmem tag
   *	delmem tag
   *	addmain first_frame n_frames
   *	delmain first_frame n_frames
   *	rc_force_unlock
   *      addchnl chanid
   *	delchnl chanid

   Last modified (date and reason):

   3/9/76 by S. Webber Initial coding
   6/20/83 by S. Krupp for logical channel reconfiguration (addchnl and delchnl).
*/

/* Automatic */

dcl	tp		   ptr;
dcl	arg		   char (16) var aligned;
dcl	arg2		   char (256) var aligned;
dcl	chan_num		   fixed bin (35);
dcl	chanid		   char (8) aligned;
dcl	switches		   (4) bit (36) aligned;
dcl	lace		   bit (1) aligned;
dcl	first		   fixed bin;
dcl	last		   fixed bin;
dcl	n_frames		   fixed bin;
dcl	n_args		   fixed bin;
dcl	tc		   fixed bin;
dcl	code		   fixed bin (35);
dcl	errtag		   fixed bin (3);
dcl	type		   fixed bin;
dcl	tag		   fixed bin (3);
dcl	1 auto_rci	   aligned like rci;
dcl	i		   fixed bin;


/* Static */

dcl	myname		   (7) char (8) aligned static options (constant)
			   init ("addcpu", "delcpu", "addmem", "delmem", "addmain", "delmain", "unlock");
dcl	my_new_name	   (7) char (16) aligned static options (constant)
			   init ("add cpu", "delete cpu", "add mem", "delete mem", "add page", "delete page", "");

dcl	devtype		   (9) char (4) aligned static options (constant)
			   init ("CPU ", "CPU ", "MEM ", "MEM ", "MAIN", "MAIN", "    ", "    ", "    ");

dcl	TAGS		   (0:7) char (1) aligned static options (constant)
			   init ("A", "B", "C", "D", "E", "F", "G", "H");

/* External */

dcl	cv_dec_check_	   entry (char (*), fixed bin (35)) returns (fixed bin (35));
dcl	rc_messages$rc_messages
			   (0:7, 11) char (64) aligned ext;
dcl	error_table_$wrong_no_of_args
			   fixed bin (35) ext;
dcl	error_table_$bad_arg   fixed bin (35) ext;

/* Builtins */

dcl	(addr, index, mod, null, search, substr, unspec)
			   builtin;

/* Based */

dcl	targ		   char (tc) based (tp);

/* Entries */

dcl	hphcs_$add_cpu	   entry (fixed bin (3), (4) bit (36) aligned, fixed bin (35));
dcl	hphcs_$del_cpu	   entry (fixed bin (3), fixed bin (35));
dcl	hphcs_$add_scu	   entry (fixed bin (3), bit (1) aligned, fixed bin (3), fixed bin (35));
dcl	hphcs_$del_scu	   entry (fixed bin (3), bit (1) aligned, fixed bin (35));
dcl	hphcs_$add_main	   entry (fixed bin, fixed bin, fixed bin (35));
dcl	hphcs_$del_main	   entry (fixed bin, fixed bin, fixed bin (35));
dcl	cu_$arg_ptr	   entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl	cu_$arg_count	   entry (fixed bin, fixed bin (35));
dcl	cv_oct_check_	   entry (char (*), fixed bin (35)) returns (fixed bin);
dcl	com_err_		   entry options (variable);
dcl	hphcs_$reconfig_info   entry (ptr, fixed bin (35));
dcl	hphcs_$rc_force_unlock entry;
dcl	ioa_		   entry options (variable);
dcl	iox_$control	   entry (ptr, char (*), ptr, fixed bin (35));

dcl	iox_$user_output	   ptr ext static;		/*						*/

/*	ADDCPU	ADDCPU	ADDCPU


   This entry assumes and expects a single argument which is the processor tag
   of the processor to be added to the system.

*/

addcpu:
     entry;

	call check_args (1, 8);			/* get argument and reconfig info from ring zero */

	call hphcs_$add_cpu (tag, switches, code);	/* try to add it */
	if code = rcerr_addcpu_bad_switches then do;	/* If config switches in error ... */
	     rswp = addr (switches (2));
	     if dps_rsw_2.fault_base then
		call sw_mess_1 ("Fault Base");
	     if dps_rsw_2.cpu_num ^= 0 then
		call sw_mess_1 ("Processor Number");

	     rswp = addr (switches (4));
	     do i = 0 to 7;
		if i < 4 then
		     pip = addr (addr (switches (1)) -> rsw_1_3.port_info (i));
		else pip = addr (addr (switches (3)) -> rsw_1_3.port_info (i - 4));

		if pi.port_assignment then
		     call sw_mess_2 ("Port Assignment");
		if pi.port_enable then
		     call sw_mess_2 ("Port Enable");
		if pi.interlace_enable | rsw_4.four (i) then
		     call sw_mess_2 ("Interlace");
		if pi.mem_size ^= 0 then
		     call sw_mess_2 ("Size");
		if rsw_4.half (i) then
		     call sw_mess_2 ("Half/Full");
	     end;
	end;

	else if code = rcerr_addcpu_enable then do;
	     unspec (errtag) = switches (1);		/* Get offending SCU tag. */
	     arg2 = TAGS (errtag);
	end;
	if code ^= 0 then
	     call abort (code);			/* wouldn't add, complain */

	call ioa_ ("^a is now running.", arg);
	return;

/**/

/*	DELCPU	DELCPU	DELCPU



   This entry assumes and expects a single argument which is the processor tag of the
   processor to be deleted.

*/

delcpu:
     entry;

	call check_args (2, 8);			/* get argument and reconfig info from ring zero */

	call hphcs_$del_cpu (tag, code);
	if code ^= 0 then
	     call abort (code);			/* couldn't delete it, complain */

	call ioa_ ("Deleted ^a.", arg);
	return;

/**/

/*	ADDMEM	ADDMEM	ADDMEM


   This entry assumes and expects a single argument which is the port number (tag) of the
   system controller to add to the system. All memory attached to the controller is added.
   If parity errors are detected in any frames, those frames are _n_o_t added.


*/

addmem:
     entry;

	call check_args (3, 8);			/* get argument and reconfig info from ring zero */

	call hphcs_$add_scu (tag, lace, errtag, code);
	if code ^= 0 then do;
	     if (code ^= rcerr_addscu_size) & (code ^= rcerr_addscu_manual) then
		arg2 = TAGS (errtag);
	     call abort (code);
	end;

	call print_mem_message ("Added");
	return;



/*	DELMEM	DELMEM	DELMEM


   This entry assumes and expects a single argument which is the port number (tag)
   of the controller to be deleted.

*/

delmem:
     entry;

	call check_args (4, 8);			/* get argument and reconfig info from ring zero */

	call hphcs_$del_scu (tag, lace, code);
	if code ^= 0 then
	     call abort (code);

	call print_mem_message ("Removed");
	return;

/**/

/*	ADDMAIN	ADDMAIN	ADDMAIN


   This entry is called with one or two arguments. The first is the page frame number of
   a block of main memory to be added to the configuration. The second argument is the number
   of contiguous blocks to be added starting with the first. If the second argument is not specified,
   the value 1 is assumed. If the memory is already configured, no complaint is made.

*/

addmain:
     entry;

	call check_args (5, 0);

	call hphcs_$add_main (first, n_frames, code);
	if code ^= 0 then
	     call abort (code);

	call print_main_message ("Added");
	return;




/* 	DELMAIN	DELMAIN	DELMAIN


   This entry is called with one or two arguments. The first is the page frame number of
   a block of main memory to be deleted from the system. The second argument is the number
   of contiguous blocks to be deleted starting with the first. If the second argument is not specified,
   the value 1 is assumed. If the memory is already deleted, no complaint is made.

*/

delmain:
     entry;

	call check_args (6, 0);

	call hphcs_$del_main (first, n_frames, code);
	if code ^= 0 then
	     call abort (code);

	call print_main_message ("Removed");
	return;

/*	FORCE_UNLOCK   	FORCE_UNLOCK   	FORCE_UNLOCK


   This entry is used to forcibly unlock the reconfiguration lock. It is used when
   a reconfiguration request has somehow aborted and left the data bases locked.


*/

force_unlock:
     entry;

	type = 7;
	call hphcs_$reconfig_info (addr (auto_rci), code);
	if code = 0 then
	     call com_err_ (0, myname (type), "Reconfiguration data not locked.");
	else call com_err_ (0, myname (type), "Reconfiguration data locked by ^a", auto_rci.locker_group_id);

	call hphcs_$rc_force_unlock;

	return;

/**/

/*	PRINT_MAIN_MESSAGE	PRINT_MAIN_MESSAGE	PRINT_MAIN_MESSAGE


   This entry is used to print a message about the reconfiguration of the specified
   region of main memory.


*/

print_main_message:
     proc (action);

dcl	action		   char (*);

	if first ^= last then
	     call ioa_ ("^a frames ^o thru ^o.", action, first, last);
	else call ioa_ ("^a frame ^o.", action, first);
	return;

     end;



/*	PRINT_MEM_MESSAGE	PRINT_MEM_MESSAGE	PRINT_MEM_MESSAGE


   This subroutine is used to print a message saying that an SCU and its memory
   have been added or removed from the system. It prints the information for both SCU's if two
   interlaced SCU's were reconfigured.

*/

print_mem_message:
     proc (action);

dcl	action		   char (*);

	if lace then do;
	     tag = tag - mod (tag, 2);
	     call ioa_ ("^a SCU's ^a and ^a (interlaced) and their memory.", action, TAGS (tag), TAGS (tag + 1));
	end;
	else call ioa_ ("^a SCU ^a and its memory.", action, TAGS (tag));
	return;

     end;

/**/

/*	SW_MESS          	SW_MESS          	SW_MESS


   These subroutines are used to interpret configuration switch errors
   when adding a CPU.

*/

sw_mess_1:
     proc (mess);

dcl	mess		   char (*);

	arg2 = arg2 || "
	";
	arg2 = arg2 || mess;

	return;


sw_mess_2:
     entry (mess);

	arg2 = arg2 || "
	";
	arg2 = arg2 || "MEM ";
	arg2 = arg2 || TAGS (i);
	arg2 = arg2 || " ";
	arg2 = arg2 || mess;

	return;

     end;

/**/

/*	CHECK_ARGS	CHECK_ARGS	CHECK_ARGS


   This subroutine is used to pick up the arguments.  It is called with two
   arguments. The first is an integer specifiying which entry to reconfigure was called.
   This may be used later for error message printing. The second argument is the number of values over
   which the command argument may range. For CPU reconfiguration requests it is 4. For controller
   reconfiguration requests it is 8.

*/

check_args:
     proc (t, range);

dcl	t		   fixed bin;
dcl	range		   fixed bin;

	code = 0;
	type = t;
	arg = "";
	arg2 = "";

	call iox_$control (iox_$user_output, "alarm", null (), (0));
						/* try to beep the console */
	call ioa_ ("^a is obsolete.  Use {rcf} ^a instead.", myname (type), my_new_name (type));

	call cu_$arg_count (n_args, code);
	if code ^= 0 then
	     call abort (code);

	if type <= 4 then do;			/* ADDCPU, DELCPU, ADDMEM, and DELMEM */
	     if n_args ^= 1 then
		call abort (error_table_$wrong_no_of_args);
	     call cu_$arg_ptr (1, tp, tc, code);	/* pick up the argument */
	     arg = targ;
	     tag = index (substr ("abcdefgh", 1, range), targ) - 1;
	     if (tag < 0) | (tc ^= 1) then
		call abort (error_table_$bad_arg);
	     arg = devtype (type) || TAGS (tag);
	end;
	else if type <= 6				/* ADDMAIN or DELMAIN */
	then do;
	     if (n_args = 0) | (n_args > 2) then
		call abort (error_table_$wrong_no_of_args);
	     call cu_$arg_ptr (1, tp, tc, code);	/* get port */
	     arg = targ;
	     first = cv_oct_check_ (targ, code);
	     if code ^= 0 then
		call abort (error_table_$bad_arg);
	     if n_args = 2 then do;
		call cu_$arg_ptr (2, tp, tc, code);
		arg = targ;
		n_frames = cv_oct_check_ (targ, code);
		if (code ^= 0) | (n_frames <= 0) then
		     call abort (error_table_$bad_arg);
	     end;
	     else n_frames = 1;

	     arg = devtype (type);
	     last = first + n_frames - 1;
	end;
	else do;
	     if n_args ^= 1 then
		call abort (error_table_$wrong_no_of_args);
	     call cu_$arg_ptr (1, tp, tc, code);
	     if code ^= 0 then
		call abort (code);
	     if ^(tc >= 1 | tc <= 8) then
		call abort (error_table_$bad_arg);
	     if search (targ, "ab") ^= 1 then
		call abort (error_table_$bad_arg);
	     chan_num = cv_dec_check_ (substr (targ, 2), code);
	     if code ^= 0 then
		call abort (code);
	     chanid = targ;
	end;

	return;

     end check_args;

/**/

/* 	ABORT	ABORT	ABORT



   This subroutine is called to report an error from some stage of reconfiguration.
   The input to the routine is

   *	abort_code the parameter

   The abort_code parameter is interpreted differently depending on its value. If it is
   greater than or equal to 7, it indicates a generic problem that can happen with
   all entries. If it is less than 7, it indicates a specific problem with the entry given
   by type.

*/

abort:
     proc (abort_code);

dcl	abort_code	   fixed bin (35);

	if abort_code >= 21 then
	     call com_err_ (abort_code, myname (type), arg);
	else if abort_code >= 11 then
	     call com_err_ (0, myname (type), rc_messages$rc_messages (0, abort_code - 10), arg);
	else call com_err_ (0, myname (type), rc_messages$rc_messages (type, abort_code), arg, arg2);

	goto ERROR;

     end abort;

ERROR:
	return;					/* target of nonlocal goto's */


/**/

%include scs;

/**/

%include rcerr;

%include rci;

/**/

%include rsw;

dcl	pip		   ptr;

dcl	1 pi		   like rsw_1_3.port_info based (pip) unal;

/* BEGIN MESSAGE DOCUMENTATION

   Message:
   Added SCU X and its memory.

   S:	$initializer_io

   T:	$response

   M:	This is the response to a successful addmem X command.

   A:	$ignore


   Message:
   Added SCU's X and Y (interlaced) and their memory.

   S:	$initializer_io

   T:	$response

   M:	This is the response to a successful addmem X command
   when SCU's X and Y have their memories interlaced.

   A:	$ignore


   Message:
   Added frame XXX.

   S:	$initializer_io

   T:	$response

   M:	This is the response to a successful addmain XXX command.

   A:	$ignore


   Message:
   Added frames XXX thru YYY.

   S:	$initializer_io

   T:	$response

   M:	This is the response to a successful addmain XXX N command.

   A:	$ignore


   Message:
   CPU X is now running.

   S:	$initializer_io

   T:	$response

   M:	This is the response to a
   successful addcpu X command.

   A:	$ignore


   Message:
   Deleted CPU X.

   S:	$initializer_io

   T:	$response

   M:	This is the response to a successful delcpu X command.

   A:	$ignore


   Message:
   Removed SCU X and its memory.

   S:	$initializer_io

   T:	$response

   M:	This is the response to a successful delmem X command.

   A:	$ignore


   Message:
   Removed SCU's X and Y (interlaced) and their memory.

   S:	$initializer_io

   T:	$response

   M:	This is the response to a successful delmem X command, when SCU's X and Y are interlaced.

   A:	$ignore


   Message:
   Removed frame XXX.

   S:	$initializer_io

   T:	$response

   M:	This is the response to a successful delmain XXX command.

   A:	$ignore


   Message:
   Removed frames XXX thru YYY.

   S:	$initializer_io

   T:	$response

   M:	This is the response to a successful delmain XXX N command.

   A:	$ignore


   Message:
   addcpu: Associative memories not enabled on CPU X.

   S:	$initializer_io

   T:	$response

   M:	The SDWAM and/or PTWAM on CPU X is not enabled.
   CPU X was not added.

   A:	Set the appropriate associative memory switch on and try addcpu again.


   Message:
   addcpu: CPU X is already online.

   S:	$initializer_io

   T:	$response

   M:	A redundant addcpu X command was issued.
   No action was taken.

   A:	$tryagn


   Message:
   addcpu: CPU X is not configured.

   S:	$initializer_io

   T:	$response

   M:	There is no CPU card for CPU X in the configuration deck.
   The CPU cannot be added.

   A:	If the CPU name was mistyped, enter a corrected command.
   If the configuration deck omitted the CPU card,
   that CPU cannot be added until the system is shut down and the deck corrected.


   Message:
   addcpu: CPU X is not enabled at MEM Y.

   S:	$initializer_io

   T:	$response

   M:	CPU X cannot be added because the PORT ENABLE switch at MEM Y does not enable it.

   A:	Fix the switches and try addcpu again.


   Message:
   addcpu: CPU X is not in Multics mode.

   S:	$initializer_io

   T:	$response

   M:	CPU X cannot be added because its mode switch is wrong.

   A:	Fix the switch and try again.


   Message:
   addcpu: Illegal command or subroutine argument. BLAH

   S:	$initializer_io

   T:	$response

   M:	Invalid input was typed.

   A:	$tryagn


   Message:
   addcpu: Lockup fault trying to start CPU X.

   S:	$initializer_io

   T:	$response

   M:	This happens occasionally. The reason for it is unknown.

   A:	Try addcpu a few more times.


   Message:
   addcpu: No response from CPU X.

   S:	$initializer_io

   T:	$response

   M:	CPU X did not start up when commanded.
   It may be malfunctioning or in STEP.

   A:	Check the switches.
   If any are wrong, correct them and retry addcpu.
   Otherwise, notify Field Engineering.


   Message:
   addcpu: Reconfiguration database is locked.

   S:	$initializer_io

   T:	$response

   M:	Another process is performing reconfiguration currently,
   or a fault during reconfiguration has left the reconfiguration tables locked.

   A:	If it is certain that no other process is reconfiguring,
   and that the fault which interrupted reconfiguration
   has been cured, the reconfigure$force_unlock command may be used to clear the lock
   at the direction of system staff.


   Message:
   addcpu: Startup fault trying to start CPU X.

   S:	$initializer_io

   T:	$response

   M:	This happens sometimes. Nobody knows why.

   A:	Try again a few times.


   Message:
   addcpu: The following switches on CPU X are set incorrectly:
   .br
   Fault Base
   .br
   Processor Number
   .br
   Port Assignment MEM Y
   .br
   Port Enable MEM Y
   .br
   Interlace MEM Y
   .br
   Size MEM Y
   .br
   Half/Full MEM Y

   S:	$initializer_io

   T:	$response

   M:	The listed switches are set incorrectly.

   A:	Correct the switches and try addcpu again.


   Message:
   addcpu: Trouble fault trying to start CPU X.

   S:	$initializer_io

   T:	$response

   M:	This happens sometimes. Nobody knows why.

   A:	Try again a few times.


   Message:
   addcpu: Wrong number of arguments supplied.

   S:	$initializer_io

   T:	$response

   M:	Invalid input was typed.

   A:	$tryagn


   Message:
   addmain: Illegal command or subroutine argument. BLAH

   S:	$initializer_io

   T:	$response

   M:	Invalid input was typed.

   A:	$tryagn


   Message:
   addmain: Reconfiguration database is locked.

   S:	$initializer_io

   T:	$response

   M:	Another process is performing reconfiguration currently,
   or a fault during reconfiguration has left the reconfiguration tables locked.

   A:	If it is certain that no other process is reconfiguring,
   and that the fault which interrupted reconfiguration
   has been cured, the reconfigure$force_unlock command may be used to clear the lock
   at the direction of system staff.


   Message:
   addmain: Request is not within range of a single controller. MAIN XXX

   S:	$initializer_io

   T:	$response

   M:	An addmain command must specify memory completely within the range of a single controller.

   A:	$tryagn


   Message:
   addmain: Wrong number of arguments supplied.

   S:	$initializer_io

   T:	$response

   M:	Invalid input was typed.

   A:	$tryagn


   Message:
   addmem: Illegal command or subroutine argument. BLAH

   S:	$initializer_io

   T:	$response

   M:	Invalid input was typed.

   A:	$tryagn


   Message:
   addmem: MEM Y cannot be accessed by CPU X.

   S:	$initializer_io

   T:	$response

   M:	CPU X is unable to access MEM Y.
   The configuration deck may be incorrect,
   or the CPU and SCU switches may be in the wrong settings.

   A:	Check the switches and make sure that they agree with the configuration deck.
   Then try addmem again.


   Message:
   addmem: MEM Y does not have mask assigned to CPU X.

   S:	$initializer_io

   T:	$response

   M:	The MASK/PORT ASSIGNMENT (4MW SCU)
   or EXECUTE INTERRUPT MASK ASSIGNMENT (6000 SCU)
   switches on SCU Y are incorrect.

   A:	Fix the switches and try addmem again.


   Message:
   addmem: MEM Y has duplicate mask assignments to CPU X.

   S:	$initializer_io

   T:	$response

   M:	The MASK/PORT ASSIGNMENT (4MW SCU)
   or EXECUTE INTERRUPT MASK ASSIGNMENT (6000 SCU)
   switches on SCU Y are incorrect.

   A:	Fix the switches and try addmem again.


   Message:
   addmem: MEM Y has mask Z assigned to non-CPU port.

   S:	$initializer_io

   T:	$response

   M:	The MASK/PORT ASSIGNMENT (4MW SCU)
   or EXECUTE INTERRUPT MASK ASSIGNMENT (6000 SCU)
   switches on SCU Y are incorrect.

   A:	Fix the switches and try addmem again.


   Message:
   addmem: MEM Y is already online.

   S:	$initializer_io

   T:	$response

   M:	An addmem Y command was typed when SCU Y was already online.

   A:	$ignore


   Message:
   addmem: MEM Y is not configured.

   S:	$initializer_io

   T:	$response

   M:	There is no MEM card in the configuration for MEM y.
   The SCU cannot be added.

   A:	If the SCU name was mistyped, enter a corrected command.
   If the configuration deck omitted the MEM card,
   the SCU cannot be added until the system is shut down and the deck corrected.


   Message:
   addmem: MEM Y is not enabled on CPU X.

   S:	$initializer_io

   T:	$response

   M:	The ENABLE switch on the CONFIGURATION panel of CPU X
   does not enable SCU Y.
   The memory cannot be added.

   A:	Fix the switches and try addmem again.


   Message:
   addmem: MEM Y is not in PROGRAM mode.

   S:	$initializer_io

   T:	$response

   M:	The MODE switch on 4MW SCU Y is not in PROGRAM mode.
   The SCU cannot be added.

   A:	Fix the switches and try addmem again.

   A:	$ignore


   Message:
   addmem: Reconfiguration database is locked.

   S:	$initializer_io

   T:	$response

   M:	Another process is performing reconfiguration currently,
   or a fault during reconfiguration has left the reconfiguration tables locked.

   A:	If it is certain that no other process is reconfiguring,
   and that the fault which interrupted reconfiguration
   has been cured, the reconfigure$force_unlock command may be used to clear the lock
   at the direction of system staff.


   Message:
   addmem: Size of MEM Y disagrees with CPU switches.

   S:	$initializer_io

   T:	$response

   M:	The memory size on the configuration card for MEM Y
   disagrees with the size on the CPU switches.

   A:	If the switches are incorrect, fix them and try addmem again.
   If the configuration deck is incorrect,
   the system must be shut down and the deck corrected before the SCU can be added.


   Message:
   addmem: Switches for MEM Y set improperly on CPU X.

   S:	$initializer_io

   T:	$response

   M:	The ADDRESS ASSIGNMENT switches for SCU Y are
   incorrect on CPU X.

   A:	Correct the switches and try addmem again.


   Message:
   addmem: Wrong number of arguments supplied.

   S:	$initializer_io

   T:	$response

   M:	Invalid input was typed.

   A:	$tryagn


   Message:
   delcpu: CPU X is not online.

   S:	$initializer_io

   T:	$response

   M:	A delcpu X command finds that CPU X is already deleted.

   A:	$ignore


   Message:
   delcpu: CPU X is the only CPU.

   S:	$initializer_io

   T:	$response

   M:	A delcpu X command attempted to delete the last CPU.
   No action was taken.

   A:	$ignore


   Message:
   delcpu: Cannot stop CPU X.

   S:	$initializer_io

   T:	$response

   M:	CPU X did not respond to a command to stop within
   the expected time. The CPU may be malfunctioning or in STEP,
   or it may be in a very tight loop.

   A:	Check the CPU panel.
   If the processor appears to be in a loop,
   it may be possible to break it out
   by placing zeros in the processor switches
   and using the EXECUTE button to cause a fault;
   but this action sometimes causes the system to crash,
   depending on where the loop is.


   Message:
   delcpu: Illegal command or subroutine argument. BLAH

   S:	$initializer_io

   T:	$response

   M:	Invalid input was typed.

   A:	$tryagn


   Message:
   delcpu: Reconfiguration database is locked.

   S:	$initializer_io

   T:	$response

   M:	Another process is performing reconfiguration currently,
   or a fault during reconfiguration has left the reconfiguration tables locked.

   A:	If it is certain that no other process is reconfiguring,
   and that the fault which interrupted reconfiguration
   has been cured, the reconfigure$force_unlock command may be used to clear the lock
   at the direction of system staff.


   Message:
   delcpu: Wrong number of arguments supplied.

   S:	$initializer_io

   T:	$response

   M:	Invalid input was typed.

   A:	$tryagn


   Message:
   delmain: Abs wired pages in memory.

   S:	$initializer_io

   T:	$response

   M:	A delmain command attempted to delete a range of pages
   which included some pages which cannot be deleted.
   No action was taken.

   A:	$tryagn


   Message:
   delmain: Illegal command or subroutine argument. BLAH

   S:	$initializer_io

   T:	$response

   M:	Invalid input was typed.

   A:	$tryagn


   Message:
   delmain: Not enough main memory left.

   S:	$initializer_io

   T:	$response

   M:	A delmain command attempted to delete so much memory that the system would be
   unable to function correctly.
   No action was taken.

   A:	$tryagn


   Message:
   delmain: Reconfiguration database is locked.

   S:	$initializer_io

   T:	$response

   M:	Another process is performing reconfiguration currently,
   or a fault during reconfiguration has left the reconfiguration tables locked.

   A:	If it is certain that no other process is reconfiguring,
   and that the fault which interrupted reconfiguration
   has been cured, the reconfigure$force_unlock command may be used to clear the lock
   at the direction of system staff.


   Message:
   delmain: Request is not within range of a single controller. MAIN XXX

   S:	$initializer_io

   T:	$response

   M:	A delmain command must specify a range of pages
   which lies completely within one controller.
   No action was taken.

   A:	$tryagn


   Message:
   delmain: Wrong number of arguments supplied.

   S:	$initializer_io

   T:	$response

   M:	Invalid input was typed.

   A:	$tryagn


   Message:
   delmem: Abs wired pages in MEM Y.

   S:	$initializer_io

   T:	$response

   M:	An attempt was made to delete a memory
   which included some pages which cannot be deleted.
   No action was taken.

   A:	The memory cannot be deleted.


   Message:
   delmem: Illegal command or subroutine argument. BLAH

   S:	$initializer_io

   T:	$response

   M:	Invalid input was typed.

   A:	$tryagn


   Message:
   delmem: MEM Y is not online.

   S:	$initializer_io

   T:	$response

   M:	A delmem Y command was typed but no such memory is in use.

   A:	$ignore


   Message:
   delmem: Not enough main memory to remove MEM Y.

   S:	$initializer_io

   T:	$response

   M:	The system would be unable to function
   correctly if SCU Y and its memory were deleted.
   No action was taken.

   A:	Try something else.


   Message:
   delmem: Reconfiguration database is locked.

   S:	$initializer_io

   T:	$response

   M:	Another process is performing reconfiguration currently,
   or a fault during reconfiguration has left the reconfiguration tables locked.

   A:	If it is certain that no other process is reconfiguring,
   and that the fault which interrupted reconfiguration
   has been cured, the reconfigure$force_unlock command may be used to clear the lock
   at the direction of system staff.


   Message:
   delmem: Wrong number of arguments supplied.

   S:	$initializer_io

   T:	$response

   M:	Invalid input was typed.

   A:	$tryagn


   Message:
   unlock: Reconfiguration data locked by PERSON.PROJ.T

   S:	$initializer_io

   T:	$response

   M:	This message is typed by reconfigure$force_unlock if the reconfiguration data base was locked.

   A:	$ignore


   Message:
   unlock: Reconfiguration data not locked.

   S:	$initializer_io

   T:	$response

   M:	This message is typed by reconfigure$force_unlock if the reconfiguration data base was not locked.

   A:	$ignore


   END MESSAGE DOCUMENTATION */

     end reconfigure;
