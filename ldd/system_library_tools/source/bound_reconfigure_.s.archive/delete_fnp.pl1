/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   *********************************************************** */
/* delete_fnp.pl1 command interface (perhaps interim) to FNP reconfiguration */
/* format: style2 */

delete_fnp:
     procedure options (variable);

	declare cu_$arg_count	 entry (fixed bin, fixed bin (35));
	declare cu_$arg_ptr		 entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
	declare com_err_		 entry () options (variable);
	declare expand_pathname_$add_suffix
				 entry (character (*), character (*), character (*), character (*),
				 fixed binary (35));
	declare get_fnp_name_	 entry (fixed binary) returns (character (32));
	declare multiplexer_mgr_$count_mpx_users
				 entry (character (*), pointer, fixed binary, fixed binary (35));
	declare parse_fnp_name_	 entry (character (*), fixed binary);
	declare pathname_		 entry (character (*), character (*)) returns (character (168));
	declare hphcs_$deconfigure_fnp entry (fixed bin, fixed bin (35));
	declare ioa_		 entry () options (variable);
	declare command_query_$yes_no	 entry () options (variable);
	declare initiate_file_	 entry (character (*), character (*), bit (*), pointer, fixed binary (24),
				 fixed binary (35));
	declare terminate_file_	 entry (pointer, fixed binary (24), bit (*), fixed binary (35));

	declare ap		 ptr;
	declare al		 fixed bin (21);
	declare argument		 char (al) based (ap);
	declare code		 fixed bin (35);
	declare fnp_no		 fixed bin;
	declare argx		 fixed bin;
	declare n_args		 fixed bin;
	declare force		 bit (1) aligned;
	declare test		 bit (1) aligned;
	declare n_users		 fixed bin;
	declare cdt_dir_name	 char (168);
	declare cdt_entryname	 char (32);
	declare query_response	 bit (1) aligned;

	declare error_table_$bad_channel
				 fixed bin (35) ext static;
	declare error_table_$noarg	 fixed bin (35) ext static;
	declare error_table_$too_many_args
				 fixed bin (35) ext static;
	declare error_table_$badopt	 fixed bin (35) ext static;

	declare ME		 char (32) init ("delete_fnp") int static options (constant);
	declare cleanup		 condition;


	call cu_$arg_count (n_args, code);
	if code ^= 0
	then do;
		call com_err_ (code, ME);
		return;
	     end;

	if n_args = 0
	then do;
		call com_err_ (0, ME, "Usage: delete_fnp FNP_TAG {-force} {-test CDT_PATH}");
		return;
	     end;

	force, test = "0"b;
	cdt_dir_name = ">system_control_dir";
	cdt_entryname = "cdt";
	fnp_no = -1;

	do argx = 1 to n_args;
	     call cu_$arg_ptr (argx, ap, al, (0));
	     if index (argument, "-") = 1
	     then do;				/* control argument */
		     if argument = "-force"
		     then force = "1"b;
		     else if argument = "-no_force"
		     then force = "0"b;
		     else if argument = "-test"
		     then do;
			     test = "1"b;
			     if argx = n_args
			     then do;
				     call com_err_ (error_table_$noarg, ME,
					"-test must be followed by a CDT pathname.");
				     return;
				end;
			     argx = argx + 1;
			     call cu_$arg_ptr (argx, ap, al, (0));
			     call expand_pathname_$add_suffix (argument, "cdt", cdt_dir_name, cdt_entryname, code);
			     if code ^= 0
			     then do;
				     call com_err_ (code, ME, "^a.", argument);
				     return;
				end;
			end;
		     else if argument = "-no_test"
		     then do;
			     test = "0"b;
			     cdt_dir_name = ">system_control_dir";
			     cdt_entryname = "cdt";
			end;
		     else do;
			     call com_err_ (error_table_$badopt, ME, "^a.", argument);
			     return;
			end;
		end;
	     else do;
		     if fnp_no > 0			/* already got */
		     then do;
			     call com_err_ (error_table_$too_many_args, ME, "Only one FNP may be specified.");
			     return;
			end;
		     call parse_fnp_name_ (argument, fnp_no);
		     if fnp_no ^> 0
		     then do;
			     call com_err_ (error_table_$bad_channel, ME, "Invalid FNP name ^a.", argument);
			     return;
			end;
		end;				/* FNP Spec */
	end;					/* arg loop */

	cdtp = null ();
	on cleanup
	     begin;
		if cdtp ^= null ()
		then call terminate_file_ (cdtp, (0), TERM_FILE_TERM, (0));
		cdtp = null ();
	     end;

	if ^force
	then do;
		call initiate_file_ (cdt_dir_name, cdt_entryname, R_ACCESS, cdtp, (0), code);
		if code ^= 0
		then do;
			call com_err_ (code, ME,
			     "Could not access ^a to check for users of the FNP. Use -force if you really want to delete it."
			     , pathname_ (cdt_dir_name, cdt_entryname));
			return;
		     end;

		fnpep = addr (cdt.fnp_entry (fnp_no));
		mpxep = addr (fnpe.mpxe);

		if mpxe.state ^= MPX_DOWN & mpxe.state ^= MPX_FREE
						/* might be just running T&D */
		then do;
			call multiplexer_mgr_$count_mpx_users (get_fnp_name_ (fnp_no), cdtp, n_users, code);
			if code ^= 0
			then n_users = 0;		/* something wrong with cdt */
			call command_query_$yes_no (query_response, (0), ME,
			     "Deleting the FNP will crash it and disconnect the users.",
			     "FNP ^a is ^[in an unknown state^;down^;booting^;up^]^[ and has ^d user^[s^]^]. Are you sure that you want to delete it?"
			     , get_fnp_name_ (fnp_no), mpxe.state, n_users > 0, n_users, n_users > 1);
			if ^query_response
			then do;
				call ioa_ ("FNP ^a not deleted.", get_fnp_name_ (fnp_no));
				go to RETURN;
			     end;
		     end;
	     end;
	if test
	then go to RETURN;
	call hphcs_$deconfigure_fnp (fnp_no, code);
	if code = 0
	then call ioa_ ("FNP ^a deleted from configuration.", get_fnp_name_ (fnp_no));
	else call com_err_ (code, ME, "Could not delete FNP ^a from configuration");
RETURN:
	call terminate_file_ (cdtp, (0), TERM_FILE_TERM, (0));

	return;

%include cdt;
%include access_mode_values;
%include terminate_file;
%include author_dcl;
     end delete_fnp;
