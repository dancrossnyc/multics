/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(81-12-16,Texada), approve(), audit(), install():
     fix phx12050 and phx12187
  2) change(82-08-01,Texada), approve(), audit(), install():
     for phx12187, phx13713, phx13662
  3) change(82-11-12,Texada), approve(), audit(), install():
     to implement phx13262
  4) change(82-11-16,Texada), approve(), audit(), install():
     to implement phx14088,  allow preattachment of dump volumes to an
     existing incremental dump.
  5) change(83-01-26,Texada), approve(), audit(), install():
     to support version 2 dmpr_data_ and fix a problem when volumes were
     attached but not opened then crash.
  6) change(83-03-01,Kittlitz), approve(), audit(), install():
     for 256K segments.
  7) change(83-04-05,Texada), approve(), audit(), install():
     add trace entries.
  8) change(83-08-18,Texada), approve(), audit(), install():
     redefine -detach/-no_detach.
  9) change(84-02-01,Texada), approve(), audit(), install():
     support version 3 dmpr_data_.
 10) change(84-03-05,Texada), approve(), audit(), install():
     add set_volume_wakeup_interval.
 11) change(85-11-05,GWMay), approve(85-12-02,MCR7310), audit(85-12-05,Dupuis),
     install(85-12-16,MR12.0-1001):
     modified the routine set_volume_wakeup_interval to allow a wakeup
     interval up to 1440 minutes, this was raised from 480.  To
     accomodate the size of the interval when converted to microseconds,
     the variable my_interval was increased in size.
                                                   END HISTORY COMMENTS */


/* format: style1,ind2,^inddcls,ifthenstmt,dclind2,declareind2,ifthendo,ifthen*/

dumper: proc;

/* This proc provides the command interface for the volume dumper subsystem.  It initializes the static
   data base and other external data bases, attaches to, opens and parses the dump
   control file converting the control file into an ordered array of physical volume names and ids. It then
   successivly dumps this array , volume by volume. */
        

dcl Area		     area based (areap);
dcl tp		     (4) ptr;
dcl dump_control_name    char (32);
dcl was_asleep	     bit (1);			/* if incr dump, is saved value of dmpr_data_.dmpr_asleep, else is "0"b*/
dcl (YES, dmpr_data_already_locked, new_control_seg, trace) bit (1);
dcl mname		     char (21);
dcl (cycle_uid, ignored_lvid) bit (36);
dcl answer	     char (3) var;
dcl (ac, argl, narg, nelemt, idx, num_pv, first_pvx, nvols, tnpv) fixed bin;
dcl control_seg_name     char (32);
dcl (areap, argp)	     ptr;
dcl line		     char (120) aligned;
dcl tlvname	     char (32) aligned;
dcl lvname	     (100) char (32);
dcl pvname	     (100) char (32);
dcl time_string	     char (24);
dcl pvid		     (100) bit (36);
dcl device_type	     (100) fixed bin;
dcl (old_time, time_pass_started) fixed bin (71);		/* Time this pass started. */
dcl (code, ignore)	     fixed bin (35);		/* Error code. */

dcl 1 query_info	     aligned,
    2 version	     fixed bin init (2),
    2 yes		     bit (1) init ("1"b),
    2 name	     bit (1) init ("0"b),
    2 code	     fixed bin (35) init (0),
    2 pad		     fixed bin;

dcl 1 pva		     (100) aligned,
    2 pvname	     char (32),
    2 device_type	     fixed bin,
    2 pvid	     bit (36);


dcl type_char	     (3) char (4) int static init ("incr", "cons", "comp") options (constant);
dcl force_write_bits     bit (36) init ((36)"0"b) int static options (constant); /* write pages in parallel			*/
dcl lock_wait_time	     fixed bin static init (60) options (constant);

dcl arg		     char (argl) based (argp);

dcl iox_$user_io	     ptr external;
dcl error_table_$action_not_performed fixed bin (35) ext static;
dcl error_table_$end_of_info ext fixed bin (35);
dcl error_table_$invalid_lock_reset ext fixed bin (35);
dcl error_table_$inconsistent fixed bin (35) ext static;
dcl error_table_$bad_arg ext fixed bin (35);
dcl error_table_$bad_conversion fixed bin (35) ext static;
dcl error_table_$wrong_no_of_args fixed bin (35) ext static;
dcl command_query_$yes_no entry () options (variable);
dcl cv_dec_check_	     entry (char (*), fixed bin (35)) returns (fixed bin (35));
dcl get_system_free_area_ entry () returns (ptr);
dcl suffixed_name_$make  entry (char (*), char (*), char (*), fixed bin (35));
dcl hcs_$force_write     entry (ptr, bit (36), fixed bin (35));
dcl hcs_$set_256K_switch entry (bit (2) aligned, bit (2) aligned, fixed bin (35));
dcl hcs_$status_minf     entry (char (*), char (*), fixed bin, fixed bin, fixed bin, fixed bin (35));
dcl manage_volume_pool_$set_pool_path entry (entry options (variable), char (*), ptr, fixed bin (35));
dcl com_err_	     entry options (variable);
dcl command_query_	     entry options (variable);
dcl set_lock_$lock	     entry (bit (36) aligned, fixed bin, fixed bin (35));
dcl ipc_$mask_ev_calls   entry (fixed bin (35));
dcl ipc_$unmask_ev_calls entry (fixed bin (35));
dcl ioa_$rsnnl	     entry options (variable);
dcl cu_$arg_count	     entry (fixed bin);
dcl cu_$arg_ptr	     entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl hcs_$make_seg	     entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35));
dcl get_wdir_	     entry returns (char (168) aligned);
dcl mdc_$check_mounted   entry (char (*) aligned, fixed bin (35));
dcl add_epilogue_handler_ entry (entry, fixed bin (35));
dcl iox_$control	     entry (ptr, char (*), ptr, fixed bin (35));
dcl purge_volume_log_    entry (char (*) aligned, char (*) aligned, fixed bin, bit (1), fixed bin (35));
dcl hc_backup_$init_dmpr entry (ptr, ptr, fixed bin (35));
dcl dmpr_output_$init    entry (fixed bin (35));
dcl dmpr_output_$end_pass_detach entry (fixed bin (35));
dcl dmpr_output_$preattach_vols entry (fixed bin, fixed bin, fixed bin (35));
dcl dmpr_output_$preattach_ioname entry (fixed bin, fixed bin, fixed bin (35));
dcl get_temp_segments_   entry (char (*), (*) ptr, fixed bin (35));
dcl dump_volume_	     entry (fixed bin (35));
dcl dmpr_info_	     entry (fixed bin (35));
dcl dmpr_arg_reader_     entry (ptr, fixed bin (35));
dcl dmpr_finish_	     entry (fixed bin (35));
dcl timer_manager_$alarm_wakeup entry (fixed bin (71), bit (2), fixed bin (71));
dcl timer_manager_$get_schedule entry (ptr, ptr, fixed bin (35));
dcl timer_manager_$reset_alarm_wakeup entry (fixed bin (71));
dcl mdc_$lvname_info     entry (char (*) aligned, ptr, fixed bin, fixed bin (35));
dcl mdc_$pvname_info     entry (char (*), bit (36), char (*), bit (36), fixed bin, fixed bin (35));
dcl date_time_	     entry (fixed bin (71), char (*));
dcl cu_$arg_list_ptr     entry (ptr);			/* Arg list location */
dcl iox_$attach_ioname   entry (char (*), ptr, char (*), fixed bin (35));
dcl iox_$position	     entry (ptr, fixed bin, fixed bin, fixed bin (35));
dcl iox_$open	     entry (ptr, fixed bin, bit (36), fixed bin (35));
dcl iox_$get_line	     entry (ptr, ptr, fixed bin, fixed bin, fixed bin (35));
dcl ipc_$create_ev_chn   entry (fixed bin (71), fixed bin (35));
dcl ipc_$decl_ev_call_chn entry (fixed bin (71), entry, ptr, fixed bin, fixed bin (35));
dcl (dmpr_report_$error_output, dmpr_report_$online_output) entry options (variable);

dcl (cleanup, finish)    condition;


dcl (after, before, bit, rtrim, addr, clock, fixed, hbound, length, null, substr, verify) builtin;

incremental_volume_dump: entry;

    call init (incr, "incremental_volume_dumper");
    go to start;					/* Go get arguments. */

consolidated_volume_dump: entry;

    call init (cons, "consolidated_volume_dump");
    go to start;					/* Go get arguments. */

complete_volume_dump: entry;				/* Entry to do complete volume dump */

    call init (comp, "complete_volume_dump");

start:
    dmpr_data_.old_256K_switch = ""b;
    call add_epilogue_handler_ (end_volume_dump, code);
    if code ^= 0 then
         call dmpr_report_$error_output (code, dmpr_data_.myname, "Unable to set epilogue handler");
    on cleanup call dmpr_finish_ (ignore);
    on finish call dmpr_finish_ (ignore);
    call cu_$arg_list_ptr (argp);			/* get arg list ptr */
    call dmpr_arg_reader_ (argp, code);			/* Get any other arguments */
    if code ^= 0 then goto finale;

    call hcs_$set_256K_switch ("11"b, dmpr_data_.old_256K_switch, code);
    if code ^= 0 then do;
        call dmpr_report_$error_output (code, dmpr_data_.myname, "Could not enable 256KW segments.");
        goto finale;
      end;
    dmpr_data_.arg_init = "1"b;
    if (dmpr_data_.dump_type = incr) & (dmpr_data_.detach) & (dmpr_data_.pre_attach_vol ^= 0) then do;
        call dmpr_report_$error_output (error_table_$inconsistent, dmpr_data_.myname,
	"The -detach and -preattach control arguments are mutually exclusive");
        goto finale;
      end;

    if dmpr_data_.control_name = "" | dmpr_data_.operator = "" then do;
        code = error_table_$bad_arg;			/* Must have dump control file and operator */
        call dmpr_report_$error_output (code, dmpr_data_.myname, "Missing control file or operator name");
        goto finale;
      end;
    if dmpr_data_.auto_vol then do;
        call manage_volume_pool_$set_pool_path (dmpr_report_$error_output,
	rtrim (dmpr_data_.sys_dir) || ">Volume_Dumper", dmpr_data_.vpp, code);
						/* set the pool path to the standard one */
        if code ^= 0 then do;
	  call dmpr_report_$online_output (code, dmpr_data_.myname, "Unable to locate volume pool");
	  goto finale;
	end;

      end;
						/* setup temp segs */
    call get_temp_segments_ ("dumper", tp, code);
    if code ^= 0 then do;
        call dmpr_report_$error_output (code, dmpr_data_.myname, "Temp seg init failure");
        goto finale;
      end;
						/* initialize static ptrs */
    dmpr_data_.dirp = tp (1);
    dmpr_data_.inputp = tp (2);
    dmpr_data_.recordp = tp (3);
    dmpr_data_.infop = tp (4);
						/* initialize info seg  - per dump info */
    call dmpr_info_ (code);
    if code ^= 0 then do;
        call dmpr_report_$error_output (code, dmpr_data_.myname, "Error initing info seg ");
        goto finale;
      end;
						/* attach and open control file */
    call iox_$attach_ioname ("dump_control", dmpr_data_.control_iocbp, "vfile_ " || dmpr_data_.control_name, code);
    if code ^= 0 then do;
        call dmpr_report_$error_output (code,
	dmpr_data_.myname, "Unable to attach to ^a",
	dmpr_data_.control_name);
        goto finale;
      end;
    call iox_$open (dmpr_data_.control_iocbp, 1, "0"b, code);
    if code ^= 0 then do;				/* Was an error encountered? */
        call dmpr_report_$error_output (code, dmpr_data_.myname, "Open error on ^a", dmpr_data_.control_name);
        goto finale;				/* Quit. */
      end;
    if dmpr_data_.dump_type = incr then do;		/* Is this an incremental volume dump? */
        call ipc_$create_ev_chn (dmpr_data_.incr_ev_chn, code); /* Create an event channel. */
        if code ^= 0 then do;
	  call dmpr_report_$error_output (code, dmpr_data_.myname, "Error creating event channel");
	  goto finale;
	end;					/* Make channel into call channel. */
        call ipc_$decl_ev_call_chn (dmpr_data_.incr_ev_chn, restart_volume_dump, null, 1, code);
        if code ^= 0 then do;				/* OK? */
	  call dmpr_report_$error_output (code, dmpr_data_.myname, "Error make event call channel");
	  goto finale;				/* Give up. */
	end;
      end;
						/* initialize ring 0 part of dumper */
    call hc_backup_$init_dmpr (dmpr_data_.dirp, dmpr_data_.segp, code);
    if code ^= 0 then do;
        call dmpr_report_$error_output (code, dmpr_data_.myname, "Ring 0 dmpr init failure");
        goto finale;
      end;
    call dmpr_output_$init (code);
    if code ^= 0 then do;
        if code ^= -1 then				/* this code says that an attach/open failed	*/
	   call dmpr_report_$error_output (code, dmpr_data_.myname, "Output volume init failure");
        goto finale;
      end;
						/* init input structure to ring 0 */
    inputp = dmpr_data_.inputp;
    dmpr_input.version = dmpr_input_version_1;
    dmpr_input.type = dmpr_data_.dump_type;
    dmpr_input.reset = dmpr_data_.reset;
    dmpr_input.no_update = dmpr_data_.no_update;
    dmpr_input.no_object = dmpr_data_.no_object;
    dmpr_input.mod_after_time = dmpr_data_.mod_after_time;
    dmpr_data_.dump_in_progress = "1"b;			/* Set flag to prevent recursion. */
    go to over;					/* Start dump pass. */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

wakeup_volume_dump: entry;				/* Enter here on  operator wakeup. */
    if dmprp = null then do;
no_dump: call com_err_ (0, "wakeup_volume_dump", "No dump to wakeup");
        return;
      end;
    dmpr_data_.myname = "wakeup_volume_dump";

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


restart_volume_dump: entry;				/* Enter here on alarm wakeup */

    if dmprp = null then do;
        call com_err_ (0, "restart_volume_dump", "no dump to restart");
        return;
      end;
    if dmpr_data_.dump_in_progress then do;		/* Is a dump pass being done now? */
        call dmpr_report_$online_output (0, dmpr_data_.myname,
	"Dump pass presently in progress; this call ignored.");
        return;
      end;

    call timer_manager_$reset_alarm_wakeup (dmpr_data_.incr_ev_chn);
    dmpr_data_.dump_in_progress = "1"b;			/* Set flag. */
    dmpr_data_.dmpr_asleep = "0"b;
    new_control_seg = "0"b;
    dmpr_data_already_locked = "0"b;
    call dmpr_report_$online_output (0, dmpr_data_.myname, "Dumper waking up at ^a", time_now_ ());

over:
    time_pass_started = clock;
						/* position to front of control file */
    call iox_$position (dmpr_data_.control_iocbp, -1, 0, code);
    if code ^= 0 then do;				/* OK? */
        call dmpr_report_$error_output (code, dmpr_data_.myname, "Error positioning on ^a",
	dmpr_data_.control_name);
        goto finale;				/* Give up. */
      end;
						/* initialize local variables */
    num_pv = 0;
    lvname (*) = "";
    pvname (*) = "";
    pvid (*) = "0"b;
    device_type (*) = 0;


/* This loop converts each line of the control file into a set(possibly one) of physical volume names and ids
   and stores the entire result in a local array of 100 entries. This is a limit on the number of online
   physical volumes that can be dumped by any one volume dumper. */

read_line:
    line = "";
    call iox_$get_line (dmpr_data_.control_iocbp, addr (line), length (line), nelemt, code);
    if code ^= 0 then do;
        if code = error_table_$end_of_info then goto begin_vol_dump;
        else do;
	  call dmpr_report_$error_output (code,
	    dmpr_data_.myname, "error reading ^a",
	    dmpr_data_.control_name);
	  goto finale;				/* Give up. */
	end;
      end;

    line = substr (line, 1, nelemt - 1);		/* strip off new line at end */
    if before (line, ",") = "lv" then do;
        tlvname = after (line, ",");
        call mdc_$lvname_info (tlvname, addr (pva), tnpv, code);
        if code ^= 0 then do;
	  call dmpr_report_$error_output (code, dmpr_data_.myname, "Unable to convert ^a to physical volumes",
	    tlvname);
	  goto read_line;
	end;
        do idx = 1 to tnpv;
	lvname (num_pv + idx) = tlvname;
	pvname (num_pv + idx) = pva (idx).pvname;
	pvid (num_pv + idx) = pva (idx).pvid;
	device_type (num_pv + idx) = pva (idx).device_type;
        end;
        num_pv = num_pv + tnpv;
      end;
    else if before (line, ",") = "pv" then do;
        num_pv = num_pv + 1;
        pvname (num_pv) = after (line, ",");
        call mdc_$pvname_info (pvname (num_pv), pvid (num_pv), lvname (num_pv), ignored_lvid,
	device_type (num_pv), code);
        if code ^= 0 then do;
	  call dmpr_report_$error_output (code, dmpr_data_.myname, "Unable to convert ^a to pvid",
	    pvname (num_pv));
	  num_pv = num_pv - 1;
	  goto read_line;
	end;
      end;
    else call dmpr_report_$error_output (0, dmpr_data_.myname, "Unrecognized line ^a", line);
    goto read_line;


/* This loop dumps each volid specified in the just constructed array. If we are in restart mode,
   then we skip over all volumes until a match is found and start from there. If not we start with the first volume
   in the list. In either case we process(dumped) each volume in turn reporting when we start and when we end
   and what we did. */

begin_vol_dump:
    inputp = dmpr_data_.inputp;
    first_pvx = 1;
    if dmpr_data_.restart_pvname = "" /* no restart specified */
      & ^new_control_seg
      & ^was_asleep
      & (dmpr_data_already_locked | (dmpr_data_.pvname ^= pvname (num_pv))) then do;
        if dmpr_data_already_locked then do;
	  dmpr_data_.restart_pvname = dmpr_data_.pvname;
	  call dmpr_report_$online_output (0, dmpr_data_.myname, "Restarting with physical volume ^a.",
	    dmpr_data_.restart_pvname);
	end;
        else if dmpr_data_.dump_type ^= incr then do;	/* it must be cons or comp */
	  call command_query_ (addr (query_info), answer, dmpr_data_.myname, "^/^a",
	    "Previous dump cycle may not have completed. Do you want to restart ? ");
	  if answer = "yes" then
	       dmpr_data_.restart_pvname = dmpr_data_.pvname;
	end;
      end;
    if dmpr_data_.restart_pvname ^= "" then do;
        if dmpr_data_.dump_type = incr then
	   dmpr_data_.cycle_uid = substr (bit (clock, 72), 20, 36);
        do idx = 1 to num_pv while (pvname (idx) ^= dmpr_data_.restart_pvname);
        end;
        if idx > num_pv then do;
	  call dmpr_report_$error_output (0, dmpr_data_.myname,
	    "No match of restart pvname ^a in control seg",
	    dmpr_data_.restart_pvname);
	  goto finale;
	end;
        first_pvx = idx;
      end;
    else dmpr_data_.cycle_uid = substr (bit (clock, 72), 20, 36);


    do idx = first_pvx to num_pv;
      dmpr_data_.pvid = pvid (idx);
      dmpr_data_.lvname = lvname (idx);
      dmpr_data_.pvname = pvname (idx);
      call mdc_$check_mounted (dmpr_data_.lvname, code);
      if code ^= 0 then do;
	call dmpr_report_$online_output (code, dmpr_data_.myname,
	  "Skipping logical volume ^a", dmpr_data_.lvname);
	do while (lvname (idx) = dmpr_data_.lvname);
	  idx = idx + 1;
	end;
	idx = idx - 1;
        end;
      else do;
	dmpr_data_.disk_type = device_type (idx);	/* set for the volume log			*/
	call hcs_$force_write (dmprp, force_write_bits, ignore);
						/* save changed dmpr_data_			*/
	if (dmpr_data_.dump_type = cons) | (dmpr_data_.dump_type = comp) then call dmpr_report_$online_output (0,
	       dmpr_data_.myname, "Begin dump of physical volume ^a", dmpr_data_.pvname);
	call dump_volume_ (code);
	if code = 0 then do;
	    call dmpr_report_$online_output (0, dmpr_data_.myname,
	      "Processed ^a: ^d ^d ^d ^d ^d",
	      dmpr_data_.pvname,
	      dmpr_data_.physical_volume_dir_rec, dmpr_data_.physical_volume_dir_num,
	      dmpr_data_.physical_volume_seg_rec, dmpr_data_.physical_volume_seg_num,
	      dmpr_data_.num_null_vtoce);


	    if dmpr_input.no_object then
	         call dmpr_report_$online_output (0, dmpr_data_.myname,
		 "Dumped ^d non null vtoces and ^d null vtoces",
		 dmpr_data_.num_vtoce_only, dmpr_data_.num_null_vtoce);

/* If this is a complete dump or the purge flag is on, then purge the volume log. This will release those dump
   volumes that have been superseeded by this dump */


	    if (dmpr_data_.dump_type = cons & dmpr_data_.incr_skip_count ^= -1)
	      | dmpr_data_.dump_type = comp then do;
	        call purge_volume_log_ (dmpr_data_.sys_dir, dmpr_data_.pvname, dmpr_data_.incr_skip_count,
		dmpr_data_.manual_free & dmpr_data_.auto_vol, code);
	        if code ^= 0 then
		   call dmpr_report_$error_output (code, dmpr_data_.myname, "Unable to purge volume log ^a",
		     dmpr_data_.pvname);
	      end;
	  end;
	else if code = -1 then goto finale;		/* Operator abort				*/
	else do;
	    call dmpr_report_$error_output (code, dmpr_data_.myname,
	      "Error dumping volume ^a", dmpr_data_.pvname);
	  end;
        end;
    end;


    dmpr_data_.restart_pvname = "";			/* only do it once */

    call dmpr_report_$online_output (0, dmpr_data_.myname, "Dump finished at ^a", time_now_ ());

/* If an incremental dump then setup alarm clock for wakeup */
    if dmpr_data_.dump_type = incr then do;
        call iox_$control (dmpr_data_.outputvol_iocbp, "error_count", addr (ignore), ignore);
        if dmpr_data_.detach then call dmpr_output_$end_pass_detach (ignore);
						/* detach if we are supposed too.		*/
        call timer_manager_$alarm_wakeup (time_pass_started + dmpr_data_.wakeup_interval, "00"b,
	dmpr_data_.incr_ev_chn);
        call dmpr_report_$online_output (0, dmpr_data_.myname, "Dumper going to sleep");
        call iox_$control (iox_$user_io, "start", null, code);
        if code ^= 0 then				/* OK? */
	   call dmpr_report_$error_output (code, dmpr_data_.myname, "iox_$control on user_i/o");
        dmpr_data_.dump_in_progress = ""b;		/* Indicate dump no longer active. */
        dmpr_data_.dmpr_asleep = "1"b;
        dmpr_data_.myname = "incremental_volume_dumper";	/* could have been invoked as wakeup_volume_dumper*/
        call hcs_$force_write (dmprp, force_write_bits, ignore);
						/* TRY and get it written now			*/

        return;					/* all done for this pass */
      end;
    goto finale;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


end_volume_dump: entry;				/* Finish up dumping. */

    if dmprp = null then do;				/* tell him there is no dump			*/
        call com_err_ (0, "end_volume_dump", "No dump to end.");
        return;
      end;
    dmpr_data_.myname = "end_volume_dump";
    dmpr_data_.dump_in_progress = "1"b;			/* let dmpr_finish_ turn it off		*/
    dmpr_data_.disable_error_report = "1"b;
    dmpr_data_.detach = "1"b;				/* detach output volume when finished */
finale:
    call dmpr_finish_ (ignore);
finale_nocleanup:
    return;					/* terminate processing */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

preattach_dump_volumes: entry;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*									*/
/* Allow a running incremental dump to add volumes (just like the -preattach control	*/
/* argument), without having to do an end_volume_dump and starting over.		*/
/*									*/
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

dcl announce_vols	     (nvols) char (32) based (addr (dmpr_data_.pre_attach_volname (dmpr_data_.pre_attach_vol + 1)));


    call ipc_$mask_ev_calls (code);			/* mask so we can do our work			*/
    if code ^= 0 then do;
        call com_err_ (code, "preattach_dump_volumes", "Unable to mask event calls, no preattachment performed.");
        return;
      end;

    if dmprp = null then do;				/* no funny stuff...			*/
        call com_err_ (0, "preattach_dump_volumes",
	"No dump in progress, use the ""-preattach"" control argument to the incremental_volume_dump command.");
        goto UNMASK_EV;
      end;

    if dmpr_data_.dump_type ^= incr then do;
        call com_err_ (0, "preattach_dump_volumes", "This command is only valid for incremental volume dumps.");
        goto UNMASK_EV;
      end;

    call cu_$arg_count (narg);
    if narg ^= 1 then do;
        call com_err_ (error_table_$wrong_no_of_args, "preattach_dump_volumes",
	"Usage is: preattach_dump_volumes no_of_volumes");
        goto UNMASK_EV;
      end;
    if dmpr_data_.detach then do;			/* ok, let's ask him if we should turn off this	*/
        call command_query_$yes_no (YES, 0, "preattach_dump_volumes",
	"In the invocation of the incremental_volume_dump command, -detach was specified.
This is used to detach  volumes after each pass of the dumper.  A ""yes"" answer will
turn this feature ""off"". A ""no"" answer will abort the preattachment of these volumes.",
	"Do you wish to turn off the effect of the -detach control argument (type ""?"" for an explaination).");
        if YES then dmpr_data_.detach = ""b;
        else goto UNMASK_EV;
      end;

    call cu_$arg_ptr (1, argp, argl, code);
    if verify (arg, "0123456789") = 0 then do;		/* only numbers fellas			*/
        nvols = fixed (arg, 17, 0);			/* now, be sure we don't have too many		*/

        if nvols = 0 then do;
	  call com_err_ (0, "preattach_dump_volumes", "The number of volumes must be greater than zero.");
	  goto UNMASK_EV;
	end;


        if ((dmpr_data_.pre_attach_vol + nvols) > hbound (dmpr_data_.pre_attach_volname, 1) |
	(hbound (dmpr_data_.pre_attach_volname, 1) - (nvols + dmpr_data_.pre_attach_vol) < 0)) then do;
	  call com_err_ (error_table_$action_not_performed, "preattach_dump_volumes",
	    "Too many volumes to preattach. Space available for ^d more.",
	    (hbound (dmpr_data_.pre_attach_volname, 1) - dmpr_data_.pre_attach_vol));
	  goto UNMASK_EV;
	end;
      end;
    else do;

        call com_err_ (error_table_$bad_conversion, "preattach_dump_volumes", "^a", arg);
        goto UNMASK_EV;
      end;

    on cleanup begin;
        code = 0;
        do while (code = 0);
	call ipc_$unmask_ev_calls (code);
        end;
      end;

    call dmpr_output_$preattach_vols (nvols, (dmpr_data_.pre_attach_vol + nvols) - (nvols - 1), code);
						/* get the volume names from the user or the pool */
    if code ^= 0 then goto UNMASK_EV;
    call dmpr_report_$online_output (0, "preattach_dump_volumes", "Please get the following volume^[s^]: ^v(^a ^)",
						/* announce which volumes to get		*/
      (nvols > 1), nvols, announce_vols (*));

    call dmpr_output_$preattach_ioname (nvols, (dmpr_data_.pre_attach_vol + nvols) - (nvols - 1), code);
						/* do the attach				*/
    if code = 0 then dmpr_data_.pre_attach_vol = dmpr_data_.pre_attach_vol + nvols;
UNMASK_EV:
    code = 0;
    do while (code = 0);
      call ipc_$unmask_ev_calls (code);
    end;
    return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


set_volume_wakeup_interval: entry;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*									*/
/* This entry allows the changing of the wakeup interval for a running incremental dump.	*/
/*									*/
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

dcl i				fixed bin (35),
    my_interval			fixed bin (71);

    call ipc_$mask_ev_calls (code);
    if code ^= 0 then do;
        call com_err_ (code, "set_volume_wakeup_interval", "Unable to mask event calls, interval not changed.");
        return;
      end;
    areap, schedule_ptr = null ();
    areap = get_system_free_area_ ();
    on cleanup begin;
        if schedule_ptr ^= null () then free schedule in (Area);
        code = 0;
        do while (code = 0);
	call ipc_$unmask_ev_calls (code);
        end;
      end;
    if dmprp = null then do;
        call com_err_ (0, "set_volume_wakeup_interval", "No dump in progress.");
        goto UNMASK_EV;
      end;
    if dmpr_data_.dump_type ^= incr then do;
        call com_err_ (0, "set_volume_wakeup_interval", "This command is valid only for incremental volume dumps.");
        goto UNMASK_EV;
      end;
    call cu_$arg_count (narg);
    if narg ^= 1 then do;
        call com_err_ (error_table_$wrong_no_of_args, "set_volume_wakeup_interval",
	"Usage is: set_volume_wakeup_interval no_of_minutes");
        goto UNMASK_EV;
      end;
    call cu_$arg_ptr (1, argp, argl, code);
    if code ^= 0 then do;
        call com_err_ (code, "set_volume_wakeup_interval");
        goto UNMASK_EV;
      end;
    my_interval = cv_dec_check_ (arg, code);
    if code ^= 0 then do;
badint: call com_err_ (0, "set_volume_wakeup_interval", "The interval must be in minutes (1 to 1440).");
        goto UNMASK_EV;
      end;
    if (my_interval < 1) | (my_interval > 1440) then goto badint;
						/* make sure it's in the range		*/
    my_interval = my_interval * 60000000;		/* make it microseconds			*/
    call timer_manager_$get_schedule (areap, schedule_ptr, code);
    if code ^= 0 then do;
        call com_err_ (code, "set_volume_wakeup_interval", "Getting the event schedule.");
        goto UNMASK_EV;
      end;
    do i = 1 to schedule.n_timers;			/* now, find the right event channel		*/
      if schedule.timer (i).channel = dmpr_data_.incr_ev_chn then do;
						/* here it is				*/
	old_time = (schedule.timer (i).time - dmpr_data_.wakeup_interval);
						/* this was the *base* time for the wakeup	*/
	call timer_manager_$reset_alarm_wakeup (dmpr_data_.incr_ev_chn);
						/* reset the *old* one			*/
	dmpr_data_.wakeup_interval = my_interval;	/* set the new one				*/
	call timer_manager_$alarm_wakeup (old_time + dmpr_data_.wakeup_interval, "00"b,
	  dmpr_data_.incr_ev_chn);			/* and set the new wakeup			*/
	call hcs_$force_write (dmprp, force_write_bits, ignore);
						/* and get it written			*/
	free schedule in (Area);			/* be clean				*/
	goto UNMASK_EV;				/* let 'er rip				*/
        end;
    end;
    call com_err_ (0, "set_volume_wakeup_interval", "Unable to find the interval timer, no action performed.");
    free schedule in (Area);
    goto UNMASK_EV;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

volume_dump_trace_on: entry;

    trace = "1"b;					/* turn on tracing...			*/
    mname = "volume_dump_trace_on";
    goto trace_join;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

volume_dump_trace_off: entry ();
    mname = "volume_dump_trace_off";
    trace = "0"b;

trace_join:
    if dmprp = null () then				/* no dump to trace yet...			*/
         call com_err_ (0, mname, "No dump in progress.");
    else do;
        call cu_$arg_count (narg);
        if narg > 0 then call com_err_ (error_table_$wrong_no_of_args, mname,
	     "This command accepts no arguments.");
        else if dmpr_data_.trace = trace then call com_err_ (error_table_$action_not_performed, mname,
	     "Tracing is already in the state requested, ^[on^;^off^]", trace);
        else dmpr_data_.trace = trace;
      end;
    return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


init: proc (type, myname);

dcl type		     fixed bin;
dcl myname	     char (*);
dcl (volname, pvname, prev_volname) char (32);
dcl (dir_rec, dir_num, seg_num, seg_rec) fixed bin;

/* This proc initializes the dumper's external static data base */

    call cu_$arg_count (narg);
    if narg < 2 then do;
        call dmpr_report_$error_output (error_table_$bad_arg, myname, "Required control args not specified");
        goto finale;
      end;
    if dmprp ^= null () then do;
        call com_err_ (0, myname, "Recursive invocations of the dumper are not allowed.^[^/Use end_volume_dump first.^]",
	type = incr);
        goto finale_nocleanup;
      end;
    do ac = 1 to narg;
      call cu_$arg_ptr (ac, argp, argl, code);
      if arg = "-control" then do;
	call cu_$arg_ptr (ac + 1, argp, argl, code);
	if code ^= 0 then do;
	    call dmpr_report_$error_output (code, myname,
	      "No control segment specified after -control.");
	    goto finale;
	  end;
	call suffixed_name_$make (arg, "dump", dump_control_name, code);
	if code ^= 0 then do;
	    call dmpr_report_$online_output (code, myname,
	      "Unable to create dump control seg name from ^a", arg);
	    goto finale;
	  end;
	call hcs_$status_minf (get_wdir_ (), dump_control_name, 0, (0), (0), code);
	if code ^= 0 then do;
	    call dmpr_report_$online_output (code, myname, "Unable to locate ^a>^a",
	      get_wdir_ (), dump_control_name);
	    goto finale;
	  end;
	call ioa_$rsnnl ("^a.^a.^a", control_seg_name, (0), arg, type_char (type), "control");
	call hcs_$make_seg (get_wdir_ (), control_seg_name, "", 01010b, dmprp, code);
	if code = 0 then do;			/* new control seg */
new_control:  call dmpr_report_$online_output (0, myname, "^/Creating new control seg ^a>^a",
	      get_wdir_ (), control_seg_name);
	    new_control_seg = "1"b;
	    dmpr_data_.version = dmpr_data_version_2;
	    prev_volname, volname, pvname = "";
	    cycle_uid = substr (bit (clock, 72), 20, 36);
	    dir_rec, dir_num, seg_rec, seg_num = 0;
	    call lock_dmpr_data;
	  end;
	else if dmprp ^= null then do;		/* already existed */
	    new_control_seg = "0"b;
	    if dmpr_data_.version ^= dmpr_data_version_3 then do;
	        if dmpr_data_.version = dmpr_data_version_2 then do;
		  dmpr_data_.version = dmpr_data_version_3;
		  dmpr_data_.disk_type = 0;		/* totally invisible			*/
		end;
	        else do;
		  call dmpr_report_$online_output (0, myname, "Invalid control seg found");
		  goto new_control;
		end;
	      end;
	    call lock_dmpr_data;
	    if (dmpr_data_.not_reported & dmpr_data_.cur_vol_open) then
						/* do only if the volume was opened.		*/
	         call dmpr_report_$online_output (0, myname,
		 "Finished volume ^a: ^d ^d ^d ^d", dmpr_data_.volname,
		 dmpr_data_.dump_volume_dir_rec, dmpr_data_.dump_volume_dir_num,
		 dmpr_data_.dump_volume_seg_rec,
		 dmpr_data_.dump_volume_seg_num);
	    cycle_uid = dmpr_data_.cycle_uid;
	    if dmpr_data_.cur_vol_open then do;		/* if it was opened successfully		*/
	        volname = dmpr_data_.volname;
	        prev_volname = dmpr_data_.volname;
	      end;
	    else do;				/* nope, use the previous one			*/
	        volname = dmpr_data_.prev_volname;
	        prev_volname = dmpr_data_.prev_volname;
	      end;
	    pvname = dmpr_data_.pvname;
	    dir_rec = dmpr_data_.physical_volume_dir_rec;
	    dir_num = dmpr_data_.physical_volume_dir_num;
	    seg_rec = dmpr_data_.physical_volume_seg_rec;
	    seg_num = dmpr_data_.physical_volume_seg_num;
	  end;
	else do;					/* couldn't create it, so punt */
	    call dmpr_report_$online_output (code, myname, "Unable to initialize control seg");
	    goto finale;
	  end;
        end;
    end;
    if dmprp = null then do;
        call dmpr_report_$online_output (0, myname,
	"Control seg initialization failed - control seg not specified.");
        goto finale;
      end;
    dmpr_data_.ptrs = null;
    if type = incr then was_asleep = dmpr_data_.dmpr_asleep;
    else was_asleep = "0"b;				/* save or set for restart processing		*/
    dmpr_data_.bits = "0"b;
    dmpr_data_.fixed_bin = 0;
    dmpr_data_.disk_type = 0;
    dmpr_data_.chars = "";
    if type = incr then dmpr_data_.detach = "0"b;		/* default for incrs			*/
    else dmpr_data_.detach = "1"b;
    dmpr_data_.cycle_uid = cycle_uid;
    dmpr_data_.wakeup_interval = 3600000000;		/* Default, one hour (in micro seconds) */
    dmpr_data_.data_init = "1"b;
    dmpr_data_.incr_skip_count = -1;
    dmpr_data_.pre_attach_vol = 0;
    dmpr_data_.dump_type = type;
    dmpr_data_.sys_dir = ">daemon_dir_dir>volume_backup";
    dmpr_data_.myname = myname;
    dmpr_data_.pvname = pvname;
    dmpr_data_.volname = volname;
    dmpr_data_.prev_volname = prev_volname;
    dmpr_data_.physical_volume_dir_rec = dir_rec;
    dmpr_data_.physical_volume_dir_num = dir_num;
    dmpr_data_.physical_volume_seg_rec = seg_rec;
    dmpr_data_.physical_volume_seg_num = seg_num;
    code = 0;
  end init;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


time_now_: proc returns (char (6));

/* This proc returns a time string suitable for printing of the present time */

    call date_time_ (clock, time_string);
    return (substr (time_string, 11, 6));
  end time_now_;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


lock_dmpr_data: proc;
    call set_lock_$lock (dmpr_data_.lock, lock_wait_time, code);
    if code ^= 0 then do;
        if code = error_table_$invalid_lock_reset then do;
	  code = 0;
	  dmpr_data_already_locked = "1"b;
	end;
        else do;
	  if dmpr_data_.dump_in_progress then do;
	      call dmpr_report_$online_output (0, dmpr_data_.myname,
	        "Dump pass presently in progress; this call ignored");
	      goto finale_nocleanup;
	    end;
	  else if dmpr_data_.dmpr_asleep then do;
	      call dmpr_report_$online_output (0, dmpr_data_.myname, "Dumper asleep. Use wakeup_volume_dump");
	      goto finale_nocleanup;
	    end;
	  else do;
	      call dmpr_report_$online_output (code, dmpr_data_.myname,
	        "Dumper invoked recursively. Use end_volume_dump");
	      goto finale_nocleanup;
	    end;
	end;
      end;
    else dmpr_data_already_locked = "0"b;
  end lock_dmpr_data;

%include dmpr_data_;

%include dmpr_input;
%include backup_static_variables;

%include backup_volume_header;

%include timer_manager_schedule;


  end dumper;
