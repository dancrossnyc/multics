/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/****^  HISTORY COMMENTS:
  1) change(85-12-04,GWMay), approve(), audit(), install():
     old history comments -
     Written: In antiquity, probably by Dave Vinograd.
     Modified: April 1983 by GA Texada for -trace -no_trace.
     Modified: May 1983 by GA Texada to add -preattach.
     Modified: August 1983 by GA Texada to redefine -detach & -no_detach.
  2) change(85-12-04,GWMay), approve(85-12-04,MCR7310), audit(85-12-05,Dupuis),
     install(85-12-16,MR12.0-1001):
     Modified wakeup interval to allow a maximum of 1440 minutes. It
     previously allowed 480 minutes.
  3) change(89-08-31,GWMay), approve(89-10-03,MCR8135),
     audit(89-10-04,Beattie), install(89-10-10,MR12.3-1089):
     Disabled the -incr_skip_count argument.  Used the value
     dmpr_data_.incr_skip_count as a switch for a new control argument set.
     Added -purge_volume_log, -pvl, -no_purge_volume_log, -npvl arguments.
                                                   END HISTORY COMMENTS */

/* format: style1,ind2,^inddcls,ifthenstmt,dclind2,declareind2,ifthendo,ifthen*/

dmpr_arg_reader_: proc (a_alp, a_code);

/* This routine reads and handles the arguments
   *   for the volume dumper.
   *
   *  Usage:  dcl dmpr_arg_reader_ entry ( pointer, fixed bin (35));
   *
   *	call dmpr_arg_reader_ (a_alp, a_code);
   *
   *	where
   *
   *
   *	1) a_alp		is a pointer to the argument list (Input).
   *
   *	2) a_code		is a standard status code (Output).
   *
*/

dcl (ac, al)	     fixed bin;
dcl pre_attach_vol	     fixed bin;
dcl (a_code, code)	     fixed bin (35);
dcl (a_alp, alp, ap)     ptr;
dcl arg		     char (al) based (ap);
dcl myname	     char (16) int static init ("dmpr_arg_reader_") options (constant);

dcl error_table_$bad_arg ext fixed bin (35);
dcl error_table_$noarg   ext fixed bin (35);
dcl error_table_$badopt  ext fixed bin (35);

dcl get_wdir_	     entry returns (char (168));
dcl suffixed_name_$make  entry (char (*), char (*), char (*) aligned, fixed bin (35));
dcl dmpr_report_$error_output entry options (variable);
dcl convert_date_to_binary_ entry (char (*), fixed bin (71), fixed bin (35));
dcl cu_$arg_ptr_rel	     entry (fixed bin, ptr, fixed bin, fixed bin (35), ptr);
dcl cv_dec_check_	     entry (char (*), fixed bin (35)) returns (fixed bin);

dcl hbound	     builtin;

    a_code = 0;					/* set up and copy args */
    alp = a_alp;					/* arg list pointer */
    do ac = 1 by 1;					/* scan the arg list */
      call cu_$arg_ptr_rel (ac, ap, al, code, alp);
      if code ^= 0 then
	 if code = error_table_$noarg then return;
	 else go to err;				/* error if code other than noargs */
      if arg = "-control" then do;
	call suffixed_name_$make (get_arg (), "dump", dmpr_data_.control_name, code);
	if code ^= 0 then goto bad_arg;
        end;
      else if arg = "-operator" then
	 dmpr_data_.operator = get_arg ();
      else if arg = "-output_volume_desc" then		/* this must be attach description  */
	 dmpr_data_.att_desc = get_arg ();
      else if arg = "-wakeup" then do;			/* this must be wakeup interval in minutes */
	dmpr_data_.wakeup_interval = cv_dec_check_ (get_arg (), code);
	if code ^= 0 then do;
bad_intr:	    call dmpr_report_$error_output (0, myname, "Invalid interval ^a specified", arg);
	    goto bad_arg;
	  end;
	if dmpr_data_.wakeup_interval < 1 | dmpr_data_.wakeup_interval > 1440 then goto bad_intr;
	dmpr_data_.wakeup_interval = dmpr_data_.wakeup_interval * 60000000;
						/* interval converted to microseconds */
        end;
      else if arg = "-restart" then			/* restart at pvname given */
	 dmpr_data_.restart_pvname = get_arg ();
      else if arg = "-mod_after" then do;
	call convert_date_to_binary_ (get_arg (), dmpr_data_.mod_after_time, code);
	if code ^= 0 then do;
	    call dmpr_report_$error_output (0, myname, "Invalid time ^a specified",
	      arg);
	    goto bad_arg;
	  end;
        end;
      else if arg = "-incr_skip_count" then do;
	  call dmpr_report_$error_output (error_table_$bad_arg, myname, "
The -incr_skip_count function has been replaced by -purge_volume_log.", arg);
	  goto bad_arg;
	  end;
      else if arg = "-purge_volume_log" | arg = "-pvl" then
	  dmpr_data_.incr_skip_count = 0; /* use the old value as a switch */
      else if arg = "-no_purge_volume_log" | arg = "-npvl" then
	  dmpr_data_.incr_skip_count = -1; /* use the old value as a switch */
      else if arg = "-pre_attach" | arg = "-preattach" then do;
	pre_attach_vol = cv_dec_check_ (get_arg (), code);
	if code ^= 0 then do;
bad_mv:	    call dmpr_report_$error_output (0, myname,
	      "Invalid preattach vol number ^a specified", arg);
	    goto bad_arg;
	  end;
	if pre_attach_vol > hbound (dmpr_data_.pre_attach_volname, 1) then goto bad_mv;
	dmpr_data_.pre_attach_vol = pre_attach_vol;
        end;
      else if arg = "-working_dir" | arg = "-wd" then
	 dmpr_data_.sys_dir = get_wdir_ ();
      else if arg = "-accounting" then dmpr_data_.accounting = "1"b;
      else if arg = "-auto" then dmpr_data_.auto_vol = "1"b;/* enable auto volume selection */
      else if arg = "-error_on" then dmpr_data_.err_online = "1"b; /* output errors online */
      else if arg = "-names" then dmpr_data_.names = "1"b;	/* collect all names */
      else if arg = "-detach" then do;			/* only valid for incrementals		*/
	 if dmpr_data_.dump_type ^= incr then goto bad_arg;
	 dmpr_data_.detach = "1"b;
	 end;
      else if arg = "-no_detach" then do;		/* only for incr's				*/
	 if dmpr_data_.dump_type ^= incr then goto bad_arg;
	 dmpr_data_.detach = ""b; /* don't detach */
	 end;
      else if arg = "-no_object" then dmpr_data_.no_object = "1"b; /* don't activate object */
      else if arg = "-cumulative" then dmpr_data_.reset = "1"b; /* reset bit map. */
      else if arg = "-manual_free" then dmpr_data_.manual_free = "1"b;
      else if arg = "-no_update" then dmpr_data_.no_update = "1"b; /* don't modify vtoce */
      else if arg = "-trace" then dmpr_data_.trace = "1"b;
      else if arg = "-no_trace" then dmpr_data_.trace = "0"b;
      else do;
	code = error_table_$badopt;
	goto err;
        end;
    end;

bad_arg: code = error_table_$bad_arg;
err: call dmpr_report_$error_output (code, myname, "^a", arg);
    a_code = code;					/* return an error code */
    return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


get_arg: proc returns (char (*));
    ac = ac + 1;
    call cu_$arg_ptr_rel (ac, ap, al, code, alp);
    if code ^= 0 then goto err;

    return (arg);
  end get_arg;

%include dmpr_data_;

%include backup_static_variables;
%include backup_volume_header;
  end dmpr_arg_reader_;
