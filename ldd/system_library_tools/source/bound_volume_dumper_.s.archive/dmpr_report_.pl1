/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */

dmpr_report_: proc;

/* This routine is used by the volume dumper to report and log error and status
   messages. It is modled after the system routine com_err_. When called for the first time in a volume dumper
   invocation, it creates, in the working directory, an error file, in which it logs all error and status messages.
   If requested it also writes error message on the stream error_output. */

dcl  code fixed bin (35);
dcl  a_code fixed bin (35);
dcl  tstring char (24);
dcl  uname char (32);
dcl  caller char (*);
dcl  message char (*);
dcl  argp ptr;
dcl  error_iocbp ptr;
dcl  ret_string char (256);
dcl  len fixed bin;
dcl  error_output bit (1);
dcl  short char (8) ;
dcl  long char (100) ;

dcl  iox_$error_output ptr ext;
dcl  type_char (3) char (4) int static init ("incr", "cons", "comp") options (constant);
dcl  myname char (32) static int init ("dmpr_report_") options (constant);

dcl  date_time_ entry (fixed bin (71), char (*));
dcl  cu_$arg_list_ptr entry (ptr);
dcl  ioa_$general_rs entry (ptr, fixed bin, fixed bin, char (*), fixed bin, bit (1) aligned, bit (1) aligned);
dcl  ioa_$rsnnl entry options (variable);
dcl  iox_$attach_ioname entry (char (*), ptr, char (*), fixed bin (35));
dcl  iox_$open entry (ptr, fixed bin, bit (36), fixed bin (35));
dcl  convert_status_code_ entry (fixed bin (35), char (*), char (*));
dcl  ioa_$ioa_switch entry options (variable);
dcl  dmpr_report_$online_output entry options (variable);

dcl  null builtin;
dcl  clock builtin;

%include dmpr_data_;
%include backup_volume_header;

	return;					/* never should be call here */

error_output: entry (a_code, caller, message);

/* If an error file is not attached then fabricate a name with a data/time stamp, attach and open it. If
   successsful then report via online mechanism. */

	if dmprp = null then do;
	     error_output = "0"b;
	     goto common;
	end;
	if dmpr_data_.disable_error_report then return;
	error_output = "1"b;
	if dmpr_data_.error_iocbp = null then do;

	     call date_time_ (clock (), tstring);
	     uname = "dmpr_err." || type_char (dmpr_data_.dump_type) || "." || substr (tstring, 1, 8)||"."|| substr (tstring, 11, 4);
	     call iox_$attach_ioname ("error_file", error_iocbp, "vfile_ " || uname, code);
	     if code ^= 0 then do;
		call dmpr_report_$online_output (code, myname, "Unable to attach error file");
		return;
	     end;
	     call iox_$open (error_iocbp, 2, ""b, code);
	     if code ^= 0 then do;
		call dmpr_report_$online_output (code, myname, "Error opening error file");
		return;
	     end;
	     dmpr_data_.error_iocbp = error_iocbp;
	     call dmpr_report_$online_output (0, myname, "Error file ^a created", uname);
	end;

common:
						/* If given a non-zero code convert to a message */
	short, long = "";
	if a_code ^= 0 then
	     call convert_status_code_ (a_code, short, long);
						/* pick up arg list ptr */
	call cu_$arg_list_ptr (argp);
						/* convert args to message */
	call ioa_$general_rs (argp, 3, 4, ret_string, len, "0"b, "0"b);
	call date_time_ (clock (), tstring);

	if error_output then			/* write to file if specified */
	     call write_message (dmpr_data_.error_iocbp, "1"b);

/* Write online if requested, if args not initialized yet, or if correct entry */

	if dmprp = null then
	     call write_message (iox_$error_output, "0"b);

	else if (error_output & dmpr_data_.err_online) | ^error_output | ^dmpr_data_.arg_init then
	     call write_message (iox_$error_output, "0"b);

	return;

online_output: entry (a_code, caller, message);

	error_output = "0"b;
	goto common;


write_message: proc (P_iocbp, P_include_time);

dcl (P_iocbp pointer,
     P_include_time bit (1) aligned) parameter;

	     call ioa_$ioa_switch (P_iocbp, "^[^a^2x^;^s^]^a:^x^a^[:^x^a^;^s^]",
		P_include_time, substr (tstring, 11, 4),
		caller, substr (ret_string, 1, len),
		(a_code ^= 0), long);
	end write_message;

     end dmpr_report_;
