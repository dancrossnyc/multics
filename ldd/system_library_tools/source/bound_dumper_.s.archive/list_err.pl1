/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


list_err:       proc;
/*  This program will scan the error file and list, by user within group  */
/*  which programs MULTICS was not able to access for backup purposes.    */



dcl erfil char(32);
dcl argptr ptr;
dcl arglen fixed bin;
dcl arg_string char (arglen) based (argptr);


/*  ios_declarations  */

dcl ios_$attach           entry (char(*), char(*), char(*), char(*), bit(72) aligned);
dcl hcs_$status_          entry (char(*), char(*), fixed bin(1), ptr, ptr, fixed bin(35));
dcl 1 branch aligned,
      (2 type bit(2),
       2 nnames bit (16),
       2 nrp bit (18),
       2 dtm bit (36),
       2 dtu bit (36),
       2 mode bit (5),
       2 pad1 bit (13),
       2 records bit (18)) unaligned;


dcl ioa_                  entry options (variable);
dcl date_time_$fstime     entry (bit(36), char(*));
dcl ios_$read             entry (char(*), ptr, fixed bin, fixed bin, fixed bin, bit(72) aligned);
dcl ioa_$ioa_stream       entry options (variable);
dcl ios_$detach           entry (char(*), char(*), char(*), bit(72) aligned);
dcl hcs_$status_minf      entry (char(*), char(*), fixed bin(1), fixed bin(2), fixed bin(24), fixed bin(35));
dcl com_err_              entry options (variable);
dcl get_wdir_             entry returns (char(168));

dcl cu_$arg_ptr           entry (fixed bin, ptr, fixed bin, fixed bin(35));
dcl expand_path_          entry (ptr, fixed bin(17), ptr, ptr, fixed bin(35));
dcl cu_$arg_count         entry (fixed bin);


/*  data items  */

dcl (tproj, tname, name_hold) char (32) varying,
    chase fixed bin(1),
    (eptr, nreap) ptr,
    string char(24),


nargs fixed bin,

    (tprog, namep) char(168),
    dirctp char(168) aligned,

     real_proj char (tp_len) based (addr (tproj)),
     real_name char (tn_len) based (addr (tname)),
    (tp_len, tn_len, tleng, str_len, entree) fixed bin (8),
    (msg_start, msg_end, msg_length, line_len) fixed bin (8),
    (scode, code) fixed bin (35),
          fulpath char(168),
     sp_line char (120),
    (die, ab) fixed bin (1),
    (bufptr, pnamep, dirp, enamep) ptr,
     nl char (1) aligned static init ("
"),
     nareap fixed bin (24),
     pnamel fixed bin (17),
     working_dir char (168),
    (stch1, stch2, stch3) fixed bin,			/* used to segment the input line */
     EOF bit (1),					/* end of file indicator          */
     chstr char (4) aligned,				/* check for a normal line        */
     outstr char (168) aligned init ("OUT"),
     error_table_$noentry external fixed bin (35),
     error_table_$no_dir  external fixed bin (35),
    (tmesg, tpath) char (168),
    (status, ostatus) bit (72) aligned,			/* did the read or write go OK? */
     nelemt fixed bin (17),				/* number of elements read in     */
    (temp1, temp2, temp3) char (100),			/* line segmentation areas        */
     lin char (400) aligned;				/* input line                     */


/*  built in functions  */

dcl (addr, init, null, before, fixed, length, index, substr) builtin;


/*  I/O status bits  */

dcl 1 sbits aligned based (addr (status)),
    (2 code bit (36),
    2 pad bit (9),
    2 eof bit (1),					/* end of file bit                */
    2 pd2 bit (29)) unal;

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                                                           */
/*  Initialize the end-of-file switch to zero.  Check the number of arguments passed.  If this number is     */
/*  greater or less than one, the wrong no. of arguments have been passed to this program.  In this case     */
/*  an error message is sent and the program suicides.                                                       */
/*									                   */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */



setup:
	name_hold = "";
          EOF = "0"b;
          call cu_$arg_count (nargs);
          if nargs ^= 1 then do;
               call ioa_ ("list_err:  Wrong number of arguments.");
               return;
          end;
          call cu_$arg_ptr (1, argptr, arglen, code);
          erfil = arg_string;




/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                                                           */
/*  Set up the parameters for a call to expand_path_:  a ptr to the path name, the path name length,         */
/*  a ptr to a place to put the expanded directory name, and a ptr to a place to put the expanded entry name.*/
/*  Set up the buffer ptr for ios_$read, set off the "strange_line" switch and blank out the temporary       */
/*  storage areas for the message and the path name.                                                         */
/*							                                       */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */



          pnamep = addr (erfil);
          pnamel = length (erfil);
	dirp = addr (dirctp);
	enamep = addr (namep);
	bufptr = addr (lin);
	ab = 0;
	tmesg = " ";
	tpath = " ";
          erfil = before (erfil, " ");
          fulpath = (">udd>SysDaemon>error_file>"||erfil);
          fulpath = before (fulpath, " ");




/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                                                           */
/*  Attempt to expand the path name of the erfil to an absolute path name.  If the attempt fails, a request  */
/*  is sent to the user to check the path name and try again and the program suicides.                       */
/*                                                                                                           */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

          call expand_path_ (pnamep, pnamel, dirp, enamep, code);
          if code ^= 0 then do;
               call com_err_ (code, "list_err", "Error in input file name.");
               return;
          end;

          fulpath = (before (dirctp, " ")||">"||erfil);





/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                                                           */
/*  Using the absolute path name, attempt to attach a stream in order to read the erfil.  If the attach fails*/
/*  then the processing cannot continue and the program suicides, issuing the appropriate message.           */
/*                                                                                                           */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */




          call ios_$attach ("my_input", "file_", fulpath, "r", status);
	if sbits.code ^= "0"b then do;
	     code = fixed (sbits.code);
               call com_err_ (code, "list_err", "Attach failed.");
	     go to suicide;
	end;







/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                                                           */
/*  THIS IS THE START OF THE MAIN LOOP WHICH CYCLES THROUGH THE ERFIL, PROCESSING ONE ENTRY AT A TIME.       */
/*                                                                                                           */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */



          do while (EOF = "0"b);





/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                                                           */
/*  Blank out the buffer which holds the input line and read a new input line into it.  If there was an      */
/*  error in the read, put out an IO error message and try the next one.  Otherwise pick up the line length  */
/*  from the nelemt parameter of ios_$read.                                                                  */
/*                                                                                                           */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */



read:          lin = " ";
               call ios_$read ("my_input", bufptr, 0, 168, nelemt, status);
               EOF = sbits.eof;
               if sbits.code ^= "0"b & EOF = "0"b then do;
                    code = fixed (sbits.code);
                    call com_err_ (code, "list_err", "IO error.  Please retry.");
                    go to suicide;
               end;
               line_len = nelemt;




/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                                                           */
/*  Divide the input line into the message and the path name.  If the message is Entry not found, ignore     */
/*  this particular line and go to get the next one.  If there is a different message, save it in tmesg then */
/*  pick up the path name and save it in tpath.                                                              */
/*                                                                                                           */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */



line_div:      entree = index (lin, "Entry not found.");
               if entree = 0 then do;
                    msg_start = index (lin, ":");
                    msg_end = index (lin, ">");
                    if msg_start ^= 0 then do;
                         msg_length = (msg_end - msg_start) -3;
                         tmesg = substr (lin, (msg_start + 2), msg_length);
                         tpath = substr (lin, msg_end, (line_len - msg_end));
                    end;





/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                                                           */
/*  Check the directory for the standard user_dir_dir.  If this is some other directory, then we don't       */
/*  know what to do with it and the whole line will be written unparsed into a segment called strange line.  */
/*  If, however this is a user_dir_dir directory, we will pick out the user and the project names and put    */
/*  them in tname and tproj respectively.                                                                    */
/*                                                                                                           */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */



                    chstr = substr (tpath, 2, 4);
                    if chstr = "user" then do;
norm:                    tleng = length (tpath);
                         temp1 = substr (tpath, 15, (tleng - 14));
                         stch1 = index (temp1, ">");
		     if stch1 = 0 then do;
			stch1 = index (temp1, " ");
			tproj = substr (temp1, 1, (stch1-1));
			tname = "no_userid";
		     end;
		     else do;
                         tproj = substr (temp1, 1, (stch1 - 1));
                         str_len = length (temp1);
                         temp2 = substr (temp1, (stch1 + 1), (str_len - (stch1 + 1)));
                         stch2 = index (temp2, ">");
                         if stch2 = 0 then stch2 = index (temp2, " ");
                         tname = substr (temp2, 1, (stch2 - 1));
		     end;
                    end;
                    else do;
                         tname = "strange";
                         tproj = "line";
                         ab = 1;
                    end;












/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                                                           */
/*  If the current name is different from the previous one, detach the stream of the current                 */
/*  output segment.  Pick up the length of the new name and project and adjust the size of the               */
/*  name and project variables accordingly.                                                                  */
/*                                                                                                           */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */



		if tname ^= name_hold then do;
old_seg:                 call ios_$detach ("outstr", "", "", ostatus);
new_seg:		     tp_len = index (tproj, " ");






/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                                                           */
/*  Attempt to attach a stream for processing this segment.  If the attach is successful, see if this        */
/*  segment is being attached for the first time.  If it is a new segment, output as the first line, a       */
/*  header explaining that the system was unable to backup the segment.  If this is an old segment, bypass   */
/*  header output.  If the attempt to attach failed, go to get the next erfil entry for processing.          */
/*                                                                                                           */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */



                                    working_dir = ">udd>SysDaemon>error_file";
                                    call hcs_$status_minf (working_dir, ("EF."||tname||"."||tproj), 1b, 01b,
                                         nareap, scode);
                                    if scode = error_table_$no_dir then do;
                                         call com_err_ (scode, "list_err", "No directory >udd>SysDaemon>error_file.");
                                         return;
                                    end;
                                    call ios_$attach
                                     ("outstr", "file_", (">udd>SysDaemon>error_file>"||"EF."||tname||"."
                                      ||tproj), "w", status);
                                    if sbits.code ^= "0"b then do;
                                         call com_err_ (ostatus, "list_err", "Attach failed ^a ^a", tname, tproj);
                                         return;
                                    end;
                         if ab ^= 1 then do;
                              nreap = null;
                              chase = 0;
                              eptr = addr(branch);
                              call hcs_$status_ (">udd>SysDaemon>error_file", erfil, chase, eptr, nreap, code);

                              call date_time_$fstime (branch.dtm, string);
                              call ioa_$ioa_stream
                          ("outstr", "The system was unable to access these entries for backup at ^a.", string);
                     end; 
                    end; 






/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                                                           */
/*  Set up an output buffer containing the full line in case it is needed.  If the strange line switch is on */
/*  output the full line in the segment called strange^line.  Otherwise, output the name, proj, message and  */
/*  path name in that order.  Set off the strange line switch.  Store the current name in name_hold for      */
/*  comparison with the next name picked up in tname.                                                        */
/*                                                                                                           */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */



line_out: 	sp_line = substr (lin, 1, 120);
		if ab = 1 then call ioa_$ioa_stream ("outstr", sp_line);
                    else call ioa_$ioa_stream ("outstr", "^a^x^a", tmesg, tpath);
                    ab = 0;
                    name_hold = tname;







/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                                                           */
/*  THIS IS THE END OF THE MAIN LOOP.                                                                        */
/*                                                                                                           */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */



	     end;





/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                                                           */
/*  Clear all the work areas in preparation for the next line to be processed.                               */ 
/*                                                                                                           */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */



re_init:       temp1 = " ";
	     temp2 = " ";
	     temp3 = " ";
	     tprog = " ";
	     tname = " ";
	     tproj = " ";
	     tmesg = " ";
	     tpath = " ";
	     sbits.eof = "0"b;
	end;





/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                                                           */
/*  Make sure that both the input and the output streams are detached before quitting and then quit.         */
/*                                                                                                           */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */



cleanup:  call ios_$detach ("my_input", "", "", status);
          call ios_$detach ("outstr", "", "", ostatus);
suicide:  end;
