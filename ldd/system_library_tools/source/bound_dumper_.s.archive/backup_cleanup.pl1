/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


backup_cleanup: bc: proc;

/* Command to dprint and delete backup maps and error files.

   Usage:
	backup_cleanup {starnames} {-no_dprint}

   If no starnames are specified, *.*.map and *.*.ef in the working directory
   are processed. If -no_dprint is specified, the segments are deleted.
   Otherwise they are dprinted and deleted.

Written 04/26/79 S. Herbst */



%include dprint_arg;

dcl 1 entries (branch_count) aligned based (entries_ptr),	/* for hcs_$star_ */
     2 type bit (2) unaligned,
     2 nnames bit (16) unaligned,
     2 nindex bit (18) unaligned;

dcl names (99) char (32) aligned based (names_ptr);	/* for hcs_$star_ */

dcl area area based (area_ptr);

dcl arg char (arg_len) based (arg_ptr);
dcl ERROR_FILE_DIR char (168) int static options (constant) init (">udd>SysDaemon>error_file");
dcl dn char (168);
dcl (en, name) char (32);

dcl (dprint_sw, ef_sw, path_sw) bit (1) aligned;

dcl (area_ptr, arg_ptr, entries_ptr, names_ptr) ptr;

dcl rings (3) fixed bin (5);
dcl (arg_count, arg_len, branch_count, i, j, queue_number) fixed bin;

dcl code fixed bin (35);
dcl error_table_$badopt fixed bin (35) ext;
dcl error_table_$noentry fixed bin (35) ext;
dcl error_table_$nomatch fixed bin (35) ext;

dcl bk_ss_$myname char (16) ext;

dcl adjust_bit_count_ entry (char (168) aligned, char (32) aligned, bit (1) aligned,
	fixed bin (24), fixed bin (35));
dcl check_star_name_$entry entry (char (*), fixed bin (35));
dcl com_err_ entry options (variable);
dcl copy_seg_ entry (char (*), char (*), char (*), char (*), char (*), bit (1) aligned, fixed bin (35));
dcl cu_$arg_count entry (fixed bin);
dcl cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl cu_$level_get entry returns (fixed bin);
dcl cv_dec_check_ entry (char (*), fixed bin (35)) returns (fixed bin);
dcl dprint_ entry (char (*), char (*), ptr, fixed bin (35));
dcl expand_pathname_ entry (char (*), char (*), char (*), fixed bin (35));
dcl get_system_free_area_ entry returns (ptr);
dcl get_wdir_ entry returns (char (168));
dcl hcs_$delentry_file entry (char (*), char (*), fixed bin (35));
dcl hcs_$set_ring_brackets entry (char (*), char (*), (3) fixed bin (5), fixed bin (35));
dcl hcs_$star_ entry (char (*), char (*), fixed bin (2), ptr, fixed bin, ptr, ptr, fixed bin (35));
dcl hcs_$status_minf entry (char (*), char (*), fixed bin (1), fixed bin (2), fixed bin (24), fixed bin (35));

dcl (addr, fixed, length, max, null, rtrim, substr) builtin;

dcl cleanup condition;
/**/
	bk_ss_$myname = "backup_cleanup";

	call cu_$arg_count (arg_count);

	dprint_sw = "1"b;
	path_sw = "0"b;
	queue_number = 1;

	do i = 1 to arg_count;
	     call cu_$arg_ptr (i, arg_ptr, arg_len, code);
	     if substr (arg, 1, 1) = "-" then
		if arg = "-no_dprint" | arg = "-ndp" then dprint_sw = "0"b;
		else if arg = "-dprint" | arg = "-dp" then dprint_sw = "1"b;
		else if arg = "-queue" | arg = "-q" then do;
		     i = i + 1;
		     if i > arg_count then do;
			call com_err_ (0, "backup_cleanup", "No value specified for ^a", arg);
			return;
		     end;
		     call cu_$arg_ptr (i, arg_ptr, arg_len, code);
		     queue_number = cv_dec_check_ (arg, code);
		     if code ^= 0 then do;
BAD_QUEUE:		call com_err_ (0, "backup_cleanup", "Invalid queue number ^a", arg);
			return;
		     end;
		     else if queue_number < 1 | queue_number > 4 then go to BAD_QUEUE;
		end;
		else do;
		     call com_err_ (error_table_$badopt, "backup_cleanup", "^a", arg);
		     return;
		end;
	     else path_sw = "1"b;
	end;

	area_ptr = get_system_free_area_ ();

	if dprint_sw then do;
	     dpap = addr (dprint_arg_buf);
	     dprint_arg.version = 1;
	     dprint_arg.copies = 1;
	     dprint_arg.delete = 1;
	     dprint_arg.queue = queue_number;
	     dprint_arg.pt_pch = 1;
	     dprint_arg.notify = 0;
	     dprint_arg.output_module = 1;
	     dprint_arg.dest = "SysDaemon";
	end;

	if ^path_sw then do;			/* no starnames specified */

	     call do_starname (get_wdir_ (), "*.*.map");

	     call do_starname (get_wdir_ (), "*.*.*.ef");
	end;

	else do i = 1 to arg_count;

	     call cu_$arg_ptr (i, arg_ptr, arg_len, code);
	     if substr (arg, 1, 1) ^= "-" then do;

		call expand_pathname_ (arg, dn, en, code);
		if code ^= 0 then do;
		     call com_err_ (code, "backup_cleanup", "^a", arg);
		     return;
		end;

		if substr (arg, arg_len - 3, 4) = ".map" | substr (arg, arg_len - 2, 3) = ".ef" then

		     call do_starname (dn, en);

		else do;

		     call do_starname (dn, rtrim (en) || ".map");

		     call do_starname (dn, rtrim (en) || ".ef");
		end;
	     end;
	end;

	return;
/**/
do_starname: proc (a_dn, a_en);

dcl (a_dn, a_en) char (*);

	call check_star_name_$entry (a_en, code);

	if code = 0 then do;
	     branch_count, j = 1;
	     name = a_en;
	     go to ONE_FILE;
	end;

	else if code = 1 | code = 2 then do;

	     entries_ptr, names_ptr = null;

	     on condition (cleanup) call clean_up;

	     call hcs_$star_ (a_dn, a_en, 2 /* branches */, area_ptr, branch_count,
		entries_ptr, names_ptr, code);
	     if code ^= 0 then do;
		if code ^= error_table_$nomatch then
		     call com_err_ (code, "backup_cleanup", "^a^[>^]^a", a_dn, a_dn ^= ">", a_en);
		return;
	     end;

	     do j = 1 to branch_count;

		name = names (fixed (entries (j).nindex, 18));

ONE_FILE:		if substr (a_en, length (rtrim (a_en)) - 2, 3) = ".ef" then do;
		     ef_sw = "1"b;
		     dprint_arg.heading = " for OLD ERROR FILE";
		end;
		else do;
		     ef_sw = "0"b;
		     dprint_arg.heading = " for OLD MAP";
		end;

		if dprint_sw | ef_sw then do;

		     call adjust_bit_count_ ((a_dn), (name), "1"b, 0, code);
		     if code ^= 0 then do;
			call com_err_ (code, "backup_cleanup", "^a^[>^]^a", a_dn, a_dn ^= ">", name);
			return;
		     end;

		     rings (1), rings (2), rings (3) = max (4, cu_$level_get ());
		     call hcs_$set_ring_brackets (a_dn, name, rings, code);
		end;

		if ef_sw then do;			/* copy error file */
		     call hcs_$status_minf (ERROR_FILE_DIR, name, 0, 0, 0, code);
		     if code ^= error_table_$noentry then do;
			call hcs_$delentry_file (ERROR_FILE_DIR, name, code);
COPY_ERROR:		if code ^= 0 then call com_err_ (code, "backup_cleanup",
			     "Copying ^a^[>^]^a to ^a>^a", a_dn, a_dn ^= ">", name, ERROR_FILE_DIR, name);
		     end;
		     else code = 0;

		     if code = 0 then do;
			call copy_seg_ (a_dn, name, ERROR_FILE_DIR, name, "backup_cleanup", "0"b, code);
			if code ^= 0 then go to COPY_ERROR;
		     end;
		end;

		if dprint_sw then call dprint_ (a_dn, name, dpap, code);

		else call hcs_$delentry_file (a_dn, name, code);
	     end;

	     call clean_up;
	end;

	else call com_err_ (code, "backup_cleanup", "^a", a_en);

end do_starname;
/**/
clean_up: proc;

	if entries_ptr ^= null then free entries_ptr -> entries in (area);
	if names_ptr ^= null then free names_ptr -> names in (area);

end clean_up;

end backup_cleanup;
