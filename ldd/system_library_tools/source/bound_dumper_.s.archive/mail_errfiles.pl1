/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


mail_errfiles:           proc;

/*     ENTRY DECLARATIONS     */

dcl  get_wdir_ entry returns (char (168));		/* wdir of err segs */
dcl  (temp_string1, temp_string) char(32);
dcl  hcs_$star_ entry (char (*) aligned, char (*) aligned, fixed bin (2), ptr,
     fixed bin, ptr, ptr, fixed bin (35));		/* names of err segs */
dcl  hcs_$fs_get_mode entry (ptr, fixed bin (5), fixed bin (35)); /* mailbox accessable ? */
dcl  delete_$path entry (char (*) aligned, char (*), bit (6), char (*), fixed bin (35));
dcl  continue_to_signal_  entry (fixed bin(35));
dcl  find_condition_info_ entry (ptr, ptr, fixed bin(35));
dcl  ioa_$ioa_stream      entry options (variable);
dcl  com_err_ entry options(variable);
dcl  mailbox_$close entry(fixed bin,fixed bin(35));
dcl  mailbox_$get_mode_index entry(fixed bin,bit(*)aligned,fixed bin(35));
dcl  mailbox_$open entry(char(*)aligned,char(*)aligned,fixed bin,fixed bin(35));
dcl  mail entry options(variable);			/* new mail, ring 1 mailboxes */
dcl  old_mail entry options(variable);			/* old mail, "mailbox" segments */
dcl  hcs_$terminate_noname
     entry (ptr, fixed bin (35));			/* mail went OK         */
dcl  dprint_ entry (char (*) aligned, char (*) aligned, ptr, fixed bin (35));
dcl  get_system_free_area_
     entry returns (ptr);				/* for hcs_$star        */
dcl  hcs_$initiate_count entry (char (*) aligned, char (*) aligned, char (*), fixed bin (24),
     fixed bin (2), ptr, fixed bin (35));		/* find mailbox of err causer */
dcl  hcs_$delentry_seg entry (ptr, fixed bin (35));	/* no access, scratch err seg */

/*     BUILTIN FUNCTIONS     */

dcl (addr, after, before, null, substr) builtin;

/*     BASED STRUCTURES     */

dcl 1 box based (p) aligned,				/* mailbox structure    */
    2 lock bit (36) aligned,
    2 nchr fixed bin,
    2 nmsg fixed bin,
    2 lins fixed bin,
    2 secret fixed bin,
    2 pad (3) fixed bin,
    2 b,
      3 yte (1000) bit (9) unaligned;

dcl 1 in based (p) aligned,				/* used by initiate_seg    */
    2 put (1000)bit (9) unaligned;


% include dprint_arg;
dcl 1 entries (encount) aligned based (eptr),		/* for hcs_$star        */
    2 type bit (2) unaligned,
    2 nname bit (16) unaligned,
    2 nindex bit (18) unaligned;

/*     MISCELLANEOUS DATA ITEMS AND POINTERS     */

dcl  names (0:100) char (32) aligned based (nptr);	/* EF seg names from list_err */
dcl  areap ptr init (null);				/* ptr to sys free area         */
dcl  encount fixed bin (17);				/* no of err seg names        */
dcl  mseg_index fixed bin(17) init(0);			/* index of ring 1 mailbox */
dcl (eptr, delptr, nptr) ptr init (null);		/* miscellaneous pointers       */
dcl  xmode bit(36) aligned;				/* extended access on ring 1 mailbox */
dcl  star_arg char (6) aligned init ("EF.**");		/* indicates all segs beg w EF. */
dcl  mode fixed bin (5);				/* access mode                  */
dcl  bmode bit (36) based (addr (mode));		/* for testing mode             */
dcl  ind fixed bin;					/* index of no of EF. segs      */
dcl  dptr ptr init (null);				/* ptr to dprint buffer         */
dcl  dir_name char(168) aligned int static		/* directory in which to look for errfiles */
	init(">udd>SysDaemon>error_file");
dcl  code fixed bin (35);				/* std error code ind           */
dcl dirp char(168) aligned;				/* mailbox dirname */
dcl  p ptr init (null);
dcl enamep char(32) aligned;				/* mailbox entry name */
dcl  ec fixed bin (35);				/* std sys err code             */
dcl  bitct fixed bin (24);				/* bitct of err causers mailbox */
dcl (this_seg, cur_seg) char (70);			/* name of seg in my directory  */
dcl  cur_name char (22) aligned;			/* err causers name             */
dcl  error_table_$noentry fixed bin (35) ext;		/* in case no mailbox           */
dcl  error_table_$no_dir fixed bin (35) ext;		/* sm dir in pth nm not spec    */
dcl  error_table_$no_info fixed bin (35) ext;		/* not enuf acc to rtn any info */
dcl  cur_proj char (9) aligned;			/* err causers proj             */
dcl  my_path char (168) aligned;			/* pathname of seg in my wdir   */
dcl  any_other condition;

/*     BEGIN PROGRAM EXECUTION     */



/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                                                           */ 
/*  Initialize all the components of the dprint_arg structure                                                */
/*                                                                                                           */ 
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */


          dpap = addr (dprint_arg_buf);                     /* set ptr to the dprint_ args  */
          dpap -> dprint_arg.version = 1;                   /* the version no is one        */
          dpap -> dprint_arg.copies  = 1;                   /* only one copy                */
          dpap -> dprint_arg.delete  = 1;                   /* dprint and delete the seg    */
          dpap -> dprint_arg.queue   = 3;                   /* no hurry, so print in Q 3    */
          dpap -> dprint_arg.pt_pch  = 1;                   /* print it don't punch it      */
          dpap -> dprint_arg.notify  = 1;                   /* don't bother to notify       */
          dpap -> dprint_arg.output_module = 1;             /* tell again to print not punch*/
          dpap -> dprint_arg.class   = "printer";           /* make it perfectly clear      */



/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                                                           */ 
/*  Get the name of the wdir containing the backup dump exceptions processed by list_err                     */
/*  Pick up any segment names beginning with EF. and store them in the variable 'names where they will       */
/*  be processed one at a time.  if there are no EF. segments today then quit till tomorrow                  */
/*                                                                                                           */ 
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

          areap = get_system_free_area_ ();
          call hcs_$star_ (dir_name, star_arg, 11b, areap, encount, eptr, nptr, code);
          if code ^= 0 then do;
               call com_err_ (code, "mail_errfiles", "Error in obtaining error segments.");
               go to fin;
          end;



/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                                                           */ 
/*  For each un backed up segment, pick up the name, strip off the EF. prefis and parse out                  */
/*  the name and the project.                                                                                */
/*                                                                                                           */ 
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

          do ind = 1 to encount;
               this_seg = nptr -> names (ind-1);
	     my_path = before(dir_name," ")||">"||this_seg;
               cur_seg = after (this_seg, "EF.");
               temp_string = cur_seg;
               do while (index (temp_string, ".") ^= 0);
                    temp_string1 = before (temp_string, ".");
                    temp_string = after (temp_string, ".");
               end;
                    cur_name = temp_string1;
                    cur_proj = temp_string;



/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                                                           */ 
/*  Check to see if this is the segment named EF.strange^line which is the storage place that list_err       */
/*  uses for all lines in the backup dump which it cannot recognize as normal processing.                    */
/*  If this is the strange^line segment it is bypassed and left in the directory so that it can be           */
/*  dprinted and examined for any serious problems.                                                          */
/*                                                                                                           */ 
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

             if cur_name = "strange" then go to fin;


/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                                                           */ 
/*  Look for a ring 1 mailbox to mail this segment to. If mail cannot be sent to a ring 1 mailbox for any   */
/*  reason, either because no such mailbox exists or because of insufficient access, try sending to an old  */
/*  mailbox. If there is not enough information available to say whether an old mailbox exists,             */
/*  then assume that the receiver doesn't want to know about his un backed up segments and delete the        */
/*  segment from the wdir.  If there is no mailbox or if some directory in the pathname is missing, then     */
/*  dprint the segment and go get the next one if any.                                                       */
/*                                                                                                           */ 
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

	     on condition(any_other) call default_handler;
               dirp = ">udd>"||before (cur_proj, " ")||">"||before (cur_name, " ");
               enamep = before(cur_name," ")||".mbx";
	     call mailbox_$open(dirp,enamep,mseg_index,code);
	     if mseg_index=0 then do;			/* can't send to new mailbox */

try_old:		enamep = "mailbox";
		call hcs_$initiate_count (dirp, enamep, "", bitct, 1, p, ec);
		if p=null then do;

		     if ec = error_table_$no_info then go to del_seg;
		     else if ec = error_table_$noentry | ec = error_table_$no_dir then do;
print_it:
			dpap -> dprint_arg.dest = cur_proj;
			dpap -> dprint_arg.heading = cur_name;

			call dprint_ (dir_name, ("EF."||before(cur_name, " ")||"."||cur_proj), dpap, code);
			go to fin;
		     end;



/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                                                           */ 
/*  If there is a null pointer where the mailbox pointer should be then call com_err_ to say why and go      */
/*  to get the next entry.  If there is a valid pointer, check to see if we have access.  If we have been    */
/*  refused access assume the potential receiver doesn't want to hear from us and delete the segment         */
/*  and go get the next one.                                                                                 */
/*                                                                                                           */ 
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

	               call com_err_ (ec, "mail_errfiles", "Null pointer returned to mailbox ^a>^a",dirp,enamep);
	               go to fin;
		end;
		call hcs_$fs_get_mode (p, mode, code);
		if ^substr (bmode, 33, 1) | ^substr (bmode, 35, 1) then do;

		     call hcs_$terminate_noname(p,code);
del_seg:
		     call delete_$path (dir_name, this_seg, "000100"b, "mail_errfiles", code);
		     if code ^= 0 then
		          call com_err_ (code, "mail_errfiles", "Unsuccessful delete attempt of seg", "^a", my_path);
		     go to fin;
		end;





/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                                                           */ 
/*  When we finally have access, see first if this is a real mailbox.  If it is not, go dprint               */
/*  the segment instead.  If this is a real mailbox, mail the segment at last, and go get the next           */
/*  one , if any.                                                                                            */
/*                                                                                                           */ 
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

		if bitct > 0 then if p -> box.secret ^= 2962 then do;
                                 call hcs_$terminate_noname (p, code);
                                 go to print_it;
		end;
		call old_mail (my_path, before(cur_name, " "), before(cur_proj, " "));
		call hcs_$terminate_noname (p, ec);
		p = null;
	     end;


/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  */
/*										  */
/*  There is a ring 1 mailbox. Check extended access and if insufficient, go back and try old mail.   */
/*  If we have append extended access (first bit), send mail and close the mailbox.		  */
/*										  */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  */


	     else do;
		call mailbox_$get_mode_index(mseg_index,xmode,ec);
		if ec^=0 | ^substr(xmode,1,1) then do;
		     call mailbox_$close(mseg_index,code);
		     go to try_old;
		end;

		call mail (my_path,before(cur_name," "),before(cur_proj," "));
		call mailbox_$close(mseg_index,code);
	     end;
fin:	end;

default_handler:     proc;

dcl 1 cond_info      aligned,
      2 mcptr                 ptr,
      2 version               fixed bin,
      2 condition_name        char(32) varying,
      2 infop                 ptr,
      2 wcptr                 ptr,
      2 loc_ptr               ptr,
      2 flags        aligned,
        3 crawlout            bit(1) unal,
        3 pad1                bit(35) unal,

      2 pad_word              bit(36) aligned,
      2 user_loc              ptr,
      2 pad(4)                bit(36) aligned;


call find_condition_info_ (null, addr(cond_info), code);
if code ^= 0 then do;

     call ioa_$ioa_stream ("error_output", "Error: Unknown signal has been received.");
     return;
end;

if cond_info.condition_name = "alrm" then do;

continue:
     call continue_to_signal_ (code);
     return;
end;

if cond_info.condition_name = "cput" then go to continue;
if cond_info.condition_name = "linkage_error" then go to continue;
if cond_info.condition_name = "mme2" then go to continue;
if cond_info.condition_name = "quit" then go to continue;
if cond_info.condition_name = "command_error" then go to continue;
if cond_info.condition_name = "finish" then go to continue;
if cond_info.condition_name = "stack" then go to continue;
if cond_info.condition_name = "program_interrupt" then return;

call hcs_$terminate_noname (p, code);
go to fin;

end default_handler;


/*  This is the end                                                                                          */

end;
