/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */





/****^  HISTORY COMMENTS:
  1) change(86-06-05,GWMay), approve(85-12-23,MCR7320), audit(86-11-19,GDixon),
     install(86-11-21,MR12.0-1223):
     Modified the process loop to abort when a fatal error is returned from the
     recursive dump subroutine. This way the program will not continue dumping
     with the next line in the control file. Added the entry
     backup_dump$abort_on_tape_errors to provide a means of returning the
     error code from a bad tape mount or write.
  2) change(87-03-03,GWMay), approve(87-03-03,MCR7627), audit(87-03-13,Farley),
     install(87-03-30,MR12.1-1018):
     added switch in the condition handling routine so that when writing to
     the map, all conditions are passed back to the default handler.
                                                   END HISTORY COMMENTS */


/* Hierarchy dumper */

/* Created:  February 1969 by R. C. Daley */
/* Modified: 29 June 1970 by R. H. Campbell */
/* Modified: 6 May 1976 by R. Bratt for pv dump */
/* Modified: 2 November 1977 by Steve Herbst to add backup_dump_ */
/* Modified: 3 August 1979 by Steve Herbst to add bk_ss_$no_primary */
/* Modified: 28 January 1980 by S. Herbst to add missing options to the map */
/* Modified: 6 November 1980 by G. Palter for version 3 backup_control structure */
/* Modified: 30 December 1980 by Steve Herbst to read control file and implement cross-dumping */
/* Modified: 4 August 1981 by G. Palter to fix interaction of cross-dumping and incremental/catchup/complete dumper */
/* Modified: July 1982 by G. Palter to add features for IMFT support of AIM: enforce a maximum access class for dumping,
   refuse to dump upgraded directories, and check a user's effective access to each branch before dumping */
/* Modified February 1983 by E. N. Kittlitz for 256K segs */
/* Modified August 1983 by Robert Coren to enforce a minimum access class for dumping */
/* Modified November 1983 by Robert Coren to copy "upgrade_to_user_auth" flag */
/* Modified 1985-03-21, BIM: fixed prehistoric busted condition handler.
   phx18650 -- does not reset transparency switches.
   phx17329 -- mishandling empty acls.
   phx17310 -- unitialized variables in cross-dumping.
   phx16651 -- rqovers on the map do not always get to level 2.
   phx13714 -- catching command_error conditions */


/* format: style4,delnl,insnl,ifthenstmt,ifthen */


backup_dump:
     procedure ();

dcl  Sfatal_error bit (1) aligned;
dcl  Stape_entry bit (1) aligned;
dcl  (i, id_length, n) fixed bin,			/* Temporary storage. */
     (a_code, code, saved_code) fixed bin (35),		/* Status codes */
     (old_trans_sw, ts) fixed bin (2),			/* To save previous transparent switch settings. */
     vers char (13) init ("21 March 1985") aligned int static options (constant),
						/* version of dumper */
     calendar char (16) aligned,			/* Temporary for time conversion. */
     ap ptr,					/* Pointer to argument list */
     p ptr,
     sp ptr,
     control_ptr ptr,				/* ptr to backup_dump_ control structure */
     path_index fixed bin,
     tchar (168) char (1) based,			/* test character array */
     saved_dtd fixed bin (52);

dcl  old_256K_switch bit (2) aligned;
dcl  (cross_dump_path, cross_dump_dn, dn, dump_dir, temp_dn) char (168);
dcl  cross_dump_en char (32);
dcl  text_line char (300);

dcl  NL char (1) int static options (constant) init ("
");
dcl  type fixed bin (2),
     btcnt fixed bin (24);				/* Arguments for status_minf call */

dcl  init static bit (1) initial ("1"b),		/* Static storage. */
     control_file_sw bit (1),				/* Reading requests from a control file */
     linep static ptr;				/* Pointer to ID line buffer. */

dcl  id static char (300);				/* Name, version of dumper and arguments. */

dcl  error_table_$noaccess fixed bin (35) external;	/* Status */
dcl  error_table_$noarg fixed bin (35) external;
dcl  error_table_$no_s_permission fixed bin (35) external;
dcl  error_table_$root fixed bin (35) external;
dcl  sys_info$seg_size_256K fixed bin (19) external;

dcl  backup_control_mgr_$initiate entry (pointer, fixed binary (35)),
     backup_control_mgr_$terminate entry (pointer),
     backup_dump_recurse entry (char (168), char (32), bit (1) aligned, bit (1) aligned, fixed bin (35)),
     backup_dump_recurse$set_directory_dtd entry (char (*) aligned, fixed bin (52)),
     backup_map_$beginning_line entry (fixed bin (52), ptr, fixed bin),
     backup_map_$fs_error_line entry (fixed bin (35), char (*), char (*), char (*)),
     backup_map_$directory_line entry (ptr, fixed bin),
     backup_map_$terminal_line entry (fixed bin (52), fixed bin (35)),
     backup_util$get_real_name entry (ptr, ptr, fixed bin, fixed bin (35)),
     bk_output$output_init entry (fixed bin, fixed bin (35)),
     bk_output$output_finish entry;

dcl  absolute_pathname_ entry (char (*), char (*), fixed bin (35)),
     bk_arg_reader_$dump_arg_reader entry (fixed bin, ptr, fixed bin (35)),
     clock_ entry (fixed bin (52)),
     com_err_ entry options (variable),
     cu_$arg_count entry (fixed bin),
     cu_$arg_list_ptr entry (ptr),
     date_time_ entry (fixed bin (52), char (*) aligned),
     expand_pathname_ entry (char (*), char (*), char (*), fixed bin (35)),
     hcs_$fs_search_get_wdir entry (ptr, fixed bin),
     hcs_$status_minf
	entry (char (*) aligned, char (*) aligned, fixed bin (1), fixed bin (2), fixed bin (24), fixed bin (35)),
     hcs_$make_seg entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35)),
     hcs_$set_256K_switch entry (bit (2) aligned, bit (2) aligned, fixed bin (35)),
     hcs_$set_max_length_seg ext entry (ptr, fixed bin (19), fixed bin (35)),
     hcs_$terminate_noname entry (ptr, fixed bin (35)),
     hcs_$truncate_seg entry (ptr, fixed bin, fixed bin (35)),
     (ioa_$rs) entry options (variable);		/* Variable arguments. */

dcl  ios_$attach entry (char (*), char (*), char (*), char (*), bit (72) aligned);
dcl  ios_$detach entry (char (*), char (*), char (*), bit (72) aligned);
dcl  ios_$read entry (char (*), ptr, fixed bin, fixed bin, fixed bin, bit (72) aligned);

dcl  hphcs_$fs_get_trans_sw entry (fixed bin (2), fixed bin (2));

dcl  (
     hphcs_$suspend_quota,
     hphcs_$restore_quota
     ) external entry;

dcl  cleanup condition;
dcl  any_other condition;

dcl  (addr, index, length, max, min, null, reverse, rtrim, substr) builtin;

/**/

%include bk_ss_;
%page;
%include backup_preamble_header;
%page;
%include backup_control;
%page;
%include io_status;

/**/

	bk_ss_$sub_entry = "0"b;
	Stape_entry = "0"b;
	if bk_ss_$myname = " " then bk_ss_$myname = "backup_dump";
	go to common;

abort_on_tape_errors:
     entry (tape_code);

dcl  tape_code fixed bin;

	tape_code = 0;
	bk_ss_$sub_entry = "0"b;
	Stape_entry = "1"b;
	control_file_sw = "0"b;	/* control file is read by caller */
	go to have_args;

backup_dump_:
     entry (control_ptr, a_code);

	bk_ss_$sub_entry = "1"b;
	Stape_entry = "0"b;
	a_code = 0;
	
	bk_ss_$control_ptr = null();
	old_256K_switch = ""b;			/* initialize for cleanup */
	old_trans_sw = -1;				/* leaves the switches alone */
	on condition (cleanup)
	     begin;
	     call hcs_$set_256K_switch (old_256K_switch, (""b), (0));
	     if ^bk_ss_$debugsw then do;
	          call hphcs_$fs_get_trans_sw (old_trans_sw, (0));
	          call hphcs_$restore_quota;		/* Restore the quota */
	     end;
	     if bk_ss_$control_ptr ^= null then
	          call backup_control_mgr_$terminate (control_ptr);
          end;

	call backup_control_mgr_$initiate (control_ptr, a_code);
	if a_code ^= 0 then return;

	if bk_ss_$control_ptr -> backup_control.debug_sw then do;
	     bk_ss_$debugsw = "1"b;
	     bk_ss_$trimsw = "0"b;
	end;
	else bk_ss_$debugsw = "0"b;
	bk_ss_$mapsw = bk_ss_$control_ptr -> backup_control.map_sw;
	bk_ss_$no_reload = bk_ss_$control_ptr -> backup_control.no_reload_sw;
	bk_ss_$holdsw = bk_ss_$control_ptr -> backup_control.hold_sw;
	bk_ss_$preattached = bk_ss_$control_ptr -> backup_control.preattached;
	if bk_ss_$preattached then bk_ss_$data_iocb = bk_ss_$control_ptr -> backup_control.data_iocb;
	bk_ss_$sub_entry_errfile = bk_ss_$control_ptr -> backup_control.error_file;
	bk_ss_$caller_handles_conditions = bk_ss_$control_ptr -> backup_control.caller_handles_conditions;

	bk_ss_$enforce_max_access_class = bk_ss_$control_ptr -> backup_control.enforce_max_access_class;
	if bk_ss_$enforce_max_access_class then
	     bk_ss_$maximum_access_class = bk_ss_$control_ptr -> backup_control.maximum_access_class;

	bk_ss_$enforce_min_access_class = bk_ss_$control_ptr -> backup_control.enforce_min_access_class;
	if bk_ss_$enforce_min_access_class then
	     bk_ss_$minimum_access_class = bk_ss_$control_ptr -> backup_control.minimum_access_class;

	bk_ss_$dont_dump_upgraded_dirs = bk_ss_$control_ptr -> backup_control.dont_dump_upgraded_dirs;
	if bk_ss_$dont_dump_upgraded_dirs then
	     bk_ss_$maximum_dir_access_class = bk_ss_$control_ptr -> backup_control.maximum_dir_access_class;

	bk_ss_$check_effective_access = bk_ss_$control_ptr -> backup_control.check_effective_access;
	if bk_ss_$check_effective_access then do;
	     bk_ss_$user_id = bk_ss_$control_ptr -> backup_control.user_for_access_check.id;
	     bk_ss_$user_authorization = bk_ss_$control_ptr -> backup_control.user_for_access_check.authorization;
	     bk_ss_$user_ring = bk_ss_$control_ptr -> backup_control.user_for_access_check.ring;
	end;

	bk_ss_$upgrade_to_user_auth = bk_ss_$control_ptr -> backup_control.upgrade_to_user_auth;

	do i = 1 to bk_ss_$control_ptr -> backup_control.request_count;
	     bk_ss_$control_ptr -> backup_control.found (i) = "0"b;
	     bk_ss_$control_ptr -> backup_control.loaded (i) = "0"b;
	     bk_ss_$control_ptr -> backup_control.status_code (i) = 0;
	     bk_ss_$control_ptr -> backup_control.error_name (i) = "";
	end;

	bk_ss_$myname = "backup_dump_";
	go to common;


idump:
     entry;

	bk_ss_$sub_entry = "0"b;
	Stape_entry = "0"b;
	bk_ss_$myname = "idump";

common:
	cross_dump_path, cross_dump_dn, cross_dump_en = "";


/*	read in arguments and set switches		*/

	control_file_sw = "0"b;			/* not yet told of control file in our arguments */

	if bk_ss_$sub_entry then do;			/* if backup_dump_, get first pathname */
	     do i = 1 to bk_ss_$control_ptr -> backup_control.request_count;
		call absolute_pathname_ (bk_ss_$control_ptr -> backup_control.path (i), dn, code);
		if code = 0 & dn = ">" then code = error_table_$root;
		if code ^= 0 then do;
		     a_code, bk_ss_$control_ptr -> backup_control.status_code (i) = code;
		     go to RETURN_FROM_BACKUP_DUMP;
		end;
	     end;
	     bk_ss_$save_path = bk_ss_$control_ptr -> backup_control.path (1);
	     path_index, bk_ss_$path_index = 1;
	     bk_ss_$pathsw = "1"b;
	     bk_ss_$save_plen = length (rtrim (bk_ss_$save_path));
	end;
	else do;					/* else read command argument */
	     call cu_$arg_count (i);			/* Get the number of input arguments */
	     if i ^= 0 then do;			/* Don't bother if no args */
		call cu_$arg_list_ptr (ap);		/* Get pointer to argument list */
		call bk_arg_reader_$dump_arg_reader (1, ap, code);
						/* Do the work */
		if code ^= 0 then return;
		if bk_ss_$control_name ^= "" & bk_ss_$myname = "backup_dump" then do;
		     call ios_$attach ("dump_control", "file_", bk_ss_$control_name, "r",
			addr (status) -> status_bits);
		     if status.code ^= 0 then do;
			call com_err_ (status.code, bk_ss_$myname, "Attaching control file ^a", bk_ss_$control_name)
			     ;
			return;
		     end;
READ_CONTROL:
		     call ios_$read ("dump_control", addr (dump_dir), 0, length (dump_dir), n,
			addr (status) -> status_bits);
		     if status.code ^= 0 then do;
READ_ERROR:
			call com_err_ (status.code, bk_ss_$myname, "Reading control file ^a", bk_ss_$control_name);
			return;
		     end;
		     if substr (dump_dir, n, 1) = NL then
			substr (dump_dir, n) = "";
		     else substr (dump_dir, n + 1) = "";
		     if substr (dump_dir, 1, 1) ^= ">" then
			if status.end_of_data then
			     return;
			else go to READ_CONTROL;

		     i = index (dump_dir, "=");
		     if i ^= 0 then do;
			cross_dump_path = substr (dump_dir, i + 1);
			substr (dump_dir, i) = "";
			if substr (cross_dump_path, 1, 1) ^= ">" then
			     cross_dump_path =
				substr (dump_dir, 1, length (dump_dir) + 1 - index (reverse (dump_dir), ">"))
				|| cross_dump_path;
			if bk_ss_$mapsw then
			     text_line =
				"(Cross-dumping " || rtrim (dump_dir) || " to " || rtrim (cross_dump_path) || ")";
			call expand_pathname_ (cross_dump_path, cross_dump_dn, cross_dump_en, code);
			if code ^= 0 then do;
			     call com_err_ (code, bk_ss_$myname, "Cross-dump path ^a", cross_dump_path);
			     return;
			end;
		     end;
		     else cross_dump_path, cross_dump_dn, cross_dump_en = "";

		     bk_ss_$pathsw = "1"b;
		     bk_ss_$save_path = dump_dir;
		     bk_ss_$save_plen = n;
		     control_file_sw = "1"b;
		end;

		else if ^bk_ss_$pathsw then do;
		     call com_err_ (error_table_$noarg, bk_ss_$myname, "No absolute pathname specified.");
		     return;
		end;
		else do;
have_args:
		     cross_dump_path, cross_dump_dn, cross_dump_en = "";
		     call absolute_pathname_ (substr (bk_ss_$save_path, 1, bk_ss_$save_plen), dn, code);
		     if code = 0 & dn = ">" then code = error_table_$root;
		     if code ^= 0 then do;
			call com_err_ (code, "backup_dump", "^a", substr (bk_ss_$save_path, 1, bk_ss_$save_plen));
			return;
		     end;
		end;
	     end;
	     else if bk_ss_$myname = "backup_dump" then do;
		call com_err_ (error_table_$noarg, "backup_dump", "No pathname specified.");
		return;
	     end;
	end;

/*	initialization		*/

	Sfatal_error = "0"b;
	old_256K_switch = ""b;			/* initialize for cleanup */
	old_trans_sw = -1;				/* passing this back in has no effect */
	if ^bk_ss_$sub_entry then
	     on cleanup
		begin;				/* need a cleanup handler */
		call hcs_$set_256K_switch (old_256K_switch, (""b), (0));
						/* ignore code */
		if ^bk_ss_$debugsw then do;
		     call hphcs_$fs_get_trans_sw (old_trans_sw, (0));
		     call hphcs_$restore_quota;		/* Restore the quota */
                    end;
	     end;
	call hcs_$set_256K_switch ("11"b, old_256K_switch, (0));
						/* ignore code */
	if init then do;
	     call hcs_$make_seg ("", "dump_seg", "", 01011b, bk_ss_$sp, code);
	     call hcs_$set_max_length_seg (bk_ss_$sp, sys_info$seg_size_256K, code);
	     call hcs_$make_seg ("", "dump_area", "", 01011b, bk_ss_$areap, code);
	     call hcs_$make_seg ("", "dump_preamble", "", 01011b, bk_ss_$hp, code);
	     linep = addr (id);			/* Set up pointer to identification line. */
	     bk_ss_$areap -> h.dumper_id,		/* Insert dumper ID into preamble headers. */
		bk_ss_$hp -> h.dumper_id = "Backup_dump " || vers;
	     init = ""b;
	end;

	if bk_ss_$restart_dumpsw then do;		/* Check for restart branch */
	     call hcs_$status_minf (bk_ss_$restart_path, "", 0, type, btcnt, code);
	     if code ^= 0 then do;
		if bk_ss_$sub_entry then
		     a_code = code;
		else call com_err_ (code, bk_ss_$myname, "^a", bk_ss_$restart_path);
		go to RETURN_FROM_BACKUP_DUMP;
	     end;
	end;

/*	Start the dump .... first get absolute path name of starting directory 		*/

start:    bk_ss_$writing_map = "0"b;
	call clock_ (bk_ss_$save_time);		/* Get the current time. */

	if ^bk_ss_$pathsw then do;			/* Was a path name supplied? */
	     call hcs_$fs_search_get_wdir (addr (bk_ss_$save_path), bk_ss_$save_plen);
	     if bk_ss_$save_plen = 0 then do;		/* Is there a current working directory? */
		code = error_table_$noaccess;
		if bk_ss_$sub_entry then
		     a_code = code;
		else call com_err_ (code, bk_ss_$myname, "working directory");
						/* Gripe. */
		go to RETURN_FROM_BACKUP_DUMP;
	     end;
	end;
	if bk_ss_$sub_entry then
	     bk_ss_$no_primary = bk_ss_$control_ptr -> backup_control.no_primary_sw (bk_ss_$path_index);

	if ^bk_ss_$no_primary then do;
	     call backup_util$get_real_name (addr (bk_ss_$save_path), addr (bk_ss_$save_path), bk_ss_$save_plen, code);
	     if bk_ss_$restart_dumpsw then
		call backup_util$get_real_name (addr (bk_ss_$restart_path), addr (bk_ss_$restart_path),
		     bk_ss_$restart_plen, code);
	end;

	id_length = 0;

/*	Report switch settings		*/

	if bk_ss_$mapsw then do;			/* Is a map output desired? */
	     call append (rtrim (bk_ss_$myname));	/* set name into id line */
	     call append (vers);			/* and version */
	     if bk_ss_$tapesw then			/* Report tape option. */
		if bk_ss_$ntapes = 1 then
		     call append ("1tape");		/* How many tapes? */
		else call append ("2tapes");		/* Both. */
	     else call append ("notape");		/* No tape output enabled. */
	     call append ("map");			/* Report map option */
	     if bk_ss_$holdsw then
		call append ("hold");		/* Report tape hold option. */
	     else call append ("nohold");
	     if bk_ss_$onlysw then
		call append ("only");		/* Report whether hierarchy dump */
	     else call append ("sweep");
	     if bk_ss_$dtdsw then call append ("dtd");	/* Report dtd setting. */
	     if bk_ss_$datesw then do;		/* Report date value. */
		call date_time_ (bk_ss_$date, calendar);/* Convert the time value. */
		call append (calendar);
	     end;
	     if ^(bk_ss_$dtdsw | bk_ss_$datesw) then call append ("all");
						/* Are both off? */
	     if bk_ss_$debugsw then call append ("debug");/* Report debug mode setting */
	     if bk_ss_$err_onlinesw then call append ("error_on");
	     if bk_ss_$no_contin then call append ("nocontin");
						/* stop after catchup dump */
	     if bk_ss_$no_output then call append ("nooutput");
						/* no tape or map (bug if ON) */
	     if bk_ss_$no_primary then call append ("noprimary");
						/* do not use primary paths */
	     if bk_ss_$restart_dumpsw then call append ("restart");
						/* restarting previous dump */
	     if bk_ss_$pvsw then do;
		call append ("pvname = " || rtrim (bk_ss_$pvname));
	     end;
	end;
	if bk_ss_$tapesw then do;
	     call bk_output$output_init (bk_ss_$ntapes, code);
						/* initialize output if tape option ON */
	     if code ^= 0 then do;
		call backup_map_$fs_error_line (code, "bk_output$output_init", "Initialization", "");
		if Stape_entry then tape_code = code;
		else if bk_ss_$sub_entry then a_code = code;

		go to RETURN_FROM_BACKUP_DUMP;
	     end;
	end;
	call backup_map_$beginning_line (bk_ss_$save_time, linep, id_length);
						/* Write and type the beginning time. */
	if ^(bk_ss_$tapesw | bk_ss_$mapsw) then go to RETURN_FROM_BACKUP_DUMP;
						/* OK? */

/*	Dump header and first directory		*/

	bk_ss_$namesw = "1"b;			/* tell dump to dump only this record */
	if ^bk_ss_$debugsw then do;			/* for real not debug */
	     call hphcs_$suspend_quota;		/* dumper runs quota inhibited */
	     call hphcs_$fs_get_trans_sw (11b, old_trans_sw);
						/* Transparent use, modification. */
	end;
	on any_other call idump_signal;

/* First dump branch of starting directory to get names and ACLs */

	do;
	     p = addr (bk_ss_$save_path);		/* Get pointer to starting pathname */
	     do i = bk_ss_$save_plen to 1 by -1 while (p -> tchar (i) ^= ">");
	     end;					/* Find last ">" */
	     bk_ss_$hp -> h.dname = substr (bk_ss_$save_path, 1, max (1, i - 1));
	     bk_ss_$hp -> h.dlen = max (1, i - 1);
	     bk_ss_$ename = substr (bk_ss_$save_path, i + 1, bk_ss_$save_plen - i);

	     if bk_ss_$mapsw then do;
		if cross_dump_path ^= "" then do;
		     call backup_map_$directory_line (addr (text_line), length (rtrim (text_line)));
		     temp_dn = cross_dump_dn;
		end;
		else temp_dn = bk_ss_$hp -> h.dname;
		call backup_map_$directory_line (addr (temp_dn), length (rtrim (temp_dn)));
	     end;
	     if ^bk_ss_$pvsw then do;			/* dump branch - except in pv dump case */
		call hcs_$status_minf (bk_ss_$hp -> h.dname, bk_ss_$ename, 1, type, btcnt, code);
		if code ^= 0 & code ^= error_table_$no_s_permission then do;
		     call backup_map_$fs_error_line (code, "status_minf", (bk_ss_$hp -> h.dname), (bk_ss_$ename));
		     if bk_ss_$sub_entry then bk_ss_$control_ptr -> backup_control.status_code (path_index) = code;
		     go to dumped;
		end;
		call backup_dump_recurse (cross_dump_dn, cross_dump_en, "1"b, Sfatal_error, code);
		if Sfatal_error then go to error;	/* D U M P   T H E   B R A N C H */
		if type = 1 then do;		/* If terminal node was a segment ... */
		     if code = 1 then code = 0;	/* Code of 1 is normal return for single entry. */
		     go to dumped;			/* Clean up and leave. */
		end;
	     end;
	end;

/*	Now dump the rest of the subtree		*/

	if bk_ss_$sub_entry then saved_code = bk_ss_$control_ptr -> backup_control.status_code (path_index);

	do;
	     saved_dtd = bk_ss_$hp -> h.dtd;		/* needed to set DTD of the dir later (maybe) */
	     bk_ss_$hp -> h.dname = bk_ss_$save_path;	/* Now dump everything else */
	     bk_ss_$hp -> h.dlen = bk_ss_$save_plen;	/* .. */
	     bk_ss_$namesw = ""b;			/* set for entire dump */
	     if bk_ss_$restart_dumpsw then bk_ss_$rlen = bk_ss_$save_plen + 1;
						/* Set starting length of name for recursion in restart */

	     call backup_dump_recurse (cross_dump_dn, cross_dump_en, "0"b, Sfatal_error, code);
	     if Sfatal_error then go to error;		/* D U M P   S U B T R E E */

	     call backup_dump_recurse$set_directory_dtd (bk_ss_$hp -> h.dname, saved_dtd);
	end;

dumped:
	if bk_ss_$sub_entry then do;			/* if backup_dump_, get the next pathname */
	     if saved_code = 0 & bk_ss_$control_ptr -> backup_control.status_code (path_index) ^= 0 then
		bk_ss_$control_ptr -> backup_control.error_name (path_index) =
		     "(in subtree) " || 
		     substr (bk_ss_$control_ptr -> backup_control.error_name (path_index), 1,
		     length (bk_ss_$control_ptr -> backup_control.error_name (path_index)) - length ( "(in subtree)" ));
	     path_index, bk_ss_$path_index = path_index + 1;
	     if path_index <= bk_ss_$control_ptr -> backup_control.request_count then do;
		bk_ss_$save_path = bk_ss_$control_ptr -> backup_control.path (path_index);
		bk_ss_$save_plen = length (rtrim (bk_ss_$save_path));
		cross_dump_path = bk_ss_$control_ptr -> backup_control.new_path (path_index);
		revert any_other;
		if ^bk_ss_$debugsw then do;			/* Turn on quota, turn off trans sw if possible */
		     call hphcs_$restore_quota;		/* Restore the quota */
		     call hphcs_$fs_get_trans_sw (old_trans_sw, ts); 
						          /* Restore previous settings. */
		end;
		go to start;
	     end;
	end;
	else if control_file_sw then			/* get next control file entry */
	     if ^status.end_of_data then do;
	          revert any_other;
		if ^bk_ss_$debugsw then do;			/* Turn on quota, turn off trans sw if possible */
		     call hphcs_$restore_quota;		/* Restore the quota */
		     call hphcs_$fs_get_trans_sw (old_trans_sw, ts);
						          /* Restore previous settings. */
		end;
		go to READ_CONTROL;
               end;
	     else call ios_$detach ("dump_control", "", "", addr (status) -> status_bits);
						/* Cleanup and exit		*/
error:
	if Sfatal_error then do;
	     if Stape_entry then tape_code = code;

	     if bk_ss_$sub_entry then
		a_code = code;
	     else call com_err_ (code, bk_ss_$myname, "
Unable to continue dumping.");
	end;

	revert any_other;
	if ^bk_ss_$debugsw then do;			/* Turn on quota, turn off trans sw if possible */
	     call hphcs_$restore_quota;		/* Restore the quota */
	     call hphcs_$fs_get_trans_sw (old_trans_sw, ts);
						/* Restore previous settings. */
	end;
	if bk_ss_$tapesw then call bk_output$output_finish ();
						/* Shutdown output proceedure */
	call clock_ (bk_ss_$save_time);		/* Get time of stopping. */
	call backup_map_$terminal_line (bk_ss_$save_time, code);
						/* Write the trailer line. */
	call hcs_$truncate_seg (bk_ss_$sp, 0, code);	/* Free unused pages in buffer segments. */
	call hcs_$truncate_seg (bk_ss_$areap, 1023, code);/* Save first page of preamble segments. */
	call hcs_$truncate_seg (bk_ss_$hp, 1023, code);	/* .. */
	if (bk_ss_$myname = "backup_dump") | (bk_ss_$myname = "idump") then bk_ss_$myname = "";

RETURN_FROM_BACKUP_DUMP:
	call hcs_$set_256K_switch (old_256K_switch, (""b), (0));
						/* ignore code */
	if bk_ss_$sub_entry then			/* possibly copy info back to older structure */
	     call backup_control_mgr_$terminate (control_ptr);
	return;

/**/

append:
     procedure (string);				/* Append string to identification line. */

dcl  string character (*) aligned;			/* What to append. */
	if id_length < length (id) then do;		/* Is there room in buffer? */
	     id_length = id_length + 1;		/* Count it. */
	     substr (id, id_length, 1) = " ";		/* Prepend a blank. */
	     i = min (length (id) - id_length, length (string));
						/* Don't overflow. */
	     substr (id, id_length + 1, i) = string;	/* Append this string. */
	     id_length = id_length + i;		/* Count length. */
	end;
     end append;

/**/

/* Entry upon recieving an unclaimed signal */

idump_signal:
     procedure;

dcl  save_error fixed binary,				/* Space to save error location code. */
     is_temp fixed bin,
     is_code fixed bin (35),
     is_linep pointer,				/* Pointer to line buffer. */
     is_line character (300);				/* Line for formatting output messages. */

declare  continue_to_signal_ entry (fixed binary (35));
declare  find_condition_info_ entry (pointer, pointer, fixed binary (35));
declare  1 CI aligned like condition_info;

	if bk_ss_$sub_entry & bk_ss_$caller_handles_conditions
	   | bk_ss_$writing_map then do;
	     call continue_to_signal_ ((0));
	     return;
	end;					/* caller has any_other handler (for IMFT daemon usage) */

	CI.version = condition_info_version_1;
	call find_condition_info_ (null (), addr (CI), (0));
	if ^(CI.condition_name = "seg_fault_error" | CI.condition_name = "no_read_permission"
	     | CI.condition_name = "record_quota_overflow"/* null pages ... */
	     | CI.condition_name = "out_of_bounds"	/* joker changed maxl */
	     | CI.condition_name = "not_in_read_bracket"	/* etc. */
	     | CI.condition_name = "page_fault_error" /* disk problems */) then do;
	     call continue_to_signal_ ((0));		/* Not our problem */
	     return;
	end;

/**** If we get here, we have a condition that could possibly have
      happened while referencing a segment that we were dumping.
      Check to see if we were dumping a segment. (bk_ss_$error ^= 0)
      If not, we continue to signal anyway, since it is a problem
      with the dumper and not just a joker nailing a segment we are dumping. */

	save_error = bk_ss_$error;			/* Save copy of error location code. */
	bk_ss_$error = 0;				/* Indicate future errors fatal. */
	is_linep = addr (is_line);			/* Get pointer to line buffer. */
	if save_error ^= 0 then do;			/* If error is not fatal at this time */
	     if bk_ss_$mapsw then do;			/* Are we to report in the map? */
		call ioa_$rs ("Non-fatal ^a at ^d: ^a>^a", is_line, is_temp, CI.condition_name, save_error,
		     bk_ss_$hp -> h.dname, bk_ss_$hp -> h.ename);
		call backup_map_$directory_line (is_linep, is_temp);
	     end;
	     if bk_ss_$wasnt_known then do;		/* Should we terminate this segment? */
		bk_ss_$wasnt_known = ""b;		/* Clear indicator for safety. */
		bk_ss_$error = 1;			/* Enable error recovery attempt. */
		call hcs_$terminate_noname (bk_ss_$segptr, is_code);
						/* Terminate this segment. */
		bk_ss_$error = 0;			/* Disable error recovery. */
	     end;
	     go to bk_ss_$err_label;			/* attempt to recover with non-local go to */
	end;
	call continue_to_signal_ ((0));		/* No internal error recovery */
	return;

%include condition_info;
     end idump_signal;

     end backup_dump;
