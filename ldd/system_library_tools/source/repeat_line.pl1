/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* REPEAT --- program to test console output functions.

   Usage: repeat_line # string

	# = number of repetitions (default is 10, or previous value in process)
	string = initial test string (default is QBF, or previous stored value)

   Coded by C Garman.
   Edited 15 Sept 1970 for different handling of @ in new TTY DIM

   */

repeat_line: rpl: repeat: rpt: proc;

dcl (savec char(300) aligned,
     (n init(0), nwrite init(10)) fixed bin(17)) static;

dcl (pstr, pline) ptr,
    nstr fixed bin(17),
    ((str char(nstr), str1 char(1)) based(pstr)) unaligned,
    (i, saven, run init(0), cu_err) fixed bin(17),
    line char(300) aligned;

dcl cu_$arg_ptr entry(fixed bin, ptr, fixed bin, fixed bin),
    (ios_$read_ptr, ios_$write_ptr) entry(ptr, fixed bin, fixed bin),
    cv_dec_check_ entry(char(*), fixed bin, fixed bin),
    (ioa_, ioa_$rs) entry options(variable);

dcl (addr, char) builtin;

/* 
   */
	if n = 0
	then call ioa_$rs(
     "The ^Rquick^B brown ^Rfox^B jumps ^Rover^B the ^Rlazy^B dog^R.^B^/^-^a^/^-^a^/^-^a", savec, n,
		" !""#$%&'()*+,-./0123456789:;<=>?",
		"@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_",
		"`abcdefghijklmnopqrstuvwxyz{|}~");

	pline = addr(line);

	call cu_$arg_ptr(1, pstr, nstr, cu_err);

	if cu_err = 0
	then do;

	     call cv_dec_check_(str, cu_err, i);

	     if cu_err = 0
	     then if i > 0
		then nwrite = i;

	     call cu_$arg_ptr(2, pstr, nstr, cu_err);

	     if cu_err = 0
	     then do;

		if nstr = 1
		then if str1 = "*"
		     then go to copy_saved_line;

		call ioa_$rs("^a", savec, n, str);

		go to copy_saved_line;

		end;

	     end;

	do while (run = 0);

	call ioa_("Type line (or _q or <NL>):");

	saven = n;			/* Save # of chars in saved buffer */
	call ios_$read_ptr(pline, 300, n);

	if n > 2
	then do;

save_line:     savec = line;

print_it:      saven = n;			/* May be redundant, but who cares */

	     do i = 1 to nwrite;

	     call ios_$write_ptr(pline, 0, saven);

	     end;

	     end;

	else if n = 1
	     then do;

		n = saven;			/* Restore char count */

copy_saved_line:
		line = savec;
		go to print_it;

		end;

	     else if char(line, 1) ^= "q"
		then go to save_line;
		else run = run + 1;

	end;

/* If we got a "q", restore count */

	n = saven;

end repeat_line;
