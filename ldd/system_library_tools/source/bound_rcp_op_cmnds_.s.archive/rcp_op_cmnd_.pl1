/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


rcp_op_cmnd_: proc ();


/*
   * This subroutine implements the following operator commands:
   *
   *	preload <device> <volume> {-user <user>}
   *	unload <volume-type> {<volume> | -all}
   *
   *
   *	Created on 04/28/78 by Michael R. Jordan.
   *	Modified on 12/09/78 by Michael R. Jordan for version 2 rcp_data info.
   *	Modified 6/79 by Michael R. Jordan for MR7.0R.
   *      Modified May 1983 by Art Beattie to fix unload usage message.
   *
   *
*/

dcl  addr builtin;
dcl  arg char (arg_len) based (arg_ptr);		/* value of command argument */
dcl  arg_len fixed bin;				/* length of command argument */
dcl  arg_num fixed bin;				/* index for argument processing */
dcl  arg_ptr ptr;					/* pointer to command argument */
dcl  code fixed bin (35);				/* status code */
dcl  com_err_ entry options (variable);
dcl  cu_$arg_count entry (fixed bin);
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  device_name char (32);				/* the device on which to operate */
dcl  error_table_$badopt fixed bin (35) ext;
dcl  error_table_$bigarg fixed bin (35) ext;
dcl  error_table_$device_busy fixed bin (35) ext;
dcl  error_table_$incorrect_device_type fixed bin (35) ext;
dcl  error_table_$incorrect_volume_type fixed bin (35) ext;
dcl  error_table_$media_not_removable fixed bin (35) ext;
dcl  error_table_$noarg fixed bin (35) ext;
dcl  error_table_$resource_unknown fixed bin (35) ext;
dcl  error_table_$volume_busy fixed bin (35) ext;
dcl  error_table_$volume_not_loaded fixed bin (35) ext;
dcl  error_table_$wrong_no_of_args fixed bin (35) ext static;
dcl  hbound builtin;
dcl  hcs_$make_seg entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35));
dcl  i fixed bin;
dcl  length builtin;
dcl  me char (16);
dcl  mess char (32);
dcl  nargs fixed bin;				/* number of command arguments */
dcl  null builtin;
dcl  rcp_sys_$copy_data entry (ptr, fixed bin (19), fixed bin (35));
dcl  rcp_sys_$preload entry (char (32), char (32), char (32), fixed bin (35));
dcl  rcp_sys_$unload entry (char (32), char (32), fixed bin (35));
dcl  resource_info_$get_vtypex entry (char (*), char (*), fixed bin, fixed bin (35));
dcl  temp_seg_ptr ptr static init (null ());
dcl  user_id char (32);				/* the user for whom we are preloading */
dcl  volume_name char (32);				/* the volume to be preloaded */
dcl  volume_type char (32);				/* type of volume being preloaded */
dcl  vtypex fixed bin;				/* volume type index */

/*

   This entry implements the operator preload command.  The command syntax is:

   preload device_name volume_name {-user XX}

   The user name is required if Resource Management is not enabled.  It serves
   to identify the user for whom the volume is being preloaded.

*/


preload:	entry ();

	me = "preload";


/*

   See how many arguments there are.  If not enough, then complain.

*/


	call cu_$arg_count (nargs);
	if nargs < 2 then do;
NO_ARG:	     call com_err_ (error_table_$noarg, me,
		"^/Usage: preload DEVICE VOLUME -user USERID");
	     return;
	end;


/*

   Now get the volume and device names and save them away.

*/


	call cu_$arg_ptr (1, arg_ptr, arg_len, code);
	if code ^= 0 then do;
BAD_ARG:	     call com_err_ (code, me);
	     return;
	end;
	if length (arg) > length (device_name) then do;
LONG_ARG:	     call com_err_ (error_table_$bigarg, me, "^a", arg);
	     return;
	end;
	device_name = arg;


	call cu_$arg_ptr (2, arg_ptr, arg_len, code);
	if code ^= 0 then goto BAD_ARG;
	if length (arg) > length (volume_name) then goto LONG_ARG;
	volume_name = arg;


/*

   Now process any control arguments.

*/


	user_id = "";				/* no user_id yet */
	arg_num = 3;				/* first control argument */


	do while (arg_num <= nargs);

	     call GET_ARG ();

	     if arg = "-user" then do;
		if arg_num > nargs then goto NO_ARG;
		call GET_ARG ();
		if length (arg) > length (user_id) then goto LONG_ARG;
		user_id = arg;
	     end;

	     else do;
		call com_err_ (error_table_$badopt, me, "^a", arg);
		return;
	     end;

	end;


/*

   Do the preload!

*/


	call rcp_sys_$preload (device_name, volume_name, user_id, code);
	if code ^= 0 then do;
	     if code = error_table_$incorrect_device_type |
	     code = error_table_$device_busy |
	     code = error_table_$resource_unknown then
		mess = device_name;
	     else if code = error_table_$volume_busy then
		mess = volume_name;
	     else if code = error_table_$noarg then
		mess = "-user NAME required.";
	     else mess = "";
	     call com_err_ (code, me, "^a", mess);
	end;

	return;

/*

   This entry implements the operator unload command.  The command syntax is:

   unload volume_type {volume_name | -all}

*/


unload:	entry ();

	me = "unload";


/*

   See how many arguments there are.  If not enough, then complain.

*/


	call cu_$arg_count (nargs);
	if nargs ^= 2 then do;
	     call com_err_ (error_table_$wrong_no_of_args, me,
		"^/Usage: unload VOLUME_TYPE <VOLUME_NAME | -all>");
	     return;
	end;


/*

   Now get the type of volume to be unloaded.

*/


	call cu_$arg_ptr (1, arg_ptr, arg_len, code);
	if code ^= 0 then goto BAD_ARG;
	if length (arg) > length (volume_type) then goto LONG_ARG;
	volume_type = arg;


/*

   Now see if this is an unload -all or an unload volume-name.

*/


GOT_VTYPEX:

	call cu_$arg_ptr (2, arg_ptr, arg_len, code);
	if code ^= 0 then goto BAD_ARG;


	if arg = "-all" | arg = "-a"
	then call UNLOAD_ALL ();
	else do;					/* Just do this one volume. */
	     if length (arg) > length (volume_name) then goto LONG_ARG;
	     volume_name = arg;
	     call UNLOAD_VOLUME ();
	end;


	return;

GET_ARG:	proc ();


	     if arg_num > nargs then do;
		arg_ptr = null ();
		return;
	     end;


	     call cu_$arg_ptr (arg_num, arg_ptr, arg_len, code);
	     if code ^= 0 then goto BAD_ARG;


	     arg_num = arg_num+1;


	     return;


	end GET_ARG;

/*

   This internal procedure attempts to unload all unattached, loaded volumes.
   It does so by getting the names of these volumes from the info returned
   by rcp_sys_$copy_data and calling UNLOAD_VOLUME for each one.

*/


UNLOAD_ALL: proc ();


/*

   First we must get the rdi structure from RCP.

*/


	     if temp_seg_ptr = null () then do;		/* If we don't have a temp seg then get one. */
		call hcs_$make_seg ("", "rcp_unload_seg", "", 01010b, temp_seg_ptr, code);
		if temp_seg_ptr = null () then do;
		     call com_err_ (code, me, "Error making rcp_unload_seg.");
		     return;
		end;
	     end;

	     rdi_ptr = temp_seg_ptr;			/* Put RCP data in temp seg. */
	     rdi.version_num = rdi_version_3;		/* Specify version number of the structure. */

	     call rcp_sys_$copy_data (rdi_ptr, 64*1024, code); /* Get the data. */
	     if code ^= 0 then do;
		call com_err_ (code, me, "Error getting data from RCP.");
		return;
	     end;


/*

   Now get the device type ptr for this volume type.

*/


	     call resource_info_$get_vtypex (volume_type, volume_type, vtypex, code);
	     if code ^= 0 then do;
		call com_err_ (code, me, "^a", volume_type);
		return;
	     end;

	     ddtype_ptr = addr (rdi.ddtypes (vtypex));


/*

   Now process each unattached device entry of this type.

*/


	     do i = ddtype.first_devicex to (ddtype.first_devicex+ddtype.num_devices-1);
		ddevice_ptr = addr (rdi.ddevices (i));
		if ^ddevice.flags.attached then do;	/* This one is not attached ... */
		     volume_name = ddevice.volume_name; /* ... so get the volume name and ... */
		     if volume_name ^= "" then	/* ... if its not blank then ... */
			call UNLOAD_VOLUME ();	/* ... unload it. */
		end;
	     end;


	     return;


	end UNLOAD_ALL;

/*

   This internal procedure attempts to unload the volume specified by
   volume_name.  If an error occurs, a message will be printed also.

*/


UNLOAD_VOLUME: proc ();


	     call rcp_sys_$unload (volume_type, volume_name, code);
	     if code ^= 0 then do;
		if code = error_table_$incorrect_volume_type then
		     mess = volume_type;
		else if code = error_table_$volume_not_loaded |
		code = error_table_$media_not_removable |
		code = error_table_$volume_busy then
		     mess = volume_name;
		else mess = "";
		call com_err_ (code, me, "^a", mess);
	     end;

	     return;


	end UNLOAD_VOLUME;

%include rcp_data_info;


     end rcp_op_cmnd_;
