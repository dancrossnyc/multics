/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


copy_words: cw: proc;

/* Fixed to show its long name in error messages 07/07/81 S. Herbst */

dcl
     whoami char (32) aligned varying,
     cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35)),
     expand_pathname_ entry (char (*), char (*), char (*), fixed bin (35)),
     hcs_$initiate_count entry (char (*), char (*), char (*), fixed bin (24), fixed bin (2), ptr, fixed bin (35)),
     hcs_$make_seg entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35)),
     hcs_$set_bc entry (char (*), char (*), fixed bin (24), fixed bin (35)),
     cv_oct_check_ entry (char (*), fixed bin (35)) returns (fixed bin (35)),
     com_err_ entry options (variable),
     words (nwords) fixed bin (35) based,
    (i, j, k, nwords) fixed bin,
    (inp, outp, p) ptr,
    (onamep, inamep) pointer,
    (inlen, outlen) fixed bin,
     iname char (inlen) based (inamep),
     outname char (outlen) based (onamep),
    (indir, outdir) char (168),
    (inename, outename) char (32),
     bc fixed bin (24),
     number char (numlen) based (np),
     numlen fixed bin,
     np ptr,
     hcs_$terminate_noname entry (ptr, fixed bin (35));
dcl  code fixed bin (35);

dcl (addr, divide, mod, null, pointer) builtin;
dcl  cleanup condition;

	whoami = "copy_words";
	inp = null;
	outp = null;

	call cu_$arg_ptr (1, inamep, inlen, code);
	if code ^= 0 then do;
err1:	     call com_err_ (code, whoami);
	     return;
	end;

	call expand_pathname_ (iname, indir, inename, code);
	if code ^= 0 then do;
err2:	     call com_err_ (code, whoami, iname);
	     return;
	end;


	call hcs_$initiate_count (indir, inename, "", bc, 0, inp, code);

	on cleanup begin;
	     if inp ^= null then call hcs_$terminate_noname (inp, code);
	     if outp ^= null then call hcs_$terminate_noname (outp, code);
	end;

	if inp = null then go to err2;


	call cu_$arg_ptr (2, onamep, outlen, code);
	if code ^= 0 then go to err1;

	call expand_pathname_ (outname, outdir, outename, code);
	if code ^= 0 then do;
err3:	     call com_err_ (code, whoami, outname);
	     return;
	end;

	call hcs_$make_seg (outdir, outename, "", 01011b, outp, code);
	if outp = null then go to err3;
	call cu_$arg_ptr (3, np, numlen, code);
	if code ^= 0 then go to err1;

	i = cv_oct_check_ (number, code);
	if code ^= 0 then do;
err4:	     code = 0;
	     call com_err_ (code, whoami, "Illegal conversion.  "||number);
	     return;
	end;

	call cu_$arg_ptr (4, np, numlen, code);
	if code ^= 0 | numlen = 0 then do;
	     j = divide (bc, 36, 17, 0)-1;
	     k = mod (bc, 36);
	     if k ^= 0 then j = j+1;
	end;
	else do;
	     k = 0;
	     j = cv_oct_check_ (number, code);
	     if code ^= 0 then go to err4;
	end;

	nwords = j-i+1;
	p = pointer (inp, i);

	outp -> words = p -> words;			/* make the copy */

	call hcs_$set_bc (outdir, outename, (nwords*36)+k, code);
	if code ^= 0 then go to err3;

	call hcs_$terminate_noname (inp, code);
	if code ^= 0 then go to err2;

	call hcs_$terminate_noname (outp, code);
	if code ^= 0 then go to err3;

     end;
