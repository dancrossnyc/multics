/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(87-10-22,Parisek), approve(87-10-29,MCR7790),
     audit(88-02-03,GDixon), install(88-05-04,MR12.2-1045):
     A. Change com_err_ call to an ioa_ call for reporting "No volumes found"
        message, so call_ec_ will not complain about it.
     B. Change non-existent error_table_$no_arg to error_table_$noarg.
                                                   END HISTORY COMMENTS */


/* format: style3 */
scavenge_vol:
     procedure options (variable);


/*  User-ring program to trigger a volume scavenge.

    scavenge_vol {pvname} {-control_args}

    Arguments accepted:

          -lv lvname      scavenges all volumes in logical volume lvname

	-all, -a	      scavenges all mounted volumes

	-auto	      used with -all or -lv, scavenges only those volumes
		      with volume inconsistencies

          -long, -lg      print metering data for the scavenge

          -debug, -db     enables various ring-0 debugging options,
		      mainly dumping more information into the
		      syserr log

          -trap	      traps to BOS at the end of the scavenge

	-meter	      dumps metering information into the syserr
		      log at the end of the scavenge

          -dump	      dumps VTOCEs damaged during the scavenge into
		      the syserr log

          -nopt	      inhibits the VTOCE read-ahead optimization and 
		      drops CPU priority periodically

          -check	      validates arguments and prints a list of PVs
		      which would be scavenged, but doesn't scavenge.

          -fault_under_AST_lock faults under AST lock for debugging.

          -fault_under_volmap_lock faults under volmap lock for debugging.

          -fault_under_PTL         faults under global PTL for debugging.

    If invoked as an active function, -check is assumed, and a list of
    PVs is returned.

    -fault control arguments not permitted in -check mode to avoid
    operator crazyness.

    Written July 1982 by J. Bongiovanni
    Modified October 1982 by J. Bongiovanni for fm_damaged and associated meters
    Modified 83-12-13 by BIM for faults control arguments.
*/

/*  Automatic  */

dcl	af_invocation	bit (1) aligned;
dcl	af_return_len	fixed bin (21);
dcl	af_return_ptr	ptr;
dcl	all_vols		bit (1) aligned;
dcl	auto_fl		bit (1) aligned;
dcl	arg_no		fixed bin;
dcl	1 arg_options	aligned like scavenger_options;
dcl	argl		fixed bin (21);
dcl	argp		ptr;
dcl	check_sw		bit (1) aligned;
dcl	clock_sec		float;
dcl       code                fixed bin (35);
dcl	1 copy_sc_meters	aligned like sc_meters;
dcl	dtx		fixed bin;
dcl	error_proc	entry options (variable) variable;
dcl	first_arg		fixed bin;
dcl	inconsistency_count fixed bin;
dcl	have_lvname	bit (1) aligned;
dcl	have_pvname	bit (1) aligned;
dcl	long_sw		bit (1) aligned;
dcl	lvname		char (32);
dcl	lvx		fixed bin;
dcl	n_args		fixed bin;
dcl	n_pvs		fixed bin;
dcl	pv_found		bit (1) aligned;
dcl	pvx		fixed bin;
dcl	pvname		char (32);
dcl	scavenge_in_progress
			bit (1) aligned;
dcl	temp_segs		(2) ptr;
dcl	vcpu_sec		float;

/*  Static  */

dcl	MYNAME		char (12) int static options (constant) init ("scavenge_vol");

/*  Based  */

dcl	af_return		char (af_return_len) varying based (af_return_ptr);
dcl	arg		char (argl) based (argp);
dcl	1 pv_struct	(n_pvs) aligned based (temp_segs (2)),
	  2 pvtx		fixed bin,
	  2 pvid		bit (36) aligned,
	  2 pvname	char (32),
	  2 lvname	char (32);


/*  External  */

dcl	error_table_$badopt fixed bin (35) external;
dcl	error_table_$duplicate_request
			fixed bin (35) external;
dcl	error_table_$inconsistent
			fixed bin (35) external;
dcl	error_table_$logical_volume_not_defined
			fixed bin (35) external;
dcl	error_table_$noarg  fixed bin (35) external;
dcl	error_table_$not_act_fnc
			fixed bin (35) external;
dcl	error_table_$not_privileged
			fixed bin (35) external;
dcl	error_table_$pvid_not_found
			fixed bin (35) external;
dcl	scavenge_vol_severity_
			fixed bin external static;

/*  Entry  */

dcl	active_fnc_err_	entry options (variable);
dcl	com_err_		entry options (variable);
dcl	cu_$af_return_arg	entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl	cu_$arg_ptr	entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl	get_temp_segments_	entry (char (*), (*) ptr, fixed bin (35));
dcl	hphcs_$scavenge_volume
			entry (fixed bin, bit (36) aligned, ptr, ptr, fixed bin (35));
dcl	ioa_		entry options (variable);
dcl	mdc_$read_disk_table
			entry (ptr, fixed bin (35));
dcl	release_temp_segments_
			entry (char (*), (*) ptr, fixed bin (35));
dcl	ring_zero_peek_$by_definition
			entry (char (*), char (*), fixed bin (18), ptr, fixed bin (19), fixed bin (35));


/*  Builtin  */

dcl	addr		builtin;
dcl	char		builtin;
dcl	float		builtin;
dcl	null		builtin;
dcl	size		builtin;
dcl	unspec		builtin;

/*  Condition  */

dcl	cleanup		condition;
dcl	linkage_error	condition;
%page;
/*  Pick up arguments and validate them  */


	unspec (arg_options) = ""b;
	long_sw, have_pvname, have_lvname, all_vols, auto_fl, af_invocation, check_sw = "0"b;
	error_proc = com_err_;

	n_pvs = 0;
	scavenge_vol_severity_ = 1;

	call cu_$af_return_arg (n_args, af_return_ptr, af_return_len, code);
	if code = 0
	then do;
		af_invocation = "1"b;
		check_sw = "1"b;
		error_proc = active_fnc_err_;
	     end;
	else if code ^= error_table_$not_act_fnc
	then do;
		call error_proc (code, MYNAME);
		return;
	     end;

	if n_args = 0
	then do;
USAGE_IS:
		call error_proc (0, MYNAME, "Usage is:     ^a {pvname} {-lv LVNAME} {-all} {-auto} {-nopt} {-dump}",
		     MYNAME);
		call RETURN_AF ("0"b);
		return;
	     end;

	call cu_$arg_ptr (1, argp, argl, code);
	if char (arg, 1) = "-"
	then first_arg = 1;
	else do;
		pvname = arg;
		have_pvname = "1"b;
		first_arg = 2;
	     end;

	do arg_no = first_arg to n_args;
	     call cu_$arg_ptr (arg_no, argp, argl, code);
	     if arg = "-long" | arg = "-lg"
	     then long_sw = "1"b;
	     else if arg = "-debug" | arg = "-db"
	     then arg_options.debug = "1"b;
	     else if arg = "-trap"
	     then arg_options.trap = "1"b;
	     else if arg = "-meter"
	     then arg_options.print_meters = "1"b;
	     else if arg = "-dump"
	     then arg_options.dump = "1"b;
	     else if arg = "-no_optimize" | arg = "-nopt"
	     then arg_options.no_optimize = "1"b;
	     else if arg = "-check"
	     then check_sw = "1"b;
	     else if arg = "-all" | arg = "-a"
	     then all_vols = "1"b;
	     else if arg = "-auto"
	     then auto_fl = "1"b;
	     else if arg = "-lv"
	     then do;
		     if have_lvname
		     then do;
			     call error_proc (error_table_$duplicate_request, MYNAME, "-lv");
			     return;
			end;
		     arg_no = arg_no + 1;
		     call cu_$arg_ptr (arg_no, argp, argl, code);
		     if code ^= 0
		     then do;
LV_ERROR:
			     call error_proc (code, MYNAME, "Logical volume name");
			     call RETURN_AF ("0"b);
			     return;
			end;
		     if char (arg, 1) = "-"
		     then do;
			     code = error_table_$noarg;
			     goto LV_ERROR;
			end;
		     have_lvname = "1"b;
		     lvname = arg;
		end;
	     else if arg = "-fault_under_AST_lock"
	     then arg_options.fault_under_ast = "1"b;
	     else if arg = "-fault_under_volmap_lock"
	     then arg_options.fault_under_volmap = "1"b;
	     else if arg = "-fault_under_PTL"
	     then arg_options.fault_under_pt = "1"b;
	     else do;
		     call error_proc (error_table_$badopt, MYNAME, arg);
		     call RETURN_AF ("0"b);
		     return;
		end;
	end;

%page;
/*  Check arguments for consistency  */


	if check_sw
	     & (arg_options.fault_under_ast | arg_options.fault_under_volmap | arg_options.fault_under_pt
	     | arg_options.debug | arg_options.dump)
	then do;
	          scavenge_vol_severity_ = 1;
		call error_proc (error_table_$inconsistent, MYNAME,
		     "The debugging options (-debug, -dump, -fault_*) are not valid with -check.");
		call RETURN_AF ("0"b);
	     end;
	if (have_pvname & have_lvname) | (have_pvname & all_vols) | (have_lvname & all_vols)
	then do;
		call error_proc (error_table_$inconsistent, MYNAME, "^[pvname ^]^[-lv ^]^[-all^]", have_pvname,
		     have_lvname, all_vols);
		call RETURN_AF ("0"b);
		return;
	     end;
	if ^(have_lvname | all_vols) & auto_fl
	then do;
		call error_proc (error_table_$inconsistent, MYNAME, "-all or -lv must be used with -auto");
		call RETURN_AF ("0"b);
		return;
	     end;

%page;
/*  Build list of physical volumes to scavenge.  */


	on cleanup call CLEAN_OUT;

	call get_temp_segments_ (MYNAME, temp_segs, code);
	if code ^= 0
	then do;
		call error_proc (code, MYNAME, "Getting temp segments.");
		call RETURN_AF ("0"b);
		return;
	     end;

	dtp = temp_segs (1);
	call mdc_$read_disk_table (dtp, code);
	if code ^= 0
	then do;
		call error_proc (code, MYNAME, "Reading disk table.");
		call CLEAN_OUT;
		call RETURN_AF ("0"b);
		return;
	     end;


	if have_pvname
	then do;
		pv_found = "0"b;
		do dtx = 1 to dt.n_entries while (^pv_found);
		     dtep = addr (dt.array (dtx));
		     if dte.used & (dte.pvname = pvname)
		     then do;
			     pv_found = "1"b;
			     call ADD_PVTX (dtx);
			end;
		end;
		if ^pv_found
		then do;
			call error_proc (error_table_$pvid_not_found, MYNAME, pvname);
			call CLEAN_OUT;
			call RETURN_AF ("0"b);
			return;
		     end;
	     end;
	else if have_lvname
	then do;
		do lvx = 1 to dt.n_lv_entries;
		     lvep = addr (dt.lv_array (lvx));
		     if lve.used & (lve.lvname = lvname)
		     then goto LV_FOUND;
		end;
		call error_proc (error_table_$logical_volume_not_defined, MYNAME, lvname);
		call CLEAN_OUT;
		call RETURN_AF ("0"b);
		return;

LV_FOUND:
		do dtx = 1 to dt.n_entries;
		     dtep = addr (dt.array (dtx));
		     if dte.used & (dte.lvx = lvx)
		     then call ADD_PVTX (dtx);
		end;
	     end;
	else if all_vols
	then do;
		do dtx = 1 to dt.n_entries;
		     dtep = addr (dt.array (dtx));
		     if dte.used
		     then call ADD_PVTX (dtx);
		end;
	     end;

	if n_pvs = 0
	then do;
		if ^af_invocation
		then call ioa_ ("^a: No volumes found", MYNAME);
		call CLEAN_OUT;
		call RETURN_AF ("0"b);
		return;
	     end;

	scavenge_vol_severity_ = 0;

	if check_sw
	then do;					/* Don't really want scavenge */
		call RETURN_AF ("1"b);
		call CLEAN_OUT;
		return;
	     end;
%page;
/*  Scavenge each volume.  */


	do pvx = 1 to n_pvs;
	     inconsistency_count = INCONSISTENCY_COUNT (pv_struct (pvx).pvtx, scavenge_in_progress);

	     if auto_fl
	     then if inconsistency_count <= 0
		then goto NEXT_PV;

	     call ioa_ ("Scavenging volume ^a of logical volume ^a", pv_struct (pvx).pvname, pv_struct (pvx).lvname);

	     on linkage_error goto LINKAGE_ERROR;

	     call hphcs_$scavenge_volume (pv_struct (pvx).pvtx, pv_struct (pvx).pvid, addr (arg_options),
		addr (copy_sc_meters), code);

	     revert linkage_error;

	     if code ^= 0
	     then call error_proc (code, MYNAME, "Scavenging ^a.^[ Another scavenge is in progress for the volume.",
		     pv_struct (pvx).pvname, scavenge_in_progress);

	     if long_sw & (code = 0)
	     then do;				/* Wants print of meters */
		     clock_sec = float (copy_sc_meters.clock_time) / 1.0e6;
		     vcpu_sec = float (copy_sc_meters.vcpu) / 1.0e6;

		     call ioa_ ("^/Scavenge of ^a took ^7.1f seconds ^7.1f VCPU seconds ^4d page faults^/",
			pv_struct (pvx).pvname, clock_sec, vcpu_sec, copy_sc_meters.pf);
		     call ioa_ ("^5xVTOCES: ^d examined  ^d per-process  ^d per-bootload  ^d FMDamaged ^d freed^/",
			copy_sc_meters.n_vtoces, copy_sc_meters.n_vtoces_per_proc, copy_sc_meters.n_vtoces_per_boot,
			copy_sc_meters.n_vtoces_fmd, copy_sc_meters.n_vtoces_freed);
		     call ioa_ (
			"^5xRecords: ^d examined  ^d pot. conflicts ^d FMD conflicts  ^d conflicts  ^d lost^/",
			copy_sc_meters.n_records, copy_sc_meters.n_conflicts, copy_sc_meters.n_fmd_conflicts,
			copy_sc_meters.n_real_conflicts, copy_sc_meters.n_lost_records);
		end;

NEXT_PV:
	end;

GLOBAL_RETURN:
	call CLEAN_OUT;
	return;


LINKAGE_ERROR:
	call error_proc (error_table_$not_privileged, MYNAME, "hphcs_");
	call CLEAN_OUT;
	return;

%page;
/*  Internal Procedure to add a volume to the scavenge table  */

ADD_PVTX:
     proc (Pvtx);

dcl	Pvtx		fixed bin;

	if auto_fl
	then if INCONSISTENCY_COUNT (Pvtx, ("0"b)) <= 0
	     then return;

	n_pvs = n_pvs + 1;
	pv_struct (n_pvs).pvtx = Pvtx;
	pv_struct (n_pvs).pvid = dt.array (Pvtx).pvid;
	pv_struct (n_pvs).pvname = dt.array (Pvtx).pvname;
	pv_struct (n_pvs).lvname = dt.lv_array (dt.array (Pvtx).lvx).lvname;

     end ADD_PVTX;
%page;
/*  Internal Procedure to return the volume inconsistency count for a specified
    physical volume. Also checks whether a scavenge is likely in progress. */

INCONSISTENCY_COUNT:
     proc (Pvtx, Scavenge_In_Progress) returns (fixed bin);

dcl	Pvtx		fixed bin;
dcl	Scavenge_In_Progress
			bit (1) aligned;

dcl	1 local_pvte	aligned like pvte;

	call ring_zero_peek_$by_definition ("pvt", "array", ((Pvtx - 1) * size (pvte)), addr (local_pvte), size (pvte),
	     code);
	if code ^= 0
	then do;
		call error_proc (code, MYNAME, "^a", dt.array (Pvtx).pvname);
		goto GLOBAL_RETURN;
	     end;
	Scavenge_In_Progress = (local_pvte.scavenger_block_rel ^= ""b);
	return (local_pvte.vol_trouble_count);

     end INCONSISTENCY_COUNT;
%page;
/*  Internal Procedure to return string of PVs if invoked as an active function,
    or to print (non-empty) list of PVs if invoked with -check.  */

RETURN_AF:
     proc (Have_Pvs);

dcl	Have_Pvs		bit (1) aligned;

dcl	pvx		fixed bin;

	if af_invocation
	then do;
		af_return = "";
		if Have_Pvs
		then do pvx = 1 to n_pvs;
			af_return = af_return || pv_struct (pvx).pvname || " ";
		     end;
	     end;
	else if check_sw
	then do;
		if Have_Pvs & (n_pvs > 0)
		then do;
			call ioa_ ("^/Volumes to be Scavenged:^/");
			do pvx = 1 to n_pvs;
			     call ioa_ ("^3x^a^-(^a)", pv_struct (pvx).pvname, pv_struct (pvx).lvname);
			end;
			call ioa_ ("");
		     end;
	     end;

     end RETURN_AF;



%page;
/*  Internal Procedure to clean up  */

CLEAN_OUT:
     proc;

	if temp_segs (1) ^= null ()
	then call release_temp_segments_ (MYNAME, temp_segs, code);
	temp_segs (1) = null ();

     end CLEAN_OUT;


/* format: off  */
%page; %include disk_table;
%page; %include pvte;
%page; %include scavenger_data;

     end scavenge_vol;
