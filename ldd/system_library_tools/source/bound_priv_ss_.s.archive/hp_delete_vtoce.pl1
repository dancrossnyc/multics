/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


hp_delete_vtoce: proc ();

/* *	This procedure is simply an interface used to delete a specified
   *	VTOCE, either causing a forward connection failure or curing a
   *	reverse connection failure. It checks before causing a forward
   *	failure, unless asked not to.
   *
   *	Written sometime in 1979, W. Olin Sibert
   *	Cleaned up and installed, 06/21/81, WOS
   */

dcl  arg char (al) based (ap);
dcl  al fixed bin (21);
dcl  ap pointer;
dcl  code fixed bin (35);
dcl (argno, nargs) fixed bin;
dcl  vtoce_argno fixed bin;

dcl  pvname char (32);
dcl  pvid bit (36) aligned;
dcl  pvtx fixed bin;
dcl  vtocx fixed bin (18);
dcl  force_sw bit (1) aligned;
dcl  check_sw bit (1) aligned;
dcl  query_sw bit (1) aligned;
dcl  brief_sw bit (1) aligned;
dcl  clear_sw bit (1) aligned;

dcl  com_err_ entry options (variable);
dcl  command_query_$yes_no entry options (variable);
dcl  cu_$arg_count entry (fixed bin, fixed bin (35));
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl  cv_oct_check_ entry (char (*), fixed bin (35)) returns (fixed bin (35));
dcl  hphcs_$clear_vtoce entry (bit (36) aligned, fixed bin (18), fixed bin (35));
dcl  hphcs_$delete_vtoce entry (bit (36) aligned, bit (36) aligned, fixed bin (18), fixed bin (35));
dcl  ioa_ entry options (variable);
dcl  phcs_$get_vtoce entry (fixed bin, fixed bin (18), ptr, fixed bin (35));
dcl  pvname_to_pvtx_ entry (char (*), fixed bin, bit (36) aligned, fixed bin (35));
dcl  vpn_cv_uid_path_$ent entry (ptr, char (*), bit (36) aligned, fixed bin (35));

dcl  error_table_$bad_conversion fixed bin (35) external static;
dcl  error_table_$badopt fixed bin (35) external static;
dcl  error_table_$inconsistent fixed bin (35) external static;
dcl  error_table_$moderr fixed bin (35) external static;
dcl  error_table_$no_dir fixed bin (35) external static;
dcl  error_table_$noarg fixed bin (35) external static;
dcl  error_table_$noentry fixed bin (35) external static;

dcl  WHOAMI char (32) internal static options (constant) init ("hp_delete_vtoce");

dcl  linkage_error condition;

dcl (addr, char) builtin;

/*  */

	vtocx = -1;				/* some initializations */
	pvtx = -1;
	vtoce_argno = -1;
	force_sw = "0"b;				/* If on, forces lack of questions */
	brief_sw = "0"b;				/* If on, suppresses informative message */
	query_sw = "0"b;				/* If on, forces a query (opposite of -force, sort of) */
	check_sw = "1"b;				/* Causes checking for connectedness */
	clear_sw = "0"b;				/* Just delete by default */

	call cu_$arg_count (nargs, code);
	if code ^= 0 then do;
	     call com_err_ (code, WHOAMI);
MAIN_RETURN:   return;
	     end;

	do argno = 1 to nargs;
	     call cu_$arg_ptr (argno, ap, al, (0));
	     if (arg = "-force") | (arg = "-fc") then force_sw = "1"b;
	     else if (arg = "-brief") | (arg = "-bf") then brief_sw = "1"b;
	     else if (arg = "-no_check") | (arg = "-nck") then check_sw = "0"b;
	     else if (arg = "-check") | (arg = "-ck") then check_sw = "1"b;
	     else if (arg = "-query") | (arg = "-qy") then query_sw = "1"b;
	     else if (arg = "-clear") then clear_sw = "1"b;
	     else if (arg = "-delete") then clear_sw = "0"b;
	     else if char (arg, 1) = "-" then do;
		code = error_table_$badopt;
BAD_ARGUMENT:	call com_err_ (code, WHOAMI, "^a", arg);
		goto MAIN_RETURN;
		end;

	     else if pvtx < 0 then do;		/* first non control arg is PV name */
		pvname = arg;			/* otherwise, remember its name */
		call pvname_to_pvtx_ (pvname, pvtx, pvid, code); /* Get pvtx and pvid */
		if code ^= 0 then goto BAD_ARGUMENT;
		end;

	     else do;				/* second through last are VTOCE indices */
		vtocx = cv_oct_check_ (arg, code);
		if code ^= 0 then do;
		     code = error_table_$bad_conversion;
BAD_VTOCE_INDEX:	     call com_err_ (code, WHOAMI,
			"VTOCE index must be a positive octal number, not ""^a"".", arg);
		     goto MAIN_RETURN;
		     end;

		if vtocx < 0 then goto BAD_VTOCE_INDEX;
		if vtoce_argno < 0 then vtoce_argno = argno; /* Remember where to start */
		end;
	     end; 				/* of argument processing */

/*  */

	if force_sw & query_sw then do;
	     call com_err_ (error_table_$inconsistent, WHOAMI, "-force and -query");
	     goto MAIN_RETURN;
	     end;

	if vtoce_argno < 0 then do;			/* not enough args */

	     call com_err_ (error_table_$noarg, WHOAMI,
		"^/Usage:^-^a pvname vtocx(octal) {-query} {-force} {-brief} {-no_check}", WHOAMI);
	     goto MAIN_RETURN;
	     end;

	on linkage_error begin;			/* not enough access, sorry. */
	     call com_err_ (error_table_$moderr, WHOAMI,
		"This operation requires access to phcs_ and hphcs_");
	     goto MAIN_RETURN;
	     end;

	do argno = vtoce_argno to nargs;		/* Loop through VTOCE indices */
	     call cu_$arg_ptr (argno, ap, al, (0));
	     if char (arg, 1) ^= "-" then do;		/* Not a leftover control argument */
		vtocx = cv_oct_check_ (arg, (0));	/* Conversion is guaranteed to work */

		call expunge ();			/* Do it */
		end;
	     end; 				/* of loop through vtoces */

	return;

/*  */

expunge: proc ();

/* This procedure does the actual deletion. It inherits the flag switches, as well as
   pvname, pvid, pvtx and vtocx. */

dcl  pathname char (168);
dcl  answer bit (1) aligned;
dcl  vtoce_uid bit (36) aligned;
dcl  connected bit (1) aligned;
dcl  asked bit (1) aligned;

dcl 1 local_vtoce aligned like vtoce;


	vtocep = addr (local_vtoce);

	call phcs_$get_vtoce (pvtx, vtocx, vtocep, code); /* take a look at it first */
	if code ^= 0  then do;
	     call com_err_ (code, WHOAMI, "Reading VTOCE ^o from ^a.", vtocx, pvname);
	     return;
	     end;

	vtoce_uid = vtoce.uid;			/* find out who we are */

	if vtoce_uid = ""b then do;			/* sorry, wrong number */
	     call com_err_ (0, WHOAMI, "VTOCE ^o on ^a is free.", vtocx, pvname);
	     return;				/* nothing to do this time */
	     end;

/* *	Note that this ought to get replaced by a more useful call to hardcore which resolves
   *	the UID path deterministically and correctly; unfortunately, hc_backup_$decode_uidpath
   *	just can't hack it, since it's only in the business of finding directories. */

	if check_sw then do;		         /* find out if we're connected */
	     call vpn_cv_uid_path_$ent (addr (vtoce.uid_path), pathname, vtoce_uid, code);
	     if code = error_table_$noentry then connected = "0"b;
	     else if code = error_table_$no_dir then connected = "0"b;
	     else connected = "1"b;			/* either is, or might be */
	     end;
	else connected = "0"b;			/* Can't check */

	asked = "0"b;				/* Used to suppress informative message */

	if check_sw & ^query_sw & ^connected then;	/* If of no interest, just delete it */

	else if (check_sw | query_sw) & connected then do; /* Ask the question about a connected VTOCE */
	     call command_query_$yes_no (answer, 0, WHOAMI, "",
		"VTOCE ^o on ^a is ^a.^/Do you wish to ^[clear^;delete^] it anyway?",
		vtocx, pvname, pathname, clear_sw);
	     if answer = "0"b then return;		/* Don't bother */
	     asked = "1"b;
	     end; 				/* of case to check for connection */

	else if ^force_sw then do;			/* if it is (or might be) connected, ask user */
	     call command_query_$yes_no (answer, 0, WHOAMI, "",
		"Do you really want to ^[clear^;delete^] VTOCE ^o (""^a"") on ^a ??",
		clear_sw, vtocx, vtoce.primary_name, pvname);
	     if answer = "0"b then return;		/* chickened out! */
	     asked = "1"b;
	     end;

	if ^clear_sw then
	     call hphcs_$delete_vtoce (vtoce_uid, pvid, vtocx, code);
	else call hphcs_$clear_vtoce (pvid, vtocx, code);

	if (code = 0) & (^brief_sw) & (^asked) then do;	/* successful. Tell user? */
	     call ioa_ ("^a: ^[Cleared^;Deleted^] ^[unconnected ^]VTOCE ^o (""^a"") on ^a.",
		WHOAMI, clear_sw, (check_sw & ^connected), vtocx, vtoce.primary_name, pvname);
	     end;

	 else if code ^= 0 then call com_err_ (code, WHOAMI, /* otherwise, complain since some unknown lossage occurred */
	      "Unable to ^[clear^;delete^] VTOCE ^o (""^a"") on ^a.", clear_sw, vtocx, vtoce.primary_name, pvname);

	return;					/* all done */
	end expunge;

%page; %include vtoce;

	end hp_delete_vtoce;
