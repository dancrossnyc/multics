/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


dump_partition:
     procedure () options (variable);

/* *	Command to use privileged partition I/O gate to display contents of disk partitions.
   *
   *	    dump_partition Pvname Partition_name Offset {Length} {-control_args}
   *	         -header, -no_header, -short, -long, -character
   *
   *	10/18/80, W. Olin Sibert
   */

dcl  ap pointer;
dcl  al fixed bin (21);
dcl  arg char (al) based (ap);
dcl  rsp pointer;
dcl  rsl fixed bin (21);
dcl  rs char (rsl) varying based (rsp);
dcl  code fixed bin (35);
dcl  complain entry variable options (variable);
dcl (nargs, argno) fixed bin;
dcl  af_sw bit (1) aligned;

dcl  header_sw bit (1) aligned;
dcl  pvname char (32);
dcl  part_name char (4);
dcl  pvid bit (36) aligned;
dcl  offset fixed bin (35);
dcl  lth fixed bin (18);
dcl  part_lth fixed bin (35);

dcl 1 ds_arg unaligned,				/* flags argument to dump_segment_ */
   (2 address,
    2 offset,
    2 short,
    2 bcd,
    2 ascii,
    2 long,
    2 ebcdic9,
    2 ebcdic8,
    2 fourbit,
    2 hex8,
    2 hex9) bit (1) unaligned;

dcl  active_fnc_err_ entry options (variable);
dcl  com_err_ entry options (variable);
dcl  cu_$af_return_arg entry (fixed bin, pointer, fixed bin (21), fixed bin (35));
dcl  cu_$arg_ptr entry (fixed bin, pointer, fixed bin (21), fixed bin (35));
dcl  cv_oct_check_ entry (char (*), fixed bin (35)) returns (fixed bin (35));
dcl  dump_segment_ entry (pointer, pointer, fixed bin, fixed bin (35), fixed bin (18), bit (*));
dcl  find_partition_ entry (char (*), char (*), bit (36) aligned, fixed bin (35), fixed bin (35), fixed bin (35));
dcl  hphcs_$read_partition entry (bit (36) aligned, char (*), fixed bin (35), pointer, fixed bin (18), fixed bin (35));
dcl  hphcs_$write_partition entry (bit (36) aligned, char (*), fixed bin (35), pointer, fixed bin (18), fixed bin (35));
dcl  ioa_ entry options (variable);
dcl  ioa_$rsnpnnl entry options (variable);

dcl (error_table_$badopt,
     error_table_$too_many_args,
     error_table_$noarg,
     error_table_$not_act_fnc,
     error_table_$bad_conversion) fixed bin (35) external static;

dcl  iox_$user_output pointer external static;

dcl  WHOAMI char (32) internal static options (constant) init ("dump_partition");

dcl  linkage_error condition;

dcl (addr, char, length, maxlength, rtrim, string) builtin;

/*  */

	pvname = "";
	part_name = "";
	offset = -1;
	lth = -1;
	string (ds_arg) = ""b;
	header_sw = "1"b;

	call cu_$af_return_arg (nargs, rsp, rsl, code);
	if code = 0 then do;
	     rs = "";
	     complain = active_fnc_err_;
	     af_sw = "1"b;
	     end;

	else if code = error_table_$not_act_fnc then do;
	     complain = com_err_;
	     af_sw = "0"b;
	     end;

	else do;
	     call com_err_ (code, WHOAMI);
RETURN:	     return;
	     end;

	do argno = 1 to nargs;
	     call cu_$arg_ptr (argno, ap, al, (0));

	     if (arg = "-long") | (arg = "-lg") then
		ds_arg.long = "1"b;
	     else if (arg = "-short") | (arg = "-sh") then
		ds_arg.short = "1"b;
	     else if (arg = "-characters") | (arg = "-character") | (arg = "-char") | (arg = "-ch") then
		ds_arg.ascii = "1"b;
	     else if (arg = "-bcd") then
		ds_arg.bcd = "1"b;
	     else if (arg = "-header") | (arg = "-he") then
		header_sw = "1"b;
	     else if (arg = "-no_header") | (arg = "-nhe") then
		header_sw = "1"b;

	     else if char (arg, 1) = "-" then do;
		call complain (error_table_$badopt, WHOAMI, "^a", arg);
		goto RETURN;
		end;

	     else if pvname = "" then			/* first arg is volume name */
		pvname = arg;

	     else if part_name = "" then do;		/* second arg is partition name */
		if length (rtrim (arg)) > maxlength (part_name) then do;
		     call complain (0, WHOAMI, "Partition name must be ^d characters or less. ^a",
			maxlength (part_name), arg);
		     goto RETURN;
		     end;

		part_name = rtrim (arg);
		end;

	     else if offset < 0 then do;		/* third arg is offset */
		offset = cv_oct_check_ (arg, code);
		if code ^= 0 then
		     code = error_table_$bad_conversion;

		if (code ^= 0) | (offset < 0) then do;
		     call complain (code, WHOAMI, "Offset must be a nonnegative octal number, not ^a", arg);
		     goto RETURN;
		     end;
		end;

	     else if lth < 0 then do; 		/* fourth arg is length to dump */
		lth = cv_oct_check_ (arg, code);
		if code ^= 0 then
		     code = error_table_$bad_conversion;

		if (code ^= 0) | (lth < 0) then do;
		     call complain (code, WHOAMI, "Length must be a nonnegative octal number, not ^a", arg);
		     goto RETURN;
		     end;
		end;

	     else do;
		code = error_table_$too_many_args;
		goto USAGE;
		end;
	     end; 				/* of argument loop */

	if offset < 0 then do;			/* length is optional */
	     code = error_table_$noarg;
USAGE:	     call complain (code, WHOAMI,
		"^/Usage:^-^a pvname part_name offset {length} {-control_args}", WHOAMI);
	     goto RETURN;
	     end;

/*  */

	call find_partition_ (pvname, part_name, pvid, (0), part_lth, code);
	if code ^= 0 then do;
	     call complain (code, WHOAMI, "Partition ^a on ^a", part_name, pvname);
	     goto RETURN;
	     end;

	if lth <= 0 then				/* apply defaults */
	     lth = 1;

	if (offset + lth) > part_lth then do;
	     call com_err_ (0, WHOAMI, "Partition ^a on ^a is only ^oo words long. Cannot dump ^oo words at ^oo.",
		part_name, pvname, part_lth, lth, offset);
	     goto RETURN;
	     end;

	ds_arg.offset = "1"b;			/* print offset if we got a non-zero offset */
						/* Never print address column, because it's useless */

	begin;					/* get a place to put the copied data */

dcl  copy_data (lth) bit (36) aligned;

	     on condition (linkage_error) begin;	/* exit gracefully */
		call complain (0, WHOAMI,
		     "This opertaion requires privileged access (hphcs_) not given to this process.");

		goto RETURN;			/* and punt */
		end;

	     call hphcs_$read_partition (pvid, part_name, offset, addr (copy_data), lth, code);

	     revert condition (linkage_error);

	     if code ^= 0 then do;
		call complain (code, WHOAMI, "Cannot read ^o word^[s^] from PV ^a, partition ^a|^o",
		     lth, (lth ^= 1), pvname, part_name, offset);
		goto RETURN;
		end;

	     if af_sw then				/* return the result */
		call ioa_$rsnpnnl ("^(^w^x^)", rs, (0), copy_data);

	     else do;
		if header_sw then
		     call ioa_ ("^/^3xVolume ^a, partition ^a: ^o word^[s^] at offset ^o:^/",
			pvname, part_name, lth, (lth ^= 1), offset);

		call dump_segment_ (iox_$user_output, addr (copy_data), 0, offset, lth, string (ds_arg));

		call ioa_ ("");			/* blank line at the end */
		end;				/* of command case */
	     end; 				/* begin block */

	goto RETURN;				/* all done */

	end dump_partition;
