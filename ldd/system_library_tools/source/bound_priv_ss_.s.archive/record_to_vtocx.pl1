/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(86-01-16,Fawcett), approve(86-04-10,MCR7383),
     audit(86-05-15,Martinson), install(86-07-18,MR12.0-1098):
     Add support for 512_WORD_IO devices, 3380 and 3390.
                                                   END HISTORY COMMENTS */


record_to_vtocx:
     procedure () options (variable);

/* adapted from adopt_seg  Bernard Greenberg 09/05/77 */
/* modified for -pathname, to print the path of segment owning the address, E. A. Ranzenbach 06/05/80   */
/* Modified to fix loop bug, increase max number of records, 04/17/81, W. Olin Sibert */
/* Modified to use a temp segment for the disk table, 07/11/81, Art Beattie */
/* Modified for -all, 9 August 1981, WOS */
/* Modified for new PVTE and to check address against paging region, March 1982, J. Bongiovanni */

dcl  nargs fixed bin;
dcl  argno fixed bin;
dcl  arg char (argl) based (argp);
dcl  argl fixed bin (21);
dcl  argp ptr;

dcl  recnoa (MAX_RECORDS) fixed bin;
dcl  found_address (MAX_RECORDS) bit (1) unaligned;

dcl  recno fixed bin;
dcl  naddrs fixed bin;
dcl  highest_vtocx fixed bin;

dcl  addrno fixed bin;
dcl  pageno fixed bin;
dcl  last_page fixed bin;
dcl  addrs_left fixed bin;
dcl (r, s) fixed bin;
dcl  dev_type fixed bin;
dcl  pvname char (32);
dcl  pvt_size fixed bin (19);
dcl  code fixed bin (35);
dcl  pathname char (168);
dcl (pvtx, vtocx) fixed bin;
dcl  pvid bit (36) aligned;

dcl  all_sw bit (1) aligned;
dcl  path_sw bit (1) aligned;
dcl  sector_sw bit (1) aligned;

dcl  1 local_vtoce aligned like vtoce;

dcl  error_table_$badopt fixed bin (35) external static;
dcl  error_table_$noarg fixed bin (35) external static;
dcl  error_table_$too_many_args fixed bin (35) external static;

dcl  com_err_ entry options (variable);
dcl  cu_$arg_count entry (fixed bin, fixed bin (35));
dcl  cu_$arg_ptr entry (fixed bin, pointer, fixed bin (21), fixed bin (35));
dcl  cv_oct_check_ entry (char (*), fixed bin (35)) returns (fixed bin);
dcl  get_temp_segment_ entry (char (*), ptr, fixed bin (35));
dcl  ioa_ entry options (variable);
dcl  phcs_$get_vtoce entry (fixed bin, fixed bin, ptr, fixed bin (35));
dcl  pvname_to_pvtx_ entry (char (*), fixed bin, bit (36) aligned, fixed bin (35));
dcl  release_temp_segment_ entry (char (*), ptr, fixed bin (35));
dcl  ring_zero_peek_$get_max_length entry (char(*), fixed bin(19), fixed bin(35));
dcl  ring_zero_peek_$by_name entry (char(*), fixed bin(18), ptr, fixed bin(19), fixed bin(35));
dcl  vpn_cv_uid_path_$ent entry (ptr, char (*), bit (36), fixed bin (35));

dcl  MAX_RECORDS fixed bin internal static options (constant) init (500);
dcl  myname char (32) init ("record_to_vtocx") internal static options (constant);

dcl  cleanup condition;

dcl (addr, binary, char, divide, hbound, null) builtin;

/*  */

	path_sw = "0"b;
	all_sw = "0"b;
	pvtp = null;

	on condition (cleanup) begin;
	     if pvtp ^= null () then call release_temp_segment_ (myname, pvtp, (0));
	     end;

	call cu_$arg_count (nargs, code);
	if code ^= 0 then go to USAGE;

	if nargs < 1 then do;
USAGE_NOARG:   code = error_table_$noarg;
USAGE:	     call com_err_ (code, myname,
		"^/Usage:^-^a pvname rec_no1 {... rec_no^d} {-sector NNN} {-pathname}",
		myname, hbound (recnoa, 1));
	     return;
	     end;

	call cu_$arg_ptr (1, argp, argl, code);
	pvname = arg;
	call pvname_to_pvtx_ (pvname, pvtx, pvid, code);
	if code ^= 0 then do;
	     call com_err_ (code, myname, pvname);
	     go to MAIN_RETURN;
	     end;

	call get_temp_segment_ (myname, pvtp, code);
	if code ^= 0 then do;
CANNOT_GET_PVT:
	     call com_err_ (code, myname, "Cannot get ring zero PVT");
	     goto MAIN_RETURN;
	     end;

	call ring_zero_peek_$get_max_length ("pvt", pvt_size, code);
	if code ^= 0 then goto CANNOT_GET_PVT;
	
	call ring_zero_peek_$by_name ("pvt", 0, pvtp, pvt_size, code);
	if code ^= 0 then goto CANNOT_GET_PVT;
	
	pvt_arrayp = addr (pvt.array);
	
	

/*  */

	naddrs = 0;				/* Number of record arguments */
	sector_sw = "0"b;
	dev_type = pvt_array (pvtx).device_type;

	do argno = 2 to nargs;
	     call cu_$arg_ptr (argno, argp, argl, (0));

	     if (arg = "-pathname") | (arg = "-pn") then path_sw = "1"b;
	     else if (arg = "-all") | (arg = "-a") then all_sw = "1"b;
	     else if (arg = "-sector") then sector_sw = "1"b; /* Next number is a sector number */
	     else if char (arg, 1) = "-" then do;
		call com_err_ (error_table_$badopt, myname, "^a", arg);
		goto MAIN_RETURN;
		end;

	     else do;
		recno = cv_oct_check_ (arg, code);
		if code ^= 0 then do;
		     call com_err_ (0, myname, "Invalid octal address ^a", arg);
		     go to MAIN_RETURN;
		     end;

		if sector_sw then do;		/* Preceded by -sector, so must convert */
		     s = sect_per_cyl (dev_type);
		     r = divide (recno, s, 17, 0) *
		        (s - divide (s, sect_per_rec (dev_type), 17, 0) *
		        sect_per_rec (dev_type));
		     recno = divide (recno - r, sect_per_rec (dev_type), 17, 0);
		     end;

		if (recno < pvt_array (pvtx).baseadd)
		     | (recno >= pvt_array (pvtx).baseadd + pvt_array (pvtx).totrec)
		     then do;
		     call com_err_ (0, myname, "^[Sector^;Record^] address ^a is outside of Paging Region",
			sector_sw, arg);
		     goto MAIN_RETURN;
		     end;

		naddrs = naddrs + 1;
		if naddrs > hbound (recnoa, 1) then do;
		     call com_err_ (error_table_$too_many_args, myname, "Too many record numbers. Max is ^d",
			hbound (recnoa, 1));
		     goto MAIN_RETURN;
		     end;

		sector_sw = "0"b;			/* Turn it off after collecting the argument */
		recnoa (naddrs) = recno;
		end;
	     end;

	if sector_sw then do;			/* If still set, something was missing */
	     call com_err_ (error_table_$noarg, myname, "Octal sector number after -sector");
	     goto MAIN_RETURN;
	     end;

	if naddrs = 0 then goto USAGE_NOARG;

/*  */

	addrs_left = naddrs;
	found_address (*) = "0"b;
	highest_vtocx = pvt_array (pvtx).n_vtoce - 1;	/* Zero origin */

	vtocep = addr (local_vtoce);

	do vtocx = 0 to highest_vtocx;
	     call phcs_$get_vtoce (pvtx, vtocx, vtocep, code);
	     if code ^= 0 then do;
		call com_err_ (code, myname, "Error reading vtocx ^o", vtocx);
		goto NEXT_VTOCE;
		end;

	     if (vtoce.uid = ""b) then goto NEXT_VTOCE;

	     if all_sw then
		last_page = 255;
	     else last_page = binary (vtoce.csl, 9) - 1;

	     do pageno = 0 to last_page;
		do addrno = 1 to naddrs;
		     if ^all_sw then
			if found_address (addrno) then
			     goto NEXT_ADDRESS;

		     if recnoa (addrno) = binary (vtoce.fm (pageno), 18) then do;
			call ioa_ ("Address ^o = page ^d of VTOC index ^o", recnoa (addrno), pageno, vtocx);

			if path_sw then do;
			     call vpn_cv_uid_path_$ent (addr (vtoce.uid_path), pathname, vtoce.uid, code);
			     if code ^= 0 then
				call com_err_ (code, myname, "Cannot get path of vtocx ^o on ^a",
				     vtocx, pvname);

			     else call ioa_ ("^5xvtocx ^o is ^a", vtocx, pathname);
			     end;

			else call ioa_ ("^5xUID ^w, ^a", vtoce.uid, vtoce.primary_name);

			found_address (addrno) = "1"b; /* Remember that we have found it */

			if ^all_sw then do; 	/* Make sure it doesn't get used again */
			     recnoa (addrno) = -1;	/* This will cause further comparisons to fail */
			     addrs_left = addrs_left - 1;
			     if addrs_left = 0 then go to MAIN_RETURN;
			     end;

			goto NEXT_PAGE;
			end;			/* of case for matching address */
NEXT_ADDRESS:	     end; 			/* Of loop through addresses in the list */
NEXT_PAGE:	end;				/* Of loop through pages in a vtoce */
NEXT_VTOCE:    end; 				/* Of loop through VTOCEs */


	do addrno = 1 to naddrs;
	     if ^found_address (addrno) then
		call com_err_ (0, myname, "Address ^o not found.", recnoa (addrno));
	     end;

MAIN_RETURN:
	if pvtp ^= null () then call release_temp_segment_ (myname, pvtp, (0));
	return;

%page; %include vtoce;
%page; %include pvt;
%page; %include pvte;
%page; %include fs_dev_types;

	end record_to_vtocx;
