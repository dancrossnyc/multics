/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(87-01-02,TLNguyen), approve(87-01-02,MCR7594),
     audit(87-01-08,Blair), install(87-03-20,MR12.1-1007):
     Fixed bug which occurs when delete_old_pdds creates two temporary segments
     but it does not release them when it finishes.
                                                   END HISTORY COMMENTS */


/* format: style2,indcomtxt,idind25 */

delete_old_pdds:
     procedure options (variable);

/* DPDD cleans out old copies of process_dir_dir */
/* Made more robust by C. Hornig, December 1980 */
/* Made useable from non-Initializer processes, M.Pierret July 1981 */
/* Made to delete old >sl1's too by C. Hornig, March 1982 */
/* 84-01-16 BIM. Explicit salvage to shut up the online salvager.
   soos privilege. */

	dcl     code		   fixed bin (35);
	dcl     a_time		   fixed bin (71);
	dcl     saved_quota		   uns fixed bin (18);
	dcl     areap		   ptr;
	dcl     (ap, ap1)		   pointer;
	dcl     (al, al1)		   fixed bin;
	dcl     arg		   char (al) based (ap);
	dcl     arg1		   char (al1) based (ap1);
	dcl     (argno, nargs)	   fixed bin;
	dcl     (first_count, last_count)
				   fixed bin;
	dcl     soos_priv_code	   fixed bin (35);	/* zero implies turn it off */
	dcl     tsps		   (2) pointer;


	dcl     cu_$arg_count	   entry (fixed bin, fixed bin (35));
	dcl     cu_$arg_ptr		   entry (fixed bin, ptr, fixed bin, fixed bin (35));
	dcl     cv_dec_check_	   entry (char (*), fixed bin (35)) returns (fixed bin (35));
	dcl     get_system_free_area_	   entry () returns (ptr);
	dcl     get_privileges_	   entry () returns (bit (36) aligned);
	dcl     get_temp_segments_	   entry (character (*), (*) pointer, fixed binary (35));
	dcl     release_temp_segments_   entry (character (*), (*) pointer, fixed binary (35));
	dcl     hphcs_$star_	   entry (char (*), char (*), fixed bin (2), ptr, fixed bin, ptr, ptr,
				   fixed bin (35));
	dcl     system_privilege_$soos_priv_on
				   entry (fixed bin (35));
	dcl     system_privilege_$soos_priv_off
				   entry (fixed bin (35));
	dcl     system_privilege_$check_mode_reset
				   entry (char (*), char (*), fixed bin (35));
	dcl     hphcs_$delentry_file	   entry (char (*), char (*), fixed bin (35));
	dcl     hphcs_$quota_read	   entry (char (*), uns fixed bin (18), fixed bin (71), bit (36), fixed bin,
				   fixed bin (1), fixed bin, fixed bin (35));
	dcl     hphcs_$quota_set	   entry (char (*), uns fixed bin (18), fixed bin (35));
	dcl     hphcs_$salv_directory	   entry (ptr, char (*) var, ptr, fixed bin, fixed bin (35));

	dcl     com_err_		   entry options (variable);

	dcl     (
	        error_table_$nomatch,
	        error_table_$bad_conversion,
	        error_table_$noarg,
	        error_table_$badopt,
	        error_table_$inconsistent
	        )			   fixed bin (35) ext;

	dcl     whoami		   char (32) internal static options (constant) init ("delete_old_pdds");

	dcl     (cleanup, seg_fault_error)
				   condition;

	dcl     (length, null, reverse, substr, sum, verify)
				   builtin;



	tsps = null ();
	soos_priv_code = -1;
	on cleanup call clean_up ();

	if (get_privileges_ () & SOOS_PRIVILEGE) = ""b
	then do;
		call system_privilege_$soos_priv_on (soos_priv_code);
		if soos_priv_code ^= 0
		then call com_err_ (soos_priv_code, whoami, "Warning: could not enable SOOS privilege.");
	     end;

	first_count, last_count = -1;			/* default initial values */

	call cu_$arg_count (nargs, code);
	if code ^= 0
	then do;
		call com_err_ (code, whoami, "Usage: delete_old_pdds {-exclude_first Ndirs -exclude_last Ndirs}");
		return;
	     end;

	do argno = 1 to nargs;
	     call cu_$arg_ptr (argno, ap, al, code);
	     if /* case */ arg = "-exclude_first"
	     then do;
		     if first_count >= 0
		     then do;
ONLY_ONCE:
			     call com_err_ (error_table_$inconsistent, whoami,
				"The ^a control argument may only be specified once.", arg);
			     return;
			end;

		     if argno = nargs
		     then do;
NEED_NUMBER:
			     call com_err_ (error_table_$noarg, whoami,
				"The ^a control argument must be followed by a number.", arg);
			     return;
			end;

		     argno = argno + 1;
		     call cu_$arg_ptr (argno, ap1, al1, code);
		     first_count = cv_dec_check_ (arg1, code);
		     if code ^= 0 | first_count < 0
		     then do;			/* negative numbers not allowed, either */
NEED_GOOD_NUMBER:
			     call com_err_ (error_table_$bad_conversion, whoami,
				"The ^a control argument must be followed by a non-negative number, not ""^a"".",
				arg, arg1);
			     return;
			end;

		end;				/* of processing for -first */

	     else if arg = "-exclude_last"
	     then do;
		     if last_count >= 0
		     then goto ONLY_ONCE;
		     if argno = nargs
		     then goto NEED_NUMBER;

		     argno = argno + 1;
		     call cu_$arg_ptr (argno, ap1, al1, code);
		     last_count = cv_dec_check_ (arg1, code);
		     if code ^= 0 | last_count < 0
		     then goto NEED_GOOD_NUMBER;
		end;

	     else do;
		     call com_err_ (error_table_$badopt, whoami, "^a", arg);
		     return;
		end;
	end;					/* of argument processing */

	if first_count < 0
	then first_count = 0;			/* apply defaults */
	if last_count < 0
	then last_count = 0;

	areap = get_system_free_area_ ();

	saved_quota = 0;				/* set up for recovery */
	call hphcs_$quota_read (">", saved_quota, (0), ("0"b), (0), (0), (0), code);
	if code ^= 0
	then do;
		call com_err_ (code, whoami, "getting root quota");
		return;
	     end;

	a_time = clock ();
	call get_temp_segments_ (whoami, tsps, (0));
	SA.temp1_ptr = tsps (1);
	SA.temp2_ptr = tsps (2);
	SA.salv_time = substr (unspec (a_time), 21, 36);
	SA.options = "0"b;
	SA.options.delete_connection_failure = "1"b;
	SA.options.force_rebuild = "1"b;
	SA.options.check_vtoce = "1"b;
	SA.branch_ptr = null ();
	SA.current_length = 0;
	SA.master_dir_uid = ""b;


	call do_it ("pdd");
	call do_it ("sl1");

	if saved_quota > 0
	then call hphcs_$quota_set (">", saved_quota, code);

          call clean_up ();

%page;
clean_up:
        procedure ();

	if soos_priv_code = 0
               then do;
		call system_privilege_$soos_priv_off (code);
		if code = 0 then soos_priv_code = -1;
		if code ^= 0
		     then call com_err_ (code, whoami, "Failed to reset soos priv.");
	     end;
	if tsps (1) ^= null ()
	     then call release_temp_segments_ (whoami, tsps, (0));
          return;

end clean_up;
%page;
do_it:
     procedure (Dir);

	dcl     Dir		   char (*) parameter;

	dcl     i			   fixed bin;
	dcl     ename		   char (32);

	star_entry_ptr, star_names_ptr = null ();
	call hphcs_$star_ (">", rtrim (Dir) || ".!??????????????", star_ALL_ENTRIES, areap, star_entry_count,
	     star_entry_ptr, star_names_ptr, code);
	if code ^= 0
	then do;
		if code ^= error_table_$nomatch
		then call com_err_ (code, whoami, "listing root");
		return;
	     end;

	do i = first_count + 1 to star_entry_count - last_count;
						/* delete only those not excluded */
	     ename = star_names (star_entries (i).nindex);
	     call deldir (">", ename, code);
	     if code ^= 0
	     then call com_err_ (code, whoami, "Unable to delete >^a", ename);
	end;

done_it:
	if star_names_ptr ^= null ()
	then free star_names;
	if star_entry_ptr ^= null ()
	then free star_entries;
	return;

%include star_structures;
     end do_it;



deldir:
     procedure (a_dn, a_en, code);

	dcl     (a_dn, a_en)	   char (*) parameter;
	dcl     code		   fixed bin (35) parameter;

	dcl     dn		   char (168);
	dcl     en		   char (32);
	dcl     dnen		   char (168);
	dcl     ename		   char (32);
	dcl     j			   fixed bin;

	dn = a_dn;
	en = a_en;
	if dn = ">"
	then dnen = ">" || en;
	else dnen = rtrim (dn) || ">" || en;

	SA.pathname = dnen;
	call hphcs_$salv_directory (addr (SA), "", null (), (0), code);
	if code ^= 0
	then do;
		call com_err_ (code, whoami, "Unable to salvage ^a. Will attempt to delete it.", SA.pathname);
		go to DELETE_TOP;			/* skip starnaming */
	     end;

	on seg_fault_error goto connection_failure;

	call system_privilege_$check_mode_reset (dn, en, code);
	star_entry_ptr, star_names_ptr = null ();
	call hphcs_$star_ (dnen, "**", star_ALL_ENTRIES, areap, star_entry_count, star_entry_ptr, star_names_ptr, code);
	if code ^= error_table_$nomatch
	then do;
		if code ^= 0
		then call com_err_ (code, whoami, "^a", dnen);
		else do j = 1 to star_entry_count;
			ename = star_names (star_entries (j).nindex);
			if /* case */ star_entries (j).type = star_SEGMENT
			then do;
				call system_privilege_$check_mode_reset (dnen, ename, code);
				call hphcs_$delentry_file (dnen, ename, code);
			     end;
			else if star_entries (j).type = star_DIRECTORY
			then do;
				call system_privilege_$check_mode_reset (dnen, ename, code);
				call deldir (dnen, ename, code);
			     end;
			else do;			/* link */
				call hphcs_$delentry_file (dnen, ename, code);
			     end;
			if code ^= 0
			then call com_err_ (code, whoami, "^a>^a", dnen, ename);
		     end;

		if star_names_ptr ^= null ()
		then free star_names;
		if star_entry_ptr ^= null ()
		then free star_entries;
	     end;

connection_failure:
DELETE_TOP:
	call hphcs_$quota_set (dnen, 1, code);
	call hphcs_$delentry_file (dn, en, code);
	return;
%include star_structures;
     end deldir;

%page;
%include aim_privileges;
%include salv_args;
	declare 1 SA		   aligned like salv_args;
     end delete_old_pdds;
