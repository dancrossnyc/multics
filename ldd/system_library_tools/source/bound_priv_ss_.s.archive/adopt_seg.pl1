/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


adopt_seg: proc;


/* adopt_seg  Bernard Greenberg 7/19/77 */
/* Modified by Mike Grady to set ex_ringbrack on adopted dirs 9/79 */
/* Modified by Keith Loepere to set dir_quota 12/84 */

dcl (addr, bit, empty, fixed, null, unspec) builtin;
dcl  level fixed bin;
dcl  cu_$level_get entry returns (fixed bin);
dcl  mdc_$read_disk_table entry (ptr, fixed bin (35));
dcl (error_table_$pvid_not_found, error_table_$root) fixed bin (35) external;
dcl (error_table_$action_not_performed, error_table_$not_seg_type) fixed bin (35) ext;
dcl  sub_entry bit (1);
dcl (get_temp_segments_, release_temp_segments_) entry (char (*), (*) ptr, fixed bin (35));
dcl  hcs_$status_long entry (char (*), char (*), fixed bin, ptr, ptr, fixed bin (35));
dcl  hcs_$get_access_class entry (char(*), char(*), bit(72) aligned, fixed bin(35));
dcl  hc_backup_$retv_append entry (char (*), char (*), ptr, ptr, fixed bin (35));
dcl aim_check_$greater entry (bit(72) aligned, bit(72) aligned) returns(bit(1) aligned);

dcl  cleanup condition;
dcl  parent_acc bit (72) aligned;
dcl  q (1) ptr init (null ());
dcl  pvname char (32);
dcl  i fixed bin;
dcl  code fixed bin (35);
dcl  myname char (20) init ("adopt_seg") static options (constant);
dcl  phcs_$get_vtoce entry (fixed bin, fixed bin, ptr, fixed bin (35));
dcl 1 local_vtoce like vtoce aligned;
dcl 1 local_entry like entry aligned;
dcl 1 aretv_args like retv_append_args aligned;
dcl 1 cbi like create_branch_info aligned;
dcl 1 brinfo like branch_status aligned;

dcl  expand_pathname_ entry (char (*), char (*), char (*), fixed bin (35));
dcl (ioa_, com_err_) entry options (variable);
dcl (pvtx, vtocx) fixed bin;
dcl  xarea area (10000) based (q (1));
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  arg char (argl) based (argp);
dcl  argl fixed bin, argp ptr;
dcl  pvid bit (36) aligned;
dcl  cv_oct_check_ entry (char (*), fixed bin (35)) returns (fixed bin);
dcl  apdir char (168), apent char (32);
dcl  rtrname char (32);
dcl  aabsname char (168);


/* 	     Collect Arguments. */

	sub_entry = "0"b;
	on condition (cleanup) call release_temp_segments_ (myname, q, (0));;
	call cu_$arg_ptr (1, argp, argl, code);
	if code ^= 0 then do;
usage:	     call com_err_ (code, myname, "Usage: ^a pvname vtocx newpath", myname);
	     return;
	end;

	pvname = arg;
	call get_pvtx;
	if code ^= 0 then do;
	     call com_err_ (code, myname, arg);
	     go to nlexit;
	end;

	i = 1;
	call cu_$arg_ptr (2, argp, argl, code);
	if code ^= 0 then go to usage;
	vtocx = cv_oct_check_ (arg, code);
	if code ^= 0 then do;
	     call com_err_ (0, myname, "Bad octal # for VTOC index: ^a.", arg);
	     go to nlexit;
	end;


	call cu_$arg_ptr (3, argp, argl, code);
	if code ^= 0 then go to usage;

	call expand_pathname_ (arg, aabsname, rtrname, code);
	if code = 0 then call expand_pathname_ (aabsname, apdir, apent, code);
	if code ^= 0 then do;
	     call com_err_ (code, myname, arg);
	     go to nlexit;
	end;



/* 	     Validate all paramters, the target directory, and the vtoce.


*/

process:	vtocep = addr (local_vtoce);
	ep = addr (local_entry);

	call phcs_$get_vtoce (pvtx, vtocx, vtocep, code);
	if code ^= 0 then do;
	     if sub_entry then go to rrcode;
	     call com_err_ (code, myname, "Reading vtocx ^o on pvtx ^o.", vtocx, pvtx);
	     go to nlexit;
	end;

	if vtoce.uid = "0"b then do;
	     if sub_entry then do;
notacted:		code = error_table_$action_not_performed;
		go to rrcode;
	     end;
	     call com_err_ (0, myname, "Vtoce ^o on ^a is free.", vtocx, pvname);
	     go to nlexit;
	end;


	xarea = empty ();
	call hcs_$status_long (apdir, apent, 0, addr (brinfo), q (1), code);
	if code ^= 0 & code = error_table_$root then brinfo.unique_id = (36)"1"b; /* avoid paging in imp. dependent way. */
	else if code ^= 0 then do;
	     if sub_entry then go to rrcode;
	     call com_err_ (code, myname, "^a^[>^]^a", apdir, apdir ^= ">", apent);
	     go to nlexit;
	end;
	else if brinfo.type ^= directory_type then do;
	     code = error_table_$not_seg_type;
	     if sub_entry then go to rrcode;
	     call com_err_ (code, myname, "^a is not a directory.", aabsname);
	     go to nlexit;
	end;


	do i = 0 to 15;
	     if vtoce.uid_path (i) = "0"b then go to glev;
	end;
glev:	i = i - 1;
	if i = -1 then do;
	     code = error_table_$root;
	     if sub_entry then go to rrcode;
	     call com_err_ (code, myname, "Cannot retrieve the root.");
	     go to nlexit;
	end;

	if vtoce.uid_path (i) ^= brinfo.unique_id then do;
	     if sub_entry then go to notacted;
	     call com_err_ (0, myname, "This vtoce is not from ^a.", aabsname);
	     go to nlexit;
	end;

/* 	     Prepare volume backup args, new create_branch info, and new branch image.

*/
	aretv_args.version = RETV_APPEND_ARGS_VERSION_1;
	aretv_args.level = 1; /* to get multiclass segments */
	level = cu_$level_get ();
	aretv_args.ep = ep;

/**** hc_backup_ requires that cbi.user have sma, at the current authorization,
      and that the access class be <= the max in the retv_append_args */
      
	call hcs_$get_access_class (apdir, apent, parent_acc, code);

	aretv_args.max_access_authorization = vtoce.access_class;  /* has be be greater or equal to cbi.access_class */
	aretv_args.access_authorization = parent_acc; /* has to be equal */
	aretv_args.link = "0"b;

	unspec (cbi) = "0"b;
	cbi.version = create_branch_version_2;
	cbi.dir_sw = vtoce.dirsw;
	cbi.chase_sw = "0"b;
	if code = 0 & aim_check_$greater (vtoce.access_class, parent_acc)
	then do;
	     cbi.priv_upgrade_sw = "1"b;
	     cbi.parent_ac_sw = "0"b;
	     end;
	else do;
	     cbi.priv_upgrade_sw = "0"b;
	     cbi.parent_ac_sw = "1"b;
	end;
	cbi.mode = "101"b;
	if cbi.priv_upgrade_sw & ^cbi.dir_sw
	then cbi.rings (*) = 1; /* Only way to create multi-class seg is ring 1 seg */
	else cbi.rings (*) = level;
	cbi.userid = "Adopter.SysDaemon.z";
	if vtoce.dirsw then do;
	     cbi.quota = vtoce.quota (0);
	     cbi.dir_quota = vtoce.quota (1);
	end;
	else cbi.bitcnt = 36*1024 * fixed (vtoce.csl, 9);
	cbi.access_class = vtoce.access_class;

	unspec (entry) = "0"b;
	entry.type = seg_type_getter ();
	entry.bs = "1"b;
	entry.pvid = pvid;
	entry.vtocx = vtocx;
	entry.ring_brackets = bit (fixed (cbi.rings, 3), 3);
	entry.size = 38;				/* Susan says this is right magic # */
	entry.nnames = 1;
	entry.owner = brinfo.unique_id;
	entry.dtd = "0"b;
	entry.bc = cbi.bitcnt;
	entry.dtem = "0"b;
	entry.uid = vtoce.uid;
	entry.dirsw = vtoce.dirsw;
	if entry.dirsw then
	     entry.ex_ring_brackets = bit (fixed (level, 3), 3);

	call hc_backup_$retv_append (aabsname, rtrname, addr (cbi), addr (aretv_args), code);

	if sub_entry then do;
rrcode:	     rcode = code;
	     call release_temp_segments_ (myname, q, (0));
	     return;
	end;

	if code ^= 0 then do;
	     call com_err_ (code, myname, "Appending branch for ^a^[>^]^a.", aabsname, aabsname ^= ">", rtrname);
	     go to nlexit;
	end;

	call ioa_ ("Appended branch ""^a"" in ^a for uid ^w.", rtrname, aabsname, vtoce.uid);
nlexit:
	call release_temp_segments_ (myname, q, (0));
	return;


/* 	*/

adopt_seg_: entry (a_dirname, a_ename, a_pvid, a_pvtx, a_vtocx, rcode);

dcl  a_dirname char (*);
dcl  a_ename char (*);
dcl  a_pvid bit (36) aligned;
dcl  a_pvtx fixed bin;
dcl  a_vtocx fixed bin;
dcl  rcode fixed bin (35);

	sub_entry = "1"b;				/* Set subroutine entry sw. */
	on condition (cleanup) call release_temp_segments_ (myname, q, (0));

	aabsname = a_dirname;
	rtrname = a_ename;

	pvid = a_pvid;
	pvtx = a_pvtx;
	vtocx = a_vtocx;

	call get_temp_segments_ (myname, q, code);
	if code ^= 0 then go to rrcode;

	call expand_pathname_ (aabsname, apdir, apent, code);
	if code ^= 0 then go to rrcode;		/* Do first split here */

	go to process;

/*  PVTX from DISK_TABLE getter */
get_pvtx:	proc;

/* Gets pvt index by scanning disk table for pv name. */

	     call get_temp_segments_ (myname, q, code);
	     if code ^= 0 then do;
		call com_err_ (code, myname, "Getting temp segment for disk table");
		go to nlexit;
	     end;
	     dtp = q (1);
	     call mdc_$read_disk_table (dtp, code);
	     if code ^= 0 then do;
		call com_err_ (code, myname, "Getting disk table");
		go to nlexit;
	     end;
	     do pvtx = 1 to dt.n_entries;
		if dt.array (pvtx).pvname = pvname & dt.array (pvtx).used then do;
		     pvid = dt.array (pvtx).pvid;
		     return;
		end;
	     end;
	     code = error_table_$pvid_not_found ;
	end;


/*  */

	%include create_branch_info;
	%include retv_append_args;
	%include vtoce;
%include disk_table;
	%include branch_status;
	%include dir_entry;

seg_type_getter: proc () returns (bit (18));
						/* This is here to avoid include file name conflict on link_type */
	     return (SEG_TYPE);
	     %include fs_types;
	end;
     end;
