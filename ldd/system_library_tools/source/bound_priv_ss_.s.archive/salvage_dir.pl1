/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/****^  HISTORY COMMENTS:
  1) change(86-05-23,Lippard), approve(86-06-17,MCR7433),
     audit(86-06-24,Hartogs), install(86-07-11,MR12.0-1092):
      Modified by Jim Lippard to mention -delete_connection_failure in
      syntax line and display output on terminal when no output file
      pathname is given.
                                                   END HISTORY COMMENTS */


salvage_dir: proc;

/* This command rebuilds the directory specified.

   Usage:	salvage_dir path  {output_path}  -debug  -dump dump_path  -compact  -rebuild  -check_vtoce
	-delete_connection_failure
   */

/* AUTOMATIC */

	dcl     arg		 char (arg_len) based (arg_ptr); /*  argument specified with the call */
	dcl     arg_len		 fixed bin;
	dcl     arg_ptr		 ptr;
	dcl     close_io		 bit (1) aligned;	/* ON, if salv was open. */
	dcl     detach_io		 bit (1) aligned;	/* ON, if salv was attached. */
	dcl     code		 fixed bin (35);
	dcl     path		 char (168);	/* name of directory */
	dcl     ename		 char (32);	/* entry name */
	dcl     nargs		 fixed bin;	/* number of arguments. Must be 1 */
	dcl     output		 char (output_len) var based (output_p);
	dcl     output_len		 fixed bin (21);
	dcl     output_p		 ptr;
	dcl     output_path		 char (168);	/* Name of the output segment specified with the call */
	dcl     dump_p		 ptr;		/* ptr to copy of directory before salvage. */
	dcl     temp_p		 (4) ptr;
	dcl     time		 char (24) aligned;
	dcl     dump_len		 fixed bin;
	dcl     p			 ptr;
	dcl     dump_dir		 char (168);
	dcl     dump_ename		 char (32);
	dcl     i			 fixed bin;
	dcl     1 info		 aligned like salv_args;
	dcl     iocbp		 ptr;

	dcl     cleanup		 condition;
	dcl     copy		 (dump_len) bit (36) aligned based; /* director y */

	dcl     (null, ptr, substr, string) builtin;

/* EXTERNAL */

	dcl     get_temp_segments_	 entry (char (*), (*) ptr, fixed bin (35));
	dcl     release_temp_segments_ entry (char (*), (*) ptr, fixed bin (35));
	dcl     absolute_pathname_	 entry (char (*), char (*), fixed bin (35));
	dcl     clock_		 entry returns (fixed bin (52));
	dcl     com_err_		 entry options (variable);
	dcl     cu_$arg_count	 entry (fixed bin);
	dcl     cu_$arg_ptr		 entry (fixed bin, ptr, fixed bin, fixed bin (35));
	dcl     date_time_		 entry (fixed bin (52), char (*) aligned);
	dcl     error_table_$bad_arg	 fixed bin (35) ext;
	dcl     expand_pathname_	 entry (char (*), char (*), char (*), fixed bin (35));
	dcl     hcs_$make_seg	 entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35));
	dcl     hcs_$set_bc_seg	 entry (ptr, fixed bin (24), fixed bin (35));
	dcl     hphcs_$salv_directory	 entry (ptr, char (*) var, ptr, fixed bin, fixed bin (35));
	dcl     ioa_$ioa_switch	 entry options (variable);
	dcl     ioa_		 entry options (variable);
	dcl     iox_$attach_ioname	 entry (char (*), ptr, char (*), fixed bin (35));
	dcl     iox_$close		 entry (ptr, fixed bin (35));
	dcl     iox_$detach_iocb	 entry (ptr, fixed bin (35));
	dcl     iox_$open		 entry (ptr, fixed bin, bit (1) aligned, fixed bin (35));
	dcl     iox_$put_chars	 entry (ptr, ptr, fixed bin (21), fixed bin (35));

/* CONSTANT */

	dcl     NAME		 char (11) int static options (constant) init ("salvage_dir");
%page;
	temp_p (*) = null;
	output_path, path = "";
	close_io, detach_io = "0"b;

/* Argument parse */

	call cu_$arg_count (nargs);
	if nargs = 0 then do;
		call com_err_ (0, "salvage_dir", "Usage: salvage_dir dir_path {output_path} -compact -check_vtoce -delete_connection_failure -rebuild");
		return;
	     end;

	string (info.options) = "0"b;
	info.salv_time = bit (clock_ (), 36);
	info.correct_oosw = "1"b;
	do i = 1 to nargs;
	     call cu_$arg_ptr (i, arg_ptr, arg_len, code);
	     if code ^= 0 then do;
		     call com_err_ (code, "salvage_dir", arg);
		     return;
		end;
	     if substr (arg, 1, 1) = "-" then do;
		     if arg = "-rebuild" then info.force_rebuild = "1"b;
		     else if arg = "-check_vtoce" then info.check_vtoce = "1"b;
		     else if arg = "-compact" then info.compact = "1"b;
		     else if arg = "-delete_connection_failure" | arg = "-dcf" then info.delete_connection_failure = "1"b;

/* -dump <dump_directory> */
		     else if arg = "-debug" | arg = "-db" then info.print_trace = "1"b;
		     else if arg = "-dump" then do;
			     info.dump = "1"b;
			     i = i + 1;
			     call cu_$arg_ptr (i, arg_ptr, arg_len, code);
			     if code ^= 0 then do;
				     call com_err_ (0, NAME, "-dump must be followed by the path of the dump directory");
				     return;
				end;

			     call absolute_pathname_ (arg, dump_dir, code);
			     if code ^= 0 | (substr (arg, 1, 1) = "-") then do;
				     call com_err_ (code, NAME, "-dump must be followed by the path of the dump directory  ^a", arg);
				     return;
				end;
			end;
		     else do;
			     call com_err_ (error_table_$bad_arg, NAME, arg);
			     return;
			end;
		end;
	     else if path = "" then do;
		     call expand_pathname_ (arg, path, ename, code);
		     if code ^= 0 then do;
			     call com_err_ (code, NAME, arg);
			     return;
			end;
		     if path = ">" then path = rtrim (path) || ename;
		     else path = rtrim (path) || ">" || ename;
		end;
	     else if output_path = "" then do;
		     call absolute_pathname_ (arg, output_path, code);
		     if code ^= 0 then do;
			     call com_err_ (code, NAME, "");
			     return;
			end;
		end;
	     else do;
		     call com_err_ (error_table_$bad_arg, NAME, arg);
		     return;
		end;
	end;

	if path = "" then do;
		call com_err_ (0, NAME, "Pathname missing. salvage_dir path {output_path}");
		return;
	     end;

	info.check_vtoce = info.check_vtoce | info.delete_connection_failure;

/* Get temp segments */

	on cleanup call release;
	call get_temp_segments_ (NAME, temp_p, code);
	if code ^= 0 then do;
		call com_err_ (code, NAME);
		return;
	     end;

	output_p = temp_p (1);
	info.temp1_ptr = temp_p (2);
	info.temp2_ptr = temp_p (3);
	if info.dump then dump_p = temp_p (4);
	else dump_p = null;

/* Salvage and print output. */

	output_len = 64 * 1024 * 4;
	output = "";
	info.pathname = path;
	call hphcs_$salv_directory (addr (info), output, dump_p, dump_len, code);


/* Attach output segment. */

	if output ^= "" then do;
		if output_path ^= "" then do;
			call iox_$attach_ioname ("salv", iocbp, "vfile_ " || rtrim (output_path) || " -append ", code);
			if code ^= 0 then call com_err_ (code, NAME, output_path);
			else do;
				detach_io = "1"b;
				call iox_$open (iocbp, Stream_output, "0"b, code);
				if code ^= 0 then call com_err_ (code, NAME, output_path);
				else do;
					close_io = "1"b;

					call ioa_$ioa_switch (iocbp, "^/^a:", path);
					call iox_$put_chars (iocbp, ptr (output_p, 1), length (output), code);
				     end;
			     end;
		     end;
		else do;
			call ioa_ ("^/^a:", path);
			call ioa_ ("^a", output);
		     end;
	     end;

/* If a copy of the directory, before salvage, is returned, then create a segment in the dump_dir with the name:
   <date>.<time><dir_name> */
	if info.dump & (dump_len > 0) then do;
		call date_time_ (clock_ (), time);
		dump_ename = substr (time, 1, 2) || substr (time, 4, 2) || substr (time, 7, 2) || "." || substr (time, 11, 5) || ename;
		call hcs_$make_seg (dump_dir, dump_ename, "", 01010b, p, code);
		if code ^= 0 then call com_err_ (code, NAME, "^a>^a", dump_dir, dump_ename);
		else do;
			p -> copy = dump_p -> copy;
			call hcs_$set_bc_seg (p, dump_len * 36, code);
			if code ^= 0 then call com_err_ (code, NAME, "^a>^a", dump_dir, dump_ename);
		     end;
	     end;

	call release;

	return;

%page;
release: proc;

	call release_temp_segments_ (NAME, temp_p, code);
	if code ^= 0 then call com_err_ (code, NAME);

	if output_path ^= "" then do;
		if close_io then call iox_$close (iocbp, code);
		if code ^= 0 then call com_err_ (code, NAME, output_path);
		else do;
			if detach_io then call iox_$detach_iocb (iocbp, code);
			if code ^= 0 then call com_err_ (code, NAME, output_path);
		     end;
	     end;

     end release;

%page;
%include salv_args;
%include iox_modes;
     end salvage_dir;
