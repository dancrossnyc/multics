/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: style2 */

/* This procedure is called to cause the message coordinator to start up.
   It reattaches the I/O streams used by the message coordinator so that the various sources
   inside the initializer process can be routed independently. */

/* Modified August 1981 by E. N. Kittlitz to get heed bad iox_ return codes */
/* Modified August 1982 by E. N. Kittlitz to not call sys_log_$mc_on. */
/* Modified 1984-10-08 BIM to remove tape_switch, use up-to-date iox. */
/* Modified 1984-12-02, BIM: remove mc_i/o altogether, use sc_ipc_mask_ */

/****^  HISTORY COMMENTS:
  1) change(86-06-05,GJohnson), approve(86-06-05,MCR7387),
     audit(86-06-10,Martinson), install(86-07-11,MR12.0-1092):
     Correct error message documentation.
  2) change(87-06-12,Parisek), approve(87-06-12,MCR7690),
     audit(87-06-12,Martinson), install(87-08-04,MR12.1-1055):
       1) Removed unreferenced declarations.
       2) Added HBULL pnotice.
                                                   END HISTORY COMMENTS */

turn_on_mc_:
     proc;

	/* Builtins */
	dcl     codeptr		 builtin;

	dcl     code		 fixed bin (35);
	dcl     n_masks		 fixed bin;
	dcl     mc_tty_		 entry ();

	dcl     com_err_		 entry options (variable);
	dcl     mc_util_$init	 entry (char (*), char (6) aligned, entry, ptr, ptr, fixed bin (35));

%include iox_entries;
	dcl     sc_ipc_mask_$unmask	 entry (fixed binary);
	dcl     sc_ipc_mask_$remask	 entry (fixed binary);
	dcl     ssu_$get_info_ptr	 entry (ptr) returns (ptr);


%include iox_modes;
%include sc_stat_;
%include sc_subsystem_info_;

	if sc_stat_$mc_is_on
	then return;				/* once. */

/* First turn on the real message coordinator. */


	call mc_util_$init (sc_stat_$sysdir, sc_stat_$master_channel, mc_tty_, sc_stat_$mc_ansp, sc_stat_$initzer_ttyp,
	     code);
	if code ^= 0
	then call complain ("error from mc_init");

	call sc_ipc_mask_$unmask (n_masks);

	/*** event calls are now unmasked, and n_masks is the number
	     of times to remask them (perhaps 0). */

	call iox_$detach_iocb (sc_stat_$sv1_iocb, code);
	if code ^= 0
	then call complain ("detach severity1");
	call iox_$detach_iocb (sc_stat_$sv2_iocb, code);
	if code ^= 0
	then call complain ("detach severity2");
	call iox_$detach_iocb (sc_stat_$sv3_iocb, code);
	if code ^= 0
	then call complain ("detach severity3");
	call iox_$attach_ptr (sc_stat_$sv1_iocb, "mr_ as", codeptr (turn_on_mc_), code);
	if code ^= 0
	then call complain ("attach severity1");
	call iox_$attach_ptr (sc_stat_$sv2_iocb, "mr_ as", codeptr (turn_on_mc_), code);
	if code ^= 0
	then call complain ("attach severity2");
	call iox_$attach_ptr (sc_stat_$sv3_iocb, "mr_ as", codeptr (turn_on_mc_), code);
	if code ^= 0
	then call complain ("attach severity3");
	call iox_$open (sc_stat_$sv1_iocb, Stream_output, "1"b, code);
	if code ^= 0
	then call complain ("open severity1");
	call iox_$open (sc_stat_$sv2_iocb, Stream_output, "1"b, code);
	if code ^= 0
	then call complain ("open severity2");
	call iox_$open (sc_stat_$sv3_iocb, Stream_output, "1"b, code);
	if code ^= 0
	then call complain ("open severity3");

	call sc_ipc_mask_$remask (n_masks);

	sc_subsystem_info_ptr = ssu_$get_info_ptr (sc_stat_$master_sci_ptr);
	sc_subsystem_info.mc_atep = sc_stat_$initzer_ttyp;/* tell the world */
	sc_subsystem_info.real_iocb = sc_stat_$master_iocb;
						/* how to talk to this */

	sc_stat_$mc_is_on = "1"b;			/* Set flag. */
exit:
	return;


complain:
     proc (why);
	dcl     why		 char (*);
	call com_err_ (code, "turn_on_mc_", why);
	go to exit;
     end;


/* BEGIN MESSAGE DOCUMENTATION

   Message:
   turn_on_mc_: MESSAGE. detach STREAM

   S:	sc (error_output).

   T:	$init

   M:	The system attempted to start the Message Coordinator
   but the stream STREAM could not be detached from its initial
   dim.  The system continues to operate but the Message Coordinator
   is not used.  Probably, the daemon processes will also encounter
   trouble.

   A:	$contact


   Message:
   turn_on_mc_: MESSAGE. attach STREAM

   S:	sc (error_output).

   T:	$init

   M:	The system attempted to start the Message Coordinator
   but the stream STREAM cannot be attached to the message routing
   dim.  The system continues to operate but the Message Coordinator
   is not used.  Probably, the daemon processes will also encounter
   trouble.

   A:	$contact


   Message:
   turn_on_mc_: MESSAGE. open STREAM

   S:	sc (error_output).

   T:	$init

   M:	The system attempted to start the Message Coordinator but the
   stream STREAM cannot be opened by the message routing dim.  The system continues
   to operate but the Message Coordinator is not used.  Probably, the daemon
   processes will also encounter trouble.

   A:	$contact


   Message:
   turn_on_mc_: MESSAGE. error from mc_init

   S:	sc (error_output).

   T:	$init

   M:	The system attempted to start the Message Coordinator
   but it cannot be initialized.  The system continues to operate but
   the Message Coordinator is not used.  The daemon processes will
   probably also encounter trouble.

   A:	$contact

   END MESSAGE DOCUMENTATION */

     end turn_on_mc_;
