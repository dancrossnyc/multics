/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1985 *
   *                                                         *
   *********************************************************** */
/* mc_check_access_ -- access control for Message Coordinator */
/* format: style2 */

mc_check_access_:
     procedure;

/**** Modification History:
      Created 1985-01-07, BIM. */


	declare P_SSI_ptr		 pointer;
	declare P_source_name	 char (*);
	declare P_code		 fixed bin (35);
	declare P_user_name		 char (*);


	declare mc_check_acs_$reply	 entry (character (*), fixed binary (3), character (*), fixed binary (35));
	declare mc_check_acs_$quit	 entry (character (*), fixed binary (3), character (*), fixed binary (35));
	declare mc_check_acs_$log_daemon_in
				 entry (character (*), fixed binary (3), character (*), fixed binary (35));
	declare mc_check_acs_$log_daemon_out
				 entry (character (*), fixed binary (3), character (*), fixed binary (35));
	declare mc_check_acs_$new_proc_daemon
				 entry (character (*), fixed binary (3), character (*), fixed binary (35));
	declare mc_check_acs_$log_in_as_daemon
				 entry (character (*), fixed binary (3), character (*), fixed binary (35));

	declare DEFAULT_RING	 fixed bin (3) init (4) int static options (constant);


reply:
     entry (P_SSI_ptr, P_source_name, P_code);


	sc_subsystem_info_ptr = P_SSI_ptr;
	call mc_check_acs_$reply (sc_subsystem_info.access_control_name, DEFAULT_RING, P_source_name, P_code);
	return;

quit:
     entry (P_SSI_ptr, P_source_name, P_code);

          sc_subsystem_info_ptr = P_SSI_ptr;
	call mc_check_acs_$quit (sc_subsystem_info.access_control_name, DEFAULT_RING, P_source_name, P_code);
	return;

log_daemon_in:
     entry (P_SSI_ptr, P_source_name, P_code);

          sc_subsystem_info_ptr = P_SSI_ptr;
	call mc_check_acs_$log_daemon_in (sc_subsystem_info.access_control_name, DEFAULT_RING, P_source_name, P_code);
	return;

log_daemon_out:
     entry (P_SSI_ptr, P_source_name, P_code);

          sc_subsystem_info_ptr = P_SSI_ptr;
	call mc_check_acs_$log_daemon_out (sc_subsystem_info.access_control_name, DEFAULT_RING, P_source_name, P_code);
	return;

new_proc_daemon:
     entry (P_SSI_ptr, P_source_name, P_code);

          sc_subsystem_info_ptr = P_SSI_ptr;
	call mc_check_acs_$new_proc_daemon (sc_subsystem_info.access_control_name, DEFAULT_RING, P_source_name, P_code);
	return;

log_in_as_daemon:
     entry (P_user_name, P_source_name, P_code);
	call mc_check_acs_$log_in_as_daemon (P_user_name, DEFAULT_RING, P_source_name, P_code)
	     ;
	return;

%include sc_subsystem_info_;


     end mc_check_access_;
