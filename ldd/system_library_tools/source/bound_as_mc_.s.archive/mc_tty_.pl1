/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/* format: style2 */
mc_tty_:
     proc (Event_call_info_ptr);

/* MC_TTY_ - This program is invoked by ipc_ event call when the hardcore
   sends a device wakeup for a typewriter channel.  Alarm timers may also
   go off for a channel.

   The hardcore wakeup may mean that a channel which was writing and
   encountered lack of output buffer space may now proceed again; or it
   may indicate a read completion; or a hangup.

   When a read completion arrives, this program attempts to copy the data 
   read from the hardcore.  If the operator inputs just an empty line, we
   inhibit output on the channel for 3 minutes and wait to read his command.

   Once we have read a command line, we parse it, and execute it.

   Dennis Capps & Tom Van Vleck    */

/* revised for MCS by Grady 4/28/75
   modified by Robert Coren in August 1976 to use CDT entry
   modified by Robert Coren in June 1977 to use ttt_info_ for terminal-type stuff
   Modified June 1981 by T. Casey for MR9.0 to add metering.
   Modified October 1982 by E. N. Kittlitz to not squawk during shutdown.
   Modified 1984-10-29 BIM for iox_.
   Modified 1984-12-11, BIM: put OPER: back in.
   Modified 1985-01-21, BIM: mc_con_rec_$check when a terminal is dialed up.
   Modified 1985-04-01, E. Swenson: to cause sign_out on hangup.
   Modified 1985-05-14, E. Swenson to remove mc terminals from service 
      upon hangup if terminal was dialed to the Initializer.
*/

/****^  HISTORY COMMENTS:
  1) change(86-03-25,MSharpe), approve(87-07-09,MCR7690),
     audit(87-07-30,Parisek), install(87-08-04,MR12.1-1055):
     Modified to work with (DSA) network channels; to drop channel if
     it can't connect it;  to always trace (temporary).
  2) change(86-06-19,Kissel), approve(86-07-30,MCR7475), audit(86-08-04,Coren),
     install(86-10-09,MR12.0-1181):
     Changed to support the new tty event message format declared in
     net_event_message.incl.pl1 which replaces tty_event_message.incl.pl1.
  3) change(86-06-26,Cox), approve(87-07-09,MCR7690), audit(87-07-30,Parisek),
     install(87-08-04,MR12.1-1055):
     Modified to not read answerback for network channels.  Removed trace
     calls to sys_log_.
  4) change(86-12-08,Brunelle), approve(87-07-09,MCR7690),
     audit(87-07-30,Parisek), install(87-08-04,MR12.1-1055):
     Modified to work with (DSA) network channels; to drop channel if
     it can't connect it !!;to always trace (temporary). (Changes actually
     made by MSharpe on 86-03-25)
  5) change(87-02-05,GDixon), approve(87-07-09,MCR7690),
     audit(87-07-30,Parisek), install(87-08-04,MR12.1-1055):
     Modified for change to mc_anstbl.incl.pl1.
  6) change(87-05-11,Parisek), approve(87-07-09,MCR7690),
     audit(87-07-31,Beattie), install(87-08-04,MR12.1-1055):
     Check cdte.current_terminal_type before filling the set_term_type_info
     structure for the set_term_type order call.
  7) change(87-06-08,Parisek), approve(87-07-09,MCR7690),
     audit(87-07-31,Beattie), install(87-08-04,MR12.1-1055):
     Removed instances of sys_log_ calling when mc_ate.cdtep = null.
                                                   END HISTORY COMMENTS */

/* Parameters */

	declare Event_call_info_ptr	 pointer parameter;


/* Automatic */

	declare code		 fixed bin (35);
          declare errmsg                 char (200);
	declare input_buffer	 char (1000);
	declare line_status_space	 bit (72) aligned;
	declare length_read_in	 fixed bin (21);
	declare ls_wakeup		 bit (1);
	dcl     message		 char (8);
	dcl     old_operator_name	 char (32);
	declare p1		 pointer;
	declare perm_mc_service	 bit (1);
	declare read_answerback	 bit (1);
	declare 1 STTI		 aligned like set_term_type_info;
	declare 1 TI		 aligned like terminal_info;
	declare tty_state		 fixed bin;
	declare type_to_set		 char (32);
	declare wakeup_event	 fixed bin;

/* Based */

	dcl     fixed_bin_71	 fixed bin (71) based;
						/* overlay for message */
	dcl     signal_type		 char (8) based;	/* char overlay for ipc_ message */

/* Entries */

	dcl     astty_$tty_event	 entry (ptr, fixed bin (35));
	dcl     lg_ctl_$logout_channel entry (ptr, char (*));
	dcl     mc_commands_$remove_tty
				 entry (char (*), bit (1) aligned, fixed bin (35));
	dcl     mc_con_rec_$check	 entry;
	dcl     (
	        hphcs_$syserr,
	        hphcs_$syserr_error_code
	        )			 entry options (variable);
	dcl     hcs_$wakeup		 entry (bit (*) aligned, fixed bin (71), fixed bin (71), fixed bin (35));
          declare ioa_$rs                entry options (variable);
	declare ipc_$drain_chn	 entry (fixed bin (71), fixed bin (35));
	declare lg_ctl_$logout_operator
				 entry (ptr, char (*), char (*));
	declare mc_commands_$sign_out	 entry (ptr, char (*), fixed bin (35));
	declare mc_commands_$create_iocb
				 entry (ptr, fixed bin (35));
	declare timed_io_$get_chars	 entry (pointer, fixed binary (71), pointer, fixed binary (21), fixed binary (21),
				 fixed binary (35));
	declare timed_io_$get_line	 entry (pointer, fixed binary (71), pointer, fixed binary (21), fixed binary (21),
				 fixed binary (35));
	declare timed_io_$put_chars	 entry (pointer, fixed binary (71), pointer, fixed binary (21), fixed binary (21),
				 fixed binary (35));
	declare ttt_info_$default_term_type
				 entry (fixed binary, fixed binary, character (*), fixed binary (35));
	dcl     ttt_info_$decode_answerback
				 entry (char (*), fixed bin, char (*), char (*), fixed bin (35));
	dcl     multiplexer_mgr_$state_mpx
				 entry (char (*), fixed bin, fixed bin (35));
	declare sc_process_command_line_
				 entry (pointer, pointer, fixed binary (21));
	declare ssu_$abort_line	 entry () options (variable);
	declare ssu_$get_info_ptr	 entry (pointer) returns (pointer);

	dcl     (
	        as_$meter_enter,
	        as_$meter_exit
	        )			 entry (fixed bin);
	dcl     sys_log_		 entry options (variable);
	dcl     sys_log_$error_log	 entry options (variable);
	dcl     timer_manager_$alarm_wakeup
				 entry (fixed binary (71), bit (2), fixed binary (71));
	dcl     timer_manager_$reset_alarm_wakeup
				 entry (fixed binary (71));

/* External */

	dcl     error_table_$bad_arg	 fixed bin (35) ext static;
	dcl     error_table_$line_status_pending
				 fixed bin (35) ext static;
	dcl     error_table_$timeout	 fixed bin (35) ext static;
	dcl     error_table_$io_no_permission
				 fixed bin (35) ext static;
	dcl     error_table_$undefined_order_request
				 fixed bin (35) ext static;

/* Builtins */

	dcl     (null, addr, baseno, index, length,
		reverse, rtrim, substr, unspec, verify)
				 builtin;

/* Constant */

	dcl     ME		 char (32) initial ("mc_tty_") internal static options (constant);
	declare WHITESPACE		 char (7) init (" 	
") /* SP TAB BS VT NL CR FF */ int static options (constant);

	dcl     (
	        UNSPECIFIED_EVENT	 initial (0),
	        DIALUP_EVENT	 initial (1),
	        HANGUP_EVENT	 initial (2),
	        QUIT_EVENT		 initial (3),
	        INPUT_AVAILABLE_EVENT	 initial (4),
	        OUTPUT_SPACE_AVAILABLE_EVENT
				 initial (5),
	        LINE_STATUS_EVENT	 initial (6),
	        MASKED_EVENT	 initial (7)
	        )			 fixed bin internal static options (constant);

	dcl     EVENT_TO_PNAME	 (-1:7) char (22) internal static options (constant) init ("invalid",
						/* -1 */
				 "unspecified",	/*  0 */
				 "dialup",	/*  1 */
				 "hangup",	/*  2 */
				 "quit",		/*  3 */
				 "input available", /*  4 */
				 "output space available",
						/*  5 */
				 "line status",	/*  6 */
				 "masked");	/*  7 */
%page;

/* Program */

	call as_$meter_enter (MSGCORD_METER);		/* meter cpu time and paging used by this procedure */
	mc_ansp = sc_stat_$mc_ansp;

	if Event_call_info_ptr = null
	then call errx ("called with null ptr");

	event_call_info_ptr = Event_call_info_ptr;
	mc_atep = event_call_info.data_ptr;		/* Pointer to mcanstbl entry */
	cdtep = mc_ate.cdtep;			/* Pointer to CDT entry */

	p1 = addr (event_call_info.message);		/* What kind of signal  */
	if sc_stat_$mc_ansp = null
	then call errx ("sc_stat_$mc_ansp is null");
	if baseno (mc_atep) ^= baseno (sc_stat_$mc_ansp)
	then call errx ("called with bad pointer");

	wakeup_event = -1;				/* not set yet */
	errmsg = "";				/* init */

	if event_call_info.sender = mc_anstbl.mc_procid
	then do;
		if p1 -> signal_type = "alarm___"
		then do;				/* Timeout? */
			if mc_ate.iocb = null ()
			then do;
				call hphcs_$syserr (ANNOUNCE,
				     "^a: Channel ^a ^[(vchannel ^a)^;^s^] received TIMEOUT while awaiting DIALUP wakeup.",
				     ME, mc_ate.real_tty_name, mc_ate.flags.virtual, mc_ate.virtual_tty_name);
				goto ttydone;
			     end;

			mc_ate.control.inhibit = "0"b;/* Operator didn't type his command in time. */
			mc_ate.tra_vec = MC_WAIT_READY;
						/* Set state back to "not waiting" */
			call iox_$control (mc_ate.iocb, "start", null (), (0));
						/* In case of lost wakeup, honk on ring 0 */

			go to READ_COMMAND;
		     end;
	     end;

	else if event_call_info.origin.ring > mc_anstbl.dsa_ring_number
	then /* Else didn't signal ourself */
	     if event_call_info.sender = mc_ate.ls_procid
	     then do;				/* wakeup from login server, not hardcore */
		     ls_wakeup = "1"b;
		     dial_event_message_ptr = addr (event_call_info.message);
		     if dial_event_message.control = JUST_DIALED
		     then wakeup_event = DIALUP_EVENT;	/* deal with incompatible message formats */
		     else wakeup_event = HANGUP_EVENT;
		end;
	     else do;
		call ioa_$rs ("Event sent from incorrect ring. ^/event channel = ^d, event message = ^d, event sender = ^b, device signal = ^b^/, ring = ^d, event data ptr = ^p",
		     errmsg, (0), event_call_info.channel_id, event_call_info.message, event_call_info.sender,
		     event_call_info.dev_signal, event_call_info.ring, event_call_info.data_ptr);
		call errx (errmsg);			/* .. ignore unless from ring 0 or 1 */
	     end;
	     
	net_event_message_arg = event_call_info.message;	/* Overlayed on net_event_message. */

/**** Here, wakeup_event is non-zero IFF we received a wakeup from the 
      login server telling us that a MC channel dialed up or hung up.
      Otherwise, the event message contains a type-code which, combined
      with the network type, determines what kind of wakeup we must process. */

	if wakeup_event = -1
	then /* not set already */
	     wakeup_event = decode_event_type (net_event_message.network_type, net_event_message.type);

	if mc_anstbl.trace
	then call sys_log_ (SL_LOG_SILENT,
		"^a: ^a state wait ^[-1(MASKED)^;ZERO^;wait_dialup^;wait_answerback^;wait_ready^;wait_command^] message ^a.",
		ME, mc_ate.real_tty_name, mc_ate.tra_vec + 2,
						/* -1 -> 1 */
		EVENT_TO_PNAME (wakeup_event));

	if wakeup_event = -1			/* i.e. a bad event type, already logged */
	then goto ttydone;

	if mc_ate.tra_vec = -1
	then go to ttydone;				/* masked, whatever */
	tty_state = 0;
	if mc_ate.iocb = null ()
	then if wakeup_event = DIALUP_EVENT & mc_ate.tra_vec = MC_WAIT_DIALUP
	     then do;
		     code = 0;
		     call mc_commands_$create_iocb (mc_atep, code);
		     if code ^= 0
		     then do;
			     call hphcs_$syserr_error_code (ANNOUNCE, code,
				"^a: Connecting to ^a^[ (vchannel ^a)^;^s^].", ME, mc_ate.real_tty_name,
				mc_ate.flags.virtual, mc_ate.virtual_tty_name);

			     call mc_commands_$remove_tty ((mc_ate.real_tty_name), "1"b, code);
			     goto ttydone;
			end;
		end;
	     else do;
		     call hphcs_$syserr (ANNOUNCE,
			"^a: Channel ^a^[ (vchannel ^a)^;^s^] received ^a wakeup while awaiting DIALUP.",
			ME, mc_ate.real_tty_name, mc_ate.flags.virtual, mc_ate.virtual_tty_name,
			EVENT_TO_PNAME (wakeup_event));
		     goto ttydone;
		end;

	call iox_$control (mc_ate.iocb, "state", addr (tty_state), code);
	if tty_state ^= TTY_STATE_DIALED_UP
	then if wakeup_event ^= HANGUP_EVENT & wakeup_event ^= MASKED_EVENT
	     then wakeup_event = HANGUP_EVENT;		/* treat it as a hangup */

	if wakeup_event = QUIT_EVENT
	then if sc_stat_$admin_sci_ptr = mc_ate.sci_ptr & mc_ate.sci_ptr ^= null ()
	     then do;
		     mc_ate.control.inhibit = "0"b;	/* Allow output to come out. */
		     call hcs_$wakeup (mc_anstbl.mc_procid, mc_ate.queue_event, 0, code);
		     call as_$meter_exit (MSGCORD_METER);
						/* turn off metering before returning */
		     call ssu_$abort_line (mc_ate.sci_ptr, 0, "BREAK key aborted command execution.");
		end;

	if wakeup_event = HANGUP_EVENT | wakeup_event = MASKED_EVENT
						/* line hung up */
	then do;
		if wakeup_event = MASKED_EVENT
		then call hphcs_$syserr (BEEP, "^a: channel ^a masked by FNP.", ME, mc_ate.real_tty_name);
		else if mc_ate.tra_vec < MC_WAIT_READY	/* only tattle once */
		then do;				/* so quietly go back to listening */
			mc_ate.tra_vec = MC_WAIT_DIALUP;
			if cdtep ^= null
			then call listen_if_mpx_up ();
			go to ttydone;
		     end;

		go to tty_hung;			/* report it */
	     end;

	else if wakeup_event = OUTPUT_SPACE_AVAILABLE_EVENT
						/* output done, rather than input arrived */
	then go to check_ow;			/* see if we have more */
	else if wakeup_event = LINE_STATUS_EVENT
	then call FLUSH_LINE_STATUS;

	if mc_ate.tra_vec = MC_WAIT_DIALUP
	then do;					/* whatever it said, we see if we are alive */
		call iox_$control (mc_ate.iocb, "state", addr (tty_state), code);
		if code ^= 0 | tty_state < TTY_STATE_DIALED_UP
		then do;
			if cdtep ^= null ()
			then call listen_if_mpx_up;
			go to ttydone;
		     end;

		mc_ate.control.inhibit = "1"b;	/* .. yes. Inhibit output. */
		call SET_TERM_TYPE ("");		/* set the default terminal type */
		if cdtep = null ()			/* DSA channel */
		then read_answerback = "0"b;		/* DSA doesn't support answerback */
		else read_answerback = ^cdte.flags.dont_read_answerback;


		if read_answerback
		then do;
			call iox_$control (mc_ate.iocb, "resetread", null (), (0));
			call ipc_$drain_chn (mc_ate.event, (0));
						/* don't get fooled */
			call iox_$control (mc_ate.iocb, "wru", null (), code);
			if code = error_table_$undefined_order_request
			then goto SKIP_ANSWERBACK;

			if code ^= 0
			then do;
				call hphcs_$syserr_error_code (ANNOUNCE, code, "^a: wru failed for ^a.", ME,
				     mc_ate.real_tty_name);
				go to tty_err;
			     end;
			mc_ate.tra_vec = MC_WAIT_ANSWERBACK;
			goto ttydone;		/* come back later */
		     end;
		else do;
SKIP_ANSWERBACK:
			mc_ate.tra_vec = MC_WAIT_READY;
			call GREET;

			call mc_con_rec_$check;
		     end;
	     end;					/* end DIALUP message processing */

	else if mc_ate.tra_vec = MC_WAIT_ANSWERBACK
	then do;
		mc_ate.tra_vec = MC_WAIT_READY;
		call get_chars (0);			/* no timeout tolerance */
		if length_read_in > 0
		then do;
			if mc_anstbl.trace
			then call sys_log_ (SL_LOG_SILENT, "^a: ^a WRU response ^a", ME, mc_ate.real_tty_name,
				substr (input_buffer, 1, length_read_in));
			type_to_set = "";
			if mc_ate.iocb = null ()
			then do;
				unspec (TI) = ""b;
				TI.version = terminal_info_version;
				call iox_$control (mc_ate.iocb, "terminal_info", addr (TI), code);
				if code ^= 0
				then do;
					call ttt_info_$decode_answerback (
					     substr (input_buffer, 1, length_read_in), (cdte.line_type),
					     type_to_set, (""), code);
						/* ignore code, we will leave the initial terminal type if we have to */
				     end;
			     end;
		     end;
		else type_to_set = "";		/* default */
		call SET_TERM_TYPE (type_to_set);
		call iox_$control (mc_ate.iocb, "resetread", null (), (0));
		call GREET;
		call mc_con_rec_$check;
	     end;


/**** Arriving here, the terminal is dialed up, we were not trying to get
      rid of output. So we look for input. */

READ_COMMAND:
	do while ("1"b);
	     call get_line (0);
	     if length_read_in = 0
	     then go to check_ow;			/* If nothing read, done. */


	     if verify (substr (input_buffer, 1, length_read_in), WHITESPACE) = 0
						/* Its all whitespace */
	     then do;
		     if mc_ate.control.inhibit	/* toggle off */
		     then do;
			     call timer_manager_$reset_alarm_wakeup (mc_ate.event);
			     mc_ate.control.inhibit = "0"b;
			end;
		     else do;
			     mc_ate.control.inhibit = "1"b;
						/* Don't interrupt operator for a while. */
			     call timer_manager_$alarm_wakeup (30, "11"b, mc_ate.event);
						/* 30 seconds of peace and quiet */
			     call write ("OPER: ");
			end;
		end;
	     else do;				/* just execute the command, bud. */
		     mc_ate.control.inhibit = "1"b;	/* Don't interrupt operator for a while. */
		     call sc_process_command_line_ (mc_ate.sci_ptr, addr (input_buffer), length_read_in);
		     mc_ate.control.inhibit = "0"b;	/* Allow output. */
		end;
	end;					/* Try to read more */

/* -------------------------------------------------------- */

/* Come here when tty appears to be hung up */

tty_hung:
	if sc_stat_$shutdown_typed
	then do;					/* if shutting down */
		call sys_log_ (SL_LOG_SILENT, "^a: Line ^a hung up.", ME, mc_ate.real_tty_name);
		mc_ate.tra_vec = -1;
		go to stim;			/* kick outputter */
	     end;
	else if mc_ate.tra_vec >= MC_WAIT_READY
	then call hphcs_$syserr (BEEP, "^a: channel ^a hung up.", ME, mc_ate.real_tty_name);

/**** If the channel is normally designated as MC service (as opposed to being
      "dial system"'ed), then we listen for another dialup on this channel
      wherepon we will continue message coordinator service.  If, however,
      the channel is a network connection or an MCS channel in temporary MC
      service, then we remove it from MC service and give it back to the
      answering service. */

	if cdtep = null ()
	then perm_mc_service = ""b;
	else perm_mc_service = (cdte.service_type = MC_SERVICE);

	if ^perm_mc_service
	then do;					/* remove from MC service */
		call mc_commands_$remove_tty ((mc_ate.real_tty_name), ""b, code);
		if code ^= 0
		then call hphcs_$syserr_error_code (ANNOUNCE, code, "^a: Could not remove ^a from MC use.", ME,
			mc_ate.real_tty_name);

		if cdtep ^= null
		then do;
			call astty_$tty_event (cdtep, code);
			if code ^= 0
			then call hphcs_$syserr_error_code (ANNOUNCE, code,
				"^a: Could not get channel ^a back from MC.", ME, cdte.name);
			cdte.current_service_type = cdte.service_type;
			cdte.dialed_to_procid = ""b;
			cdte.dial_ev_chn = 0;
			cdte.process = null ();
			cdte.tra_vec = WAIT_GREETING_MSG;
			cdte.in_use = NOW_HUNG_UP;
			if cdte.flags.access_control.slave_dial
			then call lg_ctl_$logout_channel (cdtep, "mc hangup");
			message = "device";
			call hcs_$wakeup (mc_anstbl.mc_procid, cdte.event, addr (message) -> fixed_bin_71, code);
			if code ^= 0
			then call hphcs_$syserr_error_code (ANNOUNCE, code,
				"^a: Could not notify answering service of new login channel ^a.", ME, cdte.name);
		     end;
		goto ttydone;
	     end;

	else do;
		mc_ate.tra_vec = MC_WAIT_DIALUP;
		if cdtep ^= null ()
		then call listen_if_mpx_up ();
		go to error_exit;
	     end;


/* Come here when we get an error code from the ttydim. */
/* We check for hangup */
/* Message is printed elsewhere */

tty_err:
	if code = error_table_$line_status_pending	/* we lost the wakeup? */
	then do;
		call FLUSH_LINE_STATUS;
		go to ttydone;
	     end;
	if code ^= error_table_$io_no_permission
	then call iox_$control (mc_ate.iocb, "hangup", null (), (0));

	mc_ate.tra_vec = MC_WAIT_DIALUP;
	if cdtep ^= null
	then call listen_if_mpx_up ();

error_exit:
	mc_ate.control.inhibit = "0"b;		/* Allow output to come out. */
	call hcs_$wakeup (mc_anstbl.mc_procid, mc_ate.queue_event, 0, code);

/**** If a message coordinator terminal hangs up, force a sign_out.  We
      may get here as a result of a drop command.  If so, we have already
      signed out the terminal and desctroyed the ssu invocation. */

	if mc_ate.signed_on & mc_ate.sci_ptr ^= null ()
	then do;
		call mc_commands_$sign_out (mc_atep, old_operator_name, (0));
		call lg_ctl_$logout_operator (ssu_$get_info_ptr (mc_ate.sci_ptr), old_operator_name, "hangup");
	     end;

	if sc_stat_$admin_sci_ptr = mc_ate.sci_ptr & mc_ate.sci_ptr ^= null ()
	then do;
		call as_$meter_exit (MSGCORD_METER);	/* turn off metering before returning */
		sc_subsystem_info_ptr = ssu_$get_info_ptr (sc_stat_$admin_sci_ptr);
		call sc_subsystem_info.hangup_entry (sc_stat_$admin_sci_ptr);
	     end;

/* Come here when we have hung out a read and found no input.
   The ttydim will send us a wakeup when there is some
   If there is stacked output for this channel, or if the device is in output 
   wait, send a wakeup to the output driver for the device
   (mc_wakeups_$typer_out). */

check_ow:
	if (mc_ate.output_wait | mc_ate.output_pending)
	then
stim:
	     call hcs_$wakeup (mc_anstbl.mc_procid, mc_ate.queue_event, 0, code);

/* ALL RETURNS MUST COME HERE TO TURN OFF METERING BEFORE RETURNING !!! */

ttydone:
	call as_$meter_exit (MSGCORD_METER);		/* turn off metering before returning */
	return;					/* Exit */

/* -------------------------------------------------------- */

get_chars:
     procedure (time);

	declare time		 fixed bin (71);

	call timed_io_$get_chars (mc_ate.iocb, time, addr (input_buffer), length (input_buffer), length_read_in, code);
	go to READ_COMMON;

get_line:
     entry (time);

	call timed_io_$get_line (mc_ate.iocb, time, addr (input_buffer), length (input_buffer), length_read_in, code);
READ_COMMON:
	if code = error_table_$timeout
	then code = 0;
	if code = error_table_$io_no_permission
	then go to tty_hung;
	if code ^= 0
	then go to tty_err;

     end get_chars;


write:
     proc (message);

	declare message		 char (*);

/**** This should only be used for short messages. It assumes that
      a moment sleeping will get rid of the output. */


	call timed_io_$put_chars (mc_ate.iocb, 10 * 1000 * 1000, addr (message), length (message), (0), code);
						/* can't block, but patience is possible */
	if code = error_table_$timeout
	then code = 0;
	if code = error_table_$io_no_permission
	then go to tty_hung;
	if code ^= 0
	then go to tty_err;
     end write;


errx:
     proc (msg);
	dcl     msg		 char (*);

	call hphcs_$syserr (ANNOUNCE, "^a: ^a", ME, msg);
	go to ttydone;

     end errx;


listen_if_mpx_up:
     procedure;

	dcl     mpx_name		 char (32);
	dcl     state		 fixed bin;
	dcl     i			 fixed bin;
	dcl     codex		 fixed bin (35);

	i = index (reverse (cdte.name), ".");
	if i = 0
	then return;
	mpx_name = substr (cdte.name, 1, length (cdte.name) - i);
	call multiplexer_mgr_$state_mpx (mpx_name, state, codex);
	if codex = 0
	then if state = FNP_UP
	     then call iox_$control (mc_ate.iocb, "listen", null (), (0));
	return;

     end listen_if_mpx_up;

/* entry used by multiplexer mgr when mpx crashes. We are given a
   cdte pointer instead of a mc_ate pointer */

simulated_wakeup:
     entry (Event_call_info_ptr);

	dcl     1 local_event_call_info
				 aligned like event_call_info automatic;
	dcl     i			 fixed bin;

	event_call_info_ptr = Event_call_info_ptr;
	local_event_call_info = event_call_info;
	cdtep = event_call_info.data_ptr;
	mc_ansp = sc_stat_$mc_ansp;
	do i = 1 to mc_anstbl.current_size;
	     mc_atep = addr (mc_anstbl.entry (i));
	     if mc_ate.active
	     then if mc_ate.real_tty_name = cdte.name
		then do;
			local_event_call_info.channel_id = mc_ate.event;
			local_event_call_info.data_ptr = mc_atep;
			call mc_tty_ (addr (local_event_call_info));
			return;
		     end;
	end;
	return;

GREET:
     procedure;

	declare message		 char (100);

	call ioa_$rs ("Channel ^a attached by Message Coordinator.", message, (0), mc_ate.real_tty_name);
	call write (rtrim (message));
	mc_ate.control.inhibit = "0"b;		/* Reset output-inhibit */
	mc_ate.tra_vec = MC_WAIT_READY;
	return;
     end GREET;

SET_TERM_TYPE:
     procedure (a_type_to_set);

	declare a_type_to_set	 char (*);
	declare type_to_set		 char (32);

	if cdtep = null ()
	then return;				/* DSA doesn't allow changing terminal type */

	type_to_set = a_type_to_set;

	if type_to_set = ""
	then do;
	          if cdte.current_terminal_type ^= ""
		then type_to_set = cdte.current_terminal_type;
		else if cdte.initial_terminal_type ^= ""
		then type_to_set = cdte.initial_terminal_type;
		else do;
GET_TERM_TYPE:
			unspec (TI) = ""b;
			TI.term_type = "";
			TI.version = terminal_info_version;
			call iox_$control (mc_ate.iocb, "terminal_info", addr (TI), code);
			if (code = error_table_$io_no_permission)
			then go to tty_hung;	/* forgive and forget about it */

			if code ^= 0
			then go to TTP_ERROR;

			call ttt_info_$default_term_type (TI.line_type, TI.baud_rate, type_to_set, code);
			if code ^= 0
			then
TTP_ERROR:
			     do;
				call hphcs_$syserr_error_code (ANNOUNCE, code,
				     "^a: No default ttp for ^a line ^d baud ^d.", ME, mc_ate.real_tty_name,
				     TI.line_type, TI.baud_rate);
				go to tty_err;
			     end;
		     end;
	     end;

	STTI.version = 1;
	STTI.name = type_to_set;
	STTI.flags = "1"b;
	STTI.mbz = "0"b;
	if mc_anstbl.trace
	then call sys_log_ (SL_LOG_SILENT, "^a: ^a stty -ttp ^a", ME, mc_ate.real_tty_name, type_to_set);
	call iox_$control (mc_ate.iocb, "set_term_type", addr (STTI), code);
	if code = error_table_$io_no_permission
	then go to tty_hung;
	if code ^= 0
	then do;
		call hphcs_$syserr_error_code (ANNOUNCE, code, "^a: Failed to set terminal type for ^a.", ME,
		     mc_ate.real_tty_name);
		go to tty_err;
	     end;
     end SET_TERM_TYPE;

FLUSH_LINE_STATUS:
     procedure;

	declare code		 fixed bin (35);

	code = error_table_$line_status_pending;
	do while (code ^= 0);
	     call iox_$control (mc_ate.iocb, "line_status", addr (line_status_space), code);
	     if code ^= 0 & code ^= error_table_$line_status_pending
	     then go to tty_err;
	end;
	call iox_$control (mc_ate.iocb, "start", null (), (0));
     end FLUSH_LINE_STATUS;
%page;
decode_event_type:
     procedure (P_network_type, P_event_type) returns (fixed bin);

/**** This internal procedure returns an generic event type based on
      the network type and the event type. */

	dcl     P_network_type	 fixed bin (4) unsigned unaligned parameter;
	dcl     P_event_type	 fixed bin (8) unsigned unaligned parameter;
	dcl     event_type		 fixed bin;

%include net_event_message;

	if P_network_type = MCS_NETWORK_TYPE
	then do;
		if P_event_type = MCS_UNSPECIFIED_MSG
		then event_type = UNSPECIFIED_EVENT;
		else if P_event_type = MCS_DIALUP_MSG
		then event_type = DIALUP_EVENT;
		else if P_event_type = MCS_HANGUP_MSG
		then event_type = HANGUP_EVENT;
		else if P_event_type = MCS_QUIT_MSG
		then event_type = QUIT_EVENT;
		else if P_event_type = MCS_READ_MSG
		then event_type = INPUT_AVAILABLE_EVENT;
		else if P_event_type = MCS_WRITE_MSG
		then event_type = OUTPUT_SPACE_AVAILABLE_EVENT;
		else if P_event_type = MCS_LINE_STATUS_MSG
		then event_type = LINE_STATUS_EVENT;
		else if P_event_type = MCS_MASKED_MSG
		then event_type = MASKED_EVENT;
		else do;
			if P_event_type > MAX_MCS_EVENT_MSG_TYPE
			then call sys_log_$error_log (SL_LOG_SILENT, error_table_$bad_arg, ME,
				"Invalid MCS wakeup event type ^d.", P_event_type);
			else call sys_log_$error_log (SL_LOG_SILENT, error_table_$bad_arg, ME,
				"Unexpected MCS wakeup event type ^a.", MCS_MSG_TYPE_TO_PNAME (P_event_type));
			event_type = -1;
		     end;
	     end;
	else if P_network_type = DSA_NETWORK_TYPE
	then do;
		if P_event_type = DSA_UNSPECIFIED_MSG
		then event_type = UNSPECIFIED_EVENT;
		else if P_event_type = DSA_ESTABLISHMENT_MSG
		then event_type = DIALUP_EVENT;
		else if P_event_type = DSA_TERM_ABNORMAL_MSG
		then event_type = HANGUP_EVENT;
		else if P_event_type = DSA_ATTENTION_MSG
		then event_type = QUIT_EVENT;
		else if P_event_type = DSA_DATA_INPUT_MSG
		then event_type = INPUT_AVAILABLE_EVENT;
		else if P_event_type = DSA_DATA_OUTPUT_MSG
		then event_type = OUTPUT_SPACE_AVAILABLE_EVENT;
		else do;
			if P_event_type > MAX_DSA_EVENT_MSG_TYPE
			then call sys_log_$error_log (SL_LOG_SILENT, error_table_$bad_arg, ME,
				"Invalid DSA event type ^d.", P_event_type);
			else call sys_log_$error_log (SL_LOG_SILENT, error_table_$bad_arg, ME,
				"Unexpected DSA event type ""^a"".", DSA_MSG_TYPE_TO_PNAME (P_event_type));
			event_type = -1;
		     end;
	     end;
	else do;
		call sys_log_$error_log (SL_LOG_SILENT, error_table_$bad_arg, ME,
		     "Unexpected network type ^d in event message.", P_network_type);
		event_type = -1;
	     end;
	return (event_type);

     end decode_event_type;

/* format: off */
%page; %include as_data_;
%page; %include as_meter_numbers;
%page; %include author_dcl;
%page; %include cdt;
%page; %include dial_event_message;
%page; %include dialup_values;
%page; %include event_call_info;
%page; %include iox_entries;
%page; %include mc_anstbl;
%page; %include net_event_message;
%page; %include sc_stat_;
%page; %include sc_subsystem_info_;
%page; %include set_term_type_info;
%page; %include sys_log_constants;
%page; %include syserr_constants;
%page; %include terminal_info;
%page; %include tty_states;
%page;

/* BEGIN MESSAGE DOCUMENTATION

   Message:
   mc_tty_: Channel CHANNEL (vchannel VCHANNEL) received TIMEOUT while awaiting DIALUP wakeup.

   S:	$info

   T:	$run

   M:	Wakeup was not acted on soon enough by AS.

   A:	$inform

   Message:
   mc_tty_: Channel CHANNEL received TIMEOUT while awaiting DIALUP wakeup.

   S:	$info

   T:	$run

   M:	Wakeup was not acted on soon enough by AS.

   A:	$inform

   Message:
   mc_tty_: Event sent from incorrect ring.
   event channel = N, event message = M, event sender = S, device signal = D
   ring = R, event data ptr = P

   S:	$info

   T:	$run

   M:	An event was sent from a ring higher than the specified MNA ring 2.

   A:	$inform

   Message:
   mc_tty_: ERROR_TABLE_MESSAGE Connecting to CHANNEL (vchannel VCHANNEL).

   S:	$info

   T:	$run

   M:	Error creating an IOCB while attempting to connect channel CHANNEL as
   message coordinator terminal.  Channel cannot be accepted as MC terminal.
   Cannot attach and open I/O switches.

   A:	$inform

   Message:
   mc_tty_: ERROR_TABLE_MESSAGE Connecting to CHANNEL.

   S:	$info

   T:	$run

   M:	Error creating an IOCB while attempting to connect channel CHANNEL as
   message coordinator terminal.  Channel cannot be accepted as MC terminal.
   Cannot attach and open I/O switches.

   A:	$inform

   Message:
   mc_tty_: Channel CHANNEL (vchannel VCHANNEL) received WAKEUP_TYPE wakeup while awaiting DIALUP.

   S:	$info

   T:	$run

   M:	Received an unexpected WAKEUP_TYPE wakeup while waiting for a DIALUP
   wakeup.  Dialup will not succeed.

   A:	$inform

   Message:
   mc_tty_: Channel CHANNEL received WAKEUP_TYPE wakeup while awaiting DIALUP.

   S:	$info

   T:	$run

   M:	Did not receive a DIALUP wakeup WAKEUP_TYPE when should have.
   Recieved an unexpected WAKEUP_TYPE.

   A:	$inform

   Message:
   mc_tty_: Line CHAN hung up.

   S:	as (severity 0)

   T:	$run

   M:	Channel CHAN has been hungup during a system shutdown.

   A:	$ignore

   Message:
   mc_tty_: Invalid argument. Invalid MCS wakeup event type TYPE.

   S:     $as0

   T:     $run

   M:     An MCS wakeup event type TYPE was received which is out of the range
   of known event types. The wakeup was ignored.

   A:     $ignore

   Message:
   mc_tty_: Invalid argument. Unexpected MCS wakeup event type TYPE.

   S:     $as0

   T:     $run

   M:     A known MCS wakeup event type TYPE was received but was not expected
   for a message coordinator terminal. The wakeup was ignored.

   Message:
   mc_tty_: Invalid argument. Invalid DSA wakeup event type TYPE.

   S:     $as0

   T:     $run

   M:     A DSA wakeup event type TYPE was received which is out of the range
   of known event types. The wakeup was ignored.

   A:     $ignore

   Message:
   mc_tty_: Invalid argument. Unexpected DSA wakeup event type TYPE.

   S:     $as0

   T:     $run

   M:     A known DSA wakeup event type TYPE was received but was not expected
   for a message coordinator terminal. The wakeup was ignored.

   A:     $ignore

   Message:
   mc_tty_: Invalid argument. Unexpected network type TYPE in event message.

   S:     $as0

   T:     $run

   M:     An unknown network ident in wakeup event message was received.
   The wakeup was ignored.

   A:     $ignore

   Message:
   OPER:

   S:	Initializer terminal.

   T:	$run

   M:	This message is typed if the operator
   enters a blank line on a message coordinator terminal.
   It indicates that input is expected
   on the terminal, and that output will be
   inhibited for 30 seconds.

   A:	Type a system control command.

   Message:
   Channel CHANNEL_NAME attached by Message Coordinator.

   S:	Initializer terminal.

   T:	$run

   M:	The terminal has been attached by the message coordinator in 
          response to an accept or substty command.

   A:	Proceed to use the terminal.

   Message:
   mc_tty_: called with bad pointer

   S:	BOS typewriter.

   T:	$run

   M:	This message indicates a bug in system_control_ or in
   the Message Coordinator.  An illegal signal has been
   received by the attached terminal handler in system_control_;
   the data pointer that should point to an
   entry in the mc_anstbl does not point to the correct
   segment.  The signal is ignored.

   A:	$contact

   Message:
   mc_tty_: called with null ptr

   S:	BOS typewriter.

   T:	$run

   M:	This message indicates a bug in system_control_ or
   in the Message Coordinator.  An illegal signal has
   been received by the attached terminal handler in
   system_control_.  The signal is ignored.

   A:	$contact

   Message:
   mc_tty_: channel CHAN masked by FNP.

   S:	$beep

   T:	$run

   M:	The channel, CHAN, has just been masked by the FNP.  This is usually
   due to some hardware problem with the channel.

   A:	Fix the problem before re-using the channel.

   Message:
   mc_tty_: ERROR_TABLE_MESSAGE wru failed for CHAN.

   S:	$info

   T:	$run

   M:	The CDT entry for channel CHAN requires an answerback, but an error
   was returned while trying to read it.  The returned error is described by
   ERROR_TABLE_MESSAGE.

   A:	Verify that the channel is configured correctly in the CDT.

   Message:
   mc_tty_: ERROR_TABLE_MESSAGE Could not remove CHAN from MC use.

   S:	$info

   T:	$run

   M:	An error, described by ERROR_TABLE_MESSAGE, was returned from
   mc_commands_$remove_tty while tring to remove channel CHAN from MC service
   after a hangup.

   A:	$inform

   Message:
   mc_tty_: ERROR_TABLE_MESSAGE Could not get channel CHAN back from MC.

   S:	$info

   T:	$run

   M:	An error, described by ERROR_TABLE_MESSAGE, was returned from
   astty_$tty_event while trying to give channel CHAN back to the AS after a
   hangup.

   A:	$inform

   Message:
   mc_tty_: ERROR_TABLE_MESSAGE Could not notify answering service of new
   login channel CHAN.

   S:	$info

   T:	$run

   M:	An error, described by ERROR_TABLE_MESSAGE, was returned from
   hcs_$wakeup while trying to notify the AS about the new login channel CHAN,
   after a hangup.

   A:	$inform

   Message:
   mc_tty_: sc_stat_$mc_ansp is null

   S:	$info

   T:	$run

   M:	This message indicates a bug in system_control_ or
   in the Message Coordinator.  A signal has been received
   by the attached terminal handler in system_control_
   but the signal cannot be handled because the mc_anstbl
   cannot be located.  The signal is ignored.

   A:	$contact

   Message:
   mc_tty_: ERROR_TABLE_MESSAGE Failed to set terminal type for CHAN.

   S:	$info

   T:	$run

   M:	An error described ty ERROR_TABLE_MESSAGE was returned while trying to
   set the terminal type on channel CHAN.

   A:	Depending on the error, it may be ignored, or the channel may be
   hungup.  If the channel is hungup, an attempt should be made to fix the
   error before connecting the terminal again.

   Message:
   mc_tty_: channel CHAN hung up.

   S:	$beep

   T:	$run

   M:	This message indicates that an attempt has been made
   to read input from a terminal device channel attached
   to the Message Coordinator and that the channel is
   not active.  This condition may be due to a transient
   line condition, a terminal failure, or a communications
   line failure.  The system attempts to proceed.

   A:	If the terminal is a hardwired device and can be
   reconnected, do so.  If this is a dialup channel that has
   failed, use the substty or drop commands to remove
   the channel.

   Message:
   mc_tty_: No default ttp for CHANNEL line LINE baud BAUD.

   S:	$beep

   T:	$run

   M:	Could not get default terminal type for terminal on CHANNEL which
   has a line type of LINE.  Hangup will follow.

   A:     $inform


   END MESSAGE DOCUMENTATION */

     end mc_tty_;
