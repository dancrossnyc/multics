/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


mc_list: proc;

/* MC_LIST - produce a set of define and route commands from current tables.

   Written by THVV
   Modified 750213 by PG to be able to print test_udd tables
*/

dcl (path, dn) char (168) aligned,
     en char (32) aligned,
     srch (10) char (32) aligned,
    (i, j, k, l, m, n) fixed bin,
     write fixed bin init (0),
     ap ptr,
     al fixed bin,
     bchr char (al) unaligned based (ap),
     ec fixed bin (35);

dcl (addr, index, null, search, substr) builtin;

dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35)),
     expand_path_ entry (ptr, fixed bin, ptr, ptr, fixed bin (35)),
     ioa_ entry options (variable),
     com_err_ entry options (variable);

dcl  hcs_$initiate entry (char (*) aligned, char (*) aligned, char (*) aligned, fixed bin (1),
     fixed bin (2), ptr, fixed bin (35)),
     hcs_$terminate_noname entry (ptr, fixed bin (35));

%include vcons_tab;
%include mess_route_table;

dcl  mrtp ptr;
dcl  streamp ptr;

dcl  vconsp ptr;
dcl  vcep ptr;

dcl  typer (3) char (4) aligned int static init ("tty", "log", "sink");

/* ------------------------------------------------------- */

	m = 0;
	l = 0;
	k = 1;
	path = ">system_control_1";
arglp:	call cu_$arg_ptr (k, ap, al, ec);
	if ec ^= 0 then go to vct1;
	if search (bchr, "<>") ^= 0			/* is it a pathname? */
	     then path = bchr;
	else do;
	     m = m + 1;				/* it's a keyword to search for */
	     if m > 10 then go to vct1;
	     if bchr = "*" then l = m;
	     srch (m) = bchr;
	end;
	k = k + 1;
	go to arglp;

vct1:
	i = index (path, " ");
	if i = 0 then i = length (path);
	call expand_path_ (addr (path), i, addr (dn), null, ec);
	if ec ^= 0 then do;
	     call com_err_ (ec, "mc_list", "^a", path);
	     return;
	end;
	en = "vcons_tab";
	call hcs_$initiate (dn, en, "", 0, 1, vconsp, ec);
	if vconsp = null then do;
er:
	     call com_err_ (ec, "mc_list", "^a>^a", dn, en);
	     return;
	end;

	call pvcons ("*", addr (vcons_tab.star_entry));

	do i = 1 to vcons_tab.no_of_vcons;
	     if ^vcons_tab.vcons (i).flags.inuse then go to skip;
	     call pvcons (vcons_tab.vcons (i).vcons, addr (vcons_tab.vcons (i)));
skip:	end;

	call hcs_$terminate_noname (vconsp, ec);

/* --------------- */

	en = "MRT";
	call hcs_$initiate (dn, en, "", 0, 1, mrtp, ec);
	if mrtp = null then go to er;

	call pstream ("*", addr (MRT.star_entry.stream));

	do i = 1 to MRT.no_of_sources;
	     if ^MRT.source (i).flags.valid then go to sskip;
	     do j = 1 to MRT.source (i).no_of_streams;
		if MRT.source (i).stream (j).flags.valid then
		     call pstream (MRT.source (i).source, addr (MRT.source (i).stream (j)));
	     end;

sskip:	end;

	call hcs_$terminate_noname (mrtp, ec);
	if write = 0 then call ioa_ ("none");
	return;

/* ------------------------------------------------------- */

pstream:	proc (id, sp);

dcl  id char (*) aligned, sp ptr;

dcl  k fixed bin,
     vstr char (64) varying,
     vconst char (32) aligned,
     sourcet char (32) aligned;

	     streamp = sp;
	     if substr (stream.source, 1, 1) < " " then sourcet = "*";
	     else sourcet = stream.source;
	     do k = 1 to stream.no_of_vcons;

		if substr (stream.flags.alarm, k, 1) then vconst = "*" || stream.vcons (k);
		else vconst = stream.vcons (k);	/* Star means alarm flag will be in message */
		do n = 1 to m;
		     if id = srch (n) then go to pvv1;
		end;
		do n = 1 to m;
		     if stream.stream = srch (n) then go to pvv1;
		end;
		do n = 1 to m;
		     if stream.vcons (k) = srch (n) then go to pvv1;
		end;
		if m ^= 0 then go to pvv2;
pvv1:		call ioa_ ("route ^a ^a ^a",
		     id, stream.stream, vconst);
		write = write + 1;

pvv2:	     end;

	end pstream;

pvcons:	proc (id, sp);

dcl  id char (*) aligned, sp ptr;

dcl  k fixed bin,
     temptype char (8) aligned;

	     vcep = sp;
	     do k = 1 to vcons.no_of_dest;
		temptype = typer (vcons.dest (k).type);
		do n = 1 to m;
		     if id = srch (n) then go to pvv3;
		end;
		do n = 1 to m;
		     if vcons.dest (k).dest = srch (n) then go to pvv3;
		end;
		do n = 1 to m;
		     if temptype = srch (n) then go to pvv3;
		end;
		if m ^= 0 then go to pvv4;
pvv3:		call ioa_ ("define ^a ^a ^a",
		     id, temptype, vcons.dest (k).dest);
		write = write + 1;

pvv4:	     end;

	end pvcons;

     end mc_list;
