/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: style4,indattr */

mc_util_: procedure;

/* This procedure contains utility routines used by the message coordinator.
   It contains the following entries:
   init:
   mrt_source:
   mrt_stream:
   get_seg:
   queue
*/

/* message_coordr_ was originally created by Dennis Capps
   with advice from TH VanVleck in October of 1972.
   mc_util_ created by Bill Silver on May 31, 1974.
   modified August 1976 by Robert Coren to get pointer to CDT and to behave sensibly if init entry is called twice.
   Modified June 1971 by T. Casey for MR9.0 for new wakeup priorities.
   Modified 1984-12, BIM: iox_ message coordinator.
*/


/****^  HISTORY COMMENTS:
  1) change(86-01-07,MSharpe), approve(87-05-01,MCR7690),
     audit(87-05-10,Parisek), install(87-08-04,MR12.1-1055):
     Added the new "virtual_flag" and "cdt_channel_flag" arguments to the
     declaration and calls to mc_commands_$new_tty.
  2) change(87-02-05,GDixon), approve(87-05-01,MCR7690),
     audit(87-05-10,Parisek), install(87-08-04,MR12.1-1055):
     Modified for a change to mc_anstbl.incl.pl1.
     Added the new "cdt_channel_flag" argument to the declaration and
     calls to mc_commands_$new_tty.
  3) change(87-03-27,Parisek), approve(87-05-01,MCR7690),
     audit(87-08-03,GDixon), install(87-08-04,MR12.1-1055):
     Initialize the mc_anstbl.dsa_ring_number entry in the mc_anstbl
     structure.
                                                   END HISTORY COMMENTS */

%page;
/* Parameters */
declare
         arg_alarm		  bit (1),		/* ON => alarm message. */
         arg_code		  fixed bin,		/* Error code. */
         arg_entry_name	  char (*),		/* Name of segment to initiate. */
         arg_qp		  ptr,			/* Pointer to output queue segment. */
         arg_seg_ptr	  ptr,			/* Pointer to segment that was initiated. */
         arg_source_name	  char (*),		/* Name of source entry. */
         arg_sourcex	  fixed bin,		/* Index to source entry. */
         arg_stream_name	  char (*),		/* Name of stream entry. */
         arg_streamp	  ptr,			/* Pointer to stream entry. */
         arg_streamx	  fixed bin,		/* Index to stream entry. */
         arg_string_len	  fixed bin,		/* Length of input string. */
         arg_source		  fixed bin,		/* Source index */
         arg_string_ptr	  ptr,			/* Pointer to input string. */
         ansptr		  ptr,			/* Returned pointer to mc_anstbl. */
         cons_cont_proc	  entry,			/* Entry to call to twitch typewriter. */
         intty		  char (*),		/* Console name.  */
         inttyp		  ptr,			/* Returned pointer to mc_ate. */
         sdir		  char (*);		/* Pathname of system directory for tables. */

/* Declarations of POINTERS  */
declare
         cdtp		  ptr,			/* to Channel Definition Table */
         mc_ansp_stat	  ptr int static init (null), /* to mc_anstbl */
         mcmp		  ptr int static init (null), /* to message seg for message coordinator */
         messp		  ptr int static init (null), /* to a partic message */
         mrtp		  ptr int static init (null), /* to Message Routing Table */
         qp		  ptr,			/* to queue of lines to be typed on a device */
         seg_ptr		  ptr,			/* to make a segment. */
         streamp		  ptr,			/* to a stream entry in MRT. */
         string_ptr		  ptr,			/* to input string. */
         temp_SDBp		  ptr int static init (null), /* to temp_SDB */
         vcep		  ptr,			/* to an entry in virtual console table */
         vconsp		  ptr int static init (null); /* to Virtual CONSole table */

/* Fixed binary quantities */
declare
         ackn		  fixed bin (71) init (0),	/* event message for calls to hcs_$wakeup */
         code		  fixed bin,		/* Error code */
         i		  fixed bin,		/* a temporary index */
         j		  fixed bin,		/* another temporary index */
         sourcex		  fixed bin,
         streamx		  fixed bin,
         string_len		  fixed bin,
         vacantx		  fixed bin;

/* Character strings */
declare
         entry_name		  char (32),
         source_name	  char (32),
         stream_name	  char (32),
         sysdir		  char (168) int static init (">system_control_1");

/* BIT strings */
declare
         dont_log		  bit (1) init ("0"b),	/* "1"b=>Sentinel-- Needn't be logged */
         initialized	  bit (1) int static init ("0"b), /* to prevent multiple initializations */
         wake_typer		  bit (1);		/* ON => send wakeup. */

/* BUILTIN FUNCTIONS */
declare
         addr		  builtin,
         null		  builtin,
         string		  builtin;

/* EXTERNAL ENTRIES */
declare
         get_process_id_	  entry returns (bit (36)),
         hcs_$add_acl_entries	  entry (char (*), char (*), ptr, fixed bin, fixed bin),
         hcs_$initiate	  entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr, fixed bin),
         hcs_$make_seg	  entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin),
         hcs_$terminate_noname  entry (ptr, fixed bin),
         hcs_$truncate_seg	  entry (ptr, fixed bin, fixed bin),
         hcs_$wakeup	  entry (bit (36) aligned, fixed bin (71), fixed bin (71), fixed bin),
         ipc_$create_ev_chn	  entry (fixed bin (71), fixed bin),
         ipc_$decl_ev_call_chn  entry (fixed bin (71), entry, ptr, fixed bin, fixed bin),
         mc_commands_$define	  entry (char (*), char (*), char (*), fixed bin),
         mc_commands_$init	  entry (ptr, ptr, ptr, ptr, ptr),
         mc_commands_$new_tty	  entry (char (*), bit (36), bit (1) aligned,
			    ptr, fixed bin),
         mc_con_rec_$init	  entry (ptr),
         mc_util_$get_seg	  entry (char (*), ptr, fixed bin),
         mc_wakeups_$init	  entry (ptr, ptr, ptr, ptr),
         mc_wakeups_$protocol	  entry (ptr),
         mc_wakeups_$router	  entry (ptr);

/* EXTERNAL constants */
declare
         error_table_$ioname_not_found ext fixed bin,
         error_table_$noentry	  ext fixed bin;

/* STRUCTURES */
declare
         1 temp_SDB		  int static aligned like stream, /* For calls to mrd_util_$read */
         1 temp_mess	  int static aligned like message_block; /* ditto */

dcl  based_string	        char (string_len) based (string_ptr);

declare
         1 segment_acl	  (1) aligned,
	 2 access_name	  char (32),
	 2 modes		  bit (36),
	 2 mbz		  bit (36) init ("0"b),
	 2 status_code	  fixed bin (35);

%page;
init: entry (sdir, intty, cons_cont_proc, ansptr, inttyp, arg_code);


/* This entry is called to initialize the message coordinator.
   It  sets up all the tables used by the message coordinator.
   It calls the initialization entries of the other procedures
   that make up the message coordinator.
*/
	sysdir = sdir;
	code = 0;

	if initialized				/* already been called */
	then do;					/* we still have to fill in output arguments */
	     call hcs_$initiate (sysdir, "mc_anstbl", "", 0, 1, ansptr, code);
	     if ansptr ^= null
	     then do;
		call hcs_$terminate_noname (ansptr, code); /* once is enough */
		call mc_commands_$new_tty (intty, (36)"1"b, "1"b, inttyp, code);
		arg_code = 0;
	     end;

	     else arg_code = code;
	     return;
	end;

	messp = addr (temp_mess);
	temp_SDBp = addr (temp_SDB);
	temp_SDB.ourmess = null;
	temp_SDB.hismess = null;
	temp_SDB.source = "(op)";
	temp_SDB.stream = "reply";
	temp_SDB.source_index = 0;
	temp_SDB.stream_index = 0;
	temp_SDB.prev_trans.first_block = 0;
	temp_SDB.prev_trans.end_block = 0;
	temp_SDB.prev_trans.current_block = 0;
	temp_SDB.prev_trans.offset = 0;
	temp_SDB.no_of_vcons = 0;
	string (temp_SDB.flags) = "0"b;

/* Initiate mc.message */
	call mc_util_$get_seg ("mc.message", mcmp, code);
	if code ^= 0
	then goto INIT_RETURN;

	temp_SDB.ourmess = mcmp;

/* Initialize mc.message */
	call hcs_$truncate_seg (mcmp, 0, code);		/* Zero it */
	mcmp -> syscon_mseg.current_process_id = get_process_id_ ();
	mcmp -> syscon_mseg.ipc_el.n = 1;
	call ipc_$create_ev_chn (mcmp -> syscon_mseg.ipc_el.channel, code);
	if code ^= 0 then goto INIT_RETURN;
	mcmp -> syscon_mseg.proto_el.n = 1;
	call ipc_$create_ev_chn (mcmp -> syscon_mseg.proto_el.channel, code);
	if code ^= 0 then goto INIT_RETURN;

/* Make these event call channels so sources can get some action going */
	call ipc_$decl_ev_call_chn (mcmp -> syscon_mseg.ipc_el.channel, mc_wakeups_$router, null, MC_PRIO, code);
	call ipc_$decl_ev_call_chn (mcmp -> syscon_mseg.proto_el.channel, mc_wakeups_$protocol, null, MC_PRIO, code);

/* Initiate other segs */
	call mc_util_$get_seg ("mc_anstbl", mc_ansp, code);
	if code ^= 0
	then goto INIT_RETURN;
	mc_ansp_stat, ansptr = mc_ansp;

	call mc_util_$get_seg ("cdt", cdtp, code);
	if code ^= 0 then go to INIT_RETURN;

	call mc_util_$get_seg ("vcons_tab", vconsp, code);
	if code ^= 0
	then goto INIT_RETURN;

	call mc_util_$get_seg ("MRT", mrtp, code);
	if code ^= 0
	then goto INIT_RETURN;

/* Set up mc_anstbl */
/* First fill in the header */
	call hcs_$truncate_seg (mc_ansp, 0, code);
	mc_anstbl.max_size = 256;			/* No of entries permitted. */
	mc_anstbl.mc_procid = mcmp -> syscon_mseg.current_process_id;
	mc_anstbl.sysdir = sysdir;			/* Where to find  put data segs. */
	mc_anstbl.mrtp = mrtp;			/* Pointer to MRT */
	mc_anstbl.vconsp = vconsp;			/* Pointer to Virtual Console Table */
	mc_anstbl.cons_cont_proc = cons_cont_proc;	/* Proc to wake when tty wants something. */
	mc_anstbl.max_sources = 32;
	mc_anstbl.dsa_ring_number = 2;		/* DSA ring */
	

/* Now we must initialize some of the other procedures which make up
   the message coordinator.  We will pass them some pointers they are
   interrested in.
*/
	call mc_commands_$init (mc_ansp, cdtp, temp_SDBp, mcmp, messp);
	call mc_con_rec_$init (mc_ansp);
	call mc_wakeups_$init (mc_ansp, temp_SDBp, mcmp, messp);

/*	Set up first entry in mc_anstbl.
*/
	call mc_commands_$new_tty (intty, (36)"1"b, "1"b, inttyp, code);
	if code ^= 0 then
	     if code = error_table_$ioname_not_found then code = 0;
	     else goto INIT_RETURN;

	call hcs_$truncate_seg (vconsp, 0, code);	/* Initialize virtual console table. */

/* Fill in * entry */
	vcep = addr (vcons_tab.star_entry);
	vcons.vcons = "*";
	vcons.no_of_dest = 1;
	vcons.dest (1).type = 1;
	vcons.dest (1).dest = intty;
	vcons.dest (1).queue_seg_ptr = addr (mc_anstbl.entry (1)) -> mc_ate.queue_ptr;

/* Define the default virtual console. */
	call mc_commands_$define ("default_vcons", "tty", intty, code);
	if code ^= 0 then
	     if code = error_table_$ioname_not_found then code = 0;


/* Initialize the MRT */
	call hcs_$truncate_seg (mrtp, 0, code);
	MRT.star_entry.source = "*";
	MRT.star_entry.hismess = null;
	MRT.star_entry.no_of_streams = 1;
	streamp = addr (MRT.star_entry.stream);
	stream.stream = "*";
	stream.ourmess = mcmp;
	stream.no_of_vcons = 1;
	stream.vcons (1) = "default_vcons";
	stream.vcons_index (1) = 1;
	initialized = "1"b;

INIT_RETURN:
	arg_code = code;
	return;
%page;

mrt_source: entry (arg_source_name, arg_sourcex, arg_code);


/* This entry is called to look for a source entry in the Message
   Routing Table.  It returns the index associated with this
   source entry.
*/

	source_name = arg_source_name;		/* Copy input argument. */
	vacantx = 0;				/* We remember first vacant entry. */

	do sourcex = 1 to MRT.no_of_sources;
	     if MRT.source (sourcex).source = source_name
	     then do;				/* We found the right source entry. */
		arg_sourcex = sourcex;		/* Set return arguments. */
		arg_code = 0;
		return;
	     end;
	     if vacantx = 0				/* Is this a vacant entry? */
	     then if ^MRT.source (sourcex).flags.valid
		then vacantx = sourcex;
	end;

	arg_sourcex = vacantx;			/* Didn't find right source entry. */
	arg_code = error_table_$ioname_not_found;

	return;
%page;

mrt_stream: entry (arg_sourcex, arg_stream_name, arg_streamp, arg_streamx, arg_code);


/* This entry is called to find a stream entry within a source entry.
   It will return a pointer to the stream entry as well as the array
   index associated with this stream entry.
*/

	sourcex = arg_sourcex;			/* Copy argument data. */
	stream_name = arg_stream_name;

	vacantx = 0;				/* We're going to remember the first vacancy. */

	do streamx = 1 to MRT.source (sourcex).no_of_streams;
	     streamp = addr (MRT.source (sourcex).stream (streamx));
	     if streamp -> stream.stream = stream_name
	     then do;				/* Found the right stream entry. */
		arg_streamp = streamp;
		arg_streamx = streamx;
		arg_code = 0;
		return;
	     end;
	     if vacantx = 0				/* Save index of first vacant entry. */
	     then if ^(streamp -> stream.flags.valid)
		then vacantx = streamx;
	end;

	streamx = vacantx;				/* Didn't find the right stream entry. */
	if streamx = 0				/* Did we find a vacant entry? */
	then arg_streamp = null ();			/* No. */
	else arg_streamp = addr (MRT.source (sourcex).stream (streamx));
	arg_streamx = streamx;
	arg_code = error_table_$ioname_not_found;

	return;
%page;

get_seg: entry (arg_entry_name, arg_seg_ptr, arg_code);


/* This entry is called to obtain a pointer to a segment whose entry name
   is passed as an argument.  If we cannot initiate the segment, we will
   make a new segment with that name.
*/

	entry_name = arg_entry_name;			/* Initialize arguments. */
	code = 0;

	call hcs_$initiate (sysdir, entry_name, "", 0, 1, seg_ptr, code);
	if seg_ptr ^= null
	then code = 0;				/* Not null, forget code. */
	else if code = error_table_$noentry		/* Null => segment  not there. */
	then do;
	     call hcs_$make_seg (sysdir, entry_name, "", 01011b, seg_ptr, code);
	     if seg_ptr ^= null
	     then do;				/* We have created it. */
		segment_acl (1).access_name = "*.SysDaemon.*";
		segment_acl (1).modes = "101"b;
		call hcs_$add_acl_entries (sysdir, entry_name,
		     addr (segment_acl), 1, code);
	     end;
	end;

	arg_seg_ptr = seg_ptr;			/* Return arguments. */
	arg_code = code;

	return;
%page;

queue: entry (arg_qp, arg_alarm, arg_string_ptr, arg_string_len, arg_source, arg_code);


/* This entry is called to put a message in a device output queue.
*/

	qp = arg_qp;				/* Copy arguments. */
	code = 0;
	string_ptr = arg_string_ptr;
	string_len = arg_string_len;

	code = 0;
	mc_ansp = mc_ansp_stat;

	if device_queue.top_of_queue = 0 then		/* Empty queue */
	     do;
	     wake_typer = "1"b;			/* REmember to wake typer_out */
	     if device_queue.free_top = 0 then		/* Empty free storage list */
		j,				/* Allocate new block */
		     device_queue.top_of_queue,
		     device_queue.end_of_queue,
		     device_queue.next_free = device_queue.next_free + 1;
	     else do;				/* Take block from free list */
		j, device_queue.top_of_queue,
		     device_queue.end_of_queue = device_queue.free_top;
		device_queue.free_top = device_queue.line (j).next_line;
	     end;
	end;
	else do;					/* Stuff already in queue */
	     wake_typer = "0"b;			/* Wakeup will come from self or tty_aught */
	     if device_queue.free_top = 0 then		/* Empty free storage list */
		j,				/* Allocate new block */
		     device_queue.next_free = device_queue.next_free + 1;
	     else do;				/* Take block from free list */
		j = device_queue.free_top;
		device_queue.free_top = device_queue.line (j).next_line;
	     end;
	     i = device_queue.end_of_queue;		/* Put it on end of queue */
	     device_queue.line (i).next_line,
		device_queue.end_of_queue = j;
	end;
	device_queue.line (j).not_done = "0"b;		/* Fill it in */
	device_queue.line (j).alarm = arg_alarm;
	device_queue.line (j).next_line = 0;
	device_queue.line (j).offset = 0;
	device_queue.line (j).line_length = string_len;
	device_queue.line (j).source = arg_source;
	device_queue.line (j).string = based_string;
	device_queue.no_of_messages = device_queue.no_of_messages + 1;
	if wake_typer
	then call hcs_$wakeup (mc_anstbl.mc_procid, device_queue.channel, 0, code);
	arg_code = code;
	return;

%page;	%include as_wakeup_priorities;
%page;	%include syscon_mseg;
%page;	%include mess_route_table;
%page;	%include vcons_tab;
%page;	%include device_queue;
%page;	%include mc_anstbl;
     end mc_util_;
