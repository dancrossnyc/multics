/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(87-09-15,Parisek), approve(87-09-21,MECR0008),
     audit(87-09-21,GDixon), install(87-09-21,MR12.1-1114):
     On any_other conditions report condition name, reset the message segment
     header, unlock the message segment if locked and return to caller with an
     error code instead of terminating the process. (phx20928)
                                                   END HISTORY COMMENTS */


/* format: style4 */
mrd_util_:
     procedure;

/* MRD_UTIL_ - This procedure contains all code which must deal with a
   message coordinator "message" segment in a consistent fashion.  This is
   the only program which locks and unlocks these segments. */

/* Coded by Dennis Capps, July 1972
   Modified by J. C. Whitmore, Aug 1975 to return event chan on each
   read_status call.
   Rewritten 751223 by PG
   Modified 6/8/83 by E. N. Kittlitz to fix uninitialized variable used by
   cleanup.
   Modified 1985-03-11 by E. Swenson to fix locking code and add cleanup
   handler.
*/

/* builtins */

dcl  (addr, clock, divide, index, min, null, string, substr) builtin;

/* parameters */

dcl  (tp ptr,					/* ptr to Stream Data Block */
     workp ptr,					/* ptr to I/O workspace for transfer */
     first_char fixed bin,				/* Offset from base of users workspace */
     nchar fixed bin,				/* Number of characters to be transferred */
     nchart fixed bin,				/* Number of characters actually transferred */
     state fixed bin,				/* 0 -- end of data,1 -- more to message. */
     code fixed bin (35),				/* error code */
     reqsw fixed bin,				/* what to abort */
     request char (*)				/* What kind of protocol request */
     ) parameter;

/* Automatic */

dcl  dont_flood bit (1) aligned init ("0"b);		/* TRUE = may go into output wait */
dcl  lock_ptr ptr init (null);			/* ptr to message seg we have locked */
dcl  lock_set bit (1) aligned init (""b);		/* ON if we have lock set */
dcl  mask bit (36) aligned init (""b),			/* IPS Mask */
     my_name char (32) varying,
     ourmp ptr,					/* Pointer to message seg for this function */
     recursion fixed bin initial (0),
     hismp ptr,					/* Pointer to message seg for destination func. */
     messp ptr,
     messp1 ptr,
     thatp ptr,					/* Used in transferring characters. */
     thisp ptr,					/* Used in transferring characters. */
     chainp ptr,					/* Points to head & tail info for current chain */
     mp ptr,
     wake_up_chan fixed bin (71),			/* How to tell him message deposited */
     event_mess fixed bin (71),			/* Give inkling of whats happening */
     i fixed bin,					/* A temporary index */
     autocode fixed bin (35),				/* Error code */
     this_message fixed bin,				/* Message block currently under inspection */
     begin_this fixed bin,				/* First block of this message */
     end_this fixed bin,				/* last block of this message  */
     prev_message fixed bin,				/* Message block previously under inspection */
     time fixed bin (71),				/* Current time  (postmark) */
     n fixed bin,					/* Temporaries of a dedicated nature */
     no_of_blocks fixed bin,
     len fixed bin;
dcl  ipc_mask_code fixed bin (35);
dcl  ipc_unmask_code fixed bin (35);

dcl  1 ci aligned like condition_info;			/* Condition info */
dcl  1 message_type,
       2 continue bit (1),				/* Message continued in next block */
       2 introduction bit (1),			/* This is an introductory message */
       2 farewell bit (1),				/* "       "   farewell  "  */
       2 sentinel bit (1),				/* Don't print time at front of this one */
       2 unused bit (32);
dcl  1 terminate_info structure aligned,
       2 version fixed bin,
       2 code fixed bin (35);

/* based */

dcl  1 chain based (chainp),
       2 chain_head fixed bin,			/* first_message or first_proto */
       2 chain_tail fixed bin;			/* last_message or last_proto */

dcl  based_mess char (len) based (thatp),		/* For transferring characters */
     char_array (buff_len) char (1) based (thisp),	/* For updating thisp   */
     char_event_mess char (8) based,			/* Goes with event_mess  */
     this_batch char (len) based (thisp);		/* For transferring characters */

dcl  1 SDB based (tp) aligned,			/* one entry in list of stream control blocks */
       2 dim_name char (32),				/* the name of this DIM */
       2 device_name_list ptr,			/* threaded list of device id's */
       2 next_device ptr,				/* pointer to next entry in threaded list */
       2 device_name_size fixed bin,			/* number of chars in device name */
       2 device_name char (32),			/* device id */
       2 pad1 fixed bin,
       2 ipc_ep ptr,				/* to normal event list for read block */
       2 proto_ep ptr,				/* to protocol event list for att & det */
       2 nextp ptr,					/* pointer to next stream block in chain */
       2 ourmess ptr,				/* Pointer to mseg for this function */
       2 hismess ptr,				/* Pointer to mseg for message coord'r */
       2 source char (32),				/* symbolic name of I/O source  */
       2 stream char (32),				/* symbolic name of I/O stream  */
       2 source_index fixed bin,			/* in MRT */
       2 stream_index fixed bin,
       2 flags,
         3 valid bit (1) unal,			/* "1"b = entry-in-use, "0"b = not_in_use */
         3 read bit (1) unal,				/* "1"b = stream attached for reading. */
         3 write bit (1) unal,			/* "1"b = stream attached for writing. */
         3 active bit (1) unal,			/* For compatibility with message_coordr_ */
         3 more bit (1) unal,				/* "1"b = More text in this message than we've given */
         3 unused bit (31) unal,
       2 prev_trans,
         3 first_block fixed bin,
         3 end_block fixed bin,
         3 current_block fixed bin,
         3 offset fixed bin;

/* Entries */

dcl  continue_to_signal_ entry (fixed bin (35)),
     find_condition_info_ entry (ptr, ptr, fixed bin(35)),
     get_process_id_ entry () returns (bit (36) aligned),
     hcs_$fs_get_path_name entry (ptr, char (*), fixed bin, char (*), fixed bin (35)),
     hcs_$reset_ips_mask entry (bit (36) aligned, bit (36) aligned),
     hcs_$set_ips_mask entry (bit (36) aligned, bit (36) aligned),
     hcs_$wakeup entry (bit (36) aligned, fixed bin (71), fixed bin (71), fixed bin (35)),
     ipc_$drain_chn entry (fixed bin (71), fixed bin (35)),
     ipc_$mask_ev_calls entry (fixed bin (35)),
     ipc_$unmask_ev_calls entry (fixed bin (35)),
     phcs_$ring_0_message ext entry (char (*)),
     set_lock_$lock entry (bit (36) aligned, fixed bin, fixed bin (35)),
     set_lock_$unlock entry (bit (36) aligned, fixed bin (35));
dcl  terminate_process_ entry (char (*), ptr);

/* internal static */

dcl  (my_process_id bit (36) aligned initial ((18)"10"b),
     thirty_seconds fixed bin init (30) options (constant), /* How long before set_lock_ gives up */
     NL char (1) initial ("
"),
     LIMIT fixed bin init (10),			/* Max # lines queued but not printed */
     OWAIT fixed bin init (123)			/* Err code to mrdim_ => output wait */
     ) internal static;

/* external static */

dcl  error_table_$argerr fixed bin (35) external;
dcl  error_table_$lock_wait_time_exceeded fixed bin (35) external;
dcl  error_table_$invalid_lock_reset fixed bin (35) external;
dcl  error_table_$locked_by_this_process fixed bin (35) external;
dcl  error_table_$no_message fixed bin (35) external;
dcl  error_table_$unable_to_do_io fixed bin (35) external;

/* Conditions */

dcl  any_other condition;
dcl  cleanup condition;
%page;
/* Program */

protocol: entry (tp, workp, first_char, nchar, nchart, request, code);

/* This entry helps a function to do certain things to make the
   interaction with the message coordinator go smoothly */

	my_name = "mrd_util_$protocol";
	string (message_type) = ""b;
	hismp = SDB.hismess;
	addr (event_mess) -> char_event_mess = request;

	if request = "attach" then do;
	     my_process_id = get_process_id_ ();	/* this is the first call to this program... */
	     wake_up_chan = hismp -> syscon_mseg.proto_el.channel;
	     message_type.introduction = "1"b;
	     chainp = addr (hismp -> syscon_mseg.first_proto);
	end;
	else if request = "sentinel" then do;
	     wake_up_chan = hismp -> syscon_mseg.ipc_el.channel;
	     message_type.sentinel = "1"b;
	     chainp = addr (hismp -> syscon_mseg.first_message);
	end;
	else if request = "detach" then do;
	     wake_up_chan = hismp -> syscon_mseg.proto_el.channel;
	     message_type.farewell = "1"b;
	     chainp = addr (hismp -> syscon_mseg.first_proto);
	end;
	else do;
	     code = error_table_$argerr;
	     return;
	end;
	go to common_write;

/* This is the ordinary entry for writing.  */

write_dont_flood:
     entry (tp, workp, first_char, nchar, nchart, state, code);
	dont_flood = "1"b;

write: entry (tp, workp, first_char, nchar, nchart, state, code);

	mask = ""b;
	on any_other
	     call ANY_OTHER_HANDLER ();

	my_name = "mrd_util_$write";
	string (message_type) = ""b;
	hismp = SDB.hismess;
	wake_up_chan = hismp -> syscon_mseg.ipc_el.channel;
	addr (event_mess) -> char_event_mess = "normal";
	chainp = addr (hismp -> syscon_mseg.first_message);
	ourmp = SDB.ourmess;

	if dont_flood
	     & (hismp -> syscon_mseg.current_process_id ^= ourmp -> syscon_mseg.current_process_id)
	     & (ourmp -> syscon_mseg.mescount >= LIMIT | ourmp -> syscon_mseg.output_wait)
	then do;
	     ourmp -> syscon_mseg.output_wait = "1"b;
	     code = OWAIT;
	     return;
	end;
	ourmp -> syscon_mseg.mescount = ourmp -> syscon_mseg.mescount + 1;

common_write:
	ourmp = SDB.ourmess;
	nchart = 0;				/* A couple of initializations. */
	code = 0;

	lock_set = "0"b;				/* for cleanup handler */
	lock_ptr = null ();				/* for cleanup handler */
	ipc_mask_code, ipc_unmask_code = -1;

	on condition (cleanup)
	     call CLEAN_UP ();

	call LOCK (hismp, code);			/* lock the message segment (shared amoung many processes) */
	if code ^= 0 then return;

/* Now that the seg is locked, calculate how many blocks we need
   for this message.  Grab them. Unlock the seg and we can fill them at our leisure. */
	no_of_blocks = divide (nchar + buff_len - 1, buff_len, 17, 0);

	message_type.continue = "1"b;
	do n = 1 to no_of_blocks;
	     if hismp -> syscon_mseg.first_free_buffer = 0 then do;
		hismp -> syscon_mseg.last_assigned_buffer = hismp -> syscon_mseg.last_assigned_buffer + 1;
		this_message = hismp -> syscon_mseg.last_assigned_buffer;
	     end;
	     else do;
		this_message = hismp -> syscon_mseg.first_free_buffer;
		hismp -> syscon_mseg.first_free_buffer =
		     hismp -> syscon_mseg.message (this_message).next_message;
	     end;
	     if n = 1 then begin_this = this_message;
	     else hismp -> syscon_mseg.message (prev_message).next_message = this_message;
	     prev_message = this_message;
	     hismp -> syscon_mseg.message (this_message).next_message = 0;
	     string (hismp -> syscon_mseg.message (this_message).flags) = string (message_type);
	end;

	hismp -> syscon_mseg.message (this_message).flags.continue = "0"b;
	end_this = this_message;
	call UNLOCK (hismp);

/* Now fill in the message blocks */
	len = min (nchar, buff_len);
	thisp = workp;
	thisp = addr (char_array (first_char + 1));	/* +1 because its really an offset */
	time = clock ();
	this_message = begin_this;

	do n = 1 to no_of_blocks;
	     hismp -> syscon_mseg.message (this_message).time_sent = time;
	     hismp -> syscon_mseg.message (this_message).from_source = SDB.source;
	     hismp -> syscon_mseg.message (this_message).from_stream = SDB.stream;
	     hismp -> syscon_mseg.message (this_message).source_index = SDB.source_index;
	     hismp -> syscon_mseg.message (this_message).stream_index = SDB.stream_index;
	     hismp -> syscon_mseg.message (this_message).message_body = this_batch;
	     hismp -> syscon_mseg.message (this_message).length = len;

	     thisp = addr (char_array (len + 1));	/* Update pointer & indeces */
	     nchart = nchart + len;
	     len = min (nchar - nchart, buff_len);
	     this_message = hismp -> syscon_mseg.message (this_message).next_message;
	end;

/* Lock the segment again, stick in the message, &unlock */
	call LOCK (hismp, code);
	if code ^= 0 then do;			/* Woops. Cannot lock seg to chain in. */
	     nchart = 0;				/* Pretend we didn't write at all */
	     return;				/* Some storage in message seg will be lost. */
	end;

	call VALIDATE_CHAIN (hismp, chainp, "write-2");

	if chain.chain_head = 0			/* Hook this into the proper message queue */
	then chain.chain_head = begin_this;
	else hismp -> syscon_mseg.message (chain.chain_tail).next_message = begin_this;

	chain.chain_tail = end_this;

	call UNLOCK (hismp);

/* Now wakeup other guy so he knows to look for what we just gave him. */

	call hcs_$wakeup (hismp -> syscon_mseg.current_process_id,
	     wake_up_chan, event_mess, autocode);
	return;
%page;
discard_remainder:
     entry (tp, state, code);

	mask = ""b;
	on any_other
	     call ANY_OTHER_HANDLER ();

	my_name = "mrd_util_$discard_remainder";
	ourmp = SDB.ourmess;
	begin_this = SDB.prev_trans.first_block;
	end_this = SDB.prev_trans.end_block;
	code = 0;

	go to free_current_chain;
%page;
read: entry (tp, workp, first_char, nchar, nchart, request, mp, state, code);

	mask = ""b;
	on any_other
	     call ANY_OTHER_HANDLER ();

	my_name = "mrd_util_$read";
	messp1 = mp;
	nchart = 0;
	code = 0;
	end_this = SDB.prev_trans.end_block;
	begin_this = SDB.prev_trans.first_block;
	ourmp = SDB.ourmess;
	if request = "proto" then chainp = addr (ourmp -> syscon_mseg.first_proto);
	else chainp = addr (ourmp -> syscon_mseg.first_message);
	if SDB.flags.more then goto get_message;

/* Unhook the blocks for this message (locking the seg first) */

	lock_set = "0"b;				/* for cleanup handler */
	lock_ptr = null ();				/* for cleanup handler */
	ipc_mask_code, ipc_unmask_code = -1;

	on condition (cleanup)
	     call CLEAN_UP ();

	call LOCK (ourmp, code);
	if code ^= 0 then return;

	call VALIDATE_CHAIN (ourmp, chainp, "read-1");

	SDB.prev_trans.offset = 0;

	if chain.chain_head = 0 then do;		/* Nothing in queue */
	     code = error_table_$no_message;
	     go to read_return;
	end;

	SDB.prev_trans.first_block,
	     SDB.prev_trans.current_block,
	     begin_this, this_message = chain.chain_head;

	no_of_blocks = 1;

	do while (ourmp -> syscon_mseg.message (this_message).continue);
	     this_message = ourmp -> syscon_mseg.message (this_message).next_message;
	     no_of_blocks = no_of_blocks + 1;
	end;

	SDB.prev_trans.end_block,
	     end_this = this_message;
	chain.chain_head = ourmp -> syscon_mseg.message (this_message).next_message;
	if end_this = chain.chain_tail then chain.chain_tail = 0;

	call UNLOCK (ourmp);

	messp = addr (ourmp -> syscon_mseg.message (begin_this));
	messp1 -> message_block.time_sent = message_block.time_sent;
	messp1 -> message_block.from_source = message_block.from_source;
	messp1 -> message_block.from_stream = message_block.from_stream;
	messp1 -> message_block.source_index = message_block.source_index;
	messp1 -> message_block.stream_index = message_block.stream_index;
	string (messp1 -> message_block.flags) = string (message_block.flags);

get_message:

/**** Extract the message */

	thisp = workp;
	thisp = addr (char_array (first_char + 1));
	this_message = SDB.prev_trans.current_block;
	len = min (nchar, ourmp -> syscon_mseg.message (this_message).length - SDB.prev_trans.offset);
	thatp = addr (ourmp -> syscon_mseg.message (this_message).message_body);
	thatp = addr (thatp -> char_array (SDB.prev_trans.offset + 1));

	do while (ourmp -> syscon_mseg.message (this_message).continue);
	     i = index (based_mess, NL);
	     if i ^= 0 then len = i;
	     this_batch = based_mess;
	     nchart = nchart + len;
	     if SDB.prev_trans.offset + len = ourmp -> syscon_mseg.message (this_message).length then
		do;
		SDB.prev_trans.offset = 0;
		this_message,
		     SDB.prev_trans.current_block = ourmp -> syscon_mseg.message (this_message).next_message;
	     end;
	     else do; SDB.prev_trans.offset = SDB.prev_trans.offset + len; goto theres_more; end;
	     if nchart = nchar then goto theres_more;
	     thatp = addr (ourmp -> syscon_mseg.message (this_message).message_body);
	     thisp = addr (char_array (len + 1));
	     len = min (nchar - nchart, ourmp -> syscon_mseg.message (this_message).length);
	end;

	i = index (based_mess, NL);
	if i ^= 0 then len = i;
	this_batch = based_mess;
	nchart = nchart + len;
	SDB.prev_trans.offset = SDB.prev_trans.offset + len;
	if SDB.prev_trans.offset ^= ourmp -> syscon_mseg.message (this_message).length
	then do;
theres_more:
	     state = 1;
	     SDB.flags.more = "1"b;
	     return;
	end;

/* Put used blocks back on the free storage list */

free_current_chain:
	SDB.flags.more = "0"b;
	state = 0;

	if begin_this = 0
	then return;

	if end_this = 0 then do;
	     call COMPLAIN (ourmp, "inconsistent threads");
	     call SAVE_STATE (ourmp);
	     return;
	end;

	call LOCK (ourmp, code);
	if code ^= 0 then return;

	ourmp -> syscon_mseg.message (end_this).next_message = ourmp -> syscon_mseg.first_free_buffer;
	ourmp -> syscon_mseg.first_free_buffer = begin_this;

read_return:
	SDB.prev_trans.first_block = 0;
	SDB.prev_trans.end_block = 0;
	call UNLOCK (ourmp);
	return;
%page;
read_status: entry (tp, statusp, code);

/**** entry to look at read ahead */

dcl  1 status_struct aligned based (statusp),
       2 ev_chan fixed bin (71),
       2 input_available bit (1);

dcl  statusp ptr;

	ourmp = SDB.ourmess;			/* get ptr to our msg seg */
	chainp = addr (ourmp -> syscon_mseg.first_message); /* get ptr to chain of messages */

	status_struct.ev_chan = ourmp -> syscon_mseg.ipc_el.channel;

	if chain.chain_head = 0 then			/* no chain, no input now */
	     status_struct.input_available = "0"b;	/* say no input */
	else status_struct.input_available = "1"b;

	return;
%page;
abort: entry (tp, reqsw, state, code);

	mask = ""b;
	on any_other
	     call ANY_OTHER_HANDLER ();

	my_name = "mrd_util_$abort";

	ourmp = SDB.ourmess;
	hismp = SDB.hismess;

	lock_set = "0"b;				/* for cleanup handler */
	lock_ptr = null ();				/* for cleanup handler */
	ipc_mask_code, ipc_unmask_code = -1;

	on condition (cleanup)
	     call CLEAN_UP ();

	if reqsw = 1 | reqsw = 3 then do;		/* reset_read ==> wipe out messages in our seg */
	     call LOCK (ourmp, code);
	     if code ^= 0 then return;

	     ourmp -> syscon_mseg.first_message,
		ourmp -> syscon_mseg.last_message,
		ourmp -> syscon_mseg.first_proto,
		ourmp -> syscon_mseg.last_proto = 0;
	     call ipc_$drain_chn (ourmp -> syscon_mseg.ipc_el.channel, autocode);
	     call ipc_$drain_chn (ourmp -> syscon_mseg.proto_el.channel, autocode);
	     call UNLOCK (ourmp);
	end;

	if reqsw = 2 | reqsw = 3 then do;		/* reset_write ==> wipe out messages from us in mc's seg */
	     call LOCK (hismp, code);
	     if code ^= 0 then return;

	     do i = 1 to 2;				/* look in both chains */
		prev_message = 0;
		if i = 1 then chainp = addr (hismp -> syscon_mseg.first_message);
		else chainp = addr (hismp -> syscon_mseg.first_proto);

		call VALIDATE_CHAIN (hismp, chainp, "abort-1");

		this_message = chain.chain_head;

		do while (this_message ^= 0);		/* look for messages from us */
		     if hismp -> syscon_mseg.message (this_message).from_source = SDB.source then
			if hismp -> syscon_mseg.message (this_message).from_stream = SDB.stream then
			     do;			/* found one */
			     begin_this = this_message;
						/* Loop looking for end of message */
			     do while (hismp -> syscon_mseg.message (this_message).continue);
				this_message = hismp -> syscon_mseg.message (this_message).next_message;
			     end;
			     end_this = this_message;

			     if prev_message = 0 then chain_head, this_message =
				     hismp -> syscon_mseg.message (end_this).next_message;
			     else hismp -> syscon_mseg.message (prev_message).next_message, this_message =
				     hismp -> syscon_mseg.message (end_this).next_message;

			     if end_this = chain_tail then chain_tail = prev_message;
			     hismp -> syscon_mseg.message (end_this).next_message = hismp -> syscon_mseg.first_free_buffer;
			     hismp -> syscon_mseg.first_free_buffer = begin_this;
			end;

			else do;
skipover:			     do while (hismp -> syscon_mseg.message (this_message).continue);
				this_message = hismp -> syscon_mseg.message (this_message).next_message;
			     end;
			     this_message = hismp -> syscon_mseg.message (this_message).next_message;
			end;
		     else go to skipover;		/* sources don't match */
		end;
		call VALIDATE_CHAIN (hismp, chainp, "abort-2");
	     end;

	     ourmp -> syscon_mseg.mescount = 0;
	     ourmp -> syscon_mseg.output_wait = "0"b;
	     call UNLOCK (hismp);
	end;

	return;
%page;
LOCK:
     procedure (bv_lock_ptr, bv_lock_code);

/* parameters */

dcl  (bv_lock_ptr ptr,
     bv_lock_code fixed bin (35)) parameter;

/* automatic */

dcl  lock_code fixed bin (35);

	lock_set = "0"b;				/* we're not really locked yet */
	lock_ptr = bv_lock_ptr;			/* remember which lock we're locking */

	call ipc_$mask_ev_calls (ipc_mask_code);	/* mask ipc calls */
	call hcs_$set_ips_mask (""b, mask);		/* mask ips interrupts */

locking_loop:
	call set_lock_$lock (lock_ptr -> syscon_mseg.mlock, thirty_seconds, lock_code);
	if lock_code ^= 0 then
	     if lock_code = error_table_$lock_wait_time_exceeded then do;
		call SAVE_STATE (lock_ptr);
		lock_ptr -> syscon_mseg.mlock = "0"b;	/* This is naughty but may save a crash. */
		call COMPLAIN (lock_ptr, "had to blast lock");
		goto locking_loop;
	     end;
	     else if lock_code = error_table_$invalid_lock_reset then do;
		call COMPLAIN (lock_ptr, "reset bad lock");
		call SAVE_STATE (lock_ptr);
	     end;
	     else if lock_code = error_table_$locked_by_this_process then do;
		call COMPLAIN (lock_ptr, "killing process due to mylock error");
		call SAVE_STATE (lock_ptr);
		terminate_info.version = 0;
		terminate_info.code = lock_code;
		do while ("1"b);
		     call terminate_process_ ("fatal_error",
			addr (terminate_info));
		end;
	     end;
	     else do;
		bv_lock_code = lock_code;
		call hcs_$reset_ips_mask (mask, mask);
		call ipc_$unmask_ev_calls (ipc_unmask_code);
		return;
	     end;

	lock_ptr -> syscon_mseg.locked_by_pid = my_process_id;
	lock_set = "1"b;
	bv_lock_code = 0;
	return;

     end LOCK;
%page;
UNLOCK:
     procedure (bv_unlock_ptr);

/* parameters */

dcl  bv_unlock_ptr ptr parameter;

/* automatic */

dcl  unlock_ptr ptr;

/* program */

	unlock_ptr = bv_unlock_ptr;			/* remember what we're unlocking */
	lock_set = "0"b;				/* Turn off now to avoid bad window */
	lock_ptr = null ();
	call set_lock_$unlock (unlock_ptr -> syscon_mseg.mlock, autocode);
	call hcs_$reset_ips_mask (mask, mask);
	call ipc_$unmask_ev_calls (ipc_unmask_code);
	return;

     end UNLOCK;

SAVE_STATE:
     procedure (bv_seg_ptr);

/* parameters */

dcl  bv_seg_ptr ptr parameter;

/* automatic */

dcl  (p, segp) ptr;

/* program */

	segp = bv_seg_ptr;
	segp -> syscon_mseg.last_assigned_buffer = segp -> syscon_mseg.last_assigned_buffer + 1;
	p = addr (segp -> syscon_mseg.message (segp -> syscon_mseg.last_assigned_buffer));
	p -> debug_info.flag = -1;
	p -> debug_info.time = clock ();
	p -> debug_info.last_pid = segp -> syscon_mseg.locked_by_pid;
	p -> debug_info.first_msg = segp -> syscon_mseg.first_message;
	p -> debug_info.last_msg = segp -> syscon_mseg.last_message;
	p -> debug_info.first_pro = segp -> syscon_mseg.first_proto;
	p -> debug_info.last_pro = segp -> syscon_mseg.last_proto;
	p -> debug_info.free_chain = segp -> syscon_mseg.first_free_buffer;

     end SAVE_STATE;

VALIDATE_CHAIN:
     procedure (bv_seg_ptr, bv_chain_ptr, bv_where);

/* parameters */

dcl  (bv_chain_ptr ptr,
     bv_seg_ptr ptr,
     bv_where char (*)) parameter;

/* automatic */

dcl  (last_msgx, msgs_scanned, msgx) fixed bin;
dcl  (chain_ptr, msgp, segp) ptr;
dcl  why char (64) varying;

/* based */

dcl  1 chain based (chain_ptr) aligned,
       2 head fixed bin,
       2 tail fixed bin;

/* program */

	segp = bv_seg_ptr;
	chain_ptr = bv_chain_ptr;

	if chain.head = 0 & chain.tail = 0 then return;

	if chain.head = 0 & chain.tail ^= 0 then do;
	     why = "(head = 0 but tail ^= 0)";
	     go to die;
	end;

	if chain.head ^= 0 & chain.tail = 0 then do;
	     why = "(head ^= 0 but tail = 0)";
	     go to die;
	end;

	last_msgx = -1;
	msgs_scanned = 0;
	do msgx = chain.head repeat (msgp -> message_block.next_message) while (msgx ^= 0);
	     if msgs_scanned > 4662 then do;
		why = "(loop in chain)";
		go to die;
	     end;
	     msgs_scanned = msgs_scanned + 1;
	     if msgx <= 0 | msgx > min (segp -> syscon_mseg.last_assigned_buffer, 4662)
	     then do;
		why = "(msg index out of range)";
		go to die;
	     end;
	     if last_msgx = msgx then do;
		why = "(chain loops onto self)";
		go to die;
	     end;
	     msgp = addr (segp -> syscon_mseg.message (msgx));
	     last_msgx = msgx;
	end;

	if chain.tail ^= last_msgx then do;
	     why = "(chain.tail doesn't point to last msg)";
	     go to die;
	end;

	return;

die:
	call SAVE_STATE (segp);
	call RESET_HEADER (segp);
	call COMPLAIN (segp, bv_where || " " || why);

     end VALIDATE_CHAIN;

COMPLAIN:
     procedure (bv_complaint_ptr, bv_complaint);

/* parameters */

dcl  (bv_complaint char (*),
     bv_complaint_ptr ptr) parameter;

/* automatic */

dcl  complaint_ptr ptr,
     dname char (168),
     dname_len fixed bin,
     ename char (32);

/* program */

	complaint_ptr = bv_complaint_ptr;
	call hcs_$fs_get_path_name (complaint_ptr, dname, dname_len, ename, (0));
	call phcs_$ring_0_message (my_name || ": " || bv_complaint || " in " || ename);

     end COMPLAIN;

RESET_HEADER:
     procedure (bv_reset_ptr);

/* parameters */

dcl  bv_reset_ptr ptr parameter;

/* automatic */

dcl  reset_ptr ptr;

/* program */

	reset_ptr = bv_reset_ptr;
	reset_ptr -> syscon_mseg.first_message = 0;	/* zap msg chain */
	reset_ptr -> syscon_mseg.last_message = 0;
	reset_ptr -> syscon_mseg.first_proto = 0;	/* zap protocol chain */
	reset_ptr -> syscon_mseg.last_proto = 0;
	reset_ptr -> syscon_mseg.first_free_buffer = 0;	/* zap free chain */
	reset_ptr -> syscon_mseg.last_assigned_buffer = 0;

     end RESET_HEADER;
%page;
RETURN:
/**** any_other handler comes here. */
	return;
%page;
ANY_OTHER_HANDLER:
     procedure ();

/**** This procedure is the any_other handler for mrd_util_.  We report the
      find of condition, reset the message segment header elements, unlock
      the message segment if locked and return to mrd_ with an error status
      code. */

          call find_condition_info_ (null, addr(ci), code);
	if code = 0 then do;
	     call COMPLAIN (lock_ptr, "Condition encountered: "||ci.condition_name);
	     if ci.condition_name = "out_of_bounds" then do;
		if lock_ptr ^= null & lock_ptr ^= hismp then
		     call RESET_HEADER (lock_ptr);
						/* lock_ptr probably mc.message pointer anyway */
		else call RESET_HEADER (hismp);	/* mc.message */
	     end;
	end;
	if lock_ptr ^= null then call UNLOCK (lock_ptr);
	code = error_table_$unable_to_do_io;
	goto RETURN;
     end ANY_OTHER_HANDLER;
%page;
CLEAN_UP:
     procedure ();

	if lock_set then
	     do;
	     call set_lock_$unlock (lock_ptr -> syscon_mseg.mlock, (0));
	     lock_set = "0"b;
	     lock_ptr = null ();
	end;

	if substr (mask, 36, 1) = "1"b then		/* we were masked */
	     call hcs_$reset_ips_mask (mask, mask);

	if ipc_mask_code ^= -1 & ipc_unmask_code = -1 then
	     call ipc_$unmask_ev_calls (ipc_unmask_code);

	return;
     end CLEAN_UP;

/* format: off */
%page; %include condition_info;
%page; %include syscon_mseg;
/* format: on */

/* BEGIN MESSAGE DOCUMENTATION

   Message:
   mrd_util_$ENTRY: CALL_CODE (MESSAGE) in ENAME

   S:	$beep

   T:	$run

   M:	A problem has been discovered in the threading of the message
   coordinator segment ENAME.  CALL_CODE identifies the particular
   call that failed, and MESSAGE identifies the reason for the failure.
   Entry identifies the entrypoint in mrd_util_ that was called.
   All pending messages in ENAME are discarded.
   Debugging information is written into ENAME, and may be displayed
   using the dump_syscon_mseg tool.
   The message coordinator recovers from these errors and continues,
   possibly with the loss of some input or output.
   If ENAME is mc.message, some daemon output may be lost.
   If ENAME is anything else, some input to that daemon may be lost, and
   the operator should communicate with the daemon immediately, in case this has happened.
   $err

   A:	$inform
   Save all console and message coordinator terminal output.

   Message:
   mrd_util_$ENTRY: had to blast lock in ENAME

   S:	$beep

   T:	$run

   M:	The lock in the message coordinator segment ENAME did not
   unlock within thirty seconds.  The lock is reset forcibly,
   and locked to the calling process.
   ENTRY identifies the entrypoint in mrd_util_ that was called.
   Debugging information is written into ENAME, and may be displayed
   using the dump_syscon_mseg tool.
   Further errors may result if
   the process that originally locked the segment left it in
   an inconsistent state, or if it later starts up again.

   A:	$inform
   Save all console and message coordinator terminal output.

   Message:
   mrd_util_$ENTRY: reset bad lock in ENAME

   S:	$beep

   T:	$run

   M:	The message coordinator segment ENAME was locked to a
   nonexistent process.  The lock is reset and locked to the calling
   process.  ENTRY identifies the entrypoint in mrd_util_ that
   was called.
   Debugging information is written into ENAME, and may be displayed
   using the dump_syscon_mseg tool.
   Further errors may be reported if ENAME was in an inconsistent state.

   A:	$inform
   Save all console and message coordinator terminal output.

   Message:
   mrd_util_$ENTRY: killing process due to mylock error in ENAME

   S:	$term

   T:	$run

   M:	While trying to lock the message coordinator segment ENAME,
   the lock was found to already be locked to the calling process.
   ENTRY identifies the entrypoint in mrd_util_ that was called.
   Debugging information is written into ENAME, and may be displayed
   using the dump_syscon_mseg tool.
   $err

   A:	$inform
   Save all console and message coordinator terminal output.

   Message:
   mrd_util_$ENTRY: inconsistent threads in ENAME

   S:	$beep

   T:	$run

   M:	While trying to add unused blocks to the free chain
   in the message coordinator segment ENAME, an error was discovered.
   ENTRY identifies the entrypoint in mrd_util_ that was called.
   Debugging information is written into ENAME, and may be displayed
   using the dump_syscon_mseg tool.
   $err

   A:	$inform
   Save all console and message coordinator terminal output.

   Message:
   Error: CONDITION in mrd_util_$ENTRY

   S:	$beep

   T:	$run

   M:	CONDITION was signalled during a call to the entrypoint
   ENTRY in mrd_util_.
   A message coordinator dump is taken.
   If the calling process had a message coordinator segment locked, that
   segment is checked for consistency, and the lock is unlocked.
   mrd_util_ then returns to its caller without retrying the operation that failed.
   $err

   A:	$inform
   Save all console and message coordinator terminal output.

   END MESSAGE DOCUMENTATION */

     end mrd_util_;
