/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


dump_devq: proc;

dcl  char32 char (32) aligned,
     dn char (168) aligned init (">system_control_dir"),
     en char (32) aligned,
     c1 char (1) aligned,
     alrm char (1) aligned,
    (i, j, k, l, m, n) fixed bin,
     ap ptr,
     al fixed bin,
     bchr char (al) unaligned based (ap),
     ec fixed bin (35),
     qp ptr;

dcl 1 xxx based aligned,
    2 w1 fixed bin (35),
    2 w2 fixed bin (35);

dcl (addr, null, substr, index, unspec, length, bit, fixed, divide, mod, abs) builtin;

dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35)),
     expand_path_ entry (ptr, fixed bin, ptr, ptr, fixed bin (35)),
     ioa_ entry options (variable),
     ioa_$nnl entry options (variable),
     com_err_ entry options (variable);

dcl  hcs_$initiate entry (char (*) aligned, char (*) aligned, char (*) aligned, fixed bin (1),
     fixed bin (2), ptr, fixed bin (35)),
     hcs_$terminate_noname entry (ptr, fixed bin (35)),
     hcs_$wakeup entry (bit (*) aligned, fixed bin (71), fixed bin (71), fixed bin (35));

%include device_queue;

/* ------------------------- */

	call cu_$arg_ptr (1, ap, al, ec);
	if ec ^= 0 then do;
er1:	     call com_err_ (ec, "dump_devq", "");
	     return;
	end;
	if bchr = "-pn" then do;
	     call cu_$arg_ptr (2, ap, al, ec);
	     if ec ^= 0 then go to er1;
	     call expand_path_ (ap, al, addr (dn), addr (en), ec);
	     if ec ^= 0 then do;
er:		call com_err_ (ec, "dump_devq", "^a", bchr);
		return;
	     end;
	end;
	else en = bchr;
	if index (en, ".queue") = 0 then do;
	     i = index (en, " ");
	     substr (en, i) = ".queue";
	end;

	call hcs_$initiate (dn, en, "", 0, 1, qp, ec);
	if qp = null then do;
	     call com_err_ (ec, "dump_devq", "^a>^a", dn, en);
	     return;
	end;
	call ioa_ ("^/DEVICE QUEUE - ^a", device_queue.device_name);
	call ioa_ ("mc_atep:^9x^p", device_queue.mc_atep);
	call ioa_ ("channel:^9x^w^w",
	     addr (device_queue.channel) -> w1, addr (device_queue.channel) -> w2);
	call ioa_ ("no_of_messages:^2x^d", device_queue.no_of_messages);
	call ioa_ ("top_of_queue:^4x^d", device_queue.top_of_queue);
	call ioa_ ("end_of_queue:^4x^d", device_queue.end_of_queue);
	call ioa_ ("free_top:^8x^d", device_queue.free_top);
	call ioa_ ("next_free:^7x^d", device_queue.next_free);

	call ioa_ ("^/NUM  NEXT   OFF   LTH SC MESSAGE^/");
	do i = 1 to device_queue.next_free;
	     if device_queue.line (i).not_done then c1 = "+"; else c1 = " ";
	     if device_queue.line (i).alarm then alrm = "*"; else alrm = " ";
	     call ioa_$nnl ("^3d^1a^5d^6d^6d^3d^1a^a", i, c1,
		device_queue.line (i).next_line, device_queue.line (i).offset, device_queue.line (i).line_length,
		device_queue.line (i).source,
		alrm, device_queue.line (i).string);
	end;
	call ioa_ ("");
	call hcs_$terminate_noname (qp, ec);

     end;
