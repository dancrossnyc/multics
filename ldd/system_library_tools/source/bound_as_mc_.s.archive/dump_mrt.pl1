/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


dump_mrt: proc;

/* DUMP_MRT - dump message routing table

   THVV */

dcl (path, dn) char (168) aligned,
     en char (32) aligned,
     srch (10) char (32) aligned,
     line char (120) aligned,
     datstr char (16) aligned,
     vstr char (64) aligned,
     vconst char (33) aligned,
    (i, j, k, l, m, n) fixed bin,
    (time, fb71) fixed bin (71),
     ap ptr,
     al fixed bin,
     bchr char (al) unaligned based (ap),
     ec fixed bin (35),
    (p, q) ptr;

dcl (addr, null, substr, index, unspec, length, bit, fixed, divide, mod, abs) builtin;

dcl  clock_ entry () returns (fixed bin (71)),
     cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35)),
     expand_path_ entry (ptr, fixed bin, ptr, ptr, fixed bin (35)),
     ioa_ entry options (variable),
     date_time_ entry (fixed bin (71), char (*) aligned),
     com_err_ entry options (variable);

dcl  hcs_$initiate entry (char (*) aligned, char (*) aligned, char (*) aligned, fixed bin (1),
     fixed bin (2), ptr, fixed bin (35)),
     hcs_$terminate_noname entry (ptr, fixed bin (35));

%include mess_route_table;

dcl  mrtp ptr;
dcl  streamp ptr;

/* ------------------------------------------------------- */

	m = 0;
	l = 0;
	k = 2;
	path = ">system_control_1>MRT";
	call cu_$arg_ptr (1, ap, al, ec);
	if ec ^= 0 then go to mrt1;
	path = bchr;
arglp:	call cu_$arg_ptr (k, ap, al, ec);		/* See if optional args */
	if ec ^= 0 then go to mrt1;
	m = m + 1;				/* count selectors */
	if m > 10 then go to mrt1;
	if bchr = "*" then l = m;
	srch (m) = bchr;
	k = k + 1;
	go to arglp;

mrt1:	i = index (path, " ");
	call expand_path_ (addr (path), i, addr (dn), addr (en), ec);
	if ec ^= 0 then do;
er:	     call com_err_ (ec, "dump_mrt", "^a", path);
	     return;
	end;
	call hcs_$initiate (dn, en, "", 0, 1, mrtp, ec);
	if mrtp = null then go to er;

	if m = 0 then do;				/* Header only if no selected args. */
	     call date_time_ ((clock_ ()), datstr);
	     call ioa_ ("^/Message Routing Table - ^a^/", datstr);

	     call ioa_ ("lock:^15x^w", MRT.lock);
	     call ioa_ ("no_of_sources:^6x^d", MRT.no_of_sources);
	     call ioa_ ("flags:^14x^w", MRT.flags);
	end;

	if l ^= 0 then do;				/* want to list star entry */
	     srch (m) = "";
	     go to pss;
	end;
	if m = 0 then do;
pss:	     call ioa_ ("^/SOURCE: ^a^/", MRT.star_entry.source);
	     call ioa_ ("no_of_streams:^6x^d", MRT.star_entry.no_of_streams);
	     call pstream (addr (MRT.star_entry.stream));
	end;

	do i = 1 to MRT.no_of_sources;
	     if ^MRT.source (i).flags.valid then go to skip;
	     if m = 0 then go to pss1;
	     do n = 1 to m;
		if MRT.source (i).source = srch (n) then do;
		     srch (n) = "";
		     go to pss1;
		end;
	     end;
	     go to skip;

pss1:	     call ioa_ ("^/SOURCE: ^a^/", MRT.source (i).source);
	     call ioa_ ("hismess:^12x^p", MRT.source (i).hismess);
	     call ioa_ ("no_of_streams:^6x^d", MRT.source (i).no_of_streams);
	     vstr = "valid";
	     if MRT.source (i).flags.init then vstr = vstr || ", init";
	     call ioa_ ("flags:^14x^a", vstr);

	     do j = 1 to MRT.source (i).no_of_streams;

		if MRT.source (i).stream (j).flags.valid then
		call pstream (addr (MRT.source (i).stream (j)));

	     end;

skip:	end;

	if m = 0 then call ioa_ ("^/End^/");
	else do i = 1 to m;
	     if srch (i) ^= "" then call ioa_ ("source ""^a"" not in MRT", srch (i));
	end;
	call hcs_$terminate_noname (mrtp, ec);
	return;

pstream:	proc (sp);

dcl  sp ptr;

dcl  k fixed bin,
     vstr char (64) varying,
     sourcet char (32) aligned;

	     streamp = sp;
	     call ioa_ ("^/^5xSTREAM: ^a^/", stream.stream);
	     if substr (stream.source, 1, 1) < " " then sourcet = "*";
	     else sourcet = stream.source;
	     call ioa_ ("^5xsource:^8x^a", sourcet);
	     vstr = "valid";
	     if stream.flags.read then vstr = vstr || ", read";
	     if stream.flags.write then vstr = vstr || ", write";
	     if stream.flags.active then vstr = vstr || ", active";
	     call ioa_ ("^5xflags:^9x^a", vstr);
	     call ioa_ ("^5xourmess:^7x^p", stream.ourmess);
	     call ioa_ ("^5xhismess:^7x^p", stream.hismess);
	     call ioa_ ("^5xsource_index:^2x^d", stream.source_index);
	     call ioa_ ("^5xstream_index:^2x^d", stream.stream_index);
	     call ioa_ ("^5xno_of_vcons:^3x^d^/", stream.no_of_vcons);
	     do k = 1 to stream.no_of_vcons;

		if substr (stream.flags.alarm, k, 1) then vconst = "*" || stream.vcons (k);
		else vconst = stream.vcons (k);	/* Star means alarm flag will be in message */
		call ioa_ ("^10xvcons ^d:  ^3d ^a", k, stream.vcons_index (k), vconst);

	     end;

	end pstream;

     end dump_mrt;
