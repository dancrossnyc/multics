/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(88-03-30,GWMay), approve(89-10-03,MCR8135),
     audit(89-10-04,Beattie), install(89-10-10,MR12.3-1089):
     Changes display to columnize output to save wasted space.
     Changed to add the -header option.
                                                   END HISTORY COMMENTS */


display_pvolog: proc;

/* This command displays the data in the specified output log. This data consists
   of the names and number of times cycled through of the physical volumes on this output volume.
   A special entry is provided to unlock
   a output log that has been left locked. */

%page;
       myname = "display_pvolog";
       go to COMMON;

dpvl: entry;

       myname = "dpvl";

COMMON:
/* init control variables */
          col_count = 0;
	header_sw = "1"b;
	lock = "0"b;
	force_unlock = "0"b;
	type = 0;
	pvname = "";
	pvlp = null;
	goto common;

unlock_pvolog: entry;

	lock = "0"b;
	pvlp = null;
	pvname = "";
	force_unlock = "1"b;

common:
	system_dir = ">daemon_dir_dir>volume_backup";
	call cu_$arg_ptr (1, argp, argl, code);
	if code ^= 0 then do;
argerr:	     call com_err_ (error_table_$noarg, myname, "
Usage:^10t^a pvolog {-control_args}
^10tcontrol_args:^25t^a^-^a^/^25t^a^-^a",
	        myname, "-working_dir, -wd", "-header, -he",
	        "-no_header, -nhe", "-pvname name, -pv name");
	     return;
	end;
	if substr (arg, 1, 1) = "-" then goto argerr;
						/* convert name to pathname */
	call suffixed_name_$make (arg, "pvolog", pvolog_name, code);
	if code ^= 0 then do;
	     call com_err_ (code, myname, "Unable to construct pvolog name");
	     goto finish;
	end;

	call cu_$arg_count (narg);
	ac = 2;
	do while (ac <= narg);
	     call cu_$arg_ptr (ac, argp, argl, code);
	     if code ^= 0 then do;
		call com_err_ (code, myname, "error on arg after ^a", arg);
		goto finish;
	     end;
	     if arg = "-working_dir" | arg = "-wd" then system_dir = get_wdir_ ();
	     else if arg = "-nhe" | arg = "-no_header" then header_sw = "0"b;
	     else if arg = "-he" | arg = "-header" then header_sw = "1"b;
	     else if arg = "-pv" | arg = "-pvname" then do;
		ac = ac + 1;
		call cu_$arg_ptr (ac, argp, argl, code);
		if code ^= 0 then do;
		     call com_err_ (code, myname, "Unable to pickup pvname");
		     goto finish;
		end;
		pvname = arg;
		type = -1;
	     end;
	     else do;
		call com_err_ (error_table_$badopt, myname, "^a", arg);
		goto finish;
	     end;
	     ac = ac + 1;
	end;

          on cleanup go to finish;
						/* pick up name of volume log */
						/* get pointer to volume log */
	call hcs_$initiate (rtrim(system_dir) || ">pvolog", pvolog_name, "", 0, 0, pvlp, code);
	if pvlp = null then do;
	     call com_err_ (code, myname, "Unable to get pointer to pvolog ^a>pvolog>^a", system_dir, pvolog_name);
	     goto finish;
	end;

	if force_unlock then do;
	     lock = "1"b;				/* fake it */
	     goto finish;
	end;
						/* pick up control args */
						/* print header if requested */
						/* lock log before printing */
	call set_lock_$lock (pvolog.lock, -1, code);
	if code ^= 0 then do;
	     if code = error_table_$invalid_lock_reset then code = 0;
	     else do;
		call com_err_ (code, myname, "Unable to lock pvolog");
		goto finish;
	     end;
	end;
	lock = "1"b;

	if header_sw then do;
	     call ioa_ ("
^-Output Volume Log for Physical Volume ^a
^-^a volume dump started at ^a
^-in_use: ^d^-max_used: ^d
^/^[<NO ENTRIES>^;count pvname^]^[^23tcount pvname^]^[^45tcount pvname^]",
	        before (pvolog_name, "."),
	        ascii_type (pvolog.dump_type),
	        time_string_ (pvolog.mount_time),
	        pvolog.in_use, pvolog.next,
	        pvolog.next < 1,
	        pvolog.next > 1,
	        pvolog.next > 2);
	end;
						/* Examine each entry in the log and print as requested */
	do i = pvolog.next to 1 by -1;
	     pvlep = addr (pvolog.array (i));
	     if (pvname ^= "" & pvname = pvle.pvname)
	     | pvname = "" then
		if pvle.invocation_count ^= 0 then do;
		   if col_count = 3 | length (rtrim(pvle.pvname)) > 15 then col_count = 0;
		   col_count = col_count + 1;

		   call ioa_$nnl ("^3d^3x^a^[^/^;^23t^]^[^/^]",
		      pvle.invocation_count,
		      pvle.pvname,
		      col_count = 3,
		      i = 1);
		   end;
	end;

finish:						/* cleanup - unlock and terminate */
	call finish_;
	return;


time_string_: proc (time) returns (char (20));

/* This proc returns a time string suitable for printing */

dcl  time fixed bin (71);
dcl  time_string char (20);
	     call date_time_ (time, time_string);
	     return (substr (time_string, 1, 16));
	end time_string_;

finish_:	proc;
	     if lock & pvlp ^= null then call set_lock_$unlock (pvolog.lock, ignore);
	     if pvlp ^= null then call hcs_$terminate_noname (pvlp, ignore);

	end finish_;
%page;
dcl  pvolog_name char (32);
dcl  narg fixed bin;
dcl  system_dir char (168);
dcl  arg char (argl) based (argp);
dcl  argl fixed bin;
dcl  argp ptr;
dcl  col_count fixed bin;
dcl  i fixed bin;
dcl  ac fixed bin;
dcl  pvname char (32);
dcl  lock bit (1);
dcl  force_unlock bit (1);
dcl  code fixed bin (35);
dcl  ignore fixed bin (35);
dcl  type fixed bin;
dcl  header_sw bit (1);

dcl  ascii_type (3) char (32) var int static init ("incremental", "consolidated", "complete");
dcl  myname char (32) var;

dcl  suffixed_name_$make entry (char (*), char (*), char (*), fixed bin (35));
dcl  get_wdir_ entry returns (char (168));
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  com_err_ entry options (variable);
dcl  hcs_$initiate entry (char (*), char (*), char (*), fixed bin, fixed bin, ptr, fixed bin (35));
dcl  hcs_$terminate_noname entry (ptr, fixed bin (35));
dcl  ioa_ entry options (variable);
dcl  ioa_$nnl entry() options(variable);
dcl  date_time_ entry (fixed bin (71), char (*));
dcl  set_lock_$lock entry (bit (36) aligned, fixed bin, fixed bin (35));
dcl  set_lock_$unlock entry (bit (36) aligned, fixed bin (35));
dcl  cu_$arg_count entry (fixed bin);

dcl  error_table_$badopt ext fixed bin (35);
dcl  error_table_$invalid_lock_reset ext fixed bin (35);
dcl  error_table_$noarg fixed bin(35) ext static;

dcl (before, length, rtrim, substr) builtin;
dcl  null builtin;
dcl  addr builtin;
dcl  cleanup condition;

%include pvolog;
%include backup_pvol_info;
%include fs_vol_label;
%include backup_volume_header;
%include backup_static_variables;

     end display_pvolog;
