/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


rebuild_pvolog: proc;

/* This command and subroutine rebuild a  output volume log */

dcl  volname char (32);
dcl  unlock_volog bit (1) init ("0"b);
dcl  mount_time fixed bin (71);
dcl  myname char (32);
dcl  new_pvlp ptr;
dcl  pvolog_name char (32);
dcl  sub bit (1) init ("0"b);
dcl  volog_known bit (1) init ("0"b);
dcl  volname_count fixed bin;

dcl  long bit (1) init ("0"b);
dcl  narg fixed bin;
dcl  volog_dir char (168);
dcl  sys_dir char (168);
dcl  pvolog_dir char (168);
dcl  arg char (argl) based (argp);
dcl  argl fixed bin;
dcl  argp ptr;
dcl (bvx, ac, stx) fixed bin;
dcl  code fixed bin (35);
dcl  ignore fixed bin (35);
dcl  volume_pool_state fixed bin;


dcl  lock_wait_time fixed bin static init (60) options (constant);

dcl  cleanup condition;

dcl  hcs_$delentry_seg entry (ptr, fixed bin (35));
dcl  cv_dec_check_ entry (char (*), fixed bin (35)) returns (fixed bin);
dcl  adjust_bit_count_ entry (char (*), char (*), bit (1), fixed bin, fixed bin (35));
dcl  suffixed_name_$make entry (char (*), char (*), char (*), fixed bin (35));
dcl  hcs_$make_seg entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35));
dcl  hcs_$fs_move_seg entry (ptr, ptr, fixed bin, fixed bin (35));
dcl  get_temp_segment_ entry (char (*), ptr, fixed bin (35));
dcl  release_temp_segment_ entry (char (*), ptr, fixed bin (35));
dcl  hcs_$star_ entry (char (*), char (*), fixed bin (2), ptr, fixed bin, ptr, ptr, fixed bin (35));
dcl  get_system_free_area_ entry returns (ptr);
dcl  get_wdir_ entry returns (char (168));
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl (error_rnt, a_error_rnt) entry variable options (variable);
dcl  com_err_ entry options (variable);
dcl  hcs_$initiate entry (char (*), char (*), char (*), fixed bin, fixed bin, ptr, fixed bin (35));
dcl  hcs_$terminate_noname entry (ptr, fixed bin (35));
dcl  ioa_ entry options (variable);
dcl  set_lock_$lock entry (bit (36) aligned, fixed bin, fixed bin (35));
dcl  set_lock_$unlock entry (bit (36) aligned, fixed bin (35));
dcl  cu_$arg_count entry (fixed bin);

dcl  error_table_$badopt ext fixed bin (35);
dcl  error_table_$bad_volid ext fixed bin (35);
dcl  error_table_$locked_by_this_process ext fixed bin (35);
dcl  error_table_$segknown ext fixed bin (35);
dcl  error_table_$invalid_lock_reset ext fixed bin (35);

dcl (substr, before, clock, addr, null, sum, min) builtin;
dcl (length, search) builtin;

%include backup_volume_log;
%include pvolog;
%include backup_pvol_info;
%include fs_vol_label;
%include backup_volume_header;
%include backup_static_variables;
%include  star_structures;

	bvlp, pvlp = null;
	star_names_ptr = null;
	volume_pool_state = 0;
	code = 0;
	myname = "rebuild_pvolog";
	error_rnt = com_err_;
	sys_dir = ">daemon_dir_dir>volume_backup";
	call cu_$arg_ptr (1, argp, argl, code);
	if code ^= 0 then do;
argerr:	     call error_rnt (0, myname, " USAGE: ^a volume [-wd|-working_dir]  ", myname);
	     return;
	end;
	if substr (arg, 1, 1) = "-" then goto argerr;
	volname = arg;
	call cu_$arg_count (narg);
	ac = 2;
	do while (ac <= narg);
	     call cu_$arg_ptr (ac, argp, argl, code);
	     if code ^= 0 then do;
		call error_rnt (code, myname, "Unable to access arg after ^a", arg);
		goto finish;
	     end;
	     if arg = "-working_dir" | arg = "-wd" then sys_dir = get_wdir_ ();
	     else if arg = "-long" | arg = "-lg" then long = "1"b;
	     else if arg = "-brief" | arg = "-bf" then long = "0"b;
	     else do;
		call error_rnt (error_table_$badopt, myname, "^a", arg);
		goto finish;
	     end;
	     ac = ac + 1;
	end;
common:
	volog_dir = sys_dir;
	pvolog_dir = rtrim (sys_dir) || ">pvolog";
	on cleanup call finish_;
	call check_volname (volname);
	if long then call ioa_ ("Processing ^a", volname);
	call hcs_$star_ (volog_dir, "*.volog", star_ALL_ENTRIES, get_system_free_area_ (), star_entry_count,
	     star_entry_ptr, star_names_ptr, code);
	if code ^= 0 then do;
	     call error_rnt (code, myname, "Unable to list volog dir ^a", volog_dir);
	     goto finish;
	end;
	call get_temp_segment_ (myname, pvlp, code);
	if code ^= 0 then do;
	     call error_rnt (code, myname, "Unable to get temp seg");
	     goto finish;
	end;
	pvolog.version = pvolog_version_1;
	pvolog.mount_time = clock;
	call scan_vologs;
	call suffixed_name_$make (volname, "pvolog", pvolog_name, code);
	if code ^= 0 then do;
	     call error_rnt (code, myname, "Unable to construct pvolog name from ^a", volname);
	     goto finish;
	end;
	call hcs_$make_seg (pvolog_dir, pvolog_name, "", 01010b, new_pvlp, code);
	if new_pvlp = null then do;
	     call error_rnt (code, myname, "Unable to create new pvolog seg ^a>^a", pvolog_dir, pvolog_name);
	     goto finish;
	end;
	call hcs_$fs_move_seg (pvlp, new_pvlp, 1, code);
	if code ^= 0 then do;
	     call error_rnt (code, myname, "Unable to copy new volog from temp seg");
	     goto finish;
	end;
	if new_pvlp -> pvolog.in_use = 0 then do;
	     call error_rnt (0, myname, "Null output volume ^a>^a will be deleted", pvolog_dir, pvolog_name);
	     call hcs_$delentry_seg (new_pvlp, code);
	     if code ^= 0 then do;
		call error_rnt (code, myname, "Unable to delete ^a.pvolog", volname);
		goto finish;
	     end;
	     new_pvlp = null;
	end;
	else do;
	     call adjust_bit_count_ (pvolog_dir, pvolog_name, "1"b, (0), ignore);
	end;


finish:						/* cleanup - unlock and terminate */
	call finish_;
	return;

rebuild_pvolog_: entry (a_sys_dir, a_volname, a_error_rnt, a_pvlp, a_code);
dcl  a_sys_dir char (*);
dcl  a_volname char (*);
dcl  a_code fixed bin (35);
dcl  a_pvlp ptr;
	volname = a_volname;
	new_pvlp, a_pvlp = null;
	code, a_code = 0;
	sub = "1"b;
	error_rnt = a_error_rnt;
	star_names_ptr = null;
	bvlp, pvlp = null;
	myname = "rebuild_pvolog_";
	sys_dir = a_sys_dir;
	goto common;

finish_:	proc;
	     if pvlp ^= null then call release_temp_segment_ (myname, pvlp, ignore);
	     if bvlp ^= null & unlock_volog then call set_lock_$unlock (backup_volume_log.lock, ignore);
	     if bvlp ^= null & ^volog_known then call hcs_$terminate_noname (bvlp, ignore);
	     if star_names_ptr ^= null then free star_names;
	     if sub then do;
		a_code = code;
		a_pvlp = new_pvlp;
	     end;
	end finish_;

find_volog_and_lock: proc (volog);
dcl  volog char (*);
	     call hcs_$initiate (volog_dir, volog, "", 0, 0, bvlp, code);
	     volog_known = (code = error_table_$segknown);
	     if bvlp = null then return;
	     call set_lock_$lock (backup_volume_log.lock, lock_wait_time, code);
	     unlock_volog = ^(code = error_table_$locked_by_this_process);
	     if ^unlock_volog then code = 0;
	     if code ^= 0 then do;
		if code = error_table_$invalid_lock_reset then code = 0;
		else do;
		     call error_rnt (code, myname, "Unable to lock volog ^a", volog);
		     goto finish;
		end;
	     end;
	end find_volog_and_lock;

count_volname: proc;
	     volname_count = 0;
	     mount_time = clock;
	     do bvx = 1 to backup_volume_log.next;
		bvlep = addr (backup_volume_log.array (bvx));
		if volname = bvle.volname then do;
		     volname_count = volname_count + 1;
		     pvolog.dump_type = bvle.dump_type;
		     mount_time = min (mount_time, bvle.open_time);
		end;
	     end;

	end count_volname;
scan_vologs: proc;
dcl  volog_name char (32);
	     do stx = 1 to star_entry_count;
		volog_name = star_names (star_entries (stx).nindex);
		call find_volog_and_lock (volog_name);
		if bvlp = null then do;
		     call error_rnt (code, myname, "can not locate volog ^a", volog_name);
		     goto next_volog;
		end;
		call count_volname;
		if volname_count ^= 0 then do;
		     pvolog.next = pvolog.next + 1;
		     pvolog.in_use = pvolog.in_use + 1;
		     pvlep = addr (pvolog.array (pvolog.next));
		     pvle.invocation_count = volname_count;
		     pvle.pvname = before (volog_name, ".");
		     pvolog.mount_time = min (pvolog.mount_time, mount_time);
		end;
		if unlock_volog then call set_lock_$unlock (backup_volume_log.lock, ignore);
		if ^volog_known then do;
		     call hcs_$terminate_noname (bvlp, ignore);
		     bvlp = null;
		end;
next_volog:
	     end;

	end scan_vologs;
check_volname: proc (volname);
dcl  volname char (*);
dcl  num fixed bin;
dcl  char_num char (32);
dcl  start_numeric fixed bin;
	     start_numeric = search (volname, "0123456789");
	     if start_numeric > 3 | start_numeric = 0 then do;
bad_volid:	code = error_table_$bad_volid;
		call error_rnt (code, myname, "Invalid volume name ^a", volname);
		goto finish;
	     end;
	     else do;
		char_num = substr (volname, start_numeric, length (volname) - start_numeric);
		num = cv_dec_check_ (char_num, code);
		if code ^= 0 then goto bad_volid;
	     end;
	     return;
	end check_volname;
     end rebuild_pvolog;
