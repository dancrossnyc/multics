/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(89-08-31,GWMay), approve(89-10-03,MCR8135),
     audit(89-10-04,Beattie), install(89-10-10,MR12.3-1089):
     Updated to process version 3 for backup_volume_log.incl.pl1 structures.
                                                   END HISTORY COMMENTS */


/* format: style1,ind2,^inddcls,ifthenstmt,dclind2,declareind2,ifthendo,ifthen*/

volume_cross_check: proc;

/* This commands cross checks the characteristics of a volume dumper output medium in the volume pool,
   the pvolog, and the various vologs for consistency,  and rebuilds the pvolog if required */

/* Written: In antiquity by D. Vinograd
   Modified: 4/12/83 by GA Texada to not delete the pvolog's for volumes that are reserved.
   Modified: 7/11/83 by GA Texada to force the comment in the volume pool to match the pvolog.
   Modified: 2/29/84 by GA Texada to check the header patterns in the volog and the version (phx16935).
*/

dcl (volname, ename)     char (32);
dcl (argp, vpp)	     ptr;
dcl (new_pool_path, sys_dir) char (168);
dcl (narg, total_volname_count, volname_count) fixed bin;
dcl comment	     char (64);
dcl volume_pool_time     fixed bin (71);
dcl (found, long, brief) bit (1);
dcl (volog_dir, pvolog_dir, contents_dir) char (168);
dcl arg		     char (argl) based (argp);
dcl (argl, bvx, olx, ac) fixed bin;
dcl (code, ignore)	     fixed bin (35);
dcl (volume_pool_state, volume_pool_type) fixed bin;

dcl lock_wait_time	     fixed bin static init (60) options (constant);
dcl free		     fixed bin static init (1) options (constant);
dcl reserved	     fixed bin static init (3) options (constant);
dcl allocated	     fixed bin static init (2) options (constant);
dcl myname	     char (32) static int init ("volume_cross_check") options (constant);
dcl ascii_states	     (3) char (4) int static init ("incr", "cons", "comp") options (constant);

dcl cleanup	     condition;

dcl com_err_	     entry options (variable);
dcl cu_$arg_count	     entry (fixed bin);
dcl cu_$arg_ptr	     entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl delete_$path	     entry (char (*), char (*), bit (6), char (*), fixed bin (35));
dcl error_rnt	     entry variable options (variable);
dcl get_wdir_	     entry returns (char (168));
dcl hcs_$initiate	     entry (char (*), char (*), char (*), fixed bin, fixed bin, ptr, fixed bin (35));
dcl hcs_$terminate_noname entry (ptr, fixed bin (35));
dcl ioa_		     entry options (variable);
dcl manage_volume_pool_$allocate entry (ptr, entry options (variable), char (*), char (*), char (*), fixed bin (35));
dcl manage_volume_pool_$free entry (ptr, entry options (variable), char (*), fixed bin (35));
dcl manage_volume_pool_$set_pool_path entry (entry options (variable), char (*), ptr, fixed bin (35));
dcl manage_volume_pool_$status entry (ptr, entry options (variable), char (*), char (*), fixed bin (71), fixed bin, fixed bin (35));
dcl rebuild_pvolog_	     entry (char (*), char (*), entry options (variable), ptr, fixed bin (35));
dcl set_lock_$lock	     entry (bit (36) aligned, fixed bin, fixed bin (35));
dcl set_lock_$unlock     entry (bit (36) aligned, fixed bin (35));
dcl suffixed_name_$make  entry (char (*), char (*), char (*), fixed bin (35));

dcl error_table_$badopt  ext fixed bin (35);
dcl error_table_$invalid_lock_reset ext fixed bin (35);
dcl error_table_$noentry ext fixed bin (35);
dcl error_table_$unimplemented_version fixed bin (35) ext static;

dcl (rtrim, substr, abs, null, addr) builtin;

    bvlp, pvlp = null;
    sys_dir = ">daemon_dir_dir>volume_backup";
    error_rnt = com_err_;
    long, brief, found = "0"b;
    volume_pool_time = 0;
    volume_pool_state = 0;
    code = 0;
    call cu_$arg_ptr (1, argp, argl, code);
    if code ^= 0 then do;
argerr: call com_err_ (0, myname, "USAGE: ^a volume [-wd|-working_dir]  ", myname);
        return;
      end;
    if substr (arg, 1, 1) = "-" then goto argerr;
    volname = arg;
    call cu_$arg_count (narg);
    ac = 2;
    do while (ac <= narg);
      call cu_$arg_ptr (ac, argp, argl, code);
      if code ^= 0 then do;
	call com_err_ (code, myname, "Unable to access arg after ^a", arg);
	goto finish;
        end;
      if arg = "-working_dir" | arg = "-wd" then sys_dir = get_wdir_ ();
      else if arg = "-long" | arg = "-lg" then long = "1"b;
      else if arg = "-bf" | arg = "-brief" then brief = "1"b;
      else do;
	call com_err_ (error_table_$badopt, myname, "^a", arg);
	goto finish;
        end;
      ac = ac + 1;
    end;
    volog_dir = sys_dir;
    pvolog_dir = rtrim (sys_dir) || ">pvolog";
    contents_dir = rtrim (sys_dir) || ">contents";
    new_pool_path = rtrim (sys_dir) || ">Volume_Dumper";
    call manage_volume_pool_$set_pool_path (error_rnt, new_pool_path, vpp, code);
    if code ^= 0 then goto finish;
    call manage_volume_pool_$status (vpp, error_rnt, volname, comment, volume_pool_time, volume_pool_state, code);
    if code ^= 0 then goto finish;
    on cleanup call finish_;
    if long then call ioa_ ("Processing ^a", volname);
    if comment = "incr" then volume_pool_type = incr;
    else if comment = "cons" then volume_pool_type = cons;
    else if comment = "comp" then volume_pool_type = comp;
    else if comment = "" | comment = "free" then goto finish;
    else do;
        call com_err_ (0, myname, "Unknown volume pool type ^a for volume ^a.
Use manual methods to investigate/free.", comment, volname);
        goto finish;
      end;
    call find_pvolog_and_lock (volname);
    if ^found then do;
        if volume_pool_state = free then goto finish;
        else if volume_pool_state = allocated then do;
	  call com_err_ (code, myname, "Volume ^a not in free pool but pvolog not found", volname);
	  call rebuild_pvolog (volname);
	end;
        else if volume_pool_state = reserved then goto finish;
        else do;
unknown_state:
	  call com_err_ (0, myname, "Unknown volume state for ^a. It will be rebuilt", volname);
	  goto freeit;
	end;
      end;
    else do;
        if volume_pool_state = free then do;
	  call com_err_ (0, myname, "Volume ^a in free state but pvolog exists", volname);
	  call rebuild_pvolog (volname);
	end;
        else if volume_pool_state = reserved & pvolog.in_use ^= 0 then do;
	  call com_err_ (0, myname, "Volume ^a reserved but pvolog has non 0 in use count", volname);
	  call rebuild_pvolog (volname);
	end;
        else if volume_pool_state = reserved then goto finish; /* could be preattached to current dumper	*/
        else if volume_pool_state = allocated then ;
        else do;
	  goto unknown_state;
	end;
      end;

    if volume_pool_type ^= pvolog.dump_type then do;
        call com_err_ (0, myname, "Volume pool and pvolog disagree as to dump type for ^a,
rebuilding to match pvolog.", volname);
freeit: call manage_volume_pool_$free (vpp, error_rnt, volname, ignore);
        volume_pool_state = free;
        volume_pool_type = pvolog.dump_type;
        call rebuild_pvolog (volname);
      end;
    total_volname_count = 0;
    do olx = 1 to pvolog.next;
      pvlep = addr (pvolog.array (olx));
      if pvle.invocation_count ^= 0 then do;
	call find_volog_and_lock ((pvle.pvname));
	if ^found then do;
	    call com_err_ (code, myname, "Unable to find volume log ^a", pvle.pvname);
	    goto next;
	  end;
	else if code ^= 0 then do;			/* must have a header or version problem	*/
	    call cleanup_volog ();			/* unlock and term				*/
	    goto next;				/* step past the bad one			*/
	  end;

	call count_volname (volname);
	total_volname_count = total_volname_count + volname_count;
	if volname_count ^= pvle.invocation_count then do;
	    if ^brief then call com_err_ (0, myname, "Invocation count for ^a differs by ^d from volume log ^a",
		 volname, abs (volname_count - pvle.invocation_count), pvle.pvname);
	    call cleanup_volog;
	    call rebuild_pvolog (volname);
	    goto finish;
	  end;
	call cleanup_volog;
        end;
next:
    end;

    if total_volname_count = 0 then do;
        call com_err_ (0, myname,
	"Volume ^a not found in any volog specified in pvolog", volname);
        call rebuild_pvolog (volname);
      end;
finish:						/* cleanup - unlock and terminate */
    call finish_;
    return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


finish_: proc;
    if pvlp ^= null then call set_lock_$unlock (pvolog.lock, ignore);
    if pvlp ^= null then call hcs_$terminate_noname (pvlp, ignore);
    if bvlp ^= null then call set_lock_$unlock (backup_volume_log.lock, ignore);
    if bvlp ^= null then call hcs_$terminate_noname (bvlp, ignore);

  end finish_;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


find_pvolog_and_lock: proc (volname);
dcl volname	     char (*);
dcl pvolog_name	     char (32);
    found = "0"b;
    pvlp = null;
    call suffixed_name_$make (volname, "pvolog", pvolog_name, code);
    if code ^= 0 then do;
        call com_err_ (code, myname, "Unable to construct pvolog name from ^a", volname);
        goto finish;
      end;
    call hcs_$initiate (pvolog_dir, pvolog_name, "", 0, 0, pvlp, code);
    if pvlp = null then return;
    found = "1"b;
    call set_lock_$lock (pvolog.lock, lock_wait_time, code);
    if code ^= 0 then do;
        if code = error_table_$invalid_lock_reset then code = 0;
        else do;
	  call com_err_ (code, myname, "Unable to lock volume log ^a", pvolog_name);
	  goto finish;
	end;
      end;
  end find_pvolog_and_lock;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


find_volog_and_lock: proc (volname);
dcl volname	     char (*);
dcl volog_name	     char (32);
    found = "0"b;
    bvlp = null;
    call suffixed_name_$make (volname, "volog", volog_name, code);
    if code ^= 0 then do;
        call com_err_ (code, myname, "Unable to construct volog name from ^a", volname);
        goto finish;
      end;
    call hcs_$initiate (volog_dir, volog_name, "", 0, 0, bvlp, code);
    if bvlp = null then return;
    found = "1"b;
    call set_lock_$lock (backup_volume_log.lock, lock_wait_time, code);
    if code ^= 0 then do;
        if code = error_table_$invalid_lock_reset then code = 0;
        else do;
	  call com_err_ (code, myname, "Unable to lock volume log ^a", volog_name);
	  goto finish;
	end;
      end;
    if (backup_volume_log.header.pattern1 ^= pattern1) | (backup_volume_log.header.pattern2 ^= pattern2)
      | (backup_volume_log.header.pattern3 ^= pattern3) then do;
        code = -1;					/* junk					*/
        call com_err_ (0, myname, "Volume log ^a^[>^]^a header patterns are not correct.",
	volog_dir, (volog_dir ^= ">"), volog_name);
        return;

      end;
    if (backup_volume_log.version = backup_volume_log_version_1) |
      (backup_volume_log.version = backup_volume_log_version_2) |
      (backup_volume_log.version = backup_volume_log_version_3) then ;
    else do;
        code = error_table_$unimplemented_version;
        call com_err_ (code, myname, "^a^[>^]^a.", volog_dir, (volog_dir ^= ">"), volog_name);
        return;
      end;

  end find_volog_and_lock;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


count_volname: proc (volname);
dcl volname	     char (*);
    volname_count = 0;
    do bvx = 1 to backup_volume_log.next;
      bvlep = addr (backup_volume_log.array (bvx));
      if volname = bvle.volname then do;
	volname_count = volname_count + 1;
	volume_pool_type = bvle.dump_type;
        end;
    end;

  end count_volname;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


rebuild_pvolog: proc (volname);
dcl volname	     char (*);
    call com_err_ (0, myname, "Forcing rebuild of ^a.pvolog", volname);
    call rebuild_pvolog_ (volog_dir, volname, error_rnt, pvlp, code);
    if code ^= 0 then do;
        call com_err_ (code, myname, "Rebuild failed");
        goto finish;
      end;
    if pvlp ^= null then do;
        if volume_pool_state ^= allocated then
	   call manage_volume_pool_$allocate (vpp, error_rnt, volname, ascii_states (volume_pool_type), "", code);
        if code ^= 0 then
	   call error_rnt (code, myname, "Unable to mark ^a allocated in volume pool", volname);
      end;
    else do;
        call delete_contents_segs (volname);
        if volume_pool_state ^= free then do;
	  call manage_volume_pool_$free (vpp, error_rnt, volname, code);
	  if code ^= 0 then
	       call error_rnt (code, myname, "Unable to mark ^a free in volume pool", volname);
	end;
      end;
    goto finish;
  end rebuild_pvolog;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

delete_contents_segs: proc (volname);
dcl seg_type	     char (32);
dcl volname	     char (*);
    do seg_type = "contents", "contents_names";
      call suffixed_name_$make (volname, seg_type, ename, code);
      if code ^= 0 then do;
	call error_rnt (code, myname, "Unable to create ^a name from ^a", seg_type, volname);
	return;
        end;
      call delete_$path (contents_dir, ename, "100111"b, "", code);
      if code ^= 0 & code ^= error_table_$noentry then
	 call error_rnt (code, myname, "Unable to delete ^a>^a ", contents_dir, ename);
    end;
  end delete_contents_segs;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

cleanup_volog: proc;
    call set_lock_$unlock (backup_volume_log.lock, ignore);
    call hcs_$terminate_noname (bvlp, ignore);
    bvlp = null;

  end cleanup_volog;

%include backup_volume_log;

%include pvolog;
%include backup_pvol_info;

%include fs_vol_label;

%include backup_volume_header;
%include backup_static_variables;

  end volume_cross_check;
