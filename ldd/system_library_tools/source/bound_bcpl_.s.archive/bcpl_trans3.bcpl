//  Miscellaneous subroutines of Trans.
//  Last modified on 06/06/74 at 18:26:39 by R F Mabee.
//  Prepared for installation as Version 3.4 by R F Mabee.
//  Modified at time of 6180 bootstrap to change interface to code generator.
//  First installed as part of Version 2.7 by R F Mabee.

//  Copyright (c) 1974 by Massachusetts Institute of Technology and Honeywell Information Systems, Inc.

//  General permission is granted to copy and use this program, but not to sell it, provided that the above
//  copyright statement is given.  Contact Information Processing Services, MIT, for further information.
//  Please contact R F Mabee at MIT for information on this program and versions for other machines.

get "bcpl_trans_head"

let TransConditional (x, B, L) be
  switchon x!0 & Right into
     $(	case NOT_S:
		TransConditional (x!1, not B, L)
		return

	case LOGOR_S:
	case LOGAND_S:
		test B neqv ((x!0 & Right) = LOGOR_S)
		then $(	let M = Nextparam ()
			TransConditional (x!1, not B, M)
			TransConditional (x!2, B, L)
			GenerateLabel (M)
		     $)
	or   $(	TransConditional (x!1, B, L)
			TransConditional (x!2, B, L)
		     $)
		return

	case COND_S:   $(	let M, N = Nextparam (), Nextparam ()
			TransConditional (x!1, false, M)
			TransConditional (x!2, B, L)
			GenerateJump (N)
			GenerateLabel (M)
			TransConditional (x!3, B, L)
			GenerateLabel (N)
			return
		     $)

	case REL_S:
		x := x!1
	case EQ_S: case NE_S: case LS_S: case GR_S: case LE_S: case GE_S:
	case EQ_F: case NE_F: case LS_F: case GR_F: case LE_F: case GE_F:
		     $(	let PT, M = PendingTemps, 0
			let Desc1, Desc2 = vec DescSize, vec DescSize
			let LeftOperand = x!1
			while IsRelational (x!2) do
			     $(	let MiddleOperand = x!2!1
				if CountTemporaries (MiddleOperand) > 1 do MiddleOperand := MakeCopy (MiddleOperand)
				CompileOperand (LeftOperand, Desc1)
				CompileOperand (MiddleOperand, Desc2)
				if B & M = 0 do M := Nextparam ()
				GenerateDiadicConditional (ComplementRelop (x!0 & Right), (B -> M, L), Desc1, Desc2)
				x := x!2
				LeftOperand := MiddleOperand
			     $)
			CompileOperand (LeftOperand, Desc1)
			CompileOperand (x!2, Desc2)
			let Op = x!0 & Right
			unless B do Op := ComplementRelop (Op)
			GenerateDiadicConditional (Op, L, Desc1, Desc2)
			PutBackTemps (PT)
			unless M = 0 do GenerateLabel (M)
			return
		     $)

	case EQV_S:
		B, x!0 := not B, NEQV_S	//  Kludge - NEQV is easier to calculate (using exclusive-OR hardware).
	default:	let PT, Switch = PendingTemps, vec DescSize
		CompileOperand (x, Switch)
		GenerateMonadicConditional ((B -> TRUE_S, FALSE_S), L, Switch)
		PutBackTemps (PT)
     $)
and ComplementRelop (Op) = valof
  switchon Op into
     $(	case EQ_S: resultis NE_S
	case EQ_F: resultis NE_F
	case NE_S: resultis EQ_S
	case NE_F: resultis EQ_F
		case LS_S: resultis GE_S
	case LS_F: resultis GE_F
	case GE_S: resultis LS_S
	case GE_F: resultis LS_F
	case GR_S: resultis LE_S
	case GR_F: resultis LE_F
	case LE_S: resultis GR_S
	case LE_F: resultis GR_F
	default:	 CGreport (UnexpectedCase, Op, "ComplementRelop")
		 resultis EQ_S
     $)

let Target (x) = valof
     $(	let a = nil
	if x = 0 resultis 0
	switchon x!0 & Right into
	     $(	case RETURN_S:
			if ReturnLabel = 0 do Transreport (NotInsideRtdef, x)
			resultis ReturnLabel
		case ENDCASE_S:
			unless SwitchFlag do Transreport (NoSwitch, x)
			resultis EndcaseLabel
		case LOOP_S:
			a := lv LoopLabel
			goto Check
		case BREAK_S:
			a := lv BreakLabel
		Check:	unless LoopFlag do Transreport (NoLoop, x)
			if rv a = 0 do rv a := Nextparam ()
			resultis rv a
		case GOTO_S:
			a := x!1
			if (a!0 & Right) = NAME_S do
			     $(	let T = Cellwithname (a)
				if T!1 = LABEL_S resultis T!2
			     $)
		default:	resultis 0
	     $)
     $)

let ListSize (List) = valof
     $(	if List = 0 resultis 0
	unless (List!0 & Right) = COMMA_S resultis SubListSize (List)
	let N = 0
	for i = 1 to List!1 do N := N + SubListSize (List!(i + 1))
	resultis N
     $)
and SubListSize (List) = valof
     $(	unless (List!0 & Right) = REP_S resultis 1
	unless (List!2!0 & Right) = CONSTANT_S do
	     $(	let N = Evalconst (List!2)
		if N < 0 do N := 0
		List!2 := List2 (CONSTANT_S, N)
	     $)
	resultis List!2!1
     $)

and WalkList (List, F, x) be
     $(	let N, Len = 0, ListSize (List)
	if Len = 0 return
	let FlatList = Newvec (Len - 1)
	for i = 0 to Len - 1 do FlatList!i := 0
	test (List!0 & Right) = COMMA_S
	then for i = 1 to List!1 do N := N + WalkSubList (List!(i + 1), lv FlatList!N)
	or WalkSubList (List, FlatList)
	for i = 1 to Len do
	     $(	N := RandomI () rem Len repeatwhile FlatList!N = -1
		F (FlatList!N, x + N)
		FlatList!N := -1
		     $)
	Freevec (FlatList, Len - 1)
     $)
and WalkSubList (List, Flat) = valof
     $(	unless (List!0 & Right) = REP_S do
	     $(	Flat!0 := List
		resultis 1
	     $)
	let T = List!1
	if CountTemporaries (T) > 1 do T := MakeCopy (T)
	let N = List!2!1
	for i = 0 to List!2!1 - 1 do Flat!i := T
	resultis List!2!1
     $)

let Assignlist (LeftTree, RightTree) be
     $(	let Len = ListSize (RightTree)
	and OldLHS, PT = LHSpointer, PendingTemps
	test (LeftTree!0 & Right) = COMMA_S
	then $(	LHSpointer := lv LeftTree!2
		test LeftTree!1 = Len
		then WalkList (RightTree, AssignElement, 0)
		or Transreport (Conformality, RightTree)
	     $)
	or   $(	LHSpointer := lv LeftTree
		test Len = 1
		then WalkList (RightTree, AssignElement, 0)
		or Transreport (Conformality, LeftTree)
	     $)
	LHSpointer := OldLHS
	PutBackTemps (PT)
     $)
and AssignElement (RightTree, i) be
	CompileExpression (LHSpointer!i, RightTree)

let TransLoop (Body, Cond, Sense, Enter) be
     $(	let Bl, Ll, Lf = BreakLabel, LoopLabel, LoopFlag
	BreakLabel, LoopLabel, LoopFlag := 0, Enter, true
	unless Enter = 0 do GenerateJump (Enter)

	let Top = Nextparam ()
	GenerateLabel (Top)
	Transbody (Body)
	unless LoopLabel = 0 do GenerateLabel (LoopLabel)
	LoopFlag := false		//  Force any break in conditional to get error message.
	test Cond = 0
	then GenerateJump (Top)
	or TransConditional (Cond, Sense, Top)
	unless BreakLabel = 0 do GenerateLabel (BreakLabel)
	BreakLabel, LoopLabel, LoopFlag := Bl, Ll, Lf
     $)

let TransFor (x) be
     $(	let s, Dp, PT = SSP, DvecP, PendingTemps
	let Bl, Ll, Lf = BreakLabel, LoopLabel, LoopFlag
	BreakLabel, LoopLabel, LoopFlag := 0, 0, true

	let Name, Initial, Max, Step, Body = x!1, x!2, x!3, x!4, x!5
	Addlocal (Name)
	Checkdistinct ()
	CompileExpression (Name, Initial)
	unless IsConst (Max) do Max := MakeCopy (Max)
	if Step = 0 do Step := table CONSTANT_S, 1

	let L, M = Nextparam (), Nextparam ()
	GenerateJump (M)

	GenerateLabel (L)
	Transbody (Body)
	unless LoopLabel = 0 do GenerateLabel (LoopLabel)

	let T1 = list PLUS_S, Name, Step
	CompileExpression (Name, T1)

	GenerateLabel (M)
	let T2 = list (Evalconst (Step) < 0 -> GE_S, LE_S), Name, Max
	TransConditional (T2, true, L)

	unless BreakLabel = 0 do GenerateLabel (BreakLabel)
	BreakLabel, LoopLabel, LoopFlag := Bl, Ll, Lf
	Removenames (Dp)
	PutBackTemps (PT)
	ResetSSP (s)
     $)
