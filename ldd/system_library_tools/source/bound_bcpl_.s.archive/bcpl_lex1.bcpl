//  This is Nsymb, which returns the next symbol of the real program (before SEMICOLON_S is inserted.)
//  Last modified on 06/06/74 at 18:25:56 by R F Mabee.
//  Installed on 6180 as Version 3.4, R F Mabee.
//  First installed on 645 as Version 2.7, R F Mabee.

//  Copyright (c) 1974 by Massachusetts Institute of Technology and Honeywell Information Systems, Inc.

//  General permission is granted to copy and use this program, but not to sell it, provided that the above
//  copyright statement is given.  Contact Information Processing Services, MIT, for further information.
//  Please contact R F Mabee at MIT for information on this program and versions for other machines.

get "bcpl_lex_head"

let Nsymb () = valof
     $(	let Sym = nil
	Vp := 0
  Top:	switchon Chkind into
	     $(	case Ignorable:
			Rch () repeatwhile Chkind = Ignorable
			goto Top

		case Small:
			SaveCh () repeatwhile Chkind = Small
			V!0 := Vp
			Sym := EnterIntoDictionary (V, NAME_S)
			if Sym = NAME_S & Vp ge 2 do CaeReport (BadSystemword, DictionaryEntry!1)
			resultis Sym

		case Capital:
			SaveCh () repeatwhile Chkind ge Digit
			V!0 := Vp
			resultis EnterIntoDictionary (V, NAME_S)

		case Digit:
			SaveCh () repeatwhile Chkind = Digit
			if Ch = '.' do
			     $(	SaveCh () repeatwhile Chkind = Digit
				if Ch = 'e' logor Ch = 'E' do
				     $(	SaveCh ()
					if Ch = '+' logor Ch = '-' do SaveCh ()
					test Chkind = Digit
					then SaveCh () repeatwhile Chkind = Digit
					or CaeReport (BadNumber)
				     $)
			     $)
			V!0 := Vp
			resultis EnterIntoDictionary (V, NUMBER_S)

		case Bracket:
			test Ch = '{'
			then Sym := SECTBRA_S
			or Sym, Ch := SECTKET_S, '{'		//  Make string part same as SECTBRA_S.
		  Rtag:	SaveCh () repeatwhile Chkind ge Digit
			V!0 := Vp
			EnterIntoDictionary (V, SECTBRA_S)
			resultis Sym

		case Endline:
			if EndOfAllInputReached resultis ENDPROG_S
			NLPending := true
			Rch () repeatwhile Ch = '*n'
			goto Top

		case UnderScore:		//  Illegal character, so it falls through.
		case Simple:
	     $)

	let c = Ch
	Rch ()
	switchon c into
	     $(	default:	CaeReport (BadCharacter, c)
			goto Top

		case '(':	resultis RBRA_S
		case ')':	resultis RKET_S
		case '[':	resultis SBRA_S
		case ']':	resultis SKET_S
		case ',':	resultis COMMA_S
		case '!':	resultis VECAP_S
		case '&':	resultis LOGAND_S
		case '|':	resultis LOGOR_S
		case ';':	resultis SEMICOLON_S
		case '=':	resultis VALDEF_S
		case '+':	resultis PLUS_S
		case '**':resultis MULT_S

		case '-':	unless Ch = '>' logor Ch = '**' resultis MINUS_S
			Rch ()
			resultis COND_S
		case '/':	unless Ch = '/' resultis DIV_S
			Rch () repeatuntil Chkind = Endline
			goto Top
		case ':':	unless Ch = '=' resultis COLON_S
			Rch ()
			resultis ASSIGN_S
		case '^':	unless Ch = '=' resultis NOT_S
			Rch ()
			resultis NE_S
		case '<':	unless Ch = '=' resultis LS_S
			Rch ()
			resultis LE_S
		case '>':	unless Ch = '=' resultis GR_S
			Rch ()
			resultis GE_S

		case '$':	switchon Ch into
			     $(	case '(':	Sym := SECTBRA_S
					goto Rtag

				case ')':	Sym, Ch := SECTKET_S, '('
					goto Rtag

				case '2': case '8': case 'X':
					V!1, Vp := '$', 1
					c := Ch		//  Remember base.
					     $(	SaveCh ()
						switchon Ch into
						     $(	case '8': case '9': case 'A': case 'B':
							case 'C': case 'D': case 'E': case 'F':
								if c = 'X' loop
								break
							case '2': case '3': case '4':
							case '5': case '6': case '7':
								unless c = '2' loop
								break
							case '0': case '1':
								loop
							default:	break
						     $)
					     $)	repeat
					V!0 := Vp
					resultis EnterIntoDictionary (V, NUMBER_S)

				default:	CaeReport (BadDollar, Ch)
					goto Top
			     $)

		case '.':	c := Nsymb ()
			switchon c into
			     $(	case VALDEF_S:
				case EQ_S:	resultis EQ_F
				case NE_S:	resultis NE_F
				case LS_S:	resultis LS_F
				case LE_S:	resultis LE_F
				case GR_S:	resultis GR_F
				case GE_S:	resultis GE_F
				case PLUS_S:	resultis PLUS_F
				case MINUS_S:	resultis MINUS_F
				case MULT_S:	resultis MULT_F
				case DIV_S:	resultis DIV_F
				default:		CaeReport (BadFloat)
						resultis c
			     $)

		case '*'':
			Sym := CHARCONST_S
			goto Rstring
		case '"':
			Sym := STRINGCONST_S
		Rstring:	V!1, Vp := c, 1
			until Ch = c do
			     $(	if Ch = '**' do SaveCh ()
				SaveCh ()
				if Vp ge Vmax break
			     $)
			SaveCh ()
			V!0 := Vp
			resultis EnterIntoDictionary (V, Sym)
	     $)
     $)

and SaveCh () be		//  Subroutine to stash current character and get next.
     $(	Vp := Vp + 1
	if Vp ge Vmax do
	     $(	if Vp = Vmax do CaeReport (TokenTooLong, Vmax)		//  Trick to avoid repeating message.
		Vp := Vmax
	     $)
	V!Vp := Ch
	Rch ()
     $)
