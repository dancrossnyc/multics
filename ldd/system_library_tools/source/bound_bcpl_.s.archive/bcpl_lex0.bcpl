//  This part of the lexical analyzer contains the miscellaneous short routines.
//  Last modified on 06/06/74 at 18:25:50 by R F Mabee.
//  Slight modifications installed on 6180 as Version 3.4 by R F Mabee.
//  First installed as Version 2.7 on 645 by R F Mabee.

//  Copyright (c) 1974 by Massachusetts Institute of Technology and Honeywell Information Systems, Inc.

//  General permission is granted to copy and use this program, but not to sell it, provided that the above
//  copyright statement is given.  Contact Information Processing Services, MIT, for further information.
//  Please contact R F Mabee at MIT for information on this program and versions for other machines.

get "bcpl_lex_head"
get "bcpl_metering_head"

manifest
     $(	HashSize = 101  $)


//  The routine Rch fetches the next input character, sets Chkind to reflect its type,
//  writes the character in the listing, keeps track of line numbers for cross-reference and
//  for error messages, and switches input streams when end-of-file is detected.

let Rch () be
     $(	let UsageTemp = nil
	if Metering do UsageTemp := SaveOldUsage ()
  Top:	Readch (INPUT, Lvch)
	Chkind := valof switchon Ch into
	     $(	case 'A': case 'B': case 'C': case 'D': case 'E': case 'F': case 'G':
		case 'H': case 'I': case 'J': case 'K': case 'L': case 'M': case 'N':
		case 'O': case 'P': case 'Q': case 'R': case 'S': case 'T': case 'U':
		case 'V': case 'W': case 'X': case 'Y': case 'Z':
			resultis Capital

		case 'a': case 'b': case 'c': case 'd': case 'e': case 'f': case 'g':
		case 'h': case 'i': case 'j': case 'k': case 'l': case 'm': case 'n':
		case 'o': case 'p': case 'q': case 'r': case 's': case 't': case 'u':
		case 'v': case 'w': case 'x': case 'y': case 'z':
			resultis Small

		case '0': case '1': case '2': case '3': case '4':
		case '5': case '6': case '7': case '8': case '9':
			resultis Digit

		case '{': case '}':
			resultis Bracket

		case '_':	resultis UnderScore

		case '*s': case '*t': case '*r':
		case '*v': case '*d': case '*k':
		case '*f': case '*b':
			resultis Ignorable

		case '*n':EndCurrentLine := true
			resultis Endline

		case '?':	unless Crep & NestingDepth = 0 resultis Simple	//  Terminator for typed-in program, otherwise illegal.

		case Endofstreamch:
			unless EndOfAllInputReached do TotalLines := TotalLines + (LineCount & LineMask)
			if NestingDepth = 0 do		//  If the outermost source file is finished...
			     $(	Chkind := Endline
				EndOfAllInputReached := true
				goto Exit
			     $)
			if Listing & not BeginNewLine do Writech (OUTPUT, '*n')
			NestingDepth := NestingDepth - 1		//  For indenting listing.
			PopInput ()
			NLPending := true
			goto Top

		default:	resultis Simple
	     $)
	if BeginNewLine do
	     $(	LineCount := LineCount + 1
		if Listing do
		     $(	for i = 1 to NestingDepth do Writech (OUTPUT, '*t')
			Format (OUTPUT, "  ^4d*t", LineCount & LineMask)
		     $)
		BeginNewLine := false
	     $)
	if Listing do Writech (OUTPUT, Ch)
	if EndCurrentLine do BeginNewLine, EndCurrentLine := true, false

  Exit:	if Metering do RecordUsage (Listing -> RchWithListing_Meter, RchWithoutListing_Meter, UsageTemp)
     $)


manifest
     $(	Must = $8100		//  Categories for symbols with respect to insertion of ; and _d_o.
	May = $8000
	BeginCommand = $8010
	EndCommand = $8001
     $)

//  Nextsymb is used throughout the syntax analyzer to get the next input canonical symbol.
//  It puts the internal representation (a named constant) for the input token in the global cell Symb.
//  This routine applies the pre-processor rules for inserting DO and SEMICOLON,
//  as well as detecting a GET phrase.  Nsymb is used to obtain actual input symbols.

let Nextsymb () be
     $(	let UsageTemp = nil
	if Metering do UsageTemp := SaveOldUsage ()
	unless SavedSymb = 0 do
	     $(	Symb := SavedSymb
		SavedSymb := 0
		goto Exit
	     $)
  Rnext:	Symb := Nsymb ()
	let Category = valof switchon Symb into
	     $(	case GET_S:
			ProcessGet ()
			goto Rnext

		case NAME_S:
			if Xref do EnterIntoCrossreference ()

		case FALSE_S: case TRUE_S: case NUMBER_S:
		case STRINGCONST_S: case CHARCONST_S:
			resultis May | BeginCommand | EndCommand

		case PLUS_S: case MINUS_S: case SECTBRA_S: case RBRA_S: case VALOF_S:
		case TABLE_S: case LIST_S: case SECTBEGIN_S: case NOT_S:
		case RV_S: case LV_S:
			resultis May | BeginCommand

		case BREAK_S: case ENDCASE_S: case LOOP_S: case FINISH_S: case RETURN_S:
			resultis Must | BeginCommand | EndCommand

		case MANIFEST_S: case GLOBAL_S: case STATIC_S: case EXTERNAL_S:
		case LET_S: case STRUCTURE_S:
		case CALL_S: case CASE_S: case DEFAULT_S:
		case FOR_S: case GOTO_S:
		case IF_S: case RESULTIS_S:
		case SWITCHON_S: case TEST_S: case UNLESS_S:
		case UNTIL_S: case WHILE_S:
			resultis Must | BeginCommand

		case REPEAT_S:
			resultis Must | EndCommand

		case NIL_S: case RKET_S: case SKET_S: case SECTKET_S: case SECTEND_S:
			resultis May | EndCommand

		default:	resultis 0		//  Can't begin or end a command.
	     $)
	test NLPending
	then $(	NLPending := false
		if (ST & EndCommand) ne 0 & (Category & BeginCommand) ne 0 do
		     $(	SavedSymb := Symb
			Symb := SEMICOLON_S
		     $)
	     $)
	or if (ST & EndCommand) ne 0 & (Category & (Must | BeginCommand)) = (Must | BeginCommand) do
		     $(	SavedSymb := Symb
			Symb := DO_S
		     $)
	ST := Category
  Exit:	if Metering do RecordUsage (Nextsymb_Meter, UsageTemp)
	if PPrep do
	     $(	WriteS (OUTPUT, SymbolName (Symb))
		Writech (OUTPUT, '*n')
	     $)
     $)
and ProcessGet () be		//  Handle GET phrase for Nextsymb.
     $(	let UsageTemp = nil
	if Metering do UsageTemp := SaveOldUsage ()
	unless Nsymb () = STRINGCONST_S do
	     $(	CaeReport (GetStringMissing)
		goto Exit
	     $)
	unless BeginNewLine do
	     $(	if Listing do Writech (OUTPUT, '*n')
		LineCount := LineCount - 1
	     $)
	PushInput (DictionaryEntry!1)
	NestingDepth := NestingDepth + 1		//  For indenting listing.
	BeginNewLine, NLPending := true, true
	Ch, Chkind := '*n', Endline

  Exit:	if Metering do RecordUsage (ProcessGet_Meter, UsageTemp)
     $)

//  EnterIntoDictionary is called to record any string in the compiler's symbol table so that it may
//  be referenced by a unique pointer to a dictionary entry.  Result is left in global DictionaryEntry.

let EnterIntoDictionary (Unpacked, Type) = valof
     $(	let UsageTemp = nil
	if Metering do UsageTemp := SaveOldUsage ()
	let String = vec Vmax
	Packstring (Unpacked, String)
	let Len = LengthInWords (String) - 1
	let Hash = String!0 + String!Len		//  Use primitive hashing to fan out binary tree rapidly.
	if Hash < 0 do Hash := - Hash
	let Q = lv NamesTable!(Hash rem HashSize)		//  Separate name chain for each hash value.
	     $(	DictionaryEntry := rv Q
		DictionaryDepth := DictionaryDepth + 1
		if DictionaryEntry = 0 break		//  Not found.
		let d = String!0 - DictionaryEntry!1!0	//  Compare raw representations.
		if d = 0 then for i = 1 to Len do
		     $(	d := String!i - DictionaryEntry!1!i
			unless d = 0 break
		     $)
		if d = 0 do			//  Is found.
		     $(	if Metering do RecordUsage (SymbolSearch_Meter, UsageTemp)
			resultis DictionaryEntry!0
		     $)
		Q := d < 0 -> lv DictionaryEntry!4, lv DictionaryEntry!5
	     $)	repeat
	DictionaryEntry := List6 (Type, StoreString (String), 0, 0, 0, 0)	
		//  Format:  type, name pointer, value cell for Trans, xref list, < dict list, > dict list.
	rv Q := DictionaryEntry		//  And enter into symbol tree.
	if Metering do RecordUsage (SymbolAdd_Meter, UsageTemp)
	resultis Type
     $)


//  This is LexInit, which initializes some global cells for the lexical analyzer,
//  and loads up the dictionary with all the reserved words with their internal values.
//  The lexical phase (Lex) operates as a co-routine to the syntactic phase (Cae).
//  Cae can keep things in its stack, but Lex must store everything in global cells.

let LexInit () be
     $(	Ch, Chkind, Lvch := '*n', Endline, lv Ch
	BeginNewLine, EndCurrentLine := true, false
	EndOfAllInputReached := false
	NestingDepth := 0
	NLPending, ST, SavedSymb := true, 0, 0
	V, Vp := Newvec (Vmax), 0
	TotalLines, DictionaryDepth := 0, 0
	NamesTable := Newvec (HashSize)
	for i = 0 to HashSize do NamesTable!i := 0

	LoadDictionary ()
	Nextsymb ()		//  Symb should always be valid.
     $)
