//  These routines are used to implement the tree, xref, and pprep options.
//  Last modified on 06/06/74 at 18:26:07 by R F Mabee.
//  Prepared for installation on 6180 with Version 3.4 by R F Mabee
//  First installed as Version 2.7, R F Mabee

//  Copyright (c) 1974 by Massachusetts Institute of Technology and Honeywell Information Systems, Inc.

//  General permission is granted to copy and use this program, but not to sell it, provided that the above
//  copyright statement is given.  Contact Information Processing Services, MIT, for further information.
//  Please contact R F Mabee at MIT for information on this program and versions for other machines.

get "bcpl_compiler_head"
get "bcpl_symbols"
get "bcpl_metering_head"


let SymbolName (Op) = valof
  switchon Op into
     $(	default:		CGreport (UnexpectedCase, Op, "SymbolName")
			resultis "<unknown>"

	case AND_S:	resultis "AND"
	case ASSIGN_S:	resultis "ASSIGN"
	case BE_S:	resultis "BE"
	case BIT_S:	resultis "BIT"
	case BREAK_S:	resultis "BREAK"
	case BY_S:	resultis "BY"
	case CALL_S:	resultis "CALL"
	case CASE_S:	resultis "CASE"
	case CHAR_S:	resultis "CHAR"
	case CHARCONST_S:	resultis "CHARCONST"
	case COLON_S:	resultis "COLON"
	case COMMA_S:	resultis "COMMA"
	case COND_S:	resultis "COND"
	case CONSTANT_S:	resultis "CONSTANT"
	case CONSTDEF_S:	resultis "CONSTDEF"
	case DEFAULT_S:	resultis "DEFAULT"
	case DIV_F:	resultis "DIV_F"
	case DIV_S:	resultis "DIV"
	case DO_S:	resultis "DO"
	case DOUBLE_S:	resultis "DOUBLE"
	case ENDCASE_S:	resultis "ENDCASE"
	case ENDPROG_S:	resultis "ENDPROG"
	case EQ_F:	resultis "EQ_F"
	case EQ_S:	resultis "EQ"
	case EQV_S:	resultis "EQV"
	case ERROR_S:	resultis "<error>"
	case EXTERNAL_S:	resultis "EXTERNAL"
	case FALSE_S:	resultis "FALSE"
	case FINISH_S:	resultis "FINISH"
	case FIXED_S:	resultis "FIXED"
	case FLOAT_S:	resultis "FLOAT"
	case FNAP_S:	resultis "FNAP"
	case FNDEF_S:	resultis "FNDEF"
	case FOR_S:	resultis "FOR"
	case GE_F:	resultis "GE_F"
	case GE_S:	resultis "GE"
	case GLOBAL_S:	resultis "GLOBAL"
	case GOTO_S:	resultis "GOTO"
	case GR_F:	resultis "GR_F"
	case GR_S:	resultis "GR"
	case IF_S:	resultis "IF"
	case IFNOT_S:	resultis "IFNOT"
	case IFSO_S:	resultis "IFSO"
	case INTO_S:	resultis "INTO"
	case LABDEF_S:	resultis "LABDEF"
	case LABEL_S:	resultis "LABEL"
	case LE_F:	resultis "LE_F"
	case LE_S:	resultis "LE"
	case LENGTH_S:	resultis "LENGTH"
	case LET_S:	resultis "LET"
	case LIST_S:	resultis "LIST"
	case LOCAL_S:	resultis "LOCAL"
	case LOGAND_S:	resultis "LOGAND"
	case LOGOR_S:	resultis "LOGOR"
	case LOOP_S:	resultis "LOOP"
	case LS_F:	resultis "LS_F"
	case LS_S:	resultis "LS"
	case LSHIFT_S:	resultis "LSHIFT"
	case LV_S:	resultis "LV"
	case LV_ARG_OUT:	resultis "LV_ARG_OUT"
	case LV_FNAP_RESULT:resultis "LV_FNAP_RESULT"
	case LV_GLOBAL:	resultis "LV_GLOBAL"
	case LV_LOCAL:	resultis "LV_LOCAL"
	case LV_STATIC:	resultis "LV_STATIC"
	case LV_TEMP:	resultis "LV_TEMP"
	case LVECAP_S:	resultis "LVECAP"
	case MAIN_S:	resultis "MAIN"
	case MANIFEST_S:	resultis "MANIFEST"
	case MINUS_F:	resultis "MINUS_F"
	case MINUS_S:	resultis "MINUS"
	case MULT_F:	resultis "MULT_F"
	case MULT_S:	resultis "MULT"
	case NAME_S:	resultis "NAME"
	case NE_F:	resultis "NE_F"
	case NE_S:	resultis "NE"
	case NEG_F:	resultis "NEG_F"
	case NEG_S:	resultis "NEG"
	case NEQV_S:	resultis "NEQV"
	case NIL_S:	resultis "NIL"
	case NOT_S:	resultis "NOT"
	case NUMBER_S:	resultis "NUMBER"
	case OFFSET_S:	resultis "OFFSET"
	case OR_S:	resultis "OR"
	case PLUS_F:	resultis "PLUS_F"
	case PLUS_S:	resultis "PLUS"
	case POINTER_S:	resultis "POINTER"
	case POS_F:	resultis "POS_F"
	case POS_S:	resultis "POS"
	case RBRA_S:	resultis "RBRA"
	case REGISTER_S:	resultis "REGISTER"
	case REL_S:	resultis "REL"
	case REM_S:	resultis "REM"
	case REP_S:	resultis "REP"
	case REPEAT_S:	resultis "REPEAT"
	case REPEATUNTIL_S:	resultis "REPEATUNTIL"
	case REPEATWHILE_S:	resultis "REPEATWHILE"
	case RESULTIS_S:	resultis "RESULTIS"
	case RETURN_S:	resultis "RETURN"
	case RKET_S:	resultis "RKET"
	case RSHIFT_S:	resultis "RSHIFT"
	case RTAP_S:	resultis "RTAP"
	case RTDEF_S:	resultis "RTDEF"
	case RV_S:	resultis "RV"
	case SBRA_S:	resultis "SBRA"
	case SECTBEGIN_S:	resultis "BEGIN"
	case SECTBRA_S:	resultis "SECTBRA"
	case SECTEND_S:	resultis "END"
	case SECTKET_S:	resultis "SECTKET"
	case SEMICOLON_S:	resultis "SEMICOLON"
	case SKET_S:	resultis "SKET"
	case STATIC_S:	resultis "STATIC"
	case STRING_S:	resultis "STRING"
	case STRINGCONST_S:	resultis "STRINGCONST"
	case STRUCTURE_S:	resultis "STRUCTURE"
	case SWITCHON_S:	resultis "SWITCHON"
	case TABLE_S:	resultis "TABLE"
	case TEMP_S:	resultis "TEMP"
	case TEST_S:	resultis "TEST"
	case TO_S:	resultis "TO"
	case TRUE_S:	resultis "TRUE"
	case TYPE_S:	resultis "TYPE"
	case UNLESS_S:	resultis "UNLESS"
	case UNTIL_S:	resultis "UNTIL"
	case VALDEF_S:	resultis "VALDEF"
	case VALOF_S:	resultis "VALOF"
	case VEC_S:	resultis "VEC"
	case VECAP_S:	resultis "VECAP"
	case WHILE_S:	resultis "WHILE"
     $)
and FindPrintName (x) = valof
  switchon x!0 & Right into
     $(	case NAME_S:
	case NUMBER_S:
	case CHARCONST_S:
	case STRINGCONST_S:
		resultis x!1
	default:	resultis SymbolName (x!0 & Right)
     $)

let Plist (x, n) be
     $(	for i = 0 to n do Writech (OUTPUT, '|')
	Writech (OUTPUT, '*s')
	if x = 0 do
	     $(	WriteS ("<empty>*n")
		return
	     $)
	let s, t = 1, 0
	let Op = x!0 & Right
	t := valof switchon Op into
	     $(	case NIL_S: case TRUE_S: case FALSE_S:
		case LOOP_S: case BREAK_S: case RETURN_S:
		case ENDCASE_S: case FINISH_S:
		case ERROR_S:
			resultis 0

		case NEG_S: case NOT_S: case REL_S: case LV_S:
		case RV_S: case VEC_S: case VALOF_S:
		case TABLE_S: case GOTO_S: case RESULTIS_S:
		case REPEAT_S: case DEFAULT_S: case LIST_S:
		case NEG_F: case CALL_S:
		case FIXED_S: case FLOAT_S: case DOUBLE_S:
		case POINTER_S: case STRING_S:
		case POS_S: case POS_F:
			resultis 1

		case AND_S: case ASSIGN_S: case BIT_S: case CHAR_S:
		case COLON_S: case DIV_F: case DIV_S: case EQ_F:
		case EQ_S: case EQV_S: case EXTERNAL_S: case FNAP_S:
		case GE_F: case GE_S: case GLOBAL_S: case GR_F:
		case GR_S: case IF_S: case LE_F: case LE_S:
		case LENGTH_S: case LET_S: case LOGAND_S: case LOGOR_S:
		case LS_F: case LS_S: case LSHIFT_S: case MANIFEST_S:
		case MINUS_F: case MINUS_S: case MULT_F: case MULT_S:
		case NE_F: case NE_S: case NEQV_S: case OFFSET_S:
		case PLUS_F: case PLUS_S: case REM_S: case REP_S:
		case REPEATUNTIL_S: case REPEATWHILE_S: case RSHIFT_S: case RTAP_S:
		case SEMICOLON_S: case STATIC_S: case STRUCTURE_S:
		case SWITCHON_S: case TYPE_S: case UNLESS_S: case UNTIL_S:
		case VALDEF_S: case VECAP_S: case WHILE_S:
			resultis 2

		case CASE_S: case COND_S: case TEST_S:
		case CONSTDEF_S: case FNDEF_S: case RTDEF_S:
			resultis 3

		case FOR_S:
			resultis 5

		case COMMA_S:
			s := 2
			resultis x!1 + 1

		case CONSTANT_S:
			Format (OUTPUT, "CONSTANT ^d*n", x!1)
			return

		case NUMBER_S:
		case CHARCONST_S:
		case STRINGCONST_S:
		case NAME_S:
			Format (OUTPUT, "^s ^s*n", SymbolName (Op), x!1)
			return

		default:	CGreport (UnexpectedCase, Op, "Plist")
			resultis 0
	     $)
	Format (OUTPUT, "^s*n", SymbolName (Op))
	while s le t do
	     $(	Plist (x!s, n + 1)
		s := s + 1
	     $)
     $)

let Pname (x) be
     $(	if x = 0 return
	let UsageTemp = nil
	if Metering do UsageTemp := SaveOldUsage ()
	Pname (x!1)
	let Chain = x!0!3
	unless Chain = 0 do
	     $(	let Last = 0		//  Cross-reference chain is created backwards, so reverse it.
		     $(	let Next = Chain!1
			Chain!1 := Last
			if Next = 0 break
			Last := Chain
			Chain := Next
		     $)	repeat

		WriteS (x!0!1)		//  Put out name of item being listed.
		Column := Length (x!0!1)
		Column := Column - Column rem 10
		     $(	Writech (OUTPUT, '*t')
			Column := Column + 10
		     $)	repeatwhile Column < 30

		let LastFile = -1
		let Number = vec 20
		     $(	let Line = Chain!0 rshift Left
			let File = Line rshift FileShift
			Line := Line & LineMask
			unless File = LastFile do
			     $(	let ID = FileNames!File
				Need (Length (ID) + 3, 90)
				WriteS (ID)
				WriteS (":*s*s")
				LastFile := File
			     $)
			ConvertNtoS (Line, Number, 10)
			Need (Length (Number) + 2, 120)
			WriteS (OUTPUT, Number)
			Chain := Chain!1
			if Chain = 0 break
			WriteS (OUTPUT, ",*s")
		     $)	repeat
		WriteS (OUTPUT, "*n*n")
	     $)
	Pname (x!2)

	if Metering do RecordUsage (PrintXref_Meter, UsageTemp)
     $)
and Need (n, Max) be
     $(	Column := Column + n
	if Column > Max do
	     $(	WriteS (OUTPUT, "*n*t*t*t")
		Column := 30 + n
	     $)
     $)

and EnterIntoCrossreference () be		//  Make list for Pname, using current named symbol.
     $(	if DictionaryEntry!3 = 0 do		//  First reference, create NAMECHAIN entry.
	     $(	let Q = lv NAMECHAIN
		     $(	let P = rv Q
			if P = 0 break
			Q := CompareStrings (DictionaryEntry!1, P!0!1) < 0 -> lv P!1, lv P!2
		     $)	repeat
		rv Q := List3 (DictionaryEntry, 0, 0)		//  Format:  NAME node, < names list, > names list.
	     $)
	DictionaryEntry!3 := List2 (LineCount lshift Left, DictionaryEntry!3)
     $)
