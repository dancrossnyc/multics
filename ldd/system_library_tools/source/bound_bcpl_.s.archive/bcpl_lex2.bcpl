//  These routines are used for initialization of the lexical analyzer.
//  Last modified on 06/06/74 at 18:25:59 by R F Mabee.
//  Prepared for installation with Version 3.4, R F Mabee.
//  Rewritten in March 1973 to predefine reserved words rather than recognize then algorithmically (old Lookupword).
//  First version installed in Version 2.7, R F Mabee.

//  Copyright (c) 1974 by Massachusetts Institute of Technology and Honeywell Information Systems, Inc.

//  General permission is granted to copy and use this program, but not to sell it, provided that the above
//  copyright statement is given.  Contact Information Processing Services, MIT, for further information.
//  Please contact R F Mabee at MIT for information on this program and versions for other machines.

get "bcpl_lex_head"


//  This routine applies a given routine to all the system words and their internal codes.

let MapSystemwords (MapF) be
     $(	MapF ("and", AND_S)

	MapF ("break", BREAK_S); MapF ("be", BE_S); MapF ("begin", SECTBEGIN_S)
	MapF ("bit", BIT_S); MapF ("by", BY_S)

	MapF ("case", CASE_S); MapF ("call", CALL_S); MapF ("char", CHAR_S)

	MapF ("do", DO_S); MapF ("default", DEFAULT_S); MapF ("double", DOUBLE_S)

	MapF ("endcase", ENDCASE_S); MapF ("else", OR_S); MapF ("end", SECTEND_S)
	MapF ("eqv", EQV_S); MapF ("external", EXTERNAL_S); MapF ("eq", EQ_S)

	MapF ("for", FOR_S); MapF ("false", FALSE_S); MapF ("fixed", FIXED_S)
	MapF ("finish", FINISH_S); MapF ("float", FLOAT_S)

	MapF ("goto", GOTO_S); MapF ("ge", GE_S); MapF ("get", GET_S)
	MapF ("global", GLOBAL_S); MapF ("gr", GR_S)

	MapF ("if", IF_S); MapF ("ifso", IFSO_S); MapF ("ifnot", IFNOT_S)
	MapF ("into", INTO_S)

	MapF ("let", LET_S); MapF ("le", LE_S); MapF ("loop", LOOP_S)
	MapF ("logand", LOGAND_S); MapF ("logor", LOGOR_S); MapF ("length", LENGTH_S)
	MapF ("list", LIST_S); MapF ("lshift", LSHIFT_S); MapF ("lv", LV_S)
	MapF ("ls", LS_S)

	MapF ("manifest", MANIFEST_S); MapF ("main", MAIN_S)

	MapF ("nil", NIL_S); MapF ("not", NOT_S); MapF ("ne", NE_S)
	MapF ("neqv", NEQV_S)

	MapF ("or", OR_S); MapF ("offset", OFFSET_S); MapF ("otherwise", OR_S)

	MapF ("pointer", POINTER_S); MapF ("ptr", POINTER_S)

	MapF ("repeatuntil", REPEATUNTIL_S); MapF ("resultis", RESULTIS_S); MapF ("rem", REM_S)
	MapF ("repeatwhile", REPEATWHILE_S); MapF ("rshift", RSHIFT_S); MapF ("return", RETURN_S)
	MapF ("repeat", REPEAT_S); MapF ("rv", RV_S); MapF ("rep", REP_S)

	MapF ("static", STATIC_S); MapF ("structure", STRUCTURE_S); MapF ("switchon", SWITCHON_S)
	MapF ("string", STRING_S); MapF ("step", BY_S)

	MapF ("then", DO_S); MapF ("table", TABLE_S); MapF ("test", TEST_S)
	MapF ("true", TRUE_S); MapF ("type", TYPE_S); MapF ("to", TO_S)

	MapF ("unless", UNLESS_S); MapF ("until", UNTIL_S)

	MapF ("valof", VALOF_S); MapF ("vec", VEC_S)

	MapF ("while", WHILE_S)
     $)

//  Initialize the dictionary to contain all reserved words for faster lookup later.

let LoadDictionary () be
     $(	MapSystemwords (DefineSystemword)
	if UpperCase do MapSystemwords (DefineUppercaseSystemword)
     $)
and DefineSystemword (Word, Symbol) be
     $(	Unpackstring (Word, V)
	EnterIntoDictionary (V, Symbol)
     $)
and DefineUppercaseSystemword (Word, Symbol) be
     $(	Unpackstring (Word, V)
	for i = 1 to V!0 do V!i := MakeUpperCase (V!i)
	EnterIntoDictionary (V, Symbol)
     $)
and MakeUpperCase (c) = valof switchon c into		//  Map lower case to upper for any character set.
     $(	case 'a':	resultis 'A'
	case 'b':	resultis 'B'
	case 'c': resultis 'C'
	case 'd': resultis 'D'
	case 'e': resultis 'E'
	case 'f': resultis 'F'
	case 'g': resultis 'G'
	case 'h': resultis 'H'
	case 'i': resultis 'I'
	case 'j': resultis 'J'
	case 'k': resultis 'K'
	case 'l': resultis 'L'
	case 'm': resultis 'M'
	case 'n': resultis 'N'
	case 'o': resultis 'O'
	case 'p': resultis 'P'
	case 'q': resultis 'Q'
	case 'r': resultis 'R'
	case 's': resultis 'S'
	case 't': resultis 'T'
	case 'u': resultis 'U'
	case 'v': resultis 'V'
	case 'w': resultis 'W'
	case 'x': resultis 'X'
	case 'y': resultis 'Y'
	case 'z': resultis 'Z'
	default:	resultis c	//  All others map into themselves.
     $)
