//  Routines for printing out the results of metering the BCPL compiler.
//  Last modified on 06/06/74 at 18:26:03 by R F Mabee.
//  First installed as Version 3.4, R F Mabee.
//  Written in April 1973 in order to compare performance of BCPL compiler on 645 vs. 6180.

//  Copyright (c) 1974 by Massachusetts Institute of Technology and Honeywell Information Systems, Inc.

//  General permission is granted to copy and use this program, but not to sell it, provided that the above
//  copyright statement is given.  Contact Information Processing Services, MIT, for further information.
//  Please contact R F Mabee at MIT for information on this program and versions for other machines.

get "bcpl_compiler_head"
get "bcpl_metering_head"

global
     $(	MeterPointer : GlobalTemp  $)

let PrintMeters (BV_MeterPointer) be
     $(	MeterPointer := BV_MeterPointer
	let TotalTime = MeterPointer!(MeteringOverhead_Meter + 2)
	let Lines, Words = MeterPointer!TotalLines_Count, MeterPointer!TextWords_Count
	WriteS (OUTPUT, "*n*tBCPL COMPILER METERING RESULTS*n*nTotal time is")
	PrintTime (TotalTime)
	WriteS (OUTPUT, ".*n")
	if TotalTime = 0 return
	let TimeMillisecs = TotalTime / 1000
	if TimeMillisecs = 0 do TimeMillisecs := 1
	Format (OUTPUT, "Overall speed was ^d source lines per second, ^d object words per second",
			Lines * 1000 / TimeMillisecs, Words * 1000 / TimeMillisecs)
	unless Lines = 0 do
	     $(	WriteS (OUTPUT, " (")
		PrintFraction (Words * 100 / Lines, 100)
		WriteS (OUTPUT, " words per line)")
	     $)
	WriteS (OUTPUT, ".*n*n")

	PrintAverage (RchWithoutListing_Meter, "Rch, no listing")
	PrintAverage (RchWithListing_Meter, "Rch, with listing")
	PrintAverage (Nextsymb_Meter, "Nextsymb")
	PrintAverage (SymbolAdd_Meter, "Dictionary lookup (symbol added)")
	PrintAverage (SymbolSearch_Meter, "Dictionary lookup (already present)")
	let D = MeterPointer!(SymbolAdd_Meter + 1) + MeterPointer!(SymbolSearch_Meter + 1)
	unless D = 0 do
	     $(	WriteS (OUTPUT, "Average dictionary depth is ")
		PrintFraction (MeterPointer!DictionaryDepth_Count * 100 / D, 100)
		Writech (OUTPUT, '*n')
	     $)
	PrintAverage (ProcessGet_Meter, "ProcessGet")
	PrintPerUnit (SyntaxAnalysis_Meter, "Syntax analyzer", Lines, "line")
	PrintAverage (PrintXref_Meter, "Pname")
	PrintPerUnit (SemanticTranslation_Meter, "Semantic translator", Words, "word")
	PrintAverage (CompileExpression_Meter, "Compile expression")
	PrintAverage (CompileSwitchWithoutOptimizing_Meter, "Compile switchon, no optimization")
	PrintAverage (CompileSwitchWithOptimizing_Meter, "Compile switchon, with optimization")
	PrintAverage (CodeGeneration_Meter, "Code generation phase")
	PrintAverage (MakeObject_Meter, "Creating object segment")
	PrintAverage (DriverOverhead_Meter, "Miscellaneous in command interface")
	PrintAverage (MeteringOverhead_Meter, "Metering calls")
	Writech (OUTPUT, '*n')
     $)
and PrintPerUnit (Meter, Comment, Unit, UnitComment) be
     $(	if MeterPointer!Meter = 0 return
	WriteS (OUTPUT, Comment)
	PrintTime (MeterPointer!Meter)
	Writech (OUTPUT, ',')
	unless Unit = 0 do
	     $(	PrintTime (MeterPointer!Meter / Unit)
		Format (OUTPUT, " per ^s,", UnitComment)
	     $)
	PrintPercent (Meter)
     $)
and PrintAverage (Meter, Comment) be
     $(	if MeterPointer!Meter = 0 return
	WriteS (OUTPUT, Comment)
	test MeterPointer!(Meter + 1) = 1	//  Event happened only once.
	then $(	PrintTime (MeterPointer!Meter)
		Writech (OUTPUT, ',')
	     $)
	or   $(	Format (OUTPUT, " done ^d times,", MeterPointer!(Meter + 1))
		PrintTime (MeterPointer!Meter / MeterPointer!(Meter + 1))
		WriteS (" average,")
	     $)
	PrintPercent (Meter)
     $)
and PrintTime (t) be
     $(	let Unit, Mult = "micro", 1
	if t ge Mult * 1000 do Unit, Mult := "milli", 1000
	if t ge Mult * 1000 do Unit, t := "", t / 1000
	Writech (OUTPUT, '*s')
	PrintFraction (t, Mult)
	Format (OUTPUT, " ^sseconds", Unit)
     $)
and PrintPercent (Meter) be
     $(	Writech (OUTPUT, '*s')
	let T = MeterPointer!(Meter + 2) / 1000
	if T = 0 do T := 1
	PrintFraction (MeterPointer!Meter / T, 10)
	WriteS (OUTPUT, "%.*n")
     $)
and PrintFraction (R, Mult) be
     $(	let F = R * 201 / Mult / 2
	WriteN (OUTPUT, F / 100)
	if F < 1000 & Mult > 1 do
	     $(	Writech (OUTPUT, '.')
		Writech (OUTPUT, '0' + (F / 10 rem 10))
		if F < 100 & Mult > 10 do Writech (OUTPUT, '0' + (F rem 10))
	     $)
     $)
