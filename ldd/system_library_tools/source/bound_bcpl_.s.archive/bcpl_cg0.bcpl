//  Initialization and termination code for the code generator phase.
//  Last modified on 06/06/74 at 18:21:14 by R F Mabee.
//  Revisions for 6180 installed in Version 3.4, R F Mabee.
//  First installed as part of bcpl_trans0 with Version 2.7 by R F Mabee.

//  Copyright (c) 1974 by Massachusetts Institute of Technology and Honeywell Information Systems, Inc.

//  General permission is granted to copy and use this program, but not to sell it, provided that the above
//  copyright statement is given.  Contact Information Processing Services, MIT, for further information.
//  Please contact R F Mabee at MIT for information on this program and versions for other machines.

get "bcpl_cg_head"
get "bcpl_metering_head"

let CgInit () be
     $(	NewLiteralsList, OldLiteralsList := 0, 0

	LabTable := Newvec (LabTableSize)
	for i = 0 to LabTableSize do LabTable!i := 0

	if Symbols do
	     $(	SymtabFirst := Newvec (SymtabSize)
		SymtabV, SymtabP := SymtabFirst, 2
	     $)
	if LineMap do
	     $(	LineMapFirst := Newvec (1)
		LineMapFirst!0 := 1
		LineMapList, LineMapLength := LineMapFirst, 1
	     $)

	CodeFirst := Newvec (CodeSize)
	CodeV, CodeP := CodeFirst, 2
	BeginSection (0)

	LinkList, MainEntriesList := 0, 0
	CgTempList := 0
	LabMaxSSP, MaxSSP := 0, 0
	if Crep do
	     $(	LabMaxSSP := Nextparam ()
		DefineLab (LabMaxSSP, 0)		//  To prevent useless error message.
	     $)
	LabMaxArg, MaxArgOffset := 0, 0
	SaveSpaceSize := Machine = 645 -> 4, 2
	StackRefTag := Machine = 645 -> Sp | X1, Sb | X1
	RegisterTemps, RegisterUsage := Newvec (NumberOfRegisters), Newvec (NumberOfRegisters)
	for i = 0 to NumberOfRegisters do RegisterTemps!i, RegisterUsage!i := 0, 0
	UsageCounter := 0

	Jumpsw := not Crep
	DeferredJumpLabel := 0
	EntryLabel, GetLpLabel := 0, 0
	Param, Reloc, Comment := 0, 0, 0
	IndicatorsSetBy := 0
     $)

and FinishText (StaticList, EntriesList) be
     $(	OutLiterals ()
	if Crep do Listing := false	//  Avoid lengthy, useless output if in online-debug mode.
	if GetLpLabel ne 0 do WriteGetlp ()
	if EntryLabel ne 0 do WriteEntry ()
	Jumpsw := false
	TextLength := LC
	if (LC & 1) ne 0 do OutW2 (0, "padding")
	TextRelbits := SaveRelbits ()
	TotalWords := LC

	BeginSection (0)
	WriteDefs (EntriesList)
	DefsLength := LC
	if (LC & 1) ne 0 do OutW2 (0, "padding")
	DefsRelbits := SaveRelbits ()
	TotalWords := TotalWords + LC
	DefsRelbits := 0		//  Discard, not currently needed for new-format object segment.

	BeginSection (0)
	WriteLinkage (StaticList)
	LinkageLength := LC
	if (LC & 1) ne 0 do OutW2 (0, "padding")
	LinkageRelbits := SaveRelbits ()
	TotalWords := TotalWords + LC

	BeginSection (0)
	WriteSymbol ()			//  Counts bits in TextRelbits, etc.
	SymbolRelbits := SaveRelbits ()
	BeginSection (LC)			//  To Multics this is a part of the symbol section without relbits.
	WriteRelBits ()
	SymbolLength := LC
	SaveRelbits ()			//  For listing - not part of object segment.
	TotalWords := TotalWords + LC

	BeginSection (TotalWords)		//  Use absolute location counter for object map.
	WriteObjectMap (TotalWords)
	SaveRelbits ()			//  For listing - not part of object segment.
	TotalWords := LC

	if Listing do WriteS (OUTPUT, "*tend*n")
	CodeV!0, CodeV!1 := 0, CodeP

//  Fill in final addresses for all label references in text.
	let p = CodeFirst
	until p = 0 do
	     $(	for i = 2 to p!1 - 3 by 3 do switchon p!i & Right into
		     $(	case CodeSwitch:
			case InstructionSwitch:
			case DataSwitch:
				let Param = p!i rshift Left
				if Param ne 0 do
				     $(	let N = LookupLabel (Param)
					if N = 0 do CGreport (UndefLab, Param)
					p!(i + 1) := p!(i + 1) + (N lshift 18)
				     $)
				LC := LC + 1
				loop

			case LineCountSwitch:
				LineCount := p!(i + 1)
				loop

			case LabelSwitch:
				if LC ne p!(i + 2) do CGreport (PhaseError, "FinishText")
				loop

			case SectionSwitch:
				LC := p!(i + 1)
			default:
		     $)
		p := p!0
	     $)
     $)
and SaveRelbits () = valof
     $(	if AbsRelBits > 0 do PutAbsBits ()
	RelbitsList!1 := 0
	resultis List2 (RelbitsLength * 36 + RelbitsOffset, RelbitsFirst)
     $)
and BeginSection (NewLC) be
     $(	LC := NewLC
	RelbitsFirst := Newvec (1)
	RelbitsFirst!0 := 0
	RelbitsList := RelbitsFirst
	RelbitsOffset, RelbitsLength, AbsRelBits := 0, 0, 0
	PutCode (SectionSwitch, NewLC, RelbitsList)	//  So listing will agree.
     $)

let BuildObject (s) = valof
     $(	let p, LC = CodeFirst, 0
	until p = 0 do
	     $(	for i = 2 to p!1 - 3 by 3 do switchon p!i & Right into
		     $(	case CodeSwitch:
			case InstructionSwitch:
			case DataSwitch:
				s!LC := p!(i + 1)
				LC := LC + 1
			default:
		     $)
		p := p!0
	     $)
	resultis LC * 36
     $)

and WriteObjectListing () be
     $(	let p = CodeFirst
	until p = 0 do
	     $(	for i = 2 to p!1 - 3 by 3 do ListCodeItem (lv p!i)
		p := p!0
	     $)
     $)
