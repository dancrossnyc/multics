//  Miscellaneous tree-building routines.
//  Last modified on 06/06/74 at 18:03:09 by R F Mabee.
//  Installed on 6180 as Version 3.4, R F Mabee.
//  First installed on 645 as Version 2.7, R F Mabee.

//  Copyright (c) 1974 by Massachusetts Institute of Technology and Honeywell Information Systems, Inc.

//  General permission is granted to copy and use this program, but not to sell it, provided that the above
//  copyright statement is given.  Contact Information Processing Services, MIT, for further information.
//  Please contact R F Mabee at MIT for information on this program and versions for other machines.

get "bcpl_cae_head"

let Rblock (Rbody, Arg) = valof
     $(	unless Symb = SECTBRA_S do
		test Symb = SECTBEGIN_S
		then DictionaryEntry := 0		//  Ignore "tag" for keyword _b_e_g_i_n.
		or   $(	CaeReport (BlockExpected)
			resultis Rbody (Arg)
		     $)
	let Tag = DictionaryEntry
	Nextsymb ()
	let A = Rbody (Arg)
	unless Symb = SECTKET_S do
		test Symb = SECTEND_S
		then DictionaryEntry := 0		//  As above.
		or   $(	CaeReport (MissingSECTKET)
			resultis A
		     $)
	if Tag = DictionaryEntry do Nextsymb ()		//  If tag on bracket is same string.
	resultis A
     $)

let Rname () = valof
     $(	unless Symb = NAME_S do
	     $(	CaeReport (NameExpected)
		resultis ErrorNode
	     $)
	let x = DictionaryEntry
	Nextsymb ()
	resultis x
     $)
and Rnamelist (PermitREP) = GetCommaNode (Rname, 0, PermitREP)
and GetCommaNode (F, x, PermitREP) = valof
     $(	let Op = LineCount lshift Left | COMMA_S
	let v, i, Max = vec 20, 0, 20
	     $(	i := i + 1
		v!i := F (x)
		if Symb = REP_S & PermitREP do
		     $(	let Xop = LineCount lshift Left | REP_S
			Nextsymb ()
			v!i := List3 (Xop, v!i, Rexp (0))
		     $)
		unless Symb = COMMA_S break
		Nextsymb ()
		if i ge Max do
		     $(	let w = Newvec (Max * 2)
			for j = 1 to i do w!j := v!j
			if Max > 20 do Freevec (v, Max)
		v, Max := w, Max * 2
		     $)
	     $)	repeat
	if i = 1 resultis v!1
	let r = Newvec (i + 1)
	for j = 1 to i do r!(j + 1) := v!j
	r!0, r!1 := Op, i
	if Max > 20 do Freevec (v, Max)
	resultis r
     $)
and ReadList (PermitREP) = GetCommaNode (Rexp, 0, PermitREP)

let Rdef () = valof
     $(	let A, B, C = nil, nil, nil
	let Lc = LineCount lshift Left
	A := Rnamelist (false)
	test Symb = RBRA_S
	then $(	unless (A!0 & Right) = NAME_S do CaeReport (NameExpected)
		Nextsymb ()
		B := 0
		if Symb = NAME_S do B := Rnamelist (true)
		test Symb = RKET_S
		then Nextsymb ()
		or CaeReport (MissingRKET)
		let Ll = LabelList
		LabelList := 0
		let m, Op = 0, Symb
		Nextsymb ()
		test Op = BE_S
		then $(	m := Symb
			if m = MAIN_S do Nextsymb ()
			C := Rcom (8)
			Lc := Lc logor RTDEF_S
		     $)
		or   $(	unless Op = VALDEF_S do CaeReport (MalformedDeclaration)
			C := Rexp (0)
			Lc := Lc logor FNDEF_S
		     $)
		A := List6 (Lc, A, B, C, LabelList, m)
		LabelList := Ll
	     $)
	or   $(	unless Symb = VALDEF_S do CaeReport (MalformedDeclaration)
		Nextsymb ()
		A := List3 (VALDEF_S logor Lc, A, ReadList (true))
	     $)
	unless Symb = AND_S resultis A
	Lc := LineCount lshift Left
	Nextsymb ()
	B := Rdef ()
	resultis List3 (AND_S logor Lc, A, B)
     $)

let Rdeclbody (Op) = valof
     $(	let Match = Op = GLOBAL_S -> COLON_S, VALDEF_S
	let A, B, C = nil, nil, 0
	     $(	A := Rname ()
		test Symb = Match
		then $(	Nextsymb ()
			B := Rexp (0)
		     $)
		or   $(	unless Op = EXTERNAL_S do CaeReport (MalformedDeclaration)
			B := 0
		     $)
		C := List4 (CONSTDEF_S logor LineCount lshift Left, A, B, C)
		unless Symb = SEMICOLON_S break
		Nextsymb ()
	     $)	repeat
	resultis C
     $)

let CAE () = valof
     $(	LabelList := 0
	ErrorNode := List1 (ERROR_S)

	let A = Rcom (0)
	unless LabelList = 0 do A := List3 (LABDEF_S, A, LabelList)	//  Make dummy block for left-over labels.

	unless Symb = ENDPROG_S do
	     $(	CaeReport (PrematureTermination)
		Nextsymb () repeatuntil Symb = ENDPROG_S
	     $)
	resultis A
     $)
