//  Expression evaluation routines.
//  Last modified on 06/06/74 at 18:26:51 by R F Mabee.
//  Prepared for installation as part of Version 3.4 by R F Mabee.
//  Greatly revised during 6180 bootstrap to simplify interface to code generator.
//  First installed as Version 2.7, by R F Mabee.

//  Copyright (c) 1974 by Massachusetts Institute of Technology and Honeywell Information Systems, Inc.

//  General permission is granted to copy and use this program, but not to sell it, provided that the above
//  copyright statement is given.  Contact Information Processing Services, MIT, for further information.
//  Please contact R F Mabee at MIT for information on this program and versions for other machines.

get "bcpl_trans_head"
get "bcpl_metering_head"


let CompileExpression (Result, x) be
     $(	let UsageTemp = nil
	if Metering do UsageTemp := SaveOldUsage ()
	let Op = x!0 & Right
	switchon Op into
	     $(	default:	Transreport (UnrecognizedExpression, x)
		case NIL_S:
			endcase

		case NAME_S:
		case NUMBER_S:
		case CHARCONST_S:
		case STRINGCONST_S:
		case CONSTANT_S:
		case TRUE_S:
		case FALSE_S:
		case LV_S:
		case VEC_S:
		case LIST_S:
		case TABLE_S:
		case LOCAL_S:
			Monadic (ASSIGN_S, Result, x)
			endcase

		case POS_S: case POS_F:
		case NEG_S: case NEG_F:
		case NOT_S:
			if Optimize then if IsConst (x) goto AssignConstant
			Monadic (Op, Result, x!1)
			endcase

		AssignConstant:
			Monadic (ASSIGN_S, Result, x)
			endcase


		case PLUS_S: case PLUS_F:
		case MINUS_S: case MINUS_F:
		case MULT_S: case MULT_F:
		case DIV_S: case DIV_F:
		case REM_S:
		case LOGOR_S:
		case LOGAND_S:
		case EQV_S:
		case NEQV_S:
			if Optimize then if IsConst (x) goto AssignConstant
			     $(	let Order = DecideOrder (Result, x!1, x!2)
				and Desc1, Desc2, Desc3 = vec DescSize, vec DescSize, vec DescSize
				for i = 1 to 3 do
				     $(	test (Order & $81) ne 0
					then CompileLmode (Result, Desc1)
					or test (Order & $82) ne 0
					   then CompileOperand (x!1, Desc2)
					   or CompileOperand (x!2, Desc3)
					Order := Order rshift 3
				     $)
				GenerateDiadicOperator (Op, Desc1, Desc2, Desc3)
				endcase
			     $)

		case LSHIFT_S:
		case RSHIFT_S:
		case VECAP_S:
			CompileWithOffset (Op, Result, x!1, x!2)
			endcase

		case RV_S:
			     $(	let Zero = list CONSTANT_S, 0
				CompileWithOffset (VECAP_S, Result, x!1, Zero)
				endcase
			     $)

		case REL_S:    $(	let T, F = TRUE_S, FALSE_S
				let Xprime = list COND_S, x, lv T, lv F
				CompileExpression (Result, Xprime)
				endcase
			     $)

		case COND_S:
			if Optimize then if IsConst (x!1) do
			     $(	let B = Evalconst (x!1)
				CompileExpression (Result, (B -> x!2, x!3))
				endcase
			     $)

			     $(	let L, M = Nextparam (), Nextparam ()
				GenerateResultBlock ()
				TransConditional (x!1, false, L)
				SetResult (x!2)
				GenerateJump (M)
				GenerateLabel (L)
				SetResult (x!3)
				GenerateLabel (M)
				ClaimResult (Result)
				endcase
			     $)

		case VALOF_S:
			     $(	let s = SSP
				let Rl, Rf = ValofLabel, ValofFlag
				ValofLabel, ValofFlag := Nextparam (), true
				GenerateResultBlock ()
				Transbody (x!1)
				GenerateLabel (ValofLabel)
				ClaimResult (Result)
				ValofLabel, ValofFlag := Rl, Rf
				ResetSSP (s)
				endcase
			     $)

		case FNAP_S:
			     $(	let Desc1, Desc2 = vec DescSize, vec DescSize
				test (Result!0 & Right) = NAME_S
				then $(	CompileLmode (Result, Desc1)
					TransFnap (Desc1, x!1, x!2)
				     $)
				or   $(	let T = MakeTemp ()
					CompileLmode (T, Desc1)
					TransFnap (Desc1, x!1, x!2)
					Monadic (ASSIGN_S, Result, T)
				     $)
				endcase
			     $)
	     $)
	if Metering do RecordUsage (CompileExpression_Meter, UsageTemp)
     $)
and Monadic (Op, Result, x) be
     $(	let Desc1, Desc2 = vec DescSize, vec DescSize
	and Order = ChooseOrder (CountTemporaries (Result), CountTemporaries (x))
	if Order do CompileLmode (Result, Desc1)
	CompileOperand (x, Desc2)
	unless Order do CompileLmode (Result, Desc1)
	GenerateMonadicOperator (Op, Desc1, Desc2)
     $)
and ChooseOrder (a, b) = a = b -> (RandomI () & $81) = 0, a > b
and DecideOrder (a, b, c) = valof
     $(	let Min, Max = 0, 0
	and T = list CountTemporaries (a), CountTemporaries (b), CountTemporaries (c)
	for i = 1 to 2 test ChooseOrder (T!i, T!Max) then Max := i
		or unless ChooseOrder (T!i, T!Min) do Min := i
	if Min = Max do Min := (Max + 1) rem 3
	let Middle = 3 - Min - Max
	resultis ($81 lshift (Min + 6)) | ($81 lshift (Middle + 3)) | ($81 lshift Max)
     $)

and SetResult (x) be
     $(	let Desc = vec DescSize
	CompileOperand (x, Desc)
	GenerateResultValue (Desc)
     $)
and ClaimResult (x) be
     $(	let T, Desc = MakeTemp (), vec DescSize
	CompileLmode (T, Desc)
	GenerateClaimResult (Desc)
	Monadic (ASSIGN_S, x, T)
     $)

and CompileOperand (x, Desc) be
     $(	let Op = x!0 & Right
	switchon Op into
	     $(	case NAME_S:
			let T = Cellwithname (x)
			Desc!0, Desc!1, Desc!2 := T!1, T!2, x!1
			if Desc!0 = LOCAL_S do
			     $(	unless (Desc!1 rshift Left) = RtdefNesting do Transreport (FreeVar, x)
				Desc!1 := Desc!1 & Right
			     $)
			return

		case LOCAL_S:
		case TEMP_S:
			Desc!0, Desc!1, Desc!2 := Op, x!1, 0
			return

		case NUMBER_S:
		case CHARCONST_S:
		case STRINGCONST_S:
			Desc!0, Desc!1, Desc!2 := Op, x!1, x!1
			return

		case CONSTANT_S:
			Desc!0, Desc!1, Desc!2 := CONSTANT_S, x!1, 0
			return

		case TRUE_S:
			Desc!0, Desc!1, Desc!2 := TRUE_S, true, "true"
			return

		case FALSE_S:
			Desc!0, Desc!1, Desc!2 := FALSE_S, false, "false"
			return

		case LV_S:
			CompileLmode (x!1, Desc)
			return

		case VEC_S:
			let n = Evalconst (x!1)
			if n < 0 do
			     $(	Transreport (NegVector, x!1)
				n := 0
			     $)
			let p = AllocateLocal (n + 1)
			Desc!0, Desc!1, Desc!2 := LV_LOCAL, p, "a vector"
			return

		case LIST_S:
			p := AllocateLocal (ListSize (x!1))
			WalkList (x!1, LoadListItem, p)
			Desc!0, Desc!1, Desc!2 := LV_LOCAL, p, "a list"
			return

		case TABLE_S:
			n := ListSize (x!1)
			p := TableCell
			TableCell := Newvec (n * 2)
			TableCell!0 := n
			WalkList (x!1, StoreTableItem, 0)
			Desc!0, Desc!1, Desc!2 := TABLE_S, TableCell, "a table"
			TableCell := p
			return

		default:	if Optimize then if IsConst (x) do
			     $(	Desc!0, Desc!1, Desc!2 := CONSTANT_S, Evalconst (x), 0
				return
			     $)
			let Result = MakeTemp ()
			CompileExpression (Result, x)
			CompileOperand (Result, Desc)
			return
	     $)
     $)
and LoadListItem (x, p) be
     $(	let Cell = list LOCAL_S, p
	CompileExpression (Cell, x)
     $)
and StoreTableItem (x, n) be
	PartialEvalconst (x, lv TableCell!(n * 2 + 1))

and CompileLmode (x, Desc) be
  switchon x!0 & Right into
     $(	case RV_S:
		CompileOperand (x!1, Desc)
		return

	case VECAP_S:
		let Result = MakeTemp ()
		CompileWithOffset (LVECAP_S, Result, x!1, x!2)
		CompileOperand (Result, Desc)
		return

	case NAME_S:
		let T = Cellwithname (x)
		Desc!1, Desc!2 := T!2, x!1
		Desc!0 := valof switchon T!1 into
		     $(	case GLOBAL_S:
				resultis LV_GLOBAL
			case STATIC_S:
				resultis LV_STATIC
			case LOCAL_S:
				unless (Desc!1 rshift Left) = RtdefNesting do Transreport (FreeVar, x)
				Desc!1 := Desc!1 & Right
				resultis LV_LOCAL
			default:	Transreport (LmodeRequired, x)
				resultis T!1
		     $)
		return

	case LOCAL_S:
	case TEMP_S:
		Desc!0, Desc!1, Desc!2 := ((x!0 & Right) = LOCAL_S -> LV_LOCAL, LV_TEMP), x!1, 0
		return

	default:	Transreport (LmodeRequired, x)
		CompileOperand (x, Desc)
     $)

and CompileWithOffset (Op, Result, a, b) be
     $(	let Desc1, Desc2, Desc3 = vec DescSize, vec DescSize, vec DescSize
	and Order = DecideOrder (Result, a, b)
	and Offset = 0
	for i = 1 to 3 do
	     $(	test (Order & $81) ne 0
		then CompileLmode (Result, Desc1)
		or test (Order & $82) ne 0
		   then CompileOperand (a, Desc2)
		   or CompileOffsetOperand (b, Desc3, lv Offset)
		Order := Order rshift 3
	     $)
	GenerateOffsetOperator (Op, Desc1, Desc2, Desc3, Offset)
     $)
and CompileOffsetOperand (x, Desc, LvN) be
     $(	let Op = Op
	switchon Op into
	     $(	case PLUS_S:
			if Optimize then if IsConst (x!1) do
			     $(	CompileOffsetOperand (x!2, Desc, LvN)
				rv LvN := EvaluateOperator (PLUS_S, Evalconst (x!1), rv LvN)
				endcase
			     $)

		case MINUS_S:
			if Optimize then if IsConst (x!2) do
			     $(	CompileOffsetOperand (x!1, Desc, LvN)
				rv LvN := EvaluateOperator (Op, rv LvN, Evalconst (x!2))
			endcase
			     $)

		default:	if Optimize then if IsConst (x) do
			    $(	Desc!0, Desc!1, Desc!2 := CONSTANT_S, 0, 0
				rv LvN := Evalconst (x)
				endcase
			     $)
			CompileOperand (x, Desc)
		rv LvN := 0
	     $)
     $)
