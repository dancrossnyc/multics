//  These routines generate the symbol section and object map.
//  Last modified on 06/06/74 at 18:23:54 by R F Mabee.
//  Modified for 6180 conversion, and installed as Version 3.4 by R F Mabee.
//  First installed as Version 2.7, R F Mabee.

//  Copyright (c) 1974 by Massachusetts Institute of Technology and Honeywell Information Systems, Inc.

//  General permission is granted to copy and use this program, but not to sell it, provided that the above
//  copyright statement is given.  Contact Information Processing Services, MIT, for further information.
//  Please contact R F Mabee at MIT for information on this program and versions for other machines.

get "bcpl_cg_head"
get "bcpl_opcodes"

global
     $(	Strings : GlobalTemp  $)


let LineMapLength () = valof
     $(	LineMapList!1 := 0
	let q, l = LineMapFirst, 0
	until q = 0 do l, q := l + 1, q!1
	resultis l + 1
     $)
and WriteLineMap (MapL) be
     $(	Complab (MapL)
	let l = LineMapLength () - 1
	OutW2 (TextLength lshift Left logor l, "text length, map entry count")
	let q = LineMapFirst
	until q = 0 do
	     $(	OutW (q!0)
		q := q!1
	     $)
     $)
and SymbolTableLength () = 1
and WriteSymbolTable (SymL) be
     $(	Complab (SymL)
	OutW2 (0, "no symbol table implemented")
     $)

//  This routine writes the symbol section except for the relocation bits at the end.
//  LC must be zero at entry.

let WriteSymbol () be
     $(	SectionHeader ("*fSymbol section header")
	let SymL = Symbols -> Nextparam (), 0
	and MapL = LineMap -> Nextparam (), 0
	let Smap = 20			//  Number of words in fixed-format part of header below; must be even.
	SymbolLength := Smap + 2 + FileCount * 4 + 4
	Strings := vec 50
	Strings!0 := 0
	OutW2 (1, "version number of header structure")
	OutAlignedString ("symbtree")			//  Block type.
	OutW2 (CompilerVersionNumber, "compiler version number")
	OutW2 (CompilerDTM!0, "date/time compiler modified")
	OutW2 (CompilerDTM!1, CompilerDTMString)
	OutW2 (TimeNow!0, "time of this compilation")
	OutW2 (TimeNow!1, TimeNowString)
	OutAlignedString ("bcpl    ")			//  Compiler name.
	OutW2 (RemoteString (CompilerVersionString), "compiler version name - pointer, length")
	OutW2 (RemoteString (UserID), "user id - pointer, length")
	OutW2 (RemoteString (OptionString), "comment string - pointer, length")
	OutW2 (2 lshift Left | 2, "text and linkage boundaries")

	let w = vec 50
	for i = 0 to FileCount do w!i := RemoteString (FilesInfo!(i * 4))
	let Tree = 0
	if Symbols | LineMap do
	     $(	Tree := SymbolLength
		SymbolLength := SymbolLength + 1		//  For block header.
		if Symbols do SymbolLength := SymbolLength + SymbolTableLength ()
		if LineMap do SymbolLength := SymbolLength + LineMapLength ()
	     $)
	OutW2 (Smap lshift Left | Tree, "source map, symbol tree root")
	let Tlen, Llen = CountRelbits (TextRelbits), CountRelbits (LinkageRelbits)
	Reloc := RelNegSymbol lshift Left			//  section_header_pointer only item not self-relocating.
	OutW2 (SymbolLength, "section header pointer, block size")
	OutW2 (SymbolLength, "next block pointer, rel_text")
	OutW2 (SymbolLength + Tlen, "rel_def, rel_link")
	OutW2 (SymbolLength + Tlen + Llen lshift Left | SymbolLength, "rel_symbol, default truncate")
	OutW2 (Smap lshift Left, "optional truncate, unused")

//  End of fixed format header.  Rest is unstructured, pointed to by items above.

	OutW2 (1, "source files map: version number")
	OutW2 (FileCount + 1, "                  number of files")
	for i = 0 to FileCount do
	     $(	let Info = lv FilesInfo!(i * 4)
		OutW2 (w!i, FileNames!i)
		OutW2 (Info!1, "last modified on")		//  Unique ID.
		OutW2 (Info!2, MakeTimeString (lv Info!2))	//  DTM.
		OutW (Info!3)
	     $)
	for i = 1 to Strings!0 do OutAlignedString (Strings!i)

	if Symbols | LineMap do
	     $(	SectionHeader ("*fSymbol table block")
		Param := SymL
		OutW2 (LineMap -> LC + 1, 0, "symbol table pointer, line map pointer")

		if LineMap do WriteLineMap (MapL)
		if Symbols do WriteSymbolTable (SymL)
	     $)

	unless LC = SymbolLength do CGreport (PhaseError, "WriteSymbol")
     $)

and RemoteString (s) = valof
     $(	let l = Length (s)
	let r = SymbolLength lshift Left | l
	SymbolLength := SymbolLength + (l + 3) / 4
	Strings!0 := Strings!0 + 1
	Strings!(Strings!0) := s
	resultis r
     $)
and OutAlignedString (s) be
     $(	let v = vec Vmax
	Concatenate (v, Vmax, "*"", s, "*"")
	Comment := StoreString (v)
	Unpackstring (s, v)
	let Len = v!0
	v!(Len + 1), v!(Len + 2), v!(Len + 3) := '*s', '*s', '*s'
	for i = 1 to Len by 4 do OutW (v!i lshift 27 | v!(i + 1) lshift 18 | v!(i + 2) lshift 9 | v!(i + 3))
     $)

and OutRel (p, c) be
     $(	if p = 0 return
	SectionHeader (c)
	OutW2 (2, "version number of rel-bits structure")
	OutW2 (p!0, "length in bits")
	p := p!1
	until p = 0 do
	     $(	OutW (p!0)
		p := p!1
	     $)
     $)
and CountRelbits (p) = valof
     $(	if p = 0 resultis 0
	let n = 0
	n, p := n + 1, p!1 repeatuntil p = 0
	resultis n + 1
     $)
and WriteRelBits () be
     $(	SectionHeader ("*fRelocation information")
	OutRel (TextRelbits, "*ntext section relocation bits")
	OutRel (DefsRelbits, "*ndefinitions section relocation bits")
	OutRel (LinkageRelbits, "linkage relocation bits")
	OutRel (SymbolRelbits, "symbol relocation bits")
     $)

let WriteObjectMap (AbsLC) be
     $(	SectionHeader ("*fObject map")
	let t, d, l = TextLength + 1 & Even, DefsLength + 1 & Even, LinkageLength + 1 & Even
	unless t + d + l + SymbolLength = AbsLC do CGreport (PhaseError, "WriteObjectMap")
	OutW2 (1, "version number of object_map structure")
	OutAlignedString ("obj_map ")
	OutW2 (TextLength, "text offset, length")
	OutW2 (t lshift Left | DefsLength, "def offset, length")
	OutW2 (t + d lshift Left | LinkageLength, "link offset, length")
	OutW2 (t + d + l lshift Left | SymbolLength, "symbol offset, length")
	OutW2 (0, "break map offset, length")
	OutW2 ($834 lshift 30, "flags: ^bound, relocatable, procedure, standard")
	OutW2 (AbsLC lshift Left, "object map pointer, unused")		//  Last word of segment.
     $)
