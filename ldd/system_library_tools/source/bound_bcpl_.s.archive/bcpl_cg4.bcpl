//  ******************************************************
//  *                                                    *
//  *                                                    *
//  * Copyright (c) 1972 by Massachusetts Institute of   *
//  * Technology and Honeywell Information Systems, Inc. *
//  *                                                    *
//  *                                                    *
//  ******************************************************

//  Canned code sequences (call/save/return, etc.).
//  Modified March 1982 by C. Hornig to set stack_frame.next_sp properly.
//  Modified on 06/14/74 at 01:13:39 by R F Mabee.
//  Converted for 6180 operation and installed in Version 3.4, R F Mabee.
//  First installed in Version 2.7 by R F Mabee.

//  Copyright (c) 1974 by Massachusetts Institute of Technology and Honeywell Information Systems, Inc.

//  General permission is granted to copy and use this program, but not to sell it, provided that the above
//  copyright statement is given.  Contact Information Processing Services, MIT, for further information.
//  Please contact R F Mabee at MIT for information on this program and versions for other machines.

get "bcpl_cg_head"
get "bcpl_opcodes"

let NewSSP (S) be
	if S > MaxSSP do MaxSSP := S

and Compentry (L, ID, FunctSw, MainSw) be
     $(	Jumpsw := false
	MaxSSP, LabMaxSSP := 0, Nextparam ()
	MaxArgOffset, LabMaxArg := 0, Nextparam ()
	let v = vec Vmax
	Concatenate (v, Vmax, "*fBegin text of ", ID)
	SectionHeader (StoreString (v))
	Outstring (ID)
	if MainSw do		//  Also need def ptr before entry.
	     $(	let M = Nextparam ()
		MainEntriesList := List4 (L, M, ID, MainEntriesList)
		Reloc, Param, Comment := RelDef lshift Left, M, "relative pointer to definition for entry"
		OutData (0)
	     $)
	Complab (L)
	Comment := "set lp to linkage section"
	test Machine = 645
	then $(	if GetLpLabel = 0 do GetLpLabel := Nextparam ()
		Outop2 (Tsx0, GetLpLabel)
	     $)
	or   $(	Outop3 (Epaq, 0, 0)
		Outop3 (Lprplp, 22, Sb | StarThenReg | Au)
	     $)

	if MainSw do
	     $(	if EntryLabel = 0 do EntryLabel := Nextparam ()
		Comment := "execute Multics save"
		Outop2 (Tsx0, EntryLabel)
	     $)
	Outop4 (Adlx1, 0, Bp, "BCPL save")
	test Machine = 645
	then $(	Outop3 (Stpbp, 0, StackRefTag)
		Outop3 (Stplp, 2, StackRefTag)
	     $)
	or   $(	Outop3 (Sprpbp, 0, StackRefTag)
		Outop3 (Sprplp, 1, StackRefTag)
	     $)
	Address, Tag, Param := 15, StackRefTag, LabMaxArg
	Outop (Eax0)
	Outop3 (Anx0, Mod16, Du)
	unless Machine = 645
	     do Outop3 (Stx0, 21, Sb)
	Comment := "end of save sequence*n"
	Outop3 (Stx0, 19, Sp)
     $)

and Compreturn (Desc) be
     $(	unless Desc = 0 do
	     $(	LoadRegister (Desc, Qr)
		DisclaimRegister (Desc)
	     $)
	test Machine = 645
	then Outop4 (Eapbp, 0, StackRefTag | Star, "bcpl return")
	or Outop4 (Lprpbp, 0, StackRefTag, "bcpl return")
	Outop3 (Sblx1, 0, Bp)
	test Machine = 645
	then Outop3 (Eaplp, 2, StackRefTag | Star)
	or Outop3 (Lprplp, 1, StackRefTag)
	Outop4 (Tra, 1, Bp, "end of return sequence")
	MaxSSP := MaxSSP + SaveSpaceSize + 1 & Even
	Equate (LabMaxSSP, MaxSSP)
	Equate (LabMaxArg, (MaxSSP > 256 -> MaxSSP, 256) + MaxArgOffset)		//  Don't reduce caller's sb|21.
	OutLiterals ()
	Jumpsw := true
     $)
and Equate (L, n) be
     $(	DefineLab (L, n)
	if Listing do Format (OUTPUT, "*tequ*tL^d,^d*n", L, n)
     $)

and CreateArglist (Nargs) be
	ArgCount, ArgLen := Nargs, Nargs + SaveSpaceSize
and StoreArg (i, Desc) be
     $(	let To = list LV_ARG_OUT, i, 0
	Store (Desc, To)
	DisclaimRegister (Desc)
     $)
and Compfnap (Result, F) be
     $(	SetupAddr (F)
	if F!0 = RTDEF_S do Address := Address + (Machine = 645 -> 1, 2)	//  Skip GETLP code.
	Outop (Tsbbp)
	Param := LabMaxSSP
	OutData (ArgCount)
	if ArgLen > MaxArgOffset do MaxArgOffset := ArgLen
	DisclaimRegister (F)
	unless Result = 0 do ClaimRegister (Qr, Result)
	IndicatorsSetBy := 0
     $)

and CreateSystemArglist (Nargs) be
     $(	ArgCount, ArgLen := Nargs, Nargs * 4 + 2
	let T = list Nargs lshift 19 | 4, Nargs lshift 19
	AddLiteral (T, 2, "arglist header", 2)
	Outop (Ldaq)
	Address, Tag, Param, Comment := 0, StackRefTag, LabMaxSSP, "arg count"
	Outop (Staq)
     $)
and StoreSystemArg (i, Arg, Offset, Type, Length, StringSw) be
     $(	if StringSw & Offset = 0 do Offset := Machine = 645 -> (table CONSTANT_S, 9, 0), (table CONSTANT_S, 18, 0)
	let Pr = LoadPointer (Arg, AnyPr)
	if Machine = 6180 & Offset ne 0 do
	     $(	let Xr = LoadIndex (Offset, AnyXr)
		Outop3 (Abd, 0, FormTag (Pr) | FormTag (Xr))
	     $)
	Address, Tag, Param := i * 2 + 2, StackRefTag, LabMaxSSP
	Outop (FormOpcode (Stpap, Pr))
	if Machine = 645 & Offset ne 0 do
	     $(	let q = LoadRegister (Offset, AorQr)
		Outop3 (FormOpcode (Als, q), 9, 0)
		Outop3 (FormOpcode (Ana, q), $8077000, Dl)
		Address, Tag, Param := i * 2 + 2, StackRefTag, LabMaxSSP
		Address, Tag, Param := i * 2 + 3, StackRefTag, LabMaxSSP
		Outop (FormOpcode (Orsa, q))
	     $)
	let ConstantPart, RegPart, CellOffset = 1 lshift 35, 0, 0
	test Length = 0
	then if StringSw do
	     $(	RegPart := GetRegister (AorQr)
		Outop3 (FormOpcode (Lda, RegPart), 0, FormTag (Pr))
		Outop3 (FormOpcode (Arl, RegPart), (Machine = 645 -> 27, 18), 0)
	     $)
	or test IsNumber (Length)
	then ConstantPart := ConstantPart | (EvalNumber (Length!0, Length!1) & $877777777)
	or   $(	RegPart := LoadRegister (Length, AorQr)
		Literal ($877777777, 0)
		Outop (FormOpcode (Ana, RegPart))
	     $)

	test IsNumber (Type)
	then ConstantPart := ConstantPart | (EvalNumber (Type!0, Type!1) lshift 29)
	or   $(	if RegPart ne 0 do
		     $(	CellOffset := ArgLen
			ArgLen := ArgLen + 1
			Address, Tag, Param := CellOffset, StackRefTag, LabMaxSSP
			Outop (FormOpcode (Sta, RegPart))
		     $)
		RegPart := LoadRegister (Type, AorQr)
		Outop3 (FormOpcode (Als, RegPart), 29, 0)
	     $)
	test RegPart = 0
	then AddLiteral (lv ConstantPart, 1, "descriptor", 0)
	or   $(	Literal (ConstantPart, 0)
		Outop (FormOpcode (Ora, RegPart))
		let Op = nil
		test CellOffset = 0
		then $(	CellOffset := ArgLen
			ArgLen := ArgLen + 1
			Op := Sta
		     $)
		or Op := Orsa
		Address, Tag, Param := CellOffset, StackRefTag, LabMaxSSP
		Outop (FormOpcode (Op, RegPart))
		Address, Tag, Param := CellOffset, StackRefTag, LabMaxSSP
	     $)
	Outop (FormOpcode (Eapap, Pr))
	Address, Tag, Param := i * 2 + ArgCount * 2 + 2, StackRefTag, LabMaxSSP
	Outop (FormOpcode (Stpap, Pr))
	DisclaimRegister (Arg)
	unless Offset = 0 do DisclaimRegister (Offset)
	DisclaimRegister (Type)
	unless Length = 0 do DisclaimRegister (Length)
     $)
and CompSystemCall (F) be
     $(	if ArgLen > MaxArgOffset do MaxArgOffset := ArgLen
	test Machine = 645
	then $(	Outop3 (Stb, 0, Sp)
		Outop3 (Sreg, 8, Sp)
	     $)
	or   $(	Outop3 (Sxl1, 8, Sp)		//  Save stack index in stack frame header.
		Outop3 (Stplp, 24, Sp)
	     $)
	LoadPointer (F, Bpr)
	Address, Tag, Param := 0, StackRefTag, LabMaxSSP
	Outop (Eapap)
	Outop4 (Tsblp, 30, Sb | Star, "Multics call operator")
	if Machine = 6180 do
	     $(	Outop3 (Lxl1, 8, Sp)
		Outop3 (Lprplp, 1, StackRefTag)
	     $)
	DisclaimRegister (F)
	IndicatorsSetBy := 0
     $)

and ResultBlockBegin () be
     $(	let New = Newvec (1)
	New!0, New!1 := ResultInfo, ResultInfoList
	ResultInfo, ResultInfoList := 0, New
     $)
and ResultSet (Desc) be
     $(	ResultInfo := LoadAppropriateRegister (Desc, ResultInfo)
	DisclaimRegister (Desc)
     $)
and ResultGet (Desc) be
     $(	ClaimRegister (ResultInfo, Desc)
	let Old = ResultInfoList
	ResultInfo, ResultInfoList := Old!0, Old!1
	Freevec (Old, 1)
     $)

and Compstring (s) be
     $(	let v = vec Vmax
	let Len = FormStringconst (s, v)
	AddLiteral (v, Len + 1, s, 0)
     $)
and Comptable (t) be
     $(	let v = Newvec (t!0)
	for i = 0 to t!0 - 1 do v!i := EvalNumber (t!(i * 2 + 1), t!(i * 2 + 2))
	AddLiteral (v, t!0, "a table", 2)
	Freevec (v, t!0)
     $)
let Compexternal (s) = valof
     $(	let p = LinkList
	until p = 0 do
	     $(	if EqualString (s, p!1) resultis p!2
		p := p!0
	     $)
	let L = Nextparam ()
	LinkList := List4 (LinkList, s, L, 0)
	resultis L
     $)
and Compfinish () be
	Outop4 (Tra, 34, Sb | Star, "Multics return")
and Compgoto (p) be
     $(	SetupAddr (p)
	Outop (Tra)
	DisclaimRegister (p)
     $)
