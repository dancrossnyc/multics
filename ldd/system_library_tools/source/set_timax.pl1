/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


set_timax: stm: proc;

/* program to set timax to allow higher usage of the processor by the user

   Usage:	set_timax n

   where "n" is the number of seconds to set timax to.  (A value
   of "0" will set it to the default: tc_data|timax.)

   coded by Roger Roach - April 26, 1971
   modified December, 1978 - P. B. Kelley - to call get_process_id_() 
							*/

dcl  arg char (arglen) based (argptr), argptr pointer,
    (arglen, ret_length, timax) fixed bin,
     code fixed bin (35),
     fnum float bin (27),
     ret_string char (120),
     ring_0_message char (ret_length) based (addr (ret_string)),
     bad_char char (1);

dcl  cu_$arg_ptr ext entry (fixed bin, ptr, fixed bin, fixed bin (35)),
     cv_float_ ext entry (char (*), fixed bin (35), float bin (27)),
     hphcs_$pxss_set_timax ext entry (bit (36), fixed bin),
    (com_err_, ioa_, ioa_$rs, phcs_$ring_0_message) ext entry options (variable),
     get_process_id_ ext entry returns (bit(36));
dcl  processid bit(36);
dcl  linkage_error condition;

	call cu_$arg_ptr (1, argptr, arglen, code);

	if code ^= 0 then do;
	     call com_err_ (code, "set_timax");
	     return;
	end;

	call cv_float_ (arg, code, fnum);

	if code ^= 0 then do;
	     bad_char = substr (arg, code, 1);
	     call com_err_ (0, "set_timax", "illegal character ""^a"" in argument ""^a"".", bad_char, arg);
	     return;
	end;

	timax = fnum * 1000000;

	if timax > 0
	     then call ioa_ ("setting timax to ^.1f seconds.", fnum);
	     else call ioa_ ("resetting timax to default.");

	processid = get_process_id_ ();

	on linkage_error begin;
	     revert linkage_error;
	     call com_err_ (0, "set_timax", "Insufficient access to reset timax.");
	     go to out;
	end;

	call hphcs_$pxss_set_timax (processid, timax);

	revert linkage_error;

	if timax > 0 then do;
	     call ioa_$rs ("setting timax to ^.1f seconds.", ret_string, ret_length, fnum);
	     call phcs_$ring_0_message (ring_0_message);
	end;
	else call phcs_$ring_0_message ("setting timax to default.");

out:
	return;

     end;
