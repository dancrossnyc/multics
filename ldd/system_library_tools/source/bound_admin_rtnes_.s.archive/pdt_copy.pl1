/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */







/****^  HISTORY COMMENTS:
  1) change(86-10-15,Parisek), approve(87-06-17,MCR7570),
     audit(87-06-15,Hirneisen), install(87-08-06,MR12.1-1066):
     Skip projects marked as renamed when scanning the SAT.
  2) change(88-09-15,Parisek), approve(88-09-28,MCR7996),
     audit(88-10-05,Hunter), install(88-10-07,MR12.2-1140):
     Implemented the copying of the hash table for pdts having them.
     This change originally coded by Paul M. Karagianis.
                                                   END HISTORY COMMENTS */



/* PDT_COPY - Procedure to copy the System Administrator's Table (SAT) and the Project Definition Tables (PDTs)
   from given directories to a special administrative directory.

   This procedure is called with three arguments:

   1) pathname of directory containing SAT ("from" dir )
   2) pathname of directory containing PDTs ("from" dir)
   3) pathname of the administrative directory into which the SAT and PDTs will be copied ("to" dir )

   Janice B. Phillipps, April 4, 1972		 */


pdt_copy: proc;

dcl (argp, cp_satp, cp_pdtp, htp, sp, satp, satep, pdtep, pdtp) ptr,
    (arglg, i, lth, llth, w) fixed bin,
     code fixed bin;

dcl (sat_dir, pdt_dir, cp_dir) char (168) aligned,
     pdt_name char (168) aligned;

/* procedures called in this program */

dcl  cu_$arg_ptr ext entry (fixed bin, ptr, fixed bin, fixed bin),
     com_err_ ext entry options (variable),
     expand_path_ ext entry (ptr, fixed bin, ptr, ptr, fixed bin),
     hcs_$initiate ext entry (char (*) aligned, char (*) aligned, char (*) aligned, fixed bin (1), fixed bin (2),
     ptr, fixed bin),
     hcs_$make_seg ext entry (char (*) aligned, char (*) aligned, char (*) aligned, fixed bin (5), ptr,
     fixed bin),
     hcs_$set_bc_seg ext entry (ptr, fixed bin, fixed bin),
     hcs_$terminate_noname ext entry (ptr, fixed bin),
     hcs_$truncate_seg ext entry (ptr, fixed bin, fixed bin),
     ioa_$rsnnl ext entry options (variable);


dcl (addr, addrel, null) builtin;

dcl  sat_zap (lth) fixed bin based,
     pdt_zap (llth) fixed bin based;
%page;

/* ======================================================= */

	call cu_$arg_ptr (1, argp, arglg, code);	/* get 1st arg, path of dir containing SAT */

	if code ^= 0 then do;
error:	     
	     call com_err_ (code, "pdt_copy", "");
	     return;
	end;
	call expand_path_ (argp, arglg, addr (sat_dir), null, code); /* get absolute path of SAT dir */
	if code ^= 0 then go to error;
	call hcs_$initiate (sat_dir, "sat", "", 0, 0, satp, code); /* get ptr to SAT header */
	if satp = null then go to error;
	call cu_$arg_ptr (2, argp, arglg, code);	/* get 2nd arg, path of dir containing PDTs */
	if code ^= 0 then go to error;
	call expand_path_ (argp, arglg, addr (pdt_dir), null, code); /* get absolute path of PDTs dir */
	if code ^= 0 then go to error;
	call cu_$arg_ptr (3, argp, arglg, code);	/* get 3rd arg, path to copy data bases into */
	if code ^= 0 then go to error;
	call expand_path_ (argp, arglg, addr (cp_dir), null, code); /* get absolute path of admin dir */
	if code ^= 0 then go to error;
	call hcs_$make_seg (cp_dir, "sat", "", 1011b, cp_satp, code);
	if cp_satp = null then go to error;

	lth = SAT_header_lth + (satp -> sat.current_size * SAT_entry_lth); /* copy SAT to admin dir */
	cp_satp -> sat_zap = satp -> sat_zap;

	do i = 1 to cp_satp -> sat.current_size;	/* find a PDT in "from" dir by looping thru SAT */
	     sp = addr (cp_satp -> sat.project (i));	/* get ptr to a project array */
	     if sp -> project.state ^= 0 & sp -> project.state ^= 3 then do;	                                                         /* if project active during the month, count it (do not include renamed projects either) */
		call ioa_$rsnnl ("^a.pdt", pdt_name, w, sp -> project.project_id); /* get name of proj and add ".pdt" */
		call hcs_$initiate (pdt_dir, pdt_name, "", 0, 0, pdtp, code);
		if pdtp = null then go to nonfaterr;	/* continue with other PDTs if find a bad one */
		call hcs_$make_seg (cp_dir, pdt_name, "", 1011b, cp_pdtp, code); /* each time get seg for copied PDT */
		if cp_pdtp = null then go to nonfaterr;	/* continue with other PDTs if find bad one */

		llth = PDT_header_lth + (pdtp -> pdt.current_size * PDT_entry_lth); /* copy PDT to admin dir */
		if pdt.ht_relp > 0 then do;	/* if there is a hash table */
		     htp = addrel (pdtp, pdt.ht_relp);
		     llth = llth + htable.loht;	/* then include it */
		end;
		cp_pdtp -> pdt_zap = pdtp -> pdt_zap;

		call hcs_$terminate_noname (pdtp, code); /* terminate each PDT as you finish */
		call hcs_$truncate_seg (cp_pdtp, llth, code);	/* waste not, want not */
		call hcs_$set_bc_seg (cp_pdtp, llth * 36, code);
		call hcs_$terminate_noname (cp_pdtp, code);
						/* terminate the copied PDT as you finish */
		go to skip;
nonfaterr:	call com_err_ (code, "pdt_copy", pdt_name);
	     end;					/* end of project conditional */
skip:	end;					/* end of project do loop: go back and get the next PDT */

	call hcs_$terminate_noname (satp, code);	/* terminate the SAT */
	call hcs_$terminate_noname (cp_satp, code);	/* terminate the copied SAT */
%page;
%include hashst;
%page;
%include pdt;
%page;
%include sat;
%page;
%include user_attributes;

     end pdt_copy;
