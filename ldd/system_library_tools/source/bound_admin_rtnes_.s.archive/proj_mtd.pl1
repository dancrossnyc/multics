/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* format: style4 */
proj_mtd: proc;

/* PROJ_MTD - month-to-date project usage report */
/* Modified Feb 1980 by M. B. Armstrong to implement multiple rate structures. */
/* Modified June 1982 by E. N. Kittlitz for user_attributes.incl.pl1 conversion. */

dcl  pdtp ptr,					/* ptr to pdt */
     pdtep ptr,					/* ptr to pdt entry */
     pp ptr,
     dkrate float bin,
     ft float bin,
     dummy (0:7) float bin,
     dcg float bin,
     regp float bin,
     (i, ec) fixed bin;
dcl  rs_number fixed bin;				/* rate structure index */
dcl  rs_count fixed bin;

dcl  get_wdir_ entry () returns (char (168) aligned),
     com_err_ entry options (variable),
     cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin),
     expand_path_ entry (ptr, fixed bin, ptr, ptr, fixed bin),
     hcs_$initiate entry (char (*) aligned, char (*) aligned, char (*) aligned,
	fixed bin, fixed bin, ptr, fixed bin),
     hcs_$terminate_noname entry (ptr, fixed bin),
     ioa_ entry options (variable),
     ioa_$rsnnl entry options (variable);
dcl  search_sat_$rs_number entry (char (*), fixed bin, fixed bin);
dcl  search_sat_$clean_up entry;
dcl  system_info_$prices_rs entry (fixed bin,
	(0:7) float bin, (0:7) float bin, (0:7) float bin, (0:7) float bin, float bin, float bin);
dcl  system_info_$max_rs_number entry (fixed bin);

dcl  (null, index, addr) builtin;

dcl  ff float bin init (0e0),
     kl fixed bin init (0),
     jj fixed bin,
     kk fixed bin init (0),
     ap ptr,
     al fixed bin,
     bchr char (al) unal based (ap),
     test char (12),
     star char (1) aligned,
     dirname char (168) aligned,
     pdt_dir char (168) aligned,
     pdt_name char (32) aligned;

/* ================================================= */

	call system_info_$max_rs_number (rs_count);	/* see if site has multiple rate structures */
	call cu_$arg_ptr (1, ap, al, ec);
	if ec ^= 0 then go to err;
	test = bchr;
	call cu_$arg_ptr (2, ap, al, ec);
	if ec = 0 then dirname = bchr;
	else dirname = "safe_pdts";
	call expand_path_ (addr (dirname), index (dirname, " ") - 1, addr (pdt_dir), null, ec);
	if ec ^= 0 then go to err;

	dirname = get_wdir_ ();
	call ioa_$rsnnl ("^a.pdt", pdt_name, i, test);
	call hcs_$initiate (pdt_dir, pdt_name, "", 0, 1, pdtp, ec);
	if pdtp = null then do;
err:	     call com_err_ (ec, "proj_mtd", "");
	     return;
	end;
	call hcs_$initiate (dirname, "projfile", "", 0, 1, pp, ec);
	if pp = null then go to err;
	do jj = 1 to projfile.nproj;
	     if id (jj) = test then go to found;
	end;
	call com_err_ (0, "proj_mtd", "projfile entry for ""^a"" missing", test);
	return;
found:
	if rs_count > 0 then do;			/* only if site has multiple rate structures */
	     call search_sat_$rs_number (test, rs_number, ec); /* get rate index */
	     if ec ^= 0 then do;
		call com_err_ (0, "proj_mtd", "While searching sat for project ""^a"".  pdt rate structure index (^d) used.",
		     test, pdt.rs_number);
		rs_number = pdt.rs_number;		/* if we cannot get the sat we'll go for second best */
	     end;
	end;
	else rs_number = 0;
	call system_info_$prices_rs (rs_number, dummy, dummy, dummy, dummy, dkrate, regp);
	call ioa_ ("Month to date report for project ^a", test);
	call ioa_ ("^/Name^25xlogins^5xcharge^/");
	do i = 1 to pdt.current_size;
	     pdtep = addr (pdt.user (i));
	     if user.state = 0 then go to skip;
	     if user.state = 2 then star = "*"; else star = " ";
	     call ioa_ ("^1a^29a^5d $^10.2f", star, user.person_id, user.logins, user.dollar_charge);
	     kk = kk + user.logins;
	     kl = kl + 1;
	     ff = ff + user.dollar_charge;
skip:	end;
	call hcs_$terminate_noname (pdtp, ec);
	call ioa_ ("^/^5d users^19x^5d $^10.2f", kl, kk, ff);

	ft = kl * regp;
	call ioa_ ("^/registration^24x$^10.2f", ft);

	dcg = disk_psec (jj) * dkrate;
	call ioa_ ("misc^32x$^10.2f", misc_charges (jj));
	call ioa_ ("disk^32x$^10.2f", dcg);
	call ioa_ ("^/Total^31x$^10.2f", ff + ft + misc_charges (jj) + dcg);
	call ioa_ ("");
	call hcs_$terminate_noname (pp, ec);

	if rs_count > 0 then call search_sat_$clean_up;	/* tidy up */
%page;
%include pdt;
%page;
%include projfile;
%page;
%include user_attributes;

     end;
