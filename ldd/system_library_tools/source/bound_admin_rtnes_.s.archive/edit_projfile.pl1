/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


edit_projfile: epro: procedure options (variable);

/* project file editor */

dcl (path, dn) char (168),				/* path and directory name */
     en char (32),					/* entry name */
     pj char (12) aligned,				/* project id for find */
    (j, np) fixed bin,				/* integers */
     ec fixed bin (35),
     num fixed bin,
     num24 fixed bin (24),
     code char (8),					/* change code */
     func char (8) aligned,				/* edit request */
     flg fixed bin,					/* flag from ask */
    (pp, ppp) ptr,					/* ptr to projfile */
     hp ptr,
     dtem char (8),
     ap ptr,					/* ptr to arg */
     bchr char (al) based (ap) unaligned,		/* pickup for arg */
     al fixed bin;					/* lth of arg */

dcl  projfile_zap (num24) fixed bin based;


dcl (ask_, ask_$ask_int, ask_$ask_cint,
     ask_$ask_n, ask_$ask_line, ask_$ask_clr) entry options (variable),
     com_err_ entry options (variable),
     convert_date_to_binary_ entry (char(*), fixed bin(71), fixed bin (35)),
     expand_pathname_ entry (char (*), char (*), char (*), fixed bin (35)),
     cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35)),
     ioa_ entry options (variable),
     date_time_ entry (fixed bin (71), char (*)),
     get_temp_segment_ entry (char (*), pointer, fixed bin (35)),
     release_temp_segment_ entry (char (*), pointer, fixed bin (35)),
     hcs_$initiate entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr, fixed bin (35)),
     hcs_$terminate_noname entry (ptr, fixed bin (35)),
     hcs_$set_bc entry (char (*), char (*), fixed bin (24), fixed bin (35));

dcl (clock, null, addr, substr) builtin;

%include projfile;



/* - - - - - - - - - - */

	call cu_$arg_ptr (1, ap, al, ec);		/* see if any args */
	if ec ^= 0 | al = 0				/* if not, then ... */
	then path = "projfile";			/* set up default */
	else path = bchr;				/* get pathname of projfile */

	call expand_pathname_ (path, dn, en, ec);
	if ec ^= 0 then do;
er:	     call com_err_ (ec, "edit_projfile", path);
	     return;				/* die */
	end;
	call hcs_$initiate (dn, en, "", 0, 1, ppp, ec);	/* Initiate real project file. */
	if ppp = null then go to er;
	if ppp -> projfile.version ^= PROJFILE_VERSION
	then do;
	     call com_err_ (0, "edit_projfile", "^a>^a version ^d is not current version ^d.", dn, en, projfile.version, PROJFILE_VERSION);
	     call hcs_$terminate_noname (ppp, (0));
	     return;
	end;
	     
	call get_temp_segment_ ("edit_projfile", pp, ec);
	if ec ^= 0 then go to er;
	np = ppp -> projfile.nproj;
	num24 = loph + np * lope;
	pp -> projfile_zap = ppp -> projfile_zap;
	call hcs_$terminate_noname (ppp, ec);

	if np = 0 then
	     call ioa_ ("WARNING: projfile is empty.");

cmain:	call ask_$ask_clr;				/* Clear input buffer. */
	j = np;					/* Set pointer to last entry */
main:	call ask_ ("type    ", func);			/* Ask for editing function. */

	if func = "f" then go to find;
	if func = "find" then go to find;

	if func = "c" then go to change;
	if func = "change" then go to change;

	if func = "p" then go to print;
	if func = "print" then go to print;

	if func = "file" then go to file;
	if func = "w" then go to file;
	if func = "q" then go to quit;
	if func = "quit" then go to quit;

	if func = "d" then go to delete;
	if func = "delete" then go to delete;

	if func = "n" then go to next;
	if func = "next" then go to next;

	if func = "a" then go to add;
	if func = "add" then go to add;

	if func = "t" then go to top;
	if func = "top" then go to top;

	if func = "help" then do;
	     call ioa_ ("Instructions:");
	     call ioa_ ("""f id""^-to find");
	     call ioa_ ("""c code val code val ... *"" to change");
	     call ioa_ ("""p -n-""^-to print");
	     call ioa_ ("""file""^-to file");
	     call ioa_ ("""a id""^-to add");
	     call ioa_ ("""n -n-""^-to go to next");
	     call ioa_ ("""t""^-to go to top");
	     call ioa_ ("""help""^-for instructions");
	     go to main;
	end;

	call ioa_ ("""^a"" illegal. Type ""help"" for instructions.", func);
	go to cmain;				/* Clear line buffer and go */

/* Search for an ID */

find:	call ask_ ("proj id ", pj);			/* Get project to search for. */
	if pj = id (j) then go to main;		/* Skip out if we're there. */

	do j = 1 to np;				/* Otherwise, look at all id's. */
	     if pj = id (j) then go to main;		/* ... */
	end;

	call ioa_ ("Project ""^a"" not found.", pj);	/* Missing. Gripe. */
	go to cmain;				/* Go and clear line buffer. */

/* Modify an entry */

change:	call ask_$ask_n (code, flg);			/* Peek to see if any more on line. */
	if flg = 0 then call ioa_ ("Type changes.");	/* If not, suggest something. */

clp:	call ask_ ("code    ", code);			/* Get a change code. */

	if code = "*" then go to main;		/* Star for done. */

	if code = "id" then do;			/* Change project id? */
	     call ask_ (code, id (j));
	end;
	else if code = "title" then do;		/* Change project title? */
	     call ask_$ask_line (code, title (j));
	end;
	else if code = "inv" then do;			/* Change investigator? */
	     call ask_$ask_line (code, inv (j));
	end;
	else if code = "inv_addr" then do;		/* Investigator address? */
	     call ask_$ask_line (code, inv_addr (j));
	end;
	else if code = "sup" then do;			/* Supervisor name? */
	     call ask_$ask_line (code, sup (j));
	end;
	else if code = "sup_addr" then do;		/* Supervisor address? */
	     call ask_$ask_line (code, sup_addr (j));
	end;
	else if code = "sup_phon" then do;		/* Supervisor phon? */
	     call ask_$ask_line (code, sup_phone (j));
	end;
	else if code = "dps" then do;
	     call ask_$ask_int (code, num);
	     disk_psec (j) = num;
	end;
	else if code = "dq" then do;
	     call ask_$ask_int (code, disk_quota (j));
	end;
	else if code = "ddq" then do;
	     call ask_$ask_int (code, dir_disk_quota (j));
	end;
	else if code = "du" then do;
	     call ask_$ask_int (code, disk_use (j));
	end;
	else if code = "ddu" then do;
	     call ask_$ask_int (code, dir_disk_use (j));
	end;
	else if code = "on" then do;
	     on (j) = gdate (code);
	end;
	else if code = "off" then do;
	     off (j) = gdate (code);
	end;
	else do;					/* Unknown change code. Gripe. */
	     call ioa_ ("Illegal change code ""^a"".", code);
	     call ask_$ask_clr;			/* Clear line. */
	end;

	go to clp;				/* Go look for another code. */

/* Print an entry */

print:	call ask_$ask_cint (num, flg);		/* see how many */
	if flg ^= 1 then num = 1;
ploop:	call ioa_ ("^a", id (j));			/* print entry */
	call ioa_ ("^-^a", title (j));
	call ioa_ ("^-^a", inv (j));
	call ioa_ ("^-^a", inv_addr (j));
	call ioa_ ("^-^a", sup (j));
	call ioa_ ("^-^a", sup_addr (j));
	call ioa_ ("^-^a", sup_phone (j));
	call date_time_ (on (j), dtem);
	ec = disk_psec (j);
	call ioa_ ("^-date on ^a, disk ps = ^d, ^d/^d", dtem, ec, disk_quota (j), disk_use (j));
	call ioa_ ("^-directory quota ^d/^d", dir_disk_quota (j), dir_disk_use (j));
	call date_time_ (off (j), dtem);
	if off (j) ^= 0 then call ioa_ ("^-date off ^a", dtem);
	num = num - 1;
	if num <= 0 then go to main;			/* see if done */
	j = j + 1;				/* no, do next */
	if j > np then go to eof;			/* ... if any */
	go to ploop;

/* Go to nentry */

next:	call ask_$ask_cint (num, flg);		/* Check for a number. */
	if flg ^= 1 then num = 1;			/* If none there, assume one. */
	j = j + num;				/* Bump index. */
	if j > np then do;				/* Check range. */
eof:	     call ioa_ ("EOF");			/* Remark if too big. */
	     go to cmain;				/* clear buffer */
	end;
	go to main;

/* Delete an entry */

delete:	call ioa_ ("Deleting ""^a"".", id (j));		/* say, just in case */
	off (j) = clock ();				/* project is off now */
	go to main;

/* Add a new entry */

add:	np = np + 1;				/* Allocate new slot. */
	j = np;					/* Set pointer. */
	call ask_ ("proj id ", id (j));		/* Get ID. */
	call ask_$ask_line ("title   ", title (j));	/* Get title. */
	call ask_$ask_line ("inv     ", inv (j));	/* Get investigator. */
	call ask_$ask_line ("inv_addr ", inv_addr (j));	/* & address */
	call ask_$ask_line ("sup     ", sup (j));	/* Get supervisor. */
	call ask_$ask_line ("sup_addr ", sup_addr (j));	/* & address */
	call ask_$ask_line ("sup_phone ", sup_phone (j)); /* & phone */
	on (j) = clock ();
	off (j) = 0;
	go to main;

/* Go to top */

top:	j = 1;					/* whee */
	go to main;

/* Finish up. */

file:	nproj = np;				/* Set count back in file. */
	num24 = loph + np * lope;			/* compute number of wds in file */
	call hcs_$initiate (dn, en, "", 0, 1, ppp, ec);	/* initi real copy */
	if ppp = null then go to er;
	ppp -> projfile_zap = pp -> projfile_zap;
	call hcs_$terminate_noname (ppp, ec);
	num24 = 36 * num24;				/* Compute bit count. */
	call hcs_$set_bc (dn, en, num24, ec);		/* ... */

	if func = "w" then go to main;

quit:	call release_temp_segment_ ("edit_projfile", pp, ec);
	call ioa_ ("");

gdate:	proc (xcode) returns (fixed bin (71));		/* date getter */
dcl  xcode char (*) parameter;				/* argument */
dcl  temp char (12),
     b71 fixed bin (71);		/* temps */

xgdate:	     call ask_ (xcode, temp);			/* ask for the date */
	     call convert_date_to_binary_ (temp, b71, ec); /* Turn it into binary  */
	     if ec ^= 0 then do;			/* was it illegal? */
		call ioa_ ("Illegal date for ""^a"": ""^a""", xcode, temp);
		call ask_$ask_clr;
		go to xgdate;			/* try again */
	     end;
	     return (b71);
	end gdate;
     end edit_projfile;
