/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(86-09-26,Parisek), approve(87-06-17,MCR7570),
     audit(87-06-15,Hirneisen), install(87-08-06,MR12.1-1066):
     Free renamed projects (state = 3) in the SAT also.
                                                   END HISTORY COMMENTS */



/* format: style5,ind5 */

reset_usage:
     procedure () options (variable);

/**** This program substracts the resource usage in the saved admin
      copy of the PDTs (copied via the crank) from the resource usage
      figures in the real, live copy of the corresponding PDT.

      This program MODIFIES the system copy of the PDTs and in the case
      of delete projects, the SAT as well.

      This program takes four arguments:

      1) pathname of system copy of the SAT
      2) pathname of system copy of the directory containing PDTs
      3) pathname of the admin copy of the SAT (not used)
      4) pathname of the admin copy of the directory containing PDTs. */

/* Written by Janice B. Phillipps, April 14, 1972
   Revised 8/3/72 J. Phillipps
   Modified by R. McDonald May 1980 to include page charges
   Modified 1894-07-11 BIM for cleanup handler!
   Modified 1984-10-31 by E. Swenson to not attempt to terminate PDTs
   that were not initiated.  Also use current declaration of external
   entries.
   Modified 1985-04-10 by E. Swenson to work if a user has been added to
   the PDT after the crank has copied the PDTs.  Also re-written to use
   modern programming techniques and routines.  Fixed cleanup handler
   introduced above.
*/

/* Automatic */

     dcl	   argument_lth	       fixed bin (21);
     dcl	   argument_ptr	       ptr;
     dcl	   code		       fixed bin (35);
     dcl	   cpdt_dir	       char (168);	      /* location of admin copy of PDTs */
     dcl	   n_arguments	       fixed bin;
     dcl	   pdt_dir	       char (168);	      /* location of system copy of PDTs */
     dcl	   pdt_name	       char (32);	      /* entryname of the pdt directory */
     dcl	   sat_dir	       char (168);	      /* location of system copy of sat */
     dcl	   sat_name	       char (32);	      /* entryname of the sat */
     dcl	   sci_ptr	       ptr;	      /* pointer to subsystem invocation */
     dcl	   sp		       ptr;
     dcl	   cp		       ptr;
     dcl	   cpdtp		       ptr;
     dcl	   pdtp		       ptr;
     dcl	   pdtep		       ptr;
     dcl	   satp		       ptr;
     dcl	   satep		       ptr;
     dcl	   (i, j, k, kk)	       fixed bin;
     dcl	   delta		       fixed bin;
     dcl	   doubledelta	       fixed bin (71);
     dcl	   current_time	       fixed bin (71);    /* time of this PDT update */
     dcl	   deltafloat	       float bin;
     dcl	   twodays	       fixed bin (35) int static
			       init (2880000000);
     dcl	   baderrct	       fixed bin;
     dcl	   locked_pdtep	       pointer;

/* Based */

     dcl	   argument	       char (argument_lth) based (argument_ptr);

/* Conditions */

     dcl	   cleanup	       condition;

/* Builtin */

     dcl	   addr		       builtin;
     dcl	   clock		       builtin;
     dcl	   null		       builtin;
     dcl	   unspec		       builtin;

/* Constant */

     dcl	   ME		       char (32) initial ("reset_usage")
			       internal static options (constant);

/* External Entries */

     dcl	   absolute_pathname_      entry (char (*), char (*), fixed bin (35));
     dcl	   com_err_	       entry () options (variable);
     dcl	   cu_$arg_list_ptr	       entry () returns (ptr);
     dcl	   delete_$path	       entry (char (*), char (*),
			       bit (36) aligned, char (*), fixed bin (35))
			       ;
     dcl	   expand_pathname_	       entry (char (*), char (*), char (*),
			       fixed bin (35));
     dcl	   get_lock_id_	       entry returns (bit (36) aligned);
     dcl	   initiate_file_	       entry (char (*), char (*), bit (*), ptr,
			       fixed bin (24), fixed bin (35));
     dcl	   ioa_$rsnnl	       entry options (variable);
     dcl	   pathname_	       entry (char (*), char (*))
			       returns (char (168));
     dcl	   ssu_$abort_line	       entry () options (variable);
     dcl	   ssu_$arg_count	       entry (ptr, fixed bin);
     dcl	   ssu_$arg_ptr	       entry (ptr, fixed bin, ptr, fixed bin (21))
			       ;
     dcl	   ssu_$destroy_invocation entry (ptr);
     dcl	   ssu_$print_message      entry () options (variable);
     dcl	   ssu_$standalone_invocation
			       entry (ptr, char (*), char (*), ptr, entry,
			       fixed bin (35));
     dcl	   set_lock_$lock	       entry (bit (36) aligned, fixed bin,
			       fixed bin (35));
     dcl	   set_lock_$unlock	       entry (bit (36) aligned, fixed bin (35));
     dcl	   terminate_file_	       entry (ptr, fixed bin (24), bit (*),
			       fixed bin (35));

/* External Static */

     dcl	   error_table_$lock_wait_time_exceeded
			       fixed bin ext;
%page;

/* Program */

     sci_ptr = null ();
     locked_pdtep = null ();
     satp = null ();
     pdtp = null ();
     cpdtp = null ();

     on condition (cleanup) call CLEAN_UP ();

     call ssu_$standalone_invocation (sci_ptr, ME, "1.0", cu_$arg_list_ptr (),
         SSU_ABORT, code);
     if code ^= 0 then
	do;
	call com_err_ (code, ME, "Unable to create subsystem invocation.");
	return;
	end;

     call PROCESS_ARGUMENTS ();

     current_time = clock ();			      /* get time for PDT time_last_update */

/**** Set up delete_options structure in case we need it for delete_. */

     unspec (delete_options) = ""b;
     delete_options.force = "1"b;		      /* ignore safety switch */
     delete_options.segment = "1"b;		      /* pdts are segments */
     delete_options.raw = "1"b;		      /* use hcs_ to delete, not fs_util_ */

/**** Loop through all the projects in the SAT. */

     do i = 1 to satp -> sat.current_size;
	satep = addr (satp -> sat.project (i));	      /* locate a PDT */
	call ioa_$rsnnl ("^a.pdt", pdt_name, kk, satep -> project.project_id);
	call PROCESS_PROJECT ();
     end;

ABORT_LABEL:
     call CLEAN_UP ();
     return;
%page;
PROCESS_ARGUMENTS:
     procedure ();

/**** This internal procedure processes the arguments of reset_usage.  It
      ensures that all required arguments are present and initiates the
      system copy of the sat. */

     call ssu_$arg_count (sci_ptr, n_arguments);
     if n_arguments ^= 4 then
	call ssu_$abort_line (sci_ptr, 0,
	    "Usage: ^a system_sat system_pdt_dir admin_sat_copy admin_pdt_copy_dir",
	    ME);

     call ssu_$arg_ptr (sci_ptr, 1, argument_ptr, argument_lth);
     call expand_pathname_ (argument, sat_dir, sat_name, code);
     if code ^= 0 then
	call ssu_$abort_line (sci_ptr, code, "^a", argument);

     call ssu_$arg_ptr (sci_ptr, 2, argument_ptr, argument_lth);
     call absolute_pathname_ (argument, pdt_dir, code);
     if code ^= 0 then
	call ssu_$abort_line (sci_ptr, code, "^a", argument);

/**** Note that we do not use the admin copy of the SAT.  For
      compatibility, we do not change the calling sequence. */

     call ssu_$arg_ptr (sci_ptr, 4, argument_ptr, argument_lth);
     call absolute_pathname_ (argument, cpdt_dir, code);
     if code ^= 0 then
	call ssu_$abort_line (sci_ptr, code, "^a", argument);

/**** Now initiate the system copy of the SAT. */

     call initiate_file_ (sat_dir, sat_name, RW_ACCESS, satp, (0), code);
     if code ^= 0 then
	call ssu_$abort_line (sci_ptr, code, "^a",
	    pathname_ (sat_dir, sat_name));

     end PROCESS_ARGUMENTS;
%page;
PROCESS_PROJECT:
     procedure ();

     if satep -> project.state = 1 then
	do;				      /* if project active */
/**** Initiate admin copy of PDT. */

	call initiate_file_ (cpdt_dir, pdt_name, R_ACCESS, cpdtp, (0), code);
	if code ^= 0 then
PDT_INIT_ERROR:
	     do;
	     call ssu_$print_message (sci_ptr, 0, "Could not initiate ^a.",
	         pathname_ (cpdt_dir, pdt_name));
	     return;			      /* skip this PDT entry */
	     end;

	call initiate_file_ (pdt_dir, pdt_name, RW_ACCESS, pdtp, (0), code);
	if code ^= 0 then
	     do;
	     call terminate_file_ (cpdtp, 0, TERM_FILE_TERM, (0));
	     goto PDT_INIT_ERROR;
	     end;

/**** Now go through each entry in the PDT. */

	do j = 1 to pdtp -> pdt.current_size;	      /* loop thru each PDT to reset all users */

/**** The following check ensures that the system PDT entry we are examining
      has not been added since the PDT copy was made.  Actually, another
      check in PROCESS_USER makes another check for the same reason */

	     if j ^> cpdtp -> pdt.current_size then
		do;
		sp = addr (pdtp -> pdt.user (j));   /* system copy of PDT */
		cp = addr (cpdtp -> pdt.user (j));  /* admin copy of PDT */
		call PROCESS_USER ();
		end;
	end;

	if pdtp ^= null () then
	     call terminate_file_ (pdtp, 0, TERM_FILE_TERM, (0));
	if cpdtp ^= null () then
	     call terminate_file_ (cpdtp, 0, TERM_FILE_TERM, (0));
	end;
     else if satep -> project.state = 2 | satep -> project.state = 3 then
	do;
	satep -> project.state = 0;		      /* free slot of deleted project */
	satep -> project.chain = satp -> sat.freep;
	satp -> sat.freep = i;		      /* index of free slot on chain */
					      /* threaded slot of deleted project on free list */
	call delete_$path (pdt_dir, pdt_name, unspec (delete_options), ME,
	    (0));
	end;
     else if satep -> project.state = 0 then	      /* no project here */
	;
     else
	do;				      /* Well what is it then? */
	call ssu_$print_message (sci_ptr, 0,
	    "project.state (^d) invalid for project ^a", project.state,
	    project.project_id);
	end;
     return;

     end PROCESS_PROJECT;
%page;
PROCESS_USER:
     procedure ();

     if sp -> user.state = 0 then
	;				      /* state = 0, no user entry */
     else if sp -> user.state = 1 then
	do;				      /* user active -- subtract usage */
/**** But first, some consistency checks */
	if cp -> user.state = 0 then		      /* person added after copy */
	     return;			      /* no usage since he is new */
	if sp -> user.person_id ^= cp -> user.person_id then
	     do;
	     call ssu_$print_message (sci_ptr, 0,
	         "Admin copy of ^a is out of phase with system copy.  System copy = ^a, Admin copy = ^a.",
	         satep -> project.project_id, sp -> user.person_id,
	         cp -> user.person_id);
	     return;
	     end;

	baderrct = 0;			      /* no errors yet */

	call RESET_USER_USAGE ();

	if baderrct > 0 then		      /* any errors? */
	     do;
	     call ssu_$print_message (sci_ptr, 0,
	         "Warning:  Encountered a negative delta for user ^a on project ^a.",
	         sp -> user.person_id, satep -> project.project_id);
	     end;
	end;
      else if sp -> user.state = 2 then
	do;				      /* user deleted -- add entry to free chain */
	sp -> user.state = 0;		      /* make entry unused */
	sp -> user.chain = pdtp -> pdt.freep;	      /* add to free chain */
	pdtp -> pdt.freep = j;		      /* index of freed slot on chain */
	end;
     else					      /* invalid state */
	call ssu_$print_message (sci_ptr, 0,
	    "Warning: Invalid state (^d) for user ^a on project ^a.",
	    sp -> user.state, sp -> user.person_id,
	    satep -> project.project_id);

     return;

     end PROCESS_USER;
%page;
RESET_USER_USAGE:
     procedure ();

     call LOCK_PDT ();
     if code ^= 0 then
	return;				      /* message already printed */

     if (current_time - sp -> user.time_last_reset < twodays) then
	do;
	call ssu_$print_message (sci_ptr, code,
	    "Warning: PDT usage has been reset within the last two days.  Skipping user ^a on project ^a.",
	    sp -> user.person_id, satep -> project.project_id);
	call UNLOCK_PDT ();
	return;
	end;

     deltafloat = sp -> user.dollar_charge - cp -> user.dollar_charge;
					      /* total user charge */
     if deltafloat >= 0 then
	sp -> user.dollar_charge = deltafloat;
     else
	baderrct = baderrct + 1;

     delta = sp -> user.logins - cp -> user.logins;
     if delta >= 0 then
	sp -> user.logins = delta;		      /* number of logins */
     else
	baderrct = baderrct + 1;

     delta = sp -> user.crashes - cp -> user.crashes;   /* sessions abnormally terminated */
     if delta >= 0 then
	sp -> user.crashes = delta;
     else
	baderrct = baderrct + 1;

     do k = 0 to 7;				      /* interactive use shifts 0 - 7 */
	deltafloat =
	    sp -> user.interactive.charge (k)
	    - cp -> user.interactive.charge (k);
	if deltafloat >= 0e0 then
	     sp -> user.interactive.charge (k) = deltafloat;
					      /* total dollar charge this shift */
	else
	     baderrct = baderrct + 1;

	doubledelta =
	    sp -> user.interactive.cpu (k) - cp -> user.interactive.cpu (k);
	if doubledelta >= 0 then
	     sp -> user.interactive.cpu (k) = doubledelta;
					      /* cpu usage in microseconds */
	else
	     baderrct = baderrct + 1;

	doubledelta =
	    sp -> user.interactive.core (k) - cp -> user.interactive.core (k);
	if doubledelta >= 0 then
	     sp -> user.interactive.core (k) = doubledelta;
	else
	     baderrct = baderrct + 1;

	doubledelta =
	    sp -> user.interactive.connect (k)
	    - cp -> user.interactive.connect (k);
	if doubledelta >= 0 then
	     sp -> user.interactive.connect (k) = doubledelta;
					      /* total console time in microseconds */
	else
	     baderrct = baderrct + 1;

	doubledelta =
	    sp -> user.interactive.io_ops (k)
	    - cp -> user.interactive.io_ops (k);
	if doubledelta >= 0 then
	     sp -> user.interactive.io_ops (k) = doubledelta;
					      /* total io_ops time in microsecs */
	else
	     baderrct = baderrct + 1;

     end;					      /* end processing interactive usage */

     do k = 1 to 4;				      /* absentee use of queues 1 - 4 */
	deltafloat =
	    sp -> user.absentee.charge (k) - cp -> user.absentee.charge (k);
	if deltafloat >= 0 then
	     sp -> user.absentee.charge (k) = deltafloat;
					      /* dollar charge this queue */
	else
	     baderrct = baderrct + 1;

	delta = sp -> user.absentee.jobs (k) - cp -> user.absentee.jobs (k);
					      /* jobs submitted */
	if delta >= 0 then
	     sp -> user.absentee.jobs (k) = delta;
	else
	     baderrct = baderrct + 1;

	doubledelta =
	    sp -> user.absentee.cpu (k) - cp -> user.absentee.cpu (k);
					      /*  usecs */
	if doubledelta >= 0 then
	     sp -> user.absentee.cpu (k) = doubledelta;
	else
	     baderrct = baderrct + 1;

	doubledelta =
	    sp -> user.absentee.memory (k) - cp -> user.absentee.memory (k);
	if doubledelta >= 0 then
	     sp -> user.absentee.memory (k) = doubledelta;
	else
	     baderrct = baderrct + 1;

     end;					      /* end processing absentee usage */

/**** Process I/O daemon queue use */

     do k = 1 to 4;				      /* io daemon use queues 1 - 4 */
	deltafloat = sp -> user.iod.charge (k) - cp -> user.iod.charge (k);
					      /* $ charge this queue */
	if deltafloat >= 0e0 then
	     sp -> user.iod.charge (k) = deltafloat;
	else
	     baderrct = baderrct + 1;

	delta = sp -> user.iod.pieces (k) - cp -> user.iod.pieces (k);
	if delta >= 0 then
	     sp -> user.iod.pieces (k) = delta;
	else
	     baderrct = baderrct + 1;

	doubledelta = sp -> user.iod.pages (k) - cp -> user.iod.pages (k);
	if doubledelta >= 0 then
	     sp -> user.iod.pages (k) = doubledelta;
	else
	     baderrct = baderrct + 1;

	doubledelta = sp -> user.iod.lines (k) - cp -> user.iod.lines (k);
	if doubledelta >= 0 then
	     sp -> user.iod.lines (k) = doubledelta;
	else
	     baderrct = baderrct + 1;

     end;					      /* end processing io daemon queues */

/**** Process device charges */

     do k = 1 to 16;			      /* device charges */
	deltafloat = sp -> user.devices (k) - cp -> user.devices (k);
	if deltafloat >= 0 then
	     sp -> user.devices (k) = deltafloat;
	else
	     baderrct = baderrct + 1;
     end;					      /* end processing device charges */


/**** Update last reset time in PDT entry */
     sp -> user.time_last_reset = current_time;

     call UNLOCK_PDT ();
     return;

     end RESET_USER_USAGE;
%page;
LOCK_PDT:
     procedure ();

     locked_pdtep = sp;
     call set_lock_$lock (sp -> user.lock, 600, code);  /* lock data base while resetting */
     if code = error_table_$lock_wait_time_exceeded then
	call ssu_$print_message (sci_ptr, code,
	    "The PDTE entry for ^a on project ^a is locked.  Continuing onto next user.",
	    sp -> user.person_id, satep -> project.project_id);
     return;
     end LOCK_PDT;
%page;
UNLOCK_PDT:
     procedure ();

     call set_lock_$unlock (sp -> user.lock, code);
     locked_pdtep = null ();
     return;
     end UNLOCK_PDT;
%page;
SSU_ABORT:
     procedure ();

     goto ABORT_LABEL;
     end SSU_ABORT;
%page;
CLEAN_UP:
     procedure ();

     if locked_pdtep ^= null () then
	do;
	if locked_pdtep -> user.lock = get_lock_id_ () then
	     call set_lock_$unlock (locked_pdtep -> user.lock, (0));
	locked_pdtep = null ();
	end;

/**** Note that terminate_file_ returns if ptr is null. */

     call terminate_file_ (pdtp, 0, TERM_FILE_TERM, (0));
     call terminate_file_ (cpdtp, 0, TERM_FILE_TERM, (0));
     call terminate_file_ (satp, 0, TERM_FILE_TERM, (0));

     if sci_ptr ^= null () then
	call ssu_$destroy_invocation (sci_ptr);
     return;

     end CLEAN_UP;
%page;

/* format: off */
%page; %include access_mode_values;
%page; %include delete_options;
%page; %include pdt;
%page; %include sat;
%page; %include terminate_file;
%page; %include user_attributes;

     end reset_usage;
