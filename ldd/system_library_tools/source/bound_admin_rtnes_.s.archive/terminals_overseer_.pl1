/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* format: style2*/
terminals_overseer_:
     proc;

/* Special login responder for "Terminals" */
/* Modified 750501 by PG to call logout properly, convert to iox_, and fix minor bugs */
/* Modified 810121 by Benson I. Margulies for a condition wall */

/* automatic */

	dcl     buf		 char (168) varying,
	        command		 char (8),
	        code		 fixed bin (35);


/* builtins */

	dcl     (addr, before, ltrim, rtrim)
				 builtin;

/* internal static */

	dcl     nll		 label int static;
	dcl     1 search_rules	 aligned internal static options (constant),
		2 number		 fixed bin initial (5),
		2 names		 (5) char (168)
				 initial ("initiated_segments", "referencing_dir", ">system_library_standard",
				 ">system_library_1", ">system_library_tools");

/* entries */

	dcl     com_err_		 entry options (variable),
	        hcs_$initiate_search_rules
				 entry (ptr, fixed bin (35)),
	        command_query_	 entry () options (variable),
	        cu_$ready_proc	 entry (),
	        change_wdir_	 entry (char (168), fixed bin (35)),
	        user_info_$homedir	 entry (char(*)),
	        default_error_handler_$wall entry,
	        (
	        cu_$set_command_processor,
	        cu_$get_command_processor,
	        cu_$get_cl_intermediary,
	        cu_$set_cl_intermediary
	        )			 entry (entry),
	        ioa_		 entry options (variable);

	dcl     repeat_line		 entry options (variable),
	        edm		 entry options (variable),
	        runoff		 entry options (variable),
	        print		 entry options (variable),
	        logout		 entry options (variable);

/* static stuff for test entry */

	declare saved_cl		 entry variable internal static;
	declare saved_cp		 entry variable internal static;
	declare escape_permitted	 bit (1) aligned internal static initial ("0"b);

	declare ME		 char (32) init ("terminals_overseer_") int static options (constant);
	declare quit		 condition;
	declare any_other		 condition;
	declare home_dir		 char (168);

%page;
%include query_info;
%include iox_entries;


	nll = restart;

	on any_other call default_error_handler_$wall;
	call user_info_$homedir (home_dir);
	call change_wdir_ (home_dir, code);
	if code ^= 0 then do;
	     call com_err_ (code, ME, "Could not set working dir to ^a.", home_dir);
	     go to GIVE_UP;
	end;
	
						/* print reasonable error messages */
	on quit call t_quit;			/* and handle quit here */

	call cu_$get_command_processor (saved_cp);	/* save this information for the test entrypoint */
	call cu_$get_cl_intermediary (saved_cl);	/* so that developer can get process back */
	call cu_$set_command_processor (cmproc);	/* make us the command processor and get_to_cl */
	call cu_$set_cl_intermediary (cl_proc);

	call hcs_$initiate_search_rules (addr (search_rules), code);
						/* set search rules */
	if code ^= 0
	then do;
		call com_err_ (code, ME, "Cannot set search rules");
GIVE_UP:
		call logout ();
	     end;

	call iox_$control (iox_$user_io, "quit_enable", null (), (0));
						/* can't fail */

	call ioa_ ("Terminals subsystem");
	query_info.version = query_info_version_4;
	query_info.suppress_name_sw = "1"b;
	query_info.cp_escape_control = "10"b;		/* we are the command processor, so .. is silly */
	query_info.suppress_spacing = "1"b;

restart:
	call cu_$ready_proc;
restart1:
	buf = "";
	call command_query_ (addr (query_info), buf, ME, "");
						/* nothing to say, just read */
	if buf = ""
	then go to restart1;

	command = before (ltrim (rtrim (buf)), " ");	/* command query does most of the work */

	if command = "echo"
	then do;
rpt:
		call repeat_line;
	     end;

	else if command = "repeat"
	then go to rpt;
	else if command = "test"
	then do;
		call runoff ("test");
	     end;
	else if command = "edm"
	then do;
		call edm;
	     end;
	else if command = "help"
	then do;
		call print ("terminals.info");
	     end;

	else if command = "logout"
	then do;
		call ioa_ ("Thank you.^/^/");
		call logout;
	     end;

	else if command = "hold"
	then do;
		call ioa_ ("Thank you.^/^/");
		call logout ("-hold");
	     end;

	else if escape_permitted & command = "return"
	then do;
		call cu_$set_command_processor (saved_cp);
						/* restore the environment, tho search rules will be broke */
		call cu_$set_cl_intermediary (saved_cl);
		return;
	     end;

	else do;
		call ioa_ ("""^a"" is not a legal command.^/Type ""help"" for instructions", command);
	     end;

	go to restart;


cl_proc:
     entry;

	call ioa_ ("Automatic restart.^/");

t_quit:
     entry;

	go to nll;				/* nonlocal go to -> automatic storage of first invocation stays */

cmproc:
     entry;

	call ioa_ ("No external command processing.");
	go to nll;

test:
     entry;
	escape_permitted = "1"b;			/* save the poor developer some pain. This should be bound away */

     end terminals_overseer_;
