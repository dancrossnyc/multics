/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

charge_user_: proc (name, proj, dp, code);

/* CHARGE_USER_ - program to increment a user's usage meters in his PDT entry */

/* modified on 10/22/74 by J. Whitmore to be compatible with the access isolation
   mechanism.  The program assumes that all PDTs are in the same directory and
   hence, all have the same access class.  This allows the process to test for
   needing system privileges only once (unless the debug entry is called.)
   Modified May 1980 by R. McDonald to include printer page charging. 
*/


/****^  HISTORY COMMENTS:
  1) change(87-08-11,GDixon), approve(88-08-15,MCR7969),
     audit(88-08-03,Lippard), install(88-08-29,MR12.2-1093):
     Correct setting of code parm (phx14431).
                                                   END HISTORY COMMENTS */


dcl  name char (*),					/* person name */
     proj char (*),					/* project ID */
     dp ptr,					/* ptr to dummy pdt entry */
     code fixed bin (35);				/* error code returned if not found */

dcl  pdtp ptr,					/* ptr to current pdt */
     pdtep ptr,					/* ptr to current pdt entry */
     pdt_name char (32) aligned,			/* name of pdt */
    (i, j) fixed bin,				/* counters */
     setsw bit (1) aligned init ("0"b),			/* tells which entry */
     ec fixed bin (35),				/* errcode */
    (init, need_priv) bit (1) aligned int static init ("0"b), /* priv control bits */
     access_class bit (72) aligned;			/* access class of data seg..(PDT) */

dcl  error_table_$lock_wait_time_exceeded fixed bin (35) ext static,
     error_table_$moderr fixed bin (35) ext static;

dcl  linkage_error condition;

dcl  sysdir char (168) aligned int static init (">system_control_1>pdt");

dcl  ioa_$rsnnl entry options (variable),
     hcs_$initiate entry (char (*) aligned, char (*) aligned, char (*) aligned,
     fixed bin (1), fixed bin (2), ptr, fixed bin (35)),
     hcs_$get_access_class entry (char (*) aligned, char (*) aligned, bit (72) aligned, fixed bin (35)),
     system_privilege_$initiate entry (char (*) aligned, char (*) aligned, char (*) aligned,
     fixed bin (1), fixed bin (2), ptr, fixed bin (35)),
     get_authorization_ entry () returns (bit (72) aligned),
     read_write_allowed_ entry (bit (72) aligned, bit (72) aligned) returns (bit (1) aligned),
     clock_ entry () returns (fixed bin (71)),
     set_lock_$lock entry (bit (36) aligned, fixed bin, fixed bin (35)),
     set_lock_$unlock entry (bit (36) aligned, fixed bin (35)),
     hcs_$terminate_noname entry (ptr, fixed bin (35));

dcl (null, addr) builtin;

%include user_attributes;
%include pdt;

/* ====================================================== */

join:
	call ioa_$rsnnl ("^a.pdt", pdt_name, j, proj);	/* Fabricate name of pdt wanted. */

	if ^init then do;				/* check the access to the PDT */

	     call hcs_$get_access_class (sysdir, pdt_name, access_class, ec);
	     if ec ^= 0 then go to mode_err;		/* hate to, but give up */

	     if read_write_allowed_ (get_authorization_ (), access_class) /* can we read and write? */
	     then need_priv = "0"b;			/* Yes, no privileges needed */
	     else need_priv = "1"b;			/* we need privileges if we are to do anything */

	     init = "1"b;				/* only do this once */

	end;

	on linkage_error go to mode_err;		/* play safe each time this is called */
						/* in case user has no access to system_privilege_ */
	if need_priv then
	     call system_privilege_$initiate (sysdir, pdt_name, "", 0, 1, pdtp, ec);
	else call hcs_$initiate (sysdir, pdt_name, "", 0, 1, pdtp, ec);
	if pdtp = null then do;			/* Look for pdt. */
	     code = ec;				/* Ugh. */
	     return;
	end;

search:	do i = 1 to pdt.current_size;			/* Look up user in pdt. */
	     pdtep = addr (pdt.user (i));		/* Get ptr to entry */
	     if user.state = 1 then			/* Look only at live users. */
		if user.person_id = name then go to found; /* Check name. */
	end;

	code = 1;					/* User is not in pdt. */
	go to terminate;				/* Error. */

found:
	call set_lock_$lock (user.lock, 300, ec);	/* Lock user entry. Wait up to 5 mins. */
	if ec = error_table_$lock_wait_time_exceeded then do;
	     code = ec;				/* tell caller what happened */
	     go to terminate;			/* and cleanup */
	end;

	if setsw then go to force;			/* Where did we come in? */

	user.absolute_spent = user.absolute_spent + dp -> user.absolute_spent;
	user.dollar_charge = user.dollar_charge + dp -> user.dollar_charge;
	user.logins = user.logins + dp -> user.logins;
	user.crashes = user.crashes + dp -> user.crashes;
	do i = 0 to 7;
	     user.interactive (i).charge = user.interactive (i).charge + dp -> user.interactive (i).charge;
	     user.interactive (i).cpu = user.interactive (i).cpu + dp -> user.interactive (i).cpu;
	     user.interactive (i).core = user.interactive (i).core + dp -> user.interactive (i).core;
	     user.interactive (i).connect = user.interactive (i).connect + dp -> user.interactive (i).connect;
	     user.interactive (i).io_ops = user.interactive (i).io_ops + dp -> user.interactive (i).io_ops;
	end;
	do i = 1 to 4;
	     user.absentee (i).charge = user.absentee (i).charge + dp -> user.absentee (i).charge;
	     user.absentee (i).jobs = user.absentee (i).jobs + dp -> user.absentee (i).jobs;
	     user.absentee (i).cpu = user.absentee (i).cpu + dp -> user.absentee (i).cpu;
	     user.absentee (i).memory = user.absentee (i).memory + dp -> user.absentee (i).memory;
	end;
	do i = 1 to 4;
	     user.iod (i).charge = user.iod (i).charge + dp -> user.iod (i).charge;
	     user.iod (i).pieces = user.iod (i).pieces + dp -> user.iod (i).pieces;
	     user.iod (i).pages = user.iod (i).pages + dp -> user.iod (i).pages;
	     user.iod (i).lines = user.iod (i).lines + dp -> user.iod (i).lines;
	end;
	do i = 1 to 16;
	     user.devices (i) = user.devices (i) + dp -> user.devices (i);
	end;

exit:	user.last_update = clock_ ();			/* Indicate when changes done. */

	call set_lock_$unlock (user.lock, ec);		/* Unlock user. */
	code = 0;

terminate:					/* be sure to clean up after ourselves */
	call hcs_$terminate_noname (pdtp, ec);		/* don't bother with the error code */
	return;

mode_err:	code = error_table_$moderr;			/* say that we don't have access */
	return;

/* ======================================================== */

set_user_charge: entry (name, proj, dp, code);

/* CHARGE_USER_$SET_USER_CHARGE - same as above but replaces usage meters instead of adding. */

	setsw = "1"b;				/* Indicate type of processing. */
	go to join;				/* Use common code to find user. */

force:	user.dollar_charge = dp -> user.dollar_charge;	/* Force all variables in pdt to new values. */
	user.absolute_spent = dp -> user.absolute_spent;
	user.logins = dp -> user.logins;
	user.crashes = dp -> user.crashes;
	do i = 0 to 7;
	     user.interactive (i).charge = dp -> user.interactive (i).charge;
	     user.interactive (i).cpu = dp -> user.interactive (i).cpu;
	     user.interactive (i).core = dp -> user.interactive (i).core;
	     user.interactive (i).connect = dp -> user.interactive (i).connect;
	     user.interactive (i).io_ops = dp -> user.interactive (i).io_ops;
	end;
	do i = 1 to 4;
	     user.absentee (i).charge = dp -> user.absentee (i).charge;
	     user.absentee (i).jobs = dp -> user.absentee (i).jobs;
	     user.absentee (i).cpu = dp -> user.absentee (i).cpu;
	     user.absentee (i).memory = dp -> user.absentee (i).memory;
	end;
	do i = 1 to 4;
	     user.iod (i).charge = dp -> user.iod (i).charge;
	     user.iod (i).pieces = dp -> user.iod (i).pieces;
	     user.iod (i).pages = dp -> user.iod (i).pages;
	     user.iod (i).lines = dp -> user.iod (i).lines;
	end;
	do i = 1 to 16;
	     user.devices (i) = dp -> user.devices (i);
	end;

	go to exit;

/* ==================================================== */

debug:	entry (dirn);

dcl  dirn char (*);

	sysdir = dirn;
	init = "0"b;				/* be sure we check access again */
	return;

     end charge_user_;
