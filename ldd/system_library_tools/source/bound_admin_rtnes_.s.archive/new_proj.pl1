/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */





/****^  HISTORY COMMENTS:
  1) change(86-09-25,Parisek), approve(87-06-17,MCR7570),
     audit(87-06-15,Hirneisen), install(87-08-06,MR12.1-1066):
     Make reusing a previously deleted project id optional by querying
     administrator for reuse. This enhances the security feature of reusing old
     project id's if this is not desirable.
                                                   END HISTORY COMMENTS */



/* format: style2 */
new_proj:
     procedure options (variable, separate_static);

/* NEW_PROJ - This program is used by User Accounts to add projects.

   THVV

   Modified by T. Casey, May 1978 to zero entire Nsate, as part of adding pdir_quota to sate.
   Modified by J. Bakal, July 1979 to add multiple rate structures.
   Modified by C. Hornig, March 1980, to check length of project name.
   Modified by J. N. R. Barnecut, April 1980 to default cutoff to midnight of day specified.
   Modified by E. N. Kittlitz, March 1982, to eliminate proj_admin_seg.
   Modified by E. N. Kittlitz, April 1982, to allow registration of anonymous users on projects
   Modified by E. N. Kittlitz, July 1982, call the pmf Project.pmf with the added name Project
   Modified 84-07-03 by BIM to remove added name on pmf, and query for dir
   quota, target LV, target access class, and target audit.
   Modified 1984-08-24 by E. Swenson for Version 2 PNT calling sequences.
   Modified 1984-09-13 by BIM to recognize when a request for a project
	  logical volume is not in fact a request for a master dir.
   Modified 1984-09-14 by BIM for mgtp passed to edit_proj_.
   Modified 1984-10-10 by E. Swenson to special case the ACLs on >udd>SysAdmin
      and on >udd>SysDaemon when creating these projects during a cold boot.
   Modified 1984-12-14 by EJ Sharpe to set project.audit to sys_admin_data
default.
   Modified 1984-12-27 by Keith Loepere for setting dir_quota at append.
   Modified 1985-01-02 by EJ Sharpe to create project dirs with owner and account if it is a master dir
*/

	dcl     dir_priv_code	 fixed bin (35) init (-1);
	dcl     dn		 char (168);
	dcl     en		 char (32);
	dcl     delegated		 bit (1) aligned;
	dcl     (i, j, k)		 fixed bin;
	dcl     bitct		 fixed bin (24);
	dcl     lvid		 bit (36) aligned;
	dcl     mylock		 bit (1) init ("0"b);
	dcl     ap		 ptr;
	dcl     al		 fixed bin (21);
	dcl     bchr		 char (al) unaligned based (ap);
	dcl     ec		 fixed bin (35);
	dcl     access		 bit (36) aligned;
	dcl     pubbit		 bit (1) aligned;
	dcl     TESTING		 bit (1) aligned init ("0"b);
	dcl     arg_count		 fixed bin;
	dcl     found_error		 bit (1) aligned;
	dcl     project_name	 char (32) varying;
	dcl     char16		 char (16);
	dcl     char168		 char (168);
	dcl     (char500, char500_2)	 char (500);
	dcl     pmf_dir		 char (168) init ("");
	dcl     pmf_en		 char (32);
	dcl     char32		 char (32);
	dcl     u			 (40) char (32);
	dcl     time		 fixed bin (71);
	dcl     rings		 (3) fixed bin (3) init ((3) 7);
	dcl     uid		 char (32);
	dcl     n_users		 fixed bin;
	dcl     project_dir_acc	 bit (72) aligned init (""b);
	dcl     project_dir_lv	 char (32);
	dcl     project_dir_owner	 char (32) init ("");	/* owner of a project master dir */
	dcl     project_dir_account	 char (32) init ("");	/* quota account of a project master dir */
	dcl     udd_acc		 bit (72) aligned;
	dcl     have_anonymous_user	 bit (1) aligned;

	dcl     USER_RING		 fixed bin (3) init (4) static options (constant);

	dcl     udd		 char (64) int static init (">user_dir_dir");
	dcl     sc1		 char (64) int static init (">system_control_1");

	dcl     pp		 ptr;		/* ptr to projfile */
	dcl     qp		 ptr;		/* ptr to reqfile */
	dcl     mgtp		 ptr;		/* ptr to mgt */
	dcl     satp		 ptr;		/* ptr to sat */
	dcl     protop		 ptr;		/* ptr to prototype pmf */
	dcl     protol		 fixed bin (21);	/* lth in chars */
	dcl     sadp		 ptr;		/* ptr to sys_admin_data */
	dcl     satep		 ptr;		/* ptr to sat entry. */
	dcl     projfile_ep		 ptr;		/* ptr to projfile entry */
	dcl     reqfile_ep		 ptr;		/* ptr to reqfile entry */
	dcl     (tp, ttp)		 ptr;
	dcl     sat_count		 fixed bin;
	dcl     projfile_count	 fixed bin;
	dcl     reqfile_count	 fixed bin;
	dcl     aim_check_$equal	 entry (bit (72) aligned, bit (72) aligned) returns (bit (1) aligned);
	dcl     set_lock_$lock	 entry (bit (36) aligned, fixed bin, fixed bin (35));
	dcl     set_lock_$unlock	 entry (bit (36) aligned, fixed bin (35));
	dcl     error_table_$badopt	 fixed bin (35) ext static;
	dcl     error_table_$namedup	 fixed bin (35) ext;
	dcl     error_table_$locked_by_this_process
				 fixed bin (35) ext;
	dcl     error_table_$id_not_found
				 fixed bin (35) ext;
	dcl     error_table_$invalid_lock_reset
				 fixed bin (35) ext;


	dcl     (addr, after, before, byte, clock, divide, hbound, index,
		length, null, rtrim, string, substr, unspec, verify)
				 builtin;


	dcl     command_query_	 entry () options (variable);
	dcl     pnt_manager_$get_entry entry (character (*), pointer, fixed bin (35));
	dcl     datebin_$last_midnight entry (fixed bin (71));
	dcl     convert_date_to_binary_$relative
				 entry (char (*), fixed bin (71), fixed bin (71), fixed bin (35));
	dcl     cv_float_		 entry (char (*), fixed bin (35)) returns (float bin);
	dcl     cu_$arg_count	 entry (fixed bin, fixed bin (35));
	dcl     cu_$arg_ptr		 entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
	dcl     get_wdir_		 entry () returns (char (168));
	dcl     get_group_id_	 entry () returns (char (32));
	dcl     ioa_		 entry options (variable);
	dcl     ioa_$rs		 entry options (variable);
	dcl     com_err_		 entry options (variable);
	dcl     convert_access_class_$from_string
				 entry (bit (72) aligned, character (*), fixed binary (35));
	dcl     convert_access_class_$to_string_short
				 entry (bit (72) aligned, character (*), fixed binary (35));
	dcl     expand_pathname_	 entry (character (*), character (*), character (*), fixed binary (35));
	dcl     sub_err_		 entry () options (variable);
	dcl     absolute_pathname_	 entry (character (*), character (*), fixed binary (35));
	dcl     mdc_$create_dirx_acct	 entry (char (*), char (*), char (*), pointer, char (*), char (*), fixed bin (35));
     	dcl     mdc_$get_lv_access	 entry (char (*), fixed bin (3), bit (36) aligned, bit (1) aligned, fixed bin (35));
	dcl     mdc_$find_lvid	 entry (char (*), bit (36) aligned, fixed bin (35));
	dcl     continue_to_signal_	 entry (fixed binary (35));
	dcl     edit_proj_		 entry (pointer);

	dcl     find_condition_info_	 entry (pointer, pointer, fixed binary (35));
     	dcl     get_ring_ 		 entry() returns(fixed bin(3));
	dcl     hcs_$add_acl_entries	 entry (char (*), char (*), ptr, fixed bin, fixed bin (35));
	dcl     hcs_$add_dir_acl_entries
				 entry (char (*), char (*), ptr, fixed bin, fixed bin (35));
	dcl     hcs_$add_dir_inacl_entries
				 entry (char (*), char (*), ptr, fixed bin, fixed bin (3), fixed bin (35));
	dcl     hcs_$create_branch_	 entry (char (*), char (*), ptr, fixed bin (35));
	dcl     hcs_$chname_file	 entry (char (*), char (*), char (*), char (*), fixed bin (35));
	dcl     hcs_$get_access_class	 entry (char (*), char (*), bit (72) aligned, fixed bin (35));
	dcl     initiate_file_	 entry (character (*), character (*), bit (*), pointer, fixed binary (24),
				 fixed binary (35));
	dcl     initiate_file_$create	 entry (character (*), character (*), bit (*), pointer, bit (1) aligned,
				 fixed binary (24), fixed binary (35));
	dcl     hcs_$status_long	 entry (char (*), char (*), fixed bin (1), ptr, ptr, fixed bin (35));
	dcl     (
	        system_privilege_$dir_priv_on,
	        system_privilege_$dir_priv_off
	        )			 entry (fixed bin (35));
	dcl     terminate_file_	 entry (pointer, fixed binary (24), bit (*), fixed binary (35));

	dcl     bcs		 char (131071) based (tp);
	dcl     prototype_pmf	 char (protol) based (protop);

	dcl     1 CBI		 aligned like create_branch_info;
	dcl     1 EPA		 aligned like edit_proj_arg;
	dcl     1 Nsate		 aligned like project;
	dcl     1 Bprojfile		 aligned like projfile.projfiletab based;
	dcl     1 Nprojfile		 aligned like projfile.projfiletab;
	dcl     1 Breqfile		 aligned like reqfile.reqfiletab based;
	dcl     1 Nreqfile		 aligned like reqfile.reqfiletab;
	dcl     1 pnte		 aligned like pnt_entry automatic;

	dcl     LEGAL		 char (71) int static options (constant)
				 init
				 /* Legal chars for project ID. */ (
				 "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'_`^~/-abcdefghijklmnopqrstuvwxyz")
				 options (constant);

	declare 1 seg_acl_array	 (10) aligned like segment_acl_entry;
	declare 1 dir_acl_array	 (10) aligned like directory_acl_entry;
	declare cleanup		 condition;
	declare sub_error_		 condition;


	call cu_$arg_count (arg_count, ec);
	if ec ^= 0
	then do;
		call com_err_ (ec, "new_proj");
		return;
	     end;
	if arg_count = 0
	then do;
		call com_err_ (0, "new_proj", "Usage: new_proj ProjectName");
		return;
	     end;

	project_name = "";
	do i = 1 to arg_count;
	     call cu_$arg_ptr (i, ap, al, (0));
	     if index (bchr, "-") ^= 1
	     then do;
		     if project_name ^= ""
		     then do;
			     call com_err_ (0, "new_proj",
				"Only one project name may be specified. ""^a"" is the second.", bchr);
			     call cleanup_segments;
			     return;
			end;
		     project_name = bchr;
		end;
	     else if bchr = "-debug"
	     then TESTING = "1"b;

	     else do;
		     call com_err_ (error_table_$badopt, "new_proj", """^a""", bchr);
		     return;
		end;
	end;

	if length (project_name) > 9
	then do;
		call com_err_ (0, "new_proj", "Project ID ^a longer then 9 characters.", project_name);
		return;
	     end;
	if verify (project_name, LEGAL) ^= 0
	then do;
		call com_err_ (0, "new_proj", "Illegal character in project ID ""^a""", project_name);
		return;
	     end;

	sadp, pp, qp, tp, ttp, protop, satp = null ();
	on cleanup call cleanup_segments;
	on sub_error_
	     begin;
		declare 1 CI		 aligned like condition_info;
		if TESTING
		then call continue_to_signal_ ((0));
		else do;
			CI.version = condition_info_version_1;
			call find_condition_info_ (null (), addr (CI), (0));
			sub_error_info_ptr = CI.info_ptr;
			call com_err_ (sub_error_info.status_code, "new_proj", "^a", sub_error_info.info_string);
			go to ERROR_EXIT;
		     end;
	     end;

	seg_acl_array (*).status_code, dir_acl_array (*).status_code = 0;
	dn = get_wdir_ ();
	en = "sys_admin_data";
	call initiate_file_ (dn, en, R_ACCESS, sadp, (0), ec);
	if ec ^= 0
	then go to er;
	call set_lock_$lock (sys_admin_data.lock, 60, ec);
	if ec ^= 0
	then if ec = error_table_$locked_by_this_process
	     then mylock = "1"b;
	     else if ec ^= error_table_$invalid_lock_reset
	     then do;
		     call com_err_ (ec, "new_proj", "Sys_admin_data is locked by ^a", sys_admin_data.locker);
		     call terminate_file_ (sadp, (0), TERM_FILE_TERM, (0));
		     return;
		end;

/* If sys_admin_data gets mashed, fix it up. */

	if sys_admin_data.default_proj_group < ""
	then do;
		sys_admin_data.default_proj_group = "Other";
		sys_admin_data.default_proj_grace = 2880;
		sys_admin_data.default_proj_ring1 = 4;
		sys_admin_data.default_proj_ring2 = 5;
		sys_admin_data.default_proj_attributes = "000010000111111110000000000000000000"b;
						/* anon,bumping,brief,vinitproc,vhomedir,nostart */
	     end;

	acl_count = 0;				/* start with none */
	uid = get_group_id_ ();

	en = "smf.cur.sat";
	call initiate_file_ (dn, en, RW_ACCESS, satp, (0), ec);
	if ec ^= 0
	then do;
er:
		call com_err_ (ec, "new_proj", en);
		go to abend;
	     end;
	do i = 1 to 2;				/* Put system admins on acls. */
	     if sat.system_admin (i) ^= ""
	     then do;
		     acl_count = acl_count + 1;
		     seg_acl_array (acl_count).access_name, dir_acl_array (acl_count).access_name =
			rtrim (sat.system_admin (i)) || ".*";
		     seg_acl_array (acl_count).mode = RW_ACCESS;
		     seg_acl_array (acl_count).extended_mode = ""b;
		     dir_acl_array (acl_count).mode = SMA_ACCESS;
		end;
	end;
	en = "projfile";
	call initiate_file_ (dn, en, RW_ACCESS, pp, (0), ec);
	if ec ^= 0
	then go to er;
	en = "reqfile";
	call initiate_file_ (dn, en, RW_ACCESS, qp, (0), ec);
	if ec ^= 0
	then go to er;
	en = "prototype_pmf";
	call initiate_file_ (dn, en, R_ACCESS, protop, bitct, ec);
	if ec ^= 0
	then go to er;
	protol = divide (bitct, 9, 17, 0);

	dn = sc1;
	en = "mgt";
	call initiate_file_ (dn, en, R_ACCESS, mgtp, (0), ec);
	if ec ^= 0
	then go to er;

	call expand_pathname_ (udd, dn, en, (0));
	call hcs_$get_access_class (dn, en, udd_acc, ec);
	if ec ^= 0
	then go to er;

	en = "";					/* clean err msg */
	unspec (Nsate) = ""b;			/* to avoid having to zero every new variable by name */


	call ioa_ ("Creating new project ""^a"".", project_name);

	Nsate.project_id = project_name;
	pmf_en = rtrim (Nsate.project_id) || ".pmf";

	sat_count = sat.current_size;
	reqfile_count = reqfile.nacts;
	projfile_count = projfile.nproj;
	satep, reqfile_ep, projfile_ep = null;

	do i = 1 to sat.current_size;
	     satep = addr (sat.project (i));
	     if Nsate.project_id = project.project_id
	     then if project.state = 1
		then do;
			call com_err_ (0, "new_proj", "Project ""^a"" is already registered.", Nsate.project_id);
			go to abend;
		     end;
		else if project.state = 2 | project.state = 3
		then do;
REUSE_PROJ:		char16 = get_input ("new_proj: Project " || rtrim(project.project_id) || " was previously deleted.  Do you wish to reuse it? ", "Just answer yes or no");
			if rtrim(char16) = "yes" | rtrim(char16) = "y" then goto check_req;
			else if rtrim(char16) = "no" | rtrim(char16) = "n" then goto abend;
			else do;
			     call ioa_ ("You must answer yes or no");
			     goto REUSE_PROJ;
			end;
		     end;
	end;
	sat_count = sat_count + 1;
	satep = addr (sat.project (sat_count));

check_req:
	do i = 1 to reqfile.nacts while (Nsate.project_id ^= reqfile.acctid (i));
	end;
	if i <= reqfile.nacts
	then if reqfile.qdf (i) = 0
	     then do;
		     call com_err_ (0, "new_proj", "Project ""^a"" is already in reqfile.", Nsate.project_id);
		     go to abend;
		end;
	     else ;				/* Returned. */
	else reqfile_count = reqfile_count + 1;
	reqfile_ep = addr (reqfile.reqfiletab (i));
	Nreqfile.acctid = Nsate.project_id;

	do i = 1 to projfile.nproj while (Nsate.project_id ^= projfile.id (i));
	end;
	if i <= projfile.nproj
	then if projfile.off (i) = 0
	     then do;
		     call com_err_ (0, "new_proj", "Project ""^a"" is already in projfile.", Nsate.project_id);
		     go to abend;
		end;
	     else ;				/* Returned. */
	else projfile_count = projfile_count + 1;
	projfile_ep = addr (projfile.projfiletab (i));
	Nprojfile.id = Nsate.project_id;

/* Clear the temporary data structures. */

	Nsate.state = 1;
	Nsate.project_dir = rtrim (udd) || ">" || Nsate.project_id;
	Nsate.pdt_ptr = null;
	Nsate.max_users = 32767;
	Nsate.n_users = 0;
	string (Nsate.at) = sys_admin_data.default_proj_attributes;
	do i = 1 to 4;
	     Nsate.admin (i).userid = "";
	     Nsate.admin (i).pad = "";
	end;
	Nsate.cutoff = "";
	Nsate.min_ring = sys_admin_data.default_proj_ring1;
	Nsate.max_ring = sys_admin_data.default_proj_ring2;
	Nsate.alias = "";
	Nsate.group = sys_admin_data.default_proj_group;
	Nsate.groups (1) = "";
	Nsate.groups (2) = "";
	Nsate.grace_max = sys_admin_data.default_proj_grace;
	Nsate.rs_number = 0;
	Nsate.audit = sys_admin_data.default_audit_flags;
	Nsate.project_authorization = ""b;

	Nsate.satpad = "0"b;
	Nsate.chain = 0;

	Nprojfile.title = "";
	Nprojfile.inv = "";
	Nprojfile.inv_addr = "";
	Nprojfile.sup = "";
	Nprojfile.sup_addr = "";
	Nprojfile.sup_phone = "";


	Nprojfile.on = clock ();
	Nprojfile.off = 0;
	Nprojfile.disk_psec = 0;
	Nprojfile.disk_quota = 100;
	Nprojfile.dir_disk_quota = 10;
	Nprojfile.disk_use = 0;
	Nprojfile.dir_disk_use = 0;
	Nprojfile.misc_charges = 0;
	Nprojfile.n_misc = 0;
	Nprojfile.processed = 0;

	Nreqfile.mitacct = "";
	Nreqfile.reqno = "";
	Nreqfile.req_amt = 0;			/* open ... */
	Nreqfile.qflag = "";
	Nreqfile.procssd = 0;
	Nreqfile.qdn = clock ();
	Nreqfile.qdf = 0;
	Nreqfile.billing_name = "";
	Nreqfile.billing_addr = "";
	Nreqfile.chg_mo = 0;
	Nreqfile.chg_tr = 0;
	call datebin_$last_midnight (time);
	call convert_date_to_binary_$relative ("+1year", Nreqfile.cutoff, time, (0));

	EPA.version = EDIT_PROJ_ARGS_V_2;
	EPA.caller = "new_proj";
	EPA.satep = addr (Nsate);
	EPA.projfile_ep = addr (Nprojfile);
	EPA.reqfile_ep = addr (Nreqfile);
	EPA.mgtp = mgtp;
	EPA.flags = "0"b;
	EPA.flags.all = "1"b;
	EPA.changes = "0"b;
	EPA.new_value.ptr, EPA.match_value.ptr = null ();

	call edit_proj_ (addr (EPA));

	delegated = "0"b;
	do i = 1 to 4;
	     if Nsate.admin (i).userid ^= ""
	     then delegated = "1"b;
	end;

	if delegated
	then do ec = -1 repeat ec while (ec ^= 0);
		char168 = get_input ("PMF directory", "Pathname of the directory to put the PMF into.");
		call absolute_pathname_ (char168, pmf_dir, ec);
		if ec ^= 0
		then call com_err_ (ec, "new_proj", "Illegal PMF directory: ""^a""", char168);
	     end;

	do ec = -1 repeat ec while (ec ^= 0);
GET_PROJ_DIR_LV:
	     project_dir_lv =
		get_input ("Project directory logical volume",
		"Logical volume on which segments under this project directory will reside. The default is to inherit the logical volume of >user_dir_dir."
		);
	     if project_dir_lv = ""
	     then ec = 0;				/* call hcs_, not mdc */
	     else do;
		     call mdc_$find_lvid (project_dir_lv, lvid, ec);
		     if ec ^= 0
		     then call com_err_ (ec, "new_proj", "Invalid logical volume name ""^a"".", project_dir_lv);
		     else if lvid = get_dir_lvid (udd)	/* mdc_ is not clever about creation of mdir that is not really an mdir */
		     then project_dir_lv = "";	/* so this filters out the easy case */
		     else do;	/* get owner and account for the master dir */
			call mdc_$get_lv_access (project_dir_lv, get_ring_ (), access, pubbit, ec);
			if ec ^= 0
			then do;
			     call com_err_ (ec, "new_proj", "Unable to check logical volume access.");
			     goto GET_PROJ_DIR_LV;
			end;
			else do;
			     if (access  & E_ACCESS) ^= E_ACCESS
			     then do;
				call com_err_ (0, "new_proj", "Process lacks executive access to LV ^a.", project_dir_lv);
				goto GET_PROJ_DIR_LV;
			     end;
			end;
GET_PROJ_DIR_OWNER:
			project_dir_owner = get_input ("Master directory owner",
			     "User ID of person to manage the project quota.  The default is your user_id.");
			if project_dir_owner ^= ""
			then if ^check_user_id_syntax$person_project (project_dir_owner)
			then do;
			     call com_err_ (0, "new_proj", "Illegal user_id format.");	
			     goto GET_PROJ_DIR_OWNER;
			end;
GET_PROJ_DIR_ACCT:
			project_dir_account = get_input ("Master directory account",
			     "Quota account where master directory will draw quota.  The default is the owner's account.");
			if project_dir_account ^= ""
			then if ^check_user_id_syntax$person_project_star (project_dir_account)
			then do;
			     call com_err_ (0, "new_proj", "Illegal quota account format.");
			     goto GET_PROJ_DIR_ACCT;
			end;

			/* now check for existance of the proper quota account */
/*TBD			Unfortunately the proper MDC entries don't exist which			/*TBD*/
/*TBD			would allow us to do this right.  We don't want to			/*TBD*/
/*TBD			try to mimic the quota account matching stuff here, so			/*TBD*/
/*TBD			the code is commented out until the appropriate interfaces			/*TBD*/
/*TBD			can be supplied.							/*TBD*/
/*TBD			if project_dir_account ^= ""						/*TBD*/
/*TBD			then if ^mdc_$find_account (project_dir_account)				/*TBD*/
/*TBD			     then do;							/*TBD*/
/*TBD				call com_err_ (0, "new_proj", "Quota account does not exist.");	/*TBD*/
/*TBD				goto GET_PROJ_DIR_ACCT;					/*TBD*/
/*TBD			     end;								/*TBD*/
/*TBD			     else; /*nothing*/						/*TBD*/
/*TBD			else if ^mdc_$find_matching_account (project_dir_owner)			/*TBD*/
/*TBD			     then do;							/*TBD*/
/*TBD				call com_err_ (0, "new_proj",					/*TBD*/
/*TBD				     "There is no quota account for the specified dir owner.");	/*TBD*/
/*TBD				goto GET_PROJ_DIR_OWNER;					/*TBD*/
/*TBD			     end;								/*TBD*/
/*TBD			     else; /*nothing*/						/*TBD*/
		     end;
		end;
	end;

	if unspec (Nsate.project_authorization) ^= ""b
	then do ec = -1 repeat ec while (ec ^= 0);
		char500 =
		     get_input ("Project directory access class",
		     "AIM access class marking for the project directory.");
		call convert_access_class_$from_string (project_dir_acc, char500, ec);
		if ec ^= 0
		then call com_err_ (ec, "new_proj", "Invalid project directory access class ""^a"".", char500);
	     end;

	call ioa_ ("Enter initial list of users. Type ""."" to exit");


	n_users = 0;
	have_anonymous_user = "0"b;
GET_USERS:
	do while ("1"b);

RE_GET_USER:
	     char32 = get_input (" Person", "Multics person-id of a user to be registered on this project.");
	     if char32 = ""
	     then go to GOT_USERS;
	     else if char32 = "."
	     then go to GOT_USERS;
	     else if char32 = "*"
	     then do;				/* anonymous */
		     if have_anonymous_user
		     then do;
			     call com_err_ (0, "new_proj", "Only one anonymous user may be supplied.");
			     go to RE_GET_USER;
			end;
		     have_anonymous_user = "1"b;
		     n_users = n_users + 1;
		     u (n_users) = "*";
		end;
	     else do;
		     if verify (char32, LEGAL) ^= 0
		     then do;
			     call com_err_ (0, "new_proj", "Illegal character in user id ""^a""", char32);
			     go to RE_GET_USER;
			end;
		     if index (rtrim (char32), " ") ^= 0
		     then do;
			     call ioa_ (0, "new_proj", "No spaces are permitted in user names. ""^a"" is invalid.",
				char32);
			     go to RE_GET_USER;
			end;
		     if index (substr (LEGAL, 11, 26), substr (char32, 1, 1)) = 0
		     then call com_err_ (0, "new_proj", "Warning: user name ""^a"" does not begin with a capital",
			     char32);
		     n_users = n_users + 1;
		     u (n_users) = char32;
		     call pnt_manager_$get_entry ((char32), addr (pnte), ec);
		     if ec = error_table_$id_not_found
		     then call com_err_ (0, "new_proj", "Warning: ^a is not registered.", char32);
		end;
GOT_A_USER:
	     if n_users = hbound (u, 1)
	     then do;
		     call com_err_ (0, "new_proj",
			"Limitation: only ^d users may be in the initial list. Add the rest to the PMF later.",
			hbound (u, 1));
		     go to GOT_USERS;
		end;
	end;
GOT_USERS:
	if n_users = 0
	then do;
		call com_err_ (0, "new_proj", "At least one user must be specified.");
		go to GET_USERS;
	     end;


	call ioa_ ("^/Input for ""^a"" complete.", Nsate.project_id);

/* Now add the data to the files. */

	project = Nsate;
	projfile_ep -> Bprojfile = Nprojfile;
	reqfile_ep -> Breqfile = Nreqfile;

/* Create project directory and set quota. */

	unspec (CBI) = ""b;
	CBI.version = create_branch_version_2;
	CBI.dir_sw = "1"b;
	CBI.parent_ac_sw = aim_check_$equal (project_dir_acc, udd_acc);
	CBI.mode = SMA_ACCESS;
	CBI.rings = rings;
	CBI.userid = get_group_id_ ();
	CBI.quota = Nprojfile.disk_quota;
	CBI.dir_quota = Nprojfile.dir_disk_quota;
	if ^CBI.parent_ac_sw
	then CBI.access_class = project_dir_acc;

	if project_dir_lv ^= ""
	then call mdc_$create_dirx_acct (udd, (Nsate.project_id),
		project_dir_lv, addr (CBI), project_dir_account, project_dir_owner, ec);
	else call hcs_$create_branch_ (udd, (Nsate.project_id), addr (CBI), ec);

	if ec ^= 0 & ec ^= error_table_$namedup
	then call sub_err_ (ec, "new_proj", ACTION_CANT_RESTART, null (), (0), "Call to create directory failed.");
	else if ec = error_table_$namedup
	then call com_err_ (ec, "new_proj", "Creating ^a>^a", udd, Nsate.project_id);

	if ^CBI.parent_ac_sw
	then call system_privilege_$dir_priv_on (dir_priv_code);
						/* Try to allow manipulations of upgraded dir. */

	if Nsate.alias ^= ""
	then do;
		call hcs_$chname_file (udd, (Nsate.project_id), "", (Nsate.alias), ec);
		if ec ^= 0
		then call com_err_ (ec, "new_proj", "Warning: Could not add alias ""^a"" to project directory ^a>^a.",
			Nsate.alias, udd, Nsate.project_id);
	     end;

/* Calculate ACLs for project dir, etc. */

	do i = 1 to 4;
	     if Nsate.admin (i).userid ^= ""
	     then do;
		     acl_count = acl_count + 1;
		     dir_acl_array (acl_count).access_name, seg_acl_array (acl_count).access_name =
			rtrim (Nsate.admin (i).userid) || ".*";
		     dir_acl_array (acl_count).mode = A_ACCESS;
						/* We are going to use it for >sc1>update */
		     seg_acl_array (acl_count).mode = R_ACCESS;
		     seg_acl_array (acl_count).extended_mode = ""b;
		end;
	end;
	acl_count = acl_count + 1;
	dir_acl_array (acl_count).access_name = "*." || rtrim (Nsate.project_id) || ".*";

	if Nsate.project_id = "SysAdmin" | Nsate.project_id = "SysDaemon"
	     then dir_acl_array (acl_count).mode = SMA_ACCESS;
	else dir_acl_array (acl_count).mode = S_ACCESS;	/*  for *.Project.* */

/* NOTE -- acl_count is one to big for the segment acl, and for >sc1>update */
/* since the *.Project.* should not go on sc1>update */

/* Set ACL of >sc1>update. */

	if acl_count > 1				/* We have project administrator acls to add */
	then do;
		call hcs_$add_dir_acl_entries (sc1, "update", addr (dir_acl_array), acl_count - 1, ec);
		found_error = "0"b;
		if ec ^= 0
		then do i = 1 to acl_count - 1;
			if dir_acl_array (i).status_code ^= 0
			then do;
				call com_err_ (dir_acl_array (i).status_code, "new_proj",
				     "Warning: Could not set acl of ^a>^a for ^a", sc1, "update",
				     dir_acl_array (i).access_name);
				found_error = "1"b;
			     end;
		     end;
		if ec ^= 0 & ^found_error
		then call com_err_ (ec, "new_proj", "Warning: Could not set acl of ^a>^a.", sc1, "update");
	     end;

/* Set ACL of Project Directory. */

	do i = 1 to acl_count - 1;			/* Give proj admin SMA on proj dir. */
						/* -1 dodges the *.Project.* term */
	     if dir_acl_array (i).mode ^= SMA_ACCESS
	     then dir_acl_array (i).mode = SMA_ACCESS;
	end;
	call hcs_$add_dir_acl_entries (udd, (Nsate.project_id), addr (dir_acl_array), acl_count, ec);
	found_error = "0"b;
	if ec ^= 0
	then do i = 1 to acl_count;
		if dir_acl_array (i).status_code ^= 0
		then do;
			found_error = "1"b;
			call com_err_ (dir_acl_array (i).status_code, "new_proj",
			     "Warning: Could set acl of ^a>^a for ^a", udd, Nsate.project_id,
			     dir_acl_array (i).access_name);
		     end;
	     end;
	if ec ^= 0 & ^found_error
	then call com_err_ (ec, "new_proj", "Warning: Could not set acl of ^a>^a.", udd, Nsate.project_id);


/* Set initial dir ACL of project dir same as project dir ACL. */

	call hcs_$add_dir_inacl_entries (udd, (Nsate.project_id), addr (dir_acl_array), acl_count, USER_RING, ec);
	found_error = "0"b;
	if ec ^= 0
	then do i = 1 to acl_count;
		if dir_acl_array (i).status_code ^= 0
		then do;
			call com_err_ (dir_acl_array (i).status_code, "new_proj",
			     "Warning: Could not set initial acl of ^a>^a for ^a", udd, Nsate.project_id,
			     dir_acl_array (i).access_name);
			found_error = "1"b;
		     end;
	     end;
	if ec ^= 0 & ^found_error
	then call com_err_ (ec, "new_proj", "Warning: Could not set dir initial acl of ^a>^a.", udd, Nsate.project_id);

/* Create initial PMF */

	dn = get_wdir_ ();
	en = pmf_en;
	call initiate_file_$create (dn, pmf_en, RW_ACCESS, tp, ("0"b), (0), ec);
	if ec ^= 0
	then call sub_err_ (ec, "new_proj", ACTION_CANT_RESTART, null (), (0), "Could not create PMF ^a>^a.", dn,
		pmf_en);

	call ioa_$rs ("Projectid:^-^a;", char168, j, Nsate.project_id);
	substr (bcs, 1, j) = substr (char168, 1, j);

	substr (bcs, j + 1, protol) = prototype_pmf;
	j = j + protol + 1;
	if Nsate.project_authorization (1) ^= ""b	/* start them off at min */
	then do;
		call convert_access_class_$to_string_short (Nsate.project_authorization (1), char500, (0));
		call ioa_$rs ("Authorization:^-""^a"";", char500_2, k, rtrim (char500));
		substr (bcs, j, k) = substr (char500_2, 1, k);
		j = j + k;
	     end;
	do i = 1 to n_users;
	     call ioa_$rs ("personid:^-^-^a;", char168, k, u (i));
	     substr (bcs, j, k) = substr (char168, 1, k);
	     j = j + k;
	end;
	substr (bcs, j, 5) = "end;
";
	j = j + 4;


	if pmf_dir ^= ""				/* create copy of pmf for project administrators */
	then do;
		call initiate_file_$create (pmf_dir, pmf_en, RW_ACCESS, ttp, "0"b, (0), ec);
		if ec ^= 0
		then do;
			call com_err_ (ec, "new_proj", "Warning: Could not create pmf ^a.pmf in ^a",
			     Nsate.project_id, pmf_dir);
			go to SKIP_PMF;
		     end;

		do i = 1 to acl_count - 1;
		     if seg_acl_array (i).mode = R_ACCESS
		     then seg_acl_array (i).mode = RW_ACCESS;
		end;
		call hcs_$add_acl_entries (pmf_dir, pmf_en, addr (seg_acl_array), acl_count - 1, ec);
		found_error = "0"b;
		if ec ^= 0
		then do i = 1 to acl_count - 1;
			if seg_acl_array (i).status_code ^= 0
			then do;
				found_error = "1"b;
				call com_err_ (seg_acl_array (i).status_code, "new_proj",
				     "Warning: Could not set acl of ^a>^a for ^a", pmf_dir, pmf_en,
				     seg_acl_array (i).access_name);
			     end;
		     end;
		if ec ^= 0 & ^found_error
		then call com_err_ (ec, "new_proj", "Warning: Could not set acl of ^a>^a.", pmf_dir, pmf_en);

		substr (ttp -> bcs, 1, j) = substr (bcs, 1, j);
						/* copy the pmf */
		call terminate_file_ (ttp, 9 * j, TERM_FILE_TRUNC_BC_TERM, (0));
	     end;
SKIP_PMF:
	call terminate_file_ (tp, 9 * j, TERM_FILE_TRUNC_BC_TERM, (0));

/* Increase counts in head of data bases */

	reqfile.nacts = reqfile_count;
	projfile.nproj = projfile_count;
	sat.current_size = sat_count;

/* Terminate all segments. */

ERROR_EXIT:
abend:
	call cleanup_segments;
	return;


cleanup_segments:
     procedure;

	if dir_priv_code = 0
	then call system_privilege_$dir_priv_off (dir_priv_code);
	if pp ^= null ()
	then call terminate_file_ (pp, 36 * (loph + projfile.nproj * lope), TERM_FILE_TRUNC_BC_TERM, (0));
	if qp ^= null ()
	then call terminate_file_ (qp, 36 * (loqh + reqfile.nacts * loqe), TERM_FILE_TRUNC_BC_TERM, (0));
	if satp ^= null ()
	then call terminate_file_ (satp, 36 * (SAT_header_lth + sat.current_size * SAT_entry_lth),
		TERM_FILE_TRUNC_BC_TERM, (0));
	if protop ^= null ()
	then call terminate_file_ (protop, (0), TERM_FILE_TERM, ec);
	if sadp ^= null ()
	then do;
		if ^mylock
		then call set_lock_$unlock (sys_admin_data.lock, ec);
		call terminate_file_ (sadp, (0), TERM_FILE_TERM, (0));
	     end;
     end cleanup_segments;

/* -------------------------------------------------------- */

get_input:
     procedure (prompt, explanation) returns (char (*));

	declare prompt		 char (*);
	declare buf		 character (1000);
	declare explanation		 char (*);
%include query_info;

	query_info.version = query_info_version_6;
	query_info.yes_or_no_sw = "0"b;
	query_info.suppress_name_sw = "1"b;
	query_info.suppress_spacing = "1"b;
	query_info.literal_sw = "0"b;
	query_info.prompt_after_explanation = "1"b;
	query_info.explanation_ptr = addr (explanation);
	query_info.explanation_len = length (rtrim (explanation));

	call command_query_ (addr (query_info), buf, "new_proj", "^a:^25t", prompt);
	if buf = "stop"
	then go to abend;
	return (rtrim (rtrim (buf), byte (10)));

     end get_input;


get_dir_lvid:
     procedure (dir) returns (bit (36) aligned);

	dcl     dir		 char (*);
	dcl     dir_dn		 char (168);
	dcl     dir_en		 char (32);
	dcl     1 status		 aligned like status_branch automatic;

	call expand_pathname_ (dir, dir_dn, dir_en, ec);
	if ec ^= 0
	then call sub_err_ (ec, "new_proj", ACTION_CANT_RESTART, null (), (0),
		"Failed to expand pathname ^a in get_dir_lvid.", dir);
	status_ptr = addr (status);
	call hcs_$status_long (dir_dn, dir_en, (1), addr (status), null (), ec);
	if ec ^= 0
	then call sub_err_ (ec, "new_proj", ACTION_CANT_RESTART, null (), (0),
		"Failed to get status_long for ^a in get_dir_lvid.", dir);
	return (status.lvid);
     end get_dir_lvid;

/* -------------------------------------------------- */

check_user_id_syntax:  procedure (userid) returns (bit (1));

dcl	userid		char (*) parameter;
dcl	project_required	bit (1);
dcl	star_ok		bit (1);
dcl	(person, project)	char (32) varying;


	project_required = "0"b;
	star_ok = "0"b;
	goto join;

check_user_id_syntax$person_project: entry (userid) returns (bit(1)); /* requires Person.Project */

	project_required = "1"b;
	star_ok = "0"b;
	goto join;
	
check_user_id_syntax$person_project_star: entry (userid) returns (bit(1)); /* requires Person.Project but allows "*" for either */

	project_required = "1"b;
	star_ok = "1"b;
	goto join;

join:
	if length(rtrim(userid)) > 32
	then return ("0"b);

	if userid = ""
	then return ("0"b);

	person = before (userid, ".");
	if person = ""
	then return ("0"b);
	if length(person) > 22
	then return ("0"b);
	if person = "*" & ^star_ok
	then return ("0"b);

	project = rtrim(after(userid, "."));
	if project = ""
	then return ("0"b);
	if length(project) > 9
	then return ("0"b);
	if project = "*" & ^star_ok
	then return ("0"b);

	return ("1"b);

end check_user_id_syntax;


test:
     entry (asc1, audd);
	dcl     (asc1, audd)	 char (*);

	call absolute_pathname_ (asc1, sc1, (0));
	call absolute_pathname_ (audd, udd, (0));
	call ioa_ ("udd = ^a^/sc1 = ^a", udd, sc1);
	return;

/* -------------------------------------------------- */

%include edit_proj_arguments_;
%include user_attributes;
%include sys_admin_data;
%include projfile;
%include reqfile;
%include sat;
%include create_branch_info;
%include acl_structures;
%include terminate_file;
%include access_mode_values;
%include condition_info_header;
%include sub_error_info;
%include condition_info;
%include status_structures;
%include sub_err_flags;
%include pnt_entry;

     end new_proj;
