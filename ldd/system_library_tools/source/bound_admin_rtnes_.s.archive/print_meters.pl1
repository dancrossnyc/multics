/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
%;
/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

print_meters: proc;

/* PRINT_METERS - Print statistics sampled by answering service.

   THVV */
/* modified to use hardcore defs 77.04.08 THVV */

dcl  dn char (168) aligned,
     en char (32) aligned,
     statp ptr,
    (tcmp, tcdp) ptr,
     double fixed bin (71) aligned based,
     scaled fixed bin (35, 18) aligned based,
     single fixed bin (35) aligned based,
     time float bin,
     meter_time float bin,
     cpu_time float bin,
     cpu_delta float bin,
     idle_val float bin,
     idle_delta float bin,
     zero_idle_val float bin,
     zidle_delta float bin,
     kmu float bin,
     kmu_delta float bin,
     responseval float bin,
    (datstr, datstr1, datstr2, crahs) char (16) aligned,
     upt fixed bin (71) init (0),
    (i, n) fixed bin,
     ap ptr,
     al fixed bin,
     ec fixed bin (35),
    (p1, q1) ptr;

dcl  TCMave_eligible_loc fixed bin (18);
dcl  TCMavequeue_loc fixed bin (18);
dcl  TCMcumulative_memory_usage_loc fixed bin (18);
dcl  TCMidle_loc fixed bin (18);
dcl  TCMinitialize_time_loc fixed bin (18);
dcl  TCMlast_time_loc fixed bin (18);
dcl  TCMmp_idle_loc fixed bin (18);
dcl  TCMprocessor_time_loc fixed bin (18);
dcl  TCMresponse_count_loc fixed bin (18);
dcl  TCMresponse_time_loc fixed bin (18);
dcl  TCMzero_idle_loc fixed bin (18);
dcl  offset fixed bin (18);

dcl  ring0_get_$segptr entry (char (*), char (*), ptr, fixed bin (35));
dcl  ring0_get_$definition entry (ptr, char (*), char (*), fixed bin (18), fixed bin, fixed bin (35));
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35)),
     expand_path_ entry (ptr, fixed bin, ptr, ptr, fixed bin (35)),
     ioa_ entry options (variable),
     ioa_$rsnnl entry options (variable),
     date_time_ entry (fixed bin (71), char (*) aligned),
     com_err_ entry options (variable);

dcl  hcs_$initiate entry (char (*) aligned, char (*) aligned, char (*) aligned, fixed bin (1),
     fixed bin (2), ptr, fixed bin (35)),
     hcs_$terminate_noname entry (ptr, fixed bin (35));


dcl (addr, addrel, null, substr, divide, mod) builtin;

%include stat_seg;

dcl  heading char (120) aligned int static init
    ("^/Time^3xUnits CP Kmem MPD^2xMeter time^4xCPU time^3xAvg queue^5xResponse^7xIdle^4xZero idle Avg eligible^8xK mu");

/* ================================================================= */

	call cu_$arg_ptr (1, ap, al, ec);
	if ec ^= 0 then do;
er:	     call com_err_ (ec, "print_meters", "");
fail:	     return;
	end;
	call expand_path_ (ap, al, addr (dn), addr (en), ec);
	if ec ^= 0 then go to er;
	call hcs_$initiate (dn, en, "", 0, 1, statp, ec); /* initiate meter seg */
	if statp = null then go to er;

	call date_time_ (statistics.time_of, datstr);
	call ioa_ ("system statistics as of ^a", datstr);

	n = statistics.index;
	if statistics.wrapped ^= 0 then do;
	     call ioa_ ("statistics wrapped");
	end;

	cpu_delta, idle_delta, zidle_delta = 0;
	kmu_delta = 0e0;
	call ioa_ (heading);
	i = 1;
redoit:	q1 = addr (statistics.tcdata_contents (i, 1));
	time = statistics.time (i);
	i = i + 1;
	if i > n then go to exit;
	if statistics.time (i) < time then go to redoit;
	call date_time_ (statistics.time (i), datstr);
	tcmp = addr (statistics.tcdata_contents (i, 1));
	call ring0_get_$segptr ("", "tc_data", tcdp, ec);
	if ec ^= 0 then call error ("tc_data");
	call ring0_get_$definition (tcdp, "", "ave_eligible", offset, (0), ec);
	if ec ^= 0 then call error ("sst.ave_eligible");
	TCMave_eligible_loc = offset;
	call ring0_get_$definition (tcdp, "", "avequeue", offset, (0), ec);
	if ec ^= 0 then call error ("sst.avequeue");
	TCMavequeue_loc = offset;
	call ring0_get_$definition (tcdp, "", "cumulative_memory_usage", offset, (0), ec);
	if ec ^= 0 then call error ("sst.cumulative_memory_usage");
	TCMcumulative_memory_usage_loc = offset;
	call ring0_get_$definition (tcdp, "", "idle", offset, (0), ec);
	if ec ^= 0 then call error ("sst.idle");
	TCMidle_loc = offset;
	call ring0_get_$definition (tcdp, "", "mp_idle", offset, (0), ec);
	if ec ^= 0 then call error ("sst.mp_idle");
	TCMmp_idle_loc = offset;
	call ring0_get_$definition (tcdp, "", "response_count", offset, (0), ec);
	if ec ^= 0 then call error ("sst.response_count");
	TCMresponse_count_loc = offset;
	call ring0_get_$definition (tcdp, "", "response_time", offset, (0), ec);
	if ec ^= 0 then call error ("sst.response_time");
	TCMresponse_time_loc = offset;
	call ring0_get_$definition (tcdp, "", "last_time", offset, (0), ec);
	if ec ^= 0 then call error ("sst.last_time");
	TCMlast_time_loc = offset;
	call ring0_get_$definition (tcdp, "", "initialize_time", offset, (0), ec);
	if ec ^= 0 then call error ("sst.initialize_time");
	TCMinitialize_time_loc = offset;
	call ring0_get_$definition (tcdp, "", "processor_time", offset, (0), ec);
	if ec ^= 0 then call error ("sst.processor_time");
	TCMprocessor_time_loc = offset;
	call ring0_get_$definition (tcdp, "", "zero_idle", offset, (0), ec);
	if ec ^= 0 then call error ("sst.zero_idle");
	TCMzero_idle_loc = offset;
	call ring0_get_$definition (tcdp, "", "mp_idle", offset, (0), ec);
	if ec ^= 0 then call error ("sst.mp_idle");
	TCMmp_idle_loc = offset;

	meter_time = addrel (tcmp, TCMlast_time_loc) -> double - addrel (tcmp, TCMinitialize_time_loc) -> double;
	kmu_delta = addrel (tcmp, TCMcumulative_memory_usage_loc) -> double / 1e6 - kmu;
	kmu = addrel (tcmp, TCMcumulative_memory_usage_loc) -> double / 1e6;
	cpu_delta = addrel (tcmp, TCMprocessor_time_loc) -> double - cpu_time;
	cpu_time = addrel (tcmp, TCMprocessor_time_loc) -> double;
	idle_delta = addrel (tcmp, TCMidle_loc) -> double - idle_val;
	idle_val = addrel (tcmp, TCMidle_loc) -> double;
	zidle_delta = addrel (tcmp, TCMzero_idle_loc) -> double - zero_idle_val;
	zero_idle_val = addrel (tcmp, TCMzero_idle_loc) -> double;
	responseval = addrel (tcmp, TCMresponse_time_loc) -> double / 1e6;
	if addrel (tcmp, TCMresponse_count_loc) -> single > 0 then
	     responseval = responseval / addrel (tcmp, TCMresponse_count_loc) -> single;
	else responseval = -1e0;
	if uptime (i) ^= upt then do;
	     upt = statistics.uptime (i);
	     call date_time_ (upt, datstr1);
	     if i = 1 then do;
xtx:		call ioa_ ("^/^a up at ^a", statistics.sysid (i), datstr1);
	     end;
	     else do;
		if statistics.crashtime (i-1) = 0 then go to xtx;
		call date_time_ (statistics.crashtime (i-1), datstr2);
		crahs = statistics.erfno (i-1);
		if crahs = "" then crahs = "shutdown";
		call ioa_ ("^/^a up at ^a after ^a at ^a",
		     statistics.sysid (i), datstr1, crahs, datstr2);
	     end;
	     cpu_delta, idle_delta, zidle_delta = 0;
	     kmu_delta = 0e0;
	end;
	call ioa_ ("^6a ^5.1f ^2d ^4d ^3.1f ^12a ^12a ^9.2f ^12.3f ^12a ^12a ^10.3f ^12.3f",
	     substr (datstr, 11, 6), statistics.units (i) / 1e1,
	     statistics.ncpu (i), statistics.kmem (i),
	     statistics.kbulk (i) / 1024e0,
	     tcv (meter_time), tcv (cpu_delta),
	     addrel (tcmp, TCMavequeue_loc) -> scaled, responseval,
	     tcv (idle_delta), tcv (zidle_delta),
	     addrel (tcmp, TCMave_eligible_loc) -> scaled, kmu_delta);
	go to redoit;

exit:	call ioa_ ("^/^/END");
	call hcs_$terminate_noname (statp, ec);

tcv:	proc (x) returns (char (12) aligned);

dcl (sec, min, hr, junk) fixed bin,
     rs char (12) aligned;

dcl  x float bin;

	     sec = x * 1e-6;
	     min = divide (sec, 60, 17, 0);
	     hr = divide (min, 60, 17, 0);
	     min = mod (min, 60);
	     sec = mod (sec, 60);
	     call ioa_$rsnnl ("^4d^3d^3d", rs, junk, hr, min, sec);
	     substr (rs, 5, 1) = ":";
	     substr (rs, 8, 1) = ":";
	     if substr (rs, 6, 1) = " " then substr (rs, 6, 1) = "0";
	     if substr (rs, 9, 1) = " " then substr (rs, 9, 1) = "0";
	     return (rs);
	end;

error:	proc (x);

dcl  x char (*);

	     call com_err_ (ec, "print_meters", "cannot locate ^a", x);
	     go to fail;

	end error;

     end print_meters;
