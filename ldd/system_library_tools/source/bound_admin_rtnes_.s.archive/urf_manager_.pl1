/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */

/* format: style2 */
urf_manager_:
     procedure ();

	return;					/* Not an Entry */

/* Data Base Manager for User Registration File */
/* Written by C. Hornig, July 1979 */
/* Modified 1984-08-10 by E. Swenson for Version 3 MSTBs. */

	declare (
	        Pid		 character (*),
	        (Urfep, Old_urfep)	 pointer,
	        Record		 fixed bin (35),
	        Urfdir		 character (*),
	        Code		 fixed bin (35)
	        )			 parameter;

%include urf_entry;

	declare (
	        error_table_$noentry,
	        error_table_$noalloc,
	        error_table_$inconsistent,
	        error_table_$action_not_performed
	        )			 fixed bin (35) external static;

	declare ms_table_mgr_$open	 entry (character (*), character (*), character (*), pointer, pointer,
				 fixed bin (35)),
	        ms_table_mgr_$close	 entry (pointer, fixed bin (35)),
	        ms_table_mgr_$abs_entry
				 entry (ptr, fixed bin (35), char (*), bit (1) aligned, ptr, fixed bin (35),
				 fixed bin (35)),
	        ms_table_mgr_$find_entry
				 entry (ptr, char (*), ptr, bit (1) aligned, fixed bin (35), fixed bin (35)),
	        ms_table_mgr_$delete_entry
				 entry (pointer, character (*), fixed bin (35)),
	        ms_table_mgr_$new_entry
				 entry (pointer, character (*), pointer, fixed bin (35)),
	        ms_table_mgr_$update_entry
				 entry (ptr, ptr, fixed bin (35));

	declare urfdir		 init (">user_dir_dir>SysAdmin>admin") character (168) internal static;
	declare (urf_tag, urfhp)	 pointer init (null ()) internal static;
	declare initialized		 bit init ("0"b) internal static;

	dcl     NO_WRITE		 bit (1) aligned internal static options (constant) initial ("0"b);

	declare code		 fixed bin (35),
	        pid		 character (32),
	        record		 fixed bin (35),
	        user_urfep		 pointer;

	declare cleanup		 condition;

/* * * * * * * * * * GET_ABS_ENTRY * * * * * * * * * */

get_abs_entry:
     entry (Record, Pid, Urfep, Code);

	user_urfep = Urfep;
	record = Record;
	call init;
	call ms_table_mgr_$abs_entry (urf_tag, record, pid, NO_WRITE, urfep, (0), code);
	Pid = pid;
	goto get_common;

/* * * * * * * * * * GET_ENTRY * * * * * * * * * */

get_entry:
     entry (Pid, Urfep, Code);

	user_urfep = Urfep;
	call init;
	call find;
get_common:
	if user_urfep ^= null ()
	then if urfep = null ()
	     then string (user_urfep -> urf_entry) = "";
	     else user_urfep -> urf_entry = urf_entry;

return_to_caller:
	Code = code;
	return;

/* * * * * * * * * * UPDATE_ENTRY * * * * * * * * * */

update_entry:
     entry (Pid, Old_urfep, Urfep, Code);

	user_urfep = Urfep;
	call init;
	call find;
	if unspec (Old_urfep -> urf_entry) ^= unspec (urf_entry)
	then do;
		code = error_table_$inconsistent;
		goto return_to_caller;
	     end;
	if user_urfep ^= null ()
	then do;
		urf_entry = user_urfep -> urf_entry;
		call ms_table_mgr_$update_entry (urf_tag, urfep, code);
	     end;
	goto return_to_caller;

/* * * * * * * * * * ADD_ENTRY * * * * * * * * * */

add_entry:
     entry (Pid, Urfep, Code);

	user_urfep = Urfep;
	call init;
	call ms_table_mgr_$new_entry (urf_tag, pid, urfep, code);
	if code ^= 0
	then goto return_to_caller;
	urf_entry = user_urfep -> urf_entry;
	call ms_table_mgr_$update_entry (urf_tag, urfep, code);
	goto return_to_caller;

/* * * * * * * * * * REMOVE_ENTRY * * * * * * * * * */

remove_entry:
     entry (Pid, Code);

	pid = Pid;
	call init;
	call ms_table_mgr_$delete_entry (urf_tag, pid, code);
	goto return_to_caller;

/* * * * * **  * * * TEST * * * * * * * ** */

test:
     entry (Urfdir);

	urfdir = Urfdir;
	if urf_tag ^= null ()
	then call ms_table_mgr_$close (urf_tag, code);
	urf_tag = null ();
	initialized = "0"b;
	return;

/* * * * * * * * * * FIND * * * * * * * * * */

find:
     procedure;
	call ms_table_mgr_$find_entry (urf_tag, pid, urfep, NO_WRITE, (0), code);
	if urfep = null ()
	then goto return_to_caller;
     end find;

/* * * * * * * * ** * INIT * * * * * * * * * */

init:
     procedure;
	Code, code = 0;
	pid = Pid;

	if ^initialized
	then do;
		call ms_table_mgr_$open (urfdir, "URF", "URF", urf_tag, urfhp, code);
		if code ^= 0
		then goto return_to_caller;

		initialized = "1"b;
	     end;
     end init;

     end urf_manager_;
