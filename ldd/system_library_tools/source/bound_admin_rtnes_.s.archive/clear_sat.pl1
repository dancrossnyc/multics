/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   *********************************************************** */
/**** Program to trim deleted satentries out of the sat.
      To be used on smf.cur.sat at "bill accept" time.
      BIM 1984-09-12 */

/* format: style2 */

clear_sat:
     procedure options (variable);

	declare com_err_		 entry () options (variable);
	declare cu_$arg_count	 entry (fixed bin, fixed bin (35));
	declare cu_$arg_ptr		 entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
	declare expand_pathname_	 entry (character (*), character (*), character (*), fixed binary (35));
	declare initiate_file_	 entry (character (*), character (*), bit (*), pointer, fixed binary (24),
				 fixed binary (35));
	declare pathname_		 entry (character (*), character (*)) returns (character (168));
	declare terminate_file_	 entry (pointer, fixed binary (24), bit (*), fixed binary (35));


	declare arg_count		 fixed bin;
	declare ap		 pointer;
	declare al		 fixed bin (21);
	declare argument		 char (al) based (ap);
	declare code		 fixed bin (35);
	declare dir_name		 char (168);
	declare entryname		 char (32);
	declare (satp, satep)	 pointer;		/* live */
	declare satex		 fixed bin;
	declare deleted_satex	 fixed bin;
	declare last_satex		 fixed bin;
	declare new_n_projects	 fixed bin;
	declare deleted_satep	 pointer;

	declare ME		 char (32) init ("clear_sat") int static options (constant);

%include sat;
%include user_attributes;
%include access_mode_values;
%include terminate_file;


	call cu_$arg_count (arg_count, code);
	if code ^= 0
	then do;
		call com_err_ (code, ME);
		return;
	     end;

	if arg_count ^= 1
	then do;
		call com_err_ (0, ME, "Usage: ^a SAT_PATH.sat", ME);
		return;
	     end;

	satp = null ();

	call cu_$arg_ptr (1, ap, al, (0));
	call expand_pathname_ (argument, dir_name, entryname, code);
	if code ^= 0
	then do;
		call com_err_ (code, ME, "^a", argument);
		return;
	     end;

	call initiate_file_ (dir_name, entryname, RW_ACCESS, satp, (0), code);
	if code ^= 0
	then do;
		call com_err_ (code, ME, "^a", pathname_ (dir_name, entryname));
		return;
	     end;

	sat.version = -1;				/* BROKEN */
	deleted_satex = -1;
	last_satex = -1;
	new_n_projects = 0;
	do satex = 1 to sat.current_size;
	     satep = addr (sat.project (satex));
	     if project.state ^= 1			/* deleted or free (not in use) */
	     then if deleted_satex < 0
		then deleted_satex = satex;
		else ;
	     else do;
		     new_n_projects = new_n_projects + 1;
		     if deleted_satex > 0
		     then do;
			     deleted_satep = addr (sat.project (deleted_satex));
			     deleted_satep -> project = satep -> project;
			     last_satex = max (last_satex, deleted_satex);
						/* note highest we have seen */
			     project.state = 0;
			     deleted_satep = addr (sat.project (deleted_satex + 1));
			     if deleted_satep -> project.state ^= 1
			     then deleted_satex = deleted_satex + 1;
			     else deleted_satex = satex;
						/* we are now free */
			end;
		     else last_satex = satex;		/* don't move, but note */
		end;
	end;

	if last_satex ^= new_n_projects
	then call com_err_ (0, ME, "Inconsistency: n_projects ^d but last non-empty project index ^d.", new_n_projects,
		last_satex);

	sat.n_projects = new_n_projects;
	sat.current_size = last_satex;
	sat.version = SAT_version;
	call terminate_file_ (satp, (0), TERM_FILE_TERM, (0));
	return;
     end clear_sat;
