/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */





/****^  HISTORY COMMENTS:
  1) change(86-09-05,Parisek), approve(87-06-17,MCR7570),
     audit(87-06-17,Hirneisen), install(87-08-06,MR12.1-1066):
     Create a dummy SAT entry for the old (renamed) project id to be used by
     up_sat_ to recognize a renamed project so it can flag the corresponding
     system SAT entry as renamed for billing purposes.  Also update pdt
     elements not previously updated (project_dir & home_dir).
     Also revise ACLs of project admins on renamed project, and ACLs for
     individual users of their own home dirs.
                                                   END HISTORY COMMENTS */



rename_proj: proc;

/* RENAME_PROJ - Used by user accounts to rename a project.

   THVV */
/* Modified March 1982 by E. N. Kittlitz to eliminate proj_admin_seg. */

dcl dn char (168) aligned,
     en char (32) aligned,
    (reqi, projj) fixed bin,
    (i, j, k, ai) fixed bin,
     sat_count fixed bin,
     mylock bit (1) init ("0"b),
     movelen fixed bin (24),
     ap ptr,
     al fixed bin,
     bchr char (al) unaligned based (ap),
     ec fixed bin (35);

dcl (old_name, new_name) char (12) aligned;
dcl (old_alias, new_alias) char (8) aligned;
dcl (old_pdt, new_pdt) char (32) aligned;

dcl  (tp, tpp) ptr;

dcl  myname char (24),
     myproj char (12);

dcl 1 add_dir_acl (4) aligned,
    2 user char (32),
    2 mode bit (36),
    2 code fixed bin (35);
dcl 1 add_seg_acl (4) aligned,
    2 user char (32),
    2 mode bit (36),
    2 mbz fixed bin (35),
    2 code fixed bin (35);
dcl 1 del_acl (4) aligned,
    2 user char (32),
    2 code fixed bin (35);
dcl 1 add_user_dir_acl aligned,			/* for setting ACLs of users home_dirs for themselves */
    2 user char (32),
    2 mode bit (36),
    2 code fixed bin (35);
dcl 1 del_user_acl aligned,
    2 user char (32),
    2 code fixed bin (35);				/* for users own home_dirs */
dcl  old (4) char (32), new (4) char (32);

dcl  USERRING fixed bin (3) init (4);
dcl  special_project bit (1) init ("0"b);

dcl  n_acladd fixed bin init (0),
     n_acldel fixed bin init (0),
     udd char (64) aligned int static init (">user_dir_dir"),
     sc1_pdt char (64) aligned int static init (">system_control_1>pdt"),
     sc1 char (64) aligned int static init (">system_control_1");
dcl  pp ptr,					/* ptr to projfile */
     qp ptr,					/* ptr to reqfile */
     satp ptr,					/* ptr to sat */
     sadp ptr,					/* ptr to sys_admin_data */
     satep ptr,					/* ptr to sat entry. */
    (pdtp, pdtep) ptr,
    (pp1, pp2) ptr,
    (qp1, qp2) ptr;

dcl  set_lock_$lock entry (bit (36) aligned, fixed bin, fixed bin (35)),
     set_lock_$unlock entry (bit (36) aligned, fixed bin (35)),
     error_table_$locked_by_this_process fixed bin (35) ext,
     error_table_$invalid_lock_reset fixed bin (35) ext;

dcl (addr, null, substr, index, verify, rtrim) builtin;

dcl  user_info_ entry options (variable),
     cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35)),
     get_wdir_ entry () returns (char (168) aligned),
     ioa_ entry options (variable),
     ioa_$rsnnl entry options (variable),
     com_err_ entry options (variable);

dcl  hcs_$add_acl_entries entry (char (*) aligned, char (*) aligned, ptr, fixed bin, fixed bin (35));
dcl  hcs_$add_dir_acl_entries entry (char (*) aligned, char (*) aligned, ptr, fixed bin, fixed bin (35));
dcl  hcs_$add_dir_inacl_entries entry (char (*) aligned, char (*) aligned, ptr, fixed bin, fixed bin (3),
     fixed bin (35));
dcl  hcs_$chname_file entry (char (*) aligned, char (*) aligned, char (*) aligned, char (*) aligned, fixed bin (35));
dcl  hcs_$delete_acl_entries entry (char (*) aligned, char (*) aligned, ptr, fixed bin, fixed bin (35));
dcl  hcs_$delete_dir_acl_entries entry (char (*) aligned, char (*) aligned, ptr, fixed bin, fixed bin (35));
dcl  hcs_$delete_dir_inacl_entries entry (char (*) aligned, char (*) aligned, ptr, fixed bin, fixed bin (3),
     fixed bin (35));
dcl  hcs_$initiate entry (char (*) aligned, char (*) aligned, char (*) aligned, fixed bin (1), fixed bin (2),
     ptr, fixed bin (35));
dcl  hcs_$terminate_noname entry (ptr, fixed bin (35));
dcl  terminate_file_ entry (ptr, fixed bin (24), bit (*), fixed bin (35));

dcl 1 movetable based aligned,
    2 moveary (movelen) fixed bin (35);

%include user_attributes;
%include sys_admin_data;
%include pdt;
%include projfile;
%include reqfile;
%include sat;
%include terminate_file;

dcl 1 Nsate aligned like project;

dcl 1 Nprojfile aligned,
    2 id char (12),					/* project ID */
    2 title char (52),				/* project title */
    2 inv char (32),				/* name of principal investigator */
    2 inv_addr char (32),				/* address */
    2 sup char (32),				/* name of supervisor */
    2 sup_addr char (32),				/* address */
    2 sup_phone char (16),				/* telephone */
    2 on fixed bin (71),				/* date on */
    2 off fixed bin (71),				/* date off */
    2 disk_psec fixed bin (71),			/* project disk page-seconds */
    2 disk_quota fixed bin (35),			/* project disk quota */
    2 disk_use fixed bin (35),			/* current project disk occupancy */
    2 disk_infs fixed bin (35),			/* number of inferior directories on proj */
    2 misc_charges float bin,				/* manuals, etc */
    2 n_misc fixed bin,				/* number of entries */
    2 processed fixed bin;				/* temp for usage-report */

dcl 1 Nreqfile aligned,
    2 acctid char (12),				/* account id. usually same as Proj */
    2 mitacct char (12),				/* MIT account no. */
    2 reqno char (12),				/* requisition or PO no. */
    2 qflag char (8),				/* class & activity */
    2 procssd fixed bin,				/* temp for usage report */
    2 qdn fixed bin (71),				/* date on for account */
    2 qdf fixed bin (71),				/* date off */
    2 billing_name char (32),				/* where to send bill */
    2 billing_addr char (32),
    2 chg_mo float bin (63),				/* charges this month */
    2 chg_tr float bin (63),				/* charges this req */
    2 req_amt float bin (63),				/* req face value */
    2 cutoff fixed bin (71);				/* term date for req */

dcl  LEGAL char (71) int static init			/* Legal chars for project ID. */
    ("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'_`^~/-abcdefghijklmnopqrstuvwxyz ");

/* ======================================================== */

	dn = get_wdir_ ();
	en = "sys_admin_data";
	call hcs_$initiate (dn, en, "", 0, 1, sadp, ec);
	if sadp = null then go to er1;
	call set_lock_$lock (sys_admin_data.lock, 60, ec);
	if ec ^= 0 then
	     if ec = error_table_$locked_by_this_process then mylock = "1"b;
	     else if ec ^= error_table_$invalid_lock_reset then do;
		call com_err_ (ec, "rename_proj", "Sys_admin_data is locked by ^a", sys_admin_data.locker);
		go to exit1;
	     end;
	call user_info_ (myname, myproj);
	sys_admin_data.locker = myname;
	en = "smf.cur.sat";
	call hcs_$initiate (dn, en, "", 0, 1, satp, ec);
	if satp = null then do;
er1:	     call com_err_ (ec, "rename_proj", en);
	     go to abend;
	end;
	en = "projfile";
	call hcs_$initiate (dn, en, "", 0, 1, pp, ec);
	if pp = null then go to er1;
	en = "reqfile";
	call hcs_$initiate (dn, en, "", 0, 1, qp, ec);
	if qp = null then go to er1;

	call cu_$arg_ptr (1, ap, al, ec);		/* was Project ID supplied */
	if ec ^= 0 then go to er1;
	old_name = bchr;				/* Get old name of project */
	Nsate.project_id = old_name;

	do i = 1 to sat.current_size;
	     satep = addr (sat.project (i));
	     if project.state = 1 then
		if project.project_id = old_name then go to satfnd;
	end;
	call com_err_ (0, "rename_proj", "Project ""^a"" is not registered.", old_name);
	go to abend;

satfnd:	do reqi = 1 to reqfile.nacts while (old_name ^= reqfile.acctid (reqi)); end;
	if reqi > reqfile.nacts then do;
	     call com_err_ (0, "rename_proj", "Project ""^a"" is not in reqfile.", old_name);
	     return;
	end;
	if reqfile.qdf (reqi) ^= 0 then call ioa_ ("Warning: Project ""^a"" deleted from reqfile.",
	     old_name);
	do projj = 1 to projfile.nproj while (old_name ^= projfile.id (projj)); end;
	if projj > projfile.nproj then do;
	     call com_err_ (0, "rename_proj", "Project ""^a"" is not in projfile.", old_name);
	     return;
	end;
	if projfile.off (projj) ^= 0 then call ioa_ ("Warning: project ""^a"" deleted from projfile.",
	     old_name);

/* Get the new name */

	call cu_$arg_ptr (2, ap, al, ec);		/* was Project ID supplied */
	if ec ^= 0 then go to er1;
	new_name = bchr;				/* Get desired new name */
	if verify (new_name, LEGAL) ^= 0 then do;
	     call ioa_ ("rename_proj: illegal character in new project ID ""^a""", new_name);
	     go to abend;
	end;
	if index (substr (LEGAL, 1, 36), substr (new_name, 1, 1)) = 0 then do;
	     call ioa_ ("rename_proj: New project ID does not begin with capital letter or digit.");
	     go to abend;
	end;
	if new_name ^= old_name then
	     do i = 1 to sat.current_size;
	     tp = addr (sat.project (i));
	     if tp -> project.state ^= 0 then
		if tp -> project.project_id = new_name then do;
		     call com_err_ (0, "rename_proj", "Project ""^a"" already exists.", new_name);
		     go to abend;
		end;
	end;

	call ioa_$rsnnl ("^a.pdt", new_pdt, i, new_name);
	call ioa_$rsnnl ("^a.pdt", old_pdt, i, old_name);

	old_alias = project.alias;
	call cu_$arg_ptr (3, ap, al, ec);		/* Get new alias */
	if ec ^= 0 then new_alias = "";
	else do;
	     new_alias = bchr;
	     if new_alias ^= old_alias then
		do i = 1 to sat.current_size;
		tp = addr (sat.project (i));
		if tp -> project.state = 1 then
		     if tp -> project.alias = new_alias then do;
			call com_err_ (0, "rename_proj", "Alias ^a is already used by project ^a",
			     new_alias, tp -> project.project_id);
			go to abend;
		     end;
	     end;
	end;

/* Copy the project data so we can edit it. */

	Nsate = project;				/* Copy whole SAT entry. */

	movelen = lope;				/* Copy projfile entry. */
	pp1 = addr (projfile.projfiletab (projj));
	pp2 = addr (Nprojfile);
	pp2 -> movetable = pp1 -> movetable;

	movelen = loqe;				/* Copy whole reqfile entry. */
	qp1 = addr (reqfile.reqfiletab (reqi));
	qp2 = addr (Nreqfile);
	qp2 -> movetable = qp1 -> movetable;

/* Renaming of project */

	Nsate.project_id = new_name;
	Nsate.alias = new_alias;
	Nprojfile.id = new_name;
	Nreqfile.acctid = new_name;

/* Fix Nsate.admin (i) and Nsate.project_dir */

	do i = 1 to 4;
	     k = index (Nsate.admin (i).userid, ".");
	     if substr (Nsate.admin (i).userid, k+1) = old_name then
		substr (Nsate.admin (i).userid, k+1) = new_name;
	end;

	call ioa_$rsnnl ("^a>^a", Nsate.project_dir, i, udd, new_name);

/* Now adjust ACLs if any changes were made. */

	do i = 1 to 4;
	     old (i) = project.admin (i).userid;
	     new (i) = Nsate.admin (i).userid;
	end;
	do i = 1 to 4;
	     do j = 1 to 4;
		if old (i) = new (j) then do;
		     old (i), new (j) = "";
		     go to okacl;
		end;
	     end;
okacl:	end;
	do i = 1 to 4;
	     if old (i) ^= "" then do;
		n_acldel = n_acldel + 1;
		j = index (old (i), " ");
		del_acl (n_acldel).user = substr (old (i), 1, j-1) || ".*";
	     end;
	     if new (i) ^= "" then do;
		n_acladd = n_acladd + 1;
		j = index (new (i), " ");
		add_seg_acl (n_acladd).user = substr (new (i), 1, j-1) || ".*";
		add_seg_acl (n_acladd).mode = "100"b;
		add_seg_acl (n_acladd).mbz = 0;
		add_dir_acl (n_acladd).user = add_seg_acl (n_acladd).user;
		add_dir_acl (n_acladd).mode = "111"b;
	     end;
	end;
	n_acldel = n_acldel + 1;
	call ioa_$rsnnl ("*.^a.*", del_acl (n_acldel).user, i, old_name);
	n_acladd = n_acladd + 1;
	call ioa_$rsnnl ("*.^a.*", add_dir_acl (n_acladd).user, i, new_name);
	add_dir_acl (n_acladd).mode = "100"b;		/* "S" access for others on project */

	call hcs_$delete_dir_acl_entries (sc1, "update", addr (del_acl), n_acldel-1, ec);
	call hcs_$delete_acl_entries (sc1_pdt, old_pdt, addr (del_acl), n_acldel-1, ec);
	call hcs_$delete_dir_inacl_entries (udd, old_name, addr (del_acl), n_acldel, USERRING, ec);
	call hcs_$delete_dir_acl_entries (udd, old_name, addr (del_acl), n_acldel, ec);
	call hcs_$add_acl_entries (sc1_pdt, old_pdt, addr (add_seg_acl), n_acladd-1, ec);
	if ec ^= 0 then do i = 1 to n_acladd-1;
	     if add_seg_acl (i).code ^= 0 then
		call com_err_ (add_seg_acl (i).code, "rename_proj", "Cannot add ^a to ACL of ^a",
		add_seg_acl (i).user, old_pdt);
	end;
	call hcs_$add_dir_inacl_entries (udd, old_name, addr (add_dir_acl), n_acladd, USERRING, ec);
	if ec ^= 0 then do i = 1 to n_acladd-1;
	     if add_dir_acl (i).code ^= 0 then
		call com_err_ (add_dir_acl (i).code, "rename_proj", "Cannot add ^a to initial ACL of ^a>^a",
		add_dir_acl (i).user, udd, old_name);
	end;
	call hcs_$add_dir_acl_entries (udd, old_name, addr (add_dir_acl), n_acladd, ec);
	if ec ^= 0 then do i = 1 to n_acladd;
	     if add_dir_acl (i).code ^= 0 then
		call com_err_ (add_dir_acl (i).code, "rename_proj", "Cannot add ^a to ACL of ^a>^a",
		add_dir_acl (i).user, udd, old_name);
	end;
	n_acladd = n_acladd - 1;
	do i = 1 to n_acladd;
	     add_dir_acl (i).mode = "001"b;
	end;
	call hcs_$add_dir_acl_entries (sc1, "update", addr (add_dir_acl), n_acladd, ec);
	if ec ^= 0 then do i = 1 to n_acladd;
	     if add_dir_acl (i).code ^= 0 then
		call com_err_ (add_dir_acl (i).code, "rename_proj", "Cannot add ^a to ACL of ^a>^a",
		add_dir_acl (i).user, sc1, "update");
	end;

/* Rename the project directory. */

	call hcs_$chname_file (udd, old_name, old_name, new_name, ec);
	if ec ^= 0 then
	     call com_err_ (ec, "rename_proj", "Cannot add name ^a to ^a>^a", new_name, udd, old_name);
	if old_alias ^= "" then
	     call hcs_$chname_file (udd, old_alias, old_alias, new_alias, ec);
	if ec ^= 0 then
	     call com_err_ (ec, "rename_proj", "Cannot add alias ^a to ^a>^a", new_alias, udd, old_alias);

/* Fix up the project's PDT, and then rename it */

	en = old_pdt;
	call hcs_$initiate (sc1_pdt, en, "", 0, 1, pdtp, ec);
	if pdtp = null then go to er2;
	pdt.project_name = new_name;			/* update pdt entries */
	pdt.project_dir = rtrim(udd) || ">" || rtrim(new_name);
	call hcs_$chname_file (sc1_pdt, old_pdt, old_pdt, new_pdt, ec);
	if ec ^= 0 then do;
er2:	     call com_err_ (ec, "rename_proj", "Cannot add name ^a to ^a>^a", new_pdt, sc1_pdt, old_pdt);
	end;
	do ai = 1 to n_acladd;
	     add_dir_acl (ai).mode = "111"b;
	end;
	add_user_dir_acl.mode = "111"b;		/* for user's own home_dir */
	do i = 1 to pdt.current_size;
	     tpp = addr (pdt.user (i));
	     tpp -> user.home_dir = rtrim(pdt.project_dir) || ">" || rtrim(tpp -> user.person_id);
	     call hcs_$add_dir_acl_entries (pdt.project_dir, tpp -> user.person_id, addr (add_dir_acl), n_acladd, ec);
	     if ec ^= 0 then do ai = 1 to n_acladd;
		if add_dir_acl (ai).code ^= 0 then
		     call com_err_ (add_dir_acl (ai).code, "rename_proj", "Cannot add ^a to ACL of ^a>^a", add_dir_acl (ai).user, rtrim(pdt.project_dir), tpp -> user.home_dir);
	     end;
	     call hcs_$delete_dir_acl_entries (pdt.project_dir, tpp -> user.person_id, addr (del_acl), n_acldel, ec);
	     if ec ^= 0 then do ai = 1 to n_acldel;
		if del_acl (ai).code ^= 0 then
		     call com_err_ (del_acl (ai).code, "rename_proj", "Cannot delete ^a from ACL of ^a>^a", del_acl (ai).user, rtrim(pdt.project_dir), tpp -> user.home_dir);
	     end;
	     add_user_dir_acl.user = rtrim(tpp -> user.person_id) || "." || rtrim(new_name) || ".*";
	     del_user_acl.user = rtrim(tpp -> user.person_id) || "." || rtrim(old_name) || ".*";
	     call hcs_$add_dir_acl_entries (pdt.project_dir, rtrim(tpp -> user.person_id), addr (add_user_dir_acl), 1, ec);
	     if ec ^= 0 then do;
		if add_user_dir_acl.code ^= 0 then
		     call com_err_ (add_user_dir_acl.code, "rename_proj", "Cannot add ^a to ACL of ^a", add_user_dir_acl.user, tpp -> user.home_dir);
	     end;
	     call hcs_$delete_dir_acl_entries (pdt.project_dir, rtrim(tpp -> user.person_id), addr (del_user_acl), 1, ec);
	     if ec ^= 0 then do ai = 1 to n_acldel;
		if del_acl (ai).code ^= 0 then
		     call com_err_ (del_acl (ai).code, "rename_proj", "Cannot delete ^a from ACL of ^a>^a", del_acl (ai).user, rtrim(pdt.project_dir), tpp -> user.home_dir);
	     end;
	end;
	tpp = null;

/* Copy the data back. */

	project = Nsate;

/* Create a dummy SAT entry for the old project name.  This entry will be 
   used by up_sat_ to recognize a renamed project based on the state = 3  */

	sat_count = sat.current_size + 1;
	satep = addr (sat.project (sat_count));
	Nsate.state = 3;                                  /* renamed state */
	Nsate.project_id = old_name;                      /* previous name */
	Nsate.project_dir, Nsate.cutoff,
	     Nsate.alias, Nsate.group = "";
	Nsate.pdt_ptr = null ();
	Nsate.max_users, Nsate.n_users,
	     Nsate.min_ring, Nsate.max_ring,
	     Nsate.grace_max, Nsate.days_to_cutoff,
	     Nsate.pct_balance, Nsate.pdir_quota,
	     Nsate.max_foreground, Nsate.max_background,
	     Nsate.abs_foreground_cpu_limit,
	     Nsate.rs_number, Nsate.satpad1,
	     Nsate.chain = 0;
	Nsate.at = ""b;
	do i = 1 to 4;
	     Nsate.admin.userid (i) = "";
	     Nsate.admin.pad (i) = "";
	end;
	Nsate.audit, Nsate.project_authorization,
	     Nsate.satpad = ""b;
	Nsate.groups = "";
	Nsate.dollars_to_cutoff = 0e0;

	project = Nsate;				/* append the dummy */
	sat.current_size = sat_count;                     /* increment size of SAT to
                                                               include dummy entry */

	movelen = lope;
	pp1 -> movetable = pp2 -> movetable;

	movelen = loqe;
	qp1 -> movetable = qp2 -> movetable;

/* Terminate all segments. */

abend:	call hcs_$terminate_noname (pp, ec);
	call hcs_$terminate_noname (pdtp, ec);
	call hcs_$terminate_noname (qp, ec);
/*	call hcs_$terminate_noname (satp, ec);*/
	call terminate_file_ (satp, 36 * (SAT_header_lth + sat.current_size *
	     SAT_entry_lth), TERM_FILE_TRUNC_BC_TERM, (0));
exit1:	if ^mylock then call set_lock_$unlock (sys_admin_data.lock, ec);
	call hcs_$terminate_noname (sadp, ec);
	return;

test:	entry (asc1, audd, asc1p);
dcl (asc1, audd, asc1p) char (*);

	sc1 = asc1;
	udd = audd;
	sc1_pdt = asc1p;
	return;

     end rename_proj;
