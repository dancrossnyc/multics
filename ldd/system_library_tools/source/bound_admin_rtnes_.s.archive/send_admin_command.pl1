/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */

/* format: style2 */
send_admin_command:
sac:
     procedure options (variable);

/* SEND_ADMIN_COMMAND - send command to initializer */
/* Modified May 1982, E. N. Kittlitz. tidied up. */
/* Modified December 1982, E. N. Kittlitz. version 2 communications. encrypt admin password. */
/* Modified 1984-10-08 BIM for as_request mechanism */
/* Modified 1984-12-20 BIM to turn off "send-start" when waiting for completion */

	dcl     com_err_		 entry () options (variable);
	dcl     com_err_$suppress_name entry () options (variable);
	dcl     command_query_$yes_no	 entry () options (variable);
	dcl     cu_$arg_list_ptr	 entry returns (ptr);
	dcl     requote_string_	 entry (character (*)) returns (character (*));
	dcl     ssu_$abort_line	 entry () options (variable);
	dcl     ssu_$standalone_invocation
				 entry (ptr, char (*), char (*), ptr, entry, fixed bin (35));
	dcl     ssu_$destroy_invocation
				 entry (ptr);
	dcl     ssu_$arg_ptr	 entry (ptr, fixed bin, ptr, fixed bin (21));
	dcl     ssu_$arg_count	 entry (ptr, fixed bin);

	dcl     mail_system_$free_address
				 entry (pointer, fixed bin (35));

	dcl     mlsys_utils_$format_address_field
				 entry (char (*) varying, pointer, fixed bin, pointer, fixed bin (21),
				 fixed bin (21), fixed bin (35));
	dcl     mlsys_utils_$parse_address_control_args
				 entry (ptr, fixed bin, ptr, ptr, fixed bin (35));
	dcl     ioa_		 entry () options (variable);
	dcl     ioa_$nnl		 entry () options (variable);
	dcl     ipc_$create_ev_chn	 entry (fixed bin (71), fixed bin (35));
	dcl     ipc_$delete_ev_chn	 entry (fixed bin (71), fixed bin (35));
	dcl     ipc_$block		 entry (ptr, ptr, fixed bin (35));

	dcl     request_id_		 entry (fixed binary (71)) returns (character (19));
	dcl     send_as_request_$block entry (pointer, fixed binary, bit (72) aligned, bit (72) aligned,
				 fixed binary (35));
	dcl     send_as_request_$no_block
				 entry (pointer, fixed binary, bit (72) aligned, fixed binary (35));


	dcl     al		 fixed bin (21);
	dcl     ap		 pointer;
	dcl     code		 fixed bin (35);
	dcl     non_control_arg	 bit (1) aligned;
	dcl     first_non_control_arg	 fixed bin;
	dcl     address_ptr		 pointer;
	dcl     address_string	 char (500);
	dcl     argx		 fixed bin;
	dcl     arg_count		 fixed bin;
	dcl     message_id		 bit (72) aligned;
	dcl     message_id_clock	 fixed bin (71);
	dcl     query_flag		 bit (1) aligned;
	dcl     request_id		 char (19);
	dcl     reply_bits		 bit (72) aligned;
	dcl     sci_ptr		 pointer;
	dcl     stringx		 fixed bin (21);
	dcl     argument		 char (al) based (ap) unal;
	dcl     wait_flag		 fixed bin;
	dcl     send_it		 bit (1) aligned;
	dcl     1 flags		 aligned,
		2 notify_message	 bit,
		2 notify_mail	 bit,
		2 query		 bit,
		2 explicit_address	 bit,
		2 brief		 bit,
		2 brief_query	 bit;

	dcl     MAX_LENGTH		 fixed bin init (20000) int static options (constant);
						/* will fit in a message segment */

	dcl     (
	        NONE		 init (0),
	        START		 init (1),
	        FINISH		 init (2)
	        )			 fixed bin int static options (constant);

	dcl     (unspec, null, substr) builtin;
	dcl     ME		 char (32) init ("send_admin_command") int static options (constant);

	dcl     error_table_$bigarg	 fixed bin (35) ext static;
	dcl     error_table_$noarg	 fixed bin (35) ext static;
	dcl     error_table_$badopt	 fixed bin (35) ext static;

%include as_requests;
%include as_request_header;
%include event_wait_channel;
%include event_wait_info;
	declare 1 EWI		 aligned like event_wait_info;
%include mlsys_data;
%include mlsys_parse_ca_options;
	dcl     1 PCAO		 aligned like parse_ca_options;

	declare cleanup		 condition;


	sci_ptr = null ();
	asr_admin_command_info_ptr = null ();
	event_wait_channel.channel_id (1) = 0;
	on cleanup call clean_up;

	call ssu_$standalone_invocation (sci_ptr, ME, "1.0", cu_$arg_list_ptr (), SSU_ABORT, code);
	if code ^= 0
	then do;
		call com_err_ (code, ME, "Failed to create ssu_ invocation.");
		return;
	     end;

	call ssu_$arg_count (sci_ptr, arg_count);
	if arg_count = 0
	then do;
		call com_err_$suppress_name (0, ME, "Usage: send_admin_command UNQUOTED_COMMAND_LINE");
		go to ABORT;
	     end;

	address_string = "";
	call mlsys_utils_$format_address_field ("", mlsys_data_$user_mail_table_address, -1, addr (address_string),
	     length (address_string), (0), code);
	if code ^= 0
	then address_string = "";

	non_control_arg = "0"b;
	first_non_control_arg = 0;
	flags = "0"b;				/* aggregate */
	wait_flag = FINISH;				/* default */
	do argx = 1 to arg_count while (^non_control_arg);
	     call ssu_$arg_ptr (sci_ptr, argx, ap, al);
	     if index (argument, "-") ^= 1		/* non-control */
	     then do;
		     first_non_control_arg = argx;
		     non_control_arg = "1"b;
		end;
	     else if argument = "-cp" | argument = "-cpw" | argument = "-chpass"
	     then call ssu_$abort_line (sci_ptr, 0,
		     "The admin mode password is stored in the PNT. Use set_special_password operator_admin_mode");
	     else if argument = "-no_wait" | argument = "-nwt"
	     then wait_flag = NONE;
	     else if argument = "-wait" | argument = "-wt"
	     then do;
		     if argx = arg_count
		     then wait_flag = FINISH;
		     else do;
			     argx = argx + 1;
			     call ssu_$arg_ptr (sci_ptr, argx, ap, al);
			     if index (argument, "-") = 1
			     then do;
				     argx = argx - 1;
				     wait_flag = FINISH;
				end;
			     else if argument = "start"
			     then wait_flag = START;
			     else if argument = "finish"
			     then wait_flag = FINISH;
			     else call ssu_$abort_line (sci_ptr, error_table_$badopt,
				     "The wait code must be ""start"" or ""finish"", not ""^a""", argument);
			end;
		end;
	     else if argument = "-notify_message" | argument = "-ntmsg"
	     then flags.notify_message = "1"b;
	     else if argument = "-no_notify_message" | argument = "-nntmsg"
	     then flags.notify_message = "0"b;
	     else if argument = "-notify_mail" | argument = "-ntmail"
	     then flags.notify_mail = "1"b;
	     else if argument = "-no_notify_mail" | argument = "-nntmail"
	     then flags.notify_mail = "0"b;
	     else if argument = "-address"
	     then do;
		     if argx = arg_count
		     then call ssu_$abort_line (sci_ptr, error_table_$noarg,
			     "-address must be followed by a mail system address.");

		     flags.explicit_address = "1"b;
		     argx = argx + 1;
		     unspec (PCAO) = ""b;
		     PCAO.version = PARSE_CA_OPTIONS_VERSION_1;
		     PCAO.logbox_creation_mode = QUERY_TO_CREATE_MAILBOX;
		     PCAO.savebox_creation_mode = QUERY_TO_CREATE_MAILBOX;
		     PCAO.flags.abort_on_errors = "1"b;
		     PCAO.flags.validate_addresses = "1"b;

		     call mlsys_utils_$parse_address_control_args (sci_ptr, argx, addr (PCAO), address_ptr, code);
		     argx = argx - 1;		/* back up */
		     address_string = "";
		     call mlsys_utils_$format_address_field ("", address_ptr, -1, addr (address_string),
			length (address_string), (0), code);
		     if code ^= 0
		     then call ssu_$abort_line (sci_ptr, code,
			     "Invalid address returned by mlsys_utils_$parse_address_control_args");
		end;
	     else if argument = "-string"
	     then do;
		     first_non_control_arg = argx + 1;
		     non_control_arg = "1"b;
		end;
	     else if argument = "-query" | argument = "-qy"
	     then flags.query = "1"b;
	     else if argument = "-no_query" | argument = "-nqy"
	     then flags.query = "0"b;
	     else if argument = "-brief" | argument = "-bf"
	     then flags.brief = "1"b;
	     else if argument = "-long" | argument = "-lg"
	     then flags.brief = "0"b;
	     else if argument = "-brief_query" | argument = "-bfqy"
	     then do;
		     flags.brief_query = "1"b;
		     flags.query = "1"b;
		end;
	     else if argument = "-long_query" | argument = "-lgqy"
	     then do;
		     flags.brief_query = "0"b;
		     flags.query = "1"b;
		end;

	     else call ssu_$abort_line (sci_ptr, error_table_$badopt, "Unrecognized control argument ^a", argument);
	end;

	if first_non_control_arg > arg_count
	then call ssu_$abort_line (sci_ptr, error_table_$noarg, "No command line given.");

	asr_ac_length = 0;
	do argx = first_non_control_arg to arg_count;
	     call ssu_$arg_ptr (sci_ptr, argx, (null ()), al);
	     asr_ac_length = asr_ac_length + al + 1;	/* space on the end */
	end;
	asr_ac_length = asr_ac_length - 1;
	if asr_ac_length <= 0
	then call ssu_$abort_line (sci_ptr, 0, "Null command line, not sent.");
	if asr_ac_length > MAX_LENGTH
	then call ssu_$abort_line (sci_ptr, error_table_$bigarg, "Command line exceeds ^d characters in length.",
		MAX_LENGTH);

	asr_admin_command_info_ptr = null ();
	allocate asr_admin_command_info;
	asr_admin_command_info.header.version = as_request_version_1;
	asr_admin_command_info.header.type = ASR_ADMIN_COMMAND;

	stringx = 1;
	do argx = first_non_control_arg to arg_count;
	     call ssu_$arg_ptr (sci_ptr, argx, ap, al);
	     substr (asr_admin_command_info.command, stringx, al + 1) = argument || " ";
	     stringx = stringx + al + 1;
	end;

	if flags.query
	then do;
		if flags.brief_query
		then call command_query_$yes_no (send_it, 0, ME,
			"If you answer ""yes"", the command line will be sent to the Initializer.",
			"^a -- Send it? ", requote_string_ (asr_admin_command_info.command));
		else call command_query_$yes_no (send_it, 0, ME,
			"If you answer ""yes"", the command line will be sent to the Initializer.",
			"Do you want to send the command line:^/ ^a^/to the Initializer^[ and wait for it to ^[start^;finish^]^;^s^]^[ and be notified ^[by message^;by mail^[ to address ^a^]^]^]? "
			, requote_string_ (asr_admin_command_info.command), wait_flag ^= NONE, wait_flag,
			flags.notify_message | flags.notify_mail, flags.notify_message, flags.explicit_address,
			address_string);
		if ^send_it
		then do;
			free asr_admin_command_info;
			call ioa_ ("send_admin_command: Command not sent.");
			return;
		     end;
	     end;

	if wait_flag ^= NONE
	then call ipc_$create_ev_chn (asr_admin_command_info.header.reply_channel, code);
	else asr_admin_command_info.header.reply_channel = 0;
	event_wait_channel.channel_id (1) = asr_admin_command_info.header.reply_channel;
						/* save for destruction */
	asr_admin_command_info.version = ASR_AC_VERSION_1;
	asr_admin_command_info.command = "";
	asr_admin_command_info.mail_destination = address_string;
	asr_admin_command_info.flags.send_start_wakeup = (wait_flag > NONE);
	asr_admin_command_info.flags.send_completion_wakeup = (wait_flag = FINISH);
	asr_admin_command_info.flags.send_completion_message = flags.notify_message;
	asr_admin_command_info.flags.send_completion_mail = flags.notify_mail;
	stringx = 1;
	do argx = first_non_control_arg to arg_count;
	     call ssu_$arg_ptr (sci_ptr, argx, ap, al);
	     substr (asr_admin_command_info.command, stringx, al + 1) = argument || " ";
	     stringx = stringx + al + 1;
	end;

	if wait_flag > NONE
	then do;
		call send_as_request_$block (asr_admin_command_info_ptr, currentsize (asr_admin_command_info),
		     message_id, reply_bits, code);
	     end;
	else call send_as_request_$no_block (asr_admin_command_info_ptr, currentsize (asr_admin_command_info),
		message_id, code);
	if wait_flag ^= FINISH
	then do;
		unspec (message_id_clock) = message_id;
		request_id = request_id_ (message_id_clock);
		if ^flags.brief
		then call ioa_ ("send_admin_command: ID ^a^[, execution started^].", request_id, wait_flag = START);
	     end;
	if code ^= 0
	then call ssu_$abort_line (sci_ptr, code, "Error sending AS Request message.");

	if wait_flag ^= NONE
	then do;
		asr_replyp = addr (reply_bits);
		if asr_reply_admin_command.code ^= 0
		then call ssu_$abort_line (sci_ptr, asr_reply_admin_command.code);
	     end;
	if wait_flag = FINISH			/* We expect one more wakeup */
	then do;
		if ^flags.brief
		then call ioa_$nnl ("send_admin_command: Execution started ... ");
		call ipc_$block (addr (event_wait_channel), addr (EWI), code);
		if code ^= 0
		then call ssu_$abort_line (sci_ptr, code, "Failed to block to wait for completion.");
		if ^flags.brief
		then call ioa_ ("completed.");
		asr_replyp = addr (EWI.message);
		if asr_reply_admin_command.code ^= 0 | asr_reply_admin_command.flags.command_aborted
		     | asr_reply_admin_command.command_had_errors
		then call ssu_$abort_line (sci_ptr, asr_reply_admin_command.code,
			"^[ Command line aborted by error.^]^[ Command completed with errors.^]",
			asr_reply_admin_command.flags.command_aborted, asr_reply_admin_command.command_had_errors);

	     end;
	call clean_up;

	return;

SSU_ABORT:
     procedure;

	goto ABORT;
     end SSU_ABORT;
ABORT:
	call clean_up;
	return;

clean_up:
     procedure;

	call ssu_$destroy_invocation (sci_ptr);
	if asr_admin_command_info_ptr ^= null
	then free asr_admin_command_info;
	if event_wait_channel.channel_id (1) ^= 0
	then call ipc_$delete_ev_chn (event_wait_channel.channel_id (1), (0));
	return;
     end clean_up;
     end send_admin_command;
