/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* format: style3 */
reset_use_totals:
     procedure options (variable);

/* Modified June 1981 by C. Hornig to be compatible with new use_totals include file.
   Modified August 1981 by T. Casey to set rate structure number for bin.
   Modified 1984-08-31 by BIM for V3 use_totals.
*/

/* RESET_USE_TOTALS - reset month-to-date usage totals */

dcl	(dn, xdn)		char (168),
	(en, xen)		char (32),
	line		char (120),
	pj		char (12),
	cc		char (24),
	(i, j, k, l, m, n, mm)
			fixed bin,
	tt		char (8),
	bitc		fixed bin (24),
	ap		ptr,
	al		fixed bin (21),
	ec		fixed bin (35),
	p		ptr;

dcl	rsn		fixed bin;		/* rate structure number */
dcl	rs_count		fixed bin;		/* number of rate structures at site */
dcl	created		bit (1) aligned;
dcl	arg_count		fixed bin;
dcl	arg		char (al) based (ap);

dcl	bcs		char (131071) based (p);

dcl	NL		char (1) int static init ("
");

dcl	(addr, null, substr, index, size, length, bit, fixed, divide, mod, abs)
			builtin;

dcl	cu_$arg_count	entry (fixed bin, fixed bin (35));
dcl	cu_$arg_ptr	entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl	expand_pathname_$add_suffix
			entry (character (*), character (*), character (*), character (*), fixed binary (35));
dcl	com_err_$suppress_name
			entry () options (variable);
dcl	com_err_		entry options (variable);

dcl	initiate_file_$create
			entry (character (*), character (*), bit (*), pointer, bit (1) aligned, fixed binary (24),
			fixed binary (35));
dcl	initiate_file_	entry (character (*), character (*), bit (*), pointer, fixed binary (24), fixed binary (35))
			;
dcl	terminate_file_	entry (pointer, fixed binary (24), bit (*), fixed binary (35));
dcl	pathname_		entry (character (*), character (*)) returns (character (168));

dcl	search_sat_$rs_number
			entry (char (*), fixed bin, fixed bin (35));
dcl	search_sat_$clean_up
			entry;
dcl	system_info_$max_rs_number
			entry (fixed bin);

dcl	cleanup		condition;
dcl	ME		char (32) init ("reset_use_totals") int static options (constant);
%page;
%include access_mode_values;
%include terminate_file;
%include use_totals;



	call cu_$arg_count (arg_count, ec);
	if ec ^= 0
	then do;
		call com_err_ (ec, ME);
		return;
	     end;
	if arg_count ^= 2
	then do;
		call com_err_$suppress_name (0, ME, "Usage: reset_use_totals USE_TOTALS CONTROL_FILE");
		return;
	     end;

	created = "0"b;
	use_totals_ptr, p = null ();
	on cleanup call clean_up;

	call cu_$arg_ptr (1, ap, al, (0));
	call expand_pathname_$add_suffix (arg, "use_totals", xdn, xen, ec);
	if ec ^= 0
	then do;
		call com_err_ (ec, ME, "Invalid use_totals pathname ^a.", arg);
		return;
	     end;

	call initiate_file_$create (xdn, xen, RW_ACCESS, use_totals_ptr, created, (0), ec);
	if ec ^= 0
	then do;
		call com_err_ (ec, ME, "^a", pathname_ (xdn, xen));
		return;
	     end;

	call cu_$arg_ptr (2, ap, al, (0));
	call expand_pathname_$add_suffix (arg, "control", dn, en, ec);
	if ec ^= 0
	then do;
		call com_err_ (ec, ME, "Invalid control file pathname ^a.", arg);
		go to ERROR;
	     end;
	call initiate_file_ (dn, en, R_ACCESS, p, bitc, ec);
	if ec ^= 0
	then do;
		call com_err_ (ec, ME, "^a", pathname_ (dn, en));
		go to ERROR;
	     end;

	n = divide (bitc, 9, 17, 0);			/* char count */

	call system_info_$max_rs_number (rs_count);	/* see if site has multiple rate structures */

	do j = 1 to hbound (use_totals.bin_data, 1);
	     use_totals.bin_data (j).select_proj = "";
	     use_totals.bin_data (j).select_ut = 0;
	end;
	do j = lbound (use_totals.ut, 1) to hbound (use_totals.ut, 1);
	     use_totals.ut (j).dollar_charge = 0e0;
	     use_totals.ut (j).logins = 0;
	     use_totals.ut (j).crashes = 0;
	     use_totals.ut (j).nproj = 0;
	     use_totals.ut (j).nusers = 0;
	     use_totals.ut (j).disk_psec = 0;
	     use_totals.ut (j).disk_quota = 0;
	     use_totals.ut (j).disk_usage = 0;
	     use_totals.ut (j).misc = 0e0;
	     use_totals.ut (j).flag, use_totals.ut (j).flag1 = "";
	     do i = 0 to 7;
		use_totals.ut (j).interactive.charge (i) = 0e0;
		use_totals.ut (j).interactive.cpu (i) = 0;
		use_totals.ut (j).interactive.core (i) = 0;
		use_totals.ut (j).interactive.connect (i) = 0;
		use_totals.ut (j).interactive.io_ops (i) = 0;
	     end;
	     do i = 1 to 4;
		use_totals.ut (j).absentee.charge (i) = 0e0;
		use_totals.ut (j).absentee.jobs (i) = 0;
		use_totals.ut (j).absentee.cpu (i) = 0;
		use_totals.ut (j).absentee.memory (i) = 0;
	     end;
	     do i = 1 to 4;
		use_totals.ut (j).iod.charge (i) = 0e0;
		use_totals.ut (j).iod.pieces (i) = 0;
		use_totals.ut (j).iod.pages (i) = 0;
		use_totals.ut (j).iod.lines (i) = 0;
	     end;
	     do i = 1 to 16;
		use_totals.ut (j).devices (i) = 0e0;
	     end;
	end;

	use_totals.version = USE_TOTALS_VERSION_3;
	generated = clock ();
	if use_totals.period_end = 0
	then use_totals.period_begin = clock ();
	else use_totals.period_begin = use_totals.period_end;
	use_totals.period_end = use_totals.period_begin;

	use_totals.uptime = 0;
	use_totals.sys_starts = 0;
	use_totals.sys_crash = 0;
	use_totals.cpu_avail = 0;
	use_totals.idle = 0;
	use_totals.initializer = 0;
	use_totals.total_cpu = 0;
	use_totals.zidle = 0;
	use_totals.mpidle = 0;

	use_totals.ntypes = 1;			/* this will cause us to skip slot one */
						/* unless there is an explicit "other" line in the control file */
	use_totals.n_select = 0;
	use_totals.utype (1) = "all other users";	/* this is the default for 1 */
	use_totals.flag (1) = "$";
	use_totals.origin = 0;
	use_totals.max_day_log = 0;
	use_totals.max_qhour = 0;
	begin;
declare	1 a_quarter_hour	aligned like use_totals.daylog.qh;
	     a_quarter_hour.time = 0;
	     a_quarter_hour.sysid = "";
	     a_quarter_hour.dump_number = 0;
	     a_quarter_hour.shutdown = "0"b;
	     a_quarter_hour.nunits = 0;
	     a_quarter_hour.cpu = 0;
	     a_quarter_hour.kmem = 0;
	     use_totals.daylog (*).qh (*) = a_quarter_hour;
	end;

	k = 1;

/**** LINE :== <comment> NL | <spec> NL
      <comment> :== "*" | "*" <anything>
      <spec> :== <project> , <description> , <flag>
      <spec> :== <project> , <description>
*/

scan:
	do i = k to n;
	     if substr (bcs, i, 1) = NL
	     then do;
		     line = substr (bcs, k, i - k);
		     if substr (line, 1, 1) = "*"
		     then go to scan1;
		     m = index (line, ",");
		     pj = substr (line, 1, m - 1);
		     tt = "";
		     mm = index (substr (line, m + 1), ",");
		     if mm ^= 0
		     then do;
			     cc = substr (line, m + 1, mm - 1);
			     tt = substr (line, m + mm + 1);
			end;
		     else do;
			     cc = substr (line, m + 1);
			     tt = " ";
			end;
		     if pj = "other"
		     then do;
			     use_totals.ut (1).utype = cc;
			     use_totals.ut (1).flag = tt;
			     go to scan1;
			end;
		     do l = 1 to use_totals.ntypes;
			if cc = use_totals.ut (l).utype
			then go to scan2;
		     end;
		     use_totals.ntypes, l = use_totals.ntypes + 1;

/* Set rate structure of the new bin to the rate structure of the first project that is put into it */

		     rsn = 0;			/* default rate structure number */
		     if rs_count > 0
		     then do;			/* only if site has multiple rate structures */
			     call search_sat_$rs_number ((pj), rsn, ec);
						/* get rate structure number of this project */
			     if ec ^= 0
			     then rsn = 0;		/* be quiet about any problems; use default */
			end;
		     use_totals.ut (l).rs_number = rsn; /* set bin's rate structure number */

		     use_totals.ut (l).utype = cc;
		     use_totals.ut (l).flag = tt;
scan2:
		     use_totals.n_select = use_totals.n_select + 1;
		     use_totals.bin_data (n_select).select_proj = pj;
		     use_totals.bin_data (n_select).select_ut = l;
scan1:
		     k = i + 1;
		     go to scan;
		end;
	end;

	call terminate_file_ (p, (0), TERM_FILE_TERM, (0));
	call terminate_file_ (use_totals_ptr, 36 * size (use_totals), TERM_FILE_TRUNC_BC_TERM, (0));
	if rs_count > 0
	then call search_sat_$clean_up;		/* tidy up */
	return;

ERROR:
	call clean_up;
	return;

clean_up:
     procedure;

	if use_totals_ptr ^= null ()
	then if created
	     then call terminate_file_ (use_totals_ptr, (0), TERM_FILE_TERM | TERM_FILE_DELETE, (0));
	     else call terminate_file_ (use_totals_ptr, (0), TERM_FILE_TERM, (0));
	if p ^= null ()
	then call terminate_file_ (use_totals_ptr, (0), TERM_FILE_TERM, (0));
	return;
     end clean_up;

     end reset_use_totals;
