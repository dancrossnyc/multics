/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(87-10-06,Parisek), approve(88-02-03,MCR7845),
     audit(88-04-05,Lippard), install(88-04-26,MR12.2-1043):
     Implement multi_segment file application for possible >256K disk_stat
     segment.
                                                   END HISTORY COMMENTS */


/* format: style5,ind5 */

reset_disk_meters:
     procedure options (variable);

/* This program reads the disk usage from "disk_stat" and subtracts the
   value found with the specified directory's tpp.  It is run once a
   month after disk usage has been billed. */

/* Written by THVV.
   Modified on 5 June 1975 by J. C. Whitmore to set system_privileges if possible
   Modified April 1976 by T. Casey to reset directory page tpp as well as segent page tpp.
   Modified 1985-02-20 by E. Swenson to work with the new directory control.
*/

     sp = null ();				      /* for cleanup handler */
     undop = null ();			      /* ditto */
     set_privileges = "0"b;			      /* ditto */
     forced_access = "0"b;			      /* we haven't yet */
     on condition (cleanup) call CLEAN_UP ();

     acla.userid = get_group_id_ ();
     dacl.userid = acla.userid;
     acla.mode = SMA_ACCESS;
     path = "disk_stat";			      /* Find the disk statistics file. */

     an = 0;				      /* set argument index to 0, initially */
     more_args = "1"b;			      /* initially */
     do while (more_args);
	an = an + 1;			      /* bump argument number */
	call cu_$arg_ptr (an, ap, al, ec);
	if ec ^= 0 then
	     more_args = "0"b;
	else
	     do;
	     if bchr = "-brief" then
		brief_sw = "1"b;
	     else if bchr = "-bf" then
		brief_sw = "1"b;
	     else if substr (bchr, 1, 1) = "-" then
		call com_err_ (error_table_$badopt, ME, "^a", bchr);
	     else
		path = bchr;
	     end;
     end;

     ti = 0;

     call expand_pathname_ (path, dn, en, ec);
     if ec ^= 0 then
	do;
	call com_err_ (ec, ME, "^a", path);
	return;
	end;

     call msf_manager_$open (dn, en, fcbp, ec);	
     if ec ^= 0 then
	do;
	call com_err_ (ec, ME, "Cannot open msf.");
	return;
	end;
     acpx, cpx = 0;	
cpx_loop:
     call msf_manager_$get_ptr (fcbp, cpx, "0"b, cp_array (cpx), 0, ec);
     if ec = 0 then do;
	cpx = cpx + 1;
	goto cpx_loop;
     end;
     
     working_dir = get_wdir_ ();
     call initiate_file_ (working_dir, "projfile", RW_ACCESS, pp, (0), ec);
     if ec ^= 0 then
	do;
	call com_err_ (ec, ME, "^a", pathname_ (working_dir, "projfile"));
	call CLEAN_UP ();
	return;
	end;

     call get_temp_segment_ (ME, undop, ec);
     if ec ^= 0 then
	do;
	call com_err_ (ec, ME, "Getting temporary segment.");
	call CLEAN_UP ();
	return;
	end;

     sp = cp_array (0);	
     n = disk_stat.dents;			      /* Get number of entries. */

     call check_gate_access_ ("system_privilege_", codeptr (reset_disk_meters),
         ec);
     if ec ^= 0 then
	call com_err_ (ec, ME,
	    "system_privilege_.  Cannot enable directory privileges.  Access to storage system may not be complete"
	    );
     else
	do;
	call system_privilege_$dir_priv_on (priv_set_already);
	if priv_set_already = 1 then
	     set_privileges = "1"b;
	end;


     call ioa_ ("^a: Resetting disk for ^d directories.", ME, n);

     last_n = n;
comp_loop:
     do i = 1 to last_n;				/* Loop through all directories. */
	dn = spth (i);				/* Get the name of the directory. */

	call get_quota ("segment");
	if code ^= 0 then
	     xqta = 0;			      /* avoid trying to reset it */
	call get_quota ("directory");
	if code ^= 0 then
	     dir_xqta = 0;			      /* avoid trying to reset it */

	if xqta > 0 then
	     call reset_quota ("segment", xtpp, disk_stat.stpp (i));
	if dir_xqta > 0 then
	     call reset_quota ("directory", dir_xtpp, disk_stat.dtpp (i));

/**** The following call will terminate the specified directory in some
      cases and is helpful in cleaning up the address space.  It is not
      guaranteed to work in all cases, so we ignore the error code. */

	call hcs_$terminate_file (dn, "", 0, (0));

	if (lodh + (i+1) * lode) > sys_info$max_seg_size then do;
	     ti = ti + i;		
	     last_n = n - ti;
	     acpx = acpx + 1;
	     sp = cp_array (acpx);
	     goto comp_loop;
	end;
     end;

/**** Now reset the field in the projfile which corresponds to disk
      usage */

     do i = 1 to projfile.nproj;
	projfile.projfiletab (i).disk_psec = 0;
     end;

     sp = cp_array (0);
     disk_stat.dreset = disk_stat.dtime;
     disk_stat.dtime = clock ();

     call ioa_ ("^a: Disk usage reset.", ME);

     call CLEAN_UP ();
     return;
%page;
CLEAN_UP:
     procedure ();

     if set_privileges then
	call system_privilege_$dir_priv_off ((0));

     if fcbp ^= null () then
	call msf_manager_$close (fcbp);

     if sp ^= null () then sp = null ();

     if undop ^= null then
	do;
	if forced_access | (n_undo > 0) then
	     do i = n_undo to 1 by -1;
		call hcs_$delete_dir_acl_entries ((undo (i).dir),
		    (undo (i).ent), addr (dacl), 1, code);
		if code ^= 0 then
		     call com_err_ (code, ME,
		         "Could not reset access to ^a",
		         pathname_ ((undo (i).dir), (undo (i).ent)));
	     end;


	call release_temp_segment_ (ME, undop, (0));
	undop = null ();
	end;

     return;
     end CLEAN_UP;
%page;
get_quota:
     procedure (Seg_dir);

     dcl	   Seg_dir	       char (*) parameter;

     dcl	   i		       fixed bin (17);
     dcl	   try_again	       bit (1) aligned;

     try_again = "1"b;
     do i = 1 to 2 while (try_again);
	if Seg_dir = "segment" then
	     call hcs_$quota_read (dn, xqta, xtpp, (""b), (""b), (0), (0),
	         code);
	else
	     call hcs_$dir_quota_read (dn, dir_xqta, dir_xtpp, (""b), (""b),
	         (0), (0), code);
	if code = 0 then
	     try_again = "0"b;		      /* no need */
	else if i = 1 then			      /* if we haven't tried to force access yet */
	     do;
	     call force_access (dn, code);
	     if code ^= 0 then
		try_again = "0"b;		      /* no sense */
	     end;
     end;

     if code ^= 0 then
	call com_err_ (code, ME, "Cannot get ^a quota for ^a", Seg_dir, dn);
     return;

     end get_quota;
%page;
force_access:
     procedure (Dir, Code) recursive;

     dcl	   Dir		       char (168);
     dcl	   Code		       fixed bin (35);

     dcl	   td		       char (168);
     dcl	   te		       char (32);
     dcl	   i		       fixed bin;
     dcl	   j		       fixed bin;
     dcl	   try_again	       bit (1) aligned;

     if code ^= error_table_$moderr then
	if code ^= error_table_$no_info then
	     if code ^= error_table_$incorrect_access then
		return;

     j = 168;
     do while (substr (Dir, j, 1) ^= ">");
	j = j - 1;
     end;

     td = substr (Dir, 1, j - 1);
     te = substr (Dir, j + 1);

     n_undo = n_undo + 1;
     undo (n_undo).dir = td;
     undo (n_undo).ent = te;

     try_again = "1"b;
     if ^brief_sw then
	call ioa_ ("^a: Now forcing access to ^a", ME, Dir);
     do i = 1 to 2 while (try_again);
	call hcs_$add_dir_acl_entries (td, te, addr (acla), 1, code);
	if code = 0 then
	     do;
	     if forced_access = "0"b then
		forced_access = "1"b;
	     try_again = "0"b;		      /* no need */
	     end;
	else
	     do;				      /* could not set access */
	     call force_access (td, code);	      /* recurse */
	     if code ^= 0 then
		try_again = "0"b;		      /* wouldn't do any good */
	     end;
     end;
     end force_access;
%page;
reset_quota:
     procedure (Seg_dir, Cur_tpp, Reset_tpp);

     dcl	   Seg_dir	       char (*) parameter;
     dcl	   Cur_tpp	       fixed bin (71) parameter;
     dcl	   Reset_tpp	       fixed bin (71) parameter;

     dcl	   i		       fixed bin;
     dcl	   try_again	       bit (1) aligned;

     if Cur_tpp < Reset_tpp then
	if ^brief_sw then
	     call com_err_ (0, ME,
	         "^a would get negative ^a tpp ^.1f - ignored", dn, Seg_dir,
	         (Cur_tpp - Reset_tpp) / 86400e0);
	else
	     ;

     else
	do;
	try_again = "1"b;
	do i = 1 to 2 while (try_again);
	     call RESET_TPP (Seg_dir, dn, Reset_tpp, code);
	     if code = 0 then
		try_again = "0"b;		      /* no need */
	     else if i = 1 then		      /* if we haven't tried to force access yet */
		do;
		call force_access (dn, code);
		if code ^= 0 then
		     try_again = "0"b;	      /* no sense */
		end;
	end;

	if code ^= 0 then
	     call com_err_ (code, ME, "Cannot reset ^a tpp on ^a", Seg_dir,
	         dn);
	end;
     return;

     end reset_quota;
%page;
RESET_TPP:
     procedure (Seg_dir, Dir_name, Reset_tpp, Code);

     dcl	   Seg_dir	       char (*) parameter;
     dcl	   Dir_name	       char (*) parameter;
     dcl	   Reset_tpp	       fixed bin (71) parameter;
     dcl	   Code		       fixed bin (35) parameter;

     if ^debugging then
	do;
	if Seg_dir = "segment" then
	     call hphcs_$get_reset_quota (dn, Reset_tpp, Code);
	else
	     call hphcs_$dir_get_reset_quota (dn, Reset_tpp, Code);
	end;
     else
	Code = 0;
     return;
     end RESET_TPP;
%page;
/* Declarations */

/* Automatic */

     dcl     acpx                    fixed bin;         /* msf counter */
     dcl	   path		       char (168);
     dcl	   dn		       char (168);
     dcl	   en		       char (32);
     dcl	   ec		       fixed bin (35);    /* status code */
     dcl	   code		       fixed bin (35);    /* status code */
     dcl     cpx                     fixed bin;         /* msf counter */
     dcl     fcbp                    ptr;
     dcl	   ap		       ptr;	      /* argument pointer */
     dcl	   al		       fixed bin (21);    /* argument length */
     dcl	   brief_sw	       bit (1) aligned initial ("0"b);
     dcl	   an		       fixed bin;	      /* argument number */
     dcl	   pp		       ptr;	      /* pointer to projfile */
     dcl	   undop		       ptr;	      /* pointer to table of directories to undo access for */
     dcl	   xqta		       fixed bin (18);
     dcl	   dir_xqta	       fixed bin (18);
     dcl	   xtpp		       fixed bin (71);
     dcl	   dir_xtpp	       fixed bin (71);
     dcl	   i		       fixed bin;	      /* index */
     dcl	   n		       fixed bin;	      /* index */
     dcl	   set_privileges	       bit (1) aligned;
     dcl	   more_args	       bit (1) aligned;
     dcl	   priv_set_already	       fixed bin (35);
     dcl	   working_dir	       char (168);
     dcl	   forced_access	       bit (1) aligned;   /* whether we have or not */
     dcl     last_n                  fixed bin;
     dcl     ti                      fixed bin;

     dcl	   1 acla		       aligned,
	     2 userid	       char (32),
	     2 mode	       bit (36),
	     2 rcode	       fixed bin (35);

     dcl	   1 dacl		       aligned,
	     2 userid	       char (32),
	     2 rcode	       fixed bin (35);

     dcl     cp_array                (0:4) ptr;


/* Conditions */

     dcl	   cleanup	       condition;

/* Based */

     dcl	   bchr		       char (al) based (ap) unaligned;
					      /* argument */
     dcl	   1 undoseg	       based (undop) aligned,
	     2 n_undo	       fixed bin,
	     2 upad	       (7) fixed bin,
	     2 undo	       (100),
	       3 dir	       char (168),
	       3 ent	       char (32);

/* Builtin */

     dcl	   addr		       builtin;
     dcl	   clock		       builtin;
     dcl     codeptr                 builtin;
     dcl	   null		       builtin;
     dcl	   substr		       builtin;

/* External */

     dcl	   error_table_$badopt     fixed bin (35) external;
     dcl	   error_table_$incorrect_access
			       fixed bin (35) external;
     dcl	   error_table_$no_info    fixed bin (35) external;
     dcl	   error_table_$moderr     fixed bin (35) external;

     dcl     sys_info$max_seg_size   fixed bin (35) external static;

/* Entries */

     dcl	   check_gate_access_      entry (char (*), ptr, fixed bin (35));
     dcl	   com_err_	       entry options (variable);
     dcl	   cu_$arg_ptr	       entry (fixed bin, ptr, fixed bin (21),
			       fixed bin (35));

     dcl	   expand_pathname_	       entry (char (*), char (*), char (*),
			       fixed bin (35));

     dcl	   get_group_id_	       entry returns (char (32) aligned);
     dcl	   get_temp_segment_       entry (char (*), ptr, fixed bin (35));
     dcl	   get_wdir_	       entry () returns (char (168));
     dcl	   hcs_$add_dir_acl_entries
			       entry (char (*), char (*), ptr, fixed bin,
			       fixed bin (35));
     dcl	   hcs_$delete_dir_acl_entries
			       entry (char (*), char (*), ptr, fixed bin,
			       fixed bin (35));
     dcl	   hcs_$quota_read	       entry (char (*), fixed bin (18),
			       fixed bin (71), bit (36) aligned, bit (36),
			       fixed bin (1), fixed bin (18),
			       fixed bin (35));
     dcl	   hcs_$dir_quota_read     entry (char (*), fixed bin (18),
			       fixed bin (71), bit (36) aligned, bit (36),
			       fixed bin (1), fixed bin (18),
			       fixed bin (35));
     dcl	   hcs_$terminate_file     entry (char (*), char (*), fixed bin (1),
			       fixed bin (35));
     dcl	   hphcs_$get_reset_quota  entry (char (*), fixed bin (71),
			       fixed bin (35));
     dcl	   hphcs_$dir_get_reset_quota
			       entry (char (*), fixed bin (71),
			       fixed bin (35));
     dcl	   initiate_file_	       entry (char (*), char (*), bit (*), ptr,
			       fixed bin (24), fixed bin (35));
     dcl	   ioa_		       entry options (variable);
     dcl     msf_manager_$close      entry (ptr);
     dcl     msf_manager_$get_ptr    entry (ptr, fixed bin, bit (1), ptr, fixed bin (24), fixed bin (35));
     dcl     msf_manager_$open       entry (char (*), char (*), ptr, fixed bin (35));
     dcl	   pathname_	       entry (char (*), char (*))
			       returns (char (168));
     dcl	   release_temp_segment_   entry (char (*), ptr, fixed bin (35));
     dcl	   system_privilege_$dir_priv_on
			       entry (fixed bin (35));
     dcl	   system_privilege_$dir_priv_off
			       entry (fixed bin (35));

/* Constants */

     dcl	   debugging	       bit (1) aligned initial ("0"b)
			       internal static options (constant);
     dcl	   ME		       char (32)
			       initial ("reset_disk_meters")
			       internal static options (constant);

/* format: off */
%page; %include access_mode_values;
%page; %include disk_stat;
%page; %include projfile;
/* format: on */

     end reset_disk_meters;
