/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */

/* format: style3 */

system_monthly_report:
     procedure options (variable);

/* SYSTEM_MONTHLY_REPORT - Generate Multics system usage statistics. */

/* Modified by T. Casey, March 75, to add checks for zero values of
   previous month data, to avoid division by zero in percent computations. */
/* Modified 1984-08-31 BIM for version 3 use_totals */

dcl	dn		char (168),		/* Directory name */
	en		char (32),		/* Entry name */
	datstr		char (24),		/* Formatted date of start */
	datstr1		char (24),		/* Formatted date end */
	(i, j, k, l, m, n)	fixed bin,		/* indices */
	conn		fixed bin (71),		/* total connect time in microseconds today */
	nlogins		fixed bin,		/* # sessions today */
	ncshd		fixed bin,		/* # crashed sessions today */
	nabs		fixed bin,		/* # abs jobs today */
	fract		float bin,		/* used in percent calculation */
	(tnlogins, tncsh, tnabs, tqta, tusage, tnproj, tnusers)
			fixed bin init (0),
	(xtnlogins, xtncsh, xtnabs, xtqta, xtusage, xtnproj, xtnusers)
			fixed bin init (0),
	xconn		fixed bin (71),
	(char10a, char10b)	char (10),
	(pct, xpct)	float bin,
	(totmemu, xtotmemu) fixed bin (71) init (0),
	(totprt, xtotprt)	fixed bin (71) init (0),
	(totdk, xtotdk)	fixed bin (71) init (0),
	(totrev, xtotrev)	float bin init (0e0),
	(disk_capy, xdisk_capy)
			fixed bin (35),
	xtconn		fixed bin (71) init (0),
	tconn		fixed bin (71) init (0),
	dummy		char (10),		/* dummy title */
	comp		char (120),		/* company title */
	dept		char (120),		/* department title */
	ap		ptr,			/* ptr to arg */
	al		fixed bin (21),		/* lth of arg */
	bchr		char (al) unaligned based (ap),
						/* access struc for arg */
	ec		fixed bin (35),		/* err code */
	totp		ptr,			/* ptr to today's data */
	xtotp		ptr;			/* prt to last month's data. */
dcl	arg_count		fixed bin;

dcl	bt		fixed bin (71),		/* boot time */
	ztime		fixed bin (71),		/* random sample time */
	qlim		fixed bin,
	(xcpu, xmem)	fixed bin,
	(daycrash, daystarts, dayconfigs, dayunits)
			fixed bin,
	(mcrash, mstarts, munits, mconfigs)
			fixed bin,
	daysystem		char (8);

dcl	C1		fixed bin (71) int static init (3600000000);
						/* Convert clock time to hours. */
dcl	C2		fixed bin (71) int static init (1800000000);
						/* Half-hour for rounding. */

dcl	formatd		char (32) int static init ("^5a ^3a^7d^8d^17d^16.1f  ^8a"),
	formatdt		char (32) int static init ("^/^4d days^7d^8d^17d^16.1f");

dcl	heading		char (120) int static
			init (
			"Group^25xCharge Logins  Crashed  Abs Jobs  Connect^4xQuota^5xUsed  Projects  Users^/");

dcl	(addr, null, substr, index, unspec, length, bit, fixed, divide, mod, abs)
			builtin;

dcl	error_table_$unimplemented_version
			fixed bin (35) ext static;

dcl	pathname_		entry (character (*), character (*)) returns (character (168));
dcl	system_info_$titles entry (char (*), char (*), char (*), char (*));
dcl	cu_$arg_count	entry (fixed bin, fixed bin (35));
dcl	cu_$arg_ptr	entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl	com_err_$suppress_name
			entry () options (variable);
dcl	expand_pathname_$add_suffix
			entry (character (*), character (*), character (*), character (*), fixed binary (35));
dcl	ioa_		entry options (variable);
dcl	ioa_$rsnnl	entry options (variable);
dcl	date_time_	entry (fixed bin (71), char (*));
dcl	com_err_		entry options (variable);
dcl	initiate_file_	entry (character (*), character (*), bit (*), pointer, fixed binary (24), fixed binary (35))
			;
dcl	terminate_file_	entry (pointer, fixed binary (24), bit (*), fixed binary (35));

dcl	cleanup		condition;
dcl	ME		char (32) init ("system_monthly_report") int static options (constant);
%page;

%include access_mode_values;
%include terminate_file;
%include use_totals;


	use_totals_ptr, xtotp = null ();
	on cleanup call clean_up;
	call cu_$arg_count (arg_count, ec);
	if ec ^= 0
	then do;
		call com_err_ (ME, ec);
		return;
	     end;
	if arg_count ^= 2
	then do;
		call com_err_$suppress_name (0, ME,
		     "Usage: system_monthly_report today.use_totals yesterday.use_totals");
		return;
	     end;
	call cu_$arg_ptr (1, ap, al, (0));
	call expand_pathname_$add_suffix (bchr, "use_totals", dn, en, ec);
	if ec ^= 0
	then
PN_ERROR:
	     do;
		call com_err_ (ec, ME, "Invalid use totals pathname ^a.", bchr);
		go to ERROR;
	     end;

	call initiate_file_ (dn, en, R_ACCESS, use_totals_ptr, (0), ec);
	if ec ^= 0
	then
INITIATE_ERROR:
	     do;
		call com_err_ (ec, ME, "^a", pathname_ (dn, en));
		go to ERROR;
	     end;

	if use_totals.version ^= USE_TOTALS_VERSION_3
	then
UT_VERSION_ERROR:
	     do;
		call com_err_ (error_table_$unimplemented_version, ME, "^a is not version 3", pathname_ (dn, en));
		go to ERROR;
	     end;

	call cu_$arg_ptr (2, ap, al, (0));
	call expand_pathname_$add_suffix (bchr, "use_totals", dn, en, ec);
	if ec ^= 0
	then go to PN_ERROR;

	call initiate_file_ (dn, en, R_ACCESS, xtotp, (0), ec);
	if ec ^= 0
	then go to INITIATE_ERROR;
	if xtotp -> use_totals.version ^= USE_TOTALS_VERSION_3
	then go to UT_VERSION_ERROR;


	call system_info_$titles (dummy, dummy, comp, dept);
						/* Get report titles */

	call ioa_ ("^-^a^/^/^-^-^a", comp, dept);	/* Start report */
	call date_time_ (use_totals.period_begin, datstr);/* Make printable date */
	call date_time_ (use_totals.period_end, datstr1);
	call ioa_ ("^/Multics usage report from ^a^/^23xto ^a", datstr, datstr1);

	disk_capy = use_totals.disk_available;		/* Get total disk on system. */
	if disk_capy = 0
	then disk_capy = 1;				/* Can't be zero. */
	xdisk_capy = xtotp -> use_totals.disk_available;	/* .. */
	if xdisk_capy = 0
	then xdisk_capy = disk_capy;			/* Fix so no installation problems. */

	call ioa_ ("^/^9xStarts  Crashes^6xUptime   CPU avail.^6x%Idle  %Overhead");
	call ioa_ ("^/^8x^7d  ^7d^5x^7a^5x^7a^5x^7.1f^4x^7.1f", sys_starts, sys_crash,
						/* Write month-to-date totals */
	     tcv (uptime), tcv (cpu_avail), (idle * 1e2) / cpu_avail,
	     ((cpu_avail - idle - total_cpu) * 1e2) / cpu_avail);
	call ioa_ ("^/^3xCurrent system: ^8a^20xMTBF: ^7a^/", last_sysid, tcv (divide (uptime, sys_crash + 1, 71, 0)));
	call ioa_ ("^3xCurrent disk capacity: ^10d recs, ^5.1f% full^/", disk_capy,
	     ((disk_capy - use_totals.disk_left) * 1e2) / disk_capy);

	call ioa_ (heading);			/* Now user statistics part of report */
	do i = 2 to ntypes, 1;			/* Put paying customers at bottom of report */
	     nlogins = logins (i);
	     tnlogins = tnlogins + nlogins;
	     ncshd = crashes (i);
	     tncsh = tncsh + ncshd;
	     conn = 0;				/* Must add up connect time in each shift */
	     do j = 0 to 7;				/* Loop on shifts */
		conn = conn + connect (i, j);
		totmemu = totmemu + core (i, j);
	     end;
	     tconn = tconn + conn;
	     nabs = 0;				/* Get count of abs jobs */
	     do j = 1 to 4;				/* Loop on queues */
		nabs = nabs + absentee.jobs (i, j);
		totprt = totprt + iod.lines (i, j);
		totmemu = totmemu + absentee.memory (i, j);
	     end;
	     tnabs = tnabs + nabs;
	     totdk = totdk + disk_psec (i);
	     tqta = tqta + disk_quota (i);
	     tusage = tusage + disk_usage (i);
	     tnproj = tnproj + nproj (i);
	     tnusers = tnusers + nusers (i);
	     if flag (i) = "$"
	     then totrev = totrev + dollar_charge (i);
	     call ioa_ ("^24a  ^10.2f  ^5d  ^7d  ^8d  ^7a  ^7d  ^7d  ^8d  ^5d", utype (i), dollar_charge (i), nlogins,
		ncshd, nabs, tcv (conn), disk_quota (i), disk_usage (i), nproj (i), nusers (i));
	     nlogins = xtotp -> use_totals.logins (i);
	     xtnlogins = xtnlogins + nlogins;
	     ncshd = xtotp -> use_totals.crashes (i);
	     xtncsh = xtncsh + ncshd;
	     conn = 0;				/* Must add up connect time in each shift */
	     do j = 0 to 7;				/* Loop on shifts */
		conn = conn + xtotp -> use_totals.connect (i, j);
		xtotmemu = xtotmemu + xtotp -> use_totals.ut (i).interactive (j).core;
	     end;
	     xtconn = xtconn + conn;
	     nabs = 0;				/* Get count of abs jobs */
	     do j = 1 to 4;				/* Loop on queues */
		nabs = nabs + xtotp -> use_totals.absentee.jobs (i, j);
		xtotprt = xtotprt + xtotp -> use_totals.iod.lines (i, j);
		xtotmemu = xtotmemu + xtotp -> use_totals.absentee.memory (i, j);
	     end;
	     xtnabs = xtnabs + nabs;
	     xtotdk = xtotdk + xtotp -> use_totals.disk_psec (i);
	     xtqta = xtqta + xtotp -> use_totals.disk_quota (i);
	     xtusage = xtusage + xtotp -> use_totals.disk_usage (i);
	     xtnproj = xtnproj + xtotp -> use_totals.nproj (i);
	     xtnusers = xtnusers + xtotp -> use_totals.nusers (i);
	     if xtotp -> use_totals.flag (i) = "$"
	     then xtotrev = xtotrev + xtotp -> use_totals.dollar_charge (i);
	end;
	call ioa_ ("^/TOTAL^33x^5d  ^7d  ^8d  ^7a  ^7d  ^7d  ^8d  ^5d", tnlogins, tncsh, tnabs, tcv (tconn), tqta,
	     tusage, tnproj, tnusers);

	if totrev = 0e0
	then totrev = use_totals.dollar_charge (1);
	if xtotrev = 0e0
	then xtotrev = xtotp -> use_totals.dollar_charge (1);

/* Now compare this month with last month.  */

	call ioa_ ("^/^/^44xLast Month  This Month   Change^/");
	call ioa_ ("^20xSystem hours up         ^10d  ^10d^2x^8a", divide (xtotp -> use_totals.uptime + C2, C1, 35, 0),
	     divide (use_totals.uptime + C2, C1, 35, 0), pctstr ((use_totals.uptime), (xtotp -> use_totals.uptime)));
	conn = use_totals.cpu_avail - use_totals.uptime;
	xconn = xtotp -> use_totals.cpu_avail - xtotp -> use_totals.uptime;
	call ioa_ ("^20x Two CPU hours          ^10d  ^10d^2x^8a", divide (xconn + C2, C1, 35, 0),
	     divide (conn + C2, C1, 35, 0), pctstr ((conn), (xconn)));
	conn = divide (use_totals.uptime, use_totals.sys_crash + 1, 71, 0);
	xconn = divide (xtotp -> use_totals.uptime, xtotp -> use_totals.sys_crash + 1, 71, 0);
	char10a = (3)" " || tcv (conn);
	char10b = (3)" " || tcv (xconn);
	call ioa_ ("^20xMTBF (hours)            ^10a  ^10a^2x^8a", char10b, char10a, pctstr ((conn), (xconn)));
	call ioa_ ("^20xCPU charged (hours)     ^10d  ^10d^2x^8a",
	     divide (xtotp -> use_totals.total_cpu + C2, C1, 35, 0), divide (use_totals.total_cpu + C2, C1, 35, 0),
	     pctstr ((use_totals.total_cpu), (xtotp -> use_totals.total_cpu)));
	call ioa_ ("^20xMemory units (Million)  ^10.1f  ^10.1f^2x^8a", xtotmemu / 1e9, totmemu / 1e9,
	     pctstr ((totmemu), (xtotmemu)));
	call ioa_ ("^20xPrint lines (Million)   ^10.1f  ^10.1f^2x^8a", xtotprt / 1e6, totprt / 1e6,
	     pctstr ((totprt), (xtotprt)));
	call ioa_ ("^20xTerminal hours          ^10d  ^10d^2x^8a", divide (xtconn + C2, C1, 35, 0),
	     divide (tconn + C2, C1, 35, 0), pctstr ((tconn), (xtconn)));
	call ioa_ ("^20xLogins                  ^10d  ^10d^2x^8a", xtnlogins, tnlogins,
	     pctstr ((tnlogins), (xtnlogins)));
	call ioa_ ("^20xAbsentee jobs           ^10d  ^10d^2x^8a", xtnabs, tnabs, pctstr ((tnabs), (xtnabs)));
	call ioa_ ("^20xDisk usage (page-months)^10d  ^10d^2x^8a", fixed (xtotdk / 2592e3, 35),
	     fixed (totdk / 2592e3, 35), pctstr ((totdk), (xtotdk)));
	call ioa_ ("^20xProjects                ^10d  ^10d^2x^8a", xtnproj, tnproj, pctstr ((tnproj), (xtnproj)));
	call ioa_ ("^20xUsers                   ^10d  ^10d^2x^8a", xtnusers, tnusers, pctstr ((tnusers), (xtnusers)));

	call ioa_ ("");

	call ioa_ ("^20xRevenue                 ^10d  ^10d^2x^8a", fixed (xtotrev, 35), fixed (totrev, 35),
	     pctstr (totrev, xtotrev));
	call ioa_ ("^20xCrashed sessions        ^10d  ^10d^2x^8a", xtncsh, tncsh, pctstr ((tncsh), (xtncsh)));
	pct = (tncsh * 1e2) / (tnlogins + tnabs);
	if (xtnlogins + xtnabs) <= 0e0
	then xpct = 0e0;
	else xpct = (xtncsh * 1e2) / (xtnlogins + xtnabs);
	call ioa_ ("^20x Percentage crashed     ^10.1f  ^10.1f^2x^8a", xpct, pct, pctstr (pct, xpct));

	call ioa_ ("");

	if xtotp -> use_totals.cpu_avail <= 0e0
	then xpct = 0e0;
	else xpct = xtotp -> use_totals.zidle * 1e2 / xtotp -> use_totals.cpu_avail;
	pct = use_totals.zidle * 1e2 / use_totals.cpu_avail;
	call ioa_ ("^20xZero idle               ^10.1f% ^10.1f% ^8a", xpct, pct, pctstr (pct, xpct));
	if xtotp -> use_totals.cpu_avail <= 0e0
	then xpct = 0e0;
	else xpct = xtotp -> use_totals.mpidle * 1e2 / xtotp -> use_totals.cpu_avail;
	pct = use_totals.mpidle * 1e2 / use_totals.cpu_avail;
	call ioa_ ("^20xMP idle                 ^10.1f% ^10.1f% ^8a", xpct, pct, pctstr (pct, xpct));
	conn = use_totals.idle - use_totals.zidle - use_totals.mpidle;
	xconn = xtotp -> use_totals.idle - xtotp -> use_totals.zidle - xtotp -> use_totals.mpidle;
	if xtotp -> use_totals.cpu_avail <= 0e0
	then xpct = 0e0;
	else xpct = xconn * 1e2 / xtotp -> use_totals.cpu_avail;
	pct = conn * 1e2 / use_totals.cpu_avail;
	call ioa_ ("^20xNMP idle                ^10.1f% ^10.1f% ^8a", xpct, pct, pctstr (pct, xpct));
	conn = use_totals.cpu_avail - use_totals.total_cpu - use_totals.idle;
	xconn = xtotp -> use_totals.cpu_avail - xtotp -> use_totals.total_cpu - xtotp -> use_totals.idle;
	if xtotp -> use_totals.cpu_avail <= 0e0
	then xpct = 0e0;
	else xpct = xconn * 1e2 / xtotp -> use_totals.cpu_avail;
	pct = conn * 1e2 / use_totals.cpu_avail;
	call ioa_ ("^20xOverhead                ^10.1f% ^10.1f% ^8a", xpct, pct, pctstr (pct, xpct));
	if xtotp -> use_totals.cpu_avail <= 0e0
	then xpct = 0e0;
	else xpct = xtotp -> use_totals.total_cpu * 1e2 / xtotp -> use_totals.cpu_avail;
	pct = use_totals.total_cpu * 1e2 / use_totals.cpu_avail;
	call ioa_ ("^20xCharged                 ^10.1f% ^10.1f% ^8a", xpct, pct, pctstr (pct, xpct));

	call ioa_ ("");

	call ioa_ ("^20xTotal quota             ^10d  ^10d^2x^8a", xtqta, tqta, pctstr ((tqta), (xtqta)));
	call ioa_ ("^20xDisk available          ^10d  ^10d^2x^8a", xdisk_capy, disk_capy,
	     pctstr ((disk_capy), (xdisk_capy)));
	pct = 1e2 * use_totals.disk_left / disk_capy;
	if xdisk_capy <= 0e0
	then xpct = 0e0;
	else xpct = 1e2 * xtotp -> use_totals.disk_left / xdisk_capy;
	call ioa_ ("^20x  unused                ^10.1f% ^10.1f% ^8a", xpct, pct, pctstr (pct, xpct));
	pct = (1e2 * (tusage)) / disk_capy;
	if xdisk_capy <= 0e0
	then xpct = 0e0;
	else xpct = (1e2 * (xtusage)) / xdisk_capy;
	call ioa_ ("^20x  paying                ^10.1f% ^10.1f% ^8a", xpct, pct, pctstr (pct, xpct));
	pct = (1e2 * (disk_capy - tusage - use_totals.disk_left)) / disk_capy;
	if xdisk_capy <= 0e0
	then xpct = 0e0;
	else xpct = (1e2 * (xdisk_capy - xtusage - xtotp -> use_totals.disk_left)) / xdisk_capy;
	call ioa_ ("^20x  system use            ^10.1f% ^10.1f% ^8a", xpct, pct, pctstr (pct, xpct));

/* Now put out the summary by day. */

	call ioa_ ("^|Multics usage report from ^a^/^23xto ^a^/^/^10xSummary by day", datstr, datstr1);

	call ioa_ ("^/^/Date^6xStarts Crashes Reconfigurations  Max load units  Sysid^/");

	mcrash, munits = 0;
	mstarts = -1;
	bt = -1;
	xcpu, xmem = -1;
	mconfigs, dayconfigs = -1;

	do i = 1 to use_totals.max_day_log;

	     daystarts = 0;
	     daycrash = 0;
	     daysystem = "";
	     dayunits = 0;

	     if i = use_totals.max_day_log
	     then qlim = use_totals.max_qhour;
	     else qlim = 96;

	     ztime = 0;
	     do j = 1 to qlim;
		if use_totals.daylog (i).qh (j).time = 0
		then go to skip;
		ztime = use_totals.daylog (i).qh (j).time;
		if use_totals.daylog (i).qh (j).starttime ^= bt
		then do;
			daystarts = daystarts + 1;
			mstarts = mstarts + 1;
			bt = use_totals.daylog (i).qh (j).starttime;
		     end;
		if use_totals.daylog (i).qh (j).crashtime ^= 0
		then if use_totals.daylog (i).qh (j).dump_number ^= 0
		     then do;
			     daycrash = daycrash + 1;
			     mcrash = mcrash + 1;
			end;
		if use_totals.daylog (i).qh (j).sysid > ""
		then daysystem = use_totals.daylog (i).qh (j).sysid;
		if use_totals.daylog (i).qh (j).cpu = xcpu
		then if use_totals.daylog (i).qh (j).kmem = xmem
		     then go to sameconf;
		if use_totals.daylog (i).qh (j).cpu = 0
		then go to sameconf;
		dayconfigs = dayconfigs + 1;
		mconfigs = mconfigs + 1;
		xcpu = use_totals.daylog (i).qh (j).cpu;
		xmem = use_totals.daylog (i).qh (j).kmem;
sameconf:
		if use_totals.daylog (i).qh (j).nunits > dayunits
		then dayunits = use_totals.daylog (i).qh (j).nunits;
		if use_totals.daylog (i).qh (j).nunits > munits
		then munits = use_totals.daylog (i).qh (j).nunits;
skip:
	     end;
	     if ztime = 0
	     then go to skip1;
	     call date_time_ (ztime, datstr);
	     call ioa_ (formatd, substr (datstr, 1, 5), substr (datstr, 22, 3), daystarts, daycrash, dayconfigs,
		dayunits / 1e1, daysystem);
	     if substr (datstr, 22, 3) = "Sun"
	     then call ioa_ ("");
	     dayconfigs = 0;
skip1:
	end;

	call ioa_ (formatdt, use_totals.max_day_log, mstarts, mcrash, mconfigs, munits / 1e1);

ERROR:
	call clean_up;

	return;

/* internal procedure to format time for printing */

tcv:
     proc (x) returns (char (7));

dcl	x		fixed bin (71);

dcl	(a, b, c, d)	fixed bin (35),
	cc		char (7);

	a = divide (x, 1000000, 35, 0);
	b = divide (a, 60, 35, 0);
	a = mod (a, 60);
	c = divide (b, 60, 35, 0);
	b = mod (b, 60);
	call ioa_$rsnnl ("^4d:^2d", cc, d, c, b);
	if substr (cc, 6, 1) = " "
	then substr (cc, 6, 1) = "0";
	return (cc);

     end tcv;

/* internal procedure to format percentage changes for printing (including checks for zero */

pctstr:
     proc (this_month_value, last_month_value) returns (char (8));

dcl	(this_month_value, last_month_value)
			float bin,
	cc		char (8),
	n		fixed bin;

	if last_month_value = 0e0
	then cc = "     -  ";
	else call ioa_$rsnnl ("^7.1f%", cc, n, (this_month_value - last_month_value) * 1e2 / last_month_value);
	return (cc);
     end pctstr;
clean_up:
     procedure;

	if use_totals_ptr ^= null ()
	then call terminate_file_ (use_totals_ptr, (0), TERM_FILE_TERM, (0));
	if xtotp ^= null ()
	then call terminate_file_ (xtotp, (0), TERM_FILE_TERM, (0));
	return;
     end clean_up;

     end system_monthly_report;
