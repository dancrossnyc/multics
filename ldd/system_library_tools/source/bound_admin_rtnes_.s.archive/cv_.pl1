/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


cv_: proc;

/* Utility routine for converting numbers & time calculations.
   THVV 10/69 */

hrmin:	entry (sec, hf, mf);

/* Time conversion procedure.
   call cv_$hrmin (seconds, hf, mf);
   call ioa_ ("^5d:^2a", hf, mf);
   */

dcl  sec fixed bin,					/* input: time in seconds */
     hf fixed bin,					/* output: hours */
     mf char (*);					/* output: mm */

dcl  temp char (4) aligned,				/* temporary */
     cv_bin_$dec entry (fixed bin, char (12)),
     ans char (12),					/* answer from cv_bin */
    (t0, t1, t2, t3) fixed bin;			/* temporaries */

	t0 = sec + 59;				/* round up. */
	t1 = divide (t0, 3600, 17, 0);		/* t1 is hours */
	t3 = t0 - t1*3600;				/* t3 is leftover seconds */
	t2 = divide (t3, 60, 17, 0);			/* t2 is minutes */

	hf = t1;					/* return hours */
	call cv_bin_$dec (t2, ans);			/* convert minutes to char */
	temp = " ";				/* blank out temp */
	substr (temp, 1, 2) = substr (ans, 11, 2);	/* get minutes */
	if temp = " " then temp = "00";		/* if zero, return 00 */
	else if substr (temp, 1, 1) = " " then substr (temp, 1, 1) = "0";
	mf = temp;				/* return minutes */
	return;					/* Zoom. */

/* - - - - - - - - - - - - - - - - */

absdat:	entry (mm, dd, yy, xabs);

dcl (mm, dd, yy, xabs) fixed bin;

dcl  datebin_ entry (fixed bin (71),
     fixed bin, fixed bin, fixed bin, fixed bin, fixed bin, fixed bin, fixed bin, fixed bin, fixed bin);
dcl  datebin_$revert entry (fixed bin, fixed bin, fixed bin, fixed bin, fixed bin, fixed bin, fixed bin (71));
dcl  datebin_$shift entry (fixed bin (71), fixed bin);

dcl  time fixed bin (71);

	call datebin_$revert (mm, dd, yy, 0, 0, 0, time);
	call datebin_ (time, xabs, t0, t0, t0, t0, t0, t0, t0, t0);
	return;

/* - - - - - - - - - - - - - - - - */

shift:	entry (mm, dd, yy, hh, shno);

dcl (hh, shno) fixed bin;

	call datebin_$revert (mm, dd, yy, hh, 0, 0, time);
	call datebin_$shift (time, shno);
	return;

/* - - - - - - - - - - - - - - - - */

mwvf:	entry (flo) returns (char (15));

/* entry to do mwvf15.2 conversion */

dcl  fvl char (15) aligned init (" xxx,xxx,xxx.xx"),	/* location of commas & decimal */
     flo float bin,					/* input arg */
     ft1 float bin,					/* temp */
     i fixed bin, j fixed bin;			/* indices */

dcl  k (11) fixed bin int static init (15, 14, 12, 11, 10, 8, 7, 6, 4, 3, 2);

	if flo = 0.0e0 then return (" ");		/* w modifier means blank if all zero */
	if abs (flo) > 3.4359735e8 then go to woops;	/* determined by experiment.. */
	ft1 = flo;				/* pick up input arg */
	if ft1 < 0 then ft1 = - ft1;			/* handle negative */
	t0 = (ft1+0.005e0) * 100.0e0;			/* round up and convert to pennies */
	j = 1;
	do i = 1 to 11;				/* loop on digits */
	     t1 = mod (t0, 10);			/* get remainder */
	     t0 = divide (t0, 10, 35, 0);		/* throw away digit */
	     substr (fvl, k (i), 1) = substr ("0123456789", t1+1, 1);
	     if t1 ^= 0 then j = i;			/* Remember loc of nonzero digit. */
	end;
	if t0 > 0 | (flo < 0 & k (j) = 2) then do;	/* oflo? */
woops:	     fvl = "$***,***,***.**";			/* Overflowed. Put out junk. */
	     return (fvl);
	end;
	j = k (j);
	if j > 13 then j = 13;			/* tiny number is $.00 */
	substr (fvl, 1, j-1) = " ";			/* blank out j-1unk */
	if flo < 0
	then do;
	     substr (fvl, j-1, 1) = "-";
	     substr (fvl, j-2, 1) = "$";
	end;
	else substr (fvl, j-1, 1) = "$";
ex:	return (fvl);


/* - - - - - - - - - - - - - - - - */

cdate:	entry (dt) returns (fixed bin (71));

/* this program converts a character-string date into a system time */

dcl  dt char (*);					/* argument is a date */

dcl  chr char (1) aligned,				/* single character of date */
     wdate (3) fixed bin init (0, 0, 0),		/* month, day, yezr */
     s2 bit (1) init ("0"b),				/* switch, ON if two digits */
     clock_ entry returns (fixed bin (71));		/* system clock */

	t1 = 0;					/* accumulator for numbers */
	j = 1;					/* j is index in "wdate" */
	if dt = "*" then return ((clock_));		/* date of "*" is now */
	if dt = "P" then return (2169522000000000);	/* 10/1/69 - date Multics went public */

	t3 = index (dt, " ");			/* find loc of first blank */
	if t3 = 0 then t3 = length (dt)+1;		/* .. or length of string. */
	if t3 < 4 then return (0);			/* if not enough chars, illegal date. */

	do i = 1 to t3-1;				/* look at all chars */
	     chr = substr (dt, i, 1);			/* get one chr */
	     t0 = index ("0123456789", chr);
	     if t0 > 0 then do;			/* digit? */
		t1 = 10 * t1 + (t0 - 1);		/* yes, add it in */
		if s2 then go to store;		/* is this the second digit? */
		else s2 = "1"b;			/* no, wait for another. */
	     end;
	     else if chr = "/" then do;		/* is this a slash? */
		if t1 ^= 0 then do;			/* yes. is there anything in ac? */
store:		     wdate (j) = t1;		/* yes. save it in date */
		     t1 = 0;			/* reset ac */
		     j = j + 1;			/* index in date */
		     if j = 4 then j = 3;		/* skip "19" on year */
		     s2 = "0"b;			/* reset switch */
		end;
	     end;
	     else return (0);			/* some garbage character, die */
	end;
	if s2 then wdate (j) = t1;			/* do we have any digits leftover? */
	if wdate (1) = 0 then return (0);		/* check month for legal form. */
	if wdate (1) > 12 then return (0);		/* .. */
	if wdate (2) = 0 then return (0);		/* check day. */
	if wdate (2) > 31 then return (0);		/* .. */
	if wdate (3) = 0 then wdate (3) = 70;		/* 1970 if not specified */

compute:	call datebin_$revert (wdate (1), wdate (2), wdate (3), 0, 0, 0, time);
	return (time);

     end cv_;
