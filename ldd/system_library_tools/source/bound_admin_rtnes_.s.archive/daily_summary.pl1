/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
%;
/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

daily_summary: proc;

/* daily summary program.

   This program produces a daily billing and overspent account summary.
   It also inserts cutoff codes into the sat to prevent overspent accounts from logging in.

   inputs:
   .	"reqfile"		per-account requisition info

   outputs:
   .	"sumry"		one line per requisition showing status & charges
   .      "sat"		new cutoff code for every project in sat
   .      "cutrpt"		list of user cutoff information

   THVV 11/69 - KAW 6/71

   Modified by T. Casey, May 1976, to put account balance figures into SAT entry.
   */

dcl  dn char (168) aligned,				/* segment names */
     en char (32) aligned,				/* ... */
     ec fixed bin,					/* file-system error code */
     al fixed bin,
    (i, j, m) fixed bin,				/* counters */
     dtemp char (8) aligned,				/* ... */
    (rv, rb) char (15) aligned,			/* ... */
    (total_month, total_amt, total_req, total_balance) float bin init (0e0),
     open char (15) aligned internal static init ("           open"),
     warn_amt float bin int static init (10e0),
     warn_pct float bin int static init (0.10e0),		/* percentage */
     oneday fixed bin (71) int static init (86400000000),	/* one day's worth of microseconds */
     warn_days fixed bin int static init (10),		/* number of days to wait before warning */
     today fixed bin (71),
     isat fixed bin,
     cutoff_code char (1) aligned init (" "),
     satp ptr,
     satep ptr,
    (coxx, dpxx) char (4) aligned,
     date_string char (24) aligned,
     cut_count fixed bin init (0),
     warn_count fixed bin init (0),
     p ptr,
     ap ptr,
     qp ptr;					/* ptr to "reqfile" */

dcl  argu char (al) based (ap) unaligned,
     arg char (8) aligned,
     nargs fixed bin,
     balance float bin (63),
     warn bit (1) init ("0"b),
     sum bit (1) init ("1"b),
     projord bit (1) aligned init ("1"b),
     cutr bit (1) init ("1"b),
     satlist bit (1) init ("1"b);

dcl (days_to_cutoff, pct_balance) fixed bin;

dcl (addr, divide, fixed, mod, null, float, substr) builtin;

dcl  sumry char (32) int static aligned init ("sumry");	/* stream names */
dcl  cutrpt char (32) aligned int static init ("cutrpt");

dcl  error_table_$badopt fixed bin ext;

/* format statements */

dcl  l1 char (120) aligned,
     l2 char (120) aligned,
     l3 char (48) aligned int static init
    ("^-^-^-Multics ^a for the date of ^a^/"),
     l4 char (60) aligned int static init
    ("^-^-^-Table of cutoff codes"),
     l5 char (60) aligned int static init
    ("^-^-^-X - Project is out of funds and no logins permitted"),
     l6 char (60) aligned int static init
    ("^-^-^-Y - Project is out of funds but logins permitted"),
     l7 char (70) aligned int static init
    ("^-^-^-T - Project has past termination date and no logins permitted "),
     l8 char (70) aligned int static init
    ("^-^-^-S - Project has past termination date but logins permitted "),
     l9 char (70) aligned int static init
    ("^-^-^-W - Project is almost out of funds and logins permitted "),
     l10 char (70) aligned int static init
    ("^-^-^-R - Project is almost past termination date and logins permitted"),
     l11 char (90) aligned int static init
    ("^/^2xAcctid^8xAcctno^8xReq. no.^6xBilling Name^22xBilling Address^19xCutoff Code"),
     dashx1 char (90) aligned int static init
    ("  ------^8x-------^7x--------^6x------------^22x---------------^19x-----------"),
     xl2a char (98) aligned int static init
    ("^-^-^4xRequisition^8xCharge^10xRequisition^8xCharge^9xRequisition  Termination  Cutoff"),
     xl2b char (93) aligned int static init
    ("^-^14a  or PO no.^8xthis month^6xAmount^13xthis req.^6xBalance^6xDate^9xCode"),
     xl3 char (72) aligned int static init
    ("^9a ^12a  ^12a  ^15a  ^15a  ^15a  ^15a  ^8a     ^1a"),
     dashx char (120) aligned int static init
    ("^/^-------------  ------------^3x--------------^3x--------------^3x--------------^3x--------------  --------     -----");

/* procedures called by this program */

dcl  ioa_ entry options (variable),			/* output routine */
     ioa_$ioa_stream entry options (variable),		/* output on file */
     expand_path_ entry (ptr, fixed bin, ptr, ptr, fixed bin),
     idsort_ entry ((*) char (32) aligned, (*) fixed bin, fixed bin),
     system_info_$titles entry (char (*) aligned, char (*) aligned, char (*) aligned, char (*) aligned),
     get_wdir_ entry () returns (char (168) aligned),
     date_time_ entry (fixed bin (71), char (*) aligned),
     clock_ entry () returns (fixed bin (71)),
     cv_$mwvf entry (float bin) returns (char (15) aligned), /* dollar converter */
     hcs_$initiate entry (char (*) aligned, char (*) aligned, char (*) aligned,
     fixed bin (1), fixed bin (2), ptr, fixed bin),
     hcs_$terminate_noname entry (ptr, fixed bin),
     cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin),
     com_err_ entry options (variable);


%include user_attributes;
%include reqfile;
%include sat;

/* - - - - - - */

	nargs = 1;
getarg:	call cu_$arg_ptr (nargs, ap, al, ec);

/* five optional arguments are permitted
   .	-warn  -  use only warning codes for projects which should be cutoff
   .	-nosat  - don't put cutoff codes in the sat
   .	-nosum  - don't print a sumry report
   .	-nocutr  - don't print a cutrpt
   .	-noproj - output is sorted by account number instead of project id
   */
	if ec = 0 then do;
	     nargs = nargs+1;
	     arg = argu;
	     if arg = "-warn" then warn = "1"b;
	     else if arg = "-nosat" then satlist = "0"b;
	     else if arg = "-nosum" then sum = "0"b;
	     else if arg = "-nocutr" then cutr = "0"b;
	     else if arg = "-noproj" then projord = "0"b;
	     else call com_err_ (error_table_$badopt, "daily_summary", """^a""", arg);
	     go to getarg;
	end;
	today = clock_ ();				/* get date to put on reports */
	call date_time_ (today, date_string);
	call system_info_$titles (coxx, dpxx, l1, l2);	/* get installation id */
	dn = get_wdir_ ();				/* get working directory */
	en = "reqfile";				/* Now get requisition file. */
	call hcs_$initiate (dn, en, "", 0, 1, qp, ec);	/* Initiate reqfile. */
	if qp = null then do;
err:	     call com_err_ (ec, "daily_summary", en);
	     return;
	end;

	if satlist then do;				/* initiate sat unless "nosat" arg given */
	     en = "smf.cur.sat";
	     call hcs_$initiate (dn, en, "", 0, 1, satp, ec);
	     if satp = null then go to err;
	end;

	if sum then do;				/* print heading on sumry unless "nosum" arg given */
	     call ioa_$ioa_stream (sumry, "^|^-^-^a^/", l1); /* heading on summary */
	     call ioa_$ioa_stream (sumry, "^-^-^-^a^/", l2);
	     call ioa_$ioa_stream (sumry, l3, "billing summary", date_string);
	     call ioa_$ioa_stream (sumry, xl2a);
	     call ioa_$ioa_stream (sumry, xl2b, "Account no.");
	     call ioa_$ioa_stream (sumry, dashx);
	end;
	if cutr then do;				/* print heading on cutrpt unless "nocutr" arg given */

	     call ioa_$ioa_stream (cutrpt, "^|^-^-^a^/", l1);
	     call ioa_$ioa_stream (cutrpt, "^-^-^-^a^/", l2);
	     call ioa_$ioa_stream (cutrpt, l3, "overspent account summary", date_string);
	     call ioa_$ioa_stream (cutrpt, l4);
	     call ioa_$ioa_stream (cutrpt, l5);
	     call ioa_$ioa_stream (cutrpt, l6);
	     call ioa_$ioa_stream (cutrpt, l7);
	     call ioa_$ioa_stream (cutrpt, l8);
	     call ioa_$ioa_stream (cutrpt, l9);
	     call ioa_$ioa_stream (cutrpt, l10);
	     call ioa_$ioa_stream (cutrpt, l11);
	     call ioa_$ioa_stream (cutrpt, dashx1);
	end;

	m = reqfile.nacts;
	begin;


dcl  strings (m) char (32) aligned,
     indices (m) fixed bin;

	     do i = 1 to m;
		indices (i) = i;
		strings (i) = reqfile.reqfiletab (i).acctid;
	     end;
	     if projord then call idsort_ (strings, indices, m);
	     do j = 1 to m;
		i = indices (j);
		if acctid (i) = " " then go to skipb;
		cutoff_code = " ";
		balance = 0e0;
		pct_balance = 100;			/* pct_balance=100 means req_amt=0 and there is no dollar limit */
		days_to_cutoff = 131071;
		if mitacct (i) = "nonbill" then goto setsat; /* be sure users on nonbill projects
						   do not get cutoff warning messages */
		if reqfiletab.cutoff (i) < today then cutoff_code = "T"; /* has project past termination date */
		else if reqfiletab.cutoff (i) < today + (warn_days*oneday) then cutoff_code = "R";

		days_to_cutoff = 1 + divide (reqfiletab.cutoff (i) - today, oneday, 17, 0); /* truncate to next lower
						   whole day, and then add 1;
						   the message says "less than N days" */
		if req_amt (i) > 0e0 then do;		/* there is no limit for req_amt=0 */
		     balance = req_amt (i) - chg_tr (i) - chg_mo (i); /* get current balance for project */
		     if balance < 0e0 then cutoff_code = "X"; /* account is overspent */
		     else if balance < warn_amt then if cutoff_code ^= "T" then cutoff_code = "W";
			else;
		     else if balance < warn_pct * req_amt (i) then if cutoff_code ^= "T" then cutoff_code = "W";

		     pct_balance = (balance*100e0) / req_amt (i); /* floating divide, then fix */

		end;
		if warn then do;			/* if "warn" arg given change severe codes to warn codes */
		     if cutoff_code = "T" then cutoff_code = "S";
		     else if cutoff_code = "X" then cutoff_code = "Y";
		end;
		if cutoff_code = "X" then cut_count = cut_count + 1;
		else if cutoff_code = "T" then cut_count = cut_count + 1;
		else if cutoff_code ^= " " then warn_count = warn_count + 1;

		if chg_mo (i) = 0e0 then go to skipp;	/* ignore if zero charge */
		if sum then do;			/* print sumry total unless "nosum" arg given */
		     if req_amt (i) = 0e0 then do;	/* Check for OPEN */
			rv, rb = open;
		     end;
		     else do;			/* ... no */
			rv = cv_$mwvf (float (req_amt (i)));
			rb = cv_$mwvf (float (balance));
		     end;
		     call date_time_ (reqfile.cutoff (i), dtemp);
		     call ioa_$ioa_stream (sumry, xl3, acctid (i), mitacct (i), reqno (i),
			cv_$mwvf (float (chg_mo (i))), rv,
			cv_$mwvf (float (chg_mo (i) + chg_tr (i))), rb, dtemp, cutoff_code);
		end;

skipp:		total_month = total_month + chg_mo (i);
		total_amt = total_amt + req_amt (i);
		total_req = total_req + chg_mo (i) + chg_tr (i);
		total_balance = total_balance + balance;

setsat:		if satlist then do;			/* put cutoff_code in sat unless "nosat" arg given */
		     do isat = 1 to satp -> sat.current_size; /* locate corresponding sat entry */
			satep = addr (satp -> sat.project (isat));
			if project.state = 1 then if project.project_id = acctid (i) then do;
				project.cutoff = cutoff_code;
						/* copy figures used for printing of cutoff warning messages */
				project.days_to_cutoff = days_to_cutoff; /* into the sat entry for the project */
				project.dollars_to_cutoff = balance;
				project.pct_balance = pct_balance;

				go to print_cut;	/* we found the project; now get out of the loop */
			     end;
		     end;
		     if chg_mo (i) ^= 0e0 then	/* error unless proj is dead */
			if qdf (i) = 0 then
			     call ioa_ ("daily_summary: project ""^a"" not in sat but req has charge $^.2f",
			     acctid (i), chg_mo (i));
		end;
print_cut:	if cutr then do;			/* print nonblank cutoff_codes unless "nocutr" arg given */
		     if cutoff_code ^= " " then	/* */
			if qdf (i) = 0 then		/* only active projects */
			     call ioa_$ioa_stream (cutrpt, "^/^2x^12a  ^12a  ^12a  ^32a  ^32a  ^1a",
			     acctid (i), mitacct (i), reqno (i), billing_name (i), billing_addr (i), cutoff_code);
		end;
skipb:	     end;
	end;
	if sum then do;				/* print totals unles "nosum" arg given */
	     call ioa_$ioa_stream (sumry, dashx);
	     call ioa_$ioa_stream (sumry, xl3, "", "", "", cv_$mwvf (total_month), cv_$mwvf (total_amt),
		cv_$mwvf (total_req), cv_$mwvf (total_balance), "", "");
	end;

/* close all files */

	call ioa_ ("daily_summary: cut ^d, warned ^d, total $^.2f", cut_count, warn_count, total_month);

	if satlist then call hcs_$terminate_noname (satp, ec);
	call hcs_$terminate_noname (qp, ec);		/* Terminate reqfile. */
	return;

     end daily_summary;
