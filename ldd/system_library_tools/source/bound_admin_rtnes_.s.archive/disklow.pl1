/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


disklow: proc;

/* This program prints out a listing of projects
   whose disk usage is near their limits,
   from the disk usage figures in "projfile"
   which were placed there by "charge_disk".

   It is based on the program print_disk, and it
   prints the same information, but only for projects
   selected by the arguments (or the defaults).

   The arguments are number_left and percent_full.
   The defaults are 20 pages and 90%, respectively.

   THVV 4/70
   Modified June 1979 by C. Hornig to make it legal PL/1.
   Modified Feb 1980 by M. B. Armstrong to implement multiple rate structures.
   */

dcl (hp, pp) ptr,					/* pointer to input */
     dummy (0: 7) float bin,
     dummy1 float bin,
     disk_price (0:9) float bin,
     ap pointer,					/* argument pointer */
     al fixed bin,					/* argument length */
     bchr char (al) based (ap) unal,
     cs char (16) aligned,
     tid char (9) aligned,
     PERCENT_FULL float bin init (0.90e0),
     NUMBER_LEFT fixed bin init (20),
     nlow fixed bin init (0),
     rs_number fixed bin,
     rs_name char (32),
     rs_count fixed bin,
     temp fixed bin (71),				/* temp for disk use */
     dols float bin,				/* dollar charge */
     tdols float bin init (0.0e0),			/* total charge */
     tqta fixed bin (35) init (0),			/* total quota */
     tuse fixed bin (35) init (0),			/* total use */
     qta fixed bin (35),				/* project quota */
     use fixed bin (35),				/* project use */
    (i, np) fixed bin;				/* misc */
dcl  ec fixed bin (35);

dcl  system_info_$rs_name entry (fixed bin, char (*), fixed bin (35)),
     system_info_$prices_rs entry (fixed bin,
    (0: 7) float bin, (0: 7) float bin, (0: 7) float bin, (0: 7) float bin, float bin, float bin),
     system_info_$max_rs_number entry (fixed bin),
     search_sat_$rs_number entry (char (*), fixed bin, fixed bin (35)),
     search_sat_$clean_up entry,
     get_wdir_ entry () returns (char (168)),
     cu_$arg_ptr ext entry (fixed bin, ptr, fixed bin, fixed bin (35)),
     cv_dec_check_ ext entry (char (*), fixed bin (35)) returns (fixed bin (35)),
     ioa_ ext entry options (variable),			/* output printing procedure */
     hcs_$initiate entry (char (*) aligned, char (*) aligned, char (*) aligned, fixed bin, fixed bin, ptr, fixed bin (35)),
     hcs_$terminate_noname entry (ptr, fixed bin (35)),	/* file system */
     com_err_ ext entry options (variable);		/* error reporter */
dcl  error_table_$noentry external fixed bin (35);

dcl (addr, hbound, null) builtin;

dcl  format char (24) int static aligned options (constant) init /* output formats */
    ("^9a^4x^6d^4x^6d^4x^15.2f");

%include projfile;

/* - - - - */

	call system_info_$max_rs_number (rs_count);	/* see if site has multiple rate structures */
	ap = addr (ap);				/* initialize ap to dummy address */

	call cu_$arg_ptr (1, ap, al, ec);		/* get arg 1 */
	if ec = 0 then do;
	     i = cv_dec_check_ (bchr, ec);		/* number? */
	     if ec ^= 0 then do;
dec_err:		call com_err_ (0, "disklow", "^a is non-numeric.", bchr);
		return;
	     end;
	     NUMBER_LEFT = i;
	     call cu_$arg_ptr (2, ap, al, ec);		/* get arg 2 */
	     if ec = 0 then do;
		i = cv_dec_check_ (bchr, ec);
		if ec ^= 0 then go to dec_err;
		PERCENT_FULL = i/100.0e0;
	     end;
	end;

	cs = "projfile";
	call hcs_$initiate ((get_wdir_ ()), cs, "", 0, 1, pp, ec);
	if pp = null then do;
err:	     call com_err_ (ec, "disklow", cs);		/* complain */
	     return;
	end;

	do rs_number = 0 to hbound (disk_price, 1);	/* get all the prices */
	     call system_info_$rs_name (rs_number, rs_name, ec); /* this is just used to find if the rs exists */
	     if ec ^= 0 then disk_price (rs_number) = disk_price (0); /* assumes default will be defined aok */
	     else call system_info_$prices_rs (rs_number, dummy, dummy, dummy, dummy, disk_price (rs_number), dummy1);
	end;

	np = projfile.nproj;			/* get number of projects */

	call ioa_ ("Project       quota      used      dollar charge");
	do i = 1 to np;				/* loop on all projects */
	     if id (i) = "" then go to skip;
	     if off (i) ^= 0 then if disk_psec (i) = 0 then go to skip;
		else tid = "*" || id (i);
	     else tid = id (i);
	     qta = disk_quota (i);			/* extract project quota */
	     use = disk_use (i);			/* use */
	     temp = disk_psec (i);			/* page-seconds */
	     if rs_count > 0 then do;			/* only if site has multiple rate structures */
		call search_sat_$rs_number ((id (i)), rs_number, ec); /* get rate index */
		if ec ^= 0 then
		     if ec = error_table_$noentry then
			call com_err_ (ec, "disklow",
			"Trying to locate project ""^a"".  Default rates will be used.",
			id (i));
		     else call com_err_ (ec, "disklow", "Accessing the sat.  Default rates will be used");
	     end;
	     else rs_number = 0;
	     dols = temp * disk_price (rs_number);	/* compute charge */
	     tdols = tdols + dols;			/* accumulate totals */
	     tqta = tqta + qta;
	     tuse = tuse + use;
	     if use = 0 then go to skip;		/* should we print record */
	     if qta - use < NUMBER_LEFT then go to p1;
	     if (1.0e0 * use) / qta > PERCENT_FULL then go to p1;
	     go to skip;
p1:	     call ioa_ (format, tid, qta, use, dols);
	     nlow = nlow + 1;
skip:	end;
	if nlow = 0 then call ioa_ ("All projects OK.");
	call ioa_ ("");
	call ioa_ (format, "TOTAL", tqta, tuse, tdols);
	call hcs_$terminate_noname (pp, ec);		/* terminate input */
	if rs_count > 0 then call search_sat_$clean_up;	/* tidy up */

     end disklow;
