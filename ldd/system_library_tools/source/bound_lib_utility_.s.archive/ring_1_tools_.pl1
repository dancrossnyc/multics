/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* The following procedure is a special entry in ring 1 for use in installing procedures
   in the system libraries. It calls the acl primitive and name manipulation procedures, but first sets the
   validation level to 1 so that procedures can be installed in ring 1 from
   ring 4.

   Originally coded by R. J. Feiertag on January 19, 1971
   last modified by E. Stone 12/71 - changed name from set_acc_control_list_
   modified by Peter B. Kelley 05/73 	- added entry points for new ACL primitives;
   - renamed existing entry points to correspond to
   published documentation. (installation_tools_ gate also changed).
   Modified 01/11/79 by C. D. Tavares to add dir_ring_brackets entry.
   Modified 831014 BIM for delentry_file, expunge acl_add1.
*/

/* format: style2,idind30,indcomtxt */
ring_1_tools_:
     procedure;

	dcl     dir		        char (*);	/* directory of branch whose acl is to be replaced */
	dcl     entry		        char (*);	/* entry name of acl whose acl is to be replaced */
	dcl     code		        fixed bin (35);
						/* file system error code */
	dcl     switch_value	        bit parameter;
						/* for switch stuff */
	dcl     validation_level	        fixed bin;	/* validation level of caller */

	dcl     acl_ptr		        ptr;	/* ptr to new acl structure */
	dcl     delete_acl_ptr	        ptr;	/* ptr to structure containing deletions */
	dcl     dir_acl_ptr		        ptr;	/* as acl_ptr 'cept points to dir_acl structure */
	dcl     acl_count		        fixed bin;	/* no. of acls in structure */
	dcl     area_ptr		        ptr;	/* points to area where acl list is to be */
						/* allocated when listing whole acl  */
	dcl     alloc_ptr		        ptr;	/* set to allocated list in area when listing */
						/* whole acl  */
	dcl     no_sysdaemon_sw	        bit (1) aligned;
						/* if "0"b then *.SysDaemon.* rwa (sma) will */
						/* be appended to replacement list */
	dcl     rbs		        (3) fixed bin (3);
						/* ring brackets for hcs_$set_ring_brackets */
	dcl     dir_rbs		        (2) fixed bin (3);
						/* ring brackets for hcs_$set_dir_ring_brackets */

	dcl     old_name		        char (*);
	dcl     new_name		        char (*);
	dcl     dir2		        char (*);
	dcl     entry2		        char (*);
	dcl     caller		        char (*);
	dcl     err_sw		        bit (1) aligned;

	dcl     cleanup		        condition;

	dcl     copy_names_		        entry (char (*), char (*), char (*), char (*), char (*), bit (1) aligned,
				        fixed bin (35));
	dcl     cu_$level_get	        entry (fixed bin);
	dcl     cu_$level_set	        entry (fixed bin);
	dcl     get_ring_		        entry returns (fixed bin);
	dcl     move_names_		        entry (char (*), char (*), char (*), char (*), char (*), bit (1) aligned,
				        fixed bin (35));
	dcl     hcs_$add_acl_entries	        entry (char (*), char (*), ptr, fixed bin, fixed bin (35));
	dcl     hcs_$add_dir_acl_entries      entry (char (*), char (*), ptr, fixed bin, fixed bin (35));
	dcl     hcs_$chname_file	        entry (char (*), char (*), char (*), char (*), fixed bin (35));
	dcl     hcs_$delentry_file	        entry (char (*), char (*), fixed bin (35));
	dcl     hcs_$delete_acl_entries       entry (char (*), char (*), ptr, fixed bin, fixed bin (35));
	dcl     hcs_$delete_dir_acl_entries   entry (char (*), char (*), ptr, fixed bin, fixed bin (35));
	dcl     hcs_$list_acl	        entry (char (*), char (*), ptr, ptr, ptr, fixed bin, fixed bin (35));
	dcl     hcs_$list_dir_acl	        entry (char (*), char (*), ptr, ptr, ptr, fixed bin, fixed bin (35));
	dcl     hcs_$replace_acl	        entry (char (*), char (*), ptr, fixed bin, bit (1) aligned,
				        fixed bin (35));
	dcl     hcs_$replace_dir_acl	        entry (char (*), char (*), ptr, fixed bin, bit (1) aligned,
				        fixed bin (35));
	dcl     hcs_$set_ring_brackets        entry (char (*), char (*), (3) fixed bin (3), fixed bin (35));
	dcl     hcs_$set_dir_ring_brackets    entry (char (*), char (*), (2) fixed bin (3), fixed bin (35));
	dcl     hcs_$set_safety_sw	        entry (char (*), char (*), bit, fixed bin (35));
	dcl     term_		        entry (character (*), character (*), fixed binary (35));


chname_file:
     entry (dir, entry, old_name, new_name, code);

	validation_level = -1;
	on cleanup call cleanup_validation;
	call setup;
	call hcs_$chname_file (dir, entry, old_name, new_name, code);
	go to RETURN;

copy_names_:
     entry (dir, entry, dir2, entry2, caller, err_sw, code);

	validation_level = -1;
	on cleanup call cleanup_validation;
	call setup;
	call copy_names_ (dir, entry, dir2, entry2, caller, err_sw, code);
	go to RETURN;

delentry_file:
     entry (dir, entry, code);

	validation_level = -1;
	on cleanup call cleanup_validation;
	call setup;
	call term_ (dir, entry, (0));			/* cannot hurt */
	call hcs_$delentry_file (dir, entry, code);
	go to RETURN;

move_names_:
     entry (dir, entry, dir2, entry2, caller, err_sw, code);

	validation_level = -1;
	on cleanup call cleanup_validation;
	call setup;
	call move_names_ (dir, entry, dir2, entry2, caller, err_sw, code);
	go to RETURN;

list_acl:
     entry (dir, entry, area_ptr, alloc_ptr, acl_ptr, acl_count, code);

	validation_level = -1;
	on cleanup call cleanup_validation;
	call setup;
	call hcs_$list_acl (dir, entry, area_ptr, alloc_ptr, acl_ptr, acl_count, code);
	go to RETURN;

add_acl_entries:
     entry (dir, entry, acl_ptr, acl_count, code);

	validation_level = -1;
	on cleanup call cleanup_validation;
	call setup;
	call hcs_$add_acl_entries (dir, entry, acl_ptr, acl_count, code);
	go to RETURN;

delete_acl_entries:
     entry (dir, entry, delete_acl_ptr, acl_count, code);

	validation_level = -1;
	on cleanup call cleanup_validation;
	call setup;
	call hcs_$delete_acl_entries (dir, entry, delete_acl_ptr, acl_count, code);
	go to RETURN;

replace_acl:
     entry (dir, entry, acl_ptr, acl_count, no_sysdaemon_sw, code);

	validation_level = -1;
	on cleanup call cleanup_validation;
	call setup;
	call hcs_$replace_acl (dir, entry, acl_ptr, acl_count, no_sysdaemon_sw, code);
	go to RETURN;

list_dir_acl:
     entry (dir, entry, area_ptr, alloc_ptr, dir_acl_ptr, acl_count, code);

	validation_level = -1;
	on cleanup call cleanup_validation;
	call setup;
	call hcs_$list_dir_acl (dir, entry, area_ptr, alloc_ptr, dir_acl_ptr, acl_count, code);
	go to RETURN;

add_dir_acl_entries:
     entry (dir, entry, dir_acl_ptr, acl_count, code);

	validation_level = -1;
	on cleanup call cleanup_validation;
	call setup;
	call hcs_$add_dir_acl_entries (dir, entry, dir_acl_ptr, acl_count, code);
	go to RETURN;

delete_dir_acl_entries:
     entry (dir, entry, delete_acl_ptr, acl_count, code);

	validation_level = -1;
	on cleanup call cleanup_validation;
	call setup;
	call hcs_$delete_dir_acl_entries (dir, entry, delete_acl_ptr, acl_count, code);
	go to RETURN;

replace_dir_acl:
     entry (dir, entry, dir_acl_ptr, acl_count, no_sysdaemon_sw, code);

	validation_level = -1;
	on cleanup call cleanup_validation;
	call setup;
	call hcs_$replace_dir_acl (dir, entry, dir_acl_ptr, acl_count, no_sysdaemon_sw, code);
	go to RETURN;

set_ring_brackets:
     entry (dir, entry, rbs, code);

	validation_level = -1;
	on cleanup call cleanup_validation;
	call setup;
	call hcs_$set_ring_brackets (dir, entry, rbs, code);
	go to RETURN;

set_dir_ring_brackets:
     entry (dir, entry, dir_rbs, code);

	validation_level = -1;
	on cleanup call cleanup_validation;
	call setup;
	call hcs_$set_dir_ring_brackets (dir, entry, dir_rbs, code);
	go to RETURN;

set_safety_sw:
     entry (dir, entry, switch_value, code);

	validation_level = -1;
	on cleanup call cleanup_validation;
	call setup;
	call hcs_$set_safety_sw (dir, entry, switch_value, code);

/****	   go to RETURN; */

RETURN:
	call cu_$level_set (validation_level);
	return;


setup:
     procedure;

	call cu_$level_get (validation_level);		/* remember caller's validation level */
	call cu_$level_set ((get_ring_ ()));		/* set validation level to current ring */
	return;
     end setup;

cleanup_validation:
     procedure;

	if validation_level ^= -1
	then call cu_$level_set (validation_level);
	validation_level = -1;
	return;
     end cleanup_validation;

     end ring_1_tools_;
