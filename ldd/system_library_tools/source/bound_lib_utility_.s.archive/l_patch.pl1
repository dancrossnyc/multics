/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */




/* Modified 1/29/75 by Larry Johnson to use new acl calls */
/* MCR 4232 Rename to l_patch 12/13/79 S. Herbst */
/* MCR 5346 09/04/81 by GA Texada to call appropriate hcs_ entries on linkage_error */

l_patch: lpatch: proc;

/* External Procedures */

dcl  add_acl_entries_entry	entry (char(*), char(*), ptr, fixed bin, fixed bin(35)) variable,
     list_acl_entry		entry (char(*), char(*), ptr, ptr, ptr, fixed bin, fixed bin(35)) variable,
     delete_acl_entries_entry	entry (char(*), char(*), ptr, fixed bin, fixed bin(35)) variable,
     com_err_ entry options (variable),
     command_query_ entry options (variable),
     cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35)),
     cv_oct_check_ entry (char (*), fixed bin (35)) returns (fixed bin),
     expand_pathname_ entry (char (*), char (*), char (*), fixed bin (35)),
     get_group_id_ entry returns (char (32) aligned),
     hcs_$add_acl_entries	entry (char(*), char(*), ptr, fixed bin, fixed bin(35)),
     hcs_$delete_acl_entries	entry (char(*), char(*), ptr, fixed bin, fixed bin(35)),
     hcs_$fs_get_path_name entry (ptr, char (*), fixed bin, char (*), fixed bin (35)),
     hcs_$list_acl		entry (char(*), char(*), ptr, ptr, ptr, fixed bin, fixed bin(35)),
     hcs_$initiate entry (char (*), char (*), char (*), fixed bin, fixed bin, ptr, fixed bin (35)),
     hcs_$terminate_noname entry (ptr, fixed bin (35)),
     installation_tools_$add_acl_entries entry (char (*), char (*), ptr, fixed bin, fixed bin (35)),
     installation_tools_$list_acl entry (char (*) aligned, char (*) aligned, ptr, ptr, ptr, fixed bin, fixed bin (35)),
     installation_tools_$delete_acl_entries entry (char (*) aligned, char (*) aligned, ptr, fixed bin, fixed bin (35)),
     ioa_ entry options (variable),
     patch_entry			entry(ptr, ptr, fixed bin, fixed bin(35)) variable,
     installation_tools_$patch_ptr entry (ptr, ptr, fixed bin, fixed bin (35)),
     ring_1_patch_$ptr		entry (ptr, ptr, fixed bin, fixed bin(35)),
     ring_zero_peek_ entry (ptr, ptr, fixed bin, fixed bin (35));

dcl linkage_error condition;

dcl  error_table_$argerr ext fixed bin (35);

/* Builtin Functions */

dcl (addr, baseptr, substr, null, ptr) builtin;

/* Text References */

dcl  name int static fixed bin init (0),
     number int static fixed bin init (1);

/* Internal Static Variables */

dcl  id int static char (7) aligned init ("l_patch");

/* Automatic Variables */

dcl  argp ptr,
     current_access bit (3),
     patch_ptr ptr,
     segptr ptr;

dcl  answer char (16) varying,
     dir char (168),
     ename char (32);

dcl  old_acl_sw bit (1) aligned init ("0"b);		/* set if there was an old acl */
dcl  acl_sw bit (1) aligned init ("0"b);

dcl  arglen fixed bin,
     i fixed bin,
     narg fixed bin,
     nwords fixed bin,
     offset fixed bin,
     segno fixed bin,
     sw fixed bin;

dcl  code fixed bin (35);

dcl 1 new_acl aligned,
    2 access_name char (32),
    2 modes bit (36),
    2 zero_pad bit (36),
    2 status_code fixed bin (35);

dcl 1 old_acl aligned like new_acl;

dcl 1 acl_del_list aligned,
    2 access_name char (32),
    2 status_code fixed bin (35);

dcl 1 query_info aligned,
    2 version fixed bin init (1),
    2 yes_or_no_sw bit (1) unaligned init ("1"b),
    2 supress_name_sw bit (1) unaligned init ("0"b),
    2 status_code fixed bin (35) init (0),
    2 query_code fixed bin (35) init (0);

dcl  new_data (0:1023) fixed bin,
     old_data (0:1023) fixed bin;

/* Based Storage */

dcl  arg char (arglen) unaligned based;

/*
   
*/

	narg = 1;

	call cu_$arg_ptr (narg, argp, arglen, code);	/* get first arg - segment name or segment number */
	if code ^= 0 then go to err1;

	segno = cv_oct_check_ (argp -> arg, code);	/* try to convert to octal number */

	if code ^= 0 then do;			/* given a pathname */
	     sw = name;
	     call expand_pathname_ (argp -> arg, dir, ename, code);
	     if code ^= 0 then go to err2;
	end;

	else do;					/* given a segment number */
	     sw = number;
	     segptr = baseptr (segno);		/* construct a pointer */
	     call hcs_$fs_get_path_name (segptr, dir, arglen, ename, code);
	     if code ^= 0 then go to err2;		/* get the pathname of the segment */
	end;

	narg = 2;					/* get the offset to be patched */
	call cu_$arg_ptr (narg, argp, arglen, code);
	if code ^= 0 then go to err1;

	offset = cv_oct_check_ (argp -> arg, code);
	if code ^= 0 then go to err4;

	if sw = name then do;			/* initate the segment */
	     call hcs_$initiate (dir, ename, "", 0, 0, segptr, code);
	     if segptr = null then go to err3;		/* if given pathname */
	end;

	patch_ptr = ptr (segptr, offset);		/* get location in segment to be patched */

arg_fetch:
	narg = narg + 1;
	call cu_$arg_ptr (narg, argp, arglen, code);
	if code ^= 0 then go to start;
	new_data (narg-3) = cv_oct_check_ (argp -> arg, code);
	if code ^= 0 then go to err4;
	go to arg_fetch;

start:
	if narg = 3 then go to err1;
	nwords = narg - 3;

	on linkage_error begin;
	     delete_acl_entries_entry = hcs_$delete_acl_entries;
	     add_acl_entries_entry = hcs_$add_acl_entries;
	     patch_entry = ring_1_patch_$ptr;
	     add_acl_entries_entry = hcs_$add_acl_entries;
	     list_acl_entry = hcs_$list_acl;
	     goto revert_linkage_error;
	     end;
/* set up for installation_tools_ as the "normal" gate  */

	delete_acl_entries_entry = installation_tools_$delete_acl_entries;
	add_acl_entries_entry = installation_tools_$add_acl_entries;
	patch_entry = installation_tools_$patch_ptr;
	add_acl_entries_entry = installation_tools_$add_acl_entries;
	list_acl_entry = installation_tools_$list_acl;
revert_linkage_error:
	 revert linkage_error;
/* get current acl for user so that it can be reset later */

	old_acl.access_name = get_group_id_ ();
	old_acl.modes, old_acl.zero_pad = "0"b;
	old_acl.status_code = 0;

	call list_acl_entry (dir, ename, null, null, addr (old_acl), 1, code);
	if code ^= 0 then go to err3;
	if old_acl.status_code = 0 then do;
	     old_acl_sw = "1"b;
	     current_access = substr (old_acl.modes, 1, 3); /* check to see if i have access */
	     if current_access = "101"b | current_access = "111"b then go to acl_ok;
	end;

/* set up new acl with rew access */

	new_acl.access_name = old_acl.access_name;
	new_acl.modes = "111"b;
	new_acl.zero_pad = "0"b;

	call add_acl_entries_entry (dir, ename, addr (new_acl), 1, code);
	if code = error_table_$argerr then do;
	     code = new_acl.status_code;
	     go to err3;
	end;
	if code ^= 0 then go to err3;
	if new_acl.status_code ^= 0 then do;
	     code = new_acl.status_code;
	     go to err3;
	end;
	acl_sw = "1"b;				/* remember that i set acl */
acl_ok:

	call ring_zero_peek_ (patch_ptr, addr (old_data), nwords, code);
	if code ^= 0 then go to err2;
	do i = 0 to nwords - 1;
	     call ioa_ ("^6o  ^w to ^w", offset+i, old_data (i), new_data (i));
	end;

	call command_query_ (addr (query_info), answer, id, "Type yes if patches are correct.");
	if answer = "no" then go to finish;


	call patch_entry (addr (new_data), patch_ptr, nwords, code);
	if code ^= 0 then go to err3;

finish:
	if acl_sw then if old_acl_sw then do;		/* restore old acl */
		acl_sw = "0"b;

		call add_acl_entries_entry (dir, ename, addr (old_acl), 1, code);
		if code = error_table_$argerr then do;
		     code = old_acl.status_code;
		     go to err3;
		end;
		if code ^= 0 then go to err3;
	     end;
	     else do;				/* delete the acl i added */
		acl_sw = "0"b;
		acl_del_list.access_name = new_acl.access_name;

		call delete_acl_entries_entry (dir, ename, addr (acl_del_list), 1, code);
		if code = error_table_$argerr then do;
		     code = acl_del_list.status_code;
		     go to err3;
		end;
		if code ^= 0 then go to err3;
	     end;

	if sw = name then				/* terminate the segment if we initiated it */
	     call hcs_$terminate_noname (segptr, code);

	return;
err1:	call com_err_ (code, id);
	go to finish;

err2:	call com_err_ (code, id, argp -> arg);
	go to finish;

err3:	call com_err_ (code, id, "^a>^a", dir, ename);
	go to finish;

err4:	call com_err_ (0, id, "Illegal octal number ^a", argp -> arg);
	go to finish;
     end l_patch;
