/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(86-10-20,TLNguyen), approve(86-10-22,MCR7561),
     audit(86-10-22,Gilcrease), install(86-10-22,MR12.0-1194):
     Fix bug which occurs when the return value has a leading space.
                                                   END HISTORY COMMENTS */


get_library_segment: gls: procedure;

/*

   get_library_segment (gls): Special command used to copy source
   segments from the library archives to the user's working directory.
   It will call get_archive_file_ to search the source archives
   in the "source" directories off of specified "system" directories
   in >ldd.

   The option "-sys" is followed by a system name (ie, "hard") and
   specifies what directories to search (ie, ">ldd>hard>source").
   Up to 32 system names may be specified.  The systems are searched
   in the order given.

   The "-long" ("-lg") option is used the cause the printing
   of a message specifying where each segment is found.
   The "-brief" ("-bf") option is used to suppress the printing
   of all messages except those associated with argument processing.


   If the -sys control arg is not specified all the
   directories specified in the system control files
   are searched.

   Up to 25 segments may be searched for.

   Usage:

   gls seg_name1_ ... seg_name_n opt1_ ... opt_n

   David M. Jordan, June 1971, from P. Bos and J. Spall
   Modified November, 1971 to add the brief and long options
   and to expand error messages. David M. Jordan

   modified June 1972 by steve tepper due to reorganization of
   source libraries.

   Modified on August 9, 1972 by Gary C. Dixon to correct
   errors in parsing the control file, to remove the "pl1"
   library from the default list of systems to be searched
   in order to prevent access violations for most users,
   and to improve error messages.

   Modified on September 30, 1972 by Gary C. Dixon to use
   a ptr to gls as the caller_ptr in the call to hcs_$make_entry
   which initiates the search routines so that gls users don't
   have to have tools in their search path.

   Modified on February 27, 1973 by Peter B. Kelley to rename the
   primary entry point "get_library_source" to "get_library_segment".
   The entry point get_library_source" was kept.  Also modified
   to remove "dev" from the default search paths as "sss" and "dev"
   are now one  and the same.

   Modified May 1974 by Arlene Scherer to add code for the Network library
   and to make it able to copy an archive component into the user's directory
   with the -rename option when a same-named component is already there.
   Also removed obsolete entry get_library_source.

   Modified July 1974 by Steve Herbst to fix namedup bug when returning from
   nd_handler_ with an answer of "no".

   Modified July 1974 by Arlene J. Scherer to fix bug which occurs when fetching
   a source segment with a two-character name (i.e. if.pl1).

   Modified Aprint 1978 by Michael R. Jordan to change the meaning of -brief to allow
   error message-less operation.

   Completely rewritten by D. Vinograd to make it maintainble and in up-to-date prog technology
   October 1979

   Modified 03/25/81, W. Olin Sibert, to make -rename implement equal convention. Isn't it strange how these
   journalization notices get longer and longer each time someone adds one?
   Modified 10/15/86, Tai Le Nguyen, to fix bug which occurs when the gls active function returned a pathname preceded by a space.

*/

dcl  arglp ptr;
dcl  ac fixed bin;					/* number of args processed */
dcl  active_fnc bit (1);
dcl  segx fixed bin;				/* loop varsegxable */
dcl  sysx fixed bin;				/* loop variable */
dcl  nargs fixed bin;				/* number of arguments */
dcl  segcount fixed bin;				/* number of segments to be found */
dcl  syscount fixed binary;				/* number of systems to be searched */
dcl  code fixed bin (35);				/* error code */
dcl  long_sw bit (1);				/* switch for -lg options */
dcl  brief_sw bit (1);				/* switch for -bf option */
dcl  argp ptr;					/* argument ptr */
dcl  argl fixed binary;				/* argument length */
dcl  arg character (argl) based (argp);			/* command argument */
dcl  segname (max_names) character (32);		/* array of segments to find */
dcl  new_name (max_names) char (32);
dcl  equal_name char (32);
dcl (dirname, ename, sname) char (168);
dcl (break, eof) bit (1);
dcl (break_f, eof_f) fixed bin (1);
dcl  errsw bit (1) aligned;
dcl  controlp ptr;
dcl  atom char (cc) unaligned based (controlp);
dcl  cc fixed bin;
dcl  lib_name char (32) ;
dcl  root char (168);
dcl  process_dir char (168);
dcl  working_dir char (168);
dcl  idx fixed bin;
dcl  sys (max_sys) character (32);			/* array of systems to search */
dcl  retp ptr;
dcl  retl fixed bin;
dcl  ret char (retl) based (retp) var;

dcl 1 segment_acl aligned,
    2 access_name char (32),
    2 modes bit (36) initial ("0"b),
    2 pad bit (36) initial ("0"b),
    2 status_code fixed bin (35);

dcl  myname character (32) static internal options (constant) init ("get_library_segment");
dcl  max_names fixed bin int static init (25) options (constant);
dcl  max_sys fixed bin int static init (100) options (constant);

dcl (addr,
     binary,
     divide,
     hbound,
     rtrim,
     bit,
     before,
     reverse,
     null,
     codeptr,
     substr) builtin;

dcl (error_table_$badopt,
     error_table_$namedup,
     error_table_$seg_not_found,
     error_table_$noarg,
     error_table_$too_many_names) fixed bin (35) ext;

dcl  search_entry entry (char (*), char (*), char (*), fixed bin (35)) variable;
dcl  suffixed_name_$make entry (char (*), char (*), char (*), fixed bin (35));
dcl  err_rnt entry variable options (variable);
dcl  get_system_free_area_ entry returns (ptr);
dcl  hcs_$star_dir_list_ entry (char (*), char (*), fixed bin (3), ptr, fixed bin, fixed bin, ptr, ptr, fixed bin (35));
dcl  ioa_ entry options (variable);
dcl  active_fnc_err_ entry options (variable);
dcl  com_err_ entry options (variable);
dcl  archive entry options (variable);
dcl  cu_$arg_list_ptr entry (ptr);
dcl  cu_$af_return_arg entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  cu_$arg_ptr_rel entry (fixed bin, ptr, fixed bin, fixed bin (35), ptr);
dcl  hcs_$add_acl_entries entry (char (*), char (*), ptr, fixed bin, fixed bin (35));
dcl  hcs_$delentry_file entry (char (*), char (*), fixed bin (35));
dcl  hcs_$make_entry entry (ptr, char (*), char (*), entry, fixed bin (35));
dcl  get_equal_name_ entry (char (*), char (*), char (*), fixed bin (35));
dcl  get_wdir_ entry returns (char (168));
dcl  get_pdir_ entry returns (char (168));
dcl  get_group_id_$tag_star entry returns (char (32));
dcl  parse_file_$parse_file_init_name entry (char (*), char (*), ptr, fixed bin (35));
dcl  parse_file_$parse_file_set_break entry (char (*));
dcl  parse_file_$parse_file_unset_break entry (char (*));
dcl  parse_file_$parse_file_ptr entry (ptr, fixed bin, fixed bin (1), fixed bin (1));
dcl  pathname_ entry (char (*), char (*)) returns (char (168));
dcl  pathname_$component entry (char (*), char (*), char (*)) returns (char (194));
dcl  copy_seg_ entry (char (*), char (*), char (*), char (*), char (*), bit (1) aligned, fixed bin (35));
dcl  requote_string_ entry (char(*)) returns (char(*));

%include star_structures;

	root = ">ldd";				/* set default root name*     (ast) */
	star_list_branch_ptr = null;
	star_list_names_ptr = null;
	star_select_sw = star_ALL_ENTRIES;
	lib_name = "";
	working_dir = get_wdir_ ();
	ac = 0;
	active_fnc = "0"b;
	err_rnt = com_err_;
	segcount = 0;
	syscount = 0;
	brief_sw = "0"b;				/* default is to print the missing segment error */
	long_sw = "0"b;				/* default is not to print a message */

	call cu_$arg_list_ptr (arglp);
	call cu_$af_return_arg (nargs, retp, retl, code);
	if code = 0 then do;
	     active_fnc = "1"b;
	     err_rnt = active_fnc_err_;
	     ret = "";
	end;
	if nargs = 0 then do;
	     call err_rnt (error_table_$noarg, myname,
		"Usage is: get_library_segment seg_name {seg_name} {-control_args}");
	     return;
	end;

/* * * * * * * * * * * * * * * * * * * * * * * * */
/*				         */
/* Argument processing, options start with "-",  */
/* otherwise assumed to be segment name.  The    */
/* arg following the "-sys" option is taken to   */
/* be a system (ldd directory) name.	         */
/*				         */
/* * * * * * * * * * * * * * * * * * * * * * * * */

	ac = 1;
	do while (ac <= nargs);

	     call cu_$arg_ptr_rel (ac, argp, argl, code, arglp);
	     if code ^= 0 then do;
noarg:		call err_rnt (code, myname, "no argument after ^a", arg);
		return;
	     end;

	     if substr (arg, 1, 1) ^= "-" then		/* Assumed to be source segment name */
		do;
		segcount = segcount + 1;
		if segcount > hbound (segname, 1) then do;
		     call err_rnt (error_table_$too_many_names, myname,
			"A maximum of ^d segment names may be specified.", hbound (segname, 1));
		     return;
		end;
		segname (segcount) = arg;
		new_name (segcount) = arg;
	     end;

	     else if arg = "-sys" then do;

/* * * * * * * * * * * * * * * * * * * * * * * * */
/*				         */
/* Must be followed by a system (ldd dir) name,  */
/* but we don't check the name for validity.     */
/*				         */
/* * * * * * * * * * * * * * * * * * * * * * * * */

		syscount = syscount + 1;
		if syscount > hbound (sys, 1) then do;
		     call err_rnt (error_table_$too_many_names, myname,
			"A maximum of ^d system names may be specified.", hbound (sys, 1));
		     return;
		end;
		sys (syscount) = get_arg ();
	     end;


	     else if arg = "-bf" | arg = "-brief" then do;

/* * * * * * * * * * * * * * * * * * * * * * * * */
/*				         */
/* Specifies that no message is to be printed    */
/*				         */
/* * * * * * * * * * * * * * * * * * * * * * * * */

		brief_sw = "1"b;
		long_sw = "0"b;
	     end;

	     else if arg = "-lg" | arg = "-long" then do;

/* * * * * * * * * * * * * * * * * * * * * * * * */
/*				         */
/* Specifies that a message should be printed    */
/*				         */
/* * * * * * * * * * * * * * * * * * * * * * * * */

		brief_sw = "0"b;
		long_sw = "1"b;
	     end;


/* ****************************************

   option "-control"

   sets the root node.
   the arg after "-root" is the new root node name.

   **************************************** */
	     else if arg = "-control" | arg = "-ct" then do;
		root = get_arg ();
		if root = "-working_directory" | root = "-wd" then
		     root = working_dir;
	     end;



/* **********************************************************

   option "-rename" ("-rn")

   renames the source segment to a new name in the target directory.

   *********************************************************** */
	     else if arg = "-rename" | arg = "-rn" then do;
		equal_name = get_arg ();
		call get_equal_name_ (segname (segcount), equal_name, new_name (segcount), code);
		if code ^= 0 then do;
		     call err_rnt (code, myname, "-rename ^a", equal_name);
		     return;
		end;
	     end; 				/* of processing for -rename */



/* ***********   bad option  ************ */
	     else do;
		call err_rnt (error_table_$badopt, myname, "^a", arg); /* Unknown option */
		return;
	     end;

	     ac = ac + 1;
	end;

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */


	if segcount = 0 then			/* No segment to look for specified */
	     do;
	     call err_rnt (error_table_$noarg, myname,
		"A segment name must be specified.");
	     return;
	end;

	if syscount = 0 then			/* No system specified, search them all */
	     do;
	     call hcs_$star_dir_list_ (root, "**.control", star_select_sw, get_system_free_area_ (),
		star_branch_count, star_link_count, star_list_branch_ptr, star_list_names_ptr, code);
	     if code ^= 0 then do;
		call err_rnt (code, myname, "Unable to list root");
		return;
	     end;
	     do idx = 1 to star_branch_count + star_link_count while (idx <= hbound (sys, 1));
		sys (idx) = star_list_names (star_dir_list_branch (idx).nindex);
	     end;
	     syscount = idx - 1;
	     if syscount = hbound (sys, 1) then
		call err_rnt (0, myname, "Warning - some control segs have been skipped");
	end;


/* * * * * * * * * * * * * * * * * * * * * * * * */
/*				         */
/*	     Main Search Loop	         */
/*				         */
/* * * * * * * * * * * * * * * * * * * * * * * * */

	do segx = 1 to segcount;
	     do sysx = 1 to syscount;

/*     	for each sys(sysx), make a ptr to [root || ">" || sys(sysx) || ".control"].
   read that file, which contains records of the format:
   [<directory name> <search seg name>].
   <search seg name> may be either <seg name>, or <seg name>$<entry name>.

   call the search segname, giving <directory  name> as an arg.

   the search seg will return the name of the segment (archive or otherwise)
   that contains the target segment.
   */
		call suffixed_name_$make (sys (sysx), "control", sys (sysx), code);
		if code ^= 0 then do;
		     call err_rnt (code, myname, "error constructing control file name for ^a",
			sys (sysx));
		     goto finish;
		end;
		call parse_file_$parse_file_init_name (root, sys (sysx), controlp, code); /* make a ptr to control file */
		if code ^= 0 then do;
		     call err_rnt (code, myname, " Unable to locate segment ^a>^a.",
			root, sys (sysx));
		     goto finish;
		end;
again:		dirname, sname = "";
		call parse_file_$parse_file_unset_break ("!""#%&'()+,-./;>?@[\]^_`{|}~");
		call get_atom;
		if eof then goto sys_done;		/* eof means done parsing file. */
		if break then goto syntax_err;	/* entry starting w/ break is an error */
		dirname = atom;

		call get_atom;
		if eof then goto eof_err;		/* to end file in mid-line is a no-no. */
		if break then			/* break must be ":"; else error. */
		     if atom ^= ":" then goto syntax_err;
		if substr (dirname, 1, 1) ^= ">" then dirname = rtrim (root) || ">" || dirname; /* fudge if rel. path */

		call parse_file_$parse_file_set_break (">;");
						/* absolute path name for search rtn is an error
						   name of routine terminate by a ";". */
		call get_atom;
		if eof then			/* ending file in mid-line is error. */
		     goto eof_err;
		if break then			/* segname starting w/ break is also bad. */
		     goto syntax_err;
		sname = atom;
		call get_atom;
						/* get entry name of search rtn, or ";" statement terminator. */
		if break then do;
		     if atom = ";" then
			ename = sname;		/* if end of stmt, use segname as entryname. */
		     else if atom = "$" then do;	/* look for entry name. */
			if eof then goto eof_err;	/* error to end file in mid-line */
			call get_atom;
			if eof then goto eof_err;	/* oops, forget stmt terminator. */
			if break then goto syntax_err; /* no breaks in valid entry name; error */
			ename = atom;

			call get_atom;
			if break then do;
			     if atom ^= ";" then goto syntax_err;
			end;
			else goto syntax_err;	/* non-break char is an error, too */
						/* eof is ignored at this time, if
						   it occurs, but will be caught on the
						   next parse call at top of this loop */
		     end;				/* break other than ";" or "$" is error */
		     else goto syntax_err;		/* non-break is an error, too	*/
		end;
		else goto syntax_err;
						/* eof is ignored at this point,
						   but caught next time at top of loop */
						/* now, dirname has directory to be searched,
						   sname   has segment name of search seg,
						   ename   has entry point name in search seg
						   */


dummy:		call hcs_$make_entry (codeptr (dummy), sname, ename, search_entry, code);
		if code ^= 0 then do;
		     call err_rnt (code, myname, "Unable to initiate search routine ^a$^a.",
			sname, ename);
		     goto finish;
		end;


/*   call search routine with "dirname", which contains the directory
   to be searched, and "segment", which contains the segname of what we are looking for.

   call it with:
   dirname	- name of node below which to search.
   segname(segx)	- target segname.
   lib_name	- file where we found it (may be an archive file).
   code	- error code (0 if ok, 1 if not found, n if other error).
   */
		call search_entry (dirname, segname (segx), lib_name, code);

/* now, analyze the return code from the searching seg.
   code=0 means that the segment was found, in segment lib_name
   (may be archive file).
   code=1 means that the segment was not found in the directory searched.
   */

		if code = 0 then do;		/* hooray, we found it */
		     if reverse (before (reverse (lib_name), ".")) = "archive" then do; /* is anarchive file */
			if long_sw then call ioa_ ("^a: Extracting ^a from ^a>^a.",
			     myname, segname (segx), dirname, lib_name);

/* *************************************************************************
   if rename option, extract segment into process directory and then copy it with
   new name to avoid name dups in the working directory
   ***************************************************** */

			if active_fnc then do;
			     if ret ^= "" then ret = ret || " ";
			     ret = ret || requote_string_ (rtrim (pathname_$component (dirname, lib_name, segname (segx))));
			end;
			else do;
			     if segname (segx) ^= new_name (segx) then do;
				process_dir = get_pdir_ ();

				call archive ("x", rtrim (dirname) || ">" || lib_name, rtrim (process_dir) || ">" || segname (segx));
				call copy_seg_ (process_dir, segname (segx), working_dir, new_name (segx), myname,
				     errsw, code);
				if code ^= 0 then if code ^= error_table_$namedup then
					call err_rnt (code, myname, "error copying from pdir");

				call hcs_$delentry_file (process_dir, segname (segx), code);
				if code ^= 0 then call err_rnt (code, myname, "error deleteing pdir copy");
			     end;

/* *****************************************************************
   if no rename option just extract it into the working directory
   ***************************************************************** */

			     else call archive ("x", rtrim (dirname) || ">" || lib_name, segname (segx));

/* ****************************************************
   In either case, set the acl to rew for user -extracter
   ***************************************************** */

			     segment_acl.access_name = get_group_id_$tag_star ();
			     segment_acl.modes = "1110"b;

			     call hcs_$add_acl_entries (working_dir, new_name (segx), addr (segment_acl), 1, code);
			     if (segment_acl.status_code ^= 0) | (code ^= 0) then
				call err_rnt (code, myname, "error adding access");

			end;
			goto seg_done;		/* in either case */
		     end;				/* end of archive code */
		     else do;
			if active_fnc then do;
			     if ret ^= "" then ret = ret || " ";
			     ret = ret || requote_string_ (rtrim (pathname_ (dirname, lib_name)));
			end;
			else do;
						/* copy from "dirname || ">" || lib_name" to "segment" */
			     if long_sw then call ioa_ ("^a: Copying ^a from ^a>^a.", myname,
				segname (segx), dirname, lib_name);
			     call copy_seg_ (dirname, lib_name, working_dir, new_name (segx), myname, errsw, code);
			     if code ^= 0 then if code ^= error_table_$namedup
				then if ^brief_sw
				     then call err_rnt (code, myname, "Error while attempting to copy ^a>^a to ^a.",
					dirname, lib_name, new_name (segx));
			end;
		     end;
		     goto seg_done;
		end;				/* end of loop for segments */
		if code ^= 1 then			/* Some other error (code = 1 means not found) */
		     if ^brief_sw & ^active_fnc then call err_rnt (code, myname,
			"^/Error encountered while searching ^a for ^a specified in ^a>^a.^/Search continues.",
			dirname, segname (segx), root, sys (sysx));
		goto again;
sys_done:
	     end;
	     if ^brief_sw then call err_rnt (error_table_$seg_not_found, myname, "^a.", segname (segx));
seg_done:
	end;
finish:
	if star_list_names_ptr ^= null then free star_list_names;
	if star_list_branch_ptr ^= null then free star_dir_list_branch;
	return;

syntax_err: call err_rnt (0, myname, "Syntax error in segment ^a>^a.", root, sys (sysx));
	goto finish;

eof_err:	call err_rnt (0, myname, "Premature EOF in segment ^a>^a.", root, sys (sysx));
	goto finish;

get_atom:	proc;
	     call parse_file_$parse_file_ptr (controlp, cc, break_f, eof_f);
	     break = bit (break_f, 1);		/* convert to bit string */
	     eof = bit (eof_f, 1);			/* ... */

	end get_atom;
get_arg:	proc returns (char (*));
	     ac = ac + 1;
	     call cu_$arg_ptr_rel (ac, argp, argl, code, arglp);
	     if code ^= 0 then goto noarg;
	     return (arg);
	end get_arg;
     end get_library_segment;
