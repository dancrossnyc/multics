/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


date_deleter: proc;

/* Command to delete everything in a given directory greater than N days old.
   Usage:

	date_deleter dir_path n_days {starnames} {-control_args}

   optionally providing starnames for match. */
/* Written 04/23/79 S. Herbst */
/* Fixed to work on MSF's with no_s 05/12/80 S. Herbst */
/* Added -dtem, etc. and fix to diagnose badstar ahead of time 06/10/81 S. Herbst */
/* Fixed bugs that deleted all MSF's and took fault for incacc 11/03/82 S. Herbst */
/* Changed to allow dtm cutoff; added selection ctl args -sm, etc. 12/15/83 S. Herbst */
/* Added -query_all, -query_each, -long, -absp 12/19/83 S. Herbst */
/* Fixed bug causing directories to be deleted regardless of date-time 04/20/84 S. Herbst */
/* Understand "new" hardcore error code from hcs_$star_, Keith Loepere, 01/06/85. */


/****^  HISTORY COMMENTS:
  1) change(87-12-01,Gilcrease), approve(87-12-15,MCR7815),
     audit(88-01-20,RBarstad), install(88-01-26,MR12.2-1018):
               Accept dates with leading hyphens.
                                                   END HISTORY COMMENTS */


%include branch_status;

dcl ME char (32) int static options (constant) init ("date_deleter");
dcl (NO_STARS init (0), STAR_STAR init (2)) fixed bin int static options (constant);

dcl 1 bs aligned like branch_status based;

dcl 1 entries (branch_count) aligned based (entries_ptr),	/* for hcs_$star lists */
     2 pad (4) fixed bin;
dcl names (99/* arbitrary */) char (32) aligned based (names_ptr);

dcl 1 starnames (arg_count) based (starnames_ptr),
   2 starname char (32),
   2 star_code fixed bin;

dcl 1 select aligned,
   2 (directory, msf, segment) bit (1) aligned;

dcl 1 option_switches aligned,
   2 (absp_sw, long_sw, query_all_sw, query_each_sw) bit (1) aligned;

dcl 1 query_array (query_bound) based (query_ptr),
   2 query_dn char (168),
   2 query_en char (32),
   2 query_type_name char (32);
dcl query_ptr ptr;
dcl (query_bound, query_count) fixed bin;

dcl arg char (arg_len) based (arg_ptr);
dcl (dn, msf_dn) char (168);
dcl (name, what) char (32);

dcl dtm72 bit (72);
dcl (got_cutoff_sw, got_dirname_sw, same_dir_sw, same_type_sw, yes_sw) bit (1);
dcl delete_switches bit (6);
dcl delete_force_sw bit (1) unaligned defined (delete_switches) position (1);
dcl delete_question_sw bit (1) unaligned defined (delete_switches) position (2);
dcl delete_directory_sw bit (1) unaligned defined (delete_switches) position (3);
dcl delete_segment_sw bit (1) unaligned defined (delete_switches) position (4);
dcl delete_link_sw bit (1) unaligned defined (delete_switches) position (5);
dcl delete_chase_sw bit (1) unaligned defined (delete_switches) position (6);

dcl area area based (area_ptr);

dcl (area_ptr, arg_ptr, bs_ptr, component_info_ptr, starnames_ptr) ptr;
dcl (entries_ptr, names_ptr) ptr;
dcl (msf_entries_ptr, msf_names_ptr) ptr;

dcl  DIR_TYPE init (2) fixed bin (2) int static options (constant);
dcl (DTCM_TYPE init (0), DTEM_TYPE init (1), DTD_TYPE init (2), DTU_TYPE init (3)) fixed int static options (constant);
dcl MSEC_PER_DAY fixed bin (71) int static options (constant) init (86400000000);
dcl (cutoff_dtm, msdays) fixed bin (71);
dcl bit_count fixed bin (24);
dcl type fixed bin (2);
dcl (arg_count, arg_len, branch_count, date_type, days) fixed bin;
dcl (i, j, msf_component_count, starname_count, starname_index) fixed bin;

dcl code fixed bin (35);
dcl error_table_$action_not_performed fixed bin (35) ext;
dcl error_table_$badopt fixed bin (35) ext;
dcl error_table_$badstar fixed bin (35) ext;
dcl error_table_$incorrect_access fixed bin (35) ext;
dcl error_table_$moderr fixed bin (35) ext;
dcl error_table_$no_s_permission fixed bin (35) ext;
dcl error_table_$nomatch fixed bin (35) ext;

dcl absolute_pathname_ entry (char (*), char (*), fixed bin (35));
dcl check_star_name_$entry entry (char (*), fixed bin (35));
dcl (com_err_, com_err_$suppress_name) entry options (variable);
dcl command_query_$yes_no entry options (variable);
dcl convert_date_to_binary_ entry (char (*), fixed bin (71), fixed bin (35));
dcl cu_$arg_count entry (fixed bin, fixed bin (35));
dcl cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl cv_dec_check_ entry (char (*), fixed bin (35)) returns (fixed bin);
dcl delete_$path entry (char (*), char (*), bit (6), char (*), fixed bin (35));
dcl get_system_free_area_ entry returns (ptr);
dcl get_wdir_ entry returns (char (168));
dcl hcs_$get_dates entry (char (*), char (*), (5) bit (36), fixed bin (35));
dcl hcs_$get_safety_sw entry (char (*), char (*), bit (1), fixed bin (35));
dcl hcs_$star_list_ entry (char (*), char (*), fixed bin (2), ptr, fixed bin, fixed bin,
	ptr, ptr, fixed bin (35));
dcl hcs_$status_long entry (char (*), char (*), fixed bin (1), ptr, ptr, fixed bin (35));
dcl hcs_$status_minf entry (char (*), char (*), fixed bin (1), fixed bin (2), fixed bin (24), fixed bin (35));
dcl (ioa_, ioa_$rsnnl) entry options (variable);
dcl pathname_ entry (char (*), char (*)) returns (char (168));

dcl (addr, bit, clock, fixed, index, max, null, substr, unspec) builtin;

dcl cleanup condition;
%page;
	call cu_$arg_count (arg_count, code);
	if code ^= 0 then do;
	     call com_err_ (code, ME);
	     return;
	end;

	entries_ptr, msf_entries_ptr, msf_names_ptr, names_ptr, query_ptr, starnames_ptr = null;

	if arg_count = 0 then do;
USAGE:	     call com_err_$suppress_name (0, ME, "Usage:  date_deleter dir_path cutoff {starnames} {-control_args}");
	     go to RETURN;
	end;

	area_ptr = get_system_free_area_ ();
	on cleanup call clean_up;
	allocate starnames in (area) set (starnames_ptr);
	starname_count = 0;

	unspec (select) = "0"b;
	unspec (option_switches) = "0"b;
	date_type = DTCM_TYPE;			/* default is date_time_contents_modified */
	got_cutoff_sw, got_dirname_sw = "0"b;

	do i = 1 to arg_count;

	     call cu_$arg_ptr (i, arg_ptr, arg_len, code);

	     if index (arg, "-") = 1 then
		if arg = "-working_directory" | arg = "-working_dir" | arg = "-wd" then do;
		     got_dirname_sw = "1"b;
		     dn = get_wdir_ ();
		end;

		else if arg = "-date_time_contents_modified" | arg = "-dtcm" then date_type = DTCM_TYPE;
		else if arg = "-date_time_dumped" | arg = "-dtd" then date_type = DTD_TYPE;
		else if arg = "-date_time_entry_modified" | arg = "-dtem" then date_type = DTEM_TYPE;
		else if arg = "-date_time_used" | arg = "-dtu" then date_type = DTU_TYPE;

		else if arg = "-all" | arg = "-a" then select.directory, select.msf, select.segment = "1"b;
		else if arg = "-directory" | arg = "-dr" then select.directory = "1"b;
		else if arg = "-file" | arg = "-f" then select.msf, select.segment = "1"b;
		else if arg = "-multisegment_file" | arg = "-msf" then select.msf = "1"b;
		else if arg = "-segment" | arg = "-sm" then select.segment = "1"b;

		else if arg = "-absolute_pathname" | arg = "-absp" then absp_sw = "1"b;
		else if arg = "-brief" | arg = "-bf" then long_sw = "0"b;
		else if arg = "-entryname" | arg = "-etnm" then absp_sw = "0"b;
		else if arg = "-long" | arg = "-lg" then long_sw = "1"b;
		else if arg = "-query_all" | arg = "-qya" then query_all_sw = "1"b;
		else if arg = "-query_each" | arg = "-qye" then query_each_sw = "1"b;
		else do;
		     call convert_date_to_binary_ (arg, cutoff_dtm, code);
		     if code = 0 then do;
			got_cutoff_sw = "1"b;
		     end;
		     else do;
		          call com_err_ (error_table_$badopt, ME, "^a", arg);
		          go to RETURN;
		     end;
		end;

	     else if ^got_dirname_sw then do;

		got_dirname_sw = "1"b;

		call absolute_pathname_ (arg, dn, code);
		if code ^= 0 then do;
		     call com_err_ (code, ME, "^a", arg);
		     go to RETURN;
		end;
	     end;

	     else if ^got_cutoff_sw then do;

		got_cutoff_sw = "1"b;

		days = cv_dec_check_ (arg, code);
		if code = 0 then do;
		     msdays = days * MSEC_PER_DAY;
		     cutoff_dtm = clock () - msdays;
		end;
		else do;
		     call convert_date_to_binary_ (arg, cutoff_dtm, code);
		     if code ^= 0 then do;
			call com_err_ (code, ME, "^a", arg);
			go to RETURN;
		     end;
		end;
	     end;

	     else do;				/* starname */
		call check_star_name_$entry (arg, code);
		if code = error_table_$badstar then do;
		     call com_err_ (code, ME, "^a", arg);
		     go to RETURN;
		end;
		starname_count = starname_count + 1;
		starname (starname_count) = arg;
		star_code (starname_count) = code;
	     end;
	end;

	if unspec (select) = "0"b then select.msf, select.segment = "1"b;

	if ^got_dirname_sw | ^got_cutoff_sw then go to USAGE;

	if query_all_sw then do;
	     query_bound = 20;			/* will be grown if necessary */
	     allocate query_array in (area) set (query_ptr);
	     query_count = 0;
	end;

	delete_directory_sw, delete_force_sw, delete_segment_sw = "1"b;  /* switches for delete_$path */
	delete_chase_sw, delete_link_sw, delete_question_sw = "0"b;

	if starname_count = 0 then call delete_starname ("**", STAR_STAR);  /* no starnames specified */

	else do starname_index = 1 to starname_count;

	     call delete_starname (starname (starname_index), star_code (starname_index));
	end;

	if query_all_sw & query_count > 0 then do;

	     if select.directory then
		if (select.msf | select.segment) then what = "Entries";
		else what = "Directories";
	     else if select.msf then
		if select.segment then what = "Files";
		else what = "multisegment files";
	     else what = "Segments";

	     same_dir_sw = "1"b;
	     do i = 2 to query_count;
		if query_dn (i) ^= query_dn (1) then same_dir_sw = "0"b;
	     end;
	     same_type_sw = "1"b;
	     do i = 2 to query_count;
		if query_type_name (i) ^= query_type_name (1) then same_type_sw = "0"b;
	     end;
	     if ^same_type_sw then what = "Entries";
	     call ioa_ ("^a to be deleted^[ in ^a^]:", what, same_dir_sw, query_dn (1));
	     do i = 1 to query_count;
		call ioa_ ("^3x^[^s^;(^a)  ^]^[^a^s^;^s^a^]",
		     same_type_sw, query_type_name (i),
		     same_dir_sw, query_en (i), pathname_ (query_dn (i), query_en (i)));
	     end;

	     call command_query_$yes_no (yes_sw, 0, ME, "", "Delete?");

	     if yes_sw then do i = 1 to query_count;
		call delete_$path (query_dn (i), query_en (i), delete_switches, ME, code);
		if code ^= 0 & code ^= error_table_$action_not_performed then
		     call com_err_ (code, ME, "^a", pathname_ (query_dn (i), query_en (i)));
		else if long_sw then
		     if absp_sw then call ioa_ ("Deleted ^a", pathname_ (query_dn (i), query_en (i)));
		     else call ioa_ ("Deleted ^a", query_en (i));
	     end;
	end;

RETURN:	call clean_up;

	return;
%page;
clean_up: proc;

	if entries_ptr ^= null then free entries_ptr -> entries in (area);
	if msf_entries_ptr ^= null then free msf_entries_ptr -> entries in (area);
	if msf_names_ptr ^= null then free msf_names_ptr -> names in (area);
	if names_ptr ^= null then free names_ptr -> names in (area);
	if query_ptr ^= null then free query_array in (area);
	if starnames_ptr ^= null then free starnames_ptr -> starnames in (area);

end clean_up;
%page;
delete_starname: proc (P_name, P_star_code);

dcl P_name char (*);
dcl P_star_code fixed bin;

	if P_star_code = NO_STARS then do;

	     name = P_name;
	     call get_dates (dn, name, code);
	     if code ^= 0 then do;
		if code ^= error_table_$action_not_performed then
		     call com_err_ (code, ME, "^a^[>^]^a", dn, dn ^= ">", name);
	     end;

	     else call delete_if;
	end;
	else do;					/* starname */

	     call hcs_$star_list_ (dn, P_name, 2 /* branches */, area_ptr, branch_count, 0,
		entries_ptr, names_ptr, code);

	     if code ^= 0 then do;
		if code ^= error_table_$nomatch then
		     call com_err_ (code, ME, "^a^[>^]^a", dn, dn ^= ">", P_name);
	     end;
	     else do i = 1 to branch_count;

		bs_ptr = addr (entries_ptr -> entries (i));
		name = names_ptr -> names (fixed (bs_ptr -> bs.names_rel_pointer, 17));

		if date_type = DTEM_TYPE | date_type = DTD_TYPE | bs_ptr -> bs.type = directory_type then do;
		     call get_dates (dn, name, code);
		     if code ^= 0 then go to SKIP_MATCH;
		end;
		else do;
		     branch_status.type = bs_ptr -> bs.type;
		     branch_status.date_time_modified = bs_ptr -> bs.date_time_modified;
		     branch_status.date_time_used = bs_ptr -> bs.date_time_used;
		end;
		branch_status.number_names = bs_ptr -> bs.number_names;
		branch_status.names_rel_pointer = bs_ptr -> bs.names_rel_pointer;

		call delete_if;
SKIP_MATCH:    end;

	     if entries_ptr ^= null then do;
		free entries_ptr -> entries in (area);
		entries_ptr = null;
	     end;
	     if names_ptr ^= null then do;
		free names_ptr -> names in (area);
		names_ptr = null;
	     end;
	end;
%page;
delete_if: proc;

/* Applies the test to dn>name and deletes if too old */
/* For MSF's, it deletes if all components are too old. */

dcl type_name char (32);
dcl date36 bit (36) aligned;
dcl (safety_sw, saved_delete_force_sw, saved_force_sw_sw, yes_sw) bit (1);

	if branch_status.type = link_type then return;	/* never delete links */
	else if branch_status.type = segment_type then do;
	     if ^select.segment then return;
	     type_name = "segment";
	end;
	else if branch_status.type = directory_type then
	     if branch_status.bit_count ^= "0"b then do;
		if ^select.msf then return;
		type_name = "multisegment file";
	     end;
	     else do;
		if ^select.directory then return;
		type_name = "directory";
	     end;

	if date_type = DTCM_TYPE then date36 = branch_status.date_time_modified;
	else if date_type = DTEM_TYPE then date36 = branch_status.date_time_entry_modified;
	else if date_type = DTD_TYPE then date36 = branch_status.date_time_dumped;
	else if date_type = DTU_TYPE then date36 = branch_status.date_time_used;

	dtm72 = "0"b;
	substr (dtm72, 21, 36) = date36;

	if branch_status.type ^= directory_type then do;

	     if fixed (dtm72, 71) < cutoff_dtm then do;

DELETE:		if query_all_sw then do;
		     query_count = query_count + 1;
		     if query_count > query_bound then call grow_query_array;
		     query_dn (query_count) = dn;
		     query_en (query_count) = name;
		     query_type_name (query_count) = type_name;

		     return;
		end;

		saved_force_sw_sw = "0"b;
		if query_each_sw then do;
		     call hcs_$get_safety_sw (dn, name, safety_sw, 0);
		     if P_star_code ^= NO_STARS then
			call hcs_$status_long (dn, name, 0, addr (branch_status), null, 0);

		     call command_query_$yes_no (yes_sw, 0, ME, "",
			"Delete ^a ^[^a^s^;^s^a^] ?^[ (safety switch is on)^]^[ (copy switch is on)^]",
			type_name, absp_sw, pathname_ (dn, name), name, safety_sw, branch_status.copy_switch);

		     if ^yes_sw then return;

		     if safety_sw | branch_status.copy_switch then do;
			saved_delete_force_sw = delete_force_sw;
			saved_force_sw_sw = "1"b;
			delete_force_sw = "1"b;
		     end;
		end;

		call delete_$path (dn, name, delete_switches, ME, code);

		if saved_force_sw_sw then delete_force_sw = saved_delete_force_sw;

		if code ^= 0 then do;
		     call com_err_ (code, ME, "^a^[>^]^a", dn, dn ^= ">", name);
		     if code = error_table_$incorrect_access then go to RETURN;
		end;
		else if long_sw & ^query_each_sw then
		     call ioa_ ("Deleted ^a ^[^a^s^;^s^a^]", type_name, absp_sw, pathname_ (dn, name), name);
	     end;
	end;

	else do;					/* directory; might be an MSF */

	     call hcs_$status_minf (dn, name, 0, type, bit_count, code);
	     if code = error_table_$incorrect_access then go to RETURN;
	     else if code = 0 & type = DIR_TYPE & bit_count ^= 0 then do;  /* an MSF */

		if days = 0 then go to DELETE;

		msf_entries_ptr, msf_names_ptr = null;

		call ioa_$rsnnl ("^a^[>^]^a", msf_dn, 168, dn, dn ^= ">", name);

		call hcs_$star_list_ (msf_dn, "**", 3 /* All */, area_ptr, msf_component_count, 0,
		     msf_entries_ptr, msf_names_ptr, code);

		if code ^= 0 then
		     if code ^= error_table_$nomatch & code ^= error_table_$moderr &
		       code ^= error_table_$no_s_permission then do;
			call com_err_ (code, ME, "^a>**", msf_dn);
			return;
		     end;
		     else go to SKIP_MSF;		/* don't delete if error or no components */

		do j = 1 to msf_component_count;

		     component_info_ptr = addr (msf_entries_ptr -> entries (j));

		     if date_type = DTEM_TYPE | date_type = DTD_TYPE then do;
			call get_dates (msf_dn,
			     (msf_names_ptr -> names (fixed (component_info_ptr -> bs.names_rel_pointer, 17))),
			     code);
			if code ^= 0 | branch_status.type ^= segment_type then go to SKIP_MSF;
			if date_type = DTEM_TYPE then date36 = branch_status.date_time_entry_modified;
			else date36 = branch_status.date_time_dumped;
		     end;
		     else if date_type = DTCM_TYPE then date36 = component_info_ptr -> bs.date_time_modified;
		     else date36 = component_info_ptr -> bs.date_time_used;

		     dtm72 = "0"b;
		     substr (dtm72, 21, 36) = date36;
		     if fixed (dtm72, 71) >= cutoff_dtm then go to SKIP_MSF;
		end;

		call msf_cleanup;
		go to DELETE;
SKIP_MSF:
		call msf_cleanup;
	     end;

	     else					/* a directory */
		if fixed (dtm72, 71) < cutoff_dtm then go to DELETE;
	end;

msf_cleanup: proc;

	if msf_entries_ptr ^= null then do;
	     free msf_entries_ptr -> entries in (area);
	     msf_entries_ptr = null;
	end;
	if msf_names_ptr ^= null then do;
	     free msf_names_ptr -> names in (area);
	     msf_names_ptr = null;
	end;

end msf_cleanup;

end delete_if;

end delete_starname;
%page;
get_dates: proc (P_dn, P_en, P_code);

/* Fills in branch_status and, if -dtd, factors date-time-volume-dumped into branch_status.date_time_dumped */

dcl (P_dn, P_en) char (*);
dcl P_code fixed bin (35);
dcl dates_array (5) bit (36);

	call hcs_$status_long (P_dn, P_en, 0, addr (branch_status), null, P_code);
	if P_code ^= 0 then return;

	if date_type = DTD_TYPE then do;
	     call hcs_$get_dates (P_dn, P_en, dates_array, P_code);
	     if P_code ^= 0 then return;

	     branch_status.date_time_dumped =
		bit (max (fixed (branch_status.date_time_dumped, 36), fixed (dates_array (5), 36)), 36);

	     if branch_status.date_time_dumped = "0"b then P_code = error_table_$action_not_performed;
						/* don't delete if -dtd and entry never dumped */
	end;

end get_dates;
%page;
grow_query_array: proc;

/* Doubles the size of query_array */

dcl old_query_ptr ptr;
dcl (new_query_bound, old_query_bound) fixed bin;

	old_query_ptr = query_ptr;
	old_query_bound = query_bound;
	query_bound, new_query_bound = query_bound * 2;

	allocate query_array in (area) set (query_ptr);

	query_bound = old_query_bound;
	unspec (query_ptr -> query_array) = unspec (old_query_ptr -> query_array);

	free old_query_ptr -> query_array in (area);

	query_bound = new_query_bound;

end grow_query_array;

end date_deleter;
