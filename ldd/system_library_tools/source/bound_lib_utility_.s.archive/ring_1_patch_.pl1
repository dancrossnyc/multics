/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */



/* Modified 1/29/75 by Larry Johnson to fix ring number in to_ptr */

ring_1_patch_: proc;

/* External Procedures */

dcl	cu_$level_get entry returns (fixed bin),
	cu_$level_set entry (fixed bin),
	hcs_$fs_get_mode entry (ptr, fixed bin (5), fixed bin (35)),
	hcs_$initiate entry(char(*) aligned, char(*) aligned, char(*) aligned, fixed bin, fixed bin, ptr, fixed bin(35)),
	hcs_$get_max_length_seg entry (ptr, fixed bin (18), fixed bin (35)),
	hcs_$terminate_noname entry (ptr, fixed bin (35));

/* External Variables */

dcl	error_table_$argerr ext fixed bin (35),
	error_table_$moderr ext fixed bin (35);

/* Builtin Functions */

dcl	(bit, addr, fixed, null, rel, ptr) builtin;

/* Text References */

dcl	segno fixed bin int static init (0),
	path fixed bin int static init (1);

/* Automatic Variables */

dcl	a_dir char (*),				/* arguments */
	a_ename char (*),
	a_offset fixed bin,
	a_fp ptr,
	a_n fixed bin,
	a_code fixed bin (35),
	a_tp ptr;

dcl	segptr ptr,
	to_ptr ptr,
	from_ptr ptr;

dcl	entry_point fixed bin,
	offset fixed bin,
	n fixed bin,
	save_ring fixed bin;

dcl	max_length fixed bin (18);			/* max size of this segment */

dcl	mode fixed bin (5);

dcl	code fixed bin (35);

dcl	dir char (168) aligned,
	ename char (32) aligned;

/* Based Storage */

dcl	move (n) bit (36) aligned based;

%include its;

/*

*/
pathname: entry (a_dir, a_ename, a_offset, a_fp, a_n, a_code);

	entry_point = path;				/* indicate through which entry point we came */
	dir = a_dir;				/* copy dir name */
	ename = a_ename;				/* copy entry name */
	offset = a_offset;				/* copy offset */

	go to common;

ptr:	entry (a_fp, a_tp, a_n, a_code);

	entry_point = segno;			/* indicate through which entry point we came */
	to_ptr = a_tp;				/* copy pointer to location to be patched */
	addr (to_ptr) -> its.ringno = "001"b;

common:						/* copy arguments common to both entry points */
	from_ptr = a_fp;				/* copy pointer to new data */
	n = a_n;					/* copy number of words to be patched */
	code = 0;					/* clear status code */

	save_ring = cu_$level_get ();			/* save validation level */
	call cu_$level_set (1);			/* set validation level to 1 */

	if entry_point = path then do;		/* if we entered through the pathname entry point */
	     call hcs_$initiate (dir, ename, "", 0, 0, segptr, code);
	     if segptr = null then go to finish;	/* get a pointer to the segment */
	     to_ptr = ptr (segptr, offset);		/* get location to be patched */
	end;

	else segptr = ptr (to_ptr, 0);

	if n <= 0 then go to arg_err;			/* check number of words to be changed */

						/* check exceeding max length of segment */
	call hcs_$get_max_length_seg(from_ptr, max_length, code);
	if code ^= 0 then go to term;

	if fixed(rel(from_ptr), 18) + n > max_length then go to arg_err;

	call hcs_$get_max_length_seg(to_ptr, max_length, code);
	if code ^= 0 then go to term;

	if fixed(rel(to_ptr), 18) + n > max_length then go to arg_err;

	call hcs_$fs_get_mode (segptr, mode, code);	/* check mode */
	if code ^= 0 then go to term;
	if (bit (mode, 5) & "00010"b) = "0"b		/* need write permission */
	then go to access_error;

	to_ptr -> move = from_ptr -> move;		/* make the patch */

term:	if entry_point = path then			/* terminate the segment if we initiated it */
	call hcs_$terminate_noname (segptr, code);

finish:	call cu_$level_set (save_ring);		/* restore the validation level we entered with */
	a_code = code;				/* copy the status code */
	return;

arg_err:	code = error_table_$argerr;
	go to term;

access_error:
	code = error_table_$moderr;
	go to term;

     end ring_1_patch_;
