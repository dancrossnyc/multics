/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


get_archive_file_:	procedure (dir_name, seg_name, ac_file, rtn_code);

     dcl	dir_name			char(*),		/* directory name for archives */
	seg_name			char(*), 		/* source segment name */
	ac_file			char(2),		/* first name component of archive */
	rtn_code			fixed bin(17);	/* error code */
dcl	substr	builtin;
dcl	fd_file		char(32);
dcl	gls_switch	bit(1);	/*switch to pick entry*/


/*

	     get_archive_file_:  Procedure to locate a segment in
	     a series of archives (a1...a9, b1...b9, etc.).  The
	     first character of the archive name must match the
	     first character of the name of the desired segment.

	     Possible return codes are:

		0 - Segment found, ac_file is containing archive
		1 - Segment not found, ac_file is shortest archive
		2 - Format error in archive file (ac_file)
	      other - A standard file system error code

	     P. R. Bos, April 1971

	14 apr 72

		entry point "srchgls" added by steve tepper.  returns entire archive segment name
		instead of just first name component.

*/


     dcl	archive_util_$first_element	ext entry (ptr, fixed bin(17)),
	archive_util_$search	ext entry (ptr, ptr, char (*) aligned, fixed bin),
	cv_bin_$dec		ext entry (fixed bin(17), char(12) aligned),
     hcs_$initiate_count entry (char (*) aligned, char (*) aligned, char (*) aligned, fixed bin (24), fixed bin (2),
     ptr, fixed bin),
	hcs_$terminate_noname	ext entry (ptr, fixed bin(17));

     dcl (error_table_$noentry,
	error_table_$segknown)	ext fixed bin(17);

     dcl (p, q, s)			ptr;

     dcl (cd, code, i)		fixed bin(17),
         (bc, shortest_bc)		fixed bin(24);

     dcl (ac_name			char(32),
	chr			char(1),
	dir			char(168),
	seg			char(32),
	shortest_ac_file		char(2),
	string			char(12)) aligned;


	gls_switch="0"b;	/* we are not called by gls*/
	go to crud;


srchgls:	entry(dir_name,seg_name,fd_file,rtn_code);   /*entry from gls*/

	gls_switch="1"b; 	/*we _a_r_e called by gls*/

crud:	;
/**/
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


	dir = dir_name;				/* align directory name */
	seg = seg_name;				/* align segment name */
	chr = substr(seg, 1, 1);			/* first char of segment name */
	shortest_ac_file = chr || "1";		/* initialize */
	shortest_bc = 1000000;

	do i = 1 to 9;				/* search in order: x1 x2 x3 ... */
	     call cv_bin_$dec(i, string);		/* convert to char. */
	     ac_file = chr || substr(string, 12, 1);	/* form archive name component */
	     ac_name = ac_file || ".archive";		/* archive file name */
	     call hcs_$initiate_count(dir, ac_name, "", bc, 1, s, code);     /* get bit count and ptr */
	     p = s;				/* copy it: archive_util clobbers ptr */
	     if code ^= 0 then if code ^= error_table_$segknown then do;
		if code = error_table_$noentry then do;	/* segment not found */
		     if shortest_bc < 450000 then	/* .. about 12 pages */
			ac_file = shortest_ac_file;	/* return name of shortest file */
		     rtn_code = 1;			/* indicate segment not found in archives */
		     go to return;
		     end;
		else				/* unexpected error (no dir, etc.) */
		     go to ac_err;			/* abort */
		end;
	     call archive_util_$first_element(p, code);	/* check file */
	     if code ^= 0 then			/* empty archive or error condition */
		go to ck_code;
	     call archive_util_$search(p, q, seg, code);	/* search archive for source segment */
ck_code:	     call hcs_$terminate_noname(s, cd);	/* terminate segment */
	     if code = 0 then do;			/* segment found */
		rtn_code = 0;			/* set return code */
		go to return;
		end;
	     else if code = 1 then			/* code 1, segment not found in archive */
		if bc < shortest_bc then do;		/* remember name and bit count */
		     shortest_bc = bc;		/* .. of shortest archive */
		     shortest_ac_file = ac_file;
		end;
		else;				/* null clause */
	     else do;				/* code > 1, error condition */
ac_err:		rtn_code = code;			/* reflect code to caller */
		go to return;
		end;
	     end;
	ac_file = shortest_ac_file;		/* all 9 archives used, return shortest */
	rtn_code = 1;				/* indicate segment not found */
	go to return;



/*	return code fudger*/
return:	if gls_switch="0"b then return;
	else do;
		fd_file=ac_name;
		return;
		end;


	end get_archive_file_;
