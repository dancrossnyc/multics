/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(86-05-13,GJohnson), approve(86-05-13,MCR7387),
     audit(86-05-13,Martinson), install(86-05-14,MR12.0-1055):
     Correct error message documentation.
                                                   END HISTORY COMMENTS */


/* AS_X25_MPX_ - Anserwing service piece of x25 multiplexer */

/* Written October 1978 by Larry Johnson (as as_user1_mpx_) */
/* Converted to as_vip7760_mpx_ 1/5/78 by J. Stern */
/* Modified 7/31/79 by B.Westcott to support x25 instead */
/* Modified November 1979 by C. Hornig for installation */
/* Modified May 1982 by D. W. Cousins for direct interface to x25_tables in the fnp */
/* Modified August 1982 by Robert Coren for additional argument to multiplexer_mgr_$mpx_crashed. */
/* Modified July 1983 by Robert Coren to support "packet_threshold" parameter */
/* Modified August 1983 by Jeff Schiller to implement the "reverse charging" facility. */
/* Modified 1984-08-28 BIM for better error messages/tracing */
/* Modified October 1984 by R.J.C. Kissel to set the error code for bad parameters, */
/*     and to do some better error checking on parameters, and to not allow packet sizes */
/*     of less than 55 (x25 error list #7). */
/* Modified October 1984 by R.J.C. Kissel to support the "breakall_idle_timer" parameter. */

/* format: style4,delnl,insnl,^ifthendo */
as_x25_mpx_:
     procedure;

/* Parameters */

dcl  arg_mpx_chan char (*);				/* Name of the multiplexed channel */
dcl  arg_cdtp ptr;					/* Address of the cdt */
dcl  arg_cdtep ptr;
dcl  arg_chan_listp ptr;				/* Pointer to a structure of channels to init  */
dcl  arg_check_sw bit (1) aligned;			/* Says whether or not to check configuration */
dcl  arg_event_infop ptr;
dcl  arg_code fixed bin (35);
dcl  arg_error_proc entry variable;

/* Automatic */

dcl  code fixed bin (35);
dcl  add_info varying char (512);
dcl  parm char (32);
dcl  msg char (64);
dcl  mpx_chan char (32);
dcl  chan_listp ptr;
dcl  1 boot_info aligned like x25_load_info;
dcl  error_proc entry (fixed bin, fixed bin, char (*), char (*), char (*), char (*)) variable;

/* Constants */

dcl  name char (15) int static options (constant) init ("as_x25_mpx_");

/* External */

dcl  hphcs_$tty_control entry (char (*), char (*), ptr, fixed bin (35));
dcl  ioa_$rsnnl entry () options (variable);
dcl  ipc_$delete_ev_chn entry (fixed bin (71), fixed bin (35));
dcl  ipc_$create_ev_chn entry (fixed bin (71), fixed bin (35));
dcl  ipc_$decl_ev_call_chn entry (fixed bin (71), entry, ptr, fixed bin, fixed bin (35));
dcl  cv_dec_check_ entry (char (*), fixed bin (35)) returns (fixed bin (35));
dcl  cv_float_ entry (char (*), fixed bin (35)) returns (float bin);
dcl  sys_log_ entry options (variable);
dcl  sys_log_$error_log entry options (variable);
dcl  get_process_id_ entry returns (bit (36) aligned);
dcl  multiplexer_mgr_$mpx_load_failed entry (char (*), fixed bin (35));
dcl  multiplexer_mgr_$mpx_loaded entry (char (*), fixed bin (35));
dcl  multiplexer_mgr_$mpx_crashed entry (char (*), bit (1) aligned, fixed bin (35));
dcl  ttt_info_$additional_info entry (char (*), char (*) var, fixed bin (35));

dcl  error_table_$action_not_performed ext fixed bin (35);
dcl  error_table_$bad_conversion fixed bin (35) ext static;

dcl  (addr, before, length, low, substr, unspec, index) builtin;

/* Based */

dcl  1 chan_list aligned based (chan_listp),		/* List of cdte entries of channels to boot */
       2 count fixed bin,
       2 cdte_ptr (0 refer (chan_list.count)) ptr unal;
%page;
/* Entry to load a multiplexer */

x25_load:
     entry (arg_mpx_chan, arg_cdtp, arg_cdtep, arg_chan_listp, arg_check_sw, arg_code);

	mpx_chan = arg_mpx_chan;
	cdtp = arg_cdtp;
	cdtep = arg_cdtep;
	chan_listp = arg_chan_listp;
	mpxep = addr (cdte.initial_command);

	arg_code = 0;				/* Start clean. */

	if cdte.event ^= 0
	then call ipc_$delete_ev_chn (cdte.event, code);
	call ipc_$create_ev_chn (cdte.event, code);
	if code ^= 0
	then do;
ev_chan_err:
	     call sys_log_$error_log (1, code, name, "Creating event channel for multiplexer ^a", mpx_chan);
	     arg_code = error_table_$action_not_performed;
	     return;
	end;
	call ipc_$decl_ev_call_chn (cdte.event, x25_wakeup_handler, cdtep, (20), code);
	if code ^= 0
	then go to ev_chan_err;

	boot_info.version = X25_LOAD_INFO_VERSION_1;
	boot_info.ev_chan = cdte.event;
	boot_info.pid = get_process_id_ ();
	boot_info.max_packet_size = 128;
	boot_info.window_size = 2;
	boot_info.breakall_idle_timer = 2;		/* Default is 1/10 sec. */
	boot_info.net_type = "";
	boot_info.my_address = "";
	string (boot_info.flags) = ""b;
	string (boot_info.frame_level_data.flags) = ""b;
	boot_info.frame_size = 1064;
	boot_info.k = 7;
	boot_info.n2 = 20;
	boot_info.t1 = 3;
	boot_info.t3 = 3;

	add_info = "";
	if (cdte.initial_terminal_type ^= low (length (cdte.initial_terminal_type)))
	     & (cdte.initial_terminal_type ^= "")
	then do;
	     call ttt_info_$additional_info (cdte.initial_terminal_type, add_info, code);
	     if code ^= 0
	     then do;
		call sys_log_$error_log (1, code, name,
		     "Cannot get additional info for terminal type ^a for multiplexer ^a.",
		     cdte.initial_terminal_type, mpx_chan);
		add_info = "";
	     end;
	end;

	if get_parm ("n_lc=", parm)
	then do;
	     boot_info.n_lc = cv_dec_check_ (parm, code);
	     if (code ^= 0) | (boot_info.n_lc < 1)
	     then call bad_conv ("n_lc");
	end;
	else do;
	     call sys_log_$error_log (1, 0, name, "^a: n_lc must be specified", mpx_chan);
	     arg_code = error_table_$action_not_performed;
	     return;
	end;

	if get_parm ("window_size=", parm)
	then do;
	     boot_info.window_size = cv_dec_check_ (parm, code);
	     if code ^= 0
	     then call bad_conv ("window_size");

	     if boot_info.window_size < 1 | boot_info.window_size > 7
	     then call bad_range ("window_size", "1", "7", parm);
	end;

	if get_parm ("packet_size=", parm)
	then do;
	     boot_info.max_packet_size = cv_dec_check_ (parm, code);
	     if code ^= 0
	     then call bad_conv ("packet_size");

	     if boot_info.max_packet_size < bsizec | boot_info.max_packet_size > 1024
	     then call bad_range ("packet_size", "60", "1024", parm);
						/* bsizec = #chars in smallest tty buffer (= 60). */
	end;

	if get_parm ("network=", parm)
	then boot_info.net_type = substr (parm, 1, maxlength (boot_info.net_type));

	if get_parm ("address=", parm)
	then boot_info.my_address = rtrim (ltrim (parm));

	if get_parm ("type=", parm)
	then do;					/* DCE or DTE options */
	     if parm = "DCE"
	     then boot_info.flags.dce = "1"b;
	     else if parm = "DTE"
	     then boot_info.flags.dce = "0"b;
	     else call bad_choice ("type", "DCE", "DTE", parm);
	end;

	if get_parm ("link_protocol=", parm)
	then do;					/* LAP or LAPB options */
	     if parm = "LAP"
	     then boot_info.flags.abm = "0"b;
	     else if parm = "LAPB"
	     then boot_info.flags.abm = "1"b;
	     else call bad_choice ("link_protocol", "LAP", "LAPB", parm);
	end;

	if get_parm ("frame_size=", parm)
	then do;					/* Make sure this code stays after the packet_size code. */
	     boot_info.frame_size = cv_dec_check_ (parm, code);
	     if code ^= 0
	     then call bad_conv ("frame_size");

	     if (boot_info.frame_size < 8) | (boot_info.frame_size > 8232) | (mod (boot_info.frame_size, 8) ^= 0)
		| ((boot_info.frame_size - 40) < (8 * boot_info.max_packet_size))
	     then call bad_range ("frame_size", "(8 * packet_size + 40)", "8232", parm);
	end;

	if get_parm ("K=", parm)
	then do;
	     boot_info.k = cv_dec_check_ (parm, code);
	     if code ^= 0
	     then call bad_conv ("K");
	     if (boot_info.k < 1) | (boot_info.k > 7)
	     then call bad_range ("K", "1", "7", parm);
	end;

	if get_parm ("T1=", parm)
	then do;
	     boot_info.t1 = cv_float_ (parm, code);
	     if code ^= 0
	     then call bad_conv ("T1");
	     if (boot_info.t1 < .1e0) | (boot_info.t1 > 50e0)
	     then call bad_range ("T1", ".1e0", "50e0", parm);
	end;

	if get_parm ("T3=", parm)
	then do;
	     boot_info.t3 = cv_float_ (parm, code);
	     if code ^= 0
	     then call bad_conv ("T3");
	     if (boot_info.t3 < .1e0) | (boot_info.t3 > 50e0)
	     then call bad_range ("T3", ".1e0", "50e0", parm);
	end;

	if get_parm ("N2=", parm)
	then do;
	     boot_info.n2 = cv_dec_check_ (parm, code);
	     if code ^= 0
	     then call bad_conv ("N2");
	     if (boot_info.n2 < 1) | (boot_info.n2 > 511)
	     then call bad_range ("N2", "1", "511", parm);
	end;

	if get_parm ("disc_first=", parm)
	then do;					/* disc_first yes or no */
	     if parm = "yes"
	     then boot_info.flags.disc_first = "1"b;
	     else if parm = "no"
	     then boot_info.flags.disc_first = "0"b;
	     else call bad_choice ("disc_first", "yes", "no", parm);
	end;

	if get_parm ("bypass_restart=", parm)
	then do;					/* bypass_restart yes or no */
	     if parm = "yes"
	     then boot_info.flags.bypass_restart = "1"b;
	     else if parm = "no"
	     then boot_info.flags.bypass_restart = "0"b;
	     else call bad_choice ("bypass_restart", "yes", "no", parm);
	end;

	if get_parm ("d_bit=", parm)
	then do;					/* d_bit yes or no */
	     if parm = "yes"
	     then boot_info.flags.no_d = "0"b;
	     else if parm = "no"
	     then boot_info.flags.no_d = "1"b;
	     else call bad_choice ("d_bit", "yes", "no", parm);
	end;

	if get_parm ("trace_off=", parm)
	then do;					/* trace_off yes or no */
	     if parm = "yes"
	     then boot_info.flags.trace_off = "1"b;
	     else if parm = "no"
	     then boot_info.flags.trace_off = "0"b;
	     else call bad_choice ("trace_off", "yes", "no", parm);
	end;

	if get_parm ("packet_threshold=", parm)
	then do;
	     boot_info.long_packet_size = cv_dec_check_ (parm, code);
	     if code ^= 0
	     then call bad_conv ("packet_threshold");
	     if boot_info.long_packet_size < 2
	     then call bad_range ("packet_threshold", "2", "Infinity", parm);
	end;

	else boot_info.long_packet_size = boot_info.max_packet_size + 1;

	if get_parm ("collect=", parm)
	then do;					/* Whether outgoing calls are made collect */
	     if parm = "yes"
	     then boot_info.flags.out_calls_collect = "1"b;
	     else if parm = "no"
	     then boot_info.flags.out_calls_collect = "0"b;
	     else call bad_choice ("collect", "yes", "no", parm);
	end;

	if get_parm ("breakall_idle_timer=", parm)
	then do;					/* Timer is in 1/20 sec. */
	     boot_info.breakall_idle_timer = cv_dec_check_ (parm, code);
	     if code ^= 0
	     then call bad_conv ("breakall_idle_timer");
	     if boot_info.breakall_idle_timer < 1 | boot_info.breakall_idle_timer > 255
	     then call bad_range ("breakall_idle_timer", "1", "255", parm);
	end;

	call hphcs_$tty_control (mpx_chan, "load_mpx", addr (boot_info), arg_code);
return_to_caller:
	return;

bad_conv:
     procedure (String);
dcl  String char (*) parameter;

	call sys_log_$error_log (1, error_table_$bad_conversion, name,
	     "Converting ^a ^a to a number for multiplexer ^a.", String, parm, mpx_chan);
	arg_code = error_table_$bad_conversion;
	goto return_to_caller;
     end bad_conv;

get_parm:
     procedure (Parm, Value) returns (bit (1) aligned);
dcl  (Parm, Value) char (*);
dcl  i fixed bin;

	i = index (add_info, Parm);
	if i = 0
	then return ("0"b);
	else do;
	     Value = before (substr (add_info, i + length (Parm)), " ");
	     return ("1"b);
	end;
     end get_parm;

bad_choice:
     proc (type, choice1, choice2, actual_choice);
dcl  (type, choice1, choice2, actual_choice) char (*) parameter;

	call sys_log_$error_log (1, 0, name,
	     "Bad argument to parm ^a, should be ^a or ^a, but was ^a for multiplexer ^a.", type, choice1, choice2,
	     actual_choice, mpx_chan);
	arg_code = error_table_$action_not_performed;	/* Set the return code. */
	goto return_to_caller;			/* it bad enought to go back */
     end bad_choice;

bad_range:
     proc (type, lower_bound, upper_bound, actual_value);
dcl  (type, lower_bound, upper_bound, actual_value) char (*) parameter;

	call sys_log_$error_log (1, 0, name,
	     "Bad argument to parm ^a.  Must have: ^a <= value <= ^a, but value = ^a, for multiplexer ^a.", type,
	     lower_bound, upper_bound, actual_value, mpx_chan);
	arg_code = error_table_$action_not_performed;
	goto return_to_caller;
     end bad_range;
%page;
/* Wakeup handler for wakeups on the bootload event channel */

x25_wakeup_handler:
     entry (arg_event_infop);

	event_call_info_ptr = arg_event_infop;
	cdtep = event_call_info.data_ptr;
	mpxep = addr (cdte.initial_command);

	if event_call_info.ring ^= 0			/* If not ring-0 */
	then if event_call_info.sender ^= get_process_id_ ()
	     then do;				/* Trust only myself */
		call sys_log_ (1, "^a: Unexpected wakeup (^72.3b) from process ^w.", name,
		     unspec (event_call_info.message), event_call_info.sender);
		return;
	     end;

	mpx_chan = cdte.name;

	if (event_call_info.message < 1) | (event_call_info.message > 3)
	then do;
	     call sys_log_ (1, "^a: Wakeup for multiplexer ^a has invalid state code: ^d.", name, mpx_chan,
		event_call_info.message);
	     return;
	end;

	msg = "";
	call ioa_$rsnnl ("Unexpected signal ^d in state ^a", msg, (0), event_call_info.message,
	     MPXE_STATE_NAMES (mpxe.state));
	if mpxe.state = MPX_BOOT
	then if event_call_info.message ^= 1
	     then do;
		msg = "Load failed";
		call multiplexer_mgr_$mpx_load_failed (mpx_chan, code);
	     end;
	     else do;
		msg = "Load signalled";
		call multiplexer_mgr_$mpx_loaded (mpx_chan, code);
	     end;
	else if mpxe.state = MPX_UP
	then if event_call_info.message ^= 1
	     then do;
		msg = "Crash signalled";
		call multiplexer_mgr_$mpx_crashed (mpx_chan, (event_call_info.message = 2), code);
	     end;
	call sys_log_ (1, "^a: ^a for multiplexer ^a.", name, msg, mpx_chan);
	return;
%page;
/* Entry to dump a multiplexer. */

x25_dump:
     entry (arg_mpx_chan, arg_cdtp, arg_cdtep, arg_code);

	arg_code = 0;				/* nothing to do really */
	return;
%page;
/* Entry called by cv_cmf to validate X25 multiplexers */

x25_cv_cmf:
     entry (arg_cdtp, arg_cdtep, arg_mpx_chan, arg_chan_listp, arg_error_proc);

	cdtp = arg_cdtp;
	cdtep = arg_cdtep;
	mpx_chan = arg_mpx_chan;
	chan_listp = arg_chan_listp;
	error_proc = arg_error_proc;

/* Make sure this channel is not an FNP */

	if index (mpx_chan, ".") = 0			/* single component name => FNP */
	then call error_proc (1, 2, "A X.25 multiplexer cannot be configured as an FNP.  ^a", "^a", mpx_chan, "");

/* Validate subchannel names */

	if chan_list.count > 512
	then call error_proc (3, 2, "More than 512 subchannels specified for X25 multiplexer ^a.", "^a", mpx_chan, "");

	return;
%page;
%include as_mpx_state_names_;
%include x25_load_info;
%include cdt;
%include author_dcl;
%include line_types;
%include event_call_info;

/* tty_buf is only included to use the value of bsizec, the size of the smallest tty buffer. */

%include tty_buf;
%page;
/* BEGIN MESSAGE DOCUMENTATION

   Message:
   as_x25_mpx_: ERROR. Creating event channel for multiplexer MPX.

   S: as (severity1)

   T: In response to an operator load_mpx command or during system start up.

   M: An ipc_ error occurred while trying to initialize the multiplexer.

   A: $notify


   Message:
   as_x25_mpx_: ERROR. Cannot get additional info for terminal type TTP for multiplexer MPX.

   S: as (severity1)

   T: In response to an operator load_mpx command or during system start up.

   M: An error occurred while retrieving the parameters of the multiplexer
   from the TTT.
   Either the terminal type specified in the CDT does not exist or it
   does not contain the required additional_info field.

   A: Check that the CMF and TTF contain the proper information.


   Message:
   as_x25_mpx_: MPX: n_lc must be specified.

   S: as (severity1)

   T: In response to an operator load_mpx command for during system startup.

   M: The TTF entry for the X.25 multiplexer does not specify the number of logical channels.

   A: Correct the TTF and reload the multiplexer.


   Message:
   as_x25_mpx_: Error in conversion. Converting FIELD VALUE to a number for multiplexer MPX.

   S: as (severity1)

   T: In response to an operator load_mpx command or during system start up.

   M: It was impossible to convert a numeric parameter from the terminal_type
   additional_info string to its internal form.
   FIELD is the name of the parameter in error.
   VALUE is the string which could not be converted.

   A: Check the contents of the TTF entry for the terminal_type associated
   with the multiplexer for errors.


   Message:
   as_x25_mpx_: Bad argument to parm PARM.  Must have: LOW <= value <= HIGH, but value = VALUE, for multiplexer MPX.

   S: as (severity1)

   T: In response to an operator load_mpx command or during system start up.

   M: A bad value was specified for parameter PARM in the additional_info field
   of the TTF entry for the multiplexer MPX.  The value must be between LOW and
   HIGH, but VALUE was specified.

   A: Check the contents of the TTF entry for the terminal_type associated
   with the multiplexer for an improper parameter value. Correct and reload
   mpx.


   Message:
   as_x25_mpx_: Bad argument to parm PARM, should be THIS or THAT, but was VALUE for multiplexer MPX.

   S: as (severity1)

   T: In response to an operator load_mpx command or during system start up.

   M: A bad value was specified for parameter PARM in the additional_info field
   of the TTF entry for the multiplexer MPX.  The choices are THIS or THAT, but
   VALUE was specified.

   A: Check the contents of the TTF entry for the terminal_type associated
   with the multiplexer for an improper parameter value. Correct and reload
   mpx.


   Message:
   as_x25_mpx_: Unexpected wakeup (DATA) from process PRCID.

   S: as (severity1)

   T: $run

   M: The multiplexer manager received a wakeup from an unexpected source.
   The wakeup is ignored.

   A: $ignore


   Message:
   as_x25_mpx_: Wakeup for multiplexer MPX has invalid state code STATE.

   S: as (severity1)

   T: $run

   M: A wakeup with invalid data was received by the multiplexer manager.
   The wakeup is ignored.

   A: $notify


   Message:
   as_x25_mpx_: Unexpected signal NUM in state STATE.

   S: as (severity1)

   T: $run

   M: A signal, NUM, was received unexpectedly in state STATE.
   The signal is ignored.

   A: $notify


   Message:
   as_x25_mpx_: Load signalled for multiplexer MPX.

   S: as (severity1)

   T: In response to an operator load_mpx command or during system start up.

   M: The multiplexer has been successfully loaded.
   It will be started unless the -no_start control argument was given when
   the load_mpx command was typed.

   A: $ignore


   Message:
   as_x25_mpx_: Load failed for multiplexer MPX.

   S: as (severity1)

   T: In response to an operator load_mpx command or during system start up.

   M: The attempt to load the multiplexer failed.
   This should never happen.

   A: $notify


   Message:
   as_x25_mpx_: Crash signalled for multiplexer MPX.

   S: as (severity1)

   T: $run

   M: The multiplexer has crashed.
   The LAP link has entered the disconnected state.

   A: $notify


   END MESSAGE DOCUMENTATION */

     end as_x25_mpx_;
