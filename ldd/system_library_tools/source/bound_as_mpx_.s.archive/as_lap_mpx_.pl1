/****^  **************************************************************
        *                                                            *
        * Copyright, (C) Honeywell Bull Inc., 1988                   *
        *                                                            *
        * Copyright, (C) Massachusetts Institute of Technology, 1983 *
        *                                                            *
        * Copyright, (C) Honeywell Information Systems Inc., 1982    *
        *                                                            *
        * Copyright, (C) Honeywell Information Systems Inc., 1980.   *
        *                                                            *
        ************************************************************** */

/* format: style4,delnl,insnl,ifthenstmt,indnoniterend */

/* AS_LAP_MPX_ - Anserwing service piece of lap multiplexer */

/* Written October 1978 by Larry Johnson (as as_user1_mpx_) */
/* Converted to as_vip7760_mpx_ 1/5/78 by J. Stern */
/* Modified 7/31/79 by B.Westcott to support lap instead */
/* Modified November 1979 by C. Hornig for installation */
/* Modified May 1982 by D. W. Cousins for direct interface to lap_tables in the fnp */
/* Modified August 1982 by Robert Coren for additional argument to multiplexer_mgr_$mpx_crashed. */
/* Converted January, 1983 by Olin Sibert to support ARPAnet HDH interface. */

/****^  HISTORY COMMENTS:
  1) change(88-07-07,Beattie), approve(88-06-27,MCR7926),
     audit(88-07-22,Brunelle), install(88-08-08,MR12.2-1082):
     Prepared for installation.
                                                   END HISTORY COMMENTS */

as_lap_mpx_:
     procedure;
%page;
/* Entry to load a multiplexer */

lap_load:
     entry (arg_mpx_chan, arg_cdtp, arg_cdtep, arg_chan_listp, arg_check_sw, arg_code);

	mpx_chan = arg_mpx_chan;
	cdtp = arg_cdtp;
	cdtep = arg_cdtep;
	chan_listp = arg_chan_listp;
	mpxep = addr (cdte.initial_command);

	if cdte.event ^= 0 then call ipc_$delete_ev_chn (cdte.event, code);
	call ipc_$create_ev_chn (cdte.event, code);
	if code ^= 0 then do;
ev_chan_err:
	     call sys_log_$error_log (SL_LOG, code, name, "Creating event channel for multiplexer ^a", mpx_chan);
	     arg_code = error_table_$action_not_performed;
	     return;
	     end;
	call ipc_$decl_ev_call_chn (cdte.event, lap_wakeup_handler, cdtep, (20), code);
	if code ^= 0 then go to ev_chan_err;

	unspec (boot_info) = ""b;
	boot_info.version = LAP_LOAD_INFO_VERSION_1;
	boot_info.event_channel = cdte.event;
	boot_info.process_id = get_process_id_ ();

	boot_info.dce_or_dte = "0"b;			/* DTE by default */
	boot_info.lap_or_lapb = "1"b;			/* Because IMPs speak LAPB only */
	boot_info.disc_first = "0"b;			/* Have to find out what this means.... */
	boot_info.frame_size = 1088;			/* Max frame is 1088 bits in "packet mode" */
	boot_info.K = 7;				/* Values from the HDH spec in BBN 1822 */
	boot_info.N2 = 20;
	boot_info.T1 = 300;				/* Value is in tenths of seconds */
	boot_info.T3 = 200;

	add_info = "";
	if (cdte.initial_terminal_type ^= low (length (cdte.initial_terminal_type)))
	     & (cdte.initial_terminal_type ^= "") then do;
	     call ttt_info_$additional_info (cdte.initial_terminal_type, add_info, code);
	     if code ^= 0 then do;
		call sys_log_$error_log (SL_LOG, code, name,
		     "Cannot get additional info for terminal type ^a for multiplexer ^a.",
		     cdte.initial_terminal_type, mpx_chan);
		add_info = "";
		end;
	     end;

	if get_parm ("type=", parm) then do;		/* DCE or DTE options */
	     if parm = "DCE" then boot_info.dce_or_dte = "1"b;
	     else if parm = "DTE" then boot_info.dce_or_dte = "0"b;
	     else call bad_parm ("type", "DCE", "DTE");
	     end;

	if get_parm ("link_protocol=", parm) then do;	/* LAP or LAPB options */
	     if parm = "LAP" then boot_info.lap_or_lapb = "0"b;
	     else if parm = "LAPB" then boot_info.lap_or_lapb = "1"b;
	     else call bad_parm ("link_protocol", "LAP", "LAPB");
	     end;

	if get_parm ("frame_size=", parm) then do;
	     boot_info.frame_size = cv_dec_check_ (parm, code);
	     if code ^= 0 then call bad_conv ("frame_size");
	     if (boot_info.frame_size < 8) | (boot_info.frame_size > 8232) | (mod (boot_info.frame_size, 8) ^= 0)
	     then call bad_conv ("frame_size");
	     end;

	if get_parm ("K=", parm) then do;
	     boot_info.K = cv_dec_check_ (parm, code);
	     if code ^= 0 then call bad_conv ("K");
	     if (boot_info.K < 1) | (boot_info.K > 7) then call bad_conv ("K");
	     end;

	if get_parm ("T1=", parm) then do;
	     boot_info.T1 = 10.0e0 * cv_float_ (parm, code);
	     if code ^= 0 then call bad_conv ("T1");
	     if (boot_info.T1 < 1) | (boot_info.T1 > 500) then call bad_conv ("T1");
						/* tenths of seconds, remember */
	     end;

	if get_parm ("T3=", parm) then do;
	     boot_info.T3 = cv_float_ (parm, code);
	     if code ^= 0 then call bad_conv ("T3");
	     if (boot_info.T3 < .1e0) | (boot_info.T3 > 50e0) then call bad_conv ("T3");
	     end;

	if get_parm ("N2=", parm) then do;
	     boot_info.N2 = cv_dec_check_ (parm, code);
	     if code ^= 0 then call bad_conv ("N2");
	     if (boot_info.N2 < 1) | (boot_info.N2 > 511) then call bad_conv ("N2");
	     end;

	if get_parm ("disc_first=", parm) then do;	/* disc_first yes or no */
	     if parm = "yes" then boot_info.disc_first = "1"b;
	     else if parm = "no" then boot_info.disc_first = "0"b;
	     else call bad_parm ("disc_first", "yes", "no");
	     end;

	if get_parm ("trace_off=", parm) then do;	/* trace_off yes or no */
	     if parm = "yes" then boot_info.trace_off = "1"b;
	     else if parm = "no" then boot_info.trace_off = "0"b;
	     else call bad_parm ("trace_off", "yes", "no");
	     end;
	call hphcs_$tty_control (mpx_chan, "load_mpx", addr (boot_info), arg_code);
return_to_caller:
	return;

bad_conv:
     procedure (String);
dcl  String char (*) parameter;

	call sys_log_$error_log (SL_LOG, error_table_$bad_conversion, name,
	     "Converting ^a ^a to a number for multiplexer ^a.", String, parm, mpx_chan);
	arg_code = error_table_$bad_conversion;
	goto return_to_caller;
     end bad_conv;

get_parm:
     procedure (Parm, Value) returns (bit (1) aligned);
dcl  (Parm, Value) char (*);
dcl  i fixed bin;

	i = index (add_info, Parm);
	if i = 0
	then return ("0"b);
	else do;
	     Value = before (substr (add_info, i + length (Parm)), " ");
	     return ("1"b);
	     end;
     end get_parm;

bad_parm:
     proc (type, value1, value2);
dcl  (type, value1, value2) char (*) parameter;

	call sys_log_$error_log (SL_LOG, 0, name, "Bad argument to parm ^a, should be ^a or ^a", type, value1, value2);
	goto return_to_caller;			/* its bad enough to go back */
     end bad_parm;
%page;
/* Wakeup handler for wakeups on the bootload event channel */

lap_wakeup_handler:
     entry (arg_event_infop);

	event_call_info_ptr = arg_event_infop;
	cdtep = event_call_info.data_ptr;
	mpxep = addr (cdte.initial_command);

	if event_call_info.ring ^= 0			/* If not ring-0 */
	then if event_call_info.sender ^= get_process_id_ () then do;
						/* Trust only myself */
		call sys_log_ (SL_LOG, "^a: Unexpected wakeup (^72.3b) from process ^w.", name,
		     unspec (event_call_info.message), event_call_info.sender);
		return;
		end;

	mpx_chan = cdte.name;

	if (event_call_info.message < 1) | (event_call_info.message > 3) then do;
	     call sys_log_ (SL_LOG, "^a: Wakeup for multiplexer ^a has invalid state code: ^d.", name, mpx_chan,
		event_call_info.message);
	     return;
	     end;

	msg = "Unexpected signal";
	if mpxe.state = MPX_BOOT
	then if event_call_info.message ^= 1 then do;
		msg = "Load failed";
		call multiplexer_mgr_$mpx_load_failed (mpx_chan, code);
		end;
	     else do;
		msg = "Load signalled";
		call multiplexer_mgr_$mpx_loaded (mpx_chan, code);
		end;
	else if mpxe.state = MPX_UP
	then if event_call_info.message ^= 1 then do;
		msg = "Crash signalled";
		call multiplexer_mgr_$mpx_crashed (mpx_chan, (event_call_info.message = 2), code);
		end;
	call sys_log_ (SL_LOG, "^a: ^a for multiplexer ^a.", name, msg, mpx_chan);
	return;
%page;
/* Entry to dump a multiplexer. */

lap_dump:
     entry (arg_mpx_chan, arg_cdtp, arg_cdtep, arg_code);

	arg_code = 0;				/* nothing to do really */
	return;
%page;
/* Entry called by cv_cmf to validate LAP multiplexers */

lap_cv_cmf:
     entry (arg_cdtp, arg_cdtep, arg_mpx_chan, arg_chan_listp, arg_error_proc);

	cdtp = arg_cdtp;
	cdtep = arg_cdtep;
	mpx_chan = arg_mpx_chan;
	chan_listp = arg_chan_listp;
	error_proc = arg_error_proc;

/*
   Each multiplexer is alloted 99 errors.  The multiplexer type controls which
   block of numbers this multiplexer uses.  Multiplexer types are defined by the
   mpx_types array in multiplexer_types.incl.pl1.  The LAP multiplexer is in
   position 10 so it has error numbers 1001 - 1099.  The error number is the first
   argument to the error_proc procedure.  This value is not used in any other
   manner.
*/

/* Make sure this channel is not an FNP */

	if index (mpx_chan, ".") = 0			/* single component name => FNP */
	then call error_proc (1, ERROR_HERALD, "A LAP multiplexer cannot be configured as an FNP.  ^a", "^a", mpx_chan,
		"");

/* Validate subchannel names */

	if chan_list.count ^= 1
	then call error_proc (2, ERROR_HERALD, "A LAP multiplexer must have exactly one subchannel.  ^a.", "^a",
		mpx_chan, "");

	return;
%page;
/* Parameters */

dcl  arg_mpx_chan char (*);				/* Name of the multiplexed channel */
dcl  arg_cdtp ptr;					/* Address of the cdt */
dcl  arg_cdtep ptr;
dcl  arg_chan_listp ptr;				/* Pointer to a structure of channels to init  */
dcl  arg_check_sw bit (1) aligned;			/* Says whether or not to check configuration */
dcl  arg_event_infop ptr;
dcl  arg_code fixed bin (35);
dcl  arg_error_proc entry variable;

/* Automatic */

dcl  code fixed bin (35);
dcl  add_info varying char (512);
dcl  parm char (32);
dcl  msg char (32);
dcl  mpx_chan char (32);
dcl  chan_listp ptr;
dcl  1 boot_info aligned like lap_load_info;
dcl  error_proc entry (fixed bin, fixed bin, char (*), char (*), char (*), char (*)) variable;

/* Constants */

dcl  name char (15) int static options (constant) init ("as_lap_mpx_");
dcl  ERROR_HERALD fixed bin int static options (constant) init (2);

/* External */

dcl  hphcs_$tty_control entry (char (*), char (*), ptr, fixed bin (35));
dcl  ipc_$delete_ev_chn entry (fixed bin (71), fixed bin (35));
dcl  ipc_$create_ev_chn entry (fixed bin (71), fixed bin (35));
dcl  ipc_$decl_ev_call_chn entry (fixed bin (71), entry, ptr, fixed bin, fixed bin (35));
dcl  cv_dec_check_ entry (char (*), fixed bin (35)) returns (fixed bin (35));
dcl  cv_float_ entry (char (*), fixed bin (35)) returns (float bin);
dcl  sys_log_ entry options (variable);
dcl  sys_log_$error_log entry options (variable);
dcl  get_process_id_ entry returns (bit (36) aligned);
dcl  multiplexer_mgr_$mpx_load_failed entry (char (*), fixed bin (35));
dcl  multiplexer_mgr_$mpx_loaded entry (char (*), fixed bin (35));
dcl  multiplexer_mgr_$mpx_crashed entry (char (*), bit (1) aligned, fixed bin (35));
dcl  ttt_info_$additional_info entry (char (*), char (*) var, fixed bin (35));

dcl  error_table_$action_not_performed ext fixed bin (35);
dcl  error_table_$bad_conversion fixed bin (35) ext static;

dcl  (addr, before, length, low, mod, substr, unspec, index) builtin;

/* Based */

dcl  1 chan_list aligned based (chan_listp),		/* List of cdte entries of channels to boot */
       2 count fixed bin,
       2 cdte_ptr (0 refer (chan_list.count)) ptr unal;
%page; %include lap_simplex_data;
%page; %include lap_line_info;
%page; %include mcs_interrupt_info;
%page; %include cdt;
%page; %include author_dcl;
%page; %include line_types;
%page; %include event_call_info;
%page; %include sys_log_constants;
%page;
/* BEGIN MESSAGE DOCUMENTATION

   Message:
   as_lap_mpx_: ERROR. Creating event channel for multiplexer MPX.

   S: as (severity1)

   T: In response to an operator load_mpx command or during system start up.

   M: An ipc_ error occurred while trying to initialize the multiplexer.

   A: $notify

   Message:
   as_lap_mpx_: ERROR. Cannot get additional info for terminal type TTP for multiplexer MPX.

   S: as (severity1)

   T: In response to an operator load_mpx command or during system start up.

   M: An error occurred while retrieving the parameters of the multiplexer
   from the TTT.
   Either the terminal type specified in the CDT does not exist or it
   does not contain the required additional_info field.

   A: Check that the CMF and TTF contain the proper information.

   Message:
   as_lap_mpx_: Error in conversion. Converting FIELD VALUE to a number for multiplexer MPX.

   S: as (severity1)

   T: In response to an operator load_mpx command or during system start up.

   M: It was impossible to convert a numeric parameter from the terminal_type
   additional_info string to its internal form.
   FIELD is the name of the parameter in error.
   VALUE is the string which could not be converted.

   A: Check the contents of the TTF entry for the terminal_type associated
   with the multiplexer for errors.

   Message:
   as_lap_mpx_: Bad argument to parm PPPP, should be XXXX or YYYY

   S: as (severity1)

   T: In response to an operator load_mpx command for during system startup.

   M: A bad value was specified for the PPPP parameter in the TTF entry for
   this muliplexer.  Its value must be either XXXX or YYYY.

   A: Check the contents of the TTF entry for the terminal_type associated
   with the multiplexer for errors.

   Message:
   as_lap_mpx_: Unexpected wakeup (DATA) from process PRCID.

   S: as (severity1)

   T: $run

   M: The multiplexer manager received a wakeup from an unexpected source.
   The wakeup is ignored.

   A: $ignore

   Message:
   as_lap_mpx_: Wakeup for multiplexer MPX has invalid state code STATE.

   S: as (severity1)

   T: $run

   M: A wakeup with invalid data was received by the multiplexer manager.
   The wakeup is ignored.

   A: $notify

   Message:
   as_lap_mpx: Unexpected signal for multiplexer MPX.

   S: as (severity1)

   T: $run

   M: An unknown type event was signaled for multiplexer MPX.  It will be
   ignored.

   A: $notify

   Message:
   as_lap_mpx_: Load failed for multiplexer MPX.

   S: as (severity1)

   T: In response to an operator load_mpx command or during system start up.

   M: The attempt to load the multiplexer failed.
   This should never happen.

   A: $notify

   Message:
   as_lap_mpx_: Load signalled for multiplexer MPX.

   S: as (severity1)

   T: In response to an operator load_mpx command or during system start up.

   M: The multiplexer has been successfully loaded.
   It will be started unless the -no_start control argument was given when
   the load_mpx command was typed.

   A: $ignore

   Message:
   as_lap_mpx_: Crash signalled for multiplexer MPX.

   S: as (severity1)

   T: $run

   M: The multiplexer has crashed.
   The LAP link has entered the disconnected state.

   A: $notify

   END MESSAGE DOCUMENTATION */

     end as_lap_mpx_;
