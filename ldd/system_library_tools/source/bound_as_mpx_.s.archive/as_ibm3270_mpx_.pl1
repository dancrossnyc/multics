/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* AS_IBM3270_MPX_ - Anserwing service piece of IBM3270 multiplexer */

/* Written October 1978 by Larry Johnson (as as_user1_mpx_) */
/* Converted to as_vip7760_mpx_ 1/5/78 by J. Stern */
/* Modified 5/1/79 by J. Stern to add vip7760_cv_cmf entry */
/* Re-converted to as_ibm3270_mpx_ May 1979 by Larry Johnson */
/* Modified June 1981 by T. Casey for MR9.0 for new wakeup priorities. */
/* Modified August 1982 by Robert Coren for additional argument to multiplexer_mgr_$mpx_crashed. */

as_ibm3270_mpx_: proc;

/* Parameters */

dcl  arg_mpx_chan char (*);				/* Name of the multiplexed channel */
dcl  arg_cdtp ptr;					/* Address of the cdt */
dcl  arg_cdtep ptr;
dcl  arg_chan_listp ptr;				/* Pointer to a structure of channels to init  */
dcl  arg_check_sw bit (1) aligned;			/* Says whether or not to check configuration */
dcl  arg_event_infop ptr;
dcl  arg_code fixed bin (35);
dcl  arg_error_proc entry variable;

/* Automatic */

dcl  code fixed bin (35);
dcl  mpx_chan char (32);
dcl  chan_listp ptr;
dcl  event_infop ptr;
dcl  ev_msg_array (2) bit (36);
dcl  load_parm char (32);
dcl  len fixed bin;
dcl  p ptr;
dcl  station_addr fixed bin;
dcl (i, j) fixed bin;
dcl  subchan_flags (0:31) bit (1) unal;
dcl  error_proc entry (fixed bin, fixed bin, char (*), char (*), char (*), char (*)) variable;
dcl  cv_cmf_entry bit (1) init ("0"b);
dcl  controller_address_param fixed bin;
dcl  quit_key_param fixed bin;
dcl  formfeed_key_param fixed bin;
dcl  ascii_param bit (1);
dcl  allow_raw3270_param bit (1);
dcl  allow_copy_param bit (1);
dcl  debug_param bit (1);
dcl  error bit (1);

/* Constants */

dcl  name char (15) int static options (constant) init ("as_ibm3270_mpx_");
dcl  white_space char (2) int static options (constant) init (" 	"); /* Space and tab */

/* Static */

dcl  static_cdtp ptr int static init (null);
						/* Remember where cdt is */

/* External */

dcl  hphcs_$tty_control entry (char (*), char (*), ptr, fixed bin (35));
dcl  ipc_$delete_ev_chn entry (fixed bin (71), fixed bin (35));
dcl  ipc_$create_ev_chn entry (fixed bin (71), fixed bin (35));
dcl  ipc_$decl_ev_call_chn entry (fixed bin (71), entry, ptr, fixed bin, fixed bin (35));
dcl  sys_log_ entry options (variable);
dcl  convert_ipc_code_ entry (fixed bin (35));
dcl  sys_log_$error_log entry options (variable);
dcl  get_process_id_ entry returns (bit (36) aligned);
dcl  ttt_info_$additional_info entry (char (*), char (512) varying, fixed bin (35));
dcl  ttt_info_$modes entry (char (*), char (*), fixed bin (35));
dcl  multiplexer_mgr_$mpx_load_failed entry (char (*), fixed bin (35));
dcl  multiplexer_mgr_$mpx_loaded entry (char (*), fixed bin (35));
dcl  multiplexer_mgr_$mpx_crashed entry (char (*), bit (1) aligned, fixed bin (35));
dcl  convert_status_code_ entry (fixed bin (35), char (8), char (100));

dcl  error_table_$action_not_performed ext fixed bin (35);

dcl  conversion condition;

dcl (addr, bin, low, rtrim, ltrim, search, verify, null, string, substr, unspec, index, length)
     builtin;

/* Based */

dcl 1 chan_list aligned based (chan_listp),
						/* List of cdte entries of channels to boot */
    2 count fixed bin,
    2 cdte_ptr (0 refer (chan_list.count)) ptr unal;

dcl 1 event_info aligned based (event_infop),
						/* Event call argument structure */
    2 channel_id fixed bin (71),
    2 message fixed bin (71),
    2 sender_procid bit (36),
    2 origin,
      3 dev_signal bit (18) unal,
      3 ring bit (18) unal,
    2 data_ptr ptr;

/* Entry to load a multiplexer */

ibm3270_load:
	entry (arg_mpx_chan, arg_cdtp, arg_cdtep, arg_chan_listp, arg_check_sw, arg_code);

	mpx_chan = arg_mpx_chan;
	cdtp, static_cdtp = arg_cdtp;
	cdtep = arg_cdtep;
	chan_listp = arg_chan_listp;
	mpxep = addr (cdte.initial_command);

	if cdte.event ^= 0 then call ipc_$delete_ev_chn (cdte.event, code);
	call ipc_$create_ev_chn (cdte.event, code);
	if code ^= 0 then do;
ev_chan_err:   call convert_ipc_code_ (code);
	     call sys_log_$error_log (1, code, name, "Creating event channel for multiplexer ^a", mpx_chan);
	     arg_code = error_table_$action_not_performed;
	     return;
	end;
	call ipc_$decl_ev_call_chn (cdte.event, ibm3270_wakeup_handler, cdtep, MPX_LOAD_PRIO, code);
	if code ^= 0 then go to ev_chan_err;

	call get_boot_info;				/* Get bootload parameters */
	if error then do;
	     arg_code = error_table_$action_not_performed;
	     return;
	end;

	load_info_nchan = chan_list.count;

	begin;

dcl 1 auto_load_info like load_info aligned automatic;

	     load_infop = addr (auto_load_info);
	     load_info.event_channel = cdte.event;
	     string (load_info.flags) = "0"b;
	     load_info.debug = debug_param;
	     load_info.allow_copy = allow_copy_param;
	     load_info.allow_raw3270 = allow_raw3270_param;
	     load_info.ascii = ascii_param;
	     load_info.quit_key = quit_key_param;
	     load_info.formfeed_key = formfeed_key_param;
	     load_info.controller_address = controller_address_param;
	     load_info.nchan = load_info_nchan;

	     do i = 1 to load_info.nchan;
		chan_load_infop = addr (load_info.chan_info (i));
		p = chan_list.cdte_ptr (i);
		chan_load_info.devx = p -> cdte.twx;
		call get_line_and_screen_size (p);
	     end;

	     call hphcs_$tty_control (mpx_chan, "load_mpx", load_infop, code);
	end;

	if code ^= 0 then do;
	     arg_code = code;
	     return;
	end;

	arg_code = 0;
	return;

/* Wakeup handler for wakeups on the bootload event channel */

ibm3270_wakeup_handler:
	entry (arg_event_infop);

	event_infop = arg_event_infop;
	cdtp = static_cdtp;
	cdtep = event_info.data_ptr;
	mpxep = addr (cdte.initial_command);

	if event_info.ring ^= "0"b
	then					/* If not ring-0 */
	     if event_info.sender_procid ^= get_process_id_ ()
	     then do;				/* Trust only myself */
		string (ev_msg_array) = unspec (event_info.message);
		call sys_log_ (1, "^a: Unexpected wakeup (^w ^w) from process ^w.", name, ev_msg_array,
		     event_info.sender_procid);
		return;
	     end;

	mpx_chan = cdte.name;

	if event_info.message ^= IBM3270_MPX_UP & event_info.message ^= IBM3270_MPX_DOWN & event_info.message ^= IBM3270_MPX_MASKED
	then do;
	     call sys_log_ (1, "^a: Wakeup for multiplexer ^a has invalid state code: ^d.", name, mpx_chan,
		event_info.message);
	     return;
	end;
	call sys_log_ (1, "^a: ^[Load^;Crash^] signaled for multiplexer ^a.", name, (event_info.message = IBM3270_MPX_UP),
	     mpx_chan);

	if mpxe.state = MPX_BOOT
	then do;					/* Now booting */
	     if event_info.message ^= IBM3270_MPX_UP
	     then					/* Boot failed */
		call multiplexer_mgr_$mpx_load_failed (mpx_chan, code);
	     else do;
		call hphcs_$tty_control (mpx_chan, "start_mpx", null (), code);
		if code = 0 then call multiplexer_mgr_$mpx_loaded (mpx_chan, code);
		else do;
		     call sys_log_$error_log (1, code, name, "Unable to start ^a", mpx_chan);
		     call multiplexer_mgr_$mpx_load_failed (mpx_chan, code);
		end;
	     end;
	     return;
	end;

	else if mpxe.state = MPX_UP
	then do;					/* Currently running ok */
	     if event_info.message ^= IBM3270_MPX_UP
	     then					/* It crashed */
		call multiplexer_mgr_$mpx_crashed (mpx_chan, (event_info.message = IBM3270_MPX_DOWN), code);
	end;
	return;

/* Entry to dump a multiplexer. */

ibm3270_dump:
	entry (arg_mpx_chan, arg_cdtp, arg_cdtep, arg_code);

	arg_code = 0;				/* Nothing to do really */
	return;

/* Entry called by cv_cmf to validate ibm3270 multiplexers */

ibm3270_cv_cmf:
	entry (arg_cdtp, arg_cdtep, arg_mpx_chan, arg_chan_listp, arg_error_proc);

	cv_cmf_entry = "1"b;
	cdtp = arg_cdtp;
	cdtep = arg_cdtep;
	mpx_chan = arg_mpx_chan;
	chan_listp = arg_chan_listp;
	error_proc = arg_error_proc;

/* Make sure this channel is not an FNP */

	if index (mpx_chan, ".") = 0			/* Single component name => FNP */
	then call error_proc (1, 2, "An IBM3270 multiplexer cannot be configured as an FNP.  ^a", "^a", mpx_chan, "");

/* Make sure line type is right */

	if cdte.line_type ^= LINE_BSC
	then call error_proc (2, 2, "An IBM3270 multiplexer must have a line type of BSC.  ^a", "^a", mpx_chan, "");

/* Validate subchannel names */

	string (subchan_flags) = "0"b;
	j = length (rtrim (cdte.name)) + 1;		/* Get length of major channel name */
	do i = 1 to chan_list.count;			/* Examine subchans */
	     p = chan_list.cdte_ptr (i);
	     len = length (rtrim (p -> cdte.name)) - j;
	     if len < 3				/* Name too short */
	     then do;
bad_name:
		call error_proc (4, 2, "Invalid subchannel name ^a for IBM3270 multiplexer ^a.", "^a for ^a",
		     substr (p -> cdte.name, j + 1), mpx_chan);
		go to next_subchan;
	     end;
	     if len > 3				/* Name too long, better be more components */
	     then if substr (p -> cdte.name, j + 4, 1) ^= "."
						/* Nope, bad name */
		then go to bad_name;

	     if verify (substr (p -> cdte.name, j + 1, 1), "dp") ^= 0
	     then go to bad_name;

	     station_addr = bin (substr (p -> cdte.name, j + 2, 2));
	     if station_addr < 0 | station_addr > 31
	     then go to bad_name;
	     if subchan_flags (station_addr) then
		call error_proc (3, 2, "IBM3270 subchannel ^a conflicts with another device with the same address.",
		"^a", (cdte.name), "");
	     subchan_flags (station_addr) = "1"b;
next_subchan:
	end;
	call get_boot_info;				/* Validate params also */

	return;

/* Subroutine to prepare info structure for "load_mpx" control order */

get_boot_info:
	proc;

dcl  add_info char (512) varying;
dcl (i, j) fixed bin;
dcl  work char (512);
dcl  keyword char (32);
dcl  option char (32);
dcl  long char (100);
dcl  short char (8);

/* Set defaults */

	     controller_address_param = 0;
	     quit_key_param = PA1;
	     formfeed_key_param = CLEAR;
	     ascii_param = "0"b;
	     allow_raw3270_param = "1"b;
	     allow_copy_param = "0"b;
	     debug_param = "0"b;

	     error = "0"b;

	     if cdte.initial_terminal_type = "" then return;
	     if cdte.initial_terminal_type = low (length (cdte.initial_terminal_type)) then return;
	     call ttt_info_$additional_info (cdte.initial_terminal_type, add_info, code);
	     if code ^= 0 then do;
		call convert_status_code_ (code, short, long);
		call info_error (5, long || " Unable to get additional info in ttf for ^a, terminal type ^a",
		     "^a, ^a", (cdte.name), cdte.initial_terminal_type);
		return;
	     end;

	     work = ltrim (add_info, white_space);
	     do while (work ^= "");
		i = index (work, "=");
		if i < 2 then do;
		     call info_error (6, "Syntax error in additional info in ttf for ^a. ^a", "^a, ^a",
			(cdte.name), rtrim (work));
		     return;
		end;

		keyword = substr (work, 1, i - 1);
		work = substr (work, i + 1);
		i = search (work, white_space);
		if i = 1 then option = "";
		else if i = 0 then do;
		     option = work;
		     work = "";
		end;
		else do;
		     option = substr (work, 1, i - 1);
		     work = substr (work, i);
		end;

		if keyword = "controller_address" then do;
		     on conversion go to bad_param;
		     controller_address_param = bin (option);
		     revert conversion;
		     if controller_address_param < 0 | controller_address_param > 31 then do;
bad_param:		call info_error (7, "Invalid parameter specified in ttf for ^a. ^a", "^a, ^a",
			     (cdte.name), rtrim (keyword) || "=" || rtrim (option));
			go to parse_next;
		     end;
		end;
		else if keyword = "quit" then do;
		     if option = "pa1" then quit_key_param = PA1;
		     else if option = "pa2" then quit_key_param = PA2;
		     else if option = "pa3" then quit_key_param = PA3;
		     else go to bad_param;
		end;
		else if keyword = "formfeed" then do;
		     if option = "pa1" then formfeed_key_param = PA1;
		     else if option = "pa2" then formfeed_key_param = PA2;
		     else if option = "pa3" then formfeed_key_param = PA3;
		     else if option = "clear" then formfeed_key_param = CLEAR;
		     else go to bad_param;
		end;
		else if keyword = "code" then do;
		     if option = "ebcdic" then ascii_param = "0"b;
		     else if option = "ascii" then ascii_param = "1"b;
		     else go to bad_param;
		end;
		else if keyword = "allow_raw3270" then do;
		     if option = "yes" then allow_raw3270_param = "1"b;
		     else if option = "no" then allow_raw3270_param = "0"b;
		     else go to bad_param;
		end;
		else if keyword = "allow_copy" then do;
		     if option = "yes" then allow_copy_param = "1"b;
		     else if option = "no" then allow_copy_param = "0"b;
		     else go to bad_param;
		end;
		else if keyword = "debug" then do;
		     if option = "yes" then debug_param = "1"b;
		     else if option = "no" then debug_param = "0"b;
		     else go to bad_param;
		end;
		else do;
		     call info_error (8, "Invalid option specified in ttf for ^a. ^a", "^a, ^a",
			(cdte.name), rtrim (keyword) || "=" || rtrim (option));
		end;
parse_next:
		work = ltrim (work, white_space);
	     end;

	     if quit_key_param = formfeed_key_param then
		call info_error (9, "Invalid attempt in ttf to specify same function key for quits and formfeeds. ^a",
		"^a", (cdte.name), "");

	     return;

	end get_boot_info;

info_error: proc (errno, long_ioa_string, short_ioa_string, arg1, arg2);

dcl  errno fixed bin;
dcl (long_ioa_string, short_ioa_string) char (*);
dcl (arg1, arg2) char (*);

	     error = "1"b;
	     if cv_cmf_entry then call error_proc (errno, 1, long_ioa_string, short_ioa_string, arg1, arg2);
	     else call sys_log_ (1, "^a: " || long_ioa_string, name, arg1, arg2);
	     return;

	end info_error;

/* parse mode string for line length and page length */

get_line_and_screen_size: proc (p);

dcl  p ptr;					/* cdte pointer */
dcl  i fixed bin;
dcl (ll, pl) fixed bin;
dcl  mode_string char (512);


	     ll = 80;
	     if p -> cdte.initial_terminal_type = "" then go to set_defaults;
	     if p -> cdte.initial_terminal_type = low (length (cdte.initial_terminal_type)) then go to set_defaults;

	     call ttt_info_$modes (p -> cdte.initial_terminal_type, mode_string, code);
	     if code ^= 0 then go to set_defaults;

	     i = index (mode_string, ",ll");
	     if i = 0 then go to set_defaults;
	     ll = cv_modes ();
	     ll = 20 * divide (ll + 19, 20, 17, 0);

	     i = index (mode_string, ",pl");
	     if i = 0 then go to set_defaults;
	     pl = cv_modes ();
	     pl = 12 * divide (pl + 11, 12, 17, 0);

set_values:    chan_load_info.line_size = ll;
	     chan_load_info.screen_size = ll * pl;
	     return;

set_defaults:  if ll = 40 then pl = 12;
	     else pl = 24;
	     go to set_values;

cv_modes:	     proc returns (fixed bin);

dcl  j fixed bin;

		on conversion go to set_defaults;
		j = verify (substr (mode_string, i + 3), "0123456789");
		if j < 2 then go to set_defaults;
		return (bin (substr (mode_string, i + 3, j - 1)));

	     end cv_modes;

	end get_line_and_screen_size;

%include ibm3270_mpx_load_data;

%include cdt;

%include author_dcl;

%include line_types;

%include as_wakeup_priorities;

     end as_ibm3270_mpx_;
