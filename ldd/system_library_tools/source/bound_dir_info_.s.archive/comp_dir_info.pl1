/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


comp_dir_info: proc;

	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* comp_dir_info - compare two saved directories					*/
	/*									*/
	/* Status:								*/
	/*									*/
	/* 0) Created   May, 1973 by T. H. VanVleck					*/
	/* 1) Modified  July, 1982 by Jim Lippard to only print 2 dir ring brackets		*/
	/* 2) Modified  Oct, 1982 by G. C. Dixon to modernize the code			*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

dcl  al fixed bin(21),				/* length of arg */
     an fixed bin,
     ap ptr,					/* ptr to arg */
    (datstr1, datstr2) char (24),
     ec fixed bin (35),				/* error code */
     en1 char (32),
    (fdir1, fdir2) char (168),
    (fent1, fent2) char (32),
    (firstadd, firstdelete) bit (1),
    (fptr1, fptr2) ptr,
     headed bit (1),
    (i, k, m, n) fixed bin,
     loud bit (1),
    (n1, n2) fixed bin,
     nacl fixed bin,
    (name1x, name2x) fixed bin,
     nchanges fixed bin,
    (np1, np2) ptr,
    (type1, type2) fixed bin,
     uid1 bit (36) aligned,
     verbosity fixed bin,
     xp ptr,
    (xp1, xp2) ptr;

dcl (addr, binary, fixed, index, max, null, ptr, substr) builtin;

dcl  cleanup condition;

dcl  bchr char (al) unal based (ap),			/* pickup for argument */
     names (100) char (32) aligned based;		/* names from star */

dcl  com_err_ entry options (variable),
     cu_$arg_ptr entry (fixed bin, ptr, fixed bin(21), fixed bin(35)),
     date_time_ entry (fixed bin(71), char(*)),
     date_time_$fstime entry (bit(36) aligned, char(*)),
     expand_pathname_$add_suffix entry (char(*), char(*), char(*), char(*), fixed bin(35)),
     hcs_$initiate entry (char(*), char(*), char(*), fixed bin(1), fixed bin(2), ptr, fixed bin(35)),
     hcs_$terminate_noname entry (ptr, fixed bin(35)),
     ioa_ entry options (variable),
     ioa_$rsnnl entry options (variable),
     list_dir_info_	entry (ptr, fixed bin, char(1)),
     mdc_$find_lvname entry (bit (36), char (*) aligned, fixed bin (35));

dcl  TAB char (1) int static options(constant) init("	"),
    (error_table_$bad_arg,
     error_table_$badopt) fixed bin(35) ext static,
     segtype (0:2) char (4) aligned int static options(constant) init("link", "seg ", "dir ");

%include saved_dir_info;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


	call cu_$arg_ptr (1, ap, al, ec);
	if ec ^= 0 then do;
ER:	   call com_err_ (ec, "comp_dir_info", "
Usage:  comp_dir_info dir_info_path1 dir_info_path2 {-control_arg}
Args:   -brief, -bf
        -verbose
        -long, -lg");
	   return;
	   end;
	call expand_pathname_$add_suffix (bchr, "dir_info", fdir1, fent1, ec);
	if ec ^= 0 then do;
	   call com_err_ (ec, "comp_dir_info", "^a", bchr);
	   return;
	   end;

	call cu_$arg_ptr (2, ap, al, ec);
	if ec ^= 0 then go to ER;
	call expand_pathname_$add_suffix (bchr, "dir_info", fdir2, fent2, ec);
	if ec ^= 0 then do;
	   call com_err_ (ec, "comp_dir_info", "^a", bchr);
	   return;
	   end;

	loud = "0"b;
	verbosity = 1;
	nchanges = 0;
	firstdelete, firstadd = "1"b;
	ec = 0;
	do an = 3 by 1 while (ec = 0);
	   call cu_$arg_ptr (an, ap, al, ec);
	   if ec = 0 then do;
	      if bchr = "-long" | bchr = "-lg" then do;
	         loud = "1"b;
	         verbosity = 2;
	         end;
	      else if bchr = "-verbose" | bchr = "-vb" then do;
	         loud = "1"b;
	         verbosity = 3;
	         end;
	      else if bchr = "-brief" | bchr = "-bf" then do;
	         loud = "0"b;
	         verbosity = 0;
	         end;
	      else do;
	         if index(bchr,"-") = 1 then
		  ec = error_table_$badopt;
	         else
		  ec = error_table_$bad_arg;
	         call com_err_ (ec, "comp_dir_info", "^a", bchr);
	         return;
	         end;
	      end;
	   end;

          fptr1 = null;
	fptr2 = null;
	on cleanup call janitor();

	call hcs_$initiate (fdir1, fent1, "", 0, 0, fptr1, ec);
	if fptr1 = null then do;
	   call com_err_ (ec, "comp_dir_info", "Accessing dir_info segment
(^a^[>^]^a).", fdir1, fdir1^=">", fent1);
	   go to EXIT;
	   end;

	call hcs_$initiate (fdir2, fent2, "", 0, 0, fptr2, ec);
	if fptr2 = null then do;
	   call com_err_ (ec, "comp_dir_info", "Accessing dir_info segment
(^a^[>^]^a).", fdir2, fdir2^=">", fent2);
	   go to EXIT;
	   end;

	if verbosity > 0 then do;			/* Print titles */
	   call date_time_ (fptr1 -> fseg.timeof, datstr1);
	   call date_time_ (fptr2 -> fseg.timeof, datstr2);
	   call ioa_ ("^|Comparing ^a as of ^a^/^7xto ^a as of ^a",
	      fptr1 -> fseg.fpath, datstr1, fptr2 -> fseg.fpath, datstr2);
	   end;
	n1 = fptr1 -> fseg.nents + 1;			/* add one because dir itself is in there. */
	n2 = fptr2 -> fseg.nents + 1;

	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* This begin block contains the main loop.  We take one entry at a time from the old	*/
	/* segment, and look for it in the new segment.  A match on unique ID is preferred, or	*/
	/* else a match of any name in the new entry for the primary name on the old entry.	*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

COMPARE_BLOCK:
	begin;

dcl  x1 bit (n1);					/* if i'th bit of x1 is on, entry in old was deleted */
dcl  x2 bit (n2);					/* If i'th bit of x2 is on, entry in new was matched. */
dcl (x1count, x2count) fixed bin;

	   x1 = "0"b;				/* Clear check arrays. */
	   x2 = "0"b;
	   x1count = 0;
	   x2count = n2;

	   name1x = 1;
	   xp1 = addr (fptr1 -> fseg.ffirst);

LOOP:	   if xp1 -> seg_rec.type = "01"b then do;
	      type1 = 1;
	      np1 = addr (xp1 -> seg_rec.names);
	      uid1 = xp1 -> seg_rec.uid;
	      end;
	   else if xp1 -> dir_rec.type = "10"b then do;
	      type1 = 2;
	      np1 = addr (xp1 -> dir_rec.names);
	      uid1 = xp1 -> dir_rec.uid;
	      end;
	   else do;
	      type1 = 0;
	      np1 = addr (xp1 -> link_rec.names);
	      uid1 = (36)"0"b;
	      end;
	   en1 = np1 -> names (1);

	   name2x = 1;
	   xp2 = addr (fptr2 -> fseg.ffirst);
SEARCH:	   if x2count = 0 then go to NOTTHERE;
	   if substr (x2, name2x, 1) then go to NEXT;
	   type2 = fixed (xp2 -> seg_rec.type);
	   if type2 = 1 then np2 = addr (xp2 -> seg_rec.names);
	   else if type2 = 2 then np2 = addr (xp2 -> dir_rec.names);
	   else np2 = addr (xp2 -> link_rec.names);
	   if type2 ^= 0 then
	      if uid1 = xp2 -> seg_rec.uid then go to MATCH;
	   do i = 1 to xp2 -> seg_rec.n_names;
	      if np2 -> names (i) = en1 then if type1 = type2 then go to MATCH;
	      end;
NEXT:	   if xp2 -> seg_rec.fnext then do;
	      xp2 = ptr (xp2, xp2 -> seg_rec.fnext);
	      name2x = name2x + 1;
	      go to SEARCH;
	      end;

NOTTHERE:	   nchanges = nchanges + 1;
	   substr (x1, name1x, 1) = "1"b;		/* Entry was deleted. */
	   x1count = x1count + 1;
	   go to SKIP1;


	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* This section is entered when we have found an entry in both the old and new dir_info	*/
	/* segments, with either a UID match or a name match, and the same type		*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

MATCH:	   substr (x2, name2x, 1) = "1"b;
	   x2count = x2count - 1;
	   headed = "0"b;
	   m = xp2 -> seg_rec.n_names;

	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* This section compares the names on the old and new entries.			*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

NAME_BLOCK:  begin;

dcl  nfg bit (m);					/* if i'th bit of nfg is on, name was matched */
dcl  nfg_count fixed bin;

	      nfg_count = m;
	      nfg = "0"b;
	      do i = 1 to xp1 -> seg_rec.n_names;
	         n = index (np1 -> names (i), " ");
	         do k = 1 to m while (nfg_count > 0);
		  if ^substr (nfg, k, 1) then	/* Make sure name not matched already */
		  if np1 -> names (i) = np2 -> names (k) then do;
		     substr (nfg, k, 1) = "1"b;
		     nfg_count = nfg_count - 1;
		     go to BREAK;			/* Name is matched. */
		     end;
		  end;
	         if ^headed then call head;		/* Leftover old name. */
	         call ioa_ ("^-name deleted:^-^a", np1 -> names (i));
BREAK:	         end;

	      do i = 1 to m while (nfg_count > 0);	/* Check for unmatched new names */
	         if ^substr (nfg, i, 1) then do;
		  nfg_count = nfg_count - 1;
		  if ^headed then call head;
		  call ioa_ ("^-name added:^-^a", np2 -> names (i));
		  end;
	         end;
	      end NAME_BLOCK;


	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* Now we check the rest of the entry to see what has been modified.			*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

	   if type1 = 0 then do;			/* If link, check target */
	      if xp1 -> link_rec.target ^= xp2 -> link_rec.target then do;
	         if ^headed then call head;
	         call ioa_ ("^-link target changed from ^a  to  ^a",
		  xp1 -> link_rec.target, xp2 -> link_rec.target);
	         end;
	      if loud then do;
	         if xp1 -> link_rec.dtem ^= xp2 -> link_rec.dtem then do;
		  if ^headed then call head;
		  call ioa_ ("^-date link modified changed from ^a  to  ^a",
		     datec (xp1 -> link_rec.dtem), datec (xp2 -> link_rec.dtem));
		  end;
	         end;
	      go to SKIP1;
	      end;

	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* Segment or directory. Check for changes.					*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

	   if xp1 -> seg_rec.rbs (0) ^= xp2 -> seg_rec.rbs (0) then go to XRB;
	   if xp1 -> seg_rec.rbs (1) ^= xp2 -> seg_rec.rbs (1) then go to XRB;
	   if xp1 -> seg_rec.rbs (2) ^= xp2 -> seg_rec.rbs (2) then do;
XRB:	      if ^headed then call head;
	      call ioa_ ("^-ring brackets changed from ^d,^d^[,^d^;^s^] to ^d,^d^[,^d^;^s^]",
	         fixed (binary (xp1 -> seg_rec.rbs (0)), 35),
	         fixed (binary (xp1 -> seg_rec.rbs (1)), 35),
	         segtype (type1) ^= "dir ",
	         fixed (binary (xp1 -> seg_rec.rbs (2)), 35),
	         fixed (binary (xp2 -> seg_rec.rbs (0)), 35),
	         fixed (binary (xp2 -> seg_rec.rbs (1)), 35),
	         segtype (type2) ^= "dir ",
	         fixed (binary (xp2 -> seg_rec.rbs (2)), 35));
	      end;
	   if xp1 -> dir_rec.damaged ^= xp2 -> dir_rec.damaged then do;
	      if ^headed then call head;
	      call ioa_ ("^-damaged changed from ^[ON^;OFF^]  to  ^[ON^;OFF^]",
	         xp1 -> dir_rec.damaged, xp2 -> dir_rec.damaged);
	      end;

	   if loud then do;
	      if xp1 -> dir_rec.ssw ^= xp2 -> dir_rec.ssw then do;
	         if ^headed then call head;
	         call ioa_ ("^-safety switch changed from ^[ON^;OFF^]  to  ^[ON^;OFF^]",
		  xp1 -> dir_rec.ssw, xp2 -> dir_rec.ssw);
	         if xp1 -> dir_rec.tpd ^= xp2 -> dir_rec.tpd then do;
		  if ^headed then call head;
		  call ioa_ ("^-tpd changed from ^[ON^;OFF^]  to  ^[ON^;OFF^]",
		     xp1 -> dir_rec.tpd, xp2 -> dir_rec.tpd);
		  end;
	         end;
	      if xp1 -> dir_rec.author ^= xp2 -> dir_rec.author then do;
	         if ^headed then call head;
	         call ioa_ ("^-author changed from ^a  to  ^a",
		  xp1 -> dir_rec.author, xp2 -> dir_rec.author);
	         end;
	      if xp1 -> dir_rec.bc_author ^= xp2 -> dir_rec.bc_author then do;
	         if ^headed then call head;
	         call ioa_ ("^-bit count author changed from ^a  to  ^a",
		  xp1 -> dir_rec.bc_author, xp2 -> dir_rec.bc_author);
	         end;
	      if type1 = 1 then do;
	         call compare_acl (addr (xp1 -> seg_rec.acls), addr (xp2 -> seg_rec.acls),
		  xp1 -> seg_rec.nacls, xp2 -> seg_rec.nacls, "ACL", 1);
	         end;
	      else do;
	         call compare_acl (addr (xp1 -> dir_rec.acls), addr (xp2 -> dir_rec.acls),
		  xp1 -> dir_rec.nacls, xp2 -> dir_rec.nacls, "ACL", 2);
	         end;
	      end;

	   else do;				/* Non-loud mode. */
	      if type1 = 2 then			/* if dir */
	         if xp1 -> dir_rec.nacls > 0 then if xp2 -> dir_rec.nacls = 0 then go to ZACL;
	      if type1 = 1 then			/* else if seg */
	      if xp1 -> seg_rec.nacls > 0 then
	      if xp2 -> seg_rec.nacls = 0 then do;
ZACL:	         if ^headed then call head;
	         call ioa_ ("^-ACL has been deleted");
	         end;
	      end;

	   if type1 = 1 then do;			/* segment? */
	      if loud then do;
	         if xp1 -> seg_rec.dtem ^= xp2 -> seg_rec.dtem then do;
		  if ^headed then call head;
		  call ioa_ ("^-date branch modified changed from ^a  to  ^a",
		     datec (xp1 -> seg_rec.dtem), datec (xp2 -> seg_rec.dtem));
		  end;
	         if verbosity = 3 then do;
		  if (xp1 -> seg_rec.lvid ^= "0"b) & (xp1 -> seg_rec.lvid ^= xp2 -> seg_rec.lvid) then do;
		     if ^headed then call head;
		     call ioa_ ("^-volume changed from ^a  to  ^a",
		        volnc (xp1 -> seg_rec.lvid), volnc (xp2 -> seg_rec.lvid));
		     end;
		  if xp1 -> seg_rec.dtm ^= xp2 -> seg_rec.dtm then do;
		     if ^headed then call head;
		     call ioa_ ("^-date modified changed from ^a  to  ^a",
		        datec (xp1 -> seg_rec.dtm), datec (xp2 -> seg_rec.dtm));
		     end;
		  if xp1 -> seg_rec.bitcnt ^= xp2 -> seg_rec.bitcnt then do;
		     if ^headed then call head;
		     call ioa_ ("^-bit count changed from ^d  to  ^d",
		        fixed (binary (xp1 -> seg_rec.bitcnt), 35), fixed (binary (xp2 -> seg_rec.bitcnt), 35));
		     end;
		  end;
	         if xp1 -> seg_rec.records ^= xp2 -> seg_rec.records then do;
		  if ^headed then call head;
		  call ioa_ ("^-records used changed from ^d  to  ^d",
		     fixed (binary (xp1 -> seg_rec.records), 35), fixed (binary (xp2 -> seg_rec.records), 35));
		  end;
	         if xp1 -> dir_rec.max_lth ^= xp2 -> dir_rec.max_lth then do;
		  if ^headed then call head;
		  call ioa_ ("^-max length changed from ^d  to  ^d",
		     xp1 -> dir_rec.max_lth, xp2 -> dir_rec.max_lth);
		  end;
	         end;
	      else do;
	         if xp1 -> seg_rec.records then
	         if xp2 -> seg_rec.records = "0"b then do;
		  if ^headed then call head;
		  call ioa_ ("^-segment has been truncated");
		  end;
	         end;
	      end;

	   else do;				/* directory */
	      if (xp1 -> dir_rec.slvid ^= "0"b) & (xp1 -> dir_rec.slvid ^= xp2 -> dir_rec.slvid) then do;
	         if ^headed then call head;
	         call ioa_ ("^-sons volume changed from ^a  to  ^a",
		  volnc (xp1 -> dir_rec.slvid), volnc (xp2 -> dir_rec.slvid));
	         end;
	      if xp1 -> dir_rec.mdir ^= xp2 -> dir_rec.mdir then do;
	         if ^headed then call head;
	         call ioa_ ("^-mdir changed from ^[ON^;OFF^]  to  ^[ON^;OFF^]",
		  xp1 -> dir_rec.mdir, xp2 -> dir_rec.mdir);
	         end;
	      if xp1 -> dir_rec.quota ^= xp2 -> dir_rec.quota then do;
	         if ^headed then call head;
	         call ioa_ ("^-quota changed from ^d  to  ^d",
		  xp1 -> dir_rec.quota, xp2 -> dir_rec.quota);
	         end;
	      if xp1 -> seg_rec.bitcnt ^= xp2 -> seg_rec.bitcnt then do;
	         if ^headed then call head;
	         call ioa_ ("^-msf indicator changed from ^d  to  ^d",
		  fixed (binary (xp1 -> seg_rec.bitcnt), 35), fixed (binary (xp2 -> seg_rec.bitcnt), 35));
	         end;
	      if verbosity = 3 then do;
	         if xp1 -> seg_rec.dtem ^= xp2 -> seg_rec.dtem then do;
		  if ^headed then call head;
		  call ioa_ ("^-date branch modified changed from ^a  to  ^a",
		     datec (xp1 -> seg_rec.dtem), datec (xp2 -> seg_rec.dtem));
		  end;
	         if xp1 -> seg_rec.dtm ^= xp2 -> seg_rec.dtm then do;
		  if ^headed then call head;
		  call ioa_ ("^-date modified changed from ^a  to  ^a",
		     datec (xp1 -> seg_rec.dtm), datec (xp2 -> seg_rec.dtm));
		  end;
	         end;
	      if loud then do;
	         call compare_acl (addr (xp1 -> dir_rec.isacls), addr (xp2 -> dir_rec.isacls),
		  xp1 -> dir_rec.nisacls, xp2 -> dir_rec.nisacls, "initial seg acl", 1);
	         call compare_acl (addr (xp1 -> dir_rec.idacls), addr (xp2 -> dir_rec.idacls),
		  xp1 -> dir_rec.nidacls, xp2 -> dir_rec.nidacls, "initial dir acl", 2);
	         end;
	      end;

	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* Go on to the next record in the old dir_info segment.				*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

SKIP1:	   if xp1 -> seg_rec.fnext then do;
	      xp1 = ptr (xp1, xp1 -> seg_rec.fnext);
	      name1x = name1x + 1;
	      go to LOOP;
	      end;

	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* End of scan over old dir_info segment, which began at label "LOOP"			*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* Scan old dir_info segment for any segments which were deleted.			*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

	   i = 1;
	   xp1 = addr (fptr1 -> fseg.ffirst);
LOOP2A:	   if substr (x1, i, 1) then do;
	      x1count = x1count - 1;
	      type1 = fixed (xp1 -> seg_rec.type);
	      if type1 = 1 then np1 = addr (xp1 -> seg_rec.names);
	      else if type1 = 2 then np1 = addr (xp1 -> dir_rec.names);
	      else np1 = addr (xp1 -> link_rec.names);
	      if firstdelete then do;
	         call ioa_ ("^/^/");
	         firstdelete = "0"b;
	         end;
	      call ioa_ ("^/deleted:^-^a ^a", segtype (type1), np1 -> names (1));
	      call list_dir_info_ (xp1, verbosity, TAB);
	      end;
	   if x1count > 0 then
	   if xp1 -> seg_rec.fnext then do;
	      i = i + 1;
	      xp1 = ptr (xp1, xp1 -> seg_rec.fnext);
	      go to LOOP2A;
	      end;

	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* Hunt for any entries in the new segment which have been added.			*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

	   i = 1;
	   xp2 = addr (fptr2 -> fseg.ffirst);
LOOP2:	   if ^substr (x2, i, 1) then do;
	      x2count = x2count - 1;
	      type2 = fixed (xp2 -> seg_rec.type);
	      if type2 = 1 then np2 = addr (xp2 -> seg_rec.names);
	      else if type2 = 2 then np2 = addr (xp2 -> dir_rec.names);
	      else np2 = addr (xp2 -> link_rec.names);
	      nchanges = nchanges + 1;
	      if firstadd then do;
	         call ioa_ ("^/^/");
	         firstadd = "0"b;
	         end;
	      call ioa_ ("^/added:^-^a ^a", segtype (type2), np2 -> names (1));
	      call list_dir_info_ (xp2, verbosity, TAB);
	      end;
	   if x2count > 0 then
	   if xp2 -> seg_rec.fnext then do;
	      i = i + 1;
	      xp2 = ptr (xp2, xp2 -> seg_rec.fnext);
	      go to LOOP2;
	      end;
	   end COMPARE_BLOCK;

	if nchanges = 0 then call ioa_ ("Identical");
	call ioa_ ("");

EXIT:	call janitor();
	return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/*		I  N  T  E  R  N  A  L        P  R  O  C  E  D  U  R  E  S		*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */


cmode:	proc (x, t) returns (char (5) aligned);

dcl  x bit (36) aligned;
dcl  t fixed bin;

dcl  ans char (5) aligned;
dcl (i, k) fixed bin;
dcl  xmode (2, 5) char (1) int static options(constant) init("r", "e", "w", "a", "", "s", "m", "a", "", "");

	k = 1;
	ans = "";
	do i = 1 to 5;
	   if substr (x, i, 1) then do;
	      substr (ans, k, 1) = xmode (t, i);
	      k = k + 1;
	      end;
	   end;

	if ans = "" then ans = "null";
	return (ans);

	end cmode;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


compare_acl:
	proc (p1, p2, n1, n2, prefix, acltype);

dcl (p1, p2) ptr,
    (n1, n2) fixed bin,
     prefix char (*),
     acltype fixed bin;

dcl  aclbit bit (n2),
    (i, j) fixed bin,
     tcount fixed bin;

	aclbit = "0"b;
	tcount = n2;

	nacl = max(n1,n2);
	do i = 1 to n1;
	   do j = 1 to n2;
	      if p1 -> aclval.access_name (i) = p2 -> aclval.access_name (j) then do;
	         substr (aclbit, j, 1) = "1"b;
	         tcount = tcount - 1;
	         if p1 -> aclval.modes (i) = p2 -> aclval.modes (j) then go to ACLOK;
	         if ^headed then call head;
	         call ioa_ ("^-^a for ^a changed from ^a  to  ^a",
		  prefix, p2 -> aclval.access_name (j),
		  cmode (p1 -> aclval.modes (i), acltype), cmode (p2 -> aclval.modes (j), acltype));
	         go to ACLOK;
	         end;
	      end;
	   if ^headed then call head;
	   call ioa_ ("^-^a deleted: ^a ^a",
	      prefix, cmode (p1 -> aclval.modes (i), acltype), p1 -> aclval.access_name (i));
ACLOK:	   end;

	do i = 1 to n2 while (tcount > 0);
	   if ^substr (aclbit, i, 1) then do;
	      tcount = tcount - 1;
	      if ^headed then call head;
	      call ioa_ ("^-^a added: ^a ^a",
	         prefix, cmode (p2 -> aclval.modes (i), acltype), p2 -> aclval.access_name (i));
	      end;
	   end;

	end compare_acl;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


datec:	proc (x) returns (char (24));

dcl  x bit (36);

dcl  datstr char (24);

	call date_time_$fstime ((x), datstr);
	return (datstr);

	end datec;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


head:	proc;

	headed = "1"b;
	call ioa_ ("^/modified:^-^a ^a", segtype (type1), en1);
	nchanges = nchanges + 1;

	end head;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


janitor:  proc();

	if fptr1 ^= null then
	   call hcs_$terminate_noname (fptr1, ec);
	if fptr2 ^= null then
	   call hcs_$terminate_noname (fptr2, ec);

	end janitor;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


volnc:	proc (x) returns (char (32) aligned);

dcl  x bit (36);

dcl  lvname char (32) aligned, code fixed bin (35);

	call mdc_$find_lvname (x, lvname, code);
	if code ^= 0 then call ioa_$rsnnl ("^w", lvname, code, x);
	return (lvname);

	end volnc;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


       end comp_dir_info;
