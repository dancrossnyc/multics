/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


list_dir_info_: proc (ap, am, apfx);

/* LIST_DIR_INFO_ - list directory info record

   THVV */
/* Modified 07/10/82 by Jim Lippard to only print 2 dir ring brackets */

dcl  ap ptr,					/* ptr to dir_info record */
     am fixed bin,					/* mode: 0 = brief, 1 = reg, 2 = long */
     apfx char (1);

dcl  nacl fixed bin,
     vmode fixed bin,
     pfx char (1) init (""),
     lvname char (32),
     xp ptr,
     code fixed bin (35),
    (i, j) fixed bin;

dcl  ioa_ entry options (variable),
     mdc_$find_lvname entry (bit (36), char (*), fixed bin (35)),
     date_time_$fstime entry (bit (36), char (*) aligned);


dcl (substr, binary, fixed) builtin;

%include saved_dir_info;

/* =====================================================  */

	xp = ap;
	vmode = am;
	pfx = apfx;
	j = binary (seg_rec.brstat.type);		/* Get record type */
	if j = 1 then do;
	     call ioa_ ("^anames:^-^a", pfx, seg_rec.names (1).name);
	     do i = 2 to binary (seg_rec.brstat.nnames);
		call ioa_ ("^a^-^a", pfx, seg_rec.names (i).name);
	     end;
	     call ioa_ ("^atype:^-^-segment", pfx);
	     call ioa_ ("^adate used:^-^a", pfx, datec (seg_rec.brstat.dtu));
	     call ioa_ ("^adate modified:^-^a", pfx, datec (seg_rec.brstat.dtm));
	     call ioa_ ("^adamaged switch:^-^[ON^;OFF^]", pfx, seg_rec.brstat.damaged);
	     if vmode < 1 then return;
	     call ioa_ ("^abranch modified:^-^a", pfx, datec (seg_rec.brstat.dtem));
	     call mdc_$find_lvname (seg_rec.lvid, lvname, code);
	     if code ^= 0 then call ioa_ ("^avolume:^-^-^w", pfx, seg_rec.lvid);
	     else call ioa_ ("^avolume:^-^-^a", pfx, lvname);
	     call ioa_ ("^arecords used:^-^d", pfx, fixed (binary (seg_rec.brstat.records), 35));
	     call ioa_ ("^abit count:^-^d", pfx, fixed (binary (seg_rec.brstat.bitcnt), 35));
	     call ioa_ ("^abit count author:^-^a", pfx, seg_rec.bc_author);
	     call ioa_ ("^amax length:^-^d", pfx, seg_rec.max_lth);
	     call ioa_ ("^asafety switch:^-^[ON^;OFF^]", pfx, seg_rec.ssw);
	     if vmode < 2 then return;
	     if seg_rec.nacls > 0 then do;
		call ioa_ ("^aACL:^-^-^5a ^a", pfx,
		     cmode (seg_rec.acls (1).modes, 1), seg_rec.acls (1).access_name);
		do i = 2 to seg_rec.nacls;
		     call ioa_ ("^a^-^-^5a ^a", pfx,
			cmode (seg_rec.acls (i).modes, 1), seg_rec.acls (i).access_name);
		end;
	     end;
	     call ioa_ ("^adate dumped:^-^a", pfx, datec (seg_rec.brstat.dtd));
	     call ioa_ ("^acurrent length:^-^d", pfx, fixed (binary (seg_rec.brstat.curlen), 35));
	     call ioa_ ("^acopy switch:^-^[ON^;OFF^]", pfx, seg_rec.brstat.copysw);
	     call ioa_ ("^atpd switch:^-^[ON^;OFF^]", pfx, seg_rec.brstat.tpd);
	     call ioa_ ("^aring brackets:^-^d,^d,^d", pfx, fixed (binary (seg_rec.brstat.rbs (0)), 35),
		fixed (binary (seg_rec.brstat.rbs (1)), 35), fixed (binary (seg_rec.brstat.rbs (2)), 35));
	     call ioa_ ("^aunique ID:^-^w", pfx, seg_rec.brstat.uid);
	     call ioa_ ("^aauthor:^-^-^a", pfx, seg_rec.author);
	end;
	else if j = 2 then do;
	     call ioa_ ("^anames:^-^a", pfx, dir_rec.names (1).name);
	     do i = 2 to binary (dir_rec.brstat.nnames);
		call ioa_ ("^a^-^a", pfx, dir_rec.names (i).name);
	     end;
	     call ioa_ ("^atype:^-^-directory", pfx);
	     call ioa_ ("^adate used:^-^a", pfx, datec (dir_rec.brstat.dtu));
	     call ioa_ ("^adate modified:^-^a", pfx, datec (dir_rec.brstat.dtm));
	     call mdc_$find_lvname (dir_rec.slvid, lvname, code);
	     if code ^= 0 then call ioa_ ("^asons volume:^-^w", pfx, dir_rec.slvid);
	     else call ioa_ ("^asons volume:^-^a", pfx, lvname);
	     call ioa_ ("^amaster dir:^-^[YES^;NO^]", pfx, dir_rec.brstat.mdir);
	     call ioa_ ("^adamaged switch:^-^[ON^;OFF^]", pfx, seg_rec.brstat.damaged);
	     if vmode < 1 then return;
	     call ioa_ ("^abranch modified:^-^a", pfx, datec (dir_rec.brstat.dtem));
	     call ioa_ ("^abit count:^-^d", pfx, fixed (binary (dir_rec.brstat.bitcnt), 35));
	     call ioa_ ("^arecords used:^-^d", pfx, fixed (binary (dir_rec.brstat.records), 35));
	     call ioa_ ("^aquota:^-^-^d", pfx, dir_rec.quota);
	     call ioa_ ("^adate dumped:^-^a", pfx, datec (dir_rec.brstat.dtd));
	     call ioa_ ("^acurrent length:^-^d", pfx, fixed (binary (dir_rec.brstat.curlen), 35));
               call ioa_ ("^aring brackets:^-^d,^d", pfx, fixed (binary (dir_rec.brstat.rbs (0)), 35),
                    fixed (binary (dir_rec.brstat.rbs (1)), 35));
	     call ioa_ ("^aunique ID:^-^w", pfx, dir_rec.brstat.uid);
	     call ioa_ ("^aauthor:^-^-^a", pfx, dir_rec.author);
	     call ioa_ ("^abit count author:^-^a", pfx, dir_rec.bc_author);
	     call ioa_ ("^amax length:^-^d", pfx, dir_rec.max_lth);
	     call ioa_ ("^asafety switch:^-^[ON^;OFF^]", pfx, dir_rec.ssw);
	     if vmode < 2 then return;
	     if dir_rec.nacls > 0 then do;
		call ioa_ ("^aACL:^-^-^5a ^a", pfx,
		     cmode (dir_rec.acls (1).modes, 2), dir_rec.acls (1).access_name);
		do i = 2 to dir_rec.nacls;
		     call ioa_ ("^a^-^-^5a ^a", pfx,
			cmode (dir_rec.acls (i).modes, 2), dir_rec.acls (i).access_name);
		end;
	     end;
	     if dir_rec.nisacls > 0 then do;
		call ioa_ ("^ainitial seg acl:^-^5a ^a", pfx,
		     cmode (dir_rec.isacls (1).modes, 1), dir_rec.isacls (1).access_name);
		do i = 2 to dir_rec.nisacls;
		     call ioa_ ("^a^-^-^5a ^a", pfx,
			cmode (dir_rec.isacls (i).modes, 1), dir_rec.isacls (i).access_name);
		end;
	     end;
	     if dir_rec.nidacls > 0 then do;
		call ioa_ ("^ainitial dir acl:^-^5a ^a", pfx,
		     cmode (dir_rec.idacls (1).modes, 2), dir_rec.idacls (1).access_name);
		do i = 2 to dir_rec.nidacls;
		     call ioa_ ("^a^-^-^5a ^a", pfx,
			cmode (dir_rec.idacls (i).modes, 2), dir_rec.idacls (i).access_name);
		end;
	     end;
	end;
	else if j = 0 then do;
	     call ioa_ ("^anames:^-^a", pfx, link_rec.names (1).name);
	     do i = 2 to binary (link_rec.brstat.nnames);
		call ioa_ ("^a^-^a", pfx, link_rec.names (i).name);
	     end;
	     call ioa_ ("^atype:^-^-link", pfx);
	     call ioa_ ("^alinks to:^-^-^a", pfx, link_rec.target);
	     if vmode < 1 then return;
	     call ioa_ ("^adate link modified:^-^a", pfx, datec (link_rec.brstat.dtem));
	     if vmode < 2 then return;
	     call ioa_ ("^alink dumped:^-^a", pfx, datec (link_rec.brstat.dtd));
	end;
	else do;
	     call ioa_ ("^aerror at ^p", pfx, xp);
	end;

	return;

/* ------------------------------------------------------- */

datec:	proc (x) returns (char (24) aligned);

dcl  x bit (36);

dcl  datstr char (24) aligned;

	     call date_time_$fstime (x, datstr);
	     return (datstr);

	end datec;

cmode:	proc (x, t) returns (char (5) aligned);

dcl  x bit (36) aligned;
dcl  t fixed bin;

dcl  ans char (5) aligned;

dcl (i, k) fixed bin;
dcl  xmode (2, 5) int static char (1) init ("r", "e", "w", "a", "", "s", "m", "a", "", "");

	     k = 1;
	     ans = "";
	     do i = 1 to 5;
		if substr (x, i, 1) then do;
		     substr (ans, k, 1) = xmode (t, i);
		     k = k + 1;
		end;
	     end;

	     if ans = "" then ans = "null";
	     return (ans);

	end cmode;

     end list_dir_info_;
