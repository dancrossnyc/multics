/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


rebuild_dir:
	proc;


	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* rebuild_dir - rebuild a partially clobbered directory from a dir_info segment.	*/
	/* Comments on missing segments: remakes directories or links.			*/
	/*									*/
	/* Status:								*/
	/*									*/
	/* 0) Created  May, 1973 by T. H. VanVleck					*/
	/* 1) Modified Sept, 1982 by Jim Lippard to to not fault on "rebuild_dir >".		*/
	/* 2) Modified Oct, 1982 by G. C. Dixon - modernize code.				*/
	/* 3) Modified Dec, 1984 by Keith Loepere - dir_quota.
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

dcl  ap ptr,					/* ptr to arg */
     al fixed bin (21),				/* length of arg */
     an fixed bin,
     bchr char (al) unal based (ap),			/* pickup for argument */
     bitc fixed bin (24),
     datstr char (24),
     dn char (168),
     dnen char (168),
     ec fixed bin (35),				/* error code */
     en char (32),
     fdir char (168),
     fent char (32),
    (i, j) fixed bin,
     loud bit (1),
     my_userid char (32),
     privmode bit (1),
     rings (3) fixed bin,
     xp ptr,
     verbosity fixed bin init (1);

dcl (addr, binary, fixed, index, null, ptr, unspec) builtin;

dcl (cleanup, linkage_error) condition;

dcl 1 brsbuf aligned,				/* auto storage for main dir branch */
    2 type bit (2) unal,
    2 nnames bit (16) unal,
    2 nrp bit (18) unal,
    2 dtm bit (36) unal,
    2 dtu bit (36) unal,
    2 mode bit (5) unal,
    2 padding bit (13) unal,
    2 records bit (18) unal,
    2 dtd bit (36) unal,
    2 dtem bit (36) unal,
    2 acct bit (36) unal,
    2 curlen bit (12) unal,
    2 bitcnt bit (24) unal,
    2 did bit (4) unal,
    2 mdid bit (4) unal,
    2 copysw bit (1) unal,
    2 pad2 bit (9) unal,
    2 rbs (0:2) bit (6) unal,
    2 uid bit (36) unal;

dcl 1 dir_acl (50) aligned,
    2 access_name char (32),
    2 modes bit (36),
    2 statuscode fixed bin (35);

dcl 1 segment_acl (100) aligned,
    2 access_name char (32),
    2 modes bit (36),
    2 mbz bit (36),
    2 statuscode fixed bin (35);

dcl  com_err_ entry options (variable),
     cu_$arg_ptr entry (fixed bin, ptr, fixed bin(21), fixed bin(35)),
     cu_$level_get entry (fixed bin),
     date_time_ entry (fixed bin (71), char (*)),
     expand_pathname_ entry (char(*), char(*), char(*), fixed bin(35)),
     expand_pathname_$add_suffix entry (char(*), char(*), char(*), char(*), fixed bin(35)),
     get_group_id_$tag_star entry() returns(char(32)),
     hcs_$append_link entry (char(*), char(*), char(*), fixed bin(35)),
     hcs_$chname_file entry (char(*), char(*), char(*), char(*), fixed bin(35)),
     hcs_$create_branch_ entry (char(*), char(*), ptr, fixed bin(35)),
     hcs_$initiate_count entry (char(*), char(*), char(*), fixed bin(24), fixed bin(2), ptr, fixed bin(35)),
     hcs_$quota_move entry (char(*), char(*), fixed bin(18), fixed bin(35)),
     hcs_$replace_acl entry (char(*), char(*), ptr, fixed bin, bit(1), fixed bin(35)),
     hcs_$replace_dir_acl entry (char(*), char(*), ptr, fixed bin, bit(1), fixed bin(35)),
     hcs_$replace_dir_inacl entry (char(*), char(*), ptr, fixed bin, bit(1) aligned, fixed bin(3),
	fixed bin(35)),
     hcs_$replace_inacl entry (char(*), char(*), ptr, fixed bin, bit(1), fixed bin(3), fixed bin(35)),
     hcs_$set_max_length entry (char(*), char(*), fixed bin(19), fixed bin(35)),
     hcs_$set_safety_sw entry (char(*), char(*), bit(1), fixed bin(35)),
     hcs_$status_long entry (char(*), char(*), fixed bin(1), ptr, ptr, fixed bin(35)),
     hcs_$terminate_noname entry (ptr, fixed bin(35)),
     hphcs_$quota_set entry (char(*), fixed bin (18), fixed bin (35)),
     hphcs_$set_sons_lvid entry (char (*), char (*), bit (36), fixed bin (35)),
     ioa_ entry options (variable),
     list_dir_info_ entry (ptr, fixed bin, char(1)),
     pathname_ entry (char(*), char(*)) returns(char(168));

dcl (error_table_$action_not_performed,
     error_table_$bad_arg,
     error_table_$badopt,
     error_table_$improper_data_format,
     error_table_$moderr,
     error_table_$noentry,
     error_table_$root,
     error_table_$segnamedup) fixed bin(35) ext static;
dcl  sys_info$default_max_length fixed bin (19) ext static;

%include saved_dir_info;

%include create_branch_info;
dcl 1 cbi like create_branch_info aligned;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


	call cu_$arg_ptr (1, ap, al, ec);
	if ec ^= 0 then do;
	   call com_err_ (ec, "rebuild_dir", "
Usage: rebuild_dir dir_info_path {-control_args}
Args:  -brief, -bf
       -long, -lg 
       -priv");
	   return;
	   end;
	call expand_pathname_$add_suffix (bchr, "dir_info", fdir, fent, ec);
	if ec ^= 0 then do;
	   call com_err_ (ec, "rebuild_dir", "^a", bchr);
	   return;
	   end;

	call cu_$level_get (rings (1));
	rings (2), rings (3) = rings (1);
	my_userid = get_group_id_$tag_star ();
	loud = "1"b;
	privmode = "0"b;
	ec = 0;
	do an = 2 by 1 while (ec = 0);
	   call cu_$arg_ptr (an, ap, al, ec);
	   if ec = 0 then do;
	      if bchr = "-brief" | bchr = "-bf" then do;
	         verbosity = 0;
	         loud = "0"b;
	         end;
	      else if bchr = "-long" | bchr = "-lg" then do;
	         verbosity = 2;
	         loud = "1"b;
	         end;
	      else if bchr = "-priv" then privmode = "1"b;
	      else do;
	         if index(bchr,"-") = 1 then
		  ec = error_table_$badopt;
	         else
		  ec = error_table_$bad_arg;
	         call com_err_ (ec, "rebuild_dir", "^a", bchr);
	         return;
	         end;
	      end;
	   end;

	fptr = null;
	on cleanup call janitor();

	call hcs_$initiate_count (fdir, fent, "", bitc, 0, fptr, ec);
	if fptr = null then do;
	   call com_err_ (ec, "rebuild_dir", "Accessing dir_info segment
(^a^[>^]^a).", fdir, fdir^=">", fent);
	   return;
	   end;

	if fseg.fpath = ">" then do;
	   call com_err_ (error_table_$root, "rebuild_dir", ">
The root directory cannot be rebuilt.");
	   go to EXIT;
	   end;

	call date_time_ (fseg.timeof, datstr);
	call ioa_ ("
Rebuilding:          ^a
from snapshot taken: ^a", fseg.fpath, datstr);

	xp = addr (fseg.ffirst);
	if dir_rec.type ^= "10"b then do;		/* make sure dir is first */
	   call com_err_ (error_table_$improper_data_format,  "rebuild_dir",
	      "Type of first entry is not directory in saved dir_info segment
(^a^[>^]^a).", fdir, fdir^=">", fent);
	   go to EXIT;
	   end;
	call expand_pathname_ (fseg.fpath, dn, en, ec);
	if ec ^= 0 then do;
	   call com_err_ (ec, "rebuild_dir", "^a
Error in pathname of containing directory saved in dir_info segment
(^a^[>^]^a).", fseg.fpath, fdir, fdir^=">", fent);
	   go to EXIT;
	   end;
	go to CASE(2);

NXTFILE:	j = binary (seg_rec.brstat.type);		/* Get record type */
	if 0 <= j & j <= 2 then;
	else do;
	   call com_err_ (error_table_$improper_data_format, "rebuild_dir",
	      "Error at ^p in saved dir info segment
(^a^[>^]^a).", xp, fdir, fdir^=">", fent);
	   go to EXIT;
	   end;
	go to CASE(j);

CASE(1):	en = seg_rec.names (1).name;			/* SEGMENT */
	call hcs_$status_long (dn, en, 0, addr (brsbuf), null, ec);
	if ec = 0 then
	   if brsbuf.type = "01"b then do;
	      call hcs_$set_safety_sw (dn, en, seg_rec.ssw, ec);
	      if seg_rec.nacls > 0 then do;
	         do i = 1 to seg_rec.nacls;
		  segment_acl (i).access_name = seg_rec.acls (i).access_name;
		  segment_acl (i).modes = seg_rec.acls (i).modes;
		  segment_acl (i).mbz = "0"b;
		  end;
	         call hcs_$replace_acl (dn, en, addr (segment_acl), seg_rec.nacls, "0"b, ec);
	         if ec ^= 0 then
		  call com_err_ (ec, "rebuild_dir", "Cannot replace acl on ^a", en);
	         end;
	      do i = 2 to binary (seg_rec.brstat.nnames);
	         call hcs_$chname_file (dn, en, "", (seg_rec.names (i).name), ec);
	         if ec ^= 0 then
	         if ec ^= error_table_$segnamedup then
		  call com_err_ (ec, "rebuild_dir",
		     "Cannot add name ^a to seg ^a",
		     seg_rec.names (i).name, en);
	         end;
	      if seg_rec.max_lth ^= sys_info$default_max_length
	         then call hcs_$set_max_length (dn, en, seg_rec.max_lth, ec);
	      end;
	   else
	      call com_err_ (error_table_$action_not_performed,
	         "rebuild_dir",
	         "Type mismatch: entry ^a was a segment, now a ^[link^;^;directory^;BAD-TYPE^].",
	         en, binary(brsbuf.type,2,0)+1b);
	else do;
	   call com_err_ (ec, "rebuild_dir", "missing seg ^a", en);
	   if loud then call list_dir_info_ (xp, verbosity, "	");
	   end;
	go to SKIP;

CASE(2):	en = dir_rec.names (1).name;			/* DIRECTORY */
	call hcs_$status_long (dn, en, 0, addr (brsbuf), null, ec);
	if ec = error_table_$noentry then do;
	   if loud then call ioa_ ("Adding directory ^a", en);
	   unspec (cbi) = "0"b;
	   cbi.version = create_branch_version_2;
	   cbi.switches.dir_sw = "1"b;
	   cbi.parent_ac_sw = "1"b;			/* For Now */
	   cbi.mode = "111"b;
	   cbi.userid = my_userid;
	   cbi.bitcnt = fixed (dir_rec.bitcnt, 24);
	   cbi.rings (1) = rings (1);
	   cbi.rings (2) = rings (2);
	   cbi.rings (3) = rings (3);
	   cbi.quota = 0;				/* Set below */
	   cbi.dir_quota = 0;
	   call hcs_$create_branch_ (dn, en, addr (cbi), ec);
	   if ec ^= 0 then do;
	      call com_err_ (ec, "rebuild_dir", "Cannot add directory ^a", en);
	      if dn ^= fseg.fpath then go to EXIT;
	      go to SKIP;
	      end;
	   end;
	else if ec ^= 0 then do;
	   call com_err_ (ec, "rebuild_dir", "Cannot get status for ^a>^a", dn, en);
	   go to SKIP;
	   end;
	else if brsbuf.type ^= "10"b then do;
	   call com_err_ (error_table_$action_not_performed,
	      "rebuild_dir",
	      "Type mismatch: entry ^a was a directory, now a ^[link^;segment^;^;BAD-TYPE^].",
	      en, binary(brsbuf.type,2,0)+1b);
	   go to SKIP;
	   end;
	call hcs_$set_safety_sw (dn, en, dir_rec.ssw, ec);
	do i = 2 to binary (dir_rec.brstat.nnames);
	   call hcs_$chname_file (dn, en, "", (dir_rec.names (i).name), ec);
	   if ec ^= 0 then
	   if ec ^= error_table_$segnamedup then
	      call com_err_ (ec, "rebuild_dir",
	         "Cannot add name ^a to dir ^a", dir_rec.names (i).name, en);
	   end;
	if dir_rec.slvid ^= "0"b then do;
	   if privmode then do;
	      on linkage_error begin;
	         privmode = "0"b;
	         call com_err_ (error_table_$moderr, "rebuild_dir",
		  "Cannot set sons logical volume id on ^a.
This requires access to the hphcs_ gate.", en);
	         go to SKIP_SONS_LVID;
	         end;
	      call hphcs_$set_sons_lvid (dn, en, dir_rec.slvid, ec);
SKIP_SONS_LVID:
	      revert linkage_error;
	      end;
	   end;
	ec = 0;
	if dir_rec.quota ^= 0 then do;
	   if privmode then do;
	      dnen = pathname_ (dn, en);
	      on linkage_error begin;
	         privmode = "0"b;
	         call com_err_ (error_table_$moderr, "rebuild_dir",
"Cannot set quota on ^a. This requires access to the hphcs_ gate.", en);
	         go to SKIP_SET_QUOTA;
	         end;
	      call hphcs_$quota_set (dnen, dir_rec.quota, ec);
SKIP_SET_QUOTA: revert linkage_error;
	      end;
	   else call hcs_$quota_move (dn, en, dir_rec.quota, ec);
	   if ec ^= 0 then call com_err_ (ec, "rebuild_dir", "Unable to set quota ^d on ^a", dir_rec.quota, en);
	   end;

	if dir_rec.nacls > 0 then do;			/* Problem here: might remove own access on first item */
	   do i = 1 to dir_rec.nacls;
	      dir_acl (i).access_name = dir_rec.acls (i).access_name;
	      dir_acl (i).modes = dir_rec.acls (i).modes;
	      end;
	   call hcs_$replace_dir_acl (dn, en, addr (dir_acl), dir_rec.nacls, "0"b, ec);
	   if ec ^= 0 then call com_err_ (ec, "rebuild_dir", "Cannot replace acl on ^a", en);
	   end;
	if dir_rec.nisacls > 0 then do;
	   do i = 1 to dir_rec.nisacls;
	      segment_acl (i).access_name = dir_rec.isacls (i).access_name;
	      segment_acl (i).modes = dir_rec.isacls (i).modes;
	      segment_acl (i).mbz = "0"b;
	      end;
	   call hcs_$replace_inacl (dn, en, addr (segment_acl), dir_rec.nisacls, "0"b, 4, ec);
	   if ec ^= 0 then call com_err_ (ec, "rebuild_dir", "Cannot replace seg iacl on ^a", en);
	   end;
	if dir_rec.nidacls > 0 then do;
	   do i = 1 to dir_rec.nidacls;
	      dir_acl (i).access_name = dir_rec.idacls (i).access_name;
	      dir_acl (i).modes = dir_rec.idacls (i).modes;
	      end;
	   call hcs_$replace_dir_inacl (dn, en, addr (dir_acl), dir_rec.nidacls, "0"b, 4, ec);
	   if ec ^= 0 then call com_err_ (ec, "rebuild_dir", "Cannot replace dir inacl on ^a", en);
	   end;
	go to SKIP;


CASE(0):	en = link_rec.names (1).name;			/* LINK */
	call hcs_$status_long (dn, en, 0, addr (brsbuf), null, ec);
	if ec = 0 then if brsbuf.type = "00"b then go to LINK_MERGE;
	if loud then call ioa_ ("Adding link ^a", en);
	call hcs_$append_link (dn, en, (link_rec.target), ec);
	if ec ^= 0 then do;
	   call com_err_ (ec, "rebuild_dir", "Cannot append link ^a", en);
	   go to SKIP;
	   end;
LINK_MERGE:
	do i = 2 to binary (link_rec.brstat.nnames);
	   call hcs_$chname_file (dn, en, "", (link_rec.names (i).name), ec);
	   if ec ^= 0 then
	   if ec ^= error_table_$segnamedup then
	      call com_err_ (ec, "rebuild_dir",
	         "Cannot add name ^a to link ^a", 
	         link_rec.names (i).name, en);
	   end;
	go to SKIP;

SKIP:	dn = fseg.fpath;
	if seg_rec.fnext then do;
	     xp = ptr (xp, seg_rec.fnext);
	     go to NXTFILE;
	end;

	call ioa_ ("Rebuilding complete: ^a", fseg.fpath);
EXIT:	call janitor();
	return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


janitor:	proc;

	if fptr ^= null then
	     call hcs_$terminate_noname (fptr, ec);

	end janitor;

     end rebuild_dir;
