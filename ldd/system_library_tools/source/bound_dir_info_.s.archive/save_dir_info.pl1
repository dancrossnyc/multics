/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(86-10-20,TLNguyen), approve(86-10-22,MCR7559),
     audit(86-10-22,Gilcrease), install(86-10-22,MR12.0-1196):
     Fix bug which occurs for directories off the root.
                                                   END HISTORY COMMENTS */


save_dir_info:
	proc;


	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* Name: save_dir_info							*/
	/*									*/
	/* Copy directory info into a segment for later comparison/checking			*/
	/*									*/
	/* Status:								*/
	/* 0) Created:   May, 1973 by THVV						*/
	/* 1) Modified:  Sept, 1982 by Jim Lippard - fix bugs				*/
	/*	       a) properly store only 2 dir ring brackets, instead of 3		*/
	/*	       b) delete .dir_info seg if error occurs listing the directory		*/
	/*	       c) print full pathname of directory on which error occurs		*/
	/* 2) Modified:  August 1983 by Jim Lippard to chase links			          */
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

dcl  aclp ptr,
     al fixed bin(21),				/* length of arg */
     ap ptr,					/* ptr to argument */
     areap ptr,					/* ptr to listener area, for star */
     bitc fixed bin (24),
     branch_type fixed bin (2),
     d35 fixed bin (35), d1 fixed bin (1),		/* dummies */
     db36 bit(36) aligned,
     dirname char (168),
     ec fixed bin (35),				/* error code */
     en char (32),
     ep ptr,
     fdir char (168),
     fent char (32),
    (i, j, k) fixed bin,
     LINK fixed bin (2) internal static options (constant) init (0),
     ll fixed bin,					/* number of links */
     nacl fixed bin,
     nargs fixed bin,
     np ptr,
     nptr ptr,
     p ptr,					/* ptr to entry returned by star */
     ring fixed bin (3) init (4),
     t fixed bin,					/* number of branches */
     target_dn char (168),
     target_en char (32),
     tdir char (168),
    (xp, xxp, oldxp, next_xp) ptr,
     why char (168) aligned init ("");

dcl (addr, bit, clock, fixed, null, ptr, rel) builtin;

dcl  cleanup condition;

dcl (error_table_$incorrect_access,
     error_table_$root) fixed bin(35) ext static;

dcl  arg char(al) based(ap);

dcl 1 brsbuf aligned,				/* auto storage for main dir branch */
    2 type bit (2) unal,
    2 nnames bit (16) unal,
    2 nrp bit (18) unal,
    2 dtm bit (36) unal,
    2 dtu bit (36) unal,
    2 mode bit (5) unal,
    2 padding bit (13) unal,
    2 records bit (18) unal,
    2 dtd bit (36) unal,
    2 dtem bit (36) unal,
    2 acct bit (36) unal,
    2 curlen bit (12) unal,
    2 bitcnt bit (24) unal,
    2 did bit (4) unal,
    2 mdid bit (4) unal,
    2 copysw bit (1) unal,
    2 pad2 bit (9) unal,
    2 rbs (0:2) bit (6) unal,
    2 uid bit (36) unal;

dcl 1 branches based aligned,				/* structure returned by star for branch */
    2 type bit (2) unal,				/* type of branch */
    2 nname bit (16) unal,				/* number of names */
    2 nindex bit (18) unal,				/* index in name area */
    2 dtm bit (36) unal,				/* date & time modified */
    2 dtu bit (36) unal,				/* ... used */
    2 mode bit (5) unal,				/* mode w.r.t. me */
    2 pad bit (13) unal,
    2 records bit (18) unal;				/* lth */

dcl  names (100) char (32) aligned based;		/* names from star */

dcl  entries (100) bit (144) aligned based;		/* entry structure from star */

dcl  linkpath char (j) based (np);

dcl 1 segment_acl (nacl) based (aclp) aligned,
    2 access_name char (32),
    2 modes bit (36),
    2 mbz bit (36),
    2 statuscode fixed bin (35);

dcl 1 dir_acl (nacl) based (aclp) aligned,
    2 access_name char (32),
    2 modes bit (36),
    2 statuscode fixed bin (35);

dcl  dummy_area area ((1024)) based (areap);

dcl  absolute_pathname_ entry (char(*), char(*), fixed bin(35)),
     com_err_ entry options (variable),
     cu_$arg_count entry (fixed bin, fixed bin(35)),
     cu_$arg_ptr entry (fixed bin, ptr, fixed bin(21), fixed bin(35)),
     delete_$ptr entry (ptr, bit(6), char(*), fixed bin(35)),
     expand_pathname_ entry (char(*), char(*), char(*), fixed bin(35)),
     expand_pathname_$add_suffix entry (char(*), char(*), char(*), char(*), fixed bin(35)),
     get_system_free_area_ entry (ptr),
     get_wdir_ entry () returns (char (168));

dcl  hcs_$get_author entry (char(*), char(*), fixed bin(1), char(*), fixed bin(35));
dcl  hcs_$get_bc_author entry (char(*), char(*), char(*), fixed bin(35));
dcl  hcs_$get_link_target entry (char(*), char(*), char(*), char(*), fixed bin(35));
dcl  hcs_$get_max_length entry (char(*), char(*), fixed bin (19), fixed bin (35));
dcl  hcs_$get_safety_sw entry (char(*), char(*), bit(1), fixed bin(35));
dcl  hcs_$list_acl entry (char(*), char(*), ptr, ptr, ptr, fixed bin, fixed bin(35));
dcl  hcs_$list_dir_acl entry (char(*), char(*), ptr, ptr, ptr, fixed bin, fixed bin(35));
dcl  hcs_$list_dir_inacl entry (char(*), char(*), ptr, ptr, ptr, fixed bin, fixed bin(3), fixed bin(35));
dcl  hcs_$list_inacl entry (char(*), char(*), ptr, ptr, ptr, fixed bin, fixed bin(3), fixed bin(35));
dcl  hcs_$make_seg entry (char(*), char(*), char(*), fixed bin(5), ptr, fixed bin(35));
dcl  hcs_$quota_get entry (char(*), fixed bin (18), fixed bin(35), bit(36) aligned, fixed bin, fixed bin(1),
	fixed bin, fixed bin(35));
dcl  hcs_$set_bc_seg entry (ptr, fixed bin(24), fixed bin(35));
dcl  hcs_$star_list_ entry (char(*), char(*), fixed bin(3), ptr, fixed bin, fixed bin, ptr, ptr, fixed bin(35));
dcl  hcs_$status_long entry (char(*), char(*), fixed bin(1), ptr, ptr, fixed bin(35));
dcl  hcs_$status_minf entry (char(*), char(*), fixed bin(1), fixed bin(2), fixed bin(24), fixed bin(35));
dcl  hcs_$terminate_noname entry (ptr, fixed bin(35));
dcl  hcs_$truncate_seg entry (ptr, fixed bin(19), fixed bin(35));

dcl  pathname_ entry (char(*), char(*)) returns(char(168));

%include saved_dir_info;

%include access_mode_values;

/* ======================================================= */

	call cu_$arg_count (nargs, ec);
	if ec ^= 0 then do;
	     call com_err_ (ec, "save_dir_info");
	     return;
	     end;

	call cu_$arg_ptr (1, ap, al, ec);
	if ec ^= 0 then do;
er:	     call com_err_ (ec, "save_dir_info", "^a", why);
	     return;
	     end;
	call absolute_pathname_ (arg, tdir, ec);
	call expand_pathname_ (arg, dirname, en, ec);
	if ec ^= 0 then go to er;
	call hcs_$status_minf (dirname, en, 0, branch_type, 0, ec);
          if ec ^= 0 & ec ^= error_table_$root then do;
	     why = pathname_ (dirname, en);
	     go to er;
	     end;
	if branch_type = LINK then do;                          /* a link to chase */
	     call hcs_$get_link_target (dirname, en, target_dn, target_en, ec);
	     if ec ^= 0 then do;
		why = pathname_ (dirname, en);
		go to er;
		end;
	     dirname = target_dn;
	     en = target_en;
	 end;

	call cu_$arg_ptr (2, ap, al, ec);
	if ec ^= 0 then do;
	     if en = "" then
		fdir = pathname_ (get_wdir_(), "root");
	     else fdir = pathname_ (get_wdir_(), en);
	     end;
	else fdir = arg;
	call expand_pathname_$add_suffix (fdir, "dir_info", fdir, fent, ec);
	if ec ^= 0 then do;
	     why = fdir;
	     go to er;
	     end;

	fptr = null;
	ep = null;
	nptr = null;
	on cleanup call janitor();
	
          why = fent;
	call hcs_$make_seg (fdir, fent, "", 1011b, fptr, ec);
	if fptr = null then go to error_exit;
	call hcs_$truncate_seg (fptr, 0, ec);
	if ec ^= 0 then go to error_exit;
	fseg.fpath = tdir;
	fseg.timeof = clock();
	xp = addr (fseg.ffirst);
	oldxp = null;

	call get_system_free_area_ (areap);		/* obtain area */

	p = addr (brsbuf);
	why = tdir;
	if en = "" then do;				/* Need special code for the root. */
	     dir_rec.type = "10"b;
	     dir_rec.bc_author, dir_rec.author = "Initializer.SysDaemon.z";
	     dir_rec.max_lth = 0;
	     dir_rec.ssw = "0"b;
	     call hcs_$quota_get (tdir, dir_rec.quota, d35, db36, j, d1, j, ec);
	     dir_rec.nacls = 0;
	     dir_rec.nisacls = 0;
	     dir_rec.nidacls = 0;
	     dir_rec.n_names = 1;
	     tp = addr (dir_rec.names);
	     tp -> names (1) = ">";
	     next_xp = addr (dir_rec.end_dir_rec);
	     dir_rec.fnext = rel (next_xp);
	     oldxp = xp;
	     xp = next_xp;
	     end;
	else do;
	     call hcs_$status_long (dirname, en, 0, p, areap, ec);
	     if ec ^= 0 then go to error_exit;
	     if brsbuf.mode & bit(S_ACCESS_BIN) then;	/* complain now if user has no s access to dir	*/
	     else do;				/* being saved.				*/
	        ec = error_table_$incorrect_access;
	        go to error_exit;
	        end;
	     k = 1;
	     nptr = ptr (areap, brsbuf.nrp);
	     call sdir;
	     if ec ^= 0 then go to error_exit;
	     free nptr -> names in (dummy_area);
	     end;

	dirname = tdir;
	call hcs_$star_list_ (dirname, "**", 3, areap, t, ll, ep, nptr, ec);
	if ec = 0 then do;
	     do i = 1 to t + ll;
		p = addr (ep -> entries (i));
		k = fixed (p -> branches.nindex, 18);
		en = nptr -> names (k);
		j = fixed (p -> branches.type);
		if j = 1 then call sseg;
		else if j = 0 then call slink;
		else if j = 2 then call sdir;
		if ec ^= 0 then 
		     call com_err_ (ec, "save_dir_info", "^a^[>^]^a", dirname, (dirname ^= ">"), en);
		fseg.nents = fseg.nents + 1;
		end;
	     free ep -> entries in (dummy_area);	/* free up area */
	     free nptr -> names in (dummy_area);	/* ... */
	     end;
	if oldxp ^= null then oldxp -> seg_rec.fnext = "0"b;
	fseg.freep = fixed (rel (next_xp), 18);
	bitc = 36 * fseg.freep;
	call hcs_$set_bc_seg (fptr, bitc, ec);
	call hcs_$terminate_noname (fptr, ec);

	return;

error_exit:
	call com_err_ (ec, "save_dir_info", why);
	call janitor();
	return;

/* ------------------------------------------------------  */

janitor:	proc;

	if ep ^= null then free ep -> entries in (dummy_area);
	if nptr ^= null then free nptr -> names in (dummy_area);
	if fptr ^= null then
	   call delete_$ptr (fptr, "000100"b, "save_dir_info", ec);

	end janitor;



sseg:	proc;

	     ec = 0;
	     xxp = addr (seg_rec.brstat);
	     call hcs_$status_long (dirname, en, 0, xxp, null, ec);
	     if ec ^= 0 then return;
	     call hcs_$get_bc_author (dirname, en, seg_rec.bc_author, ec);
	     call hcs_$get_author (dirname, en, 0, seg_rec.author, ec);
	     call hcs_$get_max_length (dirname, en, seg_rec.max_lth, ec);
	     call hcs_$get_safety_sw (dirname, en, seg_rec.ssw, ec);
	     call hcs_$list_acl (dirname, en, areap, aclp, null, nacl, ec);
	     seg_rec.nacls = nacl;
	     tp = addr (seg_rec.acls);
	     do j = 1 to nacl;
		aclval.access_name (j) = segment_acl.access_name (j);
		aclval.modes (j) = segment_acl.modes (j);
		end;
	     if nacl > 0 then free aclp -> segment_acl in (dummy_area);
	     seg_rec.n_names = fixed (p -> branches.nname, 16);
	     tp = addr (seg_rec.names);
	     do j = 1 to seg_rec.n_names;
		tp -> names (j) = nptr -> names (j+k-1);
		end;
	     next_xp = addr (seg_rec.end_seg_rec);
	     seg_rec.fnext = rel (next_xp);
	     oldxp = xp;
	     xp = next_xp;

	end sseg;

sdir:	proc;

dcl  tdir char (168);

	     ec = 0;
	     xxp = addr (dir_rec.brstat);
	     call hcs_$status_long (dirname, en, 0, xxp, null, ec);
	     if ec ^= 0 then return;
	     dir_rec.pad3 = "07"b3;
	     call hcs_$get_safety_sw (dirname, en, dir_rec.ssw, ec);
/* fixed bug for TR#20502 */
               tdir = pathname_ (dirname, en);
/* ending of bug fixes */
	     call hcs_$quota_get (tdir, dir_rec.quota, d35, db36, j, d1, j, ec);
	     if ec ^= 0 then call com_err_ (ec, "save_dir_info", "Cannot get quota of ^a", en);
	     call hcs_$get_bc_author (dirname, en, dir_rec.bc_author, ec);
	     call hcs_$get_author (dirname, en, 0, dir_rec.author, ec);
	     call hcs_$list_dir_acl (dirname, en, areap, aclp, null, nacl, ec);
	     dir_rec.nacls = nacl;
	     tp = addr (dir_rec.acls);
	     do j = 1 to nacl;
		aclval (j).access_name = dir_acl (j).access_name;
		aclval (j).modes = dir_acl (j).modes;
		end;
	     if nacl > 0 then free aclp -> dir_acl in (dummy_area);
	     call hcs_$list_inacl (dirname, en, areap, aclp, null, nacl, ring, ec);
	     if ec ^= 0 then do;
		call com_err_ (ec, "save_dir_info", "Cannot list inacl of ^a", en);
		go to gnam;
		end;
	     dir_rec.nisacls = nacl;
	     tp = addr (dir_rec.isacls);
	     do j = 1 to nacl;
		aclval (j).access_name = segment_acl.access_name (j);
		aclval (j).modes = segment_acl.modes (j);
		end;
	     if nacl > 0 then free aclp -> dir_acl in (dummy_area);
	     call hcs_$list_dir_inacl (dirname, en, areap, aclp, null, nacl, ring, ec);
	     dir_rec.nidacls = nacl;
	     tp = addr (dir_rec.idacls);
	     do j = 1 to nacl;
		aclval (j).access_name = dir_acl.access_name (j);
		aclval (j).modes = dir_acl.modes (j);
		end;
	     if nacl > 0 then free aclp -> dir_acl in (dummy_area);

gnam:	     dir_rec.n_names = fixed (p -> branches.nname, 16);
	     tp = addr (dir_rec.names);
	     do j = 1 to dir_rec.n_names;
		tp -> names (j) = nptr -> names (j+k-1);
		end;
	     next_xp = addr (dir_rec.end_dir_rec);
	     dir_rec.fnext = rel (next_xp);
	     oldxp = xp;
	     xp = next_xp;

	end sdir;

slink:	proc;

	     link_rec.n_names = fixed (p -> branches.nname, 16);
	     tp = addr (link_rec.names);
	     do j = 1 to link_rec.n_names;
		tp -> names (j) = nptr -> names (j+k-1);
		end;
	     ec = 0;
	     xxp = addr (link_rec.brstat);
	     call hcs_$status_long (dirname, en, 0, xxp, areap, ec);
	     if ec ^= 0 then return;
	     j = fixed (link_rec.brstat.pnl, 18);
	     np = ptr (areap, link_rec.brstat.pnrp);
	     link_rec.target = linkpath;
	     np = ptr (areap, link_rec.nrp);
	     free np -> names in (dummy_area);
	     next_xp = addr (link_rec.end_link_rec);
	     link_rec.fnext = rel (next_xp);
	     oldxp = xp;
	     xp = next_xp;

	end slink;

     end save_dir_info;
