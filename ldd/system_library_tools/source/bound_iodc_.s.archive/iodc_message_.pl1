/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


iodc_message_: proc (a_severity, err_code, message);

/* Procedure for writing error and other messages for the I/O coordinator, both
   *  on the log and to "users" (i.e. on error_output and user_output).
*/

/* Coded August 1973 by Robert S. Coren */
/* Modified by J. Stern, 2/10/75 to combine with iod_set_streams_ */
/* Modified by J. Stern, 12/4/75 to eliminate log output except through mrd_ */

dcl  a_severity bit (3) aligned;			/* bit 0 = log, bit 1 = user_output, bit 2 = error_output */
dcl  err_code fixed bin (35);
dcl  message char (*);

dcl  severity bit (3) aligned;
dcl  short char (8) aligned;
dcl  long char (100) aligned;
dcl  out_msg char (300) aligned;
dcl  out_len fixed bin;
dcl  time_string char (16) aligned;
dcl  bells char (10) int static init ((10)"");		/* BEL (007) chars */
dcl  stars char (30) int static init ((30)"*");

dcl  bell_out char (10);
dcl (star1, star2) char (31);
dcl  nl char (1) int static init ("
");						/* new-line char. */


dcl  clock_ entry returns (fixed bin (71));
dcl  date_time_ entry (fixed bin (71), char (*) aligned);
dcl  convert_status_code_ entry (fixed bin (35), char (8) aligned, char (100) aligned);
dcl  ioa_ entry options (variable);
dcl  ioa_$ioa_stream entry options (variable);
dcl  ioa_$rsnnl entry options (variable);

dcl  substr builtin;



	star1, star2, bell_out = "";
join:
	if err_code ^= 0 then do;
	     call convert_status_code_ (err_code, short, long);
	     call ioa_$rsnnl ("^a^/^a", out_msg, out_len, long, message);
	end;

	else out_msg = message;


	severity = a_severity;
	if no_log then				/* don't write on log_output */
	     if substr (severity, 1, 1) then do;
		substr (severity, 1, 1) = "0"b;
		if substr (severity, 2, 2) then;	/* message was not for log_output only */
		else substr (severity, 2, 1) = "1"b;	/* write it on user_output */
	     end;

	if substr (severity, 1, 1)
	then call ioa_$ioa_stream ("log_output", "^a^a^a", star1, out_msg, star2);

	if substr (severity, 2, 1) then call ioa_ ("^a^a^a^a", bell_out, star1, out_msg, star2);

	if substr (severity, 3, 1) then call ioa_$ioa_stream ("error_output", "^a^a^a^a", bell_out, star1, out_msg, star2);

	return;



loud:	entry (a_severity, err_code, message);

	star1 = stars || nl;
	star2 = nl || stars;
	bell_out = bells;
	go to join;



init:	entry;

/* This entry, formerly called iod_set_streams_, makes sure that
   *  appropriate stream attachments are made through the message coordinator
   *  if it is being used.
*/

dcl  get_at_entry_ entry (char (*), char (*) aligned, char (*) aligned,
     char (*), fixed bin (35));
dcl  ios_$attach entry (char (*), char (*), char (*) aligned, char (*), bit (72) aligned);

dcl  code fixed bin (35);
dcl  dev_id char (32) aligned;
dcl  dim_name char (32) aligned;
dcl  ig char (4);
dcl  stat bit (72) aligned;
dcl  no_log bit (1) int static;			/* ON if not using log_output */

	call get_at_entry_ ("user_i/o", dim_name, dev_id, ig, code);
	if dim_name = "mrd_"
	then do;

	     call ios_$attach ("error_i/o", "mrd_", dev_id, "", stat);
	     call ios_$attach ("log_i/o", "mrd_", dev_id, "", stat);
	     call ios_$attach ("error_output", "syn", "error_i/o", "w", stat);
	     call ios_$attach ("log_output", "syn", "log_i/o", "w", stat);
	     no_log = "0"b;
	end;

	else no_log = "1"b;

	return;


     end iodc_message_;
