/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1985 *
        *                                                         *
        *********************************************************** */

/* format: style4,indattr,ifthen,^indproc */

iod_set_line: proc;

/* Command to patch the line number given for a device in iod_tables */

/****^  HISTORY COMMENTS:
  1) change(85-02-06,Homan), approve(87-04-06,MCR7656),
     audit(87-07-08,Beattie), install(87-08-04,MR12.1-1055):
     Add new command to change line number for a device in the
     iod_working_tables.
  2) change(88-06-03,Brunelle), approve(88-06-03,MCR7911),
     audit(88-10-17,Wallman), install(88-10-28,MR12.2-1199):
     Upgraded to handle version 5 I/O daemon tables.
                                                   END HISTORY COMMENTS */

	ithp = null ();
	on cleanup
	     call cleaner;

	call cu_$arg_list_ptr (arg_list_ptr);
	call process_args;

	call patch_it;

EXIT:
	call cleaner;

	return;
%page;
cleaner: proc;

	if ithp ^= null () then
	     call terminate_file_ (ithp, 0, TERM_FILE_TERM, (0));

     end cleaner;
%page;
process_args: proc;

	daemon_dir = ">daemon_dir_dir>io_daemon_dir";
	brief = "0"b;

	call cu_$arg_count_rel (nargs, arg_list_ptr, code);
	if code ^= 0 then do;
	     call com_err_ (code, ME);
	     goto EXIT;
	end;

	if nargs < 2 then do;
	     call com_err_ (error_table_$wrong_no_of_args, ME, "^/Usage: ^a Device Line {-control_args}", ME);
	     goto EXIT;
	end;

	call cu_$arg_ptr_rel (1, argp, argl, (0), arg_list_ptr);
	device_name = arg;
	call cu_$arg_ptr_rel (2, argp, argl, (0), arg_list_ptr);
	line_name = arg;

	argN = 3;
	do while (argN <= nargs);
	     call cu_$arg_ptr_rel (argN, argp, argl, (0), arg_list_ptr);
	     if arg = "-directory" | arg = "-dr" then do;
		argN = argN + 1;
		if argN > nargs then do;
		     call com_err_ (error_table_$noarg, ME, "Argument missing after -directory.");
		     goto EXIT;
		end;
		call cu_$arg_ptr_rel (argN, argp, argl, (0), arg_list_ptr);
		call absolute_pathname_ (arg, daemon_dir, code);
		if code ^= 0 then do;
		     call com_err_ (code, ME, "^a", arg);
		     goto EXIT;
		end;
	     end;
	     else if arg = "-brief" | arg = "-bf" then
		brief = "1"b;
	     else do;
		call com_err_ (error_table_$bad_arg, ME, "^a", arg);
		goto EXIT;
	     end;
	     argN = argN + 1;
	end;

     end process_args;
%page;
patch_it: proc;

dcl  i		        fixed bin;

	call initiate_file_ (daemon_dir, "iod_working_tables", RW_ACCESS, ithp, (0), code);
	if code ^= 0 then do;
	     call com_err_ (code, ME, "^a", pathname_ (daemon_dir, "iod_working_tables"));
	     goto EXIT;
	end;

	idtp = ptr (ithp, iod_tables_hdr.device_tab_offset);

	do i = 1 to iod_device_tab.n_devices;
	     idtep = addr (iod_device_tab.entries (i));
	     if idte.dev_id = device_name then do;
		if idte.attach_type ^= 2 then do;
		     call com_err_ (0, ME, "Device ^a does not have a ""line:"" statement, or uses ""line: variable"".",
			device_name);
		     goto EXIT;
		end;

		if ^brief then
		     call ioa_ ("Line changed from ^a to ^a for device ^a.",
			requote_string_ (rtrim (idte.attach_name)), requote_string_ (rtrim (line_name)), device_name);
		idte.attach_name = line_name;
		goto EXIT;
	     end;

	end;

	call com_err_ (0, ME, "Device ^a not found in ^a.", device_name, pathname_ (daemon_dir, "iod_working_tables"));

     end patch_it;
%page;
/* External entries */

dcl  cu_$arg_list_ptr       entry (ptr);
dcl  cu_$arg_count_rel      entry (fixed bin, ptr, fixed bin (35));
dcl  cu_$arg_ptr_rel        entry (fixed bin, ptr, fixed bin (21), fixed bin (35), ptr);
dcl  com_err_	        entry () options (variable);
dcl  ioa_		        entry () options (variable);
dcl  initiate_file_	        entry (char (*), char (*), bit (*), ptr, fixed bin (24), fixed bin (35));
dcl  terminate_file_        entry (ptr, fixed bin (24), bit (*), fixed bin (35));
dcl  absolute_pathname_     entry (char (*), char (*), fixed bin (35));
dcl  requote_string_        entry (char (*)) returns (char (*));
dcl  pathname_	        entry (char (*), char (*)) returns (char (168));

/* Builtins */

dcl  (addr, null, ptr, rtrim) builtin;

/* External static */

dcl  error_table_$wrong_no_of_args fixed bin (35) ext static;
dcl  error_table_$bad_arg   fixed bin (35) ext static;
dcl  error_table_$noarg     fixed bin (35) ext static;

/* Automatic variables */

dcl  arg_list_ptr	        ptr;
dcl  argp		        ptr;
dcl  argl		        fixed bin (21);
dcl  argN		        fixed bin;
dcl  nargs	        fixed bin;
dcl  code		        fixed bin (35);
dcl  brief	        bit (1);
dcl  daemon_dir	        char (168);
dcl  device_name	        char (32);
dcl  line_name	        char (32);
						/* Based variables */

dcl  arg		        char (argl) based (argp);

/* Constants */

dcl  ME		        char (32) int static options (constant) init ("iod_set_line");

/* Conditions */

dcl  cleanup	        condition;
%page; %include access_mode_values;
%page; %include iod_device_tab;
%page; %include iod_tables_hdr;
%page; %include terminate_file;

     end iod_set_line;
