/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */



/* format: style4,delnl,insnl,ifthenstmt,ifthen */

iodc_overseer_:
iod_overseer_:
     procedure;

/* Login responder for I/O Daemon (IO.SysDaemon) */
/* It asks if it is supposed to be coordinator or driver,
   *  so it can call the appropriate initializing routine.
   *  For a coordinator, the "coordinator lock" is checked to make sure
   *  that there is not already a coordinator running; for a driver process,
   *  the lock is checked to make sure that a coordinator IS running, and if
   *  not, we wait a bit and try once more.
*/

/* Modified by J. Stern, 12/31/74 */
/* Modified by B. Margulies November 1980 for search rules and test improvements, and to rename to iod_overseer_ */
/* Modified: 6 May 1982 by G. Palter to set the working directory */

dcl  (Test_dir, Test_entry) char (*) parameter;

dcl  home_dir character (168);
dcl  iod_tables_entryname char (32);
dcl  iod_tables_dir char (168);
dcl  this_is_a_test bit (1) aligned;
dcl  exit_command char (6) aligned;
dcl  code fixed bin (35);
dcl  lock_ptr ptr int static init (null);
dcl  type char (32) varying;
dcl  iod_tables char (32);

dcl  any_other condition;

dcl  1 daemon_search aligned static options (constant),	/* Daemon search rules */
       2 number fixed bin init (1),
       2 dirs (1) char (168) init ("io_daemon");


dcl  1 coord_lock_seg aligned based,
       2 coord_lock bit (36),
       2 driver_lock bit (36);


%include query_info;

dcl  change_wdir_ entry (char (168) aligned, fixed bin (35));
dcl  com_err_ entry options (variable);
dcl  command_query_ entry () options (variable);
dcl  hcs_$add_acl_entries entry (char (*), char (*), ptr, fixed bin, fixed bin (35));
dcl  hcs_$initiate entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr, fixed bin (35));
dcl  hcs_$initiate_search_rules entry (ptr, fixed bin (35));
dcl  hcs_$make_seg entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35));
dcl  privileged_make_seg_ entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35));
dcl  iodc_$iodc_init entry (char (*), bit (1) aligned, char (*));
dcl  iodd_$iodd_init entry (char (*), bit (1) aligned);
dcl  ioa_ entry options (variable);
dcl  logout entry;
dcl  set_lock_$lock entry (bit (36) aligned, fixed bin, fixed bin (35));
dcl  set_lock_$unlock entry (bit (36) aligned, fixed bin (35));
dcl  system_privilege_$dir_priv_on entry (fixed bin (35));
dcl  system_privilege_$ipc_priv_on entry (fixed bin (35));
dcl  system_privilege_$ring1_priv_on entry (fixed bin (35));
dcl  timer_manager_$sleep entry (fixed bin (71), bit (2));
dcl  user_info_$homedir entry (char (*));
%page;


dcl  error_table_$argerr fixed bin (35) ext static;
dcl  error_table_$noentry fixed bin (35) ext static;
dcl  error_table_$lock_wait_time_exceeded fixed bin (35) ext static;
dcl  error_table_$invalid_lock_reset fixed bin (35) ext static;
dcl  error_table_$locked_by_this_process fixed bin (35) ext static;


dcl  (addr, null) builtin;
%page;

	iod_tables_dir = ">daemon_dir_dir>io_daemon_dir";
	iod_tables_entryname = "iod_tables";
	this_is_a_test = "0"b;			/* indicates we're not in test mode */

	exit_command = "logout";
	on any_other call early_handler;
	call hcs_$initiate_search_rules (addr (daemon_search), code);
	if code ^= 0 then
	     call com_err_ (code, "iod_overseer_",
		"Warning: could not set search rules to the tagged set ""io_daemon"". Default search rules in use.");
	call user_info_$homedir (home_dir);
	call change_wdir_ ((home_dir), code);
	if code ^= 0 then
	     call com_err_ (code, "iod_overseer_", "Warning: could not set working directory to ^a.", home_dir);


/* find out what kind of process we're supposed to be */

common:
read:
	query_info.version = query_info_version_4;
	query_info.switches.suppress_name_sw = "1"b;
	query_info.switches.cp_escape_control = "1"b || this_is_a_test;
						/* allowed if in test mode */
	query_info.switches.suppress_spacing = "1"b;
	call command_query_ (addr (query_info), type, "iod_overseer_", "Enter command:  coordinator, driver, or ^a:^/",
	     exit_command);

	if type = "driver"				/* regular driver */
	then do;
	     if ^coord_running ()			/* no coordinator */
	     then call com_err_ (0, "iod_overseer_", "Coordinator not ready or not logged in.");

	     else do;				/* start up a driver */
		call iodd_$iodd_init (iod_tables_dir, this_is_a_test);
						/* byvalue until the aligned attribute is flushed from iodd_ */
		go to exit;
	     end;

	end;

	else if type = "coord" | type = "coordinator" then do;

/* make sure there isn't already a Coordinator process */

	     if ^first_coord ()			/* somebody goofed */
	     then do;
		call com_err_ (0, "iod_overseer_", "Coordinator is already running.");
		goto read;
	     end;

	     if ^this_is_a_test then do;		/* not testing, turn on privileges */
		call system_privilege_$dir_priv_on (code);
		call system_privilege_$ipc_priv_on (code);
		call system_privilege_$ring1_priv_on (code);
	     end;

	     call iodc_$iodc_init (iod_tables_dir, this_is_a_test, iod_tables_entryname);
	     call set_lock_$unlock (lock_ptr -> coord_lock, code);
						/* unlock the coordinator lock */
	     call set_lock_$unlock (lock_ptr -> driver_lock, code);
						/* and the driver lock */
	     go to exit;
	end;
	else if type = exit_command then go to exit;

	else call com_err_ (0, "iod_overseer_", "Invalid response.");

	go to read;


test:
     entry (Test_dir);
	iod_tables_dir = Test_dir;
	iod_tables_entryname = "iod_tables";
	goto TEST_COMMON;

test_path:
     entry (Test_dir, Test_entry);
	iod_tables_dir = Test_dir;
	iod_tables_entryname = Test_entry;

TEST_COMMON:
	this_is_a_test = "1"b;
	exit_command = "return";
	go to common;

exit:
	if this_is_a_test then
	     return;
	else call logout;


coord_ready:
     entry;

/* This entry is called by the coordinator after it has initialized.
   Until this entry is called, drivers will not be allowed to start. */


	if lock_ptr ^= null () then do;
	     lock_ptr -> driver_lock = ""b;		/* erase any previous lock */
	     call set_lock_$lock (lock_ptr -> driver_lock, 0, code);
	end;

	return;

/**/


first_coord:
     proc returns (bit (1) aligned);

/* This procedure verifies that no coordinator process yet exists. */


dcl  1 acl aligned,
       2 name char (32),
       2 modes bit (36),
       2 mbz bit (36),
       2 status fixed bin (35);


	if this_is_a_test then
	     call hcs_$make_seg (iod_tables_dir, "coord_lock", "", 01010b, lock_ptr, code);
	else call privileged_make_seg_ (iod_tables_dir, "coord_lock", "", 01010b, lock_ptr, code);
	if lock_ptr = null () then do;
	     call com_err_ (code, "iod_overseer_", "Cannot create coord_lock");
	     go to exit;
	end;

	if code = 0 then do;			/* if just created, set acl */
	     acl.name = "*.*.*";			/* give everyone access to read the lock */
	     acl.modes = "1"b;
	     acl.mbz = ""b;
	     call hcs_$add_acl_entries (iod_tables_dir, "coord_lock", addr (acl), 1, code);
	     if code ^= 0 then do;
		if code = error_table_$argerr then code = acl.status;
		call com_err_ (code, "iod_overseer_", "Cannot set access to coord_lock");
		go to exit;
	     end;
	end;

	call set_lock_$lock (lock_ptr -> coord_lock, 0, code);
	if code = 0 then return ("1"b);		/* we locked it */
	if code = error_table_$invalid_lock_reset then return ("1"b);
						/* we locked it */
	if code = error_table_$lock_wait_time_exceeded then return ("0"b);
						/* we didn't lock it */
	if this_is_a_test then			/* we'll try anything in test mode */
	     if code = error_table_$locked_by_this_process then return ("1"b);
	call com_err_ (code, "iod_overseer_", "Attempting to lock coord_lock");
	go to exit;

     end first_coord;

/**/


coord_running:
     proc returns (bit (1) aligned);

/* This procedure verifies that a coordinator process has been initialized. */

dcl  test_lock bit (36) aligned;
dcl  i fixed bin;


	call hcs_$initiate (iod_tables_dir, "coord_lock", "", 0, 1, lock_ptr, code);
	if lock_ptr = null then
	     if code = error_table_$noentry then
		return ("0"b);
	     else do;
		call com_err_ (code, "iod_overseer_", "Cannot initiate coord_lock");
		go to exit;
	     end;

	do i = 1 to 10;				/* try 10 times */
	     test_lock = lock_ptr -> driver_lock;	/* copy driver_lock since we don't want to set it */
	     call set_lock_$lock (test_lock, 0, code);
	     if code = error_table_$lock_wait_time_exceeded then return ("1"b);
						/* it's locked */
	     if code = 0 | code = error_table_$invalid_lock_reset then do;
						/* it's not locked */
		call timer_manager_$sleep (6, "11"b);	/* wait 6 seconds */
		go to retry;
	     end;
	     if this_is_a_test then			/* if we're testing */
		if code = error_table_$locked_by_this_process then return ("1"b);
						/* this is probably deliberate */
	     call com_err_ (code, "iod_overseer_", "Attempting to test coord_lock");
	     go to exit;
retry:
	end;

	return ("0"b);				/* no luck, give up */

     end coord_running;


/**/

early_handler:
     proc;

/*
   All conditions not recognized by early_handler are considered fatal.
   A standard message is printed, after which the process is logged out.
*/

dcl  ec fixed bin (35);

dcl  find_condition_info_ entry (ptr, ptr, fixed bin (35));
dcl  condition_interpreter_ entry (ptr, ptr, fixed bin, fixed bin, ptr, char (*), ptr, ptr);
dcl  default_error_handler_ entry (ptr, char (*), ptr, ptr, bit (1) aligned);


dcl  1 cond_info aligned,
%include cond_info;


	cond_info.version = 1;			/* version of cond_info */
	call find_condition_info_ (null (), addr (cond_info), ec);

	if cond_info.condition_name = "command_error" then return;
	else if cond_info.condition_name = "command_question" then return;

	else if cond_info.condition_name = "cput" | cond_info.condition_name = "alrm"
		| cond_info.condition_name = "sus_" | cond_info.condition_name = "trm_"
		| cond_info.condition_name = "wkp_" | cond_info.condition_name = "finish" then do;
	     call default_error_handler_ (mcptr, (condition_name), wcptr, infoptr, "0"b);
	     return;
	end;

	call ioa_ ("iod_overseer_: ^a condition intercepted.  Process will be terminated.", cond_info.condition_name);
	call condition_interpreter_ (null, null, 0, 3, mcptr, (condition_name), wcptr, infoptr);
	go to exit;

     end early_handler;
     end /* iod_overseeer_ */;
