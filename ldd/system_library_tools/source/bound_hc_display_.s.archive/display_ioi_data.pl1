/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(85-09-11,Farley), approve(85-09-11,MCR6979),
     audit(85-11-26,CLJones), install(86-03-21,MR12.0-1033):
     IPC and FIPS
                                                   END HISTORY COMMENTS */


/* DISPLAY_IOI_DATA - Command to dump ioi data bases */
/* Written November 1979 by Larry Johnson */
/* Modified 13 June 1983 by Chris Jones for IOI rewrite. */
/* Modified 1984-08-10 BIM for dte.direct */
/* Modified Jan 1985 by Paul Farley for IPC and FIPS flags. */
/* Modified Sept 1985 by Paul Farley for dte.controller. */

/* format: style4,delnl,insnl,indattr,ifthen,dclind10 */
display_ioi_data:
     procedure options (variable);

/* Automatic */

dcl	argl		   fixed bin;
dcl	arg_list_ptr	   ptr;
dcl	arg_no		   fixed bin;
dcl	argp		   ptr;
dcl	code		   fixed bin (35);
dcl	i		   fixed bin;
dcl	more_args		   bit (1);
dcl	n_args		   fixed bin;
dcl	dir		   char (168);
dcl	ename		   char (32);
dcl	(
	source_given,				/* Various flags for scanning args */
	path_sw,
	erf_sw,
	block_given,
	gte_sw,
	cte_sw,
	dte_sw,
	group_sw,
	channel_sw,
	device_sw,
	user_sw,
	header_sw,
	no_header_sw,
	force_sw,
	all_sw,
	brief_sw
	)		   bit (1) init ("0"b);
dcl	erf_name		   char (16);
dcl	(gte_offset, cte_offset, dte_offset)
			   fixed bin;
dcl	group_name	   char (4);
dcl	device_no		   fixed bin;
dcl	device_name	   char (7) var;
dcl	channel_id	   char (8) aligned;
dcl	found		   bit (1);
dcl	(person, person_req)   char (22);
dcl	(project, project_req) char (9);

/* Based */

dcl	arg		   char (argl) based (argp);

/* Constants */

dcl	name		   char (16) int static options (constant) init ("display_ioi_data");

/* External */

dcl	analyze_device_stat_$rsnnl
			   entry (char (*) var, ptr, bit (72), bit (18));
dcl	com_err_		   entry options (variable);
dcl	cu_$af_arg_count_rel   entry (fixed bin, fixed bin (35), ptr);
dcl	cu_$arg_list_ptr	   entry (ptr);
dcl	cu_$arg_ptr_rel	   entry (fixed bin, ptr, fixed bin, fixed bin (35), ptr);
dcl	cv_oct_check_	   entry (char (*), fixed bin (35)) returns (fixed bin (35));
dcl	date_time_	   entry (fixed bin (71), char (*));
dcl	delete_$ptr	   entry (ptr, bit (6), char (*), fixed bin (35));
dcl	expand_pathname_	   entry (char (*), char (*), char (*), fixed bin (35));
dcl	extract		   entry options (variable);
dcl	get_temp_segment_	   entry (char (*), pointer, fixed bin (35));
dcl	get_userid_	   entry (bit (36), char (*), char (*), fixed bin, fixed bin, fixed bin (35));
dcl	get_wdir_		   entry () returns (char (168));
dcl	initiate_file_	   entry (char (*), char (*), bit (*), ptr, fixed bin (24), fixed bin (35));
dcl	(
	ioa_,
	ioa_$nnl,
	ioa_$rsnnl
	)		   entry options (variable);
dcl	pathname_		   entry (char (*), char (*)) returns (char (168));
dcl	release_temp_segment_  entry (char (*), pointer, fixed bin (35));
dcl	ring0_get_$segptr	   entry (char (*), char (*), ptr, fixed bin (35));
dcl	ring_zero_peek_	   entry (ptr, ptr, fixed bin (19), fixed bin (35));
dcl	terminate_file_	   entry (ptr, fixed bin (24), bit (*), fixed bin (35));
dcl	user_info_	   entry (char (*));

dcl	error_table_$active_function
			   fixed bin (35) ext static;
dcl	error_table_$badopt	   fixed bin (35) ext static;
dcl	error_table_$noarg	   fixed bin (35) ext static;
dcl	error_table_$not_act_fnc
			   fixed bin (35) ext static;

dcl	cpz_status_table_$cpz_status_table_
			   ext;
dcl	crz_status_table_$crz_status_table_
			   ext;
dcl	disk_status_table_$disk_status_table_
			   ext;
dcl	imp_status_table_$imp_status_table_
			   ext;
dcl	prt_status_table_$prt_status_table_
			   ext;
dcl	tape_status_table_$tape_status_table_
			   ext;

dcl	cleanup		   condition;

dcl	(abs, addr, addrel, before, bin, clock, currentsize, divide, index, length, low, null, rel, rtrim, substr,
	unspec, verify)	   builtin;

	idp = null ();
	on cleanup call clean_up;

/* Check arguments */

	call cu_$arg_list_ptr (arg_list_ptr);
	call scan_args;

/* Get ioi_data from wherever appropriate */

	if path_sw then
	     call initiate_ioi_data;
	else if erf_sw then
	     call extract_ioi_data;
	else call fetch_ioi_data;

/* Print results */

	if user_sw then do;
	     if header_sw then
		call dump_header;
	     found = "0"b;
	     do i = 1 to ioi_data.ndt;
		dtep = addr (ioi_data.dt (i));
		if dte.in_use & (dte.process_id ^= "0"b) then do;
		     call get_userid_ ((dte.process_id), person, project, (0), (0), code);
		     if code = 0 then do;
			if (person_req = "*" | person_req = person) & (project_req = "*" | project_req = project)
			then do;
			     call dump_dte;
			     found = "1"b;
			end;
		     end;
		end;
	     end;
	     if ^found then
		call com_err_ (0, name, "No devices found for user ^a.^a.", person_req, project_req);
	end;
	else if block_given then do;
	     if header_sw then
		call dump_header;
	     call dump_block;
	end;
	else call dump_header;
	call ioa_ ("");

done:
	call clean_up;
	return;

/* Process the argument list */

scan_args:
     proc;

dcl	i		   fixed bin;

	call cu_$af_arg_count_rel (n_args, code, arg_list_ptr);
	if code = 0 then
	     code = error_table_$active_function;
	else if code = error_table_$not_act_fnc then
	     code = 0;
	if code ^= 0 then do;
	     call com_err_ (code, name);
	     goto done;
	end;

	arg_no = 1;
	more_args = (arg_no <= n_args);
	do while (more_args);
	     call get_arg;
	     if arg = "-segment" | arg = "-sm" then do;
		if source_given then do;
conflict:
		     call com_err_ (0, name, "^a conflicts with an earlier argument", arg);
		     go to done;
		end;
		source_given = "1"b;
		path_sw = "1"b;
		if ^more_args then do;
use_wdir:
		     dir = get_wdir_ ();
		     ename = "ioi_data";
		end;
		else do;
		     call get_arg;
		     if substr (arg, 1, 1) = "-" then do;
						/* No path, just another arg */
			call put_arg;
			go to use_wdir;
		     end;
		     call expand_pathname_ (arg, dir, ename, code);
		     if code ^= 0 then do;
			call com_err_ (code, name, "^a", arg);
			go to done;
		     end;
		end;
	     end;
	     else if arg = "-erf" then do;
		if source_given then
		     go to conflict;
		if ^more_args then do;
missing:
		     call com_err_ (error_table_$noarg, name, "After ^a", arg);
		     go to done;
		end;
		erf_sw = "1"b;
		call get_arg;
		erf_name = arg;
	     end;
	     else if arg = "-gte" then do;
		if block_given then
		     go to conflict;
		block_given, gte_sw = "1"b;
		gte_offset = get_offset_arg ();
	     end;
	     else if arg = "-cte" then do;
		if block_given then
		     go to conflict;
		block_given, cte_sw = "1"b;
		cte_offset = get_offset_arg ();
	     end;
	     else if arg = "-dte" then do;
		if block_given then
		     go to conflict;
		block_given, dte_sw = "1"b;
		dte_offset = get_offset_arg ();
	     end;
	     else if arg = "-group" | arg = "-gp" then do;
		if block_given then
		     go to conflict;
		block_given, group_sw = "1"b;
		if ^more_args then do;
all_groups:
		     group_sw = "0"b;
		     gte_sw = "1"b;
		     gte_offset = -1;
		end;
		else do;
		     call get_arg;
		     if substr (arg, 1, 1) = "-" then do;
			call put_arg;
			go to all_groups;
		     end;
		     group_name = arg;
		end;
	     end;
	     else if arg = "-channel" | arg = "-ch" | arg = "-chn" | arg = "-chan" then do;
		if block_given then
		     go to conflict;
		block_given, channel_sw = "1"b;
		if ^more_args then do;
all_channels:
		     channel_sw = "0"b;
		     cte_sw = "1"b;
		     cte_offset = -1;
		end;
		else do;
		     call get_arg;
		     if substr (arg, 1, 1) = "-" then do;
			call put_arg;
			go to all_channels;
		     end;
		     channel_id = arg;
		end;
	     end;
	     else if arg = "-device" | arg = "-dv" then do;
		if block_given then
		     go to conflict;
		block_given, device_sw = "1"b;
		if ^more_args then do;
all_devices:
		     device_sw = "0"b;
		     dte_sw = "1"b;
		     dte_offset = -1;
		end;
		else do;
		     call get_arg;
		     if substr (arg, 1, 1) = "-" then do;
			call put_arg;
			go to all_devices;
		     end;
		     if length (arg) = 4 then
			device_name = arg;
		     else if length (arg) = 7 then do;
			if substr (arg, 5, 1) ^= "_" then do;
bad_device:
			     call com_err_ (0, name, "Invalid device name: ^a", arg);
			     go to done;
			end;
			if verify (substr (arg, 6, 2), "0123456789") ^= 0 then
			     go to bad_device;
			device_name = arg;
			device_no = bin (substr (arg, 6, 2));
		     end;
		     else go to bad_device;
		end;
	     end;
	     else if arg = "-user" then do;
		if block_given then
		     go to conflict;
		block_given, user_sw = "1"b;
		if ^more_args then do;
user_is_me:
		     call user_info_ (person_req);
		     project_req = "*";
		end;
		else do;
		     call get_arg;
		     if substr (arg, 1, 1) = "-" then do;
			call put_arg;
			go to user_is_me;
		     end;
		     i = index (arg, ".");
		     if i = 0 then do;
			person_req = arg;
			project_req = "*";
		     end;
		     else if i = 1 then do;
			person_req = "*";
			if length (arg) > 1 then
			     project_req = before (substr (arg, 2), ".");
			else project_req = "*";
		     end;
		     else do;
			person_req = substr (arg, 1, i - 1);
			if length (arg) = i then
			     project_req = "*";
			else project_req = substr (arg, i + 1);
			i = index (project_req, "."); /* In case tag */
			if i > 0 then
			     substr (project_req, i) = "";
		     end;
		end;
	     end;
	     else if arg = "-header" | arg = "-he" then do;
		header_sw = "1"b;
		no_header_sw = "0"b;
	     end;
	     else if arg = "-no_header" | arg = "-nhe" then do;
		header_sw = "0"b;
		no_header_sw = "1"b;
	     end;
	     else if arg = "-force" | arg = "-fc" then
		force_sw = "1"b;
	     else if arg = "-all" | arg = "-a" then
		all_sw = "1"b;
	     else if arg = "-brief" | arg = "-bf" then
		brief_sw = "1"b;
	     else if arg = "-long" | arg = "-lg" then
		brief_sw = "0"b;
	     else do;
		call com_err_ (error_table_$badopt, name, "^a", arg);
		go to done;
	     end;
	end;

	if ^block_given & ^header_sw then do;		/* Setup defaults if no arguments */
	     block_given = "1"b;
	     gte_sw = "1"b;				/* Default is -gte -a */
	     gte_offset = -1;
	     all_sw = "1"b;
	     header_sw = ^no_header_sw;
	end;

	if user_sw & erf_sw then do;
	     call com_err_ (0, name, "-user and -erf are incompatable.");
	     go to done;
	end;

	return;

     end scan_args;

get_arg:
     proc;

	call cu_$arg_ptr_rel (arg_no, argp, argl, code, arg_list_ptr);
	if code ^= 0 then do;
	     call com_err_ (code, name, "Can't happen.");
	     go to done;
	end;
	arg_no = arg_no + 1;
	more_args = (arg_no <= n_args);
	return;

put_arg:
     entry;

	arg_no = arg_no - 1;
	more_args = (arg_no <= n_args);
	return;

     end get_arg;


get_offset_arg:
     proc returns (fixed bin);

dcl	temp		   fixed bin;

	if ^more_args then
	     return (-1);
	call get_arg;
	if substr (arg, 1, 1) = "-" then do;
	     call put_arg;
	     return (-1);
	end;
	temp = cv_oct_check_ (arg, code);
	if code = 0 then
	     return (temp);
	call com_err_ (0, name, "Invalid octal number: ^a", arg);
	go to done;

     end get_offset_arg;

/* Fetch ioi_data segment from ring-0 */

fetch_ioi_data:
     proc;

dcl	r0p		   ptr;
dcl	i		   fixed bin (19);
dcl	based_words	   (i) bit (36) aligned based;

	call get_temp_segment_ (name, idp, code);
	if code ^= 0 then do;
	     call com_err_ (code, name, "Unable to get temp segment.");
	     go to done;
	end;

	call ring0_get_$segptr ("", "ioi_data", r0p, code);
	if code ^= 0 then do;
	     call com_err_ (code, name, "Unable to get pointer to ioi_data");
	     go to done;
	end;

	i = bin (rel (addr (ioi_data.gt)));		/* Length of header */
	call ring_zero_peek_ ((r0p), idp, i, code);
	if code ^= 0 then do;
	     call com_err_ (code, name, "Unable to read first ^a words of ioi_data.", edit_dec ((i)));
	     go to done;
	end;
	i = currentsize (ioi_data);			/* Now can calculate the entire length */
	unspec (idp -> based_words) = "0"b;		/* Touch all pages to minimize chance
						   of page fault during copy of data. This
						   should reduce chance of inconsistent data */
	call ring_zero_peek_ ((r0p), idp, i, code);
	if code ^= 0 then do;
	     call com_err_ (code, name, "Unable to read the ^a words of ioi_data.", edit_dec ((i)));
	     go to done;
	end;
	return;

     end fetch_ioi_data;

initiate_ioi_data:
     proc;

	call initiate_file_ (dir, ename, R_ACCESS, idp, (0), code);
	if code ^= 0 then do;
	     call com_err_ (code, name, "^a", pathname_ (dir, ename));
	     go to done;
	end;
	return;

     end initiate_ioi_data;

extract_ioi_data:
     proc;

	call extract (rtrim (erf_name), "ioi_data");
	dir = get_wdir_ ();
	ename = "ioi_data." || erf_name;
	call initiate_ioi_data;
	return;

     end extract_ioi_data;


clean_up:
     proc;

	if idp ^= null () then do;
	     if path_sw then
		call terminate_file_ (idp, 0, TERM_FILE_TERM, code);
	     else if erf_sw then
		call delete_$ptr (idp, "010100"b, name, code);
	     else call release_temp_segment_ (name, idp, code);
	end;
	return;

     end clean_up;

dump_block:
     proc;

dcl	i		   fixed bin;
dcl	sw		   bit (1);
dcl	found		   bit (1);
dcl	temp_gtep		   ptr;

	if gte_sw | group_sw then do;			/* Asked for group */
	     found = "0"b;
	     do i = 1 to ioi_data.ngt;
		gtep = addr (ioi_data.gt (i));
		if gte_sw then
		     if gte_offset = -1 then
			sw = "1"b;
		     else sw = bin (rel (gtep)) = gte_offset;
		else sw = (gte.name = group_name);
		if sw then do;
		     call dump_gte;
		     found = "1"b;
		end;
	     end;
	     if found then
		return;
	     if gte_sw then
		if gte_offset = -1 then
		     call com_err_ (0, name, "No allocated group entries.");
		else call com_err_ (0, name, "^o is not a valid gte offset.", gte_offset);
	     else call com_err_ (0, name, "No group entry found for ^a", group_name);
	     go to done;
	end;

	if cte_sw | channel_sw then do;
	     found = "0"b;
	     do i = 1 to ioi_data.nct;
		ctep = addr (ioi_data.ct (i));
		if cte_sw then
		     if cte_offset = -1 then
			sw = force_sw;
		     else sw = (bin (rel (ctep)) = cte_offset);
		else sw = (cte.chanid = channel_id);
		if sw then do;
		     call dump_cte;
		     found = "1"b;
		end;
	     end;
	     if found then
		return;
	     if cte_sw then
		if cte_offset = -1 then
		     call com_err_ (0, name, "No allocated channel entries.");
		else call com_err_ (0, name, "^o is not a valid cte offset.", cte_offset);
	     else call com_err_ (0, name, "No channel entry found for channel ^a.", channel_id);
	     go to done;
	end;

	if dte_sw | device_sw then do;
	     found = "0"b;
	     do i = 1 to ioi_data.ndt;
		dtep = addr (ioi_data.dt (i));
		if dte_sw then
		     if dte_offset = -1 then
			sw = force_sw;
		     else sw = (bin (rel (dtep)) = dte_offset);
		else if dte.gtep = "0"b then
		     sw = "0"b;
		else do;
		     temp_gtep = addrel (idp, dte.gtep);
		     sw = (temp_gtep -> gte.name = substr (device_name, 1, 4));
		     if length (device_name) = 7 then
			sw = sw & (bin (dte.device) = device_no);
		end;
		if sw then do;
		     call dump_dte;
		     found = "1"b;
		end;
	     end;
	     if found then
		return;
	     if dte_sw then
		if dte_offset = -1 then
		     call com_err_ (0, name, "No allocated device entries.");
		else call com_err_ (0, name, "^o is not a valid dte offset.", dte_offset);
	     else call com_err_ (0, name, "No device entry found for device ^a.", device_name);
	     go to done;
	end;

	return;

     end dump_block;

/* Dump an individual group table entry */

dump_gte:
     proc;

dcl	i		   fixed bin;
dcl	temp_name		   char (4);

	temp_name = gte.name;
	if temp_name = low (4) then
	     temp_name = "";
	if temp_name = "" then
	     temp_name = "?";
	call ioa_ ("^/Group entry at ^o for ^a.", bin (rel (gtep)), temp_name);
	if brief_sw then
	     go to process_all;
	if gte.lock ^= ""b then
	     call ioa_ (" Locked by process ^w.", gte.lock);
	call ioa_ (" Flags:^[ mplex^]^[ psia^]^[ suspend_devices^]^[ dual_controller^]^[ ascii_dtst^]^[ fips^]^[ ipc^]",
	     gte.mplex, gte.psia, gte.suspend_devices, gte.dual_controller, gte.ascii_dtst, gte.fips, gte.ipc);
	if substr (temp_name, 1, 3) = "dsk" then
	     call ioa_ (" Disk subsystem index: ^a", edit_dec ((gte.disk_data_subsystem_idx)));
	call ioa_ (" ^a device^[s^], ^a with connect pending.", edit_dec ((gte.n_devices)), (gte.n_devices ^= 1),
	     edit_dec ((gte.pending_connects)));
	call ioa_ (" Last device entry at ^o, first channel at ^o", bin (gte.dtep), bin (gte.ctep));
	call ioa_ (" Detailed status command: ^.3b, log_info index ^a", gte.detailed_status_cmd,
	     edit_dec ((gte.io_log_info_index)));

process_all:
	if all_sw then do;
	     do i = 1 to ioi_data.nct;		/* Get all channels */
		ctep = addr (ioi_data.ct (i));
		if cte.gtep = rel (gtep) then
		     call dump_cte;
	     end;
	     do i = 1 to ioi_data.ndt;
		dtep = addr (ioi_data.dt (i));
		if dte.gtep = rel (gtep) then
		     call dump_dte;
	     end;
	end;

	return;

     end dump_gte;

/* Procedure to dump a channel table entry */

dump_cte:
     proc;

dcl	temp_gtep		   ptr;
dcl	group_name	   char (4);

	group_name = "";
	if cte.gtep ^= "0"b then do;
	     temp_gtep = addrel (idp, cte.gtep);
	     group_name = temp_gtep -> gte.name;
	end;
	call ioa_ ("^/Channel entry at ^o for channel ^a^[ (^a)^;^s^].", bin (rel (ctep)), cte.chanid,
	     (group_name ^= ""), group_name);
	if brief_sw then
	     return;
	call ioa_ (" Flags:^[ ioi_use^]^[ connected^]^[ deleting^]^[ deleted^]^[ toss_status^]^[ quiescing^]",
	     cte.ioi_use, cte.connected, cte.deleting, cte.deleted, cte.toss_status, cte.quiescing);
	call ioa_ (" Current device ^o, iom channel index ^o^[, disk channel index ^o^;^s^], iocd idx ^d",
	     bin (cte.cur_dtep), cte.chx, (cte.disktab_ctx ^= 0), cte.disktab_ctx, cte.channel_table_idx);
	if cte.time_limit ^= 0 then do;
	     call ioa_ (" Time limit^[ was^] at ^a", (clock () > cte.time_limit), time_string (cte.time_limit));
	end;
	if unspec (cte.saved_status) ^= "0"b then do;
	     call ioa_ (" Saved status during detailed status read:");
	     call ioa_ ("  cmd ^.3b, offset ^o, lpw ^w", cte.saved_status.command, cte.saved_status.next_lpw_offset,
		cte.saved_status.word2);
	     call ioa_ ("  iom_status ^.3b.", cte.saved_status.word1 || cte.saved_status.word4);
	end;

	return;

     end dump_cte;

/* Procedure to dump a device entry */

dump_dte:
     proc;

dcl	temp_gtep		   ptr;
dcl	device_name	   char (7);
dcl	device_type	   char (3);
dcl	dev_pic		   picture "99";
dcl	person		   char (22);
dcl	project		   char (9);
dcl	status_msg	   char (72) var;
dcl	status_tablep	   ptr;
dcl	pack_sw		   bit (1);		/* "1"b = detailed status in ascii, not binary */

	pack_sw = "0"b;
	if dte.gtep = "0"b then
	     temp_gtep = null ();
	else temp_gtep = addrel (idp, dte.gtep);
	if temp_gtep = null () then
	     device_name, device_type = "?";
	else do;
	     device_name = temp_gtep -> gte.name;
	     device_type = substr (device_name, 1, 3);
	     if temp_gtep -> gte.mplex then do;
		dev_pic = bin (dte.device);
		device_name = rtrim (device_name) || "_" || dev_pic;
	     end;
	     if temp_gtep -> gte.ipc & (device_type = "prt" | device_type = "rdr" | device_type = "pun") then
		pack_sw = "1"b;
	end;
	call ioa_ ("^/Device entry at ^o for ^a", bin (rel (dtep)), device_name);
	if brief_sw then
	     return;
	call ioa_ (
	     " Flags:^[ priv^]^[ in_use^]^[ suspended^]^[ active^]^[ connected^]^[ workspace_wired^]^[ special_interrupt^]^[ log_status_cnt^]^[ deleting^]^[ deleted^]^[ reading_detailed_status^]^[ detailed_status_valid^]^[ direct^]^[ controller^]",
	     dte.priv, dte.in_use, dte.suspended, dte.active, dte.connected, dte.workspace_wired, dte.special_interrupt,
	     dte.log_status_cnt, dte.deleting, dte.deleted, dte.reading_detailed_status, dte.detailed_status_valid,
	     dte.direct, dte.controller);
	if dte.cur_ctep ^= ""b then
	     call ioa_ (" Current channel ^o", dte.cur_ctep);
	person, project = "";
	if dte.process_id ^= "0"b & ^erf_sw then do;
	     call get_userid_ ((dte.process_id), person, project, (0), (0), code);
	     if code ^= 0 then
		person, project = "";
	end;
	call ioa_ (" Process ^.3b^[ (^a.^a)^;^2s^], event ^.3b, ring ^o", dte.process_id, (person ^= ""), person,
	     project, unspec (dte.ev_chn), dte.ring);
	call ioa_ (" Workspace bound ^o, max bound ^o", dte.bound, dte.max_bound);
	call ioa_ (" Workspace ptr ^p, astep ^p, sdw ^.3b, iopt idx ^o", dte.workspace_ptr, dte.workspace_astep,
	     unspec (dte.workspace_sdw), dte.ptx);
	if dte.channel_required ^= "" then
	     call ioa_ (" Channel required: ^a.", dte.channel_required);
	call ioa_ (" listx ^o, pcw ^.3b, idcw ^.3b, tdcw ^.3b, iocd idx ^d", bin (dte.listx), dte.pcw, dte.idcw,
	     dte.tdcw, dte.device_table_idx);
	call ioa_ (" Time limit: ^a second^[s^], max limit ^a second^[s^].",
	     edit_dec (divide (dte.timeout, 1000000, 17)), (dte.timeout ^= 1000000),
	     edit_dec (divide (dte.max_timeout, 1000000, 17)), (dte.max_timeout ^= 1000000));

	if dte.unwire_time ^= 0 then
	     call ioa_ (" Workspace ^[scheduled for unwiring^;unwired^] at ^a.", dte.workspace_wired,
		time_string (dte.unwire_time));
	if dte.last_log_time ^= 0 then
	     call ioa_ (" Status last logged at ^a.", time_string (dte.last_log_time));
	if dte.special_status ^= "0"b then
	     call ioa_ (" Special status: ^.3b", dte.special_status);
	if unspec (dte.log_status) ^= ""b then do;
	     if device_type = "tap" then
		status_tablep = addr (tape_status_table_$tape_status_table_);
	     else if device_type = "dsk" then
		status_tablep = addr (disk_status_table_$disk_status_table_);
	     else if device_type = "prt" then
		status_tablep = addr (prt_status_table_$prt_status_table_);
	     else if device_type = "pun" then
		status_tablep = addr (cpz_status_table_$cpz_status_table_);
	     else if device_type = "rdr" then
		status_tablep = addr (crz_status_table_$crz_status_table_);
	     else if device_type = "imp" then
		status_tablep = addr (imp_status_table_$imp_status_table_);
	     else status_tablep = null ();
	     call analyze_device_stat_$rsnnl (status_msg, status_tablep, (dte.log_status.status), ("0"b));
	     call ioa_ (" Last logged status: level-^d status-^.3b^[ ^;^/^21x^]""^a""", dte.log_status.level,
		dte.log_status.status, (length (status_msg) < 28), status_msg);
	end;
	if unspec (dte.detailed_status) ^= "0"b then do;
	     call ioa_$nnl (" Detailed status:");
	     call dump_detail (addr (dte.detailed_status), pack_sw);
	end;
	if unspec (dte.status_control) ^= ""b then do;
	     call ioa_ (" Status queue at ^o, length ^o, tally ^o", dte.status_offset, dte.status_entries,
		dte.status_entry_idx);
	end;

	return;

     end dump_dte;

dump_detail:
     proc (p, pack);

dcl	p		   ptr;
dcl	pack		   bit (1);

dcl	dtstat		   (27) bit (8) unal based (p);
dcl	1 ascii_dtstat	   (24) unal based (p),
	  2 pad		   bit (1),
	  2 data		   bit (8);
dcl	packed_dtstat	   (24) bit (8) unal;
dcl	i		   fixed bin;

	if pack then do;
	     do i = 1 to 24;
		packed_dtstat (i) = ascii_dtstat (i).data;
	     end;
	     do i = 24 to 1 by -1 while (packed_dtstat (i) = "0"b);
	     end;
	     call ioa_ ("^v( ^.4b^)", i, packed_dtstat);
	     return;
	end;
	do i = 27 to 1 by -1 while (dtstat (i) = "0"b);
	end;
	call ioa_ ("^v( ^.4b^)", i, dtstat);
	return;

     end dump_detail;


/* Dump ioi_data header info */

dump_header:
     proc;

	call ioa_ ("^/Segment ioi_data: ^o words long.", currentsize (ioi_data));
	if brief_sw then
	     return;
	call ioa_ (" ^a group entries, ^a channel entries, ^a device entries", edit_dec ((ioi_data.ngt)),
	     edit_dec ((ioi_data.nct)), edit_dec ((ioi_data.ndt)));
	return;
     end dump_header;

time_string:
     proc (time) returns (char (24));

dcl	time		   fixed bin (71);

dcl	time_temp		   char (24);
dcl	cur_date_time	   char (24);

	call date_time_ (time, time_temp);
	substr (time_temp, 17) = "";
	call date_time_ (clock (), cur_date_time);
	if substr (time_temp, 1, 8) = substr (cur_date_time, 1, 8) then
	     time_temp = substr (time_temp, 11);
	return (time_temp);

     end time_string;

edit_dec:
     proc (n) returns (char (32) var);

dcl	n		   fixed bin (71);
dcl	dec_sw		   bit (1);
dcl	result		   char (32);

	dec_sw = (abs (n) > 7);
	call ioa_$rsnnl ("^d^[d^]", result, (0), n, dec_sw);
	return (rtrim (result));

     end edit_dec;

%include ioi_data;
%page;
%include terminate_file;
%page;
%include access_mode_values;

     end display_ioi_data;

