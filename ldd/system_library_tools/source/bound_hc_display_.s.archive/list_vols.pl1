/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: style4,^inddcls */

list_vols: proc;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*									*/
/* Initial coding by T. H. VanVleck, 1975.					*/
/* Modified August 1977 by T. Casey						*/
/*          to add -records, -records_left, and active function processing.		*/
/* Modified January 1978 by T. Casey						*/
/*          to print short lines to accomodate narrow-carriage terminals.		*/
/* Modified March 1979 by T. Casey						*/
/*          to fix arg processing bug in -records and -records_left.			*/
/* Modified February 1982 by JM Stansbury					*/
/*          1. to output information within 80 columns,				*/
/*          2. to add "I" flag to indicate PVs inhibited for segment creation,		*/
/*          3. to add Records/VTOCEs Used reporting capability,			*/
/*          4. to add percentage used/left figures for Records and VTOCEs,		*/
/*          5. to add average segment size per PV,				*/
/*          6. to remove printing of "P" flag indicating partitions.			*/
/*          7. to allow processing of multiple LVs via the -lv control arg		*/
/*          8. to add -grand_total, -gtt control arg for command processing.		*/
/* Modified June 1983 by Art Beattie						*/
/*	  1. to maintain column alignment in displays				*/
/*	  2. fix bug which nulled -lv argument in command line			*/
/*									*/
/*									*/
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */


/****^  HISTORY COMMENTS:
  1) change(88-03-30,GWMay), approve(88-04-12,MCR7867),
     audit(88-06-14,Beattie), install(88-07-19,MR12.2-1061):
     Changed ioa_ call controls to properly align output.
                                                   END HISTORY COMMENTS */

%page;

	Ilv = 0;
	Ptemp (1) = null;
	Ptemp (2) = null;
	af_sw = "0"b;
	entry_name = "list_vols";
	given_lvnm (*) = "";
	given_pvnm = "";
	left_sw = "0"b;
	used_sw = "0"b;
	gtt_sw = "0"b;
	lvsw = "0"b;
	max_pvname_ln = 7;				/* column heading width for PV Name */
	nprt = 0;
	prev_lvnm = "";
	pvsw = "0"b;
	record_sw = "0"b;
	totfreevtoc = 0;
	totleft = 0;
	totrec = 0;
	totsw = "0"b;
	totvtoc = 0;

	error_proc = active_fnc_err_;
	af_sw = "1"b;				/* assume we were called as an active function */

	call cu_$af_return_arg (nargs, retp, retl, code); /* but check to be sure */
	if code ^= 0 then do;
	     if code = error_table_$not_act_fnc then do;	/* if not */
		af_sw = ""b;			/* we will print the value instead */
		error_proc = com_err_;
		goto get_arg_count;			/* go get arg count for command args */
	     end;
	     else do;				/* should never happen, but ... */
		call error_proc (code, entry_name);
		return;
	     end;
	end;
	goto get_args;				/* go get arguments */

get_arg_count:
	call cu_$arg_count (nargs);

get_args:
	do an = 1 to nargs;
	     call cu_$arg_ptr (an, argp, argl, code);
	     if code = 0 then do;
		if bchr = "-lv" then do;
		     pvsw = "0"b;
		     lvsw = "1"b;
NEXT_LV:		     an = an + 1;
		     call cu_$arg_ptr (an, argp, argl, code);
		     if code = error_table_$noarg then do;
			if given_lvnm (1) = "" then do;
						/* -lv given with no names */
			     call error_proc (code, entry_name, "^/-lv must be followed by at least one LV name.");
			     return;
			end;
			else
			     goto work;
		     end;
		     if code ^= 0 then
			goto gape1;
		     if char (bchr, 1) = "-" then
			goto CHECK_NEXT_ARG;
		     else do;
			Ilv = Ilv + 1;
			if Ilv > dim (given_lvnm, 1) then do;
			     call ioa_ ("
Number of LVs given is greater than currently supported by this procedure.");
			     return;
			end;
			given_lvnm (Ilv) = bchr;
			if an = nargs then
			     goto work;		/* be sure we don't skip any */
		     end;
		     goto NEXT_LV;
		end;
CHECK_NEXT_ARG:
		if bchr = "-pv" then do;
		     an = an + 1;
		     call cu_$arg_ptr (an, argp, argl, code);
		     if code ^= 0 then go to gape1;
		     given_pvnm = bchr;
		     pvsw = "1"b;
		     lvsw = "0"b;
		end;
		else if bchr = "-tt" | bchr = "-total" | bchr = "-totals" then
		     totsw = "1"b;
		else if bchr = "-records" | bchr = "-record" | bchr = "-rec" then
		     record_sw = "1"b;
		else if bchr = "-records_left" | bchr = "-rec_left" | bchr = "-left" then do;
		     used_sw = "0"b;
		     if af_sw then
			gtt_sw, record_sw, left_sw = "1"b;
		     else
			left_sw = "1"b;
		end;
		else if bchr = "-records_used" | bchr = "-rec_used" | bchr = "-used" then do;
		     left_sw = "0"b;
		     if af_sw then
			record_sw, used_sw = "1"b;
		     else
			used_sw = "1"b;
		end;
		else if bchr = "-grand_total" | bchr = "-gtt" then
		     if af_sw then do;
			call error_proc (error_table_$badopt, entry_name, "^a", bchr);
			return;
		     end;
		     else
			record_sw, gtt_sw = "1"b;
		else if char (bchr, 1) ^= "-" then do;
		     lvsw = "1"b;
		     Ilv = 1;
						/* check for >1 LV name */
		     if given_lvnm (Ilv) ^= "" then do;
			if given_lvnm (Ilv) ^= bchr then
			     call error_proc (error_table_$bad_arg, entry_name, "^/Multiple LVs must be preceded by the -lv control argument.");
			return;
		     end;
		     given_lvnm (Ilv) = bchr;		/* default to this lv */
		end;
		else do;				/* bad arg */
		     code = error_table_$badopt;
gape:		     call error_proc (code, entry_name, bchr);
		     return;
		end;
	     end;
	     else do;
gape1:		call error_proc (code, entry_name);	/* code was ^= 0 */
		return;
	     end;
	end;
work:
	if ^used_sw then
	     left_sw = "1"b;			/* default */
	if ^af_sw then
	     if record_sw & ^gtt_sw then
		left_sw = "0"b;
	if record_sw & (^pvsw | ^lvsw) then do;
	     totsw = "1"b;
	     if af_sw & record_sw then
		left_sw = "0"b;
	end;
	if gtt_sw & record_sw & ^used_sw then
	     left_sw = "1"b;

	if af_sw & ^record_sw then do;
	     call error_proc (0, entry_name, "^/The -records, -records_left or -records_used argument is required when used as an active function.");
	     goto common_exit;
	end;
	on cleanup call clean_out;

	call get_temp_segments_ (entry_name, Ptemp, code);
	if Ptemp (1) = null () then do;
	     call error_proc (code, entry_name, "^/Cannot get ptr to temp seg.");
	     return;
	end;
	pvtp = Ptemp (1);				/* ptr to the PVT */
	dtp = Ptemp (2);				/* ptr to the disk table */
	call ring_zero_peek_$get_max_length ("pvt", pvt_size, code);
						/* get max number of words */
	if code ^= 0 then do;
CANNOT_GET_PVT:
	     call error_proc (code, entry_name, "pvt");
	     call clean_out;
	     return;
	end;
	call ring_zero_peek_$by_name ("pvt", 0, pvtp, pvt_size, code);
						/* obtain pvt contents in user ring */
	if code ^= 0 then goto CANNOT_GET_PVT;

	pvt_arrayp = addr (pvt.array);
	call mdc_$read_disk_table (dtp, code);		/* obtain disk table contents in user ring */
	if code ^= 0 then do;
	     call error_proc (code, entry_name, "^/Error from read_disk_table.");
	     return;
	end;

	n = dt.n_entries;

	begin;
dcl  sindex (n) fixed bin;
dcl  sname (n) char (32) aligned;

	     sname (*) = "";
	     if lvsw then do;
		do Ilv = 1 to dim (given_lvnm, 1) while (given_lvnm (Ilv) ^= "");
		     do i = 1 to n;
			if dt.array (i).used
			then if (given_lvnm (Ilv) = dt.lv_array (dt.array (i).lvx).lvname)
			     then go to end_lvsw_loop;
			if i = n then do;

			     call error_proc (error_table_$logical_volume_not_defined, entry_name, given_lvnm (Ilv));
			     goto common_exit;
			end;
		     end;				/* do loop on i */

end_lvsw_loop:
		end;
	     end;

	     do i = 1 to n;
		sindex (i) = i;
		if dt.array (i).lvx > 0 then
		     call ioa_$rsnnl ("^a^a", sname (i), argl,
			dt.lv_array (dt.array (i).lvx).lvname,
			dt.drive_name (i));
	     end;
	     if ^(lvsw | pvsw) | totsw then		/* dont sort if only one required */
		call idsort_ (sname, sindex, n);

	     Ilv = 1;
	     if ^totsw & ^record_sw then		/* if printing both lv and pv names */
		do i = 1 to n;			/* be nice to users with narrow-carriage terminals */
						/* and compute how wide to make the pvname column */
		dtep = addr (dt.array (sindex (i)));
		if dte.used then
		     if (^lvsw | dt.lv_array (dte.lvx).lvname = given_lvnm (Ilv))
			& (^pvsw | dte.pvname = given_pvnm) then do;
			if length (rtrim (dte.pvname)) > max_pvname_ln then
			     max_pvname_ln = length (rtrim (dte.pvname));
			if lvsw then Ilv = Ilv + 1;
		     end;
	     end;


	     if ^record_sw then
		if totsw then
		     call ioa_ ("
Records^3x^[Used^;Left^]  %^4xVTOCEs^3x^[Used^;Left^]  %^3xPB/PD  LV Name^/",
			used_sw, used_sw);
		else if ^(pvsw | lvsw) | (^totsw & lvsw) then
		     call ioa_ ("
^44xAvg ^va
Drive   Records^2x^[Used^;Left^]  %  VTOCEs  ^[Used^;Left^]  %  Size^1x^va^2xPB/PD LV Name^/",
			max_pvname_ln, "PV", used_sw, used_sw,
			max_pvname_ln, "Name");

	     Ilv = 1;
loop_thru_pvs: do i = 1 to n;				/* go through all physical volumes (pv) */
		pvtep = addr (my_pvt_array (sindex (i)));
		dtep = addr (dt.array (sindex (i)));

		if dte.used then			/* if this entry is used */
		     if (^lvsw | dt.lv_array (dte.lvx).lvname = given_lvnm (Ilv))
						/* and it pertains to a lv that we want */
			& (^pvsw | dte.pvname = given_pvnm) then do;
						/* and it pertains to a pv that we want */
			n_vtoce = pvte.n_vtoce;
						/* obtain number of vtoces */
			nprt = nprt + 1;		/* remember that we found at least one pv */

			if totsw then do;		/* if -total (-tt) */

			     if dt.lv_array (dte.lvx).lvname ^= prev_lvnm then do;
						/* if current lv ^= previous lv */
						/* following 2 lines needed for rounding */
				half_totrec = divide (totrec, 2, 35, 0);
				half_vtoce = divide (totvtoc, 2, 35, 0);
				if prev_lvnm ^= "" then /* if there was a previous lv, we have totals for it */
				     if record_sw then
					goto display_records;
						/* either display its records */
				     else do;
					if used_sw then
					     call ioa_ ("^6d  ^6d ^3d  ^6d  ^6d ^3d  ^5a  ^a",
						totrec, totrec - totleft,
						divide ((totrec - totleft) * 100 + half_totrec, totrec, 35, 0),
						totvtoc, totvtoc - totfreevtoc,
						divide ((totvtoc - totfreevtoc) * 100 + half_vtoce, totvtoc, 35, 0),
						lvflags (prev_lvx), prev_lvnm);

					else if left_sw then
					     call ioa_ ("^6d  ^6d ^3d  ^6d  ^6d ^3d  ^5a  ^a",
						totrec, totleft,
						divide ((totleft) * 100 + half_totrec, totrec, 35, 0),
						totvtoc, totfreevtoc,
						divide ((totfreevtoc) * 100 + half_vtoce, totvtoc, 35, 0),
						lvflags (prev_lvx), prev_lvnm);
				     end;
				if ^record_sw then do; /* if we get here with record_sw on, we are totaling all vols */
				     prev_lvx = dte.lvx; /* remember lvx of new lv */
				     prev_lvnm = dt.lv_array (prev_lvx).lvname;
						/* remember name of new lv */
				     totrec, totleft, totvtoc, totfreevtoc = 0;
						/* zero the lv totals */
				end;
			     end;

			     totrec = totrec + pvte.totrec; /* add pv figures to lv totals */
			     totleft = totleft + pvte.nleft;
			     totvtoc = totvtoc + n_vtoce;
			     totfreevtoc = totfreevtoc + pvte.n_free_vtoce;
			end;
			else do;			/* not -tt, so print for each pv */
			     if record_sw then do;	/* or, if entered at records entry, just one pv */
				totleft = pvte.nleft;
				goto display_records;
			     end;
			     if pvte.device_inoperative then
				flag = "X";
			     else flag = " ";
			     if pvte.vacating then
				flag1 = "I";
			     else flag1 = " ";
			     half_totrec = divide (pvte.totrec, 2, 35, 0);
			     half_vtoce = divide (n_vtoce, 2, 35, 0);
						/* will need this for rounding */
			     if used_sw then do;
				call ioa_ ("^8a^1a^1a^5d ^5d ^3d ^6d ^5d ^3d ^4d ^va  ^5a ^a",

				     dte.drive_name, flag, flag1,
				     pvte.totrec, pvte.totrec - pvte.nleft,
						/* following is for rounded record percentage */
				     divide ((pvte.totrec - pvte.nleft) * 100 + half_totrec, pvte.totrec, 35, 0),
				     n_vtoce, n_vtoce - pvte.n_free_vtoce,
						/* following is for rounded vtoce percentage */
				     divide ((n_vtoce - pvte.n_free_vtoce) * 100 + half_vtoce, n_vtoce, 35, 0),
				     (pvte.totrec - pvte.nleft) / max (1, (n_vtoce - pvte.n_free_vtoce)), max_pvname_ln,
				     dte.pvname, lvflags ((dte.lvx)), dt.lv_array (dte.lvx).lvname);
			     end;			/* end rec_used */
			     if left_sw then do;
				call ioa_ ("^8a^1a^1a^5d ^5d ^3d ^6d ^5d ^3d ^4d ^va  ^5a ^a",
				     dte.drive_name, flag, flag1,
				     pvte.totrec, pvte.nleft,
				     divide ((pvte.nleft) * 100 + half_totrec, pvte.totrec, 35, 0),
				     n_vtoce, pvte.n_free_vtoce,
				     divide ((pvte.n_free_vtoce) * 100 + half_vtoce, n_vtoce, 35, 0),
				     (pvte.totrec - pvte.nleft) / max (1, (n_vtoce - pvte.n_free_vtoce)), max_pvname_ln,
				     dte.pvname, lvflags ((dte.lvx)), dt.lv_array (dte.lvx).lvname);
			     end;			/* end rec_left */
			end;			/* end not -tt */
		     end;				/* end pv is of interest */
	     end;					/* end loop thru all pv's */
						/* see if there are more lv's to do */
	     if lvsw then do;
		Ilv = Ilv + 1;
		if given_lvnm (Ilv) ^= "" then	/* there are more... */
		     goto loop_thru_pvs;
	     end;
	end;					/* end begin block */

	if nprt = 0 then do;
	     if lvsw then
		call error_proc (error_table_$logical_volume_not_defined, entry_name, given_lvnm (Ilv - 1));
	     else if pvsw then
		call error_proc (error_table_$pvid_not_found, entry_name, given_pvnm);
	end;
	else
	     if record_sw then
	     goto display_records;
	else
	     if totsw then do;
	     half_totrec = divide (totrec, 2, 35, 0);
	     half_vtoce = divide (totvtoc, 2, 35, 0);
	     if used_sw then
		call ioa_ ("^6d  ^6d ^3d  ^6d  ^6d ^3d  ^5a  ^a^/",
		     totrec, totrec - totleft,
		     divide ((totrec - totleft) * 100 + half_totrec, totrec, 35, 0),
		     totvtoc, totvtoc - totfreevtoc,
		     divide ((totvtoc - totfreevtoc) * 100 + half_vtoce, totvtoc, 35, 0),
		     lvflags (prev_lvx), prev_lvnm);
	     else if left_sw then
		call ioa_ ("^6d  ^6d ^3d  ^6d  ^6d ^3d  ^5a  ^a^/",
		     totrec, totleft,
		     divide ((totleft) * 100 + half_totrec, totrec, 35, 0),
		     totvtoc, totfreevtoc,
		     divide ((totfreevtoc) * 100 + half_vtoce, totvtoc, 35, 0),
		     lvflags (prev_lvx), prev_lvnm);
						/* print totals accumulated for last lv */
	end;
	else
	     call ioa_ ("");

common_exit:
	call clean_out;
	return;

/* Come back here to print or return a single records left figure */

display_records:
	if left_sw then totrec = totleft;		/* display records left if that's what user wants */
	if used_sw then totrec = totrec - totleft;	/* display records used if that's what uer wants */
	if af_sw then do;
	     call ioa_$rsnnl ("^d", char7, i, totrec);
	     ret = substr (char7, 1, i);
	end;
	else call ioa_ ("^d", totrec);

	goto common_exit;


lvflags: proc (lvx) returns (char (5));

dcl  lvx fixed bin;
dcl  retstr char (5) init ("");

	if dt.lv_array (lvx).public then substr (retstr, 1, 2) = "pb";
	if dt.lv_array (lvx).pdirs_ok then substr (retstr, 4, 2) = "pd";
	return (retstr);

     end lvflags;
%page;
clean_out:
     proc;

	if Ptemp (1) ^= null () then
	     call release_temp_segments_ (entry_name, Ptemp, code);
	Ptemp (1) = null ();
     end clean_out;
%page;
/* A U T O M A T I C */
dcl  Ilv fixed bin,
     Ptemp (2) ptr,					/* ptrs for temp segs */
     af_sw bit (1),
     an fixed bin,
     argl fixed bin,
     argp ptr,
     char7 char (7),
     code fixed bin (35),
     entry_name char (12),
     flag char (1),
     flag1 char (1),
     given_lvnm (10) char (32),			/* array of LV names, to allow >1 */
     given_pvnm char (32),
     gtt_sw bit (1),
     half_totrec fixed bin (35),
     half_vtoce fixed bin (35),
     i fixed bin,
     left_sw bit (1),
     lvsw bit (1),
     max_pvname_ln fixed bin,
     n fixed bin,
     n_vtoce fixed bin,
     nargs fixed bin,
     nprt fixed bin,
     prev_lvnm char (32),
     prev_lvx fixed bin,
     pvsw bit (1),
     pvt_size fixed bin (19),
     record_sw bit (1),
     retl fixed bin,
     retp ptr,
     totfreevtoc fixed bin (35),
     totleft fixed bin (35),
     totrec fixed bin (35),
     totsw bit (1),
     totvtoc fixed bin (35),
     used_sw bit (1);

/* E N T R Y   V A R I A B L E */
dcl  error_proc entry variable automatic options (variable);

/* C O N D I T I O N */
dcl  cleanup condition;

/* B A S E D */

dcl  bchr char (argl) based (argp),
     1 my_pvt_array (pvt.max_n_entries) aligned like pvte based (pvt_arrayp),
     ret char (retl) varying based (retp);		/* active function return arg */

/* E X T E R N A L   E N T R I E S */
dcl  active_fnc_err_ entry options (variable),
     com_err_ entry options (variable),
     cu_$af_return_arg entry (fixed bin, ptr, fixed bin, fixed bin (35)),
     cu_$arg_count entry (fixed bin),
     cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35)),
     get_temp_segments_ entry (char (*), (*) ptr, fixed bin (35)),
     idsort_ entry ((*) char (32) aligned, (*) fixed bin, fixed bin),
     ioa_ entry options (variable),
     ioa_$rsnnl entry options (variable),
     mdc_$read_disk_table
	entry (ptr, fixed bin (35)),
     release_temp_segments_
	entry (char (*), (*) ptr, fixed bin (35)),
     ring_zero_peek_$by_name
	entry (char (*), fixed bin (18), ptr, fixed bin (19), fixed bin (35)),
     ring_zero_peek_$get_max_length
	entry (char (*), fixed bin (19), fixed bin (35));


/* E X T E R N A L   S T A T I C */
dcl  (error_table_$bad_arg,
     error_table_$badopt,
     error_table_$logical_volume_not_defined,
     error_table_$noarg,
     error_table_$not_act_fnc,
     error_table_$pvid_not_found)
	fixed bin (35) ext static;

/* B U I L T I N */
dcl  (addr, char, dim, divide, length, max, null, rtrim, substr) builtin;
%page;
%include disk_table;
%page;
%include pvt;
%page;
%include pvte;
     end list_vols;
