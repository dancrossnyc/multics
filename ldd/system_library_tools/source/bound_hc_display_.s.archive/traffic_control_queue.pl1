/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* format: style4 */
traffic_control_queue: tcq: proc;


/* 8/8/75 RE Mullen: mod for priority scheduler and "-all" arg */
/* Modified 83-06-11 by S. G. Harris (UNCA) to fix required proc reporting. */
/* Modified 83-09-08 by E. N. Kittlitz to eliminate sst references */
/* Modified November 1984 by M. Pandolf to include hc_lock. */

dcl  wc fixed bin;
dcl  APT_BASE fixed bin;
dcl  WCTE_WORDS fixed bin;
dcl  this fixed bin;
dcl  ALL bit (1) aligned;
dcl  type fixed bin;				/* -1:3 = Demon,Intv,AbsQ1,AbsQ2,AbsQ3 */
dcl  cs char (16);
dcl  name char (28);
dcl  proj char (9);
dcl  anon fixed bin;
dcl  ltime fixed bin (71) static;
dcl  a fixed bin;
dcl  b fixed bin;
dcl  c fixed bin;
dcl  d fixed bin;
dcl  e fixed bin;
dcl  f fixed bin;
dcl  h fixed bin;
dcl  bb fixed bin;
dcl  i fixed bin;
dcl  j fixed bin;
dcl  recent fixed bin;
dcl  code fixed bin (35);
dcl  temaxtime fixed bin;
dcl  fg float bin;
dcl  al fixed bin;
dcl  ap ptr;
dcl  ac fixed bin;
dcl  tsdw fixed bin (71);
dcl  tsdwp ptr;

dcl  tcml fixed bin static init (0);
dcl  tcmp0 ptr static;
dcl  tempp ptr static;
dcl  dsp0 ptr static;
dcl  init bit (1) static init ("0"b);
dcl  ms init (1000.e0) float bin static;
dcl  sec init (1000000.e0) float bin static;

dcl  statenames (0:6) char (1) int static options (constant)
	init ("e", "x", "r", "w", "b", "s", "p");

dcl  1 last (0:500) aligned static,			/* saved from last call or zero */
       2 cpu fixed bin (71),
       2 vcpu fixed bin (71),
       2 pf fixed bin (35),
       2 pid bit (36);

dcl  ME char (21) static options (constant) init ("traffic_control_queue");

dcl  ring_zero_peek_ entry (ptr, ptr, fixed bin, fixed bin (35));
dcl  hcs_$make_seg entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35));
dcl  get_userid_ entry (bit (36), char (*), char (*), fixed bin, fixed bin, fixed bin (35));
dcl  ring0_get_$segptr entry (char (*), char (*), ptr, fixed bin (35));
dcl  ioa_ entry options (variable);
dcl  com_err_ entry options (variable);
dcl  cu_$arg_count entry (fixed bin, fixed bin (35));
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));

dcl  arg char (al) based (ap);

dcl  (addr, addrel, baseno, divide, float, ptr, rel, string, substr) builtin;
dcl  (fixed, unspec) builtin;

%page;

	tsdwp = addr (tsdw);
	if ^init
	then do;
	     call ring0_get_$segptr ("", "dseg", dsp0, code);
	     if code ^= 0 then call ERRPRINT ("dseg");
	     call ring0_get_$segptr ("", "tc_data", tcmp0, code);
	     if code ^= 0 then call ERRPRINT ("tc_data");
	     call hcs_$make_seg ("", "", "", 01010b, tempp, code);
	     if code ^= 0 then call ERRPRINT ("temp_seg");
	     i = fixed (baseno (tcmp0));
	     call ring_zero_peek_ (addr (dsp0 -> sdwa (i)), tsdwp, 2, code);
	     if code ^= 0 then call ERRPRINT ("dseg");
	     tcml = (fixed (tsdwp -> sdw.bound, 14) + 1) * 16;

	     do i = 0 to 500;
		last.pid (i) = ""b;			/* will force rest of last(i) to zero lateer */
	     end;
	     init = "1"b;
	end;
	tcmp = tempp;



	ALL = ""b;				/* default is not to print all px's */
	call cu_$arg_count (ac, code);		/* see if any args */
	if code ^= 0 then do;
	     call com_err_ (code, ME);
	     return;
	end;
	if ac > 0 then do;
	     call cu_$arg_ptr (1, ap, al, code);
	     if code ^= 0 then call ERRPRINT ("first arg");
	     if arg = "-all" | arg = "-a" then ALL = "1"b;
	     else do;
		call ioa_ ("^a: Unrecognized option ignored -- ^a", ME, arg);
	     end;
	end;

/* Grab metering data we need. */

	ac = 0;
again:
	if ac > 0 then call ioa_ ("bad sample");
	call ring_zero_peek_ (tcmp0, tcmp, tcml, code);
	if code ^= 0 then call ERRPRINT ("tc_data");
	call ring_zero_peek_ (tcmp0, tcmp, tcml, code);
	if code ^= 0 then call ERRPRINT ("tc_data");
	ac = ac + 1;				/* Count this retry . */
	if ac > 5 then do;				/* Cheap insurance */
						/* happens when tc_data rudely redesigned */
						/* rare that pxss rethreading gives >1 bad samp. */
	     call ioa_ ("^a: aborting, too many bad samples", ME);
	     return;
	end;


/* Find the base of the APT.  Guess if necessary .. */

	APT_BASE = fixed (tcm.apt_offset, 18);
	if APT_BASE = 0 then APT_BASE = 256;		/* old style tc_data */
	WCTE_WORDS = divide (APT_BASE - fixed (tcm.min_wct_index), 17, 17, 0);


/* Validate threading to see if we need another sample */

	if ^ct (tcmp, addr (tcm.ready_q_head), addr (tcm.ready_q_tail)) then go to again;
	if tcm.realtime_q.sentinel ^= ""b then
	     if ^ct (tcmp, addr (tcm.realtime_q), addr (tcm.realtime_q)) then go to again;
	if ^ct (tcmp, addr (tcm.interactive_q), addr (tcm.interactive_q)) then go to again;
	wctep = addr (tcm.wcte (0));
	do i = 0 to 16;
	     if ^ct (tcmp, wctep, wctep) then go to again;
	     wctep = addrel (wctep, WCTE_WORDS);
	end;

	if ltime = 0
	then ltime = tcm.last_time;

/* Print heading. First count processes whose state changed in last 15 seconds. */

	recent = 0;				/* Clear counter. */
	aptep = addrel (tcmp, APT_BASE);
	do i = 0 to tcm.apt_size - 1;
	     if tcm.last_time - state_change_time < 15000000
	     then recent = recent + 1;
	     aptep = addrel (aptep, tcm.apt_entry_size);
	end;
	a = float (tcm.avequeue);
	b = float (tcm.last_time - ltime) / sec + .5e0;
	call ioa_ ("avq = ^d, elapsed time = ^d sec, ^d active last 15 sec.^/^a",
	     a, b, recent,
	     "flags    dtu    dpf temax   te    ts    ti    tssc event d  ws wc process");


/* Print the eligible queue. */

	aptep = addrel (tcmp, tcm.eligible_q_head.fp);
elig_apt_loop: if aptep ^= addr (tcm.ready_q_tail) then do;
	     call PRINT_APTE;
	     aptep = addrel (tcmp, apte.thread.fp);
	     go to elig_apt_loop;
	end;

/* Print the realtime queue. */

	if tcm.realtime_q.sentinel ^= "0"b then do;	/* look in realtime queue */
	     call ioa_ ("^/REALTIME QUEUE:");
	     aptep = addrel (tcmp, tcm.realtime_q.fp);
dead_apt_loop:
	     if aptep ^= addr (tcm.realtime_q) then do;
		call PRINT_APTE;
		aptep = addrel (tcmp, apte.thread.fp);
		go to dead_apt_loop;
	     end;
	end;




/* Print the interactive queue. */

	if tcm.apt_offset ^= "0"b then do;		/* look in interactvve queue */
	     if tcm.deadline_mode ^= 0 then
		call ioa_ ("^/DEADLINE QUEUE:");	/* processes with soft deadlines */
	     else
		call ioa_ ("^/INTERACTIVE QUEUE:");
	     aptep = addrel (tcmp, tcm.interactive_q.fp);
int_apt_loop:
	     if aptep ^= addr (tcm.interactive_q) then do;
		call PRINT_APTE;
		aptep = addrel (tcmp, apte.thread.fp);
		go to int_apt_loop;
	     end;
	end;




/* Print per-workclass queues. */


	if tcm.apt_offset ^= "0"b then do;
	     wctep = addr (tcm.wcte (0));
	     do this = 0 to 16;

		aptep = addrel (tcmp, wct_entry.thread.fp);
		if wct_entry.flags.defined then	/* skip undefined */
		     if tcm.deadline_mode = 0 then
			if wct_entry.realtime = 0 then/* skip realtime as not threaded here unless bug */
			     call ioa_ ("^/WORKCLASS^3d QUEUE: credits = ^5d ms.", this, divide (wct_entry.credits, 1000, 17, 0));
wc_apt_loop:
		if aptep ^= wctep then do;
		     call PRINT_APTE;
		     aptep = addrel (tcmp, apte.thread.fp);
		     go to wc_apt_loop;
		end;


		wctep = addrel (wctep, WCTE_WORDS);
	     end;
	end;

/* Print unthreaded maybe.  Make sure to remember usages in any case. */

	if ALL then
	     call ioa_ ("^/UNTHREADED:");

	do i = 0 to tcm.apt_size - 1;
	     aptep = ptr (tcmp, i * tcm.apt_entry_size + fixed (rel (addrel (tcmp, APT_BASE))));
	     if ALL then
		if unspec (apte.thread) = ""b & apte.state ^= ""b then call PRINT_APTE;
		else if apte.idle then call PRINT_APTE;

	     last.cpu (i) = time_used_clock;
	     last.pf (i) = page_faults;
	     last.vcpu (i) = virtual_cpu_time;
	     last.pid (i) = processid;
	end;

	ltime = tcm.last_time;
	call ioa_ ("^/");				/* White space builds readers. */
	return;


/* ----------------------------------------------------------------- */


ct:  proc (base, head, tail) returns (bit (1) aligned);

dcl  (base, head, tail) ptr;
dcl  (curr, prev, last) ptr;
dcl  1 tword aligned based (curr),
       2 fp bit (18) unal,
       2 bp bit (18) unal;

	curr = head;
ct_next:
	last = curr;
	curr = addrel (base, tword.fp);		/* step to next */
	prev = addrel (base, tword.bp);		/* get backptr */
	if prev ^= last then return (""b);		/* backptr not correct */
	if curr = tail then return ("1"b);		/* have hit tail, all is well */
	go to ct_next;

     end ct;


/* ----------------------------------------------------------------------- */






PRINT_APTE: proc;					/* format and print one apte */

dcl  procno fixed bin;
	procno =
	     divide (fixed (rel (aptep)) - fixed (rel (addrel (tcmp, APT_BASE))), tcm.apt_entry_size, 17, 0);

dcl  i fixed bin;



	if fixed (apte.state) >= 0
	     & fixed (apte.state) <= 6 then cs = statenames (fixed (apte.state));
	else cs = "?";
	j = 2;
	do i = 2 to 9, 13 to 15;
	     if substr (string (apte.flags), i, 1)
	     then do;
		substr (cs, j, 1) = substr ("1WSPHLEIT456ADB", i, 1);
		j = j + 1;
	     end;
	end;
	if ^apte.default_procs_required then do;
	     substr (cs, j, 1) = "(";
	     j = j + 1;
	     do i = 1 to 8;
		if substr (apte.procs_required, i, 1) then do;
		     substr (cs, j, 1) = substr ("abcdefgh", i, 1);
		     j = j + 1;
		end;
	     end;
	     substr (cs, j, 1) = ")";
	     j = j + 1;
	end;


	if processid = last.pid (procno) | processid = ""b then
	     if time_used_clock >= last.cpu (procno) then
		if page_faults >= last.pf (procno) then go to old_ok;
	last.pf (procno) = 0;
	last.cpu (procno) = 0;
	last.vcpu (procno) = 0;

old_ok:

	b = float (time_used_clock - last.cpu (procno)
	     ) / sec + .5e0;
	c = float (page_faults - last.pf (procno));	/* delta page faults */
	if c < 0
	then c = b;
	if apte.idle then d = 0;
	else d = float (te) / ms;
	temaxtime = float (temax) / ms;
	e = float (ts) / ms;
	f = float (ti) / ms;
	fg = float (tcm.last_time - apte.state_change_time) / sec;
	if fg > 999e0 then fg = 999.999;
	unspec (h) = wait_event;
	bb = fixed (ws_size);
	wc = gwcn ();

	if apte.idle then name = "Idle";
	else do;
	     call get_userid_ ((processid), name, proj, type, anon, code);
	     if code ^= 0 then do; name = "not found"; type = 4; end;
	end;

	call ioa_ ("^8a^4d ^6d ^5d ^4d ^5d ^5d ^7.3f ^5o ^1d ^3d ^2d ^a",
	     cs, b, c, temaxtime, d, e, f, fg, h, 0, bb, wc, name); /* somebody can MCR deleting PD index, but not me */

     end PRINT_APTE;




/* -------------------------------------------------------- */


gwcn: proc () returns (fixed bin);
dcl  gwcn_fb fixed bin;
	gwcn_fb = fixed (apte.wct_index, 18) - fixed (tcm.min_wct_index, 18);
	if gwcn_fb < 0 then gwcn_fb = -1; else
	     if apte.wct_index = "0"b then gwcn_fb = 0; else
	     gwcn_fb = divide (gwcn_fb, WCTE_WORDS, 17, 0);
	return (gwcn_fb);
     end gwcn;


ERRPRINT: proc (err_clue);

dcl  err_clue char (16) aligned;

	call com_err_ (code, ME, "^a", err_clue);
	go to MAIN_RETURN;				/* go exit from tcq */

     end ERRPRINT;


MAIN_RETURN: return;				/* Exit here from tcq */

/* format: off */

%page; %include apte;
%page; %include ptw;
%page; %include sdw;
%page; %include tcm;
%page; %include hc_lock;

     end traffic_control_queue;
