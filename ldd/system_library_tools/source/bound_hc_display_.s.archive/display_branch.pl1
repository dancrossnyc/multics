/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


display_branch: procedure options (variable);

/* DISPLAY_BRANCH  A hardcore debugging tool by Bernard Greenberg 05/21/76 */
/*		Modified 10/76 by S. Barr for new hash table format */
/* Modified 1984-07-24 BIM to really, truly, not copy out the entire dir. */



/* usage: display_branch branchpathname */
/*  OR    display_branch segno-of-seg-whose-branch-is-to-be-displayed */
/*  OR    display_branch dirsegno|offset (location of branch) */
/*  OR    display_branch -name branchpathname   if it looks like octal # or ptr */

	dcl     (adir, pdir)	 char (168);
	dcl     (ent, pent)		 char (32);
	dcl     (verify, null, addr, ptr, baseptr, baseno, fixed, size, divide, index, length, rel, reverse, substr, unspec) builtin;
	dcl     q			 (1) ptr;
	dcl     (error_table_$root, error_table_$noentry) fixed bin (35) ext;
	dcl     ring0_get_$segptr	 entry (char (*), char (*), ptr, fixed bin (35));
	dcl     hcs_$fs_get_path_name	 entry (ptr, char (*), fixed bin,
				 char (*), fixed bin (35));
	dcl     (dsn, dnl, ero, esn)	 fixed bin;
	dcl     ofgotten		 bit (1) init ("0"b);
	dcl     cv_oct_check_	 entry (char (*), fixed bin (35)) returns (fixed bin);
	dcl     vs		 char (80) varying;
	dcl     (rzdp, rzdsp)	 ptr;
	dcl     1 tsdw		 like sdw aligned;
	dcl     (lvname, pvname)	 char (32);
	dcl     ppname		 char (168);
	dcl     sname		 char (32);
	dcl     epname		 char (168);
	dcl     mdc_$find_volname	 entry (bit (36) aligned, char (*), char (*), fixed bin (35));
	dcl     mdc_$find_lvname	 entry (bit (36) aligned, char (*), fixed bin (35));
	dcl     date_time_		 entry (fixed bin (71), char (*));
	dcl     (dirsegno, failct)	 fixed bin;
	dcl     hash_index_		 entry (ptr, fixed bin, fixed bin, fixed bin) returns (fixed bin);
	dcl     dirlen		 fixed bin (17);
	dcl     hsi		 fixed bin;
	dcl     phcs_$initiate	 entry (char (*), char (*), char (*), fixed bin, fixed bin, ptr, fixed bin (35));
	dcl     phcs_$terminate_noname entry (ptr, fixed bin (35));
	dcl     phcs_$ring_0_peek	 entry (ptr, ptr, fixed bin);
	dcl     expand_pathname_	 entry (char (*), char (*), char (*), fixed bin (35));
	dcl     (get_temp_segments_, release_temp_segments_) entry (char (*), (*) ptr, fixed bin (35));
	dcl     (cleanup, out_of_bounds) condition;
	dcl     (ioa_, com_err_)	 entry options (variable);
	dcl     cu_$arg_ptr		 entry (fixed bin, ptr, fixed bin, fixed bin (35));
	dcl     arg		 char (argl) based (argp);
	dcl     argp		 ptr, argl fixed bin;
	dcl     myname		 char (19) init ("display_branch") static options (constant);

	dcl     code		 fixed bin (35);

%include sdw;
%include dir_header;
%include dir_ht;
%include dir_entry;
%include dir_link;
%include dir_name;


	call ring0_get_$segptr ("", "dseg", rzdsp, code);
	if code ^= 0 then do;
		call com_err_ (0, myname, "Cannot get dseg ptr");
		return;
	     end;

	call cu_$arg_ptr (1, argp, argl, code);
	if code ^= 0 then do;
noarg:		call com_err_ (code, myname);
		return;
	     end;

	if arg = "-name" | arg = "-nm" | arg = "-path" | arg = "-pn" then do;
		call cu_$arg_ptr (2, argp, argl, code);
		if code ^= 0 then go to noarg;
		go to nooct;
	     end;

	esn = cv_oct_check_ (arg, code);
	if code = 0 then do;			/* legit octal */
		call hcs_$fs_get_path_name (baseptr (esn), adir, dnl, ent, code);
		if code ^= 0 then do;
			call com_err_ (code, myname, "^o", esn);
			return;
		     end;
		if dnl = 0 then adir = ">";		/* Multix cant even act consist. */
		go to got_adir_ent;
	     end;

/* try for x|y */

	dnl = index (arg, "|");
	if dnl = 0 then go to nooct;
	if dnl = 1 | dnl = length (arg) then go to nooct;
	ero = cv_oct_check_ (substr (arg, dnl + 1), code);
	if code = 0 then dsn = cv_oct_check_ (substr (arg, 1, dnl - 1), code);
	if code = 0 then do;			/* Got a branch ptr */
		rzdp = baseptr (dsn);
		call hcs_$fs_get_path_name (rzdp, pdir, dnl, pent, code);
		if code ^= 0 then do;
			call com_err_ (code, myname, "^o", dsn);
			return;
		     end;
		ofgotten = "1"b;
		if dnl = 0 then pdir = ">";
		if pdir = ">" then ppname = ">" || pent;
		else ppname = substr (pdir, 1, trim (pdir)) || ">" || pent;
		go to ext;
	     end;
nooct:
	call expand_pathname_ (arg, adir, ent, code);
	if code ^= 0 then do;
		call com_err_ (code, myname, arg);
		return;
	     end;
got_adir_ent:

	if adir = ">" then if ent = "" then do;
		     call com_err_ (error_table_$root, myname);
		     return;
		end;

	call expand_pathname_ (adir, pdir, pent, (0));
						/* Cannot fail */
	if pdir = ">" then ppname = ">" || pent;
	else ppname = substr (pdir, 1, trim (pdir)) || ">" || pent;

	if pent = "" then epname = ">" || ent;
	else epname = substr (adir, 1, trim (adir)) || ">" || ent;


ext:	on cleanup call release_temp_segments_ (myname, q, (0));
	call get_temp_segments_ (myname, q, code);
	if code ^= 0 then do;
		call com_err_ (code, myname, "Getting temp segment.");
		return;
	     end;

	dp = q (1);


	call phcs_$initiate (pdir, pent, "", 0, 0, rzdp, code);
	if rzdp = null then do;
		call com_err_ (code, myname, ppname);
		call release_temp_segments_ (myname, q, (0));
		return;
	     end;

	if ofgotten then do;
		ep = ptr (dp, ero);
		call m_a (ep, size (entry));
		go to dsplay;
	     end;
	dirsegno = fixed (baseno (rzdp), 18);
	call phcs_$ring_0_peek (rzdp, dp, 1);		/* Cause fault */
	failct = 0;
ftsdw:
	call phcs_$ring_0_peek (addr (rzdsp -> sdwa (dirsegno)), addr (tsdw), 2);
	if tsdw.bound = "0"b then go to ftsdw;
	dirlen = fixed (tsdw.bound, 15) * 16 + 16;

	on out_of_bounds go to refetch_dir;
refetch_dir:
	failct = failct + 1;
	if failct > 10 then do;
		call com_err_ (0, myname, "Cannot get consistent copy of ^a after 10 tries", ppname);
		call phcs_$terminate_noname (rzdp, (0));
		call release_temp_segments_ (myname, q, (0));
		return;
	     end;
	call m_a (dp, size (dir));
	hsi = hash_index_ (addr (ent), trim (ent), 0, (dir.htsize));
	htp = ptr (dp, dp -> dir.hash_table_rp);
	call m_a (htp, (dir.htsize));

	do np = ptr (dp, htp -> hash_table.name_rp (hsi))
	     repeat ptr (dp, np -> names.hash_thread)
	     while (rel (np));
	     call m_a (np, size (names));
	     if fixed (rel (np), 18) >= dirlen then go to refetch_dir;
	     if np -> names.ht_index ^= hsi then go to refetch_dir;
	     if ent = np -> names.name then do;
		     ep = ptr (dp, np -> names.entry_rp);
		     call m_a (ep, size (entry));
		     go to dsplay;
		end;
	end;

/* Name not found.  Cleanup and return. */
	call com_err_ (error_table_$noentry, myname, epname);
	call release_temp_segments_ (myname, q, (0));
	call phcs_$terminate_noname (rzdp, (0));
	return;

dsplay:
	sname = addr (entry.primary_name) -> names.name;
	call ioa_ ("^/^-Branch for ^a in ^a at ^p^/", sname,
	     ppname, ptr (rzdp, rel (ep)));
	if ^entry.bs then do;
		call m_a (ep, divide (length (unspec (link)), 36, 17, 0));
		call ioa_ ("^a (uid ^w) is a link to ^a", sname, link.uid, link.pathname);
	     end;
	else do;

		call mdc_$find_volname ((entry.pvid), pvname, lvname, code);
		if code ^= 0 then do;
			call com_err_ (code, myname, "^/ Cannot determine vol name for pvid ^w", entry.pvid);
			lvname, pvname = "-NOT-CLEAR-";
		     end;

		call ioa_ ("UID ^w, is vtocx ^o on ^a (of log vol. ^a)", entry.uid, entry.vtocx, pvname, lvname);
		if entry.dirsw then call ioa_ ("^a is a directory.", sname);
		if entry.master_dir then do;
			call mdc_$find_lvname (entry.sons_lvid, lvname, code);
			if code ^= 0 then do;
				lvname = "-NOT-CLEAR-";
				call com_err_ (code, myname, "Cannot get LV name for lvid ^w", entry.sons_lvid);
			     end;
			call ioa_ ("^a is a master dir for LV ^a", sname, lvname);
		     end;
		vs = "";
		if entry.oosw then call putsw (" oosw");
		if entry.per_process_sw then call putsw (" per-process");
		if entry.copysw then call putsw (" copysw");
		if entry.multiple_class then call putsw (" multi-class");
		if entry.safety_sw then call putsw (" safety_sw");
		if entry.audit_flag then call putsw (" audit");
		if entry.security_oosw then call putsw (" sec-oosw");
		if entry.tpd then call putsw (" tpd");
		call putsw ("OOP");
		if entry.entrypt_sw then call ioa_
			("Call limiter at ^o .", fixed (entry.entrypt_bound, 14));
		call ioa_ ("Ring brackets (^o ^o ^o)", fixed (entry.ring_brackets
		     (1), 3), fixed (entry.ring_brackets (2), 3), fixed
		     (entry.ring_brackets (3), 3));
	     end;
	if entry.dtem then call ioa_ ("Entry modified ^a", dtc (entry.dtem));
	else call ioa_ ("DTEM not set.");
	if entry.dtd then call ioa_ ("Dumped ^a", dtc ((entry.dtd)));
	else call ioa_ ("Never dumped.");
	if entry.nnames > 1 then call ioa_ ("^d names.", entry.nnames);
	if entry.bs then do;
		call get_access_class (entry.access_class, code);
		if code ^= 0 then call ioa_ ("Unable to convert access class information.");
	     end;
	call release_temp_segments_ (myname, q, (0));
	call phcs_$terminate_noname (rzdp, (0));
	return;

trim: proc (ch) returns (fixed bin);
	dcl     ch		 char (*);
	dcl     x			 fixed bin;
	x = verify (reverse (ch), " ");
	if x ^= 0 then x = length (ch) - x + 1;
	return (x);
     end;

m_a: proc (cp, sz);
						/* This proc is needed to avoid copying a whole directory out,
						   which can, and did one May morning in Phoenix, withdraw a large number
						   of pages against the RLV. Writers of similar programs beware. */
	dcl     (cp, rgp)		 ptr, sz fixed bin;
	rgp = ptr (rzdp, rel (cp));
	call phcs_$ring_0_peek (rgp, cp, sz);
     end;

dtc: proc (d) returns (char (24));			/* Proc to convert date_times */

	dcl     fbuf		 fixed bin (71);
	dcl     d			 bit (36) aligned, cd char (24);

	fbuf = 0;
	substr (unspec (fbuf), 21) = d;
	call date_time_ (fbuf, cd);
	return (cd);
     end dtc;

putsw: proc (swn);

	dcl     swn		 char (*);
	if length (vs) + length (swn) > 70 | swn = "OOP" then do;
		if vs = "" then ;
		else call ioa_ ("Switches:^a", vs);
		vs = "";
	     end;
	vs = vs || swn;
     end putsw;


get_access_class:
     proc (access_class, code);

	dcl     access_class	 bit (72) aligned,
	        (class, temp_string)	 char (336),
	        (class_len, k, kk)	 fixed bin,
	        first		 bit (1),
	        code		 fixed bin (35);
	dcl     convert_authorization_$to_string_short
				 entry (bit (72) aligned, char (*), fixed bin (35));

	code = 0;

	call convert_authorization_$to_string_short (access_class, class, code);
	if code ^= 0 then return;
	if class = "" then call ioa_ ("Access Class:  system_low");
	else do;
						/* format access class in lines of 50 chars */
		class_len = index (class, " ") - 1;
		if class_len = -1 then class_len = 336;
		k = 1;
		first = "1"b;
		do while ((class_len - k + 1) > 50);
		     temp_string = substr (class, k, 50);
		     kk = length (temp_string) + 1 - index (reverse (temp_string), ",");
		     call ioa_ ("^[Access Class:^;             ^]  ^a", (first), substr (class, k, kk));
		     first = "0"b;
		     k = k + kk;
		end;
		call ioa_ ("^[Access Class:  ^;               ^]^a", (first), substr (class, k));
	     end;
     end get_access_class;
     end;
