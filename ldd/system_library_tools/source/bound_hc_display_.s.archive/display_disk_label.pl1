/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: style4,initcol1,indattr,declareind8,dclind4,idind33,ifthenstmt,ifthen,^indproc,delnl,insnl */

display_disk_label:
ddl:
     proc;

/*  display_disk_label (or ddl), display_pvte

   Commands to display the label and/or PVTE of a mounted Storage
   System volume.

   Calling sequence:

   {display_disk_label|display_pvte} {dskX_NN | PVNAME | PVID} {-control_args}

   If display_disk_label is called, the default is to display information
   from the volume label only.  If display_pvte is called, the
   default is to display information from the PVTE only.

   Control Arguments:

   -pvid PVID
   selects the volume with Physical Volume ID PVID

   -long, -lg
   for display_disk_label, also displays information from the PVTE
   for display_pvte, also displays information form the label


   Written November 1981 by J. Bongiovanni
   Modified March 1982, J. Bongiovanni, for record stocks
   Modified August 1982, J. Bongiovannni, for usage message, print more flags,
   the scavenger, and ALT partition
   Modified August 1984, Allen Ball, to make compatiable with
   bce_display_disk_label by using new subroutine display_disk_label_.
*/

/****^  HISTORY COMMENTS:
  1) change(86-01-16,Fawcett), approve(86-04-10,MCR7383),
     audit(86-06-30,Coppola), install(86-07-18,MR12.0-1098):
     Add support for subvolumes, and 512_WORD_IO, 3380 and 3390.
  2) change(86-11-20,Lippard), approve(86-12-08,MCR7591),
     audit(87-01-21,Beattie), install(87-03-23,MR12.1-1009):
     Fix bug: stop losing a bit when converting pvid.
  3) change(88-03-30,GWMay), approve(88-04-12,MCR7867),
     audit(88-06-14,Beattie), install(88-07-19,MR12.2-1061):
     Changed to display octal numbers with "o".
  4) change(88-05-27,GWMay), approve(88-05-27,MCR7883),
     audit(88-06-14,Beattie), install(88-07-19,MR12.2-1061):
     Changed to display the status of volume dumper bit maps.
                                                   END HISTORY COMMENTS */

	label_call = "1"b;
	do_label = "1"b;
	do_pvte = "0"b;
	myname = "display_disk_label";
	goto COMMON;

display_pvte:
     entry;

	label_call = "0"b;
	do_label = "0"b;
	do_pvte = "1"b;
	myname = "display_pvte";


/*  Romp through arguments, validating them */

COMMON:
	have_sv, have_subsys_unit, have_pvname, have_pvid = "0"b;
	unit, subvol_num = 0;

	call cu_$arg_count (nargs, code);
	if code ^= 0 then do;
	     call com_err_ (code, myname);
	     return;
	end;

	if nargs = 0 then do;
USAGE:
	     call com_err_ (error_table_$noarg, myname, "
Usage: ^a <dskX_NN or PVNAME or PVID> {-long, -lg}", myname);
	     return;
	end;

	do arg_no = 1 to nargs;

	     call cu_$arg_ptr (arg_no, argp, argl, code);
	     if code ^= 0 then do;
		call com_err_ (code, myname, "Argument ^d", arg_no);
		return;
	     end;

	     if substr (arg, 1, 1) ^= "-" then do;	/* dskX_NN or pvname or pvid */
		if arg_no ^= 1 then do;		/* Which must be 1st argument */
BAD_OPT:
		     call com_err_ (error_table_$badopt, myname, arg);
		     return;
		end;
		if substr (arg, 1, 3) = "dsk" & (argl = 7 | argl = 8) then
		     if substr (arg, 5, 1) = "_" then do;
						/* dskX_NN */
			subsys_name = substr (arg, 1, 4);
			unit = cv_dec_check_ (substr (arg, 6, 2), code);
			if code ^= 0 then do;
BAD_DISK:
			     call com_err_ (0, myname, "Invalid disk unit ^a", arg);
			     return;
			end;
			if argl = 8 then do;
			     subvol_num = index (valid_sv_string, substr (arg, 8, 1)) - 1;
			     if subvol_num < 0 then goto BAD_DISK;
			     have_sv = "1"b;
			end;
			have_subsys_unit = "1"b;
		     end;
		if ^have_subsys_unit then do;		/* pvname or pvid */
		     pvid_bin = cv_oct_check_ (arg, code);
		     if code = 0 then do;
			pvid = unspec (pvid_bin);
			have_pvid = "1"b;
		     end;
		     else do;
			pvname = arg;
			have_pvname = "1"b;
		     end;
		end;
	     end;

	     else if arg = "-pvid" then do;
		arg_no = arg_no + 1;
		call cu_$arg_ptr (arg_no, argp, argl, code);
		if code ^= 0 then do;
		     call com_err_ (code, myname, "PVID");
		     return;
		end;
		pvid_bin = cv_oct_check_ (arg, code);
		if code ^= 0 then do;
		     call com_err_ (0, myname, "Invalid PVID ^a", arg);
		     return;
		end;
		pvid = unspec (pvid_bin);
		have_pvid = "1"b;
	     end;

	     else if arg = "-long" | arg = "-lg" then do;
		if label_call then
		     do_pvte = "1"b;
		else do_label = "1"b;
	     end;

	     else goto BAD_OPT;

	end;

	if ^have_pvname & ^have_subsys_unit & ^have_pvid then go to USAGE;

	if (have_pvname | have_subsys_unit) & have_pvid then do;
	     call com_err_ (error_table_$inconsistent, myname, "^[^a^;^1s^]^[^a_^a^;^2s^] and -pvid", have_pvname,
		pvname, have_subsys_unit, subsys_name, convert (unit_pic, unit));
	     return;
	end;
%page;
/*  Copy the PVT and stock_seg from ring-0  */

	temp_segp (1) = null ();

	on cleanup call clean_me_out;

	call get_temp_segments_ (myname, temp_segp, code);
	if code ^= 0 then do;
	     call com_err_ (code, myname, "Getting temp segments");
	     return;
	end;
	pvtp = temp_segp (1);
	labelp = temp_segp (2);
	stock_segp = temp_segp (3);

	call copy_ring0_seg ("pvt", pvtp, r0_pvtp);
	call copy_ring0_seg ("stock_seg", stock_segp, r0_stock_segp);

	call ring0_get_$segptr ("", "scavenger_data", r0_scav_datap, code);
	if code ^= 0 then do;
	     call com_err_ (code, myname, "scavenger_data");
	     call clean_me_out;
	     return;
	end;

	pvt_arrayp = addr (pvt.array);


%page;
/*  Find pvtx and pvid (possibly pvname, too) for unit  */

	if have_subsys_unit then do;			/* Given dskX_NN */
	     found_pvte = "0"b;
	     do pvtx = 1 repeat pvtx + 1 while (^found_pvte & pvtx <= pvt.n_entries);
		pvtep = addr (my_pvt_array (pvtx));
		if pvte.devname = subsys_name & pvte.logical_area_number = unit & pvte.used then do;
		     found_pvte = "1"b;
		     if have_sv & pvte.sv_num ^= subvol_num then found_pvte = "0"b;
						/* wrong Subvolume */
		     if pvte.is_sv & ^have_sv then do;	/* must specify Subvolume to display */
			call com_err_ (error_table_$subvol_needed, myname, "^a_^a", subsys_name,
			     convert (unit_pic, unit));
			call clean_me_out;
			return;
		     end;
		     if have_sv & ^pvte.is_sv then do;	/* must NOT specify Subvolume */
			call com_err_ (error_table_$subvol_invalid, myname, "^a_^a", subsys_name,
			     convert (unit_pic, unit));
			call clean_me_out;
			return;
		     end;
		end;
	     end;
	     if ^found_pvte then do;
		call com_err_ (0, myname, "^a_^a^[^a^;^1s^] not found in PVT", subsys_name, convert (unit_pic, unit),
		     have_sv, substr (valid_sv_string, subvol_num + 1, 1));
		call clean_me_out;
		return;
	     end;
	     pvid = pvte.pvid;
	     call pvname_to_pvtx_$pvid (pvid, pvtx, pvname, code);
	     if code ^= 0 then do;
		call com_err_ (code, myname, "PVID ^wo", pvid);
		call clean_me_out;
		return;
	     end;
	end;

	else if have_pvname then do;			/* pvname given */
	     call pvname_to_pvtx_ (pvname, pvtx, pvid, code);
	     if code ^= 0 then do;
		call com_err_ (code, myname, pvname);
		call clean_me_out;
		return;
	     end;
	     pvtep = addr (my_pvt_array (pvtx));
	end;

	else do;
	     call pvname_to_pvtx_$pvid (pvid, pvtx, pvname, code);
	     if code ^= 0 then do;
		call com_err_ (code, myname, "PVID ^wo", pvid);
		call clean_me_out;
		return;
	     end;
	     pvtep = addr (my_pvt_array (pvtx));
	end;

	if pvte.is_sv then do;
	     if have_subsys_unit & ^have_sv then max_pvtx = pvtx + (pvte.num_of_svs - 1);
	     max_pvtx = pvtx;
	end;
	else max_pvtx = pvtx;
%page;
	do pvtx = pvtx to max_pvtx;
	     pvtep = addr (my_pvt_array (pvtx));



	     if do_label then do;


/*  Read the disk label, printing an error message on no access */

		on linkage_error goto LINKAGE_ERROR;

		call phcs_$read_disk_label (pvid, labelp, code);

		revert linkage_error;

		if code ^= 0 then do;
		     call com_err_ (code, myname, pvname);
		     call clean_me_out;
		     return;
		end;

/*  Print the label in reasonable form  */

		call ioa_ ("^/Label for Multics Storage System Volume ^a on ^a_^a^[^a^;^1s^] ^a ^[(Private)^;^1s^]^/",
		     pvname, pvte.devname, convert (unit_pic, pvte.logical_area_number), pvte.is_sv, pvte.sv_name,
		     device_names (pvte.device_type), label.private);
		call display_disk_label_ (labelp);
	     end;

	     if do_pvte then do;
		call ioa_ ("^/PVTE for Multics Storage System Volume ^a on ^a_^a^[^a^;^1s^] ^a at pvt|^o^/", pvname,
		     pvte.devname, convert (unit_pic, pvte.logical_area_number), pvte.is_sv, pvte.sv_name,
		     device_names (pvte.device_type), rel (pvtep));

		call ioa_ ("PVID^-^-^wo^/LVID^-^-^wo^/", pvte.pvid, pvte.lvid);
		call ioa_ ("VTOCEs^/  Number^-^-^8d (^oo)^/  Left^-^-^8d (^oo)", pvte.n_vtoce, pvte.n_vtoce,
		     pvte.n_free_vtoce, pvte.n_free_vtoce);
		call ioa_ ("^/Records^/  Number^-^-^8d (^oo)^/  Left^-^-^8d (^oo)", pvte.totrec, pvte.totrec,
		     pvte.nleft, pvte.nleft);
		if pvte.is_sv then
		     call ioa_ (
			"^/Subvolume Info^/  sv_num^-^-^8d^/  num_of_svs^-^8d^/  record_factor^-^8d^/  records_per_cyl^-^8d",
			pvte.sv_num, pvte.num_of_svs, pvte.record_factor, pvte.records_per_cyl);
		call ioa_ ("^/Inconsistencies^-^8d", pvte.vol_trouble_count);
		call ioa_ ("
The volume dumper bit maps located at dbm_seg|^o and dbm_seg|^o
are ^[NOT ^]consistent.", pvte.dbmrp (1), pvte.dbmrp (2), pvte.inconsistent_dbm);

		if unspec (pvte.volmap_astep) ^= ""b & pvte.volmap_astep ^= null () then do;
		     call ioa_ ("^/Volume Map^/  volmap_seg ASTE^-^a", convert_ptr (pvte.volmap_astep));
		     if unspec (pvte.volmap_stock_ptr) ^= ""b & pvte.volmap_stock_ptr ^= null () then do;
			record_stockp = ptr (stock_segp, rel (pvte.volmap_stock_ptr));
			if pvte.volmap_stock_ptr = ptr (r0_stock_segp, rel (record_stockp))
			     & record_stock.pvtep = ptr (r0_pvtp, rel (pvtep)) then do;
			     call ioa_ ("  record stock^-^a", convert_ptr (pvte.volmap_stock_ptr));
			     bias = 64 * 32;	/* Old volume map kludge */
			     do volmap_pagex = 1 to record_stock.n_volmap_pages;
				call ioa_ ("  Page ^1d - Base^-^8o^/^11xFree^-^8o", volmap_pagex - 1,
				     record_stock.volmap_page (volmap_pagex).baseadd + bias,
				     record_stock.volmap_page (volmap_pagex).n_free);
				bias = 0;
			     end;
			     call ioa_ ("  vtoce stock^-^a", convert_ptr (pvte.vtoc_map_stock_ptr));
			end;
		     end;
		end;


		if pvte.scavenger_block_rel ^= ""b then
		     call ioa_ ("^/Scavenge in progress^/  scavenger block^-^a",
			convert_ptr ((ptr (r0_scav_datap, pvte.scavenger_block_rel))));

		on_string = "^/ON:^-";
		off_string = "^/OFF:^-";
		on_line_l = 0;
		off_line_l = 0;
		call set_on_off (pvte.used, "used");
		call set_on_off (pvte.is_sv, "is_sv");
		call set_on_off (pvte.storage_system, "storage_system");
		call set_on_off (pvte.root_lv, "root_lv");
		call set_on_off (pvte.rpv, "rpv");
		call set_on_off (pvte.permanent, "permanent");
		call set_on_off (pvte.testing, "testing");
		call set_on_off (pvte.being_mounted, "being_mounted");
		call set_on_off (pvte.being_demounted, "being_demounted");
		call set_on_off (pvte.removable_pack, "removable_pack");
		call set_on_off (pvte.check_read_incomplete, "check_read_incomplete");
		call set_on_off (pvte.device_inoperative, "device_inoperative");
		call set_on_off (pvte.scav_check_address, "scav_check_address");
		call set_on_off (pvte.deposit_to_volmap, "deposit_to_volmap");
		call set_on_off (pvte.being_demounted2, "being_demounted2");
		call set_on_off (pvte.pc_vacating, "pc_vacating");
		call set_on_off (pvte.vacating, "vacating");
		call set_on_off (pvte.hc_part_used, "hc_part_used");
		call set_on_off (pvte.volmap_lock_notify, "volmap_lock_notify");
		call set_on_off (pvte.volmap_idle_notify, "volmap_idle_notify");
		call set_on_off (pvte.vtoc_map_lock_notify, "vtoc_map_lock_notify");
		call set_on_off (pvte.dmpr_in_use (incr), "dmpr_in_use(incr)");
		call set_on_off (pvte.dmpr_in_use (cons), "dmpr_in_use(cons)");
		call set_on_off (pvte.dmpr_in_use (comp), "dmpr_in_use(comp)");

		call ioa_ (rtrim (on_string));
		call ioa_ (rtrim (off_string));

		call ioa_ ("^/Volume Map from PVTE");
		call ioa_ ("
   First Record             Size");
		call ioa_ (MAP_IOA_STRING, LABEL_ADDR, LABEL_ADDR, VTOC_ORIGIN - LABEL_ADDR, VTOC_ORIGIN - LABEL_ADDR,
		     "Label  Region");
		call ioa_ (MAP_IOA_STRING, VTOC_ORIGIN, VTOC_ORIGIN, pvte.vtoc_size - VTOC_ORIGIN,
		     pvte.vtoc_size - VTOC_ORIGIN, "VTOC   Region");
		if pvte.baseadd - pvte.vtoc_size > 0 then
		     call ioa_ (MAP_IOA_STRING, pvte.vtoc_size, pvte.vtoc_size, pvte.baseadd - pvte.vtoc_size,
			pvte.baseadd - pvte.vtoc_size, "Partitions");
		call ioa_ (MAP_IOA_STRING, pvte.baseadd, pvte.baseadd, pvte.totrec, pvte.totrec, "Paging Region");
		if last_rec_num (pvte.device_type) - (pvte.baseadd + pvte.totrec) > 0 then
		     call ioa_ (MAP_IOA_STRING, pvte.baseadd + pvte.totrec, pvte.baseadd + pvte.totrec,
			last_rec_num (pvte.device_type) - (pvte.baseadd + pvte.totrec),
			last_rec_num (pvte.device_type) - (pvte.baseadd + pvte.totrec), "Partitions");
		call ioa_ ("^22t^8d (^oo)^51tTotal  Size^/", rec_per_sv (pvte.device_type),
		     rec_per_sv (pvte.device_type));
	     end;
	end;
%page;

GLOBAL_RETURN:
	call clean_me_out;

	return;

LINKAGE_ERROR:
	call com_err_ (error_table_$not_privileged, myname, "phcs_");
	call clean_me_out;
	return;
%page;
/*  Internal procedure for cleanup  */

clean_me_out:
     proc;

	if temp_segp (1) ^= null () then call release_temp_segments_ (myname, temp_segp, code);
	temp_segp (1) = null ();

     end clean_me_out;



/*  Internal procedure to convert a pointer to a fixed size character string  */

convert_ptr:
     proc (p) returns (char (8));

dcl p			       ptr unaligned;

dcl p_char		       char (8);
dcl p_char_ret		       char (8);
dcl p_char_len		       fixed bin (21);

	call ioa_$rsnnl ("^p", p_char, p_char_len, p);
	p_char_ret = "";
	substr (p_char_ret, 9 - p_char_len, p_char_len) = substr (p_char, 1, p_char_len);
	return (p_char_ret);

     end convert_ptr;



/*  Internal procedure to copy a named segment from ring-0 */

copy_ring0_seg:
     proc (name, copy_ptr, ring0_ptr);

dcl name			       char (*);
dcl copy_ptr		       ptr;
dcl ring0_ptr		       ptr;

dcl code			       fixed bin (35);
dcl nwords		       fixed bin (19);

	call ring0_get_$segptr ("", name, ring0_ptr, code);
	if code ^= 0 then do;
RING0_SEG_ERR:
	     call com_err_ (code, myname, name);
	     goto GLOBAL_RETURN;
	end;

	call ring_zero_peek_$get_max_length (name, nwords, code);
	if code ^= 0 then goto RING0_SEG_ERR;

	call ring_zero_peek_$by_name (name, 0, copy_ptr, nwords, code);
	if code ^= 0 then goto RING0_SEG_ERR;

     end copy_ring0_seg;

/*  Internal procedure to maintain ioa control strings for On and Off  */

set_on_off:
     proc (this_bit, this_name);

dcl this_bit		       bit (1);
dcl this_name		       char (*);

	if this_bit then
	     call set (on_string, this_name, on_line_l);
	else call set (off_string, this_name, off_line_l);
	return;


set:
     proc (ioa_string, name, line_l);

dcl ioa_string		       char (*);
dcl name			       char (*);
dcl line_l		       fixed bin;

dcl name_l		       fixed bin;

	name_l = length (name);
	if name_l > MAX_LINE_L then return;

	if name_l + line_l > MAX_LINE_L then do;
	     ioa_string = rtrim (ioa_string) || "^/^- " || name || " ";
	     line_l = name_l + 1;
	end;
	else do;
	     ioa_string = rtrim (ioa_string) || " " || name || " ";
	     line_l = line_l + name_l + 1;
	end;

     end set;

     end set_on_off;
%page;
/*  Automatic  */

dcl arg_no		       fixed bin;		/* Current argument number */
dcl argl			       fixed bin (21);	/* Current argument length */
dcl argp			       ptr;		/* Pointer to current argument */
dcl bias			       fixed bin;
dcl code			       fixed bin (35);	/* Standard error code */
dcl do_label		       bit (1);		/* ON => display information from label */
dcl do_pvte		       bit (1);		/* ON => display information from PVTE */
dcl found_pvte		       bit (1);		/* ON => found pvte in pvt */
dcl have_pvid		       bit (1);		/* ON => PVID given */
dcl have_pvname		       bit (1);		/* ON => PVNAME given */
dcl have_subsys_unit	       bit (1);		/* ON => dskX_NN given */
dcl have_sv		       bit (1);		/* ON => dskX_NNA given to indicate subvolume */
dcl label_call		       bit (1);		/* ON => display_disk_label called */
dcl max_pvtx		       fixed bin (17);	/* max number of pvte's to look at for subvol */
dcl myname		       char (32);		/* Name of command called */
dcl nargs			       fixed bin;		/* Number of arguments */
dcl off_line_l		       fixed bin;		/* Working line length for OFF flags */
dcl off_string		       char (1024);		/* OFF ioa_ control string */
dcl on_line_l		       fixed bin;		/* Working line length for ON flags */
dcl on_string		       char (1024);
dcl pvid			       bit (36) aligned;	/* PVID */
dcl pvid_bin		       fixed bin (35);	/* Temp for conversion */
dcl pvtx			       fixed bin;		/* Index into pvte array */
dcl pvname		       char (32);		/* Physical volume name */
dcl r0_pvtp		       ptr;		/* Pointer to PVT in ring-0 */
dcl r0_scav_datap		       ptr;		/* Pointer to scavenger_data in ring-0 */
dcl r0_stock_segp		       ptr;		/* Pointer to stock_seg in ring-0 */
dcl subsys_name		       char (4);		/* Name of disk subsystem */
dcl subvol_num		       fixed bin (17);	/* Number of subvolume user requested (0, 1 or 2) */
dcl temp_segp		       (N_TEMP_SEGS) ptr;	/* Temporary segments used by command */
dcl unit			       fixed bin (35);	/* Unit number given */
dcl unit_pic		       pic "99";		/* For printing unit number */
dcl volmap_pagex		       fixed bin;

/*  Static  */

dcl MAP_IOA_STRING		       char (29) static options (constant) init ("^8d (^oo)^22t^8d (^oo)^51t^4a");

dcl MAX_LINE_L		       fixed bin int static options (constant) init (60);
dcl N_TEMP_SEGS		       fixed bin int static options (constant) init (3);
						/* Number temp segments used */

/*  Based  */

dcl arg			       char (argl) based (argp);
						/* Current argument */
dcl 1 my_pvt_array		       (pvt.max_n_entries) aligned like pvte based (pvt_arrayp);

/*  Entry  */

dcl com_err_		       entry options (variable);
dcl cu_$arg_count		       entry (fixed bin, fixed bin (35));
dcl cu_$arg_ptr		       entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl cv_dec_check_		       entry (char (*), fixed bin (35)) returns (fixed bin (35));
dcl cv_oct_check_		       entry (char (*), fixed bin (35)) returns (fixed bin (35));
dcl display_disk_label_	       entry (ptr);
dcl ioa_			       entry options (variable);
dcl ioa_$rsnnl		       entry options (variable);
dcl get_temp_segments_	       entry (char (*), (*) ptr, fixed bin (35));
dcl release_temp_segments_	       entry (char (*), (*) ptr, fixed bin (35));
dcl ring_zero_peek_$by_name	       entry (char (*), fixed bin (18), ptr, fixed bin (19), fixed bin (35));
dcl ring_zero_peek_$get_max_length   entry (char (*), fixed bin (19), fixed bin (35));
dcl ring0_get_$segptr	       entry (char (*), char (*), ptr, fixed bin (35));
dcl phcs_$read_disk_label	       entry (bit (36) aligned, ptr, fixed bin (35));
dcl pvname_to_pvtx_		       entry (char (*), fixed bin, bit (36) aligned, fixed bin (35));
dcl pvname_to_pvtx_$pvid	       entry (bit (36) aligned, fixed bin, char (*), fixed bin (35));


/*  External  */

dcl error_table_$badopt	       fixed bin (35) external;
dcl error_table_$inconsistent	       fixed bin (35) external;
dcl error_table_$noarg	       fixed bin (35) external;
dcl error_table_$not_privileged      fixed bin (35) external;
dcl error_table_$subvol_invalid      fixed bin (35) external;
dcl error_table_$subvol_needed       fixed bin (35) external;

/*  Condition  */

dcl cleanup		       condition;
dcl linkage_error		       condition;

/*  Builtin  */

dcl addr			       builtin;
dcl convert		       builtin;
dcl index			       builtin;
dcl length		       builtin;
dcl null			       builtin;
dcl ptr			       builtin;
dcl rel			       builtin;
dcl rtrim			       builtin;
dcl substr		       builtin;
dcl unspec		       builtin;
%page;
%include backup_static_variables;
%page;
%include disk_pack;
%page;
%include fs_dev_types;
%page;
%include fs_vol_label;
%page;
%include pvt;
%include pvte;
%include stock_seg;

     end display_disk_label;
