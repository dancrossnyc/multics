/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* DESCRIPTION:
   Prints the apt entry.
*/

/****^ HISTORY:
Written by unknown, sometime.
Modified:
06/01/78 by T. Casey:  to add several new control args, print more info
            for -brief, and always print channel and person.
06/01/81 by T. Casey:  to fix it up for installation, and add process_id
            active function.
11/01/81 by E. N. Kittlitz:  user_table_entry conversion.
06/30/83 by E. A. Ranzenbach:  for processor subset changes.
07/30/84 by R. Michael Tague:  IPS name lengths were changed from 4 chars to
            32.  Added dm_shutdown_warning_ and dm_user_shutdown_ signals.
08/22/84 by R. Michael Tague:  Removed dm_shutdown_warning_ and
            dm_user_shutdown_ IPS signals.  Added system_shutdown_scheduled_
            and dm_shutdown_scheduled_ IPS signals.
   Modified November 1984 by M. Pandolf to include hc_lock.

   12/10/84 by E. Swenson for new IPC variables.
*/


/****^  HISTORY COMMENTS:
  1) change(87-04-26,GDixon), approve(87-07-13,MCR7741),
     audit(87-07-24,Brunelle), install(87-08-04,MR12.1-1055):
     Upgraded for change to answer_table.incl.pl1 and user_table_entry.incl.pl1
  2) change(87-07-24,GDixon), approve(87-07-24,MCR7741),
     audit(87-07-24,Brunelle), install(87-08-04,MR12.1-1055):
      A) Correct stringsize errors.
  3) change(87-11-03,GDixon), approve(88-08-08,MCR7960),
     audit(88-08-09,Lippard), install(88-08-22,MR12.2-1088):
      A) Add process lock-id to normal pae output, to aid in debugging locking
         problems.  (phx13768)
      B) Avoid referencing apte elements via the f array; reference them by
         name instead.  Use the f array only to display the apte in octal.
      C) Split lengthy output lines to avoid breaking across line boundary.
  4) change(88-07-26,Lippard), approve(88-08-08,MCR7960),
     audit(88-08-16,Farley), install(88-08-22,MR12.2-1088):
      Use user's default time zone instead of system default. (Hardcore
      1014, 1026).  Make pae -absentee print APTEs for the user's absentee
      processes (instead of the user's own APTE). (Hardcore 1061)
                                                   END HISTORY COMMENTS */


/* format: style4 */

print_apt_entry: pae: proc;

/* DECLARATIONS */

/* Automatic and based variables */

/* based, and pointers, lengths, and things they're based on */

dcl  ap ptr;
dcl  al fixed bin;
dcl  bchr char (al) based (ap);

dcl  f (0:size (apte) - 1) fixed bin (35) based (aptep);

dcl  proc_id bit (36) aligned;
dcl  procid fixed bin (35) aligned based (addr (proc_id));

dcl  temp_date_time char (16);			/* mm/dd/yy  HHMM.M */
dcl  temp_date char (8) based (addr (temp_date_time));	/* mm/dd/yy */

dcl  first_17_flags (17) bit (1) unaligned based (addr (apte.flags));
dcl  flag18 bit (1) unaligned based (addr (apte.flags.firstsw));

dcl  return_ptr ptr;
dcl  return_len fixed bin;
dcl  return_string char (return_len) varying based (return_ptr); /* active function return string */

/* switches */

dcl  display_mode fixed bin init (2);			/* 0= -no_display, 1= -brief_display, 2= -display */

dcl  (af_sw, apte_offset_sw, as_sw, chn_sw, dmn_sw, dump_sw, ia_sw, id_sw, multiple_sw,
     pae_sw, pdir_sw, pid_sw, process_id_sw, short_sw, term_channel_sw, user_sw) bit (1) aligned init (""b);

/* fixed bin */

dcl  (total_matched, this_id_matched) fixed bin;

dcl  argno fixed bin;
dcl  nargs fixed bin;
dcl  ids fixed bin init (0);
dcl  code fixed bin (35);
dcl  i fixed bin;
dcl  apte_offset fixed bin (18);

dcl  alrm fixed bin (71);
dcl  now fixed bin (71);
dcl  cpu_mon fixed bin (71) init (0);

/* character strings */

dcl  pers char (24);
dcl  proj char (12);
dcl  tag char (1);
dcl  channel char (32);

dcl  pers_arg char (23) varying;
dcl  proj_arg char (10) varying;
dcl  tag_arg char (2) varying;

dcl  today char (8);
dcl  c32 char (32);
dcl  (flags, ips_pending) char (256) varying init ("");
dcl  segname char (32);
dcl  me char (16);

/* structures */

dcl  1 tc_data like apte aligned;			/* place in stack to put one APTE */


/* Internal static constants */

dcl  state_names (0:6) char (8) int static options (constant) init
	("Empty", "Running", "Ready", "Waiting", "Blocked", "Stopped", "Ptl_wait");
dcl  flag_names (17) char (16) int static options (constant) init
	("mbz1", "wakeup_waiting", "stop_pending", "pre-empted", "hproc", "loaded", "eligible", "idle", "interaction",
	"pre-empt_pending", "default_proc_set", "realtime_burst", "always_loaded", "dbr_loaded", "being_loaded", "shared_stack_0", "page_wait");

dcl  sysdir char (168) int static options (constant) init (">system_control_1");
dcl  CAPS char (26) int static options (constant) init ("ABCDEFGHIJKLMNOPQRSTUVWXYZ");

/* Internal static variables */

dcl  apte1_offset fixed bin int static init (0);
dcl  (static_ansp, static_dutp, tcdp0, static_autp) ptr static;
dcl  (tables_initiated, tcd_initiated) bit (1) aligned int static init (""b);

/* External static variables */

dcl  error_table_$badopt ext fixed bin (35);
dcl  error_table_$inconsistent ext fixed bin (35);
dcl  error_table_$not_act_fnc ext fixed bin (35);

/* Entries, external constant, and variable */

dcl  err_proc variable entry options (variable);		/* com_err_ or active_fnc_err_ */

dcl  active_fnc_err_ entry options (variable);
dcl  com_err_ entry options (variable);
dcl  cu_$af_return_arg entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  cv_oct_check_ entry (char (*), fixed bin (35)) returns (fixed bin (35));
dcl  date_time_ entry (fixed bin (71), char (*));
dcl  date_time_$format entry (char (*), fixed bin (71), char (*), char (*)) returns (char (250) var);
dcl  get_group_id_ entry returns (char (32));
dcl  get_line_length_$switch entry (ptr, fixed bin (35)) returns (fixed bin);
dcl  get_process_id_ entry returns (bit (36));
dcl  hcs_$initiate entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr, fixed bin (35));
dcl  ioa_ entry options (variable);
dcl  ioa_$rsnnl entry options (variable);
dcl  match_star_name_ entry (char (*), char (*), fixed bin (35));
dcl  ring0_get_$segptr entry (char (*) aligned, char (*) aligned, ptr, fixed bin (35));
dcl  ring_zero_peek_ entry (ptr, ptr, fixed bin, fixed bin (35));
dcl  unique_chars_ entry (bit (*) aligned) returns (char (15));
dcl  user_info_$terminal_data entry (char (*), char (*), char (*));

/* Builtin */

dcl  (addr, after, before, bin, clock, divide, fixed, hbound, index, lbound,
     length, log10, ltrim, max, mod, null, ptr, rel, rtrim, search, size,
     string, substr, unspec) builtin;

/* This is the pae entry point */

	pae_sw = "1"b;
	me = "print_apt_entry";
	goto af_common;				/* go see if we're a command or an active function */

process_id: entry;

	process_id_sw = "1"b;
	me = "process_id";

af_common:

	call cu_$af_return_arg (nargs, return_ptr, return_len, code);

	if code = 0 then do;			/* active function */
	     af_sw = "1"b;
	     err_proc = active_fnc_err_;
	end;

	else if code = error_table_$not_act_fnc then do;	/* command */
	     af_sw = ""b;
	     err_proc = com_err_;
	end;

	else do;					/* some other code - something is wrong */
	     call com_err_ (code, me);
	     return;
	end;

/* Initialize entry-point-dependent defaults before looking at control args */

	if process_id_sw | af_sw then multiple_sw = ""b;	/* default for process_id and [pae] is one process */
	else multiple_sw = "1"b;			/* default for pae is multiple processes */

/* Initialize offset of Initializer's APTE */

	if apte1_offset = 0 then
	     apte1_offset = size (tcm) - 1;

/* Look at control arguments */

	do argno = 1 to nargs;
	     call cu_$arg_ptr (argno, ap, al, code);	/* this works for both commands and active functions */
	     if code ^= 0 then do;
		call err_proc (code, me);
		return;
	     end;

	     if substr (bchr, 1, 1) ^= "-" then		/* if this is an ID */
		ids = ids + 1;			/* count it, and skip it until next pass thru arg list */

/* Check for control arguments common to both entry points */

	     else if bchr = "-ia" | bchr = "-interactive" then
		ia_sw = "1"b;
	     else if bchr = "-as" | bchr = "-abs" | bchr = "-absentee" then
		as_sw = "1"b;
	     else if bchr = "-dmn" | bchr = "-daemon" then
		dmn_sw = "1"b;
	     else if bchr = "-only" then
		ia_sw, as_sw, dmn_sw = ""b;
	     else if bchr = "-all" | bchr = "-a" then
		ia_sw, as_sw, dmn_sw = "1"b;
	     else if bchr = "-single" then
		multiple_sw = ""b;
	     else if bchr = "-multiple" then
		multiple_sw = "1"b;

	     else if bchr = "-user"
		| bchr = "-chn" | bchr = "-channel"
		| bchr = "-pid" | bchr = "-process_id" then do; /* if next argument is an ID */
		argno = argno + 1;			/* skip over it this time thru arglist */
		ids = ids + 1;			/* count ID args */
	     end;

/* Check for control arguments accepted only by pae */

	     else if pae_sw then do;
		if bchr = "-dump" then
		     dump_sw = "1"b;
		else if bchr = "-no_dump" then
		     dump_sw = ""b;
		else if bchr = "-sh" | bchr = "-short" then
		     short_sw = "1"b;
		else if bchr = "-lg" | bchr = "-long" then
		     short_sw = ""b;
		else if bchr = "-dpy" | bchr = "-display" then
		     display_mode = 2;
		else if bchr = "-bfdpy" | bchr = "-brief_display" then
		     display_mode = 1;
		else if bchr = "-ndpy" | bchr = "-no_display" then
		     display_mode = 0;
		else if bchr = "-pd" | bchr = "-pdir" | bchr = "-process_dir" | bchr = "-process_directory" then
		     pdir_sw = "1"b;
		else if bchr = "-tchn" | bchr = "-term" | bchr = "-term_chn" | bchr = "-term_channel" then
		     term_channel_sw = "1"b;
		else goto badopt;
	     end;					/* end pae args */

	     else do;
badopt:		call err_proc (error_table_$badopt, me, "^a", bchr);
		return;
	     end;

	end;					/* end first pass thru argument list */

/* Now, see what args were given, check legality, and apply defaults */

	if pdir_sw | term_channel_sw			/* if returning pdir or term channel */
	then pae_sw = ""b;				/* then we're not going to print the APTE */

	if pae_sw & af_sw then do;			/* can't return a whole APTE */
	     call err_proc (0, me, "No APTE item specified.");
	     return;
	end;

	if pdir_sw & term_channel_sw then do;		/* if both given, complain */
	     call err_proc (error_table_$inconsistent, me, "-process_dir and -term_channel");
	     return;
	end;

	if ids > 1 then multiple_sw = "1"b;		/* single only makes sense with one ID */

/* Initialize only what is needed for what we've been asked to do */

	if pae_sw then do;				/* if printing APTE, get date and time */
	     now = clock ();
	     call date_time_ (now, temp_date_time);	/* format current date and time */
	     today = temp_date;			/* copy mm/dd/yy */
	end;

	if ids > 0 then				/* if no IDs given, we're doing it for this process */
	     call table_init;			/* otherwise we need pointers to the user tables */
						/* (all users do not have access, so only try if needed) */

	if pae_sw | term_channel_sw then		/* if printing APTE or returning term channel */
	     call tcd_init;				/* we'll need to look in tc_data */

	aptep = addr (tc_data);			/* get pointer to temporary storage */
	id_sw = ""b;
	total_matched, this_id_matched = 0;

/* If no ID arguments given, do it for the current process */

	if ids = 0 then do;
	     id_sw = valid_id (rtrim (get_group_id_ ())); /* get User_ID */
	     pers = pers_arg;			/* copy components of user_ID */
	     proj = proj_arg;
	     tag = tag_arg;
	     if ia_sw | as_sw | dmn_sw then do;
		tag_arg = "*";
		call table_init;
		call print_matching_processes (rtrim (pers_arg) || "." || rtrim (proj_arg) || "." || tag_arg);
		return;
	     end;
	     call user_info_$terminal_data ((""), (""), channel); /* and channel */
	     proc_id = get_process_id_ ();
	     call print_it;				/* either print APTE, or return something */
	     return;
	end;

	if ^(ia_sw | as_sw | dmn_sw) then		/* if none of -ia -as -dmn given */
	     ia_sw, as_sw, dmn_sw = "1"b;		/* default is all three */

/* There were IDs given. Go back thru the argument list and look for them. */

	do argno = 1 to nargs;			/* go thru args again to process user and channel names */
	     call cu_$arg_ptr (argno, ap, al, code);	/* ignore code this time around */

	     if ^id_sw				/* if previous arg wasn't -user, -chn, or -pid, */
		& substr (bchr, 1, 1) = "-" then do;	/* and this is a control arg, see if it's one of those */
		if bchr = "-user" then
		     user_sw, id_sw = "1"b;
		else if bchr = "-chn" | bchr = "-channel" then
		     chn_sw, id_sw = "1"b;
		else if bchr = "-pid" | bchr = "-process_id" then
		     pid_sw, id_sw = "1"b;

		else user_sw, chn_sw, pid_sw, id_sw, apte_offset_sw = ""b; /* if not_sw,clear all the switches */
	     end;					/* end previous arg not -user, -chn or -pid */

	     else if id_sw				/* if previous arg was one of the above */
		| substr (bchr, 1, 1) ^= "-" then do;	/* or if this one is not a control arg */
						/* treat it as an ID arg */
		this_id_matched = 0;		/* we'll count processes that match this ID */


		if valid_id (bchr) then do;		/* if ID is legal, search user tbales for match */
						/* (if it's not legal, valid_id prints an error message) */
		     call print_matching_processes ((bchr));
		end;				/* end valid ID */

		id_sw = ""b;			/* clear this, in case it was on for this ID argument */

	     end;					/* end ID argument */

	     total_matched = total_matched + this_id_matched; /* count total matches */

	end;					/* end second pass thru argument list */

/* If we're a command, or an active function with just one ID argument, we already
   reported on failure of any process to match the ID(s), But if we're an active
   function with multiple IDs, we could get here without matching any processes
   or putting anything in the return string. We'll complain about that,
   rather then quietly returning a null string. */

	if af_sw & ids > 1 & total_matched = 0 then
	     call err_proc (0, me, "The given identifiers did not match any processes.");
MAIN_RETURN:
	return;

/* Come here from internal procedures if unable to get pointers to user tables or tc_data */

init_error:
	call err_proc (code, me, "Cannot get ptr to ^a", segname);
	return;

match_ute: proc returns (bit (1) aligned);

dcl  ec fixed bin (35);

	if chn_sw then do;				/* -chn ID or ID with no uppercase letters * */
	     call match_star_name_ ((ute.tty_name), (bchr), ec);
	     if ec = 0 then goto matched;
	end;

	else if user_sw then do;			/* -user ID or ID containing uppercase letters */
	     call match_star_name_ ((ute.person), (pers_arg), ec);
	     if ec = 0 then do;			/* person matched; check project */
		call match_star_name_ ((ute.project), (proj_arg), ec);
		if ec = 0 then do;			/* project matched; check tag */
		     if tag_arg ^= "m" & tag_arg ^= "p" /* only for two kinds of absentee tags */
		     then goto matched;		/* since main loop does process type checking */
		     if ute.proxy then		/* if this process is proxy */
			if tag_arg = "p" then goto matched;
			else ;			/* it wasn't "p" so don't goto matched */
		     else				/* this process is not proxy */
			if tag_arg = "m" then goto matched;
		end;				/* end project matched */
	     end;					/* end person matched */
	end;

	else if pid_sw then do;			/* -pid ID, or octal ID */
	     if ute.proc_id = proc_id then goto matched;
	     if apte_offset_sw then
		if substr (ute.proc_id, 1, 18) = substr (proc_id, 1, 18) then goto matched;
	end;
	return (""b);
matched:

/* Copy stuff out of the answer table entry */

	proc_id = ute.proc_id;
	proj = ute.project;
	pers = ute.person;
	channel = ute.tty_name;

	if ute.queue = -1 then			/* daemon */
	     tag = "z";
	else if ute.queue = 0 & ^ute.adjust_abs_q_no then /* interactive */
	     tag = "a";
	else					/* absentee */
	     if ute.proxy then			/* proxy absentee */
	     tag = "p";
	else tag = "m";				/* normal absentee */

	return ("1"b);
     end match_ute;

print_it: proc;

/* We call this procedure either to print the whole APTE, or to print or return one value from it. */

dcl  fxl fixed bin;					/* length of dump lines, either 4 or 8 words */
dcl  fxp ptr;					/* pointer to first word in line */
dcl  fx (fxl) fixed bin (35) based (fxp);		/* array of 4 or 8 words in dump line */
dcl  i fixed bin;
dcl  integer_len fixed bin;				/* length of integer part of float nums */
dcl  l fixed bin;					/* for octal dump, index of first APTE word in dump line */
dcl  line_len fixed bin;				/* terminal line length */

	this_id_matched = this_id_matched + 1;		/* count processes matching the ID */

	if this_id_matched > 1 then			/* if this is the 2nd (or more) match for this ID */
	     if ^multiple_sw			/* and the user only wanted one */
	     then return;				/* don't print or return any more */

	if pae_sw | term_channel_sw | apte_offset_sw then do; /* if we need to look in the APTE */
	     tcdp0 = ptr (tcdp0, substr (proc_id, 1, 18));/* generate pointer to APTE in ring 0 */
	     call ring_zero_peek_ (tcdp0, aptep, size (apte), code); /* copy the data out */
	     if code ^= 0 then do;
		call err_proc (code, me, "from ring_zero_peek_");
		return;
	     end;
	     if apte_offset_sw then			/* if just apt offset given */
		unspec (procid) = apte.processid;	/* copy full procid out of apt entry */
	end;					/* end we need to look in the APTE */

	if pae_sw | pdir_sw then do;			/* if we need the process directory name, get it */
	     apte_offset = divide (procid, 2 ** 18, 18, 0);
	     if apte_offset = apte1_offset then		/* special case the Initializer's pdir name */
		c32 = ">pdd>!zzzzzzzbBBBBBB";		/* it is unique_chars_ (777777777777) */
	     else c32 = ">pdd>" || unique_chars_ (proc_id); /* all other pdir names come from process id */
	end;					/* end we need pdir name */

/* If we didn't need the pdir name, the user must have asked for either process_id or term_channel */

	else if process_id_sw then			/* if process id wanted */
	     call ioa_$rsnnl ("^w", c32, (0), procid);	/* format it */

	else if term_channel_sw then			/* if process termination event channel wanted */
	     call ioa_$rsnnl ("^24.3b", c32, (0), unspec (apte.term_channel)); /* format it */

/* Now, if we're not the pae command, we either return or print an active function value */

	if af_sw then do;				/* active function */
	     if length (return_string) > 0 then		/* if there's anything in the return string */
		return_string = return_string || " ";	/* put a blank after it */
	     return_string = return_string || rtrim (c32);/* put the return value in it */
	     return;				/* return to the main loop */
	end;

	else if ^pae_sw then do;			/* if not pae, print what the A/F would have returned */
	     call ioa_ ("^a", c32);
	     return;
	end;

/* If it was pae, fall thru and print the APTE */

/* First, the heading */

	line_len = get_line_length_$switch (null, code);
	call ioa_ ("^/^a.^a.^a ^a at ^o in tc_data, ^a", pers, proj, tag, channel, fixed (rel (tcdp0), 18), c32);

/* Print line 1 unless -no_display */

	if display_mode > 0 then
	     call ioa_ ("^[FLAGS: ^w^2x^;^s^]^[EVENT: ^w^2x^;^s^]PID: ^w^2xLOCK_ID: ^w^[^2x^;
^]TRM CHN: ^w ^w",
		(display_mode < 2), unspec (apte.flags),
		(apte.wait_event ^= ""b), apte.wait_event,
		apte.processid, apte.lock_id,
		bin (display_mode < 2) * length ("FLAGS: oooooooooooo  ") +
		bin (apte.wait_event ^= ""b) * length ("EVENT: oooooooooooo  ") +
		length ("PID: oooooooooooo  LOCK_ID: oooooooooooo  ") +
		length ("TRM CHN: oooooooooooo oooooooooooo") <= line_len,
		substr (unspec (apte.term_channel), 1, 36),
		substr (unspec (apte.term_channel), 37, 36));

	if display_mode = 2 then do;			/* -display */

/* -display: print the following three lines (stuff in [] only if interesting):
   2) <state> for <interval> (since <time[ <date>]). Usage: cpu <amt>; vcpu <amt>; pf <N>.
   3) te/s/i/x: E S I X.[ <ips name> pending.][ Flags: <flag names>.]
   4) [Alarm in <interval> (at <time>[ <date>][ (<interval> after block)]).[ CPU monitor in <interval>.]

*/

/* Prepare for printing line 2 */

	     i = fixed (apte.state);
	     if i >= lbound (state_names, 1) & i <= hbound (state_names, 1) then
		c32 = state_names (i);
	     else call ioa_$rsnnl ("state ^d", c32, (0), i);

	     call date_time_ (apte.state_change_time, temp_date_time);

/* Print line 2 */

	     call ioa_ ("^a for ^a (since ^a^[^x^a^;^s^]).^[^2x^;
^]Usage: cpu ^a; vcpu ^a; pf ^d.",
		c32, time_interval (now - apte.state_change_time),
		time_of_day (apte.state_change_time),
		(temp_date ^= today), temp_date,
		length (rtrim (c32)) + length (" for  (since ).") +
		length (rtrim (time_interval (now - apte.state_change_time))) +
		length (rtrim (time_of_day (apte.state_change_time))) +
		length (" mm/dd/yy") * bin (temp_date ^= today) +
		length ("Usage: cpu ; vcpu ; pf 9.") +
		length (rtrim (time_interval (apte.time_used_clock))) +
		length (rtrim (time_interval (apte.virtual_cpu_time))) +
		log10 (apte.page_faults) <= line_len,
		time_interval (apte.time_used_clock),
		time_interval (apte.virtual_cpu_time), apte.page_faults);
	     /*** log10(X)+1 gives number of integer digits in X
		The +1 was factored in as the 9 in the expression
		length("Usage... pf 9.") 		      */

/* Prepare for printing line 3 */

	     if apte.ips_message then do;		/* if any ips wakeups pending */
		ips_pending = "";
		do i = 1 to 36;
		     if substr (apte.ips_message, i, 1) then do;
			if i <= sys_info$ips_mask_data.count then /* we have a name for this one */
			     ips_pending = ips_pending || rtrim (sys_info$ips_mask_data.mask (i).name) || " ";
			else do;
			     call ioa_$rsnnl ("ips_^d", c32, (0), i);
			     ips_pending = ips_pending || rtrim (c32) || " ";
			end;
		     end;				/* end this ips is pending */
		end;				/* end loop thru all ips's */
		ips_pending = ips_pending || " pending.";
	     end;					/* end there are some ips's pending */

	     if string (first_17_flags) | ^flag18 then do;
		flags = "Flags: ";
		do i = 1 to 15, 17;
		     if first_17_flags (i) then
			flags = flags || rtrim (flag_names (i)) || ",";
		end;
		if ^apte.flags.default_procs_required then do; /* flag16 */
		     call ioa_$rsnnl ("proc_^[A^]^[B^]^[C^]^[D^]^[E^]^[F^]^[G^]^[H^]_required,", c32, (0),
			substr (apte.procs_required, 1, 1),
			substr (apte.procs_required, 2, 1),
			substr (apte.procs_required, 3, 1),
			substr (apte.procs_required, 4, 1),
			substr (apte.procs_required, 5, 1),
			substr (apte.procs_required, 6, 1),
			substr (apte.procs_required, 7, 1),
			substr (apte.procs_required, 8, 1));
		     flags = flags || rtrim (c32);
		end;
		if ^flag18 then
		     flags = flags || "has_never_run,";
		substr (flags, length (flags), 1) = ".";
	     end;

/* Print line 3 */

	     integer_len = 0;
	     if apte.te > 0 then
		integer_len = integer_len + log10 (apte.te / 1.0e6);
	     if apte.ts > 0 then
		integer_len = integer_len + log10 (apte.ts / 1.0e6);
	     if apte.ti > 0 then
		integer_len = integer_len + log10 (apte.ti / 1.0e6);
	     if apte.timax > 0 then
		integer_len = integer_len + log10 (apte.timax / 1.0e6);
	     /*** log10(X) + 1  gives number of digits in integer part of X
		The +1 is accounted for below as the first 9 in 9.999     */

	     call ioa_ ("te/ts/ti/tx:^4(^x^.3f^).^[^2x^a^;^s^]^[^[^2x^;^/^]^a^;^2s^]",
		apte.te / 1.0e6, apte.ts / 1.0e6, apte.ti / 1.0e6, apte.timax / 1.0e6,
		(ips_pending ^= ""), ips_pending, (flags ^= ""),
		length ("te/ts/ti/tx: 9.999 9.999 9.999 9.999.    ") + integer_len +
		length (ips_pending) + length (flags) <= line_len, flags);

/* Decide if fourth line is needed; if it is, prepare for printing it */

	     if apte.alarm_time ^= ""b | apte.cpu_monitor ^= 0 then do; /* print it if either is nonzero */
		c32 = "";
		alrm = 0;
		if apte.alarm_time ^= ""b then do;
		     alrm = fixed (apte.alarm_time, 71);
		     call date_time_ (alrm, temp_date_time);
		     if fixed (apte.state) = 4 then	/* if blocked, display alarm offset from block_time */
			call ioa_$rsnnl ("^x(^a after block)", c32, (0),
			     time_interval (alrm - apte.state_change_time));
		end;

		if apte.cpu_monitor ^= 0 then		/* it is in units of 1024 microseconds */
		     cpu_mon = apte.cpu_monitor * 1024; /* make it microseconds */

/* now print it */

		call ioa_ ("^[Alarm in ^a (at ^a^[^x^a^;^s^]^a).^x^;^5s^]^[CPU monitor in ^a.^;^s^]",
		     (alrm ^= 0), time_interval (alrm - now), time_of_day (alrm), (temp_date ^= today), temp_date,
		     c32, (cpu_mon ^= 0), time_interval (cpu_mon - apte.virtual_cpu_time));

	     end;					/* end line 4 being printed */

	     call ioa_ ("IPC R-Offset: ^w, R-Factor: ^w", apte.ipc_r_offset, apte.ipc_r_factor);
	end;					/* end -display */

	if dump_sw then do;				/* -dump */

	     call ioa_;				/* blank line before dump */
	     if short_sw then fxl = 4;		/* if -short, set output line length to 4 words */
	     else fxl = 8;				/* else set it to 8 words */
	     do l = 0 by fxl while (l <= hbound (f, 1));	/* go thru APTE 4 or 8 words at a time */
		fxp = addr (f (l));			/* get pointer to first word of next output line */
		call ioa_ ("^3o^x^v(^x^w^)", l, fxl, fx); /* print next output line, including first word's offset */
	     end;
	     call ioa_;				/* blank line after dump */
	end;					/* end -dump */

     end print_it;

print_matching_processes: proc (a_user_id);

dcl  a_user_id char (32) parm;

	if (ia_sw & tag_arg = "*")			/* if interactives wanted and tag doesn't exclude them */
	     | tag_arg = "a" then			/* or if tag specified interactives */
	     do i = 1 to anstbl.current_size;		/* search for answer table entry */
	     utep = addr (anstbl.entry (i));		/* get pointer to current entry */
	     if ute.active >= 4 then
		if match_ute () then
		     call print_it;			/* call internal procedure to do work */
	end;

	if (as_sw & tag_arg = "*")			/* if absentees wanted and tag doesn't exclude them */
	     | tag_arg = "m" | tag_arg = "p"		/* or if tag specified absentee */
	then do i = 1 to autp -> autbl.current_size while (autp -> autbl.n_abs_run > 0);
	     utep = addr (autp -> autbl.entry (i));	/* get ptr to current absentee user table entry */
	     if ute.active >= 4 then
		if match_ute () then
		     call print_it;			/* call internal proc */
	end;

	if (dmn_sw & tag_arg = "*")			/* if daemons wanted and tag doesn't exclude them */
	     | tag_arg = "z"			/* or if tag specified daemon */
	then do i = 1 to dutbl.current_size;
	     utep = addr (dutbl.entry (i));
	     if ute.active >= 4 then
		if match_ute () then
		     call print_it;
	end;

	if pid_sw & this_id_matched = 0 then do;	/* did not find process id in user tables */
	     if pae_sw then				/* if printing APTE, explain the "?"s to the user * */
		call ioa_ ("^[Offset^;Process^] ^w not in user tables.", apte_offset_sw, procid);
	     proj, pers, channel, tag = "?";
	     call print_it;
	end;

	if this_id_matched = 0			/* if no matches for this ID */
	     & (^af_sw | ids = 1) then		/* and we're a command or we have only one ID */
	     call err_proc (0, me, "^[User^;Channel^] ^a not found", user_sw, a_user_id);

	else if this_id_matched > 1			/* or if we had more than one match */
	     & ^multiple_sw then do;			/* and the user only expected one */
	     call err_proc (0, me, "^a matched ^d processes.", a_user_id, this_id_matched);
	     go to MAIN_RETURN;
	end;

     end print_matching_processes;

table_init: proc;

	if ^tables_initiated then do;
	     segname = "answer_table";
	     call hcs_$initiate (sysdir, segname, "", 0, 0, static_ansp,
		code);
	     if static_ansp = null then goto init_error;

	     segname = "absentee_user_table";
	     call hcs_$initiate (sysdir, segname, "", 0, 0, static_autp,
		code);
	     if static_autp = null then go to init_error;

	     segname = "daemon_user_table";
	     call hcs_$initiate (sysdir, segname, "", 0, 0, static_dutp,
		code);
	     if static_dutp = null then go to init_error;

	     tables_initiated = "1"b;
	end;

	ansp = static_ansp;
	autp = static_autp;
	dutp = static_dutp;

	return;

     end table_init;





tcd_init: proc;

	if tcd_initiated then return;			/* quit if we already have ptr to tc_data */

	segname = "tc_data";
	call ring0_get_$segptr ("", "tc_data", tcdp0, code); /* get pointer to tc_data */
	if code ^= 0 then goto init_error;

	tcd_initiated = "1"b;

	return;

     end tcd_init;

time_of_day: proc (a_time) returns (char (8));

dcl  a_time fixed bin (71) parm;
dcl  time char (8) var;

	time = date_time_$format ("^Z9Hd:^MH:^SM", a_time, "", "");
	return (time);
     end time_of_day;

time_interval: proc (a_time) returns (char (8));

dcl  (time, a_time) fixed bin (71);

dcl  min fixed bin;
dcl  sum fixed bin (71);
dcl  sec fixed bin;
dcl  hr fixed bin (35);
dcl  rs char (8);
dcl  rlen fixed bin;
dcl  usec fixed bin (35);
dcl  int_pic pic "zzzzzzz9" defined (rs) pos (1);		/* suppress leading zeros in time interval */
dcl  usec_pic pic "999999";				/* to convert microseconds in time interval */

	time = a_time;				/* copy time interval */

	if time < 0 then time = 0;			/* avoid blowup when ^[^] will not print negative time anyway */
	hr = divide (time, 3600000000, 71, 0);
	min = divide (time, 60000000, 71, 0) - hr * 60;
	sec = divide (time, 1000000, 71, 0) - hr * 3600 - min * 60;
	sum = sec + min * 1000 + hr * 1000000;		/* HH0MM0SS */
	if hr > 99999 then				/* if ridiculous number of hours */
	     rs = "99999+hr";			/* say so */
	else call ioa_$rsnnl ("^5d+hr", rs, (0), hr);	/* else say how many hours */
	if sum > 99999999
	then int_pic = 99999999;
	else int_pic = sum;				/* time interval doesn't want leading zeros */

	if substr (rs, 2, 1) ^= " " then substr (rs, 3, 1) = ":";
	if substr (rs, 5, 1) ^= " " then substr (rs, 6, 1) = ":";

/* Return the most interesting characters from the string HH:MM:SS.ffffff,
   without making it so long that output strings run off ends of terminal lines.
   Set rlen to the right length, according to how large the time interval is:
   *
   *	OUTPUT	       RLEN		length(ltrim(rs))
   *
   *	HH:MM:SS		8		8
   *	 H:MM:SS		7		7
   *	   MM:SS		5		5
   *	    M:SS.f	6		4
   *	      SS.fff	6		2
   *	       S.fff	5		1
   *	       0.fzzzzz	3 to 8 *		1
   *
   *			       * depending on how many z's are nonzero
   *
*/
	usec = mod (time, 1000000);			/* get ffffff in binary */
	usec_pic = usec;				/* get ffffff in characters */

	rlen = length (ltrim (rs));			/* see how big the interval is */
	if rlen > 4 then ;				/* 8, 7, and 5 stay as is for HH:MM:SS,  H:MM:SS and MM:SS */
	else if rlen = 4 then rlen = 6;		/* 4 -> 6 for M:SS.f */
	else if rlen > 1 then rlen = 6;		/* 2 -> 6 for SS:fff */
	else if substr (rs, 8, 1) ^= "0" then rlen = 5;	/* 1 -> 5 for S.fff */
	else rlen = max (3, 2 + length (rtrim (usec_pic, "0"))); /* 0.fzzzzz */

	return (substr (ltrim (rs || "." || usec_pic), 1, rlen));

     end time_interval;

valid_id: proc (id_arg) returns (bit (1) aligned);

dcl  id_arg char (*);

	tag_arg = "*";				/* all tags match, unless one is given in a User_ID */

	if ^id_sw | pid_sw then do;			/* if ID or -pid ID (not -user ID or -chn ID) */
	     c32 = id_arg;				/* convert process id from octal characters to binary */
	     procid = cv_oct_check_ (c32, code);	/* check for process id or apt offset */
	     if code = 0 then			/* it was one of those */
		pid_sw = "1"b;
	     else if ^pid_sw then			/* if not -pid ID, we were just checking */
		code = 0;				/* so it is not a real error */
	     else do;				/* it was -pid ID and ID was non-octal */
		call err_proc (0, me, "Invalid process id: ^a", id_arg);
		return (""b);
	     end;
	end;

	if pid_sw then do;				/* if it was octal, was it a full process id or just an offset */
	     if procid < 2 ** 18 then do;		/* if just apte offset given */
		procid = procid * (2 ** 18);		/* shift it into left half of word */
		apte_offset_sw = "1"b;
		call tcd_init;			/* we'll have to look in the APTE for the full process id */
	     end;

	     apte_offset = divide (procid, 2 ** 18, 18, 0); /* compute APTE offset, and validate it */
	     if apte_offset < apte1_offset		/* if offset is before first APTE */
		| mod (apte_offset - apte1_offset, size (apte)) ^= 0 then do; /* or isn't on an APTE boundary */
		call err_proc (0, me, "Invalid APTE offset^[ in process ID^]: ^a", (^apte_offset_sw), id_arg);
		return (""b);
	     end;

	     return ("1"b);

	end;					/* end it was a process ID */

/* If not a process ID, fall thru and see if it is a User_ID or a channel name. */

	if ^id_sw then				/* if no -user or -channel control arg */
	     if search (id_arg, CAPS) ^= 0		/* if it contains any uppercase letters */
	     then user_sw = "1"b;			/* treat it as a User_ID */
	     else chn_sw = "1"b;			/* else treat it as a channel name */

	if user_sw then do;				/* if it's a User_ID, parse it into Pers.Proj.tag */
	     pers_arg = before (id_arg, ".");
	     if pers_arg = "" then pers_arg = "*";
	     proj_arg = before (after (id_arg, "."), ".");
	     if proj_arg = "" then proj_arg = "*";
	     tag_arg = after (after (id_arg, "."), ".");
	     if tag_arg = "" then tag_arg = "*";
	     if length (pers_arg) > 22
		| length (proj_arg) > 9
		| length (tag_arg) > 1
		| index ("ampz*", tag_arg) = 0 then do;
		call err_proc (0, me, "Invalid User ID: ^a", id_arg);
		return (""b);
	     end;
	end;

	return ("1"b);

     end valid_id;

/* format: off */
%page; %include absentee_user_table;
%page; %include answer_table;
%page; %include apte;
%page; %include daemon_user_table;
%page; %include ips_mask_data;
%page; %include hc_lock;
%page; %include tcm;
%page; %include user_attributes;
%page; %include user_table_entry;
%page; %include user_table_header;

/* format: on */

     end print_apt_entry;
