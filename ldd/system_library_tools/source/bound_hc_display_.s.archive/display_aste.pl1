/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/* format: style2,indcomtxt,idind25 */
display_aste:
     procedure;

/* NSS VERSION, with get_temp_segments_, detailed AST printout, disk_table,
   phcs_, -at, address interpretation, BSG 05-06/76 */
/* Modified August 1982, E. N. Kittlitz. move the core_map out of sst. */
/* Modified 84-01-21 BIM for rename, new features */
/* Modified January 1985 by Keith Loepere to display multi_class. */
/* Modified 1985-03-29, BIM: silly bug in CME flag display. */

	dcl     arg		   char (argl) based (argp);
	dcl     argl		   fixed bin (21);
	dcl     argp		   ptr;
	dcl     argx		   fixed bin;
	dcl     n_args		   fixed bin;
	dcl     (user_seg_count, first_user_seg)
				   fixed bin;
	declare ptp		   pointer;
	declare ptwp		   pointer;
	declare pt		   (0:255) bit (36) aligned based;
	declare last_pte		   bit (36) aligned;
	declare skipping		   bit (1) aligned;
	declare time_string		   char (32);
	declare octal		   bit (1) aligned;

	dcl     (i, aste_offset, segno)  fixed bin;
	dcl     pvname		   char (32);
	dcl     diskname		   char (8);
	dcl     code		   fixed bin (35);
	dcl     fdevadd		   fixed bin (18);
	dcl     cdevadd		   char (16);
	dcl     ptwaddr		   fixed bin (18);
	dcl     ll		   fixed bin;
	dcl     1 sdw1		   like sdw aligned;
	dcl     wpl		   fixed bin;
	dcl     ptwbase		   fixed bin (24);
	dcl     iox_$user_output	   ptr ext static;
	dcl     check_gate_access_	   entry (character (*), pointer, fixed binary (35));
	dcl     dump_segment_	   entry (pointer, pointer, fixed binary, fixed binary (18), fixed binary (18),
				   bit (*));
	dcl     expand_pathname_	   entry (character (*), character (*), character (*), fixed binary (35));
	dcl     (dsp0, segptr, sstp0, cmp0, cmp)
				   ptr;
	dcl     sptp		   ptr;
	dcl     cmap_length		   fixed bin (19);
	dcl     pathname		   char (168);
	dcl     dirname		   char (168);
	dcl     myname		   char (20) static init ("display_aste") options (constant);
	dcl     ename		   char (32);
	dcl     pts		   fixed bin (3);
	dcl     ptsizes		   (0:3) fixed bin init ((4) 0);
	dcl     q			   (3) ptr init ((3) null ());
	dcl     core_add		   fixed bin (18);
	dcl     devadd		   bit (22);
	dcl     devadd_add_type	   bit (4) defined (devadd) pos (19);
	dcl     devadd_nulled_flag	   bit (1) defined (devadd);
	dcl     devadd_record_no	   bit (18) defined (devadd);
	dcl     last_ptw		   bit (36);
	dcl     file_map_sw		   bit (1) aligned;
	dcl     (force_slt, force_offset)
				   bit (1) aligned;
	dcl     rastap		   fixed bin;
	dcl     sys_info$page_size	   fixed bin (35) external static;

	dcl     (
	        com_err_,
	        com_err_$suppress_name,
	        ioa_,
	        ioa_$nnl,
	        ioa_$rsnnl
	        )			   ext entry options (variable);
	dcl     mdc_$read_disk_table	   entry (ptr, fixed bin (35));
	dcl     (get_temp_segments_, release_temp_segments_)
				   entry (char (*), (*) ptr, fixed bin (35));
	dcl     pathname_		   entry (char (*), char (*)) returns (char (168));
	dcl     get_line_length_$switch  entry (ptr, fixed bin (35)) returns (fixed bin);
	dcl     hcs_$high_low_seg_count  entry (fixed bin, fixed bin);
	dcl     hcs_$fs_get_path_name	   entry (ptr, char (*), fixed bin, char (*), fixed bin (35));
	dcl     (
	        hcs_$initiate,
	        phcs_$initiate
	        )			   entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr,
				   fixed bin (35));
	dcl     ring_zero_peek_	   entry (ptr, ptr, fixed bin (19), fixed bin (35));
	dcl     ring_zero_peek_$get_max_length_ptr
				   entry (ptr, fixed bin (19), fixed bin (35));
	dcl     ring0_get_$segptr	   ext entry (char (*), char (*), ptr, fixed bin (35));
	dcl     ring0_get_$name	   entry (char (*), char (*), ptr, fixed bin (35));
	dcl     cu_$arg_count	   entry (fixed bin, fixed bin (35));
	dcl     cu_$arg_ptr		   entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
	dcl     cv_oct_check_	   ext entry (char (*), fixed bin (35)) returns (fixed bin (35));
	dcl     cv_oct_		   entry (char (*)) returns (fixed bin (35));
	dcl     date_time_$format	   entry (character (*), fixed binary (71), character (*), character (*))
				   returns (character (250) var);

	dcl     error_table_$invalidsegno
				   fixed bin (35) ext static;
	dcl     error_table_$too_many_args
				   fixed bin (35) ext static;
	dcl     error_table_$noarg	   fixed bin (35) ext static;
	dcl     error_table_$bad_conversion
				   fixed bin (35) ext static;
	dcl     error_table_$badopt	   fixed bin (35) ext static;

	dcl     (addr, addrel, baseno, baseptr, fixed, length, ptr, rel, size, addwordno, bin, byte, copy, index, rtrim,
	        search, string, substr, unspec, verify)
				   builtin;
	dcl     (cleanup, linkage_error) condition;


	octal = "0"b;
	q = null ();
	on cleanup call release_temp_segments_ (myname, q, (0));

	call cu_$arg_count (n_args, code);
	if code ^= 0
	then do;
		call com_err_ (code, myname);
		return;
	     end;
	if n_args = 0
	then
USAGE:
	     do;
		call com_err_$suppress_name (0, myname,
		     "Usage: display_aste {pathname | -hardcore R0 segment name/number | -at sst_seg offset");
		return;
	     end;

	pathname = "";
	file_map_sw = "0"b;
	force_slt = "0"b;
	force_offset = "0"b;
	aste_offset = 0;

	do argx = 1 to n_args;
	     call cu_$arg_ptr (argx, argp, argl, (0));
	     if index (arg, "-") ^= 1
	     then do;				/* positional path */
		     if pathname ^= ""		/* true even for -off */
		     then
TOO_MANY:
			do;
			     call com_err_ (error_table_$too_many_args, myname,
				"Only one segment specifier is permitted. ^a is the second.", arg);
			     return;
			end;
		     pathname = arg;
		end;
	     else if arg = "-octal" | arg = "-oc"
	     then octal = "1"b;
	     else if arg = "-no_octal" | arg = "-noc"
	     then octal = "0"b;
	     else if arg = "-hardcore" | arg = "-hc"
	     then do;
		     if pathname ^= ""
		     then go to TOO_MANY;
		     if argx = n_args
		     then call MISSING ("hardcore segment name/number following -hardcore");
		     force_slt = "1"b;
		     argx = argx + 1;
		     call cu_$arg_ptr (argx, argp, argl, (0));
		     pathname = arg;
		end;
	     else if arg = "-at" | arg = "-offset" | arg = "-off"
	     then do;
		     if pathname ^= ""
		     then go to TOO_MANY;
		     if argx = n_args
		     then call MISSING ("offset following -at.");
		     argx = argx + 1;
		     call cu_$arg_ptr (argx, argp, argl, (0));
		     force_offset = "1"b;
		     pathname = "at offset " || arg;
		     aste_offset = cv_oct_check_ (arg, code);
		     if code ^= 0
		     then do;
			     call com_err_ (error_table_$bad_conversion, myname, "^a is not an octal offset.", arg);
			     return;
			end;
		end;
	     else if arg = "-file_map" | arg = "-fm"
	     then file_map_sw = "1"b;
	     else if arg = "-no_file_map" | arg = "-nfm"
	     then file_map_sw = "0"b;
	     else do;
		     call com_err_ (error_table_$badopt, myname, "^a", arg);
		     return;
		end;
	end;					/* the loop */

	if pathname = ""
	then go to USAGE;				/* not likely ... */

	if ^force_offset & ^force_slt
	then do;
		call expand_pathname_ (pathname, dirname, ename, code);
		if code ^= 0
		then do;
			call com_err_ (code, myname, "^a", pathname);
			return;
		     end;
	     end;

/**** We have checked as best we can before fetching from ring 0 */

	go to PARSED;

RETURN:
	return;
MISSING:
     procedure (w);
	declare w			   char (*);

	call com_err_ (error_table_$noarg, myname, "^a", w);
	go to RETURN;
     end;


PARSED:
/**** Fish things out of ring 0 */
	call get_temp_segments_ (myname, q, code);
	if code ^= 0
	then do;
		call com_err_ (code, myname, "Getting temp segs");
		return;
	     end;

	sstp = q (1);
	dtp = q (2);
	cmp = q (3);

	call mdc_$read_disk_table (dtp, code);
	if code ^= 0
	then do;
		dtp = null ();
		call com_err_ (code, myname, "Reading disk table. ");
	     end;


	call ring0_get_$segptr ("", "sst", sstp0, code);	/* get pointer to sst */
	call ring0_get_$segptr ("", "dseg", dsp0, code);	/* and pointer to dseg */
	call ring_zero_peek_ (sstp0, sstp, size (sst), code);
						/* get header of sst */
	if code ^= 0
	then do;
		call com_err_ (code, myname, "Getting header of SST");
		call rts;
		return;
	     end;
	ptwbase = fixed (sst.ptwbase, 24);
	do i = 0 to 3;
	     ptsizes (i) = sst.pts (i);
	end;
	rastap = fixed (rel (sst.astap), 18);		/* get offset to start of ASTE's */

	astep = addrel (sstp, rastap);		/* space for ASTE copy at end of SST copy */
	sptp = addrel (astep, size (aste));		/* including the page table */
	cmp0 = sst.cmp;				/* core map */

	call ring_zero_peek_$get_max_length_ptr (cmp0, cmap_length, code);
	cmap_length = cmap_length - fixed (rel (cmp0), 18);
						/* ignore -1's at front of core_map */

	if code ^= 0
	then do;
		call com_err_ (code, myname, "Getting length of core-map");
		call rts;
		return;
	     end;



/* ASCERTAIN THE SEGMENT'S IDENTITY AND AST OFFSET */

	if ^force_slt & ^force_offset
	then do;					/* try to initiate as pathname */

		call hcs_$initiate (dirname, ename, "", 0, 0, segptr, code);
		if segptr = null
		then do;				/* segment can't be made known */
			call check_gate_access_ ("phcs_", codeptr (display_aste), code);
			if code ^= 0
			then go to no_phcs;
			call phcs_$initiate (dirname, ename, "", 0, 0, segptr, code);
		     end;
no_phcs:
		if segptr = null ()
		then do;
			if search (pathname, "><") > 0
			then do;			/* cannot possibly be SLT name */
				call com_err_ (code, myname, "^a.", pathname_ (dirname, ename));
				call rts;
				return;
			     end;
			force_slt = "1"b;		/* assume hardcore */
		     end;
	     end;


	if force_slt
	then do;					/* segptr must be null */

		if verify (rtrim (pathname), "01234567") = 0
						/* octal it is */
		then do;
			segno = cv_oct_ (pathname);
			segptr = baseptr (segno);
			call hcs_$high_low_seg_count (user_seg_count, first_user_seg);
			if segno < first_user_seg
			then do;
				call ring0_get_$name (dirname, ename, segptr, code);
				if code ^= 0
				then do;
					call com_err_ (code, myname,
					     "Segment ^o not found in hardcore address space.", segno);
					call rts;
					return;
				     end;
				if dirname ^= ""
				then pathname = pathname_ (dirname, ename);
				else pathname = ename;
			     end;
			else if segno < first_user_seg + user_seg_count
			then do;
				dirname, ename = "";
				call hcs_$fs_get_path_name (segptr, dirname, (0), ename, code);
				if code ^= 0
				then do;		/* cannot possibly have an SDW */
					call com_err_ (code, myname, "segment number ^o.", segno);
					call rts;
					return;
				     end;
				pathname = pathname_ (dirname, ename);
			     end;
			else do;			/* invalid segno */
				call com_err_ (error_table_$invalidsegno, myname, "^o.", segno);
				call rts;
				return;
			     end;

		     end;
		else do;
			call ring0_get_$segptr ("", pathname, segptr, code);
			if segptr = null
			then do;
				call com_err_ (code, myname, pathname);
						/* Give up */
				call rts;
				return;
			     end;
		     end;
	     end;

	if ^force_offset
	then do;					/* we have a segptr by now, or have punted */

		segno = fixed (baseno (segptr));	/* get segment number of segment */
		call ring_zero_peek_ (addr (dsp0 -> sdwa (segno)), addr (sdw1), size (sdw1), code);
						/* Get sdw */
		if sdw1.unpaged
		then do;				/* If segment is not paged.. */
			call com_err_ (0, myname, "^a is not paged.", pathname);
						/* tell user */
			call rts;
			return;
		     end;
		ptwaddr = fixed (sdw1.add, 24);
		if ^sdw1.df
		then do;				/* make sure segment is active */
			call com_err_ (0, myname, "^a not connected.", pathname);
			call rts;
			return;
		     end;

		aste_offset = ptwaddr - ptwbase - size (aste);
						/* get offset of ast entry */
		if aste_offset < 0
		then do;
			call com_err_ (0, myname, "^a does not have an aste.", pathname);
			call rts;
			return;
		     end;
	     end;

/* WHEW! got here means we have the aste offset, definitely */

/* DISPLAY THE AST ENTRY */


	call ring_zero_peek_ (ptr (sstp0, aste_offset), astep, 256 + size (aste), code);
						/* copy the AST entry */
	call ring_zero_peek_ (cmp0, cmp, cmap_length, code);
						/* copy the whole core map */

	ll = get_line_length_$switch (null (), code);
	if ll > 109				/* dump segment needs this much space */
	then wpl = 8;
	else wpl = 4;

	if force_offset
	then do;					/* try for a name */
		if aste.hc
		then do;
			segptr = baseptr (aste.strp);
			call ring0_get_$name (dirname, ename, segptr, code);
			if code = 0
			then do;
				if dirname = ""
				then pathname = ename;
				else pathname = pathname_ (dirname, ename);
			     end;
		     end;
	     end;

	if substr (pathname, 1, 2) = "at"
	then call ioa_ ("ASTE at ^o in sst_seg", aste_offset);
	call ioa_ ("ASTE for ^a at ^o in sst_seg", pathname, aste_offset);
						/* indicate location of AST */
	call ioa_ (" fp: ^6o, bp: ^6o, infl: ^6o, infp: ^6o", aste.fp, aste.bp, aste.infl, aste.infp);
	call ioa_ (" strp: ^6o, par_astep: ^6o, UID: ^w", aste.strp, aste.par_astep, aste.uid);
	call ioa_ (" msl: ^d, csl: ^d, records: ^d, np: ^d", fixed (aste.msl), fixed (aste.csl), fixed (aste.records),
	     fixed (aste.np));

	call flag$$init;

	call flag (aste.usedf, "usedf");
	call flag (aste.init, "init");
	call flag (aste.gtus, "gtus");
	call flag (aste.gtms, "gtms");
	call flag (aste.hc, "hc");
	call flag (aste.hc_sdw, "hc_sdw");
	call flag (aste.any_access_on, "any_access_on");
	call flag (aste.write_access_on, "write_access_on");
	call flag (aste.inhibit_cache, "inhibit_cache");
	call flag (aste.explicit_deact_ok, "explicit_deact_ok");
	call flag (aste.deact_error, "deact_error");
	call flag (aste.hc_part, "hc_part");
	call flag (aste.fm_damaged, "fm_damaged");
	call flag (aste.dius, "dius");
	call flag (aste.nid, "nid");
	call flag (aste.ehs, "ehs");
	call flag (aste.nqsw, "nqsw");
	call flag (aste.volmap_seg, "volmap_seg");
	call flag (aste.dirsw, "dirsw");
	call flag (aste.master_dir, "master_dir");
	call flag (aste.multi_class, "multi_class");
	call flag (aste.tqsw (0), "tqsw(S)");
	call flag (aste.tqsw (1), "tqsw(D)");
	call flag (aste.npfs, "npfs");
	call flag (aste.dnzp, "dnzp");
	call flag (aste.ddnp, "ddnp");
	call flag (aste.synchronized, "synchronized");
	call flag (aste.fmchanged, "fmchanged");
	call flag (aste.fmchanged1, "fmchanged1");
	call flag (aste.fms, "fms");
	call flag (aste.damaged, "damaged");
	call flag (aste.pack_ovfl, "pack_ovfl");


	call fs_date_time (aste.dtu, time_string);
	if aste.dtu ^= ""b
	then call ioa_ (" DTU: ^a", time_string);
	call fs_date_time (aste.dtm, time_string);
	if aste.dtm ^= ""b
	then call ioa_ (" DTM: ^a", time_string);

	call flag$$display;

	if aste.dirsw				/* Quota */
	then call ioa_ (" quota: (^d, ^d), used: (^d, ^d)", aste.quota (0), aste.quota (1), aste.used (0),
		aste.used (1));
	else call ioa_ (" usage count: ^d", seg_aste.usage);

	if dtp ^= null ()
	then if aste.pvtx > 0 & aste.pvtx <= dt.n_entries
	     then do;
		     diskname = dt.array (aste.pvtx).drive_name;
		     pvname = dt.array (aste.pvtx).pvname;
		     call ioa_ (" vtocx ^o on pvtx ^d (""^a""), disk ^a", aste.vtocx, aste.pvtx, pvname, diskname);
		end;
	     else go to NO_NAME;
	else
NO_NAME:
	     call ioa_ (" vtocx ^o on pvtx ^d", aste.vtocx, aste.pvtx);

	pts = ptsizes (fixed (astep -> aste.ptsi, 3));	/* get page table size */
	if file_map_sw
	then call file_map;
	if octal
	then call octal_dump;
	call rts;
	return;

/* DISPLAY THE PAGE TABLE */

file_map:
     procedure;
	call ioa_$nnl ("^/File map:^/");
	skipping = "0"b;
	last_pte = ""b;
	ptp = addwordno (astep, size (aste));
	do i = 0 to pts - 1;
	     if ptp -> pt (i) = last_pte & i < (pts - 1)
	     then skipping = "1"b;
	     else if skipping
	     then do;
		     skipping = "0"b;
		     call ioa_ ("======");
		end;
	     if ^skipping | i = pts - 1
	     then do;
		     ptwp = addr (ptp -> pt (i));
		     call ioa_$nnl ("^3d ", i);
		     call display_ptw (ptwp);
		     last_pte = ptp -> pt (i);
		end;
	end;
	return;
     end file_map;

octal_dump:
     procedure;

	call ioa_ ("^/Octal dump:^/");
	call ioa_ ("ASTE:");
	call dump_segment_ (iox_$user_output, addr (aste), -1, 0, size (aste), "01000"b);
	call ioa_ ("^/File map:");
	call dump_segment_ (iox_$user_output, addwordno (astep, size (aste)), -1, 0, (pts), "01000"b);
	return;
     end octal_dump;

rts:
     proc;
	call release_temp_segments_ (myname, q, (0));
     end rts;

fs_date_time:
     procedure (dt, cdt);

	declare dt		   bit (36);
	declare cdt		   char (*);
	declare 1 clock_		   aligned like clock_value;
	declare time		   fixed bin (71);

	declare code		   fixed bin (35);
	declare sub_error_		   condition;


	clock_ = ""b;
	clock_.fs_time = dt;
	unspec (time) = string (clock_);
	if time = 0
	then
ZERO:
	     do;
		cdt = "ZERO";
		return;
	     end;

	on sub_error_ go to ZERO;
	cdt = date_time_$format ("iso_long_date_time", time, "", "");
	return;
     end fs_date_time;


display_ptw:
     procedure (p);

	declare p			   ptr;
	declare 1 ptw		   aligned like l68_ptw based (p);
	declare 1 core_ptw		   aligned like l68_core_ptw based (p);
	if ptw.add_type & add_type.core ^= ""b
	then do;
		call ioa_ ("^a ^[^^^]er,^[^^^]phu,^[^^^]phu1,^[^^^]phm,^[^^^]phm1,^[^^^]wired,^[^^^]os,^[^^^]valid",
		     display_devadd (substr (unspec (ptw), 1, 22)), ^core_ptw.er, ^core_ptw.phu, ^core_ptw.phu1,
		     ^core_ptw.phm, ^core_ptw.phm1, ^core_ptw.wired, ^core_ptw.os, ^core_ptw.valid);
		cmep = ptr (cmp, core_ptw.frame * 4);
		call ioa_ ("      Disk address: ^a", display_devadd (cme.devadd));
		call ioa_ (
		     "      CME flags: ^[^^^]synch_held,io=^[output^;input^],^[^^^]er,^[^^^]removing,^[^^^]abs_w,^[^^^]abs_usable,^/                 ^[^^^]notify_requested,^[^^^]phm_hedge,pin_counter=^d"
		     , ^cme.synch_held, cme.io, ^cme.er, ^cme.removing, ^cme.abs_w, ^cme.abs_usable,
		     ^cme.notify_requested, ^cme.phm_hedge, cme.pin_counter);
	     end;
	else call ioa_ ("^a", display_devadd (substr (unspec (ptw), 1, 22)));


	return;
     end display_ptw;

display_devadd:
     procedure (D) returns (char (*));

	declare D			   bit (22) unaligned;

	declare 1 devadd_b		   unaligned,
		2 add		   bit (18),
		2 type		   bit (4);

	declare 1 devadd		   unaligned,
		2 null		   bit (1),
		2 add		   fixed bin (17) unsigned,
		2 type		   bit (4);
	declare null		   builtin;

	declare RS		   char (1000) varying;
	declare ptp		   pointer;
	declare nulled		   bit (1);

	RS = "";
	string (devadd_b) = D;
	unspec (devadd) = D;
	ptp = addr (devadd);

	nulled = "0"b;
	if (devadd.type & add_type.non_null) ^= ""b
	then do;
		if (devadd.type & add_type.core) ^= ""b
		then call ioa_$rsnnl ("Memory address ^8o", RS, (0), ptp -> l68_core_ptw.frame * sys_info$page_size);
		else if (devadd.type & add_type.disk) ^= ""b
		then do;
			if devadd.null
			then do;
				nulled = "1"b;
				devadd.null = "0"b;
			     end;
			call ioa_$rsnnl ("Disk page ^8o ^[(nulled)^]", RS, (0), devadd.add, nulled);
		     end;
		else call ioa_$rsnnl ("Invalid type ^4b add ^o", RS, (0), devadd.type, devadd.add);
	     end;
	else do;					/* null address */

		declare 1 null_address	   unaligned,
			2 three_7_7_0	   bit (12) unaligned,
			2 key		   bit (6),
			2 type		   bit (4);

		string (null_address) = D;		/* so far, so good */
		call ioa_$rsnnl ("Null address from ^a", RS, (0), pc_null_address_names (bin (null_address.key, 6)));

	     end;

	return (RS);

     end display_devadd;

	declare flags		   (0:1) char (1000) varying;
						/* off, on */
	declare line_used		   (0:1) fixed bin; /* line length used up on cur line */
	declare line_length		   fixed bin;

flag$$init:
     procedure;

	declare get_line_length_$switch  entry (pointer, fixed binary (35)) returns (fixed binary);
	declare iox_$user_output	   ptr ext static;

	line_length = get_line_length_$switch (iox_$user_output, code);
	if code ^= 0
	then line_length = 72;
	flags (0) = "OFF:     ";
	flags (1) = "ON:      ";			/* these are eight characters long */
	line_used (*) = 9;				/* always prepend space */
	return;

flag:
     entry (flag_bit, flag_name);

	declare flag_bit		   bit (1) unaligned;
	declare flag_name		   char (*);

	declare flag_bin		   fixed bin (1);

	flag_bin = bin (flag_bit, 1);
	if line_used (flag_bin) + length (flag_name) + 1 > line_length
	then do;
		flags (flag_bin) = flags (flag_bin) || byte (10) || copy (" ", 9);
						/* NL */
		line_used (flag_bin) = 9;
	     end;
	flags (flag_bin) = flags (flag_bin) || " " || flag_name;
						/* assume trimmed */
	line_used (flag_bin) = line_used (flag_bin) + 1 + length (flag_name);
	return;

flag$$display:
     entry;

	call ioa_ ("^/^a^/^a^/", flags (1), flags (0));
	return;
     end flag$$init;

%page;
%include sst;
%include disk_table;
%include "ptw.l68";
%include pc_null_address_names;
%include aste;
%include cmp;
%include sdw;
%include system_clock_value_;
%include add_type;
     end;
