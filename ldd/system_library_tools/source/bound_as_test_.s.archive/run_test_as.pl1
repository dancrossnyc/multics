/****^  ********************************************
        *                                          *
        * Copyright, (C) Honeywell Bull Inc., 1987 *
        *                                          *
        ******************************************** */

/* format: style4,indattr */

/****^  HISTORY COMMENTS:
  1) change(86-04-18,Swenson), approve(87-07-13,MCR7741),
     audit(87-07-13,GDixon), install(87-08-04,MR12.1-1055):
     Created in order to run answering service in a test process.
                                                   END HISTORY COMMENTS */
/* Automatic */

run_test_as:
     procedure options (variable);

/* Automatic */

dcl  atd		        char (512) automatic;
dcl  1 auto_log_salvage_arg aligned like log_salvage_arg automatic;
dcl  code		        fixed bin (35) automatic;
dcl  log_salv_code	        fixed bin (35) automatic;
dcl  log_salv_err_cnt       fixed bin (35) automatic;
dcl  sci_ptr	        ptr automatic;
dcl  system_control_dirname char (168) automatic;

/* Entries */

dcl  absentee_user_manager_$term_aum entry options (variable);
dcl  as_$as_init	        entry (fixed bin (35));
dcl  as_$go	        entry (fixed bin (35));
dcl  as_$startup	        entry (fixed bin (35));
dcl  com_err_	        entry () options (variable);
dcl  ioa_$rsnnl	        entry () options (variable);
dcl  iox_$attach_name       entry (char (*), ptr, char (*), ptr, fixed bin (35));
dcl  iox_$control	        entry (ptr, char (*), ptr, fixed bin (35));
dcl  iox_$open	        entry (ptr, fixed bin, bit (1) aligned, fixed bin (35));
dcl  log_write_$open        entry (char (*), char (*), bit (1) aligned, ptr, fixed bin (35));
dcl  log_salvage_	        entry (char (*), char (*), ptr, fixed bin (35));
dcl  mrdim_$test_mrd        entry (char (*));
dcl  pathname_	        entry (char (*), char (*)) returns (char (168));
dcl  probe	        entry options (variable);
dcl  sc_create_sci_	        entry (ptr, fixed bin (35));
dcl  ssu_$abort_subsystem   entry () options (variable);
dcl  ssu_$destroy_invocation entry (ptr);
dcl  ssu_$print_message     entry () options (variable);
dcl  ssu_$standalone_invocation entry (ptr, char (*), char (*), ptr, entry, fixed bin (35));

/* External */

dcl  iox_$error_output      ptr external static;
dcl  iox_$user_output       ptr external static;

/* Constant */

dcl  FALSE	        bit (1) aligned initial ("0"b) internal static options (constant);
dcl  ME		        char (32) initial ("run_test_as") internal static options (constant);
dcl  TRUE		        bit (1) aligned initial ("1"b) internal static options (constant);

/* Conditions */

dcl  cleanup	        condition;
%page;
/* Program */

	sci_ptr = null ();
	on cleanup
	     call Clean_Up ();

	call ssu_$standalone_invocation (sci_ptr, ME, "1.0", null (),
	     Abort_Subsystem, code);
	if code ^= 0 then do;
	     call com_err_ (code, ME,
		"Creating standalone subsystem invocation.");
	     goto RETURN;
	end;

	call Process_Arguments ();

	sc_stat_$test_mode = TRUE;
	sc_stat_$as_log_write_ptr = null ();
	sc_stat_$admin_log_write_ptr = null ();
	sc_stat_$admin_log_iocb = null ();
	sc_stat_$mc_iocb = null ();
	sc_stat_$mc_is_on = FALSE;

	call Process_Arguments ();

	sc_stat_$Multics = FALSE;
	sc_stat_$sysdir = system_control_dirname;
	sc_stat_$log_dir = rtrim (system_control_dirname) || ">as_logs";

	call Attach_IO_Switches ();

	call log_write_$open (sc_stat_$log_dir, "log",
	     "1"b /* create */, sc_stat_$as_log_write_ptr, code);
	if code ^= 0 then
	     call ssu_$abort_subsystem (sci_ptr, code,
		"Attempting to open ^a>^a.", sc_stat_$log_dir, "log");

	call ioa_$rsnnl ("log_output_ ^a>admin_log", atd, (0),
	     sc_stat_$log_dir);
	call iox_$attach_name ("admin_log_", sc_stat_$admin_log_iocb, (atd),
	     codeptr (run_test_as), code);
	if code ^= 0 then
	     call ssu_$abort_subsystem (sci_ptr, code,
		"Could not attach admin_log log.");
	call iox_$open (sc_stat_$admin_log_iocb, Stream_output, "1"b, code);
	if code ^= 0 then do;
	     log_salv_err_cnt = 0;
	     unspec (auto_log_salvage_arg) = ""b;
	     log_salvage_arg_ptr = addr (auto_log_salvage_arg);
	     log_salvage_arg.version = LOG_SALVAGE_ARG_VERSION_1;
	     log_salvage_arg.reporter_proc = print_log_salv_error;
	     call log_salvage_ (sc_stat_$log_dir, "admin_log",
		log_salvage_arg_ptr, log_salv_code);
	     if log_salv_code = 0 then do;
		call iox_$open (sc_stat_$admin_log_iocb, Stream_output,
		     "1"b, code);
		if code ^= 0 then
		     call ssu_$abort_subsystem (sci_ptr, code,
			"Could not open admin_log log.");
	     end;
	     else
		call ssu_$abort_subsystem (sci_ptr, code,
		     "Could not salvage admin_log log.");
	end;
	call iox_$control (sc_stat_$admin_log_iocb, "get_log_write_data_ptr",
	     addr (sc_stat_$admin_log_write_ptr), code);
	if code ^= 0 then
	     call ssu_$abort_subsystem (sci_ptr, code,
		"Could not get log_write_data_ptr for admin_log log.");

	call sc_create_sci_ (sc_stat_$master_sci_ptr, code);
	if code ^= 0 then
	     call ssu_$abort_subsystem (sci_ptr, code,
		"Could not create system control ssu_ invocation.");

	sc_stat_$Multics_typed = TRUE;
	sc_stat_$Star_typed = TRUE;

/**** Prevent a call to hardcore to initialize lct */
	as_data_$lct_initialized = TRUE;

	call mrdim_$test_mrd (system_control_dirname);

	call absentee_user_manager_$term_aum ();	/* no absentees */
	call as_$startup (code);
	if code ^= 0 then
	     call ssu_$abort_subsystem (sci_ptr, code,
		"Calling as_$startup.");

	sc_stat_$Multics = TRUE;
	sc_stat_$Go_typed = TRUE;
	call as_$go (code);
	if code ^= 0 then
	     call ssu_$abort_subsystem (sci_ptr, code,
		"Calling as_$go.");
	sc_stat_$Go = TRUE;
RETURN:
	return;
%page;
Process_Arguments:
     procedure ();

dcl  argument_idx	        fixed bin automatic;
dcl  argument_lth	        fixed bin (21) automatic;
dcl  argument_ptr	        ptr automatic;
dcl  n_arguments	        fixed bin automatic;

dcl  argument	        char (argument_lth) based (argument_ptr);

dcl  absolute_pathname_     entry (char (*), char (*), fixed bin (35));
dcl  ssu_$arg_count	        entry (ptr, fixed bin);
dcl  ssu_$arg_ptr	        entry (ptr, fixed bin, ptr, fixed bin (21));

	call ssu_$arg_count (sci_ptr, n_arguments);
	if n_arguments ^= 1 then
	     call ssu_$abort_subsystem (sci_ptr,
		"Syntax is: ^a system_control_dirname.", ME);

	call ssu_$arg_ptr (sci_ptr, 1, argument_ptr, argument_lth);

	call absolute_pathname_ (argument, system_control_dirname, code);
	if code ^= 0 then
	     call ssu_$abort_subsystem (sci_ptr, "^a", argument);
	return;
     end Process_Arguments;
%page;
Abort_Subsystem:
     procedure ();

	call Clean_Up ();
	goto RETURN;
     end Abort_Subsystem;
%page;
Attach_IO_Switches:
     procedure ();

	call iox_$attach_name ("severity1", sc_stat_$sv1_iocb,
	     "syn_ user_i/o", codeptr (run_test_as), code);
	if code ^= 0 then
	     call ssu_$abort_subsystem (sci_ptr, code,
		"Could not attach sc_stat_$sv1_iocb.");
	call iox_$attach_name ("severity2", sc_stat_$sv2_iocb,
	     "syn_ user_i/o", codeptr (run_test_as), code);
	if code ^= 0 then
	     call ssu_$abort_subsystem (sci_ptr, code,
		"Could not attach sc_stat_$sv2_iocb.");
	call iox_$attach_name ("severity3", sc_stat_$sv3_iocb,
	     "syn_ user_i/o", codeptr (run_test_as), code);
	if code ^= 0 then
	     call ssu_$abort_subsystem (sci_ptr, code,
		"Could not attach sc_stat_$sv3_iocb.");
	call iox_$attach_name ("master_i/o", sc_stat_$master_iocb,
	     "syn_ user_i/o", codeptr (run_test_as), code);
	if code ^= 0 then
	     call ssu_$abort_subsystem (sci_ptr, code,
		"Could not attach sc_stat_$master_iocb.");
	return;
     end Attach_IO_Switches;
%page;
Clean_Up:
     procedure ();
	if sci_ptr ^= null () then
	     call ssu_$destroy_invocation (sci_ptr);
	return;
     end Clean_Up;
%page;
print_log_salv_error:
     procedure (P_msg);

dcl  P_msg	        char (*) parameter;
dcl  msg		        char (1024) varying;

	msg = P_msg;

	log_salv_err_cnt = log_salv_err_cnt + 1;

	if log_salv_err_cnt = 1 then
	     call ssu_$print_message (sci_ptr, "Messages from log salvage of ^a:", pathname_ (sc_stat_$log_dir, "admin_log"));
	call ssu_$print_message (sci_ptr, "^a", msg);
	return;
     end print_log_salv_error;

/* format: off */
%page; %include as_data_;
%page; %include iox_modes;
%page; %include log_salvage_arg;
%page; %include sc_stat_;

     end run_test_as;
