/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   *********************************************************** */
/* format: style2 */

/* TEST_PNT_MANAGER_:  This program is used to support the 
   pnt_manager_$test interface.  It plays with refnames so that
   all future references to pnt_manager_ will be made to this
   program.  This program will then serve as a transfer vector
   to the pnt_db_util_ entrypoints.  The result is that the 
   pnt_manager_ entrypoints will function on a designated copy 
   of the PNT in the user ring. */

test_pnt_manager_:
     procedure (P_dirname);

/* Written 1984-09-14 by E. Swenson */
/* Modified 1985-01-25 by E. Swenson for auditing */

/* Parameters */

	dcl     P_acl_ptr		 ptr parameter;
	dcl     P_area_ptr		 ptr parameter;
	dcl     P_code		 fixed bin (35) parameter;
	dcl     P_desired_version	 char (*) parameter;
	dcl     P_dirname		 char (*) parameter;
	dcl     P_entryname		 char (*) parameter;
	dcl     P_error_on_target	 bit (1) aligned parameter;
	dcl     P_new_entryname	 char (*) parameter;
	dcl     P_no_sysdaemon	 bit (1) aligned parameter;
	dcl     P_num_entries	 fixed bin (35) parameter;
	dcl     P_old_entryname	 char (*) parameter;
	dcl     P_password		 char (*) parameter;
	dcl     P_person_id		 char (*) parameter;
	dcl     P_pnt_entry_ptr	 ptr parameter;
	dcl     P_pnt_info_ptr	 ptr parameter;
	dcl     P_pnt_size		 fixed bin (35) parameter;
	dcl     P_record_no		 fixed bin (35) parameter;
	dcl     P_set_network_password bit (1) aligned parameter;
	dcl     P_set_password	 bit (1) aligned parameter;
	dcl     P_short_password	 bit (1) aligned parameter;
	dcl     P_target_dirname	 char (*) parameter;
	dcl     P_target_entryname	 char (*) parameter;

/* Automatic */

	dcl     code		 fixed bin (35);
	dcl     dirname		 char (168);
	dcl     dirname_lth		 fixed bin (21);
	dcl     entryname		 char (32);
	dcl     seg_ptr		 ptr;

/* External Entries */

	dcl     hcs_$fs_get_path_name	 entry (ptr, char (*), fixed bin, char (*), fixed bin (35));
	dcl     hcs_$fs_get_seg_ptr	 entry (char (*), ptr, fixed bin (35));
	dcl     hcs_$initiate	 entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr,
				 fixed bin (35));
	dcl     pathname_		 entry (char (*), char (*)) returns (char (168));
	dcl     pnt_db_util_$add_entry entry (ptr, bit (1) aligned, char (*), ptr, fixed bin (35));
	dcl     pnt_db_util_$admin_get_entry
				 entry (ptr, bit (1) aligned, char (*), ptr, fixed bin (35));
	dcl     pnt_db_util_$close	 entry (ptr, bit (1) aligned, fixed bin (35));
	dcl     pnt_db_util_$get_abs_entry
				 entry (ptr, bit (1) aligned, fixed bin (35), ptr, fixed bin (35));
	dcl     pnt_db_util_$get_network_password
				 entry (ptr, bit (1) aligned, char (*), char (*), bit (1) aligned, fixed bin (35))
				 ;
	dcl     pnt_db_util_$login_get_entry
				 entry (ptr, bit (1) aligned, char (*), char (*), ptr, fixed bin (35));
	dcl     pnt_db_util_$network_get_entry
				 entry (ptr, bit (1) aligned, char (*), char (*), ptr, fixed bin (35));
	dcl     pnt_db_util_$open	 entry (char (*), char (*), bit (1) aligned, ptr, fixed bin (35));
	dcl     pnt_db_util_$priv_get_abs_entry
				 entry (ptr, bit (1) aligned, fixed bin (35), ptr, fixed bin (35));
	dcl     pnt_db_util_$priv_get_entry
				 entry (ptr, bit (1) aligned, char (*), ptr, fixed bin (35));
	dcl     pnt_db_util_$remove_entry
				 entry (ptr, bit (1) aligned, char (*), fixed bin (35));
	dcl     pnt_db_util_$table_data
				 entry (ptr, bit (1) aligned, ptr, fixed bin (35), fixed bin (35));
	dcl     pnt_db_util_$update_entry
				 entry (ptr, bit (1) aligned, ptr, bit (1) aligned, bit (1) aligned,
				 fixed bin (35));
	dcl     pnt_db_util_$validate_entry
				 entry (ptr, bit (1) aligned, char (*), fixed bin (35));

	dcl     pnt_fs_util_$add_acl_entries
				 entry (char (*), char (*), ptr, fixed bin (35));
	dcl     pnt_fs_util_$chname_file
				 entry (char (*), char (*), char (*), char (*), fixed bin (35));
	dcl     pnt_fs_util_$copy	 entry (char (*), char (*), char (*), char (*), bit (1) aligned, fixed bin (35));
	dcl     pnt_fs_util_$create	 entry (char (*), char (*), fixed bin (35), fixed bin (35));
	dcl     pnt_fs_util_$delete	 entry (char (*), char (*), fixed bin (35));
	dcl     pnt_fs_util_$delete_acl_entries
				 entry (char (*), char (*), ptr, fixed bin (35));
	dcl     pnt_fs_util_$list_acl	 entry (char (*), char (*), char (*), ptr, ptr, fixed bin (35));
	dcl     pnt_fs_util_$replace_acl
				 entry (char (*), char (*), ptr, bit (1) aligned, fixed bin (35));
	dcl     pnt_fs_util_$validate	 entry (char (*), char (*), fixed bin (35));
	dcl     sub_err_		 entry () options (variable);
	dcl     term_$single_refname	 entry (char (*), fixed bin (35));
	dcl     unique_chars_	 entry (bit (*)) returns (char (15));
	dcl     unique_bits_	 entry () returns (bit (70));

/* Internal Static */

	dcl     already_swapped_refnames
				 bit (1) aligned internal static initial ("0"b);
	dcl     pnt_ptr		 ptr initial (null ()) internal static;

	dcl     saved_pnt_dir	 char (168) initial (" ") internal static;

/* External Static */

	dcl     error_table_$segknown	 fixed bin (35) external static;

/* Constant */

	dcl     ME		 char (32) initial ("test_pnt_manager_") internal static options (constant);
	dcl     NO_AUDIT		 bit (1) aligned initial ("0"b) internal static options (constant);
	dcl     PNT_NAME		 char (7) initial ("PNT.pnt") internal static options (constant);

/* Conditions */

	dcl     cleanup		 condition;

/* Builtin */

	dcl     (addr, codeptr, null)	 builtin;
%page;
/* Program */

test:
     entry (P_dirname);				/* In case we try to run pnt_manager_$test again. */

	if saved_pnt_dir = ""
	then saved_pnt_dir = P_dirname;
	else if P_dirname = saved_pnt_dir
	then return;
	else do;					/* New test directory */
		saved_pnt_dir = P_dirname;
		if pnt_ptr ^= null ()
		then /* We had an old one */
		     call CLEAN_UP ();
	     end;

	if already_swapped_refnames
	then /* only need do this once */
	     return;

/**** We first add a shriekname reference name to pnt_manager_, then
      we terminate the reference name "pnt_manager_" and initiate
      this program with the reference name "pnt_manager_".  All future
      calls to pnt_manager_ will actually be made to this program. */

	call hcs_$fs_get_seg_ptr ("pnt_manager_", seg_ptr, code);
	if code ^= 0
	then do;
		call CLEAN_UP ();
		call sub_err_ (code, ME, ACTION_CANT_RESTART, null (), (0), "Attempting to get ptr to pnt_manager_.");
		return;
	     end;

	call hcs_$fs_get_path_name (seg_ptr, dirname, (0), entryname, code);
	if code ^= 0
	then do;
		call CLEAN_UP ();
		call sub_err_ (code, ME, ACTION_CANT_RESTART, null (), (0),
		     "Attempting to get pathname of ""pnt_manager_"".");
		return;
	     end;

	call hcs_$initiate ((dirname), entryname, unique_chars_ (unique_bits_ ()), 0, 0, seg_ptr, code);
	if code ^= error_table_$segknown & code ^= 0
	then do;
		call CLEAN_UP ();
		call sub_err_ (code, ME, ACTION_CANT_RESTART, null (), (0),
		     "Attempting to add shriekname reference name to ^a", pathname_ (dirname, entryname));
		return;
	     end;

	call term_$single_refname ("pnt_manager_", code);
	if code ^= 0
	then do;
		call CLEAN_UP ();
		call sub_err_ (code, ME, ACTION_CANT_RESTART, null (), (0),
		     "Attempting to terminate reference name ""pnt_manager_""");
		return;
	     end;

	call hcs_$fs_get_path_name (codeptr (test_pnt_manager_), dirname, (0), entryname, code);
	if code ^= 0
	then do;
		call CLEAN_UP ();
		call sub_err_ (code, ME, ACTION_CANT_RESTART, null (), (0), "Attempting to get pathname of ^a", ME);
		return;
	     end;

	call hcs_$initiate (dirname, entryname, "pnt_manager_", 0, 0, seg_ptr, code);
	if code ^= 0 & code ^= error_table_$segknown
	then do;
		call CLEAN_UP ();
		call sub_err_ (code, ME, ACTION_CANT_RESTART, null (), (0),
		     "Attempting to add refname of ""pnt_manager_"" to ^a", pathname_ (dirname, entryname));
		return;
	     end;

	already_swapped_refnames = "1"b;

	return;
%page;
/**** Here follow entries which correspond to the entries in the real
      pnt_manager_.  In this program, we just transfer to the appropriate
      pnt_db_util_ or pnt_fs_util_ entrypoint after possibly changing
      the first argument. */

add_acl_entries:
     entry (P_dirname, P_entryname, P_acl_ptr, P_code);

	call pnt_fs_util_$add_acl_entries (P_dirname, P_entryname, P_acl_ptr, P_code);
	return;

add_entry:
     entry (P_person_id, P_pnt_entry_ptr, P_code);

	call INITIALIZE ();
	call pnt_db_util_$add_entry (pnt_ptr, NO_AUDIT, P_person_id, P_pnt_entry_ptr, P_code);
	return;

admin_get_entry:
     entry (P_person_id, P_pnt_entry_ptr, P_code);

	call INITIALIZE ();
	call pnt_db_util_$admin_get_entry (pnt_ptr, NO_AUDIT, P_person_id, P_pnt_entry_ptr, P_code);
	return;

chname_file:
     entry (P_dirname, P_entryname, P_old_entryname, P_new_entryname, P_code);

	call pnt_fs_util_$chname_file (P_dirname, P_entryname, P_old_entryname, P_new_entryname, P_code);
	return;

copy:
     entry (P_dirname, P_entryname, P_target_dirname, P_target_entryname, P_error_on_target, P_code);

	call pnt_fs_util_$copy (P_dirname, P_entryname, P_target_dirname, P_target_entryname, P_error_on_target, P_code)
	     ;
	return;

create:
     entry (P_dirname, P_entryname, P_pnt_size, P_code);

	call pnt_fs_util_$create (P_dirname, P_entryname, P_pnt_size, P_code);
	return;

delete:
     entry (P_dirname, P_entryname, P_code);

	call pnt_fs_util_$delete (P_dirname, P_entryname, P_code);
	return;

delete_acl_entries:
     entry (P_dirname, P_entryname, P_acl_ptr, P_code);

	call pnt_fs_util_$delete_acl_entries (P_dirname, P_entryname, P_acl_ptr, P_code);
	return;

get_abs_entry:
     entry (P_record_no, P_pnt_entry_ptr, P_code);

	call INITIALIZE ();
	call pnt_db_util_$get_abs_entry (pnt_ptr, NO_AUDIT, P_record_no, P_pnt_entry_ptr, P_code);
	return;

get_entry:
     entry (P_person_id, P_pnt_entry_ptr, P_code);

	call INITIALIZE ();
	call pnt_db_util_$admin_get_entry (pnt_ptr, NO_AUDIT, P_person_id, P_pnt_entry_ptr, P_code);
	return;

get_network_password:
     entry (P_person_id, P_password, P_short_password, P_code);

	call INITIALIZE ();
	call pnt_db_util_$get_network_password (pnt_ptr, NO_AUDIT, P_person_id, P_password, P_short_password, P_code);
	return;

list_acl:
     entry (P_dirname, P_entryname, P_desired_version, P_area_ptr, P_acl_ptr, P_code);

	call pnt_fs_util_$list_acl (P_dirname, P_entryname, P_desired_version, P_area_ptr, P_acl_ptr, P_code);
	return;

login_get_entry:
     entry (P_person_id, P_password, P_pnt_entry_ptr, P_code);

	call INITIALIZE ();
	call pnt_db_util_$login_get_entry (pnt_ptr, NO_AUDIT, P_person_id, P_password, P_pnt_entry_ptr, P_code);
	return;

network_get_entry:
     entry (P_person_id, P_password, P_pnt_entry_ptr, P_code);

	call INITIALIZE ();
	call pnt_db_util_$network_get_entry (pnt_ptr, NO_AUDIT, P_person_id, P_password, P_pnt_entry_ptr, P_code);
	return;

priv_get_abs_entry:
     entry (P_record_no, P_pnt_entry_ptr, P_code);

	call INITIALIZE ();
	call pnt_db_util_$priv_get_abs_entry (pnt_ptr, NO_AUDIT, P_record_no, P_pnt_entry_ptr, P_code);
	return;

priv_get_entry:
     entry (P_person_id, P_pnt_entry_ptr, P_code);

	call INITIALIZE ();
	call pnt_db_util_$priv_get_entry (pnt_ptr, NO_AUDIT, P_person_id, P_pnt_entry_ptr, P_code);
	return;

remove_entry:
     entry (P_person_id, P_code);

	call INITIALIZE ();
	call pnt_db_util_$remove_entry (pnt_ptr, NO_AUDIT, P_person_id, P_code);
	return;

replace_acl:
     entry (P_dirname, P_entryname, P_acl_ptr, P_no_sysdaemon, P_code);

	call pnt_fs_util_$replace_acl (P_dirname, P_entryname, P_acl_ptr, P_no_sysdaemon, P_code);
	return;

table_data:
     entry (P_pnt_info_ptr, P_num_entries, P_code);

	call INITIALIZE ();
	call pnt_db_util_$table_data (pnt_ptr, NO_AUDIT, P_pnt_info_ptr, P_num_entries, P_code);
	return;

update_entry:
     entry (P_pnt_entry_ptr, P_set_password, P_set_network_password, P_code);

	call INITIALIZE ();
	call pnt_db_util_$update_entry (pnt_ptr, NO_AUDIT, P_pnt_entry_ptr, P_set_password, P_set_network_password,
	     P_code);
	return;

validate:
     entry (P_dirname, P_entryname, P_code);

	call pnt_fs_util_$validate (P_dirname, P_entryname, P_code);
	return;

validate_entry:
     entry (P_person_id, P_code);

	call INITIALIZE ();
	call pnt_db_util_$validate_entry (pnt_ptr, NO_AUDIT, P_person_id, P_code);
	return;
%page;
INITIALIZE:
     procedure ();

	if pnt_ptr ^= null				/* already initialized */
	then return;

TRY_TO_OPEN_PNT:
	call pnt_db_util_$open (saved_pnt_dir, PNT_NAME, NO_AUDIT, pnt_ptr, code);
	if code ^= 0
	then do;
		call sub_err_ (code, ME, ACTION_CAN_RESTART, null (), (0), "Cannot open  the PNT in ^a.",
		     pathname_ (saved_pnt_dir, PNT_NAME));
		goto TRY_TO_OPEN_PNT;
	     end;

	return;
     end INITIALIZE;
%page;
CLEAN_UP:
     procedure ();

/**** This internal procedure is called in the event of an error in the
      reference name manipulation to close the PNT since it is of no
      use in the case of an error. */

	call pnt_db_util_$close (pnt_ptr, NO_AUDIT, (0));
	return;
     end CLEAN_UP;

/* format: off */
%page; %include sub_err_flags;
/* format: on */

     end test_pnt_manager_;
