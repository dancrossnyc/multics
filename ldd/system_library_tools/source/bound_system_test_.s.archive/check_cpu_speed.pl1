/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(87-05-18,Lippard), approve(87-02-09,MCR7616),
     audit(87-06-03,Farley), install(87-08-06,MR12.1-1064):
     Modified to use hcs_$set_procs_required instead of
     phcs_$set_procs_required.
  2) change(87-08-13,Lippard), approve(87-02-09,PBF7616),
     audit(87-08-13,Farley), install(87-08-18,MR12.1-1090):
     Modified to use hcs_$get_procs_required instead of ring_zero_peek_.
                                                   END HISTORY COMMENTS */


/* format: ^inddcls,ind4,ifthenstmt,ifthendo,thendo,ifthen,tree,^case */

check_cpu_speed: proc;

/*
   Program to test the speed of a CPU and determine whether cache and
   associative memory are on.
   R. E. Mullen
*/

/*
    Modified 83 June 6 by Art Beattie: changed to look at all of the
      configuration deck for CPU cards.
    Modified 83 July by Art Beattie: made the following changes;
      1) If no arguments were supplied, it should use only the users subset of
         CPUs that are currently online.
      2) If arguments are supplied (CPUs tags), it should run on them and only
         them.
      3) In either of the above two cases, the user is left running on the same
         subset of CPUs that check_cpu_speed found the user running on.
      4) If the user does not have access to phcs_, program will not run.
    Modified 84 May 25 to fix bug where user process wasn't getting default
      set of CPUs restored properly.
*/

        call cu_$af_return_arg (n_args, arg_ptr, arg_len, code);
        if code = 0 then do;
	      call active_fnc_err_ (error_table_$active_function, my_name);
	      return;
	  end;

/* Determine desired set of CPUs to test. */

        test_cpu_string = "0"b;
        do argno = 1 to n_args;
	  call cu_$arg_ptr (argno, arg_ptr, arg_len, code);
	  if arg = "-bf" | arg = "-brief" then brief_mode = "1"b;
	  else if arg = "-warn" then loud_mode = "1"b;
	       else do;

		     if verify (arg, CPU_TAGS) ^= 0 then do;
			   call com_err_ (0, my_name, "invalid cpu in argument: ^a", arg);
			   return;
		         end;

		     do i = 1 to arg_len;
		         substr (test_cpu_string, mod (index (CPU_TAGS, substr (arg, i, 1)) - 1, 8) + 1, 1) = "1"b;
		     end;

		 end;
        end;					/* ends argno do loop */

        if loud_mode then do;
	   call check_gate_access_ ("phcs_", codeptr (check_cpu_speed), code);
	   if code ^= 0 then do;
	        call com_err_ (code, my_name, "Cannot use -warn without access to phcs_.");
	        return;
	        end;
	   end;

/* Determine user's current set of CPUs. */

        call hcs_$get_procs_required (initial_cpu_string, default_procs_flag, code);

        if code ^= 0 then do;
	   call com_err_ (code, my_name, "set_proc_required.acs");
	   return;
	 end;

        if test_cpu_string = "0"b then do;
	      test_cpu_string = initial_cpu_string;
	      requested_procs_flag = "0"b;
	  end;

        on cleanup call hcs_$set_procs_required (initial_cpu_string, code);

        do cpu_num = 1 to 8;
	  if substr (test_cpu_string, cpu_num, 1) then do;
		current_cpu_string = copy ("0"b, cpu_num - 1) || "1"b;
		call hcs_$set_procs_required (current_cpu_string, code);
		if code = error_table_$insufficient_access then do;
		     call com_err_ (code, my_name, "While doing set_proc_required.");
		     return;
		end;
		else if code ^= 0 then
		     if requested_procs_flag
		     then call ioa_ ("CPU ^a is not online.", substr ("ABCDEFGH", cpu_num, 1));
		     else ;
		else call do_one_cpu (substr ("ABCDEFGH", cpu_num, 1));
	      end;
        end;
						/* this will force system default flag back on */
        if default_procs_flag then initial_cpu_string = "0"b;

        call hcs_$set_procs_required (initial_cpu_string, code);
        return;

do_one_cpu: proc (cpu_tag);

dcl     cpu_tag		 char (1);

        t3 = 1000000;				/* init to large value */
        do k = 1 to 10;
	  t1 = vclock ();
	  do i = 1 to 100;
	      do j = 1 to 120;
	      end;
	  end;
	  t2 = vclock ();
	  if t2 - t1 < t3 then t3 = t2 - t1;
        end;

        if t3 > 150000 then thing = "associative memory";
        else thing = "cache";

        if t3 > 80000 then onf = "OFF";
        else onf = "ON ";

        if onf = "ON " & brief_mode then return;

        t4 = float (t3) / 1e3;
        call ioa_ ("CPU ^a ^a: ^3a ^8.3f", cpu_tag, thing, onf, t4);

        if onf = "OFF" & loud_mode then
	   call phcs_$ring_0_message ("cpu " || cpu_tag || " " || thing || " off");
        return;

    end do_one_cpu;
%page;

dcl     CPU_TAGS		 char (16) init ("ABCDEFGHabcdefgh") int static options (constant);
dcl     active_fnc_err_	 entry options (variable);
dcl     arg		 char (arg_len) based (arg_ptr);
dcl     arg_len		 fixed bin (21);
dcl     arg_ptr		 ptr;
dcl     argno		 fixed bin;
dcl     brief_mode		 bit (1) init ("0"b);
dcl     check_gate_access_	 entry (char(*), ptr, fixed bin(35));
dcl     cleanup		 condition;
dcl     code		 fixed bin (35);
dcl     codeptr		 builtin;
dcl     com_err_		 entry options (variable);
dcl     copy		 builtin;
dcl     cpu_num		 fixed bin;
dcl     cu_$af_return_arg	 entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl     cu_$arg_ptr		 entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl     (current_cpu_string, initial_cpu_string, test_cpu_string) bit (8) aligned;
dcl     default_procs_flag	 bit (1) aligned init ("0"b);
dcl     error_table_$active_function fixed bin (35) ext static;
dcl     error_table_$insufficient_access fixed bin (35) ext static;
dcl     (i, j, k)		 fixed bin;
dcl     float		 builtin;
dcl     hcs_$get_procs_required entry (bit (8) aligned, bit (1) aligned, fixed bin (35));
dcl     hcs_$set_procs_required entry (bit (8) aligned, fixed bin (35));
dcl     index		 builtin;
dcl     ioa_		 entry options (variable);
dcl     loud_mode		 bit (1) init ("0"b);
dcl     mod		 builtin;
dcl     my_name		 char (15) init ("check_cpu_speed") int static options (constant);
dcl     n_args		 fixed bin;
dcl     onf		 char (3);
dcl     phcs_$ring_0_message   entry (char (*));
dcl     requested_procs_flag	 bit (1) init ("1"b);	/* procs supplied to command */
dcl     substr		 builtin;
dcl     (t1, t2)		 fixed bin (71);
dcl     t3		 fixed bin (35);
dcl     t4		 float bin;
dcl     thing		 char (24);
dcl     vclock		 builtin;
dcl     verify		 builtin;
    end check_cpu_speed;
