/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* Originally coded by Paul Karger August 17, 1971 */
/* Updated by Alan Bier - March l974. */
/* Fixed to eliminate ERROR 295, 05/01/81, W. Olin Sibert */

meter_signal: proc;

dcl  cu_$arg_count entry (fixed bin),
     cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin),
     com_err_ entry options (variable),
     clock_ entry returns (fixed bin (71)),
     ioa_ entry options (variable),
     ioa_$nnl entry options (variable),
     ios_$write_ptr entry (ptr, fixed bin, fixed bin),
    (unclaimed_signal, zerodivide) condition,
     condition_ entry (char (*), entry),
     default_error_handler_ entry,
     convert_binary_integer_$decimal_string entry (fixed bin) returns (char (12) varying),
     cv_dec_check_ entry (char (*), fixed bin) returns (fixed bin (35));

dcl  p pointer,
     newline char (1) aligned;
dcl (mod, unspec, divide, addr, min) builtin;
dcl (nargs, code, argl, c, q, k, i) fixed bin,
     nfaults fixed bin init (1),			/* number of faults to take */
     nframes fixed bin init (1),			/* number of frames to create */
     nuncl fixed bin init (0),			/* frame number for the unclaimed_signal handler */
     nhandlers fixed bin init (0),			/* number of dummy handlers to create */
    (diff, j, l) fixed bin (35),
    (time, newtime) fixed bin (71),
     frame_count fixed bin;

dcl  argp ptr,
     arg char (argl) based (argp),
     unclaimed bit (1) aligned init ("0"b);



/*  */

	p = addr (newline); 			/* Used to use init (addr (...)), got ERROR 295 */
	i, j = 0;
	unspec (newline) = "000001010"b;
	l = 11111111111111111111111111111111111b;
	call cu_$arg_count (nargs);			/* get number of arguments */
	if mod (nargs, 2) ^= 0 then
	     do;					/* must be even number of args */
	     call com_err_ (0, "meter_signal", "Odd number of arguments.");
	     return;
	end;
	do k = 1 to nargs by 2;			/* loop through the arguments two by two */
	     call cu_$arg_ptr (k, argp, argl, code);	/* get pointer to arg */
	     if code ^= 0 then
		do;
err1:		
		call com_err_ (code, "meter_signal");
		return;
	     end;
	     if arg = "-nfaults" then
		do;				/* specify number of faults to take */
		call cu_$arg_ptr (k+1, argp, argl, code);
						/* get number */
		if code ^= 0 then go to err1;

		nfaults = cv_dec_check_ (arg, code);	/* convert it */
		if code ^= 0 then
		     do;
err2:		     
		     call com_err_ (0, "meter_signal", arg);
		     return;
		end;
		if nfaults <= 0 then go to err2;	/* must be at least 1 fault */
		go to next;			/* get next arg */
	     end;
	     if arg = "-nframes" then
		do;				/* sepcify how many stack frames to establish */
		call cu_$arg_ptr (k+1, argp, argl, code);
						/* get the number */
		if code ^= 0 then go to err1;

		nframes = cv_dec_check_ (arg, code);	/* convert it */
		if code ^= 0 then go to err2;
		if nframes <= 0 then go to err2;

		go to next;
	     end;
	     if arg = "-unclaimed" then
		do;				/* we want an uncliamed signal handler */
		call cu_$arg_ptr (k+1, argp, argl, code);
						/* get the number of the frame to put it in */
		if code ^= 0 then go to err1;

		nuncl = cv_dec_check_ (arg, code);	/* convert it */
		if code ^= 0 then go to err2;
		if nuncl <= 0 then go to err2;
		unclaimed = "1"b;
		go to next;
	     end;
	     if arg = "-nhandlers" then
		do;				/* sets the number of dummy handlers */
		call cu_$arg_ptr (k+1, argp, argl, code);
		if code ^= 0 then go to err1;

		nhandlers = cv_dec_check_ (arg, code);
		if code ^= 0 then go to err2;
		if nhandlers <= 0 then go to err2;

		go to next;
	     end;
	     call com_err_ (0, "meter_signal", "Invalid argument.  ^R^a^B", arg);
						/* print error */
	     return;
next:	     
	end;
	call ioa_ ("The following environment will be established:");
	call ioa_ ("^/^d stack frames will be laid down.", nframes);
	if unclaimed then call ioa_ ("An unclaimed signal handler will be in stack frame ^d.", nuncl);
	call ioa_ ("^d dummy interrupt handlers will be established in each frame.", nhandlers);
	call ioa_ ("^d zerodivide faults will be signalled.", nfaults);
	call ioa_ ("^/^/Following are the times in microseconds for each fault:^/^/");
	if ^unclaimed then
	     on zerodivide
	     begin;				/* set up zerodivide handler */
	     newtime = clock_ ();			/* read the clock */
	     diff = newtime - time;			/* get the difference */
	     call ioa_$nnl ("^10d", diff);		/* print it out */
	     j = j + diff;				/* accumulate the sum */
	     l = min (l, diff);			/* get the minimum fault time */
	     i = i + 1;
	     if mod (i, 4) = 0 then call ios_$write_ptr (p, 0, 1); /* put out newline every four */
	     if i >= nfaults then go to all_done;
						/* check fault counter */
	end;					/* return to fault to permit resignalling */
	frame_count = 1;
	if unclaimed then
	     if nuncl = frame_count then
		on condition (unclaimed_signal)
		begin;

	     newtime = clock_ ();
	     diff = newtime - time;
	     call ioa_$nnl ("^10d", diff);
	     j = j + diff;
	     l = min (l, diff);
	     if mod (i, 4) = 0 then call ios_$write_ptr (p, 0, 1);
	     i = i + 1;
	     if i >= nfaults then go to all_done;
	end;
	do c = 1 to nhandlers;			/* set up the dummy handlers */
	     call condition_ ("meter_signal_"|| (convert_binary_integer_$decimal_string (c)),
	     default_error_handler_);
	end;
	if nframes = frame_count then
	     do;					/* is this the last frame? */
div_loop:      
	     time = clock_ ();			/* read the clock */
	     q = divide (1, 0, 17, 0);		/* divide by zero */
	     go to div_loop;			/* loop back - the handler will turn it off at the right time */
	end;
	call frame;

all_done: 
	call ioa_ ("^/^/Minimum value = ^d   Mean = ^d", l, divide (j, nfaults, 35, 0));
	return;
frame:	
	proc;					/* This is the recursive procedure to set up n stack frames */
	     frame_count = frame_count + 1;		/* increment frame counter */
	     if unclaimed then
		if nuncl = frame_count then
		     on condition (unclaimed_signal)
		     begin;

		newtime = clock_ ();
		diff = newtime - time;
		call ioa_$nnl ("^10d", diff);
		j = j + diff;
		l = min (l, diff);
		if mod (i, 4) = 0 then call ios_$write_ptr (p, 0, 1);
		i = i + 1;
		if i >= nfaults then go to all_done;
	     end;
	     do c = 1 to nhandlers;			/* set up the dummy handlers */
		call condition_ ("meter_signal_"|| (convert_binary_integer_$decimal_string (c)),
		default_error_handler_);
	     end;
	     if nframes = frame_count then
		do;				/* is this the last frame */
div_loop: 	
		time = clock_ ();
		q = divide (1, 0, 17, 0);		/* cause fault */
		go to div_loop;
	     end;
	     call frame;				/* recurse to next frame */
	end;
     end;
