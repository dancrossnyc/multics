/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(87-05-18,Lippard), approve(87-02-09,MCR7616),
     audit(87-06-03,Farley), install(87-08-06,MR12.1-1064):
     Modified to use hcs_$set_procs_required instead of
     phcs_$set_procs_required.
                                                   END HISTORY COMMENTS */


/* format: style4 */
write_notify_test: proc;

/* Originally coded by R. Fakoury 08/83 */
/* Modified Feb 1984 by Paul Farley to:
   *   add error handling
   *   if called as active_function, return "true" if error occurs
   *   allow tracing of writes and reads
   *   each process will get its own data segment in the pdir
   *   limit testing to a pair of CPUs, one of which must be a DPS8
   * Modified April 1984 by Paul Farley to:
   *   use current working dir for data segs
   *   use seperate data seg for each seperate invokation
   *   use scs$controller_data from ring_0 to define what SCU bad address
   *   is from.
   *   use dseg and sst_seg to find where page is located before reading and
   *   use this to meter SCU usage.
   * Modified May 1984 by Paul Farley to:
   *   remove tracing code
   *   accept more than a pair of CPUs and do the pairing internally
   *   limit to 1 l68, but many 8/70's which will be internally paired
   * Modified MAY 1984 by R. A. Fawcett to:
   *   Use the scs$processor_data instead of the config_deck
   *   Run only on DPS8M cpus if more than one selected.
   *   Meter page addresses
   *   add the -brief and -long arguments
   *   add "some" diagnostics
   *   require hphcs_ access
   *   add the -word_increment argument and change default to 52
   *   change the starting offset in the page at half the loop_count argument
   *   eleminate the use of history regesters
   *
   * Modified OCT 1984 R. A. Fawcett to make active_function work
   *
   * Modified November 1984 by M. Pandolf to include hc_lock.
*/

/* Labels */

dcl  NEXT_READ_LABEL label;

/* Conditions */
dcl  (cleanup, linkage_error) condition;

/* Static */

dcl  error_count fixed bin int static;
dcl  start_of_sst fixed bin (24) aligned int static init (0);


/* Automatic */

dcl  orig_cpus bit (8) aligned;			/* returned value of CPUs required */
dcl  default_flag bit (1) init ("0"b);			/* ON => process has default CPUs required */
dcl  total_mem fixed bin;
dcl  major_loop_error fixed bin;
dcl  sub_loop_error fixed bin;
dcl  word_inc fixed bin init (52);
dcl  foo_len fixed bin (21);
dcl  dseg_ptr ptr init (null);
dcl  (argp, retP) ptr;
dcl  (argl, retL) fixed bin (21);
dcl  AF_sw bit (1) init ("0"b);
dcl  (long_sw, same_bad) bit (1) init ("0"b);
dcl  (arg_no, cpu, i, j, loop, times, n_args, rd, total_l68, total_dps8,
     wrt, cpus_to_test, deact_loop_cnt, pair_idx,
     cpu_st_ind) fixed bin init (0);
dcl  maj_loop_max fixed bin init (10);
dcl  sub_loop_max fixed bin init (12);
dcl  maj_max_err_count fixed bin;
dcl  sub_max_err_count fixed bin;
dcl  bit_bucket bit (36);
dcl  code fixed bin (35) init (0);
dcl  (HAD_ERROR, phcs_ok, meter_sw, testing_sw, need_page_meter, need_revert_cpu) bit (1) init ("0"b);
dcl  check_cpu_string char (8) varying aligned init ("");
dcl  (dps8_cpu, l68_cpu, test_cpu_string) char (8) init ("");

dcl  pattern bit (36) aligned;
dcl  (data_page, meter_idx) fixed bin;
dcl  mem_meters (0:8) fixed bin (71) aligned;
dcl  1 data_sdw aligned like sdw;
dcl  1 data_ptw aligned like ptw;
dcl  1 last_ptw aligned like ptw;
dcl  1 mem_data (0:7) aligned like scs$controller_data;
dcl  1 processor_data (0:7) aligned like scs$processor_data;
dcl  DPS8M fixed bin (2) unsigned init (1) static options (constant);
dcl  who_ami char (18) init ("write_notify_test") static options (constant);
dcl  1 pair_sets (4),
       2 pair char (2),
       2 set (2),
         3 cpu_bits bit (8) aligned,
         3 is_dps8 bit (1) aligned;
dcl  number_of_pairs fixed bin;
dcl  inc_start fixed bin (17) init (0);
dcl  inc_time fixed bin (17);
dcl  high_wc fixed bin;
dcl  acc_var entry variable;

dcl  wct_offset fixed bin;
dcl  pages_used (0:total_mem) fixed bin (35) based (pages_ptr);
dcl  pages_ptr ptr;
dcl  error_data_ptr ptr init (null);
dcl  (address_lines, page_add_lines) bit (36);
dcl  (bad_cpu, bad_scu) fixed bin;
dcl  pat_idx fixed bin (17) init (1);
dcl  BAD_MEM (0:4) char (1) init (" ", " ", " ", " ", " ");
dcl  BAD_CPU (0:8) char (1) init (" ", " ", " ", " ", " ", " ", " ", " ", " ");
dcl  1 my_apte aligned like apte;			/* APTE for this process */
dcl  r0_aptep ptr;					/* ptr to APTE for this process */
dcl  1 my_wce like wct_entry;
dcl  real_time_wc bit (1);
						/* Based */

dcl  ret char (retL) based (retP) var;
dcl  arg char (argl) based (argp);
dcl  1 error_data (error_count) based (error_data_ptr),
       2 CPU1 char (1),
       2 CPU2 char (1),
       2 ERRCPU char (1),
       2 MEM char (1),
       2 ADD fixed bin (35);


dcl  data_seg (0:1023) bit (36) based (dseg_ptr) aligned;

dcl  1 akst aligned like kst_attributes;

/* Constants */

dcl  CPU_TAGS char (16) int static options (constant) init ("ABCDEFGHabcdefgh");
dcl  (hbound, null, addr, baseno, clock, fixed, bin, divide,
     index, mod, substr, unspec, verify, size,
     rel, search, translate) builtin;
dcl  tags (0:7) char (1) static options (constant) init
	("a", "b", "c", "d", "e", "f", "g", "h");

dcl  1 PATTERN (2) static options (constant),
       2 data bit (36) aligned init ("252525252525"b3, "525252525252"b3),
       2 next_idx fixed bin (17) init (2, 1);


/* External entries */

dcl  cv_dec_check_ entry (char (*), fixed bin (35)) returns (fixed bin (35));
dcl  complain entry variable options (variable);
dcl  (com_err_, active_fnc_err_) entry () options (variable);
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl  cu_$af_return_arg entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl  delete_$ptr entry (ptr, bit (36) aligned, char (*), fixed bin (35));
dcl  get_pdir_ entry () returns (char (168));
dcl  get_temp_segment_ entry (char (*), ptr, fixed bin (35));
dcl  hcs_$make_seg entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35));
dcl  hcs_$set_procs_required entry (bit (8) aligned, fixed bin (35));
dcl  hphcs_$set_process_work_class entry (bit (36) aligned, fixed bin, fixed bin, fixed bin (35));
dcl  ioa_ entry () options (variable);
dcl  ioa_$ioa_switch entry () options (variable);
dcl  ioa_$nnl entry () options (variable);
dcl  ioa_$rsnnl entry () options (variable);
dcl  iox_$error_output ptr ext static;
dcl  phcs_$deactivate entry (ptr, fixed bin (35));
dcl  phcs_$set_kst_attributes entry (fixed bin (35), ptr, fixed bin (35));
dcl  release_temp_segment_ entry (char (*), ptr, fixed bin (35));
dcl  ring_zero_peek_ entry (ptr, ptr, fixed bin (19), fixed bin (35));
dcl  ring_zero_peek_$by_name entry (char (*), fixed bin (18), ptr, fixed bin (19), fixed bin (35));
dcl  ring_zero_peek_$by_definition entry (char (*), char (*), fixed bin (18), ptr, fixed bin (19), fixed bin (35));
dcl  unique_chars_ entry (bit (*)) returns (char (15));
						/* External static */

dcl  error_table_$not_act_fnc fixed bin (35) ext static;
dcl  error_table_$namedup fixed bin (35) ext static;
dcl  error_table_$segknown fixed bin (35) ext static;



%page;
	error_data_ptr, pages_ptr, tcmp, dseg_ptr = null ();
	call cu_$af_return_arg (n_args, retP, retL, code);
	if code = 0 then do;
	     AF_sw = "1"b;
	     complain = active_fnc_err_;
	end;
	else if code = error_table_$not_act_fnc then do;
	     AF_sw = "0"b;
	     complain = com_err_;
	end;
	else do;
	     call com_err_ (code, who_ami);
	     return;
	end;


	on cleanup begin;
	     goto RETURN;
	end;


/* check the access for the process  must have phcs_ and hphcs_ */
/* hphcs_ is to restrict command usage and if ever put in ring_0 */
/* then no user interface will need changed */

	on linkage_error begin;
	     call complain (0, who_ami,
		"User does not have access for ^[hphcs_^;phcs_^].",
		phcs_ok);
	     goto NO_ACC_RET;
	end;

	acc_var = phcs_$set_kst_attributes;
	phcs_ok = "1"b;
	acc_var = hphcs_$set_process_work_class;
	revert linkage_error;

/* find APTE */
	call ring_zero_peek_$by_definition ("pds", "apt_ptr", 0, addr (r0_aptep), 2, code);
	if code ^= 0
	then return;

/* copy APTE */
	call ring_zero_peek_ (r0_aptep, addr (my_apte), size (apte), code);
	if code ^= 0
	then return;

/* find out what cpu(s) we are set for and remember */
	default_flag = my_apte.flags.default_procs_required;
	orig_cpus = my_apte.procs_required;

/* see if we are in a realtime workclass */
	if ^AF_sw then call find_real_time_class;

/* get data from scs for processors and memories */
	call ring_zero_peek_$by_definition ("scs", "processor_data", 0,
	     addr (processor_data), size (processor_data), code);
	if code ^= 0 then do;
	     call complain
		(code, who_ami, "getting scs$processor_data.");
	     return;
	end;
	call ring_zero_peek_$by_definition ("scs", "controller_data", 0,
	     addr (mem_data), size (mem_data), code);
	if code ^= 0 then do;
	     call complain (code, who_ami, "getting scs$controller_data.");
	     return;
	end;


/* calculate the maj_loop number 1% of total mem pages */
	total_mem = 0;
	do i = 0 to 3;
	     if mem_data (i).info.online = "1"b then
		total_mem = mem_data (i).size + total_mem;
	end;
	maj_loop_max = divide ((total_mem * 1), 100, 17);
	if maj_loop_max = 0 then maj_loop_max = 5;


/* parse the args */
	do arg_no = 1 to n_args;
	     call cu_$arg_ptr (arg_no, argp, argl, code);
	     if substr (arg, 1, 1) ^= "-" then do;
		if verify (arg, CPU_TAGS) ^= 0 then do;
		     call complain (0, who_ami, "Invalid CPU Tag(s) ^a", arg);
		     goto NO_ACC_RET;
		end;
		check_cpu_string = translate (arg, "abcdefgh", "ABCDEFGH");

/* loop through processor_data */
		do i = 0 to hbound (processor_data, 1);
		     cpu_st_ind = search (check_cpu_string, tags (i));
		     if cpu_st_ind ^= 0 then do;
			if processor_data (i).online = "1"b then do;
			     if processor_data (i).cpu_type = DPS8M
			     then do;
				total_dps8 = total_dps8 + 1;
				substr (dps8_cpu, (total_dps8), 1) =
				     tags (i);
			     end;
			     else do;
				if total_l68 = 0 then do;
						/* only need one */
				     total_l68 = 1;
				     substr (l68_cpu, (total_l68), 1) =
					tags (i);
				end;
			     end;
			end;
			else do;
			     call complain (0, who_ami,
				"CPU ^a is currently OFF", tags (i));
			end;
		     end;
		end;
		if total_dps8 = 0 then do;
		     call complain (0, who_ami, "At least one CPU must be a DPS8.");
		     goto NO_ACC_RET;
		end;
	     end;

	     else if arg = "-long" | arg = "-lg" then do;
		if AF_sw then goto bad_af_arg;
		long_sw = "1"b;
	     end;
	     else if arg = "-deactivate_count" | arg = "-dc" then do;
		arg_no = arg_no + 1;
		call cu_$arg_ptr (arg_no, argp, argl, code);
		if code ^= 0 then do;
		     call complain (code, who_ami, "Getting major loop count.");
		     goto NO_ACC_RET;
		end;
		maj_loop_max = cv_dec_check_ (arg, code);
		if maj_loop_max <= 0 | code ^= 0 then do;
		     call complain (0, who_ami, "Invalid major loop count.");
		     goto NO_ACC_RET;
		end;
	     end;

	     else if arg = "-loop_count" | arg = "-lc" then do;
		arg_no = arg_no + 1;
		call cu_$arg_ptr (arg_no, argp, argl, code);
		if code ^= 0 then do;
		     call complain (code, who_ami, "Getting sub loop count.");
		     goto NO_ACC_RET;
		end;
		sub_loop_max = cv_dec_check_ (arg, code);
		if sub_loop_max <= 0 | code ^= 0 then do;
		     call complain (0, who_ami, "Invalid sub loop count.");
		     goto NO_ACC_RET;
		end;
	     end;

	     else if arg = "-brief" | arg = "-bf" then long_sw = "0"b;

	     else if arg = "-word_increment" | arg = "-wi" then do;
		arg_no = arg_no + 1;
		call cu_$arg_ptr (arg_no, argp, argl, code);
		if code ^= 0 then do;
		     call complain (code, who_ami,
			"Getting word_increment.");
		     goto NO_ACC_RET;
		end;
		word_inc = cv_dec_check_ (arg, code);
		if code = 0 then do;
		     if word_inc <= 0 | word_inc > 1023 then do;
bad_word_inc:
			call complain (0, who_ami,
			     "Invalid word_increment.");
			goto NO_ACC_RET;
		     end;
		end;
		else goto bad_word_inc;
	     end;
	     else if arg = "-meter" then do;
		if AF_sw then goto bad_af_arg;
		meter_sw = "1"b;
	     end;
	     else do;
		call complain (0, who_ami, "Invalid argument ""^a"".", arg);
		goto NO_ACC_RET;
bad_af_arg:
		call complain (0, who_ami, "^a invalid for active function", arg);
		goto NO_ACC_RET;
	     end;
	end;


	if total_dps8 = 0 then do;			/* caller wants auto cpu selection */
	     do i = 0 to hbound (processor_data, 1);
		if processor_data (i).online = "1"b then do;
		     if processor_data (i).cpu_type = DPS8M then do;
			total_dps8 = total_dps8 + 1;
			substr (dps8_cpu, (total_dps8), 1) = tags (i);
		     end;
		     else do;
			if total_l68 = 0 then do;
						/* only need one */
			     total_l68 = 1;
			     substr (l68_cpu, (total_l68), 1) = tags (i);
			end;
		     end;
		end;
	     end;
	end;
	if total_dps8 = 0 then do;
	     call complain (0, who_ami, "There is no dps8 on-line");
	     goto NO_ACC_RET;
	end;
	else if total_dps8 > 1 then do;
	     test_cpu_string = dps8_cpu;
	     cpus_to_test = total_dps8;
	     total_l68 = 0;
	end;
	else if total_dps8 = 1 then do;
	     if total_l68 ^= 0 then do;
		test_cpu_string = substr (dps8_cpu, 1, 1) ||
		     substr (l68_cpu, 1, 1);
		l68_cpu = substr (l68_cpu, 1, 1);
		cpus_to_test = 2;
	     end;
	     else do;
		cpus_to_test = total_dps8;
		test_cpu_string = dps8_cpu;
	     end;
	end;

	if cpus_to_test = 1 then do;
	     call complain (0, who_ami, "Must have at least two CPUs defined to run this test.");
	     goto NO_ACC_RET;
	end;


/* create the data segment in the process dir */
make_ds:	call hcs_$make_seg ((get_pdir_ ()),
	     "wnt_data_seg." || (unique_chars_ ("0"b)), "",
	     10, dseg_ptr, code);
	if code = error_table_$namedup | code = error_table_$segknown
	then code = 0;
	if code ^= 0 then do;
	     call complain (code, who_ami);
	     goto NO_ACC_RET;
	end;


/* find ptw base */
	if start_of_sst = 0 then do;
	     allocate sst set (sstp);
	     call ring_zero_peek_$by_name ("sst_seg",
		0, sstp, size (sst), code);
	     if code ^= 0 then do;
		call complain (code, who_ami, "getting sst header.");
		return;
	     end;
	     start_of_sst = bin (sst.ptwbase, 24);
	     free sst;
	end;

/* get a segment for page metering */
	call get_temp_segment_ (who_ami, pages_ptr, code);

/* init the meter data */
	call reset_meters;


/* get a segment for the error data of analizing maybe */
	call get_temp_segment_ (who_ami, error_data_ptr, code);

/* set up KST so we can deactivate the data_seg */
	unspec (akst) = "0"b;
	akst.set.explicit_deactivate_ok,
	     akst.value.explicit_deactivate_ok = "1"b;
	call phcs_$set_kst_attributes (fixed (baseno (dseg_ptr), 17),
	     addr (akst), code);			/* now set permissions */
	if code ^= 0 then do;
	     call complain (code, who_ami, "set kst attributes.");
	     return;
	end;
	error_count = 0;


/* Tell the user what cpus we have decided to use if not called as an active function */
	if ^AF_sw then do;
	     call ioa_$nnl ("^3xUsing ^d DPS8M CPU^[S^] (^a)", total_dps8,
		(total_dps8 > 1),
		translate (dps8_cpu, "ABCDEFGH", "abcdefgh"));
	     if total_l68 ^= 0 then call ioa_ ("^xand^xL68 CPU (^a).",
		     translate (l68_cpu, "ABCDEFGH", "abcdefgh"));
	     else call ioa_ (".");
	end;


/* divid the test_cpu_string into pairs if an odd number use the first over again */
	pair_idx = 1;
	number_of_pairs = divide (cpus_to_test, 2, 17);
	do i = 1 to number_of_pairs;
	     pair_sets (i).pair = substr (test_cpu_string, pair_idx, 2);
	     do cpu = 1 to 2;
		pair_sets (i).set (cpu).cpu_bits = "0"b;
		substr (pair_sets (i).set (cpu).cpu_bits,
		     mod (index (CPU_TAGS, substr (pair_sets (i).pair, cpu, 1)) - 1, 8) + 1, 1) = "1"b;
		if index (dps8_cpu, substr (pair_sets (i).pair, cpu, 1)) ^= 0
		then pair_sets (i).set (cpu).is_dps8 = "1"b;
		else pair_sets (i).set (cpu).is_dps8 = "0"b;
	     end;
	     pair_idx = pair_idx + 2;
	end;
	if mod (cpus_to_test, 2) = 1 then do;
	     number_of_pairs = number_of_pairs + 1;
	     i = number_of_pairs;
	     pair_sets (i).pair =
		substr (test_cpu_string, 1, 1) ||
		substr (test_cpu_string, pair_idx, 1);
	     do cpu = 1 to 2;
		pair_sets (i).set (cpu).cpu_bits = "0"b;
		substr (pair_sets (i).set (cpu).cpu_bits,
		     mod (index (CPU_TAGS, substr (pair_sets (i).pair, cpu, 1)) - 1, 8) + 1, 1) = "1"b;
		if index (dps8_cpu, substr (pair_sets (i).pair, cpu, 1)) ^= 0
		then pair_sets (i).set (cpu).is_dps8 = "1"b;
		else pair_sets (i).set (cpu).is_dps8 = "0"b;
	     end;
	end;



	maj_max_err_count = (divide (maj_loop_max, 4, 17)) + 2;
	sub_max_err_count = (divide (sub_loop_max, 4, 17)) + 2;
	inc_time = divide (sub_loop_max, 2, 17);
	error_count = 0;


/**** ************************************ ****/
/*           The test starts here           */
/**** ************************************ ****/


/* outer most loop is for by pairs of cps */
	do pair_idx = 1 to number_of_pairs;
	     major_loop_error = 0;
	     page_add_lines = "0"b;
	     address_lines = "0"b;

/* deactivation loop try for new real mem address */
	     do times = 1 to maj_loop_max;
		call deactivate_the_seg;
		testing_sw = "1"b;
		call set_cpu;
		inc_start = 0;
		pat_idx = 1;
		call write;
		sub_loop_error = 0;

/* subloop used to insure we get the correct types of hits */
		do loop = 1 to sub_loop_max;
		     call set_cpu;
		     call read;
		     if loop = inc_time then inc_start = inc_start + 4;
		     call write;
		end;
sub_loop_err_exit:
	     end;
maj_loop_err_exit:

/* print the meters for this cpu pair */
	     if meter_sw then call print_meters;
	end;


RETURN:						/* test over */

/* get running on the the original cpu set */
	if need_revert_cpu then do;
	     if default_flag then call hcs_$set_procs_required ("0"b, code); /* reset to default */
	     else call hcs_$set_procs_required (orig_cpus, code); /* reset to default */
	     need_revert_cpu = "0"b;
	end;
						/* if called as active function just tell if ok or not ok */
	if testing_sw then do;
						/* if we got started and no errors tell the user we had none */
	     if ^HAD_ERROR then do;
		if AF_sw then ret = "passed";
		else call ioa_ ("^a: No errors detected.", who_ami);

/* if we saw some erros try to fine out what could be wrong */
	     end;
	     else do;
		bad_cpu = 0;
		bad_scu = 0;
		if long_sw then
		     call ioa_ ("^/Error on cpu in mem  address  using pair");
		do i = 1 to error_count;
		     if long_sw then
			call ioa_ ("^10x^a^6x^a^2x^8o^8x^a^a",
			     error_data (i).ERRCPU, error_data (i).MEM,
			     error_data (i).ADD,
			     error_data (i).CPU1,
			     error_data (i).CPU2);
		     same_bad = "0"b;
		     do j = 0 to bad_cpu;
			if BAD_CPU (j) = error_data (i).ERRCPU
			then same_bad = "1"b;
		     end;
		     if ^same_bad then do;
			bad_cpu = bad_cpu + 1;
			BAD_CPU (bad_cpu) = error_data (i).ERRCPU;
		     end;
		     same_bad = "0"b;
		     do j = 0 to bad_scu;
			if BAD_MEM (j) = error_data (i).MEM
			then same_bad = "1"b;
		     end;
		     if ^same_bad then do;
			bad_scu = bad_scu + 1;
			BAD_MEM (bad_scu) = error_data (i).MEM;
		     end;
		end;
		if error_count > 0 then do;
		     if ^long_sw & ^AF_sw then do;
			call ioa_ ("^/Error summary");
			call ioa_$nnl
			     ("^/errors detected in cpu^[s^]^x",
			     (bad_cpu >= 2));
			do j = 1 to bad_cpu;
			     call ioa_$nnl ("^a^x", BAD_CPU (j));
			end;
			call ioa_ (" ");
			call ioa_$nnl ("errors detected in scu^[s^]^x",
			     (bad_scu >= 2));
			do j = 1 to bad_scu;
			     call ioa_$nnl ("^a^x", BAD_MEM (j));
			end;
			call ioa_ (" ");
		     end;
		     if (bad_cpu >= 2) & (bad_scu >= 2) & AF_sw
		     then do;
			ret = "failed";
			do j = 1 to bad_cpu;
			     call ioa_$rsnnl ("^a^xCPU_^a", ret, foo_len,
				ret, BAD_CPU (j));
			end;
			do j = 1 to bad_cpu;
			     call ioa_$rsnnl ("^a^xSCU_^a", ret, foo_len,
				ret, BAD_MEM (j));
			end;
		     end;
		     else if (bad_cpu = 1) & (bad_scu = 1) & AF_sw then
		        call ioa_$rsnnl ("failed CPU_^a SCU_^a",ret,
		        foo_len,BAD_CPU(1),BAD_MEM(1));
		     else if (bad_cpu >= 2) & (bad_scu = 1) then do;
			if AF_sw then call ioa_$rsnnl ("failed SCU_^a",
				ret, foo_len, BAD_MEM (1));
			else call ioa_ ("^/^-MEM ^a is defective",
				BAD_MEM (1));
		     end;

		     else if (bad_scu >= 2) & (bad_cpu = 1) then do;
			if AF_sw then call ioa_$rsnnl ("failed CPU_^a",
				ret,foo_len, BAD_CPU (1));
			else call ioa_ ("^/^-CPU ^a is defective",
				BAD_CPU (1));
		     end;

		end;
	     end;
	end;



NO_ACC_RET:
	if dseg_ptr ^= null then
	     call delete_$ptr (dseg_ptr, "440000000000"b3, "", code);

	if need_revert_cpu then do;
	     if default_flag then call hcs_$set_procs_required ("0"b, code); /* reset to default */
	     else call hcs_$set_procs_required (orig_cpus, code); /* reset to default */
	end;
	if error_data_ptr ^= null () then do;
	     call release_temp_segment_ (who_ami, error_data_ptr, code);
	     error_data_ptr = null ();
	end;
	if tcmp ^= null () then do;
	     call release_temp_segment_ (who_ami, tcmp, code);
	     tcmp = null ();
	end;
	if pages_ptr ^= null () then do;
	     call release_temp_segment_ (who_ami, pages_ptr, code);
	     pages_ptr = null ();
	end;
	return;


%page;


count_error: proc;

/* count_error counts the errors and decides whem to move to next loop */
/* display is called from here */

	major_loop_error = major_loop_error + 1;
	sub_loop_error = sub_loop_error + 1;
	error_count = error_count + 1;
	HAD_ERROR = "1"b;
	call display_fault_data;
	if sub_loop_error >= sub_max_err_count
	then do;
	     pat_idx = PATTERN (pat_idx).next_idx;
	     goto sub_loop_err_exit;
	end;
	if major_loop_error >= maj_max_err_count
	then goto maj_loop_err_exit;
	goto NEXT_READ_LABEL;

     end count_error;
%page;

deactivate_the_seg:
     proc;

/* This proc deactivates the  data segment in hopes that when */
/* reactivated the pages will be in a differen area of memory */
	call phcs_$deactivate (dseg_ptr, code);
	if code ^= 0 then do;
	     call complain (code, "phcs_$deactivate");
	     return;
	end;
	need_page_meter = "1"b;
     end deactivate_the_seg;
%page;
find_real_time_class:
     proc;

/* This proc check to see if the user is in a realtime workclas. If not  */
/* display warning message and if long mode display parameters for each  */
/* realtime workclass.					   */

dcl  Q1 float bin;
dcl  Q2 float bin;
dcl  R1 float bin;
dcl  R2 float bin;

	wct_offset = fixed (my_apte.wct_index, 17);
	call ring_zero_peek_$by_name ("tc_data", (wct_offset),
	     addr (my_wce), (size (my_wce)), code);
	if code ^= 0 then do;
	     call complain (0, who_ami, "getting work_class_info");
	     goto RETURN;
	end;
	if my_wce.realtime = 0 then do;
	     call ioa_$ioa_switch (iox_$error_output,
		"Warning: User not in a realtime workclass.");
	     real_time_wc = "0"b;
	end;
	else real_time_wc = "1"b;
	if real_time_wc | ^long_sw then return;
	call get_temp_segment_ (who_ami, tcmp, code);
	wct_offset = fixed (rel (addr (tcm.work_class_table)), 17);
	call ring_zero_peek_$by_name ("tc_data", (wct_offset),
	     addr (tcm.work_class_table), (size (wct_entry) * 17), code);
	if code ^= 0 then do;
	     call complain (0, who_ami, "getting work_class_info");
	     goto RETURN;
	end;
	call ioa_ ("WC^4xIRESP^2xIQUANT^4xRESP^3xQUANT");
	high_wc = 0;
	do i = 0 to 16;
	     if wcte (i).flags.defined then do;
		if high_wc = 0 then high_wc = i;
		if wcte (i).realtime ^= 0 then do;
		     R1 = 1e-6 * wcte (i).resp1;
		     R2 = 1e-6 * wcte (i).resp2;
		     Q1 = 1e-6 * wcte (i).quantum1;
		     Q2 = 1e-6 * wcte (i).quantum2;
		     call ioa_$ioa_switch (iox_$error_output,
			"^2d ^8.2f^8.2f^8.2f^8.2f", i, R1, Q1, R2, Q2);
		end;
	     end;
	end;
	call release_temp_segment_ (who_ami, tcmp, code);
	tcmp = null ();
     end find_real_time_class;
%page;

/* The three procs wrie, read, set_cpu make up the heart of the test  */

write: proc;

/* Write the CACHE */

	pattern = PATTERN (pat_idx).data;
	do wrt = inc_start to hbound (data_seg, 1) by word_inc;

/* make sure it is in cache */
	     bit_bucket = data_seg (wrt);
	     data_seg (wrt) = pattern;
	end;
     end write;
%skip (4);
read: proc;

/* Read what was written by the other cpu */
dcl  P_null ptr init (null);

	NEXT_READ_LABEL = next_loc;			/* used to continue after error */
	if pair_sets (pair_idx).set (cpu).is_dps8 = "1"b then do;
						/* waste of time on L68! */

	     if need_page_meter then call meter_the_page;
	     do rd = inc_start to hbound (data_seg, 1) by word_inc;
		page_add_lines = page_add_lines | unspec (rd);
		if data_seg (rd) ^= pattern then do;
		     call count_error;
		end;
next_loc:
	     end;
	end;
	pat_idx = PATTERN (pat_idx).next_idx;
     end read;
%skip (4);
set_cpu: proc;

/* switch to the other cpu */
	if cpu = 2 then cpu = 1;
	else cpu = 2;
	call hcs_$set_procs_required (pair_sets (pair_idx).set (cpu).cpu_bits, code);
	if code ^= 0 then do;
	     call complain (code, who_ami);
	     goto RETURN;
	end;
	need_revert_cpu = "1"b;
     end set_cpu;
%page;

meter_the_page: proc;
	call page_peek;
	deact_loop_cnt = deact_loop_cnt + 1;
	if data_ptw.add_type ^= "1000"b then do;	/* lost race, page gone! */
	     mem_meters (8) = mem_meters (8) + 1;	/* count losses */
	     return;
	end;
	last_ptw = data_ptw, by name;
	data_page = divide (bin (data_ptw.add, 18), 16, 17, 0);
	pages_used (data_page) = pages_used (data_page) + 1;
	do meter_idx = 0 to 7;
	     if (data_page >= mem_data (meter_idx).base) then do;
		if data_page < (mem_data (meter_idx).base + mem_data (meter_idx).size) then do;
		     mem_meters (meter_idx) = mem_meters (meter_idx) + 1;
		     need_page_meter = "0"b;
		     address_lines = address_lines | unspec (data_page);
		     return;
		end;
	     end;
	end;
	call complain (0, who_ami, "Page frame ^oo, not found within scs$controller_data definition.", data_page);
	return;
     end meter_the_page;
%page;
page_peek:
     proc;
	call ring_zero_peek_$by_name ("dseg", (2 * bin (baseno (dseg_ptr), 17)), addr (data_sdw), 1, code);
	if code ^= 0 then do;
	     call complain (code, "getting sdw from dseg. Resetting metering switch.");
	     meter_sw = "0"b;
	     return;
	end;
	call ring_zero_peek_$by_name ("sst_seg", (bin (data_sdw.add, 24) - start_of_sst), addr (data_ptw), 1, code);
	if code ^= 0 then do;
	     call complain (code, "getting ptw from sst_seg. Resetting metering switch.");
	     meter_sw = "0"b;
	     return;
	end;
     end page_peek;
%page;
reset_meters:
     proc;
	if pages_ptr ^= null () then pages_used (*) = 0;
	mem_meters (*) = 0;
	deact_loop_cnt = 0;
     end reset_meters;
%page;
print_meters:
     proc;
	if AF_sw then return;
	if unspec (mem_meters (*)) ^= "0"b then do;
	     call ioa_ ("^2/Meters for cpu pair ^a",
		pair_sets (pair_idx).pair);
	     total_mem = 0;
	     call ioa_$nnl ("^23x");
	     do i = 0 to 3;
		if mem_data (i).info.online = "1"b then do;
		     total_mem = mem_data (i).size + total_mem;
		     call ioa_$nnl ("^4x^a^5x", substr ("ABCD", i + 1, 1));
		end;
	     end;
	     call ioa_$nnl ("^/^23x");
	     do i = 0 to 3;
		if mem_data (i).info.online = "1"b then do;
		     call ioa_$nnl ("^2x^5d.^2x", mem_data (i).size);
		end;
	     end;
	     call ioa_$nnl ("^/^2xMemory size relation:");
	     do i = 0 to 3;
		if mem_data (i).info.online = "1"b then
		     call ioa_$nnl ("^7.2f%^2x",
			divide (mem_data (i).size * 100, total_mem, 17, 7));
	     end;
	     call ioa_$nnl ("^/^2xMemory usage meters: ");
	     do i = 0 to 3;
		if mem_data (i).info.online = "1"b then do;
		     if mem_meters (i) ^= 0 then do;
			call ioa_$nnl ("^7.2f%^2x",
			     divide (mem_meters (i) * 100,
			     deact_loop_cnt, 17, 7));
		     end;
		     else call ioa_$nnl ("^7.2f%^2x", (0));
		end;
	     end;
	     if mem_meters (8) ^= 0 then
		call ioa_$nnl ("^/ losses=^6.2f%",
		     divide (mem_meters (8) * 100, deact_loop_cnt, 17, 6));
	     call ioa_ ("");
	end;
	if pages_ptr ^= null () then do;
	     call print_page_meters;
	end;
	call reset_meters;
     end print_meters;
%page;
print_page_meters:
     proc;
	address_lines = "0"b;
	do i = 0 to 3;
	     if mem_data (i).info.online = "1"b then do;
		if long_sw then do;
		     call ioa_ ("^/MEM ^a from ^o to ^o",
			substr ("ABCD", i + 1, 1), mem_data (i).base,
			(mem_data (i).base + (mem_data (i).size - 1)));
		     call ioa_ ("^-^xframe^3xused^4xadd bits 0->13");
		end;
		do j = mem_data (i).base to (mem_data (i).base + (mem_data (i).size - 1));
		     if pages_used (j) ^= 0 then do;
			address_lines = unspec (j) | address_lines;
			if long_sw then call ioa_ ("^-^6o^2x^4d^5x^14b",
				j, pages_used (j),
				substr (unspec (j), 23, 14));
		     end;
		end;
	     end;
	end;
	call ioa_ ("^/address lines checked^6x0 -> 13^4x^3x14 -> 23^/^23x^14b^3x^10b",
	     substr (address_lines, 23),
	     substr (page_add_lines, 27));
	address_lines, page_add_lines = "0"b;
     end print_page_meters;
%page;
display_fault_data:
     proc;

dcl  bad_addr bit (24);
dcl  bad_mem char (1);
dcl  (bad_addr_bin, mem_offset) fixed bin (35);
dcl  the_date_time char (24);
dcl  date_time_ entry (fixed bin (71), char (*));
dcl  temp_mem_add fixed bin (35);
dcl  win bit (1);
dcl  no_luck_reason char (32);
	call date_time_ (clock (), the_date_time);
	win = "0"b;
	call page_peek;
	if data_ptw.add_type ^= "1000"b then do;
	   call ioa_$rsnnl
	      ("page has been evicted", no_luck_reason, foo_len);
	     goto no_luck;
	end;
	if last_ptw.add ^= data_ptw.add then do;
	   call ioa_$rsnnl
	        ("page address has changed", no_luck_reason, foo_len);
	     goto no_luck;
	end;
	temp_mem_add = 0;
	substr (unspec (temp_mem_add), 13, 24) =
	     substr (unspec (data_page), 23, 14) ||
	     substr (unspec (rd), 27, 10);
	bad_mem = substr ("ABCD", meter_idx + 1, 1);
	bad_addr = substr (unspec (temp_mem_add), 13, 24);
	win = "1"b;
	error_data (error_count).CPU1 =
	   translate (substr (pair_sets (pair_idx).pair, 1, 1),
	   "ABCDEFGH", "abcdefgh");
	error_data (error_count).CPU2 =
	   translate (substr (pair_sets (pair_idx).pair, 2, 1),
	   "ABCDEFGH", "abcdefgh"); 
	error_data (error_count).ERRCPU =
	   translate (substr (pair_sets (pair_idx).pair, cpu, 1),
	   "ABCDEFGH", "abcdefgh"); 
	error_data (error_count).MEM = bad_mem;
	error_data (error_count).ADD = temp_mem_add;
	bad_addr_bin = bin (bad_addr, 35);
	mem_offset = (bad_addr_bin - (mem_data (meter_idx).base * 1024));
	if long_sw then do;
	     call ioa_
		("^/**^2xERROR at ^24a on CPU ^a in SCU ^a ADDRESS ^8.3b^ **",
		the_date_time,
		error_data (error_count).ERRCPU, bad_mem, bad_addr);
	     call ioa_
		("^5xOffset in data_seg = ^oo, deact_cnt = ^d, loop_cnt = ^d, cpu pair = ^a",
		rd, times, loop, pair_sets (pair_idx).pair);
	end;
	return;
no_luck:
	if AF_sw then return;
	call ioa_ ("^/**^2xERROR at ^24a on CPU ^a^2x**",
	     the_date_time, substr (pair_sets (pair_idx).pair, cpu, 1));
	call ioa_ ("**^2xHowever ^32a^4x**", no_luck_reason);
	return;
     end display_fault_data;
%page;

%include kst_attributes;
%include apte;
%include scs;
%include sst;
%include sdw;
%include ptw;
%include tcm;
%include hc_lock;
     end write_notify_test;
