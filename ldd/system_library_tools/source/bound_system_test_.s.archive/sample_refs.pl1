/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


sample_refs: srf: procedure;


/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/*	sample_refs samples the contents of the PSR and TSR periodically, in order to determine which segments
   a process is referencing.  Three data segments are used:
   srf1 - individual samples - time of interrupt; PSR and TSR contents; re-used segment number count
   srf2 - pathnames - segment pathnames; reference counts; link for re-used segment numbers
   srf3 - re-used seg.no. pathnames - pathnames;reference counts; link for further re-usages
   A CPU timer is established to interrupt the process every _n milliseconds.  (N.B. - SAMPLE RATES OF LESS
   THAN 1000 MILLISECONDS ARE NOT GUARANTEED ACCURATE).  The interrupt handller sample_refs$ih attempts to
   find the pathnames associated with the segment numbers as found in the PSR and TSR. (N.B. - THE CONTENTS OF
   THE TSR ARE OFTEN INVALID). The pathnames are then saved in either the srf2 or srf3 data segment, depending
   upon whether or not the segment number had been re-assigned since its last reference. The individual samples
   data are stored in the srf1 data segment.
   ONLY ONE INVOCATION OF sample_refs CAN RUN PER PROCESS. A SECONDARY INVOCATION WILL FORCE TERMINATION
   OF THE FIRST.

   0) Created by: Ross E. Klinger, November 11, 1973					*/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

declare 1 srf1seg based (srf1P) aligned,		/* srf1 data base */
        2 time_on fixed binary (71),			/* time srf turned on */
        2 time_off fixed binary (71),			/* time srf turned off */
        2 table_index fixed binary (35),		/* index of where_when table */
        2 frequency fixed binary (35),			/* sample frequency in milliseconds */
        2 high_hc fixed binary (35),			/* highest hardcore segment number */
        2 proc_seg_cnt fixed binary (35),		/* highest process segment number */
        2 where_when (srf1_max_index),			/* table of times and locations */
	3 time fixed binary (71),			/* time of interrupt */
	3 prcdr pointer,				/* prcdr pointer */
	3 temporary pointer,			/* temporary pointer */
	3 prul fixed binary (35),			/* psr segment number re-usage level */
	3 trul fixed binary (35);			/* tsr segment number re-usage level */

declare 1 srf2seg based (srf2P) aligned,		/* auxilliary srf data base */
        2 time_on fixed binary (71),			/* time srf turned on */
        2 high_segno fixed bin (35),			/* highest segno referenced (valid or invalid) */
        2 pad fixed bin (35),				/* pad */
        2 segment (srf2_max_index),			/* table of pathnames indexed by segment number */
	3 pathname character (168),			/* segment pathname */
	3 prc fixed binary (35),			/* psr reference count */
	3 trc fixed binary (35),			/* tsr reference count */
	3 ci fixed binary (35),			/* chain index to extension for re-used segment numbers */
	3 bci fixed binary (35);			/* bound chain index -- NOT SET BY THIS PROGRAM */

declare 1 srf3seg based (srf3P) aligned,		/* extension data base for re-used segment numbers */
        2 time_on fixed binary (71),			/* time srf turned on */
        2 ni fixed binary (35),			/* index to next available table entry */
        2 pad fixed binary (35),			/* pad area */
        2 extension (srf3_max_index),			/* table of pathnames of re-used segment numbers */
	3 pathname character (168),			/* segment pathname */
	3 prc fixed binary (35),			/* psr reference count */
	3 trc fixed binary (35),			/* tsr reference count */
	3 ci fixed binary (35),			/* chain index to extension for n > 1 re-usages */
	3 bci fixed binary (35);			/* bound chain index -- NOT SET BY THIS PROGRAM */

declare (srf1P, srf2P, srf3P) pointer internal static initial (null); /* data base pointers */
declare (srf1_max_index, srf2_max_index, srf3_max_index) fixed bin internal static; /* maximum table indices */

declare  arg character (arglen) based (aP) unaligned,	/* command argument */
         argcnt fixed binary,				/* number of arguments */
         arglen fixed binary,				/* length of the argument */
         code fixed binary (35),			/* error code */
        (i, j, rul) fixed binary,			/* temporary storage */
        (k, kx) bit (1) initial ("0"b),			/* (k,kx)nown (1) / un(k,kx)nown (0) segment switches */
         dirname character (168) aligned,		/* directory name */
         ename character (32) aligned,			/* entry name */
         date_time character (24),			/* date and time */
         t fixed binary (71),				/* temporary storage -- clock time */
         f fixed binary (35),				/* temporary storage -- frequency */
         name char (32) aligned,			/* suffixed entry name */
        (aP, bP, cP) pointer;				/* pointers */

declare  error_table_$badopt external fixed binary (35);	/* error codes */
declare  sys_info$max_seg_size external fixed binary (35);	/* system maximum segment size */

declare  sample_refs$ih external entry (pointer);		/* srf interrupt handler */


declare  com_err_ external entry options (variable),
         continue_to_signal_ external entry (fixed bin (35)),
         cu_$arg_count external entry (fixed binary),
         cu_$arg_ptr external entry (fixed binary, pointer, fixed binary, fixed binary (35)),
         cv_dec_check_ external entry (character (*), fixed binary (35)) returns (fixed binary (35)),
         clock_ external entry returns (fixed binary (71)),
         date_time_ external entry (fixed binary (71), char (*)),
         expand_path_ external entry (pointer, fixed binary, pointer, pointer, fixed binary (35)),
         find_condition_info_ external entry (ptr, ptr, fixed bin (35)),
         get_wdir_ ext entry returns (char (168) aligned),
         hcs_$high_low_seg_count external entry (fixed binary (35), fixed binary (35)),
         hcs_$make_seg external entry (char (*) aligned, char (*) aligned, char (*), fixed bin (5), ptr, fixed bin (35)),
         hcs_$terminate_noname external entry (pointer, fixed binary (35)),
         suffixed_name_$make ext entry (char (*) aligned, char (*), char (32) aligned, fixed bin (35)),
         timer_manager_$cpu_call external entry (fixed binary (71), bit (2), entry),
         timer_manager_$reset_cpu_call external entry (entry);

declare  null builtin, (any_other, cleanup) condition;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

	on cleanup call cleaner;			/* terminate data base if error before timer starts */
	srf1_max_index = divide (sys_info$max_seg_size - 8, 8, 17, 0); /* set maximum table indices */
	srf2_max_index = divide (sys_info$max_seg_size - 4, 46, 17, 0);
	srf3_max_index = srf2_max_index;

	call cu_$arg_count (argcnt);			/* check number of arguments */
	if argcnt = 0 then go to invock;		/* no -off option, check invocation */
	call cu_$arg_ptr (1, aP, arglen, code);		/* get the first argument */
	if aP -> arg ^= "-rs" then if aP -> arg ^= "-reset" then go to invock; /* is it the "-reset" option? */
	if argcnt > 1 then call com_err_ (0, "sample_refs", "Options after a ""-reset"" are ignored."); /* yes -- are there others? */
	if srf1P = null then return;			/* exit if nothing to turn off */
	call off;					/* close data bases */
	return;					/* exit */
invock:	if srf1P ^= null then do;			/* if secondary invocation, close previous data bases */
	     call off;				/* close */
	     call com_err_ (0, "sample_refs", "Secondary invocation: previous data bases terminated."); /* warning */
	end;
	srf2P, srf3P = null;			/* null to avoid needless hcs_$terminate_noname calls */
	f = 1000;					/* default frequency is 1000 milliseconds */
	ename = " ";				/* set to blanks: implies default entry name */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

	do i = 1 to argcnt;				/* loop to examine arguments */
	     call cu_$arg_ptr (i, aP, arglen, code);	/* get the argument */
	     if aP -> arg ^= "-sm" then if aP -> arg ^= "-segment" then go to timeck; /* is it the "-segment" option? */
	     i = i+1;				/* increment argument counter */
	     call cu_$arg_ptr (i, aP, arglen, code);	/* get the segment name */
	     if code ^= 0 then do;			/* is segment name missing? */
		call com_err_ (0, "sample_refs", "No segment name after segment option."); /* write an error message */
		return;				/* give up */
	     end;
	     bP = addr (dirname);			/* get pointer to directory portion of pathname */
	     cP = addr (ename);			/* get pointer to entry name portion of pathname */
	     call expand_path_ (aP, arglen, bP, cP, code); /* expand to an absolute pathname */
	     if code ^= 0 then do;			/* was there an error? */
		call com_err_ (code, "sample_refs", "^a", aP -> arg); /* write an error message */
		return;
	     end;
	     go to continue;			/* look for another control option */
timeck:	     if aP -> arg ^= "-tm" then if aP -> arg ^= "-time" then go to bad_opt; /* is it the "-time" option? */
	     i = i+1;				/* must be -time option  --  increment argument counter */
	     call cu_$arg_ptr (i, aP, arglen, code);	/* get the frequency */
	     if code ^= 0 then do;			/* is the frequency missing? */
err1:		call com_err_ (0, "sample_refs", "Missing or invalid time."); /* write an error message */
		return;				/* give up */
	     end;
	     f = cv_dec_check_ (aP -> arg, code);	/* get the frequency */
	     if code ^= 0 then go to err1;		/* check for an invalidity */
	     if f ^> 0 then go to err1;		/* error if zero or negative */
continue: end;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

	t = clock_ ();				/* get the clock time */
	if ename = " " then do;			/* was -sm option specified? */
	     call date_time_ (t, date_time);		/* no -- get string for unique name */
	     ename = translate (date_time, "_", " ");	/* change all " " to "_" */
	     dirname = get_wdir_ ();			/* put the segments in the working directory */
	end;

	i = index (ename, ".srf");			/* look for the suffix ".srf", ".srf1", ".srf2", etc. */
	if i ^= 0 then substr (ename, i, 32 - i + 1) = " "; /* if found, best just to strip it off */

	call suffixed_name_$make (ename, "srf1", name, code); /* add suffix */
	if code ^= 0 then go to suffix_error;		/* was there an error? */
	call hcs_$make_seg (dirname, name, "", 01011b, srf1P, code); /* make the segment */
	if srf1P = null then go to make_error;		/* was there an error? */

	call suffixed_name_$make (ename, "srf2", name, code); /* add suffix */
	if code ^= 0 then go to suffix_error;		/* was there an error? */
	call hcs_$make_seg (dirname, name, "", 01011b, srf2P, code); /* make the segment */
	if srf2P = null then go to make_error;

	call suffixed_name_$make (ename, "srf3", name, code); /* add suffix */
	if code ^= 0 then go to suffix_error;		/* was there an error? */
	call hcs_$make_seg (dirname, name, "", 01011b, srf3P, code); /* make the segment */
	if srf3P = null then go to make_error;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
start_timer: srf1seg.time_on = t;			/* set on time in srf data base */
	srf3seg.time_on = t;			/* set on time in srf3 data base */
	srf2seg.time_on = t;			/* set on time in auxilliary data base */
	frequency = f;				/* put frequency in data base */
	table_index = 1;				/* initialize table index */
	high_segno = 0;				/* initialize highest segno referenced */
	ni = 1;					/* initialize extension index */
	call hcs_$high_low_seg_count (proc_seg_cnt, high_hc); /* set the hardcore and process segment bounds */
	call timer_manager_$cpu_call ((frequency*1000), "10"b, sample_refs$ih); /* start timer */
	revert cleanup;
	return;					/* normal exit */


/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

cleaner:	procedure;				/* terminates srf segments and resets invocation switch */
	     if srf3P ^= null then call hcs_$terminate_noname (srf3P, code);
	     if srf2P ^= null then call hcs_$terminate_noname (srf2P, code);
	     if srf1P ^= null then do;
		call hcs_$terminate_noname (srf1P, code);
		srf1P = null;
	     end;
	     return;
	end cleaner;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

suffix_error: call com_err_ (code, "sample_refs", ename);	/* write the error message */
	call cleaner;				/* cleanup */
	return;

make_error: call com_err_ (code, "sample_refs", "^a>^a", dirname, name); /* write the error message */
	call cleaner;				/* cleanup */
	return;

bad_opt:	if aP -> arg ^= "-rs" then if aP -> arg ^= "-reset" then go to bad_opt1; /* is it a "-reset" option? */
	call com_err_ (0, "sample_refs", """-reset"" ignored: must be first and only option."); /* yes -- warn and ignore */
	go to continue;
bad_opt1: call com_err_ (error_table_$badopt, "sample_refs", "^a", aP -> arg); /* write an error message */
	return;					/* exit */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

off:	procedure;				/* internal procedure to close data bases */

	     call timer_manager_$reset_cpu_call (sample_refs$ih); /* turn the timer off */
	     time_off = clock_ ();			/* set the off time */
	     table_index = table_index - 1;		/* decrement to drop the last (invalid) entry */
	     call hcs_$high_low_seg_count (proc_seg_cnt, high_hc); /* set the highest hardcore and process segment numbers */
	     call cleaner;				/* terminate the data bases */
	     return;				/* exit */

	end off;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

ih:	entry (mcP);				/* srf interrupt handler */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

	on any_other begin;

dcl 1 cond_info aligned,				/* filled in by find_condition_info_ */
%include cond_info;

     call find_condition_info_ (null, addr (cond_info), code); /* determine type of fault */

	     if cond_info.condition_name = "cleanup" then call off; /* handle this condition */
	     else if cond_info.condition_name = "cput" then go to pass_it_on;
	     else if cond_info.condition_name = "alrm" then go to pass_it_on;
	     else if cond_info.condition_name = "quit" then go to pass_it_on;
	     else if cond_info.condition_name = "stack" then go to pass_it_on;
	     else if cond_info.condition_name = "finish" then go to pass_it_on;
	     else if cond_info.condition_name = "program_interrupt" then
pass_it_on:	call continue_to_signal_ (code);
	     else;				/* ignore all other conditions */

	end;
%include "mc";      /* include machine conditions declaration */

declare (mcP, pP, tP) pointer;			/* pointers to conditions and segments */

	where_when (table_index).time = clock_ ();	/* store the time of interrupt */
	mcp = mcP;				/* initialize the include's pointer */
	scup = addr (mc.scu);			/* ditto */
	pP = pointer (baseptr ("000"b || scu.psr), scu.ilc); /* form pointer to prcdr segment */
	where_when (table_index).prcdr = pP;		/* store in data base */
	call fill_pathname_p (pP);			/* develope pathname in auxilliary data base */

	if ni = srf3_max_index + 1 then do;		/* is the extension table full? */
srf3_full:     call off;				/* close the data bases */
	     call com_err_ (0, "sample_refs$ih", "srf3 data base full. Automatic reset."); /* write message */
	     revert any_other;
	     return;
	end;

	tP = pointer (baseptr ("000"b || scu.tsr), scu.ca); /* form pointer to temporary segment */
	where_when (table_index).temporary = tP;	/* store in data base */
	call fill_pathname_t (tP);			/* develop pathname in auxilliary data base */
	if ni = srf3_max_index then go to srf3_full;	/* is extension table full? */

	if table_index = 37767 then do;		/* is this the last possible place? */
	     call off;				/* yes -- close the data bases */
	     call com_err_ (0, "sample_refs$ih", "srf1 data base full. Automatic reset."); /* write  message */
	     revert any_other;			/* stop intercepting faults */
	     return;				/* exit */
	end;

	table_index = table_index + 1;		/* no -- increment the index */
	call timer_manager_$cpu_call ((frequency*1000), "10"b, sample_refs$ih); /* start the timer again */
	revert any_other;				/* stop intercepting faults */
	return;					/* exit */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

fill_pathname_p: procedure (xP);			/* internal procedure to store pathnames -- psr reference entry */

declare  xP pointer,				/* pointer to segment */
         temp_pathname character (168),			/* pathname temporary storage */
         tbit bit (1),				/* psr (0)/tsr (1) reference switch */
         ring0_get_$name external entry (char (*) aligned, char (*) aligned, ptr, fixed bin (35)),
         hcs_$fs_get_path_name external entry (ptr, char (*) aligned, fixed bin, char (*) aligned, fixed bin (35));

	     tbit = "0"b;				/* psr reference */
	     go to start;

fill_pathname_t: entry (xP);				/* tsr reference entry */

	     tbit = "1"b;				/* set switch on */
start:	     i = fixed (baseno (xP));			/* set segment number */

	     if i > srf2_max_index then do;		/* is the segment number beyond the srf2 table capacity? */
		call com_err_ (0, "sample_refs$ih", "Reference to segment number ^d exceeds table capacity. Reference ignored.", i);
		return;
	     end;

	     if i > high_segno then high_segno = i;	/* keep highest segno referenced up to data */
	     if i <= high_hc then do;			/* is the segment in the hardcore? */
		call ring0_get_$name (dirname, ename, xP, code); /* yes -- get the pathname components */

		if code = 0 then do;		/* did it succeed? */
		     j = index (dirname, " ");	/* yes -- find the first blank in the directory name */
		     if j <= 1 then temp_pathname = ename; /* no directory name */
		     else temp_pathname = substr (dirname, 1, j-1)||">"||ename; /* directory name found */
		end;

		else temp_pathname = "INVALID RING 0 SEGMENT NUMBER"; /* ring0_get_$name failed */
	     end;

	     else do;				/* segment not in hardcore */
		call hcs_$fs_get_path_name (xP, dirname, j, ename, code); /* yes -- get the pathname components */
		if code = 0 then temp_pathname = substr (dirname, 1, j)||">"||ename; /* form the pathname */
		else temp_pathname = "INVALID NON-RING 0 SEGMENT NUMBER"; /* hcs_$fs_get_path_name failed */
	     end;

	     if segment (i).pathname < " " then do;	/* has this segment number been encountered? */
		segment (i).pathname = temp_pathname;	/* no -- fill in the pathname */
		go to set_seg_rc;			/* set reference count in segment table */
	     end;

	     if segment (i).ci = 0 then do;		/* segment number encountered -- is it re-used? */

		if segment (i).pathname = temp_pathname then do; /* not re-used -- do the pathnames match? */
set_seg_rc:	     if tbit then segment (i).trc = segment (i).trc + 1; /* match -- increment trc...or... */
		     else segment (i).prc = segment (i).prc + 1; /* increment prc */
		     return;			/* exit */
		end;

		else do;				/* no match -- build an extension entry for re-used segment number */
		     rul = 1;			/* set re-usage level for an initial re-usage */
		     segment (i).ci = ni;		/* set segment chain index to next available extension entry */
		     go to set_ext;			/* fill in the extension */
		end;
	     end;

	     j = segment (i).ci;			/* segment number previously re-used -- pick up initial chain index */
	     do rul = 1 by 1 while (extension (j).ci ^= 0); /* find the last usage of the segment number */
		j = extension (j).ci;
	     end;

	     if extension (j).pathname = temp_pathname then do; /* do the pathnames match? */
		if tbit then extension (j).trc = extension (j).trc + 1; /* match -- increment trc...or... */
		else extension (j).prc = extension (j).prc + 1; /* increment prc */
		go to set_rul;			/* set re-usage level */
	     end;

	     rul = rul + 1;				/* no match -- increment re-usage level */
	     extension (j).ci = ni;			/* set extension chain index to next available extension entry */
set_ext:	     extension (ni).pathname = temp_pathname;	/* fill in pathname */
	     if tbit then extension (ni).trc = 1;	/* set trc...or... */
	     else extension (ni).prc = 1;		/* set prc */
	     ni = ni + 1;				/* increment index to next available entry */
set_rul:	     if tbit then where_when (table_index).trul = rul; /* set trul...or... */
	     else where_when (table_index).prul = rul;	/* set prul */
	     return;

	end fill_pathname_p;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

     end sample_refs;
