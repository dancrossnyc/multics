/****^  ******************************************************
        *                                                    *
        * Copyright, (C) Honeywell Bull Inc., 1987           *
        *                                                    *
        * Copyright (c) 1972 by Massachusetts Institute of   *
        * Technology and Honeywell Information Systems, Inc. *
        *                                                    *
        ****************************************************** */



/****^  HISTORY COMMENTS:
  1) change(87-01-19,GDixon), approve(87-04-16,MCR7614),
     audit(87-05-21,Farley), install(87-07-15,MR12.1-1040):
     Add support for storing boot program as first segment of MST image stored
     in a file.
                                                   END HISTORY COMMENTS */


gm_write_boot_program_:
     procedure (P_seg_ptr, P_bc, P_seg_name, P_iocbp, P_file, P_object_error, P_code);

/* format: off */

/* *	GM_WRITE_BOOT_PROGRAM_
   *
   *	This procedure writes the supplied program to the bootload_program area of the label.
   *	Of course, this only works if a genuine tape is being written. This is taken care of
   *	by generate_mst itself.
   *
   *	Cribbed from gm_write_first_seg_, 31 July, 1981, W. Olin Sibert
   */

dcl  P_seg_ptr pointer parameter;			/* pointer to segment */
dcl  P_bc fixed bin (24) parameter;			/* length of segment */
dcl  P_seg_name char (*) parameter;			/* Name of program (for label audit trail) */
dcl  P_iocbp pointer parameter;			/* IOCB for tape writing */
dcl  P_file bit(1) aligned parameter;			/* -file given */
dcl  P_object_error bit (1) aligned parameter;		/* Error in object segment flag */
dcl  P_code fixed bin (35) parameter;			/* error code */

dcl  code fixed bin (35);
dcl  iocbp pointer;

dcl 1 bpi aligned like boot_program_info automatic;
dcl 1 control_word aligned,
      2 type fixed bin (17) unaligned,
      2 count fixed bin (18) uns unal;
dcl (name_len, seg_len) fixed bin (21);
dcl 1 oi aligned like object_info automatic;

dcl  iox_$close entry (pointer, fixed bin (35));
dcl  iox_$control entry (pointer, char (*), pointer, fixed bin (35));
dcl  iox_$put_chars entry (ptr, ptr, fixed bin(21), fixed bin(35));
dcl  iox_$open entry (pointer, fixed bin, bit (1) aligned, fixed bin (35));
dcl  object_info_$brief entry (ptr, fixed bin (24), ptr, fixed bin (35));

dcl  (addr, divide, length, size) builtin;

dcl BOOTLOAD_PROGRAM fixed bin internal static options (constant) init (-1);
/*  */

	iocbp = P_iocbp;

	oi.version_number = object_info_version_2;
	call object_info_$brief (P_seg_ptr, P_bc, addr (oi), code);
						/* take text portion only */
	if code ^= 0 then do;
	     P_object_error = "1"b;			/* so main routine will know */
	     goto FINISHED;
	     end;
	else P_object_error = "0"b;

	bpi.version = BOOT_PROGRAM_INFO_VERSION_1;
	bpi.boot_program_ptr = oi.textp;
	bpi.boot_program_text_length = oi.tlng;
	bpi.boot_program_name = P_seg_name;

	if P_file then do;
	   control_word.type = BOOTLOAD_PROGRAM;
	   name_len = divide(length(bpi.boot_program_name), CHARS_PER_WORD, 18, 0);
	   seg_len = bpi.boot_program_text_length;
	   control_word.count = name_len + seg_len;
	   call iox_$put_chars (iocbp, addr(control_word),
	      size(control_word) * CHARS_PER_WORD, code);
	   if code ^= 0 then goto FINISHED;
	   call iox_$put_chars (iocbp, addr(bpi.boot_program_name),
	      name_len * CHARS_PER_WORD, code);
	   if code ^= 0 then goto FINISHED;
	   call iox_$put_chars (iocbp, bpi.boot_program_ptr,
	      seg_len * CHARS_PER_WORD, code);
	   if code ^= 0 then goto FINISHED;
	   end;
	else do;
	   call iox_$close (iocbp, code);		/* First, close it, so it can be opened again with the */
	   if code ^= 0 then goto FINISHED;		/* boot_program in the label */

	   call iox_$control (iocbp, "boot_program", addr (bpi), code);
	   if code ^= 0 then goto FINISHED;		/* Put out the boot program */

	   call iox_$open (iocbp, Stream_output, "0"b, code); /* Now, open it again */
	   if code ^= 0 then goto FINISHED;
	   end;

FINISHED: P_code = code;
	return;

%page; %include iox_modes;
%page; %include object_info;
%page; %include system_constants;
%page; %include tape_mult_boot_info;

	end gm_write_boot_program_;
