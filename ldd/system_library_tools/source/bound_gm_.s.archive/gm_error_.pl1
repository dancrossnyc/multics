/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

gm_error_: proc (code, seg_name, symbol_ptr, header_ptr, arg_error_message, line_ptr,
	     fatal_error_occurred, terminator_was_just_processed, fini_was_found, fseg_ptr, iocb_ptr);

/* argument declarations */

dcl  code fixed bin (35),				/* error code */
     seg_name char (32) aligned,			/* name of segment for which error occurred */
     symbol_ptr ptr,				/* pointer to current header symbol */
     header_ptr ptr,				/* pointer to header */
     arg_error_message char (*),			/* error message */
     line_ptr ptr,					/* pointer to line in output file */
     fatal_error_occurred bit (1),			/* fatal error flag */
     terminator_was_just_processed bit (1),		/* indicates whether or not header must be parsed */
     fini_was_found bit (1),				/* on at finding "fini" in header */
     fseg_ptr ptr,					/* pointer to initiated segment */
     iocb_ptr ptr;

/* program declarations */

dcl (addr, null, substr) builtin;

dcl  line char (95) based (line_ptr),			/* mask for modifying line in output file */
     error_message char (100) varying;			/* error message */


dcl (char_index, char_num) fixed bin (17),		/* for printing current header line */
     cur_ptr ptr,					/* pointer to current header line */
     cur_line char (char_num) based (cur_ptr),		/* current line mask */
     header (100000) char (1) based;

dcl  num_chars_read fixed bin (17),			/* characters read in header parse */
     symbol_is_a_break fixed bin (1),			/* returned from parse_file_ */
     eof_was_found fixed bin (1),			/* ditto */


     symbol char (num_chars_read)based (symbol_ptr);	/* mask for looking at current symbol */

/* external entries */

dcl  com_err_ entry options (variable),
     hcs_$terminate_noname entry (ptr, fixed bin (35)),
     ioa_ entry options (variable),
     parse_file_$parse_file_cur_line ext entry (fixed bin, fixed bin),
     parse_file_$parse_file_ptr ext entry (ptr, fixed bin, fixed bin (1), fixed bin (1)),
     iox_$put_chars entry (ptr, ptr, fixed bin (21), fixed bin (35));

/*  */
/* set the error message */
	error_message = arg_error_message;

BEGIN:


	call com_err_ (code, "generate_mst", error_message);

	code = 0;
	error_message = "";

	if seg_name ^= "" then do;
	     call ioa_ ("Last segment name encountered in header was ^a", seg_name);
	     if symbol_ptr ^= null then do;
		call parse_file_$parse_file_cur_line (char_index, char_num);
		cur_ptr = addr (header_ptr -> header (char_index));
		call ioa_ ("current line is ^/^a", cur_line);
	     end;
	end;

	if iocb_ptr ^= null then do;
	     line_ptr -> line = "******";		/* blank out line and fill in stars */
	     substr (line_ptr -> line, 43) = error_message;
	     call iox_$put_chars (iocb_ptr, line_ptr, 500, code);
	end;

	if (fatal_error_occurred) then return;

	if fseg_ptr ^= null then do;			/* terminate the initiated segment */
	     call hcs_$terminate_noname (fseg_ptr, code);
	     if code ^= 0 then do;			/* fatal error */
		error_message = "Unable to terminate found segment.";
		fatal_error_occurred = "1"b;
		go to BEGIN;
	     end;
	     else fseg_ptr = null;
	end;

	if (fini_was_found) then return;
	if (terminator_was_just_processed) then return;

	else if symbol_ptr ^= null then do;		/* find "end" statement or terminator */
ERR_LOOP:
	     call parse_file_$parse_file_ptr (symbol_ptr, num_chars_read, symbol_is_a_break, eof_was_found);
	     if symbol = "fini" then do;
		fini_was_found = "1"b;
		return;
	     end;

	     if eof_was_found = 1 then do;		/* fatal error */
		fatal_error_occurred = "1"b;
		error_message = "Physical end of header reached before end statement.";
		go to BEGIN;
	     end;

	     if symbol = "end" then do;
		terminator_was_just_processed = "1"b;
		return;
	     end;

	     go to ERR_LOOP;

	end;

	return;

     end gm_error_;
