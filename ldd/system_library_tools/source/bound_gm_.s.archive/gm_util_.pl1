/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

gm_util_: proc (seg_name, seg_type, sltep, seg_ptr, seg_is_linkage, seg_is_defs);

/* *	GM_UTIL_
   *
   *	This repulsive utility program diddles with SLT entries to be written onto
   *	a system tape, in a fashion which is not particularly obvious even after
   *	considerable study.
   */

/* Modified 31 July 1981, W. Olin Sibert, to use gm_data.incl.pl1 for segment type values */

/* argument declarations */

dcl  seg_name char (32) aligned,			/* name of segment whose slte is being initialized */
     seg_type fixed bin (17),				/* primary keyword type (name,first_name,etc.) */
     seg_ptr ptr,					/* pointer to the segment */
     seg_is_linkage bit (1) aligned,			/* on if slte is for linkage segment */
     seg_is_defs bit (1) aligned;			/* on if slte is for defs segment */

dcl (seg_word2 init ("110010000000010000000000000100000000"b), /* specifies re access,cache,paged,combine_link */
     seg_word3 init ("000000000000000000000000000000000000"b), /* specifies ringbrackets of 0,0,0 */
     link_word2 init ("111110000000011000000011011000000000"b),
						/*  when anded with word two of an slte for a linkage section,
						   saves access, paged, per_process,
						   init_seg, temp_seg, link_sect and link_sect_wired */
     link_word3 init ("000000000111111111000000000000000000"b),
						/* when anded with word three of linkage slte, saves ringbracks */
     defs_word2 init ("000010000000000000000000000001000000"b),
						/* When anded with word two of defs slte, saves cache */
     defs_word3 init ("000000000000000000000000000000000000"b)) bit (36) aligned static;
						/* when anded with word three of defs slte, save nothing */

dcl  word_mask bit (36) aligned based;			/* mask for above strings */

dcl (word2_ptr,
     word3_ptr,
     word4_ptr) ptr;				/* pointers to slte data words */

dcl  addrel builtin;

/*  */

/*  initializations  */
/* ------------------- */

	word2_ptr = addrel (sltep, 1);
	word3_ptr = addrel (sltep, 2);
	word4_ptr = addrel (sltep, 3);


/*  */

/*  initiate linkage slte  */
/* ------------------------- */

	if (seg_is_linkage) then do;

	     slte.link_sect = "1"b;			/* set switch indicating this is a linkage section */

	     if slte.combine_link = "1"b then do;	/* if the combine link switch is on  */
		slte.access = "1000"b;		/*  then default access is READ  */
		slte.per_process = "0"b;
		slte.init_seg = "1"b;
	     end;

	     else					/*  if the combine link switch is not on  */
		slte.access = "1010"b;		/* give the linkage RW  */

	     word2_ptr -> word_mask = word2_ptr -> word_mask & link_word2; /* initiate word 2 of slte */

	     slte.temp_seg, slte.init_seg = "1"b;	/* make all .link segments go away */

	     word3_ptr -> word_mask = word3_ptr -> word_mask & link_word3; /* initiate word 3 of slte */

	     word4_ptr -> word_mask = "0"b;		/* initiate word 4 of slte */
	end;

/*  */
/*  initiate defs slte  */
/* ------------------------- */

	else if (seg_is_defs) then do;

	     slte.defs = "1"b;			/* set switch indicating this is a defs section */

	     word2_ptr -> word_mask = word2_ptr -> word_mask & defs_word2; /* initiate word 2 of slte */

	     word3_ptr -> word_mask = word3_ptr -> word_mask & defs_word3; /* initiate word 3 of slte */

	     word4_ptr -> word_mask = "0"b;		/* initiate word 4 of slte */

	     slte.access = "1000"b;
	     slte.init_seg = "1"b;
	     slte.paged = "1"b;
	end;

/*  */

/*  initiate slte for segments  */
/* ------------------------------ */

	else do;

	     sltep -> word_mask = "0"b;		/* initiate word 1 of slte */

	     word2_ptr -> word_mask = seg_word2;	/* initiate word 2 of slte */

	     word3_ptr -> word_mask = seg_word3;	/* initiate word 3 of slte */

	     word4_ptr -> word_mask = "0"b;		/* initiate word 4 of slte */

	     if seg_type = FABRICATED_SEG		/* fabricate */
	     then sltep -> slte.access = "1010"b;	/* READ, WRITE */
	end;

%page; %include gm_data;
%page; %include slte;

     end gm_util_;
