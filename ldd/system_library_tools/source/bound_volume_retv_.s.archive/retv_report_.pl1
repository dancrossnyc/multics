/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */

retv_report_: proc;

/* This routine is used by the volume retriever to report and log error and status
   messages. It is modled after the system routine com_err_. When called for the first time in a volume retriever
   invocation, it creates, in the working directory, an error file, in which it logs all error and status messages.
   If requested it also writes error messages on the stream error_output. */

dcl  code fixed bin (35);
dcl  icode fixed bin (35);
dcl  tstring char (24);
dcl  uname char (32);
dcl  caller char (*);
dcl  message char (*);
dcl  argp ptr;
dcl  retv_string char (512);
dcl  control_string char (32) aligned;
dcl  len fixed bin;
dcl  error_output bit (1);
dcl  short char (8) aligned;
dcl  long char (100) aligned;

dcl  myname char (15) static init ("retv_report_") options (constant);

dcl  iox_$error_output ptr ext;

dcl  date_time_ entry (fixed bin (71), char (*));
dcl  cu_$arg_list_ptr entry (ptr);
dcl  ioa_$general_rs entry (ptr, fixed bin, fixed bin, char (*), fixed bin, bit (1) aligned, bit (1) aligned);
dcl  iox_$attach_ioname entry (char (*), ptr, char (*), fixed bin (35));
dcl  iox_$open entry (ptr, fixed bin, bit (36), fixed bin (35));
dcl  convert_status_code_ entry (fixed bin (35), char (8) aligned, char (100) aligned);
dcl  ioa_$ioa_switch entry options (variable);
dcl  retv_report_$online_output entry options (variable);

dcl  null builtin;
dcl  clock builtin;
dcl  substr builtin;

%include retv_data_;
%include iox_modes;

error_output: entry (icode, caller, message);

/* If an error file is not attached then fabricate a name with a data/time stamp, attach and open it. If
   successsful then report via online mechanism. */

	if retv_data_.disable_error_report then return;
	error_output = "1"b;

	if retv_data_.error_iocbp = null then do;	/* error file not attached */

	     call date_time_ (clock, tstring);
	     uname = "retv_err." || substr (tstring, 1, 8)||"."|| substr (tstring, 11, 4);
	     call iox_$attach_ioname ("error_file", retv_data_.error_iocbp, "vfile_ " || uname, code);
	     if code ^= 0 then do;
		call retv_report_$online_output (code, myname, "Unable to attach error file");
		return;
	     end;
	     call iox_$open (retv_data_.error_iocbp, Stream_output, ""b, code);
	     if code ^= 0 then do;
		call retv_report_$online_output (code, myname, "Error opening error file");
		return;
	     end;
	     call retv_report_$online_output (0, myname, "Error file ^a created", uname);
	end;

common:
						/* If given a non-zero code convert to a message */
	if icode ^= 0 then do;
	     call convert_status_code_ (icode, short, long);
	     control_string = "^a:^x^a;^x^a";
	end;
	else do;
	     short, long = "";
	     control_string = "^a:^x^a^s";
	end;
						/* pick up arg list ptr */
	call cu_$arg_list_ptr (argp);
						/* convert args to message */
	call ioa_$general_rs (argp, 3, 4, retv_string, len, "0"b, "0"b);
	if error_output then			/* write to file if specified */
	     call ioa_$ioa_switch (retv_data_.error_iocbp, control_string, caller, substr (retv_string, 1, len), long);


/* Write online if requested, if args not initialized yet, or if online entry */

	if (error_output & retv_data_.err_online) | ^error_output | ^retv_data_.arg_init then
	     call ioa_$ioa_switch (iox_$error_output, control_string, caller, substr (retv_string, 1, len), long);

	return;

online_output: entry (icode, caller, message);

	error_output = "0"b;
	goto common;

     end retv_report_;
