/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(86-11-17,GWMay), approve(86-11-17,MCR7445), audit(86-11-20,GDixon),
     install(86-11-21,MR12.0-1223):
     added entrypoint "test" for debugging the retriever from a user process
     without changes to the system volume retriever queues.
  2) change(88-08-10,GWMay), approve(88-10-05,MCR8005), audit(88-10-12,Farley),
     install(88-10-17,MR12.2-1173):
     Added administrative support for two additional temporary work segments.
                                                   END HISTORY COMMENTS */


/* format: style1,ind2,^inddcls,ifthenstmt,dclind2,declareind2,ifthendo,ifthen*/

retriever: retrieve_from_volume: retv: proc;

/* This is the main control routine of the volume retriever subsystem. It initializes the
   static control structure, parses the arguments, and controls which requests are processed. It uses two
   other routines, retv_vol_control_, to determine which dump volumes a request may be recovered from
   and retrieve_from_volume_, to recover objects from a specified dump volume. The major data bases created by
   this subsystem are in the process directory or in external static and are initialize/created for each invocation.
*/

/* Modified 6/79 by D. Vinograd to correct notification bug, add accounting control argument ,
   add directory name space searching option, and xxx
   Modified: 12/18/81 by GA Texada to correct a bug in cross-retrieval (phx12113)
   Modified: 09/03/82 by GA Texada to fix a bug in scan_sub_tree when it calls submit_request.
   Modified: 3/83 by E. N. Kittlitz for 256K segments.
   Modified: 8/83 by GA Texada to make the "list" request go thru all the q's.
   Modified: 5/15/85 by GA Texada to ensure that retv_data_.qidx(X) is zeroed after calling message_segment_$delete
*/

dcl wdir		     char (168);
dcl short		     char (8) aligned;
dcl ac		     fixed bin;
dcl options_string	     char (256);
dcl osl		     fixed bin;
dcl narg		     fixed bin;
dcl answer	     char (3) var;
dcl long		     char (100) aligned;
dcl message	     char (256);
dcl message_len	     fixed bin;
dcl line		     char (32);
dcl tp		     (9) ptr;
dcl nelemt	     fixed bin (21);
dcl rvcx		     fixed bin;
dcl sorty		     fixed bin;
dcl sortx		     fixed bin;
dcl nvolx		     fixed bin;
dcl q		     fixed bin;
dcl qx		     fixed bin;
dcl to_from	     bit (1);
dcl retv_ms_id	     bit (72) aligned;
dcl more_messages	     bit (1);
dcl more_to_do	     bit (1);
dcl dtm		     bit (36);
dcl queue_name	     char (32);
dcl step		     bit (1);
dcl list		     bit (1);
dcl code		     fixed bin (35);
dcl type		     fixed bin;
dcl ignore	     fixed bin (35);
dcl arg		     char (argl) based (argp);
dcl argl		     fixed bin;
dcl argp		     ptr;
dcl old_256K_switch	     bit (2) aligned;

dcl based_area	     area based (retv_data_.areap);

dcl LINK		     fixed bin static init (3) options (constant);
dcl DIR		     fixed bin int static init (2) options (constant);
dcl recursive_invocation bit (1) aligned int static init ("0"b);
dcl myname	     char (32) int static init ("retrieve_from_volume") options (constant);
dcl max_q_num	     fixed bin static init (3) options (constant);

dcl 1 local_mseg_return_args like mseg_return_args aligned;
dcl 1 local_retv_input   like retv_input aligned;

dcl error_table_$noentry ext fixed bin (35);
dcl error_table_$resource_unavailable ext fixed bin (35);
dcl error_table_$badopt  fixed bin (35) ext;
dcl error_table_$vtoce_connection_fail ext fixed bin (35);
dcl error_table_$bad_segment ext fixed bin (35);
dcl error_table_$no_message ext fixed bin (35);
dcl sys_info$seg_size_256K fixed bin (19) ext static;
dcl sys_info$max_seg_size fixed bin (18) ext static;

dcl retv_vol_control_$sort entry (ptr, fixed bin (35));
dcl retv_notify_	     entry (char (*), ptr, char (*));
dcl request_id_	     entry (fixed bin (71)) returns (char (19));
dcl get_wdir_	     entry returns (char (168));
dcl retv_report_$error_output entry options (variable);
dcl retv_report_$online_output entry options (variable);
dcl message_segment_$close entry (fixed bin, fixed bin (35));
dcl message_segment_$open entry (char (*), char (*), fixed bin, fixed bin (35));
dcl message_segment_$delete entry (char (*), char (*), fixed bin (35));
dcl message_segment_$delete_index entry (fixed bin, bit (72) aligned, fixed bin (35));
dcl command_query_	     entry options (variable);
dcl system_privilege_$ring1_priv_on entry (fixed bin (35));
dcl system_privilege_$ring1_priv_off entry (fixed bin (35));
dcl system_privilege_$ipc_priv_on entry (fixed bin (35));
dcl system_privilege_$ipc_priv_off entry (fixed bin (35));
dcl retv_account_$create entry (fixed bin (35));
dcl retv_account_$update entry (char (*) aligned);
dcl hc_backup_$retv_name_list entry (char (*) aligned, ptr, ptr, fixed bin, fixed bin (35));
dcl hc_backup_$retv_check entry (char (*) aligned, char (*) aligned, fixed bin, bit (36), fixed bin (35));
dcl convert_status_code_ entry (fixed bin (35), char (8) aligned, char (100) aligned);
dcl hcs_$delentry_seg    entry (ptr, fixed bin (35));
dcl hcs_$set_256K_switch entry (bit (2) aligned, bit (2) aligned, fixed bin (35));
dcl hcs_$set_max_length_seg entry (ptr, fixed bin (19), fixed bin (35));
dcl hcs_$truncate_seg    entry (ptr, fixed bin (19), fixed bin (35));
dcl date_time_	     entry (fixed bin (71), char (*));
dcl get_system_free_area_ entry returns (ptr);
dcl get_temp_segments_   entry (char (*), (*) ptr, fixed bin (35));
dcl release_temp_segments_ entry (char (*), (*) ptr, fixed bin (35));
dcl cu_$arg_count	     entry (fixed bin);
dcl cu_$arg_ptr	     entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl com_err_	     entry options (variable);
dcl ioa_$rsnnl	     entry options (variable);
dcl ioa_		     entry options (variable);
dcl cv_oct_check_	     entry (char (*), fixed bin (35)) returns (fixed bin);
dcl ioa_$nnl	     entry options (variable);
dcl message_segment_$create entry (char (*), char (*), fixed bin (35));
dcl message_segment_$add_index entry (fixed bin, ptr, fixed bin, bit (72) aligned, fixed bin (35));
dcl message_segment_$read_index entry (fixed bin, ptr, bit (1), ptr, fixed bin (35));
dcl retrieve_from_volume_ entry (ptr, fixed bin (35));
dcl retv_vol_control_    entry (ptr, fixed bin (35));
dcl message_segment_$incremental_read_index entry (fixed bin, ptr, bit (2), bit (72) aligned, ptr,
		     fixed bin (35));
dcl message_segment_$update_message_index entry (fixed bin, fixed bin, bit (72) aligned, ptr, fixed bin (35));

dcl cleanup	     condition;
dcl linkage_error	     condition;

dcl (fixed, hbound, before) builtin;
dcl addr		     builtin;
dcl size		     builtin;
dcl unspec	     builtin;
dcl length	     builtin;
dcl null		     builtin;
dcl substr	     builtin;

main: goto common;

test: entry (test_dir);

/*  This entry point is the counter part to the test entry point in the     */
/*  enter_retrieval_request (err) command program.  It is designed for use  */
/*  in testing the volume dumper/retriever.  To use it type		      */
/*  "retrieve_from_volume$test wdir"  where wdir is the directory where you */
/*  have created private message_segments named volume_retiever.ms and      */
/*  volume_retiever(1 2 3).ms for use as the retriever queues.	      */
/*  Type "err$test wdir" before entering the retrieval request giving the   */
/*  same directory which contains the queue.			      */

dcl test_dir	     char (*);
    queue_dir = test_dir;
    return;

common:
						/* protect against recursive invocation */
    if recursive_invocation then do;
        call com_err_ (0, myname, "Recursive invocation not allowed ");
        return;
      end;
						/* initialize static variables */
    old_256K_switch = ""b;
    tp (*) = null;
    retv_data_.ptrs = null;
    retv_data_.chars = "";
    retv_data_.bits = ""b;
    retv_data_.sys_dir = ">daemon_dir_dir>volume_backup";
    retv_data_.fixed = 0;
    retv_data_.all = "1"b;
    retv_data_.io_module = "tape_mult_";
						/* and some local variables */
    ms_arg_ptr = addr (local_mseg_return_args);
    q = 1;
    list = "0"b;
    wdir = get_wdir_ ();
    step = "0"b;
						/* initialize mail structure */
						/* process arguments */
    inputp, requestp = null;
    ac = 1;
    call cu_$arg_count (narg);
    do while (ac <= narg);
      call cu_$arg_ptr (ac, argp, argl, code);
      if code ^= 0 then do;
no_arg:	call retv_report_$error_output (code, myname, "Unable to access arg after ^a", arg);
	goto finale;
        end;
      ac = ac + 1;
      if arg = "-step" then step = "1"b;
      else if arg = "-manual" then retv_data_.manual = "1"b;
      else if arg = "-long" then retv_data_.long = "1"b;
      else if arg = "-working_dir" | arg = "-wd" then retv_data_.sys_dir = wdir;
      else if arg = "-accounting" then retv_data_.accounting = "1"b;
      else if arg = "-all" | arg = "-a" then ;
      else if arg = "-error_on" then retv_data_.err_online = "1"b;
      else if arg = "-list" then list = "1"b;
      else if arg = "-input_volume_desc" then do;
	call cu_$arg_ptr (ac, argp, argl, code);
	if code ^= 0 then goto no_arg;
	ac = ac + 1;
	retv_data_.input_volume_desc = arg;
	retv_data_.io_module = before (arg, " ");
        end;
      else if arg = "-q" | arg = "-queue" then do;
	retv_data_.all = "0"b;
	call cu_$arg_ptr (ac, argp, argl, code);
	if code ^= 0 then goto no_arg;
	ac = ac + 1;
	q = cv_oct_check_ (arg, code);
	if code ^= 0 | (q < 1 | q > 3) then do;
	    call retv_report_$error_output (0, myname,
	         "Invalid queue number ^a", arg);
	    goto finale;
	  end;
        end;
      else do;
	call retv_report_$error_output (error_table_$badopt, myname, "^a", arg);
	goto finale;
        end;
    end;
    retv_data_.queue = q;
    on cleanup call clean_it_up;
    recursive_invocation = "1"b;
start:
    call message_segment_$open (queue_dir, queue_seg_ (), retv_data_.qidx (user), code);
    if code ^= 0 then do;
        call retv_report_$error_output (code, myname, "Unable to open user queue ^a>^a", queue_dir, queue_seg_ ());
        goto finish;
      end;

    call message_segment_$open (wdir, "volume_retriever.ms", retv_data_.qidx (retriever), code);
    if code ^= 0 & code ^= error_table_$noentry then do;
        call retv_report_$error_output (code, myname, "Unable to open private queue ^a>volume_retriever.ms", wdir);
        goto finale;
      end;
    retv_data_.arg_init = "1"b;
    retv_data_.areap = get_system_free_area_ ();
						/* create temp segs and set static ptrs */
    call get_temp_segments_ (myname, tp, code);
    if code ^= 0 then do;
        call retv_report_$error_output (code, myname, "Unable to create temp segs");
        goto finale;
      end;
    retv_data_.nlp = tp (1);
    retv_data_.aclp = tp (2);
    retv_data_.recordp = tp (3);
    retv_data_.objectp = tp (4);
    retv_data_.vlp = tp (5);
    retv_data_.contentsp = tp (6);
    retv_data_.skip = tp (7);
    retv_data_.input_buffer_ptr = tp (8);
    retv_data_.page_buffer_ptr = tp (9);

    call hcs_$set_256K_switch ("11"b, (""b), code);
    if code ^= 0 then do;
        call retv_report_$error_output (code, myname, "Could not enable 256KW segments.");
        go to finale;
      end;
    call hcs_$set_max_length_seg (retv_data_.objectp, sys_info$seg_size_256K, code);
    if code ^= 0 then do;
        call retv_report_$error_output (code, myname, "Could not make 256K word temp seg (7).");
        go to finale;
      end;

    call hcs_$set_max_length_seg (retv_data_.input_buffer_ptr, sys_info$seg_size_256K, code);
    if code ^= 0 then do;
        call retv_report_$error_output (code, myname, "Could not make 256K word temp seg (8).");
        go to finale;
      end;

    call hcs_$set_max_length_seg (retv_data_.page_buffer_ptr, sys_info$seg_size_256K, code);
    if code ^= 0 then do;
        call retv_report_$error_output (code, myname, "Could not make 256K word temp seg (9).");
        go to finale;
      end;

    on linkage_error begin;
        call retv_report_$error_output (0, myname, "AIM ring 1 and ipc privileges not enabled.");
        goto set_cleanup;
      end;

    call system_privilege_$ring1_priv_on (ignore);
    call system_privilege_$ipc_priv_on (ignore);

/* establish cleanup handler and set flag */
set_cleanup:
    revert linkage_error;
    if retv_data_.qidx (retriever) ^= 0 then do;
        call read_queue_message (retriever);
        do while (more_messages);
	inputp = mseg_return_args.ms_ptr;
	call ioa_ ("ID: ^a Retrieval request of ^a^[>^]^a for ^a",
	     substr (request_id_ (retv_input.msg_time), 7, 8),
	     retv_input.dirname, retv_input.dirname ^= ">",
	     retv_input.ename, retv_input.requestor);
	call ioa_$rsnnl (
	     "^[-skip ^]^[-subtree ^]^[-notify ^]^[-previous ^]^[-to ^a ^;^s ^]^[-from ^a ^;^s^]^[-new path ^a^[->^]^a^;^s^]",
	     options_string, osl, retv_input.skip_it,
	     retv_input.subtree, retv_input.notify, retv_input.previous,
	     retv_input.to_time ^= 0 & ^retv_input.previous,
	     time_ (retv_input.to_time), retv_input.from_time ^= 0,
	     time_ (retv_input.from_time), retv_input.new_dirname ^= "", retv_input.new_dirname,
	     retv_input.new_dirname ^= ">", retv_input.new_ename);
	if osl > 1 then
	  call ioa_ ("options: ^a", options_string);
	if ^list & step then do;
reread1:	    call ioa_$nnl ("command:  ");
	    call iox_$get_line (iox_$user_input, addr (line), length (line), nelemt, code);
	    if code ^= 0 then do;
	        call retv_report_$error_output (code, myname, "Command read error");
	        goto reread1;
	      end;
	    line = substr (line, 1, nelemt - 1);
	    if line = "quit" | line = "q" then goto finish;
	    else if line = "skip" | line = "s" then do;
	        retv_input.skip_it = "1"b;
	        call update_queue_message;
	      end;
	    else if line = "cancel" | line = "c" then do;
	        if ^retv_input.proxy then
		call delete_queue_message (user, retv_input.user_ms_id);
	        call delete_queue_message (retriever, mseg_return_args.ms_id);
	      end;
	    else if line = "proceed" | line = "p" then do;
	        retv_input.skip_it = "0"b;
	        call update_queue_message;
	      end;
	    else if line = "help" | line = "h" then do;
	        call ioa_ ("Allowable commands are quit(q)^/skip(s)^/cancel(c)^/proceed(p)^/help(h)");
	        goto reread1;
	      end;
	    else do;
	        call ioa_ ("Unrecognized command: ^a", line);
	        goto reread1;
	      end;
	  end;
	call read_incremental_queue_message (retriever);
        end;
        if list then goto finish;			/* go to the next q				*/
      end;
						/* create retriever's private queue if necessary */
    else do;
        if list then goto finale;
        call message_segment_$create (wdir, "volume_retriever.ms", code);
        if code ^= 0 then do;
	  call retv_report_$error_output (code, myname,
	       "Unable to create private queue ^a>volume_retriever.ms", wdir);
	  goto finish;
	end;
        call message_segment_$open (wdir, "volume_retriever.ms", retv_data_.qidx (retriever), code);
        if code ^= 0 then do;
	  call retv_report_$error_output (code, myname,
	       "Unable to open private queue ^a>volume_retriever.ms", wdir);
	  goto finish;
	end;
      end;

/* Read each request from user queue. If the request is not valid then delete it. If the caller
   wants to review  each request before processing then   display each request . */

user_queue:
    call read_queue_message (user);
    do while (more_messages);
      requestp = mseg_return_args.ms_ptr;
      if retv_request.version ^= retv_request_version_2 then do;
	call retv_report_$error_output (0, myname,
	     "Invalid version of retrieval request encountered and deleted");
	call delete_queue_message (user, mseg_return_args.ms_id);
	goto next;
        end;
      if step then do;
	call ioa_ ("ID: ^a Retrieval request of ^a^[>^]^a for ^a",
	     substr (request_id_ (retv_request.msg_time), 7, 8),
	     retv_request.dirname, retv_request.dirname ^= ">",
	     retv_request.ename, mseg_return_args.sender_id);
	call ioa_$rsnnl (
	     "^[-subtree ^]^[-notify ^]^[-previous ^]^[-to ^a ^;^s ^]^[-from ^a ^;^s^]^[-new path ^a^[->^]^a^;^s^]",
	     options_string, osl,
	     retv_request.subtree, retv_request.notify, retv_request.previous,
	     retv_request.to_time ^= 0 & ^retv_request.previous,
	     time_ (retv_request.to_time), retv_request.from_time ^= 0,
	     time_ (retv_request.from_time), retv_request.new_dirname ^= "", retv_request.new_dirname,
	     retv_request.new_dirname ^= ">", retv_request.new_ename);
	if osl > 1 then call ioa_ ("options: ^a", options_string);
reread:	call ioa_$nnl ("command:  ");
	call iox_$get_line (iox_$user_input, addr (line), length (line), nelemt, code);
	if code ^= 0 then do;
	    call retv_report_$error_output (code, myname, "Command read error");
	    goto reread;
	  end;
	line = substr (line, 1, nelemt - 1);
	if line = "quit" | line = "q" then goto finish;
	else if line = "skip" | line = "s" then goto next;
	else if line = "cancel" | line = "c" then do;
	    call delete_queue_message (user, mseg_return_args.ms_id);
	    goto next;
	  end;
	else if line = "proceed" | line = "p" then ;
	else if line = "help" | line = "h" then do;
	    call ioa_ ("Allowable commands are quit (q)^/skip (s)^/cancel (c)^/proceed (p)^/help (h)");
	    goto reread;
	  end;
	else do;
	    call ioa_ ("Unrecognized command: ^a", line);
	    goto reread;
	  end;
        end;
      unspec (local_retv_input) = "0"b;
      local_retv_input.request = retv_request;
      local_retv_input.user_ms_id = mseg_return_args.ms_id;
      local_retv_input.access_class = mseg_return_args.sender_authorization;
      local_retv_input.level = mseg_return_args.level;
      local_retv_input.q_num = retv_data_.queue;
      local_retv_input.requestor = mseg_return_args.sender_id;
      local_retv_input.submission_time = fixed (mseg_return_args.ms_id, 71);
      call message_segment_$add_index (retv_data_.qidx (retriever), addr (local_retv_input),
	 size (local_retv_input) * 36, retv_ms_id, code);
      if code ^= 0 then
        call retv_report_$error_output (code, myname,
	   "Unable to add to private queue ^a>volume_retriever.ms", wdir);
next:
      call read_incremental_queue_message (user);
    end;


/* This is the main recovery loop. Each dump volume that has a volume control seg is read
   After each dump volume is read the private queue is scanned
   to check for any requests that may have been satisified. If one is found then a check is made to see  if all
   is well. This check is necessary since the retrieval of an entry may make a whole subtree accessible. If
   all is well then the request is marked as completed in the private queue. If a subtree retrieval was requested
   then  the subtree is scanned.
*/

recovery_loop:

/* Loop through the queue setting the in_progress flag. This flag will be used latter to determine if a
   request has not been satisfied */

    call read_queue_message (retriever);
    do while (more_messages);
      inputp = mseg_return_args.ms_ptr;
      if ^retv_input.skip_it then do;
	retv_input.retv_ms_id = mseg_return_args.ms_id;
	call retv_vol_control_ (inputp, code);
	if code ^= 0 then
	  retv_input.errcode = code;
	retv_input.in_progress = "1"b;
	call update_queue_message;
        end;
      call read_incremental_queue_message (retriever);
    end;
						/* if any dump volumes - setup accounting */
    if retv_data_.nvol > 0 & retv_data_.accounting then do;
        call retv_account_$create (code);
        if code ^= 0 then do;
	  call retv_report_$error_output (code, myname, "Accounting error");
	  goto finish;
	end;
      end;
    do rvcx = 1 to retv_data_.nvol;			/* sort the control seg */
      call retv_vol_control_$sort (retv_data_.rvcp (rvcx), code);
    end;
    do rvcx = 1 to retv_data_.nvol;			/* scan the volumes */
      rvcp = retv_data_.rvcp (rvcx);
      call retrieve_from_volume_ (rvcp, code);
      if code ^= 0 then do;
	if code = -1 then
	  call ioa_ ("Volume ^a in use - it will be skipped", retv_vol_control.volname);
	else if code = error_table_$resource_unavailable then do;
	    query_info.version = query_info_version_5;
	    call command_query_ (addr (query_info), answer, myname, "^/^a^/^a",
	         "The physical drive or dump volume is not available or is in use by another process.",
	         "Do you wish to continue the retrieval ");
	    if answer = "no" then goto finish;
	  end;
	else call retv_report_$error_output (code, myname, "Error processing volume ^a",
		retv_vol_control.volname);
        end;
      call read_queue_message (retriever);
      do while (more_messages);
        inputp = mseg_return_args.ms_ptr;
        if retv_input.object_recovered | retv_input.entry_recovered | retv_input.errcode ^= 0 then do;
	  if retv_input.errcode = 0 then do;
	      if retv_input.new_dirname ^= "" then	/* cross-retrieval */
	        call hc_backup_$retv_check (retv_input.new_dirname, retv_input.new_ename, type, dtm, code);
	      else call hc_backup_$retv_check (retv_input.dirname, retv_input.ename, type, dtm, code);
	      if code ^= 0 & code ^= error_table_$vtoce_connection_fail then
	        call retv_report_$error_output (code, myname, "Request check failed for ^[^a^[>^]^a^3s^;^3s^a^[>^]^a^]",
		   (retv_input.new_dirname = ""), retv_input.dirname, retv_input.dirname ^= ">", retv_input.ename,
		   retv_input.new_dirname, retv_input.new_dirname ^= ">", retv_input.new_ename);
	      if code = 0 then do;
		if retv_input.subtree & type = DIR then do;
		    to_from = (retv_input.to_time ^= 0) | (retv_input.from_time ^= 0);
		    call scan_sub_tree (retv_input.dirname, retv_input.ename,
		         to_from, ignore);
		  end;
		if retv_input.entry_retrieval then do;
		    call ioa_$rsnnl ("Recovery of object ^a^[>^]^a not necessary as object already there",
		         message, message_len, retv_input.dirname, retv_input.dirname ^= ">",
		         retv_input.ename);
		    call retv_notify_ (message, inputp, myname);
		  end;
		if ^retv_input.proxy then
		  call delete_queue_message (user, retv_input.user_ms_id);
		call delete_queue_message (retriever, retv_input.retv_ms_id);
		if retv_data_.accounting then call retv_account_$update (retv_input.requestor);
	        end;
	    end;

/* Having completed a request we now scan all other volume control segments for the same
   request and delete it if we find it. We must take care to delete the right request since more then one request may
   exist for the same object.
*/

	  do sortx = 1 to retv_data_.nvol;
	    rvcp = retv_data_.rvcp (sortx);
	    do sorty = 1 to retv_vol_control.n_entries;
	      rvcep = addr (retv_vol_control.array (sorty));
	      if rvce.in_use
		 & (rvce.uid = retv_input.uid)
		 & (rvce.retv_ms_id = retv_input.retv_ms_id) then do;
		retv_vol_control.in_use_cnt = retv_vol_control.in_use_cnt - 1;
		rvce.in_use = "0"b;
	        end;
	    end;
	  end;
	end;
        call read_incremental_queue_message (retriever);
      end;
    end;

/* When we get here all the requests that were queued in volume control segments have been processed for
   better or for worse. When a request is looked for on a dump volume the in_progress switch is set. If nothing
   is found then a message is reported to the operator, and if requested to the requestor. Then the request is deleted
   from the private queue, and the user queue. Note that proxy requests, because they are issued by the retriever
   do not exist in the user queue.
*/

    call read_queue_message (retriever);
    do while (more_messages);
      inputp = mseg_return_args.ms_ptr;
      if retv_input.in_progress & (^retv_input.object_recovered & ^retv_input.entry_recovered) then do;
	if retv_input.errcode ^= -1 then do;
	    call hc_backup_$retv_check (retv_input.dirname, retv_input.ename, type, dtm, code);
	    if code = 0 then do;
	        call ioa_$rsnnl ("Recovery of object ^a^[>^]^a not necessary as already there",
		   message, message_len, retv_input.dirname, retv_input.dirname ^= ">",
		   retv_input.ename);
	      end;
	    else do;
	        if retv_input.errcode = 0 then long = "object not found on dump media";
	        else call convert_status_code_ (retv_input.errcode, short, long);
	        call ioa_$rsnnl ("Failed to recover ^a^[>^]^a for ^a because ^a", message, message_len,
		   retv_input.dirname, retv_input.dirname ^= ">", retv_input.ename,
		   retv_input.requestor, long);
	      end;
	    call retv_notify_ (message, inputp, myname);
	  end;
	if ^retv_input.proxy then
	  call delete_queue_message (user, retv_input.user_ms_id);
	call delete_queue_message (retriever, retv_input.retv_ms_id);
        end;
      call read_incremental_queue_message (retriever);
    end;


/* delete the volume control segs */

    do nvolx = 1 to retv_data_.nvol;
      rvcp = retv_data_.rvcp (nvolx);
      if rvcp ^= null then do;
	call hcs_$delentry_seg (rvcp, code);
	if code ^= 0 then
	  call retv_report_$error_output (code, myname,
	       "Unable to delete control seg ^a.control", retv_vol_control.volname);
        end;
    end;
    retv_data_.rvcp (*) = null;
    retv_data_.nvol = 0;

/* Now go through the private queue once more to see if any requests remain. If one does reset
   some control flags. Then go back to the main recovery loop */


    more_to_do = "0"b;
    call read_queue_message (retriever);
    do while (more_messages);
      inputp = mseg_return_args.ms_ptr;
      if ^retv_input.skip_it then do;
	retv_input.uid = "0"b;
	retv_input.volid = "0"b;
	retv_input.entry_retrieval = "0"b;
	retv_input.in_progress = "0"b;
	retv_input.entry_name = "";
	retv_input.entry_recovered = "0"b;
	retv_input.object_recovered = "0"b;
	retv_input.errcode = 0;
	call update_queue_message;
	more_to_do = "1"b;
        end;
      call read_incremental_queue_message (retriever);
    end;
    if more_to_do then goto recovery_loop;
    else do;
        call message_segment_$delete (wdir, "volume_retriever.ms", code);
        retv_data_.qidx (retriever) = 0;		/* so it can be reused later			*/
        if code ^= 0 then call retv_report_$error_output (code, myname,
	     "Unable to delete private queue ^a>volume_retriever.ms", wdir);
      end;
finish:
    if retv_data_.queue ^= max_q_num & retv_data_.all then do;
        retv_data_.queue = retv_data_.queue + 1;
        goto start;
      end;
finale:
    call clean_it_up;
    return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

queue_seg_: proc returns (char (32));

/* This proc constructs the user queue segment name and returns it */

    call ioa_$rsnnl ("volume_retriever_^d.ms", queue_name, (0), retv_data_.queue);
    return (queue_name);
  end queue_seg_;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

read_queue_message: proc (idx);
dcl idx		     fixed bin;

/* This proc reads the first message from the specified queue.  */

    more_messages = "1"b;
read: call message_segment_$read_index (retv_data_.qidx (idx), retv_data_.areap, "0"b, ms_arg_ptr,
         code);
    if code ^= 0 then do;
        if code = error_table_$no_message then more_messages = "0"b;
        else if code = error_table_$bad_segment then do;
	  call retv_report_$error_output (0, myname, "^[Private^;User^] queue has been salvaged",
	       idx = retriever);
	  goto read;
	end;
        else do;
	  call retv_report_$error_output (code, myname, "^[Private^;User^] queue read failed",
	       retriever = idx);
	  goto finish;
	end;
      end;

  end read_queue_message;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

update_queue_message: proc;

/* This proc updates a specified message in the private queue.
*/

reupdate: call message_segment_$update_message_index (retv_data_.qidx (retriever), size (retv_input) * 36,
         mseg_return_args.ms_id, inputp, code);
    if code ^= 0 then do;
        if code = error_table_$bad_segment then do;
	  call retv_report_$error_output (0, myname, "Private retriever queue ^a>volume_retriever.ms has been salvaged", wdir);
	  goto reupdate;
	end;
        else call retv_report_$error_output (code, myname, "Private queue ^a>volume_retriever.ms update failed", wdir);
      end;
  end update_queue_message;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

read_incremental_queue_message: proc (idx);
dcl idx		     fixed bin;

/* This proc reads the next message from the specified queue.  */

    if idx = retriever then do;
        if inputp ^= null then free retv_input in (based_area);
        inputp = null;
      end;
    else do;
        if requestp ^= null then free retv_request in (based_area);
        requestp = null;

      end;
retry_inc: call message_segment_$incremental_read_index (retv_data_.qidx (idx), retv_data_.areap, "01"b,
         mseg_return_args.ms_id, ms_arg_ptr, code);
    if code ^= 0 then do;
        if code = error_table_$bad_segment then do;
	  call retv_report_$error_output (0, myname, "^[Private^;User^] queue has been salvaged",
	       idx = retriever);
	  goto retry_inc;
	end;
        else if code = error_table_$no_message then more_messages = "0"b;
        else do;
	  call retv_report_$error_output (code, myname, "^[Private^;User^] queue read failed",
	       retriever = idx);
	  goto finish;
	end;
      end;
  end read_incremental_queue_message;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

scan_sub_tree: proc (dn, en, force, ec);

/* This proc scans a directory and checks if each object in the directory is accessable. If not
   it submitts a proxy requests for the missing object. If any object
   encountered is a directory  then we recurse to
   the next level. This proc is used during subtree retrieval to check for what is missing at some level
   inferior to the subtree node and to issue the necessary request to get the object back.  In certain cases
   even if the object is there a request is submitted. An example of this is a general request to move an existant
   subtree back in time. */

dcl (dn, en)	     char (*) aligned;
dcl dtm		     bit (36);
dcl force		     bit (1);
dcl nlp		     ptr;
dcl pname		     char (168) aligned;
dcl ec		     fixed bin (35);
dcl (nlc, ndx, type)     fixed bin;
dcl names		     (1) char (32) aligned based (nlp);
    call ioa_$rsnnl ("^a^[>^]^a", pname, (0), dn, dn ^= ">", en);
    nlc = 0;
    ec = 0;
    call hc_backup_$retv_name_list (pname, retv_data_.areap, nlp, nlc, ec);
    if ec ^= 0 then do;
        call retv_report_$error_output (ec, myname, "Unable to list names of ^a",
	   pname);
        return;
      end;
    do ndx = 1 to nlc;
      ec = 0;
      call hc_backup_$retv_check (pname, names (ndx), type, dtm, ec);
      if ec ^= 0 & ec ^= error_table_$vtoce_connection_fail then
        call retv_report_$error_output (ec, myname, "Subtree check failed for ^a>^a",
	   pname, names (ndx));
      if ((ec = error_table_$vtoce_connection_fail) | force) & type ^= LINK then do;
	call submit_request (pname, names (ndx), type);
        end;
      if ec = 0 & type = DIR then
        call scan_sub_tree (pname, names (ndx), force, ec);
    end;
    free names in (based_area);
  end scan_sub_tree;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

submit_request: proc (dn, en, type);

/* This proc makes up a proxy request. A proxy request occurs when the retriever, during a subtree request,
   discovers something missing. The proxy request, while submitted by the retriever, preserves the requestor's
   access_class, validation level, etc. It differs from the normal request in that it does not have
   a specific request in the user's queue. */

dcl (dn, en)	     char (*) aligned;
dcl type		     fixed bin;
    unspec (local_retv_input) = "0"b;
    local_retv_input.request = retv_input.request;
    local_retv_input.dirname = dn;
    local_retv_input.ename = en;
    local_retv_input.user_ms_id = retv_input.user_ms_id;
    local_retv_input.access_class = retv_input.access_class;
    local_retv_input.level = retv_input.level;
    local_retv_input.q_num = retv_input.q_num;
    local_retv_input.requestor = retv_input.requestor;
    local_retv_input.proxy = "1"b;
    local_retv_input.submission_time = fixed (mseg_return_args.ms_id, 71);
    call message_segment_$add_index (retv_data_.qidx (retriever), addr (local_retv_input),
         size (retv_input) * 36, retv_ms_id, code);
    if code ^= 0 then call retv_report_$error_output (code, myname, "Proxy update error");
    else if retv_data_.long then call retv_report_$online_output (0,
	 myname, "Proxy submission of ^[directory^;segment^] ^a^[>^]^a", type = DIR, dn, (dn ^= ">"), en);
  end submit_request;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


delete_queue_message: proc (idx, msid);
dcl idx		     fixed bin;
dcl msid		     bit (72) aligned;

/* This proc deletes the specified message just read from the specified queue */

    call message_segment_$delete_index (retv_data_.qidx (idx), msid, code);
    if code ^= 0 then
      call retv_report_$error_output (code, myname, "^[Private^;User^] queue delete failed",
	 retriever = idx);
  end delete_queue_message;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

time_: proc (bin_time) returns (char (24));

/* This proc converts a binary time into a suitable prinable form and returns it. */

dcl bin_time	     fixed bin (71);
dcl time_string	     char (24);
    call date_time_ (bin_time, time_string);
    return (time_string);
  end time_;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

clean_it_up: proc;

/* This proc cleans up and frees whats ever left around */

    if requestp ^= null then free retv_request in (based_area);
    if inputp ^= null then free retv_input in (based_area);
    if tp (1) ^= null then do;
        call hcs_$truncate_seg (retv_data_.objectp, 0, ignore); /* clean up our 256K seg */
        call hcs_$set_max_length_seg (retv_data_.objectp, (sys_info$max_seg_size), ignore); /* be a good neighbour */
        call hcs_$truncate_seg (retv_data_.input_buffer_ptr, 0, ignore); /* clean up our 256K seg */
        call hcs_$set_max_length_seg (retv_data_.input_buffer_ptr, (sys_info$max_seg_size), ignore); /* be a good neighbour */
        call hcs_$truncate_seg (retv_data_.page_buffer_ptr, 0, ignore); /* clean up our 256K seg */
        call hcs_$set_max_length_seg (retv_data_.page_buffer_ptr, (sys_info$max_seg_size), ignore); /* be a good neighbour */

        call release_temp_segments_ (myname, tp, ignore);
      end;
    if retv_data_.error_iocbp ^= null then do;
        call iox_$close (retv_data_.error_iocbp, ignore);
        call iox_$detach_iocb (retv_data_.error_iocbp, ignore);
      end;
    if retv_data_.input_iocbp ^= null then do;
        call iox_$close (retv_data_.input_iocbp, ignore);
        call iox_$detach_iocb (retv_data_.input_iocbp, ignore);
      end;
    do nvolx = 1 to retv_data_.nvol;
      call hcs_$delentry_seg (retv_data_.rvcp (nvolx), ignore);
    end;
    do qx = 1 to hbound (retv_data_.qidx, 1);
      call message_segment_$close (retv_data_.qidx (qx), ignore);
    end;
    call hcs_$set_256K_switch (old_256K_switch, (""b), ignore);
    on linkage_error goto end_clean_it_up;
    call system_privilege_$ring1_priv_off (ignore);
    call system_privilege_$ipc_priv_off (ignore);
end_clean_it_up:
    recursive_invocation = "0"b;

  end clean_it_up;

%include retv_data_;
%include retv_request;
%include retv_input;
%include mseg_return_args;
%include retv_vol_control;
%include queue_msg_hdr;
%include query_info;
%include iox_dcls;

  end retriever;
