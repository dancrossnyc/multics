/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
/* ANALYZE_DEVICE_STAT_ - Procedure to analyze status from peripheral device.
   coded 12/1/74 by Noel I. Morris	*/
/*	Modified January 1976 by Larry Johnson to add rsnnl entry. */
/*	Modified 4/79 by R.J.C. Kissel to handle major status 0. */


/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */


/* format: style3,ind3,initlm3,dclind6,idind32 */
analyze_device_stat_:
   proc (name, tablep, stat, flags);			/* procedure to analyze device status */

dcl   name		        char (*),		/* device name */
      tablep		        ptr,		/* pointer to status interpretation table */
      stat		        bit (72) aligned,	/* IOM status */
      flags		        bit (18) aligned;	/* status information flags */

dcl   majstat		        bit (4) aligned,	/* major status */
      substat		        bit (6) aligned,	/* substatus */
      cstat		        bit (3) aligned,	/* central or channel status */
      imaj		        fixed bin (4),	/* major status as integer */
      i			        fixed bin,		/* iteration variable */
      message		        char (256) var,	/* status interpretation message */
      line		        char (60) aligned,	/* for calls to ioa_ */
      line_lth		        fixed bin,		/* length of line */
      srel		        bit (18) aligned,	/* rel pointer to substatus info block */
      sp			        ptr,		/* ITS pointer to substatus info block */
      mask		        bit (6) aligned,	/* mask for substatus */
      comp		        bit (6) aligned,	/* comparison bits for substatus */
      nnl_sw		        bit (1) init ("0"b),	/* set if entered thru rsnnl entry */
      print_flag		        bit (1) aligned;	/* flag indicating if line was printed */

dcl   1 stable		        (0:15) based (tablep) aligned,
						/* major status table */
      ( 2 offset		        bit (18),		/* offset of substatus information */
        2 count		        fixed bin (17)
        )			        unal;		/* count of recognizable substatuses */

dcl   1 sinfo		        based (sp) aligned,	/* substatus information block */
        2 maj		        char (24),		/* name of major status */
        2 sub		        (stable (imaj).count),/* substatus information */
	3 control		        char (6),		/* used to generate mask and comparison */
	3 flags		        bit (18),		/* action flags */
	3 desc		        char (32);		/* description of substatus */

dcl   com_err_		        entry options (variable),
      ioa_$rsnnl		        entry options (variable);

dcl   (addr, bin, bit, null, ptr, substr, translate)
			        builtin;

%include iom_stat;
%include status_flags;

      call rs (message, tablep, stat, flags);		/* Call to get string to print. */

      call com_err_ (0, name, "^/^a", message);		/* Print out the message. */

      return;

rsnnl:
   entry (mess, tablep, stat, flags);			/* entry to return string without tabs and newlines */

      nnl_sw = "1"b;				/* remember entry from here */

rs:
   entry (mess, tablep, stat, flags);			/* entry to return string */

dcl   mess		        char (*) var;	/* message is returned into this string */


      statp = addr (stat);				/* Get pointer to status info. */
      mess = "";					/* Initialize message string. */
      flags = "0"b;					/* Reset flag bits. */

      majstat = status.major;				/* Extract major status. */
      substat = status.sub;				/* And substatus. */
      imaj = bin (majstat, 4);			/* Get major status as integer. */

      if tablep = null
      then
         do;					/* If no status table. */
	  call ioa_$rsnnl ("Major status = ^o, substatus = ^2.3b", line, line_lth, imaj, substat);
	  call report (line);
	  flags = flags | report_flag | halt_flag;
	  return;
         end;

      srel = stable (imaj).offset;			/* Get offset of info for this major status. */

/* Only print major and sub status if they are non-zero, or if there is no other status to print. */

      if majstat | substat | ((status.central_stat | status.channel_stat | status.power) = "0"b)
      then
         do;
	  if srel
	  then
	     do;					/* If information exists ... */
	        sp = ptr (tablep, srel);		/* Generate pointer to substatus info. */
	        call report (sinfo.maj);		/* Report the major status. */

	        print_flag = "0"b;			/* Reset the flag. */
	        do i = 1 to stable (imaj).count;	/* Look through the substatuses. */
		 mask = bit (translate (sinfo.sub (i).control, "10", "0X"), 6);
						/* Make 1's out of 0's and 1's, 0's out of X's. */
		 comp = bit (translate (sinfo.sub (i).control, "0", "X"), 6);
						/* Make X's into 0's. */
		 if (substat & mask) = comp
		 then
		    do;				/* Did we get this status? */
		       print_flag = "1"b;		/* Turn on print flag. */
		       call report (sinfo.sub (i).desc);/* Report the substatus. */
		       flags = flags | sinfo.sub (i).flags;
						/* Return the flags. */
		       if flags & init_flag
		       then
			do;			/* If initiate bit should be checked ... */
			   if status.initiate
			   then /* And it is ON ... */
			        flags = flags | backup_flag;
			end;
		    end;				/* Indicate retry of previous operation. */
	        end;

	        if ^print_flag
	        then
		 do;				/* Be sure to print unrecognized substatus. */
		    call ioa_$rsnnl ("Substatus = ^2.3b", line, line_lth, substat);
		    call report (line);
		    flags = flags | report_flag | halt_flag;
		 end;
	     end;
	  else
	     do;					/* Unrecognized major status ... */
	        call ioa_$rsnnl ("Major status = ^o, substatus = ^2.3b", line, line_lth, imaj, substat);
	        call report (line);
	        flags = flags | report_flag | halt_flag;
	     end;
         end;

      if status.central_stat
      then
         do;					/* Check for IOM central status */
	  cstat = status.central_stat;		/* Extract the central status. */

	  if cstat = "001"b
	  then line = "LPW tally runout";
	  else if cstat = "010"b
	  then line = "2 sequential TDCW's";
	  else if cstat = "011"b
	  then line = "Boundary violation";
	  else if cstat = "101"b
	  then line = "IDCW in restricted mode";
	  else if cstat = "110"b
	  then line = "Character position/size discrepancy during list service";
	  else if cstat = "111"b
	  then line = "Parity error on I/O bus, data _f_r_o_m channel";

	  call report (line);			/* Print out the central status. */
	  flags = flags | report_flag | backup_flag | halt_flag;
         end;					/* Set appropriate flags. */

      if status.channel_stat
      then
         do;					/* Check for IOM channel status */
	  cstat = status.channel_stat;		/* Extract the channel status. */

	  if cstat = "001"b
	  then line = "Attempt to connect while busy";
	  else if cstat = "010"b
	  then line = "Illegal channel command in PCW";
	  else if cstat = "011"b
	  then line = "Incorrect DCW during list service";
	  else if cstat = "100"b
	  then line = "Incomplete instruction sequence";
	  else if cstat = "110"b
	  then line = "Parity error on peripheral interface";
	  else if cstat = "111"b
	  then line = "Parity error on I/O bus, data _t_o channel";

	  call report (line);			/* Print out the channel status. */
	  flags = flags | report_flag | backup_flag | halt_flag;
         end;					/* Set appropriate flags. */

      if status.power
      then
         do;					/* If peripheral absent or power off ... */
	  call report ("Device disconnected or power off");
	  flags = flags | report_flag | backup_flag | halt_flag;
         end;

      return;

report:
   proc (message);					/* internal proc to print error message */

dcl   message		        char (*) aligned;	/* error message */


      if message = ""
      then return;

      if ^nnl_sw
      then mess = mess || "	***** ";			/* Insert asterisks. */

      mess = mess || rtrim (message);			/* Add message to output line. */

      if ^nnl_sw
      then mess = mess || ".
";			/* Add period and newline. */
      else mess = mess || ". ";

   end report;

   end analyze_device_stat_;
