/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


prtdim_order: proc (sdb_ptr, request, orderp, iostatus);

/* PRTDIM_ORDER - This is the order call processor for the printer DIM.
   coded 10/29/74 by Noel I. Morris
   modified 3/15/77 by Noel I. Morris
   modified 9/77 by D. Vinograd to add the remote_printer_control_ entry
   modified 6/78 by J. C. Whitmore to add the get_error_count order.
   modified 83-10-21 by E. N. Kittlitz for eurc/urmpc partitioning.
*/


dcl  request char (*),				/* order request */
     a_iocbp ptr,					/* iocb ptr */
     iostatus bit (72) aligned;			/* IOS status bits */

dcl  nelemt fixed bin,				/* for calling ios_ write */
     iocbp ptr,					/* as it says */
     code fixed bin (35),				/* error code */
     a_code fixed bin (35),				/* error code parameter */
     entry fixed bin,				/* entry flag */
     i fixed bin;					/* iteration variable */

dcl  ios fixed bin static options (constant) init (1);	/* entry type */
dcl  iox fixed bin static options (constant) init (2);

dcl  NL char (1) static init ("
");

dcl  VT_or_FF char (2) static init ("");		/* "013" concatenated with "014" */

dcl  error_table_$bad_arg fixed bin (35) ext;
dcl  error_table_$no_operation fixed bin (35) ext;
dcl  error_table_$undefined_order_request fixed bin (35) ext;
dcl  error_table_$inconsistent fixed bin (35) ext;

dcl  ios_$write entry (char (*) aligned, ptr, fixed bin, fixed bin, fixed bin, bit (72) aligned),
     prtdim_write$runout entry (ptr, bit (72) aligned),
     prtdim_eurc_write$runout entry (ptr, bit (72) aligned),
     prtdim_write$prtdim_resetwrite entry (ptr, bit (72) aligned),
     prtdim_eurc_write$prtdim_resetwrite entry (ptr, bit (72) aligned),
     prtdim_changemode entry (ptr, char (*), char (*), bit (72) aligned),
     prtdim_changemode$remote_printer_modes_ entry (ptr, char (*), char (*), fixed bin (35)),
     prtdim_util$load_vfc entry (ptr, fixed bin (35)),
     prtdim_eurc_util$load_vfc entry (ptr, fixed bin (35)),
     init_printer_$reset entry (ptr);

dcl  iox_$control entry (ptr, char (*), ptr, fixed bin (35));
dcl  iox_$put_chars entry (ptr, ptr, fixed bin, fixed bin (35));

dcl (addr, divide, hbound, length, null, reverse, search, substr, unspec, verify) builtin;



% include prt_sdb;
% include prt_info;
% include prt_conv_info;
% include prt_order_info;
% include iocb;
% include remote_attach_data;


	entry = ios;
	iostatus = "0"b;				/* Clear status bits. */
	substr (iostatus, 41, 1) = "1"b;		/* Set transaction terminated bit. */

	pcip = addr (sdb.conv_info);			/* Get pointer to print conversion info. */
	goto common;

remote_printer_control_: entry (a_iocbp, request, orderp, a_code);

	entry = iox;
	a_code = 0;
	iocbp = a_iocbp;
	adp = iocbp -> iocb.attach_data_ptr;
	pcip = addr (ad.remote_pci);

common:

	if request = "inside_page" then		/* Space to top of inside page. */
	     call write_nl (2);

	else if request = "outside_page" then		/* Space to top of outside page */
	     call write_nl (4);

	else if request = "end_of_page" then		/* Position at end of page, below bottom label */
	     call write_nl (3);

	else if request = "page_labels" then do;	/* set page top and bottom labels */
	     if orderp = null () then do;		/* If null, reset labels. */
		pci.top_label_length,
		     pci.bot_label_length = 0;
	     end;

	     else if pci.overflow_off then do;		/* Cannot have labels with overflow off. */
		if entry = ios then
		     substr (iostatus, 1, 36) = unspec (error_table_$inconsistent);
		else a_code = error_table_$inconsistent;
	     end;

	     else do;				/* Set the labels. */
		pci.top_label_line = page_labels.top_label;
		call set_label (pci.top_label_line, pci.top_label_length);

		pci.bot_label_line = page_labels.bottom_label;
		call set_label (pci.bot_label_line, pci.bot_label_length);
	     end;
	end;

	else if request = "reset" then do;		/* Reset modes and counts. */
	     call init_printer_$reset (pcip);
	     if entry = ios then do;
		sdb.mode = "0"b;			/* Clear special printing modes. */
		sdb.stop_every = 0;			/* Reset page stop count. */
		sdb.chars_printed = 0;		/* reset the input char count */
	     end;
	     else do;
		ad.output_modes = "0"b;
		ad.stop_every = 0;
		ad.chars_printed = 0;
	     end;
	end;

	else if request = "get_count" then do;		/* Get lengths and counts. */
	     counts.line = pci.line;
	     counts.page_length = pci.page_length;
	     counts.lmarg = pci.lmarg;
	     counts.rmarg = pci.rmarg;
	     counts.line_count = pci.line_count;
	     counts.page_count = pci.page_count * pci.sheets_per_page;
	end;

	else if request = "get_position" then do;	/* give paper and file position data */
	     position_data.line_number = pci.line;	/* which line we are printing */
	     position_data.page_number = pci.page_count * pci.sheets_per_page; /* which  phys page number */
	     position_data.total_lines = pci.line_count;	/* lines printed since "reset" order */
	     if entry = ios then
		position_data.total_chars = sdb.chars_printed; /* input chars processed since "reset" order */
	     else position_data.total_chars = ad.chars_printed;
	end;

	else if request = "set_position" then do;	/* Set new position counters */
	     pci.line_count = position_data.total_lines;
	     pci.page_count = divide (position_data.page_number, pci.sheets_per_page, 17);
	     if entry = ios then
		sdb.chars_printed = position_data.total_chars;
	     else ad.chars_printed = position_data.total_chars;
	end;

	else if request = "channel_stops" then		/* Set logical channel stops. */
	     do i = 1 to hbound (pci.form_stops, 1);
	     pci.form_stops (i).lbits = "0"b || substr (channel_stops (i), 1, 8);
	     pci.form_stops (i).rbits = "1"b || substr (channel_stops (i), 9, 8);
	end;

	else if request = "paper_info" then do;		/* Set new physical paper characteristics. */
	     if paper_info.lines_per_inch ^= 6 &	/* Check for either 6 lpi or 8 lpi. */
	     paper_info.lines_per_inch ^= 8 then do;
bad_arg:		if entry = ios then
		     substr (iostatus, 1, 36) = unspec (error_table_$bad_arg);
		else a_code = error_table_$bad_arg;
		return;
	     end;
	     if paper_info.phys_page_length < 10 | paper_info.phys_page_length > 127 then go to bad_arg;
	     if paper_info.phys_line_length < 10 | paper_info.phys_line_length > 255 then go to bad_arg;

	     pci.phys_page_length = paper_info.phys_page_length;
	     pci.phys_line_length = paper_info.phys_line_length;
	     pci.lpi = paper_info.lines_per_inch;

	     if entry = ios then do;
		call prtdim_changemode (sdb_ptr, "", (""), iostatus); /* make modes conform */
		if sdb.flags.eurc then call prtdim_eurc_util$load_vfc (sdb_ptr, code);
		else call prtdim_util$load_vfc (sdb_ptr, code);
		if code ^= 0 then
		     substr (iostatus, 1, 36) = unspec (code);
	     end;
	     else do;				/* for the iox case */
		call prtdim_changemode$remote_printer_modes_ (a_iocbp, "", (""), a_code); /* make modes conform */
		a_code = error_table_$no_operation;
	     end;
	end;

	else if request = "runout" then do;		/* Flush remaining output from print buffers. */
	     if entry = ios then 
		if sdb.flags.eurc then call prtdim_eurc_write$runout (sdb_ptr, iostatus);
	          else call prtdim_write$runout (sdb_ptr, iostatus);
	     else a_code = error_table_$no_operation;
	end;

	else if request = "get_error_count" then do;
	     if entry = ios then
		ret_error_count = sdb.error_count;	/* only defined for printer dim */
	     else ret_error_count = 0;		/* no errors for iox */
	end;

	else if request = "resetwrite" then do;
	     if entry = ios then
		if sdb.flags.eurc then call prtdim_eurc_write$prtdim_resetwrite (sdb_ptr, iostatus);
	          else call prtdim_write$prtdim_resetwrite (sdb_ptr, iostatus);
	     else a_code = error_table_$no_operation;
	end;

	else do;
	     if entry = ios then
		substr (iostatus, 1, 36) = unspec (error_table_$undefined_order_request);
	     else a_code = error_table_$undefined_order_request;
	end;

	return;



write_nl:	proc (f);

dcl  f fixed bin;					/* function code */

	     pci.func = f;				/* Set correct function code. */
	     if entry = ios then
		call ios_$write (sdb.stream_name, addr (NL), 0, length (NL), nelemt, iostatus);
	     else call iox_$put_chars (iocbp, addr (NL), 1, a_code);
	     pci.func = 0;				/* Make sure function code reset. */

	     return;


	end write_nl;




set_label: proc (line, lth);

dcl  line char (136) aligned,				/* label line */
     lth fixed bin;					/* label length */


	     if line = "" then lth = 0;		/* If line is all blank, length is zero. */

	     else if search (line, VT_or_FF) ^= 0 then do; /* Do not allow VT or FF. */
		lth = 0;				/* Set length to zero. */
		if entry = ios then
		     substr (iostatus, 1, 36) = unspec (error_table_$bad_arg);
		else a_code = error_table_$bad_arg;
	     end;

	     else do;
		lth = 136 + 1 - verify (reverse (line), " ");
	     end;

	     return;


	end set_label;




     end prtdim_order;
