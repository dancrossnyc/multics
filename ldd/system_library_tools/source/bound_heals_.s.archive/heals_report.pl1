/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
/* heals_report is the command program for
   the generation of heals reports.  Calls are made to specific
   report generators depending upon the requested reports */
/* Coded by A. Downing March 1976,
   modified by A. Downing 10/76 for release mr5.0 */
/* Modified by A. Downing July 1977 for MR6 */

heals_report: hr: proc;
dcl  upper_case char (26) int static init
    ("ABCDEFGHIJKLMNOPQRSTUVWXYZ");
dcl  lower_case char (26) int static init
    ("abcdefghijklmnopqrstuvwxyz");
dcl  numbers char (10) int static init
    ("1234567890");
dcl  other_chars char (21) int static init
    (" ,.<>#;:*+-_/?!$%'()&");
dcl  hcs_$initiate entry (char (*), char (*), char (*),
     fixed bin (1), fixed bin (2), ptr, fixed bin (35));
dcl  heals_io_reports_ entry (ptr, fixed bin (35));
dcl  heals_cpu_reports_ entry (ptr, fixed bin (35));
dcl  heals_mos_edac_reports_ entry (ptr, fixed bin (35));
dcl  iox_$attach_ioname entry (char (*), ptr, char (*), fixed bin (35));
dcl  iox_$detach_iocb entry (ptr, fixed bin (35));
dcl  iox_$open entry (ptr, fixed bin, bit (1) aligned, fixed bin (35));
dcl  iox_$position entry (ptr, fixed bin, fixed bin (21), fixed bin (35));
dcl  iox_$read_record entry (ptr, ptr, fixed bin (21), fixed bin (21), fixed bin (35));
dcl  iox_$close entry (ptr, fixed bin (35));
dcl  expand_path_ entry (ptr, fixed bin, ptr, ptr, fixed bin (35));
dcl  delete_$path entry
    (char (*), char (*), bit (6), char (*), fixed bin (35));
dcl  get_pdir_ entry returns (char (168));
dcl  get_wdir_ entry returns (char (168));
dcl  command_query_ entry options (variable);
dcl (com_err_, ioa_) entry options (variable);
dcl  date_time_ entry (fixed bin (71), char (*));
dcl  clock_ entry returns (fixed bin (71));
dcl  convert_date_to_binary_ entry (char (*), fixed bin (71), fixed bin (35));
dcl  convert_date_to_binary_$relative entry (char (*), fixed bin (71), fixed bin (71), fixed bin (35));
dcl  cu_$arg_list_ptr entry returns (ptr);
dcl  cu_$arg_count entry returns (fixed bin);
dcl  report_file char (168) aligned init
    (before (get_wdir_ (), " ") || ">heals_reports");
dcl  buffer char (1024) aligned;
dcl  rec_len fixed bin (21);
dcl (ip, whoptr) ptr init (null ());
dcl  qip ptr;
dcl 1 query_info aligned,
    2 version fixed bin init (1),
    2 yes_or_no_sw bit (1) unal init ("1"b),		/* Require "yes" or "no" answer. */
    2 suppress_name_sw bit (1) unal init ("0"b),		/* Print name with question. */
    2 status_code fixed bin (35),			/* Set to code of error prompting question. */
    2 query_code fixed bin (35) init (0);
dcl  answer char (32) init ("");
dcl  i fixed bin;
dcl  code fixed bin (35);
dcl  log_path char (168) ext static aligned init (">system_control_1>heals_dir>heals_log");
dcl  error_table_$noentry ext static fixed bin (35);
dcl (error_table_$not_attached, error_table_$not_open) ext static fixed bin (35);
dcl  error_table_$not_closed ext static fixed bin (35);
dcl  error_table_$end_of_info ext static fixed bin (35);
dcl  error_table_$badopt ext static fixed bin (35);
dcl  error_table_$noarg ext static fixed bin (35);
dcl  one_day fixed bin (71);
dcl  io_data bit (1) unal defined heals_arg_info.info_selection pos (1);
dcl  mpc_data bit (1) unal defined heals_arg_info.info_selection pos (2);
dcl  cpu_data bit (1) unal defined heals_arg_info.info_selection pos (3);
dcl  mos_edac_data bit (1) unal defined heals_arg_info.info_selection pos (4);
dcl  sorted_io_data bit (1) unal defined heals_arg_info.info_selection pos (5);
dcl  disk_data bit (1) unal defined heals_arg_info.info_selection pos (6);
dcl  bulk_data bit (1) unal defined heals_arg_info.info_selection pos (7);
dcl  media_data bit (1) unal defined heals_arg_info.info_selection pos (8);
dcl (addr, before, null, verify) builtin;
dcl  cleanup condition;
dcl  record_quota_overflow condition;

	if cu_$arg_count () < 1 then do;
	  call com_err_ (error_table_$noarg, "heals_report",
	    "
Usage: heals_report REPORT_NAME -CONTROL_ARGS-");
	  return;
	end;

	code = 0;
	heals_message_p = null ();
	heals_state_p = null ();
	heals_message_p = addr (buffer);
	qip = addr (query_info);
	heals_arg_info.heals_log_path_name = log_path;
	i = index (reverse (heals_log_path_name), ">");
	i = length (heals_log_path_name) - i ;
	call hcs_$initiate
	  (substr (heals_log_path_name, 1, i), "heals_log_info", "", 0, 0, heals_state_p, code);
	if heals_state_p = null () then do;
	  call com_err_ (code, "heals_report", "could not initiate heals_log_info");
	  return;
	end;
	one_day = 24 * 60 * 60 * 1000000;		/* one day of micro-seconds */
	heals_arg_info.iocbp = null ();
	heals_arg_info.report_iocbp = null ();
	heals_arg_info.to_time = clock_ ();
	heals_arg_info.from_time = heals_arg_info.to_time - one_day;
	heals_arg_info.from_seq = 0;
	heals_arg_info.to_seq = heals_state.last_message_seq_num;
	heals_arg_info.info_selection = "0"b;		/* init off */
	err_nb = 0;
	report_name = "";
	call heals_arg_parser_ (cu_$arg_list_ptr (), cu_$arg_count (), code);
	if code = 0 then do;			/* try to generate a report */
	  call hcs_$initiate
	    (">sc1", "whotab", "", 0, 0, whoptr, code);
	  heals_arg_info.system_id =
	    before (whoptr -> whotab.sysid, " ");
	  call hcs_$initiate (">sc1", "installation_parms", "",
	    0, 0, ip, code);
	  heals_arg_info.installation_id =
	    before (ip -> installation_parms.installation_id, " ");
	  if verify (heals_arg_info.installation_id,
	  lower_case || upper_case || numbers || other_chars)
	  > 0 then
	    heals_arg_info.installation_id = "";
	  on cleanup call clean_up;
	  call iox_$attach_ioname
	    ("heals_report_stream", report_iocbp, "vfile_ " ||
	    before (report_file, " ") || " -extend", code);
	  if code ^= 0 then do;
	    call com_err_ (code, "heals_report", "could not attach to the report file.");
	    call clean_up;
	    return;
	  end;
	  else call iox_$open (report_iocbp, 2 /* stream_output */, "0"b, code);
	  if code ^= 0 then do;
	    call com_err_ (code, "heals_report", "could not open the report file.");
	    call clean_up;
	    return;
	  end;
	  call iox_$attach_ioname ("heals_io", heals_arg_info.iocbp,
	    "vfile_ " ||
	    before (heals_arg_info.heals_log_path_name, " "), code);
	  if code ^= 0 then do;
	    call com_err_ (code, "heals_report", "could not attach to ^a.",
	      heals_arg_info.heals_log_path_name);
	    call clean_up;
	    return;
	  end;
	  call iox_$open (heals_arg_info.iocbp, 8 /* keyed_seq in */, "0"b, code);
	  if code ^= 0 then do;
	    call com_err_ (code, "heals_report",
	      "unable to open ^a.", heals_arg_info.heals_log_path_name);
	    call clean_up;
	    return;
	  end;
pos_at_beginning:
	  if ^(io_data | sorted_io_data | media_data | cpu_data | mos_edac_data)
	  then go to done;				/* reports all generated */
	  on record_quota_overflow begin;
	    call com_err_ (0, "heals_report",
	      "There is insufficient quota to produce the specified reports.");
	    call clean_up;
	    go to done;
	  end;
	  if heals_arg_info.iocbp -> iocb.attach_descrip_ptr ^= null () then
	    if heals_arg_info.iocbp -> iocb.open_descrip_ptr = null () then do;
	      call iox_$open (heals_arg_info.iocbp, 8 /* keyed seq in */, "0"b, 0);
	      if code ^= 0 then
	        if code ^= error_table_$not_attached &
	        code ^= error_table_$not_closed then go to pos_error;
	        else;
	      else;
	    end;
	  call iox_$position (heals_arg_info.iocbp, -1, 0, code);
	  call iox_$read_record (heals_arg_info.iocbp,
	    heals_message_p, length (buffer), rec_len, code);
	  if code ^= 0 then do;
pos_error:    call com_err_ (code, "heals_report",
	      "error while positioning to proper record in heals_log.");
	    call clean_up;
	    return;
	  end;
	  do while ((heals_message.time < heals_arg_info.from_time) &
	      (heals_message.time < heals_arg_info.to_time));
	    call iox_$read_record (heals_arg_info.iocbp,
	      heals_message_p, length (buffer), rec_len, code);
	    if code ^= 0 then
	      if code ^= error_table_$end_of_info then go to pos_error;
	      else go to at_proper_record;
	    else;
	  end;					/* end of while loop */
at_proper_record:
	  if heals_message.time ^= heals_arg_info.from_time then do;
	    call iox_$position (heals_arg_info.iocbp, 0, -1, code);
	    if code ^= 0 then go to pos_error;
	  end;
	  if io_data then do;
	    report_name = "io_error";
	    call heals_io_reports_ (addr (heals_arg_info), code);
	    if code ^= 0 then do;			/* something went wrong */
	      call com_err_
	        (code, "heals_report", "abnormal termination of ^a report generator.", report_name);
	      if heals_arg_info.err_nb > 0 then
	        call com_err_ (0, "heals_report",
	        "heals internal error #^d was returned by the ^a report generator,
contact Multics heals programming team for instructions.",
	        heals_arg_info.err_nb, report_name);
	      call clean_up;
	      return;
	    end;
	    if heals_arg_info.err_nb = 0 then
	      call ioa_
	      ("^v(^4xio_error report generated^/^)^v(^4xsorted_io_error report generated^/^)^v(^4xmedia_error report generated^/^)",
	      bin (io_data, 1, 0), bin (sorted_io_data, 1, 0), bin (media_data, 1, 0));
	    else call ioa_ ("^a report's may be incomplete.", report_name);
	    io_data, sorted_io_data, media_data = "0"b;
	    go to pos_at_beginning;
	  end;
	  if sorted_io_data then do;
	    report_name = "sorted_io_error";
	    call heals_io_reports_ (addr (heals_arg_info), code);
	    if code ^= 0 then do;			/* something went wrong */
	      call com_err_
	        (code, "heals_report", "abnormal termination of ^a report generator.", report_name);
	      if heals_arg_info.err_nb > 0 then
	        call com_err_ (0, "heals_report",
	        "heals internal error #^d was returned by the ^a report generator,
contact Multics heals programming team for instructions.",
	        heals_arg_info.err_nb, report_name);
	      call clean_up;
	      return;
	    end;
	    if heals_arg_info.err_nb = 0 then
	      call ioa_
	      ("^v(^4xio_error report generated^/^)^v(^4xsorted_io_error report generated^/^)^v(^4xmedia_error report generated^/^)",
	      bin (io_data, 1, 0), bin (sorted_io_data, 1, 0), bin (media_data, 1, 0));
	    else call ioa_ ("^a report may be incomplete.", report_name);
	    sorted_io_data, media_data = "0"b;		/* report generated */
	    go to pos_at_beginning;
	  end;
	  if media_data then do;
	    report_name = "media_error";
	    call heals_io_reports_ (addr (heals_arg_info), code);
	    if code ^= 0 then do;			/* something went wrong */
	      call com_err_
	        (code, "heals_report", "abnormal termination of ^a report generator.", report_name);
	      if heals_arg_info.err_nb > 0 then
	        call com_err_ (0, "heals_report",
	        "heals internal error #^d was returned by the ^a report generator,
contact Multics heals programming team for instructions.",
	        heals_arg_info.err_nb, report_name);
	      call clean_up;
	      return;
	    end;
	    if heals_arg_info.err_nb = 0 then
	      call ioa_
	      ("^v(^4xio_error report generated^/^)^v(^4xsorted_io_error report generated^/^)^v(^4xmedia_error report generated^/^)",
	      bin (io_data, 1, 0), bin (sorted_io_data, 1, 0), bin (media_data, 1, 0));
	    else call ioa_ ("^a report may be incomplete.", report_name);
	    media_data = "0"b;			/* report generated */
	    go to pos_at_beginning;
	  end;
	  if cpu_data then do;
	    report_name = "cpu_error";
	    call heals_cpu_reports_ (addr (heals_arg_info), code);
	    if code ^= 0 then do;			/* something went wrong */
	      call com_err_
	        (code, "heals_report", "abnormal termination of ^a report generator.", report_name);
	      if heals_arg_info.err_nb > 0 then
	        call com_err_ (0, "heals_report",
	        "heals internal error #^d was returned by the ^a report generator,
contact Multics heals programming team for instructions.",
	        heals_arg_info.err_nb, report_name);
	      call clean_up;
	      return;
	    end;
	    cpu_data = "0"b;			/* report generated */
	    if heals_arg_info.err_nb = 0 then
	      call ioa_ ("^4x^a report generated.", report_name);
	    else call ioa_ ("^a report may be incomplete.", report_name);
	    go to pos_at_beginning;
	  end;
	  if mos_edac_data then do;
	    report_name = "mos_edac_error";
	    call heals_mos_edac_reports_ (addr (heals_arg_info), code);
	    if code ^= 0 then do;			/* something went wrong */
	      call com_err_
	        (code, "heals_report", "abnormal termination of ^a report generator.", report_name);
	      if heals_arg_info.err_nb > 0 then
	        call com_err_ (0, "heals_report",
	        "heals internal error #^d was returned by the ^a report generator,
contact Multics heals programming team for instructions.",
	        heals_arg_info.err_nb, report_name);
	      call clean_up;
	      return;
	    end;
	    mos_edac_data = "0"b;			/* report generated */
	    if heals_arg_info.err_nb = 0 then
	      call ioa_ ("^4x^a report generated.", report_name);
	    else call ioa_ ("^a report may be incomplete.", report_name);
	    go to pos_at_beginning;
	  end;
	  if heals_arg_info.err_nb > 0 then do;		/* heals private error */
	    call com_err_ (0, "heals_report",
	      "heals internal error #^d was returned by the ^a report generator,
contact Multics heals programming team for instructions.",
	      heals_arg_info.err_nb, report_name);
	    go to pos_at_beginning;
	  end;
else done:
	  if heals_arg_info.iocbp ^= null () then do;
	    call iox_$close (heals_arg_info.iocbp, code);
	    call iox_$detach_iocb (heals_arg_info.iocbp, code);
	    heals_arg_info.iocbp = null ();
	  end;
	  if heals_arg_info.report_iocbp ^= null () then do;
	    call iox_$close (heals_arg_info.report_iocbp, code);
	    call iox_$detach_iocb (heals_arg_info.report_iocbp, code);
	    heals_arg_info.report_iocbp = null ();
	  end;
	end;
	else do;
	  call com_err_ (0, "heals_report",
	    "no reports generated");
	  return;
	end;					/* end of argument parsing error */
	return;

/*  */
heals_arg_parser_: proc (ap, ac, code);
dcl  ap ptr;					/* ptr to arg list */
dcl  ac fixed bin;					/* arg count */
dcl  code fixed bin (35);				/* error code */
dcl  from bit (1) init ("0"b);
dcl  arg char (arg_len) based (argp);
dcl  argp ptr;					/* ptr to specific arg */
dcl  arg_len fixed bin;				/* length of specific arg */
dcl  cu_$arg_ptr_rel entry (fixed bin, ptr, fixed bin, fixed bin (35), ptr);
dcl  i fixed bin;

	  i = 1;
	  call cu_$arg_ptr_rel (1, argp, arg_len, code, ap);
	  if code ^= 0 then do;
	    call com_err_ (code, "heals_arg_parser_", "could not obtain report name.");
	    return;
	  end;
	  do while (code = 0 & substr (arg, 1, 1) ^= "-");
	    if arg = "io_error" then io_data = "1"b;
	    else if arg = "sorted_io_error" then sorted_io_data = "1"b;
	    else if arg = "media_error" | arg = "media_io_error" then
	      media_data = "1"b;
	    else if arg = "cpu_error" then cpu_data = "1"b;
	    else if arg = "mos_edac_error" then mos_edac_data = "1"b;
	    else if arg = "disk_error" then disk_data = "1"b;
	    else if arg = "bulk_error" then bulk_data = "1"b;
	    else do;
	      call com_err_ (0, "heals_arg_parser_", "report ^a is not available.", arg);
	      code = error_table_$badopt;
	      return;
	    end;
	    i = i + 1;
	    call cu_$arg_ptr_rel (i, argp, arg_len, code, ap);
	  end;
	  if i > 1 then code = 0;
	  do while (i <= ac);
	    call cu_$arg_ptr_rel (i, argp, arg_len, code, ap);
	    if code ^= 0 then do;
	      call com_err_ (code, "heals_arg_parser_", "error while parsing arguments.");
	      return;
	    end;
	    i = i + 1;				/* increment arg index */
	    if arg = "-from" | arg = "-fm" then do;	/* from time */
	      call cu_$arg_ptr_rel (i, argp, arg_len, code, ap);
	      if code ^= 0 then do;
	        call com_err_ (code, "heals_arg_parser_", "could not obtain beginning time.");
	        return;
	      end;
	      i = i + 1;
	      call convert_date_to_binary_ (arg, heals_arg_info.from_time, code);
	      if code ^= 0 then do;
	        call com_err_ (code, "heals_arg_parser_", "error while obtaining beginning time.");
	        return;
	      end;
	      from = "1"b;
	    end;
	    else if arg = "-from_seq" | arg = "-fm_seq" then do; /* from seq */
	      call cu_$arg_ptr_rel (i, argp, arg_len, code, ap);
	      if code ^= 0 then do;
	        call com_err_ (code, "heals_arg_parser_", "could not obtain beginning seq.");
	        return;
	      end;
	      heals_arg_info.from_seq = convert (from_seq, arg);
	      i = i + 1;
	      from = "1"b;
	    end;
	    else if arg = "-to" then do;		/* to time */
	      call cu_$arg_ptr_rel (i, argp, arg_len, code, ap);
	      if code ^= 0 then do;
	        call com_err_ (code, "heals_arg_parser_", "could not obtain termination time.");
	        return;
	      end;
	      i = i + 1;
	      call convert_date_to_binary_ (arg, heals_arg_info.to_time, code);
	      if code ^= 0 then do;
	        call com_err_ (code, "heals_arg_parser_", "error while obtaining termination time.");
	        return;
	      end;
	    end;
	    else if arg = "-to_seq" then do;		/* to seq */
	      call cu_$arg_ptr_rel (i, argp, arg_len, code, ap);
	      if code ^= 0 then do;
	        call com_err_ (code, "heals_arg_parser_", "could not obtain beginning seq.");
	        return;
	      end;
	      heals_arg_info.to_seq = convert (to_seq, arg);
	      i = i + 1;
	    end;
	    else if arg = "-dp" | arg = "-dprint" then do;
						/* for now, do not implement this one */
	      code = error_table_$badopt;
	      call com_err_ (code, "heals_arg_parser_", "^a", arg);
	      return;
	    end;
	    else if arg = "-of" | arg = "-output_file" then do;
	      call cu_$arg_ptr_rel (i, argp, arg_len, code, ap);
	      if code ^= 0 then do;
	        call com_err_ (code, "heals_arg_parser_", "could not obtain report file.");
	        return;
	      end;
	      i = i + 1;
	      call expand_path_ (addr (arg), (arg_len), addr (report_file), null (), code);
	      if code ^= 0 then do;
	        call com_err_ ("heals_arg_partser_", "^a", arg);
	        return;
	      end;
	    end;
	    else if arg = "-a" | arg = "-all" then do;
	      io_data, media_data, sorted_io_data, cpu_data,
	        mos_edac_data = "1"b;
	    end;
	    else do;				/* not a valid control arg */
	      code = error_table_$badopt ;
	      call com_err_ (code, "heals_arg_parser_", "^a", arg);
	      return;
	    end;
	  end;
	  if ^from then
	    heals_arg_info.from_time = heals_arg_info.to_time - one_day;
	  return;
	end heals_arg_parser_;
clean_up:	proc;
	  if report_iocbp ^= null () then do;
	    call iox_$close (report_iocbp, code);
	    call iox_$detach_iocb (report_iocbp, code);
	    report_iocbp = null ();
	  end;
	  if heals_arg_info.iocbp ^= null () then do;
	    call iox_$close (heals_arg_info.iocbp, code);
	    call iox_$detach_iocb (heals_arg_info.iocbp, code);
	    heals_arg_info.iocbp = null ();
	  end;
	  call command_query_ (qip, answer, "heals_report",
	    "The report file may be incomplete due to premature termination,
do you wish to delete it?");
	  if substr (answer, 1, 3) = "yes" then do;
	    call delete_$path (reverse (after (reverse (report_file), ">")),
	      reverse (before (reverse (report_file), ">")),
	      "111111"b, "heals_report", code);
	    if code ^= 0 then
	      if code ^= error_table_$noentry then
	        call com_err_ (code, "heals_report", "Did not delete heals_reports.");
	      else;
	    else;
	  end;
	  return;
	end clean_up;
						/* 
						   include files */
%include heals_arg_info;
%include installation_parms;
%include whotab;
%include heals_message;
%include heals_state;
%include iocb;
        end heals_report;
