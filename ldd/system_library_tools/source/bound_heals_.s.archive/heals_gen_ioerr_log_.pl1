/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
heals_gen_ioerr_log_: proc (heals_arg_info_p, heals_ior_args_p, r_code);

/* ******************************************************************************
   *								*
   *  Comments:							*
   *								*
   *	Written by RH Morrison  Nov. 19, 1976	 			*
   *	Last modified by A. Downing 01/14/77
   *								*
   ****************************************************************************** */
/* FF */
/* ********	DECLARATIONS	******** */

/* ****	PROCEDURE ARGUMENTS   **** */
dcl  heals_arg_info_p ptr;
dcl  heals_ior_args_p ptr;
dcl  r_code fixed bin (35);

/* ****	EXTERNAL STATIC	**** */
dcl  error_table_$end_of_info ext static fixed bin (35);

/* ****	ENTRIES		**** */
dcl  ioa_ entry options (variable);
dcl  com_err_ entry options (variable);
dcl  clock_ entry returns (fixed bin (71));
dcl  date_time_ entry (fixed bin (71), char (*));
dcl  cv_oct_ entry (char (*)) returns (fixed bin (35));
dcl  ioa_$rsnnl entry options (variable);
dcl  iox_$attach_ioname entry (char (*), ptr, char (*), fixed bin (35));
dcl  iox_$close entry (ptr, fixed bin (35));
dcl  iox_$detach_iocb entry (ptr, fixed bin (35));
dcl  iox_$open entry (ptr, fixed bin, bit (1) aligned, fixed bin (35));
dcl  iox_$read_record entry (ptr, ptr, fixed bin (21), fixed bin (21), fixed bin (35));
dcl  iox_$write_record entry (ptr, ptr, fixed bin (21), fixed bin (35));
dcl  vfile_$vfile_attach entry (ptr, (*) char (*) varying, bit (1) aligned, fixed bin (35));

/* ****	POINTERS		**** */
dcl  flags_p ptr init (null);
dcl  work_p1 ptr init (null);
dcl  outsw_p ptr init (null);
dcl  sortsw_p ptr init (null);
dcl  inbuf_p ptr init (null);
dcl  sort_desc_p (3) ptr init (null, null, null);
dcl  tape_nfo_p ptr init (null);
dcl  sort_data_p ptr init (null);
dcl  syserr_nfo_p ptr init (null);
dcl  dev_data_p ptr init (null);
						/*   Arguments  */
dcl  insw_p ptr init (null);


/* pointers declared in include files:
*/

/* ****	CHARACTER STRING VARIABLES    **** */
dcl  rprt_from_time char (16);
dcl  rprt_to_time char (16);
dcl  work_time char (16);
dcl  ascii_status char (12);
dcl  record_name char (13);
dcl  work_ch1 char (1);
dcl  inbuf char (inbuf_len) aligned;
dcl  ioi_buf char (outbuf_len) aligned;
dcl  bad_rec_buf char (outbuf_len) aligned;
dcl  disk_buf char (outbuf_len) aligned;
dcl  misc_buf char (outbuf_len) aligned;
dcl  pic_w pic "99";
dcl  bad_name char (7);
dcl  dev_nm_chk char (4);
dcl  dev_data_space char (1540);
dcl  n_a char (3) init ("N/A");
dcl  date_time char (16);
dcl  date char (8);
dcl  time char (6);

/*   Arguments  */
dcl  whoami char (20) init ("heals_gen_ioerr_log_");
dcl  version_date char (8) init ("12/15/76");
dcl  vfile_info (1) char (168) varying;

/* ****	ARITHMETIC VARIABLES    **** */
dcl  dev_data_stopper fixed bin based (dev_data_p);
dcl  inbuf_len fixed bin (21) int static init (1024);
dcl  outbuf_len fixed bin (21) int static init (1024);
dcl  stream_in fixed bin init (1);
dcl  stream_out fixed bin init (2);
dcl  seq_in fixed bin init (4);
dcl  seq_out fixed bin init (5);
dcl  status_nb fixed bin (35);
dcl  i_code fixed bin (35);
dcl  nb_ioerr_recs fixed bin;
dcl  ioerr_rec_min_len fixed bin (21);
dcl  dev_data_size fixed bin;
dcl (i, j, k, l) fixed bin;
dcl  ndx fixed bin (24);
dcl  offs_ndx fixed bin;
dcl  ss fixed bin;
dcl  page_nb fixed bin;
dcl  iom_nb_chk fixed bin (3);
dcl  ch_nb_chk fixed bin (6);
dcl  dev_nb_chk fixed bin (6);
dcl  fake_data_size fixed bin;
dcl  save_size fixed bin;

/*   Arguments  */
dcl  code fixed bin (35);
dcl  inrec_len fixed bin (21);
dcl  outrec_len fixed bin (21);

dcl  version_nb fixed bin init (1);
dcl  clock_time fixed bin (71);

/* ****	BIT STRING VARIABLES    **** */
/*   Working  */
dcl  unused bit (1) aligned init ("0"b);
dcl  flags_word bit (36) aligned init ("0"b);
dcl  found bit (1) aligned;
dcl  rec_hdr bit (180) based;

/* ****	ARRAY VARIABLES		**** */
dcl  ntrpt_nm_list (0:7) char (1) aligned init (
     "", "o", "x", "t", "x", "m", "x", "s");

dcl 1 tape_nfo_ar (1:max_iom_nb_a) aligned,
    2 tape_entry (0:max_tape_nb_a) like tape_nfo;

dcl  fake_data (2) bit (36) aligned init (
    (36)"0"b,
    (36)"0"b);


/* ***	BASED VARIABLES   *** */
dcl 1 flags aligned based (flags_p),
    (2 trace bit (1),
    2 db bit (1),
    2 io_error bit (1),
    2 sorted_io_error bit (1),
    2 hdrs bit (1),
    2 msg bit (1),
    2 disk_hold bit (1),
    2 disk_addr bit (1)
     ) unal;

dcl 1 tape_nfo aligned based (tape_nfo_p),
    (2 rsn char (7),
    2 dens char (4),
    2 tracks char (2),
    2 ring char (2))unal;

dcl 1 dev_data aligned based (dev_data_p),
    2 dev_name char (4) aligned,
    2 used bit (1) aligned,
    2 ch_nmbr fixed bin (6) aligned,
    (2 fill1 bit (11),
    2 dev_nmbr fixed bin (6),
    2 fill2 bit (14),
    2 iom_nmbr fixed bin (3)) unal,
    2 saved_data (2) bit (36) aligned;

dcl 1 ch_nfo_ar (1:max_iom_nb_a) aligned based (ch_nfo_ar_p),
    2 ch_entry (0:max_ch_nb_a) like ch_nfo;

/*   Arguments  */
dcl 1 arg_info like heals_arg_info aligned based (heals_arg_info_p);

/* ****	MISC. DECLARATIONS		**** */
dcl (addr, addrel, index, null, search, size, substr, unspec, verify) builtin;
dcl  cleanup condition;
dcl  conversion condition;

/* FF */
/* ****	INCLUDE FILES	**** */
%include heals_arg_info;
%include heals_io_report_args;
%include heals_ioerr_rec;
%include heals_message;
%include io_syserr_msg;
%include iom_stat;
%include iocb;
/* *******	END OF DECLARATIONS	******* */
/* FF */
/* ********	PROCEDURE		******** */

/* ****	Procedure Initialization	**** */

	on cleanup call clean_up;

/*  Init returns.  */
	r_code = 0;

/*  Init pointers.  */
	flags_p = addr (flags_word);
	insw_p = arg_info.iocbp;
	inbuf_p = addr (inbuf);
	outsw_p = ioerr_log_sw_p;
	heals_message_p = addr (inbuf);

/*  Init procedure constants.  */
	ioerr_rec_min_len = size (ioerr_rec) * 4;	/* ioerr_rec is output record */
	dev_data_size = size (dev_data);		/* size of entry for saving binary data */
	fake_data_size = size (fake_data);		/* fake data is used when no real data exists */

/*  Init all else.  */
	code = 0;
	arg_info.err_nb = 0;
	call date_time_ (arg_info.from_time, rprt_from_time); /* args to heals_report */
	call date_time_ (arg_info.to_time, rprt_to_time);
	nb_ioerr_recs = 0;				/* init output record count */

	ioerr_rec_p = addr (bad_rec_buf);		/* init ioerr_rec buffers */
	ioerr_rec.data_size = 0;
	rprt_flags = "0"b;
	ioerr_rec_p = addr (disk_buf);
	ioerr_rec.data_size = 0;
	rprt_flags = "0"b;
	ioerr_rec_p = addr (ioi_buf);
	ioerr_rec.data_size = 0;
	rprt_flags = "0"b;
	ioerr_rec_p = addr (misc_buf);
	ioerr_rec.data_size = 0;
	rprt_flags = "0"b;

	dev_data_p = addr (dev_data_space);		/* init saved data array */
	dev_data_stopper = -1;			/* set stopper in first entry */
	dev_data.used = "0"b;			/* set first entry unused */
	dev_data_p = addrel (dev_data_p, 64*dev_data_size); /* bump pointer to end of dev_data_space */
	dev_data_stopper = -1;			/* set stopper at end of dev_data_space */

	do i = 1 to max_iom_nb_a;			/* init tape_nfo_ar */
	  do j = 0 to max_tape_nb_a;
	    tape_nfo_p = addr (tape_nfo_ar.tape_entry (i, j));
	    tape_nfo = ".";				/* init data */
	  end;
	end;


/* ****	End Procedure Initialization    **** */

/*  Run information.  */
	clock_time = clock_ ();
	call date_time_ (clock_time, date_time);
	date = substr (date_time, 1, 8);
	time = substr (date_time, 11, 6);
	if flags.trace
	| ior_flags.trace
	then call ioa_ ("^a run info: date ^a, time ^a, version ^d of ^a.",
	  whoami, date, time, version_nb, version_date);

/* ****	Build ioerr_rec and write it to heals_ioerr_log.  **** */

/*  Open heals_ioerr_log file (output).  */
	call iox_$open (outsw_p, seq_out, unused, code);
	if code ^= 0 then call proc_err (13);

	on conversion begin;			/* report error on output report */
	  ioerr_rec_p = addr (bad_rec_buf);		/* assign output buffer */
	  msg_len = 72;
	  call ioa_$rsnnl (
	    "HEALS: conversion condition raised while processing this ^a record.",
	    ioerr_rec.msg, i, record_name);
	  msg_len = i;
	  flags.msg = "1"b;
	  rprt_flags.msg = "1"b;
	  call write_ioerr_rec;
	  go to next_log_rec;			/* keep going */
	end;

/*  Read first heals_log record.  */
	call iox_$read_record (insw_p, inbuf_p, inbuf_len, inrec_len, code);
	if code ^= 0
	then if code = error_table_$end_of_info
	  then goto ineof_1;
	  else call proc_err (17);
	goto rec_id;

/* **	Record processing loop.	** */
next_log_rec:
	call iox_$read_record (insw_p, inbuf_p, inbuf_len, inrec_len, code);
	if code ^= 0
	then if code = error_table_$end_of_info		/* normal loop exit, case 1 */
	  then goto ineof_1;
	  else call proc_err (14);

/*  Identify record type.  */
rec_id:
	record_name = "next";			/* reset record name */
	if heals_message.time > arg_info.to_time then goto ineof_1; /* exit, case 2 */
	if substr (heals_message.text, 1, 4) = "RCP:" then goto rcp_rec;
	if substr (heals_message.text, 1, 8) = "ioi_mask" then goto ioi_rec;
	if substr (heals_message.text, 1, 7) = "ocdcm_:" then goto ioi_rec;
	if substr (heals_message.text, 1, 12) = "disk_control" then goto disk_rec;
	if substr (heals_message.text, 1, 4) = "bulk" then goto bulk_rec;
	if substr (heals_message.text, 1, 6) = "dn355:" then goto dn355_rec;
	goto next_log_rec;				/* no record of interest */

/* ****	Process "RCP": records.   * *** */
rcp_rec:
	record_name = "RCP:";
	iom_nb_chk = 1;				/* arbitrary since not included in RCP: records */
	if index (heals_message.text, " tap") > 0 then
	  go to tape_recs;
	goto next_log_rec;				/* all other RCP: records */

tape_recs:
	offs_ndx = index (heals_message.text, " tap") + 6;	/* get  tape number from text */
	dev_nb_chk = bin (substr (heals_message.text, offs_ndx, 2), 6, 0);
	if dev_nb_chk < 0 | dev_nb_chk > max_tape_nb_a	/* within tape_nfo_ar bounds */
	then do; bad_name = "device";			/* nope */
	  goto bad_rcp_rec;
	end;
	tape_nfo_p = addr (tape_nfo_ar.tape_entry (iom_nb_chk, dev_nb_chk)); /* set entry pointer */

	if index (heals_message.text, "Attached tap") ^= 0 then goto attach_rec;
	if index (heals_message.text, "Note (tap") ^= 0 then goto note_rec;
	if index (heals_message.text, "Mount Reel") ^= 0 then goto mount_rec;
	if index (heals_message.text, "Remount Reel") ^= 0 then goto mount_rec;
	goto next_log_rec;				/* all other tape records */

attach_rec:
	tape_nfo = "?";				/* overwrite old values */
	goto next_log_rec;

note_rec:
	ndx = index (heals_message.text, "den=");	/* determine density */
	if ndx ^= 0
	then do; work_ch1 = substr (heals_message.text, ndx + 7, 1);
	  i = verify (work_ch1, "0123456789");
	  if i = 0
	  then tape_nfo.dens = substr (heals_message.text, ndx + 4, 4);
	  else tape_nfo.dens = substr (heals_message.text, ndx + 4, 3);
	end;
	else tape_nfo.dens = "dflt";			/* density not specified */

	if index (heals_message.text, "7track") ^= 0	/* determine number of tracks */
	then tape_nfo.tracks = " 7";
	else if index (heals_message.text, "9track") ^= 0
	then tape_nfo.tracks = " 9";
	else tape_nfo.tracks = "df";			/* tracks not specified */
	goto next_log_rec;

mount_rec:
	if index (heals_message.text, "without") ^= 0	/* determine if write ring */
	then tape_nfo.ring = "no";
	else if index (heals_message.text, "with") ^= 0
	then tape_nfo.ring = "ys";
	else tape_nfo.ring = "df";			/* ring not specified */

	ndx = index (heals_message.text, "Reel") + 5;	/* tape serial number or name */
	offs_ndx = index (substr (heals_message.text, ndx), " ");
	if offs_ndx ^> 1
	then do; bad_name = "text";			/* something is wrong */
	  goto bad_rcp_rec;
	end;
	if offs_ndx > 8
	then tape_nfo.rsn = substr (heals_message.text, ndx, 7);
	else tape_nfo.rsn = substr (heals_message.text, ndx, offs_ndx - 1);

	if tape_nfo.dens = "?" then tape_nfo.dens = "dflt"; /* if no Note recored */
	if tape_nfo.tracks = "?" then tape_nfo.tracks = "df"; /* ditto */
	goto next_log_rec;

bad_rcp_rec:
	ioerr_rec_p = addr (bad_rec_buf);
	ioerr_rec.data_size = 0;			/* force use of fake data */
	call load_sort_data;
	dev_nm_chk = dev_nm;
	call get_iom_ch_nb;
	dev_nb = dev_nb_chk;
	goto bad_rec;


/* ****	Process "ioi_interrupt" records.	**** */
ioi_rec:
	record_name = "ioi_";
	io_msgp = addr (heals_message.data);		/* records have binary data */
	call convert_channame_kludge (io_msg.channel, iom_nb_chk, ch_nb_chk);
	if iom_nb_chk < 1 | iom_nb_chk > max_iom_nb_a	/* within bounds */
	then do; bad_name = "iom";			/* nope */
	  dev_nm_chk = "????";			/* fake it */
	  goto bad_ioi_rec;
	end;
	if ch_nb_chk < 0 | ch_nb_chk > max_ch_nb_a
	then do; bad_name = "channel";
	  dev_nm_chk = "????";
	  goto bad_ioi_rec;
	end;
	if io_msg.time_out
	then dev_nm_chk = "chnl";
	else do;
	  ch_nfo_p = addr (ch_nfo_ar.ch_entry (iom_nb_chk, ch_nb_chk));
	  if heals_message.data_size = 3
	  then dev_nm_chk = devname;
	  else if ch_nfo.i_set
	  then dev_nm_chk = ch_nfo.dev_nam;
	  else do; bad_name = "ch_unkn";		/* usually if system was reconfigured */
	    dev_nm_chk = "????";			/* ^ between time of error and time of HEALS run */
	    goto bad_ioi_rec;
	  end;
	end;
	if substr (dev_nm_chk, 1, 3) = "tap" then do;
	  dev_nb_chk = bin (io_msg.device, 6, 0);
	  if dev_nb_chk < 0 | dev_nb_chk > max_tape_nb_a
	  then do; bad_name = "device";
	    goto bad_ioi_rec;
	  end;
	end;
	ioerr_rec_p = addr (ioi_buf);			/* looks good - assign output buffer */
	call move_syserr_nfo;			/* move info from heals_log record to ioerr_rec */
	call load_sort_data;			/* fill in ioerr_rec.sort_data from binary data */

/* Specific device info.  */

/* Channel timeout. */
	if io_msg.time_out
	then do; dev_nm = "chnl";			/* as good a name as any */
	  dev_model = 9999;				/* dummy model number */
	  ioerr_rec.tape_disk_nfo = "";		/* null tape,disk info fields */
	  tapno_diskad = "timeout";			/* use this column to say what happened */
	  goto write_ioi_rec;
	end;

/* All other devices. */
	dev_nm = dev_nm_chk;
	if ch_nfo.i_set
	then dev_model = ch_nfo.model;
	else dev_model = 9999;
	if substr (dev_nm, 1, 3) = "tap" then
	  goto tape_err;
	if substr (dev_nm, 1, 3) = "prt" then goto ur_err;
	if substr (dev_nm, 1, 3) = "rdr" then goto ur_err;
	if substr (dev_nm, 1, 3) = "pun" then goto ur_err;
	if substr (dev_nm, 1, 3) = "dsk" then goto disk_err;
	if substr (dev_nm, 1, 3) = "opc" then goto ur_err;
	bad_name = "dv_unkn";			/* just in case */
	dev_nm_chk = dev_nm;			/* report what it was */
	goto bad_ioi_rec;

tape_err:
	tape_nfo_p = addr (tape_nfo_ar.tape_entry (iom_nb, dev_nb));
	tapno_diskad = tape_nfo.rsn;			/* retrieve data from RCP: records */
	dens_cyl = tape_nfo.dens;
	tracks_sector = tape_nfo.tracks;
	ring_head = tape_nfo.ring;
	goto write_ioi_rec;

disk_err:
	ioerr_rec.tape_disk_nfo = "";			/* null until more info is logged */
	tapno_diskad = "disk IO";			/* note it is user IO, not disk_control: */
	goto write_ioi_rec;

ur_err:
	ioerr_rec.tape_disk_nfo = "";
	tapno_diskad = n_a;				/* say it is not applicable */
	goto write_ioi_rec;

write_ioi_rec:
	rprt_flags.ioerr = "1"b;
	call write_ioerr_rec;
	goto next_log_rec;

bad_ioi_rec:
	ioerr_rec_p = addr (bad_rec_buf);
	ioerr_rec.data_size = heals_message.data_size;	/* use binary data in ioi_interrupt records */
	call load_sort_data;
	goto bad_rec;

/* ****	Process "disk_control:" records.   * *** */
disk_rec:
	record_name = "disk_control:";
	ioerr_rec_p = addr (disk_buf);
	if index (heals_message.text, "Lost IOM") ^= 0 then goto iom_rec;
	if index (heals_message.text, "Unex") ^= 0 then goto iom_rec;
	if index (heals_message.text, "(iom") ^= 0 then goto disk_stat_rtrn;
	if index (heals_message.text, "detail") ^= 0 then goto disk_detail;
	if index (heals_message.text, "sect=") ^= 0 then goto disk_addr;
	goto next_log_rec;

iom_rec:
	ndx = index (heals_message.text, "iom");
	iom_nb_chk = bin (substr (heals_message.text, ndx + 4, 1)); /* get iom number */
	ndx = index (heals_message.text, "dsk");
	dev_nm_chk = substr (heals_message.text, ndx, 4); /* get device name */
	offs_ndx = index (substr (heals_message.text, ndx + 5), " ");
	if offs_ndx > 1
	then dev_nb_chk = bin (substr (heals_message.text, ndx + 5, offs_ndx - 1)); /* device number */
	else do; dev_nb_chk = 0;			/* something is wrong */
	  goto bad_disk_rec;
	end;
	ndx = index (heals_message.text, "chan");
	offs_ndx = index (substr (heals_message.text, ndx +5), ")");
	if offs_ndx = 2
	then ch_nb_chk = bin (substr (heals_message.text, ndx+5, 1)); /* single digit number */
	else if offs_ndx = 3
	then ch_nb_chk = bin (substr (heals_message.text, ndx+6, 1)) +
	  bin (substr (heals_message.text, ndx+5, 1))*8;	/* change from octal to decimal */
	else goto bad_disk_rec;
	if flags.disk_hold				/* if holding data in buffer */
	then do; call save_data;			/* then save it */
	  flags.disk_hold = "0"b;			/* reset flag */
	end;
	call move_syserr_nfo;			/* build ioerr_rec */
	call load_sort_data;
	iom_nb = iom_nb_chk;
	ch_nb = ch_nb_chk;
	dev_nb = dev_nb_chk;
	dev_nm = dev_nm_chk;
	tape_disk_nfo = "";
	msg_len = 38;
	ndx = index (heals_message.text, "Lost");
	if ndx ^= 0 then ioerr_rec.msg = substr (heals_message.text, ndx, 18);
	else do; ndx = index (heals_message.text, "IOM");
	  if ndx ^= 0 then ioerr_rec.msg = substr (heals_message.text, ndx, 35);
	  else ioerr_rec.msg = "";
	end;
	flags.msg = "1"b;
	rprt_flags.iom_rec = "1"b;			/* set format flag */
	goto write_disk_rec;			/* write the ioerr_rec record */

disk_stat_rtrn:
	if flags.disk_hold
	then call save_data;			/* save the data being held */
	else flags.disk_hold = "1"b;			/* hold the new data */
	call move_syserr_nfo;			/* build ioerr_rec */
	call load_sort_data;
	if heals_message.data_size = 3
	then dev_nm = devname;
	else do; ndx = index (heals_message.text, "dsk");
	  dev_nm = substr (heals_message.text, ndx, 4);
	end;
	if index (heals_message.text, "sect=") = 0
	then tape_disk_nfo = "";
	else do;
	  flags.disk_hold = "0"b;
	  ndx = index (heals_message.text, "sect=");	/* get continuous address */
	  offs_ndx = index (substr (heals_message.text, ndx), ",");
	  if offs_ndx ^> 6 then goto bad_disk_rec;
	  tapno_diskad = substr (heals_message.text, ndx + 5, offs_ndx - 6); /* number in ascii */
	  do while (search (tapno_diskad, " ") > 0);
	    tapno_diskad = "0" || tapno_diskad;		/* Eliminate blanks */
	  end;
	  i = bin (substr (heals_message.text, ndx + 5, offs_ndx - 6)); /* number in binary */

	  ndx = index (heals_message.text, "cyl=");	/* get cylinder number */
	  offs_ndx = index (substr (heals_message.text, ndx), ",");
	  if offs_ndx ^> 5 then goto bad_disk_rec;
	  dens_cyl = substr (heals_message.text, ndx +4, offs_ndx - 5);
	  j = bin (substr (heals_message.text, ndx + 4, offs_ndx - 5));

	  ndx = index (heals_message.text, "hd=");	/* get head number */
	  offs_ndx = index (substr (heals_message.text, ndx), ",");
	  if offs_ndx ^> 4 then goto bad_disk_rec;
	  ring_head = substr (heals_message.text, ndx +3, offs_ndx -4);
	  k = bin (substr (heals_message.text, ndx + 3, offs_ndx -4));

	  l = i - j*760 - k*40;			/* get sector number */
	  pic_w = l;
	  tracks_sector = pic_w;
	end;

	if index (heals_message.text, "detail") = 0
	then rprt_flags.ioerr = "1"b;			/* set the format flag */
	else do;
	  ndx = index (heals_message.text, "status:") + 8; /* get extended status text */
	  msg_len = text_len - ndx +12;
	  ioerr_rec.msg = "extended: (" || substr (heals_message.text, ndx, text_len-ndx) || ")";
						/* reformat it */
	  flags.msg = "1"b;				/* ioerr_rec contains a message */
	  rprt_flags.diskerr = "1"b;			/* report line format */
	end;

	goto write_disk_rec;

disk_detail:
	ndx = index (heals_message.text, "dsk");
	dev_nm_chk = substr (heals_message.text, ndx, 4);
	offs_ndx = index (substr (heals_message.text, ndx + 5), " ");
	if offs_ndx > 1
	then dev_nb_chk = bin (substr (heals_message.text, ndx + 5, offs_ndx - 1));
	else do; dev_nb_chk = 0;			/* something is wrong */
	  goto bad_disk_rec;
	end;
	call move_syserr_nfo;			/* does not change dev_nb, dev_nm, or binary data */
	ioerr_rec.data_size = save_size;		/* restore previous size */
	if dev_nm ^= dev_nm_chk | dev_nb ^= dev_nb_chk | dev_cmnd = "000000"b
	then do;					/* data in buffer not for this device */
	  if flags.disk_hold then call save_data;	/* save the binary data */
	  call retrieve_data;
	  if i_code = 0 then dev_data.used = "0"b;	/* reset so that space can be re-used */
	  call load_sort_data;
	  if i_code ^= 0				/* fake data was used */
	  then do; call get_iom_ch_nb;
	    dev_nb = dev_nb_chk;			/* overwrite fake_data */
	  end;
	  dev_nm = dev_nm_chk;
	end;
	flags.disk_hold = "0"b;			/* reset flag */
	ndx = index (heals_message.text, "status:") + 8;	/* get extended status text */
	msg_len = text_len - ndx +12;
	ioerr_rec.msg = "extended: (" || substr (heals_message.text, ndx, text_len-ndx) || ")";
						/* reformat it */
	flags.msg = "1"b;				/* ioerr_rec contains a message */
	rprt_flags.ext_stat = "1"b;			/* report line format */
	goto write_disk_rec;

disk_addr:
	ndx = index (heals_message.text, "dsk");
	dev_nm_chk = substr (heals_message.text, ndx, 4);
	offs_ndx = index (substr (heals_message.text, ndx + 5), " ");
	if offs_ndx > 1
	then dev_nb_chk = bin (substr (heals_message.text, ndx + 5, offs_ndx - 1));
	else do; dev_nb_chk = 0;			/* something is wrong */
	  goto bad_disk_rec;
	end;
	call move_syserr_nfo;			/* does not change dev_nb, dev_nm, or binary data */
	ioerr_rec.data_size = save_size;		/* restore previous size */
	if dev_nm ^= dev_nm_chk | dev_nb ^= dev_nb_chk | dev_cmnd = "000000"b
	then do;					/* data in buffer not for this device */
	  if flags.disk_hold
	  then do; flags.disk_hold = "0"b;
	    call save_data;
	  end;
	  call retrieve_data;
	  call load_sort_data;
	  if i_code ^= 0				/* fake data was used */
	  then do; call get_iom_ch_nb;
	    dev_nb = dev_nb_chk;			/* overwrite fake_data */
	  end;
	  dev_nm = dev_nm_chk;
	end;
	ndx = index (heals_message.text, "sect=");	/* get continuous address */
	offs_ndx = index (substr (heals_message.text, ndx), ",");
	if offs_ndx ^> 6 then goto bad_disk_rec;
	tapno_diskad = substr (heals_message.text, ndx + 5, offs_ndx - 6);
	do while (search (tapno_diskad, " ") > 0);
	  tapno_diskad = "0" || tapno_diskad;		/* Eliminate blanks */
	end;
	i = bin (substr (heals_message.text, ndx + 5, offs_ndx - 6));

	ndx = index (heals_message.text, "cyl=");	/* get cylinder number */
	offs_ndx = index (substr (heals_message.text, ndx), ",");
	if offs_ndx ^> 5 then goto bad_disk_rec;
	dens_cyl = substr (heals_message.text, ndx +4, offs_ndx - 5);
	j = bin (substr (heals_message.text, ndx + 4, offs_ndx - 5));

	ndx = index (heals_message.text, "hd=");	/* get head number */
	offs_ndx = index (substr (heals_message.text, ndx), ",");
	if offs_ndx ^> 4 then goto bad_disk_rec;
	ring_head = substr (heals_message.text, ndx +3, offs_ndx -4);
	k = bin (substr (heals_message.text, ndx + 3, offs_ndx -4));

	l = i - j*760 - k*40;			/* get sector number */
	pic_w = l;
	tracks_sector = pic_w;
	rprt_flags.disk_addr = "1"b;			/* report line format */
	goto write_disk_rec;

write_disk_rec:
	call write_ioerr_rec;
	goto next_log_rec;

bad_disk_rec:
	ioerr_rec_p = addr (bad_rec_buf);
	bad_name = "text";
	ioerr_rec.data_size = 0;			/* force fake data */
	call load_sort_data;
	call get_iom_ch_nb;
	goto bad_rec;

/* ****	Process miscellaneous record types.	* *** */

bulk_rec:						/* not an IO error, but nowhere else to put it */
	record_name = "bulk";
	ioerr_rec_p = addr (misc_buf);		/* assign output buffer */
	call move_syserr_nfo;
	call load_sort_data;
	dev_nb = bulk_port;				/* port number is  used for device number */
	dev_nm = "bulk";
	ioerr_rec.msg_len = heals_message.text_len;
	ioerr_rec.msg = heals_message.text;		/* print the syserr_log text */
	flags.msg = "1"b;
	rprt_flags.bulk = "1"b;
	call write_ioerr_rec;
	goto next_log_rec;

dn355_rec:
	if index (heals_message.text, "status") = 0 then goto next_log_rec;
	record_name = "dn355";
	ioerr_rec_p = addr (misc_buf);
	call move_syserr_nfo;
	ndx = index (heals_message.text, ":");
	dev_nm = "355" || substr (heals_message.text, ndx +6, 1);
	ioerr_rec.data_size = 2;
	ioerr_rec.data = fake_data;
	ndx = index (heals_message.text, "status");
	ascii_status = substr (heals_message.text, ndx +7, 6)
	  || substr (heals_message.text, ndx +14, 6);
	status_nb = cv_oct_ (ascii_status);
	ioerr_rec.data (2) = unspec (status_nb);
	call load_sort_data;
	dev_nm_chk = dev_nm;
	call get_iom_ch_nb;
	dev_nb = 1;
	ioerr_rec.tape_disk_nfo = "";
	tapno_diskad = n_a;
	rprt_flags.ioerr = "1"b;
	call write_ioerr_rec;
	goto next_log_rec;

bad_rec:
	call move_syserr_nfo;			/* build ioerr_rec */
	if ioerr_rec.data_size = 0
	then ioerr_rec.data_size = save_size;		/* restore previous size */
	dev_nm = dev_nm_chk;
	msg_len = 38;
	if bad_name = "text"			/* something wrong in extracting from text */
	then call ioa_$rsnnl (
	  "HEALS: error in extracting from text",
	  ioerr_rec.msg, i);
	else if bad_name = "ch_unkn" | bad_name = "dv_unkn" /* probably config change */
	then do; if bad_name = "ch_unkn"
	  then bad_name = "channel";
	  else bad_name = "device";
	  call ioa_$rsnnl (
	    "HEALS: ^a not in config_table.",
	    ioerr_rec.msg, i, bad_name);
	end;
	else call ioa_$rsnnl (
	  "HEALS: ^a number is out of range.",
	  ioerr_rec.msg, i, bad_name);		/* out of array bounds */
	msg_len = i;
	flags.msg = "1"b;
	rprt_flags.bad_rec = "1"b;
	call write_ioerr_rec;
	goto next_log_rec;

ineof_1:						/* end of file on heals_log */
	revert conversion;
	if nb_ioerr_recs = 0 then do; ior_flags.no_recs = "1"b; /* possibly there are no error recs */
	end;
	call iox_$close (ioerr_log_sw_p, code);
	if code ^= 0 then call proc_err (7);

/*  Writing of heals_ioerr_log file completed.  */

/* FF  */


	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* The following procedure is a no-no.  Ideally, there would be a system procedure to do	*/
	/* what it does, or heals should just use the string provided in io_msg.  What it does	*/
	/* is take a string and convert it to iom number and channel number.  If the string is	*/
	/* unconvertible, it sets these values to -1.  It is up to the caller to detect this	*/
	/* problem.								*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

convert_channame_kludge: proc (chanid, iom, chan);

   dcl chanid char (8) aligned;
   dcl iom fixed bin (3);
   dcl chan fixed bin (6);

     iom = index ("ABCD", substr (chanid, 1, 1));
     if iom < 1 then goto bad_name;
     if verify (rtrim (substr (chanid, 2)), "0123456789") ^= 0 then goto bad_name;
     chan = binary (substr (chanid, 2), 7);
     return;

bad_name:
     iom, chan = -1;				/* assume failure */
     return;

     end convert_channame_kludge;

write_ioerr_rec: proc;
	  if initiate				/* initiate interrupt */
	  then do;				/* get rid of flags */
	    if tapno_diskad = "?" then tapno_diskad = "";
	    if ring_head = "?" then ring_head = "";
	    if dens_cyl = "?" then dens_cyl = "";
	    if tracks_sector = "?" then tracks_sector = "";
	  end;

	  nb_ioerr_recs = nb_ioerr_recs + 1;		/* keep count of records written */
	  outrec_len = ioerr_rec_min_len + ioerr_rec.data_size * 4; /* account for data size */
	  if flags.msg then outrec_len = outrec_len + msg_len; /* account for message length */
	  call iox_$write_record (outsw_p, ioerr_rec_p, outrec_len, code);
	  if code ^= 0 then call proc_err (15);
	  flags.msg = "0"b;				/* reset flags */
	  rprt_flags = "0"b;
	  return;
	end write_ioerr_rec;


	return;

move_syserr_nfo: proc;
	  syserr_nfo_p = addr (ioerr_rec.syserr_nfo);	/* set pointer into current buffer */
	  save_size = ioerr_rec.data_size;		/* save the data size in order to reload it */
	  syserr_nfo_p -> rec_hdr = heals_message_p -> rec_hdr; /* move data from heals_log record */
	  ioerr_rec.msg_len = 0;			/* usually no message in ioerr_rec */
	  if ioerr_rec.data_size ^= 0			/* now equal to heals_message.data_size */
	  then ioerr_rec.data = heals_message.data;	/* move the new data */

	  call date_time_ ((heals_message.time), work_time); /* convert syserr_log time */
	  sort_date = substr (work_time, 1, 8);		/* fill in ioerr_rec.sort_rec */
	  log_time = substr (work_time, 11, 6);
	  return;
	end move_syserr_nfo;

load_sort_data: proc;
	  i_code = 0;
	  if ioerr_rec.data_size = 0			/* if no data */
	  then do; ioerr_rec.data_size = fake_data_size;	/* then fake it */
	    ioerr_rec.data = fake_data;
	    i_code = 1;				/* fake data used  */
	  end;

	  io_msgp = addr (ioerr_rec.data);		/* fill in ioerr_rec.sort_rec */
	  statp = addr (io_msg.status);
	  call convert_channame_kludge (io_msg.channel, iom_nb_chk, ch_nb_chk);
	  iom_nb = iom_nb_chk;
	  ch_nb = ch_nb_chk;
	  dev_nb = bin (io_msg.device);
	  dev_cmnd = io_msg.command;
	  ss = bin (io_msg.level);
	  ntrpt_nm = ntrpt_nm_list (ss);

	  power_off = power;
	  maj_st = "00"b || major;
	  sub_st = sub;
	  ntrpt_no = initiate;			/* initiate interrupt */
	  if initiate then ntrpt_nm = "i";
	  iom_st = channel_stat || central_stat;
	  rec_cnt_res = rcount;
	  return;
	end load_sort_data;

get_iom_ch_nb: proc;				/* get iom and channel number for device name */
	  i_code = 0;
	  found = "0"b;
	  do i = 1 to max_iom_nb_a while (^found);
	    do j = 0 to max_ch_nb_a while (^found);
	      if ch_nfo_ar.ch_entry.dev_nam (i, j) = dev_nm_chk
	      then do;
	        iom_nb = i;
	        ch_nb = j;
	        found = "1"b;
	      end;
	    end;
	  end;

	  if ^found then i_code = 1;			/* did not find entry for device name */
	  return;
	end get_iom_ch_nb;

save_data: proc;					/* save ioerr_rec data for future use */
	  i_code = 0;
	  found = "0"b;
	  if ioerr_rec.data_size = 0			/* should not happen */
	  then do; i_code = 1;
	    return;
	  end;
	  if ioerr_rec.data_size ^= 2 then ioerr_rec.data_size = 2;

/* Search for entry by device address to overwrite unused old data. */
	  dev_data_p = addr (dev_data_space);
	  do while (dev_data_stopper ^= -1 & ^found);
	    if ch_nb = ch_nmbr
	    then if dev_nb = dev_nmbr
	      then if iom_nb = iom_nmbr
	        then do;				/* matched with old entry */
		saved_data = ioerr_rec.data;
		dev_name = dev_nm;
		dev_data.used = "1"b;
		found = "1"b;
	        end;
	    if ^found then dev_data_p = addrel (dev_data_p, dev_data_size); /* to next entry */
	  end;

/* Search for unused entry. */
	  if ^found then do;
	    dev_data_p = addr (dev_data_space);
	    i = 0;				/* initialize count */
	    do while (dev_data_stopper ^= -1 & ^found);
	      i = i +1;				/* count number of entries */
	      if ^dev_data.used then found = "1"b;;	/* found one */
	      if ^found then dev_data_p = addrel (dev_data_p, dev_data_size); /* to next entry */
	    end;					/* didn't find one */
	  end;

	  if ^found then if i <= 64			/* do not go beyond assigned space */
	    then do;
	      work_p1 = addrel (dev_data_p, dev_data_size); /* set stopper in next entry */
	      work_p1 -> dev_data_stopper = -1;
	      found = "1"b;
	    end;
	    else i_code = 1;			/* data not saved  */

	  if found then do;				/* unused or new entry */
	    ch_nmbr = ch_nb;
	    dev_nmbr = dev_nb;
	    iom_nmbr = iom_nb;
	    dev_name = dev_nm;
	    saved_data = ioerr_rec.data;
	    dev_data.used = "1"b;
	  end;
	  return;
	end save_data;

retrieve_data: proc;				/* retrive previously saved data */
	  i_code = 0;
	  dev_data_p = addr (dev_data_space);		/* initialize pointer */
	  found = "0"b;
	  do while (dev_data_stopper ^= -1 & ^found);
	    if dev_nm_chk = dev_name			/* search by device name and number */
	    then if dev_nb_chk = dev_nmbr
	      then do;
	        iom_nb = iom_nmbr;			/* move info to ioerr_rec */
	        ch_nb = ch_nmbr;
	        ioerr_rec.data_size = 2;
	        ioerr_rec.data = saved_data;
	        found = "1"b;
	      end;
	    if ^found then dev_data_p = addrel (dev_data_p, dev_data_size); /* to next entry */
	  end;
	  if ^found then do; i_code = 1;		/* no entry found */
	    ioerr_rec.data_size = 0;			/* set data size to 0 as a flag */
	  end;
	  return;
	end retrieve_data;

/* FF */
proc_err:	proc (proc_err_nb);
dcl  proc_err_nb fixed bin;
	  r_code = code;
	  call com_err_ (code, whoami, "Procedure error number = ^d.", proc_err_nb);
	  call clean_up;
	  goto err_return;
	end proc_err;

clean_up:	proc;
	  if sortsw_p ^= null ()
	  then do; if sortsw_p -> iocb.open_descrip_ptr ^= null ()
	    then call sortsw_p -> iocb.close (sortsw_p, code);
	    if sortsw_p -> iocb.attach_descrip_ptr ^= null ()
	    then call sortsw_p -> iocb.detach_iocb (sortsw_p, code);
	  end;
	  return;
	end clean_up;

err_return: return;


        end heals_gen_ioerr_log_;
