/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
heals_scan_config_: proc (heals_ior_args_p, r_code);

/* ******************************************************************************
   *								*
   *  Comments:							*
   *								*
   *	Written by RH Morrison  Nov. 19, 1976	 			*
   *	Last modified by C. Hornig, October 1982
   *								*
   ****************************************************************************** */

/* FF */
/* ********	DECLARATIONS	******** */

/* ****	PROCEDURE ARGUMENTS   **** */
dcl  heals_ior_args_p ptr;
dcl  r_code fixed bin (35);


/* ****	EXTERNAL STATIC	**** */
dcl  config_deck$ ext;

/* ****	ENTRIES		**** */
dcl  ioa_ entry options (variable);
dcl  clock_ entry returns (fixed bin (71));
dcl  date_time_ entry (fixed bin (71), char (*));

/* ****	POINTERS		**** */
dcl  ch_data_p ptr;					/* Pointer to channel data */
dcl  config_deck_p ptr;				/* Pointer to config deck */
dcl  flags_p ptr init (null);

/* pointers declared elsewhere:
   ior_flags_p
   ior_parms_p
   ior_avars_p
   ch_nfo_p
*/


/* ****	CHARACTER STRING VARIABLES    **** */
dcl  date_time char (16);
dcl  date char (8);
dcl  time char (6);

/*  Arguments  */
dcl  whoami char (18) init ("heals_scan_config_");
dcl  version_date char (8) init ("12/15/76");

/* ****	ARITHMETIC VARIABLES    **** */
dcl  code fixed bin (35);
dcl  deck_stopper fixed bin based (config_deck_p);	/* flag at end of deck */
dcl  ch_data_stop fixed bin based (ch_data_p);		/* flag at end of channel data */
dcl  nb_ch fixed bin (6);
dcl  clock_time fixed bin (71);
dcl (i, j) fixed bin;
dcl  bulk_port fixed bin;

/*  Arguments  */
dcl  version_nb fixed bin init (1);

/* ****	BIT STRING VARIABLES    **** */
dcl  flags_word bit (36) aligned;

/* ****	ARRAY VARIABLES		**** */
dcl  tag_ar (0:8) char (1) init ("", "a", "b", "c", "d", "e", "f", "g", "h");

/* ****	BASED VARIABLES   **** */
dcl 1 flags aligned based (flags_p),
    (2 trace bit (1),
    2 db bit (1),
    2 fill bit (1)
     ) unal;

dcl 1 ch_nfo_ar (1:max_iom_nb_a) aligned based (ch_nfo_ar_p),
    2 ch_entry (0:max_ch_nb_a) like ch_nfo;

/*  Declarations of config deck cards.  */
dcl 1 prph aligned based (config_deck_p),		/* A prph card */
    2 word char (4),				/* The word "prph" */
    2 name char (4),				/* Name of device */
    2 iom fixed bin (3),				/* Iom number */
    2 chan fixed bin (6),				/* Channel number */
    2 model fixed bin,				/* Model number */
    2 nchan fixed bin (6);				/* Number of channels available */

dcl 1 dsk_prph aligned based (config_deck_p),		/* A disk subsystem prph card */
    2 word char (4),
    2 name char (4),
    2 iom fixed bin (3),
    2 chan fixed bin (6),
    2 nchan fixed bin (6),
    2 model fixed bin;

dcl 1 fnp aligned based (config_deck_p),		/* A d355 card */
    2 word char (4),
    2 tag fixed bin,
    2 chan fixed bin (6),
    2 iom fixed bin (3);

dcl 1 bulk_card aligned based (config_deck_p),		/* A bulk store card */
    2 word char (4),
    2 frec fixed bin,
    2 nrec fixed bin,
    2 port fixed bin,
    2 int0 fixed bin;

dcl 1 chan_card aligned based (config_deck_p),		/* A chnl card */
    2 word char (4),
    2 name char (4),
    2 ch_entry like ch_data;

dcl 1 ch_data aligned based (ch_data_p),		/* channel data on a chnl card */
    2 iom fixed bin (3),
    2 chan fixed bin (6),
    2 nchan fixed bin (6);

/* ****	MISC. DECLARATIONS		**** */

dcl (addr, addrel, null, substr) builtin;
dcl  cleanup condition;

/* FF */
/* ****	INCLUDE FILES	**** */
%include heals_io_report_args;
/* ****	END OF DECLARATIONS   **** */
/* FF */
/* ********	PROCEDURE		******** */

/* ****	Procedure Initialization	**** */

	on cleanup call clean_up;

/*  Init returns.  */
	r_code = 0;

/*  Init pointers.  */
	flags_p = addr (flags_word);

/*  Init procedure constants.  */

/* Init control flags.  */
	flags_word = "0"b;

/*  Init all else.  */
	code = 0;

	do i = 1 to max_iom_nb_a;			/* init ch_nfo_ar */
	     do j = 0 to max_ch_nb_a;
		ch_nfo_ar.ch_entry.i_set (i, j) = "0"b; /* if used, set to 1 by scan_config */
	     end;
	end;


/* ****	End Procedure Initialization    **** */

/* Run information.  */
	clock_time = clock_ ();
	call date_time_ (clock_time, date_time);
	date = substr (date_time, 1, 8);
	time = substr (date_time, 11, 6);
	if flags.trace
	| ior_flags.trace
	then call ioa_ ("^a run info: date ^a, time ^a, version ^d of ^a.",
	     whoami, date, time, version_nb, version_date);

/*  Scan the config deck and put peripheral info in ch_nfo_ar.  */

	config_deck_p = addr (config_deck$);		/* Start in beginning */
	do while (deck_stopper ^= -1);		/* And scan til end */
	     if prph.word = "prph"
	     then do; ch_nfo_p = addr (ch_nfo_ar.ch_entry (prph.iom, prph.chan)); /* set pointer to array entry */
		ch_nfo.i_set = "1"b;		/* mark entry as initialized */
		ch_nfo.dev_nam = prph.name;		/* fill in values from config_deck */
		ch_nfo.lchan = prph.chan;
		ch_nfo.uchan = prph.chan;
		if substr (prph.name, 1, 3) = "tap" |
		substr (prph.name, 1, 3) = "dsk" /* multiple channels */ then do;
		     nb_ch = dsk_prph.nchan;
		     ch_nfo.uchan = ch_nfo.lchan + nb_ch -1;
		     ch_nfo.model = dsk_prph.model;
		     if nb_ch >1			/* copy data to other channels */
		     then do i = 1 to nb_ch-1;
			ch_nfo_ar.ch_entry (prph.iom, prph.chan+i) = ch_nfo_ar.ch_entry (prph.iom, prph.chan);
		     end;
		end;
		else ch_nfo.model = prph.model;
		if ch_nfo.model > 9999 then ch_nfo.model = 9999; /* dummy model number */
	     end;
	     else if chan_card.word = "chnl"
	     then do; ch_data_p = addrel (config_deck_p, 2);
		do while (ch_data_stop ^= -1);
		     ch_nfo_p = addr (ch_nfo_ar.ch_entry (ch_data.iom, ch_data.chan));
		     ch_nfo.i_set = "1"b;
		     ch_nfo.dev_nam = chan_card.name;
		     ch_nfo.model = 9999;
		     ch_nfo.lchan = ch_data.chan;
		     ch_nfo.uchan = ch_data.chan + ch_data.nchan -1;
		     if ch_data.nchan > 1
		     then do i = 1 to ch_data.nchan -1;
			ch_nfo_ar.ch_entry (ch_data.iom, ch_data.chan + i)
			     = ch_nfo_ar.ch_entry (ch_data.iom, ch_data.chan);
		     end;
		     ch_data_p = addrel (ch_data_p, 3);
		end;
	     end;
	     else if fnp.word = "d355"		/* datanet */
	     then do; ch_nfo_p = addr (ch_nfo_ar.ch_entry (fnp.iom, fnp.chan));
		ch_nfo.i_set = "1"b;
		if fnp.tag < 0 | fnp.tag > 8 then fnp.tag = 0;
		ch_nfo.dev_nam = "355" || tag_ar (fnp.tag); /* use character tag */
		ch_nfo.lchan = fnp.chan;
		ch_nfo.uchan = fnp.chan;
		ch_nfo.model = 9999;
	     end;
	     else if bulk_card.word = "bulk" then bulk_port = bulk_card.port;

	     config_deck_p = addrel (config_deck_p, 16);	/* To next card */
	end;
	return;

/* FF  */
clean_up:	proc;
	     return;
	end clean_up;

err_return: return;


     end heals_scan_config_;
