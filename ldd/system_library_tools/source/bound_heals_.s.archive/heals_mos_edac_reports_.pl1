/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(87-10-21,Martinson), approve(87-10-21,MCR7751),
     audit(87-11-20,Fawcett), install(87-11-30,MR12.2-1006):
     Fix size condition error in heals_report mos_edac_error.
                                                   END HISTORY COMMENTS */


/* heals_mos_edac_reports_ produces the edac error
   report using edit_mos_rscr_ for formating purposes.
   Coded by A. Downing July 1976. */
/* Modified 12/26/76 by A. Downing to change error header. */
/* Modified Feb. 1979 by A. Downing for
   several bug fixes and code cleaning for MR7.0 */

heals_mos_edac_reports_: proc (datap, code);
%include heals_arg_info;
dcl  datap ptr;
dcl 1 arg_info like heals_arg_info aligned based (datap);
dcl  code fixed bin (35);
dcl  act_len fixed bin (21);
dcl  error_table_$end_of_info ext static fixed bin (35);
dcl  error_rate pic "zzzzz9v.99" aligned init (5.0);
dcl  descrip char (100) varying;
dcl  buffer char (2048) aligned;
dcl  buf_p ptr init (null ());
dcl  clock_ entry returns (fixed bin (71));
dcl (ioa_$ioa_switch, com_err_) entry options (variable);
dcl  edit_mos_rscr_ entry (ptr, char (*) varying);
dcl  date_time_ entry (fixed bin (71), char (*));
dcl  hphcs_$set_mos_polling_time entry (fixed bin);
dcl  iox_$close entry (ptr, fixed bin (35));
dcl  iox_$read_record entry (ptr, ptr, fixed bin (21), fixed bin (21), fixed bin (35));
dcl (t1, t2, runtime) char (16) init ("");
dcl  bin_clock fixed bin (71) init (clock_ ());
dcl  one_hour fixed bin (71) int static init (3600000000);	/* in micro seconds */
dcl  size condition;
dcl  alloc_count fixed bin init (0);
dcl  msg_count fixed bin (21) init (0);
dcl  first_data_line fixed bin init (7);
dcl  line_count fixed bin init (0);
dcl  max_lines fixed bin init (50);
dcl  polling_interval fixed bin init (0);
dcl  bit_default_polling_interval int static bit(36) init ("101"b);
dcl  default_polling_interval int static fixed bin init (5);
dcl  read_polling_interval bit (1) init ("0"b);
dcl  use_equals bit (1) aligned init ("0"b);
dcl (p, first_info_p, refer_p, thread_end_p) ptr init (null ());
dcl 1 counter_info based (p),
    2 descrip char (40) varying,
    2 time fixed bin (71),
    2 seq_num fixed bin (35),
    2 count fixed bin (35),
    2 error_average fixed dec (8, 2),
    2 next_info_p ptr,
    2 data dim (heals_message.data_size) bit (36) aligned;
dcl  counter_area area (16384);
dcl  cleanup condition;
dcl  area condition;
dcl  linkage_error condition;
dcl (addr, after, before, bin, empty, index, length, null) builtin;

	call date_time_ (bin_clock, runtime);
	call date_time_ ((arg_info.from_time), t1);
	call date_time_ ((arg_info.to_time), t2);
	arg_info.err_nb = -1;
	counter_area = empty ();			/* reset it for allocations */
	buf_p = addr (buffer);
	on cleanup call clean_up;
	on area begin;
dcl  error_table_$noalloc ext static fixed bin (35);
	  call com_err_ (error_table_$noalloc, "heals_mos_edac_reports_",
	    "internal area overflow:
run mos_edac_error report for a shorter time period for complete error listing.");
	  go to done;				/* print what we got anyway */
	end;

	if arg_info.report_iocbp = null () then do;
	  call com_err_ (0, "heals_mos_edac_reports_",
	    "report stream is not open.");
	  arg_info.err_nb = -1;
	  go to done;
	end;
	call iox_$read_record (arg_info.iocbp, addr (buffer), length (buffer), act_len, code);
	if code ^= 0 then
	  if code ^= error_table_$end_of_info then do;
read_error:
	    call com_err_ (code, "heals_mos_edac_reports_", "error reading heals_log.");
	    call clean_up;
	    return;
	  end;
	  else go to done;
	else;
	heals_message_p = addr (buffer);
scan_loop: do while ("1"b);
	  if index (heals_message.text, "mos_memory_check") > 0 |
	  (use_equals & heals_message.text = "=") then
use_message:  do;
	    use_equals = "1"b;			/* still process = records */
	    if index (heals_message.text, "MOS polling") > 0 then do;
	      read_polling_interval = "1"b;		/* we have the interval record */
	      on size begin;
	        call com_err_ (0, "heals_mos_edac_reports_",
		"heals_log message #^d has an invalid time interval value, ^d is assumed.",
		heals_message.seq_num, default_polling_interval);
	        heals_message.data (1) = bit_default_polling_interval;
	        polling_interval = default_polling_interval;
	      end;
(size):	      polling_interval = bin (before (after (heals_message.text, "MOS polling time "), " minutes"));
	      revert size;
	      go to message_used;
	    end;
	    if ^read_polling_interval then do;
	      polling_interval = -1;			/* for reading interval */
	      on linkage_error go to skip_hphcs_call;	/* incase not enough access */
	      call hphcs_$set_mos_polling_time (polling_interval);
skip_hphcs_call:
	      revert linkage_error;			/* reset */
	    end;
	    if polling_interval < 1 then polling_interval = default_polling_interval;
	    p, refer_p = null ();
check_allocations:
	    do p = first_info_p repeat (p -> next_info_p) while (p ^= null ());
	      if heals_message.data (1) = p -> counter_info.data (1) &
	      heals_message.data (2) = p -> counter_info.data (2) then
	        if after (heals_message.text, "mos_memory_check:") = p -> counter_info.descrip then
		if heals_message.time - one_hour <= p -> counter_info.time then do;
		  p -> count =
		    p -> count + heals_message.tally;
		  p -> counter_info.time = heals_message.time;
		  p -> counter_info.seq_num = heals_message.seq_num;
		  p -> error_average = p -> error_average +
		    (polling_interval * heals_message.tally);
		  go to was_allocated;
		end;
	      thread_end_p = p;
	    end;
						/* if we are here, must allocate new counter */
	    allocate counter_info in (counter_area) set (p);
	    if first_info_p = null () then do;
	      first_info_p = p;
	      thread_end_p = p;
	    end;
	    else thread_end_p -> next_info_p = p;	/* link chain */
	    alloc_count = alloc_count + 1;
(stringsize):
	    p -> counter_info.descrip =
	      after (heals_message.text, "mos_memory_check:");
	    p -> counter_info.data = heals_message.data;
	    p -> count = heals_message.tally;
	    p -> counter_info.time = heals_message.time;
	    p -> counter_info.seq_num = heals_message.seq_num;
	    p -> error_average =
	      p -> count * polling_interval;
	    p -> next_info_p = null ();
was_allocated:
message_used:
	  end use_message;
	  else use_equals = "0"b;
	  call iox_$read_record (arg_info.iocbp, addr (buffer), length (buffer), act_len, code);
	  if code ^= 0 then
	    if code ^= error_table_$end_of_info then go to read_error;
	    else go to done;
	  else;
	  if heals_message.time > arg_info.to_time then go to done;
get_record:
end_scan_loop: end scan_loop;
done:
	if alloc_count = 0 then
	  call ioa_$ioa_switch (arg_info.report_iocbp,
	  "^|MOS_EDAC_ERROR_REPORT:^5xfrom^x^16a^5xto^x^16a
HEALS RUN OF ^16a^xON^xSYSTEM^x^a^/
^- There were no mos_edac errors during the report period.",
	  t1, t2, runtime, arg_info.system_id);

	do p = first_info_p repeat (p -> next_info_p) while (p ^= null ());
	  if p -> counter_info.count > 1 then
	    p -> counter_info.error_average =
	    p -> counter_info.error_average / p -> counter_info.count;
	  error_rate = p -> counter_info.error_average;	/* to get as picture */
	  call edit_mos_rscr_ (addr (p -> counter_info.data (1)), descrip);
	  call print_msg;				/* to actually print out the messages */
	end;
	arg_info.err_nb = 0;
	call ioa_$ioa_switch (arg_info.report_iocbp, "^/END: MOS_EDAC_ERROR_REPORT");
	call clean_up;
clean_up:	proc;
	  if arg_info.iocbp ^= null () then
	    call iox_$close (arg_info.iocbp, code);
	  counter_area = empty ();
	  return;
	end clean_up;
	return;
						/*  */
print_msg: proc;					/* procedure to write edac messages to report. */
	  if msg_count = 0 | line_count >= max_lines then do;
	    call ioa_$ioa_switch (arg_info.report_iocbp,
	      "^|MOS_EDAC_ERROR_REPORT:^5xfrom^x^16a^5xto^x^16a
HEALS RUN OF ^16a^xON^xSYSTEM^x^a^/",
	      t1, t2, runtime, arg_info.system_id);
	    call ioa_$ioa_switch (arg_info.report_iocbp,
	      "^7xLAST ERROR^11xTALLY^2xAVERAGE^4xSYSTEM CONTROLLER REGISTER
LOG_NUM^xDATE^8xTIME^11xMINUTES
^36x/ERROR^/");
	    line_count = first_data_line;
	  end;
	  call date_time_ (p -> counter_info.time, t1);
	  call ioa_$ioa_switch (arg_info.report_iocbp,
	    "^x^6d^x^16a^4x^5d^9a^5x^w^x^w",
	    p -> counter_info.seq_num, t1, p -> counter_info.count,
	    error_rate, p -> counter_info.data (1), p -> counter_info.data (2));
	  call ioa_$ioa_switch
	    (arg_info.report_iocbp, "^4x^a^x^a^/",
	    p -> counter_info.descrip, descrip);
	  msg_count = msg_count + 1;
	  line_count = line_count + 3;
	  return;
	end print_msg;

/* 
   include files
*/

%include scr;
%include heals_message;
        end heals_mos_edac_reports_;
