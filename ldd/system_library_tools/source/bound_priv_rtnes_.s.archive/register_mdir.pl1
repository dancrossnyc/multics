/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* REGISTER_MDIR: Command that will register an existing master directory in ring 1 */

/* Written April 1976 by Larry Johnson */

register_mdir: proc;

dcl  code fixed bin (35);
dcl  name char (13) int static options (constant) init ("register_mdir");
dcl  nargs fixed bin;
dcl  arg_ptr ptr;
dcl  arg_len fixed bin;
dcl  arg char (arg_len) based (arg_ptr);
dcl  path_ptr ptr;
dcl  path_len fixed bin init (0);
dcl  path char (path_len) based (path_ptr);
dcl  all_sw bit (1) init ("0"b);
dcl  bf_sw bit (1) init ("0"b);
dcl  dir char (168);
dcl  ename char (32);
dcl  i fixed bin;
dcl (reg_count, check_count) fixed bin init (0);

dcl  ioa_ entry options (variable);
dcl  com_err_ entry options (variable);
dcl  cu_$arg_count entry (fixed bin);
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  mdc_priv_$register_mdir entry (char (*), char (*), fixed bin (35));
dcl  expand_path_ entry (ptr, fixed bin, ptr, ptr, fixed bin (35));
dcl  sweep_disk_ entry (char (168) aligned, entry);

dcl  error_table_$badopt ext fixed bin (35);
dcl  error_table_$mdc_not_mdir ext fixed bin (35);
dcl  error_table_$request_not_recognized ext fixed bin (35);
dcl  error_table_$noarg ext fixed bin (35);
dcl  error_table_$namedup ext fixed bin (35);

dcl (substr, addr, length, verify, reverse, null) builtin;


/* Scan arguments */

	call cu_$arg_count (nargs);
	if nargs = 0 then do;
	     call ioa_ ("Usage: ^a path -control_args-", name);
	     return;
	end;

	do i = 1 to nargs;
	     call cu_$arg_ptr (i, arg_ptr, arg_len, code);
	     if code ^= 0 then do;
err:		call com_err_ (code, name);
		return;
	     end;
	     if substr (arg, 1, 1) = "-" then do;
		if arg = "-all" then all_sw = "1"b;
		else if arg = "-brief" | arg = "-bf" then bf_sw = "1"b;
		else do;
		     code = error_table_$badopt;
arg_err:		     call com_err_ (code, name, "^a", arg);
		     return;
		end;
	     end;
	     else if path_len = 0 then do;		/* No path yet */
		path_ptr = arg_ptr;
		path_len = arg_len;
	     end;
	     else do;
		code = error_table_$request_not_recognized;
		go to arg_err;
	     end;
	end;


/* Handel the case of a single directory to register */

	if ^all_sw then do;
	     if path_len = 0 then do;
		code = error_table_$noarg;
		go to err;
	     end;
	     call expand_path_ (path_ptr, path_len, addr (dir), addr (ename), code);
	     if code ^= 0 then do;
path_err:		call com_err_ (code, name, "^a", path);
		return;
	     end;

	     call mdc_priv_$register_mdir (dir, ename, code);
	     if code ^= 0 then call com_err_ (code, name, "^a>^a", dir, ename);
	     return;
	end;


/* If -all given, must scan a tree. Let sweep_disk_ do the work */

	if path_len = 0 then do;			/* No path given, assume root */
	     dir = ">";
	     ename = "";
	     call register;				/* Be sure root gets registered */
	end;
	else do;
	     call expand_path_ (path_ptr, path_len, addr (dir), addr (ename), code);
	     if code ^= 0 then go to path_err;
	     call register;
	     call expand_path_ (path_ptr, path_len, addr (dir), null, code);
	     if code ^= 0 then go to path_err;
	end;

	call sweep_disk_ ((dir), check_mdir);		/* Scan the hierarchy */
	call ioa_ ("^a: ^d directories checked, ^d registered.", name, check_count, reg_count);
	return;


/* This procedure is called by sweep_disk_ each time it finds something */

check_mdir: proc (sdn, sen, lvl, een, bptr, nptr);

dcl  sdn char (168) aligned;				/* Superior directory */
dcl  sen char (32) aligned;				/* Containing directory */
dcl  lvl fixed bin;
dcl  een char (32) aligned;				/* Name of thing found */
dcl (bptr, nptr) ptr;

dcl 1 branch based (bptr) aligned,			/* Structure passed by sweep_disk_ */
    2 type bit (2) unal,
    2 nname bit (16) unal,
    2 nindex bit (18) unal,
    2 dtm bit (36) unal,
    2 dtu bit (36) unal,
    2 mode bit (5) unal,
    2 pad bit (13) unal,
    2 records bit (18) unal;

	     if branch.type ^= "10"b then return;	/* Only check directorys */

	     dir = sdn;
	     if sen ^= "" then do;			/* Build directory name */
		i = verify (reverse (dir), " ");
		i = length (dir)-i+2;
		if dir ^= ">" then substr (dir, i, 1) = ">";
		else i = i-1;
		substr (dir, i+1) = sen;
	     end;
	     ename = een;
	     call register;
	     return;

	end check_mdir;


register:	proc;

	     check_count = check_count + 1;
	     call mdc_priv_$register_mdir (dir, ename, code);
	     if code = 0 then do;
		reg_count = reg_count + 1;
		if ^bf_sw then call ioa_ ("Registered ^a^v(>^)^a", dir, bin (dir ^= ">", 1), ename);
	     end;
	     else if code = error_table_$mdc_not_mdir then return;
	     else if code ^= error_table_$namedup then call com_err_ (code, name, "^a>^a", dir, ename);
	     return;

	end register;


     end register_mdir;
