/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   *********************************************************** */
/* format: style2 */
match_strings_:
     procedure ();

/* *	MATCH_STRINGS_
   *
   *	This is a general-purpose utility procedure for matching a string
   *	against some set of previously supplied -match or -exclude strings.
   *	It detects regular expressions automatically by the surrounding slash
   *	delimiters and handles them by calling search_file_.
   *
   *	Created for new print_sys_log, 84-06-10, W. Olin Sibert
   *	Modified 1984-10-24 BIM for $print, fixed end processing.
   *      Modified 1984-11-30 BIM for indent in $print.
   *	Modified 1985-05-01 Steve Herbst to initialize match_info.string_info (i) to zero.
*/

	declare P_IOCB_ptr		 pointer;
	declare P_indent		 fixed bin;
	declare P_match_info_ptr	 pointer parameter;
	declare P_match_string	 char (*) parameter;
	declare P_match_sw		 bit (1) aligned parameter;
	declare P_tested_string	 char (*) parameter;
	declare P_title		 char (*) parameter;

	declare match_info_ptr	 pointer;
	declare match_info_max_strings fixed bin;
	declare match_info_area	 area based (match_info.area_ptr);

	declare match_string_ptr	 pointer;
	declare match_string_lth	 fixed bin (21);
	declare match_string	 char (match_string_lth) based (match_string_ptr);

	declare 1 match_info	 aligned based (match_info_ptr),
		2 header		 aligned,
		  3 area_ptr	 pointer,
		  3 max_strings	 fixed bin,
		  3 n_strings	 fixed bin,
		2 string_info	 (match_info_max_strings refer (match_info.max_strings)),
		  3 string_ptr	 pointer unaligned,
		  3 string_lth	 fixed bin (21),
		  3 flags		 aligned,
		    4 exclude_sw	 bit (1) unaligned,
		    4 begin_sw	 bit (1) unaligned,
		    4 end_sw	 bit (1) unaligned,
		    4 regexp_sw	 bit (1) unaligned,
		    4 pad		 bit (32) unaligned,
		2 end		 fixed bin;

	declare tested_string_ptr	 pointer;
	declare tested_string_lth	 fixed bin (21);
	declare tested_string	 char (tested_string_lth) based (tested_string_ptr);

	declare get_system_free_area_	 entry () returns (pointer);
	declare ioa_$ioa_switch	 entry () options (variable);


	declare DEFAULT_SIZE	 fixed bin internal static options (constant) init (10);
	declare REGEXP_CHARS	 char (3) internal static options (constant) init ("\.*");
	declare REGEXP_SLASH	 char (1) internal static options (constant) init ("/");
	declare BEGIN_CHAR		 char (1) internal static options (constant) init ("^");
	declare END_CHAR		 char (1) internal static options (constant) init ("$");

	declare (addcharno, addr, index, length, null, substr, unspec, verify)
				 builtin;

/**/

match_strings_$test:
     entry (P_match_info_ptr, P_tested_string) returns (bit (1) aligned);

	match_info_ptr = P_match_info_ptr;
	tested_string_ptr = addr (P_tested_string);
	tested_string_lth = length (P_tested_string);

	if (match_info_ptr = null ())
	then return ("1"b);
	if (match_info.n_strings = 0)
	then return ("1"b);

	return (do_match ());



match_strings_$add:
     entry (P_match_info_ptr, P_match_sw, P_match_string);

	match_info_ptr = P_match_info_ptr;
	match_string_ptr = addr (P_match_string);
	match_string_lth = length (P_match_string);

	call add_string (P_match_sw, "0"b);

	P_match_info_ptr = match_info_ptr;		/* In case it changed */
	return;

match_strings_$add_literal:				/* force exact match of test without regexp's */
     entry (P_match_info_ptr, P_match_sw, P_match_string);

	match_info_ptr = P_match_info_ptr;
	match_string_ptr = addr (P_match_string);
	match_string_lth = length (P_match_string);

	call add_string (P_match_sw, "1"b);

	P_match_info_ptr = match_info_ptr;		/* In case it changed */
	return;


match_strings_$free:
     entry (P_match_info_ptr);

	match_info_ptr = P_match_info_ptr;
	P_match_info_ptr = null ();

	call free_match_info ();

	return;

match_strings_$print:
     entry (P_IOCB_ptr, P_indent, P_title, P_match_info_ptr);

	match_info_ptr = P_match_info_ptr;
	if match_info_ptr = null ()
	then return;

	call print_strings;
	return;

/**/

do_match:
     procedure () returns (bit (1) aligned);

	declare match_idx		 fixed bin;
	declare match_result	 bit (1) aligned;
	declare final_result	 bit (1) aligned;


/* If the first argument was -exclude, then the result is ALL strings except
   those excluded.	Contrariwise, if the first argument was -match, then the
   result is NO strings except those matching.  So, we start out by setting
   the final result to the first exclude_sw value. */

	final_result = match_info.exclude_sw (1);

/* Version 2 selector:  Consider each match string in turn.	 If the string
   followed -match, and the message matches it, then set the result to true.
   If the string followed -exclude, and the message matches it, then set the
   result to false.	 Otherwise, leave the result alone.

   This is simpler than version 1, which was simply ridiculous. Gary Dixon
   has a more complicated version that I don't understand how to implement
   or describe, but which may be better (New_Log_primitives [0146]).
*/

	do match_idx = 1 to match_info.n_strings;
	     match_result = try_match ();

	     if match_result
	     then if match_info.exclude_sw (match_idx)
		then final_result = "0"b;
		else final_result = "1"b;
	end;

	return (final_result);

/**/

try_match:
     procedure () returns (bit (1) aligned);

	declare match_string_ptr	 pointer;
	declare match_string_lth	 fixed bin (21);
	declare match_string	 char (match_string_lth) based (match_string_ptr);

/* This procedure applies tests according to the various flags in the match_info
   structure. It returns immediately when it knows it has a match failure, but
   otherwise falls through to the end where it indicates success. It is then
   the caller's job to interpret the exclude_sw properly. */


	match_string_ptr = match_info.string_ptr (match_idx);
	match_string_lth = match_info.string_lth (match_idx);

	if match_info.regexp_sw (match_idx)
	then return (try_regexp_match ());

	if (match_info.begin_sw (match_idx)) & (match_info.end_sw (match_idx))
	then do;
		if (match_string_lth ^= tested_string_lth)
		then return ("0"b);
		if (match_string ^= tested_string)
		then return ("0"b);
		return ("1"b);
	     end;

	if (match_info.begin_sw (match_idx))
	then do;
		if (match_string_lth > tested_string_lth)
		then return ("0"b);
		if (substr (tested_string, 1, match_string_lth) ^= match_string)
		then return ("0"b);
		if ^match_info.end_sw (match_idx)
		then return ("1"b);			/* passes all available tests */
	     end;

	if (match_info.end_sw (match_idx))
	then do;
		if (match_string_lth > tested_string_lth)
		then return ("0"b);
		if (substr (tested_string, (tested_string_lth - match_string_lth + 1)) ^= match_string)
		then return ("0"b);
		return ("1"b);			/* begin tested, end passes */
	     end;

/**** Here iff there is no ^ or $ or difficult regexp */

	if (match_string_lth > tested_string_lth)
	then return ("0"b);

	if (index (tested_string, match_string) = 0)
	then return ("0"b);

	return ("1"b);

try_regexp_match:
     procedure returns (bit (1) aligned);

	declare search_file_$silent	 entry (pointer, fixed binary (21), fixed binary (21), pointer, fixed binary (21),
				 fixed binary (21), fixed binary (21), fixed binary (21), fixed binary (35));
	declare sf_code		 fixed bin (35);
	declare must_fake_NL	 bit (1) aligned;

	must_fake_NL = "0"b;
	if substr (match_string, match_string_lth, 1) = END_CHAR
	then if match_string_lth < 3
	     then must_fake_NL = "1"b;
	     else if substr (match_string, match_string_lth - 2, 3) ^= "\c$"
	     then must_fake_NL = "1"b;

	if ^must_fake_NL
	then call search_file_$silent (match_string_ptr, 1, match_string_lth, addr (tested_string), 1,
		tested_string_lth, (0), (0), sf_code);
	else begin;
		declare longer_tested_string	 char (tested_string_lth + 1);
		longer_tested_string = tested_string || byte (10);
		call search_file_$silent (match_string_ptr, 1, match_string_lth, addr (longer_tested_string), 1,
		     tested_string_lth + 1, (0), (0), sf_code);
	     end;
	return (sf_code = 0);
     end try_regexp_match;
     end try_match;

     end do_match;

/**/

add_string:
     procedure (P_match_sw, P_literal_sw);


	declare P_match_sw		 bit (1) aligned parameter;
	declare P_literal_sw	 bit (1) aligned parameter;
	declare new_idx		 fixed bin;
	declare new_string_ptr	 pointer;
	declare new_string_lth	 fixed bin (21);
	declare new_string		 char (new_string_lth) based (new_string_ptr);


	if (match_info_ptr = null ())
	then call reallocate_match_info (DEFAULT_SIZE);

	else if (match_info.n_strings >= match_info.max_strings)
	then call reallocate_match_info (match_info.n_strings + DEFAULT_SIZE);

	new_idx = match_info.n_strings + 1;		/* Use the next entry */
	unspec (match_info.flags (new_idx)) = "0"b;
	match_info.exclude_sw (new_idx) = ^P_match_sw;


/* For string matching, there are three flags:

   1) regexp_sw -- when this is set, search_file_ is called for this string
   each message. Regular expressions are signalled by slashes surrounding
   the string. Since search_file_ is rather expensive, however, the string
   is examined to see whether it is a trivial regular expression, involving
   only the begin ("^") or end ("$") character, in which case, regexp_sw
   is turned off, and one or both of the following two are turned on:
   2) begin_sw -- when set, indicates that the message must begin with this
   string to match.
   3) end_sw -- when set, indicates that the message must end with this string
   to match.

   Testing for these conditions is the purpose of the set of tests below. If
   the string is a regular expression, its start and length are adjusted to
   remove the slashes; similarly, if it is determined to be one of the two
   trivial cases, the leading/trailing regexp character must be removed.
   Note that detection of the trivial cases does not include cases where the
   only regexp characters are escaped with backslash-C; this didn't seem
   worth it, and, in fact, any string containing backslashes is considered
   non-trivial. */


	if ^P_literal_sw
	then if (length (match_string) > 2)
	     then /* See explanation above for details of this code */
		if (substr (match_string, 1, 1) = REGEXP_SLASH)
		then if (substr (match_string, length (match_string), 1) = REGEXP_SLASH)
		     then do;
			     match_string_ptr = addcharno (match_string_ptr, 1);
			     match_string_lth = match_string_lth - 2;
			     if (search (match_string, REGEXP_CHARS) = 0)
			     then do;		/* trivial regexp */
				     if (length (match_string) > 1)
				     then if (substr (match_string, 1, 1) = BEGIN_CHAR)
					then do;
						match_info.begin_sw (new_idx) = "1"b;
						match_string_lth = match_string_lth - 1;
						match_string_ptr = addcharno (match_string_ptr, 1);
					     end;

				     if (length (match_string) > 2)
				     then if (substr (match_string, length (match_string), 1) = END_CHAR)
					then do;
						match_info.end_sw (new_idx) = "1"b;
						match_string_lth = match_string_lth - 1;
					     end;
				end;		/* Of trivial regexp case */
			     else do;		/* non-trivial! */
				     match_info.regexp_sw (new_idx) = "1"b;

				     if (length (match_string) > 2)
				     then /* Test for trimming a trailing "$" */
					if (substr (match_string, length (match_string) - 1, 1) = END_CHAR)
					then match_string_lth = match_string_lth - 1;
				end;		/* of hard regexp case */
			end;			/* Of regexp case */

	new_string_lth = match_string_lth;		/* Now, allocate a copy for later use in matching */
	allocate new_string in (match_info_area) set (new_string_ptr);

	new_string = match_string;			/* Copy from our (adjusted) caller's string */

	match_info.string_ptr (new_idx) = new_string_ptr;
	match_info.string_lth (new_idx) = new_string_lth;
	if P_literal_sw
	then match_info.begin_sw (new_idx), match_info.end_sw (new_idx) = "1"b;
	match_info.n_strings = new_idx;		/* Adjust the count to include this one */

	return;
     end add_string;

/**/

reallocate_match_info:
     procedure (P_size);

	declare P_size		 fixed bin parameter;

	declare nmi_ptr		 pointer;
	declare old_size		 fixed bin;
	declare nmi_idx		 fixed bin;
	declare system_area_ptr	 pointer;
	declare system_area		 area based (system_area_ptr);


	match_info_max_strings = P_size;
	system_area_ptr = get_system_free_area_ ();

	if (match_info_ptr = null ())
	then old_size = 0;
	else old_size = match_info.n_strings;

	allocate match_info in (system_area) set (nmi_ptr);

	if (match_info_ptr ^= null ())
	then nmi_ptr -> match_info.header = match_info.header;
	else unspec (nmi_ptr -> match_info) = ""b;

	nmi_ptr -> match_info.max_strings = match_info_max_strings;
	nmi_ptr -> match_info.area_ptr = system_area_ptr;

	do nmi_idx = 1 to old_size;
	     nmi_ptr -> match_info.string_info (nmi_idx) = match_info.string_info (nmi_idx);
	end;

	do nmi_idx = (old_size + 1) to nmi_ptr -> match_info.max_strings;
	     unspec (nmi_ptr -> match_info.string_info (nmi_idx)) = "0"b;
	     nmi_ptr -> match_info.string_ptr (nmi_idx) = null ();
	end;

	if (match_info_ptr ^= null ())
	then free match_info in (system_area);

	match_info_ptr = nmi_ptr;
	return;
     end reallocate_match_info;

/**/

free_match_info:
     procedure ();

	declare mi_idx		 fixed bin;


	if (match_info_ptr = null ())
	then return;

	do mi_idx = 1 to match_info.n_strings;
	     match_string_ptr = match_info.string_ptr (mi_idx);
	     match_string_lth = match_info.string_lth (mi_idx);
	     free match_string in (match_info_area);
	end;

	free match_info in (match_info_area);
	match_info_ptr = null ();

	return;
     end free_match_info;

print_strings:
     procedure;

	declare sx		 fixed bin;
	declare 1 csi		 aligned like match_info.string_info based (csip);
	declare csip		 pointer;
	declare cstring		 char (csi.string_lth) based (csi.string_ptr);

	if match_info.header.n_strings = 0
	then return;
	call ioa_$ioa_switch (P_IOCB_ptr, "^vx^a match and exclude strings:", P_indent, P_title);
	do sx = 1 to match_info.n_strings;
	     csip = addr (match_info.string_info (sx));
	     call ioa_$ioa_switch (P_IOCB_ptr, "^vx  ^[match  ^;exclude^] ^[/^]^[^^^]^a^[$^]^[/^]", P_indent,
		^csi.flags.exclude_sw, csi.flags.regexp_sw | csi.flags.begin_sw | csi.flags.end_sw,
		csi.flags.begin_sw, cstring, csi.flags.end_sw,
		csi.flags.regexp_sw | csi.flags.begin_sw | csi.flags.end_sw);
	end;
	return;
     end print_strings;

     end match_strings_;
