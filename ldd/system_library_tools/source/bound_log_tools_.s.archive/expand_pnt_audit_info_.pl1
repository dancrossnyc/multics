/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1985 *
   *                                                         *
   *********************************************************** */
/* format: style5 */

expand_pnt_audit_info_:
        procedure (P_log_message_format_ptr, P_expand_mode_ptr, P_info_ptr,
	  P_info_size, P_expansion, P_code);

/**** This program expands the extended binary information associated with
      PNT change audit records.  */

/* Written 1985-01-28 by E. Swenson */

/* Parameters */

        dcl     P_code		fixed bin (35) parameter;
					      /* status code */
        dcl     P_expand_mode_ptr	ptr parameter;
        dcl     P_expansion		char (*) varying parameter;
					      /* character string to output */
        dcl     P_info_ptr		ptr parameter;  /* pointer to I&A binary info */
        dcl     P_info_size		fixed bin (17) parameter;
					      /* size of binary info */
        dcl     P_log_message_format_ptr
				ptr parameter;

/* Automatic */

        dcl     code		fixed bin (35); /* status code */
        dcl     ioa_$rsnnl		entry () options (variable);
        dcl     new_pnt_info_ptr	ptr;	      /* pointer to pnt_audit_entry structure */
        dcl     p			ptr;	      /* used to reference binary data */
        dcl     temp		char (1024) varying;
					      /* temporary string */

/* Entries */

        dcl     display_access_class_	entry (bit (72) aligned)
				returns (char (32) aligned);
        dcl     display_access_class_$range
				entry ((2) bit (72) aligned)
				returns (char (32) aligned);

/* External */

        dcl     error_table_$bad_arg	fixed bin (35) external static;
        dcl     error_table_$unimplemented_version
				fixed bin (35) external static;

/* Builtin */

        dcl     addr		builtin;
        dcl     size		builtin;

%page;
/* Program */
        p = P_info_ptr;
        if P_info_size < (size (pnt_audit_record) - size (pnt_audit_entry) - 1)
	  then
	      do;
	      P_code = error_table_$bad_arg;
	      return;
	      end;

        if p -> pnt_audit_record.version ^= PNT_AUDIT_RECORD_VERSION_1 then
	      do;
	      P_code = error_table_$unimplemented_version;
	      return;
	      end;

        P_code = 0;

/**** Determine which of the possibly two pnt_audit_entry structures
      to display as "new" vs "old" data. */

        if p -> pnt_audit_record.flags.modify then
	      new_pnt_info_ptr = addr (p -> pnt_audit_record.pnt_entry_2);
        else
	      new_pnt_info_ptr = addr (p -> pnt_audit_record.pnt_entry_1);

        call ioa_$rsnnl (
	  "User id = ^a, Operation = ^a^[, Changed password^]^[, Changed network password^]^/^[Old^;New^] PNT info:^/^a^/"
	  , temp, (0), p -> pnt_audit_record.user_id, DISPLAY_OPERATION (),
	  p -> pnt_audit_record.flags.password_changed,
	  p -> pnt_audit_record.flags.network_password_changed,
	  p -> pnt_audit_record.flags.delete,
	  DISPLAY_PNT_AUDIT_ENTRY (new_pnt_info_ptr));

/**** For the modify opertation, there are two pnt_audit_entry structures
      supplied.  Process the other one. */

        if p -> pnt_audit_record.flags.modify then
	      call ioa_$rsnnl ("^aOld PNT info:^/^a^/", temp, (0), temp,
		DISPLAY_PNT_AUDIT_ENTRY (
		addr (p -> pnt_audit_record.pnt_entry_1)));

/**** Update the relevant information for our caller */

        P_expansion = P_expansion || temp;
        P_info_size = P_info_size - size (pnt_audit_record);

        return;
%page;
DISPLAY_OPERATION:
        procedure () returns (char (*));

/**** This internal procedure returns a character string representation
      of the PNT operation being interpreted. */

        if p -> pnt_audit_record.flags.add then
	      return ("add");
        else if p -> pnt_audit_record.flags.delete then
	      return ("delete");
        else if p -> pnt_audit_record.flags.modify then
	      return ("modify");
        else
	      return ("unknown");

        end DISPLAY_OPERATION;
%page;
DISPLAY_PNT_AUDIT_ENTRY:
        procedure (P_pnt_audit_entry_ptr) returns (char (*));

/**** This internal procedure displays the contents of a pnt_audit_entry
      structure */

        dcl     P_pnt_audit_entry_ptr	ptr parameter;  /* pointer to info structure */
        dcl     audit_flags_str	char (256) automatic;
					      /* representation of audit flags */
        dcl     p			ptr automatic;  /* temporary pointer */
        dcl     temp		char (512) automatic;
					      /* temporary */
        dcl     convert_access_audit_flags_$to_string
				entry (bit (36) aligned, char (*),
				fixed bin (35));

        p = P_pnt_audit_entry_ptr;

        call convert_access_audit_flags_$to_string (p
	  -> pnt_audit_entry.audit_flags, audit_flags_str, code);
        if code ^= 0 then
	      audit_flags_str = "-invalid-";

        call ioa_$rsnnl (
	  "Alias = ""^a"", Authorization range = ^a, Audit flags = ""^a"", Flags = ""^a""^[, Password timelock = ^a^]"
	  , temp, (0), p -> pnt_audit_entry.alias,
	  display_access_class_$range (p
	  -> pnt_audit_entry.authorization_range), audit_flags_str,
	  DISPLAY_PNT_FLAGS (addr (p -> pnt_audit_entry.flags)),
	  p -> pnt_audit_entry.flags.pw_time_lock,
	  DISPLAY_PASSWORD_TIMELOCK (p -> pnt_audit_entry.password_timelock));
        return (temp);
        end DISPLAY_PNT_AUDIT_ENTRY;
%page;
DISPLAY_PNT_FLAGS:
        procedure (P_pnt_flags_ptr) returns (char (*));

/**** This procedure returns a displayable representation of the
      flags in the PNT. */

        dcl     P_pnt_flags_ptr	ptr parameter;
        dcl     1 pnt_flags		like pnt_entry.public.flags
				based (P_pnt_flags_ptr);

        dcl     temp		char (256) automatic;

        call ioa_$rsnnl (
	  "^[^^^]password,^[^^^]network_pw,^[^^^]trap,^[^^^]lock,^[^^^]change,^[^^^]must_change,^[^^^]generate,^[^^^]operator,^[^^^]time_lock"
	  , temp, (0), ^pnt_flags.has_password,
	  ^pnt_flags.has_network_password, ^pnt_flags.trap, ^pnt_flags.lock,
	  pnt_flags.nochange, ^pnt_flags.must_change, ^pnt_flags.generate_pw,
	  ^pnt_flags.operator, ^pnt_flags.pw_time_lock);
        return (temp);

        end DISPLAY_PNT_FLAGS;
%page;
DISPLAY_PASSWORD_TIMELOCK:
        procedure (P_password_timelock) returns (char (*));

/**** This procedure returns the value of the password time lock,
      if there is one. */

        dcl     P_password_timelock	fixed bin (71) parameter;
        dcl     date_str		char (250) varying automatic;
        dcl     date_time_$format	entry (char (*), fixed bin (71),
				char (*), char (*))
				returns (char (250) var);

        if P_password_timelock = 0 then
	      return ("none");
        else
	      do;
	      date_str =
		date_time_$format ("date_time", P_password_timelock, "", "")
		;
	      return ((date_str));
	      end;

        end DISPLAY_PASSWORD_TIMELOCK;		      /* format: off */
%page; %include access_audit_bin_header;
%page; %include pnt_audit_record;
%page; %include pnt_entry;
%page; %include user_attributes;
/* format: on */

        end expand_pnt_audit_info_;

