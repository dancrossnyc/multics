/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   *********************************************************** */

/* format: style4 */

expand_mdc_uidpath_msg_:
     procedure ();

/* *      EXPAND_MDC_UIDPATH_MSG_
   *
   *	Expander for message from Master Directory Control about the
   *	automatic deregistration of orphan or otherwise missing master directories.
   *
   *	85-02-21, EJ Sharpe: initial coding
   *	85-03-06, EJ Sharpe: change to always return 0 code
*/

declare  P_log_message_format_ptr pointer parameter;
declare  P_log_message_ptr pointer parameter;
declare  P_expand_mode_ptr pointer parameter;
declare  P_expansion char (*) varying parameter;
declare  P_code fixed bin (35) parameter;

declare  temp char (2000) varying;
declare  pathname char (256);
declare  code fixed bin (35);

declare  uidpath_ptr pointer;
declare  uidpath (0:15) bit (36) aligned based (uidpath_ptr);

declare  expand_log_message_$unknown_syserr entry (pointer, pointer, pointer, char (*) varying, fixed bin (35));
declare  expand_log_message_$unknown entry (pointer, pointer, pointer, char (*) varying, fixed bin (35));
declare  ioa_$rsnnl entry options (variable);
declare  vpn_cv_uid_path_ entry (ptr, char (*), fixed bin (35));

declare  (addr, binary, dimension, size) builtin;
%page;

expand_mdc_uidpath_msg_$format:
     entry (P_log_message_format_ptr, P_log_message_ptr, P_expand_mode_ptr, P_expansion, P_code);

	log_message_ptr = P_log_message_ptr;

	uidpath_ptr = addr (log_message.data (1));

	if (size (uidpath) = dimension (log_message.data, 1))
	then call expand_uidpath ();
	else call expand_log_message_$unknown
		(P_log_message_format_ptr, log_message_ptr, P_expand_mode_ptr, P_expansion, P_code);

	return;
%page;

/* This is a compatibility entrypoint-- it processes an old-format "syserr" class
   message, which has the syserr binary code in the first word of the data. */

expand_mdc_uidpath_msg_$syserr:
     entry (P_log_message_format_ptr, P_log_message_ptr, P_expand_mode_ptr, P_expansion, P_code);

	log_message_ptr = P_log_message_ptr;

	uidpath_ptr = addr (log_message.data (2));

	if (binary (log_message.data (1)) = SB_mdc_del_uidpath)
	     & (size (uidpath) = dimension (log_message.data, 1) - 1)
	then call expand_uidpath ();
	else call expand_log_message_$unknown_syserr
		(P_log_message_format_ptr, log_message_ptr, P_expand_mode_ptr, P_expansion, P_code);

	return;
%page;
expand_uidpath:
     procedure ();

	pathname = "";
						/* we won't try to deal with all the codes vpn_cv_uid_path_ might
						   return,  we'll just display what we have and return the code. */
	call vpn_cv_uid_path_ (uidpath_ptr, pathname, code);
	call ioa_$rsnnl ("^/Directory: ^a", temp, (0), pathname);
	P_expansion = P_expansion || temp;
	if code ^= 0 then do;
	     call ioa_$rsnnl ("^/UID path:^( ^w^)", temp, (0), uidpath);
	     P_expansion = P_expansion || temp;
	end;

	P_code = 0;
	return;

     end expand_uidpath;

/* format: off */
%page; %include log_message;
%page; %include log_message_format;
%page; %include syserr_binary_def;

          end expand_mdc_uidpath_msg_;
