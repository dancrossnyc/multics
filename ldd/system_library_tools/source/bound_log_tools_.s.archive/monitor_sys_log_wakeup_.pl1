/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        *********************************************************** */

/* monitor_sys_log_wakeup_.pl1 -- event wakeup handler for monitor_sys_log */
/* format: style2 */

monitor_sys_log_wakeup_:
     procedure;

/**** Created 1984-12, BIM. */
/**** Modified 1985-01-15, BIM: process_id and data_class printing. */


/****^  HISTORY COMMENTS:
  1) change(88-04-28,GDixon), approve(88-08-15,MCR7969),
     audit(88-08-03,Lippard), install(88-08-29,MR12.2-1093):
      A) Add a "start" control order to restart any I/O interrupted by this
         wakeup handler printing out a message. (phx20587)
                                                   END HISTORY COMMENTS */


	declare P_event_call_info_ptr	 pointer;

%include event_call_info;

	declare cu_$cp		 entry (ptr, fixed bin (21), fixed bin (35));
	declare date_time_$format	 entry (character (*), fixed binary (71), character (*), character (*))
				 returns (character (250) var);
	declare expand_log_message_	 entry (pointer, pointer, pointer, character (*) var, fixed binary (35));
	declare expand_log_message_$append_octal
				 entry (pointer, pointer, fixed binary, character (*) var);
	declare expand_log_message_$append_process_id
				 entry (pointer, pointer, character (*) var);
	declare expand_log_message_$append_data_class
				 entry (pointer, pointer, character (*) var);
	declare format_log_message_$format
				 entry (pointer, pointer, pointer, character (*) var, character (*) var,
				 fixed binary (35));
	declare ioa_$rsnnl		 entry () options (variable);
	declare iox_$control	 entry (ptr, char(*), ptr, fixed bin(35));
	declare iox_$put_chars	 entry (ptr, ptr, fixed bin (21), fixed bin (35));
	declare ipc_$drain_chn	 entry (fixed bin (71), fixed bin (35));
	declare log_expand_select_$test
				 entry (pointer, pointer, bit (1) aligned, pointer);
	declare log_match_$test	 entry (pointer, pointer, character (*) var) returns (bit (1) aligned);
	declare log_read_$next_message entry (pointer, pointer, fixed binary (35));
	declare log_read_$update	 entry (fixed binary (35), pointer, pointer, fixed binary (35));
	declare requote_string_	 entry (character (*)) returns (character (*));
	declare timer_manager_$alarm_wakeup
				 entry (fixed binary (71), bit (2), fixed binary (71));

	declare code		 fixed bin (35);

%include monitor_sys_log_info_;
	declare an_entry_ptr	 pointer;
	declare 1 an_entry		 aligned like monitor_sys_log_array.entry based (an_entry_ptr);
	declare (addr, addwordno, dimension, length, null)
				 builtin;

%include log_message;
%include log_message_format;


timer:
     entry (P_event_call_info_ptr);

	event_call_info_ptr = P_event_call_info_ptr;

	if ^monitor_sys_log_data_.initialized | ^monitor_sys_log_data_.active
	then return;

	call ipc_$drain_chn (monitor_sys_log_data_.wakeup_event_channel, (0));

	monitor_sys_log_array_ptr = monitor_sys_log_data_.log_array_ptr;
	if monitor_sys_log_data_.n_logs_on_timer > 0 & monitor_sys_log_array_ptr ^= null ()
	then call process_logs;

	if monitor_sys_log_data_.active & monitor_sys_log_data_.wakeup_event_channel ^= 0
	then call timer_manager_$alarm_wakeup (monitor_sys_log_data_.wakeup_interval, "11"b,
		monitor_sys_log_data_.wakeup_event_channel);
	return;

process_logs:
     procedure;

	declare lx		 fixed bin;

	do lx = 1 to monitor_sys_log_array.n_entries;
	     an_entry_ptr = addr (monitor_sys_log_array.entry (lx));
	     if an_entry.dir_name ^= ""
	     then if ^an_entry.registered
		then if ^an_entry.inhibited
		     then call process_one_log;
	end;

	return;
     end process_logs;

process_one_log:
     procedure;					/* assumes an_entry_ptr set */
	declare printed_one_message    bit (1) aligned;   /* do "start" control if any message printed from this log. */
	declare process_last_message	 bit (1) aligned;	/* for first message in empty log fencepost -- process the "last" message. */
	declare saved_last_message_ptr pointer;

	process_last_message = "0"b;
	if an_entry.last_message_ptr = null ()
	then do;					/* was empty when we started */
		call log_read_$next_message (an_entry.log_read_ptr, an_entry.last_message_ptr, code);
		if code ^= 0
		then return;			/* Still no entries in the log */
		an_entry.last_sequence = an_entry.last_message_ptr -> log_message.sequence;
						/* okay, consider the first message, and fall down to update */
		process_last_message = "1"b;
	     end;

	call log_read_$update (an_entry.last_sequence, an_entry.log_read_ptr, an_entry.last_message_ptr, code);
	if code ^= 0
	then return;
	printed_one_message = "0"b;			/* remember if any messages were printed. */
	do while (code = 0);
	     saved_last_message_ptr = an_entry.last_message_ptr;
	     if ^process_last_message
	     then /* Normal case */
		call log_read_$next_message (an_entry.log_read_ptr, an_entry.last_message_ptr, code);
	     else do;				/* first message in empty seg is in the last_ vars */
		     saved_last_message_ptr = null ();	/* prev_message to first message in segment is null () */
		     process_last_message = "0"b;	/* only do this ONCE */
		     code = 0;
		end;
	     if an_entry.last_message_ptr = null () | code ^= 0
						/* in process_last_message case this is guaranteed to fail */
	     then an_entry.last_message_ptr = saved_last_message_ptr;
	     else if code = 0
	     then do;
		     an_entry.prev_message_ptr = saved_last_message_ptr;
		     an_entry.last_sequence = an_entry.last_message_ptr -> log_message.sequence;
		     call process_message;
		end;
	end;
          if printed_one_message			/* restart any interrupted I/O. */
	then call iox_$control (an_entry.iocb_ptr, "start", null, code);
	return;

process_message:
     procedure;

	declare output_buffer	 char (5000) varying;
	declare expansion		 char (5000) varying;
	declare expand_this_message	 bit (1) aligned;
	declare expand_mode_ptr	 pointer;

	log_message_ptr = an_entry.last_message_ptr;
	if ^log_match_$test (an_entry.lmd_ptr, log_message_ptr, "")
						/* first, see if we can toss this without any work at all */
	then return;
	if ^an_entry.interpret_sw
	then /* If not interpreting, then definitely not */
	     expand_this_message = "0"b;
	else if (dimension (log_message.data, 1) = 0)
	then /* And, if no data, also definitely not */
	     expand_this_message = "0"b;
	else if (an_entry.expand_select_ptr = null ())
	then do;					/* But if we are interpreting, and no classes were */
		expand_this_message = "1"b;		/* asked for, we do expand this one's data */
		expand_mode_ptr = null ();		/* But, obviously, there were no expand modes asked for */
	     end;
	else call log_expand_select_$test
		/* Otherwise, we ask the selector */ (an_entry.expand_select_ptr, log_message_ptr,
		expand_this_message, expand_mode_ptr);

	if expand_this_message
	then call expand_log_message_ (an_entry.format_ptr, log_message_ptr, expand_mode_ptr, expansion, (0));
	else expansion = "";			/* This one has nothing for the formatter */
	if ^log_match_$test (an_entry.lmd_ptr, log_message_ptr, expansion)
	then return;

	if an_entry.octal_sw
	then call expand_log_message_$append_octal (an_entry.format_ptr, addr (log_message.data),
		(log_message.data_lth), expansion);

	if an_entry.process_id_sw
	then call expand_log_message_$append_process_id (an_entry.format_ptr, log_message_ptr, expansion);
	if an_entry.data_class_sw
	then call expand_log_message_$append_data_class (an_entry.format_ptr, log_message_ptr, expansion);

	if an_entry.call_command.ptr ^= null ()
	then call process_call;
	else call process_print;

	return;

process_print:
     procedure;

	call format_log_message_$format (an_entry.format_ptr, log_message_ptr, an_entry.prev_message_ptr, expansion,
	     output_buffer, (0));

	call iox_$put_chars (an_entry.iocb_ptr, addwordno (addr (output_buffer), 1), length (output_buffer), (0));
	printed_one_message = "1"b;
	return;
     end process_print;

process_call:
     procedure options (non_quick);

	declare requoted_buffer	 char (5000) varying;
	declare command_line_buffer	 char (6000) varying;
						/* has got to be big enough */
	declare dt_string		 char (100) varying;
	declare call_command_string	 char (an_entry.call_command.length) based (an_entry.call_command.ptr);

/**** This needs data expansion support ... */

	log_message_ptr = an_entry.last_message_ptr;
	requoted_buffer = requote_string_ (log_message.text);
	dt_string = requote_string_ (date_time_$format ("iso_long_date_time", (log_message.time), "", ""));
	command_line_buffer = "";
	call ioa_$rsnnl ("^a ^a ^a ^d ^d ^a^[ ^a ^a^]", command_line_buffer, (0), call_command_string,
	     an_entry.format_ptr -> log_message_format.prefix, dt_string, log_message.sequence, log_message.severity,
	     requoted_buffer, log_message.data_class_lth > 0, log_message.data_class,
	     """""" /* will be expanded text */);

	call cu_$cp (addwordno (addr (command_line_buffer), 1), length (command_line_buffer), (0));
	return;
     end process_call;

     end process_message;
     end process_one_log;
     end monitor_sys_log_wakeup_;
