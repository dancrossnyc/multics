/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   *********************************************************** */
format_log_message_:
     procedure ();

/* *	FORMAT_LOG_MESSAGE_
   *
   *	This is the procedure for formatting the text portion of sys log 
   *	messages.  It must be used in conjunction with expand_log_message_ 
   *	to handle binary messages. Formatting log messages requires a
   *	log_message_format structure; this must be created by calling
   *	format_log_message_$init, and, when finished, freed by a call
   *	to format_log_message_$free. This log_message_format structure
   *	is then used (never modified) in all calls to
   *	format_log_message_$format, and expand_log_message_$format. 
   *	Additionally, some user-supplied binary message formatting
   *	routines may want to be aware of its contents and follow the
   *	appropriate rules if they do any fancy formatting.
   *
   *      1984-07-04, W. Olin Sibert: Initial coding
   *      1984-12-03, BIM: Fixed to respect equal_sw.
   *      1984-12-05, WOS: Added support for processing expansions.
   *      1984-12-11, BIM: Allowed LONG date and time strings.
   *	1984-12-20, WOS: Changed to make continuation_indent user-settable
   *      1984-12-26, BIM: Changed to make continuation_indent -1 mean "default" and zero ZERO.
   *      1985-01-21, BIM: Changed not to == if data is mismatched and there
   *         is expansion.
   *      1985-02-02, WOS: Changed to adjust message times for time zone and date header check.
   *	1985-03-14, Steve Herbst: Fixed boundary condition bug causing 2 newline characters in a row.
   */

declare	P_log_message_format_ptr pointer parameter;
declare	P_log_message_ptr pointer parameter;
declare	P_prev_message_ptr pointer parameter;
declare   P_expansion char (*) varying parameter;
declare	P_buffer char (*) varying parameter;
declare	P_code fixed bin (35);

declare	system_area_ptr pointer;
declare	system_area area based (system_area_ptr);

declare	own_log_message_format bit (1) aligned;
declare	message_prefix char (200) varying;
declare	prev_message_ptr pointer;
declare   total_lines fixed bin;

declare   time_defaults_$zone_delta fixed bin (71) external static;

declare   date_time_$format entry (char (*), fixed bin (71), char (*), char (*)) returns (char (250) varying);
declare   date_time_$valid_format entry (char (*), fixed bin, fixed bin (35));
declare	get_system_free_area_ entry () returns (pointer);
declare   ioa_$rsnnl entry options (variable);

declare	MIN_LINE_LTH init (40) fixed bin internal static options (constant);
declare	NEWLINE char (1) unaligned internal static options (constant) init ("
");

declare  (addr, clock, divide, hbound, index, lbound, length, maxlength, min, null, reverse, search, substr, unspec) builtin;

/* */

format_log_message_$init:
     entry (P_log_message_format_ptr);

          system_area_ptr = get_system_free_area_ ();
          allocate log_message_format in (system_area) set (log_message_format_ptr);

          unspec (log_message_format) = ""b;
          log_message_format.area_ptr = system_area_ptr;
          log_message_format.caller = "<<not-set>>";
          log_message_format.line_lth = 132;                /* Assume a line-printer page */
          log_message_format.indentation = 0;
          log_message_format.continuation_indent = -1;
          log_message_format.equal_sw = "0"b;
          log_message_format.error_sw = "1"b;               /* Report errors by default */
          log_message_format.prefix = "";
          log_message_format.number_format = "^7d";
          log_message_format.time_format = "iso_time";      /* HH:MM:SS by default */
          log_message_format.date_format = "^9999yc-^my-^dm  ^da  ^za";

          call format_log_message_$adjust (log_message_format_ptr, (0)); /* Guaranteed to work, we supplied the formats */

          P_log_message_format_ptr = log_message_format_ptr;
          return;



format_log_message_$adjust:
     entry (P_log_message_format_ptr, P_code);

          log_message_format_ptr = P_log_message_format_ptr;

          P_code = 0;                                       /* Assume it worked, to begin with */

          call adjust_log_message_format ();

          return;

/*  */

adjust_log_message_format:
     procedure ();

declare   time_string char (40) varying;
declare   result char (80) varying;
declare   base_time fixed bin (71);
declare   test_time fixed bin (71);
declare   base_string char (50) varying;
declare   test_string char (50) varying;
declare   test_idx fixed bin;
declare   DATE_MODULUS (4) fixed bin (52) internal static options (constant) init
         (1f6, 60f6, 3600f6, 86400f6);                      /* In Microseconds: One second, minute, hour, or day */



/* First, see whether there is supposed to be a date break string, and 
   set it appropriately */

          if (log_message_format.date_format ^= "") then do;
               call date_time_$valid_format ((log_message_format.date_format), (0), P_code);
               if (P_code ^= 0) then                        /* Forget it */
                    return;

               call ioa_$rsnnl ("^/^[^^^dx^;^s^]^va^a^/", log_message_format.date_ioa_string, (0),
                    (log_message_format.indentation ^= 0),
                    log_message_format.indentation,
                    length (log_message_format.prefix),
                    log_message_format.prefix,
                    "^a");                                  /* This is where the date result is inserted */

/* This block of code determines when the "date" line should be printed-- 
   it is printed each time it would differ between two adjacent messages,
   and we test to see whether that happens when the second, minute, hour,
   or actual day is the breakpoint. */

               base_time = 0;                               /* Start out at zero, find where it differs */
               base_string = date_time_$format ((log_message_format.date_format), base_time, "", "");
               test_string = base_string;                   /* Break the loop when these differ */
               log_message_format.date_modulus = 0;

               do test_idx = lbound (DATE_MODULUS, 1) to hbound (DATE_MODULUS, 1)
                         while (test_string = base_string);

                    log_message_format.date_modulus = DATE_MODULUS (test_idx);
                    test_time = base_time + DATE_MODULUS (test_idx);
                    test_string = date_time_$format ((log_message_format.date_format), test_time, "", "");
                    end;
               end;
          else log_message_format.date_ioa_string = "";

/* Next, figure out the max length of the time string (via a kludge, because 
   there is no date_time_ mechanism for it yet), and save the result. */

          if (log_message_format.time_format ^= "") then do;
               call date_time_$valid_format ((log_message_format.time_format), (0), P_code);
               if (P_code ^= 0) then                        /* Forget it */
                    return;

               time_string = date_time_$format ((log_message_format.time_format), (clock ()), "", "");
               end;
          else time_string = "";

/* Construct the ioa_ string used for messages */

          call ioa_$rsnnl ("^[^^^dx^;^s^]^va^[^a ^;^s^^s^]^[^a ^;^s^^s^]^a^a",
               log_message_format.message_ioa_string, (0),
               (log_message_format.indentation ^= 0),       /* Insert only if there is an indentation */
               log_message_format.indentation,              /* Inserted as ^23x */
               length (log_message_format.prefix),          /* Inserted as literal text */
               log_message_format.prefix,                   /* Inserted only if there is a prefix defined */
               (time_string ^= ""),                         /* Create this field only if there is a time format */
               "^a",                                        /* Time: Result from date_time_$format put here */
               (log_message_format.number_format ^= ""),    /* Create this field only if there is a number format */
               log_message_format.number_format,            /* Message number: Straight ioa_ format */
               "^2d",                                       /* Severity: Always included */
               "^x");                                       /* A space always before the message text */

/* Try it out with reasonable inputs, to see how long it will be */

          call ioa_$rsnnl (log_message_format.message_ioa_string, result, (0),
               time_string, 1, 99);
          log_message_format.prefix_lth = length (result);  /* This is the length of the prefix, without the message */

          if (log_message_format.line_lth = 0) then         /* Apply a default? */
               log_message_format.line_lth = 132;
          else if (log_message_format.line_lth < MIN_LINE_LTH) then
               log_message_format.line_lth = MIN_LINE_LTH;

/* Continuation indent is chosen to allow at least a reasonable number of 
   characters in the continuation lines, without overflowing the specified
   line length. It is, however, the caller's responsibility not to overflow
   the first line by specifying too large a prefix and indentation. And, of
   course, if the caller supplies his own continuation_indent, all bets are
   off (we interpret negative numbers to mean "default". */
   
	if (log_message_format.continuation_indent >= 0) then
	     log_message_format.real_continuation_indent = log_message_format.continuation_indent;

          else if ((length (result) + MIN_LINE_LTH) > log_message_format.line_lth) then
               log_message_format.real_continuation_indent = log_message_format.line_lth - MIN_LINE_LTH;

          else log_message_format.real_continuation_indent = length (result);

          return;
          end adjust_log_message_format;

/*  */

format_log_message_$free:
     entry (P_log_message_format_ptr);

	log_message_format_ptr = P_log_message_format_ptr;

	if (log_message_format_ptr = null ()) then return;

	P_log_message_format_ptr = null ();

	system_area_ptr = log_message_format.area_ptr;
	free log_message_format in (system_area);

	return;

/* */

format_log_message_$format:
     entry (P_log_message_format_ptr, P_log_message_ptr, P_prev_message_ptr, P_expansion, P_buffer, P_code);

          log_message_format_ptr = P_log_message_format_ptr;
          log_message_ptr = P_log_message_ptr;
          prev_message_ptr = P_prev_message_ptr;
          P_code = 0;

          own_log_message_format = "0"b;
          if (log_message_format_ptr = null ()) then do;
               own_log_message_format = "1"b;
               call format_log_message_$init (log_message_format_ptr);
               end;

          call format_message_prefix ();

          if (^format_duplicate_message ()) then do;
               call format_message ("0"b);

               if (length (P_expansion) > 0) then
                    call format_message ("1"b);
               end;

          if own_log_message_format then
               call format_log_message_$free (log_message_format_ptr);

          return;

/*  */

format_message_prefix:
     procedure ();

declare   time_string char (100) varying;
declare   date_string char (200) varying;
declare   include_date bit (1) aligned;
declare   this_date fixed bin (30);
declare   previous_date fixed bin (30);



/* Get the character representation of message time, if we're to insert it */

          if (length (log_message_format.time_format) > 0) then
               time_string = date_time_$format ((log_message_format.time_format), (log_message.time), "", "");
          else time_string = "";

          call ioa_$rsnnl (log_message_format.message_ioa_string, message_prefix, (0),
               time_string, log_message.sequence, log_message.severity);

          if (length (log_message_format.date_format) = 0) then
               include_date = "0"b;
          else if (prev_message_ptr = null ()) then
               include_date = "1"b;
          else do;
               this_date = divide ((log_message.time - time_defaults_$zone_delta),
                    log_message_format.date_modulus, 34, 0);
               previous_date = divide ((prev_message_ptr -> log_message.time - time_defaults_$zone_delta),
                    log_message_format.date_modulus, 34, 0);
               include_date = (this_date ^= previous_date);
               end;

          if include_date then do;
               date_string = date_time_$format ((log_message_format.date_format), (log_message.time), "", "");
               call ioa_$rsnnl (log_message_format.date_ioa_string, date_string, (0), (date_string));
                                                            /* date_string passed by value because it is read & written */
               message_prefix = date_string || message_prefix; /* And insert the date at the front */
               end;

          return;
          end format_message_prefix;

/*  */

format_duplicate_message:
     procedure () returns (bit (1) aligned);

          if (prev_message_ptr = null ()) then
               return ("0"b);

	if ^log_message_format.equal_sw
	then return ("0"b);

          if (log_message.text_lth ^= prev_message_ptr -> log_message.text_lth) then
               return ("0"b);

          if (log_message.text ^= prev_message_ptr -> log_message.text) then
               return ("0"b);

	if (length (P_expansion) > 0) then do; /* If there is any expansion present, assume that all the fields become interesting */
	     if (log_message.process_id ^= prev_message_ptr -> log_message.process_id)
		then return ("0"b);
	     if (log_message.data_class_lth ^= prev_message_ptr -> log_message.data_class_lth)
	          then return ("0"b);
	     if (log_message.data_lth ^= prev_message_ptr -> log_message.data_lth)
		then return ("0"b);

	     if (log_message.data_class ^= prev_message_ptr -> log_message.data_class)
		then return ("0"b);

	     if (log_message.data_lth > 0)
		then if (unspec (log_message.data) ^= unspec (prev_message_ptr -> log_message.data)) then
		return ("0"b);
	end;

          P_buffer = message_prefix;
          P_buffer = P_buffer || "==";
          P_buffer = P_buffer || NEWLINE;

          return ("1"b);
          end;

/*  */

format_message:
     procedure (P_add_expansion);

declare   P_add_expansion bit (1) aligned parameter;        /* Whether we are processing text or expansion */

declare   text_ptr pointer;                                 /* Pointer to text portion of message, for ease of use */
declare   text_used fixed bin;                              /* Amount of message text used by previous lines of message */
declare   text_lth fixed bin;                               /* Total length of message text */
declare   line_lth fixed bin;                               /* Length of the "line"-- portion of this message that will */
                                                            /* be placed into the output buffer-- adjusted for breaking */
declare   breaking_lth fixed bin;                           /* Number of chars at end of line to consider looking for */
                                                            /* place to break this line of the message-- we don't scan */
                                                            /* the entire line in order to avoid a real short piece */
                                                            /* immediately followed by a very long one. Never more */
                                                            /* than half the line length, and never more than MAX_BREAK */

declare 1 text unaligned based (text_ptr),
          2 used char (text_used),
          2 line,
            3 before char (line_lth),
            3 after char (breaking_lth);

declare   prefix_lth fixed bin;                             /* Length of string preceding text of message: starts out */
                                                            /* as length of previously formatted prefix (which may */
                                                            /* contain newlines), and is set to real_continuation_indent */
                                                            /* for the second through last lines */

declare   output_ptr pointer;                               /* Pointer to varying output string overlay */
declare   output_line_lth fixed bin;                        /* Max length of current output line (adjusted for prefix) */
declare   output_used fixed bin;                            /* Number of characters used in output */
declare   output_max_lth fixed bin;                         /* Max size of output buffer */

declare   continuation_line bit (1) aligned;                /* Set for second through last output lines */
declare 1 output aligned based (output_ptr),                /* Overlay for varying string output buffer */
          2 lth fixed bin,
          2 used char (0 refer (output.lth)) unaligned,
          2 prefix char (prefix_lth) unaligned,
          2 text_line char (line_lth) unaligned,
          2 newline char (1) unaligned;

declare   nl_idx fixed bin;                                 /* Used to find intentional line breaks in message */
declare   max_breaking_lth fixed bin;                       /* Used to calculate maximum value for breaking_lth */
declare   break_idx fixed bin;                              /* Used to find a good place to break the line */
declare   break_char char (1) unaligned;                    /* Temporary copy of char at which line is broken */

declare   text_remaining bit (1) aligned;                   /* Used to simulate DO ... UNTIL */

declare   MAX_BREAKING_LTH fixed bin internal static options (constant) init (20);
declare   ALL_BREAK_CHARS char (12) unaligned internal static options (constant) init ("([{}]) .,;:|");
declare   BREAK_BEFORE_CHARS char (3) unaligned internal static options (constant) init ("([{");

/* */

          prefix_lth = length (message_prefix);
          output_line_lth = log_message_format.line_lth - log_message_format.prefix_lth;
                                                            /* Must use raw prefix length, not the one that may */
                                                            /* include newlines and the date stamp */

          output_ptr = addr (P_buffer);                     /* Collect our output buffer */
          output_max_lth = maxlength (P_buffer);

          text_used = 0;
          breaking_lth = 0;

          if ^P_add_expansion then do;                      /* We are processing the message text this time, so */
               text_lth = length (log_message.text);        /* we start out by emptying the buffer and filling */
               text_ptr = addr (log_message.text);          /* it up with the prefix, and then the text. */

               output.lth = 0;                              /* Empty the buffer */
               output_used = 0;
               continuation_line = "0"b;                    /* The first line is NOT a continuation line */
               total_lines = 0;                             /* And we haven't formatted any lines already */
               end;

          else do;                                          /* Otherwise, we are just appending the expansion */
               text_lth = length (P_expansion);
               text_ptr = addr (substr (P_expansion, 1, 1));

               output_used = output.lth;                    /* See how much we've used already */
               continuation_line = "1"b;                    /* All lines are continuations, for the expansion */
               end;

          text_remaining = "1"b;                            /* Start the loop off right */

          do total_lines = (total_lines + 1) by 1 while (text_remaining);
               line_lth = text_lth - length (text.used);
               nl_idx = index (text.line.before, NEWLINE);
               if (nl_idx > 0) then
                    line_lth = nl_idx - 1;

               if continuation_line then do;                /* Set possibly different values for continuation lines */
                    prefix_lth = log_message_format.real_continuation_indent;
                    output_line_lth = log_message_format.line_lth - prefix_lth;
                    end;

               if (length (text.line.before) > output_line_lth) then do;
                    nl_idx = 0;                             /* Stop skipping of the final newline this time around */
                    line_lth = output_line_lth;             /* Set to maximum allowed */
                    max_breaking_lth = divide (length (text.line.before), 2, 17, 0);

                    breaking_lth = min (max_breaking_lth, MAX_BREAKING_LTH); /* Until now, this has been zero */
                    line_lth = line_lth - breaking_lth;     /* Adjust down -- line.before and line.after are now same */
                    break_idx = search (reverse (text.line.after), ALL_BREAK_CHARS); /* as line.before was previously */

                    if (break_idx = 0) then do;             /* No good choice for break character found */
                         line_lth = line_lth + breaking_lth; /* Set line length back to what it was before, and */
                         breaking_lth = 0;                  /* break arbitrarily at end of line */
                         end;

                    else do;
                         break_idx = 1 + (length (text.line.after) - break_idx); /* Convert back to forward origin */
                         line_lth = line_lth + break_idx;   /* Move the before/after break to include the break char */
                         breaking_lth = breaking_lth - break_idx;

                         break_char = substr (text.line.before, length (text.line.before), 1);
                         if (index (BREAK_BEFORE_CHARS, break_char) ^= 0) then do;
                              line_lth = line_lth - 1;      /* If it's one of these, move back a character */
                              breaking_lth = breaking_lth + 1; /* so we can include this "opening" break in the next */
                              end;                          /* line of the message */

                         breaking_lth = 0;                  /* Now, eliminate the rest of the line, putting it back */
                         end;                               /* for inclusion in the next output line */
                    end;                                    /* After this, breaking_lth is always zero */

               output_used = output.lth + length (output.prefix) + length (output.text_line) + length (output.newline);
               if (output_used > output_max_lth) then do;   /* Buffer has overflowed. Truncate at previous line */
                    return;
                    end;

               if continuation_line then                    /* For continuation lines, just insert a blank prefix */
                    output.prefix = "";                     /* to supply the indentation; otherwise, insert the */
               else output.prefix = message_prefix;         /* real prefix, including date and other info */

               output.text_line = text.line.before;
               output.newline = NEWLINE;
               output.lth = output_used;                    /* Update varying string length value */

	     if substr (output.used, output.lth - 1, 2) = NEWLINE || NEWLINE then
		output.lth = output.lth - 1;		/* prevent blank line in output */

               text_used = text_used + length (text.line.before);

               if (nl_idx > 0) then                         /* Skip embedded newlines */
                    text_used = text_used + 1;

               if (text_used >= text_lth) then              /* Stop the loop */
                    text_remaining = "0"b;

               continuation_line = "1"b;                    /* All remaining lines are continuations */
               end;                                         /* of loop through message */

          return;
          end format_message;

%page; %include log_message_format;
%page; %include log_message;

          end format_log_message_;
