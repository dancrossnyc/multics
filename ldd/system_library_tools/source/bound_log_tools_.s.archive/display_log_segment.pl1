/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   *********************************************************** */
display_log_segment:
dls:
     procedure () options (variable);

/* *	DISPLAY_LOG_SEGMENT
   *
   *	This is a tool for the new log primitives. It is used to display the
   *	contents of a single log segment, in unformatted form.
   *
   *	84-06-01, W. Olin Sibert
   */

declare	arg_count fixed bin;
declare	arg_lth fixed bin (21);
declare	arg_ptr pointer;
declare	arg char (arg_lth) based (arg_ptr);
declare	arg_idx fixed bin;
declare	code fixed bin (35);

declare	brief_sw bit (1) aligned;
declare	trace_sw bit (1) aligned;
declare	header_sw bit (1) aligned;
declare	print_sw bit (1) aligned;

declare   log_data_$new_message_flag bit (36) aligned external static;
declare   log_data_$complete_message_flag bit (36) aligned external static;

declare	error_table_$badopt fixed bin (35) external static;
declare	error_table_$noarg fixed bin (35) external static;
declare	error_table_$inconsistent fixed bin (35) external static;
declare	error_table_$null_info_ptr fixed bin (35) external static;
declare	error_table_$too_many_args fixed bin (35) external static;

declare	com_err_ entry options (variable);
declare	cu_$arg_count entry (fixed bin, fixed bin (35));
declare	cu_$arg_ptr entry (fixed bin, pointer, fixed bin (21), fixed bin (35));
declare	cv_ptr_ entry (char (*), fixed bin (35)) returns (pointer);
declare	cv_ptr_$terminate entry (pointer);
declare	ioa_ entry options (variable);
declare	log_format_time_ entry (fixed bin (71)) returns (char (32) varying);

declare	WHOAMI char (32) internal static options (constant) init ("display_log_segment");

declare	cleanup condition;

declare  (addr, addrel, binary, char, currentsize, null, substr, unspec) builtin;

/* */

	log_segment_ptr = null ();

	on condition (cleanup) call clean_up ();

	call cu_$arg_count (arg_count, code);
	if (code ^= 0) then do;
	     call com_err_ (code, WHOAMI);
	     goto MAIN_RETURN;
	     end;

	call process_args ();

	if header_sw then call display_log ();

	if print_sw then
	     call display_messages ("1"b);
	else if trace_sw then
	     call display_messages ("0"b);

MAIN_RETURN:
	call clean_up ();
	return;

/* */

display_log:
     procedure ();

	call ioa_ ("");
	call ioa_ ("Log segment version ""^a"" at ^p:", log_segment.version, log_segment_ptr);
	call ioa_ ("^3xCreated at ^a", log_format_time_ (log_segment.time_created));
	call ioa_ ("^3x^[No previous log^;Previous log in:^4x""^a""^]",
	     (log_segment.previous_log_dir = ""), log_segment.previous_log_dir);
	call ioa_ ("^3xFirst/last messages: ^d / ^d", log_segment.first_sequence, log_segment.last_sequence);
	call ioa_ ("^3xFirst/last time:     ^a / ^a",
	     log_format_time_ (log_segment.first_time), log_format_time_ (log_segment.last_time));
	call ioa_ ("^3xLast word used:       ^6oo   (^[in^;out of^] service)",
	     binary (substr (unspec (log_segment.alloc_info), 55, 18)),
	     substr (unspec (log_segment.alloc_info), 54, 1));
	call ioa_ ("^3xReal last sequence:  ^d", binary (substr (unspec (log_segment.alloc_info), 18, 36)));
	call ioa_ ("^3xLast word available:  ^6oo", log_segment.max_size);
	call ioa_ ("^3xFirst message at:    ^p", addr (log_segment.data));
	call ioa_ ("^3xListener info not printed yet.");
	call ioa_ ("");

	return;
	end display_log;

/* */

display_messages:
    procedure (P_text);

declare	P_text bit (1) aligned parameter;

declare	msg_idx fixed bin (18);
declare	wasted_space fixed bin;
declare	last_message fixed bin (18);
declare	msg_type char (32);


	msg_idx = 1;
	last_message = binary (substr (log_segment.alloc_info.word_2, 19, 18));
	wasted_space = 0;

	do while (msg_idx <= last_message);
	     log_message_ptr = addr (log_segment.data (msg_idx));
               if (log_message.sentinel = log_data_$new_message_flag) then
		msg_type = "Incomplete message";
               else if (log_message.sentinel = log_data_$complete_message_flag) then
		msg_type = "Complete message";
	     else do;
		wasted_space = wasted_space + 1;
		msg_idx = msg_idx + 1;
		goto NEXT_WORD;
		end;

	     if (wasted_space > 0) then
		call ioa_ ("Wasted space^7xat ^p (^d words)",
		     addrel (log_message_ptr, (0 - wasted_space)), wasted_space);
	     wasted_space = 0;

	     call ioa_ ("^18a at ^p: ^d chars, ^d words",
		msg_type, log_message_ptr, log_message.text_lth, log_message.data_lth);

	     if P_text then do;
		call ioa_ ("^3xSequence:^5x^d", log_message.sequence);
		call ioa_ ("^3xSeverity:^5x^d", log_message.severity);
		call ioa_ ("^3xTime:^9x^a", log_format_time_ ((log_message.time)));
		call ioa_ ("^3xProcess:^6x^w", log_message.process_id);
		call ioa_ ("^3xText:^9x""^a""", log_message.text);

		if (log_message.data_lth ^= 0) then do;
		     call ioa_ ("^3xData class:^3x""^a""", log_message.data_class);
		     call ioa_ ("^3xData:^9x^d words at ^p", log_message.data_lth, addr (log_message.data));
		     end;
		call ioa_ ("");

		end;

	     msg_idx = msg_idx + currentsize (log_message);

NEXT_WORD:
	     end;

	if (wasted_space > 0) then
	     call ioa_ ("Wasted space^7xat ^p (^d words)^/",
		addrel (log_message_ptr, (0 - wasted_space)), wasted_space);

	return;
	end display_messages;

/* */

process_args:
     procedure ();

	brief_sw = "0"b;
	header_sw = "1"b;
	trace_sw = "0"b;
	print_sw = "0"b;

	do arg_idx = 1 to arg_count;
	     call cu_$arg_ptr (arg_idx, arg_ptr, arg_lth, (0));

	     if (arg = "-brief") | (arg = "-bf") then brief_sw = "1"b;
	     else if (arg = "-long") | (arg = "-lg") then brief_sw = "0"b;
	     else if (arg = "-header") | (arg = "-he") then header_sw = "1"b;
	     else if (arg = "-no_header") | (arg = "-nhe") then header_sw = "0"b;
	     else if (arg = "-trace") then trace_sw = "1"b;
	     else if (arg = "-no_trace") then trace_sw = "0"b;
	     else if (arg = "-print") | (arg = "-pr") then print_sw = "1"b;
	     else if (arg = "-no_print") | (arg = "-npr") then print_sw = "0"b;

	     else if (char (arg, 1) = "-") then do;
		call com_err_ (error_table_$badopt, WHOAMI, "^a", arg);
		goto MAIN_RETURN;
		end;

	     else if (log_segment_ptr = null ()) then do;
		log_segment_ptr = cv_ptr_ (arg, code);
		if (code = 0) & (log_segment_ptr = null ()) then code = error_table_$null_info_ptr;
		if (code ^= 0) then do;
		     call com_err_ (code, WHOAMI, "^a", arg);
		     goto MAIN_RETURN;
		     end;
		end;

	     else do;
		call com_err_ (error_table_$too_many_args, WHOAMI, "Only one log pointer allowed. ^a", arg);
		goto MAIN_RETURN;
		end;
	     end;

	if (log_segment_ptr = null ()) then do;
	     call com_err_ (error_table_$noarg, WHOAMI, "^/Usage:  ^a  LOG_PTR  {-control_args}", WHOAMI);
	     goto MAIN_RETURN;
	     end;

	if (^header_sw) & (^trace_sw) & (^print_sw) then do;
	     call com_err_ (error_table_$inconsistent, WHOAMI,
		"At least one of -header, -trace, and -print must be supplied.");
	     goto MAIN_RETURN;
	     end;

	return;
	end process_args;

/* */

clean_up:
     procedure ();

	if (log_segment_ptr ^= null ()) then
	     call cv_ptr_$terminate (log_segment_ptr);

	return;
	end clean_up;

%page; %include log_segment;
%page; %include log_message;

	end display_log_segment;
