/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1985 *
   *                                                         *
   *********************************************************** */
/* format: style5 */

expand_dial_serv_audit_info_:
        procedure (P_log_message_format_ptr, P_expand_mode_ptr, P_info_ptr,
	  P_info_size, P_expansion, P_code);

/**** This program expands the extended binary information associated
      with dial service audit records in the Answering Service log. */

/* Written 1985-01-28 by E. Swenson */

/* Parameters */

        dcl     P_code		fixed bin (35) parameter;
					      /* status code */
        dcl     P_expand_mode_ptr	ptr parameter;
        dcl     P_expansion		char (*) varying parameter;
					      /* character string to output */
        dcl     P_info_ptr		ptr parameter;  /* pointer to I&A binary info */
        dcl     P_info_size		fixed bin (17) parameter;
					      /* size of binary info */
        dcl     P_log_message_format_ptr
				ptr parameter;

/* Automatic */

        dcl     code		fixed bin (35); /* status code */
        dcl     dial_server_flags	char (24);      /* temporary for flags */
        dcl     ioa_$rsnnl		entry () options (variable);
        dcl     p			ptr;	      /* used to reference binary data */
        dcl     temp		char (1024) varying;
					      /* temporary string */

/* External */

        dcl     error_table_$bad_arg	fixed bin (35) external static;
        dcl     error_table_$unimplemented_version
				fixed bin (35) external static;

/* Builtin */

        dcl     size		builtin;

%page;
/* Program */
        p = P_info_ptr;
        if P_info_size < size (as_dial_service_audit_record_) then
	      do;
	      P_code = error_table_$bad_arg;
	      return;
	      end;

        if p -> as_dial_service_audit_record_.version
	  ^= AS_AUDIT_RECORD_DIALID_VERSION_1 then
	      do;
	      P_code = error_table_$unimplemented_version;
	      return;
	      end;

        P_code = 0;

        if p -> as_dial_service_audit_record_.flags.registered_server then
	      do;
	      if p -> as_dial_service_audit_record_.flags.privileged_server
		then
		    dial_server_flags = "registered,privileged";
	      else
		    dial_server_flags = "registered";
	      end;
        else if p -> as_dial_service_audit_record_.flags.privileged_server then
	      dial_server_flags = "privileged";
        else
	      dial_server_flags = "";

        call ioa_$rsnnl (
	  "Dial qualifier = ^a, Dial server ring = ^d^[, Flags = ""^a""^]^/",
	  temp, (0), p -> as_dial_service_audit_record_.dial_qualifier,
	  p -> as_dial_service_audit_record_.dial_server_ring,
	  (dial_server_flags ^= ""), dial_server_flags);

        P_expansion = P_expansion || temp;
        P_info_size = P_info_size - size (as_dial_service_audit_record_);

        return;

%page;
%include access_audit_bin_header;
%page;
%include as_audit_structures;
%page;
%include user_attributes;
/* format: on */

        end expand_dial_serv_audit_info_;
