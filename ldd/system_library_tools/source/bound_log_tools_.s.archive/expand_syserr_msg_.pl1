/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   *********************************************************** */

/* format: style4 */

expand_syserr_msg_:
     procedure ();

/* *      EXPAND_SYSERR_MSG_
   *
   *      This procedure expands old-style syserr messages, which have a data
   *      class of "syserr". It uses the value of the first word of data to
   *      determine the appropriate procedure to call, then calls it.
   *
   *      Modification history:
   *      84-12-05, W. Olin Sibert: Initial coding
   *	85-01-25, EJ Sharpe: changed expand_ioi_msg_ refs to expand_io_status_msg_
   *	85-02-21, EJ Sharpe: added expanders for SB_mmdam, SB_mdc_del_uidpath, and SB_ibm3270_mde
*/

declare  P_log_message_format_ptr pointer parameter;
declare  P_log_message_ptr pointer parameter;
declare  P_expand_mode_ptr pointer parameter;
declare  P_expansion char (*) varying parameter;
declare  P_code fixed bin (35) parameter;

declare  message_type fixed bin;
declare  expand_proc variable entry (pointer, pointer, pointer, char (*) varying, fixed bin (35));

declare  expand_access_audit_msg_$syserr entry (pointer, pointer, pointer, char (*) varying, fixed bin (35));
declare  expand_config_deck_msg_$syserr entry (pointer, pointer, pointer, char (*) varying, fixed bin (35));
declare  expand_fnp_poll_msg_$syserr entry (pointer, pointer, pointer, char (*) varying, fixed bin (35));
declare  expand_hwfault_msg_$syserr entry (pointer, pointer, pointer, char (*) varying, fixed bin (35));
declare  expand_io_status_msg_$syserr entry (pointer, pointer, pointer, char (*) varying, fixed bin (35));
declare  expand_mos_msg_$syserr entry (pointer, pointer, pointer, char (*) varying, fixed bin (35));
declare  expand_mpc_poll_msg_$syserr entry (pointer, pointer, pointer, char (*) varying, fixed bin (35));
declare  expand_segdamage_msg_$syserr entry (pointer, pointer, pointer, char (*) varying, fixed bin (35));

declare  expand_log_message_$unknown_syserr entry (pointer, pointer, pointer, char (*) varying, fixed bin (35));
declare  expand_voldamage_msg_$syserr entry (pointer, pointer, pointer, char (*) varying, fixed bin (35));
declare  expand_vtoce_msg_$syserr entry (pointer, pointer, pointer, char (*) varying, fixed bin (35));
declare  expand_mmdam_msg_$syserr entry (pointer, pointer, pointer, char (*) varying, fixed bin (35));
declare  expand_mdc_uidpath_msg_$syserr entry (pointer, pointer, pointer, char (*) varying, fixed bin (35));
declare  expand_ibm3270_mde_msg_$syserr entry (pointer, pointer, pointer, char (*) varying, fixed bin (35));

declare  (binary, dimension) builtin;
%page;

expand_syserr_msg_$format:
     entry (P_log_message_format_ptr, P_log_message_ptr, P_expand_mode_ptr, P_expansion, P_code);

	log_message_ptr = P_log_message_ptr;
	P_code = 0;

	if (dimension (log_message.data, 1) = 0) then	/* Nothing to expand */
	     return;

	message_type = binary (log_message.data (1));

/* This exhaustive search is done solely to enhance readability of the program. Eventually, it
   will go away, when syserr callers are converted to use real data classes. */

/* format: off */
	call check (SB_disk_err,	expand_io_status_msg_$syserr);	/* 1 */
	call check (SB_hw_fault,	expand_hwfault_msg_$syserr);		/* 2 */
	call check (SB_io_err,	expand_io_status_msg_$syserr);	/* 3 */
	call check (SB_unused_4,	expand_log_message_$unknown_syserr);	/* 4 */
	call check (SB_mos_err,	expand_mos_msg_$syserr);		/* 5 */

	call check (SB_unused_6,	expand_log_message_$unknown_syserr);	/* 6 */
	call check (SB_unused_7,	expand_log_message_$unknown_syserr);	/* 7 */
	call check (SB_unused_8,	expand_log_message_$unknown_syserr);	/* 8 */
	call check (SB_unused_9,	expand_log_message_$unknown_syserr);	/* 9 */
	call check (SB_unused_10,	expand_log_message_$unknown_syserr);	/* 10 */

	call check (SB_zerpag,	expand_segdamage_msg_$syserr);	/* 11 */
	call check (SB_unused_12,	expand_log_message_$unknown_syserr);	/* 12 */
	call check (SB_vtoc_salv_dam,	expand_segdamage_msg_$syserr);	/* 13 */
	call check (SB_unused_14,	expand_log_message_$unknown_syserr);	/* 14 */
	call check (SB_unused_15,	expand_log_message_$unknown_syserr);	/* 15 */

	call check (SB_random_segdamage, expand_segdamage_msg_$syserr);	/* 16 */
	call check (SB_read_nc,	expand_voldamage_msg_$syserr);	/* 17 */
	call check (SB_unused_18,	expand_log_message_$unknown_syserr);	/* 18 */
	call check (SB_mdc_del_uidpath, expand_mdc_uidpath_msg_$syserr);	/* 19 */
	call check (SB_ocdcm_err,	expand_io_status_msg_$syserr);	/* 20 */

	call check (SB_mmdam,	expand_mmdam_msg_$syserr);		/* 21 */
	call check (SB_verify_lock,	expand_hwfault_msg_$syserr);		/* 22 */
	call check (SB_io_err_detail,	expand_io_status_msg_$syserr);	/* 23 */
	call check (SB_mpc_poll,	expand_mpc_poll_msg_$syserr);		/* 24 */
	call check (SB_fnp_poll,	expand_fnp_poll_msg_$syserr);		/* 25 */

	call check (SB_config_deck,	expand_config_deck_msg_$syserr);	/* 26 */
	call check (SB_vtoce,	expand_vtoce_msg_$syserr);		/* 27 */
	call check (SB_access_audit,	expand_access_audit_msg_$syserr);	/* 28 */

	/* 29 - 34 unused */

	call check (SB_ibm3270_mde,	expand_ibm3270_mde_msg_$syserr);	/* 35 */
/* format: on */

	expand_proc = expand_log_message_$unknown_syserr;

CALL_EXPANDER:
	call expand_proc (P_log_message_format_ptr, log_message_ptr, P_expand_mode_ptr, P_expansion, P_code);

	return;
%page;

check:
     procedure (P_msg_type, P_expander);

declare  P_msg_type fixed bin;
declare  P_expander entry;


	if (message_type ^= P_msg_type) then
	     return;

	expand_proc = P_expander;

	goto CALL_EXPANDER;

     end check;

/* format: off */
%page; %include log_message;
%page; %include syserr_binary_def;

          end expand_syserr_msg_;
