/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   *********************************************************** */
log_expand_select_:
     procedure ();

/* *	LOG_EXPAND_SELECT_
   *
   *	This procedure is used to maintain the list of message classes and modes
   *	for expansion of log messages.  The log perusal commands all accept
   *	an optional list of message classes to be expanded; each message class
   *	can additionally include a mode string controlling the format of the
   *	expansion (interpreted by the individual expansion procedure).
   *
   *	84-07-04, W. Olin Sibert
   *      84-11-30, BIM: Added $print entrypoint
   *      84-12-05, WOS: Removed octal_sw from the mechanism
   */

declare	P_expand_select_ptr pointer parameter;
declare	P_expand_mode char (*) parameter;
declare	P_log_message_ptr pointer parameter;
declare	P_expand_sw bit (1) aligned parameter;
declare	P_mode_ptr pointer parameter;
declare	P_code fixed bin (35) parameter;
declare   P_iocb_ptr pointer;
declare   P_indent fixed bin;

declare   code fixed bin (35);
declare	expand_select_ptr pointer;
declare	alloc_expand_select_max_entries fixed bin;
declare	expand_select_area area based (expand_select.area_ptr);
declare   mode_string char (500);

declare 1 expand_select aligned based (expand_select_ptr),
	2 max_entries fixed bin,
	2 n_entries fixed bin,
	2 area_ptr pointer,
	2 array (alloc_expand_select_max_entries refer (expand_select.max_entries)),
	  3 class char (16) varying,
	  3 mode_ptr pointer;

declare	data_class char (16) varying;
declare	entry_found bit (1) aligned;
declare	entry_idx fixed bin;
declare	mode_string_delim fixed bin;

declare	error_table_$log_message_invalid_type fixed bin (35) external static;

declare   ioa_$ioa_switch entry() options(variable);
declare	get_system_free_area_ entry () returns (pointer);
declare	mode_string_$parse entry (char (*), pointer, pointer, fixed bin (35));
declare   mode_string_$get entry (pointer, character (*), fixed binary (35));

declare	ALPHANUMERIC char (37) internal static options (constant) init ("_0123456789abcdefghijklmnopqrstuvwxyz");

declare  (index, length, null, substr, verify) builtin;

/* */

log_expand_select_$add:
     entry (P_expand_select_ptr, P_expand_mode, P_code);

	expand_select_ptr = P_expand_select_ptr;

	mode_string_delim = index (P_expand_mode, ":");	/* Figure out where the mode string, if any, is located, */
	if (mode_string_delim = 0) then		/* and extract the message type from before it */
	     data_class = P_expand_mode;
	else data_class = substr (P_expand_mode, 1, mode_string_delim - 1);

	if (data_class = "") | (length (data_class) > 12) | (verify (data_class, ALPHANUMERIC) ^= 0) then do;
	     P_code = error_table_$log_message_invalid_type;
	     return;
	     end;

	if (expand_select_ptr = null ()) then		/* Allocate a new one even though we only *might* need it */
	     expand_select_ptr = make_new_table (10);	/* If we're replacing an existing entry, this will result */
	else if (expand_select.n_entries >= expand_select.max_entries) then	/* in at most one extra entry */
	     expand_select_ptr = make_new_table (10 + expand_select.max_entries);

	entry_found = "0"b;
	do entry_idx = 1 to expand_select.n_entries while (^entry_found);
	     if (expand_select.class (entry_idx) = data_class) then entry_found = "1"b;
	     end;

	if (entry_idx > expand_select.n_entries) then do; /* A new entry is required. Initialize it */
	     expand_select.class (entry_idx) = data_class;
	     expand_select.mode_ptr (entry_idx) = null (); /* This will be initialized later, as required */
	     expand_select.n_entries = entry_idx;
	     end;

	else do;					/* Existing entry is being replaced */
	     if (mode_string_delim > 0) then		/* Flush the old mode string if a new one is provided */
		if (expand_select.mode_ptr (entry_idx) ^= null ()) then do;
		     mode_string_info_ptr = expand_select.mode_ptr (entry_idx);
		     expand_select.mode_ptr (entry_idx) = null ();
		     free mode_string_info_ptr -> mode_string_info in (expand_select_area);
		     end;
	     end;

	if (mode_string_delim > 0) & (mode_string_delim < length (P_expand_mode)) then do;
	     call mode_string_$parse (substr (P_expand_mode, (mode_string_delim + 1)),
		expand_select.area_ptr, mode_string_info_ptr, P_code);
	     if (P_code ^= 0) then return;		/* Punt if any error occurs converting */
	     expand_select.mode_ptr (entry_idx) = mode_string_info_ptr;
	     end;

	P_expand_select_ptr = expand_select_ptr;	/* All done. Tell caller where the structure is */
	P_code = 0;
	return;

/* */

log_expand_select_$free:
     entry (P_expand_select_ptr);

	expand_select_ptr = P_expand_select_ptr;

	if (expand_select_ptr = null ()) then return;	/* Nothing there */

	P_expand_select_ptr = null ();		/* Don't call us again */

	do entry_idx = 1 to expand_select.n_entries;
	     mode_string_info_ptr = expand_select.mode_ptr (entry_idx);
	     expand_select.mode_ptr (entry_idx) = null ();
	     if (mode_string_info_ptr ^= null ()) then
		free mode_string_info_ptr -> mode_string_info in (expand_select_area);
	     end;

	free expand_select in (expand_select_area);

	return;

/* */

log_expand_select_$test:
     entry (P_expand_select_ptr, P_log_message_ptr, P_expand_sw, P_mode_ptr);

	expand_select_ptr = P_expand_select_ptr;
	log_message_ptr = P_log_message_ptr;

	P_expand_sw = "1"b;				/* Set output argument to default values */
	P_mode_ptr = null ();

	if (expand_select_ptr = null ()) then return;
	if (expand_select.n_entries = 0) then return;

	do entry_idx = 1 to expand_select.n_entries;	/* See if it's one we were asked about */
	     if (expand_select.class (entry_idx) = log_message.data_class) then do;
		P_mode_ptr = expand_select.mode_ptr (entry_idx);
		return;
		end;
	     end;

	P_expand_sw = "0"b;				/* If we had some to try, and this wasn't one of them, */
	return;					/* then it's not to be expanded. */

/*  */

log_expand_select_$print:
	entry (P_expand_select_ptr, P_iocb_ptr, P_indent);

	expand_select_ptr = P_expand_select_ptr;
	if expand_select_ptr = null ()
	then return;

	if expand_select.n_entries = 0 then return;
	call ioa_$ioa_switch (P_iocb_ptr, "^vxExpansion control:", P_indent);
	do entry_idx = 1 to expand_select.n_entries;
	     if expand_select.array (entry_idx).mode_ptr = null ()
	     then mode_string = "";
	     else do;
		call mode_string_$get (expand_select.array (entry_idx).mode_ptr, mode_string, code);
		if code ^= 0 then mode_string = "<bad modes>";
	     end;
               call ioa_$ioa_switch (P_iocb_ptr, "^vx  ^a^[ modes ^a^]",
		P_indent, expand_select.array (entry_idx).class,
		mode_string ^= "",
		mode_string);
	end;
	return;

/* */

make_new_table:
     procedure (P_size) returns (pointer);

declare	P_size fixed bin parameter;

declare	new_ptr pointer;
declare	system_area_ptr pointer;
declare	system_area area based (system_area_ptr);
declare	copy_idx fixed bin;


	alloc_expand_select_max_entries = P_size;
	if (expand_select_ptr = null ()) then
	     system_area_ptr = get_system_free_area_ ();
	else system_area_ptr = expand_select.area_ptr;

	allocate expand_select in (system_area) set (new_ptr);
	new_ptr -> expand_select.area_ptr = system_area_ptr;	/* used for all future allocations */

	if (expand_select_ptr ^= null ()) then do;
	     do copy_idx = 1 to expand_select.n_entries;
		new_ptr -> expand_select.array (copy_idx) = expand_select.array (copy_idx);
		end;
	     new_ptr -> expand_select.n_entries = expand_select.n_entries;
	     free expand_select in (system_area);
	     end;

	else new_ptr -> expand_select.n_entries = 0;

	return (new_ptr);
	end make_new_table;

%page; %include log_message;
%page; %include mode_string_info;

	end log_expand_select_;
