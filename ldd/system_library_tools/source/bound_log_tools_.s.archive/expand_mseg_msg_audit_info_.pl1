/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1985 *
   *                                                         *
   *********************************************************** */

/* format: style1,insnl,linecom,indcomtxt,^indnoniterdo,^inddcls */

expand_mseg_msg_audit_info_:
     procedure (P_log_message_format_ptr, P_expand_mode_ptr, P_info_ptr,
	P_info_size, P_expansion, P_code);

/****
      EXPAND_MSEG_MSG_AUDIT_INFO_

      This is a secondary binary expander for log messages of the
      "access_audit" data class.  It is called by expand_access_audit_msg_
      when the extended binary data is of the proper type.

      History:
      1985-02-26, EJ Sharpe: initial coding
****/

/* Parameters */

dcl     P_code		 fixed bin (35) parameter;	/* status code */
dcl     P_expand_mode_ptr	 ptr parameter;
dcl     P_expansion		 char (*) varying parameter;	/* character string to output */
dcl     P_info_ptr		 ptr parameter;		/* pointer to binary info */
dcl     P_info_size		 fixed bin (17) parameter;	/* size of binary info */
dcl     P_log_message_format_ptr
			 ptr parameter;

/* Automatic */

dcl     code		 fixed bin (35);		/* status code */
dcl     temp		 char (1024) varying;	/* temporary string */

/* Entries */

dcl     display_access_class_	 entry (bit (72) aligned) returns (character (32) aligned);
dcl     ioa_$rsnnl		 entry () options (variable);


/* External */

dcl     error_table_$bad_arg	 fixed bin (35) external static;
dcl     error_table_$unimplemented_version
			 fixed bin (35) external static;

/* Builtin */

dcl     addr		 builtin;
dcl     size		 builtin;
%page;
/* Program */

	audit_mseg_msg_ptr = P_info_ptr;


	if P_info_size < size (audit_mseg_msg_info)
	then do;
	     P_code = error_table_$bad_arg;
	     return;
	end;

	if audit_mseg_msg_info.version ^= AUDIT_MSEG_MSG_INFO_VERSION_5
	then do;
	     P_code = error_table_$unimplemented_version;
	     return;
	end;

	P_code = 0;

	call ioa_$rsnnl (
	     "MSEG V^d descriptor:^/Sender id=^a Sender level=^d Sender pid=^.3b^/Sender authorization=^a Sender max authorization=^a Sender audit=^.3b^/Message ID=^.3b Access class=^a",
	     temp, (0),
	     audit_mseg_msg_info.version,
	     audit_mseg_msg_info.descriptor.sender_id,
	     audit_mseg_msg_info.descriptor.sender_level,
	     audit_mseg_msg_info.descriptor.sender_process_id,
	     display_access_class_ ((audit_mseg_msg_info.descriptor.sender_authorization)),
	     display_access_class_ ((audit_mseg_msg_info.descriptor.sender_max_authorization)),
	     audit_mseg_msg_info.descriptor.sender_audit,
	     audit_mseg_msg_info.descriptor.ms_id,
	     display_access_class_ ((audit_mseg_msg_info.ms_access_class)));

	P_expansion = P_expansion || temp;

/* tell expand_access_audit_msg_ how much we've done */
	P_info_size = P_info_size - size (audit_mseg_msg_info);

	return;

/* format: off */
%page; %include access_audit_mseg_info;

        end expand_mseg_msg_audit_info_;

