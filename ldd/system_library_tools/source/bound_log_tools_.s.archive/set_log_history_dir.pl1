/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   *********************************************************** */
/* format: style2,indcomtxt */
set_log_history_dir:
     procedure () options (variable);

/**** Modification History:
      Created 1985-01-16, BIM */


	declare arg		 char (arg_lth) based (arg_ptr);
	declare arg_lth		 fixed bin (21);
	declare arg_ptr		 pointer;
	declare arg_count		 fixed bin;
	declare code		 fixed bin (35);
	declare log_dname		 char (168);
	declare log_ename		 char (32);
	declare log_history_dir	 char (168);
	declare sci_ptr		 pointer;
	declare type		 fixed bin (2);
	declare yes		 bit (1) aligned;

	declare absolute_pathname_	 entry (character (*), character (*), fixed binary (35));
	declare com_err_		 entry options (variable);
	declare command_query_$yes_no	 entry () options (variable);

	declare cu_$arg_list_ptr	 entry returns (pointer);
	declare expand_pathname_	 entry (char (*), char (*), char (*), fixed bin (35));
	declare hcs_$status_minf	 entry (char (*), char (*), fixed bin (1), fixed bin (2), fixed bin (24),
				 fixed bin (35));
	declare initiate_file_	 entry (character (*), character (*), bit (*), pointer, fixed binary (24),
				 fixed binary (35));
	declare pathname_		 entry (char (*), char (*)) returns (char (168));

	declare ssu_$arg_count	 entry (ptr, fixed bin);
	declare ssu_$standalone_invocation
				 entry (ptr, char (*), char (*), ptr, entry, fixed bin (35));
	declare ssu_$destroy_invocation
				 entry (ptr);
	declare ssu_$arg_ptr	 entry (ptr, fixed bin, ptr, fixed bin (21));
	declare ssu_$abort_line	 entry () options (variable);
	declare terminate_file_	 entry (pointer, fixed binary (24), bit (*), fixed binary (35));

	declare error_table_$notadir	 fixed bin (35) ext static;
	declare error_table_$noentry	 fixed bin (35) ext static;

	declare cleanup		 condition;


	declare COMMAND_NAME	 char (32) internal static options (constant) init ("set_log_history_dir");


	sci_ptr, log_segment_ptr = null ();

	on condition (cleanup) call clean_up ();

	call ssu_$standalone_invocation (sci_ptr, COMMAND_NAME, "1.0", cu_$arg_list_ptr (), SSU_ABORT, code);
	if code ^= 0
	then do;
		call com_err_ (code, COMMAND_NAME, "Unable to create ssu invocation.");
		return;
	     end;


	call ssu_$arg_count (sci_ptr, arg_count);
	if arg_count ^= 2
	then call ssu_$abort_line (sci_ptr, 0, "Usage: ^a LOG_PATH LOG_HISTORY_DIR_PATH", COMMAND_NAME);
	call ssu_$arg_ptr (sci_ptr, 1, arg_ptr, arg_lth);
	call expand_pathname_ (arg, log_dname, log_ename, code);
	if code ^= 0
	then call ssu_$abort_line (sci_ptr, code, "^a", arg);
	call initiate_file_ (log_dname, log_ename, RW_ACCESS, log_segment_ptr, (0), code);
	if code ^= 0
	then call ssu_$abort_line (sci_ptr, code, "^a", pathname_ (log_dname, log_ename));
	if log_segment.version ^= LOG_SEGMENT_VERSION_1
	then call ssu_$abort_line (sci_ptr, 0,
		"The segment ^a is not a current version log segment or is seriously damaged.",
		pathname_ (log_dname, log_ename));
	call ssu_$arg_ptr (sci_ptr, 2, arg_ptr, arg_lth);
	call absolute_pathname_ (arg, log_history_dir, code);
	if code ^= 0
	then call ssu_$abort_line (sci_ptr, code, "^a", code);
	call hcs_$status_minf (log_history_dir, "", (1), type, (0), code);
	if code = 0 & type ^= 2
	then code = error_table_$notadir;
	if code = 0
	then yes = "1"b;
	else if code = error_table_$noentry
	then call command_query_$yes_no (yes, 0, COMMAND_NAME, "",
		"The directory ^a does not exist. Are you sure that you want to set it as the history dir?",
		log_history_dir);
	else if code ^= 0
	then call command_query_$yes_no (yes, code, COMMAND_NAME, "",
		"^a. Are you sure that you want to set it as the history directory?",
	          log_history_dir);
	if ^yes
	then call ssu_$abort_line (sci_ptr, 0, "History dir not changed.");
	log_segment.previous_log_dir = log_history_dir;
	call clean_up;
	return;

SSU_ABORT:
     procedure;
	go to ABORT_LABEL;
     end SSU_ABORT;

ABORT_LABEL:
	call clean_up;
	return;

clean_up:
     procedure;

	if log_segment_ptr ^= null ()
	then call terminate_file_ (log_segment_ptr, (0), TERM_FILE_TERM, (0));
	if sci_ptr ^= null ()
	then call ssu_$destroy_invocation (sci_ptr);
	return;
     end clean_up;

/* format: off */
%page; %include log_segment;
%page; %include access_mode_values;
%include terminate_file;

        end set_log_history_dir;
