/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1989                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(89-01-16,TLNguyen), approve(89-01-16,MCR8046),
     audit(89-02-03,Parisek), install(89-02-27,MR12.3-1015):
     Set sci_ptr value before referencing the it.
                                                   END HISTORY COMMENTS */


log_limit_scan_:
     procedure (P_caller_sci_ptr, P_log_limit_info_ptr, 
	      P_reverse_sw, P_log_read_ptr);

/* *	LOG_LIMIT_SCAN_
   *
   *	This procedure is used by log-scanning programs to implement the 
   *	-to / -from / -for / -last control arguments. See print_sys_log
   *	for an example of its use. 
   *
   *	Modification history:
   *	84-08-23, W. Olin Sibert: Initial coding
   *      1984-12-10, BIM: remove the entry variables, convert to ssu_.
   *      1984-12-16, BIM: added hold/free message calls for inner ring logs.
   *	1985-03-11, Steve Herbst: Fixed to say "Log is empty." if so.
   *	1985-04-04, Steve Herbst: Fixed -from N, -to N to allow for
   *		missing sequence numbers in log.
   *	1985-05-01, Steve Herbst: Fixed bug that returned the msgs before
   *		and after the range if none in range.
   */

declare	P_caller_sci_ptr pointer;
declare	P_log_limit_info_ptr pointer parameter;
declare	P_reverse_sw bit (1) aligned parameter;
declare	P_log_read_ptr pointer parameter;

declare	(FROM_TYPE init (1), TO_TYPE init (2)) fixed bin int static options (constant);

declare	code fixed bin (35);
declare   sci_ptr pointer;
declare	log_read_ptr pointer;

declare 1 opt aligned automatic,
	2 to_number fixed bin (35),
	2 from_number fixed bin (35),
	2 for_number fixed bin (35),
	2 last_number fixed bin (35),
	2 to_time fixed bin (71),
	2 from_time fixed bin (71),
	2 for_time fixed bin (71),
	2 last_time fixed bin (71);

declare	to_given bit (1) aligned;
declare	from_given bit (1) aligned;
declare	for_given bit (1) aligned;
declare	last_given bit (1) aligned;
declare	none_given bit (1) aligned;

declare	error_table_$bad_conversion fixed bin (35) external static;
declare	error_table_$inconsistent fixed bin (35) external static;
declare	error_table_$no_log_message fixed bin (35) external static;
declare   error_table_$unimplemented_version fixed bin(35) ext static;

declare	cv_dec_check_ entry (char (*), fixed bin (35)) returns (fixed bin (35));
declare	convert_date_to_binary_ entry (char (*), fixed bin (71), fixed bin (35));
declare	convert_date_to_binary_$relative entry (char (*), fixed bin (71), fixed bin (71), fixed bin (35));

declare   log_read_$free_message entry (pointer, pointer);
declare   log_read_$hold_message entry (pointer, pointer);
declare   log_read_$position_sequence entry (pointer, fixed binary (35), bit (1) aligned, pointer,
	fixed binary (35));
declare   log_read_$position_time entry (pointer, fixed binary (71), bit (1) aligned, pointer, fixed binary (35));
declare	log_format_time_ entry (fixed bin (71)) returns (char (32) varying);
declare   ssu_$abort_line entry options(variable);

declare	AFTER init (1) fixed bin internal static options (constant);
declare	BEFORE init (-1) fixed bin internal static options (constant);

declare  (clock, max, null) builtin;

/* */

	log_limit_info_ptr = P_log_limit_info_ptr;
	log_read_ptr = P_log_read_ptr;
	sci_ptr = P_caller_sci_ptr;

	if log_limit_info.version ^= LOG_LIMIT_INFO_VERSION_1
	then call ssu_$abort_line (sci_ptr, error_table_$unimplemented_version, "Invalid version ^a in call to log_limit_scan_.", log_limit_info.version);

	call get_time_or_number ("-from", log_limit_info.from_opt, opt.from_time, opt.from_number);
	call get_time_or_number ("-to", log_limit_info.to_opt, opt.to_time, opt.to_number);
	call get_time_or_number ("-for", log_limit_info.for_opt, opt.for_time, opt.for_number);
	call get_time_or_number ("-last", log_limit_info.last_opt, opt.last_time, opt.last_number);

	call check_consistency ();

	call find_message_limits ();

MAIN_RETURN:
	return;

/* */

check_consistency:
     procedure ();

/* The get_time_or_number procedure has already made sure that only one of each of these is true */

	to_given = (opt.to_number >= 0) | (opt.to_time >= 0);
	from_given = (opt.from_number >= 0) | (opt.from_time >= 0);
	for_given = (opt.for_number >= 0) | (opt.for_time >= 0);
	last_given = (opt.last_number >= 0) | (opt.last_time >= 0);
	none_given = ^(to_given | from_given | for_given | last_given);

/* Reject the impossible combinations of control arguments */

	if to_given & for_given then call inconsistent ("-to and -for");
	if to_given & last_given then call inconsistent ("-to and -last");
	if from_given & last_given then call inconsistent ("-from and -last");
	if for_given & last_given then call inconsistent ("-for and -last");
	if for_given & ^from_given then call inconsistent ("-for and not -from");

/* There are six valid combinations remaining after this filtering:
       1) No specifiers at all     - Whole log
       2) -to      alone	     - Beginning up to limit
       3) -from    alone	     - Limit up to now
       4) -last    alone	     - Now minus limit until now
       5) -from    and     -to     - Limit-1 to Limit-2
       6) -from    and     -for    - Limit-1 to Limit-1 plus Limit-2
   This is additionally complicated by cases 4 & 6, which must count *matching*
   messages, rather than simply doing arithmetic on message numbers.
   */

	return;
	end check_consistency;

/* */

find_message_limits:
     procedure ();

declare	from_relative_time fixed bin (71);
declare	last_time_delta fixed bin (71);
declare	exchange_ptr pointer;

declare 1 first_message aligned like log_message.header based (log_limit_info.first_msg);
declare 1 last_message aligned like log_message.header based (log_limit_info.last_msg);


	log_limit_info.first_msg = null ();
	log_limit_info.last_msg = null ();
	log_limit_info.msg_count = -1;

/* First, see if we have absolute numeric or time values for any of the limits,
   and find the appropriate messages for the limits. */

	if (opt.to_number >= 0) then do;
	     call free_message (log_limit_info.last_msg);
	     log_limit_info.last_msg = find_message_number (opt.to_number, TO_TYPE);
	     call hold_message (log_limit_info.last_msg);
	end;

	if (opt.from_number >= 0) then do;
	     call free_message (log_limit_info.first_msg);
	     log_limit_info.first_msg = find_message_number (opt.from_number, FROM_TYPE);
	     call hold_message (log_limit_info.first_msg);
	end;

	if (opt.to_number >= 0) & (opt.from_number >= 0) &
	     (log_limit_info.last_msg ^= null) & (log_limit_info.first_msg ^= null) then
		if log_limit_info.first_msg -> log_message.time > log_limit_info.last_msg -> log_message.time then
		     call ssu_$abort_line (sci_ptr, 0, "No messages within specified sequence range.");

/* And now the time range */
	     
	if (opt.to_time >= 0) then do;
	     call free_message (log_limit_info.last_msg);
	     log_limit_info.last_msg = find_message_time (opt.to_time, BEFORE);
	     call hold_message (log_limit_info.last_msg);
	end;

	if (opt.from_time >= 0) then do;
	     call free_message (log_limit_info.first_msg);
	     log_limit_info.first_msg = find_message_time (opt.from_time, AFTER);
	     call hold_message (log_limit_info.first_msg);
	end;

	if (opt.to_time >= 0) & (opt.from_time >= 0) &
	     (log_limit_info.last_msg ^= null) & (log_limit_info.first_msg ^= null) then
		if log_limit_info.first_msg -> log_message.time > log_limit_info.last_msg -> log_message.time then
		     call ssu_$abort_line (sci_ptr, 0, "No messages within specified time range.");

/* Second, calculate any of the implied absolute limits */

	if none_given then do;			/* These calls are guaranteed to succeed */
	     call free_message (log_limit_info.first_msg);
	     call free_message (log_limit_info.last_msg);
	     log_limit_info.first_msg = find_message_time (0, AFTER);
	     log_limit_info.last_msg = find_message_time (clock (), BEFORE);
	     call hold_message (log_limit_info.first_msg);
	     call hold_message (log_limit_info.last_msg);
	end;

	if from_given & ^(to_given | for_given) then do;
	     call free_message (log_limit_info.last_msg);
	     log_limit_info.last_msg = find_message_time (clock (), BEFORE);
	     call hold_message (log_limit_info.last_msg);
	end;

	if to_given & ^from_given then do;
	     call free_message (log_limit_info.first_msg);
	     log_limit_info.first_msg = find_message_time (0, AFTER);
	     call hold_message (log_limit_info.first_msg);
	end;

/* Third, if we have relative limit numbers, set the limit counter to so indicate */

	if (opt.last_number > 0) then do;
	     log_limit_info.msg_count = opt.last_number;
	     call free_message (log_limit_info.last_msg);
	     log_limit_info.last_msg = find_message_time (clock (), BEFORE);
	     call hold_message (log_limit_info.last_msg);
	     end;

	if (opt.for_number > 0) then
	     log_limit_info.msg_count = opt.for_number;

/* Finally, handle the relative limits: -for TIME and -last TIME; these must be
   recalculated explicitly now that we know the relevant message start limits.
   Note that this is why we squirreled away the character representations of the
   argument for -for. */

	if (opt.for_time >= 0) then do;		/* Turn -for into a relative time if appropriate */
	     if (opt.from_time >= 0) then		/* We are guaranteed to have a -from time or message number */
		from_relative_time = opt.from_time;	/* here, and therefore to have a valid first_message ptr */
	     else from_relative_time = first_message.time;
						/* If it's a message number we have */

						/* we get the time out of the message. */

               call convert_date_to_binary_$relative ((log_limit_info.for_opt), opt.for_time, from_relative_time, code);
	     if (code ^= 0) then 	/* Shouldn't happen, since it worked before */
		call ssu_$abort_line (sci_ptr, code, "-for ^a after ^a",
		     log_limit_info.for_opt, log_format_time_ (from_relative_time));

	     call free_message (log_limit_info.last_msg);
	     log_limit_info.last_msg = find_message_time (opt.for_time, BEFORE);
	     call hold_message (log_limit_info.last_msg);
	     end;

	if (opt.last_time >= 0) then do;		/* Turn -last into backwards offset from now */
	     from_relative_time = clock ();		/* We have to subtract it from the one we have */
	     call free_message (log_limit_info.last_msg);
	     log_limit_info.last_msg = find_message_time (from_relative_time, BEFORE);
	     call hold_message (log_limit_info.last_msg);
	     last_time_delta = max (0, (opt.last_time - from_relative_time));
	     call free_message (log_limit_info.first_msg);
	     log_limit_info.first_msg = find_message_time ((from_relative_time - last_time_delta), BEFORE);
	     call hold_message (log_limit_info.first_msg);
	     end;

/* We also must exchange the limits in case something is out of sequence */

	if (log_limit_info.first_msg ^= null ()) then
	     if (log_limit_info.last_msg ^= null ()) then
		if (first_message.sequence > last_message.sequence) then
		     if (first_message.time > last_message.time) then do;
			exchange_ptr = log_limit_info.first_msg;
			log_limit_info.first_msg = log_limit_info.last_msg;
			log_limit_info.last_msg = exchange_ptr;
			end;

/* Some validity checks in case the amazing mess above does not, in fact, work. */

	if (log_limit_info.first_msg = null ()) & (log_limit_info.last_msg = null ()) then 
	     call ssu_$abort_line (sci_ptr, 0, "Internal error in log_limit_scan_: first and last message pointers are both null.");

	if ((log_limit_info.first_msg = null ()) | (log_limit_info.last_msg = null ())) & (log_limit_info.msg_count < 0) then 
	     call ssu_$abort_line (sci_ptr, 0, "Internal error in log_limit_scan_: null first/last message pointer and no limit count.");

/* NOTE: THESE TESTS REMOVED 84-09-30 BECAUSE THEY SEEMED LIKE A POOR IDEA
	if (log_limit_info.first_msg = null ()) & ^P_reverse_sw then
	     call inconsistent ("No initial message specified and not -reverse.");

	if (log_limit_info.last_msg = null ()) & P_reverse_sw then
	     call inconsistent ("No final message specified and -reverse.");
*******/

	return;
	end find_message_limits;

/* */

find_message_number:
     procedure (P_number, P_arg_type) returns (pointer);

declare	(P_number, number) fixed bin (35);
declare	(P_arg_type, i) fixed bin;

declare	msg_ptr pointer;


	number = P_number;
	code = 1;

	do i = 1 to 20 while (code ^= 0);		/* allow 20 missing sequence numbers in log */

	     call log_read_$position_sequence (log_read_ptr, number, "0"b, msg_ptr, code);

	     if (code = 0) then			/* Require an exact match for this subroutine */
		if (msg_ptr -> log_message.sequence ^= number) then
		     code = error_table_$no_log_message;

	     if (code ^= 0) then			/* might be due to a missing sequence number */
		if P_arg_type = TO_TYPE then number = number - 1;  /* settle for message before that */
		else number = number + 1;		/* or, for -from, the one after that */
	end;

	if (code ^= 0) then 
	     call ssu_$abort_line (sci_ptr, code, "Cannot find message at or ^[before^;after^] #^d",
		P_arg_type = TO_TYPE, P_number);

	return (msg_ptr);
	end find_message_number;



find_message_time:
     procedure (P_time, P_direction) returns (pointer);

declare	P_time fixed bin (71);
declare	P_direction fixed bin;

declare	msg_ptr pointer;


	call log_read_$position_time (log_read_ptr, P_time, (P_direction = AFTER), msg_ptr, code);

	if (code ^= 0) then
	     if P_time = 0 then call ssu_$abort_line (sci_ptr, code, "Log is empty.");
	     else call ssu_$abort_line (sci_ptr, code, "Cannot find message ^[after^;before^] ^a",
		(P_direction = AFTER), log_format_time_ (P_time));

	return (msg_ptr);
	end find_message_time;

/* */

get_time_or_number:
     procedure (P_arg_name, P_arg, P_time, P_number);

declare	P_arg_name char (10) parameter;
declare	P_arg char (50) varying parameter;
declare	P_time fixed bin (71) parameter;
declare	P_number fixed bin (35) parameter;

declare	time fixed bin (71);
declare	number fixed bin (35);


	P_time = -1;
	P_number = -1;

	if (P_arg = "") then return;			/* This argument not specified */

          number = cv_dec_check_ ((P_arg), code);
	if (code = 0) then do;
	     if (number <= 0) then 
		call ssu_$abort_line (sci_ptr, error_table_$bad_conversion,
		"Message number for ^a must be > 0: ^a", P_arg_name, P_arg);
	     
	     P_number = number;
	     return;
	end;

          call convert_date_to_binary_ ((P_arg), time, code);
	if (code ^= 0) then 
	     call ssu_$abort_line (sci_ptr, error_table_$bad_conversion,
		"Invalid ^a message number/time: ^a", P_arg_name, P_arg);

	P_time = time;				/* It's a time value, instead */
	return;

	end get_time_or_number;

/* */

inconsistent:
     procedure (P_message);

declare	P_message char (*) parameter;


	call ssu_$abort_line (sci_ptr, error_table_$inconsistent, "^a", P_message);

	end inconsistent;

free_message:
	procedure (P_message_ptr);
declare P_message_ptr pointer;

	if P_message_ptr = null () then return;
	call log_read_$free_message (log_read_ptr, P_message_ptr);
	P_message_ptr = null ();
	return;
	end free_message;


hold_message:
	procedure (P_message_ptr);
declare P_message_ptr pointer;

	call log_read_$hold_message (log_read_ptr, P_message_ptr);
	return;
	end hold_message;

       

%page; %include log_message;
%page; %include log_limit_info;

	end log_limit_scan_;
