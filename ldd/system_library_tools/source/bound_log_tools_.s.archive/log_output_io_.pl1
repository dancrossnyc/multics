/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   *********************************************************** */
/* log_output_io_.pl1 put_chars for log_output_ */
/* format: style2 */

/**** Created 1984-10 BIM */
/**** Modified 1984-10-22 BIM for get/set_binary_info */
/**** Modified 1984-10-31 BIM for flush_pending_output */
/**** Modified 1984-11-15 BIM to put back bugfix to buffer filling 
      when there is a newline in the middle of output. */
/**** Modified 1985-01-02, BIM: fixed partial line processing. */
/**** Modified 1985-02-10, BIM: another fix: load_buffer_chain to initialize loop control correctly */
/**** Modified 1985-03-25, EJ Sharpe: set return code on control entrypoint,
      add flush_pending_output as io_call control */

log_output_io_:
     procedure;

%page;
%include log_output_attach_data_;
%include log_output_binary_info;
%page;
%include mode_string_info;
%include dump_segment_format;
%page;
%include iocb;
%include io_call_info;
%page;


	declare (
	        Attach_data_ptr	 pointer,
	        IOCB_ptr		 pointer,
	        Buffer_ptr		 pointer,
	        Buffer_length	 fixed bin (21),
	        Info_ptr		 pointer,
	        Order_name		 char (*),
	        Code		 fixed bin (35),
	        (New_modes, Old_modes) character (*)
	        )			 parameter;

	declare buffer_string	 char (Buffer_length) based (Buffer_ptr);
	declare based_pointer	 pointer based;
	declare iocb_ptr		 pointer;
	declare 1 IOCB		 aligned like iocb based (iocb_ptr);
	declare 1 binary_info	 aligned like log_output_binary_info;
	declare code		 fixed bin (35);
	declare dump_segment_	 entry (pointer, pointer, fixed binary, fixed binary (18), fixed binary (18),
				 bit (*));
	declare log_write_$data	 entry (pointer, fixed binary, character (*), pointer, fixed binary,
				 character (16) var, pointer, fixed binary (35));
	declare log_write_$message	 entry (pointer, fixed binary, character (*), pointer, fixed binary (35));

%include iox_entries;

	declare (
	        error_table_$unimplemented_version,
	        error_table_$undefined_order_request,
	        error_table_$null_info_ptr
	        )			 fixed bin (35) ext static;

	declare addcharno		 builtin;
	declare addr		 builtin;
	declare addwordno		 builtin;
	declare byte		 builtin;
	declare divide		 builtin;
	declare hbound		 builtin;
	declare index		 builtin;
	declare length		 builtin;
	declare null		 builtin;
	declare substr		 builtin;


put_chars:
     entry (IOCB_ptr, Buffer_ptr, Buffer_length, Code);
	call setup;

	call process_lines;
	go to return_;

flush_pending_output:
     entry (Attach_data_ptr, Code);

	attach_data_ptr = Attach_data_ptr;
	if attach_data.buffer_chain.head = null ()
	then return;

	call process_lines$$flush;
	go to return_;


modes:
     entry (IOCB_ptr, New_modes, Old_modes, Code);
	call setup;

	begin options (non_quick);			/* dont buy this stack frame for put_chars */

	     declare old_msi_ptr	      pointer;
	     declare temp_string	      character (64);
	     declare i		      fixed bin;
	     declare mode_string_$parse     entry (char (*), ptr, ptr, fixed bin (35));
	     declare mode_string_$get	      entry (ptr, char (*), fixed bin (35));
	     declare mode_string_$combine   entry (ptr, ptr, char (*), fixed bin (35));
	     declare get_system_free_area_  entry () returns (ptr);
	     declare (
		   error_table_$bad_mode_value,
		   error_table_$bad_mode
		   )		      fixed bin (35) external static;

	     Old_modes = attach_data.mode_string;	/* left around from the last time */

	     call mode_string_$parse (New_modes, get_system_free_area_ (), mode_string_info_ptr, code);
	     if code ^= 0
	     then go to return_;

	     do i = 1 to hbound (mode_string_info.modes, 1);
		begin;
		     declare 1 MV		      aligned like mode_value defined (mode_string_info.modes (i));
		     if MV.mode_name = "severity"
		     then do;
			     if ^MV.numeric_valuep
			     then do;
				     code = error_table_$bad_mode_value;
				     go to return_;
				end;
			     attach_data.severity = MV.numeric_value;
			end;
		     else do;
			     code = error_table_$bad_mode;
			     go to return_;
			end;
		end;
	     end;
	     call mode_string_$parse ((attach_data.mode_string), get_system_free_area_ (), old_msi_ptr, (0));
						/* cant be an error, if so, null ptr */
	     call mode_string_$combine (old_msi_ptr, mode_string_info_ptr, temp_string, code);
	     if old_msi_ptr ^= null ()
	     then free old_msi_ptr -> mode_string_info;
	     free mode_string_info_ptr -> mode_string_info;
	     attach_data.mode_string = temp_string;
	     code = 0;
	     go to return_;
	end;					/* the begin block */
	go to return_;


control:
     entry (IOCB_ptr, Order_name, Info_ptr, Code);

	call setup;
	if Order_name = "get_binary_info"
	then call get_binary_info;
	else if Order_name = "set_binary_info"
	then call set_binary_info;
	else if Order_name = "io_call"
	then call io_call;
	else if Order_name = "get_log_write_data_ptr"
	then do;
		call check_non_null;
		Info_ptr -> based_pointer = attach_data.log_info_ptr;
	     end;
	else if Order_name = "flush_pending_output"
	then call process_lines$$flush;
	else code = error_table_$undefined_order_request;

	goto return_;


return_:
	Code = code;
	return;

setup:
     procedure;
	iocb_ptr = IOCB_ptr -> iocb.actual_iocb_ptr;
	attach_data_ptr = IOCB.attach_data_ptr;
	code = 0;
     end setup;

process_lines:
     procedure;

	declare nl_index		 fixed bin (21);
	declare cp		 pointer;
	declare cl		 fixed bin (21);
	declare caller_chars	 char (cl) based (cp);

	cp = addr (buffer_string);
	cl = length (buffer_string);


	nl_index = index (caller_chars, byte (10));	/* where is the first, (if any) newline ? */
	do while (nl_index > 0);			/* this iterates here when we have written the buffer and the first NL in the new string, and there is another. */
	     if attach_data.buffer_chain.head = null ()
	     then do while (nl_index > 0);
		     call write_line (cp, nl_index - 1);/* zero is ok here */
						/* drop the NL */
		     if nl_index = length (caller_chars)
		     then return;			/* all done */
		     cp = addcharno (cp, nl_index);
		     cl = cl - nl_index;		/* skip past newline */
		     nl_index = index (caller_chars, byte (10));
						/* exit when this finds none */
		end;

	     /*** We can punt if there is no newline here at all. */

	     if nl_index = 0			/* we had no new line at all, or caller fell out of loop with leftovers */
	     /*** no newlines at all. Add to the chain */
	     then do;
		     call add_buffer (cp, cl);	/* caller_chars, whats left of them */
		     return;
		end;

	     /*** There is a newline here, but there is pending information. 
	     We must load up all the buffered data into a buffer. */

	     buffer_length = attach_data.total_buffered_length + nl_index - 1;

	     /*** check for overlength here */

	     allocate buffer in (buffer_area);
	     buffer.next = null ();
	     call load_buffer_chain_into_buffer (buffer_ptr);

/**** pick up first line of new text */

	     if nl_index > 1
	     then substr (buffer.data, buffer.length - (nl_index - 2), nl_index - 1) =
		     substr (caller_chars, 1, nl_index - 1);
						/* If there were a char anf an NL, the one char goes at the last char of the buffer. NL index in that case is 2 */
	     call write_line (addr (buffer.data), buffer.length);
	     free buffer;				/* all gone */

	     if nl_index = length (caller_chars)	/* all used */
	     then return;				/* exit loop without further work */

	     cp = addcharno (cp, nl_index);
	     cl = cl - nl_index;
	     nl_index = index (caller_chars, byte (10));
	end;

	/*** We still have a tail to get rid of. */

	call add_buffer (cp, cl);			/* buffer remainder */
	return;


process_lines$$flush:
     entry;

	buffer_length = attach_data.total_buffered_length;
	if buffer_length = 0
	then return;
	allocate buffer;
	buffer.next = null ();
	call load_buffer_chain_into_buffer (buffer_ptr);
	call write_line (addr (buffer.data), buffer.length);
	free buffer;
	return;

add_buffer:
     procedure (dp, dl);

	declare dp		 pointer;
	declare dl		 fixed bin (21);
	declare data		 char (dl) based (dp);

	if dl = 0
	then return;
	buffer_length = dl;
	attach_data.total_buffered_length = attach_data.total_buffered_length + dl;
	allocate buffer in (buffer_area);
	buffer.data = data;
	buffer.next = null ();
	if attach_data.buffer_chain.tail ^= null ()
	then attach_data.buffer_chain.tail -> buffer.next = addr (buffer);
	attach_data.buffer_chain.tail = addr (buffer);
	if attach_data.buffer_chain.head = null ()
	then attach_data.buffer_chain.head = addr (buffer);
	return;
     end add_buffer;

load_buffer_chain_into_buffer:
     procedure (target_bp);

	declare target_bp		 pointer;
	declare cx		 fixed bin;
	declare tbp		 pointer;
	declare bp		 pointer;
	declare nbp		 pointer;

	cx = 1;
	tbp = target_bp;
	nbp = attach_data.buffer_chain.head;		/* THIS SIMULATES "do until", guaranteeing one trip through loop if there is anthing in the chain */
	do bp = attach_data.buffer_chain.head repeat nbp while (nbp ^= null ());
	     nbp = bp -> buffer.next;			/* we will free */
	     substr (tbp -> buffer.data, cx, bp -> buffer.length) = bp -> buffer.data;
	     cx = cx + bp -> buffer.length;
	     free bp -> buffer;

	end;
	attach_data.total_buffered_length = 0;		/* all gone */
	attach_data.buffer_chain.head, attach_data.buffer_chain.tail = null ();
	return;
     end load_buffer_chain_into_buffer;

write_line:
     procedure (dp, dl);

	declare dp		 pointer;
	declare dl		 fixed bin (21);

	declare line		 char (dl) based (dp);

	if attach_data.binary_data
	then call log_write_$data (attach_data.log_info_ptr, attach_data.severity, line, attach_data.binary_data_ptr,
		(attach_data.binary_data_length), attach_data.binary_data_class, (null ()), code);
	else call log_write_$message (attach_data.log_info_ptr, attach_data.severity, line, (null ()), code);
	return;
     end write_line;
     end process_lines;

get_binary_info:
     procedure;

	call check_non_null;
	log_output_binary_info_ptr = Info_ptr;
	if log_output_binary_info.version ^= LOG_OUTPUT_BINARY_INFO_VERSION_1
	then do;
		code = error_table_$unimplemented_version;
		go to return_;
	     end;

	log_output_binary_info.data_class = attach_data.binary_data_class;
	log_output_binary_info.data_ptr = attach_data.binary_data_ptr;
	log_output_binary_info.data_length = attach_data.binary_data_length;
	return;
     end get_binary_info;

set_binary_info:
     procedure;

	call check_non_null;
	log_output_binary_info_ptr = Info_ptr;
	if log_output_binary_info.version ^= LOG_OUTPUT_BINARY_INFO_VERSION_1
	then do;
		code = error_table_$unimplemented_version;
		go to return_;
	     end;

	if attach_data.binary_data_ptr ^= null
	then free binary_data;
	attach_data.binary_data_class = "";
	attach_data.binary_data_ptr = null ();
	attach_data.binary_data = "0"b;
	if log_output_binary_info.data_class = ""
	then return;
	attach_data.binary_data = "1"b;
	attach_data.binary_data_length = log_output_binary_info.data_length;
	allocate binary_data in (buffer_area) set (attach_data.binary_data_ptr);
	attach_data.binary_data_class = log_output_binary_info.data_class;
	binary_data = log_output_binary_info.data_ptr -> binary_data;
	return;
     end set_binary_info;

io_call:
     procedure;

	call check_non_null;
	io_call_infop = Info_ptr;

	if io_call_info.order_name = "flush_pending_output"
	then call process_lines$$flush;
	else if io_call_info.order_name = "get_binary_info"
	then do;
		if attach_data.binary_data
		then do;
			call io_call_info.report ("Data class ^a", attach_data.binary_data_class);
			dump_segment_format_structure = "0"b;
			dump_segment_format_structure.offset = "1"b;
			dump_segment_format_structure.ascii = "1"b;
			dump_segment_format_structure.octal = "1"b;
			dump_segment_format_structure.raw_data = "1"b;
			dump_segment_format_structure.interpreted_data = "1"b;
			dump_segment_format_structure.suppress_duplicates = "1"b;

			call dump_segment_ (iox_$user_output, attach_data.binary_data_ptr, 0, 0,
			     attach_data.binary_data_length, dump_segment_format);
		     end;
		else call io_call_info.report ("No binary info.");
	     end;
	else if io_call_info.order_name = "set_binary_info"
	then do;
		binary_info.version = LOG_OUTPUT_BINARY_INFO_VERSION_1;
		if io_call_info.args (1) = "-none"
		then binary_info.data_class = "";
		else do;
			binary_info.data_class = io_call_info.args (1);
			binary_info.data_ptr = addwordno (addr (io_call_info.args (2)), 1);
			binary_info.data_length = divide (length (io_call_info.args (2)), 4, 21, 0);
			call iox_$control (iocb_ptr, "set_binary_info", addr (binary_info), code);
		     end;
	     end;
	else code = error_table_$undefined_order_request;
	go to return_;
     end io_call;

check_non_null:
     procedure;

	if Info_ptr = null ()
	then do;
		code = error_table_$null_info_ptr;
		go to return_;
	     end;
	return;
     end check_non_null;

     end log_output_io_;
