/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   *********************************************************** */

/* format: style4 */

expand_ibm3270_mde_msg_:
     procedure ();

/* *      EXPAND_IBM3270_MDE_MSG_
   *
   *	Expander for message from ibm3270_mpx when a queue operation is attempted
   *	on a channel which already has a write operation queued.
   *
   *	85-02-21, EJ Sharpe: initial coding
*/

declare  P_log_message_format_ptr pointer parameter;
declare  P_log_message_ptr pointer parameter;
declare  P_expand_mode_ptr pointer parameter;
declare  P_expansion char (*) varying parameter;
declare  P_code fixed bin (35) parameter;

declare  temp char (2000) varying;

declare  expand_log_message_$unknown_syserr entry (pointer, pointer, pointer, char (*) varying, fixed bin (35));
declare  expand_log_message_$unknown entry (pointer, pointer, pointer, char (*) varying, fixed bin (35));
declare  ioa_$rsnnl entry options (variable);

declare  (addr, binary, dimension, size) builtin;
%page;

expand_ibm3270_mde_msg_$format:
     entry (P_log_message_format_ptr, P_log_message_ptr, P_expand_mode_ptr, P_expansion, P_code);

	log_message_ptr = P_log_message_ptr;

	mdep = addr (log_message.data (1));

	if (size (mde) = dimension (log_message.data, 1))
	then call expand_ibm3270_mde ();
	else call expand_log_message_$unknown
		(P_log_message_format_ptr, log_message_ptr, P_expand_mode_ptr, P_expansion, P_code);

	return;
%page;

/* This is a compatibility entrypoint-- it processes an old-format "syserr" class
   message, which has the syserr binary code in the first word of the data. */

expand_ibm3270_mde_msg_$syserr:
     entry (P_log_message_format_ptr, P_log_message_ptr, P_expand_mode_ptr, P_expansion, P_code);

	log_message_ptr = P_log_message_ptr;

	mdep = addr (log_message.data (2));

	if (binary (log_message.data (1)) = SB_ibm3270_mde)
	     & (size (mde) = dimension (log_message.data, 1) - 1)
	then call expand_ibm3270_mde ();
	else call expand_log_message_$unknown_syserr
		(P_log_message_format_ptr, log_message_ptr, P_expand_mode_ptr, P_expansion, P_code);

	return;
%page;
expand_ibm3270_mde:
     procedure ();


	call ioa_$rsnnl ("^/Device index=^d, name=""^a"", addr=""^a"",", temp, (0),
	     mde.devx, mde.name, mde.device_address);
	P_expansion = P_expansion || temp;
	call ioa_$rsnnl ("^/screen size=^d, line size=^d, position=^d,", temp, (0),
	     mde.screen_size, mde.line_size, mde.position);
	P_expansion = P_expansion || temp;
	call ioa_$rsnnl ("^/next_write_chan=^d, next_poll_chan=^d, next_control_chan=^d,", temp, (0),
	     mde.next_write_chan, mde.next_poll_chan, mde.next_control_chan);
	P_expansion = P_expansion || temp;
	call ioa_$rsnnl ("^/Flags=^[^;^^^]listen,^[^;^^^]dialed,^[^;^^^]printer,^[^;^^^]hndlquit,^[^;^^^]waiting_for_ready,^[^;^^^]erase_req,",
	     temp, (0), mde.listen, mde.dialed, mde.printer, mde.hndlquit, mde.waiting_for_ready, mde.erase_req);
	P_expansion = P_expansion || temp;
	call ioa_$rsnnl ("^[^;^^^]sound_alarm,^[^;^^^]control_queued,^[^;^^^]end_of_page,^[^;^^^]keyboard_restore,^[^;^^^]rawo,^[^;^^^]rawi,^[^;^^^]raw3270,^[^;^^^]raw3270_in_effect,^[^;^^^]write_queued.",
	     mde.sound_alarm, mde.control_queued, mde.end_of_page, mde.keyboard_restore, mde.rawo, mde.rawi,
	     mde.raw3270, mde.raw3270_in_effect, mde.write_queued);
	P_expansion = P_expansion || temp;

	return;

     end expand_ibm3270_mde;

/* format: off */
%page; %include log_message;
%page; %include log_message_format;
%page; %include syserr_binary_def;
%page; %include ibm3270_mpx_data;
%page; %include ibm3270_meters; /* because ibm3270_mpx_data wants it */

          end expand_ibm3270_mde_msg_;
