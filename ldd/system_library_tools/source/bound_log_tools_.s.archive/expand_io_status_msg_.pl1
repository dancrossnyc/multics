/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   *********************************************************** */

/* format: style1,insnl,linecom,indcomtxt,^inddcls,^indnoniterdo */

expand_io_status_msg_:
     procedure ();

/* *      EXPAND_IO_STATUS_MSG_
   *
   *      Expander for I/O status messages logged by ioi_masked$interrupt.
   *
   *      84-12-05, W. Olin Sibert: Initial coding, after print_syserr_msg_
   *	85-01-25, EJ Sharpe: changed name from expand_ioi_msg_
   *      85-02-10, EJ Sharpe: changed to call analyze_(device detail)_stat_
   *	85-03-05, EJ Sharpe: added ability to get arbitrary anal table if
   *			standard one can't be used.
*/

declare P_log_message_format_ptr
			 pointer parameter;
declare P_log_message_ptr	 pointer parameter;
declare P_expand_mode_ptr	 pointer parameter;
declare P_expansion		 char (*) varying parameter;
declare P_code		 fixed bin (35) parameter;

declare log_message_format_ptr pointer;
declare expand_detail	 bit (1) aligned;
declare message_type	 fixed bin;
declare dv_name		 char (8);
declare pic99		 picture "99";
declare table_ptr		 ptr;
declare anal_ptr		 ptr;
declare code		 fixed bin (35);
declare interesting		 bit (1);
declare dev		 char (3);		/* first three chars of device name */

declare temp		 char (256) varying;	/* String used in constructing output-- the longest output */
						/* line is "Detailed status", at about 120 characters */

declare error_table_$invalid_record_desc
			 fixed bin (35) external static;

declare tape_status_table_$tape_status_table_
			 ext;
declare prt_status_table_$prt_status_table_
			 ext;
declare crz_status_table_$crz_status_table_
			 ext;
declare cpz_status_table_$cpz_status_table_
			 ext;
declare disk_status_table_$disk_status_table_
			 ext;
declare opc_status_table_$opc_status_table_
			 ext;

declare ioa_$rsnnl		 entry options (variable);

declare (addr, bin, dimension, null, rtrim, size, substr, unspec)
			 builtin;

declare analyze_device_stat_$rsnnl
			 entry (char (*) var, ptr, bit (72) aligned, bit (18) aligned);
declare analyze_detail_stat_$rsnnl
			 entry (char (*), bit (36) aligned, bit (*), char (256) var, bit (1), fixed bin (35));
declare hcs_$make_ptr	 entry (ptr, char (*), char (*), ptr, fixed bin (35));
%page;


expand_io_status_msg_$format:
     entry (P_log_message_format_ptr, P_log_message_ptr, P_expand_mode_ptr, P_expansion, P_code);

	log_message_format_ptr = P_log_message_format_ptr;
	log_message_ptr = P_log_message_ptr;

	io_msgp = addr (log_message.data (1));

	if (dimension (log_message.data, 1) >= size (io_msg))
	then
	     expand_detail = "1"b;			/* Decide how much is there, hence, how much */
	else expand_detail = "0"b;			/* to expand. */

	goto COMMON;



/* This is a compatibility entrypoint-- it processes an old-format "syserr" class
   message, which has the syserr binary code in the first word of the data. */

expand_io_status_msg_$syserr:
     entry (P_log_message_format_ptr, P_log_message_ptr, P_expand_mode_ptr, P_expansion, P_code);

	log_message_format_ptr = P_log_message_format_ptr;
	log_message_ptr = P_log_message_ptr;

	io_msgp = addr (log_message.data (2));		/* This message has data starting in word 2 */

	message_type = bin (log_message.data (1));	/* and the old syserr binary type here */

	if (message_type = SB_io_err)
	then
	     expand_detail = "0"b;
	else if (message_type = SB_io_err_detail)
	then
	     expand_detail = "1"b;
	else if (message_type = SB_ocdcm_err)
	then
	     expand_detail = "0"b;
	else if (message_type = SB_disk_err)
	then
	     expand_detail = "0"b;
	else do;					/* Not one of ours, Jack. */
	     P_code = error_table_$invalid_record_desc;
	     return;
	end;

	goto COMMON;
%page;


COMMON:

	P_expansion = "";				/* Start out empty */
	dv_name = io_msg.devname;
	dev = substr (dv_name, 1, 3);			/* the first three chars tell us what it is */
	if dev = "dsk" | dev = "tap"
	then do;
	     dv_name = rtrim (dv_name) || "_";
	     pic99 = bin (io_msg.device);
	     dv_name = rtrim (dv_name) || pic99;
	end;


	if dev = "tap"
	then table_ptr = addr (tape_status_table_$tape_status_table_);
	else if dev = "prt"
	then table_ptr = addr (prt_status_table_$prt_status_table_);
	else if dev = "rdr"
	then table_ptr = addr (crz_status_table_$crz_status_table_);
	else if dev = "pun"
	then table_ptr = addr (cpz_status_table_$cpz_status_table_);
	else if dev = "dsk"
	then table_ptr = addr (disk_status_table_$disk_status_table_);
	else if dev = "opc"
	then table_ptr = addr (opc_status_table_$opc_status_table_);
	else do;
	     call hcs_$make_ptr (null (), dev || "_status_table_", dev || "_status_table_", table_ptr, code);
	     if code ^= 0
	     then table_ptr = null ();
	end;

	call ioa_$rsnnl ("^a (chnl ^a).  ", temp, (0), dv_name, io_msg.channel);
	P_expansion = P_expansion || temp;

	if io_msg.time_out
	then temp = "Channel timed out.";
	else if io_msg.level = "001"b
	then call ioa_$rsnnl ("System fault: ^w", temp, (0), io_msg.status);
	else call analyze_device_stat_$rsnnl (temp, table_ptr, (io_msg.status), ("0"b));
	P_expansion = P_expansion || temp;

	if bin (io_msg.count) > 1
	then do;
	     call ioa_$rsnnl (" (^d times)", temp, 0, bin (io_msg.count));
	     P_expansion = P_expansion || temp;
	end;

	if expand_detail
	then do;
	     call analyze_detail_stat_$rsnnl (dv_name, io_msg.status, io_msg.detailed_status, temp, interesting, code);
	     if interesting
	     then P_expansion = P_expansion || temp;
	end;

	P_code = 0;
	return;

%page;
%include log_message;
%page;
%include io_syserr_msg;
%page;
%include syserr_binary_def;

     end expand_io_status_msg_;
