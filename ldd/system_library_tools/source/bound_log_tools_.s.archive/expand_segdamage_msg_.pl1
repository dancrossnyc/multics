/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   *********************************************************** */
expand_segdamage_msg_:
     procedure ();

/* *      EXPAND_SEGDAMAGE_MSG_
   *
   *      Expander for segment damage messages logged by page control and salvagers.
   *
   *      84-12-05, W. Olin Sibert: Initial coding, after print_syserr_msg_
   */

declare   P_log_message_format_ptr pointer parameter;
declare   P_log_message_ptr pointer parameter;
declare   P_expand_mode_ptr pointer parameter;
declare   P_expansion char (*) varying parameter;
declare   P_code fixed bin (35) parameter;

declare   binary_segmsg_util_ entry (pointer) returns (char (250));

declare  (addr, dimension, length, rtrim, size, string, unspec) builtin;

/*  */

expand_segdamage_msg_$format:
     entry (P_log_message_format_ptr, P_log_message_ptr, P_expand_mode_ptr, P_expansion, P_code);

          log_message_ptr = P_log_message_ptr;

          P_expansion = P_expansion || "Segment: ";
          P_expansion = P_expansion || rtrim (binary_segmsg_util_ (addr (log_message.data (1))));
          P_expansion = P_expansion || byte (10);

          return;



/* This is a compatibility entrypoint-- it processes an old-format "syserr" class
   message, which has the syserr binary code in the first word of the data. */

expand_segdamage_msg_$syserr:
     entry (P_log_message_format_ptr, P_log_message_ptr, P_expand_mode_ptr, P_expansion, P_code);

          log_message_ptr = P_log_message_ptr;

          P_expansion = P_expansion || "Segment: ";
          P_expansion = P_expansion || rtrim (binary_segmsg_util_ (addr (log_message.data (2))));
          P_expansion = P_expansion || byte (10);

          return;

%page; %include log_message;

          end expand_segdamage_msg_;
