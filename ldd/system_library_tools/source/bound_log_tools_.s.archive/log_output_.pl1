/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   *********************************************************** */
/* attach/detach/open/close for the log_output_ io module */

/* format: style2 */

/**** Written 1984-10 BIM */
/**** Modified 1984-10-22 BIM for control orders */

log_output_$log_output_attach:
     procedure (IOCB_ptr, Options, Com_err_sw, Code);

	declare (
	        IOCB_ptr		 pointer,
	        Options		 dimension (*) character (*) varying,
	        Com_err_sw		 bit (1) aligned,
	        Code		 fixed bin (35),
	        Reserved		 bit (1) aligned,
	        Mode		 fixed bin
	        )			 parameter;

%page;
%include log_output_attach_data_;
%page;
%include iocb;
%page;
%include iox_modes;
%include iox_entries;
%include area_info;
%page;

	declare cleanup_proc	 entry variable;
	declare code		 fixed bin (35);
	declare iocb_ptr		 pointer;
	declare saved_mask		 bit (36) aligned;
	declare 1 IOCB		 aligned like iocb based (iocb_ptr);

	declare define_area_	 entry (pointer, fixed binary (35));
	declare expand_pathname_	 entry (char (*), char (*), char (*), fixed bin (35));
	declare release_area_	 entry (pointer);

	declare (
	        hcs_$set_ips_mask,
	        hcs_$reset_ips_mask
	        )			 entry (bit (36) aligned, bit (36) aligned);


	declare (
	        log_output_io_$modes,
	        log_output_io_$control,
	        log_output_io_$put_chars
	        )			 entry external;
	declare log_output_io_$flush_pending_output
				 entry (pointer, fixed binary (35));
	declare log_write_$open	 entry (character (*), character (*), bit (1) aligned, pointer, fixed binary (35))
				 ;
	declare log_write_$close	 entry (pointer, fixed binary (35));

	declare sys_info$max_seg_size	 fixed bin (35) ext static;
	declare (
	        error_table_$badopt,
	        error_table_$bad_mode,
	        error_table_$improper_data_format,
	        error_table_$too_many_args,
	        error_table_$not_detached,
	        error_table_$noentry
	        )			 fixed bin (35) external static;

	declare cleanup		 condition;
	declare ME		 character (32) init ("log_output_") internal static options (constant);

/* attach entrypoint */

	if IOCB_ptr -> iocb.attach_descrip_ptr ^= null ()
	then do;
		Code = error_table_$not_detached;
		return;
	     end;
	attach_data_ptr = null ();
	on cleanup call cleanup_attach;
	call setup_attach;
	call parse_atd;				/* creates an attach data structure */
	call define_buffer_area;
	call attach_switch;				/* connects up iocb */
	return;

lo_detach:
     entry (IOCB_ptr, Code);
	call setup;				/* actual_iocb_ptr */
	IOCB.attach_descrip_ptr = null ();
	call release_area_ (attach_data.buffer_area_ptr);
	free attach_data;
	call propagate;
	go to return_;

lo_close:
     entry (IOCB_ptr, Code);
	call setup;

	call log_output_io_$flush_pending_output (addr (attach_data), (0));
	call log_write_$close (attach_data.log_info_ptr, (0));
	call mask;
	IOCB.open = lo_open;
	IOCB.detach_iocb = lo_detach;
	IOCB.modes = iox_$err_not_open;
	IOCB.control = iox_$err_not_open;
	IOCB.open_descrip_ptr = null ();
	call unmask;
	call propagate;

	go to return_;



lo_open:
     entry (IOCB_ptr, Mode, Reserved, Code);

	call setup;				/* get actual_iocb_ptr, et al */

	if Mode = Stream_output
	then do;
		attach_data.open_mode = Stream_output;	/* compiler should be cleverer with constant */
		attach_data.open_description = iox_modes (Stream_output);
		call init_modes;

	     end;
	else do;
		code = error_table_$bad_mode;
		go to return_;
	     end;

	on cleanup call cleanup_open;
	cleanup_proc = cleanup_open;			/* for the benefit of return_ */

	call log_write_$open (attach_data.dir_name, attach_data.entryname, (attach_data.create_ok),
	     attach_data.log_info_ptr, code);
	if code ^= 0
	then go to return_;				/* not according to log_mgr_ contract */

	call mask;
	IOCB.open_descrip_ptr = addr (attach_data.open_description);
	IOCB.put_chars = log_output_io_$put_chars;
	IOCB.modes = log_output_io_$modes;
	IOCB.control = log_output_io_$control;
	IOCB.close = lo_close;
	call unmask;
	call propagate;
	cleanup_proc = nulle;			/* we do not want to clean up */
	go to return_;

return_:
	call cleanup_proc;
	Code = code;
	return;


setup_attach:
     procedure;

	declare get_system_free_area_	 entry () returns (ptr);
	declare system_free_area	 area (1024 /*irrelevant*/) based (get_system_free_area_ ());

	iocb_ptr = IOCB_ptr;			/* not actual iocb ptr for the attact entrypoint */
	cleanup_proc = cleanup_attach;		/* return_ will call this */

	allocate attach_data in (system_free_area) set (attach_data_ptr);
	attach_data.buffer_area_ptr = null ();		/* window here, if we cleanup before this is executed */
	attach_data.open_mode = 0;
	attach_data.log_info_ptr = null ();
	string (attach_data.flags) = ""b;
	attach_data.binary_data_class = "";
	attach_data.binary_data_ptr = null ();
	attach_data.binary_data_length = 0;
	attach_data.dir_name, attach_data.entryname = "";
	attach_data.attach_description, attach_data.open_description = "";
	attach_data.buffer_chain.head = null ();
	attach_data.buffer_chain.tail = null ();
	attach_data.create_ok = "1"b;			/* on by default */
	code = 0;
     end setup_attach;


parse_atd:
     procedure;

	declare current_option	 fixed bin;
	declare last_option		 fixed bin;
	declare option_length	 fixed bin (21);

	current_option = lbound (Options, 1);
	last_option = hbound (Options, 1);
	option_length = maxlength (Options (1));	/* same answer for all of them */
	if last_option = 0
	then call attach_error (0, "Usage: log_output_ LOG_PATHNAME {-control_args}");
						/* it does not return */
	do while (current_option <= last_option);
	     begin;
		declare option		 character (option_length) varying defined (Options (current_option));
		declare next_option		 character (option_length) varying
					 defined (Options (current_option + 1));

		if index (option, "-") ^= 1
		then do;				/* not a control argument */
			if attach_data.entryname ^= ""
			then call attach_error (error_table_$too_many_args, "Only one pathname may be given.");
			call expand_pathname_ ((option), attach_data.dir_name, attach_data.entryname, code);
			if code ^= 0
			then call attach_error (code, (option));
		     end;				/* pathname taken care of */
		else do;				/* control argument */
			if option = "-create"
			then attach_data.create_ok = "1"b;
			else if option = "-no_create"
			then attach_data.create_ok = "0"b;
			else call attach_error (error_table_$badopt, (option));
		     end;
	     end;
	     current_option = current_option + 1;
	end;
	/*** The atd is now parse'd. so much for this */

	attach_data.attach_description =
	     rtrim (ME) || " " || rtrim (attach_data.dir_name) || ">" || rtrim (attach_data.entryname);
	if attach_data.create_ok
	then attach_data.attach_description = attach_data.attach_description || " -create";
	else attach_data.attach_description = attach_data.attach_description || " -no_create";

     end parse_atd;


attach_switch:
     procedure;

	call mask;
	IOCB.open = lo_open;
	IOCB.detach_iocb = lo_detach;
	IOCB.attach_data_ptr = attach_data_ptr;
	IOCB.attach_descrip_ptr = addr (attach_data.attach_description);
	call unmask;
	call propagate;
     end attach_switch;


setup:
     procedure;

	cleanup_proc = nulle;
	iocb_ptr = IOCB_ptr -> iocb.actual_iocb_ptr;
	code = 0;
	attach_data_ptr = IOCB.attach_data_ptr;
	saved_mask = ""b;
     end setup;

mask:
     procedure;
	call hcs_$set_ips_mask (""b, saved_mask);
	return;

unmask:
     entry;
	call hcs_$reset_ips_mask (saved_mask, saved_mask);
	return;
     end mask;

propagate:
     procedure;
	call iox_$propagate (iocb_ptr);
     end propagate;

cleanup_open:
     procedure;
	if attach_data.log_info_ptr ^= null ()
	then call log_write_$close (attach_data.log_info_ptr, (0));
     end cleanup_open;

cleanup_attach:
     procedure;
	if attach_data_ptr ^= null ()
	then do;
		if unspec (attach_data.buffer_area_ptr) ^= ""b & attach_data.buffer_area_ptr ^= null
		then call release_area_ (attach_data.buffer_area_ptr);
		free attach_data;
	     end;
     end cleanup_attach;


attach_error:
     procedure (code, reason);

	declare code		 fixed bin (35);
	declare reason		 character (*);

	declare com_err_		 entry () options (variable);
	declare sub_err_		 entry () options (variable);

	if Com_err_sw
	then call com_err_ (code, ME, "^a.", reason);
	else call sub_err_ (code, "Log output attach", "h", null (), (0), "^a", reason);
	go to return_;
     end attach_error;

init_modes:
     procedure;

	attach_data.mode_string = "severity=0.";

     end init_modes;

nulle:
     procedure;
     end nulle;

define_buffer_area:
     procedure;

	declare 1 AI		 aligned like area_info;

	unspec (AI) = ""b;
	AI.version = area_info_version_1;
	AI.owner = "log_output_ buffers";
	AI.size = sys_info$max_seg_size;
	AI.areap = null ();
	AI.control.extend = "1"b;
	call define_area_ (addr (AI), code);
	if code ^= 0
	then call attach_error (code, "Failed to define buffer area.");
	attach_data.buffer_area_ptr = AI.areap;
	return;
     end define_buffer_area;


     end log_output_$log_output_attach;

