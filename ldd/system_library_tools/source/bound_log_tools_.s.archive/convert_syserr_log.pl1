/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   *********************************************************** */
convert_syserr_log:
     procedure () options (variable);

/* *	CONVERT_SYSERR_LOG
   *
   *	This proces converts the existing syserr log vfile into a new-format
   *	family of log segments.  It converts binary messages by making the
   *	appropriate data_class entries.
   *
   *	Modification history:
   *	84-06-08, W. Olin Sibert: Derived from display_cpu_error, nee mos_edac_summary
   *	84-12-14, WOS: Changed to ignore expected (no admin_gate_) open err
   *	84-12-21, WOS: Changed to declare data_class char (16) varying.
   *	85-01-21, EJ Sharpe: convert bin data class to char data class
   */

dcl  arg char (arg_len) based (arg_ptr);		/* A command argument */
dcl  arg_count fixed bin;				/* The number of arguments */
dcl  arg_len fixed bin;				/* Length of an argument */
dcl  arg_list_ptr ptr;				/* Pointer to commands argument list */
dcl  arg_no fixed bin init (1);			/* For scanning argument list */
dcl  arg_ptr ptr;					/* Pointer to an argument */

dcl  code fixed bin (35);				/* Standard system status code */
dcl  count_limit fixed bin init (0);			/* Results for -limit arg */

dcl  day_limit fixed bin init (0);			/* Results for -day_limit arg */
dcl  err_cnt fixed bin init (0);			/* Entries in status table */
dcl  expand_sw bit (1) init ("0"b);			/* Set if user just wants hregs interpreted */

dcl  for_arg char (for_len) based (for_ptr);		/* This is the -for argument */
dcl  for_len fixed bin;				/* Saved length of -for argument */
dcl  for_ptr ptr;					/* Saved pointer to the -for argument */
dcl  for_sw bit (1) init ("0"b);			/* Set if -for used */
dcl  for_time fixed bin (71);				/* Time specified on -for */
dcl  from_sw bit (1) init ("0"b);			/* Set if -from used */
dcl  from_time fixed bin (71);			/* Time specified on -from */

dcl  more_args bit (1);				/* Set while there are more arguments to scan */
dcl  msg_seq fixed bin (35);				/* Sequence number */
dcl  msg_time fixed bin (71);				/* Time of syserr message */

dcl  open_status bit (36) aligned;			/* Code from old_syserr_log_util_$open */
dcl  read_count fixed bin;
declare	binary_count fixed bin;

dcl  (tm1, tm2) char (24);				/* Used to call date_time_ */
dcl  to_sw bit (1) init ("0"b);			/* Set if -to used */
dcl  to_time fixed bin (71);				/* Time specified on -to */

dcl  new_log_dir char (168);
dcl  log_write_data_ptr pointer;

dcl  workp ptr;					/* Pointer to work segment */
dcl  1 work aligned based (workp),			/* Declaration of work segment */
       2 cpureq (8) char (1),				/* Table of requested CPUs */
       2 buffer (500) bit (36) aligned;			/* Syserr messages are read here */

/* Constants */

dcl  WHOAMI char (32) int static options (constant) init ("convert_syserr_log");
						/* Name of procedure */

dcl  error_table_$badopt fixed bin (35) external static;
dcl  error_table_$end_of_info fixed bin (35) external static;
dcl  error_table_$inconsistent fixed bin (35) external static;
dcl  error_table_$moderr fixed bin (35) external static;
dcl  error_table_$noarg fixed bin (35) external static;
dcl  error_table_$too_many_args fixed bin (35) external static;

dcl  log_data_$syserr_log_dir char (168) external static;
dcl  log_data_$syserr_log_name char (32) external static;

dcl  absolute_pathname_ entry (char (*), char (*), fixed bin (35));
dcl  com_err_ entry options (variable);
dcl  convert_date_to_binary_ entry (char (*), fixed bin (71), fixed bin (35));
dcl  convert_date_to_binary_$relative entry (char (*), fixed bin (71), fixed bin (71), fixed bin (35));
dcl  cu_$arg_list_ptr entry (ptr);
dcl  cu_$arg_count entry (fixed bin);
dcl  cu_$arg_ptr_rel entry (fixed bin, ptr, fixed bin, fixed bin (35), ptr);
dcl  date_time_ entry (fixed bin (71), char (*));
dcl  get_temp_segment_ entry (char (*), ptr, fixed bin (35));
dcl  ioa_ entry options (variable);
dcl  log_write_$open_for_migrate entry (char (*), char (*), bit (1) aligned, pointer, fixed bin (35));
dcl  log_write_$close entry (pointer, fixed bin (35));
dcl  log_write_$general entry (pointer, fixed bin (35), fixed bin, fixed bin, char (16) varying, pointer, fixed bin (35));
dcl  log_segment_$finish_message entry (pointer, pointer, fixed bin (35));
dcl  print_syserr_msg_$open_err entry (bit (36) aligned, char (*), fixed bin (35));
dcl  release_temp_segment_ entry (char (*), ptr, fixed bin (35));
dcl  old_syserr_log_util_$open entry (bit (36) aligned, fixed bin (35));
dcl  old_syserr_log_util_$read entry (ptr, fixed bin, fixed bin, fixed bin (35));
dcl  old_syserr_log_util_$close entry (fixed bin (35));
dcl  old_syserr_log_util_$search entry (fixed bin (71), fixed bin (71), fixed bin (35), fixed bin (35));

dcl   cleanup condition;

declare  (addr, binary, bit, char, hbound, mod, null, pointer, substr, unspec) builtin;

%page;
/* Initialization */

	log_write_data_ptr = null ();
	workp = null ();

	on condition (cleanup)
	     call clean_up ();

	call get_temp_segment_ (WHOAMI, workp, code);	/* Get a work segment */
	if code ^= 0 then do;
	     call com_err_ (code, WHOAMI, "Can't get temp segment");
	     goto MAIN_RETURN;
	     end;

	call cu_$arg_list_ptr (arg_list_ptr);		/* Need pointer to argument list */
	call cu_$arg_count (arg_count);		/* And the length */
	more_args = (arg_count > 0);			/* Set if args to scan */
	call scan_args;				/* Scan the argument list */

	call old_syserr_log_util_$open (open_status, code);	/* Open the syserr log */
	if (code = error_table_$moderr) & (substr (open_status, 1, 2) = "01"b) then ;
						/* Ignore the "expected" error */

	else if code ^= 0 | substr (open_status, 1, 2) ^= "11"b then do;
						/* If error */
	     call print_syserr_msg_$open_err (open_status, WHOAMI, code);
	     if code ^= 0 then goto MAIN_RETURN;		/* Not recoverable */
	     end;

	if ^from_sw then do;			/* No -from, so start at beginning */
	     call old_syserr_log_util_$search (0, msg_time, msg_seq, code);
	     if code ^= 0 then do;
		call com_err_ (code, WHOAMI, "Can't find first message in log.");
		goto MAIN_RETURN;
		end;
	     from_time = msg_time;			/* Official starting time */
	     end;
	else do;					/* -from used, find right message */
	     call old_syserr_log_util_$search (from_time, msg_time, msg_seq, code);
	     if code ^= 0 then do;
		call com_err_ (code, WHOAMI, "Locating first message requested.");
		goto MAIN_RETURN;
		end;
	     end;

	if for_sw then do;				/* Now can compute -for limit */
	     call convert_date_to_binary_$relative (for_arg, to_time, from_time, code);
	     if code ^= 0 then do;
		call com_err_ (code, WHOAMI, "-for ^a", for_arg);
		goto MAIN_RETURN;
		end;
	     to_sw = "1"b;				/* Now, just as if -to was specified */
	     end;
	if ^to_sw then to_time = from_time;		/* Initialize last message time */

	syserr_msgp = addr (work.buffer);		/* Read here */
%page;

	call print_header;

	call log_write_$open_for_migrate
	    (new_log_dir, log_data_$syserr_log_name, "1"b, log_write_data_ptr, code);
	if (code ^= 0) then do;
	     call com_err_ (code, WHOAMI, "Opening new log directory ^a", new_log_dir);
	     goto MAIN_RETURN;
	     end;

/* Loop thru the file */

	binary_count = 0;
	do read_count = 0 by 1;
	     call old_syserr_log_util_$read (syserr_msgp, hbound (buffer, 1), (0), code);
	     if code ^= 0 then do;
		if (code ^= error_table_$end_of_info) then
		     call com_err_ (code, WHOAMI, "Reading syserr log");
		goto FINISHED_SCAN;
		end;

	     if to_sw then do;			/* If time limit */
		if syserr_msg.time > to_time then goto FINISHED_SCAN;
		end;
	     else to_time = syserr_msg.time;		/* Save last message time */

	     call process_message ();

	     if (read_count ^= 0) & (mod (read_count, 1000) = 0) then
		call ioa_ ("^a: Processed ^dth message.", WHOAMI, read_count);
	     end;


FINISHED_SCAN:
	call ioa_ ("^a: Processed ^d message^[s^] (^d binary)",
	     WHOAMI, read_count, (read_count ^= 1), binary_count);

MAIN_RETURN:
	call clean_up ();
	return;
%page;
/* Procedure to copy a single message */

process_message:
     procedure ();

declare	data_class char (16) varying;
declare	data_lth fixed bin;
declare	data_idx fixed bin;
declare   data_buffer (data_lth) bit (36) aligned based;


	if (syserr_msg.data_size > 0) then do;
	     call convert_data_class ((syserr_msg.data_code), data_class);
	     data_lth = syserr_msg.data_size;
	     end;
	else do;
	     data_class = "";
	     data_lth = 0;
	     end;

	call log_write_$general (log_write_data_ptr,
	     syserr_msg.seq_num, (syserr_msg.text_len), data_lth, data_class, log_message_ptr, code);
	if (code ^= 0) then do;
	     call com_err_ (code, WHOAMI, "Cannot allocate copy of message ^d", syserr_msg.seq_num);
	     goto FINISHED_SCAN;
	     end;

	log_message.time = syserr_msg.time;
	log_message.severity = syserr_msg.code;
	log_message.process_id = ""b;		/* We have no idea */
	log_message.text = syserr_msg.text;

/* In this version, the binary data is a word of type, followed by the original binary data */

	if (data_lth > 0) then do;			/* Copy binary data only if there is some */
	     unspec (addr (log_message.data(1)) -> data_buffer) = unspec ( addr (syserr_msg.data(1)) -> data_buffer);
	     binary_count = binary_count + 1;
	     end;

	call log_segment_$finish_message (pointer (log_message_ptr, 0), log_message_ptr, code);
	if (code ^= 0) then do;
	     call com_err_ (code, WHOAMI, "Cannot finish message ^d at ^p", syserr_msg.seq_num, log_message_ptr);
	     goto FINISHED_SCAN;
	     end;

	return;

convert_data_class:
     procedure (a_syserr_bin_class, a_syserr_char_class);

declare   a_syserr_bin_class fixed bin parameter;
declare   a_syserr_char_class char (16) varying parameter;
declare   syserr_bin_class fixed bin;
declare   syserr_char_class char (16) varying;
declare   hbound builtin;
declare   ioa_$rsnnl entry () options (variable);

	syserr_bin_class = a_syserr_bin_class;
	syserr_char_class = "";
	if syserr_bin_class < 1  |  syserr_bin_class > hbound(SB_char_data_classes, 1)
	then call ioa_$rsnnl ("syserr^d", syserr_char_class, (0), syserr_bin_class);
	else syserr_char_class = SB_char_data_classes (syserr_bin_class);

	a_syserr_char_class = syserr_char_class;
	end convert_data_class;

	end process_message;
%page;
/* Procedure to scan the argument list */

scan_args:
     proc;

	new_log_dir = "";

	do while (more_args);			/* Do while thins to look at */
	     call get_arg;
	     if arg = "-from" | arg = "-fm" then do;	/* Start time */
		from_sw = "1"b;
		call time_arg (from_time);
		end;
	     else if arg = "-to" then do;		/* Ending time */
		to_sw = "1"b;
		call time_arg (to_time);
		end;
	     else if arg = "-for" then do;		/* Time limit */
		for_sw = "1"b;
		call time_arg (for_time);		/* For syntax checking only */
		for_len = arg_len;			/* Save pointer to this argument */
		for_ptr = arg_ptr;
		end;

	     else if (arg = "-default") | (arg = "-dft") then do;
		if (new_log_dir ^= "") then do;
		     call com_err_ (error_table_$too_many_args,
			WHOAMI, "Only one log directory may be specified. ^a", arg);
		     goto MAIN_RETURN;
		     end;

		new_log_dir = log_data_$syserr_log_dir;
		end;

	     else if (char (arg, 1) = "-") then do;	/* Bad control argument */
		call com_err_ (error_table_$badopt, WHOAMI, "^a", arg);
		goto MAIN_RETURN;
		end;

	     else if (new_log_dir ^= "") then do;
		call com_err_ (error_table_$too_many_args, WHOAMI, "Only one log directory may be specified. ^a", arg);
		goto MAIN_RETURN;
		end;

	     else do;
		call absolute_pathname_ (arg, new_log_dir, code);
		if (code ^= 0) then do;
		     call com_err_ (code, WHOAMI, "Log directory ^a", arg);
		     goto MAIN_RETURN;
		     end;
		end;
	     end;


	if to_sw & for_sw then do;			/* Conflict */
	     call com_err_ (error_table_$inconsistent, WHOAMI, "Conflicting arguments: -to and -for");
	     goto MAIN_RETURN;
	     end;

	if (new_log_dir = "") then do;
	     call com_err_ (error_table_$noarg, WHOAMI, "Usage:  ^a	 NewLogDirectory {-control_args}", WHOAMI);
	     goto MAIN_RETURN;
	     end;

	return;

     end scan_args;
%page;
/* Procedure to return the next argument from command line */

get_arg:
     proc;

	call cu_$arg_ptr_rel (arg_no, arg_ptr, arg_len, code, arg_list_ptr);
	if code ^= 0 then do;			/* Should never happen */
	     call com_err_ (code, WHOAMI, "Arg ^d", arg_no);
	     goto MAIN_RETURN;
	     end;
	arg_no = arg_no + 1;			/* For next call */
	more_args = (arg_no <= arg_count);
	return;

put_arg:
     entry;					/* Entry to return argument after scanning too far */
	arg_no = arg_no - 1;
	more_args = (arg_no <= arg_count);
	return;

     end get_arg;

/* Procedure to convert a time argument */

time_arg:
     proc (t);

dcl  arg_copy char (10) var;				/* Save copy of arg here */
dcl  t fixed bin (71);				/* The time to ouput */


	arg_copy = arg;
	if ^more_args then do;			/* Must be more */
	     call com_err_ (0, WHOAMI, "Argument required after ^a.", arg_copy);
	     goto MAIN_RETURN;
	     end;
	call get_arg;
	call convert_date_to_binary_ (arg, t, code);
	if code ^= 0 then do;
	     call com_err_ (code, WHOAMI, "^a ^a", arg_copy, arg);
	     goto MAIN_RETURN;
	     end;

	return;

     end time_arg;
%page;

/* Procedure to print the header line */

print_header:
     proc;


	call date_time_ (from_time, tm1);		/* Starting time is easy */

	if to_sw
	then call date_time_ (to_time, tm2);		/* Stop time is easy if given */
	else do;					/* Otherwise get last message	 */
	     call old_syserr_log_util_$search (-1, msg_time, msg_seq, code);
						/* Search to eof */
	     if code ^= 0 then do;			/* Should not fail */
log_err:
		call com_err_ (code, WHOAMI, "From old_syserr_log_util_$search.");
		return;
		end;

	     call date_time_ (msg_time, tm2);		/* Edit time */
	     call old_syserr_log_util_$search (from_time, msg_time, msg_seq, code);
						/* Back to first msg */
	     if code ^= 0 then goto log_err;
	     end;

	call ioa_ ("^/Converting syserr log into ^a,^/^3xfrom ^a to ^a", new_log_dir, tm1, tm2);

	return;

     end print_header;


%page;
/* Cleanup handler */

clean_up:
     proc;

	call old_syserr_log_util_$close ((0));

	if (workp ^= null ()) then
	     call release_temp_segment_ (WHOAMI, workp, (0));

	if (log_write_data_ptr ^= null ()) then
	     call log_write_$close (log_write_data_ptr, (0));

	return;
	end clean_up;

%page; %include syserr_message;
%page; %include syserr_binary_def;
%page; %include log_message;

	end convert_syserr_log;
