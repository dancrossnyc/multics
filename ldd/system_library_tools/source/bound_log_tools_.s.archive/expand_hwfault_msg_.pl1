/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   *********************************************************** */

/* format: style4 */

expand_hwfault_msg_:
     procedure ();

/* *      EXPAND_HWFAULT_MSG_
   *
   *      Expander for hardware fault messages logged by FIM and others.
   *
   *      Note that this procedure does not now use a format_log_message_
   *      entrypoint to write words of octal, though it probably should....
   *
   *      84-12-05, W. Olin Sibert: Initial coding, after print_syserr_msg_
   *      85-01-21, EJ Sharpe: added check for old style binary to $format entry
   *	85-02-21, EJ Sharpe: use syserr_fault_msg.incl.pl1 and excise code supporting very old message formats
*/

declare  P_log_message_format_ptr pointer parameter;
declare  P_log_message_ptr pointer parameter;
declare  P_expand_mode_ptr pointer parameter;
declare  P_expansion char (*) varying parameter;
declare  P_code fixed bin (35) parameter;

declare  temp char (2000) varying;
declare  ptr_idx fixed bin;
declare  ptr_ptr pointer;

declare  expand_log_message_$append_octal entry (pointer, pointer, fixed bin, char (*) varying);
declare  expand_log_message_$unknown_syserr entry (pointer, pointer, pointer, char (*) varying, fixed bin (35));
declare  expand_log_message_$unknown entry (pointer, pointer, pointer, char (*) varying, fixed bin (35));
declare  ioa_$rsnnl entry options (variable);

declare  NEWLINE char (1) aligned internal static options (constant) init ("
");

declare  (addr, addrel, binary, dimension, size) builtin;
%page;

expand_hwfault_msg_$format:
     entry (P_log_message_format_ptr, P_log_message_ptr, P_expand_mode_ptr, P_expansion, P_code);

	log_message_ptr = P_log_message_ptr;

	fmsgp = addr (log_message.data (1));

	if size (fault_msg) = dimension (log_message.data, 1)
	then call expand_normal_hwfault ();
	else call expand_log_message_$unknown
		(P_log_message_format_ptr, log_message_ptr, P_expand_mode_ptr, P_expansion, P_code);

	return;
%page;

/* This is a compatibility entrypoint-- it processes an old-format "syserr" class
   message, which has the syserr binary code in the first word of the data. */

expand_hwfault_msg_$syserr:
     entry (P_log_message_format_ptr, P_log_message_ptr, P_expand_mode_ptr, P_expansion, P_code);

	log_message_ptr = P_log_message_ptr;

	fmsgp = addr (log_message.data (2));

	if ((binary (log_message.data (1)) = SB_verify_lock)
	     | (binary (log_message.data (1)) = SB_hw_fault))
	     & (size (fault_msg) = dimension (log_message.data, 1) - 1)
	then call expand_normal_hwfault ();
	else call expand_log_message_$unknown_syserr
		(P_log_message_format_ptr, log_message_ptr, P_expand_mode_ptr, P_expansion, P_code);

	return;
%page;
expand_normal_hwfault:
     procedure ();

	P_expansion = P_expansion || "Pointer Registers:";
	P_expansion = P_expansion || NEWLINE;

	do ptr_idx = 0 to 7;
	     ptr_ptr = addr (fault_msg.mach_cond.prs (ptr_idx));
	     call ioa_$rsnnl ("^7o|^6.3b(^d)[^d]^[^x^]", temp, (0),
		ptr_ptr -> its_unsigned.segno,
		ptr_ptr -> its.offset,
		ptr_ptr -> its_unsigned.bit_offset,
		ptr_ptr -> its_unsigned.ringno,
		(ptr_ptr -> its_unsigned.bit_offset < 10));
	     P_expansion = P_expansion || temp;
	end;
	P_expansion = P_expansion || NEWLINE;

	call ioa_$rsnnl ("x0-x7: ^( ^6.3b^)^/", temp, (0), fault_msg.mach_cond.x);
	P_expansion = P_expansion || temp;

	call ioa_$rsnnl ("a: ^.3b q: ^.3b e: ^.3b t: ^.3b ralr: ^.3b^/", temp, (0),
	     fault_msg.mach_cond.a, fault_msg.mach_cond.q, "0"b || fault_msg.mach_cond.e,
	     fault_msg.mach_cond.t, fault_msg.mach_cond.ralr);
	P_expansion = P_expansion || temp;

	call ioa_$rsnnl ("Fault Register: ^.3b^/", temp, (0), fault_msg.mach_cond.fault_reg);
	P_expansion = P_expansion || temp;

	call add_scu_data (addr (fault_msg.mach_cond.scu));

	call add_words ("EIS Info:", addr (fault_msg.mach_cond.eis_info), 8);

	call add_history_registers (addr (fault_msg.hist_reg), (addr (fault_msg.mach_cond.scu) -> scu.pad2));

	return;
     end expand_normal_hwfault;
%page;

add_scu_data:
     procedure (P_scu_ptr);

declare  P_scu_ptr pointer parameter;

	call add_words ("SCU Data:", P_scu_ptr, 8);

	return;
     end add_scu_data;
%page;

add_history_registers:
     procedure (P_hreg_ptr, P_cpu_type);

declare  P_hreg_ptr pointer parameter;
declare  P_cpu_type bit (9) parameter;


	if (P_cpu_type = ""b) then			/* Level 68 */
	     call add_words ("OU History Reg Data:", addrel (P_hreg_ptr, 0), 32);
	else call add_words ("DU/OU History Reg Data:", addrel (P_hreg_ptr, 0), 32);

	call add_words ("CU History Reg Data:", addrel (P_hreg_ptr, 32), 32);

	if (P_cpu_type = ""b) then			/* Level 68 */
	     call add_words ("DU History Reg Data:", addrel (P_hreg_ptr, 64), 32);
	else call add_words ("APU #2 History Reg Data:", addrel (P_hreg_ptr, 64), 32);

	if (P_cpu_type = ""b) then			/* Level 68 */
	     call add_words ("APU History Reg Data:", addrel (P_hreg_ptr, 96), 32);
	else call add_words ("APU #1 History Reg Data:", addrel (P_hreg_ptr, 96), 32);

	return;
     end add_history_registers;
%page;

add_words:
     procedure (P_title, P_words_ptr, P_words_count);

declare  P_title char (*) parameter;
declare  P_words_ptr pointer parameter;
declare  P_words_count fixed bin parameter;


	P_expansion = P_expansion || P_title;
	P_expansion = P_expansion || NEWLINE;

	call expand_log_message_$append_octal (P_log_message_format_ptr, P_words_ptr, P_words_count, P_expansion);

	return;
     end add_words;

/* format: off */
%page; %include log_message;
%page; %include log_message_format;
%page; %include its;
%page; %include mc;
%page; %include syserr_binary_def;
%page; %include syserr_fault_msg;

          end expand_hwfault_msg_;
