/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


meter_rcp: procedure;

/*	This program is a command that meters device data copied from RCP.
   *	It also meters the locks used for rcp_data and rcp_com_seg.
   *	Created on 01/02/75 by Bill Silver.
   *	Modified on 01/31/79 by Michael R. Jordan
   *
   *	To use this command one must have access to the gate rcp_priv_.
   *	If this command is called with no arguments it will type out the meters
   *	obtained from RCP for all devices of all types.  This command does
   *	not work correctly if called recursively.  Valid arguments are:
   *
   *	(-all)		(-a)	Type all available meters.
   *	(-lock)			Type meters for both RCPD and RCS locks.
   *	(-long)		(-lg)	Type all meters available for device or device type.
   *	(-reset)		(-rs)	Reset, save current meters.
   *	(-report_reset)	(-rr)	Reset but first output meters.
   *	(-type)		(-tp)	Type info about all devices of this one type.
   *	(-device)		(-dv)	Type info about this one mdevice.
*/

/*		AUTOMATIC  DATA		*/

dcl  arg_len fixed bin;				/* Length of argument. */
dcl  arg_ptr ptr;					/* Pointer to current argument. */
dcl  argx fixed bin;				/* Number  of current argument. */
dcl  dtypex fixed bin;				/* Device type index. */
dcl  device_flag bit (1);				/* ON => user wants device meters. */
dcl  device_name char (32);				/* Device name. */
dcl  device_type char (32);				/* Device type name. */
dcl  ecode fixed bin (35);				/* error_table_ code. */
dcl  hours fixed bin;
dcl (i, j) fixed bin;				/* Work variables. */
dcl  histox fixed bin;				/* Index of current histogram slot. */
dcl  lock_flag bit (1);				/* ON => user wants lock meters. */
dcl  long_flag bit (1);				/* ON => type everything we can. */
dcl  meter_index fixed bin;				/* Used to determine which meters to process. */
dcl  meter_time fixed bin (71);			/* The metering time interval. */
dcl  minutes fixed bin;
dcl  num_args fixed bin;				/* Number of command arguments. */
dcl  omdevice_ptr ptr;				/* Pointer to old device entry. */
dcl  olock_info_ptr ptr;				/* Pointer to old lock_info data. */
dcl  option char (16);				/* Command option name. */
dcl  option_code fixed bin;				/* Used to describe option's value argument. */
dcl  ormi_ptr ptr;					/* Pointer to old meter info. */
dcl  reset_flag bit (1);				/* ON => user wants meters saved. */
dcl  time_assigned fixed bin (71);			/* Time assigned device assigned. */
dcl  seconds fixed bin;
dcl  work fixed bin (35);				/* Work variable. */
dcl (x, y, z) fixed bin;				/* Used to output histogram. */


/*		BASED  DATA		*/

dcl  argument char (arg_len) based (arg_ptr);		/* Used to reference command argument. */

dcl 1 mrs based (mrs_ptr) aligned,			/* Structure of meter_rcp_seg. */
    2 reset_flag bit (1),				/* ON => reset has been done. */
    2 rmi_size fixed bin (19),			/* Size of current one meter area. */
    2 rmi_bound fixed bin,				/* Num of double words in an RMI area. */
    2 tot_mdevices fixed bin,				/* Total number of device being metered. */
    2 rmi_ptr ptr,					/* Points to mrs.new_rmi. */
    2 ormi_ptr ptr,					/* Points to mrs.old_rmi. */
    2 starting_time fixed bin (71),			/* Meters calculated from this time. */
    2 new_rmi (0 refer (mrs.rmi_bound)) fixed bin (71),	/* Where we copy meter info each time. */
    2 old_rmi (0 refer (mrs.rmi_bound)) fixed bin (71),	/* Where we save reset meter data. */
    2 histox (0 refer (mrs.tot_mdevices));		/* Index of adjusted histogram index. */

dcl 1 olock_info based (olock_info_ptr) aligned like lock_info;

dcl 1 omdevice based (omdevice_ptr) aligned like mdevice;


/*		INTERNAL STATIC DATA	*/

dcl  mrs_ptr ptr					/* Pointer to meter_rcp_seg. */
     internal static init (null ());

dcl  brief_options (7) char (8)			/* Brief form of command options. */
     internal static init ("-a", "-lock", "-lg", "-rs",
     "-rr", "-tp", "-dv");

dcl  long_options (7) char (16)			/* Long form of command options. */
     internal static init ("-all", "-lock", "-long", "-reset",
     "-report_reset", "-type", "-device");

dcl  option_codes (7) fixed bin			/* 0 => no value arg,  1 => value_arg. */
     internal static init (0, 0, 0, 0, 0, 1, 1);

/*		EXTERNAL ENTRIES CALLED	*/

dcl (addr, divide, fixed, hbound, null, rel, clock, substr) builtin;

dcl (error_table_$bad_arg,
     error_table_$badopt,
     error_table_$name_not_found,
     error_table_$odd_no_of_args,
     error_table_$wrong_no_of_args) fixed bin (35) external;

dcl  com_err_ entry options (variable);
dcl  cu_$arg_count entry (fixed bin);
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  hcs_$make_seg entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35));
dcl  ioa_ entry options (variable);
dcl  rcp_priv_$copy_meters entry (ptr, fixed bin (19), fixed bin (35));
						/* 	*/
%include rcp_device_types;
/* 	*/
%include rcp_meter_info;
/* 	*/
%include rcp_com_seg;
/* 	*/
/*	Beginning of meter_rcp command.
*/
	ecode,					/* Initialize. */
	     meter_index = 0;
	device_flag = "1"b;
	lock_flag,
	     long_flag,
	     reset_flag = "0"b;

	if mrs_ptr = null ()			/* Do we have a meter_rcp_seg yet? */
	then do;					/* No. */
	     call INIT_MRS;				/* Initialize this temporary work segment. */
	     if ecode ^= 0
	     then return;
	end;

	call cu_$arg_count (num_args);		/* Get number of command arguments. */

	do argx = 1 to num_args;			/* Look at each one of them. */
	     call PROCESS_ARG;			/* Go process this argument. */
	     if ecode ^= 0				/* Was there an error with this argument? */
	     then return;				/* Yes, abort the command. */
	end;

	call GET_METERS;				/* Get the meter data from RCP. */
	if ecode ^= 0				/* Any errors? */
	then return;

	if (device_flag) | (lock_flag)		/* Are we reporting any meters? */
	then call OUTPUT_TIME (meter_time, "Total time metered");

	if device_flag				/* Does user want device meters? */
	then call METER_DEVICES;			/* Yes. */

	if lock_flag				/* Does user want lock meters? */
	then do;					/* Yes, give him meters from both locks. */
	     call METER_LOCK (1);			/* RCS lock. */
	     call METER_LOCK (2);			/* RCPD lock. */
	end;

	if reset_flag				/* Should we save these meters? */
	then call RESET;				/* Yes, future calculations based on this data. */

	return;
						/* 	*/
PROCESS_ARG: procedure;

/*	This procedure is called to process one command option argument.
   *	If this option argument is followed by a value argument then we
   *	we process that argument also.
*/
	     call cu_$arg_ptr (argx, arg_ptr, arg_len, ecode);
	     if ecode ^= 0				/* Did we get a pointer to this argument? */
	     then do;				/* No. */
		call com_err_ (ecode, "meter_rcp", "Error getting argument ^d", argx);
		return;
	     end;

	     option = argument;			/* Save command option argument. */

	     do i = 1 to hbound (long_options, 1);	/* See if command option is valid. */
		if (option = brief_options (i)) |	/* Is it this brief option name? */
		(option = long_options (i))		/* Or this long option name? */
		then do;				/* Yes, one of them. */
		     call GET_VALUE (i);		/* Get any accompanying value argument. */
		     if ecode ^= 0			/* Check for errors. */
		     then return;
		     goto OPTION (i);		/* Go process this option. */
		end;
	     end;

	     ecode = error_table_$badopt;		/* Option is not known. */
	     call com_err_ (ecode, "meter_rcp", "Control argument: ^a", option);
	     return;

OPTION (1):					/* "-a" or "-all" */
	     lock_flag = "1"b;			/* User wants lock meters, devices metered by default. */
	     return;

OPTION (2):					/* "-lock" */
	     lock_flag = "1"b;			/* User wants only lock meters. */
	     device_flag = "0"b;			/* He doesn't want device meters. */
	     return;

OPTION (3):					/* "lg" or "-long" */
	     long_flag = "1"b;			/* User wants long output format. */
	     return;

OPTION (4):					/* "-rs" or "-reset" */
	     lock_flag,				/* No meters typed. */
		device_flag = "0"b;

OPTION (5):					/* "-rr" */
	     reset_flag = "1"b;			/* Reset meter data. */
	     return;

OPTION (6):					/* "-tp" or "-type" */
	     meter_index = 1;			/* 1 => list one device type. */
	     device_type = argument;			/* Get specified device type. */
	     do i = 1 to hbound (device_types, 1);	/* See if this is a valid device type. */
		if device_type = device_types (i)	/* Is it this one? */
		then return;			/* Yes, it is valid. */
	     end;
	     ecode = error_table_$bad_arg;		/* Device type is invalid. */
	     call com_err_ (ecode, "meter_rcp", "Unknown device type: ^a", device_type);
	     return;

OPTION (7):					/* "-dv" or "-device" */
	     meter_index = 2;			/* 2 => list one mdevice. */
	     device_name = argument;			/* Get specified device name. */
	     return;

	end PROCESS_ARG;
						/* 	*/
GET_VALUE: procedure (option_num);

/*	This procedure is called to get any value argument associated with this option.
   *	Processing of the value argument depends upon the option code value associated
   *	with this option.  The option code values are:
   *	     0.	This option argument has no accompanying value argument.
   *	     1.	This option argument has a string type value argument.
*/
dcl  option_num fixed bin;				/* Number that identifies this option. */

	     option_code = option_codes (option_num);	/* Get code value for this option. */

	     if option_code = 0			/* Is there an accompanying argument value? */
	     then return;				/* No, nothing else to do. */

/* Get accompanying argument value. */
	     if argx = num_args			/* Is this the last argument? */
	     then do;				/* Yes, value argument missing. */
		ecode = error_table_$odd_no_of_args;
		call com_err_ (ecode, "meter_rcp", "No value argument for ^a", option);
		return;
	     end;

	     argx = argx + 1;			/* Get the next argument. */
	     call cu_$arg_ptr (argx, arg_ptr, arg_len, ecode);
	     if ecode ^= 0
	     then do;
		call com_err_ (ecode, "meter_rcp", "Error getting argument ^d", argx);
		return;
	     end;

	     if substr (argument, 1, 1) = "-"		/* Is next argument a control option? */
	     then do;				/* Yes, value argument is missing. */
		ecode = error_table_$wrong_no_of_args;
		call com_err_ (ecode, "meter_rcp", "No value argument for ^a", option);
		return;
	     end;

	end GET_VALUE;
						/* 	*/
GET_METERS: procedure;

/*	This procedure is called to get the meter information from RCP.
   *	We will put it in the new meter info.  If we have done a reset
   *	then we will adjust the new meters based on the meter data that we
   *	have previously saved in the old meters area.
*/
	     rmi_ptr = mrs.rmi_ptr;			/* Get pointer to where new structure will go. */
	     rmi.head.version_num = 1;
	     call rcp_priv_$copy_meters (rmi_ptr, mrs.rmi_size, ecode);
	     if ecode ^= 0
	     then do;
		call com_err_ (ecode, "meter_rcp", "Error copying RCP meters.");
		return;
	     end;

	     meter_time = clock () - mrs.starting_time;

	     do i = 1 to rmi.head.tot_mdevices;		/* Adjust meters for assigned devices. */
		mdevice_ptr = addr (rmi.mdevices (i));
		if mdevice.time_assigned ^= 0
		then call ADD_ASSIGNED_METERS;
		else histox = 0;
		mrs.histox (i) = histox;		/* Save current histogram index. */
	     end;

	     if ^mrs.reset_flag			/* Have we done a reset? */
	     then return;				/* No, use data as is. */

	     ormi_ptr = mrs.ormi_ptr;			/* Get pointer to old meter info. */
	     do i = 1 to rmi.head.tot_mdevices;		/* Adjust meters for all devices. */
		mdevice_ptr = addr (rmi.mdevices (i));
		omdevice_ptr = addr (ormi_ptr -> rmi.mdevices (i));
		mdevice.error_count = mdevice.error_count - omdevice.error_count;
		mdevice.num_assigns = mdevice.num_assigns - omdevice.num_assigns;
		mdevice.tot_assign_time = mdevice.tot_assign_time - omdevice.tot_assign_time;
		do j = 1 to 4;
		     mdevice.histogram (j) = mdevice.histogram (j) - omdevice.histogram (j);
		end;
	     end;

	     lock_info_ptr = addr (rmi.rcs_lock_info);	/* Adjust RCS lock meters. */
	     olock_info_ptr = addr (ormi_ptr -> rmi.rcs_lock_info);
	     do i = 1 to 2;				/* Adjust both lock meters. */
		lock_info.num_locks = lock_info.num_locks - olock_info.num_locks;
		lock_info.num_lock_waits = lock_info.num_lock_waits - olock_info.num_lock_waits;
		lock_info.tot_lock_time = lock_info.tot_lock_time - olock_info.tot_lock_time;
		lock_info.tot_wait_time = lock_info.tot_wait_time - olock_info.tot_wait_time;
		lock_info_ptr = addr (rmi.rcpd_lock_info); /* Now adjust RCPD lock meters. */
		olock_info_ptr = addr (ormi_ptr -> rmi.rcpd_lock_info);
	     end;

	end GET_METERS;
						/* 	*/
ADD_ASSIGNED_METERS: procedure;

/*	This procedure is called to meter a device that is currently assigned.
   *	The real meters are updated only when a device is unassigned.
   *	Thus they will not reflect the status of a device that is assigned.
   *	This procedure will adjust the meter data returned about this device
   *	so that it will include information about the assigned device.
*/

	     mdevice.num_assigns = mdevice.num_assigns + 1;
	     mdevice.tot_assign_time = mdevice.tot_assign_time + mdevice.time_assigned;
	     if mdevice.time_assigned > meter_time	/* If assigned before reset use reset time. */
	     then time_assigned = meter_time;
	     else time_assigned = mdevice.time_assigned;
	     seconds = divide (time_assigned, 1000000, 71, 0);
	     mdtype_ptr = addr (rmi.mdtypes (mdevice.dtypex));
	     do j = 1 to hbound (mdtype.histo_times, 1);
		if seconds < mdtype.histo_times (j)
		then do;
		     histox = j;			/* Save histogram slot that matches. */
		     goto ADD_HISTO;
		end;
	     end;
	     histox = hbound (mdevice.histogram, 1);	/* Save histogram slot that matches. */

ADD_HISTO:
	     mdevice.histogram (histox) = mdevice.histogram (histox) + 1;

	end ADD_ASSIGNED_METERS;
						/* 	*/
METER_DEVICES: procedure;

/*	This procedure is called to meter the devices controlled by RCP.
   *	The meter_index variable is used to determine which devices are
   *	to have their meters reported.
*/
	     rmi_ptr = mrs.rmi_ptr;			/* Report RCPD device meters. */
	     goto METER (meter_index);		/* Go to routine that will process correct devices. */

METER (0):					/* Meter all devices. */
	     call ioa_ ("^/Meters for all devices:");
	     if long_flag
	     then call ioa_ ("Number of devices^-=  ^d", rmi.head.tot_mdevices);
	     do dtypex = 1 to rmi.head.tot_mdtypes;	/* Process all device types. */
		mdtype_ptr = addr (rmi.mdtypes (dtypex)); /* Get pointer to device type info. */
		call METER_DTYPE;			/* Report meters for this device type. */
	     end;
	     return;

METER (1):					/* Meter all devices of this type. */
	     do dtypex = 1 to rmi.head.tot_mdtypes;	/* Look for specified device type. */
		mdtype_ptr = addr (rmi.mdtypes (dtypex));
		if mdtype.device_type = device_type	/* Is this the specified device type? */
		then do;				/* Yes. */
		     call METER_DTYPE;		/* Process all devices of this type. */
		     return;
		end;
	     end;
	     ecode = error_table_$name_not_found;
	     call com_err_ (ecode, "meter_rcp", "Device type = ^a", device_type);
	     return;

METER (2):					/* Meter specified mdevice. */
	     do i = 1 to rmi.head.tot_mdevices;		/* Look for device name. */
		mdevice_ptr = addr (rmi.mdevices (i));
		if mdevice.device_name = device_name	/* Is this the specified device? */
		then do;				/* Yes. */
		     call METER_DEVICE;
		     return;
		end;
	     end;
	     ecode = error_table_$name_not_found;
	     call com_err_ (ecode, "meter_rcp", "Device name = ^a", device_name);

	end METER_DEVICES;
						/* 	*/
METER_DTYPE: procedure;

/*	This procedure is called to process the meters of all of the
   *	devices of the specified type.   Note, the offsets of the
   *	dtype and device entries are relative to the base of RCPD.
   *	We must change them to be relative to our RCPD structure
   *	in meter_rcp_seg.
*/
	     if mdtype.num_devices = 0		/* Are there any devices of this type? */
	     then return;				/* No. */

	     call ioa_ ("^/Meters for device type ^a:", mdtype.device_type);

	     do i = 1 to rmi.head.tot_mdevices;		/* Check each device entry. */
		mdevice_ptr = addr (rmi.mdevices (i));	/* Get pointer to device entry. */
		if mdevice.dtypex = dtypex		/* Is device of this type? */
		then call METER_DEVICE;		/* Yes, report its meters. */
	     end;

	end METER_DTYPE;




METER_DEVICE: procedure;

/*	This procedure is called to calculate and output the meter data about
   *	a specific mdevice.
*/
	     call ioa_ ("^5xMeters for ^a", mdevice.device_name);

	     call ioa_ ("^-Total assignments^-= ^4d", mdevice.num_assigns);
	     call ioa_ ("^-Total errors^-= ^4d", mdevice.error_count);
	     call OUTPUT_TIME (mdevice.tot_assign_time, "	Total time assigned");
	     work = divide (mdevice.tot_assign_time*100, meter_time, 35, 0);
	     call ioa_ ("^-% time assigned^-= ^4d %", work);

	     if ^long_flag
	     then return;

	     mdtype_ptr = addr (rmi.mdtypes (mdevice.dtypex));
	     x = mdtype.histo_times (1) / 60;		/* Convert to minutes. */
	     y = mdtype.histo_times (2) / 60;
	     z = mdtype.histo_times (3) / 60;

	     call ioa_ ("^-Assignment Histogram:");
	     call ioa_ ("^-Minutes:  0  - ^3d^-=>^4d", x, mdevice.histogram (1));
	     call ioa_ ("^-^8x^3d  - ^3d^-=>^4d", x, y, mdevice.histogram (2));
	     call ioa_ ("^-^8x^3d  - ^3d^-=>^4d", y, z, mdevice.histogram (3));
	     call ioa_ ("^-^8x^3d  -   ?^-=>^4d", z, mdevice.histogram (4));

	end METER_DEVICE;
						/* 	*/
METER_LOCK: procedure (lock_number);

/*	This procedure is called to calculate and output the meter data
   *	for a given RCP lock.  The argument specifies which lock.
*/
dcl  lock_number fixed bin;				/* 1 => RCS,  2 => RCPD. */

	     rmi_ptr = mrs.rmi_ptr;			/* Get pointer to meter info. */

	     if lock_number = 1			/* Which lock are we metering? */
	     then do;				/* RCPD's lock. */
		call ioa_ ("^/Lock meters for rcp_com_seg:");
		lock_info_ptr = addr (rmi.rcs_lock_info);
	     end;
	     else do;				/* RCS's lock. */
		call ioa_ ("^/Lock meters for rcp_data:");
		lock_info_ptr = addr (rmi.rcpd_lock_info);
	     end;

	     work = divide ((lock_info.tot_lock_time*100), meter_time, 35, 0);
	     call ioa_ ("% time locked^-= ^4d %", work);

	     work = divide ((lock_info.tot_wait_time*100), meter_time, 35, 0);
	     call ioa_ ("% time waiting^-= ^4d %", work);

	     if lock_info.num_locks = 0
	     then work = 0;
	     else work = divide ((lock_info.num_lock_waits)*100, lock_info.num_locks, 35, 0);
	     call ioa_ ("% number of waits^-= ^4d %", work);

	     if ^long_flag				/* Does user want all lock info? */
	     then return;				/* No. */

	     call ioa_ ("Total num of locks^-= ^4d", lock_info.num_locks);
	     call ioa_ ("Total num of waits^-= ^4d", lock_info.num_lock_waits);

	     call OUTPUT_TIME (lock_info.tot_lock_time, "Total time locked");
	     call OUTPUT_TIME (lock_info.tot_wait_time, "Total time waiting");

	end METER_LOCK;
						/* 	*/
OUTPUT_TIME: procedure (work_time, comment);

/*	This procedure is called to convert a fixed bin time value into
   *	hours, minutes, and seconds.  These values will be typed along
   *	with a specified comment.
*/
dcl  comment char (*);				/* Comment describing time. */
dcl  work_time fixed bin (71);			/* Time value to be converted. */

	     seconds = divide (work_time, 1000000, 35, 0); /* Convert to total seconds. */
	     minutes = divide (seconds, 60, 35, 0);	/* Now to total minutes. */
	     hours = divide (minutes, 60, 35, 0);	/* Now to total hours. */

	     seconds = seconds - minutes * 60;		/* Number of seconds in last minute. */
	     minutes = minutes - hours * 60;		/* Number of minutes in last minute. */

	     call ioa_ ("^a^-=  ^3d hours, ^2d minutes, ^2d seconds",
		comment, hours, minutes, seconds);

	end OUTPUT_TIME;
						/* 	*/
RESET:	procedure;

/*	This procedure is called to save the current meter values.
   *	They will be saved in mrs.ormi_ptr->rmi.  Since the data in
   *	mrs.rmi has been changed and made relative to the old data we
   *	must add the two together to get the original data.
*/
	     rmi_ptr = mrs.rmi_ptr;			/* Get pointers to device meters. */
	     ormi_ptr = mrs.ormi_ptr;
	     do i = 1 to rmi.head.tot_mdevices;		/* Save data for each mdevice. */
		mdevice_ptr = addr (rmi.mdevices (i));	/* Get pointer to new device entry. */
		if mrs.histox (i) ^= 0		/* Did we adjust for an assigned device? */
		then do;				/* Yes, subtract meters for assigned device. */
		     histox = mrs.histox (i);
		     mrs.histox (i) = 0;
		     mdevice.num_assigns = mdevice.num_assigns - 1;
		     mdevice.histogram (histox) = mdevice.histogram (histox) - 1;
		end;
		omdevice_ptr = addr (ormi_ptr -> rmi.mdevices (i)); /* Get pointer to old device entry. */
		omdevice.error_count = omdevice.error_count + mdevice.error_count;
		omdevice.num_assigns = omdevice.num_assigns + mdevice.num_assigns;
		omdevice.tot_assign_time = omdevice.tot_assign_time + mdevice.tot_assign_time;
		do j = 1 to 4;
		     omdevice.histogram (j) = omdevice.histogram (j) + mdevice.histogram (j);
		end;
	     end;

	     lock_info_ptr = addr (rmi.rcs_lock_info);	/* Now save lock meters. */
	     olock_info_ptr = addr (ormi_ptr -> rmi.rcs_lock_info); /* RCS lock first. */
	     do i = 1 to 2;				/* Save calculations for both locks. */
		olock_info.num_locks = olock_info.num_locks + lock_info.num_locks;
		olock_info.num_lock_waits = olock_info.num_lock_waits + lock_info.num_lock_waits;
		olock_info.tot_lock_time = olock_info.tot_lock_time + lock_info.tot_lock_time;
		olock_info.tot_wait_time = olock_info.tot_wait_time + lock_info.tot_wait_time;
		lock_info_ptr = addr (rmi.rcpd_lock_info); /* Next do RCPD lock meters. */
		olock_info_ptr = addr (ormi_ptr -> rmi.rcpd_lock_info);
	     end;

	     mrs.reset_flag = "1"b;			/* Make sure we know we have reset. */
	     mrs.starting_time = mrs.starting_time + meter_time;

	end RESET;
						/* 	*/
INIT_MRS:	procedure;

/*	This procedure is called to initialize the meter_rcp_seg work segment.
   *	We will create a work segment in the user's process directory.
   *	In order to find the size of the meter data (since the number of
   *	device entries is not known) we must call RCP to copy out the meters.
*/
	     call hcs_$make_seg ("", "meter_rcp_seg", "", 01010b, mrs_ptr, ecode);
	     if ecode ^= 0				/* There should be no problems. */
	     then do;				/* But there is. */
		call com_err_ (ecode, "meter_rcp", "Error making meter_rcp_seg.");
		return;
	     end;

	     rmi_ptr = addr (mrs.new_rmi);		/* Initially use some very large size. */
	     rmi.head.version_num = 1;		/* Must set version number. */
	     call rcp_priv_$copy_meters (rmi_ptr, 63*1024, ecode);
	     if ecode ^= 0				/* Can't go on if any trouble. */
	     then do;
		call com_err_ (ecode, "meter_rcp", "Error copying RCP meters.");
		return;
	     end;

	     mrs.reset_flag = "0"b;			/* Set up MRS header data. */
	     mrs.rmi_size = fixed (rel (addr (rmi.end)), 18) - fixed (rel (rmi_ptr), 18);
	     mrs.rmi_bound = ((mrs.rmi_size + 1) / 2) * 2;
	     mrs.rmi_ptr = rmi_ptr;			/* Save pointers to new and old areas. */
	     mrs.ormi_ptr = addr (mrs.old_rmi);
	     mrs.tot_mdevices = rmi.head.tot_mdevices;
	     do i = 1 to rmi.head.tot_mdevices;
		mrs.histox (i) = 0;
	     end;
	     mrs.starting_time = rmi.rcpd_lock_info.starting_time;

	end INIT_MRS;

     end meter_rcp;
