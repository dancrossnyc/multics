/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */
/* format: style2,ind3 */

/*

   Last modified:

   4/14/76 by R. Bratt for demand deactivate
   10/17/76 by B. Greenberg for activations
   12/20/78 by REM for MR7
   10/08/80 by C. Hornig for new get_aste meters
   01/26/81 by E. N. Kittlitz for makeknown_activations
   03/10/81 by E. N. Kittlitz for new page skip counters & format
            changed erroneous fixed bin dcls to proper length
   07/15/81 by J. Bongiovanni for seg_fault_calls
   03/26/82 by J. Bongiovanni for volmap_seg, cleanup format
   11/08/82 by J. Bongiovanni for synch activations, force retries
   84-01-19 by BIM for segment mover meters.
   85-01-15 by Keith Loepere for covert channel meters.
*/

file_system_meters:
fsm:
   procedure options (separate_static);

      dcl	    argl		       fixed bin (21);
      dcl	    argp		       ptr;
      dcl	    argc		       fixed bin;
      dcl	    argx		       fixed bin;
      dcl	    code		       fixed bin (35);
      dcl	    faults	       float bin;
      dcl	    formatted_time	       char (10);
      dcl	    i		       float bin;
      dcl	    j		       fixed bin (35);
      dcl	    k		       float bin;
      dcl	    meter_time	       float bin;
      dcl	    meter_time_fixed       fixed bin (71);
      dcl	    seg_state_change_audit fixed bin (35);
      dcl	    seg_state_change_delay fixed bin (35);
      dcl	    sf		       fixed bin (35);
      dcl	    steps		       fixed bin (35);
      dcl	    stf		       fixed bin (35);
      dcl	    t0		       (0:3) fixed bin;
      dcl	    t1		       (0:3) fixed bin;
      dcl	    t2		       (0:3) fixed bin;
      dcl	    t3		       (0:3) float bin;
      dcl	    t4		       (0:3) fixed bin;
      dcl	    t5		       (0:3) float bin;
      dcl	    targ		       char (argl) based (argp);
      dcl	    unique	       fixed bin static init (0);
      dcl	    (as_ehs, as_level, as_init, aste_steps, as_skips, as_synch)
			       fixed bin (35);
      dcl	    (deacts, deactas, acts, mkacts, sfacts, bkacts, sfcalls, synchacts)
			       fixed bin (35);
      dcl	    (pagesw, briefsw, astsw, rsw)
			       bit (1) init ("0"b);
      dcl	    (ps_wired, ps_used, ps_mod, ps_os, ps_fc_pin, ps_cl_pin, ps_skips)
			       fixed bin (35);
      dcl	    (f_acts, f_as_skips, f_ps_skips)
			       float bin;
      dcl	    (sstp1, sstp2, tcdp1, tcdp2)
			       ptr static;
      dcl	    (a_sstp1, a_sstp2)     (1) ptr;

      dcl	    com_err_	       entry options (variable);
      dcl	    cu_$arg_count	       entry returns (fixed bin);
      dcl	    cu_$arg_ptr	       entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
      dcl	    ioa_		       entry options (variable);
      dcl	    metering_util_$define_regions
			       entry options (variable);
      dcl	    metering_util_$fill_buffers
			       entry (fixed bin, fixed bin (71), char (*), (*) ptr, (*) ptr, fixed bin (35));
      dcl	    metering_util_$reset   entry (fixed bin, fixed bin (35));
      dcl	    error_table_$noarg     ext fixed bin;
      dcl	    error_table_$badopt    fixed bin (35) ext static;

      dcl	    (max, fixed, float)    builtin;

      if unique = 0
      then
         do;					/* initialize metering_util_ */
	  call metering_util_$define_regions (unique, code, "sst_seg", 0, size (sst));
	  if code ^= 0
	  then go to error;
         end;

      argc = cu_$arg_count ();
      do argx = 1 to argc;
         call cu_$arg_ptr (argx, argp, argl, code);
         if code = error_table_$noarg | argl = 0
         then go to endarg;
         if targ = "-reset" | targ = "-rs"
         then rsw = "1"b;				/* set RESET switch */
         else if targ = "-page" | targ = "-pg"
         then pagesw = "1"b;				/* set PAGE switch */
         else if targ = "-ast"
         then astsw = "1"b;				/* set AST switch */
         else if targ = "-brief" | targ = "-bf"
         then briefsw = "1"b;				/* set BRIEF switch */
         else if targ = "-report_reset" | targ = "-rr"
         then rsw, astsw, pagesw = "1"b;
         else
	  do;
	     call com_err_ (error_table_$badopt, "file_system_meters", targ);
	     return;
	  end;
      end;

endarg:
      if argc = 0
      then astsw, pagesw = "1"b;
      if briefsw & ^pagesw & ^astsw
      then astsw, pagesw = "1"b;

      call metering_util_$fill_buffers (unique, meter_time_fixed, formatted_time, a_sstp2, a_sstp1, code);
      if code ^= 0
      then go to error;
      sstp1 = a_sstp1 (1);				/* we've only got 1 element arrays, */
      sstp2 = a_sstp2 (1);				/* so move those pointers to handy places */
      meter_time = meter_time_fixed;			/* convert to floating point variable */
      call ioa_ ("^/Total metering time^-^a^/", formatted_time);

      if astsw
      then
         do;
	  acts = sstp2 -> sst.activations - sstp1 -> sst.activations;
	  mkacts = sstp2 -> sst.makeknown_activations - sstp1 -> sst.makeknown_activations;
	  bkacts = sstp2 -> sst.backup_activations - sstp1 -> sst.backup_activations;
	  synchacts = sstp2 -> synch_activations - sstp1 -> sst.synch_activations;
	  sfacts = acts - mkacts - bkacts;
	  f_acts = max (1, acts) / 1e2;		/* setup for percentages */

	  call ioa_ ("^/^-^-   #^-     ATB");
	  call ioa_ ("^/Activations    ^10d^12.3f sec.", acts, mtb_sec (acts));

	  if sfacts ^= 0
	  then call ioa_ ("   segfault    ^10d^12.3f sec. ^7.3f% of all", sfacts, mtb_sec (sfacts), sfacts / f_acts);

	  if mkacts ^= 0
	  then call ioa_ ("   makeknown   ^10d^12.3f sec. ^7.3f% of all", mkacts, mtb_sec (mkacts), mkacts / f_acts);

	  if bkacts ^= 0
	  then call ioa_ ("   backup      ^10d^12.3f sec. ^7.3f% of all", bkacts, mtb_sec (bkacts), bkacts / f_acts);

	  j = sstp2 -> sst.dir_activations - sstp1 -> sst.dir_activations;
	  if j ^= 0
	  then call ioa_ ("   directories ^10d^12.3f sec. ^7.3f% of all", j, mtb_sec (j), j / f_acts);

	  if synchacts ^= 0
	  then call ioa_ ("   synch      ^10d^12.3f sec. ^7.3f% of all", synchacts, mtb_sec (synchacts),
		  synchacts / f_acts);

	  deacts = sstp2 -> sst.deact_count - sstp1 -> sst.deact_count;

	  call ioa_ ("Deactivations  ^10d^12.3f sec.", deacts, mtb_sec (deacts));
	  call ioa_ ("Demand deactivate");

	  deactas = sstp2 -> sst.demand_deact_attempts - sstp1 -> sst.demand_deact_attempts;
	  if deactas ^= 0
	  then call ioa_ ("   attempts    ^10d^12.3f sec.", deactas, mtb_sec (deactas));

	  j = sstp2 -> sst.demand_deactivations - sstp1 -> sst.demand_deactivations;
	  if j ^= 0
	  then call ioa_ ("   successes   ^10d^12.3f sec. ^7.3f%, ^7.3f% of total", j, mtb_sec (j),
		  (j * 100.) / max (deactas, 1), (j * 100.) / max (deacts, 1));

	  sf = sstp2 -> sst.total_sf + sstp2 -> sst.seg_fault_calls - sstp1 -> sst.total_sf
	       - sstp1 -> sst.seg_fault_calls;
	  call ioa_ ("Seg Faults     ^10d^12.3f sec.", sf, mtb_sec (sf));

	  if sf > 0
	  then
	     do;
	        j = sstp2 -> sst.total_sf - sstp1 -> sst.total_sf;
	        call ioa_ ("   fault       ^10d^12.3f sec. ^7.3f% of Seg Faults", j, mtb_sec (j),
		   float (j) * 1.0e2 / sf);
	        j = sstp2 -> sst.seg_fault_calls - sstp1 -> sst.seg_fault_calls;
	        call ioa_ ("   call        ^10d^12.3f sec. ^7.3f% of Seg Faults", j, mtb_sec (j),
		   float (j) * 1.0e2 / sf);
	        call ioa_ ("   activations ^10d^12.3f sec. ^7.3f% of Seg Faults", sfacts, mtb_sec (sfacts),
		   float (sfacts) * 1.0e2 / sf);
	     end;

	  j = sstp2 -> sst.total_bf - sstp1 -> sst.total_bf;
	  call ioa_ ("Bound Faults ^12d^12.3f sec.", j, mtb_sec (j));

	  if ^briefsw
	  then
	     do;
	        stf = sstp2 -> sst.setfaults_all - sstp1 -> sst.setfaults_all;
	        call ioa_ ("Setfaults      ^10d^12.3f msec.", stf, mtb_msec (stf));

	        if stf > 0
	        then
		 do;
		    j = sstp2 -> sst.setfaults_acc - sstp1 -> sst.setfaults_acc;
		    call ioa_ ("   access      ^10d^12.3f sec. ^7.3f% of setfaults", j, mtb_sec (j),
		         float (j) * 1.0e2 / stf);
		 end;

	        j = sstp2 -> sst.updates - sstp1 -> sst.updates;
	        call ioa_ ("ASTE Trickle   ^10d^12.3f sec.", j, mtb_sec (j));

/**** Segment_mover meters */

	        k = sstp2 -> sst.sgm_time - sstp1 -> sst.sgm_time;
	        k = k / 1e3;			/* msec */
	        j = sstp2 -> sst.sgm_pf - sstp1 -> sst.sgm_pf;
	        i = (sstp2 -> sst.good_sgms + sstp2 -> sst.bad_sgms) - (sstp1 -> sst.good_sgms + sstp1 -> sst.bad_sgms);
	        if i > 0
	        then
		 do;
		    call ioa_ ("Segment moves  ^10d", i);
		    call ioa_ ("   vcpu        ^12.3f", k);
		    call ioa_ ("   good        ^10d", sstp2 -> sst.good_sgms - sstp1 -> sst.good_sgms);
		    call ioa_ ("   bad         ^10d", sstp2 -> sst.bad_sgms - sstp1 -> sst.bad_sgms);
		    call ioa_ ("   reads       ^10d", sstp2 -> sst.segmove_n_reads - sstp1 -> sst.segmove_n_reads);
		    call ioa_ ("   max retries ^10d", sstp2 -> sst.segmove_max_tries - sstp1 -> sst.segmove_max_tries)
		         ;
		    call ioa_ ("   page_faults ^10d", sstp2 -> sst.sgm_pf - sstp1 -> sst.sgm_pf);
		    call ioa_ ("   seg_faults  ^10d", sstp2 -> sst.sgm_sgft - sstp1 -> sst.sgm_sgft);
		 end;

	        aste_steps = sstp2 -> sst.stepsa - sstp1 -> sst.stepsa;
	        call ioa_ ("Steps	     ^10d^12.3f msec.", aste_steps, mtb_msec (aste_steps));

	        as_ehs = sstp2 -> sst.askipsehs - sstp1 -> sst.askipsehs;
	        as_level = sstp2 -> sst.askipslevel - sstp1 -> sst.askipslevel;
	        as_init = sstp2 -> sst.askipsinit - sstp1 -> sst.askipsinit;
	        as_synch = sstp2 -> sst.synch_skips - sstp1 -> sst.synch_skips;

	        as_skips = as_ehs + as_level + as_init + as_synch;

	        call ioa_ ("Skips          ^10d^12.3f sec. ^7.3f% of Steps", as_skips, mtb_sec (as_skips),
		   (as_skips * 1e2) / max (1, aste_steps));

	        f_as_skips = max (as_skips, 1) / 1e2;	/* setup for percentages */

	        if as_ehs ^= 0
	        then call ioa_ ("   ehs         ^10d^12.3f sec. ^7.3f% of Skips", as_ehs, mtb_sec (as_ehs),
		        as_ehs / f_as_skips);

	        if as_level ^= 0
	        then call ioa_ ("   mem         ^10d^12.3f sec. ^7.3f% of Skips", as_level, mtb_sec (as_level),
		        as_level / f_as_skips);

	        if as_init ^= 0
	        then call ioa_ ("   init        ^10d^12.3f sec. ^7.3f% of Skips", as_init, mtb_sec (as_init),
		        as_init / f_as_skips);

	        if as_synch ^= 0
	        then call ioa_ ("   synch       ^10d^12.3f sec. ^7.3f% of Skips", as_synch, mtb_sec (as_synch),
		        as_synch / f_as_skips);

	        j = sstp2 -> sst.asearches - sstp1 -> sst.asearches;
	        call ioa_ ("Searches       ^10d^12.3f sec. ^[^7.3f Average cost^;^s^]", j, mtb_sec (j), (j > 0),
		   float (sstp2 -> sst.acost - sstp1 -> sst.acost) / max (j, 1));
	     end;

	  j = sstp2 -> sst.cleanup_count - sstp1 -> sst.cleanup_count;
	  k = sstp2 -> sst.cleanup_real_time - sstp1 -> sst.cleanup_real_time;
	  k = k * 1e2 / max (1e0, meter_time);
	  call ioa_ ("Cleanups^-^15d^12.3f sec. ^5.1f % of real time", j, mtb_sec (j), k);


	  j = sstp2 -> sst.force_swrites - sstp1 -> sst.force_swrites;
	  call ioa_ ("Force writes      ^7d^12.3f sec.", j, mtb_sec (j));
	  if j ^= 0
	  then
	     do;					/* only print details if any fw */
	        i = j * 1e3;
	        j = sstp2 -> sst.fw_none - sstp1 -> sst.fw_none;
	        i = i - j * 1e3;
	        if j ^= 0
	        then call ioa_ ("   without pwrites^7d^12.3f sec.", j, mtb_sec (j));

	        j = sstp2 -> sst.force_pwrites - sstp1 -> sst.force_pwrites;
	        if j ^= 0
	        then call ioa_ ("   pages written ^8d^12.3f sec.", j, mtb_sec (j));

	        j = sstp2 -> sst.force_updatevs - sstp1 -> sst.force_updatevs;
	        if j ^= 0
	        then call ioa_ ("   force updatev ^8d^12.3f sec.", j, mtb_sec (j));
	        j = sstp2 -> sst.fw_retries - sstp1 -> sst.fw_retries;
	        if j ^= 0
	        then call ioa_ ("   force retries ^8d^12.3f sec.", j, mtb_sec (j));
	     end;

	  j = sstp2 -> sst.ast_locking_count - sstp1 -> sst.ast_locking_count;
	  call ioa_ ("Lock AST       ^10d^12.3f sec.", j, mtb_sec (j));
	  call ioa_ (" ");				/* Breakout AST lock meters */
	  call ioa_ ("^-^- AVE/lock^-      %");

	  k = sstp2 -> sst.ast_locked_total_time - sstp1 -> sst.ast_locked_total_time;
	  j = sstp2 -> sst.ast_locking_count - sstp1 -> sst.ast_locking_count;

	  if j > 0
	  then i = 1e-3 * k / j;
	  else i = 0e0;				/* ave msec locked */

	  k = 1e2 * k / max (meter_time, 1e0);
	  call ioa_ ("AST locked      ^9.3f msec.^6.1f", i, k);

	  k = sstp2 -> sst.ast_lock_wait_time - sstp1 -> sst.ast_lock_wait_time;
	  if j > 0e0
	  then i = 1e-3 * k / j;
	  else i = 0e0;				/* ave msec wait */

	  k = 1e2 * k / max (meter_time, 1e0);
	  call ioa_ ("AST lock waiting^9.3f msec.^6.1f", i, k);

	  do j = 0 to 3;
	     t0 (j) = sstp2 -> sst.pts (j);
	     t1 (j) = sstp2 -> sst.asteps (j) - sstp1 -> sst.asteps (j);
	     t2 (j) = sstp2 -> sst.aneedsize (j) - sstp1 -> sst.aneedsize (j);
	     t3 (j) = float (t1 (j)) / max (1e0, float (t2 (j)));
	     t4 (j) = fixed (sstp2 -> sst.no_aste (j));
	     t5 (j) = (t4 (j) / max (1e0, t1 (j))) * meter_time * 1e-6;
	  end;

	  call ioa_ ("^/AST Sizes    ^10d^10d^10d^10d", t0 (0), t0 (1), t0 (2), t0 (3));
	  call ioa_ ("Number       ^10d^10d^10d^10d", t4 (0), t4 (1), t4 (2), t4 (3));
	  call ioa_ ("Need         ^10d^10d^10d^10d", t2 (0), t2 (1), t2 (2), t2 (3));
	  call ioa_ ("Steps        ^10d^10d^10d^10d", t1 (0), t1 (1), t1 (2), t1 (3));
	  call ioa_ ("Ave Steps    ^10.1f^10.1f^10.1f^10.1f", t3 (0), t3 (1), t3 (2), t3 (3));
	  call ioa_ ("Lap Time(sec)^10.1f^10.1f^10.1f^10.1f", t5 (0), t5 (1), t5 (2), t5 (3));
         end;

      if pagesw
      then
         do;
	  call ioa_ ("^/^-       #^-^-ATB^/");
	  j, faults = sstp2 -> sst.needc - sstp1 -> sst.needc;

	  call ioa_ ("Needc     ^10d^12.3f msec.", j, mtb_msec (j));

	  j = sstp2 -> sst.ceiling - sstp1 -> sst.ceiling;
	  if j ^= 0
	  then call ioa_ ("Ceiling   ^10d^12.3f min.", j, mtb_sec (60 * j));

	  j = sstp2 -> sst.claim_runs - sstp1 -> sst.claim_runs;
	  if j ^= 0
	  then call ioa_ ("Claim runs^10d^12.3f min.", j, mtb_sec (60 * j));

	  if faults ^= 0e0
	  then
	     do;
	        call ioa_ ("Ring 0 faults^-^12.3f %",
		   float (sstp2 -> sst.ring_0_page_faults - sstp1 -> sst.ring_0_page_faults) * 1e2 / faults);
	        call ioa_ ("PDIR faults^-^12.3f %",
		   float (sstp2 -> sst.pdir_page_faults - sstp1 -> sst.pdir_page_faults) * 1e2 / faults);
	        call ioa_ ("Level 2 faults^-^12.3f %",
		   float (sstp2 -> sst.level_1_page_faults - sstp1 -> sst.level_1_page_faults) * 1e2 / faults);
	        call ioa_ ("DIR faults^-^12.3f %",
		   float (sstp2 -> sst.dir_page_faults - sstp1 -> sst.dir_page_faults) * 1e2 / faults);
	        call ioa_ ("New Pages^-^-^12.3f %",
		   float (sstp2 -> sst.new_pages - sstp1 -> sst.new_pages) * 1e2 / faults);

	        i = (sstp2 -> sst.oopv - sstp1 -> sst.oopv);
	        if i > 0
	        then call ioa_ ("OOPV      ^10d^12.3f %", i, float (i) * 1e2 / faults);
	     end;

	  j = sstp2 -> sst.volmap_seg_page_faults - sstp2 -> sst.volmap_seg_page_faults;
	  call ioa_ ("Volmap_seg^10d^12.3f msec.", j, mtb_msec (j));

	  j = sstp2 -> sst.zero_pages - sstp1 -> sst.zero_pages;
	  call ioa_ ("Zero pages^10d^12.3f msec.", j, mtb_msec (j));

	  seg_state_change_delay = sstp2 -> sst.delayed_seg_state_chg - sstp1 -> sst.delayed_seg_state_chg;
	  seg_state_change_audit = sstp2 -> sst.audit_seg_state_chg - sstp1 -> sst.audit_seg_state_chg;

	  if seg_state_change_delay > 0 | seg_state_change_audit > 0
	  then
	     do;
	        call ioa_ ("Seg state chg.");
	        if seg_state_change_delay > 0
	        then
		 do;
		    k = sstp2 -> sst.seg_state_chg_delay - sstp1 -> sst.seg_state_chg_delay;
		    i = 1e-6 * k / seg_state_change_delay;
		    call ioa_ ("   delayed^10d^12.3f sec.  ^7.3f sec. avg. delay", seg_state_change_delay,
		         mtb_sec (seg_state_change_delay), i);
		 end;
	        if seg_state_change_audit > 0
	        then call ioa_ ("   audited^10d^12.3f sec.", seg_state_change_audit, mtb_sec (seg_state_change_audit));
	     end;

	  steps = sstp2 -> sst.steps - sstp1 -> sst.steps;
	  j = steps / sstp2 -> sst.nused;
	  call ioa_ ("Laps      ^10d^12.3f sec.", j, mtb_sec (j));

	  if ^briefsw
	  then
	     do;
	        call ioa_ ("Steps	^10d^12.3f msec.", steps, mtb_msec (steps));
	        ps_wired = sstp2 -> sst.skipw - sstp1 -> sst.skipw;
	        ps_used = sstp2 -> sst.skipu - sstp1 -> sst.skipu;
	        ps_mod = sstp2 -> sst.skipm - sstp1 -> sst.skipm;
	        ps_os = sstp2 -> sst.skipos - sstp1 -> sst.skipos;
	        ps_fc_pin = sstp2 -> sst.fc_skips_pinned - sstp1 -> sst.fc_skips_pinned;
	        ps_cl_pin = sstp2 -> sst.cl_skips_pinned - sstp1 -> sst.cl_skips_pinned;
	        ps_skips = ps_wired + ps_used + ps_mod + ps_os + ps_fc_pin + ps_cl_pin;

	        call ioa_ ("Skip      ^10d^12.3f msec. ^7.3f% of Steps", ps_skips, mtb_msec (ps_skips),
		   (ps_skips * 1e2) / max (1, steps));

	        f_ps_skips = max (ps_skips, 1) / 1e2;	/* setup for percentages */
	        if ps_wired ^= 0
	        then call ioa_ ("   wired  ^10d^12.3f msec. ^7.3f% of Skip", ps_wired, mtb_msec (ps_wired),
		        ps_wired / f_ps_skips);

	        if ps_used ^= 0
	        then call ioa_ ("   used   ^10d^12.3f msec. ^7.3f% of Skip", ps_used, mtb_msec (ps_used),
		        ps_used / f_ps_skips);

	        if ps_mod ^= 0
	        then call ioa_ ("   mod    ^10d^12.3f msec. ^7.3f% of Skip", ps_mod, mtb_msec (ps_mod),
		        ps_mod / f_ps_skips);

	        if ps_os ^= 0
	        then call ioa_ ("   os     ^10d^12.3f msec. ^7.3f% of Skip", ps_os, mtb_msec (ps_os),
		        ps_os / f_ps_skips);

	        if ps_fc_pin ^= 0
	        then call ioa_ ("   fc pin ^10d^12.3f msec. ^7.3f% of Skip", ps_fc_pin, mtb_msec (ps_fc_pin),
		        ps_fc_pin / f_ps_skips);

	        if ps_cl_pin ^= 0
	        then call ioa_ ("   cl pin ^10d^12.3f msec. ^7.3f% of Skip", ps_cl_pin, mtb_msec (ps_cl_pin),
		        ps_cl_pin / f_ps_skips);
	     end;

	  call ioa_ ("^/^d pages, ^d wired.", sstp2 -> sst.nused, sstp2 -> sst.wired);
	  call ioa_ ("Average steps ^12.3f", steps / max (faults, 1e0));
         end;

      if rsw
      then call metering_util_$reset (unique, code);
      if code ^= 0
      then go to error;

      call ioa_ (" ");
      return;

error:
      call com_err_ (code, "file_system_meters");
      return;


mtb_sec:
   proc (x) returns (float bin);

      dcl	    x		       fixed bin (35);

      if x = 0
      then return (0e0);
      else return (meter_time / (x * 1e6));

   end;


mtb_msec:
   proc (x) returns (float bin);

      dcl	    x		       fixed bin (35);

      if x = 0
      then return (0e0);
      else return (meter_time / (x * 1e3));

   end;
%page;
%include sst;

   end;
