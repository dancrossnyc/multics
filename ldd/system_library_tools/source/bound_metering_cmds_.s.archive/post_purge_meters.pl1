/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


post_purge_meters: ppm: proc;

/* Entries */

dcl  cu_$arg_count entry returns (fixed bin);
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  meter_util_$get_buffers entry (fixed bin, ptr, ptr, ptr, ptr, fixed bin (35));
dcl  meter_util_$fill_buffers entry (fixed bin);
dcl  meter_util_$time entry (fixed bin, float bin);
dcl  meter_util_$reset entry (fixed bin);
dcl  ioa_ entry options (variable);
dcl  com_err_ entry options (variable);

/* Automatic */

dcl (i, count, list_size, ws_size, thrash, in_core, purges) fixed bin;
dcl (reset_sw, rps) bit (1) init ("0"b);
dcl  code fixed bin (35);
dcl  tc fixed bin;
dcl  tp ptr;
dcl  time fixed bin (71);
dcl  ftime float bin;
dcl (pc, ave, ave_time) float bin;

/* Static */

dcl  myname char (17) static init ("post_purge_meters");
dcl (sstp1, sstp2, tcdp1, tcdp2) ptr static;
dcl  unique fixed bin static init (0);

/* Based */

dcl  targ char (tc) based (tp);

	do i = 1 to cu_$arg_count ();
	     call cu_$arg_ptr (i, tp, tc, code);
	     if targ = "-report_reset" | targ = "-rr" then reset_sw, rps = "1"b;
	     else if targ = "-reset" | targ = "-rs" then reset_sw = "1"b;
	     else call com_err_ (0, (myname), "Unrecognized option ^a ignored", targ);
	end;

	if ^reset_sw then rps = "1"b;

	if unique = 0 then do;
	     call meter_util_$get_buffers (unique, sstp1, sstp2, tcdp1, tcdp2, code);
	     if code ^= 0 then do;
		call com_err_ (0, (myname), "Cannot get buffers.");
		return;
	     end;
	end;

	call meter_util_$fill_buffers (unique);
	call meter_util_$time (unique, ftime);
	ftime = tcdp2 -> tcm.processor_time - tcdp1 -> tcm.processor_time;

	if rps then do;
	     time = sstp2 -> sst.post_purge_time - sstp1 -> sst.post_purge_time;
	     count = sstp2 -> sst.post_purge_calls - sstp1 -> sst.post_purge_calls;
	     if count > 0 then do;
		ave_time = 1e-3*time/count;
		pc = 1e2*time/ftime;
		call ioa_ ("^/Post purge time^-^8.2f msec. (^.2f% of system)", ave_time, pc);
		list_size = sstp2 -> sst.post_list_size - sstp1 -> sst.post_list_size;
		ave = list_size/count;
		call ioa_ ("Ave list size^-^8.2f entries", ave);

		ws_size = sstp2 -> sst.pre_page_size - sstp1 -> sst.pre_page_size;
		ave = ws_size/count;
		call ioa_ ("Ave working set^-^8.2f pages", ave);

		call ioa_ ("Working set factor^-^8.2f", tcdp2 -> tcm.working_set_factor);

		call ioa_ ("Working set addend^-^8d", tcdp2 -> tcm.working_set_addend);

		thrash = sstp2 -> sst.thrashing - sstp1 -> sst.thrashing;
		ave = 1e2*thrash/list_size;
		call ioa_ ("Thrashing percentage^8.2f %", ave);

		in_core = sstp2 -> sst.post_in_core - sstp1 -> sst.post_in_core;
		ave = in_core/count;
		call ioa_ ("Ave post in core^-^8.2f       (^.2f %)", ave, 1e2*in_core/list_size);

		purges = sstp2 -> sst.post_purgings - sstp1 -> sst.post_purgings;
		ave = purges/count;
		if purges > 0 then call ioa_ ("Ave post purges^-^8.2f       (^.2f %)", ave, 1e2*purges/list_size);
	     end;
	     else call ioa_ ("^/No activity.");
	end;

	call ioa_ (" ");

	if reset_sw then call meter_util_$reset (unique);
	return;

/*  */

%include sst;
%include tcm;
%include hc_lock;
     end;
