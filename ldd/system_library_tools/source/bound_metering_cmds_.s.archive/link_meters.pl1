/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/*   link_meters
     Program to print per-process meters on linkage fault
     processing, which are maintained in the pds by
     link_snap.
*/

/*   Updated by Alan Bier - March 1974. */
/*   Cleaned up substantially by J. Bongiovanni - December 80 */

link_meters: lkm: proc;

/*  Automatic */

dcl  argl fixed bin (21);
dcl  argp ptr;
dcl  cnt fixed bin (35);
dcl  code fixed bin (35);
dcl  cur_buf_ptrs (3) ptr;
dcl  formatted_meter_time char(10);
dcl  i fixed bin;
dcl  meter_time fixed bin (71);
dcl  nargs fixed bin;
dcl  prev_buf_ptrs (3) ptr;
dcl  repsw bit (1) init ("0"b);
dcl  rsw bit (1) init ("0"b);
dcl  tcnt fixed bin (35);
dcl  total_count fixed bin (35);
dcl  total_page_faults fixed bin (35);
dcl  total_time fixed bin (35);	        
dcl  ttim fixed bin (35);

/*  Static */

dcl  our_name char (11) init ("link_meters")  int static options (constant);
dcl  slot (0:3) char (10) internal static
     init ("<25", "25-50", "50-75", ">75") options (constant);
dcl unique fixed bin int static init (0);

/*  Based */

dcl  arg char (argl) based (argp);
dcl  count (0:3) fixed bin (17) based (cur_buf_ptrs (1));
dcl  o_count (0:3) fixed bin (17) based (prev_buf_ptrs (1));
dcl  o_page_faults (0:3) fixed bin (35) based (prev_buf_ptrs (3));
dcl  o_time (0:3) fixed bin (35) based (prev_buf_ptrs (2));
dcl  page_faults (0:3) fixed bin (35) based (cur_buf_ptrs (3));
dcl  time (0:3) fixed bin (35) based (cur_buf_ptrs (2));
	        
/*  External */

dcl  error_table_$badopt fixed bin (35) external;

/*  Entry */

dcl  com_err_ entry options (variable);
dcl  cu_$arg_count entry (fixed bin);
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin(21), fixed bin(35));
dcl  ioa_ entry options (variable);
dcl  metering_util_$define_regions entry options (variable);
dcl  metering_util_$fill_buffers entry (fixed bin, fixed bin (71), char (*),
	        (*) ptr, (*) ptr, fixed bin (35));
dcl  metering_util_$reset entry (fixed bin, fixed bin (35));
	        
/*  Builtin */

dcl  float builtin;

/*  */
          call cu_$arg_count (nargs);

	do i = 1 to nargs;
	     call cu_$arg_ptr (i, argp, argl, code);
	     if arg = "-reset" | arg = "-rs" then rsw = "1"b;
	     else if arg = "-report_reset" | arg = "-rr" then repsw, rsw = "1"b;
	     else do;
                    call com_err_ (error_table_$badopt, our_name, arg);
                    return;
	     end;
	end;                    
						
          if ^rsw then repsw = "1"b;			/* report is the default			*/
	
          if unique=0 then do;			/* not initialized yet			*/
	     call metering_util_$define_regions (unique, code,
		"pds", "link_meters_bins", 4,
		"pds", "link_meters_times", 4,
		"pds", "link_meters_pgwaits", 4);
	     if code^=0 then do;
init_err:		call com_err_ (code, our_name, "Initializing");
		return;
	     end;
          end;
          
          if repsw then do;				/* report option				*/
	     call ioa_ ("^/Linkage Meters:^/");
	     call metering_util_$fill_buffers (unique, meter_time, formatted_meter_time,
		cur_buf_ptrs, prev_buf_ptrs, code);
	     if code^=0 then do;
		call com_err_ (code, our_name, "Filling buffers.");
		return;
	     end;

	     total_time = 0;
	     total_count = 0;
	     total_page_faults = 0;
	     do i = 0 to 3;
		total_time = total_time + time (i) - o_time (i);
		total_count = total_count + count (i) - o_count (i);
		total_page_faults = total_page_faults + page_faults (i)
		     - o_page_faults (i);
	     end;

	     if total_time = 0			/* set ttim, tcmt to avoid zerodivide problems	*/
		then ttim = 1;
	     else ttim = total_time;
	     if total_count = 0
		then tcnt = 1;
	     else tcnt = total_count;
	     
	     call ioa_ ("^/slot    calls  avg time  avg pf  tot time  % time^/");

	     do i = 0 to 3;
						/* Print out one output line for each slot */
		cnt = count (i) - o_count (i);		/* Necessary to correct for zerodivide condition */
		if cnt = 0 then cnt = 1;
		call ioa_ ("^8a^5d^10.3f^8.1f^10.3f^8.1f", slot (i), count (i)-o_count (i),
		     ((time (i)-o_time (i))*1.0e-3)/cnt, float (page_faults (i)-o_page_faults (i))/cnt,
		     (time (i)-o_time (i))*1.0e-6, ((time (i)-o_time (i))*1.0e2)/ ttim);
	     end;

/* Print out totals on all relevant figures */
	     call ioa_ ("        -----  --------   -----   -------");
	     call ioa_ ("Total  ^6d^10.3f^8.1f^10.3f^/", total_count,
		total_time*1.0e-3/tcnt, float (total_page_faults)/tcnt,
		total_time*1.0e-6);
	end;
	

reset:	if rsw then call metering_util_$reset (unique, code);

	return;
     end link_meters;
