/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* format: style3 */
hc_pf_meters:
     proc;

/*  Program to print page faults by hardcore segments

    Written December 1981 by J. Bongiovanni
    Modified July 1984 by Keith Loepere to understand a paged sst.
*/

/*  Automatic  */

dcl	argl		fixed bin (21);
dcl	argp		ptr;
dcl	arg_no		fixed bin;
dcl	code		fixed bin (35);
dcl	cur_time		fixed bin (71);
dcl	hr		fixed bin;
dcl	HR		pic "zzz9";
dcl	init_temp_segp	(4) ptr;
dcl	metering_time	fixed bin (71);
dcl	minute		fixed bin (35);
dcl	MINUTE		pic "99";
dcl	1 my_seg_aste	aligned like seg_aste;
dcl	n_args		fixed bin;
dcl	n_to_print	fixed bin (35);
dcl	pct_pf		float;
dcl	pt_relp		fixed bin (24);
dcl	report_sw		bit (1);
dcl	reset_sw		bit (1);
dcl	sec		fixed bin (35);
dcl	SEC		pic "99";
dcl	seg_entryp	ptr;
dcl	segn		fixed bin;
dcl	segx		fixed bin;
dcl	sort_sw		bit (1);
dcl	sst_size		fixed bin (19);
dcl	sstadd		fixed bin (24);
dcl	sstp		ptr;
dcl	stack_no		pic "999";
dcl	total_pf		fixed bin (35);
dcl	unpaged_page_tables_header
			(8) bit (36) aligned;	/* should be big enough */

/*  Static  */

dcl	init		bit (1) int static init ("0"b);
dcl	last_time		fixed bin (71) int static init (0);
dcl	temp_segp		(2) ptr int static;
dcl	MYNAME		char (12) int static options (constant) init ("hc_pf_meters");

/*  Based  */

dcl	arg		char (argl) based (argp);
dcl	1 seg_info	aligned based (temp_segp (1)),
	  2 n_segs	fixed bin,
	  2 seg		(0 refer (seg_info.n_segs)) aligned like seg_entry;
dcl	1 seg_entry	aligned based (seg_entryp),
	  2 name		char (32) unaligned,
	  2 rel_astep	fixed bin (18),
	  2 prev_pf	fixed bin (35),
	  2 cur_pf	fixed bin (35),
	  2 delta_pf	fixed bin (35);
dcl	1 sort_array	aligned based (temp_segp (2)),
	  2 n		fixed bin (24),
	  2 p		(0 refer (sort_array.n)) ptr unal;

/*  Entry  */

dcl	com_err_		entry options (variable);
dcl	cu_$arg_count	entry (fixed bin, fixed bin (35));
dcl	cu_$arg_ptr	entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl	cv_dec_check_	entry (char (*), fixed bin (35)) returns (fixed bin (35));
dcl	get_temp_segments_	entry (char (*), (*) ptr, fixed bin (35));
dcl	ioa_		entry options (variable);
dcl	release_temp_segments_
			entry (char (*), (*) ptr, fixed bin (35));
dcl	ring0_get_$segptr	entry (char (*), char (*), ptr, fixed bin (35));
dcl	ring_zero_peek_$by_name
			entry (char (*), fixed bin (18), ptr, fixed bin (19), fixed bin (35));
dcl	ring_zero_peek_$get_max_length
			entry (char (*), fixed bin (19), fixed bin (35));
dcl	sort_items_$general entry (ptr, entry);

/*  External  */

dcl	error_table_$badopt fixed bin (35) external;
dcl	sys_info$time_of_bootload
			fixed bin (71) external;

/*  Builtin  */

dcl	addr		builtin;
dcl	baseno		builtin;
dcl	bin		builtin;
dcl	bit		builtin;
dcl	clock		builtin;
dcl	divide		builtin;
dcl	min		builtin;
dcl	mod		builtin;
dcl	ptr		builtin;
dcl	size		builtin;
%page;
	report_sw, reset_sw, sort_sw = "0"b;
	n_to_print = 262143;
	call cu_$arg_count (n_args, code);
	if code ^= 0
	then do;
		call com_err_ (code, MYNAME);
		return;
	     end;

	do arg_no = 1 to n_args;			/* The usual argument parsing */
	     call cu_$arg_ptr (arg_no, argp, argl, code);
	     if arg = "-report"
	     then report_sw = "1"b;
	     else if arg = "-reset" | arg = "-rs"
	     then reset_sw = "1"b;
	     else if arg = "-report_reset" | arg = "-rr"
	     then report_sw, reset_sw = "1"b;
	     else if arg = "-sort"
	     then sort_sw = "1"b;
	     else if arg = "-first" | arg = "-ft"
	     then do;
		     arg_no = arg_no + 1;
		     call cu_$arg_ptr (arg_no, argp, argl, code);
		     if code ^= 0
		     then do;
			     call com_err_ (code, MYNAME, "Number to print");
			     return;
			end;
		     n_to_print = cv_dec_check_ (arg, code);
		     if code ^= 0
		     then do;
BAD_N_TO_PRINT:
			     call com_err_ (0, MYNAME, "Invalid number to print ^a", arg);
			     return;
			end;
		     if n_to_print <= 0
		     then goto BAD_N_TO_PRINT;
		     sort_sw = "1"b;
		end;
	     else do;
		     call com_err_ (error_table_$badopt, MYNAME, arg);
		     return;
		end;
	end;

	if ^report_sw & ^reset_sw
	then report_sw = "1"b;
%page;
	if ^init
	then do;

/* First time through, copy out some (per-bootload) static data.
This includes dseg, so we can find the page table (from the sdw) for
a given segment so we can find its aste, the slt so we can determine if
a given segment is hardcore and interesting, the name_table to find the 
name of a segment, and stack_0_data so we can find out about the 
(pre-allocated) ring 0 stacks floating around.  We also get the sst
starting absolute address from unpaged_page_tables so we know where the
sst is; and, in particular, whether a given page table address (from and
sdw) describes a page table within the sst (=> capable of taking page 
faults.) */

		call get_temp_segments_ (MYNAME, temp_segp, code);
		if code ^= 0
		then do;
			call com_err_ (code, MYNAME, "Getting Temp Segs");
			return;
		     end;
		call get_temp_segments_ (MYNAME, init_temp_segp, code);
		if code ^= 0
		then do;
			call com_err_ (code, MYNAME, "Getting Temp Segs");
			call release_temp_segments_ (MYNAME, temp_segp, code);
			return;
		     end;

		call copy_ring0_seg ("dseg", init_temp_segp (1), sdwp, code);
		if code ^= 0
		then do;
			call com_err_ (code, MYNAME, "dseg");
CLEAN_UP_INIT:
			call release_temp_segments_ (MYNAME, temp_segp, code);
			call release_temp_segments_ (MYNAME, init_temp_segp, code);
			return;
		     end;
		call copy_ring0_seg ("slt", init_temp_segp (2), sltp, code);
		if code ^= 0
		then do;
			call com_err_ (code, MYNAME, "slt");
			goto CLEAN_UP_INIT;
		     end;
		call copy_ring0_seg ("name_table", init_temp_segp (3), names_ptr, code);
		if code ^= 0
		then do;
			call com_err_ (code, MYNAME, "name_table");
			goto CLEAN_UP_INIT;
		     end;
		call copy_ring0_seg ("stack_0_data", init_temp_segp (4), sdtp, code);
		if code ^= 0
		then do;
			call com_err_ (code, MYNAME, "stack_0_data");
			goto CLEAN_UP_INIT;
		     end;
		call ring0_get_$segptr ("", "sst", sstp, code);
		if code ^= 0
		then do;
SST_ERR:
			call com_err_ (code, MYNAME, "sst");
			goto CLEAN_UP_INIT;
		     end;
		call ring_zero_peek_$get_max_length ("sst", sst_size, code);
		if code ^= 0
		then goto SST_ERR;
		upt_ptr = addr (unpaged_page_tables_header);
		call ring_zero_peek_$by_name ("unpaged_page_tables", 0, upt_ptr, size (unpaged_page_tables_header),
		     code);
		if code ^= 0
		then go to SST_ERR;
		sstadd = upt.sst_absloc;

/* Determine what hardcore segments are interesting (which can take page 
faults). */

		segx = 0;
		do segn = 0 to slt.last_sup_seg;
		     sltep = addr (slt.seg (segn));
		     if ^slte.abs_seg & ^slte.wired & ^slte.per_process & slte.paged & ^slte.init_seg & ^slte.temp_seg
		     then do;			/* normal, most likely pagable hardcore segment */
			     pt_relp = bin (sdwa (segn).add, 24) - sstadd;
			     if sdwa (segn).add ^= "0"b & ^sdwa (segn).unpaged & sdwa (segn).df & pt_relp > 0
				& pt_relp < sst_size
			     then do;		/* sdw is valid and page table address for segment is within the bounds of sst */
				     segx = segx + 1;
						/* remember segment id */
				     seg_info.seg (segx).rel_astep = pt_relp - size (aste);
				     seg_info.seg (segx).prev_pf, seg_info.seg (segx).delta_pf = 0;
				     seg_info.seg (segx).name =
					ptr (names_ptr, slte.names_ptr) -> segnam.names (1).name;
				end;
			end;
		end;

		do segn = 1 to sdt.num_stacks;	/* remember set of ring 0 stacks (automatically pagable); 
						list doesn't change across bootloads */
		     stack_no = segn;
		     sdtep = addr (sdt.stacks (segn));
		     segx = segx + 1;
		     seg_info.seg (segx).rel_astep = bin (sdte.astep);
		     seg_info.seg (segx).prev_pf, seg_info.seg (segx).delta_pf = 0;
		     seg_info.seg (segx).name = "stack_0." || stack_no;
		end;

		call release_temp_segments_ (MYNAME, init_temp_segp, code);
		last_time = sys_info$time_of_bootload;
		seg_info.n_segs = segx;
		init = "1"b;
	     end;
%page;
	cur_time = clock ();
	metering_time = cur_time - last_time;

	sec = divide (metering_time, 1000000, 35);
	minute = divide (sec, 60, 35);
	hr = divide (minute, 60, 17);
	sec = mod (sec, 60);
	minute = mod (minute, 60);
	HR = hr;
	MINUTE = minute;
	SEC = sec;
	call ioa_ ("^/Total metering time^-^a^/", HR || ":" || MINUTE || ":" || SEC);


	total_pf = 0;
	sort_array.n = seg_info.n_segs;
	do segx = 1 to seg_info.n_segs;
	     call ring_zero_peek_$by_name ("sst", seg_info.seg (segx).rel_astep, addr (my_seg_aste), size (my_seg_aste),
		code);				/* get aste for hardcore segment */
	     if code ^= 0
	     then do;
		     call com_err_ (code, MYNAME, "sst|^o", seg_info.seg (segx).rel_astep);
		     return;
		end;
	     seg_info.seg (segx).cur_pf = my_seg_aste.usage;
						/* extract page fault data from aste */
	     sort_array.p (segx) = addr (seg_info.seg (segx));
	     seg_info.seg (segx).delta_pf = my_seg_aste.usage - seg_info.seg (segx).prev_pf;
	     total_pf = total_pf + seg_info.seg (segx).delta_pf;
	end;

%page;
	if report_sw
	then do;					/* report sorting and generation */

		call sort_items_$general (temp_segp (2), order_entries);

		call ioa_ ("Segment^26xPage Faults  % Total^/");

		do segx = 1 to min (seg_info.n_segs, n_to_print);
		     seg_entryp = sort_array (segx).p;
		     if total_pf = 0
		     then pct_pf = 0.;
		     else pct_pf = seg_entry.delta_pf * 100.0 / total_pf;
		     if seg_entry.delta_pf ^= 0
		     then call ioa_ ("^32a ^8d     ^6.2f", seg_entry.name, seg_entry.delta_pf, pct_pf);
		end;

		call ioa_ ("^/Total Hardcore Page Faults^7x^8d^/", total_pf);

	     end;
%page;
	if reset_sw
	then do;

		last_time = cur_time;

		do segx = 1 to seg_info.n_segs;
		     seg_info.seg (segx).prev_pf = seg_info.seg (segx).cur_pf;
		end;

	     end;

	return;
%page;
copy_ring0_seg:
     proc (segname, seg_ptr, seg_ptr_1, code);

dcl	segname		char (*);
dcl	seg_ptr		ptr;
dcl	seg_ptr_1		ptr;
dcl	code		fixed bin (35);

dcl	seg_size		fixed bin (19);


	call ring_zero_peek_$get_max_length (segname, seg_size, code);
	if code ^= 0
	then return;

	call ring_zero_peek_$by_name (segname, 0, seg_ptr, seg_size, code);
	seg_ptr_1 = seg_ptr;

     end copy_ring0_seg;
%page;
order_entries:
     proc (p1, p2) returns (fixed bin (1));

dcl	p1		ptr unal;
dcl	p2		ptr unal;
dcl	1 seg1		aligned like seg_entry based (p1);
dcl	1 seg2		aligned like seg_entry based (p2);

	if sort_sw
	then do;
		if seg1.delta_pf < seg2.delta_pf
		then return (1);
		else if seg1.delta_pf > seg2.delta_pf
		then return (-1);
		else return (0);
	     end;
	else do;
		if seg1.name < seg2.name
		then return (-1);
		else if seg1.name > seg2.name
		then return (1);
		else return (0);
	     end;

     end order_entries;


%page;
%include aste;
%page;
%include sdw;
%page;
%include slt;
%page;
%include slte;
%page;
%include stack_0_data;
%page;
%include unpaged_page_tables;
     end hc_pf_meters;
