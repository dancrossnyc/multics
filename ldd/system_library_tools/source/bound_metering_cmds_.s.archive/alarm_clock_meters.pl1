/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* This procedure prints out information about the functioning
   of the simulated alarm clock in the traffic controller.

   Originally coded by R. J. Feiertag on March 1972.
   Updated by Alan Bier on March 1974.
   Last modified, 04/01/80 W. Olin Sibert, to fix zerodivide problems.
   Modified November 1984 by M. Pandolf to include hc_lock
   */

alarm_clock_meters: acm: proc;

dcl  code fixed bin,				/* error code */
     time float bin,				/* real time metered */
     i fixed bin,					/* index */
     n_simulations fixed bin, 			/* number of simulations in metering interval */
     argptr ptr,					/* points to argument */
     arglen fixed bin,				/* number of chars in argument */
     arg char (arglen) based (argptr),			/* argument */
    (repsw, rsw) bit (1) init ("0"b);			/* action indicators */

dcl  init bit (1) internal static init ("0"b),		/* 1 if  has been initialized */
     unique_index fixed bin internal static,		/* unique number for meter_util_ */
    (sstp1, sstp2, tcmp1, tcmp2) ptr internal static,	/* pointers to ring 0 info */
     name char (18) internal static options (constant) init ("alarm_clock_meters");

dcl  float builtin;

dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin),
     cu_$arg_count entry returns (fixed bin),
     meter_util_$get_buffers entry (fixed bin, ptr, ptr, ptr, ptr, fixed bin),
     meter_util_$fill_buffers entry (fixed bin),
     meter_util_$time entry (fixed bin, float bin),
     meter_util_$reset entry (fixed bin),
     com_err_ entry options (variable),
     ioa_ entry options (variable);

%include tcm;
%include hc_lock;
/*  */
	do i = 1 to cu_$arg_count ();
	     call cu_$arg_ptr (1, argptr, arglen, code);	/* obtain optional single argument */
	     if arglen = 0 | code ^= 0 then go to print_out;
	     if arg = "-reset" | arg = "-rs" then rsw = "1"b;
	     else if arg = "-report_reset" | arg = "-rr" then rsw, repsw = "1"b;
	     else call com_err_ (0, name, "unrecognized control argument ""^a"" ignored.", arg);
	end;

print_out: if ^rsw then repsw = "1"b;			/* report is default value */
	if ^init then do;				/* must initialize */
	     call meter_util_$get_buffers (unique_index, sstp1, sstp2, tcmp1, tcmp2, code);
						/* initialize ring 0 info buffers */
	     if code ^= 0 then do;
		call com_err_ (code, name, "tc_data");
		return;
	     end;
	     init = "1"b;				/* initialization complete */
	end;
	call meter_util_$fill_buffers (unique_index);	/* get ring 0 data */
	call meter_util_$time (unique_index, time);	/* print out metering time */
	if repsw then do;
	     n_simulations = tcmp2 -> tcm.clock_simulations - tcmp1 -> tcm.clock_simulations;
	     call ioa_ ("No. alarm clock sims.^7d", n_simulations);
	     if n_simulations > 0 then call ioa_ ("Simulation lag^10x^8.3f msecs.",
		float (tcmp2 -> tcm.total_clock_lag - tcmp1 -> tcm.total_clock_lag, 27) /
		(1000e0 * float (n_simulations, 27)));
	     call ioa_ ("Max. lag^16x^8.3f msecs.^/",
		float (tcmp2 -> tcm.max_clock_lag, 27) / 1000e0);
	end;

	if rsw then call meter_util_$reset (unique_index); /* copy current ring 0 info */
     end;
