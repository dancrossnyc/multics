/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* format: style2,idind30,indcomtxt */

/**** * METER_GATE - Print Out Metering Info from Gate Segment.

      Date Last Modified and Reason

      841113 MAP to include hc_lock.
      831107 BIM for ring_alarms.
      06/24/81 by J. Bongiovanni to eliminate restriction on number of gates
      09/15/76 by Noel I. Morris to work with combined defs.
      07/08/75 by S. Webber to work with combined linkage and to add reset capability
      06/14/74 by R. A. Roach to eliminate calls to phcs_.
      05/07/74 by R. B. Snyder to change arguments to meter_gate_.
      11/27/73 by R. B. Snyder to add entry meter_gate_
      10/27/73 Steve Webber to work with call limiter type gates
      Originally written 1/27/70 by N. I. Morris
*/

meter_gate:
mg:
     procedure options (variable);

/* Static */

	dcl     tcdp0		        ptr static init (null ());
						/* pointer to tc_data in ring 0 */
	dcl     tempp		        (2) ptr int static init ((2) null ());
						/* pointer to temp segments */
	dcl     itimep0		        ptr static; /* pointer to tcm.initialize_time */
	dcl     ptimep0		        ptr static; /* pointer to tcm.processor_time */
	dcl     ltimep0		        ptr static; /* pointer to tcm.idle */
	dcl     who_it_is		        char (10) int static options (constant) init ("meter_gate");

/* Automatic */

	dcl     argno		        fixed bin;
	dcl     gi		        fixed bin;	/* index to gate_info for gate of interest */
	dcl     avg		        float bin (27);
	dcl     reset_sw		        bit (1) aligned;
	dcl     no_report		        bit (1) aligned,
	        namep		        ptr,	/* pointer to entry name */
	        namel		        fixed bin,	/* length of entry name */
	        code		        fixed bin (35),
						/* error code */
	        argp		        ptr,	/* pointer to argument */
	        arglen		        fixed bin,	/* length of argument */
	        segname		        char (32),	/* name of segment */
	        entry		        char (32),	/* name of desired entry */
	        sort		        fixed bin,	/* sorting function code */
	        argument		        char (arglen) based (argp),
						/* based argument */
	        (i, j)		        fixed bin,	/* indices */
	        nentries		        fixed bin,	/* number of gate entries */
	        calls		        fixed bin,	/* number of calls to entry */
	        totcalls		        fixed bin,	/* total calls through gate */
	        itime		        fixed bin (71),
						/* time Multics came up */
	        timnow		        fixed bin (71),
						/* time now */
	        citime		        char (24),	/* converted system up time */
	        ctimnow		        char (24),	/* converted current time */
	        tottim		        fixed bin (71),
						/* total time spent inside gate */
	        total_ring_alarms	        fixed bin (35),
						/* total polled ring alarms */
	        hr		        fixed bin,	/* hours, for conversion */
	        mn		        fixed bin,	/* minutes, for conversion */
	        sc		        fixed bin,	/* seconds, for conversion */
	        charged_time	        fixed bin (71),
						/* total charged time */
	        idle_time		        fixed bin (71),
						/* total idle time */
	        ctime		        fixed bin (71),
	        ptime		        float bin,	/* time percentage */
	        ppage		        float bin;	/* page waits per call */

	dcl     1 table		        (512) aligned,
						/* table pointing to info */
		2 gate		        like gate_table aligned,
						/* gate entry info */
		2 avg		        float bin (27);
						/* average time spent in entry */

	dcl     1 temp_table	        like table aligned;
						/* temporary for interchange sort */

/* Entries */

	dcl     com_err_		        entry options (variable);
	dcl     cu_$arg_ptr		        ext entry (fixed bin, ptr, fixed bin, fixed bin (35));
	dcl     ring_zero_peek_	        ext entry (ptr, ptr, fixed bin (18), fixed bin (35));
	dcl     ring0_get_$segptr	        ext entry (char (*), char (*), ptr, fixed bin (35));
	dcl     ioa_		        ext entry options (variable);
	dcl     clock_		        ext entry returns (fixed bin (71));
	dcl     date_time_		        ext entry (fixed bin (71), char (*));
	dcl     cu_$arg_count	        entry returns (fixed bin);
	dcl     get_gate_data_	        entry (char (*), 1 dim (*) like gate_table aligned, fixed bin, ptr,
				        bit (1) aligned, fixed bin (35));
	dcl     get_temp_segments_	        entry (char (*), dim (*) ptr, fixed bin (35));


	dcl     1 gate_info_struct	        aligned based (tempp (2)),
						/* structure of gates we're metering		*/
		2 max_gates	        fixed bin,	/* number of gates				*/
		2 gate_info	        (0 refer (max_gates)),
		  3 name		        char (32),	/* name of gate */
		  3 old_time	        fixed bin (71),
						/* charged time at time of last reset */
		  3 old_charged	        fixed bin (71);
						/* charged time at time of last reset */

	dcl     entryname		        char (namel) based (namep);
						/* gate entry name */

/* Builtin */

	dcl     (addr, divide, float, mod, null)
				        builtin;


/**/

%include gate_data;

/**/

%include tcm;


%include hc_lock;


	sort = 0;					/* default is not to sort */

/* Pick up all arguments. */

	call cu_$arg_ptr (1, argp, arglen, code);	/* Grab first argument. */
	if code ^= 0
	then do;
		call com_err_ (code, who_it_is, "Gate name");
		return;
	     end;


	segname = argument;				/* Get name of gate segment. */
	no_report = "0"b;
	reset_sw = "0"b;

	do argno = 2 to cu_$arg_count ();		/* pick up control args */
	     call cu_$arg_ptr (argno, argp, arglen, code);/* Grab second argument. */
	     if argument = "-call" | argument = "-cl"
	     then sort = 1;				/* sort by number of calls */
	     else if argument = "-time" | argument = "-tm"
	     then sort = 2;				/* sort by time used */
	     else if argument = "-average" | argument = "-av"
	     then sort = 3;				/* sort by average number of calls */
	     else if argument = "-page" | argument = "-pg"
	     then sort = 4;				/* sort by number of page faults */
	     else if argument = "-reset" | argument = "-rs"
	     then no_report, reset_sw = "1"b;		/* reset requested */
	     else if argument = "-report_reset" | argument = "-rr"
	     then reset_sw = "1"b;
	     else do;
		     entry = argument;
		     sort = 5;			/* search for this entry */
		end;
	end;


/* Check to see if we've set up our static variables */

	if tcdp0 = null
	then do;					/* not yet... */
		call ring0_get_$segptr ("", "tc_data", tcdp0, code);
		if code ^= 0
		then do;
			call com_err_ (code, who_it_is, "Cannot find tc_data");
			return;
		     end;
		itimep0 = addr (tcdp0 -> tcm.initialize_time);
		ptimep0 = addr (tcdp0 -> tcm.processor_time);
		ltimep0 = addr (tcdp0 -> tcm.idle);
		call get_temp_segments_ (who_it_is, tempp, code);
		if code ^= 0
		then do;
			call com_err_ (code, who_it_is, "Getting temp segs");
			return;
		     end;
	     end;

/* Fill in static data for gate. */

	do gi = 1 to max_gates;
	     if gate_info (gi).name = segname
	     then go to got_gate;
	end;

	max_gates = gi;
	gate_info (gi).name = segname;
	gate_info (gi).old_time = 0;
	gate_info (gi).old_charged = 0;
got_gate:						/* Now get data for gate. */
	call get_gate_data_ (segname, table.gate, nentries, tempp (1), reset_sw, code);
	if code ^= 0
	then do;
		call com_err_ (code, who_it_is, "Getting gate data");
		return;
	     end;


/*  Now get current clock readings */

	call ring_zero_peek_ (itimep0, addr (itime), 2, code);
	call ring_zero_peek_ (ptimep0, addr (charged_time), 2, code);
	call ring_zero_peek_ (ltimep0, addr (idle_time), 2, code);

	charged_time = charged_time - idle_time;
	if gate_info (gi).old_time > 0
	then itime = gate_info (gi).old_time;
	ctime = charged_time - gate_info (gi).old_charged;

	timnow = clock_ ();				/* Get current time */

	if ^no_report
	then do;					/* only do the work if we have to */
		i = 0;				/* Count iterations. */
		tottim = 0;			/* Initialize total time count. */
		totcalls = 0;			/* Initialize count of total calls. */
		total_ring_alarms = 0;		/* Initialize RA count */


/* Major information handling and sorting loop. */

		do i = 1 to nentries;
		     gate_datap = table (i).datap;	/* Copy the pointer. */
		     namep = table (i).entryp;
		     namel = table (i).entryl;

		     calls = gate_entry_data.calls;	/* Extract count of calls to entry. */
		     if calls ^= 0
		     then /* Compute average and save. */
			avg = float (gate_entry_data.vcpu_time, 27) / (1.e3 * float (gate_entry_data.calls, 27));
		     else avg = 0.e0;
		     table (i).avg = avg;

		     if sort = 5
		     then do;			/* if only want selected entry */
			     if entryname = entry
			     then do;		/* in single entry mode - match? */
				     j = i;	/* Set loop variable */
				     call print;	/* Go print the poop */
				     go to finish;
				end;
			     else go to next;	/* Skip the sorting crap */
			end;

		     totcalls = totcalls + calls;	/* Compute total number of calls. */
		     tottim = tottim + gate_entry_data.vcpu_time;
						/* Compute total time spent inside gate. */
		     total_ring_alarms = total_ring_alarms + gate_entry_data.ring_alarms;

/* Perform sorting. */

		     if sort ^= 0
		     then do j = i - 1 to 1 by -1;	/* If sorting specified ... */

			     if sort = 1
			     then /* If sorting on number of calls ... */
				if table (j).datap -> gate_entry_data.calls < gate_entry_data.calls
				then go to next;
				else ;

			     else if sort = 2
			     then /* If sorting on total time ... */
				if table (j).datap -> gate_entry_data.vcpu_time < gate_entry_data.vcpu_time
				then go to next;
				else ;

			     else if sort = 3
			     then /* If sorting on average time ... */
				if table (j).avg < avg
				then go to next;
				else ;

			     else if sort = 4
			     then /* If sorting on page waits ... */
				if table (j).datap -> gate_entry_data.page_waits < gate_entry_data.page_waits
				then go to next;
				else ;

			     temp_table = table (j + 1);
			     table (j + 1) = table (j);
			     table (j) = temp_table;

			end;

next:
		end;


/* Print out the accumulated and sorted information. */

		if sort = 5
		then do;				/* If searching for specific entry ... */
			call ioa_ ("Entry ^a not found or not metered in gate ^a.", entry, segname);
			return;
		     end;

		call date_time_ (itime, citime);
		call date_time_ (timnow, ctimnow);


		call comp_time (ctime);		/* Break down charged time. */

		call ioa_ ("^/Metering since ^a.^/Total non-idle time at ^a = ^d hr. ^d min. ^d sec.", citime,
		     ctimnow, hr, mn, sc);

		if totcalls > 0
		then do;				/* we have something to meter */

			call ioa_ ("^/Gate meters for ^a: total calls = ^d, total ring alarms polled = ^d.", segname, totcalls, total_ring_alarms);
						/* Print header. */

			if ctime > 0
			then ptime = (float (tottim, 63) / float (ctime, 63)) * 1.e2;
						/* Compute percentage. */
			else ptime = 0e0;
			call comp_time (tottim);	/* Break down total time in gate. */

			call ioa_ ("^d hr. ^d min. ^d sec. or ^6.3f% spent in calls through gate.", hr, mn, sc,
			     ptime);

			call ioa_ ("^/            ring                    page");
			call ioa_ ("  calls   alarms   pcnt     avg   faults  entry name^/");

			do j = nentries by -1 to 1;	/* Loop through information. */
			     call print;
			end;
		     end;
		else call ioa_ ("No calls through this gate.");

		call ioa_ ("^/");
	     end;

finish:
	if reset_sw
	then do;
		gate_info (gi).old_time = timnow;
		gate_info (gi).old_charged = charged_time;
	     end;


	return;					/* Bye-bye. */


/* Internal Procedure to Print Output Line. */

print:
     proc;

	gate_datap = table (j).datap;			/* Extract pointers. */
	namep = table (j).entryp;			/* .. */
	namel = table (j).entryl;			/* .. */
	avg = table (j).avg;			/* .. */
	if gate_entry_data.calls > 0
	then do;
		if ctime <= 0
		then ptime = 0e0;			/* ctime may be zero .. */
		else ptime = (float (gate_entry_data.vcpu_time, 63) / float (ctime, 63)) * 1.e2;
						/* Compute percentage. */
		ppage = float (gate_entry_data.page_waits, 27) / float (gate_entry_data.calls, 27);
						/* Compute page waits per call. */
		call ioa_ ("^7d  ^7d  ^5.2f ^8.2f  ^6.2f  ^a", gate_entry_data.calls, gate_entry_data.ring_alarms,
		     ptime, avg, ppage, entryname);
	     end;


     end;



/* Internal Procedure to compute hours, minutes, and seconds. */

comp_time:
     proc (a);

	dcl     a			        fixed bin (71);
						/* time in miscrseconds */


	sc = divide (a, 1000000, 17, 0);		/* Compute seconds of time. */
	mn = divide (sc, 60, 17, 0);			/* Compute minutes of time. */
	hr = divide (mn, 60, 17, 0);			/* Compute hours of time. */
	sc = mod (sc, 60);				/* Round the seconds. */
	mn = mod (mn, 60);				/* And the minutes. */

	return;


     end;




     end;
