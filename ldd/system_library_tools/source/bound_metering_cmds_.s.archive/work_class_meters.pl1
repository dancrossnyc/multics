/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: style4 */
wcm: work_class_meters: proc;

/* WORK_CLASS_METERS -- print metering information about work class scheduler.
   Probably written by Bob Mullen, some years back.
   Modified: 04/01/80 W. Olin Sibert to fix zerodivide fault problems.
   05/13/81 Matthew Pierret to print pin_weight.
   Cleanup up substantially and modified for governed work classes
   06/28/81 by J. Bongiovanni
   12/07/81 E. N. Kittlitz.  user_table_entry conversion.
   4/30/82 by J. Bongiovanni to print interactive q attribute
   11/13/84 by M. Pandolf to include hc_lock.
*/


/****^  HISTORY COMMENTS:
  1) change(87-04-26,GDixon), approve(87-07-13,MCR7741),
     audit(87-07-27,Hartogs), install(87-08-04,MR12.1-1055):
     Upgraded for change to answer_table.incl.pl1.
                                                   END HISTORY COMMENTS */


/* Automatic */

dcl  arg_no fixed bin;				/* current argument number			*/
dcl  argl fixed bin (21);				/* current argument length			*/
dcl  argp ptr;					/* current argument pointer			*/
dcl  code fixed bin (35);				/* standard error code			*/
dcl  cpu (0:16) float bin;				/* array of delta cpu by WC			*/
dcl  cur_ptrs (1) ptr;				/* pointer to current metering data		*/
dcl  curshift fixed bin;				/* current shift				*/
dcl  eligs (0:16) float bin;				/* array of eligibility counts		*/
dcl  formatted_meter_time char (10);			/* formatted metering interval		*/
dcl  g1 float bin;					/* percent guaranteed			*/
dcl  hr fixed bin;					/* hour					*/
dcl  HR pic "zzz9";					/* hour					*/
dcl  i fixed bin;					/* work class table index			*/
dcl  meter_interval fixed bin (71);			/* microseconds in metering interval		*/
dcl  meter_time float bin;				/* microseconds in metering interval		*/
dcl  min fixed bin;					/* minute					*/
dcl  MIN pic "99";					/* minute					*/
dcl  n_args fixed bin;				/* number of arguments			*/
dcl  pctcpu float bin;				/* percent of total cpu for this WC		*/
dcl  pctmx float bin;				/* max percent for a governed WC		*/
dcl  prev_ptrs (1) ptr;				/* pointer to previous metering data		*/
dcl  Q1 float bin;					/* quantun 1				*/
dcl  Q2 float bin;					/* quantum 2				*/
dcl  R1 float bin;					/* response 1				*/
dcl  R2 float bin;					/* response 2				*/
dcl  reporting bit (1);				/* ON => report argument given		*/
dcl  resetting bit (1);				/* ON => reset argument given			*/
dcl  sec fixed bin;					/* second					*/
dcl  SEC pic "99";					/* second					*/
dcl  sole_abs_wc fixed bin;				/* work class index of only absentee WC (if such) */
dcl  some_lcg (0:16) char (32) varying;			/* name of some load control group in wc */
dcl  time_now fixed bin (71);				/* current time				*/
dcl  total_cpu float bin;				/* total cpu time on system			*/
dcl  u1 float bin;					/* cpu time per eligibility for WC		*/


/* Static */

dcl  mgtp ptr static init (null ());			/* pointer to MGT				*/
dcl  MYNAME char (17) int static options (constant)
	init ("work_class_meters");
dcl  static_ansp ptr static init (null ());		/* pointer to answer_table			*/
dcl  time_reset fixed bin (71) static init (0);		/* time of last reset (implicit reset if WC redefined */
dcl  unique fixed bin static init (0);			/* unique index for metering_util_		*/

/* Based */

dcl  arg char (argl) based (argp);
dcl  1 tcm_cur aligned based (cur_ptrs (1)) like tcm;
dcl  1 tcm_prev aligned based (prev_ptrs (1)) like tcm;

/* %include anstbl       - see end of program							*/
/* %include mgt          - see end of program							*/
/* %include tcm          - see end of program							*/

/* Entry */

dcl  com_err_ entry options (variable);
dcl  cu_$arg_count entry (fixed bin, fixed bin (35));
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl  ioa_ entry options (variable);
dcl  hcs_$initiate entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr, fixed bin (35));
dcl  metering_util_$define_regions entry options (variable);
dcl  metering_util_$fill_buffers entry (fixed bin, fixed bin (71), char (*), (*) ptr, (*) ptr, fixed bin (35));
dcl  metering_util_$reset entry (fixed bin, fixed bin (35));

/* External */

dcl  error_table_$badopt fixed bin (35) external;

/* Builtin */

dcl  addr builtin;
dcl  clock builtin;
dcl  divide builtin;
dcl  max builtin;
dcl  mod builtin;
dcl  null builtin;
dcl  reverse builtin;
dcl  size builtin;
dcl  substr builtin;
dcl  unspec builtin;
dcl  verify builtin;

%page;
	reporting = "0"b;
	resetting = "0"b;
	call cu_$arg_count (n_args, code);
	if code ^= 0 then do;
	     call com_err_ (code, MYNAME);
	     return;
	end;

	do arg_no = 1 to n_args;
	     call cu_$arg_ptr (arg_no, argp, argl, code);
	     if arg = "-report_reset" | arg = "-rr" then do;
		reporting = "1"b;
		resetting = "1"b;
	     end;
	     else if arg = "-reset" | arg = "-rs" then
		resetting = "1"b;
	     else do;
		call com_err_ (error_table_$badopt, MYNAME, arg);
		return;
	     end;
	end;

	if ^reporting & ^resetting then reporting = "1"b;

	if unique = 0 then do;			/* initialize				*/
	     call metering_util_$define_regions (unique, code, "tc_data", 0, size (tcm));
	     if code ^= 0 then do;
		call com_err_ (code, MYNAME, "Initializing");
		return;
	     end;
	end;

	call metering_util_$fill_buffers (unique, meter_interval, formatted_meter_time,
	     cur_ptrs, prev_ptrs, code);
	if code ^= 0 then do;
	     call com_err_ (code, MYNAME, "Filling buffers.");
	     return;
	end;


	total_cpu = tcm_cur.processor_time
	     - max (tcm_prev.processor_time, tcm_cur.processor_time_at_define_wc);

	if time_reset < tcm_cur.define_wc_time then do;
						/* save values are worthless */
						/* hardcore has reinitialized its meters */
	     unspec (tcm_prev) = ""b;			/* so reset our saved values */
	     time_reset = tcm_cur.define_wc_time;
	end;

	time_now = clock ();
	meter_time = time_now - time_reset;
	sec = meter_time * 1e-6;
	min = divide (sec, 60, 17, 0);
	hr = divide (min, 60, 17, 0);
	sec = mod (sec, 60);			/* get sec in last min */
	min = mod (min, 60);			/* get min in last hr */
	HR = hr;
	MIN = min;
	SEC = sec;
	formatted_meter_time = HR || ":" || MIN || ":" || SEC;
	call ioa_ ("^/Total metering time^-^a^/", formatted_meter_time);


	if reporting then do;

/* try to get some names assoc with workclasses */
	     call fill_lcg;
	     do i = 0 to 16;
		if tcm_cur.wcte (i).defined then do;
		     cpu (i) = tcm_cur.wcte (i).cpu_sum - tcm_prev.wcte (i).cpu_sum;
		     eligs (i) = tcm_cur.wcte (i).eligibilities - tcm_prev.wcte (i).eligibilities;
		end;
	     end;
	     call ioa_ ("WC %GUAR %MAX %TCP V/ELIG PW  IRESP IQUANT   RESP QUANT P M R I LCG^/");
	     do i = 0 to 16;
		if tcm_cur.wcte (i).defined then do;

		     if tcm_cur.credits_per_scatter = 0 then do;
			g1 = 0e0;
			pctmx = 0e0;
		     end;
		     else do;
			g1 = 1e2 * tcm_cur.wcte (i).minf / tcm_cur.credits_per_scatter;
			pctmx = 1e2 * tcm_cur.wcte (i).maxf / tcm_cur.credits_per_scatter;
		     end;


		     if eligs (i) = 0e0 then u1 = 0e0;
		     else u1 = 1e-6 * cpu (i) / eligs (i);

		     if total_cpu > 0e0 then
			pctcpu = 1e2 * cpu (i) / total_cpu;
		     R1 = 1e-6 * tcm_cur.wcte (i).resp1;
		     R2 = 1e-6 * tcm_cur.wcte (i).resp2;
		     Q1 = 1e-6 * tcm_cur.wcte (i).quantum1;
		     Q2 = 1e-6 * tcm_cur.wcte (i).quantum2;


		     if (g1 > 0e0) | (pctcpu > 0e0) then
			if tcm_cur.deadline_mode ^= 0 | tcm_cur.wcte (i).realtime ^= 0 then
			     call ioa_ ("^2d ^5x^5x^5.0f ^6.2f ^2d^7.2f^6.2f^8.2f^6.2f ^[P^; ^] ^d ^[R^; ^] ^[I^; ^] ^a",
				i, pctcpu, u1, tcm_cur.wcte (i).pin_weight,
				R1, Q1, R2, Q2, (tcm_cur.wcte (i).purging = 1),
				tcm_cur.wcte (i).maxel, (tcm_cur.wcte (i).realtime ^= 0), (tcm_cur.wcte (i).flags.interactive_q), some_lcg (i));

			else
			     call ioa_ ("^2d ^5.0f^[^5.0f^;^5x^1s^]^5.0f ^6.2f ^2d^27x ^[P^; ^] ^d ^[R^; ^] ^[I^; ^] ^a",
				i, g1, (tcm_cur.wcte (i).governed), pctmx, pctcpu, u1, tcm_cur.wcte (i).pin_weight,
				(tcm_cur.wcte (i).purging = 1), tcm_cur.wcte (i).maxel,
				(tcm_cur.wcte (i).realtime ^= 0), (tcm_cur.wcte (i).flags.interactive_q), some_lcg (i));
		end;
	     end;

	     call ioa_ ("^/^[TCPU percents (%GUAR)^;IREST, IQUANT, RESP, QUANT^] control non-realtime work_classes.^/",
		(tcm_cur.deadline_mode = 0));



	end;					/* END REPORTING */




	if resetting then do;
	     call metering_util_$reset (unique, code);
	     if code ^= 0 then do;
		call com_err_ (code, MYNAME, "Resetting");
		return;
	     end;
	     time_reset = time_now;
	end;

	return;
%page;
fill_lcg: proc;
dcl  j fixed bin;

	some_lcg (*) = "";
	some_lcg (0) = "Init";

	if mgtp = null () then do;
	     call hcs_$initiate (">system_control_1", "mgt", "", 0b, 1b, mgtp, code);
	     if mgtp = null () then do;
		call ioa_ ("Unable to access mgt.");
		return;
	     end;
	end;
	if static_ansp = null () then do;
	     call hcs_$initiate (">system_control_1", "answer_table", "", 0b, 1b, static_ansp, code);
	     if static_ansp = null () then do;
		call ioa_ ("Unable to access answer_table");
		return;
	     end;
	end;
	ansp = static_ansp;

	curshift = anstbl.shift;
						/* see if can suppress news about abs */
	sole_abs_wc = -1;
	do j = 17 to mgt.current_size;
	     mgtep = addr (mgt.entry (j));
	     if sole_abs_wc = -1 then sole_abs_wc = group.abs_wc (curshift);
	     else if sole_abs_wc ^= group.abs_wc (curshift) then sole_abs_wc = -2;
	end;
	do j = 17 to mgt.current_size;
	     mgtep = addr (mgt.entry (j));
	     some_lcg (group.int_wc (curshift)) = some_lcg (group.int_wc (curshift))
		|| substr (group.group_id, 1, 9 - verify (reverse (group.group_id), " "))
		|| " ";
	     if group.abs_wc (curshift) ^= group.int_wc (curshift) then
		if sole_abs_wc < 0 then
		     some_lcg (group.abs_wc (curshift)) = some_lcg (group.abs_wc (curshift))
			|| "("
			|| substr (group.group_id, 1, 9 - verify (reverse (group.group_id), " "))
			|| ") ";
	end;
	if sole_abs_wc > 0 then some_lcg (sole_abs_wc)
		= some_lcg (sole_abs_wc) || " (All absentee)";


     end fill_lcg;

%page; %include answer_table;
%page; %include hc_lock;
%page; %include mgt;
%page; %include tcm;
%page; %include user_table_header;

     end wcm;
