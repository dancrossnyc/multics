/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */
/*  format: style3 */

fim_meters:
     proc;


/* Program to print per-system count of faults by fault type,
   which is accumulated in wired_hardcore_data by ring-0 fault
   processing (fim, wired_fim, page_fault).

   Written January 1981 by J. Bongiovanni
   Modified July 1981 by J. Bongiovanni for -reset fix
   Modified October 1983 by R. Coppola for per-cpu fault counters
*/

/* Automatic */

dcl	CPU		fixed bin;
dcl	DISPLAY_SIZE	fixed bin;
dcl	INX		fixed bin;
dcl	argl		fixed bin (21);
dcl	argc		fixed bin (21);		/* character index into current arg */
dcl	argp		ptr;
dcl	ccp		(1) ptr;
dcl	code		fixed bin (35);
dcl	cpu		bit (1);
dcl	cpu_index		fixed bin;
dcl	cpu_string	bit (8) aligned;
dcl	1 cur_per_cpu_ctrs	(MAX_CPUS) aligned,
	  2 fault_counters	(NO_TOTAL_FAULTS) fixed bin (35);
dcl	1 prev_per_cpu_ctrs (MAX_CPUS) aligned,
	  2 fault_counters	(NO_TOTAL_FAULTS) fixed bin (35);
dcl	cur_ptr		(MAX_CPUS) ptr;
dcl	default_to_all	bit (1);
dcl	display_cpu	(9) fixed bin;
dcl	got_cpu		(MAX_CPUS + 1) bit (1);
dcl	formatted_time	(MAX_CPUS) char (10);
dcl	found_name	bit (1);
dcl	i		fixed bin;
dcl	j		fixed bin;
dcl	k		fixed bin;
dcl	l		fixed bin;
dcl	1 line		unal,
	  2 title		char (26),
	  2 field		(8) char (13);
dcl	line_length	fixed bin (17);
dcl	long		bit (1);
dcl	meter_time	(MAX_CPUS) fixed bin (71);
dcl	meters_printed	fixed bin;
dcl	nargs		fixed bin;
dcl	ncpus_selected	fixed bin;
dcl	ncpus_to_do	fixed bin;
dcl	order		(32) fixed bin;
dcl	pcp		(1) ptr;
dcl	pic13		picture "zzzzzzzzzzzz9";
dcl	prev_ptr		(MAX_CPUS) ptr;
dcl	print_fault	(32) bit (1);
dcl	report		bit (1);
dcl	reset		bit (1);
dcl	single_fault_index	fixed bin;
dcl	sort		bit (1);
dcl	sub_order		(NO_TOTAL_FAULTS) fixed bin;
dcl	temp_sw		bit (1);
dcl	total		bit (1);
dcl	total_sw		bit (1);
dcl	totals_only	bit (1);
dcl	total_flt_ctrs	(NO_TOTAL_FAULTS) fixed bin (35);




/* Static */

dcl	unique		(8) fixed bin int static init (0, 0, 0, 0, 0, 0, 0, 0);

dcl	ALL_CPUS		bit (8) int static options (constant) init ("11111111"b);

dcl	CPU_TAGS		char (16) int static options (constant) init ("ABCDEFGHabcdefgh");

dcl	my_name		char (10) init ("fim_meters") int static options (constant);
dcl	entry_names	(8) char (19) int static options (constant)
			init ("cpu_a_flt_ctr_array", "cpu_b_flt_ctr_array", "cpu_c_flt_ctr_array",
			"cpu_d_flt_ctr_array", "cpu_e_flt_ctr_array", "cpu_f_flt_ctr_array", "cpu_g_flt_ctr_array",
			"cpu_h_flt_ctr_array");


/* Based */

dcl	arg		char (argl) based (argp);
dcl	cur_fault_count	(NO_TOTAL_FAULTS) fixed bin (35) based (ccp (1));
dcl	prev_fault_count	(NO_TOTAL_FAULTS) fixed bin (35) based (pcp (1));

/* Entry */

dcl	com_err_		entry options (variable);
dcl	cu_$arg_count	entry (fixed bin);
dcl	cu_$arg_ptr	entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl	get_line_length_$switch
			entry (ptr, fixed bin (35)) returns (fixed bin);
dcl	ioa_		entry options (variable);
dcl	ioa_$rsnnl	entry () options (variable);
dcl	metering_util_$define_regions
			entry options (variable);
dcl	metering_util_$fill_buffers
			entry (fixed bin, fixed bin (71), char (*), (*) ptr, (*) ptr, fixed bin (35));
dcl	metering_util_$reset
			entry (fixed bin, fixed bin (35));

/* External */

dcl	error_table_$bad_arg
			fixed bin (35) external;
dcl	error_table_$badopt fixed bin (35) external;
dcl	error_table_$inconsistent
			fixed bin (35) external;
dcl	error_table_$noarg	fixed bin (35) external;
%page;
%include fim_meters;
%page;

/* Pick up and validate each argument								*/


	ncpus_selected, single_fault_index = 0;
	totals_only, total_sw = "1"b;			/* default */
	cpu_string, cpu, default_to_all, long, report, reset, sort, total, got_cpu (*) = "0"b;
	call cu_$arg_count (nargs);
	do i = 1 to nargs;
	     call cu_$arg_ptr (i, argp, argl, code);
	     if substr (arg, 1, 1) ^= "-" & i = 1 & nargs = 1
	     then do;				/* arg is fault name			*/
		     do j = 1 to NO_HARDWARE_FAULTS while (single_fault_index = 0);
						/*  look for name in tables	*/
			if arg = LONG_FAULT_NAME (j) | arg = SHORT_FAULT_NAME (j)
			then single_fault_index = j;
		     end;
		     if single_fault_index = 0
		     then do j = NO_HARDWARE_FAULTS + 1 to NO_TOTAL_FAULTS while (single_fault_index = 0);
			     if arg = LONG_FAULT_NAME (j)
			     then single_fault_index = j;
			end;
		     if single_fault_index = 0
		     then do;			/* invalid fault name			*/
			     call com_err_ (error_table_$bad_arg, my_name, "Invalid fault name. ^a", arg);
			     return;
			end;
		end;
	     else if arg = "-report"
	     then report = "1"b;
	     else if arg = "-reset" | arg = "-rs"
	     then reset = "1"b;
	     else if arg = "-report_reset" | arg = "-rr"
	     then do;
		     report = "1"b;
		     reset = "1"b;
		end;
	     else if arg = "-long" | arg = "-lg"
	     then long = "1"b;

	     else if arg = "-tt" | arg = "total"
	     then total = "1"b;

	     else if arg = "-sort"
	     then do;
		     sort = "1"b;			/* sort by count is default			*/
		     call cu_$arg_ptr (i + 1, argp, argl, code);
						/* check for sort string			*/
		     if code = 0
		     then /* argument exists				*/
			if substr (arg, 1, 1) ^= "-"
			then do;			/* not control argument			*/
				if arg = "number"
				then sort = "0"b;	/* sort by fault number (no sort, really)	*/
				else if arg = "count"
				then sort = "1"b;	/* sort by count of faults		*/
				else do;		/* invalid sort string			*/
					call com_err_ (error_table_$bad_arg, my_name, "Invalid sort string. ^a",
					     arg);
					return;
				     end;
				i = i + 1;	/* adjust argument number			*/
			     end;
		end;

	     else if arg = "-cpu"
	     then do;
		     cpu = "1"b;
		     totals_only = "0"b;
		     if i = nargs
		     then default_to_all = "1"b;
		     else do;
			     call cu_$arg_ptr (i + 1, argp, argl, code);
			     if char (arg, 1) = "-"
			     then default_to_all = "1"b;
			end;

		     if default_to_all
		     then do;			/* No cpu_list, defaults to all cpus */
			     substr (cpu_string, 1, MAX_CPUS) = ALL_CPUS;
			     ncpus_selected = MAX_CPUS;
			end;

		     else do;			/* cpus specified by tag */
			     i = i + 1;		/* update index */
			     if argl > 8
			     then do;
				     call com_err_ (0, my_name, "Too many CPUs specified (^a).", arg);
				     return;
				end;

			     if verify (arg, CPU_TAGS) ^= 0
			     then do;
				     call com_err_ (0, my_name, "Invalid CPU Tag(s) ^a", arg);
				     return;
				end;
			     do argc = 1 to argl;
				substr (cpu_string, mod (index (CPU_TAGS, substr (arg, argc, 1)) - 1, 8) + 1, 1) =
				     "1"b;
				ncpus_selected = ncpus_selected + 1;
			     end;
			end;
		end;


	     else do;
		     call com_err_ (error_table_$badopt, my_name, arg);
		     return;
		end;
	end;


	if cpu & sort
	then do;
		call com_err_ (error_table_$inconsistent, my_name, "Incompatible args selected, -cpu & -sort.");
		return;
	     end;

	if ^report & ^reset
	then report = "1"b;				/* default is -report			*/

/* Initialize if this is the first call */

	do i = 1 to MAX_CPUS;
	     if unique (i) = 0
	     then do;
		     call metering_util_$define_regions (unique (i), code, "wired_hardcore_data", entry_names (i),
			NO_TOTAL_FAULTS);
		     if code ^= 0
		     then call com_err_ (code, my_name, "Initializing");
		end;
	end;


/* Set flags to print all existent faults 							*/

		do i = 1 to NO_HARDWARE_FAULTS;
		     print_fault (i) = EXTANT_FAULT (i);
		end;

		total_flt_ctrs (*) = 0;
		do i = 1 to MAX_CPUS;
		     call metering_util_$fill_buffers (unique (i), meter_time (i), formatted_time (i), ccp, pcp, code)
			;
		     if code ^= 0
		     then do;
			     call com_err_ (code, my_name, "Filling buffers");
			     return;
			end;
		     cur_ptr (i) = ccp (1);
		     prev_ptr (i) = pcp (1);
		     cur_per_cpu_ctrs (i).fault_counters (*) = cur_fault_count (*);
		     prev_per_cpu_ctrs (i).fault_counters (*) = prev_fault_count (*);
		     if substr (cpu_string, i, 1)
		     then got_cpu (i) = "1"b;		/* for printing purposes		*/
		     if sum (cur_fault_count (*)) - sum (prev_fault_count (*)) = 0
		     then got_cpu (i) = "0"b;		/* this cpu has never been on-line */


		     do INX = 1 to NO_TOTAL_FAULTS;	/* keep track of total faults */
			total_flt_ctrs (INX) =
			     total_flt_ctrs (INX)
			     + (cur_per_cpu_ctrs (i).fault_counters (INX)
			     - prev_per_cpu_ctrs (i).fault_counters (INX));
		     end;

		end;

/* Now have all totals per cpu and for all cpus, time to print everything */

	if report
	then do;

		line_length = get_line_length_$switch (null (), code);
		if line_length < 132
		then DISPLAY_SIZE = 4;
		else DISPLAY_SIZE = 8;
		if code ^= 0
		then DISPLAY_SIZE = 8;


		call ioa_ ("^/Total Metering Time:^-^a", formatted_time (1));
		if totals_only
		then do;
			call print_totals_only ();
		     end;
		else do;
			display_cpu (*) = 0;
			cpu_index = 1;
			call get_cpus_to_display ();
			if ncpus_selected > DISPLAY_SIZE
			then do;
				call print_cpu_meters ("0"b);
				display_cpu (*) = 0;
				call get_cpus_to_display ();
			     end;
			call print_cpu_meters (total);
		     end;
	     end;

	if reset then do;
	do i = 1 to MAX_CPUS;
		call metering_util_$reset (unique (i), code);
		if code ^= 0
		then call com_err_ (code, my_name, "Resetting");
	     end;
	  total_flt_ctrs (*) = 0;
	  end;
         call ioa_ ("^/");
%page;
/* Internal procedure to sort an array of indices by count of faults					*/

bubble_sort:
     proc (N, array);

dcl	array		(*) fixed bin;		/* array of indices				*/
dcl	N		fixed bin;

dcl	i		fixed bin;
dcl	j		fixed bin;
dcl	k		fixed bin;


	do i = 1 to N - 1;
	     do j = i + 1 to N;
		if total_flt_ctrs (array (i)) < total_flt_ctrs (array (j))
		then do;
			k = array (i);
			array (i) = array (j);
			array (j) = k;
		     end;
	     end;
	end;

     end bubble_sort;
%page;
/* Internal procedure */
get_cpus_to_display:
     proc ();

dcl	(i, j)		fixed bin;

	j = 0;
	do i = cpu_index to MAX_CPUS while (j < DISPLAY_SIZE);
	     if got_cpu (i)
	     then do;
		     j = j + 1;
		     display_cpu (j) = i;
		end;
	end;
	cpu_index = i;				/* set up for next call */

     end get_cpus_to_display;
%page;
/* Internal procedure to print meters                      						*/

print_hw_fault:
     proc (sub_order_sw, ifault, totals_too);

dcl	(icpu, ifault, j)	fixed bin;
dcl	totals_too	bit (1);
dcl	output		char (132) var;
dcl	(ignore, k)	fixed bin;
dcl	sub_order_sw	bit (1);
dcl	totals_position	fixed bin;
dcl	first_zero	bit (1);
dcl	non_zero		bit (1);

	non_zero = "0"b;
	output = "";
	totals_position = DISPLAY_SIZE;
	first_zero = "1"b;

	do j = 1 to DISPLAY_SIZE while (non_zero = "0"b);
	     if display_cpu (j) > 0
	     then do;
		     if ^sub_order_sw
		     then do;
			     if (cur_per_cpu_ctrs (display_cpu (j)).fault_counters (ifault)
				- prev_per_cpu_ctrs (display_cpu (j)).fault_counters (ifault)) ^= 0
			     then non_zero = "1"b;
			end;
		     else do;
			     if cur_per_cpu_ctrs (display_cpu (j)).fault_counters (sub_order (ifault))
				- prev_per_cpu_ctrs (display_cpu (j)).fault_counters (sub_order (ifault)) ^= 0
			     then non_zero = "1"b;
			end;

		end;
	end;
	if ^non_zero
	then return;				/* dont display all zero lines */

	string (line) = "";				/* clear the display line */
	if ^sub_order_sw
	then call ioa_$rsnnl ("^30a", output, ignore, LONG_FAULT_NAME (ifault));
	else call ioa_$rsnnl ("^3t^30a", output, ignore, LONG_FAULT_NAME (sub_order (ifault)));
	line.title = rtrim (output);

	k = 0;
	do j = 1 to DISPLAY_SIZE;
	     if display_cpu (j) > 0
	     then do;
		     k = k + 1;
		     if ^sub_order_sw
		     then do;
			     pic13 = cur_per_cpu_ctrs (display_cpu (j)).fault_counters (ifault)
				- prev_per_cpu_ctrs (display_cpu (j)).fault_counters (ifault);
			     line.field (k) = pic13;
			end;

		     else do;
			     pic13 = cur_per_cpu_ctrs (display_cpu (j)).fault_counters (sub_order (ifault))
				- prev_per_cpu_ctrs (display_cpu (j)).fault_counters (sub_order (ifault));
			     line.field (k) = pic13;
			end;
		end;
	     else do;
		     if first_zero
		     then do;
			     totals_position = j;
			     first_zero = "0"b;
			end;
		end;
	end;

	if totals_too
	then do;
		k = k + 1;
		if ^sub_order_sw
		then do;
			pic13 = total_flt_ctrs (ifault);
			line.field (k) = pic13;
		     end;
		else do;
			pic13 = total_flt_ctrs (sub_order (ifault));
			line.field (k) = pic13;
		     end;
	     end;

	call ioa_ ("^a", string (line));

     end print_hw_fault;
%page;
/* Internal procedure to print meters                      						*/

print_cpu_meters:
     proc (totals_too);

dcl	totals_too	bit (1) parameter;
dcl	(i, j, k, l)	fixed bin;
dcl	ignore		fixed bin;


	string (line) = "";
	line.title = "Fault Type";
	k = 0;
	do j = 1 to DISPLAY_SIZE;
	     if display_cpu (j) > 0
	     then do;
		     k = k + 1;
		     line.field (k) = "        CPU " || CPU_NAMES (display_cpu (j));
		end;
	end;

	if totals_too
	then do;
		k = k + 1;
		line.field (k) = "       TOTALS";
	     end;
	call ioa_ ("^/^a", string (line));


	do i = 1 to NO_HARDWARE_FAULTS;

	     if LONG_FAULT_NAME (i) = "<invalid>"
	     then goto SKIP_IT;
	     call print_hw_fault ("0"b, i, totals_too);
	     if long
	     then do;				/* print subordinate fault info		*/
		     k = 0;
		     j = i;
		     do while (THREAD_FAULT (j) ^= 0);
			k = k + 1;
			sub_order (k) = THREAD_FAULT (j);
			j = THREAD_FAULT (j);
		     end;

		     if k > 0
		     then do;
			     do l = 1 to k;
				call print_hw_fault ("1"b, l, totals_too);
			     end;
			end;
		end;
SKIP_IT:
	end;


     end print_cpu_meters;
%page;
/* Internal procedure to print total meters                      						*/

print_totals_only:
     proc ();

	call ioa_ ("^/Fault Type^29tTotal Fault Count");

	if single_fault_index = 0
	then do;
		do i = 1 to NO_HARDWARE_FAULTS;
		     order (i) = i;
		     if total_flt_ctrs (i) = 0
		     then print_fault (i) = "0"b;	/* eliminate zeroes */
		end;
		if sort
		then call bubble_sort (NO_HARDWARE_FAULTS, order);
						/* sort by count of faults		*/

		do i = 1 to NO_HARDWARE_FAULTS;
		     if print_fault (order (i))
		     then do;
			     call ioa_ ("^30a^33t^13d", LONG_FAULT_NAME (order (i)), total_flt_ctrs (order (i)));

			     if long
			     then do;		/* print subordinate fault info		*/
				     k = 0;
				     j = order (i);

				     do while (THREAD_FAULT (j) ^= 0);
					if total_flt_ctrs (THREAD_FAULT (j)) ^= 0
					then temp_sw = "1"b;

					if ^sort | temp_sw
					then do;
						k = k + 1;
						sub_order (k) = THREAD_FAULT (j);
					     end;
					j = THREAD_FAULT (j);
				     end;
				     if k > 0
				     then do;
					     if sort
					     then call bubble_sort (k, sub_order);
					     do l = 1 to k;
						if total_flt_ctrs (sub_order (l)) ^= 0
						then call ioa_ ("^3x^30a^33t^13d",
							LONG_FAULT_NAME (sub_order (l)),
							total_flt_ctrs (sub_order (l)));
					     end;
					end;
				end;
			end;
		end;
	     end;

	else call ioa_ ("^30a^33t^13d", LONG_FAULT_NAME (single_fault_index), total_flt_ctrs (single_fault_index));

     end print_totals_only;



     end fim_meters;
