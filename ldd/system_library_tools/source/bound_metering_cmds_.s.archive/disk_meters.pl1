/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Limited, 1984                  *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(86-01-16,Fawcett), approve(86-04-10,MCR7383),
     audit(86-05-27,Wallman), install(86-07-18,MR12.0-1098):
     Add support for subvolumes, 3380 and 3390.
  2) change(86-11-10,Fawcett), approve(86-11-10,MCR7125),
     audit(87-01-08,Farley), install(87-01-09,MR12.0-1266):
     Changed by Tom Oke to call get_vol_list as per documentation.
  3) change(86-11-10,Fawcett), approve(86-11-10,MCR7547),
     audit(87-01-08,Farley), install(87-01-09,MR12.0-1266):
     Changed to display subvolume devices correctly.
                                                   END HISTORY COMMENTS */


/* Disk meter for optimizing disk system. */

/* Rewritten Spring 1984 by Tom Oke. */
/* Cleaned up for installation August 1984 by Chris Jones. */
/* Format modifications and statistics correction October 1984 by Tom Oke. */
/* Skip IO types without seeks in long mode. November 1984 by T. Oke. */
/* November 1984 by T. Oke, major changes to printing and device selection to
   utilize get_vol_list_ routine and select by logical, physical, drive and
   subsystem.  */

/* format: style4,delnl,insnl,indattr,ifthen,dclind10 */

disk_meters:
dskm:
     proc;

dcl	areas		   area based;
dcl	arg		   char (arg_len) based (arg_ptr);
dcl	arg_count		   fixed bin;
dcl	arg_index		   fixed bin;
dcl	arg_len		   fixed bin (21);
dcl	arg_list_ptr	   ptr;
dcl	arg_ptr		   ptr;

dcl	ave_queue		   float bin (63);
dcl	ave_seek		   float bin (63);
dcl	buddy_pic		   picture "99";
dcl	channel_sum	   float bin (63);
dcl	channel_time	   float bin (63);
dcl	code		   fixed bin (35);
dcl	copy_size		   fixed bin (19) static;
dcl	date_time		   char (24);
dcl	delta		   fixed bin (71);
dcl	dev		   fixed bin;
dcl	dev_pic		   picture "99";
dcl	disk_segp		   ptr static;
dcl	disksp_static	   ptr static;
dcl	edac_errors	   fixed bin;
dcl	errors		   fixed bin;
dcl	fdelta		   float bin (63);
dcl	ferrors		   fixed bin;
dcl	float_seconds	   float bin (27);
dcl	float_seek	   float bin (63);
dcl	i		   fixed bin;
dcl	i_minutes		   fixed bin;
dcl	i_seconds		   fixed bin;
dcl	io_per_second	   float bin (27);
dcl	io_per_second_per_drive
			   float bin (27);
dcl	io_per_second_per_subsystem
			   float bin (27);
dcl	j		   fixed bin;
dcl	lv_ptr		   ptr static initial (null ());
dcl	MYNAME		   char (11) static options (constant) initial ("disk_meters");
dcl	odiskp		   ptr;
dcl	odisksp		   ptr;
dcl	odp		   ptr;
dcl	old_clock		   fixed bin (71) static init (0);
dcl	old_dev		   fixed bin;
dcl	old_sx		   fixed bin;
dcl	print_busy	   bit (1);
dcl	print_channels	   bit (1);
dcl	print_detail	   bit (1);
dcl	print_drive	   bit (1);
dcl	print_header	   bit (1);		/*  header */
dcl	print_io_rate	   bit (1);
dcl	print_queue	   bit (1);
dcl	print_subsys	   (32) bit (1);
dcl	print_system	   bit (1);
dcl	pv		   fixed bin;
dcl	pv_name_max_space	   fixed bin;
dcl	pv_ptr		   ptr static initial (null ());
dcl	queue_sum		   float bin (63);
dcl	reset		   bit (1);
dcl	rrset		   bit (1);
dcl	save_clock	   fixed bin (71);
dcl	seek_to_time	   float bin (63);
dcl	seeks		   fixed bin (35);
dcl	seek_sum		   float bin (63);
dcl	selected_drive	   bit (1);		/* true if any drive selected */
dcl	small_code	   fixed bin;
dcl	sub_sys_limit	   fixed bin static;	/* defined sub-sys */
dcl	subsys_name	   char (4);
dcl	sx		   fixed bin;
dcl	temp_segp		   ptr static initial (null ());
						/* pointer to temp seg */
dcl	total_seek	   float bin (63);

dcl	io_name		   (0:6) char (6) static options (constant)
			   initial ("PageRd", "PageWt", "VtocRd", "VtocWt", "Test  ", "BootRd", "BootWt");

/* Name matching structures. */

dcl	match_count	   fixed bin;
dcl	match_type	   fixed bin;		/* type of name */
dcl	1 match		   (64),
	  2 type		   fixed bin,
	  2 name		   char (32);

dcl	PV		   fixed bin static options (constant) initial (1);
						/* physical volume */
dcl	LV		   fixed bin static options (constant) initial (2);
						/* logical volume */
dcl	DV		   fixed bin static options (constant) initial (3);
						/* drive */
dcl	SY		   fixed bin static options (constant) initial (4);
						/* subsys */

dcl	match_keys	   (4) char (16) static options (constant)
			   initial ("-logical_volume", "-physical_volume", "-device", "-subsystem");


dcl	seconds		   pic "99";
dcl	minutes		   pic "99";
dcl	hours		   pic "zzzzz9";

/* Storage overlay of base of tempseg used to create initial "0" reading. */

dcl	seg_overlay	   (copy_size) bit (36) based (temp_segp);

dcl	sys_info$max_seg_size  fixed bin (35) ext static;

dcl	error_table_$bad_arg   fixed bin (35) ext;
dcl	error_table_$badstar   fixed bin (35) ext;
dcl	error_table_$noarg	   fixed bin (35) ext;
dcl	error_table_$too_many_names
			   fixed bin (35) ext;
dcl	check_star_name_$entry entry (char (*), fixed bin (35));
dcl	clock_		   entry returns (fixed bin (71));
dcl	com_err_		   entry () options (variable);
dcl	cu_$arg_count_rel	   entry (fixed bin, ptr, fixed bin (35));
dcl	cu_$arg_list_ptr	   entry (ptr);
dcl	cu_$arg_ptr_rel	   entry (fixed bin, ptr, fixed bin (21), fixed bin (35), ptr);
dcl	date_time_	   entry (fixed bin (71), char (*));
dcl	get_temp_segment_	   entry (char (*), ptr, fixed bin (35));
dcl	get_vol_list_	   entry (ptr, ptr, ptr, char (8), fixed bin (35));
dcl	ioa_		   entry () options (variable);
dcl	ioa_$nnl		   entry () options (variable);
dcl	match_star_name_	   entry (char (*), char (*), fixed bin (35));
dcl	release_temp_segment_  entry (char (*), ptr, fixed bin (35));
dcl	ring_zero_peek_	   entry (ptr, ptr, fixed bin (19), fixed bin (35));
dcl	ring0_get_$segptr	   entry (char (*), char (*), ptr, fixed bin);
dcl	system_info_$timeup	   entry (fixed bin (71));

dcl	(addr, addrel, bin, divide, float, hbound, index, null, ptr, rel, size, substr, unspec)
			   builtin;
%page;

/* initialize first time, or everytime. */

	print_busy, print_channels, print_detail, print_drive, print_header, print_io_rate = "0"b;
	reset, rrset, print_queue, print_subsys, print_system = "0"b;


	call cu_$arg_list_ptr (arg_list_ptr);
	call init_args;

	if temp_segp = null ()			/* no tempseg */
	then do;
	     call get_temp_segment_ (MYNAME, temp_segp, code);
	     if code ^= 0 then do;
		call com_err_ (code, MYNAME, "Getting temp segment");
		return;
	     end;

	     odisksp = temp_segp;
	     call ring0_get_$segptr ("", "disk_seg", disk_segp, small_code);
	     if small_code ^= 0 then do;
		code = small_code;
RELEASE_RETURN:
		call com_err_ (code, MYNAME, "disk_seg");
release_quit:
		call release_temp_segment_ (MYNAME, temp_segp, code);
		temp_segp = null ();
		old_clock = 0;			/* reset clock too. */
		if lv_ptr ^= null () then do;
		     lv_list_ptr = lv_ptr;
		     free lv_list in (lv_list.area_ptr -> areas);
		     lv_ptr = null ();
		end;
		if pv_ptr ^= null () then do;
		     pv_list_ptr = pv_ptr;
		     free pv_list in (pv_list.area_ptr -> areas);
		     pv_ptr = null ();
		end;
		return;
	     end;

	     call ring_zero_peek_ (disk_segp, temp_segp, size (disk_data), code);
	     if code ^= 0 then
		goto RELEASE_RETURN;

	     copy_size = bin (odisksp -> disk_data.free_offset, 19);
	     sub_sys_limit = odisksp -> disk_data.subsystems;
	     if 2 * copy_size > sys_info$max_seg_size then do;
		call com_err_ (0, MYNAME, "disk_seg is too big to be metered.");
		goto RELEASE_RETURN;
	     end;
	     disksp_static = ptr (temp_segp, odisksp -> disk_data.free_offset);
	     unspec (seg_overlay) = "0"b;		/* clear old copy */
	end;
	else odisksp = temp_segp;

	disksp = disksp_static;
%page;
/* Get arguments. */

	match_count = 0;

	do while (get_next_arg ());
parse_loop:
	     if index (arg, "-") = 1 then do;
		if arg = "-rl" | arg = "-release" then
		     goto release_quit;
		else if arg = "-chn" | arg = "-channels" then
		     print_channels = "1"b;
		else if arg = "-dtl" | arg = "-detail" then
		     print_detail, print_busy = "1"b;
		else if arg = "-q" | arg = "-queue" then
		     print_queue = "1"b;
		else if arg = "-sys" | arg = "-system" then
		     print_system = "1"b;

		else if arg = "-lg" | arg = "-long" then do;
		     print_channels, print_queue, print_system = "1"b;
		     print_detail, print_busy, print_io_rate = "1"b;
		     print_header, print_drive = "1"b;
		end;

		else if arg = "-he" | arg = "-header" then
		     print_header = "1"b;

		else if arg = "-drv" | arg = "-drive" then
		     print_drive = "1"b;

		else if arg = "-busy" then
		     print_busy = "1"b;

		else if arg = "-rate" then
		     print_io_rate = "1"b;

		else if arg = "-rs" | arg = "-reset" then
		     reset = "1"b;
		else if arg = "-rr" | arg = "-report_reset" then
		     rrset = "1"b;
		else if arg = "-lv" | arg = "-logical_volume" then do;
		     match_type = LV;
		     goto get_match_names;
		end;
		else if arg = "-dv" | arg = "-device" then do;
		     match_type = DV;
		     goto get_match_names;
		end;
		else if arg = "-sub" | arg = "-subsystem" then do;
		     match_type = SY;
		     goto get_match_names;
		end;
		else if arg = "-pv" | arg = "-physical_volume" then do;
		     match_type = PV;
		     goto get_match_names;
		end;
		else do;				/* bad argument */
		     call com_err_ (error_table_$bad_arg, MYNAME, arg);
		     return;
		end;
	     end;
	     else do;				/* presume subsys */
		match_type = SY;
		goto match_name_loop;

get_match_names:
		if ^get_next_arg () then do;
		     call com_err_ (error_table_$noarg, MYNAME, "Name missing after ^a.", match_keys (match_type));
		     return;
		end;

match_name_loop:
		call check_star_name_$entry (arg, code);
		if code = error_table_$badstar then do;
		     call com_err_ (code, MYNAME, arg);
		     return;
		end;

		if match_count < hbound (match, 1) then do;
		     match_count = match_count + 1;
		     match (match_count).name = arg;
		     match (match_count).type = match_type;
		end;
		else do;
		     call com_err_ (error_table_$too_many_names, MYNAME, arg);
		     return;
		end;
		if ^get_next_arg () then
		     goto end_parse_loop;
		if index (arg, "-") = 1 then
		     goto parse_loop;
		goto match_name_loop;
	     end;
end_parse_loop:
	end;

/* setup  listing defaults */

	if print_channels = "0"b & print_drive = "0"b & print_system = "0"b & print_header = "0"b then
	     print_drive, print_header = "1"b;
%page;
/* Read current meters. */

	call ring_zero_peek_ (disk_segp, disksp, copy_size, code);
	if code ^= 0 then
	     goto ERROR_RETURN;

	call get_vol_list_ (pv_ptr, lv_ptr, null (), get_vol_list_version, code);
	if code ^= 0 then
	     goto ERROR_RETURN;

	lv_list_ptr = lv_ptr;
	pv_list_ptr = pv_ptr;
	pv_name_max_space = pv_list.pv_name_max_length;

/* determine which sub-systems and drives have been selected. */
/* At end of loop pv_list.pv_info.used will be on for selected drives
   and print_subsys (sx) will be set for sub-systems with drives selected.
   The sx of the drive will be stored in pv_list.pv_info.device_type.

   If a secondary device is selected, the primary device will also be
   selected. */

	print_subsys = "0"b;
	selected_drive = "0"b;

	do i = 1 to pv_list.pv_name_count;
	     if ^pv_list.pv_info (i).used then
		goto end_accept_loop;
	     if match_count = 0 then
		goto drive_accept;			/* Default */
	     do j = 1 to match_count;
		goto match_case (match (j).type);

match_case (1):					/* PV */
		call match_star_name_ ((pv_list.pv_info (i).pvname), match (j).name, code);
		if code = 0 then
		     goto drive_accept;
		goto drive_no_match;

match_case (2):					/* LV */
		call match_star_name_ ((lv_list.lv_info (pv_list.pv_info (i).lvx).lvname), match (j).name, code);
		if code = 0 then
		     goto drive_accept;
		goto drive_no_match;

match_case (3):					/* DV */
		call match_star_name_ ((pv_list.pv_info (i).drive_name), match (j).name, code);
		if code = 0 then
		     goto drive_accept;
		goto drive_no_match;

match_case (4):					/* SY */
		call match_star_name_ (substr (pv_list.pv_info (i).drive_name, 1, 4), match (j).name, code);
		if code = 0 then
		     goto drive_accept;
		goto drive_no_match;
drive_no_match:
	     end;
	     goto drive_skip;

/* Accept drive and flag sub-system as ready for stats */

drive_accept:
	     selected_drive = "1"b;
	     do sx = 1 to disk_data.subsystems;
		if substr (pv_list.pv_info (i).drive_name, 1, 4) = disk_data.array (sx).name then
		     goto sub_sys_accept;
	     end;
	     call com_err_ (0, MYNAME, "disk_table/disk_seg inconsistency.");
	     return;

sub_sys_accept:
	     pv_list.pv_info (i).device_type = sx;
	     print_subsys (sx) = "1"b;

	     dev = bin (substr (pv_list.pv_info (i).drive_name, 6, 2));
	     diskp = addrel (disksp, disk_data.array (sx).offset);
	     dp = addr (disktab.devtab (dev));
	     if devtab.pdi ^= dev & devtab.pdi ^= 0 then do;
		pv_list.pv_info (disktab.devtab (devtab.pdi).pvtx).device_type = sx;
		pv_list.pv_info (disktab.devtab (devtab.pdi).pvtx).used = "1"b;
	     end;
	     goto end_accept_loop;

drive_skip:
	     pv_list.pv_info (i).used = "0"b;		/* skip drive */
end_accept_loop:
	end;

	if ^selected_drive then do;
	     call com_err_ (error_table_$bad_arg, MYNAME, "No selection matches.");
	     return;
	end;
%page;

	save_clock = clock_ ();
	if old_clock = 0 then do;
	     call system_info_$timeup (old_clock);
	end;
	delta = save_clock - old_clock;
	fdelta = float (delta);
	float_seconds = fdelta / 1000000.0;
	i_seconds = divide (delta, 1000000, 17, 0);
	i_minutes = divide (i_seconds, 60, 17, 0);
	hours = divide (i_minutes, 60, 17, 0);
	seconds = i_seconds - (i_minutes * 60);
	minutes = i_minutes - (hours * 60);

	call ioa_ ("^2-Metering Time: ^a:^a:^a", hours, minutes, seconds);

/* Process output */

	if reset then
	     goto reset_meter;


	if print_system then do;
	     call print_q_stats ("FREE", addr (odisksp -> disk_data.free_q), "1"b);

	     call ioa_ ("^-Stagnate time ^.3f seconds, ^i PL/1 interrupt service^[s^].",
		float (disk_data.stagnate_time) / 1000000.0, disk_data.bail_outs - odisksp -> disk_data.bail_outs,
		disk_data.bail_outs - odisksp -> disk_data.bail_outs ^= 1);

	     call date_time_ (disk_data.max_depth_reset_time, date_time);
	     call ioa_ ("^-Maximum Depth Meters reset at: ^a", date_time);

	     do i = 0 to MAX_IO_TYPE;
		do j = 0 to MAX_IO_TYPE;
		     if rel (addr (odisksp -> disk_data.sys_info (j))) = disk_data.sys_info (i).depth_map then
			goto mapped;
		end;
		call ioa_ ("Bad depth mapping!!.");
		j = TEST;

mapped:
		if i ^= TEST then
		     call ioa_ ("    ^6a   Max Load ^4i, Depth ^3i (^a), Fraction ^6.4f", io_name (i),
			disk_data.sys_info (i).max_depth, disk_data.sys_info (i).depth, io_name (j),
			disk_data.sys_info (i).fraction);
	     end;
	end;
%page;

	io_per_second = 0.0;


/* Print per subsystem. */

	if print_header then
	     do sx = 1 to disk_data.subsystems;
	     subsys_name = disk_data.array (sx).name;
	     if print_subsys (sx) then do;
		diskp = addrel (disksp, disk_data.array (sx).offset);
		odiskp = addrel (odisksp, disk_data.array (sx).offset);
		errors = disktab.errors - odiskp -> disktab.errors;
		ferrors = disktab.ferrors - odiskp -> disktab.ferrors;
		edac_errors = disktab.edac_errors - odiskp -> disktab.edac_errors;
		call ioa_ (
		     "^/Subsystem  ^a:^[^s^; ^i Error^]^[s^]^[^s^; ^i Fatal Error^]^[s^]^[^s^; ^i EDAC Error^]^[s^]",
		     subsys_name, errors = 0, errors, errors > 1, ferrors = 0, ferrors, ferrors > 1, edac_errors = 0,
		     edac_errors, edac_errors > 1);
		call print_subsys_info;
	     end;
	end;

	if print_drive & ^print_detail then do;
	     call ioa_ ("^/ Drive    ^va                    Ave     ATB     ATB        ATB", pv_name_max_space, "  PV");
	     call ioa_ ("          ^vx   Reads   Writes  Seek    Reads   Writes      I/O^/", pv_name_max_space);
	end;


/* Print per drive. */

	old_sx = 0;
	old_dev = -1;
	do pv = 1 to pv_list.pv_name_count;
	     if ^pv_list.pv_info (pv).used then
		goto skip_drive;
	     sx = pv_list.pv_info (pv).device_type;	/* get sub-system */
	     if sx ^= old_sx then do;			/* sub-system changed */
		if old_sx ^= 0 then do;		/* cleanup old */
		     call print_channel_info;
		     io_per_second = io_per_second + io_per_second_per_subsystem;
		     if print_io_rate & io_per_second_per_subsystem > 0.0 then
			call ioa_ ("^-^a IO Rate ^6.1f", subsys_name, io_per_second_per_subsystem / float_seconds);
		end;
		io_per_second_per_subsystem = 0.0;
		subsys_name = disk_data.array (sx).name;
		diskp = addrel (disksp, disk_data.array (sx).offset);
		odiskp = addrel (odisksp, disk_data.array (sx).offset);
		old_sx = sx;
		old_dev = -1;
	     end;

	     dev = bin (substr (pv_list.pv_info (pv).drive_name, 6, 2));
	     if pv_list.pv_info (pv).is_sub_vol then
		if dev = old_dev then
		     goto skip_drive;
	     dp = addr (disktab.devtab (dev));
	     odp = addr (odiskp -> disktab.devtab (dev));
	     io_per_second_per_drive = 0.0;
	     if devtab.pdi = dev then
		call print_device;
	     io_per_second_per_subsystem = io_per_second_per_subsystem + io_per_second_per_drive;
skip_drive:
	     old_dev = dev;
	end;
	call print_channel_info;
	io_per_second = io_per_second + io_per_second_per_subsystem;
	if print_io_rate & io_per_second_per_subsystem > 0.0 then
	     call ioa_ ("^-^a IO Rate ^6.1f", subsys_name, io_per_second_per_subsystem / float_seconds);



	if print_io_rate & io_per_second > 0.0 then
	     call ioa_ ("^-Sum of Selected Drives ^6.1f IO/second.", io_per_second / float_seconds);

reset_meter:
	if reset | rrset then do;
	     unspec (temp_segp -> seg_overlay) = unspec (disksp -> seg_overlay);
	     old_clock = save_clock;
	end;
	return;

ERROR_RETURN:
	call com_err_ (code, MYNAME);
	return;
%page;
/* Routine to print information of drive (primary and buddy too). */

print_device:
     proc;

dcl	channel_wait_sum	   fixed bin (71);
dcl	(drive_lv, buddy_lv)   fixed bin;
dcl	(drive_pv, buddy_pv)   fixed bin;

	dev_pic = dev;
	drive_pv = disktab.devtab (dev).pvtx;
	drive_lv = pv_list.pv_info (drive_pv).lvx;

	if devtab.buddy ^= 0 & devtab.buddy ^= dev then do;
	     buddy_pic = devtab.buddy;
	     buddy_pv = disktab.devtab (devtab.buddy).pvtx;
	     buddy_lv = pv_list.pv_info (buddy_pv).lvx;
	end;
	else do;
	     buddy_pic = 0;
	     buddy_lv, buddy_pv = 0;
	end;

/* Determine if drive and buddy were busy. */

	channel_wait_sum = 0;
	do i = 0 to MAX_IO_TYPE;
	     channel_wait_sum =
		channel_wait_sum + devtab.opt_info (i).channel_wait - odp -> devtab.opt_info (i).channel_wait;
	end;

	if channel_wait_sum = 0 then
	     return;

	call print_dev (dev);
	if devtab.buddy ^= 0 then do;
	     call print_dev ((devtab.buddy));
	     call print_q_stats (subsys_name || "_" || dev_pic || "/" || buddy_pic,
		addr (odiskp -> disktab (dev).devtab.wq), print_queue);
	end;
	else call print_q_stats (subsys_name || "_" || dev_pic, addr (odiskp -> disktab (dev).devtab.wq), print_queue);

	if print_busy then
	     call ioa_ ("  Channels ^.2f% busy,  ^i Comb^[s^],  ^6.1f IO/second.", 100.0 * channel_wait_sum / fdelta,
		disktab (dev).devtab.comb - odiskp -> disktab (dev).devtab.comb,
		disktab (dev).devtab.comb - odiskp -> disktab (dev).devtab.comb ^= 1,
		io_per_second_per_drive / float_seconds);

	return;

print_dev:
	proc (dev);

/* Print individual device information. */

dcl	dev		   fixed bin;

dcl	buddyp		   ptr;			/* buddy devtab ptr */
dcl	buddy_seeks	   float bin (63);		/* seeks on buddy */
dcl	device_read_sum	   fixed bin (35);
dcl	device_seeks	   float bin (63);		/* total seeks on device */
dcl	device_total_io	   float bin (63);
dcl	device_write_sum	   fixed bin (35);
dcl	dp		   ptr;
dcl	need_buddy	   bit (1);		/* need to count buddy */
dcl	obuddyp		   ptr;			/* old buddy devtab */
dcl	odp		   ptr;
dcl	read_sum		   fixed bin (35);
dcl	total_io		   float bin (63);
dcl	total_read	   float bin (63);
dcl	total_write	   float bin (63);
dcl	write_sum		   fixed bin (35);

	     odp = addr (odiskp -> disktab.devtab (dev));
	     dp = addr (disktab.devtab (dev));
	     if dev = dp -> devtab.pdi & dp -> devtab.buddy ^= 0 then do;
		need_buddy = "1"b;
		buddyp = addr (disktab.devtab (dp -> devtab.buddy));
		obuddyp = addr (odiskp -> disktab.devtab (dp -> devtab.buddy));
	     end;
	     else need_buddy = "0"b;


	     seek_sum, buddy_seeks = 0.0;
	     do i = 0 to MAX_IO_TYPE;			/* determine if zero */
		if i ^= TEST then do;
		     seek_sum =
			seek_sum
			+ float (dp -> devtab.opt_info (i).seek_count - odp -> devtab.opt_info (i).seek_count);
		     if need_buddy then
			buddy_seeks =
			     buddy_seeks
			     +
			     float (buddyp -> devtab.opt_info (i).seek_count
			     - obuddyp -> devtab.opt_info (i).seek_count);
		end;
	     end;
	     if (seek_sum + buddy_seeks) = 0.0		/* no work */
		then
		return;

	     io_per_second_per_drive = io_per_second_per_drive + seek_sum;

	     if print_detail then do;
		if pv_list.pv_info (drive_pv).is_sub_vol then
		     call print_sv (drive_pv);
		else do;
		     if dev = dp -> devtab.pdi then
			call ioa_ (
			     "^/^a_^a:^-PV-^va^-of LV-^va^[ PDIR^;^]^/           #Seeks AveSeek Queue-wait Channel-wait  Queued Multiplier",
			     subsys_name, dev_pic, pv_list.pv_name_max_length, pv_list.pv_info (drive_pv).pvname,
			     lv_list.lv_name_max_length, lv_list.lv_info (drive_lv).lvname,
			     lv_list.lv_info (drive_lv).pdirs_ok);
		     else call ioa_ (
			     "^/^a_^a:^-PV-^va^-of LV-^va^[ PDIR^;^]^/           #Seeks AveSeek (Secondary Device)",
			     subsys_name, buddy_pic, pv_list.pv_name_max_length, pv_list.pv_info (buddy_pv).pvname,
			     lv_list.lv_name_max_length, lv_list.lv_info (buddy_lv).lvname,
			     lv_list.lv_info (buddy_lv).pdirs_ok);
		end;
	     end;
	     channel_sum, queue_sum = 0.0;
	     total_seek = 0.0;
	     read_sum, write_sum, device_read_sum, device_write_sum = 0;
	     do i = 0 to MAX_IO_TYPE;

/* Determine summations, and possibly print detail output. */

		if i = TEST then
		     if print_detail then
			call ioa_ ("   TEST   ^3i UNLOAD^[s^], ^3i TEST^[s^]",
			     dp -> devtab.opt_info (i).seek_sum - odp -> devtab.opt_info (i).seek_sum,
			     dp -> devtab.opt_info (i).seek_sum - odp -> devtab.opt_info (i).seek_sum ^= 1,
			     dp -> devtab.opt_info (i).seek_count - odp -> devtab.opt_info (i).seek_count,
			     dp -> devtab.opt_info (i).seek_count - odp -> devtab.opt_info (i).seek_count ^= 1);
		     else ;
		else do;
		     channel_time =
			float (dp -> devtab.opt_info (i).channel_wait - odp -> devtab.opt_info (i).channel_wait);
		     channel_sum = channel_sum + channel_time;

		     float_seek, device_seeks =
			float (dp -> devtab.opt_info (i).seek_count - odp -> devtab.opt_info (i).seek_count);

		     if need_buddy then
			device_seeks =
			     device_seeks
			     +
			     float (buddyp -> devtab.opt_info (i).seek_count
			     - obuddyp -> devtab.opt_info (i).seek_count);

		     seeks = dp -> devtab.opt_info (i).seek_count - odp -> devtab.opt_info (i).seek_count;

		     if write_map (i) then do;
			write_sum = write_sum + seeks;
			device_write_sum = device_write_sum + device_seeks;
		     end;
		     else do;
			read_sum = read_sum + seeks;
			device_read_sum = device_read_sum + device_seeks;
		     end;

		     if float_seek = 0.0 then
			float_seek = 1.0e30;
		     if device_seeks = 0.0 then
			device_seeks = 1.0e30;
		     seek_to_time = device_seeks * 1.0e3;
						/* milli secs */
		     ave_seek =
			float (dp -> devtab.opt_info (i).seek_sum - odp -> devtab.opt_info (i).seek_sum)
			/ float_seek;
		     total_seek =
			total_seek
			+ float (dp -> devtab.opt_info (i).seek_sum - odp -> devtab.opt_info (i).seek_sum);
		     ave_queue =
			float (dp -> devtab.opt_info (i).queue_wait - odp -> devtab.opt_info (i).queue_wait)
			/ seek_to_time;
		     queue_sum =
			queue_sum
			+ float (dp -> devtab.opt_info (i).queue_wait - odp -> devtab.opt_info (i).queue_wait);

		     if print_detail & print_drive & device_seeks < 1.0e29 then
			if dev = dp -> devtab.pdi then
			     call ioa_ ("   ^6a ^7i ^7.2f ^10.1f ^4.1f%^7.1f ^7i ^10.1f", io_name (i), seeks,
				ave_seek, ave_queue, (channel_time * 100.0) / fdelta, channel_time / seek_to_time,
				dp -> devtab.opt_info (i).depth, dp -> devtab.opt_info (i).multiplier);
			else call ioa_ ("   ^6a ^7i ^7.2f", io_name (i), seeks, ave_seek);

		end;
	     end;

/* output simple summation. */

	     if read_sum = 0 then
		total_read = 0.0;
	     else total_read = (0.001 * fdelta) / float (read_sum);
	     if write_sum = 0 then
		total_write = 0.0;
	     else total_write = (0.001 * fdelta) / float (write_sum);
	     total_io = read_sum + write_sum;
	     if total_io = 0.0 then
		total_io = 1.0e30;

	     device_total_io = device_read_sum + device_write_sum;
	     if device_total_io = 0.0 then
		device_total_io = 1.0e30;

	     if ^print_detail & print_drive then do;

		if pv_list.pv_info (drive_pv).is_sub_vol then
		     call print_sv (drive_pv);
		else do;
		     if dev = dp -> devtab.pdi then
			call ioa_ (
			     "^9a^va ^[^s^8x^;^8i^] ^[^s^8x^;^8i^]^[^s  Idle^;^6i^] ^[^s^8x^;^8i^] ^[^s^8x^;^8i^] ^[^s^;^8i^]",
			     pv_list.pv_info (drive_pv).drive_name, pv_name_max_space,
			     pv_list.pv_info (drive_pv).pvname, read_sum = 0, read_sum, write_sum = 0, write_sum,
			     total_io > 1.0e29, total_seek / total_io, total_read = 0.0, total_read,
			     total_write = 0.0, total_write, device_total_io > 1.0e29,
			     (0.001 * fdelta) / device_total_io);
		     else call ioa_ (
			     "^9a^va ^[^s^8x^;^8i^] ^[^s^8x^;^8i^]^[^s  Idle^;^6i^] ^[^s^8x^;^8i^] ^[^s^8x^;^8i^]",
			     pv_list.pv_info (buddy_pv).drive_name, pv_name_max_space,
			     pv_list.pv_info (buddy_pv).pvname, read_sum = 0, read_sum, write_sum = 0, write_sum,
			     total_io > 1.0e29, total_seek / total_io, total_read = 0.0, total_read,
			     total_write = 0.0, total_write);
		end;
	     end;


print_sv:
	     proc (pv_index);

dcl	pv_index		   fixed bin;
dcl	(sv_idx, f_sv_idx, l_sv_idx, lv_index)
			   fixed bin;

/**** find first subvol in pv_info for this dev */

		f_sv_idx = pv_index - (pv_list.pv_info (pv_index).sv_num);

/**** find last subvol in pv_info */

		l_sv_idx = f_sv_idx + (pv_list.pv_info (pv_index).num_of_sv - 1);

		do sv_idx = f_sv_idx to l_sv_idx;
		     lv_index = pv_list.pv_info (sv_idx).lvx;
		     if print_detail & print_drive then do;
			if pv_list.pv_info (sv_idx).used then
			     call ioa_$nnl (
				"^/^8a:^-PV-^va^-of LV-^va^[ PDIR^;^]^[^/           #Seeks AveSeek Queue-wait Channel-wait  Queued Multiplier^/^]",
				pv_list.pv_info (sv_idx).drive_name, pv_list.pv_name_max_length,
				pv_list.pv_info (sv_idx).pvname, lv_list.lv_name_max_length,
				lv_list.lv_info (lv_index).lvname, lv_list.lv_info (lv_index).pdirs_ok,
				(l_sv_idx = sv_idx));
			else call ioa_$nnl (
				"^/^8a:^-^3x^vx^-^6x^vx^[^/           #Seeks AveSeek Queue-wait Channel-wait  Queued Multiplier^/^]",
				pv_list.pv_info (sv_idx).drive_name, pv_list.pv_name_max_length,
				lv_list.lv_name_max_length, (l_sv_idx = sv_idx));
		     end;
		     else do;
			if (sv_idx ^= l_sv_idx) then do;
			     if pv_list.pv_info (sv_idx).used then
				call ioa_ ("^9a^va", pv_list.pv_info (sv_idx).drive_name, pv_name_max_space,
				     pv_list.pv_info (sv_idx).pvname);
			     else call ioa_ ("^9a", pv_list.pv_info (sv_idx).drive_name);
			end;
			else do;
			     call ioa_$nnl ("^9a^[^va^;^2s^vx^]", pv_list.pv_info (sv_idx).drive_name,
				pv_list.pv_info (sv_idx).used, pv_name_max_space, pv_list.pv_info (sv_idx).pvname,
				pv_name_max_space);
			     call ioa_ (
				" ^[^s^8x^;^8i^] ^[^s^8x^;^8i^]^[^s  Idle^;^6i^] ^[^s^8x^;^8i^] ^[^s^8x^;^8i^] ^[^s^;^8i^]",
				read_sum = 0, read_sum, write_sum = 0, write_sum, total_io > 1.0e29,
				total_seek / total_io, total_read = 0.0, total_read, total_write = 0.0,
				total_write, device_total_io > 1.0e29, (0.001 * fdelta) / device_total_io);
			end;
		     end;
		end;

/**** let the rest of print_dev print the last */

		pv_index = l_sv_idx;
	     end print_sv;

	end print_dev;

     end print_device;
%page;
print_q_stats:
     proc (drive_name, oqhtp, print);

/* pointer to qht is low area is passed, then the relative offset is correct
   for the other too. */

dcl	drive_name	   char (*);
dcl	oqhtp		   ptr;
dcl	print		   bit (1);

dcl	qhtp		   ptr;
dcl	1 q		   like qht based (qhtp);

	if ^print then
	     return;
	qhtp = addrel (disksp, rel (oqhtp));
	call ioa_ ("  ^a Queue: Ave ^5.1f,  Alloc ^i, Max Depth ^i/^i, Cur Depth ^i", drive_name,
	     float (q.sum - oqhtp -> q.sum) / (float (q.count - oqhtp -> q.count) + 1.0e-5), q.count - oqhtp -> q.count,
	     q.max_depth, disk_data.free_q_size, q.depth);
     end print_q_stats;
%page;
/* Print channel information. */

print_channel_info:
     proc;

/* pointer to disktab is low area is passed, then the relative
   offset is correct for the other too. */

dcl	ocp		   ptr;
dcl	headed		   bit (1);		/* header printed */
dcl	1 c		   like chantab based (ocp);

	if ^print_channels then
	     return;
	headed = "0"b;
	do i = 1 to disktab.nchan;
	     ocp = addr (addrel (odisksp, diskp -> disktab.channels) -> disk_channel_table (i));
	     cp = addr (addrel (disksp, diskp -> disktab.channels) -> disk_channel_table (i));

/* Determine if this channel is to be printed */

	     if cp -> c.connects - ocp -> c.connects > 0 | (cp -> c.ioi_use | cp -> c.inop | cp -> c.broken) then do;
		if ^headed then do;
		     call ioa_ ("^/  ^a Channel Information
               Term by  Interrupt   get_io  Term w/o
     Connects    RUN    w/o term   w/o term  Active   Status", subsys_name);
		     headed = "1"b;
		end;
		call ioa_ (
		     "^2x^3a^8i^1x^[^8i^;^s^8x^]^2x^[^9i^;^s^9x^]^2x^[^8i^;^s^8x^]^1x^[^8i^;^s^8x^] ^[ IOI^]^[ INOP^]^[ BROKEN^]",
		     cp -> chantab.chanid, cp -> c.connects - ocp -> c.connects,
		     cp -> c.status_from_run - ocp -> c.status_from_run > 0,
		     cp -> c.status_from_run - ocp -> c.status_from_run,
		     cp -> c.no_status_terminate - ocp -> c.no_status_terminate > 0,
		     cp -> c.no_status_terminate - ocp -> c.no_status_terminate,
		     cp -> c.no_io_terminate - ocp -> c.no_io_terminate > 0,
		     cp -> c.no_io_terminate - ocp -> c.no_io_terminate,
		     cp -> c.terminate_not_active - ocp -> c.terminate_not_active > 0,
		     cp -> c.terminate_not_active - ocp -> c.terminate_not_active, cp -> c.ioi_use = "1"b,
		     cp -> c.inop = "1"b, cp -> c.broken = "1"b);
	     end;
	end;
	call ioa_ ();
	return;
     end print_channel_info;
%page;
print_subsys_info:
     proc;


/* Process per-subsystem locking info. */

	call ioa_ ("^14t     Locks   Waits    %Calls  Average      %CPU");
	call print_lock ("Call Lock", addr (odiskp -> disktab.call_lock_meters));
	call print_lock ("Run Lock", addr (odiskp -> disktab.run_lock_meters));
	call print_lock ("Int Lock", addr (odiskp -> disktab.int_lock_meters));
	call print_lock ("Alloc Lock", addr (odiskp -> disktab.alloc_wait_meters));
	return;

print_lock:
	proc (lock_name, odlp);

/* pointer to disk_lock_meters is low area is passed, then the relative
   offset is correct for the other too. */

dcl	lock_name		   char (*);
dcl	odlp		   ptr;

dcl	dlp		   ptr;
dcl	lockings		   float bin (63);
dcl	waitings		   float bin (63);
dcl	1 l		   like disk_lock_meters based (dlp);

	     dlp = addrel (disksp, rel (odlp));
	     lockings = float (l.count - odlp -> l.count);
	     if lockings = 0.0 then
		return;
	     waitings = float (l.waits - odlp -> l.waits);
	     if waitings = 0.0 then
		waitings = 1.0;
	     call ioa_ ("  ^a:^14t^10i^8i ^8.4f% ^8.3f ^9.5f%", lock_name, l.count - odlp -> l.count,
		l.waits - odlp -> l.waits, 100.0 * float (l.waits - odlp -> l.waits) / lockings,
		0.001 * float (l.wait_time - odlp -> l.wait_time) / waitings,
		100.0 * float (l.wait_time - odlp -> l.wait_time) / fdelta);
	end print_lock;
     end print_subsys_info;
%page;
/* initialize argument processing. */

init_args:
     proc;

dcl	code		   fixed bin (35);

	arg_index = 1;
	call cu_$arg_count_rel (arg_count, arg_list_ptr, code);
	if code ^= 0 then
	     goto ERROR_RETURN;
	return;

/* Get next arguments.  Returns "0"b if failure. */

get_next_arg:
     entry returns (bit (1));

	if arg_index <= arg_count then do;
	     call cu_$arg_ptr_rel (arg_index, arg_ptr, arg_len, code, arg_list_ptr);
	     if code = 0 then do;
		arg_index = arg_index + 1;
		return ("1"b);			/* success */
	     end;
	end;
	return ("0"b);				/* no argument */

     end init_args;
%page;
%include get_vol_list_;
%include dskdcl;
     end disk_meters;
