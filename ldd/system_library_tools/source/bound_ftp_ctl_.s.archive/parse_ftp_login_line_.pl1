/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: style4 */
parse_ftp_login_line_: proc (lp, ll, ate_p, errarg, code);

/*   This routine is called by ftp_dialup_ to parse the USER command.  The strategy
   here is to not allow some of the control arguments a regular user could use
   and also to set certain values in the answer table to defaults for ftp users,
   and to set other ones using special ftp control arguments.

   Stolen from parse_login_line_ by Roy Planalp, 760819
   Last modified by D. M. Wells, Oct. 1976, to fix problem caused
   by using person.project form and including ctl args
   Modified November 1981, E. N. Kittlitz.  user_table_entry conversion.
   Modified January 1982, E. N. Kittlitz.  login_parse_ changes, as_data_ conversion.  */


/****^  HISTORY COMMENTS:
  1) change(87-04-26,GDixon), approve(87-08-03,MCR7741),
     audit(87-07-16,Brunelle), install(87-08-04,MR12.1-1055):
     Upgraded for change to answer_table.incl.pl1 and user_table_entry.incl.pl1
                                                   END HISTORY COMMENTS */


/* Contributors to original parse_login_line_:

   Modified 740807 by PG for -authorization and -change_default_authorization
   Modified 740913 by PG for -generate_password
   Modified 750429 by PG for new dial facility
   Modified 750714 by THVV for -modes and -terminal_type
   Modified 751024 by T. Casey for -subsystem.
   Modified 760601 by PG to handle pw masks properly.
*/

/* parameters */

dcl  lp ptr,					/* Pointer to input line buffer. */
     ll fixed bin,					/* Length of line. */
     ate_p ptr,					/* Pointer to answer table entry. */
     errarg char (*) aligned,				/* If an error occurs , what went wrong. */
     code fixed bin (35);				/* Error code. */

/* automatic */

dcl  i fixed bin;					/* temporary */
dcl  authorization bit (72) aligned;			/* binary authorization */
dcl  authorization_string char (150);			/* character representation of auth. */
dcl  j fixed bin;					/* Return from login_parse_: relative cursor */
dcl  jj fixed bin;					/* Absolute cursor */
dcl  arg char (24);					/* Single argument to login. */
dcl  prev_arg char (24);				/* Previous arg, for error message */
dcl  k fixed bin;					/* Length of argument. */
dcl  char64 char (64);				/* temporary */
dcl  npo bit (1);					/* user gave -no_process_overseer arg */

/* based */

dcl  ch (ll) char (1) unal based (lp);			/* Image of buffer */

/* internal static initial */

dcl  (true bit (1) aligned init ("1"b),
     false bit (1) aligned init ("0"b)
     ) internal static options (constant);

/* entries */

dcl  convert_authorization_$from_string entry (bit (72) aligned, char (*), fixed bin (35));
dcl  login_parse_ entry (ptr, fixed bin, char (*), fixed bin, fixed bin, fixed bin (35));
dcl  cv_dec_check_ entry (char (*), fixed bin (35)) returns (fixed bin (35));

/* external static */

dcl  as_error_table_$no_login_arg_msg fixed bin (35) ext static;
dcl  as_error_table_$bad_login_arg_msg fixed bin (35) ext static;
dcl  as_error_table_$long_ip_ss_args fixed bin (35) ext static;
dcl  error_table_$bad_arg fixed bin (35) ext static;
dcl  error_table_$noarg fixed bin (35) ext static;

dcl  1 ftp_misc_$ftp_login_responder aligned external static,
       2 pathlen fixed bin (35),			/* no. chars in path */
       2 overseer char (168) aligned;			/* the path */


dcl  1 as_data_$login_args ext aligned,
     2 n_login_args fixed bin (35),
     2 pad fixed bin (35),
     2 login_args (38) char (24);

dcl  as_data_$max_user_ring fixed bin (35) ext;

/* builtins */

dcl  (addr, hbound, index, null, substr) builtin;
%page;
/* ================================================== */

	code = 0;					/* Assume no error will happen. */
	utep = ate_p;				/* Copy argument */

	ute.login_flags.auth_given = "0"b;		/* whether -auth was specified */
	ute.at.bumping = "1"b;			/* Default is bumping ON, unless -np */
	ute.login_code = "login";			/* dft login word */
	npo = false;				/* dft user gets ftp_server initproc */
	ute.at.brief = true;			/* and no login messages */

	char64 = "";
	call login_parse_ (lp, ll, char64, k, j, code);	/* Get person ID */
	if code ^= 0 then				/* Personid must be given */
	     return;
	if k > 32 then do;
	     code = error_table_$bad_arg;		/* bad syntax */
	     return;
	end;

	jj = index (substr (char64, 1, j), ".");
	if jj = 0 then do;
	     ute.person = substr (char64, 1, j);
	end;
	else do;
	     ute.person = substr (char64, 1, jj - 1);
	     ute.project = substr (char64, jj + 1, j - jj);
	end;

	if ute.person = "NETML" then npo = true;	/* special kludge for netmail (his dft initproc works for ftp) */

	jj = 0;

	arg = "";					/* set up for prev_arg */
nxarg:	jj = jj + j;				/* Advance cursor. */
	prev_arg = arg;
	call login_parse_ (addr (ch (jj)), ll - jj + 1, arg, k, j, code); /* Pick off next argument. */
	if code = error_table_$noarg then do;
	     code = 0;
	     go to exit;				/* use defaults */
	end;
	if substr (arg, 1, 1) ^= "-" then go to badarg;	/* Not a control arg */
	do k = 1 to as_data_$login_args.n_login_args while
	     (arg ^= as_data_$login_args.login_args (k)); end; /* Look up argument in table. */
	if k > as_data_$login_args.n_login_args				/* Fuss if unknown argument. */
	then if arg = "-word"			/* special ftp arg */
	     then go to word_handler;
	     else if arg = "-no_process_overseer" | arg = "-npo" /* .. */
	     then go to npo_handler;
	     else do;
badarg:		code = as_error_table_$bad_login_arg_msg; /* Return error to ftp_dialup_ */
		errarg = arg;			/* Tell user what we barf on */
		return;
	     end;

	if k > hbound (arg_handler, 1) then go to badarg; /* as_data_ is newer than we are! */
	go to arg_handler (k);			/* Dispatch on argument. */

arg_handler (3):					/* -hd */
arg_handler (4):					/* -home_dir */
	jj = jj + j;				/* Advance parse pointer. */
	call login_parse_ (addr (ch (jj)), ll - jj + 1, ute.home_dir, k, j, code);
	if code ^= 0 then go to lp_error;
	if substr (ute.home_dir, 1, 1) ^= ">" then go to badarg; /* Must be absolute path. */
	go to nxarg;
arg_handler (5):					/* -po */
arg_handler (6):					/* -process_overseer */
	jj = jj + j;
	call login_parse_ (addr (ch (jj)), ll - jj + 1, char64, i, j, code);
	if code ^= 0 then go to lp_error;
	if ute.uflags.ss_given then do;		/* if -subsystem given already, save it */
	     authorization_string = substr (ute.init_proc, ute.ip_len + 1, ute.ss_len); /* borrow a vacant string */

	     if i + ute.ss_len > 64 then do;		/* if sum of both strings too long */
		code = as_error_table_$long_ip_ss_args;
		errarg = char64;
		return;				/* let user try again */
	     end;
	end;

	substr (ute.init_proc, 1, i) = substr (char64, 1, i);
	ute.ip_len = i;
	ute.uflags.ip_given = "1"b;
	npo = true;
	if ute.uflags.ss_given then			/* if -ss was already given, put it back at end of string */
	     substr (ute.init_proc, i + 1, ute.ss_len) = substr (authorization_string, 1, ute.ss_len);
	go to nxarg;
arg_handler (11):					/* -nw */
arg_handler (12):					/* -no_warning */
	ute.at.no_warning = true;
	ute.ur_at.no_warning = true;
	go to nxarg;
arg_handler (13):					/* -np */
arg_handler (14):					/* -no_preempt */
	ute.at.bumping = false;
	ute.ur_at.bumping = true;
	go to nxarg;
arg_handler (15):					/* -force */
	ute.at.guaranteed_login = true;
	ute.ur_at.guaranteed_login = true;
	go to nxarg;
arg_handler (37):					/* -rg */
arg_handler (38):					/* -ring */
	jj = jj + j;
	call login_parse_ (addr (ch (jj)), ll - jj + 1, arg, k, j, code);
	if code ^= 0 then go to lp_error;
	ute.initial_ring = cv_dec_check_ (arg, code);	/* Convert ring to integer. */
	if code ^= 0 then go to badarg;		/* Check value. */
	if ute.initial_ring <= 0 then go to badarg;	/* Aw, c'mon. */
	if ute.initial_ring > as_data_$max_user_ring then go to badarg;
	go to nxarg;
arg_handler (25):					/* -om */
arg_handler (26):					/* -outer_module */
	jj = jj + j;
	call login_parse_ (addr (ch (jj)), ll - jj + 1, ute.outer_module, k, j, code);
	if code ^= 0 then go to lp_error;
	go to nxarg;

arg_handler (27):					/* -auth */
arg_handler (28):					/* -authorization */
	jj = jj + j;
	call login_parse_ (addr (ch (jj)), ll - jj + 1, authorization_string, k, j, code);
	if code ^= 0 then go to lp_error;
	call convert_authorization_$from_string (authorization, (authorization_string), code);
	if code ^= 0
	then do;
	     errarg = "";
	     return;
	end;

	ute.login_flags.auth_given = true;
	ute.process_authorization = authorization;
	go to nxarg;

arg_handler (1):					/* -bf */
arg_handler (2):					/* -brief */
arg_handler (7):					/* -npf */
arg_handler (8):					/* -no_print_off */
arg_handler (9):					/* -pf */
arg_handler (10):					/* -print_off */
arg_handler (19):					/* -ns */
arg_handler (20):					/* -no_start_up */
arg_handler (21):					/* -cpw */
arg_handler (22):					/* -change_password */
arg_handler (23):					/* -cdp */
arg_handler (24):					/* -change_default_project */
arg_handler (29):					/* -cda */
arg_handler (30):					/* -change_default_auth */

arg_handler (31):					/* -gpw */
arg_handler (32):					/* -generate_password */

arg_handler (33):					/* -ttp */
arg_handler (34):					/* -terminal_type */

arg_handler (16):					/* -md */
arg_handler (17):					/* -mode */
arg_handler (18):					/* -modes */
	go to badarg;

arg_handler (35):					/* -ss */
arg_handler (36):					/* -subsystem */
	jj = jj + j;
	call login_parse_ (addr (ch (jj)), ll - jj + 1, char64, i, j, code);
	if code ^= 0 then go to lp_error;
	if i + ute.ip_len > 64 then do;		/* -ss arg and -po arg add up to > 64 chars */
	     code = as_error_table_$long_ip_ss_args;
	     errarg = char64;
	     return;				/* let user try again */
	end;
	substr (ute.init_proc, ute.ip_len + 1, i) = substr (char64, 1, i); /* copy subsystem in after initproc */
	ute.ss_len = i;				/* remember its length */
	ute.uflags.ss_given = "1"b;			/* and remember that it was given */
	goto nxarg;

npo_handler:
	npo = true;
	go to nxarg;

word_handler:
	jj = jj + j;
	call login_parse_ (addr (ch (jj)), ll - jj + 1, ute.login_code, k, j, code);
	if code ^= 0 then go to lp_error;
	go to nxarg;

lp_error: if code = error_table_$noarg then do;
	     code = as_error_table_$no_login_arg_msg;
	     errarg = prev_arg;
	end;
	else errarg = arg;				/* most likely blanks */
	return;					/* return with error */

/* Come here when we run out of arguments. */

exit:
	if ^npo
	then do;					/* note that we don't yet handle case of this po and specified ss */
	     ute.init_proc = substr (ftp_misc_$ftp_login_responder.overseer, 1,
		ftp_misc_$ftp_login_responder.pathlen); /* ftp users have special default initproc */
	     ute.uflags.ip_given = "1"b;
	     ute.ip_len = ftp_misc_$ftp_login_responder.pathlen;
	end;
%page; %include answer_table;
%page; %include user_attributes;
%page; %include user_table_entry;
%page; %include user_table_header;

     end parse_ftp_login_line_;
