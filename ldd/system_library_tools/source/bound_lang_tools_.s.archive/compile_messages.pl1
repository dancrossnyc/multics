/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */





/****^  HISTORY COMMENTS:
  1) change(87-06-01,Huen), approve(87-06-01,MCR7696), audit(87-06-17,RWaters),
     install(87-12-01,MR12.2-1005):
     Fix bug 2173: If incorrect number of argument is supplied when invoking
     "compile_messages", a usage message is printed.
                                                   END HISTORY COMMENTS */


compile_messages:	proc;

/* Modified: 29 Apr 1987 by SH to fix bug 2173 - A usage message should
                         be printed when invoking this procedure with
                         incorrect number of argument.
*/

/* Apr29,1987.  This procedure is rewritten so that it accepts any valid
pathname (such as the pathname of the source segment or archive segment).
In addition, the ".message" suffix is added by default if the user does
not supply it. */

/* This procedure accepts a pathname of a "source" segment as an argument.
The source segment which is suffixed by ".message" containing messages
to be reformatted is initialised.  An object segment with the name
object_name is created in the user's working directory and the reformatted
messages are placed into it. */

dcl       my_name char(16) int static options(constant) init("compile_messages");
dcl	arg char(arg_len) based(arg_ptr);
dcl	arg_count fixed bin;
dcl	arg_len fixed bin(21);
dcl	arg_ptr ptr;
dcl	code fixed bin(35);
dcl	dir char(512);
dcl	(entry, comp) char(33);	/* 33 to force trailing blank */
dcl	(object_bc, source_bc) fixed bin(24);
dcl	object_name char(32);
dcl	(source_ptr, obj_ptr, aclinfo) ptr;
dcl	w_dir_path char(168);

dcl	(before, null) builtin;
dcl	cleanup condition;

dcl	build_message_segment external entry (ptr, ptr, fixed bin(24));
dcl	com_err_ external entry options(variable);
dcl	cu_$arg_count entry(fixed bin, fixed bin(35));
dcl	cu_$arg_ptr entry(fixed bin, ptr, fixed bin(21), fixed bin(35));
dcl	expand_pathname_$component_add_suffix entry(char(*), char(*), char(*), char(*), char(*), fixed bin(35));
dcl	get_wdir_ entry() returns(char(168) aligned);
dcl	initiate_file_$component entry(char(*), char(*), char(*), bit(*), ptr, fixed bin(24), fixed bin(35));
dcl	terminate_file_ entry(ptr, fixed bin(24), bit(*), fixed bin(35));
dcl	tssi_$clean_up_segment entry(ptr);
dcl	tssi_$finish_segment entry(ptr, fixed bin(24), bit(36) aligned, ptr, fixed bin(35));
dcl	tssi_$get_segment entry(char(*), char(*), ptr, ptr, fixed bin(35));

	source_ptr, obj_ptr, aclinfo = null();
	call cu_$arg_count(arg_count, code);
	if code ^= 0 then call error("");
	if arg_count ^= 1 then call error("^/Usage: compile_messages <pathname>");

	call cu_$arg_ptr(1, arg_ptr, arg_len, code);
	if code ^= 0 then call error("");

	call expand_pathname_$component_add_suffix(arg, "message", dir, entry, comp, code);
	if code ^= 0 then call error(arg);

on	cleanup begin;
	     if source_ptr ^= null() then call terminate_file_(source_ptr, 0, "001"b, 0);
	     if aclinfo ^= null() then call tssi_$clean_up_segment(aclinfo);
	  end;

	call initiate_file_$component(dir, entry, comp, "100"b, source_ptr, source_bc, code);
	if code ^= 0 then call error(arg);

	/* Get pathname for current working directory. */

	w_dir_path = get_wdir_();
	if comp = "" then object_name = before(entry, ".message ");
	             else object_name = before(comp, ".message ");

	/* Create an object segment with name object_name and get a pointer to it. */

	call tssi_$get_segment(w_dir_path, object_name, obj_ptr, aclinfo, code);
	if code ^= 0 then call error(object_name);

	/* Reformat messages. */

	call build_message_segment(source_ptr, obj_ptr, object_bc);

	/* Wrap up by setting bit count and access control information
	on the new object segment and terminating the source segment. */

	call tssi_$finish_segment(obj_ptr, object_bc, "1100"b, aclinfo, code);
	if code ^= 0 then call error(object_name);

	call terminate_file_(source_ptr, 0, "001"b, code);
	if code ^= 0 then call error(arg);


error:	proc(str);
dcl	str char(*);

	call com_err_(code, my_name, str);
	goto abort;
end error;

abort:	return;
end compile_messages;
