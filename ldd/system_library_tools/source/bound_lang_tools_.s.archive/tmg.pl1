/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


table:
tmg:	proc(name);

dcl	name char(*);

dcl	(in_pos,in_length,ll,out_pos,line_no,unique,
	 code,n,m,i,j) fixed bin,
	(input_pt,output_pt,output_hold) ptr,
	had_if bit(1),
	first_time bit(1) int static init("1"b),
	c char(1),
	(vf,vg,sourcename,outputname) char(32) varying,
	what char(8),
	op_code char(12) varying,
	line char(132) varying,
	ent char(32),
	(temppath,dir,wdir) char(168);

dcl	sw(16) label local int static;

dcl	(addr,divide,index,length,null,substr) builtin;

dcl	n_special fixed bin int static init(16),
	special(16) char(8) init("if","ifnot","flipto","jump","put",
	 "fetch","get_fx2","compile","cplalt","cplsave","load","add",
	 "switch","erase","bump","drop") int static;

dcl	n_tests fixed bin int static init(11),
	test(11) char(4) init("q2","q3","a2","a3","c2","c3","z2","z3",
	 "atm2", "atm3", "atm4") int static;

dcl	n_switches fixed bin int static init(5),
	switches(5) char(8) init("code","op","type1","type2","type3") int static;

dcl	(com_err_,ioa_,ioa_$rsnp,ioa_$rsnpnnl) entry options(variable),
	hcs_$initiate_count entry(char(*),char(*),char(*),fixed bin,
	 fixed bin,ptr,fixed bin),
	expand_path_ entry(ptr,fixed bin,ptr,ptr,fixed bin),
	get_wdir_ entry() returns(char(168)),
	tssi_$get_segment entry(char(*),char(*),ptr,ptr,fixed bin),
	tssi_$finish_segment entry(ptr,fixed bin(24),bit(36) aligned,ptr,fixed bin);

dcl (	nl	init("
"),
	quote	init(""""),
	star	init("*"),
	tab	init("	"),
	colon	init(":")) char(1) int static;

dcl	my_name char(3) int static init("tmg");

dcl	input char(in_length) aligned based(input_pt);

dcl	output char(262144) aligned based(output_pt);

dcl	1 output_structure aligned based(output_pt),
	2 skip		unaligned char(out_pos - 1),
	2 output_line	unaligned char(132);

	if first_time
	then do;
	     sw(1) = if;
	     sw(2) = ifnot;
	     sw(3) = flipto;
	     sw(4) = jump;
	     sw(5) = put;
	     sw(6) = fetch;
	     sw(7) = get_fx2;
	     sw(8) = compile;
	     sw(9) = cplalt;
	     sw(10) = cplsave;
	     sw(11) = load;
	     sw(12) = add;
	     sw(13) = switch;
	     sw(14) = erase;
	     sw(15) = bump;
	     sw(16) = drop;
	     first_time = "0"b;
	     end;

	temppath = name;
	call expand_path_(addr(temppath),length(name),addr(dir),addr(ent),code);

	if code ^= 0
	then do;
	     call com_err_(code,my_name,temppath);
	     return;
	     end;

	n = index(ent," ");
	if n = 0 then n = 33;
	n = n - 1;

	sourcename = substr(ent,1,n) || ".table";
	outputname = substr(ent,1,n) || ".alm";

	call hcs_$initiate_count(dir,(sourcename),"",in_length,1,input_pt,code);

	if input_pt = null
	then do;
	     call com_err_(code,my_name,sourcename);
	     return;
	     end;

	if in_length = 0
	then do;
	     call com_err_(0,my_name,"Zero length input.");
	     return;
	     end;

	wdir = get_wdir_();
	call tssi_$get_segment(wdir,(outputname),output_pt,output_hold,code);

	if code ^= 0
	then do;
out_err:	     call com_err_(code,my_name,outputname);
	     return;
	     end;

	in_length = divide(in_length,9,17,0);
	in_pos, out_pos, unique = 1;
	line_no = 0;
	had_if = "0"b;

find_nl:	if in_pos >= in_length then goto done;

	ll = index(substr(input,in_pos),nl);

	if ll = 0 then goto done;
	line_no = line_no + 1;

	if ll = 1
	then do;
	     in_pos = in_pos + 1;
put_nl:	     substr(output,out_pos,1) = nl;
	     out_pos = out_pos + 1;
	     goto find_nl;
	     end;

	line = substr(input,in_pos,ll);
	in_pos = in_pos + ll;

	c = substr(line,1,1);

	if c = quote
	then do;
put_line:	     substr(output,out_pos,length(line)) = line;
	     out_pos = out_pos + length(line);
	     goto find_nl;
	     end;

	if c = star
	then do;

	     if ll = 3
	     then if substr(line,2,1) ^= star then goto star_err;
		else do;
		     call ioa_$rsnp("^-zero^-0,128",output_line,n);
		     out_pos = out_pos + n;
		     goto put_lab;
		     end;

	     if ll = 2
	     then do;
put_lab:		if had_if
		then do;
		     call ioa_$rsnpnnl("L^d:",output_line,n,unique);
		     out_pos = out_pos + n;
		     unique = unique + 1;
		     had_if = "0"b;
		     end;

		goto find_nl;
		end;

star_err:	     call com_err_(0,my_name,"Illegal use of ""*"" in line # ^d:^/^a",line_no,line);
	     goto find_nl;
	     end;

	/* check for labels */

labels:	n = index(line,colon);

	if n ^= 0
	then do;
	     substr(output,out_pos,n) = substr(line,1,n);
	     out_pos = out_pos + n;

	     if n = length(line)-1 then goto put_nl;

	     line = substr(line,n+1);
	     goto labels;
	     end;

	/* having eliminated all labels, the first character
	   on the line should now be a tab */

	if substr(line,1,1) ^= tab
	then do;
err:	     call com_err_(0,my_name,"Syntax error in line # ^d:^/^a",line_no,line);
	     goto find_nl;
	     end;

	/* pickup op code */

	n = index(substr(line,2),tab);
	if n = 0 then n = length(line) - 1;

	op_code = substr(line,2,n-1);

	/* check for one of our special pseudo-ops */

	do i = 1 to n_special;
	     if op_code = special(i) then goto found;
	     end;

	/* not special op code */

	goto put_line;

	/* have pseudo-op, get variable field */

found:	if n >= length(line) - 1 then vf = "";
	else do;
	     m = index(substr(line,n+2),tab);
	     if m = 0 then m = length(line)-n-1;
	     vf = substr(line,n+2,m-1);
	     end;

	goto sw(i);

	/* conditional, check to make sure vf specifies legal test */

if:
ifnot:	do j = 1 to n_tests;
	     if vf = test(j) then goto if_ok;
	     end;

	what = "Test";

err2:	call com_err_(0,my_name,"^a ""^a"" not known, ""^a"" on line # ^d:^/^a",what,vf,op_code,
	 line_no,line);
	goto find_nl;

if_ok:	call ioa_$rsnpnnl("^-vfd^-18/L^d,9/^d,9/128+^d^a",output_line,n,unique,i,j,line);
	had_if = "1"b;
	goto inc;

	/* switch, extract code from variable field */

switch:	n = index(vf,",");
	if n = 0
	then do;
	     call com_err_(0,my_name,"Variable field error, switch on line # ^d:^/^a",line_no,line);
	     goto find_nl;
	     end;

	vg = substr(vf,n+1);

	do j = 1 to n_switches;
	     if vg = switches(j) then goto switch_ok;
	     end;

	what = "Switch";
	vf = vg;
	goto err2;

switch_ok:
	call ioa_$rsnpnnl("^-vfd^-18/^a,9/13,9/128+^d^a",output_line,n,substr(vf,1,n-1),
	 j,line);
	goto inc;

drop:
bump:
erase:
flipto:
jump:
put:
fetch:
get_fx2:
compile:
cplalt:
cplsave:
load:
add:	call ioa_$rsnpnnl("^-vfd^-18/^a,9/^d,9/128^a",output_line,n,vf,i,line);
inc:	out_pos = out_pos + n;
	goto find_nl;

done:	call tssi_$finish_segment(output_pt,out_pos*9 - 9,"1010"b,output_hold,code);

	if code ^= 0 then goto out_err;
	end;
