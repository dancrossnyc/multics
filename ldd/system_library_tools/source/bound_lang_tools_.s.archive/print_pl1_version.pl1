/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* A tool to print pl1_version information in bound_pl1_ */

print_pl1_version:
	procedure;

/* Written:  12 Dec 1979 by Peter Krupp */

/* external entries */

dcl  ioa_ entry options(variable);
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  cu_$arg_count entry() returns (fixed bin);
dcl  expand_pathname_ entry (char (*), char (*), char (*), fixed bin (35));
dcl  com_err_ entry options (variable);
dcl  com_err_$suppress_name entry options(variable);
dcl  hcs_$initiate entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr, fixed bin (35));
dcl  component_info_$name entry (ptr, char(32), ptr, fixed bin(35));
dcl  hcs_$terminate_noname entry (ptr, fixed bin(35));

/* automatic */

dcl  path_arg_length fixed bin;
dcl  path_arg_ptr ptr;
dcl  object_dir char(168);
dcl  object_entry char(32);
dcl  nargs fixed bin;
dcl  code fixed bin(35);
dcl  null_ref_name char(0);
dcl  bound_seg_ptr ptr init(null());
dcl  area_ret_ptr ptr;
dcl  call_terminate bit(1) aligned initial("0"b);

/* internal static */

dcl (my_name char(17) initial("print_pl1_version"),
     path_arg_no fixed bin init(1),
     copy_sw fixed bin(2) init(0),
     seg_sw fixed bin(1) init(0),
     component_name char(32) init("pl1_version")) int static options(constant);

/* based */

dcl  path_arg char(path_arg_length) based(path_arg_ptr);
dcl  1 pl1_version_struc based,
	2 pl1_version char(256) var,
	2 pl1_release char(3) var;

/* builtin */

dcl  (addr,null) builtin;

/* condition */

dcl  cleanup condition;

/* include files */

%include component_info;

/* program */

	on cleanup
	begin;
	     if call_terminate & bound_seg_ptr ^= null()
	     then call hcs_$terminate_noname(bound_seg_ptr,code);
	end;


/* Determine number of arguments in command invocation */

	nargs = cu_$arg_count();
	if nargs ^= 1
	then do;
		call com_err_$suppress_name(0,my_name,"Usage: print_pl1_version <path>");
		return;
	     end;

/* Get the pathname and validate it */

	call cu_$arg_ptr(path_arg_no,path_arg_ptr,path_arg_length,code);
	call expand_pathname_(path_arg,object_dir,object_entry,code);
	if code ^= 0
	then go to ERROR;

/* Get pointer to segment and component */

	call_terminate = "1"b;
	call hcs_$initiate(object_dir,object_entry,null_ref_name,seg_sw,copy_sw,bound_seg_ptr,code);

	if bound_seg_ptr = null()
	then go to ERROR;

	ci.dcl_version = 1;
	call component_info_$name(bound_seg_ptr,component_name,addr(ci),code);
	if code ^= 0
	then go to ERROR;

/* Print the version information */

	call ioa_("^a: pl1_version=""^a""",my_name,ci.text_start -> pl1_version);
	call ioa_("^a: pl1_release=""^a""",my_name,ci.text_start -> pl1_release);

/* Terminate the segment */

	call hcs_$terminate_noname(bound_seg_ptr,code);
	return;

/* Error exit: print a message and quit */

ERROR:
	call com_err_(code,my_name);

	if call_terminate
	then call hcs_$terminate_noname(bound_seg_ptr,code);

	return;

	end /* print_pl1_version */;
