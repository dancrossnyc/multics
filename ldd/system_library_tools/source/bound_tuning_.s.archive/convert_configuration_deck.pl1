/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   *********************************************************** */
convert_configuration_deck: proc;

/* Program to use config_deck_parse_ to convert an ascii source form of config 
deck to binary.  This would be done mostly to test the source for errors.  It
also allows for a compare_configuration_deck against a binary deck.
Keith Loepere, February 1984. */

/* format: style4,indattr,ifthenstmt,ifthen,idind33,^indcomtxt */

dcl  NL			        char (1) static options (constant) init ("
");
dcl  addr			        builtin;
dcl  arg			        char (arg_len) based (arg_ptr);
dcl  arg_count		        fixed bin;
dcl  arg_len		        fixed bin (21);
dcl  arg_ptr		        ptr;
dcl  ascii_config_card	        char (256) var;
dcl  ascii_ptr		        ptr;		/* to ascii input file */
dcl  bit_count		        fixed bin (24);	/* of ascii file */
dcl  card_len		        fixed bin (21);	/* length of text in card (minus nl) */
dcl  cleanup		        condition;
dcl  code			        fixed bin (35);
dcl  com_err_		        entry () options (variable);
dcl  config_deck_parse_$ascii_to_binary entry (char (256) var, ptr, fixed bin);
dcl  cu_$arg_count		        entry (fixed bin, fixed bin (35));
dcl  cu_$arg_ptr		        entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl  divide		        builtin;
dcl  entryname		        char (32);		/* with equals in it */
dcl  expand_pathname_	        entry (char (*), char (*), char (*), fixed bin (35));
dcl  expand_pathname_$component       entry (char (*), char (*), char (*), char (*), fixed bin (35));
dcl  file			        char (file_lth) based (ascii_ptr); /* ascii input file */
dcl  file_lth		        fixed bin (21);
dcl  file_pos		        fixed bin (21);	/* starting pos in file for this new line */
dcl  get_equal_name_	        entry (char (*), char (*), char (32), fixed bin (35));
dcl  index		        builtin;
dcl  input_card_num		        fixed bin;		/* input line num */
dcl  initiate_file_$create	        entry (char (*), char (*), bit (*), ptr, bit (1) aligned, fixed bin (24), fixed bin (35));
dcl  initiate_file_$component	        entry (char (*), char (*), char (*), bit (*), ptr, fixed bin (24), fixed bin (35));
dcl  me			        char (26) static options (constant) init ("convert_configuration_deck");
dcl  null			        builtin;
dcl  output_card_num	        fixed bin;		/* index into config deck */
dcl  s_componentname	        char (32);
dcl  s_dirname		        char (168);
dcl  s_entryname		        char (32);
dcl  size			        builtin;
dcl  substr		        builtin;
dcl  t_dirname		        char (168);
dcl  t_entryname		        char (32);
dcl  terminate_file_	        entry (ptr, fixed bin (24), bit (*), fixed bin (35));
%page;
	call cu_$arg_count (arg_count, code);
	if code ^= 0 | arg_count ^= 2 then do;
	     call com_err_ (code, me, "Usage: convert_configuration_deck ascii_file binary_file");
	     return;
	end;
	ascii_ptr = null;
	configp = null;
	on cleanup call clean_up;

	call cu_$arg_ptr (1, arg_ptr, arg_len, code);	/* find ascii source */
	call expand_pathname_$component (arg, s_dirname, s_entryname, s_componentname, code);
	if code ^= 0 then go to error;
	call initiate_file_$component (s_dirname, s_entryname, s_componentname, R_ACCESS, ascii_ptr, bit_count, code);
	if ascii_ptr = null then go to error;
	file_lth = divide (bit_count + 8, 9, 21);

	call cu_$arg_ptr (2, arg_ptr, arg_len, code);	/* find binary output seg */
	call expand_pathname_ (arg, t_dirname, entryname, code);
	if code ^= 0 then go to error;
	call get_equal_name_ (s_entryname, entryname, t_entryname, code);
	if code ^= 0 then go to error;
	call initiate_file_$create (t_dirname, t_entryname, RW_ACCESS, configp, ("0"b), (0), code);
	if configp = null then go to error;
%page;
	config_max_cards, config_n_cards = 256;
	input_card_num, output_card_num = 0;
	file_pos = 1;
	do while (file_pos <= file_lth);
	     input_card_num = input_card_num + 1;
	     card_len = index (substr (file, file_pos), NL);
	     if card_len = 0 then card_len = file_lth - file_pos + 1;
	     else card_len = card_len - 1;
	     ascii_config_card = substr (file, file_pos, card_len);
	     file_pos = file_pos + card_len + 1;
	     if card_len > 0 then do;
		output_card_num = output_card_num + 1;
		cardp = addr (config_deck.cards (output_card_num));
		call config_deck_parse_$ascii_to_binary (ascii_config_card, cardp, input_card_num);
	     end;
	end;
	do output_card_num = output_card_num + 1 to config_max_cards; /* blank out rest of deck */
	     config_deck.cards (output_card_num).word = FREE_CARD_WORD;
	end;

/*	call total_config_deck_check;  */

	call clean_up;
	return;

error:	call com_err_ (code, me, "^a", arg);
	call clean_up;
	return;
%page;
clean_up: proc;

	if configp ^= null then call terminate_file_ (configp, 36 * size (config_deck), TERM_FILE_BC | TERM_FILE_TERM, code);
	if ascii_ptr ^= null then call terminate_file_ (ascii_ptr, 0, TERM_FILE_TERM, code);
	return;
     end;
%page; %include access_mode_values;
%page; %include config_deck;
%page; %include terminate_file;
     end;
