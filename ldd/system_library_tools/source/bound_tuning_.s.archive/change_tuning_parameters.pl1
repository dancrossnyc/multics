/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


change_tuning_parameters:
change_tuning_parameter:
ctp:

	procedure () options (variable);

/* Completely rewritten, for hc_tune, 27 June 1981, W. Olin Sibert */

dcl  argno fixed bin;
dcl  nargs fixed bin;
dcl  al fixed bin (21);
dcl  ap pointer;
dcl  arg char (al) based (ap);
dcl  code fixed bin (35);

dcl  tp_type fixed bin;
dcl  tp_value bit (36) aligned;
dcl  tp_name char (32);

dcl  have_name bit (1) aligned;
dcl  silent_sw bit (1) aligned;
dcl  gate_name char (32);
dcl  set_entry variable entry (char (*), bit (36) aligned, bit (36) aligned, pointer, char (*), fixed bin (35));
dcl  requested_value char (64);
dcl  answer char (4) varying;

dcl  com_err_ entry options (variable);
dcl  command_query_ entry options (variable);
dcl  cu_$arg_count entry (fixed bin, fixed bin (35));
dcl  cu_$arg_ptr entry (fixed bin, pointer, fixed bin (21), fixed bin (35));
dcl  cv_dec_check_ entry (char (*), fixed bin (35)) returns (fixed bin (35));
dcl  cv_float_ entry (char (*), fixed bin (35)) returns (float bin (27));
dcl  cv_oct_check_ entry (char (*), fixed bin (35)) returns (fixed bin (35));
dcl  metering_gate_$get_tuning_parameter entry
    (char (*), fixed bin, bit (36) aligned, pointer, char (*), char (*), fixed bin (35));
dcl  hphcs_$set_tuning_parameter entry
    (char (*), bit (36) aligned, bit (36) aligned, pointer, char (*), fixed bin (35));
dcl  initializer_gate_$set_tuning_parameter entry
    (char (*), bit (36) aligned, bit (36) aligned, pointer, char (*), fixed bin (35));

dcl  error_table_$badopt fixed bin (35) external static;
dcl  error_table_$noarg fixed bin (35) external static;
dcl  error_table_$odd_no_of_args fixed bin (35) external static;

dcl  WHOAMI char (32) internal static options (constant) init ("change_tuning_parameters");

dcl  linkage_error condition;

dcl (addr, bit, char, decimal, float, length, maxlength, null, round, rtrim, unspec) builtin;

/*  */

	call cu_$arg_count (nargs, code);
	if code ^= 0 then do;
	     call com_err_ (code, WHOAMI);
MAIN_RETURN:   return;
	     end;

	silent_sw = "0"b;
	have_name = "0"b;

	do argno = 1 to nargs;
	     call cu_$arg_ptr (argno, ap, al, (0));

	     if (arg = "-silent") then silent_sw = "1"b;

	     else if (char (arg, 1) = "-") then do;
		call com_err_ (error_table_$badopt, WHOAMI, "^a", arg);
		goto MAIN_RETURN;
		end;

	     else do;
		if argno = nargs then do;
		     call com_err_ (error_table_$odd_no_of_args, WHOAMI, "Value missing after ^a", arg);
		     goto MAIN_RETURN;
		     end;

		argno = argno + 1;			     /* Skip value argument */
		have_name = "1"b;
		end;
	     end;

	if ^have_name then do;
	     call com_err_ (error_table_$noarg, WHOAMI,
		"^/Usage:^-^a Name1 Value1 {... NameN ValueN} {-control_args}", WHOAMI);
	     goto MAIN_RETURN;
	     end;


/* Now, see if we have all the access we will need to accomplish this operation */

	if silent_sw then gate_name = "initializer_gate_"; /* Print the right name */
	else gate_name = "hphcs_";

	on condition (linkage_error) begin;
	     call com_err_ (0, WHOAMI, "This procedure requires access to metering_gate_ and ^a.", gate_name);
	     goto MAIN_RETURN;
	     end;

	if silent_sw then set_entry = initializer_gate_$set_tuning_parameter;
	else set_entry = hphcs_$set_tuning_parameter;

	call metering_gate_$get_tuning_parameter ("tefirst", (0), (""b), (null ()), (""), (""), (0));
						/* This call is just to see if we have access */
	revert condition (linkage_error);


/* Finally, loop through and make all the requested changes */

	do argno = 1 to nargs;
	     call cu_$arg_ptr (argno, ap, al, (0));
	     if char (arg, 1) = "-" then goto SKIP_THIS_ARGUMENT;

	     tp_name = arg;
	     call metering_gate_$get_tuning_parameter (tp_name, tp_type, tp_value, (null ()), tp_name, (""), code);
	     if code ^= 0 then do;
		call com_err_ (code, WHOAMI, "^a", arg);
		argno = argno + 1;			/* Skip over new value */
		goto SKIP_THIS_ARGUMENT;
		end;

	     argno = argno + 1;			/* This is guaranteed to work, tested above */
	     call cu_$arg_ptr (argno, ap, al, (0));
	     requested_value = arg;

	     call change ();			/* Convert the argument, and try to change */

SKIP_THIS_ARGUMENT:
	     end;

	return;					/* End of main procedure */

/*  */

change: procedure ();

/* This procedure sets the parameter to the new value, appropriately converted */

dcl  char_value char (4) aligned;
dcl  scaled_value fixed bin (35, 18);
dcl  binary_value fixed bin (35);
dcl  float_value float bin (27);

dcl  new_value bit (36) aligned;
dcl  new_char_value char (4) aligned;
dcl  new_scaled_value fixed bin (35, 18);
dcl  new_binary_value fixed bin (35);
dcl  new_float_value float bin (27);

dcl  error_message char (128);


	unspec (char_value) = tp_value;
	unspec (scaled_value) = tp_value;
	unspec (binary_value) = tp_value;
	unspec (float_value) = tp_value;

	if tp_type = TP_CHAR then do; 		/* First, try to convert to appropriate format */
	     if length (rtrim (requested_value)) > 4 then
		call bad_value ("four characters or less");
	     new_char_value = requested_value;
	     new_value = unspec (new_char_value);
	     end;

	else if tp_type = TP_INTEGER then do;
	     new_binary_value = cv_dec_check_ (requested_value, code);
	     if code ^= 0 then call bad_value ("a decimal integer");
	     new_value = unspec (new_binary_value);
	     end;

	else if tp_type = TP_SCALED_INTEGER then do;
	     new_scaled_value = cv_float_ (requested_value, code);
	     if code ^= 0 then call bad_value ("a scaled integer");
	     new_value = unspec (new_scaled_value);
	     end;

	else if tp_type = TP_MICROSECONDS then do;
	     new_binary_value = (0.5 + 1.0e6 * cv_float_ (requested_value, code));
	     if code ^= 0 then call bad_value ("a positive number of seconds");
	     if new_binary_value < 0 then call bad_value ("a positive number of seconds");
	     new_value = unspec (new_binary_value);
	     end;

	else if tp_type = TP_ON_OFF then do;
	     if requested_value = "on" then new_binary_value = 1;
	     else if requested_value = "off" then new_binary_value = 0;
	     else call bad_value ("either ""on"" or ""off""");
	     unspec (new_value) = unspec (new_binary_value);
	     end;

	else if tp_type = TP_FLOAT then do;
	     new_float_value = cv_float_ (requested_value, code);
	     if code ^= 0 then call bad_value ("a floating point number");
	     unspec (new_value) = unspec (new_float_value);
	     end;

	else do;
	     new_binary_value = cv_oct_check_ (requested_value, code);
	     if code ^= 0 then call bad_value ("an octal number");
	     new_value = unspec (new_binary_value);
	     end;

	unspec (new_char_value) = unspec (new_value);	/* Copy back just in case */
	unspec (new_scaled_value) = unspec (new_value);
	unspec (new_binary_value) = unspec (new_value);
	unspec (new_float_value) = unspec (new_value);

	query_info.yes_or_no_sw = "1"b;
	query_info.version = query_info_version_4;

	if tp_type = TP_CHAR then			/* Make discreet inquiry about the change */
	     call command_query_ (addr (query_info), answer, WHOAMI,
		"OK to change ^a from ""^4a"" to ""^4a""?",
		tp_name, char_value, new_char_value);

	else if tp_type = TP_INTEGER then
	     call command_query_ (addr (query_info), answer, WHOAMI,
		"OK to change ^a from ^d to ^d?",
		tp_name, binary_value, new_binary_value);

	else if tp_type = TP_SCALED_INTEGER then
	     call command_query_ (addr (query_info), answer, WHOAMI,
		"OK to change ^a from ^f to ^f?",
		tp_name, round (decimal (scaled_value), 4), round (decimal (new_scaled_value), 4));

	else if tp_type = TP_MICROSECONDS then
	     call command_query_ (addr (query_info), answer, WHOAMI,
		"OK to change ^a from ^f to ^f seconds?",
		tp_name, (float (binary_value) / 1.0e6), (float (new_binary_value) / 1.0e6));

	else if tp_type = TP_ON_OFF then
	     call command_query_ (addr (query_info), answer, WHOAMI,
		"OK to change ^a from ^[on^;off^] to ^[on^;off^] ?",
		tp_name, (binary_value ^= 0), (new_binary_value ^= 0));

	else if tp_type = TP_FLOAT then
	     call command_query_ (addr (query_info), answer, WHOAMI,
	     "OK to change ^a from ^f to ^f?",
	     tp_name, float_value, new_float_value);

	else call command_query_ (addr (query_info), answer, WHOAMI,
		"OK to change ^a from ^w to ^w?",
		tp_name, tp_value, new_value);

	if answer ^= "yes" then return;		/* Chickened out */

	call set_entry (tp_name, new_value, (""b), (null ()), error_message, code);

	if code ^= 0 then call com_err_ (code, WHOAMI,
	     "^/^3xCannot change ^a to ^a^[: Must be ^a.^]",
	     tp_name, requested_value, (error_message ^= ""), error_message);

	return;
	end change;

/*  */

bad_value: proc (P_error);

dcl  P_error char (*);

	call com_err_ (0, WHOAMI, "Value for ^a must be ^a, not ""^a"".", tp_name, P_error, requested_value);

	goto SKIP_THIS_ARGUMENT;

	end bad_value;

%page; %include tuning_parameter_info;
%page; %include query_info;

	end change_tuning_parameters;
