/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1990   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(90-08-07,Vu), approve(90-08-07,MCR8189),
     audit(90-09-24,WAAnderson), install(90-10-02,MR12.4-1036):
     Error message from tune_disk without arguments is malformed.
                                                   END HISTORY COMMENTS */


/* format: style4,delnl,insnl,indattr,ifthen,dclind10 */
tune_disk:
td:
     proc;

/* User level procedure to control the tuning of the disk system. */

/* Created 84-05-23, by T. Oke */
/* Auditting changes by Chris Jones, August 1984 */

dcl	arg		   char (arg_len) based (arg_ptr);
dcl	arg_count		   fixed bin;
dcl	arg_index		   fixed bin;
dcl	arg_len		   fixed bin (21);
dcl	arg_list_ptr	   ptr;
dcl	arg_ptr		   ptr;

dcl	brief		   bit (1) initial ("1"b);
dcl	code		   fixed bin (35);
dcl	i		   fixed bin;
dcl	MYNAME		   char (9) static options (constant) initial ("tune_disk");
dcl	prev_arg		   char (256) varying;
dcl	reason		   char (64) varying;
dcl	stagnate		   fixed bin (35);
dcl	time		   float bin (27);


dcl	1 o		   like opt_info_tune;
dcl	1 s		   like sys_info_tune;

dcl	error_table_$bad_arg   fixed bin (35) ext;
dcl	error_table_$noarg	   fixed bin (35) ext;

dcl	cu_$arg_count_rel	   entry (fixed bin, ptr, fixed bin (35));
dcl	cu_$arg_list_ptr	   entry (ptr);
dcl	cu_$arg_ptr_rel	   entry (fixed bin, ptr, fixed bin (21), fixed bin (35), ptr);
dcl	com_err_		   entry () options (variable);
dcl	hphcs_$disk_tune	   entry (char (*), ptr, char (*) varying, fixed bin (35));
dcl	ioa_		   entry () options (variable);

dcl       (addr, after, before, bin, float, null, substr) builtin;

dcl	conversion	   condition;

/* Get arguments. */

	on conversion goto bad_arg;

	call cu_$arg_list_ptr (arg_list_ptr);
	call init_args;

	if ^get_next_arg () then do;
	     call ioa_ (
		"Usage:^a drive_name io_type -load n -response m -or-^/^a reset_max -or-^/^a reset_sys -or-^/^a stagnate seconds -or-^/^a system io_type -max n -map io_type"
		, MYNAME, MYNAME, MYNAME, MYNAME, MYNAME);

	     call ioa_ ("     io_type is one of: ^(^a ^)", io_name);
	     return;
	end;

	else if arg = "reset_max" | arg = "reset_sys" then do;
	     call hphcs_$disk_tune (arg, null (), reason, code);
	     if code ^= 0 then
		goto print_code;
	     return;
	end;
	else if arg = "stagnate" then do;
	     if ^get_next_arg () then
		goto no_arg;
	     time = float (arg);
	     stagnate = time * 1000000.0;
	     if stagnate < 0 | stagnate > 360000000 then do;
		call com_err_ (error_table_$bad_arg, MYNAME, "0 <= stagnate time <= 6 minutes.");
		return;
	     end;

	     call hphcs_$disk_tune (STAGNATE_TIME, addr (stagnate), reason, code);
	     if code ^= 0 then
		goto print_code;
	     return;
	end;

	else if arg = "system" then do;
	     s.type = get_io_type ();
	     s.max_depth, s.map = -1;
sys_arg_loop:
	     if ^get_next_arg () then
		goto sys_arg_done;
	     if arg = "-max" then do;			/* sys max_load */
		if ^get_next_arg () then
		     goto no_arg;
		s.max_depth = bin (arg, 35);
		goto sys_arg_loop;
	     end;
	     else if arg = "-map" then do;		/* sys depth map */
		s.map = get_io_type ();
		goto sys_arg_loop;
	     end;
	     goto bad_arg;

sys_arg_done:
	     if s.map < 0 & s.max_depth < 1 then
		return;				/* nothing modified */

	     call hphcs_$disk_tune (SYS_TUNE, addr (s), reason, code);
	     if code ^= 0 then
		goto print_code;
	     return;
	end;

	else if arg_len > 5 then
	     if substr (arg, 1, 3) = "dsk" & substr (arg, 5, 1) = "_" then do;
						/* sub-system */
		o.sub_sys = before (arg, "_");	/* sub_sys name */
		o.dev = bin (after (arg, "_"), 17);	/* device number */
		o.type = get_io_type ();		/* io type to tune */
		o.load, o.response = -1;

opt_arg_loop:
		if ^get_next_arg () then
		     goto opt_arg_done;
		if arg = "-load" | arg = "-ld" then do; /* load limit */
		     if ^get_next_arg () then
			goto no_arg;
		     o.load = bin (arg, 17);
		     goto opt_arg_loop;
		end;
		else if arg = "-response" | arg = "-rsp" then do;
						/* response */
		     if ^get_next_arg () then
			goto no_arg;
		     o.response = bin (arg, 35);
		     goto opt_arg_loop;
		end;
		goto bad_arg;

opt_arg_done:
		if o.load < 1 then do;
		     call com_err_ (error_table_$noarg, MYNAME, "-load must be specified and >1.");
		end;

		if o.response < 1 then do;
		     call com_err_ (error_table_$noarg, MYNAME, "-response must be specified and >1.");
		end;
		if o.response < 1 | o.load < 1 then
		     return;

		call hphcs_$disk_tune (OPT_TUNE, addr (o), reason, code);
		if code ^= 0 then
		     goto print_code;
		return;
	     end;
	goto bad_arg;

exit:
	return;

no_arg:
	call com_err_ (error_table_$noarg, MYNAME, "after " || prev_arg);
	return;

bad_arg:
	call com_err_ (error_table_$bad_arg, MYNAME, arg);
	return;

print_code:
	call com_err_ (code, MYNAME, "Reason given is ""^a"".", reason);
	return;

/* initialize argument processing. */

init_args:
     proc;

dcl	code		   fixed bin (35);

	arg_index = 1;
	call cu_$arg_count_rel (arg_count, arg_list_ptr, code);
	if code ^= 0 then
	     arg_count = 0;
	return;

/* Get next arguments.  Returns "0"b if failure. */

get_next_arg:
     entry returns (bit (1));

	if arg_index <= 1 then
	     prev_arg = "";
	else prev_arg = arg;

	if arg_index <= arg_count then do;
	     call cu_$arg_ptr_rel (arg_index, arg_ptr, arg_len, code, arg_list_ptr);
	     if code = 0 then do;
		arg_index = arg_index + 1;
		return ("1"b);			/* success */
	     end;
	end;
	return ("0"b);				/* no argument */


get_io_type:
     entry returns (fixed bin);

	if ^get_next_arg () then
	     goto no_arg;

	if arg = "test" then do;
	     call com_err_ (error_table_$bad_arg, MYNAME, "Cannot set TEST parms.");
	     goto exit;
	end;

	do i = 0 to MAX_IO_NAME;
	     if arg = io_name (i) then
		return (i);
	end;
	call com_err_ (error_table_$bad_arg, MYNAME, "Unknown IO type " || arg || ".");
	goto exit;

     end init_args;

%include disk_tune;
     end tune_disk;
