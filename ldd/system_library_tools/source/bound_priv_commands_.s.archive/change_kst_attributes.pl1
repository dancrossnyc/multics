/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


change_kst_attributes:
cka: proc;

/*

   Written 03/31/76 by R. Bratt

   This procedure allows users to easily call hardcore to set attributes
   in their ksts.  It attempts to use hphcs_$set_kst_attributes first.
   If the caller lacks hphcs_ access then phcs_$set_kst_attributes is called.

*/

dcl  ap ptr,
     al fixed bin,
     i fixed bin (17),
     terminate bit (1) aligned,
     value bit (1) aligned,
     segno fixed bin (17),
     segptr ptr,
     args fixed bin,
     arg char (al) based (ap),
     dname char (168),
     ename char (32),
     code fixed bin (35);
dcl  linkage_error condition;
dcl  error_table_$badopt ext fixed bin (35);
dcl 1 ka aligned like kst_attributes;
dcl  cu_$arg_count entry returns (fixed bin),
     cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35)),
    (ioa_, com_err_) entry options (variable),
     cv_oct_check_ entry (char (*), fixed bin (35)) returns (fixed bin),
     expand_path_ entry (ptr, fixed bin, ptr, ptr, fixed bin (35)),
    (hcs_$initiate, phcs_$initiate) entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr, fixed bin (35)),
     hcs_$terminate_noname entry (ptr, fixed bin (35)),
    (phcs_$set_kst_attributes, hphcs_$set_kst_attributes) entry (fixed bin (17), ptr, fixed bin (35));
						/*  */

	i = 2;
	terminate = "0"b;
	call cu_$arg_ptr (1, ap, al, code);
	if code ^= 0
	then do;
complain:	     call ioa_ ("USAGE: change_kst_attributes name|segno <attribute list>");
	     return;
	end;
	segno = cv_oct_check_ (arg, code);
	if code ^= 0
	then do;
	     if arg = "-name" | arg = "-nm"
	     then do;
		i = 3;
		call cu_$arg_ptr (2, ap, al, code);
		if code ^= 0 then go to complain;
	     end;
	     call expand_path_ (ap, al, addr (dname), addr (ename), code);
	     if code ^= 0 then call abort (code, "");
	     call hcs_$initiate (dname, ename, "", 0, 1, segptr, code);
	     if segptr = null ()
	     then do;
		call phcs_$initiate (dname, ename, "", 0, 1, segptr, code);
		if segptr = null () then call abort (code, "");
	     end;
	     else terminate = (code ^= 0);
	     segno = binary (baseno (segptr), 18);
	end;
	unspec (ka) = "0"b;
	args = cu_$arg_count ();
	do i = i to args;
	     call cu_$arg_ptr (i, ap, al, (0));
	     if substr (arg, 1, 1) = "^"
	     then do;
		value = "0"b;
		ap = addr (substr (arg, 2));
		al = al -1;
	     end;
	     else value = "1"b;
	     if arg = "tpd"
	     then do;
		ka.set.tpd = "1"b;
		ka.value.tpd = value;
	     end;
	     else if arg = "tms"
	     then do;
		ka.set.tms = "1"b;
		ka.value.tms = value;
	     end;
	     else if arg = "tus"
	     then do;
		ka.set.tus = "1"b;
		ka.value.tus = value;
	     end;
	     else if arg = "allow_deactivate"
	     then do;
		ka.set.explicit_deactivate_ok = "1"b;
		ka.value.explicit_deactivate_ok = value;
	     end;
	     else if arg = "allow_write"
	     then do;
		ka.set.allow_write = "1"b;
		ka.value.allow_write = value;
	     end;
	     else if arg = "audit"
	     then do;
		ka.set.audit = "1"b;
		ka.value.audit = value;
	     end;
	     else call abort (error_table_$badopt, arg);
	end;
	on linkage_error
	     begin;
	     revert linkage_error;
	     call phcs_$set_kst_attributes (segno, addr (ka), code);
	     go to check;
	end;
	call hphcs_$set_kst_attributes (segno, addr (ka), code);
check:	if terminate then call hcs_$terminate_noname (segptr, (0));
	if code ^= 0 then call abort (code, "");
	return;

abort:	proc (code, msg);
dcl  code fixed bin (35),
     msg char (*);
	     call com_err_ (code, "change_kst_attributes", msg);
	     go to return_to_caller;
	end abort;

return_to_caller:
	return;

/*  */

%include kst_attributes;

     end change_kst_attributes;
