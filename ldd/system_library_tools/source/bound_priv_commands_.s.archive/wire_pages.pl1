/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* WIRE_PAGES/UNWIRE_PAGES - Commands to interface to ring-0 segment wiring primitive.

   Written 770210 by PG for Xerox/CMU Benchmarks.
   Modified 770407 by PG for installation.
*/

wire_pages:
	procedure options (variable);

/* automatic */

dcl	arg_len fixed bin (21),
	arg_no fixed bin,
	arg_ptr ptr,
	bitcount fixed bin (24),
	code fixed bin (35),
	dname char (168),
	ename char (32),
	first_page fixed bin (18),
	my_name char (12),
	n_pages fixed bin (18),
	1 oi aligned like object_info,
	seg_ptr ptr,
	text_flag bit (1) aligned,
	wire_flag bit (1) aligned;

/* based */

dcl	arg_string char (arg_len) based (arg_ptr);

/* builtins */

dcl	(addr, divide, null, substr) builtin;

/* conditions */

dcl	cleanup condition;

/* entries */

dcl	com_err_ entry options (variable),
	cu_$arg_ptr entry (fixed bin, ptr, fixed bin (21), fixed bin (35)),
	expand_pathname_ entry (char (*), char (*), char (*), fixed bin (35)),
	hcs_$initiate_count entry (char (*), char (*), char (*), fixed bin (24), fixed bin (2), ptr, fixed bin (35)),
	hcs_$terminate_noname entry (ptr, fixed bin (35)),
	hphcs_$user_wire entry (ptr, bit (1) aligned, fixed bin (18), fixed bin (18), fixed bin (35)),
	object_info_$brief entry (ptr, fixed bin (24), ptr, fixed bin (35));

/* external static */

dcl	(error_table_$badopt fixed bin (35),
	error_table_$wrong_no_of_args fixed bin (35),
	sys_info$page_size fixed bin (18)) external static;

/* include files */

%include object_info;

/* program */

	wire_flag = "1"b;				/* wire the seg down */
	my_name = "wire_pages";
	go to join;

unwire_pages:
	entry options (variable);

	wire_flag = "0"b;				/* unwire the seg */
	my_name = "unwire_pages";

join:
	call cu_$arg_ptr (1, arg_ptr, arg_len, code);
	if code ^= 0
	then do;
		if wire_flag
		then call com_err_ (code, my_name, "Usage: wire_pages path {first_page n_pages} {-text}");
		else call com_err_ (code, my_name, "Usage: unwire_pages path");
		return;
	     end;

	call expand_pathname_ (arg_string, dname, ename, code);
	if code ^= 0
	then do;
		call com_err_ (code, my_name, "^a", arg_string);
		return;
	     end;

	first_page = 0;				/* set defaults */
	n_pages = -1;				/* to cover whole segment */
	seg_ptr = null;
	text_flag = "0"b;				/* default is to wire whole seg */

	on cleanup call clean_up;

	arg_no = 2;
	call cu_$arg_ptr (arg_no, arg_ptr, arg_len, code);
	if wire_flag & (code = 0)			/* any args for wire_pages? */
	then do;
	     if substr (arg_string, 1, 1) = "-"
	     then if arg_string = "-text"
		then text_flag = "1"b;
		else do;
			call com_err_ (error_table_$badopt, my_name, "^a", arg_string);
			return;
		     end;
	     else do;

		     /* User has specified first_page... */

		     first_page = cv_num_ (arg_string, code);
		     if code ^= 0
		     then return;

		     arg_no = arg_no + 1;
		     call cu_$arg_ptr (arg_no, arg_ptr, arg_len, code);
		     if code ^= 0
		     then do;
			     call com_err_ (0, my_name, "If first_page is given, n_pages must be given.");
			     return;
			end;

		     n_pages = cv_num_ (arg_string, code);
		     if code ^= 0
		     then return;		     	/* message already printed */
		end;

	     arg_no = arg_no + 1;
	     call cu_$arg_ptr (arg_no, arg_ptr, arg_len, code);	/* see if any more args... */
	     end;

	if code = 0
	then do;
		call com_err_ (error_table_$wrong_no_of_args, my_name, "");
		return;
	     end;

	call hcs_$initiate_count (dname, ename, "", bitcount, 0, seg_ptr, code);
	if seg_ptr = null
	then do;
		call com_err_ (code, my_name, "^a>^a", dname, ename);
		return;
	     end;

	if text_flag
	then do;
		oi.version_number = object_info_version_2;
		call object_info_$brief (seg_ptr, bitcount, addr (oi), code);
		if code ^= 0
		then do;
			call com_err_ (code, my_name, "Unable to determine length of text section of ^a>^a",
			     dname, ename);
			call clean_up;
			return;
		     end;

		first_page = 0;
		n_pages = divide (oi.tlng + sys_info$page_size - 1, sys_info$page_size, 18, 0);
	     end;

	call hphcs_$user_wire (seg_ptr, wire_flag, first_page, n_pages, code);
	if code ^= 0
	then call com_err_ (code, my_name, "Cannot ^[wire^;unwire^] ^a>^a", wire_flag, dname, ename);

	call clean_up;
	return;

clean_up:
     procedure;

	call hcs_$terminate_noname (seg_ptr, code);

     end clean_up;


cv_num_:
     procedure (bv_arg_string, bv_code) returns (fixed bin (18));

/* parameters */

dcl	(bv_arg_string char (*),
	bv_code fixed bin (35)) parameter;

/* automatic */

dcl	num fixed bin (18);

/* builtins */

dcl	(length, substr) builtin;

/* entries */

dcl	cv_dec_check_ entry (char (*), fixed bin (35)) returns (fixed bin (35)),
	cv_oct_check_ entry (char (*), fixed bin (35)) returns (fixed bin (35));

/* program */

	if substr (bv_arg_string, length (bv_arg_string), 1) = "."
	then num = cv_dec_check_ (substr (bv_arg_string, 1, length (bv_arg_string) - 1), bv_code);
	else num = cv_oct_check_ (bv_arg_string, bv_code);

	if bv_code ^= 0
	then call com_err_ (0, my_name, "Non-^[decimal^;octal^] digit in position ^d of ""^a"".",
		(substr (bv_arg_string, length (bv_arg_string), 1) = "."), bv_code, bv_arg_string);

	return (num);

     end cv_num_;

     end /* wire_pages */;
