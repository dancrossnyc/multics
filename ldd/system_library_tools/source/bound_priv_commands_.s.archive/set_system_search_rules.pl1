/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


set_system_search_rules: proc;

/* set_system_search_rules - set default search rules and define search rule keywords.

   Usage: set_system_search_rules path

   The file path contains lines defining search rules.
   Each line has a search spec followed by one or more tags separated by commas.

   The search spec may be:
   .	an absolute pathname
   .	initiated_segments
   .	referencing_dir
   .	working_dir
   .	process_dir
   .	home_dir

   The tags are up to 32 characters long. They define keywords which user processes specify to refer to
   groups of directories. Thus if the user process specifies the single rule "default",
   all rules tagged with "default" will be inserted in the search spec.
   Recursion is forbidden.

   To duplicate the system default default rules use a file like this:

   initiated_segments, default
   referencing_dir, default
   working_dir, default
   >system_library_standard, default, system_libraries
   >system_library_unbundled, default, system_libraries
   >system_library_1, default, system_libraries
   >system_library_tools, default, system_libraries

   Written by THVV 7/76 */
/*  Modified by S.E. Barr 1/77 to correct search rule structure; allow blank lines and comments without commas. */

	xsp = addr (temp);				/* Initialization. Find input structure for hardcore */
	unspec (temp) = "0"b;
	dft_sr_arg.ntags = 0;
	dft_sr_arg.nrules = 0;
	call cu_$arg_ptr (1, ap, al, ec);		/* Argument is path name */
	if ec ^= 0 then do;
	     call com_err_ (ec, "set_system_search_rules", "Usage: set_system_search_rules path");
	     return;
	end;
	call expand_path_ (ap, al, addr (dn), addr (en), ec);
	if ec ^= 0 then do;
	     call com_err_ (ec, "set_system_search_rules", "^a", bchr);
	     return;
	end;
	call hcs_$initiate_count (dn, en, "", bitc, 1, segp, ec);
	if segp = null then do;
	     call com_err_ (ec, "set_system_search_rules", "^a>^a", dn, en);
	     return;
	end;

	k = 1;					/* K points at beginning of current line */
	N = divide (bitc, 9, 24, 0);
	do while (k <= N);				/* Do one line at a time */
	     j = index (substr (bcs, k), NL);		/* Find end of line */
	     if j = 0 then k = N+1;			/* Force end of loop */
	     else do;
		if substr (bcs, k, 1) = "*" then;	/* Comment if star in col 1 */
		else do;
		     m = index (substr (bcs, k, j), ","); /* Separate dir name from tags */
		     if m = 0 then call com_err_ (0, "set_system_search_rules", "No comma, line ignored: ^a", substr (bcs, k, j));
		     else do;
			mm = verify (substr (bcs, k, m-1), WHITE_SPACE) -1; /* Press off leading blanks */
			rule = substr (bcs, k+mm, m-1-mm);
			if rule = "" then;		/* Skip blank lines */
			else if substr (rule, 1, 1) = ">" /* Check rule validity */
			| rule = "initiated_segments"
			| rule = "referencing_dir"
			| rule = "process_dir"
			| rule = "home_dir"
			| rule = "working_dir" then do;
			     dft_sr_arg.nrules = dft_sr_arg.nrules + 1; /* Make room for rule */
			     if dft_sr_arg.nrules > hbound (dft_sr_arg.rules, 1) then do;
				call com_err_ (0, "set_system_search_rules", "too many rules: ^a", rule);
				return;
			     end;
			     dft_sr_arg.rules (dft_sr_arg.nrules).name = rule; /* Store it */
			     do while (substr (bcs, k+m, j-m) ^= "");
				kk = index (substr (bcs, k+m, j-m), ","); /* Find end of tag */
				if kk = 0 then kk = j-m;
				mm = verify (substr (bcs, k+m, kk-1), " ") - 1;
				tag = substr (bcs, k+m+mm, kk-1-mm);
				do bitx = 1 to dft_sr_arg.ntags while (dft_sr_arg.tags (bitx).name ^= tag); end;
				if bitx > dft_sr_arg.ntags then do; /* New tag */
				     dft_sr_arg.ntags = bitx;
				     if dft_sr_arg.ntags > hbound (dft_sr_arg.tags, 1) then do;
					call com_err_ (0, "set_system_search_rules",
					     "Too many tags: ^a in rule ^a", tag, rule);
					return;
				     end;
				     dft_sr_arg.tags (bitx).name = tag;
				     substr (dft_sr_arg.tags (bitx).flag, bitx, 1) = "1"b;
				     if tag = "default" then default_found = "1"b;
				end;
				substr (dft_sr_arg.rules (dft_sr_arg.nrules).flag, bitx, 1) = "1"b;
				m = m+kk;		/* Step over tag and comma */
			     end;
			end;
			else do;			/* Bad rule */
			     call com_err_ (0, "set_system_search_rules", "Illegal rule ^a", rule);
			     return;
			end;
		     end;
		end;
	     end;
	     k = k + j;				/* Step over line and NL */
	end;

	call hcs_$terminate_noname (segp, ec);		/* Done with input */

	if ^default_found then do;			/* System dont work right without a default */
	     call com_err_ (0, "set_system_search_rules", "No rules tagged ""default"" found in ^a>^a",
		dn, en);
	     return;
	end;

	call initializer_gate_$set_sr (addr (temp), ec);	/* Crunch */
	if ec ^= 0 then call com_err_ (ec, "set_system_search_rules", "");
	return;					/* All done */

dcl  ec fixed bin (35);
dcl (i, j, k, N, kk, mm, m) fixed bin;
dcl  segp ptr;
dcl  bcs char (N) aligned based (segp);
dcl  rule char (168);
dcl  tag char (32);
dcl  ap ptr, al fixed bin, bchr char (al) based (ap);
dcl  default_found bit (1) init ("0"b);
dcl  NL char (1) static options (constant) init ("
");
dcl  WHITE_SPACE char (2) int static options (constant) init ("	 "); /* tab blank */
dcl  bitx fixed bin;
dcl  bitc fixed bin (24);
dcl  dn char (168);
dcl  en char (32);

dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  hcs_$initiate_count entry (char (*), char (*), char (*), fixed bin (24), fixed bin (2),
     ptr, fixed bin (35));
dcl  expand_path_ entry (ptr, fixed bin, ptr, ptr, fixed bin (35));
dcl  hcs_$terminate_noname entry (ptr, fixed bin (35));
dcl  com_err_ entry options (variable);
dcl  initializer_gate_$set_sr entry (ptr, fixed bin (35));

dcl  null builtin;

dcl 1 temp aligned like dft_sr_arg;

%include system_dft_sr;

     end set_system_search_rules;
