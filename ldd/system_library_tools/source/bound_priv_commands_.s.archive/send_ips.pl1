/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */

/* format: style5 */

/* DESCRIPTION:
   Command to send IPS signals or ipc_ wakeups, to help fix system problems.
*/

/* HISTORY:
Written by T. Casey, May 1978.
Modified:
09/01/78 by T. Casey:  Fix bugs and improve the error messages.
05/01/80 by T. Casey:  Make it match MCR 4051 and fix a bug.
07/15/84 by R. Michael Tague:  IPS signal names have been lengthened, so 
            signal_arg was changed to a char (32) varying instead of char(8).
*/


send_ips: proc;

dcl (ppid, pips, pmsg) ptr;
dcl (lpid, lips, lmsg) fixed bin;
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  proc_id char (lpid) based (ppid);
dcl  ips_name char (lips) based (pips);
dcl  msg_arg char (lmsg) based (pmsg);
dcl  hphcs_$ips_wakeup entry (bit (36) aligned, char (*));
dcl  hcs_$wakeup entry (bit (36) aligned, fixed bin (71), fixed bin (71), fixed bin (35));
dcl  event fixed bin (71) init (0);
dcl  ev_msg char (8) based (addr (event));
dcl  rqargs fixed bin;
dcl  evaci bit (1) aligned;
dcl  evchn fixed bin (71);
dcl  code fixed bin (35);
dcl  cv_oct_check_ entry (char (*), fixed bin (35)) returns (fixed bin (35));
dcl  cu_$arg_count entry (fixed bin);
dcl  b36 bit (36) aligned;
dcl  fb35 fixed bin (35);
dcl (addr, length, max, min, substr, unspec, verify) builtin;
dcl (ioa_, com_err_) entry options (variable);
dcl  me char (12);
dcl  i fixed bin;
dcl  signal_arg char (32) varying;
dcl  convert_ipc_code_ entry (fixed bin (35));
dcl  linkage_error condition;

	me = "send_ips";
	rqargs = 2;				/* send_ips wants 2 args */
send_common:
	evaci = "1"b;				/* assume message (or ips name) is ascii */
	call cu_$arg_count (i);
	if i ^= rqargs				/* if wrong number of arguments */
	&^(rqargs = 3 & i = 2)			/* (other than omission of the optional 3rd arg to send_wakeup) */
	then do;					/* print a usage message */
	     if rqargs = 2 then
		call com_err_ (0, me, "Usage: send_ips process_id ips_name");
	     else call com_err_ (0, me, "Usage: send_wakeup process_id event_channel {event_message}");
	     return;
	end;

/* Pick up first 2 args: process id and ips name or event channel */

	call cu_$arg_ptr (1, ppid, lpid, code);
	fb35 = cv_oct_check_ (proc_id, code);
	if code ^= 0 then do;
	     call com_err_ (0, me, """^a"" (process_id) is non-octal (digit ^d)", proc_id, code);
	     return;
	end;
	b36 = unspec (fb35);

	call cu_$arg_ptr (2, pips, lips, (0));
	signal_arg = ips_name;			/* copy the ips name into a temp for printing */

/* If send_wakeup entry point, pick up optional event message (arg 3) and convert the event channel (arg 2) */

	if rqargs = 3 then do;
	     call cu_$arg_ptr (3, pmsg, lmsg, code);	/* check for optional event message argument */
	     if code = 0 then do;			/* if argument there, see if it is ASCII or octal */
		event = cv_dbl_oct_check (msg_arg, code); /* try octal first */
		if code ^= 0 then do;		/* not octal; could be ASCII */
		     if length (msg_arg) > 8 then do;	/* but it must be <= 8 chars */
			call com_err_ (0, me, """^a"" is an invalid event message (non-octal (digit ^d) and > 8 chars)",
			     msg_arg, code);
			return;
		     end;
		     ev_msg = msg_arg;		/* copy ascii event msg into string overlay of fb(71) event msg */
		     signal_arg = msg_arg;		/* also copy it into temp for printing */
		end;
		else evaci = ""b;			/* remember that event message was octal */
	     end;					/* end event message (3rd arg) given */
	     else evaci = ""b;			/* no message was given; we will send octal zeros */

	     evchn = cv_dbl_oct_check (ips_name, code);	/* convert event channel (2nd arg) to fixed bin */
	     if code ^= 0 then do;
		call com_err_ (0, me, """^a"" (event_channel) is non-octal (digit ^d)", ips_name, code);
		return;
	     end;
	end;

/* Print args, send the signal, and print "sent it" message */

	call ioa_ ("^a: sending ^[^a^s^;^s^.3b^] to ^.3b^[ (^.3b)^]",
	     me, evaci, signal_arg, unspec (event), unspec (b36), (rqargs = 3), unspec (evchn));
	code = 0;
	if rqargs = 2 then do;
	     on linkage_error begin;
		call com_err_ (0, me, "Unable to send ips signal; process lacks re access to the hphcs_ gate.");
		goto RETURN;
	     end;
	     call hphcs_$ips_wakeup (b36, (ips_name)); /* pass by value for allignment */
	     revert linkage_error;
	end;
	else do;
	     call hcs_$wakeup (b36, evchn, event, code);
	     if code ^= 0 then do;
		call convert_ipc_code_ (code);
		call com_err_ (code, me, "(from hcs_$wakeup)");
	     end;
	end;

	if code = 0 then
	     call ioa_ ("^a: sent it.", me);
RETURN:	return;

/* Entry point to send and ipc_ wakeup */

send_wakeup: entry;

	me = "send_wakeup";
	rqargs = 3;				/* this entry point can have 3 arguments */
	goto send_common;


cv_dbl_oct_check: proc (dbloct, code) returns (fixed bin (71)); /* to convert a double length (24 digit) octal number */

dcl  dbloct char (*);
dcl  code fixed bin (35);
dcl  fb71 fixed bin (71);
dcl  fb35 (2) fixed bin (35) based (addr (fb71));
dcl  i fixed bin;

	     code = verify (dbloct, "01234567");	/* verify that it contains only octal digits */
	     if code ^= 0 then return (0);

	     i = length (dbloct);			/* and is no longer than 24 digits */
	     if i > 24 then do;
		code = 25;
		return (0);
	     end;

	     fb71 = 0;				/* zero the return value */
	     if i > 12 then				/* if more than 12 digits, convert upper half */
		fb35 (1) = cv_oct_check_ (substr (dbloct, 1, i-12), code);
	     if code ^= 0 then return (0);
	     fb35 (2) = cv_oct_check_ (substr (dbloct, max (1, i-11), min (i, 12)), code); /* convert lower half */
	     if code ^= 0 then do;
		code = code + i - 12;		/* say which digit is bad, counting from start of string */
		return (0);
	     end;
	     return (fb71);

	end cv_dbl_oct_check;

     end send_ips;
