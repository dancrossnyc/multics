/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
/* checker_crossref_ -- Program to look at all the links in an MST */
/* and see if they can be resolved */
/* format: style2 */
/* Modified December 1983 by Keith Loepere for non-loaded collections; also
   so that temp segs in one minor collection can reference segs in another
   minor collection within the same major collection. */
checker_crossref_:
     procedure;


%include checker_dcls_;
%page;
%include slte;
%include slt;
%page;

	declare 1 list_head		 aligned based,
		2 first		 ptr unaligned,
		2 count		 fixed bin;

	declare 1 segment_not_found_head
				 aligned like list_head;
	declare 1 found_online_head	 aligned like list_head;
	declare 1 entrypoint_not_found_head
				 aligned like list_head;
	declare 1 special_link_head	 aligned like list_head;

	declare ONLINE		 fixed bin init (-2) int static options (constant);
	declare SEGMENT_NOT_FOUND	 fixed bin init (-1) int static options (constant);
	declare ENTRYPOINT_NOT_FOUND	 fixed bin init (-4) int static options (constant);
	declare SPECIAL_LINK	 fixed bin init (-3) int static options (constant);
	declare SELF_LINK		 fixed bin init (-5) int static options (constant);

	declare 1 IL_arg		 aligned,
		2 segname		 char (32) aligned,
		2 entryname	 char (33) aligned,
		2 expression	 char (8) aligned,
		2 modifier	 char (4) aligned,
		2 trap		 char (32) aligned;

	declare cep		 pointer;
	declare cx		 fixed bin;
	declare 1 chain_entry	 based (cep),
		2 next		 ptr unal,
		2 linker		 char (32) unal,
		2 link		 char (256) unal;


	declare checker_print_$error	 entry () options (variable);
	declare checker_print_$error_term
				 entry () options (variable);
	declare checker_print_	 entry () options (variable);
	declare checker_print_$page	 entry;
	declare checker_print_$skip	 entry;
	declare hcs_$make_ptr	 entry (ptr, char (*), char (*), ptr, fixed bin (35));
	declare ioa_		 entry () options (variable);
	declare interpret_link_$given_exp
				 entry (ptr, fixed bin (18), bit (6), ptr, fixed bin (35));
	declare hash_$opt_size	 entry (fixed bin) returns (fixed bin);
	declare hash_$in		 entry (ptr, char (*), bit (36) aligned, fixed bin (35));
	declare hash_$make		 entry (ptr, fixed bin, fixed bin (35));
	declare hash_$search	 entry (ptr, char (*), bit (36) aligned, fixed bin (35));
	declare get_definition_	 entry (ptr, char (*), char (*), ptr, fixed bin (35));
	declare get_temp_segment_	 entry (char (*), ptr, fixed bin (35));
	declare release_temp_segment_	 entry (char (*), ptr, fixed bin (35));

	declare error_table_$no_ext_sym
				 fixed bin (35) ext static;
	declare error_table_$seg_not_found
				 fixed bin (35) ext static;

	declare cleanup		 condition;
	declare htp		 pointer;
	declare (hbound, null, length, rtrim, char, substr, ptr, addr, unspec)
				 builtin;
	declare ME		 init ("checker_crossref_") int static options (constant) char (32);


	htp = null;
	on cleanup
	     begin;
		if htp ^= null ()
		then call release_temp_segment_ (ME, htp, (0));
	     end;

	call get_temp_segment_ (ME, htp, (0));
	call hash_$make (htp, hash_$opt_size (5000), (0));/* hash table to remember where we found (that we found) a given segname */

	segment_not_found_head.first, found_online_head.first, entrypoint_not_found_head.first,
	     special_link_head.first = null;

	segment_not_found_head.count, found_online_head.count, entrypoint_not_found_head.count,
	     special_link_head.count = 0;

	call checker_print_$page;
	call checker_print_ ("Begin Crossreference:");
	call checker_print_$skip;
	call ioa_ ("Begin Crossreference.");

	sltp = checker_data_$slt_ptr;
	names_ptr = checker_data_$name_table_ptr;

	call FILL_HASH_TABLE;

	do cx = 0 to hbound (meters.per_collection, 1)
	     while (meters.per_collection (cx).read & cx <= checker_data_$last_supervisor_collection);
	     if checker_data_$loaded (cx) then call COLLECTION (cx);
	end;

	call REPORT;
	call ioa_ ("Done Crossreference.");
	call release_temp_segment_ (ME, htp, (0));
	return;


COLLECTION:
     procedure (collection);
	declare collection		 fixed bin;
	declare 1 PC		 aligned like meters.per_collection defined (meters.per_collection (collection));
	declare segment_number	 fixed bin (18);

	call ioa_ ("Checking collection ^d.^d.", checker_data_$collection_names (collection).major,
	     checker_data_$collection_names (collection).minor);

	do segment_number = PC.first_segment repeat meters.per_segment (segment_number).next
	     while (segment_number ^< 0);
	     if addr (slt.seg (segment_number)) -> slte_uns.ringbrack (1) = 0
		& meters.per_segment (segment_number).link_ptr ^= null
	     then call LOOK_AT_LINKS (segment_number, (meters.per_segment (segment_number).link_ptr),
		     (meters.per_segment (segment_number).defs_ptr));
	end;
	return;
     end COLLECTION;

LOOK_AT_LINKS:
     procedure (segment_number, links_ptr, defs_ptr);
	declare segment_number	 fixed bin (18);
	declare defs_ptr		 ptr;
	declare links_ptr		 pointer;
	declare exp_relp		 fixed bin (18);
	declare modifier		 bit (6);
	declare segment_name	 char (32);
	declare lx		 fixed bin;
	declare def_section_ptr	 ptr;

	def_section_ptr = addr (defs_ptr -> segment_defs.definitions);
	segment_name = NAME (segment_number);
	segment_links_ptr = links_ptr;

	do lx = 1 to segment_links.n_links;
	     exp_relp = segment_links.expression_relps (lx);
	     modifier = segment_links.modifiers (lx);

	     call PROCESS_LINK (segment_number, segment_name, def_section_ptr, exp_relp, modifier);
	end;
     end LOOK_AT_LINKS;

PROCESS_LINK:
     procedure (segment_number, segment_name, defs_ptr, exp_relp, modifier);
	declare segment_number	 fixed bin (18);
	declare segment_name	 char (32);
	declare defs_ptr		 pointer;
	declare exp_relp		 fixed bin (18);
	declare modifier		 bit (6);
	declare link_entrypoint	 char (32);
	declare found_in_segno	 fixed bin;
	declare 1 (linking_slte, linked_slte)
				 aligned like slte_uns;
	declare link_printed_rep	 char (256);


/* Get the name that this references */

	call interpret_link_$given_exp (addr (IL_arg), exp_relp, modifier, defs_ptr, (0));

	sltep = addr (slt.seg (segment_number));
	linking_slte = slte_uns;

/* Look for the definitions */

	if substr (IL_arg.entryname, 1, 1) = "|"
	then link_entrypoint = "";
	else link_entrypoint = substr (IL_arg.entryname, 2);
	found_in_segno = SEARCH (IL_arg.segname, link_entrypoint, linking_slte.ringbrack (2) > 0);
	link_printed_rep = LINK_REP ();		/* IL_arg is global */
	if found_in_segno ^< 0
	then do;					/* hardcore segment */

		sltep = addr (slt.seg (found_in_segno));
		linked_slte = slte_uns;

		if linking_slte.temp_seg
		     & checker_data_$collection_names (meters.per_segment (found_in_segno).collection).major 
		     > checker_data_$collection_names (meters.per_segment (segment_number).collection).major
		then call checker_print_$error (CHECKER_ERROR, (0), "crossref",
			"Temp seg ^a link ^a: target is in a later collection.", segment_name, link_printed_rep);

		else if linking_slte.temp_seg & linked_slte.temp_seg
			& checker_data_$collection_names (meters.per_segment (found_in_segno).collection).major
			^= checker_data_$collection_names (meters.per_segment (segment_number).collection).major
		then call checker_print_$error (CHECKER_ERROR, (0), "crossref",
			"Temp seg ^a link ^a: target is temp segment in a different collection.", segment_name,
			link_printed_rep);

		else if linked_slte.temp_seg
			& checker_data_$collection_names (meters.per_segment (found_in_segno).collection).major
			< checker_data_$collection_names (meters.per_segment (segment_number).collection).major
		then call checker_print_$error (CHECKER_ERROR, (0), "crossref",
			"Seg ^a link ^a links to earlier temp seg.", segment_name, link_printed_rep);

/* Check for ring order here */
	     end;

	else if found_in_segno = ONLINE
	then call ADD_TO_CHAIN (segment_name, link_printed_rep, found_online_head);
	else if found_in_segno = SEGMENT_NOT_FOUND
	then call ADD_TO_CHAIN (segment_name, link_printed_rep, segment_not_found_head);
	else if found_in_segno = ENTRYPOINT_NOT_FOUND
	then call ADD_TO_CHAIN (segment_name, link_printed_rep, entrypoint_not_found_head);
	else if found_in_segno = SPECIAL_LINK
	then call ADD_TO_CHAIN (segment_name, link_printed_rep, special_link_head);
						/* other case is SELF, which is okay */

     end PROCESS_LINK;


SEARCH:
     procedure (segname, entrypoint, runs_in_user_ring) returns (fixed bin);
	declare segname		 char (*) aligned;
	declare entrypoint		 char (*);	/* "" for numeric based links */
	declare segno_in_word	 bit (36) aligned;
	declare segno		 fixed bin (35);
	declare runs_in_user_ring	 bit (1) aligned;
	declare code		 fixed bin (35);
	declare (cx, sx)		 fixed bin (18);
	declare s_ptr		 pointer;
	declare segname_u		 char (32);
	declare def_section_ptr	 pointer;
	declare searched_hardcore	 bit (1) aligned;

	searched_hardcore = "0"b;
	segname_u = segname;
	if segname_u = "*symbol" | segname_u = "*system" | segname_u = "*defs"
	then return (SPECIAL_LINK);
	else if char (segname_u, 1) = "*"
	then return (SELF_LINK);
	call hash_$search (htp, segname_u, segno_in_word, code);
	if code = 0
	then do;
		unspec (segno) = segno_in_word;
		go to HAVE_SEGNO;
	     end;

/* Try online */

SEARCH_ONLINE:
	call hcs_$make_ptr (null (), segname_u, entrypoint, s_ptr, code);
	if s_ptr ^= null
	then return (ONLINE);
	else do;
		if code = error_table_$no_ext_sym | searched_hardcore
						/* return original error */
		then return (ENTRYPOINT_NOT_FOUND);
		else return (SEGMENT_NOT_FOUND);
	     end;

HAVE_SEGNO:
	if entrypoint = ""
	then return (segno);			/* easy enough */

	sx = segno;
	if meters.per_segment (sx).defs_ptr = null
	then go to NO_ENTRYPOINT;

	def_section_ptr = addr (meters.per_segment (sx).defs_ptr -> segment_defs.definitions);

	call get_definition_ (def_section_ptr, segname_u, entrypoint, (null), code);
	if code ^= 0
	then
NO_ENTRYPOINT:
	     do;
		if ^runs_in_user_ring | searched_hardcore
		then return (ENTRYPOINT_NOT_FOUND);
		else do;
			searched_hardcore = "1"b;
			go to SEARCH_ONLINE;
		     end;
	     end;
	return (segno);
     end SEARCH;


NAME:
     procedure (s) returns (char (32)) reducible;
	declare s			 fixed bin (18);
	return (ptr (checker_data_$name_table_ptr, addr (slt.seg (s)) -> slte_uns.names_ptr) -> segnam.names (1).name);
     end NAME;

LINK_REP:
     procedure returns (char (256));

	declare arep		 char (256);

	arep = rtrim (IL_arg.segname) || rtrim (IL_arg.entryname) || rtrim (IL_arg.expression)
	     || rtrim (IL_arg.modifier) || " " || IL_arg.trap;
	return (arep);
     end LINK_REP;

ADD_TO_CHAIN:
     procedure (sn, lrep, head);
	declare sn		 char (*);	/* segment name making the link */
	declare lrep		 char (256);	/* the link offending */
	declare 1 head		 aligned like list_head;
						/* the chain */
	declare new_cep		 ptr;
	declare prev_cep		 ptr;

	allocate chain_entry in (checker_area) set (new_cep);
	new_cep -> chain_entry.linker = sn;
	new_cep -> chain_entry.link = lrep;
	new_cep -> chain_entry.next = null;

	head.count = head.count + 1;
	if head.first = null
	then do;
		head.first = new_cep;
		return;
	     end;

	prev_cep = null;
	do cep = head.first repeat chain_entry.next while (cep ^= null);
	     if sn < chain_entry.linker
	     then
INSERT:
		do;				/* insert here */
		     new_cep -> chain_entry.next = cep;
		     if prev_cep = null		/* to beginning */
		     then head.first = new_cep;
		     else prev_cep -> chain_entry.next = new_cep;
		     return;
		end;
	     else if sn = chain_entry.linker
	     then do;				/* look for multiples on this segname */
		     do cep = cep repeat chain_entry.next while (cep ^= null);
			if lrep < chain_entry.link
			then go to INSERT;
			if sn ^= chain_entry.linker
			then go to INSERT;		/* last on this segname */
			prev_cep = cep;
		     end;
		     go to OFF_END;
		end;
	     prev_cep = cep;
	end;


OFF_END:						/* prev_cep -> last one */
	prev_cep -> chain_entry.next = new_cep;
     end ADD_TO_CHAIN;


REPORT:
     procedure;

	if entrypoint_not_found_head.count > 0
	then do;
		call THROW;
		call checker_print_$error (CHECKER_SEVERE, (0), "crossref",
		     "Links exist to entrypoints not defined.");
		call checker_print_$skip;

		call PRINT_CHAIN (entrypoint_not_found_head.first, CHECKER_ERROR, error_table_$no_ext_sym);
	     end;

	if segment_not_found_head.count > 0
	then do;
		call THROW;
		call checker_print_$error (CHECKER_SEVERE, (0), "crossref", "Links exist to segments not found.");
		call checker_print_$skip;

		call PRINT_CHAIN (segment_not_found_head.first, CHECKER_ERROR, error_table_$seg_not_found);
	     end;

	if found_online_head.count > 0
	then do;
		call THROW;
		call checker_print_$error (CHECKER_WARNING, (0), "crossref",
		     "Links exist to segments found only online.");
		call checker_print_$skip;

		call PRINT_CHAIN (found_online_head.first, 0, 0);
	     end;

	if special_link_head.count > 0
	then do;
		call THROW;
		call checker_print_$error (CHECKER_WARNING, (0), "crossref",
		     "Links exist to special ""*"" segnames.");
		call checker_print_$skip;

		call PRINT_CHAIN (special_link_head.first, 0, 0);
	     end;
	return;

THROW:
     procedure;
	call checker_print_$page;
	call checker_print_$skip;
     end THROW;

PRINT_CHAIN:
     procedure (first_cep, severity, code);
	declare first_cep		 ptr unal;
	declare last_s		 char (32);
	declare severity		 fixed bin;
	declare code		 fixed bin (35);
	declare line		 char (136);
	declare column		 fixed bin;

	line = "";
	column = 1;
	last_s = "";
	do cep = first_cep repeat chain_entry.next while (cep ^= null);
	     if chain_entry.linker ^= last_s
	     then do;
		     if column > 1
		     then call checker_print_ ("^a", line);
						/* leftovers */
		     call checker_print_$skip;
		     call checker_print_ ("^a", chain_entry.linker);
		     line = "";
		     column = 1;
		end;

	     last_s = chain_entry.linker;
	     if length (rtrim (chain_entry.link)) <= length (line) - column + 1
	     then begin;
		     declare next		      char (length (rtrim (chain_entry.link)) + 1)
					      defined (line) position (column);
		     next = chain_entry.link;
		     column = column + length (next);
		end;
	     else do;
		     call checker_print_ ("^a", line);
		     column = length (rtrim (chain_entry.link)) + 2;
		     line = chain_entry.link;
		end;
	     if severity > 0
	     then call checker_print_$error_term (severity, code, "", "^a links to ^a.", chain_entry.linker,
		     chain_entry.link);


	end;
	if column > 1
	then call checker_print_ ("^a", line);		/* leftovers */
     end PRINT_CHAIN;
     end REPORT;

FILL_HASH_TABLE:
     procedure;
	declare sx		 fixed bin (18);
	declare nx		 fixed bin;
	do sx = slt.first_sup_seg to slt.last_sup_seg, slt.first_init_seg to slt.last_init_seg;
	     namep = ptr (checker_data_$name_table_ptr, addr (slt.seg (sx)) -> slte_uns.names_ptr);
	     do nx = 1 to segnam.count;
		call hash_$in (htp, segnam.names (nx).name, unspec (sx), (0));
	     end;
	end;
     end FILL_HASH_TABLE;

     end checker_crossref_;
