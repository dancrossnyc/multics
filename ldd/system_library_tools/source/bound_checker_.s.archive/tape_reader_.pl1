/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(87-01-13,GDixon), approve(87-04-16,MCR7614),
     audit(87-05-21,Farley), install(87-07-15,MR12.1-1040):
     Add support for storing boot program as first segment of MST image stored
     in a file.
                                                   END HISTORY COMMENTS */


/* TAPE_READER_ - Procedure to Read MST Checker Input Tape.
	iox'ed 11/3/76 by Noel I. Morris	*/

/* Modified 8/82 BIM signal EOF, backup */

/* format: style2 */

tape_reader_:
     proc (Data_ptr, N_words);

	dcl     Data_ptr		 ptr;
	dcl     N_words		 fixed bin (18);

	dcl     atd		 char (256);
	dcl     attach_descrip_ptr	 ptr;
	dcl     code		 fixed bin (35);
	dcl     1 control_word	 aligned,
		2 type		 fixed bin (17) unaligned,
		2 count		 fixed bin (18) uns unal,
	        (name_len, seg_len)	 fixed bin (18);

	dcl     attach_descrip	 char (500) varying based (attach_descrip_ptr);

	dcl     checker_data_$buffer_ptr
				 ptr ext;
	dcl     checker_data_$input_iocbp
				 ptr ext;
	dcl     checker_data_$file_attachment
				 bit (1) aligned ext;
	dcl     error_table_$end_of_info
				 fixed bin (35) ext;

	dcl     (addr, char, divide, length, ltrim, min, null, rtrim, size, substr)
				 builtin;

	dcl     com_err_		 entry () options (variable),
	        sub_err_		 entry () options (variable);

	dcl     MST_tape_eof_	 condition;


	if N_words = 0
	then return;

	call iox_$get_chars (checker_data_$input_iocbp, Data_ptr, N_words * 4, (0), code);

	if code = error_table_$end_of_info
	then signal MST_tape_eof_;
	else if code ^= 0
	then call sub_err_ (code, "checker_tape", ACTION_CANT_RESTART, null (), (0), "Error reading MST.");

	return;

/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* REWIND:						       */
/* 1) Close I/O switch to which MST attached.			       */
/* 2) Reopen the switch, thereby repositioning to beginning of MST.	       */
/* 3) Read, skip-over boot program.  On tape, boot program is in the tape    */
/*    label, invisible to iox_$get_chars.  In a file, boot program is the    */
/*    first "segment" stored in MST file, and IS visible to iox_$get_chars.  */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

rewind:
     entry (boot_prog_name, boot_prog_len);

	dcl     boot_prog_name	 char (32),
	        boot_prog_len	 fixed bin (21);

	call iox_$close (checker_data_$input_iocbp, code);
	if code ^= 0
	then call sub_err_ (code, "checker_tape", ACTION_CANT_RESTART, null (), (0), "Error closing MST.");
	call iox_$open (checker_data_$input_iocbp, Stream_input, ""b, code);
	if code ^= 0
	then call sub_err_ (code, "checker_tape", ACTION_CANT_RESTART, null (), (0), "Error reopening MST.");

	bpi.version = BOOT_PROGRAM_INFO_VERSION_1;
	bpi.boot_program_name = "";
	bpi.boot_program_text_length = 0;
	bpi.boot_program_ptr = null;
	if checker_data_$file_attachment
	then do;					/* file input    */
		call tape_reader_ (addr (control_word), size (control_word));
		if control_word.type = -1
		then do;				/* bootload program control word */
						/* It is written as a name, followed by the pgm.	*/
						/* set version */
			name_len = divide (length (boot_program_info.boot_program_name), CHARS_PER_WORD, 18, 0);
			seg_len = control_word.count - name_len;
						/* set copy length */
			call tape_reader_ (addr (bpi.boot_program_name), name_len);
			call tape_reader_ (checker_data_$buffer_ptr, seg_len);
						/* copy boot program in to temp seg */
			bpi.boot_program_text_length = seg_len;
		     end;
		else do;
			call iox_$close (checker_data_$input_iocbp, (0));
			call iox_$open (checker_data_$input_iocbp, Stream_input, ""b, (0));
		     end;
	     end;
	else do;					/* tape input    */
		call iox_$control (checker_data_$input_iocbp, "get_boot_program", addr (boot_program_info), code);
		if code ^= 0
		then do;				/* can't do it */
			call sub_err_ (code, "checker_tape", ACTION_CANT_RESTART, null (), (0),
			     "Error getting boot program info from MST.");
			return;
		     end;
	     end;
	boot_prog_name = bpi.boot_program_name;
	boot_prog_len = bpi.boot_program_text_length;

	return;

/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* INITIALIZATION:						       */
/* 1) If generate_mst -hold was given, then the mst_tape I/O switch remains  */
/*    attached to the MST.  Use it if it is attached.		       */
/* 2) Otherwise, make our own attachment to appropriate tape or file.  For   */
/*    files, remember to skip over the boot program.		       */
/* 3) Record in checker_data_$file_attachment whether we are dealing with    */
/*    an MST tape or a tape image stored in a file.		       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

init:
     entry (CALLER, name, density, file, Acode);

	dcl     CALLER		 char (*),
	        name		 char (*),
	        density		 fixed bin,
	        file		 bit (1) aligned,
	        Acode		 fixed bin (35);

	checker_data_$file_attachment = "0"b;
	call iox_$look_iocb ("mst_tape", checker_data_$input_iocbp, Acode);
	if Acode = 0
	then call iox_$open (checker_data_$input_iocbp, Stream_input, ""b, Acode);
	if Acode = 0
	then do;					/* ALREADY THERE */
		attach_descrip_ptr = checker_data_$input_iocbp -> iocb.actual_iocb_ptr -> iocb.attach_descrip_ptr;
		if substr (attach_descrip, 1, min (length (attach_descrip), length ("vfile_ "))) = "vfile_ "
		then checker_data_$file_attachment = "1"b;
	     end;
	else do;					/* not yet attached */
		if file
		then do;
			atd = "vfile_ " || rtrim (name) || " -old";
			checker_data_$file_attachment = "1"b;
		     end;
		else do;
			atd = "tape_mult_ " || rtrim (name);
			if density ^= 0
			then atd = rtrim (atd) || " -density " || ltrim (char (density));
		     end;

		call iox_$attach_name ("mst_tape", checker_data_$input_iocbp, atd, null (), Acode);
		if Acode ^= 0
		then do;
			call com_err_ (Acode, CALLER, "Attaching ^a.", atd);
			return;
		     end;

		call iox_$open (checker_data_$input_iocbp, Stream_input, "0"b, Acode);
		if Acode ^= 0
		then do;
			call com_err_ (Acode, CALLER, "Opening mst tape input.");
			return;
		     end;
	     end;
	call rewind (bpi.boot_program_name, bpi.boot_program_text_length);
						/* position beyond boot pgm*/
	return;



final:
     entry;

	if checker_data_$input_iocbp ^= null
	then do;
		call iox_$close (checker_data_$input_iocbp, code);
		call iox_$detach_iocb (checker_data_$input_iocbp, code);
		checker_data_$input_iocbp = null;
	     end;

	return;

%include iocb;

%include iox_entries;

%include iox_modes;

%include sub_err_flags;

%include system_constants;

%include tape_mult_boot_info;

	dcl     1 bpi		 aligned like boot_program_info;

     end tape_reader_;
