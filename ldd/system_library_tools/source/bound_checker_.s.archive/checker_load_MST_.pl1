/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(87-01-13,GDixon), approve(87-04-16,MCR7614),
     audit(87-05-21,Farley), install(87-07-15,MR12.1-1040):
     Add support for storing boot program as first segment of MST image stored
     in a file.
                                                   END HISTORY COMMENTS */


/* checker_load_MST_.pl1 -- eat an entire Multics system tape */
/* format: style2 */
/* BIM 8/82, bugfix to linkage sections 11/82 */
/* Modified by Keith Loepere to handle collections in which objects aren't 
   loaded into segments. */
/* Modified 3/84 by Keith Loepere for "unpaged segs" and bugfixes. */
/* Modified 1/85 by Keith Loepere to really understand unloaded collections. */

checker_load_MST_:
     procedure;


/* This program reads an MST, building the data structure */
/* needed to do a crossreference later. As it goes, it checks */
/* for a variety of errors. Emphasis is given to errors made */
/* be the preparer of the header file, RATHER than on generate_mst */
/* gratuitously screwing up. Useful data on each segment is printed, */
/* and serious errors (overflowed segments) produce com_err_ calls. */

/* We expect tape_reader_ to signal MST_tape_eof_ if it runs out of */
/* tape. */

	dcl     absolute_pathname_	 entry (char (*), char (*), fixed bin (35));

	dcl     checker_print_	 entry options (variable);
	dcl     checker_print_$error	 entry options (variable);
	dcl     checker_print_$skip	 entry;
	dcl     checker_print_$page	 entry;
	dcl     ioa_		 entry () options (variable);
	dcl     tape_reader_	 entry (ptr, fixed bin (18));
	dcl     sslt_manager_$build_entry
				 entry (ptr, ptr, fixed bin (17));
	dcl     sslt_manager_$get_seg_num
				 entry (char (32), fixed bin (18), fixed bin (35));
	dcl     object_info_$brief	 entry (ptr, fixed bin (24), ptr, fixed bin (35));

	dcl     com_err_		 entry () options (variable);
	dcl     error_table_$namedup	 fixed bin (35) ext static;
	dcl     sys_info$max_seg_size	 fixed bin (35) ext static;
	dcl     ME		 char (32) init ("checker_load_MST_") int static options (constant);

	dcl     (addr, addrel, after, baseno, before, bin, char, currentsize, divide, hbound, index, max, min, ptr,
	        substr, sum, unspec, size)
				 builtin;


	dcl     collection_started	 bit (1) aligned;
	dcl     header_ptr		 pointer;
	dcl     header_area		 (1000) bit (36) aligned;
	dcl     HEADER_MAX_SIZE	 fixed bin init (1000) int static options (constant);


	declare 1 control_word	 aligned,
		2 type		 fixed bin (18) uns unal,
		2 count		 fixed bin (18) uns unal;

	declare 1 collection_mark	 aligned,
		2 major		 fixed bin (18) uns unal,
		2 minor		 fixed bin (18) uns unal;

	declare (
	        SEGMENT		 init (1),
	        HEADER		 init (0),
	        COLLECTION_MARK	 init (2)
	        )			 fixed bin (18) uns int static options (constant);

/* format: off */
%page; %include slt;
%page; %include slte;
%page; %include object_link_dcls;
%page; %include definition_dcls;
%page; %include checker_dcls_;
%page; %include object_info;
%page; %include tape_mult_boot_info;
/* format: on */

	dcl     1 oi		 aligned like object_info;

	dcl     1 cur_slte		 aligned like slte_uns;
	dcl     Collection		 fixed bin;
	dcl     code		 fixed bin (35);
	dcl     hc_seg_ptr		 ptr;
	dcl     segment_name	 character (32);
	dcl     segment_number	 fixed bin (18);
	dcl     nx		 fixed bin;
	dcl     (first, second, third) char (32);
	dcl     MST_tape_eof_	 condition;
%page;

	sltp = checker_data_$slt_ptr;			/* pointer to simulated slt */
	names_ptr = checker_data_$name_table_ptr;

	sltep, header_ptr = addr (header_area);
	namep = addrel (header_ptr, size (slte));	/* SLT entry is 4 words long */


	call CHECK_BOOTABLE_LABEL;


/* First, report on the collection 0 segments. Trust the data that */
/* sslt_init_ put in the slt for bound_bootload_1 */


	call checker_print_ ("Begin collection 0.0:");
	meters.per_collection (0).read = "1"b;

	Collection = 0;

/* The first control word :: the header for BBL1 */

	call Read_Control_Word;
	if control_word.type ^= HEADER
	then call checker_print_$error (CHECKER_FATAL, (0), "tape format", "Tape does not begin with header record.");

	call tape_reader_ (addr (header_area), (control_word.count));
						/* take the header */
	do segment_number = slt.first_sup_seg to slt.last_sup_seg;
	     call checker_print_$skip;
	     call PROCESS_SLTE (segment_number);	/* do for slte data */
	end;
	do segment_number = slt.first_init_seg to slt.last_init_seg;
	     call checker_print_$skip;
	     call PROCESS_SLTE (segment_number);	/* ditto */
	end;

	call checker_print_$skip;
	call checker_print_ ("End collection 0.0");

	call COLLECTION_SUMMARY;


/* Read in the first segment, which has already been described by the */
/* collection 0 template. This code could be expanded to check if */
/* it bears some reasonable resemblance to the template. */

	call Read_Control_Word;			/* Control word for first seg */
	call tape_reader_ (checker_data_$buffer_ptr, (control_word.count));

/* Fine, preliminaries are set */

	on MST_tape_eof_ go to NO_MORE_COLLECTIONS;

	do while ("1"b);
	     Collection = Collection + 1;
	     if Collection > hbound (meters.per_collection, 1)
	     then do;
		     call com_err_ (code, ME, "More than ^d collections.", Collection - 1);
		     return;
		end;
	     call LOAD_ONE_COLLECTION;
	     call COLLECTION_SUMMARY;
	end;

NO_MORE_COLLECTIONS:
	call TOTAL_SUMMARY;
	return;					/* Let our caller move on to the cref */
%page;
LOAD_ONE_COLLECTION:
     procedure;

	declare expect_link		 bit (1) aligned;
	declare expect_defs		 bit (1) aligned;
	declare 1 prev_slte		 aligned like slte_uns;
	declare text_segment_number	 fixed bin (18);

	unspec (prev_slte) = ""b;
	expect_link, expect_defs = "0"b;
	text_segment_number = -1;
	collection_started = "0"b;


LOAD_LOOP:
	call Read_Control_Word;


/* Allow EOF to take on last collection */

	if ^collection_started
	then do;
		meters.per_collection (Collection).read = "1"b;
		call checker_print_$page;
		call checker_print_ ("Begin collection ^d.^d: ^[WIRED ENVIROMNENT^]",
		     checker_data_$collection_names (Collection).major,
		     checker_data_$collection_names (Collection).minor,
		     Collection <= checker_data_$last_wired_collection);
		collection_started = "1"b;
	     end;

	call checker_print_$skip;

	if control_word.type = COLLECTION_MARK
	then do;
		if expect_link | expect_defs
		then do;
			call checker_print_$error (CHECKER_SEVERE, (0), "tape format",
			     " Collection ended without expected ^[definitions^;linkage^] segment.", expect_link);
		     end;
		if control_word.count ^= 1
		then call checker_print_$error (CHECKER_FATAL, (0), "tape format",
			"Collection mark not one word long.");

		call tape_reader_ (addr (collection_mark), (control_word.count));
		if collection_mark.major ^= checker_data_$collection_names (Collection).major
		     | collection_mark.minor ^= checker_data_$collection_names (Collection).minor
		then call checker_print_$error (CHECKER_WARNING, (0), "collection mark",
			"Collection ^d.^d ended with mark ^d.^d.",
			checker_data_$collection_names (Collection).major,
			checker_data_$collection_names (Collection).minor, collection_mark.major,
			collection_mark.minor);

		meters.per_collection (Collection).mark.major = collection_mark.major;
		meters.per_collection (Collection).mark.minor = collection_mark.minor;
		call checker_print_ ("Collection mark ^d.^d", collection_mark.major, collection_mark.minor);
		call ioa_ ("Read collection ^d.^d", collection_mark.major, collection_mark.minor);

		return;
	     end;

	else if control_word.type ^= HEADER
	then call checker_print_$error (CHECKER_FATAL, (0), "tape format",
		"Segment ^a was not followed by a header record.", segment_name);

/* Process header record */

	if (control_word.count > HEADER_MAX_SIZE) | (control_word.count < 4)
	then call checker_print_$error (CHECKER_FATAL, (0), "tape format", "Header size ^d unreasonable.",
		control_word.count);

/* So far, a well-formed tape */

/* Check in a segment */

	call tape_reader_ (addr (header_area), (control_word.count));

	cur_slte = addr (header_area) -> slte_uns;

/* check for duplicated segment names */
	segment_name = segnam.names (1).name;		/* primary name */

	if checker_data_$loaded (Collection)
	then do nx = 1 to segnam.count;
		call sslt_manager_$get_seg_num (segnam.names (nx).name, segment_number, code);
		if code = 0
		then call checker_print_$error (CHECKER_SEVERE, error_table_$namedup, "segment_name",
			"Name ^a already on seg # ^o", segnam.names (nx).name, segment_number);
	     end;

/* Now get control word for seg itself */

	call Read_Control_Word;

	if control_word.type ^= SEGMENT
	then call checker_print_$error (CHECKER_FATAL, (0), segment_name, "Segment header not followed by contents.");

	if ^checker_data_$loaded (Collection)		/* object is specially handled */
	then do;
		call PROCESS_SPECIAL_SLTE (addr (header_area));
		call tape_reader_ (checker_data_$buffer_ptr, (control_word.count));
		go to LOAD_LOOP;
	     end;

	if ^cur_slte.defs & ^(cur_slte.link_sect & prev_slte.combine_link)
	then do;					/* If a segment is to be created ... */
		call sslt_manager_$build_entry (addr (header_area), hc_seg_ptr, (0));

		segment_number = bin (baseno (hc_seg_ptr), 18);
		call PROCESS_SLTE (segment_number);	/* classify and record */
						/* and set cur_slte to be the version slt_manager_ cooked up */
	     end;

/* now see what sort of beast */

	if cur_slte.firmware_seg
	then do;
		call tape_reader_ (checker_data_$buffer_ptr, (control_word.count));
		go to LOAD_LOOP;
	     end;

	if cur_slte.link_sect			/* somebodies linkage */
	then do;
		if ^expect_link			/* orphan linkage ? */
		then call checker_print_$error (CHECKER_FATAL, (0), "tape format", "Unexpected linkage section ^a.",
			segment_name);

		expect_link = "0"b;
		expect_defs = "1"b;			/* just as night follows day */

		if prev_slte.combine_link		/* this is to be combined */
		then call ENTER_COMBINED_LINKAGE;
		else call ENTER_UNCOMBINED_LINKAGE;
	     end;

	else if cur_slte.defs
	then do;
		if ^expect_defs
		then call checker_print_$error (CHECKER_FATAL, (0), "tape format", "Unexpected definitions seg ^a.",
			segment_name);

		call ENTER_DEFINITIONS;
		expect_defs = "0"b;
	     end;

	else do;					/* A text section, by george */
		if expect_link | expect_defs
		then call checker_print_$error (CHECKER_FATAL, (0), "tape format", "Unexpected text section ^a.",
			segment_name);


		expect_link = cur_slte.link_provided;

		call ENTER_TEXT;
		text_segment_number = segment_number;
	     end;
	prev_slte = cur_slte;
	go to LOAD_LOOP;
%page;
ENTER_TEXT:
     procedure;

	call tape_reader_ (checker_data_$buffer_ptr, (control_word.count));
						/* skip it, at least */

	if cur_slte.ringbrack (1) = 0			/* hardcore segments have no linkage, or linkage */
						/* stripped off */
	then return;

/* For user ring segments, the linkage and defs are still in the segment */

	if cur_slte.bit_count ^= (control_word.count * 36)/* match? */
	then return;

	oi.version_number = object_info_version_2;
	call object_info_$brief (checker_data_$buffer_ptr, (cur_slte.bit_count), addr (oi), code);
	if code = 0
	then do;
		call PROCESS_LINKAGE (segment_number, oi.linkp, (oi.llng));
		call PROCESS_DEFS (segment_number, oi.defp, (oi.dlng));
	     end;

     end ENTER_TEXT;
%page;
ENTER_COMBINED_LINKAGE:
     procedure;

/* See what linkage section is in question */

	if /* tree */ prev_slte.link_sect_wired
	then if prev_slte.init_seg
	     then do;				/* WI linkage */
		     if Collection <= checker_data_$last_wired_collection
		     then do;
			     meters.wired_wi_linkage_used = meters.wired_wi_linkage_used + control_word.count;
			     call CHECK (meters.wired_wi_linkage_size, meters.wired_wi_linkage_used, "1"b /*wired*/,
				"wi_linkage", meters.overflown.wired_wi_linkage);
			end;
		     meters.paged_wi_linkage_used = meters.paged_wi_linkage_used + control_word.count;
		     call CHECK (meters.paged_wi_linkage_size, meters.paged_wi_linkage_used, "0"b, "wi_linkage",
			meters.overflown.paged_wi_linkage);
		     meters.per_collection (Collection).wi_linkage_used =
			meters.per_collection (Collection).wi_linkage_used + control_word.count;
		end;
	     else do;				/* WS linkage */
		     if Collection <= checker_data_$last_wired_collection
		     then do;
			     meters.wired_ws_linkage_used = meters.wired_ws_linkage_used + control_word.count;
			     call CHECK (meters.wired_ws_linkage_size, meters.wired_ws_linkage_used, "1"b,
				"ws_linkage", meters.overflown.wired_ws_linkage);
			end;

		     meters.paged_ws_linkage_used = meters.paged_ws_linkage_used + control_word.count;
		     call CHECK (meters.paged_ws_linkage_size, meters.paged_ws_linkage_used, "0"b, "ws_linkage",
			meters.overflown.paged_ws_linkage);
		     meters.per_collection (Collection).ws_linkage_used =
			meters.per_collection (Collection).ws_linkage_used + control_word.count;
		end;
	else if prev_slte.init_seg			/* AI linkage */
	     then do;
		     if Collection <= checker_data_$last_wired_collection
		     then do;
			     meters.wired_ai_linkage_used = meters.wired_ai_linkage_used + control_word.count;
			     call CHECK (meters.wired_ai_linkage_size, meters.wired_ai_linkage_used, "1"b,
				"ai_linkage", meters.overflown.wired_ai_linkage);
			end;
		     meters.paged_ai_linkage_used = meters.paged_ai_linkage_used + control_word.count;
		     call CHECK (meters.paged_ai_linkage_size, meters.paged_ai_linkage_used, "0"b, "ai_linkage",
			meters.overflown.paged_ai_linkage);
		     meters.per_collection (Collection).ai_linkage_used =
			meters.per_collection (Collection).ai_linkage_used + control_word.count;
		end;
	     else do;				/* AS linkage */
		     if Collection <= checker_data_$last_wired_collection
		     then do;
			     meters.wired_as_linkage_used = meters.wired_as_linkage_used + control_word.count;
			     call CHECK (meters.wired_as_linkage_size, meters.wired_as_linkage_used, "1"b,
				"as_linkage", meters.overflown.wired_as_linkage);
			end;
		     meters.paged_as_linkage_used = meters.paged_as_linkage_used + control_word.count;
		     call CHECK (meters.paged_as_linkage_size, meters.paged_as_linkage_used, "1"b, "as_linkage",
			meters.overflown.paged_ai_linkage);
		     meters.per_collection (Collection).as_linkage_used =
			meters.per_collection (Collection).as_linkage_used + control_word.count;
		end;

ENTER_UNCOMBINED_LINKAGE:
     entry;

	call tape_reader_ (checker_data_$buffer_ptr, (control_word.count));
	checker_data_$buffer_ptr -> linkage_header.segment_number = text_segment_number;
	call PROCESS_LINKAGE (text_segment_number, checker_data_$buffer_ptr, (control_word.count));
	return;
%page;
CHECK:
     procedure (limit, amount, paged, name, printed);
	declare limit		 fixed bin;
	declare amount		 fixed bin;
	declare paged		 bit (1) aligned;
	declare name		 char (32);
	declare printed		 bit (1) unaligned;

	if limit < 0
	then return;				/* as yet unknown */
	if amount < limit
	then return;				/* clear */

	if ^printed
	then call checker_print_$error (CHECKER_SEVERE, (0), segment_name,
		" ^[PAGED^;WIRED^] ^a OVERFLOW. Increase ^[max_length^;cur_length^] of ^a.", paged, name, paged, name)
		;
	else printed = "1"b;
     end CHECK;

     end ENTER_COMBINED_LINKAGE;
%page;
ENTER_DEFINITIONS:
     procedure;

	if Collection <= checker_data_$last_wired_collection
	then meters.wired_definitions_used = meters.wired_definitions_used + control_word.count;
	meters.paged_definitions_used = meters.paged_definitions_used + control_word.count;
	meters.per_collection (Collection).definitions_used =
	     meters.per_collection (Collection).definitions_used + control_word.count;
	if meters.wired_definitions_size > 0
	then if Collection <= checker_data_$last_wired_collection
	     then if meters.wired_definitions_used > meters.wired_definitions_size
		then do;
			if ^meters.overflown.wired_definitions
			then call checker_print_$error (CHECKER_SEVERE, (0), segment_name,
				" WIRED DEFINITIONS OVERFLOW. Increase cur_length for definitions_");
			meters.overflown.wired_definitions = "1"b;
		     end;
		else ;
	     else if meters.paged_definitions_used > meters.paged_definitions_size
	     then do;
		     if ^meters.overflown.paged_definitions
		     then call checker_print_$error (CHECKER_SEVERE, (0), segment_name,
			     " PAGED DEFINITIONS OVERFLOW. Increase max_length of definitions_.");
		     meters.overflown.paged_definitions = "1"b;
		end;

	call tape_reader_ (checker_data_$buffer_ptr, (control_word.count));
	call PROCESS_DEFS (text_segment_number, checker_data_$buffer_ptr, (control_word.count));
     end ENTER_DEFINITIONS;
%page;
PROCESS_LINKAGE:
     procedure (segment_number, link_ptr, links_length);

	declare segment_number	 fixed bin (18);
	declare link_ptr		 pointer;
	declare links_ptr		 pointer;
	declare links_length	 fixed bin (18) uns;
	declare links_count		 fixed bin;
	declare lx		 fixed bin;
	declare section_length	 fixed bin;


	section_length = min (links_length, link_ptr -> virgin_linkage_header.linkage_section_lng);

	if section_length ^> size (virgin_linkage_header)
	then return;

	links_count = divide (section_length, 2, 17, 0);	/* 2 words each */

	if links_count = 0
	then return;

/* and see if the count we have is good */

	links_ptr = addrel (link_ptr, link_ptr -> linkage_header.begin_links);
	begin;
	     declare 1 links	      (1:links_count) aligned like object_link based (links_ptr);
	     do lx = 1 to links_count;
		if links (lx).tag ^= "46"b3 | links (lx).mbz ^= "0"b | links (lx).mbz2 ^= "0"b
		then do;
			links_count = lx - 1;
			goto COUNTED;
		     end;
	     end;
COUNTED:
	end;

	a_n_links = links_count;
	allocate segment_links in (checker_area);
	unspec (segment_links.per_link) = ""b;

	begin;
	     declare 1 links	      (1:links_count) aligned like object_link based (links_ptr);
	     do lx = 1 to links_count;
		segment_links.expression_relps (lx) = links (lx).expression_relp;
		segment_links.modifiers (lx) = links (lx).modifier;
	     end;
	end;
	meters.per_segment (segment_number).link_ptr = segment_links_ptr;
     end PROCESS_LINKAGE;
%page;
PROCESS_DEFS:
     procedure (segno, defs_ptr, defs_length);
	declare defs_ptr		 pointer;
	declare defs_length		 fixed bin (18) uns;
	declare dptr		 pointer;
	declare segno		 fixed bin (18);

	a_defs_length = defs_length;
	allocate segment_defs in (checker_area);

	dptr = addr (segment_defs.definitions);
	begin;
	     declare to		      (defs_length) bit (36) aligned based (dptr);
	     declare from		      (defs_length) bit (36) aligned based (defs_ptr);
	     to = from;
	end;
	meters.per_segment (segno).defs_ptr = segment_defs_ptr;
     end PROCESS_DEFS;
     end LOAD_ONE_COLLECTION;
%page;
PROCESS_SLTE:
     procedure (p_segment_number);
	declare p_segment_number	 fixed bin (18);
	declare p_sltep		 ptr;

	declare segment_number	 fixed bin (18);
	declare this_sltep		 ptr;
	declare 1 this_slte		 aligned like slte_uns based (this_sltep);
	declare this_namep		 ptr;
	declare this_pathp		 ptr;
	declare this_aclp		 ptr;
	declare a_name		 char (32);
	declare next_name		 fixed bin;
	declare aclx		 fixed bin;

	declare (word_length, wired_length)
				 fixed bin (19);
	declare paged_length	 fixed bin;

	segment_number = p_segment_number;
	this_sltep = addr (slt.seg (segment_number));
	this_namep = ptr (checker_data_$name_table_ptr, this_slte.names_ptr);
	if this_sltep -> slte.branch_required
	then do;
		this_pathp = ptr (checker_data_$name_table_ptr, this_slte.path_ptr);
		this_aclp = addr (this_pathp -> path.acls);
	     end;

	call REPORT_SEGMENT;

/* meter this object */

	meters.per_collection (Collection).segment_count = meters.per_collection (Collection).segment_count + 1;
	if Collection <= checker_data_$last_wired_collection
	then do;
		meters.wired_sdw_count = meters.wired_sdw_count + 1;
		meters.wired_slte_count = meters.wired_slte_count + 1;
		meters.wired_nt_used = meters.wired_nt_used + currentsize (this_namep -> segnam);
		if this_slte.branch_required
		then meters.wired_nt_used = meters.wired_nt_used + currentsize (this_pathp -> path);
		if this_slte.acl_provided
		then meters.wired_nt_used = meters.wired_nt_used + currentsize (this_aclp -> acls) - 1;
						/* overlaps path */

		if meters.wired_nt_size > 0
		then if meters.wired_nt_used > meters.wired_nt_size
		     then do;
			     if ^meters.overflown.wired_nt
			     then call checker_print_$error (CHECKER_SEVERE, (0), segment_name,
				     " WIRED NAME_TABLE OVERFLOW. Increase cur_length of name_table in template_slt_.cds"
				     );
			     meters.overflown.wired_nt = "1"b;
			end;
	     end;
	else do;
		meters.paged_sdw_count = meters.paged_sdw_count + 1;
		meters.paged_slte_count = meters.paged_slte_count + 1;
		meters.paged_nt_used = meters.paged_nt_used + currentsize (this_namep -> segnam);
		if this_slte.branch_required
		then meters.paged_nt_used = meters.paged_nt_used + currentsize (this_pathp -> path);
		if this_slte.acl_provided
		then meters.paged_nt_used = meters.paged_nt_used + currentsize (this_aclp -> acls) - 1;
						/* overlaps path */
		if meters.paged_nt_size > 0
		then if meters.paged_nt_used > meters.paged_nt_size
		     then do;
			     if ^meters.overflown.paged_nt
			     then call checker_print_$error (CHECKER_SEVERE, (0), segment_name,
				     " PAGED NAME_TABLE OVERFLOW. Increase max_length of name_table in template_slt_.cds"
				     );
			     meters.overflown.paged_nt = "1"b;
			end;
	     end;

	if Collection <= checker_data_$last_text_wired_collection
	then if ^this_slte.layout_seg			/* not taken from free pool */
	     then meters.per_collection (Collection).words_used =
		     meters.per_collection (Collection).words_used + wired_length;

	meters.per_collection (Collection).name_table_used =
	     meters.per_collection (Collection).name_table_used + currentsize (this_namep -> segnam);
	if this_slte.branch_required
	then meters.per_collection (Collection).name_table_used =
		meters.per_collection (Collection).name_table_used + currentsize (this_pathp -> path);
	if this_slte.acl_provided
	then meters.name_table_used = meters.name_table_used + currentsize (this_aclp -> acls) - 1;

	if this_slte.paged
	then meters.per_collection (Collection).pages_used =
		meters.per_collection (Collection).pages_used + paged_length;

	if this_slte.wired & this_slte.paged
	then meters.per_collection (Collection).wired_pages_used =
		meters.per_collection (Collection).wired_pages_used + paged_length;

	if this_slte.temp_seg
	then meters.per_collection (Collection).temp_segment_count =
		meters.per_collection (Collection).temp_segment_count + 1;

	else if this_slte.init_seg
	then meters.per_collection (Collection).init_segment_count =
		meters.per_collection (Collection).init_segment_count + 1;

	else meters.per_collection (Collection).perm_segment_count =
		meters.per_collection (Collection).perm_segment_count + 1;

	if this_slte.ringbrack (1) > 0
	then do;
		meters.per_collection (Collection).user_ring_segment_count =
		     meters.per_collection (Collection).user_ring_segment_count + 1;
		meters.per_collection (Collection).user_ring_segment_pages =
		     meters.per_collection (Collection).user_ring_segment_pages + paged_length;
	     end;

	if meters.per_collection (Collection).first_segment = -1
	then meters.per_collection (Collection).last_segment, meters.per_collection (Collection).first_segment =
		segment_number;
	else do;
		meters.per_segment (meters.per_collection (Collection).last_segment).next = segment_number;
		meters.per_collection (Collection).last_segment = segment_number;
	     end;

	meters.per_segment (segment_number).collection = Collection;

	call INTERESTING_SEGMENT;
	return;
%page;
PROCESS_SPECIAL_SLTE:
     entry (p_sltep);

	this_sltep = p_sltep;
	this_namep = addrel (this_sltep, size (slte));
	if this_sltep -> slte.branch_required
	then do;
		this_pathp = addrel (this_namep, currentsize (this_namep -> segnam));
		this_aclp = addr (this_pathp -> path.acls);
	     end;

	call REPORT_SEGMENT;

/* meter this object */

	meters.per_collection (Collection).segment_count = meters.per_collection (Collection).segment_count + 1;
	if Collection <= checker_data_$last_wired_collection
	then meters.per_collection (Collection).words_used =
		meters.per_collection (Collection).words_used + wired_length;

	if this_slte.paged
	then meters.per_collection (Collection).pages_used =
		meters.per_collection (Collection).pages_used + paged_length;

	if this_slte.wired & this_slte.paged
	then meters.per_collection (Collection).wired_pages_used =
		meters.per_collection (Collection).wired_pages_used + paged_length;

	if Collection <= checker_data_$last_supervisor_collection
	then meters.per_collection (Collection).temp_segment_count =
		meters.per_collection (Collection).temp_segment_count + 1;

	else meters.per_collection (Collection).perm_segment_count =
		meters.per_collection (Collection).perm_segment_count + 1;

	if this_slte.ringbrack (1) > 0
	then do;
		meters.per_collection (Collection).user_ring_segment_count =
		     meters.per_collection (Collection).user_ring_segment_count + 1;
		meters.per_collection (Collection).user_ring_segment_pages =
		     meters.per_collection (Collection).user_ring_segment_pages + paged_length;
	     end;
	return;
%page;
INTERESTING_SEGMENT:
     procedure;

/* See if this segment is one whose size is a limiter */
/* use the global "segment_name" for comparisons */

	if segment_name = "ai_linkage"
	then call SIZES (meters.wired_ai_linkage_size, meters.paged_ai_linkage_size);
	else if segment_name = "as_linkage"
	then call SIZES (meters.wired_as_linkage_size, meters.paged_as_linkage_size);
	else if segment_name = "wi_linkage"
	then call SIZES (meters.wired_wi_linkage_size, meters.paged_wi_linkage_size);
	else if segment_name = "ws_linkage"
	then call SIZES (meters.wired_ws_linkage_size, meters.paged_ws_linkage_size);
	else if segment_name = "definitions_"
	then call SIZES (meters.wired_definitions_size, meters.paged_definitions_size);
	else if segment_name = "name_table"
	then call SIZES (meters.wired_nt_size, meters.paged_nt_size);
	else if segment_name = "dseg"
	then do;
		meters.wired_sdw_count = divide (wired_length, 2, 18, 0);
		meters.paged_sdw_count = 2048;	/* not available from header */
	     end;
	else if segment_name = "slt"
	then do;
		meters.wired_slte_count = divide (wired_length - 8, 4, 19, 0);
						/* header is 4 words slte is 8 words */
		meters.paged_slte_count = divide ((paged_length * 1024) - 8, 4, 19, 0);
	     end;

	return;

SIZES:
     procedure (wired_to_set, paged_to_set);
	declare (wired_to_set, paged_to_set)
				 fixed bin;

	wired_to_set = wired_length;
	paged_to_set = paged_length * 1024;
     end SIZES;

     end INTERESTING_SEGMENT;

SEG_PAGED:
     procedure returns (bit (1) aligned);

/* Should we report paged length? */

	return (this_slte.ringbrack (1) > 0 /* all user ring segments */
	     | Collection > checker_data_$last_wired_collection /* loaded paged */
	     | (Collection ^> checker_data_$last_wired_collection & /* else */ (this_slte.paged & ^this_slte.temp_seg))
	     /* must stay around */);
     end SEG_PAGED;
%page;
REPORT_SEGMENT:
     procedure;

	segment_name = this_namep -> segnam.names (1).name;

	call checker_print_ (
	     "^32a^2x^[^3o^;^3x^s^]^2x(^1d, ^1d, ^1d)^50t^[read ^]^[execute ^]^[write ^]^[privileged ^]^[encacheable ^]^[gate ^]^[wired^]",
	     segment_name, checker_data_$loaded (Collection), segment_number, slte_uns.ringbrack,
	     substr (this_slte.access, 1, 1), substr (this_slte.access, 2, 1), substr (this_slte.access, 3, 1),
	     substr (this_slte.access, 4, 1), this_slte.cache, this_slte.ringbrack (3) > this_slte.ringbrack (2),
	     this_slte.wired | this_slte.firmware_seg);	/* firmware segs are wired */

/* use the namep from the header */

	if this_namep -> segnam.count > 1
	then a_name = this_namep -> segnam.names (2).name;
	else a_name = "";

	if ^this_slte.init_seg & ^this_slte.temp_seg & ^this_slte.per_process & ^this_slte.firmware_seg
	then next_name = 2;
	else do;
		call checker_print_ ("^5x^32a^50t^[init seg; ^]^[temp seg; ^]^[per process; ^]^[firmware^]", a_name,
		     this_slte.init_seg, this_slte.temp_seg, this_slte.per_process, this_slte.firmware_seg);
		next_name = 3;
	     end;

	word_length = divide (this_slte.bit_count, 36, 24, 0);
	wired_length = divide (word_length + 1023, 1024, 18, 0) * 1024;
	paged_length = max (this_slte.cur_length, this_slte.max_length);

	if this_namep -> segnam.count >= next_name
	then do;
		a_name = this_namep -> segnam.names (next_name).name;
		next_name = next_name + 1;
	     end;
	else a_name = "";

	if this_slte.abs_seg
	then call checker_print_ ("^5x^32a^50tabs seg -- no storage allocated.", a_name);

	else call checker_print_ (
		"^5x^32a^50t^[wired length: ^d words;^;^s^] ^[paged length: ^d pages;^;^s^] ^[max length: ^d pages;^;^s^]",
		a_name, Collection ^> checker_data_$last_wired_collection, wired_length, SEG_PAGED (), paged_length,
		this_slte.branch_required & (this_slte.max_length ^= paged_length & this_slte.max_length ^= 0),
		this_slte.max_length);


	if this_slte.branch_required
	then do;
		if this_namep -> segnam.count >= next_name
		then do;
			a_name = this_namep -> segnam.names (next_name).name;
			next_name = next_name + 1;
		     end;
		else a_name = "";

		call checker_print_ ("^5x^32a^50tpath: ^a>^a", a_name, this_pathp -> path.name, segment_name);
	     end;

	if next_name ^> this_namep -> segnam.count
	then begin;
		declare namex		 fixed bin;
		do namex = next_name to this_namep -> segnam.count by 4;
		     if namex + 3 > this_namep -> segnam.count
		     then do;
			     go to RESIDUE (this_namep -> segnam.count - namex + 1);
RESIDUE (1):
			     call checker_print_ ("^5x^32a", this_namep -> segnam.names (namex).name);
			     go to EXIT_NAMES;
RESIDUE (2):
			     call checker_print_ ("^5x^32a^x^32a", this_namep -> segnam.names (namex).name,
				this_namep -> segnam.names (namex + 1).name);
			     go to EXIT_NAMES;
RESIDUE (3):
			     call checker_print_ ("^5x^32a^x^32a^x^32a", this_namep -> segnam.names (namex).name,
				this_namep -> segnam.names (namex + 1).name,
				this_namep -> segnam.names (namex + 2).name);
EXIT_NAMES:
			end;
		     else call checker_print_ ("^5x^32a^x^32a^x^32a^x^32a", this_namep -> segnam.names (namex).name,
			     this_namep -> segnam.names (namex + 1).name,
			     this_namep -> segnam.names (namex + 2).name,
			     this_namep -> segnam.names (namex + 3).name);
		end;
	     end;

	if this_slte.acl_provided
	then do;
		do aclx = 1 to this_aclp -> acls.count;
		     call checker_print_ ("^5x^[null^]^[r^]^[e^]^[w^]^10t^32a",
			substr (this_aclp -> acls.mode (aclx), 1, 3) = "000"b,
			substr (this_aclp -> acls.mode (aclx), 1, 1), substr (this_aclp -> acls.mode (aclx), 2, 1),
			substr (this_aclp -> acls.mode (aclx), 3, 1), this_aclp -> acls.userid (aclx));
		end;
	     end;

/* Now check for mistakes */


	if this_slte.temp_seg & ^this_slte.init_seg
	then call checker_print_$error (CHECKER_SEVERE, (0), segment_name,
		" Temp seg but not init seg, will not be deleted.");

	if ^substr (this_slte.access, 1, 1) & ^this_slte.abs_seg
	then call checker_print_$error (CHECKER_SEVERE, (0), segment_name, " No read access in SDW");

	if this_slte.branch_required & ^this_slte.paged
	then call checker_print_$error (CHECKER_SEVERE, (0), segment_name, " Only paged segments may have branches.");

	if this_slte.branch_required & this_slte.init_seg
	then call checker_print_$error (CHECKER_SEVERE, (0), segment_name, "  Init segs may not have branches.");

	if this_slte.paged & (this_slte.max_length ^= 0) & (this_slte.max_length < this_slte.cur_length)
	then call checker_print_$error (CHECKER_SEVERE, (0), segment_name, " Max length < Cur length.");

	if this_slte.paged & (this_slte.cur_length * 1024) < word_length
	then call checker_print_$error (CHECKER_SEVERE, (0), segment_name, " Cur length < Bit count.");

	if this_slte.ringbrack (1) > this_slte.ringbrack (2) | this_slte.ringbrack (1) > this_slte.ringbrack (3)
	     | this_slte.ringbrack (2) > this_slte.ringbrack (3)
	then call checker_print_$error (CHECKER_SEVERE, (0), segment_name, " Illegal ring bracket order.");

	if (this_slte.ringbrack (1) > 0 | this_slte.ringbrack (2) > 0 | this_slte.ringbrack (3) > 0)
	     & ^this_slte.branch_required
	then call checker_print_ (CHECKER_SEVERE, (0), segment_name, " Gate has no branch.");

	if this_slte.branch_required
	then do;
		if this_pathp -> path.size = 0
		then call checker_print_$error (CHECKER_SEVERE, (0), segment_name, " Zero length branch pathname.");
		if char (this_pathp -> path.name, 1) ^= ">"
		then call checker_print_$error (CHECKER_SEVERE, (0), segment_name, " Pathname must begin with > .");
		call absolute_pathname_ (this_pathp -> path.name, (""), code);
		if code ^= 0
		then call checker_print_$error (CHECKER_SEVERE, code, segment_name, " Bad pathname: ^a.",
			this_pathp -> path.name);
	     end;

	if this_slte.acl_provided
	then do aclx = 1 to this_aclp -> acls.count;
		first = before (this_aclp -> acls.userid (aclx), ".");
		second = before (after (this_aclp -> acl.userid (aclx), "."), ".");
		third = after (after (this_aclp -> acls.userid (aclx), "."), ".");
		if first = "" | second = "" | third = "" | index (third, ".") > 0
		then call checker_print_$error (CHECKER_SEVERE, (0), segment_name,
			" Invalid Access Name Format in ^a.", this_aclp -> acls.userid (aclx));
	     end;
	return;
     end REPORT_SEGMENT;
     end PROCESS_SLTE;
%page;
Read_Control_Word:
     proc;

	call tape_reader_ (addr (control_word), 1);

     end Read_Control_Word;
%page;
COLLECTION_SUMMARY:
     procedure;
	declare 1 PC		 aligned like meters.per_collection defined (meters.per_collection (Collection));

	call checker_print_$page;
	call checker_print_ ("Summary of Collection: ^d.^d", PC.mark.major, PC.mark.minor);
	call checker_print_$skip;
	call checker_print_ ("Segments read:^32t^d; ^d temp, ^d init, ^d perm(^d user ring)", PC.segment_count,
	     PC.temp_segment_count, PC.init_segment_count, PC.perm_segment_count, PC.user_ring_segment_count);
	if Collection <= checker_data_$last_wired_collection
	then call checker_print_ ("Wired storage:^32t^d words.", PC.words_used);
	call checker_print_ ("Paged storage:^32t^d pages.", PC.pages_used);
	call checker_print_ ("Wired paged storage:^32t^d pages.", PC.wired_pages_used);
	if PC.user_ring_segment_count > 0
	then call checker_print_ ("User ring pages:^32t^d pages.", PC.user_ring_segment_pages);
	call checker_print_$skip;

	if Collection <= checker_data_$last_supervisor_collection & checker_data_$loaded (Collection)
	then do;

		call checker_print_ ("Combined linkage usage:  Active Wired (in words)");
		call checker_print_ ("-----------------------|------|------");
		call checker_print_ ("                  init: ^6d^x^6d", PC.ai_linkage_used, PC.wi_linkage_used);
		call checker_print_ ("                   sup: ^6d^x^6d", PC.as_linkage_used, PC.ws_linkage_used);
		call checker_print_$skip;

		call checker_print_ ("Definitions Used: ^5d words.", PC.definitions_used);
		call checker_print_ ("Name Table Used:  ^5d words.", PC.name_table_used);
	     end;
     end COLLECTION_SUMMARY;
%page;
TOTAL_SUMMARY:
     procedure;

	call checker_print_$page;
	call checker_print_ ("Total Summary:");
	call checker_print_$skip;

	call checker_print_ ("total segments: ^d.", sum (meters.per_collection.segment_count));
	call checker_print_ ("          temp: ^d.", sum (meters.per_collection.temp_segment_count));
	call checker_print_ ("          init: ^d.", sum (meters.per_collection.init_segment_count));
	call checker_print_ ("          perm: ^d.", sum (meters.per_collection.perm_segment_count));
	call checker_print_ ("     user ring: ^d.", sum (meters.per_collection.user_ring_segment_count));

	call checker_print_ ("Wired Environment Usage");
	call checker_print_ ("     Name                 Size            Used");
	call USAGE ("ai_linkage", meters.wired_ai_linkage_size, meters.wired_ai_linkage_used,
	     meters.overflown.wired_ai_linkage);
	call USAGE ("wi_linkage", meters.wired_wi_linkage_size, meters.wired_wi_linkage_used,
	     meters.overflown.wired_wi_linkage);
	call USAGE ("as_linkage", meters.wired_as_linkage_size, meters.wired_as_linkage_used,
	     meters.overflown.wired_as_linkage);
	call USAGE ("ws_linkage", meters.wired_ws_linkage_size, meters.wired_ws_linkage_used,
	     meters.overflown.wired_ws_linkage);
	call USAGE ("definitions", meters.wired_definitions_size, meters.wired_definitions_used,
	     meters.overflown.wired_definitions);
	call USAGE ("name table", meters.wired_nt_size, meters.wired_nt_used, meters.overflown.wired_nt);

	call checker_print_$skip;
	call checker_print_ ("Paged Environment Usage");
	call checker_print_ ("     Name                 Size            Used");
	call USAGE ("ai_linkage", meters.paged_ai_linkage_size, meters.paged_ai_linkage_used,
	     meters.overflown.paged_ai_linkage);
	call USAGE ("wi_linkage", meters.paged_wi_linkage_size, meters.paged_wi_linkage_used,
	     meters.overflown.paged_wi_linkage);
	call USAGE ("as_linkage", meters.paged_as_linkage_size, meters.paged_as_linkage_used,
	     meters.overflown.paged_as_linkage);
	call USAGE ("ws_linkage", meters.paged_ws_linkage_size, meters.paged_ws_linkage_used,
	     meters.overflown.paged_ws_linkage);
	call USAGE ("definitions", meters.paged_definitions_size, meters.paged_definitions_used,
	     meters.overflown.paged_definitions);
	call USAGE ("name table", meters.paged_nt_size, meters.paged_nt_used, meters.overflown.paged_nt);

	return;

USAGE:
     procedure (name, size, used, overflown);
	declare name		 char (*);
	declare size		 fixed bin;
	declare used		 fixed bin;
	declare overflown		 bit (1) unaligned;

	call checker_print_ ("^[*****^;^5x^]^20a^x^6d^36t^6d^43t^[OVERFLOWN^]", overflown, name, size, used, overflown);
     end USAGE;
     end TOTAL_SUMMARY;
%page;
CHECK_BOOTABLE_LABEL:
     procedure;

	declare 1 BPI		 aligned like boot_program_info;
	declare tape_reader_$rewind	 entry (char (32), fixed bin (21));

	call tape_reader_$rewind (BPI.boot_program_name, BPI.boot_program_text_length);
	if BPI.boot_program_name = ""
	then do;
		call checker_print_ ("No bootable label on MST.");
		return;				/* No boot program */
	     end;

	call checker_print_ ("Boot program: ^a, ^d words.", BPI.boot_program_name, BPI.boot_program_text_length);

	call checker_print_$skip;

     end CHECK_BOOTABLE_LABEL;

     end checker_load_MST_;
