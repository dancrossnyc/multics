/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/* tolts_pcd_ subroutine to output the configuration deck for polts and molts
   Coded 79/03/12 by J. A. Bush
   Modified 79/10/09 by Michael R. Jordan for new MPC card.
   Modified 08/80 by R. Fakoury to correctly interrupt chnl cards and to identify bootload chan in the config printout.
   Modified 11/80 by R.Fakoury to handle new config deck channel card utilization
   Modified 1/81 by R Fakoury to output fnp config info for colts.
   Modified 4/81 by R Fakoury to print the cpu and mem config.
   Modified 8/81 by M.R. Jordan for new PRPH OPC card format.
   Modified October 1982 by C. Hornig for new PRPH TAP format.
   Modified 03/17/83 by Rick Fakoury to print hyperchannel config.
   Modified 08/12/83 by Rick Fakoury for the new cpu & console config cards.
   Modified 08/16/83 by Rick Fakoury to allow user to specify device type on config requests.
   and to add support for the iom and hyperchannel config card.
   Modified 10/84 by R Fakoury to use system config card incls.
*/




/****^  HISTORY COMMENTS:
  1) change(84-10-01,Fakoury), approve(86-08-21,MCR7514),
     audit(86-11-25,Martinson), install(86-12-04,MR12.0-1235):
     to use system config card incls,
     for Dipper to print the MCA config,
     for colts rspd request to print the DIA config.
                                                   END HISTORY COMMENTS */




/* tolts_pcd_ subroutine to output the configuration deck for polts and molts */


/* format: style4,ifthenstmt,ifthen,ind3,ll125,lineconind1 */
tolts_pcd_: proc (exec, eq_type);

/* tolts_pcd_ subroutine to output the configuration deck for polts & molts */

/* Builtins */

dcl  (addr, addrel, hbound, null, rtrim, substr) builtin;

/* Conditions  */

dcl  cleanup condition;
dcl  linkage_error condition;


/* Constants */

dcl  ADAPTER_FAILURE bit (2) unal init ("01"b) int static options (constant);
dcl  con_types (0:4) char (3) int static options (constant) init
      ("   ", "IBM", "EMC", "SCC", "LCC");
dcl  fnp_state (0:4) char (7) int static options (constant) init
      ("free   ", "unknown", "down   ", "booting", "up     ");
dcl  MAINT_ABNORMAL_TERM bit (2) unal init ("11"b) int static options (constant);
dcl  MAINT_NORMAL_TERM bit (2) unal init ("10"b) int static options (constant);
dcl  max_imu_channels fixed bin init (15) int static options (constant);
dcl  tags (1:26) char (1) static options (constant) init
      ("a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n",
      "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z");
dcl  types (1:3) char (6) int static options (constant) init
      ("dn355 ", "l6    ", "dn6670");



/* External Static */

dcl  error_table_$moderr fixed bin (35) ext static;
dcl  error_table_$timeout fixed bin (35) ext static;


/* External Entries */

dcl  add_char_offset_ entry (ptr, fixed bin (21)) returns (ptr) reducible;
dcl  com_err_ entry () options (variable);
dcl  find_config_card_$prph_for_channel entry (fixed bin (3), fixed bin (6), ptr);
dcl  get_temp_segment_ entry (char (*), ptr, fixed bin (35));
dcl  ioa_ entry () options (variable);
dcl  ioa_$rsnnl entry () options (variable);
dcl  hcs_$initiate entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr, fixed bin (35));
dcl  mca_$attach_mca entry (char (*), fixed bin (71), fixed bin, fixed bin (35));
dcl  mca_$config entry (fixed bin, ptr, fixed bin (21), fixed bin (21), bit (72), fixed bin (35));
dcl  mca_$detach_mca entry (fixed bin, fixed bin (35));
dcl  mca_$read_data entry (fixed bin, ptr, fixed bin (21), fixed bin (21), bit (72), fixed bin (35));
dcl  mtdsim_$clean_up entry;
dcl  release_temp_segment_ entry (char (*), ptr, fixed bin (35));
dcl  tolts_qttyio_$rs entry options (variable);
dcl  tolts_qttyio_ entry (char (*), fixed bin);
dcl  tolts_util_$dev0_valid entry (ptr, fixed bin) returns (bit (1));
dcl  tolts_util_$find_card entry (char (4), ptr);

/* Internal Static */

dcl  code fixed bin (35) init (0);
dcl  CHAN_NUM fixed bin (6);
dcl  c_sw bit (1) init ("0"b);
dcl  data_ptr ptr int static;
dcl  d_sw bit (1) init ("0"b);
dcl  data_present bit (1) init ("0"b);
dcl  entry_var entry variable;
dcl  exec char (6);
dcl  eq_type char (*);
dcl  fips bit (1) init ("0"b);
dcl  i fixed bin init (0);
dcl  iom_num fixed bin (3);
dcl  ipc_type char (9);
dcl  j fixed bin init (0);
dcl  k fixed bin init (0);
dcl  mca_data char (4000) init ("");
dcl  mca_ev_chn fixed bin (71) int static init (0);
dcl  mca_ioi_idx fixed bin int static init (0);
dcl  mca_name char (4) init ("");
dcl  model_index fixed bin;
dcl  NAME char (4) aligned;
dcl  nchn fixed bin;
dcl  ndevices fixed bin;
dcl  od char (136);
dcl  ol fixed bin;
dcl  out_data char (10000);
dcl  prph_name char (4) aligned;
dcl  p99 pic "99" based;
dcl  ret_len fixed bin (21);
dcl  retry_sw bit (1);
dcl  str_info bit (1) init ("0"b);
dcl  ss_info bit (1) init ("0"b);
dcl  session_over bit (1) init ("0"b);
dcl  static_config_ptr ptr int static init (null ());
dcl  status_a bit (72) init ("0"b);
dcl  sub_ptr ptr int static;
dcl  subsys bit (1) init ("0"b);
dcl  term bit (1) init ("0"b);
dcl  total_chars_read fixed bin (21);
dcl  trm bit (1) init ("0"b);


/* Structures */

dcl  1 mca_sub based (sub_ptr) unal,
       2 data_p bit (1) unal,
       2 mbz bit (3) unal,
       2 term_state bit (2) unal;





%page;

      if eq_type ^= "" then do;			/* if equip type = some type user wants partial config */
         if length (eq_type) = 4 then str_info = "1"b;	/* user wants info on a device */
         else if length (eq_type) = 3 then ss_info = "1"b;	/* user wants all info on a device */
         else do;					/* must be invalid arg */
	  if exec = "isolts" then			/* if isolts use ioa */
	     call ioa_ ("tolts_pcd_: Invalid length ARG received");
	  else call tolts_qttyio_$rs (0, "tolts_pcd_: Invalid lenght ARG received");
	  return;
         end;

         call ioa_$rsnnl ("^/   ^/^a configuration:^/   ^/", out_data, ol, substr (eq_type, 1, 3));
         if substr (eq_type, 1, 3) = "cpu" |		/* if cpu or mem */
	substr (eq_type, 1, 3) = "mem" then do;
	  if substr (eq_type, 1, 3) = "cpu" then call cpu_fig;
	  else if substr (eq_type, 1, 3) = "mem" then call mem_fig;
	  call ioa_ ("^a", out_data);
	  return;
         end;
         else if substr (eq_type, 1, 3) = "fnp" then call fnp_fig;
         else if substr (eq_type, 1, 3) = "dia" then call dia_fig;
         else if substr (eq_type, 1, 3) = "iom"
	| substr (eq_type, 1, 3) = "imu" then call iom_fig;
         else if substr (eq_type, 1, 3) = "mca" then do;
	  if str_info then call mca_fig ("mca" || substr (eq_type, 4));
	  else call mca_fig ("");
         end;
         else if substr (eq_type, 1, 3) = "ccu" |
	substr (eq_type, 1, 3) = "hch" |
	substr (eq_type, 1, 3) = "opc" |
	substr (eq_type, 1, 3) = "prt" |
	substr (eq_type, 1, 3) = "pun" |
	substr (eq_type, 1, 3) = "rdr" then call sing_fig;
         else if substr (eq_type, 1, 3) = "dsk" then call disk_fig;
         else if substr (eq_type, 1, 3) = "tap" then call tape_fig;
         else do;					/* can't find a match */
	  if exec = "isolts" then
	     call ioa_ ("tolts_pcd_: Unreconizable ARG received.");
	  else call tolts_qttyio_$rs (0, "tolts_pcd_: Unreconizable ARG received.");
	  return;
         end;
         out_data = rtrim (out_data) || rtrim (mca_data);
         call tolts_qttyio_ (out_data, 10);
         return;
      end;

      else str_info, ss_info = "0"b;			/* user wants config */

      call ioa_$rsnnl ("^/   ^/^a configuration:^/   ^/", out_data, ol, exec);

      if exec = "colt  " then do;
         call dia_fig;				/* output dia configuration first */
         call fnp_fig;				/* now  output fnp configuration */
      end;


      if exec = "isolts" then do;
         call cpu_fig;
         call mem_fig;
         call ioa_ ("^a", out_data);
         return;
      end;
      if exec = "polt  " | exec = "molt  " then do;
         call iom_fig;				/* output iom configuration second */
         call disk_fig;				/* output disk configuration second */
         call tape_fig;				/* followed by tape configuration */
         call sing_fig;				/* and all other peripherals */
         call mca_fig ("");
      end;
      out_data = rtrim (out_data) || rtrim (mca_data);
      call tolts_qttyio_ (out_data, 10);		/* output config */
      return;					/* thats it folks */
%page;

/* dia_fig - internal procedure to format dia configuration for the DN8 FEP */

dia_fig: proc;

declare  dia_number fixed bin;


      prph_cardp = null;				/* start at the beginning of the config deck */
      term = "0"b;					/* reset terminate condition */
      do while (^term);				/* check all cards */
         call tolts_util_$find_card ("prph", prph_cardp);	/* get pointer to fnp config card */
         if prph_cardp = null then term = "1"b;		/* no card found */
         else if (str_info & prph_card.name = eq_type)
	| (substr (prph_card.name, 1, 3) = "dia" & ^str_info) then do;

	  dia_number = rank (substr (prph_card.name, 4, 1))
	   - rank ("a") + 1;			/* dia a is 1 */
	  call ioa_$rsnnl ("dia ^a (^d) on iom ^a ^d",
	   od, ol, tags (dia_number), dia_number - 1, tags (iom), chan);
	  call ioa_$rsnnl ("^a^/", od, ol, od);		/* add new line to output */
	  out_data = rtrim (out_data) || od;		/* add to to output */
	  if str_info then term = "1"b;
         end;
      end;
   end dia_fig;

%page;

/* fnp_fig - internal procedure to format fnp configuration */


fnp_fig: proc;

declare  fnp_number fixed bin;

%include config_prph_fnp_card;

      prph_fnp_cardp = null;				/* start at the beginning of the config deck */
      term = "0"b;					/* reset terminate condition */
      call hcs_$initiate (">sc1", "cdt", "", 0, 0, cdtp, code);
      do while (^term);				/* check all cards */
         call tolts_util_$find_card ("prph", prph_fnp_cardp); /* get pointer to fnp config card */
         if prph_fnp_cardp = null then term = "1"b;	/* no card found */
         else if (str_info & name = eq_type)
	| (substr (name, 1, 3) = "fnp" & ^str_info) then do;

	  fnp_number = rank (substr (name, 4, 1)) - rank ("a") + 1; /* fnp a is 1 */
	  fnpep = addr (cdt.fnp_entry (fnp_number));
	  call ioa_$rsnnl ("fnp ^a (^d) on iom ^a ^d is a ^6a with ^d k of memory and ^d hslas is ^a",
	   od, ol, tags (fnp_number), fnp_number - 1,
	   tags (iom), chan, types (fnpe.type), fnpe.memory, fnpe.nhslas, fnp_state (fnpe.mpxe.state));
	  call ioa_$rsnnl ("^a^/", od, ol, od);		/* add new line to output */
	  out_data = rtrim (out_data) || od;		/* add to to output */
	  if str_info then term = "1"b;
         end;
      end;
   end fnp_fig;

%page;
/* cpu_fig - internal procedure to format cpu configuration */

cpu_fig: proc;


%include config_cpu_card;


      term = "0"b;
      cpu_cardp = null;				/* set config ptr to null */
      do while (^term);				/* loop through all cpu cards first */
         call tolts_util_$find_card ("cpu ", cpu_cardp);
         if cpu_cardp = null then term = "1"b;		/* the last card */

         else if (str_info & (string (rtrim (word)) || tags (tag)) = eq_type)
	| (word = "cpu" & ^str_info) then do;

	  call ioa_$rsnnl ("cpu ^a a^[ ^dK cache ^; ^s^]^a/^d cpu on scu port ^d is ^[on-line & unavailable for test ^;^[off-line & available for test ^;^[currently under test ^]^]^] ",
	   od, ol, tags (tag), (cache_size > 0), (cache_size), type, model,
	   port, (state = "on "), (state = "off "), (state = "test "));
	  call ioa_$rsnnl ("^a^/", od, ol, od);		/* add a new line to output */
	  out_data = rtrim (out_data) || od;
	  if str_info then term = "1"b;
         end;
      end;
   end cpu_fig;

%page;

/* mem_fig - internal procedure to format mem configuration */

mem_fig: proc;

%include config_mem_card;


      term = "0"b;
      mem_cardp = null;				/* set config ptr to null */
      do while (^term);				/* loop through all cpu cards first */
         call tolts_util_$find_card ("mem ", mem_cardp);
         if mem_cardp = null then term = "1"b;		/* the last card */
         else if (str_info & (string (rtrim (word)) || tags (tag)) = eq_type)
	| (word = "mem" & ^str_info) then do;

	  call ioa_$rsnnl ("scu ^a has ^4dk words of memory & is ^[the bootload scu & is unavailable ^;^[on-line & available ^;^[off-line & unavailable ^]^]for test",
	   od, ol, tags (tag), size, (state = "on " & k = 0),
	   (state = "on " & k > 0), (state = "off "));
	  k = k + 1;
	  call ioa_$rsnnl ("^a^/", od, ol, od);		/* add a new line to output */
	  out_data = rtrim (out_data) || od;
	  if str_info then term = "1"b;
         end;
      end;
   end mem_fig;
%page;
/* iom_fig - internal procedure to formatiom configuration */

iom_fig: proc;


%include config_iom_card;


      term = "0"b;
      iom_cardp = null;				/* set config ptr to null */
      do while (^term);				/* loop through all iom cards first */
         call tolts_util_$find_card ("iom ", iom_cardp);
         if iom_cardp = null then term = "1"b;		/* the last card */

         else if (str_info & (string (rtrim (word)) || tags (tag)) = eq_type)
	| (word = "iom" & ^str_info) then do;

	  call ioa_$rsnnl ("iom ^a a ^a iom on scu port ^d is ^[on-line ^;^[off-line ^;^[currently under test ^]^]^] ",
	   od, ol, tags (tag), model, port, (state = "on "),
	   (state = "off "), (state = "test "));
	  call ioa_$rsnnl ("^a^/", od, ol, od);		/* add a new line to output */
	  out_data = rtrim (out_data) || od;
	  if str_info then term = "1"b;
         end;
      end;
   end iom_fig;
%page;

/* disk_fig - internal procedure to format disk configuration */

disk_fig: proc;

%include config_prph_dsk_card;


      term = "0"b;
      prph_dsk_cardp = null;				/* start at beginning of config deck */

      do while (^term);				/* get all disk subsystems */
         call tolts_util_$find_card ("prph", prph_dsk_cardp); /* get next config card */
         if prph_dsk_cardp = null then term = "1"b;	/* if last card, thats it */
         else if (str_info & name = eq_type)
	| (substr (name, 1, 3) = "dsk" & ^str_info) then do;

	  ndevices = 0;
	  fips, subsys = "0"b;
	  do i = 1 to hbound (prph_dsk_card.group, 1)
	   while (prph_dsk_card.group (i).model ^= -1);	/* loop thru all dev pairs */
	     if prph_dsk_card.group (i).model ^= 0 then do; /* if not 0 devices */
	        fips = tolts_util_$dev0_valid
	         (addr (config_data_$disk_drive_model_names), prph_dsk_card.group (i).model);
	        if ^fips & ^subsys then ndevices = ndevices + 1;
	        call ioa_$rsnnl ("^[^a^;^s    ^] ^3d ^2d units;^-starting with device no. ^d^/",
	         od, ol, ^subsys, name, prph_dsk_card.group (i).model, prph_dsk_card.group (i).ndrives, ndevices);
	        out_data = rtrim (out_data) || od;	/* at line to output */
	        subsys = "1"b;			/* indicate we have output subsystem */
	     end;
	     ndevices = ndevices + prph_dsk_card.group (i).ndrives; /* add incremental device numbers */
	  end;
	  NAME = name;
	  call find_mpc (iom, chan, nchan, fips);	/* get mpc card for this prph */
	  call find_chnl (fips);			/* go output associated chnl cards if present */
	  if str_info then term = "1"b;
         end;
      end;

   end disk_fig;
%page;

/* tape_fig - internal procedure to format tape configuration */

tape_fig: proc;

%include config_prph_tap_card;


      term = "0"b;
      prph_tap_cardp = null;				/* start at beginning of tolts_util_$find_card deck */

      do while (^term);				/* get all tape subsystems */
         call tolts_util_$find_card ("prph", prph_tap_cardp); /* get next config card */
         if prph_tap_cardp = null then term = "1"b;	/* if last card, thats it */
         else if (str_info & name = eq_type)
	| (substr (name, 1, 3) = "tap" & ^str_info) then do;

	  ndevices = 0;
	  subsys = "0"b;				/* start by outputting subsystem */
	  do i = 1 to hbound (prph_tap_card.group, 1)
	   while (prph_tap_card.group (i).model ^= -1);	/* loop thru all dev pairs */
	     if prph_tap_card.group (i).model ^= 0 then do; /* if not 0 devices */
	        fips = tolts_util_$dev0_valid
	         (addr (config_data_$tape_drive_model_names), prph_tap_card.group (i).model);
	        if ^fips & ^subsys then ndevices = ndevices + 1;
	        call ioa_$rsnnl ("^[^a^;^s    ^] ^3d ^2d units;^-starting with device no. ^d^/",
	         od, ol, ^subsys, name, prph_tap_card.group (i).model, prph_tap_card.group (i).ndrives, ndevices);
	        out_data = rtrim (out_data) || od;	/* at line to output */
	        subsys = "1"b;			/* indicate we have output subsystem */
	     end;
	     ndevices = ndevices + prph_tap_card.group (i).ndrives; /* add incremental device numbers */
	  end;
	  NAME = name;
	  call find_mpc (iom, chan, nchan, fips);	/* get mpc card for this prph */
	  call find_chnl (fips);			/* go output associated chnl cards if present */
	  if str_info then term = "1"b;
         end;
      end;

   end tape_fig;
%page;

/* sing_fig - internal procedure to format all single line peripherals (rdr,pun,opc,prt) */

sing_fig: proc;

%include config_prph_opc_card;
%include config_prph_prt_card;

dcl  (term, term1, trm) bit (1) init ("0"b);
      nchn = 1;
      prph_cardp = null;				/* start at beginning of config deck */

      do while (^term);				/* get all other peripherals */
         fips, trm = "0"b;
         if ss_info then term1 = "0"b;
         call tolts_util_$find_card ("prph", prph_cardp);	/* get next config card */
         if prph_cardp = null then term = "1"b;		/* if last card, thats it */
         else if str_info & eq_type = (substr (prph_card.name, 1, 4)) then term1 = "1"b;
         else if ss_info & eq_type = (substr (prph_card.name, 1, 3)) then term1 = "1"b;

         else if exec = "polt" & (^str_info & ^ss_info) then do;
	  if substr (prph_card.name, 1, 3) = "prt"	/* if printer */
	   | substr (prph_card.name, 1, 3) = "pun"	/* or punch */
	   | substr (prph_card.name, 1, 3) = "rdr"	/* or reader */
	   | substr (prph_card.name, 1, 3) = "opc"	/* or console */
	   | substr (prph_card.name, 1, 3) = "ccu"	/* or combined card unit */
	   then trm = "1"b;				/* display it */
         end;
         else if exec = "molt" & (^str_info & ^ss_info) then do;
	  if substr (prph_card.name, 1, 3) = "prt"	/* if printer */
	   | substr (prph_card.name, 1, 3) = "pun"	/* or punch */
	   | substr (prph_card.name, 1, 3) = "rdr"	/* or reader */
	   | substr (prph_card.name, 1, 3) = "hch"	/* or hyperchannel */
	   | substr (prph_card.name, 1, 3) = "ccu"	/* or combined card unit */
	   then trm = "1"b;				/* display it */
         end;

         if ^term & trm & ^str_info
	| ^term & ^trm & (str_info | ss_info) & term1 then do;

	  prph_opc_cardp, prph_prt_cardp = prph_cardp;
	  model_index = 0;
	  d_sw = "1"b;				/* device 1 in most cases */
	  if substr (prph_card.name, 1, 3) = "opc " then do; /* if console */
	     model_index = CONSOLE_MODEL_TO_INDEX_FCN (prph_opc_card.model);
	     if model_index > 0
	      then d_sw = ^CONSOLE_IS_BCD (model_index);
	  end;
	  if substr (prph_card.name, 1, 3) = "hch" then d_sw = "0"b;
	  call ioa_$rsnnl ("^4a ^d^[0^]^d^[01^;00^] model ^d ^[^a ^[is available for test ^;is the^[ alternate^]^[^s^] system console ^]^s ^;^4s^a^] ^[with ^d columns and a ^d print belt ^]",
	   od, ol, prph_card.name, prph_card.iom - 1, (prph_card.chan < 10), prph_card.chan,
	   d_sw, prph_card.model, (model_index > 0), con_types (model_index), (prph_opc_card.state = "io") | (prph_opc_card.state = "inop"),
	   (prph_opc_card.state = "alt "), (prph_opc_card.state = "on"),
	   (substr (prph_card.name, 1, 3)), (substr (prph_card.name, 1, 3) = "prt"), line_length, train);

	  call ioa_$rsnnl ("^a^/", od, ol, od);		/* add new line */
	  out_data = rtrim (out_data) || od;		/* add to line */
	  if substr (prph_card.name, 1, 3) ^= "opc"
	   | substr (prph_card.name, 1, 3) ^= "hch" then do; /* might be mpc device */
	     NAME = prph_card.name;
	     call find_mpc (prph_card.iom, prph_card.chan, nchn, fips); /* get mpc card for this perph */
	     call find_chnl (fips);			/* find chnl cards if present */
	  end;
	  else call set_cline (prph_card.iom - 1, prph_card.chan, 0, "", -1); /* tell them no mpc card found */
	  if str_info then term = "1"b;
         end;
      end;

   end sing_fig;
%page;

/* find_mpc - internal procedure to find mpc card given iom and channel, and return mpc number */

find_mpc: proc (iom, a_chan, a_nchan, fips);

%include config_ipc_card;
%include config_mpc_card;
dcl  fips bit (1);
dcl  (chan, a_chan) fixed bin (8);
dcl  iom fixed bin (3);
dcl  (i, j, a_nchan, nchan) fixed bin;
dcl  cont_cardp ptr;
dcl  1 cont_card aligned based (cont_cardp) like mpc_card;


      chan = a_chan;				/* copy parameters */
      nchan = a_nchan;
      cont_cardp = null ();				/* start at beginning of deck */
      trm = "0"b;					/* reset terminate condition */
      do while (^trm);				/* find mpc card */
         if ^fips then call tolts_util_$find_card ("mpc ", cont_cardp);
         else call tolts_util_$find_card ("ipc", cont_cardp); /* look for an fips card */
         if cont_cardp = null () then trm = "1"b;
         else if fips then do;
	  ipc_cardp = cont_cardp;
	  j = 1;
	  if ipc_card.iom = iom then			/* if match on iom number */
	     if (chan >= ipc_card.chan
	      & chan <= ipc_card.chan + (ipc_card.nchan - 1)) then do;
	        if chan ^= ipc_card.chan then j = 2;
	        call set_cline (iom - 1, (chan), ipc_card.nchan,
	         ipc_card.type, j);			/* output chan line */
	        if nchan <= ipc_card.nchan then		/* if this is all chanels */
		 trm = "1"b;			/* and chan number, this is it */
	        else do;				/* more channels on diffent mpc cards */
		 chan = chan + ipc_card.nchan;	/* add in channels processed */
		 nchan = nchan - ipc_card.nchan;	/* and subtract number of chans */
	        end;
	     end;

         end;
         else do i = 1 to hbound (cont_card.port, 1) while (cont_card.port (i).iom ^= -1 & ^trm);
	  j = i;
	  if cont_card.port (i).iom = iom then		/* if match on iom number */
	     if (chan >= cont_card.port (i).chan
	      & chan <= cont_card.port (i).chan + (cont_card.port (i).nchan - 1)) then do;
	        if chan ^= cont_card.port (i).chan then j = 2;
	        call set_cline (iom - 1, (chan), cont_card.port (i).nchan, cont_card.name, j); /* output chan line */
	        if nchan <= cont_card.port (i).nchan then /* if this is all chanels */
		 trm = "1"b;			/* and chan number, this is it */
	        else do;				/* more channels on diffent mpc cards */
		 chan = chan + cont_card.port (i).nchan;/* add in channels processed */
		 nchan = nchan - cont_card.port (i).nchan; /* and subtract number of chans */
	        end;
	     end;

         end;
      end;
      if cont_cardp = null () then			/* if we didn't find an mpc */
         call set_cline (iom - 1, chan, 0, "", -1);	/* tell them no mpc card found */

   end find_mpc;
%page;

/* find_chnl - internal procdure to find chnl card associated with prph card and output info */

find_chnl: proc (fips);

%include config_chnl_card;
dcl  fips bit (1);

      chnl_cardp = null;				/* start at beginning */
      trm = "0"b;					/* and find possible chnl card */
      do while (^trm);
         call tolts_util_$find_card ("chnl", chnl_cardp);
         if chnl_cardp = null then trm = "1"b;		/* if last card, no chnl card */
         else if name = NAME then do;			/* if for right subsystem */
	  trm = "1"b;				/* set terminate condition */
	  do i = 1 to 3 while (chnl_card.group (i).iom ^= -1); /* loop through all fields of chnl card */
	     call find_mpc (chnl_card.group (i).iom, chnl_card.group (i).chan, chnl_card.group (i).nchan, fips); /* find mpc card */
	  end;
         end;
      end;

   end find_chnl;
%page;
/* mca_fig - int proc to attach a MCA, reads its config table and add the info to the out_data buffer. */

mca_fig: proc (MCA_NAME);

%include config_iom_card;


dcl  MCA_NAME char (4);

      mca_config_file_ptr = null;
      iom_cardp = null;				/* set config ptr to null */

      on linkage_error begin;
         call com_err_ (error_table_$moderr, "mca_fig", "mca_");
         goto mca_fig_end;				/* exit */
      end;


      on cleanup begin;
         if mca_config_file_ptr ^= null then
	  call release_temp_segment_ ("tolts_pcd_", mca_config_file_ptr, code);

         call mtdsim_$clean_up ();			/* call our normal handler */
         goto mca_fig_end;
      end;

      entry_var = mca_$attach_mca;
      revert linkage_error;

      call get_temp_segment_ ("tolts_pcd_", mca_config_file_ptr, code);
      data_ptr, static_config_ptr = mca_config_file_ptr;
next:
      if MCA_NAME = "" then do;			/* loop through all iom cards first */
         call tolts_util_$find_card ("iom ", iom_cardp);
         if iom_cardp = null then return;		/* the last card */
         if iom_card.model = "imu" then
	  mca_name = "mca" || tags (iom_card.tag);
         else goto next;
      end;
      else mca_name = MCA_NAME;
      retry_sw = "1"b;

retry_attach:

      call ioa_ ("attaching ^a for configuration read", mca_name); /* let the user know */
      call mca_$attach_mca (mca_name, mca_ev_chn, mca_ioi_idx, code);
      if code ^= 0 then do;
         if code = error_table_$timeout then do;
	  if retry_sw then do;
	     retry_sw = "0"b;
	     call com_err_ (code, "tolts_pcd_", "Attaching ^a, will retry..", mca_name);
	     goto retry_attach;
	  end;
         end;
         if addr (code) -> status.t & addr (code) -> status.major = "0"b
	then call com_err_ (0, "mca_$attach_mca", "status ^w", code);
         else call com_err_ (code, "tolts_pcd_",
	     "Attempting to attach ^a", mca_name);
         return;
      end;
      call ioa_ ("^a attached for configuration read", mca_name);
      call rd_config;

DONE:
      if mca_ioi_idx ^= -1 then
         call mca_$detach_mca (mca_ioi_idx, code);
      if code ^= 0 then do;
         call com_err_ (code, "tolts_pcd_", "Attempting to detach ^a", mca_name);
      end;
      if mca_config_file_ptr ^= null () then
         call release_temp_segment_
	("tolts_pcd_", mca_config_file_ptr, code);
      if MCA_NAME = "" & iom_cardp ^= null then goto next;

      revert cleanup;				/* re-enable previous cleanup handler */

mca_fig_end:

   end mca_fig;
%page;

/* rd_config - int proc that actually reads the MCA config & formats the data */
rd_config: proc;

      total_chars_read = 0;
      call mca_$config ((mca_ioi_idx), mca_config_file_ptr,
       (4 * size (mca_config_file)), ret_len, status_a, code);
      if code ^= 0 then do;
         call com_err_ (code, "mca_$config", "status_a ^w", status_a);
      end;
      else do;
         call read_more (mca_config_file_ptr);		/* go read the rest of the data */
         if code ^= 0 then return;
         iom_num = index ("abcd", substr (mca_name, 4, 1));
         do i = 0 to max_imu_channels;
	  CHAN_NUM = channel_data (i).prim_ch_num;
	  call find_config_card_$prph_for_channel (iom_num, CHAN_NUM, prph_cardp);
	  if prph_cardp = null () then prph_name = "";
	  else prph_name = prph_card.name;
	  ipc_type = TYPE (channel_data (i).lvl_1_id_type);
	  if channel_data (i).fw_id = "00001000"b
	   then ipc_type = rtrim (ipc_type) || "_tape";
	  if channel_data (i).fw_id = "00001001"b
	   then ipc_type = rtrim (ipc_type) || "_disk";
	  if channel_data (i).lvl_1_state ^= 1 then do;
	     call ioa_$rsnnl
	      ("^2xIPC_^2a ^9a ch ^2d for ^2d ^4a state = ^d dt ^d ^[fw_rev ^a^]^/",
	      od, ol, convert (p99, i), ipc_type, channel_data (i).prim_ch_num,
	      channel_data (i).num_of_log_ch, prph_name,
	      channel_data (i).lvl_1_state, channel_data (i).disk_tab,
	      (channel_data (i).fw_id ^= "0000"b), channel_data (i).fw_rev);
	     mca_data = rtrim (mca_data) || od;		/* at line to output */
	  end;
         end;
      end;
   end rd_config;

%page;

/* read_more - int proc to contine to read the mca config data until it is all read */

read_more: proc (start_ptr);
dcl  start_ptr ptr;
dcl  read_ptr ptr;

      read_ptr = start_ptr;
one_more_time:
      total_chars_read = ret_len + total_chars_read;
      if ^check_status_ok () then return;
      if data_present then
         read_ptr = add_char_offset_ (read_ptr, ret_len);
      if ^session_over then do;
         call mca_$read_data (mca_ioi_idx, read_ptr,
	(16 * 1024), ret_len, status_a, code);
         if code ^= 0 then do;
	  call com_err_ (code, "mca_$read_data", "status_a ^w", status_a);
	  return;
         end;
         goto one_more_time;
      end;
   end read_more;

%page;

/* check_status_ok -  int proc to examine the MCA status & return the state */

check_status_ok: proc () returns (bit (1));

dcl  state bit (1) init ("1"b);			/* assume the return status is ok */

      data_present = "0"b;
      session_over = "0"b;

      statp = addr (status_a);
      if ^status.t then do;
         call ioa_ ("Returned status was no good. (^w)", unspec (status));
         state = "0"b;
         goto return_state;
      end;

      if status.power then do;
         state = "0"b;
         goto return_state;
      end;

      if (status.channel_stat | status.central_stat) ^= "0"b then do;
         state = "0"b;
         goto return_state;
      end;

      sub_ptr = addr (status.sub);
      data_present = mca_sub.data_p;

      if status.major ^= ""b then do;
         state = "0"b;
      end;

      if mca_sub.mbz ^= ""b then do;
         state = "0"b;
      end;

      if mca_sub.term_state = MAINT_ABNORMAL_TERM then do;
         session_over = "1"b;
         state = "0"b;
      end;
      if mca_sub.term_state = MAINT_NORMAL_TERM then session_over = "1"b;
return_state:
      return (state);
   end check_status_ok;


%page;
/*

   The following function returns the 'console model index' given the console
   model number.  If the model number is not known, -1 is returned.

*/

CONSOLE_MODEL_TO_INDEX_FCN: procedure (model_number) returns (fixed bin);


dcl  model_number fixed bin;
dcl  i fixed bin;


      do i = 1 to hbound (CONSOLE_MODEL_NUMBER, 1);
         if model_number = CONSOLE_MODEL_NUMBER (i)
	then return (CONSOLE_MODEL_INDEX (i));
      end;

      return (-1);


   end CONSOLE_MODEL_TO_INDEX_FCN;

%page;

/* set_cline - internal procedure to add channel line to output */

set_cline: proc (iom, chan, lchan, mpcnm, fldno);

dcl  iom fixed bin (3);
dcl  chan fixed bin (8);
dcl  (lchan, fldno) fixed bin;
dcl  mpcnm char (4) aligned;

      call ioa_$rsnnl ("     ^d^[0^]^dxx^-^[ special purpose chan ^3s^;^[primary^]^[secondary^] channel of ^d logical channel^[s^] on mpc card ^a ^]^/",
       od, ol, (iom), (chan < 10), (chan), (mpcnm = ""), (fldno = 1), (fldno > 1), (lchan), (lchan > 1), mpcnm);
      out_data = rtrim (out_data) || od;		/* add to end of line */

   end set_cline;

%page;
%include author_dcl;
%page;
%include cdt;
%page;
%include config_data_dcls;
%page;
%include config_prph_card;
%page;
%include console_device_specs;
%page;
%include mca_area;
%page;
%include mca_config_file;
%page;
%include mca_constants;
%page;
%include iom_stat;


   end tolts_pcd_;
