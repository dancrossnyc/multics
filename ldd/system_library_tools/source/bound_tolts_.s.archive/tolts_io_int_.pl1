/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/* Original coding by J. K. Rhodes 4Q/77
   Modified by J. A. Bush 78/9/25 to conform to Multics programming standards
   Modified by J. A. Bush 79/02/28 to handle ITR and MDR I/O interrupts
   Modified by G. Haney & R. Fakoury 80/03/24 to treat mtar i/o as polts i/o with no special modes,
   and to handle the second device alocation.
   Modified by R. Fakoury 80/06/03 to reverse the data and status store sequence for polts disk io security
   (iontp string used with finial iotd to status  words)
   Modified 07/30/80 by R. Fakoury to handle a dcw tally of zero and a dcw residue correctly.
   Modified 9/30/82 by R. Fakoury to change an illegal zero dcw to a valid do nothing dcw.
   Modified 12/83 by R. Fakoury to support hypercannel interrupts.
*/




/****^  HISTORY COMMENTS:
  1) change(85-02-01,Fakoury), approve(86-08-21,MCR7514),
     audit(86-11-25,Martinson), install(86-12-04,MR12.0-1235):
     to implement the test nio request
     to implement extended status store,
     to fix a bug handling itr special interrupts for a suspend channel,
     to add changes for responder interrupts.
                                                   END HISTORY COMMENTS */





/* tolts_io_int_ - I/O interrupt processor for POLTS and MOLTS */


/* format: style4,ifthenstmt,ifthen,ind3,ll125,lineconind1 */
tolts_io_int_: proc (event_ptr);


/*  External entries */

dcl  com_err_ entry () options (variable);
dcl  com_err_$convert_status_code_ entry (fixed bin (35), char (*), char (*));
dcl  free_area area based (get_system_free_area_ ());
dcl  get_system_free_area_ entry () returns (ptr);
dcl  hcs_$wakeup entry (bit (36) aligned,
      fixed bin (71), ptr, fixed bin (35));		/* arg 3 is suppose to be fixed bin (71) */
dcl  ioi_$connect_pcw entry (fixed bin (12), fixed bin (18), bit (36) aligned, fixed bin (35));
dcl  ioi_$get_detailed_status entry (fixed bin (12), bit (1) aligned, bit (*), fixed bin (35));
dcl  ioi_$release_devices entry (fixed bin (12), fixed bin (35));
dcl  ipc_$drain_chn entry (fixed bin (71), fixed bin (35));
dcl  mca_$process_io_event entry (fixed bin, ptr, ptr, fixed bin (35));
dcl  rcp_$check_attach entry (bit (36) aligned, ptr, char (*), fixed bin (12), fixed bin (19) aligned,
      fixed bin (71) aligned, fixed bin, fixed bin (35));
dcl  terminate_process_ entry (char (*), ptr);
dcl  timer_manager_$reset_alarm_wakeup entry (fixed bin (71));
dcl  tolts_alm_util_$enter_ccc_req_ entry (ptr, bit (36));
dcl  tolts_init_$gc_tod entry (bit (36));
dcl  tolts_qttyio_$rs entry options (variable);

/* Structures */

dcl  detailed_status bit (288) based;

dcl  1 event_info based (event_ptr),
       2 causing_event fixed bin (71),
       2 message,					/* event message */
         (3 pad1 bit (15),
         3 lv fixed bin (3) unsigned,			/* interrupt level */
         3 pad2 bit (18),
         3 istat bit (36)) unaligned,			/* first word of iom status (or special status) */
       2 sender bit (36),
       2 origin bit (36),				/*  upper 18 bits = signal, lower 18 bits = ring */
       2 in_data_pointer ptr;

dcl  1 fatal_desc aligned,
       2 version fixed bin,
       2 fatal_code fixed bin (35);

dcl  workspace_move char (c_len * 4) based (mvp);		/* move data as char string for effiency */

/* Builtins, Constants, and Static */

dcl  (addr, addrel, bin, bit, fixed, hbound, ptr, rel, string, substr, unspec) builtin;
dcl  (bufp, event_ptr, mvp, wakeup_ptr) ptr;
dcl  code fixed bin (35);
dcl  (c_len, i) fixed bin, error fixed bin (35), stata fixed bin (18);
dcl  (found, continue, read) bit (1);
dcl  g_time bit (36);
dcl  longinfo char (100), shortinfo char (8);
%page;
      io_info_ptr = in_data_pointer;			/* get io_info_ptr from event info */
      if ^io_info.io_in_progress then do;		/* no interrupt expected, lets see if */
         if ^io_info.allocated & io_info.alloc_wait then do;/* allocation waiting, check RCP */

	  if io_info.io_type = mca_io_type then do;
	     allocate mca_area in (free_area) set (mca_area_ptr);
	     call mca_$process_io_event (io_info.mca_ioi_idx, addr (event_info), addr (mca_area), io_info.attach_err);
	     io_info.mca_attach_state = mca_area.mca_attach_state;
	     if io_info.mca_attach_state = MCA_ATTACHING then call signal;
	  end;
	  else if io_info.p_att & ^io_info.p2_att
	   & (io_info.io_type = mdr_io_type
	   | io_info.io_type = mtar_io_type) then	/* if second attach */
	     call rcp_$check_attach (io_info.alt_rcp_id, addr (io_info.alt_rcp_area (1)),
	      longinfo, io_info.alt_device_index, tolts_info.max_wks_sz,
	      tolts_info.max_to, io_info.rcp_state, io_info.attach_err);

	  else call rcp_$check_attach (io_info.rcp_id, addr (io_info.rcp_area (1)),
	        longinfo, io_info.device_index, tolts_info.max_wks_sz, tolts_info.max_to,
	        io_info.rcp_state, io_info.attach_err);

	  if (io_info.io_type ^= mca_io_type
	   & io_info.rcp_state = 0)			/* or attach done */
	   | (io_info.io_type = mca_io_type
	   & io_info.mca_attach_state = MCA_ATTACHED)
	   | io_info.attach_err ^= 0 then do;		/* if attach err */
	     io_info.alloc_wait = "0"b;		/* turn off allocation wait flag */
	     if tolts_info.glob_int_cnt ^= 0 then
	        tolts_info.glob_int_cnt = tolts_info.glob_int_cnt - 1; /* decrement global IO count */
	     call queue_and_signal;			/* go queue up ccc request and issue wakeup */
	  end;
	  if io_info.io_type = mca_io_type then
	     free mca_area_ptr -> mca_area in (free_area);
         end;
         return;					/* and return */
      end;





      if tolts_info.glob_int_cnt ^= 0 then
         tolts_info.glob_int_cnt = tolts_info.glob_int_cnt - 1; /* decrement global IO count */
      if io_info.io_type = mca_io_type then		/* if mca test */
         mca_work_space_ptr = io_info.workspace_ptr;
      if io_info.io_type = rspd_io_type			/* if rspd test */
       then tolts_rspd_wksp = io_info.tolts_rspd_wksp;

      else ioi_wksp = io_info.workspace_ptr;
      go to ilv (event_info.message.lv);		/* process correct interrupt level */

ilv (1):						/* Level 1, IOM fault */
ilv (0): ilv (2): ilv (4): ilv (6):			/* Levels 0, 2, 4 & 6, Illegal */
      call tolts_qttyio_$rs (0, "^as: ^[IOM fault^s^;Illegal Interrupt level - ^d^], IOM status = ^12.3b ^12.3b",
       tolts_info.exec, (tolts_workspace.status.level = 1), tolts_workspace.status.level,
       substr (tolts_workspace.iom_status, 1, 36), substr (tolts_workspace.iom_status, 37, 36));

ilv (5):						/* Level 5, marker interrupt (not expected) */
      if io_info.io_type ^= firm_ld_io_type then do;	/* if not loading firmware... */
         call move_status;				/* go move status to test page */
         status.channel_stat, status.central_stat = "7"b3;	/* phony up iom status */
         status.initiate = "1"b;			/* set initiate */
         status.soft = "01"b;				/* set "timeout" */
         call queue_and_signal;			/* go enter courtesy call request */
      end;
      else call signal;				/* if loading firmware, just wakeup dispatcher */
      return;

ilv (3):						/* Level 3, terminate interrupt */
      if io_info.io_type = mca_io_type then call mca_term;
      else if io_info.io_type = rspd_io_type then call rspd_term;
      else do;
         statp = addr (tolts_workspace.iom_status);	/* set ptr to examine status  */
         if io_info.io_type = polt_io_type		/* if polt io type  terminate interrupt */
	| io_info.io_type = mtar_io_type		/* or mtar, treat like Polts */
	| io_info.io_type = mtc_io_type		/* or mtc, treat like Polts */
	| io_info.io_type = mtg_io_type		/* or mtg, treat like Polts */
	| io_info.io_type = mdc_io_type then		/* or mtg, treat like Polts */
	  call polt_term;

         else if io_info.io_type = itr_io_type		/* if itr io type terminate interrupt */
	| io_info.io_type = mhp_io_type then		/* or mhp io_type then treat like itr */
	  call itr_term;

         else if io_info.io_type = mdr_io_type then	/* if mdr terminate interrupt */
	  call mdr_term;

         else if io_info.io_type = firm_ld_io_type then
	  call signal;				/* if terminate interrupt while loading firmware */
      end;
      return;

ilv (7):						/* Level 7, special interrupt, get special status */
      if io_info.io_type = rspd_io_type then call rspd_spec;

      else do;
         io_info.sp_status = event_info.message.istat;	/* extract special status from event message */
         io_info.sp_flag = "1"b;			/* set availablity flag */
         if io_info.io_type = polt_io_type		/* if polts special interrupt */
	| io_info.io_type = mtc_io_type
	| io_info.io_type = mtg_io_type
	| io_info.io_type = mdc_io_type then
	  call polt_spec;

         else if io_info.io_type = itr_io_type		/* if itr special interrupt */
	| io_info.io_type = mhp_io_type then
	  call itr_spec;

         else if io_info.io_type = mdr_io_type then
	  call mdr_spec;				/* if mdr special interrupt */

         else if io_info.io_type = firm_ld_io_type then
	  call signal;				/* if special interrupt while loading firmware */
      end;

      return;

%page;

/* check_copy - internal procedure to copy data back to test page if reading */

check_copy: proc;

      if status.r then do;				/* if reading copy data, otherwise don't */
         read = "1"b;				/* set read flag */
         idcwp = addr (tolts_workspace.p_idcw);		/* get ptr to primary idcw */
         if idcw.control = "10"b then			/* if continue but set */
	  continue = "1"b;				/* set flag */
         else continue = "0"b;			/* otherwise stop at first iotd */
         found = "0"b;				/* reset terminate condition */
         do i = 1 to hbound (io_info.dcw_list, 1) while (^found); /* go through dcw list */
	  dcwp = addr (io_info.dcw_list (i));		/* set test page dcw ptr */
	  if dcw.char_pos = "7"b3 then do;		/* if idcw */
	     if dcwp -> idcw.control = "10"b then	/* if idcw continue bit set */
	        continue = "1"b;			/* set continue flag */
	     else continue = "0"b;			/* otherwise reset it */
	     if substr (dcwp -> idcw.command, 3, 1) = "0"b then /* if read operation */
	        read = "1"b;			/* set read flag */
	     else read = "0"b;			/* otherwise reset it */
	  end;
	  else if read & dcw.type ^= "11"b then do;	/* if read and not iontp */
	     if dcw.type = "00"b then			/* if iotd */
	        if ^continue then			/* and continue flag not set */
		 found = "1"b;			/* set terminate condition */
	     tdcwp = addr (tolts_workspace.dcw_list (i)); /* set workspace dcw ptr */
	     mvp = addrel (execp, dcw.address);		/* get ptr to data to move */
	     c_len = bin (dcw.tally);			/* get length of data */
	     if c_len = 0 then c_len = 4096;		/* if tally is zero force tally equal to 4096 */
	     if string (dcw) = "0"b then do;		/* if zero dcw then  fake out dcw */
	        c_len = 1;				/* set tally = 1 */
	        mvp = addrel (execp, io_info.status_add); /* set mvp to status_word */
	     end;
	     if found & status.tally ^= "0000"b3 then	/* if last dcw and tally residue */
	        c_len = c_len - bin (status.tally);	/* subtract tally residue */
	     if c_len > 0 then do;			/* if <0 then error and skip */
	        bufp = ptr (ioi_wksp, tdcwp -> dcw.address); /* get ptr to workspace buffer address */
	        workspace_move = bufp -> workspace_move;	/* and move it */
	     end;
	  end;
         end;
      end;
   end check_copy;
%page;

/* itr_spec - interrupt processor for Molt/ITR special interrupts */

itr_spec: proc;

      statp = addrel (execp, io_info.status_add);		/* get ptr to test page status storage */
      string (special_status) = io_info.sp_status;
      if io_info.io_type = mhp_io_type then		/* if hyper leave staus */
         substr (unspec (special_status), 1, 1) = "0"b;	/* just zero the first bit */
      else substr (unspec (special_status), 1, 9) = "0"b;	/* else zero first 9 bits */
      if io_info.release_chan then			/* if special from a release cmd */
         call release_dev;				/* go call ioi_$release_devices */
      else if ^io_info.suspend_chan then
         call queue_and_signal;			/* go enter courtesy call request */

   end itr_spec;

/* itr_term - interrupt processor for Molt/ITR terminate interrupts */

itr_term: proc;

      if tolts_workspace.status.timeout then do;		/* if ioi timeout */
         if ^io_info.to_no_cc then do;			/* if not executing IPCW */
	  statp = addrel (execp, io_info.status_add);	/* get ptr to test page status storage */
	  substr (unspec (status), 1, 18) = "510006"b3;	/* set time out status */
	  call queue_and_signal;			/* go queue up cc request */
         end;
         else io_info.to_no_cc = "0"b;			/* reset flag if set */
      end;
      else if status.power then do;			/* if power off status */
         if io_info.suspend_chan then			/* if this is from suspend channel */
	  io_info.suspend_chan = "0"b;		/* this is the only int we will get */
         call move_status;				/* move status to test page */
         call queue_and_signal;			/* go queue up cc request */
      end;
      else if ^io_info.ignore_term then do;		/* if we are not ignoring terminates */
         call check_copy;				/* go copy data if reading */
         call move_status;				/* move the status to test page */
         call queue_and_signal;			/* queue up cc request */
      end;

   end itr_term;

%page;

/* mca_term - interrupt processor for Molt/MCA terminate interrupts */

mca_term: proc;

      allocate mca_area in (free_area) set (mca_area_ptr);
      call mca_$process_io_event (io_info.mca_ioi_idx, addr (event_info), addr (mca_area), error);
      if error ^= 0 then do;
         if ^substr (unspec (error), 1, 1) then do;
	  call com_err_ (error, "tolts_io_int_", "fatal error, terminating process");
	  fatal_desc.version = 0;
	  fatal_desc.fatal_code = error;		/* copy error code */
	  call terminate_process_ ("fatal_error", addr (fatal_desc));
         end;
      end;
      if mca_work_space.list_of_dcw.idcw1.command = "03"b3 then do;
         data_header_ptr = addr (mca_work_space.data_header_1);
         io_param_blk_ptr = addr (mca_work_space.data_header_1.io_param_blk);
         data_size_1 = fixed (io_parameter_block.source_len_msb || io_parameter_block.source_len_lsb, 16);
         dcwp = addr (io_info.dcw_list (2));
         bufp = addr (mca_work_space.data_header_1);
      end;
      else do;
         io_param_blk_ptr = addr (mca_work_space.data_header_1.io_param_blk);
         data_size_1 = fixed (io_parameter_block.dest_len_msb || io_parameter_block.dest_len_lsb, 16);
         dcwp = addr (io_info.dcw_list (4));
         bufp = addr (mca_work_space.data_header_2);
      end;
      data_header_ptr = addr (mca_work_space.data_header_2);
      io_param_blk_ptr = addr (mca_work_space.data_header_2.io_param_blk);
      data_size_2 = fixed (io_parameter_block.source_len_msb || io_parameter_block.source_len_lsb, 16);
      if string (dcw) = "0"b then do;
         c_len = 1;
         mvp = addrel (execp, io_info.status_add);
      end;
      else do;
         mvp = addrel (execp, dcw.address);
         if dcw.tally = "0"b then c_len = 4096;
         else c_len = bin (dcw.tally);
      end;
      workspace_move = bufp -> workspace_move;
      statp = addrel (execp, io_info.status_add);
      unspec (status) = mca_area.mca_status;
      free mca_area_ptr -> mca_area in (free_area);
      call queue_and_signal;
   end mca_term;
%page;

/* mdr_spec - interrupt processor for Molt/MDR special interrupts */

mdr_spec: proc;

      statp = addrel (execp, io_info.status_add);		/* get ptr to test page status storage */
      string (special_status) = io_info.sp_status;
      if io_info.io_type ^= mhp_io_type then
         substr (unspec (special_status), 1, 9) = "0"b;
      if io_info.suspend_chan then			/* if this is a special from suspend cmd */
         io_info.suspend_chan = "0"b;			/* reset flag */
      if io_info.release_chan then			/* if special from a release cmd */
         call release_dev;				/* go call ioi_$release_devices */

   end mdr_spec;

/* mdr_term - interrupt processor for Molt/MDR terminate interrupts */

mdr_term: proc;

      if tolts_workspace.timeout | status.power | status.major | status.sub |
       status.channel_stat | status.central_stat then do;	/* debug trap */
         c_len = 0;
      end;
      if tolts_workspace.status.timeout then do;		/* if ioi timeout */
         statp = addrel (execp, io_info.status_add);	/* get ptr to test page status storage */
         substr (unspec (status), 1, 18) = "510006"b3;	/* set time out status */
         call queue_and_signal;			/* go queue up cc request */
      end;
      else if status.power then do;			/* if power off status */
         call move_status;				/* move status to test page */
         call queue_and_signal;			/* go queue up cc request */
      end;
      else do;					/* good terminate */

         call check_copy;				/* go copy data if reading */
         call move_status;				/* move iom status to test page */
         call queue_and_signal;			/* go enter courtesy call request */
         if io_info.release_chan then			/* if special from a release cmd */
	  call release_dev;				/* go call ioi_$release_devices */
      end;

   end mdr_term;

%page;

/* move_status - internal procedure to move term status to test page and correct dcw residue address */

move_status: proc;

      if io_info.ext_status_add ^= 0 then
         call ioi_$get_detailed_status (io_info.device_index, "1"b,
	addrel (execp, io_info.ext_status_add) -> detailed_status, code);
      statp = addrel (execp, io_info.status_add);		/* get ptr to test page status storage */
      string (status) = tolts_workspace.iom_status;	/* move the status to the test page */
      if substr (tolts_workspace.iom_status, 37, 36) = "777777777777"b3 then /* if garbage */
         substr (string (status), 37, 36) = "0"b;		/* set to zero */
      else do;					/* otherwise move it */
         i = bin (rel (addr (tolts_workspace.dcw_list (1)))); /* get offset of dcw list */
         if tolts_workspace.offset >= i then do;		/* if we have processed dcws */
	  i = tolts_workspace.offset - i + 1;		/* get array index of last dcw */
	  dcwp = addr (io_info.dcw_list (i));		/* get ptr to unaltered dcw */
	  stata = bin (dcw.address) + bin (dcw.tally);	/* add address and tally */
	  stata = stata - bin (status.tally);		/* and subtract tally residue */
	  status.address = bit (stata);		/* correct test page dcw residue add */
         end;
      end;
   end move_status;

%page;
/* polt_spec - interrupt processor for Polt special interrupts */

polt_spec: proc;

      if io_info.rew_wait then do;			/* special expected? ignore if not */
         io_info.rew_wait = "0"b;			/* yes, reset flag */

/* reconnect original dcw list, this will occur if device was busy before */

         call ioi_$connect_pcw (io_info.device_index, io_info.tio_off, io_info.pcwa, error);
         if error ^= 0 then do;			/* error on connect */
	  call com_err_$convert_status_code_ (error, shortinfo, longinfo);
	  call tolts_qttyio_$rs (0, "^as: Error on connect after special interrupt:^/^a",
	   tolts_info.exec, longinfo);
	  tolts_info.special_fault = "1"b;		/* set special int fault flag */
	  call signal;				/* wakeup dispatcher, but do not queue up cc */
         end;
      end;

   end polt_spec;

/* polt_term - interrupt processor for Polt terminate interrupts */

polt_term: proc;

      if status.major | status.channel_stat | status.central_stat then do; /* debug trap */
         c_len = 0;
      end;
      if tolts_workspace.status.timeout then do;		/* if ioi timeout */
         statp = addrel (execp, io_info.status_add);	/* get ptr to test page status storage */
         unspec (status) = "0"b;			/* clear status first */
         substr (unspec (status), 1, 18) = "510006"b3;	/* set time out status */
         call queue_and_signal;			/* go queue up cc request */
      end;
      else if status.major = "0001"b & io_info.rcp_name = DEVICE_TYPE (TAPE_DRIVE_DTYPEX) then /* else if tape device and */
         io_info.rew_wait = "1"b;			/* device busy, wait for rewind complete */
      else do;					/* normal terminate */

         call check_copy;				/* go copy data if reading */
         call move_status;				/* move iom status to test page */
         call queue_and_signal;			/* go enter courtesy call request */
      end;

   end polt_term;

%page;

/* queue_and_signal - subroutine to enter cc request for io completion (or alloc wait completion) and wakeup the dispatcher */

queue_and_signal: proc;

      call tolts_alm_util_$enter_ccc_req_ (addr (tolts_info.ccc_queue),
       string (io_info.icivlu));			/* enter ccc request */

signal: entry;					/* wakeup the dispatcher */
      io_info.io_in_progress = "0"b;			/* reset io in progress flag */
      wakeup_ptr = in_data_pointer;
      call tolts_init_$gc_tod (g_time);			/* get current time */
      io_info.int_time = bin (g_time, 35);		/* set current interrupt time */
      io_info.chan_time = io_info.chan_time + (io_info.int_time - io_info.con_time); /* delta chan time */
      if tolts_info.gewake_active then do;		/* if gewake alarm set */
         call timer_manager_$reset_alarm_wakeup (tolts_info.gewake_event); /* reset it */
         call ipc_$drain_chn (tolts_info.gewake_event, error); /* make sure no alarms queue up */
         tolts_info.gewake_active = "0"b;		/* reset flag */
      end;
      call hcs_$wakeup (tolts_info.process, tolts_info.wait_list.wait_event_id (1), wakeup_ptr, error);
      if error ^= 0 then do;				/* error on wakeup, terminate proc */
         call com_err_ (error, "tolts_io_int_", "fatal error, terminating process");
         fatal_desc.version = 0;
         fatal_desc.fatal_code = error;			/* copy error code */
         call terminate_process_ ("fatal_error", addr (fatal_desc));
      end;
   end queue_and_signal;


/* release_dev - internal procedure to call ioi_$release_devices and reset release_chan flag */

release_dev: proc;

      io_info.release_chan = "0"b;			/* reset flag */
      call ioi_$release_devices (io_info.device_index, error); /* let ioi have a turn */
      if error ^= 0 then do;				/* error, abort */
         call com_err_$convert_status_code_ (error, shortinfo, longinfo);
         call tolts_qttyio_$rs (0, "^as: Error from ioi_$release_devices:^/^a", tolts_info.exec, longinfo);
         tolts_info.special_fault = "1"b;		/* set special int fault flag */
         call signal;				/* wakeup dispatcher, but do not queue up cc */
      end;
   end release_dev;


/* rspd_spec - interrupt processor for Colt/RSPD special interrupts */

rspd_spec: proc;

      tolts_rspd_workspace.mailbox.lvl7 =
       tolts_rspd_workspace.mailbox.lvl7 + 1;		/* bump spec int count */
      direct_channel_pcw_ptr = addr (io_info.pcwa);
      tolts_rspd_workspace.mailbox.status_word = event_info.message.istat;

      if direct_channel_pcw.operation = "75"b3 then do;	/* if read pcw move data */
         c_len = tolts_rspd_workspace.tcw.host_word_count;
         bufp = addr (tolts_rspd_workspace.data_buf);
         mvp = addrel (execp, direct_channel_pcw.tcw_address + 1);
         workspace_move = bufp -> workspace_move;
      end;
      call signal;
   end rspd_spec;


/* rspd_term - interrupt processor for Colt/RSPD terminate interrupts */

rspd_term: proc;
      tolts_rspd_workspace.mailbox.lvl3 =
       tolts_rspd_workspace.mailbox.lvl3 + 1;		/* inc term int count */
      direct_channel_pcw_ptr = addr (io_info.pcwa);
      tolts_rspd_workspace.mailbox.status_word = event_info.message.istat;
      if direct_channel_pcw.operation = "75"b3 then do;	/* if read pcw read data */
         c_len = tolts_rspd_workspace.tcw.host_word_count;
         bufp = addr (tolts_rspd_workspace.data_buf);
         mvp = addrel (execp, direct_channel_pcw.tcw_address + 1);
         workspace_move = bufp -> workspace_move;
      end;
      call signal;
   end rspd_term;


%page;
%include iom_stat;
%page;
%include mca_area;
%page;
%include mca_data;
%page;
%include mca_data_area;
%page;
%include rcp_resource_types;
%page;
%include tolts_info;
%page;
%include tolts_rspd_workspace;
%page;
%include tolts_workspace;



   end tolts_io_int_;
