/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* format: style4 */
tolts_alrm_util_: proc;

/* tolts_alrm_util_ - a group of entries that are called by asyncronous timers  */

/* coded by J. A. Bush 2/3/79 */

dcl  tolts_qttyio_ entry (char (*), fixed bin);
dcl  hcs_$wakeup entry (bit (36) aligned,
	fixed bin (71), ptr, fixed bin (35));		/* arg 3 is suppose to be fixed bin (71) */
dcl  terminate_process_ entry (char (*), ptr);
dcl  com_err_ entry options (variable);

dcl  1 fatal_desc aligned,
       2 version fixed bin,
       2 fatal_code fixed bin (35);

dcl  error fixed bin (35);
dcl  null builtin;

quit: entry;

/* this entry is called by the tolts_quith event call channel when we are in a blocked state. It is
   used to syncronys the quit signal caused by a terminal break or interrupt key being depressed
   by the user */

	if tolts_info.exec_term_io_wait | tolts_info.term_io_in_prog then
	     tolts_info.optflag = tolts_info.optflag + 1; /* increment options request flag */
	else do;					/* no terminal io in prog, queue up exec read */
	     tolts_info.optflag = 0;			/* reset options request flag */
	     call tolts_qttyio_ ("???", 9);		/* issue exec read */
	end;
	return;

gewake: entry;

/* this entry is called by the gewake event channel when the asyncronous gewake alarm timer goes off
   It is used to wakeup the dispatcher after a specified time period has elapsed, if an io interrupt has
   not ocurred in the meantime. If an io interrupt has occurred, the alrarm timer will be reset
   in the interrupt processor */

	tolts_info.gewake_active = "0"b;		/* reset alarm flag */
	call hcs_$wakeup (tolts_info.process, tolts_info.wait_list.wait_event_id (1), null, error);
	if error ^= 0 then do;			/* if error on wakeup, terminate process */
	     call com_err_ (error, "tolts_alrm_util_", "fatal error, terminating process");
	     fatal_desc.version = 0;
	     fatal_desc.fatal_code = error;		/* copy error code */
	     call terminate_process_ ("fatal_error", addr (fatal_desc));
	end;
	return;					/* thats it */

%include tolts_info;

     end tolts_alrm_util_;
