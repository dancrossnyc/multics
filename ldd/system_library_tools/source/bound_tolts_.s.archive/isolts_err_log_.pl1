/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


isolts_err_log_: proc;

/* isolts_err_log_ - a group of subroutines that maintain the isolts_err_log */
/* initially coded by James A. Bush 6/78 */

/* External entries */

dcl  hcs_$initiate entry (char (*), char (*), char (*), fixed bin (1),
     fixed bin (2), ptr, fixed bin (35));
dcl  hcs_$make_seg entry (char (*), char (*), char (*), fixed bin (5),
     ptr, fixed bin (35));
dcl  hcs_$set_bc_seg entry (ptr, fixed bin (24), fixed bin (35));
dcl  hcs_$set_max_length_seg entry (ptr, fixed bin (19), fixed bin (35));
dcl  iox_$attach_name entry (char (*), ptr, char (*), ptr, fixed bin (35));
dcl  iox_$open entry (ptr, fixed bin, bit (1) aligned, fixed bin (35));
dcl  iox_$close entry (ptr, fixed bin (35));
dcl  iox_$detach_iocb entry (ptr, fixed bin (35));
dcl  date_time_ entry (fixed bin (71), char (*));
dcl  dprint_ entry (char (*), char (*), ptr, fixed bin (35));
dcl  unique_chars_ entry (bit (*)) returns (char (15));
dcl  user_info_ entry (char (*), char (*), char (*));
dcl  dump_segment_ entry (ptr, ptr, fixed bin, fixed bin, fixed bin, bit (*));
dcl  get_default_wdir_ entry returns (char (168));
dcl (com_err_, ioa_$ioa_switch) entry options (variable);
dcl  clock_ entry returns (fixed bin (71));
dcl  tolts_util_$bci_to_ascii entry (bit (*), char (*) varying, fixed bin);

/* External static */

dcl  error_table_$noentry fixed bin (35) ext;
dcl  iox_$user_output ptr ext;

/* Automatic */

dcl (i, j, first, cnt, lim) fixed bin;			/* do loop cnters */
dcl  tlog char (24);
dcl (uname, uproj, uacct) char (32);
dcl  out_str char (136) varying;
dcl  dump_str char (136);
dcl  cd_type char (5);
dcl  code fixed bin (35);
dcl  tptr ptr;
dcl (term, first_printed) bit (1);
dcl  format bit (11);

/* internal static */

dcl (efp, mep, imep, iocbp) ptr int static;		/* ptr to our error file */
dcl  hdir char (168) int static;
dcl  sname char (32) int static;
dcl  mes_begin bit (1) int static;			/* message begin flag */
dcl (s_att, s_open) bit (1) int static init ("0"b);	/* flags for file attachment and opening */

/* Entry parameters */

dcl  rcode fixed bin (35);				/* standard system error rcode */
dcl  mptr ptr;					/* ptr to message text */
dcl  mlen fixed bin;				/* word length of message */
dcl  mtype fixed bin (2);				/* type of message */
dcl (cput, scut) fixed bin (5);			/* cpu and scu tags of cpu in error */
dcl  a_cnt fixed bin;				/* cnt of log entrieds to display */
dcl  a_lim fixed bin;				/* if not = 0 then the number to display from cnt */
dcl  dp_sw bit (1);					/*  = "0"b then display on user's term, = "1"b then dprint */
dcl  d_type char (5);				/* type of dump */

/* Builtins */

dcl (addr, addrel, fixed, floor, length, null, ptr, substr, rel, rtrim, unspec) builtin;

/* Structures */

dcl 1 ilog based (efp) aligned,			/* definition of isolts_err_log */
    2 len fixed bin (35),				/* length of message buffer area in chars */
    2 version fixed bin,				/* version of this log (1) */
    2 first bit (18) unaligned,			/* relative address of first message in log */
    2 last bit (18) unaligned,			/* relative address of last message in log */
    2 init_wd char (4),				/* = "INIT" if log has been initialized */
    2 time_init fixed bin (71),			/* clock time log was initialized */
    2 nxt_seq fixed bin (35),				/* next message sequence numbr */
    2 first_mess bit (1) unaligned,			/* if = "0"b, log is empty */
    2 pad1 bit (35) unaligned,
    2 buffer char (0 refer (ilog.len)),			/* message buffer */
    2 end_buf char (1);				/* end of error file */

dcl 1 ilog_mess based (mep) aligned,			/* format of message entry */
   (2 next bit (18),				/* fwd and backward message threads */
    2 prev bit (18),
    2 mess_complete bit (1),				/* = "1"b if this is a completeed message */
    2 cpu_tag fixed bin (5),				/* tag of cpu generating error message */
    2 scu_tag fixed bin (5),				/* tag of scu being used for cpu test */
    2 pad1 bit (2),
    2 type fixed bin (2),				/* 1 = begin, 2 = intermediate, 3 = end message */
    2 txt_len fixed bin,				/* length of message in characters */
    2 time_logged fixed bin (71),			/* clock time message logged */
    2 seq_num fixed bin (35),				/* message sequence number */
    2 next_full bit (18),				/* ptr to nxt full message */
    2 pad2 bit (18),
    2 text char (0 refer (ilog_mess.txt_len))) unaligned,	/* message text */
    2 nxt_mess char (1);				/* means of spacing to next message */

dcl 1 ilog_imess based (imep) aligned,			/* format of intermediate message entry */
   (2 next bit (18),				/* fwd and backward message threads */
    2 prev bit (18),
    2 pad1 bit (15),
    2 type fixed bin (2),				/* 1 = begin, 2 = intermediate, 3 = end message */
    2 txt_len fixed bin,				/* length of message in characters */
    2 text char (0 refer (ilog_imess.txt_len))) unaligned,	/* message text */
    2 nxt_imess char (1);				/* means of spacing to next message */


/* Constants */

dcl  cleanup condition;
dcl  pname char (6) int static options (constant) init
    ("isolts");
dcl  tags (0 : 7) char (1) static options (constant) init
    ("a", "b", "c", "d", "e", "f", "g", "h");
dcl  NL char (1) int static options (constant) init ("
");
dcl  NP char (1) int static options (constant) init ("");

/* init - entry to initiate or create at first reference the isolts_err_log */

init:	entry (rcode);

	rcode = 0;				/* preset return code */
	mes_begin = "0"b;				/* reset message begin flag */
	hdir = get_default_wdir_ ();			/* get our home dir name */

/* now get a pointer to our error message file */

	call hcs_$initiate (hdir, "isolts_err_log", "", 0, 1, efp, code);
	if efp = null then				/* if error */
	     if code = error_table_$noentry then do;	/* does not exist */
		call com_err_ (0, pname, "Creating ^a>isolts_err_log", hdir);
		call hcs_$make_seg (hdir, "isolts_err_log", "", 01010b, efp, code);
		if efp = null then do;		/* you can't win */
		     call com_err_ (code, pname, "Attempting to create ^a>isolts_err_log", hdir);
		     rcode = code;
		     return;
		end;
ilog_init:
		call hcs_$set_max_length_seg (efp, 65536, code); /* set max length to 64k */
		if code ^= 0 then do;
		     call com_err_ (code, pname, "Setting max length of ^a>isolts_err_log to 64k", hdir);
		     rcode = code;
		     return;
		end;
		call hcs_$set_bc_seg (efp, 65536 * 36, code); /* set bit cnt to 64k */
		if code ^= 0 then do;
		     call com_err_ (code, pname, "Setting bit cnt of ^a>isolts_err_log to 64k", hdir);
		     rcode = code;
		     return;
		end;

/* now lets set up the log header */

		ilog.len = (65536 - fixed (rel (addr (ilog.buffer)))) * 4; /* set buffer length */
		ilog.version = 1;			/* version of this log is 1 */
		ilog.first, ilog.last = rel (addr (ilog.buffer)); /* set first and last message ptrs */
		ilog.nxt_seq = 0;			/* start with a sequence number of 0 */
		ilog.buffer = "";			/* pad message buffer with blanks */
		ilog.first_mess = "0"b;		/* reset first message flag */
		ilog.time_init = clock_ ();		/* get clock time */
		ilog.init_wd = "INIT";		/* set init word */
		return;
	     end;
	     else do;
		call com_err_ (code, pname, "Initiating ^a>isolts_err_log", hdir);
		rcode = code;
		return;
	     end;
	if ilog.init_wd ^= "INIT" then do;		/* if error file inconsistant */
	     call com_err_ (0, pname, "^a>isolts_err_log is inconsistant, reinitializing", hdir);
	     go to ilog_init;
	end;
	return;

/*  */

/* write - entry to write message entries into the isolts_err_log */

write:	entry (mptr, mlen, mtype, cput, scut);

	go to mess_type (mtype);			/* execute desired code */

mess_type (1):					/* message begining */

	mes_begin = "1"b;				/* set message begining flag */
	if ^ilog.first_mess then do;			/* if we haven't written to log before... */
	     mep = addrel (efp, ilog.first);		/* start at begining */
	     ilog_mess.prev = "0"b;			/* and set prev ptr to 0 */
	     ilog.first_mess = "1"b;			/* set first message flag */
	end;
	else do;					/* otherwise go to next message loc */
	     mep = addrel (efp, ptr (efp, ilog.last) -> ilog_mess.next_full);
	     ilog_mess.prev = ilog.last;		/* set prev ptr to last message complete */
	end;
	ilog_mess.mess_complete = "0"b;		/* reset message complete flag */
	ilog_mess.time_logged = clock_ ();		/* set the time */
	ilog_mess.seq_num = ilog.nxt_seq;		/* set sequence number */
	if unspec (ilog.nxt_seq) = "377777777777"b3 then do; /* do not overflow seq number  */
	     call com_err_ (0, pname, "Error message log sequence number has reached max value of ^d, resetting to 0",
		ilog.nxt_seq);
	     ilog.nxt_seq = 0;			/* reset sequence number */
	end;
	else ilog.nxt_seq = ilog.nxt_seq + 1;		/* otherwise just increment it by one */
	ilog_mess.cpu_tag = cput;			/* set cpu and scu tags */
	ilog_mess.scu_tag = scut;
	ilog_mess.type = 1;				/* set start message type */
	ilog_mess.txt_len = cv_wmess (addr (ilog_mess.text)); /* go convert, and store message */
	ilog_mess.next = rel (addr (ilog_mess.nxt_mess)); /* set next message ptr */
	imep = null;				/* and null out intermediate message ptr */

	return;					/* thats it */

mess_type (2):					/* intemediate message */

	if ^mes_begin then do;			/* something is wrong */
	     call com_err_ (0, pname, "Attempting to write intermediate message entry before beginning of message");
	     return;
	end;
	if imep = null then do;			/* if first intermediate message */
	     imep = addrel (efp, ilog_mess.next);	/* set it */
	     ilog_imess.prev = rel (mep);		/* set prev ptr to start message entry */
	end;
	else do;					/* else go from lst intermediate message */
	     tptr = addr (ilog_imess.nxt_imess);	/* set temp ptr */
	     if wrap (tptr) then do;			/* if buffer wrap around */
		tptr = addrel (efp, ilog.first);	/* reset temp ptr to start of buffer */
		ilog_imess.next = rel (tptr);		/* and change thread from last message */
	     end;
	     tptr -> ilog_imess.prev = rel (imep);	/* set prev thread */
	     imep = tptr;				/* and copy ptr */
	end;
	ilog_imess.type = 2;			/* set intermediate type */
	ilog_imess.txt_len = cv_wmess (addr (ilog_imess.text)); /* go convert and write message */
	ilog_imess.next = rel (addr (ilog_imess.nxt_imess)); /* set next ptr */

	return;					/* and return */

mess_type (3):					/* end message */

	mes_begin = "0"b;				/* reset message begin flag */
	ilog_mess.mess_complete = "1"b;		/* and set message complete flag */
	if imep = null then do;			/* if only 1 message entry in this message */
	     tptr = addr (ilog_mess.nxt_mess);
	     ilog_mess.type = 3;			/* set type in main messae to end */
	end;
	else do;
	     tptr = addr (ilog_imess.nxt_imess);	/* if there were intermediate messages */
	     ilog_imess.type = 3;			/* set type in intermeditate message to end */
	end;
	if wrap (tptr) then do;			/* check for wrap around */
	     ilog_mess.next_full = ilog.first;		/* set next message back to start of buffer */
	     if imep ^= null then			/* if intermediate messages */
		ilog_imess.next = ilog.first;		/* set thread to beginning of buffer */
	     else ilog_mess.next = ilog.first;		/* otherwise set tread of maj. message */
	end;
	else do;
	     if substr (rel (tptr), 18, 1) then		/* if odd address */
		tptr = addrel (tptr, 1);		/* make even */
	     ilog_mess.next_full = rel (tptr);		/* no wrap nedded, set to next one in buffer */
	end;
	ilog.last = rel (mep);			/* set last pointer */

	return;					/* and return */

/*  */

/* display - entry to display requested isolts_err_log entries either on user's terminal or queue a dprint */

display:	entry (a_cnt, a_lim, dp_sw);

	if ^ilog.first_mess then do;			/* log is empty */
	     call com_err_ (0, pname, "Error log file is empty");
	     return;
	end;
	cnt = a_cnt;				/* copy parameters */
	lim = a_lim;
	s_att, s_open = "0"b;			/* reset flags */
	if dp_sw then				/* if user wants log entries dprinted... */
	     call attach_file ("ilog", "0"b);		/* go attach print file */
	else iocbp = iox_$user_output;		/* else put it out to terminal */
	on cleanup call clean_up;			/* establish a cleanup handler */
	if cnt = 0 then				/* set defaults */
	     cnt = 1;
	else if cnt = -1 then
	     cnt = 100000;				/* set to big number to make sure we get all */
	if lim = 0 | lim = -1 then
	     lim = 1;
	else lim = cnt - lim;

	first_printed, term = "0"b;			/* reset terminate condition, and first page flag  */
	mep, tptr = addrel (efp, ilog.last);		/* preset ptrs */

	do i = 1 by 1 while (i ^= cnt + 1 & ^term);	/* go backwards to desired number of entries */
	     mep = tptr;				/* set mep to last valid message */
	     if ilog_mess.prev = "0"b then		/* if we come to first message */
		term = "1"b;
	     else tptr = addrel (efp, ilog_mess.prev);	/* otherwise go to prev mess */
	     if tptr -> ilog_mess.next_full ^= rel (mep) | /* if threads do not match up */
	     ilog_mess.prev ^= rel (tptr) then term = "1"b; /* quit */
	end;

/* now go forward through desired number of message entries */

	do j = i-2 to lim by -1;
	     if ilog_mess.mess_complete then do;	/* display only if complete message */
		call date_time_ ((ilog_mess.time_logged), tlog); /* convert date and time */

/* output isolts message header first */

		call ioa_$ioa_switch (iocbp,
		     "^[^|^]^a error message sequence # ^d logged at ^a for cpu ^a using memory ^a",
		     first_printed, pname, ilog_mess.seq_num, tlog,
		     tags (ilog_mess.cpu_tag), tags (ilog_mess.scu_tag));
		term = "0"b;
		first_printed = "1"b;		/* set first page printed flag */
		imep = mep;			/* set ptr equal */

/* now output each message entry */

		do while (^term);
		     if imep = mep then do;		/* if first message entry */
			out_str = ilog_mess.text;	/* copy message text */
			if substr (out_str, 1, 1) = NP then /* if form feed */
			     out_str = substr (out_str, 2); /* get rid of it */
			call ioa_$ioa_switch (iocbp, "^a", out_str); /* output primary message entry */
		     end;
		     else call ioa_$ioa_switch (iocbp, "^a", ilog_imess.text); /* output inter. message entry */
		     if ilog_imess.type = 3 then	/* if end message */
			term = "1"b;		/* this is the last text for this message */
		     else imep = addrel (efp, ilog_imess.next); /* increment  intermediate message ptr */
		end;
	     end;
	     mep = addrel (efp, ilog_mess.next_full);	/* increment message ptr */
	end;
	if dp_sw then				/* if dprinting file */
	     call prt_queue ("ILOG", "0"b);		/* go queue it up */
	return;

/*  */

/* dump - entry to output dumps to a dump file for dprinting */

dump:	entry (d_type, mptr, mlen, mtype, cput, scut);

	if mtype = 1 then do;			/* output text a line at a time */
	     if ^s_att & ^s_open then do;		/* if first time throutgh */
		call attach_file (d_type, "1"b);	/* attach and open print file */
		on cleanup call clean_up;		/* establish a cleanup condition handler */
		call ioa_$ioa_switch (iocbp, "^3-*** ^a ^a of cpu ^a using memory ^a ***^/",
		     pname, d_type, tags (cput), tags (scut)); /* output header line */
	     end;
	     i = cv_wmess (addr (dump_str));		/* go convert message to ascii */
	     if substr (dump_str, 1, 1) = NP then	/* if form feed */
		dump_str = substr (dump_str, 2);	/* get rid of it */
	     call ioa_$ioa_switch (iocbp, "^a", dump_str); /* and store in dump file */
	end;
	else do;					/* output requested octal dump to dump file */
	     call ioa_$ioa_switch (iocbp, "^2/");	/* skip 2 lines */
	     if d_type = "mdump" then do;
		cd_type = "MDUMP";			/* form dype in all caps */
		format = "01000100000"b;		/* rel address only, long form */
		first = fixed (rel (mptr), 17);
	     end;
	     else if d_type = "sdump" then do;
		cd_type = "SDUMP";
		format = "11000100000"b;		/* abs and rel addresses, long form */
		first = 0;			/* relative address begines at 0 */
	     end;
	     else do;
		cd_type = "XDUMP";
		format = "11000100000"b;		/* abs and rel addresses, long form */
		first = 0;			/* relative address begines at 0 */
	     end;
	     call dump_segment_ (iocbp, mptr, 0, first, mlen, format);
	     call prt_queue (cd_type, "1"b);
	end;
	return;

/*  */

/* cv_wmess - internal function subroutine to convert bci message, store, and return length */

cv_wmess:	proc (str_ptr) returns (fixed bin);

dcl  str_ptr ptr;
dcl  in_str bit (mlen * 36) based (mptr);
dcl  bout_str char (136) based (str_ptr);

	     call tolts_util_$bci_to_ascii (in_str, out_str, mlen * 6); /* convert message */
	     if substr (out_str, length (out_str), 1) = NL then /* if trailing newline... */
		out_str = substr (out_str, 1, length (out_str) - 1); /* get rid of it */
	     if substr (out_str, 1, 1) = NL then	/* if leading newline... */
		out_str = substr (out_str, 2);	/* get rid of it */
	     bout_str = out_str;			/* copy results */
	     return (length (out_str));		/* and return length */

	end cv_wmess;

/* wrap - an internal function subroutine to check if the message buffer should be wrapped around */

wrap:	proc (limp) returns (bit (1));

dcl  limp ptr;
	     if fixed (rel (addrel (limp, 40))) > fixed (rel (addr (ilog.end_buf))) then
		return ("1"b);			/* buffer needs to be wraped */
	     else return ("0"b);			/* no need to wrap */

	end wrap;

/* clean_up - internal procedure to close and detach err file */

clean_up:	proc;

	     if s_open then do;			/* if file open */
		call iox_$close (iocbp, code);
		s_open = "0"b;
	     end;
	     if s_att then do;			/* if file attached */
		call iox_$detach_iocb (iocbp, code);
		s_att = "0"b;
		iocbp = null;
	     end;

	end clean_up;

/*  */

/* attach_file - internal procedure to attach and open stream file */

attach_file: proc (fname, ld_sw);

dcl  fname char (*);				/* either ilog or dump */
dcl  ld_sw bit (1);					/* "0"b = ilog, "1"b = dump */

	     sname = unique_chars_ (""b) || "." || fname; /* form unique name */
	     hdir = get_default_wdir_ ();		/* and get our home dir */
	     call iox_$attach_name ("err_file", iocbp, "vfile_ " || rtrim (hdir) || ">" || sname, null, code);
	     if code ^= 0 then do;			/* if some problem with attach */
		call com_err_ (code, pname, "Attempting to attach ^[dump^;error log^] file - ^a>^a",
		     ld_sw, hdir, sname);
		return;				/* get out now */
	     end;
	     s_att = "1"b;				/* indicate our seg is attached */
	     call iox_$open (iocbp, 2, "0"b, code);	/* open for stream output */
	     if code ^= 0 then do;
		call com_err_ (code, pname, "Attempting to open ^a>^a for stream_output", hdir, sname);
		call clean_up;			/* go detach file */
		return;
	     end;
	     s_open = "1"b;
	end attach_file;

/* prt_queue - internal procedure to queue up a dprint request for a error log file or dump file */

prt_queue: proc (rname, ld_sw);

dcl  rname char (*);				/* either "ERR RPT" or "ZDUMP" */
dcl  ld_sw bit (1);

	     call clean_up;				/* close and detach file */
	     call user_info_ (uname, uproj, uacct);	/* get users name and project */
	     out_str = rtrim (uname) || "." || rtrim (uproj); /* form desc line */
	     if length (out_str) < 10 then
		i = floor ((14 - length (out_str)) / 2); /* form center index */
	     else i = 1;				/* if name to long, start at collum 1 */
	     dpap = addr (dprint_arg_buf);		/* set dprint arg ptr */
	     dprint_arg.version = 1;			/* set appropriate args */
	     dprint_arg.copies = 1;
	     dprint_arg.delete = 1;
	     dprint_arg.queue = 3;			/* probably should be queue 1 */
	     dprint_arg.pt_pch = 1;
	     dprint_arg.notify = 1;			/* might want to make this 0 */
	     dprint_arg.output_module = 1;
	     dprint_arg.dest = "";
	     substr (dprint_arg.dest, i) = out_str;	/* set in person/project info */
	     if ld_sw then				/* if printing dump file */
		dprint_arg.heading = " for ISOLTS " || rname;
	     else dprint_arg.heading = " for ISOLTS ER RPT";
	     call dprint_ (hdir, sname, dpap, code);	/* queue it up */
	     call ioa_$ioa_switch (iox_$user_output,
		"^/^[dump^;error report^] file ^a has been queued for printing", ld_sw, sname);
	end prt_queue;

% include dprint_arg;

     end isolts_err_log_;
