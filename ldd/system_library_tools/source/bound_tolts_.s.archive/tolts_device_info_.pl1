/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/* original coding by J. A. Bush 79/02/13.
   Modified by Michael R. Jordan 79/10/09 for new MPC card format.
   Modified by G. Haney & R. Fakoury 80/13/24 to set up secondary sct, rcp for alternate device.
   Modified by R. Fakoury 08/80 include 501 config card and to examine the entire chan config card
   Modified by R. Fakoury 09/80 to remove rcp_ area initialization.
   Modified by R.Fakoury 11/80 to allow mtar to run on 400 type devices
   Modified by R.Fakoury 12/80 to fix bug in chnl card interrupter.
   Modified by R.Fakoury 04/80 & 05/80 to fix a bug in the mpc card interrupter.
   Modified by M.R. Jordan 7/81 for changes in PRPH OPC card format.
   Modified by R. Fakoury 04/82 to add pr54 support and fix ccu bug.
   Modified by C. Horning 08/82 to support new tape config card.
   Modified by R. Fakoury 09/82 to allow booting the eurc from a non-lo order chan.
   Modified by R. Fakoury 11/82 to correct eurc problems and allow cp120 & 121 devices,
   allow mtg, mtc & mdc test request & 128 chan support.
   Modified by R. Fakoury 05/83 to allow mdr testing from non logical 0 chans.
   Modified by R. Fakoury 06/09/83 to corect a mpc attachment problem and answer TRs' 13296, 14742, 15343.
   Modified by R. Fakoury 06/15/83 to correct a problem caused by the changes made for the new tape prph card.
   Modified by R. Fakoury 08/19/83 to support the new opc config card and correct 128chan support bug.
   Modified by R. Fakoury 11/83 to support hyperchannel.
   Modified by R Fakoury 11/83 to make more corrections to support the tape config card.
   Modified by R Fakoury  12/83 to put back a conditional check for a com prph prior to checking for an mpc card.
   Also added changes to remove the restriction on running itrs on non-logical zero channels.
   Modified by R. Fakoury 01/84 to close a hole in an mpc601 and mth610 possible configuration.
   Modified by R Fakoury 04/84 to support the DAU.
   Modified by R Fakoury 10/84 to correct an extranous check to compare an mpc card to a mpc device string.
   Modified by R. Fakoury 10/84 to utilize the system prph card incls.
   Modified by R Fakoury 2/85 to fix a hyperchannel bug.
   Modified by R Fakoury 4/26 to fix a dau bug.
*/


/****^  HISTORY COMMENTS:
  1) change(86-06-04,Hartogs), approve(86-06-04,MCR7383),
     audit(86-06-05,Coppola), install(86-07-18,MR12.0-1098):
     Changed to use version constant in rcp_device_info.incl.pl1.
  2) change(86-08-21,Fakoury), approve(86-08-21,MCR7514),
     audit(86-12-01,Martinson), install(86-12-04,MR12.0-1235):
     to correct an error in attaching the mpc for disk and tape mdrs.
     to correct an extranous check to compare to a mpc device string.
     to utilize the system prph card incls.
     to support Dipper FIPS tape & disk
     to implement test nio request.
     to implement responder test request.
                                                   END HISTORY COMMENTS */


/* tolts_device_info_ - procedure to find a prph by IOM, channel and device and return info.


/* format: style4,ifthenstmt,ifthen,ind3,ll125,lineconind1 */
tolts_device_info_: proc (icdtp, px, type_error);


/* Entry parameters */

dcl  icdtp ptr;					/* ptr to iom, chan, & device info (see icdt structure below) */
dcl  px fixed bin;					/* test page index */
dcl  type_error fixed bin;				/* error code (returned) */

/* Automatic */


dcl  (IOM, CHAN, device2, device, di, MODEL, NDRIVES, i, k) fixed bin;
dcl  model_index fixed bin;
dcl  code fixed bin (35);
dcl  rs_mode fixed bin (5);
dcl  (spec_chan, term, term1, trm, urcitr) bit (1) init ("0"b);
dcl  rcpsp ptr;
dcl  (dname, altname) char (8);
dcl  mdr_cat char (5);
dcl  xregp ptr;
dcl  cont_cardp ptr;



/* Structures and based variables */

dcl  xreg3 bit (36) based (xregp);
dcl  1 cont_card aligned based (cont_cardp) like mpc_card;
dcl  1 icdt based (icdtp) aligned,			/* structure defining input  parameters */
       (2 ficcdd bit (18),				/* iom, chan and device */
       2 tt bit (6),				/* test type: 0 = polt, C = ITRs,  R = MDRs, T = MTAR */
       2 u_opt bit (6),				/* if = bcd "U", then set disk/tape to "T&D_Volume" */
       2 pad1 bit (6)) unaligned;


/* Static, builtins, and external entries */

dcl  ioa_$rsnnl entry options (variable);
dcl  hcs_$initiate entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr, fixed bin (35));
dcl  hcs_$fs_get_mode entry (ptr, fixed bin (5), fixed bin (35));
dcl  tolts_util_$dev0_valid entry (ptr, fixed bin) returns (bit (1));
dcl  tolts_util_$find_card entry (char (4), ptr);

dcl  one_sec fixed bin (35) int static options (constant) init (1000000); /* in micro sec */
dcl  one_min fixed bin (35) int static options (constant) init (60000000); /* in micro sec */
dcl  five_min fixed bin (35) int static options (constant) init (300000000); /* in micro sec */
dcl  execute bit (5) int static options (constant) init ("00100"b);

dcl  tags (1:8) char (1) static options (constant) init
      ("a", "b", "c", "d", "e", "f", "g", "h");

dcl  (addr, addrel, bin, bit, fixed, hbound, mod, null, substr, unspec) builtin;


%page;


      if icdt.tt ^= "0"b & icdt.tt ^= "22"b3 & icdt.tt ^= "23"b3
       & icdt.tt ^= "24"b3 & icdt.tt ^= "25"b3 & icdt.tt ^= "30"b3
       & icdt.tt ^= "41"b3 & icdt.tt ^= "45"b3 & icdt.tt ^= "51"b3
       & icdt.tt ^= "63"b3 & icdt.tt ^= "71"b3 then goto t_err23; /* if invalid test type - set error */
      io_info_ptr = addr (pages (px));			/* get ptr to our page entry */
      unspec (io_info.devsct) = "0"b;			/* initilize device sct */
      io_info.cat_name, io_info.device_name = "";
      type_error = 0;				/* reset return error code */
      if icdt.tt = "71"b3 then do;
         prph_cardp = null;
         term = "0"b;
         do while (^term);
	  call tolts_util_$find_card ("prph", prph_cardp);
	  if prph_cardp = null then goto t_err0;
	  else if prph_card.name = "dia" || tags (io_info.fnp_num + 1) then do;
	     term = "1"b;
	     dname = prph_card.name;
	     IOM = prph_card.iom;
	     CHAN = prph_card.chan;
	     goto c_info;
	  end;
         end;
      end;
      else if substr (icdt.ficcdd, 4, 1) then do;		/* if new format */
         io_info.nff = "1"b;				/* set new format flag */
         xregp = addrel (execp, 33);			/* get ptr to chan number */
         CHAN = fixed (substr (xreg3, 28, 9));		/* save channel number */
         io_info.devsct.icc = "0"b || substr (icdt.ficcdd, 5, 2) /* save icc in devsct */
	|| substr (xreg3, 29, 8);
         IOM = fixed (substr (icdt.ficcdd, 5, 2));	/* set iom number */
      end;
      else do;					/* else old format */
         io_info.nff = "0"b;				/* not new format */
         substr (io_info.devsct.icc, 1, 9) = substr (icdt.ficcdd, 4, 9); /* save iom and channel */
         CHAN = fixed (substr (icdt.ficcdd, 7, 6));	/* and channel number */
         IOM = fixed (substr (icdt.ficcdd, 4, 3));	/* set iom number */
      end;
      device = fixed (substr (icdt.ficcdd, 13, 6));	/* and device number */
      io_info.devsct.device_no = substr (icdt.ficcdd, 13, 6); /* set device number in device sct */

/* first validate IOM number */

      chnl_cardp, iom_cardp, mpc_cardp = null;
      term = "0"b;					/* reset terminate condition */
      do while (^term);				/* find all iom cards */
         call tolts_util_$find_card ("iom ", iom_cardp);	/* find iom card */
         if iom_cardp = null then			/* didn't find iom card, get out of loop */
	  goto t_err0;				/* error, invalid IOM number */
         else if tag - 1 = IOM then do;			/* found right card */
	  if iom_card.state ^= "on " then goto t_err1;
	  if iom_card.model = "imu " then io_info.sct_info.ioc_type = "0001"b;
	  term = "1"b;
         end;
      end;
      if CHAN = 3 then do;
         if iom_card.model ^= "imu" then goto t_err23;
         else dname = "mca" || tags (iom_card.tag);
         goto c_info;
      end;
%page;

/* now validate channel with iom */

      prph_cardp = null;				/* reset prph_cardp to start at beginning of deck */
      term = "0"b;					/* reset terminate condition */
      do while (^term);				/* go thru prph cards to find chan, and iom */
         call tolts_util_$find_card ("prph", prph_cardp);	/* find next config card */
         if prph_cardp = null then term = "1"b;		/* if last card in deck passed */
         else do;
	  if prph_card.iom - 1 = IOM then		/* found iom number */
	     if prph_card.chan = CHAN then		/* and channel */
	        term = "1"b;			/* set terminate condition */
	     else if substr (prph_card.name, 1, 3) = "dsk" then do; /* if disk */
	        prph_dsk_cardp = prph_cardp;
	        if CHAN >= prph_dsk_card.chan
	         & CHAN < prph_dsk_card.chan + prph_dsk_card.nchan then
		 term = "1"b;			/* special case for disks */
	     end;
	     else if substr (prph_card.name, 1, 3) = "tap" then do; /* if tape */
	        prph_tap_cardp = prph_cardp;
	        if CHAN >= prph_tap_card.chan
	         & CHAN < prph_tap_card.chan + prph_tap_card.nchan then
		 term = "1"b;			/* special case for tapes */
	     end;
         end;
      end;
      term = "0"b;					/* reset terminate condition */
      if prph_cardp = null then do;
         do while (^term);				/* look at chanl cards */
	  call tolts_util_$find_card ("chnl", chnl_cardp);
	  if chnl_cardp = null then			/* if last card in deck passed */
	     goto t_err1;				/* channel not assignable */
	  else do i = 1 to 3 while (chnl_card.group (i).iom ^= -1 & ^term);
	     if IOM = chnl_card.group (i).iom - 1 then do;
	        if CHAN >= chnl_card.group (i).chan	/* found chan in range */
	         & CHAN <= (chnl_card.group (i).chan + chnl_card.group (i).nchan - 1) then do;
		 term = "1"b;
		 prph_cardp = chnl_cardp;
		 altname, dname = chnl_card.name;
	        end;
	     end;
	  end;
         end;

         if prph_cardp ^= null
	& icdt.tt = "51"b3 & ^io_info.p2_att then	/* if first attach request & mdr */
	  if substr (dname, 1, 3) = "tap" |		/* if tape or disk */
	   substr (dname, 1, 3) = "dsk" then do;
	     term = "0"b;				/* reset terminate condition */
	     mpc_cardp = null;			/* set config ptr to start at top */
	     do while (^term);
	        call tolts_util_$find_card ("mpc ", mpc_cardp); /* find mpc card */
	        if mpc_cardp = null () then		/* shouldn't happen */
		 goto t_err1;			/* channel unassignable */
	        do i = 1 to 4 while (mpc_card.port (i).iom ^= -1 & ^term); /* ck each field */
		 if mpc_card.port (i).iom - 1 = IOM then/* if match on iom */
		    if CHAN >= mpc_card.port (i).chan
		     & CHAN <= mpc_card.port (i).chan + (mpc_card.port (i).nchan - 1) /* match */
		     then term = "1"b;		/* set terminate condition */
		 device = 0;			/* want to atatch the mpc first */
	        end;
	     end;
	  end;


         term = "0"b;
         prph_cardp = null;
         do while (^term);				/* now find prph card that goes with chnl */
	  call tolts_util_$find_card ("prph", prph_cardp);
	  if prph_cardp = null then goto t_err1;
	  else if prph_card.name = dname then term = "1"b;/* found it */
         end;

         if prph_cardp = null then			/* if this is true, error */
	  goto t_err1;
      end;
      else do;
         dname, altname = prph_card.name;
         if icdt.tt = "51"b3 & ^io_info.p2_att then	/* if first attach request & mdr */
	  if substr (dname, 1, 3) = "tap" |		/* if tape or disk */
	   substr (dname, 1, 3) = "dsk" then device = 0;

      end;

      MODEL, NDRIVES = 0;				/* set device range  to 0 initialy */
      term = "0"b;

      if substr (dname, 1, 3) = "dsk" then do;
         call ioa_$rsnnl ("^a_^[0^]^d", dname, i,
	dname, (device < 10), device);		/* set in ascii device */

         prph_dsk_cardp = prph_cardp;
         if icdt.tt = "23"b3				/* if running itrs */
	| icdt.tt = "51"b3 then do;
	  do i = 1 to 5 while (prph_dsk_card (i).model ^= -1);
	     if prph_dsk_card.group (i).model > MODEL then/* if this model higher than prev */
	        MODEL = prph_dsk_card.group (i).model;	/* use this one */
	  end;
         end;
         else do;
	  do i = 1 to 5 while ((prph_dsk_card.group (i).model ^= -1) & ^term);
						/* go through each possible pair */
	     if prph_dsk_card.group (i).model ^= 0 then do; /* if not fence */
	        if device >= NDRIVES
	         & device <= NDRIVES + prph_dsk_card.group (i).ndrives then do;
		 MODEL = prph_dsk_card.group (i).model; /* found model */
		 if tolts_util_$dev0_valid (addr (config_data_$disk_drive_model_names), MODEL) then
		    io_info.sct_info.cnt_type = "0011"b;

		 if io_info.sct_info.cnt_type ^= "0011"b
		  & device = 0 then goto t_err2;

		 term = "1"b;
		 di = i;
	        end;
	        else NDRIVES = NDRIVES + prph_dsk_card.group (i).ndrives;
	     end;
	     else NDRIVES = NDRIVES + prph_dsk_card.group (i).ndrives;
	  end;
	  if ^term then goto t_err2;			/* invalid device */
         end;
      end;

      else if substr (dname, 1, 3) = "tap" then do;
         prph_tap_cardp = prph_cardp;
         call ioa_$rsnnl ("^a_^[0^]^d", dname, i,
	dname, (device < 10), device);		/* set in ascii device */
         if (device = 0) & (icdt.tt = "23"b3 | icdt.tt = "51"b3) then do;
	  do i = 1 to 5 while (prph_tap_card.group (i).model ^= -1);
	     if prph_tap_card.group (i).model > MODEL then
	        MODEL = prph_tap_card.group (i).model;
	  end;
         end;
         else do;

	  do i = 1 to 5 while ((prph_tap_card.group (i).model ^= -1) & ^term);
	     if prph_tap_card.group (i).model ^= 0 then do;
	        if (device >= NDRIVES)
	         & (device <= NDRIVES + prph_tap_card.group (i).ndrives) then do;
		 MODEL = prph_tap_card.group (i).model;
		 if tolts_util_$dev0_valid (addr (config_data_$tape_drive_model_names), MODEL) then
		    io_info.sct_info.cnt_type = "0011"b;

		 if io_info.sct_info.cnt_type ^= "0011"b
		  & device = 0 then goto t_err2;
		 term = "1"b;
	        end;
	        else NDRIVES = NDRIVES + prph_tap_card.group (i).ndrives;
	     end;
	     else NDRIVES = NDRIVES + prph_tap_card.group (i).ndrives;
	  end;
	  if ^term then goto t_err2;
         end;
      end;



%page;
/* at this point we have ptr to correct prph card */

c_info:
      mdr_cat = "card ";				/* set default mdr catalog suffix */
      io_info.lostit_time =				/* default lostit time is 1 sec (+ 1min from exec) */
       divide ((one_min + one_sec) * 64, 1000, 35);
      device_info_ptr = addr (io_info.rcp_area (1));	/* set general RCP info first */
      device_info.version_num = DEVICE_INFO_VERSION_1;	/* structure version DEVICE_INFO_VERSION_1 */
      device_info.version_num = 1;			/* structure version 1 */
      device_info.usage_time = 0;			/* T&D will use resource for an indefinite time */
      device_info.wait_time = 0;			/* T&D will not wait for the resource */
      device_info.system_flag = "0"b;			/* T&D is not a system process */
      if substr (dname, 1, 3) = "ccu" then call set_ccu;	/* if combined card unit */
      else if substr (dname, 1, 3) = "dsk" then call set_disk; /* if disk subsystem */
      else if substr (dname, 1, 3) = "dia" then call set_dia; /* if dia */
      else if substr (dname, 1, 3) = "hch" then call set_hch; /* if hyperchannel */
      else if substr (dname, 1, 3) = "mca" then call set_mca; /* if mca */
      else if substr (dname, 1, 3) = "opc" then call set_opc; /* if system console */
      else if substr (dname, 1, 3) = "prt" then call set_prt; /* if printer */
      else if substr (dname, 1, 3) = "pun" then call set_pun; /* if card punch */
      else if substr (dname, 1, 3) = "rdr" then call set_rdr; /* if card reader */
      else if substr (dname, 1, 3) = "tap" then call set_tape; /* if tape subsystem */
      else goto t_err1;				/* invalid prph */
      io_info.device_name = dname;			/* copy device name */
      io_info.devsct.com_prph = ck_com_prph ();
      if ^spec_chan
       & ^io_info.devsct.com_prph then call ck_mpc;	/* go check mpc card */
      device_info.device_name = io_info.device_name;	/* set device for rcp */
      if icdt.tt = "0"b then
         io_info.io_type = polt_io_type;		/* set io type (0 = POLT) */
      else if icdt.tt = "22"b3 then
         io_info.io_type = mtc_io_type;			/* MTC io */
      else if icdt.tt = "23"b3 then
         io_info.io_type = itr_io_type;			/* ITR io */
      else if icdt.tt = "24"b3 then
         io_info.io_type = mtg_io_type;			/* MTG io */
      else if icdt.tt = "25"b3 then
         io_info.io_type = mdc_io_type;			/* MDC io */
      else if icdt.tt = "30"b3 then
         io_info.io_type = mhp_io_type;			/* MHP io */
      else if icdt.tt = "41"b3 then
         io_info.io_type = mdc_io_type;			/* MFC io like MDC io */
      else if icdt.tt = "45"b3 then
         io_info.io_type = mca_io_type;			/* NIO io */
      else if icdt.tt = "51"b3 then
         io_info.io_type = mdr_io_type;			/* MDR io */
      else if icdt.tt = "63"b3 then
         io_info.io_type = mtar_io_type;		/* MTAR io */
      else if icdt.tt = "71"b3 then
         io_info.io_type = rspd_io_type;		/* RSPD io */

      io_info.test_hdr = "";				/* build ascii test header */
      call ioa_$rsnnl ("**^d(^[p^;itr^;mdr^;mtr^;itr^;mtc^;mtg^;mdc^;mhp^;nio^;rsp^]^d^[0^]^d^[^2s^;^[0^]^d^]):",
       io_info.test_hdr, i, px - 1, io_info.io_type + 1, IOM, (CHAN < 10),
       CHAN, (io_info.io_type = 1), (device < 10), device);
      return;

t_err0: type_error = m_iv_iom;			/* set error, invalid IOM number */
      return;
t_err1: type_error = ch_not_ass;			/* set error, unrecognized prph */
      return;
t_err2: type_error = iv_dev;				/* set error, invalid device */
      return;
t_err9: type_error = not_psia;			/* set error, not a psia channel */
      return;
t_err10: type_error = not_log_0;			/* set error, not logical channel 0 of mpc */
      return;
t_err21: type_error = dev_busy;			/* set error, device attached by system */
      return;
t_err23: type_error = inv_tt;				/* set error, invalid test type */
      return;
%page;

/* ck_com_prph - function to check if common prph and if molts in control, return "0"b,
   return "1"b if ok and set io_info.com_prph flag */


ck_com_prph: proc returns (bit (1));

      if spec_chan then return ("0"b);			/* special channel don't bother */
      term = "0"b;
      cont_cardp = null;
      do while (^term);
         if io_info.sct_info.cnt_type = "0011"b then
	  call tolts_util_$find_card ("ipc", cont_cardp);
         else call tolts_util_$find_card ("mpc ", cont_cardp);
         if cont_cardp = null () then return ("1"b);	/* If no mpc | ipc cards found */


         if io_info.sct_info.cnt_type = "0011"b then do;
	  ipc_cardp = cont_cardp;
	  if ipc_card.iom - 1 = IOM then		/* if match on iom */
	     if CHAN >= ipc_card.chan
	      & CHAN <= ipc_card.chan + (ipc_card.nchan - 1) then do; /* match */
	        term = "1"b;			/* set terminate condition */
	        return ("0"b);			/* must be an mpc device */
	     end;
         end;
         else do i = 1 to 4 while (cont_card.port (i).iom ^= -1 & ^term); /* ck each field */
	  mpc_cardp = cont_cardp;
	  if cont_card.port (i).iom - 1 = IOM then	/* if match on iom */
	     if CHAN >= cont_card.port (i).chan
	      & CHAN <= cont_card.port (i).chan + (cont_card.port (i).nchan - 1) then do; /* match */
	        term = "1"b;			/* set terminate condition */
	        return ("0"b);			/* must be an mpc device */
	     end;
         end;
      end;


   end ck_com_prph;


/* ck_mpc - internal procedure to check mpc cards */

ck_mpc: proc;

      if cont_card.model >= 8000
       & cont_card.model < 8005 then do;		/* must be a EURC */
         io_info.crcst.volatile = "0"b;			/* make it a eurc mpc */
         io_info.crcst.mpc = "1"b;			/* set mpc flag */
         io_info.sct_info.cnt_type = "0010"b;
         urcitr = "0"b;				/* reset urcitr flag as firmware is not needed */
      end;
      else do;
         io_info.crcst.mpc = "1"b;			/* set mpc flag */
         io_info.crcst.volatile = "1"b;			/* make it a old style mpc */
         if cont_card.model = 800 then
	  io_info.sct_info.cnt_type = "0001"b;
      end;
      if icdt.tt = "23"b3 & io_info.crcst.volatile	/* if running itrs */
       & CHAN ^= cont_card.port (1).chan		/* and not on log chan 0 */
       & ((substr (cont_card.name, 1, 3) = "msp" & cont_card.model < 600)
       | (substr (cont_card.name, 1, 3) = "msp" & cont_card.model = 800)
       | (substr (cont_card.name, 1, 3) = "mtp" & cont_card.model < 610))
       then goto t_err10;				/* error, not on log chan 0 */
      if icdt.tt = "23"b3 then call set_itr_cat;		/* go decode mpc card to determine itr catalog name */




      if urcitr then do;				/* if running itrs on urc, find all firmware */
         io_info.mpc_dev_cnt = mpc_card.port (1).nchan;	/* save number of log channels */
         prph_cardp = null;				/* start at beginning of deck */
         do i = 1 to io_info.mpc_dev_cnt;		/* get each device */
	  trm = "0"b;				/* reset terminate condition */
	  do while (^trm);				/* loop until we find right kind of card */
	     call tolts_util_$find_card ("prph", prph_cardp); /* find prph config card */
	     if prph_cardp = null then trm = "1"b;	/* this should not happen */
	     else if prph_card.iom - 1 = IOM		/* if on right iom */
	      & prph_card.chan >= mpc_card.port (1).chan
	      & prph_card.chan <= mpc_card.port (1).chan + (mpc_card.port (1).nchan - 1) then do; /* if in range */
	        trm = "1"b;				/* set terminate condition */
	        CHAN = prph_card.chan - mpc_card.port (1).chan + 1; /* get right log chan */
	        if substr (prph_card.name, 1, 3) = "rdr"	/* if reader */
	         | substr (prph_card.name, 1, 3) = "pun"	/* if punch */
	         | substr (prph_card.name, 1, 3) = "ccu" then /* if combined reader and punch */
		 call set_mask ("ucrp");
	        else if substr (prph_card.name, 1, 3) = "prt" then /* if printer */
		 call set_mask ("u400");
	     end;
	  end;
         end;
         do k = 1 to 4 while (io_info.dev_firm (k).mask ^= "0"b); /* get true device count */
         end;
         io_info.mpc_dev_cnt = k - 1;			/* set adjusted device count */
      end;
   end ck_mpc;


/* ck_urcd - fuction to check device code on urcmpc device */

ck_urcd: proc returns (bit (1));

      if icdt.tt = "0"b | icdt.tt = "51"b3 then		/* if polts or mdrs */
         if device ^= 1 then				/* device code must be device 1 */
	  return ("0"b);				/* return false */
      if icdt.tt = "51"b3 then			/* if mdrs to be run */
         io_info.cat_name = "mdr." || mdr_cat;		/* set mdr catalog name */
      else if icdt.tt = "23"b3 then do;			/* if itrs on urmpc */
         if device ^= 0 then				/* and device not 0 */
	  return ("0"b);
         urcitr = "1"b;				/* set flag to set up firmware */
      end;
      return ("1"b);

   end ck_urcd;


/*  The following function returns the 'console model index' given the console
   model number.  If the model number is not known, -1 is returned.   */

CONSOLE_MODEL_TO_INDEX_FCN: procedure (model_number) returns (fixed bin);

dcl  (i, model_number) fixed bin;

      do i = 1 to hbound (CONSOLE_MODEL_NUMBER, 1);
         if model_number = CONSOLE_MODEL_NUMBER (i)
	then return (CONSOLE_MODEL_INDEX (i));
      end;

      return (-1);

   end CONSOLE_MODEL_TO_INDEX_FCN;
%page;

/* set_ccu - internal procdure to set type codes for combined card (CCU) equitment */

set_ccu: proc;

%include config_prph_ccu_card;

      prph_ccu_cardp = prph_cardp;
      if model = 401 then do;				/* if correct model */
         io_info.devsct.type_code = "22"b3;		/* set correct type code */
         if ^ck_urcd () then				/* ck device number */
	  goto t_err2;				/* error, invalid device */
         if ^io_info.ccu_pun then do;			/* if mme setpun has not been called... */
	  io_info.rcp_name = DEVICE_TYPE (READER_DTYPEX); /* set default rcp type to reader */
	  substr (dname, 1, 3) = "rdr";
         end;
         else do;
	  io_info.rcp_name = DEVICE_TYPE (PUNCH_DTYPEX);	/* otherwise set for punch */
	  substr (dname, 1, 3) = "pun";
         end;
      end;
      else goto t_err1;				/* not supported */
   end set_ccu;
%page;

/* set_disk - internal procedure to set type codes for disk subsystems */

set_disk: proc;

/* ***************************************************
   *   if mtar 500/501, check for alternate device   *
   *************************************************** */

      if icdt.tt = "63"b3 & (MODEL = 500 | MODEL = 501) then do;
         io_info.alt_dev_flag = "1"b;
         if mod (device, 2) = 1			/* odd device */
	& device + 1 > prph_dsk_card.group (di).ndrives + NDRIVES then
	  goto t_err2;
         else if device - 1 < NDRIVES then goto t_err2;
      end;

      if MODEL = 181 then io_info.devsct.type_code = "60"b3;
      else if MODEL = 190 then io_info.devsct.type_code = "61"b3;
      else if MODEL = 191 | MODEL = 400 then io_info.devsct.type_code = "62"b3;
      else if MODEL = 451 then io_info.devsct.type_code = "65"b3;
      else if MODEL = 500 then io_info.devsct.type_code = "66"b3;
      else if MODEL = 501 then io_info.devsct.type_code = "67"b3;
      else if MODEL = 509 then io_info.devsct.type_code = "70"b3;
      else if MODEL = 3380 then io_info.devsct.type_code = "53"b3;
      else if MODEL = 3381 then io_info.devsct.type_code = "55"b3;
      else goto t_err1;				/* set error */
      if MODEL >= 500 & MODEL < 510 then io_info.crcst.ms500 = "1"b; /* set ms500 indicator */
      if icdt.tt = "51"b3 then			/* if running mdrs */
         io_info.cat_name = "mdr.disk";			/* set mdr catalog name */

      if icdt.tt = "23"b3				/* if running ITRs */
       | (icdt.tt = "51"b3 & ^io_info.p2_att) then	/* if running MDRs & the first attachment */
         io_info.rcp_name = DEVICE_TYPE (SPECIAL_DTYPEX);	/* set "special" designator */
      else do;					/* other wise set up specific info */
         disk_info_ptr = device_info_ptr;
         io_info.rcp_name = DEVICE_TYPE (DISK_DRIVE_DTYPEX);
         disk_info.write_flag = "1"b;
         if icdt.u_opt = "64"b3 then			/* if unload option in force... */
	  disk_info.volume_name = "T&D_Volume";		/* set special volume name */
         else disk_info.volume_name = "scratch";		/* otherwise have operator load and authenicate mount */
         disk_info.device_name = dname;
         disk_info.model = MODEL;



/* *************************************************
   *   set up alternate sct/rcp if mtar 500/501    *
   ************************************************* */

         if io_info.alt_dev_flag then do;
	  io_info.altsct = io_info.devsct;		/* copy sct */
	  if mod (device, 2) ^= 0 then
	     io_info.altsct.device_no = bit (bin (bin (io_info.devsct.device_no, 6) + 1, 6), 6); /* odd device */
	  else io_info.altsct.device_no = bit (bin (bin (io_info.devsct.device_no, 6) - 1, 6), 6);
	  io_info.alt_rcp_area = io_info.rcp_area;	/* build alternate device name */
	  device2 = fixed (io_info.altsct.device_no);
	  disk_info_ptr = addr (io_info.alt_rcp_area);
	  if icdt.u_opt = "64"b3 then
	     disk_info.volume_name = "T&D_Volume";
	  else disk_info.volume_name = "scratch";
	  call ioa_$rsnnl ("^a_^[0^]^d", altname, i, altname, (device2 < 10), device2);
	  disk_info.device_name = altname;		/* store alternate device name in rcp */
	  io_info.alt_device_name = altname;
	  disk_info.model = MODEL;
	  disk_info_ptr = addr (io_info.rcp_area);	/* restore pointer */
         end;

/* check users access to the rcp_sys_ gate. If he has access, make him a system process  */

         call hcs_$initiate (">system_library_1", "rcp_sys_", "", 0, 0, rcpsp, code);
         if rcpsp ^= null then do;
	  call hcs_$fs_get_mode (rcpsp, rs_mode, code);
	  if code = 0 then
	     if bit (rs_mode) & execute then
	        disk_info.system_flag = "1"b;		/* make him a system process */
	  disk_info_ptr = addr (io_info.alt_rcp_area);	/* set pointer to alternate rcp area */
	  disk_info.system_flag = "1"b;		/* set alternate system flag in case needed */
	  disk_info_ptr = addr (io_info.rcp_area);	/* restore pointer */
         end;
      end;

   end set_disk;
%page;

/* set_dia - internal procedure to set device info for a Colts RSPD request */

set_dia: proc;

      spec_chan = "1"b;
      io_info.rcp_name = DEVICE_TYPE (SPECIAL_DTYPEX);	/* set "special" designator */
      device_info.device_name = dname;
      device_info.model = 0;

   end set_dia;


/* set_hch - internal procedure to set type code for hyperchannels */

set_hch: proc;
      if substr (dname, 1, 3) = "hch" then do;
         spec_chan = "1"b;				/* special channel */
         io_info.devsct.type_code = "07"b3;
         io_info.rcp_name = DEVICE_TYPE (SPECIAL_DTYPEX);	/* set "special" designator */
      end;
      else goto t_err2;
   end set_hch;
%page;

/* set_itr_cat - int procedure to set up itr catalog name from mpc card info */

set_itr_cat: proc;

      if substr (mpc_card.name, 1, 3) = "urp" then	/* urmpc is easy */
         io_info.cat_name = "itr.urcmpc";
      else if substr (mpc_card.name, 1, 3) = "mtp" then do; /* mag tapes */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/
/*
   /* Since we are here because we are running itrs and the correct mpc is located, the correct
   /* devsct.type_code will also be set.								*/
/*											*/
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


         if mpc_card.model >= 500 & mpc_card.model < 601	/* mtc500 type */
	then io_info.cat_name = "itr.mtc500";

         else if mpc_card.model = 601 | mpc_card.model = 602 then do; /* mtp601 */
	  io_info.cat_name = "itr.mtp601";
	  if io_info.devsct.type_code = "13"b3
	   then io_info.devsct.type_code = "15"b3;
	  else io_info.devsct.type_code = "16"b3;
	  io_info.crcst.mtp610 = "0"b;		/* if mpc601 there should not be any mth610 devices. */
         end;
         else if mpc_card.model = 610 | mpc_card.model = 611 then do; /* mtp610 */
	  io_info.cat_name = "itr.mtp610";
	  if io_info.devsct.type_code = "13"b3
	   then io_info.devsct.type_code = "15"b3;
	  else io_info.devsct.type_code = "16"b3;
         end;
         else goto t_err1;				/* should go to something for invalid mpc card */
      end;
      else if substr (mpc_card.name, 1, 3) = "msp" then do; /* disks */
         if mpc_card.model = 181 then			/* dsc181 */
	  io_info.cat_name = "itr.dsc181";
         else if mpc_card.model = 190 then		/* dsc190 */
	  io_info.cat_name = "itr.dsc190";
         else if mpc_card.model = 191
	| mpc_card.model = 400
	| mpc_card.model = 451
	| (mpc_card.model >= 600 & mpc_card.model <= 603) then
	  io_info.cat_name = "itr.dsc191";		/* dsc191 */
         else if mpc_card.model >= 604 & mpc_card.model <= 612 then do; /* dsc500 */
	  io_info.cat_name = "itr.dsc500";
	  io_info.crcst.ms500 = "1"b;
         end;
         else if mpc_card.model = 800 then do;		/* msp800 */
	  io_info.cat_name = "itr.msp800";
         end;
         else goto t_err1;
      end;
      else goto t_err1;

   end set_itr_cat;



/* set_mask - internal procedure to set device mask for urcmpc devices */

set_mask: proc (en);

dcl  en char (4);					/* device firmware edit name */

      term = "0"b;					/* reset terminate condition */
      do k = 1 to 4 while (^term);			/* go through all masks */
         if unspec (io_info.dev_firm (k).edit_name) = "0"b
	| io_info.dev_firm (k).edit_name = en then do;	/* if found match */
	  term = "1"b;
	  io_info.dev_firm (k).edit_name = en;		/* set edit name, in case it wasn't  set */
	  substr (io_info.dev_firm (k).mask, CHAN + 1, 1) = "1"b; /* set port mask */
         end;
      end;

   end set_mask;
%page;


/* set_mca - internal procedure to setup io_info for mca */

set_mca: proc;

      if substr (dname, 1, 3) = "mca" then do;
         io_info.lostit_time =			/*  lostit time for the mca is 5min + 1 sec */
	divide ((five_min + one_sec) * 64, 1000, 35);
         spec_chan = "1"b;				/* special channel */
         io_info.cat_name = "nio.IMU";
      end;
      else goto t_err2;
   end set_mca;
%page;

/* set_opc - internal procedure to set up type codes for  operators consoles */

set_opc: proc;

%include config_prph_opc_card;


      prph_opc_cardp = prph_cardp;
      if icdt.tt ^= "0"b then				/* if molts in control */
         goto t_err9;

      if state = "on " | state = "alt " then goto t_err21;

      model_index = CONSOLE_MODEL_TO_INDEX_FCN (prph_opc_card.model);
      if model_index < 0 then goto t_err1;

      io_info.devsct.type_code = CONSOLE_GCOS_TYPE (model_index);

      if CONSOLE_IS_BCD (model_index) then
         if device ^= 0 then				/* device 0 is only legal device code */
	  goto t_err2;
         else ;
      else if device ^= 1 then			/* device 1 is only legal device code */
         goto t_err2;

      spec_chan = "1"b;				/* special channel */
      io_info.rcp_name = DEVICE_TYPE (CONSOLE_DTYPEX);	/* set rcp designator */

   end set_opc;
%page;

/* set_prt - internal procedure to set type codes for printers */

set_prt: proc;

%include config_prph_prt_card;

      prph_prt_cardp = prph_cardp;
      if model = 301 then do;				/* if prt301 */
         if icdt.tt ^= "0"b then			/* if Molts in control... */
	  goto t_err9;				/* can't run Itrs or mdrs on com prph */
         if device ^= 0 then				/* common perp urc equip is device 0 */
	  goto t_err2;				/* error, invalid device */
         io_info.devsct.type_code = "25"b3;
      end;
      else if model = 1000 | model = 1200 | model = 1600 then /* if pru1200/1600 */
         io_info.devsct.type_code = "24"b3;
      else if model = 500 | model = 501
       | model = 901 | model = 1201 then do;		/* check for pr54 id */
         io_info.devsct.type_code = "24"b3;
         io_info.devsct.cr501_pr54 = "1"b;		/* set pr54 flag */
         io_info.crcst.volatile = "0"b;			/* make it a eurc mpc */
         io_info.crcst.mpc = "1"b;			/* set mpc flag */
         io_info.sct_info.cnt_type = "0010"b;
         spec_chan = "1"b;				/* and it is a special channel */
      end;
      else goto t_err1;				/* not supported */
      mdr_cat = "print";				/* set mdr catalog suffix */
      if model >= 900 then				/* if urcmpc device */
         if ^ck_urcd () then				/* ck device number */
	  goto t_err2;				/* error, invalid device */
      io_info.devsct.ptrain = train;			/* set print train number */
      if line_length = 160 then			/* if line length is 160 ... */
         io_info.devsct.ll160 = "1"b;			/* set it */
      printer_info_ptr = device_info_ptr;		/* set up rcp info */
      printer_info.line_length = line_length;
      printer_info.print_train = train;			/* set print train number */
      io_info.rcp_name = DEVICE_TYPE (PRINTER_DTYPEX);

   end set_prt;
%page;

/* set_pun  - internal procedure to set type codes for card punches */

set_pun: proc;

%include config_prph_pun_card;


      prph_pun_cardp = prph_cardp;
      if model = 201 then do;
         if icdt.tt ^= "0"b then			/* if Molts in control... */
	  goto t_err9;				/* can't run itrs or mdrs on com prph */
         if device ^= 0 then				/* common perp urc equip is device 0 */
	  goto t_err2;				/* error, invalid device */
         io_info.devsct.type_code = "23"b3;		/* set type code */
      end;
      else if model > 201 & ^ck_urcd () then		/* ck device number */
         goto t_err2;				/* error, invalid device */
      else if model = 300 | model = 120 | model = 121 then
         io_info.devsct.type_code = "32"b3;
      else if model = 301 then
         io_info.devsct.type_code = "33"b3;
      else if model = 401 then do;			/* if ccu goto ccu proc */
         call set_ccu;
         goto end_sp;
      end;
      else goto t_err1;				/* not supported */
      io_info.rcp_name = DEVICE_TYPE (PUNCH_DTYPEX);	/* set rcp designator */
end_sp: end set_pun;
%page;


/* set_rdr - internal procedure to set type codes for card readers */

set_rdr: proc;

%include config_prph_rdr_card;

      prph_rdr_cardp = prph_cardp;
      if model = 201 then do;				/* if type 201 reader */
         if icdt.tt ^= "0"b then			/* if Molts in control... */
	  goto t_err9;				/* can't run itrs or mdrs on com prph */
         if device ^= 0 then				/* common perp urc equip is device 0 */
	  goto t_err2;				/* error, invalid device */
         io_info.devsct.type_code = "21"b3;		/* set type code */
         if model = 500 | model = 501 then
	  io_info.devsct.cr501_pr54 = "1"b;		/* set cr500 flag */
      end;
      if model > 201				/* if urcmpc device */
       & ^ck_urcd () then goto t_err2;			/* ck device number- error invalid device */
      else do;
         if model = 301 | model = 500 | model = 501 then	/* if type 301 or 500/501 */
	  io_info.devsct.type_code = "34"b3;
         if model = 401 then				/* if ccu goto ccu proc */
	  call set_ccu;
         else goto t_err1;				/* not supported */
      end;
      io_info.rcp_name = DEVICE_TYPE (READER_DTYPEX);	/* set rcp designator */
   end set_rdr;
%page;


/* set_tape - internal procdure to set type codes for tapes */

set_tape: proc;

      if MODEL = 500 then io_info.devsct.type_code = "14"b3;
      else if MODEL = 507 then io_info.devsct.type_code = "13"b3;
      else if MODEL = 600 then io_info.devsct.type_code = "16"b3;
      else if MODEL = 610 then io_info.devsct.type_code = "16"b3;
      else if MODEL = 630 then io_info.devsct.type_code = "16"b3;

      else if io_info.sct_info.cnt_type = "0011"b then	/* if fips controler */
         io_info.devsct.type_code = "16"b3;		/* set type = 16 */
      else goto t_err1;

      if MODEL = 610 | MODEL = 630 then io_info.crcst.mtp610 = "1"b;
      io_info.devsct.den_cap = "0100"b;			/* set for nrzi, and 1600 for now */
      if icdt.tt = "51"b3 then			/* if running mdrs */

         io_info.cat_name = "mdr.tape";			/* set mdr catalog name */
      if icdt.tt = "23"b3				/* if running ITRs */
       | (icdt.tt = "51"b3 & ^io_info.p2_att) then	/* if running MDRs & the first attachment */
         io_info.rcp_name = DEVICE_TYPE (SPECIAL_DTYPEX);	/* set "special" designator */
      else do;					/* other wise set up specific info */
         tape_info_ptr = device_info_ptr;		/* set structure ptr */
         tape_info.version_num = tape_info_version_2;	/* set version 2 for tapes */
         io_info.rcp_name = DEVICE_TYPE (TAPE_DRIVE_DTYPEX);
         tape_info.write_flag = "1"b;
         if icdt.u_opt = "64"b3 then			/* if unload option in force... */
	  tape_info.volume_name = "T&D_Volume";		/* set special volume name */
         else tape_info.volume_name = "scratch";		/* no, let opr load and authenticate mount */
         tape_info.device_name = dname;
         tape_info.model = MODEL;
         if MODEL = 507 then tape_info.tracks = 7;
         else tape_info.tracks = 9;
         io_info.lostit_time = 64000 * 180;		/* 3 min lostit time on tapes */
      end;

   end set_tape;
%page;

%include console_device_specs;
%page;
%include config_data_dcls;
%page;
%include config_chnl_card;
%page;
%include config_iom_card;
%page;
%include config_ipc_card;
%page;
%include config_mpc_card;
%page;
%include config_prph_card;
%page;
%include config_prph_dsk_card;
%page;
%include config_prph_tap_card;
%page;
%include rcp_device_info;
%page;
%include rcp_disk_info;
%page;
%include rcp_printer_info;
%page;
%include rcp_resource_types;
%page;
%include rcp_tape_info;
%page;
%include tolts_err_codes;
%page;
%include tolts_info;


   end tolts_device_info_;

