/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/* format: style4 */
opr_query_response: proc;

/* opr_query_response - operator command interface to respond to an opr_query_ request */
/* initial coding by J. A. Bush 10/78.
   Modified 03/83 by Rick Fakoury to allow the operator to send a message in  responce to a question.
   Modified 08/83 by Rick Fakoury to correct an oversight.
*/

dcl  hcs_$wakeup entry (bit (36) aligned, fixed bin (71), fixed bin (71), fixed bin (35));
dcl  hcs_$initiate entry (char (*), char (*), char (*), fixed bin (1),
	fixed bin (2), ptr, fixed bin (35));
dcl  cu_$arg_count entry (fixed bin, fixed bin (35));
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  com_err_ entry options (variable);

dcl  arg char (al) based (ap);
dcl  (al, arg_cnt, i) fixed bin;
dcl  ap ptr;
dcl  msg char (80) varying init ("");
dcl  code fixed bin (35);
dcl  error_table_$wrong_no_of_args fixed bin (35) ext;
dcl  null builtin;
dcl  pname char (18) static options (constant) init ("opr_query_response");
dcl  sc_dir char (168) static options (constant) init
	(">system_control_1");


	msg = "";
	call cu_$arg_count (arg_cnt, code);
	do i = 1 to arg_cnt;
	     call cu_$arg_ptr (i, ap, al, code);	/* get the operators response */
	     if code ^= 0 then do;			/* some error, tell opr about it */
		call com_err_ (error_table_$wrong_no_of_args, pname, /* so tell him */
		     "Usage: ^a answer", pname);
		return;
	     end;
	     msg = msg || " " || arg;
	end;

	if oqdp = null then do;			/* if first reference in our process */
	     call hcs_$initiate (sc_dir, "opr_query_data", "", 0, 1, oqdp, code); /* initiate opr_query_data segment */
	     if oqdp = null then do;			/* if we can't initiate, tell user */
		call com_err_ (code, pname, "attempting to initiate ^a>opr_query_data", sc_dir);
		return;
	     end;
	end;
	if opr_query_data.lock_id = "0"b then do;	/* no response pending */
	     call com_err_ (0, pname, "No operator response pending");
	     return;
	end;
	if arg = opr_query_data.prim | arg = opr_query_data.alt then do; /* if valid response */
	     opr_query_data.answer = arg;		/* save answer and wakeup requesting process */
	     call hcs_$wakeup (opr_query_data.process_id, opr_query_data.event_chan, 0, code);
	     if code ^= 0 then do;			/* error on wakeup */
		call com_err_ (code, pname, "attempting to issue wakeup to process id ^12.3b",
		     opr_query_data.lock_id);
		return;
	     end;
	end;
	else if opr_query_data.q_sw then do;
	     opr_query_data.answer = msg;		/* save answer and wakeup requesting process */
	     call hcs_$wakeup (opr_query_data.process_id, opr_query_data.event_chan, 0, code);
	     if code ^= 0 then do;			/* error on wakeup */
		call com_err_ (code, pname, "attempting to issue wakeup to process id ^12.3b",
		     opr_query_data.lock_id);
		return;
	     end;
	end;
	else do;					/* if invalid response */
	     call com_err_ (0, pname, " ^[ ^a ^/ ^] ^[ respond: x oqr ^a^]^[ ^/^-^-^-or: x oqr ^a ^] ",
		(opr_query_data.r_comment ^= ""), opr_query_data.r_comment, (opr_query_data.prim ^= ""), opr_query_data.prim,
		(opr_query_data.alt ^= ""), opr_query_data.alt);
	     return;				/* tell opr what is expected and return */
	end;

%include opr_query_data;

     end opr_query_response;
