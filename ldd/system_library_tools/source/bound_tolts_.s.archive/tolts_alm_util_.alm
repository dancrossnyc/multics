" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1982 *
" *                                                         *
" * Copyright (c) 1972 by Massachusetts Institute of        *
" * Technology and Honeywell Information Systems, Inc.      *
" *                                                         *
" ***********************************************************

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Modified by R. Fakoury 8102 to cumpute an icm checksum for colts. 
"
"  The entry point, ascii_to_bcd_, takes a character string
"  as input and produces a bit string of length divide (length (output),6,24)
"  as output. If the output string has more bcd char positions
"  than there are input chars to convert, then the output is blank filled.
"
"  PL/1 Usage:
"
"  dcl tolts_alm_util_$ascii_to_bcd_ entry (char (*), bit (*));
"  call tolts_alm_util_$ascii_to_bcd_ (input_chars, output_bits);
"
"  The entry point, ascii_to_bci_ is the same as ascii_to_bcd_ except
"  that the output string is zero filled.

"  PL/1 Usage:
"
"  dcl tolts_alm_util_$ascii_to_bci_ entry (char (*), bit (*));
"  call tolts_alm_util_$ascii_to_bci_ (input_chars, output_bits);
"
"
"  The entry point enter_slave_ is used to do a transfer into a gcos type object.
"  The single entry argument is a pointer to the desired entry address into the gcos object.
"  By convention this entry point is a 3 word program located in the slave prefix area,
"  at offset  32 (octal). This 3 word program contains:
"  
"  	lreg	<regs>		load safe stored registers
"  	lbar	<bar>,du		load desired base address setting
"  	ret	<saved_ic_and_i>	return to desired ic and i value
"  
"  The enter_slave_ entry merely does an indirect TRA instruction into this entry program.
"  The RET instruction will put the processor in slave mode and returns to the saved IC value
"  that is relative to the loaded BAR.
"
"
"  The entry point gen_ck_sum computes an icm cksum for colts icm's
"	   pl/1 usage:
"  dcl tolts_alm_util_$gen_ck_sum entry (ptr);
"  call tolts_alm_util_$gen_ck_sum entry (icm ptr);
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

	name	tolts_alm_util_
	entry	ascii_to_bcd_
	entry	ascii_to_bci_
	entry	enter_slave_
	entry	enter_ccc_req_
	entry	gen_ck_sum
	temp	temp

gen_ck_sum: 			"generate icm cksum
	epp1	ap|2,*		get ptr to icm
	ldx6	pr1|0,*		get the number of words
	ldx5	1,du		set word index
	ldx4	1,du
	lda	pr1|0,*5		load first word
	ana	-1,dl		exclude cksum bits
	sta	pr1|0,*4		store in cksum word
ck_sum2:
	adlx5	1,du		inc index
	sblx6	1,du		decrement wrod count
	tze	ck_sum3		tally exhausted
	lda	pr1|0,*5		load next word
	ersa	pr1|0,*4		include in checksum
	tra	ck_sum2		loop
ck_sum3:
	lda	pr1|0,*4
	als	18		reduce to 18 bits
	era	pr1|0,*4		store in checksum
	ana	-1,du
	sta	pr1|0,*4
	short_return

ascii_to_bcd_:			" ascii to bcd entry
	ldx5	1,du		set bcd indicator
	tra	*+2

ascii_to_bci_:			" ascii to bci entry
	ldx5	2,du		set bci indicator
	epp1	ap|2,*		address of source string to pr1
	epp3	ap|4,*		address of target string to pr3
	ldx3	0,du		set x3 not to skip parent pointer if none
	lxl2	ap|0		load arg list code value
	canx2	=o0000004,du	check for no parent pointer (code 4)
	tnz	*+2		transfer if no parent pointer
	ldx3	2,du		parent pointer, set x3 to skip it
	ldq	ap|8,x3*		load target string descriptor
	anq	mask		drop all but string size  bits
	div	6,dl		get length of target in BCD characters
	lda	ap|6,x3*		load source string descriptor
	ana	mask		drop all but string size bits
	cmpx5	2,du		test for bci conversion
	tze	cv_bci		tra if bci convert
	even			"EIS address must be even
	mvt	(pr,rl),(pr,rl),fill(040)	now do the ascii to bcd
	desc9a	1|0,al
	desc6a	3|0,ql
	arg	atb_tab
	short_return

	even			"EIS address must be even
cv_bci:
	mvt	(pr,rl),(pr,rl),fill(060)	now do the ascii to bci
	desc9a	1|0,al
	desc6a	3|0,ql
	arg	atb_tab
	short_return

	inhibit	on
enter_ccc_req_:
	push
"
"	pl1 definition of courtesy call queue:
"
"	dcl 1 ccc_queue,
"	    2 ccc_requests fixed bin,	/* number of courtesy call requests outstanding */
"	    2 icivlu (16) bit (36),	/* outstanding ic values (ind value is always 0) */
"
	eppbp	ap|2,*		get ptr to ccc queue
	eppbp	bp|0,*
	lda	bp|0		get ccc request count, current
	adla	1,dl		increment by 1
	sta	bp|0		store updated count
	ldq	ap|4,*		get  ic value to store
	stq	bp|0,al		store in correct queue entry
	anq	777777,du		save only ic value
	return

enter_slave_:
	push
	sprisp	sb|stack_header.bar_mode_sp save sp so signaller can reset
"				 it in case gcos uses adr6
	eppbp	ap|2,*		get the entry ptr
	eppbp	bp|0,*		..
	stz	sp|stack_frame.entry_ptr  make stack traces look nice
	stz	sp|stack_frame.entry_ptr+1
	tra	bp|0		transfer directly into to the entry program

	inhibit	off

mask:	oct	000077777777
	even
atb_tab:
" ascii chars 000 - 037 (8) - invalid bcd chars set to bcd "?" (ignore char)
	oct	017017017017,017017017017,017017017017,017017017017
	oct	017017017017,017017017017,017017017017,017017017017
" ascii chars 040 - 057 (8) = " !"#$%&'()*+,-./"
	oct	020077076013,053074032057,035055054060,073052033061
" ascii chars 060 - 077 (8) = "0123456789:semicolon<=>?"
	oct	000001002003,004005006007,010011015056,036075016017
" ascii chars 100 - 117 (8) = "@ABCDEFGHIJKLMNO"
	oct	014021022023,024025026027,030031041042,043044045046
" ascii chars 120 - 137 (8) = "PQRSTUVWXYZ[\]^_"
	oct	047050051062,063064065066,067070071012,037034040072
" ascii chars 140 - 157 (8) = "`abcdefghijklmno"
	oct	017021022023,024025026027,030031041042,043044045046
" ascii chars 160 - 177 (8) = "pqrstuvwxyz{|}~PAD"
	oct	047050051062,063064065066,067070071012,040034017017


	include	stack_header
	include	stack_frame
	end
