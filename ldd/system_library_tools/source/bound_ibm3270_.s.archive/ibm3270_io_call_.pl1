/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* IBM3270_IO_CALL_ - Handles the io_call order for the ibm3270_ i/o module */
/* Written October 1977 by Larry Johnson */

ibm3270_io_call_: proc (arg_iocbp, arg_info_ptr, arg_code);

/* Parameters */

dcl  arg_iocbp ptr;
dcl  arg_info_ptr ptr;
dcl  arg_code fixed bin (35);

/* Automatic */

dcl  code fixed bin (35);
dcl  iocbp ptr;
dcl  order char (32);
dcl  ev_chan fixed bin (71);
dcl  i fixed bin;
dcl (err, rpt) entry variable options (variable);
dcl  caller char (32);
dcl  free_areap ptr;
dcl  arg_no fixed bin;
dcl  carg char (io_call_info.max_arglen) based (addr (io_call_info.args (arg_no))) var;
dcl  segp ptr;
dcl  segl fixed bin (21);
dcl  seg char (segl) based (segp);
dcl  bit_count fixed bin (24);
dcl  dir char (168);
dcl  ename char (32);

dcl  free_area area based (free_areap);

dcl 1 auto_read_ctl like read_ctl aligned automatic;

/* External */

dcl  iox_$control entry (ptr, char (*), ptr, fixed bin (35));
dcl  get_system_free_area_ entry returns (ptr);
dcl  hcs_$initiate_count entry (char (*), char (*), char (*), fixed bin (24), fixed bin (2), ptr, fixed bin (35));
dcl  hcs_$terminate_noname entry (ptr, fixed bin (35));
dcl  expand_pathname_ entry (char (*), char (*), char (*), fixed bin (35));

dcl  error_table_$noarg ext fixed bin (35);
dcl  error_table_$badopt ext fixed bin (35);

dcl  conversion condition;

dcl (addr, bin, bit, length, null, rtrim, substr, unspec) builtin;

/* Constants */

dcl  write_help (5) char (256) var int static options (constant) init (
     "Usage: io_call control switchname write DEV {control_args}
Command control_args:
  -write, -wr
  -erase_write, -erwr
  -copy DEV, -cp DEV (DEV is from device)
  -erase_unprotected, -erun
  -read_modified, -rdm
  -read_buffer, -rdb",
     "Write control char control_args:
  -print_format BB, -pf BB
  -start_printer, -sp
  -sound_alarm, -sa
  -keyboard_restore, -kr
  -reset_mdt, -rm
  -copy_bits BB, -cb BB",
     "Order control_args:
  -set_buffer_addr POS, -sba POS
  -start_field, -sf
  -insert_cursor, -ic
  -program_tab, -pt
  -repeat_to_addr POS, -rta POS
  -erase_to_addr POS, -eta POS",
     "Attribute control_args (-start_field implied):
  -protected, -pr
  -numeric, -num
  -display_form BB, -df BB
  -mdt",
     "Other args:
  ""data"" (arg with no '-' is stuff to write)
  -string data (for when data starts with -)
  -segment path, -sm path (when data is in segment)
  -next (to start new write_info.data when no data)");

%include io_call_info;

%include ibm3270_io_info;


	iocbp = arg_iocbp;
	io_call_infop = arg_info_ptr;
	order = io_call_info.order_name;
	err = io_call_info.error;
	rpt = io_call_info.report;
	caller = io_call_info.caller_name;
	arg_no = 1;

	if order = "event_info" then do;		/* Return event channel */
	     call iox_$control (iocbp, "event_info", addr (ev_chan), code);
	     if code = 0 then call rpt ("Event channel = ^.3b", unspec (ev_chan));
	end;

	else if order = "poll" then do;
	     i = bin_arg ("device");
	     call iox_$control (iocbp, "poll", addr (i), code);
	end;

	else if order = "read" then do;
	     read_ctlp = addr (auto_read_ctl);
	     read_ctl.version = 1;
	     call iox_$control (iocbp, "read", addr (read_ctl), code); /* Get the data */
	     if code = 0 then do;			/* It worked, print results */
		call rpt ("Device:^-^d ^d  Cursor: ^d", read_info.controller, read_info.device,
		     read_info.cursor_position);
		call rpt ("Reason:^-^d ^d Code ^o", read_info.key, read_info.sub_key, read_info.code);
		if read_info.key = STATUS then call rpt ("Status:^-^b", read_info.bits);
		do i = 1 to read_info.mod_fields;
		     call rpt ("^4d^5d ^a", read_info.field_position (i), length (read_info.contents (i)),
			read_info.contents (i));
		end;
		free read_info;
	     end;
	end;

	else if order = "write" then do;
	     if io_call_info.nargs = 0 then do;		/* Help */
		do i = 1 to 5;
		     call rpt ("^a", write_help (i));
		end;
		code = 0;
		go to control_return;
	     end;
	     free_areap = get_system_free_area_ ();
	     max_write_fields = io_call_info.nargs;
	     max_write_len = io_call_info.max_arglen;
	     do arg_no = 2 to io_call_info.nargs;	/* Gent length of longest -sm arg */
		if carg = "-segment" | carg = "-sm" then do;
		     call path_next_arg;
		     max_write_len = max (max_write_len, segl);
		     call hcs_$terminate_noname (segp, code);
		end;
	     end;
	     allocate write_info in (free_area);	/* Probably too large, but thats ok */
	     unspec (write_info) = "0"b;		/* Start clean */
	     write_info.version = 1;
	     write_info.max_fields = max_write_fields;
	     write_info.max_len = max_write_len;
	     write_info.command = WRITE;
	     arg_no = 1;
	     write_info.device = bin_arg ("device");
	     i = 0;
	     do arg_no = 2 to io_call_info.nargs;
		if carg = "-write" | carg = "-wr" then write_info.command = WRITE;
		else if carg = "-erase_write" | carg = "-erwr" then write_info.command = ERASE_WRITE;
		else if carg = "-copy" | carg = "-cp" then do;
		     write_info.command = COPY;
		     write_info.from_device = bin_next_arg ();
		end;
		else if carg = "-erase_unprotected" | carg = "-erun" then write_info.command = ERASE_UNPROTECTED;
		else if carg = "-read_modified" | carg = "-rdm" then write_info.command = READ_MODIFIED;
		else if carg = "-read_buffer" | carg = "-rdb" then write_info.command = READ_BUFFER;

		else if carg = "-print_format" | carg = "-pf" then write_info.print_format = bit2_next_arg ();
		else if carg = "-start_printer" | carg = "-sp" then write_info.start_printer = "1"b;
		else if carg = "-sound_alarm" | carg = "-sa" then write_info.sound_alarm = "1"b;
		else if carg = "-keyboard_restore" | carg = "-kr" then write_info.keyboard_restore = "1"b;
		else if carg = "-reset_mdt" | carg = "-rm" then write_info.reset_mdt = "1"b;
		else if carg = "-copy_bits" | carg = "-cb" then write_info.copy_bits = bit2_next_arg ();
		else if carg = "-next" then i, write_info.mod_fields = i+1;
		else go to continue_write_scan;	/* Other args require array setup */
		go to end_write_scan;		/* Processed args not releated to data array */
continue_write_scan:
		if i = 0 then i, write_info.mod_fields = 1; /* Must be in at least first array */

		if carg = "-set_buffer_addr" | carg = "-sba" then do;
		     write_info.set_buffer_addr (i) = "1"b;
		     write_info.field_position (i) = bin_next_arg ();
		end;
		else if carg = "-start_field" | carg = "-sf" then write_info.start_field (i) = "1"b;
		else if carg = "-insert_cursor" | carg = "-ic" then write_info.insert_cursor (i) = "1"b;
		else if carg = "-program_tab" | carg = "-pt" then write_info.program_tab (i) = "1"b;
		else if carg = "-repeat_to_addr" | carg = "-rta" then do;
		     write_info.repeat_to_addr (i) = "1"b;
		     write_info.field_position (i) = bin_next_arg ();
		end;
		else if carg = "-erase_to_addr" | carg = "-eta" then do;
		     write_info.erase_to_addr (i) = "1"b;
		     write_info.field_position (i) = bin_next_arg ();
		end;

		else if carg = "-protected" | carg = "-pr" then
		     write_info.protected (i), write_info.start_field (i) = "1"b;
		else if carg = "-numeric" | carg = "-num" then
		     write_info.numeric (i), write_info.start_field (i) = "1"b;
		else if carg = "-display_form" | carg = "-df" then do;
		     write_info.start_field (i) = "1"b;
		     write_info.display_form (i) = bit2_next_arg ();
		end;
		else if carg = "-mdt" then write_info.mdt (i) = "1"b;

		else if carg = "-string" then do;
		     if arg_no = io_call_info.nargs then do;
			call err (error_table_$noarg, caller, "After ^a", carg);
			code = 0;
			go to control_return;
		     end;
		     arg_no = arg_no+1;
		     write_info.contents (i) = carg;
		     if arg_no < io_call_info.nargs then i, write_info.mod_fields = i+1;
		end;
		else if carg = "-segment" | carg = "-sm" then do;
		     call path_next_arg;
		     write_info.contents (i) = seg;
		     call hcs_$terminate_noname (segp, code);
		     if arg_no < io_call_info.nargs then i, write_info.mod_fields = i+1;
		end;
		else if substr (carg, 1, 1) = "-" then do;
		     call err (error_table_$badopt, caller, "^a", carg);
		     code = 0;
		     go to control_return;
		end;
		else do;
		     write_info.contents (i) = carg;
		     if arg_no < io_call_info.nargs then i, write_info.mod_fields = i+1;
		end;
end_write_scan:
	     end;
	     call iox_$control (iocbp, "write", write_infop, code);
	     free write_info;
	end;

	else call iox_$control (iocbp, rtrim (order), null, code);

control_return:
	arg_code = code;
	return;

/* Argument converting routines */

bin_arg:	proc (s) returns (fixed bin);

dcl  s char (*);

	     on conversion go to bin_arg_err;
	     return (bin (carg));
bin_arg_err:
	     call err (0, caller, "Invalid ^a: ^a", s, carg);
	     code = 0;
	     go to control_return;

	end bin_arg;

bin_next_arg: proc returns (fixed bin);

	     if arg_no ^< io_call_info.nargs then do;
		call err (error_table_$noarg, caller, "After ^a", carg);
		code = 0;
		go to control_return;
	     end;
	     arg_no = arg_no + 1;
	     return (bin_arg ((io_call_info.args (arg_no-1))));

	end bin_next_arg;

bit2_arg:	proc (s) returns (bit (2));

dcl  s char (*);

	     on conversion go to bit2_arg_err;
	     return (bit (carg));
bit2_arg_err:
	     call err (0, caller, "Invalid ^a: ^a", s, carg);
	     code = 0;
	     go to control_return;

	end bit2_arg;

bit2_next_arg: proc returns (bit (2));

	     if arg_no ^< io_call_info.nargs then do;
		call err (error_table_$noarg, caller, "After ^a", carg);
		code = 0;
		go to control_return;
	     end;
	     arg_no = arg_no + 1;
	     return (bit2_arg ((io_call_info.args (arg_no-1))));

	end bit2_next_arg;

/* For pathname args */

path_next_arg: proc;

	     if arg_no ^< io_call_info.nargs then do;
		call err (error_table_$noarg, caller, "After ^a", carg);
		code = 0;
		go to control_return;
	     end;
	     arg_no = arg_no + 1;
	     call expand_pathname_ ((carg), dir, ename, code);
	     if code ^= 0 then do;
		call err (code, caller, "^a", carg);
		code = 0;
		go to control_return;
	     end;
	     call hcs_$initiate_count (dir, ename, "", bit_count, 0, segp, code);
	     if segp = null then do;
		call err (code, caller, "^a^[>^]^a", dir, (dir ^= ">"), ename);
		code = 0;
		go to control_return;
	     end;
	     segl = divide (bit_count, 9, 21, 0);
	     return;

	end path_next_arg;

     end ibm3270_io_call_;
