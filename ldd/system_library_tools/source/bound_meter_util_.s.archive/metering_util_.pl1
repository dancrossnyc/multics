/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


metering_util_$define_regions:
     proc;


/* metering utility

   This is a utility subroutine for hardcore metering commands.
   It allows definition of "regions", which are arbitrary
   sections of ring-0 segments containing information of interest
   to the invoker.  These regions are grouped by means of
   a unique index, which allows multiple use of this subroutine
   within the same process.  This subroutine maintains for each
   region two buffers in static storage -- one for the "current"
   copy of the region and one for the "previous" copy; pointers
   to these buffers are returned following definition.

   The following entries are provided:

   metering_util_$define_regions - define  hardcore regions, allocate static
   buffer space

   metering_util_$fill_buffers - copy all regions associated with a
   given unique index into the "current" buffers, and return
   pointers

   metering_util_$reset - copy all "current" buffers associated with
   a given unique index into the "previous" buffers



   Written December 1980 by J. Bongiovanni
   Modified May 1982 by J. Bongiovanni to handle area condition
*/

/* Parameter */

	dcl     current_ptrs	 (*) ptr;		/* pointers to current static buffers		*/
	dcl     formatted_time	 char (*);	/* metering time in hhhh:mm:ss		*/
	dcl     meter_time		 fixed bin (71);	/* metering time in  microseconds		*/
	dcl     previous_ptrs	 (*) ptr;		/* pointers to previous static buffers		*/
	dcl     rcode		 fixed bin (35);	/* error return code			*/
	dcl     unique		 fixed bin;	/* instance identifier			*/

/* Automatic */

	dcl     acode		 fixed bin (35);
	dcl     areap		 ptr;
	dcl     arg_list_ptr	 ptr;
	dcl     arg_numeric		 fixed bin (18);
	dcl     arg_ptr		 ptr;
	dcl     arg_size		 fixed bin;
	dcl     arg_size_1		 fixed bin (21);
	dcl     arg_type		 fixed bin;
	dcl     begin_offset	 fixed bin (18);
	dcl     codep		 ptr;
	dcl     end_offset		 fixed bin (18);
	dcl     HR		 pic "zzz9";
	dcl     MIN		 pic "99";
	dcl     min		 fixed bin;
	dcl     nargs		 fixed bin;
	dcl     prev_region_ptr	 ptr;
	dcl     region_ptr		 ptr;
	dcl     region_no		 fixed bin;
	dcl     r0_ptr		 ptr;
	dcl     SEC		 pic "99";
	dcl     sec		 fixed bin;
	dcl     sub_arg_no		 fixed bin;
	dcl     time_val		 fixed bin (71);
	dcl     type		 fixed bin;
	dcl     unique_index_arg_ptr	 ptr;
	dcl     why		 char (50);

/* Static */

	dcl     our_name		 char (14) init ("metering_util_") int static options (constant);
	dcl     next_unique		 fixed bin int static init (1); /* next instance number			*/
	dcl     unique_region_ptr	 (40) ptr unal int static init ((40) null ()); /* ptrs to linked list of region	*/
	dcl     (begin_end_mess	 char (32) init ("Region must have positive length"),
	        fixed_char_mess	 char (37) init ("Argument must be type numeric or char"),
	        ptr_char_mess	 char (33) init ("Argument must be type ptr or char"),
	        std_err_mess	 char (12) init ("Invalid call"))
				 int static options (constant);

%include std_descriptor_types;

/* Based */

	dcl     arg_name		 char (arg_size) based (arg_ptr);
	dcl     code		 fixed bin (35) based (codep);
	dcl     fixed_bin_based	 fixed bin (18) aligned based (arg_ptr);
	dcl     ptr_ptr		 ptr based;
	dcl     unique_index_arg	 fixed bin based (unique_index_arg_ptr);

	dcl     1 region		 aligned based (region_ptr), /* structure in static for each region to snap	*/
		2 next_region	 ptr,		/* next region this instance			*/
		2 ring0_ptr	 ptr,		/* begin of snap region in ring-0		*/
		2 current_time	 fixed bin (71),	/* time of current snap			*/
		2 previous_time	 fixed bin (71),	/* time of previous snap			*/
		2 nwords		 fixed bin (19),	/* number of words to snap			*/
		2 nwords_alloc	 fixed bin (19),	/* number of words in array (mod 2)		*/
		2 current_snap	 (end_offset - begin_offset + mod (end_offset - begin_offset, 2) refer (region.nwords_alloc)),
		2 previous_snap	 (end_offset - begin_offset + mod (end_offset - begin_offset, 2) refer (region.nwords_alloc));

/* Area */

	dcl     static_area		 area based (areap);


/* External */

	dcl     error_table_$area_too_small fixed bin (35) external;
	dcl     error_table_$bad_arg	 fixed bin (35) external;
	dcl     error_table_$bad_index fixed bin (35) external;
	dcl     error_table_$invalid_array_size fixed bin (35) external;
	dcl     error_table_$wrong_no_of_args fixed bin (35) external;
	dcl     sys_info$time_of_bootload fixed bin (71) external;

/* Entry */

	dcl     assign_		 entry (ptr, fixed bin, fixed bin (35), ptr, fixed bin, fixed bin (35));
	dcl     cu_$arg_count	 entry (fixed bin);
	dcl     cu_$arg_list_ptr	 entry (ptr);
	dcl     cu_$arg_ptr		 entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
	dcl     cu_$arg_ptr_rel	 entry (fixed bin, ptr, fixed bin (21), fixed bin (35), ptr);
	dcl     decode_descriptor_	 entry (ptr, fixed bin, fixed bin, bit (1) aligned, fixed bin, fixed bin, fixed bin);
	dcl     get_system_free_area_	 entry () returns (ptr);
	dcl     ring0_get_$definition	 entry (ptr, char (*), char (*), fixed bin (18), fixed bin, fixed bin (35));
	dcl     ring0_get_$segptr	 entry (char (*), char (*), ptr, fixed bin (35));
	dcl     ring_zero_peek_	 entry (ptr, ptr, fixed bin (19), fixed bin (35));
	dcl     sub_err_		 entry options (variable);

/* Builtin */

	dcl     (addr, clock, divide, hbound, lbound, mod, null, ptr, unspec) builtin;

/* Condition */

	dcl     area		 condition;
	dcl     cleanup		 condition;

/*  */

/* Do preliminary check of arguments.  The number of arguments passed
   must be 2+3*N, where N is the number of hardcore regions (>0) 					*/

	call cu_$arg_count (nargs);
	if nargs <= 2 then do;
call_suberr:
		call sub_err_ (error_table_$wrong_no_of_args, our_name, "s",
		     null (), (0), std_err_mess);
		return;
	     end;

	call cu_$arg_list_ptr (arg_list_ptr);
	call cu_$arg_ptr (1, unique_index_arg_ptr, arg_size_1, acode);
	call cu_$arg_ptr (2, codep, arg_size_1, acode);

	code = 0;

	if mod (nargs - 2, 3) ^= 0 then goto call_suberr;




/* Make sure we havent run out of instances							*/

	if next_unique > hbound (unique_region_ptr, 1) then do;
		code = error_table_$bad_index;
		return;
	     end;

/* go through each region defined, validate it, and allocate
   sufficient static storage to hold 2 snapshots plus control
   information.  If an error is encountered, deallocate all
   static storage allocated this call								*/


	areap = get_system_free_area_ ();
	region_no = 1;
	prev_region_ptr = null ();

	on area begin;
		code = error_table_$area_too_small;
		why = "area condition signalled";
		goto other_error;
	     end;

	on cleanup call cleanup_regions;


	do while (3 * region_no + 2 <= nargs);
	     sub_arg_no = 1;
	     why = ptr_char_mess;
	     call arg_val (3 * region_no);		/* ring-0 segment name or pointer		*/
	     if arg_type = pointer_dtype then r0_ptr = arg_ptr -> ptr_ptr;
	     else if arg_type = char_dtype then do;
		     call ring0_get_$segptr ("", arg_name, r0_ptr, code);
		     if code ^= 0 then do;
			     why = arg_name;
			     goto other_error;
			end;
		end;
	     else goto bad_arg;

	     sub_arg_no = 2;
	     why = fixed_char_mess;
	     call arg_val (3 * region_no + 1);		/* begin offset or symbol name		*/
	     if arg_type = real_fix_bin_1_dtype then begin_offset = fixed_bin_based;
	     else if arg_type = char_dtype then do;
		     call ring0_get_$definition (r0_ptr, "", arg_name, begin_offset, type, code);
		     if code ^= 0 then do;
			     why = arg_name;
			     goto other_error;
			end;
		end;
	     else goto bad_arg;

	     sub_arg_no = 3;
	     why = fixed_char_mess;
	     call arg_val (3 * region_no + 2);		/* length or name 1-word beyond end		*/
	     if arg_type = real_fix_bin_1_dtype then end_offset = fixed_bin_based + begin_offset;
	     else if arg_type = char_dtype then do;
		     call ring0_get_$definition (r0_ptr, "", arg_name, end_offset, type, code);
		     if code ^= 0 then do;
			     why = arg_name;
			     goto other_error;
			end;
		end;
	     else goto bad_arg;

	     why = begin_end_mess;
	     if end_offset - begin_offset <= 0 then goto bad_arg;

	     allocate region in (static_area);
	     region.next_region = null ();
	     region.ring0_ptr = ptr (r0_ptr, begin_offset);
	     region.current_time, region.previous_time = sys_info$time_of_bootload;
	     region.nwords = end_offset - begin_offset;
	     unspec (region.current_snap) = ""b;
	     unspec (region.previous_snap) = ""b;

	     if prev_region_ptr = null ()		/* 1st region this instance			*/
	     then unique_region_ptr (next_unique) = region_ptr;
	     else prev_region_ptr -> region.next_region = region_ptr;

	     prev_region_ptr = region_ptr;
	     region_no = region_no + 1;
	end;

/* Return unique index to be used in future calls							*/

	unique_index_arg = next_unique;
	next_unique = next_unique + 1;

	return;




bad_arg:
	code = error_table_$bad_arg;

/* Error encountered after scan of hardcore regions.
   Deallocate all static storage allocated this call						*/

other_error:

	call cleanup_regions;

	call sub_err_ (code, our_name, "s", null (), (0), "^a. ^a. hardcore region ^d subarg no. ^d",
	     std_err_mess, why, region_no, sub_arg_no);


	return;



/*  */
fill_buffers:
     entry (unique, meter_time, formatted_time, current_ptrs, previous_ptrs, rcode);


/* validate parameters */

	if unique < lbound (unique_region_ptr, 1) | unique > hbound (unique_region_ptr, 1) then do;
fill_buffers_arg_error:
		rcode = error_table_$bad_arg;
		return;
	     end;

	if unique_region_ptr (unique) = null ()
	then goto fill_buffers_arg_error;

	region_no = 0;
	region_ptr = unique_region_ptr (unique);
	do while (region_ptr ^= null ());
	     region_no = region_no + 1;
	     region_ptr = region.next_region;
	end;
	if hbound (current_ptrs, 1) ^= region_no | hbound (previous_ptrs, 1) ^= region_no then do;
		rcode = error_table_$invalid_array_size;
		return;
	     end;

/* snap each hardcore region into the current buffer for same.
   also pick up and return pointers to current and previous buffer					*/

	time_val = clock ();
	region_ptr = unique_region_ptr (unique);
	region_no = 1;
	meter_time = time_val - region.previous_time;

	do while (region_ptr ^= null ());
	     call ring_zero_peek_ (region.ring0_ptr, addr (region.current_snap),
		region.nwords, rcode);
	     if rcode ^= 0 then return;		/* heavy Oops!				*/
	     region.current_time = time_val;
	     current_ptrs (region_no) = addr (region.current_snap);
	     previous_ptrs (region_no) = addr (region.previous_snap);
	     region_ptr = region.next_region;
	     region_no = region_no + 1;
	end;

	sec = divide (meter_time, 1000000, 17);
	SEC = mod (sec, 60);
	min = divide (sec, 60, 17);
	MIN = mod (min, 60);
	HR = divide (min, 60, 17);
	formatted_time = HR || ":" || MIN || ":" || SEC;


	return;

/*  */
reset:
     entry (unique, rcode);

/* validate unique index									*/

	if unique < lbound (unique_region_ptr, 1) | unique > hbound (unique_region_ptr, 1) then goto fill_buffers_arg_error;
	if unique_region_ptr (unique) = null ()
	then goto fill_buffers_arg_error;

	rcode = 0;


/* reset each region for this unique index by copying each current buffer
   into the corresponding previous buffer							*/

	region_ptr = unique_region_ptr (unique);
	do while (region_ptr ^= null ());
	     region.previous_snap = region.current_snap;
	     region.previous_time = region.current_time;
	     region_ptr = region.next_region;
	end;


	return;









/* 
   Internal subroutine to examine arguments and do preliminary screening.

   Assumed on input:
   arg_list_ptr points to argument list for main program

   Set on output:
   arg_type - argument type
   arg_size - argument size
   arg_ptr - pointer to argument

   If the argument is numeric, it is converted to fixed bin (18) aligned,
   and the values above set to the converted argument
*/

arg_val: proc (n);


	dcl     n			 fixed bin;	/* argument number				*/

	dcl     av_code		 fixed bin (35);
	dcl     len		 fixed bin (21);
	dcl     ndims		 fixed bin;
	dcl     packed		 bit (1) aligned;
	dcl     scale		 fixed bin;

	call decode_descriptor_ (arg_list_ptr, n, arg_type, packed, ndims, arg_size, scale);
	if (packed & arg_type ^= char_dtype) | arg_type = -1 | ndims ^= 0 | scale ^= 0
	then goto bad_arg;
	call cu_$arg_ptr_rel (n, arg_ptr, len, av_code, arg_list_ptr);
	if (arg_type <= cplx_flt_dec_9bit_dtype)
	     | (arg_type >= real_fix_bin_1_uns_dtype & arg_type <= real_fix_bin_2_uns_dtype)
	     | (arg_type >= real_fix_dec_4bit_ls_dtype & arg_type <= real_flt_dec_4bit_bytealigned_dtype)
	then do;
		call assign_ (addr (arg_numeric), 2 * real_fix_bin_1_dtype, 18, arg_ptr,
		     2 * arg_type, bin (arg_size, 35));
		arg_ptr = addr (arg_numeric);
		arg_size = 18;
		arg_type = real_fix_bin_1_dtype;
	     end;


     end arg_val;
						/* 
  Internal procedure to clean up any space we may have allocated
*/

cleanup_regions:
     proc;


	prev_region_ptr = unique_region_ptr (next_unique);
	do while (prev_region_ptr ^= null ());
	     region_ptr = prev_region_ptr;
	     prev_region_ptr = region.next_region;
	     free region in (static_area);
	end;

	unique_region_ptr (next_unique) = null ();

     end cleanup_regions;

     end metering_util_$define_regions;
