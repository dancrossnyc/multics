/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* GET_GATE_DATA_ - Procedure to Get Metering Data from a Gate.
   revised 9/15/76 by Noel I. Morris	
   Modified June 1981 by J. Bongiovanni to fix zero linkage size bug	
   Modified July 1984 by Keith Loepere to work against the new, larger hcs_. */
	
get_gate_data_: proc (gate_name, table, nentries, tempp, reset_sw, code);

dcl  gate_name char (*),				/* name of gate */
     nentries fixed bin,				/* number of gate entries */
     tempp ptr,					/* pointer to temp segment */
     reset_sw bit (1) aligned,			/* "1"b if reset operation to be performed at end */
     code fixed bin (35);				/* error code */

dcl 1 table (*) like gate_table aligned;		/* gate information table */

dcl  gp ptr,					/* pointer to gate_info */
     caller_ptr ptr,				/* pointer to caller of this procedure */
     gatep ptr,					/* pointer to gate */
     gateno fixed bin (18),				/* segno of gate */
     savep ptr,					/* pointer to original copy of linkage */
     slp ptr,					/* pointer to static copy of linkage */
     type fixed bin (2),				/* segment type */
     bc fixed bin (24),				/* segment bit count */
     pptr ptr unal,					/* packed pointer from lot */
     l0p ptr,					/* pointer to linkage in ring 0 */
     llth fixed bin (18),				/* length of linkage */
     linkp ptr,					/* pointer to linkage */
     tlth fixed bin (18),				/* length of text */
     textp ptr,					/* pointer to copy of teext */
     defp ptr,					/* pointer to defs */
     no_entries fixed bin,				/* number of gate entries */
     p ptr,					/* working pointer for searching defs */
     i fixed bin,					/* gate table index */
     namep ptr,					/* pointer to entry name */
     entryp ptr,					/* pointer to gate entry point */
     vrel bit (18),					/* rel pointer to gate validation info */
     vp ptr,					/* pointer to validation info */
     datarel bit (18);				/* rel ptr to gate data */

dcl 1 linkhdr like header auto;			/* automatic copy of linkage header */

dcl  ap ptr static init (null ()),			/* pointer to system free area */
     fgp ptr static init (null ()),			/* ptr to first gate_info */
     lotp0 ptr static init (null ());			/* pointer to ring 0 lot */

dcl  caller entry returns (ptr),
     ring0_get_$segptr entry (char (*), char (*), ptr, fixed bin (35)),
     hcs_$status_minf entry (char (*), char (*), fixed bin (1), fixed bin (2), fixed bin (24), fixed bin (35)),
     ring_zero_peek_ entry (ptr, ptr, fixed bin (18), fixed bin (35)),
     get_system_free_area_ entry (ptr);

dcl (addr, addrel, baseno, bin, divide, hbound, lbound, null, ptr, size, unspec) builtin;



dcl 1 gate_info aligned based (gp),
    2 name char (32),				/* name of gate */
    2 user ptr unal,				/* pointer to caller */
    2 textp ptr unal,				/* ptr to segment in ring 0 */
    2 linkp ptr unal,				/* ptr to linkage in ring 0 */
    2 defp ptr unal,				/* pointer to defs */
    2 textl fixed bin (18),				/* length of text in words */
    2 linkl fixed bin (18),				/* length of linkage in words */
    2 stp ptr unal,					/* pointer to static buffer used when doing resets */
    2 next ptr unal;

dcl 1 acc_name based (namep) aligned,			/* name in ACC format */
   (2 size fixed bin (8),
    2 name char (acc_name.size)) unaligned;

dcl 1 gate_entry based aligned,			/* entry pointer to gate */
    2 body_ptr bit (18);				/* pointer to body of gate entry */

dcl 1 gate_body based aligned,			/* body of gate entry */
    2 nargs bit (18) unal,				/* number of arguments */
    2 info_ptr bit (18) unal;				/* rel pointer to information in linkage */

dcl 1 save_data (no_entries) aligned based (savep) like gate_entry_data,
  1 static_data (no_entries) aligned based (slp) like gate_entry_data,
  1 current_data (no_entries) aligned based (tempp) like gate_entry_data;

dcl  based_area area based (ap);


dcl 1 definitions_$ (0:511) ext aligned,		/* hardcore definitions */
   (2 offset bit (18),
    2 length bit (18)) unal;



% include gate_data;



% include linkdcl;



% include definition;



	code = 0;

/* If this is the first call, get static pointers. */

	if ap = null () then			/* Get pointer to system free area. */
	     call get_system_free_area_ (ap);

	if lotp0 = null () then			/* Get a pointer to ring 0 lot. */
	     call ring0_get_$segptr ("", "lot", lotp0, code);
	if code ^= 0 then return;

/* See if we already have data. */

	caller_ptr = caller ();
						/* Get pointer to this procedure's caller. */
	gp = fgp;
	do while (gp ^= null ());
	     if (gate_info.name = gate_name) & (gate_info.user = caller_ptr) then go to found;
	     gp = gate_info.next;
	end;

/* Set up new entry. */

	allocate gate_info in (ap -> based_area) set (gp);
	gate_info.next = fgp;
	fgp = gp;

	call hcs_$status_minf (">system_library_1", gate_name, 1, type, bc, code);
	if code ^= 0 then return;			/* Get length of text. */
	tlth = divide (bc, 36, 18, 0);

	call ring0_get_$segptr ("", gate_name, gatep, code); /* Get segno of gate. */
	if code ^= 0 then return;
	gateno = bin (baseno (gatep), 18);

	call ring_zero_peek_ (addrel (lotp0, gateno), addr (pptr), 1, code); /* Find linkage for gate. */
	if code ^= 0 then return;
	l0p = pptr;

	call ring_zero_peek_ (l0p, addr (linkhdr), size (linkhdr), code); /* Copy linkage header. */
	llth = bin (linkhdr.begin_links, 18) - size (linkhdr); /* Get length of linkage from header. */
	no_entries = divide (llth, size (gate_entry_data), 17, 0); /* Compute no of elements. */
	if no_entries > 0 then do;
	     allocate static_data in (ap -> based_area) set (slp); /* Allocate static buffer. */
	     unspec (static_data) = "0"b;			/* Clear the data. */
	end;
	else slp = null ();

	defp = ptr (addr (definitions_$), definitions_$ (gateno).offset);
						/* Get pointer to definitions for gate. */



/* Fill in new gate info entry. */

	gate_info.linkp = addrel (l0p, 8);
	gate_info.linkl = llth;
	gate_info.defp = defp;
	gate_info.textp = gatep;
	gate_info.textl = tlth;
	gate_info.stp = slp;
	gate_info.name = gate_name;
	gate_info.user = caller_ptr;

found:	
	if gate_info.stp = null () then do;
	     nentries = 0;
	     return;
	end;

/* Copy the linkage from ring 0. */

	l0p = gate_info.linkp;
	llth = gate_info.linkl;
	call ring_zero_peek_ (l0p, tempp, llth, code);	/* Copy out the linkage. */
	if code ^= 0 then return;

/* Compute differences from previous data. */

	slp = gate_info.stp;
	no_entries = divide (llth, size (gate_entry_data), 17, 0);


/* Copy the text from ring 0. */

	gatep = gate_info.textp;
	tlth = gate_info.textl;
	textp = addrel (tempp, llth);
	call ring_zero_peek_ (gatep, textp, tlth, code);
	if code ^= 0 then return;

	savep = addrel (textp, tlth);			/* Get pointer for saved data. */
	save_data = current_data;			/* Save the just copied out data. */
	current_data = current_data - static_data;	/* Compute the differences. */

/* Iterate through the linkage. */

	linkp = addrel (tempp, -8);			/* Make pointer to imaginary linkage header. */
	defp = gate_info.defp;

	i = lbound (table, 1);			/* Initialize count. */
	do p = defp repeat addrel (defp, p -> definition.forward)
		while (p -> definition.forward);
	     if i > hbound (table, 1) then go to done;

	     if p -> definition.ignore then		/* If this isn't really an entry */
		go to next_entry;
	     if p -> definition.class ^= "0"b then	/* Test for segdef to text. */
		go to next_entry;

	     namep = addrel (defp, p -> definition.symbol);

	     if acc_name.name = ".my_lp" then goto next_entry; /* Skip the segdef for gate linkage pointer. */
	     if acc_name.name = ".tv_end" then goto next_entry; /* also watch out for call limited segdef */

	     entryp = addrel (textp, p -> definition.value);
						/* Generate pointer to entry point. */
	     vrel = entryp -> gate_entry.body_ptr;	/* Get relative ptr to validation information. */
	     vp = addrel (textp, vrel);		/* Convert to ITS pointer. */
	     vp = addrel (vp, -1);			/* information is instruction right before */
	     datarel = vp -> gate_body.info_ptr;	/* Get relative ptr to gate data. */
	     if datarel = "0"b then goto next_entry;	/* some gates aren't metered */
	     gate_datap = addrel (linkp, datarel);	/* Convert to ITS pointer. */

	     table (i).entryp = addr (acc_name.name);
	     table (i).entryl = acc_name.size;
	     table (i).datap = gate_datap;

	     i = i + 1;
next_entry:
	end;

done:
	nentries = i - lbound (table, 1);

	if reset_sw then				/* If reset desired ... */
	     static_data = save_data;			/* Set new static data. */

	return;




     end get_gate_data_;
