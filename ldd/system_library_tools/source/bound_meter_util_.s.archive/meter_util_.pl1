/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


meter_util_: proc;

/* This procedure contains several entries which are used by the hardcore
   metering programs. To use this package, the user must first
   call meter_util_$get_buffers to reserve some buffer space (in internal
   static -- or at least in the linkage segment).	 */
/* mod fall 78 REM- copy out 280 (not 256) words of tc_data */
/* Modified November 1984 by M. Pandolf to include hc_lock. */


dcl 1 pa (40) aligned static,
    2 pad (10) fixed bin;

dcl  ring_zero_peek_ ext entry (ptr, ptr, fixed bin, fixed bin (35)),
     ioa_ ext entry options (variable),
     ioa_$rsnnl ext entry options (variable),
     ring0_get_$segptr ext entry (char (*), char (*), ptr, fixed bin),
     hcs_$assign_linkage ext entry (fixed bin, ptr, fixed bin),

     unique_index fixed bin,
     meter_time float bin,
     rs char (12) aligned,
     a_meter_time float bin,
    (a_sstp1, a_sstp2, a_tcdp1, a_tcdp2, p, lp) ptr,
    (code, ignore, sec, min, hr) fixed bin,
     error_code fixed bin (35),
     static_index fixed bin static init (1),
    (sstp0, tcdp0) ptr static,
     inited bit (1) static init ("0"b),
    (mod, addr, addrel, divide, substr) builtin,
     move_280 (280) fixed bin based,
     move_512 (512) fixed bin based;

dcl 1 pa1 based (p) aligned,
    2 reset_called fixed bin,
    2 pad fixed bin,
    2 (sstp1, sstp2, tcdp1, tcdp2) ptr;

	% include sst;
	% include tcm;
	% include hc_lock;

/* 
   get_buffers

   This entry is called to reserve 4 buffers in the combined linkage
   segment(s) for the process. One buffer is used for the current sst data,
   one buffer is used for the past sst data, one buffer is used for the
   current tc_data data, and the last buffer is used for the past tc_data
   data.						 */

get_buffers: entry (unique_index, a_sstp1, a_sstp2, a_tcdp1, a_tcdp2, code);

	unique_index = static_index;
	static_index = static_index + 1;		/* increment unique index generator */
	if static_index > 40 then do;			/* don't let things get out of hand */
	     code = 1;
	     return;
	end;

	call hcs_$assign_linkage (1584, lp, code);	/* reserve the necessary storage */
	if code ^= 0 then return;

	p = addr (pa (unique_index));			/* get pointer to the current sub-structure */
	sstp1, a_sstp1 = lp;			/* generate pointers, return them, and save them */
	sstp2, a_sstp2 = addrel (lp, 512);
	tcdp1, a_tcdp1 = addrel (lp, 1024);
	tcdp2, a_tcdp2 = addrel (lp, 1304);

	if ^ inited then do;			/* if haven't got ring zero pointers yet, get them */
	     call ring0_get_$segptr ("", "sst", sstp0, code); /* get ring zero sst pointer */
	     if code ^= 0 then return;
	     call ring0_get_$segptr ("", "tc_data", tcdp0, code); /* get ring zero tc_data pointer */
	     inited = "1"b;				/* indicated we've found the pointers */
	end;

	return;

fill_buffers: entry (unique_index);

/* This entry reads the current data from the sst and tc_data and
   copies it into the "current" buffer for the specified caller. */

	p = addr (pa (unique_index));			/* get a pointer to the current set of pointers */
	call ring_zero_peek_ (sstp0, sstp2, 512, error_code); /* copy out the sst */
	call ring_zero_peek_ (tcdp0, tcdp2, 280, error_code); /* copy out the tc_data header */

	return;

reset:	entry (unique_index);

/* This entry is called to copy the current buffers into the old buffers
   and hence cause an effective reset of the meters. */

	p = addr (pa (unique_index));			/* get a pointer to the current set of pointers */
	reset_called = 1;				/* set flag saying reset was called */
	tcdp1 -> move_280 = tcdp2 -> move_280;		/* copy the tc_data header */
	sstp1 -> move_512 = sstp2 -> move_512;		/* copt the sst header */

	return;

time:	entry (unique_index, a_meter_time);

/* This entry prints the time of the metering interval and returns
   the same to the caller. */

	p = addr (pa (unique_index));			/* get a pointer to the callers variables */
	if reset_called = 0 then
	     meter_time = tcdp2 -> tcm.last_time - tcdp2 -> tcm.initialize_time; /* use time since bootload */
	else
	meter_time = tcdp2 -> tcm.last_time - tcdp1 -> tcm.last_time; /* use time since last reset */

	sec = meter_time*1e-6;			/* get number of seconds of metering */
	min = divide (sec, 60, 17, 0);		/* get minutes of metering */
	hr = divide (min, 60, 17, 0);			/* get hours of metering */
	sec = mod (sec, 60);			/* get seconds left in last minute */
	min = mod (min, 60);			/* get minutes left in last hour */
	call ioa_$rsnnl ("^4d^3d^3d", rs, ignore, hr, min+100, sec+100); /* convert to character string */
	substr (rs, 5, 1) = ":";			/* fill in separators */
	substr (rs, 8, 1) = ":";
	call ioa_ ("^/Total metering time^-^a^/", rs);	/* print out the metring time */

	a_meter_time = meter_time;			/* return metering interval lenght */

	return;

     end meter_util_;
