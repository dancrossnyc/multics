/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: style4 */

cpg_: proc (p, code);

/* CPG_ - Create Process Group.

   This program is called by dialup_, absentee_user_manager, and
   daemon_user_manager_ to create user processes.

   It fills in the PIT (Process Initialization Table) with arguments and
   info for the new process, and passes its arguments to the hardcore in
   a structure called "create_info".

   The hardcore will allocate an APT entry and fill in the process ID,
   copy the template PIT into a real PIT for the process, and start the
   process up.

   See act_proc_ and initialize_process_ for how a process gets going.

   Spier 2/13/69
   modified by Dennis Capps 3/22/72
   modified by Richard G. Bratt 10/11/72 to pass the offset of pit.homedir to act_proc
   daemons, kst_size etc added 10/13/72 THVV
   Modified 740731 by PG for AIM stuff.
   Modified by T. Casey on 24 Oct 75 to unpack initproc and subsystem from ate.init_proc and copy them into create_info.
   Modified 760601 by PG to factor installation_parms.abs_cpu_limit into absentee job cpu limit.
   Modified 761229 by D. M. Wells to put more TTY info into PIT (line_type, etc.)
   Modified 770623 by Robert Coren to use names instead of numbers for terminal types.
   Modified August 1977 by FCSmith for separate TTY and connect time charging,
   .		and by T. Casey to give "p" tag to proxy absentee processes,
   .			and to set up an any other handler to catch faults occurring while creating process.
   Modified January 1978 by T. Casey to fix bugs in previous modification.
   Modified May 1978 by T. Casey to use ate.pdir_quota in determining process directory quota.
   Modified November 1978 by T. Casey for MR7.0 absentee control parameters.
   Modified July 1979 by T. Casey for MR8.0 to add set_pit_tty_info entry point for process preservation across hangups.
   Modified Feb 1980 by M. B. Armstrong to implement multiple rate structures (UNCA).
   Modified March 1980 by Tom Casey to add metering.
   Modified May 1980 by R. McDonald to include page charging. (UNCA)
   Modified December 1980 by E. N. Kittlitz for foreground timax fix.
   Modified June 1981 by E. N. Kittlitz for UNCA rate structures, page charging.
   Modified November 1981, E. N. Kittlitz.  user_table_entry conversion.
   Modified April 1982, E. N. Kittlitz. New AS initialization
   Modified October 1982, E. N. Kittlitz. request_id in pit.
   Modified 84-04-02 BIM. Removed terminal_access_class from PIT, its
   available from tty_.
   Modified 84-09-12 BIM added login auth range, since HC is not interested
   in min.
   Modified 1984-10-05 BIM to remove communications.
   Modified 1984-12-27 Keith Loepere for pdir dir_quota.
   Modified 1985-01-18 by E. Swenson for new AS auditing.
   Modified 1985-04-19 by E. Swenson to not catch signal_io_ condition.
*/

/****^  HISTORY COMMENTS:
  1) change(86-05-13,GJohnson), approve(86-05-13,MCR7387),
     audit(86-05-13,Martinson), install(86-05-14,MR12.0-1055):
     Correct error message documentation.
  2) change(86-05-19,Gilcrease), approve(86-05-20,MCR7370),
     audit(86-06-25,Lippard), install(86-06-30,MR12.0-1082):
               Implement -truncate absout files. SCP6297.
  3) change(87-04-27,GDixon), approve(87-07-13,MCR7741),
     audit(87-07-21,Brunelle), install(87-08-04,MR12.1-1055):
     Upgraded for change to answer_table.incl.pl1 and user_table_entry.incl.pl1
  4) change(87-05-12,GDixon), approve(87-07-13,MCR7741),
     audit(87-07-21,Brunelle), install(87-08-04,MR12.1-1055):
     Use constants in dialup_values.incl.pl1 to set instance tag.
  5) change(87-05-13,GDixon), approve(87-07-13,MCR7741),
     audit(87-07-21,Brunelle), install(87-08-04,MR12.1-1055):
     Reorganized to set structure elements in their order of declaration, and
     to make code more readable and more similar to that in its login server
     counterpart, uc_create_process_.pl1.
  6) change(87-11-19,Parisek), approve(88-02-11,MCR7849),
     audit(88-03-01,Lippard), install(88-07-13,MR12.2-1047):
     Fill in pit.min_ring & pit.max_ring from the equivelent ute elements.
     SCP6367.
                                                   END HISTORY COMMENTS */

/* Parameters */

dcl  p ptr parameter;
dcl  code fixed bin (35) parameter;

/* External Entries */

dcl  as_access_audit_$process entry (ptr, fixed bin (17), char (*));
dcl  as_dump_ entry (char (*) aligned);
dcl  as_meter_$enter entry (fixed bin);
dcl  as_meter_$exit entry (fixed bin);
dcl  astty_$tty_order entry (ptr, char (*), ptr, fixed bin (35));
dcl  condition_ entry (char (*), entry);
dcl  hcs_$truncate_seg entry (ptr, fixed bin, fixed bin (35)); /* Zero a segment */
dcl  hphcs_$create_proc entry (ptr, fixed bin (35));
dcl  hphcs_$set_pit_tty_info entry (bit (36) aligned, ptr, fixed bin (35));
dcl  ioa_$rsnnl entry options (variable);
dcl  pdir_volume_manager_$select_pdir_volume entry (ptr, fixed bin (35));
dcl  sys_log_ entry options (variable);
dcl  sys_log_$error_log entry options (variable);

/* External */

dcl  error_table_$action_not_performed ext fixed bin (35);

/* Internal Static */

dcl  DEFAULT_LOT_SIZE fixed bin int static init (512);	/* dft size of linkage offset table */
dcl  DEFAULT_KST_SIZE fixed bin int static init (0);	/* dft size of known segment table -- let hardcore set */
dcl  DEFAULT_CLS_SIZE fixed bin (35) int static init (65536); /* dft size of combined linkage */
dcl  static_label label int static;

/* Builtins */

dcl  (addr, binary, bit, clock, divide, fixed, length, null, rtrim, rel, 
      string, substr, unspec) builtin;

/* Automatic */

dcl  aip ptr;					/* arg_info pointer */
dcl  argp ptr;
dcl  ciptr ptr;					/* pointer to create_ info_area */
dcl  1 create_info_area like create_info aligned;		/* Scratch area for create info structure. */
dcl  dummy_code fixed bin (35);
dcl  i fixed bin;
dcl  length_of_pit fixed bin;				/* size of fixed part of pit */
dcl  length_of_arguments fixed bin;
dcl  number_of_arguments fixed bin;
dcl  1 old_terminal_info aligned,			/* for use by old info order */
       2 junk (3) fixed bin,
       2 old_type fixed bin;				/* only field we're interested in */
dcl  pdtep ptr;
dcl  pit_size fixed bin;				/* actual pit size */
dcl  timax fixed bin;				/* "ti_max" scheduler parameter determines priority */

/* Based */

dcl  lengths (number_of_arguments) based fixed bin aligned;
dcl  xstring char (length_of_arguments) based aligned;	/* For getting absentee arguments */

/* Constant */

%page;
/* Program */

/*
cpg_: proc (p, code); */
cpg_abs: entry (p, code);
cpg_daemon: entry (p, code);

	code = 0;					/* clear error code */
	ansp = as_data_$ansp;
	static_label = ucs_return;			/* place for signal handler to go */
	call condition_ ("any_other", ucs_);		/* catch faults, take asdump, return to caller */
	call as_meter_$enter (CPG_METER);
	utep = p;					/* copy argument */
	pdtep = ute.pdtep;
	pit_ptr = as_data_$pit_ptr;			/* copy static ptr to automatic */

	call hcs_$truncate_seg (pit_ptr, 0, code);	/* Clear pit */
	if code ^= 0 then do;			/* If cannot truncate, we will die. */
	     call sys_log_$error_log (SL_LOG_BEEP, code, "cpg_",
		"Cannot truncate pit_temp_");
	     goto exit;				/* Return with error. */
	end;

	pit.version = PIT_version_3;			/* put in version number of PIT */
	pit.process_type = ute.process_type;		/* put in type of process */
	pit.login_responder = substr (ute.init_proc, 1, ute.ip_len); /* Initial procedure. */
	pit.homedir = ute.home_dir;			/* set home directory */
	pit.project = ute.project;			/* project name */
	pit.account = " ";				/* unused */
	pit.n_processes = ute.n_processes;		/* set number of processes */
	pit.login_time = ute.login_time;		/* set time logged in */
	pit.proc_creation_time = clock ();		/* say when this process was made */
	pit.old_proc_cpu = ute.cpu_usage;		/* set total cputime for old processes */
	pit.user_weight = ute.user_weight;		/* 10 for normal user */
	pit.anonymous = ute.anonymous;		/* 1 if anonymous */
	pit.login_name = ute.person;			/* user's name  */
	pit.logout_pid = anstbl.as_procid;		/* processid of ans service */
	pit.logout_channel = ute.event;		/* name of logout event channel */
	pit.group = ute.group;			/* party group */
	pit.min_ring = ute.lowest_ring;		/* lowest ring */
	pit.max_ring = ute.highest_ring;		/* highest ring */
	string (pit.at) = string (ute.at);		/* copy user-control attributes */
	pit.whox = ute.whotabx;			/* user's own who table index */
	pit.outer_module = ute.outer_module;		/* Terminal outer module. */
	pit.dont_call_init_admin = ute.uflags.dont_call_init_admin;
	pit.terminal_access_class = ""b;		/* not used */
	pit.dollar_charge = user.dollar_charge;
	pit.dollar_limit = user.dollar_limit;
	pit.shift_limit (*) = user.shift_limit (*);
	pit.logins = user.logins;
	pit.crashes = user.crashes;
	pit.interactive (*) = user.interactive (*);
	pit.absentee (*) = user.absentee (*);
	pit.iod (*) = user.iod (*);
	pit.devices (*) = user.devices (*);
	pit.time_last_reset = user.time_last_reset;
	pit.absolute_limit = user.absolute_limit;	/* Non-monthly limit */
	pit.absolute_spent = user.absolute_spent;	/* Spending */
	pit.absolute_cutoff = user.absolute_cutoff;	/* Date to reset spending */
	pit.absolute_increm = user.absolute_increm;	/* Reset code. 0 = don't, 1 = daily, etc. */
	pit.rs_number = ute.rs_number;		/* make rate structure available to the user */
	pit.request_id = ute.request_id;		/* absentee request id or 0 */
	pit.authorization_range = ute.process_authorization_range;

          if ute.process_type = PT_INTERACTIVE then do;
	     ute.tag = TAG_INTERACTIVE;		/* tag for interactive processes is "a" */
	     timax = -1;				/* timax for interactive process is system standard */
	     pit.cant_bump_until = ute.cant_bump_until;
	     pit.abs_queue = -1;			/* not absentee. */
	     call set_tty_info();
set_tty_info: procedure;				
	         cdtep = ute.channel;			/* Interactive user has a channel, so */
	         pit.charge_type = cdte.charge_type;
	         pit.term_type_name = cdte.current_terminal_type;
	         pit.line_type = cdte.cur_line_type;
	         call astty_$tty_order (cdtep, "info",
		    addr (old_terminal_info), dummy_code);
	         pit.tty_type = old_terminal_info.old_type;
						/* this is here ONLY so that old user_info_$tty_type
						   entry will still work after new_proc */
	         pit.service_type = cdte.service_type;
	         pit.tty_answerback = cdte.tty_id_code;
	         pit.tty = cdte.name;			/* channel id for user's TTY */
	         pit.old_tty = "";
	         if length (rtrim (pit.tty)) <= length (pit.old_tty) then
		    pit.old_tty = rtrim (pit.tty);
	    end set_tty_info;
	end;

	else if ute.process_type = PT_DAEMON then do;	/* daemon process */
	     ute.tag = TAG_DAEMON;
	     timax = -1;
	     pit.cant_bump_until = ute.cant_bump_until;
	     pit.abs_queue = -1;			/* not absentee */
	     pit.charge_type = 0;
	     pit.term_type_name = "";
	     pit.line_type = LINE_MC;
	     pit.tty_type = 0;
	     pit.service_type = ANS_SERVICE;
	     pit.tty_answerback = rtrim (ute.tty_name);
	     pit.tty = ute.tty_name;			/* source name */
	     pit.old_tty = "";
	     if length (rtrim (pit.tty)) <= length (pit.old_tty) then
		pit.old_tty = rtrim (pit.tty);
	end;

	else do;					/* absentee, use abs_user_table entry */
	     if ute.abs_attributes.proxy then
		ute.tag = TAG_PROXY;		/* tag for proxy absentee processes is "p" */
	     else ute.tag = TAG_ABSENTEE;		/* tag for regular absentee processes is "m" */
	     if ute.queue > 0 then do;		/* in array range ? */
		timax = installation_parms.abs_timax (ute.queue);
		if timax < 1000000 then timax = -1;	/* insure value is nice */
	     end;
	     else timax = -1;			/* interactive default */
	     pit.cant_bump_until = 0;			/* Never happen for absentee */
	     pit.abs_queue = ute.queue;		/* might come in handy */
	     pit.charge_type = 0;
	     pit.term_type_name = "Absentee";
	     pit.line_type = LINE_UNKNOWN;
	     pit.tty_type = 0;
	     pit.service_type = ANS_SERVICE;
	     pit.tty_answerback = "";
	     pit.tty = ute.tty_name;
	     pit.old_tty = "";
	     if length (rtrim (pit.tty)) <= length (pit.old_tty) then
		pit.old_tty = rtrim (pit.tty);
	end;

	pit.standby = ute.standby_line;		/* 1 if standby. What means for abs and daemon? */
	pit.login_line = "";			/* not used */
	pit.input_seg = ute.input_seg;		/* abs pathname of input stream */
	pit.output_seg = ute.output_seg;		/* abs pathname of output */
	pit.max_cpu_time = ute.max_cpu_time;		/* cpu time limit */
	string (pit.abs_attributes) = "0"b;		/* copy ute abs_attributes bits */
	pit.restartable = ute.restartable;
	pit.user_deferred_until_time = ute.user_deferred_until_time;
	pit.proxy = ute.proxy;
	pit.set_bit_cnt = ute.set_bit_cnt;
	pit.truncate_absout = ute.truncate_absout;
	pit.restarted = ute.restarted;
	aip = addr (pit.start_arg_info);
	pit.arg_info_ptr = fixed (rel (aip));
	pit.old_proc_core = ute.mem_usage;		/* - and total memory usage */
	pit.old_proc_io_ops = 0;			/* change when charging for i/o begins */

						/* login arguments, if any */
	number_of_arguments = ute.arg_count;
	aip -> arg_info.arg_count = number_of_arguments;
	if number_of_arguments > 0 then do;
	     length_of_arguments = ute.ln_args;
	     aip -> arg_info.ln_args = length_of_arguments;
	     argp = ute.arg_lengths_ptr;
	     do i = 1 to number_of_arguments;		/* Set array of arg lengths */
		aip -> arg_info.arg_lengths (i) = argp -> lengths (i);
	     end;
	     if length_of_arguments > 0 then do;
		argp = ute.args_ptr;			/* The argument string itself */
		aip -> arg_info.args = argp -> xstring;
	     end;
	end;
	else length_of_arguments, aip -> arg_info.ln_args = 0;

	length_of_pit = binary (rel (addr (pit.start_arg_info)), 18);
						/* This works since pp has zero offset. */
	i = divide (length_of_arguments + 3, 4, 35, 0);
	pit_size = length_of_pit + number_of_arguments + i + 2;

	ciptr = addr (create_info_area);		/* Get ptr to create-info area */


/* Fill in create_info structure and call the hardcore to create process */

	code = 0;					/* clear errcode */

	if anstbl.processid_index > 262140 | anstbl.processid_index < 0 then
	     anstbl.processid_index = 0;		/* reset when out of range */
	anstbl.processid_index = anstbl.processid_index + 1; /* increment process id index */
						/* place in lower 18 bits of process id */
	ciptr -> create_info.processid.rel_apte = ""b;
	ciptr -> create_info.processid.unique_index = bit (fixed (anstbl.processid_index, 18), 18);
	ciptr -> create_info.version = version_of_create_info;
	ciptr -> create_info.term_channel = pit.logout_channel;
	ciptr -> create_info.term_processid = pit.logout_pid;
	ciptr -> create_info.words_of_pit = pit_size;	/* fill in length of PIT */

	if ute.pdir_quota > 0 then			/* if a nonzero pdir quota was given in the PDT and SAT */
	     ciptr -> create_info.record_quota = ute.pdir_quota; /* use it instead of the default in communications */
	else ute.pdir_quota,			/* be sure actual quota is in user table entry */
	     ciptr -> create_info.record_quota =
	     installation_parms.default_pdir_seg_quota;
	ciptr -> create_info.ppml = 0;		/* OBSOLETE */


	ciptr -> create_info.initial_ring = ute.initial_ring;
	ciptr -> create_info.highest_ring = ute.highest_ring;
	ciptr -> create_info.timax = timax;		/* set timax of process */
	ciptr -> create_info.account_ptr = null;	/* not used in this implementation */
	ciptr -> create_info.pit_ptr = pit_ptr;		/* pointer to template of pit */
	call ioa_$rsnnl ("^[anonymous^s^;^a^].^a.^a",
	     ciptr -> create_info.process_group_id, (0), ute.anonymous = 1,
	     ute.person, ute.project, ute.tag);
	ciptr -> create_info.user_processid = "";	/* not used in this implementation */
	ciptr -> create_info.account_id = pit.account;	/* fill in name of account */
	ciptr -> create_info.homedir = rel (addr (pit.homedir)); /* fill in offset of home dir in pit */
	ciptr -> create_info.lot_in_stack = "1"b;	/* Default is to put lot in stack */
	if ute.lot_size = 0 then ciptr -> create_info.lot_size = DEFAULT_LOT_SIZE;
	else if ute.lot_size > 0 then ciptr -> create_info.lot_size = ute.lot_size;
	else do;
	     ciptr -> create_info.lot_size = -(ute.lot_size);
	     ciptr -> create_info.lot_in_stack = "0"b;
	end;
	ciptr -> create_info.cls_in_stack = "0"b;	/* ... and to give cls its own segment */
	if ute.cls_size = 0 then ciptr -> create_info.cls_size = DEFAULT_CLS_SIZE;
	else if ute.cls_size > 0 then ciptr -> create_info.cls_size = ute.cls_size;
	else do;
	     ciptr -> create_info.cls_size = -(ute.cls_size);
	     ciptr -> create_info.cls_in_stack = "1"b;
	end;
	if ute.kst_size = 0 then ciptr -> create_info.kst_size = DEFAULT_KST_SIZE;
	else ciptr -> create_info.kst_size = ute.kst_size;
	ciptr -> create_info.dont_call_init_admin = ute.uflags.dont_call_init_admin;
	ciptr -> create_info.audit = ute.audit;
	ciptr -> create_info.process_authorization = ute.process_authorization;
	ciptr -> create_info.max_process_authorization = ute.process_authorization_range (2);
	ciptr -> create_info.work_class = ute.work_class; /* set work_class of process */
	ciptr -> create_info.subsystem = substr (ute.init_proc, ute.ip_len + 1, ute.ss_len);
	ciptr -> create_info.dir_quota = installation_parms.default_pdir_dir_quota;
	ute.pdir_dir_quota = ciptr -> create_info.dir_quota;


	call pdir_volume_manager_$select_pdir_volume (utep, code); /* choose volume for process directory */
	if code ^= 0 then				/* if problem, complain */
	     call sys_log_$error_log (SL_LOG_BEEP, code, "cpg_", "Assigning pdir volume for ^a",
		ciptr -> create_info.process_group_id);
	call hphcs_$create_proc (ciptr, code);		/* but try to create process anyway. */

/* The 36-bit process ID has upper 18 bits = process's APTE index, lower 18 bits unique.
   Thus we don't know the value until after the call to the harcore. */

	ute.proc_id = unspec(ciptr -> create_info.processid);

	if code = 0 then				/* Caller will log an error in process creation */
	     call as_access_audit_$process (utep, AS_AUDIT_PROCESS_CREATE,
		"");

exit:	call as_meter_$exit (CPG_METER);
	return;					/* done */

ucs_return:					/* come here via nonlocal goto from any_other handler */
	code = error_table_$action_not_performed;	/* tell caller we failed */
	return;					/* don't try the meter exit call - that may have caused the fault */
%page;
/* To tell existing process about its new tty channel. */

set_pit_tty_info: entry (p, code);

	code = 0;					/* clear error code */
	ansp = as_data_$ansp;
	static_label = ucs_return;			/* place for signal handler to go */
	call condition_ ("any_other", ucs_);		/* catch faults, take asdump, return to caller */
	call as_meter_$enter (CPG_METER);
	utep = p;					/* copy argument */
	pdtep = ute.pdtep;
	pit_ptr = as_data_$pit_ptr;			/* copy static ptr to automatic */
	length_of_pit = binary (rel (addr (pit.start_arg_info)), 18);
						/* This works since pp has zero offset. */

	call hcs_$truncate_seg (pit_ptr, 0, code);	/* Clear pit */
	if code ^= 0 then do;			/* If cannot truncate, we will die. */
	     call sys_log_$error_log (SL_LOG_BEEP, code, "cpg_", "Cannot truncate pit_temp_");
	     goto exit;				/* Return with error. */
	end;

	pit.outer_module = ute.outer_module;		/* Terminal outer module, so we can switch on reconnect */
	call set_tty_info();
	call hphcs_$set_pit_tty_info (ute.proc_id, pit_ptr, code);
	goto exit;				/* code is goto exited to caller */

%page;
ucs_: proc (mcptr, condname, coptr, infoptr, continue);

dcl  mcptr ptr parameter;
dcl  condname char (*) parameter;
dcl  coptr ptr parameter;
dcl  infoptr ptr parameter;
dcl  continue bit (1) parameter;

dcl  err_msg char (120) aligned;
dcl  non_local_exit bit (1);
dcl  as_check_condition_ entry (char (*), bit (1), bit (1));

	call as_check_condition_ (condname, continue, non_local_exit);
	if continue | non_local_exit then
	     return;

	call ioa_$rsnnl ("cpg_: Error: ^a attempting to create process for ^a.^a",
	     err_msg, (0),
	     condname, ute.person, ute.project);
	call sys_log_ (SL_LOG_BEEP, "^a", err_msg);
	call as_dump_ (err_msg);
	go to static_label;

     end ucs_;

/* format: off */
%page; %include answer_table;
%page; %include access_audit_bin_header; /* not used, but PL/I needs it */
%page; %include as_audit_structures;
%page; %include as_data_;
%page; %include as_data_definitions_;
%page; %include as_meter_numbers;
%page; %include author_dcl;
%page; %include cdt;
%page; %include create_info;
%page; %include dialup_values;
%page; %include installation_parms;
%page; %include line_types;
%page; %include pdt;

dcl  pdtp ptr automatic init (null);			/* pdt needs it  */
%page; %include pit;
%page; %include sc_stat_;
%page; %include sys_log_constants;
%page; %include user_attributes;
%page; %include user_table_entry;
%page; %include user_table_header;
/* format: on */
%page;
/* BEGIN MESSAGE DOCUMENTATION

   Message:
   cpg_: ERROR_MESSAGE. Cannot truncate pit_temp_

   S:	as (severity2)

   T:	$run

   M:	The system was unable to clear its temporary segment while
   attempting to log in a user.
   The user will be unable to log in.

   A:	$contact

   Message:
   cpg_: ERROR_MESSAGE. Assigning pdir volume for USER

   S:	as (severity2)

   T:	$run

   M:	The system was unable to assign a logical volume on which
   to place the process directory of a user. The user might not be
   able to log in

   A:	$contact


   Message:
   cpg_: Error: CONDITION attempting to create process for NAME.PROJ

   S:	as (severity1)

   T:	$run

   M:	A supervisor error prevented creation of a process for the
   user NAME.PROJ. An Answering Service dump was performed and the
   user was logged out if possible.

   A:	$note
   If this message is printed at every login, it is probably wise
   to shut the system down and perform a bootload operation.


   END MESSAGE DOCUMENTATION */

     end cpg_;
