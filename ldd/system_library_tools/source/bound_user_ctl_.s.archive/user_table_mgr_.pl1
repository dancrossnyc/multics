/****^  ********************************************
        *                                          *
        * Copyright, (C) Honeywell Bull Inc., 1987 *
        *                                          *
        ******************************************** */

/****  TBS:  sys_log_ message documentation */

/****^  HISTORY COMMENTS:
  1) change(86-04-01,Swenson), approve(87-07-13,MCR7737),
     audit(87-04-19,GDixon), install(87-08-04,MR12.1-1055):
     Initial coding.
  2) change(87-04-19,GDixon), approve(87-07-13,MCR7741),
     audit(87-07-23,Brunelle), install(87-08-04,MR12.1-1055):
      A) Replace calls to freen_ with free statements, following coding
         standards.
      B) Improve error logging.
      C) Support absentee and daemon user tables.
  3) change(87-05-11,GDixon), approve(87-07-13,MCR7741),
     audit(87-07-23,Brunelle), install(87-08-04,MR12.1-1055):
      A) Decrement user_table.in_use, whether UTE is put on free list or
         table size is reduced.
  4) change(87-05-14,GDixon), approve(87-07-13,MCR7741),
     audit(87-07-23,Brunelle), install(87-08-04,MR12.1-1055):
     Take asdump when user_table_mgr_$free is given UTE which has invalid
     process_type.  Continue execution if utep identifies a valid user table
     entry; stop execution if it does not.
  5) change(87-05-24,GDixon), approve(87-07-13,MCR7741),
     audit(87-07-23,Brunelle), install(87-08-04,MR12.1-1055):
      A) Make user_table_mgr_$reset reuse the same UTE, rather than freeing
         the UTE and allocating a (perhaps different) UTE.
      B) This is done by splitting the Allocate and Free internal procedures
         into 4 pieces: Allocate_UTE, Fill_UTE, Empty_UTE and Free_UTE.
  6) change(87-05-27,GDixon), approve(87-07-13,MCR7741),
     audit(87-07-23,Brunelle), install(87-08-04,MR12.1-1055):
      A) Increment user_table.in_use in Allocate_UTE rather than in Fill_UTE.
         Otherwise, user_table_mgr_$reset causes a steady incrementing of
         user_table.in_use with no equivalent decrementing.
  7) change(87-07-21,GDixon), approve(87-07-21,MCR7741),
     audit(87-07-23,Brunelle), install(87-08-04,MR12.1-1055):
      A) Change Free_UTE to use its P_ute_index parameter, instead of
         incorrectly referencing the ute_index variable declared in the main
         procedure.
  8) change(88-03-18,Parisek), approve(88-03-18,MCR7849),
     audit(88-03-22,Lippard), install(88-07-13,MR12.2-1047):
     Set ute.lowest_ring.
                                                   END HISTORY COMMENTS */

/* format: style4 */

user_table_mgr_:
     procedure;

/* Parameters */

dcl  P_process_type fixed bin parameter;
dcl  P_uc_ls_handle bit (72) aligned parameter;
dcl  P_utep ptr parameter;

/* Automatic */

dcl  ME char(36) varying automatic;
dcl  abort_label label variable;
dcl  1 auto_uc_ls_handle structure aligned like uc_ls_handle automatic;
dcl  code fixed bin (35) automatic;
dcl  process_type fixed bin automatic;
dcl  user_table_ptr ptr automatic;
dcl  ute_index fixed bin (17) automatic;

/* Based */

dcl  argstring char (ute.ln_args) based (ute.args_ptr);
dcl  lengths (ute.arg_count) based (ute.arg_lengths_ptr) fixed bin;
dcl  system_area area based (system_area_ptr);
dcl  1 user_table aligned based (user_table_ptr),
       2 header like ut_header,
       2 in_use fixed bin,
       2 entry_pad (128-size(ut_header)-1) fixed bin,
       2 entry (0 refer (user_table.header.current_size)) like ute;

/* Entries */

dcl  as_dump_ entry (char(*));
dcl  get_system_free_area_ entry () returns (ptr);
dcl  ipc_$create_ev_chn entry (fixed bin (71), fixed bin (35));
dcl  ipc_$delete_ev_chn entry (fixed bin (71), fixed bin (35));

/* Internal */

dcl  system_area_ptr ptr int static init (null);

/* External */

dcl  as_data_$ansp ptr external;
dcl  as_data_$autp ptr external;
dcl  as_data_$dutp ptr external;

/* Builtins */

dcl  (addr, baseno, hbound, lbound, null, size, unspec) builtin;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */


/* Program */

allocate:
     entry (P_process_type) returns (ptr);

	ME = "user_table_mgr_$allocate";

	utep = null ();
	abort_label = ALLOCATE_ABORT;

	if P_process_type = PT_INTERACTIVE then
	   user_table_ptr = as_data_$ansp;
	else if P_process_type = PT_ABSENTEE then
	   user_table_ptr = as_data_$autp;
	else if P_process_type = PT_DAEMON then
	   user_table_ptr = as_data_$dutp;
	else call Abort (SL_LOG, -1,
	   "Process type (^d) not allowed.", P_process_type);

	call Allocate_UTE (ute_index);
	if ute_index ^= 0 then do;
	     call Reset_UTE();
	     call Fill_UTE (ute_index, P_process_type);
	end;

ALLOCATE_ABORT:
	return (utep);

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

free: entry (P_utep);

	ME = "user_table_mgr_$free";
	go to FREE_JOIN;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

reset:	entry (P_utep);

	ME = "user_table_mgr_$reset";

FREE_JOIN:
	abort_label = FREE_ABORT;
	utep = P_utep;
	process_type = ute.process_type;

	if process_type = PT_INTERACTIVE then
	   user_table_ptr = as_data_$ansp;
	else if process_type = PT_ABSENTEE then
	   user_table_ptr = as_data_$autp;
	else if process_type = PT_DAEMON then
	   user_table_ptr = as_data_$dutp;

	else do;					/* invalid type  */
						/* find table    */
	   if baseno (as_data_$ansp) = baseno (utep) then do;
	        user_table_ptr = as_data_$ansp;
	        process_type = PT_INTERACTIVE;
	   end;
	   else if baseno (as_data_$autp) = baseno (utep) then do;
	        user_table_ptr = as_data_$autp;
	        process_type = PT_ABSENTEE;
	   end;
	   else if baseno (as_data_$dutp) = baseno (utep) then do;
	        user_table_ptr = as_data_$dutp;
	        process_type = PT_DAEMON;
	   end;
	   else
	      user_table_ptr = null;

	   if user_table_ptr = null then
	      call Abort (SL_LOG_BEEP, -1,
	      "UTE pointer (^p) does not point in one of the 3 user tables.",
	      utep);
	   else do;
	      do ute_index = hbound(user_table.entry,1) to
	         lbound(user_table.entry,1) by -1
	         while (utep ^= addr(user_table.entry(ute_index)));
	         end;
	      if ute_index = 0 then
	         call Abort (SL_LOG_BEEP, -1,
	         "UTE pointer (^p) does not point at an entry in ^a.",
	         utep, TABLE_NAMES(user_table.user_table_type));
	      else do;
	         call Warning (SL_LOG_BEEP, 
		    "UTE (^d, ^p in ^a) has invalid process type (^d).",
		    ute_index, utep,
		    TABLE_NAMES(user_table.user_table_type),
		    ute.process_type);
	         call as_dump_ ((sl_info.ioa_msg));
	         ute.process_type = process_type;
	      end;
	   end;
	end;

	if lbound(ACTIVE_VALUES,1) < ute.active &
	     ute.active <= hbound(ACTIVE_VALUES,1) then;
	else if ute.active = NOW_FREE then
	     call Abort (SL_LOG_BEEP, -1,
	     "UTE (^d, ^p in ^a) already free; ute.active: ^d (^a)",
	     ute.ute_index, utep, TABLE_NAMES(user_table.user_table_type),
	     ute.active, ACTIVE_VALUES(ute.active));
	else call Abort (SL_LOG_BEEP, -1,
	     "UTE (^d, ^p in ^a) invalid; ute.active: ^d",
	     ute.ute_index, utep, TABLE_NAMES(user_table.user_table_type),
	     ute.active);

	if addr(user_table.entry(ute.ute_index)) ^= utep then do;
	     do ute_index = hbound(user_table.entry,1) to
		lbound(user_table.entry,1) by -1
		while (addr(user_table.entry(ute_index)) ^= utep);
		end;
	     call Warning (SL_LOG_BEEP,
		"UTE (^d, ^p in ^a) invalid: ute.ute_index: ^d",
		ute_index, utep, TABLE_NAMES(user_table.user_table_type),
		ute.ute_index);
	     ute.ute_index = ute_index;
	end;

	if ME = "user_table_mgr_$free" then do;
	     ute_index = ute.ute_index;
	     call Empty_UTE();
	     call Reset_UTE();
	     call Free_UTE (ute_index);
	     P_utep = null;
	     return;
	end;
	else if ME = "user_table_mgr_$reset" then do;
	     ute_index = ute.ute_index;
	     call Empty_UTE();
	     call Reset_UTE();
	     call Fill_UTE (ute_index, process_type);
	     return;
	end;

FREE_ABORT:
	P_utep = null ();				/* so no one will use it */
	return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */


utep_from_handle:
     entry (P_uc_ls_handle) returns (ptr);

/**** This entry takes a handle supplied by a login server and determines
      the associated utep. */

	ME = "user_table_mgr_$utep_from_handle";

	utep = null ();
	abort_label = UTEP_FROM_HANDLE_ABORT;

	uc_ls_handle_ptr = addr (P_uc_ls_handle);
	auto_uc_ls_handle = uc_ls_handle;
	uc_ls_handle_ptr = addr (auto_uc_ls_handle);

	if uc_ls_handle.process_type = PT_INTERACTIVE then
	   user_table_ptr = as_data_$ansp;
	else if uc_ls_handle.process_type = PT_ABSENTEE then
	   user_table_ptr = as_data_$autp;
	else if uc_ls_handle.process_type = PT_DAEMON then
	   user_table_ptr = as_data_$dutp;
	else call Abort (SL_LOG, -1,
	     "Handle (^24.3b) has unsupported process type (^d).",
	     P_uc_ls_handle, uc_ls_handle.process_type);

	utep = addr (user_table.entry (uc_ls_handle.ute_index));
	if ute.active = NOW_FREE then 
	     call Abort (SL_LOG, -1,
	     "Handle (^24.3b) identifies free UTE (^d, ^p in ^a).",
	     P_uc_ls_handle, ute.ute_index, utep,
	     TABLE_NAMES(user_table.user_table_type));
	if ute.login_server_info.our_handle ^= unspec (uc_ls_handle) then 
	     call Abort (SL_LOG, -1,
	     "Handle (^24.3b) identifies UTE (^d, ^p in ^a) with different handle (^24.3b).",
	     P_uc_ls_handle, ute.ute_index, utep,
	     TABLE_NAMES(user_table.user_table_type),
	     ute.login_server_info.our_handle);

UTEP_FROM_HANDLE_ABORT:
	return (utep);

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* Abort: Report fatal error in AS log and abort execution.		       */
/*							       */
/* Syntax:  call Abort (severity, code, ioa_ctl, args);		       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

Abort:
     procedure options (variable);

dcl  cu_$arg_list_ptr entry () returns (ptr);
dcl  sys_log_$general entry (ptr);

          sl_info = sl_info_sev_code_msg;
	sl_info.arg_list_ptr = cu_$arg_list_ptr ();
	sl_info.caller = ME;
	call sys_log_$general (addr (sl_info));
	if sl_info.code ^= 0 then do;
	     utep = null;
	     go to abort_label;
	end;

     end Abort;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */


Allocate_UTE:
     procedure (P_ute_index);

dcl  P_ute_index fixed bin;
dcl  ute_index fixed bin;

REALLOCATE:
     	utep = null;

	if user_table.number_free > 0 then do;
	     ute_index = user_table.first_free;
	     utep = addr (user_table.entry (ute_index));
	     if ute.active = NOW_FREE then do;
		user_table.first_free = ute.next_free;
		user_table.number_free = user_table.number_free - 1;
	     end;
	     else do;
		call Warning (SL_LOG_BEEP,
		"UTE (^d, ^p in ^a) at head of free list is not free; ute.active: ^d (^a)",
		ute_index, utep, TABLE_NAMES(user_table.user_table_type),
		ute.active, ACTIVE_VALUES(ute.active));
		call Reconstruct_free_list ();
		go to REALLOCATE;
	     end;
	end;
	else if user_table.current_size < user_table.max_size then do;
	     ute_index,
		user_table.current_size = user_table.current_size + 1;
	     utep = addr (user_table.entry (ute_index));
	end;
	else do;
	     ute_index = 0;
	     utep = null ();
	end;

          if ute_index ^= 0 then
	     user_table.in_use = user_table.in_use + 1;

	P_ute_index = ute_index;

     end Allocate_UTE;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */


Empty_UTE:
	procedure ();

/**** Get rid of event channel we may or may not have set up. */
	if ute.event ^= 0 then do;
	     call ipc_$delete_ev_chn (ute.event, (0));
	     ute.event = 0;
	end;

/**** Free the argument structures */
	if system_area_ptr = null then
	     system_area_ptr = get_system_free_area_ ();
	if ute.arg_lengths_ptr ^= null () then do;
	     free lengths in (system_area);
	     ute.arg_lengths_ptr = null ();
	     ute.arg_count = 0;
	end;
	if ute.args_ptr ^= null () then do;
	     free argstring in (system_area);
	     ute.args_ptr = null ();
	     ute.ln_args = 0;
	end;

     end Empty_UTE;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */


Fill_UTE:	procedure (P_ute_index, P_process_type);

dcl  P_ute_index fixed bin;
dcl  P_process_type fixed bin;

	if utep ^= null () then do;
	     call ipc_$create_ev_chn (ute.event, code);
	     if code ^= 0 then 
		call Abort (SL_LOG_BEEP, code,
		"Creating event channel for UTE (^d, ^p in ^a).",
		ute_index, utep, TABLE_NAMES(P_process_type));
	     ute.active = NOW_DIALED;
	     ute.ute_index = P_ute_index;
	     ute.process_type = P_process_type;
	end;

     end Fill_UTE;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */


Free_UTE:	procedure (P_ute_index);

dcl  P_ute_index fixed bin;

	ute.active = NOW_FREE;
	ute.ute_index = P_ute_index;
	
	if P_ute_index = user_table.current_size then 
	     user_table.current_size = user_table.current_size - 1;
	else do;
	     ute.next_free = user_table.first_free;
	     user_table.first_free = P_ute_index;
	     user_table.number_free = user_table.number_free + 1;
	end;
          user_table.in_use = user_table.in_use - 1;
	utep = null;

     end Free_UTE;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */


Reconstruct_free_list:
     procedure;

dcl  ute_index fixed bin;

          user_table.number_free, user_table.first_free = 0;
     	do ute_index = hbound(user_table.entry,1) to
	     lbound(user_table.entry,1) by -1;
	     utep = addr(user_table.entry(ute_index));
	     if ute.active = NOW_FREE then do;
		ute.next_free = user_table.first_free;
		user_table.first_free = ute_index;
		user_table.number_free = user_table.number_free + 1;
	     end;
	end;
     end Reconstruct_free_list;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */


Reset_UTE:
     procedure ();

	unspec (ute) = ""b;
	ute.tty_name,
	     ute.tty_id_code,
	     ute.dial_qualifier,
	     ute.generated_pw,
	     ute.outer_module,
	     ute.old_password,
	     ute.logout_type,
	     ute.login_code,
	     ute.person,
	     ute.project,
	     ute.home_dir,
	     ute.init_proc,
	     ute.group,
	     ute.tag,
	     ute.input_seg,
	     ute.output_seg,
	     ute.sender,
	     ute.proxy_person,
	     ute.proxy_project,
	     ute.abs_group,
	     ute.terminal_type = "";

/**** The follow variables allow a legal 0 value, so we use -1. */

	ute.work_class,
	     ute.initial_ring,
	     ute.lowest_ring,
	     ute.highest_ring = -1;

	ute.uprojp = null;
	ute.pdtep = null;
	ute.channel = null;
	ute.arg_lengths_ptr = null;
	ute.args_ptr = null;

	ute.real_queue = -9;
	return;

     end Reset_UTE;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* Warning: report warning in AS log, and continue execution.	       */
/*							       */
/* Syntax:  call Warning (severity, ioa_ctl, args);		       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

Warning:
     procedure options (variable);

dcl  cu_$arg_list_ptr entry () returns (ptr);
dcl  sys_log_$general entry (ptr);

          sl_info = sl_info_sev_msg;
	sl_info.arg_list_ptr = cu_$arg_list_ptr ();
	sl_info.caller = ME;
	call sys_log_$general (addr (sl_info));

     end Warning;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/* format: off */

/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* The following three include files are not used, but are overlaid by the   */
/* user_table structure declared at the start of this program.  They are     */
/* included here for ease of reference.				       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

     %include absentee_user_table;
 %include answer_table;
 %include daemon_user_table;
 %include dialup_values;
 %include sys_log_constants;
 %include uc_ls_handle;
 %include user_attributes;
 %include user_table_entry;
 %include user_table_header;

end user_table_mgr_;
