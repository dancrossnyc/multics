/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* PARSE_ANSWERBACK_ - Program to determine Multics terminal type
   from baud rate and answerback code.

   Written 750211 by PG
   Modified 750228 by PG to fix bug missing 1050 and 2741 answerbacks.
   Modified 750307 by PG to look for 110 baud input in lower case.
   Modified 750922 by PG to handle Correspondence 2741s.
   Modified 760601 by PG to redefine NL to mean "default" instead of "ASCII".
*/

parse_answerback_:
     procedure (bv_input, bv_baud_rate, bv_terminal_type, bv_terminal_id);

/* parameters */

dcl (bv_input char (*),				/* (Input) String to be parsed */
     bv_baud_rate fixed bin,				/* (Input) Baud rate of terminal */
     bv_terminal_type fixed bin,			/* (Input/Output) Computed terminal type */
     bv_terminal_id char (*)) parameter;		/* (Output) ID from answerback */

/* automatic */

dcl  temp char (4),
    (idx, jumpx, terminal_type) fixed bin,
     answerback char (32);

/* internal static initial */

dcl  baud_array (11) fixed bin internal static options (constant) initial (
     110, 133, 150, 300, 600, 1200, 1800, 2400, 4800, 7200, 9600);

/* builtins */

dcl (hbound, index, lbound, length, substr) builtin;

/* include files */

%include tty_types;

/* program */

	answerback = bv_input;			/* copy input, padding to char (32) if necessary */
	terminal_type = bv_terminal_type;

	do jumpx = lbound (baud_array, 1) to hbound (baud_array, 1)
		while (bv_baud_rate ^= baud_array (jumpx));
	end;

	if jumpx > hbound (baud_array, 1)		/* Strange... */
	then go to none;

	go to baud (jumpx);				/* Dispatch on baud rate */

baud (1):						/* 110 BAUD */
	terminal_type = TYPE_TTY38;
	idx = index (answerback, " j") + 2;		/* (ttydim translates all input to lower case at 110) */
	if idx ^= 2 then go to found;

	terminal_type = TYPE_TN300;
	idx = index (answerback, " e") + 2;
	if idx ^= 2 then go to found;

	terminal_type = TYPE_ASCII;
	idx = index (answerback, " t") + 2;
	if idx ^= 2 then go to found;

	terminal_type = TYPE_TTY33;
	go to none;				/* default is TTY33 */

baud (2):						/* 133 BAUD */
	if (terminal_type = TYPE_2741) | (terminal_type = TYPE_CORR) then do;
	     idx = index (answerback, "0") + 1;
	     if idx ^= 1 then go to found;

	     go to none;
	end;

	idx = 1;					/* use whatever we got */
	substr (answerback, 2, 2) = "  ";		/* but clear out junk */
	go to found;				/* a 1050 */

baud (3):						/* 150 BAUD */
	terminal_type = TYPE_ASCII;
	idx = index (answerback, " T") + 2;
	if idx ^= 2 then go to found;

	terminal_type = TYPE_TN300;
	idx = index (answerback, " E") + 2;
	if idx ^= 2 then go to found;

	terminal_type = TYPE_TTY37;
	idx = index (answerback, " B") + 2;
	if idx ^= 2 then go to found;

	go to none;				/* default is TTY37 */

baud (4):						/* 300 BAUD */
	terminal_type = TYPE_TN300;
	idx = index (answerback, " E") + 2;
	if idx ^= 2 then go to found;

	terminal_type = TYPE_ASCII;
	idx = index (answerback, " T") + 2;
	if idx ^= 2 then go to found;

	go to none;				/* default is ASCII */

baud (6):						/* 1200 BAUD */
	if terminal_type = TYPE_ARDS
	then go to none;				/* 202C6 protocol has no answerbacks */

	terminal_type = TYPE_TN300;			/* if we get here it must be Vadic protocol */
	idx = index (answerback, " E") + 2;
	if idx ^= 2 then go to found;

	terminal_type = TYPE_ASCII;
	idx = index (answerback, " T") + 2;
	if idx ^= 2 then go to found;

	go to none;				/* default is ASCII */

found:						/* come here if find an answerback string */
	if idx + 2 <= length (answerback)		/* if we can get 3 chars from string */
	then temp = substr (answerback, idx, 3);
	else temp = "none";				/* false alarm */

	bv_terminal_id = temp;			/* Convert to char (4) */
	bv_terminal_type = terminal_type;
	return;

baud (5):						/* 600 BAUD */
baud (7):						/* 1800 BAUD */
baud (8):						/* 2400 BAUD */
baud (9):						/* 4800 BAUD */
baud (10):					/* 7200 BAUD */
baud (11):					/* 9600 BAUD */
none:						/* come here if don't find answerback string */
	bv_terminal_id = "none";
	bv_terminal_type = terminal_type;
	return;

     end;
