/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: style4 */
dpg_: proc (p, P_reason);

/* DPG_ - destroy process group.

   Called from dialup_, absentee_user_manager_, daemon_user_manager_, and asu_
   to destroy a user process. Updates usage meters in answer table entry.

   Initially coded by Michael J. Spier on February 15, 1969.
   Recoded in PL/1 by MJS on April 7, 1970
   Modified for new destroy strategy 9/73 THVV
   Modified May 1978 by T. Casey to notify pdir_volume_manager_ when we delete a pdir.
   Modified October 1979 by T. Casey to save pdir after fatal process error if user has save_pdir attribute.
   Modified March 1980 by Tom Casey to add metering.
   Modified June 1981 by J. Bongiovanni to save stack_0 in dead pdir
   Modified November 1981, E. N. Kittlitz.  user_table_entry conversion.
   Modified December 1981 by J. Bongiovanni to expand pdir quota, if necessary, to copy stack_0
   Modified October 1982 by E. N. Kittlitz for register_buzzard.
   Modified September 1983 by E. N. Kittlitz to notify buzzards after ring0 destruction complete, change structure names.
   Modified 84-06-06 BIM. Change buzzard for new structure.
   Modified September 1984 by Keith Loepere to understand the error code from
   del_dir_tree (via destroy_process_finish).
   Modified September 1984 by B. L. Braun to add sma for the SysMaint and SysAdmin projects to the saved process directory.
   Modified:
   10/05/84 by R. Michael Tague:  up_sysctl_$check_acs now returns a bit (36)
   mode string instead of a fixed bin (5) and no longer takes a directoy arg.
   11/05/84 by R. Michael Tague:  Changed check on process_termination_monitor
   ACS to be a RW check instead of W only.
   Modified 84-12-29 by E. Swenson for new AS auditing.
   Modified 15 January 1985 by B. L. Braun to replace the acl on the saved
   process directory with Person.Project.*, SysMaint, and SysAdmin projects.
   Modified 1985-02-20, BIM: call as_user_message_$priv_delete_process_messages.
*/

/****^  HISTORY COMMENTS:
  1) change(86-06-05,GJohnson), approve(86-06-05,MCR7387),
     audit(86-06-10,Martinson), install(86-07-11,MR12.0-1092):
     Correct error message documentation.
  2) change(87-04-27,GDixon), approve(87-07-13,MCR7741),
     audit(87-07-27,Brunelle), install(87-08-04,MR12.1-1055):
     Upgraded for change to answer_table.incl.pl1 and user_table_entry.incl.pl1
  3) change(87-07-22,GDixon), approve(87-07-22,MCR7741),
     audit(87-07-27,Brunelle), install(87-08-04,MR12.1-1055):
      A) Add operator doc for undoc'd sys_log_ calls.
  4) change(87-07-24,Dickson), approve(87-07-24,MCR7722),
     audit(87-07-27,Brunelle), install(87-08-04,MR12.1-1055):
     Changed the entry point register_buzzard to perform auditing of GRANTS or
     DENYS when setting the process termination monitor.
  5) change(88-04-27,GDixon), approve(88-08-15,MCR7969),
     audit(88-08-03,Lippard), install(88-08-29,MR12.2-1093):
      A) Call pdir_volume_manager_ to note deletion of a pdir when an attempt
         to save it has failed. (phx17303)
                                                   END HISTORY COMMENTS */

/* Parameters */

dcl  p ptr parameter;				/* points to answer table or abs user table entry */
dcl  P_reason char (*) parameter;			/* short reason why we're destroying. */

/* Entries */

dcl  as_access_audit_$dpg_buzzard entry (char (*), ptr, fixed bin (35));
dcl  as_access_audit_$process entry (ptr, fixed bin (17), char (*));
dcl  as_user_message_$priv_delete_process_messages entry (bit (36) aligned, fixed bin (35));
dcl  (as_meter_$enter, as_meter_$exit) entry (fixed bin);
dcl  dial_ctl_$dial_broom entry (ptr, char (8) aligned);
dcl  find_condition_info_ entry (ptr, ptr, fixed bin (35));
dcl  get_group_id_$tag_star entry () returns (char (32));
dcl  hcs_$add_acl_entries entry (char (*), char (*), ptr, fixed bin, fixed bin (35));
dcl  hcs_$chname_file entry (char (*), char (*), char (*), char (*), fixed bin (35));
dcl  hcs_$delentry_seg entry (ptr, fixed bin (35));
dcl  hcs_$make_seg entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35));
dcl  hcs_$replace_dir_acl entry (char (*), char (*), ptr, fixed bin, bit (1), fixed bin (35));
dcl  hcs_$terminate_noname entry (ptr, fixed bin (35));
dcl  hcs_$wakeup entry (bit (36) aligned, fixed bin (71), fixed bin (71), fixed bin (35));
dcl  hphcs_$copy_stack_0 entry (bit (36) aligned, ptr, fixed bin (35));
dcl  hphcs_$destroy_process_begin entry (ptr, fixed bin (35));
dcl  hphcs_$destroy_process_finish entry (ptr, fixed bin (35));
dcl  hphcs_$quota_read entry (char (*), fixed bin (18), fixed bin (71), bit (36) aligned, bit (36),
	fixed bin (1), fixed bin, fixed bin (35));
dcl  hphcs_$quota_set entry (char (*), fixed bin (18), fixed bin (35));
dcl  hphcs_$set_ring_brackets entry (char (*), char (*), (3) fixed bin (6), fixed bin (35));
dcl  lv_request_$cleanup_process entry (bit (36) aligned);
dcl  pdir_volume_manager_$note_pdir_deletion entry (ptr);
dcl  rcp_sys_$unassign_process entry (bit (36) aligned, fixed bin (35));
dcl  sys_log_$error_log entry options (variable);
dcl  sys_log_ entry options (variable);
dcl  unique_chars_ entry (bit (*) aligned) returns (char (15) aligned);

dcl  error_table_$action_not_performed fixed bin (35) ext static;
dcl  error_table_$no_dir ext fixed bin (35);

/* Automatic */

dcl  1 buzzard aligned based (buzzardp),		/* describe a process which is camping on death notifications */
       2 prev ptr,					/* two-way wrist linked list */
       2 next ptr,					/* ... */
       2 info_channel fixed bin (71),			/* IPC channel */
       2 process_id bit (36),				/* and, of course, who he is */
       2 user_reference_id bit (36),			/* user supplied data to be included in wakeup */
       2 group_id char (32);				/* and name (for ease of use) */
dcl  buzzardp ptr;
dcl  code fixed bin (35);
dcl  dir_name char (168);
dcl  ltrp fixed bin (71);
dcl  pdir_saved bit (1) aligned init (""b);
dcl  pdquota fixed bin (18);
dcl  reason char (8) automatic;
dcl  rqo_sw bit (1);
dcl  1 segment_acl (1) aligned,
       2 access_name char (32),
       2 modes bit (36),
       2 zero_pad bit (36),
       2 status_code fixed bin (35);
dcl  slvid bit (36);
dcl  stack_0_ptr ptr;
dcl  taccsw fixed bin (1);
dcl  tup bit (36) aligned;
dcl  used fixed bin;

/* Constant */

dcl  ME char (32) initial ("dpg_") internal static options (constant);

dcl  ZERO_RING_BRACKETS (3) fixed bin (6) int static options (constant) init (0, 0, 0);
dcl  STACK_0_NAME char (32) int static options (constant) init ("stack_0"); /* until level_0_ is fixed	*/
dcl  STACK_0_QUOTA fixed bin int static options (constant) init (16); /* how much to expand quota for stack_0 copy */


dcl  (addr, null, rtrim, unspec) builtin;

dcl  any_other condition;
dcl  record_quota_overflow condition;
%page;
/* Program */

	call as_meter_$enter (DPG_METER);
	utep = p;					/* copy ptr to answer table entry */
	reason = P_reason;

	call dial_ctl_$dial_broom (utep, (reason));	/* clean up attached consoles. */
	if ^as_data_$debug_flag then do;		/* we might not be Initializer */
	     call rcp_sys_$unassign_process (ute.proc_id, (0)); /* get rid of RCP cdevices and volumes */

	     if ute.lvs_attached then
		call lv_request_$cleanup_process (ute.proc_id); /* get rid of attached LVs. */

	end;

	unspec (process_status_return) = ""b;
	process_status_return.target_proc = ute.proc_id;
	call hphcs_$destroy_process_begin (addr (process_status_return),
	     code);
	if code ^= 0 then
	     call sys_log_$error_log (SL_LOG, code, ME,
		"Calling hphcs_$destroy_process_begin for ^a.^a.^a on channel ^a, process_id ^w.",
		ute.person, ute.project, ute.tag, ute.tty_name,
		ute.proc_id);

	call as_meter_$exit (DPG_METER);
	return;					/* Now wait for process to die. */
%page;
finish: entry (p);

	call as_meter_$enter (DPG_METER);
	utep = p;

	unspec (process_status_return) = ""b;
	process_status_return.target_proc = ute.proc_id;
	process_status_return.aptptr = null ();

	if ute.at.save_pdir &			/* if user has save_pdir attribute */
	     (ute.logout_type = "init" |		/* and this is a fatal process error */
	     ute.logout_type = "term" |		/* then save his pdir by renaming it, */
	     ute.logout_type = "no_i") then		/* so ring zero can't find it to delete it */
	     call Save_Pdir ();
	if ^pdir_saved then
	     if ^as_data_$debug_flag then
	     call pdir_volume_manager_$note_pdir_deletion (utep);

	call hphcs_$destroy_process_finish (addr (process_status_return), code);
	if code ^= 0				/* if a real error occurred destroying the process */
	     & (^pdir_saved | code ^= error_table_$no_dir) then do; /* no_dir because of save_pdir isn't real */
	     call sys_log_$error_log (SL_LOG, code, ME, "destroying process ^w for ^a.^a",
		ute.proc_id, ute.person, ute.project);
	     ute.cpu_usage = ute.cpu_usage + ute.cpu_this_process;
	     ute.mem_usage = ute.mem_usage + ute.mem_this_process;
	     ute.cpu_this_process = 0;
	     ute.mem_this_process = 0;
	end;
	else do;					/* got usage */
	     ute.cpu_this_process =
		process_status_return.virtual_cpu - ute.cpu_this_process;
						/* use as temporary loc to hold last delta */
	     ute.cpu_usage =
		ute.cpu_usage + process_status_return.virtual_cpu; /* count cpu usage for all process */
	     ute.mem_this_process =
		process_status_return.up_page - ute.mem_this_process;
	     ute.mem_usage = ute.mem_usage + process_status_return.up_page;
	end;

	call as_access_audit_$process (utep, AS_AUDIT_PROCESS_DESTROY,
	     "");

	call notify_buzzards (ute.proc_id);		/* if it didn't die in deact_proc, tough. I did my best. */
	call as_user_message_$priv_delete_process_messages (ute.proc_id, (0));
	call as_meter_$exit (DPG_METER);
	return;
%page;
register_buzzard: entry (P_request_header_ptr, P_asr_sender_ptr);

dcl  P_request_header_ptr ptr;
dcl  P_asr_sender_ptr ptr;

dcl  mode bit (36);

dcl  error_table_$unimplemented_version fixed bin (35) ext static;
dcl  error_table_$insufficient_access fixed bin (35) ext static;

dcl  up_sysctl_$check_acs entry (char (*), char (*), fixed bin, bit (36), fixed bin (35));

	as_request_sender_ptr = P_asr_sender_ptr;
	asr_buzzard_infop = P_request_header_ptr;
	asr_replyp = addr (as_request_sender.reply_message);
	unspec (asr_reply) = ""b;
	if asr_buzzard_info.version ^= asr_buzzard_info_version_1 &
	     asr_buzzard_info.version ^= "buteo_01" then do; /* grandfather clause for NDM */
	     asr_reply.code = error_table_$unimplemented_version; /* not good enough */
	     goto ERROR_RETURN;
	end;

	call up_sysctl_$check_acs ("process_termination_monitor.acs",
		as_request_sender.group_id, (as_request_sender.validation_level),
		mode, asr_reply.code);
	if asr_reply.code ^= 0 then goto ERROR_RETURN;
	if ((mode & RW_ACCESS) ^= RW_ACCESS) then do;
	     asr_reply.code = error_table_$insufficient_access;
	     goto ERROR_RETURN;
	end;

	buzzardp = as_data_$buzzardp;			/* start walking the list */
	do while (buzzardp ^= null);			/* down to the end of the list */
	     if buzzard.process_id = as_request_sender.process_id then do; /* whoops; this process already here */
		if asr_buzzard_info.info_channel = 0 then /* zero means stop telling me */
		     call remove_buzzard (buzzardp);	/* so stop */
		else do;				/* otherwise overwrite the channel for this process */
		     buzzard.info_channel = asr_buzzard_info.info_channel;
		     buzzard.user_reference_id = asr_buzzard_info.my_reference_id;
		     asr_reply.data = "1"b;		/* indicate this is a replacement */
		     call sys_log_ (SL_LOG_SILENT, "^a: ^a (^w) replaced process termination monitor.",
			ME, buzzard.group_id, buzzard.process_id);
		end;
		return;
	     end;					/* got a match */
	     buzzardp = buzzard.next;			/* press on */
	end;					/* do loop */
	if asr_buzzard_info.info_channel = 0 then do;	/* well, I'm certainly not going to add THAT */
	     asr_reply.code = error_table_$action_not_performed;
	     goto ERROR_RETURN;
	end;
	asr_reply.code = 0;
	allocate buzzard;
	buzzard.prev = null;
	buzzard.next = as_data_$buzzardp;
	buzzard.info_channel = asr_buzzard_info.info_channel;
	buzzard.process_id = as_request_sender.process_id;
	buzzard.user_reference_id = asr_buzzard_info.my_reference_id;
	buzzard.group_id = as_request_sender.group_id;
	if as_data_$buzzardp ^= null then
	     as_data_$buzzardp -> buzzard.prev = buzzardp;
	as_data_$buzzardp = buzzardp;

ERROR_RETURN:
	call as_access_audit_$dpg_buzzard (ME, addr(as_request_sender), asr_reply.code);

	if asr_reply.code = 0 then
	     call sys_log_ (SL_LOG_SILENT, "^a: ^a (^w) set process termination monitor.",
		ME, buzzard.group_id, buzzard.process_id);

	return;
%page;
notify_buzzards: proc (deceased);
dcl  deceased bit (36) aligned;
dcl  processid_message fixed bin (71);
dcl  bp ptr;

	asr_replyp = addr (processid_message);
	asr_buzzard_notification.process_id = deceased;
	bp = as_data_$buzzardp;
	do while (bp ^= null);
	     buzzardp = bp;
	     bp = buzzard.next;
	     if buzzard.process_id = deceased then
		call remove_buzzard (buzzardp);
	     else do;
		asr_buzzard_notification.your_reference_id = buzzard.user_reference_id;
		call hcs_$wakeup (buzzard.process_id, buzzard.info_channel, processid_message, code);
		if code ^= 0 then call remove_buzzard (buzzardp);
	     end;
	end;
     end notify_buzzards;
%page;
remove_buzzard: proc (bp);
dcl  bp ptr;

	if bp -> buzzard.next ^= null then
	     bp -> buzzard.next -> buzzard.prev = bp -> buzzard.prev;
	if bp -> buzzard.prev ^= null then
	     bp -> buzzard.prev -> buzzard.next = bp -> buzzard.next;
	if as_data_$buzzardp = bp then
	     as_data_$buzzardp = bp -> buzzard.next;
	call sys_log_ (SL_LOG_SILENT, "^a: removed ^a (^w) process termination monitor.",
	     ME, buzzard.group_id, buzzard.process_id);
	free bp -> buzzard;
     end;
%page;
Save_Pdir:
     procedure ();

dcl  1 CI aligned like condition_info automatic;
dcl  1 dir_acl (5) structure aligned automatic,
       2 access_name char (32) unaligned,
       2 mode bit (36) aligned,
       2 status_code fixed bin (35);
dcl  n_acl_entries fixed bin automatic;
dcl  name char (32) automatic;
dcl  newname char (32) automatic;
dcl  newdir char (168) automatic;

dcl  1 DIR_ACL_INIT (5) aligned int static options (constant),
       2 access_name char (32) unal
	  init ("*.*.*", "*.SysMaint.*", "*.SysAdmin.*", "", ""),
       2 mode bit (36) aligned			/*  null for *.*.*, sma access for the rest */
	  init ((1) ((36)"0"b), (3) ("111"b || (33)"0"b), ""b),
       2 status_code fixed bin (35) init ((5) 0);

	name = unique_chars_ (ute.proc_id);		/* get its current name */
/**** Then make up a meaningful new name for it */
	newname = rtrim (ute.person) || "." || rtrim (ute.project) || ".f." ||
	     rtrim (ute.tty_name);
	call hcs_$chname_file (">pdd", name, name, newname, code);
	if code ^= 0 then
	     call sys_log_$error_log (SL_LOG, code, ME,
		"Attempting to rename pdir for ^a.^a ^a after fatal process error.",
		ute.person, ute.project, ute.tty_name);
	else do;
	     pdir_saved = "1"b;
	     call sys_log_ (SL_LOG,
		"^a: Saved >pdd>^a after fatal process error.",
		ME, newname);

/* Set the ACLS on the dead process directory. */

	     dir_acl (*) = DIR_ACL_INIT (*);
	     dir_acl (4).access_name = rtrim (ute.person) || "." ||
		rtrim (ute.project) || ".*";

	     if ^as_data_$debug_flag then
		n_acl_entries = 4;
	     else do;
		n_acl_entries = 5;
		dir_acl (5).access_name = get_group_id_$tag_star ();
		dir_acl (5).mode = SMA_ACCESS;
	     end;

	     call hcs_$replace_dir_acl (">pdd", newname, addr (dir_acl),
		n_acl_entries, "0"b /* add *.SysDaemon.* */, code);
	     if code ^= 0 then
		return;

	     on any_other begin;
dcl  rcode fixed bin (35) automatic;
		call find_condition_info_ (null (), addr (CI), rcode);
		if rcode = 0 then
		     call sys_log_ (SL_LOG_SILENT,
			"^a: ^a condition signalled while copying stack_0 into >pdd>^a",
			ME, CI.condition_name, newname);
		goto join_after_nasty_error;
	     end;

	     newdir = ">pdd>" || rtrim (newname);
	     call hcs_$make_seg (newdir, STACK_0_NAME, "", 01010b, stack_0_ptr,
		code);
	     if code = 0 then do;
		rqo_sw = "0"b;
		on record_quota_overflow begin;
		     rqo_sw = "1"b;
		     dir_name = ">pdd>" || rtrim (newname);
		     call hphcs_$quota_read (dir_name, pdquota, ltrp, tup,
			slvid, taccsw, used, code);
		     if code ^= 0 then do;
rqo_error:		call sys_log_ (SL_LOG_SILENT,
			     "^a: record_quota_overflow condition signalled while copying stack_0 into >pdd>^a",
			     ME, newname);
			goto join_after_nasty_error;
		     end;
		     call hphcs_$quota_set (dir_name, pdquota + STACK_0_QUOTA,
			code);
		     if code ^= 0 then
			goto rqo_error;
		     goto retry_copy_stack;
		end;

retry_copy_stack:
		if rqo_sw then
		     revert record_quota_overflow;
		call hphcs_$copy_stack_0 (ute.proc_id, stack_0_ptr, code);
		revert record_quota_overflow;
		if code = 0 then do;
		     call hcs_$terminate_noname (stack_0_ptr, code);
		     segment_acl.access_name = rtrim (ute.person) || "." ||
			rtrim (ute.project) || ".*";
		     segment_acl.modes = RW_ACCESS;
		     segment_acl.zero_pad = "0"b;
		     call hcs_$add_acl_entries (newdir, STACK_0_NAME,
			addr (segment_acl), 1, code);
		     call hphcs_$set_ring_brackets (newdir, STACK_0_NAME,
			ZERO_RING_BRACKETS, code);
		end;
		else
		     call hcs_$delentry_seg (stack_0_ptr, code);
	     end;
	     else
		call sys_log_$error_log (SL_LOG_SILENT, code, ME,
		     "Creating saved stack_0 for ^a.^a (^w).", ute.person,
		     ute.project, ute.proc_id);

join_after_nasty_error:
	     revert any_other;
	     revert record_quota_overflow;
	end;
	return;
/**** format: off */
%page; %include condition_info;
/**** format: on */
     end Save_Pdir;

/* format: off */
%page; %include access_audit_bin_header; /* not used, but needed by PL/I */
%page; %include access_mode_values;
%page; %include as_audit_structures;
%page; %include as_data_;
%page; %include as_meter_numbers;
%page; %include as_request_header;
%page; %include as_requests;
%page; %include as_request_sender_;
%page; %include process_status_return;
%page; %include sys_log_constants;
%page; %include user_attributes;
%page; %include user_table_entry;
%page;
/* BEGIN MESSAGE DOCUMENTATION

   Message:
   dpg_: ERROR_MESSAGE. Calling hphcs_$destroy_process_begin for 
   PERSON.PROJECT.TAG on channel CHN, process_id PID.

   S:	$as1

   T:	$run

   M:	An error has occurred while destroying a process belonging
   to the user PERSON.PROJECT.TAG connected to terminal channel CHN.
   This process probably cannot be destroyed.  ERROR_MESSAGE is the text
   associated with the error returned by hphcs_$destroy_process_begin.

   A:	$inform


   Message:
   dpg_: ERROR_MESSAGE. destroying process WWWWWWWWWWWW for NAME.PROJ

   S:	as (severity2)

   T:	$run

   M:	An error has occurred while destroying a process belonging
   to the user NAME.PROJ.  He was not charged for his CPU usage.

   A:	$inform


   Message:
   dpg_: Saved >pdd>PERS.PROJ.f.CHN after fatal process error.

   S:	as (severity1)

   T:	$run

   M:	The process directory belonging to user PERS.PROJ has been saved after a
   fatal process error. It has been renamed to the name shown in the message.
   It will be saved until the next shutdown. System programmers might want to
   examine its contents to determine the cause of the fatal process error.

   A:	Inform the system programming staff. Do so well in advance of the next shutdown.


   Message:
   dpg_: ERROR_MESSAGE. Attempting to rename pdir for NAME.PROJ CHN after fatal process error.

   S:	as (severity1)

   T:	$run

   M:	The error described by ERROR_MESSAGE occurred while attempting to save
   the process directory belonging to the user PERS.PROJ after a fatal process error.
   The directory was not saved. A typical cause of this is that the user already has
   a saved process directory from a previous fatal process error in this bootload.

   A:	$inform


   Message:
   dpg_: ERROR_MESSAGE. Creating saved stack_0 for PERS.PROJ (PROCESSID).

   S:	as (severity0)

   T:	$run

   M:	An error has occurred while attempting to create a segment in the
   saved process directory for copying the ring-0 stack of the defunct process.
   The ring-0 stack will not be copied into the saved process directory.

   A:	$ignore


   Message:
   dpg_: COND condition signalled while copying stack_0 into >pdd>DIRNAME

   S:	as (severity0)

   T:	$run

   M:	An error occurred while copying the ring-0 stack of the defunct
   process from ring-0 into the saved process directory.  This error caused
   the COND condition to be signalled.  The ring-0 stack will not be copied
   into the saved process directory.

   A:	$ignore


   Message:
   dpg_: USER (PROCESSID) {set/replaced} process termination monitor.

   S:	as (severity0)

   T:	$run

   M:	USER (processid PROCESSID) will receive notifications of all
   process destructions from the Answering Service.  'set' indicates that
   the process was not already monitoring processes; 'replaced' indicates that
   the process already had a monitor established, and that it has been
   replaced by this request.

   A:	$ignore


   Message:
   dpg_: removed USER (PROCESSID) process termination monitor.

   S:	as (severity0)

   T:	$run

   M:	Process termination monitoring for USER (process id PROCESSID)
   has been terminated by user request, IPC error, or the destruction
   of the process.

   A:	$ignore


   END MESSAGE DOCUMENTATION */

     end dpg_;
