/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: style4 */
parse_login_line_: proc (lp, ll, a_utep, modestring, errarg, code);

/* PARSE_LOGIN_LINE_ - handle optional arguments on login command line.

   Modified 740807 by PG for -authorization and -change_default_authorization
   Modified 740913 by PG for -generate_password
   Modified 750429 by PG for new dial facility
   Modified 750714 by THVV for -modes and -terminal_type
   Modified 751024 by T. Casey for -subsystem.
   Modified 760601 by PG to handle pw masks properly.
   Modified 770613 by RSC for variable terminal types
   Modified July 1979 by T. Casey for MR8.0 to add new login args for process preservation.
   Modified December 1980 by E. N. Kittlitz for Person.Project.
   Modified April 1981 by E. N. Kittlitz to zero code at check_for_ctl_arg
   Modified July 1981 by E. N. Kittlitz
   Modified November 1981, E. N. Kittlitz.  user_table_entry conversion.
   Modified January 1982, E. N. Kittlitz.  login arguments, as_data_ conversion.
   Modified July 1982, E. N. Kittlitz. Detect -po being too long for ute field.
   Modified December 1983, C. Marker.  Added -terminal_id (-tid).
   Modified 84-04-03 BIM for -auth on dial or slave.
   Modified 85-01-11 by E. Swenson for new A.S. logging
*/


/****^  HISTORY COMMENTS:
  1) change(87-04-14,GDixon), approve(87-07-13,MCR7741),
     audit(87-07-21,Brunelle), install(87-08-04,MR12.1-1055):
     Correct coding standard violations.  Remove reference
     answer_table.incl.pl1 and user_table_entry.incl.pl1
                                                   END HISTORY COMMENTS */


/* Parameters */

dcl  lp ptr,					/* Pointer to input line buffer. */
     ll fixed bin,					/* Length of line. */
     a_utep ptr,					/* Pointer to user table entry. */
     modestring char (*),				/* New mode string */
     errarg char (*) aligned,				/* If an error occurs aligned, what went wrong. */
     code fixed bin (35);				/* Error code. */

/* Automatic */

dcl  arg char (32);					/* Single argument to login. */
dcl  argstringx fixed bin;				/* temporary for -arguments */
dcl  authorization bit (72) aligned;			/* binary authorization */
dcl  authorization_string char (150);			/* character representation of auth. */
dcl  char64 char (64);				/* temporary */
dcl  device char (32);				/* for -ttp */
dcl  entry_sw fixed bin;
dcl  i fixed bin;					/* temporary */
dcl  j fixed bin;					/* Return from login_parse_: relative cursor */
dcl  jj fixed bin;					/* Absolute cursor */
dcl  k fixed bin;					/* Length of argument. */
dcl  prev_arg char (32);
dcl  save_jj fixed bin;				/* temp copy of j */
dcl  specified_type char (32);
dcl  terminal_id char (4);				/* for -terminal_id */

/* Based */

dcl  argstring char (ute.ln_args) based (ute.args_ptr);
dcl  ch (ll) char (1) unal based (lp);			/* Image of buffer */
dcl  lengths (ute.arg_count) based (ute.arg_lengths_ptr) fixed bin;
dcl  system_area area based (system_area_ptr);

/* Internal Static */

dcl  system_area_ptr ptr int static init(null);

/* Constants */

dcl  NORMAL fixed bin init (1) static options (constant);
dcl  DIAL fixed bin init (2) static options (constant);
dcl  SLAVE fixed bin init (3) static options (constant);
dcl  ds_valid_option bit (57) static options (constant)
     init ("110000111100000000000000001100000000000000000000000001101"b);
						/* -bf, -npf, -pf, -lg, -auth, -authorization, -user */
dcl  (false bit (1) aligned init ("0"b),
     lower_case char (26) init ("abcdefghijklmnopqrstuvwxyz"),
     true bit (1) aligned init ("1"b),
     upper_case char (26) init ("ABCDEFGHIJKLMNOPQRSTUVWXYZ")
     ) internal static options (constant);

/* Entries */

dcl  convert_authorization_$from_string entry (bit (72) aligned, char (*), fixed bin (35));
dcl  cv_dec_check_ entry (char (*), fixed bin (35)) returns (fixed bin (35));
dcl  get_system_free_area_ entry() returns(ptr);
dcl  login_parse_ entry (ptr, fixed bin, char (*), fixed bin, fixed bin, fixed bin (35));
dcl  ttt_info_$terminal_data entry (char (*), fixed bin, fixed bin, ptr, fixed bin (35));

/* External Static */

dcl  as_error_table_$bad_login_arg_msg fixed bin (35) ext static;
dcl  as_error_table_$bad_terminal_id fixed bin (35) ext static;
dcl  as_error_table_$dial_request_error fixed bin (35) ext static;
dcl  as_error_table_$need_project_for_cdp fixed bin (35) ext static;
dcl  as_error_table_$long_ip_ss_args fixed bin (35) ext static;
dcl  as_error_table_$only_one_save_nosave fixed bin (35) ext static;
dcl  as_error_table_$only_one_connect_etc fixed bin (35) ext static;
dcl  as_error_table_$only_one_hold_no_hold fixed bin (35) ext static;
dcl  as_error_table_$no_login_arg_msg fixed bin (35) ext static;
dcl  as_error_table_$bad_login_arguments_string fixed bin (35) ext static;
dcl  as_error_table_$need_authorization_for_cda fixed bin (35) external;
dcl  error_table_$noarg fixed bin (35) ext static;

dcl  1 as_data_$login_args ext aligned,
       2 n_login_args fixed bin (35),
       2 pad fixed bin (35),
       2 login_args (56) char (24);			/* 56 control arguments at last count */

dcl  as_data_$max_user_ring fixed bin (35) ext;

/* Builtins */

dcl  (addr, after, before, hbound, index, length, null, substr, translate) builtin;

%page;
/* ================================================== */

	entry_sw = NORMAL;
	code = 0;					/* Assume no error will happen. */
	jj = 1;					/* starting cursor */
	modestring = "";
	utep = a_utep;				/* Copy argument */
	ute.mask_ctl = DERIVE_MASK;			/* Default is to let TTYDIM tell us whether to mask */
	ute.login_flags.auth_given = "0"b;		/* whether -auth was specified */
	ute.at.bumping = "1"b;			/* Default is bumping ON, unless -np */
	cdtep = ute.channel;
	if cdtep ^= null then do;
	     cdte.disconnected_proc_command, cdte.disconnected_proc_number = 0;
	     cdte.save_arg, cdte.nosave_arg, cdte.hold_arg,
		cdte.no_hold_arg, cdte.immediate_arg = ""b;
	end;

	call login_parse_ (lp, ll, arg, k, j, code);	/* Get person ID */
	if code ^= 0 then				/* Personid must be given */
	     return;
	if index (arg, ".") ^= 0 then do;		/* Person.Project */
	     ute.person = before (arg, ".");		/* just the person id */
	     ute.project = after (arg, ".");
	     if ute.project = "" then go to badarg;	/* Person. */
	end;
	else ute.person = substr(arg,1,length(ute.person));
						/* just specified Person */

	jj = jj + j;				/* Advance cursor. */
	call login_parse_ (addr (ch (jj)), ll - jj + 1, arg, k, j, code); /* Get 2nd argument */
	if code = error_table_$noarg then do;
	     code = 0;
	     go to exit;
	end;
	else if code ^= 0 then do;
	     errarg = arg;				/* probably all blanks */
	     return;
	end;
	if substr (arg, 1, 1) = "-"
	then go to arglp;				/* is control arg...go process it */
	else if ute.project ^= "" then go to badarg;	/* already have a project */

	ute.project = substr(arg,1,length(ute.project));	/* is project */

nxarg:	jj = jj + j;				/* Advance cursor. */
	call login_parse_ (addr (ch (jj)), ll - jj + 1, arg, k, j, code); /* Pick off next argument. */
	if code = error_table_$noarg then do;
	     code = 0;
	     go to exit;
	end;
	else if code ^= 0 then return;
check_for_ctl_arg:
	if substr (arg, 1, 1) ^= "-" then go to badarg;	/* Not a control arg */
arglp:	prev_arg = arg;				/* save arg for possible later printing in error message */
	do k = 1 to as_data_$login_args.n_login_args while
	     (arg ^= as_data_$login_args.login_args (k)); end; /* Look up argument in table. */
	if k > as_data_$login_args.n_login_args then do;	/* Fuss if unknown argument. */
badarg:	     errarg = arg;				/* Tell user what we barf on */
badarg2:	     code = as_error_table_$bad_login_arg_msg;	/* Return error to dialup_ */
	     return;
	end;
	code = 0;					/* might be residue from goto check_for_ctl_arg */

	if k > hbound (arg_handler, 1) then go to badarg; /* as_data_ is newer than we are! */
	if entry_sw ^= NORMAL then
	     if k > length (ds_valid_option) then go to badarg; /* no good for dial/slave */
	     else if ^substr (ds_valid_option, k, 1) then go to badarg; /* no good for dial/slave */
	go to arg_handler (k);			/* Dispatch on argument. */

arg_handler (1):					/* -bf */
arg_handler (2):					/* -brief */
	ute.at.brief = true;			/* Set appropriate attribute flag. */
	ute.ur_at.brief = true;
	go to nxarg;

arg_handler (3):					/* -hd */
arg_handler (4):					/* -home_dir */
	jj = jj + j;				/* Advance parse pointer. */
	call login_parse_ (addr (ch (jj)), ll - jj + 1, ute.home_dir, k, j, code);
lp_error: if code = error_table_$noarg then do;
noarg:	     code = as_error_table_$no_login_arg_msg;
	     errarg = prev_arg;			/* arg that it was supposed to be after */
	     return;
	end;
	else if code ^= 0 then return;
	if substr (ute.home_dir, 1, 1) ^= ">" then do;
	     errarg = ute.home_dir;
	     go to badarg2;				/* Must be absolute path. */
	end;
	go to nxarg;

arg_handler (5):					/* -po */
arg_handler (6):					/* -process_overseer */
	jj = jj + j;
	call login_parse_ (addr (ch (jj)), ll - jj + 1, char64, i, j, code);
	if code ^= 0 then go to lp_error;
	if substr (char64, 1, 1) = "-" then go to noarg;	/* missing operand */
	if i + ute.ss_len > 64 then do;		/* if sum of both strings too long */
	     code = as_error_table_$long_ip_ss_args;
	     errarg = char64;
	     return;				/* let user try again */
	end;
	if ute.uflags.ss_given then do;		/* if -subsystem given already, save it */
	     authorization_string = substr (ute.init_proc, ute.ip_len + 1, ute.ss_len); /* borrow a vacant string */

	end;

	substr (ute.init_proc, 1, i) = substr (char64, 1, i);
	ute.ip_len = i;
	ute.uflags.ip_given = "1"b;
	if ute.uflags.ss_given then			/* if -ss was already given, put it back at end of string */
	     substr (ute.init_proc, i + 1, ute.ss_len) = substr (authorization_string, 1, ute.ss_len);
	go to nxarg;

arg_handler (7):					/* -npf */
arg_handler (8):					/* -no_print_off */
	ute.mask_ctl = DO_MASK;			/* User wants a pw mask */
	go to nxarg;

arg_handler (9):					/* -pf */
arg_handler (10):					/* -print_off */
	ute.mask_ctl = DONT_MASK;			/* User does not want a pw mask */
	go to nxarg;

arg_handler (11):					/* -nw */
arg_handler (12):					/* -no_warning */
	ute.at.no_warning = true;
	ute.ur_at.no_warning = true;
	go to nxarg;

arg_handler (13):					/* -np */
arg_handler (14):					/* -no_preempt */
	ute.at.bumping = false;
	ute.ur_at.bumping = true;
	go to nxarg;

arg_handler (15):					/* -force */
	ute.at.guaranteed_login = true;
	ute.ur_at.guaranteed_login = true;
	go to nxarg;

arg_handler (16):					/* -md */
arg_handler (17):					/* -mode */
arg_handler (18):					/* -modes */
	jj = jj + j;
	call login_parse_ (addr (ch (jj)), ll - jj + 1, modestring, k, j, code);
	if code ^= 0 then go to lp_error;
	if substr (modestring, 1, 1) = "-" then go to noarg; /* missing operand */
	go to nxarg;

arg_handler (19):					/* -ns */
arg_handler (20):					/* -no_start_up */
	ute.at.nostartup = true;
	ute.ur_at.nostartup = true;
	go to nxarg;

arg_handler (21):					/* -cpw */
arg_handler (22):					/* -change_password */
	ute.login_flags.cpw = true;
	go to nxarg;

arg_handler (23):					/* -cdp */
arg_handler (24):					/* -change_default_project */
	ute.login_flags.cdp = true;
	go to nxarg;

arg_handler (25):					/* -om */
arg_handler (26):					/* -outer_module */
	jj = jj + j;
	call login_parse_ (addr (ch (jj)), ll - jj + 1, char64, k, j, code);
	if code ^= 0 then go to lp_error;
	if substr (char64, 1, 1) = "-" then go to noarg;
	ute.outer_module = substr(char64,1,length(ute.outer_module));
	go to nxarg;

arg_handler (27):					/* -auth */
arg_handler (28):					/* -authorization */
	jj = jj + j;
	call login_parse_ (addr (ch (jj)), ll - jj + 1, authorization_string, k, j, code);
	if code ^= 0 then go to lp_error;
	if substr (authorization_string, 1, 1) = "-" then go to noarg; /* missing operand */
	call convert_authorization_$from_string (authorization, (authorization_string), code);
	if code ^= 0
	then do;
	     errarg = "";
	     return;
	end;

	ute.login_flags.auth_given = true;
	ute.process_authorization = authorization;
	go to nxarg;

arg_handler (29):					/* -cda */
arg_handler (30):					/* -change_default_auth */
	ute.login_flags.cda = true;
	go to nxarg;

arg_handler (31):					/* -gpw */
arg_handler (32):					/* -generate_password */
	ute.login_flags.generate_pw = true;
	go to arg_handler (22);			/* -gpw implies -cpw */

arg_handler (33):					/* -ttp */
arg_handler (34):					/* -terminal_type */
	if cdtep = null then goto badarg;		/* this arg only legal for interactive logins */
	jj = jj + j;
	call login_parse_ (addr (ch (jj)), ll - jj + 1, device, k, j, code);
	if code ^= 0 then go to lp_error;
	specified_type = translate (device, upper_case, lower_case); /* get terminal type in all caps */
	call ttt_info_$terminal_data (specified_type, (cdte.cur_line_type), (cdte.baud_rate), null, code);

	if code = 0				/* type is valid */
	then do;
	     cdte.current_terminal_type = specified_type; /* so dialup_ will know */
	     ute.uflags.send_initial_string = "1"b;	/* even if type didn't change */
	     go to nxarg;
	end;

	errarg = device;
	return;

arg_handler (58):					/* -tid */
arg_handler (59):					/* -terminal_id */
	if cdtep = null then goto badarg;
	if cdte.flags.ck_answerback then do;		/* Can't set terminal_id in */
	     code = as_error_table_$bad_terminal_id;	/* check_answerback mode */
	     errarg = arg;
	     return;
	end;
	jj = jj + j;
	call login_parse_ (addr (ch (jj)), ll - jj + 1, terminal_id, k, j, code);
	if code ^= 0 then go to lp_error;
	if substr (terminal_id, 1, 1) = "-" then go to noarg; /* missing operand */
	cdte.tty_id_code, ute.tty_id_code = terminal_id;
	go to nxarg;

arg_handler (37):					/* -rg */
arg_handler (38):					/* -ring */
	jj = jj + j;
	call login_parse_ (addr (ch (jj)), ll - jj + 1, arg, k, j, code);
	if code ^= 0 then go to lp_error;
	ute.initial_ring = cv_dec_check_ (arg, code);	/* Convert ring to integer. */
	if code ^= 0 then go to badarg;		/* Check value. */
	if ute.initial_ring <= 0 then go to badarg;	/* Aw, c'mon. */
	if ute.initial_ring > as_data_$max_user_ring then go to badarg;
	go to nxarg;

arg_handler (35):					/* -ss */
arg_handler (36):					/* -subsystem */
	jj = jj + j;
	call login_parse_ (addr (ch (jj)), ll - jj + 1, char64, i, j, code);
	if code ^= 0 then go to lp_error;
	if substr (char64, 1, 1) = "-" then go to noarg;	/* missing operand */
	if i + ute.ip_len > 64 then do;		/* -ss arg and -po arg add up to > 64 chars */
	     code = as_error_table_$long_ip_ss_args;
	     errarg = char64;
	     return;				/* let user try again */
	end;
	substr (ute.init_proc, ute.ip_len + 1, i) = substr (char64, 1, i); /* copy subsystem in after initproc */
	ute.ss_len = i;				/* remember its length */
	ute.uflags.ss_given = "1"b;			/* and remember that it was given */
	goto nxarg;

arg_handler (39):					/* -save_on_disconnect */
arg_handler (40):					/* -save */
	if cdtep = null then goto badarg;		/* this arg only legal for interactive logins */
	if cdte.nosave_arg then do;
only_one_save_nosave:				/* complain that both -save and -nosave args were given */
	     code = as_error_table_$only_one_save_nosave;
	     errarg = arg;				/* return the offending argument */
	     return;
	end;
	cdte.save_arg = "1"b;
	goto nxarg;

arg_handler (41):					/* -no_save_on_disconnect */
arg_handler (42):					/* -nosave */
	if cdtep = null then goto badarg;		/* this arg only legal for interactive logins */
	if cdte.save_arg then goto only_one_save_nosave;
	cdte.nosave_arg = "1"b;
	goto nxarg;

arg_handler (43):					/* -list */
arg_handler (44):					/* -create */
arg_handler (45):					/* -connect */
arg_handler (46):					/* -new_proc */
arg_handler (47):					/* -destroy */
	if cdtep = null then goto badarg;		/* this arg only legal for interactive logins */
	if cdte.disconnected_proc_command > 0 then do;	/* if one of these args already given, complain */
	     code = as_error_table_$only_one_connect_etc;
	     errarg = arg;
	     return;
	end;
	cdte.disconnected_proc_command = k - 42;	/* 43 thru 47 -> 1 thru 5 */
	if k > 44 then do;				/* if -connect, -new_proc, or -destroy, check for {N} */
	     jj = jj + j;				/* advance cursor */
	     call login_parse_ (addr (ch (jj)), ll - jj + 1, arg, k, j, code); /* pick off next arg */
	     if code = error_table_$noarg then do;
		code = 0;
		goto exit;			/* if no arg there, we're all done */
	     end;
	     else if code ^= 0 then go to lp_error;
	     cdte.disconnected_proc_number = cv_dec_check_ (arg, code);
	     if code ^= 0 then goto check_for_ctl_arg;	/* if not a number, go see if it's a ctl arg */
	end;
	goto nxarg;

arg_handler (48):					/* -hold */
arg_handler (49):					/* -no_hold */
	if cdtep = null then goto badarg;		/* only legal for interactive logins */
	if (cdte.hold_arg & k = 49) | (cdte.no_hold_arg & k = 48) then do;
	     code = as_error_table_$only_one_hold_no_hold;
	     errarg = arg;
	     return;
	end;
	if k = 48 then cdte.hold_arg = "1"b;
	else cdte.no_hold_arg = "1"b;
	go to nxarg;

arg_handler (50):					/* -im */
arg_handler (51):					/* -immediate */
	if cdtep = null then goto badarg;		/* only valid for interactive logins */
	cdte.immediate_arg = "1"b;
	go to nxarg;

arg_handler (52):					/* -ag */
arg_handler (53):					/* -arguments */

	save_jj, jj = jj + j;			/* Advance cursor. */
	ute.arg_count = 0;				/* set up to count remaining args */
	ute.ln_args = 0;				/* total lengths of arguments */
	do while ("1"b);				/* first pass - how many are there? */
	     call login_parse_ (addr (ch (jj)), ll - jj + 1, arg, k, j, code);
	     if code = error_table_$noarg then go to got_all_args;
	     else if code ^= 0 then go to lp_error;
	     ute.ln_args = ute.ln_args + k;
	     ute.arg_count = ute.arg_count + 1;
	     jj = jj + j;
	end;

got_all_args:
          if system_area_ptr = null then
	   system_area_ptr = get_system_free_area_ ();
	allocate lengths in (system_area);		/* array of lengths */
	allocate argstring in (system_area);		/* string of all arguments */
	if ute.ln_args <= 0 then do;			/* All args were "" */
	     lengths (*) = 0;
	     return;
	end;
	jj = save_jj;				/* back to where we were */
	argstringx = 1;				/* how many characters so far, this time */
	do i = 1 to ute.arg_count;
	     begin;
dcl  ARG char (ute.ln_args - argstringx + 1) based (addr (substr (argstring, argstringx)));
		call login_parse_ (addr (ch (jj)), ll - jj + 1, ARG, k, j, code);
		if code ^= 0 then do;		/* impossible! */
bad_ag_string:	     code = as_error_table_$bad_login_arguments_string;
		     errarg = "";
		     return;
		end;
		lengths (i) = k;			/* remember how long it was */
		jj = jj + j;			/* Advance cursor. */
		argstringx = argstringx + k;		/* Diminish argstring */
		if argstringx > ute.ln_args + 1 then	/* impossible! */
		     go to bad_ag_string;
	     end;
	end;
	go to exit;

arg_handler (54):					/* -lg */
arg_handler (55):					/* -long */
	ute.at.brief = false;			/* Set appropriate attribute flag */
	ute.ur_at.brief = true;
	go to nxarg;

arg_handler (56):					/* -warning */
	ute.at.no_warning = false;
	ute.ur_at.no_warning = true;
	go to nxarg;

arg_handler (57):					/* -user */
	if entry_sw = NORMAL then go to badarg;		/* only slave and dial */
	jj = jj + j;
	call login_parse_ (addr (ch (jj)), ll - jj + 1, arg, i, j, code);
	if code ^= 0 then go to lp_error;
	if substr (arg, 1, 1) = "-" then go to noarg;	/* missing operand */
	if index (arg, ".") ^= 0 then do;		/* Person.Project */
	     ute.person = before (arg, ".");		/* just the person id */
	     ute.project = after (arg, ".");
	     if ute.project = "" then go to badarg;	/* Person. */
	end;
	else ute.person = substr(arg,1,length(ute.person));
						/* just specified Person */
	go to nxarg;

/* Come here when we run out of arguments. */

exit:
	if entry_sw = NORMAL then do;
	     if ute.login_flags.cdp then
		if ute.project = "" then do;		/* if changing dft proj, must specify */
		     code = as_error_table_$need_project_for_cdp; /* Mistake. */
		     errarg = "";
		     return;
		end;

	     if ute.login_flags.cda
	     then if ^ute.login_flags.auth_given
		then do;
		     code = as_error_table_$need_authorization_for_cda;
		     errarg = "";
		     return;
		end;

	     if cdtep ^= null then
		if cdte.immediate_arg then
		     if cdte.disconnected_proc_command ^= 4 & /* -new_proc */
			cdte.disconnected_proc_command ^= 5 /* -destroy */
		     then do;
			errarg = "-immediate";
			go to badarg2;
		     end;
	end;					/* entry_sw = NORMAL */
	return;

%page;
dial_line: entry (lp, ll, a_utep, errarg, code);

	entry_sw = DIAL;
	code = 0;					/* Assume no error will happen. */
	arg, prev_arg, errarg = "";
	utep = a_utep;
	cdtep = ute.channel;
	if cdtep ^= null then do;
	     cdte.disconnected_proc_command, cdte.disconnected_proc_number = 0;
	     cdte.save_arg, cdte.nosave_arg, cdte.hold_arg,
		cdte.no_hold_arg, cdte.immediate_arg = ""b;
	end;
	jj = 1;					/* start cursor */
	ute.login_flags.dial_pw = "1"b;		/* dial, and nothing else */
	ute.login_code = "dial";			/* for messages which use this */
	ute.mask_ctl = DERIVE_MASK;			/* Default is to let TTYDIM tell us whether to mask */
	call login_parse_ (lp, ll, ute.dial_qualifier, k, j, code); /* read the dial qualifier */
	if code ^= 0 then				/* dial name must be given */
	     return;
	if index (ute.dial_qualifier, "-") = 1 then do;
	     code = as_error_table_$dial_request_error;	/* what about that dial name? */
	     errarg = "dial qualifier must precede any control arguments.";
	     return;
	end;
	jj = jj + j;				/* Advance cursor. */
	call login_parse_ (addr (ch (jj)), ll - jj + 1, arg, k, j, code); /* Get 2nd argument */
	if code ^= 0 then do;
	     if code = error_table_$noarg then		/* just a registered server name */
		code = 0;
	     else errarg = arg;			/* some other error */
	     return;
	end;
	if index (arg, "-") ^= 1 then do;		/* not a control arg */
	     ute.sender = arg;			/* otherwise, its "dial x Person.Project" */
	     go to nxarg;				/* now, any control args */
	end;
	else go to arglp;				/* start on control args */


slave_line: entry (lp, ll, a_utep, errarg, code);

	entry_sw = SLAVE;
	code = 0;					/* Assume no error will happen. */
	utep = a_utep;
	cdtep = ute.channel;
	if cdtep ^= null then do;
	     cdte.disconnected_proc_command, cdte.disconnected_proc_number = 0;
	     cdte.save_arg, cdte.nosave_arg, cdte.hold_arg,
		cdte.no_hold_arg, cdte.immediate_arg = ""b;
	end;
	errarg, prev_arg, arg = "";
	ute.login_flags.slave_pw = "1"b;		/* slave, and nothing else */
	ute.login_code = "slave";			/* for messages which use this */
	ute.mask_ctl = DERIVE_MASK;			/* Default is to let TTYDIM tell us whether to mask */
	j = 0;
	jj = 1;
	go to nxarg;
%page; %include author_dcl;
%page; %include cdt;
%page; %include user_attributes;
%page; %include user_table_entry;


     end parse_login_line_;
