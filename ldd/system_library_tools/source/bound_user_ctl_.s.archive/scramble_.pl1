/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* format: style4 */
scramble_: proc (arg) returns (char (8));

/* SCRAMBLE_ - Scramble a char (8) string.

   This procedure, given a password as input, returns an 8-character output string which:
   1. bears some relationship to the input
   2. loses some information - some passwords may scramble to the same value
   3. has no obvious relation to the input ("aaaaaaaa" and "aaaaaaab"
   .  scramble to noticeably different values.)

   Passwords stored in system files are scrambled, so that if anyone gets a dump
   of the password file by accident, it won't do him much good.

   The transform is supposed to be non-invertible.

   A previous version of this program had two defects:
   1) It was invertible, as Steve Lipner demonstrated.
   2) It depended on double-precision MOD and MULTIPLY. These turned out
   .  to have been incorrectly implemented by PL/I and so the scramble,
   .  while good, would have given different values if the bugs were fixed.

   Method:
   1. strip the two high-order bits of each ASCII character, packing to the right.
   2. treat the resulting 56-bit quantity as both key and cipher text for
   .  the system enciphering program.
   3. destroy selected bits of the resulting cipher.

   Revised 5/21/73, THVV, for new algorithm.
   THVV 10/30/71
*/

dcl  arg char (8);

dcl  temp char (8),
     temp1 (1) fixed bin (71),
     temp2 (1) fixed bin (71),
     (p1, p2, p3) ptr,				/* ptrs to based overlays */
     (i, k) fixed bin;

dcl  bbt bit (72) aligned based (p1),
     b72 bit (72) aligned based (p3),
     bc8 char (8) aligned based (p3);

dcl  1 tsx based (p2) aligned,
       2 pad bit (16) unal,
       2 z (8) bit (7) unal;

dcl  encipher_ entry (fixed bin (71), dim (*) fixed bin (71), dim (*) fixed bin (71), fixed bin);

dcl  (addr, fixed, mod, substr) builtin;

/* ------------------------------------------------------- */

	temp = arg;				/* copy argument */
	p1 = addr (temp);
	p2 = addr (temp1 (1));
	p3 = addr (temp2 (1));
	temp1 (1) = 0;
	k = 1;
	do i = 3 to 72 by 9;
	     z (k) = substr (bbt, i, 7);		/* squeeze out always-zero bits */
	     k = k + 1;
	end;
	temp = "";				/* Erase temporary copy */
	call encipher_ (temp1 (1), temp1, temp2, 1);	/* Encipher the password. */
	temp1 (1) = 0;				/* Tidy up */
	b72 = b72 & "111111110111111110111111110111111110111111110111111110111111110111111110"b;
	return (bc8);

     end;
