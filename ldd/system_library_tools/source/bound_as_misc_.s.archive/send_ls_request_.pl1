/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1987 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(86-06-01,Coren), approve(87-07-13,MCR7737),
     audit(87-07-24,Brunelle), install(87-08-04,MR12.1-1055):
     Initially written.
  2) change(87-03-10,GDixon), approve(87-07-13,MCR7737),
     audit(87-07-24,Brunelle), install(87-08-04,MR12.1-1055):
     Corrected coding standard violations.
                                                   END HISTORY COMMENTS */

/* format: style4,indattr */

send_ls_request_:
     procedure (P_ls_request_ptr, P_ls_request_lth, P_ls_ipc_reply_ptr,
	P_code);

/* Parameters */

dcl  P_ls_request_ptr       ptr parameter;
dcl  P_ls_request_lth       fixed bin (18) parameter;
dcl  P_ls_ipc_reply_ptr     ptr parameter;
dcl  P_code	        fixed bin (35) parameter;

/* Automatic */

dcl  1 auto_event_wait_info aligned like event_wait_info automatic;
dcl  code		        fixed bin (35) automatic;
dcl  created_event_channel  bit (1) aligned automatic;
dcl  event_channel	        fixed bin (71) automatic;
dcl  ls_request_lth	        fixed bin (18) automatic;
dcl  request_ms_dirname     char (168) automatic;
dcl  request_ms_entryname   char (32) automatic;
dcl  server_event_channel   fixed bin (71) automatic;
dcl  server_process_id      bit (36) aligned automatic;

/* Entries */

dcl  hcs_$wakeup	        entry (bit (36) aligned, fixed bin (71), fixed bin (71), fixed bin (35));
dcl  ipc_$block	        entry (ptr, ptr, fixed bin (35));
dcl  ipc_$create_ev_chn     entry (fixed bin (71), fixed bin (35));
dcl  ipc_$delete_ev_chn     entry (fixed bin (71), fixed bin (35));
dcl  login_server_info_$request_info entry (bit (36) aligned, fixed bin (71),
		        char (*), char (*), fixed bin (35));
dcl  message_segment_$add_file entry (char (*), char (*), ptr, fixed bin, bit (72) aligned, fixed bin (35));

/* External */

dcl  error_table_$null_info_ptr fixed bin (35) ext static;
dcl  error_table_$smallarg  fixed bin (35) ext static;
dcl  error_table_$unimplemented_version fixed bin (35) ext static;

/* Constant */

dcl  TRUE		        bit (1) aligned initial ("1"b) internal static options (constant);
dcl  FALSE	        bit (1) aligned initial ("0"b) internal static options (constant);


/* BUILTINS */

dcl (addr, currentsize, null, unspec)
		        builtin;


/* CONDITIONS */

dcl  cleanup	        condition;
%page;
/* Program */

	created_event_channel = FALSE;
	on cleanup
	     call Clean_Up ();

	ls_request_ptr = P_ls_request_ptr;
	ls_request_lth = P_ls_request_lth;
	ls_reply_message_ptr = P_ls_ipc_reply_ptr;

	if ls_request_ptr = null () then do;
	     code = error_table_$null_info_ptr;
	     goto RETURN;
	end;
	if ls_request_lth < currentsize (ls_request_header) then do;
	     code = error_table_$smallarg;
	     goto RETURN;
	end;

	if ls_request_header.header_version ^=
	     LS_REQUEST_HEADER_VERSION_1 then do;
	     code = error_table_$unimplemented_version;
	     goto RETURN;
	end;

	call login_server_info_$request_info (server_process_id,
	     server_event_channel, request_ms_dirname, request_ms_entryname,
	     code);
	if code ^= 0 then
	     goto RETURN;

	if ls_request_header.reply_event_channel = 0 then do;
	     created_event_channel = TRUE;
	     call ipc_$create_ev_chn (event_channel, code);
	     if code ^= 0 then
		goto RETURN;
	     ls_request_header.reply_event_channel = event_channel;
	end;

	call message_segment_$add_file (request_ms_dirname,
	     request_ms_entryname, ls_request_ptr, ls_request_lth * 36,
	     (""b), code);
	if code ^= 0 then
	     goto RETURN;

	call hcs_$wakeup (server_process_id, server_event_channel, -1, code);
	if code ^= 0 then
	     goto RETURN;

	event_wait_channel.n_channels = 1;
	event_wait_channel.pad = ""b;
	event_wait_channel.channel_id = ls_request_header.reply_event_channel;
	event_wait_info_ptr = addr (auto_event_wait_info);

BLOCK_AGAIN:
	call ipc_$block (addr (event_wait_channel),
	     event_wait_info_ptr, code);
	if code ^= 0 then
	     goto RETURN;

/**** For now, the formats are the same, but this might change.  Fill in the
      ipc reply output structure. */

	unspec (ls_reply_message) = unspec (event_wait_info.message);
	code = 0;
RETURN:
	P_code = code;
	return;
%page;
Clean_Up:
     procedure ();

	if created_event_channel then
	     call ipc_$delete_ev_chn (event_channel, (0));
	return;
     end Clean_Up;

/* format: off */
%page; %include event_wait_channel;
%page; %include event_wait_info;
%page; %include login_server_messages;

end send_ls_request_;
