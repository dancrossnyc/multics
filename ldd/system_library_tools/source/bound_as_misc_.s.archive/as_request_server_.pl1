/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* DESCRIPTION:
   A procedure to get requests from user processes and dispatch
   them to the correct answering service module.
*/

/* HISTORY:
   Written by Paul Green, 01/09/75.
   Modified:
   04/01/79 by T. Casey: to correctly handle requests from foreground
   or proxy absentee processes.
   12/01/80 by E. N. Kittlitz: to set anstbl.current_time on wakeup.
   06/01/81 by T. Casey: for MR9.0 for new wakeup priorities.
   11/01/81 by E. N. Kittlitz: user_table_entry conversion.
   04/01/82 by E. N. Kittlitz: New AS initialization. bugfixes.
   10/01/82 by E. N. Kittlitz: Rename as_request_ to as_request_server_,
   add requests 3 - 5.
   04/04/84 by Benson I. Margulies: Changed to pass as_request_sender instead
   of event_call_info.
   08/23/84 by R. Michael Tague:  Added ASR_BUMP_USER request.  Added length
   checks of structures passed from the message segment.  Fixed bug with
   ASR_FPE_CAUSES_(LOGOUT NEW_PROC) request, it was not replying correctly.
   Structured $wakeup entry.
   Modified 1984-10-04 BIM for ASR_ADMIN_COMMAND, V5 msegs.
   Modified 1984-10-29 by E. Swenson to fix bug which caused asdumps when
   invalid messages were processed.
   11/20/84 by R. Michael Tague:  Fixed a few error comments.  Added named 
   access constants.  Changed to use ute.tag.
   Modified 1985-01-23 by E. Swenson to ASR_NOTE_PNT_CHANGE and delete
   offending message in the cleanup code.
   Modified 1985-02-19, BIM: ASR_DAEMON_COMMAND and ASR_COM_CHANNEL_INFO.
   Modified 1985-02-22 by E. Swenson to do replies properly for the 
   ASR_DAEMON_COMMAND and ASR_COM_CHANNEL_INFO requests.
   Modified 86-04-08 by SGH (UNCA) to free processed messages -- phx20268.
*/

/****^  HISTORY COMMENTS:
  1) change(85-12-12,Lippard), approve(85-12-30,MCR7326),
     audit(86-10-27,GDixon), install(86-10-28,MR12.0-1200):
     Modified 12 December 1985 (above date to satisfy hcom)
     by Jim Lippard:  Added the ASR_ABS_COMMAND request.
  2) change(86-05-13,GJohnson), approve(86-05-13,MCR7387),
     audit(86-05-13,Martinson), install(86-05-14,MR12.0-1055):
     Correct error message documentation.
  3) change(86-09-26,GDixon), approve(86-09-26,MCR7499),
     audit(86-10-09,Lippard), install(86-10-28,MR12.0-1200):
     Modified by Steve Harris (Univ. of Calgary) to free processed messages in
     all cases.  One path through the code missed freeing the message, causing
     the Initializers user free area to fill up, thereby degrading response.
  4) change(87-04-26,GDixon), approve(87-07-13,MCR7741),
     audit(87-07-27,Brunelle), install(87-08-04,MR12.1-1055):
     Upgraded for change to answer_table.incl.pl1 and user_table_entry.incl.pl1
  5) change(87-08-31,GDixon), approve(88-08-15,MCR7969),
     audit(88-08-04,Lippard), install(88-08-29,MR12.2-1093):
      A) Add acl for administrators to as_request.ms during initialization.
         (Answering_Service 407, phx19057)
      B) Use fs_util_ to replace the ACL, with its more modern ACL
         structures.
      C) Use mseg_access_mode_values.incl.pl1 to set access mode values,
         rather than literal constants.
  6) change(88-09-01,GDixon), approve(88-09-01,PBF7969),
     audit(88-09-03,Beattie), install(88-09-06,MR12.2-1100):
      A) Fix bug which set null access for *.*.*, instead of ao access.
         (Answering_Service 407, phx19057)
      B) Correct error message documentation.
                                                   END HISTORY COMMENTS */

/* format: style2 */

as_request_server_$init:
     procedure;

/* parameters */

	dcl     bv_event_call_info_ptr ptr parameter;

/* automatic */

	dcl     code		 fixed bin (35);
	dcl     code_mask_ev_calls	 fixed bin (35);
	dcl     code_unmask_ev_calls	 fixed bin (35);
	dcl     fixed_bin_71_reply	 fixed bin (71) aligned;
	dcl     type		 fixed bin;
	dcl     user_free_area_ptr	 ptr;

	dcl     1 mmi		 aligned like mseg_message_info;
	dcl     1 l_asr_reply	 aligned like asr_reply;
	dcl     1 l_as_request_sender	 aligned like as_request_sender;

/* internal static */

	dcl     ms_index		 fixed bin initial (0) internal static;

/* external static */

	dcl     error_table_$no_message
				 fixed bin (35) ext static;
	dcl     error_table_$noentry	 fixed bin (35) external static;
	dcl     error_table_$out_of_sequence
				 fixed bin (35) external static;
	dcl     error_table_$as_request_sender_missing
				 fixed bin (35) external static;
	dcl     error_table_$as_request_invalid_request
				 fixed bin (35) external static;
						/* entries */

	dcl     asu_$find_process	 entry (bit (36) aligned, fixed bin, ptr);
	dcl     as_any_other_handler_	 entry (character (*), entry, label, label);
	dcl     as_request_note_pnt_change_
				 entry (ptr, ptr);
	dcl     as_request_bump_user_	 entry (ptr, ptr);
	dcl     asr_abs_command_server_
				 entry (ptr, ptr);
	dcl     asr_com_channel_info_srvr_
				 entry (ptr, ptr);
	dcl     asr_daemon_command_server_
				 entry (ptr, ptr);
	dcl     dpg_$register_buzzard	 entry (ptr, ptr);
	dcl     dial_ctl_$dial_out_rq	 entry (ptr, ptr);
	dcl     dial_ctl_$dial_rq	 entry (ptr, ptr);
	dcl     fs_util_$replace_acl	 entry (char(*), char(*), ptr, bit(1), fixed bin(35));
	dcl     get_group_id_	 entry () returns (char (32));
	dcl     get_process_id_	 entry () returns (bit (36));
	dcl     get_user_free_area_	 entry returns (pointer);
	dcl     hcs_$wakeup		 entry (bit (36) aligned, fixed bin (71), fixed bin (71), fixed bin (35));
	dcl     ipc_$create_ev_chn	 entry (fixed bin (71), fixed bin (35));
	dcl     ipc_$decl_ev_call_chn	 entry (fixed bin (71), entry, ptr, fixed bin, fixed bin (35));
	dcl     ipc_$drain_chn	 entry (fixed bin (71), fixed bin (35));
	dcl     ipc_$mask_ev_calls	 entry (fixed bin (35));
	dcl     ipc_$unmask_ev_calls	 entry (fixed bin (35));
	dcl     message_segment_$create
				 entry (char (*), char (*), fixed bin (35));
	dcl     message_segment_$delete
				 entry (char (*), char (*), fixed bin (35));
	dcl     message_segment_$delete_index
				 entry (fixed bin, bit (72) aligned, fixed bin (35));
	dcl     message_segment_$read_message_index
				 entry (fixed bin, pointer, pointer, fixed bin (35));
	dcl     message_segment_$get_message_count_index
				 entry (fixed bin, fixed bin, fixed bin (35));
	dcl     message_segment_$open	 entry (char (*), char (*), fixed bin, fixed bin (35));
	dcl     sc_admin_command_	 entry (ptr, ptr);
	dcl     sub_err_		 entry () options (variable);
	dcl     sys_log_		 entry options (variable);
	dcl     sys_log_$error_log	 entry options (variable);

/* based */

	dcl     1 request		 aligned based (mmi.ms_ptr) like as_request_header;
     	dcl     user_free_area	 area based (user_free_area_ptr);

/* builtin functions */

	dcl     (addr, clock, dimension, length, null, unspec)
				 builtin;

	dcl     cleanup		 condition;
	dcl     any_other		 condition;


/* program */

	if ^sc_stat_$Multics_typed | sc_stat_$Go_typed
	then call sub_err_ (error_table_$out_of_sequence, "as_request_server_$init", "s");

/* Drain message segment by deleting and re-creating it. */

	call message_segment_$delete (sysdir, "as_request.ms", code);
	if code ^= 0
	then if code ^= error_table_$noentry		/* don't care if it didn't exist before */
	     then call sys_log_$error_log (SL_LOG, code, "as_request_server_$init", "Deleting ^a>as_request.ms.",
		     sysdir);

	call message_segment_$create (sysdir, "as_request.ms", code);
	if code ^= 0
	then go to fail;

	call message_segment_$open (sysdir, "as_request.ms", ms_index, code);
	if code ^= 0
	then go to fail;

/* add everyone to the ACL */

	call Set_Mseg_Acls();

/* The request segment is ready, set up the event channel */

	call ipc_$create_ev_chn (whotab.request_channel, code);
	if code ^= 0
	then go to ipc_fail;

	call ipc_$decl_ev_call_chn (whotab.request_channel, as_request_server_$wakeup, null, AS_REQUEST_PRIO, code);
	if code ^= 0
	then do;
ipc_fail:
		whotab.request_channel = 0;
		go to fail;
	     end;
	ansp = as_data_$ansp;
	whotab.request_process_id = anstbl.as_procid;

	return;

fail:
	call sys_log_$error_log (SL_LOG, code, "as_request_server_$init",
	     "Manipulating ^a>as_request.ms or IPC channels.", sysdir);
	ms_index = 0;				/* we didn't really finish */
	call sub_err_ (code, "as_request_server_$init", "s");

Set_Mseg_Acls:
     procedure ();

dcl  1 ms_acl	        aligned,			/* like general_acl */
       2 version	        char (8) aligned,
       2 count	        fixed bin,
       2 entries	        (5) like general_acl_entry;
dcl  NO_SYSDAEMON	        bit (1) initial ("1"b) internal static options (constant);

	acl_ptr = addr (ms_acl);
	general_acl.version = GENERAL_ACL_VERSION_1;
	general_acl.count = dimension (ms_acl.entries, 1);
	general_acl.entries (1).access_name = get_group_id_ ();
	general_acl.entries (1).mode = MSEG_QUEUE_CREATOR_INITIAL_ACCESS;
	general_acl.entries (1).status_code = 0;
	general_acl.entries (2).access_name = "*.SysDaemon.*";
	general_acl.entries (2).mode = MSEG_QUEUE_SYSDAEMON_INITIAL_ACCESS;
	general_acl.entries (2).status_code = 0;
	general_acl.entries (3).access_name = "*.SysAdmin.*";
	general_acl.entries (3).mode = MSEG_QUEUE_ADMIN_ACCESS;
	general_acl.entries (3).status_code = 0;
	general_acl.entries (4).access_name = "*.SysMaint.*";
	general_acl.entries (4).mode = MSEG_QUEUE_ADMIN_ACCESS;
	general_acl.entries (4).status_code = 0;
	general_acl.entries (5).access_name = "*.*.*";
	general_acl.entries (5).mode = MSEG_QUEUE_USER_ACCESS;
	general_acl.entries (5).status_code = 0;

	call fs_util_$replace_acl (sysdir, "as_request.ms",
	     addr (general_acl), NO_SYSDAEMON, code);
	if code ^= 0 then go to fail;
     end Set_Mseg_Acls;

/* ************************************************************************
   * as_request_server_$wakeup - Entry which is called when someone       *
   * places a request in the message segment and sends us a wakeup.       *
   *							    *
   * Note:  Since the messages from the requestor can be of any size, the *
   * length of the message must be compared against the size of structure *
   * that the message should represent.				    *
   ************************************************************************ */

as_request_server_$wakeup:
     entry (bv_event_call_info_ptr);
	event_call_info_ptr = bv_event_call_info_ptr;

	if ms_index = 0 | sc_stat_$shutdown_typed
	then do;
		call sys_log_ (SL_LOG,
		     "as_request_server_: Request message segment not initialized or shutdown has been typed.");
		return;
	     end;

	code_mask_ev_calls, code_unmask_ev_calls = -1;	/* close window, see CLEANUP and ERROR_RETURN */
	asr_replyp = addr (l_asr_reply);
	unspec (asr_reply) = ""b;

	unspec (mmi) = ""b;
	mmi.version = MSEG_MESSAGE_INFO_V1;
	mmi.ms_ptr = null ();			/* for cleanup handler */
	user_free_area_ptr = get_user_free_area_();
	ansp = as_data_$ansp;
	anstbl.current_time = clock ();
	on cleanup call CLEANUP;

	call ipc_$mask_ev_calls (code_mask_ev_calls);

	on any_other call as_any_other_handler_ ("as_request_server_", CLEANUP, ERROR_RETURN, ERROR_RETURN);
						/* we have no different exit requirements when cleanup failed. */

	code = 0;
	call ipc_$drain_chn (event_call_info.channel_id, (0));
	call PROCESS_MESSAGES (code);			/* returns -2 for deferred */

/**** Here if mseg is empty, or only contains deferred messages,
      or we have burned a bunch of CPU time. */

	if code = -2				/* deferred or processed too many. */
	then call hcs_$wakeup (get_process_id_ (), whotab.request_channel, (0), (0));
	go to RETURN;

ERROR_RETURN:
	call hcs_$wakeup (get_process_id_ (), whotab.request_channel, (0), (0));
						/* in case there is work left to do. */
RETURN:
	if code_mask_ev_calls = 0 & code_unmask_ev_calls ^= 0
	then call ipc_$unmask_ev_calls (code_unmask_ev_calls);
						/* masked in initialize */
	return;


PROCESS_MESSAGES:
     proc (code);
	dcl     code		 fixed bin (35);
	dcl     deferred_one	 bit (1) aligned;
	dcl     action		 fixed bin;
	dcl     message_count	 fixed bin;

/**** Each message is either processed, deferred, or rejected */

	declare (
	        PROCESS		 init (1),
	        DEFER		 init (2),
	        REJECT		 init (3)
	        )			 fixed bin int static options (constant);

	deferred_one = "0"b;
	mmi.message_code = MSEG_READ_FIRST;		/* start with the first one */

	do while ("1"b);				/* exit with return statement */
	     call message_segment_$read_message_index (ms_index, addr(user_free_area), addr (mmi), code);
	     if code ^= 0
	     then do;
		     if code ^= error_table_$no_message
		     then call sys_log_$error_log (SL_LOG_SILENT, code, "as_request_server_",
			     "Error reading message from message segment.");
		     if deferred_one
		     then code = -2;		/* note that wakeup needs to be sent back to us */
		     return;
		end;

	     action = EXAMINE_MESSAGE ();		/* side effects are potentially utep and mmi.sender_id */
	     if action = PROCESS
	     then do;
		     call PROCESS_THE_MESSAGE;
		     call DELETE_THE_MESSAGE;
		     call FREE_THE_MESSAGE;
		     call message_segment_$get_message_count_index (ms_index, message_count, code);
		     if code ^= 0 /* ???, but be safe */ | message_count > 0
		     then code = -2;
		     else code = 0;			/* There is no race condition here. */
		     return;			/* We drain the channel first, so that if we return zero here and a new message is in */
						/* its wakeup will take. */
		end;
	     else if action = DEFER
	     then do;
		     deferred_one = "1"b;
		     mmi.message_code = MSEG_READ_AFTER_SPECIFIED;
						/* continue along */
		end;
	     else if action = REJECT
	     then do;
		     call DELETE_THE_MESSAGE;
		     mmi.message_code = MSEG_READ_FIRST;
		end;

	     call FREE_THE_MESSAGE;
	end;

/* Never exit this loop */

EXAMINE_MESSAGE:
     procedure returns (fixed bin);

	if mmi.ms_len < length (unspec (request))
	then do;
		code = error_table_$as_request_invalid_request;
		call sys_log_$error_log (SL_LOG_SILENT, code, "as_request_server_",
		     "Message too short from ^a.", mmi.sender_id);
		return (REJECT);
	     end;
	call asu_$find_process (mmi.sender_process_id, type, utep);
						/* for now, always require live sender. */
	if utep = null
	then do;
		code = error_table_$as_request_sender_missing;
		call sys_log_$error_log (SL_LOG_SILENT, code, "as_request_server_",
		     "Process no longer active for request from ^a.", mmi.sender_id);
		return (REJECT);
	     end;

	if request.type < ASR_FIRST_TYPE | request.type > ASR_LAST_TYPE
	then do;
		call sys_log_ (SL_LOG_SILENT, "as_request_server_: Rejected invalid type ^d message from ^a ^w.",
		     request.type, mmi.sender_id, mmi.sender_process_id);
		return (REJECT);
	     end;

	if sc_stat_$admin_listener_switch
	then if ASR_DEFER_IN_ADMIN_MODE (request.type)
	     then return (DEFER);

	return (PROCESS);
     end EXAMINE_MESSAGE;


PROCESS_THE_MESSAGE:
     procedure;

	l_as_request_sender.version = AS_REQUEST_SENDER_VERSION_2;
	l_as_request_sender.group_id = mmi.sender_id;
	l_as_request_sender.process_id = mmi.sender_process_id;
	l_as_request_sender.authorization = mmi.sender_authorization;
	l_as_request_sender.validation_level = mmi.sender_level;
	l_as_request_sender.max_authorization = mmi.sender_max_authorization;
	l_as_request_sender.audit_flags = mmi.sender_audit;

	if request.type = ASR_DIAL_SERVER
	then call DIAL_SERVER_REQUEST ();
	else if request.type = ASR_DIAL_OUT
	then call DIAL_OUT_REQUEST ();
	else if request.type = ASR_FPE_CAUSES_LOGOUT
	then call FPE_CAUSES_LOGOUT_REQUEST ();
	else if request.type = ASR_FPE_CAUSES_NEW_PROC
	then call FPE_CAUSES_NEW_PROC_REQUEST ();
	else if request.type = ASR_PROC_TERM_NOTIFY
	then call PROC_TERM_NOTIFY_REQUEST ();
	else if request.type = ASR_BUMP_USER
	then call BUMP_USER_REQUEST ();
	else if request.type = ASR_ADMIN_COMMAND
	then call ADMIN_COMMAND_REQUEST ();
	else if request.type = ASR_NOTE_PNT_CHANGE
	then call NOTE_PNT_CHANGE_REQUEST ();
	else if request.type = ASR_DAEMON_COMMAND
	then call DAEMON_COMMAND_REQUEST ();
	else if request.type = ASR_COM_CHANNEL_INFO
	then call COM_CHANNEL_INFO_REQUEST ();
	else if request.type = ASR_ABS_COMMAND
	then call ABS_COMMAND_REQUEST ();
	return;
     end PROCESS_THE_MESSAGE;
     end PROCESS_MESSAGES;


/* ************************************************************************
   * DIAL_SERVER_REQUEST - For a dial request.  Presumably                *
   * dial_ctl_$dial_rq logs successful and unsuccessful requests.  No     *
   * reply is sent.  Note: request_ptr must be set so that length may be  *
   * without compiler warning.				    *
   ************************************************************************ */

DIAL_SERVER_REQUEST:
     proc ();
	request_ptr = mmi.ms_ptr;
	if mmi.ms_len >= length (unspec (dial_server_request))
	then call dial_ctl_$dial_rq (mmi.ms_ptr, addr (l_as_request_sender));
	else do;
		code = error_table_$as_request_invalid_request;
		call sys_log_$error_log (SL_LOG_SILENT, code, "as_request_server_", "Message for ""^a"" (type ^d) too short from ^a.",
		     ASR_REQUEST_NAMES (request.type), request.type, mmi.sender_id);
	     end;
     end DIAL_SERVER_REQUEST;

/* ************************************************************************
   * DIAL_OUT_REQUEST - AS request for dial_out.  No reply is sent.       *
   * Note: request_ptr must be set do that length can be user without     *
   * a compiler warning.					    *
   ************************************************************************ */

DIAL_OUT_REQUEST:
     proc ();
	request_ptr = mmi.ms_ptr;
	if mmi.ms_len >= length (unspec (dial_server_request))
	then call dial_ctl_$dial_out_rq (mmi.ms_ptr, addr (l_as_request_sender));
	else do;
		code = error_table_$as_request_invalid_request;
		call sys_log_$error_log (SL_LOG_SILENT, code, "as_request_server_", "Message for ""^a"" (type ^d) too short from ^a.",
		     ASR_REQUEST_NAMES (request.type), request.type, mmi.sender_id);
	     end;
     end DIAL_OUT_REQUEST;

/* ************************************************************************
   * FPE_CAUSES_LOGOUT_REQUEST -  This sets to logout the AS flag that    *
   * indicates whether a Fatal Process Error will cause a logout or a     *
   * new_proc.  The old value of the flag is returned in the reply.       *
   ************************************************************************ */

FPE_CAUSES_LOGOUT_REQUEST:
     proc ();
	l_asr_reply.data = ute.fpe_causes_logout;
	l_asr_reply.code = 0;
	ute.fpe_causes_logout = "1"b;
	call sys_log_ (SL_LOG_SILENT, "^a: ^a (^w) set fatal process error ^[logout^;new_proc^].", "as_request_sender_",
	     mmi.sender_id, mmi.sender_process_id, ute.fpe_causes_logout);
	call SEND_ASR_REPLY;
     end FPE_CAUSES_LOGOUT_REQUEST;

/* ************************************************************************
   * FPE_CAUSES_NEW_PROC_REQUEST -  This sets to new_proc the AS flag     *
   * that indicates whether a Fatal Process Error will cause a logout or  *
   * a new_proc.  The old value of the flag is returned in the reply.     *
   ************************************************************************ */

FPE_CAUSES_NEW_PROC_REQUEST:
     proc ();
	l_asr_reply.data = ute.fpe_causes_logout;
	l_asr_reply.code = 0;
	ute.fpe_causes_logout = "0"b;
	call sys_log_ (SL_LOG_SILENT, "^a: ^a (^w) set fatal process error ^[logout^;new_proc^].", "as_request_sender_",
	     mmi.sender_id, mmi.sender_process_id, ute.fpe_causes_logout);
	call SEND_ASR_REPLY;
     end FPE_CAUSES_NEW_PROC_REQUEST;

/* ************************************************************************
   * PROC_TERM_NOTIFY_REQUEST - This registers a user to be a buzzard     *
   * process, i.e., the user's process will be notified when other        *
   * processes are terminated.  Note: asr_buzzard_infop must be set so    *
   * that the length function can be used without a compiler warning.     *
   ************************************************************************ */

PROC_TERM_NOTIFY_REQUEST:
     proc ();
	asr_buzzard_infop = mmi.ms_ptr;
	if mmi.ms_len >= length (unspec (asr_buzzard_info))
	then do;
		call dpg_$register_buzzard (mmi.ms_ptr, addr (l_as_request_sender));
		unspec (l_asr_reply) = unspec (l_as_request_sender.reply_message);
		call SEND_ASR_REPLY;
	     end;
	else do;
		code = error_table_$as_request_invalid_request;
		call sys_log_$error_log (SL_LOG_SILENT, code, "as_request_server_", "Message for ""^a"" (type ^d) too short from ^a.",
		     ASR_REQUEST_NAMES (request.type), request.type, mmi.sender_id);
	     end;
     end PROC_TERM_NOTIFY_REQUEST;

/* ************************************************************************
   * BUMP_USER_REQUEST - The requesting process wishes to bump another    *
   * user's process.					    *
   ************************************************************************ */

BUMP_USER_REQUEST:
     proc ();
	if mmi.ms_len >= length (unspec (asr_bump_user_info))
	then do;
		asr_bump_user_info_ptr = mmi.ms_ptr;
		call as_request_bump_user_ (asr_bump_user_info_ptr, addr (l_as_request_sender));
		unspec (l_asr_reply) = unspec (l_as_request_sender.reply_message);
		call SEND_ASR_REPLY;
	     end;
	else do;
		code = error_table_$as_request_invalid_request;
		call sys_log_$error_log (SL_LOG_SILENT, code, "as_request_server_", "Message for ""^a"" (type ^d) too short from ^a.",
		     ASR_REQUEST_NAMES (request.type), request.type, mmi.sender_id);
	     end;
     end BUMP_USER_REQUEST;


ADMIN_COMMAND_REQUEST:
     proc ();
	asr_admin_command_info_ptr = mmi.ms_ptr;	/* trust as far as refer calculation */
	if mmi.ms_len >= length (unspec (asr_admin_command_info))
	then do;
		call sc_admin_command_ (asr_admin_command_info_ptr, addr (l_as_request_sender));
		unspec (l_asr_reply) = unspec (l_as_request_sender.reply_message);
		call SEND_ASR_REPLY;
	     end;
	else do;
		code = error_table_$as_request_invalid_request;
		call sys_log_$error_log (SL_LOG_SILENT, code, "as_request_server_", "Message for ""^a"" (type ^d) too short from ^a.",
		     ASR_REQUEST_NAMES (request.type), request.type, mmi.sender_id);
	     end;
     end ADMIN_COMMAND_REQUEST;

NOTE_PNT_CHANGE_REQUEST:
     procedure ();

/**** This request allows the Ring-1 PNT software to notify the answering
      service of PNT changes which may require bumping currently logged
      in users, or which may require updating information in the
      user_table_entry for a user. */

	asr_note_pnt_change_info_ptr = mmi.ms_ptr;
	if mmi.ms_len >= length (unspec (asr_note_pnt_change_info))
	then call as_request_note_pnt_change_ (asr_note_pnt_change_info_ptr, addr (l_as_request_sender));
	else do;
		code = error_table_$as_request_invalid_request;
		call sys_log_$error_log (SL_LOG_SILENT, code, "as_request_server_", "Message for ""^a"" (type ^d) too short from ^a.",
		     ASR_REQUEST_NAMES (request.type), request.type, mmi.sender_id);
	     end;
	return;
     end NOTE_PNT_CHANGE_REQUEST;

COM_CHANNEL_INFO_REQUEST:
     procedure ();

	asr_com_channel_info_ptr = mmi.ms_ptr;
	if mmi.ms_len >= length (unspec (asr_com_channel_info))
	then do;
		call asr_com_channel_info_srvr_ (asr_com_channel_info_ptr, addr (l_as_request_sender));
		unspec (l_asr_reply) = unspec (l_as_request_sender.reply_message);
		call SEND_ASR_REPLY ();
	     end;
	else do;
		code = error_table_$as_request_invalid_request;
		call sys_log_$error_log (SL_LOG_SILENT, code, "as_request_server_", "Message for ""^a"" (type ^d) too short from ^a.",
		     ASR_REQUEST_NAMES (request.type), request.type, mmi.sender_id);
	     end;
	return;
     end COM_CHANNEL_INFO_REQUEST;

DAEMON_COMMAND_REQUEST:
     procedure ();

	asr_daemon_command_info_ptr = mmi.ms_ptr;
	if mmi.ms_len >= length (unspec (asr_daemon_command_info))
	then do;
		call asr_daemon_command_server_ (asr_daemon_command_info_ptr, addr (l_as_request_sender));
		unspec (l_asr_reply) = unspec (l_as_request_sender.reply_message);
		call SEND_ASR_REPLY ();
	     end;
	else do;
		code = error_table_$as_request_invalid_request;
		call sys_log_$error_log (SL_LOG_SILENT, code, "as_request_server_", "Message for ""^a"" (type ^d) too short from ^a.",
		     ASR_REQUEST_NAMES (request.type), request.type, mmi.sender_id);
	     end;
	return;
     end DAEMON_COMMAND_REQUEST;
%page;
ABS_COMMAND_REQUEST:
     procedure ();

	asr_abs_command_info_ptr = mmi.ms_ptr;
	if mmi.ms_len >= length (unspec (asr_abs_command_info))
	then do;
		call asr_abs_command_server_ (asr_abs_command_info_ptr, addr (l_as_request_sender));
		unspec (l_asr_reply) = unspec (l_as_request_sender.reply_message);
		call SEND_ASR_REPLY ();
	     end;
	else do;
		code = error_table_$as_request_invalid_request;
		call sys_log_$error_log (SL_LOG_SILENT, code, "as_request_server_", "Message for ""^a"" (type ^d) too short from ^a.",
		     ASR_REQUEST_NAMES (request.type), request.type, mmi.sender_id);
	     end;
	return;
     end ABS_COMMAND_REQUEST;

/* ************************************************************************
   * SEND_ASR_REPLY - For those requests that send back replies, if the   *
   * reply channel is non zero, then send back the reply.		    *
   ************************************************************************ */

SEND_ASR_REPLY:
     proc ();
	if request.reply_channel ^= 0
	then do;
		unspec (fixed_bin_71_reply) = unspec (l_asr_reply);
		call hcs_$wakeup (mmi.sender_process_id, request.reply_channel, fixed_bin_71_reply, code);
	     end;
     end SEND_ASR_REPLY;

CLEANUP:
     procedure;

	if code_mask_ev_calls = 0 & code_unmask_ev_calls ^= 0
	then call ipc_$unmask_ev_calls (code_unmask_ev_calls);
						/* masked in initialize */
	call FREE_THE_MESSAGE ();

	if mmi.ms_id ^= ""b
	then call DELETE_THE_MESSAGE ();		/* delete offending message */

     end CLEANUP;

DELETE_THE_MESSAGE:
     procedure;
	call message_segment_$delete_index (ms_index, mmi.ms_id, code);
	if code ^= 0
	then call sys_log_$error_log (SL_LOG_SILENT, code, "as_request_server_", "Could not delete message ^.3b for ^a",
		mmi.ms_id, mmi.sender_id);
	else mmi.ms_id = ""b;			/* clear out since no longer valid */
	return;
     end DELETE_THE_MESSAGE;


FREE_THE_MESSAGE:
     procedure;
     
	declare msg		 bit (mmi.ms_len) aligned based (mmi.ms_ptr);

	if mmi.ms_ptr ^= null ()
	then do;
	     free msg in (user_free_area);
	     mmi.ms_ptr = null ();
	end;
	return;

     end FREE_THE_MESSAGE;

/* format: off */
%page; %include absentee_user_table;
%page; %include access_mode_values;
%page; %include acl_structures;
%page; %include answer_table;
%page; %include as_data_;
%page; %include as_data_definitions_;
%page; %include as_request_header;
%page; %include as_requests;
%page; %include asr_abs_command;
%page; %include asr_daemon_command;
%page; %include asr_com_channel_info;
%page; %include as_request_sender_;
%page; %include as_wakeup_priorities;
%page; %include dial_server_request;
%page; %include event_call_info;
%page; %include mseg_access_mode_values;
%page; %include mseg_message_info;
%page; %include sc_stat_;
%page; %include sys_log_constants;
%page; %include user_attributes;
%page; %include user_table_entry;
%page; %include user_table_header;
%page; %include whotab;
%page;

/* BEGIN MESSAGE DOCUMENTATION

   Message:
   as_request_server_$init: MSG. Manipulating >sc1>as_request_.ms or IPC channels.

   S:	as (severity1)

   T:	Answering Service initialization.

   M:	MSG is an error_table_ message. A programming error has been encountered.

   A:	$contact
   After the problem is corrected, repeat the bootload operation.


   Message:
   as_request_server_$init: MSG. Deleting >sc1>as_request_.ms.

   S:	as (severity1)

   T:	Answering Service initialization.

   M:	MSG is an error_table_ message. An error was encountered while
   attempting to delete the as_request message segment, prior to re-creating
   it.  as_request_server_$init continues and attempts to create the message
   segment.

   A:	$ignore


   Message:
   as_request_server_: Request message segment not initialized or shutdown has been typed.

   S:	as (severity1)

   T:	$run

   M:	A request is being ignored because the AS request queue has not been initialized or
   the the operator has typed the shutdown command.

   A:	$ignore


   Message:
   as_request_server_: MSG. Error reading message from message segment.

   S:	as (severity0)

   T:	$run

   M:	MSG is an error_table_ message. An error occurred while reading an AS message from
   the AS request queue.

   A:	$ignore


   Message:
   as_request_server_: Message {for "REQUEST NAME" (type N)} too short from PERS.PROJ.

   S:	as (severity0)

   T:	$run

   M:	A request of type N sent by the process group id specified by PERS.PROJ was in error.
   The request is ignored.  If the request is shorter than the standard request header which 
   precedes all requests, then the request type is not present in the message.

   A:	$ignore


   Message:
   as_request_server_: MSG.  Process no longer active for request from PERS.PROJ.

   S:	as (severity0)

   T:	$run

   M:	MSG is an error_table_ message and PERS.PROJ isthe sender id.  A process sent a wakeup to the
   Answering Service but then logged out before the Answering Service handled the wakeup.

   A:	$ignore


   Message:
   as_request_server_: ERROR_MESSAGE.  Can't find message from PGID

   S:	as (severity0)

   T:	$run

   M:	MSG is an error_table_ message and PGID is a process group id.
   A process sent a wakeup to the Answering Service, but did not put a message in as_request.ms.

   A:	$ignore


   Message:
   as_request_server_: Rejected invalid type XX message from PERS.PROJ PID.

   S:	as (severity0)

   T:	$run

   M:	An invalid wakeup request has been sent to as_request_server_.
   The sending process ID is PID,
   and the sender name in the message is PERS.PROJ.
   The request is a type XX request.
   No action was taken.

   A:	$ignore


   Message:
   as_request_sender_: MSG. Could not delete message MID for PERS.PROJ.

   S:	as (severity0)

   T:	$run

   M:	MSG is an error_table_ message, MID is a message ID, PERS.PROJ is the group
   ID of the AS request sender.  The AS request message could not be deleted after executing
   the AS request.

   A:	$ignore


   Message:
   as_request_sender_: PERS.PROJ (PID) set fatal process error [logout|new_proc].

   S:	as (severity0)

   T:	$run

   M:	The process group id PERS.PROJ (process id PID) has set the AS flag which indicates
   that fatal process errors will cause a {logout|new_proc}.

   A:	$ignore

   END MESSAGE DOCUMENTATION */

     end as_request_server_$init;
