/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   *********************************************************** */
/* Entry to send an interactive message to a user from the answering
   service. */

/* format: style2,idind30 */
/**** NOTE: This does NOT validate the user's access to deliver
      mail to the destination. Clients of this should not
      set Destination to other than "" unless they are willing
      to use the AS's full access in delivering. */

/**** NOTE: This still uses send_mail_, because noone has bothered
      to make the mail system and the message facility work
      together in a reasonable way. It could use message_facility_,
      but that was not installed as of this writing. */

as_send_user_message_:
     procedure (Caller, Destination, Group_id, Message, Access_class, Sender, Express);

	declare (
	        Caller,				/* for error messages */
	        Destination,			/* preferred destination */
	        Group_id,				/* user name used to construct possible default destinations */
	        Message,
	        Sender
	        )			        char (*);
	declare Express		        bit (1) aligned;
	declare Access_class	        bit (72) aligned;
	declare code		        fixed bin (35);

	declare send_mail_$access_class       entry (character (*), character (*), pointer, bit (72) aligned,
				        fixed binary (35));

	declare sys_log_$error_log	        entry options (variable);
	declare error_table_$messages_off     fixed bin (35) ext static;

/* Destination is ignored until we can use mail_system_ */

	call try_delivery (substr (Group_id, 1, length (rtrim (Group_id)) - 2 /* tag */), code);
	if code ^= 0
	then call sys_log_$error_log (SL_LOG_SILENT, code, Caller, "Failed to deliver mail to user ^a.", Group_id);
	return;

try_delivery:
     procedure (address, code);

	declare address		        char (*);
	declare code		        fixed bin (35);

%include send_mail_info;

	send_mail_info.version = send_mail_info_version_2;
	send_mail_info.sent_from = Sender;
	send_mail_info.switches = "0"b;
	send_mail_info.switches.wakeup = "1"b;
	send_mail_info.switches.always_add = ^Express;

	call send_mail_$access_class (address, Message, addr (send_mail_info), Access_class, code);
	if code = error_table_$messages_off & ^Express
	then code = 0;
	return;
     end try_delivery;



%include mlsys_deliver_info;
%include sys_log_constants;
     end as_send_user_message_;
