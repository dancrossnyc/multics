/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* cdt_mgr_.pl1 -- entries to manage cdt with tree of channel names */
/* format: style2 */

cdt_mgr_:
     procedure;					/** This entry is not retained */

/* Initial Coding -- Benson I. Margulies December 1981 */
/* Fix to change daughter ptr when new entry added to head of daughter list
	BIM 7/82 */
/* Modified 1984-08-27 BIM for login auth ranges, com channel AIM. */


/****^  HISTORY COMMENTS:
  1) change(87-06-08,Beattie), approve(87-04-06,MCR7656),
     audit(87-07-14,Parisek), install(87-08-04,MR12.1-1055):
     Initialize variables used to control use of IOCBs.
                                                   END HISTORY COMMENTS */


	declare ix		 fixed bin;
	declare code		 fixed bin (35);
	declare (fnpx, cdtx)	 fixed bin;
	declare first_cdtep		 pointer;
	declare first_cdte_offset	 fixed bin (18) unsigned;
	declare name_offset		 fixed bin (18) unsigned;
	declare cdte_size		 fixed bin (18) unsigned;
	declare thread_order	 (2711) fixed bin unaligned;
						/* max possible needed */


	declare parse_fnp_name_	 entry (char (*), fixed bin);
	declare sort_items_$char	 entry (ptr, fixed bin (24));

	declare error_table_$badcall	 fixed bin (35) ext static;
	declare error_table_$unimplemented_version
				 fixed bin (35) ext static;
	declare error_table_$namedup	 fixed bin (35) ext static;
	declare error_table_$noentry	 fixed bin (35) ext static;
	declare as_error_table_$cdte_in_use_wrong
				 fixed bin (35) ext static;
	declare as_error_table_$illegal_top_mpx_name
				 fixed bin (35) ext static;
	declare as_error_table_$salvage_cdt
				 fixed bin (35) ext static;

	declare (addr, addrel, after, before, bin, currentsize, divide, index, length, null, rel, reverse,
	        rtrim, substr, unspec) builtin;

%page;
/* cdt_mgr_$thread: process an entire cdt, threading cdt entries. */
/* CDT_pointer is a pointer to the cdt segment. */


/* This program calls sub_err_ with an info structure for errors */
/* to permit more explicit disgnosis. Callers should handle */
/* the sub_error_ condition with a callername of "cdt_mgr_" */
/* to avoid spurious command levels. */

thread:
     entry (CDT_pointer, Code);


	declare (
	        CDT_pointer		 pointer,
	        Code		 fixed bin (35)
	        )			 parameter;

	cdtp = CDT_pointer;
	Code = 0;

	if cdt.version < CDT_version
	then do;
		call signal_error (error_table_$unimplemented_version, "CDT version is ^d, must be ^d", cdt.version,
		     CDT_version);
		Code = error_table_$unimplemented_version;
		go to RETURN;
	     end;

/**** first init the fnpes */
/**** since fnpe's are not in the array of cdtes, they cannot be threaded */
/**** as siblings. */
/**** the -2 in fnpe.threads.next_sister is used to identify fnpes */


	do fnpx = 1 to 8;
	     fnpep = addr (cdt.fnp_entry (fnpx));
	     fnpe.next_sister = -2;			/* invalid -- identifies fnpe */
	     fnpe.prev_sister = -2;
	     fnpe.mother = 0;			/* top of tree */
	     fnpe.daughter = 0;			/* null for now */
	     fnpe.daughter_count = 0;
	end;

/**** Now look at each cdte and thread it in. If some parent does not */
/**** exist, then the channel is remembered for postprocessing */
/**** cdt.n_cdtes may be wrong, due to threading lossage, since it is */
/**** maintained along with threads. If it is, the code fixes it and */
/**** retries.  */

/**** cdt.current_size might be wrong as well, so we check for putative */
/**** cdte's for the entire length of the cdt. This depends on the fact */
/**** that unused cdte's past the end contain NOW_FREE. */

/**** note that much of this checking is not needed for the cv_cmf case, */
/**** but there is no time now (10.0) to make a salvage vs. nonsalvage */
/**** distinction. */


/**** Find the last nonzero anything in the segment. */

	declare cdt_cur_length	 fixed bin;

	begin;
	     declare 1 SB		      aligned like status_branch;
	     declare d		      char (168);
	     declare e		      char (32);
	     declare sys_info$max_seg_size  fixed bin (35) ext static;

	     unspec (SB) = ""b;
	     call hcs_$fs_get_path_name (cdtp, d, (0), e, (0));
	     call hcs_$status_long (d, e, 1 /* chase */, addr (SB), null (), (0));
	     if SB.current_length > 0
	     then cdt_cur_length = SB.current_length * 1024;
						/* its in records */
	     else cdt_cur_length = sys_info$max_seg_size; /* its in words */
	end;

	begin;
	     declare cdt_as_chars	      char (4 * cdt_cur_length) unaligned based (cdtp);
						/* chars because bit string ops not optimized by compiler */
	     declare first_non_nullx	      fixed bin (21);
	     declare first_non_null	      fixed bin (18) unsigned;
	     declare (length, low, reverse, verify)
				      builtin;
	     declare add_char_offset_	      entry (ptr, fixed bin (21)) returns (ptr) reducible;

	     first_non_nullx = verify (reverse (cdt_as_chars), low (1));
						/* This is exceedingly unlikely to be nonzero, but ... */

	     first_non_nullx = length (cdt_as_chars) - first_non_nullx;
						/* ASSUME that it will not be zero !? */

	     first_non_null = bin (rel (add_char_offset_ (cdtp, first_non_nullx)), 18);
	     if first_non_null < bin (rel (addr (cdt.cdt_entry (1))), 18)
	     then go to EMPTY_CDT;			/* hmmm */

	     do ix = 1 repeat 1 + ix;
		if bin (rel (addr (cdt.cdt_entry (ix))), 18) ^< first_non_null
		then go to FOUND_LAST_CDTE;
	     end;

FOUND_LAST_CDTE:
	     cdt.current_size = ix;
	end;					/* the block that finds currentsize */


RETRY_CDT_NAME_SORT:
	begin;
	     declare last_in_use_cdtx	      fixed bin;
	     declare 1 sort_info	      aligned,
		     2 n_cdtes	      fixed bin (24) init (cdt.n_cdtes),
		     2 cdte_name_ptrs     (cdt.n_cdtes) pointer unaligned;

	     ix = 0;

	     do cdtx = 1 to cdt.current_size;
		cdtep = addr (cdt.cdt_entry (cdtx));
		if cdte.in_use ^= NOW_FREE
		then do;
			last_in_use_cdtx = cdtx;	/* might be smaller than the value calculated above */
			ix = ix + 1;
			sort_info.cdte_name_ptrs (ix) = addr (cdte.name);
		     end;
		else unspec (cdte.threads) = ""b;
	     end;

	     cdt.current_size = last_in_use_cdtx;	/* correct silently */

	     if ix ^= cdt.n_cdtes
	     then do;
		     call signal_warning (as_error_table_$cdte_in_use_wrong,
			"There were ^d non-free channels within the current CDT size (^d), but cdt.n_cdtes was ^d.",
			ix, cdt.current_size, cdt.n_cdtes);
		     cdt.n_cdtes = ix;
		     go to RETRY_CDT_NAME_SORT;
		end;

	     call sort_items_$char (addr (sort_info), 32);

	     first_cdtep = addr (cdt.cdt_entry (1));
	     first_cdte_offset = bin (rel (first_cdtep));
	     name_offset = bin (rel (addr (first_cdtep -> cdte.name))) - first_cdte_offset;
	     cdte_size = currentsize (cdte);

	     do ix = 1 to cdt.n_cdtes;		/* now turn the array of pointers to names */
						/* into an array of cdtx's. This is a bit messy */

/**** Given a cdtep derived from the name ptr, we can get the relative */
/**** offset from the first cdte, and divide by cdte size for an index. */
/**** the first cdte will come out as 0, so we add one. */

		cdtep = addrel (sort_info.cdte_name_ptrs (ix), -name_offset);
		thread_order (ix) = divide (bin (rel (cdtep)) - first_cdte_offset, cdte_size, 18, 0) + 1;
	     end;
	end;					/* Free up the array of pointers */

/**** Now we have a vector of cdtx's that represents the sort order */
/**** of the cdte names. so we can thread each one in trivially. */
/**** Since threading from scratch is not a time-critical operation, */
/**** it is done by calling the thread_in_cdte procedure once for each */

	do ix = 1 to cdt.current_size;		/* wipe old threads */
	     unspec (cdt.cdt_entry (ix).threads) = ""b;
	end;
	unspec (cdt.threads) = ""b;

	do ix = 1 to cdt.n_cdtes;
	     call thread_in_cdte ((thread_order (ix)));	/* unaligned to aligned across this call */
	end;

/* This should be a threaded cdt. */

EMPTY_CDT:
	return;
%page;

thread_in_cdte:
     procedure (cdtx);

	declare cdtx		 fixed bin;
	declare parent_name		 character (32);
	declare parentx		 fixed bin;	/* cdt or fnpx */
	declare sisx		 fixed bin;
	declare l_cdtep		 pointer;
	declare 1 lcdte		 aligned like cdte based (l_cdtep);
	declare p_cdtep		 pointer;
	declare 1 pcdte		 aligned like cdte based (p_cdtep);
	declare 1 lthreads		 aligned like channel_threads based (threads_ptr);
	declare threads_ptr		 pointer;
	declare fnpe_sw		 bit (1) aligned;

	l_cdtep = addr (cdt.cdt_entry (cdtx));

	parent_name = reverse (after (reverse (lcdte.name), "."));
	if parent_name = ""
	then parent_name = lcdte.name;

	if parent_name = lcdte.name			/* is it top level? */
	then do;					/* check for conflict with fnp names and handle
	            top level threads */

/**** inside this block, parent_XXX are really current_XXX */


		call parse_fnp_name_ (parent_name, fnpx);

		if fnpx > 0			/* Legal FNP */
		then do;
			call signal_error (as_error_table_$illegal_top_mpx_name,
			     "Non-FNP channel ^a has name reserved for FNP's.", parent_name);
			Code = as_error_table_$illegal_top_mpx_name;
			go to RETURN;
		     end;

/**** valid top level mpx name. Thread into top level chain */

		lcdte.threads.mother = 0;		/* top of tree */
		lcdte.threads.daughter, lcdte.threads.daughter_count = 0;

		if cdt.threads.daughter = 0		/* first nonfnp top mpx */
		then do;
			cdt.threads.daughter = cdtx;
			cdt.threads.daughter_count = 1;
			lcdte.threads.prev_sister, lcdte.threads.next_sister = 0;
						/* cleaner */
		     end;

		else do;
			do parentx = cdt.threads.daughter repeat (cdt.cdt_entry (parentx).next_sister)
			     while (cdt.cdt_entry (parentx).next_sister ^= 0
			     & parent_name > cdt.cdt_entry (parentx).name);
			end;			/* stop on end-of-the-line or < */


/* p_cdtep points to ELDER SISTER OR YOUNGER SISTER ! */

			p_cdtep = addr (cdt.cdt_entry (parentx));

			if parent_name < pcdte.name
			then do;			/* goes in before */
				lcdte.prev_sister = pcdte.prev_sister;
				pcdte.prev_sister = cdtx;
				lcdte.next_sister = parentx;
				cdt.threads.daughter_count = cdt.threads.daughter_count + 1;
			     end;

			else if parent_name > pcdte.name
						/* end of chain */
			then do;
				pcdte.next_sister = cdtx;
						/* was 0 */
				lcdte.prev_sister = parentx;
				lcdte.next_sister = 0;
				cdt.threads.daughter_count = cdt.threads.daughter_count + 1;
			     end;

			else do;			/* OOPS */
				call signal_error (error_table_$namedup,
				     "Channel ^a already in cdt. newx = ^d, oldx = ^d.", lcdte.name, cdtx,
				     parentx);

/***** Return here is a request to fix it, because its the live cdt. */

				call signal_warning (0, "Deleting second copy of ^a (at ^d).", lcdte.name, cdtx);
				lcdte.in_use = NOW_FREE;
			     end;
		     end;
	     end;					/* top level mpx case */

	else do;					/* non-top-level */
		call find_channel (parent_name, parentx, fnpe_sw, code);
						/* fnpe_sw is "1"b if parent is a FNP */

		if code ^= 0
		then do;
			call signal_error (code, "Channel ^a: parent channel ^a not in cdt.", lcdte.name,
			     parent_name);

/***** return here indicates that it was the service CDT that was busted, *****/
/***** and repairs should be attempted */
			call signal_warning (0, "Deleting orphan channel ^a (^d).", lcdte.name, cdtx);
			lcdte.in_use = NOW_FREE;
		     end;

		if fnpe_sw
		then threads_ptr = addr (cdt.fnp_entry (-parentx).threads);
		else threads_ptr = addr (cdt.cdt_entry (parentx).threads);

		lcdte.daughter, lcdte.daughter_count = 0;
		lcdte.mother = parentx;
		if lthreads.daughter = 0		/* first daughter */
		then do;
			lthreads.daughter = cdtx;
			lthreads.daughter_count = 1;
			lcdte.next_sister, lcdte.prev_sister = 0;
		     end;
		else do;

			do sisx = lthreads.daughter	/** **/
			     repeat (cdt.cdt_entry (sisx).next_sister)
						/** **/
			     while (cdt.cdt_entry (sisx).next_sister ^= 0
						/** **/
			     & lcdte.name > cdt.cdt_entry (sisx).name);
			end;			/* stop on end-of-the-line or < */

			p_cdtep = addr (cdt.cdt_entry (sisx));
						/* pcdte is ELDER OR YOUNGER SISTER */

			if lcdte.name < pcdte.name
			then do;			/* before */
				lcdte.prev_sister = pcdte.prev_sister;
				pcdte.prev_sister = cdtx;
				lcdte.next_sister = sisx;
				if lcdte.prev_sister > 0
				then cdt.cdt_entry (lcdte.prev_sister).next_sister = cdtx;
				else lthreads.daughter = cdtx;
						/* This is now head of chain */
				lthreads.daughter_count = lthreads.daughter_count + 1;
			     end;
			else if lcdte.name > pcdte.name
			then do;
				lcdte.prev_sister = sisx;
				lcdte.next_sister = 0;
				pcdte.next_sister = cdtx;
				lthreads.daughter_count = lthreads.daughter_count + 1;
			     end;
			else do;
				call signal_error (error_table_$namedup,
				     "Channel ^a already in CDT. newx = ^d, oldx = ^d.", lcdte.name, cdtx, sisx);
				call signal_warning (0, "Deleting duplicate channel ^a (^d).", lcdte.name, cdtx);
				lcdte.in_use = NOW_FREE;
			     end;
		     end;				/* nontrivial chain */
	     end;					/* non-top-level */

     end thread_in_cdte;				/* thats all for that */
%page;

find_channel:
     procedure (name, idx, fnpe_sw, code);

	declare name		 character (32);
	declare target_name		 character (32);
	declare idx		 fixed bin;
	declare fnpe_sw		 bit (1) aligned;
	declare code		 fixed bin (35);

	declare correct_level	 bit (1) aligned;
	declare new_compare_length	 fixed bin;
	declare x			 fixed bin;
	declare compare_length	 fixed bin (21);
	declare ltp		 pointer;
	declare start_threads_ptr	 pointer;
	declare daughters_seen	 fixed bin;
	declare total_channels_seen	 fixed bin;
	declare first_name		 character (32) aligned;

/**** we call signal_error for inconsistencies, return code for channel-not-found */
/**** this entrypoint always starts at the top. find_channel_start is called */


	target_name = name;

/**** with a cdtx or fnpx to start at. It enters further down, after the top level */
/**** stuff. */

/**** we establish the search start point by checking for the FNP case. */
/**** it is too painful to make the efficient searcher deal with that. */

	code = 0;
	first_name = before (target_name, ".");

	call parse_fnp_name_ ((first_name), fnpx);

	if fnpx > 0
	then do;					/* forsure */
		if first_name = target_name		/* thats all they wanted */
		then do;
			idx = -fnpx;
			fnpe_sw = "1"b;
			return;
		     end;
		start_threads_ptr = addr (cdt.fnp_entry (fnpx).threads);
		compare_length = index (substr (target_name, 3), ".");
		if compare_length = 0
		then do;
			compare_length = length (rtrim (target_name));
			correct_level = "1"b;
		     end;
		else do;
			compare_length = compare_length + 1;
						/* dont look for trailing . */
			correct_level = "0"b;
		     end;
	     end;
	else do;
		start_threads_ptr = addr (cdt.threads); /* start with toplevel chain */
		compare_length = index (target_name, ".");
		if compare_length = 0
		then do;
			correct_level = "1"b;	/* looking at this level for final answer */
			compare_length = length (rtrim (target_name));
		     end;
		else do;
			compare_length = compare_length - 1;
						/* channels cant end in . */
			correct_level = "0"b;
		     end;
	     end;
	fnpe_sw = "0"b;				/* guaranteed */

	ltp = start_threads_ptr;
	total_channels_seen = 0;

/**** ltp must be a pointer to a thread block for the parent */
/**** of the next list to examine when control gets here */

RECURSE_DOWN:
	begin;
	     declare search_name	      character (compare_length) defined (target_name) position (1);
	     daughters_seen = 0;

	     if ltp -> channel_threads.daughter = 0	/* no more */
	     then do;
		     code = error_table_$noentry;
		     return;
		end;

	     do x = ltp -> channel_threads.daughter	/** **/
		repeat (cdt.cdt_entry (x).threads.next_sister)
						/** **/
		while (x ^= 0);

		daughters_seen = daughters_seen + 1;
		total_channels_seen = total_channels_seen + 1;
		if daughters_seen > ltp -> channel_threads.daughter_count
		then do;
			call signal_error (as_error_table_$salvage_cdt, "Too many daughters for cdtx = ^d.",
			     cdt.cdt_entry (x).threads.mother);
			go to RETURN;		/* Force a return */
		     end;
		if total_channels_seen > cdt.n_cdtes
		then do;
			call signal_error (as_error_table_$salvage_cdt, "Too many channels found via threads");
			go to RETURN;
		     end;

		if cdt.cdt_entry (x).name = search_name
		then do;				/* matches so far */
			if correct_level		/* as far as it has to */
			then do;
				if cdt.cdt_entry (x).in_use = NOW_FREE
				then call signal_error (as_error_table_$salvage_cdt,
					"cdt entry found, but in_use is NOW_FREE.");
				idx = x;
				return;		/* found */
			     end;
			new_compare_length = index (substr (target_name, compare_length + 2), ".");
			if new_compare_length = 0
			then do;
				correct_level = "1"b;
				compare_length = length (rtrim (target_name));
			     end;
			else compare_length = compare_length + new_compare_length;
			ltp = addr (cdt.cdt_entry (x).threads);
			go to RECURSE_DOWN;		/* out and into block */
		     end;
		else if cdt.cdt_entry (x).name > search_name /* cant possibly match */
		     | cdt.cdt_entry (x).threads.next_sister = 0
						/* noplace else to look */
		then do;
			code = error_table_$noentry;
			if cdt.cdt_entry (x).threads.next_sister = 0
			     & daughters_seen ^= ltp -> channel_threads.daughter_count
			then do;
				call signal_error (as_error_table_$salvage_cdt, "Missing daughters for cdtx ^d.",
				     cdt.cdt_entry (x).threads.mother);
				go to RETURN;
			     end;
			return;
		     end;
	     end;					/* the do loop */
	end RECURSE_DOWN;
     end find_channel;

%page;

signal_error:
     procedure options (variable);

	declare alp		 pointer;
	declare cu_$arg_list_ptr	 entry (ptr);
	declare code_ptr		 pointer;
	declare code		 fixed bin (35) based (code_ptr);
	declare cu_$arg_ptr		 entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
	declare ioa_$general_rs	 entry (ptr, fixed bin, fixed bin, char (*), fixed bin (21), bit (1) aligned,
				 bit (1) aligned);

	declare sub_err_		 entry () options (variable);
	declare errormsg		 character (168);
	declare flag		 character (1);
	declare warning		 bit (1) aligned;

	warning = "0"b;
	go to COMMON;
signal_warning:
     entry options (variable);
	warning = "1"b;

COMMON:
	call cu_$arg_list_ptr (alp);

	call cu_$arg_ptr (1, code_ptr, (0), (0));
	call ioa_$general_rs (alp, 2, 3, errormsg, (0), "1"b, "0"b);
	if warning
	then flag = "c";
	else flag = "h";
	call sub_err_ (code, "cdt_mgr_", flag, cdtp, (0), "^a", errormsg);
     end signal_error;

%page;

find_cdt_channel:
     entry (CDT_pointer, Channel_name, Channel_idx, FNP_sw, Code);
	declare (
	        Channel_name	 character (32),
	        Channel_idx		 fixed bin,
	        FNP_sw		 bit (1) aligned
	        )			 parameter;

	cdtp = CDT_pointer;
	call find_channel (Channel_name, Channel_idx, FNP_sw, Code);

RETURN:
	return;

thread_in_cdt_channel:
     entry (CDT_pointer, Channel_idx);
	cdtp = CDT_pointer;
	call thread_in_cdte (Channel_idx);
	cdt.n_cdtes = cdt.n_cdtes + 1;
	return;

thread_out_cdt_channel:
     entry (CDT_pointer, Channel_idx);

	cdtp = CDT_pointer;

	call thread_out_cdte (Channel_idx);
	cdt.n_cdtes = cdt.n_cdtes - 1;
	if Channel_idx = cdt.current_size
	then cdt.current_size = cdt.current_size - 1;
	return;

thread_out_cdte:
     procedure (cdtx);
	declare cdtx		 fixed bin;

	if cdtx < 0
	then call signal_error (error_table_$badcall, "thread_out of a FNP. fnpx = ^d.", -cdtx);

	cdtep = addr (cdt.cdt_entry (cdtx));
	if cdte.threads.prev_sister ^= 0		/* not first in chain */
	then do;
		cdt.cdt_entry (cdte.threads.prev_sister).next_sister = cdte.threads.next_sister;
		if cdte.threads.next_sister ^= 0
		then cdt.cdt_entry (cdte.threads.next_sister).threads.prev_sister = cdte.threads.prev_sister;
	     end;
	else do;					/* head of chain or singleton */
		if cdte.threads.next_sister ^= 0
		then cdt.cdt_entry (cdte.threads.next_sister).prev_sister = 0;
		if cdte.threads.mother < 0		/* FNP */
		then cdt.fnp_entry (-cdte.threads.mother).daughter = cdte.threads.next_sister;
		else if cdte.threads.mother > 0	/* random chn */
		then cdt.cdt_entry (cdte.threads.mother).daughter = cdte.threads.next_sister;
		else if cdte.threads.mother = 0	/* toplevel */
		then cdt.threads.daughter = cdte.threads.next_sister;
	     end;

/**** now to fix mother ****/

	if cdte.threads.mother < 0
	then cdt.fnp_entry (-cdte.threads.mother).daughter_count =
		cdt.fnp_entry (-cdte.threads.mother).daughter_count - 1;
	else if cdte.threads.mother > 0
	then cdt.cdt_entry (cdte.threads.mother).daughter_count =
		cdt.cdt_entry (cdte.threads.mother).daughter_count - 1;
	else cdt.threads.daughter_count = cdt.threads.daughter_count - 1;
     end thread_out_cdte;


%page;
init:
     entry (System_dir, CDT_pointer, Code);

	declare System_dir		 character (*);
	declare CDT		 char (3) init ("cdt") internal static options (constant);

/* initiate the CDT, note that it is initiated, check for damage,
   rethread if there is and caller restarts error. */

/* if it were not for the damn initializer segfault special case, */
/* we could just have a seg_fault_error handler. No */
/* such luck. However, we establish the handler, so that the */
/* change when the faults come back will be small */


	declare initiate_file_	 entry (character (*), character (*), bit (*), pointer, fixed binary (24),
				 fixed binary (35));
	declare terminate_file_	 entry (pointer, fixed binary (24), bit (*), fixed binary (35));
	declare hcs_$force_write	 entry (ptr, bit (36), fixed bin (35));
	declare hcs_$fs_get_path_name	 entry (ptr, char (*), fixed bin, char (*), fixed bin (35));
	declare hcs_$status_long	 entry (char (*), char (*), fixed bin (1), ptr, ptr, fixed bin (35));

	declare seg_fault_error	 condition;
	declare error_table_$seg_busted
				 fixed bin (35) ext static;
	declare as_error_table_$cdt_not_shut_down
				 ext static fixed bin (35);

/* The goal here it to detect inconsistent cdt's without having */
/* to track around checking for inconsistencies. The claim is that */
/* the only way a cdt can get inconsistent is by a crash during installation. */
/* The only way we could detect that, though, is by force_writing some */
/* indication that something was happening whenever an installation was */
/* done. The only existing force_write primitive writes all modified pages, */
/* so the performance penalty would be excessive. Instead, we just detect */
/* any crash in between AS startup and shutdown. In that case, we signal */
/* the need for a salvage. Since a salvage is not that expensive, and */
/* crashes are (cross fingers) fairly rare, this seems appropriate. */
/* the salvaging is not done here. The caller of this entry is expected */
/* to have a sub_error_ handler in which the codes error_table_$seg_busted */
/* and as_error_table_$cdt_not_shut_down are detected. The caller might elect */
/* to give system operations the oportunity to install a cdt instead */
/* of just salvaging this one. */

	cdtp, CDT_pointer = null ();
	Code = 0;

	call initiate_file_ (System_dir, CDT, RW_ACCESS, cdtp, (0), code);

	if code = error_table_$noentry
	then do;
		Code = code;			/* expected possibility */
		return;
	     end;

	if cdtp = null
	then do;
		call signal_error (code, "Could not initiate ^a>^a.", System_dir, CDT);
		Code = code;
		return;
	     end;

	on seg_fault_error
	     begin;
		call signal_error (error_table_$seg_busted, "Damage switch set on ^a>^a.", System_dir, CDT);
/**** if we get here, we are to continue */

	     end;

	if cdt.cdt_is_live
	then do;
		code = as_error_table_$cdt_not_shut_down;
		call signal_error (code, "^a>^a was not shut down in last session.", System_dir, CDT);

/**** if we are returned to, we are to continue. If salvaging was to ****/
/**** be done, caller has done it ****/
	     end;

	cdt.cdt_is_live = "1"b;

	cdt.cdt_entry.iocbp (*) = null ();		/* these must start out null for each bootload */
	cdt.cdt_entry.use_iocb (*) = "0"b;

	call hcs_$force_write (cdtp, (36)"0"b, (0));	/* do the best we can */

/* for now, this will cause mux-mgr to call the thread entrypoint and then */
/* return to us. the reason for this somewhat convoluted approach is */
/* that someday it may be desirable to allow system operations to intervene */
/* before these auto-salvages, perhaps to install a different cdt. */

	if cdt.version ^= CDT_version
	then call signal_error (error_table_$unimplemented_version, "CDT version is ^d, should be ^d.", cdt.version,
		CDT_version);

	CDT_pointer = cdtp;
	Code = 0;
	return;


shut:
     entry (CDT_pointer);				/* orderly shutdown */


	cdtp = CDT_pointer;
	cdt.cdt_is_live = "0"b;
	call terminate_file_ (cdtp, (0), TERM_FILE_TERM | TERM_FILE_FORCE_WRITE, (0));
	CDT_pointer, cdtp = null;
	return;

%page;
%include author_dcl;
%include cdt;
%include dialup_values;
%include access_mode_values;
%include status_structures;
%include terminate_file;
     end cdt_mgr_;
