/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1987 *
        *                                                         *
        *********************************************************** */

/****^  HISTORY COMMENTS:
  1) change(87-03-10,GDixon), approve(87-07-02,MCR7737),
     audit(87-07-24,Brunelle), install(87-08-04,MR12.1-1055):
     Initially written. (Resolves dsa 186.)
  2) change(87-07-02,GDixon), approve(87-07-02,MCR7737),
     audit(87-07-24,Brunelle), install(87-08-04,MR12.1-1055):
     Avoid signalling active_function_error condition when invoked as an active
     function and an error occurs.  The charter of this routine is to print the
     error and return false in this situation.  The error should NOT be printed
     via active_fnc_err_.
                                                   END HISTORY COMMENTS */

ls_request_server:
	proc;
	
dcl	code			fixed bin(35),
	operation			char(5);
	
dcl       null			builtin;
	
dcl	cleanup			condition;

dcl	get_process_id_		entry() returns(bit(36)),
	ls_request_server_$init	entry (fixed bin(35)),
	ls_request_server_$shutdown	entry (fixed bin(35)),
	ls_request_server_$start	entry (fixed bin(35));
	
dcl	ME			char(17) int static options(constant) init("ls_request_server"),
         (error_table_$action_not_performed,
	error_table_$bad_arg,
	error_table_$noarg)		fixed bin(35) ext static;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

	call DATA_init();
	on cleanup call CLEANUP();
	call ARGS_check (ME, "1.0", ALLOW_COMMAND_AF, exit_proc);
	call ARGS_process (operation);
	call USER_check (operation);
	if operation = "start" then do;
	   call ls_request_server_$init (code);
	   call ERR_fatal (sciP, code,
	      "Initializating login server request server.");
	   call ls_request_server_$start (code);
	   call ERR_fatal (sciP, code,
	      "Starting login server request server.");
	   end;
	else if operation = "stop" then do;
	   call ls_request_server_$shutdown (code);
	   call ERR_fatal (sciP, code, 
	      "Stopping login server request server.");
	   end;
	call ARG_set_return_value ("true");
	call CLEANUP();
	return;


/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* EXIT PROCEDURE:						       */
/* 1) This procedure is called by ssu_$abort_subsystem when ERR_fatal is     */
/*    called to report a fatal error.				       */
/* 2) It does a non-local goto to the EXIT label to stop execution of the    */
/*    command.						       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

exit_proc:
	proc;
	go to EXIT;
	end exit_proc;

EXIT:	call ARG_set_return_value ("false");
     	call CLEANUP();
	return;
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* ARGUMENT PROCESSING:					       */
/* Declare variables and subroutines needed for argument processing.	       */
/*							       */
/* SEE ARGUMENT PROCESSING PROGRAMS:				       */
/*   ARGS_check, ARG_get					       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

dcl	af_sw			bit(1) aligned,	/* on: active fnc*/
	arg			char(argl) based(argp),
	argl			fixed bin(21),	/* current arg   */
	argp			ptr,
	argn			fixed bin,	/* arg count     */
	argx			fixed bin,	/* arg index     */
	ret			char(retl) varying based(retp),
	retl			fixed bin(21),	/* af return val */
	retp			ptr,
	sciP			ptr;		/* ssu_ info ptr */

    dcl	ssu_$abort_subsystem	entry() options(variable),
	ssu_$arg_ptr		entry (ptr, fixed bin, ptr, fixed bin(21)),
	ssu_$destroy_invocation	entry (ptr),
	ssu_$print_message		entry() options(variable),
	ssu_$return_arg		entry (ptr, fixed bin, bit(1) aligned, ptr, fixed bin(21)),
       	ssu_$standalone_invocation	entry (ptr, char(*), char(*), ptr,
				     entry, fixed bin(35));

dcl      (ALLOW_COMMAND		init(1),
          ALLOW_AF			init(2),
	ALLOW_COMMAND_AF		init(3)) fixed bin int static options(constant);

/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* CHECK INVOCATION TYPE:					       */
/* 1) Initialize error handling subroutines.			       */
/* 2) Determine whether invoked as command or af.			       */
/* 3) Is this type of invocation allowed?			       */
/* 4) Initialize af return argument, and index of current argument.	       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */


ARGS_check:
	proc (caller, version, allowed, exit_procedure);

dcl	caller			char(*),
	version			char(*),
	allowed			fixed bin,
	exit_procedure		entry parameter;

dcl	code			fixed bin(35);

dcl	com_err_			entry() options(variable),
	cu_$arg_list_ptr		entry returns(ptr);

dcl      (error_table_$active_function,
	error_table_$not_act_fnc)	fixed bin(35) ext static;

	call ssu_$standalone_invocation (sciP, caller, version,
	   cu_$arg_list_ptr(), exit_procedure, code);
	if code ^= 0 then do;
	   call com_err_ (code, caller,
	      "Error creating standalone ssu_ invocation.");
	   call exit_procedure();
	   end;

	call ERR_init();
	call ssu_$return_arg (sciP, argn, af_sw, retp, retl);
	if allowed = ALLOW_COMMAND & af_sw then
	   call ERR_fatal (sciP, error_table_$active_function);
	else if allowed = ALLOW_AF & ^af_sw then
	   call ERR_fatal (sciP, error_table_$not_act_fnc);
	else if allowed = ALLOW_COMMAND_AF then;
	if af_sw then
	   ret = "false";				/* Assume failure*/
	argx = 0;
	end ARGS_check;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* PROCESS INCOMING ARGUMENTS:				       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */


ARGS_process:
       	proc (operation);

dcl	operation			char(5);

	operation = "";
	do while (ARG_get());
	   if arg = "start" then
	      operation = arg;
	   else if arg = "stop" then
	      operation = arg;
	   else call ERR (sciP, error_table_$bad_arg, arg);
	   end;
	if ERR_occurred() then go to EXIT;
	if operation = "" then
	   call ERR_fatal (sciP, error_table_$noarg,
	      "^/An operation must be given.  It can be start or stop.");
	end ARGS_process;


/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* ARGUMENT GETTING FUNCTIONS:				       */
/*  ARG_get: 	Get next argument.				       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

ARG_get:	proc returns (bit(1));

dcl      (FALSE			init("0"b),
	TRUE			init("1"b)) bit(1) int static options(constant);

	if argx < argn then do;
	   argx = argx + 1;
	   call ssu_$arg_ptr (sciP, argx, argp, argl);
	   return (TRUE);
	   end;
	else
	   return (FALSE);
	end ARG_get;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* ARG_set_return_value:					       */
/* 1) Set value of AF return string.  Do nothing if invoked as a command.    */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

ARG_set_return_value:
       	proc (value);

dcl	value			char(*);

	if af_sw then
	   ret = value;

	end ARG_set_return_value;


/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* CLEANUP:						       */
/* 1) Destroy the ssu_ invocation (releasing temp segs obtained thru ssu_).  */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

CLEANUP:	proc ();

	if sciP ^= null then
	   call ssu_$destroy_invocation (sciP);

	end CLEANUP;


/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* DATA INITIALIZATION:					       */
/* 1) Init vars needed by cleanup handler.			       */
/* 2) Init vars used by argument processor.			       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

DATA_init:
	proc;

	sciP = null;
	operation = "";

	end DATA_init;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* ERROR REPORTING ROUTINES:					       */
/* 1) Nonfatal errors set a switch, which can be tested via error_occurred   */
/*    function.						       */
/* 2) Fatal errors abort the subsystem by calling ssu_$abort_subsystem,      */
/*    which calls the main procedure's exit procedure, which branches to the */
/*    EXIT label to exit the command.				       */
/*							       */
/* Both types of errors suppress (catch and do nothing with) the	       */
/* active_function_error condition signalled by ssu_$print_message and       */
/* ssu_$abort_subsystem when invoked as an active function.  Our program     */
/* only prints error messages and returns false value; it should never allow */
/* active_function_error condition to reach the outside environment.	       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

    dcl	error_occurred_sw		bit(1);

ERR: 	proc options (variable);

    dcl	code			fixed bin(35) based (codep),
	codep			ptr;

    dcl	cu_$arg_list_ptr		entry returns(ptr),
	cu_$arg_ptr		entry (fixed bin, ptr, fixed bin(21),
				     fixed bin(35)),
	cu_$generate_call		entry (entry, ptr),
	ioa_			entry() options(variable);

    dcl	CODE_ARG			fixed bin int static options(constant) init(2),
         (FALSE			init("0"b),
	TRUE			init("1"b)) bit(1) int static options(constant);

    dcl	active_function_error	condition;

	call cu_$arg_ptr (CODE_ARG, codep, 0, 0);
	if code = 0 then return;
	if code = -1 then code = 0;
	error_occurred_sw = TRUE;
	on active_function_error;			/* do nothing    */
	call cu_$generate_call (ssu_$print_message, cu_$arg_list_ptr());
	return;

ERR_init:
	entry;

	error_occurred_sw = FALSE;
	return;

ERR_occurred:
	entry returns (bit(1));

	return (error_occurred_sw);

ERR_fatal:
	entry options(variable);
	
	call cu_$arg_ptr (CODE_ARG, codep, 0, 0);
	if code = 0 then return;
	if code = -1 then code = 0;
	error_occurred_sw = TRUE;
	call ioa_ ("");
	on active_function_error;			/* do nothing    */
	call cu_$generate_call (ssu_$abort_subsystem, cu_$arg_list_ptr());
	end ERR;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* USER_check:						       */
/* 1) Make sure user of this program is running in Initializer process.      */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */


USER_check:
       	proc (operation);

dcl	operation			char(5);

	ansp = as_data_$ansp;
	if ansp = null then
BAD_USER:	   call ERR_fatal (sciP, error_table_$action_not_performed,
	      "^/^[Starting^;Stopping^] the ls_request_server_.
This command can only be used in the Initializer process.",
	      operation = "start");
	if get_process_id_() ^= anstbl.as_procid then
	   go to BAD_USER;

	end USER_check;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */
 %include answer_table;
 %include as_data_;
 %include user_table_header;

       end ls_request_server;
