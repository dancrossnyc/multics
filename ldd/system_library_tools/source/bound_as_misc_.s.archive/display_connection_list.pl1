/****^  ********************************************
        *                                          *
        * Copyright, (C) Honeywell Bull Inc., 1987 *
        *                                          *
        ******************************************** */

/****^  HISTORY COMMENTS:
  1) change(87-04-07,Brunelle), approve(87-07-08,MCR7681),
     audit(87-07-22,Hartogs), install(87-08-04,MR12.1-1055):
     New program.
  2) change(87-05-28,GDixon), approve(87-07-08,MCR7720),
     audit(87-07-22,Hartogs), install(87-08-04,MR12.1-1055):
      A) Revised to add selection control arguments and to simplify output
         format.
  3) change(87-06-10,GDixon), approve(87-07-08,MCR7720),
     audit(87-07-22,Hartogs), install(87-08-04,MR12.1-1055):
      A) Correct error in display of aci.network_type.
      B) Correct length computation for aci.offset.
  4) change(87-07-21,GDixon), approve(87-07-21,MCR7720),
     audit(87-07-22,Hartogs), install(87-08-04,MR12.1-1055):
      A) Correct use of magic numbers.
      B) Comment on why capital U is excluded in the vowel routine.
                                                   END HISTORY COMMENTS */

/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* display_connection_list:  a utility to display contents of the	       */
/* active_connection_list table, maintained by the connection_list_manager_  */
/* subsystem.						       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

	

display_connection_list:
     proc;


/* AUTOMATIC */

dcl  brief_sw			bit(1) aligned automatic;
dcl  channel			char(32) automatic;
dcl  code				fixed bin(35) automatic;
dcl  connection			bit(18);
dcl  entry_var			entry variable;
dcl  offset			fixed bin(18) automatic;
dcl  1 owner			aligned automatic,
       2 id			char(32),
       2 person			char(24),
       2 project			char(12),
       2 tag			char(1) unal,
       2 tag_pad			char(3) unal;
dcl  owner_id			fixed bin(36) automatic;
dcl  star_type			fixed bin(2);
dcl  1 user			aligned automatic like owner;
dcl  user_id			fixed bin(36) automatic;
     

/* ENTRIES */

dcl  check_star_name_		entry (char(*), bit(36), fixed bin(2),
				     fixed bin(35));
dcl  hpriv_connection_list_$get_next	entry (bit (18), ptr, fixed bin (35));
dcl  ioa_				entry() options(variable);
dcl  match_star_name_		entry (char(*), char(*),
				     fixed bin(35));


/* BUILTINS AND CONDITIONS */

dcl (addr, after, before, bit, divide, index, length,
     max, null, rtrim, search, substr, verify, unspec)
				builtin;
dcl (cleanup, linkage_error)		condition;


/* INTERNAL STATIC */

dcl  DISPLAY_CONNECTION_LIST_VERSION	init("1.0") char(3) int static
				options(constant);
dcl (FALSE			init("0"b),
     TRUE				init("1"b)) bit(1)
				     int static options(constant);
dcl  ME				char (23) int static options (constant)
				init ("display_connection_list");

/* EXTERNAL STATIC */

dcl (error_table_$bad_arg,
     error_table_$bad_opt,
     error_table_$noentry)		fixed bin(35) ext static;

/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* INVOCATION TYPE AND ARGUMENTS:				       */
/* 1) Initialize variables, and establish cleanup handler.		       */
/* 2) Create standalone ssu_ invocation for argument processing.	       */
/* 3) Initialize argument handling routines.			       */
/* 4) Process input arguments, reporting any errors as they are encountered. */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

     call initialize_args();
     on cleanup call cleanup_invocation();
     call ssu_$standalone_invocation (sci_ptr, ME,
        DISPLAY_CONNECTION_LIST_VERSION, cu_$arg_list_ptr(), exit_proc, code); 
     call check_invocation_type (ALLOW_COMMAND);
     call process_args();
     call scan_connection_list();

/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* REVOCATION AND EXIT:					       */
/*   This point is reached when normal processing completes successfully,    */
/* or when the error$fatal routine is called to abnormally end processing.   */
/*							       */
/* 1) Cleanup the standalone invocation.			       */
/* 2) Return to command processor.				       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

EXIT:
     call cleanup_invocation();
     return;

exit_proc:
     proc;
     go to EXIT;
     end exit_proc;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* ARGUMENT PROCESSING:					       */
/* Declare variables and subroutines needed for argument processing.	       */
/*							       */
/* CHECK INVOCATION TYPE:					       */
/* 1) Initialize error handling subroutines.			       */
/* 2) Determine whether invoked as command or af.			       */
/* 3) Is this type of invocation allowed?			       */
/* 4) Initialize af return argument, and index of current argument.	       */
/*							       */
/* SEE OTHER ARGUMENT PROCESSING PROGRAMS:			       */
/*   get_arg, get_ctl_arg, get_opt, get_num_opt			       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

dcl  af_sw			bit(1) aligned,	/* on: active fnc*/
     arg				char(argl) based(argp),
     argl				fixed bin(21),	/* current arg   */
     argp				ptr,
     argn				fixed bin,	/* arg count     */
     argx				fixed bin,	/* arg index     */
     num_opt			fixed bin,	/* numeric option*/
     opt				char(optl) based(optp),
     optl				fixed bin(21),	/* current option*/
     optp				ptr,
     ret				char(retl) varying based(retp),
     retl				fixed bin(21),	/* af return val */
     retp				ptr,
     sci_ptr			ptr;		/* ssu_ info ptr */

dcl  cu_$arg_list_ptr		entry returns(ptr),
     ssu_$abort_subsystem		entry() options(variable),
     ssu_$arg_ptr			entry (ptr, fixed bin, ptr,
				     fixed bin(21)),
     ssu_$destroy_invocation		entry (ptr),
     ssu_$print_message		entry() options(variable),
     ssu_$return_arg		entry (ptr, fixed bin, bit(1) aligned,
				     ptr, fixed bin(21)),
     ssu_$standalone_invocation	entry (ptr, char(*), char(*), ptr,
				     entry, fixed bin(35));

dcl (ALLOW_COMMAND			init(1),
     ALLOW_AF			init(2),
     ALLOW_COMMAND_AF		init(3)) fixed bin int static options(constant);

check_invocation_type:
     proc (allowed);

dcl  allowed			fixed bin;
dcl (error_table_$active_function,
     error_table_$not_act_fnc)	fixed bin(35) ext static;

     call error$init();
     call ssu_$return_arg (sci_ptr, argn, af_sw, retp, retl);
     if allowed = ALLOW_COMMAND & af_sw then
        call error$fatal (sci_ptr, error_table_$active_function);
     else if allowed = ALLOW_AF & ^af_sw then
        call error$fatal (sci_ptr, error_table_$not_act_fnc);
     else if allowed = ALLOW_COMMAND_AF then;
     if af_sw then
        ret = "";
     argx = 0;
     end check_invocation_type;



/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* CLEANUP:						       */
/* 1) Destroy the ssu_ invocation (releasing temp segs obtained thru ssu_).  */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

cleanup_invocation:
     proc;

     if sci_ptr ^= null then
        call ssu_$destroy_invocation (sci_ptr);
     end cleanup_invocation;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */


/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* display_connection:  Display one matching connection.		       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

dcl  1 begin			aligned automatic,
       2 (connection, network, usage, user, process_id) fixed bin;
dcl  matching_entries		fixed bin;
dcl  need_heading			bit(1) aligned automatic;
dcl  1 width			aligned automatic,
       2 (offset, connection, network, usage, user)
				fixed bin;

display_connection:
     procedure;

     matching_entries = matching_entries + 1;

     if brief_sw then do;
        if need_heading then do;
	 call ioa_ (
	    "^/AT^vtCONNECTION^vtNET^vtUSAGE^vtUSER^vtPROCESS ID",
	    begin.connection, begin.network, begin.usage, begin.user,
	    begin.process_id);
	 need_heading = "0"b;
	 end;
        call ioa_ ("^vo^vt^a^vt^a^vt^a^vt^a^vt^12.3b",
	 width.offset, unspec(aci.offset),
	 begin.connection, aci.connection_name,
	 begin.network, aci.network_service_type,
	 begin.usage, LS_USAGE_VALUES (aci.usage_type),
	 begin.user, aci.user_group_id,
	 begin.process_id, aci.user_process_id);
        end;

     else do;
        call ioa_ ("");
        call ioa_ ("Offset:              ^6.3b^25x Usage:  ^d (^a)",
	 aci.offset, aci.usage_type,
	 LS_USAGE_VALUES (aci.usage_type));
        call ioa_ ("Connection name:     ^32a  Net:  ^a", aci.connection_name,
	 aci.network_service_type);
        call ioa_ ("Connection handle:   ^w",
	 aci.connection_handle);
        call ioa_ ("User name:           ^32a  PID:  ^12.3b",
	 aci.user_group_id, aci.user_process_id);
        call ioa_ ("Owner name:          ^32a  PID:  ^12.3b",
	 aci.owner_group_id, aci.owner_process_id);
        call ioa_ ("Initializer handle:  ^24.3b",
	 aci.owner_initializer_handle);
        call ioa_ ("Terminate event chn: ^24.3b",
	 unspec(aci.terminate_event_channel));
        call ioa_ ("Disconnect entry:    ^a",
	 aci.force_disconnect_entry);
        call ioa_ ("Accounting entry:    ^a",
	 aci.force_accounting_flush_entry);
        end;
     return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */


display_connection$init:
     entry;

     matching_entries = 0;
     need_heading = TRUE;
     width.offset = length("AT");
     width.connection = length("CONNECTION");
     width.network = length("NET");
     width.usage = length("USAGE");
     width.user = length("USER");
     begin = 0;
     return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */


display_connection$matching_entry_count:
     entry returns (fixed bin);

     return (matching_entries);

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */


display_connection$set_widths:
     entry;

dcl (BITS_PER_OCTAL_DIGIT		init(3),
     GUTTER			init(2),
     STARTING_COLUMN		init(1))
				fixed bin int static
				options(constant);

     width.offset = max (width.offset,
        divide(length(aci.offset)-index(aci.offset,"1"b)+1 +
        BITS_PER_OCTAL_DIGIT-1,			/* round to next */
        BITS_PER_OCTAL_DIGIT, 17, 0));			/*  octal digit  */
     width.connection = max (width.connection,
        length(rtrim(aci.connection_name)));
     width.network = max (width.network,
        length(rtrim(aci.network_service_type)));
     width.usage = max (width.usage, length(LS_USAGE_VALUES(aci.usage_type)));
     width.user = max (width.user, length(rtrim(aci.user_group_id)));
     begin.connection = STARTING_COLUMN + width.offset + GUTTER;
     begin.network = begin.connection + width.connection + GUTTER;
     begin.usage = begin.network + width.network + GUTTER;
     begin.user = begin.usage + width.usage + GUTTER;
     begin.process_id = begin.user + width.user + GUTTER;
     return;

     end display_connection;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* ERROR REPORTING ROUTINES:					       */
/* 1) Nonfatal errors set a switch, which can be tested via error_occurred   */
/*    function.						       */
/* 2) Fatal errors abort the subsystem by calling the exit_proc, which       */
/*    branches to the EXIT label to exit the command.		       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

dcl  error_occurred_sw		bit(1);

error:
     proc options (variable);

dcl  code				fixed bin(35) based (codep),
     codep			ptr;

dcl  cu_$arg_list_ptr		entry returns(ptr),
     cu_$arg_ptr			entry (fixed bin, ptr, fixed bin(21),
				     fixed bin(35)),
     cu_$generate_call		entry (entry, ptr);

dcl  CODE_ARG			fixed bin int static options(constant) init(2),
    (FALSE			init("0"b),
     TRUE				init("1"b)) bit(1) int static options(constant);

     call cu_$arg_ptr (CODE_ARG, codep, 0, 0);
     if code = 0 then return;
     if code = -1 then code = 0;
     error_occurred_sw = TRUE;
     call cu_$generate_call (ssu_$print_message, cu_$arg_list_ptr());
     return;

error$init:
     entry;

     error_occurred_sw = FALSE;
     return;
	

error$occurred:
     entry returns (bit(1));

     return (error_occurred_sw);
	

error$fatal:
     entry options(variable);
	
     call cu_$arg_ptr (CODE_ARG, codep, 0, 0);
     if code = 0 then return;
     if code = -1 then code = 0;
     error_occurred_sw = TRUE;
     call ioa_ ("");
     call cu_$generate_call (ssu_$abort_subsystem, cu_$arg_list_ptr());
     end error;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* ARGUMENT GETTING FUNCTIONS:				       */
/*  get_arg: 	Get next argument.				       */
/*  get_arg_count:	Get number of arguments.			       */
/*  get_ctl_arg:	Get next argument, which must be a control argument.     */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

get_arg:
     proc returns (bit(1));

dcl (FALSE			init("0"b),
     TRUE				init("1"b)) bit(1) int static options(constant);

     if argx < argn then do;
        argx = argx + 1;
        call ssu_$arg_ptr (sci_ptr, argx, argp, argl);
        return (TRUE);
        end;
     else
        return (FALSE);
     end get_arg;


get_ctl_arg:
     proc returns (bit(1));

dcl  index			builtin;

dcl (FALSE			init("0"b),
     TRUE				init("1"b)) bit(1) int static options(constant),
     error_table_$bad_arg		fixed bin(35) ext static;

     if get_arg() then
        if index(arg, "-") = 1 then
        return (TRUE);
     else
        call error$fatal (sci_ptr, error_table_$bad_arg,
        "^a.^/A control argument was expected.", arg);
     return (FALSE);
     end get_ctl_arg;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* CONTROL ARG OPERAND GETTING FUNCTIONS:			       */
/*  get_oct_opt:  Gets next arg, treats it as an octal integer operand.      */
/*  get_opt:      Gets next arg.				       */
/*							       */
/* Both allow the caller to specify whether the operand is required (an      */
/* opt_desc is provided) or optional (opt_desc="").		       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */


get_oct_opt:
     proc (arg_name, opt_desc) returns (bit(1));

dcl  arg_name			char(*),
     opt_desc			char(*);

dcl  code				fixed bin(35);

dcl  cv_oct_check_			entry (char(*), fixed bin(35))
				     returns(fixed bin(35));

dcl  FALSE			init("0"b) bit(1)
				     int static options(constant),
    (error_table_$bad_arg,
     error_table_$noarg)		fixed bin(35) ext static;

     if argx < argn then do;
        argx = argx + 1;
        call ssu_$arg_ptr (sci_ptr, argx, optp, optl);
        if verify (opt, "01234567") > 0 then go to BAD_OPT;
        num_opt = cv_oct_check_ (opt, code);
        if code ^= 0 then do;
BAD_OPT:	 call error (sci_ptr, error_table_$bad_arg,
	    "^a ^a
^a must be followed by a^[n^] ^a.",
	    arg_name, opt, arg_name,
	    vowel(opt_desc), opt_desc);
	 return (FALSE);
	 end;
        else return (TRUE);
        end;
     else if opt_desc ^= "" then do;
        call error (sci_ptr, error_table_$noarg,
	 "^/^a must be followed by a^[n^] ^a.", arg_name,
	 vowel(opt_desc), opt_desc);
        return (FALSE);
        end;
     else return (FALSE);
     end get_oct_opt;

get_opt:
     proc (arg_name, opt_desc) returns (bit(1));

dcl  arg_name			char(*),
     opt_desc			char(*);

dcl (FALSE			init("0"b),
     TRUE				init("1"b)) bit(1) int static options(constant),
     error_table_$noarg		fixed bin(35) ext static;

     if argx < argn then do;
        argx = argx + 1;
        call ssu_$arg_ptr (sci_ptr, argx, optp, optl);
        if index(opt, "-") = 1 then do;			/* options cannot*/
	 argx = argx - 1;				/*  look like    */
	 go to NO_OPT;				/*  control args */
	 end;
        else
	 return (TRUE);
        end;

     else
NO_OPT:
     if opt_desc ^= "" then do;
        call error (sci_ptr, error_table_$noarg,
	 "^/^a must be followed by a^[n^] ^a.", arg_name,
	 vowel(opt_desc), opt_desc);
        return (FALSE);
        end;
     return (FALSE);
     end get_opt;


vowel:
     proc (str) returns (bit(1));			/* does opt_desc */
						/* begin with a  */
						/* vowel?	       */

dcl  str				char(*),
    (FALSE			init("0"b),
     TRUE				init("1"b)) bit(1) int static options(constant);

     if search ("aeiouAEIO", substr(str,1,1)) > 0 then	/* Leave out U:  */
        return (TRUE);				/* "an User..."  */
     else						/* is un-American*/
        return (FALSE);				/* This is kludgy*/
     end vowel;					/*  but it works.*/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */


group_id:
     procedure (arg) returns (1 like owner);

dcl  arg				char(*);
dcl  1 group			aligned automatic like owner;

     group.id = arg;
     group.person = before(arg,".");
     if group.person = "" then group.person = "*";
     group.project = before(after(arg,"."),".");
     if group.project = "" then group.project = "*";
     group.tag = after(after(arg,"."),".");
     if group.tag = "" then group.tag = "*";
     return (group);

     end group_id;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* INITIALIZATION.						       */
/* 1) Initialize variables holding argument values.		       */
/* 2) Initialize ssu_ info pointer.				       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

initialize_args:
     proc;

     brief_sw = TRUE;
     user, owner, channel = "";
     user_id, owner_id, offset = 0;

     call display_connection$init();

     sci_ptr = null;

     end initialize_args;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* matching_entry: return TRUE if active_connection_list entry match the     */
/* criteria given in input control args.  Otherwise, return FALSE.	       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

matching_entry:
     procedure returns (bit(1));

dcl  match			bit(1);

     match = TRUE;
     if offset ^= 0 & match then
        match = (aci.offset = bit(offset));

     if user_id ^= 0 & match then
        match = (aci.user_process_id = bit(user_id));

     if owner_id ^= 0 & match then
        match = (aci.owner_process_id = bit(owner_id));

     if owner.id ^= "" & match then do;
        if owner.person ^= "*" then
	 match = (owner.person = before(aci.owner_group_id,"."));
        if owner.project ^= "*" & match then
	 match = 
	 (owner.project = before(after(aci.owner_group_id,"."),"."));
        if owner.tag ^= "*" & match then
	 match =
	 (owner.tag = after(after(aci.owner_group_id,"."),"."));
        end;

     if user.id ^= "" & match then do;
        if user.person ^= "*" then
	 match = (user.person = before(aci.user_group_id,"."));
        if user.project ^= "*" & match then
	 match = 
	 (user.project = before(after(aci.user_group_id,"."),"."));
        if user.tag ^= "*" & match then
	 match =
	 (user.tag = after(after(aci.user_group_id,"."),"."));
        end;
     
     if channel ^= "" & match then do;
        call match_star_name_ ((aci.connection_name), channel, code);
        match = (code = 0);
        end;

     return (match);

     end matching_entry;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* only_one_entry_matches: returns TRUE if -at was given, because then at    */
/* most one connection list entry will match.			       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

only_one_entry_matches:
     proc returns (bit(1));

     return (offset ^= 0);

     end only_one_entry_matches;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* PROCESS ARGUMENTS					       */
/* 1) Match argument to ctl_arg name and operands.		       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

process_args:
     proc;

CTL_ARG_LOOP:
     do while (get_ctl_arg ());

        if arg = "-brief" | arg = "-bf" then
	 brief_sw = TRUE;
        else if arg = "-long" | arg = "-lg" then
	 brief_sw = FALSE;

        else if arg = "-owner" then do;
	 if get_opt (arg, "Owner's group id") then
	    owner = group_id (opt);
	 end;

        else if arg = "-owner_id" then do;
	 if get_oct_opt (arg, "octal process id") then
	    owner_id = num_opt;
	 end;

        else if arg = "-user" then do;
	 if get_opt (arg, "User's group id") then
	    user = group_id (opt);
	 end;

        else if arg = "-user_id" | arg = "-pid" |
	      arg = "-process_id" | arg = "-processid" then do;
	 if get_oct_opt (arg, "octal process id") then
	    user_id = num_opt;
	 end;

        else if arg = "-at" | arg = "-offset" | arg = "-ofs" then do;
	 if get_oct_opt (arg, "octal offset of connection list entry") then
	    offset = num_opt;
	 end;

        else if arg = "-channel" | arg = "-chn" then do;
	 if get_opt (arg, "channel number") then do;
	    channel = opt;
	    call check_star_name_ (channel, CHECK_STAR_ENTRY_DEFAULT,
	       star_type, code);
	    call error (sci_ptr, code, "^a ^a", arg, opt);
	    if star_type = STAR_TYPE_MATCHES_EVERYTHING then
	       channel = "";
	    end;
	 end;

        else if index (arg, "-") ^= 1 then
	 call error (sci_ptr, error_table_$bad_arg, "^a
Usage: ^a {-control_args}", arg, ME);

        else
	 call error (sci_ptr, error_table_$bad_opt, "^a", arg);
        end CTL_ARG_LOOP;

     if error$occurred() then				/* stop now if   */
        call error$fatal (sci_ptr, -1);			/* ctl arg errs  */

     end process_args;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* scan_connection_list:  Walk through connection list entries, displaying   */
/* those that match the user's criteria.			       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

scan_connection_list:
     procedure;

     on linkage_error begin;
        call error$fatal (sci_ptr, -1,
	 "Incorrect access to the hpriv_connection_list_ gate.");
        end;
     entry_var = hpriv_connection_list_$get_next;		/* force linkage */
     revert linkage_error;				/* error now.    */

     unspec (aci) = ""b;				/* start with return structure clean */
     aci.version = ACT_INFO_VERSION_1;
     connection = "0"b;				/* get 1st entry */

     if brief_sw then do;
        call hpriv_connection_list_$get_next (connection, addr (aci),
	 code);
        do while (code = 0);
	 if matching_entry() then do;
	    call display_connection$set_widths();
	    if only_one_entry_matches() then
	       call display_connection();
	    else
	       code = error_table_$noentry;
	    end;
	 connection = aci.offset;			/* get next entry*/
	 call hpriv_connection_list_$get_next (connection, addr (aci),
	    code);
	 end;
        end;
     else code = error_table_$noentry;

     if code ^= error_table_$noentry then;
     else if brief_sw & only_one_entry_matches() then;
     else do;
        connection = "0"b;				/* get 1st entry */
        call hpriv_connection_list_$get_next (connection, addr (aci),
	 code);
        do while (code = 0);
	 if matching_entry() then do;
	    call display_connection();
	    if only_one_entry_matches() then
	       code = error_table_$noentry;
	    end;
	 connection = aci.offset;			/* get next entry*/
	 call hpriv_connection_list_$get_next (connection, addr (aci),
	    code);
	 end;
        end;

     if code ^= error_table_$noentry then
        call error$fatal (sci_ptr, code, "Getting connection list entries.");

     if display_connection$matching_entry_count() = 0 then
        call error$fatal (sci_ptr, -1,
        "No matching connection list entries were found.");

     end scan_connection_list;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */
 %include active_connection_info;

dcl  1 aci			aligned like active_connection_info automatic;
 %include check_star_name;
 %include ls_usage_types;

     end display_connection_list;
