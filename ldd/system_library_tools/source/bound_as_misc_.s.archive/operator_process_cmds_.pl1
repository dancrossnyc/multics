/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1985 *
        *                                                         *
        *********************************************************** */

/****^  HISTORY COMMENTS:
  1) change(85-12-05,MSharpe), approve(87-07-09,MCR7690),
     audit(87-05-07,Parisek), install(87-08-04,MR12.1-1055):
     Original coding.  Moved the process-related commands out of admin_.
     Added functionality to these commands to recognize dsa channel names
     on the command line and to bump by process_id.  The structure of the
     original programs has been heavily modified.
     CDD 86-03-11 - fixed bugs in bumping by PID
     86-03-12     - fixed bug in reporting dsa channel name; to accept
      the first 6 digits of pid.
  2) change(87-04-26,GDixon), approve(87-07-09,MCR7690),
     audit(87-05-07,Parisek), install(87-08-04,MR12.1-1055):
     Upgraded for change to answer_table.incl.pl1 and user_table_entry.incl.pl1
  3) change(87-05-28,Parisek), approve(87-07-09,MCR7690),
     audit(87-08-03,Beattie), install(87-08-04,MR12.1-1055):
     Correct an incorrectly formatted ioa_ control string.
  4) change(87-06-29,Parisek), approve(87-06-29,MCR7690),
     audit(87-08-03,Beattie), install(87-08-04,MR12.1-1055):
     Ignore error_table_$action_not_performed returned from asu_$bump_user if
     dsa channel.
  5) change(88-08-18,Parisek), approve(88-09-08,MCR7979),
     audit(88-09-08,Farley), install(88-09-09,MR12.2-1101):
     Bump dsa starname channels (ie, dsa.MULF.*) if code returned from
     match_star_name_ is zero, not non-zero (bug).  If bumping based on
     code ^= 0 then all users will get bumped instead of the specified
     dsa channels.
  6) change(89-04-20,Lee), approve(89-05-10,MCR8106), audit(89-05-11,Farley),
     install(89-06-07,MR12.3-1053):
     Modified to ensure arg_index and bump_by_name are initialized properly
     after the target specifier gets parsed and "mpx" or "fnp" was specified
     for the target; modified bump to not treat bump *.* as taking the action
     "shutdown"; no code had existed to handle "shutdown" so bump was failing.
     Cosmetic changes to this fix based on Paul Farley's original solution,
     which was developed independently.
                                                   END HISTORY COMMENTS */
/* format: style4,indattr */

operator_process_cmds_:
	procedure ();

/* The following five entry points provide commands to change the state of
   a tty channel and/or the process using the channel: detach, terminate,
   bump, unbump.

   The programs share common code and usage (except that only bump accepts
   a grace time argument). The usage is:
   *	COMMAND  PERS PROJ GRACETIME MESSAGE...
   *	   "     CHANNEL               "
   *	   "     fnp TAG               "

   where PERS and PROJ can be "*" indicating "all".

   These commands operate by sending a wakeup with the action word (bump,
   unbump, detach, terminat, hangup) being contained in the event message.

   The wakeup is handled by dialup_, which takes the action specified by
   the action word.  The warning message, if any, is printed on the user's
   terminal before the wakeup is sent.  If the process is not past the
   login stage, hcs_$wakeup is used to send the wakeup.  Otherwise,
   asu_$bump_user is called, and that procedure sets ate.preempted = 2,
   prints the message, and sets an event timer to go off when the specified
   grace time has expired.  The event message will be "alarm___" in this
   case, but dialup_ detects a bump by seeing that ate.preempted > 0.  The
   unbump code in dialup_ just sets ate.preempted = 0, so that when the
   alarm___ goes off, dialup_ returns instead of bumping the user.
   
   The command arguments are processed as follows:

    #of components	      arg		category to bump by
     (#of dots +1)
	 1	    fnp  or
		    mpx 		mpx -- the next arg is mpx name

	 2	    *.*		name
	 2	    dsa.{anything}	first by name, if not, by dsa channel
	 2	    {any other}	first by name, if not, by tty channel

	 3+	    dsa.{anything}	by dsa channel
	 3+	    {any other}	by tty channel

   If the "bump" command is issued, the next argument is tested for a
   numeric value -- number of minutes of grace time.  The rest of the
   arguments are strung together and displayed on the user's terminal
   before he's bumped.

*/


%page;

/*  AUTOMATIC */

dcl  action	        char (8) aligned;
dcl  action_log	        char (12) aligned;
dcl  answer	        char (256) init ("");
dcl  arg_count	        fixed bin (17);
dcl  arg_index	        fixed bin (17);
dcl  arg_length	        fixed bin (21);
dcl  arg_list_ptr	        ptr;
dcl  arg_ptr	        ptr;
dcl  bin_pid	        fixed bin (35);
dcl  bump_by_chn_id	        bit (1);
dcl  bump_by_dsa	        bit (1);
dcl  bump_by_mpx	        bit (1);
dcl  bump_by_name	        bit (1);
dcl  bump_by_pid	        bit (1);
dcl  code		        fixed bin (35);
dcl  comname	        char (48) aligned varying;
dcl  fnp_only	        bit (1);
dcl  input_channel	        char (32);			/* channel id to look for */
dcl  input_person_id        char (28);			/* person id to look for */
dcl  input_pid	        bit (36);			/* proc_id to look for */
dcl  input_project_id       char (28);			/* proj id to look for */
dcl  msg_string	        char (256);
dcl  msg_string_len	        fixed bin;			/* actual length of msg_string */
dcl  mpx_name	        char (32);			/* name of a mltiplexer */
dcl  mpx_starname	        char (32);
dcl  respect_nobump	        bit (1);
dcl  grace_period	        fixed bin;

/* BASED */

dcl  arg		        char (arg_length) based (arg_ptr);

/* BUILTIN */

dcl  (addr, index, length, null, rtrim, substr, unspec) builtin;


/* ENTRY */

dcl  asu_$blast_user        entry (ptr, char (*), char (*), fixed bin (35));
dcl  asu_$bump_user	        entry (ptr, char (*), fixed bin (35), fixed bin);
dcl  asu_$unbump_user       entry (ptr, fixed bin (35));
dcl  asu_$terminate_user    entry (ptr, fixed bin (35));
dcl  asu_$detach_user       entry (ptr, fixed bin (35));
dcl  asu_$disconnect_user   entry (ptr, fixed bin (35));
dcl  cu_$arg_count_rel      entry (fixed bin, ptr, fixed bin (35));
dcl  cu_$arg_list_ptr       entry () returns (ptr);
dcl  cu_$arg_ptr_rel        entry (fixed bin, ptr, fixed bin (21),
		        fixed bin (35), ptr);
dcl  cv_dec_check_	        entry (char (*), fixed bin (35))
		        returns (fixed bin (35));
dcl  cv_oct_check_	        entry (char (*), fixed bin (35))
		        returns (fixed bin (35));
dcl  get_process_id_        entry () returns (bit (36));
dcl  hcs_$initiate	        entry (char (*), char (*), char (*), fixed bin (1),
		        fixed bin (2), ptr, fixed bin (35));
dcl  hcs_$wakeup	        entry (bit (36) aligned, fixed bin (71), fixed bin (71), fixed bin (35));
dcl  ioa_$rsnnl	        entry options (variable);
dcl  match_star_name_       entry (char (*), char (*), fixed bin (35));
dcl  sys_log_$command       entry options (variable);
dcl  sys_log_$command_error entry options (variable);

/* Static */

dcl  error_table_$action_not_performed fixed bin (35) ext static;

%page;

detach: entry options (variable);

/**** This entry implements the operator "detach" command.  It forceably
      logs out a user and makes the tty unresponsive */

	arg_list_ptr = cu_$arg_list_ptr ();
	call process_bump_args (arg_list_ptr, ""b);

	action = "detach";
	action_log = "detached";
	comname = "operator_process_cmds_: detach";

	call process_bump_args (arg_list_ptr, ""b);

	respect_nobump = ""b;
	call bump_procedure ();

	go to RETURN;

%page;
terminate: entry options (variable);

/**** This entry implements the operator "terminate" command.  It forceably
       terminates the user's process and creates a new one */


	arg_list_ptr = cu_$arg_list_ptr ();

	action = "terminat";
	action_log = "terminated";
	comname = "operator_process_cmds_: terminate";

	call process_bump_args (arg_list_ptr, ""b);

	respect_nobump = ""b;
	call bump_procedure ();

	go to RETURN;

%page;
bump: entry options (variable);

/**** This entry implements the operator "bump" command.  It forceably
      logs out a user. */

	arg_list_ptr = cu_$arg_list_ptr ();

	action = "bump    ";
	action_log = "bumped";
	comname = "operator_process_cmds_: bump";

	call process_bump_args (arg_list_ptr, "1"b);

	respect_nobump = "1"b;

	call bump_procedure ();

	go to RETURN;
%page;
unbump: entry options (variable);

/**** This entry implements the operator "unbump" command.  */

	arg_list_ptr = cu_$arg_list_ptr ();

	action = "unbump";
	action_log = "unbumped";
	comname = "operator_process_cmds_: unbump";

	call process_bump_args (arg_list_ptr, ""b);

	respect_nobump = ""b;
	call bump_procedure ();

	go to RETURN;
%page;
disconnect: entry options (variable);

/**** This entry implements the operator "disconnect" command.  It
      causes a hangup to be simulated for the user's channel which
      either disconnects, or logs out the user. */

	arg_list_ptr = cu_$arg_list_ptr ();

	action = "hangup";
	action_log = "disconnected";
	comname = "operator_process_cmds_: disconnect";

	call process_bump_args (arg_list_ptr, ""b);

	respect_nobump = ""b;
	call bump_procedure ();

	go to RETURN;

%page;
/*   THAT'S IT FOLKS!   */

ERROR_RETURN:
	call sys_log_$command_error (SL_TYPE, code, comname, answer);
	go to RETURN;

ANSWER_RETURN:
	call sys_log_$command (SL_TYPE, "^a: error: ^a", comname, answer);
	go to RETURN;

RETURN:
	return;					/* almost all entries exit here */

/* Internal Procedures */
%page;

general_setup:
     proc ();

	if ^sc_stat_$Multics_typed
	then as_data_$sysdir = sc_stat_$sysdir;

	if as_data_$ansp = null
	then do;
	     call hcs_$initiate (sysdir, "answer_table", "", 0, 0,
		as_data_$ansp, code);
	     as_procid = get_process_id_ ();
	     if as_data_$ansp = null
	     then do;
		call sys_log_$command_error (SL_LOG_BEEP, code, comname,
		     "^a>answer_table", sysdir);
		go to RETURN;
	     end;
	end;
	ansp = as_data_$ansp;

	if whoptr = null
	then do;
	     call hcs_$initiate (sysdir, "whotab", "", 0, 0, whoptr, code);
	     if whoptr = null
	     then call sys_log_$command_error (SL_LOG_BEEP, code, comname,
		     "^a>whotab", sysdir);
	end;

	if ip = null
	then do;
	     call hcs_$initiate (sysdir, "installation_parms", "",
		0, 1, ip, code);
	     if ip = null
	     then call sys_log_$command_error (SL_LOG_BEEP, code, comname,
		"^a>installation_parms", sysdir);
	end;

	if scdtp = null
	then do;
	     call hcs_$initiate (sysdir, "cdt", "", 0, 1, scdtp, code);
	     if scdtp = null
	     then call sys_log_$command_error (SL_LOG_BEEP, code, comname,
		     "^a>cdt", sysdir);
	end;

	call cu_$arg_count_rel (arg_count, arg_list_ptr, (0));
						/* AF invocation not an issue */
	return;					/* end of setup */

     end general_setup;
%page;
build_string:
     proc (P_arg_list_ptr, P_argno);

dcl  P_arg_list_ptr	        pointer parameter;
dcl  P_argno	        fixed bin parameter;		/* arg number to start from */
dcl  argno	        fixed bin;

	argno = P_argno;
	answer = "Incorrect number of arguments.";
	call cu_$arg_ptr_rel (argno, arg_ptr, arg_length, code,
	     P_arg_list_ptr);

	if code ^= 0
	then go to ERROR_RETURN;

	msg_string = arg;
	msg_string_len = arg_length;

build:
	argno = argno + 1;
	call cu_$arg_ptr_rel (argno, arg_ptr, arg_length, code,
	     P_arg_list_ptr);

	if code ^= 0 then return;

	substr (msg_string, msg_string_len + 2) = arg;
	msg_string_len = msg_string_len + 1 + arg_length;
	if msg_string_len > length (msg_string)
	then return;

	go to build;

     end build_string;
%page;
process_bump_args: procedure (arg_list_ptr, grace_flag);

/* Internal procedures should not call this procedure.  Instead, they
   should call internal_bump, or a program like it, which will call us.  */

dcl  arg_list_ptr	        ptr parameter;		/* pointer to our caller's argument list */
dcl  grace_flag	        bit (1) aligned parameter;
						/* grace period arg allowed ? (Input) */


dcl  i		        fixed bin (17);		/* temporary */
dcl  dot_index	        fixed bin (17);

	call general_setup;				/* locate answer table; some housekeeping */

	bump_by_chn_id, bump_by_dsa, bump_by_mpx,
	     bump_by_pid = ""b;			/* set switches ... */
	bump_by_name = "1"b;			/* we'll try by_name unless proven innocent! */

	call cu_$arg_ptr_rel (1, arg_ptr, arg_length, code, arg_list_ptr);
						/* get first argument */
	if code ^= 0 then do;
BUMP_ETC_USAGE:
	     call ioa_$rsnnl ("Usage: ^a (Person.Project|CHANNEL|mpx MPX|-pid PID) {TIME MESSAGE}",
		answer, (0), comname);
	     go to ANSWER_RETURN;
	end;

	if substr (arg, 1, 9) = "anonymous"
	then do;
	     input_person_id = substr (arg, 1, 9);
	     if (arg_length > 10) & (index (arg, ".") = 10)
	     then input_project_id = substr (arg, 11);
	     else goto BUMP_ETC_USAGE;
	end;

	dot_index = index (arg, ".");

	if dot_index = 0 then do;			/* only by mpx, fnp */
	     if arg = "fnp" | arg = "mpx"
	     then do;
		fnp_only = (arg = "fnp");
		input_person_id = arg;		/* for use in error messages */
		call get_mpx_name (2);		/* Multiplexer name should be arg 2 */
		bump_by_mpx = "1"b;
		input_project_id = rtrim(mpx_name);
		input_channel = "";
		mpx_starname = rtrim (mpx_name) || ".**";
	     end;
	     else if (arg = "-process_id") | (arg = "-pid")
	     then do;
		call cu_$arg_ptr_rel (2, arg_ptr, arg_length, code,
		     arg_list_ptr);			/* get process_id */
		if code ^= 0 then goto BUMP_ETC_USAGE;

		if arg_length ^= 6 & (arg_length ^= 12)
		then goto PID_ERR;
		bin_pid = cv_oct_check_ ((arg), code);	/* octal number? */
		if code = 0
		then do;
		     bump_by_pid = "1"b;
		     input_pid = ""b;
		     if arg_length = 12
		     then input_pid = unspec (bin_pid);
		     else substr (input_pid, 1, 18) = substr (unspec (bin_pid), 19);
		end;
		else do;
PID_ERR:		     answer = "Invalid process id: "|| arg || ".  Use the first 6 or all 12 digits of the pid.";
		     goto ERROR_RETURN;
		end;
	     end;

	     else do;
		call ioa_$rsnnl (
		     "Usage: ^a (Person.Project|CHANNEL|mpx MPX) {TIME MESSAGE}^/The ""Person Project"" format is obsolete.",
		     answer, (0), comname);
		go to ANSWER_RETURN;
	     end;

	     arg_index = 3;				/* grace time, or message, if any, starts with arg 3 */
	     bump_by_name = ""b;

	end;

	else do;
	     input_person_id = substr (arg, 1, dot_index - 1);
	     input_project_id = substr (arg, dot_index + 1);

	     if index (input_project_id, ".") ^= 0	/* if more than two components ... */
	     then do;
		bump_by_name = ""b;			/* it can't be by_name;  */
		input_channel = arg;
	     end;
						/* else, first try by_name, then by tty or dsa channel */
	     if arg ^= "*.*"
	     then do;
		input_channel = arg;

		if input_person_id = "dsa"		/* check first component */
		then bump_by_dsa = "1"b;
		else bump_by_chn_id = "1"b;
	     end;

	     arg_index = 2;
	end;

	grace_period = 0;				/* zero grace */
	msg_string = "";				/* blank message */

	if grace_flag
	then do;
	     call cu_$arg_ptr_rel (arg_index, arg_ptr, arg_length, code,
		arg_list_ptr);			/* grace period? (minutes) */
	     if code = 0
	     then do;
		i = cv_dec_check_ ((arg), code);
						/* number? */
		if code = 0
		then do;				/* yes. */
		     grace_period = i * 60;		/* convert to seconds */
		     arg_index = arg_index + 1;
						/* step argument index */
		end;
	     end;
	end;

	call cu_$arg_ptr_rel (arg_index, arg_ptr, arg_length, code,
	     arg_list_ptr);				/* message? */


	if code = 0
	then call build_string (arg_list_ptr, arg_index); /* get any remaining args and make message */

	return;

     end process_bump_args;
%page;

get_mpx_name:
     proc (argno);

dcl  argno	        fixed bin;

	call cu_$arg_ptr_rel (argno, arg_ptr, arg_length, code, arg_list_ptr);
	if code ^= 0 then do;
	     if fnp_only
	     then answer = "No FNP tag specified";
	     else answer = "No multiplexer specified";
	     go to ANSWER_RETURN;
	end;

	mpx_name = arg;
	if fnp_only then do;			/* extra checks to be compatable with old commands */
	     if length (rtrim (mpx_name)) > 1
	     then do;
bad_mpx_fnp_name:
		answer = "Invalid FNP tag: " || mpx_name;
		go to ANSWER_RETURN;
	     end;

	     if index ("abcdefgh", substr (mpx_name, 1, 1)) = 0
	     then go to bad_mpx_fnp_name;
	end;

	return;

     end get_mpx_name;

%page;
bump_procedure:
     proc ();

dcl  action_flag	        bit (1) aligned;
dcl  bin_action	        fixed bin (71) aligned based;
dcl  continue	        bit (1);
dcl  i		        fixed bin;

	action_flag = ""b;
	cdtep = null ();
	code = 0;
TRY_AGAIN:
	continue = "1"b;
	if bump_by_name
	then do i = 1 to anstbl.current_size while (continue);
	     utep = addr (anstbl.entry (i));
	     if ute.active >= NOW_LOGGED_IN
	     then do;
		if input_person_id = ute.person | input_person_id = "*"
		then if input_project_id = ute.project | input_project_id = "*"
		     then do;
			bump_by_chn_id, bump_by_dsa = ""b; /* it WAS by name after all */
			call PROCESS_UTE ();
			if input_person_id ^= "*" & input_project_id ^= "*"
			then continue = "0"b;
						/* no need to go further */
		     end;
	     end;
	end;


	else if bump_by_dsa
	then do i = 1 to anstbl.current_size while (continue);
	     utep = addr (anstbl.entry (i));
	     if ute.active >= NOW_LOGGED_IN
	     then do;
		if index (input_channel, "*") > 0
		then do;
		     call match_star_name_ ((ute.tty_name), input_channel, code);
		     if code = 0
		     then call PROCESS_UTE ();
		end;
		else do;				/* no stars */
		     if input_channel = ute.tty_name
		     then do;
			call PROCESS_UTE ();
			continue = "0"b;		/* no need to go further */
		     end;
		end;
	     end;					/* not logged in, skip it */
	end;

	else if bump_by_pid
	then do i = 1 to anstbl.current_size while (continue);
	     utep = addr (anstbl.entry (i));
	     if ute.active >= NOW_LOGGED_IN
	     then do;
		if substr (input_pid, 1, 18) = substr (ute.proc_id, 1, 18)
		then do;
		     call PROCESS_UTE ();
		     continue = "0"b;		/* no need to go further */
		end;
	     end;					/* not logged in, skip it */
	end;

	else do;					/* not bumping by name or dsa */
	     do i = 1 to scdtp -> cdt.current_size while (continue);
		cdtep = addr (scdtp -> cdt.cdt_entry (i));
		if bump_by_mpx
		then do;
		     call match_star_name_ ((cdte.name), mpx_starname, code);
		     if code = 0
		     then call PROCESS_CDTE ();
		end;
		else if cdte.name = input_channel
		then do;
		     call PROCESS_CDTE ();
		     continue = "0"b;		/* no need to go further */
		end;
	     end;
	end;

	if action_flag
	then return;				/* successful */
	else if (bump_by_name & (bump_by_dsa | bump_by_chn_id))
	then do;
	     bump_by_name = ""b;
	     go to TRY_AGAIN;			/* try for a channel match this time */
	end;
	else call sys_log_$command (SL_TYPE,
	     "^a: no ^a signalled to ^[^12.3b^4s^;^s^[^a.^a^s^;^2s^a^]^]",
	      comname, action, bump_by_pid, input_pid, (bump_by_name
	     | bump_by_mpx), input_person_id, input_project_id,
	     input_channel);
	return;

%page;
PROCESS_UTE:
	procedure ();

/**** This procedure is used to perform the desired action on the
      specified ute.  The action is specified via the variable "action".

      It is called either from bump_procedure or PROCESS_CDTE
****/

dcl  chan_name		char (32);

	answer = "Error recieved from AS.";
	if respect_nobump & bump_by_name
	then if ute.at.nobump
	     then do;
		call sys_log_$command (SL_TYPE,
		     "^a: ^[^a.^a^s^;^2s^12.3b^] has ""nobump""", comname,
		     bump_by_name, ute.person, ute.project, ute.proc_id);
		if ^ute.uflags.disconnected
		then call asu_$blast_user (utep, "Bump attempted.  " || msg_string, (""), (0));
		return;
	     end;

	if action = "hangup"
	then if ute.channel = null
	     then return;
	     else do;
		call asu_$disconnect_user (utep, code);
		if code ^= 0 then goto ERROR_RETURN;
	     end;

	else if action = "unbump"
	     then if ute.preempted <= 0
		then return;
		else do;
		     call asu_$unbump_user (utep, code);
		     if code ^= 0 then goto ERROR_RETURN;
		end;

	else if action = "terminat"
	     then do;
		call asu_$terminate_user (utep, code);
		if code ^= 0 then goto ERROR_RETURN;
	     end;

	else if action = "detach"
	     then do;
		call asu_$detach_user (utep, code);
		if code ^= 0 then goto ERROR_RETURN;
	     end;


	else if action = "bump"
	     then do;
		call asu_$bump_user (utep, msg_string, code, grace_period);
		if code = error_table_$action_not_performed & cdtep = null then code = 0;
		else if code ^= 0 then goto ERROR_RETURN;
	     end;

/**** This tells the operator what we did and sets the flag saying that
      we did something. */

	if cdtep = null then chan_name = ute.tty_name;
	else chan_name = cdte.name;

	call sys_log_$command (SL_TYPE,
	     "^a: ^[^12.3b^4s^;^s^[^a.^a^s^;^2s^a^]^] ^a",
	     comname, bump_by_pid, ute.proc_id, bump_by_name, ute.person,
	     ute.project, chan_name, action_log);
	action_flag = "1"b;				/* remember we did one */
	return;

	end PROCESS_UTE;


PROCESS_CDTE:
	procedure ();

/**** This procedure is called to perform the action specified by the
      variable "action" on the specified channel. */

	     utep = cdte.process;
	     if cdte.in_use = NOW_HAS_PROCESS
	     then call PROCESS_UTE ();
	     else if action = "detach"
	     then do;
		if cdte.current_service_type = MC_SERVICE
		then call sys_log_$command (SL_LOG,
			"operator_process_cmds_: detach: Channel ^a is in use by the message coordinator and cannot be detached", cdte.name)
			;
		else if cdte.current_service_type = INACTIVE
		then call sys_log_$command (SL_LOG, "operator_process_cmds_: detach: Channel ^a is not currently active and cannot be detached");
		else do;
		     call hcs_$wakeup (as_procid, cdte.event, addr (action) -> bin_action, code);
		     if code = 0
		     then do;			/* tell operator we did it */
			call sys_log_$command (SL_TYPE, "^a: ^a ^a",
			     comname, cdte.name, action_log);
			action_flag = "1"b;		/* remember we did one */
		     end;
		     else call sys_log_$command_error (SL_LOG, code, comname, "From hcs_$wakeup for ^a", cdte.name);
		end;
	     end;
	     return;

	end PROCESS_CDTE;

     end bump_procedure;

%page; %include as_data_;
%page; %include as_data_definitions_;
%page; %include answer_table;
%page; %include author_dcl;
%page; %include cdt;
%page; %include dialup_values;
%page; %include sc_stat_;
%page; %include sys_log_constants;
%page; %include user_attributes;
%page; %include user_table_entry;
%page; %include user_table_header;
%page; %include whotab;
%page;
/* BEGIN MESSAGE DOCUMENTATION

   Message:
   operator_process_cmds_: COMMAND: ERROR_TABLE_MESSAGE  SYSDIR>answer_table

   S:	$as1

   T:	In response to an operator command, COMMAND.

   M:	The system was unable to access the answer_table in SYSDIR.

   A:	$inform


   Message:
   operator_process_cmds_: COMMAND: ERROR_TABLE_MESSAGE  SYSDIR>whotab

   S:	$as1

   T:	In response to an operator command, COMMAND.

   M:	The system was unable to access the whotab in SYSDIR.

   A:	$inform


   Message:
   operator_process_cmds_: COMMAND: ERROR_TABLE_MESSAGE  SYSDIR>installation_parms

   S:	$as1

   T:	In response to an operator command, COMMAND.

   M:	The system was unable to access the installation_parms in SYSDIR.

   A:	$inform


   Message:
   operator_process_cmds_: COMMAND: ERROR_TABLE_MESSAGE  SYSDIR>cdt

   S:	$as1

   T:	In response to an operator command, COMMAND.

   M:	The system was unable to access the cdt in SYSDIR.

   A:	$inform


   Message:
   operator_process_cmds_: COMMAND: ERROR_TABLE_MESSAGE Incorrect number of arguments.

   S:	$as1

   T:	In response to an operator command COMMAND.

   M:	Insufficient number of arguments supplied with the command.

   A:	$tryagain


   Message:
   operator_process_cmds_: COMMAND: error: Usage: COMMAND (Person.Project|CHANNEL|mpx MPX|-pid) {TIME MESSAGE}

   S:	$as1

   T:	In response to an operator command COMMAND.

   M:	Insufficient number of arguments supplied with the command.

   A:	$tryagain


   Message:
   operator_process_cmds_: COMMAND: ERROR_TABLE_MESSAGE Invalid process id:
     PROCESS_ID.  Use the first 6 or all 12 digits of the pid.

   S:	$as1

   T:	In response to an operator command COMMAND.

   M:	The typed length of the PROCESS_ID was incorrect.

   A:	$tryagain


   Message:
   operator_process_cmds_: COMMAND: error: No FNP tag specified

   S:	$as1

   T:	In response to an operator command COMMAND.

   M:	Expected a FNP designator, but none typed following COMMAND.

   A:	$tryagain


   Message:
   operator_process_cmds_: COMMAND: error: No multiplexer specified

   S:	$as1

   T:	In response to an operator command COMMAND.

   M:	Expected a multiplexer designator, but none typed following COMMAND.

   A:	$tryagain


   Message:
   operator_process_cmds_: COMMAND: error: Invalid FNP tag: FNP

   S:	$as1

   T:	In response to an operator command COMMAND.

   M:	The FNP tag following COMMAND was more than one character in length.
   FNP specifiers can only be one character long (ie: a, b, c, etc.).

   A:	$tryagain


   Message:
   operator_process_cmds_: COMMAND: ERROR_TABLE_MESSAGE Error recieved from AS.

   S:	$as1

   T:	In response to an operator command COMMAND.

   M:	Recieved an error from answering service attempting to remove the
   terminal user from the system answer table.  User's process state will
   remain unchanged.

   A:	$tryagain


   Message:
   operator_process_cmds_: COMMAND: ERROR_TABLE_MESSAGE From hcs_$wakeup for CHANNEL

   S:	$as1

   T:	In response to an operator command COMMAND.

   M:	Recieved an error from answering service when attempting to
   process the command COMMAND for channel CHANNEL.

   A:	$tryagain


   Message:
   operator_process_cmds_: COMMAND: error: Usage: COMMAND (Person.Project|CHANNEL|mpx MPX) {TIME MESSAGE}
   The "Person Project" format is obsolete.

   S:	$as1

   T:	In response to an operator command COMMAND.

   M:	The character "." was not found on the request line and COMMAND was
   not followed by a process id.  If argument following COMMAND is personid and
   projectid, the correct syntax is "Person.Project" not "Person Project".

   A:	$tryagain


   Message:
   operator_process_cmds_: unbump: error: invalid arguments

   S:	$as1

   T:	$response

   M:	A bad argument has been typed to
   the unbump command.
   No action was taken.

   A:	$tryagain


   Message:
   operator_process_cmds_: bump: error: invalid arguments

   S:	$as1

   T:	$response

   M:	A bad argument has been typed to
   the bump command.
   No action was taken.

   A:	$tryagain

   Message:
   operator_process_cmds_: detach: error: invalid arguments

   S:	$as1

   T:	$response

   M:	A bad argument has been typed to
   the detach command.
   No action was taken.

   A:	$tryagain


   Message:
   operator_process_cmds_: bump: no bump signalled to NAME PROJ

   S:	$as1

   T:	$response

   M:	An operator bump command specified a nonexistent channel
   name or user name and project.  No action was taken on the command.

   A:	Enter a corrected command line.  This message may be printed
   as a result of trying to bump a user by name when he has
   nobump privilege.  Bump him by channel name instead.


   Message:
   operator_process_cmds_: unbump: no unbump signalled to NAME PROJ

   S:	$as1

   T:	$response

   M:	An operator unbump command specified a nonexistent channel
   name or user name and project, or the user specified was not in a bumped
   state.  No action was taken on the command.

   A:	$tryagain


   Message:
   operator_process_cmds_: terminate: no terminate signalled to NAME PROJ

   S:	$as1

   T:	$response

   M:	An operator terminate command specified a nonexistent channel
   name or user name and project.  No action was taken on the command.

   A:	$tryagain


   Message:
   operator_process_cmds_: detach: no detach signalled to NAME PROJ

   S:	$as1

   T:	$response

   M:	An operator detach command specified a nonexistent channel
   name or user name and project.  No action was taken on the command.

   A:	$tryagain


   Message:
   operator_process_cmds_: detach: ERROR_MESSAGE CHANNEL

   S:	$as1

   T:	$response

   M:	The operator has issued a detach CHANNEL command and the error
   described by ERROR_MESSAGE occurred during the attempt to detach it.

   A:	$tryagain


   Message:
   operator_process_cmds_: detach: CHANNEL is in use by the message coordinator and can not be detached.

   S:	$as1

   T:	$response

   M:	An operator detach command specified a message coordinator channel.
   The channel was not detached.

   A:	Enter a corrected command line.  Use the drop command to
   take a channel away from the message coordinator.


   Message:
   operator_process_cmds_: detach: Channel CHANNEL is not currently active and cannot be detached.

   S:	$as1

   T:	$response

   M:	An operator detach command specified a channel that is not attached.
   No action was taken.

   A:	Enter a corrected command line


   Message:
   operator_process_cmds_: detach: NAME.PROJ detached

   S:	$as1

   T:	$response

   M:	This is the response to an operator detach command.
   The user affected is named.

   A:	$ignore


   Message:
   operator_process_cmds_: terminate: NAME.PROJ terminated

   S:	$as1

   T:	$response

   M:	This is the response to an operator terminate command.
   The user affected is named.

   A:	$ignore

   Message:
   operator_process_cmds_: bump: NAME.PROJ bumped

   S:	$as1

   T:	$response

   M:	This is the response to an operator bump command.
   The user affected is named.

   A:	$ignore

   Message:
   operator_process_cmds_: disconnect: NAME.PROJ disconnected.

   S:	$as1

   T:	$response

   M:	This is the response to an operator disconnect command.
   The user affected is named.

   A:	$ignore

   Message:
   operator_process_cmds_: unbump: NAME.PROJ unbumped

   S:	$as1

   T:	$response

   M:	This is the response to an operator unbump command.
   The user affected is named.

   A:	$ignore

   Message:
   operator_process_cmds_: bump: NAME.PROJ has "nobump"

   S:	$as1

   T:	$run

   M:	This is the response to the command bump NAME PROJ if
   the user has the nobump privilege.  The user was not
   bumped.

   A:	If it is imperative to bump the user, for instance at
   system shutdown time, do a who to find out his channel number,
   then type "bump CHANNEL".

   END MESSAGE DOCUMENTATION */

     end operator_process_cmds_;
