/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1985 *
        *                                                         *
        *********************************************************** */

/* format: off */

as_request_note_pnt_change_:
     procedure (P_asr_note_pnt_change_info_ptr, P_asr_sender_ptr);

/**** This procedure in invoked by as_request_server_ upon receipt of
      an answering service request of type NOTE_PNT_CHANGE.  This request
      is used by the Ring-1 PNT software to notify the answering service
      of security relevant changes to the PNT.  */

/* 
   Modification History:
   Written 1985-01-23 by E. Swenson.
*/

/****^  HISTORY COMMENTS:
  1) change(86-10-14,Lippard), approve(85-12-30,MCR7326),
     audit(86-10-27,GDixon), install(86-10-28,MR12.0-1200):
      Modified to use version 2 as_request_sender.
  2) change(87-04-26,GDixon), approve(87-07-13,MCR7741),
     audit(87-07-27,Brunelle), install(87-08-04,MR12.1-1055):
     Upgraded for change to answer_table.incl.pl1 and user_table_entry.incl.pl1
  3) change(87-07-24,Dickson), approve(87-07-24,MCR7722),
     audit(87-07-27,Brunelle), install(87-08-04,MR12.1-1055):
     Changed the VALIDATE_REQUEST procedure to audit grants as well as
     failures.
  4) change(87-12-03,GDixon), approve(88-08-15,MCR7969),
     audit(88-08-03,Lippard), install(88-08-29,MR12.2-1093):
      A) Modify UPDATE_UTE_AND_MAYBE_BUMP_USER to bump the user if his
         password is time-locked.  A prior modification had bumped the user
         if his password was locked, but time-locking was overlooked.  See
         aref of ii.forum [782] for details.  A TR may be entered on this
         subject.  This change deserves and SRB NOTICE.
      B) Modify BUMP_USER to honor the ute.at.nobump attribute for all
         bump attempted except deletion of the user's PNT entry.  For password
         locking and authorization range changes, users with nobump should
         not be bumped immediately.  Reason: such users are usually System
         Administrators attempting to thwart breakin attempts on their
         personid, or to adjust their own auth ranges; they should not be
         bumped in such cases.
                                                   END HISTORY COMMENTS */

/* Parameters */

dcl P_asr_note_pnt_change_info_ptr ptr parameter;
dcl P_asr_sender_ptr ptr parameter;

/* Automatic */

dcl code fixed bin (35); /* status code */
dcl person_id char (32); /* person_id we are processing */

/* Entries */ 

dcl aim_check_$in_range entry (bit (72) aligned, (2) bit (72) aligned) returns (bit (1) aligned);
dcl as_access_audit_$as_rqt_nt_pnt_chg entry (char (*), ptr, fixed bin (35));
dcl as_any_other_handler_ entry (char(*), entry, label, label);
dcl asu_$blast_user entry (ptr, char(*), char(*), fixed bin(35));
dcl asu_$bump_user entry (ptr, char(*), fixed bin(35), fixed bin);
dcl display_access_class_ entry (bit (72) aligned) returns (char (32) aligned);
dcl pnt_manager_$admin_get_entry entry (char (*), ptr, fixed bin (35));
dcl sys_log_ entry options (variable);
dcl sys_log_$error_log entry options (variable);

/* External */

dcl error_table_$id_not_found fixed bin (35) external static;
dcl error_table_$not_privileged fixed bin (35) external static;
dcl error_table_$unimplemented_version fixed bin (35) external static;

/* Builtins */

dcl (addr, clock, null) builtin;

/* Constants */

dcl (DO_HONOR_NOBUMP initial ("1"b),
     DONT_HONOR_NOBUMP initial ("0"b)) bit(1) int static options(constant);
dcl ME char (32) initial ("as_request_note_pnt_change_") internal static options (constant);
dcl RING_1 fixed bin (3) initial (1) internal static options (constant);

/* Conditions */

dcl any_other condition;
%page;
/* Program */

/**** Since we are using as_data_ pointers, ensure they have been
      initialized before proceeding.  If they haven't, return
      with no logging because the answering service must not have
      been initialized properly.  This should never happen though. */

      if as_data_$ansp = null () | as_data_$autp = null () |
	 as_data_$dutp = null ()
      then return;
      ansp = as_data_$ansp;
      autp = as_data_$autp;
      dutp = as_data_$dutp;
      

/**** First, establish an any other handler in case of faults */

     on any_other 
	call as_any_other_handler_ (ME, NULL_PROC, MAIN_RETURN, MAIN_RETURN);

/**** Copy arguments into automatic storage */

     asr_note_pnt_change_info_ptr = P_asr_note_pnt_change_info_ptr;
     as_request_sender_ptr = P_asr_sender_ptr;

/**** Validate the request in terms of access and reasonability of data */

     call VALIDATE_REQUEST (code);
     if code = 0 then
	do;
	person_id = asr_note_pnt_change_info.person_id;
	call SCAN_USER_TABLES_AND_UPDATE ();
	end;
     else; /* we've already logged any errors */

MAIN_RETURN:
    return;
%page;
VALIDATE_REQUEST:
     procedure (P_code);

dcl P_code fixed bin (35) parameter;

/**** Validate the request.  Check the version numbers of the structures
      and verify that the request came from Ring-1.  Log any invalid 
      requests */

     if as_request_sender.version ^= AS_REQUEST_SENDER_VERSION_2 then do;
	P_code = error_table_$unimplemented_version;
	call sys_log_$error_log (SL_LOG_SILENT, P_code, ME,
	     "Rejected NOTE_PNT_CHANGE request from ^a.  Invalid version (^a) in as_request_sender structure.",
	     as_request_sender.group_id, as_request_sender.version);
	return;
	end;
     else if asr_note_pnt_change_info.version ^= ASR_NPC_INFO_VERSION_1 then do;
	P_code = error_table_$unimplemented_version;
	call sys_log_$error_log (SL_LOG_SILENT, P_code, ME,
	     "Rejected NOTE_PNT_CHANGE request from ^a.  Invalid version number (^a) in asr_note_pnt_change_info structure.",
	     as_request_sender.group_id, asr_note_pnt_change_info.version);
	return;
	end;

			/* Check access after we've determined that */
			/* the data is correct for checking access. */

     if as_request_sender.validation_level ^= RING_1 then P_code = error_table_$not_privileged;
     else P_code = 0; /* request is ok */

     call as_access_audit_$as_rqt_nt_pnt_chg (ME, addr(as_request_sender), P_code);

     return;

end VALIDATE_REQUEST;
%page;
SCAN_USER_TABLES_AND_UPDATE:
     procedure ();

/**** Scan the answer table, daemon user table, and absentee user table 
      logged in processes for the specified personid.  If any are found,
      get the new pnt entry and update the info in the user tables, 
      bumping any processes which are incompatible with the new PNT entry. */

dcl pnt_entry_status fixed bin(2); /* tells us whether we've retrieved the PNT entry yet */
dcl (PNT_ENTRY_NOT_RETRIEVED  init(0),
     PNT_ENTRY_RETRIEVED      init(1),
     PNT_ENTRY_DELETED        init(2),
     PNT_ENTRY_RETRIEVE_ERROR init(3)) fixed bin(2) int static options(constant);
dcl i fixed bin (17); /* index into user_table_entry array */

      pnt_entry_status = PNT_ENTRY_NOT_RETRIEVED;

/**** Scan interactive user table (answer_table) */
      do i = 1 to anstbl.current_size;
	 utep = addr (anstbl.entry (i));
	 call PROCESS_UTE ();
      end;
/**** Scan absentee user table */
      do i = 1 to autbl.current_size;
	 utep = addr (autbl.entry (i));
	 call PROCESS_UTE ();
      end;
/**** Scan daemon user table */
      do i = 1 to dutbl.current_size;
	 utep = addr (dutbl.entry (i));
	 call PROCESS_UTE ();
      end;
     return;

PROCESS_UTE:
     procedure ();

dcl 1 pnte aligned like pnt_entry automatic;

     if ute.active = NOW_HAS_PROCESS
     then if ute.person = person_id
	then do;
	     if pnt_entry_status = PNT_ENTRY_NOT_RETRIEVED 
	     then call RETRIEVE_PNT_ENTRY ();
	     if pnt_entry_status = PNT_ENTRY_DELETED /* user deleted */
	     then call BUMP_USER ("Deleted from PNT", DONT_HONOR_NOBUMP);
	     else if pnt_entry_status = PNT_ENTRY_RETRIEVED
		then call UPDATE_UTE_AND_MAYBE_BUMP_USER ();
		else; /* error from RETRIEVE_PNT_ENTRY */
	end;
	else; /* non matching person_id */
     else; /* non active process */
     return;

RETRIEVE_PNT_ENTRY:
     procedure ();

     call pnt_manager_$admin_get_entry (person_id, addr (pnte), code);
     if code = error_table_$id_not_found 
     then pnt_entry_status = PNT_ENTRY_DELETED;
     else if code ^= 0
	then do;
	     call sys_log_$error_log (SL_LOG_SILENT, code, ME,
		"Unable to retrieve PNT entry for ^a.", person_id);
	     pnt_entry_status = PNT_ENTRY_RETRIEVE_ERROR;
	end;
	else pnt_entry_status = PNT_ENTRY_RETRIEVED; /* everything is ok */
     return;

end RETRIEVE_PNT_ENTRY;


BUMP_USER:
     procedure (P_reason, honor_nobump);

/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* Bump this user since his PNT entry was deleted or password was locked.    */
/*							       */
/* Bump will be prevented if password being locked and the user has nobump   */
/* attribute.  Usually this is the System Administrator locking his own      */
/* password to thwart a break-in attempt.			       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

dcl P_reason char (*) parameter;		/* reason for bumping      */
dcl honor_nobump bit(1) parameter;		/* on: nobump stops bumping*/
dcl NO_GRACE fixed bin (17) initial (0) internal static options (constant);

     if honor_nobump & ute.at.nobump then do;
	call sys_log_ (SL_LOG_SILENT,
	     "^a: User has ""nobump"" attribute.  Did not bump ^a.^a.^a ^12.3b on channel ^a (^a)",
	     ME, ute.person, ute.project, ute.tag, ute.proc_id, ute.tty_name,
	     P_reason);
	if ^ute.uflags.disconnected then
	     call asu_$blast_user (utep,
	     """nobump"" attribute prevented bump attempt when: " ||
	     P_reason, (""), (0));
	end;

     else do;
	call sys_log_ (SL_LOG_SILENT, 
	     "^a: Bumping user ^a.^a.^a ^12.3b on channel ^a (^a)",
	     ME, ute.person, ute.project, ute.tag, ute.proc_id, ute.tty_name,
	     P_reason);

	call asu_$bump_user (utep, P_reason, code, NO_GRACE);
	if code ^= 0 then
	     call sys_log_$error_log (SL_LOG_SILENT, code, ME,
	     "Error from asu_$bump_user.  Did not bump ^a.^a.^a ^12.3b on channel ^a (^a)",
	     ute.person, ute.project, ute.tag, ute.proc_id, ute.tty_name,
	     P_reason);
	end;

end BUMP_USER;


UPDATE_UTE_AND_MAYBE_BUMP_USER:
     procedure ();

     if pnte.flags.lock /* user's password has been locked */
     then call BUMP_USER ("Password locked", DO_HONOR_NOBUMP);
     else if pnte.flags.pw_time_lock then
          if clock() <= pnte.password_timelock then
	     call BUMP_USER ("Password time_locked", DO_HONOR_NOBUMP);
	else go to OTHER_TESTS;
     else do;
OTHER_TESTS:
	if pnte.person_authorization (2) 
	     < ute.process_authorization_range (2) /* lowered max auth */
	then do;
	     call sys_log_ (SL_LOG_SILENT,
		"^a: Lowered maximum authorization for ^a.^a.^a on channel ^a from ^a to ^a.  PNT change.",
		ME, ute.person, ute.project, ute.tag, ute.tty_name,
		display_access_class_ (ute.process_authorization_range (2)),
		display_access_class_ (pnte.person_authorization (2)));
	     ute.process_authorization_range (2) = pnte.person_authorization (2);
	     end;
	else;
	if pnte.person_authorization (1)
	     > ute.process_authorization_range (1) /* raised min auth */
	then do;
	     call sys_log_ (SL_LOG_SILENT,
		"^a: Raised minimum authorization for ^a.^a.^a on channel ^a from ^a to ^a.  PNT change.",
		ME, ute.person, ute.project, ute.tag, ute.tty_name,
		display_access_class_ (ute.process_authorization_range (1)),
		display_access_class_ (pnte.person_authorization (1)));
	     ute.process_authorization_range (1) = pnte.person_authorization (1);
	     end;
	else;
	if ^aim_check_$in_range (ute.process_authorization, ute.process_authorization_range)
	then call BUMP_USER ("Authorization range changed by System Administrator", DO_HONOR_NOBUMP);
	else;
	end;
     return;
end UPDATE_UTE_AND_MAYBE_BUMP_USER;

end PROCESS_UTE;

end SCAN_USER_TABLES_AND_UPDATE;
%page;
NULL_PROC:
     procedure ();

/**** This is a dummy cleanup handler, for as_any_other_handler_'s sake.
      It does nothing, but is required by as_any_other_handler_. */

     return;
end NULL_PROC;

/* format: off */
%page; %include absentee_user_table;
%page; %include answer_table;
%page; %include as_data_;
%page; %include as_data_definitions_;
%page; %include as_request_header;
%page; %include as_request_sender_;
%page; %include as_requests;
%page; %include daemon_user_table;
%page; %include dialup_values;
%page; %include pnt_entry;
%page; %include sys_log_constants;
%page; %include user_attributes;
%page; %include user_table_entry;
%page; %include user_table_header;
%page;

/* BEGIN MESSAGE DOCUMENTATION

   Message:
   as_request_note_pnt_change_: ERROR_MSG.  Rejected NOTE_PNT_CHANGE request
   from PERS.PROJ.  REASON
   
   S:	as (severity 0)
   
   T:	$run
   
   M:	An answering service request to note a change to the PNT sent
   by PERS.PROJ failed because of REASON.  $err
   
   A:	$contact

   Message:
   as_request_note_pnt_change_: ERROR_MSG. Unable to retrieve PNT entry for 
   PERS.
   
   S:	as (severity 0)
   
   T:	$run
   
   M:	An error (ERROR_MSG) occurred while getting the PNT entry for person
   PERS.
   
   A:	$contact_sa
   
   Message:
   as_request_note_pnt_change_: Bumping user PERS.PROJ.TAG PROCESSID on
   channel CHN. (REASON)
   
   S:	as (severity 0)
   
   T:	$run
   
   M:	Process PERS.PROJ.TAG on channel CHN was bumped by a change to the 
   PNT entry for PERS.  REASON describes the type of PNT change.
   
   A:	$ignore

   Message:
   as_request_note_pnt_change_: ERROR_MSG. Error from asu_$bump user.
   Did not bump PERS.PROJ.TAG PROCESSID on channel CHN (REASON)
   
   S:	as (severity 0)
   
   T:	$run
   
   M:	An error occurred attempting to bump process PERS.PROJ.TAG PROCESSID
   on channel CHN.  REASON indicates why bumping was attempted.
   
   A:	$contact_sa
   
   Message:
   as_request_note_pnt_change_: User has "nobump" attribute.
   Did not bump PERS.PROJ.TAG PROCESSID on channel CHN. (REASON)
   
   S:	as (severity 0)
   
   T:	$run
   
   M:	Bump attempt for process PERS.PROJ.TAG with PROCESSID on channel CHN
   failed, because the user has the nobump attribute.  REASON indicates why 
   bumping was attempted.
   
   A:	$contact_sa


   Message:
   as_request_note_pnt_change_: Lowered maximum authorization for PERS.PROJ.TAG
   on channel CHN from OLD_MAX_AUTH to NEW_MAX_AUTH.  PNT change.
   
   S:	as (severity 0)
   
   T:	$run
   
   M:	A change to the PNT entry for PERS lowered the maximum authorization
   associated with the process PERS.PROJ.TAG on channel CHN.  The
   authorization was changed from OLD_MAX_AUTH to NEW_MAX_AUTH.
   
   A:	$ignore

   Message:
   as_request_note_pnt_change_: Raised minimum authorization for PERS.PROJ.TAG
   on channel CHN from OLD_MIN_AUTH to NEW_MIN_AUTH.  PNT change.
   
   S:	as (severity 0)
   
   T:	$run
   
   M:	A change to the PNT entry for PERS raised the minimum authorization
   associated with the process PERS.PROJ.TAG on channel CHN.  The
   authorization was changed from OLD_MIN_AUTH to NEW_MIN_AUTH.
   
   A:	$ignore

   END MESSAGE DOCUMENTATION */

/* format: on */

end as_request_note_pnt_change_;
