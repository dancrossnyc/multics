/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        *********************************************************** */

/****^  HISTORY COMMENTS:
  1) change(86-10-14,Lippard), approve(85-12-30,MCR7326),
     audit(86-10-27,GDixon), install(86-10-28,MR12.0-1200):
      Use version 2 of as_request_sender.
  2) change(87-04-28,GDixon), approve(87-07-13,MCR7741),
     audit(87-07-27,Brunelle), install(87-08-04,MR12.1-1055):
     Updated for change to user_table_entry.incl.pl1.
                                                   END HISTORY COMMENTS */

/* format: ^indcom */

/* DESCRIPTION:
   This procedure is called by as_request_server_ to request that a process be
   bumped from the system.  Privledge for a user to bump a process is
   controled by the user's access to the ACS segment: bump_user.acs in 
   as_data_$acsdir.  A grace time and a message to be sent to the user's
   terminal can be specified.  All successful and unsuccessful attempts are
   logged.

   P_asr_bump_user_info_ptr - points to the asr_bump_user_info structure which
   contains the process id of the process to be bumped, a message to be
   printed on the user's terminal, and a grace time.

   P_as_request_sender_ptr - points to the as_request_sender structure which
   describes the sender of the bump_user request.
*/

/* HISTORY:
Written by R. Michael Tague, 08/28/84.
Modified:
11/02/84 by R. Michael Tague:  up_sysctl_$check_acs now returns a bit (36)
            mode string instead of a fixed bin (5) and no longer takes a
            directoy arg.
11/20/84 by R. Michael Tague:  Added person.project.tag information to several
            error messages.  Fixed omission of code setting in
            VALIDATE_REQUESTER.  Fixed a few comments.
*/

/* format: style5 */

as_request_bump_user_:
        procedure (P_asr_bump_user_info_ptr, P_as_request_sender_ptr);

/* DECLARATIONS */
/* parameters */

        dcl     P_asr_bump_user_info_ptr
				ptr parameter;
        dcl     P_as_request_sender_ptr ptr parameter;

/* automatic */

        dcl     mode		bit (36) aligned;
        dcl     code		fixed bin (35);
        dcl     type		fixed bin;

/* builtin functions */

        dcl     (null, addr)		builtin;

/* constants */

        dcl     myname		init ("as_request_bump_user_")
				char (21) internal static
				options (constant);

/* entries */

        dcl     aim_check_$equal	entry (bit (72) aligned,
				bit (72) aligned)
				returns (bit (1) aligned);
        dcl     up_sysctl_$check_acs	entry (char (*), char (*), fixed bin,
				bit (36) aligned, fixed bin (35));
        dcl     asu_$find_process	entry (bit (36) aligned, fixed bin, ptr)
				;
        dcl     asu_$bump_user	entry (ptr, char (*), fixed bin (35),
				fixed bin);
        dcl     sys_log_		entry options (variable);
        dcl     sys_log_$error_log	entry options (variable);

/* external static */

        dcl     error_table_$ai_restricted
				fixed bin (35) external static;
        dcl     error_table_$as_bump_user_not_found
				fixed bin (35) external static;
        dcl     error_table_$as_request_invalid_request
				fixed bin (35) external static;
        dcl     error_table_$insufficient_access
				fixed bin (35) external static;

/* END OF DECLARATIONS */

/* program */
        asr_bump_user_info_ptr = P_asr_bump_user_info_ptr;
        as_request_sender_ptr = P_as_request_sender_ptr;
        call VALIDATE_REQUESTER (code);
        if code = 0 then
	      do;
	      call FIND_REQUESTEE_AND_DO_AIM_CHECK (code);
	      if code = 0 then
		    call REGISTER_FOR_BUMP (code);
	      end;
        asr_replyp = addr (as_request_sender.reply_message);
        asr_reply_bump_user.reference_id =
	  asr_bump_user_info.reply_reference_id;
        asr_reply_bump_user.code = code;
        return;

/* ************************************************************************
   * VALIDATE_REQUESTER - This routine checks the requester's access to   *
   * the ACS segment: bump_user.acs in as_data_$acsdir.  The requester    *
   * must have read/write access.  This routine also checks structure     *
   * versions.						    *
   ************************************************************************ */

VALIDATE_REQUESTER:
        proc (code);
        dcl     code		fixed bin (35);

        if asr_bump_user_info.version = asr_bump_user_info_version_1
	  & as_request_sender.version = AS_REQUEST_SENDER_VERSION_2 then
	      do;
	      call up_sysctl_$check_acs ("bump_user.acs",
		as_request_sender.group_id,
		(as_request_sender.validation_level), mode, code);
	      if code = 0 then
		    if (mode & RW_ACCESS) = RW_ACCESS then
			  ;		      /* Access is ok */
		    else
			  do;
			  code = error_table_$insufficient_access;
			  call sys_log_$error_log (SL_LOG_SILENT, code,
			      myname,
			      "Rejected BUMP_USER request from ^a to bump process ^12.3b.  Requestor does not have sufficient access to the bump_user.acs segment.",
			      as_request_sender.group_id,
			      asr_bump_user_info.process_id);
			  end;
	      else
		    call sys_log_$error_log (SL_LOG_SILENT, code, myname,
		        "Rejected BUMP_USER request from ^a to bump process ^12.3b.  Error calling up_sysctl_$check_acs for requestor.",
		        as_request_sender.group_id,
		        asr_bump_user_info.process_id);
	      end;
        else
	      do;
	      code = error_table_$as_request_invalid_request;
	      call sys_log_$error_log (SL_LOG_SILENT, code, myname,
	         "Rejected BUMP_USER request from ^a to bump process ^12.3b.  Invalid version (^[^a^s^;^s^a^]) in the ^[asr_bump_user_info^;as_request_sender^] structure.",
		as_request_sender.group_id, asr_bump_user_info.process_id,
		(asr_bump_user_info.version ^= asr_bump_user_info_version_1),
	          asr_bump_user_info.version, as_request_sender.version,
		(asr_bump_user_info.version ^= asr_bump_user_info_version_1));
	      end;
        end VALIDATE_REQUESTER;

/* *************************************************************************
   * FIND_REQUESTEE_AND_DO_AIM_CHECK - Find the process to be bumped in    *
   * the user_table and check that the AIM level of the requester and the  *
   * AIM level of the process to be bumped are equal.  This AIM check      *
   * prevents a covert channel between the requester and requestee which   *
   * could be quite large given that a message specified by the requester  *
   * is sent to the user to be bumped.				     *
   *							     *
   * This routine sets the user_table base pointer, utep.		     *
   ************************************************************************* */

FIND_REQUESTEE_AND_DO_AIM_CHECK:
        proc (code);
        dcl     code		fixed bin (35);

        call asu_$find_process (asr_bump_user_info.process_id, type, utep);
        if utep = null then
	      do;
	      code = error_table_$as_bump_user_not_found;
	      call sys_log_$error_log (SL_LOG_SILENT, code, myname,
		"Rejected BUMP_USER request from ^a to bump process ^12.3b.  Process to be bumped was not found.",
		as_request_sender.group_id, asr_bump_user_info.process_id);
	      end;
        else
	      do;
	      if aim_check_$equal (as_request_sender.authorization,
		ute.process_authorization) then
		    code = 0;
	      else
		    do;
		    code = error_table_$ai_restricted;
		    call sys_log_$error_log (SL_LOG_SILENT, code, myname,
		        "Rejected BUMP_USER request from ^a to bump process ^12.3b (^[*^]^a.^a.^a).  Authorization level of requesting process and target process do not match.",
		        as_request_sender.group_id, 
		        asr_bump_user_info.process_id, ute.anonymous,
		        ute.person, ute.project, ute.tag);
		    end;
	      end;
        end FIND_REQUESTEE_AND_DO_AIM_CHECK;

/* *************************************************************************
   * REGISTER_FOR_BUMP - Call asu_$bump_user to get the process registered *
   * for a bump to occur at grace time in the future.  Logs request.	     *
   ************************************************************************* */

REGISTER_FOR_BUMP:
        proc (code);
        dcl     code		fixed bin (35);

        call asu_$bump_user (utep, asr_bump_user_info.message, code,
	  asr_bump_user_info.grace_time_in_seconds);
        if code = 0 then
	      call sys_log_ (SL_LOG_SILENT,
		"^a: BUMPING ^[*^]^a.^a.^a ^12.3b for requestor ^a.",
		myname, ute.anonymous,
		ute.person, ute.project, ute.tag,
		asr_bump_user_info.process_id,
		as_request_sender.group_id);
        else
	      call sys_log_$error_log (SL_LOG_SILENT, code, myname,
		"Rejected BUMP_USER request from ^a to bump process ^12.3b (^[*^]^a.^a.^a).  Error from asu_$bump_user.",
		as_request_sender.group_id, asr_bump_user_info.process_id,
		ute.anonymous, ute.person, ute.project, ute.tag);
        end REGISTER_FOR_BUMP;

%page;
%include access_mode_values;
%page;
%include as_request_header;
%page;
%include as_requests;
%page;
%include as_request_sender_;
%page;
%include sys_log_constants;
%page;
%include user_attributes;
%page;
%include user_table_entry;
%page;

/* BEGIN MESSAGE DOCUMENTATION

   Message:
   as_request_bump_user_: ERROR_MSG. Rejected BUMP_USER request from 
   PERS.PROJ.TAG to bump process PROCESS_ID. REASON

   S:	as (severity 0)

   T:	$run

   M:	The answering service request from PERS.PROJ.TAG to bump the process
   identified by PROCESSID failed for the given REASON and ERROR_MSG.

   A:	$contact_sa

   Message:
   as_request_bump_user_: BUMPING PERS.PROJ.TAG PROCESSID for requestor 
   REQ_PERS.REQ_PROJ.REQ_TAG.

   S:	as (severity 0)

   T:	$run

   M:	An answering service request from REQ_PERS.REQ_PROJ.REQ_TAG to bump
   the process PERS.PROJ.TAG PROCESSID has been initiated.

   A:	$ignore

   END MESSAGE DOCUMENTATION */

        end as_request_bump_user_;
