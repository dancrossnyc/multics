/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1985 *
        *                                                         *
        *********************************************************** */

/****^  HISTORY COMMENTS:
  1) change(87-04-28,GDixon), approve(87-07-13,MCR7741),
     audit(87-07-27,Brunelle):
     Updated for change to user_table_entry.incl.pl1.
  2) change(87-07-24,Dickson), approve(87-07-24,MCR7722),
     audit(87-07-27,Brunelle):
     Added auditing of grants and failures.
                                                   END HISTORY COMMENTS */

/* format: style2,idind30 */

asr_com_channel_info_srvr_:
     procedure (ASR_info_ptr, ASR_sender_ptr);

/**** This program handles requests for info on com channels. */


/**** Written 1985-02-19, BIM */
/**** Modified 1985-02-22 by E. Swenson to not replace reply error
      code with error_table_$no_info if a more explicit error code
      has already been set up. */

	declare (ASR_info_ptr, ASR_sender_ptr)
				        pointer parameter;

	dcl     cdtx		        fixed bin;
	dcl     fnp_sw		        bit (1) aligned;
	dcl     code		        fixed bin (35);

	dcl     aim_util_$get_access_class    entry (bit (72) aligned) returns (bit (72) aligned);
	dcl     as_access_audit_$asr_com_chn_info_srvr
				        entry (char (*), pointer, pointer, fixed bin (35));
	dcl     as_user_message_$priv_add_message
				        entry (pointer, fixed bin (35));
	dcl     cdt_mgr_$find_cdt_channel     entry (pointer, character (32), fixed binary, bit (1) aligned,
				        fixed binary (35));
	dcl     ioa_$rsnnl		        entry () options (variable);
	dcl     sys_log_$error_log	        entry options (variable);

	dcl     error_table_$no_info	        fixed bin (35) ext static;

	dcl     error_table_$unimplemented_version
				        fixed bin (35) ext static;

	dcl     addr		        builtin;
	dcl     currentsize		        builtin;
	dcl     null		        builtin;
	dcl     unspec		        builtin;

	dcl     ME		        char (32) internal static options(constant)
						init ("asr_com_channel_info_srvr_");


	asr_com_channel_info_ptr = ASR_info_ptr;
	as_request_sender_ptr = ASR_sender_ptr;
	asr_reply_cci_ptr = addr (as_request_sender.reply_message);
	unspec (asr_reply_com_channel_info) = ""b;

	if asr_com_channel_info.version ^= ASR_CCI_VERSION_1
	     | asr_com_channel_info.reply_version_requested ^= AS_COM_CHANNEL_INFO_VERSION_1
	then do;
		asr_reply_com_channel_info.code = error_table_$unimplemented_version;
		go to ERROR;
	     end;

	cdtp = as_data_$cdtp;
	call cdt_mgr_$find_cdt_channel (cdtp, asr_com_channel_info.channel_name, cdtx, fnp_sw, code);
	if fnp_sw | code ^= 0
	then go to ERROR;

	cdtep = addr (cdt.cdt_entry (cdtx));

	if cdte.current_service_type = ANS_SERVICE
	then do;					/* be sure it is login channel of requestor */
		if ^(cdte.in_use = NOW_HAS_PROCESS & cdte.process -> ute.proc_id = as_request_sender.process_id)
		then go to ERROR;
	     end;
	else if cdte.current_service_type = DIAL_OUT_SERVICE | cdte.current_service_type = SLAVE_SERVICE
	     | cdte.current_service_type = TANDD_SERVICE | cdte.current_service_type = DIAL_SERVICE
	then do;
		if cdte.dialed_to_procid ^= as_request_sender.process_id
		then go to ERROR;
	     end;
	else go to ERROR;

/**** Okay, this channel belongs to this user */

	if asr_com_channel_info.reply_message_handle ^= ""b
	then call SEND_REPLY;

	call as_access_audit_$asr_com_chn_info_srvr (ME, addr(as_request_sender),
		addr(asr_com_channel_info), asr_reply_com_channel_info.code);

	return;

ERROR:
/**** If we haven't set with a more specific code, give him the generic no_info code. */
	if asr_reply_com_channel_info.code = 0
	then asr_reply_com_channel_info.code = error_table_$no_info;

	call as_access_audit_$asr_com_chn_info_srvr (ME, addr(as_request_sender),
		addr(asr_com_channel_info), asr_reply_com_channel_info.code);

	return;


SEND_REPLY:
     procedure;

	declare 1 asum_ai		        aligned like as_user_message_add_info;
	declare 1 ascci		        aligned like as_com_channel_info;
	declare code		        fixed bin (35);

	unspec (ascci) = ""b;
	ascci.version = AS_COM_CHANNEL_INFO_VERSION_1;
	ascci.channel_name = cdte.name;
	ascci.flags.access_control = cdte.flags.access_control, by name;
	ascci.attached_to_caller = "1"b;		/* always true, other case not yet supported */
	ascci.user_authenticated = (cdte.user_name.person ^= "");
	ascci.dialed_to_caller = (cdte.current_service_type = DIAL_SERVICE);
	ascci.service_type = cdte.service_type;
	ascci.current_service_type = cdte.current_service_type;
	ascci.access_class = cdte.access_class;
	ascci.current_access_class = cdte.current_access_class (1);
	if ascci.user_authenticated
	then call ioa_$rsnnl ("^a.^a", ascci.auth_user_name, (0), cdte.user_name.person, cdte.user_name.project);
	else ascci.auth_user_name = "";

	unspec (asum_ai) = ""b;
	asum_ai.version = AS_USER_MESSAGE_ADD_INFO_VERSION_1;
	asum_ai.message_ptr = addr (ascci);
	asum_ai.message_length = currentsize (ascci);
	asum_ai.message_access_class = aim_util_$get_access_class (as_request_sender.authorization);
	asum_ai.destination_info.group_id = as_request_sender.group_id;
	asum_ai.destination_info.process_id = as_request_sender.process_id;
	asum_ai.destination_info.handle = asr_com_channel_info.reply_message_handle;
	asum_ai.destination_info.ring = as_request_sender.validation_level;
	asum_ai.reader_deletes = "1"b;
	call as_user_message_$priv_add_message (addr (asum_ai), code);
	if code ^= 0
	then do;
		call sys_log_$error_log (SL_LOG, code, "asr_com_channel_info_srvr_",
		     "Failed to send reply message to ^a.", as_request_sender.group_id);
	     end;
	return;
     end SEND_REPLY;

%include as_data_;
%include as_request_header;
%include asr_com_channel_info;
%include as_com_channel_info;
%include as_request_sender_;
%include as_user_message_add;
%include cdt;
%include dialup_values;
%include author_dcl;
%include user_table_entry;
%include user_attributes;
%include sys_log_constants;

     end asr_com_channel_info_srvr_;

