/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* FNP_DATA_SUMMARY: Command to summarize fnp data from the syserr log collected by poll_fnp */

/* Written July 1981 by Robert Coren */
/* Most of this program was borrowed from the mpc_data_summary command. */

/* format: style4,delnl,insnl,^ifthendo */
fnp_data_summary:
     proc;

dcl  i fixed bin;
dcl  name char (17) int static options (constant) init ("fnp_data_summary");
						/* Name of procedure */
dcl  check_fnp fixed bin;
dcl  code fixed bin (35);				/* Standard system status code */
dcl  open_status bit (36) aligned;			/* Code from syserr_log_util_$open */
dcl  ptr_array (2) ptr;				/* An array of pointers as required by get_temp_segment_ */
dcl  tab_cnt fixed bin init (0);			/* Number of seperate status found */
dcl  mask bit (36) aligned init ("0"b);			/* Mask of significant bits in status word */
dcl  arg_ptr ptr;					/* Pointer to an argument */
dcl  arg_len fixed bin;				/* Length of an argument */
dcl  arg char (arg_len) based (arg_ptr);		/* A command argument */
dcl  arg_count fixed bin;				/* The number of arguments */
dcl  arg_list_ptr ptr;				/* Pointer to commands argument list */
dcl  for_ptr ptr;					/* Saved pointer to the -for argument */
dcl  for_len fixed bin;				/* Saved length of -for argument */
dcl  for_arg char (for_len) based (for_ptr);		/* This is the -for argument */
dcl  from_sw bit (1) init ("0"b);			/* Set if -from used */
dcl  to_sw bit (1) init ("0"b);			/* Set if -to used */
dcl  for_sw bit (1) init ("0"b);			/* Set if -for used */
dcl  more_args bit (1);				/* Set while there are more arguments to scan */
dcl  short_display_sw bit (1) init ("1"b);
dcl  short_arg bit (1) init ("0"b);
dcl  top_of_page_req bit (1) init ("0"b);
dcl  fnp_only bit (1) init ("0"b);
dcl  bf_sw bit (1) init ("0"b);
dcl  all_fnps bit (1) init ("0"b);			/* all fnp's that we find will be summarized  if no fnp name are in put this will set set  */
dcl  (output_file, of_file_att, of_file_open) bit (1) init ("0"b);
						/* output file to be used and if it is attached and open */
dcl  ext_file bit (1) init ("0"b);			/* set if the output file is to be extended */
dcl  expand_sw bit (1) init ("0"b);			/* set if each entry found is the syserr_log is to also be printed */
dcl  segs_allocated bit (1) init ("0"b);		/* Set after work segments created */


dcl  from_time fixed bin (71);			/* Time specified on -from */
dcl  to_time fixed bin (71);				/* Time specified on -to */
dcl  for_time fixed bin (71);				/* Time specified on -for */
dcl  count_limit fixed bin init (0);			/* Results for -limit arg */
dcl  day_limit fixed bin init (0);			/* Results for -day_limit arg */
dcl  workp ptr;					/* Pointer to work segment */
dcl  arg_no fixed bin init (1);			/* For scanning argument list */
dcl  msg_time fixed bin (71);				/* Time of syserrmessage */
dcl  msg_seq fixed bin (35);				/* Sequence number */
dcl  fnp_cnt fixed bin init (0);			/* Number of FNPs requested */
dcl  temp fixed bin;
dcl  output_iocbp ptr;				/* pointer to the output iocb */
dcl  of_path char (168);				/* path name used for output file */
dcl  attach_desc char (180);				/* variable used to build description used for output file when attached */
dcl  (F_TIME, L_TIME) char (24);
dcl  fnp_statp ptr;
dcl  fnp_chan_statp ptr;


/* BASED */

dcl  1 work aligned based (workp),			/* Declaration of work segment */
       2 fnpreq (8) char (4),				/* Table of requested FNPs */
       2 buffer (500) bit (36) aligned,			/* Syserr messages are read here */
       2 entries_found fixed bin,			/* number of syserr_log entries */
       2 first_time fixed bin (71),			/* time fo the first syserr_log entry found fo this fnp */
       2 last_time fixed bin (71);			/* time of the last syserr_log entry found for this fnp */


dcl  1 fnp_stats aligned based (fnp_statp),
       2 n_channels fixed bin,
       2 chan_stats (100) like fnp_chan_stats;

dcl  1 fnp_chan_stats aligned based (fnp_chan_statp),
       2 chan_name char (6) unal,
       2 line_type fixed bin (17) unaligned,
       2 stats (9) fixed bin (35);


/* entries for syserr_log */

dcl  syserr_log_util_$open entry (bit (36) aligned, fixed bin (35));
dcl  print_syserr_msg_$open_err entry (bit (36) aligned, char (*), fixed bin (35));
dcl  syserr_log_util_$read entry (ptr, fixed bin, fixed bin, fixed bin (35));
dcl  syserr_log_util_$close entry (fixed bin (35));
dcl  syserr_log_util_$search entry (fixed bin (71), fixed bin (71), fixed bin (35), fixed bin (35));

/* io type entries */

dcl  (
     ioa_,
     ioa_$ioa_switch
     ) entry options (variable);
dcl  iox_$attach_ioname entry (char (*), ptr, char (*), fixed bin (35));
dcl  iox_$open entry (ptr, fixed bin, bit (1) aligned, fixed bin (35));
dcl  iox_$close entry (ptr, fixed bin (35));
dcl  iox_$detach_iocb entry (ptr, fixed bin (35));
dcl  iox_$user_output ext ptr;

/* misc entries */

dcl  com_err_ entry options (variable);
dcl  get_temp_segments_ entry (char (*), dim (*) ptr, fixed bin (35));
dcl  release_temp_segments_ entry (char (*), dim (*) ptr, fixed bin (35));
dcl  date_time_ entry (fixed bin (71), char (*));
dcl  cu_$arg_list_ptr entry (ptr);
dcl  cu_$arg_count entry (fixed bin, fixed bin (35));
dcl  cu_$arg_ptr_rel entry (fixed bin, ptr, fixed bin, fixed bin (35), ptr);
dcl  convert_date_to_binary_ entry (char (*), fixed bin (71), fixed bin (35));
dcl  convert_date_to_binary_$relative entry (char (*), fixed bin (71), fixed bin (71), fixed bin (35));
dcl  get_line_length_$switch entry (ptr, fixed bin (35)) returns (fixed bin);
dcl  sys_info_$time_delta ext fixed bin (35);
dcl  parse_tty_name_ entry (char (*), fixed bin, bit (1), fixed bin, fixed bin);
dcl  meter_format_$picture entry (fixed bin (35), fixed bin) returns (char (15) var);

/* error_table_ */

dcl  error_table_$end_of_info ext fixed bin (35);
dcl  error_table_$badopt ext fixed bin (35);
dcl  error_table_$inconsistent ext fixed bin (35);

dcl  (cleanup, conversion) condition;

dcl  (addr, bin, divide, hbound, index, substr) builtin;

/* Initialization */

	on cleanup call clean_up;
	output_iocbp = iox_$user_output;
	call get_temp_segments_ (name, ptr_array, code);	/* Get a work segment */
	if code ^= 0
	then do;
	     call com_err_ (code, name, "Can't get temp segment");
	     go to done;
	end;
	segs_allocated = "1"b;			/* Remember that they are allocated */
	workp = ptr_array (1);			/* Copy pointer to my segment */
	fnp_statp = ptr_array (2);
	fnp_stats.n_channels = 0;

	call cu_$arg_list_ptr (arg_list_ptr);		/* Need pointer to argument list */
	call cu_$arg_count (arg_count, code);		/* And the length */
	if code ^= 0
	then do;
	     call com_err_ (code, name);
	     return;
	end;

	more_args = (arg_count > 0);			/* Set if args to scan */
	call scan_args;				/* Scan the argument list */

	if fnp_cnt = 0
	then all_fnps = "1"b;


	if output_file
	then do;
	     if short_arg
	     then short_display_sw = "1"b;
	     else short_display_sw = "0"b;
	     attach_desc = "vfile_ " || rtrim (of_path);
	     if ext_file
	     then attach_desc = rtrim (attach_desc) || " -extend";
	     call iox_$attach_ioname ("fnp_sum_sw", output_iocbp, attach_desc, code);
	     if code ^= 0
	     then do;
		call com_err_ (code, name, "attaching ^a", rtrim (of_path));
		goto done;
	     end;
	     of_file_att = "1"b;
	     call iox_$open (output_iocbp, 2, "0"b, code);/* open for stream output */
	     if code ^= 0
	     then do;
		call com_err_ (code, name, "opening ^a", rtrim (of_path));
		goto done;
	     end;
	     of_file_open = "1"b;
	end;
	temp = get_line_length_$switch (output_iocbp, code);
	if ^short_arg
	then do;
	     if code ^= 0 | temp > 80
	     then short_display_sw = "0"b;
	     else short_display_sw = "1"b;
	end;
	else short_display_sw = "1"b;
	if code ^= 0 | output_file
	then top_of_page_req = "1"b;
	else top_of_page_req = "0"b;


	call syserr_log_util_$open (open_status, code);	/* Open the syserr log */
	if code ^= 0 | substr (open_status, 1, 2) ^= "11"b
	then do;					/* If error */
	     call print_syserr_msg_$open_err (open_status, name, code);
	     if code ^= 0
	     then go to done;			/* Not recoverable */
	end;

	if ^from_sw
	then do;					/* No -from, so start at beginning */
	     call syserr_log_util_$search (0, msg_time, msg_seq, code);
	     if code ^= 0
	     then do;
		call com_err_ (code, name, "Can't find firstmessage in log.");
		go to done;
	     end;
	     from_time = msg_time;			/* Official starting time */
	end;
	else do;					/* -from used, find rightmessage */
	     call syserr_log_util_$search (from_time, msg_time, msg_seq, code);
	     if code ^= 0
	     then do;
		call com_err_ (code, name, "Locating firstmessage requested.");
		go to done;
	     end;
	end;

	if for_sw
	then do;					/* Now can compute -for limit */
	     call convert_date_to_binary_$relative (for_arg, to_time, from_time, code);
	     if code ^= 0
	     then do;
		call com_err_ (code, name, "-for ^a", for_arg);
		go to done;
	     end;
	     to_sw = "1"b;				/* Now, just as if -to was specified */
	end;
	if ^to_sw
	then to_time = from_time;			/* Initialize lastmessage time */

	syserr_msgp = addr (work.buffer);		/* Read here */

/* Loop thru the file */

loop:
	call syserr_log_util_$read (syserr_msgp, hbound (buffer, 1), (0), code);
	if code ^= 0
	then do;
	     if code = error_table_$end_of_info
	     then go to print;
	     call com_err_ (code, name, "Reading syserr log");
	     go to done;
	end;

	if to_sw
	then do;					/* If time limit */
	     if syserr_msg.time > to_time
	     then go to print;
	end;
	else to_time = syserr_msg.time;		/* Save lastmessage time */

	if syserr_msg.data_code = SB_fnp_poll & syserr_msg.data_size > 0
	then do;
	     poll_fnp_datap = addr (syserr_msg.data);
	     if look_for (poll_fnp_data.name)
	     then call count_it;
	end;

	go to loop;

/* End of log reached */

print:
	call print_it;				/* Print results */

/* End of command */

done:
	call clean_up;
	return;




count_it:
     proc;

/* This proc will take the syserr entry in poll_fnp_data format and
   interpret it so as to record the maximum value of every statistic for
   each channel in the fnp_stats array. */

dcl  i fixed bin;
dcl  statx fixed bin;
dcl  chanx fixed bin;
dcl  found bit (1);
dcl  stat_type fixed bin;

	if work.entries_found = 0
	then work.first_time = syserr_msg.time;
	work.entries_found = work.entries_found + 1;
	work.last_time = syserr_msg.time;

	if expand_sw
	then call expand_syserr_entry;		/* user wants each entry expanded */

	do statx = 1 to poll_fnp_data.n_stats;
	     chanx = poll_fnp_data.stat_info (statx).chan_index;
	     stat_type = poll_fnp_data.stat_info (statx).stat_index;

	     found = "0"b;
	     do i = 1 to fnp_stats.n_channels;
		fnp_chan_statp = addr (fnp_stats.chan_stats (i));
		if fnp_chan_stats.chan_name = poll_fnp_data (chanx).chan_name
		then do;
		     found = "1"b;
		     if poll_fnp_data.stat_info (statx).value > fnp_chan_stats.stats (stat_type)
		     then fnp_chan_stats.stats (stat_type) = poll_fnp_data.stat_info (statx).value;
		end;
	     end;

	     if ^found				/* first message for this channel */
	     then do;
		fnp_stats.n_channels = fnp_stats.n_channels + 1;
		fnp_chan_statp = addr (fnp_stats.chan_stats (fnp_stats.n_channels));
		fnp_chan_stats.chan_name = poll_fnp_data (chanx).chan_name;
		fnp_chan_stats.line_type = poll_fnp_data (chanx).line_type;
		fnp_chan_stats.stats (*) = 0;
		fnp_chan_stats.stats (stat_type) = poll_fnp_data.stat_info (statx).value;
	     end;
	end;
     end count_it;


look_for:
     proc (fnp_name) returns (bit (1));

/* This proc will return a bit = "1"b then we want to count this data */

dcl  fnp_name char (4) aligned;
dcl  i fixed bin;

	if poll_fnp_data.n_stats = 0
	then return ("0"b);

	do i = 1 to fnp_cnt;
	     if fnp_name = work.fnpreq (i)
	     then return ("1"b);
	end;
	if all_fnps
	then do;					/* count all we find */
	     fnp_cnt = fnp_cnt + 1;
	     work.fnpreq (fnp_cnt) = fnp_name;
	     return ("1"b);
	end;
	return ("0"b);
     end look_for;

/* Procedure to print results */

print_it:
     proc;
dcl  i fixed bin;
dcl  chanx fixed bin;
dcl  fnp_no fixed bin;
dcl  hsla_flag bit (1);
dcl  la_no fixed bin;
dcl  subchan fixed bin;

	if fnp_stats.n_channels > 0
	then do;
	     call date_time_ (work.first_time, F_TIME);
	     call date_time_ (work.last_time, L_TIME);
	     if top_of_page_req
	     then call ioa_$ioa_switch (output_iocbp, "^|");
	     else call ioa_$ioa_switch (output_iocbp, "^2/");
	     call ioa_$ioa_switch (output_iocbp, "^10x^d syserr log entries^/^10xfrom: ^a^/^12xto: ^a",
		work.entries_found, F_TIME, L_TIME);

	     do chanx = 1 to fnp_stats.n_channels;
		fnp_chan_statp = addr (fnp_stats.chan_stats (chanx));
		call parse_tty_name_ (fnp_chan_stats.chan_name, fnp_no, hsla_flag, la_no, subchan);
		call ioa_$ioa_switch (output_iocbp,
		     "^/Channel ^a (FNP ^a, ^[H^;L^]SLA ^d, subchannel ^2d), line type ^a", fnp_chan_stats.chan_name,
		     substr ("ABCDEFGH", fnp_no, 1), hsla_flag, la_no, subchan, line_types (fnp_chan_stats.line_type))
		     ;

		if fnp_chan_stats.stats (9) > 0
		then call ioa_$ioa_switch (output_iocbp, "^10xParity errors: ^a",
			meter_format_$picture (fnp_chan_stats.stats (9), 11));

		do i = 1 to 8;
		     if fnp_chan_stats.stats (i) > 0
		     then call ioa_$ioa_switch (output_iocbp, "^10xCounter (^d):^2x^a",
			     i, meter_format_$picture (fnp_chan_stats.stats (i), 11));
		end;
	     end;
	end;

	else do;
	     call date_time_ (from_time, F_TIME);
	     call date_time_ (to_time, L_TIME);
	     call ioa_$ioa_switch (output_iocbp,
		"No syserr_log entries found for specified FNP(s)^/from: ^a^/^2xto: ^a", F_TIME, L_TIME);
	end;

     end print_it;

/* expand each entry */

expand_syserr_entry:
     proc;

dcl  last_chanx fixed bin;
dcl  chanx fixed bin;
dcl  statx fixed bin;

	call date_time_ (work.last_time, F_TIME);
	call ioa_$ioa_switch (output_iocbp, "^Entry number ^d at ^a", work.entries_found, F_TIME);


	if poll_fnp_data.n_stats = 0
	then call ioa_$ioa_switch (output_iocbp, "No statistics.");

	else do;
	     last_chanx = 0;
	     do statx = 1 to poll_fnp_data.n_stats;
		chanx = poll_fnp_data.stat_info (statx).chan_index;
		if chanx ^= last_chanx		/* new channel */
		then do;
		     call ioa_$ioa_switch (output_iocbp, "Channel ^a:", poll_fnp_data.chan_info (chanx).chan_name);
		     last_chanx = chanx;
		end;

		call ioa_$ioa_switch (output_iocbp, "^5x^[Parity^s^;Counter (^d)^]: ^a",
		     poll_fnp_data.stat_info (statx).stat_index = 9, poll_fnp_data.stat_info (statx).stat_index,
		     meter_format_$picture (poll_fnp_data.stat_info (statx).value, 11));
	     end;
	end;

     end expand_syserr_entry;


/* Cleanup handler */

clean_up:
     proc;

	call syserr_log_util_$close (code);
	if output_file
	then do;
	     if of_file_open
	     then call iox_$close (output_iocbp, code);
	     if of_file_att
	     then call iox_$detach_iocb (output_iocbp, code);
	end;


	if segs_allocated
	then do;
	     segs_allocated = "0"b;
	     call release_temp_segments_ (name, ptr_array, code);
	end;
	return;

     end clean_up;

/* Procedure to scan the argument list */
scan_args:
     proc;

dcl  fnp_no fixed bin;
dcl  parse_fnp_name_ entry (char (*), fixed bin);

	do while (more_args);			/* Do while thins to look at */
	     call get_arg;


	     if arg = "-from" | arg = "-fm"
	     then do;				/* Start time */
		from_sw = "1"b;
		call time_arg (from_time);
	     end;

	     else if arg = "-to"
	     then do;				/* Ending time */
		to_sw = "1"b;
		call time_arg (to_time);
	     end;

	     else if arg = "-for"
	     then do;				/* Time limit */
		for_sw = "1"b;
		call time_arg (for_time);		/* For syntax checking only */
		for_len = arg_len;			/* Save pointer to this argument */
		for_ptr = arg_ptr;
	     end;

	     else if arg = "-expand"
	     then expand_sw = "1"b;

	     else if arg = "-of" | arg = "output_file"
	     then do;
		if more_args
		then do;
		     call get_arg;

		     if index (arg, "-") ^= 1
		     then of_path = arg;
		     else do;
			of_path = rtrim (name) || ".output";
			call put_arg;
		     end;
		end;
		else of_path = rtrim (name) || ".output";
		short_display_sw = "0"b;
		output_file = "1"b;
	     end;

	     else if arg = "-ext" | arg = "-extend"
	     then ext_file = "1"b;

	     else if index (arg, "-") ^= 1
	     then do;
		call parse_fnp_name_ (arg, fnp_no);
		if fnp_no < 0
		then do;
		     call com_err_ (0, name, "Invalid FNP name: ^a", arg);
		     go to done;
		end;
		do check_fnp = 1 to fnp_cnt;
		     if arg = work.fnpreq (check_fnp)
		     then goto skip;
		end;

		if fnp_cnt = hbound (work.fnpreq, 1)
		then do;
		     call com_err_ (0, name, "There were more than ^d FNPs specified.", hbound (work.fnpreq, 1));
		     go to done;
		end;

		fnp_cnt = fnp_cnt + 1;		/* Count FNP found */
		all_fnps = "0"b;
		work.fnpreq (fnp_cnt) = arg;		/* Save name */
skip:
	     end;

	     else do;				/* Bad arg */
		call com_err_ (error_table_$badopt, name, "^a", arg);
		go to done;
	     end;
	end;

	if to_sw & for_sw
	then do;					/* Conflict */
	     call com_err_ (error_table_$inconsistent, name, "-to and -for");
	     go to done;
	end;
	if ext_file & ^output_file
	then do;
	     call com_err_ (error_table_$inconsistent, name, "-extend without -output_file");
	     go to done;
	end;


	return;

     end scan_args;

/* Procedure to return the next argument from command line */

get_arg:
     proc;

	call cu_$arg_ptr_rel (arg_no, arg_ptr, arg_len, code, arg_list_ptr);
	if code ^= 0
	then do;					/* Should never happen */
	     call com_err_ (code, name, "Arg ^d", arg_no);
	     go to done;
	end;
	arg_no = arg_no + 1;			/* For next call */
	more_args = (arg_no <= arg_count);
	return;

put_arg:
     entry;					/* Entry to return argument after scanning too far */
	arg_no = arg_no - 1;
	more_args = (arg_no <= arg_count);
	return;

     end get_arg;

/* Procedure to convert a time argument */

time_arg:
     proc (t);

dcl  t fixed bin (71);				/* The time to ouput */
dcl  arg_copy char (10) var;				/* Save copy of arg here */

	arg_copy = arg;
	if ^more_args
	then do;					/* Must be more */
	     call com_err_ (0, name, "Argument required after ^a.", arg_copy);
	     go to done;
	end;
	call get_arg;
	call convert_date_to_binary_ (arg, t, code);
	if code ^= 0
	then do;
	     call com_err_ (code, name, "^a ^a", arg_copy, arg);
	     go to done;
	end;

	return;

     end time_arg;


%include syserr_message;
%include poll_fnp_data;
%include line_types;

%include syserr_binary_def;

     end fnp_data_summary;
