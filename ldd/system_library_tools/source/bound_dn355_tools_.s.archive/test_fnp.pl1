/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


test_fnp: proc options (variable);

/* test_fnp - T & D that runs the offline FNP T & D tests (tst3bt) on an FNP
   that is offline (not known to the answering service).  The tests that are run
   on the fnp, are located in the general T & D repository
   >system_library_tandd>tandd_deck_file.  They are put there by the
   load_tandd_library command using a "-fnp_tape" control argument when loading
   an FNP Binary Deck Tape (this tape is available from you're friendly FER).
   The documentation for the tests that are run on the FNP, can be found in "T &
   D Microfiche Documentation" box (also available from you're friendly FER) in
   the front of the program listing.

   Originally written by B. S. Greenberg 1/80
   Modified by J. A. Bush 8/81 for release with MR9.0
*/

dcl  program_interrupt condition;
dcl  tandd_$fnp_tandd_setup entry (fixed bin, fixed bin (71), fixed bin (35));
dcl  tandd_$fnp_tandd_detach entry (fixed bin, fixed bin (35));
dcl  tandd_$fnp_tandd_mask entry (fixed bin, fixed bin (35));
dcl  tandd_$fnp_tandd_send_int entry (fixed bin, fixed bin (3), fixed bin (35));
dcl  tandd_$fnp_tandd_get_ints entry (fixed bin, bit (2) aligned, fixed bin (35));
dcl (tandd_$fnp_tandd_read, tandd_$fnp_tandd_write)
     entry (fixed bin, ptr, fixed bin (18), fixed bin (15), fixed bin, fixed bin (35));
dcl  timer_manager_$alarm_wakeup entry (fixed bin (71), bit (2), fixed bin (71));
dcl  ask_$ask_clr entry;
dcl  ask_ entry options (variable);
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  com_err_ entry options (variable);
dcl  iox_$look_iocb entry (char (*), ptr, fixed bin (35));
dcl  iox_$get_line entry (ptr, ptr, fixed bin (21), fixed bin (21), fixed bin (35));
dcl  iox_$put_chars entry (ptr, ptr, fixed bin (21), fixed bin (35));
dcl  iox_$close entry (ptr, fixed bin (35));
dcl  iox_$detach_iocb entry (ptr, fixed bin (35));
dcl  ipc_$create_ev_chn entry (fixed bin (71), fixed bin (35));
dcl  ipc_$delete_ev_chn entry (fixed bin (71), fixed bin (35));
dcl  ipc_$block entry (ptr, ptr, fixed bin (35));
dcl  tolts_util_$search entry (ptr, char (32), ptr, fixed bin, fixed bin (35));
dcl  tolts_util_$bci_to_ascii entry (bit (*), char (*) varying, fixed bin);
dcl  tolts_alm_util_$ascii_to_bci_ entry (char (*), bit (*));
dcl  hcs_$initiate entry (char (*), char (*), char (*), fixed bin (5), fixed bin (2), ptr, fixed bin (35));
dcl  hcs_$truncate_seg entry (ptr, fixed bin, fixed bin (35));
dcl  hcs_$wakeup entry (bit (*), fixed bin (71), fixed bin (71), fixed bin (35));
dcl  get_process_id_ entry () returns (bit (36));
dcl  get_temp_segment_ entry (char (*), pointer, fixed bin (35));
dcl  release_temp_segment_ entry (char (*), pointer, fixed bin (35));

/* AUTOMATIC */

dcl (allow_pi, piflag) bit (1);
dcl  ask_ans char (32);
dcl  ascvar char (200) varying;
dcl  damage_85_86_flag bit (1);
dcl  save_pgmname char (6);
dcl (printer_switch, message_switch, input_switch) ptr;
dcl  rx fixed bin init (1);
dcl (exec_in_fnp, loader_loaded) bit (1);
dcl (loadsegptr, moduleptr) ptr;
dcl  modullen fixed bin (15);
dcl  deck_iocbp ptr init (null);
dcl  module_listp ptr;
dcl  cata_key char (32);
dcl  bcdbuf bit (6*6*64) unaligned;
dcl  chars_gotten fixed bin (21);
dcl  ascbuf char (200);
dcl  argno fixed bin;
dcl  arglen fixed bin;
dcl  code fixed bin (35);
dcl  fnp_no fixed bin;
dcl  fnp_type_str char (4);
dcl  fnp_type fixed bin;
dcl  argp ptr;
dcl  execname char (6);
dcl  temp_ptr ptr;
dcl  temp_arg char (32);
dcl  fnp_tag char (1);

/* CONSTANT */

dcl  myname char (32) options (constant) static init ("test_fnp");
dcl  fnp_interrupt_vector_word bit (36) static options (constant) init ("000334000777"b3);
dcl  bcd_dkend bit (72) int static options (constant) init
    ("532020202020202442254524"b3);			/* "$      dkend" in bcd */
dcl  NL char (1) int static options (constant) init ("
");


/* BASED */

dcl  arg char (arglen) based (argp);
dcl  bcd_array (0 : 6*64 - 1) bit (6) unaligned based (addr (bcdbuf));
dcl  three_words bit (36) aligned dim (3) based;

/* EXTERNAL STATIC */

dcl  error_table_$timeout fixed bin (35) ext static;
dcl  error_table_$moderr fixed bin (35) ext static;
dcl  error_table_$bad_arg fixed bin (35) ext static;
dcl  error_table_$badopt fixed bin (35) ext static;
dcl  error_table_$noarg fixed bin (35) ext static;
dcl  error_table_$noentry fixed bin (35) ext static;
dcl  error_table_$too_many_args fixed bin (35) ext static;
dcl (iox_$user_output, iox_$user_input) ptr external static;

/* STRUCTURES */

dcl 1 idb,
    2 pad1 bit (21) unaligned,
    2 fnp_address fixed bin (15) unsigned unaligned,
    2 tally fixed bin (18) unsigned unaligned,
    2 pad2 bit (15) unaligned,
    2 request_code fixed bin (3) unsigned unaligned;


dcl 1 module_list aligned based (module_listp),
    2 n fixed bin,
    2 name (0 refer (module_list.n)) char (24) unal;

dcl  wait_list (10) fixed bin;

/* BUILTIN */

dcl (addr, addrel, before, bin, bit, currentsize, clock, divide, fixed, index, length, ltrim, min,
     mod, null, ptr, reverse, rtrim, substr, unspec) builtin;
dcl (linkage_error, cleanup, finish) condition;
%page;

	input_switch, message_switch, printer_switch = null ();
	fnp_no = -1;
	execname = "bos";
	do argno = 1 by 1;
	     call cu_$arg_ptr (argno, argp, arglen, code);
	     if code ^= 0 then go to end_arg_processing;
	     if substr (arg, 1, 1) ^= "-" then do;
		if fnp_no ^= -1 then do;
		     call com_err_ (error_table_$too_many_args, myname, "FNP tag multiply specified");
		     return;
		end;
		fnp_no = index ("abcdefghABCDEFGH", arg);
		if length (arg) = 1 & fnp_no ^= 0 then do;
		     if fnp_no > 8 then fnp_no = fnp_no - 8;
		     fnp_tag = substr ("ABCDEFGH", fnp_no);
		end;
		else do;
		     call com_err_ (error_table_$bad_arg, myname, "Bad FNP tag: ^a.", arg);
		     return;
		end;
	     end;
	     else if arg = "-exec" then do;
		argno = argno + 1;
		call cu_$arg_ptr (argno, argp, arglen, code);
		if code ^= 0 then do;
		     call com_err_ (code, myname, "Exec name (ios or bos) missing.");
		     return;
		end;
		if arg = "bos" then execname = "bos";
		else if arg = "BOS" then execname = "bos";
		else if arg = "ios" then execname = "ios";
		else if arg = "IOS" then execname = "ios";
		else do;
		     call com_err_ (error_table_$bad_arg, myname, "Bad exec name.  Must be IOS or BOS.");
		     return;
		end;
	     end;
	     else if arg = "-osw" | arg = "-output_switch"
	     | arg = "-msw" | arg = "-message_switch"
	     | arg = "-isw" | arg = "-input_switch" then do;

		temp_arg = arg;
		argno = argno + 1;
		call cu_$arg_ptr (argno, argp, arglen, code);
		if code ^= 0 then do;
		     call com_err_ (code, myname, "Missing switch name after ^a.", temp_arg);
		     return;
		end;
		call iox_$look_iocb (arg, temp_ptr, code);
		if code ^= 0 then do;
		     call com_err_ (code, myname, "^a", arg);
		     return;
		end;
		if temp_arg = "-msw" | temp_arg = "-message_switch" then message_switch = temp_ptr;
		else if temp_arg = "-isw" | temp_arg = "-input_switch" then input_switch = temp_ptr;
		else if temp_arg = "-osw" | temp_arg = "-output_switch" then printer_switch = temp_ptr;
	     end;

	     else do;
		call com_err_ (error_table_$badopt, myname, "^a", arg);
		return;
	     end;
	end;
end_arg_processing:
	if fnp_no = -1 then do;
	     call com_err_ (error_table_$noarg, myname, "A FNP tag must be provided.");
	     return;
	end;

	if message_switch = null then message_switch = iox_$user_output;
	if printer_switch = null then printer_switch = iox_$user_output;
	if input_switch = null then input_switch = iox_$user_input;


	event_wait_list_n_channels = 1;
	event_wait_list_ptr = addr (wait_list);
	event_wait_list.channel_id (1) = 0;
	event_wait_list.n_channels = 1;
	loadsegptr = null;

	on cleanup call clean_up;
	on finish call clean_up;

	call ipc_$create_ev_chn (event_wait_list.channel_id (1), code);
	if code ^= 0 then do;
	     call com_err_ (0, myname, "Could not create IPC channel");
	     return;
	end;
	call get_temp_segment_ (myname, loadsegptr, code);
	if code ^= 0 then do;
	     call com_err_ (code, myname, "Getting FNP core load segment.");
	     call clean_up;
	     return;
	end;

	call hcs_$initiate (">system_control_1", "cdt", "", 0b, 0, cdtp, code);
	if cdtp ^= null then do;			/* if user has access to the cdt */
	     fnpep = addr (cdt.fnp_entry (fnp_no));	/* get ptr to fnp entry */
	     fnp_type = fnpe.type;
	     fnp_type_str = substr (fnp_types (fnp_type), 3);
	     if fnp_type_str = "355" then fnp_type_str = "6600"; /* these are the same */
	end;
	else do;					/* user does not have access to cdt, we must ask
						   him what kind of FNP he is trying to test */
	     call ask_$ask_clr;
	     call com_err_ (0, myname, "What is the FNP type of FNP ^a?", fnp_tag);
	     ask_ans = "";
	     do while (ask_ans = "");
		call ask_ ("Answer DN6600, DN6670, DN355, or quit. ", ask_ans);
		if ask_ans = "quit" then do;		/* user wants to forget it all */
		     call clean_up;
		     return;
		end;
		ask_ans = substr (ask_ans, 3);	/* forget about case of prefix, don't care */
		if ask_ans = "355" then do;
		     fnp_type_str = "6600";
		     fnp_type = DN355;
		end;
		else if ask_ans = "6600" then do;
		     fnp_type_str = "6600";
		     fnp_type = DN6600;
		end;
		else if ask_ans = "6670" then do;
		     fnp_type_str = "6670";
		     fnp_type = DN6670;
		end;
		else ask_ans = "";
	     end;
	end;

/* Now find the fnp test catalog record in the tandd_deck_file */

	cata_key = "cata.fnp.pol." || fnp_type_str;

	call tolts_util_$search (deck_iocbp, cata_key, module_listp, (0), code);
	if code ^= 0 then do;
	     call com_err_ (code, myname, "Unable to find catalog for ^a. Deckfile may be damaged.", cata_key);
	     call clean_up;
	     return;
	end;

	on linkage_error begin;
	     call com_err_ (error_table_$moderr, myname,
		"Access to the gate >sl1>tandd_ is required to use this program.");
	     call clean_up;
	     go to nlret;
	end;
	call tandd_$fnp_tandd_setup (fnp_no, event_wait_list.channel_id (1), code);
	revert linkage_error;
	if code ^= 0 then do;
	     call com_err_ (code, myname, "Setting up T & D on FNP ^a.", fnp_tag);
	     call clean_up;
	     return;
	end;

%page;
/* Start the actual testing */

	damage_85_86_flag = "0"b;
	call tandd_$fnp_tandd_mask (fnp_no, code);
	if code ^= 0 then do;
	     call com_err_ (code, myname, "Issuing mask PCW to FNP ^a DIA.", fnp_tag);
	     call clean_up;
	     return;
	end;
	call find_and_send_required_module ("Interrupt and fault vectors", "95", "00000"b3);
	call find_and_send_required_module ("Primitive function test 1", "96", "04000"b3);
	call exchange_terminate_interrupts (code);
	if code ^= 0 then call perm_fail ("Cannot start primitive function test 1");
	call find_and_send_required_module ("Primitive function test 2", "97", "01000"b3);
	call exchange_terminate_interrupts (code);
	if code ^= 0 then call perm_fail ("Cannot start primitive function test 2");
ldrs:	exec_in_fnp = "0"b;
	call load_fnp_interrupt_vectors;
	call load_required_module ("I/O package", "99");
	if execname = "bos" then call load_required_module ("FNP BOS", "20");
	else call load_required_module ("FNP IOS", "io");

/* Wait for FNP to request service */
	allow_pi = "0"b;
	on program_interrupt begin;
	     piflag = "1"b;
	     if allow_pi then
		call hcs_$wakeup (get_process_id_ (), event_wait_list.channel_id (1), 0, (0));
	end;
fnp_service_loop:
	exec_in_fnp = "1"b;				/* Says where to shove card buffers */
	allow_pi = "0"b;				/* No PI's yet */
	call wait (7, 0, (0));			/* Wait for a level 7 */
	call read_idb;				/* See what he wants */
	if idb.request_code = 1 | idb.request_code = 3 then do; /* Write */
	     bcd_array (*) = "17"b3;			/* Ignore */
	     call read_fnp ((idb.fnp_address), (idb.tally), addr (bcd_array)); /* Read message */
	     call tolts_util_$bci_to_ascii (bcdbuf, ascvar, idb.tally * 3);
	     if idb.request_code = 1 then temp_ptr = message_switch;
	     else do;
		temp_ptr = printer_switch;
		ascvar = ascvar || NL;
	     end;
	     call iox_$put_chars (temp_ptr, addrel (addr (ascvar), 1), length (ascvar), code);
	     if code ^= 0 then do;
		call com_err_ (code, myname, "Could not output msg to ^[message^;printer^] switch",
		     idb.request_code = 1);
	     end;
	     call tandd_$fnp_tandd_send_int (fnp_no, 3, code);
	     if code ^= 0 then
		call com_err_ (code, myname, "Attempting to send level 3 after console/printer write.");
	end;
	else if idb.request_code = 2 then do;		/* Console read */
	     call iox_$get_line (input_switch, addr (ascbuf), length (ascbuf), chars_gotten, code);
	     if code ^= 0 then do;
		call com_err_ (code, myname, "Error reading input switch.");
		go to fnp_service_loop;
	     end;
	     if chars_gotten > 0 then
		if substr (ascbuf, chars_gotten, 1) = NL then
		     chars_gotten = chars_gotten - 1;
	     ascvar = ltrim (substr (ascbuf, 1, chars_gotten));
	     if rtrim (ascvar) = "QUIT" | rtrim (ascvar) = "quit"
	     then call perm_fail ("Program aborted by user.");
	     call tolts_alm_util_$ascii_to_bci_ ((ascvar), bcdbuf);
	     if mod (idb.tally, 2) = 1 then substr (bcdbuf, 1 + 18 * idb.tally, 18) = "171717"b3;
	     call write_fnp ((idb.fnp_address), (idb.tally), addr (bcdbuf));
	     call tandd_$fnp_tandd_send_int (fnp_no, 3, code);
	     if code ^= 0 then
		call com_err_ (code, myname, "Attempting to send level 3 after console read");
	end;
	else if idb.request_code = 4 then do;		/* Load pgm */
	     substr (bcdbuf, 1, 18) = bit (fixed (idb.tally, 18), 18);
	     call tolts_util_$bci_to_ascii (substr (bcdbuf, 1, 12), ascvar, 2);
	     if ascvar = "00" then ascvar = next_program ();
	     if ascvar = "io" then do;
		execname = "ios";
		go to ldrs;
	     end;
	     else if ascvar = "20" then do;
		execname = "bos";
		go to ldrs;
	     end;
	     if ascvar = "85" | ascvar = "86" then do;
		save_pgmname = ascvar;
		exec_in_fnp = "0"b;
		call load_fnp_interrupt_vectors;
		damage_85_86_flag = "1"b;
		ascvar = rtrim (save_pgmname);
	     end;
	     call load_program ((ascvar), code);
	     if code ^= 0 then call com_err_ (code, myname, "Error loading ^a", ascvar);
	end;
	else call com_err_ (0, myname, "Unrecognized idb request code: ^d.^/IDB: ^w ^w ^w",
	     idb.request_code, addr (idb) -> three_words);
	go to fnp_service_loop;
pi_person:
	allow_pi = "0"b;
	if damage_85_86_flag then do;
	     call ask_$ask_clr;
	     call com_err_ (0, myname, "Exec has been destroyed.");
	     ask_ans = "";
	     do while (ask_ans = "");
		call ask_ ("Which exec (IOS or BOS) do you want? ", ask_ans);
		if ask_ans = "QUIT" | ask_ans = "quit" then
		     call perm_fail ("Program aborted by user.");
		else if ask_ans = "IOS" then ask_ans = "ios";
		else if ask_ans = "BOS" then ask_ans = "bos";
		else ask_ans = "";
	     end;
	     execname = ask_ans;
	     damage_85_86_flag = "0"b;
	     go to ldrs;
	end;
	call tandd_$fnp_tandd_send_int (fnp_no, 7, code);
	if code ^= 0 then call com_err_ (code, myname, "Attempting to send level 7 for request.");
	go to fnp_service_loop;

nlret:	return;					/* taget of non-local gotos */
%page;
/* Necessary subroutines that do all the work */

find_and_send_required_module: proc (a_description, a_testid, a_fnp_address);
dcl  a_description char (*);
dcl  a_testid char (2);
dcl  a_fnp_address bit (15);
dcl  moduleptr ptr;
dcl  modullen fixed bin (15);

	     call get_and_load_module (a_testid, moduleptr, modullen, code);
	     if code ^= 0 then do;
		call com_err_ (code, myname, "Cannot locate or load ^a", a_description);
		call perm_fail ("Cannot send " || a_description);
	     end;
	     call write_fnp (fixed (a_fnp_address, 15), modullen, moduleptr);
	end find_and_send_required_module;

/* Send a level 3 to the FNP, and wait for one back. */

exchange_terminate_interrupts: proc (a_code);
dcl  a_code fixed bin (35);

	     call tandd_$fnp_tandd_send_int (fnp_no, 3, a_code);

	     if a_code ^= 0 then
		call com_err_ (a_code, myname, "Could not send level 3 to FNP ^a.", fnp_tag);
	     else call wait (3, 5, a_code);
	end exchange_terminate_interrupts;

/* Load FNP Interrupt vectors and loader */

load_fnp_interrupt_vectors: proc;

	     call write_fnp (bin ("62"b3, 15), 1, addr (fnp_interrupt_vector_word));
	     loader_loaded = "0"b;
	     call get_and_load_module ("98", moduleptr, modullen, code); /* Get loader */
	     if code ^= 0 then do;
		call com_err_ (code, myname, "Cannot get module 98 (FNP loader)");
		call perm_fail ("");
	     end;
	     call write_fnp (bin ("01000"b3, 15), modullen, moduleptr);
	     call tandd_$fnp_tandd_send_int (fnp_no, 3, code);
	     if code ^= 0 then call perm_fail ("Could not send interrupt after loading interrupt vectors");
	     loader_loaded = "1"b;
	end load_fnp_interrupt_vectors;

load_required_module: proc (exp, a_progname);
dcl  exp char (*), a_progname char (2);
	     call load_program (a_progname, code);
	     if code ^= 0 then do;
		call com_err_ (code, myname, "Cannot load ^a (^a), aborting", exp, a_progname);
		go to nlret;
	     end;
	end load_required_module;
%page;
load_program: proc (a_progname, a_code);

dcl  count fixed bin (15);
dcl  a_code fixed bin (35);
dcl  a_progname char (2);
dcl  fnp_address fixed bin (15);
dcl  deck_ptr ptr;
dcl  nextc fixed bin, nextcx fixed bin;

	     call get_deck_ptr (a_progname, deck_ptr, a_code);
	     if a_code ^= 0 then return;
	     call core_load (deck_ptr, nextc, "1"b);	/* put deck +rcws in buffer */
	     if exec_in_fnp then fnp_address = idb.fnp_address;
	     else fnp_address = bin ("01500"b3, 15);
	     do nextcx = 0 to nextc - 1 by 308;
		count = min (308, nextc - nextcx);
		call write_fnp (fnp_address, 2*count, ptr (loadsegptr, nextcx));
		call exchange_terminate_interrupts (a_code);
		if a_code ^= 0 then do;
		     call com_err_ (a_code,
			myname,
			"FNP loader missed interrupt for ^a; aborting load.", a_progname);
		     return;
		end;
	     end;
	     a_code = 0;
	     return;
	end load_program;
%page;
core_load: proc (a_deck_ptr, a_len, rcw_sw);

dcl  a_deck_ptr ptr;
dcl (a_len, nwds, ccl) fixed bin;
dcl (eof, rcw_sw) bit (1);
dcl  cc (ccl) bit (36) aligned based;

	     call hcs_$truncate_seg (loadsegptr, 0, (0));
	     a_len = 0;
	     eof = "0"b;
	     prptr = a_deck_ptr;			/* iterate through entire a_deck */
	     do while (^eof);			/* and copy bin card images into temp seg */
		lrptr = addr (gc_phy_rec.gc_phy_rec_data (1)); /* get pointer to first logical record */
		nwds = 0;
		do while (nwds < bcw.blk_size & ^eof);	/* iterate through all logical records */
		     if rcw.media_code = 2 then	/* bcd card image */
			if substr (gc_log_rec_bits, 1, 72) = bcd_dkend then /* dkend card */
			     eof = "1"b;		/* thats it folks */
			else;
		     else if rcw.media_code = 1 then do; /* binary card image */
			if rcw_sw then do;		/* if copying entire log rec.. */
			     ccl = rcw.rsize + 1;	/* add in rcw also */
			     ptr (loadsegptr, a_len) -> cc = lrptr -> cc; /* copy bin card image */
			     a_len = a_len + ccl;
			end;
			else if gc_log_rec_data (1) ^= "000500000000"b3 then do; /* unless xfer card, copy core image */
			     ccl = rcw.rsize - 1;	/* don't want sequence number */
			     ptr (loadsegptr, a_len) -> cc = addr (gc_log_rec_data) -> cc;
			     a_len = a_len + ccl;
			end;
		     end;
		     nwds = nwds + rcw.rsize + 1;	/* increment number of words */
		     lrptr = addrel (lrptr, currentsize (gc_log_rec)); /* set next logical record */
		end;
		prptr = addrel (prptr, currentsize (gc_phy_rec)); /* append next block */
	     end;
	     if ^rcw_sw then a_len = a_len * 2;		/* if  core image only... */

	end core_load;
%page;
read_fnp:	proc (a_fnpaddr, a_fnpcount, a_dataptr);

dcl  a_fnpaddr fixed bin (15);
dcl  a_fnpcount fixed bin (15);
dcl  a_dataptr ptr;
dcl  probe entry;

	     if a_fnpcount > divide (length (unspec (bcdbuf)), 18, 18, 0)
	     then do;
		call com_err_ (0, myname, "Garbage fnp read count: ^d: calling probe.", a_fnpcount);
		call probe;
		return;
	     end;
	     call tandd_$fnp_tandd_read (fnp_no, a_dataptr, divide (1+ a_fnpcount, 2, 17, 0), a_fnpaddr, fnp_type, code);
	     if code ^= 0 then do;
		call com_err_ (code, myname, "Cannot read FNP ^a loc. ^o", fnp_tag, a_fnpaddr);
		call perm_fail ("");
	     end;
	end read_fnp;

write_fnp: proc (a_fnpaddr, a_fnpcount, a_dataptr);

dcl  a_fnpaddr fixed bin (15);
dcl  a_fnpcount fixed bin (15);
dcl  a_dataptr ptr;

	     call tandd_$fnp_tandd_write (fnp_no, a_dataptr, divide (1+ a_fnpcount, 2, 17, 0), a_fnpaddr, fnp_type, code);
	     if code ^= 0 then do;
		call com_err_ (code, myname, "Cannot write FNP ^a loc. ^o", fnp_tag, a_fnpaddr);
		call perm_fail ("");
	     end;
	end write_fnp;

read_idb:	proc ();

	     call read_fnp (bin ("04004"b3, 15), 4, addr (idb));
	end read_idb;

%page;
wait:	proc (ilevel, interval, a_code);

dcl  ilevel fixed bin, interval fixed bin, a_code fixed bin (35);
dcl  crap (8) fixed bin;
dcl  start fixed bin (71);
dcl (l3_happened, l7_happened) bit (1);

	     call get_int_status;
	     if a_code ^= 0 then return;
	     allow_pi = "1"b;
	     piflag = "0"b;
	     do while (^(needed_int () | piflag));
		start = clock ();
		if interval ^= 0 then
		     call timer_manager_$alarm_wakeup ((interval), "11"b, event_wait_list.channel_id (1));
		call ipc_$block (addr (event_wait_list), addr (crap), a_code);
		if a_code ^= 0 then return;
		call get_int_status;
		if a_code ^= 0 then return;
		if interval ^= 0 & ^piflag & ^needed_int () & (clock () - start) > 1000000 * interval then do;
		     a_code = error_table_$timeout;
		     return;
		end;
		if piflag then go to pi_person;
	     end;
	     allow_pi = "0"b;
	     a_code = 0;
	     return;

get_int_status: proc;
dcl  temp_ints bit (2) aligned;

		call tandd_$fnp_tandd_get_ints (fnp_no, temp_ints, a_code);
		if a_code ^= 0 then return;
		l3_happened = substr (temp_ints, 1, 1);
		l7_happened = substr (temp_ints, 2, 1);
	     end get_int_status;

needed_int:    proc returns (bit (1) aligned);

		return ((l3_happened & (ilevel = 3))
		     | (l7_happened & (ilevel = 7)));
	     end needed_int;

	end wait;
%page;
get_and_load_module: proc (a_modulename, a_moduleptr, a_modullen, a_code);

dcl  a_modulename char (2);
dcl  a_moduleptr ptr;
dcl  a_modullen fixed bin (15);
dcl  modullen fixed bin;
dcl  a_code fixed bin (35);
dcl  deck_ptr ptr;

	     call get_deck_ptr (a_modulename, deck_ptr, a_code);
	     if a_code ^= 0 then return;
	     call core_load (deck_ptr, modullen, "0"b);	/* go core load module */
	     a_moduleptr = loadsegptr;
	     a_modullen = modullen;
	end get_and_load_module;


next_program: proc returns (char (2));

	     rx = rx + 1;				/* increment roving index */
	     return (substr (reverse (before (reverse (module_list.name (rx)), ".")), 1, 2));
	end next_program;


get_deck_ptr: proc (a_modulename, a_deckptr, a_code);
dcl  a_modulename char (*);
dcl  a_deckptr ptr;
dcl  a_code fixed bin (35);
dcl (i, j) fixed bin;

	     if rx = module_list.n then		/* if we are at the top */
		j = 1;
	     else j = rx;				/* start from rx and go forward */
retry_search:
	     do i = j to module_list.n;		/* go through entire catalog */
		if a_modulename =
		substr (reverse (before (reverse (module_list.name (i)), ".")), 1, 2) then do;
		     rx = i;			/* set roving index */
		     call tolts_util_$search (deck_iocbp, (module_list.name (i)), a_deckptr, (0), a_code);
		     return;			/* we found it return */
		end;
	     end;
	     if rx < module_list.n & rx ^= 1 then do;	/* if we started in middle, try again */
		rx, j = 1;
		go to retry_search;
	     end;
	     a_code = error_table_$noentry;		/* we didn't find it */
	     a_deckptr = null;			/* return null ptr */
	end get_deck_ptr;
%page;
clean_up:	proc;
	     on linkage_error go to cleanup_ret;
	     call tandd_$fnp_tandd_detach (fnp_no, (0));
	     revert linkage_error;
cleanup_ret:
	     if loadsegptr ^= null then
		call release_temp_segment_ (myname, loadsegptr, (0));
	     if event_wait_list.channel_id (1) ^= 0 then
		call ipc_$delete_ev_chn (event_wait_list.channel_id (1), (0));
	     if deck_iocbp ^= null then do;		/* if we have opened deckfile... */
		call iox_$close (deck_iocbp, (0));	/* close and detach it */
		call iox_$detach_iocb (deck_iocbp, (0));
		deck_iocbp = null;
	     end;

	end clean_up;

perm_fail:
	proc (excuse);
dcl  excuse char (*);
	     call com_err_ (0, myname, "^a", excuse);
	     call clean_up;
	     go to nlret;
	end perm_fail;

%page;
%include cdt;
%include author_dcl;
%include event_wait_list;
%include event_wait_info;
%include gcos_ssf_records;

     end test_fnp;
