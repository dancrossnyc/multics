/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* POLL_FNP - Command to periodically log the statistics for FNPs */
/* Written July 1981 by Robert Coren, in imitation of poll_mpc */
/* Modified October 1982 by C. Hornig for new config tools. */
/* Modified 83-12-15 BIM for prph fnp cards */

/* format: style4,delnl,insnl,^ifthendo */
poll_fnp:
     proc;

/* Parameters */

dcl  arg_event_call_info_ptr ptr;

/* Automatic */

dcl  code fixed bin (35);
dcl  argp ptr;
dcl  argl fixed bin;
dcl  log_fnp_entryp ptr;
dcl  log_fnp_data_n_fnps fixed bin;
dcl  time_sw bit (1);
dcl  output_file_sw bit (1);
dcl  log_sw bit (1);
dcl  off_sw bit (1);
dcl  on_sw bit (1);
dcl  finish_sw bit (1);
dcl  debug_sw bit (1);
dcl  fnp_cnt fixed bin;
dcl  time_int fixed bin;
dcl  fnp_list (8) char (4);
dcl  argno fixed bin;
dcl  n_args fixed bin;
dcl  more_args bit (1);
dcl  arg_list_ptr ptr;
dcl  output_file char (201);
dcl  log_fnp_datap ptr;
dcl  (i, j) fixed bin;
dcl  char8 char (8) aligned;
dcl  event_message fixed bin (71);
dcl  fnp_x fixed bin;
dcl  fnp_name char (4);
dcl  starname (1) char (32);
dcl  meter_areap ptr;
dcl  orig_chan_meterp ptr;
dcl  meterp ptr;
dcl  n_channels fixed bin;
dcl  chanx fixed bin;
dcl  n_stats fixed bin;


/* Constants */

dcl  name char (8) int static options (constant) init ("poll_fnp");

/* Static */

dcl  static_log_fnp_datap ptr int static init (null);

/* Based */

dcl  arg char (argl) based (argp);

dcl  1 log_fnp_data aligned based (log_fnp_datap),
       2 n_fnps fixed bin,				/* Number of fnps configured */
       2 overrun_count fixed bin,			/* Consecutive polling cycles missed because previous one slow */
       2 timer_event fixed bin (71),			/* Event channel for driving polling */
       2 next_cycle_sched fixed bin (71),		/* Time of next scheduled run */
       2 interval fixed bin (71),			/* Time (in microseconds) between scheduled runs */
       2 iocbp ptr,
       2 flags unal,
         3 debug bit (1),
         3 log bit (1),
         3 output_file bit (1),
         3 finish bit (1),
         3 pad bit (32),
       2 attach_desc char (256) varying,
       2 fnp_entry (log_fnp_data_n_fnps refer (log_fnp_data.n_fnps)) like log_fnp_entry;

dcl  1 log_fnp_entry aligned based (log_fnp_entryp),
       2 fnp_name char (4),
       2 model fixed bin,
       2 times_dumped fixed bin (35),
       2 times_failed fixed bin (35),
       2 on bit (1);


/* External */

dcl  config_$find_2 entry (character (4) aligned, character (4) aligned, pointer);
dcl  com_err_ entry options (variable);
dcl  cu_$arg_count entry (fixed bin, fixed bin (35));
dcl  absolute_pathname_ entry (char (*), char (*), fixed bin (35));
dcl  cu_$arg_list_ptr entry (ptr);
dcl  cu_$arg_ptr_rel entry (fixed bin, ptr, fixed bin, fixed bin (35), ptr);
dcl  get_process_id_ entry () returns (bit (36));
dcl  get_system_free_area_ entry (ptr);
dcl  get_fnp_name_ entry (fixed bin) returns (char (32));
dcl  hcs_$initiate entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr, fixed bin (35));
dcl  hcs_$wakeup entry (bit (*), fixed bin (71), fixed bin (71), fixed bin (35));
dcl  (
     ioa_,
     ioa_$nnl
     ) entry options (variable);
dcl  ipc_$create_ev_chn entry (fixed bin (71), fixed bin (35));
dcl  ipc_$decl_ev_call_chn entry (fixed bin (71), ptr, ptr, fixed bin, fixed bin (35));
dcl  timer_manager_$reset_alarm_wakeup entry (fixed bin (71));
dcl  ipc_$drain_chn entry (fixed bin (71), fixed bin (35));
dcl  timer_manager_$alarm_wakeup entry (fixed bin (71), bit (2), fixed bin (71));
dcl  ipc_$delete_ev_chn entry (fixed bin (71), fixed bin (35));
dcl  iox_$attach_name entry (char (*), ptr, char (*), ptr, fixed bin (35));
dcl  iox_$open entry (ptr, fixed bin, bit (1) aligned, fixed bin (35));
dcl  iox_$close entry (ptr, fixed bin (35));
dcl  iox_$detach_iocb entry (ptr, fixed bin (35));
dcl  iox_$put_chars entry (ptr, ptr, fixed bin (21), fixed bin (35));
dcl  hphcs_$syserr_binary entry options (variable);
dcl  comm_meters_ entry ((*) char (*), fixed bin, ptr, fixed bin, ptr, fixed bin (35));
dcl  comm_meters_$free entry (ptr, ptr, fixed bin (35));
dcl  find_condition_info_ entry (ptr, ptr, fixed bin (35));
dcl  continue_to_signal_ entry (fixed bin (35));

dcl  error_table_$too_many_args ext fixed bin (35);
dcl  error_table_$noarg ext fixed bin (35);
dcl  error_table_$badopt ext fixed bin (35);
dcl  error_table_$inconsistent ext fixed bin (35);

/* Internal static */

dcl  SYS_CONTROL_DIR char (17) internal static options (constant) init (">system_control_1");

/* Conditions & builtins */

dcl  (cleanup, conversion, sub_error_) condition;

dcl  (addr, bin, clock, codeptr, currentsize, hbound, index, null, rtrim, sum, unspec) builtin;
%page;
/* Command entry to setup the command */

	call cu_$arg_count (n_args, code);
	if code ^= 0
	then do;
	     call com_err_ (code, name);
	     return;
	end;
	call cu_$arg_list_ptr (arg_list_ptr);
	argno = 1;
	more_args = (argno <= n_args);

	time_sw = "0"b;
	output_file_sw = "0"b;
	log_sw = "0"b;
	off_sw = "0"b;
	on_sw = "0"b;
	finish_sw = "0"b;
	debug_sw = "0"b;
	fnp_cnt = 0;
	log_fnp_datap = null ();

	do while (more_args);
	     call get_arg;
	     if index (arg, "-") ^= 1
	     then do;				/* Must be fnp name */
		if fnp_cnt >= hbound (fnp_list, 1)
		then do;
		     call com_err_ (error_table_$too_many_args, name, "More than ^d FNPs listed.",
			hbound (fnp_list, 1));
		     go to error_return;
		end;
		fnp_cnt = fnp_cnt + 1;
		fnp_list (fnp_cnt) = arg;
	     end;
	     else if arg = "-time" | arg = "-tm"
	     then do;
		if ^more_args
		then do;
missing:
		     call com_err_ (error_table_$noarg, name, "After ^a.", arg);
		     go to error_return;
		end;
		call get_arg;
		on conversion go to bad_time;
		time_int = bin (arg);
		revert conversion;
		if time_int <= 0
		then do;
bad_time:
		     call com_err_ (0, name, "Invalid time specified: ^a", arg);
		     go to error_return;
		end;
		time_sw = "1"b;
	     end;
	     else if arg = "-output_file" | arg = "-of"
	     then do;
		if ^more_args
		then go to missing;
		call get_arg;
		call absolute_pathname_ (arg, output_file, code);
		if code ^= 0
		then do;
		     call com_err_ (code, name, "^a", arg);
		     go to error_return;
		end;
		output_file_sw = "1"b;
	     end;
	     else if arg = "-log"
	     then log_sw = "1"b;
	     else if arg = "-stop" | arg = "-sp"
	     then do;
		off_sw = "1"b;
		on_sw = "0"b;
	     end;
	     else if arg = "-start" | arg = "-sr"
	     then do;
		on_sw = "1"b;
		off_sw = "0"b;
	     end;
	     else if arg = "-finish"
	     then finish_sw = "1"b;
	     else if arg = "-debug" | arg = "-db"
	     then debug_sw = "1"b;
	     else do;
		call com_err_ (error_table_$badopt, name, "^a", arg);
		go to error_return;
	     end;
	end;

/* This code handles modifications to running polling */

	if static_log_fnp_datap ^= null ()
	then do;
	     log_fnp_datap = static_log_fnp_datap;
	     if log_fnp_data.finish
	     then do;
		call com_err_ (0, name, "Finish operation in progress.  Requests not accepted until it completes.");
		go to error_return;
	     end;
	     if n_args = 0
	     then do;				/* Some argument required to adjust polling */
		call com_err_ (error_table_$noarg, name, "Polling already in progress.");
		go to error_return;
	     end;
	     if time_sw
	     then log_fnp_data.interval = 60 * 1000000 * time_int;
	     if debug_sw
	     then log_fnp_data.debug = "1"b;
	     if output_file_sw
	     then do;
		log_fnp_data.attach_desc = "vfile_ " || rtrim (output_file) || " -extend";
		log_fnp_data.output_file = "1"b;
	     end;
	     if log_sw
	     then log_fnp_data.log = "1"b;
	     if on_sw | off_sw | (fnp_cnt > 0)
	     then do;
		if fnp_cnt > 0
		then call validate_fnp_list;
		if ^(on_sw | off_sw)
		then on_sw = "1"b;
		do i = 1 to log_fnp_data.n_fnps;
		     log_fnp_entryp = addr (log_fnp_data.fnp_entry (i));
		     if listed_fnp ()
		     then log_fnp_entry.on = on_sw;
		end;
	     end;
	     if finish_sw
	     then do;
		call timer_manager_$reset_alarm_wakeup (log_fnp_data.timer_event);
		call ipc_$drain_chn (log_fnp_data.timer_event, code);
		char8 = "finish";
		unspec (event_message) = unspec (char8);
		call hcs_$wakeup (get_process_id_ (), log_fnp_data.timer_event, event_message, code);
		if code ^= 0
		then do;
		     call com_err_ (code, name, "Unable to send finish wakeup.");
		end;
		log_fnp_data.finish = "1"b;
	     end;
	     go to done;
	end;

/* This code handles starting polling for the first time */

	if on_sw | off_sw | finish_sw
	then do;
	     call com_err_ (error_table_$inconsistent, name,
		"Args -on, -off, -finish not permitted before polling started.");
	     go to error_return;
	end;
	if ^(log_sw | output_file_sw)
	then log_sw = "1"b;

	on cleanup call command_cleanup;

	call setup_static_data;

	log_fnp_data.iocbp = null ();
	log_fnp_data.debug = debug_sw;

	if fnp_cnt > 0
	then call validate_fnp_list;

	do i = 1 to log_fnp_data.n_fnps;
	     log_fnp_entryp = addr (log_fnp_data.fnp_entry (i));
	     if listed_fnp ()
	     then log_fnp_entry.on = "1"b;
	end;

	log_fnp_data.log = log_sw;
	if output_file_sw
	then do;
	     log_fnp_data.attach_desc = "vfile_ " || rtrim (output_file) || " -extend";
	     log_fnp_data.output_file = "1"b;
	end;

	if ^time_sw
	then time_int = 15;
	log_fnp_data.interval = time_int * 60 * 1000000;

	call ipc_$create_ev_chn (log_fnp_data.timer_event, code);
	if code ^= 0
	then do;
	     call com_err_ (code, name, "Unable to create event channel.");
	     go to error_return;
	end;
	call ipc_$decl_ev_call_chn (log_fnp_data.timer_event, codeptr (timer_wakeup), log_fnp_datap, 30, code);
						/* Priority = 30 appropriate in Initializer */
	if code ^= 0
	then do;
	     call com_err_ (code, name, "Unable to setup event call channel.");
	     go to error_return;
	end;

	char8 = "start";
	unspec (event_message) = unspec (char8);
	log_fnp_data.next_cycle_sched = clock ();
	call hcs_$wakeup (get_process_id_ (), log_fnp_data.timer_event, event_message, code);
	if code ^= 0
	then do;
	     call com_err_ (code, name, "Unable to send first wakeup.");
	     go to error_return;
	end;
	static_log_fnp_datap = log_fnp_datap;

done:
	return;

error_return:
	call command_cleanup;
	return;
%page;
/* Timer wakeup to start polling operation */

timer_wakeup:
     entry (arg_event_call_info_ptr);

	event_call_info_ptr = arg_event_call_info_ptr;
	log_fnp_datap = event_call_info.data_ptr;

	if log_fnp_datap ^= static_log_fnp_datap
	then return;				/* Spurious */
	if event_call_info.channel_id ^= log_fnp_data.timer_event
	then return;				/* Likewise */

	unspec (char8) = unspec (event_call_info.message);
	if log_fnp_data.debug
	then do;
	     call ioa_$nnl ("Timer wakeup: ^a. Processing:", char8);
	     do i = 1 to log_fnp_data.n_fnps;
		log_fnp_entryp = addr (log_fnp_data.fnp_entry (i));
		if log_fnp_entry.on
		then call ioa_$nnl (" ^a", log_fnp_entry.fnp_name);
	     end;
	     call ioa_ ("");
	end;



	if ^log_fnp_data.finish
	then do;
	     log_fnp_data.next_cycle_sched = log_fnp_data.next_cycle_sched + log_fnp_data.interval;
	     if log_fnp_data.next_cycle_sched <= clock ()
	     then do;
		call com_err_ (0, name, "Polling overrun. Previous cycle still in progress.");
		log_fnp_data.overrun_count = log_fnp_data.overrun_count + 1;
		if log_fnp_data.overrun_count >= 3
		then do;
		     log_fnp_data.finish = "1"b;
		     call com_err_ (0, name, "Polling abandoned. Too many polling overruns occured.");
		end;

		else do while (log_fnp_data.next_cycle_sched <= clock ());
		     log_fnp_data.next_cycle_sched = log_fnp_data.next_cycle_sched + log_fnp_data.interval;
		end;
	     end;
	     else log_fnp_data.overrun_count = 0;	/* Keeping up ok */

	     if ^log_fnp_data.finish
	     then call timer_manager_$alarm_wakeup (log_fnp_data.next_cycle_sched, "00"b, log_fnp_data.timer_event);
	end;

/* Attach output file if specified */

	if log_fnp_data.output_file
	then do;
	     call iox_$attach_name ("poll_fnp", log_fnp_data.iocbp, (log_fnp_data.attach_desc), null (), code);
	     if code ^= 0
	     then do;
		call com_err_ (code, name, "Unable to attach output file.");
		log_fnp_data.iocbp = null ();
		go to wrapup;
	     end;
	     call iox_$open (log_fnp_data.iocbp, Stream_output, "0"b, code);
	     if code ^= 0
	     then do;
		call com_err_ (code, name, "Unable to open output file.");
		call iox_$detach_iocb (log_fnp_data.iocbp, code);
		log_fnp_data.iocbp = null ();
	     end;
	end;

	on sub_error_
	     begin;

dcl  code fixed bin (35);
dcl  pass_on bit (1);
dcl  1 auto_cond_info aligned like condition_info;

		pass_on = "0"b;
		condition_info_ptr = addr (auto_cond_info);
		call find_condition_info_ (null (), condition_info_ptr, code);
		if code ^= 0			/* rather unlikely */
		then pass_on = "1"b;		/* but we'll let someone else worry about it */

		else if condition_info.info_ptr = null () | condition_info.condition_name ^= "sub_error_"
						/* we're not about to deal with this */
		then pass_on = "1"b;

		else do;
		     sub_error_info_ptr = condition_info.info_ptr;
		     if sub_error_info.name ^= "comm_meters_"
						/* not someone we know */
		     then pass_on = "1"b;
		end;

		if pass_on
		then call continue_to_signal_ (code);
	     end;

	call get_system_free_area_ (meter_areap);
	do fnp_x = 1 to log_fnp_data.n_fnps;
	     log_fnp_entryp = addr (log_fnp_data.fnp_entry (fnp_x));
	     if log_fnp_entry.on
	     then do;
		fnp_name = log_fnp_entry.fnp_name;
		starname (1) = rtrim (fnp_name) || ".*";/* all immediate subchannels of this FNP */
		log_fnp_entry.times_dumped = log_fnp_entry.times_dumped + 1;
		call comm_meters_ (starname, CHANNEL_METERS_VERSION_1, meter_areap, n_channels, orig_chan_meterp,
		     code);
		if code ^= 0
		then do;
		     log_fnp_entry.times_failed = log_fnp_entry.times_failed + 1;
		     call com_err_ (code, name, "Unable to get statistics for FNP ^a", fnp_name);
		     go to next_fnp;
		end;

		chan_meterp = orig_chan_meterp;
		poll_fnp_data_n_channels = n_channels;
		poll_fnp_data_n_stats = 9 * n_channels; /* we'll allocate space for all of them and fre unneeded ones later */
		allocate poll_fnp_data;
		chanx = 0;
		n_stats = 0;

		poll_fnp_data.version = poll_fnp_data_version_1;
		poll_fnp_data.name = log_fnp_entry.fnp_name;
		poll_fnp_data.model = log_fnp_entry.model;

		do while (chan_meterp ^= null ());
		     fnp_chan_meterp = channel_meters.parent_meterp;
		     meterp = addr (fnp_chan_meter_struc.current_meters);
		     if meterp -> fnp_channel_meters.parity_errors ^= 0
			| fnp_chan_meter_struc.synchronous & sum (meterp -> fnp_sync_meters.counters) ^= 0
		     then do;
			chanx = chanx + 1;
			poll_fnp_data.chan_info (chanx).chan_name = channel_meters.channel_name;
			poll_fnp_data.chan_info (chanx).line_type = channel_meters.line_type;

			if fnp_chan_meter_struc.synchronous
			then do i = 1 to hbound (meterp -> fnp_sync_meters.counters, 1);
			     if meterp -> fnp_sync_meters.counters (i) > 0
			     then do;
				n_stats = n_stats + 1;
				poll_fnp_data.stat_info (n_stats).chan_index = chanx;
				poll_fnp_data.stat_info (n_stats).stat_index = i;
				poll_fnp_data.stat_info (n_stats).value = meterp -> fnp_sync_meters.counters (i);
			     end;
			end;

			if meterp -> fnp_channel_meters.parity_errors > 0
			then do;
			     n_stats = n_stats + 1;
			     poll_fnp_data.stat_info (n_stats).chan_index = chanx;
			     poll_fnp_data.stat_info (n_stats).stat_index = 9;
			     poll_fnp_data.stat_info (n_stats).value = meterp -> fnp_channel_meters.parity_errors;
			end;
		     end;

		     chan_meterp = channel_meters.next_channelp;
		end;

		poll_fnp_data.n_stats = n_stats;
		poll_fnp_data.n_channels = n_channels;

		if log_fnp_data.log
		then call hphcs_$syserr_binary (5, poll_fnp_datap, SB_fnp_poll, currentsize (poll_fnp_data),
			"poll_fnp: polled ^a", log_fnp_entry.fnp_name);
		else if log_fnp_data.iocbp ^= null ()
		then call iox_$put_chars (log_fnp_data.iocbp, poll_fnp_datap, 4 * currentsize (poll_fnp_data), code);

		poll_fnp_data.n_stats = poll_fnp_data_n_stats;
		free poll_fnp_data;
		call comm_meters_$free (meter_areap, orig_chan_meterp, code);
	     end;
next_fnp:
	end;

/* Finished with this cycle */

wrapup:
	if log_fnp_data.iocbp ^= null ()
	then do;
	     call iox_$close (log_fnp_data.iocbp, code);
	     call iox_$detach_iocb (log_fnp_data.iocbp, code);
	     log_fnp_data.iocbp = null ();
	end;
	if log_fnp_data.finish
	then do;					/* This is last cycle */
	     call ioa_ ("^a: Finished.", name);
	     call ipc_$delete_ev_chn (log_fnp_data.timer_event, code);
	     static_log_fnp_datap = null ();
	     log_fnp_data_n_fnps = log_fnp_data.n_fnps;
	     free log_fnp_data;
	end;
	return;
%page;
get_arg:
     proc;

	call cu_$arg_ptr_rel (argno, argp, argl, code, arg_list_ptr);
	if code ^= 0
	then do;
	     call com_err_ (code, name, "Can't happen.");
	     go to error_return;
	end;
	argno = argno + 1;
	more_args = (argno <= n_args);
	return;

put_arg:
     entry;

	argno = argno - 1;
	more_args = (argno <= n_args);
	return;

     end get_arg;
%page;
/* Routine to setup static data-base */

setup_static_data:
     proc;

dcl  i fixed bin;
dcl  fnpx fixed bin;

/* First, count fnp's */

	log_fnp_data_n_fnps = 0;
	do i = 1 to 8;
	     prph_fnp_cardp = null ();
	     call config_$find_2 ("prph", "fnp" || get_fnp_name_ (i), prph_fnp_cardp);
	     log_fnp_data_n_fnps = log_fnp_data_n_fnps + bin (prph_fnp_cardp ^= null (), 1);
	end;
	if log_fnp_data_n_fnps = 0
	then do;
	     call com_err_ (0, name, "No FNPs configured. Polling not initiated.");
	     go to error_return;
	end;

	allocate log_fnp_data;
	unspec (log_fnp_data) = ""b;
	log_fnp_data.n_fnps = log_fnp_data_n_fnps;

	call hcs_$initiate (SYS_CONTROL_DIR, "cdt", "", 0, 1, cdtp, code);
	if cdtp = null ()
	then call com_err_ (code, name, "Could not initiate CDT. Models of FNPs will not be recorded.");
	prph_fnp_cardp = null ();
	fnpx = 1;
	do i = 1 to 8;				/* loop through all the possibilities */
	     prph_fnp_cardp = null ();
	     call config_$find_2 ("prph", "fnp" || get_fnp_name_ (i), prph_fnp_cardp);
	     if prph_fnp_cardp ^= null ()
	     then do;
		log_fnp_entryp = addr (log_fnp_data.fnp_entry (fnpx));
		log_fnp_entry.fnp_name = get_fnp_name_ (i);
		if cdtp ^= null ()
		then do;
		     fnpep = addr (cdt.fnp_entry (fnpx));
		     if fnpe.mpxe.state ^= FNP_FREE
		     then log_fnp_entry.model = fnpe.type;
		end;
		fnpx = fnpx + 1;
	     end;
	end;
	return;

     end setup_static_data;
%page;
/* Be sure all fnp's given on comnmand line are configured. */

validate_fnp_list:
     proc;

dcl  (i, j) fixed bin;

	do i = 1 to fnp_cnt;
	     do j = 1 to log_fnp_data.n_fnps;
		log_fnp_entryp = addr (log_fnp_data.fnp_entry (j));
		if fnp_list (i) = log_fnp_entry.fnp_name
		then go to fnp_ok;
	     end;
	     call com_err_ (0, name, "FNP ^a is not configured.", fnp_list (i));
	     go to error_return;
fnp_ok:
	end;
	return;

     end validate_fnp_list;

/* Function to return 1 if fnp was listed in command line.  If none were listed, 1 is returned for all fnp's */

listed_fnp:
     proc returns (bit (1));

dcl  i fixed bin;

	if fnp_cnt = 0
	then return ("1"b);
	do i = 1 to fnp_cnt;
	     if log_fnp_entry.fnp_name = fnp_list (i)
	     then return ("1"b);
	end;
	return ("0"b);

     end listed_fnp;

/* Cleanup handler for command interface */

command_cleanup:
     proc;

	if static_log_fnp_datap = null () & log_fnp_datap ^= null ()
	then free log_fnp_data;
	return;

     end command_cleanup;
%page;
%include event_call_info;
%include iox_modes;
%include poll_fnp_data;
%include syserr_binary_def;
%include config_prph_fnp_card;
%include channel_meters;
%include fnp_channel_meters;
%include cdt;
%include author_dcl;
%include condition_info;
%include condition_info_header;
%include sub_error_info;

     end poll_fnp;
