/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1985 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(85-09-23,LJAdams), approve(85-11-06,MCR7278),
     audit(86-02-19,Gilcrease), install(86-02-19,MR12.0-1021):
     Created September 1985.
  2) change(86-04-30,LJAdams), approve(86-05-19,MCR7386),
     audit(86-05-19,Gilcrease), install(86-06-05,MR12.0-1071):
     Added parameter for error message.
                                                   END HISTORY COMMENTS */

hcom_cfix_validate_:
     proc (P_caller, P_field_name, P_input_value, P_result, P_canonical_value, P_field_type, P_err_msg);

/* *	HCOM_CFIX_VALIDATE_
   *
   *	This is the procedure used to validate values placed in fields
   *	of a history comment or installation description.
   *
   *	The validation procedure takes an input value to validate, and 
   *	returns a bit indicating the validity.  The name of the field is
   *	supplied to determine what sort of validation will be applied,
   *	and the name of the calling procedure is supplied for use in 
   *	error messages and questions.  An error message is always printed
   *	when the field value is invalid, so the caller of the validation
   *	routine need never print one.
   *
   *	In addition to the valid/invalid result, this procedure also
   *	returns the canonical form of the field value (making appropriate
   *	case translations, etc.), the field type (a character string 
   *	whose value depends on the field itself).
   *
   *	The critical fix validation procedure makes the following checks:
   *
   *	"author" field
   *         Validated for "correct" syntax and length restriction
   *	"approval" field
   *	   Must be a critical fix number in the format:
   *	     fix_nn or fix_nn.ds
   *	"audit" field
   *         Validated for "correct" syntax and length restriction
   *	"install" field
   *	   Person id of the installer of the critical fix
   *	Other fields
   *	   Always rejected.
   */

declare   P_caller char (*) varying parameter;		/* INPUT: Name of validation procedure's caller */
declare   P_field_name char (*) varying parameter;	/* INPUT: Name of field to be validated */
declare   P_input_value char (*) varying parameter;	/* INPUT: Value to be checked for validity */
declare   P_result bit (1) aligned parameter;		/* OUTPUT: Whether input was valid or not */

declare   P_canonical_value char (*) varying parameter;	/* OUTPUT: Canonical text form of above */
declare   P_field_type char (*) varying parameter;	/* OUTPUT: Character prefix of approval value */
declare   P_err_msg char (100) varying parameter;           /* OUTPUT: error message			*/

declare   NAMECASE char (53) internal static options (constant) init
         ("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'");
declare   VALID_CHARACTERS char (17) internal static options (constant) init ("fix_.ds0123456789");
declare   DIGITS char (10) internal static options (constant) init ("0123456789");
declare   DELIMITER char (1) internal static options (constant) init ("_");


declare  (length, ltrim, null, rtirm, substr, verify) builtin;

/*  */


          P_result = "0"b;                                  /* Initialize output values			*/
          P_canonical_value = P_input_value;                /* Just return the input in case of error	*/
          P_field_type = "";                                /* Type-dependent values are returned null	*/
	P_err_msg = "";
	

/* Call the appropriate (internal) validation procedure, depending on the
   field name.  These procedures are responsible for setting all output
   parameters, issuing all error messages, and asking questions.  When 
   they return, all the results should be set appropriately, since the
   external procedure just returns at that point.  In particular, they must
   all set P_result, since that has been initialized to "0"b already, above.
   */

	if (P_field_name = AUTHOR_FIELD_NAME) then
               call validate_personid (AUTHOR_FIELD_NAME);
	else if (P_field_name = APPROVAL_FIELD_NAME) then
	     call validate_cfixno ();
	else if (P_field_name = AUDIT_FIELD_NAME) then
               call validate_personid (AUDIT_FIELD_NAME);
	else if (P_field_name = INSTALL_FIELD_NAME) then
	     call validate_personid(INSTALL_FIELD_NAME);
	else 
	     P_err_msg = "Invalid field name";
	

CHECK_RETURNS:
	return;					/* All done */

/*  */
validate_personid:
     procedure (P_type);

declare   P_type char (*) varying parameter;                /* "author" or "audit" -- not used in this implementation */

/* Ideally, perhaps, this would check the person ID against a little database of valid
   values, giving the updater the opportunity to accept or reject one that wasn't
   found.  It could even translate initials or nicknames to the real name. For now,
   though, all it does is make a trivial syntactic check that isn't even correct
   in all cases (deJong, for instance).  This represents an opportunity for people
   to modify this routine to be spiffier. */


          if (length (P_input_value) < 2) then              /* Between 2 and 24 characters */
               P_result = "0"b;
          else if (length (P_input_value) > 24) then
               P_result = "0"b;
          else if verify (P_input_value, NAMECASE) ^= 0 then
               P_result = "0"b;                             /* And be all alphabetic */
          else P_result = "1"b;                             /* Otherwise, it's OK */

          return;
          end validate_personid;

/*  */

validate_cfixno:
     procedure ();

declare   approval char (24) varying;
declare   part_1 char (24) varying;
declare   part_2 char (24) varying;
declare	part_3 char (24) varying;
declare   first_digit fixed bin;
declare	last_digit fixed bin;


	approval = P_input_value;
	approval = rtrim (approval);
	approval = ltrim (approval);

	if (length (approval) = 0) then
	     call invalid_cfixno ("Approval must not be null");

	if (verify (approval, VALID_CHARACTERS) ^= 0) then
	     call invalid_cfixno ("Only critical fix numbers are currently acceptable (e.g. fix_nnnn.ds)");

	first_digit = verify (approval, "fix_");
	if (first_digit = 0) then			/* All alpha characters */
	   call invalid_cfixno ("No fix number supplied.");

	else if (first_digit = 1) then		/* Syntax error to omit the identifying word */
	     call invalid_cfixno ("Must not begin with a digit.");

	else do;					/* Contains an identifying number */
	     part_1 = substr (approval, 1, (first_digit - 1));
	     part_2 = substr (approval, first_digit);
	     part_2 = ltrim (part_2, DELIMITER);	/* Trim off delimiter appearing twix 1st/2nd part */
	     last_digit = verify(part_2,"0123456789");
	     if last_digit > 0 then do;
	        part_3 = substr(part_2,last_digit);
	        part_2 = substr(part_2,1,last_digit-1);
	        end;
	     else
	        part_3 = "";
	     if (length (part_2) = 0) then		/* Error if nothing but delimiters */
		call invalid_cfixno ("Must include a decimal number");
	     if (verify (part_2, DIGITS) ^= 0) then
		call invalid_cfixno ("Approval number field must be all decimal");
	     if (length (part_2) > 4) then
		call invalid_cfixno ("Approval number field must be 4 digits or less");
	     if length(part_3) > 0 & part_3 ^= ".ds" then
	        call invalid_cfixno("Fix number ends improperly.");

	     end;

/* Note that we assign the output values here, and then ask the question;
   this gives the caller a chance to use the canonical value when asking
   for a replacement. */

	P_result = "1"b;				/* It's valid */
	if part_3 ^= "" then
	   P_canonical_value = part_1 || part_2 || part_3;
	else
	   P_canonical_value = part_1 || part_2;
	P_field_type = part_1;			/* Make it easier for our caller to re-use */

	return;
end validate_cfixno;

/*  */

invalid_cfixno:
     procedure (P_message);

declare   P_message char (*) parameter;

/* This procedure prints an error message and returns a false result,
   for use when the value is invalid */


          P_err_msg = P_message;
	P_result = "0"b;				/* Invalid */
	goto CHECK_RETURNS;

	end invalid_cfixno;

/*  */


%page; %include hcom_field_names;
%page; %include query_info;
%page; %include format_document_options;

	end hcom_cfix_validate_;
       
