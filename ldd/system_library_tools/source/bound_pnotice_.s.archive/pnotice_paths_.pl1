/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1981 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(81-05-01,Stansbury), approve(), audit(),
     install(86-11-12,MR12.0-1213):
     Created.
  2) change(81-12-01,Stansbury), approve(), audit(),
     install(86-11-12,MR12.0-1213):
     Modified - Changed calling sequence to include option flags.
  3) change(82-10-01,Stansbury), approve(), audit(),
     install(86-11-12,MR12.0-1213):
     Modified - Added functionality to deal with public domain notices.
     These notices must have "public.domain" as the first and second
     components in their name.
  4) change(85-09-27,LJAdams), approve(85-09-27,MCR7150),
     audit(86-02-07,Wallman), install(86-02-13,MR12.0-1017):
     Accept public_domain as a template name.  Search for <yr> indicator
     in template rather than date.  Allow multiple component prefixes
     for template name.
  5) change(86-09-08,LJAdams), approve(86-09-08,MCR7526),
     audit(86-11-05,GDixon), install(86-11-12,MR12.0-1213):
     Corrected code that allowed stringrange error to occur.
                                                   END HISTORY COMMENTS */


pnotice_paths_:
     proc (caller, flags, Ppnotice_info, ncode);


/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*									*/
/* NAME:	        pnotice_paths_						*/
/*									*/
/* FUNCTION:								*/
/*      This is the subroutine interface to the software protection tools that provides	*/
/* pathnames of the directories which contain the protection notice templates. It sets	*/
/* up proper search paths for the user of the tools, and initiates each of the known	*/
/* templates providing pointers and lengths, primary names, and whether or not a	*/
/* particular template is a default template. The include file pnotice_paths.incl.pl1	*/
/* contains the structure which is filled in by this subroutine.			*/
/*									*/
/* USAGE:									*/
/*      dcl pnotice_paths_ entry (char(*), bit(*), ptr, fixed bin (35));		*/
/*									*/
/*      call pnotice_paths_ (name, option_flags, Ppaths, Acode);			*/
/* where:									*/
/* 1.   name		  (In)						*/
/*     is the name of the procedure that called this subroutine.			*/
/* 2.   option_flags            (In)						*/
/*     are passed as a bit string and are used by the list_pnotice_names command to	*/
/* control the checking of templates and filling in of the pnotice_paths structure.	*/
/* Callers of this procedure other than list_pnotice_names should set this parameter to	*/
/* "00"b !								*/
/*      Meaning of these flags:						*/
/*      The check flag, which is first, is set when list_pnotice_names is the caller AND	*/
/* the -check control arg has been used.  When this is the case, any errors found while	*/
/* checking the text of a template will be reported, and the template will not be removed	*/
/* from the list returned to the caller. The all flag, which is second, is set		*/
/* when list_pnotice_names is the caller AND the -all control arg has been  used. When	*/
/* this is the case, all properly formatted templates in every directory will be  listed. */
/* Any with duplicate names will be flagged with an asterisk (*) and an explanation will	*/
/* be printed.								*/
/*									*/
/*									*/
/*									*/
/* 3.   Ppaths	            (In)						*/
/*     is a pointer to a temporary segment used to allocate the contents of the		*/
/* pnotice_paths structure. If the caller has not provided a temp seg, i.e., Ppaths is	*/
/* null, this subroutine will obtain one.					*/
/* 4.   Acode		  (Out)						*/
/*     is a standard system error code.						*/
/*									*/
/*									*/
/*									*/
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */


%page;
	dcl     caller		 char (*),	/* IN */
	        flags		 bit (*),		/* IN */
	        Ppnotice_info	 ptr,		/* IN / OUT */
	        ncode		 fixed bin (35);	/* OUT */


/*  A U T O M A T I C  */
	dcl     component		 char (32) varying,
	        Icurrent_entry	 fixed bin,
	        Idir		 fixed bin,
	        Idx		 fixed bin,
	        Idx1		 fixed bin,
	        Iname		 fixed bin,
	        Itemplate		 fixed bin,
	        Itextdate		 fixed bin,
	        Lline		 fixed bin (21),
	        Ltemp		 fixed bin (21),
	        Ltext		 fixed bin (21),
	        Nentries		 fixed bin,
	        Pline		 ptr,
	        Ptemp		 ptr,
	        Ptext		 ptr,		/* ptr to temp seg of template text */
	        bit_count		 fixed bin (24),
	        errors_found	 bit (1),		/* bit to check for any internal template errors */
	        tcode		 fixed bin (35),	/* temp error code */
	        type		 fixed bin,
	        work_area		 area (8192);	/* area for search_paths_$get and hcs_$star */
	dcl     1 option_flags,
		2 check		 bit (1) unal,
		2 all		 bit (1) unal;

	dcl     1 template		 like pnotice_paths.templates;


/*  B A S E D  */
	dcl     line		 char (Lline) based (Pline),
	        temp		 char (Ltemp) based (Ptemp),
	        temp_chr		 (Ltemp) char (1) based (Ptemp),
	        text		 char (Ltext) based (Ptext);

/*  B U I L T I N */
	dcl     (addcharno,
	        addr,
	        after,
	        before,
	        divide,
	        empty,
	        index,
	        null,
	        reverse,
	        rtrim,
	        search,
	        string,
	        substr,
	        sum,
	        verify)		 builtin;

/*  C O N D I T I O N S  */
	dcl     cleanup		 condition;


/*  E X T E R N A L   E N T R I E S  */
	dcl     com_err_		 entry () options (variable),
	        get_temp_segment_	 entry (char (*), ptr, fixed bin (35)),
	        hcs_$initiate_count	 entry (char (*), char (*), char (*), fixed bin (24), fixed bin (2), ptr, fixed bin (35)),
	        hcs_$star_		 entry (char (*), char (*), fixed bin (2), ptr, fixed bin, ptr, ptr, fixed bin (35)),
	        hcs_$terminate_noname	 entry (ptr, fixed bin (35)),
	        search_paths_$get	 entry (char (*), bit (36), char (*), ptr, ptr, fixed bin, ptr, fixed bin (35));


/* E X T E R N A L   S T A T I C  */
	dcl     error_table_$empty_search_list fixed bin (35) ext static,
	        error_table_$improper_data_format fixed bin (35) ext static,
	        error_table_$nomatch	 fixed bin (35) ext static;


/* I N T E R N A L   S T A T I C  */
	dcl     True		 bit (1) int static options (constant) init ("1"b),
	        False		 bit (1) int static options (constant) init ("0"b),
	        NL		 char (1) int static options (constant) init ("
"),
	        HT		 char (1) int static options (constant) init ("	"),
	        HT_SP_VT_NP		 char (4) int static options (constant) init ("	 ");


%page;
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

	ncode = 0;

	string (option_flags) = flags;
	on cleanup begin;
		if Ptext ^= null then
		     call hcs_$terminate_noname (Ptext, tcode);
	     end;


	if Ppnotice_info = null then do;		/* if we were not given a temp seg ptr,		*/
		call get_temp_segment_ (caller, Ppnotice_info, ncode);
						/* get one on the caller's behalf		*/
		if ncode ^= 0 then do;
			call com_err_ (ncode, caller, "
Obtaining a temporary segment for pnotice template info.");
			return;
		     end;				/* things are probably so fouled up now,	*/
	     end;
	Ppaths = Ppnotice_info;
	pnotice_paths.Ndirs = 0;
	pnotice_paths.Ntemplates = 0;
	type = UNDEFINED;

	call search_paths_$get ("pnotice", sl_control_default, "", null (),
	     addr (work_area), sl_info_version_1, sl_info_p, ncode);
	if ncode ^= 0 then do;			/* anything unexpected, clean up and get out	*/
		call com_err_ (ncode, caller, "
Searching the pnotice search list.");
		return;
	     end;
	pnotice_paths.Ndirs = sl_info.num_paths;	/* no. of search paths			*/
	if pnotice_paths.Ndirs = 0 then do;		/* truly a bad situation			*/
		ncode = error_table_$empty_search_list;
		call com_err_ (ncode, caller, "
No directories were found in the pnotice search list.");
		return;
	     end;
	else do Idir = 1 to pnotice_paths.Ndirs;
		pnotice_paths.dirs (Idir).dir_path = sl_info.paths (Idir).pathname;
						/* obtain pathname				*/
		pnotice_paths.dirs (Idir).Ifirst_template = pnotice_paths.Ntemplates + 1;
						/* set up index				*/
		pnotice_paths.dirs (Idir).Ilast_template = 0;

		call hcs_$star_ (pnotice_paths.dirs (Idir).dir_path, "**.pnotice",
		     star_ALL_ENTRIES, addr (work_area), star_entry_count,
		     star_entry_ptr, star_names_ptr, ncode);
		if ncode ^= 0 then do;
			if ncode = error_table_$nomatch then do; /* none in this dir				*/
				ncode = 0;
				goto NEXT_DIR;
			     end;
			else do;
				call com_err_ (ncode, caller, "
Obtaining star names matching **.pnotice in ^a", pnotice_paths.dirs (Idir).dir_path);
						/* complain				*/
				ncode = 0;	/* prevent other abnormalities		*/
				goto NEXT_DIR;	/* go onto next. */
			     end;
		     end;
		pnotice_paths.dirs (Idir).Ifirst_template = pnotice_paths.Ntemplates + 1;
						/* set index for first template in this dir	*/
		do Nentries = 1 to star_entry_count;	/* for all entries in this dir,		*/
		     Icurrent_entry = pnotice_paths.Ntemplates + 1;
						/* set index of current template		*/
		     template.defaultC = False;
						/* initialize variables to False		*/
		     template.defaultTS = False;
		     templates.duplicate = False;

		     do Itemplate = 1 to pnotice_paths.Ntemplates;
						/* check for duplicates			*/
			if star_names (star_entries (Nentries).nindex) =
			     pnotice_paths.templates (Itemplate).primary_name then do;
				if ^option_flags.all then
				     goto NEXT_TEMPLATE; /* skip it				*/
				else
				     template.duplicate = True;
						/* turn on bit				*/
			     end;
		     end;
		     call hcs_$initiate_count (pnotice_paths.dirs (Idir).dir_path,
			star_names (star_entries (Nentries).nindex),
			"", bit_count, 0,
			Ptext, tcode);		/* get pointer to each one			*/
		     if Ptext = null then do;
			     call com_err_ (tcode, caller, "
Initiating ^a^[>^]^a",
				pnotice_paths.dirs (Idir).dir_path, pnotice_paths.dirs (Idir).dir_path ^= ">",
				star_names (star_entries (Nentries).nindex));
			     goto NEXT_TEMPLATE;	/* some problem here, don't let it stop now	*/
			end;
		     Ltext = divide (bit_count, 9, 17, 0);

		     errors_found = False;		/* prepare to...				*/
						/* do checks on this one			*/
						/* the errors_found flag lets us report ALL errors*/
		     call find_line$init (Ptext, Ltext);/* set up for finding multiple lines		*/


		     component = rtrim (star_names (star_entries (Nentries).nindex));
						/* strip trailing blanks			*/
		     component = after (reverse (component), "ecitonp.");
						/*drop off pnotice suffix			*/
		     component = reverse (before (component, "."));
						/*find the component prior to .pnotice		*/
		     if component = "trade_secret" then do;
						/* FOR TRADE SECRET ONLY			*/
			     type = TRADE_SECRET;
			     if search (text, "0123456789") ^= 0 then
				call format_error ("Text of Trade Secret notices should not contain dates.");
			     if index (text, "<yr>") ^= 0 then
				call format_error
				     ("Text of Trade Secret notices should not contain a generic year indicator, <yr>.");
			     if index (text, "PROPRIETARY") = 0 then
				call format_error ("Text of Trade Secret notices must contain ""PROPRIETARY"".");
			end;
		     else if component = "public_domain" |
			component = "domain" then do; /* name of this notice should be 		*/
						/* public_domain.pnotice			*/
						/* FOR PUBLIC DOMAIN ONLY			*/
			     if component = "domain" |
				verify (before (star_names (star_entries (Nentries).nindex), "."), "public_domain") ^= 0 then
				call format_error ("A public domain pnotice can only be named public_domain.");
			     type = PUBLIC_DOMAIN;
			     if search (text, "0123456789") ^= 0 then
				call format_error ("Text of the public domain notice must not contain a date.");
			     if index (text, "<yr>") ^= 0 then
				call format_error
				     ("Text of the public domain notice must not contain a generic year indicator, <yr>.");
			     if index (text, "PUBLIC DOMAIN") = 0 then
				call format_error ("Text of public domain notice must contain ""PUBLIC DOMAIN"".");
			end;
		     else do;			/* FOR COPYRIGHT				*/
			     type = COPYRIGHT;
			     Itextdate = search (text, "<yr>");
			     if Itextdate = 0 then
				call format_error
				     ("Copyright notice text must contain a ""<yr>"" place holder.");
			     if index (text, "Copyright") = 0 then
				call format_error ("Text of Copyright notices must include ""Copyright"".");
			end;
		     do while (find_line ());
			if search (line, HT) ^= 0 then
			     call format_error ("Text contains a horizontal tab character.");
			if search (line, "*") ^= 0 then
			     call format_error ("Text contains an asterisk (*).");
			if Lline > 71 then
			     call format_error ("Length of a template line exceeds 71 characters.
This may result in poor formatting.");
			Idx = verify (line, HT_SP_VT_NP);
			Idx1 = verify (reverse (line), HT_SP_VT_NP);
			if Idx = 0 & Idx1 = 0 then
			     call format_error ("A template line is blank.");
			else
			     if Idx ^= 1 then
			     call format_error ("Template line has leading white space.");
			else
			     if Idx1 ^= 1 then
			     call format_error ("A template line has trailing white space other than NL.");
		     end;
		     if errors_found then
			goto NEXT_TEMPLATE;		/* don't include this one			*/
		     else do;			/* THIS ONE PASSED, ADD IT TO THE LIST		*/
			     template.primary_name = star_names (star_entries (Nentries).nindex);
						/* obtain primary name first			*/
			     template.Ptemplate = Ptext;
			     template.Ltemplate = Ltext;
			     template.type = type;
			     template.Isearch_dir = Idir;
						/* remember dir index that this one came from.	*/
			     do Iname = 1 to star_entries (Nentries).nnames - 1;
						/* check the names on this entry.		*/
						/* check to see if it is a default pnotice	*/
				if before (star_names (star_entries (Nentries).nindex + Iname), ".") =
				     "default_trade_secret" then
				     template.defaultTS = "1"b;
				else if before (star_names (star_entries (Nentries).nindex + Iname), ".") =
				     "default_copyright" then
				     template.defaultC = "1"b;
				else do;
					call format_error (
					     "Only ""default_trade_secret.pnotice"" and ""default_copyright.pnotice"" are allowed as add names.");
					goto NEXT_TEMPLATE;
				     end;
			     end;
			     pnotice_paths.Ntemplates = Icurrent_entry;
			     pnotice_paths.templates (Ntemplates) = template;
			end;
		     goto KEEP_TEMPLATE;
NEXT_TEMPLATE:	     call hcs_$terminate_noname (Ptext, tcode);
						/* prevent abnormal happenings if user QUITs	*/
KEEP_TEMPLATE:	     Ptext = null;
		end;
		pnotice_paths.dirs (Idir).Ilast_template = pnotice_paths.Ntemplates;
						/* index of last template in this dir		*/
NEXT_DIR:	     end;

RETURN:	return;

%page;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/
find_line:
     proc returns (bit (1));

	if Ltemp <= 0 then
	     return (False);
	else do;
		Pline = Ptemp;
		Lline = search (temp, NL);
		if Lline = 0 then /* there was no NL in the first place..		*/
		     Lline = Ltemp;
		if length(temp) > length(line) then
		   Ptemp = addr(temp_chr(length(line)+1));
		Ltemp = Ltemp - length(line);
		if substr (line, Lline, 1) ^= NL & option_flags.check then
		     call format_error ("A line of this template does not end with a NL.");
		else
		     Lline = Lline - 1;		/* remove the NL				*/
	     end;
	return (True);

find_line$init:
     entry (Pstr, Lstr);
	dcl     Pstr		 ptr,
	        Lstr		 fixed bin (21);

	Ptemp = Pstr;
	Ltemp = Lstr;
	return;

     end find_line;
%page;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

format_error:
     proc (Amsg);

	dcl     Amsg		 char (*) var;
	dcl     Acode		 fixed bin (35);

	if option_flags.check then do;		/* complaints allowed only if asked for.	*/
		Acode = error_table_$improper_data_format;
		call com_err_ (Acode, caller, "^/^a^/(^a^[>^]^a)^/", Amsg,
		     pnotice_paths.dirs (Idir).dir_path, pnotice_paths.dirs (Idir).dir_path ^= ">",
		     star_names (star_entries (Nentries).nindex));
	     end;
	errors_found = True;
	return;
     end format_error;
%page;
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/
%include sl_info;
%page;
%include sl_control_s;
%page;
%include star_structures;
%page;
%include pnotice_paths;

     end pnotice_paths_;
