/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


copy_dump_seg_: proc (segno, cur_proc_ind, p_array, l_array, outptr, retlen);

/* Converted to 6180 and v2pl1 by R. Mullen Feb 1973 */
/* modified 11/14/80 by J. A. Bush for the DPS8/70M CPU */

dcl (segno, cur_proc_ind) fixed bin,			/* Parameters */
     retlen fixed bin (19),
    (p_array ptr,
     l_array fixed bin (19)) (0:31),
     outptr ptr;

dcl (orig, next_orig) fixed bin (35);

dcl (i, l, n, len, nsegs, idx, off,			/* Misc variables */
     next_off, seg_no, cpi, segn) fixed bin,
    (outp, p) ptr;

dcl  hcs_$get_max_length_seg entry (ptr, fixed bin (19), fixed bin (35));
dcl  hcs_$truncate_seg entry (ptr, fixed bin, fixed bin (35));
dcl (addrel, divide, fixed, mod) builtin;

dcl  array (n) fixed bin (35) based;
dcl  wps fixed bin (19);
% include bos_dump;
/* 
   Copy args first, then lookup segment # in image index */
	dumpptr = p_array (0);
	outp = outptr;
	seg_no = segno;
	cpi = cur_proc_ind;
	call hcs_$get_max_length_seg (dumpptr, wps, orig);
	if orig ^= 0 then go to err;

	nsegs = dumpptr -> dump.num_segs;
	orig = size (dump);				/* account for two page header */
	i = 1;

find_proc: if i = cpi then go to find_seg;
	orig = orig + fixed (dumpptr -> dump.segs (i).length, 18) * 64;
	i = i + 1;
	go to find_proc;

find_seg:	do i = cpi to nsegs;
	     segn = fixed (dumpptr -> dump.segs (i).segno, 18);
	     if segn = 0				/* Segment 0 is flag for new process */
	     then if i ^= cpi
		then go to err;			/* Insure that we stay within the current process */
	     if segn = seg_no			/* See if we've found desired seg */
	     then go to copy;
	     orig = orig + fixed (dumpptr -> dump.segs (i).length, 18) * 64; /* increment orig to next seg */
	end;					/* and look at next seg */

err:	retlen = 0;				/* error, can't find segment */
	return;

copy:
	if i ^= nsegs				/* If last seg of dump, use dump length */
	then next_orig = fixed (dumpptr -> dump.segs (i).length, 18) * 64 + orig;
	else next_orig = fixed (dumpptr -> dump.words_dumped, 35);
	len = next_orig - orig;
	if len <= 0
	then go to err;				/* Something messed up, return 0 */
						/* Length dumped is difference between current and next seg origins */
	idx = divide (orig, wps, 17, 0);		/* Get image-index for first word */
	off = mod (orig, wps);			/* And offset within the image segment */
	p = p_array (idx);
	l = l_array (idx) * 1024;
	next_off = len + off;			/* For checking bounds on seg */
	call hcs_$truncate_seg (outp, 0, orig);		/* Truncate output segment */
	if next_off <= wps				/* Does seg cross boundaries of image seg? */
	then do;					/* No, copy directly */

/* Since image is zero-suppressed from the end, can't run into trailing zeroes problem here */
	     n = len;				/* Set arg for move operation */
	     outp -> array = addrel (p, off) -> array;	/* Copy array */
	end;

	else do;
	     n = l - off;				/* If zeroes near the boundary, may get bounds fault */
	     if n > 0				/* May be leading zeroes */
	     then outp -> array = addrel (p, off) -> array; /* Very similar */
	     outp = addrel (outp, (wps - off));		/* Advance "outp" regardless of "l" */
	     n = next_off - wps;			/* Calculate second part */
	     outp -> array = p_array (idx + 1) -> array;
	end;
	retlen = len;				/* Finished */
     end copy_dump_seg_;
