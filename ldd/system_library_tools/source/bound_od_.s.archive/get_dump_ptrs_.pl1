/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


get_dump_ptrs_: proc (erfno, pa, la, nsegs, name);

dcl  erfno char (*),
    (pa ptr,
     la fixed bin) (0:31),
     nsegs fixed bin,
     name char (32) aligned,
     d_dir char (*);

/* This program gets pointers to all of the segments of
   a multics on-line dump given the error report form number of the
   dump. It returns the pointers in the array 'pa' and the number of
   pointers returned in 'nsegs'. It also returns the name of the
   first dump segment in 'name'.

   Coded 4/71 SHW */
/* Modified 02/01/79 by F. W. Martinson to allow up to 32 dump segments */
/* Modified 06/29/79 by J. A. Bush to add the dump_dir entry point */

dcl  code fixed bin (35);
dcl (i, count) fixed bin,
    (dumpdir char (168) int static,
    (dump_name,
     star_name,
     char32 based) char (32),
     c0 char (0)) aligned,
    (eptr, nptr, areap) ptr,
     star_area area ((128)),

     hcs_$star_ entry (char (*) aligned, char (*) aligned, fixed bin (2), ptr, fixed bin, ptr, ptr, fixed bin (35)),
     hcs_$initiate entry (char (*) aligned, char (*) aligned, char (*) aligned, fixed bin (1), fixed bin (2), ptr, fixed bin (35)),
     hcs_$status_long entry (char (*) aligned, char (*) aligned, fixed bin (1), ptr, ptr, fixed bin (35));
dcl (addr, fixed, null, substr) builtin;

declare 1 br aligned,
       (2 (type bit (2), nnames bit (16), nrp bit (18)),
        2 dtm bit (36),
        2 dtu bit (36),
        2 (mode bit (5), pad1 bit (13), records bit (18)),
        2 dtd bit (36),
        2 dtem bit (36),
        2 acct bit (36),
        2 (curlen bit (12), bitcnt bit (24)),
        2 (did bit (4), imdid bit (4),
         copysw bit (1), pad3 bit (9),
         rbs (0:2) bit (6)),
        2 uid bit (36)) unaligned;

/* 
   */

	dumpdir = ">dumps";				/* set default dump directory */
join:
	areap = addr (star_area);			/* get a pointer to the star area */
	star_name = "*.*.0." || erfno;		/* generate star name */

	call hcs_$star_ (dumpdir, star_name, 2, areap, count, eptr, nptr, code);
						/* get first dump seg name */
	if code = 0
	then do;					/* No problems, continue */

	     dump_name = nptr -> char32;		/* copy name of first dump seg */
	     name = dump_name;			/* return name to caller */

	     areap = addr (br);			/* Get pointer to branch structure */

	     do i = 0 to 31;			/* Initiate the dump segments */

		call hcs_$initiate (dumpdir, dump_name, c0, 0, 1, eptr, code); /* initiate the dump seg */
		if eptr = null
		then do;				/* no more segs, return */

		     nsegs = i;			/* return number of segs found */
		     return;

		end;

/* We will allow up to 32 dump segments 0-31 */

		pa (i) = eptr;			/* Copy pointer */
		call hcs_$status_long (dumpdir, dump_name, 1, areap, null, code);
		if code ^= 0
		then la (i) = 0;
		else la (i) = fixed (br.curlen, 17);
		substr (dump_name, 13) = ltrim (char (i+1))||"."||ltrim (erfno);
						/* generate the next dump seg name */

	     end;

	end;

	nsegs = 0;				/* Fell out of loop, or error in star_ call */
	return;

/* dump_dir - entry to get dump ptrs, given a dump directory name */

dump_dir:	entry (d_dir, erfno, pa, la, nsegs, name);

	dumpdir = d_dir;				/* copy dump directory */
	go to join;				/* and go to common code */


     end get_dump_ptrs_;
