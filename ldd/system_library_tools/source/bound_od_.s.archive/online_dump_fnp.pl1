/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


od_fnp: online_dump_fnp: proc;

/* Command to access a dump created online by fdump_fnp_
   *  Dump (in >dumps) has entry name of the form fnp.TAG.MMDDYY.HHMM
   *
   *  Usage:  od_fnp -dt MMDDYY -device DEVICE -dim DIM [-tm HHMM] [-tag TAG]
   *
   *  If time or tag is not supplied, a starname will be formed, but if more than one entry
   *  matches it, an error code will be returned.
*/


/* ARGUMENT STUFF */

dcl  nargs fixed bin;
dcl  iarg fixed bin;
dcl  argptr ptr;
dcl  arglen fixed bin;
dcl  arg char (arglen) based (argptr);


/* ENTRIES */

dcl  cu_$arg_count entry (fixed bin);
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  com_err_ entry options (variable);
dcl  clock_ entry returns (fixed bin (71));
dcl  date_time_ entry (fixed bin (71), char (*));
dcl  expand_path_ entry (ptr, fixed bin, ptr, ptr, fixed bin (35));
dcl  ioa_ entry options (variable);
dcl  ioa_$rsnnl entry options (variable);
dcl  ioa_$rs entry options (variable);
dcl  get_system_free_area_ entry (ptr);
dcl  hcs_$star_ entry (char (*), char (*), fixed bin, ptr, fixed bin, ptr, ptr, fixed bin (35));
dcl  hcs_$initiate entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr, fixed bin (35));
dcl  hcs_$terminate_noname entry (ptr, fixed bin (35));
dcl  ios_$attach entry (char (*), char (*), char (*), char (*), bit (72) aligned);
dcl  ios_$detach entry (char (*), char (*), char (*), bit (72) aligned);
dcl  ios_$write entry (char (*), ptr, fixed bin, fixed bin, fixed bin, bit (72) aligned);
dcl  online_355_dump_ entry (ptr, fixed bin);
dcl  parse_fnp_name_ entry (char (*), fixed bin);

/* AUTOMATIC */

dcl  ap ptr;
dcl  code fixed bin (35);
dcl  starname char (32);
dcl  namelen fixed bin;

dcl  tag char (1) init ("*");
dcl  date char (6) init ("*");
dcl  time char (4) init ("*");
dcl  device char (168) init ("*");
dcl  dim char (32) init ("*");
dcl  path char (168) init ("*");

dcl  outline char (64);
dcl  iostat bit (72) aligned;
dcl  init bit (1) init ("0"b);
dcl  date_string char (24);
dcl  pathlen fixed bin;
dcl  dirname char (168);
dcl  segname char (32);
dcl  count fixed bin;
dcl  ep ptr;
dcl  np ptr;
dcl  dump_ptr ptr;
dcl  fnp_no fixed bin;

/* INTERNAL STATIC */

dcl  myname char (15) internal static options (constant) init ("online_dump_fnp");
dcl  DUMP_DIR char (6) internal static options (constant) init (">dumps");
dcl  output_stream char (32) internal static options (constant) init ("od_output_");


/* EXTERNAL STATIC */

dcl (error_table_$badopt,
     error_table_$noarg,
     error_table_$inconsistent)
     fixed bin (35) external static;


/* BASED */

dcl  the_area area (50) based (ap);
dcl  based_name char (32) based;
dcl  names (count) char (32) aligned based (np);
dcl  entries (count) fixed bin based (ep);

dcl 1 io aligned based (addr (iostat)),
    2 code fixed bin (35),
    2 junk bit (36);


/* CONDITIONS & BUILTINS */

dcl  cleanup condition;

dcl (addr, index, null, substr) builtin;
						/*  */
	call cu_$arg_count (nargs);
	if nargs < 2
	then do;
	     call com_err_ (0, myname, "Usage: online_dump_fnp -device DEVICE -dim DIM -date MMDDYY [-time HHMM] [-tag FNP_TAG] [-pathname PATH]");
	     return;
	end;

	do iarg = 1 to nargs by 2;
	     call cu_$arg_ptr (iarg, argptr, arglen, code);

	     if arg = "-tag"
	     then call get_value (tag);

	     else
	     if arg = "-date" | arg = "-dt"
	     then call get_value (date);

	     else
	     if arg = "-time" | arg = "-tm"
	     then call get_value (time);

	     else
	     if arg = "-device" | arg = "-dv" | arg = "-dev"
	     then call get_value (device);

	     else
	     if arg = "-dim"
	     then call get_value (dim);

	     else
	     if arg = "-pn" | arg = "-pathname"
	     then do;
		call get_value (path);
		pathlen = arglen;
	     end;

	     else code = error_table_$badopt;

	     if code ^= 0				/* either set by preceding statement or by get_value */
	     then do;
		call com_err_ (code, myname, arg);
		return;
	     end;
	end;

/* make sure required arguments were specified */

	if device = "*" then call noarg ("device");
	if dim = "*" then call noarg ("dim");
	if code ^= 0 then return;			/* noarg sets code */

	if path ^= "*"				/* pathname of dump specified */
	then do;
	     call expand_path_ (addr (path), pathlen, addr (dirname), addr (segname), code);
	     if code ^= 0 then do;
		call com_err_ (code, myname, path);
		return;
	     end;

	     if tag = "*" then tag = "a";		/* fake it */
	end;

/* else apply starname */

	else do;
	     dirname = DUMP_DIR;
	     if date = "*"				/* date defaults */
	     then do;
		call date_time_ (clock_ (), date_string);
		date = substr (date_string, 1, 2) || substr (date_string, 4, 2) || substr (date_string, 7, 2);
	     end;

	     call ioa_$rsnnl ("fnp.^a.^a.^a", starname, namelen, tag, date, time);
	     call get_system_free_area_ (ap);

	     call hcs_$star_ (DUMP_DIR, substr (starname, 1, namelen), 2, ap, count, ep, np, code);
	     if code ^= 0 then do;
		call com_err_ (code, myname, starname);
		return;
	     end;

	     segname = np -> based_name;
	     free entries in (the_area);
	     free names in (the_area);

	     if count > 1 then do;
		call com_err_ (0, myname, "^a identifies more than one dump.", starname);
		return;
	     end;

	     if tag = "*" then tag = substr (segname, 5, 1);
	     if time = "*" then time = substr (segname, 14, 4);
	end;


	call ios_$attach (output_stream, dim, device, "w", iostat);
	if io.code ^= 0
	then do;
	     call com_err_ (io.code, myname, "Could not make attachment.");
	     return;
	end;

	on cleanup call clean;

	call hcs_$initiate (dirname, segname, "", 0, 1, dump_ptr, code);
	if dump_ptr = null
	then do;
	     call com_err_ (code, myname, "Could not initiate ^a", segname);
	     call clean;
	     return;
	end;
	else init = "1"b;

/* now we do what we came here to do */

	if path ^= "*"
	then call ioa_$rs ("FNP dump ^a>^a", outline, namelen, dirname, segname);
	else call ioa_$rs ("Dump of FNP ^a taken on ^a at ^a", outline, namelen, tag, date, time);
	call ios_$write (output_stream, addr (outline), 0, namelen, (0), iostat);

	call parse_fnp_name_ (tag, fnp_no);
	if fnp_no = -1 then fnp_no = 0;
	call online_355_dump_ (dump_ptr, fnp_no);

	call clean;
	call ioa_ ("Finished dump");
	return;
						/*  */
get_value: proc (result);

/* Internal procedure to get value for keyword parameter */

dcl  result char (*);
dcl  oldarg char (6);

	     if result ^= "*"			/* this one has already been specified */
	     then code = error_table_$inconsistent;

	     else do;
		oldarg = arg;
		call cu_$arg_ptr (iarg+1, argptr, arglen, code);
		if code ^= 0
		then arg = oldarg;

		else result = arg;
	     end;

	     return;
	end /* get_value */ ;
						/*  */
noarg:	proc (name);

/* Internal procedure to print error message for unspecified keyword */

dcl  name char (*);

	     code = error_table_$noarg;
	     call com_err_ (code, myname, "-^a must be supplied.", name);
	     return;
	end /* noarg */ ;



clean:	proc;

/* cleanup handler, also called at normal exit */

	     call ios_$detach (output_stream, "", "", iostat);
	     if init then call hcs_$terminate_noname (dump_ptr, code);
	     return;
	end /* clean */ ;

     end /* od_fnp */ ;
