/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


od_stack_: proc (stackptr, stacklen, sltp, namp, sstp, sstnp);

/* Coded by RE Mullen June 73 */

/* Called with pointer to a stack, the stack's length,
   and pointers to an SLT and name_seg */

dcl (stackptr, sp_next, sp_curr, lineptr) ptr;
dcl (stacklen, i, frame_no, depth, slen, fword, sword, segno, spoff, case, fsize) fixed bin;
dcl  stackwords (0: 1) fixed bin (35) aligned based (sb);
dcl (addr, baseno, baseptr, addrel, max, min, mod, ptr, null, fixed, rel) builtin;
dcl  od_print_$op_fmt_line entry (fixed bin, fixed bin, fixed bin (35));
dcl  od_print_ entry options (variable);
dcl (curptr, lastptr) ptr;

dcl  plural char (1) aligned;
dcl  nskip fixed bin;
dcl  fmtskip char (21) aligned int static init ("^-^7o line^a repeated");
dcl 1 dbl based aligned,
    2 (zero, two, four, six) fixed bin (71);
dcl (entinfo, retinfo) char (128) aligned init ("");

/*
dcl  od_frame_owner_ entry (ptr, ptr, ptr, ptr, ptr, char (*) aligned, char (*) aligned);
*/
dcl (sltp, ptr_to_entry, namp, ptr_to_return, sstp, sstnp) ptr;
dcl (subsysfrms, save_slen) fixed bin init (0);
dcl (save_sp_next, save_sp, last_sp) ptr;
dcl  subsysflag fixed bin init (0);
% include its;
% include stack_frame;
% include stack_header;

/*  */
	sp, sb = stackptr;				/* initialize and copy args */
	slen = stacklen;				/* the length of the stack we will dump */

	sp_next = stack_header.stack_begin_ptr;		/* we will do a forward trace */
	segno = fixed (baseno (sp_next));		/* this is the segno the dead stack had */
	call check_sp_next;
	if case <= 4 then do;			/* its a pointer and spoff is set to rel (sp_next) */
	     if segno = 49 then if spoff = 272 then sp_next = addrel (sp_next, 48); /* PRDS has bug in it . . . */
	end;


/* Prelim. trace to see if any next_sp = stack_end_ptr, if so
   the frame will be number zero implying its owner was running */

	do frame_no = 0 by 1;
	     call check_sp_next;			/* internal proc to keep from being too gullible */
	     if case ^= 0 then go to bad;		/* sp_next loses */
	     if addr (stack_header.stack_end_ptr) -> its.its_mod ^= "100011"b then go to bad;/* not its? */
	     if addr (stack_header.stack_end_ptr) -> its.mod ^= "000000"b then go to bad; /* not its? */
	     if spoff > fixed (rel (stack_header.stack_end_ptr), 18) then do; /* spoff has been set to offset of sp_next */
		case = 10;			/* FOR DEBUGGING */
		go to bad;
	     end;
	     if sp_next = stack_header.stack_end_ptr then go to good; /* this frame will be number zero . . */
	     sp = ptr (sb, spoff);			/* advance to next frame, but fudge segno  */
	     sp_next = stack_frame.next_sp;		/* pick up new sp_next */


	end;

bad:	frame_no = 0;				/* if stack was bad or not active, number frames from 0 up */
good:	



/* Now loop through th frames. At the beginning of each
   iteration sp will point to a frame to be printed (eg. sp = 334|2740),
   and sword will be the relative offset from the base of thestack
   of the first word of the frame.  If that frames next_sp is good
   then sp will be advanced and the current frame will be printed.
   If next_sp is bad then the remainder of the stack will
   be dumped.  Also any frames jumped over by syserr will
   be broken out with number "XX" */
	curptr, sp, sb = stackptr;			/* reinitialize */
	slen = stacklen;				/* in case we tampered with anything */
	sp_next = stack_header.stack_begin_ptr;		/* again trace forward */
	call check_sp_next;
	if case <= 4 then do;			/* sp_next is ptr and spoff is set to rel (sp_next) */
	     if segno = 49 then if spoff = 272  then sp_next = addrel (sp_next, 48); /* PRDS has bug in it . . . */
	     sp_curr = ptr (sp_next, 0);		/* back pointers will be checked against this */
	end;
	sword = 0;				/* offset from base of the first word of a line to be printed */
	ptr_to_entry, ptr_to_return = null;		/* for stack header */
	subsysfrms = 0;				/* will = 1 if looking at frame jumped over by syserr */

	do i = 0 by 1;				/* only way out of loop is if sword >= slen */
below_syserr: 					/* come here when i must no increase */
	     call check_sp_next;			/* which will advance spoff and set case */
	     if case ^= 0 then go to dump_rest;		/* print this frame heading and rest of stack */

	     last_sp = sp;				/* save this in case we find frames preserved by syserr */
	     sp = ptr (sb, spoff);			/* advance sp to next frame */

	     if (i > 0 & i - frame_no >= 0) | subsysfrms = 1 then do; /* skip these tests low on the stack */
		if addr (stack_frame.prev_sp) -> its.its_mod ^= "100011"b then go to dump_rest; /* not its? */
		if addr (stack_frame.prev_sp) -> its.mod ^= "000000"b then go to dump_rest;/* furth. mod? */
		if addr (sp_curr) -> its.its_mod ^= "100011"b then go to dump_rest;/* not its? */
		if addr (sp_curr) -> its.mod ^= "000000"b then go to dump_rest;/* furth. mod? */

		if baseno (sp_curr) ^= baseno (stack_frame.prev_sp) then go to dump_rest; /* another segno? */
		if rel (sp_curr) ^= rel (stack_frame.prev_sp) then go to dump_rest; /* back pointer bad? */
	     end;

	     if spoff = 12288 then if subsysfrms = 0 then do; /* probable syserr frame */
		subsysfrms = 1;			/* detour to see what is between here and syserr */
		save_slen = slen;			/* remember the length of the stack */
		save_sp = sp;			/* and the address of the syserr frame */
		save_sp_next = sp_next;		/* and the stacks internal representation of same */
		slen = 12288;			/* only want to print up to the syserr frame for now */
		sp = last_sp;			/* reset sp to previous frame */
		sp_next = ptr_to_entry;		/* and pick up sp_next from where syserr saves it */
		go to below_syserr;			/* retry the above with fudged sp_next */
	     end;

	     fsize = fixed (rel (sp_next), 18) - fixed (rel (sp_curr), 18); /* size of frame to be printed */
	     go to print_frame;			/* and print it knowing there will be another frame */

dump_rest:     fsize = slen - sword;			/* no next frame */

print_frame:   

	     retinfo, entinfo = "";			/* don't know anything yet */

/*
	     call od_frame_owner_ (ptr_to_return, ptr_to_entry, sltp, namp, sstp, sstnp, retinfo, entinfo);
*/
	     if subsysflag = 0 then			/* a mainline frame with a number */
	     call od_print_ (2, "^/^3-STACK FRAME ^d	^a", i - frame_no, retinfo); /* print the info */
	     else					/* this frame has been jumped over by syserr, no number */
	     call od_print_ (2, "^/^3-STACK FRAME XX	^a", retinfo);

	     if entinfo ^= "" then			/* entinfo may be in retinfo, or may be absent */
	     call od_print_ (2, "^5-entry_ptr: ^a^/", entinfo);
	     else
	     call od_print_ (2, "^/");
	     if subsysfrms = 1 then subsysflag = 1;	/* frame no = XX for now */

	     nskip = 0;				/* have skiped no lines so far this frame */
	     do fword = 0 by 8 while (fword < fsize);	/* loop to print contents of frame */
		if fword ^= 0 then			/* dont check for repeat on first line */
		if lastptr -> dbl.zero = curptr -> dbl.zero then /* see if current line same al last printed line */
		if lastptr -> dbl.two = curptr -> dbl.two then
		if lastptr -> dbl.four = curptr -> dbl.four then
		if lastptr -> dbl.six = curptr -> dbl.six then do;
		     nskip = nskip + 1;		/* note that another line has been skipped */
		     go to SKIP;			/* and skip printing the line */
		end;
		if nskip > 0 then do;		/* before printing a line check backlog of skipped lines */
		     if nskip > 1 then plural = "s"; else plural = " "; /* more than one? */
		     call od_print_ (1, fmtskip, nskip, plural); /* tell how many */
		     nskip = 0;			/* these are accounted for */
		end;
		call od_print_$op_fmt_line (sword, fword, stackwords (sword)); /* now print the line */
		lastptr = curptr;			/* future lines will be compared to this one */
SKIP:						/* come here if line was to be skipped */
		sword = sword + 8;			/* want to move to next line in any case */
		curptr = addrel (curptr, 8);		/* and advance pointer to it also */
	     end;					/* leave loop when frame is printed */
	     if nskip > 0 then do;			/* could have skipped a lot of lines lately */
		if nskip > 1 then plural = "s"; else plural = " "; /*  */
		call od_print_ (1, fmtskip, nskip, plural); /* tell how many */
	     end;
	     if sword >= slen then do;		/* whole stack may be done . . . */
		if subsysfrms = 1 then do;
		     subsysfrms = 0;		/* in which case we want to continue */
		     subsysflag = 0;		/* print frame num not XX from now on */
		     slen = save_slen;		/* reset to real lenght of stack */
		     sp = save_sp;			/* reset sp to point to syserr frame */
		     sp_next = save_sp_next;		/* reset */
		end;
		else go to ALLDONE;			/* actually at end of stack */
	     end;

	     sp_curr = sp_next;			/* advance internal representation */
	     ptr_to_entry = stack_frame.entry_ptr;	/* sp -> next frame to be printed, which is known to be good */
	     if fixed (stack_frame.translator_id, 18) = 2	/* Version I pl1 */
	     then ptr_to_return = stack_frame.pointer_registers (0);
	     else ptr_to_return = stack_frame.return_ptr;	/* ret ptr in exptected place */
	     sp_next = stack_frame.next_sp;		/* pick up foward pointer */
	     if subsysfrms = 1 then go to below_syserr;	/* so frame nums won't increase */
	end;
ALLDONE:						/* exit from above loop by coming here */
	return;




/* -------------------------------------------------------------------------- */


check_sp_next: proc;				/* verifies that sp_next might point to next stack frame */


	     if addr (sp_next) -> its.mod = "000000"b then /* if sp_next is not too fancy */
	     if addr (sp_next) -> its.its_mod = "100011"b then do; /* and if it is an its pointer */
		spoff = fixed (rel (sp_next), 18);	/* then pick up word offset portion */
		if fixed (baseno (sp_next), 18) = segno then /* if segno is good */
		if spoff <= slen -stack_frame_min_length then /* if spoff is not too big */
		if mod (spoff, 16) = 0 then		/* and mod16 */
		if spoff >= fixed (rel (sp), 18) + stack_frame_min_length then /* and further up the stack */
		case = 0;				/* then its possible sp_next points to a sack frame */
		else case = 1;			/* sp_next not forword enough */
		else case = 2;			/* sp_next not mod16 */
		else case = 3;			/* sp_next points off end of what stack we have */
		else case = 4;			/* sp_next points into some other segment */
	     end;
	     else case = 5;				/* sp_next is not a pointer */
	     else case = 6;				/* sp_next has further modification */

	     return;
	end check_sp_next;

     end od_stack_;
