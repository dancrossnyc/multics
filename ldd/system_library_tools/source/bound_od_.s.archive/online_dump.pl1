/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* ONLINE-DUMP --- process dump image created by BOS */
/* od_355 entry added by R. Mullen May 1973 */
/* modified for multiple fnps by Robert Coren 10/08/75 */
/* modified 7/25/76 by Noel I. Morris for MR4.1 */
/* modified 79 Aug 14 by Art Beattie to handle longer erf numbers and identify entry called to com_err_. */
/* modified 2/24/81 by J. A. Bush for larger fdump header size */

online_dump: od: proc;

dcl  procname char (16);				/* Identification for com_err_ calls */

dcl  arg char (argl) based (argp),			/* Variables used to access arguments */
     argp ptr,
     argl fixed bin;

dcl (erf_no char (18) aligned,			/* First arg aligned, ERF # */
     name char (32)) aligned;				/* Returned by "get_dump_ptrs_" */

dcl  error_table_$badopt fixed bin (35) external static;

dcl  num fixed bin init (1);
dcl  n_blocks fixed bin;
dcl  n_first fixed bin;

dcl (ioname init ("od_output_"),			/* Arguments for I/O attachment */
     iotype init ("prtdim"),
     ioname2 init ("prta")) char (168) aligned int static;

dcl  get_dump_ptrs_ entry (char (*) aligned, (0:31) ptr, (0:31) fixed bin, fixed bin, char (32) aligned),
     od_print_ entry options (variable),
     od_stack_ entry (ptr, fixed bin, ptr, ptr, ptr, ptr),
     ioa_ entry options (variable),
     ring0_get_$segptr_given_slt entry (char (*)aligned, char (*)aligned, ptr, fixed bin (35), ptr, ptr),
     hcs_$get_max_length_seg entry (ptr, fixed bin (18), fixed bin (35)),
     hcs_$make_seg entry (char (*) aligned, char (*) aligned, char (*) aligned, fixed bin (5), ptr, fixed bin (35)),
     com_err_ entry options (variable),
     ios_$attach entry (char (*) aligned, char (*) aligned, char (*) aligned, char (*) aligned, bit (72) aligned),
     ios_$detach entry (char (*) aligned, char (*) aligned, char (*) aligned, bit (72) aligned);

dcl (od_print_$op_new_page, od_print_$op_finish) entry,	/* No args */
     od_print_$op_fmt_line entry (fixed bin, fixed bin, fixed bin (35)),
     od_print_$op_new_seg entry (fixed bin),
     od_print_$op_init entry (fixed bin, fixed bin (71)),
     online_355_dump_ entry (ptr, fixed bin),
     copy_dump_seg_ entry (fixed bin, fixed bin, (0:31) ptr, (0:31) fixed bin, ptr, fixed bin),
     print_dump_seg_name_ entry (fixed bin, fixed bin (71), ptr, ptr),
     print_dump_seg_name_$hard entry (fixed bin, fixed bin (71), ptr, ptr),
     hcs_$terminate_noname entry (ptr, fixed bin (35)),
     cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));

dcl (addr, addrel, baseno, bin, divide, index, mod, null, size, substr) builtin; /* PSI! */

dcl (ds_seg_no int static init (0),			/* Seg # of descriptor segs */
     slt_seg_no, nam_seg_no, sstnt_seg_no, pds_seg_no, prds_seg_no, /* Miscellaneous system segment #-s */
     sst_seg_no) fixed bin;				/* .. */

dcl (dslen, sstntlen, sltlen, namlen, sstlen, pdslen, prdslen, stklen) fixed bin; /* Lengths of copies of segs */

dcl (slt_seg init (null), nam_seg, sst_seg, sstnt_seg, ds_seg, pds_seg, /* Static pointers to created segments */
     prds_seg /* , tc_data_seg, lot_seg */, stk_seg, shut_seg) ptr int static;

dcl ( /* sstp, sltp, */ namp, dsp, pdsp, prdsp /* , tc_datap, lotp */) ptr; /* Automatic copies */

dcl (astep, ptwp) ptr,
     code fixed bin (35);

dcl ((m1 init (-1),
     five init (5),
     four init (4),
     three init (3),
     two init (2),
     one init (1)) fixed bin,
     seg_mode fixed bin (5) init (1011b),
     max_fnps fixed bin init (4),
     fnp_size fixed bin init (16384),			/* size of core image in 36-bit words */
     wps fixed bin (18)) int static;



dcl  onechar char (1) aligned;
dcl  twochar char (2) aligned;

dcl  dsbr_stk_no fixed bin;				/* the first stack segno, judged by dsbr.stack */
dcl  xreg (0:7) fixed bin (17) unaligned based;
dcl  cv_oct_check_ entry (char (*), fixed bin) returns (fixed bin);
dcl  ioargloc fixed bin init (2);
dcl  seg_no fixed bin;
dcl  restartsw bit (1) init ("0"b);
dcl (rt_seg_no, rt_proc_no, cur_proc_no) fixed bin;
dcl  fnp_index fixed bin;
dcl  tag char (1);
dcl  all_fnps bit (1);				/* indicator of whether dumping all fnps */
dcl  segselsw bit (1) init ("0"b),
     wants_regs bit (1) init ("0"b),
     wants_seg (0:1151) bit (1) unal,
     ws16x72 (16) fixed bin (71) based,
     ask_ ext entry options (variable),
     zilch (16) fixed bin (71) init ((16) 0),
     ask_$ask_clr ext entry options (variable),
     argno fixed bin,
     fnp_only bit (1),
     seg_id char (32);

dcl  based_ptr based ptr;

dcl (fmtdbrh char (31) init ("^-^-DBR  ADDR   BOUND U STACK^/"),
     fmtdbr char (34) init ("^-^-  ^8.3b  ^5.3b ^1.3b ^4.3b^/^/"),
     fmtpprh char (28) init ("^-^-PPR  PRR   PSR      IC^/"),
     fmtppr char (35) init ("^-^-      ^1.3b   ^5.3b   ^6.3b^/^/"),
     fmtrar char (17) init ("^-^-RAR   ^1.3b^/"),
     fmtind char (17) init ("^-^-IND   ^6.3b^/"),
     fmta char (14) init ("^-^-A     ^12w"),
     fmtq char (14) init ("^-^-Q     ^12w"),
     fmte char (15) init ("^-^-EXP   ^3.3b"),
     fmtt char (20) init ("^-^-TIMER    ^9.3b^/"),
     fmtbar char (14) init ("^-^-BAR   ^w^/"),
     fmtx char (13) init ("^-^-X^o   ^7o"),
     fmtinter char (16) init ("^/^-^-INTER ^12w"),
     fmtmode char (22) init ("^/^-^-MODE  ^12w  ^12w"),
     fmtflt char (14) init ("^-^-FAULT ^12w"),
     fmtprh char (39) init ("^/^/^-^-PR    R    SEG     WORD  BITS^/"),
     fmtpr char (39) init ("^-       ^2a (^o)   ^o   ^5o   ^6o  ^2o"),
     fmtamsdwh char (81) init ("^/^/^-AM: SDW^/^-^-  ADDR   R1R2R3  F  BOUND  REWPUG    CL  POINTER  F/E  USAGE^/"),
     fmtamsdw char (51) init ("^-^-^8o  ^o ^o ^o     ^5o  ^8a^5o  ^5o    ^a    ^2o"),
     fmtamptwh char (63) init ("^/^/^-AM: PTW^/^-^- ADDR    M   POINTER    PAGE    F/E  USAGE^/"),
     fmtamptw char (41) init ("^-^-^6o   ^2a   ^5o     ^4o     ^a    ^2o"),
     fmtcbh char (33) init ("^/^/^-^-COREBLOCKS: FIRST   NUM^/"),
     fmtcbno char (13) init ("^-^-^- NO MEM"),
     fmtmcmh char (33) init ("^/^/^-^-MEMORY CONTROLLER MASKS^/"),
     fmtmcm char (40) init ("^-  ^2o ^14w^14w^14w^14w^14w^14w^14w^14w"),
     fmthrh char (29) init ("^/^/^-^-^-HISTORY REGISTERS^/")) aligned int static;

dcl (fmteight char (37) init ("^-^4o^16w^14w^14w^14w^14w^14w^14w^14w"), /* For page table printing */
     fmtdesc char (66) init ("^-^-  ADDR   R1R2R3  F  BOUND  REWPUG    CL     SEGMENT     NAME^/"),
     fmtast char (64) init ("^/      ASTE      ^14w^14w^14w^14w^14w^14w^14w^14w^/PAGE TABLE^/"),
     fmtlth char (14) init ("^2-LENGTH = ^o"),
     fmteject char (2) init ("^|"),
     fmthdr char (11) init ("^|^a ERF ^a"),
     fmteq char (21) init ("^-^7o line^a repeated")) aligned int static;

dcl 1 dsbr based aligned,
   (2 add bit (24),
    2 pad1 bit (12),
    2 pad2 bit (1),
    2 bound bit (14),
    2 pad3 bit (4),
    2 unpaged bit (1),
    2 pad4 bit (4),
    2 stack bit (12)) unaligned;

dcl 1 scu based (scup) aligned,			/* SCU data needed by online_dump */
    2 ppr,					/* proceedure pointer register */
      3 prr bit (3) unal,				/* procedure ting register */
      3 psr bit (15) unal,				/* procedure segment register */
    2 pad1 bit (18) unal,				/*			*/
    2 pad2 (3) bit (36) unal,				/*			*/
    2 ilc bit (18) unal,				/* instruction counter */
    2 ir bit (18) unal,				/* indicator registers */
    2 pad3 (3) bit (36) unal;				/*		*/

dcl (ptr_array ptr,					/* Pointers to, lengths of component segments of image */
     len_array fixed bin) (0:31);

declare 1 cmp aligned,				/* Buffer containing contents of last printed line */
        2 (zero, two, four, six) fixed bin (71);

declare 1 temp aligned,				/* Buffer used when current 8 words straddle image segment boundary */
        2 (zero, two, four, six) fixed bin (71);

declare 1 dbl based aligned,				/* Template used to access current 8 words */
        2 (zero, two, four, six) fixed bin (71);

declare 1 sgl based aligned,				/* Template for printing individual words */
        2 (zero, one, two, three, four, five, six, seven) fixed bin (35);

dcl (cur, nxt, tmp, prt, eightp) ptr,			/* Pointers used in dumping */
    (ast_off, sst_abs_loc, sst_high_loc, abs_loc, jbdry, page_no) fixed bin,
    (b72 bit (72),					/* I/O status */
     bl char (l) based,				/* For format overlay */
     s char (1),					/* for singular/plural printing */
     c0 char (0)) aligned,				/* = null string */
    (i, j, l, j1, j2, eq_print) fixed bin,		/* Misc values */
     bin_array (0:1023) based fixed bin (35),
     dbl_array (0:1023) based fixed bin (71),
     cur_orig fixed bin (35),
    (cur_proc_index, cur_seg_no, given_length, half_gl) fixed bin,
						/* Per-segment values */
    (nsegs, seg_index, ptr_index, wpsmsi) fixed bin (18);	/* More misc */

declare 1 io_status based aligned,			/* To check 72-bits from ios_ calls */
        2 code fixed bin,				/* error code */
        2 substatus bit (36);				/* Bits */

dcl  axbitsp ptr;
dcl  axstring char (8) aligned;
dcl  axbits (6) bit (1) unaligned based (axbitsp);

dcl (amrp, ampp, scup) ptr;

% include assoc_mem;

% include slt;

% include sstnt;

% include ptw;

% include its;

% include sdw;

% include bos_dump;

% include sst;

/* Initialization */

	procname = "online_dump";
	prt = addr (wants_seg (0));
	prt -> ws16x72 = zilch;
	fnp_only = "0"b;
	go to get_erfno;

online_dump_355: od_355: entry;
	procname = "online_dump_355";
	fnp_only = "1"b;
	fnp_index = 1;				/* assume doing all starting with first */
	tag = "a";
	all_fnps = "1"b;

get_erfno: call cu_$arg_ptr (1, argp, argl, code);	/* Get mandatory first arg */
	if code ^= 0
	then do;
	     call com_err_ (code, procname, "ERF #");
	     return;
	end;

	if ^fnp_only then erf_no = arg;		/* Copy arg */
	else erf_no = arg || ".355";
	call get_dump_ptrs_ (erf_no, ptr_array, len_array, j, name); /* Get pointers to image segments */
	if j = 0
	then do;
	     call com_err_ (0, procname, "no pointers returned for arg ""^a""", erf_no);
	     return;
	end;

	ptr_array (j) = null;			/* For terminate loop */
	dumpptr = ptr_array (0);			/* Copy pointer for header access */
	call hcs_$get_max_length_seg (dumpptr, wps, code);
	if code ^= 0 then do;
	     call com_err_ (code, procname, "unable to get max length of ^a", name);
	     return;
	end;
						/* NEW STUFF */

get_args:
	argno = 1;

next_arg:
	argno = argno + 1;
	call cu_$arg_ptr (argno, argp, argl, code);	/* any more args */
	if code ^= 0 | argl = 0 then do;		/* if not, then leave */
	     if fnp_only then go to no_more_segs;	/* nothing more to do before attach call */
	     else go to no_more_args;
	end;

	if arg = "-dim" then do;			/* next arg is name of dim */
	     argno = argno + 1;
	     call cu_$arg_ptr (argno, argp, argl, code);
	     if code ^= 0 | argl = 0 then do;
		seg_id = "dim";
		go to call_com;
	     end;
	     iotype = arg;
	end;

	else if arg = "-dev" then do;			/* next arg is name of device or stream */
	     argno = argno + 1;
	     call cu_$arg_ptr (argno, argp, argl, code);
	     if code ^= 0 | argl = 0 then do;
		seg_id = "device";
		go to call_com;
	     end;
	     ioname2 = arg;
	end;

	else if arg = "-restart" & ^fnp_only then do;	/* if we are restarting */
	     restartsw = "1"b;			/* note it so no segs will be dumped */
	     argno = argno + 1;
	     call cu_$arg_ptr (argno, argp, argl, code);
	     if code ^= 0 | argl = 0 then do;
		seg_id = "restart process_number";
		go to call_com;
	     end;
	     rt_proc_no = cv_oct_check_ (arg, i);	/* except those following the seg with this proc_no */
	     if i ^= 0 then do;
		seg_id = "restart process_no is not octal";
		go to call_com_oct;
	     end;
	     argno = argno + 1;
	     call cu_$arg_ptr (argno, argp, argl, code);
	     if code ^= 0 | argl = 0 then do;
		seg_id = "restart segment number";
		go to call_com;
	     end;
	     rt_seg_no = cv_oct_check_ (arg, i);	/* AND this seg_no */
	     if i ^= 0 then do;
		seg_id = "restart segment_no is not octal";
		go to call_com_oct;
	     end;
	end;

	else if arg = "-segs" & ^fnp_only then do;
	     segselsw = "1"b;			/* later we will pick up selected segs */
	end;

	else if arg = "-tag" & fnp_only then do;
	     argno = argno + 1;
	     call cu_$arg_ptr (argno, argp, argl, code);
	     if code ^= 0 | argl = 0 then do;
		seg_id = "tag";
		go to call_com;
	     end;

	     tag = arg;
	     all_fnps = "0"b;			/* not doing all now */
	     fnp_index = index ("abcdefgh", tag);	/* convert to number */
	     if fnp_index = 0 then do;		/* not legal tag */
		seg_id = "invalid tag";
		go to call_com_oct;
	     end;

	     dumpptr = addrel (dumpptr, fnp_size* (fnp_index-1)); /* point to relevant core image */
	end;

	else do;
	     seg_id = arg;
	     code = error_table_$badopt;
	     go to call_com;
	end;

	go to next_arg;

call_com:
	call com_err_ (code, procname, "^a", seg_id);
	return;
call_com_oct:
	call com_err_ (0, procname, "^a:  ^a", seg_id, arg);
	return;

no_more_args:
						/* Extract various system segment numbers, and copy per-system data bases */
	if slt_seg = null
	then do;
	     call hcs_$make_seg (c0, "od.slt--", c0, seg_mode, slt_seg, code);
	     call hcs_$make_seg (c0, "od.nam--", c0, seg_mode, nam_seg, code);
	     call hcs_$make_seg (c0, "od.sst--", c0, seg_mode, sst_seg, code);
	     call hcs_$make_seg (c0, "od.sstnt", c0, seg_mode, sstnt_seg, code);
	     call hcs_$make_seg (c0, "od.dseg-", c0, seg_mode, ds_seg, code);
	     call hcs_$make_seg (c0, "od.pds--", c0, seg_mode, pds_seg, code);
	     call hcs_$make_seg (c0, "od.prds-", c0, seg_mode, prds_seg, code);
	     call hcs_$make_seg (c0, "od.shut-", c0, seg_mode, shut_seg, code);
	     call hcs_$make_seg (c0, "od.stk--", c0, seg_mode, stk_seg, code);
						/* Following calls temporarily commented out:
						   call hcs_$make_seg(c0, "od.pdf--", c0, seg_mode, pdf_seg, code);
						   /* Need more temporary segments?  Add above this line */
	end;
	cur_proc_index = 1;				/* For copy_dump_seg_ */
	namp, dsp, sstnp, sstp = null;		/* Just in case */
	slt_seg_no = 7;

	call copy_dump_seg_ (7, cur_proc_index, ptr_array, len_array, slt_seg, sltlen);
	if sltlen = 0
	then do;
	     call ioa_ ("Can't find ""^a""", "slt");
NOT_SLT:	     sltp = null;
	     sst_seg_no = 10;			/* Subject to change */
	     go to copy_sst;
	end;

	else do;					/* Pick out all interesting segment #-s */
	     sltp = slt_seg;
	     nam_seg_no = bin (baseno (sltp -> based_ptr), 18);
	     call copy_dump_seg_ (nam_seg_no, cur_proc_index, ptr_array, len_array, nam_seg, namlen);
	     if namlen ^= 0 then namp = nam_seg;
	     else do;				/* well at best the SLT is useless... */
		call ioa_ ("Cannot find name_table for slt");
		go to NOT_SLT;
	     end;

	     call ring0_get_$segptr_given_slt ("", "slt", prt, code, sltp, namp); /* remember we guessed slt_seg_no = 7 */
	     if bin (baseno (prt), 18) ^= 7 then do;	/* alleged SLT not able to figure its own number! */
		call ioa_ ("Segments 7 and ^o not functioning as slt and name_table", nam_seg_no);
		namp = null;
		go to NOT_SLT;
	     end;

	     call ring0_get_$segptr_given_slt ("", "sst", prt, code, sltp, namp);
	     if code = 0 then do;
		sst_seg_no = bin (baseno (prt), 18);
	     end;
	     else do;
		sst_seg_no = 9;
	     end;
	     call ring0_get_$segptr_given_slt ("", "sst_names_", prt, code, sltp, namp);
	     sstnt_seg_no = bin (baseno (prt), 18);
	     call ring0_get_$segptr_given_slt ("", "pds", prt, code, sltp, namp);
	     pds_seg_no = bin (baseno (prt), 18);
	     call ring0_get_$segptr_given_slt ("", "prds", prt, code, sltp, namp);
	     prds_seg_no = bin (baseno (prt), 18);

copy_sst:						/* Copying of SST must be the last in this sequence */
	     call copy_dump_seg_ (sst_seg_no, cur_proc_index, ptr_array, len_array, sst_seg, sstlen);
	     if sstlen = 0
	     then do;
		call ioa_ ("Can't find ""^a""", "sst");
		sstp = null;
	     end;
	     else do;
		sstp = sst_seg;
		sst_abs_loc = sstp -> sst.ptwbase;
		sst_high_loc = sst_abs_loc + sstlen ;
		ast_off = - (sstp -> sst.astsize);
	     end;
						/* Copy the SST name table */

	     call copy_dump_seg_ (sstnt_seg_no, cur_proc_index, ptr_array, len_array, sstnt_seg, sstntlen);
	     if sstntlen = 0 then do;
		call ioa_ ("Cannot find SST name table.");
		sstnp = null;
	     end;
	     else do;
		sstnp = sstnt_seg;
		if ^sstnp -> sstnt.valid then do;
		     call ioa_ ("SST name  table not filled in.");
		     sstnp = null;
		end;
	     end;
	end;
	if segselsw then do;			/* now we pick up selected segnames or numbers */
	     call ask_$ask_clr;			/* clear ask's internal line buffer */
get_next_seg:
	     call ask_ (c0, seg_id);			/* pick up specification of a seg */
	     if seg_id = "quit" then go to no_more_segs;	/* no more  wanted */
	     if seg_id = "regs" then do;
		wants_regs = "1"b;
		go to get_next_seg;
	     end;
	     seg_no = cv_oct_check_ (seg_id, i);	/* try it as octal segno */
	     if i = 0 then wants_seg (seg_no) = "1"b;	/* it is octal and we mark it wanted */
	     else if sltp ^= null then do;		/* not octal, see if its a name in SLT, if any */
		call ring0_get_$segptr_given_slt ("", (seg_id), prt, code, sltp, namp);
		if code = 0 then do;		/* it was found in SLT */
		     seg_no = bin (baseno (prt), 18);
		     wants_seg (seg_no) = "1"b;	/* and we mark it's segno as wanted */
		end;
		else do;				/* not in SLT,wasn't octal=> it loses */
		     call ioa_ ("Cannot find segment ^a in slt", seg_id); /* name or slt is nonsense */
		end;
	     end;
	     go to get_next_seg;			/* see if there are more */
	end;
no_more_segs:
	call ioa_ ("Segment ""^a"", device ""^a"", module ""^a""", /* Print current attachment info etc */
	     name, ioname2, iotype);
	call ios_$attach (ioname, iotype, ioname2, "w", b72); /* Attach printer or other device */
	tmp = addr (b72);				/* Pro _t_e_m_pore */
	if tmp -> io_status.code ^= 0
	then do;
	     call com_err_ (tmp -> io_status.code, procname,
		"attach call, sub-status ^w, contact programming staff", tmp -> io_status.substatus);
	     return;
	end;
	call od_print_$op_init (bin (dumpptr -> dump.erfno, 17), dumpptr -> dump.time); /* Initialize print program */
	call od_print_ (m1, fmthdr, "Start", erf_no);	/* Print header */
	tmp = addr (temp);				/* For short lines, boundary conditions, etc */
	eightp = addr (fmteight);			/* For page-table printout */
	if restartsw then call ioa_ ("Continue dumping ^a", erf_no);
	else
	call ioa_ ("Begin dumping ^a", erf_no);		/* Send message to console */
	if fnp_only then do while ("1"b);
	     call od_print_$op_finish;
	     call online_355_dump_ (dumpptr, fnp_index);
	     if all_fnps & fnp_index < max_fnps then do;	/* more fnp dumps to process */
		fnp_index = fnp_index + 1;
		dumpptr = addrel (dumpptr, fnp_size);	/* point to next core image */
	     end;

	     else go to tm_loop;
	end;

/* Print register contents */

	prt = addr (dumpptr -> dump.dbr);
	dsbr_stk_no = bin (prt -> dsbr.stack, 12) * 8;
	if (restartsw | (segselsw & ^wants_regs)) then go to skip_regs;

	call od_print_ (two, fmtdbrh);		/* descriptor base register */
	call od_print_ (three, fmtdbr,
	     prt -> dsbr.add, prt -> dsbr.bound, prt -> dsbr.unpaged, prt -> dsbr.stack);


	call od_print_ (four, fmtpprh);		/* proceedure pointer register */
	scup = addr (dumpptr -> dump.scu (0));
	call od_print_ (one, fmtppr,
	     scup -> scu.ppr.prr, scup -> scu.ppr.psr, scup -> scu.ilc);


	call od_print_ (two, fmtrar, dumpptr -> dump.regs.ralr);
	call od_print_ (two, fmtind, scup -> scu.ir);
	call od_print_ (one, fmta, dumpptr -> dump.regs.a);
	call od_print_ (one, fmtq, dumpptr -> dump.regs.q);
	call od_print_ (one, fmte, dumpptr -> dump.regs.e);
	call od_print_ (two, fmtt, dumpptr -> dump.regs.t);

	call od_print_ (two, fmtbar, dumpptr -> dump.bar);


	prt = addr (dumpptr -> dump.regs.x (0));
	do j = 0 by 1 while (j < 8);			/* index registers */
	     call od_print_ (one, fmtx, j, prt -> xreg (j));
	end;


	call od_print_ (two, fmtmode, dumpptr -> dump.modereg, dumpptr -> dump.cmodereg);
	call od_print_ (one, fmtflt, dumpptr -> dump.faultreg);


	call od_print_ (two, fmtinter, dumpptr -> dump.intrpts); /* interrupts */


	call od_print_ (four, fmtprh);		/* pointer registers */
	do j = 0 by 1 while (j < 8);
	     prt = addr (dumpptr -> dump.prs (j));
	     call od_print_ (one, fmtpr,
		substr ("APABBPBBLPLBSPSB", j*2+1, 2),
		j,
		bin (prt -> its.ringno, 3),
		bin (prt -> its.segno, 15),
		bin (prt -> its.offset, 18),
		bin (prt -> its.bit_offset, 6));
	end;

	call od_print_$op_new_page;

	call od_print_ (five, fmtamsdwh);		/* assoc. mem. segment descriptor words */

	do j = 0 by 1 while (j < 16);
	     amrp = addr (dumpptr -> dump.amsdwregs (j));
	     ampp = addr (dumpptr -> dump.amsdwptrs (j));

	     axstring = "REWPUG  ";			/* check some bits */
	     axbitsp = addr (amrp -> amsdwreg.read);
	     do l = 1 to 6;
		if axbitsp -> axbits (l) = "0"b then substr (axstring, l, 1) = " ";
	     end;

	     call od_print_ (one, fmtamsdw,
		bin (amrp -> amsdwreg.addr, 24),
		bin (amrp -> amsdwreg.r1, 3),
		bin (amrp -> amsdwreg.r2, 3),
		bin (amrp -> amsdwreg.r3, 3),
		bin (amrp -> amsdwreg.bound, 14),
		axstring,
		bin (amrp -> amsdwreg.cl, 14),
		bin (ampp -> amsdwptr.pointer, 15),
		substr ("EF", bin (ampp -> amsdwptr.valid, 1)+1, 1),
		bin (ampp -> amsdwptr.usage, 4));
	end;


	call od_print_ (five, fmtamptwh);		/* assoc. mem. page table words */
	do j = 0 by 1 while (j < 16);

	     amrp = addr (dumpptr -> dump.amptwregs (j));
	     ampp = addr (dumpptr -> dump.amptwptrs (j));

	     if amrp -> amptwreg.modif then twochar = "  "; else twochar = "NO";
	     if ampp -> amptwptr.valid then onechar = "F"; else onechar = "E";

	     call od_print_ (one, fmtamptw,
		bin (amrp -> amptwreg.addr, 18),
		twochar,
		bin (ampp -> amptwptr.pointer, 15),
		bin (ampp -> amptwptr.pageno, 12),
		onechar,
		bin (ampp -> amptwptr.usage, 4));
	end;

	call od_print_$op_new_page;

	call od_print_ (four, fmtcbh);		/* coreblocks */
	do j = 0 by 1 while (j < 8);
	     prt = addr (dumpptr -> dump.coreblocks (j).num_first);
	     if prt -> sgl.zero = -1 then call od_print_ (one, fmtcbno);
	     else do;
		n_first = bin (dumpptr -> dump.coreblocks (j).num_first, 18);
		n_blocks = bin (dumpptr -> dump.coreblocks (j).num_blocks, 18);
		call od_print_ (one, "^-^-^- ^6o ^4o", n_first, n_blocks);
	     end;
	end;

	call od_print_ (four, fmtmcmh);		/* memory controller masks */
	do j = 0 by 4 while (j< 8);
	     prt = addr (dumpptr -> dump.mcm (j));
	     call od_print_ (1, fmtmcm,
		2*j,
		prt -> sgl.zero, prt -> sgl.one, prt -> sgl.two, prt -> sgl.three,
		prt -> sgl.four, prt -> sgl.five, prt -> sgl.six, prt -> sgl.seven);
	end;

	call od_print_ (four, fmthrh);
	call od_print_ (two, "^/^-OU");
	do j = 0 by 4 while (j < 16);
	     prt = addr (dumpptr -> dump.ouhist (j));	/* operations unit history regs */
	     call od_print_ (one, fmtmcm,
		2*j,
		prt -> sgl.zero, prt -> sgl.one, prt -> sgl.two, prt -> sgl.three,
		prt -> sgl.four, prt -> sgl.five, prt -> sgl.six, prt -> sgl.seven);
	end;

	call od_print_ (two, "^/^-CU");
	do j = 0 by 4 while (j < 16);
	     prt = addr (dumpptr -> dump.cuhist (j));	/* control unit history registers */
	     call od_print_ (one, fmtmcm,
		2*j,
		prt -> sgl.zero, prt -> sgl.one, prt -> sgl.two, prt -> sgl.three,
		prt -> sgl.four, prt -> sgl.five, prt -> sgl.six, prt -> sgl.seven);
	end;

	call od_print_ (two, "^/^-AU");
	do j = 0 by 4 while (j < 16);
	     prt = addr (dumpptr -> dump.auhist (j));	/* appending unit history registers */
	     call od_print_ (one, fmtmcm,
		2*j,
		prt -> sgl.zero, prt -> sgl.one, prt -> sgl.two, prt -> sgl.three,
		prt -> sgl.four, prt -> sgl.five, prt -> sgl.six, prt -> sgl.seven);
	end;

	call od_print_ (two, "^/^-DU");
	do j = 0 by 4 while (j < 16);
	     prt = addr (dumpptr -> dump.duhist (j));	/* decimal unit history registers */
	     call od_print_ (one, fmtmcm,
		2*j,
		prt -> sgl.zero, prt -> sgl.one, prt -> sgl.two, prt -> sgl.three,
		prt -> sgl.four, prt -> sgl.five, prt -> sgl.six, prt -> sgl.seven);
	end;

/* Now dump individual segments/processes */

skip_regs:
	nsegs = dumpptr -> dump.num_segs;		/* Copy for quicker reference */
	cur_proc_no = 0;
	do i = 1 to nsegs;
	     cur_seg_no = bin (dumpptr -> dump.segs (i).segno, 18);
	     if i > 1 then cur_orig = bin (dumpptr -> dump.segs (i-1).length, 18) * 64 + cur_orig ;
	     else cur_orig = size (dump);
	     given_length = bin (dumpptr -> dump.segs (i).length, 18) * 64;
	     call od_print_$op_new_seg (cur_seg_no);
	     if cur_seg_no = ds_seg_no then cur_proc_no = cur_proc_no + 1;
	     if cur_seg_no = rt_seg_no then if cur_proc_no = rt_proc_no then restartsw = "0"b;
	     if restartsw then if cur_seg_no ^= ds_seg_no then go to next_seg;
	     if cur_seg_no = ds_seg_no & (^restartsw | cur_proc_no = rt_proc_no) /* Is it a new descriptor seg */
	     then do;
		cur_proc_index = i;			/* Yes, remember position for info for new process */
		prdsp, pdsp = null;
		if sltp ^= null then if namp ^= null	/* If we know where KST, PDS,PRDS are, copy them */
		     then do;
			call copy_dump_seg_ (pds_seg_no, cur_proc_index, ptr_array, len_array, pds_seg, pdslen);
			if pdslen ^= 0 then pdsp = pds_seg;
			call copy_dump_seg_ (prds_seg_no, cur_proc_index, ptr_array, len_array, prds_seg, prdslen);
			if prdslen ^= 0 then prdsp = prds_seg;
		     end;
		call copy_dump_seg_ (cur_seg_no, cur_proc_index, ptr_array, len_array, ds_seg, dslen);
						/* Copy descriptor segment for this process */
		if dslen = 0
		then dsp, sdwp = null;
		else do;
		     dsp = ds_seg;
		     if (restartsw | (segselsw & ^wants_seg (ds_seg_no))) then go to next_seg;
		     else do;
			eq_print = 0;
			call od_print_ (four, "^/^/^4-DESCRIPTOR SEGMENT^/");
			call od_print_ (two, fmtdesc);
			half_gl = divide (given_length, 2, 17, 0);
			do j = 0 by 1 while (j ^= half_gl); /* Print symbolic breakout of descriptors */
			     if dsp -> dbl_array (j) = 0 /* Don't print null SDW */
			     then eq_print = eq_print + 1; /* merely note it for blank line later */
			     else do;
				if eq_print ^= 0
				then call od_print_ (one, c0); /* Print blank line */
				if sltp = null then go to CALL_PDSN_1;
				if sltp -> slt.last_sup_seg >= j then do;
				     call print_dump_seg_name_$hard (j, dsp -> dbl_array (j), sltp, namp);
				end;
				else do;
CALL_PDSN_1:			     call print_dump_seg_name_ (j, dsp -> dbl_array (j), sstp, sstnp);
				end;
				eq_print = 0;	/* Reset counter */
			     end;
			end;
		     end;
		end;
		call od_print_$op_new_page;		/* After descriptor breakout, new page for segment */
	     end;

	     if segselsw then if ^wants_seg (cur_seg_no) then go to next_seg;
	     abs_loc = -wps;			/* Generate large negative number */
	     jbdry = -1;				/* Such that comparison below will never succeed */
	     if dsp ^= null
	     then do;
		sdwp = addr (dsp -> dbl_array (cur_seg_no));
		call od_print_ (two, fmtdesc);
		if sltp = null then go to CALL_PDSN_2;
		if sltp -> slt.last_sup_seg >= cur_seg_no
		then call print_dump_seg_name_$hard (cur_seg_no, dsp -> dbl_array (cur_seg_no), sltp, namp);
		else do;
CALL_PDSN_2:	     call print_dump_seg_name_ (cur_seg_no, dsp -> dbl_array (cur_seg_no), sstp, sstnp);
		end;
		if sdwp -> sdw.add
		then if sdwp -> sdw.unpaged = "0"b
		     then do;
			if sstp ^= null		/* Get AST entry and page table */
			then do;
			     j = bin (sdwp -> sdw.add, 24);
			     if j > sst_high_loc	/* Check for address beyond end of SST */
			     then go to use_abs;
			     jbdry = 0;		/* Where absolute location is next computed */
			     page_no = 0;		/* for indexing into page table */
			     ptp = addrel (sstp, j - sst_abs_loc);
			     prt = ptp;
			     astep = addrel (ptp, ast_off);

			     j1 = bin (sdwp -> sdw.bound, 14) + 1; /* Extract bounds field */
			     j2 = divide (j1 + 63, 64, 17, 0);
			     j1 = divide (j2, 8, 17, 0);
			     j2 = j2 - j1 * 8;

			     call od_print_ (four, fmtast,
				astep -> sgl.zero, astep -> sgl.one, astep -> sgl.two, astep -> sgl.three,
				astep -> sgl.four, astep -> sgl.five, astep -> sgl.six, astep -> sgl.seven);
			     do j = 0 by 8 while (j < j1); /* Print full lines */
				call od_print_ (one, fmteight, j,
				     prt -> sgl.zero, prt -> sgl.one, prt -> sgl.two, prt -> sgl.three,
				     prt -> sgl.four, prt -> sgl.five, prt -> sgl.six, prt -> sgl.seven);
				prt = addrel (prt, 8);
			     end;
			     if j2 ^= 0
			     then do;
				l = j2 * 4 + 5;	/* # of characters to use */
				call od_print_ (one, eightp -> bl, j,
				     prt -> sgl.zero, prt -> sgl.one, prt -> sgl.two, prt -> sgl.three,
				     prt -> sgl.four, prt -> sgl.five, prt -> sgl.six);
			     end;
			end;
		     end;
		     else				/* ! */
use_abs:		     abs_loc = bin (sdwp -> sdw.add, 24);
		call od_print_ (one, c0);		/* Separate contents from header by blank line */
	     end;
	     if given_length <= 0
	     then do;
		call od_print_ (one, fmtlth, given_length);
		go to next_seg;
	     end;

/* All preliminary work done, start to dump seg */
/* Note: given_length is in words */

	     prt = null;
	     if cur_seg_no ^= 0 then do;
		if (cur_seg_no = pds_seg_no & pdsp ^= null) then prt = pdsp;
		else if (cur_seg_no = prds_seg_no & prdsp ^= null) then prt = prdsp;
		else if (cur_seg_no >= dsbr_stk_no & dsbr_stk_no ^= 0 & cur_seg_no - dsbr_stk_no < 8) then do;
		     call copy_dump_seg_ (cur_seg_no, cur_proc_index, ptr_array, len_array, stk_seg, stklen);
		     if stklen ^= 0 then prt = stk_seg;
		end;
	     end;
	     if prt = null then go to NOT_STACK;
	     call od_stack_ (prt, given_length, sltp, namp, sstp, sstnp);
	     go to next_seg;			/* this one is done */
NOT_STACK:
	     j1 = given_length;			/*  num lines in seg as dumped by bos, which dumps 64 wd blocks */
	     if sdwp -> sdw.unpaged then do;
		j2 = (bin (sdwp -> sdw.bound, 14) + 1) * 16; /* unpaged segs' lengths not necess multiple of 64 really */
		if j2 < j1 then j1 = j2;		/* so we use the bounds field which gives num of 16 wd units */
	     end;

	     ptr_index = divide (cur_orig, wps, 17, 0);
	     seg_index = mod (cur_orig, wps);
	     cur = addrel (ptr_array (ptr_index), seg_index);

	     eq_print = 0;				/* No suppressed lines */

/* Note re-entry to loop at "compare": if Version II PL/I makes noises, change to "do while", etc */

	     do j = 0 by 8 while (j < j1);		/* print all full lines */

		wpsmsi = wps - seg_index;		/* Calculate # of words remaining in current image seg */

		if wpsmsi >= 8			/* 8 or more, print directly */
		then do;
retry_8:
		     prt = cur;
compare:						/* Come here at most once after main loop to compare and */
						/* print partial line */

		     if j = jbdry
		     then do;
			ptwp = addr (ptp -> bin_array (page_no));
			if ptwp -> ptw.df
			then abs_loc = bin (ptwp -> ptw.add, 18) * 64;
			else abs_loc = -wps;	/* Page not in core */

			jbdry = jbdry + 1024;
			page_no = page_no + 1;
		     end;

		     if j ^= 0			/* Don't check first time through */
		     then if prt -> dbl.six = cmp.six	/* See if this line equals previous line */
			then if prt -> dbl.four = cmp.four
			     then if prt -> dbl.two = cmp.two
				then if prt -> dbl.zero = cmp.zero
				     then do;
					eq_print = eq_print + 1; /* Note occurence of repeated line */
					go to endj;
				     end;

		     if eq_print ^= 0		/* Line was different, were there suppressed lines? */
		     then do;
			if eq_print = 1		/* How many? */
			then s = " ";
			else s = "s";
			call od_print_ (one, fmteq, eq_print, s);
			eq_print = 0;		/* Reset counter */
		     end;


/*		     call od_print_(one, fmt, abs_loc, j,
   prt -> sgl.zero, prt -> sgl.one, prt -> sgl.two, prt -> sgl.three,
   prt -> sgl.four, prt -> sgl.five, prt -> sgl.six, prt -> sgl.seven); /* Print line */

		     call od_print_$op_fmt_line (abs_loc, j, prt -> sgl.zero);

		     cmp.six = prt -> dbl.six;	/* Copy for next comparison */
		     cmp.four = prt -> dbl.four;
		     cmp.two = prt -> dbl.two;
		     cmp.zero = prt -> dbl.zero;
		end;


		else do;				/* fewer than 8, switch to next seg of image */
		     nxt = ptr_array (ptr_index + 1);
		     if wpsmsi = 0			/* If zero, trivial */
		     then do;
			cur = nxt;
			seg_index = 0;
			go to retry_8;
		     end;

		     seg_index = -wpsmsi;		/* Set for advancing at "endj" */
		     cur = addrel (nxt, seg_index);
		     prt = tmp;			/* Compare/print from special buffer */
		     go to compare;
		end;

endj:		cur = addrel (cur, 8);		/* Advance pointer */
		seg_index = seg_index + 8;		/* and index in parallel */
		abs_loc = abs_loc + 8;		/* Augment absolute address */
	     end;


	     if eq_print ^= 0			/* See if last line was identical to last printed line */
	     then do;
		if eq_print = 1
		then s = " ";
		else s = "s";
		call od_print_ (one, fmteq, eq_print, s);
	     end;


next_seg:
	end;

/* Cleanup */
tm_loop:
	do j = 0 by 1 to 9 while (ptr_array (j) ^= null); /* Terminate all segs of image */
	     call hcs_$terminate_noname (ptr_array (j), code);
	end;

	call od_print_ (m1, fmthdr, "End", erf_no);

od_cleanup: entry;					/* To close buffer and detach printer */
	call od_print_ (m1, fmteject);

	call od_print_$op_finish;
	call ios_$detach (ioname, c0, c0, b72);
	call ioa_ ("Finished dump");
     end online_dump;
