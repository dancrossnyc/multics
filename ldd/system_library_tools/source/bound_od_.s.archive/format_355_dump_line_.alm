" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1982 *
" *                                                         *
" * Copyright (c) 1972 by Massachusetts Institute of        *
" * Technology and Honeywell Information Systems, Inc.      *
" *                                                         *
" ***********************************************************

" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	FORMAT_355_DUMP_LINE_
"
"	This is an alm program which is called by online_355_dump_ to
"	produce an ascii representation of 1 or more 355 words in octal.
"	It is called with three arguments: argument 1 is a pointer to the
"	input data. This pointer may have a bit offset in it but it must
"	be either 0 or 18 (i.e., the 355 words must be 18 bit aligned).
"	Argument 2 is the number of 355 18 bit words to be converted to
"	their ascii octal representation. Argument 3 is a pointer to the
"	place where the output is to be written. This pointer may have
"	a bit offset but it must be on a 9 bit (character) boundary.
"
"	This program has another entry point, 'line'. The first 3 args
"	are as above but the last four consist of two pointer, fixed
"	bin pairs that are to be converted to octal. That is, the 2 fixed
"	bin args are to be converted to octal and the result placed in
"	the locations specified by the pointers. The two fixed bin values
"	are location counters for placement in the dump line.
"
"
"	Originally written by R.B.Snyder 09/14/73
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

	name	format_355_dump_line_
	entry	format_355_dump_line_
format_355_dump_line_:
	eppbp	ap|2,*		get ptr to ptr to input data
	ldaq	bp|0		get ptr to data in AQ
	qrl	9		shift bit count to ql
	anq	=o77,dl		isolate
	eax1	0,ql		copy to X1
	eppbp	bp|0,*		put pointer in bp
	ldq	ap|4,*		get 355 word count in q
	mpy	6,dl		compute number of octits
	eax3	0,ql		put in X3
	eppbb	ap|6,*		get pointer to pointer to output
	ldaq	bb|0		get ptr to output in AQ
	qrl	9		shift bit count to ql
	anq	=o77,dl		isolate
	div	9,dl		comput character number (0-3)
	qls	1		multiply char by 2
	eax2	0,ql		put char number*2 in X2
	eppbb	bb|0,*		put pointer to output in bb
	ldq	bp|0		get input
	qls	0,1		shift to get correct 18 bit word
	cmpx1	18,du		see if 18 or 36 bit aligned
	tnz	*+3
	eax1	6		18
	tra	*+2
	eax1	12		36
loop:
	lda	0,dl		clear A
	lls	3		get an octit into A-reg
	ora	=o60,dl		convert to ascii
	xed	store,2		store in output
	adx3	-1,du		decrement  character count
	tze	return		all done
	eax2	2,2		bump output character position
	cmpx2	8,du		see if done with current word
	tnz	*+3
	eax2	0		yes
	eppbb	bb|1		advance output pointer
	eax1	-1,1		decrement count of remaining octits
	cmpx1	6,du		time to insert blank?
	tze	insert_blank	yes
	cmpx1	0,du
	tnz	loop		no
insert_blank:
	lda	=o40,dl		get a blank
	xed	store,2		put in output string
	eax2	2,2		advance output index
	cmpx2	8,du
	tnz	*+3
	eax2	0
	eppbb	bb|1
	cmpx1	0,du		done with current word?
	tnz	loop		still more in Q-reg
	eax1	12		get new count of octits
	eppbp	bp|1		advance input pointer
	ldq	bp|0		get new word
	tra	loop
return:
	lda	ap|0		see if called with 3 args
	arl	18
	cmpa	6,dl
	tnz	line_entry	no - we were called at line entry point
real_return:
	short_return

	entry	line
line:
	eax4	0
	tra	format_355_dump_line_ do first 3 args
line_entry:
	cmpx4	8,du		have we gone thru both pairs
	tze	real_return	yes
	ldaq	ap|8,4		get ptr
	staq	ap|6		and substitute for third arg
	ldq	18,dl		put a bit offset in arg ptr so
	qls	9		common code will work
	orsq	ap|11,4		..
	eppbp	ap|10,4		get ptr to fixed bin number
	spribp	ap|2		store as first arg
	eppbp	=1		arg 2 is number of words to do
	spribp	ap|4
	eax4	4,4		bump call index
	tra	format_355_dump_line_



	even
store:
	als	9*3
	stba	bb|0,40
	als	9*2
	stba	bb|0,20
	als	9*1
	stba	bb|0,10
	nop	0,du
	stba	bb|0,04


	end
