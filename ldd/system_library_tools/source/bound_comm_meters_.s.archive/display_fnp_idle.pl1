/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* format: style4,delnl,insnl,^ifthendo */
display_fnp_idle:
     procedure;

/* This command displays the data accumulated in segments by meter_fnp_idle. The
   information is displayed either in summary form or as a histogram over a specified
   time interval. */

/* Written January 1982 by Robert S. Coren */
/* Modified March 1981 by Robert S. Coren to fix entry-counting bugs */


/* AUTOMATIC */

dcl  dirname char (168);
dcl  hist bit (1);
dcl  summary bit (1);
dcl  from_time fixed bin (71);
dcl  to_time fixed bin (71);
dcl  minutes fixed bin;
dcl  line_length fixed bin;
dcl  code fixed bin (35);
dcl  fnp_names (8) char (1);
dcl  fnps (8) bit (1);				/* indicates whether an FNP is to be included */
dcl  fnpx fixed bin;
dcl  nargs fixed bin;
dcl  iarg fixed bin;
dcl  fnp_no fixed bin;
dcl  areap pointer;
dcl  earliest_of_all fixed bin (71);
dcl  latest_of_all fixed bin (71);
dcl  fnp_name char (1);
dcl  i fixed bin;
dcl  ok bit (1);
dcl  starname char (32);
dcl  entryx fixed bin;
dcl  earliest_found bit (1);
dcl  latest_found bit (1);
dcl  segx fixed bin;
dcl  entname char (32);
dcl  last_segx fixed bin;
dcl  last_start fixed bin (71);
dcl  last_finish fixed bin (71);
dcl  last_entry fixed bin;
dcl  last_time_in_seg fixed bin (71);
dcl  last_entry_in_seg fixed bin;
dcl  opening_time fixed bin (71);
dcl  closing_time fixed bin (71);
dcl  time_to_stop fixed bin (71);
dcl  total_entries fixed bin;
dcl  beginning_found bit (1);
dcl  prev_fnp_idle_datap pointer;
dcl  first_segx fixed bin;
dcl  first_entry fixed bin;
dcl  first_idle_count fixed bin (35);
dcl  first_sample_count fixed bin (35);
dcl  last_idle_count fixed bin (35);
dcl  last_sample_count fixed bin (35);
dcl  latest_beginning fixed bin (71);
dcl  min_sample fixed bin (35);
dcl  minimum_time fixed bin (71);
dcl  start_of_minimum_average fixed bin (71);
dcl  min_idle fixed bin (35);
dcl  min_idle_time fixed bin (71);
dcl  total_samples fixed bin (35);
dcl  absolute_max fixed bin (35);
dcl  overall_average float bin;
dcl  start_time_string char (24);
dcl  end_time_string char (24);
dcl  start_string char (16);
dcl  end_string char (16);
dcl  average_sample fixed bin (35);
dcl  minimum_average float bin;
dcl  min_start_string char (24);
dcl  min_end_string char (24);
dcl  min_idle_string char (24);
dcl  hist_interval fixed bin (71);
dcl  total_intervals fixed bin;
dcl  no_of_fnps fixed bin;
dcl  minimum_idle fixed bin;
dcl  fnp_id fixed bin;
dcl  next_time fixed bin (71);
dcl  valuex fixed bin;
dcl  residual bit (1);
dcl  entries_per_interval fixed bin;
dcl  last_interval_start fixed bin;
dcl  max_idle fixed bin (35);
dcl  next_entryx fixed bin;
dcl  latest_time fixed bin (71);
dcl  last_origin pointer;
dcl  end_of_last pointer;
dcl  last_interval fixed bin (71);
dcl  remaining_entries fixed bin;
dcl  scale_marks fixed bin;
dcl  top_of_scale fixed bin;
dcl  hist_width fixed bin;
dcl  cols_per_pct float bin;
dcl  space fixed bin;
dcl  ioa_str char (32);
dcl  ioa_strl fixed bin;
dcl  any bit (1);
dcl  prev_date char (8);
dcl  cur_time fixed bin (71);
dcl  suppressed (8) fixed bin;
dcl  line fixed bin;
dcl  cells fixed bin;
dcl  last_had_data bit (1);
dcl  output_line char (120);
dcl  dt_string char (24);
dcl  cur_column fixed bin;
dcl  already fixed bin;
dcl  new fixed bin;

dcl  1 output (8) aligned,
       2 column fixed bin,
       2 name char (1);

dcl  1 fnp_info_array (8) aligned like fnp_histogram_info;

dcl  names_array_ptr pointer;
dcl  seg_array_ptr pointer;
dcl  seg_count fixed bin;
dcl  idle_value_ptr pointer;
dcl  infop pointer;


/* ARGUMENT PARSING */

dcl  argp pointer;
dcl  argl fixed bin (21);
dcl  arg char (argl) based (argp);


/* BASED */

dcl  the_area area (261120) based (areap);

dcl  1 auto_area_info aligned like area_info;

dcl  1 names_array aligned based (names_array_ptr),	/* used in call to sort_intems_ */
       2 n_names,
       2 name_ptr (star_entry_count refer (names_array.n_names)) pointer unaligned;

dcl  1 seg_array aligned based (seg_array_ptr),
       2 no_of_segs fixed bin,
       2 pad bit (36),
       2 segptr (seg_count refer (seg_array.no_of_segs)) pointer;

dcl  idle_values (total_intervals, no_of_fnps) fixed bin based (idle_value_ptr);

dcl  1 fnp_histogram_info aligned based (infop),
       2 seg_array_ptr pointer,			/* points to array of pointers to segments containing data for this FNP */
       2 total_segs fixed bin,
       2 first_seg_of_interest fixed bin,		/* index in seg_array of earliest segment we will use */
       2 last_seg_of_interest fixed bin;

dcl  based_entname char (32) based;


/* ENTRIES */

dcl  define_area_ entry (ptr, fixed bin (35));
dcl  release_area_ entry (ptr);
dcl  get_wdir_ entry returns (char (168));
dcl  cu_$arg_count entry (fixed bin, fixed bin (35));
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl  com_err_ entry () options (variable);
dcl  com_err_$suppress_name entry () options (variable);
dcl  parse_fnp_name_ entry (char (*), fixed bin);
dcl  cv_dec_check_ entry (char (*), fixed bin (35)) returns (fixed bin (35));
dcl  get_system_free_area_ entry () returns (ptr);
dcl  expand_pathname_ entry (char (*), char (*), char (*), fixed bin (35));
dcl  hcs_$star_ entry (char (*), char (*), fixed bin (2), ptr, fixed bin, ptr, ptr, fixed bin (35));
dcl  hcs_$initiate entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr, fixed bin (35));
dcl  pathname_ entry (char (*), char (*)) returns (char (168));
dcl  sort_items_$char entry (ptr, fixed bin (24));
dcl  hcs_$terminate_noname entry (ptr, fixed bin (35));
dcl  date_time_ entry (fixed bin (71), char (*));
dcl  ioa_ entry () options (variable);
dcl  ioa_$rsnnl entry options (variable);
dcl  get_line_length_$switch entry (ptr, fixed bin (35)) returns (fixed bin);


/* EXTERNAL STATIC */

dcl  (
     error_table_$inconsistent,
     error_table_$noarg,
     error_table_$badopt,
     error_table_$nomatch
     ) fixed bin (35) external static;

dcl  sys_info$max_seg_size fixed bin (19) external static;

/* INTERNAL STATIC */

dcl  COMMAND_NAME char (16) internal static options (constant) init ("display_fnp_idle");
dcl  PERCENTS (10) fixed bin internal static options (constant) init (10, 20, 30, 40, 50, 60, 70, 80, 90, 100);


/* BUILTINS, CONDITIONS, ETC. */

dcl  cleanup condition;

dcl  (addr, substr, sum, divide, null, max, float, fixed, empty, index) builtin;

	dirname = get_wdir_ ();
	hist, summary = "0"b;
	from_time, to_time = 0;
	minutes = 0;
	line_length = 0;
	fnp_names (*) = " ";
	fnps (*) = "0"b;
	fnpx = 0;

	call cu_$arg_count (nargs, code);
	if code ^= 0
	then do;
	     call com_err_ (code, COMMAND_NAME);
	     return;
	end;

	if nargs = 0
	then do;
	     call com_err_$suppress_name (0, COMMAND_NAME,
		"Usage: display_fnp_idle -summary | -histogram {fnp_names} {-control_args}");
	     return;
	end;

	do iarg = 1 to nargs;
	     call cu_$arg_ptr (iarg, argp, argl, code);
	     if code ^= 0
	     then do;
		call com_err_ (code, COMMAND_NAME);
		return;
	     end;

	     if substr (arg, 1, 1) ^= "-"		/* not a control arg, must be an FNP name */
	     then do;
		call parse_fnp_name_ (arg, fnp_no);
		if fnp_no < 0
		then do;
		     call com_err_ (0, COMMAND_NAME, "^a is not a valid FNP name.", arg);
		     return;
		end;

		if fnps (fnp_no)
		then do;
		     call com_err_ (error_table_$inconsistent, COMMAND_NAME, "FNP ^a specified more than once.", arg);
		     return;
		end;

		fnps (fnp_no) = "1"b;
		fnpx = fnpx + 1;
		fnp_names (fnpx) = arg;
	     end;

	     else do;
		if arg = "-histogram" | arg = "-hist"
		then if summary
		     then go to BOTH;
		     else hist = "1"b;

		else if arg = "-summary" | arg = "-sum"
		then if hist
		     then do;
BOTH:
			call com_err_ (error_table_$inconsistent, COMMAND_NAME,
			     "Cannot specify both -histogram and -summary");
			return;
		     end;

		     else summary = "1"b;

		else if arg = "-from" | arg = "-fm"
		then from_time = get_time (arg);

		else if arg = "-to"
		then to_time = get_time (arg);

		else if arg = "-interval"
		then minutes = get_numeric_arg (arg);

		else if arg = "-line_length" | arg = "-ll"
		then do;
		     line_length = get_numeric_arg (arg);
		     if line_length < 38
		     then do;
			call com_err_ (0, COMMAND_NAME,
			     "Specified line length of ^d is less than allowable minimum of 38.", line_length);
			return;
		     end;
		end;

		else if arg = "-directory" | arg = "-dr"
		then do;
		     iarg = iarg + 1;
		     call cu_$arg_ptr (iarg, argp, argl, code);
		     if code ^= 0
		     then do;
NO_DIR:
			call com_err_ (code, COMMAND_NAME, "No directory pathname specified.");
			return;
		     end;

		     if substr (arg, 1, 1) = "-"
		     then go to NO_DIR;

		     call expand_pathname_ (arg, dirname, entname, code);
		     if code ^= 0
		     then do;
			call com_err_ (code, COMMAND_NAME, arg);
			return;
		     end;

		     dirname = pathname_ (dirname, entname);
		end;

		else do;
		     call com_err_ (error_table_$badopt, COMMAND_NAME, arg);
		     return;
		end;
	     end;
	end;

	if ^(hist | summary)
	then do;
	     call com_err_ (error_table_$noarg, COMMAND_NAME, "one of -histogram or -summary must be specified.");
	     return;
	end;

	if to_time ^= 0
	then if to_time <= from_time
	     then do;
		call com_err_ (error_table_$inconsistent, COMMAND_NAME,
		     "Time specified by -to is not later than time specified by -from");
		return;
	     end;

	if ^hist
	then if minutes ^= 0 | line_length ^= 0
	     then call com_err_ (0, COMMAND_NAME,
		     "-interval and/or -line_length was specified without -histogram, and will be ignored.");

	if fnpx = 0				/* no FNPs specified, so do them all */
	then fnps (*) = "1"b;

	idle_value_ptr = null ();
	earliest_of_all, latest_of_all = 0;
	star_entry_ptr, star_names_ptr, names_array_ptr = null ();


	area_infop = addr (auto_area_info);
	area_info.version = area_info_version_1;
	string (area_info.control) = "0"b;
	area_info.owner = COMMAND_NAME;
	area_info.size = sys_info$max_seg_size;
	area_info.areap = null ();

	call define_area_ (area_infop, code);
	if code ^= 0
	then do;
	     call com_err_ (code, COMMAND_NAME, "Could not define area.");
	     return;
	end;
	areap = area_info.areap;
	the_area = empty ();

	fnp_info_array (*).seg_array_ptr = null ();
	on cleanup call clean_up_everything;

	do i = 1 to 8;
	     if fnps (i)
	     then do;
		infop = addr (fnp_info_array (i));
		fnp_name = substr ("abcdefgh", i, 1);
		ok = "0"b;
		seg_array_ptr = null ();
		starname = "fnp_idle_data." || fnp_name || ".**";
		call hcs_$star_ (dirname, starname, star_BRANCHES_ONLY, areap, star_entry_count, star_entry_ptr,
		     star_names_ptr, code);

		if code = error_table_$nomatch
		then go to NO_DATA;

		if code ^= 0
		then call com_err_ (code, COMMAND_NAME, starname);

		else do;
		     allocate names_array in (the_area) set (names_array_ptr);
		     do entryx = 1 to star_entry_count;
			names_array.name_ptr (entryx) = addr (star_names (star_entries (entryx).nindex));
		     end;

		     call sort_items_$char (names_array_ptr, 32);
		     fnp_histogram_info.total_segs = star_entry_count;
		     seg_count = star_entry_count;
		     allocate seg_array in (the_area) set (seg_array_ptr);
		     fnp_histogram_info.seg_array_ptr = seg_array_ptr;
		     earliest_found, latest_found = "0"b;
		     do segx = 1 to seg_count while (^latest_found);
			entname = names_array.name_ptr (segx) -> based_entname;
			call hcs_$initiate (dirname, entname, "", 0, 1, seg_array.segptr (segx), code);

			if seg_array.segptr (segx) = null ()
			then call com_err_ (code, COMMAND_NAME, "Could not initiate ^a",
				pathname_ (dirname, entname));

			else do;
			     fnp_idle_data_ptr = seg_array.segptr (segx);
			     if to_time ^= 0
			     then if fnp_idle_data.time_started > to_time
				then do;
				     call hcs_$terminate_noname (fnp_idle_data_ptr, (0));
				     seg_array.segptr (segx) = null ();
				     latest_found = "1"b;
				     go to NEXT_SEG;
				end;

			     if ^earliest_found
			     then do;
				if from_time ^= 0
				then if fnp_idle_data.time_started <= from_time
				     then if fnp_idle_data.last_time <= from_time
					then do;
					     call hcs_$terminate_noname (fnp_idle_data_ptr, (0));
					     seg_array.segptr (segx) = null ();
					     go to NEXT_SEG;
					end;

				fnp_histogram_info.first_seg_of_interest = segx;
				earliest_found = "1"b;
				if earliest_of_all = 0 | fnp_idle_data.time_started < earliest_of_all
				then earliest_of_all = fnp_idle_data.time_started;
			     end;

			     last_segx = segx;
			     last_start = fnp_idle_data.time_started;
			     last_finish = fnp_idle_data.last_time;
			     if to_time ^= 0
			     then if last_finish >= to_time
				then latest_found = "1"b;
			end;
NEXT_SEG:
		     end;

		     if ^earliest_found
		     then go to NO_DATA;

		     ok = "1"b;
		     latest_of_all = max (latest_of_all, to_time, last_finish);
		     fnp_histogram_info.last_seg_of_interest = last_segx;

		     if summary
		     then do;			/* we can deal with this right now and be done with it */
			fnp_idle_data_ptr = seg_array.segptr (last_segx);
			if to_time = 0 | fnp_idle_data.last_time <= to_time
			then do;
			     last_entry = fnp_idle_data.entries_used;
			     closing_time = fnp_idle_data.last_time;
			end;

			else do;
			     last_entry =
				fnp_idle_data.entries_used
				-
				divide (fnp_idle_data.last_time - to_time, fnp_idle_data.sample_interval, 17, 0);
			     closing_time = to_time;
			end;

			total_entries = last_entry;
			beginning_found = "0"b;
			first_segx, segx = last_segx;
			first_entry = 0;
			last_idle_count = fnp_idle_data.entries (last_entry).idle_count;
			last_sample_count = fnp_idle_data.entries (last_entry).sample_count;
			min_sample = fnp_idle_data.minimum_delta_idle;
			minimum_time = fnp_idle_data.time_of_minimum_average;
			min_idle = fnp_idle_data.minimum_idle_count;
			min_idle_time = fnp_idle_data.time_of_minimum_sample;

			do while (^beginning_found);
			     if from_time = 0 | fnp_idle_data.time_started > from_time
			     then do;
				latest_beginning = fnp_idle_data.time_started;
				do segx = segx - 1 to 1 by -1 while (seg_array.segptr (segx) = null ());
				end;
				if segx < 1
				then beginning_found = "1"b;
				else do;
				     prev_fnp_idle_datap = fnp_idle_data_ptr;
						/* in case we have to go back to it */
				     fnp_idle_data_ptr = seg_array.segptr (segx);
				     if latest_beginning - fnp_idle_data.last_time
					> fnp_idle_data.sample_interval + 30000000
						/* 30-second fudge factor */
				     then do;
					beginning_found = "1"b;
					fnp_idle_data_ptr = prev_fnp_idle_datap;
						/* back to other segment */
				     end;

				     else do;
					total_entries = total_entries + fnp_idle_data.entries_used;
					if fnp_idle_data.minimum_delta_idle < min_sample
					     & fnp_idle_data.time_of_minimum_average >= from_time
					then do;
					     min_sample = fnp_idle_data.minimum_delta_idle;
					     minimum_time = fnp_idle_data.time_of_minimum_average;
					end;

					if fnp_idle_data.minimum_idle_count < min_idle
					     & fnp_idle_data.time_of_minimum_sample >= from_time
					then do;
					     min_idle = fnp_idle_data.minimum_idle_count;
					     min_idle_time = fnp_idle_data.time_of_minimum_sample;
					end;
				     end;
				end;
			     end;

			     else do;
				beginning_found = "1"b;
				first_entry =
				     divide (from_time - fnp_idle_data.time_started,
				     fnp_idle_data.sample_interval, 17, 0);
				total_entries = total_entries - first_entry;
			     end;
			end;

			first_entry = first_entry + 1;
			if total_entries <= 1 | last_entry ^> first_entry
			then go to NO_DATA;

			opening_time = max (from_time, fnp_idle_data.time_started);
			first_idle_count = fnp_idle_data.entries (first_entry).idle_count;
			first_sample_count = fnp_idle_data.entries (first_entry).sample_count;
			start_of_minimum_average = minimum_time - fnp_idle_data.sample_interval;
			total_samples = last_sample_count - first_sample_count;
			absolute_max = total_samples * fnp_idle_data.maximum_idle_count;
			overall_average = 100 * float (last_idle_count - first_idle_count) / float (absolute_max);

			call date_time_ (opening_time, start_time_string);
			call date_time_ (closing_time, end_time_string);
			start_string = substr (start_time_string, 1, 16);
			if substr (end_time_string, 1, 8) = substr (start_time_string, 1, 8)
			then end_string = substr (end_time_string, 11, 6);
			else end_string = substr (end_time_string, 1, 16);

			call ioa_ ("^/FNP ^a idle time from ^a to ^a: ^.1f%", fnp_name, start_string, end_string,
			     overall_average);

			if start_of_minimum_average >= opening_time & minimum_time <= closing_time
			then do;
			     average_sample = divide (total_samples, total_entries - 1, 35, 0);
			     minimum_average =
				100 * float (min_sample)
				/ float (average_sample * fnp_idle_data.maximum_idle_count);
			     call date_time_ (start_of_minimum_average, min_start_string);
			     call date_time_ (minimum_time, min_end_string);
			     call ioa_ ("Busiest sample interval:^/^a to ^a: ^.1f% idle",
				substr (min_start_string, 1, 16), substr (min_end_string, 11, 6), minimum_average)
				;
			end;

			if min_idle_time >= opening_time & min_idle_time <= closing_time
			then do;
			     call date_time_ (min_idle_time, min_idle_string);
			     call ioa_ ("Busiest single sample: ^a: ^.1f% idle", substr (min_idle_string, 1, 16),
				100 * float (min_idle) / float (fnp_idle_data.maximum_idle_count));
			end;
		     end;

		     if ^ok
		     then do;
NO_DATA:
			if fnpx ^= 0
			then call com_err_$suppress_name (0, COMMAND_NAME, "no data available for FNP ^a", fnp_name)
				;
			if seg_array_ptr ^= null ()
			then call free_segs;
			fnps (i) = "0"b;
		     end;

		     if star_names_ptr ^= null ()
		     then do;
			free star_names;
			star_names_ptr = null ();
		     end;

		     if star_entry_ptr ^= null ()
		     then do;
			free star_entries;
			star_entry_ptr = null ();
		     end;

		     if names_array_ptr ^= null ()
		     then do;
			free names_array;
			names_array_ptr = null ();
		     end;
		end;
	     end;
	end;

	if hist
	then do;
	     if minutes = 0
	     then minutes = 15;			/* default */
	     hist_interval = 60000000 * minutes;	/* convert to microseconds */

	     if earliest_of_all < from_time
	     then earliest_of_all = from_time;
	     if to_time ^= 0
	     then if latest_of_all > to_time
		then latest_of_all = to_time;

	     total_intervals = divide (latest_of_all - earliest_of_all, hist_interval, 17, 0);
	     no_of_fnps = 0;
	     do i = 1 to 8;
		if fnps (i)
		then no_of_fnps = no_of_fnps + 1;
	     end;
	     if no_of_fnps = 0
	     then go to ALL_DONE;

	     allocate idle_values in (the_area) set (idle_value_ptr);
	     idle_values (*, *) = -1;			/* initialize to value indicating no data */
	     fnpx = 0;
	     minimum_idle = 100;

	     do fnp_id = 1 to 8;
		if fnps (fnp_id)
		then do;
		     fnpx = fnpx + 1;
		     fnp_names (fnpx) = substr ("ABCDEFGH", fnp_id, 1);
		     infop = addr (fnp_info_array (fnp_id));
		     seg_array_ptr = fnp_histogram_info.seg_array_ptr;
		     next_time = earliest_of_all;
		     valuex = 1;
		     residual = "0"b;

		     do segx = fnp_histogram_info.first_seg_of_interest
			to fnp_histogram_info.last_seg_of_interest while (next_time < latest_of_all);
			fnp_idle_data_ptr = seg_array.segptr (segx);
			if fnp_idle_data_ptr = null ()
			then go to SCAN_NEXT_SEG;

			if fnp_idle_data.last_time < next_time
			then go to SCAN_NEXT_SEG;

			entries_per_interval = divide (hist_interval, fnp_idle_data.sample_interval, 17, 0);
			if entries_per_interval = 0	/* data is too sparse */
			then go to SCAN_NEXT_SEG;

			last_time_in_seg = fnp_idle_data.last_time;
			last_entry_in_seg = fnp_idle_data.entries_used;
			max_idle = fnp_idle_data.maximum_idle_count;
			if residual
			then do;
			     if fnp_idle_data.sample_interval = last_interval
				& fnp_idle_data.time_started - latest_time <= last_interval + 30000000
						/* 30-second fudge factor */
				& fnp_idle_data.time_started > latest_time
			     then call store_value (last_origin,
				     addr (fnp_idle_data.entries (entries_per_interval - remaining_entries + 1)));
			     else call store_value (last_origin, end_of_last);
			     next_time = next_time + hist_interval;
			     residual = "0"b;
			end;

			if fnp_idle_data.time_started > next_time
			then do;			/* we have to skip some */
			     valuex =
				valuex + divide (fnp_idle_data.time_started - next_time, hist_interval, 17, 0);
			     next_time = fnp_idle_data.time_started;
			     first_entry = 1;
			end;

			else first_entry =
				divide (next_time - fnp_idle_data.time_started, fnp_idle_data.sample_interval, 17,
				0) + 1;
			last_interval_start = last_entry_in_seg - entries_per_interval + 1;
			time_to_stop = min (last_time_in_seg, latest_of_all);

			do entryx = first_entry to last_interval_start by entries_per_interval
			     while (next_time < time_to_stop);
			     next_entryx = entryx + entries_per_interval;
			     if next_entryx <= last_entry_in_seg
			     then call store_value (addr (fnp_idle_data.entries (entryx)),
				addr (fnp_idle_data.entries (next_entryx)));
			     next_time = next_time + hist_interval;
			end;

			if entryx < last_entry_in_seg & next_time < latest_of_all
			then do;
			     residual = "1"b;
			     latest_time = last_time_in_seg;
			     last_origin = addr (fnp_idle_data.entries (entryx));
			     end_of_last = addr (fnp_idle_data.entries (last_entry_in_seg));
			     last_interval = fnp_idle_data.sample_interval;
			     remaining_entries = last_entry_in_seg - entryx + 1;
			end;
SCAN_NEXT_SEG:
		     end;
		end;
	     end;

/* now format it */

	     if line_length = 0
	     then do;
		line_length = get_line_length_$switch (null (), code);
		if code ^= 0
		then line_length = 80;
	     end;

	     scale_marks = max (10 - divide (minimum_idle, 10, 17, 0), 5);
	     top_of_scale = 10 * scale_marks;
	     hist_width = min (100, line_length - 17);
	     hist_width = hist_width - mod (hist_width, scale_marks);
	     cols_per_pct = float (hist_width) / float (top_of_scale);

	     space = divide (hist_width, scale_marks, 17, 0);
	     call ioa_$rsnnl ("^^9x%busy^^2x0^^^d(^^^dd^^)", ioa_str, ioa_strl, scale_marks, space);
	     call ioa_ (substr (ioa_str, 1, ioa_strl), PERCENTS);
	     call ioa_$rsnnl ("^^16x|^^^d(^^^dx|^^)", ioa_str, ioa_strl, scale_marks, space - 1);
	     call ioa_ (substr (ioa_str, 1, ioa_strl));

	     any = "0"b;
	     prev_date = " ";
	     cur_time = earliest_of_all;
	     suppressed (*) = 0;

	     do line = 1 to total_intervals;
		cells = 0;
		do fnp_no = 1 to no_of_fnps;
		     if idle_values (line, fnp_no) ^= -1
		     then do;
			cells = cells + 1;
			output.column (cells) = 17 + fixed (cols_per_pct * (100 - idle_values (line, fnp_no)));
			output.name (cells) = fnp_names (fnp_no);
		     end;
		end;

		if cells = 0
		then if any
		     then if last_had_data
			then do;
			     call ioa_ ("^16(-^)");
			     last_had_data = "0"b;
			end;
			else ;
		     else ;

		else do;
		     any = "1"b;
		     last_had_data = "1"b;
		     output_line = " ";
		     call date_time_ (cur_time, dt_string);
		     if substr (dt_string, 1, 8) ^= prev_date
		     then prev_date, substr (output_line, 1, 8) = substr (dt_string, 1, 8);
		     substr (output_line, 10, 5) = substr (dt_string, 11, 5);

		     do i = 1 to cells;
			cur_column = output (i).column;
			if substr (output_line, cur_column, 1) = " "
			then substr (output_line, cur_column, 1) = output (i).name;
			else do;
			     already = index ("ABCDEFGH", substr (output_line, cur_column, 1));
			     new = index ("ABCDEFGH", output (i).name);
			     if suppressed (already) >= suppressed (new)
			     then suppressed (new) = suppressed (new) + 1;
			     else do;
				substr (output_line, cur_column, 1) = output (i).name;
				suppressed (already) = suppressed (already) + 1;
			     end;
			end;
		     end;

		     call ioa_ (output_line);
		end;

		cur_time = cur_time + hist_interval;
	     end;
	end;

ALL_DONE:
	call clean_up_everything;
EXIT:
	return;

get_numeric_arg:
     procedure (name) returns (fixed bin);

dcl  name char (*);
dcl  result fixed bin;

	iarg = iarg + 1;
	call cu_$arg_ptr (iarg, argp, argl, code);
	if code ^= 0
	then do;
NO_NUMERIC_ARG:
	     call com_err_ (code, COMMAND_NAME, "No value specified for ^a.", name);
	     go to EXIT;
	end;

	else if substr (arg, 1, 1) = "-"
	then do;
	     code = error_table_$noarg;
	     go to NO_NUMERIC_ARG;
	end;

	result = cv_dec_check_ (arg, code);
	if code ^= 0
	then do;
	     call com_err_ (0, COMMAND_NAME, "^a is not a valid value for ^a.", arg, name);
	     go to EXIT;
	end;

	return (result);
     end get_numeric_arg;

get_time:
     procedure (arg_name) returns (fixed bin (71));

dcl  arg_name char (*);
dcl  time fixed bin (71);
dcl  convert_date_to_binary_ entry (char (*), fixed bin (71), fixed bin (35));

	iarg = iarg + 1;
	call cu_$arg_ptr (iarg, argp, argl, code);
	if code ^= 0
	then do;
	     call com_err_ (code, COMMAND_NAME, "No value supplied for ^a", arg_name);
	     go to EXIT;
	end;

	call convert_date_to_binary_ (arg, time, code);
	if code ^= 0
	then do;
	     call com_err_ (code, COMMAND_NAME, """^a"" is not a valid time.", arg);
	     go to EXIT;
	end;

	else return (time);

     end get_time;

store_value:
     procedure (first_entryp, last_entryp);

dcl  first_entryp pointer;
dcl  last_entryp pointer;

dcl  delta_sample fixed bin (35);
dcl  max_possible fixed bin (35);
dcl  value fixed bin;

	delta_sample = last_entryp -> fnp_idle_entry.sample_count - first_entryp -> fnp_idle_entry.sample_count;
	max_possible = delta_sample * max_idle;
	value =
	     divide (100 * (last_entryp -> fnp_idle_entry.idle_count - first_entryp -> fnp_idle_entry.idle_count),
	     max_possible, 17, 0);
	idle_values (valuex, fnpx) = value;
	if value < minimum_idle
	then minimum_idle = value;
	valuex = valuex + 1;
	return;

     end store_value;

clean_up_everything:
     procedure;

dcl  infox fixed bin;

	do infox = 1 to 8;
	     if fnps (infox)
	     then do;
		infop = addr (fnp_info_array (infox));
		seg_array_ptr = fnp_histogram_info.seg_array_ptr;
		if seg_array_ptr ^= null ()
		then call free_segs;
	     end;
	end;

	if idle_value_ptr ^= null ()
	then free idle_values;

	if star_names_ptr ^= null ()
	then free star_names;

	if star_entry_ptr ^= null ()
	then free star_entries;

	if names_array_ptr ^= null ()
	then free names_array;

	idle_value_ptr, star_entry_ptr, star_names_ptr, names_array_ptr = null ();
	call release_area_ (areap);
	return;

     end clean_up_everything;

free_segs:
     procedure;

	do segx = 1 to seg_array.no_of_segs;
	     if seg_array.segptr (segx) ^= null ()
	     then call hcs_$terminate_noname (seg_array.segptr (segx), (0));
	end;
	free seg_array_ptr -> seg_array;
	seg_array_ptr, fnp_histogram_info.seg_array_ptr = null ();
	return;

     end free_segs;

%include fnp_idle_data;
%page;
%include star_structures;
%page;
%include area_info;

     end display_fnp_idle;
