/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-10-04,Parisek), approve(89-10-04,MCR8110),
     audit(89-10-09,Farley), install(89-10-25,MR12.3-1100):
     Added display of the "packet_trace_sw" flag for x25 devices.
                                                   END HISTORY COMMENTS */


/* format: style4,delnl,insnl,ifthenstmt,indnoniterend */

/* modified by Robert Coren, July 1983, for long packet threshold */
/* Modified by R.J.C. Kissel, October 1984, for breakall_idle_timer. */

x25_dump_:
     procedure (Ttybp, Areap, Dp, Sc, Brief);

dcl  (Ttybp, Areap, Dp) ptr parameter;
dcl  Sc fixed bin parameter;
dcl  Brief bit (1) aligned parameter;

dcl  ioa_ entry () options (variable);
dcl  ioa_$nnl entry () options (variable);
dcl  tty_dump$print_chain entry (ptr, char (*), fixed bin, bit (1));

dcl  x25_state_names (5) char (32) static options (constant)
	init ("p1(READY)", "p2(DTE WAITING)", "p41(FLOW CONTROL READY)", "p6(DTE CLEAR REQUEST)",
	"p42(DTE RESET REQUEST)");

dcl  i fixed bin;

dcl  (addr, binary, hbound, mod, null, ptr, rel, unspec) builtin;
%page;
	x25_data_ptr = Dp;
	x25_data.lc_ptr = ptr (Ttybp, rel (x25_data.lc_ptr));

	if Sc > 0 then do;
	     xscep = addr (x25_data.sc (Sc));
	     call ioa_ (
		"X.25 SC ^d ^a devx ^o^[(^a)^;^s^]: ^[HUNGUP^;LISTENING^;DIALING^;DIALED^]^[ output_ready^]^[ eop^]^[ wru^]^[ need_ftd^]^[ long_packet^]^[ rawi^]^[ echoplex^]^[ breakall^]^[ iflow^]^[ oflow^]^[ hndlquit^]^[ polite^]^[ lfecho^]^[ 8bit^]^9(^s^)"
		, Sc, xsce.name, xsce.devx, (xsce.service ^= ""), xsce.service, xsce.state + 1,
		xsce.flags.output_ready, xsce.flags.end_of_page, xsce.flags.wru_done, xsce.flags.need_ftd,
		xsce.flags.long_packet_pending, xsce.mode);
	     if xsce.lcx > 0 then do;
		xlcep = addr (x25_lces.lc (xsce.lcx));
		call ioa_ (" LC ^d: state=^a,max_packet_size=^d,window used=^d/^d", xsce.lcx,
		     x25_state_names (xlce.state), xlce.max_packet_size,
		     mod (xlce.next_send_seq - xlce.next_ack_seq, x25_data.seq_mod), xlce.max_window_size);
		call ioa_ (
		     "^-^[iti ^]^[int_issued ^]^[rnr_sent ^]^[rnr_received ^]^[iti_break ^]^[baud=^d ^;^s^]^[originate ^]"
		     , xlce.iti_call, xlce.int_issued, xlce.flags.rnr_sent, xlce.rnr_received, xlce.iti_break,
		     (xlce.baud_rate ^= 0), xlce.baud_rate, xlce.flags.originate);
		call ioa_ ("^-^[ address=^a^;^s^]^[ call data=^a^;^s^]", (xlce.his_address ^= ""), xlce.his_address,
		     (xlce.call_data ^= ""), xlce.call_data);
		if unspec (xlce.iti_params) ^= ""b then do;
		     call ioa_$nnl ("^-PAR");
		     do i = 1 to hbound (xlce.iti_params, 1);
			if xlce.iti_params (i) > 0 then call ioa_$nnl ("  ^d:^d", i, xlce.iti_params (i));
		     end;
		     call ioa_ ("");
		     end;
		if xsce.write_head ^= null () then do;
		     call ioa_$nnl ("write chain:");
		     call tty_dump$print_chain (Ttybp, "", binary (rel (xsce.write_head), 18), (Brief));
		     end;
		end;
	     end;
	else do;
	     call ioa_ (
		"X.25 devx ^o, ^d lc, ^d sc, ^[HUNGUP^;LISTENING^;RESTARTING^;ACTIVE^] flags: ^[started^]^[ send_output^]^[ bypass_restart^]^[ no_d^]^[ packet_tracing^]"
		, x25_data.devx, x25_data.n_lc, x25_data.n_sc, 1 + x25_data.state, x25_data.flags.mpx_started,
		x25_data.flags.send_output, x25_data.flags.bypass_restart, x25_data.flags.no_d, x25_data.flags.packet_trace_sw);
	     call ioa_ ("  packet_threshold=^d  breakall_idle_timer=^d^[  address=^a^;^s^]^[  network=^a^;^s^]",
		x25_data.long_packet_size, x25_data.breakall_idle_timer, (x25_data.my_address ^= ""),
		x25_data.my_address, (x25_data.net_type ^= ""), x25_data.net_type);
	     if x25_data.write_head ^= null () then do;
		call ioa_ ("  write chain:");
		call tty_dump$print_chain (Ttybp, "", binary (rel (x25_data.write_head), 18), (Brief));
		end;
	     end;

	return;
%page;
%include x25_data;

     end x25_dump_;
