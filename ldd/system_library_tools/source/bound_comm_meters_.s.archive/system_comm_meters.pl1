/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* format: style4,delnl,insnl,^ifthendo */
system_comm_meters:
tty_meters:
     procedure;

/* This is a command to output statistics describing the performance and general
   behavior of the ring-0 communications software.

   Usage: system_comm_meters {-reset | -report_reset}
*/

/* Written March 1981 by Robert Coren */
/* Modified December 1984 by Robert Coren to remove tty_area from metering region (it wasn't used) */

/* AUTOMATIC */

dcl  code fixed bin (35);
dcl  reset bit (1);
dcl  report bit (1);
dcl  char_time char (10);				/* metering time formatted by metering_util_ */
dcl  meter_time fixed bin (71);
dcl  cur_ptrs (2) ptr;
dcl  prev_ptrs (2) ptr;
dcl  total_timep ptr;
dcl  old_ttybp ptr;					/* pointer to older copy of tty_buf */
dcl  old_total_timep ptr;

dcl  in_interrupts fixed bin (35);
dcl  out_interrupts fixed bin (35);
dcl  control_interrupts fixed bin (35);
dcl  in_interrupt_time fixed bin (71);
dcl  out_interrupt_time fixed bin (71);
dcl  control_interrupt_time fixed bin (71);
dcl  read_calls fixed bin (35);
dcl  write_calls fixed bin (35);
dcl  read_time fixed bin (71);
dcl  write_time fixed bin (71);
dcl  in_bytes fixed bin (35);				/* characters in through channel_manager */
dcl  in_messages fixed bin (35);			/* input interrupts through channel manager */
dcl  out_bytes fixed bin (35);
dcl  out_messages fixed bin (35);

dcl  mpx_channels fixed bin;
dcl  devx fixed bin;
dcl  cpu_time fixed bin (71);

dcl  in_before_conv fixed bin (35);
dcl  out_before_conv fixed bin (35);
dcl  in_after_conv fixed bin (35);
dcl  out_after_conv fixed bin (35);
dcl  preconverted fixed bin (35);
dcl  net_read_calls fixed bin (35);
dcl  net_write_calls fixed bin (35);
dcl  net_read_time fixed bin (71);
dcl  net_write_time fixed bin (71);
dcl  net_input_ints fixed bin (35);
dcl  net_output_ints fixed bin (35);
dcl  net_control_ints fixed bin (35);
dcl  net_in_int_time fixed bin (71);
dcl  net_out_int_time fixed bin (71);
dcl  net_control_int_time fixed bin (71);

dcl  pool_size fixed bin (35);
dcl  avg_input_space fixed bin;
dcl  avg_output_space fixed bin;
dcl  avg_control_space fixed bin;
dcl  alloc_calls fixed bin (35);
dcl  free_calls fixed bin (35);
dcl  alloc_time fixed bin (71);
dcl  free_time fixed bin (71);

dcl  ttyb_loop_locks fixed bin (35);
dcl  ttyb_loop_lock_time fixed bin (71);
dcl  alloc_failures fixed bin (35);

dcl  tty_lock_calls fixed bin (35);
dcl  tty_lock_waits fixed bin (35);
dcl  queued_ints fixed bin (35);
dcl  found_lock_locked fixed bin (35);
dcl  echoed_by_r0 fixed bin (35);
dcl  echoed_by_fnp fixed bin (35);

dcl  in_restarts fixed bin (35);
dcl  out_restarts fixed bin (35);
dcl  out_overflows fixed bin (35);

dcl  nargs fixed bin;
dcl  argp ptr;
dcl  argl fixed bin (21);
dcl  arg char (argl) based (argp);


/* BASED */

dcl  time fixed bin (71) based;			/* CPU time from tc_data */


/* INTERNAL STATIC */

dcl  first_time bit (1) int static init ("1"b);		/* indicates first call in this process */
dcl  tty_buf_len fixed bin (19) int static;
dcl  tty_area_len fixed bin (19) int static;
dcl  mu_index fixed bin int static;			/* unique index used by metering_util_ */

/* The following are copies of previous values of the above, set at "reset" time,
   and used for calculating increments over the metering interval */

dcl  old_in_interrupts fixed bin (35) int static init (0);
dcl  old_out_interrupts fixed bin (35) int static init (0);
dcl  old_control_interrupts fixed bin (35) int static init (0);
dcl  old_in_interrupt_time fixed bin (71) int static init (0);
dcl  old_out_interrupt_time fixed bin (71) int static init (0);
dcl  old_control_interrupt_time fixed bin (71) int static init (0);
dcl  old_read_calls fixed bin (35) int static init (0);
dcl  old_write_calls fixed bin (35) int static init (0);
dcl  old_read_time fixed bin (71) int static init (0);
dcl  old_write_time fixed bin (71) int static init (0);
dcl  old_in_bytes fixed bin (35) int static init (0);
dcl  old_in_messages fixed bin (35) int static init (0);
dcl  old_out_bytes fixed bin (35) int static init (0);
dcl  old_out_messages fixed bin (35) int static init (0);

dcl  CMD_NAME char (18) int static options (constant) init ("system_comm_meters");


/* ENTRIES */

dcl  ring_zero_peek_$get_max_length entry (char (*), fixed bin (19), fixed bin (35));
dcl  meter_format_$picture entry (fixed bin (35), fixed bin) returns (char (15) varying);
dcl  meter_format_$quotient entry (fixed bin (71), fixed bin (71), char (*)) returns (char (12) varying);
dcl  metering_util_$define_regions entry options (variable);
dcl  metering_util_$fill_buffers entry (fixed bin, fixed bin (71), char (*), (*) ptr, (*) ptr, fixed bin (35));
dcl  metering_util_$reset entry (fixed bin, fixed bin (35));
dcl  com_err_ entry () options (variable);
dcl  ioa_ entry () options (variable);
dcl  ioa_$rsnnl entry () options (variable);
dcl  cu_$arg_count entry (fixed bin, fixed bin (35));
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin (21), fixed bin (35));


/* EXTERNAL STATIC */


dcl  (
     error_table_$wrong_no_of_args,
     error_table_$badopt
     ) fixed bin (35) external static;


/* BUILTINS */

dcl  (addrel, rel, addr, divide, bin, currentsize, float, ltrim, copy, length) builtin;

	call cu_$arg_count (nargs, code);
	if code ^= 0
	then do;
	     call com_err_ (code, CMD_NAME, "From cu_$arg_count");
	     return;
	end;

	if nargs = 0
	then do;
	     reset = "0"b;
	     report = "1"b;
	end;

	else do;
	     if nargs ^= 1				/* only 1 is allowed */
	     then do;
		call com_err_ (error_table_$wrong_no_of_args, CMD_NAME,
		     "^/Usage: system_comm_meters {-reset | -report_reset}");
		return;
	     end;

	     call cu_$arg_ptr (1, argp, argl, code);
	     if arg = "-reset" | arg = "-rs"
	     then do;
		reset = "1"b;
		report = "0"b;
	     end;

	     else if arg = "-report_reset" | arg = "-rr"
	     then do;
		reset = "1"b;
		report = "1"b;
	     end;

	     else do;
		call com_err_ (error_table_$badopt, CMD_NAME, arg);
		return;
	     end;
	end;

	if first_time				/* have we initialized already? */
	then do;					/* if not, do it now */
	     call ring_zero_peek_$get_max_length ("tty_buf", tty_buf_len, code);

	     if code = 0
	     then call ring_zero_peek_$get_max_length ("tty_area", tty_area_len, code);

	     if code ^= 0
	     then do;
		call com_err_ (code, CMD_NAME, "From ring_zero_peek_$get_max_length");
		return;
	     end;

	     call metering_util_$define_regions (mu_index, code, "tty_buf", 0, tty_buf_len,
		"tc_data", "processor_time", 2);
	     if code ^= 0
	     then do;
		call com_err_ (code, CMD_NAME, "From metering_util_$define_regions");
		return;
	     end;

	     first_time = "0"b;			/* we're initialized now */
	end;

/* We have to calculate certain things in any case, to report them and/or to
   update the "old" values in case of reset */

	call metering_util_$fill_buffers (mu_index, meter_time, char_time, cur_ptrs, prev_ptrs, code);

	if code ^= 0
	then do;
	     call com_err_ (code, CMD_NAME, "From metering_util_$fill_buffers");
	     return;
	end;

	call ioa_ ("^/Total metering time ^a", char_time);

	ttybp = cur_ptrs (1);
	total_timep = cur_ptrs (2);

	old_ttybp = prev_ptrs (1);
	old_total_timep = prev_ptrs (2);

	in_interrupts, out_interrupts, control_interrupts, in_interrupt_time, out_interrupt_time,
	     control_interrupt_time, read_calls, write_calls, read_time, write_time, in_bytes, in_messages, out_bytes,
	     out_messages = 0;

/* thumb through LCT to sum statistics over all channels */

	lctp = addrel (ttybp, rel (tty_buf.lct_ptr));
	mpx_channels = 0;

	do devx = 1 to lct.max_no_lctes;
	     lctep = addr (lct.lcte_array (devx));
	     if lcte.entry_in_use
	     then do;
		in_interrupts = in_interrupts + lcte.in.interrupts;
		out_interrupts = out_interrupts + lcte.out.interrupts;
		control_interrupts = control_interrupts + lcte.control.interrupts;

		if lcte.major_channel_devx ^= 0	/* if there's a parent */
		then if addr (lct.lcte_array (lcte.major_channel_devx)) -> lcte.major_channel_devx = 0
						/* who is a top-level multiplexer */
		     then do;			/* only count interrupt time for these to avoid duplication */
			in_interrupt_time = in_interrupt_time + lcte.in.interrupt_time;
			out_interrupt_time = out_interrupt_time + lcte.out.interrupt_time;
			control_interrupt_time = control_interrupt_time + lcte.control.interrupt_time;
		     end;

		if lcte.channel_type = TTY_MPX	/* get some additional stuff for non-multiplexed channels */
		then do;
		     in_bytes = in_bytes + lcte.in_bytes;
		     in_messages = in_messages + lcte.in.interrupts;
		     out_bytes = out_bytes + lcte.out_bytes;
		     out_messages = out_messages + lcte.out.calls;
		end;

		else mpx_channels = mpx_channels + 1;	/* this is a multiplexed channel, count it */
	     end;
	end;

	read_calls = tty_buf.read_calls;
	write_calls = tty_buf.write_calls;
	read_time = tty_buf.read_time;
	write_time = tty_buf.write_time;

	if report					/* If user wanted to know anything */
	then do;
	     cpu_time = total_timep -> time - old_total_timep -> time;

	     call ioa_ ("^/THROUGHPUT^/^30tbefore conversion^50tafter conversion^68tratio");
	     in_before_conv = tty_buf.nrawread - old_ttybp -> tty_buf.nrawread;
	     in_after_conv = tty_buf.ninchars - old_ttybp -> tty_buf.ninchars;

	     call ioa_ ("Total characters input^30t^a^50t^a^68t^a", meter_format_$picture (in_before_conv, 13),
		meter_format_$picture (in_after_conv, 13),
		meter_format_$quotient ((in_after_conv), (in_before_conv), "^5.2f"));

	     out_before_conv = tty_buf.noutchars - old_ttybp -> tty_buf.noutchars;
	     out_after_conv = tty_buf.nrawwrite - old_ttybp -> tty_buf.nrawwrite;

	     call ioa_ ("Total characters output^30t^a^50t^a^68t^a", meter_format_$picture (out_before_conv, 13),
		meter_format_$picture (out_after_conv, 13),
		meter_format_$quotient ((out_after_conv), (out_before_conv), "^5.2f"));

	     call ioa_ ("Average length of input^34t^a characters",
		meter_format_$quotient (in_bytes - old_in_bytes, in_messages - old_in_messages, "^5.1f"));

	     call ioa_ ("Average length of output^34t^a characters",
		meter_format_$quotient (out_bytes - old_out_bytes, out_messages - old_out_messages, "^5.1f"));

	     preconverted = tty_buf.preconverted - old_ttybp -> tty_buf.preconverted;
	     call ioa_ ("Input characters preconverted^30t^a (^a% of total)", meter_format_$picture (preconverted, 13),
		meter_format_$quotient (100 * preconverted, (in_before_conv), "^.1f"));

	     net_read_calls = read_calls - old_read_calls;
	     net_write_calls = write_calls - old_write_calls;
	     net_read_time = divide (read_time - old_read_time, 1000, 35, 0);
	     net_write_time = divide (write_time - old_write_time, 1000, 35, 0);

	     call ioa_ ("^/^30tread^50twrite");
	     call ioa_ ("Number of calls^27t^a^47t^a", meter_format_$picture (net_read_calls, 11),
		meter_format_$picture (net_write_calls, 11));
	     call ioa_ ("Average time per call^27t^a msec.^50t^a msec.",
		meter_format_$quotient (net_read_time, (net_read_calls), "^5.2f"),
		meter_format_$quotient (net_write_time, (net_write_calls), "^5.2f"));

	     call ioa_ ("Average chars. processed^29t^a^49t^a",
		meter_format_$quotient ((in_before_conv), (net_read_calls), "^5.1f"),
		meter_format_$quotient ((out_before_conv), (net_write_calls), "^5.1f"));
	     call ioa_ ("Average chars. per msec.^29t^a^49t^a",
		meter_format_$quotient ((in_before_conv), net_read_time, "^5.1f"),
		meter_format_$quotient ((out_before_conv), net_write_time, "^5.1f"));

	     call ioa_ ("^2/CHANNEL INTERRUPTS^/^27tinput^42toutput^57tother^72ttotal");

	     net_input_ints = in_interrupts - old_in_interrupts;
	     net_output_ints = out_interrupts - old_out_interrupts;
	     net_control_ints = control_interrupts - old_control_interrupts;
	     net_in_int_time = divide (in_interrupt_time - old_in_interrupt_time, 1000, 35, 0);
	     net_out_int_time = divide (out_interrupt_time - old_out_interrupt_time, 1000, 35, 0);
	     net_control_int_time = divide (control_interrupt_time - old_control_interrupt_time, 1000, 35, 0);

	     call ioa_ ("software ""interrupts""^25t^a^40t^a^55t^a^69t^a", meter_format_$picture (net_input_ints, 8),
		meter_format_$picture (net_output_ints, 8), meter_format_$picture (net_control_ints, 8),
		meter_format_$picture (net_input_ints + net_output_ints + net_control_ints, 9));

	     call ioa_ ("average time (msec.)^25t^a^40t^a^55t^a^70t^a",
		meter_format_$quotient (net_in_int_time, (net_input_ints), "^6.2f"),
		meter_format_$quotient (net_out_int_time, (net_output_ints), "^6.2f"),
		meter_format_$quotient (net_control_int_time, (net_control_ints), "^6.2f"),
		meter_format_$quotient (net_in_int_time + net_out_int_time + net_control_int_time,
		net_input_ints + net_output_ints + net_control_ints, "^6.2f"));

	     call ioa_ ("^2/TTY_BUF SPACE MANAGEMENT^/");

	     pool_size = tty_buf_len - (bin (rel (addr (tty_buf.free_space))) - bin (rel (ttybp))) - currentsize (lct);

	     call ioa_ ("Total size of buffer pool ^30t^a words", meter_format_$picture (pool_size, 7));
	     call ioa_ ("Number of channels configured^30t^7d^/Number of multiplexed channels^30t^7d", lct.max_no_lctes,
		mpx_channels);

	     if tty_buf.input_space_updates = old_ttybp -> tty_buf.input_space_updates
	     then avg_input_space = divide (tty_buf.cumulative_input_space, tty_buf.input_space_updates, 35, 0);
	     else avg_input_space =
		     divide (tty_buf.cumulative_input_space - old_ttybp -> tty_buf.cumulative_input_space,
		     tty_buf.input_space_updates - old_ttybp -> tty_buf.input_space_updates, 35, 0);

	     if tty_buf.output_space_updates = old_ttybp -> tty_buf.output_space_updates
	     then avg_output_space = divide (tty_buf.cumulative_output_space, tty_buf.output_space_updates, 35, 0);
	     else avg_output_space =
		     divide (tty_buf.cumulative_output_space - old_ttybp -> tty_buf.cumulative_output_space,
		     tty_buf.output_space_updates - old_ttybp -> tty_buf.output_space_updates, 35, 0);

	     if tty_buf.control_space_updates = old_ttybp -> tty_buf.control_space_updates
	     then avg_control_space = divide (tty_buf.cumulative_control_space, tty_buf.control_space_updates, 35, 0);
	     else avg_control_space =
		     divide (tty_buf.cumulative_control_space - old_ttybp -> tty_buf.cumulative_control_space,
		     tty_buf.control_space_updates - old_ttybp -> tty_buf.control_space_updates, 35, 0);

	     call ioa_ ("^/% of buffer pool in use^30tcurrent^42taverage");

	     call ioa_ ("^4tinput^32t^4.1f^44t^4.1f", 1e2 * float (tty_buf.current_input_space) / float (pool_size),
		1e2 * float (avg_input_space) / float (pool_size));
	     call ioa_ ("^4toutput^32t^4.1f^44t^4.1f", 1e2 * float (tty_buf.current_output_space) / float (pool_size),
		1e2 * float (avg_output_space) / float (pool_size));
	     call ioa_ ("^4tcontrol structures^32t^4.1f^44t^4.1f",
		1e2 * float (tty_buf.current_control_space) / float (pool_size),
		1e2 * float (avg_control_space) / float (pool_size));

	     call ioa_ ("^4t^44(-^)");
	     call ioa_ ("^4ttotal^32t^4.1f^44t^4.1f",
		1e2
		* float (tty_buf.current_input_space + tty_buf.current_output_space + tty_buf.current_control_space)
		/ float (pool_size),
		1e2 * float (avg_input_space + avg_output_space + avg_control_space) / float (pool_size));

	     call ioa_ ("^/Smallest amount of free space ever^32t^a words (^d% of buffer pool)",
		meter_format_$picture ((tty_buf.minimum_free_space), 6),
		divide (100 * tty_buf.minimum_free_space, pool_size, 17, 0));

	     alloc_calls = tty_buf.alloc_calls - old_ttybp -> tty_buf.alloc_calls;
	     free_calls = tty_buf.free_calls - old_ttybp -> tty_buf.free_calls;
	     alloc_time = tty_buf.alloc_time - old_ttybp -> tty_buf.alloc_time;
	     free_time = tty_buf.free_time - old_ttybp -> tty_buf.free_time;
	     alloc_failures = tty_buf.alloc_failures - old_ttybp -> tty_buf.alloc_failures;
	     ttyb_loop_locks = tty_buf.space_lock_wait_count - old_ttybp -> tty_buf.space_lock_wait_count;
	     ttyb_loop_lock_time = tty_buf.space_lock_wait_time - old_ttybp -> tty_buf.space_lock_wait_time;

	     call ioa_ ("^/^27tallocate^44tfree^61ttotal");
	     call ioa_ ("Number of calls^26t^a^43t^a^60t^a", meter_format_$picture (alloc_calls, 11),
		meter_format_$picture (free_calls, 11), meter_format_$picture (alloc_calls + free_calls, 11));

	     call ioa_ ("Average time per call (msec.)^31t^a^48t^a^65t^a",
		meter_format_$quotient ((alloc_time), 1000 * alloc_calls, "^4.1f"),
		meter_format_$quotient ((free_time), 1000 * free_calls, "^4.1f"),
		meter_format_$quotient (alloc_time + free_time, 1000 * (alloc_calls + free_calls), "^4.1f"));

	     call ioa_ ("% of total CPU^31t^4.1f^48t^4.1f^65t^4.1f", 1e2 * float (alloc_time) / float (cpu_time),
		1e2 * float (free_time) / float (cpu_time), 1e2 * float (alloc_time + free_time) / float (cpu_time));

	     call ioa_ ("Calls requiring loop on tty_buf lock^41t^a^52t(^a% of total)",
		meter_format_$picture (ttyb_loop_locks, 10),
		meter_format_$quotient (100 * ttyb_loop_locks, alloc_calls + free_calls, "^.2f"));

	     call ioa_ ("average time spent looping on lock^41t^a msec.^52t(^.2f% of total CPU)",
		meter_format_$quotient (divide (ttyb_loop_lock_time, 1000, 35, 0), (ttyb_loop_locks), "^.2f"),
		1e2 * float (ttyb_loop_lock_time) / float (cpu_time));

	     call ioa_ ("Number of allocation failures^41t^a^52t(^a% of attempts)",
		meter_format_$picture (alloc_failures, 10),
		meter_format_$quotient (100 * alloc_failures, (alloc_calls), "^.2f"));

	     tty_lock_calls = tty_buf.tty_lock_calls - old_ttybp -> tty_buf.tty_lock_calls;
	     tty_lock_waits = tty_buf.found_channel_locked - old_ttybp -> tty_buf.found_channel_locked;
	     queued_ints = tty_buf.n_queued_interrupts - old_ttybp -> tty_buf.n_queued_interrupts;
	     found_lock_locked = tty_lock_waits + queued_ints;

	     call ioa_ ("^2/CHANNEL LOCK CONTENTION^2/Number of calls to tty_lock^45t^a",
		meter_format_$picture (tty_lock_calls, 11));
	     if tty_lock_calls > 0
	     then do;
		call ioa_ ("Times channel lock found locked^45t^a (^d% of attempts)",
		     meter_format_$picture (found_lock_locked, 11),
		     divide (100 * found_lock_locked, tty_lock_calls, 17, 0));
		call ioa_ ("Average time spent waiting for lock^45t^a msec.",
		     meter_format_$quotient (tty_buf.total_wait_time - old_ttybp -> tty_buf.total_wait_time,
		     1000 * tty_lock_waits, "^.2f"));
		call ioa_ ("Maximum time spent waiting for lock^45t^.2f msec.", 1e-3 * float (tty_buf.max_wait_time));
	     end;

	     if net_input_ints + net_output_ints + net_control_ints > 0
	     then call ioa_ ("Interrupts queued because channel locked^45t^a (^.1f% of interrupts)",
		     meter_format_$picture (queued_ints, 11),
		     1e2 * float (queued_ints) / float (net_input_ints + net_output_ints + net_control_ints));

	     echoed_by_r0 = tty_buf.echo_neg_r0_chars - old_ttybp -> tty_buf.echo_neg_r0_chars;
	     echoed_by_fnp = tty_buf.echo_neg_mux_chars - old_ttybp -> tty_buf.echo_neg_mux_chars;

	     call ioa_ ("^2/ECHO NEGOTIATION^2/Average time of transaction^40t^a msec.",
		meter_format_$quotient (tty_buf.echo_neg_time - old_ttybp -> tty_buf.echo_neg_time,
		1000 * (tty_buf.echo_neg_interrupts - old_ttybp -> tty_buf.echo_neg_interrupts), "^.1f"));
	     if in_before_conv > 0
	     then do;
		call ioa_ ("Chars. echoed by supervisor^37t^a (^5.2f% of input chars)",
		     meter_format_$picture (echoed_by_r0, 11), 1e2 * float (echoed_by_r0) / float (in_before_conv));
		call ioa_ ("Chars. echoed by FNPs^37t^a (^5.2f% of input chars)",
		     meter_format_$picture (echoed_by_fnp, 11), 1e2 * float (echoed_by_fnp) / float (in_before_conv));
	     end;

	     in_restarts = tty_buf.input_restart - old_ttybp -> tty_buf.input_restart;
	     out_restarts = tty_buf.output_restart - old_ttybp -> tty_buf.output_restart;
	     out_overflows = tty_buf.output_buffer_overflow - old_ttybp -> tty_buf.output_buffer_overflow;

	     call ioa_ ("^2/ABNORMAL EVENTS^2/Input restarts^30t^a (^a% of read calls)",
		meter_format_$picture (in_restarts, 10),
		meter_format_$quotient (100 * in_restarts, (net_read_calls), "^.2f"));
	     call ioa_ ("Output restarts^30t^a (^a% of write calls)", meter_format_$picture (out_restarts, 10),
		meter_format_$quotient (100 * out_restarts, (net_write_calls), "^.2f"));
	     call ioa_ ("Output space overflows^30t^a (^a% of write calls)", meter_format_$picture (out_overflows, 10),
		meter_format_$quotient (100 * out_overflows, (net_write_calls), "^.2f"));
	     call ioa_ ("""needs_space"" calls^30t^a",
		meter_format_$picture (tty_buf.space_needed_calls - old_ttybp -> tty_buf.space_needed_calls, 10));

	     call ioa_ ("");			/* put out an extra blank line at end */
	end;					/* of reporting output */

	if reset
	then do;
	     call metering_util_$reset (mu_index, code);	/* this does most of the work */

	     if code ^= 0
	     then call com_err_ (code, CMD_NAME, "From metering_util_$reset");

	     else do;				/* copy all the hard-to-calculate stuff */
		old_in_interrupts = in_interrupts;
		old_in_interrupt_time = in_interrupt_time;
		old_out_interrupts = out_interrupts;
		old_out_interrupt_time = out_interrupt_time;
		old_control_interrupts = control_interrupts;
		old_control_interrupt_time = control_interrupt_time;
		old_read_calls = read_calls;
		old_read_time = read_time;
		old_write_calls = write_calls;
		old_write_time = write_time;
		old_in_bytes = in_bytes;
		old_out_bytes = out_bytes;
		old_in_messages = in_messages;
		old_out_messages = out_messages;
	     end;
	end;					/* of resetting code */
	return;					/* done! */

%include tty_buf;
%include lct;
%include wtcb;
%include tcb;
%include multiplexer_types;

     end system_comm_meters;
