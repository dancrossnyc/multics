/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
/* format: style4,delnl,insnl,^ifthendo */
ibm3270_meters_:
     procedure;

/* This subroutine contains entries for allocating, freeing, and displaying
   meters for an IBM3270-type multiplexer. Only the _mpx entries are provided,
   since the ibm3270 multiplexer does not maintain meters on behalf of its
   subchannels.
*/

/* Written June 1981 by Robert Coren */

/* PARAMETERS */

dcl  a_area_ptr ptr;
dcl  a_meterp ptr;
dcl  a_code fixed bin (35);
dcl  a_chan_name char (*);
dcl  a_iocbp ptr;
dcl  a_chan_meterp ptr;
dcl  a_flags bit (36) aligned;
dcl  a_since_boot bit (1);
dcl  a_summary_ptr ptr;


/* AUTOMATIC */

dcl  areap ptr;
dcl  code fixed bin (35);
dcl  iocbp ptr;
dcl  flags bit (36) aligned;
dcl  brief bit (1);
dcl  error bit (1);
dcl  since_boot bit (1);
dcl  parent_fnp bit (1);
dcl  ibm3270_meterp ptr;
dcl  current_meterp ptr;
dcl  saved_meterp ptr;
dcl  current_fnp_meterp ptr;
dcl  saved_fnp_meterp ptr;

dcl  poll_failed fixed bin (35);
dcl  select_failed fixed bin (35);
dcl  bad_output fixed bin (35);
dcl  bad_input fixed bin (35);
dcl  bad_device fixed bin (35);
dcl  write_format_error fixed bin (35);
dcl  input_naks fixed bin (35);
dcl  output_naks fixed bin (35);
dcl  timeouts fixed bin (35);
dcl  wack_received fixed bin (35);
dcl  sent_too_many_naks fixed bin (35);
dcl  recd_too_many_naks fixed bin (35);
dcl  eot_no_resp fixed bin (35);

dcl  total_poll_failed fixed bin (35);
dcl  total_select_failed fixed bin (35);
dcl  total_bad_output fixed bin (35);
dcl  total_bad_input fixed bin (35);
dcl  total_bad_device fixed bin (35);
dcl  total_write_format_error fixed bin (35);
dcl  total_input_naks fixed bin (35);
dcl  total_output_naks fixed bin (35);
dcl  total_timeouts fixed bin (35);
dcl  total_wack_received fixed bin (35);
dcl  total_sent_too_many_naks fixed bin (35);
dcl  total_recd_too_many_naks fixed bin (35);
dcl  total_eot_no_resp fixed bin (35);


/* BASED */

dcl  m_area area (100) based (areap);


/* EXTERNAL STATIC */

dcl  error_table_$noalloc external static fixed bin (35);
dcl  iox_$user_output external static ptr;


/* ENTRIES */

dcl  ioa_$ioa_switch entry options (variable);
dcl  meter_format_$picture entry (fixed bin (35), fixed bin) returns (char (15) varying);


/* CONDITIONS & BUILTINS */

dcl  area condition;
dcl  (addr, null) builtin;

allocate_mpx:
     entry (a_area_ptr, a_meterp, a_code);

	areap = a_area_ptr;
	a_code = 0;

	on area
	     begin;
		a_code = error_table_$noalloc;
		go to exit;
	     end;

	allocate ibm3270_meter_struc in (m_area) set (a_meterp);
	a_meterp -> ibm3270_meter_struc.version = IBM3270_METERS_VERSION_1;
exit:
	return;


free_mpx:
     entry (a_meterp, a_code);

	free a_meterp -> ibm3270_meter_struc;
	a_code = 0;
	return;

display_mpx:
     entry (a_chan_name, a_iocbp, a_chan_meterp, a_flags, a_code);

	iocbp = a_iocbp;
	if iocbp = null ()
	then iocbp = iox_$user_output;

	chan_meterp = a_chan_meterp;
	flags = a_flags;
	a_code = 0;

	if flags & DISPLAY_MPX_SUMMARY		/* we don't handle this */
	then return;

	if flags & DISPLAY_MPX_BRIEF
	then brief = "1"b;
	else brief = "0"b;

	if flags & DISPLAY_MPX_ERROR
	then error = "1"b;
	if flags & DISPLAY_MPX_SINCE_BOOT
	then since_boot = "1"b;
	else since_boot = "0"b;

	if brief
	then return;				/* no "brief" meters from this multiplexer */

	call set_values;

	call ioa_$ioa_switch (iocbp, "^/Poll failures^32t^a", meter_format_$picture (poll_failed, 7));
	call ioa_$ioa_switch (iocbp, "Select failures^32t^a", meter_format_$picture (select_failed, 7));

	if parent_fnp
	then do;
	     call ioa_$ioa_switch (iocbp, "Invalid input messages^28t^a", meter_format_$picture (input_naks, 11));
	     call ioa_$ioa_switch (iocbp, "NAK for output messages^28t^a", meter_format_$picture (output_naks, 11));
	     call ioa_$ioa_switch (iocbp, "FNP rejected output^28t^a", meter_format_$picture (bad_output, 11));
	     call ioa_$ioa_switch (iocbp, "Response timeouts^28t^a", meter_format_$picture (timeouts, 11));
	     call ioa_$ioa_switch (iocbp, "WACKs received^28t^a", meter_format_$picture (wack_received, 11));
	     call ioa_$ioa_switch (iocbp, "Invalid input limit exceeded^32t^a",
		meter_format_$picture (sent_too_many_naks, 7));
	     call ioa_$ioa_switch (iocbp, "Received NAK limit exceeded^32t^a",
		meter_format_$picture (recd_too_many_naks, 7));
	     call ioa_$ioa_switch (iocbp, "FNP sent EOT^32t^a", meter_format_$picture (eot_no_resp, 7));
	end;

	call ioa_$ioa_switch (iocbp, "Incorrect output format^32t^a", meter_format_$picture (write_format_error, 7));
	call ioa_$ioa_switch (iocbp, "Unrecognized input^32t^a", meter_format_$picture (bad_input, 7));
	call ioa_$ioa_switch (iocbp, "Unrecognized device^32t^a", meter_format_$picture (bad_device, 7));

	return;

mpx_summary:
     entry (a_chan_meterp, a_since_boot, a_summary_ptr, a_code);

/* entry to fill in values used by channel_comm_meters -summary */

	a_code = 0;
	chan_meterp = a_chan_meterp;
	summary_ptr = a_summary_ptr;
	since_boot = a_since_boot;
	call set_values;

	channel_summary.error_count = poll_failed + select_failed + bad_input + bad_device;
	if parent_fnp
	then channel_summary.error_count = channel_summary.error_count + input_naks + output_naks + eot_no_resp;

	return;

set_values:
     procedure;

/* internal procedure to set metering values (either cumulative or since load */

	ibm3270_meterp = channel_meters.mpx_specific_meterp;
	if channel_meters.parent_type = MCS_MPX		/* if parent is an FNP */
	then do;					/* then we know something about the next level of metering */
	     fnp_chan_meterp = channel_meters.parent_meterp;
	     current_fnp_meterp = addr (fnp_chan_meter_struc.current_meters);
	     saved_fnp_meterp = addr (fnp_chan_meter_struc.saved_meters);
	     parent_fnp = "1"b;
	end;

	else parent_fnp = "0"b;

	current_meterp = addr (ibm3270_meterp -> ibm3270_meter_struc.current_meters);
	saved_meterp = addr (ibm3270_meterp -> ibm3270_meter_struc.saved_meters);

	total_poll_failed = current_meterp -> ibm3270_meters.poll_failed;
	total_bad_output = current_meterp -> ibm3270_meters.bad_output;
	total_select_failed = current_meterp -> ibm3270_meters.select_failed;
	total_write_format_error = current_meterp -> ibm3270_meters.write_format_error;
	total_bad_input = current_meterp -> ibm3270_meters.bad_input;
	total_bad_device = current_meterp -> ibm3270_meters.bad_device;

	if parent_fnp
	then do;
	     total_input_naks = current_fnp_meterp -> fnp_sync_meters.counters (1);
	     total_output_naks = current_fnp_meterp -> fnp_sync_meters.counters (2);
	     total_timeouts = current_fnp_meterp -> fnp_sync_meters.counters (3);
	     total_sent_too_many_naks = current_fnp_meterp -> fnp_sync_meters.counters (4);
	     total_wack_received = current_fnp_meterp -> fnp_sync_meters.counters (5);
	     total_recd_too_many_naks = current_fnp_meterp -> fnp_sync_meters.counters (6);
	     total_eot_no_resp = current_fnp_meterp -> fnp_sync_meters.counters (7);
	end;

	if since_boot
	then do;
	     poll_failed = total_poll_failed;
	     bad_output = total_bad_output;
	     select_failed = total_select_failed;
	     write_format_error = total_write_format_error;
	     bad_input = total_bad_input;
	     bad_device = total_bad_device;

	     if parent_fnp
	     then do;
		input_naks = total_input_naks;
		output_naks = total_output_naks;
		timeouts = total_timeouts;
		sent_too_many_naks = total_sent_too_many_naks;
		wack_received = total_wack_received;
		recd_too_many_naks = total_recd_too_many_naks;
		eot_no_resp = total_eot_no_resp;
	     end;
	end;

	else do;
	     poll_failed = total_poll_failed - saved_meterp -> ibm3270_meters.poll_failed;
	     bad_output = total_bad_output - saved_meterp -> ibm3270_meters.bad_output;
	     select_failed = total_select_failed - saved_meterp -> ibm3270_meters.select_failed;
	     write_format_error = total_write_format_error - saved_meterp -> ibm3270_meters.write_format_error;
	     bad_input = total_bad_input - saved_meterp -> ibm3270_meters.bad_input;
	     bad_device = total_bad_device - saved_meterp -> ibm3270_meters.bad_device;

	     if parent_fnp
	     then do;
		input_naks = total_input_naks - saved_fnp_meterp -> fnp_sync_meters.counters (1);
		output_naks = total_output_naks - saved_fnp_meterp -> fnp_sync_meters.counters (2);
		timeouts = total_timeouts - saved_fnp_meterp -> fnp_sync_meters.counters (3);
		sent_too_many_naks = total_sent_too_many_naks - saved_fnp_meterp -> fnp_sync_meters.counters (4);
		wack_received = total_wack_received - saved_fnp_meterp -> fnp_sync_meters.counters (5);
		recd_too_many_naks = total_recd_too_many_naks - saved_fnp_meterp -> fnp_sync_meters.counters (6);
		eot_no_resp = total_eot_no_resp - saved_fnp_meterp -> fnp_sync_meters.counters (7);
	     end;
	end;
     end set_values;

%include multiplexer_types;
%page;
%include ibm3270_meters;
%page;
%include comm_meters_disp_flags;
%page;
%include channel_meters;
%page;
%include fnp_channel_meters;
%page;
%include channel_summary;

     end ibm3270_meters_;
