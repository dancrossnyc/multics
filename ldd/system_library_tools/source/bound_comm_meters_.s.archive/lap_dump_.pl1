/****^  **************************************************************
        *                                                            *
        * Copyright, (C) Honeywell Bull Inc., 1988                   *
        *                                                            *
        * Copyright, (C) Massachusetts Institute of Technology, 1983 *
        *                                                            *
        ************************************************************** */

/* format: style4,delnl,insnl,ifthenstmt,indnoniterend */

lap_dump_:
     procedure (P_ttybp, P_areap, P_lap_data_ptr, P_subchannel, P_brief);

/* Created 1983 February by Olin Sibert to support LAP multiplexers. */

/****^  HISTORY COMMENTS:
  1) change(88-07-07,Beattie), approve(88-06-27,MCR7926),
     audit(88-07-22,Brunelle), install(88-08-08,MR12.2-1082):
     Prepared for installation.
                                                   END HISTORY COMMENTS */

	lap_data_ptr = P_lap_data_ptr;

	call ioa_ ("LAP channel ^a, devx ^d (subchannel devx ^d)", lap_data.name, lap_data.devx, lap_data.subchannel);
	call ioa_ ("State is ^[hungup^;listening^;active^]. Flags: ^[send_output ^]^[started ^]", (lap_data.state + 1),
	     lap_data.send_output, lap_data.simplex_started);
	call ioa_ ("Activate order: ^24.3b", unspec (lap_data.activate_order));
	call ioa_ ("Dialup info:    ^24.3b", unspec (lap_data.dialup_info));
	call ioa_ ("SC dialup info: ^24.3b", unspec (lap_data.sc_dialup_info));
	call ioa_ ("Max frame size: ^d chars.  ^[No frame pending.^;Pending frame:^]", lap_data.max_frame_size,
	     (lap_data.frame_start = null ()));
	if (lap_data.frame_start ^= null ()) then do;
	     call ioa_ ("Frame at ^p is ^d chars^[ ready for sending^]:", lap_data.frame_start, lap_data.frame_size,
		lap_data.frame_ready);
	     call tty_dump$print_chain (P_ttybp, "", binary (rel (lap_data.frame_start), 18), (P_brief));
	     end;

	call ioa_ ("");

	return;
%page;
lap_analyze_:
     entry (P_ttybp, P_areap, P_devx, P_check_used, P_long);

	lctp = pointer (P_ttybp, rel (P_ttybp -> tty_buf.lct_ptr));
	lctep = addr (lct.lcte_array (P_devx));
	lap_data_ptr = pointer (P_ttybp, rel (lcte.data_base_ptr));

	call lap_dump_ (P_ttybp, P_areap, lap_data_ptr, -1, (^P_long));

	if (lap_data.frame_start ^= null ()) then do;
	     buffer_offset = binary (rel (lap_data.frame_start), 18);
	     do while ((buffer_offset ^= 0) & (buffer_offset < 261120));
		blockp = pointer (P_ttybp, buffer_offset);
		buffer_offset = buffer.next;
		call P_check_used (blockp, (16 * (1 + binary (buffer.size_code, 3))));
	     end;
	     end;

	call P_check_used (lap_data_ptr, size (lap_data));

	return;
%page;
dcl  P_ttybp pointer parameter;
dcl  P_areap pointer parameter;
dcl  P_lap_data_ptr pointer parameter;
dcl  P_subchannel fixed bin parameter;
dcl  P_brief bit (1) aligned parameter;
dcl  P_devx fixed bin parameter;
dcl  P_check_used entry (pointer, fixed bin) parameter;
dcl  P_long bit (1) aligned parameter;

dcl  buffer_offset fixed bin (18);

dcl  ioa_ entry () options (variable);
dcl  tty_dump$print_chain entry (ptr, char (*), fixed bin, bit (1));

dcl  (addr, binary, null, pointer, rel, size, unspec) builtin;
%page;
%include lap_simplex_data;
%page;
%include lap_line_info;
%page;
%include mcs_interrupt_info;
%page;
%include tty_buf;
%page;
%include lct;
%page;
%include tty_buffer_block;

     end lap_dump_;
