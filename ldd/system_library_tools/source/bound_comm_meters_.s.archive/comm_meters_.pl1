/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* format: style4,delnl,insnl,^ifthendo */
comm_meters_:
     proc (a_chan_names, a_version, a_area_ptr, a_n_channels, a_chan_meterp, a_code);

/* Subroutine for use by comm. channel metering commands. It takes a list of channel names,
   any or all of which may be starnames, and returns metering information for the specified
   channels. The comm_meters_$free entry frees the structures allocated by the main entry.
   This subroutine requires the aid of some multiplexer-specific entries to allocate and free structures
   whose formats are known only to the multiplexer involved. These entries have names of the form
   MPX_meters_$allocate_mpx, MPX_meters_$allocate_subchan, MPX_meters_$free_mpx,
   and MPX_meters_$free_subchan, where MPX is the name of the relevant multiplexer type.
*/

/* Written February 1981 by Robert S. Coren */
/* Modified July 1981 by Robert S. Coren to supply some info with call to sub_err_ */


/* PARAMETERS */

dcl  a_chan_names (*) char (*) parameter;		/* channel names for which to meter */
dcl  a_version fixed bin parameter;			/* version of structure to be allocated */
dcl  a_area_ptr pointer parameter;			/* pointer to area in which to do allocation */
dcl  a_entry_type char (*);				/* name of multiplexer-specific entry */
dcl  a_mpx_type fixed bin;				/* multiplexer type for get_mpx_entry entry */
dcl  a_n_channels fixed bin parameter;			/* number of channels matching a_chan_	names (OUTPUT) */
dcl  a_chan_meterp pointer parameter;			/* pointer to list of metering structures allocated (OUTPUT) */
dcl  a_code fixed bin (35);				/* status code (OUTPUT) */


/* AUTOMATIC */

dcl  chan_meter_areap ptr;
dcl  n_channels fixed bin;
dcl  code fixed bin (35);
dcl  last_chanp pointer;
dcl  names_areap ptr;
dcl  i fixed bin;
dcl  chanx fixed bin;
dcl  mpx_type fixed bin;
dcl  chan_name char (32);
dcl  name_matched bit (1);

dcl  1 meter_info aligned like get_comm_meters_info;

dcl  1 auto_logical_meters aligned like logical_chan_meters;


/* BASED */

dcl  names_area area (256) based (names_areap);
dcl  chan_meter_area area (256) based (chan_meter_areap);


/* ENTRIES */

dcl  get_system_free_area_ entry (pointer);
dcl  metering_gate_$comm_chan_star_list entry (char (*), fixed bin, ptr, ptr, fixed bin (35));
dcl  metering_gate_$get_comm_meters entry (char (*), ptr, fixed bin (35));
dcl  phcs_$get_comm_meters entry (char (*), ptr, fixed bin (35));
dcl  entry_var entry options (variable) variable;
dcl  sub_err_ entry options (variable);


/* EXTERNAL STATIC */

dcl  error_table_$noalloc fixed bin (35) external static;
dcl  error_table_$no_operation fixed bin (35) external static;
dcl  error_table_$unimplemented_version fixed bin (35) external static;


/* BUILTINS & CONDITIONS */

dcl  (addr, hbound, null) builtin;
dcl  (area, cleanup, linkage_error) condition;

	if a_version ^= CHANNEL_METERS_VERSION_1
	then do;
	     a_code = error_table_$unimplemented_version;
	     return;
	end;

	chan_meter_areap = a_area_ptr;
	n_channels = 0;
	last_chanp = null;
	chan_star_list_ptr = null;

	on cleanup call cleanup_proc;
	on area
	     begin;
		call cleanup_proc;
		a_code = error_table_$noalloc;
		go to exit;
	     end;

	call get_system_free_area_ (names_areap);
	name_matched = "0"b;

	do i = 1 to hbound (a_chan_names, 1);
	     call metering_gate_$comm_chan_star_list (a_chan_names (i), CHAN_STAR_INFO_VERSION_1, names_areap,
		chan_star_list_ptr, code);
	     if code ^= 0
	     then do;
		call report_error (a_chan_names (i));
		a_code = code;
		call cleanup_proc;
		return;
	     end;

	     name_matched = "1"b;
	     n_channels = n_channels + chan_star_info.n_channels;
	     do chanx = 1 to chan_star_info.n_channels;
		mpx_type = chan_star_info.chan_entry (chanx).mpx_type;
		chan_name = chan_star_info.chan_entry (chanx).name;
		allocate channel_meters in (chan_meter_area) set (chan_meterp);
		if last_chanp = null		/* this is first one in list */
		then a_chan_meterp = chan_meterp;	/* have to tell caller where to start */
		else last_chanp -> channel_meters.next_channelp = chan_meterp;
						/* else chain it on to previous */

		channel_meters.version = a_version;
		channel_meters.next_channelp = null;
		channel_meters.multiplexer_type = mpx_type;
		channel_meters.line_type = chan_star_info.chan_entry (chanx).line_type;
		channel_meters.parent_type = chan_star_info.chan_entry (chanx).parent_type;
		channel_meters.channel_name = chan_name;

		meter_info.version = GET_COMM_METERS_INFO_VERSION_1;
		meter_info.logical_chan_ptr = addr (auto_logical_meters);
		entry_var = get_entry ("allocate_mpx", mpx_type);
						/* returns iox_$err_no_operation if there isn't one */
		call entry_var (chan_meter_areap, meter_info.subchan_ptr, code);
		if code ^= 0
		then do;
		     if code ^= error_table_$no_operation
		     then call report_error (chan_name);
		     meter_info.subchan_ptr = null;
		end;

		if channel_meters.parent_type >= 0
		then do;
		     entry_var = get_entry ("allocate_subchan", channel_meters.parent_type);
		     call entry_var (chan_meter_areap, meter_info.parent_ptr, code);
		     if code ^= 0
		     then do;
			if code ^= error_table_$no_operation
			then call report_error (chan_name);
			meter_info.parent_ptr = null;
		     end;
		end;
		else meter_info.parent_ptr = null;

		channel_meters.mpx_specific_meterp = meter_info.subchan_ptr;
		channel_meters.parent_meterp = meter_info.parent_ptr;

/* now get the actual meters out of ring 0 */

		on linkage_error
		     begin;			/* we're going to try phcs_ first */
			revert linkage_error;
			call metering_gate_$get_comm_meters (chan_name, addr (meter_info), code);
			go to proceed;
		     end;

		call phcs_$get_comm_meters (chan_name, addr (meter_info), code);
		revert linkage_error;

proceed:
		if code ^= 0
		then do;
		     call report_error (chan_name);
		     free channel_meters in (chan_meter_area);
						/* skip this one */
		     if last_chanp ^= null
		     then last_chanp -> channel_meters.next_channelp = null;
						/* wipe out forward pointer to it */
		     n_channels = n_channels - 1;	/* don't count it */
		end;

		else do;
		     last_chanp = chan_meterp;	/* this one is last now */

/* now copy them into the structure */

		     channel_meters.cumulative.unconverted_input_chars = auto_logical_meters.current_meters.in_bytes;
		     channel_meters.cumulative.converted_output_chars = auto_logical_meters.current_meters.out_bytes;
		     channel_meters.cumulative.read_calls = auto_logical_meters.current_meters.in.calls;
		     channel_meters.cumulative.read_call_time = auto_logical_meters.current_meters.in.call_time;
		     channel_meters.cumulative.write_calls = auto_logical_meters.current_meters.out.calls;
		     channel_meters.cumulative.write_call_time = auto_logical_meters.current_meters.out.call_time;
		     channel_meters.cumulative.control_calls = auto_logical_meters.current_meters.control.calls;
		     channel_meters.cumulative.control_call_time =
			auto_logical_meters.current_meters.control.call_time;
		     channel_meters.cumulative.software_interrupts =
			auto_logical_meters.current_meters.in.interrupts
			+ auto_logical_meters.current_meters.out.interrupts
			+ auto_logical_meters.current_meters.control.interrupts;
		     channel_meters.cumulative.interrupt_time =
			auto_logical_meters.current_meters.in.interrupt_time
			+ auto_logical_meters.current_meters.out.interrupt_time
			+ auto_logical_meters.current_meters.control.interrupt_time;

		     channel_meters.saved.unconverted_input_chars = auto_logical_meters.saved_meters.in_bytes;
		     channel_meters.saved.converted_output_chars = auto_logical_meters.saved_meters.out_bytes;
		     channel_meters.saved.read_calls = auto_logical_meters.saved_meters.in.calls;
		     channel_meters.saved.read_call_time = auto_logical_meters.saved_meters.in.call_time;
		     channel_meters.saved.write_calls = auto_logical_meters.saved_meters.out.calls;
		     channel_meters.saved.write_call_time = auto_logical_meters.saved_meters.out.call_time;
		     channel_meters.saved.control_calls = auto_logical_meters.saved_meters.control.calls;
		     channel_meters.saved.control_call_time = auto_logical_meters.saved_meters.control.call_time;
		     channel_meters.saved.software_interrupts =
			auto_logical_meters.saved_meters.in.interrupts
			+ auto_logical_meters.saved_meters.out.interrupts
			+ auto_logical_meters.saved_meters.control.interrupts;
		     channel_meters.saved.interrupt_time =
			auto_logical_meters.saved_meters.in.interrupt_time
			+ auto_logical_meters.saved_meters.out.interrupt_time
			+ auto_logical_meters.saved_meters.control.interrupt_time;
		end;
	     end;					/* done with that channel */
	     free chan_star_info in (names_area);	/* done with that starname */
	     chan_star_list_ptr = null;		/* in case of cleanup */
	end;					/* done processing all names */

	if n_channels <= 0
	then a_code = code;
	else a_code = 0;

	a_n_channels = n_channels;
exit:
	return;


free:
     entry (a_area_ptr, a_chan_meterp, a_code);

/* this entry frees metering structure allocated by main entry */

	chan_meter_areap = a_area_ptr;
	call free_all (a_chan_meterp);		/* internal subroutine does all the work */
	a_code = code;
	return;



get_mpx_entry:
     entry (a_entry_type, a_mpx_type) returns (entry);

/* this is an entry to allow external access to the get_entry procedure */

	return (get_entry (a_entry_type, a_mpx_type));

/* CLEANUP_PROC -- called for cleanup condition or if subroutine aborts */

cleanup_proc:
     procedure;

	if chan_star_list_ptr ^= null
	then free chan_star_info in (names_area);
	if last_chanp ^= null
	then call free_all (a_chan_meterp);
	return;
     end cleanup_proc;

/* FREE_ALL -- frees metering structures. Multiplexer-specific entries are called to free stuff allocated by corresponding entries */

free_all:
     procedure (a_list_meterp);

dcl  a_list_meterp ptr;
dcl  next_chanp ptr;

	chan_meterp = a_list_meterp;
	do while (chan_meterp ^= null);
	     if channel_meters.mpx_specific_meterp ^= null
	     then do;
		entry_var = get_entry ("free_mpx", channel_meters.multiplexer_type);
		call entry_var (channel_meters.mpx_specific_meterp, code);
		if code ^= 0
		then call sub_err_ (code, "comm_meters_$free", "c", null, 0, "Couldn't free
meters for ^a subchannel.", mpx_types (channel_meters.multiplexer_type));
	     end;

	     if channel_meters.parent_meterp ^= null
	     then do;
		entry_var = get_entry ("free_subchan", channel_meters.parent_type);
		call entry_var (channel_meters.parent_meterp, code);
		if code ^= 0
		then call sub_err_ (code, "comm_meters_$free", "c", null, 0,
			"Couldn't free meters for ^a multiplexer.", mpx_types (channel_meters.parent_type));
	     end;

	     code = 0;
	     next_chanp = channel_meters.next_channelp;
	     free channel_meters in (chan_meter_area);
	     chan_meterp = next_chanp;		/* on to the next */
	end;
	return;
     end free_all;

/* GET_ENTRY -- given a multiplexer type and an entrypoint name, returns the entry.
   If there is no corresponding entry, returns iox_$err_no_operation, so result can
   always be called and will do something comprehensible.
*/

get_entry:
     procedure (a_entry_type, a_mpx_type) returns (entry);

dcl  a_entry_type char (*);
dcl  a_mpx_type fixed bin;

dcl  segname char (32);
dcl  entname char (32);
dcl  entry_ptr pointer;
dcl  entry_result entry variable;
dcl  code fixed bin (35);

dcl  cu_$make_entry_value entry (pointer, entry);
dcl  hcs_$make_ptr entry (pointer, char (*), char (*), pointer, fixed bin (35));

dcl  iox_$err_no_operation entry options (variable);

dcl  rtrim builtin;

	segname = rtrim (mpx_types (a_mpx_type)) || "_meters_";
	entname = a_entry_type;

	call hcs_$make_ptr (null, segname, entname, entry_ptr, code);
	if entry_ptr = null
	then return (iox_$err_no_operation);

	call cu_$make_entry_value (entry_ptr, entry_result);
	return (entry_result);
     end get_entry;

/* REPORT_ERROR -- internal procedure to call sub_err_ with a channel name */

report_error:
     procedure (err_name);

dcl  err_name char (*);
dcl  1 auto_meters_error_info aligned like comm_meters_error_info;

	comm_meters_errp = addr (auto_meters_error_info);
	comm_meters_error_info.version = COMM_METERS_ERR_V1;
	comm_meters_error_info.chan_name = err_name;
	comm_meters_error_info.more_than_one_starname = (hbound (a_chan_names, 1) > 1);
	if name_matched
	then do;
	     comm_meters_error_info.starname_matched = "1"b;
	     comm_meters_error_info.more_than_one_match = (n_channels > 1);
	end;
	else comm_meters_error_info.starname_matched, comm_meters_error_info.more_than_one_match = "0"b;

	call sub_err_ (code, "comm_meters_", "c", comm_meters_errp, 0, "Processing channel name ^a", err_name);
	return;
     end report_error;

%include multiplexer_types;
%page;
%include chan_star_info;
%page;
%include get_comm_meters_info;
%page;
%include channel_meters;
%page;
%include lct;
%page;
%include comm_meters_error_info;

     end comm_meters_;
