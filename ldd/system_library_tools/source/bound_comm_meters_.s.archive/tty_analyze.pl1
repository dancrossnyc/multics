/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: style4,delnl,insnl,^ifthendo */

/* Procedure to analyze contents of tty_buf which has been extracted from a dump */

/* Revised Oct. 1978 by Robert Coren for multiplexed channels */
/* Revised Feb. 1980 by Robert Coren to start with any level-1 multiplexer and
   to use copy_erf_seg_ instead of the extract command */
/* Modified: 19 December 1981 by G. Palter to add formatting control arguments */
/* Modified: 7 Sept 1984 by C Spitzer. correct format for call to dump_segment_ */
/* Modified September 1984 by Robert Coren to use include file for delay queue entries */
/* Modified: October 1984 by Greg Texada for new calling sequence for copy_erf_seg_	*/
/* Modified December 1984 by Robert Coren to report line_status_disabled flag */


/****^  HISTORY COMMENTS:
  1) change(88-06-24,Parisek), approve(88-06-24,MCR7928),
     audit(88-07-08,Beattie), install(88-07-19,MR12.2-1061):
     Added support of the UNCP multiplexer.  UNCP_MPX treated like MCS_MPX.
                                                   END HISTORY COMMENTS */


tty_analyze:
     procedure options (variable, separate_static);

dcl  ttybuf_size fixed bin (19) unsigned;
dcl  used_pattern bit (18) aligned int static options (constant) init ("111000111000111000"b);
dcl  (i, buf, devx) fixed bin;
dcl  flagarray char (200) varying;
dcl  tty_areap ptr;
dcl  chanx fixed bin;
dcl  copy_pcb_ap ptr;
dcl  chan_name char (32);
dcl  analyze_entry_name char (32);
dcl  erfno char (32);
dcl  code fixed bin (35);
dcl  longsw bit (1);
dcl  q_count fixed bin;
dcl  q_last fixed bin;
dcl  q_off fixed bin;
dcl  q_ptr ptr;
dcl  block_orig fixed bin;
dcl  input_cnt fixed bin;
dcl  output_cnt fixed bin;

dcl  1 ds_format aligned,				/* dump_segment_ control word */
       2 (address, offset, short, bcd, ascii, long, ebcdic9, ebcdic8, four_bit, hex8, hex9) bit (1) unaligned,
       2 mbz bit (25) unaligned;

dcl  q_entry_overlay (size (fnp_queue_entry)) bit (36) aligned based;

dcl  1 used_block aligned based,
       2 used_marker bit (18) unal,			/* filled in with used_pattern after checking */
       2 next fixed bin (18) unsigned unal;		/* offset of next unused place */

dcl  argp pointer;
dcl  arg char (argl) based (argp);
dcl  argl fixed bin (21);
dcl  n_arguments fixed binary;

dcl  DCW_LIST_SIZE fixed bin int static options (constant) init (16);
dcl  prog_name char (11) int static options (constant) init ("tty_analyze");
dcl  temp_segs (3) ptr int static;
dcl  have_segs bit (1) int static init ("0"b);

dcl  (addr, addrel, bin, fixed, hbound, index, length, mod, null, pointer, ptr, rel, rtrim, size, string, substr) builtin;

dcl  (
     error_table_$badopt,
     error_table_$too_many_args
     ) fixed binary (35) external;

dcl  ioa_ entry () options (variable);
dcl  (
     com_err_,
     com_err_$suppress_name
     ) entry () options (variable);
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl  cu_$arg_count entry (fixed bin, fixed bin (35));
dcl  cv_entry_ entry (char (*), ptr, fixed bin (35)) returns (entry);
dcl  analyze_entry entry (ptr, ptr, fixed bin, entry, bit (1)) variable;
dcl  get_temp_segments_ entry (char (*), (*) pointer, fixed bin (35));
dcl  copy_erf_seg_$name entry (char (*), char (*), pointer, fixed bin (19) unsigned, fixed bin (35));
dcl  match_star_name_ entry (char (*), char (*), fixed bin (35));
dcl  tty_dump$print_chain entry (pointer, character (*), fixed binary, bit (1));
dcl  tty_dump$set_static_for_analyze entry (fixed binary (19) unsigned, 1 aligned like ds_format);

/**/

	call cu_$arg_count (n_arguments, code);
	if code ^= 0
	then do;
	     call com_err_ (code, prog_name);
	     return;
	end;

	if n_arguments = 0
	then do;
USAGE:
	     call com_err_$suppress_name (0, prog_name, "Usage:  ^a erf_number {-control_args}", prog_name);
	     return;
	end;

	erfno = "-1";				/* no ERF yet */
	longsw = "0"b;
	string (ds_format) = ""b;			/* defaults to no interpretation */

	do i = 1 to n_arguments;

	     call cu_$arg_ptr (i, argp, argl, code);
	     if code ^= 0
	     then do;
		call com_err_ (code, prog_name, "Fetching argument #^d.", i);
		return;
	     end;

	     if arg = "-long" | arg = "-lg"
	     then longsw = "1"b;

	     else if arg = "-brief" | arg = "-bf"
	     then longsw = "0"b;

	     else if arg = "-character" | arg = "-ch" | arg = "-ascii"
	     then do;
		longsw, ds_format.ascii = "1"b;	/* implies -long */
		ds_format.ebcdic8, ds_format.ebcdic9 = "0"b;
	     end;

	     else if arg = "-ebcdic8"
	     then do;
		longsw, ds_format.ebcdic8 = "1"b;
		ds_format.ascii, ds_format.ebcdic9 = "0"b;
	     end;

	     else if arg = "-ebcdic9"
	     then do;
		longsw, ds_format.ebcdic9 = "1"b;
		ds_format.ascii, ds_format.ebcdic8 = "0"b;
	     end;

	     else if arg = "-octal"
	     then do;
		longsw = "1"b;			/* implies -long */
		ds_format.hex8, ds_format.hex9 = "0"b;
	     end;

	     else if arg = "-hex8"
	     then do;
		longsw, ds_format.hex8 = "1"b;
		ds_format.hex9 = "0"b;
	     end;

	     else if arg = "-hex9"
	     then do;
		longsw, ds_format.hex9 = "1"b;
		ds_format.hex8 = "0"b;
	     end;

	     else if index (arg, "-") = 1
	     then do;
		call com_err_ (error_table_$badopt, prog_name, """^a""", arg);
		return;
	     end;

	     else do;				/* must be the ERF number */
		if erfno ^= "-1"
		then do;
		     call com_err_ (error_table_$too_many_args, prog_name, "Only one ERF number may be supplied. ^a",
			arg);
		     return;
		end;
		erfno = arg;
	     end;
	end;

	if erfno = "-1"				/* a dump must be supplied */
	then go to USAGE;

	if ds_format.ascii | ds_format.ebcdic8 | ds_format.ebcdic9
	then ds_format.long = "0"b;			/* if interpreting only four words per line */
	else ds_format.long = "1"b;			/* otherwise, eight will fit */

	if ^have_segs
	then do;
	     call get_temp_segments_ (prog_name, temp_segs, code);
	     if code ^= 0
	     then do;
		call com_err_ (code, prog_name, "Getting temporary segments.");
		return;
	     end;
	     have_segs = "1"b;
	end;

	ttybp = temp_segs (1);
	infop = temp_segs (2);
	tty_areap = temp_segs (3);

	call copy_erf_seg_$name (erfno, "tty_buf", ttybp, ttybuf_size, code);
	if code ^= 0
	then go to bad_copy;

	call copy_erf_seg_$name (erfno, "dn355_data", infop, (0), code);
	if code ^= 0
	then go to bad_copy;

	call copy_erf_seg_$name (erfno, "tty_area", tty_areap, (0), code);
	if code ^= 0
	then do;
bad_copy:
	     call com_err_ (code, prog_name, "Could not copy data from ERF ^a", erfno);
	     return;
	end;

	call tty_dump$set_static_for_analyze (ttybuf_size, ds_format);

	call ioa_ ("Begin analysis of ERF ^a", erfno);
	call ioa_ ("^/^/Header Values:^/^-bleft ^d, free ^o", bleft, fixed (free, 18));


/* Find all physical FNP channels; for each one, analyze it and all its subchannels */

	lctp = ptr (ttybp, rel (tty_buf.lct_ptr));
	lcntp = ptr (tty_areap, rel (lct.lcnt_ptr));

	do i = 1 to lct.max_no_lctes;
	     lctep = addr (lcte_array (i));
	     if lcte.entry_in_use
	     then if lcte.major_channel_devx = 0
		then call walk_channel_tree (i, lcnt.names (i));
						/* track down all the subchannels */
	end;

	do i = 1 to lct.max_no_lctes;			/* track down all unmarked LCTEs */
	     lctep = addr (lcte_array (i));
	     if substr (lcte.lock, 1, 18) ^= used_pattern
	     then do;
		if lcte.entry_in_use		/* this shouldn't have happened */
		then call ioa_ ("^/LCTE at ^o marked in use, but has not been processed^/", bin (rel (lctep)));
		call check_used (lctep, size (lcte));	/* mark it now in any case */
	     end;
	end;

	call check_used (lctp, bin (rel (addr (lct.lcte_array (1)))) - bin (rel (lctp)));
						/* mark lct header */


	call ioa_ ("^3/Begin free chain trace");

	buf = fixed (free, 18);			/* get free pointer */
	if buf = 0
	then if bleft ^= 0
	     then do;				/* error */

		call ioa_ ("^2/FREE = 0 BUT BLEFT ^= 0");
		go to check_unstrung_buffers;		/* can't check free chain obviously */
	     end;

	if buf = 0
	then go to check_unstrung_buffers;		/* nothing more to check */

	do while (buf ^= 0);
	     free_blockp = addrel (ttybp, buf);		/* make pointer to next buffer */
	     call ioa_ ("^o (^o words)", buf, free_block.size);
	     buf = bin (free_block.next);		/* get addr of next buffer */
	     call check_used (free_blockp, free_block.size);
						/* check if buffer used - set it used */
	     if buf ^= 0
	     then if buf < fixed (borig, 18)
		then do;				/* bad buffer addr */

bad_free_chain:
		     call ioa_ ("^2/BAD BUFFER ADDR IN FREE CHAIN ^o -> ^o^2/", fixed (rel (blockp), 18), buf);
		     go to check_unstrung_buffers;
		end;

	     if buf > ttybuf_size
	     then go to bad_free_chain;		/* out of bounds addr - stop free chain search */
	     bleft = bleft - free_block.size;		/* decrement count of free buffers */
	end;

	if bleft ^= 0
	then					/* bleft is screwed up */
	     call ioa_ ("^2/BLEFT NOT EXHAUSTED (= ^o) AT END OF FREE CHAIN TRACE^2/", bleft);

check_unstrung_buffers:
	call ioa_ ("^/Begin unthreaded space check");	/* see if any buffers not marked with used patern */

	blockp = ptr (ttybp, borig);			/* get ptr to first buffer */
	do while (bin (rel (blockp)) < ttybuf_size);
	     if blockp -> used_block.used_marker ^= used_pattern
	     then do;
		block_orig = bin (rel (blockp));
		do while (blockp -> used_block.used_marker ^= used_pattern & bin (rel (blockp)) < ttybuf_size);
		     blockp = addrel (blockp, 2);
		end;
		call ioa_ ("^o (^o words)", block_orig, bin (rel (blockp)) - block_orig);
	     end;

	     else blockp = ptr (ttybp, blockp -> used_block.next);
	end;

	return;

/**/

walk_channel_tree:
     proc (a_devx, a_chan_name);

/* internal procedure (called recursively) to find all subchannels of a
   *  given channel, print each one's LCT entry, and call the special-purpose entry to
   *  print its data bases
*/

dcl  a_devx fixed bin;
dcl  a_chan_name char (*);
dcl  chan_name char (32);
dcl  star_name char (32);
dcl  local_lctep ptr;				/* copy of lctep for this procedure */
dcl  i fixed bin;
dcl  code fixed bin (35);

	devx = a_devx;
	chan_name = a_chan_name;
	lctep, local_lctep = addr (lct.lcte_array (devx));
	if lcte.entry_in_use & lcte.initialized
	then do;					/* only if there's anything to look at */
	     if lcte.queue_head
	     then call print_channel_queue;

	     if lcte.channel_type = TTY_MPX
	     then call analyze_wtcb (devx);		/* this is the end of the chain */
	     else if lcte.channel_type = MCS_MPX | lcte.channel_type = UNCP_MPX then do;
		if lcte.channel_type = UNCP_MPX then
		     call ioa_ ("^/multiplexer type: ^a", mpx_types (lcte.channel_type));		    
		call analyze_fnp;
	     end;
	     else do;
		call ioa_ ("^/multiplexer type: ^a", mpx_types (lcte.channel_type));
		call mpx_analyze_entry;

		star_name = rtrim (chan_name) || ".*";	/* now hunt for subnames */
		do i = 1 to lct.max_no_lctes;
		     call match_star_name_ (lcnt.names (i), star_name, code);
		     if code = 0			/* this is one */
		     then if lct.lcte_array (i).entry_in_use
			then do;
			     call ioa_ ("^/Subchannel: ^a, devx ^o", lcnt.names (i), i);
			     call walk_channel_tree (i, lcnt.names (i));
			end;
		end;
	     end;
	end;

	call check_used (local_lctep, size (lcte));
	return;
     end walk_channel_tree;

/**/

analyze_fnp:
     proc;

dcl  subchan_lctep ptr;

	fnpp = ptr (infop, rel (lcte.data_base_ptr));
	if fnp_info.no_of_channels > 0
	then do;
	     n_pcbs = fnp_info.no_of_channels;
	     copy_pcb_ap = ptr (ttybp, rel (fnp_info.pcb_array_ptr));
	     do chanx = 1 to n_pcbs;
		pcbp = addr (copy_pcb_ap -> pcb_array (chanx));
		devx = pcb.devx;
		chan_name = lcnt.names (devx);
		subchan_lctep = addr (lct.lcte_array (devx));

		call ioa_ ("^2/Physical channel ^a, ^d baud, devx ^o, pcb ^o, lcte ^o, line type ^a", chan_name,
		     pcb.baud_rate, devx, bin (rel (pcbp)), bin (rel (subchan_lctep)), line_types (pcb.line_type));
		call ioa_ (
		     "flags: ^[listen ^;^]^[dialed ^;^]^[send_output ^;^]^[high_speed ^;^]^[sync_line ^;^]^[end_frame ^;^]^[hndlquit ^;^]^[output_mbx_pending ^;^]^[copied_meters_ready ^;^]^[get_meters_waiting ^;^]^[tandd_attached ^;^]"
		     , pcb.listen, pcb.dialed, pcb.send_output, pcb.high_speed, pcb.sync_line, pcb.end_frame,
		     pcb.hndlquit, pcb.output_mbx_pending, pcb.copied_meters_ready, pcb.get_meters_waiting,
		     pcb.tandd_attached);

		input_cnt = subchan_lctep -> lcte.input_words;
		output_cnt = subchan_lctep -> lcte.output_words;

		if pcb.write_first >= bin (borig, 18)
		then do;				/* trace write chain */
		     call ioa_ ("Write chain trace");
		     call buffer_trace ((pcb.write_first), "WRITE_FIRST");
						/* trace write chain */
		end;

		call walk_channel_tree (devx, chan_name);
						/* do its subchannels now */
		if output_cnt ^= 0
		then				/* output count is goofed up */
		     call ioa_ ("^2/OUTPUT COUNT RESIDUAL (^d) DOESN'T AGREE WITH BUFFER CHAIN TRACE^2/", output_cnt);
		if input_cnt ^= 0
		then				/* input count is goofed up */
		     call ioa_ ("^2/INPUT COUNT RESIDUAL (^d) DOESN'T AGREE WITH BUFFER CHAIN TRACE^2/", input_cnt);

		call check_used (pcbp, size (pcb));
	     end;

	     call check_used (ptr (ttybp, rel (fnp_info.dcw_list_array_ptr)), 8 * DCW_LIST_SIZE);
						/* mark the DCW list area */
	end;

	if fnp_info.running
	then do;
	     if fnp_info.cur_ptr ^= 0			/* if there's a delay queue */
	     then do;
		q_count = fnp_info.count;
		q_off = fnp_info.cur_ptr;
		q_last = fnp_info.last_ptr;

		call ioa_ ("^3/Delay queue for FNP ^a", fnp_info.fnp_tag);
		do while (q_off ^= 0);
		     q_ptr = ptr (ttybp, q_off);
		     call ioa_ ("^o", q_off);
		     if longsw
		     then call ioa_ ("^(^8(^w ^)^/^)", q_ptr -> q_entry_overlay);
		     call check_used (q_ptr, size (fnp_queue_entry));
		     q_off = q_ptr -> fnp_queue_entry.next;
		     q_count = q_count - 1;
		end;

		if bin (rel (q_ptr), 18) ^= q_last
		then call ioa_ ("last_ptr (^o) does not point to last queue block (^o)", q_last,
			bin (rel (q_ptr), 18));

		if q_count ^= 0
		then call ioa_ ("^d queue entries unaccounted for", q_count);
	     end;

	end;
	return;
     end analyze_fnp;

/**/

analyze_wtcb:
     proc (a_devx);

/* subroutine to interpret the contents of a wtcb */

dcl  a_devx fixed bin;

	if bin (rel (lcte.data_base_ptr), 18) < bin (borig, 18)
	then return;
	wtcbp = ptr (ttybp, rel (lcte.data_base_ptr));
	flagarray = "";				/* make a string listing all flags that are on */
	if wtcb.flags.listen
	then flagarray = flagarray || "listen,";
	if wtcb.flags.dialed
	then flagarray = flagarray || "dialed,";
	if wtcb.flags.send_output
	then flagarray = flagarray || "send_output,";
	if wtcb.flags.qenable
	then flagarray = flagarray || "qenable,";
	if wtcb.flags.qflag
	then flagarray = flagarray || "qflag,";
	if wtcb.flags.end_frame
	then flagarray = flagarray || "end_frame,";
	if wtcb.flags.notify_reqd
	then flagarray = flagarray || "notify_reqd,";
	if wtcb.flags.work_reqd
	then flagarray = flagarray || "work_reqd,";
	if wtcb.flags.dialing
	then flagarray = flagarray || "dialing,";
	if wtcb.flags.dial_status_valid
	then flagarray = flagarray || "dial_status,";
	if wtcb.flags.line_status_present
	then flagarray = flagarray || "line_status,";
	if wtcb.flags.wru
	then flagarray = flagarray || "wru,";
	if wtcb.flags.hndlquit
	then flagarray = flagarray || "hndlquit,";
	if wtcb.flags.count_lines
	then flagarray = flagarray || "count_lines,";
	if wtcb.flags.sync_line
	then flagarray = flagarray || "sync_line,";
	if wtcb.flags.breakall
	then flagarray = flagarray || "breakall,";
	if wtcb.flags.scroll
	then flagarray = flagarray || "scroll,";
	if wtcb.flags.negotiating_echo
	then flagarray = flagarray || "negotiating_echo,";
	if wtcb.flags.wake_tbl
	then flagarray = flagarray || "wake_tbl,";
	if wtcb.flags.allow_wakeup
	then flagarray = flagarray || "allow_wakeup,";
	if wtcb.flags.receive_mode_device
	then flagarray = flagarray || "receive_mode_device,";
	if length (flagarray) > 0
	then substr (flagarray, length (flagarray), 1) = " ";

	call ioa_ ("wtcb at ^o^/flags: ^a", bin (rel (wtcbp)), flagarray);

	call ioa_ ("more_flags: ^[line_status_disabled^;^]", wtcb.line_status_disabled);

	if wtcb.wflag
	then call ioa_ ("blocked for output");
	if wtcb.rflag
	then call ioa_ ("blocked for input");

	if wtcb.fblock ^= 0
	then do;
	     call ioa_ ("Read chain trace");
	     call buffer_trace ((wtcb.fblock), "FBLOCK"); /* go trace read chain */
	end;

	if wtcb.write_first ^= 0
	then do;
	     call ioa_ ("Write chain trace");
	     call buffer_trace ((wtcb.write_first), "WRITE_FIRST");
	end;

	if wtcb.echdp ^= "0"b
	then call check_used (ptr (ttybp, wtcb.echdp), size (echo_data));

	if wtcb.waketp ^= "0"b
	then call check_used (ptr (ttybp, wtcb.waketp), size (wakeup_table));

	call check_used (wtcbp, size (wtcb));
	return;
     end analyze_wtcb;

/**/

mpx_analyze_entry:
     proc;

/* procedure to find and call entry for analyzing a particular channel type */

	analyze_entry_name = rtrim (mpx_types (lcte.channel_type)) || "_analyze_";
	analyze_entry = cv_entry_ (analyze_entry_name, null (), code);
	if code ^= 0
	then call com_err_ (code, "tty_analyze", "Cannot get pointer to ^a", analyze_entry_name);
	else call analyze_entry (ttybp, tty_areap, devx, check_used, longsw);
	return;
     end mpx_analyze_entry;


print_channel_queue:
     proc;

dcl  next_queue bit (18);
dcl  queue_ptr ptr;
dcl  interrupt fixed bin;

dcl  1 channel_q aligned based (queue_ptr),
       2 next bit (18) unal,
       2 pad bit (18) unal,
       2 int_type fixed bin,
       2 data (2) fixed bin;

dcl  interrupt_name (12) char (16) int static options (constant)
	init ("DIALUP", "HANGUP", "CRASH", "SEND_OUTPUT", "INPUT_AVAILABLE", "ACCEPT_INPUT", "INPUT_REJECTED", "QUIT",
	"LINE_STATUS", "DIAL_STATUS", "WRU_TIMEOUT", "SPACE_AVAILABLE");


	call ioa_ ("^/channel queue:");
	next_queue = lcte.queue_head;

	do while (next_queue ^= "0"b);
	     queue_ptr = ptr (ttybp, next_queue);
	     interrupt = channel_q.int_type;
	     call ioa_ ("^-^6o^3x^[^a^s^;^s^d^]^13o^13o", bin (next_queue),
		(interrupt > 0 & interrupt <= hbound (interrupt_name, 1)), interrupt_name (interrupt), interrupt,
		channel_q.data);
	     next_queue = channel_q.next;
	     call check_used (queue_ptr, size (channel_q));
	end;

	if rel (queue_ptr) ^= lcte.queue_tail
	then call ioa_ ("End of queue (^o) differs from lcte.queue_tail (^o)", bin (rel (queue_ptr)),
		bin (lcte.queue_tail));

	return;
     end print_channel_queue;

/**/

buffer_trace:
     proc (buf_offset, name);

/*	Subroutine to trace a buffer chain.			*/

dcl  buf_offset fixed bin;
dcl  name char (*);

dcl  buf_size fixed bin;

	call tty_dump$print_chain (ttybp, name, buf_offset, ^longsw);

	do while (buf_offset ^= 0);
	     if buf_offset < bin (tty_buf.borig, 18)
	     then do;
		call ioa_ ("^2/^a (^o^) < borig^2/", name, buf_offset);
		return;
	     end;

	     if buf_offset > ttybuf_size
	     then do;
		call ioa_ ("^2/^a (^o) > tty_buf size", name, buf_offset);
		return;
	     end;

	     blockp = pointer (ttybp, buf_offset);
	     buf_size = 16 * (bin (buffer.size_code, 3) + 1);
	     if name = "FBLOCK"
	     then input_cnt = input_cnt - buf_size;
	     else output_cnt = output_cnt - buf_size;

	     buf_offset = buffer.next;
	     call check_used (blockp, buf_size);
	end;

	return;
     end buffer_trace;


/*	Subroutine to see if buffer has used pattern in it - if not mark it used */

check_used:
     proc (buffp, nwords);

dcl  buffp pointer;
dcl  nwords fixed bin;

	if buffp -> used_block.used_marker = used_pattern
	then					/* opps - already marked used */
	     call ioa_ ("^2/BUFFER ^o ALREADY USED BY SOMEONE ELSE", fixed (rel (buffp), 18));
	buffp -> used_block.used_marker = used_pattern;	/* mark buffer used */
	buffp -> used_block.next = bin (rel (buffp)) + nwords + mod (nwords, 2);
	return;
     end check_used;

/**/

%include tty_buf;
%include dn355_data;
%include dn355_mailbox;
%include tty_buffer_block;
%include pcb;
%include fnp_queue_entry;
%include lct;
%include wtcb;
%include line_types;
%include multiplexer_types;
%include mailbox_ops;
%include mcs_echo_neg_sys;
%include set_wakeup_table_info;

     end tty_analyze;
