/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* format: style4,delnl,insnl,^ifthendo */
mcs_meters_:
     procedure;

/* This procedure contains entries to allocate and free metering structures, and
   to display meters, for MCS FNPs and their subchannels.
*/

/* Written February 1981 by Robert Coren */
/* Modified May 1981 by Robert Coren for new iom_data format */
/* Modified August 1981 by Robert Coren to add buffer preallocation information. */
/* Modified September 1981 by Robert Coren to add fnp-wide throughput statistics
   and to suppress mpx meters kept in FNP if all 0 */

	return;					/* main entry should never be called */

/* PARAMETERS */

dcl  a_area_ptr pointer;				/* pointer to area in which to perform allocations */
dcl  a_meterp pointer;				/* pointer to structure to be allocated/freed (OUTPUT for alloc, INPUT for free */
dcl  a_chan_name char (32);				/* for display entries */
dcl  a_iocbp pointer;				/* likewise */
dcl  a_chan_meterp pointer;				/* likewise, pointer to channel meters structure */
dcl  a_flags bit (36) aligned;			/* likewise */
dcl  a_since_boot bit (1);				/* for summary entry */
dcl  a_summary_ptr pointer;				/* likewise, structure to be filled in */
dcl  a_code fixed bin (35);				/* status code (OUTPUT) */

/* AUTOMATIC */

dcl  areap pointer;
dcl  code fixed bin (35);
dcl  iocbp pointer;
dcl  flags bit (36) aligned;
dcl  brief bit (1);
dcl  error bit (1);
dcl  since_boot bit (1);
dcl  synchronous bit (1);
dcl  multiplexed bit (1);
dcl  pool fixed bin (35);
dcl  avg_space_available fixed bin (35);
dcl  fnp_meters_available bit (1);
dcl  time_up fixed bin (71);
dcl  input_chars fixed bin (35);
dcl  output_chars fixed bin (35);
dcl  meter_time fixed bin (71);
dcl  char_time char (10);
dcl  cur_ptrs (2) pointer;
dcl  prev_ptrs (2) pointer;
dcl  cpu_time fixed bin (71);
dcl  n_interrupts fixed bin (35);
dcl  interrupt_time fixed bin (71);
dcl  iom_data_len fixed bin (19);
dcl  iomx fixed bin;
dcl  current_meterp pointer;
dcl  saved_meterp pointer;
dcl  max_possible_idle_count fixed bin (35);
dcl  total_dia_q_len fixed bin (35);
dcl  total_dia_q_updates fixed bin (35);
dcl  total_pending_status fixed bin (35);
dcl  total_status_updates fixed bin (35);
dcl  total_output_overlaps fixed bin (35);
dcl  total_parity_errors fixed bin (35);
dcl  total_ssqo fixed bin (35);
dcl  total_hsqo fixed bin (35);
dcl  total_alloc_failures fixed bin (35);
dcl  total_input_messages fixed bin (35);
dcl  total_input_length fixed bin (35);
dcl  total_output_messages fixed bin (35);
dcl  total_output_length fixed bin (35);
dcl  total_pre_exhaust fixed bin (35);
dcl  total_exhaust fixed bin (35);
dcl  total_echo_overflows fixed bin (35);
dcl  total_xte fixed bin (35);
dcl  total_bell_quits fixed bin (35);
dcl  total_counters (8) fixed bin (35);

dcl  dia_q_len fixed bin (35);
dcl  dia_q_updates fixed bin (35);
dcl  pending_status fixed bin (35);
dcl  status_updates fixed bin (35);
dcl  output_overlaps fixed bin (35);
dcl  parity_errors fixed bin (35);
dcl  ssqo fixed bin (35);
dcl  hsqo fixed bin (35);
dcl  alloc_failures fixed bin (35);
dcl  input_messages fixed bin (35);
dcl  input_length fixed bin (35);
dcl  output_messages fixed bin (35);
dcl  output_length fixed bin (35);
dcl  pre_exhaust fixed bin (35);
dcl  exhaust fixed bin (35);
dcl  echo_overflows fixed bin (35);
dcl  xte fixed bin (35);
dcl  bell_quits fixed bin (35);
dcl  counters (8) fixed bin (35);



/* BASED */

dcl  m_area area (256) based (areap);
dcl  based_time fixed bin (71) based;


/* ENTRIES */

dcl  ioa_$ioa_switch entry options (variable);
dcl  meter_format_$time entry (fixed bin (71)) returns (char (10));
dcl  meter_format_$picture entry (fixed bin (35), fixed bin) returns (char (15) varying);
dcl  meter_format_$quotient entry (fixed bin (71), fixed bin (71), char (*)) returns (char (12) varying);
dcl  metering_util_$define_regions entry options (variable);
dcl  metering_util_$fill_buffers entry (fixed bin, fixed bin (71), char (10), (*) pointer, (*) pointer, fixed bin (35));
dcl  ring_zero_peek_$get_max_length entry (char (*), fixed bin (19), fixed bin (35));


/* EXTERNAL STATIC */

dcl  iox_$user_output pointer external static;
dcl  error_table_$noalloc fixed bin (35) external static;


/* INTERNAL STATIC */

dcl  defined bit (1) internal static init ("0"b);		/* indicates whether metering_util_$define_regions has been called */
dcl  mu_index fixed bin internal static;


/* CONDITIONS AND BUILTINS */

dcl  area condition;
dcl  (clock, divide, bin, size, null, hbound, addr, unspec) builtin;

allocate_subchan:
     entry (a_area_ptr, a_meterp, a_code);

/* entry to allocate a fnp_channel_meters structure */

	areap = a_area_ptr;
	a_code = 0;
	on area
	     begin;
		a_code = error_table_$noalloc;
		go to exit;
	     end;

	allocate fnp_chan_meter_struc in (m_area) set (a_meterp);
	a_meterp -> fnp_chan_meter_struc.version = FNP_CHANNEL_METERS_VERSION_1;

exit:
	return;


allocate_mpx:
     entry (a_area_ptr, a_meterp, a_code);

/* entry to allocate a fnp_meters structure */

	areap = a_area_ptr;
	a_code = 0;
	on area
	     begin;
		a_code = error_table_$noalloc;
		go to exit;
	     end;


	allocate fnp_meters in (m_area) set (a_meterp);
	a_meterp -> fnp_meters.version = FNP_METERS_VERSION_2;

	return;




free_subchan:
     entry (a_meterp, a_code);

/* entry to free the fnp_channel_meters structure */

	fnp_chan_meterp = a_meterp;
	free fnp_chan_meter_struc;
	a_code = 0;
	return;



free_mpx:
     entry (a_meterp, a_code);

/* entry to free the fnp_meters structure */

	fnp_meterp = a_meterp;
	free fnp_meters;
	a_code = 0;
	return;

display_mpx:
     entry (a_chan_name, a_iocbp, a_chan_meterp, a_flags, a_code);

/* entry to display meters for a whole FNP */

	call setup_display;

	fnp_meterp = channel_meters.mpx_specific_meterp;
	fnp_meters_available = (unspec (fnp_meters.from_fnp) ^= "0"b);
	time_up = clock () - fnp_meters.from_fnp.time_booted;
	input_chars = channel_meters.cumulative.unconverted_input_chars;
	output_chars = channel_meters.cumulative.converted_output_chars;

	if ^error
	then do;
	     if fnp_meters_available
	     then do;
		if ^brief
		then call ioa_$ioa_switch (iocbp, "FNP has been up for^35t^a", meter_format_$time (time_up));

		call ioa_$ioa_switch (iocbp, "Number of channels configured^35t^6d", fnp_meters.n_channels);
		call ioa_$ioa_switch (iocbp, "Average number dialed up^38t^a",
		     meter_format_$quotient ((fnp_meters.from_fnp.channels_dialed_cum),
		     (fnp_meters.from_fnp.channels_dialed_updates), "^5.1f"));

		max_possible_idle_count = fnp_meters.from_fnp.max_idle_count * fnp_meters.from_fnp.idle_count_updates;

		call ioa_$ioa_switch (iocbp, "FNP idle^39t^a%",
		     meter_format_$quotient (100 * fnp_meters.from_fnp.total_idle_count, (max_possible_idle_count),
		     "^4.1f"));
		call ioa_$ioa_switch (iocbp, "Idle at peak load^39t^a%",
		     meter_format_$quotient (100 * fnp_meters.from_fnp.min_idle_count, (fnp_meters.from_fnp.max_idle_count),
		     "^4.1f"));
	     end;

	     call ioa_$ioa_switch (iocbp, "^/^37tInput^52tOutput");
	     call ioa_$ioa_switch (iocbp, "Characters transmitted^30t^a^46t^a", meter_format_$picture (input_chars, 11),
		meter_format_$picture (output_chars, 11));
	     call ioa_$ioa_switch (iocbp, "Characters per second^30t^a^46t^a^/",
		meter_format_$picture (divide (1000000 * input_chars, time_up, 35, 0), 11),
		meter_format_$picture (divide (1000000 * output_chars, time_up, 35, 0), 11));
	end;

	if ^brief & fnp_meters_available
	then do;
	     call ioa_$ioa_switch (iocbp, "Abnormal DIA status ^35t^a",
		meter_format_$picture ((fnp_meters.from_fnp.abnormal_dia_status), 6));
	     call ioa_$ioa_switch (iocbp, "Memory EDAC errors^35t^a",
		meter_format_$picture (fnp_meters.from_fnp.memory_parity_errors, 6));
	end;

	if ^error
	then call ioa_$ioa_switch (iocbp, "^/Memory size^38t^3dK", divide (fnp_meters.fnp_mem_size, 1024, 17, 0));

	if fnp_meters_available
	then do;
	     if ^error
	     then do;
		pool = fnp_meters.from_fnp.buffer_pool;
		call ioa_$ioa_switch (iocbp, "Total available buffer pool^35t^a words",
		     meter_format_$picture (pool, 6));

		avg_space_available =
		     divide (fnp_meters.from_fnp.space_available_cum, fnp_meters.from_fnp.space_available_updates, 35,
		     0);
		call ioa_$ioa_switch (iocbp, "Avg. amount of free space^35t^a words",
		     meter_format_$picture (avg_space_available, 6));
		call ioa_$ioa_switch (iocbp, "Average % of buffer pool available^38t^a",
		     meter_format_$quotient (100 * avg_space_available, (pool), "^5.1f"));
		call ioa_$ioa_switch (iocbp, "Number of buffer allocations^32t^a",
		     meter_format_$picture (fnp_meters.from_fnp.buffer_allocations, 9));
		call ioa_$ioa_switch (iocbp, "Number of buffers preallocated^32t^a (^a% of allocations)",
		     meter_format_$picture (fnp_meters.from_fnp.buffers_preallocated, 9),
		     meter_format_$quotient (100 * fnp_meters.from_fnp.buffers_preallocated,
		     (fnp_meters.from_fnp.buffer_allocations), "^5.1f"));
		call ioa_$ioa_switch (iocbp, "Used preallocated buffer^32t^a",
		     meter_format_$picture (fnp_meters.from_fnp.used_preallocated_buffer, 9));
	     end;

	     call ioa_$ioa_switch (iocbp, "No preallocated buffer available^35t^a",
		meter_format_$picture (fnp_meters.from_fnp.no_preallocated_available, 6));
	     call ioa_$ioa_switch (iocbp, "Buffer allocation failures^35t^a",
		meter_format_$picture ((fnp_meters.from_fnp.space_alloc_failures), 6));
	end;

	if ^brief
	then do;
	     call ioa_$ioa_switch (iocbp, "Output restricted by space^35t^a",
		meter_format_$picture ((fnp_meters.fnp_space_restricted_output), 6));

	     if ^error
	     then do;
		if ^defined			/* if we've never gotten this info before */
		then do;
		     call ring_zero_peek_$get_max_length ("iom_data", iom_data_len, code);
		     call metering_util_$define_regions (mu_index, code, "tc_data", "processor_time", 2, "iom_data",
			0, iom_data_len);
		     if code = 0
		     then defined = "1"b;
		end;

		call metering_util_$fill_buffers (mu_index, meter_time, char_time, cur_ptrs, prev_ptrs, code);
		if code = 0
		then cpu_time = cur_ptrs (1) -> based_time;
		else cpu_time = 0;			/* an unlikely screwup -- metering_util_ would call sub_err_ */

/* now get the interupt traffic information for the IOM channel the FNP is on */

		n_interrupts, interrupt_time = 0;
		iom_data_ptr = cur_ptrs (2);
		iomx = iom_data.per_iom (fnp_meters.iom_number).chantab (fnp_meters.iom_chan_no);
		if iomx ^= 0			/* it had better not be */
		then do;
		     n_interrupts = iom_data.per_device (iomx).interrupts;
		     interrupt_time = iom_data.per_device (iomx).interrupt_time;
		end;

		call ioa_$ioa_switch (iocbp, "^/Number of interrupts from this FNP^38t^a",
		     meter_format_$picture (n_interrupts, 11));
		call ioa_$ioa_switch (iocbp, "Avg. time/interrupt (ms)^38t^a",
		     meter_format_$quotient (interrupt_time, 1000 * n_interrupts, "^6.1f"));
		call ioa_$ioa_switch (iocbp, "% of total CPU time^38t^a",
		     meter_format_$quotient (100 * interrupt_time, cpu_time, "^6.1f"));

		call ioa_$ioa_switch (iocbp, "^/Mailbox transactions:^/^3xInput data^36t^a",
		     meter_format_$picture (fnp_meters.input_data_transactions, 10));

		call ioa_$ioa_switch (iocbp, "^3xOutput data^36t^a",
		     meter_format_$picture (fnp_meters.output_data_transactions, 10));

		call ioa_$ioa_switch (iocbp, "^3xInput control^36t^a",
		     meter_format_$picture (fnp_meters.input_control_transactions, 10));

		call ioa_$ioa_switch (iocbp, "^3xOutput control^36t^a",
		     meter_format_$picture (fnp_meters.output_control_transactions, 10));

		call ioa_$ioa_switch (iocbp, "^60(-^)^/^3xTotal^36t^a",
		     meter_format_$picture (fnp_meters.input_data_transactions + fnp_meters.output_data_transactions
		     + fnp_meters.input_control_transactions + fnp_meters.output_control_transactions, 10));

		if fnp_meters_available
		then call ioa_$ioa_switch (iocbp, "^/Average inbound mailboxes in use^39t^a",
			meter_format_$quotient ((fnp_meters.from_fnp.input_mbx_in_use_cum),
			(fnp_meters.from_fnp.input_mbx_updates), "^4.1f"));

		call ioa_$ioa_switch (iocbp, "Average outbound mailboxes in use^39t^a",
		     meter_format_$quotient ((fnp_meters.output_mbx_in_use_cum), (fnp_meters.output_mbx_updates),
		     "^4.1f"));

		call ioa_$ioa_switch (iocbp, "Maximum outbound mailboxes in use^39t^2d",
		     fnp_meters.max_output_mbx_in_use);
	     end;

	     call ioa_$ioa_switch (iocbp, "No outbound mailbox available^36t^a",
		meter_format_$picture (fnp_meters.output_mbx_unavailable, 5));

	     call ioa_$ioa_switch (iocbp, "Input rejects^36t^a", meter_format_$picture ((fnp_meters.input_rejects), 5));
	     call ioa_$ioa_switch (iocbp, "% of input transactions rejected^38t^a",
		meter_format_$quotient (100 * fnp_meters.input_rejects, (fnp_meters.input_data_transactions), "^5.2f")
		);
	end;
	return;

display_subchan:
     entry (a_chan_name, a_iocbp, a_chan_meterp, a_flags, a_code);

/* entry to display meters kept by an FNP for one of its subchannels */

	call setup_display;
	if flags & DISPLAY_MPX_SINCE_BOOT
	then since_boot = "1"b;
	else since_boot = "0"b;

	call set_subchan_values;

	if synchronous
	then do;
	     if ^error
	     then do;
		call ioa_$ioa_switch (iocbp, "^/^34tinput^45toutput");
		call ioa_$ioa_switch (iocbp, "Messages transmitted^28t^a^40t^a",
		     meter_format_$picture (input_messages, 11), meter_format_$picture (output_messages, 11));
		call ioa_$ioa_switch (iocbp, "Minimum message length^34t^a^46t^a",
		     meter_format_$picture ((current_meterp -> fnp_sync_meters.input.min_length), 5),
		     meter_format_$picture ((current_meterp -> fnp_sync_meters.output.min_length), 5));
		call ioa_$ioa_switch (iocbp, "Maximum message length^32t^a^44t^a",
		     meter_format_$picture ((current_meterp -> fnp_sync_meters.input.max_length), 7),
		     meter_format_$picture ((current_meterp -> fnp_sync_meters.output.max_length), 7));
		call ioa_$ioa_switch (iocbp, "Average message length^32t^a^44t^a",
		     meter_format_$quotient ((input_length), (input_messages), "^9.2f"),
		     meter_format_$quotient ((output_length), (output_messages), "^9.2f"));
	     end;

	     if ^multiplexed
	     then do;
		call ioa_$ioa_switch (iocbp, "Invalid input messages^28t^a (^a% of messages)",
		     meter_format_$picture (counters (1), 11),
		     meter_format_$quotient (counters (1) * 100, (input_messages), "^.2f"));
		call ioa_$ioa_switch (iocbp, "Rejected output messages^28t^a (^a% of messages)",
		     meter_format_$picture (counters (2), 11),
		     meter_format_$quotient (counters (2) * 100, (output_messages), "^.2f"));
		call ioa_$ioa_switch (iocbp, "Timeouts^28t^a", meter_format_$picture (counters (3), 11));

		if ^brief
		then do;
		     if channel_meters.line_type = LINE_G115
		     then do;
			call ioa_$ioa_switch (iocbp, "Input busy^30t^a", meter_format_$picture (counters (4), 9));
			call ioa_$ioa_switch (iocbp, "Output retries exceeded limit^32t^a",
			     meter_format_$picture (counters (5), 7));
			call ioa_$ioa_switch (iocbp, "No SOH or ETX in message^32t^a",
			     meter_format_$picture (counters (6), 7));
			call ioa_$ioa_switch (iocbp, "Output message too long^32t^a",
			     meter_format_$picture (counters (7), 7));
			call ioa_$ioa_switch (iocbp, "Failure to build message^32t^a",
			     meter_format_$picture (counters (8), 7));
		     end;

		     else if channel_meters.line_type = LINE_BSC
		     then do;
			if ^error
			then do;
			     call ioa_$ioa_switch (iocbp, "WACKs sent^30t^a",
				meter_format_$picture (counters (4), 9));
			     call ioa_$ioa_switch (iocbp, "WACKs received^30t^a",
				meter_format_$picture (counters (5), 9));
			end;

			call ioa_$ioa_switch (iocbp, "Output retries exceeded limit^32t^a",
			     meter_format_$picture (counters (6), 7));
			call ioa_$ioa_switch (iocbp, "Unrecognized or missing response^30t^a",
			     meter_format_$picture (counters (7), 9));
			call ioa_$ioa_switch (iocbp, "Line bid failed^32t^a",
			     meter_format_$picture (counters (8), 7));
		     end;
		end;
	     end;
	end;

	if channel_meters.line_type = LINE_X25LAP
	then do;
	     call ioa_$ioa_switch (iocbp, "^/Frames dumped:^32t^a", meter_format_$picture (counters (3), 7));
	     call ioa_$ioa_switch (iocbp, "Frames retransmitted:^32t^a", meter_format_$picture (counters (1), 7));
	     call ioa_$ioa_switch (iocbp, "Receiver reset request:^32t^a", meter_format_$picture (counters (4), 7));
	     call ioa_$ioa_switch (iocbp, "Transmitter reset:^32t^a", meter_format_$picture (counters (2), 7));
	     call ioa_$ioa_switch (iocbp, "Frame check errors:^32t^a", meter_format_$picture (counters (5), 7));
	     call ioa_$ioa_switch (iocbp, "Frame aborts received:^32t^a", meter_format_$picture (counters (6), 7));
	end;

	if ^error & ^brief
	then do;
	     call ioa_$ioa_switch (iocbp, "^/Output overlaps in FNP^33t^a", meter_format_$picture (output_overlaps, 7));
	     call ioa_$ioa_switch (iocbp, "Average length of DIA request queue^36t^a",
		meter_format_$quotient ((dia_q_len), (dia_q_updates), "^4.1f"));
	end;

	if brief
	then return;				/* everything else is ^brief */
	else call ioa_$ioa_switch (iocbp, "");

	call ioa_$ioa_switch (iocbp, "Exhaust status^31t^a", meter_format_$picture (exhaust, 9));
	call ioa_$ioa_switch (iocbp, "Software transfer timing error^31t^a", meter_format_$picture (xte, 9));

	if ^synchronous
	then do;
	     if ^error
	     then call ioa_$ioa_switch (iocbp, "Pre-exhaust status^31t^a", meter_format_$picture (pre_exhaust, 9));

	     call ioa_$ioa_switch (iocbp, "Bell/quits^31t^a", meter_format_$picture (bell_quits, 9));
	     call ioa_$ioa_switch (iocbp, "Echo buffer overflows^31t^a", meter_format_$picture (echo_overflows, 9));
	end;

	call ioa_$ioa_switch (iocbp, "Parity errors^31t^a^/", meter_format_$picture (parity_errors, 9));

	if ^error
	then call ioa_$ioa_switch (iocbp, "Avg. number of pending status events^38t^a",
		meter_format_$quotient ((pending_status), (status_updates), "^4.1f"));
	call ioa_$ioa_switch (iocbp, "Software status queue overflows^34t^a", meter_format_$picture (ssqo, 6));
	call ioa_$ioa_switch (iocbp, "Hardware status queue overflows^34t^a", meter_format_$picture (hsqo, 6));
	call ioa_$ioa_switch (iocbp, "Input buffer allocation failures^34t^a",
	     meter_format_$picture (alloc_failures, 6));

	return;

subchan_summary:
     entry (a_chan_meterp, a_since_boot, a_summary_ptr, a_code);

/* entry to fill in values used by channel_comm_meters -summary */

	a_code = 0;
	chan_meterp = a_chan_meterp;
	summary_ptr = a_summary_ptr;
	since_boot = a_since_boot;
	call set_subchan_values;
	channel_summary.error_count = 0;

	if ^synchronous
	then do;
	     channel_summary.pre_exhaust = (pre_exhaust ^= 0);
	     channel_summary.bell_quit = (bell_quits ^= 0);
	     channel_summary.echo_overflow = (echo_overflows ^= 0);
	     channel_summary.error_count = exhaust + xte + bell_quits + echo_overflows;
	end;

	else do;
	     channel_summary.invalid_input = (counters (1) ^= 0);
	     channel_summary.output_re_xmit = (counters (2) ^= 0);
	     channel_summary.timeout = (counters (3) ^= 0);
	     if ^multiplexed
	     then channel_summary.error_count = sum (counters);
	end;

	channel_summary.exhaust = (exhaust ^= 0);
	channel_summary.xte = (xte ^= 0);
	channel_summary.parity = (parity_errors ^= 0);
	channel_summary.ssqo = (ssqo ^= 0);
	channel_summary.hsqo = (hsqo ^= 0);
	channel_summary.alloc_failure = (alloc_failures ^= 0);
	channel_summary.synchronous = synchronous;
	channel_summary.error_count = channel_summary.error_count + parity_errors + ssqo + hsqo + alloc_failures;

	return;

set_subchan_values:
     procedure;

/* internal procedure to set values for use by display_subchan and subchan_summary */

dcl  i fixed bin;

	multiplexed = (channel_meters.multiplexer_type ^= 0);
	fnp_chan_meterp = channel_meters.parent_meterp;
	synchronous = fnp_chan_meter_struc.synchronous;
	current_meterp = addr (fnp_chan_meter_struc.current_meters);

/* get total values from current meters */

	total_dia_q_len = current_meterp -> fnp_channel_meters.dia_request_q_len;
	total_dia_q_updates = current_meterp -> fnp_channel_meters.dia_rql_updates;
	total_pending_status = current_meterp -> fnp_channel_meters.pending_status;
	total_status_updates = current_meterp -> fnp_channel_meters.pending_status_updates;
	total_output_overlaps = current_meterp -> fnp_channel_meters.output_overlaps;
	total_parity_errors = current_meterp -> fnp_channel_meters.parity_errors;
	total_ssqo = current_meterp -> fnp_channel_meters.software_status_overflows;
	total_hsqo = current_meterp -> fnp_channel_meters.hardware_status_overflows;
	total_alloc_failures = current_meterp -> fnp_channel_meters.input_alloc_failures;
	total_exhaust = current_meterp -> fnp_channel_meters.exhaust;
	total_xte = current_meterp -> fnp_channel_meters.software_xte;

	if synchronous
	then do;
	     total_input_messages = current_meterp -> fnp_sync_meters.input.message_count;
	     total_input_length = current_meterp -> fnp_sync_meters.input.cum_length;
	     total_output_messages = current_meterp -> fnp_sync_meters.output.message_count;
	     total_output_length = current_meterp -> fnp_sync_meters.output.cum_length;
	     do i = 1 to hbound (current_meterp -> fnp_sync_meters.counters, 1);
		total_counters (i) = current_meterp -> fnp_sync_meters.counters (i);
	     end;
	end;

	else do;
	     total_pre_exhaust = current_meterp -> fnp_async_meters.pre_exhaust;
	     total_echo_overflows = current_meterp -> fnp_async_meters.echo_buf_overflow;
	     total_bell_quits = current_meterp -> fnp_async_meters.bell_quits;
	end;

	if since_boot
	then do;					/* totals are values to use */
	     dia_q_len = total_dia_q_len;
	     dia_q_updates = total_dia_q_updates;
	     pending_status = total_pending_status;
	     status_updates = total_status_updates;
	     output_overlaps = total_output_overlaps;
	     parity_errors = total_parity_errors;
	     ssqo = total_ssqo;
	     hsqo = total_hsqo;
	     alloc_failures = total_alloc_failures;
	     exhaust = total_exhaust;
	     xte = total_xte;

	     if synchronous
	     then do;
		input_messages = total_input_messages;
		input_length = total_input_length;
		output_messages = total_output_messages;
		output_length = total_output_length;
		do i = 1 to hbound (current_meterp -> fnp_sync_meters.counters, 1);
		     counters (i) = total_counters (i);
		end;
	     end;

	     else do;
		pre_exhaust = total_pre_exhaust;
		echo_overflows = total_echo_overflows;
		bell_quits = total_bell_quits;
	     end;
	end;

	else do;					/* have to subtract saved values */
	     saved_meterp = addr (fnp_chan_meter_struc.saved_meters);
	     dia_q_len = total_dia_q_len - saved_meterp -> fnp_channel_meters.dia_request_q_len;
	     dia_q_updates = total_dia_q_updates - saved_meterp -> fnp_channel_meters.dia_rql_updates;
	     pending_status = total_pending_status - saved_meterp -> fnp_channel_meters.pending_status;
	     status_updates = total_status_updates - saved_meterp -> fnp_channel_meters.pending_status_updates;
	     output_overlaps = total_output_overlaps - saved_meterp -> fnp_channel_meters.output_overlaps;
	     parity_errors = total_parity_errors - saved_meterp -> fnp_channel_meters.parity_errors;
	     ssqo = total_ssqo - saved_meterp -> fnp_channel_meters.software_status_overflows;
	     hsqo = total_hsqo - saved_meterp -> fnp_channel_meters.hardware_status_overflows;
	     alloc_failures = total_alloc_failures - saved_meterp -> fnp_channel_meters.input_alloc_failures;
	     exhaust = total_exhaust - saved_meterp -> fnp_channel_meters.exhaust;
	     xte = total_xte - saved_meterp -> fnp_channel_meters.software_xte;

	     if synchronous
	     then do;
		input_messages = total_input_messages - saved_meterp -> fnp_sync_meters.input.message_count;
		input_length = total_input_length - saved_meterp -> fnp_sync_meters.input.cum_length;
		output_messages = total_output_messages - saved_meterp -> fnp_sync_meters.output.message_count;
		output_length = total_output_length - saved_meterp -> fnp_sync_meters.output.cum_length;
		do i = 1 to hbound (saved_meterp -> fnp_sync_meters.counters, 1);
		     counters (i) = total_counters (i) - saved_meterp -> fnp_sync_meters.counters (i);
		end;
	     end;

	     else do;
		pre_exhaust = total_pre_exhaust - saved_meterp -> fnp_async_meters.pre_exhaust;
		echo_overflows = total_echo_overflows - saved_meterp -> fnp_async_meters.echo_buf_overflow;
		bell_quits = total_bell_quits - saved_meterp -> fnp_async_meters.bell_quits;
	     end;
	end;

	return;
     end set_subchan_values;

setup_display:
     procedure;

/* internal procedure to set up local variables for display entries */

	iocbp = a_iocbp;
	if iocbp = null ()
	then iocbp = iox_$user_output;

	chan_meterp = a_chan_meterp;
	flags = a_flags;
	a_code = 0;

	if flags & DISPLAY_MPX_SUMMARY		/* we don't handle this */
	then return;

	if flags & DISPLAY_MPX_BRIEF
	then brief = "1"b;
	else brief = "0"b;

	if flags & DISPLAY_MPX_ERROR
	then error = "1"b;
	else error = "0"b;
	return;

     end setup_display;

%include fnp_meters;
%page;
%include fnp_channel_meters;
%page;
%include channel_meters;
%page;
%include comm_meters_disp_flags;
%page;
%include line_types;
%page;
%include iom_data;
%page;
%include channel_summary;
     end mcs_meters_;
