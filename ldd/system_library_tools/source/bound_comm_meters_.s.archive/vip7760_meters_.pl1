/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
/* format: style4,delnl,insnl,^ifthendo */
vip7760_meters_:
     proc;

/* This subroutine contains entries for allocating, freeing, and displaying
   meters for a polled VIP multiplexer and its subchannels.
*/

/* Written June 1981 by Robert Coren */

/* PARAMETERS */

dcl  a_area_ptr ptr;
dcl  a_meterp ptr;
dcl  a_code fixed bin (35);
dcl  a_chan_name char (*);
dcl  a_iocbp ptr;
dcl  a_chan_meterp ptr;
dcl  a_flags bit (36) aligned;
dcl  a_since_boot bit (1);
dcl  a_summary_ptr ptr;


/* AUTOMATIC */

dcl  areap ptr;
dcl  code fixed bin (35);
dcl  iocbp ptr;
dcl  flags bit (36) aligned;
dcl  brief bit (1);
dcl  error bit (1);
dcl  since_boot bit (1);
dcl  printer bit (1);
dcl  parent_fnp bit (1);
dcl  pvip_meterp ptr;
dcl  current_meterp ptr;
dcl  saved_meterp ptr;
dcl  current_fnp_meterp ptr;
dcl  saved_fnp_meterp ptr;

dcl  input_naks fixed bin (35);
dcl  output_naks fixed bin (35);
dcl  timeouts fixed bin (35);
dcl  timeout_limit fixed bin (35);
dcl  inc_frame fixed bin (35);
dcl  input_frames_lost fixed bin (35);
dcl  output_frames_lost fixed bin (35);
dcl  bad_output_frames fixed bin (35);
dcl  output_timeouts fixed bin (35);
dcl  printer_naks fixed bin (35);
dcl  discarded_printer_frames fixed bin (35);
dcl  display_pgofs fixed bin (35);
dcl  pgof_limit_reached fixed bin (35);

dcl  total_input_naks fixed bin (35);
dcl  total_output_naks fixed bin (35);
dcl  total_timeouts fixed bin (35);
dcl  total_timeout_limit fixed bin (35);
dcl  total_inc_frame fixed bin (35);
dcl  total_input_frames_lost fixed bin (35);
dcl  total_output_frames_lost fixed bin (35);
dcl  total_bad_output_frames fixed bin (35);
dcl  total_output_timeouts fixed bin (35);
dcl  total_printer_naks fixed bin (35);
dcl  total_discarded_printer_frames fixed bin (35);
dcl  total_display_pgofs fixed bin (35);
dcl  total_pgof_limit_reached fixed bin (35);


/* BASED */

dcl  m_area area (100) based (areap);


/* EXTERNAL STATIC */

dcl  error_table_$noalloc external static fixed bin (35);
dcl  iox_$user_output external static ptr;


/* ENTRIES */

dcl  ioa_$ioa_switch entry options (variable);
dcl  meter_format_$picture entry (fixed bin (35), fixed bin) returns (char (15) varying);


/* CONDITIONS & BUILTINS */

dcl  area condition;
dcl  (addr, null) builtin;

allocate_mpx:
     entry (a_area_ptr, a_meterp, a_code);

	areap = a_area_ptr;
	a_code = 0;

	on area
	     begin;
		a_code = error_table_$noalloc;
		go to exit;
	     end;

	allocate pvip_mpx_meter_struc in (m_area) set (a_meterp);
	a_meterp -> pvip_mpx_meter_struc.version = PVIP_MPX_METERS_VERSION_1;
exit:
	return;


free_subchan:
     entry (a_meterp, a_code);

	free a_meterp -> pvip_subchan_meter_struc;
	a_code = 0;
	return;

allocate_subchan:
     entry (a_area_ptr, a_meterp, a_code);

	areap = a_area_ptr;
	a_code = 0;

	on area
	     begin;
		a_code = error_table_$noalloc;
		go to exit;
	     end;

	allocate pvip_subchan_meter_struc in (m_area) set (a_meterp);
	a_meterp -> pvip_subchan_meter_struc.version = PVIP_SUBCHAN_METERS_VERSION_1;

	return;


free_mpx:
     entry (a_meterp, a_code);

	free a_meterp -> pvip_mpx_meter_struc;
	a_code = 0;
	return;

display_mpx:
     entry (a_chan_name, a_iocbp, a_chan_meterp, a_flags, a_code);

	iocbp = a_iocbp;
	if iocbp = null ()
	then iocbp = iox_$user_output;

	chan_meterp = a_chan_meterp;
	flags = a_flags;
	a_code = 0;

	if flags & DISPLAY_MPX_SUMMARY		/* we don't handle this */
	then return;

	if flags & DISPLAY_MPX_BRIEF
	then brief = "1"b;
	else brief = "0"b;

	if flags & DISPLAY_MPX_ERROR
	then error = "1"b;
	if flags & DISPLAY_MPX_SINCE_BOOT
	then since_boot = "1"b;
	else since_boot = "0"b;

	if brief
	then return;				/* no "brief" meters from this multiplexer */

	call set_mpx_values;

	if parent_fnp
	then do;
	     call ioa_$ioa_switch (iocbp, "Invalid input messages^28t^a", meter_format_$picture (input_naks, 11));
	     call ioa_$ioa_switch (iocbp, "NAK for output messages^28t^a", meter_format_$picture (output_naks, 11));
	     if ^error
	     then do;
		call ioa_$ioa_switch (iocbp, "Response timeouts^28t^a", meter_format_$picture (timeouts, 11));
		call ioa_$ioa_switch (iocbp, "Incomplete frame from host^28t^a",
		     meter_format_$picture (inc_frame, 11));
	     end;
	end;

	call ioa_$ioa_switch (iocbp, "No response after 3 tries^30t^a", meter_format_$picture (timeout_limit, 9));
	call ioa_$ioa_switch (iocbp, "Lost input frames^30t^a", meter_format_$picture (input_frames_lost, 9));
	call ioa_$ioa_switch (iocbp, "Lost output frames^30t^a", meter_format_$picture (output_frames_lost, 9));
	call ioa_$ioa_switch (iocbp, "Bad output frame format^28t^a", meter_format_$picture (bad_output_frames, 7));
	call ioa_$ioa_switch (iocbp, "Output frame not completed in time^28t^a",
	     meter_format_$picture (output_timeouts, 7));

	return;

display_subchan:
     entry (a_chan_name, a_iocbp, a_chan_meterp, a_flags, a_code);

	iocbp = a_iocbp;
	if iocbp = null ()
	then iocbp = iox_$user_output;

	chan_meterp = a_chan_meterp;
	flags = a_flags;
	a_code = 0;

	if flags & DISPLAY_MPX_SUMMARY		/* we don't handle this */
	then return;

	if flags & DISPLAY_MPX_BRIEF
	then brief = "1"b;
	else brief = "0"b;

	if flags & DISPLAY_MPX_ERROR
	then error = "1"b;
	if flags & DISPLAY_MPX_SINCE_BOOT
	then since_boot = "1"b;
	else since_boot = "0"b;

	if brief
	then return;				/* no "brief" meters from this multiplexer */

	call set_subchan_values;

	if printer
	then do;
	     call ioa_$ioa_switch (iocbp, "NAK from printer^28t^a", meter_format_$picture (printer_naks, 11));
	     call ioa_$ioa_switch (iocbp, "Discarded printer frames^28t^a",
		meter_format_$picture (discarded_printer_frames, 11));
	end;

	else do;
	     if ^error
	     then call ioa_$ioa_switch (iocbp, "Page overflows^28t^a", meter_format_$picture (display_pgofs, 11));
	     call ioa_$ioa_switch (iocbp, "Exceeded page overflow limit^32t^a",
		meter_format_$picture (pgof_limit_reached, 7));
	end;

	return;

mpx_summary:
     entry (a_chan_meterp, a_since_boot, a_summary_ptr, a_code);

/* entry to fill in values used by channel_comm_meters -summary */

	a_code = 0;
	chan_meterp = a_chan_meterp;
	summary_ptr = a_summary_ptr;
	since_boot = a_since_boot;
	call set_mpx_values;

	channel_summary.error_count = timeout_limit;
	if parent_fnp
	then channel_summary.error_count = channel_summary.error_count + input_naks + output_naks;

	return;

subchan_summary:
     entry (a_chan_meterp, a_since_boot, a_summary_ptr, a_code);

/* entry to fill in values used by channel_comm_meters -summary */

	a_code = 0;
	chan_meterp = a_chan_meterp;
	summary_ptr = a_summary_ptr;
	since_boot = a_since_boot;

	call set_subchan_values;
	if printer
	then channel_summary.error_count = printer_naks;
	else channel_summary.error_count = 0;
	return;

set_mpx_values:
     procedure;

/* internal procedure to set metering values (either cumulative or since load)
   for multiplexer channel */

	pvip_meterp = channel_meters.mpx_specific_meterp;
	if channel_meters.parent_type = MCS_MPX		/* if parent is an FNP */
	then do;					/* then we know something about the next level of metering */
	     fnp_chan_meterp = channel_meters.parent_meterp;
	     current_fnp_meterp = addr (fnp_chan_meter_struc.current_meters);
	     saved_fnp_meterp = addr (fnp_chan_meter_struc.saved_meters);
	     parent_fnp = "1"b;
	end;

	else parent_fnp = "0"b;

	current_meterp = addr (pvip_meterp -> pvip_mpx_meter_struc.current_meters);
	saved_meterp = addr (pvip_meterp -> pvip_mpx_meter_struc.saved_meters);

	total_timeout_limit = current_meterp -> pvip_mpx_meters.input_timeouts;
	total_input_frames_lost = current_meterp -> pvip_mpx_meters.input_frames_lost;
	total_output_frames_lost = current_meterp -> pvip_mpx_meters.output_frames_lost;
	total_bad_output_frames = current_meterp -> pvip_mpx_meters.bad_output_frames;
	total_output_timeouts = current_meterp -> pvip_mpx_meters.output_timeouts;

	if parent_fnp
	then do;
	     total_input_naks = current_fnp_meterp -> fnp_sync_meters.counters (1);
	     total_output_naks = current_fnp_meterp -> fnp_sync_meters.counters (2);
	     total_timeouts = current_fnp_meterp -> fnp_sync_meters.counters (3);
	     total_inc_frame = current_fnp_meterp -> fnp_sync_meters.counters (4);
	end;

	if since_boot
	then do;
	     timeout_limit = total_timeout_limit;
	     input_frames_lost = total_input_frames_lost;
	     output_frames_lost = total_output_frames_lost;
	     bad_output_frames = total_bad_output_frames;
	     output_timeouts = total_output_timeouts;

	     if parent_fnp
	     then do;
		input_naks = total_input_naks;
		output_naks = total_output_naks;
		timeouts = total_timeouts;
		inc_frame = total_inc_frame;
	     end;
	end;

	else do;
	     timeout_limit = total_timeout_limit - saved_meterp -> pvip_mpx_meters.input_timeouts;
	     input_frames_lost = total_input_frames_lost - saved_meterp -> pvip_mpx_meters.input_frames_lost;
	     output_frames_lost = total_output_frames_lost - saved_meterp -> pvip_mpx_meters.output_frames_lost;
	     bad_output_frames = total_bad_output_frames - saved_meterp -> pvip_mpx_meters.bad_output_frames;
	     output_timeouts = total_output_timeouts - saved_meterp -> pvip_mpx_meters.output_timeouts;

	     if parent_fnp
	     then do;
		input_naks = total_input_naks - saved_fnp_meterp -> fnp_sync_meters.counters (1);
		output_naks = total_output_naks - saved_fnp_meterp -> fnp_sync_meters.counters (2);
		timeouts = total_timeouts - saved_fnp_meterp -> fnp_sync_meters.counters (3);
		inc_frame = total_inc_frame - saved_fnp_meterp -> fnp_sync_meters.counters (4);
	     end;
	end;
     end set_mpx_values;

set_subchan_values:
     procedure;

/* internal procedure to set metering values (either cumulative or since dialup)
   for subchannel */

	pvip_meterp = channel_meters.parent_meterp;
	current_meterp = addr (pvip_meterp -> pvip_subchan_meter_struc.current_meters);
	saved_meterp = addr (pvip_meterp -> pvip_subchan_meter_struc.saved_meters);
	printer = pvip_meterp -> pvip_subchan_meter_struc.printer;

	if printer
	then do;
	     total_printer_naks = current_meterp -> pvip_subchan_meters.printer_naks;
	     total_discarded_printer_frames = current_meterp -> pvip_subchan_meters.discarded_printer_frame;
	end;

	else do;
	     total_display_pgofs = current_meterp -> pvip_subchan_meters.display_pgofs;
	     total_pgof_limit_reached = current_meterp -> pvip_subchan_meters.pgof_limit_reached;
	end;

	if since_boot
	then if printer
	     then do;
		printer_naks = total_printer_naks;
		discarded_printer_frames = total_discarded_printer_frames;
	     end;

	     else do;
		display_pgofs = total_display_pgofs;
		pgof_limit_reached = total_pgof_limit_reached;
	     end;

	else if printer
	then do;
	     printer_naks = total_printer_naks - saved_meterp -> pvip_subchan_meters.printer_naks;
	     discarded_printer_frames = total_discarded_printer_frames - saved_meterp -> pvip_subchan_meters.discarded_printer_frame;
	end;

	else do;
	     display_pgofs = total_display_pgofs - saved_meterp -> pvip_subchan_meters.display_pgofs;
	     pgof_limit_reached = total_pgof_limit_reached - saved_meterp -> pvip_subchan_meters.pgof_limit_reached;
	end;
     end set_subchan_values;

%include channel_meters;
%page;
%include multiplexer_types;
%page;
%include polled_vip_mpx_meters;
%page;
%include pvip_subchan_meters;
%page;
%include fnp_channel_meters;
%page;
%include comm_meters_disp_flags;
%page;
%include channel_summary;
     end vip7760_meters_;
