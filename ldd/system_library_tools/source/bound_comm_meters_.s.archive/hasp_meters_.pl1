/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* Interpret and otherwise manipulate the meters maintained by the HASP multiplexer for the major channel and its
   sub-channels */

/* Created:  July 1981 by G. Palter */


hasp_meters_:
     procedure ();

	return;				/* not an entrypoint */


/* Parameters */

dcl  P_code fixed binary (35) parameter;

dcl  P_meters_ptr pointer parameter;			/* allocate_*, free_*: -> the structure allocated/freed */

dcl  P_area_ptr pointer parameter;			/* allocate_*: -> the area to use */

dcl  P_channel_name character (*) parameter;		/* display_*, *_summary: the channel in question */
dcl  P_channel_meters_ptr pointer parameter;		/* display_*, *_summary: -> the metering data for the channel */

dcl  P_iocb_ptr pointer parameter;			/* display_*: the I/O switch to write results */
dcl  P_flags bit (36) aligned parameter;		/* display_*: controls format/content of the display */

dcl  P_since_bootload bit (1) parameter;		/* *_summary: ON => give results since bootload */
dcl  P_summary_ptr pointer parameter;			/* *_summary: -> summary of channels meters */


/* Local copies of parameters */

dcl  the_area area based (the_area_ptr);
dcl  the_area_ptr pointer;

dcl  output_switch pointer;

dcl  metering_flags bit (36) aligned;

dcl  since_bootload bit (1) aligned;


/* Remaining declarations */

dcl 1 mpx aligned,					/* meters for a HASP multiplexer */
      2 metering_time fixed binary (71),		/* amount of time metered */
      2 idle_interval fixed binary,			/* # of seconds for each idle loop */
      2 fnp_meters,					/* meters extracted from the FNP */
        3 input_naks fixed binary (35),
        3 output_naks fixed binary (35),
        3 input_timeouts fixed binary (35),
        3 output_timeouts fixed binary (35),
        3 idle_counter fixed binary (35),		/* # of times through the idle loop */
        3 dia_busy_counter fixed binary (35),		/* # of NAKs of input messages because DIA hadn't ... */
      2 meters like hasp_mpx_meters;			/* ... finished sending the prvious message to Multics */

dcl 1 subchannel aligned,				/* meters for a HASP multiplexer sub-channel */
      2 input bit (1) aligned,			/* ON => sub-channel is an input (or input/output) device */
      2 output bit (1) aligned,			/* ON => sub-channel is an output (or input/output) device */
      2 meters like hasp_subchannel_meters;

dcl  parent_is_fnp bit (1) aligned;
dcl  errors_only bit (1) aligned;

dcl  ONE_SECOND fixed binary (71) static options (constant) initial (1000000);

dcl  error_table_$noalloc fixed binary (35) external;

dcl  iox_$user_output pointer external;

dcl  ioa_$ioa_switch entry () options (variable);
dcl  meter_format_$picture entry (fixed binary (35), fixed binary) returns (character (15) varying);
dcl  meter_format_$quotient entry (fixed binary (71), fixed binary (71), character (*)) returns (character (12) varying);

dcl  area condition;

dcl (addr, max, null) builtin;

/*  */

/* Allocate the metering structure for a HASP multiplexer channel */

allocate_mpx:
     entry (P_area_ptr, P_meters_ptr, P_code);

	the_area_ptr = P_area_ptr;
	P_code = 0;				/* assume success */

	on condition (area)
	     begin;				/* in case there's no room in the area */
		P_code = error_table_$noalloc;
		go to RETURN_FROM_ALLOCATE_MPX;
	     end;

	allocate hasp_mpx_meters_data in (the_area) set (hmmd_ptr);
	hasp_mpx_meters_data.version = HASP_MPX_METERS_DATA_VERSION_1;

	P_meters_ptr = hmmd_ptr;

RETURN_FROM_ALLOCATE_MPX:
	return;



/* Free the above structure */

free_mpx:
     entry (P_meters_ptr, P_code);

	free P_meters_ptr -> hasp_mpx_meters_data;

	P_meters_ptr = null ();			/* be nice */
	P_code = 0;				/* always works */

	return;

/*  */

/* Allocate the metering structure for a HASP multiplexer channel */

allocate_subchan:
     entry (P_area_ptr, P_meters_ptr, P_code);

	the_area_ptr = P_area_ptr;
	P_code = 0;				/* assume success */

	on condition (area)
	     begin;				/* in case there's no room in the area */
		P_code = error_table_$noalloc;
		go to RETURN_FROM_ALLOCATE_SUBCHAN;
	     end;

	allocate hasp_subchannel_meters_data in (the_area) set (hsmd_ptr);
	hasp_subchannel_meters_data.version = HASP_SUBCHANNEL_METERS_DATA_VERSION_1;

	P_meters_ptr = hsmd_ptr;

RETURN_FROM_ALLOCATE_SUBCHAN:
	return;



/* Free the above structure */

free_subchan:
     entry (P_meters_ptr, P_code);

	free P_meters_ptr -> hasp_subchannel_meters_data;

	P_meters_ptr = null ();			/* be nice */
	P_code = 0;				/* always works */

	return;

/*  */

/* Display the meters accumulated for a HASP multiplexer channel */

display_mpx:
     entry (P_channel_name, P_iocb_ptr, P_channel_meters_ptr, P_flags, P_code);

	if P_iocb_ptr ^= null () then			/* check for default */
	     output_switch = P_iocb_ptr;
	else output_switch = iox_$user_output;

	chan_meterp = P_channel_meters_ptr;
	metering_flags = P_flags;

	P_code = 0;				/* always succeeds */

	if metering_flags & DISPLAY_MPX_SUMMARY then	/* not handled here: let caller do it */
	     return;

	if metering_flags & DISPLAY_MPX_BRIEF then	/* no brief meters for this multiplexer yet */
	     return;

	errors_only = ((metering_flags & DISPLAY_MPX_ERROR) = DISPLAY_MPX_ERROR);

	since_bootload = ((metering_flags & DISPLAY_MPX_SINCE_BOOT) = DISPLAY_MPX_SINCE_BOOT);

	call get_multiplexer_meters ();


	if parent_is_fnp & ^errors_only then		/* make an estimate of how much the line is idling ... */
	     call ioa_$ioa_switch (output_switch, "Idle time^21t^a%",
			       meter_format_$quotient ((100 * ONE_SECOND * mpx.idle_interval * mpx.idle_counter),
						 mpx.metering_time, "^6.2f"));

	call ioa_$ioa_switch (output_switch, "^34tInput^52tOutput");

	if parent_is_fnp then do;			/* can report about NAKs and timeouts */
	     call ioa_$ioa_switch (output_switch, "Blocks NAKed^28t^a^8x^a", meter_format_$picture (mpx.input_naks, 11),
			       meter_format_$picture (mpx.output_naks, 11));
	     call ioa_$ioa_switch (output_switch, "Transmission timeouts^28t^a^8x^a",
			       meter_format_$picture (mpx.input_timeouts, 11),
			       meter_format_$picture (mpx.output_timeouts, 11));
	     if ^errors_only then			/* tell user about DIA being busy ... */
		call ioa_$ioa_switch (output_switch, "NAKs for DIA backlog^28t^a^55tN/A",
				  meter_format_$picture (mpx.dia_busy_counter, 11));
	end;


	if ^errors_only then do;			/* remaining meters are all non-error meters */

	     call ioa_$ioa_switch (output_switch, "All transmission suspended^28t^a^8x^a",
			       meter_format_$picture (mpx.n_local_wab_set, 11),
			       meter_format_$picture (mpx.n_foreign_wab_set, 11));
	     call ioa_$ioa_switch (output_switch, "Blocks transmitted^28t^a^8x^a",
			       meter_format_$picture (mpx.n_input_blocks, 11),
			       meter_format_$picture (mpx.n_output_blocks, 11));
	     call ioa_$ioa_switch (output_switch, "Records transmitted^28t^a^8x^a",
			       meter_format_$picture (mpx.n_input_records, 11),
			       meter_format_$picture (mpx.n_output_records, 11));
	     call ioa_$ioa_switch (output_switch, "^3xAverage records per block^31t^a^8x^a",
			       meter_format_$quotient ((mpx.n_input_records), (mpx.n_input_blocks), "^11.2f"),
			       meter_format_$quotient ((mpx.n_output_records), (mpx.n_output_blocks), "^11.2f"));

	     call ioa_$ioa_switch (output_switch, "");

	     call ioa_$ioa_switch (output_switch, "Duplicate input blocks^28t^a",
			       meter_format_$picture (mpx.n_duplicate_input_blocks, 11));

	     call ioa_$ioa_switch (output_switch, "Output reprocessing^28t^a",
			       meter_format_$picture (mpx.n_wraparounds, 11));
	     call ioa_$ioa_switch (output_switch, "^3xBlocks reprocessed^28t^a",
			       meter_format_$picture (mpx.n_wraparound_blocks, 11));
	end;

	return;

/*  */

/* Provide the values for a HASP multiplxer channel used by channel_comm_meters -summary */

mpx_summary:
     entry (P_channel_meters_ptr, P_since_bootload, P_summary_ptr, P_code);

	chan_meterp = P_channel_meters_ptr;
	since_bootload = P_since_bootload;
	summary_ptr = P_summary_ptr;

	P_code = 0;				/* always succeeds */

	call get_multiplexer_meters ();

	if parent_is_fnp then			/* all errors are detected by the FNP */
	     channel_summary.error_count = mpx.input_naks + mpx.output_naks + mpx.input_timeouts + mpx.output_timeouts;
	else channel_summary.error_count = 0;

	return;

/*  */

/* Display the meters accumulated for a HASP multiplexer sub-channel */

display_subchan:
     entry (P_channel_name, P_iocb_ptr, P_channel_meters_ptr, P_flags, P_code);
	if P_iocb_ptr ^= null () then			/* check for default */
	     output_switch = P_iocb_ptr;
	else output_switch = iox_$user_output;

	chan_meterp = P_channel_meters_ptr;
	metering_flags = P_flags;

	P_code = 0;				/* always succeeds */

	if metering_flags & DISPLAY_MPX_SUMMARY then	/* not handled here: let caller do it */
	     return;

	if metering_flags & DISPLAY_MPX_BRIEF then	/* no brief meters for this multiplexer yet */
	     return;

	if metering_flags & DISPLAY_MPX_ERROR then	/* no error data at the sub-channel level */
	     return;

	since_bootload = ((metering_flags & DISPLAY_MPX_SINCE_BOOT) = DISPLAY_MPX_SINCE_BOOT);

	call get_subchannel_meters ();

	call ioa_$ioa_switch (output_switch, "^/^34tInput^52tOutput");

	call ioa_$ioa_switch (output_switch, "Transmission suspended^28t^[^a^;^36tN/A^s^]^8x^[^a^;^55tN/A^s^]",
			  subchannel.input, meter_format_$picture (subchannel.device_n_local_wab_set, 11),
			  subchannel.output, meter_format_$picture (subchannel.device_n_foreign_wab_set, 11));

	call ioa_$ioa_switch (output_switch, "Files transmitted^28t^[^a^;^36tN/A^s^]^8x^[^a^;^55tN/A^s^]",
			  subchannel.input, meter_format_$picture (subchannel.device_n_input_eof_records, 11),
			  subchannel.output, meter_format_$picture (subchannel.device_n_output_eof_records, 11));

	call ioa_$ioa_switch (output_switch, "Records transmitted^28t^[^a^;^36tN/A^s^]^8x^[^a^;^55tN/A^s^]",
			  subchannel.input, meter_format_$picture (subchannel.device_n_input_records, 11),
			  subchannel.output, meter_format_$picture (subchannel.device_n_output_records, 11));

	call ioa_$ioa_switch (output_switch, "^3xAverage records per file^31t^[^a^;^36tN/A^3x^s^]^8x^[^a^;^55tN/A^s^]",
			  subchannel.input, meter_format_$quotient ((subchannel.device_n_input_records),
							    max (1, subchannel.device_n_input_eof_records),
							    "^11.2f"),
			  subchannel.output, meter_format_$quotient ((subchannel.device_n_output_records),
							     max (1, subchannel.device_n_output_eof_records),
							     "^11.2f"));

	return;

/*  */

/* Provide the values for a HASP multiplxer sub-channel used by channel_comm_meters -summary */

subchan_summary:
     entry (P_channel_meters_ptr, P_since_bootload, P_summary_ptr, P_code);

	summary_ptr = P_summary_ptr;

	channel_summary.error_count = 0;		/* no errors occur at the sub-channel level */

	P_code = 0;				/* always succeeds */

	return;

/*  */

/* Extract the meters for the multiplexer channel */

get_multiplexer_meters:
	procedure ();

dcl 1 total_fnp_meters aligned like mpx.fnp_meters;
dcl 1 saved_fnp_meters aligned like mpx.fnp_meters;

dcl 1 real_total_fnp_meters aligned based (addr (fnp_chan_meter_struc.current_meters)) like fnp_sync_meters;
dcl 1 real_saved_fnp_meters aligned based (addr (fnp_chan_meter_struc.saved_meters)) like fnp_sync_meters;

	     hmmd_ptr = channel_meters.mpx_specific_meterp;

	     if (channel_meters.parent_type = MCS_MPX)
	     then do;				/* a real HASP channel */
		parent_is_fnp = "1"b;
		fnp_chan_meterp = channel_meters.parent_meterp;
		total_fnp_meters.input_naks = real_total_fnp_meters.counters (1);
		total_fnp_meters.input_timeouts = real_total_fnp_meters.counters (3);
		total_fnp_meters.output_naks = real_total_fnp_meters.counters (2);
		total_fnp_meters.output_timeouts = real_total_fnp_meters.counters (4);
		total_fnp_meters.idle_counter = real_total_fnp_meters.counters (5);
		total_fnp_meters.dia_busy_counter = real_total_fnp_meters.counters (6);
		saved_fnp_meters.input_naks = real_saved_fnp_meters.counters (1);
		saved_fnp_meters.input_timeouts = real_saved_fnp_meters.counters (3);
		saved_fnp_meters.output_naks = real_saved_fnp_meters.counters (2);
		saved_fnp_meters.output_timeouts = real_saved_fnp_meters.counters (4);
		saved_fnp_meters.idle_counter = real_saved_fnp_meters.counters (5);
		saved_fnp_meters.dia_busy_counter = real_saved_fnp_meters.counters (6);
	     end;
	     else do;
		parent_is_fnp = "0"b;
		total_fnp_meters, saved_fnp_meters = 0;
	     end;

	     mpx.idle_interval = hasp_mpx_meters_data.idle_interval;

	     if hasp_mpx_meters_data.time_meters_copied = 0 then	/* kludge: I'm not sure when copies happen */
		hasp_mpx_meters_data.time_meters_copied = hasp_mpx_meters_data.time_mpx_booted;

	     if since_bootload
	     then do;				/* report data since the multiplexer came up */
		mpx.metering_time = clock () - hasp_mpx_meters_data.time_mpx_booted;
		mpx.fnp_meters = total_fnp_meters;
		mpx.meters = hasp_mpx_meters_data.current_meters;
	     end;

	     else do;				/* since last dialup */
		mpx.metering_time = clock () - hasp_mpx_meters_data.time_meters_copied;
		mpx.fnp_meters = total_fnp_meters - saved_fnp_meters;
		mpx.meters = hasp_mpx_meters_data.current_meters - hasp_mpx_meters_data.saved_meters;
	     end;

	     return;

	end get_multiplexer_meters;

/*  */

/* Extract the meters for a sub-channel of the multiplexer */

get_subchannel_meters:
	procedure ();

	     hsmd_ptr = channel_meters.parent_meterp;

	     subchannel.input = hasp_subchannel_meters_data.report_input_meters;
	     subchannel.output = hasp_subchannel_meters_data.report_output_meters;

	     if since_bootload then			/* since the multiplexer came up, please */
		subchannel.meters = hasp_subchannel_meters_data.current_meters;
	     else subchannel.meters = hasp_subchannel_meters_data.current_meters - hasp_subchannel_meters_data.saved_meters;

	     return;

	end get_subchannel_meters;

/*  */

%include channel_meters;

%include comm_meters_disp_flags;
%page;
%include multiplexer_types;
%page;
%include hasp_mpx_meters;
%page;
%include hasp_subchannel_meters;
%page;
%include fnp_channel_meters;
%page;
%include channel_summary;

     end hasp_meters_;
