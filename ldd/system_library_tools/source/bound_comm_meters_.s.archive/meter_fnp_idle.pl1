/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(2016-01-15,Swenson), approve(2016-01-15,MCR10003):
     Fix to support 4-character time zone abbreviations.
                                                   END HISTORY COMMENTS */

/* format: style4,delnl,insnl,^ifthendo */
meter_fnp_idle:
     procedure;

/* This command causes the process to wake up at specified intervals and record the specified FNP's idle time
   for the most recent interval. This data is stored away in a segment where the display_fnp_idle
   command can find it. If the FNP crashes and reloads while the command is runninmg, a new data
   segment is started.
*/

/* Coded January 1982 by Robert Coren */
/* Modified March 1982 by Robert Coren to correct time slippage. */

dcl  fnp_name char (1);
dcl  minutes fixed bin;
dcl  stop bit (1);
dcl  non_stop bit (1);
dcl  dirname char (168);
dcl  entryname char (32);
dcl  code fixed bin (35);
dcl  nargs fixed bin;
dcl  iarg fixed bin;
dcl  infop pointer;
dcl  fnp_no fixed bin;
dcl  event_message fixed bin (71);
dcl  comm_meters_chan_name (1) char (1);
dcl  areap pointer;
dcl  meter_time fixed bin (71);
dcl  next_entry fixed bin;
dcl  idle_count fixed bin (35);
dcl  idle_updates fixed bin (35);
dcl  delta_idle fixed bin (35);

dcl  argp pointer;
dcl  argl fixed bin (21);
dcl  arg char (argl) based (argp);

dcl  cu_$arg_count entry (fixed bin, fixed bin (35));
dcl  com_err_ entry () options (variable);
dcl  com_err_$suppress_name entry () options (variable);
dcl  continue_to_signal_ entry (fixed bin (35));
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl  cv_dec_check_ entry (char (*), fixed bin (35)) returns (fixed bin);
dcl  find_condition_info_ entry (ptr, ptr, fixed bin (35));
dcl  expand_pathname_ entry (char (*), char (*), char (*), fixed bin (35));
dcl  pathname_ entry (char (*), char (*)) returns (char (168));
dcl  get_process_id_ entry returns (bit (36));
dcl  parse_fnp_name_ entry (char (*), fixed bin);
dcl  ipc_$create_ev_chn entry (fixed bin (71), fixed bin (35));
dcl  convert_ipc_code_ entry (fixed bin (35));
dcl  ipc_$decl_ev_call_chn entry (fixed bin (71), ptr, ptr, fixed bin, fixed bin (35));
dcl  hcs_$wakeup entry (bit (*), fixed bin (71), fixed bin (71), fixed bin (35));
dcl  get_system_free_area_ entry () returns (ptr);
dcl  comm_meters_ entry ((*) char (*), fixed bin, ptr, fixed bin, ptr, fixed bin (35));
dcl  comm_meters_$free entry (ptr, ptr, fixed bin (35));
dcl  timer_manager_$alarm_wakeup entry (fixed bin (71), bit (2), fixed bin (71));

dcl  (
     error_table_$action_not_performed,
     error_table_$inconsistent,
     error_table_$too_many_args,
     error_table_$noarg,
     error_table_$badopt
     ) fixed bin (35) external static;

dcl  COMMAND_NAME char (14) internal static options (constant) init ("meter_fnp_idle");

dcl  static_dirname char (168) internal static;

dcl  1 meter_fnp_idle_info_array (8) internal static aligned like meter_fnp_idle_info;

dcl  1 meter_fnp_idle_info aligned based (infop),
       2 event_channel_name fixed bin (71),
       2 next_cycle_sched fixed bin (71),
       2 interval fixed bin (71),
       2 data_seg_ptr pointer,
       2 fnp_name char (1),
       2 minutes fixed bin,
       2 flags,
         3 running bit (1) unaligned,
         3 suspended bit (1) unaligned,
         3 stop_requested bit (1) unaligned,
         3 pad bit (33) unaligned;

dcl  (cleanup, sub_error_) condition;

	fnp_name = "";
	minutes = 0;
	dirname = "";
	stop, non_stop = "0"b;

	call cu_$arg_count (nargs, code);
	if code ^= 0
	then do;
	     call com_err_ (code, COMMAND_NAME);
	     return;
	end;

	if nargs = 0
	then do;
	     call com_err_$suppress_name (0, COMMAND_NAME, "Usage: meter_fnp_idle fnp_name {-stop | -interval MINUTES}")
		;
	     return;
	end;

	do iarg = 1 to nargs;
	     call cu_$arg_ptr (iarg, argp, argl, code);
	     if code ^= 0
	     then do;
		call com_err_ (code, COMMAND_NAME);
		return;
	     end;

	     if substr (arg, 1, 1) ^= "-"
	     then do;				/* not a control arg, must be FNP name */
		call parse_fnp_name_ (arg, fnp_no);
		if fnp_no < 0
		then do;
		     call com_err_ (0, COMMAND_NAME, "^a is not a valid FNP name.", arg);
		     return;
		end;
		else if fnp_name ^= ""
		then do;
		     call com_err_ (error_table_$inconsistent, COMMAND_NAME,
			"More than one FNP name specified: ^a and ^a", fnp_name, arg);
		     return;
		end;
		fnp_name = arg;
	     end;

	     else if arg = "-stop" | arg = "-sp"
	     then if non_stop
		then do;
STOP_ERROR:
		     call com_err_ (error_table_$inconsistent, COMMAND_NAME,
			"-stop cannot be specified with any other control argument.");
		     return;
		end;
		else stop = "1"b;

	     else if stop
	     then go to STOP_ERROR;
	     else do;
		non_stop = "1"b;

		if arg = "-directory" | arg = "-dr"
		then do;
		     iarg = iarg + 1;
		     call cu_$arg_ptr (iarg, argp, argl, code);
		     if code ^= 0
		     then do;
NO_DIR:
			call com_err_ (code, COMMAND_NAME, "No directory pathname specified.");
			return;
		     end;

		     if substr (arg, 1, 1) = "-"
		     then do;
			code = error_table_$noarg;
			go to NO_DIR;
		     end;

		     call expand_pathname_ (arg, dirname, entryname, code);
		     if code ^= 0
		     then do;
			call com_err_ (code, COMMAND_NAME, arg);
			return;
		     end;

		     dirname = pathname_ (dirname, entryname);
		end;

		else if arg = "-interval"
		then do;
		     if minutes ^= 0
		     then do;
			call com_err_ (error_table_$inconsistent, COMMAND_NAME, "More than one interval specified.")
			     ;
			return;
		     end;
		     iarg = iarg + 1;
		     call cu_$arg_ptr (iarg, argp, argl, code);
		     if code ^= 0
		     then do;
NO_INTERVAL:
			call com_err_ (code, COMMAND_NAME, "Interval value not supplied.");
			return;
		     end;

		     if substr (arg, 1, 1) = "-"
		     then do;
			code = error_table_$noarg;
			go to NO_INTERVAL;
		     end;

		     minutes = cv_dec_check_ (arg, code);
		     if code ^= 0
		     then do;
			call com_err_ (0, COMMAND_NAME, "^a is not a valid interval specification.", arg);
			return;
		     end;
		end;

		else do;
		     call com_err_ (error_table_$badopt, COMMAND_NAME, arg);
		     return;
		end;
	     end;
	end;

	if fnp_name = ""
	then do;
	     call com_err_ (error_table_$noarg, COMMAND_NAME, "No FNP name specified.");
	     return;
	end;

	static_dirname = dirname;

	infop = addr (meter_fnp_idle_info_array (fnp_no));
	if stop
	then do;
	     if ^meter_fnp_idle_info.running
	     then call com_err_ (0, COMMAND_NAME, "This process is not metering FNP ^a.", fnp_name);
	     else meter_fnp_idle_info.stop_requested = "1"b;
	     return;
	end;

	if meter_fnp_idle_info.running
	then do;
	     call com_err_ (error_table_$action_not_performed, COMMAND_NAME, "This process is already metering FNP ^a.",
		fnp_name);
	     return;
	end;

	if minutes = 0
	then minutes = 1;				/* default to one minute interval */

	meter_fnp_idle_info.minutes = minutes;		/* for forming pathname */
	meter_fnp_idle_info.next_cycle_sched = 0;
	meter_fnp_idle_info.interval = 60000000 * minutes;/* convert to microseconds */
	meter_fnp_idle_info.data_seg_ptr = null ();
	meter_fnp_idle_info.fnp_name = fnp_name;
	string (meter_fnp_idle_info.flags) = "0"b;

	call ipc_$create_ev_chn (meter_fnp_idle_info.event_channel_name, code);
	if code ^= 0
	then do;
	     call convert_ipc_code_ (code);
	     call com_err_ (code, COMMAND_NAME, "Unable to create event channel.");
	     return;
	end;

	call ipc_$decl_ev_call_chn (meter_fnp_idle_info.event_channel_name, codeptr (idle_wakeup), infop, 30, code);
	if code ^= 0
	then do;
	     call convert_ipc_code_ (code);
	     call com_err_ (code, COMMAND_NAME, "Unable to set up event call channel.");
	     return;
	end;

	event_message = fnp_no;
	meter_fnp_idle_info.running = "1"b;
	call hcs_$wakeup (get_process_id_ (), meter_fnp_idle_info.event_channel_name, event_message, code);
	if code ^= 0
	then do;
	     call convert_ipc_code_ (code);
	     call com_err_ (code, COMMAND_NAME, "Unable to send initial wakeup.");
	end;

	return;

idle_wakeup:
     entry (arg_event_call_info_ptr);

/* this entry, which reschedules itself for the next metering interval, does all the real work */

dcl  arg_event_call_info_ptr pointer;

	event_call_info_ptr = arg_event_call_info_ptr;
	infop = event_call_info.data_ptr;
	if event_call_info.channel_id ^= meter_fnp_idle_info.event_channel_name
	then return;				/* not the right wakeup */

	meter_time = clock ();
	if meter_fnp_idle_info.next_cycle_sched = 0
	then meter_fnp_idle_info.next_cycle_sched = meter_time;
	meter_fnp_idle_info.next_cycle_sched = meter_fnp_idle_info.next_cycle_sched + meter_fnp_idle_info.interval;

	if meter_fnp_idle_info.stop_requested
	then do;					/* finished with this one */
	     call wrapup_data_segment;
	     meter_fnp_idle_info.stop_requested, meter_fnp_idle_info.running = "0"b;
	     return;
	end;

	on sub_error_
	     begin;

/* this is here because comm_meters_ calls sub_err_ in case of problems. Since it also
   returns a useful error code if called with a single channel name, this handler doesn't have to explain anything */

dcl  code fixed bin (35);
dcl  pass_on bit (1);
dcl  1 auto_cond_info aligned like condition_info;

		pass_on = "0"b;
		condition_info_ptr = addr (auto_cond_info);
		call find_condition_info_ (null (), condition_info_ptr, code);
		if code ^= 0			/* rather unlikely */
		then pass_on = "1"b;		/* but we'll let someone else worry about it */

		else if condition_info.info_ptr = null () | condition_info.condition_name ^= "sub_error_"
						/* we're not about to deal with this */
		then pass_on = "1"b;

		else do;
		     sub_error_info_ptr = condition_info.info_ptr;
		     if sub_error_info.name ^= "comm_meters_"
						/* not someone we know */
		     then pass_on = "1"b;
		end;

		if pass_on
		then call continue_to_signal_ (code);
	     end;

	comm_meters_chan_name (1) = meter_fnp_idle_info.fnp_name;
	areap = get_system_free_area_ ();

	call comm_meters_ (comm_meters_chan_name, CHANNEL_METERS_VERSION_1, areap, (0), chan_meterp, code);

	if code = 0				/* we got meters */
	then do;
	     on cleanup call comm_meters_$free (areap, chan_meterp, (0));
	     fnp_meterp = channel_meters.mpx_specific_meterp;
	     if unspec (fnp_meters.from_fnp) = "0"b
	     then call wrapup_data_segment;		/* oops, nothing useful */
	     else do;
		fnp_idle_data_ptr = meter_fnp_idle_info.data_seg_ptr;
		if fnp_idle_data_ptr = null ()
		then do;				/* no segment active at the moment */
		     call setup_data_segment (code);	/* so start one */
		     if code ^= 0
		     then do;
			meter_fnp_idle_info.running = "1"b;
			return;			/* we couldn't, forget it */
		     end;
		end;

		if fnp_idle_data.entries_used >= fnp_idle_data.max_entries
						/* we've filled this one */
		then do;
		     call wrapup_data_segment;
		     call setup_data_segment (code);	/* start a new one */
		     if code ^= 0
		     then do;
			meter_fnp_idle_info.running = "0"b;
			return;
		     end;
		end;

		next_entry = fnp_idle_data.entries_used + 1;
		idle_count = fnp_meters.from_fnp.total_idle_count;
		idle_updates = fnp_meters.from_fnp.idle_count_updates;
		delta_idle = idle_count - fnp_idle_data.latest_idle_count;

		fnp_idle_data.entries (next_entry).idle_count = idle_count;
		fnp_idle_data.entries (next_entry).sample_count = idle_updates;
		fnp_idle_data.maximum_idle_count = fnp_meters.from_fnp.max_idle_count;

		if fnp_idle_data.minimum_idle_count = 0
		     | fnp_meters.from_fnp.min_idle_count < fnp_idle_data.minimum_idle_count
		then do;
		     fnp_idle_data.minimum_idle_count = fnp_meters.from_fnp.min_idle_count;
		     fnp_idle_data.time_of_minimum_sample = meter_time;
		end;

		if fnp_idle_data.minimum_delta_idle = 0 | delta_idle < fnp_idle_data.minimum_delta_idle
		then do;
		     fnp_idle_data.minimum_delta_idle = delta_idle;
		     fnp_idle_data.time_of_minimum_average = meter_time;
		end;

		fnp_idle_data.latest_idle_count = idle_count;
		fnp_idle_data.latest_sample_count = idle_updates;
		fnp_idle_data.entries_used = next_entry;
		fnp_idle_data.last_time = meter_time;

		call comm_meters_$free (areap, chan_meterp, code);
		revert cleanup;
	     end;
	end;

	else call wrapup_data_segment;

	call timer_manager_$alarm_wakeup (meter_fnp_idle_info.next_cycle_sched, "00"b,
	     meter_fnp_idle_info.event_channel_name);
	return;

setup_data_segment:
     procedure (a_code);

/* This subroutine creates and initializes a data segment for storing the meters accumulated consecutively for
   a single FNP. The entryname of the segment is fnp_idle_data.FNPNAME.YYMMDD.HHMMSS.INTERVAL,
   which makes them easy to sort. */

dcl  a_code fixed bin (35);

dcl  dirname char (168);
dcl  entryname char (32);
dcl  month fixed bin;
dcl  day fixed bin;
dcl  year fixed bin;
dcl  hour fixed bin;
dcl  minute fixed bin;
dcl  second fixed bin;
dcl  pic_month pic "99";
dcl  pic_day pic "99";
dcl  pic_year pic "99";
dcl  pic_hour pic "99";
dcl  pic_minute pic "99";
dcl  pic_second pic "99";
dcl  code fixed bin (35);

dcl  decode_clock_value_$date_time
	entry (fixed bin (71), fixed bin, fixed bin, fixed bin, fixed bin, fixed bin, fixed bin, fixed bin (71),
	fixed bin, char (4), fixed bin (35));
dcl  ioa_$rsnnl entry () options (variable);
dcl  get_wdir_ entry () returns (char (168));
dcl  hcs_$make_seg entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35));
dcl  hcs_$truncate_seg entry (ptr, fixed bin (19), fixed bin (35));
dcl  hcs_$set_max_length_seg entry (ptr, fixed bin (19), fixed bin (35));
dcl  hcs_$terminate_noname entry (ptr, fixed bin (35));
dcl  error_table_$namedup fixed bin (35) external static;

	if static_dirname = ""
	then dirname = get_wdir_ ();
	else dirname = static_dirname;

	call decode_clock_value_$date_time (meter_time, month, day, year, hour, minute, second, (0), (0), (""), (0));
	pic_month = month;
	pic_day = day;
	pic_year = mod (year, 100);
	pic_hour = hour;
	pic_minute = minute;
	pic_second = second;

	call ioa_$rsnnl ("fnp_idle_data.^a.^a^a^a.^a^a^a.^d", entryname, (0), meter_fnp_idle_info.fnp_name, pic_year,
	     pic_month, pic_day, pic_hour, pic_minute, pic_second, meter_fnp_idle_info.minutes);

	call hcs_$make_seg (dirname, entryname, "", RW_ACCESS_BIN, fnp_idle_data_ptr, code);
	if fnp_idle_data_ptr = null ()
	then do;
	     call com_err_ (code, COMMAND_NAME, "Could not create ^a", pathname_ (dirname, entryname));
	     a_code = code;
	     return;
	end;

	if code = error_table_$namedup
	then do;
	     call com_err_ (code, COMMAND_NAME, "^a exists. FNP ^a is already being metered.",
		pathname_ (dirname, entryname), meter_fnp_idle_info.fnp_name);
	     a_code = code;
	     call hcs_$terminate_noname (fnp_idle_data_ptr, code);
	     fnp_idle_data_ptr = null ();
	     return;
	end;

	call hcs_$set_max_length_seg (fnp_idle_data_ptr, 65536, code);
	if code ^= 0
	then do;
	     call com_err_ (code, COMMAND_NAME, "Could not set max. length of ^a", pathname_ (dirname, entryname));
	     a_code = code;
	     call hcs_$terminate_noname (fnp_idle_data_ptr, code);
	     return;
	end;

	fnp_idle_data.version = FNP_IDLE_DATA_VERSION_1;
	fnp_idle_data.time_started = meter_time;
	fnp_idle_data.sample_interval = meter_fnp_idle_info.interval;
	fnp_idle_data.max_entries =
	     divide (65536 - bin (rel (addr (fnp_idle_data.entries (1))), 18),
	     size (fnp_idle_data_ptr -> fnp_idle_entry), 17, 0);
	meter_fnp_idle_info.data_seg_ptr = fnp_idle_data_ptr;
	meter_fnp_idle_info.suspended = "0"b;
	meter_fnp_idle_info.running = "1"b;
	a_code = 0;
	return;

     end setup_data_segment;

wrapup_data_segment:
     procedure;

dcl  hcs_$terminate_noname entry (ptr, fixed bin (35));
dcl  code fixed bin (35);

	call hcs_$terminate_noname (meter_fnp_idle_info.data_seg_ptr, code);
	meter_fnp_idle_info.data_seg_ptr = null ();
	if ^meter_fnp_idle_info.stop_requested
	then meter_fnp_idle_info.suspended = "1"b;
	return;
     end wrapup_data_segment;

%include fnp_idle_data;
%page;
%include access_mode_values;
%page;
%include sub_error_info;
%page;
%include condition_info;
%page;
%include condition_info_header;
%page;
%include channel_meters;
%page;
%include fnp_meters;
%page;
%include event_call_info;

     end meter_fnp_idle;
