/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1974 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */





/****^  HISTORY COMMENTS:
  1) change(88-01-15,Lippard), approve(87-08-24,MCR7760),
     audit(88-01-28,Fawcett), install(88-02-16,MR12.2-1022):
     Make reset_soos work on segments.
                                                   END HISTORY COMMENTS */


reset_soos: proc;

/* procedure to reset the security-out-of-service-switch of a directory
   branch if the Access Isolation attributes are consistent. */

/* first version coded 09/29/74 J.C.Whitmore */

	dcl     aptr		 ptr,
	        alen		 fixed bin,
	        arg		 char (alen) based (aptr),
	        ec		 fixed bin (35),
	        dir		 char (168),
	        ent		 char (32),
	        d_priv		 fixed bin (35) init (1),
	        os_priv		 fixed bin (35) init (1),
	        seg_priv		 fixed bin (35) init (1);

	dcl     cu_$arg_ptr		 entry (fixed bin, ptr, fixed bin, fixed bin (35)),
	        com_err_		 entry options (variable),
	        expand_pathname_	 entry (char (*), char (*), char (*), fixed bin (35)),
	        pathname_		 entry (char (*), char (*)) returns (char (168)),
	        system_privilege_$check_mode_reset entry (char (*), char (*), fixed bin (35)),
	        system_privilege_$dir_priv_on entry (fixed bin (35)),
	        system_privilege_$dir_priv_off entry (fixed bin (35)),
	        system_privilege_$seg_priv_on entry (fixed bin (35)),
	        system_privilege_$seg_priv_off entry (fixed bin (35)),
	        system_privilege_$soos_priv_on entry (fixed bin (35)),
	        system_privilege_$soos_priv_off entry (fixed bin (35));

	dcl     (linkage_error, cleanup) condition;



	call cu_$arg_ptr (1, aptr, alen, ec);		/* only one argument is expected */
	if ec ^= 0 then do;

		call com_err_ (ec, "reset_soos");
		return;

	     end;

	if arg = "-wd" | arg = "-wdir" then alen = 0;

	call expand_pathname_ (arg, dir, ent, ec);
	if ec ^= 0 then do;
		call com_err_ (ec, "reset_soos", "^a", arg);
		return;
	     end;

	on linkage_error go to abort;			/* do something intelligent if user doesn't have access */

	on cleanup go to clean_up;			/* cleanup after a "quit" or .... */

	call system_privilege_$dir_priv_on (d_priv);	/* be sure we have correct privileges */
	call system_privilege_$seg_priv_on (seg_priv);
	call system_privilege_$soos_priv_on (os_priv);

	call system_privilege_$check_mode_reset (dir, ent, ec); /* This does the work. */

	if ec ^= 0 then
	     call com_err_ (ec, "reset_soos", "^a", pathname_ (dir, ent));

clean_up: if d_priv = 0 then call system_privilege_$dir_priv_off (ec); /* turn off if we set it */
	if seg_priv = 0 then call system_privilege_$seg_priv_off (ec);
	if os_priv = 0 then call system_privilege_$soos_priv_off (ec);


	return;

abort:	call com_err_ (0, "reset_soos", "This command requires privileged access not given to this user.");
						/* don't worry about reseting privileges because we */
						/* got here because user didn't have access to do so */
	return;

     end reset_soos;
