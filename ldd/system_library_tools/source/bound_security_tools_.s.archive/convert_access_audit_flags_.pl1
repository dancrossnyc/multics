/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   *********************************************************** */

/* format: style1,^inddcls,^indnoniterdo,insnl,linecom,indcomtxt */

convert_access_audit_flags_$from_string:
     procedure (a_flag_str, a_flag_bits, a_ec);

/* format: off */
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* CONVERT_ACCESS_AUDIT_FLAGS_						*/
	/*									*/
	/* Routine to convert a textual representation of the access audit flags to its bit	*/
	/* string equivalent, or from the bit string to text.				*/
	/*									*/
	/* Entrypoints:								*/
	/*									*/
 	/*      convert_access_audit_flags_$from_string (char(*), bit(36)aligned, fixed bin(35))	*/
	/* 		This entry converts the textual representation of the flags to a	*/
	/* 		bit string.						*/
	/*									*/
 	/*      convert_access_audit_flags_$edit_from_string(char(*),bit(36)aligned,fixed bin(35))*/
	/*		This entry accepts both a textual representation of the flags and a	*/
	/*		bit string of flags as input.  The bit string is modified according	*/
	/*		to the flags specified in the textual representation.		*/
	/*									*/
	/*      convert_access_audit_flags_$to_string (char(*), bit(36)aligned, fixed bin(35))	*/
	/* 		This entry converts the bit string of audit flags into a textual	*/
	/* 		representation.						*/
	/*      convert_access_audit_flags_$to_string_long (bit(36)aligned, char(*),fixed bin(35))*/
	/*		This entry converts the bit string of audit flags into a detailed	*/
	/*		textual representation where more than one line is used for display.	*/
	/*		The character string may be very large (e.g. 1024 chars).		*/
	/*									*/
	/* Flag String Syntax:							*/
	/*									*/
	/*	flag-string ::= flag-item [, flag-item]					*/
	/*	flag-item ::= object-type-keyword "=" grant-level-keyword "/" deny-level-keyword*/
	/*	flag-item ::= flag-type-keyword					*/
	/*	object-type-keyword = {Short_Object_Names in access_audit_names.incl.pl1}	*/
	/*	grant_level_keyword = {Short_Level_Names in access_audit_names.incl.pl1}	*/
	/*	flag-type-keyword = {Short_Flag_Names in access_audit_names.incl.pl1}		*/
	/*									*/
	/* Note1: "flags" is a term used a little loosely here.  Some flags require more than a	*/
	/* single bit and provide auditing "level" information in respect to granted or denied	*/
	/* operations on a given object.  See access_audit_flags.incl.pl1.			*/
	/*									*/
	/* Note2: This program replaces "convert_audit_" which performed the same function for	*/
	/* the pre-MR11 audit flag scheme.						*/
	/*									*/
	/* History:								*/
	/* 84-12-07 EJ Sharpe - changed flag string syntax				*/
	/* 84-11-14 EJ Sharpe - created						*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* format: on */


/* PARAMETERS */

dcl     a_flag_str		 char (*) parameter;
dcl     a_flag_bits		 bit (36) aligned parameter;
dcl     a_ec		 fixed bin (35) parameter;
dcl     a_display_str	 char (*) parameter;
dcl     a_display_len	 fixed bin (21);


/* AUTOMATIC */

dcl     flag_index		 fixed bin;		/* index into flags array */
dcl     object_index	 fixed bin;		/* index into object levels array */
dcl     start_index		 fixed bin (21);		/* index of first non-blank char in given string */
dcl     end_index		 fixed bin (21);		/* index of last non-blank char in given string */
dcl     delimiter_index	 fixed bin (21);		/* index of next "=", ",", or "-" */
dcl     len		 fixed bin (21);		/* length of text formatted by ioa_ */
dcl     object_name_width	 fixed bin;		/* width of object name in displays */
dcl     level_name_width	 fixed bin;		/* width of level name in displays */
dcl     done		 bit (1);
dcl     1 flags		 aligned like audit_flags_alt;/* our copy of the flags */
dcl     ec		 fixed bin (35);
dcl     v_flag_str		 char (1024) varying;	/* we'll build flag string here */
dcl     flag_str_len	 fixed bin (21);		/* length of given flags text str */
dcl     flag_str_ptr	 pointer;			/* pointer to same... */
dcl     flag_substr_len	 fixed bin (21);		/* length of portion unprocessed */
dcl     flag_substr_ptr	 pointer;			/* pointer to unprocessed portion */
dcl     display_substr_len	 fixed bin (21);		/* length of unused portion of caller's display string */
dcl     display_substr_ptr	 pointer;			/* pointer to unused portion */
dcl     keyword_len		 fixed bin (21);		/* length of next keyword */
dcl     keyword_ptr		 pointer;			/* pointer to the keyword */


/* BASED */

dcl     based_flag_str	 char (flag_str_len)
			 based (flag_str_ptr);	/* caller's text string */
dcl     based_flag_substr	 char (flag_substr_len)
			 based (flag_substr_ptr);	/* unprocessed portion of caller's text */
dcl     based_display_substr	 char (display_substr_len)
			 based (display_substr_ptr);	/* unused portion of caller's text */
dcl     based_keyword	 char (keyword_len)
			 based (keyword_ptr);	/* next keyword in caller's text */
dcl     char_array		 (1044480) char (1) unaligned based;

/* MISC */

dcl     True		 bit (1) init ("1"b) int static options (constant);
dcl     False		 bit (1) init ("0"b) int static options (constant);

dcl     Display_Object_Format	 char (32) internal static options (constant)
			 init ("^va   ^va   ^va");
dcl     WhiteSpace		 char (2) internal static options (constant)
			 init (" 	");		/* space and tab */

dcl     error_table_$bad_arg	 fixed bin (35) external;
dcl     error_table_$smallarg	 fixed bin (35) external;

dcl     ioa_$rsnp		 entry options (variable);

dcl     before		 builtin;
dcl     after		 builtin;
dcl     lbound		 builtin;
dcl     rtrim		 builtin;
dcl     translate		 builtin;
dcl     unspec		 builtin;
dcl     length		 builtin;
dcl     index		 builtin;
dcl     substr		 builtin;
dcl     addr		 builtin;
dcl     verify		 builtin;
dcl     search		 builtin;
dcl     hbound		 builtin;
%page;

/* convert_access_audit_flags_$from_string: entry (a_flag_str, a_flag_bits, a_ec); */

	unspec (flags) = ""b;
	goto from_string_join;

convert_access_audit_flags_$edit_from_string:
     entry (a_flag_str, a_flag_bits, a_ec);

	unspec (flags) = a_flag_bits;

from_string_join:

	ec = 0;					/* init */

	flag_str_len = length (a_flag_str);
	flag_str_ptr = addr (a_flag_str);

/* avoid using ltrim and rtrim because we don't want to copy the string */
	start_index = verify (based_flag_str, WhiteSpace);
	if start_index > 1
	then do;					/* adjust substr to strip leading spaces */
	     call move_substr (flag_str_ptr, flag_str_len, start_index - 1);
	end;
	else if start_index = 0
	then do;
	     flag_str_len = 0;			/* string is all blank */
	end;
	else /* nothing - no leading spaces */
	     ;

	end_index = search (based_flag_str, WhiteSpace);	/* 1 = "all blank" - can't happen here
						   0 = "no trailing blanks" */
	if end_index > 1
	then do;
	     flag_str_len = end_index - 1;		/* adjust string length to strip trailing blanks */
						/* make sure we didn't just hit an embedded blank */
	     flag_substr_ptr = addr (flag_str_ptr -> char_array (end_index));
						/* substr is rest of caller's string */
	     flag_substr_len = length (a_flag_str) - (start_index + end_index) + 2;
	     if verify (based_flag_substr, WhiteSpace) ^= 0
	     then ec = error_table_$bad_arg;
	end;
	else /* nothing - no trailing spaces */
	     ;


	if flag_str_len > 0 & ec = 0
	then do;
	     flag_substr_ptr = flag_str_ptr;		/* we'll start with whole string */
	     flag_substr_len = flag_str_len;

	     done = False;
	     ec = 0;
	     do while (^done & ec = 0);
		delimiter_index = search (based_flag_substr, ",");
		if delimiter_index = 1 | delimiter_index = flag_substr_len
		then do;
		     ec = error_table_$bad_arg;
		end;
		else do;
		     keyword_ptr = flag_substr_ptr;	/* keyword is at beginning of the next substr */
		     if delimiter_index = 0
		     then do;			/* keyword is rest of string */
			keyword_len = flag_substr_len;
			done = True;		/* nothing else in the string */
		     end;
		     else do;
			keyword_len = delimiter_index - 1;
						/* pick off the keyword */
		     end;
		     if index (based_keyword, "=") ^= 0
		     then do;			/* it must be an object type keyword */

			call process_object_keyword;	/* sets flag index */
		     end;
		     else do;			/* it must be an normal flag keyword */
			call process_flag_keyword;
		     end;
		     if ^done & ec = 0
		     then call move_substr (flag_substr_ptr, flag_substr_len, keyword_len + 1);
		end;
	     end /* do while */;
	end;

	a_ec = ec;
	if ec = 0
	then a_flag_bits = unspec (flags);

	return;
%page;

convert_access_audit_flags_$to_string:
     entry (a_flag_bits, a_flag_str, a_ec);

	ec = 0;
	unspec (flags) = a_flag_bits;
	v_flag_str = "";				/* init varying string we'll built text in */

	if check_flag_bits ()
	then do;
	     do object_index = 1 to n_audit_objects;
		call append_object_level_pair (object_index);
	     end;
	     do flag_index = 1 to n_audit_flags;
		call append_flag (flag_index);
	     end;
	     if length (v_flag_str) > length (a_flag_str) /* caller give us enough room? */
	     then ec = error_table_$smallarg;
	     else a_flag_str = v_flag_str;
	end;
	else ec = error_table_$bad_arg;

	a_ec = ec;

	return;
%page;
convert_access_audit_flags_$to_string_long:
     entry (a_flag_bits, a_display_str, a_display_len, a_ec);

/* we'll build the display right in the caller's string */
	ec = 0;
	unspec (flags) = a_flag_bits;
	display_substr_len = length (a_display_str);
	display_substr_ptr = addr (a_display_str);

	if check_flag_bits ()
	then do;
	     call set_object_display_widths;

	     len = display_substr_len;
	     if len < 1
	     then goto short_arg;
	     call ioa_$rsnp (rtrim (Display_Object_Format) || "^/", based_display_substr, len,
		object_name_width, "Object",
		level_name_width, "Grant Level",
		level_name_width, "Deny Level");

	     call move_substr (display_substr_ptr, display_substr_len, len);

	     do object_index = 1 to n_audit_objects;
		call display_object_level_pair (object_index);
	     end;

	     len = display_substr_len;
	     call ioa_$rsnp ("^/^a", based_display_substr, len, "Audited Events:");
	     call move_substr (display_substr_ptr, display_substr_len, len);

	     do flag_index = 1 to n_audit_flags;
		call display_flag (flag_index);
	     end;
	end;
	else ec = error_table_$bad_arg;

	a_ec = ec;
						/* caller's display string was built in place */
	a_display_len = length (a_display_str) - display_substr_len;

	return;

short_arg:
	a_ec = error_table_$smallarg;

	return;
%page;

/* Internal Procedures for "FROM STRING" Entry */

lowercase:
     proc (str) returns (char (*));

dcl     str		 char (*);

	return (translate (str, "abcdefghijklmnopqrstuvwxyz", "ABCDEFGHIJKLMNOPQRSTUVWXYZ"));

     end lowercase;



process_flag_keyword:
     proc ();

dcl     keyword		 char (32);
dcl     i			 fixed bin;
dcl     found		 bit (1);
dcl     switch		 bit (1);

/* This procedure examines the current value of the keyword
   for what event type flag it represents */

	if keyword_len > length (keyword)
	then do;
	     ec = error_table_$bad_arg;
	end;
	else do;
	     if substr (based_keyword, 1, 1) = "^"
	     then do;
		switch = False;
		keyword = lowercase (substr (based_keyword, 2));
	     end;
	     else do;
		switch = True;
		keyword = lowercase (based_keyword);
	     end;
	     found = False;
	     do i = 1 to hbound (Short_Flag_Names, 1) while (^found);
		if keyword = lowercase (Short_Flag_Names (i))
		then do;
		     found = True;
		     addr (flags) -> audit_flags_alt.flags (i) = switch;
		end;
	     end;
	     if ^found
	     then ec = error_table_$bad_arg;
	end;

     end process_flag_keyword;



process_object_keyword:
     proc ();

dcl     keyword		 char (40);
dcl     i			 fixed bin;
dcl     found		 bit (1);
dcl     object_index	 fixed bin;
dcl     level_index		 fixed bin (21);
dcl     based_level_pair	 char (level_pair_len) based (level_pair_ptr);
dcl     level_pair_len	 fixed bin (21);
dcl     level_pair_ptr	 pointer;

	if keyword_len > length (keyword)
	then do;
BADARG:
	     ec = error_table_$bad_arg;
	     return;
	end;
	else do;
	     level_index = index (based_keyword, "=");	/* locate "grant/deny" */
	     if level_index < 2			/* need something before...  */
		| level_index >= keyword_len		/* ...and after "=" */
	     then goto BADARG;

	     keyword = lowercase (substr (based_keyword,
		1, level_index - 1));		/* trim "grant/deny" pair, we'll deal with them later */

	     found = False;
	     do i = 1 to hbound (Short_Object_Names, 1) while (^found);
		if keyword = lowercase (Short_Object_Names (i))
		then do;
		     found = True;
		     object_index = i;		/* save for process_audit_level_keyword */
		end;
	     end;

	     if ^found
	     then ec = error_table_$bad_arg;
	     else do;
		level_pair_ptr = addr (keyword_ptr -> char_array (level_index + 1));
		level_pair_len = keyword_len - level_index;
		call process_level_pair (object_index, based_level_pair);
	     end;

	end;

     end process_object_keyword;





process_level_pair:
     proc (object_index, level_pair);

dcl     object_index	 fixed bin parameter;
dcl     level_pair		 char (*) parameter;

dcl     level_index		 fixed bin;
dcl     found		 bit (1);
dcl     grant_key		 char (32);
dcl     deny_key		 char (32);

	if length (level_pair) > length (grant_key)
	then do;
	     ec = error_table_$bad_arg;
	end;
	else if index (level_pair, "/") = 0
	then do;
	     ec = error_table_$bad_arg;
	end;
	else do;
	     grant_key = lowercase (before (level_pair, "/"));
	     deny_key = lowercase (after (level_pair, "/"));

	     if grant_key ^= ""
	     then do;
		found = False;
		do level_index = lbound (Short_Level_Names, 1) to hbound (Short_Level_Names, 1) while (^found);
		     if grant_key = lowercase (Short_Level_Names (level_index))
		     then do;
			found = True;
			flags.objects (object_index).grant_level = level_index;
			if object_index = FSOBJ_AUDIT_OBJECT_INDEX
			     & level_index = MODIFY_ACCESS
			then ec = error_table_$bad_arg;
						/* should have this level on FSATTR... */
		     end;
		end;
		if ^found
		then ec = error_table_$bad_arg;
	     end;

	     if deny_key ^= ""
	     then do;
		found = False;
		do level_index = lbound (Short_Level_Names, 1) to hbound (Short_Level_Names, 1) while (^found);
		     if deny_key = lowercase (Short_Level_Names (level_index))
		     then do;
			found = True;
			flags.objects (object_index).deny_level = level_index;
			if object_index = FSOBJ_AUDIT_OBJECT_INDEX
			     & level_index = MODIFY_ACCESS
			then ec = error_table_$bad_arg;
						/* should have this level on FSATTR... */
		     end;
		end;
		if ^found
		then ec = error_table_$bad_arg;
	     end;
	end;

     end process_level_pair;
%page;

/* MOVE_SUBSTR - procedure to move a char string pointer to the "right" and adjust the length */

move_substr:
     proc (substr_ptr, substr_len, n_chars);

dcl     substr_ptr		 pointer parameter;
dcl     substr_len		 fixed bin (21) parameter;
dcl     n_chars		 fixed bin (21) parameter;
dcl     char_array		 (substr_len) char (1) unaligned based;

	substr_ptr = addr (substr_ptr -> char_array (n_chars + 1));
	substr_len = substr_len - n_chars;

	return;

     end move_substr;
%page;

/* Internal Procedures for "TO STRING" Entries */

check_flag_bits:
     proc () returns (bit (1));

/* routine to make sure pad is zero and MODIFY-ACCESS level not specified
   for file system objects (is legal on file system attributes) */

	if addr (flags) -> audit_flags.pad ^= ""b
	then return (False);
	else if addr (flags) -> audit_flags.objects (FSOBJ_AUDIT_OBJECT_INDEX).deny_level = MODIFY_ACCESS
	then return (False);
	else if addr (flags) -> audit_flags.objects (FSOBJ_AUDIT_OBJECT_INDEX).grant_level = MODIFY_ACCESS
	then return (False);
	else return (True);

     end check_flag_bits;




append_object_level_pair:
     proc (object_index);

dcl     object_index	 fixed bin parameter;

	if v_flag_str ^= ""
	then v_flag_str = v_flag_str || ",";

	v_flag_str = v_flag_str || rtrim (Short_Object_Names (object_index))
	     || "="
	     || rtrim (Short_Level_Names (flags.objects (object_index).grant_level))
	     || "/"
	     || rtrim (Short_Level_Names (flags.objects (object_index).deny_level));


	return;

     end append_object_level_pair;



append_flag:
     proc (flag_index);

dcl     flag_index		 fixed bin parameter;

	if v_flag_str ^= ""
	then v_flag_str = v_flag_str || ",";
	if ^addr (flags) -> audit_flags_alt.flags (flag_index)
	then v_flag_str = v_flag_str || "^";
	v_flag_str = v_flag_str || rtrim (Short_Flag_Names (flag_index));

	return;

     end append_flag;




set_object_display_widths:
     proc ();

dcl     i			 fixed bin;

/* find longest strings we're going to display */

	object_name_width = 0;
	do i = lbound (Long_Object_Names, 1) to hbound (Long_Object_Names, 1);
	     len = length (rtrim (Long_Object_Names (i)));
	     if len > object_name_width
	     then object_name_width = len;
	end;

	level_name_width = 0;
	do i = lbound (Long_Level_Names, 1) to hbound (Long_Level_Names, 1);
	     len = length (rtrim (Long_Level_Names (i)));
	     if len > level_name_width
	     then level_name_width = len;
	end;

	return;

     end set_object_display_widths;




display_object_level_pair:
     proc (object_index);

dcl     object_index	 fixed bin parameter;

	len = display_substr_len;
	call ioa_$rsnp (Display_Object_Format, based_display_substr, len,
	     object_name_width, Long_Object_Names (object_index),
	     level_name_width, Long_Level_Names (flags.objects (object_index).grant_level),
	     level_name_width, Long_Level_Names (flags.objects (object_index).deny_level));
	call move_substr (display_substr_ptr, display_substr_len, len);

	return;

     end display_object_level_pair;




display_flag:
     proc (flag_index);

dcl     flag_index		 fixed bin parameter;

	len = display_substr_len;
	call ioa_$rsnp ("^[^14t^^^;^15t^]^a", based_display_substr, len, ^flags.flags (flag_index),
	     Long_Flag_Names (flag_index));
	call move_substr (display_substr_ptr, display_substr_len, len);

	return;

     end display_flag;
%page;
%include access_audit_flags;



%include access_audit_names;



     end convert_access_audit_flags_$from_string;

