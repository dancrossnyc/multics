/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1990   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */





/****^  HISTORY COMMENTS:
  1) change(90-04-23,Huen), approve(90-04-23,MCR8156), audit(90-04-27,Gray),
     install(90-05-17,MR12.4-1009):
     lang_11: Use cv_entry to find the segment so that cds will work even when
     the working dir is not in the search rules.
  2) change(90-05-18,Huen), approve(90-05-18,MCR8156), audit(90-05-18,Gray),
     install(90-05-18,MR12.4-1010):
     Post bug fix (lang_11) : to avoid passing an entryname to pathname_ that
     exceeds 32 characters.
                                                   END HISTORY COMMENTS */



/* This program is a command interface to the create_data_segment_ subroutine.
   It creates a link in the process directory named <unique_name>.pl1 to the
   segment <source_name>.cds in the working directory and calls the PL/I
   compiler to compile the program.  The compiler is invoked with the -table
   control argument.  If the -list create_data_segment control argument is
   specified, the name <unique_name>.list (same <unique_name> as above) is
   added to the entry <source_name>.list so the listing segment is created
   appropriately, and the compiler is invoked with the -map control argument.

   The format of a CDS source segment is a PL/I program with a call to the
   create_data_segment_ subroutine.  The name given to the create_data_segment
   command is the entry point used to call the program.  The argument passed
   to create_data_segment_ internally as the name of the segment to be created
   should be this same name to preserve Multics conventions on names of
   created object segments.

   Initial coding: 11/20/75 by S. Webber
   Bug with ".cds" names fixed 07/30/76 by B. Greenberg
   MCR 3343 -- Error message bug fixed 19 July 1978 by M. Davidoff.
   Modified 27 February 1981 by M. N. Davidoff to fix bug in which random
	names are added to the working directory if -list is not specified.
*/
/* format: style2 */
create_data_segment:
cds:
     procedure options (variable);

/* automatic */

	dcl     arg_count		 fixed bin;
	dcl     argument_no		 fixed bin;
	dcl     1 ca		 aligned,
		2 list		 bit (1);
	dcl     code		 fixed bin (35);
	dcl     i			 fixed bin;
	dcl     list_ca		 char (8);
	dcl     listp		 ptr;
	dcl     pdir		 char (168);
	dcl     seg_ptr		 ptr;
	dcl     source		 char (32);
	dcl     source_cds		 char (32);
	dcl     source_dir		 char (168);
	dcl     source_list		 char (32);
	dcl     tc		 fixed bin (21);
	dcl     tp		 ptr;
	dcl     unique		 char (15);
	dcl     unique_list		 char (32);
	dcl     unique_pl1		 char (32);
	dcl     wdir		 char (168);

/* based */

	dcl     targ		 char (tc) based (tp);

/* builtin */

	dcl     (addr, after, divide, index, null, reverse, rtrim, substr)
				 builtin;

/* condition */

	dcl     cleanup		 condition;

/* internal static */

	dcl     command		 char (19) internal static options (constant) initial ("create_data_segment");
	dcl     NP		 char (1) internal static options (constant) initial ("");

/* external static */

	dcl     error_table_$badopt	 fixed bin (35) external static;
	dcl     pl1_severity_	 fixed bin (35) external static;

/* entry */

	dcl     com_err_		 entry options (variable);
	dcl     com_err_$suppress_name entry options (variable);
	dcl     cu_$arg_count	 entry (fixed bin, fixed bin (35));
	dcl     cu_$arg_ptr		 entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
	dcl     cv_entry_		 entry (char (*), ptr, fixed bin (35)) returns (entry);
	dcl     expand_pathname_$add_suffix
				 entry (char (*), char (*), char (*), char (*), fixed bin (35));
	dcl     form_link_info_	 entry (ptr, fixed bin (35));
	dcl     get_pdir_		 entry returns (char (168));
	dcl     get_wdir_		 entry returns (char (168));
	dcl     hcs_$append_link	 entry (char (*), char (*), char (*), fixed bin (35));
	dcl     hcs_$chname_file	 entry (char (*), char (*), char (*), char (*), fixed bin (35));
	dcl     hcs_$delentry_file	 entry (char (*), char (*), fixed bin (35));
	dcl     hcs_$initiate	 entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr,
				 fixed bin (35));
	dcl     hcs_$initiate_count	 entry (char (*), char (*), char (*), fixed bin (24), fixed bin (2), ptr,
				 fixed bin (35));
	dcl     ioa_$nnl		 entry options (variable);
	dcl     pathname_		 entry (char (*), char (*)) returns (char (168));
	dcl     pl1		 entry options (variable);
	dcl     terminate_file_	 entry (ptr, fixed bin (24), bit (*), fixed bin (35));
	dcl     unique_chars_	 entry (bit (*)) returns (char (15));

%include terminate_file;

/* program */

	call cu_$arg_count (arg_count, code);
	if code ^= 0
	then do;
		call com_err_ (code, command);
		return;
	     end;

	argument_no = 0;
	ca = ""b;
	do i = 1 to arg_count;
	     call cu_$arg_ptr (i, tp, tc, code);
	     if code ^= 0
	     then do;
		     call com_err_ (code, command, "Argument ^d.", i);
		     return;
		end;

	     if targ = "-list" | targ = "-ls"
	     then ca.list = "1"b;

	     else if index (targ, "-") = 1
	     then do;
		     call com_err_ (error_table_$badopt, command, "^a", targ);
		     return;
		end;

	     else do;
		     argument_no = argument_no + 1;

		     if argument_no = 1
		     then do;
			     call expand_pathname_$add_suffix (targ, "cds", source_dir, source_cds, code);
			     if code ^= 0
			     then do;
				     call com_err_ (code, command, "^a", targ);
				     return;
				end;
			end;
		end;
	end;

	if argument_no ^= 1
	then do;
		call com_err_$suppress_name (0, command, "Usage: ^a path {-control_args}", command);
		return;
	     end;

	source = reverse (after (reverse (source_cds), reverse (".cds")));
	source_list = rtrim (source) || ".list";

	unique = unique_chars_ (""b);
	unique_pl1 = unique || ".pl1";
	unique_list = unique || ".list";

	listp, seg_ptr = null;
	wdir = get_wdir_ ();
	pdir = get_pdir_ ();

	on cleanup call clean_up_segs;

/* Make sure the source segment is there. */

	call hcs_$initiate (source_dir, source_cds, "", 0, 1, seg_ptr, code);
	if seg_ptr = null
	then do;
		call com_err_ (code, command, "^a^[>^]^a", source_dir, source_dir ^= ">", source_cds);
		return;
	     end;

	call terminate_file_ (seg_ptr, 0, TERM_FILE_TERM, code);

	call translate_cds_source_segment;
	call clean_up_segs;

	return;

translate_cds_source_segment:
     procedure;

/* Link to source program */

	call hcs_$append_link (pdir, unique_pl1, rtrim (source_dir) || ">" || source_cds, code);
	if code ^= 0
	then do;
		call com_err_ (code, command, "Appending link ^a^[>^]^a to ^a^[>^]^a.", pdir, pdir ^= ">", unique_pl1,
		     source_dir, source_dir ^= ">", source_cds);
		return;
	     end;

	if ca.list
	then do;
		call hcs_$chname_file (wdir, source_list, "", unique_list, code);
		list_ca = "-map";
	     end;
	else list_ca = "-table";

	call ioa_$nnl ("CDS - ");
	call pl1 (rtrim (pdir) || ">" || unique, "-table", list_ca);

	if pl1_severity_ > 2
	then call com_err_ (0, command, "PL/I errors occured.");

	else begin;
		dcl     entry_var		 entry variable;
		entry_var = cv_entry_ ((pathname_ (wdir, unique) || "$" || source), null, code);
		if code ^= 0
		then do;
			call com_err_ (code, command, "^a$^a", unique, source);
			return;
		     end;

		call entry_var;
	     end;

	if ca.list
	then begin;
		dcl     bc		 fixed bin (24);
		dcl     1 fli_args		 aligned,
			2 obj_ptr		 ptr,
			2 list_ptr	 ptr,
			2 list_bc		 fixed bin (24),
			2 hd_sw		 bit (1) unaligned,
			2 ln_sw		 bit (1) unaligned,
			2 et_sw		 bit (1) unaligned,
			2 lk_sw		 bit (1) unaligned,
			2 lg_sw		 bit (1) unaligned;

		dcl     listing_file	 char (divide (bc, 9, 21)) based (listp);

		call hcs_$initiate_count (wdir, unique_list, "", bc, 1, listp, code);
		if listp = null
		then do;
			call com_err_ (code, command, "^a^[>^]^a", wdir, wdir ^= ">", unique_list);
			return;
		     end;

		bc = bc + 9;
		substr (listing_file, divide (bc, 9, 21), 1) = NP;

		call hcs_$initiate (wdir, source, "", 0, 1, seg_ptr, code);
		if seg_ptr = null
		then do;
			call com_err_ (code, command, "^a^[>^]^a", wdir, wdir ^= ">", source);
			call com_err_ (0, command, "Check arguments to the call of create_data_segment_ in ^a.",
			     source_cds);
			return;
		     end;

		fli_args.obj_ptr = seg_ptr;
		fli_args.list_ptr = listp;
		fli_args.list_bc = bc;
		fli_args.hd_sw = "1"b;
		fli_args.ln_sw = "1"b;
		fli_args.et_sw = "1"b;
		fli_args.lk_sw = "1"b;
		fli_args.lg_sw = "0"b;

		call form_link_info_ (addr (fli_args), code);
		if code ^= 0
		then do;
			call com_err_ (code, command, "Getting link information for ^a^[>^]^a.", wdir, wdir ^= ">",
			     source);
			return;
		     end;

		call terminate_file_ (listp, fli_args.list_bc, TERM_FILE_TRUNC_BC_TERM, code);
	     end;
     end translate_cds_source_segment;

clean_up_segs:
     procedure;

	call hcs_$delentry_file (pdir, unique_pl1, code);
	call hcs_$delentry_file (wdir, unique, code);

	call hcs_$chname_file (wdir, unique_list, unique_list, source_list, code);
	if code ^= 0
	then call hcs_$chname_file (wdir, unique_list, unique_list, "", code);

	call terminate_file_ (listp, 0, TERM_FILE_TERM, code);
	call terminate_file_ (seg_ptr, 0, TERM_FILE_TERM, code);
     end clean_up_segs;

     end create_data_segment;
