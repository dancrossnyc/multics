
/* ***************************************************************
   *						     *
   *						     *
   * Copyright (c) 1975 by Massachusetts Institute of Technology *
   *						     *
   *						     *
   *************************************************************** */


	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* Status									*/
	/*									*/
	/* 1) Modified:  February, 1981 by G. C. Dixon					*/
	/*    a) Add the -trace ctl_arg to invoke the internal tracing facility provided by the	*/
	/*       SEMANTIC_ANALYSIS routine.  When a translator is compiled with  -trace, a	*/
	/*       special trace routine is invoked each time a reduction is matched.  This	*/
	/*       routine prints the matching reduction (as it appears in the .rd source),	*/
	/*       followed by the tokens which matched the reduction.			*/
	/*    b) Upgrade code to 1981 coding standards.					*/
	/* 2) Modified:  July 24, 1983 by G. C. Dixon					*/
	/*    a) Change long name from reduction_compiler to reductions.  Name		*/
	/*       reduction_compiler will be retained for compatibility but will be undocumented.	*/
	/*    b) Make rdc invoke the pl1 command to compile the generated source, iff the rdc	*/
	/*       translation was successful.						*/
	/*    c) Make rdc set a severity variable accessible by the severity AF to indicate the	*/
	/*       results of both the rdc and pl1 translations.				*/
	/* 3) Modified:  Sep 10, 1984 by G. C. Dixon to change name in error messages from	*/
	/*    reduction_compiler to reductions.  This was left out of change 2 above.		*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


reduction_compiler:
reductions:
rdc:	procedure;

     dcl						/* 	automatic variables			*/
	Iarg			fixed bin,
	Larg			fixed bin,	/* length of our input argument.		*/
	Lobject			fixed bin(21),	/* length of output object segment (in chars).	*/
	Lsource			fixed bin(21),	/* length of input source segment (in chars).	*/
	Nargs			fixed bin,	/* number of input arguments.			*/
	Parea			ptr,		/* ptr to our temporary allocation segment.	*/
	Pacl_obj			ptr,		/* ptr to object seg's acl-info structure.	*/
	Parg			ptr,		/* ptr to our input argument.			*/
	Pobject			ptr,		/* ptr to object segment we're creating.	*/
	Psource			ptr,		/* ptr to input source segment.		*/
	1 Scontrol		aligned,
	 (2 long			bit(1),
	  2 brief			bit(1),
	  2 trace			bit(1),
	  2 trace_on_by_default	bit(1),
	  2 pad			bit(32)) unal,	/* reduction_compiler_ control switches.	*/
	bc_source			fixed bin(24),	/* bit count of source segment.		*/
	cleanup			condition,
	code			fixed bin(35),	/* a status code.				*/
	dir			char(168),	/* dir part of source segment's path name.	*/
	ent_source		char(32),		/* ent part of source segment's path name.	*/
	ent_object		char(32),		/* ent part of object segment's path name.	*/
	pl1_args			char(300) varying;	/* Args to be passed to pl1 compiler.		*/

     dcl						/*	based variables			*/
	arg			char(Larg) based (Parg);
						/* our input argument.			*/

     dcl						/*	builtin functions			*/
         (addr, divide, index, length, max, null, string, substr)
				builtin;


     dcl						/*	entries and functions		*/
	com_err_			entry options (variable),
	cu_$arg_count		entry (fixed bin, fixed bin(35)),
	cu_$arg_ptr		entry (fixed bin, ptr, fixed bin, fixed bin(35)),
	cu_$cp			entry (ptr, fixed bin(21), fixed bin(35)),
	expand_pathname_$add_suffix	entry (char(*), char(*), char(*), char(*), fixed bin(35)),
	get_wdir_			entry returns (char(168) aligned),
	hcs_$initiate_count		entry (char(*), char(*), char(*), fixed bin(24), fixed bin(2), ptr,
				     fixed bin(35)),
	hcs_$terminate_noname	entry (ptr, fixed bin(35)),
	hcs_$truncate_seg		entry (ptr, fixed bin, fixed bin(35)),
	ioa_$nnl			entry options(variable),
	pathname_			entry (char(*), char(*)) returns(char(168)),
	reduction_compiler_		entry (ptr, fixed bin(21), ptr, ptr, fixed bin(21), char(32), bit(*),
				     fixed bin(35), fixed bin(35)),
	requote_string_		entry (char(*)) returns(char(*)),
	suffixed_name_$new_suffix	entry (char(*), char(*), char(*), char(32), fixed bin(35)),
	translator_temp_$get_segment	entry (char(*) aligned, ptr, fixed bin(35)),
	translator_temp_$release_all_segments
				entry (ptr, fixed bin(35)),
	tssi_$clean_up_segment	entry (ptr),
	tssi_$finish_segment	entry (ptr, fixed bin(24), bit(36) aligned, ptr, fixed bin(35)),
	tssi_$get_segment		entry (char(*), char(*), ptr, ptr, fixed bin(35));

     dcl						/*	static variables			*/
         (error_table_$mdc_path_dup_args,
	error_table_$no_makeknown,
	error_table_$noentry,
	error_table_$wrong_no_of_args)
				fixed bin(35) ext static,
	pl1_severity_		fixed bin(35) ext static init(0),
	proc			char(10) aligned int static init ("reductions"),
	reductions_severity_	fixed bin(35) ext static init(0),
	sys_info$max_seg_size	fixed bin(35) ext static;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

	call cu_$arg_count (Nargs, code);		/* if we have less than one arg, complain.	*/
	if code ^= 0 then go to NOT_AF;
	if Nargs < 1 then go to WNOA;
	string(Scontrol) = "0"b;
	ent_source = "";
	pl1_args = "";
do Iarg = 1 to Nargs;
	   call cu_$arg_ptr (Iarg, Parg, Larg, code);
	   if arg = "-lg" | arg = "-long" then
	      Scontrol.long = "1"b;
	   else if arg = "-bf" | arg = "-brief" then
	      Scontrol.brief = "1"b;
	   else if arg = "-trace" then do;
	      Scontrol.trace = "1"b;
	      Scontrol.trace_on_by_default = "1"b;
	      if Iarg < Nargs then do;
	         Iarg = Iarg + 1;
	         call cu_$arg_ptr (Iarg, Parg, Larg, code);
	         if arg = "on" then;
	         else if arg = "off" then
		  Scontrol.trace_on_by_default = "0"b;
	         else
		  Iarg = Iarg - 1;
	         end;
	      end;
	   else if arg = "-no_trace" then
	      Scontrol.trace = "0"b;

	   else if index(arg,"-") ^= 1 then do;
	      if ent_source ^= "" then go to DUP_PATH;
	      call expand_pathname_$add_suffix (arg, "rd", dir, ent_source, code);
	      if code ^= 0 then go to BAD_PATH;
	      call suffixed_name_$new_suffix (ent_source, "rd", "pl1", ent_object, code);
	      if code ^= 0 then go to BAD_SOURCE;
	      end;

	   else do;				/* A pl1 option?  Let pl1 diagnose it.		*/
	      if arg = "-prefix" & Iarg < Nargs then do;
	         Iarg = Iarg + 1;
	         call cu_$arg_ptr (Iarg, Parg, Larg, code);
	         pl1_args = pl1_args || " ";
	         pl1_args = pl1_args || "-prefix";
	         pl1_args = pl1_args || " ";
	         pl1_args = pl1_args || requote_string_(arg);
	         end;
	      else do;
	         pl1_args = pl1_args || " ";
	         pl1_args = pl1_args || arg;
	         end;
	      end;
	   end;
	Parea = null;
	Psource = null;
	Pobject = null;				/* initialize ptrs used by cleanup on-unit.	*/
	on cleanup call cleaner;			/* cleanup when required.			*/


	call hcs_$initiate_count (dir, ent_source, "", bc_source, 0, Psource, code);
	if Psource = null then go to BAD_SOURCE;	/* initiate source segment.			*/
	Lsource = divide (bc_source, 9, 35, 0);		/* convert bit count to character count.	*/

	call translator_temp_$get_segment (proc, Parea, code);
	if Parea = null then go to BAD_AREA;
	dir = get_wdir_();				/* put object segment in working directory.	*/
	call tssi_$get_segment (dir, ent_object, Pobject, Pacl_obj, code);
	if code ^= 0 then go to BAD_OBJECT;		/* get ptr to object segment we're creating.	*/
	Lobject = sys_info$max_seg_size * 4;
	call ioa_$nnl ("RDC - ");
	call reduction_compiler_ (Psource, Lsource, Parea, Pobject, Lobject,
	   ent_source, string(Scontrol), reductions_severity_, code);
	if Lobject = 0 then				/* create object segment.  If 0 length, ERROR.	*/
	   call hcs_$truncate_seg (Pobject, 0, 0);
	call tssi_$finish_segment (Pobject, Lobject * 9, "1000"b, Pacl_obj, 0);
						/* finish up the object segment.		*/
	Pobject = null;				/* cleanup now.				*/
	call cleaner;
	if code ^= 0 then go to ERROR;

	pl1_args = "[where pl1]$pl1 " || pathname_ (dir, ent_object) || pl1_args;
	call cu_$cp (addr(substr(pl1_args,1)), length(pl1_args), code);
	reductions_severity_ = max(reductions_severity_, pl1_severity_);
	return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


cleaner:	proc;					/* cleanup procedure.			*/

     dcl	code			fixed bin(35);	/* It has its own status code.		*/

	if Psource ^= null then
	   call hcs_$terminate_noname (Psource, code);
	if Parea ^= null then
	   call translator_temp_$release_all_segments (Parea, code);
	if Pobject ^= null then
	   call tssi_$clean_up_segment (Pacl_obj);

	end cleaner;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

DUP_PATH:	call com_err_ (error_table_$mdc_path_dup_args, proc, "^a
Only one pathname may be given.", arg);
	return;

NOT_AF:   call com_err_ (code, proc);
	return;

WNOA:	call com_err_ (error_table_$wrong_no_of_args, proc,
	   "^/Calling  sequence:^-reductions pathname {-ctl_args}
control_arg is:^--long, -lg^/^2--brief,-bf^/^2--trace {on|off}^/^2--no_trace, -ntrace");
	return;

BAD_PATH:	call com_err_ (code, proc, " ^a", arg);
	return;

BAD_SOURCE:
	if code = error_table_$no_makeknown then code = error_table_$noentry;
	call com_err_ (code, proc, " ^a^[>^]^a", dir, dir^=">", ent_source);
	return;

BAD_AREA:	call com_err_ (code, proc, "^/While creating a temporary segment in the process directory.");
	call cleaner;
	return;

BAD_OBJECT:
	call com_err_ (code, proc, "^/While creating the object segment^/(^a^[>^]^a).", dir, dir^=">", ent_object);
	call cleaner;
	return;

ERROR:	call com_err_ (code, proc, "^/No object segment will be generated.");
	return;

	end reduction_compiler;
