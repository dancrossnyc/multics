/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
/* "Outer module" of peripheral package to return "raw" (unconverted) data from the card reader.
   coded by MAP, 12/69. */

/* Last modified by J. Stern on 8/1/71 to add standard SDB declaration
   and to reject attempted multiple attachments.  */

/* Last modifier 6/27/75 by Noel I. Morris	*/


/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */


raw_read: proc (sdb_ptr, wksp, off, nel, nelt, iostatus);

dcl  wksp ptr,					/* pointer to caller's workspace */
     off fixed bin,					/* offset into caller's workspace */
     nel fixed bin,					/* number of elements to be transmitted */
     nelt fixed bin,				/* number of elements actually transmitted */
     iostatus bit (72) aligned;			/* status bits */

dcl  nleft fixed bin,				/* elements remaining to be transferred */
     in ptr,					/* input pointer */
     out ptr,					/* output pointer */
     j fixed bin;					/* elements transmitted from reader or to punch */

dcl  raw_card bit (972) aligned;			/* buffer for raw card */

dcl  wks (0:1) bit (960) based unal;			/* caller's workspace */

dcl  error_table_$eof_record ext fixed bin(35);

dcl  ios_$read entry (char (*) aligned, ptr, fixed bin, fixed bin, fixed bin, bit (72) aligned),
     ios_$write entry (char (*) aligned, ptr, fixed bin, fixed bin, fixed bin, bit (72) aligned);

dcl (addr, substr) builtin;


		/*  */

% include card_sdb;


		/*  */

	iostatus = "0"b;				/* Clear status bits. */
	in = addr (raw_card);			/* Set input pointer. */
	out = addr (wksp -> wks (off));		/* Set output pointer. */
	nelt = 0;					/* clear elements transmitted. */

	do nleft = nel by -1 while (nleft > 0);		/* Handle one elements at a time. */
	     call ios_$read (stream, in, 0, 1, j, iostatus);
	     if substr (iostatus, 1, 36) & substr(iostatus, 1, 36) ^= unspec(error_table_$eof_record) then do;
bad_read:		substr (iostatus, 46, 1) = "0"b;
		return;
	     end;
	     if j = 0 then
		if substr (iostatus, 46, 1) then return;
		else go to bad_read;

	     out -> wks (0) = raw_card;		/* Copy the card. */

	     nelt = nelt + 1;			/* Count one element transmitted. */
	     out = addr (out -> wks (1));		/* Step output pointer. */
	end;

	return;


		/*  */

raw_write: entry (sdb_ptr, wksp, off, nel, nelt, iostatus);

	iostatus = "0"b;				/* Clear status bits. */
	out = addr (raw_card);			/* Set output pointer. */
	in = addr (wksp -> wks (off));		/* Set input pointer. */
	nelt = 0;					/* Clear count of elements transmitted. */

	do nleft = nel by -1 while (nleft > 0);		/* Handle one element at a time. */
	     raw_card = in -> wks (0);		/* Copy one element. */

	     call ios_$write (stream, out, 0, 1, j, iostatus);
	     if substr (iostatus, 1, 36) ^= "0"b | j = 0 then do;
		substr (iostatus, 46, 1) = "0"b;
		return;
	     end;

	     nelt = nelt + 1;			/* Count one element transmitted. */
	     in = addr (in -> wks (1));		/* Step input pointer. */
	end;

	return;


		/*  */

raw_getsize: entry (sdb_ptr, el_size, iostatus);

dcl  el_size fixed bin;				/* element size */


	iostatus = "0"b;

	el_size = 960;				/* Element size is one raw card image. */

	return;



     end raw_read;
