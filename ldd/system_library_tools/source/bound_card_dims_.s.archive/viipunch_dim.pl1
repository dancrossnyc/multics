/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
/* "Outer module" to read 7punch decks.  Reads to EOF card, returns number of elements as
   bits.  See CTSS manual for 7punch format.  coded by MAP, 1/70  */

/* updated for new io switch, MAP, 3/70 */

/* Modified by B. Greenberg  3/73  for  accepting previously mispunched
   decks, punching correct tag fields, and decimal sequence field in cols. 76-80 */
/* Modified by J. Stern on 7/29/71 to add standard SDB declaration
   and to delete "viipunch_attach" and "viipunch_detach" entry points.  Common
   attach and detach entry points for all card pseudo-DIMs are now in card_dim. */


/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */



viipunch_read: proc (sdb_ptr, wksp, off, nel, nelt, iostatus);

dcl  dsb_ptr ptr,					/* pointer to stream data block */
     wksp ptr,					/* pointer to caller's workspace */
     off fixed bin (24),				/* offset into caller's workspace */
     nel fixed bin (24),				/* number of elements to transmit */
     nelt fixed bin (24),				/* number of elements actually transmitted */
     iostatus bit (72) aligned;			/* IOS_ status bits */

dcl  last_sw bit (1) aligned,				/* non-zero after reading last card */
     in ptr,					/* input pointer */
     out ptr,					/* output pointer */
     seqno fixed bin (15),				/* card sequence number */
     nleft fixed bin (24),				/* number of elements left to transfer */
     bad_tag_sw bit (1) aligned,			/* to fix cards mangled by Padlipsky */
     wdct bit (12) aligned,				/* word count on card */
     len fixed bin,					/* data copy length */
     i fixed bin,					/* iteration variable */
     j fixed bin,					/* useful variable */
     len2 fixed bin,				/* used for repeated data */
     bitcnt fixed bin (24),				/* bit count of 7punch deck */
     same_sw bit (1) aligned,				/* used to detect repeated data */
     number fixed bin,				/* for computing sequence number field */
     tenth fixed bin;				/* for computing sequence number field */

dcl  wks bit (nleft) unal based;			/* caller's workspace */

dcl 1 card aligned,					/* 7punch card declaration */
    2 w0,						/* first word */
     (3 seven bit (3),				/* "111"b */
      3 cnthi bit (6),				/* high-order word count */
      3 five bit (3),				/* "101"b */
      3 cntlo bit (6),				/* low-order word count */
      3 tag bit (3),				/* non-zero on last card */
      3 seq bit (15)) unal,				/* card sequence number */
    2 cksm bit (36),				/* checksum */
    2 data bit (792),				/* data words */
   (2 blank (3) bit (12),				/* blank field */
    2 id (5) bit (12)) unal;				/* sequence number field */

dcl  error_table_$eof_record ext fixed bin(35);

dcl  ios_$read entry (char (*) aligned, ptr, fixed bin, fixed bin, fixed bin, bit (72) aligned),
     ios_$write entry (char (*) aligned, ptr, fixed bin, fixed bin, fixed bin, bit (72) aligned),
     com_err_ entry options (variable),
     check_cd entry (ptr) returns (bit (36) aligned);

dcl (addr, divide, bin, bit, length, min, string, substr, unspec) builtin;


		/*  */

% include card_sdb;

		/*  */

	iostatus = "0"b;				/* Clear status bits. */
	in = addr (card);				/* Set input pointer to card image. */
	out = addr (substr (wksp -> wks, off+1));	/* Set output pointer into caller's workspace. */
	nelt = 0;					/* Initialize count of elements transmitted. */

	last_sw = "0"b;				/* Clear last card switch. */
	seqno = 0;				/* Initialize card sequence number. */
	nleft = nel;				/* Get number of elements remaining to be transmitted. */

	do while (nleft > 0);			/* Loop, reading cards. */
	     call read_7_card;			/* Read and check a card. */

	     if seqno = 0 then if card.tag then		/* If first card ... */
		bad_tag_sw = "1"b;			/* It should not have non-zero tag. */
	     else
		bad_tag_sw = "0"b;

	     wdct = card.cnthi || card.cntlo;		/* Get word count. */
	     len = min (bin (wdct, 12) * 36, nleft);	/* Compute elements to be taken from card. */

	     if len = 0 then			/* If zero word count ... */
		if card.tag = "011"b then do;		/* If this is a bit count card ... */
		     nelt = bin (substr (card.data, 1, 36), 35);
		     last_sw = "1"b;		/* Return correct element count and set switch. */
		end;
		else if bad_tag_sw | (card.tag = "000"b) then do;
		     call com_err_ (0, "viipunch_read", "Zero word count on card ^d.", seqno);
		     go to error_return;		/* Should never have zero word count otherwise. */
		end;
		else;

	     else if len <= length (card.data) then	/* If data is on card ... */
		substr (out -> wks, 1, len) = card.data;/* Copy it into caller's workspace. */

	     else do j = 0 to len by 36;		/* Otherwise, copy repeated word. */
		len2 = min (36, len - j);		/* Compute elements to transfer. */
		substr (out -> wks, j+1, len2) = card.data;
	     end;					/* Copy single word. */

	     nleft = nleft - len;			/* Decrement count of elements left. */
	     out = addr (substr (out -> wks, len+1));	/* Bump pointer into caller's workspace. */
	     nelt = nelt + len;			/* Return count of elements transmitted so far. */

	     if ^bad_tag_sw then			/* If not ignoring bad tags ... */
		if card.tag & "001"b then		/* If card has non-zero tag ... */
		     last_sw = "1"b;		/* Set last card switch. */

	     seqno = seqno + 1;			/* Bump card sequence number. */
	end;

	return;


		/*  */

read_7_card: proc;

	call ios_$read (stream, in, 0, 1, j, iostatus);	/* Read one card. */
	if substr (iostatus, 1, 36) & substr(iostatus, 1, 36) ^= unspec(error_table_$eof_record) then do;
bad_read:	     substr (iostatus, 46, 1) = "0"b;		/* Clear this bit. */
	     go to error_return;			/* And take error return. */
	end;

	if j = 0 then				/* If no elements were read ... */
	     if substr (iostatus, 46, 1) then		/* Did we get an EOF? */
		if last_sw then			/* Was it expected? */
		     go to reof;			/* If so, transfer. */
		else do;				/* Unexpected EOF. */
		     call com_err_ (0, "viipunch_read", "Premature EOF after card ^d.", seqno - 1);
		     go to bad_read;
		end;
	     else go to bad_read;			/* Read zero cards. */

	if last_sw then do;				/* Should have gotten EOF after last read. */
	     call com_err_ (0, "viipunch_read", "Missing EOF after card ^d.", seqno - 1);
	     go to bad_read;
	end;

	if card.seven ^= "111"b | card.five ^= "101"b then do;
	     call com_err_ (0, "viipunch_read", "Non 7-punched card after card ^d.", seqno - 1);
	     go to bad_read;
	end;

	if bin (card.seq, 15) ^= seqno then do;		/* If sequence error ... */
	     call com_err_ (0, "viipunch_read", "Card sequence error. Expected ^d; read ^d.", seqno, bin (card.seq, 15));
	     go to bad_read;
	end;

	if card.cksm then				/* If checksum is not blank ... */
	     if card.cksm ^= check_cd (in) then do;	/* Compre against computed checksum. */
		call com_err_ (0, "viipunch_read", "Checksum error on card ^d.", seqno);
		go to bad_read;
	     end;

	return;


     end read_7_card;


		/*  */

viipunch_write: entry (sdb_ptr, wksp, off, nel, nelt, iostatus);

	iostatus = "0"b;				/* Clear status bits. */
	out = addr (card);				/* Set output pointer. */
	in = addr (substr (wksp -> wks, off+1));	/* Set input pointer. */
	nelt = 0;					/* Initialize count of elements transmitted. */

	string (card.w0) = "0"b;			/* Clear first word in card image. */
	card.seven = "111"b;			/* Set 7punch bits. */
	card.five = "101"b;				/* Set 7-9 punch. */
	string (card.blank) = "0"b;			/* Clear blank field. */

	seqno = 0;				/* Initialize sequence number. */
	bitcnt, nleft = nel;			/* Set number of elements remaining to be transmitted. */

	do while (nleft > 0);			/* Iterate until all elements processed. */
	     len = min (length (card.data), nleft);	/* Compute number of elements to process. */
	     card.data = substr (in -> wks, 1, len);	/* Copy the data. */
	     in = addr (substr (in -> wks, len+1));	/* Bump input pointer. */
	     nleft = nleft - len;			/* Decrement elements remaining to be transmitted. */

	     if substr (card.data, 1, length (card.data)-36) = substr (card.data, 37) then do;
		same_sw = "1"b;			/* If data is replicated on card ... */
		do while (same_sw & (nleft > 0));	/* Search to end of replication. */
		     len2 = min (36, nleft);		/* Compute number of elements to test. */
		     if substr (in -> wks, 1, len2) = substr (card.data, 1, 36) then do;
			len = len + len2;		/* Data still replicated.  Skip over it. */
			in = addr (substr (in -> wks, len2+1));
			nleft = nleft - len2;
		     end;
		     else				/* Data no longer replicated. */
			same_sw = "0"b;		/* Clear replication switch. */
		end;
	     end;

	     wdct = bit (divide (len + 35, 36, 12, 0));	/* Compute word count for card. */
	     card.cnthi = wdct;			/* Set high order part of word count. */
	     card.cntlo = substr (wdct, 7);		/* And low order part. */

	     call write_7_card;			/* Write out the card. */

	     nelt = nelt + len;			/* Bump elements transmitted. */
	end;

	card.cnthi, card.cntlo = "0"b;		/* Clear word count. */
	card.data = bit (bin (bitcnt, 36));		/* Set bitcount on card. */
	card.tag = "011"b;				/* Set tag indicating bitcount card. */

	call write_7_card;				/* Write out the bit count card. */

	return;


		/*  */

write_7_card: proc;

	card.seq = bit (bin (seqno, 15));		/* Set the sequence number on card. */

	card.cksm = check_cd (out);			/* Insert the checksum. */

	number = seqno;				/* Set sequence number for ID field. */
	string (card.id) = "0"b;			/* Clear the ID field. */
	do i = 5 to 1 by -1;			/* Convert each digit to column binary representation. */
	     tenth = divide (number, 10, 17, 0);	/* Compute number of 10's. */
	     j = number - tenth * 10;			/* Get a digit. */
	     substr (card.id (i), j+3, 1) = "1"b;	/* Insert correct column binary bit. */
	     number = tenth;			/* Iterate for next digit. */
	end;

	call ios_$write (stream, out, 0, 1, j, iostatus);	/* Write out the card image. */
	if substr (iostatus, 1, 36) | j = 0 then do;	/* Check for error. */
	     substr (iostatus, 46, 1) = "0"b;
	     go to error_return;
	end;

	seqno = seqno + 1;				/* Bump card sequence number. */

	return;


     end write_7_card;


		/*  */

error_return:
reof:
	return;


		/*  */

viipunch_getsize: entry (sdb_ptr, elsize, iostatus);

dcl  elsize fixed bin;				/* element size */


	iostatus = "0"b;				/* Clear status bits. */

	elsize = 1;				/* Element size is 1 bit. */

	return;



     end viipunch_read;
