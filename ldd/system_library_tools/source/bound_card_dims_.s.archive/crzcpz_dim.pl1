/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(86-06-04,Hartogs), approve(86-06-04,MCR7383),
     audit(86-06-05,Coppola), install(86-07-18,MR12.0-1098):
     Changed to user version constant in rcp_device_info.incl.pl1
                                                   END HISTORY COMMENTS */


crzcpz_dim: procedure;

/* Originally coded by Ammons and Ohlin, June 1971 */


/* Modified 8/74 by Noel I. Morris for I/O Interfacer operation. */
/* Modified to combine reader & punch functions, 12/74 by Noel I. Morris	*/
/* Modified by J. C. Whitmore, 6/78, to delay printing messages until blocking */




dcl  stream_name char (*),				/* Name of current stream */
     crzcpz char (*),				/* Name of  DIM  being attached */
     device char (*),				/* Name of device being attached */
    (mode, new_mode, old_mode) char (*),		/* Device attributes */
     iostatus bit (72) aligned,			/* Status */
     element_size fixed bin (17),			/* Number of bits in element */
     offset fixed bin (17),				/* Offset from wkspptr */
     nelem fixed bin (17),				/* Number of elements requested */
     nelemt fixed bin (17),				/* Number of elements actually transmitted */
     sdb_ptr pointer,				/* Pointer to stream data block */
    (xwkspptr, wkspptr) pointer,			/* Pointer to workspace */
     dvname char (6);				/* name of device type */

dcl  error_table_$ionmat ext fixed bin (35),		/* Error code - IOname already attached */
     error_table_$no_room_for_dsb ext fixed bin (35),	/* Error code - No room available for dsb */
     error_table_$invalid_elsize ext fixed bin (35),	/* Error code - Invalid element size */
     error_table_$invalid_read ext fixed bin (35),	/* Error code - Invalid read */
     error_table_$invalid_write ext fixed bin (35),	/* Error code - Invalid write */
     error_table_$net_timeout ext fixed bin (35),		/* Error code - Connect timed out */
     error_table_$no_operation ext fixed bin (35),	/* Error code - io operation not done */
     error_table_$undefined_order_request ext fixed bin (35), /* Error code - it is obvious, right? */
     error_table_$eof_record ext fixed bin (35);		/* Error code - eof found */

dcl  crz_status_table_$crz_status_table_ ext;
dcl  cpz_status_table_$cpz_status_table_ ext;

dcl (addr, addrel, bin, bit, divide, mod, null, rel, substr, unspec) builtin;



dcl 1 sdb aligned based (sdb_ptr),			/* Declare stream data block */
    2 outer_module_name char (32) aligned,
    2 device_name_list_ptr pointer,
    2 device_name,
      3 next_device_ptr pointer,
      3 name_size fixed bin (17),
      3 name char (32) aligned,
    2 ev_list aligned,				/* Event list for ipc_ */
      3 count fixed bin (17),				/* Event count = Always one */
      3 evchan fixed bin (71),			/* Event evchan name */
    2 devx fixed bin,				/* Device index returned by IOI */
    2 punch bit (1),				/* "0"b => reader; "1"b => punch */
    2 rcp_id bit (36),				/* ID for RCP attachment */
    2 areap ptr,					/* pointer to sdb allocation area */
    2 wsegp ptr,					/* pointer to IOI working segment */
    2 stat_tablep ptr,				/* pointer to status analysis table */
    2 running bit (1),				/* "1"b if channel running */
    2 eof_flag bit (1),				/* EOF recogntion - "1" = on - See order call */
    2 iobegin fixed bin (18),				/* index for starting up I/O */
    2 iocur fixed bin (18),				/* index for queuing next I/O record */
    2 movecur fixed bin (18),				/* index for copying next record */
    2 movestop fixed bin (18),			/* index for stopping data copy */
    2 term_idcw bit (36),				/* IDCW for stopping channel */
    2 io_idcw bit (36),				/* IDCW for reading or punching binary card */
    2 wait_flag bit (1) aligned,			/* waiting for special interrupt flag */
    2 marker_count fixed bin,				/* counter for setting marker interrupts */
    2 error_count fixed bin,				/* count of errors */
    2 card_count fixed bin,				/* number of cards read/punched since last reset */
    2 last_iom_stat bit (72),				/* last useful status bits reported */
    2 print_message bit (1),				/* print the following message before blocking */
    2 message char (256) var;				/* last error message not reported */

dcl  workspace (27) bit (36) based (wkspptr) aligned;	/* Workspace allocated by caller */

dcl 1 wseg based (wsegp) aligned,			/* working segment for I/O Interfacer */
    2 dcwlist (0:33),				/* DCW list */
      3 idcw bit (36),				/* Instruction DCW */
      3 dcw bit (36),				/* data transfer DCW */
    2 tdcw bit (36),				/* TDCW to beginning of list */
    2 pad bit (36),
    2 buffer (0:33),				/* card image buffer */
      3 words (27) bit (36);

dcl  i fixed bin (17),				/* Do loop position indicator */
     iostop fixed bin (18),				/* place to stop queuing I/O */
     ionext fixed bin (18),				/* index for terminate IDCW */
     rcode fixed bin (35),				/* IOI error code - 0 = OK */
     ev_done fixed bin,				/* ipc_: 0 = no event yet, 1 = event occured */
     area_ptr pointer,
     wksp_max fixed bin (19),				/* max size of IOI workspace buffer */
     time_max fixed bin (52),				/* max time for IOI connect to complete */
     rcp_state fixed bin,				/* state variable from check_attach */
     temp_iom_stat bit (72) aligned,			/* Space to hold iom status on error */
     listen_based_area area ((16374)) based (area_ptr);	/* Area in listen_ to allocate sdb */

dcl  punch_alert_flag bit (18) aligned static options (constant) init ("000000000000000001"b);
dcl  dev_stat_bits bit (72) aligned int static options (constant) /* bits used by analyze_device_stat_ */
     init ("377700770000"b3 || (12) "0"b3);


dcl  get_system_free_area_ ext entry (ptr),
     ioi_$workspace entry (fixed bin, ptr, fixed bin (18), fixed bin (35)),
     ioi_$connect entry (fixed bin, fixed bin (18), fixed bin (35)),
     ipc_$create_ev_chn ext entry (fixed bin (71), fixed bin (35)),
     ipc_$drain_chn ext entry (fixed bin (71), fixed bin (35)),
     ipc_$delete_ev_chn ext entry (fixed bin (71), fixed bin (35)),
     ipc_$block ext entry (ptr, ptr, fixed bin (35)),
     ipc_$read_ev_chn entry (fixed bin (71), fixed bin, ptr, fixed bin (35)),
     rcp_$attach entry (char (*), ptr, fixed bin (71), char (*), bit (36) aligned, fixed bin (35)),
     rcp_$check_attach entry (bit (36) aligned, ptr, char (*), fixed bin, fixed bin (19), fixed bin (52),
     fixed bin, fixed bin (35)),
     rcp_$detach entry (bit (36) aligned, bit (*), fixed bin, char (*), fixed bin (35)),
     analyze_system_fault_ entry (char (*) aligned, bit (72) aligned),
     analyze_device_stat_$rs entry (char (*) var, ptr, bit (72) aligned, bit (18) aligned),
     convert_ipc_code_ entry (fixed bin (35)),
     com_err_ entry options (variable);

dcl 1 rcp_info like device_info aligned auto;		/* automatic copy of RCP info structure */

dcl 1 ipc_message aligned,
    2 chname fixed bin (71),				/* Chan over which message arrived */
    2 message fixed bin (71),				/* 2-word event message */
    2 sender bit (36),				/* Sending process */
    2 origin,					/* Origin of event message */
      3 devsignal bit (18),				/* 1 = device signal */
      3 ring bit (18),				/* Senders ring number */
    2 channel_index fixed bin;			/* Index in wait list */


/*  */

% include rcp_device_info;

% include status_flags;

/*  */

% include ioi_stat;


/*  */

% include iom_pcw;


/*  */

% include iom_dcw;

%include prt_order_info;


/*  */

crz_attach: entry (stream_name, crzcpz, device, mode, iostatus, sdb_ptr); /* Attach entry */
cpz_attach: entry (stream_name, crzcpz, device, mode, iostatus, sdb_ptr); /* Attach entry */

	iostatus = "0"b;				/* Zero iostatus string */
	if sdb_ptr ^= null () then do;		/* Check for multiple attachments */
	     substr (iostatus, 1, 36) = unspec (error_table_$ionmat); /* If multiple attachment return code */
	     go to exit;
	end;					/* End sdb_ptr not null do group */

	call get_system_free_area_ (area_ptr);		/* Get ptr to area in listen_ before alloc */
	allocate sdb in (listen_based_area) set (sdb_ptr); /* Create stream data block */
	if sdb_ptr = null () then do;			/* If this - then no room for sdb */
	     substr (iostatus, 1, 36) = unspec (error_table_$no_room_for_dsb); /* Send message */
	     go to exit;				/* Exit */
	end;					/* End sdb_ptr null do group */
	sdb.areap = area_ptr;			/* Save area pointer for freeing sdb. */

	outer_module_name = crzcpz;			/* Put name this outer module in sdb */
	device_name_list_ptr = addr (sdb.device_name);	/* Set pointer */
	next_device_ptr = null;			/* Only one device allowed */
	name_size = 32;				/* Set name size */
	name = device;				/* Put attached device name in sdb */

	if outer_module_name = "cpz" then do;		/* If punch ... */
	     punch = "1"b;				/* Set indicator to say punch attached. */
	     dvname = "punch";
	     sdb.stat_tablep = addr (cpz_status_table_$cpz_status_table_);
	end;					/* Set pointer to punch status interpretation table. */
	else do;					/* If reader ... */
	     punch = "0"b;				/* Set indicator to say reader attached. */
	     dvname = "reader";
	     sdb.stat_tablep = addr (crz_status_table_$crz_status_table_);
	end;					/* Set pointer to reader status interpretation table. */

	call ipc_$create_ev_chn (evchan, rcode);	/* Create event channel so that the supervisor */
	if rcode ^= 0 then do;			/* knows who to wake when we are blocked */
	     call convert_ipc_code_ (rcode);
	     go to free;				/* to free sdb */
	end;
	ev_list.count = 1;				/* Initialize event list count */

	device_info_ptr = addr (rcp_info);		/* Get pointer to RCP info for device. */
	rcp_info.version_num = DEVICE_INFO_VERSION_1;			/* Set up the RCP info structure. */
	rcp_info.usage_time = 0;			/* Don't know how long we'll use device. */
	rcp_info.wait_time = 0;			/* We are not willing to wait. */
	rcp_info.system_flag = "0"b;			/* Not system process. */
	rcp_info.device_name = name;			/* Set appropriate device name. */

	call rcp_$attach (dvname, device_info_ptr, evchan, "", rcp_id, rcode);
	if rcode ^= 0 then go to free;		/* Attempt to attach the device. */

check:	call rcp_$check_attach (rcp_id, device_info_ptr, "", devx, wksp_max, time_max,
	     rcp_state, rcode);			/* Check on progress of attachment. */
	if rcode ^= 0 then go to free;

	go to attach_state (rcp_state);		/* Dispatch on state variable. */

attach_state (1):					/* Short wait needed */
	call ipc_$block (addr (sdb.ev_list), addr (ipc_message), rcode);
	if rcode ^= 0 then do;			/* Wait for attachment to complete. */
	     call convert_ipc_code_ (rcode);
	     go to free;
	end;
	go to check;				/* Perform check again. */

attach_state (2):					/* long wait */
attach_state (3):					/* error occurrence */
	go to free;				/* This is an error condition. */

attach_state (0):					/* Successful attachment */
	call ioi_$workspace (devx, wsegp, 1024, rcode);	/* Get working segment. */
	if rcode ^= 0 then go to free;		/* Check error code */

	do i = 0 to 33;				/* Insert DCWs into working segment */
	     dcwp = addr (dcwlist (i).dcw);		/* Get pointer to place for IOTD. */
	     dcw.address = rel (addr (buffer (i)));	/* Set offset of data buffer. */
	     dcw.tally = bit (bin (27, 12));		/* Set DCW tally. */
	end;

	idcwp = addr (sdb.term_idcw);			/* Get pointer to template terminate IDCW. */
	sdb.term_idcw = "0"b;			/* Clear IDCW. */
	idcw.command = "100000"b;			/* Command is RSS. */
	idcw.device = "000001"b;
	idcw.code = "111"b;
	idcw.chan_cmd = "000010"b;
	idcw.count = bit (bin (1, 6));

	idcwp = addr (sdb.io_idcw);			/* Get pointer to template read/punch IDCW. */
	sdb.io_idcw = "0"b;				/* Clear IDCW. */
	if punch then				/* If punch ... */
	     idcw.command = "001001"b;		/* Command is punch card binary. */
	else					/* If reader ... */
	idcw.command = "000001"b;			/* Command is read card binary. */
	idcw.device = "000001"b;
	idcw.code = "111"b;
	idcw.control = "10"b;

	tdcwp = addr (wseg.tdcw);			/* Get pointer to transfer DCW. */
	wseg.tdcw = "0"b;				/* Clear the DCW. */
	tdcw.address = bit (bin (0, 18));		/* Transfer back to beginning of list. */
	tdcw.type = "10"b;				/* Set type bits. */

	sdb.running = "0"b;				/* Indicate channel not running. */
	sdb.wait_flag = "0"b;			/* Turn off waiting for special flag. */
	sdb.eof_flag = "1"b;			/* Turn on EOF recognition mode */

	sdb.iobegin,				/* Set indices for I/O and data copying. */
	     sdb.iocur,
	     sdb.movecur = 0;
	if punch then sdb.movestop = 32;
	else sdb.movestop = 0;
	sdb.marker_count = 0;			/* Reset marker flag count. */
	sdb.error_count = 0;			/* Reset error count. */
	sdb.card_count = 0;				/* reset usage counter */
	sdb.last_iom_stat = ""b;			/* Reset last reported status */
	sdb.print_message = "0"b;			/* say no message to print */
	sdb.message = "";				/* and clear the status message */

	call ipc_$drain_chn (evchan, rcode);

	return;					/* Return to caller */





free:	substr (iostatus, 1, 36) = unspec (rcode);	/* Return error code. */

	go to detach_it;
						/* Now drop into detach code. */


crz_detach: entry (sdb_ptr, device, mode, iostatus);	/* Detach entry point */
cpz_detach: entry (sdb_ptr, device, mode, iostatus);	/* Detach entry point */

	iostatus = ""b;				/* clear the status */

detach_it:

	call ipc_$delete_ev_chn (evchan, rcode);	/* Delete event channel */

	call rcp_$detach (rcp_id, "0"b, error_count, "", rcode);
	if rcode ^= 0 then				/* Attempt to detach the device. */
	     if substr (iostatus, 1, 36) = ""b then	/* if not aborting an attach */
		substr (iostatus, 1, 36) = unspec (rcode); /* Put error code in return iostatus */

	area_ptr = sdb.areap;			/* Get back pointer to allocation area. */
	free sdb in (listen_based_area);		/* Free-up allocated sdb */

exit:	substr (iostatus, 52, 1) = "1"b;		/* Set ioname detached bit */
	substr (iostatus, 41, 1) = "1"b;		/* Set transaction terminated bit */
	return;


/*  */

crz_read:	entry (sdb_ptr, xwkspptr, offset, nelem, nelemt, iostatus); /* Read entry point */

/* This is the read loop for the Ohlin - Ammons card reader DIM */

	rcode = 0;				/* Clear error code. */
	nelemt = 0;				/* Zero elements transmitted to start */
	wkspptr = addrel (xwkspptr, offset * 27);	/* Copy pointer, and add in offset */
	sdb.last_iom_stat = ""b;			/* reset for each read */
	sdb.wait_flag = "0"b;			/* cancel last wait */
	sdb.print_message = "0"b;			/* and pending message */

	do while (nelemt < nelem);			/* Read as many cards as caller asked for */
	     iostop = mod (sdb.movecur - 1, 34);	/* Compute stopping place for DCW list. */

	     if sdb.iocur ^= iostop then		/* If more DCW's can be queued ... */
		call set_io;			/* Queue up some more I/O. */

	     else if sdb.movecur ^= sdb.movestop then do; /* If we have cards to move ... */

		if eof_flag then			/* Check if EOF recognition is turned on */
		     if wseg.buffer (movecur).words (1) = /* Check for multiple 5-7 punch in column 1 */
		     "002400000000"b3 |
		     (wseg.buffer (movecur).words (1) = "401240124020"b3 /* Check for ++FOF */
		     & wseg.buffer (movecur).words (2) = "201040100000"b3) |
		     (wseg.buffer (movecur).words (1) = "401240125020"b3 /* Check for ++eof */
		     & wseg.buffer (movecur).words (2) = "601050100000"b3) then
			do;
			substr (iostatus, 41, 1) = "1"b; /* Set transaction terminated bit */
			if nelemt = 0 then do;	/* First time through, don't give EOF status. */
			     substr (iostatus, 46, 1) = "1"b; /* Set end-of-data bit */
			     movecur = mod (movecur + 1, 34); /* Now throw card away */
			end;			/* Note that EOF card is looked at twice */
			substr (iostatus, 1, 36) = unspec (error_table_$eof_record);
			return;			/* Return to caller */
		     end;				/* End EOF recognized */

		wkspptr -> workspace =		/* Address where we are putting it */
		     addr (wseg.buffer (movecur)) -> workspace; /* Where it is in buffer */
		wkspptr = addrel (wkspptr, 27);	/* Update workspace pointer */
		nelemt = nelemt + 1;		/* Keep track of number of cards moved */
		sdb.card_count = sdb.card_count + 1;	/* and total cards */
		movecur = mod (movecur + 1, 34);	/* Increment data copy index. */
	     end;

	     else call wait_io;			/* Otherwise, wait for I/O completion. */

	     if rcode ^= 0 then do;
		substr (iostatus, 1, 36) = unspec (rcode);
		substr (iostatus, 41, 1) = "1"b;	/* Set transaction terminated. */
		return;				/* Return to caller immediately. */
	     end;

	end;

	return;					/* Return to caller of crzcpz_read */

/*  */

cpz_write: entry (sdb_ptr, xwkspptr, offset, nelem, nelemt, iostatus); /* Write entry point */

/* This is the write loop for the card punch DIM */

	rcode = 0;				/* Clear the error code. */
	nelemt = 0;				/* Zero elements transmitted to start */
	wkspptr = addrel (xwkspptr, offset * 27);	/* Copy pointer, and add in offset */
	sdb.last_iom_stat = ""b;
	sdb.wait_flag = "0"b;			/* cancel last wait */
	sdb.print_message = "0"b;			/* and pending message */

	do while (nelemt < nelem);			/* Write as many cards as caller asked for */
	     if movecur ^= movestop then do;		/* If room for more cards ... */
		addr (wseg.buffer (movecur)) -> workspace = /* Where data is going in buffer */
		     wkspptr -> workspace;		/* Address where we are getting it from */
		wkspptr = addrel (wkspptr, 27);	/* Update workspace pointer */
		nelemt = nelemt + 1;		/* Keep track of number of cards moved */
		sdb.card_count = sdb.card_count + 1;	/* and total cards */

		iocur = movecur;			/* Set up DCW list for card just copied. */
		call set_io;			/* Patch new element into DCW list. */
		movecur = iocur;			/* Copy next card into next slot for I/O. */
	     end;

	     else call wait_io;			/* Otherwise, wait for I/O to complete. */

	     if rcode ^= 0 then do;
		substr (iostatus, 1, 36) = unspec (rcode);
		substr (iostatus, 41, 1) = "1"b;	/* Set transaction terminated. */
		return;				/* Return to caller immediately. */
	     end;

	end;

	return;					/* Return to caller of cpz_write */

/*  */

set_io:	proc;					/* procedure to set IDCW's to perform I/O */

	     ionext = mod (iocur + 1, 34);		/* Compute place for terminate IDCW. */

	     dcwlist (ionext).idcw = term_idcw;		/* Insert stopper first. */
	     dcwlist (iocur).idcw = io_idcw;		/* Now insert I/O IDCW. */

	     if running then do;			/* If channel is running ... */
		marker_count = marker_count + 1;	/* Bump the marker count. */
		if marker_count >= 17 then do;	/* Place a marker at half-way point. */
		     idcwp = addr (dcwlist (iocur).idcw); /* Get pointer to current IDCW. */
		     idcw.control = "11"b;		/* Make IDCW store marker status. */
		     marker_count = 0;		/* Reset the marker counter. */
		end;
	     end;

	     iocur = ionext;			/* Set index for next slot for I/O. */

	     if ^running then call start_io;		/* Fire up the IOM. */

	     return;

	end set_io;

/*  */

start_io:	proc;					/* procedure to start up card I/O */

	     if ^wait_flag then if iocur ^= iobegin then do; /* If something to do ... */
		     marker_count = 0;		/* Reset the marker count. */
		     running = "1"b;		/* Turn on running flag. */
		     call ioi_$connect (devx, 2*iobegin, rcode); /* Fire up the IOM. */
		end;

	     return;

	end start_io;





wait_io:	proc;					/* procedure to wait for card I/O */

	     if ^sdb.running then			/* If channel is idle ... */
		call start_io;			/* Give it something to do. */

	     call ipc_$read_ev_chn (sdb.evchan, ev_done, addr (ipc_message), rcode);
	     if rcode ^= 0 then do;
bad_ipc:		call convert_ipc_code_ (rcode);
		return;
	     end;

	     if ev_done = 0 then do;			/* no event yet, print pending message and block */

		if sdb.print_message then do;		/* if waiting, tell why once */
		     call com_err_ (0, name, sdb.message);
		     sdb.print_message = "0"b;
		end;

		call ipc_$block (addr (sdb.ev_list), addr (ipc_message), rcode);
		if rcode ^= 0 then go to bad_ipc;

	     end;

	     call stat_check;			/* Examine status. */

	     return;

	end wait_io;

/*  */

stat_check: proc;					/* Card I/O status check entry  */

dcl  lx fixed bin,
     flags bit (18) aligned;

	     flags = "0"b;				/* Clear flags. */

	     imp = addr (ipc_message.message);		/* Get address of ioi status message */
	     if imess.level = "111"b then do;		/* If this is a special interupt... */
		wait_flag = "0"b;			/* Reset this in case waiting for special */
		return;				/* And all done */
	     end;

	     if imess.st then do;			/* If status is really present */
		if imess.time_out then do;		/* if termination caused by a time out */
		     rcode = error_table_$net_timeout;	/* this is a reasonable error */
		     running = "0"b;		/* not running any more */
		     return;
		end;

		temp_iom_stat = imess.status;		/* make a double word iom_stat */
		if bin (imess.level) <= 5 then do;	/* If system fault, terminate, or marker ... */
		     if imess.er then		/* If error occurred ... */
			if imess.level = "001"b then do; /* If system fault ... */
			     call analyze_system_fault_ (name, temp_iom_stat);
			     sdb.message = "Waiting for interrupt after last system fault error.";
			     sdb.print_message = "0"b; /* print this later if needed */
			     sdb.last_iom_stat = ""b;
			     sdb.error_count = sdb.error_count + 1; /* add them up */
			     sdb.wait_flag = "1"b;	/* wait for special status */
			end;
			else do;			/* Must be terminate status. */
			     call analyze_device_stat_$rs (sdb.message, stat_tablep, temp_iom_stat, flags);
						/* Analyze the status. */
			     sdb.wait_flag = (flags & halt_flag) ^= "0"b; /* Set wait flag based on examined status. */
			     if flags & report_flag then do; /* should we report this */
				sdb.error_count = sdb.error_count + 1;
				if (temp_iom_stat & dev_stat_bits) ^= sdb.last_iom_stat then do;
				     sdb.last_iom_stat = (temp_iom_stat & dev_stat_bits); /* save a message */
				     if ^sdb.wait_flag then do;
					call com_err_ (0, name, sdb.message);
					sdb.print_message = "0"b; /* say message was printed */
				     end;
				     else sdb.print_message = "1"b; /* print message unless returning */
				end;
			     end;
			     else sdb.print_message = "0"b; /* suppress the message */
			end;

		     lx = bin (imess.offset);		/* Copy list index for this status */
		     if flags & backup_flag then lx = lx - mod (lx, 2);
						/* If backup flag ON, go back to IDCW. */

		     iobegin = mod (divide (lx + 1, 2, 17, 0), 34);
						/* Compute place to start next block of I/O. */
		     if punch then do;		/* If running punch ... */
			movestop = mod (iobegin - 2, 34); /* Set place for stopping data copy. */
			if flags & punch_alert_flag then /* If punch alert ... */
			     iobegin = mod (iobegin - 1, 34); /* Back up still one more card. */
		     end;
		     else movestop = iobegin;		/* For reader, set place for stopping data copy. */
		     running = imess.run;		/* Indicate if channel still running. */
		end;
	     end;

	     return;

	end stat_check;



crz_setsize: entry (sdb_ptr, element_size, iostatus);	/* Set size entry point */
cpz_setsize: entry (sdb_ptr, element_size, iostatus);	/* Set size entry point */

	if element_size ^= 972 then			/* 972 bits equals 27 words */
	     substr (iostatus, 1, 36) = unspec (error_table_$invalid_elsize); /* Send message */
	else
	substr (iostatus, 41, 1) = "1"b;		/* Set transaction terminated bit */

	return;					/* Return to caller */


crz_getsize: entry (sdb_ptr, element_size, iostatus);	/* Get size entry point */
cpz_getsize: entry (sdb_ptr, element_size, iostatus);	/* Get size entry point */

	element_size = 972;				/* Set element size */
	iostatus = "0"b;				/* Zero iostatus string */
	substr (iostatus, 41, 1) = "1"b;		/* Set transaction terminated bit */

	return;					/* Return to caller */


crz_changemode: entry (sdb_ptr, new_mode, old_mode, iostatus); /* Change mode entry point */

	old_mode = "r";				/* Set old mode */
	iostatus = "0"b;				/* Zero iostatus string */
	substr (iostatus, 41, 1) = "1"b;		/* Set transaction terminated bit */
	if new_mode ^= "" & new_mode ^= "r" then	/* Check for legal mode */
	     substr (iostatus, 1, 36) = unspec (error_table_$invalid_write);

	return;					/* Return to caller */


cpz_changemode: entry (sdb_ptr, new_mode, old_mode, iostatus); /* Change mode entry point */

	old_mode = "w";				/* Set old mode */
	iostatus = "0"b;				/* Zero iostatus string */
	substr (iostatus, 41, 1) = "1"b;		/* Set transaction terminated bit */
	if new_mode ^= "" & new_mode ^= "w" then	/* Check for legal mode */
	     substr (iostatus, 1, 36) = unspec (error_table_$invalid_read);

	return;					/* Return to caller */


crz_resetread: entry (sdb_ptr, iostatus);		/* Resetread entry point. */

	iostatus = "0"b;
	do while (running);				/* Wait until channel stops. */
	     call wait_io;
	end;
	wait_flag = "0"b;				/* Now, reset the waiting for special flag. */

	iobegin,					/* Reset all indices. */
	     iocur,
	     movestop,
	     movecur = 0;

	return;

crz_order: entry (sdb_ptr, request, orderp, iostatus);	/* Order entry point */

dcl  request char (*);				/* order request */

	iostatus = "0"b;

	if request = "eof_off" | request = "off" then	/* Check for off message */
	     do;
	     eof_flag = "0"b;			/* Turn off the flag */
out:	     substr (iostatus, 41, 1) = "1"b;		/* Set terminate iostatus */
	     return;
	end;

	if request = "eof_on" | request = "on" then
	     do;
	     eof_flag = "1"b;			/* Turn the flag on */
	     goto out;
	end;

/* If we get here - "request" was not valid */

	substr (iostatus, 1, 36) = unspec (error_table_$undefined_order_request);
	go to out;


cpz_order: entry (sdb_ptr, request, orderp, iostatus);	/* Order entry point */

	iostatus = "0"b;

	if request = "runout" then do;		/* To run out the remaining cards in buffer. */
	     wait_flag = "0"b;			/* Turn off wait flag. */
	     do while (iocur ^= iobegin);		/* Try until all remaining cards are punched. */
		call wait_io;
		if rcode ^= 0 then do;
		     substr (iostatus, 1, 36) = unspec (rcode);
		     go to out;
		end;
	     end;
	     go to out;
	end;

	if request = "get_error_count" then do;
	     if orderp = null then do;		/* bad news for this entry */
		substr (iostatus, 1, 36) = unspec (error_table_$no_operation);
		go to out;
	     end;

	     ret_error_count = sdb.error_count;		/* give it to the caller */
	     go to out;				/* and we are done */
	end;

	if request = "reset" then do;			/* reset the card counter */
	     sdb.card_count = 0;
	     go to out;
	end;

	if request = "get_count" then do;		/* report the number of cards punched */
	     if orderp = null then do;		/* bad news for this entry */
		substr (iostatus, 1, 36) = unspec (error_table_$no_operation);
		go to out;
	     end;
	     unspec (counts) = ""b;			/* clear everything */
	     counts.line_count = sdb.card_count;	/* assume one card equals one line */
	     go to out;
	end;

/*	if we pass here, the order is not defined */

	substr (iostatus, 1, 36) = unspec (error_table_$undefined_order_request);
	go to out;


     end;
