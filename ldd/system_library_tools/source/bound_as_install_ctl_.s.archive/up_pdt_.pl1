/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: style4 */
up_pdt_:
     procedure (segp, wordcount, instaldir, instalname, instalp, P_ansp, ip, answer, code);


/* UP_PDT_ - update project definition table.

   A major rewrite of this module was done in March 1792, to provide for the
   management of usage figures per user in the PDT entry.
   This requires that the position of a PDT entry not change while the system is running,
   since there are pointers in the answer table to a user's usage figures, for use by act_ctl_.
   Initially coded by Michael J. Spier, February 13, 1970
   Modified by J. Phillppps 6/72 to give project administrators read access to their PDT.
   Modified 741204 by PG for AIM stuff.
   Modified May 1976 by T. Casey to update cutoff warning thresholds.
   Modified May 1978 by T. Casey to update pdir_quota, and issue warning msg for grace, pdir quota, or rings > project max.
   Modified June 1978 by T. Casey to build hash table for pdt.
   Modified November 1978 by T. Casey for MR7.0 absentee control parameters.
   Modified July 1979 by C. Hornig to adjust user cutoff BEFORE installing new cutoff.
   Modified Feb 1980 by M. B. Armstrong to implement multiple rate structures. (UNCA)
   Modified by R. McDonald May 1980 to include page charges. (UNCA)
   Modified by E. N. Kittlitz June 1981 for UNCA rate structures, page charges, bug fixes.
   Modified November 1981, E. N. Kittlitz.  user_table_entry conversion.
   Modified December 1981, E. N. Kittlitz.  add user_warn controls.
   Modified January 1982, BIM for author changes (lock and install_time)
   Modified February 1982, E. N. Kittlitz. part of the xxx.install.acs changes.
   Modified September 1982, E. N. Kittlitz. ACL changes. default_ring.
   Modified June 1983, E.N. Kittlitz. fix bumping of deleted users.
   Modified 1984-08-27 BIM for user login ranges.
*/

/****^  HISTORY COMMENTS:
  1) change(86-06-05,GJohnson), approve(86-06-05,MCR7387),
     audit(86-06-10,Martinson), install(86-07-11,MR12.0-1092):
     Correct error message documentation.
  2) change(86-09-26,GDixon), approve(86-09-26,MCR7499),
     audit(86-10-08,Beattie), install(86-10-13,MR12.0-1183):
     Initialize htp pointer to null to avoid reference through unset variable
     (phx20042).
  3) change(87-04-26,GDixon), approve(87-07-13,MCR7741),
     audit(87-07-16,Hartogs), install(87-08-04,MR12.1-1055):
     Upgraded for change to answer_table.incl.pl1 and user_table_entry.incl.pl1
  4) change(88-09-14,Parisek), approve(88-09-28,MCR7996),
     audit(88-10-05,Hunter), install(88-10-07,MR12.2-1140):
     Truncate the revised pdt to its current length which might have changed.
                                                   END HISTORY COMMENTS */

/* parameters */

dcl  code fixed bin (35);
dcl  (segp, instalp, P_ansp, ip) ptr, wordcount fixed bin;
dcl  instaldir char (*), instalname char (*), answer char (*);

/* DECLARATION OF EXTERNAL SYMBOLS */

dcl  adjust_cutoff_ entry (ptr, fixed bin (71));
dcl  aim_check_$greater_or_equal entry (bit (72) aligned, bit (72) aligned) returns (bit (1) aligned);
dcl  aim_check_$in_range entry (bit (72) aligned, (2) bit (72) aligned) returns (bit (1) aligned);
dcl  get_group_id_ entry () returns (char (32) aligned);
dcl  get_process_id_ entry () returns (bit (36) aligned);
dcl  (sys_log_, sys_log_$error_log) entry options (variable);
dcl  hcs_$add_acl_entries entry (char (*), char (*), ptr, fixed bin, fixed bin (35));
dcl  hcs_$initiate entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr, fixed bin (35));
dcl  hcs_$delentry_seg entry (ptr, fixed bin (35));
dcl  hcs_$set_safety_sw entry (char (*), char (*), bit (1) aligned, fixed bin (35));
dcl  hcs_$set_bc entry (char (*), char (*), fixed bin (24), fixed bin (35));
dcl  hcs_$make_seg entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35));
dcl  create_homedir_ entry (character (*), character (*), bit (72) aligned, character (*), character (*),
	character (*), fixed binary (35));
dcl  asu_$bump_code entry (ptr, fixed bin (35), char (8), fixed bin (35), fixed bin);
dcl  ioa_$rsnnl entry options (variable);
dcl  hcs_$truncate_seg entry (ptr, fixed bin, fixed bin (35));
dcl  hash_$in entry (ptr, char (*) aligned, fixed bin, fixed bin (35));
dcl  hash_$make entry (ptr, fixed bin, fixed bin (35));
dcl  match_star_name_ entry (char (*), char (*), fixed bin (35));

/* based */

dcl  1 movetable based aligned,
       2 moveary (movelen) fixed bin (35);

/* builtins */

dcl  (addr, clock, fixed, float, index, max, min, null, rel, rtrim, string, substr, verify) builtin;

/* external static */

dcl  (as_error_table_$user_deleted, as_error_table_$user_auth_excludes)
	fixed bin (35) external static;

/* DECLARATION OF INTERNAL STATIC VARIABLES */

dcl  LEGAL char (95) int static options (constant) init	/* Printables except PAD, semicolon, but with BS */
	(" !""#$%&'()*+,-./0123456789:<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~");

dcl  1 acla (12) aligned,
       2 userid char (32),
       2 mode bit (36),
       2 xmode bit (36),
       2 rcode fixed bin (35);

/* DECLARATION OF AUTOMATIC STORAGE VARIABLES */

dcl  access_ceiling bit (72) aligned;
dcl  time_now fixed bin (71);				/* clock reading */
dcl  n_acl fixed bin;
dcl  n_acl_pjadmin fixed bin;
dcl  (i, ii, j, k) fixed bin (18);
dcl  lcode fixed bin (35);
dcl  movelen fixed bin (24);
dcl  anonymous_user bit (1) aligned;
dcl  offset bit (18) aligned;
dcl  (p, q, satp, satep, pdtp, pdtep, htp, oldp, xp, tp) ptr;
dcl  procid bit (36) aligned;
dcl  tempid char (30) aligned;
dcl  debg char (8);
dcl  (bad_lr, bad_mr, bad_pq, bad_gt) fixed bin init (0);
dcl  (lr, mr) fixed bin;
%page;
/* ======================================================= */

/* This first section of code checks every entry in the proposed new PDT,
   to make sure that all entries are in a legal format and that the installer
   is authorized to install this PDT */

	time_now = clock ();
	procid = get_process_id_ ();
	ansp = P_ansp;
	if procid ^= anstbl.as_procid then return;	/* privileged proc */

	access_ceiling = installation_parms.access_authorization_ceiling;

	instalp = null;				/* pre-set returned pointer */
	instaldir, instalname = " ";			/* ... */
	if wordcount < 64 then do;			/* make sure segment contains something */
	     answer = "wordcount < 64";
	     code = 10;
	     return;
	end;
	if segp -> pdt.version ^= PDT_version then do;	/* Check table format */
	     answer = "incorrect table format";
	     code = 9;
	     return;
	end;
	if segp -> pdt.current_size > segp -> pdt.max_size then do;
	     answer = "current_size > max_size";
	     code = 11;
	     return;
	end;
	if segp -> pdt.n_users > segp -> pdt.current_size then do;
	     answer = "n_users > current_size";
	     code = 12;
	     return;
	end;
	offset = rel (addr (segp -> pdt.user (segp -> pdt.current_size + 1)));
	if fixed (offset, 18) - 1 > wordcount then do;
	     answer = "size inconsistent with wordcount";
	     code = 13;
	     return;
	end;
	if verify (segp -> pdt.project_name, LEGAL) ^= 0 then do;
	     answer = "project_name not ASCII";
	     code = 16;
	     return;
	end;
	call hcs_$initiate (anstbl.sysdir, "sat", "", 0, 0, satp, code);
	if satp = null then do;
	     answer = "cannot initiate SAT";
	     code = 15;
	     return;
	end;

	do i = 1 to sat.current_size;
	     satep = addr (sat.project (i));
	     if project.state = 1 then
		if project.project_id = segp -> pdt.project_name then
		     go to project_validated;
	end;
	answer = "project not in SAT: " || segp -> pdt.project_name;
	code = 21;
	return;
project_validated:
	segp -> pdt.project_dir = project.project_dir;
	instaldir = anstbl.sysdir;
	instaldir = rtrim (instaldir) || ">pdt";
	instalname = project.project_id;
	instalname = rtrim (instalname) || ".pdt";
	i = index (segp -> pdt.author.proc_group_id, " ");
	if i > 32 then i = 33;
	if i = 0 then i = 33;
	tempid = substr (segp -> pdt.author.proc_group_id, 1, i - 3); /* knock off instance tag */
	j = 1 + index (tempid, ".");			/* locate projectid begin */
	do i = 1 to 2;				/* check for system administrator */
	     if tempid = sat.system_admin (i) then go to administrator_validated;
	     if substr (sat.system_admin (i), 1, 2) = "*." then
		if substr (sat.system_admin (i), 3, 28) = substr (tempid, j, 31 - j) then
		     go to administrator_validated;
	     if substr (sat.system_admin (i), j) = "*" then
		if substr (sat.system_admin (i), 1, j - 1) = substr (tempid, 1, j - 1) then
		     go to administrator_validated;
	end;
	do i = 1 to 4;				/* check administrator's name */
	     if tempid = project.admin (i).userid then go to administrator_validated;
	     if substr (project.admin (i).userid, 1, 2) = "*." then
		if substr (project.admin (i).userid, 3, 28) = substr (tempid, j, 31 - j) then
		     go to administrator_validated;
	     if substr (project.admin (i).userid, j) = "*" then
		if substr (project.admin (i).userid, 1, j - 1) = substr (tempid, 1, j - 1) then
		     go to administrator_validated;
	end;

	answer = "installer not administrator " || tempid;
	code = 22;
	return;

administrator_validated:

	n_acl = 0;
	do i = 1 to 4;				/* put all proj. administrators on PDT ACL */
	     if project.admin (i).userid = "" then go to x2; /* when find blank acl branch out of loop */
	     n_acl = n_acl + 1;
	     acla (n_acl).userid = rtrim (project.admin (i).userid) || ".*";
	     acla (n_acl).mode = "1000"b;		/* set READ access */
	     acla (n_acl).xmode = ""b;
	end;
x2:	n_acl_pjadmin = n_acl;			/* number of project administrators */
	do i = 1 to 2;				/* put system admin on acl too. */
	     if sat.system_admin (i) = "" then go to x2a;
	     n_acl = n_acl + 1;
	     acla (n_acl).userid = rtrim (sat.system_admin (i)) || ".*";
	     do ii = 1 to n_acl_pjadmin;		/* dont let a projadmin term deny w to a sysadmin */
		call match_star_name_ ((acla (ii).userid), (acla (n_acl).userid), lcode);
		if lcode = 0 then			/* project admin is also system admin */
		     acla (ii).mode = "1010"b;	/* give proj admin rw to prevent blocking of sysadmin term */
	     end;
	     acla (n_acl).mode = "1010"b;		/* RW */
	     acla.xmode (n_acl) = ""b;
	end;
x2a:	n_acl = n_acl + 1;
	acla (n_acl).userid = get_group_id_ ();
	acla (n_acl).mode = "1010"b;
	acla.xmode (n_acl) = ""b;

	anonymous_user = "0"b;
	do i = 1 to segp -> pdt.current_size;

	     p = addr (segp -> pdt.user (i));
	     if p -> user.state < 0 then go to bast;
	     if p -> user.state > 2 then do;		/* installing state 0 or 2 entries does nothing */
bast:		answer = "illegal state value";
		code = 17;
		return;
	     end;
	     if verify (p -> user.person_id, LEGAL) ^= 0 then do;
		answer = "person_id not ASCII";
		code = 16;
		return;
	     end;
	     do j = 1 to i - 1;
		if addr (segp -> pdt.user (j)) -> user.person_id = p -> user.person_id then do;
		     answer = "User ID duplication " || p -> user.person_id;
		     code = 23;
		     return;
		end;
	     end;
	     if p -> user.person_id = "*" then do;
		if project.at.anonymous = "0"b then do;
		     answer = "anonymous user not allowed";
		     code = 24;
		     return;
		end;
		anonymous_user = "1"b;
	     end;
	     if verify (p -> user.initial_procedure, LEGAL) ^= 0 then do;
		answer = "init_proc not ASCII " || p -> user.person_id;
		code = 16;
		return;
	     end;
	     if verify (p -> user.home_dir, LEGAL) ^= 0 then do;
		answer = "home_dir not ASCII " || p -> user.person_id;
		code = 16;
		return;
	     end;
	     if verify (p -> user.outer_module, LEGAL) ^= 0 then do;
		answer = "outer_module not ASCII " || p -> user.person_id;
		code = 16;
		return;
	     end;
	     if p -> user.low_ring < project.min_ring then do;
		bad_lr = bad_lr + 1;		/* count instances of this, for warning message */
		lr = project.min_ring;		/* this is the one the user will get when he logs in */
	     end;
	     else lr = p -> user.low_ring;		/* this is the one the user will get */
	     if p -> user.high_ring > project.max_ring then do;
		bad_mr = bad_mr + 1;		/* count these for warning message */
		mr = project.max_ring;		/* user gets this on login */
	     end;
	     else mr = p -> user.high_ring;		/* user gets this */
	     if p -> user.low_ring <= 0 then do;
		answer = "minimum ring less than 1 " || p -> user.person_id;
		code = 25;
		return;
	     end;

	     if lr > mr then do;			/* if lr that user gets is > mr that he gets, he can't log in */
		call ioa_$rsnnl ("^[project^x^]low ring > ^[project^x^]high ring ^a",
		     answer, i, (lr = project.min_ring), (mr = project.max_ring), p -> user.person_id);
		code = 25;
		return;
	     end;

	     if p -> user.default_ring > 0 &		/* have a default ring (new enough PDT) */
		p -> user.default_ring < lr then do;	/* and it's too low */
		answer = "default ring is less than minimum allowed by SAT and PDT";
		code = 25;
		return;
	     end;

	     if p -> user.default_ring > mr then do;
		answer = "default ring is greater than maximum allowed by SAT and PDT";
		code = 25;
	     end;

	     if ^aim_check_$greater_or_equal (p -> user.user_authorization (2),
		p -> user.user_authorization (1))
	     then do;
		answer = "Invalid authorization range";
		code = 26;
	     end;
	     if ^aim_check_$greater_or_equal (access_ceiling, p -> user.user_authorization (2)) then do;
		answer = "authorization > access_ceiling";
		code = 18;
		return;
	     end;
	     if p -> user.pdir_quota > project.pdir_quota then
		bad_pq = bad_pq + 1;		/* count these for warning message */
	     if p -> user.bump_grace > project.grace_max then
		bad_gt = bad_gt + 1;		/* count these for warning message */
	end;

/* Now we will compare the new PDT with the current version, and merge the two files */

	call hcs_$initiate (instaldir, instalname, "", 0, 1, oldp, code);
	if oldp = null then do;			/* cannot locate old pdt */
	     call hcs_$make_seg (instaldir, instalname, "", 01010b, oldp, code);
	     if oldp = null then return;		/* Die if cannot create new segment. */
	     segp -> pdt.rs_number = project.rs_number;
	     segp -> pdt.n_users = 0;			/* recompute */
	     do i = 1 to segp -> pdt.current_size;
		p = addr (segp -> pdt.user (i));
		if p -> user.state ^= 1 then go to bast;/* not install new user with state 2 */
		segp -> pdt.n_users = segp -> pdt.n_users + 1;
		call zero_usage_items;
/**** Get the alias and supply it here, someday. */
		call create_homedir_ ((p -> user.person_id), "", p -> user.user_authorization (1), (project.project_id),
		     (p -> user.home_dir), (project.project_dir), code);
	     end;
	     go to finish_up;			/* Go clean up and set ACL */
	end;

/* There is an old PDT. Make up a temporary PDT which will be the merged copy.
   We start by making it look just like the current copy, and then apply changes */

	call hcs_$make_seg (instaldir, "", "", 1011b, tp, code);
	if tp = null then do;
	     answer = "cannot make temp";
	     return;
	end;
	movelen = PDT_header_lth + oldp -> pdt.current_size * PDT_entry_lth;
	tp -> movetable = oldp -> movetable;		/* copy current pdt into temp seg */

	if tp -> pdt.version ^= PDT_version then do;	/* old pdt not same version as new one */
						/* we checked earlier, and the new one is the correct version */
						/* in general, something special must be done to get the
						   information out of the old one */
						/* ... */
						/* having done what we can ... */
	     tp -> pdt.version = PDT_version;		/* put latest version number into merged copy */
	end;

	tp -> pdt.n_users = 0;			/* recalculate this */
	tp -> pdt.author.proc_group_id = segp -> pdt.author.proc_group_id;
	tp -> pdt.author.lock = ""b;
	tp -> pdt.author.last_install_time = clock ();
	tp -> pdt.author.table = segp -> pdt.author.table;
	tp -> pdt.author.w_dir = segp -> pdt.author.w_dir;
	tp -> pdt.rs_number = project.rs_number;

	do i = 1 to tp -> pdt.current_size;		/* loop thru old copy. find any merges or deletes */
	     p = addr (tp -> pdt.user (i));
	     if p -> user.state = 0 then go to x1;	/* skip free entries */
	     p -> user.state = 2;
	     do j = 1 to segp -> pdt.current_size;
		q = addr (segp -> pdt.user (j));
		if q -> user.state = 1 then		/* not install dead users */
		     if p -> user.person_id = q -> user.person_id then do;
			p -> user.state = 1;	/* old user still in project. merge */
			tp -> pdt.n_users = tp -> pdt.n_users + 1;
			if p -> user.datof ^= 0 then do; /* returning user? */
			     p -> user.daton = time_now;
			     p -> user.datof = 0;
			end;
			q -> user.state = -1;	/* now mark new boy deleted, so not scan again */
			call adjust_cutoff_ (p, time_now);
			call merge_admin_info;
			if p -> user.daton = time_now /* if user was just reregistered */
			then call create_homedir_ ((p -> user.person_id), "", p -> user.user_authorization (1),  (project.project_id),
				(p -> user.home_dir), (project.project_dir), code);
			go to x1;			/* leave old usage figures */
		     end;
	     end;
	     p -> user.datof = time_now;		/* deleted user - state will be 2 */
x1:	end;

	do i = 1 to segp -> pdt.current_size;		/* loop thru new copy, looking for new users */
	     q = addr (segp -> pdt.user (i));
	     if q -> user.state = 1 then do;		/* any user left in new file with state 1 is new */
badx:		j = tp -> pdt.freep;
		if j = 0 then j, tp -> pdt.current_size = tp -> pdt.current_size + 1;
		else do;
		     xp = addr (tp -> pdt.user (j));
		     if xp -> user.state ^= 0 then do;
			call sys_log_ (SL_LOG_BEEP, "up_pdt_: ^a ^a on free list state nonzero",
			     instalname, xp -> user.person_id);
			tp -> pdt.freep = 0;
			go to badx;
		     end;
		     tp -> pdt.freep = xp -> user.chain;
		end;
		p = addr (tp -> pdt.user (j));
		p -> user.state = 1;
		tp -> pdt.n_users = tp -> pdt.n_users + 1;
		p -> user.person_id = q -> user.person_id;
		call merge_admin_info;		/* put in limits and stuff */
		call zero_usage_items;
		call create_homedir_ ((p -> user.person_id), "", p -> user.user_authorization (1), (project.project_id),
		     (p -> user.home_dir), (project.project_dir), code);
	     end;
	end;

	do i = 1 to anstbl.current_size;		/* scan answer table */
	     utep = addr (anstbl.entry (i));
	     if ute.active >= NOW_LOGGED_IN then	/* look for logged in users on this proj */
		if ute.project = tp -> pdt.project_name then do;
		     if ute.anonymous = 0 then	/* regular user */
			do j = 1 to tp -> pdt.current_size;
			q = addr (tp -> pdt.user (j));
			if q -> user.state = 1 then
			     if q -> user.person_id = ute.person then do;
				if rel (ute.pdtep) ^= rel (q) then do;
				     call sys_log_ (SL_LOG_BEEP, "up_pdt_: synch error ^a.^a",
					ute.person, ute.project);
				end;
				if ^aim_check_$in_range (
				     ute.process_authorization_range (1), q -> user.user_authorization)
				     | ^aim_check_$in_range (
				     ute.process_authorization_range (2), q -> user.user_authorization) then do;
				     call sys_log_ (SL_LOG, "up_pdt_: bumping ^a.^a, user authorization now outside range.",
					ute.person, ute.project);
				     call asu_$bump_code (utep, as_error_table_$user_auth_excludes,
					debg, code, (0));
				end;
				go to next_entry;
			     end;
		     end;
		     else if anonymous_user then go to next_entry;

/* arrived here we have a logged-in user who is no longer accredited by his project */
		     if ute.preempted = 0 then do;
			call sys_log_ (SL_LOG, "up_pdt_: bumping ^a.^a, omitted from new pdt", ute.person, ute.project);
			call asu_$bump_code (utep, as_error_table_$user_deleted, debg, code,
			     (installation_parms.warning_time));
		     end;
		end;
next_entry:
	end;

	instalp = oldp;
	call hcs_$delentry_seg (segp, code);
	segp = tp;
finish_up:

/* Build hash table. Maybe. */

	pdtp = segp;				/* avoid lots of segp ->'s */
	pdt.ht_relp = 0;				/* no hash table yet */
	wordcount = 0;				/* length of hash table */
	if pdt.current_size < 8 then			/* if PDT fits into 1 or 2 pages */
	     goto finish_up_2;			/* a hash table won't save us any page faults */

	code = 0;
	htp = null;				/* no hash table seg created so far.		*/
	if pdt.current_size > 956 then do;		/* room for only 956 users, with hash table at end */
	     call sys_log_ (SL_LOG, "up_pdt_: ^a has ^d users, leaving insufficient room for a hash table.",
		instalname, pdt.current_size);
	     goto no_ht;
	end;
	call hcs_$make_seg (instaldir, "pdt.ht.temp", "", 1011b, htp, code);
	if code ^= 0 then goto no_ht;
	call hcs_$truncate_seg (htp, (0), code);
	if code ^= 0 then goto no_ht;

/* figure out how long to make it */
	if pdt.n_users > 70 then			/* if reasonably large number of users */
	     i = fixed (float (pdt.n_users) / .7);	/* use Knuth's recommendation of 70% */
	else i = min (101, max (24, fixed (float (pdt.n_users) / .5))); /* but small hash tables act funny, so make it
						   50% full, subject to being between 1/4 and 1 page long */

	call hash_$make (htp, (i), code);
	if code ^= 0 then goto no_ht;

	do i = 1 to pdt.current_size;
	     pdtep = addr (pdt.user (i));
	     if user.state = 1 then do;
		call hash_$in (htp, user.person_id, (i), code);
		if code ^= 0 then goto no_ht;
	     end;
	end;

	pdtep = addr (pdt.user (i));			/* get ptr to where to put ht - after last user */
	wordcount = htable.loht;			/* length of table */
	movelen = wordcount;
	pdtep -> movetable = htp -> movetable;		/* copy table onto end of new pdt */
	pdt.ht_relp = fixed (rel (pdtep));		/* put relptr to it into header */
	call hcs_$delentry_seg (htp, (0));		/* clean up */

finish_up_2:
	wordcount = wordcount + segp -> pdt.current_size * PDT_entry_lth + PDT_header_lth;
	movelen = wordcount;			/* Now copy new pdt over old one. */
	oldp -> movetable = segp -> movetable;		/* zoop. */
	call hcs_$truncate_seg (oldp, wordcount, code);
	if code ^= 0 then
	     answer = "Unable to truncate pdt to current length";
						/* not worth stopping for though */
	call hcs_$add_acl_entries (instaldir, instalname, addr (acla), n_acl, code);
	call hcs_$set_bc (instaldir, instalname, 36 * wordcount, code);
	call hcs_$set_safety_sw (instaldir, instalname, "1"b, code);
	code = 0;					/* Succeeded. */

	if bad_lr > 0 | bad_mr > 0 | bad_pq > 0 | bad_gt > 0 then do; /* return warning if necessary */
	     call ioa_$rsnnl ("SAT limits exceeded (will be enforced at login time):
^[min_ring: ^d, ^d users;^x^;^2s^]^[max_ring: ^d, ^d users;^x^;^2s^]^[pdir_quota: ^d, ^d users;^x^;^2s^]^[grace_time: ^d, ^d users;^x^;^2s^]",
		answer, i, (bad_lr > 0), project.min_ring, bad_lr, (bad_mr > 0), project.max_ring, bad_mr,
		(bad_pq > 0), project.pdir_quota, bad_pq, (bad_gt > 0), project.grace_max, bad_gt);
	     substr (answer, i - 1, 1) = "";		/* get rid of last ";"; up_sysctl_ supplies a period */
	end;

	return;

no_ht:	call sys_log_$error_log (SL_LOG_BEEP, code, "up_pdt_", "^a will be installed with no hash table", instalname);
	if htp ^= null then call hcs_$delentry_seg (htp, (0));
	goto finish_up_2;

/* Internal proc to copy limits and other administrator-specified data into pdt entry */

merge_admin_info: proc;

	p -> user.password = q -> user.password;
	string (p -> user.at) = string (q -> user.at);
	p -> user.user_authorization = q -> user.user_authorization;
	p -> user.initial_procedure = q -> user.initial_procedure;
	p -> user.ip_len = q -> user.ip_len;
	p -> user.ss_len = q -> user.ss_len;
	p -> user.home_dir = q -> user.home_dir;
	p -> user.bump_grace = q -> user.bump_grace;
	p -> user.high_ring = q -> user.high_ring;
	p -> user.low_ring = q -> user.low_ring;
	p -> user.default_ring = q -> user.default_ring;
	p -> user.outer_module = q -> user.outer_module;
	p -> user.lot_size = q -> user.lot_size;
	p -> user.kst_size = q -> user.kst_size;
	p -> user.cls_size = q -> user.cls_size;
	p -> user.pdir_quota = q -> user.pdir_quota;
	string (p -> user.uflags) = string (q -> user.uflags);
	p -> user.dollar_limit = q -> user.dollar_limit;
	p -> user.absolute_limit = q -> user.absolute_limit;
	p -> user.absolute_cutoff = q -> user.absolute_cutoff;
	p -> user.absolute_increm = q -> user.absolute_increm;
	p -> user.user_warn_days = q -> user.user_warn_days;
	p -> user.user_warn_pct = q -> user.user_warn_pct;
	p -> user.user_warn_dollars = q -> user.user_warn_dollars;
	p -> user.warn_days = q -> user.warn_days;
	p -> user.warn_pct = q -> user.warn_pct;
	p -> user.warn_dollars = q -> user.warn_dollars;
	p -> user.group = q -> user.group;
	p -> user.max_foreground = q -> user.max_foreground;
	p -> user.max_background = q -> user.max_background;
	p -> user.abs_foreground_cpu_limit = q -> user.abs_foreground_cpu_limit;
	call adjust_cutoff_ (p, time_now);
	do k = 0 to 7;
	     p -> user.shift_limit (k) = q -> user.shift_limit (k);
	end;

     end merge_admin_info;

/* Internal procedure to clear usage in pdt entry */

zero_usage_items: proc;

	p -> user.now_in = 0;			/* not logged in because is new guy */
	p -> user.n_foreground = 0;
	p -> user.n_background = 0;
	p -> user.time_last_reset, p -> user.daton = time_now;
	p -> user.datof = 0;
	p -> user.dollar_charge = 0e0;
	p -> user.absolute_spent = 0e0;
	p -> user.last_login_time = 0;
	p -> user.last_login_unit = "";
	p -> user.last_login_type = 0;
	p -> user.last_login_line_type = 0;
	p -> user.time_last_bump = 0;
	do k = 0 to 7;
	     p -> user.interactive.charge (k) = 0e0;
	     p -> user.interactive.cpu (k) = 0;
	     p -> user.interactive.core (k) = 0;
	     p -> user.interactive.connect (k) = 0;
	     p -> user.interactive.io_ops (k) = 0;
	end;
	do k = 1 to 4;
	     p -> user.absentee.charge (k) = 0e0;
	     p -> user.absentee.jobs (k) = 0;
	     p -> user.absentee.cpu (k) = 0;
	     p -> user.absentee.memory (k) = 0;
	end;
	do k = 1 to 4;
	     p -> user.iod.charge (k) = 0e0;
	     p -> user.iod.pieces (k) = 0;
	     p -> user.iod.pages (k) = 0;
	     p -> user.iod.lines (k) = 0;
	end;
	do k = 1 to 16;
	     p -> user.devices (k) = 0e0;
	end;

     end zero_usage_items;

%page; %include answer_table;
%page; %include dialup_values;
%page; %include hashst;
%page; %include installation_parms;
%page; %include pdt;
%page; %include sat;
%page; %include sys_log_constants;
%page; %include user_attributes;
%page;%include user_table_entry;
%page;%include user_table_header;
%page;
/* BEGIN MESSAGE DOCUMENTATION

   Message:
   up_pdt_: bumping NAME.PROJ, omitted from new pdt

   S:	as (severity1)

   T:	$run

   M:	The supervisor of project PROJ has removed the user named
   NAME from the project while he was logged in.  He is no longer
   authorized to be logged in on that project and is bumped.

   A:	$ignore


   Message:
   up_pdt_: bumping NAME.PROJ, user authorization now outside range.

   S:	as (severity1)

   T:	$run

   M:	A project administrator has installed a new pdt that changes the 
   authorization range for the user identified by NAME on project PROJ.  The
   user NAME.PROJ is currently logged in with an authorization outside the new 
   range.  Therefore, the user is being bumped from the system.

   A:	$ignore


   Message:
   up_pdt_: synch error NAME.PROJ

   S:	as (severity2)

   T:	$run

   M:	A new project definition table for PROJ is being installed.
   The answer table entry for NAME.PROJ should contain a pointer
   to the user's PDT entry but the pointer is incorrect.  Accounting
   figures may be scrambled.  The system continues operation.

   A:	$contact_sa


   Message:
   up_pdt_: PROJ.pdt NAME on free list state nonzero

   S:	as (severity2)

   T:	$run

   M:	A new project definition table for PROJ is being installed.
   The thread of free entries appears to include some user whose state
   is not zero.  The program abandons the free chain and continues.

   A:	$inform_sa


   Message:
   up_pdt_: PROJ.pdt has N users, leaving insufficient room for a hash table.

   S:	as (severity1)

   T:	$run

   M: A new project definition table (PDT) for project PROJ is being installed.
   It has so many users that there is no room in it for a hash table.
   The PDT will be installed without a hash table. Logins on that project will
   take longer and place an extra load on the system.

   A:	$inform

   Message:
   up_pdt_: ERROR_MESSAGE. PROJ.pdt will be installed with no hash table

   S:	as (severity2)

   T:	$run

   M: A new PDT is being installed for project PROJ. An error described
   by ERROR_MESSAGE occurred while its hash table was being built. The PDT
   will be installed without a hash table. Logins on that project will take
   longer and place an extra load on the system.

   A:	$inform


   END MESSAGE DOCUMENTATION */

     end up_pdt_;
