/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: style4 */
up_mgt_: procedure (mgtp, wordcount, instaldir, instalname, instalp, P_ansp,
	  ip, answer, code);

/*
   up_mgt_ - update master_group_table
   Initially coded by T. Casey, June 1975
   Modified by T. Casey, October 1976 for version 3 MGT.
   Modified by T. Casey, Sept 1977 to allow deletion of group if no processes or projects in it.
   Modified by T. Casey, November 1978, to add group parameters: absentee_(max min pct).
   Modified by J. Bongiovanni, July 1981, for governed work classes.
   Modified November 1981, E. N. Kittlitz.  user_table_entry conversion.
   Modified January 1982, BIM, for author changes (lock and install time).
   Modified February 1982, E. N. Kittlitz. xxx.install.acs change.
   Modified:
   10/05/84 by R. Michael Tague:  up_sysctl_$check_acs now returns a bit (36)
   mode string instead of a fixed bin (5) and no longer takes a directoy arg.
*/

/****^  HISTORY COMMENTS:
  1) change(86-06-05,GJohnson), approve(86-06-05,MCR7387),
     audit(86-06-10,Martinson), install(86-07-11,MR12.0-1092):
     Correct error message documentation.
  2) change(87-04-26,GDixon), approve(87-07-13,MCR7741),
     audit(87-07-16,Hartogs), install(87-08-04,MR12.1-1055):
     Upgraded for change to answer_table.incl.pl1.
                                                   END HISTORY COMMENTS */

/*  DECLARATION OF PARAMETERS  */
dcl  (mgtp, instalp, P_ansp, ip) pointer;
dcl  wordcount fixed bin;
dcl  code fixed bin (35);
dcl  (instaldir char (*), instalname char (*), answer char (*));


/* DECLARATION OF EXTERNAL SYMBOLS */

dcl  up_sysctl_$check_acs entry (char (*), char (*), fixed bin, bit (36) aligned, fixed bin (35));
dcl  get_process_id_ entry () returns (bit (36));
dcl  hcs_$set_safety_sw entry (char (*), char (*), bit (1), fixed bin (35));
dcl  hcs_$set_bc entry (char (*), char (*), fixed bin (24), fixed bin (35));
dcl  cu_$level_get entry (fixed bin);
dcl  hcs_$make_seg entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35));
dcl  hcs_$initiate entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr, fixed bin (35));
dcl  sys_log_$error_log entry options (variable);
dcl  reassign_work_classes_ entry (fixed bin (35));
dcl  ioa_$rsnnl entry options (variable);

dcl  error_table_$action_not_performed ext fixed bin (35);

dcl  (addr, clock, fixed, null, rel, string) builtin;

/* DECLARATION OF INTERNAL STATIC VARIABLES */

dcl  acs_name char (32) int static options (constant) init ("mgt.install.acs");
						/* dcl  LEGAL char (95) int static init			/* Printables except PAD, semicolon, but with BS */
						/*     (" !""#$%&'()*+,-./0123456789:<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~");/*  */

/* DECLARATION OF AUTOMATIC STORAGE VARIABLES */

dcl  (i, j, rslen, bad_wc) fixed bin;			/* counters */
dcl  first_group fixed bin;
dcl  omgtp ptr;					/* ptr to current mgt */
dcl  omgtep ptr;					/* ptr to entries in current mgt */
dcl  (satp, satep) ptr;				/* satep not used - but referenced in sat.incl */
dcl  notables bit (1);				/* switch to indicate that an old table doesn't exist */
dcl  no_words fixed bin (24);
dcl  offset bit (18) aligned;				/* for wordcount. */
dcl  syacn fixed bin init (1);
dcl  ring fixed bin;
dcl  mode bit (36) aligned;
dcl  pct_is_used bit (1) aligned;

dcl  shift fixed bin;
dcl  shift_used (0:7) bit (1) aligned;
dcl  shift_pct fixed bin;
dcl  wcp ptr;
dcl  no_abs bit (1) aligned;
dcl  dflt_q (4) bit (1) unaligned;

dcl  char8 char (8) varying;
dcl  digits (4) char (1) unaligned int static init ("1", "2", "3", "4");

dcl  rq_problem bit (3) unaligned;
dcl  resp bit (1) unaligned defined (rq_problem) pos (1);
dcl  int bit (1) unaligned defined (rq_problem) pos (2);


/* DECLARATION OF BASED STRUCTURES */

dcl  1 dum aligned based,
       2 array (no_words) fixed bin;
%page;
	ansp = P_ansp;
	if anstbl.as_procid ^= get_process_id_ () then return;

	instalp = null;				/* pre-set returned pointer */
	instaldir = anstbl.sysdir;			/* Make name of place to put copy. */
	instalname = "mgt";				/* Make segment name. */
	call hcs_$initiate (instaldir, instalname, "", 0, 0, omgtp, code);
	if omgtp = null then notables = "1"b;		/* no old MGT. How about that? */
	else notables = "0"b;

	if wordcount < 64 then do;			/* make sure segment contains something */
	     answer = "wordcount < 64";
	     goto mgt_error;
	end;
	if mgt.version_indicator ^= "VERSION " then goto badversn;
	if mgt.version ^= MGT_version_3 then do;
badversn:	     answer = "incorrect table format";
	     goto mgt_error;
	end;
	if mgt.current_size > mgt.max_size then do;
	     answer = "current_size > max_size";
	     goto mgt_error;
	end;
	offset = rel (addr (mgt.entry (mgt.current_size + 1)));
	if fixed (offset, 18) - 1 > wordcount then do;	/* Check size vs file system. */
	     answer = "size inconsistent with wordcount";
	     goto mgt_error;
	end;
	call cu_$level_get (ring);
	call up_sysctl_$check_acs (acs_name, (mgt.author.proc_group_id), ring, mode, code);
	if (code ^= 0) | ((mode & RW_ACCESS) ^= RW_ACCESS) then do;
	     answer = "access violation";
	     goto mgt_error;
	end;

	call hcs_$initiate (instaldir, "sat", "", 0, 1, satp, code);
	if satp = null then do;
	     answer = "cannot initiate SAT";
	     goto mgt_error;
	end;

/* Now, verify the correctness of the new MGT */


	do shift = 0 to 7;				/* check consistency on each shift */

	     shift_used (shift) = ""b;		/* remember which shifts are used */
	     shift_pct = 0;				/* sum of percentages */
	     no_abs = ""b;
	     string (dflt_q) = ""b;			/* keep track of absentee groups */

	     do i = 1 to 16;			/* first go thru work classes */
						/* checking if defined, and adding up percentages */
		wcp = addr (mgt.entry (i));
		if wcp -> work_class.switches.defined (shift) then do; /* if defined */
		     shift_used (shift) = "1"b;	/* at least one is, on this shift */

		     if mgt.switches.deadline_mode (shift) | wcp -> work_class.switches.realtime (shift) then
						/* if realtime or deadline */
			pct_is_used = ""b;		/* percent is ignored */
		     else pct_is_used = "1"b;		/* otherwise it is used */

		     if pct_is_used & wcp -> work_class.min_pct (shift) <= 0 then do;
			call ioa_$rsnnl ("zero or negative work class percentage: work class ^d, shift ^d",
			     answer, rslen, i, shift);
			goto mgt_error;
		     end;
		     if pct_is_used & (wcp -> work_class.max_pct (shift) < 0
			| wcp -> work_class.max_pct (shift) > 100) then do;
			call ioa_$rsnnl ("invalid work class max percent: work class ^d, shift ^d",
			     answer, rslen, i, shift);
			goto mgt_error;
		     end;
		     if pct_is_used then		/* except for realtime workclasses */
			shift_pct = shift_pct + wcp -> work_class.min_pct (shift); /* add up percentages */

/* RESPONSE AND QUANTUM CHECKS:
   *	work_class.int_quantum(shift) and work_class.quantum(shift) must be > 0;
   *	work_class.int_response(shift) and work_class.response(shift) must be >= 0
   *	  but ONLY if work_class.switches.realtime(shift) = "1"b;

*/

		     rq_problem = "000"b;		/* no problem */
		     if wcp -> work_class.int_quantum (shift) <= 0 then
			rq_problem = "011"b;	/* resp=0;int=1 */
		     else if wcp -> work_class.quantum (shift) <= 0 then
			rq_problem = "001"b;	/* resp=0;int=0 */
		     else if wcp -> work_class.switches.realtime (shift) then
			if wcp -> work_class.int_response (shift) < 0 then
			     rq_problem = "111"b;	/* resp=1;int=1 */
			else if wcp -> work_class.response (shift) < 0 then
			     rq_problem = "101"b;	/* resp=1;int=0 */

		     if rq_problem ^= "000"b then do;	/* if one of the above problems was found */
			call ioa_$rsnnl ("^[^;zero or ^]negative ^[int_^]^[response^;quantum^] for ^[realtime ^]work class ^d, shift ^d",
			     answer, rslen, resp, int, resp, resp, i, shift);
			goto mgt_error;
		     end;


		end;
	     end;					/* end loop on work classes */
	     if shift_pct > 100 then do;
		call ioa_$rsnnl ("sum of work class percentages > 100 on shift ^d", answer, rslen, shift);
		goto mgt_error;
	     end;

	     do i = 17 to mgt.current_size;		/* now go thru all groups */
		mgtep = addr (mgt.entry (i));

		if ^shift_used (shift) then do;	/* if no work classes defined on this shift */
		     if group.int_wc (shift) ^= 0 then do;
			bad_wc = group.int_wc (shift);
			goto shift_err;		/* there better be no work classes used */
		     end;

		     if group.abs_wc (shift) ^= 0 then do;
			bad_wc = group.abs_wc (shift);
shift_err:		call ioa_$rsnnl ("work class ^d used on shift ^d (for which it is undefined)",
			     answer, rslen, bad_wc, shift);
			goto mgt_error;
		     end;
		end;

		else do;				/* some work classes are defined */
		     wcp = addr (mgt.entry (group.int_wc (shift)));
		     if ^wcp -> work_class.switches.defined (shift) then do; /* see if this one is */
			bad_wc = group.int_wc (shift);
			goto shift_err;		/* and complain if not */
		     end;

		     if group.absentee.allowed then do; /* if absentees allowed in this group */
			wcp = addr (mgt.entry (group.abs_wc (shift)));
			if ^wcp -> work_class.switches.defined (shift) then do;
						/* make sure their work class is defined */
			     bad_wc = group.abs_wc (shift);
			     goto shift_err;	/* and complain if not */
			end;
			if ^wcp -> work_class.switches.absentee_allowed (shift) then do;
			     call ioa_$rsnnl ("absentees are in work class ^d, which does not allow them",
				answer, rslen, group.abs_wc (shift));
			     goto mgt_error;
			end;

			if group.absentee.default_group then do; /* if this is a default group for some queue(s) */
			     do j = 1 to 4;		/* go thru queues */
				if group.absentee.default_queue (j) then /* if it is for this queue */
				     if dflt_q (j) then do; /* but there already is one */
					call ioa_$rsnnl ("more than one default group for absentee queue ^d;
second is ""^a""", answer, rslen, j, group.group_id);
					goto mgt_error;
				     end;

				     else dflt_q (j) = "1"b;
						/* otherwise, just remember that we have a default for this queue */
			     end;
			end;

		     end;				/* end absentee allowed */

		     else do;			/* absentee not allowed in this group */
			no_abs = "1"b;		/* remember that there is such a group */
			if group.absentee.default_group then do;
			     call ioa_$rsnnl ("inconsistency: default absentee group ""^a"" does not permit absentees",
				answer, rslen, group.group_id);
			     goto mgt_error;
			end;
		     end;				/* end absentees not allowed */
		end;				/* end some work classes defined on this shift */
	     end;					/* end loop thru all groups */

	     if no_abs then				/* if a no-absentee group exists */
		if string (dflt_q) ^= "1111"b then do;	/* and there are not default groups for all queues */
		     char8 = "";
		     do j = 1 to 4;			/* build string listing queues for which */
			if ^dflt_q (j) then		/* there is no default group */
			     char8 = char8 || digits (j) || " ";
		     end;
		     call ioa_$rsnnl ("no default group for absentee queue(s) ^a", answer, rslen, char8);
		     goto mgt_error;
		end;

	end;					/* end loop on shifts */

	do i = 17 to mgt.current_size;		/* check on per-group parameters */
	     mgtep = addr (mgt.entry (i));
	     if group.absentee_pct < 0
		| group.absentee_pct > 100 then do;
		call ioa_$rsnnl ("illegal absentee_pct (^d%) for group ""^a""",
		     answer, rslen, group.absentee_pct, group.group_id);
		goto mgt_error;
	     end;

	     if group.absentee_min > group.absentee_max then do;
		call ioa_$rsnnl ("absentee_min (^d) greater than absentee_max (^d) for group ""^a""",
		     answer, rslen, group.absentee_min, group.absentee_max, group.group_id);
		goto mgt_error;
	     end;

	     if group.absentee_max < 0 then do;
		call ioa_$rsnnl ("absentee_max (^d) for group ""^a"" is negative",
		     answer, rslen, group.absentee_max, group.group_id);
		goto mgt_error;
	     end;
	end;					/* end check of per-group parameters */

/* shift_used(*) tells us which shifts were used. later, add code to check this against
   which shifts are defined in installation parms - but got to write an up_ip_ first ... */

/* If we fall thru here, the mgt was probably ok */


/* If there was an old MGT, copy the current load figures into the new one */

	if ^notables then do;

	     first_group = 1;			/* old mgt might be version 1 format */
	     if omgtp -> mgt.version_indicator = "VERSION " then
		if omgtp -> mgt.version >= 2 then
		     first_group = 17;		/* it is version 2 or greater */

	     mgt.total_units = omgtp -> mgt.total_units;	/* in either case, copy current total_units from header */

	     if first_group = 17 then do;		/* if version 2, also copy current work class information */
		mgt.switches.prio_sked_on_tape = omgtp -> mgt.switches.prio_sked_on_tape;
		mgt.user_wc_defined (*) = omgtp -> mgt.user_wc_defined (*);
		mgt.user_wc_min_pct (*) = omgtp -> mgt.user_wc_min_pct (*);
	     end;

	     do i = first_group to omgtp -> mgt.current_size; /* now, copy the figures for each load control group */
		omgtep = addr (omgtp -> mgt.entry (i));

		do j = 17 to mgt.current_size		/* look up this group in the new mgt */
		     while (omgtep -> group.group_id ^= addr (mgt.entry (j)) -> group.group_id); end;
		mgtep = addr (mgt.entry (j));		/* remember address of entry in case we need it */
		if j = mgt.current_size + 1 then do;	/* was this group deleted? */

/* If we get here, this group got deleted from the new mgt.
   We can only allow this if the group is not used. See if it is */

		     j = omgtep -> group.n_prim + omgtep -> group.n_sec + omgtep -> group.n_eo;
		     if j ^= 0 then do;
			call ioa_$rsnnl ("attempt to delete load control group ""^a"", which has ^d users in it",
			     answer, rslen, group.group_id, j);
			goto mgt_error;
		     end;

/* See if the SAT references it */

		     do j = 1 to sat.current_size;
			satep = addr (sat.project (j));
			if project.state = 1 then do; /* if this project entry is used */
			     if project.group = omgtep -> group.group_id then do;
				call ioa_$rsnnl ("attempt to delete load control group ""^a"", which is the default group for project ""^a""",
				     answer, rslen, group.group_id, project.project_id);
				goto mgt_error;
			     end;

			     if project.groups (1) = omgtep -> group.group_id
				| project.groups (2) = omgtep -> group.group_id then do;
				call ioa_$rsnnl ("attempt to delete load control group ""^a"", which is an authorized group for project ""^a""",
				     answer, rslen, group.group_id, project.project_id);
				goto mgt_error;
			     end;
			end;			/* end project state = 1 */
		     end;				/* end loop thru SAT */
		end;				/* if we get here, it is ok to delete the group */
						/* naturally, we skip the copying of the old group into the new MGT */
		else do;				/* if group not deleted, copy its current load values */
		     if group.max_prim ^= -1 then	/* if not a special value being installed */
			group.max_prim = omgtep -> group.max_prim; /* save the computed one in the current mgt */
		     group.n_prim = omgtep -> group.n_prim;
		     group.n_sec = omgtep -> group.n_sec;
		     group.n_eo = omgtep -> group.n_eo;
		     group.absolute_max = omgtep -> group.absolute_max;
		     group.absentee_limit = omgtep -> group.absentee_limit;
		     group.n_abs = omgtep -> group.n_abs;
		end;
	     end;


	end;

/* If no old mgt, just create a segment to hold the new one */

	else do;
	     call hcs_$make_seg (instaldir, instalname, "", 01010b, omgtp, code);
	     if code ^= 0 then do;
		answer = "unable to create new MGT";
		goto mgt_error;
	     end;
	end;
						/* if there was an old MGT, we leave its acl unchanged */

/* now, copy the new mgt, with the current load figures in it, over the old one */

	no_words = wordcount;			/* length of move, in words */
	omgtp -> dum = mgtp -> dum;

	omgtp -> mgt.author.last_install_time = clock ();
	omgtp -> mgt.author.lock = ""b;

/* and set the bitcount to the (possibly new) value */

	call hcs_$set_bc (instaldir, instalname, 36 * wordcount, code);
	call hcs_$set_safety_sw (instaldir, instalname, "1"b, code);


/* Now, go reassign everyone to their new work classes */

	call reassign_work_classes_ (code);
	if code ^= 0 then do;
						/* We will try this twice, in case another privileged process is
						   trying to alter the work class definitions at the same time
						   that we are. Doing it twice is not foolproof, but it decreases
						   the probability of ultimate failure by orders of magnitude */
	     call reassign_work_classes_ (code);
	     if code ^= 0 then do;
		call sys_log_$error_log (2, code, "up_mgt_", "during work class reassignment");
		return;
	     end;
	end;

	code = 0;

	instalp = omgtp;				/* return pointer to merged mgt */

	return;

mgt_error:
	code = error_table_$action_not_performed;	/* MGT not installed */
	return;

%page; %include access_mode_values;
%page; %include answer_table;
%page; %include mgt;
%page; %include sat;
%page; %include user_attributes;
%page; %include user_table_header;
%page;
/* BEGIN MESSAGE DOCUMENTATION

   Message:
   up_mgt_:  ERROR_MESSAGE During work class reassignment

   S:	as (severity2)

   T:	$run

   M:	The error described by ERROR_MESSAGE occurred while
   a system administrator was attempting to install a new mgt.  The
   operation was tried twice and failed both times.  More detailed
   reasons for the failure are given in messages immediately
   preceding this one.  The new mgt has been installed.  Hardcore
   is operating with a set of parameters inconsistent with the new mgt.

   A:	$notify_sa

   END MESSAGE DOCUMENTATION */

     end up_mgt_;
