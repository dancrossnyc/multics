/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: style4 */
up_sat_:
     procedure (segp, wordcount, instaldir, instalname, instalp, P_ansp,
        ip, answer, code);

/* UP_SAT_ - update the System Administrator's Table (SAT)

   This program checks a candidate SAT for acceptability before installing.
   If a new project has been created, and the project dir does not exist,
   this program creates it and sets up the access.

   Initially coded by Michael J. Spier, February 13, 1970
   Modified 741030 by PG for authorizations, etc.
   Modified 750523 by PG to check for duplicate alias's.
   Modified May 1976 by T. Casey to update project cutoff data.
   Modified May 1978 by T. Casey to update pdir_quota.
   Modified June 1978 by T. Casey to add make_sat_hash entry point, implementing hash table for SAT.
   Modified November 1978 by T. Casey for MR7.0 absentee control parameters.
   Modified July, 1979 by J. N. R. Barnecut  to implement multiple rate structures. (UNCA)
   Modified June, 1981 by E. N. Kittlitz for UNCA rate structures
   Modified November 1981, E. N. Kittlitz.  user_table_entry conversion.
   Modified January 1982, BIM for author changes (lock and install time)
   Modified February 1982, E. N. Kittlitz. xxx.install.acs change.
   Modified May 1982, E. N. Kittlitz. to only check supplied sat live projects for duplicate names.
   Modified 1984-09-11 BIM for auth ranges.
   Modified:
   10/05/84 by R. Michael Tague:  up_sysctl_$check_acs now returns a bit (36)
   mode string instead of a fixed bin (5) and no longer takes a directory arg
*/

/****^  HISTORY COMMENTS:
  1) change(86-06-05,GJohnson), approve(86-06-05,MCR7387),
     audit(86-06-10,Martinson), install(86-07-11,MR12.0-1092):
     Correct error message documentation.
  2) change(86-09-05,Parisek):
     Check for existence of renamed project in new SAT and if found flag
     corresponding old SAT entry as renamed.  This renamed state will become
     useful during billing procedures so duplicate bills are not produced.
  3) change(87-04-26,GDixon), approve(87-07-13,MCR7741),
     audit(87-07-16,Hartogs):
     Upgraded for change to answer_table.incl.pl1 and user_table_entry.incl.pl1
                                                   END HISTORY COMMENTS */


/* parameters */

dcl  segp ptr;
dcl  wordcount fixed bin;
dcl  instaldir char (*);
dcl  instalname char (*);
dcl  instalp ptr;
dcl  P_ansp ptr;
dcl  ip ptr;
dcl  answer char (*);
dcl  code fixed bin (35);

/* entries */

dcl  aim_check_$greater_or_equal entry (bit (72) aligned, bit (72) aligned) returns (bit (1) aligned);
dcl  aim_check_$in_range entry (bit (72) aligned, (2) bit (72) aligned) returns (bit (1) aligned);
dcl  asu_$bump_code entry (ptr, fixed bin (35), char (8), fixed bin (35), fixed bin);
dcl  display_access_class_$range entry ((2) bit (72) aligned) returns (character (32) aligned);
dcl  convert_status_code_ entry (fixed bin (35), char (8) aligned, char (100) aligned);
dcl  display_access_class_ entry (bit (72) aligned) returns (character (32) aligned);
dcl  get_group_id_ entry () returns (char (32));
dcl  get_process_id_ entry () returns (bit (36));
dcl  hash_$in entry (ptr, char (*), fixed bin, fixed bin (35));
dcl  hash_$make entry (ptr, fixed bin, fixed bin (35));
dcl  hash_$opt_size entry (fixed bin) returns (fixed bin);
dcl  hcs_$chname_file entry (char (*), char (*), char (*), char (*), fixed bin (35));
dcl  hcs_$delentry_seg entry (ptr, fixed bin (35));
dcl  hcs_$initiate entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr, fixed bin (35));
dcl  hcs_$make_seg entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35));
dcl  hcs_$set_bc entry (char (*), char (*), fixed bin (24), fixed bin (35));
dcl  hcs_$set_safety_sw entry (char (*), char (*), bit (1) aligned, fixed bin (35)); /* SWS */
dcl  hcs_$truncate_seg entry (ptr, fixed bin, fixed bin (35));
dcl  ioa_$rsnnl entry () options (variable);
dcl  sys_log_ entry options (variable);
dcl  sys_log_$error_log entry options (variable);
dcl  system_info_$max_rs_number entry (fixed bin);
dcl  up_sat_$make_sat_hash entry (ptr, fixed bin, ptr, char (*), fixed bin (35));
dcl  up_sysctl_$check_acs entry (char (*), char (*), fixed bin, bit (36) aligned, fixed bin (35));

/* external static */

dcl  as_error_table_$proj_auth_excludes fixed bin (35) static external;
dcl  as_error_table_$proj_deleted fixed bin (35) static external;
dcl  as_error_table_$proj_max fixed bin (35) static external;
dcl  error_table_$noentry ext fixed bin (35);

/* automatic */

dcl  access_ceiling bit (72) aligned;
dcl  auth_string char (32) aligned;
dcl  csc_long char (100) aligned;
dcl  csc_short char (8) aligned;
dcl  debg char (8);
dcl  do_attributes bit (1) aligned;
dcl  do_authorization bit (1) aligned;
dcl  htp ptr init (null);
dcl  i fixed bin;
dcl  j fixed bin;
dcl  jj fixed bin;
dcl  k fixed bin;
dcl  max_rs_number fixed bin;
dcl  maxprim fixed bin;
dcl  mode bit (36) aligned;
dcl  movelen fixed bin (24);
dcl  new_project bit (1) aligned;
dcl  newhtp ptr init (null);
dcl  offset bit (18) aligned;
dcl  old_auth_string char (32) aligned;
dcl  oldhtp ptr init (null);
dcl  p ptr;
dcl  procid bit (36) aligned;
dcl  q ptr;
dcl  satep ptr;
dcl  satp ptr;
dcl  sp ptr;
dcl  syj fixed bin;
dcl  tp ptr;
dcl  xp ptr;

dcl  1 dir_acl (7) aligned,
       2 userid char (32),
       2 mode bit (36),
       2 rcode fixed bin (35);

dcl  1 sys_dir_acl (7) aligned,
       2 userid char (32),
       2 mode bit (36),
       2 rcode fixed bin (35);

/* internal static */

dcl  acs_name char (32) int static options (constant) init ("sat.install.acs");
dcl  system_low bit (72) aligned internal static initial (""b);
dcl  LEGAL char (95) int static init			/* Printables except PAD, semicolon, but with BS */
	(" !""#$%&'()*+,-./0123456789:<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~") options (constant);

/* based */

dcl  1 movetable based aligned,
       2 moveary (movelen) fixed bin (35);

/* builtin */

dcl  (addr, clock, fixed, index, null, rel, string, substr, unspec, verify)
      builtin;
%page;
	ansp = P_ansp;

	call system_info_$max_rs_number (max_rs_number);
	procid = get_process_id_ ();
	if procid ^= anstbl.as_procid then return;	/* privileged entrypoint */

	do_authorization = segp -> sat.author.update_authorization;
	do_attributes = segp -> sat.author.update_attributes;

	access_ceiling = installation_parms.access_authorization_ceiling;

	new_project = "0"b;
	instalp = null;				/* pre-set returned pointer */
	instaldir = anstbl.sysdir;
	instalname = "sat";
	if wordcount < 64 then do;			/* make sure segment contains something */
	     answer = "wordcount < 64";
	     code = 10;
	     return;
	end;
	if segp -> sat.version ^= SAT_version then do;	/* Check right overlay dcl */
	     answer = "incorrect table version";
	     code = 9;
	     return;
	end;
	if segp -> sat.current_size > segp -> sat.max_size then do;
	     answer = "current_size > max_size";
	     code = 11;
	     return;
	end;
	if segp -> sat.n_projects > segp -> sat.current_size then do;
	     answer = "n_projects > current_size";
	     code = 12;
	     return;
	end;
	offset = rel (addr (segp -> sat.project (segp -> sat.current_size + 1)));
	if fixed (offset, 18) - 1 > wordcount then do;
	     answer = "size inconsistent with wordcount";
	     code = 13;
	     return;
	end;
	call up_sysctl_$check_acs (acs_name, (segp -> sat.author.proc_group_id), -1, mode, code);
	if (code ^= 0) | ((mode & RW_ACCESS) ^= RW_ACCESS) then do;
	     answer = "access violation";
	     code = 14;
	     return;
	end;

	call hcs_$initiate (instaldir, instalname, "", 0, 0, sp, code);
	if sp = null then do;
	     answer = "cannot initiate old SAT";
	     code = 15;
	     return;
	end;

	if segp -> sat.uwt_size > 24 then do;
	     answer = "uwt_size > 24";
	     code = 41;
	     return;
	end;
	do i = 1 to segp -> sat.uwt_size;
	     if verify (segp -> sat.uwt (i).initproc, LEGAL) ^= 0 then do;
		answer = "uwt.initproc not ASCII";
		code = 16;
		return;
	     end;
	     j = segp -> sat.uwt (i).units;
	     if ((j < 0) | (j > 100)) then do;
		answer = "uwt.units illegal value";
		code = 41;
		return;
	     end;
	end;
	if verify (segp -> sat.system_admin (1), LEGAL) ^= 0 then go to badsa;
	if verify (segp -> sat.system_admin (2), LEGAL) ^= 0 then do;
badsa:	     answer = "system administrator not ASCII";
	     code = 16;
	     return;
	end;
	maxprim = 0;

	do i = 1 to segp -> sat.current_size;

	     p = addr (segp -> sat.project (i));
	     if p -> project.state < 0 then go to bast;	/* Check entry state - filters junk */
	     if p -> project.state > 3 then do;		/* Installing state 0 or 2 is ignored */
bast:		answer = "illegal entry state value";
		code = 17;
		return;
	     end;
	     if verify (p -> project.project_id, LEGAL) ^= 0 then do;
		answer = "project_id not ASCII";
		code = 16;
		return;
	     end;
	     if p -> project.state = 1 then		/* only check if it's live */
		do j = 1 to i - 1;
		q = addr (segp -> sat.project (j));
		if q -> project.state = 1 then do;	/* only check if it's live */
		     if q -> project.project_id = p -> project.project_id then do;
			answer = "duplicate project " || p -> project.project_id;
			code = 42;
			return;
		     end;
		     if q -> project.alias ^= ""	/* ignore blank aliases */
		     then if q -> project.alias = p -> project.alias then do;
			     answer = "duplicate alias " || p -> project.alias;
			     code = 42;
			     return;
			end;
		end;
	     end;
	     if p -> project.state > 0 then do;
		if verify (p -> project.project_dir, LEGAL) ^= 0 then do;
		     answer = "project_dir not ASCII " || p -> project.project_id;
		     code = 16;
		     return;
		end;
		if ^aim_check_$greater_or_equal (access_ceiling, p -> project.project_authorization (2))
		then do;
		     answer = "authorization > access_ceiling";
		     code = 18;
		end;
		if p -> project.rs_number ^= 0 then do;
		     if p -> project.rs_number > max_rs_number then do;
			answer = "bad rate_structure number " || p -> project.project_id;
			code = 44;
			return;
		     end;
		end;
	     end;
	     p -> project.at.nopreempt = "1"b;
	     maxprim = maxprim + p -> project.max_users;
	end;

/* Individual items in proposed SAT look ok. Now build new SAT by merging old and new.
   Since user pointers to SAT entries are kept, must not change order. */

	call hcs_$make_seg (instaldir, "", "", 1011b, tp, code);
	if tp = null then do;
	     call sys_log_$error_log (2, code, "up_sat_", "cannot make temp");
	     return;
	end;
	movelen = SAT_header_lth + sp -> sat.current_size * SAT_entry_lth;
	tp -> movetable = sp -> movetable;		/* Shlup */

/* copy header of new sat over old sat header. */

	tp -> sat.author.lock = ""b;
	tp -> sat.author.last_install_time = clock ();
	tp -> sat.author.proc_group_id = segp -> sat.author.proc_group_id;
	tp -> sat.author.table = segp -> sat.author.table;
	tp -> sat.author.w_dir = segp -> sat.author.w_dir;

	if do_attributes then do;
	     tp -> sat.max_size = segp -> sat.max_size;
	     tp -> sat.max_units = segp -> sat.max_units;
	     tp -> sat.uwt_size = segp -> sat.uwt_size;

	     do j = 1 to tp -> sat.uwt_size;
		tp -> sat.uwt.initproc (j) = segp -> sat.uwt.initproc (j);
		tp -> sat.uwt.units (j) = segp -> sat.uwt.units (j);
	     end;
	     tp -> sat.system_admin (1) = segp -> sat.system_admin (1);
	     tp -> sat.system_admin (2) = segp -> sat.system_admin (2);
	end;
	tp -> sat.n_projects = 0;			/* will recompute (note use old val of freep) */
	tp -> sat.version = SAT_version;

	do i = 1 to tp -> sat.current_size;		/* search old SAT for projects not in new */
	     p = addr (tp -> sat.project (i));
	     if p -> project.state = 0 then go to x1;	/* ignore free entries in old sat */
	     p -> project.state = 2;
	     do j = i to segp -> sat.current_size, 1 to i - 1;
		q = addr (segp -> sat.project (j));
		if q -> project.state = 1 | q -> project.state = 3 then
                                                            /* Ignore any non-state-1&3 entries in new copy */
		     if p -> project.project_id = q -> project.project_id then do;
			if q -> project.state = 3 then do;
			     p -> project.state = 3;  /* Flag renamed project in old SAT */
			     go to rnp;
			end;
			p -> project.state = 1;	/* Old project, still in new version */
			tp -> sat.n_projects = tp -> sat.n_projects + 1;
			q -> project.state = -1;	/* so not check again */
			if do_authorization then
			     if unspec (p -> project.project_authorization) ^=
				unspec (q -> project.project_authorization) then do;
				auth_string = display_access_class_$range (q -> project.project_authorization);
				old_auth_string = display_access_class_$range (p -> project.project_authorization);
				call sys_log_ (0, "up_sat_: changing authorization of ^a project from ^a to ^a",
				     p -> project.project_id, old_auth_string, auth_string);
			     end;

			call copy;

/* have now merged new values into entry. if project.max_users changed, proj may be over max users */

			k = p -> project.n_users - p -> project.max_users;
			do jj = 1 to anstbl.current_size;
			     utep = addr (anstbl.entry (jj));
			     if ute.active >= NOW_LOGGED_IN then
				if ute.project = p -> project.project_id then do;
				     if ute.at.nobump = "0"b then do;
					if k <= 0 then go to sak;
					k = k - 1;
					if ute.preempted ^= 0 then go to sak;
					call sys_log_ (1, "up_sat_: bumping ^a.^a, over max users on project",
					     ute.person, ute.project);
					call asu_$bump_code (utep, as_error_table_$proj_max, debg, code,
					     (installation_parms.warning_time));
sak:				     end;
				     if ^aim_check_$in_range (ute.process_authorization_range (1), p -> project.project_authorization) |

					^aim_check_$in_range (ute.process_authorization_range (2), p -> project.project_authorization) then do;
					call sys_log_ (1,
					     "up_sat_: bumping ^a.^a, project authorization ^a now excludes user authorization ^a.",
					     ute.person, ute.project, display_access_class_$range (p -> project.project_authorization), display_access_class_ (ute.process_authorization));
					call asu_$bump_code (utep, as_error_table_$proj_auth_excludes,
					     debg, code, (0));
				     end;
				end;
			end;
			go to x1;
		     end;
	     end;

/* Project in old sat does not exist in new sat. May bump all users */

rnp:	     if ^do_attributes then go to cant_add_or_delete_proj;

	     if p -> project.project_id = "SysAdmin" then go to eek;
	     if p -> project.project_id = "SysDaemon" then do;
eek:		answer = "Attempt to delete project " || p -> project.project_id;
		code = 14;
		return;
	     end;
	     do jj = 1 to anstbl.current_size;		/* scan answer table for users on deleted proj */
		utep = addr (anstbl.entry (jj));
		if ute.active >= NOW_LOGGED_IN then
		     if ute.project = p -> project.project_id then do;
			call sys_log_ (1, "up_sat_: bumping ^a.^a, project deleted.",
			     ute.person, ute.project);
			call asu_$bump_code (utep, as_error_table_$proj_deleted, debg, code,
			     (installation_parms.warning_time));
		     end;
	     end;
x1:	end;

	do i = 1 to 7;
	     sys_dir_acl (i).mode, dir_acl (i).mode = "111"b; /* SMA */
	end;
	do syj = 1 to 2;				/* set up ACL for system admin. */
	     if tp -> sat.system_admin (syj) = " " then go to set_acl1;
	     k = index (tp -> sat.system_admin (syj), " ");
	     sys_dir_acl (syj).userid = (substr (tp -> sat.system_admin (syj), 1, k - 1) || ".*");
	end;
	syj = 3;
set_acl1: sys_dir_acl (syj).userid = get_group_id_ ();

/* Now scan new sat for any entries which were not matched in old sat. These are new projects */

	do i = 1 to segp -> sat.current_size;
	     q = addr (segp -> sat.project (i));
	     if q -> project.state = 1 then do;		/* this is a new project */
		if ^do_attributes then go to cant_add_or_delete_proj;

		tp -> sat.n_projects = tp -> sat.n_projects + 1;
badx:		j = tp -> sat.freep;		/* allocate new SAT entry */
		if j = 0 then j, tp -> sat.current_size = tp -> sat.current_size + 1;
		else do;
		     xp = addr (tp -> sat.project (j));
		     if xp -> project.state ^= 0 then do;
			call sys_log_ (2, "up_sat_: project ^a on free list state nonzero",
			     xp -> project.project_id);
			tp -> sat.freep = 0;
			go to badx;
		     end;
		     tp -> sat.freep = xp -> project.chain;
		end;
		p = addr (tp -> sat.project (j));
		p -> project.state = 1;		/* new proj */
		p -> project.project_id = q -> project.project_id;
		call copy;
		if ^do_authorization then do;
		     p -> project.project_authorization = system_low;
		     p -> project.audit = ""b;
		end;
		if (p -> project.project_authorization (1) | p -> project_authorization (2)) ^= system_low then do;
		     auth_string = display_access_class_$range (p -> project.project_authorization);
		     call sys_log_ (0, "up_sat_: adding ^a project with authorization ^a",
			p -> project.project_id, auth_string);
		end;
		p -> project.pdt_ptr = null;
		p -> project.n_users = 0;
	     end;
	end;
	instalp = sp;
	call hcs_$delentry_seg (segp, code);
	segp = tp;


/* Make a new hash table for the SAT. The old one is mostly still valid, since
   no project entries have been moved. The new hash table will only
   reflect added and deleted projects, and changed aliases. */

	call hcs_$make_seg (instaldir, "sat.ht.temp", "", 1011b, newhtp, code);
	if newhtp = null then do;
	     answer = "unable to get segment for new SAT hash table";
	     call sys_log_$error_log (2, code, "up_sat_", "sat.ht.temp");
	     code = 33;				/* any old nonzero code will do */
	     return;				/* We have not replaced the SAT yet. We won't */
	end;
	call up_sat_$make_sat_hash (segp, segp -> sat.n_projects, newhtp, answer, code);
	if code ^= 0 then do;
	     call hcs_$delentry_seg (newhtp, (0));
	     return;
	end;

/* Now replace the SAT */

	wordcount = SAT_header_lth + tp -> sat.current_size * SAT_entry_lth;
	movelen = wordcount;
	sp -> movetable = segp -> movetable;		/* Copy new SAT over old one fast. */
	call hcs_$set_bc (instaldir, instalname, 36 * wordcount, code);
	call hcs_$set_safety_sw (instaldir, instalname, "1"b, code);

/* Now replace the hash table. Recall that the old one is mostly good, so if anything goes wrong, it is not a disaster */

	call hcs_$initiate (instaldir, "sat.ht", "", 0, 1, oldhtp, code);
	if oldhtp = null then do;			/* can't initiate it - either not there or something wrong */
	     if code ^= error_table_$noentry then goto unab;
	     call hcs_$chname_file (instaldir, "sat.ht.temp", "sat.ht.temp", "sat.ht", code);
	     if code ^= 0 then goto unab;
	end;
	else do;					/* can initiate sat.ht */
	     call hcs_$truncate_seg (oldhtp, (0), code);
	     if code ^= 0 then do;
unab:		call sys_log_$error_log (2, code, "up_sat_", "sat.ht");
		answer = "unable to replace old SAT hash table";
		code = 33;			/* any nonzero code is ok */
		return;
	     end;

	     movelen = newhtp -> htable.loht;
	     oldhtp -> movetable = newhtp -> movetable;	/* copy new hash table over old */
	     call hcs_$delentry_seg (newhtp, (0));	/* delete temp new hash table */
	end;

	call hcs_$set_bc (instaldir, "sat.ht", 36 * movelen, (0));
	call hcs_$set_safety_sw (instaldir, "sat.ht", "1"b, (0));
						/* do not change the acl of sat.ht */
	code = 0;

	return;

no_dir:	answer = "cannot create project directory";
	code = 43;
	return;

cant_add_or_delete_proj:
	answer = "not allowed to add/delete project";
	code = 44;
	return;


/* internal procedure to copy sat entry pointed to by q into that pointed to by p */

copy: proc;

	if do_authorization then do;
	     p -> project.project_authorization = q -> project.project_authorization;
	     p -> project.audit = q -> project.audit;
	end;

	if ^do_attributes then return;

	p -> project.project_dir = q -> project.project_dir;
	p -> project.max_users = q -> project.max_users;
	string (p -> project.at) = string (q -> project.at);
	p -> project.admin (1).userid = q -> project.admin (1).userid;
	p -> project.admin (2).userid = q -> project.admin (2).userid;
	p -> project.admin (3).userid = q -> project.admin (3).userid;
	p -> project.admin (4).userid = q -> project.admin (4).userid;
	p -> project.cutoff = q -> project.cutoff;
	p -> project.min_ring = q -> project.min_ring;
	p -> project.max_ring = q -> project.max_ring;
	p -> project.pdir_quota = q -> project.pdir_quota;
	p -> project.alias = q -> project.alias;
	p -> project.group = q -> project.group;
	p -> project.groups (1) = q -> project.groups (1);
	p -> project.groups (2) = q -> project.groups (2);
	p -> project.days_to_cutoff = q -> project.days_to_cutoff;
	p -> project.pct_balance = q -> project.pct_balance;
	p -> project.dollars_to_cutoff = q -> project.dollars_to_cutoff;
	p -> project.grace_max = q -> project.grace_max;
	p -> project.max_foreground = q -> project.max_foreground;
	p -> project.max_background = q -> project.max_background;
	p -> project.abs_foreground_cpu_limit = q -> project.abs_foreground_cpu_limit;


	p -> project.rs_number = q -> project.rs_number;

     end copy;


make_sat_hash: entry (segp, n_entries, dhtp, an, co);

/* This entry point builds a hash table for the SAT.
   It is called from above, and also by lg_ctl_ if the hash table is missing at startup
   time or appears to be garbaged when someone is trying to log in.
   Since it is an entry point, and not an internal procedure, it gets a new
   stack frame when called from above, and the only variables that have good values in them
   are the ones in the argument list.
*/

/* segp is the first argument in the main entry point's arg list, and is declared above.
   It is a pointer to the SAT for which we are building the hash table. */

dcl  dhtp ptr;					/* ptr to seg in which ht to be built */
dcl  n_entries fixed bin;				/* initial number of entries */
dcl  an char (*);					/* if error, this is msg explaining what happened */
dcl  co fixed bin (35);				/* error code */

	call hash_$make (dhtp, hash_$opt_size (n_entries), co);
	if co ^= 0 then do;
	     an = "too many buckets in hash table";
	     return;
	end;

	satp = segp;				/* avoid the need for lots of segp ->'s */
	do i = 1 to sat.current_size;			/* look at all entries */
	     satep = addr (sat.project (i));		/* avoid more ->'s */
	     if project.state = 1 then do;		/* only put real projects in the hash table */
		call hash_$in (dhtp, project.project_id, i, co);
		if co ^= 0 then do;
		     call convert_status_code_ (co, csc_short, csc_long);
		     call ioa_$rsnnl ("Hash table error for project ^a. ^a", an, (0), project.project_id, csc_long);
		     return;
		end;
		if project.alias ^= "" then do;	/* put aliases in hash table, too */
		     call hash_$in (dhtp, project.alias, i, co);
		     if co ^= 0 then do;
			call convert_status_code_ (co, csc_short, csc_long);
			call ioa_$rsnnl ("Hash table error for alias ^a. ^a", an, (0), project.project_id, csc_long);
			return;
		     end;
		end;
	     end;
	end;

	co = 0;
	return;

%page; %include access_mode_values;
%page; %include answer_table;
%page; %include dialup_values;
%page; %include hashst;
%page; %include installation_parms;
%page; %include sat;
%page; %include user_attributes;
%page; %include user_table_entry;
%page; %include user_table_header;
%page;
/* BEGIN MESSAGE DOCUMENTATION

   Message:
   up_sat_: adding PROJ project with authorization AUTH

   S:	as (severity0)

   T:	$run

   M:	A system security administrator has added the project PROJ with an authorization greater than system low.

   A:	$ignore


   Message:
   up_sat_: bumping NAME.PROJ, project authorization reduced

   S:	as (severity1)

   T:	$run

   M:	A system security administrator has installed a new SAT that reduces the authorization for the user identified
   by NAME on the project PROJ below the current value assigned to this project.  Therefore, the user is being bumped from the
   system.

   A:	$ignore


   Message:
   up_sat_: bumping NAME.PROJ, project deleted

   S:	as (severity1)

   T:	$run

   M:	The system administrator has deleted the project PROJ.
   All of its users are bumped.

   A:	$ignore


   Message:
   up_sat_: bumping NAME.PROJ, over max users on project

   S:	as (severity1)

   T:	$run

   M:	The user named has been bumped because the system administrator
   has reduced the maximum number of users that can be logged in on
   the project PROJ.

   A:	$ignore


   Message:
   up_sat_: changing authorization of PROJ project from OLD to NEW

   S:	as (severity0)

   T:	$run

   M:	A system security administrator has installed a new SAT that changes the authorization of the project PROJ.
   OLD is the previous authorization for the project; NEW is the authorization now assigned to the project.

   A:	$ignore


   Message:
   up_sat_: ERROR_MESSAGE. cannot make temp

   S:	as (severity1)

   T:	$run

   M:	A temporary segment could not be created while attempting
   to install a new system administrator's table.  The system attempts
   to proceed.

   A:	$inform


   Message:
   up_sat_: ERROR_MESSAGE. sat.ht.temp

   S:	as (severity2)

   T:	$run

   M:	A temporary segment could not be created while attempting to build a
   hash table for a new system administrator's table (SAT). The new SAT has been installed, but
   the old hash table is still in use, so any new projects are unusable.

   A:	$inform


   Message:
   up_sat_: ERROR_MESSAGE. sat.ht

   S:	as (severity2)

   T:	$run

   M: The system was unable to replace the SAT hash table, during installation
   of a new SAT. The new SAT has been installed, but the old hash table
   is still in use, so any new projects are unusable.

   A:	$inform



   Message:
   up_sat_: project PROJ on free list state nonzero

   S:	as (severity2)

   T:	$run

   M:	The free chain for the SAT seems to include a project that
   does not have state zero.  The system abandons the free chain
   and attempts to proceed.

   A:	$inform_sa

   END MESSAGE DOCUMENTATION */

     end up_sat_;
