/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: style4 */
up_rtdt_: procedure (upd_rtdtp, wordcount, instaldir, instalname, instalp, P_ansp, ip, answer, code);

/*
   up_rtdt_ - update resource type description table.
   Stolen from up_mgt_ on 03/21/78 by C. D. Tavares
   Modified 10/03/80 by CDT to fix subscripting error causing additon
   of only one new attribute per resource type per installation.
   Modified November 1981, E. N. Kittlitz.  user_table_entry conversion.
   Modified January 1982, BIM for author changes (lock and install time).
   Modified February 1982, E. N. Kittlitz. xxx.install.acs change.
   Modified July 1982, E. N. Kittlitz. Put back CDT's fix of 10/03/80.
   Modified October 1982, B. Braun to add attributes correctly (phx8087).
   Modified September 1983, S. Harris (UNCA) via E. N. Kittlitz.  Put back CDT's fixes again.
   Modified:
   10/05/84 by R. Michael Tague:  up_sysctl_$check_acs now returns a bit (36)
   mode string instead of a fixed bin (5) and no longer takes a directoy arg.
*/

/****^  HISTORY COMMENTS:
  1) change(86-06-05,GJohnson), approve(86-06-05,MCR7387),
     audit(86-06-10,Martinson), install(86-07-11,MR12.0-1092):
     Correct error message documentation.
  2) change(87-04-26,GDixon), approve(87-07-13,MCR7741),
     audit(87-07-16,Hartogs), install(87-08-04,MR12.1-1055):
     Upgraded for change to answer_table.incl.pl1.
                                                   END HISTORY COMMENTS */

/*  DECLARATION OF PARAMETERS  */
dcl  (upd_rtdtp, instalp, P_ansp, ip) pointer;
dcl  wordcount fixed bin;
dcl  code fixed bin (35);
dcl  (instaldir char (*), instalname char (*), answer char (*));


/* DECLARATION OF EXTERNAL SYMBOLS */

dcl  define_area_ ext entry (pointer, fixed bin (35));
dcl  get_ring_ entry () returns (fixed bin (3));
dcl  unique_chars_ ext entry (bit (*)) returns (char (15));
dcl  hcs_$chname_file entry (char (*), char (*), char (*), char (*), fixed bin (35));
dcl  hcs_$delentry_seg entry (ptr, fixed bin (35));
dcl  hcs_$get_ring_brackets entry (char (*), char (*), (3) fixed bin (3), fixed bin (35));
dcl  hcs_$set_ring_brackets entry (char (*), char (*), (3) fixed bin (3), fixed bin (35));
dcl  up_sysctl_$check_acs entry (char (*), char (*), fixed bin, bit (36) aligned, fixed bin (35));
dcl  get_process_id_ entry () returns (bit (36));
dcl  get_group_id_ entry () returns (char (32));
dcl  hcs_$replace_acl entry (char (*), char (*), ptr, fixed bin, bit (1), fixed bin (35));
dcl  hcs_$list_acl entry (char (*), char (*), ptr, ptr, ptr, fixed bin, fixed bin (35));
dcl  hcs_$set_safety_sw entry (char (*), char (*), bit (1), fixed bin (35));
dcl  hcs_$set_safety_sw_seg entry (pointer, bit (1) aligned, fixed bin (35));
dcl  hcs_$set_bc entry (char (*), char (*), fixed bin (24), fixed bin (35));
dcl  cu_$level_get entry (fixed bin);
dcl  hcs_$make_seg entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35));
dcl  hcs_$initiate entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr, fixed bin (35));
dcl  sys_log_ entry options (variable);
dcl  sys_log_$error_log entry options (variable);
dcl  ioa_$rsnnl entry options (variable);

dcl  error_table_$action_not_performed ext fixed bin (35);
dcl  sys_info$max_seg_size ext fixed bin (35);

dcl  (rcp_sys_$create_registry,
     rcp_sys_$update_registry_header) ext entry (char (*) aligned, pointer, fixed bin (35)),
     rcp_sys_$remove_registry ext entry (char (*) aligned, char (*) aligned, fixed bin (35));

dcl  (addr, binary, clock, empty, hbound, index, length, null, nullo, offset, pointer,
     rel, rtrim, size, string, substr, unspec) builtin;
dcl  cleanup condition;

/* DECLARATION OF INTERNAL STATIC VARIABLES */

dcl  acs_name char (32) int static options (constant) init ("rtdt.install.acs");
dcl  debug_sw bit (1) aligned static initial (""b);

dcl  (TYPE_AND_LOG_MSG initial (1),
     TYPE_AND_LOG_MSG_WITH_BANNER initial (2)) fixed bin internal static options (constant);

/* dcl  LEGAL char (95) int static init                     /* Printables except PAD, semicolon, but with BS */
/*     (" !""#$%&'()*+,-./0123456789:<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~");/*  */

/* DECLARATION OF AUTOMATIC STORAGE VARIABLES */

dcl  (i, j) fixed bin;				/* counters */
dcl  registry_dir char (168) aligned;
dcl  newname char (32);
dcl  acl_area area (300);
dcl  acl_ptr pointer;
dcl  acl_count fixed bin;
dcl  unique_name char (32);
dcl  bitcount fixed bin (24);
dcl  tempstring char (128) aligned;
dcl  upd_to_new (72) fixed bin;
dcl  auto_upd_attributes_valid bit (72) aligned;
dcl  not_found bit (1) aligned;
dcl  no_prev_table bit (1);				/* switch to indicate that an old table doesn't exist */
dcl  syacn fixed bin init (1);
dcl  ring fixed bin;
dcl  mode bit (36) aligned;
dcl  rtdt_rings (3) fixed bin (3);

dcl  1 aclb (5) aligned int,
       2 userid char (32),
       2 mode bit (36),
       2 rpad bit (36) init ((5) (36)"0"b),
       2 rcode fixed bin (35);
%page;
/* ====================================================================== */

%include rtdt;


dcl  1 old_rtdt aligned like rtdt based (old_rtdtp);
dcl  1 new_rtdt aligned like rtdt based (new_rtdtp);
dcl  1 upd_rtdt aligned like rtdt based (upd_rtdtp);

dcl  1 old_rtde aligned based (old_rtdep),
       2 fixed_info like rtde.fixed_info aligned,
       2 mates (N_MATES refer (old_rtde.n_mates)) char (32) aligned,
       2 subtypes (N_SUBTYPES refer (old_rtde.n_subtypes)) aligned,
         3 subtype_name char (32),
         3 subtype_defaults like rtde.registration_defaults aligned;

dcl  1 new_rtde aligned based (new_rtdep),
       2 fixed_info like rtde.fixed_info aligned,
       2 mates (N_MATES refer (new_rtde.n_mates)) char (32) aligned,
       2 subtypes (N_SUBTYPES refer (new_rtde.n_subtypes)) aligned,
         3 subtype_name char (32),
         3 subtype_defaults like rtde.registration_defaults aligned;

dcl  1 upd_rtde aligned based (upd_rtdep),
       2 fixed_info like rtde.fixed_info aligned,
       2 mates (N_MATES refer (upd_rtde.n_mates)) char (32) aligned,
       2 subtypes (N_SUBTYPES refer (upd_rtde.n_subtypes)) aligned,
         3 subtype_name char (32),
         3 subtype_defaults like rtde.registration_defaults aligned;

dcl  (last_rtdep, upd_rtdep, new_rtdtp, new_rtdep, old_rtdtp, old_rtdep, old_cttp, upd_cttp, delthru_ptr) pointer;

dcl  1 auto_ctt aligned automatic,
       2 n_charge_types fixed bin,
       2 charge_types (100) char (32);
%page;
	ansp = P_ansp;
	if anstbl.as_procid ^= get_process_id_ () then return;

	rtdtp = null;				/* this will catch unqualified refs to rtdt */
	instalp = null;				/* pre-set returned pointer */
	delthru_ptr = null;				/* delete nothing if we fail(yet) */
	instaldir = anstbl.sysdir;			/* Make name of place to put copy. */
	registry_dir = rtrim (instaldir, " ") || ">rcp";
	instalname = "rtdt";			/* Make segment name. */
	call hcs_$initiate (instaldir, instalname, "", 0, 0, old_rtdtp, code);
	if old_rtdtp = null then do;
	     no_prev_table = "1"b;			/* no old RTDT. How about that? */
	     rtdt_rings (*) = get_ring_ ();
	end;
	else do;
	     no_prev_table = "0"b;
	     call hcs_$get_ring_brackets (instaldir, instalname, rtdt_rings, code);
	     if code ^= 0 then rtdt_rings (*) = get_ring_ ();
	end;

	if wordcount < 64 then do;			/* make sure segment contains something */
	     answer = "wordcount < 64";
	     goto rtdt_error;
	end;
	if (upd_rtdt.version ^= RTDT_version_2) & (upd_rtdt.version ^= RTDT_version_3) then do;
	     answer = "unimplemented version";
	     goto rtdt_error;
	end;

	if ^no_prev_table then do;
	     call cu_$level_get (ring);
	     call up_sysctl_$check_acs (acs_name, (upd_rtdt.author.proc_group_id), ring, mode, code);
	     if (code ^= 0) | ((mode & RW_ACCESS) ^= RW_ACCESS) then do;
		answer = "access violation";
		goto rtdt_error;
	     end;
	end;

/* Create a unique named segment to hold the RTDT during merge */

	unique_name = unique_chars_ (""b);

	on cleanup call clean_up;

	call hcs_$make_seg (instaldir, unique_name, "", 1010b, new_rtdtp, code);
	if code ^= 0 then do;
	     answer = "cannot create temp RTDT";
	     goto rtdt_error;
	end;

	delthru_ptr = new_rtdtp;

	new_rtdt.author = upd_rtdt.author;
	new_rtdt.author.last_install_time = clock ();
	new_rtdt.author.lock = ""b;
	new_rtdt.version = upd_rtdt.version;
	new_rtdt.charge_type_table_ptr,
	     new_rtdt.first_resource = nullo;
	new_rtdt.installed_under_resource_mgt = ip -> installation_parms.rcp_init_flags.resource_mgmt_enabled;

	RTDT_area_len = 0;
	RTDT_area_len = sys_info$max_seg_size - size (rtdt);

	unspec (auto_area_info) = ""b;
	auto_area_info.version = area_info_version_1;
	auto_area_info.no_freeing, auto_area_info.dont_free = "1"b;
	auto_area_info.owner = "RTDT";
	auto_area_info.size = RTDT_area_len;
	auto_area_info.areap = addr (new_rtdt.rtdt_area);

	call define_area_ (addr (auto_area_info), code);
	if code ^= 0 then do;
	     answer = "Cannot define area in RTDT";
	     goto rtdt_error;
	end;

	old_cttp,
	     last_rtdep = null;
	auto_ctt.n_charge_types = 0;

	upd_cttp = pointer (upd_rtdt.charge_type_table_ptr, upd_rtdt.rtdt_area);


/* If there is an RTDT already, we have to merge the new with the old. */

	if ^no_prev_table then do;

	     old_cttp = pointer (old_rtdt.charge_type_table_ptr, old_rtdt.rtdt_area);

	     do old_rtdep = pointer (old_rtdt.first_resource, old_rtdt.rtdt_area)
		repeat (pointer (old_rtde.next_resource, old_rtdt.rtdt_area))
		while (old_rtdep ^= null);

		old_rtde.deletion_pending = ""b;	/* initialize this */

		if old_rtde.valid then do;
		     not_found = "1"b;
		     upd_to_new (*) = 0;

		     do upd_rtdep = pointer (upd_rtdt.first_resource, upd_rtdt.rtdt_area)
			repeat (pointer (upd_rtde.next_resource, upd_rtdt.rtdt_area))
			while (upd_rtdep ^= null & not_found);

			if upd_rtde.valid then
			     if old_rtde.name = upd_rtde.name then do;
				not_found = ""b;

				N_MATES = upd_rtde.n_mates;
				N_SUBTYPES = upd_rtde.n_subtypes;

				allocate new_rtde in (new_rtdt.rtdt_area);

/* Examine and merge the header for this RTDE. */

				if old_rtde.is_volume ^= upd_rtde.is_volume then do;
				     if old_rtde.is_volume
				     then answer = "attempt to change volume to device: " || old_rtde.name;
				     else answer = "attempt to change device to volume: " || old_rtde.name;
				     goto rtdt_error; /* This would screw up registration database no end */
				end;

				if old_rtde.is_synonym ^= upd_rtde.is_synonym then
				     call sys_log_ (TYPE_AND_LOG_MSG, "up_rtdt_: ^a is ^[now^;no longer^] a synonym.",
					old_rtde.name, upd_rtde.is_synonym);

				if (debug_sw & ^upd_rtde.is_synonym) then do;

				     if old_rtde.manual_clear ^= upd_rtde.manual_clear then
					call sys_log_ (TYPE_AND_LOG_MSG, "up_rtdt_: ^a ^a changed from ^b to ^b.",
					     old_rtde.name, "manual_clear",
					     old_rtde.manual_clear, upd_rtde.manual_clear);
				     if old_rtde.process_limit ^= upd_rtde.process_limit then
					call sys_log_ (TYPE_AND_LOG_MSG, "up_rtdt_: ^a ^a changed from ^d to ^d.",
					     old_rtde.name, "process_limit",
					     old_rtde.process_limit, upd_rtde.process_limit);
				     if old_rtde.default_time ^= upd_rtde.default_time then
					call sys_log_ (TYPE_AND_LOG_MSG, "up_rtdt_: ^a ^a changed from ^d to ^d.",
					     old_rtde.name, "default_time",
					     old_rtde.default_time, upd_rtde.default_time);
				     if old_rtde.max_time ^= upd_rtde.max_time then
					call sys_log_ (TYPE_AND_LOG_MSG, "up_rtdt_: ^a ^a changed from ^d to ^d.",
					     old_rtde.name, "max_time",
					     old_rtde.max_time, upd_rtde.max_time);
				     if old_rtde.advance_notice_time ^= upd_rtde.advance_notice_time then
					call sys_log_ (TYPE_AND_LOG_MSG, "up_rtdt_: ^a ^a changed from ^d to ^d.",
					     old_rtde.name, "advance_notice_time",
					     old_rtde.advance_notice_time, upd_rtde.advance_notice_time);
				     if old_rtde.advance_notice_time ^= upd_rtde.advance_notice_time then
					call sys_log_ (TYPE_AND_LOG_MSG, "up_rtdt_: ^a ^a changed from ^d to ^d.",
					     old_rtde.name, "advance_notice_time",
					     old_rtde.advance_notice_time, upd_rtde.advance_notice_time);
				     if old_rtdt.version ^= RTDT_version_2 then
					if old_rtde.precanon_proc ^= upd_rtde.precanon_proc then
					     call sys_log_ (TYPE_AND_LOG_MSG, "up_rtdt_: ^a ^a changed from ^a to ^a.",
						old_rtde.name, "precanon_proc",
						old_rtde.precanon_proc, upd_rtde.precanon_proc);
				     if old_rtde.n_subtypes ^= upd_rtde.n_subtypes then
					call sys_log_ (TYPE_AND_LOG_MSG, "up_rtdt_: ^a ^a changed from ^d to ^d.",
					     old_rtde.name, "n_subtypes",
					     old_rtde.n_subtypes, upd_rtde.n_subtypes);
				end;

				if upd_rtdt.version = RTDT_version_3 then
				     call check_canon_proc (upd_rtde.precanon_proc);

				unspec (new_rtde.fixed_info) = unspec (upd_rtde.fixed_info);
				new_rtde.next_resource = nullo;
				new_rtde.deletion_pending, new_rtde.addition_pending = ""b;

				if new_rtde.is_synonym then do; /* syns are mostly hoochy-coochy */
				     upd_rtde.valid = ""b; /* otherwise it shows up as an addition */
				     goto skip_validation;
				end;

/* RTDT's will be installed before Resource Management.  The initial release
   of RTDT's will not be accompanied by registries.  When Resource Management
   is turned on at a site, we will have to create fresh registries for each
   resource type.  The following code does this.  Note that a site's RTDT must
   be reinstalled to create these registries.  */

				if old_rtdt.installed_under_resource_mgt = ""b then
				     if ip -> installation_parms.rcp_init_flags.resource_mgmt_enabled then
					new_rtde.addition_pending = "1"b;

/* Now, examine the attributes and merge the new attributes with the old,
   preserving the ordering of the old attributes.  This is necessary because
   all the resources described in the registration database reference these
   attributes by a positional bit string, and thus we can never shift any of
   these bits without passing through the entire registry for this resource
   and doing the same thing to all those attribute bits too.  */

				auto_upd_attributes_valid = upd_rtde.attributes_valid;
				new_rtde.attributes_valid = old_rtde.attributes_valid;
				new_rtde.attributes_to_match = old_rtde.attributes_to_match;
				new_rtde.attribute_names (*) = old_rtde.attribute_names (*);
				new_rtde.n_defined_attributes = old_rtde.n_defined_attributes;
						/* we diddle this as we go, but we NEVER lower it */


				do i = 1 to old_rtde.n_defined_attributes;

				     if substr (old_rtde.attributes_valid, i, 1) then do;

					do j = 1 to upd_rtde.n_defined_attributes
					     while (^substr (auto_upd_attributes_valid, j, 1)
					     | upd_rtde.attribute_names (j) ^= old_rtde.attribute_names (i));
					end;

					if j > upd_rtde.n_defined_attributes then do;
					     if debug_sw then
						call sys_log_ (TYPE_AND_LOG_MSG,
						     "up_rtdt_: ^a attribute ^a deleted.",
						     old_rtde.name, old_rtde.attribute_names (i));
					     substr (new_rtde.attributes_valid, i, 1) = ""b;
					end;
					else do;
					     substr (auto_upd_attributes_valid, j, 1) = ""b;
						/* it matches, remove it from further consideration */
					     upd_to_new (j) = i;
					end;
				     end;
				end;

/* At this point we've found and matched all the existing attributes in the
   old RTDE (or noticed their deletion.) Now we scan to see if new attributes
   have been defined.  */

				do while (auto_upd_attributes_valid ^= ""b);
				     j = index (auto_upd_attributes_valid, "1"b);

				     do i = 1 to old_rtde.n_defined_attributes
					while (old_rtde.attribute_names (i) ^= upd_rtde.attribute_names (j));
				     end;

				     if i > old_rtde.n_defined_attributes then do;
					if i > hbound (upd_to_new, 1) then do;
					     answer = "attribute overflow on " || old_rtde.name;
					     goto rtdt_error;
					end;

					i = new_rtde.n_defined_attributes + 1;
					new_rtde.attribute_names (i) = upd_rtde.attribute_names (j);
					substr (new_rtde.attributes_to_match, i, 1) = substr (upd_rtde.attributes_to_match, j, 1);
					new_rtde.n_defined_attributes = i;
				     end;

				     upd_to_new (j) = i;
				     substr (new_rtde.attributes_valid, i, 1) = "1"b;
				     substr (auto_upd_attributes_valid, j, 1) = ""b; /* mark it ignored */
				     if debug_sw then
					call sys_log_ (TYPE_AND_LOG_MSG,
					     "up_rtdt_: New attribute ^a for ^a.", new_rtde.attribute_names (i),
					     new_rtde.name);
				end;

/* At this point, we've scanned all the attributes and know where each goes.
   Now we scan the implication string to see if it has changed. */

				do j = 1 to upd_rtde.n_defined_attributes;
				     i = upd_to_new (j);
				     if i > 0 then
					if substr (upd_rtde.attributes_to_match, j, 1) ^= substr (new_rtde.attributes_to_match, i, 1) then do;
					     if debug_sw then
						call sys_log_ (TYPE_AND_LOG_MSG,
						     "up_rtdt_: ^a ^a ^[now^;no longer^] implies.",
						     upd_rtde.name, upd_rtde.attribute_names (j),
						     substr (upd_rtde.attributes_to_match, j, 1));

					     substr (new_rtde.attributes_to_match, i, 1) = substr (upd_rtde.attributes_to_match, j, 1);
					end;
				end;

/* Now we (possibly) restructure the exclusion specifications. */

				do i = 1 to upd_rtde.n_exclusion_specs;

				     new_rtde.exclusion_specs (i) = ""b;
						/* start out fresh */

				     do j = 1 to upd_rtde.n_defined_attributes;

					if upd_to_new (j) > 0 then /* do only if attr not deleted */
					     substr (new_rtde.exclusion_specs (i), upd_to_new (j), 1)
						= substr (upd_rtde.exclusion_specs (i), j, 1);
				     end;
				end;

/* All the attributes are now known and loved.  Now we merge the mates. */

				unspec (new_rtde.mates) = unspec (upd_rtde.mates);

				if debug_sw then do;
				     do i = 1 to old_rtde.n_mates;
					do j = 1 to upd_rtde.n_mates while (upd_rtde.mates (j) ^= old_rtde.mates (i));
					end;

					if j > upd_rtde.n_mates then
					     call sys_log_ (TYPE_AND_LOG_MSG, "up_rtdt_: ^a no longer mates with ^a.",
						old_rtde.mates (i), old_rtde.name);
					else upd_rtde.mates (j) = "";
				     end;

				     do j = 1 to upd_rtde.n_mates;
					if upd_rtde.mates (j) ^= "" then
					     call sys_log_ (TYPE_AND_LOG_MSG,
						"up_rtdt_: ^a now mates with ^a.", upd_rtde.mates (j), upd_rtde.name);
				     end;
				end;

/* Now we check the defaults and the defaults' attribute strings. */

				call check_subtype (old_rtde.registration_defaults, upd_rtde.registration_defaults,
				     new_rtde.registration_defaults, old_rtde.name);

				do i = 1 to old_rtde.n_subtypes;

				     do j = 1 to upd_rtde.n_subtypes
					while (upd_rtde.subtype_name (j) ^= old_rtde.subtype_name (i));
				     end;

				     if j > upd_rtde.n_subtypes then
					if debug_sw then
					     call sys_log_ (TYPE_AND_LOG_MSG, "up_rtdt_: Subtype ^a deleted from ^a.",
						old_rtde.subtype_name (i), old_rtde.name);
					else ;

				     else do;

					new_rtde.subtype_name (j) = upd_rtde.subtype_name (j);
					call ioa_$rsnnl ("^a (subtype ^a)", tempstring, 0,
					     upd_rtde.name, upd_rtde.subtype_name (j));

					call check_subtype (old_rtde.subtype_defaults (i),
					     upd_rtde.subtype_defaults (j),
					     new_rtde.subtype_defaults (j), tempstring);

					upd_rtde.subtype_name (j) = "";
				     end;
				end;

				do j = 1 to upd_rtde.n_subtypes;
				     if upd_rtde.subtype_name (j) ^= "" then do;
					if debug_sw then
					     call sys_log_ (TYPE_AND_LOG_MSG,
						"up_rtdt_: Subtype ^a added to ^a.",
						upd_rtde.subtype_name (j), upd_rtde.name);

/* Don't get confused by the double subscript of "j"-- the new RTDE was
   allocated with just as many subtypes as the upd RTDE.  Therefore, if there
   are any extra (new) subtypes in the upd RTDE, by definition we must have
   encountered (j - n_extra) in the old RTDE.  Confused?  The answering
   service isn't!  */

					unspec (new_rtde.subtypes (j)) = unspec (upd_rtde.subtypes (j));
					call normalize_attributes (upd_rtde.subtypes (j).potential_attributes,
					     new_rtde.subtypes (j).potential_attributes);
					call normalize_attributes (upd_rtde.subtypes (j).potential_attributes,
					     new_rtde.subtypes (j).potential_attributes);
					call normalize_attributes (upd_rtde.subtypes (j).attributes,
					     new_rtde.subtypes (j).attributes);
					call normalize_charge_type (upd_cttp -> charge_type_table.charge_types
					     (upd_rtde.subtypes (j).charge_type),
					     new_rtde.subtypes (j).charge_type);
				     end;
				end;

				upd_rtde.valid = ""b; /* exhausted this rtde, turn it off. */

skip_validation:			if last_rtdep = null then
				     new_rtdt.first_resource = offset (new_rtdep, new_rtdt.rtdt_area);
				else last_rtdep -> rtde.next_resource = offset (new_rtdep, new_rtdt.rtdt_area);

				last_rtdep = new_rtdep;
			     end;			/* end processing of matching rtdes */
		     end;				/* end search for an upd_rtde to match an old_rtde */

		     if not_found then old_rtde.deletion_pending = "1"b;
		end;				/* end finding of a valid old_rtde */
	     end;					/* end the loop thru all old_rtdes */
	end;					/* end consideration of old RTDT */


/* We interrupt this program to bring you a few brief and timely internal procedures. */

check_subtype: proc (old_defaults, upd_defaults, new_defaults, name);

dcl  1 old_defaults aligned parameter like rtde.registration_defaults;
dcl  1 upd_defaults aligned parameter like rtde.registration_defaults;
dcl  1 new_defaults aligned parameter like rtde.registration_defaults;

dcl  name char (*) aligned parameter;

dcl  new_charge_type char (32) aligned;

	if debug_sw then do;
	     if old_defaults.potential_attributes_given ^= upd_defaults.potential_attributes_given then
		call sys_log_ (TYPE_AND_LOG_MSG, "up_rtdt_: Default ^a ^[added^;removed^] for ^a",
		     "potential_attributes", upd_defaults.potential_attributes_given, name);
	     if old_defaults.attributes_given ^= upd_defaults.attributes_given then
		call sys_log_ (TYPE_AND_LOG_MSG, "up_rtdt_: Default ^a ^[added^;removed^] for ^a",
		     "attributes", upd_defaults.attributes_given, name);
	     if old_defaults.aim_range_given ^= upd_defaults.aim_range_given then
		call sys_log_ (TYPE_AND_LOG_MSG, "up_rtdt_: Default ^a ^[added^;removed^] for ^a",
		     "access_bounds", upd_defaults.aim_range_given, name);
	     if old_defaults.charge_type_given ^= upd_defaults.charge_type_given then
		call sys_log_ (TYPE_AND_LOG_MSG, "up_rtdt_: Default ^a ^[added^;removed^] for ^a",
		     "charge_type", upd_defaults.charge_type_given, name);
	end;

	string (new_defaults.default_flags) = string (upd_defaults.default_flags);

	if upd_defaults.potential_attributes & ^upd_rtde.attributes_valid then do;
invalid_atts:  answer = "invalid attributes as defaults";
	     goto rtdt_error;
	end;

	call normalize_attributes (upd_defaults.potential_attributes, new_defaults.potential_attributes);

	if upd_defaults.attributes & ^upd_rtde.attributes_valid then goto invalid_atts;

	call normalize_attributes (upd_defaults.attributes, new_defaults.attributes);

	if debug_sw then do;
	     if old_defaults.potential_attributes ^= new_defaults.potential_attributes then
		call sys_log_ (TYPE_AND_LOG_MSG, "up_rtdt_: Default potential attributes changed for ^a", name);

	     if old_defaults.attributes ^= new_defaults.attributes then
		call sys_log_ (TYPE_AND_LOG_MSG, "up_rtdt_: Default attributes changed for ^a", name);

	     if old_defaults.aim_range_given & upd_defaults.aim_range_given then
		if (old_defaults.aim_range (1) ^= upd_defaults.aim_range (1)
		     | old_defaults.aim_range (2) ^= upd_defaults.aim_range (2)) then
		     call sys_log_ (TYPE_AND_LOG_MSG, "up_rtdt_: Default ^a changed for ^a",
			"access_bounds", name);
	end;

	new_defaults.aim_range = upd_defaults.aim_range;

	if upd_defaults.charge_type_given then
	     new_charge_type = upd_cttp -> charge_type_table.charge_types (upd_defaults.charge_type);
	else new_charge_type = "* ERROR! *";

	if debug_sw then
	     if upd_defaults.charge_type_given & old_defaults.charge_type_given then
		if new_charge_type ^= old_cttp -> charge_type_table.charge_types (old_defaults.charge_type)
		then
		     call sys_log_ (TYPE_AND_LOG_MSG, "up_rtdt_: Charge type changed for ^a", name);

	call normalize_charge_type (new_charge_type, new_defaults.charge_type);

	return;
     end check_subtype;

normalize_attributes: proc (upd_attributes, new_attributes);

dcl  (upd_attributes, new_attributes) bit (72) aligned;

dcl  (i, j) fixed bin;

	new_attributes = ""b;

	do i = 1 to length (upd_attributes);
	     j = upd_to_new (i);
	     if j > 0 then
		substr (new_attributes, j, 1) = substr (upd_attributes, i, 1);
	end;

	return;

     end normalize_attributes;


normalize_charge_type: proc (type_name, type_num);

dcl  type_name char (32) aligned parameter,
     type_num fixed bin parameter;

dcl  i fixed bin;

	do i = 1 to auto_ctt.n_charge_types
	     while (auto_ctt.charge_types (i) ^= type_name);
	end;

	if i > auto_ctt.n_charge_types then do;
	     auto_ctt.n_charge_types = i;
	     auto_ctt.charge_types (i) = type_name;
	end;

	type_num = i;

	return;

     end normalize_charge_type;


check_canon_proc: proc (canon_proc_name);

dcl  canon_proc_name char (*) aligned parameter;

dcl  cv_entry_ entry (char (*), ptr, fixed bin (35)) returns (entry),
     entrypt entry variable;

	if canon_proc_name = "" then return;		/* no canon proc */
	entrypt = cv_entry_ (rtrim (canon_proc_name), null, code);
						/* if you give the poor dolt trailing blanks he has a breakdown */
	if code = 0 then return;

	answer = "canonicalizer not found: " || canon_proc_name;
	goto rtdt_error;

     end check_canon_proc;


/* Now consider all the new RTDE's that weren't in the old RTDT.  This block
   of code also installs the first RTDT when there is no old RTDT.  (which is
   a good trick, since the system won't come UP without an old rtdt...?!?) */

	do upd_rtdep = pointer (upd_rtdt.first_resource, upd_rtdt.rtdt_area)
	     repeat (pointer (upd_rtde.next_resource, upd_rtdt.rtdt_area))
	     while (upd_rtdep ^= null);

	     if upd_rtde.valid then do;

		N_MATES = upd_rtde.n_mates;
		N_SUBTYPES = upd_rtde.n_subtypes;

		allocate new_rtde in (new_rtdt.rtdt_area);

		unspec (new_rtde) = unspec (upd_rtde);	/* not completely right, but not bad for starters */

		if ^new_rtde.is_synonym then do;	/* don't waste time on syns */
		     if upd_rtdt.version = RTDT_version_3 then
			call check_canon_proc (upd_rtde.precanon_proc);

		     call normalize_charge_type (upd_cttp -> charge_type_table.charge_types
			(upd_rtde.registration_defaults.charge_type),
			new_rtde.registration_defaults.charge_type);

		     do i = 1 to upd_rtde.n_subtypes;
			call normalize_charge_type (upd_cttp -> charge_type_table.charge_types
			     (upd_rtde.subtypes (i).charge_type),
			     new_rtde.subtypes (i).charge_type);
		     end;
		end;

		new_rtde.addition_pending = "1"b;
		new_rtde.next_resource = nullo;

		if last_rtdep = null then
		     new_rtdt.first_resource = offset (new_rtdep, new_rtdt.rtdt_area);
		else last_rtdep -> rtde.next_resource = offset (new_rtdep, new_rtdt.rtdt_area);

		last_rtdep = new_rtdep;
	     end;
	end;

	N_CHARGE_TYPES = auto_ctt.n_charge_types;
	allocate charge_type_table in (new_rtdt.rtdt_area);
	unspec (charge_type_table.charge_types) = unspec (auto_ctt.charge_types);
	new_rtdt.charge_type_table_ptr = offset (cttp, new_rtdt.rtdt_area);

	bitcount = binary (rel (addr (charge_type_table.flagword))) * 36;

	call hcs_$set_bc (instaldir, unique_name, bitcount, code);
	call hcs_$set_safety_sw (instaldir, unique_name, "1"b, code);
	call hcs_$set_ring_brackets (instaldir, unique_name, rtdt_rings, code);

	if no_prev_table then do;
	     aclb (1).userid = get_group_id_ ();	/* make up acl for newly-created RTDT  */
	     aclb (1).mode = "101"b;			/* RW */
	     aclb (syacn + 1).userid = "*.SysDaemon.*";
	     aclb (syacn + 1).mode = "100"b;
	     aclb (syacn + 2).userid = "*.*.*";
	     aclb (syacn + 2).mode = "100"b;
	     syacn = syacn + 2;
	     call hcs_$replace_acl (instaldir, unique_name, addr (aclb), syacn, "1"b, code);
	end;

	else do;
	     call hcs_$list_acl (instaldir, instalname, addr (acl_area), acl_ptr, null, acl_count, code);
	     if code ^= 0 then do;
		answer = "cannot list ACL of current RTDT";
		goto rtdt_error;
	     end;

	     call hcs_$replace_acl (instaldir, unique_name, acl_ptr, acl_count, ""b, code);
	     if code ^= 0 then do;
		answer = "cannot set ACL of new RTDT";
		goto rtdt_error;
	     end;
	end;

/* Now create the new databases if resource types have been added. */

	do new_rtdep = pointer (new_rtdt.first_resource, new_rtdt.rtdt_area)
	     repeat (pointer (new_rtde.next_resource, new_rtdt.rtdt_area))
	     while (new_rtdep ^= null);

	     if new_rtde.addition_pending then do;

		if ^new_rtde.is_synonym then
		     if ip -> installation_parms.rcp_init_flags.resource_mgmt_enabled then do;

			new_rtde.addition_pending = ""b; /* otherwise, fun when we later try to compare registry headers! */

			call rcp_sys_$create_registry (registry_dir, new_rtdep, code);
			if code ^= 0 then do;
			     call sys_log_$error_log (TYPE_AND_LOG_MSG_WITH_BANNER, code,
				"up_rtdt_", "Cannot create RCP registry for ^a", new_rtde.name);
			     answer = "cannot create registry for " || new_rtde.name;
			     goto rtdt_error;
			end;
		     end;

		call sys_log_ (TYPE_AND_LOG_MSG,
		     "up_rtdt_: Adding resource type ""^a"" to the system.", new_rtde.name);
	     end;

	     else do;

		if ^new_rtde.is_synonym then
		     if ip -> installation_parms.rcp_init_flags.resource_mgmt_enabled then do;
			call rcp_sys_$update_registry_header (registry_dir, new_rtdep, code);
			if code ^= 0 then do;	/* EXTREMELY unlikely */
			     call sys_log_$error_log (TYPE_AND_LOG_MSG_WITH_BANNER, code,
				"up_rtdt_", "Cannot update registry for ^a", new_rtde.name);
			     answer = "cannot update registry for " || new_rtde.name;
			     goto rtdt_error;
			end;
		     end;
	     end;
	end;

/* Now, QuickAsABunny rename the old and new RTDTS, replacing them. */

	if ^no_prev_table then do;
	     call ioa_$rsnnl ("^a.-.^a", newname, 0, instalname, unique_name);

	     call hcs_$chname_file (instaldir, instalname, instalname, newname, code);
	     if code ^= 0 then do;
		call sys_log_$error_log (TYPE_AND_LOG_MSG_WITH_BANNER, code, "up_rtdt_", "Cannot rename old rtdt.");
		answer = "cannot rename old RTDT.";
		goto rtdt_error;
	     end;
	end;

	call hcs_$chname_file (instaldir, unique_name, unique_name, instalname, code);
	if code ^= 0 then do;
	     call sys_log_$error_log (TYPE_AND_LOG_MSG_WITH_BANNER, code, "up_rtdt_", "Cannot rename new rtdt.");
	     answer = "cannot rename new RTDT.";

	     if ^no_prev_table then do;
		call hcs_$chname_file (instaldir, newname, newname, instalname, code);
		if code ^= 0 then
		     call sys_log_$error_log (TYPE_AND_LOG_MSG_WITH_BANNER, code,
			"up_rtdt_", "Cannot recover by renaming original RTDT either.");
		goto rtdt_error;
	     end;
	end;

/* Now that no one can reference the dead resources, if any, we can free their registries. */

	if ^no_prev_table then
	     do old_rtdep = pointer (old_rtdt.first_resource, old_rtdt.rtdt_area)
		repeat (pointer (old_rtde.next_resource, old_rtdt.rtdt_area))
		while (old_rtdep ^= null);

	     if old_rtde.deletion_pending then do;

		call sys_log_ (TYPE_AND_LOG_MSG, "up_rtdt_: Deleting resource type ""^a"" from the system.",
		     old_rtde.name);

		if ^old_rtde.is_synonym then
		     if ip -> installation_parms.rcp_init_flags.resource_mgmt_enabled then do;
			call rcp_sys_$remove_registry (registry_dir, old_rtde.name, code);
			if code ^= 0 then do;
			     call sys_log_$error_log (TYPE_AND_LOG_MSG_WITH_BANNER, code,
				"up_rtdt_", "Unable to remove RCP registry for ^a.", old_rtde.name);
			     goto rtdt_error;
			end;
		     end;

		old_rtde.deletion_pending = ""b;
	     end;					/* deletion of a resource */
	end;


	code = 0;

	instalp = old_rtdtp;			/* ***** returning ptr to the old table seems useless,
						   but all the other up_something_'s do it */

	return;

rtdt_error:
	code = error_table_$action_not_performed;	/* RTDT not installed */

	call clean_up;

clean_up: proc;
	if delthru_ptr ^= null then do;
	     call hcs_$set_safety_sw_seg (delthru_ptr, "0"b, 0);
	     call hcs_$delentry_seg (delthru_ptr, 0);
	end;
     end clean_up;

	return;

/* BEGIN MESSAGE DOCUMENTATION

   Message:
   up_rtdt_: ERROR_MESSAGE Cannot create RCP registry for RESOURCE_NAME.

   S:     as (severity2)

   T:     $run

   M:  The error described by ERROR_MESSAGE occurred while a system
   administrator was attempting to install a new rtdt.  The rtdt contained a
   new resource type, but the resource management registry for that resource
   type could not be created.  The rtdt is not installed.  Some other
   registries may already have been modified according to information in the
   new rtdt.

   A:     Notify the system administrator.

   Message:
   up_rtdt_: ERROR_MESSAGE Cannot update RCP registry for RESOURCE_NAME.

   S:     as (severity2)

   T:     $run

   M:  The error described by ERROR_MESSAGE occurred while a system
   administrator was attempting to install a new rtdt.  The rtdt contained
   changes to a resource type, but the resource management registry for that
   resource type could not be modified.  The rtdt is not installed.  Some
   other registries may already have been modified according to information
   in the new rtdt.

   A:     Notify the system administrator.

   Message:
   up_rtdt_: ERROR_MESSAGE Cannot rename old RTDT.

   S:     as (severity2)

   T:     $run

   M:     The current rtdt could not be renamed to accomodate the
   installation of a new rtdt.

   A:     Notify the system administrator.

   Message:
   up_rtdt_: ERROR_MESSAGE Cannot rename new rtdt.

   S:     as (severity2)

   T:     $run

   M:     The new rtdt being installed could not be renamed to "rtdt".
   The rtdt is not installed.

   A:     Notify the system administrator.

   Message:
   up_rtdt_: ERROR_MESSAGE Cannot recover by renaming old RTDT either.

   S:     as (severity2)

   T:     $run

   M:  The program that installs rtdt's cannot recover correctly from an
   earlier error in renaming, for which an error message is also printed.
   Although the current rtdt is not destroyed, it is no longer accessible to
   users.  This will affect the operation of resource management and RCP.

   A:     Notify the system administrator.

   Message:
   up_rtdt_: Deleting resource type RESOURCE_TYPE from the system.

   S:     as (severity1)

   T:     $run

   M:  The named resource type is no longer accessible by system users.  This
   is an advisory message.

   A:     None.

   Message:
   up_rtdt_: Adding resource type RESOURCE_TYPE to the system.

   S:     as (severity1)

   T:     $run

   M:  The named resource type has been newly defined and will be accessible
   by system users.  This is an advisory message.

   A:     None.

   END MESSAGE DOCUMENTATION */

debug_rtdt_on: entry;
	debug_sw = "1"b;
	return;

debug_rtdt_off: entry;
	debug_sw = ""b;
	return;

%page; %include access_mode_values;
%page; %include answer_table;
%page; %include area_info;

dcl  1 auto_area_info aligned automatic like area_info;
%page; %include installation_parms;
%page; %include user_table_header;
%page;

     end up_rtdt_;
