/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* format: style4 */

rehash_: procedure (htp, newsize, ec);

/* originally coded by k.willis 2/71 */
/* Modified for hardcore/cleanup/NSS BIM 1/82 */


%include hashst;
%page;

/* PARAMETERS */

dcl  htp ptr;					/* Ptr to existing hash table. */
dcl  newsize fixed bin;				/* Number of buckets to put in new table */
dcl  new_htp pointer;
dcl  ec fixed bin (35);				/* error code. */


/* AUTOMAGIC */

dcl  bit_count fixed bin (24);			/* the number of bits in a table */
dcl  i fixed bin;

dcl  space_provided_switch bit (1) aligned;		/* caller gave us new place */

dcl  new_tablep pointer;

/* ENTRIES */

dcl  hash_$make entry (ptr, fixed bin, fixed bin (35));	/* subroutines called */
dcl  hash_$in_no_grow entry (ptr, char (*), bit (36) aligned, fixed bin (35));
dcl  hcs_$set_bc_seg entry (ptr, fixed bin (24), fixed bin (35));
dcl  (get_temp_segment_,
     release_temp_segment_) entry (char (*), ptr, fixed bin (35));

dcl  error_table_$full_hashtbl ext fixed bin (35);

dcl  null builtin;

/* this subroutine changes the size of a hash table. to do this it creates a dummy hash table,
   initializes it, and inserts each non empty non deleted entry of the old table into the dummy table.
*/

	space_provided_switch = "0"b;
	goto JOIN;

new_storage:
     entry (htp, new_htp, newsize, ec);

	space_provided_switch = "1"b;

JOIN:
	ec = 0;					/* set error code to 0 */
	if space_provided_switch
	then new_tablep = new_htp;
	else do;
	     call get_temp_segment_ ("rehash_", new_tablep, ec);
	     if ec ^= 0 then return;
	end;

	call hash_$make (new_tablep, newsize, ec);	/* initialize dummy table */
	if ec ^= 0 then go to term;			/* invalid bucket size */

	do i = 1 to nb;				/* loop on non-empty, non-deleted entries */
	     if empty (i) = "0"b then if ds (i) ^= "1"b then do;
		     call hash_$in_no_grow (new_tablep, htable.name (i), htable.value (i), ec);
		     if ec = error_table_$full_hashtbl	/* if duplicates occur, only one entry in new table */
		     then go to term;		/* .. if new table full, give up */
		end;
	end;


/* At this point, if we are growing an existing segment, we reset bit count */
/* The old code assumed the HT was in a segment by itself. This seems */
/* ill advised, so now we use the actual address of the end of the table. */
/* If the new space was provided, then we do not touch any such thing. */


	if ^space_provided_switch
	then do;

	     bit_count = 36 * bin (rel (addr (new_tablep -> htable.end_of_table)), 18);
	     call hcs_$set_bc_seg (ptr (htp, 0), bit_count, ec);
	     if ec ^= 0 then go to term;
	     hash_table_size_ = new_tablep -> htable.nb;
	     htp -> htable.nb = new_tablep -> htable.nb;
	     htp -> htable = new_tablep -> htable;
	     call release_temp_segment_ ("rehash_", new_tablep, (0));
	end;

	return;

term:	if ^space_provided_switch
	then call release_temp_segment_ ("rehash_", new_tablep, (0));
	return;
     end rehash_;
