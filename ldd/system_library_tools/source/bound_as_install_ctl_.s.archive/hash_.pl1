/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* format: style4 */
hash_: procedure;

/* format: style4 */

/* originally coded by k.willis 2/71 */
/* modified by T. Casey, Feb 75, to keep table between 70% and 85% full,
   and to rehash only when adding an entry */
/* Modified for move to hardcore; word entrypoints, no-write entrypoints;
   Benson I. Margulies 1/82 */
/* Modified by E. N. Kittlitz for no-write no-write, ensure that force_grow really does grow. */

%include hashst;




/* this subroutine initializes, inserts, deletes, and searches for entries in a hash table.

   ***to initialize hash table
   call hash_$make(htp,n,code);
   htp is a pointer to the hash table(input)
   n is the number of buckets wanted(input)
   code is the error code(output)


   ***to obtain the optimum size table for a given number of entries
   n = hash_$opt_size(n_entries);
   n_entries is the initial number of buckets that will be used(input)
   n is the optimal table size, to be used in a call to hash_$make(output - function return value)



   ***to insert an entry in the table
   call hash_$in(htp,ename,eval,code);
   htp is a pointer to the hash table(input)
   ename is the name of the entry(input)
   eval is the value of the entry(input)
   code is the error code(output)


   ***to hash in without growing table
   ***for use when table cannot just be extended off of end.
   call hash_$in_no_grow(htp,ename,eval,code);
   htp is a pointer to the hash table(input)
   ename is the name of the entry(input)
   eval is the value of the entry(input)
   code is the error code(output)

   ***to delete an entry in the table
   call hash_$out(htp,ename,eval,code);
   htp is a pointer to the hash table(input)
   ename is the name of the entry(input)
   eval is the value of the entry(output)
   code is the error code(output)


   ***to search for an entry in the table
   call hash_$search(htp,ename,eval,code)
   htp is a pointer to the hash table(input)
   ename is the name of the entry(input)
   eval is the value of the entry(output)
   code is the error code(output)

   ***to search without writing meters
   call hash_$search_no_write(htp,ename,eval,code)
   htp is a pointer to the hash table
   ename is the name of the entry (input)
   eval is the value of the entry(output)
   code is the error code;
*/


/* PARAMETERS */

dcl  code fixed bin (35);				/* error code */
dcl  ename char (*);				/* name of an entry in hash table */
dcl  eval bit (36) aligned;				/* value of entry corresponding to ename */
dcl  htp pointer;					/* pointer to the hash table */
dcl  n_entries fixed bin;				/* initial number of entries to be placed in table */



dcl  i fixed bin;
dcl  n fixed bin;					/* number of buckets wanted in new hash table */

dcl  loht fixed bin (24);				/* length of table in words */
dcl  nb fixed bin;					/* number of entries (buckets) in table */
dcl  max_ht_entries fixed bin;			/* max value of nb - function of max_seg_size */
dcl  pname char (32) aligned;				/* name of entry passed to hash_index */
dcl  pn pointer;
dcl  (hashing_in, rehashing) bit (1) aligned init ("0"b);
dcl  (emploc, hsi, nhsi, ntries) fixed bin;
dcl  found bit (1) aligned;

dcl  sys_info$max_seg_size ext fixed bin (19);
dcl  (error_table_$namedup, error_table_$segnamedup, error_table_$noentry) ext fixed bin (35);
dcl  (error_table_$bigarg, error_table_$full_hashtbl) ext fixed bin (35);

dcl  hash_index_ entry (ptr, fixed bin (21), fixed bin, fixed bin) returns (fixed bin); /* hashing subroutine */
dcl  rehash_ entry (ptr, fixed bin, fixed bin (35));

dcl  (addr, divide, fixed, float, mod) builtin;



opt_size: entry (n_entries) returns (fixed bin);

/* Compute optimal table size to accomodate n_entries:
   make it 70% full, then round upward to the next full page. */

	max_ht_entries = divide (sys_info$max_seg_size - 8, 10, 17, 0);
	if n_entries >= max_ht_entries then		/* if there are too many entries */
	     return (n_entries);			/* the caller will find out when he tries to use it */
	nb = fixed (float (n_entries) / .7);		/* compute number of entries in 70% full table */
	loht = 8 + 10 * nb;				/* compute word length of that table */
	i = mod (loht, 1024);			/* round it up to next full page */
	if i > 0 then				/* if a page is partially used */
	     loht = loht + 1024 - i;			/* fill it up */
	nb = divide (loht - 8, 10, 17, 0);		/* compute number of entries that will fit */
	if nb > max_ht_entries then			/* if that is bigger than a segment */
	     nb = max_ht_entries;			/* then make it a full segment */
	return (nb);


%page;

make: entry (htp, n, code);

	max_ht_entries = divide (sys_info$max_seg_size - 8, 10, 17, 0); /* 8-word header, 10-word entries */
	if (n > max_ht_entries | n <= 0) then		/* check number of buckets */
	     code = error_table_$bigarg;
	else do;
	     code = 0;
	     htable.ni = 0;				/* initialize statistical info */
	     htable.np = 0;
	     htable.tnt = 0;
	     htable.id = "ht02";
	     htable.gnt = 1;
	     htable.loht = n * 10 + 8;
	     htable.nb = n;				/* Now the refer extent is legal ! */
	     htable.buckets (*).flags.empty = "1"b;
	     htable.buckets (*).flags.ds = "0"b;
	     htable.buckets (*).name = "";
	     htable.buckets (*).value = ""b;

	end;
	return;

%page;

in:  entry (htp, ename, eval, code);
	if float (htable.ni) / float (htable.nb) > .85	/* if table is more than 85% full */
	then call grow_hash_table;			/* internal procedure to grow it to 70% full */
join_in:						/* no_grow enters here */
	hashing_in = "1"b;				/* we will rehash, if necessary, to add this entry */
	call hasher;
	if ^found then do;				/* entry did not already exist */
	     htable.ni = htable.ni + 1;		/* increment number of entries in table */
	     htable.flags.empty (emploc), htable.flags.ds (emploc) = "0"b; /* set deleted and empty switches off */
	     htable.value (emploc) = eval;		/* store value in bucket(emploc) */
	     htable.name (emploc) = pname;		/* store identifier */
	end;
	else if htable.value (hsi) = eval then code = error_table_$segnamedup; /* entry existed with same value */
	else code = error_table_$namedup;		/* entry existed with different value */
	return;

%page;

search: entry (htp, ename, eval, code);
	call hasher;
search_join:
	if found then eval = htable.value (hsi);	/* set return value to that found by search */
	else code = error_table_$noentry;		/* entry was not found */
	return;

search_no_write:
     entry (htp, ename, eval, code);
	call hasher_no_write;
	goto search_join;

%page;

out: entry (htp, ename, eval, code);
	call hasher;
	if found then do;				/* entry was found-is at hsi */
	     htable.ni = htable.ni - 1;		/* decrement number of entries */
	     eval = htable.value (hsi);		/* set return value */
	     htable.flags.ds (hsi) = "1"b;		/* set deleted switch */
	     nhsi = hsi + 1;
	     if nhsi > htable.nb then nhsi = 1;		/* find the next hash entry */
	     if htable.flags.empty (nhsi) = "1"b then do i = hsi by -1 to 1, htable.nb by -1 to nhsi; /* if empty */
		if htable.flags.ds (i) = "0"b then return; /* then reset any buckets that were deleted to empty */
		htable.flags.ds (i) = "0"b;		/* to minimize length of future searches, since searches must */
		htable.flags.empty (i) = "1"b;	/* search past deleted buckets, until they hit an empty one */
	     end;
	end;
	else code = error_table_$noentry;		/* entry was not found */
	return;

%page;

/* Entry for use when the table may not grow */

in_no_grow:
inagain: entry (htp, ename, eval, code);
	rehashing = "1"b;				/* set switch to prevent endless recursion */
	go to join_in;

%page;

hasher: procedure;
declare  can_write bit (1) aligned;

	can_write = "1"b;
	goto w_join;

hasher_no_write:
     entry;
	can_write = "0"b;

w_join:

htentry:	emploc, code = 0;				/* set to zero-changed if found or error */
	found = "0"b;
	pn = addr (pname);				/* get address of name to be passed to hash_index */
	if can_write
	then htable.np = htable.np + 1;		/* increment number of probes */
	pname = ename;				/* make ename 32 characters */
	hsi = hash_index_ (pn, 32, 1, htable.nb);	/* get the hash index of the name */
	hsi = hsi + 1;
	ntries = 1;
srch:	if htable.flags.empty (hsi) = "1"b then do;	/* if bucket is empty */
	     if emploc = 0 then emploc = hsi;		/* emploc is first empty bucket, either empty or deleted,
						   where this entry could be added, if not found */
update:	     if can_write then do;
		if ntries > htable.gnt then htable.gnt = ntries; /* set greatest number of tries */
		htable.tnt = htable.tnt + ntries;	/* set total number of tries */
	     end;
	     return;
	end;
	if htable.flags.ds (hsi) = "1"b then do;	/* if deleted, this would be where to add the entry */
	     if emploc = 0 then emploc = hsi;		/* so set emploc, if not already set */
						/* but we can not be sure the entry is not already in the table,
						   until we find an empty (not just deleted) bucket */
	end;
	else do;					/* there is an entry at hsi */
	     if htable.name (hsi) = pname then do;	/* if the names match */
		found = "1"b;			/* then set found to 1 */
		go to update;			/* go to check gnt */
	     end;
	end;
contsrch: hsi = hsi + 1;				/* continue the search until found or empty bucket */
	if hsi > htable.nb then hsi = 1;		/* get next bucket */
	if ntries > divide (htable.nb, 2, 17, 0) then do; /* if too many tries, we should rehash */
	     if ^hashing_in then			/* but only if this entry is to be added */
		goto update;			/* so, for $search, or $out, we say "not found" */
	     else if rehashing then goto giveup;	/* also, if we are already rehashing, don't recurse */
	     call grow_full_hash_table;		/* internal procedure - makes a 70% full table */
	     go to htentry;				/* go start search over again, using rehashed table */
	end;
	ntries = ntries + 1;			/* increment the number of tries for search */
	go to srch;
     end hasher;


grow_hash_table: proc;				/* grow an 85% full table to 70% full */

dcl  full bit (1) aligned;
dcl  new_size fixed bin;

	full = "0"b;				/* we will not insist on rehashing */
	goto grow_common;

grow_full_hash_table: entry;				/* grow table to get rid of a run more than half
						   the length of the table long */

	full = "1"b;				/* we will insist on rehashing */

grow_common:
	max_ht_entries = divide (sys_info$max_seg_size - 8, 10, 17, 0);
	if htable.nb >= max_ht_entries then do;		/* if table already at max size */
	     if full then goto giveup;		/* if we are insisting, exit with an error code */
	     else return;				/* otherwise add the entry without rehashing */
	end;

	nb = htable.ni;				/* pick up count of currently-used entries */
	if full then
	     if float (nb) / float (htable.nb) < .7 then	/* if table not 70% full */
		nb = fixed (float (htable.nb) * .85);	/* lie - say its 85% full - to make sure it grows */
	new_size = opt_size (nb);			/* first estimate on size */
	if full then				/* ensure it's a real growth */
	     do while (new_size <= htable.nb);		/* now let's force the issue */
	     nb = nb + 1;
	     new_size = opt_size (nb);
	end;
	call rehash_ (htp, new_size, code);
	if code ^= 0 then goto giveup;		/* nonlocal goto */

	return;

     end grow_hash_table;

/* Come here if table is too full to rehash */
giveup:	code = error_table_$full_hashtbl;
	htable.tnt = htable.tnt + ntries;		/* increment total number of tries */
	if ntries > htable.gnt then			/* and update greatest number of tries */
	     htable.gnt = ntries;
	return;

     end hash_;
