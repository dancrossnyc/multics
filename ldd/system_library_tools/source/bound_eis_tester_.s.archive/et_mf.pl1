/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


et_mf: procedure (option, arg_et_data_ptr, code);



/*	This procedure will parse the data in a "-mf" option that is part of
   *	an  "inst"  statement.
   *
   *	Originally coded  Feb, 73  by  Bill Silver
   *
   *
   *	An  mf  option has the following format.
   *
   *	-mfX	term . . . term
   *
   *	1.  The first field in the option is the option name  "-mf".
   *
   *	2.  Immediately following it  MUST  be the number of the descriptor to which this
   *	    mf  field relates.  Below  X  is used to indicate this value.
   *
   *	3.  Following the descriptor number may be up to  4  terms.  All are optional.
   *	    They may be specified in any order.   The valid  terms  are:
   *
   *
   *	a)  ar	This term specifies that the descriptor is to use  Address Register  modification.
   *		In Multics it is called pointer register modification.  The pointer
   *		assigned is  prX.   When this term is specified the data referenced by this
   *		descriptor will be placed in a different segment from the descriptor.
   *		It will go in segment  etdX.
   *
   *	d)  rl L	This term specifies that the descriptor is to use  Register Length  modification.
   *		This term  MUST  be followed by a decimal number "L" which specifies the
   *		character length of the data.  This value will be placed in the selected
   *		register and the  "n"  field of descriptor X will contain the register
   *		modification tag code.   The registers assigned are:
   *		X  =  1   -  A
   *		X  =  2   -  Q
   *		X  =  3   -  x6
   *
   *	c)  idA	This term specifies that descriptor X is to be referenced via an indirect
   *		word in the instruction.  The character immediately following the the
   *		"id"  term denotes what modification is to be used in the indirect word.
   *
   *		A  =  "a" ( ida )  This implies  Address (pointer) register modification.
   *			When this is specified the descriptor will be placed in a segment
   *			other than the segment containing the instruction.  This will
   *			be segment  etiX.  Note, if the descriptor does not specify  AR
   *			modification then the data for this descriptor will also be in
   *			segment  etiX.  The pointers registers assigned to an indirect
   *			word  are:  indirect word 1  =>  pr4
   *				  indirect word 2  =>  pr5
   *				  indirect word 3  =>  pr7
   *
   *		A  =  "r" ( idr )  This implies  Register modification.  The indirect
   *			word will be modified by index registers 4,5, or 7.  Note, this
   *			modification will be in terms of  WORDS.
   *
   *		A  =  "b" ( idb )  This implies both  "a" and "r"  modification as described
   *			above.
   *
   *		If  A  is none of the above then there is no modification in the
   *		indirect word.
   *
   *	b)  reg	This term specifies that descriptor X is to be modified by an index REGister.
   *		The value in the index register will be a CHARACTER offset and is  (x * 4).
   *		The index register assigned will be  index register X.  The value placed
   *		in index register  X  is dependent upon the type of instruction and the
   *		appropriate character size.  It will be in the following units:
   *		WORDS	For those descriptors which have no  mf  field in the
   *			instruction word.
   *		BITS	For all bit string instructions.
   *		CHARS	For all others.  The actual units depends upon the character
   *			size.  The default is a  9 bit character size.
*/






/*		PARAMETER  DATA		*/


dcl  option char (*),				/* The input string containing the  "-mf"
						   *  option to be parsed. */

     arg_et_data_ptr ptr,				/* Input pointer to the  et  data.  */

     code fixed bin (35);				/* Error code.  */






/*		AUTOMATIC  DATA		*/


/*	The following data items are used in calls to  et_util.  */

dcl  option_ptr ptr,				/* Pointer to the  "-mf"  input option. */

     start fixed bin (35),				/* The number of characters allready
						   *  processed in this  "-mf"  option.
						   *  The next character is the start of
						   *  the window.  */

     size fixed bin (35),				/* The current size ( in characters )
						   *  of the window on the "-mf" option. */

     next_option_x fixed bin;				/* Index of the last character in the
						   *  option - in effect the number of
						   *  characters in the option.  */


/*	These are some temporary variables. */

dcl  dec_num fixed bin,				/* Holds converted decimal number. */

     i fixed bin,

     len fixed bin,					/* Length of a field. */

     desc_ptr ptr,					/* Work pointer to a descriptor word. */
     indw_ptr ptr,
     mf_ptr ptr,

     offsetx fixed bin,				/* Used to modify a pointer register or an
						   *  address field.  */

     term_name char (3);				/* Used to temporarily hold a term name.  */


/*	The following data items are used when processing descriptors.  */

dcl  dx fixed bin,					/* Index to  those tables that dependent of the
						   *  three descriptors or indirect words.  */

     idx fixed bin,					/* Number of the pointer register and index
						   *  register used in modification of an
						   *  indirect word.  */

     mf_inst_flag bit (1),				/* On => mf field is in the instruction word.
						   *  Off => it is in the descriptor word.  */

     indw_ar_flag bit (1),				/* On => the current indirect word must use
						   *  ar  modification.  */

     indw_reg_flag bit (1);				/* On => the current indirect word must use
						   *  reg  modification.  */





/*		BASED  DATA		*/


/*	This is an overlay of the input  "-mf"  option.  */

dcl 1 mf_option based (option_ptr),			/* Used to access the input data option
						   *  as a stream of characters. */

    2 offset char (start),				/* The part of the "-mf" option which we have
						   *  allready processed. */

    2 window char (size);				/* The part of the "-mf" option which we are
						   *  currently accessing.  */


/*	An overlay of the decimal numbers which hold the input data terms.  */

dcl  bit_word bit (36) based (addr (dec_num)) aligned;


/*	An overlay of an  mf  field.  */

dcl 1 mf_map based unaligned,
    2 ar bit (1),
    2 rl bit (1),
    2 id bit (1),
    2 reg bit (4);


dcl 1 desc_map based aligned,
   (2 pr_num bit (3),
    2 y fixed bin (14),
    2 pad bit (14),
    2 rl_num bit (4)) unaligned;


dcl 1 indw_map based aligned,
   (2 pr_num bit (3),
    2 y fixed bin (14),
    2 pad1 bit (11),
    2 ar bit (1),
    2 pad2 bit (2),
    2 reg bit (4)) unaligned;





/*		INTERNAL  STATIC  DATA	*/


/*	A table of valid term names for an  mf  option.  */

dcl  term_names (4) char (2) internal static
     init ("ar", "rl", "id", "re");


/*	These two tables contain the modification tag codes which are placed in an  mf  field
   *	or in an  indirect word.  They represent  x1 - x3  and  x4,x5, and x7  respectively.
*/

dcl  mf_reg_tags (3) bit (4) internal static
     init ("1001"b, "1010"b, "1011"b);

dcl  indw_reg_tags (3) bit (4) internal static
     init ("1100"b, "1101"b, "1111"b);


/*	These arrays point to the various data area that are used.  */

dcl (init_flag bit (1) init ("0"b),

     etx_ind_ptrs (3) ptr,
     eti_ind_ptrs (3) ptr,
     eti_data_ptrs (3) ptr,
     etd_data_ptrs (3) ptr) internal static;






/*		EXTERNAL  DATA		*/


/*	The following declarations reference the procedures called by  et_desc.  */

dcl (etx$ind1, etx$ind2, etx$ind3) external,
    (eti1$ind, eti2$ind, eti3$ind) external,
    (eti1$data, eti2$data, eti3$data) external,
    (etd1$data, etd2$data, etd3$data) external;


dcl  com_err_ entry options (variable),
     et_util$skip entry (ptr, fixed bin (35), fixed bin (35)),
     et_util$convert_decimal entry (ptr, fixed bin (35), fixed bin (35), fixed bin,
     fixed bin (35));


dcl (addr,
     addrel,
     fixed,
     length,
     null,
     rel,
     substr,
     verify) builtin;
						/*  */
%include et_instr_data_map;
/* 	*/
%include et_setup_data;
/* 	*/
/*	Set up the window on the input  "-mf"  option.  We will skip the
   *	"-mf" field at the beginning of the option.
*/

	option_ptr = addr (option);
	next_option_x = length (option);

	et_data_ptr = arg_et_data_ptr;		/* Copy this argument.  */


	start = 0;
	size = next_option_x;


/*	Validate and convert the num  field.  */

	len = verify (substr (window, 1, 1), "123");

	if len = 0

	then do;
	     dx = fixed (substr (window, 1, 1), 17);
	     start = start + 1;
	     size = size - 1;
	end;

	else do;
	     code = 601;
	     call com_err_ (0, "ET", "^d Illegal desc num  field: ^a",
		code, substr (window, 1, 1));
	     return;
	end;


/*	Now test to see if we should process this  mf  field.  Only  mf  field 3  is in
   *	question.  If this  num field  is a  3  then check to see if there is an  mf
   *	field for this descriptor.
*/

	if (dx = 3) & (mf_ptrs (3) = null ())

	then do;
	     code = 602;
	     call com_err_ (0, "ET", "^d -mf3  option invalid - instruction has only 2 descriptors.", code);
	     return;
	end;


/*	Get a pointer to the  mf field  we will be working with.  */

	start = start + 1;				/* Move window past  num  field. */
	size = size - 1;


/*	Now we must initialize some of the data that we may need.  */

	desc_ptr = addr (descriptors (dx));
	indw_ptr = addr (ind_words (dx));
	mf_ptr = mf_ptrs (dx);

	mf_inst_flag = "1"b;

	if (dx = 2) & (^et_instr_data$instructions (instr_num).mf2_flag)
	then mf_inst_flag = "0"b;

	if (dx = 3) & (^et_instr_data$instructions (instr_num).mf3_flag)
	then mf_inst_flag = "0"b;


/*	Initialize these pointers just once per process.  */

	if init_flag then goto term_loop;

	eti_data_ptrs (1) = addr (eti1$data);
	eti_data_ptrs (2) = addr (eti2$data);
	eti_data_ptrs (3) = addr (eti3$data);

	etd_data_ptrs (1) = addr (etd1$data);
	etd_data_ptrs (2) = addr (etd2$data);
	etd_data_ptrs (3) = addr (etd3$data);

	etx_ind_ptrs (1) = addr (etx$ind1);
	etx_ind_ptrs (2) = addr (etx$ind2);
	etx_ind_ptrs (3) = addr (etx$ind3);

	eti_ind_ptrs (1) = addr (eti1$ind);
	eti_ind_ptrs (2) = addr (eti2$ind);
	eti_ind_ptrs (3) = addr (eti3$ind);

	init_flag = "1"b;
						/* 	*/
						/*	Now start to process the terms.  We will test for each possible term name.
						   *	Each iteration of this loop will process one term.
						   */


term_loop:


/*	Skip to the next term.  If we find the end of the statement or the beginning of a new
   *	option we will know that there are no more terms in this  mf  field.
*/

	call et_util$skip (option_ptr, start, size);

	if (substr (window, 1, 1) = ";") | (substr (window, 1, 1) = "-")

	then return;


/*	Look through the list of valid term names.  */

	term_name = substr (window, 1, 2);

	do i = 1 to 4;

	     if term_name = term_names (i)

	     then do;
		start = start + 2;			/* Move window past term name.  */
		size = size - 2;
		goto term_routine (i);		/* Go to routine which processes this term. */
	     end;
	end;

	goto illegal_term;				/* We didn't find a valid term name.  */
						/* 	*/
term_routine (1):					/*  ar  */


/*	First set up the  ar  bit in the  mf  field.  */

	mf_ptr -> mf_map.ar = "1"b;


/*	Next set up the pointer register number in the descriptor.  */

	desc_ptr -> desc_map.pr_num = substr (addr (dx) -> bit_word, 34, 3);


/*	Now set up the data pointer.  Since  ar  modification is present we know that the
   *	data will go into segment  etdX.
*/

	data_ptrs (dx) = etd_data_ptrs (dx);


/*	Now we must set up the address field and the pointer register used by this
   *	descriptor.  The address field in the descriptor will be set to  8 * X.
   The pointer register will actually point to the data but will be adjusted by
   *	the value of the descriptor address so the effective address will be correct.
   *	If  reg  modification is also specified then we must adjust the descriptor address
   *	by the effective word offset of the specified index register.
*/

	offsetx = dx * 8;

	if mf_ptr -> mf_map.reg = "0"b

	then desc_ptr -> desc_map.y = offsetx;

	else desc_ptr -> desc_map.y = offsetx - dx;

	pointers (dx) = addrel (data_ptrs (dx), -offsetx);

/*	That's it for an  ar  modifier.  Go back and process the next term.  */

	goto term_loop;
						/* 	*/
term_routine (2):					/*  rl  */

/*	The first thing we must do is to see if if is legal to have  rl  modification
   *	with this  mf  field.  If the  mf field  is not in the instruction word itself
   *	then  rl  modification is illegal.
*/

	if ^mf_inst_flag

	then do;
	     code = 621;
	     call com_err_ (0, "ET", "^d RL modification is illegal for  mf^d.", code, dx);
	     return;
	end;


/*	It is  OK.  We must get the length term that must follow the  rl  term.  */

	call et_util$skip (option_ptr, start, size);

	call et_util$convert_decimal (option_ptr, start, size, dec_num, code);

	if code ^= 0

	then do;
	     call com_err_ (0, "ET", "^d Illegal  rl  term length field.", code);
	     return;
	end;

/*	Now we will turn  ON  the  rl  bit in the  mf  field.  Then depending upon which
   *	descriptor this  mf  field is for we will go to the routine which will put the length
   *	in the correct register and set the correct register code in the descriptor.
*/

	mf_ptr -> mf_map.rl = "1"b;

	goto rl_routine (dx);


rl_routine (1):

	regs.A = dec_num;
	desc_ptr -> desc_map.rl_num = "0101"b;
	goto term_loop;


rl_routine (2):

	regs.Q = dec_num;
	desc_ptr -> desc_map.rl_num = "0110"b;
	goto term_loop;


rl_routine (3):

	regs.x (6) = dec_num;
	desc_ptr -> desc_map.rl_num = "1110"b;
	goto term_loop;
						/* 	*/
term_routine (3):					/*  id  */


/*	The first thing we must do is to see if it is legal to have  id  modification
   *	with this  mf  field.  If the  mf field  is not in the instruction word itself
   *	then  id  modification is illegal.
*/

	if ^mf_inst_flag

	then do;
	     code = 631;
	     call com_err_ (0, "ET", "^d ID modification is illegal for  mf^d.", code, dx);
	     return;
	end;


/*	The  id  term may be followed by a character which specifies  ar  or  reg  modification.
   *	We must look for that character and set the flags which indicate these types of
   *	modification.  If either of the two is specified we must move the window past
   *	this character.
*/

	indw_ar_flag = "0"b;
	indw_reg_flag = "0"b;

	if substr (window, 1, 1) = "b"
	then do;
	     indw_ar_flag = "1"b;
	     indw_reg_flag = "1"b;
	end;

	if substr (window, 1, 1) = "a"
	then indw_ar_flag = "1"b;

	if substr (window, 1, 1) = "r"
	then indw_reg_flag = "1"b;

	if (indw_ar_flag) | (indw_reg_flag)
	then do;
	     start = start + 1;
	     size = size - 1;
	end;


/*	Now perform the necessary initialization.  We must turn ON the  id  bit in the
   *	mf  field.  We will initially assume that the indirect word does not use
   *	ar  modification.  Thus the descriptor will be in segment  etx.  We will also
   *	initially assume that the indirect word does not use  reg  modification.
   *	Just in case, however, we will set the number of the pointer register or index
   *	used by this indirect word.
*/

	mf_ptr -> mf_map.id = "1"b;

	desc_ptrs (dx) = etx_ind_ptrs (dx);

	indw_ptr -> indw_map.y = fixed (rel (desc_ptrs (dx)), 14);

/*	Set up the number of the pointer register and index register that the indirect
   *	word will use.  We use  4,5, and 7 because we do not want to use  pointer
   *	register 6 - it is the stack pointer.
*/

	if dx = 3
	then idx = 7;
	else idx = dx + 3;


/*	If this indirect word requires  ar  modification then we must do the following:
   *	1.  Turn on the  ar  bit in the indirect word.
   *	2.  Set the pointer register number in the indirect word.
   *	3.  Change the  desc_ptrs entry.  The indirect descriptor will now be placed
   *	    in segment  etiX.
   *	4.  Set up the address field in the indirect word.
   *	5.  Set up the pointer register used by the indirect word.  It will point to
   *	    the descriptor but must be adjusted by the value in the indirect word's address
   *	    field so the effective address will be correct.
*/

	if ^indw_ar_flag then goto check_indw_reg;

	indw_ptr -> indw_map.ar = "1"b;

	indw_ptr -> indw_map.pr_num = substr (addr (idx) -> bit_word, 34, 3);

	desc_ptrs (dx) = eti_ind_ptrs (dx);

	indw_ptr -> indw_map.y = idx * 8;

	pointers (idx) = addrel (desc_ptrs (dx), - indw_ptr -> indw_map.y);


/*	If the descriptor itself has  ar  modification then the data will be in segment
   *	etdX.  We will leave it there.  However, if the descriptor does not specify
   *	ar  modification then the data currently is to be in segment  etx.   We must change
   *	this and put the data in the same segment as the descriptor which is in segment
   *	etiX.  Note, if the descriptor specifies  reg  modification then we will have
   *	to adjust the new descriptor address.
*/

	if mf_ptr -> mf_map.ar then goto check_indw_reg;

	data_ptrs (dx) = eti_data_ptrs (dx);

	if mf_ptr -> mf_map.reg = "0"b
	then offsetx = 0;
	else offsetx = - dx;

	desc_ptr -> desc_map.y = fixed (rel (addrel (data_ptrs (dx), offsetx)), 14);


/*	Now check for register modification.  If it is specified the offset will be
   *	idx  WORDS.  We don't care whether or not  ar  modification has been specified.
   *	In either case we must:
   *	1.  Set the index modifier tag code in the indirect word.
   *	2.  Put the word offset in the index register to be used.
   *	3.  Adjust the address field that is in the indirect word.
*/

check_indw_reg:

	if indw_reg_flag

	then do;

	     indw_ptr -> indw_map.reg = indw_reg_tags (dx);

	     regs.x (idx) = idx;

	     indw_ptr -> indw_map.y = indw_ptr -> indw_map.y - idx;

	end;


/*	Now we can set up the  page_ptrs  entry for this indirect descriptor.
   *	Their entries are:  3, 7, & 11.
*/

	page_ptrs (3 + (dx-1)*4) = desc_ptrs (dx);


	goto term_loop;
						/* 	*/
term_routine (4):					/*  reg  */


/*	We came here because we found an  "re".  Lets check to see that the next character
   *	is really the  "g".
*/

	substr (term_name, 3, 1) = substr (window, 1, 1);

	if term_name ^= "reg"
	then goto illegal_term;

	start = start + 1;
	size = size - 1;


/*	This is a valid  reg  term.  We must do the following:
   *	1.  Set the index register modifier tag code in the mf field.
   *	2.  Adjust the address field in the descriptor.  We must adjust it by a word
   *	    offset.  This value then will just be  X.
   *	3.  NOTE, we will not set up the value in the index register now.   We know that
   *	    it should be  X  words but we don't know what mode to express this offset
   *	    in yet.   This will be done by  "et_test"  when all the data statements have
   *	    been parsed.
*/

	mf_ptr -> mf_map.reg = mf_reg_tags (dx);

	desc_ptr -> desc_map.y = desc_ptr -> desc_map.y - dx;

	goto term_loop;
						/* 	*/
illegal_term:

	code = 607;

	call com_err_ (0, "ET", "^d Illegal  mf  term: ""^a"".", code, term_name);

	return;




     end et_mf;
