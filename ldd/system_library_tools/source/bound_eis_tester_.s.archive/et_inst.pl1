/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


et_inst: procedure (statement, arg_et_data_ptr, code);



/*	This procedure will parse the data in an  "inst"  statement.
   *
   *	Created  Nov, 72  by Bill Silver.
   *
   *
   *
   *	An  "inst"  statement has the following format:
   *
   *	inst	opcode_mnemonic	-option ... -option ... ;
   *
   *	1.  The first field in the statement MUST be  "inst".
   *
   *	2.  The second field in the statement MUST be the mnemonic name
   *	    of a storage type  eis  instruction.  (As opposed to address
   *	    register type  eis  instructions which are not tested by  ET.
   *
   *	3.  Any number of valid  "inst"  statement  option fields may follow.  They may
   *	    be in any order.  Each must begin with a  "-".  The options allowed in an
   *	    "inst"  statement  are:
   *
   *	    a)  -tbA	Used to turn  ON  the  Truncation Bit.
   *			A is either  "y" or "n" and signifies whether or not the instruction
   *			is to take a truncation fault.
   *			"y"  =>  yes,   "n"  =>  no.
   *
   *	    b)  -fb	Used to turn  ON  the  Fill Bit.
   *
   *	    c)  -pb	Used to turn  ON  the  Plus sign Bit.
   *
   *	    d)  -rb	Used to turn  ON  the  Rounding Bit.
   *
   *	    e)  -fcA	Defines the  Fill Character.  A  is the character which will
   *			be used.
   *
   *	    f)  -mcA	Defines the  Mask Character.  A is the character which will
   *			be used.  Note, for both "fc" and "mc" options the character
   *			immediately following the option name will be used.
   *
   *	    g)  -ln X	X defines the  Loop Number.  This is the number of times this
   *			instruction test will be performed.  The default is  1.
   *			The maximum value of  X  is  4.
   *
   *	    h)  -io X	X defines the  Instruction Offset.  It is used to position
   *			the instruction on a page boundary.  The default is  0.  This
   *			will place the instruction at word 0 of the second page
   *			of the instruction area.   X indicates the number of words of
   *			the instruction which will be placed in the first page of the
   *			instruction area.  The maximum value of  X  is  3.
   *
   *	    i)  -nt "A...A" This option defines a  Note.    It can be used to
   *			define each test.  The term consists of a character string
   *			between quotes.  Up to 64 characters may be used.  No embedded
   *			quotes are allowed.
   *
   *	    j)  -bo AAA	This option defines a  Boolean Operator.   AAA is the name of
   *			the operator.  These names are given in the routine which
   *			processes this operator.
   *
   *	    k)  -ir	A  multi-field option which defines the correct state of the
   *			indicator registers after the  eis  instruction has been
   *			executed.  A list of the indicator names is given  in the
   *			routine which processes this option.
   *
   *	    l)  -mfX	A multi-field option which defines the  MF  fields of the instruction.
   *			X  denotes which  MF  field is being defined.  It must be from
   *			1 - 3.  The terms for this option are defined in  et_mf.pl1
*/
/* 	*/
/*	The   PARAMETERS  to  et_inst.	*/


dcl  statement char (*),				/* The input string containing the
						   *  "inst"  statement to be parsed.  */

     arg_et_data_ptr ptr,				/* The input pointer to   et_data. */

     code fixed bin (35);				/* Error code.  */






/*		AUTOMATIC  DATA		*/


/*	The following data items are used in calls to  et_util.  */

dcl  state_ptr ptr,					/* Pointer to the  "inst"  input statement. */

     start fixed bin (35),				/* The number of characters allready
						   *  processed in the  "inst"  statement.
						   *  The next character is the start of
						   *  the window.  */

     size fixed bin (35),				/* The current size ( in characters )
						   *  of the window on the  "inst"  statement.  */

     next_statement_x fixed bin;			/* Index of the last character in the
						   *  statement - in effect the number of
						   *  characters in the statement.  */



/*	These are some temporary variables. */

dcl  dec_num fixed bin,				/* Holds converted decimal number.  */

     i fixed bin,					/* Index */

     len fixed bin,					/* Length of a field. */

     num_descs fixed bin,				/* Number of descriptors in the instruction. */

     option_name char (3),				/* Used to save an option name.  */

     option_num fixed bin;				/* Index used when processing options. */





/*		BASED  DATA		*/



/*	This is an overlay of the input  "inst"  statement.  It is used to access the input
   *	statement as a stream of characters.  */


dcl 1 inst_statement based (state_ptr),

    2 offset char (start),				/* The part of the  "inst"  statement which
						   *  we have already processed. */

    2 window char (size);				/* The part of the  "inst"  statement which
						   *  we are currently accessing.  */




/*	The following overlays are used to fill in the op code word of the
   *	eis  instruction.  Three are needed because of overlapping fields.
*/

dcl 1 instr_map_1 based (addr (instr_word)) aligned,
   (2 fill_mask char (1),				/* Defines both  fill and mask field. */
    2 t bit (1),
    2 pad1 bit (1),
    2 mf2 bit (7),
    2 opcode bit (10),
    2 pad2 bit (1),
    2 mf1 bit (7)) unaligned;


dcl 1 instr_map_2 based (addr (instr_word)) aligned,
   (2 p_f bit (1),					/* Defines both  f  and  p  bits. */
    2 pad1 bit (1),
    2 mf3 bit (7),
    2 pad2 bit (1),
    2 rd bit (1),
    2 pad3 bit (25)) unaligned;


dcl 1 instr_map_3 based (addr (instr_word)) aligned,
   (2 pad1 bit (5),
    2 bolr bit (4),
    2 pad2 bit (27)) unaligned;




/*	This is an overlay of a  descriptor  word.   We are only interested in the
   *	address field and the  mf field.
*/

dcl 1 desc_map based aligned,
   (2 pad1 bit (3),
    2 y fixed bin (14),				/* Address field.  */
    2 pad2 bit (11),
    2 mf bit (7)) unaligned;


/*	This overlay is used to reference a fixed bin word as a bit word.  */

dcl  bit_word bit (36) aligned based (addr (dec_num));





/*		INTERNAL  STATIC  DATA	*/


/*	The following table is a list of the option names allowed in an
   *	"inst"  statement.
*/

dcl  option_names (1:12) char (3) internal static
     init ("-tb", "-fb", "-pb", "-rb",
     "-fc", "-mc", "-ln", "-io",
     "-nt", "-bo", "-ir", "-mf");


dcl  quote char (1) init ("""") internal static;



/*	This table contains the names of the boolean (BOLR) operations.
   *	The position in the array corresponds to the actual  BOLR  code.
*/

dcl  bolr_names (0:15) char (3) internal static
     init ("zer", "and", "axr", "mov",
     "xra", "ra2", "xor", "or ",
     "nor", "nox", "iv2", "xrx",
     "inv", "xxr", "nan", "set");



/*	The following table is used to parse the terms of the  "ir"  option.
   *	These are the names by which the various indicators are known to  ET.
   *	The position within the table corresponds to the bit position of the indicator
   *	in the word that is used to load and store the indicators.
*/


dcl  ir_names (14) char (2) internal static
     init ("zr", "ng", "cr", "ov", "eo", "eu", "om",
     "tr", "pe", "pm", "bm", "tn", "mw", "ab");


/*	This table is a list of the names of the  4  types of  eis  instructions.  */

dcl  instr_type_names (4) char (12) aligned internal static
     init ("alphanumeric", "numeric     ",
     "bit  string ", "conversion  ");


/*	This table is a list of the num_chars values that may be assigned to each descriptor.  */

dcl  num_chars_table (0:3) fixed bin internal static
     init (1, 4, 36, -1);

/*  */
/*		EXTERNAL  DATA		*/



/*	These are the data areas referenced by the initialize instruction.  These
   *	addresses reference the first words of the middle page of each data area.
   *	These data areas are in the same segment  (etx)  as the instruction itself.
*/

dcl (etx$data1, etx$data2, etx$data3,
     etx$instruction_area, etx$instr_page_2) external;


dcl  com_err_ entry options (variable),

     et_mf entry (char (*), ptr, fixed bin (35)),

     et_util$get_next entry (ptr, fixed bin (35), fixed bin (35), char (*), fixed bin),
     et_util$skip entry (ptr, fixed bin (35), fixed bin (35)),
     et_util$convert_decimal entry (ptr, fixed bin (35), fixed bin (35), fixed bin, fixed bin (35));




dcl (addr,
     index,
     length,
     search,
     substr) builtin;
						/*  */
%include et_instr_data_map;
/* 	*/
%include et_setup_data;
/* 	*/
/*	Set up the window on the input  "inst"  statement.  We will skip the
   *	"inst"  field at the beginning of the statement.
*/


	state_ptr = addr (statement);
	next_statement_x = length (statement);

	et_data_ptr = arg_et_data_ptr;		/* Copy this argument. */

	start = 4;
	size = next_statement_x - 4;


/*	Now skip to the mnemonic name field.  */

	call et_util$skip (state_ptr, start, size);

	call get_instr_num;				/* The mnemonic name MUST be next. */

	if code ^= 0
	then return;




/*	Now initialize the data variables in  et_setup_data.  The initial state of the
   *	instruction and all descriptors is:
   *
   *	1.  There is no register or pointer modification.
   *	2.  There is no register length (RL) modification.
   *	3.  The descriptor is not indirect.
   *	4.  The data referenced via the descriptor is in the same segment as
   *	    the descriptor.  (etx)
*/

/*	Put the instruction name in the  note field.  The rest of the note will
   *	be left blank for now.
*/

	name = et_instr_data$instructions (instr_num).mnemonic;

	loop_count = 1;				/* The default is to execute the test
						   *  only once.  */

	instr_offset = 0;				/* Assume instruction goes at word zero
						   *  of middle page.  */

/*	Clear the instruction word and set up the opcode field.
*/

	instr_word = "0"b;

	instr_map_1.opcode = et_instr_data$instructions (instr_num).opcode;


	instr_type = et_instr_data$instructions (instr_num).instr_typex;

	do i = 1 to 3;				/* Initially there are no indirect descriptors.  */
	     descriptors (i) = "0"b;
	     ind_words (i) = "0"b;
	     desc_ptrs (i) = null ();
	end;

	do i = 1 to 5;				/* Entries 1 & 2 will be filled in below. */
	     data_ptrs (i) = null ();
	     data_lens (i) = 0;
	     data_offsets (i) = 0;
	end;

	do i = 1 to 14;				/* Default is no page faults. */
	     page_faults (i) = "0"b;
	     page_ptrs (i) = null ();
	end;

	page_ptrs (2) = addr (etx$instr_page_2);	/* This page is usually used. */

	truncation_flag = 0;

	do i = 0 to 7;				/* Unused pointer registers are null. */
	     pointers (i) = null ();
	end;

/*	Unused index registers and A and Q are set to some recognizable but
   *	never valid value  (17777 octal).
*/

	do i = 0 to 7;
	     regs.x (i) = 8191;
	end;

	regs.A, regs.Q = 8191;


/*	All indicators will be initialized to  off  except the  bar mode  indicator which
   *	will be on during normal  Multics operation.
*/

	ir_word = "000000000000000000000000000010000000"b;


/*	Now set up the initial values of the data pointers and the descriptors.
   *	The third descriptor is initialized only if this instruction actually has a
   *	third descriptor.
*/
	if et_instr_data$instructions (instr_num).desc_3_flag

	then num_descs = 3;
	else num_descs = 2;

	data_ptrs (1) = addr (etx$data1);
	data_ptrs (2) = addr (etx$data2);

	if num_descs = 3
	then data_ptrs (3) = addr (etx$data3);

	do i = 1 to num_descs;
	     addr (descriptors (i)) -> desc_map.y = fixed (rel (data_ptrs (i)), 14);
	end;


/*	Now set up the  mf  pointers.  There must be an  mf  field for each descriptor.
   *	The  mf1 field is always in the instruction word.  The mf2 and mf3 fields may
   *	be in the instruction word or in the descriptor itself.
*/

	mf_ptrs (1) = addr (instr_map_1.mf1);

	if et_instr_data$instructions (instr_num).mf2_flag
	then mf_ptrs (2) = addr (instr_map_1.mf2);
	else mf_ptrs (2) = addr (addr (descriptors (2)) -> desc_map.mf);

	if num_descs < 3

	then mf_ptrs (3) = null ();

	else if et_instr_data$instructions (instr_num).mf3_flag
	then mf_ptrs (3) = addr (instr_map_2.mf3);
	else mf_ptrs (3) = addr (addr (descriptors (3)) -> desc_map.mf);


/*	Now set up the  num_chars  table.  If there is now descriptor 3 then this
   *	entry in the table is zero.
*/

	num_chars (3) = 0;

	do i = 1 to num_descs;
	     num_chars (i) = num_chars_table (et_instr_data$instructions (instr_num).char_sizex (i));
	end;

/* 	*/
/*	Now start to process the options.  We will test for each possible option name.
   *	Each iteration of the loop will process one option.
*/


option_loop:


/*	Get the next option name.  If there are no more options then we have finished
   *	with this  "inst"  statement.
*/

	call et_util$get_next (state_ptr, start, size, "-", len);

	if len = 0 then return;

/*	We will try to find this option name in our list.  */

	option_name = substr (window, 1, 3);

	do option_num = 1 to 12;

	     if option_names (option_num) = option_name

	     then do;
		start = start + 3;			/* Move window past option name.  */
		size = size - 3;
		goto option_routine (option_num);	/* Go to correct routine.  */
	     end;
	end;


/*	We did not find a valid option name.  There must be an input error.  */

	code = 201;
	call com_err_ (0, "ET", "^d Illegal option ""^a"" in ""inst"" statement.", code, option_name);

	return;
						/* 	*/
option_routine (1):					/*  -tb  */

	if instr_type = 4				/* Illegal only for conversion type. */
	then goto illegal_option;

	if substr (window, 1, 1) = "y"
	then truncation_flag = 1;

	start = start + 1;
	size = size - 1;

	instr_map_1.t = "1"b;

	goto option_loop;



option_routine (2):					/*  -fb  */

	if instr_type = 3				/* Legal only for bit string types. */

	then goto set_fb_pb;
	else goto illegal_option;


option_routine (3):					/*  -pb  */

/*	Legal only for  numeric and conversion types.  */

	if (instr_type ^= 2) & (instr_type ^= 4)

	then goto illegal_option;


set_fb_pb:

	instr_map_2.p_f = "1"b;

	goto option_loop;



option_routine (4):					/*  -rb  */

	if instr_type ^= 2				/* Legal only for numeric types. */

	then goto illegal_option;

	instr_map_2.rd = "1"b;

	goto option_loop;



option_routine (5):					/*  -fc  */
option_routine (6):					/*  -mc  */

	if instr_type ^= 1				/* Legal only for alphanumeric types.  */

	then goto illegal_option;

	instr_map_1.fill_mask = substr (window, 1, 1);

	start = start + 1;
	size = size - 1;

	goto option_loop;
						/*  */
option_routine (7):					/*  -ln  */
option_routine (8):					/*  -io  */


/*	Each of these option names must be followed by a decimal term.  */

	call et_util$skip (state_ptr, start, size);

	call et_util$convert_decimal (state_ptr, start, size, dec_num, code);

	if code ^= 0 then goto illegal_term;

	if option_name = "-ln"

	then do;
	     if (dec_num < 1) | (dec_num > 4)
	     then goto illegal_term;
	     loop_count = dec_num;
	end;

/*	This option will position the instruction in the instruction area.  We must
   *	also determine which pages in the instruction area are actually used.   By
   *	default the first page in NOT used and the second page IS used.  If the user
   *	specifies an instruction offset then the first page will be used.
*/

	else do;
	     if (dec_num < 0) | (dec_num > 3)
	     then goto illegal_term;
	     instr_offset = dec_num;
	     if dec_num > 0
	     then page_ptrs (1) = addr (etx$instruction_area);
	end;

	goto option_loop;
						/*  */
option_routine (9):					/*  -nt  */


/*	Look for left hand quote.  */

	call et_util$skip (state_ptr, start, size);

	if substr (window, 1, 1) ^= quote

	then do;
	     code = 208;
	     call com_err_ (0, "ET", "^d Left quote of  -nt  term not found.", code);
	     return;
	end;

	start = start + 1;
	size = size - 1;

/*	Now we will move the characters inside the quotes into the note.  If we move more than
   *	the maximum of 64 characters then we will assume that the right quote is not present.
*/

	len = 0;					/* Position in the note string.  */

	do i = 1 to 65;

	     if substr (window, i, 1) = quote

	     then do;				/* Move the window past the right hand quote.
						   *  et_util$skip works funny with quotes.  */
		start = start + i;
		size = size - i;
		goto option_loop;
	     end;

	     len = len + 1;

	     substr (note, len, 1) = substr (window, i, 1);

	end;


	code = 209;
	call com_err_ (0, "ET", "^d Right quote missing in  ""-nt"" term  or  term too long.", code);

	return;
						/*  */
option_routine (10):				/*  -bo  */


	if instr_type ^= 3				/* Legal only for bit string types. */

	then goto illegal_option;


/*	Move the window to the start of the  BOLR name term.  */

	call et_util$skip (state_ptr, start, size);

	do dec_num = 0 to 15;

	     if substr (window, 1, 3) = bolr_names (dec_num)

	     then do;
		instr_map_3.bolr = substr (bit_word, 33, 4);
		goto option_loop;
	     end;

	end;


	code = 210;

	call com_err_ (0, "ET", "^d BORL name not known: ^a", code, substr (window, 1, 3));

	return;
						/* 	*/
option_routine (11):				/*  -ir  */



/*	This  routine will parse an  "ir"  option.
   *	An  ir  option has the following format:
   *
   *	-ir	ind . .  ind . . . ind
   *
   *	1.  The first field in the option MUST be the option name "-ir".
   *
   *	2.  Following  may be any number of  ind  terms.   These terms may be in
   *	    any order and may be separated by any number of skip fields.
   *
   *	3.  Each  ind  term is a two character identifier of an indicator
   *	    register.  The  ind  term values which are acceptable are:
   *
   *	    a)	zr  -  zero
   *	    b)	ng  -  negative
   *	    c)	cr  -  carry
   *	    d)	ov  -  overflow
   *	    e)	eo  -  exponent overflow
   *	    f)	eu  -  exponent underflow
   *	    g)	om  -  overflow mask
   *	    h)	tr  -  tally runout
   *	    i)	pe  -  parity error
   *	    j)	pm  -  parity mask
   *	    k)	bm  -  BAR mode  -  Really  NOT BAR mode
   *	    l)	tn  -  truncation
   *	    m)	mw  -  multi-word instruction
   *	    n)	ab  -  ABSOLUTE mode
*/




/*	Now start process the  ind  terms.   */



	do while (code = 0);


/*	Move the window to the beginning of the next term.  If we find the beginning of the
   *	next option or we hit the end of the statement then we are finished with this  ir
   *	option.
*/

	     call et_util$skip (state_ptr, start, size);

	     if (substr (window, 1, 1) = "-") | (substr (window, 1, 1) = ";")

	     then goto option_loop;


	     call parse_ir_ind_term;			/* Find the  ind  term in the ir_names table
						   *  and turn on the appropriate bit. */

	end;					/* End of the do loop. */


/*	To get here there must have been an error.  */

	return;
						/*  */
option_routine (12):				/*  -mf  */


	call et_mf (window, et_data_ptr, code);


	if code ^= 0

	then return;

	else goto option_loop;
						/* 	*/
get_instr_num: procedure;



/*	This procedure is called to find the entry for this instruction in the et_instr_data
   *	table.  It will return this index in  "instr_num".
*/



/*	First get the length of the mnemonic name.  We will search for the next skip character
   *	or  "/" (beginning of a comment)  or ";" (end of statement).  Note, it is valid
   *	to have an  "inst"  statement that has only the mnemonic name.  The length returned
   *	will be one greater than the actual length of the field.
*/

/*	Below we search for: New Line, Tab, Blank, "/", and ";"  */

	     len = search (window, "
	 /;") - 1;

	     if (len < 1) | (len > 4)

	     then do;
		code = 221;
		call com_err_ (0, "ET", "^d Illegal mnemonic name in statement:  ^a",
		     code, window);
		return;
	     end;



/*	Search the table for a matching instruction mnemonic.  */


	     do instr_num = 1 to et_instr_data$num_instructions;

		if substr (window, 1, len) = et_instr_data$instructions (instr_num).mnemonic

		then return;			/* If we find a match then instr_num
						   *  contains the index we want.  */
	     end;


/*	If we get here then there is an error.  We cound not find the mnemonic name
   *	specified in the input  "inst"  statement.
*/

	     code = 222;

	     call com_err_ (0, "ET", "^d ^a  is not a known  eis  instruction.", code, substr (window, 1, len));



	end get_instr_num;
						/*  */
parse_ir_ind_term: procedure;



/*	This procedure will search the  ir_names table for the current  ind  term.
   *	( the first two characters of window )  If it is found then the corresponding
   *	bit in  ir_word  will be turned on.
*/




	     do i = 1 to 14;

		if ir_names (i) = substr (window, 1, 2)

/*	The position of the  ind  term in the table indicates the position of
   *	its corresponding bit in the lower half of the ir_word.   Move the window
   *	past this indicator term.
*/

		then do;
		     substr (ir_word, 18+i, 1) = "1"b;
		     start = start + 2;
		     size = size - 2;
		     return;
		end;

	     end;					/* End of do loop. */

/*	This  ind  term was not found in The table. */

	     code = 231;
	     call com_err_ (0, "ET", "^d Illegal  ir  ind  term: ^a", code, substr (window, 1, 2));


	end parse_ir_ind_term;
						/* 	*/
illegal_option:

	code = 240 + option_num;

	call com_err_ (0, "ET", "^d "" ^a "" option is illegal for ^a type instruction.",
	     code, option_name, instr_type_names (instr_type));

	return;




illegal_term:

	code = 260 + option_num;

	call com_err_ (0, "ET", "^d Illegal decimal term (^d) for option ""^a"".",
	     code, dec_num, option_name);

	return;





     end et_inst;
