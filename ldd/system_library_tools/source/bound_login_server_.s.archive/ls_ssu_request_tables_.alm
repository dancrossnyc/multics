" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Bull Inc., 1987                *
" *                                                         *
" ***********************************************************

"Request tables for use by login servers.

" HISTORY COMMENTS:
"  1) change(85-03-01,Coren), approve(87-07-06,MCR7679),
"     audit(87-03-01,GDixon), install(87-08-04,MR12.1-1055):
"     Written.
"  2) change(87-03-04,GDixon), approve(87-07-06,MCR7679),
"     audit(87-05-19,Parisek), install(87-08-04,MR12.1-1055):
"      A) Add slave request, which lets the user know the slave request is not
"         supported by the Login Server.
"      B) Change help request to call ls_validate_user_$help, which prints
"         information about the subsystem when the help request is invoked
"         without arguments.
"      C) Sort ancillary requests (eg, access_mode, echo, temrinal_type, etc)
"         alphabetically following the more important requests of each table.
"      D) Standarize list_request descriptions for all requests.
"      E) Add the list_endpoints requests to the overseer_requests table.
"      F) Add the exec_com request to the overseer_requests table.
"  3) change(87-05-08,GDixon), approve(87-07-06,MCR7679),
"     audit(87-05-19,Parisek), install(87-08-04,MR12.1-1055):
"      A) Add all standard requests except abbrev, debug_mode, and execute to
"         the overseer_requests table.
"      B) Also, add the Multics pause and user commands to the
"               overseer_requests table.
"      C) Add a new endpoints_listening (epl) request to the overseer_requests
"               table.
"      D) Remove ready, ready_on and ready_off from the
"         enabled_standard_requests table, since this table is now used only
"         for the login and connect loop subsystems which do not want these
"         requests.
"  4) change(87-06-08,GDixon), approve(87-07-06,MCR7679),
"     audit(87-07-06,Parisek), install(87-08-04,MR12.1-1055):
"      A) Correct coding error in use of multics_request macro.
"  5) change(87-06-24,GDixon), approve(87-07-06,MCR7679),
"     audit(87-07-06,Parisek), install(87-08-04,MR12.1-1055):
"      A) In the login_requests table, add logout as a synonym for the hangup
"         command. But don't list or summarize logout since it is not one of
"         the documented commands at login time.  It is only documented for
"         use within the connect loop. (dsa 242)
"                                                      END HISTORY COMMENTS

	include	ssu_request_macros

	name	ls_ssu_request_tables_

"
"overseer_requests table -- used by login server process overseer. Just
"(start stop)_login_service and disable some of the standard requests.

	begin_table overseer_requests

	request	start_login_service,login_server_$start_service,(),
		(Start listening for connections.)

	request	stop_login_service,login_server_$stop_service,(),
		(Stop listening for connections.)

	request	endpoints_listening,login_server_$endpoints_listening,(epl),
		(Return status of listening on endpoints.),
		(flags.allow_both)

	request	list_endpoints,login_server_$list_endpoints,(lsep),
		(List endpoints listening for connections.)

	request	quit,login_server_$quit,(q),
		(Exit the login server subsystem.)

  multics_request   pause,(),
		(Pause for a given number of seconds.),,
		(flags.allow_command)

  multics_request   user,(),
		(Return or print attributes of the user process.),,
		(flags.allow_both)

  unknown_request   abbrev,(ab)
  unknown_request   debug_mode
  unknown_request	execute,(e)

	end_table overseer_requests

"
"login_requests table -- defines those requests that can be entered in response
"to a login banner

	begin_table login_requests

	request	login,ls_validate_user_$login,(l),
		(Login and establish a process.)

	request	enter,ls_validate_user_$enter,(e),
		(Login an anonymous user.)

	request	enterp,ls_validate_user_$enterp,(ep),
		(Login an anonymous user with a password.)

	request	dial,ls_validate_user_$dial,(d),
		(Connect to a dial server.)

	request	slave,ls_validate_user_$slave,(),
		(Change from login to slave service for duration of connection.),
		flags.allow_command+flags.dont_summarize+flags.dont_list

	request	access_class,ls_validate_user_$access_class,(acc),
		(Print the access class of the terminal connection.)

	request	echo,ls_validate_user_$echo,(),
		(Echo typed characters back to the terminal.)

	request	hangup,ls_validate_user_$hangup,(),
		(Terminate the login dialogue, hangup the terminal.)

	request	hello,ls_validate_user_$hello,(),
		(Print login banner.)

	request	logout,ls_validate_user_$hangup,(),
		(Terminate the login dialogue, hangup the terminal.),
		flags.allow_command+flags.dont_summarize+flags.dont_list

	request	modes,ls_validate_user_$modes,(),
		(Set or print the terminal modes.)

	request	noecho,ls_validate_user_$noecho,(),
		(Do not echo typed characters back to the terminal.)

	request	terminal_id,ls_validate_user_$terminal_id,(tid),
		(Set or print the terminal ID.)

	request	terminal_type,ls_validate_user_$terminal_type,(ttp),
		(Set or print the terminal type.)

	end_table login_requests
"
"connect_requests table -- defines those requests that may be entered in the
"'connect loop' after a user has been validated but before he has a process.

	begin_table connect_requests

	request	connect,ls_validate_user_$connect,(),
		(Connect to an existing disconnected process.)

	request	create,ls_validate_user_$create,(cr),
		(Create a new process.)

	request	destroy,ls_validate_user_$destroy,(),
		(Destroy an existing disconnected process.)

	request	hangup,ls_validate_user_$hangup,(),
		(Terminate the connect dialogue, disconnect the terminal.)

	request	list,ls_validate_user_$list,(ls),
		(List the user's disconnected processes.)

	request	logout,ls_validate_user_$logout,(),
		(Terminate the connect dialogue.)

	request	new_proc,ls_validate_user_$new_proc,(),
		(Replace an existing disconnected process with a new process.)

	request	access_class,ls_validate_user_$access_class,(acc),
		(Print the access class of the terminal connection.)

	request	echo,ls_validate_user_$echo,(),
		(Echo typed characters back to the terminal.)

	request	hello,ls_validate_user_$hello,(),
		(Print login banner.)

	request	modes,ls_validate_user_$modes,(),
		(Set or print the terminal modes.)

	request	noecho,ls_validate_user_$noecho,(),
		(Do not echo typed characters back to the terminal.)

	request	terminal_id,ls_validate_user_$terminal_id,(tid),
		(Set or print the terminal ID.)

	request	terminal_type,ls_validate_user_$terminal_type,(ttp),
		(Set or print the terminal type.)

	end_table connect_requests
"
" enabled_standard_requests table -- 
"  contains those "standard" ssu_requests that are allowed during the login
"  and connect dialogues.  The login_server_overseer_ request environment uses
"  ssu_request_tables_$standard_requests instead.

	begin_table enabled_standard_requests

	request	.,ssu_requests_$self_identify,(),
		(Identify the subsystem.)

	request	help,ls_validate_user_$help,(),
		(Obtain detailed information about the subsystem.)

	request	list_help,ssu_requests_$list_help,(lh),
		(List topics for which help is available.)

	request	list_requests,ssu_requests_$list_requests,(lr),
		(Briefly describe each subsystem request.)

	request	?,ssu_requests_$summarize_requests,(),
		(List names of subsystem requests.),
		flags.allow_command+flags.dont_summarize

	request	subsystem_name,ssu_requests_$subsystem_name,(),
		(Return the name of this subsystem.),
		flags.allow_both+flags.dont_summarize+flags.dont_list

	request	subsystem_version,ssu_requests_$subsystem_version,(),
		(Return the version number of this subsystem.),
		flags.allow_both+flags.dont_summarize+flags.dont_list

	end_table enabled_standard_requests

	end
