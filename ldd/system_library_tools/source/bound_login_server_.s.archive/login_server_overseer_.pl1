/****^  ********************************************
        *                                          *
        * Copyright, (C) Honeywell Bull Inc., 1987 *
        *                                          *
        ******************************************** */

/****^  HISTORY COMMENTS:
  1) change(85-03-01,Coren), approve(87-06-25,MCR7679), audit(87-02-26,GDixon),
     install(87-08-04,MR12.1-1055):
     Initial coding.
  2) change(87-02-26,GDixon), approve(87-06-25,MCR7679),
     audit(87-05-19,Parisek), install(87-08-04,MR12.1-1055):
      A) Changed a_initial_command to varying char string parm (dsa 153).
      B) Changed test entrypoint to allow caller to supply test info seg dir.
      C) Changed ls_ssu_info to be an internal static structure.  If quit is
         done without stopping all endpoints, entering login_server later in
         same process will still know about the ongoing endpoints. (dsa 104)
  3) change(87-05-08,GDixon), approve(87-06-25,MCR7679),
     audit(87-05-19,Parisek), install(87-08-04,MR12.1-1055):
     Use ssu_request_tables_$standard_requests rather than allowing a limited
     subset of standard requests in our own request table.
  4) change(87-06-25,GDixon), approve(87-06-25,MCR7679),
     audit(87-07-07,Parisek), install(87-08-04,MR12.1-1055):
     Add -probe control arg to $test entrypoint.
  5) change(87-07-06,GDixon), approve(87-07-06,MCR7679),
     audit(87-07-07,Parisek), install(87-08-04,MR12.1-1055):
      A) Correct problems in code which invokes start_up.ec when not in test
         mode.
      B) Set ssu_ to use exec_com search list to find login server ec's.
                                                   END HISTORY COMMENTS */

/* format: style4,delnl,insnl,^ifthendo */

login_server_overseer_:
     procedure (a_pit_ptr, a_call_listen, a_initial_command);

/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* This is the process overseer for a login server daemon.  Basically all it */
/* does is establish default handlers and set up an ssu_ invocation to       */
/* process requests.					       */
/*							       */
/* The "test" entry is used to run the login server code in test mode in an  */
/* interactive process.					       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

dcl  a_pit_ptr pointer parameter;
dcl  a_call_listen bit (1) parameter;
dcl  a_initial_command char (*) varying parameter;


/* AUTOMATIC */

dcl  arg char (argl) based (argp);
dcl  argl fixed bin (21);
dcl  argp pointer;
dcl  argx fixed bin;
dcl  bc fixed bin (24);
dcl  call_probe_mode bit (1);
dcl  code fixed bin (35);
dcl  debug_mode bit (1);
dcl  entry_type fixed bin (2);
dcl  first_process bit (1);
dcl  info_dir_name char (168);
dcl  initial_command_line char (200);
dcl  login_server_info_dir char (168);
dcl  nargs fixed bin;
dcl  pathx fixed bin;
dcl  ready_to_listen bit (1);
dcl  sci_ptr pointer;
dcl  start_up_dir char (168);
dcl  system_dir_name char (168);

/* AUTOMATIC STRUCTURES */

dcl  1 logout_msg aligned,				/* for passing to terminate_process_ */
       2 version fixed bin,
       2 flags unaligned,
         3 hold bit (1),
         3 brief bit (1),
         3 mbz bit (34);

/* ENTRIES */

dcl  absolute_pathname_ entry (char (*), char (*), fixed bin (35));
dcl  com_err_ entry () options (variable);
dcl  condition_interpreter_ entry (ptr, ptr, fixed bin, fixed bin, ptr, char (*), ptr, ptr);
dcl  continue_to_signal_ entry (fixed bin (35));
dcl  cu_$arg_count entry (fixed bin, fixed bin (35));
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl  cu_$cp entry (ptr, fixed bin (21), fixed bin (35));
dcl  find_condition_info_ entry (ptr, ptr, fixed bin (35));
dcl  expand_pathname_ entry (char (*), char (*), char (*), fixed bin (35));
dcl  hcs_$status_minf entry (char (*), char (*), fixed bin (1), fixed bin (2), fixed bin (24), fixed bin (35));
dcl  initiate_file_ entry (char (*), char (*), bit (*), ptr, fixed bin (24), fixed bin (35));
dcl  ioa_$ioa_switch entry () options (variable);
dcl  ioa_$rsnpnnl entry () options (variable);
dcl  iox_$get_line entry (ptr, ptr, fixed bin (21), fixed bin (21), fixed bin (35));
dcl  login_server_info_$test entry (char (*));
dcl  ls_cleanup_connections_ entry ();
dcl  pathname_ entry (char (*), char (*)) returns (char (168));
dcl  probe entry options (variable);
dcl  requote_string_ entry (char (*)) returns (char (*));
dcl  ssu_$add_request_table entry (ptr, ptr, fixed bin, fixed bin (35));
dcl  ssu_$cpescape_disabled entry;
dcl  ssu_$create_invocation entry (char (*), char (*), ptr, ptr, char (*), ptr, fixed bin (35));
dcl  ssu_$destroy_invocation entry (ptr);
dcl  ssu_$execute_start_up entry () options (variable);
dcl  ssu_$listen entry (ptr, ptr, fixed bin (35));
dcl  ssu_$print_message entry () options (variable);
dcl  ssu_$set_ec_search_list entry (ptr, char(32));
dcl  ssu_$set_ec_suffix entry (ptr, char (32));
dcl  ssu_$set_procedure entry (ptr, char (*), entry, fixed bin (35));
dcl  terminate_file_ entry (ptr, fixed bin (24), bit (*), fixed bin (35));
dcl  terminate_process_ entry (char (*), ptr);


/* EXTERNAL STATIC */

dcl  (
     error_table_$badopt,
     error_table_$noentry,
     error_table_$too_many_names
     ) fixed bin (35) external static;
dcl  iox_$error_output pointer external static;
dcl  iox_$user_input pointer external static;
dcl  ls_data_$connect_info_dir char (168) external static;
dcl  ls_data_$login_info_dir char (168) external static;
dcl  ls_data_$login_server_info_dir char (168) external static;
dcl  ls_ssu_request_tables_$overseer_requests fixed bin external static;
dcl  ssu_et_$subsystem_aborted fixed bin (35) external static;
dcl  ssu_request_tables_$standard_requests bit (36) aligned external static;
dcl  sys_info$system_control_dir char (168) varying external static;


/* INTERNAL STATIC */

dcl  ANSWER_TABLE_NAME char (32) internal static options (constant) initial ("answer_table");
dcl  EC_SEARCH_LIST char(32) int static options(constant) init("exec_com");
dcl  INSTALLATION_PARMS_NAME char (32) internal static options (constant) initial ("installation_parms");
dcl  LARGE_NUMBER fixed bin internal static options (constant) initial (100000);
						/* for adding standard request table at end */
dcl  LS_SS_EC_SUFFIX char (32) internal static options (constant) initial ("lsec");
dcl  LS_SS_NAME char (12) internal static options (constant) initial ("login_server");
dcl  NORMAL_MODE fixed bin internal static initial (1);	/* for condition_interpreter_ */
dcl  PROCESS_TYPE (0:3) character (12) varying internal static options (constant)
	initial (" initializer", " interactive", " absentee", " daemon");
dcl  PROG_NAME char (22) internal static options (constant) initial ("login_server_overseer_");
dcl  START_UP_DOT_EC char (11) internal static options (constant) initial ("start_up.ec");
dcl  TRACE_NAME char (18) internal static options (constant) initial ("login_server_trace");
dcl  UDD char (13) internal static options (constant) initial (">user_dir_dir");
dcl  trace_switch bit (1) internal static initial ("0"b);	/* can be changed by ls_trace command */


/* INTERNAL STATIC STRUCTURES */

dcl  1 static_ls_ssu_info aligned like ls_ssu_info internal static;


/* BUILTINS AND CONDITIONS */

dcl  (any_other, cleanup, quit) condition;

dcl  (addr, index, length, null, rtrim, string, substr) builtin;
%page;
	call_probe_mode = "0"b;
	debug_mode = "0"b;
	pit_ptr = a_pit_ptr;
	a_call_listen = "0"b;
	system_dir_name = sys_info$system_control_dir;
	login_server_info_dir = ls_data_$login_server_info_dir;
	ls_ssu_info_ptr = addr (static_ls_ssu_info);
	ls_ssu_info.flags = "0"b;
	ls_ssu_info.login_info_dir = ls_data_$login_info_dir;
	ls_ssu_info.connect_info_dir = ls_data_$connect_info_dir;

OVERSEER_JOIN:
	sci_ptr = null ();
	ready_to_listen = "0"b;
	on any_other call Any_other_handler ();
	on quit call Quit_handler ();

	if ^debug_mode
	then do;

/* Find and run the start_up exec_com. This code is lifted almost verbatim from process_overseer_ */

	     initial_command_line = "";

	     first_process = (pit_ptr -> pit.n_processes = 1);
						/* see if new_proc or login */

	     if ^pit_ptr -> pit.at.nostartup
	     then do;				/* start_up is allowed */

/* First try homedir */

		start_up_dir = pit_ptr -> pit.homedir;
		call hcs_$status_minf (start_up_dir, START_UP_DOT_EC, 1, entry_type, bc, code);

/* note that we assume any error is cause to look elsewhere to give best chance
   of success */

		if code = 0 & entry_type = 1
		then ;

/* now try projectdir */

		else do;
		     start_up_dir = UDD || ">" || pit_ptr -> pit.project;
		     call hcs_$status_minf (start_up_dir, START_UP_DOT_EC, 1, entry_type, bc, code);

		     if code = 0 & entry_type = 1
		     then ;
		     else do;
		          start_up_dir = sys_info$system_control_dir;
			call hcs_$status_minf (start_up_dir, START_UP_DOT_EC, 1, entry_type, bc,
			     code);
			if code = 0 & entry_type = 1
			then ;
			else goto NO_START_UP;
		     end;
		end;

		initial_command_line = "exec_com " || requote_string_ (pathname_ (start_up_dir, START_UP_DOT_EC));

		if first_process
		then initial_command_line = rtrim (initial_command_line) || " login ";
		else initial_command_line = rtrim (initial_command_line) || " new_proc ";

		initial_command_line = rtrim(initial_command_line) || PROCESS_TYPE (pit_ptr -> pit.process_type);

		call cu_$cp (addr (initial_command_line), length (initial_command_line), (0));
						/* code is uninteresting */
	     end;					/* the block that checked pit.nostart */
NO_START_UP:
	end;

	call ls_cleanup_connections_ ();		/* dispose of any connections belong to now-defunct servers */

/* Now we're ready to start the subsystem */

	ls_ssu_info.version = LS_SSU_INFO_V1;
	ls_ssu_info.debug_mode = debug_mode;
	ls_ssu_info.call_probe = call_probe_mode;
	ls_ssu_info.trace = trace_switch;
	if ls_ssu_info.n_endpoints = 0
	then ls_ssu_info.first_endpoint_ptr, ls_ssu_info.last_endpoint_ptr = null;

	ls_ssu_info.answer_table_ptr, ls_ssu_info.installation_parms_ptr = null ();
	on cleanup call Clean_up ();

	call initiate_file_ (system_dir_name, ANSWER_TABLE_NAME, R_ACCESS, ls_ssu_info.answer_table_ptr, (0), code);
	if code ^= 0
	then do;
	     call com_err_ (code, PROG_NAME, "Could not initiate answer table.");
	     go to EXIT;
	end;

	call initiate_file_ (system_dir_name, INSTALLATION_PARMS_NAME, R_ACCESS, ls_ssu_info.installation_parms_ptr,
	     (0), code);
	if code ^= 0
	then do;
	     call com_err_ (code, PROG_NAME, "Could not initiate installation_parms.");
	     go to EXIT;
	end;

	call ssu_$create_invocation (LS_SS_NAME, LS_SS_VERSION, ls_ssu_info_ptr,
	     addr (ls_ssu_request_tables_$overseer_requests), login_server_info_dir, sci_ptr, code);
	if code ^= 0
	then do;
	     call com_err_ (code, PROG_NAME, "Could not create subsystem invocation.");
	     go to EXIT;
	end;

	ls_ssu_info.sci_ptr = sci_ptr;

	if ^debug_mode
	then call ssu_$set_procedure (sci_ptr, "cpescape", ssu_$cpescape_disabled, code);
						/* no ".." escapes in login server environment, please */


	if code ^= 0
	then do;
	     call ssu_$print_message (sci_ptr, code, "Could not set ""cpescape"" procedure.");
	     go to WRAP_UP_AND_EXIT;
	end;

	call ssu_$add_request_table (sci_ptr, addr (ssu_request_tables_$standard_requests), LARGE_NUMBER, code);
	if code ^= 0
	then do;
	     call ssu_$print_message (sci_ptr, code, "Could not add standard request table.");
	     go to WRAP_UP_AND_EXIT;
	end;

          call ssu_$set_ec_search_list (sci_ptr, EC_SEARCH_LIST);
	call ssu_$set_ec_suffix (sci_ptr, LS_SS_EC_SUFFIX);
	call ssu_$execute_start_up (sci_ptr, code);
	if code ^= 0
	then do;
	     call ssu_$print_message (sci_ptr, code, "Invoking start_up.^a", LS_SS_EC_SUFFIX);
	     if code ^= error_table_$noentry
	     then go to WRAP_UP_AND_EXIT;
	end;

	ready_to_listen = "1"b;
LISTEN:
	call ssu_$listen (sci_ptr, null (), code);
	if code ^= ssu_et_$subsystem_aborted
	then call ssu_$print_message (sci_ptr, code, "From ssu_$listen.");

WRAP_UP_AND_EXIT:
	call ssu_$destroy_invocation (sci_ptr);

EXIT:
	call Clean_up ();

	if ^debug_mode
	then do;
	     logout_msg.version = 0;
	     string (logout_msg.flags) = "0"b;
	     call terminate_process_ ("logout", addr (logout_msg));
	end;

	return;
%page;
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* Syntax: login_server_overseer_$test test_sc1_dir test_info_dir {-probe}   */
/*							       */
/* Arguments:						       */
/* test_sc1_dir						       */
/*    Directory containing test versions of answering service databases to   */
/*    be used by the login server.				       */
/* test_info_dir						       */
/*    Directory containing the three Login Server subsystem info	       */
/*    directories, which contain info segments describing the subsystem      */
/*    requests.  Three subdirectories must reside in test_info_dir:	       */
/*       login_server_info, login_info and login_connect_info	       */
/* -probe, -pb						       */
/*    when control points report an error, call probe after reporting the    */
/*    error to allow a chance for further debugging.  By default, execution  */
/*    continues within the control point after the error is reported.	       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */


test:
     entry options (variable);

	call cu_$arg_count (nargs, code);
	if code ^= 0
	then do;
	     call com_err_ (code, PROG_NAME, "From cu_$arg_count.");
	     return;
	end;

	system_dir_name = sys_info$system_control_dir;
	login_server_info_dir = ls_data_$login_server_info_dir;
	ls_ssu_info_ptr = addr (static_ls_ssu_info);
	ls_ssu_info.flags = "0"b;
	ls_ssu_info.login_info_dir = ls_data_$login_info_dir;
	ls_ssu_info.connect_info_dir = ls_data_$connect_info_dir;
	call_probe_mode = "0"b;
	debug_mode = "1"b;

	pathx = 0;
	do argx = 1 to nargs;
	     call cu_$arg_ptr (argx, argp, argl, (0));
	     if index (arg, "-") = 1
	     then do;
		if arg = "-probe" | arg = "-pb"
		then call_probe_mode = "1"b;
		else if arg = "-no_probe" | arg = "-npb"
		then call_probe_mode = "0"b;
		else do;
		     call com_err_ (error_table_$badopt, PROG_NAME, arg);
		     return;
		end;
	     end;
	     else do;
		pathx = pathx + 1;
		if pathx = 1
		then do;
		     call absolute_pathname_ (arg, system_dir_name, code);
		     if code ^= 0
		     then do;
			call com_err_ (code, PROG_NAME, arg);
			return;
		     end;
		     call login_server_info_$test (system_dir_name);
		end;
		else if pathx = 2
		then do;
		     call absolute_pathname_ (arg, info_dir_name, code);
		     if code ^= 0
		     then do;
			call com_err_ (code, PROG_NAME, arg);
			return;
		     end;
		     login_server_info_dir = Test_dir_path (info_dir_name, ls_data_$login_server_info_dir);
		     ls_ssu_info.login_info_dir = Test_dir_path (info_dir_name, ls_data_$login_info_dir);
		     ls_ssu_info.connect_info_dir = Test_dir_path (info_dir_name, ls_data_$connect_info_dir);
		end;
		else do;
		     call com_err_ (error_table_$too_many_names, PROG_NAME, arg);
		     return;
		end;
	     end;
	end;

	go to OVERSEER_JOIN;
%page;
login_server_trace:
ls_trace:
     entry options (variable);

/* command to turn on and off tracing for the login server -- only affects
   subsequent calls to login_server_overseer_ */

	call cu_$arg_count (nargs, code);
	if code ^= 0
	then do;
	     call com_err_ (code, TRACE_NAME, "From cu_$arg_count.");
	     return;
	end;

	if nargs ^= 1
	then do;
	     call com_err_ (0, TRACE_NAME, "Usage: login_server_trace -on | -off");
	     return;
	end;

	call cu_$arg_ptr (1, argp, argl, (0));
	if arg = "-on"
	then trace_switch = "1"b;

	else if arg = "-off"
	then trace_switch = "0"b;

	else call com_err_ (error_table_$badopt, TRACE_NAME, arg);

	return;
%page;
Any_other_handler:
     procedure ();

dcl  cond_name char (32);

dcl  1 auto_condition_info aligned like condition_info;

	condition_info_ptr = addr (auto_condition_info);
	condition_info.version = condition_info_version_1;
	call find_condition_info_ (null (), condition_info_ptr, code);
	if code ^= 0
	then cond_name = "Unfindable";
	else cond_name = condition_info.condition_name;

	if cond_name = "Unfindable" | cond_name = "cput" | cond_name = "alrm"
						/* no point interpreting any of these */
	then call ioa_$ioa_switch (iox_$error_output, "login_server_overseer_: ^a condition.", cond_name);

	else if cond_name = "quit" | cond_name = "command_question" | cond_name = "command_error" | cond_name = "finish"
						/* pass these on */
	then do;
	     call continue_to_signal_ ((0));
	     return;
	end;

	else call condition_interpreter_ (null (), (null ()), (0), NORMAL_MODE, condition_info.mc_ptr, cond_name,
		condition_info.wc_ptr, condition_info.info_ptr);

	if debug_mode
	then call probe ();
	else go to WRAP_UP_AND_EXIT;

     end Any_other_handler;
%page;
Clean_up:
     procedure;

dcl  code fixed bin (35);

	if ls_ssu_info.answer_table_ptr ^= null ()
	then call terminate_file_ (ls_ssu_info.answer_table_ptr, 0, TERM_FILE_TERM, code);

	if ls_ssu_info.installation_parms_ptr ^= null ()
	then call terminate_file_ (ls_ssu_info.installation_parms_ptr, 0, TERM_FILE_TERM, code);

     end Clean_up;

%page;
Quit_handler:
     procedure ();

	if debug_mode
	then call continue_to_signal_ ((0));

	else do;
	     if ready_to_listen
	     then do;
		call ssu_$print_message (sci_ptr, 0, "QUIT signalled. Enter command:");
		go to LISTEN;
	     end;

/* if we hadn't finished setting up the subsystem, there's not a whole lot of choices */

	     else if /* tree */ Start_response ()
		then return;
		else if sci_ptr = null ()
		     then go to EXIT;
		     else go to WRAP_UP_AND_EXIT;
	end;
%page;
Start_response:
	procedure returns (bit (1));

/* "1"b if response is "start", "0"b if "logout" */

dcl  intro char (100) varying;
dcl  intro_len fixed bin;
dcl  code fixed bin (35);
dcl  buffer char (80);
dcl  chars_read fixed bin (21);
dcl  response char (80);

	     intro = "Early QUIT";

	     do while ("1"b);			/* exit conditions return */
		if sci_ptr = null ()
		then call ioa_$ioa_switch (iox_$error_output, "login_server_overseer_: ^a. logout or start?", intro);
		else call ssu_$print_message (sci_ptr, 0, "^a. logout or start?", intro);

		call iox_$get_line (iox_$user_input, addr (buffer), length (buffer), chars_read, code);
		if code ^= 0
		then do;				/* this is so bizarre, there's not point worrying about absence of subsystem */
		     if sci_ptr ^= null ()
		     then call ssu_$print_message (sci_ptr, code, "From iox_$get_line.");
		     return ("0"b);			/* punt */
		end;

		response = substr (buffer, 1, chars_read - 1);
						/* assume NL at the end */
		if response = "logout"
		then return ("0"b);
		else if response = "start"
		then return ("1"b);
		else call ioa_$rsnpnnl ("Invalid response: ""^a""", intro, intro_len, response);
	     end;					/* go read again */

	end Start_response;

     end Quit_handler;
%page;
Test_dir_path:
     procedure (test_dir, normal_dir) returns (char (168));

dcl  test_dir char (*);
dcl  normal_dir char (168);

dcl  code fixed bin (35);
dcl  ent_part char (32);

	call expand_pathname_ (normal_dir, "", ent_part, code);
	return (pathname_ (test_dir, ent_part));

     end Test_dir_path;
%page;
%include access_mode_values;
%page;
%include condition_info;
%page;
%include ls_ssu_info;
%page;
%include pit;
%page;
%include terminate_file;
%page;
%include user_attributes;

     end login_server_overseer_;
