/****^  ********************************************
        *                                          *
        * Copyright, (C) Honeywell Bull Inc., 1987 *
        *                                          *
        ******************************************** */

/****^  HISTORY COMMENTS:
  1) change(85-04-01,Coren), approve(87-06-25,MCR7679), audit(87-03-02,GDixon),
     install(87-08-04,MR12.1-1055):
     Initial coding.
  2) change(87-03-02,GDixon), approve(87-06-25,MCR7679),
     audit(87-05-19,Parisek), install(87-08-04,MR12.1-1055):
      A) Correct coding standard violations.
      B) Add any_other handler to take lsdump, then remove the connection.
  3) change(87-04-16,Brunelle), approve(87-06-25,MCR7679),
     audit(87-05-19,Parisek), install(87-08-04,MR12.1-1055):
     Add ls_process_info.process_group_id to call to assign_connection.
  4) change(87-04-29,GDixon), approve(87-06-25,MCR7679),
     audit(87-05-19,Parisek), install(87-08-04,MR12.1-1055):
     Change calling sequence of ls_dump_.
  5) change(87-05-08,GDixon), approve(87-06-25,MCR7679),
     audit(87-05-19,Parisek), install(87-08-04,MR12.1-1055):
     Give login_service_entries.assign_connection the initializer_handle rather
     than the server_handler; this allows the network to send Initializer a
     disconnect if Login_Server process dies.
  6) change(87-05-15,GDixon), approve(87-06-25,MCR7679),
     audit(87-05-19,Parisek), install(87-08-04,MR12.1-1055):
     Ignore io_error that occurs when attempting to display "hangup" message
     upon process termination, when line has already disconnected.
  7) change(87-05-18,GDixon), approve(87-06-25,MCR7679),
     audit(87-05-19,Parisek), install(87-08-04,MR12.1-1055):
      A) Use new calling sequence of login_service_entries.listen.
      B) Set ls_connection_desc.minimum_ring.
      C) Use revised calling sequence for login_server_entries.validate_user.
  8) change(87-05-26,GDixon), approve(87-06-25,MCR7679),
     audit(87-07-06,Parisek), install(87-08-04,MR12.1-1055):
      A) Use new calling sequence of ls_report_subr_error_.  Avoid taking LS
         dumps for "expected" errors.
      B) Avoid printing on terminal when io_error condition has been signalled.
      C) Avoid reference to ls_connection_desc_ptr when it is null.
  9) change(87-06-18,GDixon), approve(87-06-25,MCR7679),
     audit(87-07-06,Parisek), install(87-08-04,MR12.1-1055):
      A) Avoid infinite loop when an io_error condition occurs while in
         debug_mode.
      B) Don't send disconnect request to Initializer after receiving a
         terminate response from the Initializer.
 10) change(87-06-25,GDixon), approve(87-06-25,MCR7679),
     audit(87-07-06,Parisek), install(87-08-04,MR12.1-1055):
      A) Call ls_report_subr_error_ and dsa_manager_$trace_message to report
         problems in disconnecting a connection.
                                                   END HISTORY COMMENTS */

/* format: style4,delnl,insnl,^ifthendo */

login_server_connection_:
     procedure (a_info_ptr);

/* This is the initial procedure for the control point that manages a single connection
   talking to the login server. It calls validate_user_ to engage in the login
   dialogue with the user and the Initializer; assuming this succeeds, it sets up handlers for
   disconnection and process termination, wakes up the user process, and blocks
   until one of the above events takes place. The control point lasts as long as
   the connection does.
*/

/* DECLARATIONS */

dcl  a_info_ptr pointer parameter;


/* AUTOMATIC */

dcl  code fixed bin (35);
dcl  connection_name char (32);
dcl  cpu_minutes fixed bin;
dcl  cpu_seconds fixed bin;
dcl  dumpid char (128) varying;
dcl  error_message char (100) aligned;
dcl  event_message fixed bin (71);
dcl  fatal_condition bit (1);
dcl  got_response bit (1);
dcl  message_type fixed bin;
dcl  person char (22);
dcl  person_project char (30);
dcl  project char (9);
dcl  tell_user bit (1) aligned;
dcl  terminate_event_channel fixed bin (71);
dcl  trace_switch bit (1);
dcl  validate_code fixed bin (35);


/* AUTOMATIC COPIES OF STRUCTURES */

dcl  1 auto_disconnect_request aligned like login_server_disconnect_request;

dcl  1 auto_event_wait_info aligned like event_wait_info;

dcl  1 auto_process_info aligned like ls_process_info;

dcl  1 auto_user_message_add_info aligned like as_user_message_add_info;

dcl  1 auto_user_message_info aligned like as_user_message_info;

dcl  1 auto_validate_options aligned like ls_validate_options;


/* BASED */

dcl  based_connection_info (ls_connection_desc.connection_info_len) bit (36) aligned based;

dcl  system_area area based (system_areap);

dcl  user_message (as_user_message_info.message_length) bit (36) aligned based (ls_response_ptr);


/* ENTRIES */

dcl  convert_status_code_ entry (fixed bin (35), char (8) aligned, char (100) aligned);
dcl  date_time_$format entry (char (*), fixed bin (71), char (*), char (*)) returns (char (250) var);
dcl  dsa_log_manager_$trace_message entry options (variable);
dcl  find_condition_info_ entry (ptr, ptr, fixed bin (35));
dcl  get_process_id_ entry () returns (bit (36));
dcl  get_system_free_area_ entry () returns (ptr);
dcl  hcs_$wakeup entry (bit (36) aligned, fixed bin (71), fixed bin (71), fixed bin (35));
dcl  ioa_ entry () options (variable);
dcl  iox_$control entry (ptr, char (*), ptr, fixed bin (35));
dcl  ipc_$block entry (ptr, ptr, fixed bin (35));
dcl  ipc_$create_ev_chn entry (fixed bin (71), fixed bin (35));
dcl  ipc_$delete_ev_chn entry (fixed bin (71), fixed bin (35));
dcl  ls_convert_as_error_code_ entry (fixed bin (35)) returns (fixed bin (35));
dcl  ls_dump_ entry (char(*) var, ptr, char(32));
dcl  ls_message_$print entry options (variable);
dcl  ls_message_$print_error entry options (variable);
dcl  ls_report_internal_error_ entry options (variable);
dcl  ls_report_subr_error_ entry (fixed bin(35), char(*), ptr, char(*),
	bit(1) aligned, bit(1) aligned);
dcl  send_ls_request_ entry (ptr, fixed bin (18), ptr, fixed bin (35));
dcl  user_message_$read_message entry (pointer, pointer, fixed bin (35));
dcl  user_message_priv_$add_message entry (ptr, fixed bin (35));


/* EXTERNAL STATIC */

dcl  (
     error_table_$action_not_performed,
     error_table_$no_message,
     error_table_$process_unknown,
     error_table_$unimplemented_version,
     ls_message_table_$automatic_logout,
     ls_message_table_$dial_logout,
     ls_message_table_$dial_terminated,
     ls_message_table_$dropped_by_mc,
     ls_message_table_$fatal_error,
     ls_message_table_$fpe_caused_logout,
     ls_message_table_$fpe_during_init,
     ls_message_table_$fpe_loop,
     ls_message_table_$fpe_new_proc,
     ls_message_table_$hangup,
     ls_message_table_$logout,
     ls_message_table_$offer_help
     ) fixed bin (35) external static;


dcl  iox_$user_io pointer external static;


/* INTERNAL STATIC */

dcl  DISCONNECT_EVENT fixed bin internal static options (constant) initial (1);
dcl  DONT_TAKE_DUMP bit (1) aligned int static options(constant) init("0"b);
dcl  DONT_TELL_INITIALIZER bit (1) aligned int static options (constant) init ("0"b);
dcl  DONT_TELL_USER bit (1) aligned int static options (constant) init ("0"b);
dcl (FALSE init ("0"b),
     TRUE init ("1"b)) bit (1) int static options (constant);
dcl  N_WAIT_EVENTS fixed bin internal static options (constant) initial (2);
dcl  ONE_MILLION fixed bin (35) internal static options (constant) initial (1000000);
dcl  OUR_NAME char (12) internal static options (constant) initial ("login_server");
dcl  TAKE_DUMP bit (1) aligned int static options(constant) init("1"b);
dcl  TERMINATE_EVENT fixed bin internal static options (constant) initial (2);
dcl  TELL_INITIALIZER bit (1) aligned int static options (constant) init ("1"b);
dcl  TELL_USER bit (1) aligned int static options (constant) init ("1"b);
dcl  our_process_id bit (36) aligned internal static initial (""b);
dcl  system_areap pointer internal static initial (null ());


/* BUILTINS AND CONDITIONS */

dcl  (addr, after, before, clock, currentsize, divide, length, null, rtrim, size, string, substr, unspec) builtin;

dcl  (any_other, cleanup, io_error) condition;
%page;
	call iox_$control (iox_$user_io, "quit_disable", null (), (0));
						/* we don't want quits while we're in the login server */
	ls_cp_info_ptr = a_info_ptr;
	ls_connection_desc_ptr = ls_cp_info.connection_desc_ptr;
	if system_areap = null ()
	then system_areap = get_system_free_area_ ();
	if our_process_id = ""b
	then our_process_id = get_process_id_ ();
	connection_name = ls_connection_desc.name;
	trace_switch = ls_cp_info.trace;

	event_wait_list_ptr = null ();

	on cleanup call Remove_connection ();
	on any_other
	     begin;
	     ci.version = condition_info_version_1;
	     call find_condition_info_ (null, addr (ci), code);
	     if code = 0
	     then do;
		dumpid = "Condition ";
		dumpid = dumpid || rtrim (ci.condition_name);
		dumpid = dumpid || " in connection";
	     end;
	     else dumpid = "Unknown condition in connection ";
	     if ls_connection_desc_ptr ^= null then do;
		dumpid = dumpid || " ";
		dumpid = dumpid || rtrim (ls_connection_desc.name);
	     end;
	     dumpid = dumpid || ".";
	     fatal_condition = TRUE;
	     if ci.info_ptr ^= null
	     then do;
		condition_info_header_ptr = ci.info_ptr;
		if condition_info_header.action_flags.default_restart
		then fatal_condition = FALSE;
	     end;
	     if fatal_condition
	     then do;
		call ls_dump_ (dumpid, addr (ls_cp_info), "");
		tell_user = (ci.condition_name ^= "io_error") &
		     (ls_connection_desc_ptr ^= null);
		call Hangup_and_remove (tell_user, TELL_INITIALIZER);
	     end;
	end;

	call cpm_$set_user_cl_intermediary (get_control_point_id_ (), Cl_intermediary, code);

	if code ^= 0
	then do;
	     call ls_report_subr_error_ (code, OUR_NAME, ls_cp_info_ptr,
		"cpm_$set_user_cl_intermediary", TELL_USER, TAKE_DUMP);
	     call Hangup_and_remove (TELL_USER, DONT_TELL_INITIALIZER);
	     return;
	end;

	ls_process_info_ptr = addr (auto_process_info);
	unspec (ls_process_info) = ""b;
	ls_process_info.version = LS_PROCESS_INFO_V1;
	login_service_entries_ptr = ls_connection_desc.service_entries_ptr;

/* now set up event channel for process termination */

	call ipc_$create_ev_chn (terminate_event_channel, code);
	if code ^= 0
	then do;
	     call ls_report_subr_error_ (code, OUR_NAME, ls_cp_info_ptr,
		"ipc_$create_ev_chn", TELL_USER, TAKE_DUMP);
	     call Hangup_and_remove (TELL_USER, DONT_TELL_INITIALIZER);
	     go to EXIT;
	end;

	ls_connection_desc.terminate_event_channel = terminate_event_channel;
	ls_connection_desc.process_info_ptr = ls_process_info_ptr;

	auto_validate_options.version = LS_VALIDATE_OPTIONS_V1;
	string (auto_validate_options.flags) = ""b;


	call login_service_entries.validate_user (ls_cp_info_ptr,
	     addr (auto_validate_options), ls_process_info_ptr, code);

	if code ^= 0
	then do;
	     call Remove_connection ();

	     if trace_switch
	     then call dsa_log_manager_$trace_message (LS_CALLER_TYPE, OUR_NAME, INFO_LOG_SEVERITY, 0, null (), 0, "",
		     "Returning from control point ^.3b, connection ^a.", get_control_point_id_ (), connection_name);

	     return;
	end;

	call Give_connection_to_process ();

/* we will now go blocked until one of the events happens. */

	event_wait_info_ptr = addr (auto_event_wait_info);

	event_wait_list_n_channels = N_WAIT_EVENTS;
	allocate event_wait_list in (system_area) set (event_wait_list_ptr);

	event_wait_list.n_channels = N_WAIT_EVENTS;
	event_wait_list.pad = ""b;
	event_wait_list.channel_id (DISCONNECT_EVENT) = ls_connection_desc.disconnect_event_channel;
	event_wait_list.channel_id (TERMINATE_EVENT) = ls_connection_desc.terminate_event_channel;

	do while ("1"b);
	     call ipc_$block (event_wait_list_ptr, event_wait_info_ptr, code);
	     if code ^= 0
	     then do;
		call ls_report_subr_error_ (code, OUR_NAME, ls_cp_info_ptr,
		     "ipc_$block", TELL_USER, TAKE_DUMP);
		call Hangup_and_remove (TELL_USER, DONT_TELL_INITIALIZER);
		go to EXIT;
	     end;

	     if event_wait_info.channel_index = DISCONNECT_EVENT
	     then call Disconnect_handler ();
	     else if event_wait_info.channel_index = TERMINATE_EVENT
	     then call Terminate_handler ();
	     else call ls_report_internal_error_ (0, OUR_NAME, ls_cp_info_ptr, "0"b,
		     "Wakeup with unexpected channel index ^d", event_wait_info.channel_index);

/* whatever it was, go wait for more */

	end;

EXIT:						/* come here from handlers if control point is all finished */
	if trace_switch
	then call dsa_log_manager_$trace_message (LS_CALLER_TYPE, OUR_NAME, INFO_LOG_SEVERITY, 0, null (), 0, "",
		"Returning from control point ^.3b, connection ^a.", get_control_point_id_ (), connection_name);

	return;
%page;
Disconnect_handler:
     procedure ();

/* This procedure is invoked when the connection is broken */

	if ls_cp_info.trace
	then call dsa_log_manager_$trace_message (LS_CALLER_TYPE, OUR_NAME, INFO_LOG_SEVERITY, 0, null (), 0, "",
		"Disconnect wakeup for connection ^a.", connection_name);

	if ls_process_info_ptr ^= null ()
	then do;
	     call Send_disconnect_request ();

	     if ls_process_info.usage_type ^= LS_LOGIN_USAGE
	     then call Send_user_message (LS_MSG_DISCONNECTED, null (), 0);
						/* inform the user process that had the connection */
	end;

	call login_service_entries.disconnect (connection_name, ls_connection_desc.connection_handle, ""b, (0));
						/* in case lower layer needs this */

	call Remove_connection ();
	go to EXIT;

     end Disconnect_handler;
%page;
Terminate_handler:
     procedure ();

/* This procedure is invoked when the user process for this connection terminates.
   It reads the "user_message" from the Initializer, which should be either a new_proc response
   or a termination response, and proceeds accordingly.
*/

	call iox_$control (iox_$user_io, "quit_disable", null (), (0));
						/* we don't want quits while we're in the login server */

	as_user_message_info_ptr = addr (auto_user_message_info);
	as_user_message_info.version = AS_USER_MESSAGE_INFO_VERSION_1;
	string (as_user_message_info.flags) = ""b;
	as_user_message_info.message_handle = ls_process_info.server_handle;
	got_response = "0"b;

	ls_response_ptr = null ();
	on cleanup
	     begin;
	     if ls_response_ptr ^= null ()
	     then free user_message in (system_area);
	end;

	do while (^got_response);
	     call user_message_$read_message (system_areap, as_user_message_info_ptr, code);
	     if code ^= 0
	     then do;
		call ls_report_subr_error_ (code, OUR_NAME, ls_cp_info_ptr,
		     "user_message_$read_message", TELL_USER,
		     (code ^= error_table_$no_message));
		call Hangup_and_remove (TELL_USER, TELL_INITIALIZER);
		go to EXIT;
	     end;

	     ls_response_ptr = as_user_message_info.message_ptr;
	     message_type = login_server_response_header.message_type;

	     if ls_cp_info.trace
	     then call dsa_log_manager_$trace_message (LS_CALLER_TYPE, OUR_NAME, INFO_LOG_SEVERITY, 0, null (), 0, "",
		     "Termination message (type ^d) for connection ^a.", message_type, connection_name);

	     if message_type ^= LS_TERMINATION_RESPONSE & message_type ^= LS_NEW_PROC_RESPONSE
	     then do;
		call ls_report_internal_error_ (0, OUR_NAME, ls_cp_info_ptr, "0"b,
		     "Ignoring unexpected message type ^d", message_type);
		free user_message in (system_area);
	     end;


	     else got_response = "1"b;		/* this is for us */
	end;

/* First thing, we know we want to unassign it */

	call login_service_entries
	     .unassign_connection (connection_name, ls_connection_desc.connection_handle, ""b, code);

	if ls_cp_info.trace
	then call dsa_log_manager_$trace_message (LS_CALLER_TYPE, OUR_NAME, INFO_LOG_SEVERITY, code, null (), 0, "",
		"Unassigning connection ^a.", connection_name);

	if code ^= 0
	then call ls_report_subr_error_ (code, OUR_NAME, ls_cp_info_ptr,
	     "unassign_connection", DONT_TELL_USER, DONT_TAKE_DUMP);

	if message_type = LS_TERMINATION_RESPONSE	/* process termination */
	then do;
	     if login_server_termination_response.version ^= LOGIN_SERVER_TERMINATION_RESPONSE_VERSION_1
	     then do;
		call ls_report_internal_error_ (error_table_$unimplemented_version, OUR_NAME, ls_cp_info_ptr, "1"b,
		     "Termination response message contains version ""^a"".",
		     login_server_termination_response.version);
		go to TERMINATE_FINISHED;
	     end;

	     if login_server_termination_response.process_id ^= ls_process_info.process_id
	     then do;
		call ls_report_internal_error_ (0, OUR_NAME, ls_cp_info_ptr, "0"b,
		     "Ignoring termination message for process ^12.3b, expected ^12.3b.",
		     login_server_termination_response.process_id, ls_process_info.process_id);
TERMINATE_FINISHED:
		call Hangup_and_remove (TELL_USER, TELL_INITIALIZER);
		free login_server_termination_response in (system_area);
		go to EXIT;
	     end;

	     if ls_process_info.usage_type = LS_LOGIN_USAGE
	     then do;
		if ^ls_cp_info.no_io_switches
		then do;
		     if login_server_termination_response.fatal_error
						/* fatal error */
		     then do;
			call convert_status_code_ (
			     ls_convert_as_error_code_ (login_server_termination_response.status_code), (""),
			     error_message);
			call ls_message_$print (ls_message_table_$fatal_error, error_message);

			if login_server_termination_response.fpe_caused_logout
			then call ls_message_$print (ls_message_table_$fpe_caused_logout);

			if login_server_termination_response.fpe_during_init
			then call ls_message_$print (ls_message_table_$fpe_during_init);

			if login_server_termination_response.fpe_loop
			then call ls_message_$print (ls_message_table_$fpe_loop);

			ls_process_info.fatal_error = "1"b;
						/* to remember when new process created */
		     end;

		     else if login_server_termination_response.status_code ^= 0
		     then call ls_message_$print_error (
			     ls_convert_as_error_code_ (login_server_termination_response.status_code));

		     if login_server_termination_response.offer_help
		     then call ls_message_$print (ls_message_table_$offer_help);

		     if login_server_termination_response.logout
		     then do;
			if login_server_termination_response.automatic_logout
			then call ls_message_$print (ls_message_table_$automatic_logout);

			if ^login_server_termination_response.brief
			then do;
			     person_project =
				substr (ls_process_info.process_group_id, 1,
				length (rtrim (ls_process_info.process_group_id)) - 2);
			     person = before (person_project, ".");
			     project = after (person_project, ".");
			     cpu_seconds = divide (login_server_termination_response.cpu_usage, ONE_MILLION, 17, 0);
			     cpu_minutes = divide (cpu_seconds, 60, 17, 0);
			     cpu_seconds = cpu_seconds - 60 * cpu_minutes;

			     call ls_message_$print (ls_message_table_$logout, person, project,
				date_time_$format ("system_date_time", clock (), "system_zone", "system_lang"),
				(cpu_minutes ^= 0), cpu_minutes, cpu_seconds,
				login_server_termination_response.cost);
			end;
		     end;
		end;

		if login_server_termination_response.logout
		then do;
		     if ^login_server_termination_response.hold
		     then do;			/* all done */
			call Hangup_and_remove (TELL_USER, DONT_TELL_INITIALIZER);
			validate_code = error_table_$action_not_performed;
						/* to make sure we exit */
		     end;

		     else				/* back into login dialogue to find out what he wants now */
			call Revalidate (login_server_termination_response.brief, validate_code);
		end;

		else validate_code = 0;
	     end;

	     else if ls_process_info.usage_type = LS_DIAL_USAGE
	     then do;
		if ^ls_cp_info.no_io_switches
		then if login_server_termination_response.logout
		     then call ls_message_$print (ls_message_table_$dial_logout);
		     else call ls_message_$print (ls_message_table_$dial_terminated);
		call Revalidate ("0"b, validate_code);
	     end;

	     else if ls_process_info.usage_type = LS_MC_USAGE
	     then do;				/* in this case "termination" really means operator dropped the connection */
		if ^ls_cp_info.no_io_switches
		then call ls_message_$print (ls_message_table_$dropped_by_mc, connection_name);
		call Revalidate ("0"b, validate_code);
	     end;

	     else do;				/* why would we get wakeup for connection that was neither login nor dial? */
		call ls_report_internal_error_ (0, OUR_NAME, ls_cp_info_ptr, "1"b,
		     "Unexpected usage type ^d for process termination", ls_process_info.usage_type);
		call Hangup_and_remove (TELL_USER, TELL_INITIALIZER);
		validate_code = error_table_$action_not_performed;
						/* to make sure we exit */
	     end;

	     free login_server_termination_response in (system_area);
	     if validate_code ^= 0
	     then go to EXIT;
	end;					/* terminate_response */

	else do;					/* must be new_proc */
	     if login_server_new_proc_response.version ^= LOGIN_SERVER_NEW_PROC_RESPONSE_VERSION_1
	     then do;
		call ls_report_internal_error_ (error_table_$unimplemented_version, OUR_NAME, ls_cp_info_ptr, "1"b,
		     "new_proc response message contains version ""^a"".", login_server_new_proc_response.version);
		validate_code = error_table_$action_not_performed;
						/* make sure we exit */
	     end;

	     else do;
		if ls_process_info.fatal_error
		then do;				/* tell him about new process */
		     call ls_message_$print (ls_message_table_$fpe_new_proc);
		     ls_process_info.fatal_error = "0"b;
		end;

		call Start_new_process ();
		validate_code = 0;
	     end;

	     free login_server_new_proc_response in (system_area);

	     if validate_code ^= 0
	     then go to EXIT;

	end;					/* logout_response */

/* if we got to here, we're all done and can go blocked again */

	return;
     end Terminate_handler;
%page;
Cl_intermediary:
     procedure (start_flag);

/* This is called in case of a call to cu_$cl while the current control point is running */

dcl  start_flag bit (1) parameter;

	if ls_cp_info.debug_mode
	then do;
	     ci.version = condition_info_version_1;
	     call find_condition_info_ (null, addr (ci), code);
	     if code = 0
	     then if ci.condition_name ^= "io_error" then do;
		start_flag = "0"b;			/* get to command level so we can poke around */
		return;				/* io_error is fatal, however. */
	     end;
	end;

	if ^ls_cp_info.fault_recursion
	then do;					/* try to clean up if possible */
	     ls_cp_info.fault_recursion = "1"b;		/* in case we get invoked again */
	     if ls_connection_desc_ptr ^= null ()	/* connection still active */
	     then do;
		on io_error go to IGNORE_IO_ERR;	/* Ignore errors due to disconnection. */
		call ls_message_$print (0, "Internal error. Abandoning connection.");
IGNORE_IO_ERR:	revert io_error;
		call Hangup_and_remove (TELL_USER, TELL_INITIALIZER);
	     end;
	end;

	go to EXIT;				/* no more control point */

     end Cl_intermediary;
%page;
Give_connection_to_process:
     procedure ();

/* this procedure assigns the connection to a user process, passes the entity-specific connection_info
   to the process, and wakes the process up
*/


	login_service_entries_ptr = ls_connection_desc.service_entries_ptr;
	ls_process_info_ptr = ls_connection_desc.process_info_ptr;

	call login_service_entries
	     .
	     assign_connection ((ls_connection_desc.name),
	     ls_connection_desc.connection_handle, 
	     ls_process_info.process_id, ls_process_info.process_group_id,
	     ls_process_info.initializer_handle,
	     ls_connection_desc.disconnect_event_channel,
	     ls_connection_desc.terminate_event_channel,
	     ls_process_info.usage_type, code);

	if ls_cp_info.trace
	then call dsa_log_manager_$trace_message (LS_CALLER_TYPE, OUR_NAME, INFO_LOG_SEVERITY, code, null (), 0, "",
		"Assigning connection ^a to process ^.3b.", ls_connection_desc.name, ls_process_info.process_id);

	if code ^= 0
	then do;
	     call ls_report_subr_error_ (code, OUR_NAME, ls_cp_info_ptr,
		"assign_connection", TELL_USER, DONT_TAKE_DUMP);
	     call Hangup_and_remove (TELL_USER, TELL_INITIALIZER);
	     go to EXIT;
	end;

	call Send_user_message (LS_MSG_CONNECTED, ls_connection_desc.connection_info_ptr,
	     ls_connection_desc.connection_info_len);

	return;

     end Give_connection_to_process;
%page;
Send_user_message:
     procedure (a_reason, a_info_ptr, a_info_length);

/* Sends a message to the user process to give it the connection, or inform it
   of disconnection, and send the process a wakeup so it knows to read the message. */

dcl  a_reason fixed bin parameter;
dcl  a_info_ptr pointer parameter;
dcl  a_info_length fixed bin (18) unsigned parameter;

dcl  based_connection_info (ls_connection_message_info_length) bit (36) aligned based;

dcl  time_now fixed bin (71);
dcl  unique_part_of_handle bit (54) aligned;


	if a_info_ptr ^= null ()
	then ls_connection_message_info_length = a_info_length;
	else ls_connection_message_info_length = 0;

	ls_connection_message_ptr = null ();
	on cleanup
	     begin;
	     if ls_connection_message_ptr ^= null ()
	     then free ls_connection_message in (system_area);
	end;

	allocate ls_connection_message in (system_area) set (ls_connection_message_ptr);

	unspec (ls_connection_message) = ""b;
	ls_connection_message.version = LS_CONNECTION_MESSAGE_V1;
	ls_connection_message.connection_name = connection_name;
	ls_connection_message.io_module_name = ls_connection_desc.io_module;
	ls_connection_message.connection_handle = ls_connection_desc.connection_handle;
	ls_connection_message.reason = a_reason;
	ls_connection_message.connection_info_length = ls_connection_message_info_length;
	if ls_connection_message.connection_info_length ^= 0
	then ls_connection_message.connection_info = a_info_ptr -> based_connection_info;

	if ls_process_info.usage_type = LS_DIAL_USAGE
	then do;
	     time_now = clock ();
	     unique_part_of_handle = substr (unspec (time_now), 19, 54);
	     call Send_actual_message (size (ls_connection_message_common),
		unique_part_of_handle || USER_MESSAGE_LS_CONNECTION_INFO_HANDLE_LOWER_18);
	end;

	call Send_actual_message (currentsize (ls_connection_message), USER_MESSAGE_LS_CONNECTION_INFO_HANDLE);

	if ls_cp_info.trace
	then call dsa_log_manager_$trace_message (LS_CALLER_TYPE, OUR_NAME, INFO_LOG_SEVERITY, code, null (), 0, "",
		"Sent ^[connect^;disconnect^] message to user process ^.3b for connection ^a.",
		(a_reason = LS_MSG_CONNECTED), ls_process_info.process_id, connection_name);

	free ls_connection_message in (system_area);

	event_message = 0;
	dial_event_message_ptr = addr (event_message);
	if ls_process_info.usage_type = LS_DIAL_USAGE
	then dial_event_message_handle = unique_part_of_handle;
	dial_event_message.ls_msg = "1"b;
	if a_reason = LS_MSG_CONNECTED
	then dial_event_message.control = JUST_DIALED;
	else dial_event_message.control = JUST_HUNGUP;

	call hcs_$wakeup (ls_process_info.process_id, ls_process_info.start_event_channel, event_message, code);
	if code ^= 0
	then call ls_report_subr_error_ (code, OUR_NAME, ls_cp_info_ptr,
	     "hcs_$wakeup", DONT_TELL_USER,
	     (code ^= error_table_$process_unknown));
	return;
%page;
Send_actual_message:
	procedure (a_message_length, a_message_handle);

/* internal to Send_user_message: sets up and makes the actual call to user_message_priv_$add_message */

dcl  a_message_length fixed bin (18) parameter;
dcl  a_message_handle bit (72) aligned parameter;

	     as_user_message_add_info_ptr = addr (auto_user_message_add_info);

	     unspec (as_user_message_add_info) = ""b;
	     as_user_message_add_info.version = AS_USER_MESSAGE_ADD_INFO_VERSION_1;
	     as_user_message_add_info.message_ptr = ls_connection_message_ptr;
	     as_user_message_add_info.message_length = a_message_length;
	     as_user_message_add_info.message_access_class = ls_process_info.authorization;
	     as_user_message_add_info.group_id = "";	/* because we have process id */
	     as_user_message_add_info.process_id = ls_process_info.process_id;
	     as_user_message_add_info.handle = a_message_handle;
	     as_user_message_add_info.ring = ls_process_info.initial_ring;
	     as_user_message_add_info.reader_deletes = "1"b;
						/* we're not going to keep track of it */

	     call user_message_priv_$add_message (as_user_message_add_info_ptr, code);
	     if code ^= 0
	     then call ls_report_subr_error_ (code, OUR_NAME, ls_cp_info_ptr,
		"user_message_priv_$add_message", TELL_USER, TAKE_DUMP);
	     return;

	end Send_actual_message;

     end Send_user_message;
%page;
Revalidate:
     procedure (a_brief, a_code);

dcl  a_brief bit (1) parameter;
dcl  a_code fixed bin (35) parameter;

	auto_validate_options.version = LS_VALIDATE_OPTIONS_V1;
	auto_validate_options.brief = a_brief;
	auto_validate_options.not_first = "1"b;
	auto_validate_options.mbz = ""b;

	if ^ls_cp_info.no_io_switches
	then call ioa_ ("");			/* put out blank line */
	call login_service_entries.validate_user (ls_cp_info_ptr,
	     addr (auto_validate_options), ls_process_info_ptr, a_code);

	if a_code ^= 0
	then call Remove_connection ();

	else call Give_connection_to_process ();	/* event channels are still set up from original login */

	return;
     end Revalidate;
%page;
Start_new_process:
     procedure ();

/* This procedure is called after new_proc or fatal error to update ls_process_info
   for the new process and to pass the connection to it */

	ls_process_info.authorization = login_server_new_proc_response.new_authorization;
	ls_process_info.process_id = login_server_new_proc_response.new_process_id;
	ls_process_info.start_event_channel = login_server_new_proc_response.new_start_event_channel;

	call Give_connection_to_process ();
	return;

     end Start_new_process;
%page;
Hangup_and_remove:
     procedure (tell_user, tell_initializer);

/* Disconnect the user, and discard the connection */

dcl  tell_user bit (1) aligned parameter;
dcl  tell_initializer bit (1) aligned parameter;
dcl  code fixed bin(35);

	if tell_user &
	     ^ls_cp_info.no_io_switches &
	     ls_connection_desc_ptr ^= null
	then do;
	     on io_error go to IGNORE_IO_ERR;		/* Ignore errors due to disconnection. */
	     call ls_message_$print (ls_message_table_$hangup);
IGNORE_IO_ERR: revert io_error;
	end;

	if tell_initializer
	then call Send_disconnect_request ();

	call login_service_entries.disconnect (connection_name,
	     ls_connection_desc.connection_handle, ""b, code);

	if trace_switch
	then call dsa_log_manager_$trace_message (LS_CALLER_TYPE, OUR_NAME, INFO_LOG_SEVERITY, code, null (), 0, "",
	     "Calling login_service_entries.disconnect for ^a.",
	     connection_name);

	if code ^= 0
	then call ls_report_subr_error_ (code, OUR_NAME, ls_cp_info_ptr,
	     "login_server_entries.disconnect", DONT_TELL_USER,
	     DONT_TAKE_DUMP);

	call Remove_connection ();
	return;

     end Hangup_and_remove;
%page;
Remove_connection:
     procedure ();

/* clean up data bases associated with a now-perished connection */

	if ls_cp_info.trace
	then call dsa_log_manager_$trace_message (LS_CALLER_TYPE, OUR_NAME, INFO_LOG_SEVERITY, 0, null (), 0, "",
		"Removing connection ^a at ^p.", connection_name, ls_connection_desc_ptr);

	if ls_connection_desc_ptr = null ()
	then return;				/* it's already done */

	if ls_connection_desc.connection_info_ptr ^= null ()
	then free ls_connection_desc.connection_info_ptr -> based_connection_info in (system_area);

	if ls_connection_desc.disconnect_event_channel ^= 0
	then call ipc_$delete_ev_chn (ls_connection_desc.disconnect_event_channel, (0));

	if ls_connection_desc.terminate_event_channel ^= 0
	then call ipc_$delete_ev_chn (ls_connection_desc.terminate_event_channel, (0));

	free ls_connection_desc in (system_area);

/* tell parent control point so it can reduce count of connections */

	call hcs_$wakeup (our_process_id, ls_cp_info.connection_gone_event_channel, 0, (0));

	free ls_cp_info in (system_area);

	if event_wait_list_ptr ^= null ()
	then free event_wait_list in (system_area);

	return;
     end Remove_connection;
%page;
Send_disconnect_request:
     procedure ();

/* subroutine to send "request" message to Initializer indicating that the connection has been broken */

dcl  1 auto_ls_reply_message aligned like ls_reply_message;

	if ls_process_info.initializer_handle = ""b
	then return;				/* Initializer doesn't know about this connection */

	ls_request_ptr = addr (auto_disconnect_request);
	ls_request_header.request_type = LS_DISCONNECT_REQUEST;
	ls_request_header.request_version = LS_DISCONNECT_REQUEST_VERSION_1;
	ls_request_header.header_version = LS_REQUEST_HEADER_VERSION_1;
	ls_request_header.reply_handle = ""b;
	ls_request_header.reply_event_channel = 0;	/* let send_ls_request_ make one */
	ls_request_header.pad1 = ""b;

	login_server_disconnect_request.handle = ls_process_info.initializer_handle;
	login_server_disconnect_request.process_id = ls_process_info.process_id;
	login_server_disconnect_request.connection_name = ls_connection_desc.name;

	ls_reply_message_ptr = addr (auto_ls_reply_message);

	call send_ls_request_ (ls_request_ptr, size (auto_disconnect_request), ls_reply_message_ptr, code);

	if code ^= 0
	then call ls_report_subr_error_ (code, OUR_NAME, ls_cp_info_ptr,
	     "send_ls_request_", TELL_USER, TAKE_DUMP);

	else if ls_reply_message.code ^= 0
	then call ls_report_internal_error_ (code, OUR_NAME, ls_cp_info_ptr,
	     "0"b, "In reply to disconnect request.");

	return;

     end Send_disconnect_request;
%page;
%include as_user_message_add;
%page;
%include as_user_message_info;
%page;
%include condition_info;
dcl  1 ci aligned like condition_info;
%page;
%include condition_info_header;
%page;
%include cpm_entries;
%page;
%include dial_event_message;
%page;
%include dsa_log_constants;
%page;
%include event_wait_info;
%page;
%include event_wait_list;
%page;
%include login_server_messages;
%page;
%include login_service_entries;
%page;
%include ls_connection_desc;
%page;
%include ls_connection_message;
%page;
%include ls_cp_info;
%page;
%include ls_process_info;
%page;
%include ls_usage_types;
%page;
%include user_message_handles;

     end login_server_connection_;
