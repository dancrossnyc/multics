/****^  ********************************************
        *                                          *
        * Copyright, (C) Honeywell Bull Inc., 1987 *
        *                                          *
        ******************************************** */

/****^  HISTORY COMMENTS:
  1) change(85-08-01,Coren), approve(87-07-10,MCR7679), audit(07-02-27,GDixon),
     install(87-08-04,MR12.1-1055):
     Initial coding.
  2) change(87-03-18,GDixon), approve(87-07-10,MCR7679),
     audit(87-05-19,Parisek), install(87-08-04,MR12.1-1055):
     Correct coding standard violations.
                                                   END HISTORY COMMENTS */

/* format: style4,delnl,insnl,^ifthendo */

ls_message_:
     procedure ();

/* This procedure contains utility entrypoints for printing messages in a login server.
*/

/* AUTOMATIC */

dcl  arg_list_ptr pointer;
dcl  arg_count fixed bin;
dcl  argl fixed bin (21);
dcl  argp pointer;
dcl  code fixed bin (35);
dcl  nnl_switch bit (1) aligned;
dcl  output_message char (512);
dcl  output_message_len fixed bin (21);
dcl  error_message char (100) aligned;

dcl  message_locator_ptr pointer;
dcl  message_ptr pointer;


/* BASED */

dcl  fixed_bin_35_based fixed bin (35) based;

dcl  1 message_locator aligned based (message_locator_ptr),
       2 segno bit (18) unaligned,
       2 offset bit (18) unaligned;

dcl  1 message aligned based (message_ptr),
       2 length fixed bin (9) unsigned unaligned,
       2 string char (message_length refer (message.length)) unaligned;


/* ENTRIES */

dcl  cu_$arg_count entry (fixed bin, fixed bin (35));
dcl  cu_$arg_list_ptr entry (ptr);
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl  convert_status_code_ entry (fixed bin (35), char (8) aligned, char (100) aligned);
dcl  ioa_ entry () options (variable);
dcl  ioa_$general_rs entry (ptr, fixed bin, fixed bin, char (*), fixed bin (21), bit (1) aligned, bit (1) aligned);
dcl  ioa_$general_rs_control_string
	entry (ptr, char (*), fixed bin, char (*), fixed bin (21), bit (1) aligned, bit (1) aligned);
dcl  ioa_$nnl entry () options (variable);


/* BUILTINS AND CONDITIONS */

dcl  (baseptr, ptr) builtin;

dcl  io_error condition;
%page;
print:
     entry () options (variable);

/* This entry is called to print messages derived from ls_message_table_. The
   actual calling sequence is:

   call ls_message_$print (message_locator, ioa_args...);

   where message_locator is an error-code-like object (see the declaration of
   message_locator, above) which is used to find an ACC string (see the declaration
   of message) which is actually an ioa_ control string.
*/

	nnl_switch = "0"b;
	go to PRINT_JOIN;

print_nnl:
     entry () options (variable);

/* same as print but suppresses the trailing newline */

	nnl_switch = "1"b;

PRINT_JOIN:
	call cu_$arg_list_ptr (arg_list_ptr);
	call cu_$arg_count (arg_count, (0));

	call cu_$arg_ptr (1, message_locator_ptr, argl, code);
	if code ^= 0
	then signal io_error;			/* this would be pretty outrageous */

	message_ptr = ptr (baseptr (message_locator.segno), message_locator.offset);

	if arg_count = 1				/* no data args, just print the string */
	then if nnl_switch
	     then call ioa_$nnl (message.string);
	     else call ioa_ (message.string);

	else do;					/* send ioa_ the control string and let it apply the data args */
	     call ioa_$general_rs_control_string (arg_list_ptr, message.string, 2, output_message, output_message_len,
		"0"b, "0"b);

	     begin;

dcl  actual_output_message char (output_message_len) defined (output_message);

		if nnl_switch
		then call ioa_$nnl ("^a", actual_output_message);
		else call ioa_ ("^a", actual_output_message);
	     end;

	end;

	return;
%page;
print_error:
     entry () options (variable);

/* this entry is used to print error messages, with an error code supplied.
   The calling sequence is:

   call ls_message_$print_error (code, ioa_control_string, ioa_args...);

   where the ioa_control_string and ioa_args are optional.
*/

	call cu_$arg_count (arg_count, (0));

	call cu_$arg_ptr (1, argp, argl, code);
	if code ^= 0
	then signal io_error;			/* unlikely to have been called with no arguments */

	call convert_status_code_ (argp -> fixed_bin_35_based, (""), error_message);

	if arg_count > 1
	then do;
	     call cu_$arg_list_ptr (arg_list_ptr);
	     call ioa_$general_rs (arg_list_ptr, 2, 3, output_message, output_message_len, "0"b, "0"b);
	end;

	else do;
	     output_message = "";
	     output_message_len = 0;
	end;

	begin;

dcl  actual_output_message char (output_message_len) defined (output_message);

	     call ioa_ ("^[^a ^;^s^]^a", (error_message ^= ""), error_message, actual_output_message);

	end;

	return;

     end ls_message_;
