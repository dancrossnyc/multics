/****^  ********************************************
        *                                          *
        * Copyright, (C) Honeywell Bull Inc., 1987 *
        *                                          *
        ******************************************** */

/****^  HISTORY COMMENTS:
  1) change(85-03-01,Coren), approve(87-06-25,MCR7679), audit(87-02-28,GDixon),
     install(87-08-04,MR12.1-1055):
     Initial coding.
  2) change(87-02-28,GDixon), approve(87-06-25,MCR7679),
     audit(87-05-19,Parisek), install(87-08-04,MR12.1-1055):
      A) Correct coding standard violations, cleanup handler errors.
      B) Pass ls_ssu_info.(login connect)_info_dir on to endpoint control
         points.
      C) Add list_endpoints (lsep) request to login server.
      D) Change quit request to work correctly if ls_ssu_info.n_endpoints
         ever goes negative.
      E) Make call to login_service_entries.stop_listen work correctly.
         (I'm not sure how this problem was fixed, but it was.) (dsa 73)
  3) change(87-04-13,GDixon), approve(87-06-25,MCR7679),
     audit(87-05-19,Parisek), install(87-08-04,MR12.1-1055):
     Correct overlength comments.
  4) change(87-05-08,GDixon), approve(87-06-25,MCR7679),
     audit(87-05-19,Parisek), install(87-08-04,MR12.1-1055):
     Change control point comments to include endpoint name as well as
     connection name, since same Login Server process may be listening to
     several endpoints which provide indistinguishable connection names.
  5) change(87-05-08,GDixon), approve(87-06-25,MCR7679),
     audit(87-05-19,Parisek), install(87-08-04,MR12.1-1055):
     Add the endpoints_listening request.
  6) change(87-05-14,GDixon), approve(87-06-25,MCR7679),
     audit(87-05-19,Parisek), install(87-08-04,MR12.1-1055):
     Correct control point comments.
  7) change(87-05-18,GDixon), approve(87-06-25,MCR7679),
     audit(87-05-19,Parisek), install(87-08-04,MR12.1-1055):
      A) Use new calling sequence of login_service_entries.listen.
      B) Set ls_connection_desc.minimum_ring.
  8) change(87-06-08,GDixon), approve(87-06-25,MCR7679),
     audit(87-07-06,Parisek), install(87-08-04,MR12.1-1055):
      A) Correct declaration of rv, the active request return value.
  9) change(87-06-25,GDixon), approve(87-06-25,MCR7679),
     audit(87-07-06,Parisek), install(87-08-04,MR12.1-1055):
      A) Add trace calls to record errors from control points.
      B) Check ls_ssu_info.call_probe before entering probe upon error from
         control points.
      C) Print "Entering probe:" when probe is called, to make it more
         obvious that probe has been entered.
                                                   END HISTORY COMMENTS */

/* format: style4,delnl,insnl,^ifthendo */

login_server_:
     procedure ();

	return;					/* main entry point is never used */

/* subroutine that processes requests issued to login server. The "start_service" and "stop_service"
   entrypoints are invoked via ssu_$listen. The "listen" entry point is the initial procedure
   for the control point that listens on a given endpoint.
*/

/* PARAMETERS */

dcl  a_sci_ptr pointer parameter;
dcl  a_info_ptr pointer parameter;


/* AUTOMATIC */

dcl  access_class_range (2) bit (72) aligned;
dcl  af_sw bit(1) aligned;
dcl  arg_count fixed bin;
dcl  attach_description char (512) varying;
dcl  code fixed bin (35);
dcl  connection_gone_event_channel fixed bin (71);
dcl  connection_handle fixed bin (35);
dcl  connection_info_len fixed bin (18) unsigned;
dcl  connection_info_ptr pointer;
dcl  connection_name char (32);
dcl  control_point_id bit (36) aligned;
dcl  disconnect_event_channel fixed bin (71);
dcl  endpoint_name char (32);
dcl  ep_found bit (1);
dcl  event_wait_info_ptr pointer;
dcl  last_endpoint_p pointer;
dcl  last_listen_failure_time fixed bin (71);
dcl  minimum_ring fixed bin;
dcl  n_listening fixed bin;
dcl  n_listen_failures fixed bin;
dcl  print_error_event_channel fixed bin (71);
dcl  quit_ok bit (1);
dcl  reply_error_event_channel fixed bin (71);
dcl  rv_len fixed bin(21);
dcl  rv_ptr ptr;
dcl  sci_ptr pointer;
dcl  time_now fixed bin (71);

/* AUTOMATIC STRUCTURES */

dcl  1 auto_event_channel aligned like event_wait_channel;

dcl  1 auto_ipc_create_arg aligned like ipc_create_arg_structure;

/* BASED */

dcl  rv char (rv_len) varying based (rv_ptr);
dcl  system_area area based (system_areap);

/* ENTRIES */

dcl  command_query_$yes_no entry () options (variable);
dcl  dsa_log_manager_$trace_message entry options (variable);
dcl  get_process_id_ entry () returns (bit (36));
dcl  get_system_free_area_ entry () returns (ptr);
dcl  hcs_$wakeup entry (bit (36) aligned, fixed bin (71), fixed bin (71), fixed bin (35));
dcl  ioa_ entry() options(variable);
dcl  ioa_$ioa_switch entry () options (variable);
dcl  ipc_$block entry (ptr, ptr, fixed bin (35));
dcl  ipc_$create_event_channel entry (pointer, fixed bin (71), fixed bin (35));
dcl  ipc_$delete_ev_chn entry (fixed bin (71), fixed bin (35));
dcl  login_server_connection_ entry (pointer);
dcl  login_server_$listen entry (pointer);
dcl  net_info_$get_service_entries entry (char (*), char (*), pointer, fixed bin (35));
dcl  probe entry options (variable);
dcl  ssu_$arg_count entry (ptr, fixed bin);
dcl  ssu_$arg_ptr entry (ptr, fixed bin, ptr, fixed bin (21));
dcl  ssu_$abort_line entry () options (variable);
dcl  ssu_$print_message entry () options (variable);
dcl  ssu_$return_arg entry (ptr, fixed bin, bit(1) aligned, ptr, fixed bin(21));
dcl  ssu_requests_$quit entry (ptr, ptr);

/* EXTERNAL STATIC */

dcl  (
     error_table_$listen_stopped,
     error_table_$wrong_no_of_args
     ) fixed bin (35) external static;

dcl  iox_$error_output pointer external static;


/* INTERNAL STATIC */

dcl  system_areap pointer internal static initial (null ());

dcl  NORMAL_PRIORITY fixed bin internal static options (constant) initial (1);
dcl  ERROR_PRIORITY fixed bin internal static options (constant) initial (1);
dcl  OUR_NAME char (13) internal static options (constant) initial ("login_server_");
dcl  MAX_LISTEN_FAILURES fixed bin internal static options (constant) initial (4);
dcl  LISTEN_FAILURE_TIME_LIMIT fixed bin (71) internal static options (constant) initial (60 * 1000000);
						/* one minute */


/* BUILTINS & CONDITIONS */

dcl  (addr, before, clock, length, null, rtrim, string, substr, unspec) builtin;

dcl  cleanup condition;
%page;
start_service:
     entry (a_sci_ptr, a_info_ptr);

/* "start_login_service" request: sets up a control point to listen on the specified endpoint */

	sci_ptr = a_sci_ptr;
	ls_ssu_info_ptr = a_info_ptr;

	call Setup (ep_found);

	if ep_found
	then if ls_endpoint_list.awaiting_destruction
	     then do;				/* not active at the moment, tell it to start up again */
		call hcs_$wakeup ((get_process_id_ ()), ls_endpoint_list.restart_event_channel, 0, code);
		if code ^= 0
		then call ssu_$abort_line (sci_ptr, code, "Could not send wakeup to restart ^a", endpoint_name);
		return;				/* that's it for this request */
	     end;

	     else call ssu_$abort_line (sci_ptr, 0, "login service has already been started for ^a", endpoint_name);

	if system_areap = null ()
	then system_areap = get_system_free_area_ ();
	ccpi_ptr, ls_endpoint_listp, ls_listen_info_ptr = null ();
	on cleanup call Remove_endpoint ();

/* make an entry for it */

	allocate ls_endpoint_list in (system_area) set (ls_endpoint_listp);

	if ls_ssu_info.trace
	then call dsa_log_manager_$trace_message (LS_CALLER_TYPE, OUR_NAME, INFO_LOG_SEVERITY, 0, null (), 0, "",
		"Adding endpoint ^a at ^p.", endpoint_name, ls_endpoint_listp);

	unspec (ls_endpoint_list) = ""b;
	ls_endpoint_list.version = LS_ENDPOINT_LIST_V1;
	ls_endpoint_list.name = endpoint_name;
	ls_endpoint_list.next_endpoint = null ();
	ls_endpoint_list.control_point_id = ""b;
	ls_endpoint_list.service_entries_ptr = null ();

/* add it to tail of list */

	if ls_ssu_info.last_endpoint_ptr = null ()
	then do;
	     ls_ssu_info.first_endpoint_ptr, ls_ssu_info.last_endpoint_ptr = ls_endpoint_listp;
	     ls_endpoint_list.prev_endpoint = null ();
	end;

	else do;
	     last_endpoint_p = ls_ssu_info.last_endpoint_ptr;
	     last_endpoint_p -> ls_endpoint_list.next_endpoint, ls_ssu_info.last_endpoint_ptr = ls_endpoint_listp;
	     ls_endpoint_list.prev_endpoint = last_endpoint_p;
	end;

	ls_ssu_info.n_endpoints = ls_ssu_info.n_endpoints + 1;

/* now set up a control point to listen on it */

	allocate ls_listen_info in (system_area) set (ls_listen_info_ptr);

	ls_listen_info.version = LS_LISTEN_INFO_V1;
	ls_listen_info.sci_ptr = sci_ptr;
	ls_listen_info.ssu_info_ptr = ls_ssu_info_ptr;
	ls_listen_info.endpoint_list_ptr = ls_endpoint_listp;

	ccpi_user_io_attach_desc_length = 0;		/* we're not supplying an attach description */
	allocate create_control_point_info in (system_area) set (ccpi_ptr);

	create_control_point_info.version = CREATE_CONTROL_POINT_INFO_VERSION_1;
	create_control_point_info.comment = rtrim (endpoint_name) ||
	     ": Endpoint Listener";
	create_control_point_info.initproc.entry = login_server_$listen;
	create_control_point_info.initproc.info_ptr = ls_listen_info_ptr;
	create_control_point_info.priority = 1;
	string (create_control_point_info.flags) = ""b;
	create_control_point_info.independent = "1"b;
	create_control_point_info.header.pad = "0"b;

	call cpm_$create (ccpi_ptr, ls_endpoint_list.control_point_id, code);
	free create_control_point_info in (system_area);	/* don't need this any more in any case */

	if code ^= 0
	then do;
	     call Remove_endpoint ();
	     call ssu_$abort_line (sci_ptr, code, "Could not create control point to listen on ^a", endpoint_name);
	end;

	else do;
	     call cpm_$start (ls_endpoint_list.control_point_id, code);

	     if code ^= 0
	     then do;
		call cpm_$destroy (ls_endpoint_list.control_point_id, (0));
		call Remove_endpoint ();
		call ssu_$abort_line (sci_ptr, code, "Could not start control point to listen on ^a", endpoint_name);
	     end;
	end;

	return;					/* all done with start_login_service */
%page;
stop_service:
     entry (a_sci_ptr, a_info_ptr);

/* "stop_login_service" request: stop listening on a specified andpoint */

	sci_ptr = a_sci_ptr;
	ls_ssu_info_ptr = a_info_ptr;
	ccpi_ptr, ls_endpoint_listp, ls_listen_info_ptr = null ();

	call Setup (ep_found);

	if ^ep_found
	then call ssu_$abort_line (sci_ptr, 0, "^a is not active.", endpoint_name);

	login_service_entries_ptr = ls_endpoint_list.service_entries_ptr;
	if system_areap = null ()
	then system_areap = get_system_free_area_ ();

	if login_service_entries_ptr ^= null ()
	then do;

	     call login_service_entries.stop_listen (endpoint_name, code);

	     if code ^= 0
	     then do;
		call ssu_$print_message (sci_ptr, code, "Could not send stop_listen to ^a", endpoint_name);

		if ls_endpoint_list.n_connections = 0
		then do;
		     call cpm_$destroy (ls_endpoint_list.control_point_id, code);
						/* if the stop_listen succeeds, */
		     if ls_ssu_info.trace		/* it will destroy itself when it gets the wakeup */
		     then call dsa_log_manager_$trace_message (LS_CALLER_TYPE, OUR_NAME, INFO_LOG_SEVERITY, code,
			     null (), 0, "", "Destroying control point ^.3b", ls_endpoint_list.control_point_id);
		end;
	     end;
	end;

	else if ls_endpoint_list.control_point_id ^= ""b
	then do;
	     call cpm_$destroy (ls_endpoint_list.control_point_id, code);

	     if ls_ssu_info.trace
	     then call dsa_log_manager_$trace_message (LS_CALLER_TYPE, OUR_NAME, INFO_LOG_SEVERITY, code, null (), 0,
		     "", "Destroying control point ^.3b", ls_endpoint_list.control_point_id);

	     call Remove_endpoint ();			/* take it out of the list */
	end;

	return;					/* done with stop_login_service */
%page;
quit:
     entry (a_sci_ptr, a_info_ptr);

/* "quit" request exits the login server. If there are any outstanding endpoints,
   and more particularly, active connections, the user may not really want to do
   this, so we will ask. If there aren't, or he says yes, pass it on to the standard
   ssu_ quit request.
*/

	sci_ptr = a_sci_ptr;
	ls_ssu_info_ptr = a_info_ptr;

	if ls_ssu_info.n_endpoints <= 0
	then quit_ok = "1"b;			/* we weren't doing anything anyway */

	else do;
	     call ssu_$print_message (sci_ptr, 0, "The following endpoints are active:");

	     do ls_endpoint_listp = ls_ssu_info.first_endpoint_ptr repeat (ls_endpoint_list.next_endpoint)
		while (ls_endpoint_listp ^= null ());
		call ssu_$print_message (sci_ptr, 0, "^-^a (^d connections)", ls_endpoint_list.name,
		     ls_endpoint_list.n_connections);
	     end;

	     call command_query_$yes_no (quit_ok, 0, OUR_NAME,
		"Outstanding connections will not be cleaned up properly.", "Do you want to quit?");
	end;

	if quit_ok
	then call ssu_requests_$quit (sci_ptr, ls_ssu_info_ptr);
	else call ssu_$print_message (sci_ptr, 0,
	     "Please use stop_login_service to stop listening to the endpoints.");

	return;
%page;
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*							       */
/* This entry returns/prints a count of endpoints being listened to.	       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

endpoints_listening:
     entry (a_sci_ptr, a_info_ptr);
     
	sci_ptr = a_sci_ptr;
	ls_ssu_info_ptr = a_info_ptr;
	
	call ssu_$return_arg (sci_ptr, arg_count, af_sw, rv_ptr, rv_len);

	n_listening = 0;
	if ls_ssu_info.n_endpoints ^= 0
	then do;
	     do ls_endpoint_listp = ls_ssu_info.first_endpoint_ptr repeat (ls_endpoint_list.next_endpoint)
		while (ls_endpoint_listp ^= null);
	          if ^ls_endpoint_list.awaiting_destruction
		then n_listening = n_listening + 1;
	     end;
	end;

          if af_sw
	then if n_listening > 0
	     then rv = "true";
	     else rv = "false";
	else call ioa_ ("^d ^[endpoint is^;endpoints are^] listening.",
	     n_listening, n_listening = 1);
	return;

/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/*						         	       */
/* This entry lists endpoints which have been started, and those which have  */
/* subsequently been stopped but are still awaiting destruction.	       */
/*							       */
/* *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

list_endpoints:
     entry (a_sci_ptr, a_info_ptr);

	sci_ptr = a_sci_ptr;
	ls_ssu_info_ptr = a_info_ptr;
	
	if ls_ssu_info.n_endpoints = 0
	then call ioa_ ("No endpoints are active.^/");
	else do;
	     call ioa_ ("End Point Name^33tComments");
	     do ls_endpoint_listp = ls_ssu_info.first_endpoint_ptr repeat (ls_endpoint_list.next_endpoint)
		while (ls_endpoint_listp ^= null);
		call ioa_ ("^32a ^3d connections^[, end point stopped^]", ls_endpoint_list.name,
		     ls_endpoint_list.n_connections, ls_endpoint_list.awaiting_destruction);
	     end;
	end;
	return;
%page;
listen:
     entry (a_info_ptr);

/* This entry is invoked as the initial procedure of a control point created to listen on a particular endpoint.
   It issues a "listen" call, which goes blocked until a connection is established,
   whereupon a new control point is created to engage in dialogue over that particular connection
   (and ultimately to assign the connection to a user process, if appropriate).
   Having created such a control point, it goes back and issues another listen.
   This loop continues until and unless the listen call returns a non-zero status code.
*/

	ls_listen_info_ptr = a_info_ptr;
	sci_ptr = ls_listen_info.sci_ptr;
	ls_ssu_info_ptr = ls_listen_info.ssu_info_ptr;
	ls_endpoint_listp = ls_listen_info.endpoint_list_ptr;
	ccpi_ptr = null ();
	if system_areap = null ()
	then system_areap = get_system_free_area_ ();

	on cleanup call Remove_endpoint ();

	endpoint_name = ls_endpoint_list.name;

	auto_ipc_create_arg.version = ipc_create_arg_structure_v1;
	auto_ipc_create_arg.channel_type = CALL_EVENT_CHANNEL_TYPE;
	auto_ipc_create_arg.call_entry = error_message_handler;
	auto_ipc_create_arg.call_data_ptr = null ();
	auto_ipc_create_arg.call_priority = ERROR_PRIORITY;

	call ipc_$create_event_channel (addr (auto_ipc_create_arg), print_error_event_channel, code);
	if code ^= 0
	then do;
	     call ssu_$print_message (sci_ptr, code, "Could not create event channel for error messages.");
	     call Remove_endpoint ();
	     return;
	end;

	auto_ipc_create_arg.channel_type = WAIT_EVENT_CHANNEL_TYPE;
	call ipc_$create_event_channel (addr (auto_ipc_create_arg), reply_error_event_channel, code);
	if code ^= 0
	then do;
	     call ssu_$print_message (sci_ptr, code, "Could not create reply event channel for error messages.");
	     call Remove_endpoint ();
	     return;
	end;

	allocate login_service_entries in (system_area) set (login_service_entries_ptr);
	login_service_entries.version = LS_ENTRIES_V1;

	call net_info_$get_service_entries ("login_service", endpoint_name, login_service_entries_ptr, code);

	if code ^= 0
	then do;
	     call ssu_$print_message (sci_ptr, code, "Could not get service entries for ^a", endpoint_name);
	     call Remove_endpoint ();
	     return;				/* thus destroying the current control point */
	end;
	auto_ipc_create_arg.channel_type = CALL_EVENT_CHANNEL_TYPE;
	auto_ipc_create_arg.call_entry = Connection_gone_handler;
	auto_ipc_create_arg.call_data_ptr = ls_endpoint_listp;
	auto_ipc_create_arg.call_priority = NORMAL_PRIORITY;
	call ipc_$create_event_channel (addr (auto_ipc_create_arg), connection_gone_event_channel, code);

	if code ^= 0
	then do;
	     call ssu_$print_message (sci_ptr, code, "Could not create connection_gone event channel for ^a",
		endpoint_name);
	     call Remove_endpoint;
	     return;
	end;

	auto_ipc_create_arg.channel_type = WAIT_EVENT_CHANNEL_TYPE;
	call ipc_$create_event_channel (addr (auto_ipc_create_arg), ls_endpoint_list.restart_event_channel, code);

	if code ^= 0
	then do;
	     call ssu_$print_message (sci_ptr, code, "Could not create restart event channel for ^a", endpoint_name);
	     call Remove_endpoint;
	     return;
	end;

	ls_endpoint_list.service_entries_ptr = login_service_entries_ptr;

/* Here's the listen loop. Until something makes us stop, we will come back here
   to listen after passing off each established connection. If a listen fails for some
   reason other than a stop_login_service request (which causes the code error_table_$listen_stopped
   to be returned), we will try it again until we get MAX_LISTEN_FAILURES within LISTEN_FAILURE_TIME_LIMIT.
*/

CALL_LISTEN:
	last_listen_failure_time = 0;
	n_listen_failures = 0;

	auto_ipc_create_arg.channel_type = WAIT_EVENT_CHANNEL_TYPE;
	call ipc_$create_event_channel (addr (auto_ipc_create_arg), disconnect_event_channel, code);
						/* dialogue control point may convert */
						/*  this to an event call channel */
	if code ^= 0
	then do;
	     call ssu_$print_message (sci_ptr, code, "Could not create disconnect event channel for ^a", endpoint_name);
	     call Remove_endpoint ();
	     return;				/* and die */
	end;

RETRY_LISTEN:
	call login_service_entries.listen (
	     endpoint_name, system_areap, disconnect_event_channel,
	     connection_name, connection_handle, connection_info_ptr,
	     connection_info_len, attach_description, access_class_range,
	     minimum_ring, code);

	if ls_ssu_info.trace
	then call dsa_log_manager_$trace_message (LS_CALLER_TYPE, OUR_NAME, INFO_LOG_SEVERITY, code, null (), 0, "",
		"Listen on ^a.", endpoint_name);

	if code ^= 0
	then do;

/* if code indicates that this is the result of a "stop_listen" request, all is cool */

	     if code ^= error_table_$listen_stopped	/* otherwise, it's worth reporting */
	     then do;
		call ssu_$print_message (sci_ptr, code, "Listen failed on ^a", endpoint_name);

		time_now = clock ();		/* and possibly retrying */
		if time_now - last_listen_failure_time > LISTEN_FAILURE_TIME_LIMIT
		then do;				/* hasn't been one in a while, start count */
		     last_listen_failure_time = time_now;
		     n_listen_failures = 1;
		     go to RETRY_LISTEN;
		end;

		else do;				/* how many have there been? */
		     if n_listen_failures < MAX_LISTEN_FAILURES
		     then do;			/* not too many yet */
			n_listen_failures = n_listen_failures + 1;
			go to RETRY_LISTEN;
		     end;

		     else call ssu_$print_message (sci_ptr, 0, "Too many listen failures. Abandoning endpoint ^a.",
			     endpoint_name);	/* guess it's hopeless. */
		end;				/* fall through to code to wrap up endpoint */
	     end;

/* if there are any outstanding connections created for this endpoint, we can't
   go away yet; so check, and if so, just wait (they'll wake us up when they're
   about to die) */

	     if ls_endpoint_list.n_connections > 0
	     then do;
		ls_endpoint_list.awaiting_destruction = "1"b;
		auto_event_channel.channel_id = ls_endpoint_list.restart_event_channel;
		call ipc_$block (addr (auto_event_channel), event_wait_info_ptr, code);

/* if a fresh start_login_service request is entered for this endpoint while we're waiting,
   we'll just go back and listen again */

		ls_endpoint_list.awaiting_destruction = "0"b;
						/* new lease on life */
		go to CALL_LISTEN;
	     end;

DESTROY_CP:					/* connection_gone_handler branches here */
	     call Remove_endpoint ();			/* if the connection count goes to 0 */
	     if ls_ssu_info.trace
	     then call dsa_log_manager_$trace_message (LS_CALLER_TYPE, OUR_NAME, INFO_LOG_SEVERITY, 0, null (), 0, "",
		     "Return from control point ^.3b (endpoint ^a).", get_control_point_id_ (), endpoint_name);

	     return;				/* THIS IS NORMAL EXIT */
	end;

/* we have a connection now, so set up all the info for the control point */

	revert cleanup;
	ccpi_ptr, ls_error_info_ptr, ls_cp_info_ptr, ls_connection_desc_ptr = null ();
	on cleanup call Remove_connection ();

	allocate ls_connection_desc in (system_area) set (ls_connection_desc_ptr);

	if ls_ssu_info.trace
	then call dsa_log_manager_$trace_message (LS_CALLER_TYPE, OUR_NAME, INFO_LOG_SEVERITY, 0, null (), 0, "",
		"Added connection ^a at ^p.", connection_name, ls_connection_desc_ptr);

	ls_connection_desc.version = LS_CONNECTION_DESC_V1;
	ls_connection_desc.name = connection_name;
	ls_connection_desc.endpoint_name = endpoint_name;
	if attach_description ^= ""
	then ls_connection_desc.io_module = before (attach_description, " ");
	else ls_connection_desc.io_module = "";
	ls_connection_desc.connection_handle = connection_handle;
	ls_connection_desc.disconnect_event_channel = disconnect_event_channel;
	ls_connection_desc.service_entries_ptr = login_service_entries_ptr;
	ls_connection_desc.connection_info_ptr = connection_info_ptr;
	ls_connection_desc.connection_info_len = connection_info_len;
	ls_connection_desc.access_class_range = access_class_range;
	ls_connection_desc.minimum_ring = minimum_ring;
	ls_connection_desc.terminate_event_channel = 0;
	ls_connection_desc.process_info_ptr = null ();

	allocate ls_cp_info in (system_area) set (ls_cp_info_ptr);

	ls_cp_info.version = LS_CP_INFO_V1;
	ls_cp_info.connection_desc_ptr = ls_connection_desc_ptr;
	ls_cp_info.error_event_channel = print_error_event_channel;
	ls_cp_info.connection_gone_event_channel = connection_gone_event_channel;
	string (ls_cp_info.flags) = ""b;
	ls_cp_info.flags = ls_ssu_info.flags, by name;
	ls_cp_info.no_io_switches = (attach_description = "");
	ls_cp_info.answer_table_ptr = ls_ssu_info.answer_table_ptr;
	ls_cp_info.installation_parms_ptr = ls_ssu_info.installation_parms_ptr;
	ls_cp_info.login_info_dir = ls_ssu_info.login_info_dir;
	ls_cp_info.connect_info_dir = ls_ssu_info.connect_info_dir;

	allocate ls_error_info in (system_area) set (ls_error_info_ptr);
	ls_cp_info.error_info_ptr = ls_error_info_ptr;
	ls_error_info.version = LS_ERROR_INFO_V1;
	ls_error_info.reply_event_channel = reply_error_event_channel;
	ls_error_info.caller_name, ls_error_info.error_message = "";

	ccpi_user_io_attach_desc_length = length (rtrim (attach_description));
	allocate create_control_point_info in (system_area) set (ccpi_ptr);

	create_control_point_info.version = CREATE_CONTROL_POINT_INFO_VERSION_1;
	create_control_point_info.comment = rtrim(ls_endpoint_list.name) ||
	     ": " || rtrim(connection_name) || " login dialogue";
	create_control_point_info.initproc.entry = login_server_connection_;
	create_control_point_info.initproc.info_ptr = ls_cp_info_ptr;
	create_control_point_info.priority = 1;
	string (create_control_point_info.flags) = ""b;
	create_control_point_info.independent = "1"b;
	if attach_description ^= ""
	then do;
	     create_control_point_info.separate_standard_iocbs = "1"b;
	     create_control_point_info.user_io_attach_desc_given = "1"b;
	end;

	create_control_point_info.header.pad = ""b;
	create_control_point_info.user_io_attach_desc = attach_description;

	call cpm_$create (ccpi_ptr, control_point_id, code);
	free create_control_point_info in (system_area);

	if code ^= 0
	then do;
	     call ssu_$print_message (sci_ptr, code, "Could not create control point for dialogue on ^a",
		connection_name);
	     call Remove_connection ();
	end;

	else do;
	     revert cleanup;
	     call cpm_$start (control_point_id, code);
	     if code ^= 0
	     then do;
		call ssu_$print_message (sci_ptr, "Could not start control point for dialogue on ^a", connection_name)
		     ;
		call cpm_$destroy (control_point_id, (0));
						/* we don't have much use for this any more */
		call Remove_connection ();
	     end;

	     else ls_endpoint_list.n_connections = ls_endpoint_list.n_connections + 1;
	end;

	go to CALL_LISTEN;				/* go around again to listen for another connection */
%page;
error_message_handler:
     entry (a_info_ptr);

/* event call handler for printing error messages intended for the daemon, but
   generated by control points for the individual connections. The event message
   is actually a pointer to the ls_cp_info. The calling control point waits for
   a wakeup from this handler before resuming.
*/

	event_call_info_ptr = a_info_ptr;
	unspec (ls_cp_info_ptr) = unspec (event_call_info.message);
	ls_error_info_ptr = ls_cp_info.error_info_ptr;
	ls_connection_desc_ptr = ls_cp_info.connection_desc_ptr;

	call ioa_$ioa_switch (iox_$error_output, "^a (^a): ^a", ls_error_info.caller_name, ls_connection_desc.name,
	     substr (ls_error_info.error_message, 1, ls_error_info.error_message_length));

	if ls_cp_info.trace
	then call dsa_log_manager_$trace_message (LS_CALLER_TYPE, OUR_NAME, INFO_LOG_SEVERITY, 0, null (), 0, "",
	     "Error: ^a (^a): ^a", ls_error_info.caller_name, ls_connection_desc.name,
	     substr (ls_error_info.error_message, 1, ls_error_info.error_message_length));

	if ls_cp_info.call_probe
	then do;
	     call ioa_$ioa_switch (iox_$error_output, "Entering probe:^/");
	     call probe ();
	end;

/* tell calling control point it's OK to run again */

	call hcs_$wakeup (event_call_info.sender, ls_error_info.reply_event_channel, 0, (0));
	return;
%page;
Connection_gone_handler:
     procedure (a_info_ptr);

/* event call handler invoked when a child control point is on the way out and has
   deleted its connection. This allows us to decrement the count of outstanding
   connections; if it goes to 0 and we were waiting to be able destroy ourselves,
   then we will do so. */

dcl  a_info_ptr pointer parameter;
dcl  ls_end_listp pointer;
dcl  1 ls_end_list aligned like ls_endpoint_list based (ls_end_listp);

	event_call_info_ptr = a_info_ptr;
	ls_end_listp = event_call_info.data_ptr;	/* set our own pointer to ls_endpoint_list struct */

	ls_end_list.n_connections = ls_end_list.n_connections - 1;
	if ls_end_list.n_connections <= 0
	then if ls_end_list.awaiting_destruction
	     then go to DESTROY_CP;			/* we can wrap it up now */

	return;					/* otherwise, as you were */
     end Connection_gone_handler;
%page;
Setup:
     procedure (found);

/* Process the request argument and find out if the specified endpoint is listed already. */

/* This procedure sets the outer block's variables "endpoint_name" and "ls_endpoint_listp" */

dcl  found bit (1) parameter;

dcl  cur_ls_endpoint_listp ptr;
dcl  nargs fixed bin;
dcl  argp pointer;
dcl  argl fixed bin (21);
dcl  arg char (argl) based (argp);


	call ssu_$arg_count (sci_ptr, nargs);
	if nargs ^= 1
	then call ssu_$abort_line (sci_ptr, error_table_$wrong_no_of_args, "Usage: start_login_service ENDPOINT_NAME");

	call ssu_$arg_ptr (sci_ptr, 1, argp, argl);

	endpoint_name = arg;
	found = "0"b;
	ls_endpoint_listp = null ();

/* see if the specified endpoint is in the list of active ones */

	if ls_ssu_info.n_endpoints ^= 0
	then do cur_ls_endpoint_listp = ls_ssu_info.first_endpoint_ptr
		repeat (cur_ls_endpoint_listp -> ls_endpoint_list.next_endpoint)
		while ((cur_ls_endpoint_listp ^= null ()) & (^found));
	     if cur_ls_endpoint_listp -> ls_endpoint_list.name = endpoint_name
	     then do;
		found = "1"b;
		ls_endpoint_listp = cur_ls_endpoint_listp;
	     end;
	end;

	return;

     end Setup;
%page;
Remove_endpoint:
     procedure ();

/* take the endpoint list entry pointed to by ls_endpoint_ptr out of the list */

dcl  prev_ptr pointer;

	if ls_ssu_info.trace
	then call dsa_log_manager_$trace_message (LS_CALLER_TYPE, OUR_NAME, INFO_LOG_SEVERITY, 0, null (), 0, "",
		"Removing endpoint ^a at ^p.", ls_endpoint_list.name, ls_endpoint_listp);

	if ccpi_ptr ^= null ()
	then free create_control_point_info in (system_area);

	if ls_listen_info_ptr ^= null ()
	then free ls_listen_info in (system_area);

	if ls_endpoint_listp = null
	then return;

	prev_ptr = ls_endpoint_list.prev_endpoint;
	if prev_ptr = null ()
	then ls_ssu_info.first_endpoint_ptr = ls_endpoint_list.next_endpoint;
	else prev_ptr -> ls_endpoint_list.next_endpoint = ls_endpoint_list.next_endpoint;

	if ls_endpoint_list.next_endpoint = null ()
	then ls_ssu_info.last_endpoint_ptr = prev_ptr;
	else ls_endpoint_list.next_endpoint -> ls_endpoint_list.prev_endpoint = prev_ptr;

	if ls_endpoint_list.service_entries_ptr ^= null ()
	then free ls_endpoint_list.service_entries_ptr -> login_service_entries in (system_area);
	free ls_endpoint_list in (system_area);

	ls_ssu_info.n_endpoints = ls_ssu_info.n_endpoints - 1;
	return;

     end Remove_endpoint;
%page;
Remove_connection:
     procedure ();

/* close a connection that couldn't be run, and free the storage associated with it. */

	if ls_cp_info_ptr ^= null ()
	then do;
	     if ls_error_info_ptr ^= null ()
	     then free ls_error_info in (system_area);
	     free ls_cp_info in (system_area);
	end;

	if ccpi_ptr ^= null ()
	then free create_control_point_info in (system_area);

	if ls_ssu_info.trace
	then call dsa_log_manager_$trace_message (LS_CALLER_TYPE, OUR_NAME, INFO_LOG_SEVERITY, 0, null (), 0, "",
		"Removing connection ^a at ^p.", connection_name, ls_connection_desc_ptr);

	call login_service_entries.disconnect (connection_name, connection_handle, ""b, (0));
	call ipc_$delete_ev_chn (disconnect_event_channel, (0));

	if ls_connection_desc_ptr ^= null
	then free ls_connection_desc in (system_area);

	return;

     end Remove_connection;
%page;
%include ls_ssu_info;
%page;
%include ls_listen_info;
%page;
%include ls_connection_desc;
%page;
%include ls_cp_info;
%page;
%include ls_error_info;
%page;
%include login_service_entries;
%page;
%include dsa_log_constants;
%page;
%include cpm_entries;
%page;
%include cpm_create_ctrl_pt_info;
%page;
%include event_call_info;
%page;
%include ipc_create_arg;
%page;
%include event_wait_channel;

     end login_server_;
