/****^  ********************************************
        *                                          *
        * Copyright, (C) Honeywell Bull Inc., 1987 *
        *                                          *
        ******************************************** */

/****^  HISTORY COMMENTS:
  1) change(85-08-01,Coren), approve(87-07-10,MCR7679), audit(87-03-01,GDixon),
     install(87-08-04,MR12.1-1055):
     Initial coding.
  2) change(87-03-18,GDixon), approve(87-07-10,MCR7679),
     audit(87-05-19,Parisek), install(87-08-04,MR12.1-1055):
     Correct coding standard violations.
                                                   END HISTORY COMMENTS */

/* format: style4,delnl,insnl,^ifthendo */

ls_convert_as_error_code_:
     procedure (a_code) returns (fixed bin (35));

/* This function is used for error codes passed from the Initializer that come
   from as_error_table_, which is used for codes that are of interest only to
   the answering service and login servers. Because these codes were obtained
   from another process, the correct segment number must be patched in. This is
   unpleasant, but is considered less so than adding 50 or more special-purpose
   messages to error_table_.

   If the segment number matches that of system error codes, no conversion is
   done.

   Note that the segment number in this process for as_error_table_ is kept in
   internal static; a value of all zeroes means it hasn't been initialized yet, whereas
   all ones means we tried to get the segment number and failed.
*/

dcl  a_code fixed bin (35) parameter;

dcl  code fixed bin (35);
dcl  et_ptr pointer;
dcl  local_code fixed bin (35);

dcl  1 code_structure based aligned,			/* this is what an error code looks like */
       2 segno bit (18) unaligned,
       2 offset fixed bin (18) unsigned unaligned;

dcl  as_error_table_segno bit (18) internal static initial (""b);
						/* will be set to segment number of as_error_table_ the first time we need it */

dcl  AS_ERROR_TABLE_NAME char (15) internal static options (constant) initial ("as_error_table_");
dcl  SYS_ERROR_TABLE_SEGNO bit (18) internal static options (constant) initial ("077777"b3);


dcl  error_table_$no_message fixed bin (35) external static;

dcl  hcs_$make_ptr entry (ptr, char (*), char (*), ptr, fixed bin (35));

dcl  (addr, baseno, null) builtin;
%page;
	if a_code = 0
	then return (0);

	code = a_code;

	if addr (code) -> code_structure.segno = SYS_ERROR_TABLE_SEGNO
						/* it's from error_table_ anyway */
	then return (code);

	if as_error_table_segno = ""b
	then do;					/* we haven't got the segment number in this process yet */
	     call hcs_$make_ptr (null (), AS_ERROR_TABLE_NAME, "", et_ptr, local_code);
	     if local_code ^= 0			/* we can't */
	     then as_error_table_segno = "777777"b3;	/* tough */

	     else as_error_table_segno = baseno (et_ptr);
	end;

	if as_error_table_segno = "777777"b3
	then return (error_table_$no_message);		/* for lack of anything better */

	else do;
	     addr (code) -> code_structure.segno = as_error_table_segno;
	     return (code);
	end;

     end ls_convert_as_error_code_;
