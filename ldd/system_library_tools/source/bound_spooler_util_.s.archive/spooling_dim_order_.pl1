/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


spooling_dim_order_: proc (a_sdbp, request, orderp, status);

/* SPOOLING_DIM_ORDER_ -- handles spooling DIM order calls.
   0)  Created 12/5/75 by Janice B. Phillipps
   1)  Updated 7/21/75  by J.Phillipps for label processing of new printer dim.
   2) Modified 1/31/78 by J. C. Whitmore to merge spool dim and printer dim order procs.
*/


%include status;
%include prt_sdb;
%include prt_info;
%include spooling_info;
%include prt_conv_info;
%include prt_order_info;


dcl (addr, null, substr, unspec) builtin;

dcl  command_question condition;

dcl  a_sdbp ptr,
     constant fixed bin init (1),
     code fixed bin (35),
     retain_code fixed bin,
     opt char (3) init (""),
     request char (*),				/* order request */
     statp ptr,
     status bit (72) aligned;				/* IOS status bits */

dcl  demount_code fixed bin based (orderp);

dcl 1 spooling_data based (orderp) aligned,		/* structure used in the "get line length" call */
    2 siptr ptr,					/* ptr to info structure */
    2 line_length fixed bin;

dcl  spool_static_$tally_printed fixed bin ext;		/* turned on when print spool tallies */

dcl  error_table_$dev_nt_assnd fixed bin (35) ext;
dcl  error_table_$not_open fixed bin (35) ext;
dcl  error_table_$bad_arg fixed bin (35) ext;
dcl  error_table_$uninitialized_volume fixed bin (35) ext;
dcl  error_table_$no_file fixed bin (35) ext;
dcl  error_table_$not_attached fixed bin (35) ext;


dcl  file_monitor_$attach entry (ptr, char (*) aligned, fixed bin, fixed bin (35));
dcl  file_monitor_$cleanup entry (ptr, char (*) aligned, fixed bin (35));
dcl  file_monitor_$detach entry (ptr, fixed bin, fixed bin (35));
dcl  ioa_ entry options (variable);
dcl  prtdim_$prtdim_changemode entry (ptr, char (*), char (*), bit (72) aligned);
dcl  prtdim_$prtdim_order entry (ptr, char (*), ptr, bit (72) aligned);
dcl  spooling_question_handler_ entry (ptr, fixed bin (35));



/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

	status = (72)"0"b;				/* Clear status bits. */
	sdb_ptr = a_sdbp;
	statp = addr (status);
	statp -> stat.ios.bit41_trans_term = "1"b;	/* Set transaction terminated bit. */
	sip = addr (sdb.spool_info);			/* ptr to spool_info structure */
	pcip = addr (sdb.conv_info);			/* Get pointer to print conversion info. */
	code = 0;

	on command_question call spooling_question_handler_ (sip, code);

	if request = "runout" then return;		/* just a formality for this mod */

	else if request = "resetwrite" then return;	/* again a formality, keep from prtdim_order */

	else if request = "paper_info" then do;		/* Set new physical paper characteristics. */
	     if paper_info.lines_per_inch ^= 6 &	/* Check for either 6 lpi or 8 lpi. */
	     paper_info.lines_per_inch ^= 8 then do;
bad_arg:		substr (status, 1, 36) = unspec (error_table_$bad_arg);
		return;
	     end;
	     if paper_info.phys_page_length < 10 | paper_info.phys_page_length > 127 then go to bad_arg;
	     if paper_info.phys_line_length < 10 | paper_info.phys_line_length > 255 then go to bad_arg;

	     pci.phys_page_length = paper_info.phys_page_length;
	     pci.phys_line_length = paper_info.phys_line_length;
	     pci.lpi = paper_info.lines_per_inch;
	     spooling_info.phys_page_length = pci.phys_page_length;
	     spooling_info.phys_line_length = pci.phys_line_length;

	     call prtdim_$prtdim_changemode (sdb_ptr, "", (""), status); /* make modes conform */
	end;

	else if request = "file_open" then do;		/* request to open file thru tape_ansi_ IO Module */
	     call file_monitor_$attach (sip, "", 0, code); /* call to attach and open tape file */
	     if code ^= 0 then do;
		call file_monitor_$cleanup (sip, "", code);
		stat.fbpart = error_table_$dev_nt_assnd;
	     end;
	end;

	else if request = "demount_tape" then do;	/* request to demount tape thru tape_ansi_ IO Module */
	     call file_monitor_$cleanup (sip, "", code);
	     statp -> stat.fbpart = code;
	end;

	else if request = "file_close" then do;
	     if orderp = null then retain_code = 0;	/* no demount unless asked */
	     else retain_code = demount_code;

	     call file_monitor_$detach (sip, retain_code, code); /* close and detach file */
	     statp -> stat.fbpart = code;
	end;

	else if request = "print_tally" then do;
	     call ioa_ ("^/^-Spooling file count is ^d", spooling_info.spooling_file_count);
	     call ioa_ ("^-Spooling line count is ^d^/", spooling_info.spooling_line_count);
	     spool_static_$tally_printed = 1;
	end;

	else if request = "get_info_ptr" then do;
	     spooling_data.siptr = sip;		/* set ptr to info structure */
	end;


	else do;					/* otherwise pass on the order to prtdim_ */
	     call prtdim_$prtdim_order (sdb_ptr, request, orderp, status);
	end;

	return;

     end spooling_dim_order_;
