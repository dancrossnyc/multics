/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */



spooling_question_handler_: proc (a_sip, code);



/* SPOOLING_QUESTION_HANDLER_ -- Command question handler for Spooling IO Module / tape_ansi_ interface.
   Answers questions asked by ANSI tape IO Module.
   Created by J. Phillipps 1/20/75   */


dcl  a_sip ptr,
     cip ptr,
     code fixed bin (35),
     cqp ptr,
     opt char (4) aligned,
     rcode fixed bin (35),
     max_answer fixed bin,
     sp ptr,					/* ptr to stack frame when condition occ. */
     status bit (72) aligned,
     answer char (6) aligned varying;

dcl (addr, null, length) builtin;


dcl  get_spooling_data_$next_volume entry (ptr, char (*) aligned, fixed bin (35)),
     find_condition_info_ entry (ptr, ptr, fixed bin (35)),
     ios_$order entry (char (*) aligned, char (*) aligned, ptr, bit (72) aligned);

dcl  error_table_$no_next_volume ext fixed bin (35),
     error_table_$uninitialized_volume ext fixed bin (35),
     error_table_$signaller_fault fixed bin (35) ext,
     error_table_$fatal_error fixed bin (35) ext,
     error_table_$file_aborted ext fixed bin (35);

dcl  spool_static_$norestart fixed bin ext;


dcl  answer_string char (max_answer) based aligned;


dcl 1 command_question_info based (cqp) aligned,
    2 length fixed bin,				/* length in words of this structure */
    2 version fixed bin init (3),			/* version number of this structure */
    2 action_flags aligned,				/* tell handler how to proceed */
      3 cant_restart bit (1) unal,			/* caller doesn't ever want to be returned to */
      3 default_restart bit (1) unal,			/* caller can be returned to with no further action */
      3 pad bit (34) unal,
    2 info_string char (256) var,			/* may contain printable message */
    2 status_code fixed bin (35),			/* if^=0, code interpretable by com_err_ */
    2 query_code fixed bin (35),
    2 question_sw bit (1) unaligned,
    2 yes_or_no_sw bit (1) unaligned,
    2 preset_sw bit (1) unaligned,
    2 answer_sw bit (1) unaligned,
    2 name_ptr ptr,
    2 name_lnth fixed bin,
    2 question_ptr ptr,
    2 question_lth fixed bin,
    2 max_question_lth fixed bin,
    2 answer_ptr ptr,
    2 answer_lth fixed bin,
    2 max_answer_lth fixed bin;




dcl 1 cond_info_ aligned,
%include cond_info;

%include spooling_info;


/*   */
/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */
     sip = a_sip;					/* ptr to spooling control structure */
	code = 0;
	rcode = 0;

	if spooling_info.version ^= spooling_info_version_4 then do;
	     code = error_table_$fatal_error;
	     return;
	end;

	answer = "";				/* initialize answer string */
	sp = null ();				/* use most recent condition frame */
	cip = addr (cond_info_);			/* ptr to condition info structure */
	cond_info_.version = 1;
	call find_condition_info_ (sp, cip, rcode);	/* get condition info */
	cqp = cond_info_.infoptr;			/* set ptr to command_question structure */
	if cqp = null then do;
	     code = error_table_$signaller_fault;	/* bad .. cannot continue */
	     return;
	end;


	cqp -> command_question_info.preset_sw = "1"b;	/* we will give the answer */
	cqp -> command_question_info.question_sw = "0"b;	/* dont print question -- log it */
	cqp -> command_question_info.answer_sw = "0"b;	/* don't print answer */
	cqp -> command_question_info.yes_or_no_sw = "1"b; /* we answer yes or no */

	max_answer = cqp -> command_question_info.max_answer_lth; /* define answer length */

/* get_spooling_data_ types: "Reached end of volume list."
   "Enter more volids or ""detach""".
   If the operator types ""detach"" or there are no volume ids in the volume list,
   processing will be terminated. The tape_ansi_ asks the question (which is suppressed by this routine)
   "Do you want to terminate processing?"
   The variable "string" is set to yes if the operator types  detach or if the volume list remains exhausted. */

	if cqp -> command_question_info.status_code = error_table_$no_next_volume then do;
	     call get_spooling_data_$next_volume (sip, opt, rcode);
	     if rcode ^= 0 then do;
		answer = "yes";			/* will terminate processing */
		spool_static_$norestart = 1;
	     end;
	     else answer = "no";			/* dont want to terminate processing */
	     code = rcode;
	end;

	else if cqp -> command_question_info.status_code = 0 then do; /* ready to supply next volume */
	     answer = sip -> spooling_info.volids (1);	/* return volid */
	     cqp -> command_question_info.yes_or_no_sw = "0"b;
	end;

/* abort_file in tape_ansi_ types:

   "Unrecoverable error writing file lables. Do you want to delete defective file xxxxxx?"
   This routine always answers yes so as to preserve standard ANSI tape format.  */

	else if cqp -> command_question_info.status_code = error_table_$file_aborted then do;
	     answer = "yes";			/* want to delete the defective section of file set */
	     spooling_info.filenumber = spooling_info.filenumber - 1; /* set file number back one */
	end;

/* Other questions asked by tape_ansi_ are

   from initialize_permitA:
   "Volume xxxxxx requires initialization. Do you want to initialize it?"
   "Volume xxxxxx requires re-initialization, but contains an unexpired file. Do you want to re-initialize it?"

   from volume_query:
   "Do you want to overwrite the unexpired file xxxxx?"
   All of these questions are answered yes */


	else do;
	     answer = "yes";
	end;
	cqp -> command_question_info.answer_lth = length (answer);
	command_question_info.answer_ptr -> answer_string = answer;

	return;


     end spooling_question_handler_;
