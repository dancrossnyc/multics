/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-06-15,Brunelle), approve(89-09-18,MCR8129),
     audit(89-09-29,Beattie), install(89-10-03,MR12.3-1083):
     Change parse_command_ call, which was replaced in MR12.2, with
     iodd_parse_$command.
                                                   END HISTORY COMMENTS */


get_spooling_data_: proc;

	return;

/* GET_SPOOLING_DATA_ -- the operator interface for the Multics Spooling IO Module.
   This routine reads from "user_input" and parses for: tape volume-ids,
   optional density, optional spooling line-length, and optional spooling limits  (lines and files).
   There is an entry point for updating the spooling volume list and
   an entry point for updating the spooling limits.

   0)  Created 10/74 by Janice B. Phillipps as part of the Multics Spooling DIM.
   1)  Updated 7/75 by J.Phillipps for new printer dim.
   2)  Updated 10/75 by J.Phillipps to add optional density specification.
   3)  Re-written 1/31/78 by J. C. Whitmore while adding new printer features to spooldim.
*/

%include spooling_info;
dcl (addr, length, substr, convert, rtrim, string, translate) builtin;
dcl  conversion condition;

dcl  a_sip ptr,
     arg_no fixed bin,
     code fixed bin (35),
     comment char (64),
     density char (4) aligned,
     ec fixed bin (35),
     file_limit fixed bin (21),
     i fixed bin,
     init_flg bit (1) aligned,
     input_line char (120) aligned,
     input_lnth fixed bin,				/* length of input line (nelemt) */
     key fixed bin,
     line_limit fixed bin (21),
     number fixed bin,
     nxt_vol_flg bit (1) aligned,
     op_msg char (80),
     opt char (*),
     renew_flg bit (1) aligned,
     temp_arg char (64),
     try_again bit (1) aligned;

dcl 1 arg_list aligned,
    2 max_args fixed bin init (20),			/* don't expect more than 20 tokens per line */
    2 nargs fixed bin,
    2 arg (20) char (64) var;				/* array of tokens from input line */

dcl 1 flags unaligned,				/* control flags */
   (2 error_flag,
    2 vol_flag,
    2 files_flag,
    2 lines_flag,
    2 den_flag,
    2 int_flag,
    2 comm_flag) bit (1) unal;

dcl  vol_id (3) char (8) var;
dcl  n_vols fixed bin;

dcl  error_table_$device_end fixed bin (35) ext static;
dcl  error_table_$noarg fixed bin (35) ext static;
dcl  error_table_$fatal_error fixed bin (35) ext static;

dcl  ioa_ entry options (variable);
dcl  iodd_parse_$command entry (char(*), ptr, fixed bin(35));
dcl  iox_$get_line entry (ptr, ptr, fixed bin, fixed bin, fixed bin (35));
dcl  iox_$user_input ext ptr;


initial:	entry (a_sip, opt, code);

	sip = a_sip;
	opt = "";

	call init (code);				/* set things up */
	if code ^= 0 then return;			/* wrong info version */

	spooling_info.line_limit = 0;
	spooling_info.file_limit = 0;
	spooling_info.density = "";
	spooling_info.block_lnth = "";
	spooling_info.spool_file_limit_sw = 0;
	spooling_info.spool_line_limit_sw = 0;
	spooling_info.nvols = 0;
	spooling_info.volids (*) = "";		/* initialize the volume list */

	init_flg = "1"b;				/* initial entry flag */
	nxt_vol_flg = "0"b;				/* next volume entry flag */
	renew_flg = "0"b;				/* renew limits entry flag */

	if spooling_info.flgs.io_sw then
	     op_msg = "Enter volids and optional tape data or limits:";
	else op_msg = "Enter volid and optional limits:";
join:
	call ioa_ (op_msg);

read:	input_line = "";				/* clear any junk */

	call iox_$get_line (iox_$user_input, addr (input_line), 120, input_lnth, ec); /* read operator's input  */

	call iodd_parse_$command (substr (input_line, 1, input_lnth), addr (arg_list), ec);
	if ec ^= 0 then do;
	     if ec = error_table_$noarg then go to read;	/* null line */
	     call report ("Error in  command line.");
	     go to join;
	end;

	if arg (1) = "detach" then do;
	     if nargs ^= 1 then do;
		call report ("Invalid detach command.");
		go to join;
	     end;
	     opt = "det";				/* tell caller to detach tape */
	     code = error_table_$device_end;		/* all done */
	     return;
	end;

	if arg (1) = "help" then do;			/* operator is confused */
	     call ioa_ ("Options:  -vol <tape_numbers (3)> -fl <limit> -ln <limit> -den <density> -int or ""detach""");
	     go to join;
	end;

	on conversion begin;
	     call report ("Argument conversion error.");
	     error_flag = "1"b;
	     go to next_key;
	end;

	key = 1;					/* next key to process is the first one */

next_key:

	if key > nargs then go to finish;		/* go see what happened */

	if arg (key) = "-volid" | arg (key) = "-vol" then go to volume_key;
	if arg (key) = "-files" | arg (key) = "-fl" then go to files_key;
	if arg (key) = "-lines" | arg (key) = "-ln" then go to lines_key;
	if arg (key) = "-density" | arg (key) = "-den" then go to density_key;
	if arg (key) = "-interchange" | arg (key) = "-int" then go to interchange_key;
	if arg (key) = "-comment" | arg (key) = "-com" then go to comment_key;

	error_flag = "1"b;				/* be sure to verify final values */
	call ioa_ ("*** Unrecognized keyword: ^a^/Keyword ignored.", arg (key));

	do key = key + 1 to nargs;
	     if substr (arg (key), 1, 1) = "-" then go to next_key;
	end;

	go to finish;				/* no more keywords */


volume_key:

	number = 0;				/* init the arg count */
	arg_no = key + 1;				/* the first arg for this key */

	do key = key + 1 to nargs while (substr (arg (key), 1, 1) ^= "-"); /* find all values */
	     number = number + 1;			/* increment the arg counter */
	end;

	if renew_flg then do;			/* just want limits */
	     call report ("The -volid keyword is invalid when looking for limits.");
	     go to next_key;
	end;

	if number = 0 then do;			/* we must have at least one volume name */
	     error_flag = "1"b;			/* give the summary */
	     call report ("Volume id has been omitted.");
	     go to next_key;
	end;

	if number > 3 then do;			/* too many volume names */
	     call report ("Only 3 volume ids can be entered.");
	     error_flag = "1"b;
	     go to next_key;
	end;

	do i = arg_no to key -1;			/* check out each volid given as args */
	     if length (arg (i)) ^= 6 then do;
		call report ("Bad volume id: " || arg (i) || " Each must have six characters.");
		error_flag = "1"b;
		go to next_key;
	     end;
	end;
	vol_id (*) = "";				/* clear the old values */
	n_vols = 0;				/* clear the vol counter */

	do i = arg_no to key - 1;			/* pick up the new vol ids */
	     n_vols = n_vols + 1;			/* increment the count (index) */
	     vol_id (n_vols) = arg (i);		/* copy the volid */
	end;

	vol_flag = "1"b;				/* got some good volume ids */
	go to next_key;

files_key:					/* set file count for spooling limits */

	number = 0;				/* check the number of values for this key */

	do key = key + 1 to nargs while (substr (arg (key), 1, 1) ^= "-");
	     number = number + 1;			/* count the limits given */
	     temp_arg = arg (key);			/* save the limit value */
	end;

	if number = 0 then do;			/* must have some limit given */
	     call report ("Unspecified file limit count.");
	     error_flag = "1"b;
	     go to next_key;
	end;

	if number > 1 then do;			/* we can only use one limit value, which? */
	     call report ("Only one file limit can be accepted.");
	     error_flag = "1"b;
	     go to next_key;
	end;

	if temp_arg = "reset" then do;
	     file_limit = -1;			/* in case he wants to change his mind */
	end;
	else do;
	     file_limit = convert (file_limit, temp_arg);
	     if file_limit < 0 | file_limit > 999999 then do;
		error_flag = "1"b;
		call report ("Bad file limit.");
		go to next_key;
	     end;
	end;
	files_flag = "1"b;				/* report a change if needed */
	go to next_key;

lines_key:					/* set line count for spooling limits */

	number = 0;				/* check the number of values for this key */

	do key = key + 1 to nargs while (substr (arg (key), 1, 1) ^= "-");
	     number = number + 1;			/* count the limits given */
	     temp_arg = arg (key);			/* save the limit value */
	end;

	if number = 0 then do;			/* must have some limit given */
	     call report ("Unspecified line limit count.");
	     error_flag = "1"b;
	     go to next_key;
	end;

	if number > 1 then do;			/* we can only use one limit value, which? */
	     call report ("Only one line limit can be accepted.");
	     error_flag = "1"b;
	     go to next_key;
	end;

	if temp_arg = "reset" then do;
	     line_limit = -1;			/* in case he wants to change his mind */
	end;
	else do;
	     line_limit = convert (line_limit, temp_arg);
	     if line_limit < 0 | line_limit > 999999 then do;
		error_flag = "1"b;
		call report ("Bad line limit.");
		go to next_key;
	     end;
	end;
	lines_flag = "1"b;				/* report a change if needed */
	go to next_key;

density_key:					/* set density */

	number = 0;				/* check the number of values for this key */

	do key = key + 1 to nargs while (substr (arg (key), 1, 1) ^= "-");
	     number = number + 1;			/* count the values given */
	     temp_arg = arg (key);			/* save the value */
	end;

	if spooling_info.io_sw = "0"b then do;		/* not for reading */
not_input:     call report ("The -density and -interchange keywords are not allowed on input.");
	     go to next_key;
	end;
	if spooling_info.density ^= "" | spooling_info.vol_mount then do;
	     call report ("Cannot change density once file set is attached");
	     go to next_key;
	end;
	if number = 0 then do;
	     call report ("Unspecified recording density.");
	     error_flag = "1"b;			/* a real goof */
	     go to next_key;
	end;
	if number > 1 then do;
	     call report ("Only one density setting may be accepted.");
	     error_flag = "1"b;
	     go to next_key;
	end;
	if ^(temp_arg = "800" | temp_arg = "1600") then do; /* must be a legal value */
	     call report ("Density must be either 800 or 1600 .");
	     error_flag = "1"b;
	     go to next_key;
	end;
	density = substr (temp_arg, 1, length (density)); /* save the new value */
	den_flag = "1"b;				/* mark density as set  */
	int_flag = "0"b;				/* cancel interchange if set */
	go to next_key;

interchange_key:					/* set interchange density and block size */

	number = 0;				/* check the number of values for this key */

	do key = key + 1 to nargs while (substr (arg (key), 1, 1) ^= "-");
	     number = number + 1;			/* count the values given */
	end;

	if spooling_info.io_sw = "0"b then go to not_input; /* illegal */

	if spooling_info.density ^= "" | spooling_info.vol_mount then do;
	     call report ("Interchange cannot be specified after volume is attached.");
	     go to next_key;
	end;
	if number ^= 0 then do;
	     call report ("Interchange keyword does not allow arguemnts.");
	     error_flag = "1"b;
	     go to next_key;
	end;
	int_flag = "1"b;				/* mark interchange as set */
	density = "800";				/* force the interchange value */
	den_flag = "0"b;				/* reset  value from density key */
	go to next_key;

comment_key:

	number = 0;				/* check the number of values for this key */

	do key = key + 1 to nargs while (substr (arg (key), 1, 1) ^= "-");
	     number = number + 1;			/* count the limits given */
	     temp_arg = arg (key);			/* save the comment */
	end;

	if number = 0 then do;
	     call report ("Comment field is missing.");
	     error_flag = "1"b;
	     go to next_key;
	end;

	if number > 1 then do;
	     call report ("Multiple comments found.  Use quotes if comment includes spaces.");
	     error_flag = "1"b;
	     go to next_key;
	end;

	comment = translate (rtrim (temp_arg), "_", " 	"); /* make all spaces underscore */
	comm_flag = "1"b;
	go to next_key;



finish:						/* now we see what was set, and maybe return to the caller */

	try_again = "0"b;				/* see if there was an error in lack of data */

	if (nxt_vol_flg | init_flg) & ^vol_flag then do;
	     call report ("No volume id given.");
	     try_again = "1"b;
	end;

	if spooling_info.spool_file_limit_sw = 1 & ^files_flag then do; /* do we need a new file limit? */
	     call report ("A new file limit must be given.");
	     try_again = "1"b;
	end;

	if spooling_info.spool_line_limit_sw = 1 & ^lines_flag then do; /* do we need a new line limit? */
	     call report ("A new line limit must be given.");
	     try_again = "1"b;
	end;

	if ^(lines_flag | files_flag) then
	     if init_flg & ^(error_flag | try_again) then do; /* tell op no limits */
		call ioa_ ("No file or line limits have been set.");
		go to ask;			/* make him verify */
	     end;

	if try_again then go to join;			/* did we pass the tests? */

	if error_flag then do;			/* if any error occured, show the values we will use */

	     if vol_flag then
		call ioa_ ("Volume ids: ^a ^a ^a", vol_id (1), vol_id (2), vol_id (3));

	     if files_flag then
		if file_limit = -1 then call ioa_ ("File limit will be reset.");
		else call ioa_ ("File limit ^d will be added to current limit of ^d",
		     file_limit, spooling_info.file_limit);

	     if lines_flag then
		if line_limit = -1 then call ioa_ ("Line limit will be reset.");
		else call ioa_ ("Line limit ^d will be added to current limit of ^d",
		     line_limit, spooling_info.line_limit);

	     if den_flag then
		call ioa_ ("Density: ^a", density);

	     if int_flag then
		call ioa_ ("Interchange:  density = 800,  block size = 2048");

	     if comm_flag then
		call ioa_ ("Comment: ^a", comment);

	     if init_flg & ^(lines_flag | files_flag) then
		call ioa_ ("No file or line limits have been set.");

ask:	     call ioa_ ("Are these parameters correct?");

	     input_line = "";
	     call iox_$get_line (iox_$user_input, addr (input_line), 120, input_lnth, ec);
	     input_line = substr (input_line, 1, input_lnth -1); /* drop the new_line char */
	     if input_line = "no" then go to join;
	     if input_line ^= "yes" then do;
		call ioa_ ("Please answer yes or no.");
		go to ask;
	     end;
	end;


/*	All OK  -  use the values for real now */

	if vol_flag then do;
	     do i = 1 to 3;
		spooling_info.volids (i) = vol_id (i);
	     end;
	     spooling_info.nvols = n_vols;
	end;

	if lines_flag then do;
	     if line_limit = -1 then spooling_info.line_limit = 0;
	     else spooling_info.line_limit = spooling_info.line_limit + line_limit;
	     spooling_info.spool_line_limit_sw = 0;
	end;

	if files_flag then do;
	     if file_limit = -1 then spooling_info.file_limit = 0;
	     else spooling_info.file_limit = spooling_info.file_limit + file_limit;
	     spooling_info.spool_file_limit_sw = 0;
	end;

	if den_flag then do;			/* sets density and block size */
	     spooling_info.density = density;
	     spooling_info.block_lnth = "8192";
	end;

	if int_flag then do;
	     spooling_info.density = "800";
	     spooling_info.block_lnth = "2048";
	end;

	if comm_flag then spooling_info.comment = comment;

	if spooling_info.block_lnth = "" then
	     spooling_info.block_lnth = "8192";		/* default is biggest possible */

	if spooling_info.density = "" then
	     spooling_info.density = "1600";		/* default density  */

	return;

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
report:	proc (message);

dcl  message char (*);

	     call ioa_ ("*** ^a", message);		/* simple format for now */
	     return;

	end report;

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
init:	proc (ec);

dcl  ec fixed bin (35);

	     if spooling_info.version ^= spooling_info_version_4 then do; /* right structure? */
		ec = error_table_$fatal_error;
		call report ("Fatal_error. Incorrect version of info structure.");
		return;
	     end;
	     ec = 0;				/* all well otherwise */
	     file_limit = 0;
	     line_limit = 0;
	     density = "1600";
	     n_vols = 0;
	     vol_id (*) = "";
	     comment = "";
	     string (flags) = ""b;

	     return;

	end init;

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
next_volume: entry (a_sip, opt, code);			/* entry to get next volume id to spool onto */

	sip = a_sip;
	opt = "";

	call init (code);
	if code ^= 0 then return;

	spooling_info.volids (*) = "";
	nxt_vol_flg = "1"b;				/* make sure get volid or detach */
	renew_flg = "0"b;				/* wont reset spooling limits */
	init_flg = "0"b;				/* initial entry flag turned off */

	call ioa_ ("End of spooling volume list;");

	op_msg = "Enter more volids or ""detach"":";

	go to join;

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  - */
renew_limits: entry (a_sip, opt, code);

	sip = a_sip;
	opt = "";

	call init (code);
	if code ^= 0 then return;

	nxt_vol_flg = "0"b;				/* wont change volume list */
	renew_flg = "1"b;				/* will renew limits */
	init_flg = "0"b;				/* initial entry flag turned off */

	call ioa_ ("^/Reached specified spooling limits;");

	call ioa_ ("^/^-Current file limit is ^d ^/^-Current line limit is ^d",
	     spooling_info.file_limit, spooling_info.line_limit);

	call ioa_ ("^/^-Current file count is ^d ^/^-Current line count is ^d^/",
	     spooling_info.spooling_file_count, spooling_info.spooling_line_count);

	op_msg = "Enter new file and/or line limits, or ""detach"":";

	go to join;

     end get_spooling_data_;
