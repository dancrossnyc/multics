/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


print_spooling_tape: pst: proc;

/* PRINT_SPOOLING_TAPE --  routine to attach a printer thru  the printer DIM
   and print a spooling tape.
   0)  Created 1/5/75 by Janice B. Phillipps
   1)  Updated 7/21/75 by J.Phillipps for new printer DIM.
   2) Modified 1/78 by J. C. Whitmore for new printer features and prtdim/spooldim merge
*/


%include spooling_info;
%include status;

dcl (addr, null, convert, string) builtin;

dcl (cleanup, conversion) condition;


dcl 1 counts aligned,				/* structure used in "get_count" call */
    2 line fixed bin,				/* line number */
    2 page_length fixed bin,				/* length of page */
    2 lmarg fixed bin,				/* left margin indentation */
    2 rmarg fixed bin,				/* line length */
    2 line_count fixed bin,				/* count of lines printed */
    2 page_count fixed bin;				/* count of pages printed */

dcl  al fixed bin,
     ap ptr,
     areap ptr,
     arg1 char (8) aligned,
     bptr ptr,
     code fixed bin (35),
     db_flg bit (1) aligned,
     dev_id char (4) aligned,
     ec fixed bin,
     fnbr fixed bin,				/* number of file to start printing from */
     fnbr_flg bit (1) aligned,
     i fixed bin,
     narg fixed bin,
     nargs fixed bin,
     opt char (3) aligned,
     output_dim char (7) aligned,
     retry_sw bit (1) aligned init ("1"b),
     scode fixed bin (35),
     statp ptr,
     status bit (72) aligned;

dcl  arg char (al) based (ap) aligned,
     listen_area area ((16374)) based (areap),
     device_name char (al) unaligned based (ap),
     dim_name char (al) unaligned based (ap),

     file_number char (al) unaligned based (ap);


dcl 1 basics aligned based (bptr),
    2 areap ptr,
    2 info like spooling_info aligned;

dcl  error_table_$no_file ext fixed bin (35);
dcl  error_table_$fatal_error ext fixed bin (35);

dcl  spool_static_$debug ext fixed bin;

dcl  cu_$arg_count entry (fixed bin);
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin);
dcl  com_err_ entry options (variable);
dcl  file_monitor_$attach entry (ptr, char (*) aligned, fixed bin, fixed bin (35));
dcl  file_monitor_$cleanup entry (ptr, char (*) aligned, fixed bin (35));
dcl  file_monitor_$detach entry (ptr, fixed bin, fixed bin (35));
dcl  get_spooling_data_$initial entry (ptr, char (*) aligned, fixed bin (35));
dcl  get_spooling_data_$renew_limits entry (ptr, char (*) aligned, fixed bin (35));
dcl  get_system_free_area_ entry (ptr);
dcl  ioa_ entry options (variable);
dcl  ios_$attach entry (char (*) aligned, char (*) aligned, char (*) aligned, char (*) aligned, bit (72) aligned);
dcl  ios_$changemode entry (char (*) aligned, char (*) aligned, char (*) aligned, bit (72) aligned);
dcl  ios_$detach entry (char (*) aligned, char (*) aligned, char (*) aligned, bit (72) aligned);
dcl  ios_$order entry (char (*) aligned, char (*) aligned, ptr, bit (72) aligned);
dcl  unspool_ entry (ptr, fixed bin (35));



	code = 0;
	db_flg = "0"b;
	fnbr_flg = "0"b;
	scode = 0;
	status = (72)"0"b;				/* clear return status */
	statp = addr (status);
	call get_system_free_area_ (areap);		/* get ptr to area in listen_ */
	allocate basics in (listen_area) set (bptr);	/* create block */
	if bptr = null then do;
	     call com_err_ (0, "print_spooling_tape", "Unable to allocate spooling info structure.");
	     return;
	end;
	bptr -> basics.areap = areap;			/* save ptr to free area */
	sip = addr (bptr -> basics.info);		/* get pointer to spooling_data */

	call cu_$arg_count (nargs);
	if nargs < 2 then do;
	     call ioa_ ("Usage is:   print_spooling_tape prtdim device -options-");
	     go to free_storage;
	end;

	call cu_$arg_ptr (1, ap, al, ec);
	if ec ^= 0 then do;
err:	     call com_err_ (ec, "print_spooling_tape", "Error while processing arguments.");
	     go to free_storage;
	end;

/* 1st argument is the IO Module name to use */
	arg1 = ap -> dim_name;
	output_dim = arg1;

/* 2nd argument is device/stream name */
	call cu_$arg_ptr (2, ap, al, ec);		/* usually arg is ptrb */
	if ec ^= 0 then go to err;
	arg1 = ap -> device_name;
	dev_id = arg1;				/* device name to attach to */

	on conversion go to err;			/* in case op types a letter, or ... */

	if nargs = 2 then go to default;		/* no options */

	do narg = 3 repeat (narg+1) while (narg <= nargs);
	     call cu_$arg_ptr (narg, ap, al, ec);
	     if ec ^= 0 then go to err;

	     if arg = "-nbr" | arg = "-number" then do;
		narg = narg + 1;
		call cu_$arg_ptr (narg, ap, al, ec);
		if ec ^= 0 then go to err;
		arg1 = ap -> file_number;
		fnbr = convert (i, arg1);
		fnbr_flg = "1"b;
	     end;
	     else if arg = "-db" | arg = "-debug" then db_flg = "1"b;
	     else go to err;
	end;

default:
	if ^fnbr_flg then fnbr = 1;

	call ioa_ ("^/Printing will begin with FILE ^d.^/", fnbr);

	if db_flg then spool_static_$debug = 1;
	else spool_static_$debug = 0;

	spooling_info.iocbp = null;			/* in case the cleaner_up is called */

	on cleanup begin;
	     call cleaner_up;
	     free basics in (listen_area);
	end;

	call ios_$attach ("printer_output", output_dim, dev_id, "", status);
	if statp -> stat.fbpart ^= 0 then do;
	     call com_err_ (statp -> stat.fbpart, "print_spooling_tape",
		" Could not attach device: ^a", dev_id);
	     go to free_storage;			/* streams not attached yet */
	end;

	call ios_$changemode ("printer_output", "noskip,", "", status); /* want control of the printer here */
	if statp -> stat.fbpart ^= 0 then
	     call com_err_ (statp -> stat.fbpart, "print_spooling_tape", "Could not set printer modes.");

	spooling_info.version = spooling_info_version_4;	/* the current version */
	spooling_info.switch_name = "spool_input";	/* device is the switch attached to tape_ansi_ */
	string (spooling_info.flgs) = ""b;
	spooling_info.flgs.fst_call = "1"b;		/* mark as the first attachment */

	spooling_info.filesetid = "";			/* no previous ANSI file-set being processed */
	spooling_info.spooling_line_count = 0;
	spooling_info.spooling_file_count = 0;
	spooling_info.phys_line_length = 136;		/* this is the default for the spooling dim */
	spooling_info.phys_page_length = 66;		/* assume 11 inch paper at 6 lpi */
	spooling_info.flgs.io_sw = "0"b;		/* set up to read tape */
	counts.line_count = 0;			/* initialize */
	counts.page_count = 0;

	call get_spooling_data_$initial (sip, opt, code); /* get spooling limits and volids  */
	if opt = "det" | code ^= 0 then do;
	     call cleaner_up;			/* release devices */
	     go to free_storage;
	end;

	spooling_info.filenumber = fnbr;		/* start at the given file */

repeat:
	call file_monitor_$attach (sip, "", spooling_info.filenumber, code); /* attach and open file on ansi tape */
	if code = error_table_$no_file then do;		/* thats all for this volume */
	     call ioa_ ("^/Reached end of data for current fileset.");
	     call cleaner_up;
	     go to free_storage;
	end;

	else if code ^= 0 then do;			/* got a problem trying to attach the tape file */
	     if retry_sw then do;
		call com_err_ (code, "print_spooling_tape",
		     "Error while calling file_monitor_$attach; ^/ Will try attachment and opening once more.");
		retry_sw = "0"b;			/* reset */
		go to repeat;
	     end;
	     call cleaner_up;
	     go to free_storage;
	end;

	call ioa_ ("Printing FILE ^d", spooling_info.filenumber);

	call ios_$order ("printer_output", "reset", null (), status); /* clear the counts */
	call ios_$changemode ("printer_output", "noskip,", "", status); /* set noskip mode after reset */

	call unspool_ (sip, code);			/* format the input for the printer DIM */
	if code ^= 0 then
	     if code = error_table_$fatal_error then do;
		call cleaner_up;
		go to free_storage;
	     end;
	     else call com_err_ (code, "print_spooling_tape", "^/Processing of tape will continue.");

	call ios_$order ("printer_output", "runout", null (), status);

	call ios_$order ("printer_output", "get_count", addr (counts), status);

/*	update the file number and limit counts */

	spooling_info.filenumber = spooling_info.filenumber + 1; /* ready for the next file */
	spooling_info.spooling_line_count = spooling_info.spooling_line_count + counts.line_count;
	spooling_info.spooling_file_count = spooling_info.spooling_file_count + 1; /* one more file done */

	call file_monitor_$detach (sip, 0, scode);	/* close the current file on the tape */
	if code ^= 0 then do;			/* trouble ... give up */
	     call com_err_ (code, "print_spooling_tape", "Error while calling to detach tape file.");
	     call cleaner_up;
	end;

/*	now check to see if we have hit any limits */

	if spooling_info.file_limit ^= 0 then
	     if spooling_info.file_limit <= spooling_info.spooling_file_count then do;
		spooling_info.spool_file_limit_sw = 1;
	     end;
	if spooling_info.line_limit ^= 0 then
	     if spooling_info.line_limit <= spooling_info.spooling_line_count then do;
		spooling_info.spool_line_limit_sw = 1;
	     end;

	if spooling_info.spool_file_limit_sw = 1 | spooling_info.spool_line_limit_sw = 1 then do;
	     opt = "";
	     call get_spooling_data_$renew_limits (sip, opt, code);
	     if opt = "det" then do;			/* going to detach spooler */
		call cleaner_up;
		go to free_storage;
	     end;
	end;

	go to repeat;				/* on to the next file on the tape */

free_storage:

	free basics in (listen_area);

	return;


/* - - - - - - - - - - - - - - - - - - - - - - - */
cleaner_up: proc;

	     call file_monitor_$cleanup (sip, "", code);	/* take down volume */

	     call ios_$order ("printer_output", "runout", null (), status);

	     call ios_$detach ("printer_output", "", "", status); /* detach printer */

	     call ioa_ ("Printer detached.^/Processing of tape ended.^/");
	     call ioa_ ("Spooling file count is ^d", spooling_info.spooling_file_count);
	     call ioa_ ("Spooling line count is ^d", spooling_info.spooling_line_count);

	     return;

	end cleaner_up;

     end print_spooling_tape;
