/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */



/* SPOOLING_DIM_XTATCH_ -- handles the attach and detach functions for Multics Spooling IO Module.
   0) Created by Janice B. Phillipps 11/1/74.
   1) Updated 7/10/75 by J.Phillipps for new IO driver design.
   2) Modified 1/25/78 by J. C. Whitmore for new printer features and printer dim integration
*/
spooling_dim_xtatch_: proc;

%include status;
%include prt_sdb;
%include prt_conv_info;
%include prt_info;
%include spooling_info;

dcl (addr, null, length, rtrim, string) builtin;

dcl  code fixed bin (35),
     ioname char (*),				/* parameter (input) - stream attached */
     ioname2 char (*),				/* parameter (input) - printer name */
     mode char (*),					/* parameter (input) - attachment mode */
     device char (32),				/* temp for device name */
     status bit (72) aligned,				/* parameter (output) - status return */
     type char (*) aligned;				/* parameter (input) - dim name */

dcl  listen_area area ((16374)) based (areap),
     areap ptr;

dcl  data_buf char (164) aligned based;			/* output buffer for write entry */

dcl  spool_conv_$spool_conv_ ext;
dcl  spool_static_$tally_printed fixed bin ext;		/* tally printing flag initial zero */
dcl  spool_static_$debug fixed bin ext;
dcl  spool_static_$file_attch fixed bin ext;
dcl  spool_static_$norestart fixed bin ext;

dcl  error_table_$no_room_for_dsb ext fixed bin (35);
dcl  error_table_$ionmat fixed bin (35) ext;


dcl  file_monitor_$cleanup entry (ptr, char (*), fixed bin (35));
dcl  get_spooling_data_$initial entry (ptr, char (*) aligned, fixed bin (35));
dcl  get_system_free_area_ entry (ptr);
dcl  spooling_dim_order_ entry (ptr, char (*) aligned, ptr, bit (72) aligned);


/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
attach:	entry (ioname, type, ioname2, mode, status, sdb_ptr);


	status = (72)"0"b;				/* clear return ios status */
	if sdb_ptr ^= null () then do;
	     stat.fbpart = error_table_$ionmat;		/* if multiple attachment return code */
	     go to exit;
	end;

	call get_system_free_area_ (areap);		/* get ptr to area in listen_ before alloc */
	allocate sdb in (listen_area) set (sdb_ptr);	/* create stream data block */
	if sdb_ptr = null then do;
no_dsb:	     stat.fbpart = error_table_$no_room_for_dsb;	/* woops. */
	     go to exit;
	end;
	sdb.buffer_ptr = null;
	allocate data_buf in (listen_area) set (sdb.buffer_ptr);
	if sdb.buffer_ptr = null then do;
	     free sdb in (listen_area);		/* we have to have both, else no attach */
	     go to no_dsb;				/* drop it */
	end;

	sdb.buffer_ptr -> data_buf = "";		/* initialize to blank chars */

/* Fill in stream data block  */

	device = ioname2;				/* see what we are to attach to */
	if device = "" then device = "tape_spool_out";	/* be sure we have a name */

	sdb.areap = areap;				/* save ptr to free area */
	sdb.outer_module_name = "spooldim_";		/* name of this IO module */
	sdb.device_name_list_ptr = addr (sdb.device_name); /* set ptr */
	sdb.next_device_ptr = null;			/* only one device allowed */
	sdb.stream_name = ioname;			/* name of this attachment */
	sdb.device_name.name = device;		/* put attached device name in  sdb */
	sdb.name_size = length (rtrim (sdb.device_name.name));

	sip = addr (sdb.spool_info);			/* get ptr to spooling info data base */

/*	initialize the structure as was done by initial attributes before 1/25/78 */

	spooling_info.version = spooling_info_version_4;	/* the current version */
	spooling_info.switch_name = sdb.device_name.name; /* device is the switch attached to tape_ansi_ */
	spooling_info.iocbp = null;			/* the switch is not attached yet */
	string (spooling_info.flgs) = ""b;
	spooling_info.flgs.fst_call = "1"b;		/* mark as the first attachment */

	spooling_info.flgs.io_sw = "1"b;		/* mount tape with write ring */
	spooling_info.filesetid = "";			/* no previous ANSI file-set being processed */
	spooling_info.filenumber = 0;
	spooling_info.spooling_line_count = 0;
	spooling_info.spooling_file_count = 0;
	spooling_info.phys_line_length = 132;		/* this is the default for the spooling dim */
	spooling_info.phys_page_length = 66;		/* assume 11 inch paper at 6 lpi */

	pcip = addr (sdb.conv_info);			/* get ptr to code conversion info */

/* Fill in conversion info -- to be used by prt_conv_ and spool_conv_ */

	pci.cv_proc = addr (spool_conv_$spool_conv_);	/* formatting output proc */
	pci.phys_line_length = spooling_info.phys_line_length; /* sets wrapping column */
	pci.phys_page_length = spooling_info.phys_page_length;
	pci.lpi = 6;				/* the default lines per inch value */
	pci.level = 0;				/* overstrike level */
	pci.pos = 0;				/* print position at end of incomplete line */
	pci.line = 1;				/* current line number */
	pci.slew_residue = 0;			/* number of lines remaining to be slewed */
	pci.label_wksp = null ();			/* pointer to label being processed */
	pci.label_nelem = 0;			/* characters remaining in label */
	pci.sav_pos = 0;				/* position saved during label processing */
	pci.esc_state = 0;
	pci.esc_num = 0;
	pci.temp = "0"b;				/* conversion proc temporary */

	call spooling_dim_order_ (sdb_ptr, "reset", null, status); /* initialize prt_conv_ info */

	return;



detach:	entry (sdb_ptr, ioname2, mode, status);

	status = (72)"0"b;				/* clear return status */
	sip = addr (sdb.spool_info);			/* get ptr to spooling spool_info data base */

	if spooling_info.flgs.vol_mount then
	     call file_monitor_$cleanup (sip, "", code);	/* drop tape if it is up */

	areap = sdb.areap;				/* ptr to area */
	free sdb.buffer_ptr -> data_buf in (listen_area);
	free sdb in (listen_area);			/* free up allocated stream data block */

exit:	stat.ios.bit41_trans_term = "1"b;		/* set transaction terminated bit */
	stat.ios.bit52_ion_detached = "1"b;		/* set detach bit */



	return;



/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
debug_on:	entry;					/* turns debug on */

	spool_static_$debug = 1;
	return;


/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
debug_off: entry;					/* turns debug off */

	spool_static_$debug = 0;
	return;


     end spooling_dim_xtatch_;
