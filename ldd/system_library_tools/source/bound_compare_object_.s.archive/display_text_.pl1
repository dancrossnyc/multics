/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* program to display output text produced by pl/1

   Initial Version: 17 October, 1968
	Modified: 19 August 1972 by BLW
	Modified:	20 February 1973 by RAB for multiple base-regs
	Modified:	3 July 1973 by RAB for EIS	
	Modified:	29 April 1974 by RAB for use with compare_object	
	Modified: 2 May 1977 by SHW for new format operator_names_
*/

display_text_: proc(t_pt,r_pt,delta,number,t_size,onp);

dcl	t_pt	ptr,	/* points at text base */
	r_pt	ptr,		/* points at relocation base */
	delta	fixed bin,	/* offset of starting position */
	number	fixed bin,	/* number to print */
	t_size	fixed bin,	/* size of text */
	onp	ptr;		/* pointer to appropriate operator name segment */

dcl	(p,q,line_pt,pt) ptr,
	(i,j,k,m,mop,n,save_k,irand,nrands,ndesc) fixed bin,
	(fract_offset,offset,size,scale) fixed bin(18),
	(ignore_ic_mod,double,eis,eis_desc,need_comma,ext_base,itag,has_ic,decimal) bit(1),
	nl char(1) int static aligned init("
"),
	ht char(1) int static aligned init("	"),	/* tab */
	htht char(2) int static aligned init("		"),	/* two tabs */
	(c,c2) char(1),
	cstring char(12),
	op_code char(5),
	tag char(3),
	line char(256),
	iox_$user_output ptr ext,
	pl1_operator_names_$pl1_operator_names_ ext,
	cobol_operator_names_$cobol_operator_names_ ext,
	pl1_operators_$operator_table fixed bin ext,
	binoct entry(aligned bit(*)) returns (char(12) aligned),
	iox_$put_chars entry (ptr,ptr,fixed bin,fixed bin(35));

dcl	(abs,addr,addrel,baseptr,divide,fixed,min,mod,null,ptr,rel,string,substr,unspec,rtrim,char,length) builtin;

%include operator_names;

dcl	1 op_mnemonic_$op_mnemonic(0:1023) ext static aligned,
		2 opcode		char(6) unal,
		2 dtype		fixed bin(2) unal,	/* 0 - desc9a, 1 - descb, 2 - decimal */
		2 num_desc	fixed bin(5) unal,
		2 num_words	fixed bin(8) unal;

dcl	1 name_pair	aligned based(p),
	2 rel_ptr		unaligned bit(18),		/* ptr to ascii string */
	2 size		unaligned bit(18);		/* size of string */

dcl	based_string aligned char(size) based(p);

dcl	digit(0:9) char(1) aligned int static
	init("0", "1", "2", "3", "4", "5", "6", "7", "8", "9");

dcl	relocation(-1:11) char(1) aligned int static
	init("a", "t", "1", "2", "3", "l", "d", "s", "7", "8", "i", "r", "e");

dcl	base(0:7) char(4) aligned int static
	init("pr0|","pr1|","pr2|","pr3|","pr4|","pr5|","pr6|","pr7|");

dcl	modifier(0:63) char(3) aligned int static
	init("n", "au", "qu", "du", "ic", "al", "ql", "dl",
	     "0", "1", "2", "3", "4", "5", "6", "7",
	     "*", "au*", "qu*", "...", "ic*", "al*", "ql*", "...",
	     "0*", "1*", "2*", "3*", "4*", "5*", "6*", "7*",
	     (8)(1)"...",
	     (8)(1)"...",
	     "*n", "*au", "*qu", "...", "*ic", "*al", "*ql", "...",
	     "*0", "*1", "*2", "*3", "*4", "*5", "*6", "*7");

dcl	word(0:1) bit(36) aligned based(p);

dcl	1 instruction	based(p) aligned,
	2 base		unaligned bit(3),
	2 offset		unaligned bit(15),
	2 op_code		unaligned bit(10),
	2 unused		unaligned bit(1),
	2 ext_base	unaligned bit(1),
	2 tag		unaligned bit(6);

dcl	1 half		based(p) aligned,
	2 left		unaligned bit(18),
	2 right		unaligned bit(18);

dcl	1 rel_tab		based(p) aligned,
	2 dummy_l		unaligned bit(14),
	2 left		unaligned bit(4),
	2 dummy_r		unaligned bit(14),
	2 right		unaligned bit(4);

dcl	1 mod_factor	aligned,
	2 ext_base	bit(1) unal,
	2 length_in_reg	bit(1) unal,
	2 indirect_descriptor bit(1) unal,
	2 tag		bit(4) unal;

dcl	mf(3) fixed bin(6) int static init(30,12,3);	/* location of modification factor fields in EIS inst */

dcl	1 packed_ptr_st based aligned,
	2 packed_ptr	ptr unal;

dcl	(ebase,len_reg,ic) (3) bit(1) aligned;
dcl	desc_word char(8) varying;

dcl	desc_op(0:3) char(8) varying int static init("desc9a","descb","desc9fl","desc9ls");

dcl	eis_modifier(0:15) char(3) aligned int static
	init("n", "au", "qu", "du", "ic", "al", "ql", "...",
	     "x0", "x1", "x2", "x3", "x4", "x5", "x6", "x7");

dcl	bool_word(0:15) char(6) aligned int static varying
	init("clear", "and", "andnot", "move", "", "", "xor", "or",
	     "", "", "", "", "invert", "", "nand","set");

dcl	1 descriptor	based aligned,	/* EIS descriptor */
	2 address		bit(18) unal,
	2 char		bit(2) unal,
	2 bit		bit(4) unal,
	2 length		bit(12) unal;

%include cgsystem;


begin:	p = addrel(t_pt,delta);
	q = addrel(r_pt,delta);

	line_pt = addr(line);
	eis = "0"b;
	irand = 0;
 
	do i = 1 to number;

	     tag = "   ";
	     substr(line,1,6) = binoct(rel(p));
	     substr(line,7,2) = "  ";

	     if r_pt = null
	     then do;
		substr(line,9,4) = "  ";
		go to body;
		end;

	     if q -> rel_tab.dummy_l then k = fixed(q -> rel_tab.left,4);
	     else k = -1;

	     substr(line,9,1) = relocation(k);

	     if q -> rel_tab.dummy_r then k = fixed(q -> rel_tab.right,4);
	     else k = -1;

	     substr(line,10,3) = relocation(k);

body:	     cstring = binoct(p -> word(0));

	     if ^ eis
	     then do;
		mop = fixed(p->instruction.op_code,10);
		op_code = opcode(mop);
		end;
	     else do;
		mop = 0;
		end;

	     if op_code = ".... "
	     then do;
not_ins:		substr(line,13,3) = "   ";
		substr(line,16,5) = substr(cstring,1,5);
		substr(line,21,7) = substr(cstring,6,7);
		k = 28;
		goto prt;
		end;

	     if num_words(mop) > 1
	     then do;

		/* EIS */

		call init_eis;

		substr(line,13,4) = substr(cstring,1,3);
		substr(line,17,4) = substr(cstring,4,3);
		substr(line,21,4) = substr(cstring,7,3);
		substr(line,25,3) = substr(cstring,10,3);

		substr(line,28,1) = ht;
		substr(line,29,5) = op_code;
		substr(line,34,1) = ht;

		k = 35;

		do j = 1 to ndesc;
		string(mod_factor) = substr(p -> word(0),mf(j),7);
		ebase(j) = mod_factor.ext_base;
		len_reg(j) = mod_factor.length_in_reg;

		substr(line,k,1) = "(";
		k = k + 1;
		need_comma = "0"b;

		if ebase(j)
		then do;
		     substr(line,k,2) = "pr";
		     k = k + 2;
		     need_comma = "1"b;
		     end;

		if len_reg(j)
		then do;
		     if need_comma
		     then do;
			substr(line,k,1) = ",";
			k = k + 1;
			end;
		     substr(line,k,2) = "rl";
		     k = k + 2;
		     need_comma = "1"b;
		     end;

		if mod_factor.tag
		then do;
		     if need_comma
		     then do;
			substr(line,k,1) = ",";
			k = k + 1;
			end;
		     ic(j) = mod_factor.tag = "0100"b;		/* IC */
		     substr(line,k,2) = eis_modifier(fixed(mod_factor.tag,4));
		     k = k + 2;
		     end;
		else ic(j) = "0"b;

		substr(line,k,2) = "),";
		k = k + 2;
		end;


		if substr(p -> word(0),10,1)
		then do;
		     substr(line,k,12) = "enablefault,";
		     k = k + 12;
		     end;

		if desc_word = "desc9a"
		then if ndesc < 3
		     then do;
			if substr(op_code,1,2) ^= "sc"
			     then substr(line,k,5) = "fill(";
			     else substr(line,k,5) = "mask(";
			k = k + 5;
			substr(line,k,3) = substr(cstring,1,3);
			k = k + 3;
			substr(line,k,1) = ")";
			k = k + 1;
			end;
		     else k = k - 1;
		else if desc_word = "descb"
		     then do;
			substr(line,k,5) = "fill(";
			k = k + 5;
			substr(line,k,1) = digit(fixed(substr(p -> word(0),1,1),1));
			k = k + 1;
			substr(line,k,1) = ")";
			k = k + 1;
			if op_code ^= "cmpb "
			then do;
			     substr(line,k,6) = ",bool(";
			     k = k + 6;
			     j = fixed(substr(p -> word(0),6,4),4);
			     m = length(bool_word(j));
			     if m > 0
			     then do;
				substr(line,k,m) = bool_word(j);
				k = k + m;
				end;
			     else do;
				substr(line,k,1) = digit(fixed(substr(p -> word(0),6,1),1));
				substr(line,k+1,1) = digit(fixed(substr(p -> word(0),7,3),3));
				k = k + 2;
				end;
			     substr(line,k,1) = ")";
			     k = k + 1;
			     end;
			end;
		     else if substr(p -> word(0),11,1)
			then do;
			     substr(line,k,5) = "round";
			     k = k + 5;
			     end;
			else k = k - 1;

		irand = 0;
		go to prt;
		end;

	     double, ignore_ic_mod = "0"b;

	     eis_desc = eis & desc_word ^= "arg";
	     if eis_desc
	     then do;
		substr(line,13,2) = "  ";
		substr(line,15,6) = substr(cstring,2,5);
		substr(line,21,3) = substr(cstring,7,2);
		substr(line,24,4) = substr(cstring,9,4);

		substr(line,28,1) = ht;

		if decimal
		     then desc_word = desc_op(2 + fixed(p -> descriptor.bit,4));
		if irand > 1
		then if op_code = "dtb  " | op_code = "mvne "
		     then desc_word = desc_op(0);
		     else;
		else if op_code = "btd  "
		     then desc_word = desc_op(0);

		substr(line,29,length(desc_word)) = desc_word;
		k = length(desc_word) + 29;

		ext_base = ebase(irand);
		itag = len_reg(irand);
		if itag
		     then tag = eis_modifier(fixed(substr(p -> descriptor.length,9,4),4));
		has_ic = ic(irand);
		go to chk_ext;
		end;

	     if op_code = "rpd  " then goto set;
	     if op_code = "rpt  " then goto set;

	     if p -> instruction.unused then goto not_ins;

	     if num_desc(mop) ^= 0
	     then do;
si:		tag = substr(binoct((p -> instruction.tag)),1,2);
		ignore_ic_mod = "1"b;
		goto set;
		end;

	     if p -> instruction.tag
	     then do;
		tag = modifier(fixed(p -> instruction.tag,6));
		if tag = "..." then goto not_ins;
		end;

set:	     substr(line,13,2) = "  ";
	     substr(line,15,6) = substr(cstring,2,5);
	     substr(line,21,5) = substr(cstring,7,4);
	     substr(line,26,2) = substr(cstring,11,2);

	     substr(line,28,1) = ht;
	     k = 29;

	     substr(line,k,5) = op_code;

	     c = substr(line,k+3,1);

	     double = substr(op_code,1,2) = "df" | substr(op_code,3,2) = "aq" | substr(op_code,4,2) = "aq";

	     ext_base = p -> instruction.ext_base;
	     itag = p -> instruction.tag ^= "000000"b;
	     has_ic = p -> instruction.tag = "000100"b;	/* IC */

	     k = 34;
chk_ext:
chk_ext1:	     substr(line,k,1) = ht;
	     k = k + 1;

	     save_k = k;

	     if ^ eis
	     then if p -> instruction.unused
		then do;

		     /* have rpd | rpt instruction */

		     tag = digit(fixed(p -> instruction.tag,6));
		     offset = fixed(substr(p -> half.left,1,8),8);
		     ignore_ic_mod = "1"b;
		     goto sk;
		     end;

	     if ext_base
	     then do;
		substr(line,k,4) = base(fixed(p -> instruction.base,3));
		offset = fixed(p -> instruction.offset,15);
		if offset > 16384 then offset = offset - 32768;
		k = k+4;
		j = 13;
		end;
	     else do;
		offset = fixed(p -> half.left,18);

		if offset > 131072
		then do;
		     if tag = "du " then goto sk;
		     if tag = "dl " then goto sk;
		     offset = offset - 262144;	/* 2's comp */
		     end;

sk:		j = 14;
		end;

	     substr(line,j,1) = cstring;

	     call bin2dec(offset);

	     if eis_desc
	     then do;
		if desc_word = "descb"
		     then fract_offset = fixed(p -> descriptor.char,2) * bits_per_char + fixed(p -> descriptor.bit,4);
		     else fract_offset = fixed(p -> descriptor.char,2);
		if fract_offset ^= 0
		then do;
		     substr(line,k,1) = "(";
		     k = k + 1;
		     call bin2dec(fract_offset);
		     substr(line,k,1) = ")";
		     k = k + 1;
		     end;
		end;

	     if itag
	     then do;
		substr(line,k,1) = ",";
		substr(line,k+1,3) = tag;

		k = k + 2;
		if substr(line,k,1) ^= " " then k = k + 1;
		if substr(line,k,1) ^= " " then k = k + 1;
		end;
	     else if eis_desc
		then do;
		     substr(line,k,1) = ",";
		     k = k + 1;
		     if desc_word = "desc9ls"
		     then do;
			call bin2dec(fixed(substr(p -> descriptor.length,7,6),6));
			substr(line,k,1) = ",";
			k = k + 1;
			scale = fixed(substr(p -> descriptor.length,1,6),6);
			if scale >= 32
			     then scale = scale - 64;
			call bin2dec(scale);
			end;
		     else call bin2dec(fixed(p -> descriptor.length,12));
		     end;

	     if ignore_ic_mod then goto chk_base;

	     if has_ic
	     then do;
		substr(line,k,2) = htht;
		k = k + 2;

		pt = addrel(p,offset-irand);
		substr(line,k,6) = binoct(rel(pt));

		k = k + 6;

		if substr(op_code,1,1) = "t" then goto prt;
		if fixed(rel(pt),18) > t_size then goto prt;

		substr(line,k,1) = " ";
		k = k + 1;

equal:		substr(line,k,2) = "= ";
		substr(line,k+2,12) = binoct(pt -> word(0));
		k = k + 14;

		if double
		then do;
		     substr(line,k,1) = " ";
		     substr(line,k+1,12) = binoct(pt -> word(1));
		     k = k + 13;
		     end;

		goto prt;
		end;

chk_base:	     if onp = null then go to prt;		/* Means don't want to print operator names */

	     if ^ p -> instruction.ext_base then go to prt;

	     if p -> instruction.base then go to prt;

	     if op_code = "xec  "
	     then do;
		pt = addrel(addr(pl1_operators_$operator_table),offset);
		mop = fixed(pt -> instruction.op_code,10);
		if num_words(mop) > 1
		then do;

		     /* we are executing an EIS instruction in pl1_operators_ */

		     call init_eis;

		     do j = 1 to ndesc;
			ebase(j) = "1"b;
			len_reg(j) = ^ decimal;
			ic(j) = "0"b;
			end;

		     irand = 0;
		     end;
		end;

	     if itag then goto prt;

	     if substr(op_code,1,1) ^= "t"
	     then do;
		if offset >= onp -> operator_names.first then goto prt;
		pt = addrel(addr(pl1_operators_$operator_table),offset);
		substr(line,k,2) = htht;
		k = k + 2;
		goto equal;
		end;

	     op_names_pt = onp;

	     if offset >= operator_names.first & offset <= operator_names.last
	     then do;
		pt = addr (operator_names.names(offset));
		goto str_info;
		end;


	     else if offset >= operator_names.first_special & offset <= operator_names.last_special
	     then do;
		do j = 1 to operator_names.number_special;
		     if operator_names.special(j).offset = offset
		     then do;
			pt = addr(operator_names.special(j).namep);
			goto str_info;
			end;
		     end;
		goto prt;
		end;

str_info:	     size = fixed(pt -> name_pair.size,18);
	     pt = ptr(pt,pt -> name_pair.rel_ptr);

	     substr(line,k,2) = htht;
	     k = k + 2;

	     substr(line,k,size) = pt -> based_string;
	     k = size + k;

prt:	     substr(line,k,1) = nl;

	     call iox_$put_chars(iox_$user_output,line_pt,k,(0));

	     if eis
	     then do;
		irand = irand + 1;
		if irand > nrands
		then do;
		     eis = "0"b;
		     irand = 0;
		     end;
		else if irand > ndesc
		     then op_code, desc_word = "arg";
		end;

	     p = addrel(p,1);
	     q = addrel(q,1);
	     end;

	return;

bin2dec:	     proc(number);

dcl	     number fixed bin(18);

	     substr(line,k,length(ltrim(char(number)))) = ltrim(char(number));
	     k = k + length(ltrim(char(number)));

	     end;


init_eis:	     proc;

	     eis = "1"b;
	     nrands = num_words(mop) - 1;
	     ndesc = num_desc(mop);
	     decimal = dtype(mop) = 2;
	     desc_word = desc_op(dtype(mop));

	     end;

	end;
