/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

compare_link_:	proc(optr,a_diff,a_brief,segptr);

/* Changed to use interpret_link_info.incl.pl1 05/12/83 S. Herbst */

dcl	optr pointer;
dcl	a_diff bit(1) unaligned;
dcl	a_brief bit(1) unaligned;
dcl	segptr pointer;

%include object_info;


%include interpret_link_info;
%include linkdcl;

dcl	1 oi(2) based(optr) aligned like object_info;

dcl	1 seg based(segptr),
		2 p(4) pointer,	/* segment pointers */
		2 sname(2) char(200) aligned;	/* segment names */


dcl	differ bit(1) aligned init("0"b);
dcl	brief bit(1) aligned;


/* Linkage Info for printing */

dcl 1 link_info (2) aligned like interpret_link_info;


dcl	liptr(2) ptr;
dcl	lptr(2) pointer;

dcl	rptr(2) pointer;	/* relocation pointers */

dcl	lp(2) pointer;
dcl	sp(2) pointer;
dcl	tp(2) pointer;

dcl	relwrd(oi.llng(1)+oi.llng(2)) based(rptr(1)) fixed bin(17);

dcl	even bit(1) aligned init("1"b);
dcl	last_ne bit(1) aligned init("0"b);

dcl	code fixed bin(17);
dcl	first bit(1) aligned init("1"b);
dcl	limit fixed bin(17);
dcl	loff(2) fixed bin(17);
dcl	(i,j) fixed bin(17);
dcl	lword fixed bin(17) based;
dcl	nwords fixed bin (17);
dcl	nw(2) fixed bin(17);
dcl	rname char(14) int static init("compare_object");
dcl	start(2) fixed bin(17);
dcl	word(limit) fixed bin(17) based;

/* Function Definitions */

dcl	ioa_ entry options (variable);
dcl	display_text_ entry(ptr,ptr,fixed bin,fixed bin,fixed bin);
dcl	com_err_ entry options(variable);
dcl	interpret_link_$tptr entry(ptr,ptr,ptr,fixed bin);
dcl	(addr,addrel,divide,fixed,min,size,string,substr) builtin;

/* INITIALIZE */

	brief = a_brief;
	substr(link_info(1).entry_point_name,33,4) = "    ";
	substr(link_info(2).entry_point_name,33,4) = "    ";
	liptr(1) = addr(link_info(1));
	liptr(2) = addr(link_info(2));
	lp(1) = oi.linkp(1);
	lp(2) = oi.linkp(2);
	tp(1) = oi.textp(1);
	tp(2) = oi.textp(2);


/* COMPARE INTERNAL STATIC */

	if ^ oi.separate_static(1)
	then do;
	     do i=1 to 2;
	     nw(i) = fixed(lp(i) -> header.begin_links,18) - size(header);
	     end;

	     call comp_stat(lp,size(header));
	     end;

/* COMPARE LINKS */
/* zero out relocation bits */

	rptr(1) = p(3);
	rptr(2) = addrel(rptr(1),oi.llng(1));
	relwrd = 0;

/* initialize search */

	first = "1"b;
	do i = 1 to 2;
		loff(i) = fixed(lp(i) -> header.begin_links,17);
		nw(i) = oi.llng(i) - loff(i);
	end;

/* Check for same number of links */

	if nw(1) = nw(2) then limit = nw(1);
	else
	do;
		limit = min(nw(1),nw(2));
		differ = "1"b;
		call ioa_("^/**^a has ^d words of links while ^a has ^d words of links.",
			sname(1),nw(1),sname(2),nw(2));
	end;

/* MAIN COMPARISON LOOP */

	do i = 1 to limit;
		lptr(1) = addrel(lp(1),loff(1));
		lptr(2) = addrel(lp(2),loff(2));
		if even then	/* if even we have to look for ft2 flags */
		do;
			if lptr(1)->link.ft2 ^= lptr(2)->link.ft2 then go to odd;
			if lptr(1)->link.ft2 ^= "100110"b then go to odd;

			/* We've found 2 link pairs */

			if last_ne then call badtext;
			do j = 1 to 2;
				link_info(j).version = INTERPRET_LINK_INFO_VERSION_1;
				call interpret_link_$tptr(liptr(j),lptr(j),tp(j),code);
				if code ^= 0 then
				do;
					call com_err_(code,rname,sname(j));
					go to return;
				end;
			end;
			if string(link_info(1)) ^= string(link_info(2)) then
			do;
				differ = "1"b;
				if ^brief then
				do;
					if first then call title;
					do j = 1 to 2;
						call ioa_("^a(^o):^-^a^a^a^a^a",
							sname (j), loff (j),
							link_info (j).segment_name,
							link_info (j).entry_point_name,
							link_info (j).expression,
							link_info (j).modifier,
							link_info (j).trap);
					end;
					call ioa_("^/");
				end;
			end;
			i = i + 1;
			loff(1) = loff(1) + 2;
			loff(2) = loff(2) + 2;
		end;

		/* We have plain text (entry sequences) to check */

		else
odd:		do;
			if last_ne then if lptr(1)->lword=lptr(2)->lword then call badtext;
				else;
			else if lptr(1)->lword ^= lptr(2)->lword then
				do;
					last_ne = "1"b;
					start(1) = loff(1);
					start(2) = loff(2);
				end;
			even = ^even;
			loff(1) = loff(1) + 1;
			loff(2) = loff(2) + 1;
		end;
	end;
	if last_ne then call badtext;
/* RETURN SECTION */

return:	a_diff = differ;
	return;

/* COMPARE STATIC */

compare_static_:	entry(optr,a_diff,a_brief,segptr);

	brief = a_brief;
	sp(1) = oi.statp(1);
	sp(2) = oi.statp(2);
	nw(1) = oi.ilng(1);
	nw(2) = oi.ilng(2);
	call comp_stat(sp,0);
	a_diff = differ;
	return;

/* COMP_STAT */

comp_stat:     proc(pt,inc);

dcl	(p(2),pt(2)) ptr;
dcl	inc fixed bin;

	p(1) = pt(1);
	p(2) = pt(2);

	if nw(1) = nw(2)
	then limit = nw(1) + inc;
	else do;
	     limit = min(nw(1),nw(2)) + inc;
	     differ = "1"b;
	     call ioa_("^/**Internal static for ^a has ^d words while that of ^a has ^d words.",
		     sname(1),nw(1),sname(2),nw(2));
	     end;

	do i = inc + 1 to limit;
	if p(1) -> word(i) ^= p(2) -> word(i)
	then do;
	     differ = "1"b;
	     if ^ brief
	     then do;
		if first
		then do;
		     first = "0"b;
		     call ioa_
("^/**Internal Static Discrepancies^/^/Location^-^-^2xSegment 1^-^2xSegment 2^/");
		     end;
		call ioa_("^o^-^-^w^-^w",i-1,p(1)->word(i),p(2)->word(i));
		end;
	     end;
	end;

end;

/* BADTEXT */

badtext:	proc;
	nwords = loff(1) - start(1);
	last_ne = "0"b;
	differ = "1"b;
	if ^brief then
	do;
		if first then call title;
		do j = 1 to 2;
			call ioa_("^/^a:",sname(j));
			call display_text_(lp(j),rptr(j),start(j),nwords,oi.llng(j));
		end;
		call ioa_("^/");
	end;
end;

/* TITLE */

title:	proc;
	first = "0"b;
	call ioa_("^/**Link discrepancies have been found.^/");
end;

end;
