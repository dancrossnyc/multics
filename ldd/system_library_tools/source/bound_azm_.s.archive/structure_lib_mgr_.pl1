/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */
structure_lib_mgr_: 
     procedure ();

	return;					/* not an entrypoint */

/* Written 30 May 1983, W. Olin Sibert (from struct_seg_man_) */
/* Modified for mr10.2 to not use a search list at all. Instead the pathname is hardcoded in. B. Braun 09/15/83 */
/* Modified at some later time to use the search list after all. */
/* Modified 1984-10-03 BIM to make archive components work,
	  remove search list setting (in favor of .search segment),
	  and add get_segment_ptr entrypoint. */

/* * 	STRUCTURE_LIB_MGR_ (nee struct_seg_man_)
   *
   *      This is the procedure used to locate the library segments for the
   *	structure display facility in analyze_multics, and manage the
   *	structure search list. The reason for the extra layer of
   * 	procedure being used here is to provide an easy interface to 
   *	get segment pointers, which are remembered in an array internal
   *      to this program. The array is rebuilt whenever the search list
   *      changes, and also if any error ever occurs accessing one of the
   *      segments.
   *
   */

dcl  P_seg_idx fixed bin parameter; 
dcl  P_segp pointer parameter;
dcl  P_bit_count fixed bin (24);
dcl  P_comp_name char (*);
dcl  P_headerp pointer parameter;
dcl  P_pathname char (*) parameter;
dcl  P_known_list_ptr pointer;
dcl  P_known_list_size fixed bin;
dcl  P_code fixed bin (35) parameter;

dcl  code fixed bin (35);

dcl  last_change_idx fixed bin (71) internal static init (-137); /* used to decide whether search list has changed */
dcl  change_idx_ptr pointer internal static init (null ());

dcl  seg_info_ptr pointer internal static init (null ());	/* address of seg pointer array */
dcl  alloc_seg_info_count fixed bin;

dcl 1 seg_info based (seg_info_ptr),
    2 count fixed bin,
    2 max_count fixed bin,
    2 array (alloc_seg_info_count refer (seg_info.count)) like seg_info_entry;

dcl 1 seg_info_entry aligned based,
    2 seg_ptr pointer,
    2 header_ptr pointer,
    2 time_compiled fixed bin (71),
    2 pl1_root pointer,
    2 known_list_ptr pointer,
    2 known_list_size fixed bin,     
    2 pathname char (168) unaligned,
    2 name char (32) unaligned;

dcl 1 temp_seg_info aligned like seg_info_entry automatic;

dcl  com_err_ entry options (variable);
dcl  component_info_$name entry (pointer, char (*), pointer, fixed bin (35));
dcl  expand_pathname_$component entry (character (*), character (*), character (*), character (*),
	fixed binary (35));
dcl  get_system_free_area_ entry returns (pointer);
dcl  initiate_file_$component entry (character (*), character (*), character (*), bit (*), pointer,
	fixed binary (24), fixed binary (35));
dcl  object_info_$brief entry 
    (pointer, fixed bin (24), pointer, fixed bin (35));
dcl  pathname_$component entry (character (*), character (*), character (*)) returns(character (194));
dcl  search_paths_$set entry (character (*), pointer, pointer, fixed binary (35));
dcl  search_paths_$get entry (char (*), 
     bit (36), char (*), pointer, pointer, fixed bin, pointer, fixed bin (35));
dcl  stu_$find_runtime_symbol entry (pointer, char (*), pointer, fixed bin (35)) returns (pointer);

dcl  error_table_$oldobj fixed bin (35) external static;
dcl  error_table_$no_search_list fixed bin (35) external static;
dcl  error_table_$new_search_list fixed bin (35) external static;
dcl  error_table_$bad_segment fixed bin (35) external static;
dcl  error_table_$zero_length_seg fixed bin (35) external static;

dcl  WHOAMI char (32) internal static options (constant) init ("structure_lib_mgr_");
dcl  SDL_LIST_NAME char (32) internal static options (constant) init ("structure");

dcl (cleanup, out_of_bounds, no_read_permission, 
     not_in_read_bracket, seg_fault_error) condition;

dcl (addr, codeptr, length, hbound, null, substr) builtin;

%include access_mode_values;

/*  */

/* This entry returns information about the "next" segment in the search
   list. It assumes that the search list does not change between calls
   to this entrypoint, though if it does, the effect should be largely 
   benign.  The first call should initialize P_seg_idx to zero; subsequent
   calls will increment P_seg_idx, and a null pointer will be returned
   when there are no more segments to be had.
   */

structure_lib_mgr_$next_segment:
     entry (P_seg_idx,
	P_segp, P_headerp, P_pathname, P_known_list_ptr, P_known_list_size);


	P_segp = null ();				/* Default values for initialization */
	P_headerp = null ();
	P_pathname = "";

	P_seg_idx = P_seg_idx + 1;			/* get the next one, and return it */

	if ^get_seg_info () then return;		/* get the array */

	if (P_seg_idx > seg_info.count) then return;	/* all used up; just return */

	P_segp = seg_info.seg_ptr (P_seg_idx);
	P_headerp = seg_info.header_ptr (P_seg_idx);
	P_pathname = seg_info.pathname (P_seg_idx);
	P_known_list_ptr = seg_info.known_list_ptr (P_seg_idx);
	P_known_list_size = seg_info.known_list_size (P_seg_idx);

	return;					/* end of code for $next_segment */

/*  */

/* This entrypoint gets relevant information about a specific segment */

structure_lib_mgr_$get_segment:
     entry (P_pathname, 
          P_segp, P_headerp, P_known_list_ptr, P_known_list_size, P_code);


	if ^find_segment (P_pathname, addr (temp_seg_info), "0"b) then do;
	     P_segp = null ();
	     P_headerp = null ();
	     P_known_list_ptr = null ();
	     P_known_list_size = 0;
	     P_code = code;
	     return;
	     end;

	P_segp = temp_seg_info.seg_ptr;
	P_headerp = temp_seg_info.header_ptr;
	P_known_list_ptr = temp_seg_info.known_list_ptr;
	P_known_list_size = temp_seg_info.known_list_size;
	P_code = 0;
	return;

/**** This entrypoint takes a segment pointer, and does the object segment
      analysis. */

structure_lib_mgr_$get_segment_ptr:
     entry (P_segp, P_bit_count, P_comp_name, P_headerp, P_known_list_ptr, 
	  P_known_list_size, P_code);

	if ^find_segment$$analyze (P_segp, P_bit_count, P_comp_name, addr (temp_seg_info))
	then do;
	     P_headerp = null ();
	     P_known_list_ptr = null ();
	     P_known_list_size = 0;
	     return;
	end;

	P_headerp = temp_seg_info.header_ptr;
	P_known_list_ptr = temp_seg_info.known_list_ptr;
	P_known_list_size = temp_seg_info.known_list_size;
	P_code = 0;
	return;

/*  */

get_seg_info: 
     procedure () returns (bit (1) aligned);

/* This procedure fills in the seg_info array whenever the search list changes.
   It returns a bit indicating whether it was successful at getting it. 
   */

dcl  idx fixed bin;
dcl  idx1 fixed bin;
dcl  next_seg_idx fixed bin;
dcl  original_num_paths fixed bin;
dcl  update_sw bit (1) aligned;
dcl  system_area_ptr pointer;
dcl  system_area area based (system_area_ptr);


	if ^search_list_changed () then return ("1"b);	/* OK if it's still the same */

	system_area_ptr = get_system_free_area_ ();
	sl_info_p = null ();			/* prepare for cleanup handler */

	on condition (cleanup) begin;
	     if (sl_info_p ^= null ()) then
		free sl_info in (system_area);
	     end;

	call search_paths_$get (SDL_LIST_NAME, sl_control_default, "", null (), addr(system_area), (1), sl_info_p,
	     code);


	if code ^= 0 then do;
	     call com_err_ (code, WHOAMI, "Cannot get ^a search list.", SDL_LIST_NAME);
	     return ("0"b);
	     end;



	if (sl_info.num_paths = 0) then do;		/* nothing there already */
	     call com_err_ (0, WHOAMI, "The ^a search list is empty.", SDL_LIST_NAME);
	     goto GET_SEG_INFO_RETURNS;
	     end;

	if (seg_info_ptr ^= null ()) then do;		/* free old one */
	     free seg_info in (system_area);
	     seg_info_ptr = null ();
	     end;

	original_num_paths = sl_info.num_paths;		/* Used to reset so extents will be correct when freeing */

	alloc_seg_info_count = sl_info.num_paths;
	allocate seg_info in (system_area) set (seg_info_ptr);

	seg_info.max_count = alloc_seg_info_count;
	seg_info.count = 0;
	next_seg_idx = 1;				/* Index of next entry to fill in */
	update_sw = "0"b;				/* Whether we need to re-set the list afterwards */

	do idx = 1 to sl_info.num_paths;		/* loop through and initiate all the search paths */
	     if (sl_info.paths (idx).type ^= ABSOLUTE_PATH) then do;
		call com_err_ (0, WHOAMI, "Removing invalid search path ^a.", sl_info.paths (idx).pathname);

		update_sw = "1"b;
		goto NEXT_SEARCH_PATH;
		end;

	     if ^find_segment (sl_info.paths (idx).pathname, addr (seg_info.array (next_seg_idx)), "1"b) then do;
		update_sw = "1"b;			/* Must update */
		goto NEXT_SEARCH_PATH;		/* We've already printed a message */
		end;

	     do idx1 = 1 to seg_info.count;		/* Check for duplications now */
		if (seg_info.header_ptr (idx1) = seg_info.header_ptr (next_seg_idx)) then do;
		     call com_err_ (0, WHOAMI, 
			"^a appears multiply in the ^a search list.^/^3xExtra instances will be removed.", 
			seg_info.pathname (idx1), SDL_LIST_NAME);
		     update_sw = "1"b;
		     goto NEXT_SEARCH_PATH;		/* Only one duplication can ever occur at a time, */
		     end;				/* since others would have been detected already */
		end;

	     seg_info.count = next_seg_idx;
	     next_seg_idx = next_seg_idx + 1;		/* Go on to the next slot */

	     if (sl_info.paths (idx).pathname ^= seg_info.pathname (seg_info.count)) then
		update_sw = "1"b;			/* update to include the suffix */

NEXT_SEARCH_PATH:
	     end;

	if update_sw then do;			/* Update back into the search list */
	     do idx = 1 to seg_info.count;
		sl_info.paths (idx).type = ABSOLUTE_PATH;
		sl_info.paths (idx).pathname = seg_info.pathname (idx);
		sl_info.paths (idx).code = 0;
		end;

	     sl_info.num_paths = seg_info.count;
	     call search_paths_$set (SDL_LIST_NAME, (null ()), sl_info_p, (0));
	     if (sl_info.num_paths = 0) then
		call com_err_ (0, WHOAMI, "The ^a search list is empty.", SDL_LIST_NAME);
	     end;

	last_change_idx = sl_info.change_index;
	change_idx_ptr = sl_info.change_index_p;

GET_SEG_INFO_RETURNS:
	if (sl_info_p ^= null ()) then do;
	     sl_info.num_paths = original_num_paths;	/* not strictly necessary, but let's */
	     free sl_info in (system_area);		/* be polite to PL/I here */
	     end;

	if (seg_info_ptr = null ()) then return ("0"b);   /* Major failure */
	return (seg_info.count > 0);			/* Consider it OK if there are any */

	end get_seg_info;

/* */

search_list_changed:
     procedure () returns (bit (1) aligned);

dcl  idx fixed bin;
dcl  change_idx fixed bin (71) based;
dcl  time_compiled fixed bin (71);


	if (change_idx_ptr = null ()) then goto UPDATE;	/* First time */

	if (change_idx_ptr -> change_idx ^= last_change_idx) then goto UPDATE; /* It's changed */

	if (seg_info_ptr = null ()) then goto UPDATE;	/* In case something's screwed up */
	if (seg_info.count <= 0) then goto UPDATE;

	on condition (seg_fault_error) goto UPDATE;
	on condition (not_in_read_bracket) goto UPDATE;
	on condition (no_read_permission) goto UPDATE;
	on condition (out_of_bounds) goto UPDATE;
	
	do idx = 1 to seg_info.count;			/* Try to reference each one */
	     time_compiled = seg_info.header_ptr (idx) -> std_symbol_header.object_created;
	     if (time_compiled ^= seg_info.time_compiled (idx)) then goto UPDATE;
	     end;
	     
	return ("0"b);				/* If we make it through, nothing has changed, */
						/* and nothing needs recalculation */


UPDATE:
	return ("1"b);				/* one of the segments in the list */

	end search_list_changed;

/*  */

/* This procedure fills in seg_info information for the requested segment.
   A bit is returned indicating whether the segment could be found or not,
   and whether it turned out to be in the right format.
   */

find_segment: 
     procedure (P_pathname, P_seg_info_ptr, P_report_errors)
	returns (bit (1) aligned);

dcl  P_pathname char (*) parameter;
dcl  P_seg_info_ptr pointer parameter;
dcl  P_report_errors bit (1) aligned parameter;

dcl 1 P_seg_info aligned like seg_info_entry based (P_seg_info_ptr);

dcl  dname char (168);
dcl  ename char (32);
dcl  component char (32);
dcl  bitcount fixed bin (24);
dcl  segp pointer;
dcl  report_errors bit (1) aligned;

/* First, locate the segment in the hierarchy, and get a pointer to it */

          report_errors = P_report_errors;
	call locate_segment ();
	go to COMMON;

find_segment$$analyze:
	entry (P_segp, P_bitcount, P_comp_name, P_seg_info_ptr) returns (bit (1) aligned);
declare P_bitcount fixed bin (24);
declare P_segp pointer;
declare P_comp_name char (*);

	segp = P_segp;
	bitcount = P_bitcount;
	ename = P_comp_name; /* for component_info */
	report_errors = "0"b;

COMMON:

/* Now, try to find the symbol table header (these structure library segments
   are Multics standard object segments), and find the root of the PL/I
   block tree */

	call analyze_segment ();

	call find_structure_list ();

	return ("1"b);				/* If we get here, it worked */



FIND_SEGMENT_FAILS:
     return ("0"b);


invalid_segment:
     procedure (error_code);

dcl  error_code fixed bin (35) parameter;

	if report_errors then
	     call com_err_ (error_code, WHOAMI, 
	          "^a>^a.^/^3xRemoving it from the ^a search list.", 
	          dname, ename, SDL_LIST_NAME);

	code = error_code;
	goto FIND_SEGMENT_FAILS;

	end invalid_segment;

/*  */

locate_segment:					/* Procedure internal to find_segment */
     procedure ();

	call expand_pathname_$component (P_pathname, dname, ename, component, code);
	if code ^= 0 then do;
	     if report_errors then
	          call com_err_ (code, WHOAMI, "^a", P_pathname);
	     goto FIND_SEGMENT_FAILS;
	     end;

	call initiate_file_$component (dname, ename, component, R_ACCESS, segp, bitcount, code);
	if code ^= 0 then call invalid_segment (code);
	if (bitcount = 0) then 
	     call invalid_segment (error_table_$zero_length_seg);

	P_seg_info.seg_ptr = segp;
	P_seg_info.pathname = pathname_$component (dname, ename, component);
	P_seg_info.name = ename;

	return;
	end locate_segment;

/*  */

analyze_segment:
     procedure ();

dcl 1 oi aligned like object_info automatic;
dcl  hp pointer;
dcl  bp pointer; 
dcl  rootp pointer;


	oi.version_number = object_info_version_2;
	call object_info_$brief (segp, bitcount, addr (oi), code);
	if (code ^= 0) then call invalid_segment (code);

	P_seg_info.time_compiled = oi.symbp -> std_symbol_header.object_created;

	if oi.bound then do;			/* Get info about the component, then */
	     call component_info_$name (segp, ename, addr (ci), code);
	     if (code ^= 0) then call invalid_segment (code);
	     hp= ci.symb_start;
	     end;

	else hp= oi.symbp;			/* Only one for an unbound segment */

	if (hp -> std_symbol_header.identifier ^= "symbtree") then call invalid_segment (error_table_$oldobj);
	if (hp -> std_symbol_header.area_pointer = ""b) then call invalid_segment (error_table_$oldobj);
	
	bp = addrel (hp, hp -> std_symbol_header.area_pointer);
	if (bp -> pl1_symbol_block.identifier ^= "pl1info") then call invalid_segment (error_table_$oldobj);

	rootp = addrel (hp, bp -> pl1_symbol_block.root);
	if (rel (rootp) = ""b) then call invalid_segment (error_table_$oldobj);
	rootp = addrel (rootp, rootp -> runtime_block.son); /* Look in the outermost "real" block */
	if (rel (rootp) = ""b) then call invalid_segment (error_table_$oldobj);

	P_seg_info.header_ptr = hp;
	P_seg_info.pl1_root = rootp;

	return;
	end analyze_segment;

/*  */

find_structure_list:
     procedure ();
     
dcl  symp pointer;
dcl  idx fixed bin;
dcl  known_list (P_seg_info.known_list_size) char (32) unaligned based (P_seg_info.known_list_ptr);


	P_seg_info.known_list_ptr = null ();
	P_seg_info.known_list_size = 0;

	symp = stu_$find_runtime_symbol 
	     (P_seg_info.pl1_root, "STRUCTURES", (null ()), code);
	if (symp = null ()) then return;		/* No list of defined structures in this segment */

	if (binary (symp -> runtime_symbol.type, 6) ^= char_dtype) then goto INVALID;
	if (binary (symp -> runtime_symbol.ndims, 6) ^= 1) then goto INVALID;
	if (symp -> runtime_symbol.size ^= 32) then goto INVALID;
	if (symp -> runtime_symbol.bounds (1).lower ^= 1) then goto INVALID;
	if (symp -> runtime_symbol.bounds (1).upper > 1000) then goto INVALID;
	if (symp -> runtime_symbol.address.class ^= "1100"b) then goto INVALID;

	P_seg_info.known_list_ptr = pointer (symp, symp -> runtime_symbol.address.location);
	P_seg_info.known_list_size = symp -> runtime_symbol.bounds (1).upper;

	do idx = 1 to P_seg_info.known_list_size	/* Trim off blank entries */
		while (known_list (idx) ^= "");
	     P_seg_info.known_list_size = idx;
	     end;

	return;


INVALID:
	if report_errors 
	then call com_err_ (0, WHOAMI,
	     "The ""STRUCTURES"" list of known structures in ^a^/^3x must be declared as dim (XXX) char (32) internal static options (constant).",
	     pathname_$component (dname, ename, component));
	code = error_table_$bad_segment;
	goto FIND_SEGMENT_FAILS;

	end find_structure_list;

	end find_segment;

%page; %include sl_info;
%page; %include sl_control_s;
%page; %include object_info;
%page; %include component_info;
%page; %include std_symbol_header;
%page; %include pl1_symbol_block;
%page; %include runtime_symbol;
%page; %include std_descriptor_types;

	end structure_lib_mgr_;			/* external procedure */
