/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

azm_display_am_: proc (P_sci_ptr, P_amu_info_ptr, prds_sw, sdw_sw, ptw_sw, only_fulls,
	sdw_segno, ptw_pageno, P_code);

/* format: style4,delnl,insnl,ifthenstmt,indnoniterend,ifthendo,ifthen,^thendo */


/* Associative memory display program for analyze_multics.
   Taken from ol_dumps display_am by Rich Coppola Sept 1982.
*/

/* Parameters */

dcl  P_amu_info_ptr ptr;
dcl  P_sci_ptr ptr;
dcl  P_code fixed bin (35);
dcl  prds_sw bit (1);				/* "1"b = do AMs from prds */
dcl  sdw_sw bit (1);				/* "1"b = do SDWs only */
dcl  ptw_sw bit (1);				/* "1"b = do PTWs only */
dcl  only_fulls bit (1);				/* "1"b = display only full entries */
dcl  sdw_segno fixed bin;				/* display entries that have this segno */
dcl  ptw_pageno fixed bin;				/* display entries that have this pageno */


/* Automatic Data */

dcl  DPS8xxM bit (1);				/* "1"b = DPS8xxM type CPU */
dcl  IDX fixed bin;
dcl  code fixed bin (35);
dcl  data_buf_ptr ptr init (null);
dcl  dup_entry (0:63) bit (1) unal;
dcl  first fixed bin (18);
dcl  first_entry fixed bin;
dcl  first_level fixed bin;
dcl  flag_string char (7);
dcl  i fixed bin;
dcl  idx fixed bin;
dcl  index_changed bit (1) init ("0"b);
dcl  j fixed bin;
dcl  last_entry fixed bin;
dcl  last_level fixed bin;
dcl  nregs fixed bin;				/* # of regs 16/64 */
dcl  ptws_printed bit (1) init ("0"b);
dcl  pageno_sw bit (1) init ("0"b);
dcl  ptr_ptr ptr init (null);
dcl  ptw_hdr_printed bit (1);
dcl  ptw_level_printed bit (1) init ("0"b);
dcl  ptw_ptrs_ptr ptr;
dcl  ptw_regs_ptr ptr;
dcl  range fixed bin (18);
dcl  reg_ptr ptr init (null);
dcl  sci_ptr ptr;
dcl  sdw_hdr_printed bit (1);
dcl  sdw_level_printed bit (1) init ("0"b);
dcl  sdw_ptrs_ptr ptr;
dcl  sdw_regs_ptr ptr;
dcl  sdws_printed bit (1) init ("0"b);
dcl  seg_ptr pointer;
dcl  segno fixed bin;
dcl  segno_sw bit (1) init ("0"b);
dcl  temp_ptr ptr init (null);
dcl  usage_string char (8);

/* Constants */

dcl  AM_LEVEL (1:4) char (1) int static options (constant) init ("A", "B", "C", "D");
						/* levels of dps8 AMs */

/* Based */


dcl  last_three_sets bit (48 * 36) based;
dcl  1 ptw_regs (0:63) aligned like amptwreg based (ptw_regs_ptr);
dcl  1 ptw_ptrs (0:63) aligned like amptwptr based (ptw_ptrs_ptr);
dcl  1 sdw_regs (0:63) aligned like amsdwreg based (sdw_regs_ptr);
dcl  1 sdw_ptrs (0:63) aligned like amsdwptr based (sdw_ptrs_ptr);

/* External entries */

dcl  amu_$definition_ptr entry (ptr, char (*), char (*), fixed bin (35)) returns (ptr);
dcl  amu_$do_translation entry (ptr, fixed bin, ptr, fixed bin (18), fixed bin (18), fixed bin (35));
dcl  amu_$fdump_mpt_temp_change_idx entry (ptr, fixed bin);
dcl  amu_$fdump_mpt_revert_idx entry (ptr);
dcl  amu_$get_name entry (ptr, ptr) returns (char (*));
dcl  amu_$get_name_no_comp entry (ptr, ptr) returns (char (*));
dcl  amu_$return_val_per_process entry (ptr, fixed bin) returns (bit (1));
dcl  ssu_$get_temp_segment	entry (ptr, char(*), ptr);
dcl  ssu_$release_temp_segment	entry (ptr, ptr);
dcl  ioa_ entry options (variable);
dcl  ioa_$rsnnl entry options (variable);

dcl  (addr, addrel, baseno, binary, 
     baseptr, divide, fixed, lbound,
     null, rel)			builtin;

dcl  any_other condition;			
%page;

	amu_info_ptr = P_amu_info_ptr;
	sci_ptr = P_sci_ptr;
	P_code = 0;
	data_buf_ptr = null ();

	on condition (any_other) go to done;

	call set_up;
	     if sdw_sw then do;
	        call display_sdw;
	if sdws_printed = "0"b then do;
	   if segno_sw then		/* none printed and, */
						/* if we were looking for only one */
	     call ioa_ ("^/A valid entry for SEGNO ^o not found in SDWAM from ^[Dump^;prds$am_data^].",
	   sdw_segno, ^prds_sw);
	   end;
	end;

	if ptw_sw then do;
	   call display_ptw;
	if ptws_printed = "0"b then do;
	   if (pageno_sw | sdw_sw) then do;/* same as for SDWs */
	     if ptw_pageno = -1 then ptw_sw = "0"b;
	     call ioa_ ("^/A valid entry for ^[PAGENO ^o ^;^s^]^[of ^]^[ SEGNO ^o ^;^s^]not found in PTWAM from ^[Dump^;prds$am_data^].",
		ptw_sw, ptw_pageno, (ptw_sw & sdw_segno ^= -1), 
	        sdw_sw, sdw_segno, ^prds_sw);
	     end;
	  end;
         end;
done:
         if data_buf_ptr ^= null() then call ssu_$release_temp_segment(sci_ptr, data_buf_ptr);
         return;



%page;

display_ptw:
     proc;

	first_entry = 0;
	last_entry = 15;

	if DPS8xxM then do;
	     first_level = 1;
	     last_level = 4;
	     end;

	else do;
	     first_level = 1;
	     last_level = 1;
	     end;

	call validate_am_ptw;

	if ptw_pageno ^= -1 then pageno_sw = "1"b;
	if sdw_segno ^= -1 then segno_sw = "1"b;
	ptw_level_printed, ptw_hdr_printed = "0"b;

	do IDX = first_level to last_level;
	   ptw_level_printed = "0"b;
	     do idx = first_entry to last_entry;

		seg_ptr =
		     addrel (baseptr (binary (ptw_ptrs (idx).pointer, 15)), (binary (ptw_ptrs (idx).pageno, 12) * 16))
		     ;				/* get a pointer to the segment, so we can get its name */

		if (only_fulls & ^ptw_ptrs (idx).valid) then go to bypass_ptw;

		if (segno_sw & (fixed (ptw_ptrs (idx).pointer, 15) ^= sdw_segno)) then go to bypass_ptw;

		if pageno_sw then
		     if divide (binary (ptw_ptrs (idx).pageno, 12), 16, 12, 0) ^= ptw_pageno then go to bypass_ptw;
		if ^DPS8xxM then
		     call ioa_$rsnnl ("^6x^2d", usage_string, (0), binary (ptw_ptrs (idx).usage, 4));

		else call ioa_$rsnnl ("^2x^6b", usage_string, (0), ptw_ptrs (idx).usage);
		if ptw_hdr_printed = "0"b then do;
		     call ioa_ ("^/PTW Associative Memory ^[at the time of the dump^;at prds$am_data^].", ^prds_sw);
		     call ioa_ (" ADDRESS^3xM^2xF/E USAGE_CT SEG # PAGE SEG_NAME|OFFSET");
		     ptw_hdr_printed = "1"b;
		     end;

		if (DPS8xxM & ^ptw_level_printed) then do;
		     call ioa_ ("LEVEL [^a]", AM_LEVEL (IDX));
		     ptw_level_printed = "1"b;
		     end;

		call ioa_ (
		     "^8o^2x^[yes^;no ^]^2x^[F^;E^]^2x^8a ^5o ^4o ^[^a^;^s N/A^]^[^/^-*** POSSIBLE DUPLICATE ENTRY ***^]"
		     , binary ((ptw_regs (idx).addr || "000000"b), 24), ptw_regs (idx).modif, ptw_ptrs (idx).valid,
		     usage_string, binary (ptw_ptrs (idx).pointer, 15),
		     divide (binary (ptw_ptrs (idx).pageno, 12), 16, 12, 0), ptw_ptrs (idx).valid,
						/* skip the naming if this PTWAM entry is empty */
		     amu_$get_name (amu_info_ptr, seg_ptr), dup_entry (idx));
		ptws_printed = "1"b;
bypass_ptw:
	     end;

	     first_entry = last_entry + 1;
	     last_entry = first_entry + 15;

	end;
	return;
     end display_ptw;

%page;
display_sdw:
     proc;

	first_entry = 0;
	last_entry = 15;

	if DPS8xxM then do;
	     first_level = 1;
	     last_level = 4;
	     end;

	else do;
	     first_level = 1;
	     last_level = 1;
	     end;

	call validate_am_sdw;

	if sdw_segno ^= -1 then segno_sw = "1"b;
	sdw_level_printed, sdw_hdr_printed = "0"b;
	do IDX = first_level to last_level;
	   sdw_level_printed = "0"b;
	     do idx = first_entry to last_entry;
		if (only_fulls & ^sdw_ptrs (idx).valid) then go to bypass_sdw;

		if (segno_sw & (fixed (sdw_ptrs (idx).pointer, 15) ^= sdw_segno)) then go to bypass_sdw;
		call ioa_$rsnnl ("^[R^; ^]^[E^; ^]^[W^; ^]^[P^; ^]^[U^; ^]^[G^; ^]^[C^; ^]", flag_string, (0),
						/* generate the REWPUGC string */
		     sdw_regs (idx).read, sdw_regs (idx).execute, sdw_regs (idx).write, sdw_regs (idx).privileged,
		     sdw_regs (idx).unpaged, sdw_regs (idx).entry_bound_sw, sdw_regs (idx).cache);

		if ^DPS8xxM then
		     call ioa_$rsnnl ("^6x^2d", usage_string, (0), binary (sdw_ptrs (idx).usage, 4));

		else call ioa_$rsnnl ("^2x^6b", usage_string, (0), sdw_ptrs (idx).usage);
		temp_ptr = baseptr (binary (sdw_ptrs (idx).pointer, 15));

		if sdw_hdr_printed = "0"b then do;
		     call ioa_ ("^/SDW Associative Memory ^[at the time of the dump^;at prds$am_data^].", ^prds_sw);
		     call ioa_ (" ADDRESS^2xRINGS^2xBOUND^2xREWPUGC^4xCL F/E USAGE-CT SEG # SEG_NAME");
		     sdw_hdr_printed = "1"b;
		     end;

		if (DPS8xxM & ^sdw_level_printed) then do;
		     call ioa_ ("LEVEL [^a]", AM_LEVEL (IDX));
		     sdw_level_printed = "1"b;
		     end;

		call ioa_ (
		     "^8o^2x^1.3b,^1.3b,^1.3b ^6o^2x^7a ^[^5o^;^s^4x-^]^2x^[F^;E^]^2x^8a ^5o ^[^a^;^s N/A^]^[^/^-*** POSSIBLE DUPLICATE ENTRY ***^]"
		     , binary (sdw_regs (idx).addr, 24), sdw_regs (idx).r1, sdw_regs (idx).r2, sdw_regs (idx).r3,
		     binary ((sdw_regs (idx).bound || "0000"b), 18), flag_string,
		     ((^sdw_regs (idx).entry_bound_sw) & sdw_regs (idx).execute),
						/* skip next if there is none */
		     binary (sdw_regs (idx).cl, 14), sdw_ptrs (idx).valid, usage_string,
		     binary (sdw_ptrs (idx).pointer, 15), sdw_ptrs (idx).valid,
						/* skip the naming if the entry isn't valid */
		     amu_$get_name_no_comp (amu_info_ptr, temp_ptr), dup_entry (idx));
		sdws_printed = "1"b;
bypass_sdw:
	     end;

	     first_entry = last_entry + 1;
	     last_entry = first_entry + 15;

	end;
	return;
     end display_sdw;

%page;
get_data_:
     proc (data_ptr, seg, word, number);
dcl  seg fixed bin;
dcl  data_ptr ptr;
dcl  (word, number) fixed bin (18);
	if ^amu_$return_val_per_process (amu_info_ptr, seg) then do;
	     index_changed = "1"b;
	     call amu_$fdump_mpt_temp_change_idx (amu_info_ptr, lbound (fdump_process_table.array, 1));
	     end;
	call amu_$do_translation (amu_info_ptr, seg, data_ptr, word, number, code);
	if index_changed = "1"b then do;
	     call amu_$fdump_mpt_revert_idx (amu_info_ptr);
	     index_changed = "0"b;
	     end;
     end get_data_;

%page;
set_up:
     proc;

          code = 0;
	if ^prds_sw then do;			/* do AMs from 'dump' */
	     dumpptr = fdump_info.dump_seg_ptr (0);
	     sdw_regs_ptr = addr (dump.amsdwregs);
	     sdw_ptrs_ptr = addr (dump.amsdwptrs);
	     ptw_regs_ptr = addr (dump.amptwregs);
	     ptw_ptrs_ptr = addr (dump.amptwptrs);
	     end;

	else do;					/* do AMs from PRDS */
	     range = 512;				/* need 512 words */
	     temp_ptr = amu_$definition_ptr (amu_info_ptr, "prds", "am_data", code);
	     if code ^= 0 then do;
		P_code = code;
		return;
		end;

	     segno = fixed (baseno (temp_ptr), 17);
	     first = fixed (rel (temp_ptr), 18);
	     call ssu_$get_temp_segment (sci_ptr, "azm_display_am_", data_buf_ptr);

	     call get_data_ (data_buf_ptr, segno, first, range);
						/* ensure data is contigous */
	     if code ^= 0 then do;
		P_code = code;
		if data_buf_ptr ^= null() then call ssu_$release_temp_segment(sci_ptr, data_buf_ptr);
		return;
		end;

	     ptw_regs_ptr = data_buf_ptr;
	     ptw_ptrs_ptr = addrel (ptw_regs_ptr, 64);
	     sdw_regs_ptr = addrel (ptw_ptrs_ptr, 64);
	     sdw_ptrs_ptr = addrel (sdw_regs_ptr, 128);
	     end;


	temp_ptr = addrel (ptw_regs_ptr, 16);		/* base to 2'nd set of regs */
	if temp_ptr -> last_three_sets = "0"b then do;	/* if second set is zero then */
	     nregs = 15;				/* AMs are from a l68 */
	     DPS8xxM = "0"b;
	     end;

	else do;					/* No, they are from a DPS8M */
	     nregs = 63;
	     DPS8xxM = "1"b;
	     end;

	return;
     end set_up;
%page;
validate_am_ptw:
     proc;

	dup_entry (*) = "0"b;

	do i = 0 to nregs - 1;
	     do j = i + 1 to nregs;
		if (ptw_ptrs (i).valid & ptw_ptrs (j).valid) then do;
		     if ptw_regs (i).addr = ptw_regs (j).addr then do;
			dup_entry (i) = "1"b;
			dup_entry (j) = "1"b;
			end;

		     else if ptw_ptrs (i).usage = ptw_ptrs (j).usage then do;
			if ^DPS8xxM then do;	/* if its not a dps8 */
			     dup_entry (i) = "1"b;
			     dup_entry (j) = "1"b;
			     end;
			end;

		     else if (ptw_ptrs (i).pointer = ptw_ptrs (j).pointer)
			     & (ptw_ptrs (i).pageno = ptw_ptrs (j).pageno) then do;
			dup_entry (i) = "1"b;
			dup_entry (j) = "1"b;
			end;



		     if (dup_entry (i) & dup_entry (j)) then do;
			if ptw_regs (i).addr = ptw_regs (j).addr then
			     if ptw_ptrs (i).pointer ^= ptw_ptrs (j).pointer then do;
				if DPS8xxM then go to cancel_dup_ptw;
				if ptw_ptrs (i).usage ^= ptw_ptrs (j).usage then do;
cancel_dup_ptw:
				     dup_entry (i), dup_entry (j) = "0"b;
				     end;
				end;
			end;
		     end;
	     end;
	end;
	return;
     end validate_am_ptw;
%page;
validate_am_sdw:
     proc;

	dup_entry (*) = "0"b;

	do i = 0 to nregs - 1;
	     do j = i + 1 to nregs;
		if (sdw_ptrs (i).valid & sdw_ptrs (j).valid) then do;

		     if sdw_regs (i).addr = sdw_regs (j).addr then do;
			dup_entry (i) = "1"b;
			dup_entry (j) = "1"b;
			end;

		     else if sdw_ptrs (i).pointer = sdw_ptrs (j).pointer then do;
			dup_entry (i) = "1"b;
			dup_entry (j) = "1"b;
			end;

		     else if sdw_ptrs (i).usage = sdw_ptrs (j).usage then do;
			if ^DPS8xxM then do;	/* if its not a dps8 */
			     dup_entry (i) = "1"b;	/* for dps8 it is LRU not usage ctr */
			     dup_entry (j) = "1"b;
			     end;
			end;


		     if (dup_entry (i) & dup_entry (j)) then do;
			if sdw_regs (i).addr = sdw_regs (j).addr then
			     if sdw_regs (i).bound = sdw_regs (j).bound then
				if (sdw_regs (i).r2 & sdw_regs (i).r3) ^= (sdw_regs (j).r2 & sdw_regs (j).r3) then
				     if sdw_ptrs (i).pointer ^= sdw_ptrs (j).pointer then do;
					if DPS8xxM then go to cancel_dup_sdw;
					if sdw_ptrs (i).usage ^= sdw_ptrs (j).usage then do;
cancel_dup_sdw:
					     dup_entry (i), dup_entry (j) = "0"b;
					     end;
					end;
			end;
		     end;
	     end;
	end;
	return;
     end validate_am_sdw;
%page;
%include assoc_mem;
%page;
%include sdw;
%page;
%include ptw;
%page;
%include amu_info;
%page;
%include amu_hardcore_info;
%page;
%include bos_dump;
%page;
%include amu_fdump_info;


     end azm_display_am_;
