/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        *********************************************************** */

copy_pdir_: 	proc();

/* format: off */

    	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
          /* This is a tool to copy process directories from the >pdd directory.		*/
	/*									*/
	/* Status:								*/
	/*									*/
	/* 0) Created:     June 1984 by B. Braun					*/
	/* 1) Modified: 30 Nov 84 by B. Braun to:					*/
	/*	      - remove call to hcs_$get_access_class from copy_pdir. It's not needed.	*/
	/*	      - correct the cleanup handler to not delete the newly copied dir when it	*/
	/*	        can't delete the original one.					*/
	/* 2) Modified: 20 Jan 85 by B. Braun to remove write acces off the initial acl for segs. */
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */



/****^  HISTORY COMMENTS:
  1) change(87-07-18,GDixon), approve(88-03-09,MCR7861),
     audit(88-07-08,Farley), install(88-07-12,MR12.2-1055):
      A) Add copy_pdir_$liveproc entrypoint.
      B) Add special-casing for copying Initializer liveproc.
      C) Correct references to names returned by hcs_$star_.
  2) change(87-11-11,GDixon), approve(88-03-09,MCR7861),
     audit(88-07-08,Farley), install(88-07-12,MR12.2-1055):
      A) Change copy_pdir internal proc to copy through links in the process
         directory.  The pdir usually does not contain links.  If such links
         exist, it probably means the user has placed them there to force
         copy_deadproc or copy_liveproc to copy some segment not normally
         kept in the pdir.
  3) change(89-02-27,TLNguyen), approve(89-02-27,MCR8049),
     audit(89-02-28,Parisek), install(89-03-15,MR12.3-1025):
     Replaced create_branch_version_1 with create_branch_version_2.
                                                   END HISTORY COMMENTS */



dcl adjust_bit_count_		entry (char(168), char(32), bit(1) aligned, fixed bin(35), fixed bin(35));
dcl amu_$dp_create_uid_hash		entry (char(*), fixed bin(35));
dcl com_err_			entry() options(variable);
dcl cv_bin_$dec			entry (fixed bin, char(12) aligned);
dcl cv_bin_$oct			entry (fixed bin, char(12) aligned);
dcl cv_userid_			entry (char(*)) returns(char(32));
dcl delete_$path			entry (char(*), char(*), bit(36) aligned, char(*), fixed bin(35));
dcl delete_$ptr			entry (ptr, bit(36) aligned, char(*), fixed bin(35));
dcl expand_pathname_		entry (char(*), char(*), char(*), fixed bin(35));
dcl get_ring_			entry() returns(fixed bin(3));
dcl get_system_free_area_		entry returns (ptr);
dcl (hcs_$add_acl_entries, hphcs_$add_acl_entries)
				entry (char(*), char(*), ptr, fixed bin, fixed bin(35));
dcl hcs_$add_dir_acl_entries		entry (char(*), char(*), ptr, fixed bin, fixed bin(35));
dcl hcs_$add_dir_inacl_entries	entry (char(*), char(*), ptr, fixed bin, fixed bin(3), fixed bin(35));
dcl hcs_$add_inacl_entries		entry (char(*), char(*), ptr, fixed bin, fixed bin(3), fixed bin(35));
dcl hcs_$create_branch_		entry (char(*), char(*), ptr, fixed bin(35));
dcl hcs_$fs_move_file		entry (char(*), char(*), fixed bin(2), char(*), char(*), fixed bin(35));
dcl hcs_$get_uid_seg		entry (ptr, bit(36) aligned, fixed bin(35));
dcl hcs_$make_seg			entry (char(*), char(*), char(*), fixed bin(5), ptr, fixed bin(35));
dcl hcs_$set_bc			entry (char(*), char(*), fixed bin(24), fixed bin(35));
dcl hcs_$set_dir_ring_brackets	entry (char(*), char(*), (2)fixed bin(3), fixed bin(35));
dcl hcs_$set_max_length_seg		entry (ptr, fixed bin(19), fixed bin(35));
dcl hcs_$set_ring_brackets		entry (char(*), char(*), (3)fixed bin(3), fixed bin(35));
dcl hcs_$star_			entry (char(*), char(*), fixed bin(2), ptr, fixed bin, ptr, ptr, fixed bin(35));
dcl hcs_$status_minf		entry (char (*), char (*), fixed bin (1), fixed bin (2), fixed bin (24), fixed bin (35));
dcl hphcs_$set_dir_ring_brackets	entry (char(*), char(*), (3)fixed bin(3), fixed bin(35));
dcl hphcs_$set_ring_brackets		entry (char(*), char(*), (3)fixed bin(3), fixed bin(35));
dcl get_group_id_$tag_star		entry() returns(char(32));
dcl get_pdir_			entry() returns(char(168));
dcl nd_handler_			entry (char(*), char(*), char(*), fixed bin(35));
dcl pathname_			entry (char(*), char(*)) returns(char(168));
dcl phcs_$initiate    	          entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr, 
				       fixed bin (35));
dcl ring0_get_$segptr		entry (char(*), char(*), ptr, fixed bin(35));
dcl ring_zero_peek_			entry (ptr, ptr, fixed bin(19), fixed bin(35));
dcl ring_zero_peek_$by_definition	entry (char(*), char(*), fixed bin(18), ptr, fixed bin(19), fixed bin(35));
dcl system_info_$sysid		entry (char(*));
dcl terminate_file_			entry (ptr, fixed bin(24), bit(*), fixed bin(35));

dcl (
     error_table_$action_not_performed,
     error_table_$empty_file,
     error_table_$infcnt_non_zero,
     error_table_$namedup,
     error_table_$nomatch,
     error_table_$segknown
    )				fixed bin(35) ext static;

/* Options Constant */

dcl (
     CHASE			init(1) fixed bin(1),
     HC_SEGS (4)			char(12) init("slt", "name_table", "definitions_", "dseg"),
     NL				char(1) init("
"),
     NO_CHASE			init(0) fixed bin(1),
     myname			char(10) init("copy_pdir_")
     )				int static options(constant);

dcl 1 DIR_ACL_INIT (5)		aligned  int static options(constant),
      2 access_name			char (32) unal
             init("*.*.*", "*.SysMaint.*", "*.SysAdmin.*", "*.SysDaemon.*", ""),
      2 mode			bit (36) aligned    /*  null for *.*.*, sma access for the rest */
             init( (1) ((36) "0"b), (3) ("111"b || (33)"0"b), (1) ("100"b || (33)"0"b)),
      2 status_code			fixed bin (35) init((5) 0);

dcl 1 SEG_ACL_INIT (5)		aligned  int static options(constant),
      2 access_name			char (32) unal 
             init("*.*.*", "*.SysMaint.*", "*.SysAdmin.*", "*.SysDaemon.*",  ""),
      2 mode			bit (36) aligned    /*  null for *.*.*, r access for the rest */
             init( (1) ((36) "0"b), (3) ("100"b || (33)"0"b), (1) ("100"b || (33)"0"b)),
      2 extended_mode		bit (36) aligned
             init((5) (36)"0"b),			/* we dont use this */
      2 status_code			fixed bin (35) init((5) 0);   

/* Builtins */

dcl (addr, addrel, baseno, baseptr, binary, fixed, hbound, lbound, length,
     ltrim, null, rtrim, size, substr, string
     )				builtin;

/* Condition handlers */

dcl (cleanup)			condition;

/* Based variables */

dcl  system_area			area based (system_area_ptr);

/* Automatic */

dcl code				fixed bin (35);	
dcl dead_pdir_ring			fixed bin(3);
dcl deadproc			bit(1);
dcl dir_acl_ptr			ptr;
dcl dir_path			char(168);
dcl i				fixed bin;
dcl ignore			fixed bin (24);
dcl iocb_ptr			ptr;
dcl live_process			char(32);
dcl owner_acl			char(32);
dcl owner_sw			bit(1);
dcl pdir_path			char(168);
dcl pdir_to_create			char(32);
dcl process_dir			char(168);
dcl seg_acl_ptr			ptr;
dcl system_area_ptr			ptr;
dcl type				fixed bin (2);	/*  branch type from status_minf */
dcl user_acl			char(32);
%page;

copy_pdir_$deadproc:   entry (caller, copy_dirname, copy_entryname, a_pdir_path, a_pdir_name, a_owner_acl,
		          a_need_hphcs, a_code);

/* This entry copies a dead processes. Arguments are:

   caller                Name of who called me. (Input)
   copy_dirname	     Pathname of the containing directory of the source pdir. (Input)
   copy_entryname	     Name of the process directory to be copied. (Input)
   a_pdir_path	     Pathname of the containing directory where the process will be copied. (Input)
   a_pdir_name	     Name of the target pdir to be created. (Input)
   a_owner_acl	     Person.Project to be added as an acl to the target pdir. (Input)
   a_need_hphcs	     This means that the copying is being done on behalf of the owner of the pdir. (Input)
   a_code		     Standard system error code. (Output)
*/

/* parameters */

dcl a_code			fixed bin(35);
dcl a_live_process			char(*);
dcl a_owner_acl			char(*);
dcl a_need_hphcs			bit(1);
dcl a_pdir_path			char(*);
dcl a_pdir_name			char(*);
dcl caller			char(*);
dcl copy_dirname			char(168);
dcl copy_entryname			char(32);

    deadproc = "1"b;
    live_process = "";
    go to COMMON;
    

copy_pdir_$liveproc:   entry (caller, copy_dirname, copy_entryname, a_pdir_path, a_pdir_name, a_owner_acl,
		          a_need_hphcs, a_live_process, a_code);

    deadproc = "0"b;
    live_process = a_live_process;
    go to COMMON;

COMMON:
    dir_path = a_pdir_path;
    star_entry_count = 0;				/* necessary to reference to avoid a warning	*/
    pdir_to_create = a_pdir_name;
    if a_owner_acl = "" then owner_sw = "0"b;
    else do;
       owner_acl = cv_userid_ (a_owner_acl);
       owner_sw = "1"b;
       end;
    if a_need_hphcs then user_acl = get_group_id_$tag_star();
    else user_acl = "";

    code = 0;
    iocb_ptr = null();
    system_area_ptr = get_system_free_area_();
    acl_count = 5;
    dir_acl_ptr, seg_acl_ptr = null ();
    process_dir = "";

    on cleanup begin;
       call clean_up();
       end;

    allocate directory_acl_array  in (system_area) set (dir_acl_ptr);
    allocate segment_acl_array in (system_area) set (seg_acl_ptr);

    call setup_pdir_uids (pathname_(copy_dirname, copy_entryname), process_dir, iocb_ptr, code);
    if code ^= 0 then goto END_COPY_PDIR;

    call get_pdir_rbs(pdir_path, dead_pdir_ring);

    call copy_pdir (copy_dirname, copy_entryname, dir_path, pdir_to_create, owner_sw, owner_acl, user_acl, 
	          iocb_ptr, dead_pdir_ring, code);
    if code ^= 0 then goto END_COPY_PDIR;

    call cleanup_pdir_uids (iocb_ptr);

    pdir_path = pathname_(dir_path, pdir_to_create);
    call move_pdir_uid_seg(pdir_path, process_dir, code);
    if code ^= 0 then goto END_COPY_PDIR;

    do i = lbound(HC_SEGS,1) to hbound(HC_SEGS,1)-1,
           hbound(HC_SEGS,1) while (live_process = "Initializer");
       call copy_segment ("", HC_SEGS(i), pdir_path, ""b, code); 
       if code ^= 0 then goto END_COPY_PDIR;
       end;

    call determine_stack_base (pdir_path, code);
    if code ^= 0 then goto END_COPY_PDIR;

    call amu_$dp_create_uid_hash (pdir_path, code);
    if code ^= 0 then goto END_COPY_PDIR;
    if owner_sw then do;
       call set_hash_access(pdir_path, owner_acl, code);
       if code ^= 0 then goto END_COPY_PDIR;
       call set_owner_status (pdir_path, owner_acl, code);
       if code ^= 0 then goto END_COPY_PDIR;
    end;

END_COPY_PDIR:
    a_code = code;
    call clean_up();

    return;
%page;
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

copy_pdir_$delete:   entry (caller, a_pdir_path, a_pdir_name, a_code);

/* 
   This entry deletes a dead process. Currently, it expects to be called by 
   copy_deadproc after being called by copy_pdir_$deadproc, so access and ring
   brackets are assumed to be set up already.
*/

       code = 0;
       string (delete_options) = ""b;
       delete_options.force, delete_options.directory = "1"b;
       call delete_$path (a_pdir_path, a_pdir_name, string (delete_options), caller, code);
       if code = error_table_$action_not_performed then  /* maybe only partially deleted */
          call delete_$path (a_pdir_path, a_pdir_name, string (delete_options), caller, code);
       
       if code = error_table_$infcnt_non_zero then          /* The directory is successfully deleted. 	*/
          code = 0;					/* So, ignore the code			*/

    a_code = code;
return;
 
%page;
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

add_inacls: proc (dirname, ename, owner_sw, owner_acl, code);

dcl (dirname, ename) char(*);
dcl code fixed bin(35);
dcl owner_sw bit(1);
dcl owner_acl char(*);

    /* set initial acls for segments */

    acl_count = 5;
    seg_acl_ptr -> segment_acl_array(*) = SEG_ACL_INIT(*);
    if owner_sw then  seg_acl_ptr -> segment_acl_array(5).access_name = owner_acl;
    else acl_count = 4;

    call hcs_$add_inacl_entries (dirname, ename, seg_acl_ptr, acl_count, 4, code);
    if code ^= 0 then return;

    /* add initial acls for directories */

    acl_count = 5;
    dir_acl_ptr -> directory_acl_array(*) = DIR_ACL_INIT(*);
    if owner_sw then dir_acl_ptr -> directory_acl_array (5).access_name = owner_acl;
    else acl_count = 4;

    call hcs_$add_dir_inacl_entries (dirname, ename, dir_acl_ptr, acl_count, 4, code);         
    if code ^= 0 then return;

end add_inacls;
%page;
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

clean_up:	proc();

dcl  ignore_code fixed bin (35);
   
    if dir_acl_ptr ^= null() then free dir_acl_ptr -> directory_acl_array in (system_area);
    if seg_acl_ptr ^= null() then free seg_acl_ptr -> segment_acl_array in (system_area);

    if iocb_ptr ^= null() then do;
       call iox_$close (iocb_ptr, ignore_code);
       call iox_$detach_iocb (iocb_ptr, ignore_code);
       end;
    if process_dir ^= "" then do;
       string (delete_options) = ""b;
       delete_options.force, delete_options.segment = "1"b;
       call delete_$path (process_dir, "pdir_info", string (delete_options), caller, ignore_code);
       end;

    if code ^= 0 then do;      /* delete the partially copied pdir */
       string (delete_options) = ""b;
       delete_options.force, delete_options.segment, delete_options.directory = "1"b;
       call delete_$path (dir_path, pdir_to_create, string (delete_options), caller, ignore_code);
       end;

end clean_up;
%page;
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

cleanup_pdir_uids:  proc(iocb_ptr);
		
/* parameters */

dcl (iocb_ptr) ptr;
dcl  ignore_code fixed bin (35);

    if iocb_ptr ^= null() then do;
       call iox_$close (iocb_ptr, ignore_code);
       call iox_$detach_iocb (iocb_ptr, ignore_code);
       end;

end cleanup_pdir_uids;
%page;
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

copy_pdir:  proc (dirname, ename, target_dirname, target_ename, owner_sw, owner_acl, user_acl,
	        iocbp, pdir_ring, code) recursive;

/* Parameters */

dcl dirname char(*);
dcl ename char(*);
dcl code fixed bin(35);
dcl iocbp ptr;
dcl owner_acl char(*);
dcl owner_sw bit(1);
dcl pdir_ring fixed bin(3);
dcl target_dirname char(*);
dcl target_ename char(*);
dcl user_acl char(*);
	      
/* automatic */

dcl 1 cbi like create_branch_info;
dcl dir_path  char(168);
dcl i fixed bin;	      
dcl line_ptr ptr;
dcl n_write fixed bin(21);
dcl need_to_set_rbs bit(1);
dcl pdir_line char(45);
dcl 1 s_entries (s_entry_count) aligned based (s_entry_ptr) like star_entries;
dcl s_entry_count;
dcl s_entry_ptr ptr;
dcl s_names_ptr ptr;
dcl s_names (500) char(32) aligned based (
s_names_ptr);
dcl t_parent  char(168);
dcl t_ename   char(32);
dcl target_dir_path char(168);
dcl type fixed bin (2);	/*  branch type from status_minf */
dcl unique_id bit(36) aligned;

    need_to_set_rbs = (pdir_ring ^= get_ring_());
    line_ptr = addr (pdir_line);
    n_write = length(pdir_line);
    dir_path = pathname_(dirname, ename);
    target_dir_path = pathname_(target_dirname, target_ename);
    s_entry_ptr, s_names_ptr = null ();
    code = 0;
    on condition (cleanup) begin;
       if s_names_ptr ^= null () then free s_names in (system_area);
       if s_entry_ptr ^= null () then free s_entries in (system_area);
       end;

    /* create directory */
    
    call expand_pathname_ (target_dirname, t_parent, t_ename, code);
    if code  ^= 0 then return;
    cbi.version = create_branch_version_2;
    cbi.dir_sw, 
       cbi.copy_sw, 
       cbi.parent_ac_sw = "1"b;
    cbi.chase_sw,
       cbi.priv_upgrade_sw,
       cbi.mbz1, cbi.mbz2 = "0"b;
    cbi.bitcnt, cbi.quota = 0;
    cbi.mode = SMA_ACCESS;
    cbi.rings(*) = 4;
    cbi.userid = get_group_id_$tag_star();
    cbi.access_class = ""b;
    cbi.dir_quota = 0;
 
    call hcs_$create_branch_ (target_dirname, target_ename, addr(cbi), code);
    if code ^= 0 then return;
    call add_inacls (target_dirname, target_ename, owner_sw, owner_acl, code);
    if code ^= 0 then return;

    call hcs_$star_ (dir_path, "**", star_ALL_ENTRIES, system_area_ptr, s_entry_count, s_entry_ptr, s_names_ptr, code);
    if code ^= 0 then do;				/* copy thru links in pdir.			*/
						/* an attempt to be more descriptive		*/
       if code = error_table_$nomatch then code = error_table_$empty_file;
       goto ERROR_COPY;
       end;
						/* Any errors found are handled in the clean_up routine */
    do i = 1 to s_entry_count;
       t_ename = s_names(s_entries(i).nindex);
       if s_entries(i).type = star_LINK then do;		/* Find type of link target.			*/
	call hcs_$status_minf (dir_path, t_ename, CHASE, type, ignore, code);
	if code = 0 then s_entries(i).type = type;
	end;
       if s_entries(i).type = star_SEGMENT then do;
	if live_process = "Initializer" & t_ename = "template_pit" then
	   t_ename = s_names(s_entries(i).nindex-1+s_entries(i).nnames);
						/* Initializer has both template_pit and pit names */
						/* on its pit, but azm looks only for pit. */
          if user_acl ^= "" then call set_rb_and_access(dir_path, t_ename, "0"b, user_acl, code);
	if code ^= 0 then goto ERROR_COPY;
	call copy_segment (dir_path, t_ename, target_dir_path,
	   unique_id, code);
          if code ^= 0 then goto ERROR_COPY;
	if need_to_set_rbs then call set_owner_rbs (target_dir_path, t_ename, "0"b, pdir_ring, code);
          if code ^= 0 then goto ERROR_COPY;
	call save_pdir_uid (iocbp, unique_id, t_ename, pdir_line, line_ptr, n_write, code);
	if code ^= 0 then goto ERROR_COPY;
	end;
       else if s_entries(i).type = star_DIRECTORY then do;
	if user_acl ^= "" then call set_rb_and_access(dir_path, t_ename, "1"b, user_acl, code);
	if code ^= 0 then goto ERROR_COPY;
	if need_to_set_rbs then call set_owner_rbs (target_dir_path, t_ename, "1"b, pdir_ring, code);
	if code ^= 0 then goto ERROR_COPY;
          call copy_pdir(dir_path, t_ename, target_dir_path, t_ename, owner_sw, owner_acl, user_acl, 
		     iocbp, pdir_ring, code);
	if code ^= 0 then goto ERROR_COPY;
	end;
       end;     

ERROR_COPY:

    if s_names_ptr ^= null () then free s_names in (system_area);
    if s_entry_ptr ^= null () then free s_entries in (system_area);
    return;

end copy_pdir;
%page;
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

copy_segment:  proc (dirname, seg_to_copy, target_dirname, unique_id, code);

/* parameters */

dcl code fixed bin(35);
dcl dirname char(*);
dcl seg_to_copy char(*);
dcl target_dirname char(*);
dcl unique_id bit(36) aligned;

dcl bit_count fixed bin(24);
dcl bound fixed bin(19);
dcl bc_35 fixed bin(35);
dcl ename char(32);
dcl got_copy bit(1);
dcl segptr ptr;
dcl segptr0 ptr;
dcl test_word fixed bin (35);
dcl tsdw fixed bin (71);

    segptr, segptr0 = null();
    got_copy = "0"b;
    code = 0;
    ename = seg_to_copy;

    if dirname = "" then    /* get from the system */
       call ring0_get_$segptr ("", ename, segptr0, code);
    else call phcs_$initiate (dirname, ename, "", 0, 0, segptr0, code);
    if segptr0 = null then return;

/* Get unique ID for later use. */

    if dirname = "" then
       unique_id = ""b;
    else
       call hcs_$get_uid_seg (segptr0, unique_id, code);

/* Test whether copying is possible, and also cause segment fault to get sdw.bound right */

    call ring_zero_peek_ (segptr0, addr (test_word), size (test_word), code);
    if code ^= 0 then goto RZP_ERROR;

    call ring_zero_peek_ (addr (baseptr (0) -> sdwa (binary (baseno (segptr0), 15))), addr (tsdw), size (tsdw), code);
    if code ^= 0 then goto RZP_ERROR;

    bound = (binary (addr (tsdw) -> sdw.bound, 14) + 1) * 16; /* get number of words */
    bit_count = bound * 36;			/* bit of segment */

    call ring_zero_peek_ (addrel (segptr0, bound - 1), addr (test_word), size (test_word), code);
    if code ^= 0 then				/* test whether whole segment is copyable -- in case we're */
       goto RZP_ERROR;			/* stuck with using metering_ring_zero_peek_ */

     on cleanup call rzd_cleanup();

CREATE:	
						/* get segment to copy data into */
    if live_process = "Initializer" & ename = "kst_seg" then/* Initializer has nonstandard name for its kst */
       ename, seg_to_copy = "kst";
    call hcs_$make_seg (target_dirname, ename, "", RW_ACCESS_BIN, segptr, code);
    if code ^= 0 then
       if code = error_table_$namedup then do;
	call nd_handler_ (myname, dirname, ename, code);
	if code = error_table_$action_not_performed then return;
	goto CREATE;
	end;
       else if code ^= error_table_$segknown then return;

    call ring_zero_peek_ (segptr0, segptr, bound, code); /* copy segment into user ring */
    if code ^= 0 then goto RZP_ERROR;

    got_copy = "1"b;
						/* set bit count and terminate the segment */
    call adjust_bit_count_((target_dirname), ename, "1"b, bc_35, code);
    bit_count = bc_35;
    call terminate_file_(segptr, bit_count, TERM_FILE_TRUNC_BC_TERM, (0));    

    return;

RZP_ERROR:

    call com_err_ (code, myname, "This operation requires access to phcs_.");

    call rzd_cleanup ();
    return;

rzd_cleanup: proc ();

    if segptr ^= null & ^got_copy then do;
       string (delete_options) = ""b;
       delete_options.force, delete_options.segment = "1"b;
       call delete_$path (dirname, ename, string(delete_options), myname, (0));
       end;
end rzd_cleanup;

end copy_segment;
%page;
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

determine_stack_base: proc(dirname, code);

/*   This procedure determines the stack_0 segment number for this boot of the system. Then it      */
/*   creates a segment with max length of 0 called stack0_is_NNN where NNN is the segment number.   */
/*   This way, analyze_multics, who uses stack0 can find the correct segno for processes analyzed   */
/*   across system boots (where the segno may change).                                              */

dcl dirname char(*);
dcl code fixed bin(35);

dcl stackbase_segno fixed bin(35);
dcl tbase				char(12) aligned;
dcl stack_base			char(32);
dcl segptr			ptr;

    code = 0;
    segptr = null();
    stack_base, tbase = "";
    stackbase_segno = -1;
    call ring_zero_peek_$by_definition ("active_all_rings_data", "stack_base_segno", 0, addr(stackbase_segno), 1, code);
    if code ^= 0 then return;

    call cv_bin_$dec (fixed(stackbase_segno, 17), tbase);
    stack_base = "stack_base_" || ltrim(tbase);

CREATE:	/* create a zero length seg with the stack base number */
    call hcs_$make_seg (dirname, stack_base, "", R_ACCESS_BIN, segptr, code);
    if code ^= 0 then
       if code = error_table_$namedup then do;
	call nd_handler_ (myname, dirname, stack_base, code);
	if code = error_table_$action_not_performed then return;
	goto CREATE;
	end;
       else if code ^= error_table_$segknown then return;

    call hcs_$set_max_length_seg (segptr, 0, code);

end determine_stack_base;
%page;
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

get_pdir_rbs: proc (dirname, pdir_ring);

/* parameters */

dcl dirname			char(*);
dcl pdir_ring			fixed bin(3);

dcl code				fixed bin(35);
dcl i				fixed bin;
dcl (DEFAULT_RING			fixed bin(3) init (4),
     stacks (0:7)			char(7) init("stack_0", "stack_1", "stack_2", "stack_3", "stack_4",
					   "stack_5", "stack_6", "stack_7"))
				int static options (constant);

/* The only time ring brackets have to be set to other than what they are (which  is ring 4), is
   when the user is running in ring 5,6,7. So, we look for the existence of stack_7, stack_6, 
   stack_5 and set ring brackets accordingly. 
*/
    pdir_ring = DEFAULT_RING;
    code = -1;
    do i = hbound (stacks,1) to 0 by -1 while (code ^= 0);
       call hcs_$status_minf (dirname, stacks(i), NO_CHASE, type, ignore, code);
       if code = 0 then pdir_ring = i;
       end;   /* of loop */

end get_pdir_rbs;
%page;
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

move_pdir_uid_seg: proc (dirname, process_dir, code);

dcl dirname char (*);
dcl code fixed bin(35);
dcl process_dir char(168);

dcl bc_35 fixed bin(35);
dcl seg_bc fixed bin(24);

    code = 0;
    call adjust_bit_count_(process_dir, "pdir_info", "1"b, bc_35, code);
    seg_bc = bc_35;
    call hcs_$fs_move_file (process_dir, "pdir_info", fixed("11"b), dirname, "pdir_info", code);
    if code ^= 0 then return;
    call hcs_$set_bc (dirname, "pdir_info", seg_bc, code);
    if code ^= 0 then return;
    string (delete_options) = ""b;
    delete_options.force, delete_options.segment = "1"b;
    call delete_$path (process_dir, "pdir_info", string (delete_options), caller, code);
    process_dir = "";

end move_pdir_uid_seg;
%page;
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

save_pdir_uid: proc (iocbp, unique_id, seg_name, putline, putline_ptr, n_write, code);

dcl iocbp ptr;
dcl code fixed bin(35);
dcl unique_id bit(36) aligned;
dcl putline_ptr ptr;
dcl putline char(*);
dcl n_write fixed bin(21);
dcl seg_name char(*);

dcl tuid char(12) aligned;

    code = 0;

    if unique_id = "0"b then return;

    call cv_bin_$oct(fixed(unique_id, 35), tuid);
    substr(putline, 1, n_write) = tuid || seg_name || NL;
    call iox_$put_chars(iocbp, putline_ptr, n_write, code);

    return;
end save_pdir_uid;
%page;
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

set_hash_access: proc (dir_path, owner_acl, code);

/* parameters */

dcl code				fixed bin(35);
dcl dir_path			char(*);
dcl owner_acl			char(*);

/* automatic */

    code = 0;
    acl_count = 1;
    seg_acl_ptr -> segment_acl_array(1).access_name = owner_acl;
    seg_acl_ptr -> segment_acl_array(1).mode = R_ACCESS || (33)"0"b;
    seg_acl_ptr -> segment_acl_array(1).extended_mode =  (36)"0"b;
    call hcs_$add_acl_entries (dir_path, "uid_hash_table", seg_acl_ptr, acl_count, code);

end set_hash_access;
%page;
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

set_owner_status: proc (dir_path, owner_acl, code);

/* parameters */

dcl code				fixed bin(35);
dcl dir_path			char(*);
dcl owner_acl			char(*);

/* automatic */

dcl dirname char(168);
dcl entryname char(32);

    /* owner needs s to the containing dir of the just created pdir dir. */

    call expand_pathname_ (dir_path, dirname, entryname, code);
    if code  ^= 0 then return;

    call hcs_$status_minf (dirname, entryname, NO_CHASE, type, ignore, code);
    if code ^= 0 then return;

    acl_count = 1;
    dir_acl_ptr -> directory_acl_array(1).access_name = owner_acl;
    dir_acl_ptr -> directory_acl_array(1).mode = S_ACCESS || (33)"0"b;
    call hcs_$add_dir_acl_entries (dirname, entryname, dir_acl_ptr, acl_count, code);

end set_owner_status;
%page;
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

set_owner_rbs: proc (dirname, ename, dir_sw, user_ring, code) recursive;

/* parameters */

dcl code				fixed bin(35);
dcl dirname			char(*);
dcl dir_sw			bit(1);
dcl ename				char(*);
dcl user_ring			fixed bin(3);

dcl rbs (3)			fixed bin(3);
dcl drb (2)			fixed bin(3);

    code = 0;
    if dir_sw then do;
       drb(1), drb(2) = user_ring;
       call hcs_$set_dir_ring_brackets(dirname, ename, drb, code);
       end;
    
    else do;    /* segment */
       rbs(1), rbs(2), rbs(3) = user_ring;
       call hcs_$set_ring_brackets(dirname, ename, rbs, code);
       end;

end set_owner_rbs;
%page;
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

set_rb_and_access:  proc(dirname, ename, dir_sw, user_acl, code);

dcl (dirname, ename) char(*);
dcl code fixed bin(35);
dcl dir_sw bit(1);
dcl user_acl char(*);
    
    code = 0;
    acl_ptr = null();

    if dir_sw then do;     
       /* set dir ring bracket if copying on behalf of owner */

       call hphcs_$set_dir_ring_brackets(dirname, ename, 7, code);
       if code ^= 0 then return;

       /* set directory acl */

       acl_count = 1;
       dir_acl_ptr -> directory_acl_array(1).access_name = user_acl;
       dir_acl_ptr -> directory_acl_array(1).mode = SMA_ACCESS  || (33)"0"b;
       dir_acl_ptr -> directory_acl_array(1).status_code = 0;
       call hcs_$add_dir_acl_entries (dirname, ename, dir_acl_ptr, acl_count, code);         
       if code ^= 0 then return;
       end;

    else if deadproc then do;  /* a deadproc segment */
 
       /* set ring brackets to 4 */

       call hphcs_$set_ring_brackets(dirname, ename, 4, code);
       if code ^= 0 then return;

       /* set access */

       acl_count = 1;
       seg_acl_ptr -> segment_acl_array(1).access_name = user_acl;
       seg_acl_ptr -> segment_acl_array(1).mode = R_ACCESS || (33)"0"b;
       seg_acl_ptr -> segment_acl_array(1).extended_mode =  (36)"0"b;
       seg_acl_ptr -> segment_acl_array(1).status_code = 0;
       call hcs_$add_acl_entries (dirname, ename, seg_acl_ptr, acl_count, code);
       if code ^= 0 then return;
     end;

     else do;  /* a liveproc segment */

       /* set access */

       acl_count = 1;
       seg_acl_ptr -> segment_acl_array(1).access_name = user_acl;
       seg_acl_ptr -> segment_acl_array(1).mode = R_ACCESS || (33)"0"b;
       seg_acl_ptr -> segment_acl_array(1).extended_mode =  (36)"0"b;
       seg_acl_ptr -> segment_acl_array(1).status_code = 0;
       call hphcs_$add_acl_entries (dirname, ename, seg_acl_ptr, acl_count, code);
       if code ^= 0 then return;
     end;

end set_rb_and_access;
%page;
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

setup_pdir_uids: proc (dp_dirname, process_dir, iocbp, code);

/* parameter */

dcl iocbp ptr;
dcl code fixed bin(35);
dcl process_dir char(168);
dcl dp_dirname char(168);

/* automatic */

dcl attach_desc char(200);
dcl line_ptr ptr;
dcl n_write fixed bin(21);
dcl pdir_line char(45);
dcl segptr ptr;
dcl sys_release char(44);

    segptr, iocbp = null();
    code = 0;
    process_dir = get_pdir_();
    on cleanup begin;
       if segptr ^= null() then  call delete_$ptr (segptr, "101100"b, myname, (0));
       end;
    call hcs_$make_seg (process_dir, "pdir_info", "", RW_ACCESS_BIN, segptr, code);
    if segptr = null() then return;
    attach_desc = "vfile_ " || rtrim (process_dir) || ">pdir_info";
    call iox_$attach_name ("pdir_sw", iocbp, attach_desc, null (), code);
    if code ^= 0 then  return;
    call iox_$open (iocbp, 2, "0"b, code);
    if code ^= 0 then return;

    /* Save the system release ID first */
    call system_info_$sysid(sys_release);
    pdir_line = sys_release || NL;
    line_ptr = addr (pdir_line);
    n_write = length(pdir_line);
    call iox_$put_chars(iocbp, line_ptr, n_write, code);


end setup_pdir_uids;
%page;%include access_mode_values;
%page;%include acl_structures;
%page;%include create_branch_info;
%page;%include delete_options;
%page;%include iox_dcls;
%page;%include sdw;
%page;%include star_structures;
%page;%include terminate_file;

end copy_pdir_;
