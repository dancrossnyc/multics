/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */
azm_find_mem_box_:
     proc (P_amu_info_ptr, P_address, P_segno, P_offset, P_code);

/* format: style4,delnl,insnl,ifthenstmt,indnoniterend,ifthendo,ifthen,^thendo */

dcl  P_amu_info_ptr ptr;
dcl  P_address fixed bin (35);
dcl  P_code fixed bin (35);
dcl  P_segno fixed bin;
dcl  P_offset fixed bin (18);
dcl  code fixed bin (35);

dcl  address fixed bin (35);
dcl  page_addr fixed bin;
dcl  (i, offset) fixed bin (17);
dcl  control_data_ptr ptr;
dcl  range fixed bin (18);
dcl  temp_ptr ptr;
dcl brief_sw bit (1) init ("0"b);
dcl  1 controller_data (0:7) aligned like scs$controller_data;

dcl  amu_$definition_ptr entry (ptr, char (*), char (*), fixed bin (35)) returns (ptr);
dcl  amu_$do_translation_by_ptr entry (ptr, ptr, fixed bin (18), ptr, fixed bin (35));
dcl  amu_$get_name entry (ptr, ptr) returns (char (*));
dcl  ioa_ entry () options (variable);
dcl  (addr, addrel, baseptr, divide,  
      substr, size)			builtin;
%page;
          go to common;
	

azm_find_mem_box_$bf:
     entry (P_amu_info_ptr, P_address, P_segno, P_offset, P_code);

     brief_sw = "1"b;

common:
     
	amu_info_ptr = P_amu_info_ptr;
	address = P_address;
	page_addr = divide (address, 1024, 17, 0);
	control_data_ptr = amu_$definition_ptr (amu_info_ptr, "scs", "controller_data", code);
	if code ^= 0 then do;
	     P_code = code;
	     return;
	     end;
	range = size (controller_data);
	call amu_$do_translation_by_ptr (amu_info_ptr, control_data_ptr, range, addr (controller_data), code);
	if code ^= 0 then do;
	     P_code = code;
	     return;
	     end;
	do i = 0 to 7;
	     if (page_addr >= controller_data (i).base) then do;
		if page_addr < (controller_data (i).base + controller_data (i).size) then do;
		     temp_ptr = addrel (baseptr (P_segno), P_offset);
		     offset = (address - (controller_data (i).base * 1024));
		     if ^brief_sw then
		        call ioa_ ("^a (^p):", amu_$get_name (amu_info_ptr, temp_ptr), temp_ptr);
		     call ioa_ ("Absolute Addr ^o (Word ^o in Mem ^a).",
		        address, offset, substr ("abcdefgh", i + 1, 1));
		     P_code = 0;
		     return;
		     end;
		end;
	end;
	call ioa_ ("Cannot find address ^o.", address);
	P_code = 0;
	return;

%page;
%include amu_info;
%page;
%include scs;
     end azm_find_mem_box_;
