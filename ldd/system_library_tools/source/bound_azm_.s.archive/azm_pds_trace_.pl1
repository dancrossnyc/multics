/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */
azm_pds_trace_: proc (P_sci_ptr, P_azm_info_ptr);

/* format: style4,delnl,insnl,ifthenstmt,indnoniterend,ifthendo,ifthen,^thendo */

dcl  (
     P_sci_ptr pointer,
     P_azm_info_ptr pointer
     ) parameter;

dcl  sci_ptr pointer;

dcl  amu_$do_translation entry (ptr, fixed bin, ptr, fixed bin (18), fixed bin (18), fixed bin (35)),
     amu_$definition_ptr entry (ptr, char (*), char (*), fixed bin (35)) returns (ptr),
     amu_$get_name_no_comp entry (ptr, ptr) returns (char (*)),
     amu_$get_name entry (ptr, ptr) returns (char (*)),
     ssu_$abort_line entry () options (variable),
     (
     ioa_,
     ioa_$nnl
     ) entry () options (variable),
     error_table_$noarg fixed bin (35) ext static,
     error_table_$bad_arg fixed bin(35) ext static,
     cv_dec_check_ entry (char (*), fixed bin (35)) returns (fixed bin (35)),
     ssu_$arg_count entry (pointer, fixed bin, bit (1) aligned),
     ssu_$arg_ptr entry (pointer, fixed bin, pointer, fixed bin (21)),
     ssu_$get_temp_segment	entry (ptr, char(*), ptr),
     ssu_$release_temp_segment	entry (ptr, ptr);

dcl  al fixed bin (21),
     arg char (al) based (ap),
     ap ptr,
     (argno, nargs) fixed bin,
     code fixed bin (35);
dcl  af_sw bit (1) aligned;
dcl  (number, entry_number, index) fixed bin;
dcl  (by_ptr, ref_ptr, temp_link_ptr, trace_buf_ptr) ptr;
dcl  cond_type char (4) based (trace_ptr);
dcl  1 trace_buf like trace based (trace_buf_ptr);
dcl  link_ptr ptr unal based (trace_ptr);

dcl  entry_type (0:12) char (20)
	init ("page_fault_type", "illegal entry type", "seg fault start", "seg fault end", "linkage fault start",
	"linkage fault end", "boundfault start", "boundfault end", "signaller type", "restart fault type",
	"reschedule type", "marker type", "interrupt type") static options (constant);

dcl  (addr, baseno, baseptr, bin, 
      binary, fixed, null, pointer, rel, 
      rtrim, size, substr, unspec)  builtin;

dcl cleanup condition;
%page;


	sci_ptr = P_sci_ptr;
	azm_info_ptr = P_azm_info_ptr;
	amu_info_ptr = azm_info.aip;
	trace_buf_ptr = null();
	on condition(cleanup) begin;
	   if trace_buf_ptr ^= null() then call ssu_$release_temp_segment(sci_ptr, trace_buf_ptr);
	   end;

	call ssu_$arg_count (sci_ptr, nargs, af_sw);
	if nargs = 0 then number = 15;
	do argno = 1 to nargs;
	     call ssu_$arg_ptr (sci_ptr, argno, ap, al);
	     if arg = "-all" | arg = "-a" then number = 0;
	     else if arg = "-lt" | arg = "-last" then do;
		if argno + 1 > nargs then call ssu_$abort_line (sci_ptr, error_table_$noarg, "Number expected after ^a", arg);
		argno = argno + 1;
		call ssu_$arg_ptr (sci_ptr, argno, ap, al);
		number = cv_dec_check_ (arg, code);
		if code ^= 0 then call ssu_$abort_line (sci_ptr, code, " ""^a"" is not decimal.", arg);
		end;
	       else				/* unrecognized arg */
		call ssu_$abort_line (sci_ptr, error_table_$bad_arg, "");
	end;

	call ssu_$get_temp_segment (sci_ptr, "azm-pgt", trace_buf_ptr);

	call get_page_trace_azm (trace_buf_ptr);

	if number = 0 then number = trace_buf.last_available;
	call select_entry;
	call ssu_$release_temp_segment (sci_ptr, trace_buf_ptr);
	return;
%page;
select_entry:
     proc;

	entry_number = 0;
	do index = (trace_buf.next_free - 1) by -1 to 1 while (number > 0),
	     trace_buf.last_available - 1 by -1 to trace_buf.next_free while (number > 0);

	     trace_ptr = addr (trace_buf.data (index));

	     call print_entry;

	     number = number - 1;
	end;
     end select_entry;
%page;
print_entry:
     proc;
dcl  e_type fixed bin;
dcl  seg_n fixed bin;
dcl  path char (168);
dcl  page_n fixed bin;
	entry_number = entry_number + 1;
	e_type = fixed (page_trace_entry.type, 6);
	call ioa_$nnl ("^d^2x", entry_number);
	if e_type = 0 then do;
	     seg_n = binary (page_trace_entry.segment_number, 15);
	     page_n = binary (page_trace_entry.page_number, 12);
	     path = amu_$get_name_no_comp (amu_info_ptr, baseptr (seg_n));
	     call ioa_ ("^20a^x^5o^x^4o^5x^1o^2x^a", entry_type (e_type), seg_n, page_n,
		binary (page_trace_entry.ring, 3), path);
	     return;
	     end;

	if e_type = 8 | e_type = 11 then do;
	     call ioa_ ("^20a^5x^4a", entry_type (e_type), cond_type);
	     return;
	     end;

	if e_type = 9 | e_type = 10 then do;
	     call ioa_ ("^20a", entry_type (e_type));
	     return;
	     end;

	if e_type = 2 | e_type = 3 | e_type = 6 | e_type = 7 then do;
	     seg_n = binary (page_trace_entry.segment_number, 15);

	     path = amu_$get_name_no_comp (amu_info_ptr, baseptr (seg_n));
	     call ioa_ ("^20a^26tsegno^5o^2x^a", entry_type (e_type), seg_n, path);
	     return;
	     end;
	if e_type = 5 then do;
	     if page_trace_entry.pad = "0"b then do;
		call ioa_ ("link_make_end");
		return;
		end;
	     else do;
		temp_link_ptr = link_ptr;
		path = amu_$get_name (amu_info_ptr, temp_link_ptr);
		call ioa_ ("^20a^x^12p^2x^a", entry_type (e_type), temp_link_ptr, path);
		return;
		end;
	     end;
	if e_type = 15 then do;
	     by_ptr =
		pointer (baseptr (bin (extended_page_trace_entry.psr_segno, 12)),
		fixed (extended_page_trace_entry.psr_offset, 18));
	     call ioa_ ("page_fault by^18t^12p^2x^a", by_ptr, rtrim (amu_$get_name (amu_info_ptr, by_ptr)));
	     ref_ptr =
		baseptr (bin (extended_page_trace_entry.tsr_segno_1 || extended_page_trace_entry.tsr_segno_2, 12));


	     call ioa_ ("^6xreferencing ^4o page ^o^32t^a", baseno (ref_ptr), extended_page_trace_entry.tsr_pageno,
		rtrim (amu_$get_name_no_comp (amu_info_ptr, ref_ptr)));
	     return;
	     end;


	if e_type = 4 then do;
	     if page_trace_entry.pad = "0"b then do;
		call ioa_ ("link_make_start");
		return;
		end;
	     else do;
		temp_link_ptr = link_ptr;
		path = amu_$get_name (amu_info_ptr, temp_link_ptr);
		call ioa_ ("^20a^x^12p^2x^a", entry_type (e_type), temp_link_ptr, path);
		return;
		end;
	     end;

	call ioa_$nnl ("^20a ^12.3b ^12.3b", entry_type (e_type), substr (unspec (page_trace_entry), 1, 36),
	     substr (unspec (page_trace_entry), 37, 36));
	call ioa_ (" ");


     end print_entry;
%page;
get_page_trace_azm:
     proc (a_dp);

dcl  a_dp ptr;
dcl  seg fixed bin;
dcl  (word, number) fixed bin (18);
dcl  temp_ptr ptr;
dcl  code fixed bin (35);
dcl  data_buf_ptr ptr;

	temp_ptr = amu_$definition_ptr (amu_info_ptr, "pds", "trace", code);
	if code ^= 0 then call ssu_$abort_line (sci_ptr, code, "page_trace.");

	seg = fixed (baseno (temp_ptr), 17);
	word = fixed (rel (temp_ptr), 18);
	number = size (trace_buf);
	data_buf_ptr = a_dp;
	call amu_$do_translation (amu_info_ptr, seg, data_buf_ptr, word, number, code);
	if code ^= 0 then call ssu_$abort_line (sci_ptr, code, "page_trace.");

	return;

     end get_page_trace_azm;
%page;
%include bos_dump;
%page;
%include amu_fdump_info;
%page;
%include amu_info;
%page;
%include azm_info;
%page;
%include sys_trace;
%page;


     end azm_pds_trace_;
