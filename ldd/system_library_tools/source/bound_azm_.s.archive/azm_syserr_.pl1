/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(87-01-15,Farley), approve(87-07-09,MCR7746),
     audit(87-07-16,Fawcett), install(87-07-28,MR12.1-1049):
     Changed to properly set P_ret_len when exiting, when entered at
     returns_string.
                                                   END HISTORY COMMENTS */


azm_syserr_:
     proc;
	return;

/* *	84-12-15, W. Olin Sibert: Converted (albeit with a monstrous kludge)
   *	   for new-format log segments in the partition.
   */
/*        Modified 01/21/85, B. Braun to 
          a) call print_sys_log with a severity specified. 
	b) change the data and log entries to require a char severity range instead of fixed bin.
	c) delete the $code_only entry as it apparently isn't referenced by anyone.
	d) Set severity for returns_string entry in case it goes to the log.
*/

/* format: style4,delnl,insnl,ifthenstmt,indnoniterend,ifthendo,ifthen,^thendo */

/* Parameters */
dcl  P_amu_info_ptr ptr;
dcl  P_sci_ptr ptr;
dcl  P_code fixed bin (35);
dcl  P_count fixed bin (35);
dcl  P_match_str char (*) var;
dcl  P_match_sw bit (1);
dcl  P_expand_sw bit (1);
dcl  P_syserr_code fixed bin;
dcl  P_severity  char(*) var;
dcl  P_string_len fixed bin (21);
dcl  P_string_ptr ptr;
	

dcl  amu_$hardcore_info_set_cur_ptrs entry (ptr, ptr);
dcl  amu_$slt_search_seg_num entry (ptr, ptr, char (32) aligned, fixed bin, fixed bin (35));
dcl  amu_$definition_ptr entry (ptr, char (*), char (*), fixed bin (35)) returns (ptr);
dcl  amu_$do_translation entry (ptr, fixed bin, ptr, fixed bin (18), fixed bin (18), fixed bin (35));
dcl  azm_display_mc_ entry (ptr, ptr, ptr, ptr, fixed bin (35));
dcl  ioa_ entry () options (variable);
dcl  ioa_$rs entry() options(variable);
dcl  ssu_$get_temp_segment	entry (ptr, char(*), ptr);
dcl  ssu_$release_temp_segment	entry (ptr, ptr);
dcl  print_syserr_msg_ entry (ptr, fixed bin (35));
dcl  iox_$user_output ptr ext static;
dcl  get_line_length_$switch entry (ptr, fixed bin (35)) returns (fixed bin);
dcl  date_time_ entry (fixed bin (71), char (*));
dcl  amu_$hranl entry (ptr, ptr, bit (1));

/* Builtins */

dcl  (addr, addrel, baseno, char, fixed, index, 
      null, rel, rtrim, size, substr, unspec)	builtin;

/* Handlers */

dcl  cleanup			condition;

/* Automatic */

dcl  a_syserr_code fixed bin;
dcl  data_area_ptr ptr;
dcl  mess_count fixed bin;
dcl  head_size fixed bin;
dcl  severity char(30);
dcl  segno fixed bin (17);
dcl  (offset, range) fixed bin (18);
dcl  (code, def_code) fixed bin (35);
dcl  w_header (size (wlog_header)) fixed bin;
dcl  1 current_hardcore like hardcore_cur;
dcl  i fixed bin;
dcl  new_time char (24);
dcl  1 auto_parg like parg aligned automatic;
dcl  plural_sw bit (1) init ("0"b);
dcl  (msgs_printed, msgs_bypassed) fixed bin init (0);
dcl  text char (512);
dcl  msg_printed bit (1);
dcl  code_only_sw bit (1);
dcl  found_one_sw bit (1);
dcl  returns_sw bit (1);
dcl ret_len fixed bin (21);
dcl foo_len fixed bin (21);
dcl ret_string_ptr ptr;
dcl ret_data char (ret_len) based (ret_string_ptr);
dcl sci_ptr ptr;

%page;
returns_string:   entry (P_sci_ptr,P_amu_info_ptr, P_syserr_code, P_count, P_string_ptr,P_string_len,P_code);

	ret_string_ptr = P_string_ptr;
	ret_len = 0;
	returns_sw = "1"b;
	amu_info_ptr = P_amu_info_ptr;
	sci_ptr = P_sci_ptr;
	a_syserr_code = P_syserr_code;
	severity = char(a_syserr_code);		/* Need this if we get to code_from_log		*/
	code_only_sw = "1"b;
	mess_count = P_count;
	found_one_sw = "0"b;
	goto code_from_data;

check_if_found:
	if returns_sw then P_string_len = ret_len;
	P_code = 0;
	return;
%page;
data:
     entry (P_sci_ptr, P_amu_info_ptr, P_count, P_match_str, P_match_sw, P_expand_sw, P_severity, P_code);
	amu_info_ptr = P_amu_info_ptr;		
	sci_ptr = P_sci_ptr;
          severity = substr(P_severity,1);
	code_only_sw,returns_sw = "0"b;
	mess_count = P_count;

code_from_data:
	
	wmess_ptr = null ();
          on condition(cleanup) begin;
	     if wmess_ptr ^= null() then call ssu_$release_temp_segment(sci_ptr, wmess_ptr);
	     end;

	data_area_ptr = amu_$definition_ptr (amu_info_ptr, "syserr_data", "wired_log_area", def_code);
	head_size = size (wlog_header);
	wlog_ptr = addr (w_header);
	segno = fixed (baseno (data_area_ptr), 17);
	offset = fixed (rel (data_area_ptr), 18);
	range = head_size;
	call amu_$do_translation (amu_info_ptr, segno, wlog_ptr, offset, range, code);
	if code ^= 0 then do;
	     if returns_sw then P_string_len = ret_len;
	     P_code = code;
	     return;
	     end;
	if wlog.count = 0 then do;
	     if code_only_sw then goto code_from_log;
	     call ioa_ ("No entries in syserr_data (segment #^o).", segno);
	     goto check_if_found;
	     end;

	call ssu_$get_temp_segment (sci_ptr,"azm-syserr_data", wmess_ptr);
	offset = offset + head_size;
	range = fixed (wlog.head.bsize, 18);
	call amu_$do_translation (amu_info_ptr, segno, wmess_ptr, offset, range, code);
	if code ^= 0 then do;
	     if returns_sw then P_string_len = ret_len;
	     P_code = code;
	     if wmess_ptr ^= null() then call ssu_$release_temp_segment(sci_ptr, wmess_ptr);	     
	     return;
	     end;

	argp = addr (auto_parg);			/* Get pointer to argument list */
	parg.iocbp = iox_$user_output;		/* Data is written here */
	parg.prev_time = "";			/* Clear previous time field */
	if code_only_sw then do;
	     parg.bin_sw = "0"b;
	     parg.octal_sw = "0"b;
	end;
	else do;
	     parg.bin_sw = P_expand_sw;
	     parg.octal_sw = P_expand_sw;
	end;
	parg.pad = "0"b;				/* Be neat */
	parg.linelen = get_line_length_$switch (iox_$user_output, code);
						/* Need length of line */
	if code ^= 0 then parg.linelen = 132;		/* Assume printer if error */

	if ^code_only_sw then
	     call ioa_ ("There ^[are^]^[is^] ^d message^[s^] in syserr_data (segment #^o).", (wlog.count > 1),
	     (wlog.count = 1), wlog.count, (wlog.count > 1), segno);

          if mess_count > wlog.count | mess_count <=0 then mess_count = wlog.count;
	do i = 1 to mess_count;
	     if wmess.text_len = 0 then goto skip;
	     new_time = datm (addr (wmess.time));
	     if code_only_sw then do;
		if wmess.code ^= a_syserr_code then go to skip;
		syserr_msgp = addr (wmess.seq_num);
		if returns_sw then do;
		     ret_len = ret_len + syserr_msg.text_len + 1;
		     call ioa_$rs ("^a ",ret_data,foo_len,
			substr(syserr_msg.text,1, syserr_msg.text_len));
		     goto skip;
		end;
		text = syserr_msg.text;
		msg_printed = "0"b;
		found_one_sw = "1"b;
		goto ok_to_print_data;
	     end;
	     
	     if P_match_str ^= "" then do;
	        if index (substr (wmess.text, 1, wmess.text_len), P_match_str) = 0 then do;

	           if P_match_sw then go to skip;
		 end;
	        else if ^P_match_sw then goto skip;   /* excluding */
	        end;

	     if wmess.code > a_syserr_code then go to skip;
	     msg_printed = "0"b;
	     syserr_msgp = addr (wmess.seq_num);
	     text = syserr_msg.text;
	     if syserr_msg.data_code = SB_hw_fault & syserr_msg.data_size > 0 then
		if P_expand_sw then do;
		   call display_hw_fault (addr (syserr_msg.data));
		   msg_printed = "1"b;
		   end;
ok_to_print_data:	     
	     parg.msgp = addr (wmess.seq_num);
	     parg.textp = addr (text);
	     parg.textl = syserr_msg.text_len;
	     parg.printp = addr (text);
	     parg.printl = syserr_msg.text_len;

	     if ^msg_printed then call print_syserr_msg_ (argp, code);

	     if code ^= 0 then do;
		if returns_sw then P_string_len = ret_len;
		P_code = code;
		return;
		end;
skip:
	     parg.prev_time = new_time;
	     wmess_ptr = addr (wmess.data (wmess.data_size + 1));

	end;
          if wmess_ptr ^= null() then call ssu_$release_temp_segment(sci_ptr, wmess_ptr);
	if returns_sw then P_string_len = ret_len;
	P_code = 0;
	if code_only_sw then goto code_from_log;

EXIT_DATA:
	return;					/* end of azm_syserr_$data  */

%page;
log:
     entry (P_sci_ptr, P_amu_info_ptr, P_count, P_match_str, P_match_sw, P_expand_sw, P_severity, P_code);

          amu_info_ptr = P_amu_info_ptr;
          sci_ptr = P_sci_ptr;
          severity = substr(P_severity,1);
          code_only_sw,returns_sw = "0"b;

code_from_log:
          mess_count = P_count;

          hardcore_cur_ptr = addr (current_hardcore);
          call amu_$hardcore_info_set_cur_ptrs (amu_info_ptr, hardcore_cur_ptr);

          call ioa_ ("^/Syserr messages from log partition:^/");

          call print_log_partition ();

	if returns_sw then P_string_len = ret_len;
          P_code = code;
          return;
%page;

/* This procedure is responsible for printing messages from the log partition.
   I am not proud of this implementation; it is not very flexible, it works by
   calling the command, possibly producing unexpected results, and is in
   general not very pretty. On the other hand, what it has to recommend it
   is that it works. I chose this approach because the interface from azm is
   itself not very flexible, and I didn't want to change that right at this
   moment. Ultimately, of course, the AZM log requests should just be direct
   interfaces to print_sys_log, and do no processing of their own. For the
   moment, though, that's too awkward, so instead we settle for this kludge.

   It works by copying the one or two log segments in use into temp segments,
   then creating links to those temp segments in the process dir, and calling
   print_sys_log to print the log family defined by those links to temp segs.
   It has various cases of calling print_sys_log depending on the options
   passed in from the AZM request.
   */

print_log_partition:
     procedure ();

declare 1 auto_syserr_log_data aligned like syserr_log_data automatic;
declare 1 log_seg (2) aligned,
          2 segno fixed bin,
          2 name char (32) unaligned,
          2 pathname char (168) unaligned,
          2 copy_ptr pointer,
          2 link_dname char (168) unaligned,
          2 link_ename char (32) unaligned;

declare   syserr_log_data_segno fixed bin;
declare   family_name char (32);
declare   log_path char (168);
declare   match_arg char (32);
declare   expand_arg char (32);
 declare   delete_$path entry (char (*), char (*), bit (6), char (*), fixed bin (35));
declare   get_pdir_ entry () returns (char (168));
declare   hcs_$fs_get_path_name entry (pointer, char (*), fixed bin, char (*), fixed bin (35));
declare   hcs_$append_link entry (char (*), char (*), char (*), fixed bin (35));
declare   log_segment_$last_message_info entry (pointer, fixed bin (35), fixed bin (18), fixed bin (35));
declare   pathname_ entry (char (*), char (*)) returns (char (168));
declare    unique_chars_ entry (bit (*)) returns (char (15));

declare   print_sys_log entry options (variable);

/*  */

          log_seg.copy_ptr (*) = null ();
          log_seg.pathname (*) = "";
          log_seg.link_ename (*) = "";
          log_seg.link_dname (*) = "";

          on condition (cleanup)
               call clean_up_print_log_partition ();

          syserr_log_data_ptr = addr (auto_syserr_log_data);

          call amu_$slt_search_seg_num (hardcore_cur.sltp, hardcore_cur.sltntp,
               "syserr_log_data", syserr_log_data_segno, code);
          if (code ^= 0) then goto ERROR_RETURN;

          call amu_$do_translation (amu_info_ptr,
               syserr_log_data_segno, syserr_log_data_ptr, 0, size (syserr_log_data), code);
          if (code ^= 0) then goto ERROR_RETURN;

          if (syserr_log_data.live_log ^= 1) & (syserr_log_data.live_log ^= 2) then do;
               call ioa_ ("No active syserr log segment in syserr_log_data.");
               code = 0;
               goto ERROR_RETURN;
               end;

          family_name = unique_chars_ (""b);
          call get_log_segment (syserr_log_data.live_log, family_name);

          if (syserr_log_data.swap_time ^= 0) then do;      /* Other one isn't empty */
               family_name = rtrim (family_name) || ".19841214.164821";
               call get_log_segment ((3 - syserr_log_data.live_log),
                    (rtrim (family_name) || ".19841214.214821"));
               end;

          log_path = pathname_ (log_seg.link_dname (syserr_log_data.live_log),
               log_seg.link_ename (syserr_log_data.live_log));

	if P_match_sw then
	     match_arg = "-match";
	else match_arg = "-exclude";

	if P_expand_sw then
	     expand_arg = "-expand";
	else expand_arg = "-no_expand";

          if (mess_count > 0) then
               if (P_match_str ^= "") then
                    call print_sys_log (log_path, "-reverse", "-no_header", "-date_format", "", expand_arg, 
		     "-severity", severity, "-last", char (mess_count), match_arg, substr (P_match_str, 1));
               else call print_sys_log (log_path, "-reverse", "-no_header", "-date_format", "", expand_arg,
		     "-severity", severity, "-last", char (mess_count));
          else
               if (substr (P_match_str, 1) ^= "") then
                    call print_sys_log (log_path, "-reverse", "-no_header", "-date_format", "", expand_arg, 
		     "-severity", severity, match_arg, substr (P_match_str, 1));
               else call print_sys_log (log_path, "-reverse", "-no_header", "-date_format", "", expand_arg, 
		"-severity", severity);

          code = 0;                                         /* Indicate success */

ERROR_RETURN:
          call clean_up_print_log_partition ();

          return;

/*  */

get_log_segment:
     procedure (P_idx, P_link_name);

declare   P_idx fixed bin parameter;
declare   P_link_name char (*) parameter;

declare   log_name char (32);
declare   last_offset fixed bin (18);
declare   dname char (168);
declare   ename char (32);

/* This procedure copies a syserr log segment into a temp segment, and
   makes a link to that temp segment in order to use it as input to
   print_sys_log. First, it determines the log name, acquires the temp
   segment, and records its pathname. */


          if (P_idx = 1) then
               log_name = "syserr_log_laurel";
          else log_name = "syserr_log_hardy";

          call ssu_$get_temp_segment (sci_ptr, ("azm-" || log_name), log_seg.copy_ptr (P_idx));

          call hcs_$fs_get_path_name (log_seg.copy_ptr (P_idx), dname, (0), ename, code);
          if (code ^= 0) then goto ERROR_RETURN;

          log_seg.pathname (P_idx) = pathname_ (dname, ename);

/* Next, it finds the segment in the dump address space */

          call amu_$slt_search_seg_num (hardcore_cur.sltp, hardcore_cur.sltntp,
               (log_name), log_seg.segno (P_idx), code);
          if (code ^= 0) then goto ERROR_RETURN;

/* Now, copy the contents of the header, figure out how much is actually
   in use, and then copy the whole of the in-use object. */

          call amu_$do_translation (amu_info_ptr,
               log_seg.segno (P_idx), log_seg.copy_ptr (P_idx),
               0, size (log_segment_header), code);
          if (code ^= 0) then goto ERROR_RETURN;

          log_segment_ptr = log_seg.copy_ptr (P_idx);
          call log_segment_$last_message_info (log_segment_ptr, (0), last_offset, code);
          if (code ^= 0) then goto ERROR_RETURN;

          if (last_offset <= size (log_segment_header)) then
               return;

          call amu_$do_translation (amu_info_ptr, log_seg.segno (P_idx),
               addrel (log_seg.copy_ptr (P_idx), size (log_segment_header)),
               size (log_segment_header),
               (last_offset - size (log_segment_header)), code);
          if (code ^= 0) then goto ERROR_RETURN;

          log_seg.link_dname (P_idx) = get_pdir_ ();
          log_seg.link_ename (P_idx) = P_link_name;
          call hcs_$append_link (log_seg.link_dname (P_idx),
               log_seg.link_ename (P_idx), log_seg.pathname (P_idx), code);
          if (code ^= 0) then goto ERROR_RETURN;

          return;
          end get_log_segment;

/*  */

clean_up_print_log_partition:
     procedure ();


          if (log_seg.link_dname (1) ^= "") then
               call delete_$path (log_seg.link_dname (1), log_seg.link_ename (1),
                    "000010"b, "", (0));

          if (log_seg.link_dname (2) ^= "") then
               call delete_$path (log_seg.link_dname (2), log_seg.link_ename (2),
                    "000010"b, "", (0));

          if (log_seg.copy_ptr (1) ^= null ()) then
               call ssu_$release_temp_segment (sci_ptr, log_seg.copy_ptr (1));

          if (log_seg.copy_ptr (2) ^= null ()) then
               call ssu_$release_temp_segment (sci_ptr, log_seg.copy_ptr (2));

          return;
          end clean_up_print_log_partition;

          end print_log_partition;
datm:
     proc (tp) returns (char (24) aligned);
dcl  tp ptr;					/* pointer to time value to convert */
dcl  timcv fixed bin (71);
dcl  timein (2) fixed bin (35) based (tp);
dcl  timeint (2) fixed bin (35) based (addr (timcv));
dcl  timout char (24);
	timeint = timein;				/* Copy time value to assure even boundary */
	call date_time_ (timcv, timout);
	return (timout);
     end datm;
%page;
display_hw_fault:
     proc (fault_msgp);

dcl  hr_ptr ptr;
dcl  fault_msgp ptr;
dcl  my_mcp ptr;
dcl  1 a_arg_bits_def like arg_bits_def;
dcl  1 fault_msg aligned,
       2 mcx like mc aligned;

dcl  1 fault_msg1 aligned based (fault_msgp),
       2 mcy like mc aligned,
       2 hisregs (128) bit (36) aligned;


/* set up to display all MC data */

	a_arg_bits_def.dump, a_arg_bits_def.mc_stored, a_arg_bits_def.long = "0"b;
	a_arg_bits_def.all = "1"b;
	arg_bits_ptr = addr (a_arg_bits_def);
	mcp = fault_msgp;
	hr_ptr = addr (fault_msg1.hisregs);

/* Copy the data over to auto. This is necessary as the PRs in syserr are
   not on even word boundaries. */

	mcx = mc;
	unspec (mcx.prs) = unspec (mc.prs);
	my_mcp = addr (fault_msg);
	call azm_display_mc_ (sci_ptr, amu_info_ptr, my_mcp, arg_bits_ptr, code);

	call ioa_ ("^/History Register Data:^/");
	call amu_$hranl (hr_ptr, null, "0"b);
	call ioa_ ("^/");
	msgs_printed = msgs_printed + 1;
	return;
     end display_hw_fault;

%page;
%include amu_info;
%page;
%include syserr_log_dcls;
%page;
%include log_segment;
%page;
%include log_message;
%page;
%include syserr_data;
%page;
%include syserr_binary_def;
%page;
%include print_syserr_msg_args;
%page;
%include syserr_message;
%page;
%include amu_hardcore_info;
%page;
%include mc;
%page;
%include amu_mc;



     end azm_syserr_;
