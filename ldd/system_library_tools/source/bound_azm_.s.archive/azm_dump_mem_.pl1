/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */
azm_dump_mem_:
     proc (P_amu_info_ptr, P_address, P_indx, P_segno, P_offset,
	     P_scu, P_abs_w, P_paged, P_code);

/*
    Modified July 84 by B. Braun to add knowledge of unpaged_page_tables.    
    Modified September 84 by B. Braun to add knowledge of int_unpaged_page_tables. Also, check all sdws whether 
            cme.abs_w is true or not.
*/

/* Parameters */

dcl  P_amu_info_ptr ptr,
     P_address fixed bin (24),
     P_indx fixed bin,
     P_segno fixed bin,
     P_offset fixed bin (18),
     P_scu fixed bin,
     P_abs_w bit (1),
     P_paged bit (1),
     P_code fixed bin (35);

/* Automatic */


dcl  add_sdw fixed bin (24),
     add_ptw fixed bin (24),
     aste_size fixed bin (18),
     bd_sdw fixed bin (24),
     code fixed bin (35),
     contr_ptr ptr,
     cme_size fixed bin (18),
     dseg_no fixed bin,
     found bit(1),
     i fixed bin (18),
     ignore fixed bin (21),
     j fixed bin (18),
     k fixed bin,
     loop_exit bit (1),
     mem_address fixed bin (24),
     mem_base fixed bin (24),
     mem_config_sw bit (1) init("0"b),
     mem_max fixed bin (24),
     mem_config bit (1),
     offset fixed bin (18),
     pds_dstep ptr,
     page_no fixed bin (18),
     pt_offset fixed bin (18),
     pt_size fixed bin (18),
     seg_offset fixed bin(18),
     save_process_index fixed bin,
     seg_name char (32),
     seg_no fixed bin,
     sst_base fixed bin (24),
     sst_segno fixed bin,
     str_segno fixed bin,
     str_size fixed bin (18),
     temp_dstep bit (18),
     temp_indx fixed bin,
     temp_ptr ptr,
     word_no fixed bin;

/* Structures */

dcl 1 active_seg_table like aste;
dcl 1 contr_data (0:7) like scs$controller_data;
dcl 1 core_map like cme;
dcl 1 hard_cur like hardcore_cur;
dcl 1 ptw_a (0:255) like ptw;
dcl 1 ptw_ab (0:255) like ptw based;
dcl 1 page_table_word like ptw;
dcl 1 seg_desc like sdw;
dcl 1 seg_trailer like str;

dcl 1 mem_conf_data (0:7),
    2 base fixed bin,
    2 data char (32);
dcl 1 temp_conf like mem_conf_data;

/* External */

dcl  amu_$definition_ptr		entry (ptr, char (*), char (*), fixed bin (35)) returns (ptr);
dcl  amu_$do_translation		entry (ptr, fixed bin, ptr, fixed bin (18), fixed bin (18), fixed bin (35));
dcl  amu_$do_translation_by_ptr	entry (ptr, ptr, fixed bin (18), ptr, fixed bin (35));
dcl  amu_$do_translation_hunt_ptr	entry (ptr, ptr, ptr, fixed bin(35));
dcl  amu_$fdump_mpt_change_idx	entry (ptr, fixed bin);
dcl  amu_$hardcore_info_set_cur_ptrs	entry (ptr, ptr);
dcl  amu_$return_val_per_process	entry (ptr, fixed bin) returns (bit (1));
dcl  amu_$slt_search_seg_num		entry (ptr, ptr, char (32), fixed bin, fixed bin (35));
dcl (ioa_, ioa_$rsnnl)		entry () options (variable);

dcl  amu_et_$free_core		fixed bin (35) ext static;
dcl  amu_et_$non_existant_mem		fixed bin(35) ext static;
dcl  amu_et_$proc_not_dumped		fixed bin (35) ext static;

dcl  (addr, addrel, baseno, baseptr, 
      divide, fixed, hbound, mod,
      null, pointer, rel, 
      substr, size, unspec)		builtin;
%page;

/* azm_dump_mem_ entry */

/* This entry translate the absolute address to a virtual address by looking at all sdws.

    P_amu_info_ptr             amu_info pointer (input),
    P_address		 absolute memory address (input),
    P_indx		 process index (output),
    P_segno		 segno number of P_address (output),
    P_offset		 segno offset (output),   
    P_scu			 system controller unit (output), 
    P_abs_w		 "1"b if wired segment (output),
    P_paged		 "1"b if segment is paged (output),
    P_code		 error code (output).

*/

    go to DUMP;


azm_dump_mem_$mem_config: entry (P_amu_info_ptr, P_code);

/*  Prints the memory configuration */

    mem_config_sw = "1"b;
    amu_info_ptr = P_amu_info_ptr;
    mem_address = 0;
    page_no = 0;
    word_no = 0;
    go to CONFIG;


DUMP:	
    amu_info_ptr = P_amu_info_ptr;
    mem_address = P_address;
    P_abs_w = "0"b;
    P_paged = "1"b;
    page_no = divide (mem_address, 1024, 21);
    word_no = mod (mem_address, 1024);

CONFIG:	

    code = 0;
    mem_config = "0"b;
    contr_ptr = addr (contr_data);
    temp_ptr = amu_$definition_ptr (amu_info_ptr, "scs", "controller_data", code);
    if code ^= 0 then do;
       P_code = code;
       return;
       end;

    call amu_$do_translation_by_ptr (amu_info_ptr, temp_ptr, size (contr_data), contr_ptr, code);
    if code ^= 0 then do;
       P_code = code;
       return;
       end;

    if mem_config_sw then go to MEM_CONF;
    do i = 0 to 7 while (^mem_config);
       if page_no >= contr_data (i).base then
          if page_no < (contr_data (i).base + contr_data (i).size) then
	   if contr_data (i).info.online then
		mem_config = "1"b;
       end;

    if ^(mem_config) then do;
       P_code = amu_et_$non_existant_mem;
       return;
       end;

    if mem_config_sw then do;
MEM_CONF:
       call ioa_ ("Memory Configuration:");
       j = 0;
       do i = 0 to 7;
	if contr_data (i).online  then do;
	   mem_base = contr_data (i).base * 1024;
	   mem_max = ((contr_data (i).size * 1024) -1) + mem_base;
	   call ioa_$rsnnl ("^5xMem ^a ^8o to ^8o", mem_conf_data (j).data, ignore,
		substr ("ABCDEFGH", i + 1, 1), mem_base, mem_max);
	   mem_conf_data (j).base = contr_data (i).base;
	   j = j + 1;
	   end;
          end;
	j = j - 1;
	do k = 0 to j - 1;
	   do i = k + 1 to j;
	      if mem_conf_data (i).base < mem_conf_data (k).base then do;
	         temp_conf = mem_conf_data (k);
	         mem_conf_data (k) = mem_conf_data (i);
	         mem_conf_data (i) = temp_conf;
	         end;
	      end;
	   end;
	   do i = 0 to j;
	      call ioa_ ("^a", mem_conf_data (i).data);
	      end;
	      return;
	   end;


/* get ptr to unpaged_page_tables and set hardcore current pointers */

    hardcore_cur_ptr = addr (hard_cur);
    call amu_$hardcore_info_set_cur_ptrs (amu_info_ptr, hardcore_cur_ptr);
    upt_ptr = hardcore_cur.uptp;

/* get the pointer to the core map */

    temp_ptr = amu_$definition_ptr (amu_info_ptr, "sst", "cmp", code);
    if code ^= 0 then do;
       P_code = code;
       return;
       end;

    seg_no = fixed (baseno (temp_ptr), 17);
    sst_segno = seg_no;
    offset = fixed (rel (temp_ptr), 17);
    cme_size = 4;

/* now get the core_map ptr in temp_ptr */

    call amu_$do_translation (amu_info_ptr, seg_no, addr (temp_ptr), offset, 2, code);
    if code ^= 0 then do;
       P_code = code;
       return;
       end;

    offset = fixed (rel (temp_ptr), 18) + (page_no * cme_size);
    seg_no = fixed (baseno (temp_ptr), 17);
    cmep = addr (core_map);			/* now get the cme */
    call amu_$do_translation (amu_info_ptr, seg_no, cmep, offset, cme_size, code);
    if code ^= 0 then do;
       P_code = code;
       return;
       end;

    P_scu = fixed (cme.contr, 17);
    P_abs_w = cme.abs_w;
						/* search this process */

       dseg_no = hardcore_info.segno.dseg;
       sdwp = addr (seg_desc);
       call amu_$do_translation (amu_info_ptr, dseg_no, sdwp, (sst_segno * 2), 2, code);
       if code ^= 0 then do;
	P_code = code;
	return;
	end;

       sst_base = fixed (sdw.add, 24);

       do i = 0 by 2 to (hardcore_info.hcs_count * 2);
	call amu_$do_translation (amu_info_ptr, dseg_no, sdwp, i, 2, code);
	if code ^= 0 then do;
	   P_code = code;
	   return;
	   end;
	add_sdw = fixed (sdw.add, 24);
	bd_sdw = fixed (sdw.bound, 24) * 16;
	if sdw.unpaged  then do;
	   if (mem_address >= add_sdw) then do;
	      if mem_address <= add_sdw + bd_sdw then do;
	         P_segno = divide (i, 2, 17);
	         P_offset = mem_address - add_sdw;
	         P_indx = amu_info.process_idx;
	         P_paged = "0"b;
	         P_code = 0;
	         return;
	         end;
 	      end;
	   end;
          else do;
	   pt_size = divide (bd_sdw, 1024, 18);
	   call get_ptp(add_sdw, ptp);
	   do j = 0 to pt_size;
	      if ptwa (j).df  then do;
	         add_ptw = (fixed (ptwa (j).add, 18) * 64);
	         if (mem_address >= add_ptw) & (mem_address < add_ptw + 1024) then do;
		  P_segno = divide (i, 2, 17);
		  P_offset = (j * 1024) + word_no;
		  P_indx = amu_info.process_idx;
		  P_code = 0;
		  return;
		  end;
	         end;
	      end; 
	   end;  /* if sdw is paged */
          end;   /* sdw loop */

/* now look at the ptw to see if it is valid */
    if cme.ptwp = "0"b then do;

/* no ptw pointer and not abs wired there for can not be in use */
       P_code = amu_et_$free_core;
       return;
       end;

    ptp = addr (page_table_word);
    offset = fixed (cme.ptwp, 18);
    call amu_$do_translation (amu_info_ptr, sst_segno, ptp, offset, 1, code);
    if code ^= 0 then do;
       P_code = code;
       return;
       end;

    if ^(ptw.df) then do; 			/* page not in code */
       P_code = amu_et_$free_core;
       return;
       end;
					/* now get the aste */
    offset = fixed (cme.astep, 18);
    astep = addr (active_seg_table);
    aste_size = size (aste);
    call amu_$do_translation (amu_info_ptr, sst_segno, astep, offset, aste_size, code);
    if code ^= 0 then do;
       P_code = code;
       return;
       end;

    if aste.strp = "0"b then do;       /* segment not active */
       P_code = amu_et_$proc_not_dumped;
       call by_process_search;
       return;
       end;

/* now get the str_seg data */

    seg_name = "str_seg";
    call amu_$slt_search_seg_num (hard_cur.sltp, hard_cur.sltntp, seg_name, str_segno, code);
    if code ^= 0 then do;
       P_code = code;
       return;
       end;

    offset = fixed (aste.strp, 18);
    str_size = size (str);
    strp = addr (seg_trailer);
    call amu_$do_translation (amu_info_ptr, str_segno, strp, offset, str_size, code);
    if code ^= 0 then do;
       P_code = code;
       return;
       end;
				/* now find the first process that this seg known  */
    do while (str.bp ^= "0"b);
       offset = fixed (str.bp, 18);
       call amu_$do_translation (amu_info_ptr, str_segno, strp, offset, str_size, code);
       if code ^= 0 then do;
	P_code = code;
	return;
	end;
       end;

    save_process_index = amu_info.process_idx;
    if amu_$return_val_per_process (amu_info_ptr, fixed (str.segno, 17)) then do;
       pds_dstep = amu_$definition_ptr (amu_info_ptr, "pds", "dstep", code);
       if code ^= 0 then do;
	P_code = code;
	return;
	end;
       save_process_index = amu_info.process_idx;

next_str:
       loop_exit = "0"b;
       do temp_indx = 0 to hbound (fdump_process_table.array, 1) while (^loop_exit);
	call amu_$fdump_mpt_change_idx (amu_info_ptr, temp_indx);
	call amu_$do_translation_by_ptr (amu_info_ptr, pds_dstep, 1, addr (temp_dstep), code);
	if code ^= 0 then do;
	   P_code = code;
	   goto ERROR_EXIT;
	   end;
	if temp_dstep = str.dstep /* found a procsee */ then loop_exit = "1"b;
	end;
       if (^loop_exit) & str.fp ^= "0"b then do;
          offset = fixed (str.fp, 18);
	call amu_$do_translation (amu_info_ptr, str_segno, strp, offset, str_size, code);
	if code ^= 0 then do;
	   P_code = code;
	   return;
	   end;
	goto next_str;
	end;
       end;
    else loop_exit = "1"b;
    if ^(loop_exit) then P_code = amu_et_$proc_not_dumped;
    P_indx = amu_info.process_idx;
    P_segno = fixed (str.segno, 17);
    page_no = fixed (cme.ptwp, 18) - (fixed (cme.astep, 18) + aste_size);
    P_offset = word_no + (page_no * 1024);
    call amu_$fdump_mpt_change_idx (amu_info_ptr, save_process_index);
    return;

ERROR_EXIT:

    P_code = code;
    call amu_$fdump_mpt_change_idx (amu_info_ptr, save_process_index);
    return;

%page;

/* We failed to find the address so we have to try to do so the hard way */

by_process_search: proc;

dcl off18 fixed bin (18) aligned init (0);
dcl last_seg fixed bin (35);
dcl dsegp ptr;
	         save_process_index = amu_info.process_idx;
	         dumpptr = fdump_info.dump_seg_ptr (0);
	         sstp = hardcore_cur.sstp;
	         substr (unspec (off18), 19, 14) = substr (unspec (mem_address), 13, 14);

	         do k = 0 to hbound (fdump_process_table.array, 1);
		  call amu_$fdump_mpt_change_idx (amu_info_ptr, k);
		  call amu_$do_translation_hunt_ptr (amu_info_ptr, pointer (baseptr (hardcore_info.dseg), 0), dsegp, code);
		  if code ^= 0 then do;
		     P_code = code;
		     call amu_$fdump_mpt_change_idx (amu_info_ptr, save_process_index);
		     return;
		     end;
		  
		  fp_table_ptr = addr (fdump_process_table.array(k));
		   last_seg = fixed (dump.segs (fp_table.first_seg).length, 18) * 64;
		   last_seg = divide (last_seg, 2, 17, 0) - 1;
		  do i = 0 to last_seg;
		     sdwp = addrel (dsegp, i * 2);
		     if sdw.df then do;
		        add_sdw = fixed (sdw.add, 24);
		        bd_sdw = fixed (sdw.bound, 24) * 16;
		        if sdw.unpaged then do;
			 j = ((fixed (sdw.bound, 14) + 1) * 16) -1;
			 if mem_address >= add_sdw & mem_address <= add_sdw + j then do;
			    P_segno = divide (i, 2, 17);
			    P_offset = mem_address -add_sdw;
			    P_indx = amu_info.process_idx;
			    P_paged = "0"b;
			    P_code = 0;
			    goto RET;
			    end;
			 else go to next_lap;
			 end;
		        else do;
			 ptp = addrel (sstp, add_sdw - fixed (sst.ptwbase, 18));
			 pt_size = divide (bd_sdw, 1024, 18);
			 astep = addrel (ptp, - (sst.astsize));
			 do j = 0 to fixed (aste.csl, 9);
			    if ^ptw.df then go to pt_lap;
			    if fixed (ptw.add, 18) = off18 then do;
			       P_segno = i;
			       P_offset = j * 1024 + mod (mem_address, 1024);
			       P_indx = amu_info.process_idx;
			       P_code = 0;
			       goto RET;
			       end;
pt_lap:			    ptp = addrel (ptp, 1);
			    end;
			 end;
		        end;
next_lap:		     end;
		  end;
	         
RET:	         call amu_$fdump_mpt_change_idx (amu_info_ptr, save_process_index);
	         return;

	         end by_process_search;
%page;
get_ptp: proc(add_sdw, ptp);
         
/* Parameters */

dcl add_sdw fixed bin(24);
dcl ptp ptr;

/*  This routine determines the page table pointer  .

    add_sdw	the contents of a sdw address (input),
    ptp		page table pointer (output),
*/

dcl relative_offset fixed bin(26);
dcl sdw_add fixed bin(26);
dcl sst_ptr ptr;


    sst_ptr = hardcore_cur.sstp;
    sdw_add = fixed (add_sdw, 26);      /* want fixed bin(26) */

    if upt_ptr = null() then do;
       relative_offset = add_sdw - sst_base;
       ptp = addrel(sst_ptr, relative_offset);                
       end;
    else if (add_sdw > upt.upt_absloc & add_sdw < upt.upt_last_loc) then do;
       /* found in unpaged_page_tables */
       relative_offset = sdw_add - upt.upt_absloc;
       ptp = addrel(upt_ptr, relative_offset);  
       end;
    else if (add_sdw > upt.iupt_absloc & add_sdw < upt.iupt_last_loc) then do;
       /* found in int_unpaged_page_tables */
       relative_offset = sdw_add - upt.iupt_absloc;
       ptp = addrel(upt_ptr, relative_offset);  
       end;
    else do;
       /* found in sst_seg */
       relative_offset = sdw_add - upt.sst_absloc;
       ptp = addrel(sst_ptr, relative_offset);        
       end;

end get_ptp;

%page;%include amu_fdump_info;
%page;%include amu_hardcore_info;
%page;%include amu_info;
%page;%include aste;
%page;%include bos_dump;
%page;%include cmp;
%page;%include ptw;
%page;%include scs;
%page;%include sdw;
%page;%include sst;
%page;%include str;
%page;%include unpaged_page_tables;

     end azm_dump_mem_;
