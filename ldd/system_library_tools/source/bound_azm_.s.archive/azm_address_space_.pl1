/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(87-01-14,Parisek), approve(87-07-09,MCR7746),
     audit(87-07-20,Fawcett), install(87-07-28,MR12.1-1049):
     Call amu_$terminate_translation to free oldest allocated fdump temp
     segments when user's process_dir is found to be at least 75% full.
     (phx19335)
                                                   END HISTORY COMMENTS */


azm_address_space_: proc ();

	return;					/* not an entrypoint */

/* format: style4,delnl,insnl,ifthenstmt,indnoniterend,ifthendo,ifthen,^thendo */


/* Assorted requests for analyze_multics. */


	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* 0) Created: 06/25/83 by B. Braun from the division of azm_misc_requests_ into smaller	*/
	/* modules.  This includes azm requests dealing with address spaces: select_dump,	*/
	/* deadproc_mode (not a request yet), delete_dump, list_dumps, fdump_components		*/
	/*									*/
	/* 1) Modified: 08/10/84 by B. Braun to add $deadproc entry.      	                    */
	/* 2) Modified: 09/26/84 by R. A. Fawcett to call azm_why$who when a fdump is found.      */
	/* 3) Modified: 01/11/85 by BLB to abort with no code after a call to amu_$deadproc_init. */
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */


dcl  (
     P_sci_ptr pointer,
     P_azm_info_ptr pointer
     ) parameter;

/* Automatic */

dcl WHAT_ERF			fixed bin;

dcl af_sw				bit (1) aligned;
dcl already_translated		bit(1);
dcl alloted_quota                       fixed bin(18);
dcl axp				ptr init (null);
dcl argl				fixed bin (21);
dcl argno				fixed bin;
dcl argp				pointer;
dcl axstring			char (7) init ("");
dcl brief_sw			bit (1) init ("0"b);
dcl code				fixed bin (35);
dcl configp			ptr init (null);
dcl cur_erf			bit (1) init ("0"b);
dcl del_cur_erf			bit (1) init ("0"b);
dcl del_erf			bit (1) init ("0"b);
dcl destroy_amu_ptr                     ptr;
dcl dir_name			char (168);
dcl dir_sw			bit (1) init ("0"b);
dcl dp_path			char(168);
dcl dsegp				ptr init (null);
dcl dump_path			char(168);
dcl erf_name			char (168);
dcl erf_path			char (168);
dcl erfs_found			bit (1) init ("0"b);
dcl expand_ptr_sw			bit (1) init ("0"b);
dcl expand_sw			bit (1) init ("0"b); /* "1"b = expand syserr binary data */
dcl first_erf			bit (1) init ("0"b);
dcl first_value_set			bit (1) init ("0"b);
dcl forward_search			bit (1) init ("0"b);
dcl frame_entry			bit (1) init ("0"b);
dcl hdr_printed			bit (1) init ("0"b);
dcl last				fixed bin init (0);
dcl last_erf			bit (1) init ("0"b);
dcl list_erfs			bit (1) init ("0"b);
dcl ll				fixed bin init (0);
dcl ln				fixed bin init (0);
dcl match_str			char (256) var init (""); /* the syserr string to match on */
dcl nargs				fixed bin;
dcl next_erf			bit (1) init ("0"b);
dcl prev_erf			bit (1) init ("0"b);
dcl print_all_trans			bit (1) init ("0"b);
dcl print_erf_sw			bit (1);
dcl print_sw			bit(1);
dcl process_dir                         char(168);	/* users process dir */
dcl quota_percent_flt                   float bin(18);	/* alloted quota divided by quota_used */
dcl quota_percent_fix                   fixed bin(18);
dcl quota_used                          fixed bin(18);	/* used quota in pd */
dcl range_value_set			bit (1) init ("0"b);
dcl raw_syserr_data			bit (1) init ("0"b);	/* "1"b = print it in octal */
dcl ret_str			char (168) var init ("");
dcl rv_lth			fixed bin (21);
dcl rv_ptr			ptr;
dcl sci_ptr			pointer;		/* assorted info pointers */
dcl segln				fixed bin (35) init (0);
dcl slog_code			fixed bin init (3);	/* the syserr_code, default to =< 3 */
dcl sons_lvid                           bit(36);
dcl start_configp			ptr init (null);
dcl struct_sw			bit (1) init ("0"b);
dcl tacc_sw                             fixed bin(1);
dcl trp                                 fixed bin(71);
dcl tup                                 bit(36) aligned;
dcl why_erf			bit (1) init ("0"b);

/* Based */

dcl arg				char (argl) based (argp);
dcl rv_str			char (rv_lth) varying based (rv_ptr);

/* Constants */

/* Builtins */

dcl  (addr, char, null, search, string, 
       index)		builtin;

/* Conditions */

dcl cleanup			condition;

/* External Entries */

dcl amu_$deadproc_init		entry (char(*), char (168), ptr, fixed bin (35));
dcl amu_$current_deadproc		entry (ptr);
dcl amu_$deadproc_name_af		entry (ptr, ptr, fixed bin(21));
dcl amu_$fdump_mgr_cur_erf		entry(ptr);
dcl amu_$fdump_mgr_name_erf		entry(ptr);
dcl amu_$fdump_mgr_find_fdump		entry (char(*), ptr, char(*), fixed bin, ptr, fixed bin(35));
dcl amu_$fdump_mgr_init_fdump		entry (char (*), ptr, ptr, fixed bin (35));
dcl amu_$find_system_fdump		entry (character (*), pointer, fixed binary (35));
dcl amu_$find_system_pdir		entry (character (*), pointer, fixed binary (35));
dcl amu_$list_system_dumps		entry (character (*), character (8) aligned, fixed bin, pointer, pointer, 
				fixed binary (35));
dcl amu_$terminate_translation          entry (ptr);
dcl azm_why_$who			entry (ptr, ptr, fixed bin(35));
dcl check_star_name_$path		entry (char(*), fixed bin(35));
dcl expand_pathname_$add_suffix	entry (char(*), char(*), char(*), char(*), fixed bin(35));
dcl get_pdir_                           entry returns (char(168));
dcl hcs_$quota_read                     entry (char(*), fixed bin(18), fixed bin(71),
	                                     bit(36) aligned, bit(36), fixed bin(1), fixed bin(18), fixed bin(35));
dcl ioa_				entry options (variable);
dcl pathname_			entry (char(*), char(*)) returns(char(168));
dcl ssu_$abort_line			entry options (variable);
dcl ssu_$add_request_table		entry (ptr, ptr, fixed bin, fixed bin(35));
dcl ssu_$arg_count			entry (pointer, fixed bin, bit (1) aligned);
dcl ssu_$arg_ptr			entry (pointer, fixed bin, pointer, fixed bin (21));
dcl ssu_$delete_request_table		entry (ptr, ptr, fixed bin(35));
dcl ssu_$get_subsystem_and_request_name entry (pointer) returns (char (72) varying);
dcl ssu_$print_message		entry() options(variable);
dcl ssu_$return_arg			entry (ptr, fixed bin, bit (1) aligned, ptr, fixed bin (21));

/* External Static */

dcl error_table_$badopt		fixed bin (35) external static;
dcl error_table_$noentry		fixed bin (35) external static;
dcl error_table_$nostars		fixed bin (35) external static;
dcl error_table_$too_many_args	fixed bin (35) external static;
dcl ssu_et_$request_table_not_found 	fixed bin (35) external static;

dcl  azm_request_table_$azm_request_table_ fixed bin external static;
dcl  azm_pdir_rq_table_$azm_pdir_rq_table_ fixed bin external static;
%page;
/*****************************************************************************/

azm_address_space_$list_dumps:
     entry (P_sci_ptr, P_azm_info_ptr);

dcl dx fixed bin;
dcl (fdump_sw, deadproc_sw) bit(1);
dcl list_name char(168);
dcl list_what fixed bin;

    call setup();

    if nargs > 3 then do;
       code = error_table_$too_many_args;
       call ssu_$abort_line (sci_ptr, code, "^/Usage: lsd {PATH} {-ctl_args");
       end;

    /* set defaults */

    deadproc_sw = "0"b;
    fdump_sw = "0"b;
    list_what = LIST_FDUMPS;
    list_name = "*";

    do argno = 1 to nargs;
       call ssu_$arg_ptr (sci_ptr, argno, argp, argl);
       if char (arg, 1) = "-" then do;
          if arg = "-fdump" | arg = "-fd" then fdump_sw = "1"b;
          else if arg = "-dp" | arg = "-deadproc" then deadproc_sw = "1"b;
          else call ssu_$abort_line (sci_ptr, error_table_$badopt, """^a"".", arg);
	end;
       else list_name = arg;
       end;
  
    if ^(fdump_sw | deadproc_sw) then fdump_sw = "1"b;    
    if fdump_sw & deadproc_sw then list_what = LIST_ALL;
    else if deadproc_sw then list_what = LIST_PDIRS;
    else if fdump_sw then list_what = LIST_FDUMPS;

    system_dump_list_ptr = null();
    on cleanup begin;
       if system_dump_list_ptr ^= null() then free system_dump_list;
       end;
    call amu_$list_system_dumps (list_name, SYSTEM_DUMP_LIST_VERSION_1, list_what, azm_info.area_ptr, 
			  system_dump_list_ptr, code);
    if code ^= 0 then call ssu_$abort_line (sci_ptr, code, 
				   "Listing ^[fdumps^;pdirs^] ^[matching ^a^;^sfound by ""dumps"" search paths^].",
				   fdump_sw, (search(list_name, "<>") ^= 0), list_name);

    do dx = 1 to system_dump_list.n_dumps;
       if system_dump_list.new_directory (dx) then call ioa_ ("Dumps in ^a:", system_dump_list.dir_name (dx));
       call ioa_ ("^5x^a", system_dump_list.full_entryname (dx));
       end;

       free system_dump_list;       /* all done */
return;
%page;
/*****************************************************************************/

azm_address_space_$fdump_components:
     entry (P_sci_ptr, P_azm_info_ptr);

sci_ptr = P_sci_ptr;
call ssu_$abort_line (sci_ptr, 0, "This request has not been implemented yet.");

return;
%page;
/*****************************************************************************/

azm_address_space_$delete_dump:
     entry (P_sci_ptr, P_azm_info_ptr);

sci_ptr = P_sci_ptr;
call ssu_$abort_line (sci_ptr, 0, "This request has not been implemented yet.");

return;
%page;
/*****************************************************************************/

azm_address_space_$erf:
     entry (P_sci_ptr, P_azm_info_ptr);

/* Select a new or previously translated ERF to peruse or delete. */

    call setup;

    if nargs = 0 then do;
       if ^azm_info.flags.in_erf then call ssu_$abort_line (sci_ptr, 0, "No dump has been selected yet.");
       call amu_$fdump_mgr_cur_erf (amu_info_ptr);
       return;
       end;

    if nargs > 1 then do;
       code = error_table_$too_many_args;
       call ssu_$abort_line (sci_ptr, code, "^/Usage: sld NAME | -next | -prev | -last | -first");
       return;
       end;

    first_erf, last_erf, prev_erf, next_erf, cur_erf, why_erf = "0"b;
    erf_name, dir_name, erf_path, dump_path = "";
    WHAT_ERF =  -1;
    do argno = 1 to nargs;
       call ssu_$arg_ptr (sci_ptr, argno, argp, argl);
       if index (arg, "-") = 1 then do;
          if arg = "-previous" | arg = "-prev" then do;
	   WHAT_ERF = 2;
	   prev_erf = "1"b;
	   end;
          else if arg = "-nx" | arg = "-next" then do;
	   WHAT_ERF = 3;
	   next_erf = "1"b;
	   end;
	else if arg = "-lt" | arg = "-last" then do;
	   WHAT_ERF = 1;                        /* looking for newest */
	   last_erf = "1"b;
	   end;
	else if arg = "-ft" | arg = "-first" then do;
	   WHAT_ERF = 0;                        /* looking for oldest */
	   first_erf = "1"b;
	   end;
   	else do;
	   call ssu_$abort_line (sci_ptr, error_table_$badopt, """^a"".", arg);
	   end;
          end;
       else do;
          dump_path = arg;
	end;
       end;


    SDI_ptr = addr(SDI);
    SDI.version = SYSTEM_DUMP_INFO_VERSION_1;
    SDI.dump_dir_name, SDI.dump_seg_prefix, SDI.dump_name, SDI.dump_entry_format = "";
    code = 0;
    if dump_path ^= "" then do;
       call check_star_name_$path  (dump_path, code);
       if code > 0 then 
          call ssu_$abort_line  (sci_ptr, error_table_$nostars, "^a", dump_path);
       call amu_$find_system_fdump (dump_path, SDI_ptr, code);
       if code ^= 0 then do;
          if code = error_table_$noentry then call ssu_$abort_line (sci_ptr, code, "Looking for fdump ^a.", dump_path);
	else call ssu_$abort_line (sci_ptr, code, "^a", dump_path);
	end;

       /* got the erf, check if it's already translated */
       already_translated = "0"b;
       if amu_info_ptr ^= null() then			/* ensure ERF is not already translated */
          call walk_chain((SDI.dump_name), amu_info_ptr, already_translated);  
       if already_translated then do;
          print_erf_sw = "1"b;
          goto FOUND_ERF;
          end;
       else do;
          /* here we init the fdump */
	goto INIT_FDUMP;
	end;
       end;

/*  Here we have to get a list of all fdumps and then determine the one wanted from the current one */

    if WHAT_ERF >= 0 then do;
       if (next_erf | prev_erf) then do;
          if amu_info_ptr = null() then call ssu_$abort_line (sci_ptr, 0, "No fdump currently selected.");
	if amu_info.type ^= FDUMP_PROCESS_TYPE then call ssu_$abort_line (sci_ptr, 0, "No current fdump selected.");		     
	end;
       if amu_info_ptr = null() then erf_path = "";
       else erf_path = pathname_((fdump_info.dump_dname), (fdump_info.dump_ename));
       call amu_$fdump_mgr_find_fdump ((ssu_$get_subsystem_and_request_name (sci_ptr)), amu_info_ptr, erf_path, 
			        WHAT_ERF, SDI_ptr, code);
       if code ^= 0 then return;   /* msg already printed */
       end;

    already_translated = "0"b;
    if amu_info_ptr ^= null() then			/* ensure ERF is not already translated 	*/
       call walk_chain((SDI.dump_name), amu_info_ptr, already_translated); 
    if already_translated then do;
       print_erf_sw = "1"b;
       goto FOUND_ERF;
       end;

INIT_FDUMP:
  
/* Get the amount of used quota in user's process directory before attempting
   a dump translation.  If at least 75% full then at least query user as to
   whether he/she still wants to continue. */

    process_dir = get_pdir_ ();
    call hcs_$quota_read (process_dir, alloted_quota, trp, tup, sons_lvid, tacc_sw, quota_used, code);
    if code ^= 0 then call ssu_$print_message (sci_ptr, code, "Will continue...");
    else do;
         quota_percent_flt = quota_used / alloted_quota;
         quota_percent_fix = quota_percent_flt*100;
         if quota_percent_fix >= 75 then do;
	    destroy_amu_ptr = amu_info_ptr;
	    do while (destroy_amu_ptr->amu_info.chain.prev ^= null);
	         destroy_amu_ptr = destroy_amu_ptr->amu_info.chain.prev;
	    end;
	    call amu_$terminate_translation (destroy_amu_ptr);
         end;
    end;

/* Ok will look for it */

    call amu_$fdump_mgr_init_fdump ((ssu_$get_subsystem_and_request_name (sci_ptr)), SDI_ptr, amu_info_ptr, code);

    if code ^= 0 then return;			/* message already printed */
    print_erf_sw = "1"b;
    string (azm_info.flags) = ""b;

/* chain this in at the end */

    call add_to_chain(azm_info.aip, amu_info_ptr);

   /* find the process that is indicated by scs$trouble_pid         */
   /* azm_why_$who will return a 0 code if it could find and set to */
   /* the trouble_pid if not able the default will not change and   */
   /* the error_table_$action_not_preformed will be returned but we */
   /* don't care and the code will be set to zero.	        */ 

    call azm_why_$who (sci_ptr,amu_info_ptr,code);
    code = 0;

FOUND_ERF:

    call set_azm_info (print_erf_sw, "0"b);

    /* change request tables */
    call ssu_$delete_request_table (sci_ptr,  addr(azm_pdir_rq_table_$azm_pdir_rq_table_), code);
    if code = ssu_et_$request_table_not_found then;
       /* If this code is returned, we must not add the table "azm_request_table_".
       If we do, all future calls to add the request table "pdir_rq_table_" will fail, although code returned is 0. */
    else do;
       call ssu_$add_request_table (sci_ptr, addr(azm_request_table_$azm_request_table_), 1, code);
       if code ^= 0 then call ssu_$print_message(sci_ptr, code, "Adding azm_request_table_.");
    end;

    return;
%page;
/*****************************************************************************/

azm_address_space_$deadproc:
     entry (P_sci_ptr, P_azm_info_ptr);

/* Select a new or previously translated SAVED PROC (deadproc) to peruse or delete. */

dcl dp_name char(168);

    call setup();
    print_sw = "0"b;
    if nargs = 0 then do;
       if ^azm_info.flags.saved_proc then call ssu_$abort_line (sci_ptr, 0, "No dead process selected.");
       call amu_$current_deadproc (amu_info_ptr);
       return;
       end;

    else if nargs > 1 then do;
       code = error_table_$too_many_args;
       call ssu_$abort_line (sci_ptr, code, "^/Usage: sldp NAME");
       return;
       end;

    dp_name, dp_path, dir_name = "";
    code = 0;
    already_translated = "0"b;
    call ssu_$arg_ptr (sci_ptr, 1, argp, argl);
    dp_path = arg;

    code = 0;
    call check_star_name_$path  (dp_path, code);
    if code > 0 then 
       call ssu_$abort_line  (sci_ptr, error_table_$nostars, "^a", dp_path);

    if amu_info_ptr ^= null() then do;  /* check to see if already translated */
/*       call parse_dump_path (dp_path, dp_name, dir_name);*/
       code = 0;
       call expand_pathname_$add_suffix (dp_path, PDIR_SUFFIX, dir_name, dp_name, code);
       if code ^= 0 then goto FIND_NAME;
       call walk_chain(dp_name, amu_info_ptr, already_translated);     
       if already_translated then goto FOUND_DP;
       end;

FIND_NAME:
    SDI.version = SYSTEM_DUMP_INFO_VERSION_1;
    SDI.dump_dir_name, SDI.dump_seg_prefix, SDI.dump_name, SDI.dump_entry_format = "";
    call amu_$find_system_pdir (dp_path, addr (SDI), code);
    if code ^= 0 then call ssu_$abort_line (sci_ptr, code, "^a", dp_path);

    call walk_chain((SDI.dump_name), amu_info_ptr, already_translated);     
    if already_translated then goto FOUND_DP;
    call amu_$deadproc_init ((ssu_$get_subsystem_and_request_name (sci_ptr)), 
		        pathname_(SDI.dump_dir_name, (SDI.dump_name)), amu_info_ptr, code);
    if code ^= 0 then call ssu_$abort_line (sci_ptr, 0);   /* message already printed */

    call add_to_chain(azm_info.aip, amu_info_ptr);
    string (azm_info.flags) = ""b;

FOUND_DP:
    
    call set_azm_info ("1"b, af_sw);

    /* change request tables */
    call ssu_$delete_request_table (sci_ptr, addr(azm_request_table_$azm_request_table_), (0));
    call ssu_$add_request_table (sci_ptr, addr(azm_pdir_rq_table_$azm_pdir_rq_table_), 1, code);
    if code ^= 0 then call ssu_$print_message(sci_ptr, code, "Adding azm_pdir_rq_table_.");

    return; /* end  "deadproc" request */
%page;
/*****************************************************************************/

add_to_chain:  proc(start_ptr, new_ptr);

dcl new_ptr ptr;
dcl start_ptr ptr;
dcl temp_ptr ptr;

       temp_ptr = start_ptr;
       if temp_ptr ^= null then do;
	/* first walk chain to last amu_info in chain */
	  do while (temp_ptr -> amu_info.chain.next ^= null);
	       temp_ptr = temp_ptr -> amu_info.chain.next;
	  end;
        end;

    /* Now chain new one on */

        new_ptr -> amu_info.chain.prev = temp_ptr;
        new_ptr -> amu_info.chain.next = null ();
        if temp_ptr ^= null () then temp_ptr -> amu_info.chain.next = new_ptr;

    end add_to_chain;
%page;
/*****************************************************************************/

set_azm_info:
          proc (print_it, af_sw);

dcl print_it bit (1);
dcl af_sw bit(1) aligned;

    azm_info.aip = amu_info_ptr;
    if trans_selected () then do;
       if amu_info.type = FDUMP_TYPE | amu_info.type = FDUMP_PROCESS_TYPE then do;
          azm_info.erf_name = fdump_info.erf_name;
	azm_info.flags.in_erf = "1"b;
	if print_it then call amu_$fdump_mgr_name_erf (amu_info_ptr);
	end;
       else if (amu_info.type = SAVED_PROC_TYPE) then do;
	azm_info.erf_name = amu_info.fdump_info_ptr -> old_uid_table.dp_name;
	azm_info.flags.saved_proc = "1"b;
          if af_sw then call amu_$deadproc_name_af (amu_info_ptr, rv_ptr, rv_lth);
	else  call amu_$current_deadproc (amu_info_ptr);
          end;
       end;
	else azm_info.erf_name = "";
   end set_azm_info;
%page;
/*****************************************************************************/

setup:
     proc;

    sci_ptr = P_sci_ptr;
    azm_info_ptr = P_azm_info_ptr;
    amu_info_ptr = azm_info.aip;
    call ssu_$return_arg (sci_ptr, nargs, af_sw, rv_ptr, rv_lth);
    if af_sw then rv_str = "";
    else call ssu_$arg_count (sci_ptr, nargs, af_sw);
    allocate_uid_hash = 0;				/* To avoid the compiler warning		*/
end setup;
%page;
/*****************************************************************************/

trans_selected:
     proc () returns (bit (1));

	if amu_info_ptr = null () then return ("0"b);
	return ("1"b);
     end trans_selected;
%page;
/*****************************************************************************/

walk_chain:  proc(dump_name, a_chain_ptr, found);
	   
dcl dump_name char(*);
dcl a_chain_ptr ptr;
dcl found bit(1);

/*  This routine walks the amu_info chain to determine if the dump is already translated. 
    If so, found is true, else found is false.

    dump_name          name of dump to look for (input)
    a_chain_ptr	   chain_ptr, if found the ptr of the found translation is returned. (input/output)
    found		   true if already translated (output)
*/

dcl temp_ptr ptr;
dcl chain_ptr ptr;

    chain_ptr = a_chain_ptr;
    found = "0"b;
    if chain_ptr = null then return;    /* no chain to walk exists */

    /* find first trans */
    do while (chain_ptr -> amu_info.chain.prev ^= null);
       chain_ptr = chain_ptr -> amu_info.chain.prev;
    end;
   
    do while (chain_ptr ^= null & ^found);    /* now walk chain */
       temp_ptr = chain_ptr -> amu_info.fdump_info_ptr;
       if chain_ptr -> amu_info.type = FDUMP_TYPE | chain_ptr -> amu_info.type = FDUMP_PROCESS_TYPE then do;
   	   if temp_ptr -> fdump_info.erf_name = dump_name then do;
		/* Ok I found it */
	      a_chain_ptr = chain_ptr;
	      found = "1"b;
	      end;
	   end;
          else if chain_ptr -> amu_info.type = SAVED_PROC_TYPE then do;
   	   if temp_ptr -> old_uid_table.dp_name = dump_name then do;
	      /* Ok I found it */
	      a_chain_ptr = chain_ptr;
	      found = "1"b;
	      end;
	   end;
	chain_ptr = chain_ptr -> amu_info.chain.next;
        end;   /* end loop */

end walk_chain;
%page;
%include amu_info;
%page;
%include amu_fdump_info;
%page;
%include amu_old_uid_table;
%page;
%include amu_translation;
%page;
%include azm_info;
%page;
%include system_dump_info;

dcl  1 SDI			aligned like system_dump_info;
dcl SDI_ptr			ptr;


end azm_address_space_;
