/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */
structure_ref_:
     procedure ();

/* *	STRUCTURE_REF_
   *
   *	This procedure parses a reference to a PL/I variable; it is used
   *	by analyze_multics to implement the structure display facility.
   *	A subset of PL/I syntax is permitted: reference either to scalar
   *	variables or to structures, with subscripts. The subscripts must
   *	be decimal integers, and the ":" syntax may be used to indicate 
   *	a cross-section.  Either parentheses or braces may be used to 
   *	indicate subscripts, to avoid command processor problems.
   *
   *	The structure reference may be followed by one or more names, 
   *	separated by slashes, which can be interpreted by the caller as
   *	as substrings on which to match to select elements of the structure.
   *	There must be a slash between the structure reference and the first
   *	match string, and a slash between each pair of match strings. An
   *	optional slash may be supplied at the end, for compatibility with
   *      qedx syntax. 
   *
   *	The results of the parse are a top level name, a fully qualified
   *	structure name (suitable for use with stu_), and a subscript
   *	array for use with display_data_.
   *
   *	Examples:
   *
   *	   pvt            pvt.array        pvt.array{13}
   *         pvt/volmap/    pvt.array{1:4}/volmap/
   *
   *	 4 Jun 83, WOS: Initial coding
   */

declare   P_reference char (*) parameter;		/* Input: name to resolve */
declare   P_structure char (*) parameter;		/* Output: Top level structure name */
declare   P_full_name char (*) parameter;		/* Output: fully qualified name */
declare   P_subscripts (2, *) fixed bin parameter;	/* Output: cross-section bounds */
declare   P_n_subscripts fixed bin parameter;		/* Output: how many subscripts are valid */
declare   P_substrings (*) char (*) varying parameter;	/* Output: substrings to match in reference */
declare   P_n_substrings fixed bin parameter;		/* Output: how many substrings there are */
declare   P_code fixed bin (35) parameter;

declare   code fixed bin (35);

declare   reference char (256) varying;
declare   top_name char (64) varying;
declare   full_name char (256) varying;
declare   subscript_idx fixed bin;
declare   n_subscripts fixed bin;
declare   n_substrings fixed bin;

declare   n_tokens fixed bin;
declare   n_reference_tokens fixed bin;

declare 1 token (-1 : 80),
          2 type fixed bin,
          2 start fixed bin,
          2 lth fixed bin;

declare   TOKEN_BLANK init (1) fixed bin internal static options (constant);
declare   TOKEN_NUMBER init (2) fixed bin internal static options (constant);
declare   TOKEN_NAME init (3) fixed bin internal static options (constant);
declare   TOKEN_DOT init (4) fixed bin internal static options (constant);
declare   TOKEN_COMMA init (5) fixed bin internal static options (constant);
declare   TOKEN_COLON init (6) fixed bin internal static options (constant);
declare   TOKEN_OPEN init (7) fixed bin internal static options (constant);
declare   TOKEN_CLOSE init (8) fixed bin internal static options (constant);
declare   TOKEN_SLASH init (9) fixed bin internal static options (constant);

declare   LOWER fixed bin internal static options (constant) init (1);
declare   UPPER fixed bin internal static options (constant) init (2);

declare  (subscriptrange, stringsize, conversion) condition;

declare  (addr, fixed, index, null, substr) builtin;

/*  */

structure_ref_$parse:
     entry (P_reference,
          P_structure, P_full_name, 
	P_subscripts, P_n_subscripts, P_substrings, P_n_substrings, P_code);

/* These catch all the cases of too mayy subscripts, too many names, etc.
   It might be nice to give real error messages for these, but it's a lot
   of trouble, and the syntax of structure references is pretty simple. 
   The conditions are selectively enabled for the statements where we want
   to detect that they have been raised. */

	on condition (stringsize) goto SYNTAX_ERROR;
	on condition (subscriptrange) goto SYNTAX_ERROR;
	on condition (conversion) goto SYNTAX_ERROR;

	P_structure = "";
	P_full_name = "";
	P_n_subscripts = 0;
	P_n_substrings = 0;

	reference = rtrim (P_reference);

	call parse_reference ();

	call parse_reference_tokens ();

	call parse_substring_tokens ();

	P_structure = top_name;
	P_full_name = full_name;
	P_n_subscripts = n_subscripts;
	P_n_substrings = n_substrings;
	P_code = 0;

	return;

SYNTAX_ERROR:
	P_code = code;
	return;

/*  */

parse_reference:
     procedure ();

declare   char_idx fixed bin;
declare   token_idx fixed bin;
declare   state fixed bin;
declare   action fixed bin;
declare   this_type fixed bin;
declare   this_char char (1) unaligned;

declare   CHAR_WHITE init (1) fixed bin internal static options (constant);
declare	CHAR_SPECIAL init (2) fixed bin internal static options (constant);
declare	CHAR_DIGIT init (3) fixed bin internal static options (constant);
declare	CHAR_ALPHA init (4) fixed bin internal static options (constant);

declare   STATE_NONE init (1) fixed bin internal static options (constant);
declare   STATE_NAME init (2) fixed bin internal static options (constant);
declare   STATE_NUMBER init (3) fixed bin internal static options (constant);

declare   ACTION_INVALID init (1) fixed bin internal static options (constant);
declare   ACTION_DONE init (2) fixed bin internal static options (constant);
declare   ACTION_ADD init (3) fixed bin internal static options (constant);

declare   ACTION (3, 4) internal static options (constant) init
         (3,  2,  2,  2,
          2,  2,  3,  3, 
          2,  2,  3,  1);

declare   STATE (3, 4) internal static options (constant) init
         (1,  1,  3,  2,
	1,  1,  2,  2, 
	1,  1,  3,  1);

/*  */

	do token_idx = lbound (token, 1) to 1;		/* Make spurious tokens for backward references */
	     token.type (token_idx) = TOKEN_BLANK;
	     end;

	state = STATE_NONE;
	token_idx = 1;
	do char_idx = 1 to length (reference);
	     this_char = substr (reference, char_idx, 1);
	     this_type = char_type (this_char);
	     action = ACTION (state, this_type);
	     state = STATE (state, this_type);

	     if (action = ACTION_INVALID) then do;
		code = char_idx;
		goto SYNTAX_ERROR;
		end;

	     else if (action = ACTION_ADD) then do;
		if (this_type ^= CHAR_WHITE) then
		     token.lth (token_idx) = token.lth (token_idx) + 1;
		end;

	     else if (action = ACTION_DONE) then do;
		if (token.type (token_idx) ^= TOKEN_BLANK) then
		     token_idx = token_idx + 1;

(subscriptrange):					/* To catch too many tokens */
	    	token.lth (token_idx) = 1;
    		token.start (token_idx) = char_idx;

		if (this_type = CHAR_WHITE) then
		     token.type (token_idx) = TOKEN_BLANK;
		else if (this_type = CHAR_DIGIT) then
		     token.type (token_idx) = TOKEN_NUMBER;
		else if (this_type) = CHAR_ALPHA then 
		     token.type (token_idx) = TOKEN_NAME;
		else if (this_char = ".") then
		     token.type (token_idx) = TOKEN_DOT;
		else if (this_char = ",") then
		     token.type (token_idx) = TOKEN_COMMA;
		else if (this_char = ":") then
		     token.type (token_idx) = TOKEN_COLON;
		else if (this_char = "(") | (this_char = "{") then
		     token.type (token_idx) = TOKEN_OPEN;
		else if (this_char = ")") | (this_char = "}") then
		     token.type (token_idx) = TOKEN_CLOSE;
		else if (this_char = "/") then
		     token.type (token_idx) = TOKEN_SLASH;
		else do;
		     code = char_idx;
		     goto SYNTAX_ERROR;
		     end;
		end;
	     end;

	if (token.type (token_idx) = TOKEN_BLANK)
	     then n_tokens = token_idx - 1;
	else n_tokens = token_idx;

	do token_idx = 1 to n_tokens while (token (token_idx).type ^= TOKEN_SLASH);
	     end;

	if (token_idx > n_tokens) then 
	     n_reference_tokens = n_tokens;
	else n_reference_tokens = token_idx - 1;

	return;

/*  */

char_type:
     procedure (one_char) returns (fixed bin);

declare   one_char char (1) unaligned parameter;


	if (one_char = " ") then return (CHAR_WHITE);
	if (index (".,:(){}/", one_char) ^= 0) then return (CHAR_SPECIAL);
	if (index ("0123456789", one_char) ^= 0) then return (CHAR_DIGIT);
	if (index ("_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ", one_char) ^= 0) then return (CHAR_ALPHA);

	code = char_idx;
	goto SYNTAX_ERROR;

	end char_type;

	end parse_reference;

/*  */

parse_reference_tokens:
     procedure ();

declare   token_idx fixed bin;
declare   this_type fixed bin;
declare   next_type fixed bin;
declare   this_token char (64) varying;


	if (token.type (1) ^= TOKEN_NAME) then do;
	     code = 1;
	     goto SYNTAX_ERROR;
	     end;

	full_name = "";
	token_idx = 0;
	n_subscripts = 0;

	do while (token_idx < n_reference_tokens);
	     call next_reference_token ();

	     if (this_type = TOKEN_NAME) then do;
		if (token_idx < n_reference_tokens) then
		     if (next_type ^= TOKEN_DOT) & (next_type ^= TOKEN_OPEN) then 
		          call reference_token_error ();

		if (length (full_name) ^= 0) then
		     full_name = full_name || ".";
		else top_name = this_token;	/* First time through, set the structure top level name */

(stringsize):
		full_name = full_name || this_token;
		end;

	     else if (this_type = TOKEN_OPEN) | (this_type = TOKEN_COMMA) then do;
		if (next_type ^= TOKEN_NUMBER) then call reference_token_error ();
		call next_reference_token ();

		if (next_type ^= TOKEN_CLOSE) & (next_type ^= TOKEN_COMMA) & (next_type ^= TOKEN_COLON) then 
		     call reference_token_error ();

		n_subscripts = n_subscripts + 1;
(conversion, subscriptrange):
		P_subscripts (LOWER, n_subscripts) = fixed (this_token);

		if (next_type ^= TOKEN_COLON) then 
		     P_subscripts (UPPER, n_subscripts) = P_subscripts (LOWER, n_subscripts);
		else do;
		     call next_reference_token ();		/* Skip the colon */
		     call next_reference_token ();		/* and get the second subscript */

		     if (this_type ^= TOKEN_NUMBER) then call reference_token_error ();
		     if (next_type ^= TOKEN_COMMA) & (next_type ^= TOKEN_CLOSE) then call reference_token_error ();

(conversion, subscriptrange):
		     P_subscripts (UPPER, n_subscripts) = fixed (this_token);
		     end;
		end;				/* Of subscript case */

	     else if (this_type = TOKEN_CLOSE) then;	/* run out of subscripts */

	     else if (this_type = TOKEN_DOT) then do;
		if (next_type ^= TOKEN_NAME) then
		     goto SYNTAX_ERROR;
		end;

	     else call reference_token_error ();
	     end;
		
	return;

/*  */

next_reference_token:
     procedure ();

	if (token_idx = n_reference_tokens) then call reference_token_error ();

	token_idx = token_idx + 1;

	this_type = token.type (token_idx);
	next_type = token.type (token_idx + 1);
	
	this_token = substr (reference,
	     token.start (token_idx), token.lth (token_idx));

	return;
	end next_reference_token;



reference_token_error:
     procedure ();

   	code = token.start (token_idx);
	goto SYNTAX_ERROR;

	end reference_token_error;

	end parse_reference_tokens;

/*  */

parse_substring_tokens:
     procedure ();

declare   token_idx fixed bin;
declare   first_token fixed bin;
declare   last_token fixed bin;


	n_substrings = 0;

	first_token = n_reference_tokens + 1;		/* First slash */
	if (first_token > n_tokens) then return;	/* no substrings */

	if (token.type (n_tokens) = TOKEN_SLASH) then	/* Allow a lone slash at the end of the reference */
	     last_token = n_tokens - 1;		/* but don't require it */
	else last_token = n_tokens;

	do token_idx = first_token to last_token;
	     if (token.type (token_idx) ^= TOKEN_SLASH) then 
		goto SUBSTRING_ERROR;
	     if (token_idx = last_token) then		/* Not enough */
		goto SUBSTRING_ERROR;
	     token_idx = token_idx + 1;		/* Move to the name */
	     if (token.type (token_idx) ^= TOKEN_NAME) then
		goto SUBSTRING_ERROR;

	     n_substrings = n_substrings + 1;
(subscriptrange):
	     P_substrings (n_substrings) = substr (reference, token.start (token_idx), token.lth (token_idx));
	     end;

	return;



SUBSTRING_ERROR:
	code = token_idx;
	goto SYNTAX_ERROR;

	end parse_substring_tokens;

	end structure_ref_;
