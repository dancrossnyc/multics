/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(87-01-06,Parisek), approve(87-07-09,MCR7746),
     audit(87-07-20,Fawcett), install(87-07-28,MR12.1-1049):
     Added check for the -match & -exclude control arguments.
                                                   END HISTORY COMMENTS */


azm_requests_3_: proc ();

	return;					/* not an entrypoint */

/* format: style4,delnl,insnl,ifthenstmt,indnoniterend,ifthendo,ifthen,^thendo */


/* Assorted requests for analyze_multics. */


	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* 0) Created: 06/25/83 by B. Braun from the division of the original			*/
	/* azm_misc_requests_. This guy contains azm requests events, sdw, syserr_log,		*/
	/* traffic_control_queue.							*/
	/*									*/
          /* Modified 19 Jan 84 by BLB changes to events request so -last and -time work correctly  */
	/* (phx16720), to fix ioa string for invalid arg to events.                               */
          /* Modified 08 Nov 84 by BLB to syserr_log request to change default actions from 3 to 9  */
          /* Modified 21 Jan 85 by BLB to syserr_log request to change -action to take a range due  */
	/* the print_sys_log changes.							*/
          /* Modified 23 Jan 85 by BLB to correct the default for events request to be "ev -tm 10"  */
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */


dcl  (
     P_sci_ptr pointer,
     P_azm_info_ptr pointer
     ) parameter;

/* Automatic */

dcl  af_sw bit (1) aligned;
dcl  all_sw bit (1);
dcl  axp ptr init (null);
dcl  argl fixed bin (21);
dcl  argno fixed bin;
dcl  argp pointer;
dcl  axstring char (7) init ("");
dcl  brief_sw bit (1) init ("0"b);
dcl  code fixed bin (35);
dcl  count fixed bin;
dcl  count_sw bit(1);
dcl  configp ptr init (null);
dcl  cur_erf bit (1) init ("0"b);
dcl  del_cur_erf bit (1) init ("0"b);
dcl  del_erf bit (1) init ("0"b);
dcl  dsegp ptr init (null);
dcl  erfs_found bit (1) init ("0"b);
dcl  expand_ptr_sw bit (1) init ("0"b);
dcl  expand_sw bit (1) init ("0"b);			/* "1"b = expand syserr binary data */
dcl  first_erf bit (1) init ("0"b);
dcl  first_value_set bit (1) init ("0"b);
dcl  forward_search bit (1) init ("0"b);
dcl  frame_entry bit (1) init ("0"b);
dcl  hdr_printed bit (1) init ("0"b);
dcl  hold_index fixed bin;
dcl  last fixed bin init (0);
dcl  last_erf bit (1) init ("0"b);
dcl  list_erfs bit (1) init ("0"b);
dcl  ll fixed bin init (0);
dcl  ln fixed bin init (0);
dcl  long_sw bit (1);
dcl  MATCH_STRING init (1) fixed bin int static options (constant);
dcl  EXCLUDE_STRING init (2) fixed bin int static options (constant);
dcl  looking_for fixed bin;
dcl  match_ptr ptr;
dcl  match_str char (256) var init ("");		/* the syserr string to match on */

dcl  nargs fixed bin;
dcl  next_erf bit (1) init ("0"b);
dcl  prev_erf bit (1) init ("0"b);
dcl  print_all_trans bit (1) init ("0"b);
dcl  range_value_set bit (1) init ("0"b);
dcl  raw_syserr_data bit (1) init ("0"b);		/* "1"b = print it in octal */
dcl  ret_str char (168) var init ("");
dcl  rv_lth fixed bin (21);
dcl  rv_ptr ptr;
dcl  sci_ptr pointer;				/* assorted info pointers */
dcl  segln fixed bin (35) init (0);
dcl  slog_code char(30) var;
dcl  start_configp ptr init (null);
dcl  struct_sw bit (1) init ("0"b);
dcl  temp_str char (24) var init ("");
dcl  time fixed bin (71);
dcl  time_sw bit(1);
dcl  why_erf bit (1) init ("0"b);


/* Based */

dcl  arg char (argl) based (argp);

/* Constants */

/* Builtins */

dcl  (abs, char, fixed, null, substr, index) builtin;

/* Conditions */

dcl  (conversion, quit) condition;

%page;

/* External Entries */

dcl  amu_$fdump_mpt_change_idx entry (ptr, fixed bin);
dcl  amu_$tc_data_tcq entry (ptr, bit(1), bit (1));
dcl  match_strings_$add entry (ptr, bit (1) aligned, char (*));
dcl  azm_syserr_$data entry (ptr, ptr, fixed bin(35), char(*) var, bit (1), bit (1), char(*) var, fixed bin (35));
dcl  azm_syserr_$log entry (ptr, ptr, fixed bin(35), char(*) var, bit (1), bit (1), char(*) var, fixed bin (35));
dcl  cv_dec_check_ entry (char (*), fixed bin (35)) returns (fixed bin (35));
dcl  continue_to_signal_		entry (fixed bin(35));
dcl  error_table_$noarg fixed bin (35) external static;
dcl  error_table_$bad_arg fixed bin (35) external static;
dcl  error_table_$inconsistent fixed bin (35) external static;
dcl  azm_display_fdump_events entry (ptr, ptr, fixed bin, fixed bin (71), bit (1), ptr, fixed bin (35));
dcl  ssu_$abort_line entry options (variable);
dcl  ssu_$arg_count entry (pointer, fixed bin, bit (1) aligned);
dcl  ssu_$arg_ptr entry (pointer, fixed bin, pointer, fixed bin (21));
dcl  ssu_$return_arg entry (ptr, fixed bin, bit (1) aligned, ptr, fixed bin (21));
%page;
azm_requests_3_$events:
     entry (P_sci_ptr, P_azm_info_ptr);

	call set_up;
	if ^trans_selected () then call ssu_$abort_line (sci_ptr, 0, "No dump selected.");

          /* first set all the defaults */
	time_sw, count_sw, long_sw = "0"b;
	match_ptr = null ();
	looking_for = -1;
	count = 10;            /* last ten events */
	time  = 10000000;      /* 10 seconds */

	do argno = 1 to nargs;
	     call ssu_$arg_ptr (sci_ptr, argno, argp, argl);
	     if arg = "-time" | arg = "-tm" then do;
	        time_sw = "1"b;
	        if argno + 1 <= nargs then do;
		 argno = argno + 1;
		 call ssu_$arg_ptr (sci_ptr, argno, argp, argl);
		 if char(arg, 1) = "-" then argno = argno -1; /* next control arg */
		 else do;
		    on conversion goto BAD_TIME;
		    time = fixed (arg) * 1000000;
		    revert conversion;
		    end;
		 end;
                  end;
	     else if arg = "-last" | arg = "-lt" then do;
	        count_sw = "1"b;
	        if argno + 1 <= nargs then do;
		 argno = argno + 1;
		 call ssu_$arg_ptr (sci_ptr, argno, argp, argl);
		 if char(arg, 1) = "-" then argno = argno -1; /* next control arg */
		 else do;
		    count = cv_dec_check_ (arg, code);
		    if code ^= 0 then call ssu_$abort_line (sci_ptr, error_table_$bad_arg,
		       "-number requires a decimal arg ""^a"".", arg);
		    end;
		 end;
                  end;
	     else if arg = "-long" | arg = "-lg" then long_sw = "1"b;
	     else if arg = "-match" | arg = "-mh" then looking_for = MATCH_STRING;
	     else if arg = "-exclude" | arg = "-ex" then looking_for = EXCLUDE_STRING;
	     else if (char (arg, 1) = "-") then
		call ssu_$abort_line (sci_ptr, error_table_$bad_arg, "^a.", arg);
	     else call process_looking_for ();
	end;

          if nargs = 0 then do;   /* set the default which is "ev -tm 10" */
             long_sw = "0"b;
	   time =  10000000;
	   count = -1;
	   end;
	else do;
             if (count_sw & time_sw) then call ssu_$abort_line (sci_ptr, error_table_$inconsistent, "-count and -time");

	   if count_sw then time = -1;
	   else if time_sw then count = -1;
	   else if (^count_sw & ^time_sw & ^long_sw) & match_ptr ^= null () then do;
	        time = 10000000;
	        count = -1;
	   end;
          end;

	hold_index = amu_info.process_idx;
	on quit begin;
	   call amu_$fdump_mpt_change_idx (amu_info_ptr, hold_index);
	   call continue_to_signal_(0);
	   end;

	call azm_display_fdump_events (sci_ptr, amu_info_ptr, count, time, long_sw, match_ptr, code);
	call amu_$fdump_mpt_change_idx (amu_info_ptr, hold_index);
						/* ensure we are in same proc_idx that we started in */
	if code ^= 0 then call ssu_$abort_line (sci_ptr, code, "");

	return;

BAD_TIME:
	call ssu_$abort_line (sci_ptr, error_table_$bad_arg, "time.");
%page;
azm_requests_3_$syserr_log:
     entry (P_sci_ptr, P_azm_info_ptr);

dcl num_msgs fixed bin(35);
dcl (match_sw, exclude_sw) bit(1);

          call set_up;
	if ^trans_selected () then do;
	     call ssu_$abort_line (sci_ptr, 0, "No dump selected.");
               return;
	     end;

	slog_code = "-100:100";     /* set the default */
	num_msgs = -1;		
	exclude_sw, match_sw = "0"b;
	expand_sw = "0"b;
          match_str = "";

	if nargs = 0 then go to no_wlog_args;

	do argno = 1 to nargs;
	   call ssu_$arg_ptr (sci_ptr, argno, argp, argl);

	   if arg = "-expand" | arg = "-exp" then expand_sw = "1"b;
	   else if arg = "-action" then do;
	      call get_next_arg("Action code", argp, argl);
	      if index(arg, ":") = 0 then     /* must construct the range */
	         slog_code = "-100:" || arg;
	      else slog_code = arg;
	      end;

	   else if arg = "-match" | arg = "-exclude" | arg = "-ex" then do;
	      match_str = "";
	      if arg = "-match" then do;
	         match_sw = "1"b;
	         exclude_sw = "0"b;
	         end;
	      else do;
	         exclude_sw = "1"b;
	         match_sw = "0"b;
	         end;
                call get_next_arg("String", argp, argl);
 	      if substr(arg, 1, 1) = "-" then call ssu_$abort_line(sci_ptr, error_table_$noarg, " Missing match strings.");
	      match_str = arg;
	      end;

	   else if arg = "-last" | arg = "-lt" then do;
	      call get_next_arg("Decimal Number", argp, argl);
	      num_msgs = cv_dec_check_ (arg, code);
	      if code ^= 0 then call ssu_$abort_line (sci_ptr, error_table_$bad_arg,
	                        "-last requires a decimal arg ""^a"".", arg);
	      end;

	   else call ssu_$abort_line (sci_ptr, error_table_$bad_arg, """^a"".", arg);
	end;

no_wlog_args:

	call azm_syserr_$data (sci_ptr, amu_info_ptr, num_msgs, match_str, match_sw, expand_sw, slog_code, code);
	if code ^= 0 then call ssu_$abort_line (sci_ptr, code, "");
	call azm_syserr_$log (sci_ptr, amu_info_ptr, num_msgs, match_str, match_sw, expand_sw, slog_code, code);
	if code ^= 0 then call ssu_$abort_line (sci_ptr, code, "");

	return;   /* end azm_requests_3_$syserr_log */
%page;
azm_requests_3_$tcq:
     entry (P_sci_ptr, P_azm_info_ptr);

dcl rdy_sw bit(1);

	call set_up;
	if ^trans_selected () then call ssu_$abort_line (sci_ptr, 0, "No dump selected.");

	all_sw, rdy_sw = "0"b;
	do argno = 1 to nargs;
	     call ssu_$arg_ptr (sci_ptr, argno, argp, argl);
	     if arg = "-all" | arg = "-a" then all_sw = "1"b;
	     else if arg = "-rdy" | arg = "-ready" then rdy_sw = "1"b;
	     else call ssu_$abort_line (sci_ptr, error_table_$bad_arg, """^a"".", arg);
	     end;

          if all_sw & rdy_sw then call ssu_$abort_line (sci_ptr, error_table_$inconsistent, "-all -ready");
	call amu_$tc_data_tcq (amu_info_ptr, all_sw, rdy_sw);
	return;
%page;
get_next_arg: proc(Arg_expected, ap1, al1);

/*  This guy gets the next argument from the argument string, complaining if it's not there  */

dcl Arg_expected			char(*);
dcl (ap1				ptr,
     al1				fixed bin(21));
	    
	if (argno + 1) > nargs then do;
	     call ssu_$abort_line(sci_ptr, error_table_$noarg, "A ^a expected after ^a.", Arg_expected, arg);
	     return;
	     end;

	argno = argno + 1;
	call ssu_$arg_ptr (sci_ptr, argno, ap1, al1);
     
end get_next_arg;
%page;
set_up:
     proc;

	sci_ptr = P_sci_ptr;
	azm_info_ptr = P_azm_info_ptr;
	amu_info_ptr = azm_info.aip;
	call ssu_$return_arg (sci_ptr, nargs, af_sw, rv_ptr, rv_lth);
	if ^af_sw then call ssu_$arg_count (sci_ptr, nargs, af_sw);

     end set_up;
%page;
trans_selected:
     proc () returns (bit (1));

	if amu_info_ptr = null () then return ("0"b);
	return ("1"b);
     end trans_selected;
%page;
process_looking_for:
     proc ();
     
dcl  really_looking_for fixed bin;
     
     really_looking_for = abs (looking_for);
     
     if really_looking_for = MATCH_STRING | really_looking_for = EXCLUDE_STRING then
	if substr (arg, 1, 1) = "/" & substr (arg, argl, 1) ^= "/" then
INVALID_REGULAR_EXPRESSION:
               call ssu_$abort_line (sci_ptr, error_table_$bad_arg, "Invalid regular expression ""^a""", arg);
          else if substr (arg, argl, 1) = "/" & substr (arg, 1, 1) ^= "/" then
	     goto INVALID_REGULAR_EXPRESSION;
	else if arg = "/" then goto INVALID_REGULAR_EXPRESSION;
	
     if (really_looking_for = MATCH_STRING) then
	call match_strings_$add (match_ptr, "1"b, arg);
     else if (really_looking_for = EXCLUDE_STRING) then
	call match_strings_$add (match_ptr, "0"b, arg);
     return;
end process_looking_for;
%page;
%include amu_info;
%page;
%include azm_info;

     end azm_requests_3_;
