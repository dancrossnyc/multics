/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

azm_str_util_:
     proc (P_amu_info_ptr, P_strp, P_code);
						/* format: style4,delnl,insnl,ifthenstmt,indnoniterend,ifthendo,ifthen,^thendo */


dcl  P_amu_info_ptr ptr;
dcl  P_strp bit (18);
dcl  P_code fixed bin (35);

dcl  code fixed bin (35);
dcl  save_process_index fixed bin;
dcl  loop_exit bit (1);
dcl  exit_sw bit (1);
dcl  1 seg_trailer like str;
dcl  str_size fixed bin (18);
dcl  seg_name char (32);
dcl  str_segno fixed bin;
dcl  offset fixed bin (18);
dcl  pds_dstep ptr;
dcl  1 hard_cur like hardcore_cur;
dcl temp_dstep bit (18);
dcl temp_indx fixed bin;
dcl  amu_$definition_ptr entry (ptr, char (*), char (*), fixed bin (35)) returns (ptr);
dcl  amu_$do_translation entry (ptr, fixed bin, ptr, fixed bin (18), fixed bin (18), fixed bin (35));
dcl  amu_$do_translation_by_ptr entry (ptr, ptr, fixed bin (18), ptr, fixed bin (35));
dcl  amu_$fdump_mpt_change_idx entry (ptr, fixed bin);
dcl  amu_$hardcore_info_set_cur_ptrs entry (ptr, ptr);
dcl  amu_$slt_search_seg_num entry (ptr, ptr, char (32), fixed bin, fixed bin (35));
dcl  amu_$fdump_mpt_current_process entry (ptr);
dcl  ioa_$nnl entry () options (variable);

dcl (addr, fixed, hbound, size)	builtin;

	amu_info_ptr = P_amu_info_ptr;
	offset = fixed (P_strp, 18);
	if offset = 0 then return;
	save_process_index = amu_info.process_idx;

/* change to first process in fdump */

	call amu_$fdump_mpt_change_idx (amu_info_ptr, 0);

	hardcore_cur_ptr = addr (hard_cur);
	call amu_$hardcore_info_set_cur_ptrs (amu_info_ptr, hardcore_cur_ptr);

/* now get the str_seg data */

	seg_name = "str_seg";
	call amu_$slt_search_seg_num (hard_cur.sltp, hard_cur.sltntp, seg_name, str_segno, code);
	if code ^= 0 then goto str_exit;


	str_size = size (str);
	strp = addr (seg_trailer);
	call amu_$do_translation (amu_info_ptr, str_segno, strp, offset, str_size, code);
	if code ^= 0 then goto str_exit;

/* now find the first process that this seg known to  */

	do while (str.bp ^= "0"b);
	     offset = fixed (str.bp, 18);
	     call amu_$do_translation (amu_info_ptr, str_segno, strp, offset, str_size, code);
	     if code ^= 0 then do;
		P_code = code;
		return;
		end;
	end;

/* get pointer of prds$dstep */

	pds_dstep = amu_$definition_ptr (amu_info_ptr, "pds", "dstep", code);
	if code ^= 0 then do;
	     P_code = code;
	     return;
	     end;

/*  now start walking the str thread matching up str.dstep with pds$dstep */

	exit_sw = "0"b;
	do while (exit_sw = "0"b);
	     loop_exit = "0"b;
	     do temp_indx = 0 to hbound (fdump_process_table.array, 1) while (^loop_exit);
		call amu_$fdump_mpt_change_idx (amu_info_ptr, temp_indx);
		call amu_$do_translation_by_ptr (amu_info_ptr, pds_dstep, 1, addr (temp_dstep), code);
		if code ^= 0 then goto str_exit;
		if temp_dstep = str.dstep /* found a process */ then do;
		     loop_exit = "1"b;
		     call ioa_$nnl ("^o in ", str.segno);
		     call amu_$fdump_mpt_current_process (amu_info_ptr);
		     end;
	     end;
	     call amu_$fdump_mpt_change_idx (amu_info_ptr, save_process_index);

	     if str.fp = "0"b then
		exit_sw = "1"b;
	     else do;
		offset = fixed (str.fp, 18);
		call amu_$do_translation (amu_info_ptr, str_segno, strp, offset, str_size, code);
		if code ^= 0 then goto str_exit;
		end;
	end;
str_exit:
	call amu_$fdump_mpt_change_idx (amu_info_ptr, save_process_index);
	P_code = code;
	return;
%page;
%include amu_fdump_info;
%page;
%include amu_hardcore_info;
%page;
%include amu_info;
%page;
%include str;

     end azm_str_util_;

