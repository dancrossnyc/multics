/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


mc_trace: mct: proc;

/* mc_trace - machine condition trace, initially coded March 1977 by James A. Bush
   taken from original idea by Bernie Greenberg and Steve Webber
   Modified 780327 by J. A. Bush to add -all and -hc control args
   Modified Oct 1982 by Rich Coppola to disable tracing when displaying
   MCs or hregs. Also corrected hreg headers when hregs are from a DPS8 CPU.
*/


dcl  cu_$cp entry (ptr, fixed bin, fixed bin (35));
dcl  cu_$arg_count entry (fixed bin);
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  hcs_$initiate entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr, fixed bin (35));
dcl  phcs_$trace_buffer_init entry (ptr, bit (1) aligned, fixed bin, ptr, fixed bin (35));
dcl  phcs_$hc_trace_on_off entry (bit (1) aligned, fixed bin (35));
dcl  expand_pathname_ entry (char (*), char (*), char (*), fixed bin (35));
dcl  cv_dec_check_ entry (char (*), fixed bin (35)) returns (fixed bin (35));
dcl  cv_oct_check_ entry (char (*), fixed bin (35)) returns (fixed bin (35));
dcl (ioa_, com_err_, ioa_$ioa_switch, ioa_$ioa_switch_nnl) entry options (variable);
dcl  iox_$get_line entry (ptr, ptr, fixed bin (21), fixed bin (21), fixed bin (35));
dcl  prtscu_$on_line entry (ptr, ptr, bit (1));
dcl  dump_machine_cond_$mc_only entry (ptr, char (32));
dcl  get_line_length_$switch entry (ptr, fixed bin (35)) returns (fixed bin);
dcl  find_condition_info_ entry (ptr, ptr, fixed bin (35));
dcl  ring0_get_$segptr entry (char (*), char (*), ptr, fixed bin (35));
dcl  ring0_get_$name entry (char (*), char (*), ptr, fixed bin (35));
dcl  continue_to_signal_ entry (fixed bin (35));
dcl  hran_$hrlgnd entry (ptr);
dcl  hran_$hranl entry (ptr, ptr, bit (1));

dcl (null, fixed, addr, addrel, divide, baseno, baseptr, length, substr, rel, ltrim, search) builtin;

dcl (iox_$user_input, iox_$error_output) ptr ext;
dcl (any_other, cleanup) condition;
dcl  dir_name char (168);
dcl  ename char (32);
dcl  com_string char (132) aligned;
dcl  arg char (al) based (ap);
dcl (code, lp_cnt) fixed bin (35);
dcl (i, j, k, acnt, al, lp) fixed bin;
dcl (ap, sp, mcp, scup) ptr;
dcl  mc_pos (260) fixed bin unaligned;
dcl  p_name char (8) init ("mc_trace");
dcl  ll fixed bin (21);
dcl  buf_size fixed bin init (5);			/* default buffer size */
dcl (trace_on, brief, lo, path_sw, buf_sw, hc_all, hc_sw) bit (1) unaligned init ("0"b);
dcl  WS char (2) int static options (constant) init (" 	");


% include mc_trace_buf;

/*  */

/* process arguments */

	call cu_$arg_count (acnt);			/* get no of args */
	if acnt = 0 then do;			/* tell user what to do */
arger:
	     call com_err_ (0, p_name, "Usage: ^a path {-brief | -bf} {-buffer <size> | -buf <size>}", p_name);
	     return;
	end;
	do i = 1 to acnt;				/* process arguments */
	     call cu_$arg_ptr (i, ap, al, code);	/* get arg */
	     if code ^= 0 then do;			/* some days you can't win */
		call com_err_ (code, p_name, "getting arg");
		return;
	     end;
	     if arg = "-all" | arg = "-hc" then do;	/* if special trace */
		hc_all, path_sw = "1"b;
		if arg = "-all" then		/* if tracing all faults and interrupts */
		     sp = baseptr (0);		/* set indicator for hardcore */
		else hc_sw = "1"b;			/* tracing hardcore seg */
	     end;
	     else if ^path_sw then do;		/* if not special trace, pathname arg must be first */
		path_sw = "1"b;
		call expand_pathname_ (arg, dir_name, ename, code);
		if code ^= 0 then do;		/* some problem with pathname */
		     call com_err_ (code, p_name, "expanding pathname ^a", arg);
		     return;
		end;
	     end;
	     else if hc_sw then do;			/* user wants to trace hard core seg */
		hc_sw = "0"b;
		lp_cnt = cv_oct_check_ (arg, code);	/* convert to seg number */
		if code ^= 0 then do;		/* might be name */
		     call ring0_get_$segptr ("", arg, sp, code);
		     if code ^= 0 then do;		/* user got something wrong */
			call com_err_ (code, p_name, "getting hardcore segment ^a", arg);
			return;			/* let him re-enter */
		     end;
		end;
		else do;				/* user entered number, verify */
		     sp = baseptr (lp_cnt);		/* that it is a valid hc seg */
		     call ring0_get_$name ("", ename, sp, code);
		     if code ^= 0 then do;		/* not a valid hc seg */
			call com_err_ (code, p_name, "getting hardcore segment ^o", lp_cnt);
			return;			/* return and make him get it right */
		     end;
		end;
		if fixed (baseno (sp)) = 0 then	/* tracing dseg will get all faults and ints. */
		     call com_err_ (0, p_name, "Warning tracing segment # 0 will result in tracing all faults and interrupts");
	     end;
	     else if buf_sw then do;			/* got buffer size arg */
		buf_sw = "0"b;			/* don't want to come here again */
		lp_cnt = cv_dec_check_ (arg, code);
		buf_size = lp_cnt;
		if code ^= 0 | buf_size > max_buf_size | buf_size <= 0 then do; /* user goofed */
		     call com_err_ (0, p_name, "buffer size arg ^a invalid or too big", arg);
		     return;
		end;
	     end;
	     else if arg = "-buffer" | arg = "-buf" then	/* user wants a bigger buffer */
		buf_sw = "1"b;
	     else if arg = "-brief" | arg = "-bf" then	/* user does not want prompt */
		brief = "1"b;			/* set brief switch */
	     else do;
		call com_err_ (0, p_name, "Invalid argument ^a", arg);
		go to arger;
	     end;
	end;


/* initiate object segment to trace */

	if ^hc_all then do;				/*  if ring 4 segment to be traced */
	     call hcs_$initiate (dir_name, ename, "", 0, 0, sp, code);
	     if sp = null then do;			/* can't find it */
		call com_err_ (code, p_name, "initiating object segment ^a>^a", dir_name, ename);
		return;
	     end;
	end;

/* Now we are ready to start the hardcore trace */

	call phcs_$trace_buffer_init (sp, "1"b, buf_size, bp, code);
	if code ^= 0 then do;			/* must have had problem starting trace */
	     call com_err_ (code, p_name, "attempting to initialize hardcore tracing");
	     return;
	end;
	trace_on = "1"b;				/* set switch to indicate we are traceing */

	on any_other begin;
	     call cond_hand;			/* set up condition handler */
	     call phcs_$hc_trace_on_off ("0"b, code);	/* turn off hardcore tracing mechanism */
	end;

	on cleanup call clean;			/* set up condition handler for cleanup condition */

/* Now we are ready to ask user for input to trace something */

request:
	com_string = "";				/* clear out last command */
	if ^brief then				/*  if not in brief mode */
	     call ioa_$ioa_switch_nnl (iox_$error_output, "--> "); /* print out prompt for user */
	call iox_$get_line (iox_$user_input, addr (com_string), length (com_string), ll, code);
	if code ^= 0 then do;			/* error reading from  terminal */
	     call com_err_ (code, p_name, "reading input from user_input");
	     go to request;
	end;
	ll = ll - 1;				/* adjust line length to ignor the N. L. char */
	if ll = 0 then go to request;			/* ignor white space */

/* strip off leading white space */

	i = length (ltrim (substr (com_string, 1, ll), WS));
	j = (ll - i) + 1;				/* get start of good data */
	substr (com_string, 1, i) = substr (com_string, j, ll);
	substr (com_string, i + 1) = "";		/* pad rest of line with blanks */

/* Process requests */

	if substr (com_string, 1, 1) ^= "." then do;	/* user made syntax error */
errsp:
	     call com_err_ (0, p_name, "Invalid response ^a, reenter", com_string);
	     go to request;
	end;
	ll = i;					/* copy new line length */
	if ll = 1 then				/* user wants to know where he is at */
	     call ioa_ ("^a", p_name);		/* so tell him */
	else if substr (com_string, 1, ll) = ".q" then do; /* user wants to quit */
	     call clean;				/* clean up */
	     return;
	end;					/* and exit */
	else if substr (com_string, 1, 2) = ".." then do; /* user wants to execute Multics cmd */
	     substr (com_string, 1, ll - 2) = substr (com_string, 3, ll - 2); /* adjust cmd in buffer */
	     call phcs_$hc_trace_on_off ("1"b, code);	/* turn on hardcore tracing mechanism */
	     if code ^= 0 then do;			/* can't turn trace on */
		call com_err_ (code, p_name, "attempting to turn trace on");
		go to request;
	     end;
	     call cu_$cp (addr (com_string), ll - 2, code); /* and execute cmd */
	     call phcs_$hc_trace_on_off ("0"b, code);	/* turn off hardcore tracing mechanism */
	end;
	else if substr (com_string, 1, 4) = ".rpt" then do; /* user wants to repeat cmd */
	     lp = 5;				/* set line position */
	     lp_cnt = parse ();			/* get the loop count arg */
	     if lp_cnt = -1 then			/* user goofed typing in */
		go to errsp;
	     j = ll - lp + 1;
	     substr (com_string, 1, j) = substr (com_string, lp, j); /* adjust cmd */
	     call phcs_$hc_trace_on_off ("1"b, code);	/* turn on hardcore tracing mechanism */
	     if code ^= 0 then do;			/* can't turn trace on */
		call com_err_ (code, p_name, "attempting to turn trace on");
		go to request;
	     end;
	     do i = 1 to lp_cnt;			/* execute cmd requested number of times */
		call cu_$cp (addr (com_string), j, code);
	     end;
	     call phcs_$hc_trace_on_off ("0"b, code);	/* turn off hardcore tracing mechanism */
	end;
	else if substr (com_string, 1, 5) = ".pmc " then	/* user wants to print M. C. */
	     call display_mc (5, 1);			/* display M. C. in octal */
	else if substr (com_string, 1, 5) = ".pmci" then	/* user wants interpreted M. C. */
	     call display_mc (6, 2);			/* display M. C. interpreted */
	else if substr (com_string, 1, 5) = ".pscu" then	/* user wants only scu data */
	     call display_mc (6, 3);			/* Display M. C. scu data only */
	else if substr (com_string, 1, 4) = ".hr " then	/* User wants to see history regs in octal */
	     call display_hregs (4, 1, "1"b);		/* display all history regs */
	else if substr (com_string, 1, 5) = ".hrou" then	/* user wants only OU history regs */
	     call display_hregs (6, 1, "0"b);
	else if substr (com_string, 1, 5) = ".hrcu" then	/* user only wants to see CU histroy regs */
	     call display_hregs (6, 2, "0"b);
	else if substr (com_string, 1, 5) = ".hrdu" then	/* user wants to see DU history regs */
	     call display_hregs (6, 3, "0"b);
	else if substr (com_string, 1, 5) = ".hrau" then	/* user wants to see APU History regs */
	     call display_hregs (6, 4, "0"b);
	else if substr (com_string, 1, 6) = ".hranl" then /* user wants analisis of history regs */
	     call display_hregs (7, 5, "0"b);
	else if substr (com_string, 1, 6) = ".hrlgd" then do; /* user wants to know what abrevs mean */
	     call ioa_ ("^/Abbreviations used in History Register Analysis^/");
	     call hran_$hrlgnd (null);
	end;
	else go to errsp;				/* invalid request */
	go to request;				/* get nxt request */


/* display_mc - internal procedure to display requested number of Machine Conditions from the M. C. buffer */

display_mc: proc (line_pos, type);
dcl (line_pos, type, count, limit) fixed bin;

	     call phcs_$hc_trace_on_off ("0"b, code);	/* turn off hardcore tracing mechanism */

	     j = mc_trace_buf.mc_nxtad;		/* start with next avail location */
	     if j = mc_trace_buf.mc_strt then		/* if at beginning of buffer */
		if mach_cond (1).scu_dta (1) = buf_init then do; /* no M. C. stored */
		     call ioa_ ("Machine Condition buffer empty");
		     return;
		end;
	     call get_args (line_pos, count, limit);	/* get further args */
	     if count = 0 then			/* No args set count to display entire buffer */
		count = mc_trace_buf.mc_cnt;

/* first get cronilogical order of M. C.'s, last to first */
	     do i = 1 to count;			/* get each requested M. C. */
		if j = mc_trace_buf.mc_strt then	/* if at beginning of buffer */
		     j = (mc_cnt - 1) * mc_size + mc_trace_buf.mc_strt; /* set to last M. C. */
		else j = j - mc_size;		/* just decrement to nxt M. C. */
		k = divide ((j + mc_size) - mc_trace_buf.mc_strt, mc_size, 17, 0); /* get array index */
		if mach_cond (k).scu_dta (1) ^= buf_init then mc_pos (i) = k; /* if M. C. valid */
		else go to too_many;		/* if not valid, exit */
	     end;
too_many:
	     if i - 1 ^= count then do;		/* if not all requested M. C.'s valid */
		call ioa_ ("Only ^d sets of Machine Conditions are valid", i - 1);
		count = i - 1;			/* adjust count */
	     end;
	     call set_line_length;			/* set up output length parameters */
	     if limit = 0 | limit > count then		/* set up defaults */
		limit = 1;
	     else limit = count - (limit - 1);
	     do i = count to limit by -1;		/* this  is really forward */
		j = mc_pos (i);
		mcp = addr (mc_trace_buf.mach_cond (j)); /* form ptr to machine condition */
		call ioa_ ("^/^/*****Machine Conditions at mc_trace_buffer|^o*****",
		     fixed (rel (mcp)));
		go to mc_prt (type);		/* print  M. C.'s in requested form */
mc_prt (1):					/* display M. C.'s in octal format */
		call ioa_ ("^/Pointer Registers");
		call display_oct (addr (mach_cond (j).spri_dta (1)), 2); /* print in octal format */
		call ioa_ ("^/Processor Registers");
		call display_oct (addr (mach_cond (j).sreg_dta (1)), 1); /* print in octal format */
		call ioa_ ("^/SCU Data");
		call display_oct (addr (mach_cond (j).scu_dta (1)), 1); /* print in octal format */
		call ioa_ ("^/Software Data");
		call display_oct (addr (mach_cond (j).sw_dta (1)), 1); /* print in octal format */
		call ioa_ ("^/EIS Pointers and Lengths");
		call display_oct (addr (mach_cond (j).spl_dta (1)), 1); /* print in octal format */
		go to p_nxt;			/* go print next M. C. */
mc_prt (2):					/* display M. C.'s in interpreted form */
		call ioa_ (" ");
		call dump_machine_cond_$mc_only (mcp, "user_output"); /* that was simple */
		go to p_nxt;			/* go print next M.C. */
mc_prt (3):					/* display SCU data only */
		scup = addr (mc_trace_buf.mach_cond (j).scu_dta (1)); /* set up ptr first */
		call ioa_ ("^/SCU data at mc_trace_buffer|^o^/", fixed (rel (scup)));
		call prtscu_$on_line (null, scup, "1"b); /* interpret scu data */
p_nxt:
	     end;
	end display_mc;

/* parse - internal procedure to parse cmd line for numerical string and return as decimal constant */

parse:	proc returns (fixed bin (35));
dcl  count fixed bin (35);

	     if lp > ll then			/* if at end of line */
		return (-1);
	     i = length (ltrim (substr (com_string, lp, ll - lp), WS)); /* strip off leading white space */
	     lp = lp + ((ll - lp) - i);		/* update line position */
	     i = search (substr (com_string, lp), WS);	/* find end of string */
	     count = cv_dec_check_ (substr (com_string, lp, i - 1), code); /* convert to decimal */
	     if code ^= 0 then			/* not decimal number return w/error */
		return (-1);
	     lp = lp + i;				/* update line position */
	     return (count);
	end parse;

/* clean - internal procedure to turn off trace and unwire trace buffer */

clean:	proc;

	     if trace_on then do;			/* turn trace off if on */
		call phcs_$trace_buffer_init (sp, "0"b, buf_size, bp, code);
		if code ^= 0 then
		     call com_err_ (code, p_name, "attempting to turn trace off");
		trace_on = "0"b;
	     end;
	end clean;

/* set_line_length - internal procedure to set output length parameters based on the terminal line length */

set_line_length: proc;
	     i = get_line_length_$switch (null, code);	/* get terminal line length */
	     if i < 104 & code = 0 then
		lo = "0"b;
	     else lo = "1"b;
	end set_line_length;

/*  */

/* display_hregs - internal procedure to display requested number of history registers */

display_hregs: proc (line_pos, type, cont);
dcl  cont bit (1);
dcl (line_pos, type, count, limit, cpu_type) fixed bin;

	     call phcs_$hc_trace_on_off ("0"b, code);	/* turn off hardcore tracing mechanism */

	     j = mc_trace_buf.hr_nxtad;		/* start with next avail location */
	     if j = mc_trace_buf.hr_strt then		/* if at beginning of buffer */
		if substr (h_regs (1).ou_hr (1), 1, 36) = buf_init then do; /* no H. R. stored */
		     call ioa_ ("History Register buffer empty");
		     return;
		end;
	     call get_args (line_pos, count, limit);	/* get further args */
	     if count = 0 then			/* No args set count to display entire buffer */
		count = mc_trace_buf.hr_cnt;

/* first get cronilogical order of H. R.'s, last to first */
	     do i = 1 to count;			/* get each requested H. R. */
		if j = mc_trace_buf.hr_strt then	/* if at beginning of buffer */
		     j = (hr_cnt - 1) * hr_size + mc_trace_buf.hr_strt; /* set to last H. R. */
		else j = j - hr_size;		/* just decrement to nxt H. R. */
		k = divide ((j + hr_size) - mc_trace_buf.hr_strt, hr_size, 17, 0); /* get array index */
		if substr (h_regs (k).ou_hr (1), 1, 36) ^= buf_init then mc_pos (i) = k; /* if H. R. valid */
		else go to too_many2;		/* if not valid, exit */
	     end;
too_many2:
	     if i - 1 ^= count then do;		/* if not all requested H. R.'s valid */
		call ioa_ ("Only ^d sets of History Registers are valid", i - 1);
		count = i - 1;			/* adjust count */
	     end;
	     call set_line_length;			/* set up output length parameters */
	     if limit = 0 | limit > count then		/* set up defaults */
		limit = 1;
	     else limit = count - (limit - 1);
	     do i = count to limit by -1;		/* this  is really forward */
		j = mc_pos (i);
		call ioa_ ("^2/*****History Registers at mc_trace_buffer|^o*****",
		     fixed (rel (addr (mc_trace_buf.h_regs (j)))));
		if substr (h_regs (j).du_hr (1), 72, 1) = "1"b then
		     cpu_type = 0;			/* its a l68 */
		go to dhr (type);			/* display requested history reg */

dhr (1):						/* label for OU history register display */
		if cpu_type = 0 then
		     call ioa_ ("^/Operations Unit (OU) History Registers");
		else call ioa_ ("^/Decimal Unit/Operations Unit (DU/OU) History Registers");
		call display_oct (addr (h_regs (j).ou_hr (1)), 4); /* print out octal history regs */
		if ^cont then go to p_nxt1;		/* user wants OU history regs only */
dhr (2):						/* label for CU History Registers */
		call ioa_ ("^/Control Unit (CU) History Registers");
		call display_oct (addr (h_regs (j).cu_hr (1)), 4); /* print out octal history regs */
		if ^cont then go to p_nxt1;		/* user wants CU history regs only */
dhr (3):						/* label for DU history reg display */
		if cpu_type = 0 then
		     call ioa_ ("^/Decimal Unit (DU) History Registers");
		else call ioa_ ("^/Appending Unit #2 (AU2) History Registers");
		call display_oct (addr (h_regs (j).du_hr (1)), 4); /* print out octal history regs */
		if ^cont then go to p_nxt1;		/* user wants du history regs only */
dhr (4):						/* label for APU history reg display */
		if cpu_type = 0 then
		     call ioa_ ("^/Appending Unit (AU) History Registers");
		else call ioa_ ("^/Appending Unit #1 (AU1) History Registers");
		call display_oct (addr (h_regs (j).au_hr (1)), 4); /* print out octal history regs */
		go to p_nxt1;
dhr (5):
		call ioa_ ("^/Composite Analysis of History Registers^/");
		call hran_$hranl (addr (h_regs (j).ou_hr (1)), null, lo);
p_nxt1:
	     end;
	end display_hregs;


/* display_oct - internal procedure for displaying a requested number of 8 word blocks in octal to stream user_output */

display_oct: proc (iwp, sets);

dcl (iwp, wp) ptr;
dcl (sets, i) fixed bin;

dcl  w (8) fixed bin based (wp);

	     wp = iwp;				/* copy pointer */
	     do i = 1 to sets;			/* iterate requested number of times */
		call ioa_ ("^4(^w ^)^[^;^/^]^4(^w ^)",
		     w (1), w (2), w (3), w (4), lo, w (5), w (6), w (7), w (8));
		wp = addrel (wp, 8);		/* increment pointer */
	     end;
	end display_oct;

/* get_args - internal procedure to get numerical args from cmd line and return count and limit values */

get_args:	proc (init_lp, cnt, lmt);
dcl (init_lp, cnt, lmt) fixed bin;

	     cnt, lmt = 0;				/* initially set returns to 0 */
	     if init_lp >= ll then			/* no further args */
		return;
	     lp = init_lp;				/* set up line position */
	     lp_cnt = parse ();			/* get count arg */
	     if lp_cnt = -1 then			/* conversion error */
		go to errsp;			/* no local goto */
	     cnt = lp_cnt;				/* conversion ok set return count parameter */
	     lp_cnt = parse ();
	     if lp_cnt ^= -1 then			/* set limit only if valid */
		lmt = lp_cnt;
	end get_args;

/*  */

/* cond_hand - internal procedure to implement the "any_other" condition handler */

cond_hand: proc;
dcl  ec fixed bin (35);
dcl 1 condinfo aligned,
% include cond_info;

     call find_condition_info_ (null, addr (condinfo), ec); /* get  some info about condition */

/* pass on any condition we can not handle */

	     if condition_name = "alrm" then go to cts;
	     if condition_name = "cput" then go to cts;
	     if condition_name = "program_interrupt" then go to cts;
	     if condition_name = "mme2" then go to cts;
	     if condition_name = "stack" then go to cts;
	     if condition_name = "command_error" then go to cts;
	     if condition_name = "finish" | condition_name = "cleanup" then do;
		call clean;
cts:
		call continue_to_signal_ (ec);
		return;
	     end;
	     call phcs_$hc_trace_on_off ("0"b, ec);	/* turn off hardcore tracing mechanism */
	     call ioa_$ioa_switch (iox_$error_output, "^a condition raised, enter command",
		condition_name);
	     go to request;
	end cond_hand;

     end mc_trace;
