/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   *********************************************************** */
read_early_dump_tape: redt: proc () options (variable);

/* Command level utility to read in the tape produced by the early dump 
feature of Multics initialization.  The output of this program is a dump 
compatible with the standard analysis tools.
Keith Loepere, November 1983. */

/* Modified November of 1984 by Allen Ball to fix bad reference to error_table_. */

/* format: style4,indattr,ifthenstmt,ifthen,idind33,^indcomtxt */

dcl  Magic_number		        bit (36) aligned init ("654365234214"b3) options (constant) static; /* present in dump records to identify them */
dcl  addr			        builtin;
dcl  addrel		        builtin;
dcl  arg			        char (arg_len) based (arg_ptr);
dcl  arg_len		        fixed bin (21);
dcl  arg_num		        fixed bin;
dcl  arg_ptr		        ptr;
dcl  attach_descr		        char (256);		/* attach description for tape */
dcl  bin			        builtin;
dcl  bit			        builtin;
dcl  character		        builtin;
dcl  cleanup		        condition;
dcl  clock		        builtin;
dcl  code			        fixed bin (35);
dcl  codeptr		        builtin;
dcl  com_err_		        entry () options (variable);
dcl  current_dump_record	        fixed bin;		/* record in dump (0 is first in 1st seg, 255 is 1st in 2nd...) */
dcl  crash_dbr		        bit (72) aligned;	/* from dump record */
dcl  crash_system_type	        fixed bin;		/* from dump record */
dcl  cu_$arg_count		        entry (fixed bin, fixed bin (35));
dcl  cu_$arg_ptr		        entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl  cv_dec_check_		        entry (char (*), fixed bin (35)) returns (fixed bin (35));
dcl  date			        builtin;
dcl  date_str		        char (6);		/* for building dump seg names */
dcl  density		        char (4);		/* current density we're trying */
dcl  dimension		        builtin;
dcl  divide		        builtin;
dcl  dummy_ptr		        ptr;
dcl  dump_dir		        char (168);		/* directory in which to place dump segs */
dcl  dump_name		        char (12);		/* base name of dump segs */
dcl  dump_number		        fixed bin;		/* used when naming dump */
dcl  dump_seg_ptrs		        (0:63) ptr init ((64) null); /* ptrs to successive segs of dump */
dcl  dump_segment		        fixed bin;		/* current number (0 orig) of current seg we're writing */
dcl  dump_segment_name	        char (32);		/* name of current dump seg */
dcl  1 dump_record		        aligned,		/* record read from tape */
       2 magic_number	        bit (36) aligned,	/* as in Magic_number above */
       2 address		        fixed bin (26),	/* starting address of page this is */
       2 dbr		        bit (72) aligned,	/* at time of dump */
       2 system_type	        fixed bin,
       2 pad		        fixed bin,
       2 memory_record	        bit (1024 * 36);	/* page of memory */
dcl  ed_appending_simulation_$get_virtual entry (ptr, fixed bin (26), fixed bin (18), ptr, fixed bin (35));
dcl  ed_appending_simulation_$init    entry ((4) ptr, fixed bin);
dcl  ed_appending_simulation_$new_dbr entry (bit (72) aligned, fixed bin (15), fixed bin (35));
dcl  ed_appending_simulation_$new_segment entry (fixed bin (15), ptr, fixed bin (35));
dcl  entry		        char (32);		/* from dump_dir expansion */
dcl  error_count		        fixed bin;		/* while reading current record */
dcl  error_table_$bad_arg	        fixed bin (35) ext static;
dcl  error_table_$bad_density	        fixed bin (35) ext static;
dcl  error_table_$improper_data_format fixed bin (35) ext static;
dcl  error_table_$noarg	        fixed bin (35) ext static;
dcl  expand_pathname_	        entry (char (*), char (*), char (*), fixed bin (35));
dcl  get_temp_segments_	        entry (char (*), (*) ptr, fixed bin (35));
dcl  good_records		        fixed bin;		/* number read so far */
dcl  hbound		        builtin;
dcl  hcs_$make_seg		        entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35));
dcl  hcs_$set_bc_seg	        entry (ptr, fixed bin (24), fixed bin (35));
dcl  hcs_$terminate_noname	        entry (ptr, fixed bin (35));
dcl  ioa_			        entry () options (variable);
dcl  iocb_ptr		        ptr;		/* for tape */
dcl  iox_$attach_name	        entry (char (*), ptr, char (*), ptr, fixed bin (35));
dcl  iox_$close		        entry (ptr, fixed bin (35));
dcl  iox_$control		        entry (ptr, char (*), ptr, fixed bin (35));
dcl  iox_$detach_iocb	        entry (ptr, fixed bin (35));
dcl  iox_$open		        entry (ptr, fixed bin, bit (1) aligned, fixed bin (35));
dcl  iox_$read_record	        entry (ptr, ptr, fixed bin (21), fixed bin (21), fixed bin (35));
dcl  last_non_null_page	        fixed bin;		/* used when writing seg pages to dump so we don't  write trailing null pages */
dcl  last_segnum		        fixed bin (15);	/* last valid segnum in dump */
dcl  ltrim		        builtin;
dcl  me			        char (20) static options (constant) init ("read_early_dump_tape");
dcl  memory_block_num	        fixed bin;		/* which memory page we're reading */
dcl  memory_block_ptrs	        (4) ptr init ((4) null); /* forms a set of 4 128k areas */
dcl  memory_blocks		        (0:127) bit (1024 * 36) based; /* a 128k area */
dcl  mod			        builtin;
dcl  1 my_dump		        aligned like dump;	/* header for dump */
dcl  my_page_buffer		        bit (36 * 1024) based (addr (dump_record.memory_record)); /* area for appending simulation reading of memory blocks */
dcl  1 my_seg_info		        aligned like seg_info;/* describe current segment being dumped */
dcl  n_args		        fixed bin;
dcl  new_memory_block_num	        fixed bin;		/* memory block alleged to be in current tape record */
dcl  null			        builtin;
dcl  null_page_num		        fixed bin;		/* loop counter */
dcl  page_num		        fixed bin;		/* loop counter */
dcl  original_density	        char (4);		/* command level specified initial density */
dcl  release_temp_segments_	        entry (char (*), (*) ptr, fixed bin (35));
dcl  rtrim		        builtin;
dcl  segnum		        fixed bin (15);	/* loop counter */
dcl  size			        builtin;
dcl  substr		        builtin;
dcl  tape_record_len	        fixed bin (21);	/* for checking for valid records */
dcl  tape_reel		        char (32);		/* user name */
dcl  time			        builtin;
dcl  time_str		        char (12);		/* for building dump seg name */
dcl  unspec		        builtin;
dcl  write		        bit (1) aligned;	/* mount with ring */
%page;

/* Process arguments */

	call cu_$arg_count (n_args, code);
	if n_args = 0 | code ^= 0 then do;
	     call com_err_ (code, me, "Usage is: read_early_dump_tape <tape reel> -dump <dump num> {-dump_dir <dir>} {-density <n>} {-ring}");
	     return;
	end;
	dump_number = -1;
	original_density = "1600";
	tape_reel = "";
	dump_dir = ">dumps";
	write = "0"b;
	do arg_num = 1 to n_args;
	     call cu_$arg_ptr (arg_num, arg_ptr, arg_len, code);
	     if arg_len > 0 then do;
		if substr (arg, 1, 1) ^= "-" then tape_reel = arg;
		else if arg = "-dump" then do;
		     arg_num = arg_num + 1;
		     if arg_num > n_args then do;
			call com_err_ (error_table_$noarg, me, "dump number");
			return;
		     end;
		     call cu_$arg_ptr (arg_num, arg_ptr, arg_len, code);
		     dump_number = cv_dec_check_ (arg, code);
		     if code ^= 0 | dump_number < 1 then do;
			call com_err_ (error_table_$bad_arg, me, "dump number ^a", arg);
			return;
		     end;
		end;
		else if arg = "-ring" | arg = "-rg" then write = "1"b;
		else if arg = "-dump_dir" then do;
		     arg_num = arg_num + 1;
		     if arg_num > n_args then do;
			call com_err_ (error_table_$noarg, me, "dump dir");
			return;
		     end;
		     call cu_$arg_ptr (arg_num, arg_ptr, arg_len, code);
		     call expand_pathname_ (arg, dump_dir, entry, code);
		     if code ^= 0 then do;
			call com_err_ (code, me, "dump dir ^a", arg);
			return;
		     end;
		     dump_dir = rtrim (dump_dir) || ">" || entry;
		end;
		else if arg = "-density" | arg = "-den" then do;
		     arg_num = arg_num + 1;
		     if arg_num > n_args then do;
			call com_err_ (error_table_$noarg, me, "density");
			return;
		     end;
		     call cu_$arg_ptr (arg_num, arg_ptr, arg_len, code);
		     if arg ^= "800" & arg ^= "1600" & arg ^= "6250" then do;
			call com_err_ (error_table_$bad_density, me, "^a", arg);
			return;
		     end;
		     original_density = arg;
		end;
		else do;
		     call com_err_ (error_table_$bad_arg, me, "^a", arg);
		     return;
		end;
	     end;
	end;

	if tape_reel = "" then do;
	     call com_err_ (0, me, "A tape reel name must be specified.");
	     return;
	end;
	if dump_number < 1 then do;
	     call com_err_ (0, me, "-dump must be specified");
	     return;
	end;
%page;

/* Read the dump tape into temp segments. */

	on cleanup call clean_up;

	density = original_density;
	attach_descr = "tape_nstd_ " || rtrim (tape_reel) || " -den " || density;
	if write then attach_descr = rtrim (attach_descr) || " -write";
	call iox_$attach_name ("redt_switch_", iocb_ptr, attach_descr, codeptr (read_early_dump_tape), code);
	if code ^= 0 then go to iox_error;
	call iox_$open (iocb_ptr, Sequential_input, "0"b, code);
	if code ^= 0 then do;
iox_error:     call com_err_ (code, me, "^a", attach_descr);
	     go to abort;
	end;
	call get_temp_segments_ (me, memory_block_ptrs, code);
	if code ^= 0 then do;
	     call com_err_ (code, me, "Getting temp segments.");
	     go to abort;
	end;

read:	memory_block_num = -1;
	good_records = 0;
	do while (memory_block_num < 511);
	     code = -1;
	     do error_count = 1 to 16 while (code ^= 0);
		call iox_$read_record (iocb_ptr, addr (dump_record), 4 * size (dump_record), tape_record_len, code);
	     end;
	     if code ^= 0 then
		if density = original_density & good_records = 0 then do; /* try another density */
		     if original_density = "6250" then density = "1600";
		     else if original_density = "1600" then density = "6250";
		     else density = "1600";
		     call iox_$control (iocb_ptr, "rewind", null, code);
		     call iox_$control (iocb_ptr, "d" || density, null, code);
		     go to read;
		end;
		else do;
		     call com_err_ (code, me, "More than 16 errors.");
		     go to abort;
		end;
	     else do;
		new_memory_block_num = divide (dump_record.address, 1024, 9);
		if tape_record_len ^= 4 * size (dump_record) | /* valid record? */
		     dump_record.magic_number ^= Magic_number |
		     new_memory_block_num < memory_block_num | /* the one we expect? */
		     memory_block_num + 1 < new_memory_block_num then do;
		     call com_err_ (error_table_$improper_data_format, me);
		     go to abort;
		end;
		else do;
		     good_records = good_records + 1;
		     memory_block_num = new_memory_block_num;
		     crash_dbr = dump_record.dbr;
		     crash_system_type = dump_record.system_type;
		     memory_block_ptrs (divide (memory_block_num, 128, 7) + 1) -> memory_blocks (mod (memory_block_num, 128)) = dump_record.memory_record;
		end;
	     end;
	end;
	call clean_up_tape;
%page;

/* Now get the data into a regular format dump. */

	dumpptr = addr (my_dump);
	seg_info_ptr = addr (my_seg_info);

	unspec (my_dump) = "0"b;
	call ed_appending_simulation_$init (memory_block_ptrs, crash_system_type);
	call ed_appending_simulation_$new_dbr (crash_dbr, last_segnum, code);
	if code ^= 0 then do;
	     call com_err_ (code, me, "Bad dbr value in dump");
	     go to abort;
	end;
	dump.valid = "0"b;
	dump.erfno = dump_number;

	dump.words_dumped = 0;
	begin;
dcl  kludge_valid		        bit (36) aligned based (addr (dump.valid));
	     kludge_valid = "111111111111111111111111111111111111"b; /* azm expects it */
	end;
	dump.time = clock;
	dump.num_segs = 0;
	dump.valid_355 = "0"b;
	dump.dumped_355s = "0"b;
	dump.time_355 = 0;
	dump.version = DUMP_VERSION_2;

	dump.dbr = crash_dbr;

	time_str = time;
	date_str = date;
	dump_name = substr (date_str, 3, 2) || substr (date_str, 5, 2) || substr (date_str, 1, 2) || "." || substr (time_str, 1, 4) || ".";
	dump_segment = 0;
	current_dump_record = 2;			/* header */

	dump_segment_name = dump_name || ltrim (character (dump_segment)) || "." || ltrim (character (dump_number));
	call hcs_$make_seg (dump_dir, dump_segment_name, "", 10, dump_seg_ptrs (dump_segment), code);
	if dump_seg_ptrs (dump_segment) = null then do;
	     call com_err_ (code, me, dump_segment_name);
	     go to abort;
	end;

	do segnum = 0 to last_segnum;
	     call ed_appending_simulation_$new_segment (segnum, seg_info_ptr, code);
	     if code ^= 0 then go to next_seg;

	     if dump.num_segs = dimension (dump.segs, 1) then do;
		call ioa_ ("Segment array overflow.");
		go to end_dump;
	     end;
	     dump.num_segs = dump.num_segs + 1;
	     dump.segs.segno (dump.num_segs) = bit (bin (segnum, 18), 18);
	     dump.segs.length (dump.num_segs) = "0"b;

/* read pages from simulated segment, writing to dump.  Don't write null pages.
If we do find a non-null page, write it and any null pages we didn't write
before. */

	     last_non_null_page = -1;
	     do page_num = 0 to divide (seg_info.size + 1023, 1024, 8) - 1;
		call ed_appending_simulation_$get_virtual (seg_info_ptr, page_num * 1024, 1024, addr (my_page_buffer), code);
		if my_page_buffer ^= "0"b then do;	/* output non-null page and all null pages up to it */
		     do null_page_num = last_non_null_page + 1 to page_num - 1;
			dummy_ptr = get_put ();
		     end;
		     get_put () -> my_page_buffer = my_page_buffer;
		     last_non_null_page = page_num;
		end;
	     end;
	     dump.segs.length (dump.num_segs) = bit (bin ((last_non_null_page + 1) * 16, 18), 18);
	     dump.words_dumped = dump.words_dumped + (last_non_null_page + 1) * 1024;
next_seg:
	end;

/* Write out header */
end_dump:
	dump_seg_ptrs (0) -> dump = my_dump;
	call hcs_$set_bc_seg (dump_seg_ptrs (dump_segment), (mod (current_dump_record - 1, 255) + 1) * 1024 * 36, code);

abort:	call clean_up;
	return;
%page;
clean_up: proc;

	call release_temp_segments_ (me, memory_block_ptrs, code);
	do dump_segment = 0 to hbound (dump_seg_ptrs, 1);
	     if dump_seg_ptrs (dump_segment) ^= null then call hcs_$terminate_noname (dump_seg_ptrs (dump_segment), code);
	end;

clean_up_tape: entry;

	call iox_$close (iocb_ptr, code);
	call iox_$detach_iocb (iocb_ptr, code);
	return;
     end;
%page;
get_put: proc () returns (ptr);

/* add page to dump (returns ptr to page to place data) */

	if mod (current_dump_record, 255) = 0 then do;
	     call hcs_$set_bc_seg (dump_seg_ptrs (dump_segment), 255 * 1024 * 36, code);
	     dump_segment = dump_segment + 1;
	     dump_segment_name = dump_name || ltrim (character (dump_segment)) || "." || ltrim (character (dump_number));
	     call hcs_$make_seg (dump_dir, dump_segment_name, "", 10, dump_seg_ptrs (dump_segment), code);
	     if dump_seg_ptrs (dump_segment) = null then do;
		call com_err_ (code, me, dump_segment_name);
		go to abort;
	     end;
	end;
	current_dump_record = current_dump_record + 1;
	return (addrel (dump_seg_ptrs (dump_segment), mod (current_dump_record - 1, 255) * 1024));
     end;
%page; %include bce_appending_seg_info;
%page; %include bos_dump;
%page; %include iox_modes;
     end;
