/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(85-09-09,Farley), approve(85-09-09,MCR6979),
     audit(86-02-19,Coppola), install(86-03-21,MR12.0-1033):
     Support IMU.
                                                   END HISTORY COMMENTS */

/* format: style2,indcomtxt */
identify_io_channel_:
     procedure (P_configp, P_iom, P_channel, P_name, P_code);

/* Procedure to identify individual IOM channels */
/* Split out of interrupt_meters, August, 1981, W. Olin Sibert */
/* Modified for prph fnp cards BIM 83-12-15 */
/* Modified Feb 1985 by Paul Farley for IMU changes */

	dcl     P_configp		 pointer parameter; /* Pointer to config deck used for channel identification */
	dcl     P_iom		 fixed bin (3) parameter;
						/* IOM number */
	dcl     P_channel		 fixed bin (8) parameter;
						/* Channel number */
	dcl     P_name		 char (*) parameter;/* Returned, interpreted channel name */
	dcl     P_code		 fixed bin (35) parameter;

	dcl     iom		 fixed bin (3);
	dcl     channel		 fixed bin (8);

	dcl     error_table_$bad_channel
				 fixed bin (35) external static;

	dcl     OVERHEAD_CHANNELS	 (0:7) char (32) varying internal static options (constant)
				 init ("overhead channel zero", "system fault", "connect", "snapshot",
				 "wraparound", "bootload", "special", "scratchpad");

	dcl     IOM_NAMES		 (1:8) char (8) varying internal static options (constant)
				 init ("IOM A", "IOM B", "IOM C", "IOM D", "IOM E", "IOM F", "IOM G", "IOM H");

	dcl     IMU_OVERHEAD_CHANNELS	 (0:7) char (32) varying internal static options (constant)
				 init ("overhead channel zero", "system fault", "connect", "mca",
				 "overhead channel four", "bootload", "special", "overhead channel seven");

	dcl     IMU_NAMES		 (1:8) char (8) varying internal static options (constant)
				 init ("IMU A", "IMU B", "IMU C", "IMU D", "IMU E", "IMU F", "IMU G", "IMU H");

	dcl     TAGS		 (1:8) char (1) aligned internal static options (constant)
				 init ("a", "b", "c", "d", "e", "f", "g", "h");

	dcl     (addr, addrel, divide, hbound, max, min, null, size, substr)
				 builtin;

/**/

	iom = P_iom;
	channel = P_channel;

	if (iom < 1) | (iom > 4) | (channel < 0) | (channel > 63)
	then do;
INVALID_IO_CHANNEL:
		P_name = "invalid channel number";
		P_code = error_table_$bad_channel;
		return;
	     end;

	if P_configp = null ()
	then /* Default is running system config deck */
	     cardp = addr (config_deck$);		/* Prepare to look through the config deck */
	else cardp = P_configp;

	P_name = lookup ();
	P_code = 0;				/* Consider successful, even if unidentifiable */

	return;					/* All done */

/**/

lookup:
     procedure () returns (char (32));

/* This procedure returns the "name" of the specified channel, as best it can */

	dcl     first_channel	 fixed bin (8);
	dcl     last_channel	 fixed bin (8);
	dcl     field		 fixed bin;


	if (channel <= hbound (OVERHEAD_CHANNELS, 1))
	then do;
		do while (config_card.word ^= FREE_CARD_WORD);
						/* look for sentinel at end */
		     if config_card.word = IOM_CARD_WORD
		     then do;
			     iom_cardp = cardp;
			     if iom_card.tag = iom
			     then do;
				     if iom_card.model = "imu" | iom_card.model = "iioc"
				     then return (IMU_NAMES (iom) || " " || IMU_OVERHEAD_CHANNELS (channel));
				     else return (IOM_NAMES (iom) || " " || OVERHEAD_CHANNELS (channel));

				end;
			end;
		     cardp = addrel (cardp, size (config_card));
						/* On to the next config card */
		end;
		return (IOM_NAMES (iom) || " " || OVERHEAD_CHANNELS (channel));
	     end;

	do while (config_card.word ^= FREE_CARD_WORD);	/* look for sentinel at end */

	     if config_card.word = CHNL_CARD_WORD
	     then do;
		     chnl_cardp = cardp;

		     do field = 1 to hbound (chnl_card_array.group, 1);
						/* Loop through channels which exist */
			first_channel = chnl_card.chan (field);
			last_channel = chnl_card.chan (field) + chnl_card.nchan (field) - 1;

			if iom = chnl_card.iom (field)
			then if channel >= first_channel
			     then if channel <= last_channel
				then return (chnl_card.name);
		     end;
		end;

	     else if config_card.word = PRPH_CARD_WORD
	     then do;
		     prph_cardp = cardp;
		     prph_dsk_cardp = cardp;
		     prph_tap_cardp = cardp;

		     if iom ^= prph_card.iom
		     then goto NEXT_CARD;

		     first_channel = prph_card.chan;

		     if /* case */ substr (prph_card.name, 1, 3) = "dsk"
		     then last_channel = first_channel + prph_dsk_card.nchan - 1;
		     else if substr (prph_card.name, 1, 3) = "tap"
		     then last_channel = first_channel + prph_tap_card.nchan - 1;
		     else last_channel = first_channel;

		     if channel >= first_channel
		     then if channel <= last_channel
			then return (prph_card.name);
		end;

NEXT_CARD:
	     cardp = addrel (cardp, size (config_card));	/* On to the next config card */
	end;

	return ("unidentifiable channel");

     end lookup;

%page;
%include config_deck;
%page;
%include config_iom_card;
%page;
%include config_chnl_card;
%page;
%include config_prph_card;
%page;
%include config_prph_tap_card;
%page;
%include config_prph_dsk_card;

     end identify_io_channel_;
