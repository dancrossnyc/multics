/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


binary_segmsg_util_: proc (a_datap) returns (char (250));

/* Procedure to make heads and tails out of binary messages produced by page control/vtoc salvager. */
/* This procedure knows the format and decision trees of these binary messages, which happen */
/* to be transmitted via the syserr log, most usually.  This procedure has no knowledge */
/* of syserr or its logs. */

/* Bernard Greenberg 8/4/77 */

dcl (datap, a_datap) ptr;				/* Pointer to binary stuff */
dcl  path char (168);				/* Ostensible vpn_cv_.. answer */
dcl  segname char (250);				/* Answer */
dcl (linkage_error, command_error) condition;		/* vpn_cv_ is a mighty funny boy */
dcl  brief char (8) aligned;				/* For convert_status_code_ */
dcl  long char (100) aligned;				/* Ditto */
dcl  code fixed bin (35);				/* Status code in general */
dcl  volname char (32);				/* Phys vol name */
dcl (error_table_$noentry, error_table_$no_dir) fixed bin (35) external;

dcl  convert_status_code_ entry (fixed bin (35), char (8) aligned, char (100) aligned);
dcl  vpn_cv_uid_path_ entry (ptr, char (*), fixed bin (35)); /* for dirnames */
dcl  vpn_cv_uid_path_$ent entry (ptr, char (*), bit (36) aligned, fixed bin (35));
dcl  expand_pathname_ entry (char (*), char (*), char (*), fixed bin (35));
dcl  ioa_$rsnnl entry options (variable);
dcl  mdc_$find_volname entry (bit (36), char (*), char (*), fixed bin (35));


%include segdamage_msg;
dcl 1 sd like segdamage based (datap) aligned;
/* 	*/

	datap = a_datap;
	volname = cv_pvname ();

	if sd.vtocx = -2 then do;
						/* PD case */
	     if sd.uid = "0"b then segname = "VTOCEless segment on pv " || volname;
	     else call ioa_$rsnnl ("UID ^w on pv ^a", segname, (0), sd.uid, volname);
	end;
	else if sd.vtocx = -1 then segname = "VTOCEless segment on pv " || volname;
	else do;
						/* Have vtocx, if we have uid, golden */
	     if sd.uid = "0"b then do;
		path = "Cannot determine pathname.";
		on command_error;
		on linkage_error go to vpnf1;
		call vpn_cv_uid_path_ (addr (sd.uid_path), path, code);
vpnf1:		revert linkage_error;
		revert command_error;

		call ioa_$rsnnl ("Seg at vtocx ^o on pv ^a, dir = ^a", segname, (0), sd.vtocx, volname);
	     end;
	     else do;				/* Got ALL goods! */
		on linkage_error go to vpnf2;
		on command_error;
		path = "Cannot determine pathname";
		call vpn_cv_uid_path_$ent (addr (sd.uid_path), path, sd.uid, code);
vpnf2:		revert command_error;
		revert linkage_error;
		if code = 0 then segname = rtrim (path) || " on pv " || volname;
		else if code = error_table_$noentry then do;
		     call expand_pathname_ ((path), path, (" "), (0));
		     call ioa_$rsnnl ("Deleted segment in ^a, on pv ^a.", segname, (0), path, volname);
		end;
		else if code = error_table_$no_dir then call ioa_$rsnnl ("Segment on pv ^a in deleted directory: ^a",
		     segname, (0), volname, path);
		else do;
		     call convert_status_code_ (code, brief, long);
		     call ioa_$rsnnl ("Cannot determine full path name: ^a ^a = UID ^w.",
			segname, (0), long, path, sd.uid);
		end;
	     end;
	end;

	return (segname);

/* */
cv_pvname: proc () returns (char (32));

dcl (pvname, lvname) char (32);
dcl  code fixed bin (35);

	     if sd.pvid = "777777777777"b3 then return ("Paging Device");
	     call mdc_$find_volname ((sd.pvid), pvname, lvname, code);
	     if code ^= 0 then call ioa_$rsnnl ("<<PVID ^w>>", pvname, (0), sd.pvid);
	     return (pvname);

	end cv_pvname;

interpret_pvname: entry (a_datap) returns (char (32));

	datap = a_datap;

	return (cv_pvname ());

     end binary_segmsg_util_;
