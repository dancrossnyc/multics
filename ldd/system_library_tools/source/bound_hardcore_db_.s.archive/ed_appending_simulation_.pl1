/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   *********************************************************** */
ed_appending_simulation_: proc;

/* Modified routine to access segments in the saved Multics memory image.
Taken from bce_appending_simulation.  Keith Loepere, December 1983. */

/* format: style4,indattr,ifthenstmt,ifthen,idind33,^indcomtxt */

dcl  address		        fixed bin (26);	/* running absolute or virtual (within segment) address */
dcl  code			        fixed bin (35) parameter;
dcl  crash_system_type	        fixed bin static;	/* supplied from dump */
dcl  data_length		        fixed bin (18);	/* running data left to be gotten */
dcl  data_part		        (data_part_length) bit (36) aligned based; /* part of page to extract toward total desired */
dcl  data_part_length	        fixed bin (18);
dcl  data_ptr		        ptr;		/* running ptr to user data area */
dcl  dbr_value		        bit (72) aligned parameter;
dcl  desired_segnum		        fixed bin (15) parameter;
dcl  dseg_sdw		        fixed bin (71);
dcl  1 dseg_info		        aligned like seg_info static; /* describe dseg in dump */
dcl  error_table_$argerr	        fixed bin (35) ext static;
dcl  error_table_$boundviol	        fixed bin (35) ext static;
dcl  error_table_$invalidsegno        fixed bin (35) ext static;
dcl  error_table_$out_of_bounds       fixed bin (35) ext static;
dcl  memory_block_ptrs	        (4) ptr static;	/* forms a set of 4 128k blocks of memory */
dcl  multics_data_ptr	        ptr;		/* running ptr to area in dump to copy out for user */
dcl  1 my_dbr_info		        aligned like dbr_info;
dcl  1 my_ptw_info		        aligned like ptw_info;
dcl  p_address		        fixed bin (26) parameter; /* desired address */
dcl  p_crash_system_type	        fixed bin parameter;
dcl  p_data_length		        fixed bin (18) parameter; /* desired data length */
dcl  p_data_ptr		        ptr parameter;	/* ptr to user data area */
dcl  p_last_segnum		        fixed bin (15) parameter;
dcl  p_memory_block_ptrs	        (4) ptr parameter;
dcl  p_seg_info_ptr		        ptr parameter;
dcl  page_num		        fixed bin;		/* loop counter */
dcl  page_offset		        fixed bin;		/* start within page of data to get */
dcl  ptp			        ptr;		/* ptw ptr */
dcl  sdwp			        ptr;		/* sdw ptr */
dcl  seg_sdw		        fixed bin (71);
dcl  size			        builtin;
%page;
init: entry (p_memory_block_ptrs, p_crash_system_type);

/* save away data about dump */

	memory_block_ptrs = p_memory_block_ptrs;
	crash_system_type = p_crash_system_type;
	return;
%page;
new_dbr: entry (dbr_value, p_last_segnum, code);

/* Supply a new dseg for the simulation. */

/* Examine the new dbr. */

	code = 0;
	dbr_info_ptr = addr (my_dbr_info);
	ptw_info_ptr = addr (my_ptw_info);
	call dbr_util_$dissect (addr (dbr_value), dbr_info_ptr);
	p_last_segnum = divide (dbr_info.bound, 2, 15) - 1;
	dseg_info.sdwi.paged = dbr_info.paged;
	dseg_info.sdwi.address = dbr_info.address;

/* Get the sdw & page table for dseg. */

	if dseg_info.sdwi.paged then do;
	     call get_absolute (dseg_info.sdwi.address - size (aste), size (aste) + divide (dbr_info.bound + 1023, 1024, 8), addr (dseg_info.sst_data), code);
	     if code ^= 0 then return;
	     call ptw_util_$dissect (addr (dseg_info.page_table (0)), ptw_info_ptr);
	     call get_absolute (ptw_info.address, 2, addr (dseg_sdw), code);
	     if code ^= 0 then return;
	end;
	else do;
	     call get_absolute (dseg_info.sdwi.address, 2, addr (dseg_sdw), code);
	     if code ^= 0 then return;
	end;
	call sdw_util_$dissect (addr (dseg_sdw), addr (dseg_info.sdwi));
	return;
%page;
get_absolute: entry (p_address, p_data_length, p_data_ptr, code);

	data_length = p_data_length;

/* We march the address we desire downwards, by at most a page at a time.  As
we do this, we appropriately keep track of the memory this is in (or not in)
to validate the address. */

	do while (data_length > 0);

/* Find amount of data in this page. */

	     data_part_length = mod (p_address + data_length - 1, 1024) + 1; /* amount from start of page to last word */
	     if data_part_length <= data_length then address = p_address + data_length - data_part_length; /* data crosses into this page */
	     else do;				/* data within a page */
		address = p_address;
		data_part_length = data_length;
	     end;
	     data_ptr = addrel (p_data_ptr, address - p_address);

	     if address >= 512 * 1024 then do;		/* address beyond this memory */
		code = error_table_$out_of_bounds;
		unspec (data_ptr -> data_part) = "0"b;
	     end;
	     else do;
		multics_data_ptr = addrel (memory_block_ptrs (divide (address, 128 * 1024, 17) + 1), mod (address, 128 * 1024));
		data_ptr -> data_part = multics_data_ptr -> data_part;
	     end;
	     data_length = data_length - data_part_length;
	end;
	return;
%page;
new_segment: entry (desired_segnum, p_seg_info_ptr, code);

/* Supply a new segnum for virtual simulation. */

	code = 0;
	seg_info_ptr = p_seg_info_ptr;

/*  We will get the user's new segment's sdw and page table.  We call virtual, 
telling it to get the seg's sdw. */

	call get_virtual (addr (dseg_info), desired_segnum * 2, 2, addr (seg_sdw), code);
	if code ^= 0 then go to bad_segment;

	call sdw_util_$dissect (addr (seg_sdw), addr (seg_info.sdwi));
	if seg_info.sdwi.faulted then do;
	     code = error_table_$invalidsegno;
	     go to bad_segment;
	end;
	if seg_info.sdwi.paged then do;		/* Get the seg's aste/page table */
	     call get_absolute (seg_info.sdwi.address - size (aste), size (aste) + divide (seg_info.sdwi.size + 1023, 1024, 8), addr (seg_info.sst_data), code);
	     if code ^= 0 then do;			/* It could just be that the page table is in good memory and has no aste in front of it, but... */
		seg_info.sdwi.faulted = "1"b;
bad_segment:	return;
	     end;
	end;
	return;
%page;
get_virtual: entry (p_seg_info_ptr, p_address, p_data_length, p_data_ptr, code);

/* Fetch a given set of words from the current segment. */

	code = 0;
	seg_info_ptr = p_seg_info_ptr;
	ptw_info_ptr = addr (my_ptw_info);

	data_length = p_data_length;
	if p_address + p_data_length > seg_info.sdwi.size then do;
	     data_part_length = p_address + data_length - seg_info.sdwi.size;
	     data_ptr = addrel (p_data_ptr, data_length - data_part_length);
	     unspec (data_ptr -> data_part) = "0"b;
	     code = error_table_$boundviol;
	     data_length = data_length - data_part_length;
	end;
	if seg_info.sdwi.paged then do;
	     do while (data_length > 0);
		data_part_length = mod (p_address + data_length - 1, 1024) + 1; /* amount from start of page to last word */
		if data_part_length <= data_length then address = p_address + data_length - data_part_length; /* data crosses into this page */
		else do;				/* data within a page */
		     address = p_address;
		     data_part_length = data_length;
		end;
		data_ptr = addrel (p_data_ptr, address - p_address);
		page_num = divide (address, 1024, 8);
		page_offset = mod (address, 1024);

/* Find the appropriate page.  Move the amount found in that page to the
user's area. */

		call ptw_util_$dissect (addr (seg_info.page_table (page_num)), ptw_info_ptr);
		if ptw_info.valid then		/* properly in memory */
		     call get_absolute (ptw_info.address + page_offset, data_part_length, data_ptr, code);
		else do;
bad_page:		     unspec (data_ptr -> data_part) = "0"b;
		     if code = 0 then code = error_table_$argerr;
		end;
		data_length = data_length - data_part_length;
	     end;
	end;
	else do;					/* in memory (unpaged) */
	     address = seg_info.sdwi.address + p_address;
	     call get_absolute (address, p_data_length, p_data_ptr, code);
	end;
	return;
%page;

/* The following routines were stolen from their namesakes for use here.
They are striped down and key off crash_system_type for operation. */

dbr_util_$dissect: proc (dbr_ptr, p_dbr_info_ptr);

/* Routine to take apart (and assemble?) dbr (descriptor segment base register)
values.  Initially coded by Keith Loepere, October 1983. */

dcl  dbr_ptr		        ptr parameter;
dcl  p_dbr_info_ptr		        ptr parameter;

	dbr_info_ptr = p_dbr_info_ptr;
	if crash_system_type = ADP_SYSTEM then do;
	     dbr_info.address = bin (dbr_ptr -> adp_dbr.add, 26);
	     dbr_info.bound = (bin (dbr_ptr -> adp_dbr.bound, 14) + 1) * 16;
	     dbr_info.stack_base_segnum = dbr_ptr -> adp_dbr.stack_base_segno * 8;
	     dbr_info.paged = ^ dbr_ptr -> adp_dbr.unpaged;
	end;
	else do;
	     dbr_info.address = bin (dbr_ptr -> l68_dbr.add, 24);
	     dbr_info.bound = (bin (dbr_ptr -> l68_dbr.bound, 14) + 1) * 16;
	     dbr_info.stack_base_segnum = dbr_ptr -> l68_dbr.stack_base_segno * 8;
	     dbr_info.paged = ^ dbr_ptr -> l68_dbr.unpaged;
	end;
	return;
     end;
%page;
ptw_util_$dissect: proc (P_ptw_ptr, P_ptw_info_ptr);

dcl  P_ptw_ptr		        pointer parameter;
dcl  P_ptw_info_ptr		        pointer parameter;

	ptp = P_ptw_ptr;
	ptw_info_ptr = P_ptw_info_ptr;
	if crash_system_type = ADP_SYSTEM then do;
	     if adp_ptw.add_type = add_type.core then do;
		ptw_info.address = adp_core_ptw.frame * 1024;
		ptw_info.null_disk = "0"b;
	     end;
	     else if adp_ptw.add_type = add_type.disk then do;
		ptw_info.address = bin (substr (adp_ptw.add, 2, 17), 17);
		ptw_info.null_disk = substr (adp_ptw.add, 1, 1);
	     end;
	     else do;
		ptw_info.address = bin (adp_ptw.add, 18);
		ptw_info.null_disk = "0"b;
	     end;
	     ptw_info = adp_ptw.flags, by name;
	end;
	else do;
	     if l68_ptw.add_type = add_type.core then do;
		ptw_info.address = l68_core_ptw.frame * 1024;
		ptw_info.null_disk = "0"b;
	     end;
	     else if l68_ptw.add_type = add_type.disk then do;
		ptw_info.address = bin (substr (l68_ptw.add, 2, 17), 17);
		ptw_info.null_disk = substr (l68_ptw.add, 1, 1);
	     end;
	     else do;
		ptw_info.address = bin (l68_ptw.add, 18);
		ptw_info.null_disk = "0"b;
	     end;
	     ptw_info = l68_ptw.flags, by name;
	end;
	return;
     end;
%page;
sdw_util_$dissect: proc (P_sdw_ptr, P_sdw_info_ptr);

dcl  P_sdw_ptr		        pointer parameter;
dcl  P_sdw_info_ptr		        pointer parameter;

	sdwp = P_sdw_ptr;				/* Make it addressable */
	sdw_info_ptr = P_sdw_info_ptr;
	unspec (sdw_info) = ""b;			/* Clear it out, and fill it in */

	if crash_system_type = ADP_SYSTEM then do;
	     string (sdw_info.access) = string (adp_sdw.access);
	     string (sdw_info.rings) = string (adp_sdw.rings);

	     sdw_info.faulted = ^adp_sdw.valid;		/* Bits are different in state */
	     sdw_info.paged = ^adp_sdw.unpaged;

	     if ^adp_sdw.not_a_gate then		/* Copy the entry bound, if interesting */
		sdw_info.gate_entry_bound = 1 + binary (adp_sdw.entry_bound, 14);

	     sdw_info.size = 16 + 16 * binary (adp_sdw.bound, 14);
	     sdw_info.address = binary (adp_sdw.add, 26);
	end;

	else do;					/* Ordinary Level 68 */
	     string (sdw_info.access) = string (l68_sdw.access);
	     string (sdw_info.rings) = string (l68_sdw.rings);

	     sdw_info.faulted = ^l68_sdw.valid;		/* Bits are different in state */
	     sdw_info.paged = ^l68_sdw.unpaged;
	     sdw_info.cache = l68_sdw.cache;		/* Only on the Level 68 */

	     if ^l68_sdw.not_a_gate then		/* Copy the entry bound, if interesting */
		sdw_info.gate_entry_bound = 1 + binary (l68_sdw.entry_bound, 14);

	     sdw_info.size = 16 + 16 * binary (l68_sdw.bound, 14);
	     sdw_info.address = binary (l68_sdw.add, 24);
	end;

	return;
     end;
%page; %include add_type;
%page; %include bce_appending_seg_info;
%page; %include "dbr.adp";
%page; %include "dbr.l68";
%page; %include dbr_info;
%page; %include "ptw.adp";
%page; %include "ptw.l68";
%page; %include ptw_info;
%page; %include "sdw.adp";
%page; %include "sdw.l68";
%page; %include system_types;
     end;
