/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* format: style4,delnl,insnl,indattr,ifthen,dclind10 */
copy_registry: proc;

/* This command copies RCP registries. */
/* Written 01/03/79 by C. D. Tavares */
/* Last modified 10/03/80 by CDT for better error message when copy fails */
/* Modified 02/12/85 by M. M. Pozzo to print out warning message when there
   are one or more missing components in the original registry. */

/* automatic */

dcl  ap pointer,
     al fixed bin,
     arg char (al) based (ap),
     code fixed bin (35),
     i fixed bin,
     from_dirname char (168),
     to_dirname char (168),
     from_ename char (32),
     to_ename char (32),
     error_msg_arg char (200),
     nargs fixed bin,
     reset_journal_sw bit (1) aligned,
     star_index fixed bin;


/* static */

dcl  system_free_ptr pointer initial (null) static;

/* external static */

dcl (error_table_$badequal,
     error_table_$noarg,
     error_table_$badopt,
     error_table_$rcp_missing_registry_component) ext fixed bin (35) static;

/* based */

dcl  system_free_area area based (system_free_ptr);

/* entries */

dcl  check_star_name_$entry ext entry (char (*), fixed bin (35)),
     com_err_ ext entry options (variable),
     cu_$arg_count ext entry (fixed bin),
     cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35)),
     expand_pathname_$add_suffix entry (char (*), char (*), char (*), char (*), fixed bin (35)),
     get_equal_name_ ext entry (char (*), char (*), char (*), fixed bin (35)),
     hcs_$star_ ext entry (char (*), char (*), fixed bin (2), pointer, fixed bin, pointer, pointer, fixed bin (35)),
     get_system_free_area_ ext entry returns (pointer),
     get_wdir_ ext entry returns (char (168));

dcl  rcp_admin_$copy_registry ext entry
    (char (*), char (*) dimension (*), char (*), char (*) dimension (*),
     char (*), bit (1) aligned, fixed bin (35));

/* builtins and conditions */

dcl (dim, hbound, null, substr, sum) builtin,
     cleanup condition;

%include star_structures;

	reset_journal_sw = ""b;

	call cu_$arg_count (nargs);
	if nargs < 1 then do;
	     call com_err_ (error_table_$noarg, "copy_registry", "Usage:  copy_registry from_path {to_path}");
	     return;
	end;

	from_ename = "";
	to_dirname = get_wdir_ ();
	to_ename = "==";

	do i = 1 to nargs;
	     call cu_$arg_ptr (i, ap, al, code);
	     if code ^= 0 then call crump (code, "Getting argument.");

	     if substr (arg, 1, 1) = "-" then do;	/* control arg */
		if arg = "-reset" | arg = "-rs" then reset_journal_sw = "1"b;
		else call crump (error_table_$badopt, arg);
	     end;

	     else do;				/* real argument */
		if from_ename = "" then
		     call expand_pathname_$add_suffix (arg, "rcpr", from_dirname, from_ename, code);
		else call expand_pathname_$add_suffix (arg, "rcpr", to_dirname, to_ename, code);
		if code ^= 0 then call crump (code, arg);
	     end;
	end;

	call check_star_name_$entry (from_ename, code);
	if code > 2 then call crump (code, from_ename);

	if code = 0 then call process ((from_ename));	/* not a starname */

	else do;					/* starname, handle it */
	     star_entry_ptr, star_names_ptr = null;
	     if system_free_ptr = null then
		system_free_ptr = get_system_free_area_ ();

	     on cleanup call star_cleanup;

	     call hcs_$star_ (from_dirname, from_ename, star_BRANCHES_ONLY, system_free_ptr,
		star_entry_count, star_entry_ptr, star_names_ptr, code);

	     if code ^= 0 then call crump (code, "^a>^a");

	     begin;

dcl  enames char (32) dimension (star_entry_count);

		do star_index = 1 to star_entry_count;
		     enames (star_index) = star_names (star_entries (star_index).nindex);
		end;

		call process (enames (*));
	     end;

	     call star_cleanup;

/* ------------------------- */

star_cleanup:  proc;
		if star_names_ptr ^= null then free star_names in (system_free_area);
						/* remember to free names before entries! */
		if star_entry_ptr ^= null then free star_entries in (system_free_area);

	     end;

/* ------------------------- */

	end;

	return;
	
process:	proc (from_enames);

dcl  from_enames char (32) dimension (*) parameter;

dcl  sleep_times (4) fixed bin (71) static options (constant) initial (1, 1, 2, 6),
     timer_manager_$sleep ext entry (fixed bin (71), bit (2) aligned),
     error_table_$file_busy ext fixed bin (35) static,
     i fixed bin,
     target_names char (32) dimension (dim (from_enames, 1));

	     do i = 1 to hbound (from_enames, 1);
		call get_equal_name_ (from_enames (i), to_ename, target_names (i), code);
		if code = error_table_$badequal then code = 0; /* not an equal name but no sweat */
		if code ^= 0 then
		     call crump (code, to_ename);	/* fatal */
		else do;
		     call expand_pathname_$add_suffix ((target_names (i)), "rcpr", "", target_names (i), code);
		     if code ^= 0 then call crump (code, arg);
		end;
	     end;

               /*  Copy the registry and allow time for the file to be busy before giving up. */

	     do i = 1, i+1 to hbound (sleep_times, 1) + 1 while (code = error_table_$file_busy);

		call rcp_admin_$copy_registry
		     (from_dirname, from_enames (*),
		     to_dirname, target_names (*), error_msg_arg,
		     reset_journal_sw, code);

		if code = error_table_$file_busy then
		     if i ^> hbound (sleep_times, 1) then
			call timer_manager_$sleep (sleep_times (i), "11"b); /* relative seconds */
	     end;

	     if code = error_table_$rcp_missing_registry_component then
	        call com_err_ (code, "copy_registry", error_msg_arg);

	     else if code ^= 0 then call com_err_ (code, "copy_registry",
		"^[^/^-Some registries were not copied, starting with ^;^]^a.^[^/^-The journal has not been truncated.^;^]",
		(substr (error_msg_arg, 1, 1) = ">"), error_msg_arg, reset_journal_sw);

	     return;
	end process;

	
crump:	proc (code, reason) options (non_quick);

dcl  code fixed bin (35) parameter,
     reason char (*) parameter;

	     call com_err_ (code, "copy_registry", reason, from_dirname, from_ename);
	     goto returner;
	end crump;

returner:	return;

     end copy_registry;

