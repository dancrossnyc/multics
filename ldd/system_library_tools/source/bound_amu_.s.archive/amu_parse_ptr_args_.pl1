/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(86-12-16,Parisek), approve(87-07-09,MCR7746),
     audit(87-07-17,Fawcett), install(87-07-28,MR12.1-1049):
     Changed to accept decimal integers with the "-for" control argument
     instead of accepting only octal values.
  2) change(87-01-13,Parisek), approve(87-07-09,MCR7746),
     audit(87-07-17,Fawcett), install(87-07-28,MR12.1-1049):
     Correctly interpret arg to the "-pointers" control arg with the "mc"
     request (phx19327).
  3) change(87-02-11,Parisek), approve(87-07-09,MCR7746),
     audit(87-07-17,Fawcett), install(87-07-28,MR12.1-1049):
     Determine if referenced segment name is a temp ptr name before
     attempting to translate it to a segno for reading users deadprocs.
  4) change(87-10-29,Parisek), approve(88-03-09,MCR7861),
     audit(88-07-08,Farley), install(88-07-12,MR12.2-1055):
     Correct bug in determining temporary pointer values when analyzing
     dead_procs.
  5) change(88-02-22,Parisek), approve(88-03-09,MCR7861),
     audit(88-07-08,Farley), install(88-07-12,MR12.2-1055):
     In checking for "ring_N" or "stack_N" segs, make sure there are not more
     characters in the segment name such as "stack_0_data". We don't want to
     think stack_0_data is really stack_0.
                                                   END HISTORY COMMENTS */


amu_parse_ptr_args_:   proc ();

/* format: style4,delnl,insnl,ifthenstmt,indnoniterend,ifthendo,ifthen,^thendo */

/* Modified 10 Jan 85 by BLB to correct the check_name procedure to check for 
   non-hardcore names too.
*/

/* Parameters */

dcl a_code fixed bin (35);
dcl a_segname char(*);
dcl segname  char(32);
dcl segname_entry	bit(1) init("0"b);
dcl a_nargs fixed bin;
dcl a_va char(*);
dcl a_amu_info_ptr ptr;
dcl a_offset fixed bin (18);
dcl a_segno fixed bin;
dcl sci_ptr ptr;

/* Automatic */

dcl al fixed bin (21);
dcl ap ptr;
dcl arg char (al) based (ap);
dcl argno fixed bin;
dcl code fixed bin (35);
dcl doing fixed bin;
dcl error_msg char(256) var;
dcl 1 hard_ptr_space like hardcore_cur;
dcl indirect_sw bit (1);
dcl nargs fixed bin;
dcl segno fixed bin (17);

dcl temp_ptr ptr;

/* External */

dcl amu_$definition_ptr entry (ptr, char (*), char (*), fixed bin (35)) returns (ptr);
dcl amu_$definition_get_prn entry (ptr, char (*), ptr, fixed bin (35));
dcl amu_$do_translation entry (ptr, fixed bin, ptr, fixed bin (18), fixed bin (18), fixed bin (35));
dcl amu_$dp_name_to_segno entry (ptr, char(*), fixed bin, fixed bin(35));
dcl amu_$fdump_mpt_temp_change_idx entry (ptr, fixed bin);
dcl amu_$fdump_mpt_revert_idx entry (ptr);
dcl amu_$hardcore_info_set_cur_ptrs entry (ptr, ptr);
dcl amu_$return_val_per_process entry (ptr, fixed bin) returns (bit (1));
dcl amu_$slt_search_init_seg_ptr entry (ptr, ptr, char(*), ptr, fixed bin(35));
dcl amu_$slt_search_seg_ptr entry (ptr, ptr, char(*), ptr, fixed bin(35));
dcl (cv_oct_check_, cv_dec_check_) entry (char (*), fixed bin (35)) returns (fixed bin (35));
dcl ioa_$rsnnl		entry() options(variable);

dcl ssu_$arg_ptr entry (ptr, fixed bin, ptr, fixed bin (21));

/* Error tables */

dcl amu_et_$bad_segno fixed bin (35) ext static;
dcl amu_et_$error_indirect fixed bin (35) ext static;
dcl amu_et_$invalid_seq fixed bin (35) ext static;
dcl amu_et_$negative_offset fixed bin (35) ext static;
dcl amu_et_$no_segname fixed bin (35) ext static;
dcl amu_et_$no_va_specified fixed bin (35) ext static;
dcl amu_et_$not_its_ptr fixed bin (35) ext static;
dcl amu_et_$not_octal_offset  fixed bin (35) ext static;
dcl amu_et_$not_octal_off_mod  fixed bin (35) ext static;
dcl amu_et_$not_octal_range  fixed bin (35) ext static;
dcl amu_et_$not_octal_segno fixed bin (35) ext static;
dcl amu_et_$null_ptr fixed bin (35) ext static;
dcl amu_et_$specified_modifier  fixed bin (35) ext static;
dcl amu_et_$modifier_before_range  fixed bin (35) ext static;
dcl error_table_$noentry   fixed bin (35) ext static;
dcl error_table_$seg_not_found   fixed bin (35) ext static;

dcl (addr, baseno, baseptr, fixed, index, 
     lbound, length, null, rel, rtrim,
     search, substr, verify)		builtin;
%page; 
amu_parse_ptr_args_$resolve_va: entry(sci_ptr, a_amu_info_ptr, a_va, a_segno, a_offset, a_code);

/* This entry resolves the virtual address to its segment number and offset.
   sci_ptr                 subsystem pointer (input), 
   a_amu_info_ptr	       pointer to amu_info structure (input),
   a_va		       virtual address construct (input),
   a_segno	       segment number (output),
   a_offset	       segment offset (output),
   a_code		       standadrd error code.
*/

dcl error_found bit(1);

    amu_info_ptr = a_amu_info_ptr;
    code = 0;
    va_args_ptr = addr(va_args);
    va.segno, va.offset, va.offset_modifier,
    va.range, va.va_position, va.ecode  = 0;
    va.va_switches = "0"b;
    va.error_msg, va.va_string = "";
    va.resolved_va = null();
    error_found = "0"b;  
    call get_va(a_va, va_args_ptr, error_found, indirect_sw);  
    if error_found then do;	
       if va.ecode = 0 then va.ecode = amu_et_$invalid_seq;
       end;
    else do;
       if indirect_sw then call resolve_indirection(va_args_ptr, error_found);
       if error_found then do;	
          if va.ecode = 0 then va.ecode = amu_et_$invalid_seq;
          end;       
       end;

    a_segno = va.segno;
    a_offset = va.offset;
    a_code = va.ecode;
return;
%page; 
amu_parse_ptr_args_$get_segno: entry(sci_ptr, a_amu_info_ptr, a_segname, a_segno, a_code);

/* This entry gets the segment number assoctiated with a segment name.
   sci_ptr                 subsystem pointer (input), 
   a_amu_info_ptr	       pointer to amu_info structure (input),
   a_segname	       segment name (input),
   a_segno	       segment number (output),
   a_code		       standadrd error code.
*/

    amu_info_ptr = a_amu_info_ptr;
    segname = "";
    segname = a_segname;
    code = 0;
    error_msg = "";
    call check_name(segname, temp_ptr, error_msg, code);  
    if error_msg ^= "" | code ^= 0 then do;	
       if code ^= 0 then code = amu_et_$no_segname;
       end;
    else do;
       segno = fixed (baseno (temp_ptr), 17);
       end;

    a_segno = segno;
    a_code = code;
return;
%page;
amu_parse_ptr_args_$get_va_args: entry(sci_ptr, a_amu_info_ptr, a_arg, a_nargs, a_va_args);

    argno = 1;
    goto COMMON_ARG;

amu_parse_ptr_args_$get_va_args_given_start: entry(sci_ptr, a_amu_info_ptr, a_arg, a_start_arg, a_nargs, a_va_args);

    argno = a_start_arg;
    goto COMMON_ARG;


/* These entrypoints check and validates VA related arguments and fill in the appropriate parts of the
   va_args structure. get_va_args parses the request line, determining the VA, range and offset modifier
   and fills in the va_args structure.

   sci_ptr                 subsystem pointer (input), 
   a_amu_info_ptr	       pointer to amu_info structure (input),
   a_arg		       pointer to the argument list to be examined (input),
   a_nargs	       number of arguments in the list (input),
   a_va_args	       pointer to va_args structure (input)

For the get_va_args_given_start entry:

   a_start_arg             index to which argument to start in the list (input)   
*/
dcl a_arg				ptr;
dcl a_va_args			ptr;
dcl a_start_arg			fixed bin;

dcl (
     GETTING_VA			init(1),
     GETTING_MODIFIER		init(2),
     GETTING_RANGE			init(3),
     DONE				init(4)

     )				fixed bin int static options(constant);
dcl NUMBERS			char(10) init("0123456789") int static options(constant);
dcl forsw bit (1);

COMMON_ARG:

    amu_info_ptr = a_amu_info_ptr;
    va_args_ptr = a_va_args;
    ap = a_arg;
    nargs = a_nargs;
    forsw = "0"b;

    doing = GETTING_VA;
    do while ((argno <= nargs) & (doing ^= DONE));
       call ssu_$arg_ptr (sci_ptr, argno, ap, al);
       if arg = "-for" then forsw = "1"b;
       call parse_arg(a_va_args, doing, arg, nargs, argno);
       end;
  
    if doing = GETTING_VA then do;
       if va.ecode = 0 then va.ecode = amu_et_$no_va_specified;
       else if va.ecode = error_table_$noentry then va.ecode = error_table_$seg_not_found;
       goto ERROR_RETURN;
       end;
   else if va.ecode ^= 0 | va.error_msg ^= "" then goto ERROR_RETURN;

END_GET_VA_ARGS:

    call finish_va_resolution(a_va_args);

ERROR_RETURN:
    return;
%page;
bad_segno: proc(segno, ecode) returns(bit(1));

dcl segno fixed bin(18);
dcl ecode fixed bin(35);
dcl max_segno fixed bin (18) int static options (constant) init (4095);
	 

    ecode = 0;
    if segno = fixed (baseno (null ()), 18) then		/* null ptr */
       ecode = amu_et_$null_ptr;
    else if segno > max_segno then ecode = amu_et_$bad_segno;
    else if segno < 0 then ecode = amu_et_$bad_segno;

    return(ecode^=0);

end bad_segno;
%page;
check_name:
     proc (segment_name, temp_ptr, error_msg, code);

dcl code				fixed(35);
dcl error_msg			char(*) var;
dcl segment_name			char (*);
dcl temp_ptr			ptr;

dcl i				fixed bin;
dcl ignore			fixed bin;
dcl stack_idx			fixed bin;
dcl test_name			char (32);

    code = 0;
    error_msg = "";
    temp_ptr = null();
    test_name = segment_name;
    hardcore_cur_ptr = addr (hard_ptr_space);
    if substr (test_name, 1, 5) = "ring_" | substr (test_name, 1, 6) = "stack_" then do;
        i = search (test_name, "_");
        if length (rtrim(test_name)) = (i+1) then do;	/* Is there chars after the octal ring_ or stack_ seg
 */						/* If so, then it's not ring_ or stack_ seg (ie: stack_0_data) */
	   stack_idx = cv_oct_check_ (substr (test_name, i + 1), code);
	   if code ^= 0 then do;
	        call ioa_$rsnnl ("The ^[ring^;stack^] number is not octal.", error_msg, ignore, (substr(test_name, 1,5) = "ring_")); 
	        return;
	   end;
	   else do;
	        if stack_idx < 0 | stack_idx > 7 then do;
		   call ioa_$rsnnl ("The ^[ring^;stack^] specified does not exist.", error_msg, ignore, (substr(test_name, 1,5) = "ring_")); 
		   return;
	        end;
	   end;
						/* appears to be a valid stack_ring so return the pointer to it */
	   if amu_info.early_dump & stack_idx >0 then do;
	        code = error_table_$seg_not_found;
	        return;
	   end;
	   temp_ptr = baseptr (hardcore_info.segno.stack_0 + stack_idx);
	   return;
        end;
    end;

    call amu_$hardcore_info_set_cur_ptrs (amu_info_ptr, hardcore_cur_ptr);
    call amu_$slt_search_seg_ptr (hardcore_cur.sltp, hardcore_cur.sltntp, test_name, temp_ptr, code);
    if code ^= 0 then do;
       if amu_info.early_dump then 
          call amu_$slt_search_init_seg_ptr (hardcore_cur.sltp, hardcore_cur.sltntp, test_name, temp_ptr, code);
	end;

    if code ^= 0 then do;  /* not a hardcore segment name */
dcl segno fixed bin;
       if amu_info.type = SAVED_PROC_TYPE then do;
	call amu_$definition_get_prn (amu_info_ptr, test_name, temp_ptr, code);
						/* see if test_name is a temp ptr */
	if code = 0 then do;
	     if temp_ptr = null then do;
		va.ecode = amu_et_$invalid_seq;
		call ioa_$rsnnl ("Temporary ptr specified is null. ^a", va.error_msg, ignore, test_name);
		return;
	     end;
	     else do;
		call amu_$dp_name_to_segno (amu_info_ptr, test_name, segno, code);
		if code = 0 then temp_ptr = baseptr(segno);
	     end;
	end;
       end;
       else if amu_info.type = FDUMP_TYPE | amu_info.type = FDUMP_PROCESS_TYPE then do;
          end;
       end;
  

end check_name;
%page;
finish_va_resolution:  proc(va_arg_ptr);

dcl  va_arg_ptr ptr;
dcl  1 va based(va_arg_ptr) like va_args;

dcl  argl fixed bin (21);
dcl  argp ptr;
dcl  arg char (argl) based (argp);

    if bad_segno(va.segno, va.ecode) then do;
       call ssu_$arg_ptr (sci_ptr, va.va_idx, argp, argl);
       va.error_msg = arg;
       goto END_FINISH_VA;
       end;

    if va.valid_modifier & ^(va.modifier_before_indirect) then do;   
       va.offset = va.offset + va.offset_modifier;
       if va.offset < 0 then do;
	va.ecode = amu_et_$negative_offset;
	va.error_msg = va.va_string;
	goto END_FINISH_VA;
	end;
       end;

/*  RIGHT HERE must check the final segno|offset to see if its in the fdump */

END_FINISH_VA:

    return;
end finish_va_resolution;
%page;
get_indirect_ptr:
     proc (data_ptr, seg, word, number, code);

/* Given a data_ptr to put it, returns the address area specified by seg, word, number.

   data_ptr      pointer to put data at (input)
   seg	       segment number (input)
   word          word offset (input)
   number        range (input)
   code          error code (output)
*/

/* parameters */

dcl code				fixed bin(35);
dcl data_ptr			ptr;
dcl seg				fixed bin;
dcl (word, number)			fixed bin (18);

/* automatic */

dcl index_changed			bit(1);

    index_changed = "0"b;
    code = 0;
    if ^amu_$return_val_per_process (amu_info_ptr, seg) then do;
       index_changed = "1"b;
       call amu_$fdump_mpt_temp_change_idx (amu_info_ptr, lbound (fdump_process_table.array, 1));
       end;

    call amu_$do_translation (amu_info_ptr, seg, data_ptr, word, number, code);

    if index_changed then do;
       call amu_$fdump_mpt_revert_idx (amu_info_ptr);
       index_changed = "0"b;
       end;

end get_indirect_ptr;
%page;
get_va:
     proc (pointer_arg, va_arg_ptr, error_found, indirect_specified);

/* parameters */

dcl error_found bit(1);
dcl indirect_specified bit(1);
dcl pointer_arg char(*);
dcl pointer_arg_length fixed bin;
dcl  va_arg_ptr ptr;

/* based */

dcl  1 va based(va_arg_ptr) like va_args;

/* automatic */

dcl code				fixed bin(35);
dcl ignore			fixed bin;
dcl (ind_pos, offset_pos)		fixed bin;
dcl offset			fixed bin (18);
dcl offset_modifier			char(32);
dcl offset_name			char (65);
dcl mod_pos			fixed bin;
dcl seg_name			char (32);
dcl segno				fixed bin;
dcl segno_given			bit(1);
dcl temp_ptr			ptr;
dcl temp_ptr_given			bit(1);
dcl two_parts			bit(1);
dcl va_arg			char(256) var;

/* First check to see if the assumed VA is in two parts (A$B or A|B forms) */

    code = 0;
    error_found, two_parts, indirect_specified, temp_ptr_given, segno_given  = "0"b;
    pointer_arg_length = length(pointer_arg);
    ind_pos = index(pointer_arg, ",*");        /*  is this indirect? */
    mod_pos = search (pointer_arg, "+-");      /* do we have a offset modifier */
    offset_pos = search (pointer_arg, "$|");   /* is arg in two parts? */
    two_parts = (offset_pos > 0);
    indirect_specified = (ind_pos > 0);

    va_arg = pointer_arg;
    if mod_pos > 0 then do;
       if mod_pos < ind_pos then do;  /* have case of form A|B+30,*   */
          offset_modifier = substr(pointer_arg, mod_pos, (pointer_arg_length - (mod_pos + 1)));
	va_arg = substr(pointer_arg, 1, mod_pos - 1);
	va.modifier_before_indirect = "1"b;
	end;
       else do;    /* have case A|B,*+30 or A|B+30  */
          offset_modifier = substr(pointer_arg, mod_pos);
	if indirect_specified then 
	   va_arg = substr(pointer_arg, 1, ind_pos - 1);   /* case A|B,*+10  */
	else va_arg = substr(pointer_arg, 1, mod_pos - 1); /* case A|B+10  */
	end;

       /* lets verify the modifier */

       va.offset_modifier = cv_oct_check_ (offset_modifier, code);
       if code = 0 then va.valid_modifier = "1"b;
       else do;
	va.offset_modifier = 0;
	error_found = "1"b;
	va.ecode = amu_et_$not_octal_off_mod;
	va.error_msg = offset_modifier; 
	goto END_GET_VA;
	end;
       end;   /* end if mod_pos > 0 */

    else if indirect_specified then
       va_arg = substr(pointer_arg, 1, ind_pos - 1); /*    case A|B,*      */
    
    if two_parts then do;
       seg_name = substr(va_arg, 1, offset_pos - 1);
       offset_name = substr(va_arg, (offset_pos + 1));
       end;
    else do;
       if indirect_specified then seg_name = substr(va_arg, 1, ind_pos - 1);
       else seg_name = va_arg;
       end;
  
    /* is seg_name a name, number or temporary ptr? */

    va.offset = 0;
    va.segno = 0;
    code = 0;
    segno = cv_oct_check_ (seg_name, code);   /* check to see if its a name or number */
    if code = 0 then do;                          /* yep, it's octal */
       segno_given = "1"b;
       va.segno = segno;
       va.valid_va = "1"b;
       end;

    else do;			   /* not an octal number */
       if verify(rtrim(seg_name), NUMBERS) = 0 then do;
	error_found = "1"b;
	va.ecode = amu_et_$not_octal_segno;
	va.error_msg = rtrim(seg_name);
	goto END_GET_VA;
	end;

       code = 0;
       call check_name(seg_name, temp_ptr, va.error_msg, code); 
       if va.error_msg ^= "" then do;	/* invalid stack_N or ring_N name */
          error_found = "1"b;
	if va.ecode = amu_et_$invalid_seq then goto END_GET_VA;
	va.ecode = amu_et_$not_octal_segno;
	va.error_msg = va.error_msg || " " || rtrim(seg_name);
	goto END_GET_VA;
	end;
       else do;
	if code = 0  then do;	/* yep, it's a name */
             va.segno = fixed (baseno (temp_ptr), 17);
	   va.valid_va = "1"b;
	   end;

          else do;		/* not a segment name */
			/* check to see if it's a temporary pointer */
	   code = 0;
	   call amu_$definition_get_prn (amu_info_ptr, seg_name, temp_ptr, code);
             if code = 0 then do;    /* yep, it's a temporary pointer */
	      if temp_ptr = null then do;  /* but it's null so quit here */
	         error_found = "1"b;
	         va.ecode = amu_et_$invalid_seq;
	         call ioa_$rsnnl ("Temporary ptr specified is null. ^a", va.error_msg, ignore, seg_name); 
	         goto END_GET_VA;
	         end;
	      va.segno = fixed (baseno (temp_ptr), 17);
	      va.offset = fixed (rel (temp_ptr), 18);
	      va.valid_va = "1"b;
	      temp_ptr_given = "1"b;
	      end;

	   else do; /* not a temporatry pointer either */

	      if two_parts then;		/* segno|offset may be valid continue checking		     */
	      else goto END_GET_VA;             /* could be an arg not part of the VA construct, so just skip it */
	      end;
	   end;
	end;
       end;

    if two_parts then do;     /* given an offset too */
       offset = cv_oct_check_ (offset_name, code);
       if code = 0 then do;
          va.offset = va.offset + offset;
	va.valid_va = "1"b;	
	end;
       else do;		          /* check to see if offset is a name */
	if verify(rtrim(offset_name), NUMBERS) = 0 then do;
	   error_found = "1"b;
	   va.ecode = amu_et_$not_octal_offset;
	   va.error_msg = offset_name;
	   goto END_GET_VA;
	   end;

          if segno_given then do;  /* invalid case of segno|name */
	   va.ecode = amu_et_$invalid_seq;
	   va.error_msg = "A virtual address number|name is not valid.";
	   error_found = "1"b;
	   goto END_GET_VA;
	   end;
  
	else do;   /* both seg and offset are names, check to see if it's a symbol */
	   if temp_ptr_given then do;
	      va.offset =  va.offset + offset;
	      va.valid_va = "1"b;	
	      end;
	   else do;
	      temp_ptr = amu_$definition_ptr (amu_info_ptr, seg_name, offset_name, code);
                if code = 0 then do;     /* a symbol */
	         va.segno = fixed (baseno (temp_ptr), 17);
	         va.offset = fixed (rel (temp_ptr), 18);
	         va.valid_va = "1"b;	
	         end;
	      else do;
	         error_found = "1"b;
	         va.ecode = amu_et_$invalid_seq;
	         va.error_msg = "This is not a valid symbol." || " " || arg;
	         goto END_GET_VA;
	         end;
	      end;
	   end;
	end;
       end;

END_GET_VA:

    return;
end get_va;
%page;
parse_arg:  proc(p_va_args, doing, arg, nargs, arg_position);
	  
/* parse_arg

   p_va_args           pointer to the va_args structure(input)
		   parse_arg fills this in.
   doing		   where we are in the parsing sequnce(input)
		   parse_arg resets this.
   arg		   argument to be parsed (input)
   nargs		   total args in the list (input)
   arg_position	   the arg list index (input)
		   parse_arg sets the index to the next arg position to examine
  
   The virtual address, offset modifer and range are non-positional arguments in the arg list. A virtual
   address must be specified. A modifier or range are optional. A virtual address must be specified
   before an offset modifier can be specified on the arg list.  An offset modifier must be specified 
   before a range can be specified.  This is similar to how the dump_segment command parses its args.
*/

/* parameters */

dcl arg				char (*);
dcl arg_position			fixed bin;
dcl doing				fixed bin;
dcl nargs				fixed bin;
dcl p_va_args			ptr;

/* automatic */

dcl code				fixed bin(35);
dcl error_found			bit(1);
dcl ignore			fixed bin;
dcl indirection_specified		bit(1);
dcl offset			fixed bin(18);
    
    code = 0;
    error_found, indirection_specified = "0"b;

    if doing = GETTING_VA then do;
       if arg = "-prs" then do;
	  doing = DONE;
	  goto RETURN_PARSE_ARG;
       end;
       else if substr(arg,1,1) = "-" then goto RETURN_PARSE_ARG;   /* assume it's a ctl arg */
       va.va_string = arg;
       call get_va(arg, p_va_args, error_found, indirection_specified);
       if error_found then do;
	doing = DONE; /* quit processing */
	goto RETURN_PARSE_ARG;
	end;
       if va.valid_va then do;
          if indirection_specified then call resolve_indirection (p_va_args, error_found);
          if error_found then do;
   	   doing = DONE; /* quit processing */
	   goto RETURN_PARSE_ARG;
	   end;
	if va.valid_modifier then doing = GETTING_RANGE;
	else doing = GETTING_MODIFIER;
	va.va_idx = arg_position;
	end;
       end;   /* if GETTING_VA */

    else if doing = GETTING_MODIFIER then do;
       if substr(arg,1,1) = "+" then do;  /* assume its a offset modifier */
          if va.valid_range then do;
	   va.error_msg = arg;
             /* offset modifier has to specified before a range... */
	   if va.valid_modifier then va.ecode = amu_et_$specified_modifier;
	   else va.ecode = amu_et_$modifier_before_range;
	   goto RETURN_PARSE_ARG;
	   end;

          offset =  cv_oct_check_ (arg, code);
	if code = 0 then do;
	   va.va_string = va.va_string || " " || arg;
	   va.offset_modifier = offset;
	   va.valid_modifier = "1"b;;
	   va.mod_idx = arg_position;	   
	   doing = GETTING_RANGE;
	   goto RETURN_PARSE_ARG;
	   end;
          else do;  /* invalid modifier */
	   doing = DONE; /* quit processing */
	   va.ecode = amu_et_$not_octal_off_mod;
	   va.error_msg = arg; 
	   goto RETURN_PARSE_ARG;
	   end;
	end;
       else if substr(arg,1,1) = "-" then do;  /* assume its a offset modifier */
          offset =  cv_oct_check_ (arg, code);
	if code = 0 then do;
	   if va.valid_range then do;
	      va.error_msg = arg;
	      /* but modifiers have to specified before a range... */
	      if va.valid_modifier then va.ecode = amu_et_$specified_modifier;
	      else va.ecode = amu_et_$modifier_before_range;
	      goto RETURN_PARSE_ARG;
	      end;

	   va.offset_modifier = offset;
	   va.valid_modifier = "1"b;;
	   va.va_string = va.va_string || " " || arg;
	   va.mod_idx = arg_position;	   
	   doing = GETTING_RANGE;
	   goto RETURN_PARSE_ARG;
	   end;
          else do;  /* Could be a control argument, so skip */
	   goto RETURN_PARSE_ARG;
	   end;
	end;
       else do;  /* no + or -, could be a range */
          doing = GETTING_RANGE;
	arg_position = arg_position - 1;
	goto RETURN_PARSE_ARG;
	end;
       end;     /* end if getting_modifier */
  
    else if doing = GETTING_RANGE then do;
       if substr(arg,1,1) = "+"  then do;  /* assume its a offset modifier */
	doing = DONE; /* quit processing */
          if va.valid_modifier then 
	   /* could only get here if modifier was part of the VA eg. 234|2000+20 */
	   va.ecode = amu_et_$specified_modifier;
	else   /* this should never happen, but it's here for completeness. */
	   va.ecode = amu_et_$modifier_before_range;
	va.error_msg = arg;
	goto RETURN_PARSE_ARG;
	end; /* if "+" */

       else if substr(arg,1,1) = "-" then do;  /* could be a ctl arg, or error offset modifier */
          if verify(arg, NUMBERS) = 0 then do;  /* looks like a offset modifier */
	   doing = DONE; /* quit processing */
	   if va.valid_modifier then 
	     /* could only get here if modifier was part of the VA eg. 234|2000+20 */
	     va.ecode = amu_et_$specified_modifier;
	   else   /* modifier has to be specified before a range... */
	      va.ecode = amu_et_$modifier_before_range;
             va.error_msg = arg;
	   end;  /* if verify */
          goto RETURN_PARSE_ARG;
	end;  /* if "-"  */
       else do;   /* probably a range */
	if forsw then do;
	     forsw = "0"b;
	     offset = cv_dec_check_ (arg, code);
	     if code ^= 0 then do;
		call ioa_$rsnnl ("Decimal integer not supplied with ""-for"": ^a", va.error_msg, ignore, arg);
		error_found = "1"b;
		goto RETURN_PARSE_ARG;
	     end;
	     else goto fill_va;
	end;
          offset =  cv_oct_check_ (arg, code);
	if code = 0 then do;        /* assume its a range */
fill_va:	     va.range = offset;
	   va.range_idx = arg_position;
	   va.valid_range = "1"b;
	   va.va_string = va.va_string || " " || arg;
	   if arg_position < nargs then
	      doing = GETTING_MODIFIER;    /* for error checking purposes. */
	   else doing = DONE;	     /* completely done parsing the VA args */
	   goto RETURN_PARSE_ARG;
	   end;
          else do; 
             if verify(arg, NUMBERS) = 0 then do;
	      va.ecode = amu_et_$not_octal_range;
	      va.error_msg =  arg;  
	      error_found = "1"b;
	      end;
	   else do; 
	      if arg = ",*" then do;
	         va.ecode = amu_et_$error_indirect;
	         call ioa_$rsnnl ("^/^-For example: ^a^a", va.error_msg, ignore, va.va_string, arg);
	         error_found = "1"b;
	         end;
	      else;   /* Could be a control argument, so skip */
	      end;
	   goto RETURN_PARSE_ARG;
	   end;
	end;
       end;   /* if getting_range */

RETURN_PARSE_ARG:
  
    arg_position = arg_position + 1;

    return;
end parse_arg;
%page;
resolve_indirection:      proc (va_arg_ptr, error_found);

/* This procedure resolves indirection of the specified virtual address.

   va_arg_ptr     pointer to the va_args structure (input)
   error_found    set to on if any errors are found (output)

*/

/* parameters */

dcl error_found			bit(1);
dcl va_arg_ptr			ptr;

/* based */

dcl  1 va				based(va_arg_ptr) like va_args;

/* automatic */

dcl data_buf_ptr			ptr;
dcl indirect_ptr			ptr;
dcl offset			fixed bin(18);


    error_found = "0"b;
    offset = va.offset;
    if va.modifier_before_indirect then do;
       offset = va.offset + va.offset_modifier;
       if offset < 0 then do;
          error_found = "1"b;
	va.ecode = amu_et_$negative_offset;
	va.error_msg = va.va_string;
	goto END_RESOLVE;
	end;
       end;
  
    if bad_segno(va.segno, va.ecode) then do;
       error_found = "1"b;
       va.error_msg = va.va_string;
       goto END_RESOLVE;
       end;

    data_buf_ptr = addr(indirect_ptr);     

    call get_indirect_ptr (data_buf_ptr, (va.segno), offset, (2), va.ecode);
    if va.ecode ^= 0 then do;
       error_found = "1"b;
       va.error_msg = va.va_string;
       goto END_RESOLVE;
       end;

    if data_buf_ptr -> its.its_mod = ITS_MODIFIER then do;
       va.segno = fixed (baseno (indirect_ptr), 17);
       va.offset = fixed (rel (indirect_ptr), 18);

       if bad_segno(va.segno, va.ecode) then do;
	error_found = "1"b;
	va.error_msg = va.va_string;
	goto END_RESOLVE;
	end;
       end;
    else do;  /* not ITS pointer */
       /* ignore for now */
       error_found = "1"b;
       va.error_msg = va.va_string;
       va.ecode = amu_et_$not_its_ptr;
       goto END_RESOLVE;
       end;

END_RESOLVE:
    return;	
end resolve_indirection;
%page;
%include amu_hardcore_info;
%page;
%include amu_fdump_info;
%page;
%include amu_info;
%page;
%include its;
%page;
%include azm_va_args;


     end amu_parse_ptr_args_;
