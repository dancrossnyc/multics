/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */
amu_kst_util_: proc ();

/* format: style4,delnl,insnl,ifthenstmt,indnoniterend,ifthendo,ifthen,^thendo */

/* *	Utility procedure for AMU, used to manipulate a KST in the local
   *	address space. Algorithms cribbed from kstsrch.pl1, get_kstep.pl1.
   *	Because the copy of the KST we are searching may not begin at the
   *	beginning of a segment, much hair must be gone through to get the
   *	right values of pointers and offsets; this is the reason for the
   *	high density of addrels in the code */

/* 03/12/80 W. Olin Sibert */
/* Modified 01/12/85 by B. Braun to add entry $expand_uid_path.

/* parameters */

dcl  (
     P_expand_path char(*),
     P_kstp pointer,				/* pointer to KST or copy thereof */
     P_uid bit (36) aligned,
     P_kste_offset fixed bin (18),			/* offset of interesting KST entry */
     P_uid_path (16) bit (36) aligned,
     P_segno fixed bin,
     P_code fixed bin (35)
     ) parameter;

/* automatic */

dcl code				fixed bin (35);
dcl count				fixed bin;
dcl depth				fixed bin;
dcl dirname			char(168);
dcl  dlen				fixed bin;
dcl ename				char(32);
dcl hash_idx			fixed bin;
dcl i				fixed bin;
dcl idx				fixed bin;
dcl jdx				fixed bin;
dcl kste_offset			fixed bin(18);
dcl par_kste_offset			fixed bin (18);
dcl par_segno			fixed bin;
dcl segno				fixed bin;
dcl tmr				bit(1);
dcl  1 tsdw			like sdw aligned;
dcl uid				bit (36) aligned;
dcl uid_path (16)			bit (36) aligned;
dcl (rzdp, rzdsp) ptr;

/* internal static */

dcl ROOT_UID                            bit(36) aligned init("777777777777"b3) int static options(constant);

/* external entries */

dcl amu_$kst_util_uid_to_kstep	entry (ptr, bit(36) aligned, fixed bin (18), fixed bin(35));
dcl get_temp_segment_		entry (char(*), ptr, fixed bin(35));
dcl phcs_$initiate			entry (char (*), char (*), char (*), fixed bin, fixed bin, ptr, fixed bin (35));
dcl phcs_$ring_0_peek		entry (ptr, ptr, fixed bin);
dcl phcs_$terminate_noname		entry (ptr, fixed bin (35));
dcl release_temp_segment_		entry (char(*), ptr, fixed bin(35));
dcl ring0_get_$segptr		entry (char (*), char (*), ptr, fixed bin (35));

/* external static */

dcl (
     error_table_$noentry,
     error_table_$invalidsegno,
     error_table_$action_not_performed
     )				fixed bin (35) external static;

/* builtins */

dcl (addr, addrel, baseno, binary, dimension, 
     fixed, hbound, lbound, mod, null, 
     pointer, ptr, rel, rtrim, unspec)		builtin;

dcl cleanup			condition;
%page;
/*****************************************************************************/

amu_kst_util_$expand_uid_path:   entry (P_kstp, P_uid_path, P_expand_path, P_code);

/* Determines the pathname, given a uids for the path.
     P_kstp           pointer to the kst (input)
     P_uid_path       array of uids for a pathname. This can be obtained via a
		  call to kst_util_$uid_to_uid_path (input)
     P_expand_path    The pathname (output)
     P_code	  Standard error code (output)
*/

    kstp = P_kstp;
    uid_path = P_uid_path;
    P_expand_path, dirname, ename = "";			/* start with null names */
    tmr = "0"b;
    P_code, code = 0;
    rzdsp, rzdp, dp = null();
    on cleanup begin;
       if dp ^= null() then call release_temp_segment_ ("amu_kst_util_", dp, (0));
       end;

    call get_temp_segment_ ("amu_kst_util_", dp, code);
    call ring0_get_$segptr ("", "dseg", rzdsp, code); /* get ptr to our dseg */

    /* Have to special case the root */

    if (uid_path(1) = ROOT_UID) & (uid_path(2) = ""b) then do;
       /* This is the ROOT segment */
       dirname = ">";
       goto RET;
       end;

    /* now go from the root+1 and form the complete pathname of target entry */

    do i = 2 to  hbound(uid_path, 1) while (uid_path (i) ^= ""b);
       if dirname = "" then    /* looking at the root, this is what we start with. */
          call phcs_$initiate (">", ename, "", 0, 0, rzdp, code);
       else call phcs_$initiate (dirname, ename, "", 0, 0, rzdp, code);
       if rzdp = null then go to RET1;		/* if some problem, get out of here */
       call phcs_$ring_0_peek (rzdp, dp, 1);	/* cause seg fault */
FTSDW:
       call phcs_$ring_0_peek (addr (rzdsp -> sdwa (fixed (baseno (rzdp)))), addr (tsdw), 2);
       if ^tsdw.df then goto FTSDW;		/* we must be faulted */
       dlen = fixed (tsdw.bound, 15) * 16 + 16;
       call phcs_$ring_0_peek (rzdp, dp, dlen);	/* copy dir seg out of ring 0 */
       tmr = "0"b;
       do ep = ptr (dp, dp -> dir.entryfrp) repeat ptr (dp, ep -> entry.efrp) while (dp ^= ep & tmr = "0"b);
	if ep -> entry.uid = uid_path(i) then do;	/* found right one */
	   tmr = "1"b;			/* set terminate cond */
	   dirname = rtrim (dirname) || ">" || addr (entry.primary_name) -> names.name;
	   call phcs_$terminate_noname (rzdp, code);
					/* terminate this ref */
	   end;
	end;
       if ^tmr then do;			/* didn't find name */
RET1:
          dirname = rtrim (dirname) || ">" || "CANNOT-COMPLETE-PATH";
          go to RET;
	end;
       end;    /* end of uid_path loop */

     code = 0;
RET:
     if dp ^= null() then call release_temp_segment_ ("amu_kst_util_", dp, (0));
     P_code = code;
     P_expand_path = dirname;              /* copy pathname */
     return;
%page;
/*****************************************************************************/

amu_kst_util_$uid_to_kstep:
     entry (P_kstp, P_uid, P_kste_offset, P_code);

/* *	This entry returns the offset of the KSTE with the specified UID,
   *	or returns error_table_$noentry if it's not there */

	kstp = P_kstp;
	uid = P_uid;

	if uid = ""b then do;			/* can't search for zero UID */
	     P_kste_offset = 0;
	     code = error_table_$action_not_performed;
	     goto MAIN_RETURN;
	     end;

	hash_idx = mod (binary (uid, 36), dimension (kst.uid_hash_bucket, 1));

	count = 0;				/* make sure we don't loop too long */
	kste_offset = binary (kst.uid_hash_bucket (hash_idx), 18);
	kstep = addrel (kstp, kste_offset);
	do kstep = addrel (kstp, kste_offset) repeat (addrel(kstp,kste.fp))
	     while (kste.fp ^= "0"b);			/* search until we find one */

	     if kste.uid = ""b then do;		/* BAD */
		P_kste_offset = 0;
		code = error_table_$action_not_performed;
		goto MAIN_RETURN;
		end;

	     if kste.uid = uid then do;		/* got it */
		P_kste_offset = fixed(rel(kstep),18) - fixed(rel(kstp),18);
		code = 0;
		goto MAIN_RETURN;
		end;

	     count = count + 1;
	     if count > 4096 then do;
		P_kste_offset = 0;
		code = error_table_$action_not_performed;
		goto MAIN_RETURN;
		end;
	end;					/* of search loop */

/* OK try the hard way */
	do i = lbound(kst_entry,1) to hbound(kst_entry,1);
	     if P_uid = kst_entry (i).uid then do;
		kstep = addr(kst_entry (i));
		P_kste_offset = fixed(rel(kstep),18) - fixed(rel(kstp),18);
		code = 0;
		goto MAIN_RETURN;
	     end;
	end;
	P_kste_offset = 0;
	code = error_table_$noentry;
	goto MAIN_RETURN;				/* end of code for $uid_to_kstep entry */

%page;
/*****************************************************************************/

amu_kst_util_$uid_to_uid_path:
     entry (P_kstp, P_uid, P_uid_path, P_code);

/* *	This entry returns the UID pathname of the parent of the segment
   *	identified by P_uid, of a non-zero error code. The UID path is derived
   *	by chasing up through the KST, using the branch pointer in a KSTE to
   *	get the segment number of its parent. */

	kstp = P_kstp;
	uid = P_uid;

	call amu_$kst_util_uid_to_kstep (kstp, uid, kste_offset, P_code);
						/* first, find it */
	if P_code ^= 0 then return;			/* sorry, nope */

	goto UID_PATH_COMMON;			/* otherwise join common code */

/*****************************************************************************/

amu_kst_util_$segno_to_uid_path:
     entry (P_kstp, P_segno, P_uid_path, P_code);

	kstp = P_kstp;
	segno = P_segno;

	kste_offset = validate_segno (segno);		/* see if it's OK */
	if code ^= 0 then goto MAIN_RETURN;		/* no good */

	goto UID_PATH_COMMON;

/*****************************************************************************/

amu_kst_util_$segno_to_uid:
	entry (P_kstp,P_segno,P_uid,P_code);

	kstp = P_kstp;
	segno = P_segno;
	kste_offset = validate_segno (segno);		/* see if it's OK */
	if code ^= 0 then goto MAIN_RETURN;		/* no good */
	kstep = addrel(kstp,kste_offset);
	P_uid = kste.uid;
	goto MAIN_RETURN;
	

	
UID_PATH_COMMON:					/* Now, try to find all our parents */
	depth = 1;
	kstep = addrel (kstp, kste_offset);		/* point to the original KSTE */
	uid_path (depth) = kste.uid;
	do while (kste.uid ^= "777777777777"b3);	/* loop upwards till we find the ROOT */
	     if unspec (kste.entryp) = ""b then do;	/* can't happen, of course */
		code = error_table_$action_not_performed;
		goto MAIN_RETURN;
		end;

	     par_segno = binary (baseno (kste.entryp));
	     par_kste_offset = validate_segno (par_segno);
	     if code ^= 0 then do;			/* par_segno is invalid?? */
		code = error_table_$action_not_performed;
		goto MAIN_RETURN;
		end;

	     kstep = addrel (kstp, par_kste_offset);	/* find our parent */
	     depth = depth + 1;			/* and record his UID */
	     if depth > hbound (uid_path, 1) then do;	/* too many???? */
		code = error_table_$action_not_performed;
		goto MAIN_RETURN;
		end;

	     uid_path (depth) = kste.uid;		/* this is parent UID -- continues until we hit the root */
	end;

	jdx = 1;					/* now that we have as many UIDs as we're gonna get, */
	do idx = depth to 1 by -1;			/* let's put them in our return argument */
	     P_uid_path (jdx) = uid_path (idx);
	     jdx = jdx + 1;
	end;

	do idx = jdx to hbound (P_uid_path, 1);		/* and put zeros in the rest */
	     P_uid_path (idx) = ""b;
	end;

	code = 0;					/* all done for this */
	goto MAIN_RETURN;


MAIN_RETURN:					/* general-purpose exit */
	P_code = code;				/* copy the error code */
	return;					/* and return */

%page;
/*****************************************************************************/

validate_segno:
     proc (P_segno) returns (fixed bin (18));

/* *	This procedure verifies that the segment number supplied is a valid
   *	one according to the KST, returning the KSTE offset if it is OK, and
   *	setting code and returning zero if it is not. */

dcl  P_segno fixed bin parameter;

dcl  offset fixed bin (18);

	if P_segno < kst.lowseg | P_segno > kst.highseg then do;
INVALIDSEGNO:
	     code = error_table_$invalidsegno;
	     return (0);
	     end;

	offset = binary (rel (addr (pointer (kstp, 0) -> kst.kst_entry (P_segno))), 18);
						/* find the right KSTE */

	if unspec (addrel (kstp, offset) -> kste.entryp) = ""b then goto INVALIDSEGNO;
						/* no branch ptr means no segno */

	code = 0;					/* it's OK */
	return (offset);

     end validate_segno;
%page;%include dir_entry;
%page;%include dir_header;
%page;%include dir_name;
%page;%include kst;
%page;%include sdw;

     end;						/* amu_kst_util_ */
