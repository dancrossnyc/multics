/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   *********************************************************** */
amu_find_system_dump_:
     procedure ();

/* amu_find_system_dump_ -- wrapper for search_paths_ for FDUMPS and PDIRS 
   BIM 0783 
   Modified for pdir use by B. Braun 08/10/84
   Modified by BLB 11/08/84 to handle starnames better and absolute path + full component name (eg. >dumps>110184.2400.0.20)
*/


dcl Dump_name			char (*);
dcl Dump_info_ptr			pointer;
dcl Code				fixed bin (35);


/*   Dump_name    (input)
                  For FDUMPS: This can be an ERF number, or a pathname ending with an erf number,
	        or a pathname of the first segment of a dump (rel or abs) 
	        For PDIRS:  This can be the pdir name (with or without the suffix "pdir", or an absolute or relative
	        pathname ending with the pdir name.
    Dump_info_ptr (input)
                  pointer to system_dump_info structure that will be filled in.
    Code          (output)
	        error_table_$noentry or 0. For ambiguous requests, this program signals sub_err_. 
                  Catch the condition if you disapprove.
*/


/* External Entires */

dcl check_star_name_$entry		entry (character (*), fixed binary (35));
dcl expand_pathname_		entry (character (*), character (*), character (*), fixed binary (35));
dcl expand_pathname_$add_suffix	entry (char(*), char(*), char(*), char(*), fixed bin(35));
dcl get_system_free_area_		entry () returns (ptr);
dcl hcs_$star_			entry (char (*), char (*), fixed bin (2), ptr, fixed bin, ptr, ptr, fixed bin (35));
dcl hcs_$status_minf		entry (char (*), char (*), fixed bin (1), fixed bin (2), fixed bin (24), 
				fixed bin (35));
dcl ioa_$rsnnl			entry () options (variable);
dcl search_paths_$get		entry (char(*), bit(36), char(*), ptr, ptr, fixed bin, ptr,
				     fixed bin(35));
dcl sub_err_			entry () options (variable);

/* External Static */

dcl error_table_$nomatch		fixed bin (35) ext static;
dcl error_table_$unimplemented_version	fixed bin (35) ext static;
dcl error_table_$noentry		fixed bin (35) ext static;

/* Internal Static */

dcl DUMP_LIST			char (5) init ("dumps") internal static options (constant);
dcl PDIR_SUFFIX			char (4) init ("pdir") internal static options (constant);

/* Automatic */

dcl 1 match_star(3),
      2 name			char(32),
      2 pdir_sw			bit(1);
dcl search_dir_name			char (168);
dcl search_entryname		char (32);
dcl system_area_ptr			ptr;
dcl want_a_pdir			bit(1);
dcl what_to_list			fixed bin;

/* Conditions */

dcl cleanup			condition;

/* Based */

dcl system_area			area based (system_area_ptr);
     
/* Builtins */

dcl (after, before, 
     hbound, null,
     reverse, rtrim,
     search, sum)			builtin;

/*

 The strategy here is somewhat complicated. Analysis of the name
 given proceeds as follows:

   if there no <> in the pathname, then get a complete list of conventionally
   named dumps. apply the search technique described below to each
   directory's worth of dumps at a time.

   if there is <> in the pathname, then use expand_pathname_ to strip out
   directory, and use the search technique below to look for the entryname.

SEARCH TECHNIQUE:

For FDUMPS:
   if there are "."'s in the entryname, then demand that it is the complete
   entryname of segment zero of the dump. The name must match the entryname
   in the directory completely.

   If there are no "."'s, then the entryname is assumed to be a dump number.
   If there is only one segment with a name of the form ??????.????.*.NAME
   (the conventional form), then the search finds it. If there are more than
   one, sub_err_ is signalled. Caller can catch.

For PDIRS:
   if there are "."'s in the entryname, then demand that it is the complete
   entryname of the pdir directory. The name must match the entryname
   in the directory completely. The suffix "pdir" is assumed if not given.

   If there are no "."'s, then the entryname is assumed to be a NAME
   If there is only one segment with a name of the form NAME.pdir
   (the conventional form), then the search finds it. If there are more than
   one, sub_err_ is signalled. Caller can catch.
*/
%page;
/*****************************************************************************/

amu_find_system_dump_$pdir:
     entry (Dump_name, Dump_info_ptr, Code);

     want_a_pdir = "1"b;
     what_to_list = LIST_PDIRS;
     goto COMMON_FIND;

/*****************************************************************************/

amu_find_system_dump_$fdump:
     entry (Dump_name, Dump_info_ptr, Code);

     want_a_pdir = "0"b;
     what_to_list = LIST_FDUMPS;

COMMON_FIND:
     
    system_dump_info_ptr = Dump_info_ptr;
    if system_dump_info.version ^= SYSTEM_DUMP_INFO_VERSION_1 then
       call sub_err_ (error_table_$unimplemented_version, "amu_find_system_dump_", ACTION_CANT_RESTART, null (), (0),
	            "Invalid version ^a in system_dump_info structure.", system_dump_info.version);

    call setup();
    system_dump_info.dump_dir_name, system_dump_info.dump_seg_prefix, system_dump_info.dump_name,
       system_dump_info.dump_entry_format = "";

    Code = 0;
    if search (Dump_name, "<>") > 0 then call FIND_GIVEN_PATHNAME ();
    else call FIND_GIVEN_SEARCHNAME();

return;

/*****************************************************************************/

amu_find_system_dump_$list:
     entry (Dump_list_select_name, Dump_list_version, List_what, Dump_list_area_ptr, Dump_list_ptr, Code);

dcl Dump_list_select_name		char (*); 	/* Input - see below */
dcl Dump_list_version		char (8) aligned;	/* Input - Caller expected list version */
dcl List_what			fixed bin;          /* Inout - list fdumps, pdirs or both */
dcl Dump_list_area_ptr		pointer;		/* Input - area to allocate list */
dcl Dump_list_ptr			pointer;		/* Output - the usual */

/***** Code is non-zero when there is a problem with the search name */

/*  If there are <> in the select name, then there is a particular dir */
/*  to list. if not, then we list all dumps. The entryname part of */
/*  the select name is tacked onto the usual ??????.????.*. */

    if Dump_list_version ^= SYSTEM_DUMP_LIST_VERSION_1 then
       call sub_err_ (error_table_$unimplemented_version, "amu_find_system_dump_$search", ACTION_CANT_RESTART,
            null (), (0), "Unsupported version ^a supplied in call to amu_find_system_dump_$list.", Dump_list_version);

    call setup();
    want_a_pdir = "0"b;
    if search (Dump_list_select_name, "<>") > 0  then do;
       if List_what = LIST_PDIRS then call expand_pathname_$add_suffix (Dump_list_select_name, PDIR_SUFFIX, 
                                           search_dir_name, search_entryname, Code);
       else call expand_pathname_ (Dump_list_select_name, search_dir_name, search_entryname, Code);
       if Code ^= 0 then return;
       call determine_search_name (search_entryname, List_what, match_star);
       call get_one_dir (search_dir_name, match_star, Dump_list_area_ptr, Dump_list_ptr, Code);
       end;

    else do;
       call determine_search_name(Dump_list_select_name, List_what, match_star);
       call LIST_ALL_DIRS (match_star, Dump_list_area_ptr, Dump_list_ptr, Code);
       end;

    if Code = error_table_$nomatch then Code = error_table_$noentry;
    return;

/*****************************************************************************/

FIND_GIVEN_PATHNAME:
     procedure;

/* The difficulty here is that it is hard to know how many pathnames */
/* there are going to be for the whole search list. The expensive, */
/* but simple approach is to allocate a structure for each dir in the */
/* search list, then merge them all together. */

dcl dump_dir_name			char (168);
dcl dump_entryname			char (32);
dcl code				fixed bin (35);

/**** Called when Dump_name needs expanding */

    code = 0;
    if want_a_pdir then call expand_pathname_$add_suffix (Dump_name, PDIR_SUFFIX, dump_dir_name, dump_entryname, code);
    else call expand_pathname_ (Dump_name, dump_dir_name, dump_entryname, code);

    if code ^= 0 then
BAD_NAME:
       call sub_err_ (code, "amu_find_system_dump_", ACTION_CANT_RESTART, null (), (0), "Invalid search name ^a.", Dump_name);

    call check_star_name_$entry (dump_entryname, code);
    if code > 2 then go to BAD_NAME;
    if code = 0 then do;				/* perhaps no list needed? */
       if search (dump_entryname, ".") ^= 0 then do;	/* Really simple, absolute */
	call hcs_$status_minf (dump_dir_name, dump_entryname, 1, (0), (0), code);
	Code = code;
          /* fill in structure */
	system_dump_info.dump_dir_name = dump_dir_name;
	if ^want_a_pdir then do;
	   system_dump_info.dump_name = reverse(before(reverse(dump_entryname), "."));
	   system_dump_info.dump_seg_prefix = reverse (after (after (reverse (dump_entryname), "."), "."));
             call ioa_$rsnnl ("^a.^^d.^a", system_dump_info.dump_entry_format, (0), 
             system_dump_info.dump_seg_prefix, system_dump_info.dump_name);
             end;
          else system_dump_info.dump_name = dump_entryname;

	return;
	end;
       end;

    call determine_search_name (dump_entryname, what_to_list, match_star);
    call get_one_dir (dump_dir_name, match_star, system_area_ptr, system_dump_list_ptr, code);
    if code ^= 0 then do;
       Code = code;
       return;
       end;

RETURN_INFO:
/**** At this point, there better be just one. However, for now, */
/**** we will return the first one, unless there is ambiguity. */

    if system_dump_list.n_dumps > 1 & system_dump_list.duplicate (1)
    then begin;
       dcl bad_dump_name	 char (32);
       dcl bad_dump_dir	 char (168);

       bad_dump_name = system_dump_list.minimal_entryname (1);
       bad_dump_dir = system_dump_list.dir_name (1);
       free system_dump_list in (system_area);
       call sub_err_ ((0), "amu_find_system_dump_", ACTION_CANT_RESTART, null (), (0),
	  "Multiple dumps numbered ^a in ^a.", bad_dump_name, bad_dump_dir);
       end;

    system_dump_info.dump_dir_name = system_dump_list.dir_name (1);
    if ^want_a_pdir then system_dump_info.dump_seg_prefix =
       reverse (after (after (reverse (system_dump_list.full_entryname (1)), "."), "."));
       system_dump_info.dump_name = system_dump_list.minimal_entryname (1);
    if ^want_a_pdir then call ioa_$rsnnl ("^a.^^d.^a", system_dump_info.dump_entry_format, (0), 
       system_dump_info.dump_seg_prefix, system_dump_info.dump_name);
    free system_dump_list in (system_area);
    return;


FIND_GIVEN_SEARCHNAME:
     entry ();

	dump_entryname = Dump_name;
          call determine_search_name (dump_entryname, what_to_list, match_star);
	call LIST_ALL_DIRS (match_star, system_area_ptr, system_dump_list_ptr, code);
	if code ^= 0
	then do;
		Code = code;
		return;
	     end;

	go to RETURN_INFO;

     end FIND_GIVEN_PATHNAME;

/*****************************************************************************/

LIST_ONE_DIR:
     procedure (dir_name, star_name, area_ptr, pdirs_wanted, a_info_ptr, code);

	declare code		 fixed bin (35);
	declare a_info_ptr		 pointer;
	declare area_ptr		 pointer;
	declare star_name		 char (*);	/* starname for dump name part of the problem */
	declare dir_name		 char (*);	/* pathname of dir to list */
dcl pdirs_wanted bit(1);
	declare dumpx		 fixed bin;
	declare an_area		 area based (area_ptr);
	declare name_index		 fixed bin;
	declare n_dead_links	 fixed bin;
	declare n_remove_dirs	 fixed bin;
	declare n_remove_segs	 fixed bin;
	declare type		 fixed bin (2);
	declare starx		 fixed bin;
	declare checkx		 fixed bin;

/* To save LIST_ALL_DIRS the trouble of accumulating results of */
/* status_minf calls when it is given a precise entryname, this */
/* code calls star on a non-star name. Sure, its expensive, */
/* but this program does not have to be cheap. */

    star_names_ptr, star_entry_ptr, system_dump_list_ptr = null();
    a_info_ptr = null();
    on cleanup begin;
       if star_names_ptr ^= null() then free star_names in (an_area);
       if star_entry_ptr ^= null() then free star_entries in (an_area);
       if system_dump_list_ptr ^= null() then free system_dump_list in (an_area);
       end;

    call hcs_$star_ (dir_name, star_name, star_ALL_ENTRIES, area_ptr, star_entry_count, star_entry_ptr,  
                     star_names_ptr, code);
    if code ^= 0 then return;

    /***** Remove null links from the list */

    n_dead_links = 0;
    n_remove_dirs = 0;
    n_remove_segs = 0;
    do dumpx = 1 to star_entry_count;
       name_index = star_entries (dumpx).nindex;
       if star_entries (dumpx).type = star_LINK then do;
          call hcs_$status_minf (dir_name, star_names (name_index), 1, type, (0), code);
	if code = error_table_$noentry then do;
	   star_names (name_index) = "-";
	   n_dead_links = n_dead_links + 1;
	   end;
	end;

       if pdirs_wanted then do;  /* not a directory,  remove any segment entries */
          if star_entries(dumpx).type = star_SEGMENT then do;
	   star_names (name_index) = "-";
	   n_remove_segs = n_remove_segs + 1;
	   end;
	end;
       else do; /* just fdumps */
          if star_entries(dumpx).type = star_DIRECTORY then do;
	   star_names (name_index) = "-";
	   n_remove_dirs = n_remove_dirs + 1;
	   end;
	end;
       end;

    code = 0;					/* residue from link checking */

    system_dump_list_n_dumps = star_entry_count - n_dead_links - n_remove_dirs - n_remove_segs;
    if system_dump_list_n_dumps = 0 then do;
       code = error_table_$nomatch;
       return;
       end;

    allocate system_dump_list in (an_area);
    system_dump_list.version = SYSTEM_DUMP_LIST_VERSION_1;

    name_index = 1;
    dumpx = 1;

    do starx = 1 to star_entry_count;
       name_index = star_entries (starx).nindex;
       if star_names (name_index) = "-"		/* null link, or no dirs or segs */
	then go to SKIP;

       system_dump_list.dir_name (dumpx) = dir_name;
       system_dump_list.new_directory (dumpx) = "0"b;
       system_dump_list.full_entryname (dumpx) = star_names (name_index);
       if pdirs_wanted then system_dump_list.minimal_entryname (dumpx) = system_dump_list.full_entryname (dumpx);
       else system_dump_list.minimal_entryname (dumpx) = reverse (before (reverse (star_names (name_index)), "."));

       system_dump_list.duplicate (dumpx) = "0"b;

       do checkx = 1 to dumpx - 1;
	if system_dump_list.minimal_entryname (checkx) = system_dump_list.minimal_entryname (dumpx) then
             system_dump_list.duplicate (checkx), system_dump_list.duplicate (dumpx) = "1"b;
	end;

       dumpx = dumpx + 1;
SKIP:
       end;

    free star_names in (an_area);
    free star_entries in (an_area);
    revert cleanup;

    a_info_ptr = system_dump_list_ptr;
    return;

    end LIST_ONE_DIR;

/*****************************************************************************/

LIST_ALL_DIRS:
     procedure (match_star, area_ptr, a_info_ptr, code);

/* parameters */

dcl area_ptr			pointer;
dcl a_info_ptr			pointer;
dcl code				fixed bin (35);
dcl 1 match_star(3),
      2 name			char(32),
      2 pdir_sw			bit(1);

/* local */

dcl an_area			area based (area_ptr);
dcl listing_dirname			char(168);
dcl (match_count, idx)		fixed bin;
dcl (sx, path_count)		fixed bin;
dcl temp_n_dumps			fixed bin;

%include sl_control_s;

%include sl_info;



    sl_info_p = null();
    match_count = 0;
    do idx = 1 to hbound(match_star,1);
       if match_star(idx).name ^= "" then match_count = match_count+1;
       end;

    call search_paths_$get (DUMP_LIST, sl_control_default, "" /* no ref path */, null () /* default search seg */,
	     area_ptr, sl_info_version_1, sl_info_p, code);

    if code ^= 0 then call sub_err_ (code, "amu_find_system_dump_", ACTION_CAN_RESTART, null (), (0),
		"No ""dumps"" search list defined.");

    path_count = 0;
    do sx = 1 to sl_info.num_paths;
       if sl_info.paths (sx).type = ABSOLUTE_PATH then
          path_count = path_count + 1;
	end;
    path_count = match_count * path_count;
    begin;
       declare one_dir_list_ptrs      (path_count) pointer;
       declare (pathx, final_dumpx, dirx, dumpx, i)
				      fixed bin;
       declare sx		      fixed bin;

       one_dir_list_ptrs(*) = null();
       system_dump_list_ptr = null();
       on cleanup begin;
	if sl_info_p ^= null() then free sl_info in (an_area);
	if system_dump_list_ptr ^= null() then free system_dump_list in (an_area);
	do i = 1 to path_count;
	   if one_dir_list_ptrs(i) ^= null() then
	      free one_dir_list_ptrs(i) -> system_dump_list in (an_area);
	      end;
	   end;

       pathx = 1;
       temp_n_dumps = 0;
       do sx = 1 to sl_info.num_paths;
	if sl_info.code (sx) ^= 0 then go to SKIP;
	do idx = 1 to match_count;
	   call LIST_ONE_DIR (sl_info.pathname (sx), match_star.name(idx), system_area_ptr, match_star.pdir_sw(idx), 
	                      one_dir_list_ptrs (pathx), code);

   	   if code ^= 0 then do;
	      code = 0;
	      go to SKIP;
	      end;
	   temp_n_dumps = temp_n_dumps + one_dir_list_ptrs (pathx) -> system_dump_list.n_dumps;
   	   pathx = pathx + 1;
SKIP:
	   end; /* end search_name loop */
          end;

       if temp_n_dumps = 0 then do;
          code = error_table_$noentry;
          return;
          end;

       system_dump_list_n_dumps = temp_n_dumps;	/* avoid interference with LIST_ONE */

       /* Okay, now we have N lists. turn them into one BIG list. */

       allocate system_dump_list in (an_area);
       system_dump_list.version = SYSTEM_DUMP_LIST_VERSION_1;

       final_dumpx = 1;
       listing_dirname = "";
       do dirx = 1 to pathx - 1;		/* that many are useful */
          do dumpx = 1 to one_dir_list_ptrs (dirx) -> system_dump_list.n_dumps;
   	   system_dump_list.per_dump (final_dumpx) =  one_dir_list_ptrs (dirx) -> system_dump_list.per_dump (dumpx);
             if listing_dirname ^= system_dump_list.per_dump (final_dumpx).dir_name then
	      system_dump_list.per_dump (final_dumpx).new_directory = "1"b;

             listing_dirname = system_dump_list.per_dump (final_dumpx).dir_name;
	   final_dumpx = final_dumpx + 1;
	   end;
          free one_dir_list_ptrs (dirx) -> system_dump_list in (an_area);
          end;

       end;					/* The Begin Block */

    free sl_info in (an_area);
    revert cleanup;
    a_info_ptr = system_dump_list_ptr;

    return;

     end LIST_ALL_DIRS;
%page;
/*****************************************************************************/

determine_search_name:  proc(entryname, list_what, match_star);
		   
/* parameters */

dcl entryname char(*);
dcl list_what fixed bin;
dcl 1 match_star(3),
      2 name			char(32),
      2 pdir_sw			bit(1);

/* local */

dcl code fixed bin(35);
dcl idx fixed bin;
dcl match_all bit(1);
dcl no_dot bit(1);
dcl s_name char(32);
dcl suffixed_name_$make entry (char(*), char(*), char(32), fixed bin(35));

    match_star(*).name = "";
    match_star(*).pdir_sw = "0"b;
    idx, code  = 0;
    call check_star_name_$entry (entryname, code);
    match_all = (code=2);				/* This is a starname that matches all 		*/
    no_dot = (search(entryname, ".") = 0);

    if list_what = LIST_PDIRS | list_what = LIST_ALL then do;
       idx = idx + 1;
       if match_all then do;
	match_star(idx).name =   "**" || ".pdir";         /* This will match all pdirs			*/
	match_star(idx).pdir_sw = "1"b;
	end;
       else do;
          if no_dot then do;
	   match_star(idx).name =   rtrim(entryname) || ".pdir";
	   match_star(idx).pdir_sw = "1"b;
	   idx = idx + 1;
             match_star(idx).name = rtrim(entryname) || ".*.pdir";
	   match_star(idx).pdir_sw = "1"b;
	   end;
          else do;
             call suffixed_name_$make (entryname, PDIR_SUFFIX, s_name, code);
	   if code = 0 then match_star(idx).name = s_name;
             else match_star(idx).name = entryname;
	   match_star(idx).pdir_sw = "1"b;
	   end;
          end;
       end;

    if list_what = LIST_FDUMPS | list_what = LIST_ALL then do;
       idx = idx + 1;
       if match_all then match_star(idx).name = "??????.????.0." || "*";  
       else do;
          if no_dot then                       /* fdump component, assume it's the erf number */
	   match_star(idx).name = "??????.????.0." || rtrim(entryname);
          else match_star(idx).name = rtrim(entryname);
	end;
       end;

end determine_search_name;
%page;
/*****************************************************************************/

get_one_dir: proc (dir_name, match_star, area_ptr, a_info_ptr, code);

/* parameters */

dcl area_ptr			pointer;
dcl a_info_ptr			pointer;
dcl code				fixed bin (35);
dcl dir_name			char(*);
dcl 1 match_star(3),
      2 name			char(32),
      2 pdir_sw			bit(1);

/* local */

dcl an_area			area based (area_ptr);
dcl (idx, match_count)		fixed bin;
dcl temp_n_dumps			fixed bin;

    a_info_ptr = null();
    match_count = 0;
    do idx = 1 to hbound(match_star,1);
       if match_star(idx).name ^= "" then match_count = match_count+1;
       end;

    begin;
       declare one_dir_list_ptrs      (match_count) pointer;
       declare (pathx, final_dumpx, dirx, dumpx, i)
				      fixed bin;
       declare set_new_dir	      bit (1) aligned;

       one_dir_list_ptrs(*) = null();
       system_dump_list_ptr = null();
       on cleanup begin;
	if system_dump_list_ptr ^= null() then free system_dump_list in (an_area);
	do i = 1 to match_count;
	   if one_dir_list_ptrs(i) ^= null() then
	      free one_dir_list_ptrs(i) -> system_dump_list in (an_area);
	   end;
	end;

       pathx = 1;
       temp_n_dumps = 0;
       do idx = 1 to match_count;
          call LIST_ONE_DIR (dir_name, match_star.name(idx), area_ptr, match_star.pdir_sw(idx), 
	                   one_dir_list_ptrs (pathx), code);
  	if code ^= 0 then do;
	   code = 0;
	   go to SKIP;
	   end;
	temp_n_dumps = temp_n_dumps + one_dir_list_ptrs (pathx) -> system_dump_list.n_dumps;
	pathx = pathx + 1;
SKIP:
          end;

       if temp_n_dumps = 0 then do;
          code = error_table_$noentry;
	return;
	end;

       system_dump_list_n_dumps = temp_n_dumps;	/* avoid interference with LIST_ONE */

       /* Okay, now we have N lists. turn them into one BIG list. */

       allocate system_dump_list in (an_area);
       system_dump_list.version = SYSTEM_DUMP_LIST_VERSION_1;
 
       final_dumpx = 1;
       do dirx = 1 to pathx - 1;		/* that many are useful */
          set_new_dir = "1"b;
          do dumpx = 1 to one_dir_list_ptrs (dirx) -> system_dump_list.n_dumps;
	   system_dump_list.per_dump (final_dumpx) = one_dir_list_ptrs (dirx) -> system_dump_list.per_dump (dumpx);
	   if set_new_dir then do;
	      system_dump_list.per_dump (final_dumpx).new_directory = "1"b;
	      set_new_dir = "0"b;
	      end;
	   final_dumpx = final_dumpx + 1;
	   end;
          free one_dir_list_ptrs (dirx) -> system_dump_list in (an_area);
          end;

       end;				/* The Begin Block */

    revert cleanup;
    a_info_ptr = system_dump_list_ptr;

return;

end get_one_dir;
%page;
/*****************************************************************************/

setup:   proc();

     star_names_ptr, star_entry_ptr = null();
     system_area_ptr = get_system_free_area_();

end setup;
%page;
%include star_structures;
%page;
%include sub_err_flags;
%page;
%include system_dump_info;


     end amu_find_system_dump_;
