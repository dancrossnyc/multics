/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */
amu_definition_: proc;
	return;

/* format: style4,delnl,insnl,ifthenstmt,indnoniterend,ifthendo,ifthen,^thendo */


dcl  P_amu_info_ptr ptr,
     P_entrypoint_name char (*),
     P_prn_name char (*),
     P_seg_ptr ptr,
     P_segno fixed bin,
     P_offset fixed bin (18),
     P_seg_name char (*),
     P_data_ptr ptr,
     P_code fixed bin (35);


dcl  data_ptr ptr;
dcl  ptr_data (0:7) ptr based (data_ptr);
dcl  ptr_entry bit (1);
dcl  prn_name char (6);
dcl  def_name char (72) varying;
dcl  temp_def_name char (72);
dcl  def_offset fixed bin (18);
dcl  d_type fixed bin;
dcl  seg_ptr pointer;
dcl  def_ptr pointer;
dcl  last_name_entry_ptr pointer;
dcl  hash_index fixed bin;
dcl  code fixed bin (35);
dcl  name_entry_ptr pointer;
dcl  name_entry_lth fixed bin;

dcl  1 name_entry aligned based (name_entry_ptr),
       2 next pointer unaligned,
       2 seg_ptr pointer unaligned,
       2 name_lth fixed bin,
       2 name char (name_entry_lth refer (name_entry.name_lth));

dcl  1 cur_ptrs like hardcore_cur;

dcl  ring0_get_$definition_given_slt
	entry (ptr, char (*), char (*), fixed bin (18), fixed bin, fixed bin (35), ptr, ptr, ptr);
dcl  amu_$hardcore_info_set_cur_ptrs entry (ptr, ptr);
dcl  cv_oct_check_ entry (char (*), fixed bin (35)) returns (fixed bin (35));
dcl  ioa_ entry () options (variable);


dcl  (
     error_table_$bad_arg
     ) fixed bin (35) external static;


dcl  (addr, addrel, baseptr, dimension, 
      fixed, length, mod, null, pointer,
      rank, rel, rtrim, search, substr) builtin;

%page;

amu_definition_$ptr:
     entry (P_amu_info_ptr, P_seg_name, P_entrypoint_name, P_code) returns (ptr);
	ptr_entry = "1"b;
	goto comm_code;

amu_definition_$offset:
     entry (P_amu_info_ptr, P_seg_name, P_entrypoint_name, P_code) returns (fixed bin (18));
	ptr_entry = "0"b;
comm_code:
	amu_info_ptr = P_amu_info_ptr;
	if search (P_seg_name, "<>") ^= 0 then do;	/* it's a pathname, reject it */
	     P_code = error_table_$bad_arg;		/* best code I could find */
	     if ptr_entry then
		return (null ());
	     else return (0);
	     end;
	call cr_def_name;

	call lookup (temp_def_name);			/* sets name_entry_ptr, last_name_entry_ptr, hash_index */
	call find_def;
	if name_entry_ptr = null () then do;		/* not there already, we must find it */


	     if code ^= 0 then do;
		P_code = code;			/* Nope. */
		if ptr_entry then
		     return (null ());
		else return (0);
		end;
	     def_ptr = addrel (seg_ptr, def_offset);	/* generate a pointer to the actual definition */
	     call insert (temp_def_name, def_ptr);	/* insert it */
	     end;

	else def_ptr = name_entry.seg_ptr;		/* otherwise, copy it from the found name_entry */
	P_code = 0;
	if ptr_entry then
	     return (def_ptr);
	else return (fixed (rel (def_ptr), 18));

amu_definition_$set_prn_name:
     entry (P_amu_info_ptr, P_prn_name, P_seg_name, P_entrypoint_name, P_code);
	amu_info_ptr = P_amu_info_ptr;
	prn_name = P_prn_name;
	code, P_code = 0;
	call set_t_idx;
	if code ^= 0 then do;
	     P_code = code;
	     return;
	end;
	call cr_def_name;
	call lookup (temp_def_name);
	if name_entry_ptr = null () then do;
	     call find_def;
	     if code ^= 0 then do;
		P_code = code;
		return;
		end;
	     end;
	definitions_info.t_ptrs (t_ptr_indx).val = pointer (def_ptr, def_offset);
	P_code = 0;
	return;

amu_definition_$set_prn:
     entry (P_amu_info_ptr, P_prn_name, P_segno, P_offset, P_code);
	amu_info_ptr = P_amu_info_ptr;
	prn_name = P_prn_name;
	code, P_code = 0;
	call set_t_idx;
	if code ^= 0 then do;
	     P_code = code;
	     return;
	end;
	definitions_info.t_ptrs (t_ptr_indx).val = pointer (baseptr (P_segno), P_offset);
	return;

amu_definition_$get_prn:
     entry (P_amu_info_ptr, P_prn_name, P_seg_ptr, P_code);
	amu_info_ptr = P_amu_info_ptr;
	prn_name = P_prn_name;
	code, P_code = 0;
	call set_t_idx;
	if code ^= 0 then do;
	     P_code = code;
	     return;
	     end;


	P_seg_ptr = definitions_info.t_ptrs (t_ptr_indx).val;
	return;


amu_definition_$set_from:
     entry (P_amu_info_ptr, P_prn_name, P_data_ptr, P_code);
	amu_info_ptr = P_amu_info_ptr;
	prn_name = P_prn_name;
	data_ptr = P_data_ptr;
	code, P_code = 0;
	if prn_name = "prs" then do;
	     do t_ptr_indx = 0 to 7;
		if addr (ptr_data (t_ptr_indx)) -> its.its_mod = ITS_MODIFIER then
		     definitions_info.t_ptrs (t_ptr_indx).val = ptr_data (t_ptr_indx);
		else call ioa_ ("^2w not its ^a not set", ptr_data (t_ptr_indx),
			definitions_info.t_ptrs (t_ptr_indx).name);
	     end;
	     end;
	else do;
	     call set_t_idx;
	     if t_ptr_indx = 8 then do;
		if addr (ptr_data (6)) -> its.its_mod = ITS_MODIFIER then
		     definitions_info.t_ptrs (t_ptr_indx).val = ptr_data (6);
						/* special case prfr */
		else call ioa_ ("^2w not its ^a not set", ptr_data (6), definitions_info.t_ptrs (t_ptr_indx).name);
		return;
		end;
	     if t_ptr_indx = 9 then do;
		call ioa_ ("prmc can not be set from");
		return;
		end;
	     if addr (ptr_data (t_ptr_indx)) -> its.its_mod = ITS_MODIFIER then
		definitions_info.t_ptrs (t_ptr_indx).val = ptr_data (t_ptr_indx);
	     else call ioa_ ("^2w not its ^a not set", ptr_data (t_ptr_indx), definitions_info.t_ptrs (t_ptr_indx).name)
		     ;
	     end;
	return;


%page;
set_t_idx:
     proc;
	code = 0;
	if prn_name = "frame" | prn_name = "fr" then do;
	     t_ptr_indx = 8;
	     return;
	     end;

	if prn_name = "mcp" then do;
	     t_ptr_indx = 9;
	     return;
	     end;


	if substr (prn_name, 1, 2) = "pr" then do;
	     t_ptr_indx = cv_oct_check_ (substr (prn_name, 3, 1), code);
	     if code ^= 0 then do;
		if prn_name = "prfr" then do;
		     t_ptr_indx = 8;
		     code = 0;
		     return;
		     end;
		if prn_name = "prmc" then do;
		     t_ptr_indx = 9;
		     code = 0;
		     return;
		     end;
		P_code = code;
		return;
		end;
	     end;
	else do;
	     code = 0;
	     do t_ptr_indx = 0 to 9;
		if prn_name = definitions_info.t_ptrs (t_ptr_indx).name then return;
	     end;
	     end;
	if t_ptr_indx > 9 then do;
	     code = error_table_$bad_arg;
	     return;
	     end;
     end set_t_idx;

cr_def_name:
     proc;
	def_name = rtrim (P_seg_name);		/* construct lookup name */
	def_name = def_name || "$";
	def_name = def_name || rtrim (P_entrypoint_name);
	temp_def_name = def_name;
     end cr_def_name;

find_def:
     proc;
	seg_ptr = null ();				/* indicate that this should be an output argument */
	hardcore_cur_ptr = addr (cur_ptrs);
	call amu_$hardcore_info_set_cur_ptrs (amu_info_ptr, hardcore_cur_ptr);
	call ring0_get_$definition_given_slt (seg_ptr, P_seg_name, P_entrypoint_name, def_offset, d_type, code,
	     hardcore_cur.sltp, hardcore_cur.sltntp, hardcore_cur.defp);
     end find_def;

lookup:
     proc (P_name);

/* *	This procedure looks up P_name in the internal name hash table, and sets
   *	hash_index, name_entry_ptr, and last_name_entry_ptr appropriately. It will
   *	always set hash_index correctly. If P_name is found, name_entry_ptr points
   *	to the name_entry block for it, and last_name_entry_ptr will be invalid.
   *	If P_name is not found, name_entry_ptr will be null, and last_name_entry_ptr
   *	will either point to the last name_entry block in the chain, or be null if
   *	the chain is empty. */

dcl  P_name char (*) parameter;

dcl  hash_sum fixed bin;
dcl  idx fixed bin;

	hash_sum = 43;				/* This is just to start it somewhere other than zero */
						/* The choice of 43 is completely arbitrary */
	do idx = 1 to length (rtrim (P_name));
	     hash_sum = hash_sum + rank (substr (P_name, idx, 1));
	end;

	hash_index = 1 + mod (hash_sum, dimension (hash_buckets, 1));

	last_name_entry_ptr = null ();
	do name_entry_ptr = hash_buckets (hash_index) repeat (name_entry_ptr -> name_entry.next)
	     while (name_entry_ptr ^= null ());

	     last_name_entry_ptr = name_entry_ptr;

	     if name_entry.name = P_name then return;	/* jackpot */
	end;					/* of loop through name_entry blocks */

	return;					/* all done. the pointers are set appropriately by the loop */
     end lookup;

%page;

insert:
     proc (P_name, P_ptr);

/* *	This procedure adds another name_entry block to the appropriate chain for
   *	the association of P_name and P_ptr. It assumes that hash_index and
   *	last_name_entry_ptr have already been set properly (presumably by lookup). */

dcl  (
     P_name char (*),
     P_ptr pointer
     ) parameter;


	name_entry_lth = length (rtrim (P_name));

	allocate name_entry in (amu_area) set (name_entry_ptr);

	name_entry.next = null ();			/* initialize values */
	name_entry.seg_ptr = P_ptr;
	name_entry.name_lth = name_entry_lth;
	name_entry.name = P_name;

	if last_name_entry_ptr ^= null () then		/* and string in -- after last one, if there was such; */
	     last_name_entry_ptr -> name_entry.next = name_entry_ptr;
	else hash_buckets (hash_index) = name_entry_ptr;

	return;					/* all done */
     end insert;

%page;
%include sdw;
%page;
%include amu_info;
%page;
%include amu_definitions;
%page;
%include amu_hardcore_info;
%page;
%include its;
     end amu_definition_;				/* External procedure */
