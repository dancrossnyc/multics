/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(87-07-09,Parisek), approve(87-07-09,MCR7746),
     audit(87-07-20,Fawcett), install(87-07-28,MR12.1-1049):
     Check for early dump based on existence of certain hardcore referencing,
     then return pointer values based on that information.
                                                   END HISTORY COMMENTS */


amu_hardcore_info_: proc;
	return;

/* format: style4,delnl,insnl,ifthenstmt,indnoniterend,ifthendo,ifthen,^thendo */

/*
   This proc will set up the hadrcore_info data 

   dcl amu_$hardcore_info_deadproc entry (ptr,char(168),fixed bin (35);
   call amu_$hardcore_info_deadproc (amu_info_ptr,deadproc_dir,code);
   

   dcl amu_$hardcore_info_fdump entry (ptr,fixed bin (35));
   call amu_$hardcore_info_fdump (amu_info_ptr,code);
   where
   amu_info_ptr is a pointer to this amu_info   (input)
   code is the error code  0 if ok .   (output)

   dcl amu_$hardcore_info_set_cur_ptrs entry (ptr,ptr);
   call amu_$hardcore_info_set_cur_ptrs (amu_info_ptr,hardcore_cur_ptr);
   where
   amu_info_ptr as above (input)
   hardcore_cur_ptr is a pointer to where the hardcore_cur
   strcuture will be stored       (input)

   Modified July 84 by B. Braun to add knowledge of unpaged_page_tables.
   Modified Sept 84 by B. Braun to use inzr_stk0 when active_all_rings_data_ doesnt exist.
*/

/* Parameters */

dcl  P_amu_info_ptr ptr;
dcl  P_caller char(*);
dcl  P_code fixed bin (35);
dcl  P_ptr ptr;
dcl  P_dp_dir char (168);

/* External entries */

dcl  amu_$error_for_caller entry options (variable);
dcl  amu_$fdump_translate_to_temp_seg entry (ptr, ptr, ptr, fixed bin (35));
dcl  amu_$do_translation entry (ptr, fixed bin, ptr, fixed bin (18), fixed bin (18), fixed bin (35));
dcl  amu_$definition_ptr entry (ptr, char (*), char (*), fixed bin (35)) returns (ptr);
dcl  amu_$translate_add entry (ptr, ptr, fixed bin, fixed bin (35));
dcl  amu_$translate_force_add entry (ptr, ptr, fixed bin, fixed bin (35));
dcl  amu_$fdump_translate_contiguous entry (ptr, ptr, ptr, fixed bin (35));
dcl  amu_$slt_search_seg_ptr entry (ptr, ptr, char (32), ptr, fixed bin (35));
dcl  amu_$slt_search_init_seg_ptr entry (ptr, ptr, char (32), ptr, fixed bin (35));
dcl  amu_$slt_search_last_sup_seg entry (ptr, fixed bin);
dcl initiate_file_			entry (char(*), char(*), bit(*), ptr, fixed bin(24), fixed bin(35));
dcl  pathname_			entry (char(*), char(*)) returns(char(168));

/* External static */
dcl  amu_et_$no_def fixed bin (35) ext;
dcl  amu_et_$no_dseg fixed bin (35) ext;
dcl  amu_et_$no_slt fixed bin (35) ext;
dcl  amu_et_$no_sltnt fixed bin (35) ext;
dcl  amu_et_$trans_exists fixed bin (35) ext;
dcl error_table_$action_not_performed fixed bin (35) ext;

/* Builtins */

dcl (addr, addrel, baseno, baseptr, binary,
     divide, fixed, null, rel)	builtin;

/* Automatic */

dcl  bitcount fixed bin (24);
dcl  bound fixed bin(19);
dcl  (code, ecode) fixed bin (35);
dcl  deadproc_dir char (168);
dcl  dseg_ptr ptr;
dcl  1 temp_translation like translation;
dcl  segment_ptr ptr;
dcl  temp_ptr ptr;
%page;
/*****************************************************************************/

amu_hardcore_info_$deadproc:
     entry (P_caller, P_amu_info_ptr, P_dp_dir, P_code);

     amu_info_ptr = P_amu_info_ptr;
     deadproc_dir = P_dp_dir;

     hardcore_info.pointers.sst.fptr = null ();
     hardcore_info.pointers.sst.lptr = null ();
     hardcore_info.pointers.sstnt.fptr = null ();
     hardcore_info.pointers.sstnt.lptr = null ();
     hardcore_info.pointers.tc_data.fptr = null ();
     hardcore_info.pointers.tc_data.lptr = null ();
     hardcore_info.pointers.upt.fptr = null ();
     hardcore_info.pointers.upt.lptr = null ();
     hardcore_info.apt.foreign_ptr = null ();
     hardcore_info.apt.local_ptr = null ();
     hardcore_info.apt.count = 0;
     hardcore_info.apt.size = 0;

     process_info.pid = "0"b;
     process_info.address_map_ptr = amu_info.translation_table_ptr;
     process_info.state, process_info.idx, process_info.dbr = -1;
     process_info.apte.foreign_ptr, process_info.apte.local_ptr = null ();
     process_info.prds = process_info.apte;
     process_info.pds = process_info.apte;
     process_info.dseg = process_info.apte;
     process_info.kst = process_info.apte;

     process_info.dump_segx.first, process_info.dump_segx.last = 0;
     

     translation_ptr = addr(temp_translation);
     translation.flags = ""b;
     translation.in_perm_seg = "1"b;
     translation.in_dp_dir = "1"b;
     translation.part2.ptr = null ();
     translation.part2.lth = 0;

/* get the slt */

     call initiate_file_ (deadproc_dir, "slt", R_ACCESS, temp_ptr, bitcount, code);
     if temp_ptr = null () then do;
          if code = 0 then P_code = amu_et_$no_slt;
	else do;
	   P_code = error_table_$action_not_performed;
	   call amu_$error_for_caller (amu_info_ptr, code, P_caller,
	          "Initiating ^a.", pathname_ (deadproc_dir, "slt"));
	   end;
	return;
     end;
     code = 0;
     sltp = temp_ptr;
     segment_ptr = baseptr(7);
     translation.part1.ptr = temp_ptr;
     translation.part1.lth = divide(bitcount,36,18);
     translation.segno = fixed (baseno (segment_ptr), 17);
     call fill_ptrs_no_trans (addr (hardcore_info.pointers.slt), segment_ptr);
     call amu_$translate_add (amu_info_ptr, translation_ptr, fixed (baseno (segment_ptr), 17), code);
     if code ^= 0 then do;
	P_code = code;
	return;
     end;

/* get the name_table */     

     call initiate_file_ (deadproc_dir, "name_table", R_ACCESS, temp_ptr, bitcount, code);
     if temp_ptr = null () then do;
          if code = 0 then  P_code = amu_et_$no_sltnt;
	else do;
	   P_code = error_table_$action_not_performed;
	   call amu_$error_for_caller (amu_info_ptr, code, P_caller,
	          "Initiating ^a.", pathname_ (deadproc_dir, "name_table"));
	   end;     
	return;
     end;
     code = 0;
     segment_ptr = baseptr (8);
     names_ptr = temp_ptr;
     translation.part1.ptr = temp_ptr;
     translation.part1.lth = divide(bitcount,36,18);
     translation.segno = fixed (baseno (segment_ptr), 17);
     call fill_ptrs_no_trans (addr (hardcore_info.pointers.sltnt), segment_ptr);
     call amu_$translate_add (amu_info_ptr, translation_ptr, fixed (baseno (segment_ptr), 17), code);
     if code ^= 0 then do;
	P_code = code;
	return;
     end;

/* get definitions_ */

     call initiate_file_ (deadproc_dir, "definitions_", R_ACCESS, temp_ptr, bitcount, code);
     if temp_ptr = null () then do;
          if code = 0 then P_code = amu_et_$no_def;
	else do;
	   P_code = error_table_$action_not_performed;
	   call amu_$error_for_caller (amu_info_ptr, code, P_caller,
	          "Initiating ^a.", pathname_ (deadproc_dir, "definitions_"));
	   end;
	return;
     end;
     call get_ptr_from_slt ("definitions_", segment_ptr);
     translation.part1.ptr = temp_ptr;
     translation.part1.lth = divide(bitcount,36,18);
     translation.segno = fixed (baseno (segment_ptr), 17);
     call fill_ptrs_no_trans (addr (hardcore_info.pointers.definitions), segment_ptr);
     call amu_$translate_add (amu_info_ptr, translation_ptr, fixed (baseno (segment_ptr), 17), code);
     if code ^= 0 then do;
	P_code = code;
	return;
     end;

     call initiate_file_ (deadproc_dir, "dseg", R_ACCESS, temp_ptr, bitcount, code);
     if temp_ptr = null () then do;
        if code = 0 then P_code = amu_et_$no_dseg;
        else do;
	 P_code = error_table_$action_not_performed;
	 call amu_$error_for_caller (amu_info_ptr, code, P_caller,
	        "Initiating ^a.", pathname_ (deadproc_dir, "dseg"));
	 end;
        return;
     end;
     call get_ptr_from_slt ("dseg", segment_ptr);
     hardcore_info.dseg = fixed (baseno (segment_ptr), 15);
     dseg_ptr = temp_ptr;
     sdwp = dseg_ptr;
     bound = (binary (sdwp->sdw.bound, 14) +1) * 16; /* get number of words */
     translation.part1.ptr = dseg_ptr;
     translation.part1.lth = bound;
     translation.segno = fixed (baseno (segment_ptr), 17);
     call amu_$translate_add (amu_info_ptr, translation_ptr, (translation.segno), code);
     if code ^= 0 then do;
	P_code = code;
	return;
	end;
     process_info.dseg.local_ptr = translation.part1.ptr;

     call get_and_set (dseg_ptr, "pds", hardcore_info.pds, code);
     if code ^= 0 then do;
        call amu_$error_for_caller (amu_info_ptr, code, P_caller, "Initiating ^a.", pathname_ (deadproc_dir, "pds"));
        P_code = error_table_$action_not_performed;
        return;
        end;

     process_info.pds.local_ptr = translation.part1.ptr;

     call get_and_set (dseg_ptr, "kst", hardcore_info.kst, code);
     if code ^= 0 then do;
        call amu_$error_for_caller (amu_info_ptr, code, P_caller, "Initiating ^a.", pathname_ (deadproc_dir, "kst"));
        P_code = error_table_$action_not_performed;
        return;
        end;

     process_info.kst.local_ptr = translation.part1.ptr;

     call amu_$slt_search_last_sup_seg (sltp, hardcore_info.hcs_count);

     P_code = 0;
     return;
%page;
/*****************************************************************************/

amu_hardcore_info_$fdump:
     entry (P_amu_info_ptr, P_caller, P_code);

	amu_info_ptr = P_amu_info_ptr;		/* copy the amu_info ptr */
	process_idx = 0;				/* all hardcore segs are in first process dumped */


/* guess at the slt seg number */
	segment_ptr = baseptr (7);
	ecode = 0;
	call amu_$fdump_translate_contiguous (amu_info_ptr, segment_ptr, addr (temp_translation), ecode);
	if ecode ^= 0 then goto error_ret;
	sltp = temp_translation.part1.ptr;
	if temp_translation.flags.in_dump = "1"b then do;
	     hardcore_info.slt.fptr = temp_translation.part1.ptr;
	     hardcore_info.slt.lptr = null ();
	     end;
	else do;
	     hardcore_info.slt.lptr = temp_translation.part1.ptr;
	     hardcore_info.slt.fptr = null ();
	     end;
	call amu_$translate_add (amu_info_ptr, addr (temp_translation), fixed (baseno (segment_ptr), 17), code);
	if code = amu_et_$trans_exists then
	     call amu_$translate_force_add (amu_info_ptr, addr (temp_translation), fixed (baseno (segment_ptr), 17),
		code);

				/* now guess at the slt name seg 
				   segment_ptr = baseptr (8);    */

	segment_ptr = slt.name_seg_ptr;
	ecode = 0;
	call amu_$fdump_translate_contiguous (amu_info_ptr, segment_ptr, addr (temp_translation), ecode);
	if ecode ^= 0 then goto error_ret;
	names_ptr = temp_translation.part1.ptr;
	if temp_translation.flags.in_dump = "1"b then do;
	     hardcore_info.sltnt.fptr = temp_translation.part1.ptr;
	     hardcore_info.sltnt.lptr = null ();
	     end;
	else do;
	     hardcore_info.sltnt.lptr = temp_translation.part1.ptr;
	     hardcore_info.sltnt.fptr = null ();

	     end;
	call amu_$translate_add (amu_info_ptr, addr (temp_translation), fixed (baseno (segment_ptr), 17), code);
	if code = amu_et_$trans_exists then
	     call amu_$translate_force_add (amu_info_ptr, addr (temp_translation), fixed (baseno (segment_ptr), 17),
		code);

	segment_ptr = slt.name_seg_ptr;

	call get_ptr_from_slt ("tc_data", segment_ptr);
	call fill_ptrs (addr (hardcore_info.pointers.tc_data), segment_ptr);
	if hardcore_info.tc_data.fptr ^= null () then do;
	     tcmp = hardcore_info.tc_data.fptr;
	     hardcore_info.apt.foreign_ptr = addrel (hardcore_info.tc_data.fptr, fixed (tcm.apt_offset, 18));
	     hardcore_info.apt.local_ptr = null ();
	     end;
	else do;
	     tcmp = hardcore_info.tc_data.lptr;
	     hardcore_info.apt.local_ptr = addrel (hardcore_info.tc_data.lptr, fixed (tcm.apt_offset, 18));
	     hardcore_info.apt.foreign_ptr = null ();
	     end;
	call amu_$translate_add (amu_info_ptr, addr (temp_translation), fixed (baseno (segment_ptr), 17), code);
	if code = amu_et_$trans_exists then
	     call amu_$translate_force_add (amu_info_ptr, addr (temp_translation), fixed (baseno (segment_ptr), 17),
		code);

	hardcore_info.apt.count = tcm.apt_size;
	hardcore_info.apt.size = apt_entry_size;

/* definitions_ */
	call get_ptr_from_slt ("definitions_", segment_ptr);
	call fill_ptrs (addr (hardcore_info.pointers.definitions), segment_ptr);
	call amu_$fdump_translate_contiguous (amu_info_ptr, segment_ptr, addr (temp_translation), ecode);
	call amu_$translate_add (amu_info_ptr, addr (temp_translation), fixed (baseno (segment_ptr), 17), code);
	if code = amu_et_$trans_exists then
	     call amu_$translate_force_add (amu_info_ptr, addr (temp_translation), fixed (baseno (segment_ptr), 17),
		code);			

 	/* sst_seg */
	call get_ptr_from_slt ("sst_seg", segment_ptr);
	call amu_$fdump_translate_to_temp_seg (amu_info_ptr, segment_ptr, addr (temp_translation), ecode);
	call fill_ptrs_no_trans (addr (hardcore_info.sst), segment_ptr);
	call amu_$translate_add (amu_info_ptr, addr (temp_translation), fixed (baseno (segment_ptr), 17), code);
	if code = amu_et_$trans_exists then
	     call amu_$translate_force_add (amu_info_ptr, addr (temp_translation), fixed (baseno (segment_ptr), 17),
		code);

/* sst_names_ */
	call get_ptr_from_slt ("sst_names_", segment_ptr);
	call fill_ptrs (addr (hardcore_info.sstnt), segment_ptr);
	call amu_$translate_add (amu_info_ptr, addr (temp_translation), fixed (baseno (segment_ptr), 17), code);
	if code = amu_et_$trans_exists then
	     call amu_$translate_force_add (amu_info_ptr, addr (temp_translation), fixed (baseno (segment_ptr), 17),
		code);

	call get_ptr_from_slt ("prds", segment_ptr);
	hardcore_info.prds = fixed (baseno (segment_ptr), 15);
	call get_ptr_from_slt ("dseg", segment_ptr);
	hardcore_info.dseg = fixed (baseno (segment_ptr), 15);

	call get_ptr_from_slt ("pds", segment_ptr);
	hardcore_info.pds = fixed (baseno (segment_ptr), 15);

    if exists_unpaged_page_table (segment_ptr) then do;
       call fill_ptrs (addr (hardcore_info.upt), segment_ptr);
       call amu_$translate_add (amu_info_ptr, addr (temp_translation), fixed (baseno (segment_ptr), 17), code);
       if code = amu_et_$trans_exists then
          call amu_$translate_force_add (amu_info_ptr, addr (temp_translation), fixed (baseno (segment_ptr), 17), code);
       hardcore_info.unpaged_page_tables = fixed (baseno (segment_ptr),15);
       end;
    else do;
       hardcore_info.upt.fptr, hardcore_info.upt.lptr = null();
       end;

    call get_ptr_from_slt ("kst_seg", segment_ptr);
    hardcore_info.kst = fixed (baseno (segment_ptr), 15);
    call amu_$slt_search_last_sup_seg (sltp, hardcore_info.hcs_count);

    segment_ptr = amu_$definition_ptr (amu_info_ptr, "active_all_rings_data", "stack_base_segno", code);
	if code = 0 then do;
	     call amu_$do_translation (amu_info_ptr, fixed (baseno (segment_ptr), 17), addr (hardcore_info.segno.stack_0),
		fixed (rel (segment_ptr), 18), 1, code);
	     if code ^= 0 then do;
		P_code = code;
		return;
	     end;
	end;
	else do;     
						/* may be an early dump, check for inzr_stk0 */
	     call amu_$slt_search_seg_ptr (sltp, names_ptr, "inzr_stk0", segment_ptr, code);
	     if code ^= 0 then do;
		call amu_$slt_search_init_seg_ptr (sltp, names_ptr, "inzr_stk0", segment_ptr, code);
                    code = 0;				 /* Totaly ignore this error code */
	     end;
	     hardcore_info.segno.stack_0 = fixed(baseno (segment_ptr),17);
	     amu_info.early_dump = "1"b;
	end;

    P_code = 0;
    return;

error_ret:
    P_code = ecode;
    return;
%page;
/*****************************************************************************/

amu_hardcore_info_$set_cur_ptrs:
     entry (P_amu_info_ptr, P_ptr);
	amu_info_ptr = P_amu_info_ptr;
	hardcore_cur_ptr = P_ptr;

	if hardcore_info.pointers.upt.lptr ^= null then
	   hardcore_cur.uptp = hardcore_info.pointers.upt.lptr;
	else hardcore_cur.uptp = hardcore_info.pointers.upt.fptr;

	if hardcore_info.pointers.slt.lptr ^= null then
	     hardcore_cur.sltp = hardcore_info.pointers.slt.lptr;
	else hardcore_cur.sltp = hardcore_info.pointers.slt.fptr;

	if hardcore_info.pointers.sltnt.lptr ^= null then
	     hardcore_cur.sltntp = hardcore_info.pointers.sltnt.lptr;
	else hardcore_cur.sltntp = hardcore_info.pointers.sltnt.fptr;

	if hardcore_info.pointers.definitions.lptr ^= null then
	     hardcore_cur.defp = hardcore_info.pointers.definitions.lptr;
	else hardcore_cur.defp = hardcore_info.pointers.definitions.fptr;

	if hardcore_info.pointers.sst.lptr ^= null then
	     hardcore_cur.sstp = hardcore_info.pointers.sst.lptr;
	else hardcore_cur.sstp = hardcore_info.pointers.sst.fptr;

	if hardcore_info.pointers.tc_data.lptr ^= null then
	     hardcore_cur.tc_datap = hardcore_info.pointers.tc_data.lptr;
	else hardcore_cur.tc_datap = hardcore_info.pointers.tc_data.fptr;

	if hardcore_info.pointers.sstnt.lptr ^= null then
	     hardcore_cur.sstntp = hardcore_info.pointers.sstnt.lptr;
	else hardcore_cur.sstntp = hardcore_info.pointers.sstnt.fptr;

  return;
%page;
/*****************************************************************************/

fill_ptrs:
     proc (hpdp, dp);
dcl  1 hard_ptr_data like hardcore_info.pointers.slt based (hpdp);
dcl  hpdp ptr;
dcl  dp ptr;
	call amu_$fdump_translate_contiguous (amu_info_ptr, dp, addr (temp_translation), ecode);
	go to fill_ptrs_common;

/*****************************************************************************/

fill_ptrs_no_trans:
     entry (hpdp, dp);

fill_ptrs_common:
	if temp_translation.flags.in_dump = "1"b then do;
	     hard_ptr_data.fptr = temp_translation.part1.ptr;
	     hard_ptr_data.lptr = null ();
	     end;
	else do;
	     hard_ptr_data.lptr = temp_translation.part1.ptr;
	     hard_ptr_data.fptr = null ();
	     end;
     end fill_ptrs;
%page;
/*****************************************************************************/

exists_unpaged_page_table:  proc(segment_ptr) returns(bit(1));

dcl segment_ptr			ptr;
dcl code				fixed bin(35);

    segment_ptr = null();
    code = 0;
    call amu_$slt_search_seg_ptr (sltp, names_ptr, "unpaged_page_tables", segment_ptr, code);
    if code = 0 then return("1"b);
    else return("0"b);

end exists_unpaged_page_table;
%page;
/*****************************************************************************/

get_and_set:
     proc (dseg_ptr, temp_name,hardcore_num, code);

dcl code fixed bin(35);
dcl dseg_ptr ptr;
dcl temp_name char (32);
dcl hardcore_num fixed bin (15);

dcl bound fixed bin(19);
dcl sdwp ptr;

     code = 0;
     call initiate_file_ (deadproc_dir, temp_name, R_ACCESS, temp_ptr, bitcount, code);
     if temp_ptr = null () then do;
	return;
     end;
     if temp_name = "kst" then temp_name = "kst_seg";
     call get_ptr_from_slt (temp_name, segment_ptr);
     hardcore_num = fixed (baseno (segment_ptr), 15);
     sdwp = addrel(dseg_ptr, hardcore_num*2);
     bound = (binary (sdwp->sdw.bound, 14) +1) * 16; /* get number of words */
     translation.part1.lth = bound;
     translation.part1.ptr = temp_ptr;
     translation.segno = fixed (baseno (segment_ptr), 17);
     call amu_$translate_add (amu_info_ptr, translation_ptr, (translation.segno), code);
     if code ^= 0 then do;
	return;
     end;
     code = 0;
end get_and_set;
%page;
/*****************************************************************************/

get_ptr_from_slt:
     proc (segment_name, temp_ptr);
dcl  test_name char (32);
dcl  temp_ptr ptr;
dcl  segment_name char (*);
dcl  seg_ptr ptr;
	temp_ptr = null ();
	test_name = segment_name;

	call amu_$slt_search_seg_ptr
	     (sltp, names_ptr, test_name, temp_ptr, ecode);

	if ecode ^= 0 then do;
	     seg_ptr = amu_$definition_ptr (amu_info_ptr, "active_all_rings_data", "stack_base_segno", code);
	     if code = 0 then do;
		call amu_$do_translation (amu_info_ptr, fixed (baseno (seg_ptr), 17), addr (hardcore_info.segno.stack_0),
		     fixed (rel (seg_ptr), 18), 1, code);
		if code ^= 0 then do;
		     P_code = code;
		     return;
		end;
	     end;
	     else do;     
						/* may be an early dump, check for inzr_stk0 */
		call amu_$slt_search_seg_ptr (sltp, names_ptr, "inzr_stk0", seg_ptr, code);
		if code ^= 0 then do;
		     call amu_$slt_search_init_seg_ptr (sltp, names_ptr, "inzr_stk0", seg_ptr, code);
		     code = 0;		          /* Totaly ignore this code */
		end;
	     end;
	     hardcore_info.segno.stack_0 = fixed(baseno (segment_ptr),17);
	     amu_info.early_dump = "1"b;
	     if amu_info.early_dump then return;
	     else goto error_ret;
	end;

     end get_ptr_from_slt;
%page;%include access_mode_values;
%page;%include amu_hardcore_info;
%page;%include amu_info;
%page;%include amu_fdump_info;
%page;%include amu_process_info;
%page;%include amu_translation;
%page;%include sdw;
%page;%include slt;
%page;%include tcm;
%page;%include hc_lock;

     end amu_hardcore_info_;
