/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */
amu_tc_data_:
     proc (P_amu_info_ptr, argument);
	return;

/* format: style4,delnl,insnl,ifthenstmt,indnoniterend,ifthendo,ifthen,^thendo */

/* this proc will deal with the tc_data seg it has 2 entry points */

/* dcl amu_$tc_data_get_apt_entry entry (ptr, char (3), fixed bin, ptr);
   call amu_$tc_data_get_apt_entry (amu_info_ptr,arg, apte_array_ptr,apte_array_index);
   where
   amu_info_ptr is a pointer to the main info structer for the fdump
   arg is the three character state
   ("run", "rdy", "wat", "blk", "stp", "ptl")
   apte_array_ptr is a pointer to an array (see apte_array)
   apte_array_index is where the last entry is in the array.
   (this is used as input and output)

   This entry will return the selected apte entries in the array and
   increment the index
*/

/* dcl amu_$tc_data_find_apte entry (ptr,fixed bin (24),ptr,fixed bin (35));
   call amu_$tc_data_find_apte (amu_info_ptr,dbr,aptep,code);
   where
   amu_info_ptr is a pointer to the main info for this fdump
   dbr is the dbr address value that is to be searched for
   aptep is the pointer that is returned for the found apte
   code the the error code retunred

   This entry will return the apte pointer given the dbr value if code = -1 then
   the dbr did not match any apte's
*/
dcl  APT_BASE fixed bin;
dcl  WCTE_WORDS fixed bin;
dcl  code fixed bin (35);
dcl  offset fixed bin (18);
dcl  P_amu_info_ptr ptr;
dcl  P_offset fixed bin (18);
dcl  P_aptep ptr;
dcl  P_code fixed bin (35);
dcl  P_dbr fixed bin (24);
dcl  P_all_sw bit (1);
dcl  P_return_ptr ptr;
dcl  P_rdy_sw bit(1);
dcl  P_return_index fixed bin;
dcl  dbr_search fixed bin (24);
dcl  i fixed bin;
dcl  rdy_sw bit(1);
dcl  return_index fixed bin;
dcl  return_ptr ptr;
dcl  1 apte_array (return_index) based (return_ptr),
       2 ptr ptr,
       2 off fixed bin (18),
       2 index fixed bin;

dcl  ioa_ entry () options (variable);
dcl  amu_$print_apte entry (ptr, ptr, fixed bin (18), fixed bin);
dcl  amu_$print_apte_bf entry (ptr, ptr, fixed bin (18));
dcl  amu_$check_info_hard entry (ptr);

dcl  (
     amu_et_$proc_not_dumped,
     amu_et_$entry_not_found
     ) fixed bin (35) ext;

dcl  RUNNING fixed bin init (1) static options (constant);
dcl  argument char (3);

dcl  all_sw bit (1) init ("0"b);
dcl  tc_datap ptr;

dcl (addr, addrel, binary, divide, 
     fixed, null, pointer, rel, substr, unspec)  builtin;
%page;
amu_tc_data_$get_apt_entry:
     entry (P_amu_info_ptr, arg_idx, process_id, apte_offset, P_return_ptr, P_return_index);

dcl arg_idx fixed bin;
dcl process_id bit(36);
dcl apte_offset fixed bin(18);
dcl ( arg_sw, apte_sw, pid_sw, want_it) bit(1);

    call amu_$check_info_hard (P_amu_info_ptr);
    amu_info_ptr = P_amu_info_ptr;
    call set_tcp_aptp;
    arg_sw, apte_sw, pid_sw, want_it = "0"b;
    return_ptr = P_return_ptr;
    return_index = P_return_index;

    if arg_idx > 0 then arg_sw = "1"b;			/* have to match on apte state		*/
    else if apte_offset >0 then apte_sw = "1"b;
    else if process_id > "0"b then pid_sw = "1"b;

    offset = fixed (rel (aptep), 18) - fixed (rel (tc_datap), 18);

    do i = 1 to hardcore_info.apt.count;
       if arg_sw then do;
          if arg_idx = fixed (apte.state, 17) then want_it = "1"b;
          end;
       else if apte_sw then do;
	if apte_offset = offset then want_it = "1"b;
	end;
       else if pid_sw then do;
          if process_id = apte.processid then want_it = "1"b;
	end;
       if want_it then do;
	return_index = return_index + 1;
	apte_array (return_index).ptr = aptep;
	apte_array (return_index).off = offset;
	apte_array (return_index).index = i;
	want_it = "0"b;
	end;
       aptep = addrel (aptep, hardcore_info.apt.size);
       offset = fixed (rel (aptep), 18) - fixed (rel (tc_datap), 18);
       end;


    P_return_index = return_index;
    return;


amu_tc_data_$tcq:
     entry (P_amu_info_ptr, P_all_sw, P_rdy_sw);

dcl apte_number fixed bin;
dcl wc_number fixed bin;
dcl first_aptep ptr;
dcl print_this_wc bit(1);
	amu_info_ptr = P_amu_info_ptr;
	call set_tcp_aptp;
	tcmp = tc_datap;
          rdy_sw = P_rdy_sw;				/* Print the eligible queue. */
	all_sw = P_all_sw;				/* Print unthreaded entruies also.		*/

	APT_BASE = fixed (tcm.apt_offset, 18);
	if APT_BASE = 0 then APT_BASE = 256;		/* old style tc_data */
	WCTE_WORDS = divide (APT_BASE - fixed (tcm.min_wct_index), 17, 17, 0);

	  call ioa_ ("ELIGIBLE QUEUE:^/Proc^8tDBR^17tState^27tProcess ID^39tCPU");
	aptep = addrel (tcmp, tcm.eligible_q_head.fp);
elig_apt_loop:
	if aptep ^= addr (tcm.ready_q_tail) then do;
	     offset = fixed (rel (aptep), 18) - fixed (rel (tcmp), 18);
	     call amu_$print_apte_bf (amu_info_ptr, aptep, offset);
	     aptep = addrel (tcmp, apte.thread.fp);
	     go to elig_apt_loop;
	     end;

	if ^(all_sw | rdy_sw) then return;			

/* Print the realtime queue. */

	if tcm.realtime_q.sentinel ^= "0"b then do;	/* look in realtime queue */
	     call ioa_ ("REALTIME QUEUE:");
	     aptep = addrel (tcmp, tcm.realtime_q.fp);
dead_apt_loop:
	     if aptep ^= addr (tcm.realtime_q) then do;
		offset = fixed (rel (aptep), 18) - fixed (rel (tcmp), 18);
		call amu_$print_apte_bf (amu_info_ptr, aptep, offset);
		aptep = addrel (tcmp, apte.thread.fp);
		go to dead_apt_loop;
		end;
	     end;

/* Print the interactive queue. */

	if tcm.apt_offset ^= "0"b then do;		/* look in interactvve queue */
	     if tcm.deadline_mode ^= 0 then
		call ioa_ ("DEADLINE QUEUE:");	/* processes with soft deadlines */
	     else call ioa_ ("INTERACTIVE QUEUE:");
	     aptep = addrel (tcmp, tcm.interactive_q.fp);
int_apt_loop:
	     if aptep ^= addr (tcm.interactive_q) then do;
		offset = fixed (rel (aptep), 18) - fixed (rel (tcmp), 18);
		call amu_$print_apte_bf (amu_info_ptr, aptep, offset);
		aptep = addrel (tcmp, apte.thread.fp);
		go to int_apt_loop;
		end;
	     end;

/* Print per-workclass queues. */

	if tcm.apt_offset ^= ""b then do;
	     wctep = addr (tcm.wcte (0));
	     do wc_number = 0 to 16;

		first_aptep = addrel (tcmp, wct_entry.thread.fp);
		print_this_wc = "0"b;

		/* print all queues, first check some things */
		if (tcm.deadline_mode = 0)		/* only if not in deadline mode */
		     & wct_entry.flags.defined	/* skip undefined ones */
		     & (wct_entry.realtime = 0)	/* skip realtime as not threaded here unless bug */
		     & wctep ^= first_aptep then	/* and skip the empties, too */
		     print_this_wc = "1"b;

		if print_this_wc then do;
		     call ioa_ ("WORKCLASS ^d QUEUE: credits = ^d ms.",
			wc_number, divide (wct_entry.credits, 1000, 17, 0), (first_aptep = wctep));
		     call print_queue (first_aptep, wctep);
		     end;

		wctep = addrel (wctep, WCTE_WORDS);
		end;				/* of loop through workclasses */
	     end;
          
          if ^all_sw then return;

/* Print unthreaded entries. */

          call ioa_ ("^/UNTHREADED:");
	do apte_number = 0 to tcm.apt_size - 1; 	/* loop through all the APTEs */
	     aptep = pointer (tcmp, (apte_number * tcm.apt_entry_size + binary (rel (addrel (tcmp, APT_BASE)), 17)));
	     offset = fixed (rel (aptep), 18) - fixed (rel (tcmp), 18);

	     if unspec (apte.thread) = ""b & apte.state ^= ""b then
	        call amu_$print_apte_bf (amu_info_ptr, aptep, offset);
	     else if apte.idle then call amu_$print_apte_bf (amu_info_ptr, aptep, offset);
	     end;

	return;					/* end tcq entry */

amu_tc_data_$find_apte:
     entry (P_amu_info_ptr, P_dbr, P_aptep, P_code);
	call amu_$check_info_hard (P_amu_info_ptr);
	amu_info_ptr = P_amu_info_ptr;
	call set_tcp_aptp;
	dbr_search = P_dbr;
	offset = fixed (rel (aptep), 18) - fixed (rel (tc_datap), 18);
	do i = 1 to hardcore_info.apt.count;
	     if dbr_search = binary (substr (unspec (apte.dbr), 1, 24)) then do;
		P_aptep = aptep;
		P_code = 0;
		return;
		end;
	     aptep = addrel (aptep, hardcore_info.apt.size);
	end;
	P_aptep = null ();
	P_code = -1;
	return;


amu_tc_data_$print_this_apte:
     entry (P_amu_info_ptr, P_offset, P_code);
	amu_info_ptr = P_amu_info_ptr;
	call set_tcp_aptp;

	offset = fixed (rel (aptep), 18) - fixed (rel (tc_datap), 18);
	do i = 1 to hardcore_info.apt.count;
	     if P_offset = offset then do;
		call amu_$print_apte (amu_info_ptr, aptep, offset, i);
		return;
		end;
	     aptep = addrel (aptep, hardcore_info.apt.size);
	     offset = fixed (rel (aptep), 18) - fixed (rel (tc_datap), 18);
	end;
	P_code = amu_et_$entry_not_found;
	return;
amu_tc_data_$get_dbr:
     entry (P_amu_info_ptr, P_offset, P_dbr);
	amu_info_ptr = P_amu_info_ptr;
	offset = P_offset;
	call set_tcp_aptp;
	aptep = addrel (tc_datap, offset);
	if apte.state = "0"b then P_dbr = -1;
	else P_dbr = binary (substr (unspec (apte.dbr), 1, 24));
	return;


amu_tc_data_$find_first_running:
     entry (P_amu_info_ptr, P_dbr, P_code);
	amu_info_ptr = P_amu_info_ptr;
	call set_tcp_aptp;
	do i = 1 to hardcore_info.apt.count;
	     if binary (apte.state) = RUNNING then do;
		P_dbr = binary (substr (unspec (apte.dbr), 1, 24));
		P_code = 0;
		return;
		end;
	     aptep = addrel (aptep, hardcore_info.apt.size);
	end;
	P_dbr = -1;
	P_code = amu_et_$proc_not_dumped;
	return;
%page;
print_queue:
          proc(Pfirst, Plast);

/* Prints a single workclass queue */

dcl (Pfirst, Plast) ptr parameter;

     do aptep = Pfirst
	      repeat (addrel (tcmp, apte.thread.fp))
                while (aptep ^= Plast);
                 
        offset = fixed (rel (aptep), 18) - fixed (rel (tcmp), 18);
        call amu_$print_apte_bf (amu_info_ptr, aptep, offset);
        end;

end print_queue;
%page;
set_tcp_aptp:
     proc;

	if hardcore_info.pointers.tc_data.fptr ^= null () then do;
	     tc_datap = hardcore_info.pointers.tc_data.fptr;
						/* tc_data is in dump */
	     aptep = hardcore_info.apt.foreign_ptr;
	     return;
	     end;


	else if hardcore_info.pointers.tc_data.lptr ^= null () then do;
	     tc_datap = hardcore_info.pointers.tc_data.lptr;
						/* tc_data is in local copy */
	     aptep = hardcore_info.apt.local_ptr;
	     return;
	     end;

	else do;
	     tc_datap = null ();
	     aptep = null ();
	     return;				/* we can not look at it */
	     end;
     end set_tcp_aptp;

%page;%include amu_info;
%page;%include amu_hardcore_info;
%page;%include apte;
%page;%include sdw;
%page;%include tcm;
%page;%include hc_lock;

     end amu_tc_data_;
