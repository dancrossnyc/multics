/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */
amu_translate_: proc ();

	return;					/* not an entrypoint */

/* format: style4,delnl,insnl,ifthenstmt,indnoniterend,ifthendo,ifthen,^thendo */

/* This procedure manages the translation table associated with an amu_info.
   It adds, deletes, and locates translation entries.

   Note: for the moment, the translation table is just an unordered array. It would
   be good to make it ordered someday, so we could search it with a binary search.

   09/06/80 W. Olin Sibert
*/

dcl  (
     P_amu_info_ptr pointer,
     P_segno fixed bin,
     P_translation_ptr pointer,
     P_size fixed bin,
     P_code fixed bin (35)
     ) parameter;

dcl  idx fixed bin;
dcl  segno fixed bin;

dcl  amu_error_ entry options (variable);

dcl  (
     amu_et_$bad_segno,
     amu_et_$trans_exists,
     amu_et_$no_translation
     ) fixed bin (35) external static;

dcl  (addr, min, null, unspec) builtin;

%page;

amu_translate_$get:
     entry (P_amu_info_ptr, P_segno, P_translation_ptr, P_code);

/* This entry is used to get a pointer to the translation info for a particular segment */

	amu_info_ptr = P_amu_info_ptr;
	segno = P_segno;

	if (segno < 0) | (segno > 4095) then do;
	     call amu_error_ (amu_info_ptr, amu_et_$bad_segno, "^d", segno);
	     P_code = amu_et_$bad_segno;
	     return;
	     end;
	if ^translation_table.valid (segno) then do;	/* segno does not exist in foreign address space */
	     P_code = amu_et_$no_translation;
	     P_translation_ptr = null ();
	     return;
	     end;

	do idx = 1 to translation_table.n_entries;
	     if segno = translation_table.segno (idx) then do;
		P_translation_ptr = addr (translation_table.array (idx));
		P_code = 0;
		return;
		end;
	end;

	P_translation_ptr = null ();			/* didn't find it */
						/*	call amu_debug$proc (amu_info_ptr);   */
	P_code = amu_et_$no_translation;
	return;					/* end of code for this entrypoint */

%page;

amu_translate_$allocate:
     entry (P_amu_info_ptr, P_size);

/* This entry is used to initially allocate an empty translation table of the specified size */

	amu_info_ptr = P_amu_info_ptr;
	alloc_translation_table_max_entries = P_size;

	allocate translation_table in (amu_area) set (amu_info.translation_table_ptr);

	unspec (translation_table) = ""b;

	translation_table.max_entries = alloc_translation_table_max_entries;
	translation_table.n_entries = 0;

	return;					/* end of code for this entrypoint */

%page;

amu_translate_$add:
     entry (P_amu_info_ptr, P_translation_ptr, P_segno, P_code);

/* This entry is used to add a new translation to the list of translations. */

	amu_info_ptr = P_amu_info_ptr;
	segno = P_segno;
	if translation_table.valid (segno) then do;
	     P_code = amu_et_$trans_exists;
	     return;
	     end;

add_it:
	if translation_table.n_entries >= translation_table.max_entries then
						/* too big, must reallocate */
	     call reallocate_translation_table ();

	idx = translation_table.n_entries + 1;
	translation_table.array (idx) = P_translation_ptr -> translation, by name;
	translation_table.valid (segno) = "1"b;
	translation_table.used (idx) = "1"b;
	translation_table.n_entries = idx;
	P_code = 0;
	return;					/* end of code for this entrypoint */
amu_translate_$force_add:
     entry (P_amu_info_ptr, P_translation_ptr, P_segno, P_code);
	amu_info_ptr = P_amu_info_ptr;
	segno = P_segno;
	if translation_table.valid (segno) then do;
	     do idx = 1 to translation_table.n_entries;
		if translation_table.array (idx).segno = segno then do;
		     translation_table.array (idx) = P_translation_ptr -> translation;
		     P_code = 0;
		     return;
		     end;
	     end;
	     end;
	else goto add_it;
	return;



%page;

reallocate_translation_table:
     proc ();

/* This procedure reallocates the translation table, copying all the old information,
   and doubling the size of the table. */

dcl  old_tt pointer;
dcl  new_tt pointer;
dcl  copy_idx fixed bin;


	old_tt = amu_info.translation_table_ptr;

	if translation_table.max_entries >= 4096 then
	     call amu_error_ (amu_info_ptr, 0, "Translation table is full. Cannot reallocate.");

	alloc_translation_table_max_entries = min (4096, 2 * translation_table.max_entries);
	allocate translation_table in (amu_area) set (new_tt);

	unspec (new_tt -> translation_table) = ""b;
	new_tt -> translation_table.max_entries = alloc_translation_table_max_entries;
	new_tt -> translation_table.n_entries = old_tt -> translation_table.n_entries;
	new_tt -> translation_table.valid_array = old_tt -> translation_table.valid_array;
	new_tt -> translation_table.used_array = old_tt -> translation_table.used_array;

	do copy_idx = 1 to new_tt -> translation_table.n_entries;
	     new_tt -> translation_table.array (copy_idx) = old_tt -> translation_table.array (copy_idx);
	end;


	amu_info.translation_table_ptr = new_tt;
	process_info.address_map_ptr = new_tt;
	free old_tt -> translation_table in (amu_area);

	return;
     end reallocate_translation_table;

%page;
%include amu_info;
%page;
%include amu_translation;
%page;
%include amu_process_info;
     end amu_translate_;
