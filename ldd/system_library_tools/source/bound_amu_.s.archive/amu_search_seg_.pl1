/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(86-12-02,Farley), approve(87-07-09,MCR7746),
     audit(87-07-16,Fawcett), install(87-07-28,MR12.1-1049):
     Corrected problem with array bounds of part1 & part2. Was going 1 over..
                                                   END HISTORY COMMENTS */


/* Modified 02/19/86 by Paul Leatherman to set header when seg not found */

amu_search_seg_:
     proc (P_amu_info_ptr, P_af, af_len, P_segno, P_offset, P_range, P_string, P_code);

/* format: style4,delnl,insnl,ifthenstmt,indnoniterend,ifthendo,ifthen,^thendo */

dcl  P_amu_info_ptr ptr,
     P_af ptr,
     P_segno fixed bin,
     P_offset fixed bin (18),
     P_range fixed bin (18),
     P_string char (12),
     af_len fixed bin(21),
     P_code fixed bin (25);

dcl  return_af char(af_len) var based(P_af);
dcl  af_sw bit(1);
dcl  segno fixed bin;
dcl  (offset, word_idx, range, part1_end, part2_end, part1_start, part2_start) fixed bin (18);
dcl  char_idx fixed bin;
dcl  code fixed bin (35);
dcl  string char (12);
dcl  one_found bit (1);
dcl  header char (80);
dcl  header_printed bit (1);
dcl  foo_len fixed bin (21);
dcl  ignore fixed bin;

dcl  1 trans_space like translation;
dcl  part1_word (part1_start:part1_end) bit (36) aligned based (translation.part1.ptr);
dcl  part2_word (part2_start:part2_end) bit (36) aligned based (translation.part2.ptr);
dcl  (search_data, search_mask) char (12) aligned;
dcl  mask bit (36) aligned;
dcl  data bit (36) aligned;
dcl  old_proc_idx fixed bin;
dcl  out_str char(256) var;
dcl  bit_string (12) bit (3) unal based;
dcl  1 char_bits (12) based,
       2 two bit (6) unal,
       2 last bit (3) unal;

dcl  amu_et_$no_translation fixed bin (35) ext static;
dcl  amu_et_$seg_not_dumped fixed bin (35) ext static;


dcl  amu_$translate_get entry (ptr, fixed bin, ptr, fixed bin (35)),
     amu_$translate_add entry (ptr, ptr, fixed bin, fixed bin (35)),
     amu_$fdump_translate_get_translation entry (ptr, ptr, ptr, fixed bin (35)),
     amu_$get_name_no_comp entry (ptr, ptr) returns(char(*)),
     amu_$return_val_per_process entry (ptr, fixed bin) returns (bit (1)),
     amu_$fdump_mpt_change_idx entry (ptr, fixed bin),
     (
     ioa_,
     ioa_$rsnnl
     ) entry () options (variable);

dcl (addr, baseptr, min, null, translate) builtin;
%page;
	amu_info_ptr = P_amu_info_ptr;
	string = P_string;
	offset = P_offset;
	range = P_range;
	segno = P_segno;
	one_found = "0"b;
          if P_af ^= null() then do;
	   af_sw = "1"b;
	   return_af = "";
	   end;
	else af_sw = "0"b;

	old_proc_idx = -1;
	if ^amu_$return_val_per_process (amu_info_ptr, segno) then do;
	     old_proc_idx = amu_info.process_idx;
	     call amu_$fdump_mpt_change_idx (amu_info_ptr, 0);
	     end;

	call amu_$translate_get (amu_info_ptr, segno, translation_ptr, code);
	if code ^= 0 then do;
	     if code = amu_et_$no_translation then do;
	          if amu_info.type = SAVED_PROC_TYPE then do;
		   P_code = code;
		   return;
		   end;
		translation_ptr = addr (trans_space);

		call amu_$fdump_translate_get_translation (amu_info_ptr, baseptr (segno), translation_ptr, code);
		if code = amu_et_$seg_not_dumped then do;
		     P_code = code;
		     return;
		end;
		if code ^= 0 then goto ERROR;
		call amu_$translate_add (amu_info_ptr, translation_ptr, segno, code);
		if code ^= 0 then goto ERROR;
		end;
	     else goto ERROR;
	     end;

	search_mask = translate (string, "077777777", "-01234567");
	search_data = translate (string, "001234567", "-01234567");
	part1_start = 0;
	part1_end = translation.part1.lth - 1;
	part2_start = translation.part1.lth;
	part2_end = translation.part1.lth + translation.part2.lth - 1;
	do char_idx = 1 to 12;
	     addr (data) -> bit_string (char_idx) = addr (search_data) -> char_bits (char_idx).last;
	     addr (mask) -> bit_string (char_idx) = addr (search_mask) -> char_bits (char_idx).last;
	end;
	if range ^= 0 then range = range + offset;
	if (range > (translation.part1.lth + translation.part2.lth)) | (range = 0) then
	     range = translation.part1.lth + translation.part2.lth - 1;
	

	call ioa_$rsnnl (" ^o ^a ^/^2xfrom ^o to ^o",header,foo_len,
	     segno,amu_$get_name_no_comp (amu_info_ptr,(baseptr(segno))),
	     offset,range);	

	header_printed = "0"b;
	
	do word_idx = offset to min (translation.part1.lth, range) - 1;

	     if (part1_word (word_idx) & mask) = data then do;
		if ^header_printed then do;
		     if ^af_sw then call ioa_ ("Segment ^a",header);
		     header_printed = "1"b;
		end;
		if af_sw then do;
		   call ioa_$rsnnl ("^o|^o ", out_str, ignore,segno, word_idx);
		   return_af = return_af || out_str;
		   end;
		else call ioa_ ("^o|^o = ^12.3b", segno, word_idx, part1_word (word_idx));
		one_found = "1"b;
		end;
	end;

	do word_idx = word_idx to range - 1;
	     if part2_word (word_idx) & mask = data then do;
		if ^header_printed then do;
		     if ^af_sw then call ioa_ ("Segment ^a",header);
		     header_printed = "1"b;
		end;
		if af_sw then do;
		   call ioa_$rsnnl ("^o|^o ", out_str, ignore,segno, word_idx);
		   return_af = return_af || out_str;
		   end;
		else call ioa_ ("^o|^o = ^12.3b", segno, word_idx, part2_word (word_idx));
		one_found = "1"b;
		end;
	end;

	code = 0;
ERROR:

	if ^one_found then
	     call ioa_ ("^/^13x No match in ^o ^a", segno,amu_$get_name_no_comp (amu_info_ptr,(baseptr(segno))));	
	if old_proc_idx >= 0 then call amu_$fdump_mpt_change_idx (amu_info_ptr, old_proc_idx);
	P_code = code;
	return;
%page;
%include amu_info;
%page;
%include amu_translation;


     end amu_search_seg_;
