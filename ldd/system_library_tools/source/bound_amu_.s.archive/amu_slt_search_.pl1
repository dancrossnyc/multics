/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(86-12-08,Farley), approve(87-07-09,MCR7746),
     audit(87-07-16,Fawcett), install(87-07-28,MR12.1-1049):
     Corrected get_init_seg_ptr entry to only check the segnam array when
     the slte.names_ptr is non-zero.
                                                   END HISTORY COMMENTS */


amu_slt_search_:
     proc;

/* format: style4,delnl,insnl,ifthenstmt,indnoniterend,ifthendo,ifthen,^thendo */

/* Modified 17 Oct 84 by BLB to add the get_init_seg_ptr entry */
/* Modified 10 Jan 85 by BLB to correct the dcl of code to be fixed bin(35) */

/* Parameters */

dcl  P_sltp ptr;
dcl  P_names_ptr ptr;
dcl  P_name char (32);
dcl  P_segp ptr;
dcl  P_code fixed bin (35);
dcl  P_segno fixed bin;

/* Automatic */

dcl  code fixed bin (35);
dcl  found bit (1);
dcl  (i, j) fixed bin;
dcl  name char (32);
dcl  segno fixed bin (18);
dcl  segp ptr;

/* Entries */

dcl  ring0_get_$segptr_given_slt entry (char (*), char (*), ptr, fixed bin (35), ptr, ptr);

/* Builtins */

dcl  (addr, addrel, baseno, baseptr, fixed, hbound, min, null) builtin;

/* External static */

dcl  error_table_$action_not_performed ext static fixed bin (35);
%page;
amu_slt_search_$get_seg_ptr:
     entry (P_sltp, P_names_ptr, P_name, P_segp, P_code);
	code = 0;
	sltp = P_sltp;
	names_ptr = P_names_ptr;
	name = P_name;
	call ring0_get_$segptr_given_slt ("", name, segp, code, sltp, names_ptr);
	if code = 0 then P_segp = segp;
	P_code = code;
	return;

/**** ********************************************************************* ****/

amu_slt_search_$get_init_seg_ptr:
     entry (P_sltp, P_names_ptr, P_name, P_segp, P_code);

/*
   This entrypoint is used to find the segno and pointer given a name. Called only when looking at an
   early dump.
*/

	code = 0;
	sltp = P_sltp;
	P_segp = null ();
	names_ptr = P_names_ptr;
	name = P_name;
	found = "0"b;
	do i = 0 to min (slt.last_init_seg, hbound (slt.seg, 1)) while (^found);
	     sltep = addr (slt.seg (i));
	     if slte.names_ptr ^= ""b then do;		/* only valid if non-zero */
		namep = addrel (names_ptr, slte.names_ptr);
		do j = 1 to namep -> segnam.count while (^found);
		     if name = namep -> segnam.names (j).name then do;
			found = "1"b;
			segno = fixed (namep -> segnam.names (j).segno, 18);
			end;
		end;
		end;
	end;
	if ^found then
	     code = error_table_$action_not_performed;
	else P_segp = baseptr (segno);

	P_code = code;
	return;
%page;
amu_slt_search_$get_seg_num:
     entry (P_sltp, P_names_ptr, P_name, P_segno, P_code);
	code = 0;
	sltp = P_sltp;
	names_ptr = P_names_ptr;
	name = P_name;
	call ring0_get_$segptr_given_slt ("", name, segp, code, sltp, names_ptr);
	if code = 0 then P_segno = fixed (baseno (segp), 17);
	P_code = code;
	return;

%page;
amu_slt_search_$get_first_sup_seg:
     entry (P_sltp, P_segno);
	sltp = P_sltp;
	P_segno = slt.first_sup_seg;
	return;

%page;
amu_slt_search_$get_last_sup_seg:
     entry (P_sltp, P_segno);
	sltp = P_sltp;
	P_segno = slt.last_sup_seg;
	return;
%page;
%include slt;
%page;
%include slte;

     end amu_slt_search_;
