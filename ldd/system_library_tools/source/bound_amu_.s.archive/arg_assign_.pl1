/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(87-07-09,Parisek), approve(87-07-09,MCR7746),
     audit(87-07-16,Fawcett), install(87-07-28,MR12.1-1049):
     Correct condition handling.
                                                   END HISTORY COMMENTS */


arg_assign_: proc ();

	return;					/* not an entrypoint */

/* format: style4,delnl,insnl,ifthenstmt,indnoniterend,ifthendo,ifthen,^thendo */

/* *	ARG_ASSIGN_  --  Utility procedure for options (variable) programs.
   *
   *	This procedure is used to assign values to and from references in an
   *	argument list. This is useful for options (variable) procedures, in that
   *	it allows the program to readily extract values from its argument list
   *	and assign them to its own variables.
   *
   *	All entries in arg_assign_ are declared options (variable), since the
   *	third argument may be of any type.
   *
   *	09/07/80, W. Olin Sibert, with a lot of help from probe_assign_value_.
*/

dcl  from_sw bit (1) aligned;
dcl  check_sw bit (1) aligned;

dcl  caller_alp pointer;
dcl  caller_argno fixed bin;				/* arg list info from our caller */
dcl  my_alp pointer;
dcl  my_arg_count fixed bin;
dcl  code fixed bin (35);
dcl  myname char (32);

dcl  1 arg_info aligned based,
       2 ndims fixed bin,
       2 comp_data aligned like computational_data;

dcl  1 arg1 aligned like arg_info;
dcl  1 arg2 aligned like arg_info;
dcl  1 to_arg aligned like arg_info;
dcl  1 from_arg aligned like arg_info;

dcl  (
     error_table_$bad_conversion,
     error_table_$noarg
     ) fixed bin (35) external static;

dcl  area_assign_ entry (pointer, pointer);
dcl  arg_assign_$to_arg entry options (variable);
dcl  assign_ entry (pointer, fixed bin, fixed bin (35), pointer, fixed bin, fixed bin (35));
dcl  assign_$computational_ entry (pointer, pointer, fixed bin (35));
dcl  cu_$arg_count entry (fixed bin);
dcl  based_ptr pointer aligned based;			/* overlays for various data types */
dcl  based_integer fixed bin (35) aligned based;
dcl  based_packed_ptr pointer unaligned based;
dcl  based_label label based;
dcl  based_entry entry based;
dcl  based_file file based;

dcl  temp_ptr pointer;

dcl  cu_$arg_list_ptr entry (pointer);
dcl  cu_$arg_ptr_rel entry (fixed bin, pointer, fixed bin (21), fixed bin (35), pointer);
dcl  decode_descriptor_ entry (pointer, fixed bin, fixed bin, bit (1) aligned, fixed bin, fixed bin (24), fixed bin (35));
dcl  sub_err_ entry options (variable);

dcl  WHOAMI char (32) internal static options (constant) init ("arg_assign_");
dcl  STOP char (1) unaligned internal static options (constant) init ("s");

dcl  (size, conversion, stringsize) condition;

dcl  (addr, addrel, binary, string, null) builtin;

%page;

arg_assign_$from_arg:
     entry () options (variable);

/* call arg_assign_$from_arg (arg_list_ptr, arg_index, TARGET); */

	from_sw = "1"b;
	check_sw = "0"b;
	myname = "arg_assign_$from_arg";
	goto COMMON;


arg_assign_$to_arg:
     entry () options (variable);

/* call arg_assign_$to_arg (arg_list_ptr, arg_index, SOURCE); */

	from_sw = "0"b;
	check_sw = "0"b;
	myname = "arg_assign_$to_arg";
	goto COMMON;


arg_assign_$from_arg_check:
     entry () options (variable);

/* call arg_assign_$from_arg_check (arg_list_ptr, arg_index, TARGET, code); */

	from_sw = "1"b;
	check_sw = "1"b;
	myname = "arg_assign_$from_arg_check";
	goto COMMON;


arg_assign_$to_arg_check:
     entry () options (variable);

/* call arg_assign_$to_arg_check (arg_list_ptr, arg_index, SOURCE, code); */

	from_sw = "0"b;
	check_sw = "1"b;
	myname = "arg_assign_$to_arg_check";
	goto COMMON;


COMMON:

	call cu_$arg_count (my_arg_count);		/* find out whether the arg count is proper */
	if (check_sw & (my_arg_count ^= 4)) | (^check_sw & (my_arg_count ^= 3)) then
	     call sub_err_ (0, WHOAMI, STOP, (null ()), 0, "^a: Invalid calling sequence. ^[4^;3^] arguments required.",
		myname, check_sw);

	call cu_$arg_list_ptr (my_alp);

%page;

	call get_arg_info (my_alp, 1, arg1);		/* get the arg_list_ptr argument */
	call get_arg_info (my_alp, 2, arg2);		/* and the arg_count argument */

	if (arg1.data_type ^= pointer_dtype) | (arg1.ndims ^= 0) then
	     call sub_err_ (0, WHOAMI, STOP, (null ()), (0), "^a: First argument must be a pointer", myname);

	if arg1.packed then				/* assign the arg list pointer */
	     caller_alp = arg1.address -> based_packed_ptr;
	else caller_alp = arg1.address -> based_ptr;

	if (^data_type_info_$info (arg2.data_type).arithmetic) | (arg2.ndims ^= 0) then
	     call sub_err_ (0, WHOAMI, STOP, (null ()), (0), "^a: Second argument must be a number.", myname);

	if arg2.data_type = real_fix_bin_1_dtype then	/* optimize the anticipated case */
	     caller_argno = arg2.address -> based_integer;

	else call assign_ (arg2.address,		/* otherwise, call assign_ to do the job */
		((2 * arg2.data_type) + binary (arg2.packed, 1)), ((262144 * arg2.scale) + arg2.prec_or_length),
		addr (caller_argno), (2 * real_fix_bin_1_dtype), 35);

	if from_sw then do;				/* assigning from arg in arglist to our third arg */
	     call get_arg_info (caller_alp, caller_argno, from_arg);
	     call get_arg_info (my_alp, 3, to_arg);
	     end;

	else do;					/* assigning from our third arg to caller argument */
	     call get_arg_info (caller_alp, caller_argno, to_arg);
	     call get_arg_info (my_alp, 3, from_arg);
	     end;

%page;

	if (from_arg.ndims > 0) | (to_arg.ndims > 0) then
	     call sub_err_ (0, WHOAMI, STOP, (null ()), (0), "^a: Array assignment not supported.", myname);

/* set up condition handlers */

	     on condition (size)
		begin;
		     code = error_table_$bad_conversion;
		     goto ERROR_RETURN;
		end;

	     on condition (stringsize)
		begin;
		     code = error_table_$bad_conversion;
		     goto ERROR_RETURN;
		end;

	     on condition (conversion)
		begin;
		     code = error_table_$bad_conversion;
		     goto ERROR_RETURN;
		end;


	if data_type_info_$info (to_arg.data_type).computational then do;
	     if ^data_type_info_$info (from_arg.data_type).computational then signal condition (conversion);
						/* Sorry, we only take tunas that taste good. */

	     if (to_arg.data_type = real_fix_bin_1_dtype) & (from_arg.data_type = real_fix_bin_1_dtype) then
		to_arg.address -> based_integer = from_arg.address -> based_integer;
						/* optimize common case */

/* We could productively optimize some other assignments here, like char strings and the like,
   but it's not worth the trouble in the initial version. */

	     else do;				/* otherwise, call for Phillip Morris */
		call assign_$computational_ (addr (to_arg.comp_data), addr (from_arg.comp_data), code);
		if code ^= 0 then
		     if check_sw then
			goto ERROR_RETURN;
		     else signal condition (conversion);
		end;				/* of calling assign_ */
	     end;					/* of handling computational data */

%page;

	else if (to_arg.data_type = pointer_dtype) then do;
	     if from_arg.data_type ^= pointer_dtype then signal condition (conversion);

	     if from_arg.packed then
		temp_ptr = from_arg.address -> based_packed_ptr;
	     else temp_ptr = from_arg.address -> based_ptr;

	     if to_arg.packed then
		to_arg.address -> based_packed_ptr = temp_ptr;
	     else to_arg.address -> based_ptr = temp_ptr;
	     end;					/* of poiner assignment */

	else if (to_arg.data_type = offset_dtype) | (from_arg.data_type = offset_dtype) then
	     call sub_err_ (0, WHOAMI, STOP, (null ()), (0), "^a: Assignment of offsets not supported.", myname);

/* Actually, we COULD support assignments of null offsets to pointers, and null pointers to
   offsets, but it hardly seems worthwhile. Nobody uses offsets, anyway. */

/* I do not know whether this procedure should be in the business of dealing with
   label_runtime_dtype and entry_runtime_dtype; probe_assign_value_ is, but I think
   that's because it deals with stu_. As far as I know, anything which appears in an
   argument list ought to be either label_dtype or entry_dtype.
*/


	else if (to_arg.data_type = label_dtype) then do;
	     if from_arg.data_type ^= label_dtype then signal condition (conversion);

	     to_arg.address -> based_label = from_arg.address -> based_label;
	     end;

	else if (to_arg.data_type = entry_dtype) then do;
	     if from_arg.data_type ^= entry_dtype then signal condition (conversion);

	     to_arg.address -> based_entry = from_arg.address -> based_entry;
	     end;

	else if (to_arg.data_type = file_dtype) then do;
	     if from_arg.data_type ^= file_dtype then signal condition (conversion);

	     to_arg.address -> based_file = from_arg.address -> based_file;
	     end;

	else if (to_arg.data_type = area_dtype) then do;
	     if from_arg.data_type ^= area_dtype then signal condition (conversion);

	     call area_assign_ (to_arg.address, from_arg.address);
	     end;

	else call sub_err_ (0, WHOAMI, STOP, (null ()), (0), "^a: Cannot assign from type ^d to type ^d.",
		from_arg.data_type, to_arg.data_type);

	code = 0;					/* successful */

ERROR_RETURN:					/* come here for error exit */
	if check_sw then do;
	     revert condition (size);
	     revert condition (stringsize);
	     revert condition (conversion);
	     end;

	if check_sw then /* assign the code */ call arg_assign_$to_arg (my_alp, 4, code);
						/* we can do this since this call doesn't have a fourth arg */

	return;					/* all done */

%page;

get_arg_info:
     proc (P_alp, P_argno, P_arg_info);

/* This procedure fills in the arg_info structure for the specified argument. */

dcl  (
     P_alp pointer,
     P_argno fixed bin
     ) parameter;

dcl  1 P_arg_info aligned like arg_info parameter;

dcl  packed_bit bit (1) aligned;


	call cu_$arg_ptr_rel (P_argno, P_arg_info.address, (0), code, P_alp);
	if check_sw & (code = error_table_$noarg) then goto ERROR_RETURN;
						/* be silent about this one */
	if code ^= 0 then call sub_err_ (code, "arg_assign_", STOP, (null ()), 0, "^a: Argument ^d.", myname, P_argno);

	call decode_descriptor_ (P_alp, P_argno, P_arg_info.data_type, packed_bit, P_arg_info.ndims,
	     P_arg_info.prec_or_length, P_arg_info.scale);

	string (P_arg_info.flags) = ""b;
	P_arg_info.packed = packed_bit;
	P_arg_info.picture_image_ptr = null ();

/* I do not know whether it is necessary for this procedure to deal with pictures. If it is,
   I surely don't know how to do it. I will therefore leave it out for now. */

	if data_type_info_$info (P_arg_info.data_type).varying then
						/* KLUDGE to adjust varying string arg ptr */
	     P_arg_info.address = addrel (P_arg_info.address, -1);

	return;
     end get_arg_info;

%page;
%include std_descriptor_types;
%page;
%include data_type_info_;
%page;
%include computational_data;

     end arg_assign_;
