/****^  ************************************************************
        *                                                          *
        * Copyright, (C) Honeywell Bull Inc., 1988                 *
        *                                                          *
        * Copyright, (C) Honeywell Information Systems Inc., 1982  *
        *                                                          *
        * Copyright, (C) Honeywell Information Systems Inc., 1980. *
        *                                                          *
        ************************************************************ */



/* format: style2 */
reader_driver_:
     procedure;

	return;					/* this is not a legal entry */

/* Standard reader device driver control module for the I/O daemon. */

/* Stolen from punch_driver_ 12 24 79 */
/* Cleaned up for installation October 1980 */
/* Coded by Benson I. Margulies, give or take the above */
/* Modified: February 23, 1985 by C. Marker to use version 5 message segments */


/****^  HISTORY COMMENTS:
  1) change(88-08-19,Brunelle), approve(88-08-19,MCR7911),
     audit(88-10-17,Wallman), install(88-10-28,MR12.2-1199):
     Upgraded to version 5 iod tables.
                                                   END HISTORY COMMENTS */


/*        BASED  */

	dcl     sys_dir		 char (168) based (iodd_static.sys_dir_ptr);

/*	AUTOMATIC VARIABLES */

	dcl     age		 fixed bin;
	dcl     date_string		 char (24);
	dcl     code		 fixed bin (35);
	dcl     i			 fixed bin;	/* general index variable */
	dcl     io_stat		 bit (72) aligned;	/* ios_ status code */
	dcl     major_args		 char (major_args_length) based (major_args_ptr);
	dcl     major_args_ptr	 ptr;
	dcl     major_args_length	 fixed bin;
	dcl     major_args_name	 char (256) varying;
	dcl     retry_sw		 bit (1);

	dcl     1 st		 aligned based (addr (io_stat)),
						/* breakdown of status code */
		2 code		 fixed bin (35),
		2 flags		 bit (36);

	dcl     station		 char (32);

/*	EXTERNAL ENTRIES    */

	dcl     add_char_offset_	 entry (ptr, fixed bin (21)) returns (ptr) reducible;
	dcl     date_time_		 entry (fixed bin (71), char (*));
	dcl     expand_pathname_$component
				 entry (char (*), char (*), char (*), char (*), fixed bin (35));
	dcl     initiate_file_$component
				 entry (char (*), char (*), char (*), bit (*), ptr, fixed bin (24),
				 fixed bin (35));
	dcl     iodd_listen_	 entry (ptr);
	dcl     iodd_msg_		 entry options (variable);
	dcl     iodd_parse_$args	 entry (char (*) var, char (*)) returns (char (256) var);
	dcl     ios_$setsize	 entry (char (*) aligned, fixed bin (21), bit (72) aligned);
	dcl     ios_$attach		 entry (char (*) aligned, char (*) aligned, char (*) aligned, char (*) aligned,
				 bit (72) aligned);
	dcl     ios_$detach		 entry (char (*) aligned, char (*) aligned, char (*) aligned, bit (72) aligned);
	dcl     ios_$getsize	 entry (char (*) aligned, fixed bin, bit (72) aligned);
	dcl     pool_manager_$init	 entry (char (*), fixed bin, bit (36) aligned, fixed bin (35));
	dcl     pool_manager_$clean_pool
				 entry (char (*), fixed bin, fixed bin, fixed bin (35));
	dcl     read_cards_		 entry (char (*), ptr, char (*), bit (1) aligned, fixed bin (35));
	dcl     read_cards_$set_rqt	 entry (char (*), char (*), fixed bin (35));
	dcl     read_cards_$set_station
				 entry (char (*), fixed bin (35));

/*	INTERNAL STATIC   */


	dcl     pool_dir		 char (168) internal static;
	dcl     meter_sw		 bit (1) int static;/* TRUE - if we are to keep metering data (future) */
	dcl     p			 ptr int static;
	dcl     both		 fixed bin int static options (constant) init (0);
	dcl     master		 fixed bin int static options (constant) init (1);
	dcl     slave		 fixed bin int static options (constant) init (2);
	dcl     normal		 fixed bin int static options (constant) init (1);
	dcl     error		 fixed bin int static options (constant) init (2);
	dcl     whoami		 char (25) int static options (constant) init ("reader_driver_");
	dcl     terminals		 (2) int static char (32);
	dcl     DEFAULT_STATION	 char (6) init ("reader") int static options (constant);

	dcl     card_dims		 (3) aligned int static /* format stream (switch) data structure */ char (32)
				 init ("mcc_", "viipunch_", "raw_") options (constant);

/*	BUILTINS    */

	dcl     (addr, clock, convert, divide, rtrim)
				 builtin;

/*	CONDITIONS   */

	dcl     (cleanup, card_command_level)
				 condition;


/*	EXTERNAL STATIC -- ERROR TABLE ENTRIES     */

	dcl     error_table_$action_not_performed
				 fixed bin (35) ext static;
	dcl     error_table_$fatal_error
				 fixed bin (35) ext static;
	dcl     error_table_$ionmat	 fixed bin (35) ext static;

	dcl     1 card_info		 aligned static like card_stream_info;
%page;
%skip (5);
init:
     entry (arg_p);

	dcl     arg_p		 ptr;

	stat_p = arg_p;				/* put the arg into static for easy reference */
	text_strings_ptr = iodd_static.text_strings_ptr;	/* get ptr to i/o daemon table text area */
	p = iodd_static.driver_ptr;			/* get current driver status ptr */
	terminals (master) = iodd_static.master_input;
	terminals (slave) = "Undefined";
	retry_sw = "1"b;				/* retry attachments once on error */

	if iodd_static.attach_type ^= ATTACH_TYPE_IOM
	then do;					/* this driver expects an IOM channel */
		code = error_table_$fatal_error;
		call iodd_msg_ (error, master, code, whoami,
		     "This driver requires a reader attached through the IOM.");
		return;				/* quit now */
	     end;

	if iodd_static.assigned_devices > 1
	then do;					/* be sure all is correct */
		code = error_table_$fatal_error;
		call iodd_msg_ (error, master, code, whoami,
		     "Multiple minor devices are not supported by the reader driver.");
		return;
	     end;

/* see if user wants major args to be found in a segment */
	major_args_ptr = add_char_offset_ (addr (text_strings.chars), (iodd_static.major_args.first_char));
	major_args_length = iodd_static.major_args.total_chars;
	major_args_name = iodd_parse_$args ("indirect=", major_args);
	if major_args_name ^= ""
	then do;					/* yes, grab that segment */
		call initiate_the_file (major_args_name, major_args_ptr, major_args_length, "major_args", code);
		if code ^= 0
		then go to clean_out;
	     end;

	iodd_static.device_dim = iodd_parse_$args ("dim=", major_args);
						/* see if a dim was specified */
	if iodd_static.device_dim = ""
	then iodd_static.device_dim = "crz";		/* no, use the default */
	iodd_static.dev_out_stream = "Undefined";
	iodd_static.dev_io_stream = iodd_static.dev_out_stream;
						/* make them the same */
	iodd_static.dev_in_stream = "card_in_stream";

/* TIME TO GET STATION ID */

	station = iodd_parse_$args ("station=", major_args);
	if station = ""
	then station = DEFAULT_STATION;
	call read_cards_$set_station (station, code);
	if code ^= 0
	then do;
		call iodd_msg_ (error, master, code, whoami, "Fatal Error: Could not set station to ^a.", station);
		return;
	     end;
	call read_cards_$set_rqt ("printer", "punch", code);
						/* make the rje active functions work right */

	if code ^= 0
	then do;
		call iodd_msg_ (error, master, code, whoami, "Fatal Error: Unable to set default request types.");
		return;
	     end;

attach:
	call ios_$attach (iodd_static.dev_in_stream, iodd_static.device_dim, iodd_static.attach_name, "", io_stat);
	if st.code ^= 0
	then do;
		if st.code = error_table_$ionmat & retry_sw
		then do;				/* can we try again */
retry:
			retry_sw = "0"b;		/* yes, but only once */
			call detach_all;		/* clear the slate */
			go to attach;
		     end;
		call iodd_msg_ (2, master, st.code, whoami, "Fatal Error: Unable to attach channel ^a",
		     iodd_static.attach_name);
		go to clean_out;
	     end;
	if iodd_static.test_entry
	then call ios_$setsize (iodd_static.dev_in_stream, 972, io_stat);
	card_info.control_stream = "mcc_card_input_";	/* we use this to read control cards */
	card_info.n_streams = 4;			/* we will support 4 input formats */

	card_info.format (1) = "mcc";			/* first describe the MCC format stream */
	card_info.name (1) = "mcc_card_input_";		/* this is also the control stream */
	card_info.format (2) = "viipunch";		/* next we have the 7 punch format */
	card_info.name (2) = "viipunch_card_input_";

	card_info.format (3) = "raw";			/* next is the raw card format */
	card_info.name (3) = "raw_card_input_";

	card_info.format (4) = "rmcc";		/* last is rmcc for compatability with remote input */
	card_info.name (4) = "mcc_card_input_";		/* this is the same as mcc format */

	if iodd_static.test_entry
	then pool_dir = rtrim (iodd_static.sys_dir_ptr -> sys_dir) || ">card_pool";
	else pool_dir = "System_Card_Pool";
	call pool_manager_$init (pool_dir, 10, "01000"b, code);
	if code ^= 0
	then do;
		call iodd_msg_ (2, master, code, whoami, "Fatal Error: cannot initialize card pool.");
		go to clean_out;
	     end;
	on cleanup call detach_all;			/* for reinit, no_coord, logout, new_device, etc... */

/*	set up the reader code formatting dims corresponding to the dprint_msg outer_module variable */

	do i = 1 to 3;
	     call ios_$attach (card_info.name (i), card_dims (i), iodd_static.dev_in_stream, "", io_stat);
	     if st.code ^= 0
	     then do;
		     if st.code = error_table_$ionmat & retry_sw
		     then go to retry;		/* start_over */
		     call iodd_msg_ (2, master, st.code, whoami, "Fatal Error: Unable to attach ^a to ^a.",
			card_info.name (i), iodd_static.dev_in_stream);
		     go to clean_out;
		end;
	end;

	do i = 1 to card_info.n_streams;
	     call ios_$getsize (card_info.name (i), card_info.el_size (i), io_stat);
	     if st.code ^= 0
	     then do;
		     call iodd_msg_ (2, master, st.code, whoami, "Fatal Error: Invalid getsize call for dim ^a.",
			card_dims (i));
		     go to clean_out;
		end;
	end;

	if iodd_static.ctl_term.attached
	then do;
		call iodd_msg_ (2, master, st.code, whoami, "The reader driver does not support a ctl terminal.");
		go to clean_out;
	     end;

	meter_sw = "0"b;				/* no metering  (future) */

	call date_time_ (clock (), date_string);	/* get set for ready message */

	call iodd_msg_ (1, both, 0, "", "^/^a driver ready for station ^a at ^16a^/", p -> driver_status.dev_name_label,
	     station, date_string);

	call iodd_listen_ (stat_p);			/* iodd_listen_ will never return */

clean_out:					/* this label is for error recovery */
	call detach_all;
	return;
%page;
request:
     entry;

/*
   This is the entry which is called by the iodd_listen_ procedure when a request
   for this driver has been received from the coordinator.

   The purpose of the code for this entry of the reader driver is to
   complain bitterly!! */

	call iodd_msg_ (2, master, 0, "", "The reader device can't accept requests.");

	return;
%page;
command:
     entry (source, state, arg_list_p, c_code);

	dcl     source		 fixed bin;	/* 1 = master console, 2 = slave */
	dcl     state		 fixed bin;	/* 0 = not quite ready to handle a request */
						/* 1 = drivers are ready */
						/* 2 = command entered after a quit */
	dcl     arg_list_p		 ptr;		/* ptr to structure returned by parse_command_ */
	dcl     c_code		 fixed bin (35);	/* error code: zero if command handled correctly */
						/* error_table_ code for bad syntax or unknown command */
	dcl     1 arg_list		 aligned based (arg_list_p),
						/* parse_command_ structure */
		2 max_tokens	 fixed bin,	/* space allocated, do not change */
		2 n_tokens	 fixed bin,	/* number of tokens from command line (including cmd) */
		2 command		 char (64) var,	/* the first token is the command */
		2 arg		 (n_tokens - 1) char (64) var;
						/* the other tokens are args to the command */

	if command = "help"
	then do;
		call iodd_msg_ (normal, source, 0, "", "^/** Commands for the reader driver **^/");
		call iodd_msg_ (normal, source, 0, "", "clean_pool <days allowed to remain>");
		call iodd_msg_ (normal, source, 0, "", "read_cards");

		c_code = 0;			/* it was understood */
	     end;
	if command = "read_cards" | command = "readcards"
	then do;
		c_code = 0;
		call iodd_msg_ (normal, source, 0, "", "Card input started.");

		on card_command_level goto abort_read;	/* grab control after record quota overflow */

		call read_cards_ (pool_dir, addr (card_info), terminals (source), (iodd_static.test_entry), code);
		if code ^= 0
		then do;
			call iodd_msg_ (normal, source, code, whoami, "Check card deck format.");
			c_code = code;
			return;
		     end;
		return;

abort_read:
		call iodd_msg_ (normal, source, 0, "", "Use the ""clean_pool"" command and retry card input.");
		go to cmd_error;
	     end;

	if command = "clean_pool" | command = "cleanpool"
	then do;					/* garbage collect the card pool */
		if arg_list.n_tokens < 2
		then do;				/* we must have an age arg */
			call iodd_msg_ (normal, source, 0, "",
			     "Argument missing: days allowed to remain in the pool.");
			go to cmd_error;
		     end;
		age = convert (age, arg_list.arg (1));	/* convert to binary */
		if age < 1
		then do;				/* be sure the value is right */
			call iodd_msg_ (normal, source, 0, "", "Invalid argument: ^a", arg (1));
			go to cmd_error;
		     end;
		call pool_manager_$clean_pool (pool_dir, age, 10, code);
						/* let pool_manager_ do the work */
		if code ^= 0
		then call iodd_msg_ (normal, source, code, whoami, "Unable to clean the card pool.");
		c_code = code;
		return;
	     end;

	return;					/* return any undefined commands without changing anything */

cmd_error:
	c_code = error_table_$action_not_performed;
	return;
%page;

detach_all:
     proc;

/* cleanup proc to detach all possible streams we could have attached */

	call ios_$detach (iodd_static.dev_in_stream, "", "", io_stat);
	do i = 1 to card_info.n_streams;
	     call ios_$detach (card_info.name (i), "", "", io_stat);
	end;
	return;

     end detach_all;
%page;

initiate_the_file:
     proc (pathname_string, args_ptr, args_length, message, code);

	dcl     pathname_string	 char (256) varying;
	dcl     args_ptr		 ptr;
	dcl     args_length		 fixed bin;
	dcl     message		 char (*);
	dcl     code		 fixed bin (35);

	dcl     dirname		 char (168);
	dcl     entname		 char (32);
	dcl     compname		 char (32);
	dcl     args_bc		 fixed bin (24);

	call expand_pathname_$component ((pathname_string), dirname, entname, compname, code);
	if code ^= 0
	then return;
	call initiate_file_$component (dirname, entname, compname, R_ACCESS, args_ptr, args_bc, code);
	if code ^= 0
	then return;
	args_length = divide (args_bc + 8, 9, 17, 0);

     end initiate_the_file;
%page;
%include access_mode_values;
%page;
%include card_stream_info;
%page;
%include driver_status;
%page;
%include iod_constants;
%page;
%include iod_tables_hdr;
%page;
%include iodd_static;
%page;
%include mseg_message_info;
%page;
%include request_descriptor;

     end reader_driver_;
