/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */

/* format: style2 */

validate_card_input_:
     procedure options (separate_static);

/* Changed by DRV 5/78 to add check for default password acs and to allow changing of card input password */
/* Modified by J. C. Whitmore, 5/24/79, to add locking to the PNT changes and hash table changes */
/* Modified by C. Hornig, January 1980, for new PNT. */
/* Modified 1984-08-16 by E. Swenson for Version 2 PNT */
/* Modified 1984-12-11 by E. Swenson to handle aliases correctly. */

/* Automatic */
	dcl     mode		 fixed bin (5);
	dcl     ec		 fixed bin (35);
	dcl     username		 char (32);

	dcl     1 pnte		 aligned like pnt_entry;

/* Constant */

	dcl     access		 (2) bit (5) static init ("01000"b, "00100"b) options (constant);

/* Internal Static */

	dcl     sysdir		 char (168) static init (">system_control_1");

/* External Static */

	dcl     error_table_$bad_arg	 fixed bin (35) external static;
	dcl     error_table_$bad_password
				 fixed bin (35) external static;
	dcl     error_table_$action_not_performed
				 fixed bin (35) external static;
	dcl     iox_$error_output	 pointer external static;

/* External Entries */

	dcl     continue_to_signal_	 entry (fixed bin (35));
	dcl     convert_status_code_	 entry (fixed bin (35), char (8), char (100));
	dcl     hcs_$get_user_effmode	 entry (char (*), char (*), char (*), fixed bin (3), fixed bin (5),
				 fixed bin (35));	/* SWS */
	dcl     ioa_$ioa_switch	 entry options (variable);
	dcl     ioa_$rsnnl		 entry options (variable);
	dcl     pnt_manager_$test	 entry (character (*));
	dcl     pnt_manager_$network_get_entry
				 entry (char (*), char (*), ptr, fixed bin (35));
	dcl     pnt_manager_$update_entry
				 entry (ptr, bit (1), bit (1), fixed bin (35));
	dcl     system_privilege_$seg_priv_on
				 entry (fixed bin (35));
	dcl     system_privilege_$seg_priv_off
				 entry (fixed bin (35));

/* Builtins */

	dcl     (bit, rtrim)	 builtin;

/* Program */

/* * * * * * * * * * USER * * * * * * * * * */

user:
     entry (person, project, password, new_password, station_id, type, error_message, code);

	dcl     (person, project, password, new_password, station_id, error_message)
				 char (*) parameter;
	dcl     code		 fixed bin (35) parameter;
	dcl     type		 fixed bin parameter;
						/* 1 -> data, 2 -> RJE */

	code = 0;
	error_message = "";

/* First check: In the system rcp directory, there must exist a segment called station_id.acs,
   and the user must have R access for bulk data input and E access for RJE. . */

	username = rtrim (person) || "." || rtrim (project) || ".p";
	call hcs_$get_user_effmode (rtrim (sysdir) || ">rcp", rtrim (station_id) || ".acs", username, 4, mode, ec);
	if ec ^= 0
	then call error (ec, "Unable to check user access to station ACS");
	if (bit (mode) & access (type)) ^= access (type)
	then call error (0, "Incorrect user access to station");

/* Second check: In user's mailbox directory >udd>project>person, there must exist
   a segment called card_input.acs, and station_id.*.* must have R access for bulk data
   input and E access for RJE. */

	call hcs_$get_user_effmode (">udd>" || rtrim (project) || ">" || person, "card_input.acs",
	     rtrim (station_id) || ".*.*", 4, mode, ec);
	if ec ^= 0
	then call error (ec, "Unable to check station access to user access control segment");
	if (bit (mode) & access (type)) ^= access (type)
	then call error (0, "Incorrect station access for user");

/**** Third check:  If a password is supplied (and it must be for
      RJE input) it must be the valid network password in the PNT.
      If it is not supplied, the user must have access to the acs
      segment >sc1>rcp>card_input_password.acs. */

	if password = ""
	then if type ^= 1				/* DATA */
	     then call error (0, "No password supplied");
	     else do;
		     call hcs_$get_user_effmode (rtrim (sysdir) || ">rcp", "card_input_password.acs", username, 4,
			mode, ec);
		     if ec ^= 0
		     then call error (ec, "Unable to check user access to card_input_password.acs");
		     if (bit (mode) & access (1)) ^= access (1)
		     then call error (0, "Incorrect access to card_input_password.acs");
		end;
	else call check_password (person, (password), (new_password));

RETURN_TO_CALLER:
	return;

/* ============================================= */

station:
     entry (station_id, password, error_message, code);

	code = 0;
	error_message = "";

/**** Station names are registed in the PNT with only a network
      password.  The password must match. */

	call check_password (station_id, (password), "");
	return;

/* * * * * * * * * * TEST * * * * * * * * * */

test:
     entry (tdir);
	dcl     tdir		 char (*);

	sysdir = tdir;
	call pnt_manager_$test (sysdir);
	return;

/* * * * * * * * * * * CHECK_PASSWORD * * * * * * * * * */

check_password:
     procedure (Uid, Password, New_password);
	dcl     Uid		 char (*) parameter;
	dcl     (Password, New_password)
				 char (8) aligned parameter;
	dcl     dont_use_aim_priv	 bit aligned static init ("0"b);
	dcl     aim_ind		 fixed bin (35) init (-1);
						/* When zero, priv has been enabled */
	dcl     code		 fixed bin (35);
	dcl     (any_other, cleanup, linkage_error)
				 condition;

/**** First verify the password and get the PNT entry.*/

	call pnt_manager_$network_get_entry (Uid, (Password), addr (pnte), code);
	if code ^= 0
	then if code = error_table_$bad_password
	     then call error (0, "Incorrect password supplied.");
	     else call error (code, "Checking card password.");

/**** If we get here, the password was valid.  Set Uid to the userid in
      the PNT entry (in case an alias was used). */

	Uid = pnte.user_id;

/**** See if the user wants it changed. */

	if New_password ^= ""
	then do;					/* Changing password */
		on any_other
		     begin;			/* keep tight control over AIM */
			if aim_ind = 0
			then do;			/* Priv has been enabled */
				call priv_off ();	/* Disable */
				call ioa_$ioa_switch (iox_$error_output,
				     "validate_card_input_: Fault with AIM privilege on. Privilege revoked.");
			     end;
			call continue_to_signal_ (code);
		     end;

		on cleanup call priv_off;

		if ^dont_use_aim_priv
		then do;				/* set AIM privilege */
			on linkage_error
			     begin;
				dont_use_aim_priv = "1"b;
				goto no_aim;
			     end;
			call system_privilege_$seg_priv_on (aim_ind);
no_aim:
			revert linkage_error;
		     end;
		pnte.network_password = New_password;
		call pnt_manager_$update_entry (addr (pnte), "0"b,
						/* don't set regular password */
		     "1"b,			/* do set network password */
		     code);
		call priv_off ();
		if code ^= 0
		then call error (code, "Changing network password.");
	     end;					/* End of changing password code */
	return;
%page;
priv_off:
     procedure ();

	dcl     code		 fixed bin (35);

	if aim_ind = 0
	then do;
		call system_privilege_$seg_priv_off (code);
		aim_ind = -1;
	     end;
     end priv_off;
     end check_password;
%page;
/* * * * * * * * * * ERROR * * * * * * * * * */

error:
     proc (Ec, String);
	dcl     Ec		 fixed bin (35) parameter;
	dcl     String		 char (*) parameter;
	dcl     long		 char (100);

	if Ec ^= 0
	then call convert_status_code_ (Ec, (""), long);

	call ioa_$rsnnl ("^a ^[because ^a^]", error_message, (0), String, (Ec ^= 0), long);

	if Ec = 0
	then code = error_table_$action_not_performed;
	else code = Ec;
	goto RETURN_TO_CALLER;
     end error;

/* format: off */
%page;%include pnt_entry;
/* format: on */

     end validate_card_input_;
