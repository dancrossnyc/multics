/* ***************************************************************
   *                                                             *
   * Copyright, (C) Honeywell Information Systems Inc., 1982     *
   *                                                             *
   * Copyright (c) 1975 by Massachusetts Institute of Technology *
   *                                                             *
   * Copyright (c) 1972 by Massachusetts Institute of            *
   * Technology and Honeywell Information Systems, Inc.          *
   *                                                             *
   *************************************************************** */




lib_next_name_:	procedure (Srequirements, PDnames, Iname, Pstarname)
		returns (char(32));

	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* This procedure is part of the library maintenance subsystem of tools.  Documentation of*/
	/* the complete subsystem is available in AN-80, Library Maintenance.			*/
	/* This procedure, when given node requirements bits, a pointer to the names descriptor,	*/
	/* a name index, and an array of starnames, returns the next name in the descriptor which	*/
	/* meets the name requirements.  Three cases are considered:			*/
	/*									*/
	/*     1) the first name is required.						*/
	/*     2) names which match one of the starnames are required.			*/
	/*     3) all names are required.						*/
	/*									*/
	/* Any combination of cases is allowed.  If there are no remaining names which meet one	*/
	/* of the requirements, then a null character string is returned.			*/
	/*									*/
	/* S__t_a_t_u_s									*/
	/*									*/
	/* 0) Created by:   G. C. Dixon,  May 16, 1975					*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

     dcl						/*	Parameters			*/
/*	PDnames			ptr,		/* ptr to a names descriptor. (In)		*/
	Iname			fixed bin;	/* index into name array of next name to be	*/
						/*   checked.  For the first call to process a	*/
						/*   given name descriptor, this should be set to	*/
						/*   0. (In)				*/
						/* index of last name checked.  For subsequent	*/
						/*   calls to process a given name descriptor, 	*/
						/*   this output value should be used as input.	*/
						/*   (Out)				*/

     dcl	blank_name		char(32) aligned int static init ((32)" "),
						/* a blank name or null string.		*/
	code			fixed bin(35),	/* a status code.				*/
	i			fixed bin;	/* a do-group index.			*/

     dcl	addr			builtin;

     dcl	match_star_name_		entry (char(*), char(*), fixed bin(35));


/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

 	Iname = Iname + 1;				/* get index of next name.			*/
	if Iname > Dnames.N then			/* name array exhausted?  Return blank name.	*/
	     return (blank_name);
	if S.names then				/* return all names.			*/
	     return (Dnames.names(Iname));
	if S.primary_name then			/* return first name.			*/
	     if Iname = 1 then
		return (Dnames.names(Iname));
	if S.matching_names then do;			/* return next name matching a starname.	*/
	     do Iname = Iname to Dnames.N;		/*   scan thru remaining names.		*/
		do i = 1 to starname.N;		/*     for each name, compare with each starname.	*/
		     go to check (starname.C(i));

check(0):		     if Dnames.names(Iname) = starname.V(i) then
			return (Dnames.names(Iname));
		     go to nomatch;

check(1):		     call match_star_name_ (Dnames.names(Iname), starname.V(i), code);
		     if code = 0 then return (Dnames.names(Iname));
		     go to nomatch;

check(2):		     return (Dnames.names(Iname));

nomatch:		     end;
		end;
	     end;

	return (blank_name);			/* if none of remaining names meet requirements,	*/
						/*   return a blank name (null string).		*/


%include lib_node_;

%include lib_based_args_;

	end lib_next_name_;
