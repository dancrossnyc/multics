/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */

/* Modified:  January, 1984 by Jim Lippard to align structures passed to lib_args_			*/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


library_info: li:	procedure
		options	(rename ((alloc_, smart_alloc_)));

     dcl						/*	automatic variables			*/
	Parea			ptr,		/* ptr to an MSA.				*/
	Ptree			ptr,		/* ptr to a tree of status nodes.		*/
	1 arg_struc_temp		like arg_struc,	/* storage for argument structure.		*/
	code			fixed bin(35),	/* a status code.				*/
	1 fcb_temp		like fcb,		/* storage for file control block.		*/
	progress			fixed bin init (0),	/* integer indicating progress of our search.	*/
						/*   0 = search beginning.			*/
						/*   1 = finding library descriptor.		*/
						/*   2 = seeing if library_info command supported	*/
						/*       by this descriptor.			*/
						/*   3 = getting default library names if user	*/
						/*       specified none.			*/
						/*   4 = getting default search names if user	*/
						/*       specified none.			*/
						/*   5 = allocating the root nodes of the tree.	*/
						/*   6 = searching each library root for entries	*/
						/*       identified by the search names.	*/
						/*   7 = no entries matching search names found.	*/
	state			char(16);		/* an error temporary char string.		*/

     dcl						/* 	based variables			*/
	area			area based (Parea);	/* an MSA (multi-segment area).		*/

     dcl (addr, divide, length, min, null, reverse, substr, verify)
				builtin;
     dcl	cleanup			condition;

     dcl						/*	Entries Called			*/
	com_err_			entry options(variable),
	condition_		entry (char(*) aligned, entry),
	cu_$arg_count		entry returns (fixed bin),
	cu_$arg_list_ptr		entry returns(ptr),
	get_line_length_$switch	entry (ptr, fixed bin(35)) returns (fixed bin),
	get_system_msa_		entry (ptr, fixed bin, ptr),
	lib_args_			entry (1 aligned like LIBRARY, 1 aligned like STARNAME, 1 aligned like STARNAME, bit(72) aligned,
				       bit(36) aligned, ptr, fixed bin(35)),
	lib_descriptor_$info	entry (char(168) varying, ptr, ptr, ptr, bit(72) aligned,  bit(36) aligned,
				       ptr, ptr, fixed bin, fixed bin(35)),
	lib_error_list_		entry (char(32) varying, ptr, char(32) varying),
	lib_output_node_list_$info	entry (ptr, ptr, ptr, ptr, char(45) varying, bit(72) aligned, ptr),
	lib_sort_tree_$make_name_list
				entry (ptr, ptr, ptr, ptr, fixed bin(35)),
	lib_sort_tree_$name_list	entry (ptr, ptr),
	msa_manager_$area_handler	entry,
	release_system_msa_		entry (ptr, fixed bin(35));

     dcl						/*	static variables			*/
	True			bit(1) aligned int static options(constant) init ("1"b),
          error_table_$noarg		fixed bin(35) ext static,
	iox_$user_output		ptr ext static;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


	Parg_struc = addr(arg_struc_temp);		/* Initialize argument processing structure.	*/
	arg_struc.version = Varg_struc_1;
	arg_struc.program = "library_info";
	arg_struc.Parg_list = cu_$arg_list_ptr();
	arg_struc.Iarg_list = 1;
	arg_struc.Larg_list = cu_$arg_count();
	arg_struc.put_error = com_err_;
	arg_struc.Srequirements_allowed = ""b;
	arg_struc.Srequirements_initial = ""b;
	arg_struc.Scontrol_allowed = ""b;
	arg_struc.Scontrol_initial = ""b;

	Sreq_allowed.access_class        = True;	/* Mark Sreq bits-  show which output args allowed*/
	Sreq_allowed.acl                 = True;
	Sreq_allowed.aim                 = True;
	Sreq_allowed.author              = True;
	Sreq_allowed.bit_count           = True;
	Sreq_allowed.bit_count_author    = True;
	Sreq_allowed.compiler_name       = True;
	Sreq_allowed.compiler_options    = True;
	Sreq_allowed.compiler_version    = True;
	Sreq_allowed.copy                = True;
	Sreq_allowed.current_length      = True;
	Sreq_allowed.dtc                 = True;
	Sreq_allowed.dtd                 = True;
	Sreq_allowed.dtem                = True;
	Sreq_allowed.dtm                 = True;
	Sreq_allowed.dtu                 = True;
	Sreq_allowed.entry_bound         = True;
	Sreq_allowed.iacl                = True;
	Sreq_allowed.kids                = True;
	Sreq_allowed.kids_error          = True;
	Sreq_allowed.level               = True;
	Sreq_allowed.link_target         = True;
	Sreq_allowed.lvid                = True;
	Sreq_allowed.matching_names      = True;
	Sreq_allowed.max_length          = True;
	Sreq_allowed.mode                = True;
	Sreq_allowed.msf_indicator       = True;
	Sreq_allowed.names               = True;
	Sreq_allowed.new_line            = True;
	Sreq_allowed.not_ascii           = True;
	Sreq_allowed.object_info         = True;
	Sreq_allowed.offset              = True;
	Sreq_allowed.pathname            = True;
	Sreq_allowed.primary_name        = True;
	Sreq_allowed.pvid                = True;
	Sreq_allowed.quota               = True;
	Sreq_allowed.rb                  = True;
	Sreq_allowed.records_used        = True;
	Sreq_allowed.root_search_proc    = True;
	Sreq_allowed.safety              = True;
	Sreq_allowed.type                = True;
	Sreq_allowed.unique_id           = True;
	Sreq_allowed.user                = True;



	Sreq_init.root_search_proc	   = True;	/* Mark bits on by default.			*/
	Sreq_init.level		   = True;
	Sreq_init.new_line		   = True;
	Sreq_init.user                   = True;

	Sc_allowed.acl            = True;		/* Mark Sc bits- show which ctl args allowed.	*/
	Sc_allowed.all_status     = True;
	Sc_allowed.chase          = True;
	Sc_allowed.check_archive  = True;
	Sc_allowed.check_ascii    = True;
	Sc_allowed.components     = True;
	Sc_allowed.container      = True;
	Sc_allowed.default        = True;
	Sc_allowed.iacl           = True;
	Sc_allowed.object_info    = True;
	Sc_allowed.quota          = True;
	Sc_allowed.retain         = True;
	Sc_allowed.descriptor     = True;
	Sc_allowed.library        = True;
	Sc_allowed.search_names   = True;

	call lib_args_ (LIBRARY, STARNAME, EXCLUDE, Srequirements, Scontrol, addr(arg_struc), code);
	if code ^= 0 then return;			/* call subr to process all arguments.		*/

	if Srequirements & ^arg_struc.Srequirements_initial then;
	else Sc.default = True;			/* give user default output if he didn't care.	*/

	if ^Sc.default & ^S.names & ^S.matching_names & ^S.primary_name then do;
	     S.primary_name = True;
	     S.matching_names = True;
	     end;					/* output first, matching names by default.	*/

	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* 1) initialize library pgm's file control block.				*/
	/* 2) establish cleanup on unit.						*/
	/* 3) get ptr to system multi-segment area, and establish area on unit.		*/
	/* 4) search and build status tree for library entries being sought.			*/
	/* 5) make a list of found entries, and sort the list.				*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

	Pfcb = addr(fcb_temp);
	fcb.version = Vfcb_1;
	fcb.ioname = "user_output";			/* print output on user's terminal.		*/
	fcb.Piocb = iox_$user_output;
	fcb.Eend_page = no_end_page;
	fcb.page_length = 131071;			/* use large page size to avoid footings.	*/
	fcb.page_text_length = 131071;
	fcb.page_no = 1;
	fcb.line_length = get_line_length_$switch (fcb.Piocb, code);
	if code ^= 0 then fcb.line_length = 79;
	fcb.line_no = 2;				/* prevent new_line from being suppressed before	*/
						/*   the first entry.  They're suppressed for 1st	*/
						/*   line of a page.			*/

	Parea = null;				/* initialize values used by cleanup on unit.	*/
	on cleanup call janitor;

	call condition_ ("area", msa_manager_$area_handler);
						/* let msa_manager_ handle area conditions.	*/
	call get_system_msa_ (addr(Parea), 0, (null));	/* get MSA ptr.				*/

	Plibrary = addr(LIBRARY);
	Pstarname = addr(STARNAME);
	Pexclude = addr(EXCLUDE);
	call lib_descriptor_$info (arg_struc.descriptor, Plibrary, Pstarname, Pexclude,
	     Srequirements, Scontrol, Parea, Ptree, progress, code);
						/* get a tree of status nodes reflecting the	*/
	if code ^= 0 then go to BAD_SEARCH;		/* library entries which match the star name.	*/

	allocate 	index_list in (area),		/* allocate space for sorting the status nodes.	*/
		name_list in (area),
		node_list in (area);
	index_list.I = 0;				/* initialize count of entries in each list.	*/
	name_list.I = 0;
	node_list.I = 0;
	call lib_sort_tree_$make_name_list (Ptree, Pname_list, Pindex_list, Pnode_list, code);
	if code ^= 0 then go to NO_MATCH;		/* put the outputable nodes into a name list.	*/
	call lib_sort_tree_$name_list (Pname_list, Pindex_list);
						/* sort the name list.			*/

	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* Generate the info from the sorted list of status entries.			*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

	call lib_output_node_list_$info (Pfcb, Pnode_list, Pname_list, Pindex_list, arg_struc.footing,
	     (72)"1"b, addr(starname));
						/* print the nodes, including names which	*/
						/*    match the user's search names.		*/
DETACH:	call janitor;				/* clean up.				*/
	return;

janitor:	procedure;				/* cleanup procedure.			*/
	if Parea ^= null then			/* cleanup by releasing any system MSA.		*/
	     call release_system_msa_ (addr(Parea), code);

	end janitor;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


BAD_SEARCH:
	progress = min (progress, 7);
	go to BAD_S (progress);
BAD_S(0): call com_err_ (code, arg_struc.program, "^/  While calling lib_descriptor_$info.");
	go to DETACH;
BAD_S(1): call com_err_ (code, arg_struc.program, "^/  While finding the  '^R^a^B'  library descriptor.",
	     arg_struc.descriptor);
	go to DETACH;
BAD_S(2): call com_err_ (code, arg_struc.program,
	     "^/  Library descriptor  '^R^a^B'  does not implement^/  the ^a command.",
	     arg_struc.descriptor, arg_struc.program);
	go to DETACH;
BAD_S(3): state = "library";
	go to NO_DEFAULT_NAMES;
BAD_S(4): state = "search";
NO_DEFAULT_NAMES:
	call com_err_ (code, arg_struc.program,
	     "^/  No ^a names were specified, and the  '^R^a^B'
  library descriptor does not define any default ^a names.", state, arg_struc.descriptor, state);
	go to DETACH;
BAD_S(5): call com_err_ (code, arg_struc.program, "^/  While allocating the root nodes of the library tree.");
	go to DETACH;
BAD_S(6):
NO_MATCH:	call com_err_ (code, arg_struc.program,
	     "^/  While searching for entries in the library.^/  Descriptor:^-^5x^a",
	     arg_struc.descriptor);
	call lib_error_list_ ("library name", Plibrary, arg_struc.program);
	call lib_error_list_ ("search name", Pstarname, arg_struc.program);
	go to DETACH;
BAD_S(7):	call com_err_ (code, arg_struc.program, "^/  No libraries matching the library name(s) could be found.
  Descriptor:^-^5x^a", arg_struc.descriptor);
	call lib_error_list_ ("library name", Plibrary, arg_struc.program);
	go to DETACH;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


no_end_page:	procedure;			/* This is a null end-of-page handling proc.	*/

	fcb.page_no = fcb.page_no + 1;
	fcb.line_no = 2;

	end no_end_page;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

%include lib_arg_struc_;

%include lib_based_args_;

%include lib_fcb_;

%include lib_list_;

%include lib_node_;


	end library_info;
