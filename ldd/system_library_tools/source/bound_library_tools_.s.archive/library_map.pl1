/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */

/* Modified November 18, 1983 by Jim Lippard for a 60-line page length				*/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


library_map: lm:	procedure
		options	(rename ((alloc_, smart_alloc_)));

     dcl						/*	automatic variables			*/
	Parea			ptr,		/* ptr to an MSA.				*/
	Ptree			ptr,		/* ptr to a tree of status nodes.		*/
	1 arg_struc_temp		like arg_struc,	/* storage for argument structure.		*/
	clock			fixed bin(71),	/* a clock value.				*/
	code			fixed bin(35),	/* a status code.				*/
	date			char(16) aligned,	/* a date/time string.			*/
	1 fcb_temp		like fcb,		/* storage for file control block.		*/
	i			fixed bin,	/* a do-group index.			*/
	j			fixed bin,	/* a do-group index.			*/
	progress			fixed bin init (0),	/* integer indicating progress of our search.	*/
						/*   0 = search beginning.			*/
						/*   1 = finding library descriptor.		*/
						/*   2 = seeing if library_map command supported	*/
						/*       by this descriptor.			*/
						/*   3 = getting default library names if user	*/
						/*       specified none.			*/
						/*   4 = getting default search names if user	*/
						/*       specified none.			*/
						/*   5 = allocating the root nodes of the tree.	*/
						/*   6 = searching each library root for entries	*/
						/*       identified by the search names.	*/
						/*   7 = no entries matching search names found.	*/
	state			char(16);		/* an error temporary char string.		*/

     dcl						/* 	based variables			*/
	area			area based (Parea);	/* an MSA (multi-segment area).		*/

     dcl (addr, divide, length, min, null, reverse, substr, verify)
				builtin;
     dcl	cleanup			condition;

     dcl						/*	Entries Called			*/
	clock_			entry returns (fixed bin(71)),
	com_err_			entry options(variable),
	condition_		entry (char(*) aligned, entry),
	cu_$arg_count		entry returns (fixed bin),
	cu_$arg_list_ptr		entry returns(ptr),
	date_time_		entry (fixed bin(71), char(*) aligned),
	get_group_id_		entry returns (char(32) aligned),
	get_system_msa_		entry (ptr, fixed bin, ptr),
	ioa_$ioa_switch		entry options (variable),
	ioa_$ioa_switch_nnl		entry options (variable),
	iox_$attach_ioname		entry (char(*), ptr, char(*), fixed bin(35)),
	iox_$close		entry (ptr, fixed bin(35)),
	iox_$detach_iocb		entry (ptr, fixed bin(35)),
	iox_$open			entry (ptr, fixed bin, bit(1) aligned, fixed bin(35)),
	lib_args_			entry (1 aligned like LIBRARY, 1 aligned like STARNAME, 1 aligned like STARNAME, bit(72) aligned,
				       bit(36) aligned, ptr, fixed bin(35)),
	lib_descriptor_$map		entry (char(168) varying, ptr, ptr, ptr, bit(72) aligned,  bit(36) aligned,
				       ptr, ptr, fixed bin, fixed bin(35)),
	lib_error_list_		entry (char(32) varying, ptr, char(32) varying),
	lib_output_node_list_$map	entry (ptr, ptr, ptr, ptr, char(45) varying, bit(72) aligned, ptr),
	lib_sort_tree_$make_name_list
				entry (ptr, ptr, ptr, ptr, fixed bin(35)),
	lib_sort_tree_$name_list	entry (ptr, ptr),
	msa_manager_$area_handler	entry,
	release_system_msa_		entry (ptr, fixed bin(35)),
	system_info_$titles		entry (char(*) aligned, char(*) aligned, char(*) aligned,
				       char(*) aligned);

     dcl						/*	static variables			*/
	Lcompany			fixed bin int static,
	Ldepartment		fixed bin int static,
	Ocompany			fixed bin int static,
	Odepartment		fixed bin int static,
	Sno_titles		bit(1) aligned int static init ("1"b),
	True			bit(1) aligned int static options(constant) init ("1"b),
	company			char(120) aligned int static,
	department		char(120) aligned int static,
         (error_table_$entlong,
	error_table_$noarg,
	error_table_$not_detached,
	error_table_$not_open)	fixed bin(35) ext static,
	finish			bit(1) aligned int static options(constant) init ("1"b),
	on_unit			bit(1) aligned int static options(constant) init ("0"b),
	stream_output		fixed bin int static init (2);
						/* iox_ opening mode for stream-output I/O.	*/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


	Parg_struc = addr(arg_struc_temp);		/* Initialize argument processing structure.	*/
	arg_struc.version = Varg_struc_1;
	arg_struc.program = "library_map";
	arg_struc.Parg_list = cu_$arg_list_ptr();
	arg_struc.Iarg_list = 1;
	arg_struc.Larg_list = cu_$arg_count();
	arg_struc.put_error = com_err_;
	arg_struc.Srequirements_allowed = ""b;
	arg_struc.Srequirements_initial = ""b;
	arg_struc.Scontrol_allowed = ""b;
	arg_struc.Scontrol_initial = ""b;

	Sreq_allowed.access_class        = True;	/* Mark Sreq bits-  show which output args allowed*/
	Sreq_allowed.acl                 = True;
	Sreq_allowed.aim                 = True;
	Sreq_allowed.author              = True;
	Sreq_allowed.bit_count           = True;
	Sreq_allowed.bit_count_author    = True;
	Sreq_allowed.compiler_name       = True;
	Sreq_allowed.compiler_options    = True;
	Sreq_allowed.compiler_version    = True;
	Sreq_allowed.copy                = True;
	Sreq_allowed.cross_ref           = True;
	Sreq_allowed.current_length      = True;
	Sreq_allowed.dtc                 = True;
	Sreq_allowed.dtd                 = True;
	Sreq_allowed.dtem                = True;
	Sreq_allowed.dtm                 = True;
	Sreq_allowed.dtu                 = True;
	Sreq_allowed.entry_bound         = True;
	Sreq_allowed.iacl                = True;
	Sreq_allowed.kids                = True;
	Sreq_allowed.kids_error          = True;
	Sreq_allowed.level               = True;
	Sreq_allowed.link_target         = True;
	Sreq_allowed.lvid                = True;
	Sreq_allowed.matching_names      = True;
	Sreq_allowed.max_length          = True;
	Sreq_allowed.mode                = True;
	Sreq_allowed.msf_indicator       = True;
	Sreq_allowed.names               = True;
	Sreq_allowed.new_line            = True;
	Sreq_allowed.not_ascii           = True;
	Sreq_allowed.object_info         = True;
	Sreq_allowed.offset              = True;
	Sreq_allowed.pathname            = True;
	Sreq_allowed.primary_name        = True;
	Sreq_allowed.pvid                = True;
	Sreq_allowed.quota               = True;
	Sreq_allowed.rb                  = True;
	Sreq_allowed.records_used        = True;
	Sreq_allowed.root_search_proc    = True;
	Sreq_allowed.safety              = True;
	Sreq_allowed.type                = True;
	Sreq_allowed.unique_id           = True;
	Sreq_allowed.user                = True;



	Sreq_init.cross_ref		   = True;	/* Mark bits on by default.			*/
	Sreq_init.root_search_proc       = True;
	Sreq_init.user                   = True;

	Sc_allowed.acl            = True;		/* Mark Sc bits- show which ctl args allowed.	*/
	Sc_allowed.all_status     = True;
	Sc_allowed.chase          = True;
	Sc_allowed.check_archive  = True;
	Sc_allowed.check_ascii    = True;
	Sc_allowed.components     = True;
	Sc_allowed.container      = True;
	Sc_allowed.default        = True;
	Sc_allowed.iacl           = True;
	Sc_allowed.object_info    = True;
	Sc_allowed.quota          = True;
	Sc_allowed.retain         = True;
	Sc_allowed.descriptor     = True;
	Sc_allowed.footing        = True;
	Sc_allowed.heading        = True;
	Sc_allowed.library        = True;
	Sc_allowed.output_file    = True;
	Sc_allowed.search_names   = True;

	Sc_init.container	      = True;		/* Mark bits for ctl args supplied by default.	*/
	Sc_init.output_file	      = True;
	arg_struc.output_file = "library.map";

	call lib_args_ (LIBRARY, STARNAME, EXCLUDE, Srequirements, Scontrol, addr(arg_struc), code);
	if code ^= 0 then return;			/* call subr to process all arguments.		*/

	if Srequirements & ^arg_struc.Srequirements_initial then;
	else Sc.default = True;			/* give user default output if he didn't care.	*/

	if ^Sc.default & ^S.names & ^S.matching_names & ^S.primary_name then
	     go to NO_NAME;				/* complain if output devoid of names.		*/

	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* 1) initialize library pgm's file control block.				*/
	/* 2) establish cleanup on unit.						*/
	/* 3) attach/open output file.						*/
	/* 4) get ptr to system multi-segment area, and establish area on unit.		*/
	/* 5) search and build status tree for library entries being sought.			*/
	/* 6) make a list of found entries, and sort the list.				*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

	Pfcb = addr(fcb_temp);
	fcb.version = Vfcb_1;
	fcb.ioname = "lib_map_";			/* do all of our output on the lib_map_ ioname.	*/
	fcb.Piocb = null;				/* indicate no attachment so far.		*/
	fcb.Eend_page = no_end_page;
	fcb.page_length = 60;
	fcb.page_text_length = 60;
	fcb.page_no = 1;
	fcb.line_length = 132;
	fcb.line_no = 1;

	Parea = null;				/* initialize values used by cleanup on unit.	*/
	on cleanup call janitor(on_unit);

	if substr(arg_struc.output_file, length(arg_struc.output_file)-3) ^= ".map" then
	     if length(arg_struc.output_file) > 164 then do;
		code = error_table_$entlong;
		go to  BAD_ATTACH;
		end;
	     else arg_struc.output_file = arg_struc.output_file || ".map";
	call iox_$attach_ioname (fcb.ioname, fcb.Piocb, "vfile_ " || arg_struc.output_file, code);
	if code ^= 0 then go to BAD_ATTACH;
	call iox_$open (fcb.Piocb, stream_output, "0"b, code);
	if code ^= 0 then go to BAD_OPEN;

	call condition_ ("area", msa_manager_$area_handler);
						/* let msa_manager_ handle area conditions.	*/
	call get_system_msa_ (addr(Parea), 0, (null));	/* get MSA ptr.				*/

	Plibrary = addr(LIBRARY);
	Pstarname = addr(STARNAME);
	Pexclude = addr(EXCLUDE);
	call lib_descriptor_$map (arg_struc.descriptor, Plibrary, Pstarname, Pexclude,
	     Srequirements, Scontrol, Parea, Ptree, progress, code);
						/* get a tree of status nodes reflecting the	*/
	if code ^= 0 then go to BAD_SEARCH;		/* library entries which match the star name.	*/

	allocate 	index_list in (area),		/* allocate space for sorting the status nodes.	*/
		name_list in (area),
		node_list in (area);
	index_list.I = 0;				/* initialize count of entries in each list.	*/
	name_list.I = 0;
	node_list.I = 0;
	call lib_sort_tree_$make_name_list (Ptree, Pname_list, Pindex_list, Pnode_list, code);
	if code ^= 0 then go to NO_MATCH;		/* put the outputable nodes into a name list.	*/
	call lib_sort_tree_$name_list (Pname_list, Pindex_list);
						/* sort the name list.			*/

	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* Output a header page for the map which includes:				*/
	/*   1) company and department titles.						*/
	/*   2) count of library entries mapped at level 1.				*/
	/*   3) a heading line indicating which library was searched.			*/
	/*   4) a line stating what search names were used to identify the sought entries.	*/
	/*   5) date of mapping; process group id of mapper; and name of library descriptor.	*/
	/* Construct the footing phrase to appear in the last line of each page of output.	*/
	/* Generate the map from the sorted list of status entries.				*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

	if Sno_titles then do;			/* get titles for output file.		*/
	     call system_info_$titles ("", "", company, department);
	     Lcompany = min (120, 121 - verify (reverse (company), " "));
	     Ocompany = divide (132-Lcompany, 2, 0, 0);
	     Ldepartment = min (120, 121 - verify (reverse (department), " "));
	     Odepartment = divide (132-Ldepartment, 2, 0, 0);
	     Sno_titles = "0"b;
	     end;
	call ioa_$ioa_switch (fcb.Piocb, "^4/^vx^va", Ocompany, Lcompany, company);
	fcb.line_no = fcb.line_no + 5;
	call ioa_$ioa_switch (fcb.Piocb, "^/^vx^va", Odepartment, Ldepartment, department);
	fcb.line_no = fcb.line_no + 2;
	if name_list.I = 1 then
	     call ioa_$ioa_switch (fcb.Piocb, "^6/^56xMap of the 1 Entry");
	else
	     call ioa_$ioa_switch (fcb.Piocb, "^6/^55xMap of the ^3d Entries", name_list.I);
	fcb.line_no = fcb.line_no + 7;
	if Sc.heading then do;			/* use user-specified heading line.		*/
	     i = length (arg_struc.heading);
	     call ioa_$ioa_switch (fcb.Piocb, "^/^63xof the^2/^vx^va", divide (132-i, 2, 0, 0), i,
		arg_struc.heading);
	     fcb.line_no = fcb.line_no + 4;
	     end;
	else do;					/* form default heading line from library names.	*/
	     if library.N = 1 then do;
		j = min (32, 33 - verify (reverse (library.V(1)), " "));
		arg_struc.heading = substr (library.V(1), 1, j) || " Library";
		i = length (arg_struc.heading);
		call ioa_$ioa_switch (fcb.Piocb, "^/^63xof the^2/^vx^va", divide (132-i, 2, 0, 0), i, 
		     arg_struc.heading);
		fcb.line_no = fcb.line_no + 4;
		end;
	     else do;
		call ioa_$ioa_switch (fcb.Piocb, "^/^62xof  the^2/^61xLibraries");
		fcb.line_no = fcb.line_no + 4;
		arg_struc.heading = "";
		do i = 1 to library.N;
		     j = min (32, 33 - verify (reverse (library.V(i)), " "));
		     if length (arg_struc.heading) + j + 2 > 120 then do;
			call ioa_$ioa_switch (fcb.Piocb, "^/^vx^va", divide (132-(length(arg_struc.heading)-1),
			     2, 0, 0), length(arg_struc.heading)-1, arg_struc.heading);
			fcb.line_no = fcb.line_no + 2;
			arg_struc.heading = "";
			end;
		     arg_struc.heading = arg_struc.heading || substr (library.V(i), 1, j) || ", ";
		     end;
		arg_struc.heading = substr (arg_struc.heading, 1, length(arg_struc.heading) - 2);
						/* remove last ", " from final heading line.	*/

		call ioa_$ioa_switch (fcb.Piocb, "^/^vx^va", divide (132-(length(arg_struc.heading)), 2, 0, 0),
		     length(arg_struc.heading), arg_struc.heading);
		fcb.line_no = fcb.line_no + 2;
		end;
	     end;
	if starname.C(1) = 2 then;			/* Don't list search names if name of '**' given.	*/
	else if starname.N = 1 then do;
	     i = min (32, 33 - verify (reverse (starname.V(1)), " "));
	     call ioa_$ioa_switch (fcb.Piocb, "^2/^53xWhich Match the Search Name^2/^51x^vx^va",
		divide (32 - i, 2, 0, 0), i, starname.V(1));
	     fcb.line_no = fcb.line_no + 3;
	     end;
	else do;
	     call ioa_$ioa_switch (fcb.Piocb, "^2/^51xWhich Match the Search Names");
	     fcb.line_no = fcb.line_no + 3;
	     arg_struc.heading = "";
	     do i = 1 to starname.N;
		j = min (32, 33 - verify (reverse (starname.V(i)), " "));
		if length (arg_struc.heading) + j + 2 > 120 then do;
		     call ioa_$ioa_switch (fcb.Piocb, "^/^vx^va", divide (132-(length(arg_struc.heading)-1),
			2, 0, 0), length(arg_struc.heading)-1, arg_struc.heading);
		     fcb.line_no = fcb.line_no + 2;
		     arg_struc.heading = "";
		     end;
		arg_struc.heading = arg_struc.heading || substr (starname.V(i), 1, j) || ", ";
		end;
	     arg_struc.heading = substr (arg_struc.heading, 1, length(arg_struc.heading)  - 2);
	     call ioa_$ioa_switch (fcb.Piocb, "^/^vx^va", divide (132-length(arg_struc.heading), 2, 0, 0),
		length(arg_struc.heading), arg_struc.heading);
	     fcb.line_no = fcb.line_no + 2;
	     end;
	j = 46 - fcb.line_no;			/* space down near bottom of page.		*/
	if j > 0 then
	     call ioa_$ioa_switch_nnl (fcb.Piocb, "^v/", j);
	clock = clock_();
	call date_time_ (clock, date);
	call ioa_$ioa_switch (fcb.Piocb, "^/^30xMapped on:^-^a", date);
	call ioa_$ioa_switch (fcb.Piocb, "^/^30xMapped by:^-^a", get_group_id_());
	call ioa_$ioa_switch (fcb.Piocb, "^/^30xDescriptor:^-^a", arg_struc.descriptor);
	if name_list.I = max_entries then
	     call ioa_$ioa_switch_nnl (fcb.Piocb,
		"^/^3-Maximum number of entries (^d) exceeded.
			Entries may have been excluded from the map.^/^|",
		max_entries);
	else
	     call ioa_$ioa_switch_nnl (fcb.Piocb, "^|");
	fcb.line_no = 1;

	if Sc.footing then;				/* use default value for footer if user didn't	*/
	else do;
	     arg_struc.heading = "";
	     do i = 1 to library.N - 1;
		j = min (32, 33 - verify (reverse (library.V(i)), " "));
		if length (arg_struc.heading) + j + 5 > 45 then do;
		     arg_struc.heading = arg_struc.heading || "...";
		     go to SET_FOOTING;
		     end;
		arg_struc.heading = arg_struc.heading || substr(library.V(i), 1, j) || ", ";
		end;
	     j = min (32, 33 - verify (reverse (library.V(i)), " "));
	     if length (arg_struc.heading) + j > 45 then arg_struc.heading = arg_struc.heading || "...";
	     else arg_struc.heading = arg_struc.heading || library.V(i);
SET_FOOTING:   arg_struc.footing = arg_struc.heading;
	     end;

	call lib_output_node_list_$map (Pfcb, Pnode_list, Pname_list, Pindex_list, arg_struc.footing,
	     (72)"1"b, addr(starname));
						/* print the nodes, including names which	*/
						/*    match the user's search names.		*/
DETACH:	call janitor(finish);			/* clean up.				*/
	return;

janitor:	procedure (invocation_mode);			/* cleanup procedure.			*/

     dcl	invocation_mode		bit(1) aligned;	/* off if invoked by cleanup on unit.		*/

	if Parea ^= null then			/* cleanup by releasing any system MSA.		*/
	     call release_system_msa_ (addr(Parea), code);
	if fcb.Piocb ^= null then do;			/* close/detach our output file, if open.	*/
	     call iox_$close (fcb.Piocb, code);
	     if invocation_mode = finish then if code ^= 0 then if code ^= error_table_$not_open
		then go to BAD_CLOSE;
	     call iox_$detach_iocb (fcb.Piocb, code);
	     fcb.Piocb = null;			/* we've done all we can.  Stop trying.		*/
	     if invocation_mode = finish then if code ^= 0 then go to BAD_DETACH;
	     end;

	end janitor;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


BAD_ATTACH:
	if code = error_table_$not_detached then go to MULTIPLE_ATTACH;
	state = "attaching";
	fcb.Piocb = null;
	go to BAD_IO;
BAD_CLOSE:
	state = "closing";
	go to BAD_IO;
BAD_DETACH:
	state = "detaching";
	go to BAD_IO;
BAD_OPEN:
	state = "opening";
BAD_IO:	call com_err_ (code,arg_struc.program, "^/  While ^a the map file  ^R^a^B^/  using the I/O switch  ^R^a^B.",
	     state, arg_struc.output_file, fcb.ioname);
	go to DETACH;

MULTIPLE_ATTACH:
	call com_err_ (code, arg_struc.program,
	     "^/  While attaching the map file  ^R^a^B^/  to the I/O switch  ^R^a^B.
  Release any other activations of ^a and try again.", arg_struc.output_file, fcb.ioname, arg_struc.program);
	return;

BAD_SEARCH:
	progress = min (progress, 7);
	go to BAD_S (progress);
BAD_S(0): call com_err_ (code, arg_struc.program, "^/  While calling lib_descriptor_$map.");
	go to DETACH;
BAD_S(1): call com_err_ (code, arg_struc.program, "^/  While finding the  '^R^a^B'  library descriptor.",
	     arg_struc.descriptor);
	go to DETACH;
BAD_S(2): call com_err_ (code, arg_struc.program,
	     "^/  Library descriptor  '^R^a^B'  does not implement^/  the ^a command.",
	     arg_struc.descriptor, arg_struc.program);
	go to DETACH;
BAD_S(3): state = "library";
	go to NO_DEFAULT_NAMES;
BAD_S(4): state = "search";
NO_DEFAULT_NAMES:
	call com_err_ (code, arg_struc.program,
	     "^/  No ^a names were specified, and the  '^R^a^B'
  library descriptor does not define any default ^a names.", state, arg_struc.descriptor, state);
	go to DETACH;
BAD_S(5): call com_err_ (code, arg_struc.program, "^/  While allocating the root nodes of the library tree.");
	go to DETACH;

BAD_S(6):
NO_MATCH:	call com_err_ (code, arg_struc.program,
	     "^/  While searching for entries in the library.^/  Descriptor:^-^5x^a",
	     arg_struc.descriptor);
	call lib_error_list_ ("library name", Plibrary, arg_struc.program);
	call lib_error_list_ ("search name", Pstarname, arg_struc.program);
	go to DETACH;
BAD_S(7):	call com_err_ (code, arg_struc.program, "^/  No libraries matching the library name(s) could be found.
  Descriptor:^-^5x^a", arg_struc.descriptor);
	call lib_error_list_ ("library name", Plibrary, arg_struc.program);
	go to DETACH;

NO_NAME:	call com_err_ (error_table_$noarg, arg_struc.program,
	     "^/  At least one of the following control arguments must be given
  so that the name of each library entry will be output:
     -name, -match, -primary, or -default.");
	return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


no_end_page:	procedure;			/* This is a null end-of-page handling proc.	*/

	fcb.page_no = fcb.page_no + 1;
	fcb.line_no = 1;

	end no_end_page;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

%include lib_arg_struc_;

%include lib_based_args_;

%include lib_fcb_;

%include lib_list_;

%include lib_node_;


	end library_map;
