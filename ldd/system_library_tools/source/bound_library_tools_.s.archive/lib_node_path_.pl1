/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */



	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* N__a_m_e:  lib_node_path_							*/
	/*									*/
	/*      This procedure returns the path name of the entry represented by a library node.	*/
	/*									*/
	/* U__s_a_g_e									*/
	/*									*/
	/*      dcl  lib_node_path_ entry (ptr, char(168) varying, char(32) varying);		*/
	/*									*/
	/*      call lib_node_path_ (Pnode, directory, entry);				*/
	/*									*/
	/* 1) Pnode	is a pointer to the library node representing the entry whose path	*/
	/*		name is to be returned. (In)					*/
	/* 2) directory	is the directory portion of the path name. (Out)			*/
	/* 3) entry	is the entry portion of the path name. (Out)			*/
	/*									*/
	/*									*/
	/* E__n_t_r_y:  lib_node_path_$absolute						*/
	/*									*/
	/* This entry points returns an absolute pathname, include archive component names.	*/
	/*									*/
	/* U__s_a_g_e:									*/
	/*									*/
	/*      dcl lib_node_path_$absolute (ptr, char(200) varying);			*/
	/*      call lib_node_path_$absolute (Pnode, pathname);				*/
	/*									*/
	/* where:									*/
	/* 1) Pnode	is as above. (In)						*/
	/* 2) pathname	is the absolute pathname. (Out)				*/
	/*									*/
	/* S__t_a_t_u_s									*/
	/*									*/
	/* 0) Created:  Aug, 1973 by G. C. Dixon					*/
	/* 1) Modified: Dec, 1980 by G. C. Dixon - add $absolute entry point.			*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */



/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


lib_node_path_:	procedure (APnode, dir, ent);

     dcl	APnode			ptr,		/* ptr to node whose path is to be obtained. (In)	*/
	dir			char(168) varying,	/* directory part of path. (Out)		*/
	ent			char(32) varying;	/* entry part of path. (Out)			*/

     dcl	i			fixed bin,	/* a do-group index.			*/
	path			char(200) varying;	/* path name of the node.			*/

     dcl (addr, index, length, null, reverse, rtrim, substr)
				builtin;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


	path = recurse (APnode);			/* get path name of the node.			*/
	
	i = index (path, "::");			/* Look for archive component name in path.	*/
	if i > 0 then do;				/* If one found, treat it as the entryname.	*/
	     dir = substr(path, 1, i-1);
	     ent = substr (path, i+2);
	     end;
	else do;
	     i = length(path) + 1 - index (reverse (path), ">");
	     if i = 1 then				/* special case the root.			*/
		dir = ">";
	     else dir = substr (path, 1, i-1);
	     ent = substr (path, i+1);
	     end;
	return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


absolute: entry (APnode) returns (char(200) varying);

	return (recurse (APnode));

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


recurse:	procedure (APnode)				/* This internal procedure constructs the path	*/
	returns	(char(200) varying);		/* name of the node.			*/

     dcl	APnode			ptr;		/* ptr to the node whose path name is desired.	*/

	Pnode = APnode;				/* address the node in question.		*/
	if node.Pparent = null then			/* is this a root node of the tree?		*/
	     go to root_node;			/* if so, then return path name assoc with it.	*/
	else if addr (node.Pparent -> node.Svalid) -> Svalid.link_target then do;
						/* else, does node's parent have a path name	*/
	     Pnode = node.Pparent;			/* assoc with it?  Return that path name.	*/
root_node:     return (link_node.link_target);
	     end;
	else do;					/* otherwise, concatenate parent node's path	*/
						/* with primary name of this node.		*/
	     do PDnames = node.PD repeat Dnames.Pnext while (Dnames.T ^= Tnames);
		end;				/* address the node's name descriptor.		*/
	     if node.T = Tarchive_comp then
		return (recurse (node.Pparent) || "::" || rtrim (Dnames.names(1)));
	     else return (recurse (node.Pparent) || ">" || rtrim (Dnames.names(1)));

	     end;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

%include lib_node_;

	end recurse;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

	end lib_node_path_;
