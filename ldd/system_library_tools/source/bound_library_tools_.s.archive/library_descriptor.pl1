/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */

/* Modified:  January, 1984 by Jim Lippard to align structures passed to lib_args_			*/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


library_descriptor: lds: procedure;


     dcl						/*	automatic variables			*/
	Larg			fixed bin,	/* length of input argument.			*/
	Lkey			fixed bin,	/* length of function key.			*/
	Lret			fixed bin,	/* max length of active fnc return value.	*/
	Nargs			fixed bin,	/* number of input arguments.			*/
	Parg			ptr,		/* ptr to input argument.			*/
	Pkey			ptr,		/* ptr to function key.			*/
	Pret			ptr,		/* ptr to active function return value.		*/
	Scommand			bit(1) aligned,	/* on if invoked as a command.		*/
	Sunsupported		bit(1) unal,	/* on if library command is not supported by desc.*/
	1 arg_struc_temp		structure like arg_struc,
	command_name		char(32),		/* name of a library command.			*/
	code			fixed bin(35),	/* error code.				*/
	dir			char(168) varying,	/* dir part of library pathname.		*/
	ent			char(32) varying,	/* ent part of library pathname.		*/
	error			entry options(variable) variable,
						/* procedure to call to report errors to user.	*/
	1 fcb_temp		like fcb,		/* storage for file control block.		*/
	get_arg			entry (fixed bin, ptr, fixed bin, fixed bin(35)) variable,
						/* procedure to call to get next argument.	*/
	i			fixed bin,	/* function index; also, do-group index.	*/
	progress			fixed bin;	/* progress of lib_descriptor_ operations.	*/

     dcl						/*	based variables			*/
	arg			char(Larg) based (Parg),
						/* an input argument.			*/
	key			char(Lkey) based (Pkey),
						/* a function key.				*/
	ret			char(Lret) varying based (Pret);
						/* our active function return value.		*/

     dcl						/*	builtin functions & conditions	*/
         (addr, dimension, length, null)
				builtin,
	cleanup			condition;

     dcl						/*	entries called			*/
         (active_fnc_err_,
	com_err_)			entry options(variable),
	cu_$af_arg_ptr		entry (fixed bin, ptr, fixed bin, fixed bin(35)),
	cu_$af_return_arg 		entry (fixed bin, ptr, fixed bin, fixed bin(35)),
	cu_$arg_count		entry returns(fixed bin),
	cu_$arg_list_ptr		entry returns (ptr),
	cu_$arg_ptr		entry (fixed bin, ptr, fixed bin, fixed bin(35)),
	get_line_length_$switch	entry (ptr, fixed bin(35)) returns (fixed bin),
	get_system_free_area_	entry returns(ptr),
	ioa_			entry options(variable),
	lib_args_			entry (1 aligned like LIBRARY, 1 aligned like STARNAME, 1 aligned like STARNAME, bit(72) aligned,
				       bit(36) aligned, ptr, fixed bin(35)),
	lib_array_list_		entry (char(32) varying, ptr, ptr),
	lib_descriptor_$default_values
				entry (char(168) varying, fixed bin, char(32), bit(1), ptr, ptr, ptr,
				       fixed bin, fixed bin(35)),
	lib_descriptor_$libraries	entry (char(168) varying, ptr, bit(72) aligned, ptr, ptr,
				       fixed bin, fixed bin(35)),
	lib_descriptor_$name	entry (char(168) varying),
	lib_descriptor_$set_name	entry (char(168) varying, fixed bin(35)),
	lib_error_list_		entry (char(32) varying, ptr, char(32) varying),
	lib_free_node_$array	entry (ptr),
	lib_node_path_		entry (ptr, char(168) varying, char(32) varying),
	lib_output_node_$info	entry (ptr, ptr, bit(72) aligned, fixed bin, ptr);

     dcl						/*	static variables			*/
	False			bit(1) aligned int static options(constant) init ("0"b),
	Parea			ptr int static init (null),
	True			bit(1) aligned int static options(constant) init ("1"b),
	allowed_keys (9)		char(8) varying int static options(constant) init (
				     "name", "nm",
				     "set",
				     "pathname", "pn",
				     "default", "dft",
				     "root", "rt"),
	error_table_$bad_arg	fixed bin(35) ext static,
	error_table_$wrong_no_of_args	fixed bin(35) ext static,
	iox_$user_output		ptr ext static;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */



	call cu_$af_return_arg (Nargs, Pret, Lret, code);
	if code = 0 then do;			/* invoked as an active function.		*/
	     Scommand = False;
	     error = active_fnc_err_;
	     get_arg = cu_$af_arg_ptr;
	     ret = "";
	     end;
	else do;					/* invoked as a command.			*/
	     Scommand = True;
	     error = com_err_;
	     get_arg = cu_$arg_ptr;
	     Nargs = cu_$arg_count();
	     end;

	if Nargs = 0 then go to GIVE_HELP;		/* user doesn't know what to do with this program.*/

	call get_arg (1, Pkey, Lkey, 0);		/* find out what we're doing, by getting key.	*/
	do i = 1 to dimension(allowed_keys,1) while (key ^= allowed_keys(i));
	     end;
	if i > dimension(allowed_keys,1) then go to GIVE_HELP_1;

	go to CHECK_AF(i);				/* check allowability of active function invoc.	*/

CHECK_AF(3):					/* set					*/
CHECK_AF(6):					/* default				*/
CHECK_AF(7):					/* dft					*/
CHECK_AF(8):					/* root					*/
CHECK_AF(9):					/* rt					*/
	if ^Scommand then go to INVALID_ACTIVE_FCN;
CHECK_AF(1):					/* name					*/
CHECK_AF(2):					/* nm					*/
CHECK_AF(4):					/* pathname				*/
CHECK_AF(5):					/* pn					*/
	Parg_struc = addr(arg_struc_temp);
	go to STEP_1(i);				/* perform function in steps.			*/

STEP_1(1):					/* name - has only 1 step.			*/
STEP_1(2):					/* nm					*/
	if Nargs > 1 then go to WRONG_NO_OF_ARGS;
	call lib_descriptor_$name (arg_struc.descriptor);
	if Scommand then
	     call ioa_ ("^2x^a^/", arg_struc.descriptor);
	else ret = arg_struc.descriptor;
	return;					/* have gotten name of current descriptor.	*/

STEP_1(3):					/* set - has only 1 step, too.		*/
	if Nargs > 2 then go to WRONG_NO_OF_ARGS;	/*   set name of default library descriptor.	*/
	if Nargs = 2 then do;
	     call get_arg (2, Parg, Larg, 0);
	     arg_struc.descriptor = arg;
	     end;
	else arg_struc.descriptor = "";		/*   return to initial default descriptor.	*/
	call lib_descriptor_$set_name (arg_struc.descriptor, code);
	if code ^= 0 then go to BAD_SET;
	return;

STEP_1(4):					/* pathname				*/
STEP_1(5):					/* pn					*/
STEP_1(6):					/* default				*/
STEP_1(7):					/* dft					*/
STEP_1(8):					/* root					*/
STEP_1(9):					/* rt					*/
	arg_struc.Srequirements_allowed = ""b;
	arg_struc.Srequirements_initial = ""b;
	arg_struc.Scontrol_allowed = ""b;
	arg_struc.Scontrol_initial = ""b;
	go to STEP_2(i);

STEP_2(4):					/* pathname				*/
STEP_2(5):					/* pn					*/
	Sc_allowed.library = True;
	Sc_allowed.descriptor = True;
	Sc_init.library = True;
	LIBRARY.N = 1;
	LIBRARY.V(1) = "**";
	LIBRARY.C(1) = 2;
	go to DO_ARGS;
STEP_2(6):					/* default				*/
STEP_2(7):					/* dft					*/
	Sc_allowed.search_names = True;
	Sc_allowed.descriptor = True;
	go to DO_ARGS;
STEP_2(8):					/* root					*/
STEP_2(9):					/* rt					*/
	Sc_allowed.library = True;
	Sc_allowed.descriptor = True;
	Sreq_allowed.names = True;
	Sreq_allowed.matching_names = True;
	Sreq_allowed.primary_name = True;
	Sc_init.library = True;
	LIBRARY.N = 1;
	LIBRARY.V(1) = "**";
	LIBRARY.C(1) = 2;
	go to DO_ARGS;

DO_ARGS:	arg_struc.version = Varg_struc_1;
	arg_struc.program = "library_descriptor";
	arg_struc.Parg_list = cu_$arg_list_ptr();
	arg_struc.Iarg_list = 2;
	arg_struc.Larg_list = Nargs;
	arg_struc.put_error = error;
	call lib_args_ (LIBRARY, STARNAME, EXCLUDE, Srequirements, Scontrol, addr(arg_struc), code);
	if code ^= 0 then return;
	go to STEP_3(i);				/* This step does all the work.		*/

STEP_3(4):					/* pathname				*/
STEP_3(5):					/* pn					*/
	if Parea = null then Parea = get_system_free_area_();
	PDnodes = null;
	on cleanup call lib_free_node_$array (PDnodes);
	Plibrary = addr(LIBRARY);
	call lib_descriptor_$libraries (arg_struc.descriptor, Plibrary, Srequirements, Parea, PDnodes,
	     progress, code);
	if code ^= 0 then go to BAD_LIB;
	do i = 1 to Dnodes.N;
	     Pnode = addr(Dnodes.nodes(i));
	     call lib_node_path_ (Pnode, dir, ent);
	     if dir = ">" then
		dir = dir || ent;
	     else dir = dir || ">" || ent;
	     if Scommand then
		call ioa_ ("^2x^a", dir);
	     else do;
		if length(dir) + 1  >  Lret - length(ret) then return;
		ret = ret || dir;
		ret = ret || " ";
		end;
	     end;
	if Scommand then call ioa_ ("");
	else ret = substr(ret,1,length(ret)-1);
	call lib_free_node_$array (PDnodes);
	return;
 
STEP_3(6):					/* default				*/
STEP_3(7):					/* dft					*/
	if STARNAME.N = 0 then do;			/* list all command defaults.			*/
	     call lib_descriptor_$default_values (arg_struc.descriptor, 1, command_name, Sunsupported,
		Plibrary, Pstarname, Pexclude, progress, code);
	     if progress = 1 then go to BAD_DESCRIPTOR;
	     do i = 1 by 1 while (code = 0);
		call print_defaults ();
		call lib_descriptor_$default_values (arg_struc.descriptor, i+1, command_name, Sunsupported,
		     Plibrary, Pstarname, Pexclude, progress, code);
		end;
	     end;
	else do;
	     do i = 1 to STARNAME.N;
		command_name = STARNAME.V(i);
		call lib_descriptor_$default_values (arg_struc.descriptor, 0, command_name, Sunsupported,
		     Plibrary, Pstarname, Pexclude, progress, code);
		if progress = 0 then
		     call error (code, arg_struc.program, " Invalid library command:  ^a", STARNAME.V(i));
		else if progress = 1 then go to BAD_DESCRIPTOR;
		else call print_defaults ();
		end;
	     end;
	return;

print_defaults: procedure;				/* procedure to print command default values.	*/

	if Sunsupported then
	     call ioa_ ("unsupported command:  ^a", command_name);
	else do;
	     call ioa_ ("command:  ^a", command_name);
	     if library.N = 0 then
		call ioa_ ("^2xlibrary names:^-^5x(none)");
	     else call lib_array_list_ ("library name", Plibrary, iox_$user_output);
	     if starname.N = 0 then
		call ioa_ ("^2xsearch names:^-^5x(none)");
	     else call lib_array_list_ ("search name", Pstarname, iox_$user_output);
	     end;
	call ioa_ ("");

	end print_defaults;

STEP_3(8):					/* root					*/
STEP_3(9):					/* rt					*/
	if S.names | S.matching_names | S.primary_name then;
	else if LIBRARY.N = 1 & LIBRARY.C(1) = 2 then
	          S.primary_name = True;
	     else S.matching_names = True;
	S.type = True;
	S.pathname = True;
	S.root_search_proc = True;
	S.new_line = True;

	if Parea = null then Parea = get_system_free_area_();
	PDnodes = null;
	on cleanup call lib_free_node_$array (PDnodes);
	Plibrary = addr(LIBRARY);
	call lib_descriptor_$libraries (arg_struc.descriptor, Plibrary, Srequirements, Parea, PDnodes,
	     progress, code);
	if code ^= 0 then go to BAD_LIB;
	Pfcb = addr(fcb_temp);
	fcb.version = Vfcb_1;
	fcb.ioname = "user_output";
	fcb.Piocb = iox_$user_output;
	fcb.Eend_page = no_end_page;
	fcb.page_length = 131071;
	fcb.page_text_length = 131071;
	fcb.page_no = 1;
	fcb.line_length = get_line_length_$switch (fcb.Piocb, code);
	fcb.line_no = 2;
	do i = 1 to Dnodes.N;
	     Pnode = addr(Dnodes.nodes(i));
	     call lib_output_node_$info (addr(fcb), Pnode, Srequirements, 0, Plibrary);
	     end;
	call lib_free_node_$array (PDnodes);
	return;


no_end_page: procedure;

	end no_end_page;
 

GIVE_HELP:
	code = error_table_$wrong_no_of_args;
	Lkey = 0;
	Pkey = addr(Pkey);
	go to GIVE_HELP_;
GIVE_HELP_1:
	code = error_table_$bad_arg;
GIVE_HELP_:
	if Scommand then
	     call error (code, "library_descriptor", " ^a
  Calling sequence:	 lds  key  -args-
      where key is:  name (nm), set, pathname (pn), default (dft), root (rt)", key);
	else
	     call error (code, "library_descriptor", " ^a
  Calling sequence:  [lds  key -args-]
      where key is:  name (nm), or pathname (pn)", key);
	return;

INVALID_ACTIVE_FCN:
	call error (code, "library_descriptor", "
  'lds ^a'  may not be used as an active function.", key);
	return;

WRONG_NO_OF_ARGS:
	call error (error_table_$wrong_no_of_args, "library_descriptor", "
  Calling sequence:  lds ^a ^vs^a", key, i-1, "", "", "descriptor_name");
	return;

BAD_SET:	call error (code, "library_descriptor", "
  While setting the name of the default library descriptor to
  ^a.", arg_struc.descriptor);
	return;

BAD_LIB:	call error (code, "library_descriptor", "
  While obtaining information about the libraries.
  descriptor:	^a", arg_struc.descriptor);
	call lib_error_list_ ("library name", Plibrary, arg_struc.program);
	if PDnodes ^= null then call lib_free_node_$array (PDnodes);
	return;

BAD_DESCRIPTOR:
	call error (code, "library_descriptor", "
  While accessing library descriptor: ^a", arg_struc.descriptor);
	return;

%include lib_arg_struc_;

%include lib_based_args_;

%include lib_fcb_;

%include lib_node_;


	end library_descriptor;
