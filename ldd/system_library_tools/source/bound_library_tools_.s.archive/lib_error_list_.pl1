/* ***************************************************************
   *                                                             *
   * Copyright, (C) Honeywell Information Systems Inc., 1982     *
   *                                                             *
   * Copyright (c) 1975 by Massachusetts Institute of Technology *
   *                                                             *
   * Copyright (c) 1972 by Massachusetts Institute of            *
   * Technology and Honeywell Information Systems, Inc.          *
   *                                                             *
   *************************************************************** */



	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* Name: lib_error_list_							*/
	/*									*/
	/*    This procedure prints information for error messages and other output from the	*/
	/* arrays used by the library descriptor tools interfaces.				*/
	/*									*/
	/* Status									*/
	/* 0) Created:  Aug, 1971 by G. C. Dixon					*/
	/* 1) Modified: Dec, 1980 by G. C. Dixon - add $return_string entry point.		*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


lib_error_list_:
	procedure (label, Pstarname, proc);		/* Procedure to output an array of names in an	*/
						/*    error message.			*/

     dcl						/*		parameters		*/
	label			char(32) varying;	/* label for name array.			*/
	%include lib_based_args_;

     dcl	proc			char(32) varying,	/* Name of caller to be used in error message.	*/
	APiocb			ptr;		/* ptr to iocb of switch array to be output on.	*/

     dcl						/*	automatic variables		*/
         (Lfield (3), Lprefix)	fixed bin,	/* length of output fields.			*/
	Piocb			ptr,		/* ptr: to output switch.			*/
	Sreturn_string		bit(1),		/* switch:  on if entered at $return_string	*/
	field (3)			char(32),		/* output fields.				*/
         (i, j, k)			fixed bin,	/* do group indices.			*/
	return_string		char(10000) var;	/* temp string to hold results during calc.	*/

     dcl (length, min, reverse, verify)	builtin;

     dcl	ioa_$rsnpnnl		entry options(variable),
	ioa_$ioa_switch		entry options (variable);

     dcl (FALSE			init("0"b),
	TRUE			init("1"b)) bit(1) int static options(constant),
	iox_$error_output		ptr ext static;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


	Sreturn_string = FALSE;			/* Entry to output results to error_output	*/
	Piocb = iox_$error_output;
	go to COMMON;


lib_array_list_:
	entry (label, Pstarname, APiocb);		/* Entry to output results on user_output.	*/

	Sreturn_string = FALSE;
	Piocb = APiocb;
	go to COMMON;


return_string:					/* Entry to return formatted results as a string. */
	entry (label, Pstarname) returns (char(*) varying);

	Sreturn_string = TRUE;
	return_string = "";


COMMON:	Lprefix = 2;				/* indent heading line by 2 chars.		*/
	if starname.N > 1 then field(1) = label || "s:";
	else field(1) = label || ":";			/* 1st field is label (singular or plural).	*/
	Lfield(1) = 23;
	i = 1;					/* indicate first field has been used.		*/

	j = 1;					/* begin outputing with 1st name.		*/
	do while (j <= starname.N);
	     if i = 3 then do;			/* if all fields full, output the line.		*/
		if Sreturn_string then
		     call ioa_$rsnpnnl ("^a^[^/^]^vx^va^va^va", return_string, 0, return_string,
			length(return_string)>0, Lprefix, Lfield(1), field(1),
			Lfield(2), field(2), Lfield(3), field(3));
		else call ioa_$ioa_switch (Piocb, "^vx^va^va^va", Lprefix, Lfield(1), field(1),
			Lfield(2), field(2), Lfield(3), field(3));
		i = 0;				/* no fields used.				*/
		Lprefix = 5;			/* indent all succeeding lines by 5 chars.	*/
		end;

	     i = i + 1;				/* process next field.			*/
	     Lfield(i) = min (32, 33 - verify (reverse (starname.V(j)), " "));
	     if Lfield(i) <= 18 then do;		/* if name <= 18 chars;  it will fit in 1 field.	*/
		Lfield(i) = 20;
		field(i) = starname.V(j);
		end;
	     else if i < 3 then do;			/* name > 18 chars;  it will fit in 2 fields.	*/
		if i = 1 then do;			/*     put name in 2nd field of line, if next	*/
						/*       name won't fit in first field.		*/
		     if j < starname.N then do;
			k = min (32, 33 - verify (reverse (starname.V(j+1)), " "));
			if k <= 18 then do;
			     Lfield(i) = 20;
			     field (i) = starname.V(j+1);
			     i = i + 1;
			     Lfield(i) = 40;
			     field (i) = starname.V(j);
			     i = i + 1;
			     Lfield(i) = 0;
			     field (i) = "";
			     j = j + 1;
			     go to NEXT_NAME;
			     end;
			end;
		     Lfield(i) = 20;
		     field (i) = "";
		     i = i + 1;
		     end;
		Lfield(i) = 40;
		field(i) = starname.V(j);
		i = i + 1;			/* 2d of the 2 fields needs no further processing.*/
		Lfield(i) = 0;
		field(i) = "";
		end;
	     else do;				/* name > 18 chars and only 1 field left.	*/
		Lfield(i) = 0;			/* make it a blank field.			*/
		field(i) = "";
		j = j - 1;			/* process this name again on the next line.	*/
		end;
NEXT_NAME:     j = j + 1;				/* process the next name.			*/
	     end;
	do i = i+1 to 3;				/* null out any unused fields on last line.	*/
	     Lfield(i) = 0;
	     field(i) = "";
	     end;

	if Sreturn_string then do;
	     call ioa_$rsnpnnl ("^a^[^/^]^vx^va^va^va", return_string, 0, return_string,
		length(return_string)>0, Lprefix, Lfield(1), field(1),
		Lfield(2), field(2), Lfield(3), field(3));
	     return (return_string);
	     end;
	else call ioa_$ioa_switch (Piocb, "^vx^va^va^va", Lprefix, Lfield(1), field(1),
	     Lfield(2), field(2), Lfield(3), field(3));	/* output the last line.			*/

	end lib_error_list_;
