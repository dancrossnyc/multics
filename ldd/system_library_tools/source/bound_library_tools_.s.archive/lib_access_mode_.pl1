/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* Name:  lib_access_mode_							*/
	/*									*/
	/*      This subroutine is part of the library maintenance tools.  It gets and sets the	*/
	/* current user's (person.project.a) access to a given library entry.			*/
	/*									*/
	/* Entry:  lib_access_mode_$get						*/
	/*									*/
	/*      This entry gets user's access to a given entry.				*/
	/*									*/
	/* Usage									*/
	/*									*/
	/* dcl lib_access_mode_$get entry (ptr, fixed bin(35));				*/
	/*									*/
	/* call lib_access_mode_$get (Pnode, code);					*/
	/*									*/
	/* where:									*/
	/* 1. Pnode	is a pointer to the library node representing the library entry. (In)	*/
	/* 2. code	is an error code. (Out)					*/
	/*									*/

	/* Entry:  lib_access_mode_$set						*/
	/*									*/
	/*      This entry sets the user's access to a given library entry.  If necessary,	*/
	/* the user will be given access to the archive, directory, or MSF which contains the	*/
	/* library entry.  Links are chased.						*/
	/*									*/
	/*      If the user already has sufficient access to meet the requirements of the 	*/
	/* requested access mode, then no changes are made.  				*/
	/*									*/
	/*      Access is granted in such a way that it can be unset, leaving the ACL in its	*/
	/* original state, by call lib_access_mode_$unset.				*/
	/*									*/
	/* Usage									*/
	/*									*/
	/* dcl lib_access_mode_$set (ptr, bit(36) aligned, fixed bin, fixed bin(35));		*/
	/*									*/
	/* call lib_access_mode_$set (Pnode, new_mode, unset_depth, code);			*/
	/*									*/
	/* where:									*/
	/* 1.  Pnode	is as above. (In)						*/
	/* 2.  new_mode	is a bit string describing the required user access. (In)		*/
	/*		For directories, the bits represent "sma..."b.			*/
	/*		For other entries, the bits represent "rew..."b.			*/
	/* 3.  unset_depth	defines the depth up or down the library node tree to which access	*/
	/*		changes had to be made in order to set the user's access.  This	*/
	/*		value must be given to lib_access_mode_$unset to properly unset	*/
	/*		the access mode. (Out)					*/
	/* 4.  code	is as above. (Out)						*/
	/*									*/
	/* Entry:  lib_access_mode_$unset						*/
	/*									*/
	/*      This entry undoes what the $set entry does, so that all ACLs are in their original*/
	/* state.									*/
	/*									*/
	/* Usage									*/
	/*									*/
	/* dcl lib_access_mode_$unset (ptr, fixed bin, fixed bin(35));			*/
	/*									*/
	/* call lib_access_mode_$unset (Pnode, unset_depth, code);				*/
	/*									*/
	/* where:									*/
	/* 1. - 3.	are as described above.					*/
	/*									*/
	/* Status:								*/
	/*									*/
	/* 0) Created in  June, 1976  by Gary C. Dixon					*/
	/* 1) Modified on October 11, 1983 by Jim Lippard to change all occurrences of		*/
	/* error_table_$invalid_data_format to error_table_$improper_data_format.		*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */


/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


lib_access_mode_:	procedure;

     dcl						/*	Parameters			*/
	new_mode			bit(36) aligned,	/* access to node which is required.		*/
	unset_depth		fixed bin,	/* depth up/down tree to which setting was done.	*/
	code			fixed bin(35);	/* return code.				*/

     dcl						/*	Automatic Variables			*/
	Bmode			bit(5),		/* bit access mode (xrewx, or xsmxa).		*/
	Nmode			fixed bin(5),	/* binary access mode.			*/
	Pmsf_fcb			ptr,		/* ptr to msf_manager_ control block.		*/
	Sunset_required		bit(1) aligned,	/* on if ACL changed during $set call.		*/
	1 acle			aligned,		/* segment ACL entry addition structure.	*/
	  2 user			char(32),
	  2 mode			bit(36),
	  2 pad			bit(36),
	  2 code			fixed bin(35),
	1 del_acle		aligned,		/* segment ACL entry deletion structure.	*/
	  2 user			char(32),
	  2 code			fixed bin(35),
	dir			char(168) varying,	/* dir part of node pathname.			*/
	1 dir_acle		aligned,		/* directory ACL entry addition structure.	*/
	  2 user			char(32),
	  2 mode			bit(36),
	  2 code			fixed bin(35),
	ent			char(32) varying;	/* ent part of node pathname.			*/

     dcl						/* 	Built-in Functions and Conditions	*/
         (addr, bit, null, substr)
				builtin,
	cleanup			condition;

     dcl						/*	Entries Called			*/
	get_group_id_	entry returns (char(32)),
	get_ring_		entry returns (fixed bin(3)),
         (hcs_$add_acl_entries,
	hcs_$add_dir_acl_entries,
	hcs_$delete_acl_entries,
	hcs_$delete_dir_acl_entries,
	installation_tools_$add_acl_entries,
	installation_tools_$delete_acl_entries)
				entry (char(*), char(*), ptr, fixed bin, fixed bin(35)),
	hcs_$get_user_effmode	entry (char(*), char(*), char(*), fixed bin, fixed bin(5), fixed bin(35)),
         (hcs_$list_acl,
	hcs_$list_dir_acl)		entry (char(*), char(*), ptr, ptr, ptr, fixed bin, fixed bin(35)),
	lib_node_path_		entry (ptr, char(168) varying, char(32) varying),
         (msf_manager_$acl_add,
	msf_manager_$acl_delete)	entry (ptr, ptr, fixed bin, fixed bin(35)),
	msf_manager_$acl_list	entry (ptr, ptr, ptr, ptr, fixed bin, fixed bin(35)),
	msf_manager_$close		entry (ptr),
	msf_manager_$open		entry (char(*), char(*), ptr, fixed bin(35));
 
     dcl						/*	Static Variables			*/
	False			bit(1) aligned int static options(constant) init ("0"b),
	True			bit(1) aligned int static options(constant) init ("1"b),
         (error_table_$improper_data_format,
	error_table_$link,
	error_table_$out_of_sequence,
	error_table_$user_not_found)	fixed bin(35) ext static,
	ring			fixed bin int static init (8),
	user			char(32) int static init ("");


/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


get:	entry	(Pnode, code);

	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/*  lib_access_mode_$get sets the node.Smode field of input mode current user's access	*/
	/*  to the library entry associated with the node.				*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */


	if user = "" then user = get_group_id_();	/* initialize internal static values.		*/
	if ring = 8  then ring = get_ring_();

	code = 0;					/* initialize return code.			*/
	if Svalid.mode then;			/* if mode already known, return.		*/
	else if node.T = Tlink then do;		/* chase links to get associated access mode.	*/
	     if Svalid.kids then do;
		do PDnodes = node.PD repeat Dnodes.Pnext while (Dnodes.header.T ^= Tnodes);
		     end;
		if Dnodes.N ^= 1 then code = error_table_$link;
		else do;
		     call get (addr(Dnodes.nodes(1)), code);
		     if code = 0 then do;
			node.Smode = addr(Dnodes.nodes(1))->node.Smode;
			Svalid.mode = True;
			end;
		     end;
		end;
	     else code = error_table_$link;
	     end;
	else if node.T = Tarchive_comp then do;		/* assoc access to containing archive with comp.	*/
ARCH_COMP:     call get (node.Pparent, code);
	     if code ^= 0 then do;
		node.Smode = node.Pparent->node.Smode;
		Svalid.mode = True;
		end;
	     end;
	else if node.T = Tarchive & node.offset ^= 0 then	/* do same for archived archive.		*/
	     go to ARCH_COMP;
	else do;					/* get user's access to the library entry.	*/
	     call lib_node_path_ (Pnode, dir, ent);
	     call hcs_$get_user_effmode ((dir), (ent), user, ring, Nmode, code);
	     if code = 0 then do;
		Bmode = bit(Nmode,5);
		if node.T = Tdirectory then do;	/* for directories:				*/
		     substr (node.Smode, 1, 1) = substr (Bmode, 2, 1);
		     substr (node.Smode, 2, 2) = substr (Bmode, 4, 2);
		     end;				/*   map 'xsxma' into 'sma'.			*/
		else if node.T = Tmsf then do;	/* for msfs:				*/
		     substr (node.Smode, 1, 1) = substr (Bmode, 2, 1);
		     substr (node.Smode, 2, 1) = "0"b;
		     substr (node.Smode, 3, 1) = substr (Bmode, 4, 1);
		     end;				/*   map 'xsxma' into 'rxw'.			*/
		else				/* for segments:				*/
		     substr (node.Smode, 1, 3) = substr (Bmode, 2, 3);
		     				/*   map 'xrewx' into 'rew'.			*/
		Svalid.mode = True;			/* mark access mode as being valid.		*/
		end;
	     end;
	return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


set:	entry	(Pnode, new_mode, unset_depth, code);

	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* lib_access_mode_$set sets the user's access (person.proj.a) to a given library entry	*/
	/* to a specified mode.  Information is returned to reverse the setting to the original	*/
	/* ACL contents.								*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */


	if user = "" then user = get_group_id_();	/* initialize internal static values.		*/
	if ring = 8  then ring = get_ring_();

	code = 0;					/* initialize return code.			*/
	unset_depth = 0;				/* to start with, no unsetting is required.	*/


set_recurse:	entry	(Pnode, new_mode, unset_depth, code);

	if Svalid.mode then;			/* get current mode, if not already known.	*/
	else do;
	     call get (Pnode, code);
	     if code ^= 0 then return;
	     end;

	if (node.Smode & new_mode) = new_mode then 	/* do nothing if current mode sufficient to meet	*/
	     Sunset_required = False;			/*   user's needs.				*/
	else Sunset_required = True;

	if Sunset_required then			/* cannot set ACL if previously set without unset	*/
	     if Svalid.prev_mode then do;
		code = error_table_$out_of_sequence;
		Sunset_required = False;
		end;

	if Sunset_required then do;			/* must take positive action to set the ACL.	*/
	     unset_depth = unset_depth + 1;		/* indicate taking another step up/down tree.	*/
	     if node.T = Tlink then do;		/* chase links to set mode.			*/
		if Svalid.kids then do;
		     do PDnodes = node.PD repeat Dnodes.Pnext while (Dnodes.header.T ^= Tnodes);
			end;
		     if Dnodes.N ^= 1 then code = error_table_$link;
		     else do;
			call set_recurse (addr(Dnodes.nodes(1)), new_mode, unset_depth, code);
			if code = 0 then do;
			     node.Smode       = addr(Dnodes.nodes(1))->node.Smode;
			     node.Sprev_mode  = addr(Dnodes.nodes(1))->node.Sprev_mode;
			     Svalid.mode      = addr (addr(Dnodes.nodes(1))->node.Svalid)->Svalid.mode;
			     Svalid.prev_mode = addr (addr(Dnodes.nodes(1))->node.Svalid)->Svalid.prev_mode;
			     end;
			end;
		     end;
		else code = error_table_$link;
		end;
	     else if node.T = Tarchive_comp then do;	/* set ACL on containing archive.		*/
ARCH_COMP_ACL:	call set_recurse ((node.Pparent), new_mode, unset_depth, code);
		if code = 0 then do;
		     node.Smode       = node.Pparent->node.Smode;
		     node.Sprev_mode  = node.Pparent->node.Sprev_mode;
		     Svalid.mode      = addr(node.Pparent->node.Svalid)->Svalid.mode;
		     Svalid.prev_mode = addr(node.Pparent->node.Svalid)->Svalid.prev_mode;
		     end;
		end;
	     else if node.T = Tarchive & node.offset ^= 0 then
		go to ARCH_COMP_ACL;		/* do same for archived archive.		*/
	     else if node.T = Tmsf_comp then		/* do same for MSF component (must keep MSF ACL	*/
		go to ARCH_COMP_ACL;		/*   consistent).				*/

	     else do;
		if node.Pparent ^= null then do;	/* make sure we have access to set access.	*/
		     call set_recurse ((node.Pparent), "110"b, unset_depth, code);
		     if code ^= 0 then return;
		     end;
		call lib_node_path_ (Pnode, dir, ent);	/* get pathname of entry being considered.	*/
		if node.T = Tsegment then do;		/* set segment ACL.				*/
SEG_ACL:		     acle.user = user;
		     acle.mode = ""b;
		     acle.pad  = ""b;
		     acle.code = 0;
		     call hcs_$list_acl ((dir), (ent), null, null, addr(acle), 1, code);
		     if code ^= 0 then return;
		     if acle.code = error_table_$user_not_found then
			node.Sprev_mode = node.Smode;	/*     save user's prev mode, but do NOT mark	*/
						/*       prev mode as valid;  this is reserved	*/
						/*       for prev modes appearing in separate	*/
						/*       ACL entry for user.			*/
		     else do;
			node.Sprev_mode = acle.mode;
			Svalid.prev_mode = True;
			end;
		     acle.mode = new_mode;
		     acle.code = 0;
		     if node.rb(1) < ring then
			call installation_tools_$add_acl_entries ((dir), (ent), addr(acle), 1, code);
		     else call hcs_$add_acl_entries                ((dir), (ent), addr(acle), 1, code);
		     end;
		else if node.T = Tdirectory then do;	/* set directory ACL.			*/
		     dir_acle.user = user;		/*     get current ACLe applying to person.proj.a	*/
		     dir_acle.mode = ""b;
		     dir_acle.code = 0;
		     call hcs_$list_dir_acl ((dir), (ent), null, null, addr(dir_acle), 1, code);
		     if code ^= 0 then return;
		     if dir_acle.code = error_table_$user_not_found then
			node.Sprev_mode = node.Smode;	/*     save user's prev mode, but do NOT mark	*/
						/*       prev mode as valid;  this is reserved	*/
						/*       for prev modes appearing in separate	*/
						/*       ACL entry for user.			*/
		     else do;
			node.Sprev_mode = dir_acle.mode;
			Svalid.prev_mode = True;
			end;
		     dir_acle.mode = new_mode;	/*     set the new mode.			*/
		     dir_acle.code = 0;
		     call hcs_$add_dir_acl_entries ((dir), (ent), addr(dir_acle), 1, code);
		     end;

		else if node.T = Tarchive then 	/* most archives can be handled like segments.	*/
		     go to SEG_ACL;
		else if node.T = Tmsf then do;	/* set MSF ACL.				*/
		     acle.user = user;
		     acle.mode = ""b;
		     acle.pad  = ""b;
		     acle.code = 0;
		     Pmsf_fcb = null;
		     on cleanup begin;
			if Pmsf_fcb ^= null then
			     call msf_manager_$close (Pmsf_fcb);
			end;
		     call msf_manager_$open ((dir), (ent), Pmsf_fcb, code);
		     if code ^= 0 then return;
		     call msf_manager_$acl_list (Pmsf_fcb, null, null, addr(acle), 1, code);
		     if code ^= 0 then do;
			call msf_manager_$close (Pmsf_fcb);
			return;
			end;
		     if acle.code = error_table_$user_not_found then
			node.Sprev_mode = node.Smode;	/*     save user's prev mode, but do NOT mark	*/
						/*       prev mode as valid;  this is reserved	*/
						/*       for prev modes appearing in separate	*/
						/*       ACL entry for user.			*/
		     else do;
			node.Sprev_mode = acle.mode;
			Svalid.prev_mode = True;
			end;
		     acle.mode = new_mode;
		     acle.code = 0;
		     call msf_manager_$acl_add (Pmsf_fcb, addr(acle), 1, code);
		     call msf_manager_$close (Pmsf_fcb);
		     revert cleanup;
		     end;
		end;
	     end;
	return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


unset:	entry	(Pnode, unset_depth, code);

	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* lib_access_mode_$unset reverts any access change made by the $set entry point.	*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */


	if user = "" then user = get_group_id_();	/* initialize internal static values.		*/
	if ring = 8  then ring = get_ring_();

	code = 0;					/* initialize return values.			*/

	if unset_depth = 0 then return;		/* no unsetting required.			*/

	unset_depth = unset_depth - 1;		/* for what we are about to do, count it.	*/

	if node.T = Tlink then do;			/* link unsetting must be done to link kids.	*/
	     if ^Svalid.mode then;			/*     must have gotten error setting; ignore	*/
	     else if ^Svalid.kids then
		code = error_table_$improper_data_format;
	     else do;
		do PDnodes = node.PD repeat Dnodes.Pnext while (Dnodes.header.T ^= Tnodes);
		     end;
		if Dnodes.N = 1 then
		     code = error_table_$improper_data_format;
		else do;
		     call unset (addr(Dnodes.nodes(1)), unset_depth, code);
		     node.Smode       = addr(Dnodes.nodes(1))->node.Smode;
		     node.Sprev_mode  = addr(Dnodes.nodes(1))->node.Sprev_mode;
		     Svalid.mode      = addr (addr(Dnodes.nodes(1))->node.Svalid)->Svalid.mode;
		     Svalid.prev_mode = addr (addr(Dnodes.nodes(1))->node.Svalid)->Svalid.prev_mode;
		     end;
		end;
	     end;

	else do;					/* all other unsetting done to node and its parent*/
	     call lib_node_path_ (Pnode, dir, ent);
	     if node.T = Tsegment then do;		/* restore segment ACL			*/
SEG_ACL_UNSET:	if Svalid.prev_mode then do;		/*     restore previous ACL entry mode.		*/
		     acle.user = user;
		     acle.mode = node.Sprev_mode;
		     acle.pad  = ""b;
		     acle.code = 0;
		     if node.rb(1) < ring then
			call installation_tools_$add_acl_entries ((dir), (ent), addr(acle), 1, code);
		     else call hcs_$add_acl_entries                ((dir), (ent), addr(acle), 1, code);
		     if code ^= 0 then;
		     else do;
			Svalid.prev_mode = False;
			node.Smode = node.Sprev_mode;
			end;
		     end;
		else do;				/*     delete ACL entry for user.		*/
		     del_acle.user = user;
		     del_acle.code = 0;
		     if node.rb(1) < ring then
			call installation_tools_$delete_acl_entries ((dir), (ent), addr(del_acle), 1, code);
		     else call hcs_$delete_acl_entries                ((dir), (ent), addr(del_acle), 1, code);
		     if code ^= 0 then;
		     else node.Smode = node.Sprev_mode;
		     end;
		end;
	     else if node.T = Tdirectory then do;	/* restore directory ACL.			*/
		if Svalid.prev_mode then do;		/*     restore previous ACL entry mode.		*/
		     dir_acle.user = user;
		     dir_acle.mode = node.Sprev_mode;
		     dir_acle.code = 0;
		     call hcs_$add_dir_acl_entries ((dir), (ent), addr(dir_acle), 1, code);
		     if code ^= 0 then;
		     else do;
			Svalid.prev_mode = False;
			node.Smode = node.Sprev_mode;
			end;
		     end;
	 	else do;				/*     delete ACL entry for user.		*/
		     del_acle.user = user;
		     del_acle.code = 0;
		     call hcs_$delete_dir_acl_entries ((dir), (ent), addr(del_acle), 1, code);
		     if code ^= 0 then;
		     else node.Smode = node.Sprev_mode;
		     end;
		end;
	     else if node.T = Tarchive then
		if node.offset > 0 then
		     go to ARCH_ACL_UNSET;
		else go to SEG_ACL_UNSET;
	     else if node.T = Tarchive_comp then do;	/* restore archive component ACL.		*/
ARCH_ACL_UNSET:	call unset ((node.Pparent), unset_depth, code);
		node.Smode       = node.Pparent->node.Smode;
		node.Sprev_mode  = node.Pparent->node.Sprev_mode;
		Svalid.mode      = addr(node.Pparent->node.Svalid)->Svalid.mode;
		Svalid.prev_mode = addr(node.Pparent->node.Svalid)->Svalid.prev_mode;
		end;

	     else if node.T = Tmsf then do;		/* restore MSF ACL.				*/
		Pmsf_fcb = null;
		on cleanup begin;
		     if Pmsf_fcb ^= null then
			call msf_manager_$close (Pmsf_fcb);
		     end;
		call msf_manager_$open ((dir), (ent), Pmsf_fcb, code);
		if code ^= 0 then return;
		if Svalid.prev_mode then do;		/*     restore previous ACL entry mode.		*/
		     acle.user = user;
		     acle.mode = node.Sprev_mode;
		     acle.pad  = ""b;
		     acle.code = 0;
		     call msf_manager_$acl_add (Pmsf_fcb, addr(acle), 1, code);
		     if code ^= 0 then;
		     else do;
			Svalid.prev_mode = False;
			node.Smode = node.Sprev_mode;
			end;
		     end;
		else do;				/*     delete ACL entry for user.		*/
		     del_acle.user = user;
		     del_acle.code = 0;
		     call msf_manager_$acl_delete (Pmsf_fcb, addr(del_acle), 1, code);
		     if code ^= 0 then;
		     else node.Smode = node.Sprev_mode;
		     end;
		call msf_manager_$close (Pmsf_fcb);
		revert cleanup;
		end;
	     else if node.T = Tmsf_comp then
		go to ARCH_ACL_UNSET;		/* unset MSF acl for MSF components.		*/
	     if code = 0 then
		if unset_depth > 0 then
		     call unset ((node.Pparent), unset_depth, code);
	     end;
	return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

%include lib_node_;

	end lib_access_mode_;
