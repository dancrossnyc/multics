/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(2016-01-15,Swenson), approve(2016-01-15,MCR10005):
     Fix lib_fetch_.pl1 to terminate segments that it initiates so as not to
     run out of KST entries.
                                                   END HISTORY COMMENTS */

/* Modified October 26, 1983 by Jim Lippard to fix bug in the call to get_equal_name_ and to properly handle	*/
/*    name duplication									*/
/* Modified June 13, 1984 by Jim Lippard to not sort found names					*/


/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


lib_fetch_: 	procedure (Plibrary, Pstarname, Pexclude, Srequirements, Scontrol, Parg_struc, Acode)
		options	(rename ((alloc_, smart_alloc_)));

     dcl						/*	Parameter				*/
	Acode			fixed bin(35);	/* an error table code.			*/

     dcl						/*	automatic variables			*/
	Iname			fixed bin,	/* count of names processed so far.		*/
	Lcopy			fixed bin(21),	/* length of target segment (in chars).		*/
	Nentries_fetched		fixed bin,	/* number of library entries successfully fetched.*/
	Parea			ptr,		/* ptr to an MSA.				*/
	Pcopy			ptr,		/* ptr to target segment (ie, copy fetched into).	*/
	Pent			ptr,		/* ptr to library entry being fetched.		*/
	Pmsf_fcb			ptr,		/* ptr to msf_manager_'s control block.		*/
	Ptarget_node		ptr,		/* ptr to node for actual library entry being	*/
						/*   fetched.				*/
	Ptree			ptr,		/* ptr to a tree of status nodes.		*/
	1 S_			structure,	/* switches:				*/
	 (2 link_error_output,			/*     on if link error message already output.	*/
	  2 error,				/*     on if error occurred making target seg.	*/
	  2 fetch_not_done,				/*     on if fetch not yet complete.		*/
	  2 acl_init,				/*     on if ACL structure already initialized.	*/
	  2 msf,					/*     on if entry being fetched is an MSF.	*/
	  2 no_action,				/*     on if user said "no" to nd_handler_	*/
	  2 delete_msf)		bit(1) unal,	/*     on if target MSF needs to be deleted after	*/
						/*       an error occurred.			*/
	1 acl			structure,	/* an ACL addition structure.			*/
	  2 access_name		char(32),
	  2 modes			bit(36),
	  2 zero_pad		bit(36),
	  2 code			fixed bin(35),
	bc			fixed bin(24),	/* bit count of library entry.		*/
	clock			fixed bin(71),	/* a clock value.				*/
	code			fixed bin(35),	/* a status code.				*/
	date			char(16) aligned,	/* a date/time string.			*/
	dir			char(168) varying,	/* dir part of library entry pathname.		*/
	ent			char(32) varying,	/* ent part of library entry pathnamer.	*/
	1 fcb_temp		like fcb,		/* storage for file control block.		*/
	i			fixed bin,	/* a do-group index.			*/
	into_dir			char(168),	/* dir part of into_path.			*/
	into_ent			char(32),		/* ent part of into_path.			*/
	msf_comp			fixed bin(24),	/* number of next msf_comp to be initiated.	*/
	nd_result			fixed bin(35),	/* return code from nd_handler_.		*/
	node_name			char(32),		/* a name on the library entry being fetched.	*/
	progress			fixed bin init (0),	/* integer indicating progress of our search.	*/
						/*   0 = search beginning.			*/
						/*   1 = finding library descriptor.		*/
						/*   2 = seeing if library_fetch command supported*/
						/*       by this descriptor.			*/
						/*   3 = getting default library names if user	*/
						/*       specified none.			*/
						/*   4 = getting default search names if user	*/
						/*       specified none.			*/
						/*   5 = allocating the root nodes of the tree.	*/
						/*   6 = searching each library root for entries	*/
						/*       identified by the search names.	*/
						/*   7 = no entries matching search names found.	*/
	state			char(16),		/* an error temporary char string.		*/
	target_name		char(32),		/* name to be put on target segment.		*/
	unique_name		char(32);		/* unique name by which target segment created.	*/

     dcl						/* 	based variables			*/
	area			area based (Parea),	/* an MSA (multi-segment area).		*/
	copy			char(Lcopy) based (Pcopy);
						/* (all or part of) library entry being fetched.	*/

     dcl (addr, divide, length, min, null, string, substr)
				builtin;
     dcl	cleanup			condition;

     dcl						/*	Entries Called			*/
	clock_			entry returns (fixed bin(71)),
	condition_		entry (char(*),  entry),
	date_time_		entry (fixed bin(71), char(*) aligned),
	delete_$path		entry (char(*), char(*), bit(6), char(*), fixed bin(35)),
	expand_path_		entry (ptr, fixed bin, ptr, ptr, fixed bin(35)),
	get_equal_name_		entry (char(*), char(*), char(32), fixed bin(35)),
         (get_group_id_,
	get_group_id_$tag_star)	entry returns (char(32) aligned),
	get_system_msa_		entry (ptr, fixed bin, ptr),
	hcs_$add_acl_entries	entry (char(*), char(*), ptr, fixed bin, fixed bin(35)),
	hcs_$chname_file		entry (char(*), char(*), char(*), char(*), fixed bin(35)),
	hcs_$make_seg		entry (char(*), char(*), char(*), fixed bin(5), ptr, fixed bin(35)),
	hcs_$set_bc_seg		entry (ptr, fixed bin(24), fixed bin(35)),
	hcs_$terminate_noname	entry (ptr, fixed bin(35)),
         (ioa_,
	ioa_$ioa_switch)		entry options (variable),
	iox_$attach_ioname		entry (char(*), ptr, char(*), fixed bin(35)),
	iox_$close		entry (ptr, fixed bin(35)),
	iox_$detach_iocb		entry (ptr, fixed bin(35)),
	iox_$open			entry (ptr, fixed bin, bit(1) aligned, fixed bin(35)),
	lib_array_list_		entry (char(32) varying, ptr, ptr),
	lib_descriptor_$fetch	entry (char(168) varying, ptr, ptr, ptr, bit(72) aligned,  bit(36) aligned,
				       ptr, ptr, fixed bin, fixed bin(35)),
	lib_error_list_		entry (char(32) varying, ptr, char(32) varying),
	lib_next_name_		entry (bit(72) aligned, ptr, fixed bin, ptr) returns (char(32)),
	lib_node_path_		entry (ptr, char(168) varying, char(32) varying),
	lib_output_node_list_$info	entry (ptr, ptr, ptr, ptr, char(45) varying, bit(72) aligned, ptr),
	lib_ptr_and_bc_		entry (ptr, fixed bin(24), ptr, ptr, fixed bin(24), fixed bin(35)),
	lib_sort_tree_$make_name_list
				entry (ptr, ptr, ptr, ptr, fixed bin(35)),
	msa_manager_$area_handler	entry,
	msf_manager_$open		entry (char(*), char(*), ptr, fixed bin(35)),
	msf_manager_$get_ptr	entry (ptr, fixed bin, bit(1), ptr, fixed bin(24), fixed bin(35)),
	msf_manager_$close		entry (ptr),
	nd_handler_		entry (char(*), char(*), char(*), fixed bin(35)),
	release_system_msa_		entry (ptr, fixed bin(35)),
	unique_chars_		entry (bit(*) aligned) returns (char(15));

     dcl						/*	static variables			*/
	False			bit(1) int static options(constant) init ("0"b),
	True			bit(1) int static options(constant) init ("1"b),
         (error_table_$action_not_performed,
	error_table_$entlong,
	error_table_$longeql,
	error_table_$namedup,
	error_table_$noentry,
	error_table_$not_detached,
	error_table_$not_done,
	error_table_$not_open)	fixed bin(35) ext static,
	finish			bit(1) aligned int static options(constant) init ("1"b),
	group_id			char(32) int static init (""),
	on_unit			bit(1) aligned int static options(constant) init ("0"b),
	stream_output		fixed bin int static init (2);
						/* iox_ opening mode for stream-output I/O.	*/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* 1) initialize library pgm's file control block.				*/
	/* 2) establish cleanup on unit.						*/
	/* 3) attach/open output file.						*/
	/* 4) get ptr to system multi-segment area, and establish area on unit.		*/
	/* 5) search and build status tree for library entries being sought.			*/
	/* 6) make a list of found entries						*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

	Acode = 0;				/* initialize output argument.		*/

	Pfcb = addr(fcb_temp);
	fcb.version = Vfcb_1;
	fcb.ioname = "lib_fetch_";			/* do all of our output on the lib_fetch_ ioname.	*/
	fcb.Piocb = null;				/* indicate no attachment so far.		*/
	fcb.Eend_page = no_end_page;
	fcb.page_length = 131071;
	fcb.page_text_length = 131071;
	fcb.page_no = 1;
	fcb.line_length = 79;
	fcb.line_no = 2;

	Parea = null;				/* initialize values used by cleanup on unit.	*/
	Pent = null;
	Pmsf_fcb = null;
	Pcopy = null;
	string(S_) = ""b;				/* initialize all switches.			*/
	on cleanup call janitor(on_unit);

	if Sc.output_file then do;			/* attach/open output file if required.		*/
	     if substr(arg_struc.output_file, length(arg_struc.output_file)-5) ^= ".fetch" then
		if length(arg_struc.output_file) > 162 then do;
		     code = error_table_$entlong;
		     go to  BAD_ATTACH;
		     end;
		else arg_struc.output_file = arg_struc.output_file || ".fetch";
	     call iox_$attach_ioname (fcb.ioname, fcb.Piocb,
		"vfile_ " || arg_struc.output_file || " -extend", code);
	     if code ^= 0 then go to BAD_ATTACH;
	     call iox_$open (fcb.Piocb, stream_output, "0"b, code);
	     if code ^= 0 then go to BAD_OPEN;
	     end;

	call expand_path_ (addr(substr(arg_struc.into_path,1)), length(arg_struc.into_path), addr(into_dir),
	     addr(into_ent), code);
	if code ^= 0 then go to BAD_INTO;		/* validate -into path specification.		*/
	call get_equal_name_ ((32) ".", into_ent, target_name, code);
	if code = error_table_$longeql then;
	else if code ^= 0 then go to BAD_INTO;

	call condition_ ("area", msa_manager_$area_handler);
						/* let msa_manager_ handle area conditions.	*/
	call get_system_msa_ (addr(Parea), 0, (null));	/* get MSA ptr.				*/

	call lib_descriptor_$fetch (arg_struc.descriptor, Plibrary, Pstarname, Pexclude,
	     Srequirements, Scontrol, Parea, Ptree, progress, code);
						/* get a tree of status nodes reflecting the	*/
	if code ^= 0 then go to BAD_SEARCH;		/* library entries which match the star name.	*/

	allocate 	index_list in (area),		/* allocate space for sorting the status nodes.	*/
		name_list in (area),
		node_list in (area);
	index_list.I = 0;				/* initialize count of entries in each list.	*/
	name_list.I = 0;
	node_list.I = 0;
	call lib_sort_tree_$make_name_list (Ptree, Pname_list, Pindex_list, Pnode_list, code);
	if code ^= 0 then go to NO_MATCH;		/* put the outputable nodes into a name list.	*/
	do i = 1 to index_list.I;			/* initialize the index list			*/
	     index_list.e (i) = i;
	end;

	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* For EACH library entry which was found:					*/
	/* 1) Get a pointer to the node describing the found entry.				*/
	/* 2) Complain if the entry is a link, and links are not being chased.		*/
	/* 3) Get pointer to, and bit count of, the library entry to be fetched.		*/
	/* 4) For segments, archives, archive components, and MSF components:			*/
	/*    a) create a uniquely-named target segment in the user-specified directory.	*/
	/*    b) copy the library entry into the target segment.				*/
	/*    c) if the library entry is an object segment, set the user's access to the target	*/
	/*       segment to 're'.							*/
	/*    d) terminate the library entry.						*/
	/*									*/
	/*    For MSFs:								*/
	/*    a) create a uniquely-name target MSF in the user-specified directory, via 	*/
	/*       msf_manager_.							*/
	/*    b) copy the library MSF into the target MSF, component by component.		*/
	/*    c) terminate each library MSF component as it is copied.			*/
	/* 5) Add ALL, the PRIMARY, or the MATCHING names to the uniquely-named target, as	*/
	/*    the user specified.							*/
	/* 6) Remove the unique name.							*/
	/* 7) Output message to the user if -long was specified.				*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */


	Nentries_fetched = 0;
	do i = 1 to index_list.I;			/* loop through nodes to be fetched.		*/
	     unique_name = unique_chars_ (""b);		/*     get unique name to place on target segment.*/
	     Pnode = node_list.e (index_list.e(i));	/*     get ptr to node.			*/
	     call lib_node_path_ (Pnode, dir, ent);	/*     get pathname of library entry.		*/
	     if node.T = Tlink then if ^Sc.chase then do;	/*     warn user that links aren't chased.	*/
		if S_.link_error_output then
		     call arg_struc.put_error (error_table_$not_done, arg_struc.program, " Link  ^a>^a",
			dir, ent);
		else do;
		     call arg_struc.put_error (error_table_$not_done, arg_struc.program, "
  Use the -chase option to fetch the target of the link
  ^a>^a.", dir, ent);
		     S_.link_error_output = True;
		     end;
		node_list.e (index_list.e(i)) = null;
		Acode = code;
		go to NEXT_NODE;
		end;
	     msf_comp = 0;
	     call lib_ptr_and_bc_ (Pnode, msf_comp, Ptarget_node, Pent, bc, code);
	     if code ^= 0 then do;
		if node.T = Tlink then
		     call arg_struc.put_error (code, arg_struc.program, "
  Unable to fetch through null link  ^a>^a.", dir, ent);
		else call arg_struc.put_error (code, arg_struc.program, "
  Unable to fetch ^a  ^a>^a.", node_type(node.T), dir, ent);
		node_list.e (index_list.e(i)) = null;
		Acode = code;
		go to NEXT_NODE;
		end;
	     if node.T = Tlink then
		go to COPY (Ptarget_node->node.T);	/*     copy according to type of library entry.	*/
	     else go to COPY (node.T);
 
COPY(1):						/*     segment entries.			*/
COPY(4):						/*     MSF component entries.			*/
COPY(5):						/*     archive entries.			*/
COPY(6):						/*     archive component entries.		*/
	     call hcs_$make_seg (into_dir, unique_name, "", 01010b, Pcopy, code);
	     if Pcopy = null then do;			/*     create new segment in which ent is copied.	*/
		call arg_struc.put_error (code, arg_struc.program, "
  Unable to create segment  ^a
  (^a>^a)
  into which the library entry will be copied.", ent, into_dir, unique_name);
		S_.error = True;
		Acode = code;
		go to TERM_ENT;
		end;
	     S_.fetch_not_done = True;
	     Lcopy = divide (bc+8, 9, 21, 0);		/*     compute number of characters to be copied.	*/
	     copy = Pent -> copy;			/*     copy library entry into target segment.	*/
	     call hcs_$set_bc_seg (Pcopy, bc, code);	/*     set the bit count on the target segment.	*/
	     if Svalid.object_info then do;		/*     set ACL of object segs to 're'		*/
		if ^S_.acl_init then do;
		     if group_id = "" then group_id = get_group_id_$tag_star();
		     acl.access_name = group_id;
		     acl.modes       = "110"b;
		     acl.zero_pad    = ""b;
		     end;
		call hcs_$add_acl_entries (into_dir, unique_name, addr(acl), 1, code);
		if code ^= 0 then
		     call arg_struc.put_error (code, arg_struc.program, "
  Unable to give user 're' access to fetched entry  ^a,
  (^a>^a).", ent, into_dir, unique_name);
		end;
TERM_ENT:	     call hcs_$terminate_noname (Pent, code);
	     call hcs_$terminate_noname (Pcopy, code);
	     Pent = null;
	     if S_.error then do;
		S_.error = False;
		node_list.e(index_list.e(i)) = null;
		go to NEXT_NODE;
		end;
	     go to JOIN;
 
COPY(3):						/*     MSF entries.				*/
	     S_.msf = True;				/*     Indicate we're dealing with an MSF.	*/
	     call msf_manager_$open (into_dir, unique_name, Pmsf_fcb, code);
	     if code ^= 0 then if code ^= error_table_$noentry then do;
						/*     create new MSF into which ent is copied.	*/
		call arg_struc.put_error (code, arg_struc.program, "
  Unable to create MSF  ^a
  (^a>^a)
  into which the library MSF will be copied.", ent, into_dir, unique_name);
		S_.error = True;
		Acode = code;
		go to TERM_MSF;
		end;
	     do while (Pent ^= null);			/*     copy MSF, component by component.	*/
		call msf_manager_$get_ptr (Pmsf_fcb, msf_comp-1, True, Pcopy, 0, code);
		if Pcopy = null then do;
		     call arg_struc.put_error (code, arg_struc.program, "
  Unable to create MSF component ^d in MSF  ^a
  (^a>^a).", msf_comp-1, ent, into_dir, unique_name);
		     S_.error = True;
		     S_.delete_msf = (msf_comp >= 2);
		     Acode = code;
		     go to TERM_MSF;
		     end;
	  	S_.fetch_not_done = True;
		Lcopy = divide (bc+8, 9, 21, 0);
		copy = Pent -> copy;
		call hcs_$set_bc_seg (Pcopy, bc, code);
		call hcs_$terminate_noname (Pent, 0);
		call lib_ptr_and_bc_ (Pnode, msf_comp, Ptarget_node, Pent, bc, code);
		end;
TERM_MSF:	     call msf_manager_$close (Pmsf_fcb);
	     Pmsf_fcb = null;
	     if S_.delete_msf then do;
		call delete_$path (into_dir, unique_name, "000100"b, (arg_struc.program), code);
		S_.delete_msf = False;
		end;
	     if S_.error then do;
		S_.error = False;
		node_list.e(index_list.e(i)) = null;
		go to NEXT_NODE;
		end;
	     go to JOIN;

JOIN:	     do PDnames = node.PD repeat Dnames.Pnext while (Dnames.T ^= Tnames);
		end;				/*     get list of names on library entry.	*/
	     Iname = 0;				/*     indicate no names in list processed yet.	*/
	     node_name = lib_next_name_ (node.Sreq, PDnames, Iname, Pstarname);
	     S_.no_action = False;

	     do while (node_name ^= "");		/*     add names to target, 1 by 1.		*/
		call get_equal_name_ (node_name, into_ent, target_name, code);
		if code ^= 0 then do;
		     call arg_struc.put_error (code, arg_struc.program, "
  Unable to apply equal name  ^a  to library entry name  ^a.", into_ent, node_name);
		     go to NEXT_NAME;
		     end;
		call hcs_$chname_file (into_dir, unique_name, "", target_name, code);
		if code = error_table_$namedup then do;
		     call nd_handler_ ((arg_struc.program), into_dir, target_name, nd_result);
		     if nd_result = 0 then
			call hcs_$chname_file (into_dir, unique_name, "", target_name, code);
		     else if nd_result = error_table_$action_not_performed then S_.no_action = True;
		     end;
		else if code ^= 0 then do;
		     call arg_struc.put_error (code, arg_struc.program, "
  Unable to add name  ^a  to copied library entry  ^a
  (^a>^a).", target_name, Dnames.names(1), into_dir, unique_name);
		     Acode = code;
		     end;
NEXT_NAME:	node_name = lib_next_name_ (node.Sreq, PDnames, Iname, Pstarname);
		end;

	     S_.fetch_not_done = False;
	     call hcs_$chname_file (into_dir, unique_name, unique_name, "", code);
	     if code ^= 0 then do;			/* If unique name is only name on copy, complain!	*/
		if ^S_.no_action then call arg_struc.put_error (code, arg_struc.program, "
  Unable to add any names to copied library entry  ^a
  The entry could not be fetched.", Dnames.names(1));
		call delete_$path (into_dir, unique_name, "000100"b, (arg_struc.program), code);
		node_list.e(index_list.e(i)) = null;
		go to NEXT_NODE;
		end;

	     Nentries_fetched = Nentries_fetched + 1;	/* Increment count of entries actually fetched.	*/

	     if Sc.long then do;			/*     output the fetched message.		*/
		call ioa_ ("Library ^a  ^a  ^/  fetched from  ^a", node_type(node.T), ent, dir);
		if arg_struc.into_path ^= "==" then
		     call ioa_ ("  into  ^a>^a.", into_dir, target_name);
		end;

NEXT_NODE:     end;					/* That completes the processing for this node.	*/

	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* Output list of fetched nodes into output file.					*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

	if Nentries_fetched = 0 then return;
	else if Sc.output_file then;
	else return;

	clock = clock_();
	call date_time_ (clock, date);
	if Nentries_fetched = 1 then
	     call ioa_$ioa_switch (fcb.Piocb, "^/Entry   Fetched:^-^5x1");
	else call ioa_$ioa_switch (fcb.Piocb, "^/Entries Fetched:^-^5x^d", Nentries_fetched);
	call ioa_$ioa_switch (fcb.Piocb, "     Fetched on:^-^5x^a", date);
	call ioa_$ioa_switch (fcb.Piocb, "     Fetched by:^-^5x^a", get_group_id_());
	call ioa_$ioa_switch (fcb.Piocb, "     Descriptor:^-^5x^a", arg_struc.descriptor);
	if library.N = 1 then
	     call lib_array_list_ (" Library Name", Plibrary, fcb.Piocb);
	else call lib_array_list_ ("Library Name", Plibrary, fcb.Piocb);
	if starname.N = 1 then
	     call lib_array_list_ ("  Search Name", Pstarname, fcb.Piocb);
	else call lib_array_list_ (" Search Name", Pstarname, fcb.Piocb);

	call lib_output_node_list_$info (Pfcb, Pnode_list, Pname_list, Pindex_list, "",
	     (72)"1"b, addr(starname));
						/* print the nodes, including names which	*/
						/*    match the user's search names.		*/
DETACH:	if Acode = 0 then Acode = code;
	call janitor(finish);			/* clean up.				*/
	return;

janitor:	procedure (invocation_mode);			/* cleanup procedure.			*/

     dcl	invocation_mode		bit(1) aligned;	/* off if invoked by cleanup on unit.		*/

	if Parea ^= null then			/* cleanup by releasing any system MSA.		*/
	     call release_system_msa_ (addr(Parea), code);
	if fcb.Piocb ^= null then do;			/* close/detach our output file, if open.	*/
	     call iox_$close (fcb.Piocb, code);
	     if invocation_mode = finish then if code ^= 0 then if code ^= error_table_$not_open
		then go to BAD_CLOSE;
	     call iox_$detach_iocb (fcb.Piocb, code);
	     fcb.Piocb = null;			/* we've done all we can.  Stop trying.		*/
	     if invocation_mode = finish then if code ^= 0 then go to BAD_DETACH;
	     end;
	if Pent ^= null then
	     call hcs_$terminate_noname (Pent, code);
	if S_.msf then
	     if Pmsf_fcb ^= null then
		call msf_manager_$close (Pmsf_fcb);
	     else;
	else if Pcopy ^= null then
	     call hcs_$terminate_noname (Pent, code);
	if S_.fetch_not_done then
	     call delete_$path (into_dir, unique_name, "000100"b, (arg_struc.program), code);

	end janitor;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


BAD_ATTACH:
	if code = error_table_$not_detached then go to MULTIPLE_ATTACH;
	state = "attaching";
	fcb.Piocb = null;
	go to BAD_IO;
BAD_CLOSE:
	state = "closing";
	go to BAD_IO;
BAD_DETACH:
	state = "detaching";
	go to BAD_IO;
BAD_OPEN:
	state = "opening";
BAD_IO:	call arg_struc.put_error (code,arg_struc.program, "
  While ^a the fetch record  ^R^a^B
  using the I/O switch  ^R^a^B.",
	     state, arg_struc.output_file, fcb.ioname);
	go to DETACH;

MULTIPLE_ATTACH:
	call arg_struc.put_error (code, arg_struc.program, "
  While attaching the map file  ^R^a^B
  to the I/O switch  ^R^a^B.
  Release any other activations of ^a and try again.", arg_struc.output_file, fcb.ioname, arg_struc.program);
	Acode = code;
	return;

BAD_INTO:	call arg_struc.put_error (code, arg_struc.program, " -into ^a", arg_struc.into_path);
	Acode = code;
	return;

BAD_SEARCH:
	progress = min (progress, 7);
	go to BAD_S (progress);
BAD_S(0): call arg_struc.put_error (code, arg_struc.program, "
  While calling lib_descriptor_$map.");
	go to DETACH;
BAD_S(1): call arg_struc.put_error (code, arg_struc.program, "
  While finding the  '^R^a^B'  library descriptor.",
	     arg_struc.descriptor);
	go to DETACH;
BAD_S(2): call arg_struc.put_error (code, arg_struc.program, "
  Library descriptor  '^R^a^B'  does not implement
  the ^a command.",
	     arg_struc.descriptor, arg_struc.program);
	go to DETACH;
BAD_S(3): state = "library";
	go to NO_DEFAULT_NAMES;
BAD_S(4): state = "search";
NO_DEFAULT_NAMES:
	call arg_struc.put_error (code, arg_struc.program, "
  No ^a names were specified, and the  '^R^a^B'
  library descriptor does not define any default ^a names.", state, arg_struc.descriptor, state);
	go to DETACH;
BAD_S(5): call arg_struc.put_error (code, arg_struc.program, "
  While allocating the root nodes of the library tree.");
	go to DETACH;

BAD_S(6):
NO_MATCH:	call arg_struc.put_error (code, arg_struc.program, "
  While searching for entries in the library.
  Descriptor:^-^5x^a",
	     arg_struc.descriptor);
	call lib_error_list_ ("library name", Plibrary, arg_struc.program);
	call lib_error_list_ ("search name", Pstarname, arg_struc.program);
	go to DETACH;
BAD_S(7):	call arg_struc.put_error (code, arg_struc.program, "
  No libraries matching the library name(s) could be found.
  Descriptor:^-^5x^a", arg_struc.descriptor);
	call lib_error_list_ ("library name", Plibrary, arg_struc.program);
	go to DETACH;


/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


no_end_page:	procedure;			/* This is a null end-of-page handling proc.	*/

	fcb.page_no = fcb.page_no + 1;
	fcb.line_no = 1;

	end no_end_page;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

%include lib_arg_struc_;

%include lib_based_args_;

%include lib_fcb_;

%include lib_list_;

%include lib_node_;


	end lib_fetch_;
