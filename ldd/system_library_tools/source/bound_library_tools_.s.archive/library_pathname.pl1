/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */



	
/****^  HISTORY COMMENTS:
  1) change(2017-02-20,GDixon), approve(2017-02-20,MCR10034),
     audit(2017-02-25,Swenson), install(2017-02-28,MR12.6f-0021):
     Change library_pathname active function to return more than one matching
     name, when additional matches are found in the libraries.
     Add support for -containing and -components control arguments.
                                                   END HISTORY COMMENTS */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* Names: library_pathname, lpn						*/
	/*									*/
	/* This command/af is part of the Multics library descriptor tools.  Given a library	*/
	/* descriptor name, a set of library names, and a set of star_names, it returns the	*/
	/* pathnames of library entries which match the star_names.  Archive pathnames are	*/
	/* returned for library entries in archives.  The default library descriptor name is set	*/
	/* (for a process) by the library_descriptor command.  The defaults for library and	*/
	/* star_names (search_names) are specified for the library_info command (and for this	*/
	/* command/af) in each library descriptor.  To list the defaults, use the command:	*/
	/*    lds default library_info						*/
	/*									*/
	/* Status:								*/
	/* 0) Created:   October, 1981 by G. C. Dixon					*/
	/* 1) Modified:  October 11, 1983 by Jim Lippard to rtrim return pathnames and not say	*/
	/* anything about entries "eligible for deletion" and add -all_matches (-amch) and	*/
	/* -first_match (-fmch).							*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

library_pathname:
lpn:	procedure;

     dcl						/*	automatic variables			*/
	Lret			fixed bin(21),
	Nargs			fixed bin,
	Npaths			fixed bin,
	Ppaths			ptr,
	Pret			ptr,
	Scommand			bit(1),
	1 arg_struc_temp		like arg_struc,	/* storage for argument structure.		*/
	code			fixed bin(35),	/* a status code.				*/
	i			fixed bin,	/* a do-group index.			*/
	path			char(200) var,
	progress			fixed bin init (0),	/* integer indicating progress of our search.	*/
						/*   0 = search beginning.			*/
						/*   1 = finding library descriptor.		*/
						/*   2 = seeing if library_pathname command	*/
						/*       supported by this descriptor.		*/
						/*   3 = getting default library names if user	*/
						/*       specified none.			*/
						/*   4 = getting default search names if user	*/
						/*       specified none.			*/
						/*   5 = allocating the root nodes of the tree.	*/
						/*   6 = searching each library root for entries	*/
						/*       identified by the search names.	*/
						/*   7 = no entries matching search names found.	*/
	state			char(7) varying;
	

     dcl						/* 	based variables			*/
	area			area based (Parea),
	paths (Npaths)		char(200) based(Ppaths),
	ret			char(Lret) varying based(Pret);

     dcl (addr, length, min, null, rtrim, substr)
				builtin;

     dcl	cleanup			condition;

     dcl						/*	Entries Called			*/
	active_fnc_err_		entry() options(variable),
	com_err_			entry options(variable),
	cu_$af_return_arg		entry (fixed bin, ptr, fixed bin(21), fixed bin(35)),
	cu_$arg_list_ptr		entry returns(ptr),
	err			entry options(variable) variable,
	get_shortest_path_		entry (char(*)) returns(char(168)),
	get_system_free_area_	entry() returns(ptr),
	ioa_			entry options(variable),
	lib_args_			entry (1 aligned like LIBRARY, 1 aligned like STARNAME, 1 aligned like STARNAME, bit(72) aligned,
				       bit(36) aligned, ptr, fixed bin(35)),
	lib_error_list_$return_string	entry (char(32) var, ptr) returns(char(*) var),
	lib_pathname_		entry (char(168) var, ptr, ptr, ptr, bit (72) aligned, bit (36) aligned, ptr, ptr,
				     fixed bin, fixed bin, fixed bin(35)),
	requote_string_		entry (char(*)) returns(char(*));

     dcl						/*	static variables			*/
         (FALSE			init("0"b),
	TRUE			init("1"b)) bit(1) int static options(constant),
	Parea			ptr int static init(null);
     dcl  error_table_$pathlong	fixed bin(35) ext static;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


	call cu_$af_return_arg (Nargs, Pret, Lret, code);
	if code = 0 then do;
	     Scommand = FALSE;
	     err = active_fnc_err_;
	     ret = "";
	     end;
	else do;
	     Scommand = TRUE;
	     err = com_err_;
	     end;

	Parg_struc = addr(arg_struc_temp);		/* Initialize argument processing structure.	*/
	arg_struc.version = Varg_struc_1;
	arg_struc.program = "library_pathname";
	arg_struc.Parg_list = cu_$arg_list_ptr();
	arg_struc.Iarg_list = 1;
	arg_struc.Larg_list = Nargs;
	arg_struc.put_error = err;
	arg_struc.Srequirements_allowed = ""b;
	arg_struc.Srequirements_initial = ""b;
	arg_struc.Scontrol_allowed = ""b;
	arg_struc.Scontrol_initial = ""b;

	Sc_allowed.descriptor     = TRUE;		/* Mark Sc bits- show which ctl args allowed.	*/
	Sc_allowed.library        = TRUE;
	Sc_allowed.search_names   = TRUE;
	Sc_allowed.first_match    = TRUE;
	Sc_allowed.container      = TRUE;
	Sc_allowed.components     = TRUE;

	call lib_args_ (LIBRARY, STARNAME, EXCLUDE, Srequirements, Scontrol, addr(arg_struc), code);
	if code ^= 0 then return;			/* call subr to process all arguments.		*/

	Plibrary = addr(LIBRARY);
	Pstarname = addr(STARNAME);
	Pexclude = addr(EXCLUDE);
	if Parea = null then
	     Parea = get_system_free_area_();

	Ppaths = null;
	on cleanup call janitor();

	call lib_pathname_ (arg_struc.descriptor, Plibrary, Pstarname, Pexclude, Srequirements, Scontrol, Parea, Ppaths, Npaths, progress, code);
	if code ^= 0 then go to BAD_SEARCH;

	if Scommand then 
	     call ioa_ ("^(^a^/^)", paths);
	else do;
	     do i = 1 to Npaths;
		path = requote_string_( rtrim( get_shortest_path_(paths(i) ))) || " ";
		if length(ret) + length(path) <= maxlength(ret) then
		     ret = ret || path;
		else go to PATHS_TOO_LONG;
		end;

	     ret = substr (ret, 1, length (ret) - 1);
	     end;

FINISH:	call janitor;				/* clean up.				*/
	return;


janitor:	proc;

	if Ppaths ^= null then
	     free paths in (area);
	Ppaths = null;

	end janitor;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

BAD_SEARCH:
	progress = min (progress, 7);
	go to BAD_S (progress);

BAD_S(0): call err (code, arg_struc.program, "^/  While calling lib_descriptor_$map.");
	go to FINISH;

BAD_S(1): call err (code, arg_struc.program, "^/  While finding the  '^R^a^B'  library descriptor.",
	     arg_struc.descriptor);
	go to FINISH;

BAD_S(2): call err (code, arg_struc.program,
	     "^/  Library descriptor  '^R^a^B'  does not implement^/  the ^a command.",
	     arg_struc.descriptor, arg_struc.program);
	go to FINISH;

BAD_S(3): state = "library";
	go to NO_DEFAULT_NAMES;

BAD_S(4): state = "search";
NO_DEFAULT_NAMES:
	call err (code, arg_struc.program,
	     "^/  No ^a names were specified, and the  '^R^a^B'
  library descriptor does not define any default ^a names.", state, arg_struc.descriptor, state);
	go to FINISH;

BAD_S(5): call err (code, arg_struc.program, "^/  While allocating the root nodes of the library tree.");
	go to FINISH;

BAD_S(6):
NO_MATCH:	call err (code, arg_struc.program,
	     "^/  While searching for entries in the library.^/  Descriptor:^-^5x^a^/^a^/^a",
	     arg_struc.descriptor,
	     lib_error_list_$return_string ("library name", Plibrary),
	     lib_error_list_$return_string ("search name", Pstarname));
	go to FINISH;

BAD_S(7):	call err (code, arg_struc.program, "^/  No libraries matching the library name(s) could be found.
  Descriptor:^-^5x^a^/^a", arg_struc.descriptor,
	     lib_error_list_$return_string ("library name", Plibrary));
	go to FINISH;

PATHS_TOO_LONG:
	call err (error_table_$pathlong, arg_struc.program, 
	     "^/  Active function return string will not hold ^d pathnames.", Npaths);
	go to FINISH;
	

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

%include lib_arg_struc_;

%include lib_based_args_;

%include lib_Scontrol_;

%include lib_Svalid_req_;

	end library_pathname;
