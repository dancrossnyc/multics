/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */

/* Modified October 26, 1983 by Jim Lippard to add -first_match (-fmch) and -all_matches (-amch)		*/
/* Modified March 5, 1984 by Jim Lippard to assume -all_matches if more than one searchname or any starnames	*/
/*    are supplied										*/
/* Modified June 13, 1984 by Jim Lippard to assume -amch if -components is specified			*/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


library_fetch: lf:	procedure;

     dcl						/*	automatic variables			*/
	1 arg_struc_temp		like arg_struc,	/* storage for argument structure.		*/
	code			fixed bin(35);	/* a status code.				*/

     dcl 	addr			builtin;

     dcl						/*	Entries Called			*/
	com_err_			entry options(variable),
	cu_$arg_count		entry returns (fixed bin),
	cu_$arg_list_ptr		entry returns(ptr),
	lib_args_			entry (1 aligned like LIBRARY, 1 aligned like STARNAME, 1 aligned like STARNAME, bit(72) aligned,
				       bit(36) aligned, ptr, fixed bin(35)),
	lib_fetch_		entry (ptr, ptr, ptr, bit(72) aligned, bit(36) aligned, ptr, fixed bin(35));

     dcl						/*	static variables			*/
	True			bit(1) aligned int static options(constant) init ("1"b),
	False			bit(1) aligned int static options(constant) init ("0"b);

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


	Parg_struc = addr(arg_struc_temp);		/* Initialize argument processing structure.	*/
	arg_struc.version = Varg_struc_1;
	arg_struc.program = "library_fetch";
	arg_struc.Parg_list = cu_$arg_list_ptr();
	arg_struc.Iarg_list = 1;
	arg_struc.Larg_list = cu_$arg_count();
	arg_struc.put_error = com_err_;
	arg_struc.Srequirements_allowed = ""b;
	arg_struc.Srequirements_initial = ""b;
	arg_struc.Scontrol_allowed = ""b;
	arg_struc.Scontrol_initial = ""b;

	Sreq_allowed.access_class        = True;	/* Mark Sreq bits-  show which output args allowed*/
	Sreq_allowed.acl                 = True;
	Sreq_allowed.aim                 = True;
	Sreq_allowed.author              = True;
	Sreq_allowed.bit_count           = True;
	Sreq_allowed.bit_count_author    = True;
	Sreq_allowed.compiler_name       = True;
	Sreq_allowed.compiler_options    = True;
	Sreq_allowed.compiler_version    = True;
	Sreq_allowed.copy                = True;
	Sreq_allowed.current_length      = True;
	Sreq_allowed.dtc                 = True;
	Sreq_allowed.dtd                 = True;
	Sreq_allowed.dtem                = True;
	Sreq_allowed.dtm                 = True;
	Sreq_allowed.dtu                 = True;
	Sreq_allowed.entry_bound         = True;
	Sreq_allowed.iacl                = True;
	Sreq_allowed.kids                = True;
	Sreq_allowed.kids_error          = True;
	Sreq_allowed.level               = True;
	Sreq_allowed.link_target         = True;
	Sreq_allowed.lvid                = True;
	Sreq_allowed.matching_names      = True;
	Sreq_allowed.max_length          = True;
	Sreq_allowed.mode                = True;
	Sreq_allowed.msf_indicator       = True;
	Sreq_allowed.names               = True;
	Sreq_allowed.new_line            = True;
	Sreq_allowed.not_ascii           = True;
	Sreq_allowed.object_info         = True;
	Sreq_allowed.offset              = True;
	Sreq_allowed.pathname            = True;
	Sreq_allowed.primary_name        = True;
	Sreq_allowed.pvid                = True;
	Sreq_allowed.quota               = True;
	Sreq_allowed.rb                  = True;
	Sreq_allowed.records_used        = True;
	Sreq_allowed.root_search_proc    = True;
	Sreq_allowed.safety              = True;
	Sreq_allowed.type                = True;
	Sreq_allowed.unique_id           = True;
	Sreq_allowed.user                = True;



	Sreq_init.user		   = True;	/* Mark bits on by default.			*/

	Sc_allowed.acl            = True;		/* Mark Sc bits- show which ctl args allowed.	*/
	Sc_allowed.all_status     = True;
	Sc_allowed.chase          = True;
	Sc_allowed.check_archive  = True;
	Sc_allowed.check_ascii    = True;
	Sc_allowed.components     = True;
	Sc_allowed.container      = True;
	Sc_allowed.default        = True;
	Sc_allowed.iacl           = True;
	Sc_allowed.object_info    = True;
	Sc_allowed.quota          = True;
	Sc_allowed.retain         = True;
	Sc_allowed.descriptor     = True;
	Sc_allowed.into_path      = True;
	Sc_allowed.long           = True;
	Sc_allowed.library        = True;
	Sc_allowed.output_file    = True;
	Sc_allowed.search_names   = True;
	Sc_allowed.first_match    = True;

	Sc_init.into_path 	      = True;		/* Mark bits for ctl args supplied by default.	*/
	arg_struc.into_path = "==";
	Sc_init.default           = True;
	Sc_init.first_match       = True;

	call lib_args_ (LIBRARY, STARNAME, EXCLUDE, Srequirements, Scontrol, addr(arg_struc), code);
	if code ^= 0 then return;			/* call subr to process all arguments.		*/
						/*   errors are reported by lib_args_.		*/

	if ^Sc.default & ^S.names & ^S.matching_names & ^S.primary_name then
	     S.matching_names = True;			/* use matching names by default.		*/

	/* the following code does not work for a descriptor with default search names			*/
	if STARNAME.N > 1 then Sc.first_match = False;	/* get all matches if more than one search name	*/
	else if STARNAME.N = 1 then
	     if STARNAME.C (1) ^= 0 then Sc.first_match = False; /* get all matches if it's a starname	*/
	else if Sc.components then Sc.first_match = False; /* or if -components */

	call lib_fetch_ (addr(LIBRARY), addr(STARNAME), addr(EXCLUDE), Srequirements, Scontrol,
	     addr(arg_struc), code);
	return;					/* errors reported by lib_fetch_.		*/

%include lib_arg_struc_;

%include lib_Svalid_req_;

%include lib_Scontrol_;


	end library_fetch;
