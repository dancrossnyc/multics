/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */

/* Modified:  January, 1984 by Jim Lippard to align structures passed to lib_args_			*/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


library_cleanup: lcln:	procedure
		options	(rename ((alloc_, smart_alloc_)));

     dcl						/*	automatic variables			*/
	Bgrace_begins		bit(36) aligned,	/* time grace period begins (fstime in bits).	*/
	Idelete			fixed bin,	/* count of nodes to be deleted.		*/
	Inode			fixed bin,	/* count of nodes which are candidates for delete	*/
	Ngrace_begins		fixed bin(71),	/* time grace period begins.			*/
	Parea			ptr,		/* ptr to an MSA.				*/
	Pdelete			ptr,		/* ptr to node currently being deleted.		*/
	Pprev_parent		ptr,		/* ptr to parent of node just listed/deleted.	*/
	Ptree			ptr,		/* ptr to a tree of status nodes.		*/
	1 arg_struc_temp		like arg_struc,	/* storage for argument structure.		*/
	code			fixed bin(35),	/* a status code.				*/
	dir			char(168) varying,	/* dir part of node pathname.			*/
	ent			char(32)  varying,	/* ent part of node pathname.		*/
	1 fcb_temp		like fcb,		/* storage for file control block.		*/
	i			fixed bin,	/* a do-group index.			*/
	prev_dir			char(168) varying,	/* dir part of prev node pathname.		*/
	prev_ent			char(32)  varying,	/* ent part of prev node pathname.		*/
	progress			fixed bin init (0),	/* integer indicating progress of our search.	*/
						/*   0 = search beginning.			*/
						/*   1 = finding library descriptor.		*/
						/*   2 = seeing if library_cleanup command	*/
						/*       supported by this descriptor.		*/
						/*   3 = getting default library names if user	*/
						/*       specified none.			*/
						/*   4 = getting default search names if user	*/
						/*       specified none.			*/
						/*   5 = allocating the root nodes of the tree.	*/
						/*   6 = searching each library root for entries	*/
						/*       identified by the search names.	*/
						/*   7 = no entries matching search names found.	*/
	state			char(16),		/* an error temporary char string.		*/
	unset_depth		fixed bin,	/* height/depth up/down tree to which access	*/
	yes_no			char(3) varying;	/* answer to a command_query_ question.		*/
						/*   was set and must be unset.		*/

     dcl						/* 	based variables			*/
	area			area based (Parea),	/* an MSA (multi-segment area).		*/
	Ngrace_begins_bits		bit(72) based (addr(Ngrace_begins));
						/* bit string overlay for Ngrace_begins.	*/

     dcl (addr, min, null, substr)
				builtin;
     dcl	cleanup			condition;

     dcl						/*	Entries Called			*/
	clock_			entry returns (fixed bin(71)),
         (com_err_,
	com_err_$suppress_name)	entry options(variable),

	command_query_		entry options(variable),
	condition_		entry (char(*) aligned, entry),
	cu_$arg_count		entry returns (fixed bin),
	cu_$arg_list_ptr		entry returns(ptr),
	delete_$path 		entry (char(*), char(*), bit(6), char(*), fixed bin(35)),
	get_line_length_$switch	entry (ptr, fixed bin(35)) returns (fixed bin),
	get_ring_			entry returns (fixed bin),
	get_system_msa_		entry (ptr, fixed bin, ptr),
	hcs_$set_copysw		entry (char(*), char(*), bit(1), fixed bin(35)),
	hcs_$set_safety_sw		entry (char(*), char(*), bit(1), fixed bin(35)),
	ioa_			entry options(variable),
	installation_tools_$set_ring_brackets
				entry (char(*), char(*), (3) fixed bin(3), fixed bin(35)),
	lib_access_mode_$set	entry (ptr, bit(36) aligned, fixed bin, fixed bin(35)),
	lib_access_mode_$unset	entry (ptr, fixed bin, fixed bin(35)),
	lib_args_			entry (1 aligned like LIBRARY, 1 aligned like STARNAME, 1 aligned like STARNAME, bit(72) aligned,
				       bit(36) aligned, ptr, fixed bin(35)),
	lib_descriptor_$cleanup	entry (char(168) varying, ptr, ptr, ptr, bit(72) aligned,  bit(36) aligned,
				       ptr, ptr, fixed bin, fixed bin(35)),
	lib_error_list_		entry (char(32) varying, ptr, char(32) varying),
	lib_node_path_		entry (ptr, char(168) varying, char(32) varying),
	lib_output_node_$cleanup	entry (ptr, ptr, bit(72) aligned, fixed bin, ptr, fixed bin, ptr),
	lib_sort_tree_$make_node_list
				entry (ptr, ptr, fixed bin(35)),
	msa_manager_$area_handler	entry,
	release_system_msa_		entry (ptr, fixed bin(35)),
	system_info_$titles		entry (char(*) aligned, char(*) aligned, char(*) aligned,
				       char(*) aligned);

     dcl						/*	static variables			*/
	False			bit(1) aligned int static options(constant) init ("0"b),
	True			bit(1) aligned int static options(constant) init ("1"b),
	comment (0:1)		char(28) varying int static options(constant) init (
				     "listed",
				     "flagged with an asterisk (*)"),
         (error_table_$noarg,
	error_table_$nomatch,
	error_table_$not_done,
	error_table_$out_of_bounds)	fixed bin(35) ext static,
	iox_$user_output		ptr ext static,
	ring (3)			fixed bin(3) int static init ((3)0),
	sys_info$time_of_bootload	fixed bin(71) ext static;
						/* iox_ opening mode for stream-output I/O.	*/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


	Parg_struc = addr(arg_struc_temp);		/* Initialize argument processing structure.	*/
	arg_struc.version = Varg_struc_1;
	arg_struc.program = "library_cleanup";
	arg_struc.Parg_list = cu_$arg_list_ptr();
	arg_struc.Iarg_list = 1;
	arg_struc.Larg_list = cu_$arg_count();
	arg_struc.put_error = com_err_;
	arg_struc.Srequirements_allowed = ""b;
	arg_struc.Srequirements_initial = ""b;
	arg_struc.Scontrol_allowed = ""b;
	arg_struc.Scontrol_initial = ""b;


	Sc_allowed.descriptor     = True;		/* Mark Sc bits- show which ctl args allowed.	*/
	Sc_allowed.library        = True;
	Sc_allowed.search_names   = True;
	Sc_allowed.delete         = True;
	Sc_allowed.list           = True;
	Sc_allowed.long           = True;
	Sc_allowed.time           = True;

	Sc_init.time              = True;
	arg_struc.time = 7;				/* set default grace time of 7 days.		*/

	call lib_args_ (LIBRARY, STARNAME, EXCLUDE, Srequirements, Scontrol, addr(arg_struc), code);
	if code ^= 0 then return;			/* call subr to process all arguments.		*/

	if arg_struc.time < 0 then go to BAD_TIME;

	Sc.default = True;				/* give user default output.			*/

	if Sc.long then Sc.list = True;		/* -long implies -list.			*/

	if ^Sc.list then if ^Sc.delete then Sc.list = True;
						/* -list is the default.			*/

	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* 1) establish cleanup on unit.						*/
	/* 2) get ptr to system multi-segment area.					*/
	/* 3) search and build status tree for library entries which are candidates for deletion.	*/
	/* 4) make a list of the entries found.						*/
	/* 5) initialize file control block.						*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

	Parea = null;
	Pprev_parent = null;
	unset_depth = 0;
	Pdelete = null;
	on cleanup call janitor;

	call get_system_msa_ (addr(Parea), 0, null);
	call condition_ ("area", msa_manager_$area_handler);

	Plibrary = addr(LIBRARY);
	Pstarname = addr(STARNAME);
	Pexclude = addr(EXCLUDE);
	call lib_descriptor_$cleanup (arg_struc.descriptor, Plibrary, Pstarname, Pexclude,
	     Srequirements, Scontrol, Parea, Ptree, progress, code);
	if code ^= 0 then go to BAD_SEARCH;

	allocate node_list in (area);
	node_list.I = 0;
	call lib_sort_tree_$make_node_list (Ptree, Pnode_list, code);
	if code ^= 0 then go to NO_MATCH; 

	Pfcb = addr(fcb_temp);
	fcb.version = Vfcb_1;
	fcb.ioname = "user_output";			/* print output on user's terminal.		*/
	fcb.Piocb = iox_$user_output;
	fcb.Eend_page = no_end_page;
	fcb.page_length = 131071;			/* use large page size to avoid footings.	*/
	fcb.page_text_length = 131071;
	fcb.page_no = 1;
	fcb.line_length = get_line_length_$switch (fcb.Piocb, code);
	if code ^= 0 then fcb.line_length = 79;
	fcb.line_no = 2;				/* prevent new_line from being suppressed before	*/
						/*   the first entry.  They're suppressed for 1st	*/
						/*   line of a page.			*/

	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* 1) Compute date on which grace period began.  It must be before time system came up.	*/
	/* 2) For each node in the list (nodes which are candidates for deletion):		*/
	/*    A) Set Svalid.delete on if node not modified within the grace period.		*/
	/*    B) If -list given, output the node in a numbered list, flagging those to be deleted.*/
	/* 3) If -delete given without -list, ask if user really wants to delete without listing.	*/
	/*    Abide by his decision.  If the answer is yes, proceed with step 5.		*/
	/* 4) Else if -delete given with -list, ask if user wants to delete flagged entries.	*/
	/*    If the answer is yes, proceed with step 5.					*/
	/*    If the answer is no,  then quit.						*/
	/* 5) Delete the list entries eligible for deletion.				*/
	/*    Only links, segments, directories, MSFs, MSF components and archives can be deleted.*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */


	Ngrace_begins = clock_() - (arg_struc.time * 86400000000);
						/* subtract grace (days * micro_sec/day) from now.*/
	Ngrace_begins = min (Ngrace_begins, sys_info$time_of_bootload);
						/* don't delete anything if someone could be using*/
						/*   it (ie, it was marked out of circulation 	*/
						/*   after system came up).			*/
	Bgrace_begins = substr(Ngrace_begins_bits,21,36);	

	Inode = 0;
	Idelete = 0;
	Pprev_parent = null;
	do i = 1 to node_list.I;
	     Pnode = node_list.e(i);
	     if node.dtem < Bgrace_begins then do;
 		Svalid.delete = True;
		Idelete = Idelete + 1;
		end;
	     else Svalid.delete = False;
	     if Sc.long | (Sc.list & Svalid.delete) then do;
		Inode = Inode + 1;
		call lib_output_node_$cleanup (Pfcb, Pnode, (72)"1"b, 0, Pstarname, Inode, Pprev_parent);
		Pprev_parent = node.Pparent;
		end;
	     end;
	if Inode > 0 then call ioa_ ("");

	if Idelete = 0 then do;
	     code = error_table_$nomatch;
	     go to NO_MATCH;
	     end;


	if Sc.delete then do;
	     query_info.version = 2;
	     query_info.yes_or_no_sw = True;
	     query_info.suppress_name_sw = False;
	     query_info.status_code = 0;
	     query_info.query_code = 0;
	     if ^Sc.list then do;
		call com_err_$suppress_name (0, arg_struc.program, "
  Grace Time:^-^5x^d days
  Descriptor:^-^5x^a", arg_struc.time,  arg_struc.descriptor);
		call lib_error_list_ ("library name", Plibrary, arg_struc.program);
		call lib_error_list_ ("search name", Pstarname, arg_struc.program);
		call command_query_ (addr(query_info), yes_no, arg_struc.program, "
  Given the information above, ^d library entries are eligible for deletion.
  Do you want to delete them?", Idelete);
		if yes_no = "no" then go to FINISH;
		end;
	     else do;
		call command_query_ (addr(query_info), yes_no, arg_struc.program, "
  Do you want to delete ALL of the ^d entries ^a above?", Idelete, comment (binary (Sc.long,1)));
		if yes_no = "no" then go to FINISH;
		end;
	     Pprev_parent = null;
	     do i = 1 to node_list.I;
		Pnode = node_list.e(i);
		if Svalid.delete then do;
		     Pdelete = Pnode;
		     call delete_entry (Pnode, Pprev_parent);
		     Pdelete = null;
		     Pprev_parent = node.Pparent;
		     end;
		end;
	     end;

FINISH:	call janitor;				/* clean up.				*/
	return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


delete_entry:	procedure (Pnode_, Pprev_parent);	/* internal procedure to delete a library entry.	*/

     dcl	Pnode_			ptr,		/* ptr to node for entry to be deleted.		*/
	Pprev_parent		ptr;		/* ptr to parent node for last node deleted.	*/

     dcl	1 node_			like node based (Pnode_);
		
		
	call lib_node_path_ (Pnode_, dir, ent);		/* get pathname of entry to be deleted.		*/

	if node_.T = Tarchive_comp then do;		/* cannot delete archive components.		*/
	     call com_err_ (error_table_$not_done, arg_struc.program, "
  Unable to delete archive components, such as
  ^a>^a", dir, ent);
	     end;
	else if node_.T = Tlink & node_.Pparent->node_.T ^= Tdirectory then do;
	     call com_err_ (error_table_$not_done, arg_struc.program, "
  Unable to unlink links which are the target of library links, such as
  ^a>^a.  Library links themselves may be unlinked.", dir, ent);
	     end;
	else do;
	     if Pprev_parent ^= node_.Pparent then do;	/* make sure user has access to delete entry.	*/
		if Pprev_parent ^= null then do;
		     call lib_access_mode_$unset (Pprev_parent, unset_depth, code);
		     if code ^= 0 then do;
			call lib_node_path_ (Pprev_parent, prev_dir, prev_ent);
			call com_err_ (code, arg_struc.program, "
  While restoring the ACL of the library ^a
  ^a>^a.", node_type(Pprev_parent->node_.T), prev_dir, prev_ent);
			end;
		     Pprev_parent = null;
		     end;
		call lib_access_mode_$set ((node_.Pparent), "110"b, unset_depth, code);
		if code ^= 0 then do;
		     call com_err_ (code, arg_struc.program, "
  Unable to obtain modify access to the library ^a
  ^a
  containing entries to be deleted.", node_type(node_.Pparent->node_.T), dir);
		     end;
		end;

	     if node_.T ^= Tlink then do;		/* take special precautions for non-links.	*/
		if ring(1) = 0 then ring = get_ring_();	/*     make sure entry is in our ring.		*/
		if node_.rb(1) < ring(1) then do;
		     call installation_tools_$set_ring_brackets ((dir), (ent), ring, code);
		     if code ^= 0 then
			call com_err_ (code, arg_struc.program, "
  Unable to set ring brackets on library ^a
  ^a>^a.", node_type(node_.T), dir, ent);
		     end;
		if node_.Ssafety then do;		/*     Turn off safety switch to ease deletion.	*/
		     call hcs_$set_safety_sw ((dir), (ent), "0"b, code);
		     if code ^= 0 then
			call com_err_ (code, arg_struc.program, "
  Unable to turn off safety switch of library ^a
  ^a>^a.", node_type(node_.T), dir, ent);
		     end;
		if node_.Scopy then do;		/*     Turn off copy switch to ease deletion.	*/
		     call hcs_$set_copysw ((dir), (ent), "0"b, code);
		     if code ^= 0 then
			call com_err_ (code, arg_struc.program, "
  Unable to turn off copy switch of library ^a
  ^a>^a.", node_type(node_.T), dir, ent);
		     end;
		end;

	     call delete_$path ((dir), (ent), "011110"b, (arg_struc.program), code);
	     if code ^= 0 then do;			/* delete the library entry.			*/
		call com_err_ (code, arg_struc.program, "
  Unable to delete library ^a
  ^a>^a", node_type(node_.T), dir, ent);
		if node_.Scopy then
		     call hcs_$set_copysw ((dir), (ent), "1"b, code);
		if node_.Ssafety then
		     call hcs_$set_safety_sw ((dir), (ent), "1"b, code);
		if node_.rb(1) < ring(1) then
		     call installation_tools_$set_ring_brackets ((dir), (ent), node_.rb, code);
		end;
	     end;
	end delete_entry;



/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


janitor:	procedure;				/* cleanup procedure.			*/

	if Pprev_parent ^= null then do;
	     call lib_access_mode_$unset (Pprev_parent, unset_depth, code);
	     Pprev_parent = null;
	     end;
	if Pdelete ^= null then do;
	     call lib_node_path_ (Pdelete, prev_dir, prev_ent);
	     call com_err_ (error_table_$not_done, arg_struc.program, "
  Cleanup occurred while deleting library ^a
  ^a>^a.
  This entry may not be completely deleted.  Those which follow
  it have not been deleted.", node_type(Pdelete->node.T), prev_dir, prev_ent);
	     end;
	if Parea ^= null then			/* cleanup by releasing any system MSA.		*/
	     call release_system_msa_ (addr(Parea), code);

	end janitor;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


no_end_page:	procedure;			/* This is a null end-of-page handling proc.	*/

	fcb.page_no = fcb.page_no + 1;
	fcb.line_no = 2;

	end no_end_page;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


BAD_TIME:	call com_err_ (error_table_$out_of_bounds, arg_struc.program, "^d
  A positive grace period must be given.", arg_struc.time);
	return;

BAD_SEARCH:
	progress = min (progress, 7);
	go to BAD_S (progress);
BAD_S(0): call com_err_ (code, arg_struc.program, "^/  While calling lib_descriptor_$map.");
	go to FINISH;
BAD_S(1): call com_err_ (code, arg_struc.program, "^/  While finding the  '^R^a^B'  library descriptor.",
	     arg_struc.descriptor);
	go to FINISH;
BAD_S(2): call com_err_ (code, arg_struc.program,
	     "^/  Library descriptor  '^R^a^B'  does not implement^/  the ^a command.",
	     arg_struc.descriptor, arg_struc.program);
	go to FINISH;
BAD_S(3): state = "library";
	go to NO_DEFAULT_NAMES;
BAD_S(4): state = "search";
NO_DEFAULT_NAMES:
	call com_err_ (code, arg_struc.program,
	     "^/  No ^a names were specified, and the  '^R^a^B'
  library descriptor does not define any default ^a names.", state, arg_struc.descriptor, state);
	go to FINISH;
BAD_S(5): call com_err_ (code, arg_struc.program, "^/  While allocating the root nodes of the library tree.");
	go to FINISH;
BAD_S(6):
NO_MATCH:	call com_err_ (code, arg_struc.program,
	     "^/  While searching for entries eligible for deletion in the library.^/  Descriptor:^-^5x^a",
	     arg_struc.descriptor);
	call lib_error_list_ ("library name", Plibrary, arg_struc.program);
	call lib_error_list_ ("search name", Pstarname, arg_struc.program);
	go to FINISH;
BAD_S(7):	call com_err_ (code, arg_struc.program, "^/  No libraries matching the library name(s) could be found.
  Descriptor:^-^5x^a", arg_struc.descriptor);
	call lib_error_list_ ("library name", Plibrary, arg_struc.program);
	go to FINISH;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

%include lib_arg_struc_;

%include lib_based_args_;

%include lib_fcb_;

%include lib_list_;

%include lib_node_;

%include query_info_;


	end library_cleanup;
