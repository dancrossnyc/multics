/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


lib_sort_tree_:	procedure;

     dcl	Ptree			ptr,		/* ptr to node tree to be sorted. (In)		*/
	code			fixed bin(35);	/* a status code. (Out)			*/

     dcl	I			fixed bin,	/* do-group index.				*/
	i			fixed bin;	/* do-group index.				*/

     dcl (addr, null)		builtin;

     dcl	sort_items_indirect_$char	entry (ptr, ptr, fixed bin(24));

     dcl	error_table_$nomatch	fixed bin(35) ext static,
	null_name			char(32) aligned int static init ("");
						/* a null name used for nodes without name	*/
						/* descriptors.				*/
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


make_node_list:	entry	(Ptree, Pnode_list, code);	/* entry to find inner-most tree nodes with	*/
						/*   some node.Sreq bits on;  return a list of	*/
						/*   such nodes.				*/
	code = 0;					/* initialize output code.			*/
	i = node_list.I;				/* remember how many nodes already in list.	*/
	call recurse (Ptree, Pnode_list);		/* scan thru tree, putting desired nodes in list.	*/
	if node_list.I = i then code = error_table_$nomatch;
	return;					/* return error if no nodes found.		*/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


make_name_list:	entry	(Ptree, Pname_list, Pindex_list, Pnode_list, code);
						/* entry to put printable nodes of a node tree	*/
						/* into a name list.			*/

	code = 0;					/* initialize output code.			*/
	i = node_list.I;				/* remember how many nodes are already in list.	*/
	call recurse (Ptree, Pnode_list);		/* scan through the tree, putting printable nodes	*/
						/* into the node list.			*/
	if node_list.I = i then do;			/* if no outputable entries were found,		*/
	     code = error_table_$nomatch;		/* return an error.				*/
	     return;
	     end;
	do I = i+1 to node_list.I;			/* make the name_list elements point to the	*/
						/* primary name of nodes in the node list.	*/
	     Pnode = node_list.e(I);			/* first, access node pointed to by node list	*/
						/* element.				*/
	     if Svalid.names then do;			/* if node has a name descriptor, then		*/
		do PDnames = node.PD repeat Dnames.Pnext while (Dnames.T ^= Tnames);
		     end;				/* access the name descriptor;		*/
		name_list.e(I) = addr (Dnames.names(1));/* make name_list element point to first name.	*/
		index_list.e(I) = I;		/* initialize index list.			*/
		if Sreq.cross_ref then 		/* if all names on node are to be cross referenced*/
		     do i = 2 to Dnames.N while (node_list.I < node_list.N);
			node_list.I = node_list.I + 1;/* add the rest of it's names to the name list.	*/
			node_list.e(node_list.I) = Pnode;
			name_list.e(node_list.I) = addr (Dnames.names(i));
			index_list.e(node_list.I) = node_list.I;
			end;
		end;
	     else do;				/* if node has no names, then point to a null name*/
		name_list.e(I) = addr (null_name);
		index_list.e(I) = I;
		end;
	     end;
	name_list.I = node_list.I;			/* set number of name list and index list elements*/
	index_list.I = node_list.I;			/* equal to the number of elements in node list.	*/
	return;					/* All done!				*/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


name_list:	entry	(Pname_list, Pindex_list);	/* entry to sort a name list.			*/

	if name_list.I > 1 then			/* if there's more than one matching node,	*/
	     call sort_items_indirect_$char (addr(name_list.I), addr(index_list.I), 32);
						/* sort the elements of index_list.e into order	*/
						/* so that:				*/
						/*    name_list.e(index_list.e(i))->based_name <=	*/
						/*       name_list.e(index_list.e(j))->based_name	*/
						/* for all i < j.				*/
	else					/* otherwise, fill in the only item's index list.	*/
	     index_list.e(1) = 1;
	return;					/* All done!				*/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


recurse:	procedure (PDnodes_, Pnode_list);		/* Recursive internal procedure to scan node tree	*/
						/* looking for printable nodes to put into the	*/
     dcl	PDnodes_			ptr,		/* node list.				*/
	Pnode_list		ptr;

     dcl	PD_			ptr,		/* ptr to a node array descriptor.		*/
	Pnode_			ptr,		/* ptr to a node.				*/
	i			fixed bin;	/* do-group index.				*/

     dcl	1 D_			aligned based (PD_) like D,
						/* a kid's node array descriptor.		*/
	1 Dnodes_			aligned based (PDnodes_),
						/* node array to be scanned for outputable nodes.	*/
	  2 header		like Dnodes.header,
	  2 nodes (Nnodes refer (Dnodes_.N))
				like node,

	1 Sreq			aligned based (addr (node_.Sreq)) like Svalid_req,
						/* switches defining which node data is required.	*/
	1 Svalid			aligned based (addr (node_.Svalid)) like Svalid_req,
						/* switches defining which node data is valid.	*/
	1 node_			aligned based (Pnode_) like node,
						/* a node.				*/
	1 node_list		aligned based (Pnode_list),
	  2 N			fixed bin,	/* the node list.				*/
	  2 I			fixed bin,
	  2 e (0 refer (node_list.I)) ptr unaligned;


	do i = 1 to Dnodes_.N while (node_list.I < node_list.N);
						/* scan all nodes in node array at this tree level*/
						/* or until our node list is full.		*/
	     Pnode_ = addr (Dnodes_.nodes(i));		/* address the ith node of the node array.	*/
	     if node_.Pparent ^= null then		/* if node has a parent then if its parent is	*/
		if node_.Pparent -> node_.Sreq then	/*    outputable, only put the node into the	*/
		     if Sreq.cross_ref then;		/*    node list if it is to be cross-referenced.	*/
		     else go to skip_it;		/* otherwise, do _n_o_t add to list.		*/
	     if node_.Sreq then do;			/* if node can be output, then:		*/
		node_list.I = node_list.I + 1;	/* get index of next node list element.		*/
		node_list.e(node_list.I) = Pnode_;	/* put pointer to node in node list.		*/
		if node_.T ^= Tlink then		/* if this outputable node is not a link or msf,	*/
		     if node_.T ^= Tmsf then		/* add any of its kids to the node list too.	*/
			if Svalid.kids then do;
			     do PD_ = node_.PD repeat D_.Pnext while (D_.T ^= Tnodes);
				end;
			     call recurse (PD_, Pnode_list);
			     end;
		end;

	     else if Svalid.kids then do;		/* if this node is not outputable, see if any of	*/
						/* it's kids are.				*/
		do PD_ = node_.PD repeat D_.Pnext while (D_.T ^= Tnodes);
		     end;
		call recurse (PD_, Pnode_list);
		end;
skip_it:	     end;

	end recurse;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
%include lib_list_;

%include lib_node_;



	end lib_sort_tree_;
