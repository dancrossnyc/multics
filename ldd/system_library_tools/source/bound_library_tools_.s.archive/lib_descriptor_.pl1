/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* NAME:  lib_descriptor_							*/
	/*									*/
	/*     THis procedure interfaces between the various library maintenance tools and the	*/
	/* library status gathering subroutines by mapping user-supplied (or default) library	*/
	/* names into the pathnames of library directories or archives to be searched.  It 	*/
	/* also provides a pre-defined, per-library search procedure to find library entries.	*/
	/*									*/
	/* ENTRIES:  $info, $map, $print, $fetch, $cleanup				*/
	/*									*/
	/*      These entries are provided to support the five basic library maintenance tools,	*/
	/* library_info, library_map, library_print, library_fetch, and library_cleanup.  All	*/
	/* perform the same basic function of gathering library status;  however, this status	*/
	/* gathering operation often differs in depth of search, cross-referencing, default info	*/
	/* returned, etc between the different library tools.				*/
	/*									*/
	/* ENTRIES:  $name, $set_name							*/
	/*									*/
	/*      These entries return and set the name of the library descriptor which is used	*/
	/* by default to do the name mapping, etc.  The initial default value is the		*/
	/* multics_libraries_ library descriptor.					*/
	/*									*/
	/* ENTRY:  $default_values	 						*/
	/*									*/
	/*      This entry returns information about the default library names and search names	*/
	/* which are used by the various library tools.					*/
	/*									*/
	/* ENTRIES:  $libraries, $validate_library					*/
	/*									*/
	/*      These entries return information about the libraries defined in a given library	*/
	/* descriptor, and validate the correctness of library names with respect to a given	*/
	/* library descriptor.							*/
	/*									*/
	/* STATUS									*/
	/*									*/
	/* 0) Created on:   March 1, 1975  by  G. C. Dixon				*/
	/* 1) Modified on:  May 25, 1976   by  G. C. Dixon				*/
	/*    a) Use new library descriptor format provided by library_descriptor_compiler,	*/
	/*       Version 3.0.							*/
	/* 2) Modified on:  January 18, 1984 by Jim Lippard to add n_found			*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

lib_descriptor_:	procedure;


     dcl						/*	parameters			*/
	Adescriptor		char(168) varying;	/* name of a library descriptor. (In/Out)	*/
%include lib_based_args_;
     dcl	1 bad_library		based (Pbad_library),
	  2 N			fixed bin,
	  2 group (0 refer (bad_library.N))
				like library.group,
	Pbad_library		ptr,
	ASrequirements		bit(72) aligned,	/* requirement switches. (In)			*/
	AScontrol			bit(36) aligned,	/* control switches. (In)			*/
	Parea			ptr,		/* ptr to area in which status tree is to be	*/
						/*    allocated. (In)			*/
	Acommand			fixed bin,	/* index of a command using the descriptor. (In)	*/
	Acommand_name		char(32),		/* name of command using the descriptor. (Out)	*/
	ASunsupported		bit(1) unal,	/* on if command is not supported by the 	*/
						/*    specified descriptor. (Out)		*/
	Ptree			ptr,		/* ptr to status tree. (Out)			*/
	progress			fixed bin,	/* integer identifying progress of search. (Out)	*/
	Acode			fixed bin(35);	/* a status code. (Out)			*/

     dcl						/*	automatic variables			*/
	Nnodes			fixed bin,	/* = dimension (root node array of status tree)	*/
	Pnodes			ptr,		/* = addr (root node array of status tree)	*/
	Prt			ptr,		/* = addr (rt).				*/
	Sfound			bit(1) aligned,
						/* switch:  on if library found.		*/
	code			fixed bin(35),	/* a status code.				*/
         (i, j, k)			fixed bin;	/* do group indices.			*/

     dcl	1 command_info		aligned,		/* info passed to search routine		*/
	  2 command		fixed bin,	/* index of command referencing descriptor.	*/
	  2 n_found		fixed bin;	/* number of entries found			*/

     dcl						/* 	based variables			*/
	area			area based (Parea),	/* an allocation area.			*/
	1 rt			like root based (Prt);
						/* overlay for a root.			*/


     dcl						/*	builtin functions			*/
         (addr, addrel, dimension, length, min, null, substr)
				builtin;


     dcl						/*	entries				*/
	cu_$decode_entry_value	entry (entry, ptr, ptr),
	cv_entry_			entry (char(*), ptr, fixed bin(35)) returns (entry),
	lib_free_node_$array	entry (ptr),
	lib_get_tree_$root_array	entry (fixed bin, ptr, ptr, fixed bin(35)),
	lib_get_tree_$root_array_info entry (ptr, fixed bin, fixed bin(35)),
	lib_get_tree_$lib_root_node	entry (ptr, fixed bin, char(168) varying, char(65) varying, ptr, ptr,
				       bit(72) aligned, bit(36) aligned, ptr,
				       entry, ptr, ptr, fixed bin, fixed bin(35)),
	match_star_name_		entry (char(*), char(*), fixed bin(35));

     dcl						/*	static variables			*/
	1 defaultP		aligned like P int static,
						/* pointers to the aggregates of the default	*/
						/*    library descriptor.			*/
         (error_table_$name_not_found,
	error_table_$noarg,
	error_table_$nomatch,
	error_table_$out_of_bounds,
	error_table_$process_stopped,
	error_table_$request_not_recognized,
	error_table_$unimplemented_version)
				fixed bin(35) ext static,
	first_call		bit(1) aligned int static init ("1"b),
						/* switch:  on if lib_descriptor_ has not been	*/
						/*    referenced in this process before.	*/
	multics_libraries_$descriptor	fixed bin ext static,
						/* first word of the initial default library	*/
						/*    descriptor.				*/
	1 zero_names		int static options(constant),
						/* an empty name structure.			*/
	  2 N			fixed bin init(0);

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


info:	entry	(Adescriptor, Plibrary, Pstarname, Pexclude, ASrequirements, AScontrol, Parea, Ptree,
		 progress, Acode);

	command_info.command = library_info;
	go to common;


map:	entry	(Adescriptor, Plibrary, Pstarname, Pexclude, ASrequirements, AScontrol, Parea, Ptree,
		 progress, Acode);

	command_info.command = library_map;
	go to common;


print:	entry 	(Adescriptor, Plibrary, Pstarname, Pexclude, ASrequirements, AScontrol, Parea, Ptree,
		 progress, Acode);

	command_info.command = library_print;
	go to common;


fetch:	entry     (Adescriptor, Plibrary, Pstarname, Pexclude, ASrequirements, AScontrol, Parea, Ptree,
		 progress, Acode);

	command_info.command = library_fetch;
	go to common;


cleanup:	entry	(Adescriptor, Plibrary, Pstarname, Pexclude, ASrequirements, AScontrol, Parea, Ptree,
		 progress, Acode);

	command_info.command = library_cleanup;
	go to common;

	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* _p_r_o_g_r_e_s_s								*/
	/*									*/
	/* 1) If the user has specified a descriptor, then get a pointer to it and its aggregates.*/
	/*    Otherwise, get pointers to the default descriptor's aggregates, and return the	*/
	/*    name of the default descriptor.						*/
	/* 2) See if the command is supported by this descriptor.  If not, return an error code.	*/
	/* 3) See if the user supplied any library names.  If not, address the default library	*/
	/*    names specified by the descriptor for this command.  If none in descriptor either,	*/
	/*    return an error code.							*/
	/* 4) Repeat step 3 for star names used to search for library entries.		*/
	/* 5) Allocate an array of root nodes for the status tree which is big enough to hold _a_l_l	*/
	/*    of the roots defined by this descriptor.  This will handle the maximum possible	*/
	/*    case.								*/
	/* 6) Compare the library names with the names of defined roots.  When a match is found,	*/
	/*    fill in a status tree root node for that root, and look for library entries in the	*/
	/*    root which match the search name(s).  If no matching library entries are found,	*/
	/*    remove the root from the root node array.					*/
	/* 7) If the root node array of the status tree is empty after all roots identified	*/
	/*    by the library names have been searched, then free the root node array and return	*/
	/*    an error code.  Otherwise, return a pointer to the status tree.			*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

common:	Ptree = null;				/* initialize return arguments.		*/
	command_info.n_found = 0;

	progress = 1;				/* find descriptor.				*/
	call find_descriptor (Adescriptor, P, Acode);	/* note that Acode is initialized here.		*/
	if Acode ^= 0 then return;

	progress = 2;				/* see if command supported.			*/
	if command_default_values.N < command then go to unsupported;
	if command_default_values(command).S.unsupported then do;
unsupported:   Acode = error_table_$request_not_recognized;
	     return;
	     end;

	progress = 3;				/* address library names.			*/
	if library.N < 1 then do;
	     Plibrary_names = addrel (P.descriptor, command_default_values(command).library_names.O);
	     Plibrary = addr(library_names.N);
	     end;
	if library.N < 1 then do;
	     Acode = error_table_$noarg;
	     return;
	     end;

	progress = 4;				/* address the search names.			*/
	if starname.N < 1 then do;
	     Psearch_names = addrel (P.descriptor, command_default_values(command).search_names.O);
	     Pstarname = addr(search_names.N);
	     end;
	if starname.N < 1 then do;
	     Acode = error_table_$noarg;
	     return;
	     end;

	progress = 5;				/* allocate the root nodes of the status tree.	*/
	call lib_get_tree_$root_array (roots.N, Parea, Pnodes, Acode);
	if Acode ^= 0 then
	     return;

	progress = 6;				/* find library entries in roots matching library	*/
	Sfound = "0"b;				/*    names.				*/
	do k = 1 to roots.N;
	     Proot_names = addrel (P.descriptor, roots.root(k).name.O);
	     do i = 1 to root_names.N;
		do j = 1 to library.N;
		     go to match (library(j).C);

match(0):		     if root_names.root_name(i) = library(j).V then go to match_found;
		     go to no_match;

match(1):		     call match_star_name_ (root_names.root_name(i), library(j).V, code);
		     if code = 0 then go to match_found;

no_match:		     end;
		end;
	     go to next_name;

match(2):
match_found:   Sfound = "1"b;
	     Prt = addr(roots.root(k));
	     call lib_get_tree_$lib_root_node (Proot_names, rt.type, rt.path, rt.search_proc_name, Pstarname,
		Pexclude, ASrequirements, AScontrol, Parea, rt.search_proc, addr(command_info),
		Pnodes, roots.N, code);
	     if code = error_table_$process_stopped then do;
		code = 0;
		go to stop_searching;
		end;
	     else if code ^= 0 then
		Acode = code;			/* return last bad error to caller.		*/
next_name:     end;
stop_searching:
	call lib_get_tree_$root_array_info (Pnodes, Nnodes, code);
	if (Nnodes > 0) | Sfound then do;		/* find out about resultant status tree.	*/
	     if Acode = 0 then 			/* return any code from tree except nomatch.	*/
		if code ^= error_table_$nomatch then
		     Acode = code;
	     Ptree = Pnodes;			/* if non-empty, return tree, with any code rec'd	*/
	     return;				/*    while getting tree, to caller.		*/
	     end;

	progress = 7;				/* tree empty.  Tell user why and return.	*/
	if Acode = 0 then
	     if code ^= 0 then
		Acode = code;			/* return lib_get_tree_'s reason for empty tree.	*/
	     else
		Acode = error_table_$nomatch;
	call lib_free_node_$array (Pnodes);		/* free up Dnodes.				*/
	return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


name:	entry	(Adescriptor);

	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* This entry point returns the name of the current default library descriptor.		*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */


	if first_call then call find_descriptor ("", P, code);
	else P.descriptor = defaultP.descriptor;
	Adescriptor = descriptor.name;
	return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


set_name:	entry	(Adescriptor, Acode);

	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* This entry point sets the name of the default library descriptor.			*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */


	if Adescriptor = "" then first_call = "1"b;	/* if returning to the initial default descriptor,*/
						/*    re-initialize default descriptor values.	*/
	call find_descriptor (Adescriptor, P, Acode);
	if Acode = 0 then
	     defaultP = P;
	return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


default_values:	entry    (Adescriptor, Acommand, Acommand_name, ASunsupported, Plibrary, Pstarname, Pexclude,
			progress, Acode);

	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* This entry point expects as input either:  1) the index of a library command; or 	*/
	/* 2) the name of a library command.  If a name is given, it converts the name to an	*/
	/* index.  If the index is valid, the entry point returns the following information about	*/
	/* the command:  the name of the command;  a switch indicating whether or not the	*/
	/* command is supported by the specified (or default) library descriptor;  and the	*/
	/* default library names and search names associated with the command (if any).  If the	*/
	/* index is invalid, or if the specified library descriptor cannot be located, it returns	*/
	/* a non-zero error code.							*/
	/*									*/
	/* _p_r_o_g_r_e_s_s								*/
	/*									*/
	/* 0) Validate the command index (if given), or convert the command name to a command	*/
	/*    index.								*/
	/* 1) If the user specified a library descriptor, then get a pointer to it and its	*/
	/*    aggregates.  Otherwise, get pointers to the default descriptor's aggregates.	*/
	/* 2) Report whether or not the command is supported.				*/
	/* 3) If supported, return any default values for library names and search names.	*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */


	ASunsupported = "1"b;			/* initialize output values.			*/
	Plibrary = addr(zero_names);
	Pstarname = addr(zero_names);
	Acode = 0;

	progress = 0;				/* progress command index.			*/
	if Acommand < 1 then do;			/* a command name was given.  Convert it to an	*/
						/*    index.				*/
	     do i = 1 to dimension (command_name,1) while (command_name(i) ^= Acommand_name);
		end;
	     if i > dimension (command_name,1) then do;
		do i = 1 to dimension (command_abbrev,1) while (command_abbrev(i) ^= Acommand_name);
		     end;
		if i > dimension (command_abbrev,1) then go to bad_command_name;
		Acommand_name = command_name(i);	/* return full command name in place of abbrev.	*/
		end;
	     command_info.command = i;
	     Acommand = i;
	     end;
	else do;					/* validate the command index.		*/
	     if Acommand > dimension (command_name,1) then go to bad_command_index;
	     command_info.command = Acommand;
	     Acommand_name = command_name(command_info.command);	/* return the command name.			*/
	     end;

	progress = 1;				/* find the descriptor.			*/
	call find_descriptor (Adescriptor, P, Acode);
	if Acode ^= 0 then return;

	progress = 2;				/* report whether or not command supported.	*/
	if command_default_values.N < command_info.command then do;
	     ASunsupported = "1"b;			/* an old library descriptor doesn't include this	*/
	     return;				/*    command.  Command is unsupported.		*/
	     end;
	ASunsupported = command_default_values(command_info.command).S.unsupported;
	if ASunsupported then return;			/* no more to do for an unsupported command.	*/

	progress = 3;				/* report on any default values.		*/
	Plibrary_names = addrel (P.descriptor, command_default_values(command_info.command).library_names.O);
	Plibrary = addr (library_names.N);
	Psearch_names = addrel (P.descriptor, command_default_values(command_info.command).search_names.O);
	Pstarname = addr (search_names.N);
	return;

bad_command_index:
	Acode = error_table_$out_of_bounds;		/* no such command index as being asked for.	*/
	return;

bad_command_name:
	Acode = error_table_$name_not_found;
	return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


libraries:	entry    (Adescriptor, Plibrary, ASrequirements, Parea, Ptree, progress, Acode);

	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* This entry point expects as input an array of library names.  It returns as output an	*/
	/* array of library root nodes (suitable for printing by the lib_output_node_ subroutine) */
	/* for the libraries in the library descriptor which match the specified library names.	*/
	/* If no library names are given, an error is returned.				*/
	/*									*/
	/* _p_r_o_g_r_e_s_s								*/
	/*									*/
	/* 1) If the user specified a library descriptor, then get a pointer to it and its	*/
	/*    aggregates.  Otherwise, get pointers to the default descriptor's aggregates.	*/
	/* 3) Make sure caller specified some library names, and overlay these names.		*/
	/* 5) Allocate an array of root nodes big enough to hold all of the roots defined in the	*/
	/*    descriptor being referenced.  This is a guaranteed fit.			*/
	/* 6) Compare the library names with the names of the defined roots.  When a match is	*/
	/*    found, fill in a root node for that root.  					*/
	/* 7) If no matching roots are found, free the array of root nodes and return an error.	*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */


	Ptree = null;				/* initialize output argument.		*/
	progress = 1;				/* find the descriptor.			*/
	call find_descriptor (Adescriptor, P, Acode);
	if Acode ^= 0 then return;

	progress = 3;				/* check for and overlay library names.		*/
	if library.N <= 0 then do;
	     Acode = error_table_$noarg;
	     return;
	     end;

	progress = 5;				/* allocate array of root nodes big enough for	*/
						/*    all roots defined by this descriptor.	*/
	call lib_get_tree_$root_array (roots.N, Parea, Pnodes, Acode);
	if Acode ^= 0 then return;

	progress = 6;				/* find/output root nodes for matching roots.	*/
	do k = 1 to roots.N;
	     Proot_names = addrel (P.descriptor, roots.root(k).name.O);
	     do i = 1 to root_names.N;
		do j = 1 to library.N;
		     go to match_lib (library(j).C);

match_lib (0):	     if root_names.root_name(i) = library(j).V then go to match_found_lib;
		     go to no_match_lib;

match_lib (1):	     call match_star_name_ (root_names.root_name(i), library(j).V, code);
		     if code = 0 then go to match_found_lib;

no_match_lib:	     end;
		end;
	    go to next_name_lib;

match_lib (2):
match_found_lib:
	     Prt = addr(roots.root(k));
	     call lib_get_tree_$lib_root_node (Proot_names, rt.type, rt.path, rt.search_proc_name, addr(zero_names),
		addr(zero_names), ASrequirements, "0"b, Parea, null_search_proc, addr(command_info.command),
		Pnodes, roots.N, code);
	     if code = error_table_$process_stopped then do;
		code = 0;
		go to stop_searching_lib;
		end;
	     else if code ^= 0 then
		Acode = code;			/* return last bad error to caller.		*/
next_name_lib: end;
stop_searching_lib:

	call lib_get_tree_$root_array_info (Pnodes, Nnodes, code);
	progress = 7;
	if Nnodes = 0 then do;			/* no matching root definitions found. ERROR	*/
	     Acode = error_table_$nomatch;
	     call lib_free_node_$array (Pnodes);
	     end;
	else
	     Ptree = Pnodes;
	return;

null_search_proc:	procedure;			/* Null search procedure which does nothing.	*/

	end null_search_proc;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


validate_library:	entry (Adescriptor, Plibrary, Pbad_library, Acode);

	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* This entry point expects as input an array of library names and an empty library	*/
	/* name array of the same size.  It returns as output in the empty array the names from	*/
	/* the input array that do not match any library name defined in the given library	*/
	/* descriptor.  If no library names are input, an error is returned.			*/
	/*									*/
	/* _p_r_o_g_r_e_s_s								*/
	/*									*/
	/* 1) If the user specified a library descirptor, then get a pointer to it and its	*/
	/*    aggregates.  Otherwise, get pointers to the default descriptor's aggregates.	*/
	/* 3) Make sure the caller specified some library names.				*/
	/* 6) Copy all of the caller's names to the bad_library array.  Compare the names in	*/
	/*    this array with the valid library names from the descriptor, and REMOVE input	*/
	/*    library names from bad_library when they match a valid library name.		*/
	/*									*/
	/* NOTES									*/
	/*									*/
	/* A non-zero error code is returned ONLY IF the specified descriptor cannot be located,	*/
	/* or if no library names were given as input.					*/
	/*									*/
	/* A zero code is returned otherwise.  If there are bad library names, bad_library.N will	*/
	/* be greater than 0 on output.						*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */


	bad_library.N = 0;				/* initialize output argument.		*/

	call find_descriptor (Adescriptor, P, Acode);	/* find the descriptor.			*/
	if Acode ^= 0 then return;

	if library.N <= 0 then do;			/* check for library names given as input.	*/
	     Acode = error_table_$noarg;
	     return;
	     end;

	Pbad_library -> library = library;		/* copy all input library names to bad_library.	*/
 
	do k = 1 to roots.N while (bad_library.N > 0);	/* compare input names with valid library names.	*/
	     Proot_names = addrel (P.descriptor, roots.root(k).name.O);
	     do j = bad_library.N to 1 by -1;
		Sfound = "0"b;
		do i = 1 to root_names.N while (^Sfound);
		     go to match_valid (bad_library(j).C);

match_valid (0):	     if root_names.root_name(i) = bad_library(j).V then Sfound = "1"b;
		     go to end_match_valid;

match_valid (1):	     call match_star_name_ (root_names.root_name(i), bad_library(j).V, code);
		     if code = 0 then Sfound = "1"b;
		     go to end_match_valid;

match_valid (2):	     Sfound = "1"b;

end_match_valid:	     end;

		if Sfound then do;
		     do i = j+1 to bad_library.N;
			bad_library(i-1).V = bad_library(i).V;
			bad_library(i-1).C = bad_library(i).C;
			end;
		     bad_library.N = bad_library.N - 1;
		     end;
		end;
	     end;
	return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


find_descriptor:	procedure (Adescriptor, P1, code);

     dcl						/*	parameters			*/
	Adescriptor		char(168) varying,	/* descriptor to be found. (In)		*/
						/*    If Adescriptor = "", then name of		*/
						/*    default descriptor. (Out)		*/
	1 P1			aligned like P,	/* descriptor pointer structure to be filled in.	*/
						/*    (Out)				*/
	code			fixed bin(35);	/* a status code. (Out)			*/

     dcl	E			entry variable,	/* an entry variable temp.			*/
	P_me			ptr,		/* a pointer temp.				*/
	i			fixed bin;

     dcl						/*	based variable			*/
	1 descriptor1		aligned like descriptor based (P1.descriptor);


	if first_call then do;			/* first call.  Initialize default descriptor ptr.*/
	     P1.descriptor = addr (multics_libraries_$descriptor);
	     defaultP.descriptor = P1.descriptor;
	     defaultP.command_default_values = addrel(P1.descriptor, descriptor1.command_default_values.O);
	     defaultP.roots = addrel(P1.descriptor, descriptor1.roots.O);
	     first_call = "0"b;
	     end;

	if Adescriptor = "" then do;			/* use default descriptor, and return its name.	*/
	     P1 = defaultP;
	     Adescriptor = descriptor1.name;
	     code = 0;
	     end;
	else do;					/* use user-specified descriptor.		*/
	     call cu_$decode_entry_value (lib_descriptor_, P_me, null);
	     i = verify (reverse (Adescriptor), " ");
	     i = length(Adescriptor) - (i-1);
	     if search (Adescriptor, "<>") > 0 then
		E = cv_entry_ (substr(Adescriptor,1,i) || "|descriptor", P_me, code);
	     else E = cv_entry_ (substr(Adescriptor,1,i) || "$descriptor", P_me, code);
	     call cu_$decode_entry_value (E, P1.descriptor, null);
	     if code ^= 0 then P1.descriptor = null;
	     else if descriptor1.version ^= Vdescriptor_2 then do;
		code = error_table_$unimplemented_version;
		P1.descriptor = null;
		end;
	     else do;
		P1.command_default_values = addrel(P1.descriptor, descriptor1.command_default_values.O);
		P1.roots = addrel(P1.descriptor, descriptor1.roots.O);
		code = 0;				/* ignore superfluous errors.			*/
		end;
	     end;

	end find_descriptor;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

%include lib_descriptor_;

	end lib_descriptor_;
