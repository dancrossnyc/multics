/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


teco_get_macro_: procedure (macro_name, macro_address, macro_length, return_code);

/*	This procedure implements teco's search rules. There are several entry points:

teco_get_macro_ - This entry point is called by teco to get a pointer to an external macro
   for an "em" command.

teco_search - This entry point may be called using an "es" command and returns the full pathname
   of an external macro.

teco_ssd - This entry point may be invoked as a command to change the second directory searched.
   If this entry point is not invoked or if the argument is a null string, the user's home directory
   will be searched.

The directories searched by teco_get_macro_ are:

		1. the current working directory
		2. the user's  directory, or any user specified directory
		3. the containing directory for teco (called the teco library directory)

   Date last modified and reasons:
   06/19/75 by David Levin to clean up and fix bugs
   04/18/75 by David Levin to remove imbedded pathnames
   04/21/72 by Peter Bishop to add teco_search and teco_ssd entries
   06/27/71 by Richard H. Gumpertz for initial implementation
   */


	get_macro_entry_flag = "1"b;
	arglen = length(macro_name);
	goto start_work;

/* Secondary entry points. */
teco_ssd: entry;
	call cu_$arg_ptr(1, argptr, arglen, code);
	if code ^= 0
	then do;
	     call com_err_(code, "teco_ssd");
	     return;
	     end;
	dir_name(2) = search_dir;
	return;


teco_search: entry (macro_name, arg1, arg2, current_expression);
	get_macro_entry_flag = "0"b;
	arglen = index(macro_name, " ") - 1;

/* Parameters - teco_get_macro_ */
dcl
	macro_name	char(*) aligned,		/* Macro name without "teco" suffix. (input) */
	macro_address	pointer,			/* Pointer to segment containing the macro. (output) */
	macro_length	fixed bin(24),		/* Character length of segment. (output) */
	return_code	fixed bin(35);		/* Error code. (output) */

/* Parameters - teco_search */
dcl
						/* First argument declared above. (input/output) */
						/* Macro name without "teco" suffix. (input) */
						/* Full pathname of segment. (output) */
	(arg1, arg2)	fixed bin(24),		/* not used */
	current_expression	fixed bin(24);		/* Length of pathname. (output) */

/* Based */
dcl
	search_dir char(arglen) based(argptr);

/* Automatic */
dcl
	arglen		fixed bin,
	argptr		ptr,
	bit_count		fixed bin(24),
	code		fixed bin(35),
	entry_name	char(32) aligned,
	get_macro_entry_flag bit(1) aligned,
	i		fixed bin,
	temp_ptr		ptr;

/* External Entries */
dcl
	com_err_ entry options(variable),
	cu_$arg_ptr entry(fixed bin, ptr, fixed bin, fixed bin(35)),
	get_seg_ptr_full_path_ entry(char(*), char(*) aligned, bit(6) aligned, fixed bin(24), ptr, fixed bin(35)),
	get_wdir_ entry() returns(char(168)),
	hcs_$fs_get_path_name entry(entry, char(*), fixed bin, char(*) aligned, fixed bin(35)),
	ioa_$rsnnl entry options(variable),
	user_info_$homedir entry(char(*));

/* Internal Static */
dcl
	r_access bit(6) aligned initial("010000"b) internal static,
	dir_name(3) char(168) initial((3) (168) " ") internal static;

dcl	(divide, hbound, index, length, null, reverse, substr) builtin;

start_work:
	dir_name(1) = get_wdir_();

	if substr(dir_name(2), 1, 4) = "    " then call user_info_$homedir(dir_name(2));

	if substr(dir_name(3), 1, 4) = "    "
	then call hcs_$fs_get_path_name(teco_get_macro_, dir_name(3), i, entry_name, code);

	entry_name = substr(macro_name, 1, arglen);
	substr(entry_name, arglen+1, 5) = ".teco";

	do i = 1 to hbound(dir_name, 1);
	     call get_seg_ptr_full_path_ (dir_name (i), entry_name, r_access, bit_count, temp_ptr, code);
	     if temp_ptr ^= null
	     then if get_macro_entry_flag
		then do;
		     macro_address = temp_ptr;
		     macro_length = divide(bit_count+8, 9, 17, 0);
		     return_code = code;
		     return;
		     end;
		else do;
		     call ioa_$rsnnl("^a>^a", macro_name, current_expression, dir_name(i), entry_name);
		     return;
		     end;
	     end;
	if get_macro_entry_flag then return_code = code;
     end teco_get_macro_;
