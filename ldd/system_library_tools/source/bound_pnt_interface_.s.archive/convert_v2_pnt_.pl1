/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   *********************************************************** */
/* CONVERT_V2_PNT_: This subroutine is the target of the gate entry
   pnt_admin_gate_$convert_v2_pnt.  It converts the specified PNT from 
   a version 2 (or 1) MSTB to a version 3 MSTB and converts all pre-MR11
   PNT entries to the new MR11 format.  PNT entries were changed to
   accomodate 32 character-long passwords, support AIM ranges, and 
   include a version number.  */

/* format: style2 */

convert_v2_pnt_:
     procedure (P_dirname, P_entryname, P_code);

/**** Modified 84-12-14 by EJ Sharpe to call convert_MR10_2_audit_flags_ */
/**** Written 1984-08-08 by E. Swenson */

/* Parameters */

	dcl     P_code		 fixed bin (35) parameter;
	dcl     P_dirname		 char (*) parameter;
	dcl     P_entryname		 char (*) parameter;
	dcl     P_table_ptr		 ptr parameter;
	dcl     P_septr		 ptr parameter;
	dcl     P_teptr		 ptr parameter;
	dcl     P_ec		 fixed bin (35) parameter;

/* Automatic */

	dcl     code		 fixed bin (35);
	dcl     dirname		 char (168);
	dcl     entryname		 char (32);
	dcl     entryname_with_suffix	 char (32);
	dcl     new_entryname	 char (32);
	dcl     old_entryname	 char (32);
	dcl     old_newname		 char (32);
	dcl     saved_level		 fixed bin (3);
	dcl     table_ptr		 ptr;

/* External Entries */

	dcl     convert_MR10_2_audit_flags_ entry (bit (36) aligned);
	dcl     convert_v2_mstb_	 entry (char (*), char (*), char (*), char (*), entry, fixed bin (18) unsigned,
				 fixed bin (35));
	dcl     hcs_$chname_file	 entry (char (*), char (*), char (*), char (*), fixed bin (35));
	dcl     hcs_$level_get	 entry (fixed bin (3));
	dcl     hcs_$level_set	 entry (fixed bin (3));
	dcl     get_ring_		 entry () returns (fixed bin (3));
	dcl     ms_table_mgr_v2_$close entry (ptr, fixed bin (35));
	dcl     ms_table_mgr_$delete	 entry (char (*), char (*), fixed bin (35));
	dcl     ms_table_mgr_v2_$open	 entry (char (*), char (*), char (*) aligned, ptr, ptr, fixed bin (35));
	dcl     suffixed_name_$make	 entry (char (*), char (*), char (32), fixed bin (35));
	dcl     unique_chars_	 entry (bit (*)) returns (char (15));

/* Conditions */

	dcl     cleanup		 condition;

/* Program */

	dirname = P_dirname;			/* Copy arguments -- we're a gate */
	entryname = P_entryname;

	saved_level = -1;				/* For cleanup handler */
	on condition (cleanup)
	     begin;
		if saved_level ^= -1
		then do;
			call hcs_$level_set (saved_level);
			saved_level = -1;
		     end;
	     end;

	call hcs_$level_get (saved_level);
	call hcs_$level_set (get_ring_ ());

/**** First check to see if the PNT exists and is a valid PNT */

	call suffixed_name_$make (entryname, "pnt", entryname_with_suffix, code);
	if code ^= 0
	then goto RETURN_TO_CALLER;

	call ms_table_mgr_v2_$open (dirname, entryname, "PNT", table_ptr, (null ()), code);
	if code ^= 0
	then goto RETURN_TO_CALLER;

/**** That was all we needed, close it now. */

	call ms_table_mgr_v2_$close (table_ptr, (0));

	new_entryname = rtrim (substr (entryname, 1, 16)) || "." || unique_chars_ (""b);

	call convert_v2_mstb_ (dirname, entryname, dirname, new_entryname, convert_v2_pnte_, size (pnt_entry), code);
	if code ^= 0
	then goto RETURN_TO_CALLER;

	old_newname = rtrim (substr (entryname, 1, 16)) || "." || unique_chars_ (""b);

/* Add shriekname to old PNT */

	call hcs_$chname_file (dirname, entryname, "", old_newname, code);
	if code ^= 0
	then goto RETURN_TO_CALLER;

/* Delete real name from old PNT */

	call hcs_$chname_file (dirname, entryname, entryname, "", code);
	if code ^= 0
	then goto RETURN_TO_CALLER;

/* Rename the new one to the real name.  Enforce the new suffix convention. */

	call hcs_$chname_file (dirname, new_entryname, new_entryname, entryname_with_suffix, code);

RETURN_TO_CALLER:
	call hcs_$level_set (saved_level);
	saved_level = -1;
	P_code = code;
	return;
%page;
convert_v2_pnte_:
     entry (P_table_ptr, P_septr, P_teptr, P_ec);

	dcl     1 pnte_v0		 aligned like pnt_entry_v0 based (P_septr);
	dcl     1 pnte_v2		 aligned like pnt_entry based (P_teptr);

/**** This is the declaration of the old pnt entry format.  It is 
      here only to be used in the conversion of the old format to
      Version 2 pnt entries. */

	declare 1 pnt_entry_v0	 aligned,		/* declaration of a single PNT entry */
		2 password	 character (8),	/* person's password */
		2 card_password	 character (8),
		2 public,
		  3 user_id	 character (32),	/* user ID (for alias entries */
		  3 alias		 character (8),
		  3 default_project	 character (16),	/* user's default project */
		  3 flags,			/* one-bit flags */
		    4 has_password	 bit (1) unaligned,
		    4 has_card_password
				 bit (1) unaligned,
		    4 trap	 bit (1) unal,	/* If this password is used, holler */
		    4 lock	 bit (1) unal,	/* prevent login if on. */
		    4 nochange	 bit (1) unal,	/* user cannot change password */
		    4 must_change	 bit unal,	/* user must change password at next login */
		    4 pw_time_lock	 bit (1) unal,	/* if password has a time lock */
		    4 generate_pw	 bit (1) unal,	/* ON if we give new pw, OFF lets user select new pw */
		    4 last_bad_pw_reported
				 bit (1) unal,	/* ON if user has NOT been told about last bad password  */
		    4 pads	 bit (27) unal,
		  3 n_good_pw	 fixed bin,	/* Number of good passwords */
		  3 n_bad_pw	 fixed bin,	/* Number of wrong passwords */
		  3 n_bad_pw_since_good
				 fixed bin,	/* Number of wrong passwords since good */
		  3 time_last_good_pw
				 fixed bin (71),
		  3 time_last_bad_pw fixed bin (71),	/* When pw was last given wrong */
		  3 bad_pw_term_id	 character (4),	/* where bad password from */
		  3 bad_pw_line_type fixed bin (17),	/* ... */
		  3 bad_pw_term_type character (32),
		  3 time_pw_changed	 fixed bin (71),	/* When password was modified by user */
		  3 password_timelock
				 fixed bin (71),	/* Password is locked up until here */
		  3 person_authorization
				 bit (72),	/* authorization of this person */
		  3 default_person_authorization
				 bit (72),	/* default authorization of this person */
		  3 audit		 bit (36);	/* audit flags for person */

	dcl     1 pnte_v0_auto	 aligned like pnt_entry_v0 automatic;

/* The following copy is necessary because the entries in Version 1
   and Version 2 MSTBs are not necessarily on an even word boundary.
   Thus, the fixed bin (71) values in the pnt_entry structure would
   not always copy correctly. */

	pnte_v0_auto = pnte_v0;

/* copy the version 0 entry to our version 2 entry. */

	pnte_v2.version = PNT_ENTRY_VERSION_2;
	pnte_v2.private.pw_flags.short_pw = "1"b;	/* There weren't long ones */
	pnte_v2.private.pw_flags.short_network_pw = "1"b; /* ditto */
	pnte_v2.private.password = pnte_v0_auto.password;
	pnte_v2.private.network_password = pnte_v0_auto.card_password;
	pnte_v2.public.user_id = pnte_v0_auto.public.user_id;
	pnte_v2.public.alias = pnte_v0_auto.public.alias;
	pnte_v2.public.default_project = pnte_v0_auto.public.default_project;
	string (pnte_v2.public.flags) = string (pnte_v0_auto.public.flags);
	pnte_v2.public.n_good_pw = pnte_v0_auto.public.n_good_pw;
	pnte_v2.public.n_bad_pw = pnte_v0_auto.public.n_bad_pw;
	pnte_v2.public.n_bad_pw_since_good = pnte_v0_auto.public.n_bad_pw_since_good;
	pnte_v2.public.time_pw_changed = pnte_v0_auto.public.time_pw_changed;
	pnte_v2.public.time_last_good_pw = pnte_v0_auto.public.time_last_good_pw;
	pnte_v2.public.time_last_bad_pw = pnte_v0_auto.public.time_last_bad_pw;
	pnte_v2.public.bad_pw_term_id = pnte_v0_auto.public.bad_pw_term_id;

/**** The following code will prevent new PNTs from having an invalid 
      value in the bad_pw_line_type field.  Evidently, something didn't
      check this before and there are invalid numbers in these fields
      in existing V0 PNTs. */

	if pnte_v0_auto.public.bad_pw_line_type > max_line_type
	then pnte_v2.public.bad_pw_line_type = LINE_UNKNOWN;
	else pnte_v2.public.bad_pw_line_type = pnte_v0_auto.public.bad_pw_line_type;

	pnte_v2.public.bad_pw_term_type = pnte_v0_auto.public.bad_pw_term_type;
	pnte_v2.public.password_timelock = pnte_v0_auto.public.password_timelock;
	pnte_v2.public.default_person_authorization = pnte_v0_auto.public.default_person_authorization;
	pnte_v2.public.audit = pnte_v0_auto.public.audit;
	call convert_MR10_2_audit_flags_ (pnte_v2.public.audit);
	pnte_v2.pad (*) = ""b;			/* Zero out the pad area */


/* The authorization has become a range.  We set the minimum authorization
   to system_low for compatibility.  Note that we are assuming that
   system_low is represented by ""b.  If at some future time we support
   an access_class_floor, then this code should be changed to get the
   "real" system_low. */

	pnte_v2.public.person_authorization (1) = ""b;	/* system_low */
	pnte_v2.public.person_authorization (2) = pnte_v0_auto.public.person_authorization;
	return;

/* format: off */
%page; %include pnt_entry;
%page; %include line_types;
/* format: on */

     end convert_v2_pnt_;
