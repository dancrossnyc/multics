/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   *********************************************************** */
/* format: style2 */

/* PNT_FS_INTERFACE_: This is one of two programs that are the target
   of PNT-related gates.  This program is primarily the gate-level
   interface to pnt_fs_util_ which does the actual work of file system
   related manipulations of PNTs.  Pnt_db_interface_ is the gate-level
   interface to pnt_db_util_ which does the actual work of database
   related manipulations of the PNT.  

   This program, and pnt_db_interface_, being the target of ring-1 gates,
   copy arguments, manipulate the validation level, and call supporting
   routines. */

pnt_fs_interface_:
     procedure ();

	return;					/* Not a valid entrypoint */

/**** Written 1984-07-18 by BIM */
/**** Rewritten 1984-07-25 by E. Swenson */

/* Parameters */

	dcl     P_acl_ptr		 ptr parameter;
	dcl     P_area_ptr		 ptr parameter;
	dcl     P_dirname		 char (*) parameter;
	dcl     P_desired_version	 char (*) parameter;
	dcl     P_entryname		 char (*) parameter;
	dcl     P_size		 fixed bin (35) parameter;
	dcl     P_code		 fixed bin (35) parameter;
	dcl     P_old_entryname	 char (*) parameter;
	dcl     P_new_entryname	 char (*) parameter;
	dcl     P_no_sysdaemon	 bit (1) parameter;
	dcl     P_target_dirname	 char (*) parameter;
	dcl     P_target_entryname	 char (*) parameter;
	dcl     P_error_on_target	 bit (1) aligned parameter;

/* Automatic */

	dcl     acl_ptr		 ptr;		/* Pointer to the acl structures */
	dcl     area_ptr		 ptr;		/* Area in which to allocate the acl structures */
	dcl     code		 fixed bin (35);	/* status code */
	dcl     desired_version	 char (8);	/* Version passed to acl routines */
	dcl     dirname		 char (168);	/* PNT directory */
	dcl     entryname		 char (32);	/* PNT entryname */
	dcl     new_entryname	 char (32);	/* new name for chname */
	dcl     no_sysdaemon	 bit (1);		/* Whether or not to delete *.SysDaemon.* ACLs */
	dcl     old_entryname	 char (32);	/* old name for chname */
	dcl     size		 fixed bin (35);	/* PNT size */
	dcl     saved_level		 fixed bin (3);	/* saved validation level */
	dcl     target_dirname	 char (168);	/* For copy entrypoint */
	dcl     target_entryname	 char (32);	/* For copy entrypoint */
	dcl     error_on_target	 bit (1) aligned;	/* For copy; whether error is on target or not */

/* External Entries */

	dcl     get_ring_		 entry () returns (fixed bin (3));
	dcl     hcs_$level_get	 entry (fixed bin (3));
	dcl     hcs_$level_set	 entry (fixed bin (3));
	dcl     pnt_fs_util_$add_acl_entries
				 entry (char (*), char (*), ptr, fixed bin (35));
	dcl     pnt_fs_util_$create	 entry (char (*), char (*), fixed bin (35), fixed bin (35));
	dcl     pnt_fs_util_$delete	 entry (char (*), char (*), fixed bin (35));
	dcl     pnt_fs_util_$delete_acl_entries
				 entry (char (*), char (*), ptr, fixed bin (35));
	dcl     pnt_fs_util_$copy	 entry (char (*), char (*), char (*), char (*), bit (1) aligned, fixed bin (35));
	dcl     pnt_fs_util_$list_acl	 entry (char (*), char (*), char (*), ptr, ptr, fixed bin (35));
	dcl     pnt_fs_util_$replace_acl
				 entry (char (*), char (*), ptr, bit (1), fixed bin (35));
	declare pnt_fs_util_$chname_file
				 entry (char (*), char (*), char (*), char (*), fixed bin (35));
	dcl     pnt_fs_util_$validate	 entry (char (*), char (*), fixed bin (35));

/* Conditions */

	declare cleanup		 condition;
%page;
create:
     entry (P_dirname, P_entryname, P_size, P_code);

/* This entry creates a PNT */

	code = 0;
	dirname = P_dirname;
	entryname = P_entryname;
	size = P_size;

	saved_level = -1;
	on cleanup call reset_level;
	call set_level;

	call pnt_fs_util_$create (dirname, entryname, size, code);

	P_code = code;
	call reset_level;
	return;
%page;
delete:
     entry (P_dirname, P_entryname, P_code);

/* This entry deletes a PNT */

	code = 0;
	dirname = P_dirname;
	entryname = P_entryname;

	saved_level = -1;
	on cleanup call reset_level;
	call set_level;

	call pnt_fs_util_$delete (dirname, entryname, code);

	P_code = code;
	call reset_level;
	return;
%page;
chname_file:
     entry (P_dirname, P_entryname, P_old_entryname, P_new_entryname, P_code);

/* This entry renames a PNT */

	code = 0;
	dirname = P_dirname;
	entryname = P_entryname;
	old_entryname = P_old_entryname;
	new_entryname = P_new_entryname;

	saved_level = -1;
	on cleanup call reset_level;
	call set_level;

	call pnt_fs_util_$chname_file (dirname, entryname, old_entryname, new_entryname, code);

	P_code = code;
	call reset_level;
	return;
%page;
copy:
     entry (P_dirname, P_entryname, P_target_dirname, P_target_entryname, P_error_on_target, P_code);

	dirname = P_dirname;
	entryname = P_entryname;
	target_dirname = P_target_dirname;
	target_entryname = P_target_entryname;

	code = 0;
	error_on_target = "0"b;

	saved_level = -1;
	on cleanup call reset_level;
	call set_level;

	call pnt_fs_util_$copy (dirname, entryname, target_dirname, target_entryname, error_on_target, code);

	P_error_on_target = error_on_target;
	P_code = code;
	call reset_level;
	return;
%page;
list_acl:
     entry (P_dirname, P_entryname, P_desired_version, P_area_ptr, P_acl_ptr, P_code);

	dirname = P_dirname;
	entryname = P_entryname;
	desired_version = P_desired_version;
	area_ptr = P_area_ptr;
	acl_ptr = P_acl_ptr;			/* can be input or output variable */

	code = 0;

	saved_level = -1;
	on cleanup call reset_level;
	call set_level;

	call pnt_fs_util_$list_acl (dirname, entryname, desired_version, area_ptr, acl_ptr, code);

/**** Don't need to copy output structure here, since it was allocated
      in the user supplied area. */

	P_acl_ptr = acl_ptr;
	P_code = code;
	call reset_level;
	return;
%page;
add_acl_entries:
     entry (P_dirname, P_entryname, P_acl_ptr, P_code);

	dirname = P_dirname;
	entryname = P_entryname;
	acl_ptr = P_acl_ptr;

	code = 0;

	saved_level = -1;
	on cleanup call reset_level;
	call set_level;

	call pnt_fs_util_$add_acl_entries (dirname, entryname, acl_ptr, code);

	P_code = code;
	call reset_level;
	return;
%page;
delete_acl_entries:
     entry (P_dirname, P_entryname, P_acl_ptr, P_code);

	dirname = P_dirname;
	entryname = P_entryname;
	acl_ptr = P_acl_ptr;

	code = 0;

	saved_level = -1;
	on cleanup call reset_level;
	call set_level;

	call pnt_fs_util_$delete_acl_entries (dirname, entryname, acl_ptr, code);

	P_acl_ptr = acl_ptr;
	P_code = code;
	call reset_level;
	return;
%page;
replace_acl:
     entry (P_dirname, P_entryname, P_acl_ptr, P_no_sysdaemon, P_code);

	dirname = P_dirname;
	entryname = P_entryname;
	acl_ptr = P_acl_ptr;
	no_sysdaemon = P_no_sysdaemon;

	code = 0;

	saved_level = -1;
	on cleanup call reset_level;
	call set_level;

	call pnt_fs_util_$replace_acl (dirname, entryname, acl_ptr, no_sysdaemon, code);

	P_acl_ptr = acl_ptr;
	P_code = code;
	call reset_level;
	return;
%page;
validate:
     entry (P_dirname, P_entryname, P_code);

/* This entry supports the extended object software in validating that
   the caller supplied pathname is in fact, a PNT. */

	code = 0;
	dirname = P_dirname;
	entryname = P_entryname;

	saved_level = -1;
	on cleanup call reset_level;
	call set_level;

	call pnt_fs_util_$validate (dirname, entryname, code);

	P_code = code;
	call reset_level;
	return;
%page;
reset_level:
     procedure ();

/* This procedure resets the validation level, it it was previously
   set by calling entry. */

	if saved_level ^= -1
	then do;
		call hcs_$level_set (saved_level);
		saved_level = -1;
	     end;
	return;
     end reset_level;
%page;
set_level:
     procedure ();

/* This procedure gets the current validation level and saves it away in
   saved_level.  It then sets the validation level to the PNT level (1). */

	call hcs_$level_get (saved_level);
	call hcs_$level_set (get_ring_ ());
	return;
     end set_level;

     end pnt_fs_interface_;
