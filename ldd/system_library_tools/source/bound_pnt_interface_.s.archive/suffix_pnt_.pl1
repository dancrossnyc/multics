/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   *********************************************************** */
/* format: style2 */

/* SUFFIX_PNT_: This program provides the extended object interface to the 
   PNT software.  It allows the extended object commands, copy, rename, etc.
   to manipulate PNTs as extended objects.  All PNTs have the suffix "pnt". */

suffix_pnt_:
     procedure ();

	return;					/* Not a valid entry point */

/* Written 1984-07-25 by E. Swenson */
/* Modified 1984-09-18 by E. Swenson to make pnt_fs_gate_ the unprivileged
   interface to the Ring-1 PNT. */
/* Modified 1985-01-31 by E. Swenson to not reject invalid copy options */

/* Parameters */

	dcl     P_acl_ptr		 ptr parameter;
	dcl     P_area_ptr		 ptr parameter;
	dcl     P_code		 fixed bin (35) parameter;
	dcl     P_copy_options_ptr	 ptr parameter;
	dcl     P_desired_version	 char (*) parameter;
	dcl     P_dirname		 char (*) parameter;
	dcl     P_entryname		 char (*) parameter;
	dcl     P_new_entryname	 char (*) parameter;
	dcl     P_no_sysdaemon	 bit (1) parameter;
	dcl     P_old_entryname	 char (*) parameter;
	dcl     P_suffix_info_ptr	 ptr parameter;

/* Automatic */

	dcl     error_switch	 bit (1) aligned;

/* External Entries */

	dcl     pnt_manager_$add_acl_entries
				 entry (char (*), char (*), ptr, fixed bin (35));
	dcl     pnt_manager_$chname_file
				 entry (char (*), char (*), char (*), char (*), fixed bin (35));
	dcl     pnt_manager_$copy	 entry (char (*), char (*), char (*), char (*), bit (1) aligned, fixed bin (35));
	dcl     pnt_manager_$delete	 entry (char (*), char (*), fixed bin (35));
	dcl     pnt_manager_$delete_acl_entries
				 entry (char (*), char (*), ptr, fixed bin (35));
	dcl     pnt_manager_$list_acl	 entry (char (*), char (*), char (*), ptr, ptr, fixed bin (35));
	dcl     pnt_manager_$replace_acl
				 entry (char (*), char (*), ptr, bit (1), fixed bin (35));
	dcl     pnt_manager_$validate	 entry (char (*), char (*), fixed bin (35));

/* External Static */

	dcl     error_table_$unsupported_operation
				 fixed bin (35) external static;
%page;
delentry_file:
     entry (P_dirname, P_entryname, P_code);

/* This entry deletes a PNT */

	call pnt_manager_$delete (P_dirname, P_entryname, P_code);
	return;
%page;
chname_file:
     entry (P_dirname, P_entryname, P_old_entryname, P_new_entryname, P_code);

/* Changes the names on a PNT */

	call pnt_manager_$chname_file (P_dirname, P_entryname, P_old_entryname, P_new_entryname, P_code);
	return;
%page;
copy:
     entry (P_copy_options_ptr, P_code);

	copy_options_ptr = P_copy_options_ptr;

	if copy_options.extend | copy_options.update
	then do;
		P_code = error_table_$unsupported_operation;
		return;
	     end;

	call pnt_manager_$copy (copy_options.source_dir, copy_options.source_name, copy_options.target_dir,
	     copy_options.target_name, error_switch, P_code);

	copy_options.target_err_switch = error_switch;
	return;
%page;
validate:
     entry (P_dirname, P_entryname, P_code);

/* Used to validate that the specified object is a PNT.  This is used
   by the extended object software. */

	call pnt_manager_$validate (P_dirname, P_entryname, P_code);
	return;
%page;
suffix_info:
     entry (P_suffix_info_ptr);

	suffix_info_ptr = P_suffix_info_ptr;

	suffix_info.version = SUFFIX_INFO_VERSION_1;
	suffix_info.type = "pnt";
	suffix_info.type_name = "PNT";
	suffix_info.plural_name = "PNTs";
	string (suffix_info.flags) = ""b;
	suffix_info.extended_acl = "0"b;
	suffix_info.has_switches = "0"b;
	suffix_info.modes = "r w";
	suffix_info.max_mode_len = 3;
	suffix_info.num_ring_brackets = 0;
	string (suffix_info.copy_flags) = ""b;
	suffix_info.copy_flags.names = "1"b;
	suffix_info.copy_flags.acl = "1"b;
	suffix_info.info_pathname = "";

	return;
%page;
list_acl:
     entry (P_dirname, P_entryname, P_desired_version, P_area_ptr, P_acl_ptr, P_code);

	call pnt_manager_$list_acl (P_dirname, P_entryname, P_desired_version, P_area_ptr, P_acl_ptr, P_code);
	return;
%page;
add_acl_entries:
     entry (P_dirname, P_entryname, P_acl_ptr, P_code);

	call pnt_manager_$add_acl_entries (P_dirname, P_entryname, P_acl_ptr, P_code);
	return;
%page;
delete_acl_entries:
     entry (P_dirname, P_entryname, P_acl_ptr, P_code);

	call pnt_manager_$delete_acl_entries (P_dirname, P_entryname, P_acl_ptr, P_code);
	return;
%page;
replace_acl:
     entry (P_dirname, P_entryname, P_acl_ptr, P_no_sysdaemon, P_code);

	call pnt_manager_$replace_acl (P_dirname, P_entryname, P_acl_ptr, P_no_sysdaemon, P_code);
	return;

/* format: off */
%page; %include copy_flags;
%page; %include copy_options;
%page; %include suffix_info;
/* format: on */

     end suffix_pnt_;
