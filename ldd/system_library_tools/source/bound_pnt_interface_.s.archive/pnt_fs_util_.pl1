/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1991   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(91-01-07,Vu), approve(91-01-07,MCR8233), audit(91-12-06,Zimmerman),
     install(91-12-12,MR12.5-1006):
     Correct error code returned for PNT extended object type.
                                                   END HISTORY COMMENTS */



/* format: style2 */

/* PNT_FS_UTIL_: This program supports the file-system interfaces for
   PNTs.  It assumes that its caller is in the inner ring, and consequently
   does no parameter copying or validation level manipulations (this is 
   the responsibility of pnt_fs_interface_).  It makes no assumptions about
   THE PNT (>sc1>PNT.pnt) and accepts pathnames to specify the PNT. */

pnt_fs_util_:
     procedure ();

	return;					/* Not a valid entry point */

/**** Written 1984-07-18 by BIM */
/**** Rewritten 1984-07-25 by E. Swenson */
/**** Modified 1985-01-31 by E. Swenson to reject bad suffixes on targets */

/* Parameters */

	dcl     P_acl_ptr		 ptr parameter;
	dcl     P_area_ptr		 ptr parameter;
	dcl     P_code		 fixed bin (35) parameter;
	dcl     P_desired_version	 char (*) parameter;
	dcl     P_dirname		 char (*) parameter;
	dcl     P_entryname		 char (*) parameter;
	dcl     P_error_on_target	 bit (1) aligned parameter;
	dcl     P_new_entryname	 char (*) parameter;
	dcl     P_no_sysdaemon	 bit (1) parameter;
	dcl     P_old_entryname	 char (*) parameter;
	dcl     P_size		 fixed bin (35) parameter;
	dcl     P_target_dirname	 char (*) parameter;
	dcl     P_target_entryname	 char (*) parameter;

/* Automatic */

	dcl     dirname		 char (168);
	dcl     entryname		 char (32);
	dcl     new_entryname	 char (32);
	dcl     old_entryname	 char (32);
	dcl     pnt_ring		 fixed bin (3);
	dcl     ring_brackets	 (3) fixed bin (3);
	dcl     service_routine	 entry variable options (variable);

	dcl     1 local_copy_options	 aligned like copy_options;
	dcl     1 mti		 aligned like ms_table_info;

/* External Entries */

	dcl     copy_		 entry (ptr);
	dcl     get_ring_		 entry () returns (fixed bin (3));
	dcl     fs_util_$make_entry_for_type
				 entry (char (*), char (*), entry, fixed bin (35));
	dcl     hcs_$chname_file	 entry (char (*), char (*), char (*), char (*), fixed bin (35));
	dcl     ms_table_mgr_$create	 entry (character (*), character (*), pointer, fixed binary (35));
	dcl     ms_table_mgr_$delete	 entry (character (*), character (*), fixed binary (35));

/* External Static */

          dcl     error_table_$bad_file_name
                                         fixed bin (35) external static;
	dcl     error_table_$not_seg_type
				 external static fixed bin (35);

/* Constant */

	dcl     PNT_TYPE		 char (3) aligned internal static options (constant) initial ("PNT");

/* Conditions */
	dcl     sub_error_		 condition;	/* Structures */

/* Builtin */

	dcl     addr		 builtin;
	dcl     length		 builtin;
	dcl     max		 builtin;
	dcl     null		 builtin;
          dcl     rtrim		 builtin;
	dcl     size		 builtin;
	dcl     string		 builtin;
	dcl     substr		 builtin;
%page;
create:
     entry (P_dirname, P_entryname, P_size, P_code);

	dirname = P_dirname;
	entryname = P_entryname;

	call CHECK_SUFFIX (entryname, P_code);
	if P_code = 0
	then call CREATE_PNT ();
	return;
%page;
delete:
     entry (P_dirname, P_entryname, P_code);

	dirname = P_dirname;
	entryname = P_entryname;

	call CHECK_SUFFIX (entryname, P_code);
	if P_code ^= 0
	then return;

	call PNT_VALIDATE (P_code);
	if P_code = 0
	then call ms_table_mgr_$delete (dirname, entryname, P_code);
	return;
%page;
chname_file:
     entry (P_dirname, P_entryname, P_old_entryname, P_new_entryname, P_code);

/* This entry has the same function as hcs_$chname_file for normal segments.
   In fact, it calls hcs_$chname_file. */

	dirname = P_dirname;
	entryname = P_entryname;
	old_entryname = P_old_entryname;
	new_entryname = P_new_entryname;

	call CHECK_SUFFIX (entryname, P_code);
	if P_code ^= 0
	then return;

	call PNT_VALIDATE (P_code);
	if P_code ^= 0
	then return;

	if old_entryname ^= ""
	then do;
		call CHECK_SUFFIX (old_entryname, P_code);
		if P_code ^= 0
		then return;
	     end;

	if new_entryname ^= ""
	then do;
		call CHECK_SUFFIX_DONT_ADD (new_entryname, P_code);
		if P_code ^= 0
		then return;
	     end;

	call hcs_$chname_file (dirname, entryname, old_entryname, new_entryname, P_code);
	return;
%page;
copy:
     entry (P_dirname, P_entryname, P_target_dirname, P_target_entryname, P_error_on_target, P_code);

/* This entry copies a PNT from one place in the hierarchy to another.
   It attempts to make identical copies (i.e. does no sanitizing or
   restructuring. */

	copy_options_ptr = addr (local_copy_options);
	copy_options.version = COPY_OPTIONS_VERSION_1;
	copy_options.caller_name = "pnt_util_$copy";
	copy_options.source_dir = P_dirname;
	copy_options.source_name = P_entryname;
	copy_options.target_dir = P_target_dirname;
	copy_options.target_name = P_target_entryname;

	call CHECK_SUFFIX (copy_options.source_name, P_code);
	if P_code ^= 0
	then return;

	call CHECK_SUFFIX_DONT_ADD (copy_options.target_name, P_code);
	if P_code ^= 0
	then do;
	     P_error_on_target = "1"b;
	     return;
	     end;

	string (copy_options.flags) = ""b;
	copy_options.flags.raw = "1"b;		/* Don't recurse with xobj stuff */
	copy_options.flags.no_name_dup = "1"b;		/* We don't want this in the inner ring */
	string (copy_options.copy_items) = ""b;

	on sub_error_ call SUB_ERR_HANDLER ();		/* copy_ reports erors with sub_err_ */
	call copy_ (copy_options_ptr);
	revert sub_error_;
COPY_LOST:
	P_error_on_target = copy_options.target_err_switch;
	return;
%page;
list_acl:
     entry (P_dirname, P_entryname, P_desired_version, P_area_ptr, P_acl_ptr, P_code);

	call fs_util_$make_entry_for_type (FS_OBJECT_TYPE_MSF, FS_LIST_ACL, service_routine, P_code);

	if P_code = 0
	then call service_routine (P_dirname, P_entryname, P_desired_version, P_area_ptr, P_acl_ptr, P_code);
	return;
%page;
add_acl_entries:
     entry (P_dirname, P_entryname, P_acl_ptr, P_code);

	call fs_util_$make_entry_for_type (FS_OBJECT_TYPE_MSF, FS_ADD_ACL_ENTRIES, service_routine, P_code);

	if P_code = 0
	then call service_routine (P_dirname, P_entryname, P_acl_ptr, P_code);
	return;
%page;
delete_acl_entries:
     entry (P_dirname, P_entryname, P_acl_ptr, P_code);

	call fs_util_$make_entry_for_type (FS_OBJECT_TYPE_MSF, FS_DELETE_ACL_ENTRIES, service_routine, P_code);

	if P_code = 0
	then call service_routine (P_dirname, P_entryname, P_acl_ptr, P_code);
	return;
%page;
replace_acl:
     entry (P_dirname, P_entryname, P_acl_ptr, P_no_sysdaemon, P_code);

	call fs_util_$make_entry_for_type (FS_OBJECT_TYPE_MSF, FS_REPLACE_ACL, service_routine, P_code);

	if P_code = 0
	then call service_routine (P_dirname, P_entryname, P_acl_ptr, P_no_sysdaemon, P_code);
	return;
%page;
validate:
     entry (P_dirname, P_entryname, P_code);

/* This entry supports the extended object suffix_pnt_$validate entry.
   It is called in ring 1 to verify the object in question is indeed
   a PNT. */

	dirname = P_dirname;
	entryname = P_entryname;

	call CHECK_SUFFIX (entryname, P_code);
	if P_code ^= 0
	then return;

	call PNT_VALIDATE (P_code);
	return;
%page;
PNT_VALIDATE:
     procedure (code);

/**** This internal procedure is used to support the extended object
      validate entrypoint.  It can be called by users with no access
      on the PNT components, so cannot attempt to open the MSF. */

	dcl     code		 fixed bin (35) parameter;

	call fs_util_$make_entry_for_type (FS_OBJECT_TYPE_MSF, FS_GET_RING_BRACKETS, service_routine, code);
	if code ^= 0
	then return;

	call service_routine (dirname, entryname, ring_brackets, code);
	if code ^= 0
	then return;

	pnt_ring = get_ring_ ();
	if ring_brackets (1) ^= pnt_ring | ring_brackets (2) ^= pnt_ring
	then code = error_table_$not_seg_type;

	return;
     end PNT_VALIDATE;
%page;
CHECK_SUFFIX:
     procedure (en, code);

/* This procedure checks the user-supplied entryname for the "pnt" suffix
   and adds it if necessary */

	dcl     code		 fixed bin (35) parameter;
	dcl     en		 char (*) parameter;
	dcl     nen		 char (32);
	dcl     suffixed_name_$make	 entry (char (*), char (*), char (32), fixed bin (35));

	call suffixed_name_$make (en, "pnt", nen, code);
	en = nen;
	return;
     end CHECK_SUFFIX;
%page;
CHECK_SUFFIX_DONT_ADD:
     procedure (en, code);

/* This procedure checks the user-supplied entryname for the "pnt" suffix.
   It returns an error if it is not supplied. */

	dcl     code		 fixed bin (35) parameter;
	dcl     en		 char (*) parameter;

	if substr (en, length (rtrim (en)) - 3, 4) ^= ".pnt"
	then code = error_table_$bad_file_name;		/* Illegal entry name */

	return;
     end CHECK_SUFFIX_DONT_ADD;
%page;
SUB_ERR_HANDLER:
     procedure ();

/* This procedure handles the sub_err_ condition signaled by copy_. */

	dcl     continue_to_signal_	 entry (fixed bin (35));
	dcl     find_condition_info_	 entry (ptr, ptr, fixed bin (35));
	dcl     1 ci		 aligned like condition_info;

	ci.version = condition_info_version_1;
	call find_condition_info_ (null (), addr (ci), (0));
	sub_error_info_ptr = ci.info_ptr;

	if sub_error_info.name ^= "copy_" | copy_error_info.copy_options_ptr ^= copy_options_ptr
	then do;
		call continue_to_signal_ ((0));
		goto END_HANDLER;
	     end;

	P_code = sub_error_info.status_code;

	goto COPY_LOST;
END_HANDLER:
	return;

     end SUB_ERR_HANDLER;
%page;
CREATE_PNT:
     procedure ();

	mti.version = MS_TABLE_INFO_VERSION_3;
	mti.type = PNT_TYPE;
	mti.header_size = 16;
	mti.entry_size = size (pnt_entry);
	mti.max_entries = max (100, P_size);
	mti.max_size = 65536;
	mti.keep_meters = "1"b;

	call ms_table_mgr_$create (dirname, entryname, addr (mti), P_code);
	return;
     end CREATE_PNT;

/* format: off */
%page; %include condition_info;
%page; %include condition_info_header;
%page; %include copy_error_info;
%page; %include copy_flags;
%page; %include copy_options;
%page; %include file_system_operations;
%page; %include ms_table_info;
%page; %include pnt_entry;
%page; %include suffix_info;
%page; %include sub_error_info;
/* format: on */

     end pnt_fs_util_;
