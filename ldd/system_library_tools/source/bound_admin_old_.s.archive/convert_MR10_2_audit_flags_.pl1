/*  ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   *********************************************************** */

/* format: style1,^inddcls,^indnoniterdo,insnl,linecom,indcomtxt */

convert_MR10_2_audit_flags_:
     procedure (a_flags);

/* format: off */
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* CONVERT_MR10_2_AUDIT_FLAGS_						*/
	/*									*/
	/* Routine to convert a set of audit flags from pre-MR11 format to MR11 format.		*/
	/*									*/
	/* RESET_MR10_2_AUDIT_FLAGS_							*/
	/*									*/
	/* Routine to attempt backing-out the changes made by convert_MR10_2_audit_flags_.  (It	*/
	/* is not possible to obtain exactly the original flags).				*/
	/*									*/
	/* Last Modified:								*/
	/* 1984-12-10 EJ Sharpe - initial coding					*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
/* format: on */


dcl     a_flags		 bit (36) aligned parameter;
dcl     1 new_flags		 aligned like audit_flags;
dcl     1 old_flags		 aligned like OLD_audit_flags;

dcl     string		 builtin;
dcl     unspec		 builtin;
%page;

/* pre-MR11 flag definition */

dcl     1 OLD_audit_flags	 aligned based,		/* These flags control which auditable protection
						   events do in fact produce audit entries in
						   the syserr or other logs for this process */
	2 ring_0_flags	 unaligned,		/* Flags checked by ring 0 */
	( 3 protected_seg_init,			/* ON => audit initiations of non-directory
						   segments with non-null access class
						   (not including ring 1 multi-class segments) */
	  3 protected_dir_init,			/* ON => audit making known of directories
						   with non-null access class */
	  3 r1_multi_class_init,			/* ON => audit initiaions of ring 1 multi-class
						   segments.  (This flag is OFF when ring 1
						   is doing its own auditing) */
	  3 access_denied,				/* ON => audit instances of access denied
						   to segments or directories due to improper
						   authorization, ACL mode, or ring validation level */
	  3 illegal_proc,				/* ON => audit illegal procedure faults
						   (except legal EIS faults) */
	  3 access_viol_mode,			/* ON => audit ACL mode related
						   access violation faults */
	  3 access_viol_ring,			/* ON => audit ring related
						   access violation faults */
	  3 wakeup_denied,				/* ON => audit unsuccessful attempts to send
						   IPC messages due to improper authorization */
	  3 sys_privilege,				/* ON => audit changing of special privileges
						   (including setting of system privilege bits,
						   privileged initiations) */
	  3 SSA_ops,				/* ON => audit SSA downgrade, turning
						   security-oos off, other security related operations */
	  3 attach_denied,				/* ON => audit denied attachment of devices
						   (disk and tape drives) in ring 0 */
	  3 pad		 (7)
	  )		 bit (1),			/* Reserved for expansion of ring 0
						   audit selectivity */

	2 ring_1_flags	 unaligned,		/* Flags checked by ring 1 */
	( 3 mount_denied,				/* ON => audit instances of denied
						   mounts of media (disk and tape) */
	  3 mseg_events,				/* ON => audit protection events concerning
						   message segments (overflows) */
	  3 comm_events,				/* ON => audit use of communications AIM privilege */
	  3 pad		 (15)
	  )		 bit (1);			/* Reserved for expansion of ring 1
						   audit selectivity */
%page;
/* MR11 audit flag definition */

%include access_audit_flags;
%page;

	string (old_flags) = a_flags;
	unspec (new_flags) = ""b;

/****
      We really should check the input flags for validity, however,
      we also want badly to succeed.  Thus, we'll just ignore
      any garbage in the pad fields:
      if  string(old_flags.ring_0_flags.pad) ^= ""b
      | string(old_flags.ring_1_flags.pad) ^= ""b
      then grin_and_bear_it;
*/

	if old_flags.protected_seg_init
	     | old_flags.protected_dir_init
	     | old_flags.r1_multi_class_init
	     | old_flags.access_denied
	then new_flags.objects (FSOBJ_AUDIT_OBJECT_INDEX).deny_level = READ;

	if old_flags.access_denied
	then new_flags.objects (FSATTR_AUDIT_OBJECT_INDEX).deny_level = READ;

	if old_flags.illegal_proc
	     | old_flags.access_viol_mode
	     | old_flags.access_viol_ring
	then new_flags.faults = "1"b;

	if old_flags.wakeup_denied
	then new_flags.objects (SPECIAL_AUDIT_OBJECT_INDEX).deny_level = MODIFY;

	if old_flags.sys_privilege
	then new_flags.priv_ops = "1"b;

	if old_flags.SSA_ops
	then new_flags.admin_ops = "1"b;

	if old_flags.attach_denied
	     | old_flags.mount_denied
	then new_flags.objects (RCP_AUDIT_OBJECT_INDEX).deny_level = READ;

	if old_flags.mseg_events
	     | old_flags.comm_events
	then new_flags.objects (OTHER_AUDIT_OBJECT_INDEX).deny_level = READ;

	a_flags = unspec (new_flags);

	return;
%page;

/* RESET_MR10_2_AUDIT_FLAGS_ - entry to convert MR11 flags back to pre-MR11 format */

reset_MR10_2_audit_flags_:
     entry (a_flags);

	string (old_flags) = ""b;
	unspec (new_flags) = a_flags;

/****
      We really should check the input flags for validity, however,
      we also want badly to succeed.  Thus, we'll just ignore
      any illegal values:
      if  new_flags.pad ^= ""b
      | new_flags.objects(FSOBJ_AUDIT_OBJECT_INDEX).grant_level = MODIFY_ACCESS
      | new_flags.objects(FSOBJ_AUDIT_OBJECT_INDEX).deny_level = MODIFY_ACCESS
      then grin_and_bear_it;
*/

	if new_flags.objects (FSOBJ_AUDIT_OBJECT_INDEX).deny_level ^= NONE
	then old_flags.protected_seg_init,
		old_flags.protected_dir_init,
		old_flags.r1_multi_class_init,
		old_flags.access_denied = "1"b;

	if new_flags.objects (FSATTR_AUDIT_OBJECT_INDEX).deny_level ^= NONE
	then old_flags.access_denied = "1"b;

	if new_flags.faults
	then old_flags.illegal_proc,
		old_flags.access_viol_mode,
		old_flags.access_viol_ring = "1"b;

	if new_flags.objects (SPECIAL_AUDIT_OBJECT_INDEX).deny_level > MODIFY_ACCESS
	then old_flags.wakeup_denied = "1"b;

	if new_flags.priv_ops
	then old_flags.sys_privilege = "1"b;

	if new_flags.admin_ops
	then old_flags.SSA_ops = "1"b;

	if new_flags.objects (RCP_AUDIT_OBJECT_INDEX).deny_level ^= NONE
	then old_flags.attach_denied,
		old_flags.mount_denied = "1"b;

	if new_flags.objects (OTHER_AUDIT_OBJECT_INDEX).deny_level ^= NONE
	then old_flags.mseg_events,
		old_flags.comm_events = "1"b;

	a_flags = string (old_flags);

	return;


     end convert_MR10_2_audit_flags_;
