/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */
/* convert_MR10_2_sat.pl1 -- converts to MR11 SAT-entry format */
/* To be run over >udd>sa>a>smf.cur.sat and >sc1>sat */
/* format: style2 */

/* BIM 1984-07-05 */
/* Modified 1984-09-14 BIM to unalign old "groups" */
/* Modified 1984-12-14 by EJ Sharpe to call (convert reset)_MR10_2_audit_flags_ */

convert_MR10_2_sat:
     procedure options (variable);

	declare com_err_		 entry () options (variable);
	declare convert_MR10_2_audit_flags_ entry (bit (36) aligned);
	declare cu_$arg_count_rel	 entry (fixed bin, ptr, fixed bin (35));
	declare cu_$arg_ptr_rel	 entry (fixed bin, ptr, fixed bin (21), fixed bin (35), ptr);
	declare cu_$arg_list_ptr	 entry (ptr);
	declare expand_pathname_	 entry (character (*), character (*), character (*), fixed binary (35));
	declare initiate_file_	 entry (character (*), character (*), bit (*), pointer, fixed binary (24),
				 fixed binary (35));
	declare pathname_		 entry (character (*), character (*)) returns (character (168));
	declare reset_MR10_2_audit_flags_ entry (bit (36) aligned);
	declare terminate_file_	 entry (pointer, fixed binary (24), bit (*), fixed binary (35));


	declare arg_count		 fixed bin;
	declare ap		 pointer;
	declare al		 fixed bin (21);
	declare alp		 pointer;
	declare argument		 char (al) based (ap);
	declare code		 fixed bin (35);
	declare dir_name		 char (168);
	declare entryname		 char (32);
	declare old_authorization	 bit (72) aligned;
	declare (satp, satep)	 pointer;		/* live */
	declare satex		 fixed bin;

%include sat;
%include user_attributes;
%include access_mode_values;
%include terminate_file;

	declare 1 new_project	 aligned like project;

/**** MR10.2 sat entry structure */

/**** The entry size does not change in this change, but the variables
      are rearranged. */

	dcl     1 old_project	 aligned,		/* declaration of a single SAT entry  */
		2 state		 fixed bin,	/* state 1 = normal, 0 = free, 2 = deleted */
		2 project_id	 char (12) aligned, /* project's name */
		2 project_dir	 char (64) aligned, /* project's directory */
		2 pdt_ptr		 pointer,		/* pointer to current PDT */
		2 max_users	 fixed bin,	/* maximum number of users from project */
		2 n_users		 fixed bin,	/* current number */
		2 at		 like user_attributes aligned,
						/* include user_attributes.incl.pl1 */
		2 admin		 (4) aligned,	/* list of project's administrators  */
		  3 userid	 char (30) unal,	/* administrator's user-id (personid.projectid) */
		  3 pad		 char (2) unal,
		2 cutoff		 char (1),	/* if project is cut off, why. */
		2 min_ring	 fixed bin,	/* lowest ring for project */
		2 max_ring	 fixed bin,	/* highest ring for project */
		2 alias		 char (8),	/* project alias */
		2 group		 char (8),	/* default group for this project */
		2 grace_max	 fixed bin,	/* maximum bump grace */
		2 audit		 bit (36),	/* audit flags for project */
		2 project_authorization_1
				 bit (72),	/* authorization of this project */
		2 groups		 (2) char (8) unal,	/* authorized groups for this project */
		2 days_to_cutoff	 fixed bin (17) unaligned,
						/* these figures are as of last running of daily_summary */
		2 pct_balance	 fixed bin (17) unaligned,
						/* they are used for warning message printing only */
		2 dollars_to_cutoff	 float bin,	/* and are not to be taken as up-to-date figures */
		2 pdir_quota	 fixed bin (17) unaligned,
						/* max pdir quota allowed for project */
		2 max_foreground	 fixed bin (9) unsigned unaligned,
						/* max simultaneous foreground and background */
		2 max_background	 fixed bin (9) unsigned unaligned,
						/* processes that a user on this project can have */
		2 abs_foreground_cpu_limit
				 fixed bin (17) unaligned,
						/* time limit on foreground absentee jobs */
		2 rs_number	 fixed bin (9) unsigned unaligned,
						/* rate structure number (0=default rates ) */
		2 satpad1		 fixed bin (9) unsigned unaligned,
		2 satpad_1	 (3) fixed bin,	/* pad to 80 words */
		2 chain		 fixed bin;	/* if free entry, chain */


	call cu_$arg_list_ptr (alp);
	call do_work ("convert_MR10_2_sat", alp, converter, SAT_version);
	return;

reset_MR10_2_sat:
     entry options (variable);

	call cu_$arg_list_ptr (alp);
	call do_work ("reset_MR10_2_sat", alp, reverter, SAT_version - 1);
	return;

do_work:
     procedure (ME, alp, worker, target_version);
	declare alp		 ptr;
	declare ME		 char (*);
	declare worker		 entry (ptr) variable;
	declare target_version	 fixed bin;

	call cu_$arg_count_rel (arg_count, alp, code);
	if code ^= 0
	then do;
		call com_err_ (code, ME);
		return;
	     end;

	if arg_count ^= 1
	then do;
		call com_err_ (0, ME, "Usage: ^a SAT_PATH.sat", ME);
		return;
	     end;

	satp = null ();

	call cu_$arg_ptr_rel (1, ap, al, (0), alp);
	call expand_pathname_ (argument, dir_name, entryname, code);
	if code ^= 0
	then do;
		call com_err_ (code, ME, "^a", argument);
		return;
	     end;

	call initiate_file_ (dir_name, entryname, RW_ACCESS, satp, (0), code);
	if code ^= 0
	then do;
		call com_err_ (code, ME, "^a", pathname_ (dir_name, entryname));
		return;
	     end;


	if sat.version = target_version
	then do;
		call com_err_ (0, ME, "SAT ^a is already version ^d.", pathname_ (dir_name, entryname),
		     target_version);
		go to TERM_RETURN;
	     end;
	if sat.version = -1
	then do;
		call com_err_ (0, ME,
		     "SAT ^a was partially converted, and is notr salvageable. Recover a saved version.",
		     pathname_ (dir_name, entryname));
		go to TERM_RETURN;
	     end;

	sat.version = -1;				/* BROKEN */
	do satex = 1 to sat.current_size;
	     satep = addr (sat.project (satex));
	     if project.state ^= 0
	     then do;				/* worth fixing */
		     call worker (satep);
		end;
	end;

	sat.version = target_version;
TERM_RETURN:
	call terminate_file_ (satp, (0), TERM_FILE_TERM, (0));
	return;
     end do_work;

converter:
     procedure (satep);
	declare satep		 pointer;

	unspec (new_project) = ""b;
	unspec (old_project) = unspec (satep -> project);
	new_project = old_project, by name;
	old_authorization = old_project.project_authorization_1;
	new_project.project_authorization (1) = ""b;
	new_project.project_authorization (2) = old_authorization;
	call convert_MR10_2_audit_flags_ (new_project.audit);
	satep -> project = new_project;
	return;
     end converter;

reverter:
     procedure (satep);
	declare satep		 pointer;

	unspec (old_project) = ""b;
	unspec (new_project) = unspec (satep -> project);
	old_project = new_project, by name;
	old_project.project_authorization_1 = new_project.project_authorization (2);
	call reset_MR10_2_audit_flags_ (old_project.audit);
	unspec (satep -> project) = unspec (old_project);
	return;
     end reverter;
     end convert_MR10_2_sat;
