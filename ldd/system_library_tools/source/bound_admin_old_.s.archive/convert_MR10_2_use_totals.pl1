/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(88-04-28,GDixon), approve(88-08-15,MCR7969),
     audit(88-08-03,Lippard), install(88-08-29,MR12.2-1093):
      A) Use correct array extents in do-group limits. (phx20016)
                                                   END HISTORY COMMENTS */


/* convert_MR10_2_use_totals.pl1 */
/* format: style2 */

convert_MR10_2_use_totals:
     procedure options (variable);

	declare cv_dec_check_	 entry (character (*), fixed binary (35)) returns (fixed binary (35));
	declare expand_pathname_$add_suffix
				 entry (character (*), character (*), character (*), character (*),
				 fixed binary (35));
	declare initiate_file_	 entry (character (*), character (*), bit (*), pointer, fixed binary (24),
				 fixed binary (35));
	declare terminate_file_	 entry (pointer, fixed binary (24), bit (*), fixed binary (35));
	declare get_temp_segment_	 entry (character (*), pointer, fixed binary (35));
	declare release_temp_segment_	 entry (character (*), pointer, fixed binary (35));
	declare com_err_		 entry () options (variable);
	declare com_err_$suppress_name entry () options (variable);
	declare cu_$arg_count	 entry (fixed bin, fixed bin (35));
	declare cu_$arg_ptr		 entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
	declare pathname_		 entry (character (*), character (*)) returns (character (168));

	declare argp		 pointer;
	declare argl		 fixed bin (21);
	declare argument		 char (argl) based (argp);
	declare arg_count		 fixed bin;
	declare code		 fixed bin (35);
	declare (dayx, qhx, sh)	 fixed bin;
	declare dir		 char (168);
	declare entryname		 char (32);
	declare np		 pointer;		/* pointer to temp seg */
	declare 1 new		 aligned like use_totals based (np);

	declare (addr, hbound, min, null, size)
				 builtin;
	declare cleanup		 condition;
	declare ME		 char (32) init ("convert_MR10_2_use_totals") int static options (constant);


	call cu_$arg_count (arg_count, code);
	if code ^= 0
	then do;
		call com_err_ (code, ME);
		return;
	     end;

	if arg_count ^= 1
	then do;
		call com_err_$suppress_name (0, ME, "Usage:  convert_MR10_2_use_totals USE_TOTALS_PATHNAME");
		return;
	     end;

	np, use_totals_ptr = null ();
	on cleanup
	     begin;
		if use_totals_ptr ^= null ()
		then call terminate_file_ (use_totals_ptr, (0), TERM_FILE_TERM, (0));
		if np ^= null ()
		then call release_temp_segment_ (ME, np, (0));
	     end;

	call cu_$arg_ptr (1, argp, argl, (0));
	call expand_pathname_$add_suffix (argument, "use_totals", dir, entryname, code);
	if code ^= 0
	then do;
		call com_err_ (code, ME, """^a"".", argument);
		return;
	     end;
	call initiate_file_ (dir, entryname, RW_ACCESS, use_totals_ptr, (0), code);
	if code ^= 0
	then do;
		call com_err_ (code, ME, "^a", pathname_ (dir, entryname));
		return;
	     end;

	call get_temp_segment_ (ME, np, (0));

	new.meters = v2_use_totals.meters;		/* aggregately */
	new.version = USE_TOTALS_VERSION_3;
	new.b_and_w.origin = v2_use_totals.b_and_w.origin;
	new.b_and_w.max_day_log = v2_use_totals.b_and_w.max_day_log;
	new.b_and_w.max_qhour = v2_use_totals.b_and_w.max_qhour;
	do dayx = 1 to min (v2_use_totals.max_day_log, hbound (v2_use_totals.daylog, 1));
	     do qhx = 1 to min (v2_use_totals.max_qhour, hbound (v2_use_totals.daylog.qh, 1));
		begin;
		     declare 1 old_qh	      aligned like v2_use_totals.daylog.qh based (old_qhp);
		     declare 1 new_qh	      aligned like use_totals.daylog.qh based (new_qhp);
		     declare (old_qhp, new_qhp)     pointer;
		     old_qhp = addr (v2_use_totals.daylog (dayx).qh (qhx));
		     new_qhp = addr (new.daylog (dayx).qh (qhx));
		     new_qh.time = old_qh.time;
		     new_qh.sysid = old_qh.sysid;
		     if old_qh.erfno = "shutdown"
		     then new_qh.shutdown = "1"b;
		     else new_qh.dump_number = cv_dec_check_ ((old_qh.erfno), code);
		     if code ^= 0
		     then new_qh.dump_number = 0;
		     new_qh.cpu = old_qh.cpu;
		     new_qh.kmem = old_qh.kmem;
		     new_qh.nunits = old_qh.nunits;
		     new_qh.starttime = old_qh.starttime;
		     new_qh.crashtime = old_qh.crashtime;
		end;
	     end;
	end;

	new.bins.ntypes = v2_use_totals.bins.ntypes;
	new.bins.n_select = v2_use_totals.bins.n_select;
	do sh = 1 to min (hbound (new.bin_data, 1), new.bins.n_select);
	     new.bin_data (sh).select_proj = v2_use_totals.select_proj (sh);
	     new.bin_data (sh).select_ut = v2_use_totals.select_ut (sh);
	end;
	do sh = 1 to min (hbound (new.ut, 1), new.bins.ntypes);
	     new.bins.ut (sh) = v2_use_totals.bins.ut (sh);
	end;
	use_totals = new;				/* copy back */
	call terminate_file_ (use_totals_ptr, 36 * size (use_totals), TERM_FILE_TRUNC_BC, (0));
	call release_temp_segment_ (ME, np, (0));
	return;
%page;

%include use_totals;
%include access_mode_values;
%include terminate_file;

	dcl     1 v2_use_totals	 based (use_totals_ptr) aligned,
		2 meters,
		  3 generated	 fixed bin (71),	/* Time usage data generated. */
		  3 period_begin	 fixed bin (71),	/* Earliest time covered */
		  3 period_end	 fixed bin (71),	/* Latest time */
		  3 disk_available	 fixed bin (35),	/* Total disk capacity in MULT partition. */
		  3 disk_left	 fixed bin (35),	/* Total disk unused in MULT partition. */
		  3 version	 char (8),	/* revision of this include file */
		  3 pad1		 (6) fixed bin,	/* Gross system statistics, determined from answering service meters. */
		  3 uptime	 fixed bin (71),	/* Time system has been on the air. */
		  3 sys_starts	 fixed bin,	/* Number of bootloads */
		  3 sys_crash	 fixed bin,	/* Number of crashes */
		  3 cpu_avail	 fixed bin (71),	/* CPU time available. >= uptime by two-cpu time */
		  3 idle		 fixed bin (71),	/* Total idle for all causes */
		  3 initializer	 fixed bin (71),	/* Initializer usage */
		  3 total_cpu	 fixed bin (71),	/* Total VIRTUAL cpu from bins - so get overhead */
		  3 zidle		 fixed bin (71),	/* Total zero idle. */
		  3 mpidle	 fixed bin (71),	/* Total MP idle */
		  3 pad2		 (6) fixed bin (71),/* variables used while reading answering service meters */
		  3 zidle_since_boot fixed bin (71),	/* Zero idle since boot */
		  3 mpidle_since_boot
				 fixed bin (71),	/* MP idle since boot */
		  3 time_last_boot	 fixed bin (71),	/* Time of last bootload */
		  3 time_last_sample fixed bin (71),	/* Time of last 15-minute sample */
		  3 uptime_since_boot
				 fixed bin (71),	/* Time system on air since last boot */
		  3 cpu_avail_since_boot
				 fixed bin (71),	/* CPU available since boot */
		  3 idle_since_boot	 fixed bin (71),	/* Idle time since boot */
		  3 last_sysid	 char (8),	/* Current system ID */
		  3 n_users_on	 fixed bin,	/* Users on at last sample */
		  3 n_stat_gaps	 fixed bin,	/* Number of times we missed getting all data */
						/* Statistics by day, for black and white chart. */
		2 b_and_w,
		  3 origin	 fixed bin (71),	/* Base time for slot 1 */
		  3 max_day_log	 fixed bin,	/* Highest used day. */
		  3 max_qhour	 fixed bin,	/* Highest quarter in highest day */
		  3 daylog	 (40),		/* array of days. */
		    4 qh		 (96),		/* Quarter-hour within the day. */
		      5 time	 fixed bin (71),	/* Time of sample. */
		      5 sysid	 char (8),	/* System ID */
		      5 erfno	 char (8),	/* If crash occurred, ERF no  */
		      5 cpu	 fixed bin (5) unal,/* Number of CPU */
		      5 pad1	 fixed bin (11) unal,
		      5 kmem	 fixed bin (17) unal,
						/* Number of K of core */
		      5 kbulk	 fixed bin (17) unal,
						/* Number fo K of bulk */
		      5 nunits	 fixed bin (17) unal,
						/* Number of load units */
		      5 starttime	 fixed bin (71),	/* Boot time */
		      5 crashtime	 fixed bin (71),	/* Time of crash */
		      5 pad2	 (4) fixed bin,	/* User-classification info, loaded once a month. defines usage bins. bin 1 is always "other" */
		2 bins,
		  3 ntypes	 fixed bin,	/* Number of valid bins */
		  3 n_select	 fixed bin,	/* Number of selectors */
		  3 select_proj	 (3258) char (12) aligned,
						/* Project ID - same number as in sat */
		  3 select_ut	 (3258) fixed bin,	/* Bin number for the project */
		  3 ut		 (301),		/* array usage by project type */
		    4 utype	 char (24),	/* Label for usage bin */
		    4 dollar_charge	 float bin,	/* total dollars spent this month */
		    4 logins	 fixed bin,	/* number of logins */
		    4 crashes	 fixed bin,	/* sessions abnormally terminated */
		    4 nproj	 fixed bin,	/* projects in this class */
		    4 nusers	 fixed bin,	/* users in this class */
		    4 disk_psec	 fixed bin (71),	/* Total page-seconds */
		    4 disk_quota	 fixed bin (35),	/* Total quota */
		    4 disk_usage	 fixed bin (35),	/* Disk occupancy */
		    4 misc	 float bin,	/* Miscellaneous charges */
		    4 flag	 char (4),	/* paying catagories = "$" */
		    4 flag1	 char (4),	/* used to control reporting of catagories */
		    4 pad1a	 (3) fixed bin (35),
		    4 rs_number	 fixed bin,	/* rate structure number for all projects in this bin */
		    4 pad1b	 (14) fixed bin (35),
		    4 interactive	 (0:7),		/* interactive use, shifts 0-7 */
		      5 charge	 float bin,	/* total dollar charge this shift */
		      5 pad1	 fixed bin,
		      5 cpu	 fixed bin (71),	/* cpu usage in microseconds */
		      5 core	 fixed bin (71),	/* core demand in page-microseconds */
		      5 connect	 fixed bin (71),	/* total console time in microseconds */
		      5 io_ops	 fixed bin (71),	/* total terminal i/o ops */
		    4 absentee	 (4),		/* absentee use, queues 1-4 */
		      5 charge	 float bin,	/* dollar charge this queue */
		      5 jobs	 fixed bin,	/* number of jobs submitted */
		      5 cpu	 fixed bin (71),	/* total cpu time in microseconds */
		      5 memory	 fixed bin (71),	/* total memory usage in mu */
		    4 iod		 (4),		/* io daemon use, queues 1-4 */
		      5 charge	 float bin,	/* dollar charge this queue */
		      5 pieces	 fixed bin,	/* pieces of output requested */
		      5 pad2	 fixed bin,
		      5 pages	 fixed bin,	/* number of pages output */
		      5 lines	 fixed bin (71),	/* total record count of output */
		    4 devices	 (16) float bin;	/* device charges */




     end convert_MR10_2_use_totals;
