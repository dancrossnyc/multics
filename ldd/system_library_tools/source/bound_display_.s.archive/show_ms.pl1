/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


show_ms:	proc;

dcl	(i,n) fixed bin,
	p ptr unal,
	lword char(8),
	ioa_ entry options(variable);

dcl	(abs,null) builtin;


%include machine_state;

show:	if m_s_p = null
	then do;
	     call ioa_("Machine state pointer is null");
	     return;
	     end;

	call ioa_("MACHINE STATE ^p: indicators = ^d, next = ^p",m_s_p,indicators,next);

	if indicators = -2
	then do;
	     call ioa_("^/INDICATOR REFERENCES:");
	     call prt(indicators_ref(2));
	     call prt(indicators_ref(3));
	     end;

	if a_reg.number ^= 0
	then do;
	     call ioa_("^/A REGISTER: # = ^d, size = ^d, length = ^d, offset = ^d, constant = ^d",
	      a_reg.number,a_reg.size,a_reg.length,a_reg.offset,a_reg.constant);
	     call ioa_("changed by ^12w at ^o",a_reg.instruction,a_reg.changed);

	     do i = 1 to a_reg.number;
		call prt(a_reg.variable(i));
		end;

	     if a_reg.locked
	     then do;
		call ioa_("locked");
		if a_reg.number_h_o ^= 0
		then do;
		     call ioa_("has offset of ^d references",a_reg.number_h_o);
		     do i = 1 to a_reg.number_h_o;
			call prt(a_reg.has_offset(i));
			end;
		     end;
		end;

	     end;

	if q_reg.number ^= 0
	then do;
	     call ioa_("^/Q REGISTER: # = ^d, size = ^d, length = ^d, offset = ^d, constant = ^d",
	      q_reg.number,q_reg.size,q_reg.length,q_reg.offset,q_reg.constant);
	     call ioa_("changed by ^12w at ^o",q_reg.instruction,q_reg.changed);

	     do i = 1 to q_reg.number;
		call prt(q_reg.variable(i));
		end;

	     if q_reg.locked
	     then do;
		call ioa_("locked");
		if q_reg.number_h_o ^= 0
		then do;
		     call ioa_("has offset of ^d references",q_reg.number_h_o);
		     do i = 1 to q_reg.number_h_o;
			call prt(q_reg.has_offset(i));
			end;
		     end;
		end;

	     end;

	p = string_reg.variable;
	if p ^= null
	then do;
	     call ioa_("^/STRING REGISTER: size = ^d, offset = ^d",string_reg.size,string_reg.offset);
	     call prt(p);
	     end;

	p = complex_reg.variable;
	if p ^= null
	then do;
	     call ioa_("^/COMPLEX REGISTER: size = ^d, scale = ^d",complex_reg.size,complex_reg.scale);
	     call prt(p);
	     end;

	p = decimal_reg.variable;
	if p ^= null
	then do;
	     call ioa_("^/DECIMAL REGISTER: size = ^d, scale = ^d",decimal_reg.size,decimal_reg.scale);
	     call prt(p);
	     end;

	do i = 0 to 7;
	     n = index_regs(i).type;
	     if n ^= 0
	     then do;
		call ioa_("^/INDEX REGISTER ^d: type = ^d, constant = ^o",i,
		 n,index_regs(i).constant);
		call ioa_("used at ^o, changed by ^12w at ^o",index_regs(i).used,
		 index_regs(i).instruction,index_regs(i).changed);
		if abs(n) >= 2 then call prt(index_regs(i).variable);
		end;
	     end;

	do i = 1 to 6;
	     n = base_regs(i).type;
	     if n ^= 0
	     then do;
		call ioa_("^/BASE REGISTER ^d: type = ^d, constant = ^o",i,
		 n,base_regs(i).constant);
		call ioa_("used at ^o, changed by ^12w at ^o",base_regs(i).used,
		 base_regs(i).instruction,base_regs(i).changed);
		p = base_regs(i).variable;
		if n < 3 then call prt(p);
		else if substr("110001101100"b,n,1)
		     then call ioa_("variable is ^p",p);
		if base_regs(i).locked ^= 0
		     then call ioa_("locked = ^d",base_regs(i).locked);
		end;

	     end;

	call ioa_("^/END MACHINE STATE ^p^/",m_s_p);
	return;

show_ms$pt: entry(pt);

dcl	pt ptr;

	m_s_p = pt;
	goto show;

prt:	     proc(q);

%include reference;
%include symbol;
%include token;

dcl	     (q,t) ptr unal;

	     if q = null then return;

	     t = q -> reference.symbol -> symbol.token;
	     if q -> reference.shared then call ioa_("variable ^p is ^a",q,t -> token.string);
	     else call ioa_("variable ^p is ^a, ref count = ^d",q,t -> token.string,q -> ref_count);

	     end;

	end;
