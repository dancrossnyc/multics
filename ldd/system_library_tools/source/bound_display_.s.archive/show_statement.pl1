/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


show_statement: proc(string);

/*	Modified: 29 Nov 1979 by PCK to print a tree level indented listing */
/*	Modified: 24 Jun 1980 by PCK to properly indent the output of show_stm */

dcl	string	char(*);	/* source id of statement to show */

dcl	(k,n) fixed bin(15),
	tree_level fixed bin initial(0),
	ln fixed bin(15),
	(sn,fn) fixed bin(6),
	p ptr,
	number int static fixed bin(31),
	any int static bit(1),
	pl1_stat_$root ptr ext,
	ioa_ entry options(variable),
	cv_dec_ entry(char(*) aligned) returns(fixed bin),
	display_statement entry(ptr,bit(1) aligned,fixed bin);

dcl	(fixed,index,null,substr) builtin;


%include block;
%include statement;

if pl1_stat_$root = null
   then do;
	call ioa_("No tree available");
	return;
        end;
if string = "" then do;
	call ioa_("show_statement line#.statement# (s# is opt.)");
	return;
	end;

	fn = 0;

	n = index(string,".");

	if n = 0
	then do;
	     any = "1"b;
	     ln = cv_dec_((string));
	     sn = 0;
	     end;
	else do;
	     any = "0"b;
	     k = index(substr(string,n+1),".");
	     if k = 0
	     then do;
		ln = cv_dec_(substr(string,1,n-1));
		sn = cv_dec_(substr(string,n+1));
		end;
	     else do;
		fn = cv_dec_(substr(string,1,n-1));
		ln = cv_dec_(substr(string,n+1,k-1));
		sn = cv_dec_(substr(string,n+k+1));
		end;
	     end;

	if any then call ioa_("Searching for line ^d",ln);
	else call ioa_("Searching for statement ^d on line ^d",sn,ln);

	number = 0;
	call show_stm(pl1_stat_$root -> block.son,tree_level+1);

	if number = 0 then call ioa_("Statement not found.");

show_stm:      proc(ptx,tree_level);

dcl	     ptx ptr unaligned;
dcl	     tree_level fixed bin;

dcl	     (p,q,pt) ptr;

	     pt = ptx;
	     if pt = null then return;

	     call ioa_("^/^vxStart of block ^p",tree_level,pt);

	     p = pt -> block.prologue;

	     call check_stm(p,tree_level);

	     p = pt -> block.main;

	     call check_stm(p,tree_level);

	     q = pt -> block.son;



	     do while(q^=null);
		call show_stm((q),tree_level+1);
		q = q -> block.brother;
	     end;

	     call ioa_("^vxEnd of block ^p^/",tree_level,pt);

	     end;


check_stm:     proc(pt,tree_level);

dcl	     (pt,q) ptr,
	     tree_level fixed bin,
	     this_sn fixed bin(9);

	     q = pt;
	     do while(q ^= null);

		if any then this_sn = 0;
		else this_sn = fixed(q -> statement.statement_number,5);

		if fixed(q -> statement.line_number,14) = ln
		then if this_sn = sn
		     then if fixed(q -> statement.file_number,8) = fn
			then do;
			     number = number + 1;
			     call display_statement(q,"1"b,tree_level+1);
			     end;

		q = q -> statement.next;
		end;

	     end;

	end;
