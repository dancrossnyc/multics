/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


di: display: proc;

/* Modified: 29 November 1979 by PCK to produce tree level indented output */

dcl	display_block	entry(ptr,bit(1) aligned,bit(1) aligned,
			      bit(1) aligned,fixed bin);
dcl	display_statement	entry(ptr,bit(1) aligned,fixed bin);
dcl	display_source	entry(ptr,fixed bin);
dcl	(display_array, display_list, display_exp, display_symbol)
	 entry(ptr,fixed bin);
dcl	show_ms$pt entry(ptr);

dcl	show_statement ext entry(char(*) aligned),
	show_declaration ext entry(char(*) aligned,char(*) aligned),
	display_any_node_name ext entry(char(*) aligned,ptr,fixed bin);

dcl	ioa_		entry options(variable),
	cv_dec_		entry(char(*) aligned) returns(fixed bin),
	cu_$arg_count	entry(fixed bin(15)),
	cu_$arg_ptr	entry(fixed bin(15),ptr,fixed bin(15),fixed bin(15)),
	cu_$gen_call	entry(entry,ptr),
	cu_$arg_list_ptr	entry(ptr);

dcl	(k,tree_level) fixed bin;
dcl	(string,string2,string3) char(12) aligned;
dcl	display_stat_$brief_display bit(1) ext static;
dcl	argstring char(arglen) based(argpt);
dcl	(code,arglen) fixed bin(15),
	(ap1,argpt) pointer;


dcl	(addr,baseptr,fixed,index,min,null,ptr,substr) builtin;
dcl	program_interrupt condition;

dcl	p ptr,
	(no_dcls,sourceb,walk) bit(1) aligned,
	(i,j,n) fixed bin(15),
	(pl1_stat_$root,pl1_stat_$cur_block,pl1_stat_$cur_statement) ptr ext,
	cv_oct_ entry(char(*) aligned) returns(fixed);

dcl	disp_xeq bit(1) aligned;

%include pl1_tree_areas;
%include token_list;
%include token_types;
%include source_list;
%include nodes;

dcl	based_ptr	ptr based;

dcl	1 arglist	based,
	2 number	bit(17),
	2 filler	fixed,
	2 arg(1)	ptr;

%include block;

			/*eject*/

begin:
	disp_xeq = "0"b;

common:
	on condition(program_interrupt) goto done;
	no_dcls,
	sourceb,
	walk = "0"b;
	tree_level = 0;
	call cu_$arg_count(i);
	if i = 0 then do;
		call ioa_("display | di -options-^/^a^/^a",
"options are: root | main | cur_block | cur_statement (walk) (no_dcls) (source)",
"	   brief | long
	   token_list (_n)");
	call ioa_(
"	   source_list (_n) (min'ed with pl1_stat_$last_source)
	   arg arg# offset#
	   seg#|offset# (default seg is tree_)
	   statement file#.line#.statement#
	   dcl iden1 iden2 ... (10 max)");
		return;
		end;

	call cu_$arg_ptr(1,argpt,arglen,code);
	ap1=argpt;
	string=argstring;
	if substr(string,1,4) = "dcl " then go to show_dcl;

	if substr(string,1,8) = "brief   "
	then do;
	     display_stat_$brief_display = "1"b;
	     return;
	     end;

	if substr(string,1,8) = "long    "
	then do;
	     display_stat_$brief_display = "0"b;
	     return;
	     end;

	call cu_$arg_ptr(2,argpt,arglen,code);
	if code ^= 0 then string2=""; else string2=argstring;
	call cu_$arg_ptr(3,argpt,arglen,code);
	if code ^= 0 then string3=""; else string3=argstring;

	if substr(string,1,8) = "source_l" then go to source_list_;
	if substr(string,1,8) = "token_li" then go to token_list_;
	if substr(string,1,8) = "statemen" then go to show_stm;
	if substr(string,1,4) = "root"
	then p = pl1_stat_$root;
	else if substr(string,1,8) = "cur_bloc"
	then p = pl1_stat_$cur_block;
	else if substr(string,1,8) = "cur_stat"
	then p = pl1_stat_$cur_statement;
	else if substr(string,1,4) = "main"
	then if pl1_stat_$root ^= null then p = pl1_stat_$root -> block.son; else goto null_ptr;
	else if substr(string,1,4) = "arg "
	then do;
	     n = cv_oct_(string2);
	     p = addr(p);
	     p = ptr(p,cv_oct_(string3));
	     if n > fixed(p -> arglist.number,17)
	     then do;
		call ioa_("no arg ^d",n);
		return;
		end;
	     p = p -> arglist.arg(n) -> based_ptr;
	     end;
	else do;
	     if disp_xeq
		then p = pl1_stat_$xeq_tree_area_ptr;
		else p = pl1_stat_$root;
	     n = index(string,"|");
	     if n = 0 then p = ptr(p,cv_oct_(string));
	     else p = ptr(baseptr(cv_oct_(substr(string,1,n-1))),
	      cv_oct_(substr(string,n+1)));
	     end;

	if p = null
	then do;
null_ptr:
	     call ioa_("Pointer is null");
	     return;
	     end;

	if substr(string2,1,4) = "walk" then walk="1"b; else
	if substr(string3,1,4) = "walk" then walk="1"b;
	if substr(string2,1,8) = "no_dcls " then no_dcls="1"b; else
	if substr(string3,1,8) = "no_dcls " then no_dcls="1"b;
	if substr(string2,1,8) = "source  " then sourceb="1"b; else
	if substr(string3,1,8) = "source  " then sourceb="1"b;

	n = fixed(p -> node.type,17,0);
	if n > fixed(temporary_node,9,0) then n = 0;

	call ioa_("Displaying ^p",p);
	goto switch(n);

switch(0):
switch(7):
switch(17):
	call display_any_node_name("No display program for",p,tree_level+1);
	return;

switch(1):
	call display_block(p,walk,no_dcls,sourceb,tree_level+1);
	return;

switch(3):
switch(4):
switch(5):
switch(10):
switch(16):
switch(18):
	call display_exp(p,tree_level+1);
	return;

switch(8):
switch(9):
	call display_array(p,tree_level+1);
	return;

switch(11):
	call display_list(p,tree_level+1);
	return;

switch(2):
	call display_statement(p,sourceb,tree_level+1);
	return;

switch(6):
switch(12):
switch(15):
	call display_symbol(p,tree_level+1);
	return;

switch(13):
	call show_ms$pt(p);
	return;

switch(14):
	call display_source(p,tree_level+1);
	return;

show_stm:
	call show_statement(string2);
	return;

show_dcl:
	ap1->argstring="";			/* zap "dcl" */
	call cu_$arg_list_ptr(argpt);
	call cu_$gen_call(show_declaration,argpt);

done:	return;

token_list_:
	n = cv_dec_(string2);
	if n = 0 then n = 3000;
	do k = 1 to n;
	     if token_list(k)=null then return;

	     if t_table.type = semi_colon & n = 3000
	     then return;

	     call display_exp(token_list(k),tree_level+1);
	end;
	return;

source_list_:
	m = pl1_stat_$last_source;
	n = cv_dec_(string2);
	if n = 0
	then do;
		n = m;
		j = 0;
	     end;
	else	j, n = min(n,m);
	do i = j to n;
	     call display_source(source_list(i),tree_level+1);
	end;
	return;

dix:	display_xeq:	entry;
	disp_xeq = "1"b;
	go to common;

	end display;
