/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/*	prints expressions

	Modified on:	22 September 1970 by P. Green for Version II
	Modified on:	28 February 1978 by PCK for the stop operator
	Modified on:	Dec 1978 by David Spector for cross_reference.set_reference bit
	Modified on:	25 April 1979 by PCK to implement 4-bit decimal
	Modified on:	17 May 1979 by RAB for reference.substr
	Modified on:	6 June 1979 by PG for rank and byte
	Modified 791017 by PG to print all info in a temporary node
	Modified on:	29 November 1979 by PCK to print tree level indented output
	Modified on:	26 Dec 1979 by PCK for by name assignment
	Modified on:	23 March 1980 by RAB for reference.(padded aligned)_for_store_ref
 	Modified on:	24 June 1980 by PCK to correctly indent list nodes
	Modified on:	27 June 1980 by PCK to decode data type of reference node
	Modified on:	11 September 1980 by M. N. Davidoff to print temporary node info instead of garbage
	Modified on:	15 September 1980 by M. N. Davidoff to decode reference.address
*/
/* format: style3 */
display_exp:
     proc (a, tree_level);

dcl	(a, p, q, s)	ptr,
	tree_level	fixed bin,
	display_stat_$brief_display
			bit (1) ext static,
	display_any_node_name
			entry (char (*) aligned, ptr, fixed bin);
dcl	(binary, substr, addr, fixed, string, length, null, hbound, baseno, rel)
			builtin;
dcl	decode_node_id	entry (ptr, bit (1) aligned) returns (char (120) varying),
	display_list	entry (ptr, fixed bin),
	display_constant	entry (ptr, fixed bin);
dcl	ioa_		entry options (variable);
dcl	ioa_$nnl		entry options (variable);
dcl	(i, n)		fixed bin (15),
	line		char (96),
	lp		fixed bin;
dcl	b36		bit (36) aligned,
	m		fixed bin (18),
	word_bit		bit (36) aligned based (p),
	op_name		char (20) aligned,
	op_number		bit (9) aligned,
	1 op_number_structure
			based (addr (op_number)) aligned,
	  2 op_class	bit (5) unaligned,
	  2 op_relative	bit (4) unaligned;

/* include files */

%include op_codes;
%include cross_reference;
%include label;
%include nodes;
%include symbol;
%include operator;
%include temporary;
%include token;
%include token_types;
%include reference;

/* internal static */

dcl	units		(7) char (5) int static options (constant) aligned
			init ("bit ", "digit", "char", "half", "word", "mod2", "mod4");

dcl	bit_names		(30) char (20) varying static
			init ("array", "varying", "shared", "put_data", "processed", "inhibit", "big_offset",
			"big_length", "has_modword", "padded", "aligned", "long", "forward", "ic", "temp", "defined",
			"evaluated", "allocate", "allocated", "aliasable", "even", "", "aggregate", "hit_zero",
			"dont_save", "fo_in_qual", "hard_to_load", "substr", "padded_for_store", "aligned_for_store");

dcl	data_type_name	(1:24) char (20) var aligned
			init ("real_fix_bin_1", "real_fix_bin_2", "real_flt_bin_1", "real_flt_bin_2",
			"complex_fix_bin_1", "complex_fix_bin_2", "complex_flt_bin_1", "complex_flt_bin_2",
			"real_fix_dec", "real_flt_dec", "complex_fix_dec", "complex_flt_dec", "char_string",
			"bit_string", "label_constant", "local_label_variable", "label_variable", "entry_variable",
			"ext_entry_in", "ext_entry_out", "int_entry", "int_entry_other", "unpacked_ptr", "packed_ptr")
			int static options (constant);

dcl	address_name	(9) char (8) varying static init ("b0", "b1", "b2", "b3", "b4", "b5", "b6", "b7", "storage");

dcl	value_name	(24) char (12) varying static
			init ("a", "q", "aq", "string_aq", "complex_aq", "decimal_aq", "b0", "b1", "b2", "b3", "b4",
			"b5", "b6", "b7", "storage", "indicators", "x0", "x1", "x2", "x3", "x4", "x5", "x6", "x7");

dcl	op_offset		(0:20) fixed bin (15) int static
			initial (0, 1, 8, 15, 25, 35, 46, 61, 65, 81, 92, 108, 117, 120, 131, 137, 153, 169, 185, 194,
			210);

/* format: ^delnl */

dcl	op_names		(0:210) char (20) aligned internal static initial (
			"ZERO!!",
			"UNUSED 1-0",		/* class 1	1 */
			"add",
			"sub",
			"mult",
			"div",
			"negate",
			"exp",

			"UNUSED 2-0",		/* class 2	8 */
			"and_bits",
			"or_bits",
			"xor_bits",
			"not_bits",
			"cat_string",
			"bool_fun",

			"UNUSED 3-0",		/* class 3	15 */
			"assign",
			"assign_size_ck",
			"assign_zero",
			"copy_words",
			"copy_string",
			"make_desc",
			"assign_round",
			"pack",
			"unpack",

			"UNUSED 4-0",		/* class 4	25 */
			"UNUSED 4-1",
			"UNUSED 4-2",
			"UNUSED 4-3",
			"less_than",
			"greater_than",
			"equal",
			"not_equal",
			"less_or_equal",
			"greater_or_equal",

			"UNUSED 5-0",		/* class 5	35 */
			"jump",
			"jump_true",
			"jump_false",
			"jump_if_lt",
			"jump_if_gt",
			"jump_if_eq",
			"jump_if_ne",
			"jump_if_le",
			"jump_if_ge",
			"jump_three_way",

			"UNUSED 6-0",		/* class 6	46 */
			"std_arg_list",
			"return_words",
			"std_call",
			"return_bits",
			"std_entry",
			"return_string",
			"ex_prologue",
			"allot_auto",
			"param_ptr",
			"param_desc_ptr",
			"std_return",
			"allot_ctl",
			"free_ctl",
			"stop",

			"mod_bit",		/* class 7	61 */
			"mod_byte",
			"mod_half",
			"mod_word",

			"bit_to_char",		/* class 8	65 */
			"bit_to_word",
			"char_to_word",
			"half_to_word",
			"word_to_mod2",
			"word_to_mod4",
			"word_to_mod8",
			"rel_fun",
			"baseno_fun",
			"desc_size",
			"bit_pointer",
			"index_before_fun",
			"index_after_fun",
			"verify_ltrim_fun",
			"verify_rtrim_fun",
			"digit_to_bit",

			"ceil_fun",		/* class 9	81 */
			"floor_fun",
			"round_fun",
			"sign_fun",
			"abs_fun",
			"trunc_fun",
			"byte",
			"rank",
			"index_rev_fun",
			"search_rev_fun",
			"verify_rev_fun",

			"index_fun",		/* class 10	92 */
			"off_fun",
			"complex_fun",
			"conjg_fun",
			"mod_fun",
			"repeat_fun",
			"verify_fun",
			"translate_fun",
			"UNUSED 10-8",
			"real_fun",
			"imag_fun",
			"length_fun",
			"pl1_mod_fun",
			"search_fun",
			"allocation_fun",
			"reverse_fun",

			"addr_fun",		/* class 11	108 */
			"addr_fun_bits",
			"ptr_fun",
			"baseptr_fun",
			"addrel_fun",
			"codeptr_fun",
			"environmentptr_fun",
			"stackbaseptr_fun",
			"stackframeptr_fun",

			"min_fun",		/* class 12	117 */
			"max_fun",
			"pos_dif_fun",

			"UNUSED 13-0",		/* class 13	120 */
			"stack_ptr",
			"empty_area",
			"UNUSED 13-3",
			"enable_on",
			"revert_on",
			"signal_on",
			"lock_fun",
			"stacq_fun",
			"clock_fun",
			"vclock_fun",

			"bound_ck",		/* class 14	131 */
			"range_ck",
			"loop",
			"join",
			"allot_based",
			"free_based",

			"UNUSED 15-0",		/* class 15	137 */
			"r_parn",
			"l_parn",
			"r_format",
			"c_format",
			"f_format",
			"e_format",
			"b_format",
			"a_format",
			"x_format",
			"skip_format",
			"column_format",
			"page_format",
			"line_format",
			"picture_format",
			"bn_format",

			"get_list_trans",		/* class 16	153 */
			"get_edit_trans",
			"get_data_trans",
			"put_list_trans",
			"put_edit_trans",
			"put_data_trans",
			"terminate_trans",
			"stream_prep",
			"record_io",
			"fortran_read",
			"fortran_write",
			"ftn_file_manip",
			"ftn_trans_loop",
			"put_control",
			"put_field",
			"put_field_chk",

			"UNUSED 17-0",		/* class 17	169 */
			"UNUSED 17-1",
			"return_value",
			"allot_var",
			"free_var",
			"get_file",
			"get_string",
			"put_file",
			"put_string",
			"open_file",
			"close_file",
			"read_file",
			"write_file",
			"locate_file",
			"do_fun",
			"do_spec",

			"rewrite_file",		/* class 18	185 */
			"delete_file",
			"unlock_file",
			"lock_file",
			"UNUSED 18-4",
			"refer",
			"prefix_plus",
			"nop",
			"assign_by_name",

			"sqrt_fun",		/* class 19	194 */
			"sin_fun",
			"sind_fun",
			"cos_fun",
			"cosd_fun",
			"tan_fun",
			"tand_fun",
			"asin_fun",
			"asind_fun",
			"acos_fun",
			"acosd_fun",
			"atan_fun",
			"atand_fun",
			"log2_fun",
			"log_fun",
			"log10_fun",

			"exp_fun");		/* class 20 (end)	210 */

/* format: revert */

/* program */

	p = a;
	if p = null
	then do;
		call ioa_ ("^/^vxdisplay_exp: pointer is NULL^/", tree_level);
		return;
	     end;
	if p -> node.type = token_node
	then do;
		call ioa_ ("^/^vxTOKEN ^p is ^a", tree_level, p, p -> token.string);
		if p -> token.type = bit_string
		then call ioa_ ("^vxtype is bit_string", tree_level);
		else if p -> token.type = char_string
		then call ioa_ ("^vxtype is char_string", tree_level);

		call ioa_ ("");
		return;
	     end;
	if p -> node.type = block_node
	then do;
		call ioa_ ("^/^vxBLOCK ^p^/", tree_level, p);
		return;
	     end;
	if p -> node.type = label_node
	then do;
		call ioa_ ("^/^vxLABEL ^p is ^a^/", tree_level, p, p -> label.token -> token.string);
		return;
	     end;
	if p -> node.type = cross_reference_node
	then do;
		do p = p repeat p -> cross_reference.next while (p ^= null);
		     call ioa_ ("^/^vxXREF ^p, ^a^[ set^]^/", tree_level, p, decode_node_id (p, "0"b),
			p -> cross_reference.set_reference);
		end;
		return;
	     end;
	if p -> node.type = symbol_node
	then do;
		call ioa_ ("^/^vxSYMBOL ^p is ^a^/", tree_level, p, p -> symbol.token -> token.string);
		return;
	     end;
	if p -> node.type = reference_node
	then do;
		s, q = p -> reference.symbol;
		if s = null
		then call ioa_ ("^/^vxREFERENCE ^p", tree_level, p);
		else do;
			if q -> node.type = symbol_node | q -> node.type = label_node
			then q = q -> symbol.token;
			else ;			/* is already token from parse */

			call ioa_$nnl ("^/^vxREFERENCE ^p is ^a, symbol is ^p", tree_level, p, q -> token.string,
			     p -> reference.symbol);

			if p -> reference.data_type ^= 0
			then call ioa_$nnl (", data type is ^d (^a)", p -> reference.data_type,
				data_type_name (p -> reference.data_type));


			call ioa_ ("");

			if s -> node.type = symbol_node
			then if s -> symbol.constant & ^s -> symbol.entry & s -> symbol.initial ^= null
			     then call display_constant (s, tree_level + 1);
		     end;

		m = p -> reference.c_offset;
		if m ^= 0
		then call ioa_ ("^vxc_offset = ^d", tree_level, m);
		m = p -> reference.c_length;
		if m ^= 0
		then call ioa_ ("^vxc_length = ^d", tree_level, m);

		b36 = substr (p -> word_bit, 10, 5) || p -> reference.inhibit || string (p -> reference.other)
		     || string (p -> reference.bits) || string (p -> reference.more_bits);
		if b36 ^= "0"b
		then do;
			line = "";
			lp = 1;

			do i = 1 to hbound (bit_names, 1);
			     if substr (b36, i, 1)
			     then do;
				     n = length (bit_names (i));
				     if n > 0
				     then do;
					     substr (line, lp, n) = bit_names (i);
					     lp = lp + n + 1;

					     if lp > 72
					     then do;
						     call ioa_ ("^vx^a", tree_level, line);
						     lp = 1;
						     line = "";
						end;
					end;
				end;
			end;

			if lp > 1
			then call ioa_ ("^vx^a", tree_level, line);
		     end;

		if ^p -> reference.no_address
		then call ioa_ (
			"^vx^[perm ^]address = ^[^spr^.3b|^;^[^s^;(base = ^.3b)^] ^]^.3b^a^[^s^; (tag = ^.3b)^]^[ inhibit^]^[^s^; (op = ^.3b)^]"
			, tree_level, p -> reference.perm_address, p -> reference.address.ext_base,
			p -> reference.address.base = ""b, p -> reference.address.base, p -> reference.address.offset,
			decode_tag (p -> reference.address.tag), p -> reference.address.tag = ""b,
			p -> reference.address.tag, p -> reference.address.inhibit, p -> reference.address.op = ""b,
			p -> reference.address.op);

		b36 = string (p -> reference.address_in);
		if b36 ^= "0"b
		then do;
			line = "address is in:";
			lp = 16;

			do i = 1 to length (string (p -> reference.address_in));
			     if substr (b36, i, 1)
			     then do;
				     n = length (address_name (i));
				     substr (line, lp, n) = address_name (i);
				     lp = lp + n + 1;
				end;
			end;

			call ioa_ ("^vx^a", tree_level, line);
		     end;

		b36 = string (p -> reference.value_in);
		if b36 ^= "0"b
		then do;
			line = "value is in:";
			lp = 14;

			do i = 1 to length (string (p -> reference.value_in));
			     if substr (b36, i, 1)
			     then do;
				     n = length (value_name (i));
				     substr (line, lp, n) = value_name (i);
				     lp = lp + n + 1;

				     if lp > 72
				     then do;
					     call ioa_ ("^vx^a", tree_level, line);
					     lp = 1;
					     line = "";
					end;

				end;
			end;

			if lp > 1
			then call ioa_ ("^vx^a", tree_level, line);
		     end;

		i = p -> reference.ref_count;
		if i ^= 0
		then call ioa_ ("^vxreference count = ^d", tree_level, i);

		m = fixed (p -> reference.units, 3);
		if m ^= 0
		then call ioa_ ("^vxunits = ^a", tree_level, units (m));

		i = fixed (p -> reference.store_ins, 18);
		if i ^= 0
		then call ioa_ ("^vxstored into at ^6w", tree_level, i);

		q = p -> reference.offset;
		if q ^= null
		then call show_exp ("offset");
		q = p -> reference.length;
		if q ^= null
		then call show_exp ("length");
		q = p -> reference.qualifier;
		if q ^= null
		then call show_exp ("qualifier");
		q = p -> reference.subscript_list;
		if baseno (q) ^= (18)"0"b
		then if q ^= null
		     then call show_exp ("subscript list");
		     else ;
		else do;
			i = fixed (rel (q), 18);
			if i ^= 0
			then call ioa_ ("^vxfractional offset is ^6w", tree_level, i);
		     end;
		call ioa_ ("^vxEND REFERENCE ^p^/", tree_level, p);
		return;
	     end;

	if p -> node.type = list_node
	then do;
		call display_list (p, tree_level);
		return;
	     end;

	if p -> node.type = temporary_node
	then do;
		call ioa_ ("^/^vxTEMPORARY ^p", tree_level, p);
		call ioa_ ("^vxnext = ^p", tree_level, p -> temporary.next);
		call ioa_ ("^vxsize = ^d", tree_level, p -> temporary.size);
		call ioa_ ("^vxlocation = sp|^6w", tree_level, (p -> temporary.location));
		call ioa_ ("^vxref_count = ^d", tree_level, p -> temporary.ref_count);
		call ioa_ ("^vxsymbol = ^p", tree_level, p -> temporary.symbol);
		call ioa_ ("^vxlast_freed = ^6w", tree_level, (p -> temporary.last_freed));
		call ioa_ ("^vxEND TEMPORARY ^p^/", tree_level, p);
		return;
	     end;

	if p -> node.type ^= operator_node
	then do;
		call display_any_node_name ("display_exp: arg node not handled by display_exp,
arg =", p, tree_level + 1);
		return;
	     end;
	n = p -> operator.number;
	op_number = p -> operator.op_code;
	op_name = op_names (op_offset (fixed (op_class, 5)) + fixed (op_relative, 4));

	line = "";
	lp = 1;

	if p -> operator.shared
	then do;
		substr (line, lp, 6) = "shared";
		lp = lp + 7;
	     end;

	if p -> operator.optimized
	then do;
		substr (line, lp, 9) = "optimized";
		lp = lp + 10;
	     end;

	if p -> operator.processed
	then do;
		substr (line, lp, 9) = "processed";
		lp = lp + 10;
	     end;

	if lp = 1
	then call ioa_ ("^/^vxOPERATOR ^p is ^a, ^d operands", tree_level, p, op_name, n);
	else call ioa_ ("^/^vxOPERATOR ^p is ^a, (^va), ^d operands", tree_level, p, op_name, lp - 2, line, n);
	do i = 1 to n;
	     if p -> operator.operand (i) = null
	     then call ioa_ ("^vxOPERAND (^d) of ^p = NULL", tree_level, i, p);
	     else do;
		     call ioa_ ("^vxOPERAND (^d) of ^p =", tree_level, i, p);
		     call display_exp ((p -> operator.operand (i)), tree_level + 1);
		end;
	end;
	if n ^= 0
	then call ioa_ ("^vxEND OPERATOR ^p, ^d operands^/", tree_level, p, n);
	else call ioa_ ("");

	return;

show_exp:
     proc (message);

dcl	message		char (*);

	if display_stat_$brief_display
	then call ioa_ ("^vx^a exp = ^p", tree_level, message, q);
	else do;
		call ioa_ ("^vx^a follows:", tree_level, message);
		call display_exp (q, tree_level + 1);
		call ioa_ ("^vx^a ended", tree_level, message);
	     end;
     end show_exp;

decode_tag:
     procedure (tag) returns (char (4) varying);

dcl	tag		bit (6);

dcl	designator	fixed bin (4);

dcl	designator_names	(0:15) char (2) varying internal static options (constant)
			initial ("n", "au", "qu", "du", "ic", "al", "ql", "dl", "x0", "x1", "x2", "x3", "x4", "x5",
			"x6", "x7");

dcl	it_designator_names (0:15) char (3) varying internal static options (constant)
			initial ("f1", "itp", "42", "its", "sd", "scr", "f2", "f3", "ci", "i", "sc", "ad", "di", "dic",
			"id", "idc");

	designator = binary (substr (tag, 3), 4);
	goto modification (binary (substr (tag, 1, 2), 2));

modification (0):					/* register (r) */
	if designator = 0
	then return ("");
	else return ("," || designator_names (designator));

modification (1):					/* register then indirect (ri) */
	if designator = 0
	then return (",*");
	else return ("," || designator_names (designator) || "*");

modification (2):					/* indirect then tally (it) */
	return ("," || it_designator_names (designator));

modification (3):					/* indirect then register (ir) */
	return (",*" || designator_names (designator));
     end decode_tag;

     end display_exp;
