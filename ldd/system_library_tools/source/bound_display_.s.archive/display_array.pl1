/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* display array|bound nodes,
    modified on 26 August by PAG for Version II */
/*	Modified again on:	19 October 1970 PG */
/*	Modified on:	 2 December 1970 jk  */
/*	Modified on:	 7 January 1971 by BLW */
/*	Modified on:	25 April 1979 by PCK to implement 4-bit decimal */
/*	Modified on:	29 November 1979 by PCK to display tree level indented output */

display_array: proc(a,tree_level);

dcl	tree_level fixed bin;
dcl	(a,p,b) ptr;
dcl	units(0:7) char(5) int aligned static init("----","bits","digit","byte","half","word","mod2","mod4");
dcl	i fixed bin(31);
dcl	c char(16) varying;
dcl	display_exp external entry(ptr,fixed bin), display_any_node_name ext entry(char(*) aligned,ptr,fixed bin),
	ioa_ entry options(variable),
	(fixed,null) builtin;

dcl	display_stat_$brief_display bit(1) ext static;

dcl	boundary_type(7) char(5) aligned int static
	init("bit", "digit", "byte", "half", "word", "mod2", "mod4");

%include array;
%include nodes;
begin:
	p = a;
	if p = null then do;
		call ioa_("^/^vxdisplay_array: ptr is NULL^/",tree_level);
		return;
		end;

	if p -> node.type = bound_node
	then do;
	     call display_bounds(p,tree_level+1);
	     return;
	     end;

	if p -> node.type ^= array_node then do;
		call display_any_node_name("display_array: arg is not an array node,
 arg =",p,tree_level+1);
		return;
		end;

	if p -> array.interleaved then c = " is interleaved"; else c = "";
	call ioa_("^/^vxARRAY ^p^a, dimensions = ^d",tree_level,p,c,p -> array.number_of_dimensions);

	i=p->array.own_number_of_dimensions;
	if i ^= 0 then
	call ioa_("^vxown_number_of_dimensions = ^d",tree_level,i);

	i = p -> array.element_boundary;
	if i ^= 0 then call ioa_("^vxelement boundary is ^a",tree_level,(boundary_type(i)));

	i = p -> array.size_units;
	if i ^= 0 then call ioa_("^vxsize units are ^a",tree_level,(boundary_type(i)));

	call ioa_("^vxoffset units are ^a",tree_level,units(p->array.offset_units));

	b=p->array.element_descriptor;
	if b ^= null then call show_exp("element descriptor",tree_level);

	b=p->array.virtual_origin;
	if b ^= null then call show_exp("virtual origin",tree_level);

	b = p -> array.symtab_virtual_origin;
	if b ^= null then call show_exp("symtab virtual origin",tree_level);

	i=p->array.c_virtual_origin;
	if i ^= 0 then
	call ioa_("^vxc_virtual_origin = ^d",tree_level,i);

	b=p->array.element_size;
	if b ^= null then call show_exp("element size",tree_level);

	b = p -> array.symtab_element_size;
	if b ^= null then call show_exp("symtab element size",tree_level);

	i=p->array.c_element_size;
	if i ^= 0 then
	call ioa_("^vxc_element_size = ^d",tree_level,i);

	b=p->array.element_size_bits;
	if b ^= null then call show_exp("bit element size",tree_level);

	i=p->array.c_element_size_bits;
	if i ^= 0 then
	call ioa_("^vxc_element_size_bits = ^d",tree_level,i);

	p=p->array.bounds;
	call ioa_("^vxbounds of ARRAY ^p:",tree_level,p);
	call display_bounds(p,tree_level+1);
	call ioa_("^vxEND ARRAY ^p^/",tree_level,p);
	return;

display_bounds: procedure (s,tree_level);
dcl	(p,s) ptr;
dcl	tree_level fixed bin;

	p=s;
test_bounds:
	if p = null then do;
		call ioa_("^/^vxbounds ptr is NULL^/b",tree_level);
		return;
		end;

	if p->node.type ^= bound_node then do;
		call display_any_node_name("display_array: arg is not a bound node,
arg =",p,tree_level+1);
		return;
		end;

next:	if p = null then return;

	call ioa_("^/^vxBOUND ^p",tree_level,p);

	b = p->bound.lower;
	if b ^= null then call show_exp("lower bound",tree_level);

	i=p->bound.c_lower;
	if i ^= 0 then call ioa_("^vxc_lower bound = ^d",tree_level,i);

	b=p->bound.upper;
	if b ^= null then call show_exp("upper bound",tree_level);

	i=p->bound.c_upper;
	if i ^= 0 then call ioa_("^vxc_upper bound = ^d",tree_level,i);

	b=p->bound.multiplier;
	if b ^= null then call show_exp("multiplier",tree_level);

	i=p->bound.c_multiplier;
	if i ^= 0 then call ioa_("^vxc_multiplier = ^d",tree_level,i);

	b=p->bound.desc_multiplier;
	if b ^= null then call show_exp("descriptor multiplier",tree_level);

	i=p->bound.c_desc_multiplier;
	if i ^= 0 then call ioa_("^vxc_desc_multiplier = ^d",tree_level,i);

	b = p -> bound.symtab_lower;
	if b ^= null then call show_exp("symtab lower",tree_level);

	b = p -> bound.symtab_upper;
	if b ^= null then call show_exp("symtab upper",tree_level);

	b = p -> bound.symtab_multiplier;
	if b ^= null then call show_exp("symtab multiplier",tree_level);

	call ioa_("^vxEND BOUND ^p^/",tree_level,p);
	p = p->bound.next;
	go to next;
	end display_bounds;

show_exp:	     proc(mess,tree_level);

dcl	     tree_level fixed bin;
dcl	     mess char(*) aligned;

	     if display_stat_$brief_display then call ioa_("^vx^a = ^p",tree_level,mess,b);
	     else do;
		call ioa_("^vx^a exp follows",tree_level,mess);
		call display_exp(b,tree_level+1);
		call ioa_("^vx^a ended",tree_level,mess);
		end;

	     end;

	end;
