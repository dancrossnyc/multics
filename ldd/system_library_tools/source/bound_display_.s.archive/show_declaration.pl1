/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


show_declaration: proc;

/*	Modified: 29 Nov 1979 by PCK to print tree level indented listing */
/*	Modified: 25 Jun 1980 by PCK to properly indent block listing */

dcl	missing(10) bit(1) int static,
	(i,j,n,code) fixed bin(17),
	tree_level fixed bin initial(0),
	p ptr,
	display_symbol ext entry(ptr,fixed bin),
	symb(10) char(68) varying int static,
	cu_$arg_count ext entry(fixed bin(17)),
	cu_$arg_ptr ext entry(fixed bin(17),ptr,fixed bin(17),fixed bin(17)),
	n_args fixed bin(17) int static,
	ioa_ ext entry options(variable),
	pl1_stat_$root ptr ext static;

dcl	(length,null) builtin;

dcl	arg_string char(n) based;

%include block;
%include symbol;
 
	call cu_$arg_count(n_args);
	if n_args=0 then return;

	j = 0;
	do i = 1 to n_args;
	     call cu_$arg_ptr(i,p,n,code);

	     if code ^= 0
	     then do;
		call ioa_("NO ARG ^d",i);
		return;
		end;

	     if n = 0 then go to loop;

	     if j >= 10
	     then do;
		call ioa_("Only 10 symbols allowed");
		n_args = 10;
		goto l;
		end;

	     j = j + 1;
	     symb(j) = p -> arg_string;
	     missing(j) = "1"b;
loop:	end;

	if j = 0 then return;
	n_args=j;

l:	call search(pl1_stat_$root,tree_level+1);

	do i = 1 to n_args;
	     if missing(i)
	     then call ioa_("No declaration found for ^a",symb(i));
	     end;

	return;

search:	     proc(pt,tree_level);

dcl	     pt ptr;	/* points at block node */
dcl	     tree_level fixed bin;

dcl	(p,q) ptr;

%include token;

	     if pt = null then return;

	     call ioa_("^/^vxStart of block ^p",tree_level,pt);

	     p = pt -> block.declaration;
	     do while(p ^= null);

		q = p -> symbol.token;
		n = q -> token.size;

		do i = 1 to n_args;
		     if n = length(symb(i))
		     then if symb(i) = q -> token.string
		     then do;
			missing(i) = "0"b;
			call display_symbol(p,tree_level+1);
			goto do_next;
			end;
		end;

do_next:		p = p -> symbol.next;
		end;

	     q = pt -> block.son;

	     do while(q^=null);
		call search((q),tree_level+1);
		q = q -> block.brother;
	     end;

	     call ioa_("^vxEnd of block ^p^/",tree_level,pt);
	     end;

	end show_declaration;
