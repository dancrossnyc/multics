/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(2016-01-15,Swenson), approve(2016-01-15,MCR10003):
     Fix to support 4-character time zone abbreviations.
                                                   END HISTORY COMMENTS */

/* DB_FNP_ENV_ - Contains entries used by debug_fnp to maintain its environment.
   The selecting of dumps, core images, and live FNP's, and the switching between them is all done here */

/* Created September 1978 by Larry Johnson, mostly from other modules, to centralize all this code */
/* Modified July 1979 by Larry Johnson to handle empty dumps better, and to add -login_channel to line command */
/* Modified August 1979 by Larry Johnson to automatically select the channel causing a dump */
/* Modified 83-12-23 BIM for new config cards */

db_fnp_env_: proc;

/* Arguments */

dcl  arg_corep ptr;					/* Address of the dump */
dcl  arg_fnp fixed bin;
dcl  arg_cmd_infop ptr;
dcl  arg_expr_infop ptr;
dcl  arg_envp ptr;

/* Automatic */

dcl  code fixed bin (35);
dcl  i fixed bin;
dcl  dir char (168);
dcl  ename char (32);
dcl  dnx fixed bin;
dcl  segp ptr;
dcl  p ptr;
dcl  fnp fixed bin;
dcl  tag char (1);
dcl  areap ptr;
dcl  tty_name char (32);
dcl  empty_dump bit (1);
dcl  continue_scan_label local label;
dcl  version char (4) aligned;
dcl (bind_time, boot_time, up_time) fixed bin (71);
dcl  time_string char (24);
dcl  mem_word (1) bit (18) unal;
dcl  print_channel_name bit (1);
dcl  ptwp ptr;

dcl (entry_cnt1, entry_cnt2) fixed bin;
dcl (namep1, namep2) ptr init (null);
dcl (entryp1, entryp2) ptr init (null);

/* Based */

dcl  system_area area based (areap);
dcl 1 entries1 (entry_cnt1) aligned based (entryp1),	/* Data from hcs_$star_ */
    2 type bit (2) unal,
    2 nnames fixed bin (15) unal,
    2 nindex fixed bin (17) unal;
dcl  names1 (1) char (32) aligned based (namep1);
dcl 1 entries2 (entry_cnt2) aligned based (entryp2),	/* Data from hcs_$star_ */
    2 type bit (2) unal,
    2 nnames fixed bin (15) unal,
    2 nindex fixed bin (17) unal;
dcl  names2 (1) char (32) aligned based (namep2);

dcl  dnp ptr;
dcl 1 dn aligned based (dnp),
    2 sort_key unal,
      3 year char (2),
      3 month char (2),
      3 day char (2),
      3 hour char (2),
      3 min char (2),
      3 fnp char (1),
    2 ename char (32),				/* Real entry name */
    2 fdump bit (1);				/* Set if this is from fdump */

dcl  dntabp ptr init (null);
dcl  dntab_size fixed bin;
dcl 1 dntab aligned based (dntabp),
    2 dne (dntab_size) like dn;


dcl  listp ptr init (null);
dcl  list_size fixed bin;
dcl 1 list aligned based (listp),			/* List of pointers for sort_items_ */
    2 cnt fixed bin,
    2 dnp (list_size refer (list.cnt)) ptr unal;

dcl  one_k_words (1024) bit (36) aligned based;		/* For looking at emptyness of dumps */

dcl 1 fdump aligned based,				/* Format of fdump segment */
    2 fnp_dump (8),
      3 memory (0:32767) bit (18) unal;

dcl 1 ptw unal based (ptwp),				/* Format of FNP page table entry */
    2 base_address fixed bin (10) uns,
    2 read_only bit (1),
    2 secure bit (1),
    2 active bit (1),
    2 count fixed bin (5) uns;

/* Constants */

dcl  name char (11) int static options (constant) init ("db_fnp_env_");
dcl  fnp_dump_starname char (32) int static options (constant) init ("fnp.?.??????.????");
dcl  fdump_starname char (32) int static options (constant) init ("??????.????.*.*.355");

/* Static */

dcl  crver fixed bin int static;
dcl  crldt fixed bin int static;
dcl  crbdt fixed bin int static;
dcl  crreg fixed bin int static;
dcl  crpte fixed bin int static;
dcl  t_line fixed bin int static;
dcl  constants_setup bit (1) int static init ("0"b);

/* External stuff */

dcl  absolute_pathname_ entry (char (*), char (*), fixed bin (35));
dcl  check_star_name_$entry entry (char (*), fixed bin (35));
dcl  com_err_ entry options (variable);
dcl  config_$find_2 entry (character (4) aligned, character (4) aligned, pointer);
dcl  cv_oct_check_ entry (char (*), fixed bin (35)) returns (fixed bin (35));
dcl  date_time_ entry (fixed bin (71), char (*));
dcl  db_fnp_disp_cmd_$forget entry;
dcl  db_fnp_memory_$fetch entry (ptr, fixed bin, fixed bin, fixed bin, ptr, fixed bin (35));
dcl  db_fnp_reader_$get_operand entry (ptr);
dcl  db_fnp_sym_util_$get_value entry (char (*)) returns (fixed bin);
dcl  db_fnp_util_$cv_chan_name entry (ptr, fixed bin, char (*), char (*), fixed bin, fixed bin (35));
dcl  db_fnp_util_$get_chan_addrs entry (ptr, fixed bin, char (*), ptr, fixed bin (35));
dcl  encode_clock_value_ entry (fixed bin, fixed bin, fixed bin, fixed bin, fixed bin, fixed bin, fixed bin (71),
     fixed bin, char (4), fixed bin (71), fixed bin (35));
dcl  expand_pathname_ entry (char (*), char (*), char (*), fixed bin (35));
dcl  get_system_free_area_ entry returns (ptr);
dcl  get_wdir_ entry () returns (char (168));
dcl  hcs_$initiate entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr, fixed bin (35));
dcl  hcs_$star_ entry (char (*), char (*), fixed bin (2), ptr, fixed bin, ptr, ptr, fixed bin (35));
dcl  hcs_$terminate_noname entry (ptr, fixed bin (35));
dcl  ioa_ entry options (variable);
dcl  ioa_$rsnnl entry options (variable);
dcl  match_star_name_ entry (char (*), char (*), fixed bin (35));
dcl  parse_tty_name_ entry (char (*), fixed bin, bit (1), fixed bin, fixed bin);
dcl  sort_items_$char entry (ptr, fixed bin (24));
dcl  user_info_$terminal_data entry (char (*), char (*), char (*), fixed bin, char (*));
dcl  parse_fnp_name_ entry (char (*), fixed bin);
dcl  get_fnp_name_ entry (fixed bin) returns (char (32));


dcl  error_table_$bad_arg ext fixed bin (35);
dcl  error_table_$nomatch ext fixed bin (35);

dcl (cleanup, conversion) condition;

dcl (addr, addrel, bin, clock, divide, hbound, length, max, null, string, substr, unspec) builtin;

/* Entry to setup the default environment, FNP a, when the command begins. */

init:	entry (arg_envp);

	envp = arg_envp;

	env.corep = null ();
	env.dump_dir = ">dumps";
	env.dir, env.ename = "";
	env.segp = null ();
	string (env.flags) = "0"b;
	env.tty_name = "";
	env.fnp = -1;
	env.dump_time = 0;
	call setup_constants;

	call db_fnp_disp_cmd_$forget;

	call find_configured_fnps;			/* Check config deck for FNP's */
	call find_first_configured_fnp ("1"b);
	if fnp > 0 then do;
	     env.fnp = fnp;
	     env.fnp_sw = "1"b;
	end;

	return;

/* Entry used by cleanup handler by main command */

term:	entry (arg_envp);

	envp = arg_envp;

	if env.segp ^= null () then do;
	     call hcs_$terminate_noname (env.segp, (0));
	     env.segp = null ();
	end;
	return;

/* Command to select a specific FNP */

fnp_cmd:	entry (arg_corep, arg_fnp, arg_cmd_infop, arg_expr_infop);

	call setup;

	call get_opt_tag;
	if tag = "" then do;			/* Use first configured fnp */
	     call find_first_configured_fnp ("0"b);
	     if fnp < 0 then go to error_return;
	end;

	if ^substr (env.fnps_configured, fnp, 1) then do;
	     call ioa_ ("FNP ^a is not configured.", tag);
	     go to error_return;
	end;

	call forget;
	env.fnp = fnp;
	env.fnp_sw = "1"b;
	return;

/* Command to select a core image */

image_cmd: entry (arg_corep, arg_fnp, arg_cmd_infop, arg_expr_infop);

	call setup;

	on cleanup call clean_up;
	call get_seg;

	call forget;
	env.fnp = -1;
	env.segp = segp;
	env.dir = dir;
	env.ename = ename;
	env.corep = addrel (segp, 1);			/* Core image has length word */
	env.image_sw = "1"b;
	return;


/* Command to select a specific dump by name */

dump_cmd:	entry (arg_corep, arg_fnp, arg_cmd_infop, arg_expr_infop);

	call setup;

	on cleanup call clean_up;
	call get_seg;				/* Check arg */

	call forget;
	env.fnp = -1;				/* Don't know FNP */
	env.segp = segp;
	env.dir = dir;
	env.ename = ename;
	env.corep = segp;
	env.dump_sw = "1"b;

/* Check format of the dump name. If it one we recognize, we can infer
   which FNP the dump is for, or select a valid dump from an FDUMP */

	call match_star_name_ (env.ename, fnp_dump_starname, code);
	if code = 0 then do;			/* Standard FNP dump */
	     call parse_fnp_name_ (substr (env.ename, 5, 1), fnp);
	     if fnp < 0 then fnp = 0;
	     if fnp ^= 0 then env.fnp = fnp;		/* Got good fnp */
	     if unspec (env.segp -> one_k_words) = "0"b then
		call ioa_ ("^a^[>^]^a appears empty.", env.dir, (env.dir ^= ">"), env.ename);
	     call setup_crashed_line;
	     call ioa_ ("^[Using line ^a^;^sNo TIB available^]", (env.tty_name ^= ""), env.tty_name);
	     return;
	end;

	call match_star_name_ (env.ename, fdump_starname, code); /* Check for standard fdump format */
	if code = 0 then do;
	     do fnp = 1 to hbound (env.segp -> fdump.fnp_dump, 1); /* Look for non-empty section */
		p = addr (env.segp -> fdump.fnp_dump (fnp));
		if unspec (p -> one_k_words) ^= "0"b then do; /* Found good data */
use_some_dump:	     env.fdump_sw = "1"b;
		     env.corep = p;
		     env.fnp = fnp;
		     call setup_crashed_line;
		     call ioa_ ("^[Using line ^a^;^sNo TIB available.^]", (env.tty_name ^= ""), env.tty_name);
		     return;
		end;
	     end;
	     call ioa_ ("^a^[>^]^a appears empty.", env.dir, (env.dir ^= ">"), env.ename);
	     fnp = 1;				/* Use first fnp */
	     p = addr (env.segp -> fdump.fnp_dump (fnp));
	     go to use_some_dump;
	end;

	call ioa_ ("^a is non-standard dump name. FNP not known.", env.ename);
	return;

/* Entry to set or print the default dump directory */

dump_dir:	entry (arg_corep, arg_fnp, arg_cmd_infop, arg_expr_infop);

	call setup;

	call get_operand;
	if cmd_info.endline then do;
	     call ioa_ ("Dump directory is ^a", env.dump_dir);
	     return;
	end;

	if operand = "-wd" | operand = "-working_dir" then dir = get_wdir_ ();
	else do;
	     call absolute_pathname_ (operand, dir, code);
	     if code ^= 0 then do;
		call com_err_ (code, "", "^a", operand);
		go to error_return;
	     end;
	end;

	env.dump_dir = dir;
	return;

/* Entry to print a list of available dumps */

dumps:	entry (arg_corep, arg_fnp, arg_cmd_infop, arg_expr_infop);

	call setup;

	on cleanup call clean_up;

	call list_dumps;
	do i = list_size to 1 by -1;
	     dnp = list.dnp (i);
	     call ioa_ ("^a", dn.ename);
	end;

	call clean_up;

	return;

/* Entry to find the most recent dump */

last_dump: entry (arg_corep, arg_fnp, arg_cmd_infop, arg_expr_infop);

	call setup;
	continue_scan_label = prev_dump_continue;

	on cleanup call clean_up;
	call get_opt_tag;

	call list_dumps;

	do i = list_size to 1 by -1;
	     dnp = list.dnp (i);
	     if tag = "" then go to return_dump_info;	/* Any fnp ok */
	     if dn.fdump then go to return_dump_info;	/* Has all fnp's */
	     if dn.fnp = tag then go to return_dump_info;
	end;
	call ioa_ ("No dumps for FNP ^a", tag);
	go to error_return;

return_dump_info:
	call forget;
	empty_dump = "0"b;
	ename = dn.ename;
	call hcs_$initiate (env.dump_dir, ename, "", 0, 0, segp, code);
	if segp = null then do;			/* Can't access dump */
	     call com_err_ (code, name, "^a^[>^]^a", env.dump_dir, (env.dump_dir ^= ">"), ename);
	     if list_size = 1 then go to error_return;
	     env.ename = ename;
	     go to continue_scan_label;
	end;

	if ^dn.fdump then do;			/* Simple dump is easy */
	     if unspec (segp -> one_k_words) = "0"b then do;
		call ioa_ ("^a^[>^]^a appears empty.", env.dump_dir, (env.dump_dir ^= ">"), ename);
		empty_dump = "1"b;
	     end;
	     env.dir = env.dump_dir;
	     env.ename = ename;
	     env.segp = segp;
	     env.corep = segp;
	     env.dump_sw = "1"b;
	     call parse_fnp_name_ (dn.fnp, env.fnp);
	     call set_dump_time;
	     call setup_crashed_line;
	     if empty_dump then if list_size > 1 then go to continue_scan_label;
	     call ioa_ ("Using ^a, ^[line ^a^;^sNo TIB available.^]", env.ename, (env.tty_name ^= ""), env.tty_name);
	     call clean_up;
	     return;
	end;

	if tag ^= "" then do;			/* See if request fnp in this dump */
	     call parse_fnp_name_ (tag, i);
	     p = addr (segp -> fdump.fnp_dump (i));
	     if unspec (p -> one_k_words) = "0"b then do;
		call ioa_ ("No data for FNP ^a in ^a", tag, ename);
		empty_dump = "1"b;
	     end;
	     go to use_fdump;
	end;

	do i = 1 to hbound (segp -> fdump.fnp_dump, 1);	/* Look at pieces of fdumps */
	     p = addr (segp -> fdump.fnp_dump (i));
	     if unspec (p -> one_k_words) ^= "0"b then	/* Found good component */
		go to use_fdump;
	end;

	i = 1;
	p = addr (segp -> fdump.fnp_dump (1));
	call ioa_ ("^a^[>^]^a appears empty.", env.dump_dir, (env.dump_dir ^= ">"), ename);
	empty_dump = "1"b;

use_fdump:
	env.ename = ename;
	env.dir = env.dump_dir;
	env.segp = segp;
	env.corep = p;
	env.fnp = i;
	env.dump_sw, env.fdump_sw = "1"b;
	call set_dump_time;
	call setup_crashed_line;
	if empty_dump then if list_size > 1 then go to continue_scan_label;
	call ioa_ ("Using ^a (fnp ^a), ^[line ^a^;^sNo TIB available.^]", env.ename, get_fnp_name_ (env.fnp), (env.tty_name ^= ""), env.tty_name);
	call clean_up;
	return;

/* Find the next earliest dump */

prev_dump: entry (arg_corep, arg_fnp, arg_cmd_infop, arg_expr_infop);

	call setup;

	if ^env.dump_sw then do;
	     call ioa_ ("Not currently using a dump.");
	     go to error_return;
	end;

	continue_scan_label = prev_dump_continue;
	on cleanup call clean_up;
	call get_opt_tag;

	call list_dumps;
prev_dump_continue:
	call find_current;
	do i = dnx - 1 to 1 by -1;
	     dnp = list.dnp (i);
	     if tag = "" then go to return_dump_info;
	     if dn.fdump then go to return_dump_info;
	     if dn.fnp = tag then go to return_dump_info;
	end;

	if tag ^= "" then call ioa_ ("No more dumps for FNP ^a", tag);
	else call ioa_ ("^a is the oldest dump.", env.ename);
	go to error_return;

/* Get the next lastest dump */

next_dump: entry (arg_corep, arg_fnp, arg_cmd_infop, arg_expr_infop);

	call setup;

	if ^env.dump_sw then do;
	     call ioa_ ("Not currently using a dump.");
	     go to error_return;
	end;

	continue_scan_label = next_dump_continue;

	on cleanup call clean_up;
	call get_opt_tag;

	call list_dumps;
next_dump_continue:
	call find_current;
	do i = dnx + 1 to list_size;
	     dnp = list.dnp (i);
	     if tag = "" then go to return_dump_info;
	     if dn.fdump then go to return_dump_info;
	     if tag = dn.fnp then go to return_dump_info;
	end;

	if tag ^= "" then call ioa_ ("No more dumps for FNP ^a", tag);
	else call ioa_ ("^a is the most recent dump", env.ename);
	go to error_return;

/* Select a differnt fnp from a multi-fnp segment */

select_fdump_fnp: entry (arg_corep, arg_fnp, arg_cmd_infop, arg_expr_infop);

	call setup;

	if ^env.dump_sw then do;
	     call ioa_ ("Only valid on dumps.");
	     go to error_return;
	end;

	call get_tag;
	p = addr (env.segp -> fdump.fnp_dump (fnp));
	if unspec (p -> one_k_words) = "0"b then	/* No data */
	     call ioa_ ("No data for FNP ^a in ^a", tag, env.ename);

	if fnp ^= env.fnp then do;			/* Something changing */
	     call forget_fnp;
	     env.fnp = fnp;
	     env.corep = p;
	end;
	call setup_crashed_line;
	if env.tty_name ^= "" then call ioa_ ("^[Using line ^a^;^sNo TIB available.^]", env.tty_name);
	return;

/* Procedure to print name of current dump, image, fnp, etc */

what:	entry (arg_corep, arg_fnp, arg_cmd_infop, arg_expr_infop);

	call setup;

	if ^(env.fnp_sw | env.dump_sw | env.image_sw) then do;
	     call ioa_ ("Nothing");
	     return;
	end;

	call get_version;

	if env.fnp_sw then call ioa_ ("FNP ^a, version ^a", get_fnp_name_ (env.fnp), version);
	else if image_sw then call ioa_ ("Core image in ^a^[>^]^a, version ^a", env.dir, (env.dir ^= ">"), env.ename,
	     version);
	else if env.dump_sw then if ^env.fdump_sw then
		call ioa_ ("Dump in ^a^[>^]^a, version ^a", env.dir, (env.dir ^= ">"), env.ename, version);
	     else call ioa_ ("Fdump in ^a^[>^]^a (fnp ^a), version ^a", env.dir, (env.dir ^= ">"), env.ename,
		get_fnp_name_ (env.fnp), version);

	return;

/* Entry to implement the when command which prints interesting stuff about times */

when:	entry (arg_corep, arg_fnp, arg_cmd_infop, arg_expr_infop);

	call setup;
	call get_version;
	call fetch (crldt, 4, addr (bind_time), "0"b);
	if code ^= 0 then go to error_return;
	call fetch (crbdt, 4, addr (boot_time), "0"b);
	if code ^= 0 then go to error_return;
	call date_time_ (bind_time, time_string);
	call ioa_ ("MCS version ^a, bound on ^a", version, time_string);
	if boot_time ^= 0 then do;
	     call date_time_ (boot_time, time_string);
	     call ioa_ ("Booted on ^a", time_string);
	end;
	if env.fnp_sw then do;
	     up_time = max (0, clock () - boot_time);
	     call ioa_ ("FNP has been up for ^a", edit_interval (up_time));
	end;
	if env.dump_sw & env.dump_time ^= 0 then do;
	     up_time = max (0, env.dump_time - boot_time);
	     call ioa_ ("FNP up for ^a before crash", edit_interval (up_time));
	end;
	return;

/* Entry to select a specific fnp channel. It will switch FNP's to get the requested line if necessary */

line:	entry (arg_corep, arg_fnp, arg_cmd_infop, arg_expr_infop);

	call setup;

	if ^(fnp_sw | dump_sw) then do;
	     call ioa_ ("Only valid on running FNP, or a dump.");
	     go to error_return;
	end;

	call get_operand;
	if cmd_info.endline then do;			/* No operands, print current line */
	     if env.tty_name = "" then call ioa_ ("No line selected.");
	     else call ioa_ ("Line ^a. ^[TIB at ^o^]", env.tty_name, expr_info.tib_known, expr_info.tib_addr);
	     return;
	end;

	tty_name = operand;
	print_channel_name = "0"b;
	if operand = "-login" | operand = "-login_channel" then do;
	     call user_info_$terminal_data ((""), (""), tty_name, (0), (""));
	     print_channel_name = "1"b;
	end;
	else if operand = "-crash" then do;
	     if ^env.dump_sw then do;
		call ioa_ ("Not current using a dump.");
		go to error_return;
	     end;
	     call find_crashed_line ("0"b);
	     if tty_name = "" then go to error_return;
	     print_channel_name = "1"b;
	end;

	i = cv_oct_check_ (tty_name, code);		/* An octal line number is always for this FNP */
	if code = 0 then fnp = max (1, env.fnp);	/* If we know the FNP, that is */
	else call parse_tty_name_ (tty_name, fnp, ("0"b), (0), (0)); /* Check name, ignoring all but fnp result */
	if fnp < 0 then do;				/* Bad format name */
	     call ioa_ ("Illegal tty name: ^a", tty_name);
	     go to error_return;
	end;

	if (env.fnp > 0) & (env.fnp ^= fnp) then do;	/* If current FNP known, do some checking */
	     if env.fnp_sw then do;			/* Running live fnp's */
		if ^substr (env.fnps_configured, fnp, 1) then do;
		     call ioa_ ("^a is on FNP ^a which is not configured.", tty_name, get_fnp_name_ (fnp));
		     go to error_return;
		end;
		call ioa_ ("Switching to FNP ^a", get_fnp_name_ (fnp));
		call forget_fnp;
		env.fnp = fnp;
	     end;
	     else if env.fdump_sw then do;		/* Running fdump */
		p = addr (env.segp -> fdump.fnp_dump (fnp)); /* Find piece for new fnp */
		if unspec (p -> one_k_words) = "0"b then do;
		     call ioa_ ("^a is on FNP ^a; no data in ^a for FNP ^a",
			tty_name, get_fnp_name_ (fnp), env.ename, get_fnp_name_ (fnp));
		     go to error_return;
		end;
		call ioa_ ("Switching to FNP ^a", get_fnp_name_ (fnp));
		call forget_fnp;
		env.corep = p;
		env.fnp = fnp;
	     end;
	     else do;
		call ioa_ ("^a is on FNP ^a, dump is for FNP ^a", tty_name, get_fnp_name_ (fnp), get_fnp_name_ (env.fnp));
		go to error_return;
	     end;
	end;

	call setup_line_data ("0"b);
	if env.tty_name = "" then go to error_return;
	if print_channel_name then call ioa_ ("Using ^a", env.tty_name);
	return;

/* Procedure to check an argument for a valid FNP tag */

get_tag:	proc;

	     call get_operand_req ("Tag");
tag_join:
	     call parse_fnp_name_ (operand, fnp);
	     if fnp < 0 then do;
		call ioa_ ("Invalid FNP tag: ^a", operand);
		go to error_return;
	     end;
	     tag = operand;
	     return;

get_opt_tag:   entry;

	     call get_operand;
	     if cmd_info.endline then do;
		tag = "";
		return;
	     end;
	     go to tag_join;

	end get_tag;

/* Procedure to check an argument for a pathname */

get_seg:	proc;

	     call get_operand_req ("Pathname");

	     call expand_pathname_ (operand, dir, ename, code);
	     if code ^= 0 then do;
		call com_err_ (code, "", "^a", operand);
		go to error_return;
	     end;

	     call check_star_name_$entry (ename, code);
	     if code = 1 | code = 2 then do;		/* Allow starnames as shorthand */
		areap = get_system_free_area_ ();
		call hcs_$star_ (dir, ename, 3, areap, entry_cnt1, entryp1, namep1, code);
		if code ^= 0 then do;
		     call com_err_ (code, "", "^a^[>^]^a", dir, (dir ^= ">"), ename);
		     go to error_return;
		end;
		if entry_cnt1 > 1 then do;
		     call ioa_ ("^a matches multiple entries in ^a", ename, dir);
		     go to error_return;
		end;
		ename = names1 (entries1.nindex (1));	/* Use first name */
		free entries1;
		free names1;
		entryp1, namep1 = null ();
	     end;

	     call hcs_$initiate (dir, ename, "", 0, 0, segp, code);
	     if segp = null then do;
		call com_err_ (code, "", "^a^[>^]^a", dir, (dir ^= ">"), ename);
		go to error_return;
	     end;
	     return;

	end get_seg;

/* Be sure a required operand is present */

get_operand_req: proc (s);

dcl  s char (*);

	     call get_operand;
	     if ^cmd_info.endline then return;
	     call ioa_ ("^a missing.", s);
	     go to error_return;

	end get_operand_req;

get_operand: proc;

	     call db_fnp_reader_$get_operand (cmd_infop);
	     if cmd_info.error then go to error_return;

	     return;

	end get_operand;

/* Procedure for "forgetting" the current fnp, dump, etc., in preperation for a new one */

forget:	proc;

	     call forget_fnp;
	     env.dump_sw = "0"b;
	     env.fnp_sw = "0"b;
	     env.image_sw = "0"b;
	     env.fdump_sw = "0"b;
	     env.dump_time = 0;
	     if env.segp ^= null () then do;
		call hcs_$terminate_noname (env.segp, code);
		env.segp = null ();
	     end;

	     env.corep = null ();
	     env.fnp = -1;
	     return;

	end forget;

/* Forget data associated with the current FNP. This is used with last drastic environment changes, like when
   changing to a new fnp in an fdump */

forget_fnp: proc;

	     string (expr_info.flags) = "0"b;
	     env.tty_name = "";
	     call db_fnp_disp_cmd_$forget;		/* Forget next buffer address */
	     return;

	end forget_fnp;

/* Procedure to find the current dump in the dump list */

find_current: proc;

	     do dnx = 1 to list_size;
		dnp = list.dnp (dnx);
		if dn.ename = env.ename then return;
	     end;
	     call ioa_ ("Unable to find current dump: ^a", env.ename);
	     go to error_return;

	end find_current;

/* Procedure to convert a dump time back into a clock value */

set_dump_time: proc;

	     on conversion go to return_no_time;
	     call encode_clock_value_ (bin (dn.month), bin (dn.day), 1900 + bin (dn.year), bin (dn.hour),
		bin (dn.min), 0, 0, 0, "    ", env.dump_time, code);
	     if code ^= 0 then env.dump_time = 0;
	     return;
return_no_time:
	     env.dump_time = 0;
	     return;

	end set_dump_time;

/* Get the current version */

get_version: proc;

dcl  i fixed bin;
dcl  test_char bit (9);

	     call fetch (crver, 2, addr (version), "0"b);
	     if code ^= 0 then version = "?";
	     do i = 1 to length (version);
		test_char = unspec (substr (version, i, 1));
		if test_char < "040"b3 | test_char > "176"b3 then version = "?";
	     end;
	     return;

	end get_version;

/* Procedure to edit a time interval */

edit_interval: proc (arg_interval) returns (char (64) var);

dcl  arg_interval fixed bin (71);

dcl  interval fixed bin (71);
dcl (hours, minutes) fixed bin;
dcl  work_string char (64) var;

	     interval = arg_interval + 30000000;
	     hours = divide (interval, 3600000000, 17, 0);
	     interval = interval - 3600000000 * hours;
	     minutes = divide (interval, 60000000, 17, 0);
	     call ioa_$rsnnl ("^[^d hour^[s^]^;^2s^]^[^[, ^]^d min^[s^]^;^3s^]^[seconds^]", work_string, (0),
		(hours ^= 0), hours, (hours ^= 1),
		(minutes ^= 0), (hours ^= 0), minutes, (minutes ^= 1),
		((hours = 0) & (minutes = 0)));
	     return (work_string);

	end edit_interval;

/* Procedure to get a list of dumps */

list_dumps: proc;

dcl  i fixed bin;

	     areap = get_system_free_area_ ();
	     call hcs_$star_ (env.dump_dir, fnp_dump_starname, 3, areap, entry_cnt1, entryp1, namep1, code);
						/* List normal fnp dumps */
	     if (code ^= 0) & (code ^= error_table_$nomatch) then go to list_dumps_error;
	     call hcs_$star_ (env.dump_dir, fdump_starname, 3, areap, entry_cnt2, entryp2, namep2, code);
						/* List fdumps */
	     if (code ^= 0) & (code ^= error_table_$nomatch) then go to list_dumps_error;

	     if (entry_cnt1 + entry_cnt2) = 0 then do;	/* None of either kind */
		call ioa_ ("No dumps in ^a", env.dump_dir);
		go to error_return;
	     end;

	     dntab_size = entry_cnt1 + entry_cnt2;	/* Number of dumps is regular count + fdumps */
	     allocate dntab in (system_area);
	     dnx = 0;
	     do i = 1 to entry_cnt1;			/* Make entries for regular dumps */
		dnx = dnx+1;
		dnp = addr (dntab.dne (dnx));
		dn.ename = names1 (entries1.nindex (i));
		dn.year = substr (dn.ename, 11, 2);
		dn.month = substr (dn.ename, 7, 2);
		dn.day = substr (dn.ename, 9, 2);
		dn.hour = substr (dn.ename, 14, 2);
		dn.min = substr (dn.ename, 16, 2);
		dn.fnp = substr (dn.ename, 5, 1);
		dn.fdump = "0"b;
	     end;

	     do i = 1 to entry_cnt2;			/* Scan each fdump */
		dnx = dnx+1;
		dnp = addr (dntab.dne (dnx));
		dn.ename = names2 (entries2.nindex (i));
		dn.year = substr (dn.ename, 5, 2);
		dn.month = substr (dn.ename, 1, 2);
		dn.day = substr (dn.ename, 3, 2);
		dn.hour = substr (dn.ename, 8, 2);
		dn.min = substr (dn.ename, 10, 2);
		dn.fnp = "";
		dn.fdump = "1"b;
	     end;

	     list_size = dnx;			/* Total dumps */
	     allocate list in (system_area);
	     do i = 1 to list_size;
		list.dnp (i) = addr (dntab.dne (i));
	     end;
	     call sort_items_$char (listp, length (string (dn.sort_key)));
	     return;

list_dumps_error:
	     call com_err_ (code, name, "^a", env.dump_dir);
	     go to error_return;

	end list_dumps;

error_return:
	cmd_info.flush = "1"b;
	call clean_up;
	return;

/* Pick up initial arguments */

setup:	proc;

	     cmd_infop = arg_cmd_infop;
	     expr_infop = arg_expr_infop;
	     envp = cmd_info.envp;
	     return;

	end setup;

setup_constants: proc;

	     if constants_setup then return;
	     crver = db_fnp_sym_util_$get_value (".crver");
	     crldt = db_fnp_sym_util_$get_value (".crldt");
	     crbdt = db_fnp_sym_util_$get_value (".crbdt");
	     crreg = db_fnp_sym_util_$get_value (".crreg");
	     crpte = db_fnp_sym_util_$get_value (".crpte");
	     t_line = db_fnp_sym_util_$get_value ("t.line");
	     constants_setup = "1"b;
	     return;

	end setup_constants;

/* Procedure to scan the config deck for fnp cards */

find_configured_fnps: proc;

%include config_prph_fnp_card;
declare fnpx fixed bin;

	     env.fnps_configured = "0"b;

	     do fnpx = 1 to 8;
		prph_fnp_cardp = null ();
		call config_$find_2 ("prph", "fnp" || get_fnp_name_ (fnpx), prph_fnp_cardp);
		if prph_fnp_cardp ^= null ()
		then substr (env.fnps_configured, fnpx, 1) = "1"b;
	     end;
	     return;

	end find_configured_fnps;

/* Procedure to select the first configured FNP */

find_first_configured_fnp: proc (quiet_sw);

dcl  quiet_sw bit (1);

dcl (i, j) fixed bin;

	     fnp = -1;
	     j = 0;
	     do i = 1 to length (env.fnps_configured);
		if substr (env.fnps_configured, i, 1) then do;
		     if fnp = -1 then fnp = i;
		     j = j + 1;
		end;
	     end;
	     if j = 0 then do;
		call ioa_ ("No FNP's configured.");
		return;
	     end;
	     tag = get_fnp_name_ (fnp);
	     if j > 1 then if ^quiet_sw | (fnp ^= 1) then
		     call ioa_ ("Using FNP ^a", tag);
	     return;

	end find_first_configured_fnp;

/* Called for a dump to find the line casuing the crash */

setup_crashed_line: proc;

	     call find_crashed_line ("1"b);
	     if tty_name ^= "" then call setup_line_data ("1"b);
	     return;

	end setup_crashed_line;

find_crashed_line: proc (quiet_sw);

dcl  quiet_sw bit (1);
dcl (i, base) fixed bin;

	     tty_name = "";
	     call fetch (crreg, 1, addr (mem_word), quiet_sw); /* Get address of saved registers */
	     if code ^= 0 then return;
	     i = bin (mem_word (1));
	     call fetch (i, 1, addr (mem_word), "1"b);	/* Read contents of ic */
	     if code ^= 0 then do;
		if ^quiet_sw then call ioa_ ("Address of saved registers invalid (.crreg = ^o)", i);
		return;
	     end;
	     if mem_word (1) = "0"b then do;
		if ^quiet_sw then call ioa_ ("No fault occured.");
		return;
	     end;
	     call fetch (i + 4, 1, addr (mem_word), quiet_sw); /* Read value of x1 */
	     if code ^= 0 then return;
	     if mem_word (1) & "700001"b3 then do;	/* Known bad bits for a tib address */
bad_x1:		if ^quiet_sw then call ioa_ ("x1 does not point at a tib");
		return;
	     end;
	     i = bin (mem_word (1));
	     call fetch (crpte, 1, addr (mem_word), quiet_sw); /* See if paging being used */
	     if code ^= 0 then return;
	     if mem_word (1) ^= "0"b then do;		/* There is page table */
		call fetch (bin (mem_word (1)), 1, addr (mem_word), quiet_sw); /* Get it */
		if code ^= 0 then return;
		ptwp = addr (mem_word (1));
		if ptw.active then do;
		     base = 32768 - 256 * (ptw.count + 1); /* Start of window */
		     if i >= base then		/* X1 points into window */
			i = (i - base) + 256 * ptw.base_address;
		end;
	     end;
	     call fetch (i + t_line, 1, addr (mem_word), quiet_sw);
	     if code ^= 0 then go to bad_x1;
	     if (mem_word (1) = "0"b) | (mem_word (1) & "776000"b3) then go to bad_x1;
	     call ioa_$rsnnl ("^o", tty_name, (0), bin (mem_word (1)));
	     return;

	end find_crashed_line;

setup_line_data: proc (quiet_sw);

dcl  quiet_sw bit (1);

	     env.tty_name = "";			/* Forget current name */
	     string (expr_info.flags) = "0"b;
	     call db_fnp_util_$get_chan_addrs (env.corep, env.fnp, tty_name, expr_infop, code);
	     if code = error_table_$bad_arg then do;
		if ^quiet_sw then call ioa_ ("^a not configured.", tty_name);
		return;
	     end;
	     else if code ^= 0 then do;
		if ^quiet_sw then call com_err_ (code, "", "Getting data on ^a", tty_name);
		return;
	     end;

	     call db_fnp_util_$cv_chan_name (env.corep, env.fnp, tty_name, ename, (0), code); /* Get canonical tty name */
	     if code = 0 then env.tty_name = ename;
	     else env.tty_name = tty_name;
	     return;

	end setup_line_data;

fetch:	proc (a, l, p, q);

dcl  a fixed bin;					/* Address to read */
dcl  l fixed bin;					/* Length to read */
dcl  p ptr;					/* Where to put it */
dcl  q bit (1);					/* Quiet switch */

	     call db_fnp_memory_$fetch (env.corep, env.fnp, a, l, p, code);
	     if code ^= 0 then
		if ^q then
		     if l = 1 then call com_err_ (code, name, "Unable to read fnp location ^o.", a);
		     else call com_err_ (code, name, "Unable to read fnp locations ^o thru ^o", a, a + l - 1);

	     return;

	end fetch;

/* Cleanup handler */

clean_up:	proc;

	     if listp ^= null then free list;
	     if dntabp ^= null then free dntab;
	     if namep1 ^= null then free names1;
	     if namep2 ^= null then free names2;
	     if entryp1 ^= null then free entries1;
	     if entryp2 ^= null then free entries2;
	     return;

	end clean_up;




%include debug_fnp_data;

     end db_fnp_env_;
