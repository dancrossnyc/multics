/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* Procedure for displaying contents of fnp memory in various formats */

/* Written February 1977 by Larry Johnson */

db_fnp_display_: proc (arg_corep, arg_fnp, arg_fnp_addr, arg_fnp_len, arg_data_ptr, arg_type, arg_code);

/* Arguments */

dcl  arg_corep ptr;					/* Pointer to core image */
dcl  arg_fnp fixed bin;				/* Number of running fnp */
dcl  arg_fnp_addr fixed bin;				/* Fnp addr being displayed */
dcl  arg_fnp_len fixed bin;				/* The number of wrds */
dcl  arg_data_ptr ptr;				/* Multics pointer to the data */
dcl  arg_type fixed bin;				/* The editing mode to perform */
dcl  arg_code fixed bin (35);

/* Automatic */

dcl  fnp_addr fixed bin;
dcl  fnp_len fixed bin;
dcl  data_ptr ptr;
dcl  type fixed bin;
dcl  code fixed bin (35);
dcl  bcode bit (36) aligned based (addr (code));
dcl  part_len fixed bin;				/* Length of memory being displayed on 1 line */
dcl  part_ptr ptr;					/* A pointer to it */
dcl  words_per_line fixed bin;			/* The number of words on a line */
dcl  next_word fixed bin;
dcl  words_left fixed bin;
dcl  char_str char (64) var;
dcl  dt_val fixed bin (71);				/* For date_time_ */
dcl  dt_str char (24);
dcl  ebcdic_sw bit (1) init ("0"b);
dcl  last_part bit (144);				/* Contents of last line, to supress dups */
dcl  suppress bit (1);				/* Last line was not printed */
dcl  suppress_addr fixed bin;				/* Addr of last line not printed */
dcl  check_dup bit (1);				/* Try duplicate line suppression */

dcl  fnp_mem (fnp_len) bit (18) unal based (data_ptr);	/* All of memory being displayed */
dcl  part_mem (part_len) bit (18) unal based (part_ptr);	/* What will fit on a line */
dcl  ch_part_mem char (2*part_len) based (part_ptr);

/* External */

dcl  ioa_ entry options (variable);
dcl  ioa_$nnl entry options (variable);
dcl  db_fnp_util_$edit_module_addr entry (ptr, fixed bin, fixed bin, char (*) var, fixed bin (35));
dcl  date_time_ entry (fixed bin (71), char (*));
dcl  db_fnp_opblock_util_$display entry (ptr, fixed bin, fixed bin, fixed bin, ptr, fixed bin (35));
dcl  db_fnp_edit_inst_ entry (ptr, fixed bin, fixed bin, bit (18), char (*) var);
dcl  ebcdic_to_ascii_ entry (char (*), char (*));

dcl (addr, bin, length, min, substr, unspec) builtin;


/* Initialization */

	fnp_addr = arg_fnp_addr;			/* Cpy args */
	fnp_len = arg_fnp_len;
	data_ptr = arg_data_ptr;
	type = arg_type;

	if type = type_op then do;			/* Dont handle this one here */
	     call db_fnp_opblock_util_$display (arg_corep, arg_fnp, fnp_addr, fnp_len, data_ptr, arg_code);
	     return;
	end;

	if type = type_clock then words_per_line = min (4, fnp_len);
	else if type = type_addr then words_per_line = 1;
	else if type = type_inst then words_per_line = 1;
	else if type = type_dec then words_per_line = 1;
	else if type = type_bit then words_per_line = 1;
	else words_per_line = min (8, fnp_len);

	check_dup = (words_per_line = 8);
	suppress = "0"b;

	next_word = 1;				/* First word to display */
	words_left = fnp_len;			/* Words yet to do */

	do while (words_left > 0);			/* Loop until done */
	     part_len = min (words_per_line, words_left); /* Number of words on this line */
	     part_ptr = addr (fnp_mem (next_word));
	     if check_dup & (next_word > 1) then do;	/* Check for duplicate lines */
		if unspec (part_mem) = last_part then do; /* Same as previous */
		     suppress = "1"b;
		     suppress_addr = fnp_addr;	/* Last line not printed */
		     go to next_line;
		end;
		else if suppress then do;		/* End of duplicate range */
		     call ioa_ ("^5w  =", suppress_addr);
		     suppress = "0"b;
		end;
	     end;
	     if type = type_inst then do;		/* Special form for instruction */
		call db_fnp_util_$edit_module_addr (arg_corep, arg_fnp, fnp_addr, char_str, code);
		if code ^= 0 then char_str = "";
		call ioa_$nnl ("^5w ^13a ^( ^.3b^)", fnp_addr, char_str, part_mem);
	     end;
	     else call ioa_$nnl ("^5w ^( ^.3b^)", fnp_addr, part_mem);
	     go to display_edit (type);		/* Finish up, based on type */

display_edit (0):					/* Octal */
	     call ioa_ ("");
	     go to next_line;

display_edit (1):					/* Character */
	     call setup_chars;
	     call ioa_ ("^v(^7x^) ^a", words_per_line - part_len, char_str);
	     go to next_line;

display_edit (2):					/* Address */
	     call db_fnp_util_$edit_module_addr (arg_corep, arg_fnp, bin (part_mem (1)), char_str, code);
	     call ioa_ ("^[  ^a^]", (code = 0), char_str);
	     go to next_line;

display_edit (3):					/* Clock reading */
	     unspec (dt_val) = unspec (part_mem);
	     call date_time_ (dt_val, dt_str);
	     call ioa_ ("  ^a", dt_str);
	     go to next_line;

display_edit (4):					/* Machine instruction */
	     call db_fnp_edit_inst_ (arg_corep, arg_fnp, fnp_addr, part_mem (1), char_str);
	     call ioa_ ("  ^a", char_str);
	     go to next_line;

display_edit (6):					/* Decimal */
	     bcode = "0"b;
	     substr (bcode, 19, 18) = part_mem (1);
	     if substr (part_mem (1), 1, 1) then substr (bcode, 1, 18) = "777777"b3;
	     call ioa_ ("  ^d.", code);
	     go to next_line;

display_edit (7):
	     call ioa_ ("  ^b", part_mem (1));
	     go to next_line;

display_edit (8):					/* Ebcdic */
	     ebcdic_sw = "1"b;
	     go to display_edit (1);

next_line:					/* Advance indexes for next line */
	     if check_dup then last_part = unspec (part_mem); /* Save to compare to next line */
	     fnp_addr = fnp_addr + part_len;
	     next_word = next_word + part_len;
	     words_left = words_left - part_len;
	end;

	if suppress then call ioa_ ("^5w  =", suppress_addr); /* Last line was not printed */

	arg_code = 0;
	return;


/* Procedure to stup for charactr fisplay. non-graphics are replaced with dots */

setup_chars: proc;

dcl  i fixed bin;
dcl (ebc_in, ebc_out) char (16);

	     if ebcdic_sw then do;			/* Must convert to ascii */
		unspec (ebc_in) = "0"b;
		substr (ebc_in, 1, length (ch_part_mem)) = ch_part_mem;
		do i = 1 to length (ch_part_mem);
		     unspec (substr (ebc_in, i, 1)) = unspec (substr (ebc_in, i, 1)) & "377"b3;
		end;
		call ebcdic_to_ascii_ (ebc_in, ebc_out);
		char_str = substr (ebc_out, 1, length (ch_part_mem));
	     end;
	     else char_str = ch_part_mem;
	     do i = 1 to length (char_str);
		unspec (substr (char_str, i, 1)) = unspec (substr (char_str, i, 1)) & "177"b3;
		if unspec (substr (char_str, i, 1)) < "040"b3 | unspec (substr (char_str, i, 1)) > "176"b3 then
		     substr (char_str, i, 1) = ".";
	     end;
	     return;

	end setup_chars;


%include debug_fnp_data;

     end db_fnp_display_;
