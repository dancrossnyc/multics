/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* DB_FNP_EVAL_ - Procedure to evaluate expressions intended to be fnp addresses */

/* Written February 1977 by Larry Johnson */
/* Modified January 1977 by Larry Johnson to accept 'string' as machine instruction format */
/* Modified January 1981 by Robert Coren to evaluate symbols in channel metering areas */

db_fnp_eval_: proc (arg_corep, arg_fnp, arg_expr, arg_expr_infop, arg_caller, arg_result, arg_code);

/* Parameters */

dcl  arg_corep ptr;					/* Pointer to segment containg core image */
dcl  arg_fnp fixed bin;				/* Number of running fnp */
dcl  arg_expr char (*);				/* The expression to evaluate */
dcl  arg_expr_infop ptr;				/* Optional pointer to supplementary information */
dcl  arg_caller char (*);				/* Caller name to go in error messages */
dcl  arg_result fixed bin;				/* The answer */
dcl  arg_code fixed bin (35);

/* Automatic */

dcl  corep ptr;
dcl  fnp fixed bin;
dcl  result fixed bin;
dcl  code fixed bin (35);
dcl  ntoken fixed bin;				/* Number of tokens */
dcl  exprp ptr;					/* Pointer to unparsed part of expression */
dcl  exprl fixed bin;				/* Length of unparsed part */
dcl  expr char (exprl) based (exprp);			/* The unparsed part of expression */
dcl  tstart fixed bin;				/* Starting token in sub-expression */
dcl  tend fixed bin;				/* Last token in sub-expression */
dcl  tcur fixed bin;				/* Current token */
dcl  n_ind fixed bin;				/* Count of indirects in expression */
dcl  n_mult fixed bin;				/* Count of multiplies and divides */
dcl  n_add fixed bin;				/* Count of adds and subtracts */

dcl 1 auto_expr_info like expr_info;
dcl 1 token_list aligned,
    2 entry (255) unal,
      3 token like token;


/* Definition of a token */

dcl  tokenp ptr;

dcl 1 token unaligned based (tokenp),
    2 prev fixed bin (8),				/* Backwards pointer */
    2 next fixed bin (8),				/* Forwards pointer */
    2 type fixed bin (8),				/* Kind of token */
    2 sub fixed bin (8),				/* Sub-type, for some tokens */
    2 val fixed bin (35);

/* Values for token.type */

dcl (start_token init (0),				/* Start of expression */
     leftp_token init (1),				/* Left parenthesis */
     rightp_token init (2),				/* Right parenthesis */
     mult_token init (3),				/* Multiply (sub=1), or divide (sub=2) */
     add_token init (4),				/* Add (sub=1), or subtract (sub=2) */
     ind_token init (5),				/* Indirect thru fnp word */
     sym_token init (6),				/* Symbol or constant */
     end_token init (7))				/* End of expression */
     fixed bin int static options (constant);

/* External stuff */

dcl  ioa_ entry options (variable);
dcl  ioa_$general_rs entry (ptr, fixed bin, fixed bin, char (*), fixed bin, bit (1) aligned, bit (1) aligned);
dcl  com_err_ entry options (variable);
dcl  db_fnp_memory_$fetch entry (ptr, fixed bin, fixed bin, fixed bin, ptr, fixed bin (35));
dcl  cu_$arg_list_ptr entry (ptr);
dcl  cv_oct_check_ entry (char (*), fixed bin (35)) returns (fixed bin (35));
dcl  cv_dec_check_ entry (char (*), fixed bin (35)) returns (fixed bin (35));
dcl  db_fnp_sym_util_$lookup entry (char (*), ptr);
dcl  db_fnp_sym_util_$lookup_user entry (ptr, char (*), ptr);
dcl  db_fnp_opblock_util_$lookup entry (char (*), bit (18), fixed bin (35));
dcl  db_fnp_util_$lookup_module entry (ptr, fixed bin, char (*), fixed bin, fixed bin (35));
dcl  db_fnp_edit_inst_$assemble entry (ptr, fixed bin, char (*), ptr, bit (18), fixed bin (35));

dcl  error_table_$bad_arg ext fixed bin (35);

dcl (addr, divide, hbound, index, length, null, search, string, substr, unspec, verify) builtin;

/* Initialization */

	corep = arg_corep;
	fnp = arg_fnp;
	exprp = addr (arg_expr);
	exprl = length (arg_expr);
	expr_infop = arg_expr_infop;
	if expr_infop = null then do;			/* If no structure, setup dummy */
	     expr_infop = addr (auto_expr_info);
	     string (expr_info.flags) = "0"b;
	     expr_info.user_tablep = null;
	end;
	expr_info.type = type_oct;
	expr_info.len = 1;


/* Now evaluate the expression */

	code = 0;

	if substr (expr, 1, 1) = "'" then do;		/* Special machine instruction format */
	     call eval_inst;
	     go to eval_return;
	end;

	call parse_expr;

	call eval_expr;

eval_return:
	arg_result = result;
	arg_code = 0;
	return;

error_return:					/* If error */
	arg_result = 0;
	arg_code = code;
	return;

/* Procedure to parse the expression */

parse_expr: proc;

dcl  nparen fixed bin;				/* For paren level counting */
dcl  i fixed bin;

	     ntoken = 0;
	     call new_token (start_token);		/* First, start of expr token */

	     nparen = 0;



	     do while (exprl > 0);			/* Loop until end */

		i = index ("()*/+|-,", substr (expr, 1, 1)); /* Check for special character */
		if i = 0 then do;			/* Must be symbol */
		     if sym_or_rightp_or_ind () then go to bad_char;
		     call parse_sym;
		     go to next_token;
		end;
		else go to parse_op (i);		/* Branch, depending on character */

parse_op (1):					/* Left paren */
		if sym_or_rightp_or_ind () then go to bad_char;
		call new_token (leftp_token);
		nparen = nparen + 1;
		call adv (1);
		go to next_token;

parse_op (2):					/* Right paren */
		if token.type = start_token | mult_or_add () then go to bad_char;
		if nparen ^> 0 then do;
		     if exprl = length (arg_expr) then go to bad_char;
		     else call err ("Too many "")"".");
		end;
		call new_token (rightp_token);
		nparen = nparen - 1;
		call adv (1);
		go to next_token;

parse_op (3):					/* "*" - may be multiply or reference to loc counter */
		if sym_or_rightp_or_ind () then do;	/* Multiply */
		     call new_token (mult_token);
		     token.sub = 1;
		end;
		else do;				/* Reference to location counter */
		     if ^expr_info.star_known then call err ("Value of ""*"" is not known.");;
		     call new_token (sym_token);
		     token.val = expr_info.star_addr;
		end;
		call adv (1);
		go to next_token;

parse_op (4):					/* Divide */
		if start_or_leftp () | mult_or_add () then go to bad_char;
		call new_token (mult_token);
		token.sub = 2;
		call adv (1);
		go to next_token;

parse_op (5):					/* Add */
parse_op (6):					/* Add, alternate form ("|") */
parse_op (7):					/* Subtract */
		if start_or_leftp () then call new_token (sym_token); /* Unary, treat as 0+ or 0- */
		else if mult_or_add () then go to bad_char;
		call new_token (add_token);
		if substr (expr, 1, 1) = "-" then token.sub = 2;
		else token.sub = 1;
		call adv (1);
		go to next_token;

parse_op (8):					/* Comma, must be start of ",*" */
		if (exprl < 2) | ((exprl >= 2) & substr (expr, 2, 1) ^= "*") then
		     call err ("Missing ""*"" after "","".");
		if start_or_leftp () | mult_or_add () then go to bad_char;
		call new_token (ind_token);
		call adv (2);
		go to next_token;

next_token:
	     end;

	     if nparen ^= 0 then call err ("Parens do not balance."); /* Must balance in end */

	     if mult_or_add () then call err ("Expression ends badly.");

	     call new_token (end_token);
	     return;

	end parse_expr;

/* Procedure to parse a constant or a symbol name */

parse_sym: proc;

dcl  val fixed bin (35);
dcl  bval bit (36) aligned based (addr (val));
dcl (i, j) fixed bin;
dcl  dec_sw bit (1) init ("0"b);
dcl  opval bit (18);
dcl  tib_meter fixed bin;
dcl  tib_page_base fixed bin;
dcl  meter_orig fixed bin (18) unsigned unaligned;

	     i = verify (expr, "0123456789");		/* Try constant first */
	     if i ^= 1 then do;			/* It is a constant */
		if i = 0 then i = length (expr);	/* Rest of expr is a constant */
		else i = i - 1;
		if i < length (expr) then if substr (expr, i+1, 1) = "." then dec_sw = "1"b; /* Decimal constant */
		if dec_sw then do;
		     val = cv_dec_check_ (substr (expr, 1, i), code);
		     if code ^= 0 then do;
			code = 0;
			call err ("Invalid decimal integer: ""^a"".", substr (expr, 1, i));
		     end;
		     if val < -262144 | val > 262143 then
			call err ("Decimal integer not in range -262144 to 262143: ^a", substr (expr, 1, i));
		     call adv (i+1);
		end;
		else do;				/* Octal number */
		     val = cv_oct_check_ (substr (expr, 1, i), code);
		     if code ^= 0 then do;
			code = 0;
			call err ("Invalid octal integer: ""^a"".", substr (expr, 1, i));
		     end;
		     if substr (bval, 1, 18) ^= "0"b & substr (bval, 1, 18) ^= "777777"b3 then
			call err ("Octal integer not in range -400000 to 377777: ^a", substr (expr, 1, i));
		     call adv (i);
		end;
		if val > 0 then if substr (bval, 19, 1) then /* Really negative */
			substr (bval, 1, 18) = "777777"b3;
		call new_token (sym_token);		/* Set up token for symbol */
		token.val = val;
		return;
	     end;

/* Symbol must be a name */

	     i = search (expr, "()*/+|-,");		/* Look for end */
	     if i = 1 then go to bad_char;
	     if i = 0 then i = length (expr);
	     else i = i - 1;

	     call db_fnp_util_$lookup_module (corep, fnp, substr (expr, 1, i), j, code);
	     if code = 0 then do;
		call new_token (sym_token);
		token.val = j;
		call adv (i);
		return;
	     end;

	     call db_fnp_opblock_util_$lookup (substr (expr, 1, i), opval, code);
	     if code = 0 then do;
		call new_token (sym_token);
		unspec (token.val) = "777777"b3 || opval;
		call adv (i);
		return;
	     end;

	     call db_fnp_edit_inst_$assemble (corep, fnp, substr (expr, 1, i), expr_infop, opval, code);
						/* May symbol is a machine opcode mneumonic */
	     if code = 0 then do;
		call new_token (sym_token);
		if substr (opval, 1, 1) then unspec (token.val) = "777777"b3 || opval;
		else unspec (token.val) = "000000"b3 || opval;
		call adv (i);
		return;
	     end;

	     call db_fnp_sym_util_$lookup_user (expr_info.user_tablep, substr (expr, 1, i), symp);
	     if symp = null then do;
		call db_fnp_sym_util_$lookup (substr (expr, 1, i), symp);
		if symp = null then do;
		     code = 0;
		     call err ("Invalid symbol: ""^a"".", substr (expr, 1, i));
		end;
	     end;

	     code = 0;
	     call new_token (sym_token);
	     token.val = sym.value;
	     if sym.reloc = reloc_tib then		/* Must add in tib */
		if ^expr_info.tib_known then call err ("Illegal use of ""^a"". Address of TIB not known.",
		     substr (expr, 1, i));
		else token.val = token.val + expr_info.tib_addr;
	     else if sym.reloc = reloc_hwcm then
		if ^expr_info.hwcm_known then call err ("Illegal use of ""^a"". Address of HWCM not known.",
		     substr (expr, 1, i));
		else token.val = token.val + expr_info.hwcm_addr;
	     else if sym.reloc = reloc_sfcm then
		if ^expr_info.sfcm_known then call err ("Illegal use of ""^a"". Address of SFCM not known.",
		     substr (expr, 1, i));
		else token.val = token.val + expr_info.sfcm_addr;
	     else if sym.reloc = reloc_meters then	/* add in value of t.metr */
		if ^expr_info.tib_known then call err ("Illegal use of ""^a"". Address of TIB not known.",
		     substr (expr, 1, i));
		else do;
		     call db_fnp_eval_ (corep, fnp, "t.metr", expr_infop, arg_caller, tib_meter, code); /* get value of t.metr */
		     if code ^= 0
		     then do;
			arg_code = code;
			return;
		     end;

		     tib_page_base = 256*(divide (expr_info.tib_addr, 256, 17, 0)); /* allow for possible virtual address */
		     tib_meter = tib_page_base + mod (tib_meter,256);

		     call db_fnp_memory_$fetch (corep, fnp, tib_meter, 1, addr (meter_orig), code);
		     if code ^= 0
		     then do;
			arg_code = code;
			return;
		     end;

		     meter_orig = tib_page_base + mod (meter_orig, 256); /* make sure we have abs. address */
		     token.val = token.val + meter_orig;
		end;

	     expr_info.type = sym.type;
	     expr_info.len = sym.len;
	     call adv (i);
	     return;

	end parse_sym;

/* Procedures which to some comon tests on the previous token */

mult_or_add: proc returns (bit (1));

	     return (token.type = mult_token | token.type = add_token);

	end mult_or_add;

start_or_leftp: proc returns (bit (1));

	     return (token.type = start_token | token.type = leftp_token);

	end start_or_leftp;

sym_or_rightp_or_ind: proc returns (bit (1));

	     return (token.type = sym_token | token.type = rightp_token | token.type = ind_token);

	end sym_or_rightp_or_ind;

/* Procedure to create a new token and trhread it in */

new_token: proc (type);

dcl  type fixed bin;				/* Type of new token */

	     if ntoken = hbound (token_list.entry, 1) then call err ("Expression too long.");
	     if ntoken > 0 then token.next = ntoken + 1;	/* Set pointer in prev token */
	     ntoken = ntoken + 1;
	     tokenp = addr (token_list.entry (ntoken));
	     token.prev = ntoken - 1;
	     token.next = 0;
	     token.type = type;
	     token.sub = 0;
	     token.val = 0;
	     return;

	end new_token;

/* Procedure to advance pointer in expression */

adv:	proc (n);

dcl  n fixed bin;					/* Amount to move */

	     exprp = substraddr (expr, n+1);		/* Adjust pointer */
	     exprl = exprl - n;			/* Adjust length */
	     return;

	end adv;

/* Procedure to evaluate the expression by scanning the list of tokens */
/* The procedure is to find the inner most expression, evaluate it, and
   continue. At the end, there should only be 3 tokens left: the start, the end,
   and one symbol token containing the final value */

eval_expr: proc;

	     do while (ntoken > 3);
		call find_sub_expr;			/* Find some inner expression to work on */
		call eval_sub_expr;			/* And reduce it to a value */
	     end;

	     tokenp = addr (token_list.entry (1));	/* Pointer to start token */
	     tokenp = addr (token_list.entry (token.next)); /* Second token, containing the value */
	     result = token.val;			/* Get the answer */
	     return;

	end eval_expr;


/* Procedure to locate an inner expression to evaluate. This will be either
   a part of the expression delimited by parens, or, if no parens left, the
   entire expression. */
/* The following variables are set for future use:
   tstart - the first token in the expression found
   tend - the last
   n_ind - the number of indirection tokens between tstart and tend
   n_mult - likewise for mult tokens
   n_add - likewise for add tokens */

find_sub_expr: proc;

	     n_ind, n_mult, n_add = 0;
	     tstart, tcur = 1;
	     tokenp = addr (token_list.entry (tstart));

	     do while ((token.type ^= rightp_token) & (token.type ^= end_token));
		if token.type = leftp_token then do;
		     tstart = tcur;			/* Maybe expression will start here */
		     n_ind, n_mult, n_add = 0;	/* Must reset counters for inner level */
		end;
		else if token.type = ind_token then n_ind = n_ind + 1;
		else if token.type = mult_token then n_mult = n_mult + 1;
		else if token.type = add_token then n_add = n_add + 1;
		tcur = token.next;			/* On to next one */
		tokenp = addr (token_list.entry (tcur));
	     end;
	     tend = tcur;

	end find_sub_expr;

/* Procedure to evaluate sub-expression once it has been isolated. */
/* The sub-expression is repeatedly scanned for mult tokens, add tokens, and
   ind tokens, in that order.  Repeated scans are necessary because
   indirect ops must be done before mult or add ops after them, and vice versa */

eval_sub_expr: proc;

	     do while ((n_ind + n_mult + n_add) > 0);
		if n_mult > 0 then call eval_op (mult_token, n_mult);
		if n_add > 0 then call eval_op (add_token, n_add);
		if n_ind > 0 then call eval_ind;
	     end;

	     call del_token (tstart);			/* Delete parens one expression is evaluated */
	     call del_token (tend);
	     return;

	end eval_sub_expr;

/* This procedure scans looking for either mult tokens or add tokens to be
   evaluated. As many are evaluated as possible. The scan stops with either a
   an ind token, or exhausting the count of tokens being handled. */

eval_op:	proc (token_type, token_cnt);

dcl  token_type fixed bin;				/* The kind of token being evaluated, mult or add */
dcl  token_cnt fixed bin;				/* Number still unevaluated in sub-expression */

	     tcur = tstart;
	     tokenp = addr (token_list.entry (tcur));
	     do while ((token.type ^= ind_token) & (token_cnt > 0));
		if token.type = token_type then do;	/* Got one */
		     call compute_op;		/* Go do the arithmetic */
		     token_cnt = token_cnt - 1;
		end;
		tcur = token.next;
		tokenp = addr (token_list.entry (tcur));
	     end;
	     return;				/* Every thing possible is done */

	end eval_op;

/* Procedure called to evalue a mult or add token. Once the arithmetic is done,
   the value is stored in the first sym token. the operator token and the second
   symbol token are deleted. This procedure is called with tcur as the operator
   token being evaluated */

compute_op: proc;

dcl (del1, del2) fixed bin;				/* The two tokens to be deleted */
dcl (val1, val2) fixed bin (35);			/* Values of the two symbols */
dcl  p ptr;

	     del1 = tcur;				/* The operator token will be deleted */
	     del2 = token.next;			/* As well as the second operand */
	     p = addr (token_list.entry (token.next));	/* Pointter to second symbol token */
	     val2 = p -> token.val;
	     p = addr (token_list.entry (token.prev));	/* Pointer to the first symbol */
	     val1 = p -> token.val;
	     if token.type = add_token then do;		/* Add or subtract */
		if token.sub = 1 then val1 = val1 + val2;
		else val1 = val1 - val2;
	     end;
	     else do;				/* Multiply or divide */
		if token.sub = 1 then val1 = val1 * val2;
		else do;
		     if val2 = 0 then call err ("Division by zero.");
		     else val1 = divide (val1, val2, 35, 0);
		end;
	     end;

	     tcur = token.prev;			/* Make first operand the current token */
	     tokenp = addr (token_list.entry (tcur));
	     token.val = val1;			/* Save answer */
	     expr_info.type = type_oct;
	     expr_info.len = 1;
	     call del_token (del1);			/* Delete operator */
	     call del_token (del2);			/* And the sedond operand */
	     return;

	end compute_op;

/* Procedure to scan for and evalute indirections. The will do as many
   indirections as specified, but will not scan past an add or mult token */

eval_ind:	proc;

dcl  bitval bit (36);
dcl 1 word_buf aligned,
    2 val bit (18) unal,
    2 pad bit (18) unal;

	     tcur = tstart;
	     tokenp = addr (token_list.entry (tcur));
	     do while (^mult_or_add () & (n_ind > 0));
		if token.type = ind_token then do;	/* Found one */
		     tcur = token.prev;		/* Back up to look at token with address */
		     tokenp = addr (token_list.entry (tcur));
		     call db_fnp_memory_$fetch (corep, fnp, (token.val), 1, addr (word_buf), code);
		     if code ^= 0 then call err ("Unable to read FNP memory location ^o to do indrection.", token.val);
		     substr (bitval, 19) = word_buf.val; /* Put in right half of word */
		     if substr (word_buf.val, 1, 1) = "0"b then substr (bitval, 1, 18) = "0"b; /* Propagate sign */
		     else substr (bitval, 1, 18) = "777777"b3;
		     unspec (token.val) = bitval;
		     n_ind = n_ind - 1;
		     expr_info.type = type_oct;
		     expr_info.len = 1;
		     call del_token ((token.next));	/* Delete ind token */
		end;
		tcur = token.next;
		tokenp = addr (token_list.entry (tcur));
	     end;

	end eval_ind;

/* Procedure to delete a token by untreading it from the list */

del_token: proc (n);

dcl  n fixed bin;					/* The token to go */
dcl (next, prev) fixed bin;
dcl  p ptr;

	     p = addr (token_list.entry (n));
	     prev = p -> token.prev;
	     next = p -> token.next;
	     if (prev = 0) | (next = 0) then return;	/* Ndver delete start or end */

	     p = addr (token_list.entry (prev));
	     p -> token.next = next;
	     p = addr (token_list.entry (next));
	     p -> token.prev = prev;
	     ntoken = ntoken - 1;
	     return;

	end del_token;

/* Handle an expression in single-quuotes (') as a machine instruction */

eval_inst: proc;

dcl (i, j) fixed bin;
dcl  inst bit (18);
dcl  fb35 fixed bin (35);

	     i = 1;				/* Starting index to assemble */
	     j = length (expr);			/* Length to assemble */
	     if substr (expr, 1, 1) = "'" then do;	/* Strip leading quote */
		i = 2;
		j = j-1;
	     end;
	     if substr (expr, length (expr), 1) = "'" then j = j-1; /* Strip trailing quote */
	     call db_fnp_edit_inst_$assemble (corep, fnp, substr (expr, i, j), expr_infop, inst, code);
	     if code ^= 0 then do;
		if arg_caller ^= "" then call com_err_ (0, arg_caller, "Invalid machine instruction: ^a");
		else call ioa_ ("Invalid machine instruction: ^a", expr);
		go to error_return;
	     end;
	     if substr (inst, 1, 1) then unspec (fb35) = "777777"b3 || inst; /* If negative number */
	     else fb35 = bin (inst);
	     result = fb35;
	     return;

	end eval_inst;

/* Error routines */

bad_char:
	if exprl < length (arg_expr) then call err ("""^a"" after ""^a"" is invalid.",
	     substr (expr, 1, 1), substr (arg_expr, 1, length (arg_expr) - exprl));
	else call err ("""^a"" at beginning is invalid.", substr (expr, 1, 1));


/* General error subroutine */

err:	proc options (variable);

dcl  s char (256);
dcl  p ptr;

	     call cu_$arg_list_ptr (p);
	     call ioa_$general_rs (p, 1, 2, s, (0), "1"b, "0"b);
	     if code ^= 0 | arg_caller ^= "" then
		call com_err_ (code, arg_caller, "Invalid expression: ""^a"". ^a", arg_expr, s);
	     else call ioa_ ("Invalid expression: ""^a"". ^a", arg_expr, s);
	     if code = 0 then code = error_table_$bad_arg;
	     go to error_return;

	end err;

/* Simulate substraddr builtin temporarily */

substraddr: proc (c, n) returns (ptr);

dcl  c char (*);
dcl  n fixed bin;
dcl  ca (n) char (1) unal based (addr (c));

	     return (addr (ca (n)));

	end substraddr;

%include debug_fnp_data;

     end db_fnp_eval_;
