/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* DB_FNP_UTIL_ - A series of entries that deal with internal tables in the FNP */

/* Written January 1977 by Larry Johnson */

/* format: style4,delnl,insnl,^ifthendo */
db_fnp_util_:
     proc;

/* Parameters */

dcl  arg_corep ptr;					/* Pointer to segment containing fnp memory */
dcl  arg_fnp fixed bin;				/* The fnp number, for real fnps */
dcl  arg_edited_addr char (*) var;			/* String built by edit_module_addr entry */
dcl  arg_fnp_addr fixed bin;				/* Address in fnp memory */
dcl  arg_code fixed bin (35);
dcl  arg_mod_name char (*);				/* Name of module to be looked up */
dcl  arg_tty_name char (*);				/* Name of tty channel */
dcl  arg_chan_name char (*);
dcl  arg_tty_line_no fixed bin;
dcl  arg_expr_infop ptr;
dcl  arg_modchp ptr;
dcl  arg_cmd_infop ptr;

/* Automatic */

dcl  fnp fixed bin;
dcl  code fixed bin (35);
dcl  (i, j, k) fixed bin;
dcl  mod_name char (8);
dcl  fnp_addr fixed bin;
dcl  corep ptr;					/* Pointer to fnp core image */
dcl  min_offset fixed bin;
dcl  addr_temp1 char (8) var;
dcl  addr_temp2 char (16) var;
dcl  word_buf bit (18) unal;
dcl  tty_fnp_no fixed bin;				/* Fnp to which a tty is connected */
dcl  tty_hsla_sw bit (1);				/* Set if tty is on hsla */
dcl  tty_la_no fixed bin;				/* The relative hsla or lsla number */
dcl  tty_chan_no fixed bin;				/* Relative channel on channel */
dcl  tty_slot_no fixed bin;				/* Time slot position on lsla */
dcl  tty_line_no fixed bin;
dcl  mem_word bit (18) unal;
dcl  force_sw bit (1);
dcl  paren_sw bit (1);

dcl  1 tty_name unal,				/* Format of  a tty channel name */
       2 fnp_name char (1),
       2 dot char (1),
       2 la_type char (1),
       2 la_no picture "9",
       2 chan_no picture "99";

dcl  modchp ptr;
dcl  1 modch aligned based (modchp),			/* Special module table used by trace */
       2 nmodules fixed bin,
       2 entries (modch.nmodules),
         3 name char (4),
         3 address fixed bin;

/* based */

dcl  1 fnptab aligned based (fnptabp),
       2 per_fnp (0:8),
         3 init_switches,
	 4 modtab_init bit (1) unal,			/* Set when module table setup */
	 4 iomtab_init bit (1) unal,			/* Set when iom table setup */
	 4 lslatab_init (0:5) bit (1) unal,
	 4 hslatab_init (0:2) bit (1) unal,
         3 bind_time fixed bin (71),
         3 boot_time fixed bin (71),
         3 nmodules fixed bin,
         3 per_module (50),
	 4 name char (6),
	 4 start fixed bin,
	 4 date char (6),
         3 iom_table,
	 4 lsla_tab_addr (0:5) fixed bin,		/* Addr of lsla tables in fnp */
	 4 hsla_tab_addr (0:2) fixed bin,		/* Likewise for hslas */
         3 per_lsla (0:5),
	 4 lsla_hwcm_addr fixed bin,
	 4 lsla_sfcm_addr fixed bin,
	 4 lsla_tib_addr (0:51) fixed bin (17) unal,
	 4 lsla_slot_no (0:51) fixed bin (17) unal,
         3 per_hsla (0:2),
	 4 hsla_mbx_addr fixed bin,
	 4 hsla_tib_addr (0:31) fixed bin (17) unal;

/* External stuff */

dcl  db_fnp_memory_$fetch entry (ptr, fixed bin, fixed bin, fixed bin, ptr, fixed bin (35));
dcl  db_fnp_sym_util_$get_value entry (char (*)) returns (fixed bin);
dcl  db_fnp_sym_util_$get_length entry (char (*)) returns (fixed bin);
dcl  ioa_ entry options (variable);
dcl  ioa_$rsnnl entry options (variable);
dcl  com_err_ entry options (variable);
dcl  parse_tty_name_ entry (char (*), fixed bin, bit (1), fixed bin, fixed bin);
dcl  cv_oct_check_ entry (char (*), fixed bin (35)) returns (fixed bin (35));
dcl  get_temp_segment_ entry (char (*), pointer, fixed bin (35));
dcl  get_fnp_name_ entry (fixed bin) returns (char (32));

dcl  error_table_$bad_arg ext fixed bin (35);
dcl  error_table_$noentry ext fixed bin (35);

dcl  (addr, bin, divide, hbound, lbound, min, mod, null, rtrim, size, string, substr, translate) builtin;

/* constants */

dcl  name char (12) int static options (constant) init ("db_fnp_util_");
dcl  xlate (0:63) char (1) int static options (constant) init (
						/* Bcd to ascii xlation table */
	"0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "[", "#", "@", ":", ">", "?", " ", "A", "B", "C", "D", "E",
	"F", "G", "H", "I", "&", ".", "]", "(", "<", "^", "|", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "-", "$",
	"*", ")", ";", "'", "+", "/", "S", "T", "U", "V", "W", "X", "Y", "Z", "_", ",", "%", "=", """", "!");

/* INTERNAL STATIC DATA */

dcl  fnptabp ptr int static init (null ());
dcl  constants_computed bit (1) int static init ("0"b);
dcl  crldt fixed bin int static;			/* Address of bind time in 355 */
dcl  crmod fixed bin int static;			/* Address of module chain in 355 */
dcl  criom fixed bin int static;
dcl  crtdt fixed bin int static;			/* Address of T&D executive TIB */
dcl  h_sfcm fixed bin int static;			/* Offset to sfcm pointer in hwcm */
dcl  h1ch fixed bin int static;			/* First hsla channel number */
dcl  l1ch fixed bin int static;			/* First lsla channel number */
dcl  hwcm_len fixed bin int static;

/* PRINT_MODULE_TABLE - Entry that will print the module table for the fnp. This entry is a debug_fnp command. */

print_module_table:
     entry (arg_corep, arg_fnp, arg_cmd_infop, arg_expr_infop);

	call setup;
	cmd_infop = arg_cmd_infop;

	call setup_module_table;
	if code ^= 0
	then do;
	     call com_err_ (code, "", "Unable to get module table.");
	     cmd_info.flush = "1"b;
	     return;
	end;

	do i = 1 to fnptab.nmodules (fnp);
	     call ioa_ ("^6a^8o  ^a/^a/^a", fnptab.name (fnp, i), fnptab.start (fnp, i),
		substr (fnptab.date (fnp, i), 1, 2), substr (fnptab.date (fnp, i), 3, 2),
		substr (fnptab.date (fnp, i), 5, 2));
	end;
	return;


/* LOOKUP_MODULE - Entry to lookup one name in the module table */

lookup_module:
     entry (arg_corep, arg_fnp, arg_mod_name, arg_fnp_addr, arg_code);

	call setup;
	call setup_module_table;
	if code ^= 0
	then do;
	     arg_code = code;
	     arg_fnp_addr = 0;
	     return;
	end;

	mod_name = translate (arg_mod_name, "abcdefghijklmnopqrstuvwxyz", "ABCDEFGHIJKLMNOPQRSTUVWXYZ");
	do i = 1 to fnptab.nmodules (fnp);
	     if fnptab.name (fnp, i) = mod_name
	     then do;
		arg_fnp_addr = fnptab.start (fnp, i);
		arg_code = 0;
		return;
	     end;
	end;
	arg_code = error_table_$noentry;
	arg_fnp_addr = 0;
	return;

/* GET_SPECIAL_MODCH - returns module table in special form used by format_fnp_trace_msg_ */

get_special_modch:
     entry (arg_corep, arg_fnp, arg_modchp, arg_code);

	call setup;
	call setup_module_table;
	if code ^= 0
	then do;
	     arg_code = code;
	     return;
	end;

	modchp = arg_modchp;
	i = min (fnptab.nmodules (fnp), modch.nmodules);	/* Return what fits */
	do j = 1 to i;
	     modch.name (j) = fnptab.name (fnp, j);
	     modch.address (j) = fnptab.start (fnp, j);
	end;
	modch.nmodules = i;				/* Return actual count */
	arg_code = 0;
	return;

/* EDIT_MODULE_ADDR - Entry to edit a fnp address in the form module|offset */

edit_module_addr:
     entry (arg_corep, arg_fnp, arg_fnp_addr, arg_edited_addr, arg_code);

	force_sw, paren_sw = "0"b;
edit_module_addr_join:
	call setup;
	fnp_addr = arg_fnp_addr;
	call setup_module_table;
	if code ^= 0
	then do;
	     arg_code = code;
	     arg_edited_addr = "";
	     return;
	end;

	j = -1;					/* No module found */
	if fnp_addr < 0 | fnp_addr > 32767
	then go to edit_module_offset;
	min_offset = 32768;
	do i = 1 to fnptab.nmodules (fnp);		/* Check addr against each module */
	     k = fnp_addr - fnptab.start (fnp, i);	/* Get an offset */
	     if (k >= 0) & (k < min_offset)
	     then do;				/* Found a possible */
		j = i;				/* Save its index */
		min_offset = k;			/* Remember lowest value found */
	     end;
	end;
edit_module_offset:
	if j = -1
	then addr_temp1 = "";			/* No module */
	else do;
	     addr_temp1 = rtrim (fnptab.name (fnp, j));
	     addr_temp1 = addr_temp1 || "|";
	     fnp_addr = min_offset;
	end;
	call ioa_$rsnnl ("^o", addr_temp2, (0), fnp_addr);/* Edit offset */
	if addr_temp1 = ""
	then do;					/* Out of range */
	     if force_sw | paren_sw
	     then arg_edited_addr = addr_temp2;
	     else arg_edited_addr = "";
	end;
	else do;
	     if ^paren_sw
	     then arg_edited_addr = addr_temp1 || addr_temp2;
	     else call ioa_$rsnnl ("^o (^a^a)", arg_edited_addr, (0), arg_fnp_addr, addr_temp1, addr_temp2);
	end;
	arg_code = 0;
	return;

/* EDIT_MODULE_ADDR_FORCE - Like above, but returns octal for out of module range address */

edit_module_addr_force:
     entry (arg_corep, arg_fnp, arg_fnp_addr, arg_edited_addr, arg_code);

	force_sw = "1"b;
	paren_sw = "0"b;
	go to edit_module_addr_join;

/* EDIT_MODULE_ADDR_PAREN - Like above, but returns "addr (mod|offset)" */

edit_module_addr_paren:
     entry (arg_corep, arg_fnp, arg_fnp_addr, arg_edited_addr, arg_code);

	force_sw = "0"b;
	paren_sw = "1"b;
	go to edit_module_addr_join;

/* GET_CHAN_ADDRS - Entry which takes a tty channel name and finds its TIB address */

get_chan_addrs:
     entry (arg_corep, arg_fnp, arg_chan_name, arg_expr_infop, arg_code);

	call setup;
	expr_infop = arg_expr_infop;
	expr_info.tib_known, expr_info.hwcm_known, expr_info.sfcm_known = "0"b;

	tty_line_no = cv_oct_check_ (arg_chan_name, code);/* Check for all octal */
	if code = 0
	then do;
	     call parse_tty_line_no;
	     if tty_fnp_no < 0
	     then go to char_to_tib_bad_arg;
	end;
	else do;					/* Character form name */
	     call parse_tty_name_ (arg_chan_name, tty_fnp_no, tty_hsla_sw, tty_la_no, tty_chan_no);
	     if tty_fnp_no < 0
	     then go to char_to_tib_bad_arg;
	     if arg_fnp > 0
	     then if arg_fnp ^= tty_fnp_no
		then				/* Line not on current FNP */
		     go to char_to_tib_bad_arg;
	end;

	if tty_la_no = 7				/* handle T&D channel specially */
	then do;
	     call validate_fnp_data;
	     call db_fnp_memory_$fetch (corep, fnp, crtdt, 1, addr (mem_word), code);
	     if code ^= 0
	     then go to char_to_tib_err;
	     if mem_word = "0"b
	     then go to char_to_tib_bad_arg;
	     expr_info.tib_addr = bin (mem_word);
	     expr_info.tib_known = "1"b;		/* but other data bases remain unknown */
	end;

	else do;
	     call setup_la_table;			/* Find appropriate table */
	     if code ^= 0
	     then go to char_to_tib_err;

	     if tty_hsla_sw
	     then do;
		expr_info.hwcm_addr = fnptab.hsla_mbx_addr (fnp, tty_la_no) + hwcm_len * tty_chan_no;
		expr_info.hwcm_known = "1"b;
		if fnptab.hsla_tib_addr (fnp, tty_la_no, tty_chan_no) = 0
		then go to char_to_tib_bad_arg;
		expr_info.tib_addr = fnptab.hsla_tib_addr (fnp, tty_la_no, tty_chan_no);
		expr_info.tib_known = "1"b;
		call db_fnp_memory_$fetch (corep, fnp, expr_info.hwcm_addr + h_sfcm, 1, addr (mem_word), code);
		if code ^= 0
		then go to char_to_tib_err;
		expr_info.sfcm_addr = bin (mem_word);
		expr_info.sfcm_known = "1"b;
	     end;
	     else do;
		if tty_chan_no < 0
		then call cv_lsla_slot_no;
		if tty_chan_no < 0 | tty_chan_no > 51
		then go to char_to_tib_bad_arg;
		if fnptab.lsla_tib_addr (fnp, tty_la_no, tty_chan_no) = 0
		then go to char_to_tib_bad_arg;
		expr_info.tib_addr = fnptab.lsla_tib_addr (fnp, tty_la_no, tty_chan_no);
		expr_info.tib_known = "1"b;
		expr_info.hwcm_addr = fnptab.lsla_hwcm_addr (fnp, tty_la_no);
		expr_info.hwcm_known = "1"b;
		expr_info.sfcm_addr = fnptab.lsla_sfcm_addr (fnp, tty_la_no);
		expr_info.sfcm_known = "1"b;
	     end;
	end;

	arg_code = 0;
	return;

char_to_tib_bad_arg:
	code = error_table_$bad_arg;
char_to_tib_err:
	arg_code = code;
	return;

/* Procedure that given a tty line number, computes a name */

cv_line_no:
     entry (arg_corep, arg_fnp, arg_tty_line_no, arg_tty_name, arg_code);

	call setup;
	tty_line_no = arg_tty_line_no;

	call parse_tty_line_no;			/* Break number into components */
	if tty_fnp_no < 0
	then do;					/* Error */
cv_line_bad:
	     arg_code = error_table_$bad_arg;
	     return;
	end;

	if ^tty_hsla_sw
	then do;
	     call setup_la_table;
	     if code ^= 0
	     then do;
		arg_code = code;
		return;
	     end;
	     call cv_lsla_slot_no;
	     if tty_chan_no < 0
	     then go to cv_line_bad;
	end;

	tty_name.fnp_name = get_fnp_name_ (max (arg_fnp, 1));
	tty_name.dot = ".";
	if tty_la_no = 7
	then do;
	     tty_name.la_type = "c";
	     tty_name.la_no, tty_name.chan_no = 0;
	end;

	else do;
	     if tty_hsla_sw
	     then tty_name.la_type = "h";
	     else tty_name.la_type = "l";
	     tty_name.la_no = tty_la_no;
	     tty_name.chan_no = tty_chan_no;
	end;

	arg_tty_name = string (tty_name);
	arg_code = 0;
	return;

/* Entry that given a name of a tty channel in either octal or ttyxxx form, returns the ttyname and the tty line number */

cv_chan_name:
     entry (arg_corep, arg_fnp, arg_chan_name, arg_tty_name, arg_tty_line_no, arg_code);

	call setup;
	arg_tty_line_no = 0;
	arg_tty_name = "";
	tty_line_no = cv_oct_check_ (arg_chan_name, code);/* Try octal */
	if code = 0
	then					/* Easy case, another entry already does this */
	     call cv_line_no (corep, arg_fnp, tty_line_no, arg_tty_name, code);
	else do;					/* Given ttyxxx form */
	     call parse_tty_name_ (arg_chan_name, tty_fnp_no, tty_hsla_sw, tty_la_no, tty_chan_no);
	     if tty_fnp_no < 0
	     then do;
cv_chan_bad:
		arg_code = error_table_$bad_arg;
		return;
	     end;
	     if arg_fnp > 0
	     then if tty_fnp_no ^= arg_fnp
		then				/* On wrong FNP */
		     go to cv_chan_bad;
	     if tty_hsla_sw
	     then					/* Compute line number for hsla */
		tty_line_no = 512 + 64 * tty_la_no + tty_chan_no;
	     else do;				/* Lslas are harder */
		call setup_la_table;		/* Need more data */
		tty_slot_no = fnptab.lsla_slot_no (fnp, tty_la_no, tty_chan_no);
		if tty_slot_no = 0
		then go to cv_chan_bad;
		tty_line_no = 64 * tty_la_no + tty_slot_no;
	     end;
	     arg_tty_name = arg_chan_name;		/* Just return name given */
	     code = 0;
	end;
	arg_tty_line_no = tty_line_no;
	arg_code = code;
	return;

/* Procedure to setup internal static fnp table */

setup_module_table:
     proc;

dcl  (i, j) fixed bin;
dcl  chainloc fixed bin;
dcl  1 chain aligned,				/* Entry in module chain */
       2 next bit (18) unal,
       2 name (6) bit (6) unal,
       2 start bit (18) unal,
       2 date (6) bit (6) unal;

	call validate_fnp_data;
	if code ^= 0
	then return;

	if fnptab.modtab_init (fnp)
	then return;				/* Table all setup */

	i = 0;
	call db_fnp_memory_$fetch (corep, fnp, crmod, 1, addr (chain.next), code);
						/* Get module chain start */
	if code ^= 0
	then return;
	chainloc = bin (chain.next);			/* First chain is here */

	do while ((chainloc ^= 0) & (i < hbound (fnptab.per_module, 2)));
	     call db_fnp_memory_$fetch (corep, fnp, chainloc, 6, addr (chain), code);
	     if code ^= 0
	     then return;
	     i = i + 1;
	     fnptab.start (fnp, i) = bin (chain.start);
	     mod_name = "";
	     do j = 1 to 6;				/* Convert name */
		substr (mod_name, j, 1) = xlate (bin (chain.name (j)));
	     end;
	     fnptab.name (fnp, i) = translate (mod_name, "abcdefghijklmnopqrstuvwxyz", "ABCDEFGHIJKLMNOPQRSTUVWXYZ");
	     do j = 1 to 6;				/* Convert date */
		substr (fnptab.date (fnp, i), j, 1) = xlate (bin (chain.date (j)));
	     end;
	     chainloc = bin (chain.next);		/* Next pointer */
	end;

	fnptab.nmodules (fnp) = i;
	fnptab.modtab_init (fnp) = "1"b;
	return;


     end setup_module_table;

/* Procedure to get the table for the current line adapter setup */

setup_la_table:
     proc;

	call validate_fnp_data;
	if code ^= 0
	then return;
	call setup_iom_table;			/* Need this first */
	if code ^= 0
	then return;
	if tty_hsla_sw
	then call setup_hsla_table;			/* Let some one else do the work */
	else call setup_lsla_table;
	return;

     end setup_la_table;

/* Procedure to find the iom table */

setup_iom_table:
     proc;

dcl  auto_iom_table (size (iom_table)) bit (36) aligned;	/* To read iom table into */
dcl  i fixed bin;

	if fnptab.iomtab_init (fnp)
	then return;				/* Only do this once */

	call db_fnp_memory_$fetch (corep, fnp, criom, 1, addr (word_buf), code);
	if code ^= 0
	then return;
	itblp = addr (auto_iom_table);
	call db_fnp_memory_$fetch (corep, fnp, bin (word_buf), 2 * size (iom_table), itblp, code);
	if code ^= 0
	then return;
	fnptab.lsla_tab_addr (fnp, *) = 0;
	fnptab.hsla_tab_addr (fnp, *) = 0;
	do i = lbound (iom_table, 1) to hbound (iom_table, 1);
						/* Pick out line adapters */
	     if iom_table.dev_type (i) = HSLA
	     then fnptab.hsla_tab_addr (fnp, i - h1ch) = bin (iom_table.table (i));
	     else if iom_table.dev_type (i) = LSLA
	     then fnptab.lsla_tab_addr (fnp, i - l1ch) = bin (iom_table.table (i));
	end;
	fnptab.iomtab_init (fnp) = "1"b;
	code = 0;
	return;

     end setup_iom_table;

/* Procedure to find all tib addresses for 1 hsla */

setup_hsla_table:
     proc;

dcl  auto_hsla_table (size (hsla_table)) bit (36) aligned;	/* To read hsla table into */
dcl  i fixed bin;

	if tty_chan_no < 0 | tty_chan_no > 31
	then go to bad_hsla;
	if ^fnptab.hslatab_init (fnp, tty_la_no)
	then do;					/* Only do this if new hsla */
	     i = fnptab.hsla_tab_addr (fnp, tty_la_no);	/* Address of hsla table */
	     if i = 0
	     then do;				/* Nothing on this hsla */
bad_hsla:
		code = error_table_$bad_arg;
		return;
	     end;
	     tblp = addr (auto_hsla_table);
	     call db_fnp_memory_$fetch (corep, fnp, i, 2 * size (hsla_table), tblp, code);
	     if code ^= 0
	     then return;
	     do i = lbound (hsla_table, 1) to hbound (hsla_table, 1);
						/* Copy addresses */
		fnptab.hsla_tib_addr (fnp, tty_la_no, i) = hsla_table.tib_addr (i);
	     end;
	     fnptab.hsla_mbx_addr (fnp, tty_la_no) = get_mbx_addr ("h");
	     fnptab.hslatab_init (fnp, tty_la_no) = "1"b;
	end;

	code = 0;
	return;

     end setup_hsla_table;

/* Procedure to find all the tib addresses for 1 lsla */

setup_lsla_table:
     proc;

dcl  auto_lsla_table (size (lsla_table)) bit (36) aligned;	/* To read lsla table into */
dcl  (i, j, k) fixed bin;
dcl  mem_word bit (18) unal;

	if ^fnptab.lslatab_init (fnp, tty_la_no)
	then do;					/* If not done yet */
	     i = fnptab.lsla_tab_addr (fnp, tty_la_no);	/* Addr of lsla table */
	     if i = 0
	     then do;
		code = error_table_$bad_arg;
		return;
	     end;
	     tblp = addr (auto_lsla_table);
	     call db_fnp_memory_$fetch (corep, fnp, i, 2 * size (lsla_table), tblp, code);
	     if code ^= 0
	     then return;
	     j, k = 0;
	     fnptab.lsla_tib_addr (fnp, tty_la_no, *) = 0;
	     fnptab.lsla_slot_no (fnp, tty_la_no, *) = 0;
	     do i = 1 to hbound (lsla_table, 1);	/* Copy all tib address */
		if lsla_table.slot_id (i) = "111"b
		then go to setup_lsla_done;
		if lsla_table.tib_addr (i) ^= k
		then do;				/* New tib */
		     fnptab.lsla_tib_addr (fnp, tty_la_no, j), k = lsla_table.tib_addr (i);
		     fnptab.lsla_slot_no (fnp, tty_la_no, j) = i;
		     j = j + 1;
		end;
	     end;
setup_lsla_done:
	     fnptab.lsla_hwcm_addr (fnp, tty_la_no) = get_mbx_addr ("l");
	     call db_fnp_memory_$fetch (corep, fnp, fnptab.lsla_hwcm_addr (fnp, tty_la_no) + h_sfcm, 1, addr (mem_word),
		code);
	     if code ^= 0
	     then return;
	     fnptab.lsla_sfcm_addr (fnp, tty_la_no) = bin (mem_word);
	     fnptab.lslatab_init (fnp, tty_la_no) = "1"b;
	end;

	code = 0;
	return;

     end setup_lsla_table;

/* Procedure line parse_tty_name that "parses" a line number */

parse_tty_line_no:
     proc;

	tty_fnp_no = -1;				/* Error flag */
	tty_hsla_sw = (tty_line_no >= 512);
	tty_chan_no = mod (tty_line_no, 64);
	tty_la_no = mod (divide (tty_line_no, 64, 17, 0), 8);
	if tty_line_no ^= (512 * bin (tty_hsla_sw, 1) + 64 * tty_la_no + tty_chan_no)
	then return;				/* Doesn't compute */
	if tty_hsla_sw
	then do;
	     if tty_la_no > 2 & tty_la_no ^= 7
	     then return;
	     if tty_la_no = 7			/* this should be T&D channel */
		& tty_chan_no ^= 63			/* but it isn't */
	     then return;
	end;
	else do;
	     if tty_la_no > 5
	     then return;
	     tty_slot_no = tty_chan_no;		/* This is really a time slot */
	     tty_chan_no = -1;			/* The subchannel isn't known */
	end;
	tty_fnp_no = 1;				/* No error */
	return;

     end parse_tty_line_no;

/* Procedure to convert from a lsla slot number to channel number */

cv_lsla_slot_no:
     proc;

dcl  i fixed bin;

	do i = lbound (fnptab.lsla_slot_no, 3) to hbound (fnptab.lsla_slot_no, 3);
	     if fnptab.lsla_slot_no (fnp, tty_la_no, i) = tty_slot_no
	     then do;
		tty_chan_no = i;
		return;
	     end;
	     if fnptab.lsla_slot_no (fnp, tty_la_no, i) > tty_slot_no
	     then do;
		tty_chan_no = i - 1;		/* Other than the first time slot of a channel */
		return;
	     end;
	end;
	return;					/* Couldn't do it */

     end cv_lsla_slot_no;

/* Procedure which checks to be sure that the static FNP data is still valid. */
/* The check is to see if times in the core image have changed */

validate_fnp_data:
     proc;

dcl  1 times aligned,
       2 bind_time fixed bin (71),
       2 boot_time fixed bin (71);

	call compute_constants;
	call db_fnp_memory_$fetch (corep, fnp, crldt, 8, addr (times), code);
						/* Get bind and boot time */
	if code ^= 0
	then return;
	if fnptab.bind_time (fnp) ^= times.bind_time | fnptab.boot_time (fnp) ^= times.boot_time
	then string (fnptab.init_switches (fnp)) = "0"b;
	fnptab.bind_time (fnp) = times.bind_time;
	fnptab.boot_time (fnp) = times.boot_time;
	return;

     end validate_fnp_data;


/* Procedure to computing the addresses of some constants in the 355 */

compute_constants:
     proc;

dcl  i fixed bin;

	if fnptabp = null ()
	then call get_temp_segment_ (name, fnptabp, code);

	if constants_computed
	then return;				/* Do this once per process */

	crldt = db_fnp_sym_util_$get_value (".crldt");
	crmod = db_fnp_sym_util_$get_value (".crmod");
	criom = db_fnp_sym_util_$get_value (".criom");
	crtdt = db_fnp_sym_util_$get_value (".crtdt");
	h_sfcm = db_fnp_sym_util_$get_value ("h.sfcm");
	l1ch = db_fnp_sym_util_$get_value ("l1ch");
	h1ch = db_fnp_sym_util_$get_value ("h1ch");
	hwcm_len = db_fnp_sym_util_$get_length ("hwcm");

	do i = lbound (fnptab.init_switches, 1) to hbound (fnptab.init_switches, 1);
	     string (fnptab.init_switches (i)) = "0"b;
	end;
	fnptab.bind_time = 0;			/* And all these numbers */
	fnptab.boot_time = 0;
	constants_computed = "1"b;
	return;

     end compute_constants;

/* Get address of a mailbox */

get_mbx_addr:
     proc (t) returns (fixed bin);

dcl  t char (1);
dcl  1 mb_name unal,
       2 type char (1) unal,
       2 num picture "9" unal,
       2 mb char (2) unal;

	mb_name.type = t;
	mb_name.num = tty_la_no + 1;
	mb_name.mb = "mb";
	return (db_fnp_sym_util_$get_value (string (mb_name)));

     end get_mbx_addr;



/* Initialization procedure to copy seg pointer and fnp args */

setup:
     proc;

	corep = arg_corep;
	if corep = null
	then fnp = arg_fnp;				/* Real fnp */
	else fnp = 0;
	return;

     end setup;

%include mcs_memory_map;


%include debug_fnp_data;

     end db_fnp_util_;
