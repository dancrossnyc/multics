/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* DB_FNP_BREAK_ - Implements the breakpoint options of debug_fnp */
/* Written September 1977 by Larry Johnson */

db_fnp_break_: proc;

/* Parameters */

dcl  arg_corep ptr;
dcl  arg_fnp fixed bin;
dcl  arg_cmd_infop ptr;
dcl  arg_expr_infop ptr;

/* Automatic */

dcl  corep ptr;
dcl  fnp fixed bin;
dcl  code fixed bin (35);
dcl  i fixed bin;
dcl  something_printed bit (1);
dcl  edited_addr char (32) var;
dcl  mem_buf (32) bit (18) unal;
dcl  ntibs fixed bin;
dcl  state fixed bin;
dcl  break_reset bit (1);
dcl  crbrk_val fixed bin;
dcl  break_address fixed bin;
dcl  line_given bit (1);
dcl  tty_name char (8);
dcl  stop_trace bit (1);
dcl  start_trace bit (1);
dcl  address_given bit (1);
dcl  reset_sw bit (1);
dcl 1 temp_expr_info like expr_info aligned automatic;

dcl 1 fnp_break_info aligned,				/* Info structure for setting breaks */
    2 channel char (6),
    2 address fixed bin,
    2 action fixed bin,
    2 flags,
      3 trace bit (1) unal,
      3 pad bit (35) unal;

dcl  SET fixed bin int static options (constant) init (1);	/* Values for fnp_break_info.action */
dcl  RESET fixed bin int static options (constant) init (2);
dcl  START fixed bin int static options (constant) init (3);

dcl  break_error (7) char (32) var int static options (constant) init ( /* Error codes read from fnp */
     "Bad address.",
     "Bad line number.",
     "No entry in break table.",
     "Not stopped at breakpoint.",
     "No room in break table.",
     "No opblock at address.",
     "Invalid request.");

/* Alocated copy of break table */

dcl  brk_tab_start fixed bin;
dcl  brk_tab_size fixed bin;
dcl  brk_tabp ptr init (null);

dcl 1 brk_tab aligned based (brk_tabp),
    2 entry (brk_tab_size) unal,
      3 address fixed bin (17) unal,
      3 line fixed bin (17) unal,
      3 opblock bit (18) unal,
      3 flags bit (18) unal;

dcl  tib_tablep ptr init (null);			/* Pointer to temp copy of tib table */
dcl 1 tib_table aligned based (tib_tablep),
    2 entries (ntibs) unal,
      3 address fixed bin (17) unal,			/* Address ot tib */
      3 q fixed bin (17) unal;			/* Address of q */

dcl  brk_listp ptr init (null);			/* Pointer to list of tibs at breaks */
dcl  brk_list_cnt fixed bin;				/* Number of such tibs */
dcl 1 brk_list aligned based (brk_listp),
    2 entries (ntibs) unal,
      3 line fixed bin (17) unal,
      3 t_cur fixed bin (17) unal;

/* Internal static */

dcl  symbols_looked_up bit (1) int static init ("0"b);	/* Set once all following symbols are set */
dcl  crbrk fixed bin int static;
dcl  crttb fixed bin int static;
dcl  crtte fixed bin int static;
dcl  t_flg3 fixed bin int static;
dcl  t_cur fixed bin int static;
dcl  t_line fixed bin int static;
dcl  bkptop bit (18) int static;
dcl  tfbkpt bit (18) int static;
dcl  free_areap ptr int static;
dcl  call_type fixed bin int static init (0);		/* Says which type of ring0 call to use */

dcl  free_area area based (free_areap);
dcl  name char (13) int static options (constant) init ("db_fnp_break_");

/* External */

dcl  db_fnp_sym_util_$get_value entry (char (*)) returns (fixed bin);
dcl  db_fnp_util_$edit_module_addr_force entry (ptr, fixed bin, fixed bin, char (*) var, fixed bin (35));
dcl  db_fnp_util_$edit_module_addr_paren entry (ptr, fixed bin, fixed bin, char (*) var, fixed bin (35));
dcl  db_fnp_util_$cv_chan_name entry (ptr, fixed bin, char (*), char (*), fixed bin, fixed bin (35));
dcl  db_fnp_util_$cv_line_no entry (ptr, fixed bin, fixed bin, char (*), fixed bin (35));
dcl  db_fnp_util_$get_chan_addrs entry (ptr, fixed bin, char (*), ptr, fixed bin (35));
dcl  db_fnp_opblock_util_$get_name entry (bit (18), char (*));
dcl  db_fnp_memory_$fetch entry (ptr, fixed bin, fixed bin, fixed bin, ptr, fixed bin (35));
dcl  db_fnp_reader_$get_operand entry (ptr);
dcl  db_fnp_eval_ entry (ptr, fixed bin, char (*), ptr, char (*), fixed bin, fixed bin (35));
dcl  db_fnp_opblock_util_$lookup entry (char (*), bit (18), fixed bin (35));
dcl  hphcs_$tty_order entry (fixed bin, char (*), ptr, fixed bin, fixed bin (35));
dcl  hphcs_$tty_control entry (char (*), char (*), ptr, fixed bin (35));
dcl  sub_err_ entry options (variable);
dcl  com_err_ entry options (variable);
dcl  get_system_free_area_ entry returns (ptr);
dcl  ioa_ entry options (variable);
dcl  ioa_$nnl entry options (variable);
dcl  ioa_$rsnnl entry options (variable);
dcl  iox_$put_chars entry (ptr, ptr, fixed bin (21), fixed bin (35));
dcl  timer_manager_$sleep entry (fixed bin (71), bit (2));
dcl  get_fnp_name_ entry (fixed bin) returns (char (32));

dcl  iox_$user_output ext ptr;

dcl (cleanup, linkage_error) condition;

dcl (addr, bin, divide, length, max, null, string) builtin;

/* Entry to set a breakpoint */

set:	entry (arg_corep, arg_fnp, arg_cmd_infop, arg_expr_infop);

	call setup;
	on cleanup call clean_up;

	if corep ^= null then do;
	     call ioa_ ("Only valid on a running FNP.");
	     go to error_return;
	end;

	call get_operand;				/* Address */
	if cmd_info.endline then do;
	     call ioa_ ("No address");
	     go to error_return;
	end;

	call db_fnp_eval_ (corep, fnp, operand, expr_infop, "", break_address, code);
	if code ^= 0 then go to error_return;

	line_given = "0"b;
	stop_trace = "0"b;
	call get_operand;				/* Scan command line */
	do while (^cmd_info.endline);
	     if operand = "-stop_trace" then stop_trace = "1"b;
	     else if ^line_given then do;
		call db_fnp_util_$cv_chan_name (corep, fnp, operand, tty_name, i, code); /* See if good line number */
		if code ^= 0 then do;
		     call com_err_ (code, name, "^a", operand);
		     go to error_return;
		end;
		line_given = "1"b;
	     end;
	     else do;				/* Bad arg */
		call ioa_ ("Invalid operand: ^a", operand);
		go to error_return;
	     end;
	     call get_operand;
	end;

	fnp_break_info.address = break_address;
	fnp_break_info.action = SET;
	if line_given then fnp_break_info.channel = tty_name;
	else fnp_break_info.channel = "";
	string (fnp_break_info.flags) = "0"b;
	fnp_break_info.trace = stop_trace;

	call make_order_call;
	call check_break_error;
	if code ^= 0 then do;
	     call ioa_ ("Break not set: ^a", break_error (code));
	     go to error_return;
	end;

	call clean_up;
	return;

/* Entry to reset breaks */

reset:	entry (arg_corep, arg_fnp, arg_cmd_infop, arg_expr_infop);

	call setup;
	on cleanup call clean_up;

	if corep ^= null then do;
	     call ioa_ ("Only valid on a running FNP.");
	     go to error_return;
	end;

	call get_operand;				/* Read address */
	if cmd_info.endline then do;
	     call ioa_ ("No address specified");
	     go to error_return;
	end;

	if operand = "-all" | operand = "-a" then do;	/* Reset all breaks */
	     call get_break_table;			/* First need lines at breaks */
	     break_reset = "0"b;
	     do i = 1 to brk_tab_size;		/* Loop thru all breaks */
		if brk_tab.address (i) ^= 0 then do;	/* Found non-empty entry */
		     break_reset = "1"b;
		     call reset_one_break ((brk_tab.address (i)));
		end;
	     end;
	     if ^break_reset then call ioa_ ("No breaks found.");
	end;

	else do;					/* Reset one break */
	     call db_fnp_eval_ (corep, fnp, operand, expr_infop, "", i, code);
	     if code = 0 then call reset_one_break (i);
	end;

	call clean_up;
	return;

/* Entry to restart a stopped channel */

start:	entry (arg_corep, arg_fnp, arg_cmd_infop, arg_expr_infop);

	call setup;
	on cleanup call clean_up;

	if corep ^= null then do;
	     call ioa_ ("Only valid on a running FNP.");
	     go to error_return;
	end;

	call get_operand;
	if cmd_info.endline then do;
	     call ioa_ ("No line given.");
	     go to error_return;
	end;

	if operand = "-all" | operand = "-a" then do;	/* Start all lines */
	     call find_stopped_channels;
	     if brk_list_cnt = 0 then do;		/* None */
		call ioa_ ("No lines stopped at breaks.");
		go to start_break_end;
	     end;
	     do i = 1 to brk_list_cnt;		/* Start each line */
		call db_fnp_util_$cv_line_no (corep, fnp, (brk_list.line (i)), tty_name, code);
		if code ^= 0 then do;
		     call com_err_ (code, name, "Unable to convert ^o to tty name.", brk_list.line (i));
		     cmd_info.flush = "1"b;		/* Treat as error, but continue */
		     go to start_next;
		end;
		fnp_break_info.channel = tty_name;
		fnp_break_info.address = 0;
		fnp_break_info.action = START;
		string (fnp_break_info.flags) = "0"b;
		call make_order_call;
		call check_break_error;
		if code ^= 0 then do;
		     call ioa_ ("^a not restarted. ^a", tty_name, break_error (code));
		     cmd_info.flush = "1"b;		/* Treat as error */
		end;
		else call ioa_ ("^a restarted.", tty_name);
start_next:
	     end;
	end;

	else do;					/* Start one line */
	     call db_fnp_util_$cv_chan_name (corep, fnp, operand, tty_name, i, code);
	     if code ^= 0 then do;
		call com_err_ (code, name, "^a", operand);
		go to error_return;
	     end;
	     address_given = "0"b;
	     reset_sw = "0"b;
	     start_trace = "0"b;
	     call get_operand;
	     do while (^cmd_info.endline);		/* Scan command */
		if operand = "-reset" then reset_sw = "1"b;
		else if operand = "-start_trace" then start_trace = "1"b;
		else if ^address_given then do;
		     call db_fnp_eval_ (corep, fnp, operand, expr_infop, "", break_address, code);
		     if code ^= 0 then go to error_return;
		     address_given = "1"b;
		end;
		else do;
		     call ioa_ ("Invalid operand: ^a", operand);
		     go to error_return;
		end;
		call get_operand;
	     end;

	     if reset_sw then do;
		temp_expr_info = expr_info;		/* Setup dummy structure */
		temp_expr_info.tib_known = "0"b;
		call db_fnp_util_$get_chan_addrs (corep, fnp, tty_name, addr (temp_expr_info), code);
		if code ^= 0 then do;
no_reset_tib:	     call com_err_ (code, name, "Cant get tib address for ^a", tty_name);
		     go to error_return;
		end;
		if ^temp_expr_info.tib_known then go to no_reset_tib;
		call fetch_words (temp_expr_info.tib_addr + t_cur, 1, addr (mem_buf));
		call reset_one_break (bin (mem_buf (1)));
	     end;

	     fnp_break_info.channel = tty_name;
	     fnp_break_info.action = START;
	     if address_given then fnp_break_info.address = break_address;
	     else fnp_break_info.address = 0;
	     string (fnp_break_info.flags) = "0"b;
	     fnp_break_info.trace = start_trace;
	     call make_order_call;
	     call check_break_error;
	     if code ^= 0 then do;
		call ioa_ ("^a not restarted. ^a", tty_name, break_error (code));
		go to error_return;
	     end;
	     else call ioa_ ("^a restarted", tty_name);
	end;
start_break_end:
	call clean_up;
	return;

/* Entry to list breakpoints */

list:	entry (arg_corep, arg_fnp, arg_cmd_infop, arg_expr_infop);

	call setup;
	on cleanup call clean_up;

	call get_break_table;			/* Find break table in fnp */
	call find_stopped_channels;
	something_printed = "0"b;
	do i = 1 to brk_tab_size;
	     if brk_tab.address (i) ^= 0 then
		call print_one_break ((brk_tab.address (i)), brk_tab.opblock (i), (brk_tab.line (i)));
	end;
	do i = 1 to brk_list_cnt;			/* Also print lines stopped at non-std breaks */
	     if brk_list.line (i) ^= -1 then
		call print_one_break ((brk_list.t_cur (i)), "0"b, -1);
	end;
	if ^something_printed then call ioa_ ("No breaks set");
	call clean_up;
	return;

/* Procedure to print one break point. */

print_one_break: proc (a, o, l);

dcl  a fixed bin;					/* Address */
dcl  o bit (18);					/* Origional opblcok */
dcl  l fixed bin;					/* Line number */

dcl  i fixed bin;
dcl  optemp char (6);
dcl 1 b unal,					/* The bbasic print line */
    2 address char (10),
    2 opblock char (8),
    2 line char (6);

	     if ^something_printed then call ioa_ ("ADDRESS   OPBLOCK LINE   LINES STOPPED");
	     something_printed = "1"b;

	     call db_fnp_util_$edit_module_addr_force (corep, fnp, a, edited_addr, code);
	     if code ^= 0 then call ioa_$rsnnl ("^o", b.address, (0), a);
	     else b.address = edited_addr;

	     if o = "0"b then b.opblock = "";
	     else do;
		call db_fnp_opblock_util_$get_name (o, optemp);
		if optemp = "" then call ioa_$rsnnl ("^.3b", b.opblock, (0), o);
		else b.opblock = optemp;
	     end;

	     if l = -1 then b.line = "";
	     else do;
		call db_fnp_util_$cv_line_no (corep, fnp, l, tty_name, code);
		if code = 0 then b.line = tty_name;
		else call ioa_$rsnnl ("^o", b.line, (0), l);
	     end;
	     call iox_$put_chars (iox_$user_output, addr (b), length (string (b)), code);

	     do i = 1 to brk_list_cnt;		/* Print lines stopped at this break */
		if (brk_list.t_cur (i) = a) & (brk_list.line (i) ^= -1) then do;
		     call db_fnp_util_$cv_line_no (corep, fnp, (brk_list.line (i)), tty_name, code);
		     if code ^= 0 then call ioa_$nnl (" ^o", brk_list.line (i));
		     else call ioa_$nnl (" ^a", tty_name);
		     brk_list.line (i) = -1;		/* Dont print again */
		end;
	     end;
	     call ioa_ ("");			/* Finish the line */
	     return;

	end print_one_break;

/* Initialization procedure */

setup:	proc;

dcl  fb fixed bin (17) unal;

	     corep = arg_corep;
	     fnp = arg_fnp;
	     expr_infop = arg_expr_infop;
	     cmd_infop = arg_cmd_infop;

	     if ^symbols_looked_up then do;		/* Once per process */
		crbrk = db_fnp_sym_util_$get_value (".crbrk");
		crttb = db_fnp_sym_util_$get_value (".crttb");
		crtte = db_fnp_sym_util_$get_value (".crtte");
		t_flg3 = db_fnp_sym_util_$get_value ("t.flg3");
		t_cur = db_fnp_sym_util_$get_value ("t.cur");
		t_line = db_fnp_sym_util_$get_value ("t.line");
		fb = db_fnp_sym_util_$get_value ("tfbkpt");
		tfbkpt = unspec (fb);
		call db_fnp_opblock_util_$lookup ("bkptop", bkptop, code);
		if code ^= 0 then
		     call sub_err_ (code, name, "s", null, (0), "Unable to get code for ""bkptop"" opblock.");
		free_areap = get_system_free_area_ ();
		symbols_looked_up = "1"b;
	     end;

	     call get_crbrk_val;

	     return;

	end setup;

/* Procedure to fetch the break table */

get_break_table: proc;


	     if brk_tabp = null then do;		/* Havent inited yet */
		call fetch_words (crbrk_val, 2, addr (mem_buf)); /* Get address and length */
		brk_tab_start = bin (mem_buf (1));
		brk_tab_size = bin (mem_buf (2));
		allocate brk_tab in (free_area);
	     end;
	     call fetch_words (brk_tab_start, 4 * brk_tab_size, brk_tabp);
	     return;

	end get_break_table;

/* Get list of all channels stopped at break points */

find_stopped_channels: proc;

dcl  i fixed bin;
dcl  nw fixed bin;

	     call fetch_words (crttb, 1, addr (mem_buf)); /* Get start of tib table */
	     i = bin (mem_buf (1));
	     call fetch_words (crtte, 1, addr (mem_buf)); /* And end */
	     ntibs = divide (bin (mem_buf (1), 17) - i, 2, 17, 0);
	     allocate tib_table in (free_area);
	     allocate brk_list in (free_area);
	     call fetch_words (i, 2*ntibs, tib_tablep);	/* Read the tib table */
	     nw = max (t_flg3, t_cur, t_line) + 1;	/* Number of words to read to get all these fields */
	     brk_list_cnt = 0;			/* Number of lines at breaks */
	     do i = 1 to ntibs;			/* For each tib */
		call fetch_words ((tib_table.address (i)), nw, addr (mem_buf)); /* Read stat of tib */
		if mem_buf (t_flg3 + 1) & tfbkpt then do; /* If line at break */
		     brk_list_cnt = brk_list_cnt + 1;
		     brk_list.line (brk_list_cnt) = bin (mem_buf (t_line+1));
		     brk_list.t_cur (brk_list_cnt) = bin (mem_buf (t_cur+1));
		end;
	     end;
	     free tib_table;
	     return;

	end find_stopped_channels;

/* Reset a single breakpoint */

reset_one_break: proc (a);

dcl  a fixed bin;					/* The address of the break */
dcl  edited_addr char (16) var;

	     call db_fnp_util_$edit_module_addr_paren (corep, fnp, a, edited_addr, code); /* Edit address for messages */
	     if code ^= 0 then edited_addr = "?";
	     call fetch_words (a, 1, addr (mem_buf));	/* Get opblock at location now */
	     if mem_buf (1) ^= bkptop then do;
		call ioa_ ("No break at ^a", edited_addr);
		cmd_info.flush = "1"b;		/* Treat as error, but continue */
		return;
	     end;

	     fnp_break_info.action = RESET;
	     fnp_break_info.address = a;
	     fnp_break_info.channel = "";
	     string (fnp_break_info.flags) = "0"b;
	     call make_order_call;

	     call check_break_error;			/* Check for any error */
	     if code = 0 then call ioa_ ("Break at ^a reset.", edited_addr);
	     else do;
		call ioa_ ("Break at ^a not reset. ^a", edited_addr, break_error (code));
		cmd_info.flush = "1"b;
	     end;
	     return;

	end reset_one_break;

/* Precedure to read memory */

fetch_words: proc (a, n, p);

dcl  a fixed bin;					/* Address */
dcl  n fixed bin;					/* Word count */
dcl  p ptr;					/* Where to put them */

	     call db_fnp_memory_$fetch (corep, fnp, a, n, p, code);
	     if code ^= 0 then do;
		call com_err_ (code, name, "Unable to read location ^o.", a);
		go to error_return;
	     end;
	     return;

	end fetch_words;

get_operand: proc;

	     call db_fnp_reader_$get_operand (cmd_infop);
	     if cmd_info.error then go to error_return;
	     return;

	end get_operand;

/* The hphcs interface_ */

make_order_call: proc;

dcl  fnp_name char (1);

	     fnp_name = get_fnp_name_ (fnp);

retry_order_call:
	     if call_type = 0 then do;		/* Haven't established which call to use */
		on linkage_error go to call_1_failed;
		call hphcs_$tty_order (fnp, "fnp_break", addr (fnp_break_info), state, code); /* Try old call */
		revert linkage_error;		/* It worked */
		call_type = 1;
		go to check_order_code;
call_1_failed:	on linkage_error go to call_2_failed;
		call hphcs_$tty_control (fnp_name, "fnp_break", addr (fnp_break_info), code); /* Try new call */
		revert linkage_error;		/* It worked */
		call_type = 2;
		go to check_order_code;
call_2_failed:	revert linkage_error;		/* Neither worked, must mean no access */
		call sub_err_ (0, name, "h", null, (0), "No access to hphcs_ gate; unable to make fnp_break order call.");
		go to retry_order_call;
	     end;
	     else if call_type = 1 then call hphcs_$tty_order (fnp, "fnp_break", addr (fnp_break_info), state, code);
	     else call hphcs_$tty_control (fnp_name, "fnp_break", addr (fnp_break_info), code);
check_order_code:
	     if code ^= 0 then do;
		call com_err_ (code, name);
		go to error_return;
	     end;
	     return;

	end make_order_call;

/* Get value of .crbrk, which points to data in breakpoint_man */

get_crbrk_val: proc;

	     call fetch_words (crbrk, 1, addr (mem_buf)); /* Get addr of brk tab ptr */
	     crbrk_val = bin (mem_buf (1));
	     if crbrk_val = 0 then do;
		call ioa_ ("No break table");
		go to error_return;
	     end;
	     return;

	end get_crbrk_val;

/* Get break error code, reason for failure of previous request */

check_break_error: proc;

/* The following sleep call is a temporary kludge to avoid a potential
   problem which cannot be solved in MR6.0 because of lack of time.
   If the FNP should crash while a 'dump_fnp' order call is in progress, the
   Initializer will end up looping in ring 0 trying to lock the
   fnp_dump_segment in order to take a dump. The segment is, however,
   already locked to the process tperforming the 'fnp_dump' order
   and the Initializer will loop forever. Breakpoint operations are
   especially prone to this trap because each operation is immediatly
   followed by a 'dump_fnp' order to check the status of the operation.
   Therefore a start or set_break command which causes the FNP to crash will
   very likely cause this problem.  The sleep call is an attempt
   to reduce the likely-hood of this happening by waiting after a breakpoint
   operation before checking the results. The theory is that if the
   FNP is going to crash as a result of the breakpoint operation, it will do
   so quickly, and the Initializer will be able to start the dump operation
   before we attemp the dump_fnp order. This is obviously a stopgap measure to
   be deleted as soon as posssible. */

	     call timer_manager_$sleep (250000, "10"b);

	     call fetch_words (crbrk_val + 2, 1, addr (mem_buf));
	     code = bin (mem_buf (1));
	     return;

	end check_break_error;

error_return:
	cmd_info.flush = "1"b;
	call clean_up;
	return;

/* Cleanup handler */

clean_up:	proc;

	     if brk_tabp ^= null then free brk_tab;
	     if tib_tablep ^= null then free tib_table;
	     if brk_listp ^= null then free brk_list;
	     return;

	end clean_up;

%include debug_fnp_data;

     end db_fnp_break_;
