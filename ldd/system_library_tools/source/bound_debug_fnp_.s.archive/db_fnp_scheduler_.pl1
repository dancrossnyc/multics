/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* DB_FNP_SCHEDULER_ - Implements various command related to the scheduler */

/* Written January 1979 by Larry Johnson */
/* Modified December 1981 by Robert Coren for revised idle meters */
/* Modified March 1982 by Robert Coren to add meters for time spent in buffer management */

/* format: style4,delnl,insnl,^ifthendo */
db_fnp_scheduler_:
     proc;

/* Parameters */

dcl  arg_corep ptr;
dcl  arg_fnp fixed bin;
dcl  arg_expr_infop ptr;
dcl  arg_cmd_infop ptr;
dcl  arg_code fixed bin (35);

/* Automatic */

dcl  corep ptr;
dcl  fnp fixed bin;
dcl  theoretical_max fixed bin (35);
dcl  x float bin;
dcl  total_count fixed bin (71);
dcl  (i, j) fixed bin;
dcl  min_j fixed bin;
dcl  mix_offset fixed bin;
dcl  offset fixed bin;
dcl  module_counts (50) fixed bin (71);
dcl  icmdat_addr fixed bin;
dcl  icmdat_addr_known bit (1) init ("0"b);
dcl  skdata_addr fixed bin;
dcl  code fixed bin (35);
dcl  buf_meter_addr fixed bin;
dcl  data_high fixed bin;
dcl  datap ptr init (null);
dcl  table_base fixed bin;
dcl  table_mult fixed bin;
dcl  min_offset fixed bin;
dcl  ic_addr fixed bin;
dcl  line_length fixed bin;
dcl  hist_len fixed bin;
dcl  max_hits fixed bin (35);
dcl  scale float bin;
dcl  edited_addr char (32) var;
dcl  fraction_to_print float bin;
dcl  hits_removed fixed bin (71);
dcl  hits_to_remove fixed bin (71);
dcl  min_hits fixed bin (35);
dcl  n_min_hits fixed bin;
dcl  fnp_word (1) fixed bin (17) unal;
dcl  something_printed bit (1);
dcl  first_exec_found bit (1);
dcl  dsptabp ptr;
dcl  savtabp ptr;
dcl  skdata_count fixed bin;
dcl  sched_dsptabp ptr init (null);
dcl  sched_savtabp ptr init (null);
dcl  reset_sw bit (1);
dcl  delta_cycles fixed bin (35);
dcl  delta_idle_count fixed bin (35);
dcl  alloc_time fixed bin (35);
dcl  alloc_updates fixed bin (35);
dcl  alloc_more_than_1 fixed bin (35);
dcl  free_time fixed bin (35);
dcl  free_updates fixed bin (35);
dcl  free_more_than_1 fixed bin (35);
dcl  total_time fixed bin (35);
dcl  avg_alloc_time float bin;
dcl  avg_free_time float bin;
dcl  avg_all_time float bin;
dcl  pct_alloc float bin;
dcl  pct_free float bin;
dcl  pct_alloc_non_idle float bin;
dcl  pct_free_non_idle float bin;
dcl  idle_fraction float bin;

dcl  1 modch aligned,
       2 nmodules fixed bin,
       2 entries (50),
         3 name char (4),
         3 address fixed bin;

dcl  1 skdata,					/* Format of data block in scheduler, pointed to by .crskd */
       2 total_idle_count bit (36),			/* Cumulative total of idle count */
       2 idle_increments bit (36),			/* Number of increments to idle counter */
       2 max_idle_count bit (36),			/* Maximum value of idle counter */
       2 min_idle_count bit (36),			/* Minimum value of idle counter */
       2 interval bit (18),				/* Number of millisecond to start timer with */
       2 icmdat_addr bit (18),			/* Address of icmdat in ic_sampler module */
       2 count bit (18),				/* Number of master dispatcher levels */
       2 dsptab_addr bit (18),			/* Address of master dispatcher table */
       2 savtab_addr bit (18);			/* Address of master dispatcher save area */

dcl  1 icmdat,					/* Format of data block in ic_sampler */
       2 action bit (18),				/* Set code here to request action */
       2 confirm bit (18),				/* Result of action reported here */
       2 enable bit (18),				/* If non-zero, ic_sampling enabled */
       2 table_addr bit (18),				/* Address of table of results */
       2 table_len bit (18),				/* Length of table in words */
       2 shift bit (18),				/* Amount addresses are shifted before counting */
       2 base bit (18),				/* Lowest address monitored */
       2 pad bit (18),
       2 out_of_range bit (36),			/* Count of ic's out of bucket range */
       2 discnt bit (36);				/* Count of ic's and scheduler dis instruction */

dcl  1 buf_meters aligned,
       2 allocate like subr_time_meters,
       2 free like subr_time_meters;

/* Based */

dcl  system_area area based (areap);
dcl  data (0:data_high) bit (36) based (datap);

dcl  1 sched_dsptab unal based (sched_dsptabp),		/* Master dispatchers control table */
       2 dsptab (skdata_count) unal like dsptab;

dcl  1 dsptab unal based (dsptabp),
       2 request bit (1),				/* Level requested to run */
       2 execution bit (1),				/* Level in execution, or interrupted */
       2 secondary_entry_present bit (1),
       2 suppression bit (15),
       2 primary_entry bit (18),
       2 secondary_entry bit (18),
       2 request_count bit (18);

dcl  1 sched_savtab unal based (sched_savtabp),		/* Master dispatchers register save area */
       2 savtab (skdata_count) unal like savtab;

dcl  1 savtab unal based (savtabp),
       2 x1 bit (18),
       2 x2 bit (18),
       2 x3 bit (18),
       2 a bit (18),
       2 q bit (18),
       2 ind bit (18),
       2 ic bit (18),
       2 pad bit (18);

dcl  1 subr_time_meters based aligned,
       2 total_time fixed bin (35),
       2 increments fixed bin (35),
       2 instances_over_1 fixed bin (35),
       2 maximum_time fixed bin;

/* External */

dcl  ioa_ entry options (variable);
dcl  com_err_ entry options (variable);
dcl  sub_err_ entry options (variable);
dcl  get_system_free_area_ entry returns (ptr);
dcl  timer_manager_$sleep entry (fixed bin (71), bit (2));
dcl  get_line_length_$switch entry (ptr, fixed bin (35)) returns (fixed bin);
dcl  db_fnp_sym_util_$get_value entry (char (*)) returns (fixed bin);
dcl  db_fnp_util_$get_special_modch entry (ptr, fixed bin, ptr, fixed bin (35));
dcl  db_fnp_memory_$fetch entry (ptr, fixed bin, fixed bin, fixed bin, ptr, fixed bin (35));
dcl  db_fnp_memory_$store entry (ptr, fixed bin, fixed bin, fixed bin, ptr, char (*), fixed bin, fixed bin (35));
dcl  db_fnp_reader_$get_operand entry (ptr);
dcl  db_fnp_util_$edit_module_addr_force entry (ptr, fixed bin, fixed bin, char (*) var, fixed bin (35));

dcl  iox_$user_output ext ptr;
dcl  error_table_$unimplemented_version ext fixed bin (35);

dcl  cleanup condition;
dcl  conversion condition;

dcl  (addr, bin, bit, divide, fixed, float, hbound, lbound, length, max, min, null, string) builtin;

/* Static */

dcl  crskd fixed bin int static;
dcl  crbtm fixed bin int static;
dcl  etmb fixed bin int static;
dcl  areap ptr int static init (null);
dcl  constants_setup bit (1) int static init ("0"b);
dcl  saved_idle_increments (8) fixed bin (35) int static init ((8) 0);
dcl  saved_idle_count (8) fixed bin (35) int static init ((8) 0);

dcl  1 saved_buf_meters (8) aligned internal static like buf_meters;

/* Constants */

dcl  name char (17) int static options (constant) init ("db_fnp_scheduler_");

dcl  mdisp_desc (7) char (20) int static options (constant) init (
						/* Names of master dispatcher levels */
	"lsla", "dia terminate", "dia special", "hsla", "interval timer", "console", "secondary dispatcher");

dcl  state_msgs (0:7) char (32) int static options (constant) init (
						/* State descriptions derived from some bits */
						/* Req exec first_exec_fnd */
	"",					/* 0   0    0 */
	"",					/* 0   0    1 */
	"In execution",				/* 0   1    0 */
	"Interrupt",				/* 0   1    1 */
	"Requested",				/* 1   0    0 */
	"Requested",				/* 1   0    1 */
	"Requested, in execution",			/* 1   1    0 */
	"Requested, interrupted");			/* 1   1    1 */

/* Entry to read and print the idle time accumulated in the fnp */

idle_time:
     entry (arg_corep, arg_fnp, arg_cmd_infop, arg_expr_infop);

	call setup;

	call get_operand;
	if cmd_info.endline
	then reset_sw = "0"b;
	else if operand = "-reset" | operand = "-rs"
	then do;
	     if corep ^= null ()
	     then do;
		call ioa_ ("Option -reset only allowed on running FNP.");
		go to error_return;
	     end;
	     reset_sw = "1"b;
	end;
	else do;
	     call ioa_ ("Invalid operand: ^a", operand);
	     go to error_return;
	end;

	call read_skdata;

	call fetch (crbtm, 1, addr (fnp_word));
	buf_meter_addr = bin (fnp_word (1));
	if buf_meter_addr = 0
	then do;
	     call ioa_ ("Buffer management meters not available.");
	     return;
	end;

	call fetch (buf_meter_addr, 16, addr (buf_meters));

	if corep = null ()
	then do;					/* Live fnp */
	     delta_cycles = bin (skdata.idle_increments) - saved_idle_increments (fnp);
	     delta_idle_count = bin (skdata.total_idle_count) - saved_idle_count (fnp);
	     alloc_time = buf_meters.allocate.total_time - saved_buf_meters (fnp).allocate.total_time;
	     alloc_updates = buf_meters.allocate.increments - saved_buf_meters (fnp).allocate.increments;
	     alloc_more_than_1 =
		buf_meters.allocate.instances_over_1 - saved_buf_meters (fnp).allocate.instances_over_1;
	     free_time = buf_meters.free.total_time - saved_buf_meters (fnp).free.total_time;
	     free_updates = buf_meters.free.increments - saved_buf_meters (fnp).free.increments;
	     free_more_than_1 = buf_meters.free.instances_over_1 - saved_buf_meters (fnp).free.instances_over_1;
	end;
	else do;
	     delta_cycles = bin (skdata.idle_increments);
	     delta_idle_count = bin (skdata.total_idle_count);
	     alloc_time = buf_meters.allocate.total_time;
	     alloc_updates = buf_meters.allocate.increments;
	     alloc_more_than_1 = buf_meters.allocate.instances_over_1;
	     free_time = buf_meters.free.total_time;
	     free_updates = buf_meters.free.increments;
	     free_more_than_1 = buf_meters.free.instances_over_1;
	end;
	theoretical_max = delta_cycles * bin (skdata.max_idle_count, 36);
	if theoretical_max = 0
	then call ioa_ ("No samples");
	else do;
	     idle_fraction = float (delta_idle_count) / float (theoretical_max);
	     call ioa_ ("Idle time: ^.1f%", 1.0e2 * idle_fraction);
	end;

	total_time = delta_cycles * 1000;
	avg_alloc_time = float (alloc_time) / float (alloc_updates);
	avg_free_time = float (free_time) / float (free_updates);
	avg_all_time = float (alloc_time + free_time) / float (alloc_updates + free_updates);
	pct_alloc = 1.0e2 * float (alloc_time) / float (total_time);
	pct_free = 1.0e2 * float (free_time) / float (total_time);
	pct_alloc_non_idle = pct_alloc / (1.0 - idle_fraction);
	pct_free_non_idle = pct_free / (1.0 - idle_fraction);

	call ioa_ ("Time in buffer management routines^/^32tallocate^44tfree^53ttotal");
	call ioa_ ("Average time per call (msec.)^35t^4.1f^44t^4.1f^54t^4.1f", avg_alloc_time, avg_free_time,
	     avg_all_time);
	call ioa_ ("Percent of FNP^35t^4.1f^44t^4.1f^54t^4.1f", pct_alloc, pct_free, pct_alloc + pct_free);
	call ioa_ ("Percent of non-idle^35t^4.1f^44t^4.1f^54t^4.1f", pct_alloc_non_idle, pct_free_non_idle,
	     pct_alloc_non_idle + pct_free_non_idle);
	call ioa_ ("Percent of calls > 1 msec.^35t^4.1f^44t^4.1f^54t^4.1f",
	     1.0e2 * float (alloc_more_than_1) / float (alloc_updates),
	     1.0e2 * float (free_more_than_1) / float (free_updates),
	     1.0e2 * float (alloc_more_than_1 + free_more_than_1) / float (alloc_updates + free_updates));
	call ioa_ ("Maximum single call (msec.)^35t^4d^44t^4d", buf_meters.allocate.maximum_time,
	     buf_meters.free.maximum_time);

	if reset_sw
	then do;
	     saved_idle_increments (fnp) = bin (skdata.idle_increments);
	     saved_idle_count (fnp) = bin (skdata.total_idle_count);
	     saved_buf_meters (fnp) = buf_meters;
	end;

	return;

/* SAMPLE_TIME Command - Sets or prints the scheduler sampling interval */

sample_time:
     entry (arg_corep, arg_fnp, arg_cmd_infop, arg_expr_infop);

	call setup;

	call get_operand;
	if cmd_info.endline
	then do;					/* No operands - so print it */
	     call read_skdata;
	     call ioa_ ("Sample interval: ^d msec.", bin (skdata.interval));
	     return;
	end;

	on conversion go to bad_interval;
	i = bin (operand);				/* Get new time */
	if i < 1 | i > 1000
	then do;
bad_interval:
	     call ioa_ ("Bad sample interval: ^a", operand);
	     go to error_return;
	end;

	if corep ^= null ()
	then do;
	     call ioa_ ("Sample time can only be set on running FNP.");
	     go to error_return;
	end;

	call read_skdata;				/* Just to be sure its the right scheduler */
	fnp_word (1) = -i;				/* elapsed timer counts up, so this has to be negative */
	call store (skdata_addr + fnp_offset (addr (skdata), addr (skdata.interval)), 1, addr (fnp_word));
	return;

/* IC_SAMPLE Command - Summarize data in various ways */

ic_sample:
     entry (arg_corep, arg_fnp, arg_cmd_infop, arg_expr_infop);

	call setup;
	call get_operand;
	if cmd_info.endline
	then do;
	     call ioa_ ("Argument missing.");
	     go to error_return;
	end;

	if operand = "start"
	then call perform_action (1);
	else if operand = "stop"
	then call perform_action (2);
	else if operand = "reset"
	then call perform_action (3);
	else if operand = "module"
	then go to ic_sample_module;
	else if operand = "histogram" | operand = "hist"
	then go to ic_sample_hist;
	else do;
	     call ioa_ ("Unrecognized option: ^a", operand);
	     go to error_return;
	end;
	return;

/* Summarize data by module */

ic_sample_module:
	on cleanup call clean_up;
	modch.nmodules = hbound (modch.entries, 1);
	call db_fnp_util_$get_special_modch (corep, fnp, addr (modch), code);
	if code ^= 0
	then do;
	     call com_err_ (code, name, "Unable to get module chain.");
	     go to error_return;
	end;

	call read_data;

	module_counts (*) = 0;
	total_count = bin (icmdat.discnt) + bin (icmdat.out_of_range);

	do i = lbound (data, 1) to hbound (data, 1);	/* Check each entry */
	     if data (i) ^= "0"b
	     then do;
		total_count = total_count + bin (data (i));
		ic_addr = i * table_mult + table_base;	/* Address represented by bucket */
		min_offset = 100000;
		min_j = -1;
		do j = 1 to modch.nmodules;		/* Find which module it is in */
		     offset = ic_addr - modch.address (j);
		     if offset >= 0 & offset < min_offset
		     then do;
			min_offset = offset;
			min_j = j;
		     end;
		end;
		if min_j > 0
		then module_counts (min_j) = module_counts (min_j) + bin (data (i));
	     end;
	end;

	if total_count = 0
	then do;
	     call ioa_ ("No data collected.");
	     go to ic_sample_module_return;
	end;
	do i = 1 to modch.nmodules;
	     if module_counts (i) > 0
	     then call ioa_ ("^6a^5.1f%", modch.name (i), 1.00e2 * float (module_counts (i)) / float (total_count));
	end;

	if icmdat.out_of_range ^= "0"b
	then call ioa_ ("^/^6a^5.1f%", "orange", 1.00e2 * float (bin (icmdat.out_of_range)) / float (total_count));

	call ioa_ ("^/^6a^5.1f%", "idle", 1.00e2 * float (bin (icmdat.discnt)) / float (total_count));

ic_sample_module_return:
	call clean_up;
	return;

/* Print a histogram of all data buckets */

ic_sample_hist:
	call get_operand;
	if cmd_info.endline
	then fraction_to_print = 1.0;			/* Print entire histogram */
	else do;
	     on conversion go to bad_fraction;
	     fraction_to_print = float (operand);
	     if fraction_to_print < 0.0 | fraction_to_print > 1.0
	     then do;
bad_fraction:
		call ioa_ ("Invalid fraction to print: ^a", operand);
		go to error_return;
	     end;
	end;

	on cleanup call clean_up;

	call read_data;

	line_length = get_line_length_$switch (iox_$user_output, code);
	if code ^= 0
	then line_length = 132;
	if line_length < 20
	then do;
	     call ioa_ ("Line length (^d) is too short.", line_length);
	     go to ic_sample_hist_return;
	end;
	hist_len = line_length - 18;			/* Amount of line available for chart */

	max_hits = 0;				/* Find largest bucket */
	total_count = 0;
	do i = lbound (data, 1) to hbound (data, 1);
	     if bin (data (i)) > max_hits
	     then max_hits = bin (data (i));
	     total_count = total_count + bin (data (i));
	end;

	if max_hits = 0
	then do;
	     call ioa_ ("No data collected.");
	     go to ic_sample_hist_return;
	end;
	scale = float (max_hits) / float (hist_len);

	if fraction_to_print < 1.0
	then do;					/* Must trim small buckets */
	     hits_to_remove = (1.0 - fraction_to_print) * float (total_count);
	     hits_removed = 0;
	     do while (hits_removed < hits_to_remove);
		min_hits = max_hits;		/* First, find smallest number */
		n_min_hits = 0;
		do i = lbound (data, 1) to hbound (data, 1);
		     if data (i) ^= "0"b
		     then if bin (data (i)) < min_hits
			then do;
			     min_hits = bin (data (i));
			     n_min_hits = 1;
			end;
			else if bin (data (i)) = min_hits
			then n_min_hits = n_min_hits + 1;
		end;
		hits_removed = hits_removed + n_min_hits * min_hits;
		if hits_removed <= hits_to_remove
		then				/* Remove all instances of the minimum */
		     do i = lbound (data, 1) to hbound (data, 1);
						/* Unless it would go over limit */
		     if bin (data (i)) = min_hits
		     then data (i) = "0"b;
		end;
	     end;
	end;

	do i = lbound (data, 1) to hbound (data, 1);
	     if data (i) ^= "0"b
	     then do;
		j = fixed (float (bin (data (i))) / scale);
		j = min (max (1, j), hist_len);	/* Keep it in range */
		ic_addr = table_base + i * table_mult;
		call db_fnp_util_$edit_module_addr_force (corep, fnp, ic_addr, edited_addr, code);
		if code ^= 0
		then do;
		     call com_err_ (code, name, "Unable to convert address ^o.", ic_addr);
		     go to ic_sample_hist_return;
		end;
		x = 1.00e2 * float (bin (data (i))) / float (total_count);
		call ioa_ ("^12a^5.1f ^v(*^)", edited_addr, x, j);
	     end;
	end;

ic_sample_hist_return:
	call clean_up;
	return;

/* MDISP_DATA - Command to print master dispatcher data bases */

mdisp_data:
     entry (arg_corep, arg_fnp, arg_cmd_infop, arg_expr_infop);

	call setup;
	on cleanup call clean_up;

	call read_skdata;
	skdata_count = bin (skdata.count);		/* Number of dispatcher levels */
	allocate sched_dsptab in (system_area);
	allocate sched_savtab in (system_area);

	i = divide (length (string (sched_dsptab)), 18, 17, 0);
	call fetch (bin (skdata.dsptab_addr), i, sched_dsptabp);
	i = divide (length (string (sched_savtab)), 18, 17, 0);
	call fetch (bin (skdata.savtab_addr), i, sched_savtabp);

	first_exec_found = "0"b;			/* Remember previous instances of dsptab.exec */
	something_printed = "0"b;
	do i = 1 to skdata_count;
	     dsptabp = addr (sched_dsptab.dsptab (i));
	     if dsptab.request | dsptab.execution
	     then do;
		savtabp = addr (sched_savtab.savtab (i));
		something_printed = "1"b;
		call ioa_ ("Level ^d: ^a", i, mdisp_desc (i));
		j = bin (dsptab.request || dsptab.execution || first_exec_found);
						/* Compute msg index */
		call ioa_ (" ^a", state_msgs (j));
		if dsptab.execution & first_exec_found
		then do;				/* Found interrupted level */
		     call ioa_ ("  aq ^.3b ^.3b", savtab.a, savtab.q);
		     call ioa_ ("  x1 ^.3b", savtab.x1);
		     call ioa_ ("  x2 ^.3b", savtab.x2);
		     call ioa_ ("  x3 ^.3b", savtab.x3);
		     call ioa_ ("  i  ^.3b", savtab.ind);
		     call ioa_ ("  ic ^.3b", savtab.ic);
		end;
		if dsptab.execution
		then first_exec_found = "1"b;
	     end;
	end;

	if ^something_printed
	then call ioa_ ("FNP was idling");
	call clean_up;
	return;

/* Setup arguments */

setup:
     proc;

	corep = arg_corep;
	fnp = arg_fnp;
	expr_infop = arg_expr_infop;
	cmd_infop = arg_cmd_infop;
	call setup_constants;
	return;

     end setup;

setup_constants:
     proc;

	if constants_setup
	then return;

	crskd = db_fnp_sym_util_$get_value (".crskd");
	crbtm = db_fnp_sym_util_$get_value (".crbtm");
	etmb = db_fnp_sym_util_$get_value ("etmb");
	areap = get_system_free_area_ ();
	unspec (saved_buf_meters) = "0"b;
	constants_setup = "1"b;
	return;

     end setup_constants;

clean_up:
     proc;

	if datap ^= null ()
	then free data;
	if sched_dsptabp ^= null ()
	then free sched_dsptab;
	if sched_savtabp ^= null ()
	then free sched_savtab;
	return;

     end clean_up;

error_return:					/* Non-local error exit */
	call clean_up;
	cmd_info.flush = "1"b;
	return;

/* Read and write memory words */

fetch:
     proc (a, n, p);

dcl  a fixed bin;
dcl  n fixed bin;
dcl  p ptr;

	call db_fnp_memory_$fetch (corep, fnp, a, n, p, code);
	if code = 0
	then return;
	if n = 1
	then call com_err_ (code, name, "Unable to read location ^o.", a);
	else call com_err_ (code, name, "Unable to read locations ^o thru ^o", a, a + n - 1);
	go to error_return;

store:
     entry (a, n, p);

	call db_fnp_memory_$store (corep, fnp, a, n, p, name, 0, code);
	if code = 0
	then return;
	if n = 1
	then call com_err_ (code, name, "Unable to write location ^o.", a);
	else call com_err_ (code, name, "Unable to write locations ^o thru ^o", a, a + n - 1);
	go to error_return;

     end fetch;

/* Get next operand from command line */

get_operand:
     proc;

	call db_fnp_reader_$get_operand (cmd_infop);
	if cmd_info.error
	then go to error_return;
	return;

     end get_operand;

/* Read data block in scheduler module */

read_skdata:
     proc;

dcl  i fixed bin;
dcl  fnp_word (1) bit (18) unal;

	call fetch (crskd, 1, addr (fnp_word));
	skdata_addr = bin (fnp_word (1));		/* Address of table */
	if skdata_addr = 0
	then do;
	     call ioa_ ("Scheduler data not found.");	/* Probably old core image */
	     go to error_return;
	end;
	i = divide (length (string (skdata)), 18, 17, 0); /* Number of fnp words to read */
	call fetch (skdata_addr, i, addr (skdata));
	icmdat_addr = bin (skdata.icmdat_addr);
	icmdat_addr_known = "1"b;
	return;

     end read_skdata;

/* Read data table in ic_sampler module */

read_icmdat:
     proc;

dcl  i fixed bin;
dcl  fnp_word (1) bit (18) unal;

	if ^icmdat_addr_known
	then call read_skdata;
	if icmdat_addr = 0
	then do;
	     call ioa_ ("IC sampling module not configured.");
	     go to error_return;
	end;

	i = divide (length (string (icmdat)), 18, 17, 0);
	call fetch (icmdat_addr, i, addr (icmdat));
	return;

     end read_icmdat;

/* Read the acutal table of ic samples */

read_data:
     proc;

	call read_icmdat;
	if icmdat.table_addr = "0"b | icmdat.table_len = "0"b
	then do;
	     call ioa_ ("No ic sample table found.");
	     go to error_return;
	end;

	data_high = divide (bin (icmdat.table_len), 2, 17, 0) - 1;
	allocate data in (system_area);
	call fetch (bin (icmdat.table_addr), bin (icmdat.table_len), datap);
	table_base = bin (icmdat.base);
	table_mult = 2 ** bin (icmdat.shift);
	return;

     end read_data;

/* Procedure to perform an order to the ic_sampler module */
/* We store an action for it to do, and wait for it to notice it */

perform_action:
     proc (act);

dcl  act fixed bin;

dcl  i fixed bin;
dcl  fnp_word (1) bit (18) unal;

	if corep ^= null ()
	then do;
	     call ioa_ ("Only valid on running FNP.");
	     go to error_return;
	end;

	call read_icmdat;
	fnp_word (1) = "0"b;			/* Reset the conformation word */
	call store (icmdat_addr + fnp_offset (addr (icmdat), addr (icmdat.confirm)), 1, addr (fnp_word));
	fnp_word (1) = bit (bin (act, 18), 18);		/* Set action */
	call store (icmdat_addr + fnp_offset (addr (icmdat), addr (icmdat.action)), 1, addr (fnp_word));
	call fetch (etmb, 1, addr (fnp_word));		/* Read remaining time in timer */
	i = min (1000, 262144 - bin (fnp_word (1)));	/* Compute sleep time */
	call timer_manager_$sleep (1000 * (i + 50), "10"b);
	call read_icmdat;
	if icmdat.confirm = "000001"b3
	then return;				/* It worked */
	if icmdat.confirm = "000000"b3
	then do;
	     call ioa_ ("FNP did not respond to action ^d.", act);
	     go to error_return;
	end;
	call ioa_ ("FNP gave error confirmation ^d.", bin (icmdat.confirm));
	go to error_return;

     end perform_action;

/* Procedure that computes the offset between two Multics pointers in terms of
   18-bit FNP words. */

fnp_offset:
     proc (p1, p2) returns (fixed bin);

dcl  (p1, p2) ptr;
dcl  fnp_mem (0:127) bit (18) unal based (p1);		/* A piece of FNP memory */
dcl  i fixed bin;

	do i = lbound (fnp_mem, 1) to hbound (fnp_mem, 1);
	     if addr (fnp_mem (i)) = p2
	     then return (i);
	end;
	call sub_err_ (code, name, "s", null (), (0), "Unable to compute the offset between ^p and ^p", p1, p2);
	return (100000);

     end fnp_offset;

%include debug_fnp_data;

     end db_fnp_scheduler_;
