/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* DB_FNP_CONVERT_ADDRESS_ - Implements the convert_address (cva) command in debug_fnp */
/* This modules takes an expression and converts it to as many meaningful representations as possible */
/* Written August 1977 by Larry Johnson */

db_fnp_convert_address_: proc (arg_corep, arg_fnp, arg_cmd_infop, arg_expr_infop);

/* Parameters */

dcl  arg_corep ptr;
dcl  arg_fnp fixed bin;
dcl  arg_cmd_infop ptr;
dcl  arg_expr_infop ptr;

/* Automatic */

dcl  corep ptr;
dcl  fnp fixed bin;
dcl  val fixed bin;
dcl  code fixed bin (35);
dcl  bcode bit (36) aligned based (addr (code));
dcl  work char (32) var;
dcl  printed_version (20) char (32) var;
dcl  n_printed fixed bin;
dcl  i fixed bin;
dcl  opname char (6);
dcl  orig_argp ptr;
dcl  orig_argl fixed bin;
dcl  orig_arg char (orig_argl) based (orig_argp);

/* External */

dcl (ioa_, ioa_$nnl, ioa_$rsnnl) entry options (variable);
dcl  db_fnp_eval_ entry (ptr, fixed bin, char (*), ptr, char (*), fixed bin, fixed bin (35));
dcl  db_fnp_util_$edit_module_addr entry (ptr, fixed bin, fixed bin, char (*) var, fixed bin (35));
dcl  db_fnp_edit_inst_$compressed entry (ptr, fixed bin, bit (18), char (*) var);
dcl  db_fnp_opblock_util_$get_name entry (bit (18), char (*));
dcl  db_fnp_reader_$get_operand entry (ptr);

dcl (addr, hbound, length, rtrim, substr) builtin;

	corep = arg_corep;				/* Copy args */
	fnp = arg_fnp;
	expr_infop = arg_expr_infop;
	cmd_infop = arg_cmd_infop;

	call db_fnp_reader_$get_operand (cmd_infop);	/* Be sure one operand */
	if cmd_info.error then go to error_return;
	if cmd_info.endline then do;
	     call ioa_ ("Address missing");
	     go to error_return;
	end;

/* Evaluate each operand in turn. */

	do while (^cmd_info.endline);
	     call db_fnp_eval_ (corep, fnp, operand, expr_infop, "", val, code); /* Get value of arg */
	     if code ^= 0 then go to next_operand;
	     orig_argp = addr (operand);
	     orig_argl = length (operand);
	     if substr (orig_arg, 1, 1) = "'" then do;	/* Fudge apostrophed string */
		orig_argl = orig_argl - 1;
		orig_argp = addr (substr (orig_arg, 2, 1));
		if substr (orig_arg, orig_argl, 1) = "'" then orig_argl = orig_argl - 1;
	     end;
	     call ioa_$nnl ("""^a""", orig_arg);	/* Print origional arg */
	     n_printed = 0;

/* Try octal */

	     call ioa_$rsnnl ("^o", work, (0), val);
	     call test_print;

/* Special test for negative numbers */

	     code = val;
	     if substr (bcode, 19, 1) then do;
		call ioa_$rsnnl ("^.3b", work, (0), substr (bcode, 19));
		call test_print;
	     end;

/* Try module | offset */

	     call db_fnp_util_$edit_module_addr (corep, fnp, val, work, code);
	     if code = 0 then if work ^= "" then call test_print;

/* Try opblock name */

	     code = val;
	     if substr (bcode, 19, 9) = "777"b3 then do;
		call db_fnp_opblock_util_$get_name (substr (bcode, 19, 18), opname);
		if opname ^= "" then do;
		     work = rtrim (opname);
		     call test_print;
		end;
	     end;

/* Try system defined symbols */

	     symbol_tablep = addr (db_fnp_symbols_$db_fnp_symbols_);
	     do i = 1 to symbol_table.cnt;
		symp = addr (symbol_table.entry (i));
		if sym.reloc = reloc_abs then call check_sym (0);
		else if (sym.reloc = reloc_tib) & expr_info.tib_known then call check_sym (expr_info.tib_addr);
		else if (sym.reloc = reloc_hwcm) & expr_info.hwcm_known then call check_sym (expr_info.hwcm_addr);
		else if (sym.reloc = reloc_sfcm) & expr_info.sfcm_known then call check_sym (expr_info.sfcm_addr);
	     end;
	     if expr_info.star_known then if val = expr_info.star_addr then do;
		     work = "*";
		     call test_print;
		end;

/* Try decimal */

	     call ioa_$rsnnl ("^d.", work, (0), val);
	     call test_print;

/* Try machine instruction */

	     code = val;
	     call db_fnp_edit_inst_$compressed (corep, fnp, substr (bcode, 19), work);
	     if work ^= "" then call test_print;

/* All done with operand */

	     call ioa_ ("");
next_operand:
	     call db_fnp_reader_$get_operand (cmd_infop);
	     if cmd_info.error then go to error_return;
	end;
	return;

error_return:
	cmd_info.error = "1"b;
	return;

/* Subroutine to decide whether expr is a valid symbol */

check_sym: proc (reloc);

dcl  reloc fixed bin;
dcl (w1, w2) fixed bin;				/* Range of words in symbol */

	     w1 = sym.value + reloc;
	     w2 = w1 + sym.len -1;
	     if val >= w1 & val <= w2 then do;		/* Value within symbol */
		if val = w1 then work = sym.name;
		else call ioa_$rsnnl ("^a+^o", work, (0), sym.name, val-w1);
		call test_print;
	     end;
	     return;

	end check_sym;

/* Subrotuine that prints a converted value only if it is diffetent */

test_print: proc;

dcl  i fixed bin;

	     if work = orig_arg then return;		/* Same as origional */
	     do i = 1 to n_printed;			/* Scan list already printed */
		if work = printed_version (i) then return;
	     end;
	     call ioa_$nnl (" = ""^a""", work);		/* Print new version */
	     if n_printed < hbound (printed_version, 1) then do; /* And save it */
		n_printed = n_printed + 1;
		printed_version (n_printed) = work;
	     end;
	     return;

	end test_print;

%include debug_fnp_data;

     end db_fnp_convert_address_;
