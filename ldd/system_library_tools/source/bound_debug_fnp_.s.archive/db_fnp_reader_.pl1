/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* DB_FNP_READER_ - Contains entries for reading and parsing debug_fnp commands */

/* Written February 1977 by Larry Johnson */
/* Rewritten January 1978 by Larry Johnson to support multiple commands on a line */

db_fnp_reader_: proc;

/* Arguments */

dcl  arg_cmd_infop ptr;				/* Pointer to command data */

/* Automatic */

dcl  code fixed bin (35);
dcl  inlen fixed bin (21);
dcl  i fixed bin;
dcl  have_cmd_start bit (1);

dcl  next_char char (1) based (cmd_info.commandp);

/* Constants */

dcl  name char (14) int static options (constant) init ("db_fnp_reader_");
dcl  nl char (1) int static options (constant) init ("
");

/* External stuff */

dcl  iox_$get_line entry (ptr, ptr, fixed bin (21), fixed bin (21), fixed bin (35));
dcl  sub_err_ entry options (variable);
dcl  ioa_ entry options (variable);

dcl  iox_$user_input ext ptr;

dcl (addr, index, length, null, search, substr, verify) builtin;

/* Entry to read command line */

get_command: entry (arg_cmd_infop);

	cmd_infop = arg_cmd_infop;

	have_cmd_start = "0"b;
get_command_retry:
	cmd_info.endline, cmd_info.error, cmd_info.opstring = "0"b;

/* Find first character in command name */

get_command_startx:
	go to get_command_start (next_char_type ());
get_command_start (0):				/* Data char */
	if have_cmd_start then go to get_command_name;	/* Good start */
get_command_start (4):				/* White space */
	call skip_char;				/* Flush till command starts */
	go to get_command_startx;
get_command_start (1):				/* Quote */
get_command_start (2):				/* Apostrophe */
	go to bad_command_char;			/* These are invalid */
get_command_start (3):				/* Semi-colon */
	call skip_char;
	have_cmd_start = "1"b;			/* Next char will start command name */
	go to get_command_startx;
get_command_start (5):				/* End of line */
	call iox_$get_line (iox_$user_input, addr (cmd_info.inbuf), length (cmd_info.inbuf), inlen, code);
	if code ^= 0 then do;
	     cmd_info.flush = "1"b;
	     call sub_err_ (code, name, "h", null, (0), "Unable to read from user_input");
	     go to get_command_retry;
	end;
	if inlen > 0 then if substr (cmd_info.inbuf, inlen, 1) = nl then inlen = inlen - 1;
	cmd_info.commandp = addr (cmd_info.inbuf);	/* Start new command scan */
	cmd_info.commandl = inlen;
	have_cmd_start = "1"b;			/* Next char can start command */
	cmd_info.flush = "0"b;
	go to get_command_startx;

/* Count characters in command name */

get_command_name:
	cmd_info.operandp = cmd_info.commandp;		/* Start of name */
	cmd_info.operandl = 0;
get_command_charx:
	go to get_command_char (next_char_type ());
get_command_char (0):				/* Data char */
	cmd_info.operandl = cmd_info.operandl + 1;	/* Include in name */
	call skip_char;
	if cmd_info.operandl = 1 then			/* If first character */
	     if operand = "=" then return;		/* Don't required whitespace after '=' command */
	go to get_command_charx;
get_command_char (1):				/* Quote */
get_command_char (2):				/* Apostrophe */
	go to bad_command_char;
get_command_char (3):				/* Semi-colon */
get_command_char (4):				/* White space */
get_command_char (5):				/* End of line */
	if cmd_info.operandl = 0 then go to get_command_retry; /* Start all over if null command */
	else return;				/* Otherwise command name is now found */

bad_command_char:
	call ioa_ ("Invalid ^a in command name.", next_char);
	cmd_info.flush = "1"b;
	go to get_command_retry;

/* Entry to get one operand from command line */

get_operand: entry (arg_cmd_infop);

	cmd_infop = arg_cmd_infop;
	cmd_info.opstring, cmd_info.endline, cmd_info.error = "0"b;
	cmd_info.operandp = null;
	cmd_info.operandl = 0;

/* Find start of an operand */

get_operand_startx:
	go to get_operand_start (next_char_type ());
get_operand_start (0):				/* Data char */
	cmd_info.operandp = cmd_info.commandp;		/* Operand starts here */
	go to get_operand_charx;
get_operand_start (1):				/* Quote */
	go to get_operand_quote;			/* Handel quoted operand */
get_operand_start (2):				/* Apostrophe */
	go to get_operand_apost;			/* Handle apostrophed operand */
get_operand_start (3):				/* Semi-colon */
get_operand_start (5):				/* End of line */
	cmd_info.endline = "1"b;			/* No more operands */
	return;
get_operand_start (4):				/* White space */
	call skip_char;
	go to get_operand_startx;			/* Keep looking */

/* Regular vanilla operand. count its characters */

get_operand_charx:
	go to get_operand_char (next_char_type ());
get_operand_char (0):				/* Data char */
	cmd_info.operandl = cmd_info.operandl + 1;	/* Operand 1 longer */
	call skip_char;
	go to get_operand_charx;
get_operand_char (1):				/* Quote */
get_operand_char (2):				/* Apostrophe */
	call ioa_ ("Invalid ^a in middle of operand", next_char);
	go to operand_err;
get_operand_char (3):				/* Semi colon */
get_operand_char (4):				/* White space */
get_operand_char (5):				/* End of line */
	return;					/* All indicate end of operand */

/* Here when operand starts with quuote. A dequoted version is reconstructed. */

get_operand_quote:
	cmd_info.operandp = addr (cmd_info.opbuf);	/* Will build unquoted string here */
	cmd_info.opstring = "1"b;
	call skip_char;
get_quote_charx:
	go to get_quote_char (next_char_type ());
get_quote_char (0):					/* Data char */
get_quote_char (2):					/* Apostrophe */
get_quote_char (3):					/* Semi colon */
get_quote_char (4):					/* White space */
	cmd_info.operandl = cmd_info.operandl + 1;	/* All are operand characters */
	substr (operand, cmd_info.operandl, 1) = next_char;
	call skip_char;
	go to get_quote_charx;
get_quote_char (5):					/* End of line */
	call ioa_ ("Unmatched quotes");
	go to operand_err;
get_quote_char (1):					/* Quote */
	call skip_char;				/* May be double quote or end of string */

/* Be sure quoted string terminates correctly */

	go to char_after_quote (next_char_type ());
char_after_quote (0):				/* Data char */
char_after_quote (2):				/* Apostrophe */
	call ioa_ ("Invalid ^a after quoted string", next_char);
	go to operand_err;
char_after_quote (1):				/* Quote */
	go to get_quote_char (0);			/* Treat as quote data char */
char_after_quote (3):				/* Semi colon */
char_after_quote (4):				/* White space */
char_after_quote (5):				/* End of line */
	return;					/* All are valid end of quoted string */

/* Here when operand starts with apostrophe. count its characters */

get_operand_apost:
	cmd_info.operandl = 1;			/* Include apostrophe in operand */
	cmd_info.operandp = cmd_info.commandp;
	call skip_char;
get_apost_charx:
	go to get_apost_char (next_char_type ());
get_apost_char (0):					/* Data char */
get_apost_char (4):					/* White space */
	cmd_info.operandl = cmd_info.operandl + 1;	/* Treat as data */
	call skip_char;
	go to get_apost_charx;
get_apost_char (1):					/* Quote */
get_apost_char (3):					/* Semi colon */
	call ioa_ ("Invalid ^a in apostrophed string", next_char);
	go to operand_err;
get_apost_char (5):					/* End of line */
	call ioa_ ("Unmatched apostrophes");
	go to operand_err;
get_apost_char (2):					/* Should be closing apostrophe */
	cmd_info.operandl = cmd_info.operandl + 1;
	call skip_char;

/* Be sure qpostrophed string ends correctly */

	go to char_after_apost (next_char_type ());
char_after_apost (0):				/* Data char */
char_after_apost (1):				/* Quote */
char_after_apost (2):				/* Apostrophe */
	call ioa_ ("Invalid ^a after apostrophed string", next_char);
	go to operand_err;
char_after_apost (3):				/* Sime colon */
char_after_apost (4):				/* White space */
char_after_apost (5):				/* End of line */
	return;					/* All valid ends of apostrophed operand */

/* Here when some error deteched in the operand */

operand_err:
	cmd_info.error = "1"b;
	cmd_info.flush = "1"b;
	return;

/* Function which returns a code indicating the type of the next character on the command line */
/* Codes are:
   0 = data character
   1 = quote
   2 = apostrophe
   3 = semi-colon
   4 = white space
   5 = end of line */

next_char_type: proc returns (fixed bin);

	     if cmd_info.flush then return (5);		/* End of line */
	     if cmd_info.commandl = 0 then return (5);
	     if next_char = """" then return (1);
	     if next_char = "'" then return (2);
	     if next_char = ";" then return (3);
	     if next_char = " " | next_char = "	" | next_char = nl then return (4);
	     if unspec (next_char) = "014"b3 then return (4);
	     return (0);				/* Must be data */

	end next_char_type;


/* Skip next char in input stream */

skip_char: proc;

	     cmd_info.commandp = substraddr (command, 2);
	     cmd_info.commandl = cmd_info.commandl - 1;
	     return;

	end skip_char;

/* Simulate substraddr builtin temporarily */

substraddr: proc (c, n) returns (ptr);

dcl  c char (*);
dcl  n fixed bin;
dcl  ca (n) char (1) unal based (addr (c));

	     return (addr (ca (n)));

	end substraddr;

%include debug_fnp_data;
     end db_fnp_reader_;
