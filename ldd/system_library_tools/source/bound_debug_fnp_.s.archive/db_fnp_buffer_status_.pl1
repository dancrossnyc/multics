/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
db_fnp_buffer_status_: proc (arg_corep, arg_fnp, arg_cmd_infop, arg_expr_infop);

/* Coded 7/25/78 by J. Stern */


/* Arguments */

dcl  arg_corep ptr;
dcl  arg_fnp fixed bin;
dcl  arg_cmd_infop ptr;
dcl  arg_expr_infop ptr;


/* Automatic */

dcl  corep ptr;
dcl  fnp fixed bin;
dcl (total_icpl, total_dcpl, total_ocnt) fixed bin;
dcl (max_icpl, max_dcpl, max_ocnt) fixed bin;
dcl (max_icpl_line, max_dcpl_line, max_ocnt_line) fixed bin;
dcl (icpl, dcpl, ocnt, total) fixed bin;
dcl  code fixed bin (35);
dcl (ttb_addr, tte_addr, tib_addr) fixed bin;
dcl  line fixed bin;
dcl (n_free, n_small) fixed bin;
dcl  ttbx fixed bin;
dcl  brief_sw bit (1) aligned;
dcl  ttb_temp (0:599) fixed bin (17) unal;
dcl  temp (0:99) fixed bin (17) unal;

/* Internal static */

dcl  have_symbols bit (1) aligned int static init ("0"b);
dcl (crnbf, crnbs, crttb, crtte) fixed bin int static;
dcl (t_icpl, t_dcpl, t_ocnt, t_sfcm, t_line) fixed bin int static;
dcl (sf_ib0, sf_ib1) fixed bin int static;
dcl (tib_words_needed, sfcm_words_needed) fixed bin int static;


/* Constants */

dcl  whoami char (15) int static options (constant) init ("db_fnp_analyze_");


/* Builtins */

dcl (addr, null, divide, max, rtrim, substr) builtin;


/* Entries */

dcl  com_err_ entry options (variable);
dcl  ioa_ entry options (variable);
dcl  ioa_$rsnnl entry options (variable);
dcl  db_fnp_sym_util_$get_value entry (char (*)) returns (fixed bin);
dcl  db_fnp_memory_$fetch entry (ptr, fixed bin, fixed bin, fixed bin, ptr, fixed bin (35));
dcl  db_fnp_reader_$get_operand entry (ptr);
dcl  db_fnp_util_$cv_line_no entry (ptr, fixed bin, fixed bin, char (*), fixed bin (35));

%include debug_fnp_data;

	call setup;

	brief_sw = "0"b;
	call get_operand;
	if ^cmd_info.endline
	then do;
	     if operand = "-bf" | operand = "-brief"
	     then brief_sw = "1"b;
	     else do;
		call com_err_ (0, "", "Invalid operand:  ^a", operand);
		go to error_exit;
	     end;
	end;

	total_icpl, total_dcpl, total_ocnt = 0;
	max_icpl, max_icpl_line, max_dcpl, max_dcpl_line, max_ocnt, max_ocnt_line = 0;

	call fetch_words (crttb, 1, addr (temp));
	ttb_addr = temp (0);
	if ttb_addr = 0
	then do;
	     call com_err_ (0, whoami, "No tib table address.");
	     go to error_exit;
	end;

	call fetch_words (crtte, 1, addr (temp));
	tte_addr = temp (0);
	if tte_addr < ttb_addr
	then do;
	     call com_err_ (0, whoami, "Invalid tib table end address.  ^o", tte_addr);
	     go to error_exit;
	end;

	call fetch_words (crnbf, 1, addr (temp));
	n_free = temp (0);
	call fetch_words (crnbs, 1, addr (temp));
	n_small = temp (0);

	call ioa_ ("^d free", n_free);
	call ioa_ ("^d small space", n_small);

	call fetch_words (ttb_addr, tte_addr-ttb_addr, addr (ttb_temp));

	call ioa_ ("^/LINE^-INPUT^-DIA^-OUTPUT^-TOTAL^/");

	do ttbx = 0 to tte_addr-ttb_addr-1 by 2;
	     tib_addr = ttb_temp (ttbx);
	     call fetch_words (tib_addr, tib_words_needed, addr (temp));
	     line = temp (t_line);

	     icpl = max (0, temp (t_icpl));
	     dcpl = max (0, temp (t_dcpl));
	     ocnt = max (0, temp (t_ocnt));

	     if line > 512
	     then do;
		call fetch_words ((temp (t_sfcm)), sfcm_words_needed, addr (temp));
		if temp (sf_ib0) ^= 0 then icpl = icpl + 1;
		if temp (sf_ib1) ^= 0 then icpl = icpl + 1;
	     end;

	     total_icpl = total_icpl + icpl;
	     total_dcpl = total_dcpl + dcpl;
	     total_ocnt = total_ocnt + ocnt;

	     if brief_sw
	     then do;
		if icpl > max_icpl
		then do;
		     max_icpl = icpl;
		     max_icpl_line = line;
		end;
		if dcpl > max_dcpl
		then do;
		     max_dcpl = dcpl;
		     max_dcpl_line = line;
		end;
		if ocnt > max_ocnt
		then do;
		     max_ocnt = ocnt;
		     max_ocnt_line = line;
		end;
	     end;

	     else do;
		total = icpl + dcpl + ocnt;
		if total ^= 0
		then call ioa_ ("^a^-^3d^-^3d^-^3d^-^3d", chan_name (line), icpl, dcpl, ocnt, total);
	     end;

	end;

	total = total_icpl + total_dcpl + total_ocnt;
	call ioa_ ("^/TOTAL^-^3d^-^3d^-^3d^-^3d", total_icpl, total_dcpl, total_ocnt, total);

	if brief_sw & max_icpl+max_dcpl+max_ocnt > 0
	then do;
	     call ioa_ ("^/Lines holding most buffers:");
	     if max_icpl > 0
	     then call ioa_ ("^d input for line ^a", max_icpl, chan_name (max_icpl_line));
	     if max_dcpl > 0
	     then call ioa_ ("^d dia for line ^a", max_dcpl, chan_name (max_dcpl_line));
	     if max_ocnt > 0
	     then call ioa_ ("^d output for line ^a", max_ocnt, chan_name (max_ocnt_line));
	end;

	return;

error_exit:
	cmd_info.flush = "1"b;

setup:	proc;

	     corep = arg_corep;
	     fnp = arg_fnp;
	     cmd_infop = arg_cmd_infop;

	     if ^have_symbols
	     then do;
		crttb = db_fnp_sym_util_$get_value (".crttb");
		crtte = db_fnp_sym_util_$get_value (".crtte");
		crnbf = db_fnp_sym_util_$get_value (".crnbf");
		crnbs = db_fnp_sym_util_$get_value (".crnbs");

		t_icpl = db_fnp_sym_util_$get_value ("t.icpl");
		t_dcpl = db_fnp_sym_util_$get_value ("t.dcpl");
		t_ocnt = db_fnp_sym_util_$get_value ("t.ocnt");
		t_sfcm = db_fnp_sym_util_$get_value ("t.sfcm");
		t_line = db_fnp_sym_util_$get_value ("t.line");

		sf_ib0 = db_fnp_sym_util_$get_value ("sf.ib0");
		sf_ib1 = db_fnp_sym_util_$get_value ("sf.ib1");

		tib_words_needed = max (t_icpl, t_dcpl, t_ocnt, t_sfcm, t_line) + 1;
		sfcm_words_needed = max (sf_ib0, sf_ib1) + 1;

		have_symbols = "1"b;
	     end;

	end;					/* setup */

fetch_words: proc (loc, len, p);

dcl  loc fixed bin;
dcl  len fixed bin;
dcl  p ptr;

	     call db_fnp_memory_$fetch (corep, fnp, loc, len, p, code);
	     if code ^= 0
	     then do;
		call com_err_ (code, whoami, "Unable to read location ^o.", loc);
		go to error_exit;
	     end;

	end;					/* fetch_words */



get_operand: proc;

	     call db_fnp_reader_$get_operand (cmd_infop);
	     if cmd_info.error
	     then go to error_exit;

	end;					/* get_operand */

chan_name: proc (line) returns (char (32) var);

dcl  line fixed bin;
dcl  line_name char (32);

	     call db_fnp_util_$cv_line_no (corep, fnp, line, line_name, code);
	     if code ^= 0 then call ioa_$rsnnl ("^o", line_name, (0), line);
	     return (rtrim (line_name));

	end chan_name;

     end;						/* db_fnp_buffer_status_ */

