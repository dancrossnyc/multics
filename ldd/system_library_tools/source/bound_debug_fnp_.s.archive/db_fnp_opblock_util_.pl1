/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* DB_FNP_OPBLOCK_UTIL_ - Procedure to display fnp memory in opblock format */

/* Written March 1977 by Larry Johnson */

db_fnp_opblock_util_: proc;

/* Parameters */

dcl  arg_corep ptr;					/* Pointer to segment contining core image */
dcl  arg_fnp fixed bin;				/* Number of a running fnp */
dcl  arg_fnp_addr fixed bin;				/* The starting address being displayed */
dcl  arg_fnp_len fixed bin;				/* The number of words */
dcl  arg_data_ptr ptr;				/* Pointer to the words to display */
dcl  arg_code fixed bin (35);
dcl  arg_opname char (*);
dcl  arg_opval bit (18);

/* Automatic */

dcl  corep ptr;
dcl  fnp fixed bin;
dcl  fnp_addr fixed bin;
dcl  fnp_len fixed bin;
dcl  data_ptr ptr;
dcl  code fixed bin (35);
dcl  i fixed bin;
dcl  edited_addr char (32) var;
dcl  opblock_addr char (32) var;
dcl  opval bit (18);
dcl  opname char (6);

dcl  fnp_mem (fnp_len) bit (18) unal based (data_ptr);


/* External stuff */

dcl  ioa_ entry options (variable);
dcl  db_fnp_util_$edit_module_addr entry (ptr, fixed bin, fixed bin, char (*) var, fixed bin (35));

dcl  error_table_$noentry ext fixed bin (35);

dcl (addr, bin, bit, hbound, lbound, rtrim, substr) builtin;


/* Entry to display memory in opblock format */

display:	entry (arg_corep, arg_fnp, arg_fnp_addr, arg_fnp_len, arg_data_ptr, arg_code);

	corep = arg_corep;
	fnp = arg_fnp;
	fnp_addr = arg_fnp_addr;
	fnp_len = arg_fnp_len;
	data_ptr = arg_data_ptr;
	opblock_tablep = addr (db_fnp_opblocks_$);

/* Loop thru all the words */

	do i = 1 to fnp_len;
	     if substr (fnp_mem (i), 1, 9) = "777"b3 then do;
		call get_name (fnp_mem (i), opname);
		edited_addr = rtrim (opname);
	     end;
	     else do;
		call db_fnp_util_$edit_module_addr (corep, fnp, bin (fnp_mem (i)), edited_addr, code);
		if code ^= 0 then edited_addr = "";
		else edited_addr = "  " || edited_addr;
	     end;
	     call db_fnp_util_$edit_module_addr (corep, fnp, fnp_addr, opblock_addr, code);
	     if code ^= 0 then opblock_addr = "";
	     call ioa_ ("^5w ^13a  ^.3b  ^a", fnp_addr, opblock_addr, fnp_mem (i), edited_addr);
	     fnp_addr = fnp_addr + 1;
	end;

	arg_code = 0;
	return;


/* Entry to lookup a symbol and returns its value as an opblock number */

lookup:	entry (arg_opname, arg_opval, arg_code);

	opblock_tablep = addr (db_fnp_opblocks_$);
	do i = lbound (opblock_table.name, 1) to hbound (opblock_table.name, 1);
	     if opblock_table.name (i) = arg_opname then do;
		substr (opval, 1, 9) = "777"b3;
		substr (opval, 10, 9) = bit (bin (i, 9), 9);
		arg_opval = opval;
		arg_code = 0;
		return;
	     end;
	end;
	arg_opval = "0"b;
	arg_code = error_table_$noentry;
	return;


/* Entry that given an opblock, returns its name */

get_name:	entry (arg_opval, arg_opname);

	opval = arg_opval;
	arg_opname = "";

	opblock_tablep = addr (db_fnp_opblocks_$);
	if substr (opval, 1, 9) ^= "777"b3 then return;
	i = bin (substr (opval, 10, 9));
	if i < lbound (opblock_table.name, 1) | i > hbound (opblock_table.name, 1) then return;
	arg_opname = opblock_table.name (i);
	return;

/* Debugging entry that will print the opblock table. This is just used as a
   command to check that the procedure that constructs the table works */
/* This entry is not retained. */

print_table: entry;

	opblock_tablep = addr (db_fnp_opblocks_$);
	do i = lbound (opblock_table.name, 1) to hbound (opblock_table.name, 1);
	     call ioa_ ("^2o ^a", i, opblock_table.name (i));
	end;
	return;

%include debug_fnp_data;

     end db_fnp_opblock_util_;
