/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* DB_FNP_TRACE_ - Implements db_fnp commands that deal with the trace table */
/* Written 1977 by Larry Johnson */
/* Modified August 1979 by Larry Johnson to make use of .crtsz and to improve command interface */

db_fnp_trace_: proc;

/* Parameters */

dcl  arg_corep ptr;
dcl  arg_fnp fixed bin;
dcl  arg_cmd_infop ptr;
dcl  arg_expr_infop ptr;

/* Automatic */

dcl  corep ptr;
dcl  fnp fixed bin;
dcl (i, j) fixed bin;
dcl  code fixed bin (35);
dcl  trace_mask bit (18) unal;			/* Current mask word */
dcl  temp_name char (16);
dcl  set bit (1);
dcl  trace_sw (1) bit (18) unal;
dcl  tcur fixed bin;
dcl  mem_word (1) bit (18) unal;
dcl (print_start, print_count) fixed bin;		/* Args on print trace */
dcl  trace_message char (128) var;
dcl  trace_req_msgp ptr init (null ());
dcl  trace_req_msg_cnt fixed bin;
dcl (start_given, count_given) bit (1);
dcl  something_printed bit (1);

dcl 1 modch aligned,				/* Module table required by format_fnp_trace_msg_ */
    2 nmodules fixed bin init (30),
    2 entries (30),
      3 name char (4),
      3 address fixed bin;

/* Constants */

dcl  mask_name (10) char (4) int static options (constant) init (
     "sked", "dia", "intp", "util", "lsla", "hsla", "cons", "trac", "init", "ptrc");
dcl  name char (13) int static options (constant) init ("db_fnp_trace_");

/* Static */

dcl  symbols_looked_up bit (1) int static init ("0"b);
dcl  crtra fixed bin int static;			/* Address of trace mask */
dcl  crtsw fixed bin int static;			/* Global trace switch */
dcl  crtrb fixed bin int static;			/* Base of trace table */
dcl  crtrc fixed bin int static;			/* Current entry */
dcl  crmem fixed bin int static;			/* Last word of memory */
dcl  crtsz fixed bin int static;			/* Size of trace table */
dcl  h1mb fixed bin int static;			/* Hsla 1 mailbox - used as lower bound on address checking */
dcl  free_areap ptr int static;			/* Address of temp area */
dcl  free_area area based (free_areap);

/* Stuff associated with trace table */

dcl  trace_tab_size fixed bin;			/* Its length */
dcl  trace_tab_start fixed bin;			/* Starting memory addrress */
dcl  trace_tab_current fixed bin;			/* Current entry */
dcl  trace_tab_cnt fixed bin;				/* Number of entries */
dcl  trace_tabp ptr init (null);			/* Address of table */
dcl  trace_tab (trace_tab_size) bit (18) unal based (trace_tabp);

/* Format of a trace message entry */

dcl  tmsgp ptr;
dcl 1 tmsg unal based (tmsgp),
    2 module bit (6) unal,				/* Module logging message */
    2 type bit (6) unal,				/* Message number */
    2 length bit (6) unal,				/* Number of data words */
    2 time bit (18) unal,
    2 data (1) bit (18) unal;				/* Array of tmsg.length words */
dcl  flag_word bit (18) unal based (tmsgp);		/* For checking sentinels */
dcl  logical_end bit (18) int static options (constant) init ("525252"b3);
dcl  physical_end bit (18) int static options (constant) init ("525250"b3);

/* Based */

dcl  trace_req_msg (10) char (32) var based (trace_req_msgp);

/* External */

dcl  db_fnp_memory_$fetch entry (ptr, fixed bin, fixed bin, fixed bin, ptr, fixed bin (35));
dcl  db_fnp_memory_$store entry (ptr, fixed bin, fixed bin, fixed bin, ptr, char (*), fixed bin, fixed bin (35));
dcl  db_fnp_sym_util_$get_value entry (char (*)) returns (fixed bin);
dcl  db_fnp_reader_$get_operand entry (ptr);
dcl  db_fnp_eval_ entry (ptr, fixed bin, char (*), ptr, char (*), fixed bin, fixed bin (35));
dcl  db_fnp_util_$get_special_modch entry (ptr, fixed bin, ptr, fixed bin (35));
dcl  format_fnp_trace_msg_ entry (ptr, ptr, char (*) var);
dcl (ioa_, ioa_$nnl) entry options (variable);
dcl  com_err_ entry options (variable);
dcl  get_system_free_area_ entry returns (ptr);

dcl  cleanup condition;

dcl (addr, bin, hbound, length, max, min, null, substr, unspec) builtin;

/* Entry to print the trace table */

print_trace: entry (arg_corep, arg_fnp, arg_cmd_infop, arg_expr_infop);

	call init;

	on cleanup call clean_up;

	if corep = null then do;			/* Be sure tracing is disabled for running fnp */
	     call fetch (crtsw, 1, addr (trace_sw (1)));
	     if trace_sw (1) = "0"b then do;
		call ioa_ ("Tracing not disabled. Use stop_trace first.");
		go to error_return;
	     end;
	end;

	print_start = 1;
	print_count = -1;
	start_given, count_given = "0"b;

	call get_operand;
	do while (^cmd_info.endline);
	     if substr (operand, 1, 1) = "/" then do;	/* scan string */
		if trace_req_msgp = null () then do;
		     allocate trace_req_msg in (free_area);
		     trace_req_msg_cnt = 0;
		end;
		if trace_req_msg_cnt = hbound (trace_req_msg, 1) then do;
		     call ioa_ ("Too many strings requested.");
		     go to error_return;
		end;
		trace_req_msg_cnt = trace_req_msg_cnt + 1;
		i = length (operand) - 1;
		if substr (operand, length (operand), 1) = "/" then i = i - 1;
		trace_req_msg (trace_req_msg_cnt) = substr (operand, 2, i);
	     end;
	     else if ^start_given then do;
		call db_fnp_eval_ (corep, fnp, operand, expr_infop, "", print_start, code);
		if code ^= 0 then go to error_return;
		start_given = "1"b;
	     end;
	     else if ^count_given then do;
		call db_fnp_eval_ (corep, fnp, operand, expr_infop, "", print_count, code);
		if code ^= 0 then go to error_return;
		count_given = "1"b;
	     end;
	     else do;
		call ioa_ ("Unrecognized operand: ^a", operand);
		go to error_return;
	     end;
	     call get_operand;
	end;

	call db_fnp_util_$get_special_modch (corep, fnp, addr (modch), code);
	if code ^= 0 then modch.nmodules = 0;

	call capture_trace;				/* Find trace table */
	if print_start < 0 then print_start = trace_tab_cnt + print_start + 1; /* Measuring from end */
	print_start = max (1, print_start);
	if print_start > trace_tab_cnt then do;
	     call ioa_ ("Trace table contains only ^d entries.", trace_tab_cnt);
	     go to error_return;
	end;

	i = 1;
	tcur = trace_tab_current;
	tmsgp = addr (trace_tab (tcur - trace_tab_start + 1));
	do while (i < print_start);			/* Loop past unneeded entries at start */
	     if flag_word = physical_end then tcur = trace_tab_start;
	     else do;
		i = i + 1;
		tcur = tcur + bin (tmsg.length) + 2;
	     end;
	     tmsgp = addr (trace_tab (tcur - trace_tab_start + 1));
	end;

	i = 0;
	something_printed = "0"b;
	do while (i ^= print_count);			/* Loop till enough printed */
	     if flag_word = logical_end then go to print_trace_end;
	     else if flag_word = physical_end then tcur = trace_tab_start;
	     else do;
		call format_fnp_trace_msg_ (tmsgp, addr (modch), trace_message);
		if trace_req_msgp ^= null () then do;	/* strings requested */
		     do j = 1 to trace_req_msg_cnt;
			if index (trace_message, trace_req_msg (j)) > 0 then
			     go to print_it;
		     end;
		     go to skip_it;
		end;
print_it:		call ioa_ ("^a", trace_message);
		something_printed = "1"b;
skip_it:		i = i + 1;
		tcur = tcur + bin (tmsg.length) + 2;
	     end;
	     tmsgp = addr (trace_tab (tcur - trace_tab_start + 1));
	end;

print_trace_end:
	if trace_req_msgp ^= null & ^something_printed then do;
	     call ioa_ ("No trace messages match request.");
	     go to error_return;
	end;

	call clean_up;
	return;

/* Entry to set and/or print the trace mask */

mask:	entry (arg_corep, arg_fnp, arg_cmd_infop, arg_expr_infop);

	call init;
	call fetch (crtra, 1, addr (trace_mask));	/* Read current mask */
	call get_operand;				/* Get first openard */
	if cmd_info.endline then do;			/* No operands, print mask */
	     call ioa_$nnl ("Trace mask is ^.3b:", trace_mask);
	     do i = 1 to hbound (mask_name, 1);
		if substr (trace_mask, i, 1) then call ioa_$nnl (" ^a", mask_name (i));
	     end;
	     call ioa_ ("");
	     return;
	end;

	do while (^cmd_info.endline);			/* Parse operands for new mask */
	     if substr (operand, 1, 1) = "+" then do;	/* Must set bit */
		set = "1"b;
		temp_name = substr (operand, 2);
	     end;
	     else if substr (operand, 1, 1) = "^" | substr (operand, 1, 1) = "-" then do; /* Reset */
		set = "0"b;
		temp_name = substr (operand, 2);
	     end;
	     else do;				/* Default is to set */
		set = "1"b;
		temp_name = operand;
	     end;
	     if temp_name = "all" then do;
		if set then trace_mask = "777777"b3;
		else trace_mask = "0"b;
		go to next_trace_name;
	     end;
	     else if temp_name = "none" then do;
		if set then trace_mask = "0"b;
		else trace_mask = "777777"b3;
		go to next_trace_name;
	     end;
	     else do i = 1 to hbound (mask_name, 1);	/* Look op name */
		if mask_name (i) = temp_name then do;	/* Got it */
		     substr (trace_mask, i, 1) = set;
		     go to next_trace_name;
		end;
	     end;
	     call ioa_ ("Invalid trace mask name: ^a", temp_name);
	     go to error_return;
next_trace_name:
	     call get_operand;
	end;
	call store (crtra, 1, addr (trace_mask));	/* Store result */
	return;

/* Entries to turn tracing on and off */

start_trace: entry (arg_corep, arg_fnp, arg_cmd_infop, arg_expr_infop);

	trace_sw (1) = "0"b;
start_or_stop_trace:
	call init;
	call store (crtsw, 1, addr (trace_sw (1)));
	return;

stop_trace: entry (arg_corep, arg_fnp, arg_cmd_infop, arg_expr_infop);

	trace_sw (1) = "000001"b3;
	go to start_or_stop_trace;

/* Initializatioon */

init:	proc;

	     corep = arg_corep;
	     fnp = arg_fnp;
	     cmd_infop = arg_cmd_infop;
	     expr_infop = arg_expr_infop;
	     if symbols_looked_up then return;
	     crtra = db_fnp_sym_util_$get_value (".crtra");
	     crtsw = db_fnp_sym_util_$get_value (".crtsw");
	     crtrb = db_fnp_sym_util_$get_value (".crtrb");
	     crtrc = db_fnp_sym_util_$get_value (".crtrc");
	     crmem = db_fnp_sym_util_$get_value (".crmem");
	     crtsz = db_fnp_sym_util_$get_value (".crtsz");
	     h1mb = db_fnp_sym_util_$get_value ("h1mb");
	     free_areap = get_system_free_area_ ();
	     symbols_looked_up = "1"b;
	     return;

	end init;

/* Read and write memory words */

fetch:	proc (a, n, p);

dcl  a fixed bin;
dcl  n fixed bin;
dcl  p ptr;

	     call db_fnp_memory_$fetch (corep, fnp, a, n, p, code);
	     if code = 0 then return;
	     if n = 1 then call com_err_ (code, name, "Unable to read location ^o.", a);
	     else call com_err_ (code, name, "Unable to read locations ^o thru ^o", a, a+n-1);
	     go to error_return;

store:	     entry (a, n, p);

	     call db_fnp_memory_$store (corep, fnp, a, n, p, name, 0, code);
	     if code = 0 then return;
	     if n = 1 then call com_err_ (code, name, "Unable to write location ^o.", a);
	     else call com_err_ (code, name, "Unable to write locations ^o thru ^o", a, a+n-1);
	     go to error_return;

	end fetch;

/* Get next operand from command line */

get_operand: proc;

	     call db_fnp_reader_$get_operand (cmd_infop);
	     if cmd_info.error then go to error_return;
	     return;

	end get_operand;

error_return:
	cmd_info.flush = "1"b;
	call clean_up;
	return;

clean_up:	proc;

	     if trace_tabp ^= null () then free trace_tab;
	     if trace_req_msgp ^= null () then free trace_req_msg;
	     return;

	end clean_up;

/* Procedure to "capture" the trace table */

capture_trace: proc;

dcl  offset fixed bin;				/* Offset to current section */
dcl  p ptr;
dcl  mem_size fixed bin;

	     call fetch (crtrb, 1, addr (mem_word));	/* Read start address */
	     trace_tab_start = bin (mem_word (1));
	     if trace_tab_start = 0 then do;
		call ioa_ ("No trace table.");
		go to error_return;
	     end;
	     call fetch (crtrc, 1, addr (mem_word));	/* Read current pointer */
	     trace_tab_current = bin (mem_word (1));
	     tcur = trace_tab_current;
	     call fetch (crmem, 1, addr (mem_word));
	     mem_size = bin (mem_word (1));

	     if (trace_tab_start < h1mb) |		/* Gullability checks on pointers */
	     (trace_tab_start > mem_size) |
	     (trace_tab_current < h1mb) |
	     (trace_tab_current > mem_size) |
	     (trace_tab_current < trace_tab_start) then do;
bad_pointers:	call ioa_ ("Unable to capture trace buffers: pointers inconsistent.");
		go to error_return;
	     end;

	     call fetch (crtsz, 1, addr (mem_word));	/* Read trace size */
	     if mem_word (1) = "0"b then do;

/* The following code is for pre-MR8 systems where trace size is not known */

		offset = 0;
		trace_tab_size = 1024;		/* Read first 1024 words */
		allocate trace_tab in (free_area);
fetch_more:	call fetch (trace_tab_start+offset, 1024, addr (trace_tab (offset+1))); /* Read next 1024 words */
		if (trace_tab_current - trace_tab_start) >= trace_tab_size then do;
						/* Dont have section with current entry yet */
capture_more:					/* So must grow table */
		     trace_tab_size = trace_tab_size+1024;
		     allocate trace_tab in (free_area) set (p); /* Allocate bigger one */
		     trace_tab_size = trace_tab_size - 1024 ; /* Revert to smaller size temporarily */
		     unspec (p -> trace_tab) = unspec (trace_tab); /* Copy to new area */
		     free trace_tab;
		     trace_tab_size = trace_tab_size + 1024;
		     trace_tabp = p;		/* New space ready */
		     offset = offset+1024;
		     go to fetch_more;		/* Go read next section */
		end;
check_next_entry:
		tmsgp = addr (trace_tab (tcur - trace_tab_start + 1));
		if flag_word = physical_end | flag_word = logical_end then go to count_trace_entries; /* Whole table found */
		tcur = tcur + bin (tmsg.length) + 2;	/* Address of next one */
		if tcur >= trace_tab_start + trace_tab_size then go to capture_more; /* Havent read necessary part yet */
		else go to check_next_entry;
	     end;

/* The following code is MR8 and later systems where trace table size is known */

	     else do;
		trace_tab_size = bin (mem_word (1));
		if trace_tab_current > trace_tab_start + trace_tab_size then
		     go to bad_pointers;
		allocate trace_tab in (free_area);
		do offset = 0 to trace_tab_size - 1 by 1024;
		     call fetch (trace_tab_start + offset, min (1024, trace_tab_size - offset), addr (trace_tab (offset + 1)));
		end;
	     end;

/* Now analyze captured trace */

count_trace_entries:
	     trace_tab_cnt = 0;
	     tcur = trace_tab_current;
	     tmsgp = addr (trace_tab (tcur - trace_tab_start + 1));
	     do while (flag_word ^= logical_end);	/* Loop to count entries */
		if flag_word = physical_end then tcur = trace_tab_start;
		else do;
		     tcur = tcur + bin (tmsg.length) + 2;
		     trace_tab_cnt = trace_tab_cnt + 1;
		end;
		tmsgp = addr (trace_tab (tcur - trace_tab_start + 1));
	     end;

	     return;

	end capture_trace;

%include debug_fnp_data;

     end db_fnp_trace_;
