/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* DB_FNP_DUMPS_ - Contains entries used by debug_fnp for finding various things in FNP dumps */

/* Written February 1977 by Larry Johnson */

/* format: style4,delnl,insnl,^ifthendo */
db_fnp_dumps_:
     proc;

/* Arguments */

dcl  arg_corep ptr;					/* Address of the dump */
dcl  arg_fnp fixed bin;
dcl  arg_cmd_infop ptr;
dcl  arg_expr_infop ptr;

/* Automatic */

dcl  corep ptr;
dcl  fnp fixed bin;
dcl  code fixed bin (35);
dcl  edited_addr char (24) var;
dcl  mem_word (1) bit (18) unal;
dcl  modnum fixed bin;
dcl  modname char (12);
dcl  i fixed bin;
dcl  rp ptr;
dcl  edit_ind char (128) var;

dcl  1 fault_data unal,				/* Format of fault data in dump */
       2 ic bit (18),
       2 ir,
         3 indicators bit (8),
         3 pad bit (10),
       2 a bit (18),
       2 q bit (18),
       2 x1 bit (18),
       2 x2 bit (18),
       2 x3 bit (18),
       2 er bit (18),
       2 et bit (18),
       2 type fixed bin (17),
       2 name bit (18);

dcl  1 die_word unal,
       2 modnum bit (4),
       2 opcode bit (5),
       2 reason bit (9);

dcl  msg_offset (1) bit (18) aligned based;		/* Table of offsets in od355_msgs$ */

/* Constants */

dcl  fault_names (0:10) char (16) int static options (constant)
	init ("power off", "power on", "memory parity", "illegal opcode", "overflow", "store", "divide", "illegal int",
	"extra int", "iom", "console abort");

dcl  indicator_names (8) char (20) var int static options (constant)
	init ("zero", "negative", "carry", "overflow", "interrupt inhibit", "parity inhibit", "overflow inhibit", "parity");

dcl  die_op bit (5) int static options (constant) init ("01001"b);
						/* Opcode used to cause crashes */

/* Static */

dcl  constants_setup bit (1) int static init ("0"b);
dcl  crreg fixed bin int static;			/* Address of saved machine conditions */

/* External stuff */

dcl  ioa_ entry options (variable);
dcl  db_fnp_util_$edit_module_addr entry (ptr, fixed bin, fixed bin, char (*) var, fixed bin (35));
dcl  db_fnp_sym_util_$get_value entry (char (*)) returns (fixed bin);
dcl  db_fnp_memory_$fetch entry (ptr, fixed bin, fixed bin, fixed bin, ptr, fixed bin (35));
dcl  com_err_ entry options (variable);

dcl  od355_msgs$ ext;
dcl  1 od355_msgs$die_list (8) ext aligned,
       2 name char (12),
       2 offset fixed bin;

dcl  (addr, bin, length, ptr, string, substr) builtin;

/* Entry to print reason for crash */


why:
     entry (arg_corep, arg_fnp, arg_cmd_infop, arg_expr_infop);

	call setup;

	call read_fault_data;

	if fault_data.ic = "0"b
	then do;
	     call ioa_ ("No fault occurred.");
	     return;
	end;

	call edit (fault_data.ic);
	if fault_data.type >= lbound (fault_names, 1) & fault_data.type <= hbound (fault_names, 1)
	then call ioa_ ("^a fault at ^o ^a", fault_names (fault_data.type), bin (fault_data.ic), edited_addr);
	else call ioa_ ("Unknown fault (type ^o) at ^o ^a", fault_data.type, bin (fault_data.ic), edited_addr);

	if fault_data.type ^= 3
	then return;				/* Not illegal opcode */
	call fetch (bin (fault_data.ic) - 1, 1, addr (mem_word));
						/* Read opcode causing the fault */
	string (die_word) = mem_word (1);
	if die_word.opcode ^= die_op
	then return;				/* Not deliberate */

	modnum = bin (die_word.modnum);
	modname = od355_msgs$die_list.name (modnum);	/* Name of module causing fault */

	rp = ptr (addr (od355_msgs$), od355_msgs$die_list.offset (modnum));
						/* Address of list of offsets to reasons */
	rp = ptr (addr (od355_msgs$), rp -> msg_offset (bin (die_word.reason)));
	call ioa_ ("^a: ^A", modname, rp);
	return;

/* Entry to print registers */

regs:
     entry (arg_corep, arg_fnp, arg_cmd_infop, arg_expr_infop);

	call setup;

	call read_fault_data;

	call edit (fault_data.ic);
	call ioa_ ("ic  ^.3b ^a", fault_data.ic, edited_addr);
	call ioa_ ("aq  ^.3b ^.3b", fault_data.a, fault_data.q);
	edit_ind = "";
	if fault_data.ir.indicators ^= "0"b
	then do;
	     do i = 1 to 8;
		if substr (fault_data.ir.indicators, i, 1)
		then do;				/* Found one one */
		     if length (edit_ind) = 0
		     then edit_ind = "(";
		     else edit_ind = edit_ind || ",";
		     edit_ind = edit_ind || indicator_names (i);
		end;
	     end;
	     edit_ind = edit_ind || ")";
	end;
	call ioa_ ("ir  ^.3b ^a", string (fault_data.ir), edit_ind);
	call edit (fault_data.x1);
	call ioa_ ("x1  ^.3b ^a", fault_data.x1, edited_addr);
	call edit (fault_data.x2);
	call ioa_ ("x2  ^.3b ^a", fault_data.x2, edited_addr);
	call edit (fault_data.x3);
	call ioa_ ("x3  ^.3b ^a", fault_data.x3, edited_addr);
	call ioa_ ("er  ^.3b", fault_data.er);
	call ioa_ ("et  ^.3b", fault_data.et);
	return;


/* Procedure to edit an address */

edit:
     proc (b);

dcl  b bit (18);
dcl  i fixed bin;
dcl  s char (32) var;

	i = bin (substr (b, 4));
	call db_fnp_util_$edit_module_addr (corep, fnp, i, s, code);
	if code ^= 0
	then s = "";
	if s = ""
	then edited_addr = "";
	else edited_addr = "(" || s || ")";
	return;

     end edit;

/* Setup arguments */

setup:
     proc;

	corep = arg_corep;
	fnp = arg_fnp;
	cmd_infop = arg_cmd_infop;
	expr_infop = arg_expr_infop;

	envp = cmd_info.envp;
	if ^env.dump_sw				/* this is pointless without a dump */
	then do;
	     call com_err_ (0, "debug_fnp", "not looking at a dump.");
	     go to error_return;
	end;

	if constants_setup
	then return;

	crreg = db_fnp_sym_util_$get_value (".crreg");
	constants_setup = "1"b;

	return;

     end setup;

/* Procedure to fetch the fault data */

read_fault_data:
     proc;

dcl  i fixed bin;
dcl  mem_word (1) bit (18);

	call fetch (crreg, 1, addr (mem_word));		/* Get pointer to register save area */
	i = divide (length (unspec (fault_data)), 18, 17, 0);
						/* Number of words to read */
	call fetch (bin (mem_word (1)), i, addr (fault_data));
	return;

     end read_fault_data;

/* Read some FNP memory */

fetch:
     proc (a, n, p);

dcl  (a, n) fixed bin;
dcl  p ptr;

	call db_fnp_memory_$fetch (corep, fnp, a, n, p, code);
	if code = 0
	then return;
	call com_err_ (code, "", "Unable to read location ^o.", a);
	go to error_return;

     end fetch;

error_return:
	cmd_info.flush = "1"b;
	return;

%include debug_fnp_data;
     end db_fnp_dumps_;
