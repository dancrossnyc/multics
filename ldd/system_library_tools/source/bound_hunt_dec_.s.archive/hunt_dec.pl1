/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


hunt_dec: proc;

/* HUNT - find a segment in a given subtree. */
/* Modified by Peter C. Krupp on 1/14/78 to find and classify PL/I object segments that use decimal data */
/* Modified 780809 by PG to terminate archive segments when finished with them. */


/* automatic */

dcl  path char (168),				/* Root of tree to be scanned. */
     i fixed bin,
     ap ptr,
     segp ptr,
     al fixed bin,
     bchr char (al) unaligned based (ap),
     ec fixed bin(35),
     an fixed bin init (2),
     code fixed bin (35);

/* entries */

dcl  absolute_pathname_ entry (char (*), char (*), fixed bin (35)),
     cu_$arg_count entry returns (fixed bin),
     hcs_$initiate entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr, fixed bin (35)),
     hcs_$initiate_count entry (char(*), char(*), char(*), fixed bin(24), fixed bin(2), ptr, fixed bin(35)),
     hcs_$terminate_noname entry (ptr, fixed bin (35)),
     com_err_ entry options (variable),
     ioa_$rsnnl entry options (variable),
     cu_$arg_ptr ext entry (fixed bin, ptr, fixed bin, fixed bin(35)),
     sweep_disk_dec_ ext entry (char (168), entry),
     get_wdir_ entry returns (char (168)),
     ioa_ entry options (variable);

/* builtins */

dcl (addr, bin, hbound, index, length, null, rtrim, substr) builtin;

/* files */

dcl  (no_decimal,aligned_decimal,unaligned_decimal) file record output environment(stringvalue);

dcl  prog_list(3) file variable init(no_decimal,aligned_decimal,unaligned_decimal);

dcl  attach_description(3) char(256) varying
	init("discard_","record_stream_ -target vfile_ aligned_decimal.hd","record_stream_ -target vfile_ unaligned_decimal.hd");
dcl  header(3) char(132) var
	init("/* PL/I object segments that do not reference decimal data */",
	     "/* PL/I object segments that reference aligned decimal data */",
	     "/* PL/I object segments that reference unaligned decimal data */");

dcl  total(3) fixed bin init((3)0);
dcl  message char(256) var init("");


dcl  cleanup condition;

/* --------------------- */

	path = get_wdir_ ();
	call cu_$arg_ptr (1, ap, al, ec);
	if ec ^= 0 then do;
	     call com_err_ (0, "hunt_dec", "Usage: hunt_dec {root_of_tree} {-control_args}^/	Control arguments: -aligned_decimal <path> -unaligned_decimal <path>");
	     return;
	end;

	call absolute_pathname_ (bchr, path, code);
	if code ^= 0 then go to er;

	call process_ctl_args(code,message);
	if code^=0 | message^=""
	     then go to er;

	do i=2 to 3;
	     open file(prog_list(i)) title(attach_description(i));
	end;

	on cleanup
	     begin;
		do i=2 to 3;
		     close file(prog_list(i));
		end;
	     end;

	do i=2 to 3;
	     write file(prog_list(i)) from(header(i));
	end;

/* Now, go to work. Call disk sweeper program */

	call sweep_disk_dec_ (path, counter);
	call ioa_ ("^/Total no decimal ^d^/Total aligned decimal ^d^/Total unaligned decimal ^d^/",total(1),total(2),total(3));

	do i=2 to 3;
	     close file(prog_list(i));
	end;
	return;

er:
	call com_err_ (code, "hunt_dec", message);
	return;

counter:	proc (sdn, sen, lvl, een, bptr, nptr);

dcl  archive_util_$first_disected entry(ptr, ptr, char(32) aligned, fixed bin(24), fixed bin(35));
dcl  archive_util_$disected_element entry(ptr, ptr, char(32) aligned, fixed bin(24), fixed bin(35));

dcl  examine_object_ entry (ptr,fixed bin(24),char(*),char(*),(3) file,(3) fixed bin);	/* examine segment to see if it is a PL/I object segment with unaligned decimal code */

dcl  message char(256);
dcl  ml fixed bin;

dcl  header_ptr ptr;		/* ptr to current archive header...input/output to archive util_ */
dcl  comp_ptr ptr;			/* pointer to component in archive segment */
dcl  comp_name char(32) aligned;	/* name of component in archive segment */
dcl  bit_count fixed bin(24);		/* bit count of component */

dcl  sdn char (168),				/* superior dir name */
     sen char (32),				/* dirname */
     lvl fixed bin,					/* distance from root */
     een char (32),				/* entry name */
     namec fixed bin,
    (j, k) fixed bin,
     names (100) char (32) aligned based (nptr),
     ename char (32),
     bptr ptr,					/* ptr to info structure */
     nptr ptr;					/* ptr to names structure */

dcl  xp char (168),
     xi fixed bin;

dcl 1 branch based (bptr) aligned,			/* thing returned by star_long */
    2 type bit (2) unal,
    2 nname bit (16) unal,
    2 nindex bit (18) unal,
    2 dtm bit (36) unal,
    2 dtu bit (36) unal,
    2 mode bit (5) unal,
    2 pad bit (13) unal,
    2 records bit (18) unal;

dcl  ecc fixed bin (35);

dcl  any_other condition;

dcl  continue_to_signal_ entry (fixed bin(35));
dcl  find_condition_info_ entry (ptr,ptr,fixed bin(35));

dcl  condition_name(5) char(32) aligned int static
	init ("no_read_permission","not_in_read_bracket","seg_fault_error",
	      "program_interrupt","out_of_bounds");

dcl  1 cond_info,
%include cond_info;;

	     on any_other 
		begin;

		dcl (i,code) fixed bin(35);

		     cond_info.version=1;
		     call find_condition_info_(null,addr(cond_info),code);
		     do i=1 to hbound(condition_name,1);
		          if condition_name(i)=cond_info.condition_name
		     	then go to bypass_segment;
		end;
		     call continue_to_signal_(code);
		end;

	     if branch.type^="01"b
		then return; /* do not process links or directories */
	     if sdn^=">"
		then call ioa_$rsnnl ("^a>^a", xp, xi, sdn, sen);
		else call ioa_$rsnnl (">^a", xp, xi, sen);
	     xi = bin (branch.type, 2);
	     namec = bin (branch.nname, 16);
	     do j = 1 to namec;
		ename = names (bin (branch.nindex, 18)+j-1);
		ecc = index (ename, ".");
		if ecc = 0 then do;
		     if xp = ">"
			then call ioa_$rsnnl (">^a", message, ml, een);
			else call ioa_$rsnnl ("^a>^a", message, ml, xp, een);

		     call hcs_$initiate_count(xp, ename, "", bit_count, 0b, segp, ecc);
		     if segp^=null
			then
			     do;
			     call examine_object_(segp, bit_count, rtrim (message), "", prog_list, total);
			     call hcs_$terminate_noname(segp,ecc);
			     end;

		     return;
		end;
		k = length (rtrim (ename));
		if k > 8 & substr (ename, k-7, 8) = ".archive" then do;
		     call hcs_$initiate (xp, ename, "", 0b, 0b, segp, ecc);
		     if segp = null then return;
		     header_ptr = segp;
		     call archive_util_$first_disected(header_ptr, comp_ptr, comp_name, bit_count, ecc);
		     do while (ecc = 0);
			ecc = index (header_ptr -> archive_header.name, ".");
			if ecc = 0 then do;
			     if xp ^= ">"
				then call ioa_$rsnnl ("^a>^a", message, ml, xp, ename);
				else call ioa_$rsnnl (">^a", message, ml, ename);
			     call examine_object_ (comp_ptr, bit_count, rtrim(header_ptr -> archive_header.name),
				rtrim (message), prog_list, total);
			end;
loop:			call archive_util_$disected_element(header_ptr, comp_ptr, comp_name, bit_count, ecc);
		     end;
		     call hcs_$terminate_noname (segp, ecc);
		     return;
		end;

	     end;
	return;

bypass_segment:
	revert any_other;		/* just in case a condition recurs while recovering */

	call hcs_$terminate_noname(segp,ecc);
	return;

	end counter;

/* process_ctl_args - process control arguments for hunt_dec */

process_ctl_args:
	procedure(code,message);

dcl  code fixed bin(35);
dcl  message char(*) varying;

dcl  specified(3) bit(1) aligned initial((3)(1)"0"b);
dcl  (arg_count,arg_index) fixed bin;
dcl  ctl_index fixed bin;
dcl  sc fixed bin(35);

dcl  arg_string char(arg_length) based(arg_ptr);
dcl  arg_length fixed bin;
dcl  arg_ptr pointer;

dcl  suffixed_path character(168) varying;
dcl  dir char(168);
dcl  entry char(32);

dcl  error_table_$badopt fixed bin(35) ext static;
dcl  expand_pathname_$add_suffix entry(char(*),char(*),char(*),char(*),fixed bin(35));

dcl  suffix char(2) init("hd") int static;

	code=0;
	message="";

	arg_count=cu_$arg_count();
	arg_index=2;

	     do while(arg_index<=arg_count);
		call cu_$arg_ptr(arg_index,arg_ptr,arg_length,sc);
		ctl_index=valid_ctl(arg_string);
		if ctl_index=0
		     then do;
			code=error_table_$badopt;
			message=arg_string;
			return;
			end;
		if specified(ctl_index)
		     then do;
			message=arg_string || " ctl argument specified more than once";
			return;
			end;
		arg_index=arg_index+1;
		if arg_index>arg_count
		     then do;
			code=0;
			message="pathname must follow ctl argument";
			return;
			end;
		call cu_$arg_ptr(arg_index,arg_ptr,arg_length,sc);
		call expand_pathname_$add_suffix(arg_string,suffix,dir,entry,code);
		suffixed_path=rtrim(arg_string) || "." || suffix;
		if code ^=0
		     then do;
			message=suffixed_path;
			return;
			end;
		specified(ctl_index)="1"b;
		attach_description(ctl_index)="record_stream_ -target vfile_ " || suffixed_path;
		arg_index=arg_index+1;
	     end;

	return;


/* valid_ctl - validate and encode control arguments */

valid_ctl:
	procedure(ctl_arg) returns(fixed bin);

dcl  valid_arg(3,2) char(18) aligned int static init("-nd","-no_decimal","-ad","-aligned_decimal","-ud","-unaligned_decimal");

dcl  ctl_arg character(*);
dcl  i fixed bin;

	do i=2 to hbound(valid_arg,1);
	     if ctl_arg=valid_arg(i,1) | ctl_arg=valid_arg(i,2)
		then return(i);
	end;

	return(0);

	end valid_ctl;

	end process_ctl_args;

/*  */

%include archive_header;
     end hunt_dec;
