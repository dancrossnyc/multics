/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */



examine_object_: proc(seg_ptr, bit_count, segment_name, archive_name, prog_list, total);

/* examine_object_ - examine the segment identified by seg_ptr and determine if it is a PL/I object segment that uses unaligned decimal data */

/* Written by Peter C. Krupp on January 14, 1978 */


dcl  seg_ptr pointer;
dcl  (segment_name, archive_name) character(*);
dcl  prog_list(3) file variable;
dcl  total(3) fixed bin;

dcl  (addr, bin, hbound, string, substr, ltrim) builtin;


%include object_info;

dcl  object_info_$long entry (ptr, fixed bin(24), ptr, fixed bin(35));

dcl  decimal_use_code fixed bin;
dcl  decimal_use_record char(256) varying;

dcl  1 info like object_info;

dcl  bit_count fixed bin(24);
dcl  code fixed bin(35);

	info.version_number=2;
	call object_info_$long (seg_ptr, bit_count, addr(info), code);
	if code^=0
	     then return;

	if info.compiler^="PL/I" & info.compiler^="v2pl1"
	     then return;

	decimal_use_code=type_object_segment();
	total(decimal_use_code)=total(decimal_use_code)+1;
	decimal_use_record=ltrim(archive_name || " " || segment_name);
	if decimal_use_code^=1
	     then write file(prog_list(decimal_use_code)) from(decimal_use_record);

	return;


/* type_object_segment - classify a PL/I segment according to its use of arithmetic decimal instructions */

type_object_segment:
	procedure returns(fixed bin);

dcl  1  pl1$op_mnemonic(0:1023) ext static aligned,
	2 (opcode char(6),
	   dtype fixed bin(2),	/* 0-desc9a, 1-descb, 2-decimal */
	   num_desc fixed bin(5),
	   num_words fixed bin(8)) unaligned;

dcl  1  instruction based(text_ptr) aligned,
	2 (base bit(3),
	   offset bit(15),
	   op_code bit(10),
	   unused bit(1),
	   ext_base bit(1),
	   tag bit(6)) unaligned;

dcl  1  mod_factor aligned,
	2 (ext_base bit(1),
	   length_in_reg bit(1),
	   indirect_descriptor bit(1),
	   tag bit(4)) unaligned;

dcl  mf(3) fixed bin(6) int static init(30,12,3);

dcl  eis_modifier(0:15) char(3) aligned int static
	init("n","au","qu","du","ic","al","ql","dl","x0","x1","x2","x3","x4","x5","x6","x7");

dcl  1  descriptor based aligned,
	2 (address bit(18),
	   char bit(3),
	   nsd_type bit(3),
	   scale_factor bit(6),
	   length bit(6)) unaligned;

dcl  (text_offset,max_text_offset) fixed bin;
dcl  dec_data bit(1);
dcl  text_ptr pointer;
dcl  mop fixed bin;


	text_offset=0;
	max_text_offset=info.tlng-1;
	dec_data="0"b;

	do while(text_offset<=max_text_offset);
	     text_ptr=addrel(info.textp,text_offset);
	     mop=bin(instruction.op_code);
	     if opcode(mop)^=" "
		then do;
		     if num_words(mop)^=1 & dtype(mop)=2 & dec_arith(opcode(mop))
			then do;
			     dec_data="1"b;
			     if unaligned_data(text_ptr)
				then return(3); /* unaligned decimal data found */
			     end;
		     text_offset=text_offset+num_words(mop);
		     end;
		else text_offset=text_offset+1;
	end;

	if dec_data
	     then return(2); /* only word aligned decimal data */

	return(1); /* no decimal data found */


/* dec_arith - is opcode an arithmetic decimal opcode */

dec_arith:
	procedure(opcode) returns(bit(1) aligned);

dcl opcode char(6);

dcl dec_arith_ops(8) char(6) aligned int static
	init("ad2d","ad3d","sb2d","sb3d","mp2d","mp3d","dv2d","dv3d");

dcl i fixed bin;


	do i=1 to hbound(dec_arith_ops,1);
	     if opcode=dec_arith_ops(i)
		then do;
			do i=1 to num_desc(mop);
			     if addrel(text_ptr,i)->nsd_type ^= "001"b & addrel(text_ptr,i)->nsd_type ^= "000"b
				then return("0"b);
			end;
			return("1"b);
		     end;
	end;

	return("0"b);

	end dec_arith;

/* unaligned_data - determines whether or not the EIS instruction identified by inst_ptr accesses unaligned data */

unaligned_data:
	procedure(inst_ptr) returns(bit(1) aligned);

dcl inst_ptr ptr;
dcl i fixed bin;


	do i=1 to num_desc(mop);
	     if addrel(inst_ptr,i)->descriptor.char^="000"b
		then return("1"b); /* unaligned - nonzero digit offset */
	     string(mod_factor)=substr(string(inst_ptr->instruction),mf(i),7);
	     if eis_modifier(bin(mod_factor.tag))^="n" & eis_modifier(bin(mod_factor.tag))^="ic"
		then return("1"b); /* unaligned - address modification */
	end;

	return("0"b); /* all data aligned - zero digit offsets and no address modification */

	end unaligned_data;

	end type_object_segment;

	end examine_object_;
