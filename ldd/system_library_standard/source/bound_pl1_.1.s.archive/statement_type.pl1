/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */
%;
/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */



/****^  HISTORY COMMENTS:
  1) change(88-01-26,RWaters), approve(88-01-26,MCR7724), audit(88-02-05,Huen),
     install(88-02-16,MR12.2-1024):
     Expand the uses of options (constant) variables.
  2) change(89-10-03,Vu), approve(89-10-03,MCR8139), audit(89-10-04,Blackmore),
     install(89-10-09,MR12.3-1086):
     PL1 confuses parameter variables with static constants.
  3) change(91-01-18,Blackmore), approve(91-01-18,MCR8234),
     audit(91-12-05,Huen), install(92-04-24,MR12.5-1011):
     Change entry pt. and dcl of 'constant_token' entry to allow passing a ptr
     to the current block, for the constant reference resolution fix.
                                                   END HISTORY COMMENTS */


statement_type:
	proc(cblock,index,label_ptr,conditions) returns(fixed bin(15));

/*	This function returns a bit string which identifies */
/*	to the caller the kind of pl/1 statement currently contained */
/*	in the token_list.						*/

/*	statement_type is called with index set such that token_list(index)	*/
/*	points to the first token of the statement to be identified.	*/
/*	this may be a label, condition prefix, etc.  index may be other than */
/*	one primarily when identifying the statement in an else clause.	*/
/*	when statement_type returns the value of index will be such that	*/
/*	token_list(index) points to the first token of the statement, i.e.	*/
/*	labels and condition prefixes will have been scanned.	*/

/*	"conditions" is a bit string set to record the settings */
/*	of the condition prefixes of the statement.			*/

/*	"label_ptr" is a pointer to the beginning of a node list containing the */
/*	labels(entry names) of the statement.				*/

/* Modified 770713 by PG to use pl1_stat_$level_0_colon flag */
/* Modified 770715 by RAB to fix bug in recognizing null stmts caused by above change */
/* Modified 15 Feb 1978 by PCK to implement the stop statement */
/* Modified 28 Jan 1988 by RW to fix 1994 and 2186 */

/* automatic */

dcl	(index,j,k,ksaved,paren_count,n) fixed bin(15);
dcl	(cblock,p,q,label_ptr,value_token) ptr;
dcl	(assumed_s_type,next_type) bit(9) aligned;
dcl	unknown_key_word char(12) aligned;
dcl	condition_value bit(1) aligned;
dcl	conditions bit(12) aligned;
dcl	unknown_condition char(16) aligned;

/* builtins */

dcl	(fixed, hbound, lbound, mod, null, substr) builtin;

/* external static */

dcl	pl1_stat_$level_0_colon bit (1) aligned external static;

/* internal static */

dcl	key_word(0:33) char(12) aligned internal static
	initial (	"if",
		"go",
		"call",
		"do",
		"else",
		"dcl",
		"allocate",
		"proc",
		"return",
		"entry",
		"procedure",
		"free",
		"declare",
		"end",
		"goto",
		"get",
		"put",
		"begin",
		"on",
		"signal",
		"revert",
		"default",
		"format",
		"open",
		"close",
		"read",
		"write",
		"locate",
		"delete",
		"rewrite",
		"system",
		"dft",
		"alloc",
		"stop");

dcl	s_type(0:33) bit(9) internal static
	initial (	"000010011"b,	/* if */
		"000010010"b,	/* go to */
		"000000100"b,	/* call */
		"000001010"b,	/* do */
		"000001011"b,	/* else */
		"000000110"b,	/* dcl */
		"000000001"b,	/* allocate */
		"000011000"b,	/* proc */
		"000011011"b,	/* return */
		"000001101"b,	/* entry */
		"000011000"b,	/* procedure */
		"000010000"b,	/* free */
		"000000110"b,	/* declare */
		"000001100"b,	/* end */
		"000010010"b,	/* goto */
		"000010001"b,	/* get */
		"000011001"b,	/* put */
		"000000011"b,	/* begin */
		"000010110"b,	/* on */
		"000011110"b,	/* signal */
		"000011100"b,	/* revert */
		"000100100"b,	/* default */
		"000001111"b,	/* format */
		"000010111"b,	/* open */
		"000000101"b,	/* close */
		"000011010"b,	/* read */
		"000100011"b,	/* write */
		"000010100"b,	/* locate */
		"000001000"b,	/* delete */
		"000011101"b,	/* rewrite */
		"000100000"b,	/* system */
		"000100100"b,	/* default dft*/
		"000000001"b,	/* alloc */
		"000011111"b);	/* stop */

dcl	parn_not_allowed(0:33) bit(1) internal static aligned
	initial(	"0"b,"1"b,"1"b,"1"b,"0"b,"0"b,"1"b,"0"b,"0"b,"0"b,"0"b,
		"1"b,"0"b,"1"b,"1"b,"1"b,"1"b,"1"b,"1"b,"1"b,"1"b,
		"0"b,"0"b,"1"b,"1"b,"1"b,"1"b,"1"b,"1"b,"1"b,"1"b,
		"0"b,"1"b,"1"b);

/* include files */

%include condition_name;
%include language_utility;
%include token_list;
%include list;
%include reference;
%include nodes;
%include token_types;
%include statement_types;

dcl constant_token entry (ptr, ptr, bit(9) aligned, bit(9) aligned) returns(bit(9));


/* program */

	label_ptr = null;
	k, ksaved = index;

/*	The first construction to check for is the condition prefix list,	*/

	if ^pl1_stat_$level_0_colon			/* if statement has no colon, it can't have */
	then do;					/* prefixes or labels */

	     /* we still have to see that the stmt begins with an identifier or semi_colon */

	     if t_table.type ^= identifier
	     then if t_table.type = semi_colon
		then do;
		     index = k;
		     return(fixed(null_statement,15));
		     end;
		else call print(96,token_list(k));

	     go to not_label;
	     end;

	do while (t_table.type = left_parn);

another:
	     k = k + 1;
	     if t_table.type ^= identifier then call print(95,token_list(k));
	     if substr(t_table.string,1,2)="no"
	     then do;
		     condition_value="0"b;
		     unknown_condition=substr(t_table.string,3);
		end;
	     else do;
		     condition_value="1"b;
		     unknown_condition=t_table.string;
		end;

	     do j = lbound (condition_name, 1) to hbound (condition_name, 1) while (condition_name (j) ^= unknown_condition);
	     end;

	     if j > hbound (condition_name, 1)
	     then call print (45, token_list (k));

	     substr (conditions, mod (j, 10), 1) = condition_value;	/* j never equals 10 due to clever array */
	     k = k + 1;
	     if t_table.type = comma then go to another;
	     if t_table.type ^= right_parn then call print(43,token_list(k-1));
	     k = k + 1;
	     if t_table.type ^= colon then call print(44,null);
	     k = k + 1;
	end;

/* 	The next construct to check for is the label prefix list.	*/

check_label:
	ksaved = k;
	if t_table.type ^= identifier
		then if t_table.type = semi_colon
			then do;
				index=k;
				return(fixed(null_statement,15));
			end;
			else call print(96,token_list(k));
	q = token_list(k);
	k = k+1;
	if t_table.type = colon then go to label;
	if t_table.type ^= left_parn then go to not_label;
	k = k+1;
	n = 1;
	if t_table.type = plus
		then k = k+1;
		else if t_table.type = minus
			then do;
				n = -1;
				k = k+1;
			     end;

	/* get ptr to value token */
	value_token = token_list (k);		/* constant_token fixes this if named constant */
	if constant_token (cblock, value_token, "777"b3, dec_integer) ^= dec_integer then go to not_label;

	p = token_list(k);
	k = k+1;
	if t_table.type ^= right_parn then go to not_label;
	k = k+1;
	if t_table.type ^= colon then go to not_label;

	token_list (k-2) = value_token;	/* substitute constant value */
	p = value_token;
	q = create_reference(q);
	q->reference.offset = create_list(1);
	if n = -1 then q->reference.offset->list.element(1) = create_token("-"||p->t_table.string,dec_integer);
		else q->reference.offset->list.element(1) = p;
label:
	k = k+1;
	p = create_list(2);
	p->list.element(2) = q;
	p->list.element(1) = label_ptr;
	label_ptr = p;
	go to check_label;

/*	ksaved points to the first token following the last recognized label.
	It is known to point to an identifier.	*/

not_label:
	k,index = ksaved;
	next_type=token_list(k+1)->t_table.type;
	if next_type=assignment then go to return_assignment;
	if next_type=arrow then go to return_assignment;
	if next_type=period then go to return_assignment;
	if next_type=comma then go to return_assignment;

/*	probably a key-word type statement */

	unknown_key_word=t_table.string;
	do j = 0 to hbound(key_word,1);
	if unknown_key_word=key_word(j)
	then do;
		assumed_s_type=s_type(j);
		if next_type^=left_parn then go to type_return;
		if parn_not_allowed(j) then go to return_assignment;
		go to verify_s_type;
	     end;
	end;

	go to return_assignment;

/*	when control reaches here we know that the identifier beginning */
/*	the statement is a key-word and that the token */
/*	following the identifier is a left-paren.  the following code */
/*	decides whether the statement is the assumed statement type */
/*	or the statement is an assignment statement. */

verify_s_type:
	k = k + 1;
	call skip_parens;

/*	at this point we have scanned to the right paren in this context:  */

/*		key-word(...)					*/

/*	the token following the right paren will distinguish a key word */
/*	statement from an assignment statement. 		*/

	k = k+1;
	if t_table.type=arrow then go to return_assignment;
	if t_table.type=period then go to return_assignment;
	if t_table.type = comma
	then if assumed_s_type = declare_statement
	     then if has_equal()
		then go to return_assignment;
		else go to type_return;
	     else go to return_assignment;
	if t_table.type=assignment
		then if assumed_s_type=if_statement
			then go to if_check;
			else go to return_assignment;
		else go to type_return;			/* it was key-word type after all */

/*	at this point we have scanned to the equal sign in this context:   */

/*		if( ... )=	*/

/*	the following code resolves the ambiguity of whether this is an */
/*	if statement or a subscripted assignment statement.    */

if_check:
	k = k+1;
	if t_table.type=semi_colon then go to return_assignment;
	if t_table.type=left_parn
	then do;
		paren_count=paren_count+1;
		go to if_check;
	     end;
	if t_table.type=right_parn
	then do;
		paren_count=paren_count-1;
		go to if_check;
	     end;
	if t_table.type=identifier
	then do;
		if paren_count ^= 0 then go to if_check;
		if t_table.string="then" then go to then_check;
	     end;

	go to if_check;

/*	having found a "then" at zero-reduction level we check the type */
/*	of the preceding token to distinguish the use of "then" as a */
/*	key-word to initiate a then-clause from the use of "then" as */
/*	an ordinary identifier. */

then_check:
	next_type = token_list(k-1)->t_table.type;
	if next_type=identifier then go to type_return;
	if next_type=right_parn then go to type_return;
	if next_type & is_constant then go to type_return;
	go to if_check;

return_assignment:
	assumed_s_type = assignment_statement;
type_return:
	return(fixed(assumed_s_type,15,0));


skip_parens:	proc;

	paren_count = 1;
	do while(paren_count ^= 0);
	k = k + 1;
	if t_table.type = semi_colon then call print(2,null);
	if t_table.type = left_parn then paren_count = paren_count + 1;
	if t_table.type = right_parn then paren_count = paren_count - 1;
	end;

	end;


has_equal:	proc returns(bit(1) aligned);

	do while("1"b);
	k = k + 1;
	if t_table.type = semi_colon then return("0"b);
	if t_table.type = assignment then return("1"b);
	if t_table.type = left_parn then call skip_parens;
	end;

	end;

/* subroutine to print a diagnostic and return to the caller of statement_type
   telling him that the statement is unknown.	*/

print: proc(m,t);

dcl	m fixed bin(15);
dcl	t ptr;

	call parse_error(m,t);
	assumed_s_type = unknown_statement;
	go to type_return;
	end print;

	end statement_type;
