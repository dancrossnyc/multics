/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1990   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(91-01-09,Blackmore), approve(91-01-09,MCR8234),
     audit(91-12-05,Huen), install(92-04-24,MR12.5-1011):
     Change calls to 'lex', 'lex$write_last_line', and 'statement_type', for
     constant reference resolution fix.
                                                   END HISTORY COMMENTS */


/*	Modified on:	2 October 1970 by PG for Version II.
	Modified on:	24 October 1980 by M. N. Davidoff for -prefix.
	Modified 831021 BIM to get a full symbol table by setting root -> block.get_data.
*/
/* format: style3 */
parse:
     procedure (root, source_string, prefix);

/* parameter */

dcl	root		ptr;
dcl	source_string	char (*);
dcl	1 prefix		aligned,
	  2 mask		bit (12),
	  2 conditions	bit (12);

/* automatic */

dcl	conditions	bit (12) aligned;
dcl	end_ptr		ptr;
dcl	entry_ptr		ptr;
dcl	index		fixed bin (15);
dcl	p		ptr;

/* builtin */

dcl	(addr, binary, length, null)
			builtin;

/* external static */

dcl	pl1_stat_$compiler_created_index
			fixed bin external static;
dcl	pl1_stat_$error_memory
			bit (504) aligned external static;
dcl	pl1_stat_$one	pointer external static;
dcl	pl1_stat_$util_abort
			entry variable external static;
dcl       pl1_stat_$generate_symtab bit (1) aligned external static;

%include token_types;
%include statement_types;
%include block_types;
%include block;
%include parse;

/* program */

	pl1_stat_$compiler_created_index = 0;
	pl1_stat_$error_memory = ""b;
	pl1_stat_$util_abort = parse_error;
	call error_$initialize_error;
	end_ptr = reserve$clear ();
	root, p = create_block (root_block, null);
	p -> block.get_data = pl1_stat_$generate_symtab;
	conditions = p -> block.prefix & ^prefix.mask | prefix.conditions;

	call lex$initialize_lex (addr (source_string), length (source_string));
	pl1_stat_$one = create_token ("1", dec_integer);
	call lex(p);

	index = 1;
	entry_ptr, end_ptr = null;

	if statement_type (p, index, entry_ptr, conditions) = binary (procedure_statement, 9)
	then do;
		call procedure_parse (index, entry_ptr, conditions, p, end_ptr, external_procedure, "0"b);
		if end_ptr ^= null
		then call parse_error (417, end_ptr);	/* unmatched labeled end statement */
	     end;
	else call parse_error (180, null);		/* no procedure statement */

	call lex$write_last_line(p);
     end parse;
