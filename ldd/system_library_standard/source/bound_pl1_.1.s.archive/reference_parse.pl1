/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
%;
/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

reference_parse:
	procedure(index,cblock) returns(pointer);

/*	Re-written by:	Gabriel Chang for Version II
	Modified:		Richard A. Barnes to fix 1544
          Modified:		EBush for temporary extension of max
			args per call to 512 */

dcl	(i,j,k,m,n,index) fixed bin(15);
dcl	(arg,cblock,p,q,qual,arglist,op,sym) ptr;
dcl	s(512) ptr unaligned;
dcl	t(128) ptr unaligned;

dcl	(addr,null) builtin;

%include parse;
%include context_codes;
%include declare_type;
%include list;
%include nodes;
%include op_codes;
%include operator;
%include reference;
%include symbol;
%include token;
%include token_list;
%include token_types;
			/*      */

begin:
	qual=null;
	k=index;
	if t_table.type = isub
		then do;
			index=index+1;
			return(token_list(k));
		     end;

reset:
	i,j=0;

next:
	if t_table.type ^= identifier then go to fail;
	q=token_list(k);
	k=k+1;

	if t_table.type = left_parn
		then do;
			if token_list(k+1)->t_table.type=right_parn
			then do;
				call make_reference;

				if i = 0
				then do;
					q -> reference.offset = create_list(0);
					k = k + 2;

					if t_table.type = arrow then goto test_ptr;
				end;

				goto entry_reference;
			end;

next_sub:
			k=k+1;
			i=i+1;

			if t_table.type=asterisk
			then do;
				if i > hbound(s,1)
				     then goto fail;
				s(i)=token_list(k);
				k=k+1;
			end;
			else	if ^atom() then goto fail;

			if t_table.type = comma then go to next_sub;
			if t_table.type = colon then go to next_sub;
			if t_table.type ^= right_parn then go to fail;
			k=k+1;
		     end;

	if t_table.type = period
		then do;
			k=k+1;
			j=j+1;
			if j > hbound(t,1)
			    then goto fail;
			t(j)=q;
			go to next;
		     end;

	if qual^=null | j+i ^= 0
		then call make_reference;

	if t_table.type = arrow
		then do;
test_ptr:
			k=k+1;
			qual=q;
			if q->node.type = token_node
				then if cblock^=null then call context(q,cblock,pointer_context);
			go to reset;
		     end;

entry_reference:
	do while(t_table.type=left_parn);
		i=0;

		if token_list(k+1)->t_table.type^=right_parn
		then do;
next_arg:
			k=k+1;
			i=i+1;

			if ^atom() then goto fail;

			if t_table.type=comma then goto next_arg;
			if t_table.type^=right_parn then goto fail;
		end;
		else	k=k+1;

		k=k+1;

		arglist=create_operator(std_arg_list,3);
		arglist->operand(2)=create_list(i);

		do j=1 to i;
			arglist->operand(2)->list.element(j)=s(i-j+1);
		end;

		op=create_operator(std_call,3);
		op->operand(2)=q;
		op->operand(3)=arglist;

		q=op;
	end;

	if t_table.type=arrow
	then	goto test_ptr;

ret1:
	index=k;
	return(q);

fail:
	return(null);


make_reference:	proc;

		q=create_reference(q);
		q->reference.qualifier=qual;
		if i^=0 then do;
				p=create_list(i);
				do m=1 to i;
					p->list.element(m) = s(i+1-m);
				end;
				q->reference.offset=p;
			   end;
		if j^=0 then do;
				p=create_list(j);
				do m=1 to j;
					p->list.element(m) = t(j+1-m);
				end;
				q->reference.length=p;
			     end;

		end make_reference;


atom:	proc() returns(bit(1)aligned);

dcl	save_index fixed bin(15);

	save_index=k;

	if i > hbound(s,1)
	     then goto fail;
	s(i) = expression_parse(k,cblock);
	if s(i)=null then return("0"b);

	if token_list(save_index)->token.type^=left_parn
	then;			else

	if s(i)->node.type=operator_node
	then;			else

	if s(i)->node.type=token_node
	&  s(i)->token.type^=identifier
	then;

	else do;
		sym=create_symbol(null,null,by_compiler);
		sym->symbol.temporary="1"b;

		op=create_operator(assign,2);
		op->operand(1)=sym->symbol.reference;
		op->operand(2)=s(i);

		if i > hbound(s,1)
		     then goto fail;
		s(i)=op;
	end;

	return("1"b);

	end atom;

	end reference_parse;
