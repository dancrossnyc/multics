/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1990   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(91-01-18,Blackmore), approve(91-01-18,MCR8234),
     audit(91-12-05,Huen), install(92-04-24,MR12.5-1011):
     Change call to 'statement_type', for constant reference resolution fix.
                                                   END HISTORY COMMENTS */


/*	This procedure parses on statements, and on units.  If the on unit
	is an unlabeled block, a call is made to procedure_parse with the
	block_type set to "on_unit".

	Written by:	J. D. Mills, 29 May 1968
	Re-written by:	P. Green 4 December 1970, for Version II
	Modified by:	R. A. Barnes 1 November 1973 for snap & system
	Modified by:	RAB 10 February 1977 for multiple condition names
	Modified on:	21 March 1980 by M. N. Davidoff to fix 1948 in which on units consisting of begin blocks which
			are implicitly closed by an end statement with a closure label are parsed incorrectly.  This
			procedure must pass closure label information back to its caller.
*/
/* format: style3 */
on_parse:
     procedure (k, entry_ptr, our_conditions, father_block, his_end_ptr);

dcl	(j, k, type)	fixed bin (15);
dcl	(entry_ptr, father_block, his_end_ptr, end_ptr, cblock, cond_ptr, label_ptr, statement_ptr)
			ptr;
dcl	(on, p, q, r, t)	ptr;

dcl	pl1_stat_$condition_index
			fixed bin (15) ext static;
dcl	(conditions, our_conditions)
			bit (12) aligned;

dcl	action_index	(0:36) fixed bin (15) int static
			init (0, 0, 0, 1, 0, 4, 2, 4, 4, 0, 2, 2, 2, 2, 0, 2, 0, 4, 0, 2, 4, 0, 2, 4, 2, 4, 4, 2, 2, 4,
			0, 0, 3, 4, 0, 4, 2);

dcl	io_condition	(8) char (16) varying int static
			init ("undf", "undefinedfile", "endfile", "endpage", "key", "name", "record", "transmit");

dcl	(binary, bit, null) builtin;

%include parse;
%include block;
%include block_types;
%include context_codes;
%include declare_type;
%include list;
%include nodes;
%include op_codes;
%include operator;
%include reference;
%include statement;
%include statement_types;
%include symbol;
%include token;
%include token_list;
%include token_types;

/* program */

	his_end_ptr = null;
	label_ptr = entry_ptr;

/* create on unit block */

	cblock = create_block (on_unit, father_block);

cond_loop:
	on = create_statement (on_statement, father_block, label_ptr, our_conditions);
						/* create on statement in outer block. */
	if label_ptr ^= null
	then do;
		call declare_label (father_block, on, label_ptr, by_explicit_context);
		label_ptr = null;
	     end;

	k = k + 1;

	if ^get_condition (cond_ptr)
	then go to error_recover;

	on -> statement.root, q = create_operator (enable_on, 3);

	if cond_ptr -> node.type = token_node
	then q -> operand (1) = cond_ptr;
	else do;
		q -> operand (2) = cond_ptr -> reference.offset -> list.element (1);
		q -> operand (1), cond_ptr = cond_ptr -> reference.symbol;
	     end;

	pl1_stat_$condition_index = pl1_stat_$condition_index + 1;
	q -> operator.operand (3) = cblock;

	if t_table.type = comma
	then go to cond_loop;

/* create entry sequence */

	q = create_statement (procedure_statement, cblock, null, (12)"0"b);
	q -> statement.root = create_operator (std_entry, 0);
	q -> statement.labels = create_list (2);
	t = create_token (cond_ptr -> token.string || "." || bindec$vs ((pl1_stat_$condition_index)), identifier);
	p = create_symbol (father_block, t, by_compiler);
	p -> symbol.entry, p -> symbol.internal, p -> symbol.constant = "1"b;
	p -> symbol.equivalence = cblock;
	p -> symbol.initial = q;
	q -> statement.labels -> list.element (2) = p -> symbol.reference;

	if t_table.string = "snap"
	then do;

/* Save k and find token following first reference-like formation.  The cases are these:

	   for j>k+1:
		on error snap(.......) :	snap - (condition prefix)
		on error snap(.......) XX	no_snap
		on error snap->......	no_snap

	   for j=k+1:
		on error snap=		no_snap
		on error snap,		no_snap
		on error snap:		no_snap - BUG moreover
		on error snap XX		snap
*/

		j = k;
		r = reference_parse (j, cblock);

		if (j <= k + 1 | token_list (j) -> token.type = colon) & token_list (j) -> token.type ^= comma
		     & token_list (j) -> token.type ^= colon & token_list (j) -> token.type ^= assignment
		then do;
			on -> statement.snap = "1"b;
			k = k + 1;
		     end;

		call free_node (r);
	     end;

	conditions = father_block -> block.prefix;	/* default conditions for imbedded statement. */
	type = statement_type (cblock, k, label_ptr, conditions);

	q -> statement.prefix, cblock -> block.prefix = conditions;
	if label_ptr ^= null
	then do;
		call parse_error (421, null);		/* no labels in on-unit. */
		label_ptr = null;
	     end;

	go to action (action_index (type));

/* ************** IO statements ************************ */

action (4):
	call io_statement_parse (k, label_ptr, conditions, cblock, end_ptr, "1"b, bit (binary (type, 9, 0)));
	goto end_up;

/*	************* Begin statement ************************************************ */

action (1):
	call procedure_parse (k, label_ptr, conditions, cblock, his_end_ptr, on_unit, "1"b /* no return statements */);
	return;

/*	************* Illegal statements ********************************************* */

action (2):
	call parse_error (423, null);			/*  illegal statement in on-unit. */
	go to end_up;

/*	************* Statements all parsed in statement_parse *********************** */

action (0):
	call statement_parse (k, label_ptr, conditions, cblock, type);
	go to end_up;

/*	************* System on-unit ************************************************* */

action (3):
	on -> statement.system = "1"b;

	if token_list (k + 1) -> token.type ^= semi_colon
	then call parse_error (422, token_list (k + 1));

end_up:
	p = create_statement (end_statement, cblock, null, conditions);
	p -> statement.root = create_operator (std_return, 0);

	return;

revert:
     entry (k, statement_ptr, father_block);

dcl	opcode		bit (9) aligned;

	on = statement_ptr;

	if statement_ptr -> statement.statement_type = revert_statement
	then opcode = revert_on;
	else opcode = signal_on;

	k = k + 1;

	if get_condition (cond_ptr)
	then do;
		on -> statement.root, q = create_operator (opcode, 2);

		if cond_ptr -> node.type = token_node
		then q -> operand (1) = cond_ptr;
		else do;
			q -> operand (1) = cond_ptr -> reference.symbol;
			q -> operand (2) = cond_ptr -> reference.offset -> list.element (1);
		     end;
	     end;
	else goto error_recover;

	return;

error_recover:
	on -> statement.root = null;
	on -> statement.statement_type = null_statement;
	return;

get_condition:
     proc (ref) returns (bit (1) aligned);

dcl	(ref, t)		ptr,
	kc		fixed binary;

	kc = k;

	if t_table.string = "cond" | t_table.string = "condition"
	then do;
		k = k + 1;
		if t_table.type = left_parn
		then do;
			if token_list (k + 1) -> token.type ^= identifier
			then goto err420;
			if token_list (k + 2) -> token.type ^= right_parn
			then goto err420;
			kc = k + 1;
			k = k + 3;
		     end;
		t, ref = token_list (kc);
	     end;
	else do;
		do j = 1 to 8 while (io_condition (j) ^= t_table.string);
		end;
		if j < 9
		then do;
			ref = reference_parse (k, father_block);
			if ref = null
			then go to err420;

			if ref -> node.type ^= reference_node
			then go to err420;

			if ref -> reference.qualifier ^= null | ref -> reference.length ^= null
			then go to err420;

			if ref -> reference.offset -> list.number ^= 1
			then go to err420;

			call context ((ref -> reference.offset -> list.element (1)), father_block, file_name_context);
			t = ref -> reference.symbol;	/* ptr to token node */
		     end;
		else do;
			t, ref = token_list (kc);
			k = k + 1;
		     end;
	     end;

	call context (t, father_block, condition_context);
	return ("1"b);

err420:
	call parse_error (420, null);
	return ("0"b);
     end get_condition;

     end on_parse;
