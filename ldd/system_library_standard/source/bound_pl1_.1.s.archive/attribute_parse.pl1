/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(88-01-26,RWaters), approve(88-01-26,MCR7724), audit(88-02-05,Huen),
     install(88-02-16,MR12.2-1024):
     Expand the uses of options (constant) variables.
  2) change(88-02-22,RWaters), approve(88-02-22,PBF7724), audit(88-02-25,Huen),
     install(88-03-08,MR12.2-1034):
     Limit options(constant) expansions.
  3) change(89-02-28,RWaters), approve(89-02-28,MCR8069), audit(89-09-07,Vu),
     install(89-09-19,MR12.3-1068):
     Moved code from validate.pl1 to get_scale() to correctly diagnose
     illegal scale values.
  4) change(89-09-27,RWaters), approve(89-09-27,MCR8068), audit(89-09-27,Vu),
     install(89-10-02,MR12.3-1080):
     Fixed so that it doesn't flag duplicate attributes as fatal errors.
  5) change(91-01-18,Blackmore), approve(91-01-18,MCR8234),
     audit(91-12-05,Huen), install(92-04-24,MR12.5-1011):
     Change dcls of 'constant_token' and 'defer_constant_token_list' entries
     for the constant reference resolution fix.
                                                   END HISTORY COMMENTS */


/* format: style3,^indattr,ifthendo,ifthen,^indnoniterdo,indproc,^elsestmt,dclind9,idind23 */
attribute_parse:
     procedure (cblock, sp, k, in_generic);

/*	This procedure is called to parse the attributes occuring in
	declare statements, in the returns( ) entry( ) attributes,
	and in the when( ) clause of the generic( ) attribute.
	Note that this procedure must be called with k (the index into
	the token_list) pointing to the token immediately before the
	attributes (if any). When it returns, k will have been advanced
	past any|all attributes, and will be on a comma, right_paren,
	or semi_colon.   */

/* Modified 780629 by PG for unsigned */
/* Modified 780807 by PG to fix 1652 (diagnose > 127 dimensions) */
/* Modified 780824 by RAB to fix 1776 (unsigned & signed not diagnosed as nonstandard) */
/* Modified 830427 by BIM for ptr options (packed) */
/* Modified 880128 by RW to fix 1994 and 2186 */
/* Modified 890307 by RW to correctly test scale values in get_scale() */


/* parameters */

dcl      (
         cblock ptr,
         sp ptr,
         k fixed bin (15),
         in_generic bit (1) aligned
         ) parameter;

/* automatic */

dcl      (p, q, p1, p2) ptr;
dcl      (i, letterx, ndims) fixed bin;
dcl      type bit (9) aligned;
dcl      word char (11);
dcl      (defined_parn, first_time, star) bit (1) aligned;

/* builtins */

dcl      (binary, null, string, substr, unspec) builtin;

/* external static */

dcl      pl1_stat_$one ptr external static;
dcl      pl1_stat_$check_ansi bit (1) aligned ext static;

/* internal static */

dcl      action_index (82) fixed bin (8) unal internal static initial (0,
						/* aligned */
	    2,					/* area */
	    0,					/* auto */
	    0,					/* automatic */
	    4,					/* based */
	    3,					/* bin */
	    3,					/* binary */
	    2,					/* bit */
	    0,					/* builtin */
	    2,					/* char */
	    2,					/* character */
	    3,					/* complex */
	    0,					/* cond */
	    0,					/* condition */
	    0,					/* constant */
	    0,					/* controlled */
	    3,					/* cplx */
	    0,					/* ctl */
	    3,					/* dec */
	    3,					/* decimal */
	    8,					/* def */
	    8,					/* defined */
	    16,					/* dim */
	    16,					/* dimension */
	    0,					/* direct */
	    12,					/* entry */
	    10,					/* env */
	    10,					/* environment */
	    0,					/* ext */
	    0,					/* external */
	    0,					/* file */
	    3,					/* fixed */
	    3,					/* float */
	    0,					/* format */
	    15,					/* generic */
	    9,					/* init */
	    9,					/* initial */
	    0,					/* input */
	    0,					/* int */
	    0,					/* internal */
	    18,					/* irred */
	    18,					/* irreducible */
	    0,					/* keyed */
	    13,					/* label */
	    14,					/* like */
	    0,					/* local */
	    0,					/* member */
	    0,					/* nonvar */
	    0,					/* nonvarying */
	    5,					/* offset */
	    17,					/* options */
	    0,					/* output */
	    0,					/* parameter */
	    0,					/* parm */
	    6,					/* pic */
	    6,					/* picture */
	    0,					/* pointer */
	    7,					/* pos */
	    7,					/* position */
	    3,					/* prec */
	    3,					/* precision */
	    0,					/* print */
	    0,					/* ptr */
	    3,					/* real */
	    0,					/* record */
	    18,					/* red */
	    18,					/* reducible */
	    11,					/* returns */
	    0,					/* seql */
	    0,					/* sequential */
	    18,					/* signed */
	    0,					/* static */
	    0,					/* stream */
	    0,					/* structure */
	    0,					/* unal */
	    0,					/* unaligned */
	    18,					/* uns */
	    18,					/* unsigned */
	    0,					/* update */
	    0,					/* var */
	    0,					/* variable */
	    0 /* varying */);

dcl      constant_token entry (ptr, ptr, bit (9) aligned, bit (9) aligned) returns (bit (9));
dcl      defer_constant_token_list entry (ptr, fixed bin, bit (9) aligned);

/* program */

	p = sp;					/* copy parameter into automatic */
	first_time = "1"b;
	go to next;
ck_parn:
	if t_table.type ^= right_parn then
	     call print (11);
next:
	k = k + 1;
find_type:
	if token_list (k) = null then
	     call print (7);
	type = t_table.type;
action (0):
test:
	if (type = comma) | (type = semi_colon) | (type = right_parn) then do;
	     sp = p;				/* assign to parameter */

	     if p -> symbol.varying then do;
		p -> symbol.aligned = "1"b;
		p -> symbol.unaligned = "0"b;
	     end;

	     return;
	end;
	if first_time then do;
	     first_time = "0"b;
	     if type = left_parn then
		go to action (16);
	end;
	if type ^= identifier then
	     call print (7);
	word = t_table.string;
	letterx = binary (unspec (substr (word, 1, 1)), 9);
	do i = index_given_letter (letterx) by 1 while (keyword (i) < word);
	end;

	if keyword (i) = word then do;
	     substr (string (p -> symbol.attributes), bit_index (i), 1) = "1"b;
	     k = k + 1;
	     type = t_table.type;
	     go to action (action_index (i));
	end;

	call print (7);
action (1):
	call print (8);
	return;
action (2):					/* get size of strings or areas */
	if type ^= left_parn then
	     go to test;
	k = k + 1;

	p -> symbol.dcl_size = refer_exp ();
	if p -> symbol.dcl_size = null then
	     call print (12);
	go to ck_parn;
action (3):					/* get arithmetic precision */
	if type ^= left_parn then
	     go to test;
	p -> symbol.precision = "1"b;
	k = k + 1;
	if constant_token (cblock, token_list (k), "777"b3, dec_integer) ^= dec_integer then
	     call print (15);
	p -> symbol.c_dcl_size = token_to_binary (token_list (k));
	if p -> symbol.c_dcl_size = 0 then
	     call print (490);
	k = k + 1;
	if in_generic then
	     if t_table.type = colon then do;
		k = k + 1;
		if constant_token (cblock, token_list (k), "777"b3, dec_integer) ^= dec_integer then
		     call print (15);
		p -> symbol.pic_size = token_to_binary (token_list (k));
		k = k + 1;
	     end;
	     else
		p -> symbol.pic_size = p -> symbol.c_dcl_size;
	if t_table.type = comma then do;
	     p -> symbol.scale = get_scale ();
	     p -> symbol.fixed = "1"b;
	     if in_generic then
		if t_table.type = colon then
		     p -> symbol.pic_scale = get_scale ();
		else
		     p -> symbol.pic_scale = p -> symbol.scale;
	end;
	go to ck_parn;
action (4):					/* process the based attribute */
	if type ^= left_parn then
	     go to test;
	k = k + 1;
	p -> symbol.reference -> reference.qualifier = reference_parse (k, cblock);
	if p -> symbol.reference -> reference.qualifier = null then
	     call print (18);
	if p -> symbol.reference -> reference.qualifier -> node.type = token_node then
	     call context ((p -> symbol.reference -> reference.qualifier), cblock, pointer_context);
	go to ck_parn;
action (5):					/* process the offset attribute */
	if type ^= left_parn then
	     go to test;
	k = k + 1;
	p -> symbol.general = reference_parse (k, cblock);
	if p -> symbol.general = null then
	     call print (17);
	if p -> symbol.general -> node.type = token_node then
	     call context ((p -> symbol.general), cblock, area_context);
	go to ck_parn;
action (6):					/* process the picture attribute */
	if type ^= char_string then
	     go to test;
	p -> symbol.general = token_list (k);
	go to next;
action (7):					/* process the position attribute */
	if type ^= left_parn then
	     go to test;
	k = k + 1;
	p -> symbol.initial = expression_parse (k, cblock);
	if p -> symbol.initial = null then
	     call print (26);
	go to ck_parn;
action (8):					/* process the defined attribute */
	defined_parn = "0"b;
	if type = left_parn then do;
	     defined_parn = "1"b;
	     k = k + 1;
	end;
	p -> symbol.equivalence = reference_parse (k, cblock);
	if p -> symbol.equivalence = null then
	     call print (24);
	if defined_parn then
	     go to ck_parn;
	else
	     go to find_type;
action (9):					/* process the initial attribute */
	if type ^= left_parn then
	     go to test;
	if p -> symbol.initial ^= null then
	     call print (19);
	p -> symbol.initial = initial_list (p);
	if p -> symbol.initial = null then
	     call print (20);
	go to find_type;

action (10):					/* environment */
	if type ^= left_parn then
	     go to test;
	k = k + 1;
	if t_table.string = "interactive" then
	     p -> symbol.interactive = "1"b;
	else if t_table.string = "stringvalue" then
	     p -> symbol.stringvalue = "1"b;
	else
	     call print (193);
	k = k + 1;
	if pl1_stat_$check_ansi then
	     call parse_error (355, token_list (k - 3));
	go to ck_parn;

action (11):					/* process the returns attribute */
	if type ^= left_parn then
	     go to test;
	q = descriptor_parse (cblock,
	     create_token (p -> symbol.token -> t_table.string || "[return_value]", identifier), k);
	if q ^= null then do;
	     if q -> list.element (2) ^= null then
		call print (22);
	     p -> symbol.dcl_size, q = q -> list.element (1);
	     q -> symbol.passed_as_arg = "1"b;
	end;
	go to ck_parn;

action (12):					/* process the entry attribute */
	if type ^= left_parn then
	     go to test;
	p -> symbol.general =
	     descriptor_parse (cblock, create_token (p -> symbol.token -> t_table.string || "[param", identifier), k);
	if p -> symbol.general = null then do;		/* entry() -- add wart: a zero list node to prevent defaulting */
						/* this wart will be removed by validate after defaulting is complete */

	     p -> symbol.general = create_list (0);
	end;
	go to ck_parn;

action (13):					/* process the label attribute */
	if type ^= left_parn then
	     go to test;

	call print (6);

nxt:
	k = k + 1;
	if t_table.type ^= identifier then
	     call print (21);
	k = k + 1;
	if t_table.type = comma then
	     go to nxt;
	go to ck_parn;

action (14):					/* process the like attribute	*/
	p -> symbol.general = reference_parse (k, cblock);
	if p -> symbol.general = null then
	     call print (25);
	cblock -> block.like_attribute = "1"b;
	go to find_type;
action (15):					/* process the generic attribute	*/
	if t_table.type ^= left_parn then
	     go to test;
	q = null;
next_entry:
	k = k + 1;
	p1 = create_list (3);
	p1 -> list.element (1) = reference_parse (k, cblock);
	if p1 -> list.element (1) = null then
	     call print (13);
	if t_table.string ^= "when" then
	     call print (13);
	k = k + 1;
	if t_table.type ^= left_parn then
	     call print (13);
	p1 -> list.element (2) = descriptor_parse (null, null, k);
	if t_table.type ^= right_parn then
	     call print (13);
	k = k + 1;
	p1 -> list.element (3) = null;
	if q ^= null then
	     p2 -> list.element (3) = p1;
	else
	     q = p1;
	p2 = p1;
	if t_table.type = comma then
	     go to next_entry;
	p -> symbol.general = q;
	go to ck_parn;
action (16):					/* process the dimension attribute  */
	if t_table.type ^= left_parn then
	     go to test;
	p -> symbol.dimensioned = "1"b;
	p -> symbol.array = create_array ();
	ndims = 0;
next_b:
	ndims = ndims + 1;
	k = k + 1;
	p1 = pl1_stat_$one;
	p2 = refer_exp ();
	if p2 = null then
	     call print (9);
	if ^star then
	     if t_table.type = colon then do;
		k = k + 1;
		p1 = p2;
		p2 = refer_exp ();
		if p2 = null then
		     call print (9);
	     end;
	     else
		;
	else
	     p1 = p2;

	if ndims <= max_number_of_dimensions then do;
	     q = create_bound ();
	     q -> bound.next = p -> symbol.array -> array.bounds;
	     p -> symbol.array -> array.bounds = q;
	     q -> bound.lower = p1;
	     q -> bound.upper = p2;
	end;
	if t_table.type = comma then
	     go to next_b;

	if ndims > max_number_of_dimensions then do;
	     call parse_error (372, p);
	     ndims = max_number_of_dimensions;
	end;
	p -> symbol.array -> array.own_number_of_dimensions = ndims;
	if t_table.type ^= right_parn then
	     call print (10);
	go to next;

action (17):					/* options */
	if type ^= left_parn then
	     go to test;
	k = k + 1;
	if t_table.string = "variable" then
	     p -> symbol.variable_arg_list = "1"b;
	else if t_table.string = "constant" then
	     p -> symbol.alloc_in_text = "1"b;
	else if t_table.string = "packed" then
	     p -> symbol.explicit_packed = "1"b;
	else
	     call print (192);
	k = k + 1;
	if pl1_stat_$check_ansi then
	     call parse_error (355, token_list (k - 3));
	go to ck_parn;

action (18):					/* nonstandard attributes */
	if pl1_stat_$check_ansi then
	     call parse_error (354, token_list (k - 1));
	go to test;

/* Internal procedures */

get_scale:
     proc () returns (fixed bin (7) unaligned);

dcl      temp fixed bin;

	k = k + 1;
	call defer_constant_token_list (cblock, (k), right_parn);
	p1 = expression_parse (k, cblock);
	if p1 = null then
	     call print (15);
	if p1 -> node.type ^= token_node then
	     call print (15);
	if p1 -> t_table.type ^= dec_integer then
	     call print (15);
	temp = token_to_binary (p1);

/* This code yanked from validate.pl1.  We have to test "temp" before it
gets stuffed into a fixed bin(7) variable upon returning.
*/
	if temp < min_scale then do;
	     call parse_error (222, (p -> symbol.token));
	     return (min_scale);
	end;
	else if temp > max_scale then do;
	     call parse_error (222, (p -> symbol.token));
	     return (max_scale);
	end;

	return (temp);

     end get_scale;

refer_exp:
     proc () returns (ptr);

dcl      (p1, p2) ptr;

	star = "0"b;
	if t_table.type = asterisk then do;
	     p1 = token_list (k);
	     star, p -> symbol.star_extents = "1"b;
	     k = k + 1;
	     go to exit;
	end;
	call defer_constant_token_list (cblock, (k), right_parn);
	p1 = expression_parse (k, cblock);
	if p1 = null then
	     go to fail;
	if p1 -> node.type = token_node then
	     if p1 -> t_table.type ^= dec_integer then
		p -> symbol.exp_extents = "1"b;
	     else
		;
	else
	     p -> symbol.exp_extents = "1"b;
	if t_table.string ^= "refer" then
	     go to exit;
	k = k + 1;
	p -> symbol.exp_extents, p -> symbol.refer_extents = "1"b;
	if t_table.type ^= left_parn then
	     go to fail;
	k = k + 1;
	p2 = p1;
	p1 = create_operator (refer, 2);
	p1 -> operand (1) = p2;
	p1 -> operand (2) = reference_parse (k, cblock);
	if p1 -> operand (2) = null then
	     go to fail;
	if p1 -> operand (2) -> node.type = reference_node then do;
	     if p1 -> operand (2) -> reference.qualifier ^= null then
		call declare_parse$abort (138, (p1 -> operand (2)));
	     if p1 -> operand (2) -> reference.offset ^= null then
		call declare_parse$abort (138, (p1 -> operand (2)));
	end;
	if t_table.type ^= right_parn then
	     go to fail;
	k = k + 1;

exit:
	return (p1);
fail:
	return (null);
     end;

initial_list:
     proc (sym_ptr) returns (ptr);

dcl      (ap, factor, value, p1, p2) ptr;
dcl      something_parsed bit (1) aligned;
dcl      sym_ptr ptr;

	p2 = null;
	do while ("1"b);
	     something_parsed = "0"b;
	     k = k + 1;
	     if t_table.type = left_parn then do;
		k = k + 1;
		if ^(sym_ptr -> symbol.ptr | sym_ptr -> symbol.offset | sym_ptr -> symbol.area
		     | sym_ptr -> symbol.label | sym_ptr -> symbol.entry | sym_ptr -> symbol.file) then
		     call defer_constant_token_list (cblock, (k), right_parn);
		factor = expression_parse (k, cblock);
		if factor = null then
		     go to fail;
		if t_table.type ^= right_parn then
		     go to fail;
		k = k + 1;
		something_parsed = "1"b;
	     end;
	     else
		factor = pl1_stat_$one;
	     if t_table.type = asterisk then do;
		value = null;
		k = k + 1;
	     end;
	     else do;
		if t_table.type = left_parn then do;
		     if ^(sym_ptr -> symbol.ptr | sym_ptr -> symbol.offset | sym_ptr -> symbol.area
			| sym_ptr -> symbol.label | sym_ptr -> symbol.entry | sym_ptr -> symbol.file) then
			call defer_constant_token_list (cblock, (k), right_parn);
		     value = initial_list (sym_ptr);
		     if value = null then
			go to fail;
		end;
		else if something_parsed & (t_table.type = right_parn | t_table.type = comma) then do;
		     value = factor;
		     factor = pl1_stat_$one;
		end;
		else do;
		     if ^(sym_ptr -> symbol.ptr | sym_ptr -> symbol.offset | sym_ptr -> symbol.area
			| sym_ptr -> symbol.label | sym_ptr -> symbol.entry | sym_ptr -> symbol.file) then
			call defer_constant_token_list (cblock, (k), right_parn);
		     value = expression_parse (k, cblock);
		     if value = null then
			go to fail;
		end;
	     end;
	     p1 = create_list (3);
	     p1 -> list.element (1) = factor;
	     p1 -> list.element (2) = value;
	     p1 -> list.element (3) = null;
	     if p2 = null then
		ap = p1;
	     else
		p2 -> list.element (3) = p1;
	     p2 = p1;
	     if t_table.type = right_parn then do;
		k = k + 1;
		return (ap);
	     end;
	     if t_table.type ^= comma then
		go to fail;
	end;
fail:
	return (null);
     end initial_list;

print:
     proc (m);

dcl      m fixed bin (15);

	sp = p;					/* assign to parameter */
	call declare_parse$abort (m, (p -> symbol.token));
     end print;

%include parse;

%include array;
%include block;
%include context_codes;
%include list;
%include nodes;
%include op_codes;
%include operator;
%include pl1_attribute_table;
%include reference;
%include symbol;
%include system;
%include token_list;
%include token_types;
     end /* attribute_parse */;
