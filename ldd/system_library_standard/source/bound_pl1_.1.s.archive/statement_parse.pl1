/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


statement_parse: proc(k,label_ptr,conditions,cblock,type);

/*	Rewritten:	28 September 1970 by P. Green for Version II 
	Modified: 15 Feb 1978 to implement options(main) and the stop statement
	Modified: 26 Dec 1979 by PCK to implement by name assignment */

dcl	(i,j,k,libe_no,n initial(0),type) fixed bin(15);
dcl	(addr,bit,fixed,null,binary) builtin;
dcl	conditions bit(12) aligned;
dcl	(p,q,r,s,cblock,label_ptr,stmnt) ptr;
dcl	stack(128) ptr;
dcl	op_code bit(9) aligned;

dcl	pl1_stat_$cur_statement ptr ext static;

dcl	action_index(0:37) fixed bin(15) int static initial(

		0,1,2,0,3,	10,0,10,10,10,	0,9,0,0,10,	10,4,10,5,0,
		10,6,0,10,0,	10,10,7,8,10,	8,11,0,10,10,	10,0,0);

%include parse;
%include block;
%include declare_type;
%include context_codes;
%include label;
%include list;
%include nodes;
%include op_codes;
%include operator;
%include reference;
%include statement;
%include statement_types;
%include symbol;
%include token;
%include token_list;
%include token_types;
%include block_types;

/*	*/
begin:

make_statement:
	pl1_stat_$cur_statement  ,
	stmnt=create_statement(bit(fixed(type,9),9),cblock,label_ptr,conditions);
	if label_ptr^=null
	then	call declare_label(cblock,stmnt,label_ptr,by_explicit_context);
	label_ptr=null;
	go to action(action_index(type));

action(0):					/* unknown statement	*/
	return;	/* print(400) not needed - statement_type has already complained */

action(1):					/* allocate statement	*/
	q,stmnt->statement.root=create_operator(allot_var,2);
	k=k+1;
	if t_table.type ^= identifier then call print(454);
	q->operand(1)=token_list(k);

alloc_loop:
	k=k+1;
	if t_table.string = "set"
		then do;
			k=k+1;
			if q->operand(1)->node.type^=token_node then call print(450);
			if t_table.type ^= left_parn then call print(451);
			k=k+1;
			p = reference_parse(k,cblock);
			if p = null then call print(454);
			call context(p,cblock,pointer_context);
			r = create_reference((q->operand(1)));
			r->reference.qualifier = p;
			q->operand(1) = r;
			if t_table.type ^= right_parn then call print(454);
			go to alloc_loop;
		     end;
	if t_table.string ="in"
		then do;
			k=k+1;
			if q->operand(2) ^= null then call print(452);
			if t_table.type ^= left_parn then call print(453);
			k=k+1;
			q -> operand(2) = reference_parse(k,cblock);
			if q -> operand(2) = null then call print(454);
			call context((q->operand(2)),cblock,area_context);
			if t_table.type ^= right_parn then call print(454);
			go to alloc_loop;
		     end;
	if t_table.type = comma then go to make_statement;
	go to check_semi_colon;

action(2):					/* assignment statement	*/
	p = reference_parse(k,cblock);
	if p = null then call print(1);
	n=n+1;
	if n>128 then call print(5);
	stack(n)=p;
	if t_table.type = assignment then go to make_op;
	if t_table.type ^= comma then call print(1);
	k=k+1;
	go to action(2);

make_op:
	k=k+1;
	p = expression_parse(k,cblock);
	if p = null then call print(49);
	if t_table.type = comma then go to make_assign_by_name;
	stmnt->statement.root,q=create_operator(assign,2);
	if n=1 then do;
			q->operand(1)=stack(1);
			q->operand(2)=p;
			go to check_semi_colon;
		     end;
	if p->node.type = token_node
	then if p->token.type & is_constant
	     then do;
		s = p;
		q->operand(1) = stack(1);
		q->operand(2) = s;
		j = 2;
		go to make_assignment;
		end;

	s = create_symbol(null,null,by_compiler);
	s->symbol.temporary = "1"b;
	s = s->symbol.reference;
	s->reference.shared="0"b;
	s->reference.ref_count = n+1;
	q->operand(1) = s;
	q->operand(2) = p;
	j = 1;

make_assignment:
	do i = j to n;
	     stmnt = create_statement(assignment_statement,cblock,null,conditions);
	     stmnt->statement.root, q = create_operator(assign,2);
	     stmnt->statement.generated = "1"b;	/* to suppress the free_temps bit */
	     q->operand(1) = stack(i);
	     q->operand(2) = s;
	end;
	go to check_semi_colon;

make_assign_by_name:
	k=k+1;
	if t_table.string ^= "by"
	then call print(371);
	k=k+1;
	if t_table.string ^= "name"
	then call print(371);
	stmnt->statement.root,q=create_operator(assign_by_name,2);
	q->operand(2) = p;
	r = create_list(n);
	do i=1 to n;
	     r -> list.element(i) = stack(i);
	end;
	q->operand(1) = r;
	k=k+1;
	go to check_semi_colon;

action(3):					/* call statement	*/
	k=k+1;
	stmnt -> statement.root = reference_parse(k,cblock);
	if stmnt -> statement.root = null then call print(444);
	q = stmnt->statement.root;
	if q->node.type = token_node
	     then do;
		q = create_reference(q);
		q->reference.offset = create_list(0);
		stmnt->statement.root = q;
		end;
	     else if q->node.type = reference_node
		then if q->reference.offset = null
		     then q->reference.offset = create_list(0);
	go to check_semi_colon;

action(4):					/* free statement	*/
	k=k+1;
	q,stmnt->statement.root=create_operator(free_var,2);
	q -> operand(1) = reference_parse(k,cblock);
	if q -> operand(1) = null then call print(456);
	if t_table.string = "in"
		then do;
			k=k+1;
			if t_table.type ^= left_parn then call print(455);
			k=k+1;
			q -> operand(2) = reference_parse(k,cblock);
			if q -> operand(2) = null then call print(456);
			call context((q->operand(2)),cblock,area_context);
			if t_table.type ^= right_parn then call print(456);
			k=k+1;
		     end;
	if t_table.type = comma then go to make_statement;
	go to check_semi_colon;

action(5):					/* go to statement	*/
	if t_table.string ="goto"
	then k = k + 1;
	else do;
		k = k + 1;
		if t_table.string ^= "to" then call print(446);		/* syntax error in goto statement */
		k = k + 1;
	     end;
	q,stmnt->statement.root=create_operator(jump,1);
	q -> operand(1) = reference_parse(k,cblock);
	if q -> operand(1) = null then call print(446);
	go to check_semi_colon;

action(6):					/* null statement	*/
	if stmnt->statement.labels^=null
	then	stmnt->statement.root = create_operator(nop,0);
	go to check_semi_colon;

action(7):					/* return statement	*/
	k=k+1;
	if t_table.type = semi_colon
	     then do;
		q,stmnt->statement.root=create_operator(std_return,0);
		return;
	     end;
	if t_table.type ^= left_parn then call print(447);
	k=k+1;
	q,stmnt->statement.root=create_operator(return_value,1);
	q -> operand(1) = expression_parse(k,cblock);
	if q -> operand(1) = null then call print(447);
	if t_table.type ^= right_parn then call print(447);
	k=k+1;

check_semi_colon:
	if t_table.type^=semi_colon then call print(1);
	return;

action(8):					/* revert and signal statements */
	call on_parse$revert(k,stmnt,cblock);
	if t_table.type = comma
	then if type = fixed(revert_statement,15)	/* revert statements may mention more than one  	*/
	     then go to make_statement;		/* signal statements must have only one.	*/
	go to check_semi_colon;

action(9):					/* singleton else clause */
	call print(150);
	return;

action(10):					/* unimplemented statements */
	call print(460);
	return;

action(11):					/* stop statement */
	k=k+1;
	stmnt->statement.root=create_operator(stop,0);
	go to check_semi_colon;

print: proc(m);

dcl	m fixed bin(15);

	call parse_error(m,null);
	stmnt->statement.root=null;
	stmnt->statement.statement_type=null_statement;
	go to ret;
	end;

ret:
	end statement_parse;
