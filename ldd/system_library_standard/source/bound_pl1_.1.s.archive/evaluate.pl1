/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(88-01-29,RWaters), approve(88-01-29,MCR7724), audit(88-02-05,Huen),
     install(88-02-16,MR12.2-1024):
     Changed to use assign_.
                                                   END HISTORY COMMENTS */


/* Procedure to evaluate operator with constant operands.

   Preliminary version deals only with decimal integers and returns an operator
   node if other types of constants appear

   Initial Version: 16 October 1972 by BLW
	Modified:	11 December 1976 by RAB for ||
	Modified: 28 January 1988 by RW to use assign_
*/

evaluate:	proc(opcode,r2,r3) returns(ptr);

dcl	opcode bit(9) aligned,
	(r2,r3) ptr;

dcl	q ptr,
	ans char(32) aligned,
	(i,n,prec,prec2,prec3) fixed bin(35);

dcl	(v2,v3) fixed decimal (31);
dcl	v fixed decimal (50);
dcl 	v_chars char (51) based (addr (v));

dcl	string_max fixed bin int static init(256);

dcl	(substr,length,max) builtin;

dcl	assign_ entry (ptr, fixed bin, fixed bin(35), ptr, fixed bin, fixed bin(35));

%include op_codes;
%include operator;
%include token;
%include token_types;
%include language_utility;
%include std_descriptor_types;

	if opcode = cat_string then go to concatenate;

	if opcode >= div
	then do;
make:	     q = create_operator(opcode,3);
	     q -> operand(2) = r2;
	     q -> operand(3) = r3;
	     return(q);
	     end;

	if r2 -> token.type ^= r3 -> token.type then goto make;

	if r2 -> token.type ^= dec_integer then goto make;

	if r2 -> token.loc ^= r3 -> token.loc
	then go to make;				/* require "p" flag to be same */

	prec2 = length(r2 -> token.string);
	prec3 = length(r3 -> token.string);

	if prec2 > 31 | prec3 > 31 then goto make;

	call assign_ (addr (v2), real_fix_dec_9bit_ls_dtype*2, 31,
	     addr (r2 -> token.string), char_dtype*2, prec2);
	call assign_ (addr (v3), real_fix_dec_9bit_ls_dtype*2, 31,
	     addr (r3 -> token.string), char_dtype*2, prec3);

	if opcode = add
	then v = v2 + v3;

	else if opcode = sub
	     then v = v2 - v3;
	     else v = v2 * v3;

/* determine the resultant precision needed. */

	i = verify (substr (v_chars, 2), "0");
	prec = max (length (v_chars)-i, 1);

	if substr (v_chars, 1, 1) ^= "-" then
	     return (create_token$protected (substr (v_chars, length (v_chars)-prec+1, prec), dec_integer, (r2 -> token.loc)));
	else return (create_token$protected ("-" || substr (v_chars, length (v_chars)-prec+1, prec), dec_integer, (r2 -> token.loc)));


concatenate:
	if r2 -> token.type ^= r3 -> token.type then goto make;

	if r2 -> token.type = char_string
	then prec2 = length(r2 -> token.string);
	else if r2 -> token.type = bit_string
	     then prec2 = length(r2 -> token.string) - 1;
	     else go to make;

	if prec2 + length(r3 -> token.string) > string_max
	     then go to make;

	return(create_token(substr(r2 -> token.string,1,prec2) || r3 -> token.string, (r2 -> token.type)));
	end;
