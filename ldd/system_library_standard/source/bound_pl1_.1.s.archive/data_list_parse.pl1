/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
%;
/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

data_list_parse:	proc(k_index,cur_block,arg) returns(bit(1)aligned);

dcl	k_index fixed bin(15),
	(cur_block,arg) ptr;

dcl	(addr,hbound,null) builtin;
dcl	recurse bit(1) aligned;

dcl	(do_ptr,do_ssptr,eptr,p,q,r) ptr,
	(do_sptr,errp) ptr init(null),
	arg_list(128) ptr,

	(arg_list_index,error_number,i,k,n) fixed bin(15);

%include parse;
%include operator;
%include op_codes;
%include token_list;
%include token_types;

	/*  */

	recurse="0"b;
	goto common;

dlp:	entry(k_index,cur_block,arg) returns( bit(1) aligned );
	recurse="1"b;

common:
	k=k_index;

	arg_list_index=0;

	if t_table.type^=left_parn then goto err255;

element_loop:
	k=k+1;

	eptr = expression_parse(k,cur_block);	/* may be either expression or (... do...)   */
	if eptr = null	/* not an expression: is (... do  ...) or is error256 */
	then	if t_table.type=left_parn
		then	if ^dlp(k,cur_block,eptr)
			/* must be a good INSIDE data-list: with a DO  */
			then	goto ret0;
			else	if eptr->operator.op_code=join
				then	eptr=eptr->operator.operand(1);
				else;
		else goto err256;	/* must be expression but isnt */
	else;

	arg_list_index=arg_list_index+1;
	arg_list(arg_list_index)=eptr;

	if t_table.type=comma 
	then if arg_list_index<hbound(arg_list,1)
	     then goto element_loop;
	     else goto err493;


		/*  an element must be either an EXPRESSION or a (DO-LOOP)
		   and must be followed by either a comma, a DO or a ")"  */


	q=create_operator(join,arg_list_index);

	do i=1 to arg_list_index;
		q->operator.operand(i)=arg_list(i);
	end;

		/* having put the list-elements together
		   check for DO or ")"  */

	if t_table.type=right_parn
	then if recurse then goto err275;
	else goto ret1;


	if string="do"
	then do;
		do_ptr=create_operator(do_fun,3);
		do_ptr->operator.operand(1)=q;

		k=k+1;
		r = reference_parse(k,cur_block);
		if r = null then go to err406;
		do_ptr->operator.operand(2)=r;

		if t_table.type^=assignment then goto err407;

specification_loop:
		k=k+1;
		do_ssptr=do_sptr;

		do_sptr=create_operator(do_spec,6);

		if do_ssptr=null
		then do_ptr->operator.operand(3)=do_sptr;
		else do_ssptr->operator.operand(6)=do_sptr;

		p = expression_parse(k,cur_block);
		if p = null then go to err408;
		do_sptr->operator.operand(1)=p;

to_by_loop:
		if string="to"
		then do;
			k=k+1;
			p = expression_parse(k,cur_block);
			if p = null then go to err418;

			if do_sptr->operand(2)^=null then goto err409;
			do_sptr->operand(2)=p;
		end;

		if string="by"
		then do;
			k=k+1;
			p = expression_parse(k,cur_block);
			if p = null then go to err424;

			if do_sptr->operand(3)^=null then goto err419;
			do_sptr->operand(3)=p;

			goto to_by_loop;
		end;

		if string="repeat"
		then do;
			k=k+1;
			if do_sptr->operand(2)^=null
			|  do_sptr->operand(3)^=null
			then goto err443;
			p=expression_parse(k,cur_block);
			if p=null then goto err429;
			do_sptr->operand(4)=p;
		end;


		if string="while"
		then do;
			k=k+1;
			if t_table.type^=left_parn then goto err404;

			k=k+1;
			p = expression_parse(k,cur_block);
			if p = null then go to err426;
			do_sptr->operator.operand(5)=p;

			if t_table.type^=right_parn then goto err405;
			k=k+1;
		end;

		if t_table.type=right_parn
		then do;
			q=do_ptr;
			goto ret1;
		end;

		if t_table.type=comma then goto specification_loop;
		goto err258;	/* unrecognizable element in DO group */

	end;

	goto err275;

ret1:
	arg=q;
	k_index=k+1;
	return("1"b);

err255:
	error_number=255;
	goto err_list;

err256:
	error_number=256;
	goto err_list;

err258:
	error_number=258;
	goto err_list;

err275:
	error_number=275;
	goto err_list;

err404:
	error_number=404;
	goto err;

err405:
	error_number=405;
	goto err;

err406:
	error_number=406;
	goto err;

err407:
	error_number=407;
	goto err;

err408:
	error_number=408;
	goto err;

err409:
	error_number=409;
	goto err;

err418:
	error_number=418;
	goto err;

err419:
	error_number=419;
	goto err;

err424:
	error_number=424;
	goto err;

err426:
	error_number=426;
	goto err;

err429:
	error_number=429;
	goto err;

err443:
	error_number=443;
	goto err;

err493:
	error_number=493;
	goto err;

err_list:
	errp=token_list(k);
	goto err;

err:
	call parse_error(error_number,errp);

ret0:
	arg=null;
	return("0"b);

	end data_list_parse;
