/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/*
This procedure is called at entry point declare_parse to parse declare statements.
This procedure is called at entry point abort when a parse error occurs.

The entry point declare_parse is called to parse declare statements.
It merely performs initialization and calls declare_parse_factored.
Upon return, it makes sure that the last token processed was a semicolon.

The entry point abort is called when an error is detected.
It attempts to restart the parse at the first
comma after the error token not contained in parentheses.

The internal procedure declare_parse_factored does most of the work
of parsing declare statements.  It is called by declare_parse to
parse everything between the word "declare" and the semicolon.
It calls attribute_parse to process attributes, and
it calls itself recursively to process factored attribute lists
when it encounters a left parenthesis.
*/

declare_parse: proc(i,cur_block,labels); 

dcl	i fixed bin(15) parameter;
dcl	(cur_block,labels) ptr parameter;

declare	p ptr;
declare	(cblock,previous_symbol) ptr internal static;

declare	(n,j) fixed binary(15);
declare	(k,l,factored_level) fixed binary(15) static internal;

dcl	type bit(9);

dcl	pl1_stat_$cur_statement ptr ext static;
dcl	pl1_stat_$unwind label external static;


dcl	(null,addr,string) builtin;

%include parse;
%include block;
%include token_types;
%include statement_types;
%include symbol;
%include token_list;
%include token;
%include declare_type;
%include reference;


begin:
	k,l=i;		/* move the parameters into local static storage */
	cblock=cur_block;	/* to eliminate argument passing to declare_parse_factored */
			/* and so that abort can access k and l */

	if labels ^= null
		then do;
			pl1_stat_$cur_statement  ,
			p = create_statement(null_statement,cblock,labels,(cblock -> block.prefix));
			call declare_label(cblock,p,labels,by_explicit_context);
		     end;

	pl1_stat_$unwind=error_restart;
	previous_symbol = null;

error_restart:
	if t_table.type = semi_colon then return;
	factored_level = 0;		/* initial factored level is 0 */
	call declare_parse_factored;
	if t_table.type = semi_colon then return;
	call parse_error(1,null);
	return;

declare_parse$abort: entry(m,bad_node);

dcl	m fixed bin(15) parameter;
dcl	bad_node pointer;

	call parse_error(m,bad_node);
	n=0;
	j=k;
	do k=l by 1;
	type = t_table.type;
	if type=left_parn then n=n+1;
	if type=right_parn then n=n-1;
	if type=semi_colon then go to pl1_stat_$unwind;
	if type=comma then if n=0 then if k>j then go to pl1_stat_$unwind;
	end;

declare_parse_factored:	procedure;

dcl	(last_dcl,s) ptr;
dcl	(current_level,level) fixed bin(15);

	current_level = factored_level;		/* copy from static "parameter" */

do while("1"b);
	k=k+1;

	level = current_level;
	if t_table.type = dec_integer
	   then do;
	        if current_level = 0
		 then level = token_to_binary(token_list(k));
		 else call parse_error(1,null);	/* ignore level number inside factored level number */
	        k=k+1;
	        end;

	if t_table.type=left_parn
		then do;
			l=k-1;
			last_dcl = cblock->block.end_declaration;
			factored_level = level;	/* copy to static "parameter" */
			call declare_parse_factored;
			s = create_symbol(null,create_token("a factored attribute list",(identifier)),by_compiler);
			if t_table.type^=right_parn then call declare_parse$abort(3,null);
			call attribute_parse(cblock,s,k,"0"b);
			if last_dcl = null
				then last_dcl = cblock->block.declaration;
				else last_dcl = last_dcl->symbol.next;
			do last_dcl = last_dcl repeat last_dcl->symbol.next while(last_dcl^=null);
			if last_dcl->symbol.dcl_type = by_declare
				then if merge_attributes(last_dcl,s) then call parse_error(27,null);
			end;
			call free_node(s);
		     end;
		else do;
			if t_table.type ^= identifier then call declare_parse$abort(3,null);
			s = create_symbol(cblock,token_list(k),by_declare);
			string(s->symbol.source_id) = string(pl1_stat_$statement_id);
			s->symbol.level = level;
			call link_symbol(previous_symbol,s);	/* perform appropriate structure linking */
			call attribute_parse(cblock,s,k,"0"b);
		     end;
	if t_table.type ^= comma then return;
end;
end declare_parse_factored;
%include link_symbol;

end declare_parse;
