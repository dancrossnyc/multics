/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1990   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(91-01-18,Blackmore), approve(91-01-18,MCR8234),
     audit(91-12-05,Huen), install(92-04-24,MR12.5-1011):
     Change calls to 'lex' and 'statement_type', for constant reference
     resolution fix.
                                                   END HISTORY COMMENTS */


/* Note well:	The declarations and all statements after the label
		"get_next_statement" are copied from procedure_parse,
		and any changes made to either must be made to both.

	Written on:	22 October 1970 by Paul Green for Version II
	Modified:		9 February 1978 by Richard Barnes to fix 1699
	Modified:		21 March 1980 by M. N. Davidoff to print warnings for multiple closure end statements and
			to diagnose "do while(exp,exp);".
*/
/* format: style3 */
do_parse:
     proc (k, entry_ptr, our_conditions, father_block, his_end_ptr, our_entry_flag, our_return_flag, in_iterative_do);

dcl	(do, ref, spec)	ptr;
dcl	(p, q, entry_ptr, label_ptr, end_ptr, cur_block, father_block, his_end_ptr)
			ptr;
dcl	do_statement_node	ptr;
dcl	(k, i, type)	fixed bin (15);
dcl	(conditions, our_conditions)
			bit (12) aligned;
dcl	(our_entry_flag, entry_flag, return_flag, our_return_flag, in_iterative_do, iterative_do_entered)
			bit (1) aligned;

dcl	pl1_stat_$cur_statement
			ptr ext static;

dcl	(binary, bit, null) builtin;

dcl	action_index	(0:36) fixed bin (15) int static
			init (0, 0, 0, 1, 0, 10, 2, 10, 10, 0, 3, 0, 4, 8, 0, 10, 0, 10, 0, 5, 10, 0, 6, 10, 7, 10, 10,
			0, 0, 10, 0, 0, 0, 10, 0, 10, 9);

%include parse;
%include token_list;
%include block;
%include op_codes;
%include operator;
%include statement;
%include token;
%include block_types;
%include statement_types;
%include token_types;
%include list;
%include label;
%include reference;
%include declare_type;

/* program */

	conditions = our_conditions;
	cur_block = father_block;
	return_flag = our_return_flag;
	entry_flag = our_entry_flag;
	iterative_do_entered = in_iterative_do;

	spec = null;

	pl1_stat_$cur_statement, p,
	     do_statement_node = create_statement (do_statement, father_block, entry_ptr, conditions);
	if entry_ptr ^= null
	then call declare_label (father_block, p, entry_ptr, by_explicit_context);

	do, p -> statement.root = create_operator (do_fun, 3);
	i, k = k + 1;
	if t_table.type = semi_colon
	then goto get_next_statement;			/* this is a "do;" statement */

/* for iterative do statements we need a null statement with the same source id as the do statement preceding the do statement
   so that correct code will be generated in processing function references needing descriptors.  This fixes bug 1699. */

	p -> statement.root = null;
	p -> statement.statement_type = null_statement;
	pl1_stat_$cur_statement, p, do_statement_node = create_statement (do_statement, father_block, null, conditions);
	p -> statement.root = do;

/* each <do specification> is represented by a do_spec operator */

	spec, do -> operand (3) = create_operator (do_spec, 6);
	ref = reference_parse (k, cur_block);

	if ref = null
	then call print (406);

	if token_list (i) -> token.string = "while"
	then if t_table.type = semi_colon
	     then do;				/* this is a "do while(...)" clause */

/* pick up expression from reference node */

		     if ref -> reference.offset -> list.number ^= 1
		     then call parse_error (405, null);

		     spec -> operand (5) = ref -> reference.offset -> list.element (1);
		     ref -> reference.offset = null;	/* don't free expression */
		     call free_node (ref);
		     go to get_next_statement;
		end;
	     else if t_table.type = comma
	     then call print (406);

	do -> operand (2) = ref;

	if t_table.type ^= assignment
	then call print (407);

	k = k + 1;

spec_loop:
	spec -> operand (1) = expression_parse (k, cur_block);
	if spec -> operand (1) = null
	then call print (408);

to_by_loop:
	if t_table.string = "to"
	then do;
		k = k + 1;
		if spec -> operand (2) ^= null
		then call print (409);
		spec -> operand (2) = expression_parse (k, cur_block);
		if spec -> operand (2) = null
		then call print (418);
		iterative_do_entered = "1"b;
	     end;

	if t_table.string = "by"
	then do;
		k = k + 1;
		if spec -> operand (3) ^= null
		then call print (419);
		spec -> operand (3) = expression_parse (k, cur_block);
		if spec -> operand (3) = null
		then call print (424);
		iterative_do_entered = "1"b;
		go to to_by_loop;
	     end;

	if t_table.string = "repeat"
	then do;
		k = k + 1;
		if spec -> operand (2) ^= null | spec -> operand (3) ^= null
		then call print (433);
		spec -> operand (4) = expression_parse (k, cur_block);
		if spec -> operand (4) = null
		then call print (429);
		iterative_do_entered = "1"b;
	     end;

	if t_table.string = "while"
	then do;
		k = k + 1;
		if t_table.type ^= left_parn
		then call parse_error (404, null);
		else k = k + 1;
		spec -> operand (5) = expression_parse (k, cur_block);
		if spec -> operand (5) = null
		then call print (426);
		if t_table.type ^= right_parn
		then call parse_error (405, null);
		else k = k + 1;
	     end;

	if t_table.type = comma
	then do;
		k = k + 1;
		spec -> operand (6), spec = create_operator (do_spec, 6);
		go to spec_loop;
	     end;

	if t_table.type ^= semi_colon
	then call print (425);

get_next_statement:
	call lex(cur_block);

get_statement_type:
	conditions = cur_block -> block.prefix;
	k = 1;					/* first token */
	type = statement_type (cur_block, k, label_ptr, conditions);
	go to action (action_index (type));

/*	***************** Statements requiring individual parsing procedures. ******** */

action (10):					/* io statements */
	call io_statement_parse (k, label_ptr, conditions, cur_block, end_ptr, return_flag, bit (binary (type, 9, 0)));
	goto compound_parse_return;

action (1):					/* begin statement	*/
	call procedure_parse (k, label_ptr, conditions, cur_block, end_ptr, begin_block, return_flag);
	go to compound_parse_return;

action (2):					/* declare statement */
	call declare_parse (k, cur_block, label_ptr);
	go to get_next_statement;

action (9):					/* default statement */
	call default_parse (k, cur_block, label_ptr);
	go to get_next_statement;

action (3):					/* do statement	*/
	call do_parse (k, label_ptr, conditions, cur_block, end_ptr, entry_flag, return_flag, iterative_do_entered);
	go to compound_parse_return;

action (5):					/* if statement	*/
	call if_parse (k, label_ptr, conditions, cur_block, end_ptr, return_flag);
	if end_ptr = null
	then go to get_statement_type;
	go to end_proc;

action (6):					/* on statement	*/
	call on_parse (k, label_ptr, conditions, cur_block, end_ptr);
	go to compound_parse_return;

action (7):					/* proc statement	*/
	call procedure_parse (k, label_ptr, conditions, cur_block, end_ptr, internal_procedure, "0"b);

compound_parse_return:
	if end_ptr = null
	then go to get_next_statement;
	go to end_proc;

/*	***************** Statements which may be in error. ************************** */

action (8):					/* entry statement	*/
	if iterative_do_entered | entry_flag
	then do;
		call parse_error (413 - 2 * binary (entry_flag, 1), null);
		go to get_next_statement;
	     end;

	k = k + 1;
	call process_entry (k, entry_statement, cur_block, label_ptr, conditions);
	go to get_next_statement;

/*	***************** Statements all parsed in statement_parse.******************* */


action (0):
	call statement_parse (k, label_ptr, conditions, cur_block, type);
	go to get_next_statement;

/*	***************** Statement processed in line. ******************************* */

action (4):					/* end statement	*/
	k = k + 1;
	if t_table.type = identifier
	then do;
		end_ptr = token_list (k);
		k = k + 1;
	     end;
	else end_ptr = null;
	if t_table.type ^= semi_colon
	then call parse_error (416, token_list (k));

end_proc:
	conditions = cur_block -> block.prefix;
	q = create_statement (end_statement, cur_block, null, conditions);

	if end_ptr ^= null
	then do;
		do p = entry_ptr repeat p -> list.element (1) while (p ^= null);
		     if end_ptr = p -> list.element (2)
		     then go to ck_labels;
		end;

		if type = binary (end_statement, 9)
		then call parse_error (377, null);

		call error (384, do_statement_node, null);

		his_end_ptr = end_ptr;		/* ends this block and previous blocks */
		entry_ptr = label_ptr;		/* any prefix labels get passed back up.  */
		go to finish;
	     end;

ck_labels:
	his_end_ptr = null;				/* ended this block only, even if we were given labels */
	if label_ptr ^= null
	then do;
		call declare_label (cur_block, q, label_ptr, by_explicit_context);
		q -> statement.labels = label_ptr;
	     end;

finish:						/* close the do statement with a label */
	p = create_label (cur_block, null, by_compiler);
	do -> operand (1) = p;
	p -> label.statement = q;
	ref = create_list (2);
	ref -> list.element (2) = p -> label.token;
	ref -> list.element (1) = q -> statement.labels;
	q -> statement.labels = ref;
	return;

print:
     proc (m);					/* prints error messages */

dcl	m		fixed bin (15);

	call parse_error (m, null);
	if spec ^= null
	then do;
		spec -> operand (1), spec -> operand (2), spec -> operand (3), spec -> operand (4), spec -> operand (5),
		     spec -> operand (6) = null;
	     end;
	go to get_next_statement;

     end print;

     end do_parse;
