/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


default_parse: proc(k,b,labels);

dcl	(b,labels,d,s,last) ptr;
dcl	(k,n) fixed bin(15);
dcl	pl1_stat_$cur_statement ptr ext static;
dcl	pl1_stat_$unwind external label;
dcl	pl1_stat_$check_ansi bit(1) aligned ext static;
dcl	pl1_stat_$root ptr ext static;

dcl	(string,null,addr) builtin;
%include parse;
%include default;
%include symbol;
%include block;
%include token_list;
%include token_types;
%include statement_types;
%include declare_type;

	if labels ^= null
		then do;
			pl1_stat_$cur_statement,d = create_statement(null_statement,b,labels,(b->block.prefix));
			call declare_label(b,d,labels,by_explicit_context);
		     end;

	k = k+1;
	d = create_default();
	string(d->default.source_id) = string(pl1_stat_$statement_id);
	if t_table.type = left_parn
		then do;
			k=k+1;
			d -> default.predicate = expression_parse(k,b);
			if d -> default.predicate = null then go to fail;
			if t_table.type ^= right_parn  then go to fail;
		     end;
		else do;
			if t_table.type = identifier
				then do;
					if t_table.string = "system"
						then d->default.system = "1"b;
						else if t_table.string = "none"
							then d->default.no_defaults = "1"b;
							else go to fail;
					k=k+1;
					if t_table.type = semi_colon then go to done;
				     end;
			go to fail;
		     end;
	k=k+1;
	if t_table.string = "error"
		then do;
			d->default.error = "1"b;
			k=k+1;
			if t_table.type = semi_colon
				then go to done;
				else go to fail;
		     end;

/* loop to parse attribute sets */

	pl1_stat_$unwind = check_end;
	last = null;
	k=k-1;

	do while("1"b);

	s = create_symbol(null,null,by_compiler);
	call attribute_parse(b,s,k,"0"b);
	if last = null
		then d->default.symbol = s;
		else last->symbol.next = s;
	last = s;

check_end:
	if t_table.type = semi_colon then go to done;
	if t_table.type ^= comma then go to fail;
	end;

done:	/* must now link valid default node into block default chain in order */
	if b->block.end_default ^= null
		then b->block.end_default->default.next = d;
		else b->block.default = d;
	b->block.end_default = d;

	if pl1_stat_$check_ansi
	then if b ^= pl1_stat_$root -> block.son
	     then call parse_error(350,null);

	return;

fail:
	call free_node(d);
	call parse_error(48,null);
end default_parse;
