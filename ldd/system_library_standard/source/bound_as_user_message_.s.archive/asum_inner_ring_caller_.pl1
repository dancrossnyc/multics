/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1985 *
   *                                                         *
   *********************************************************** */

/* asum_inner_ring_caller_ -- sets up an error handler and cleanup handler,
   sets up perprocess info, find the first segment, and calls the
   real target. The system info ptr and perprocess info per are set
   in static to avoid massively complicated arg list manipulation. */

/* format: style2,indcomtxt */

/**** Written 1985-02-20 by BIM
      Modified 1985-05-17 by E. Swenson: Added check for locked database.
*/

asum_inner_ring_caller_:
     procedure (P_target, P_arg_list_ptr);

/* Parameters */

	declare P_target		 entry variable;
	declare P_arg_list_ptr	 pointer;

/* Entries */

	declare admin_gate_$syserr	 entry options (variable);
	declare asum_error_		 entry options (variable);
	declare asum_find_segment_$first
				 entry;
	declare cu_$generate_call	 entry (entry, ptr);
	declare cu_$level_get	 entry returns (fixed bin (3));
	declare cu_$level_set	 entry (fixed bin (3));
	declare get_process_id_	 entry () returns (bit (36));
	declare get_lock_id_	 entry () returns (bit (36));
declare  get_group_id_ entry() returns(char(32));
	declare get_ring_		 entry () returns (fixed bin (3));
	declare get_system_free_area_	 entry () returns (ptr);
	declare ioa_		 entry options (variable);
	declare set_lock_$unlock	 entry (bit (36) aligned, fixed binary (35));
	declare sub_err_		 entry options (variable);

/* External */

	declare error_table_$fatal_error
				 fixed bin (35) external;
	declare sys_info$time_of_bootload
				 fixed bin (71) aligned external;

/* Constant */

	dcl     ME		 char (32) initial ("asum_inner_ring_caller_") internal static options (constant);

/* Conditions */

	declare cleanup		 condition;
	declare as_user_message_error_ condition;

/* Misc */

	declare system_area		 area based (get_system_free_area_ ());
	declare initial_switch	 bit (1) aligned;

	dcl     null		 builtin;

%page;
	initial_switch = "0"b;
	as_user_message_system_info_ptr = asum_data_$system_info_ptr;
	go to COMMON;

initial:
     entry (P_target, P_arg_list_ptr);
	initial_switch = "1"b;

COMMON:
	asum_data_$entry_ring = cu_$level_get ();
	on cleanup
	     begin;
		call cu_$level_set (asum_data_$entry_ring);
		if ^initial_switch
		then if asum_data_$db_locked
		     then do;
			     call set_lock_$unlock (as_user_message_system_info.lock, (0));
			     asum_data_$db_locked = "0"b;
			end;
	     end;

	on as_user_message_error_ /* message is already written */ goto NON_LOCAL_ABORT;
						/* will cause cleanup handlers to run */

	call cu_$level_set (get_ring_ ());
	if ^initial_switch
	then call get_static_pointers;		/* insures that we have the neccessary pointers */

	call cu_$generate_call (P_target, P_arg_list_ptr);

	if ^initial_switch
	then if asum_data_$db_locked
	     then do;
		     call set_lock_$unlock (as_user_message_system_info.lock, (0));
		     asum_data_$db_locked = "0"b;
		     if asum_data_$db_multiclass
		     then call admin_gate_$syserr (LOG, "^a: ASUM database found locked after return from call by ^a.", ME, get_group_id_ ());
		     else call ioa_ ("^a: ASUM database found locked after return from call by ^a.", ME, get_group_id_ ());
		end;

	call cu_$level_set (asum_data_$entry_ring);
	return;

/**** The following code is executed upon any ASUM program signalling
      the as_user_message_error_ condition.  The non-local goto will
      cause cleanup handlers to run.  Then we will check to see if the
      database is locked, and unlock it if necessary.  We will also
      reset the validation level. */

NON_LOCAL_ABORT:
	if ^initial_switch
	then if asum_data_$db_locked
	     then do;
		     call set_lock_$unlock (as_user_message_system_info.lock, (0));
		     asum_data_$db_locked = "0"b;
		end;
	call cu_$level_set (asum_data_$entry_ring);
	call sub_err_ (error_table_$fatal_error, ME, ACTION_CANT_RESTART, null (), (0),
	     "An unexpected error has occured during the execution of an as user message facility program.  See the syserr log for details."
	     );
	return;

get_static_pointers:
     procedure;

	if asum_data_$process_info_ptr = null ()
	then do;
		asum_data_$process_id = get_process_id_ ();
		asum_data_$lock_id = get_lock_id_ ();
		allocate as_user_message_perprocess_info in (system_area);
		as_user_message_perprocess_info.sentinel = AS_USER_MESSAGE_PROCESS_SENTINEL;
		as_user_message_perprocess_info.mseg_ptr (*) = null ();
		asum_data_$process_info_ptr = as_user_message_perprocess_info_ptr;
	     end;

	if asum_data_$system_info_ptr = null ()
	then do;
		call asum_find_segment_$first;
		as_user_message_system_info_ptr = asum_data_$system_info_ptr;
		if as_user_message_system_info.time_of_bootload ^= sys_info$time_of_bootload
		then call asum_error_ (0, "asum_inner_ring_caller_", "as_user_message facility not initialized.");
	     end;
	return;
     end get_static_pointers;

/* format: off */

%page; %include as_user_message_system;
%page; %include asum_data_;
%page; %include sub_err_flags;
%page; %include syserr_constants;
%page;

/* BEGIN MESSAGE DOCUMENTATION

   Message:
   asum_inner_ring_caller_: ASUM database found locked after return from call 
      by GROUP_ID

   S:	$info

   T:	$run

   M:	$err
   The AS user message facility was called and upon return from the call
   the transfer routine asum_inner_ring_caller_ detected that the ASUM
   database (>sc1>user_messages>as_user_message_system) was left locked.
   The lock has been unlocked but the database may be inconsistent.
   This should never happen and if it does, indicates a coding error in the
   AS user message facility.  

   A:	$contact

   END MESSAGE DOCUMENTATION */

     end asum_inner_ring_caller_;
