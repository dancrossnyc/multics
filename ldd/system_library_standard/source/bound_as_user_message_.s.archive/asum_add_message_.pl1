/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1985 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(85-05-31,Swenson), approve(86-07-25,MCR7302),
     audit(86-08-13,EJSharpe), install(86-09-04,MR12.0-1147):
     Fixed to ensure all sending process security-relevant information is set
     in message segment entry.
                                                   END HISTORY COMMENTS */


/* asum_add_message_ -- procedure that appends a message to the
   database for delivery. This is the gate target, effectively */

/* format: style2,indcomtxt */

asum_add_message_:
     procedure (P_add_info_ptr, P_code);

/* Written 2/20/85 BIM */
/* Modified 1985-04, BIM: changed for new mseg_ calling sequences. */

/**** NOTE: this implements the initial strategy of keeping all the destination
      information in the _system segment. This limits to 16K messages
      outstanding. For volume applications, something better is needed.

      Also, note that this locks the database for the entire operation,
      making no use of the potential lockless update.
*/

	declare P_add_info_ptr	 pointer;
	declare P_code		 fixed bin (35);


	declare 1 add_info		 aligned like as_user_message_add_info;
	declare code		 fixed bin (35);
	declare message_added	 bit (1) aligned;
	declare hx		 fixed bin;
	declare ms_ptr		 pointer;
	declare start_n_segments	 fixed bin;
	declare sx		 fixed bin;

/* Entries */

	declare asum_error_		 entry options (variable);
	declare asum_find_segment_	 entry (fixed binary, pointer);
	declare asum_create_segment_	 entry (fixed binary, pointer);
	declare get_group_id_	 entry () returns (char (32));
	declare get_process_authorization_
				 entry () returns (bit (72) aligned);
	declare get_process_max_authorization_
				 entry () returns (bit (72) aligned);
	declare set_lock_$lock	 entry (bit (36) aligned, fixed binary, fixed binary (35));
	declare set_lock_$unlock	 entry (bit (36) aligned, fixed binary (35));

	declare error_table_$bad_arg	 fixed bin (35) ext static;
	declare error_table_$notalloc	 fixed bin (35) ext static;

	dcl     addr		 builtin;
	dcl     bin		 builtin;
	dcl     bit		 builtin;
	dcl     hbound		 builtin;
	dcl     stacq		 builtin;
	dcl     unspec		 builtin;

%include as_user_message_system;
%include as_user_message_add;
%include asum_data_;
%include mseg_entries;
%include mseg_data_;
%include mseg_operation;
%include mseg_access_operation;
%include mseg_wakeup_state;
%include mseg_message_info;
%include entry_access_info;


	as_user_message_add_info_ptr = P_add_info_ptr;
	add_info = as_user_message_add_info;		/* Copy the parm. We will copy back out */
	as_user_message_system_info_ptr = asum_data_$system_info_ptr;
	as_user_message_perprocess_info_ptr = asum_data_$process_info_ptr;
	if add_info.process_id = ""b | add_info.handle = ""b
	then call RETURN_ERROR (error_table_$bad_arg);

	call lock_database;
	do hx = 1 to hbound (as_user_message_system_info.destination_am, 1);
	     if stacq (as_user_message_system_info.destination_am (hx).process_id, add_info.process_id, ""b)
	     then go to HAVE_HX;
	end;

	call asum_error_ (0, "asum_add_message_", "destination AM full.");
HAVE_HX:
	if hx > as_user_message_system_info.highest_in_use
	then begin;
		declare his		 bit (36) aligned based (his_ptr);
		declare his_ptr		 pointer;
		declare new_his		 bit (36) aligned;
		declare old_his		 bit (36) aligned;

		old_his = unspec (as_user_message_system_info.highest_in_use);
		new_his = bit (bin (hx, 36), 36);
		his_ptr = addr (as_user_message_system_info.highest_in_use);
		do while (^stacq (his, new_his, old_his) & hx > bin (old_his, 36));
						/* use old_his to assure same comparison as stacq */
		     old_his = unspec (as_user_message_system_info.highest_in_use);
		end;
	     end;


	message_added = "0"b;
	do while (^message_added);
	     start_n_segments = as_user_message_system_info.n_segments;
	     do sx = 0 to start_n_segments - 1;
		call asum_find_segment_ (sx, ms_ptr);	/* in PP data or the hard way */
		call TRY_ADD_MESSAGE (hx, ms_ptr);

	     end;
	     if ^message_added
	     then call ADD_SEGMENT;			/* but start at the beginning again */
	end;

	call unlock_database;

/**** Arrive here on success */

	P_code = 0;
	as_user_message_add_info = add_info;		/* Copy parm back out */
	return;

RETURN_ERROR:
     procedure (code);
	declare code		 fixed bin (35);
	P_code = code;
	go to ERROR_RETURN;
     end RETURN_ERROR;

ERROR_RETURN:
	return;


ADD_SEGMENT:
     procedure;

	if start_n_segments ^= as_user_message_system_info.n_segments
	then return;

/**** So readers don't have to lock, create before bumping the count.
      readers won't try to look at an uninitialized segment, and
      writers will wait on the lock and then discover that we have added one. */

	call asum_create_segment_ (as_user_message_system_info.n_segments, ms_ptr);
	as_user_message_system_info.n_segments = as_user_message_system_info.n_segments + 1;
	return;
     end ADD_SEGMENT;

lock_database:
     procedure;

	if ^stacq (as_user_message_system_info.lock, asum_data_$lock_id, ""b)
	then call set_lock_$lock (as_user_message_system_info.lock, -1, (0));
	asum_data_$db_locked = "1"b;
	return;
     end lock_database;

unlock_database:
     procedure;

	if ^stacq (as_user_message_system_info.lock, ""b, asum_data_$lock_id)
	then call set_lock_$unlock (as_user_message_system_info.lock, (0));
	asum_data_$db_locked = "0"b;
	return;
     end unlock_database;

TRY_ADD_MESSAGE:
     procedure (hx, a_mseg_ptr);

	declare hx		 fixed bin;
	declare a_mseg_ptr		 pointer;
	declare l_message_id	 bit (72) aligned;
	declare 1 am_entry		 aligned like as_user_message_system_info.destination_am based (amep);
	declare amep		 pointer;
	declare 1 mop		 aligned like mseg_operation;

	amep = addr (as_user_message_system_info.destination_am (hx));

	mop = addr (mseg_data_$template_operation) -> mseg_operation;
	mop.suppress_access_checks = "1"b;
	mop.mseg_ptr = a_mseg_ptr;
	mop.mseg_ptr_valid = "1"b;
	mop.message_info.ms_ptr = add_info.message_ptr;
	mop.message_info.ms_len = 36 * add_info.message_length;
	mop.message_info.ms_id = ""b;			/* let mseg generate it */
	mop.message_info.ms_access_class = add_info.message_access_class;
	mop.message_info.sender_id = get_group_id_ ();
	mop.message_info.sender_process_id = asum_data_$process_id;
	mop.message_info.sender_level = asum_data_$entry_ring;
	mop.message_info.sender_authorization = get_process_authorization_ ();
	mop.message_info.sender_max_authorization = get_process_max_authorization_ ();
	mop.message_info.sender_audit = ""b;
	mop.message_info_valid = "1"b;
	mop.add_message_info_all_valid = "1"b;

	call mseg_$add_message (addr (mop), code);

	l_message_id = mop.message_info.ms_id;

	if code ^= 0 & code ^= error_table_$notalloc
	then do;
		do while (
		     ^stacq (as_user_message_system_info.destination_am (hx).process_id, ""b, add_info.process_id));
		end;

		call asum_error_ (code, "asum_add_message_", "Failed to add message to message segment.");
	     end;
	if code = error_table_$notalloc
	then return;
	if code = 0
	then do;
		unspec (as_user_message_id) = l_message_id;
		as_user_message_id.segment_index = sx;
		l_message_id = unspec (as_user_message_id);
		add_info.message_id = l_message_id;
		am_entry.handle = add_info.destination_info.handle;
		am_entry.message_id = l_message_id;
		am_entry.ring = add_info.destination_info.ring;
		am_entry.group_id = add_info.destination_info.group_id;
		am_entry.reader_deletes = add_info.destination_info.reader_deletes;
		am_entry.access_class = add_info.message_access_class;
		message_added = "1"b;
	     end;
	return;
     end TRY_ADD_MESSAGE;

     end asum_add_message_;
