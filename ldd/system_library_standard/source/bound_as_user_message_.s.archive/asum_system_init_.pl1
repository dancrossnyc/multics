/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1985 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(86-03-28,Swenson), approve(87-07-07,MCR7719),
     audit(87-06-24,Hartogs), install(87-08-04,MR12.1-1055):
     Fixed so that the Initializer process can use the UM facility.
                                                   END HISTORY COMMENTS */


/* asum_system_init_.pl1 -- program called by the initializer
   to set up as_user_messages */

/* format: style5,indcomtxt */

asum_system_init_:
        procedure (P_error_code);		      /* Full complaint registered via syserr */

/**** Created: 1985-02-01, BIM */

        declare P_error_code		fixed bin (35);

        declare asum_error_$log	entry options (variable);
        declare asum_create_segment_	entry (fixed binary, pointer);
        declare asum_create_segment_$first
				entry (pointer);
        declare expand_pathname_	entry (character (*), character (*),
				character (*), fixed binary (35));
        dcl     get_process_id_	entry () returns (bit (36) aligned);
        dcl     get_lock_id_		entry () returns (bit (36) aligned);
        declare get_system_free_area_	entry () returns (ptr);
        declare hcs_$star_		entry (char (*), char (*),
				fixed bin (2), ptr, fixed bin, ptr, ptr,
				fixed bin (35));
        declare hcs_$status_minf	entry (char (*), char (*),
				fixed bin (1), fixed bin (2),
				fixed bin (24), fixed bin (35));
        declare hcs_$create_branch_	entry (char (*), char (*), ptr,
				fixed bin (35));
        declare hphcs_$delentry_file	entry (char (*), char (*),
				fixed bin (35));
        declare hphcs_$chname_file	entry (char (*), char (*), char (*),
				char (*), fixed bin (35));
        declare hcs_$replace_inacl	entry (char (*), char (*), ptr,
				fixed bin, bit (1), fixed bin (3),
				fixed bin (35));
        declare pathname_		entry (character (*), character (*))
				returns (character (168));
        declare unique_chars_		entry (bit (*)) returns (char (15));

        declare code		fixed bin (35);

        declare error_table_$noentry	fixed bin (35) ext static;
        declare sys_info$time_of_bootload
				fixed bin (71) ext;

        dcl     addr		builtin;
        dcl     null		builtin;
        dcl     sum			builtin;
        dcl     unspec		builtin;
%page;
%include as_user_message_system;
%include asum_data_;


        P_error_code = 0;
        call find_or_create_db_dir;
        call clean_out_db_dir;
        call initialize_first_segment;
        return;

ERROR:
        P_error_code = -1;
        return;


find_or_create_db_dir:
        procedure;

        declare type		fixed bin (2);

        call hcs_$status_minf (asum_data_$db_dir, "", (0), type, (0), code);
        if code = error_table_$noentry then
	      call create_db_dir;
        else if code ^= 0 then
	      do;
	      call remove_old_entry;
	      call create_db_dir;
	      end;
        else if type ^= 2			      /* Directory */
	  then
	      do;
	      call rename_old_entry;
	      call create_db_dir;
	      end;

        return;

remove_old_entry:
        procedure;

        call asum_error_$log (0, "asum_system_init_",
	  "Cannot get status of ^a. It will be deleted.", asum_data_$db_dir);
        call hphcs_$delentry_file (asum_data_$db_dir, "", code);
        if code ^= 0 then
	      do;
	      call asum_error_$log (code, "asum_system_init_",
		"Failed to delete old db_dir ^a", asum_data_$db_dir);
	      go to ERROR;
	      end;

        return;

        end remove_old_entry;

rename_old_entry:
        procedure;

        declare shriek		char (15);
        declare entryname		char (32);

        shriek = unique_chars_ (""b);
        call expand_pathname_ (asum_data_$db_dir, (""), entryname, (0));
        call asum_error_$log (0, "asum_system_init_",
	  "^a is not a directory. It will be renamed to ^a.",
	  asum_data_$db_dir, shriek);
        call hphcs_$chname_file (asum_data_$db_dir, "", entryname, shriek, code)
	  ;
        if code ^= 0 then
	      do;
	      call asum_error_$log (code, "asum_system_init_",
		"Failed to rename ", asum_data_$db_dir);
	      go to ERROR;
	      end;
        return;
        end rename_old_entry;

create_db_dir:
        procedure;


        declare dir_name		char (168);
        declare entryname		char (32);

        call asum_error_$log (0, "asum_system_init_", "Creating directory ^a",
	  asum_data_$db_dir);
        call expand_pathname_ (asum_data_$db_dir, dir_name, entryname, (0));
        call hcs_$create_branch_ (dir_name, entryname,
	  addr (asum_data_$db_dir_cbi), code);
        if code ^= 0 then
	      do;
	      call asum_error_$log (code, "asum_system_init_",
		"Failed to create ^a", asum_data_$db_dir);
	      go to ERROR;
	      end;
        call hcs_$replace_inacl (asum_data_$db_dir, "",
	  addr (asum_data_$acl_entries), asum_data_$n_acl_entries, "1"b,
	  (asum_data_$db_rb (1)), code);
        if code ^= 0 then
	      do;
	      call asum_error_$log (code, "asum_system_init_",
		"Failed to set inital acl of ^a", asum_data_$db_dir);
	      go to ERROR;
	      end;
        return;
        end create_db_dir;
        end find_or_create_db_dir;


clean_out_db_dir:
        procedure;

        declare sx			fixed bin;

        call hcs_$star_ (asum_data_$db_dir, "**", star_ALL_ENTRIES,
	  get_system_free_area_ (), star_entry_count, star_entry_ptr,
	  star_names_ptr, code);

        if code ^= 0 then
	      return;

        do sx = 1 to star_entry_count;
	      call hphcs_$delentry_file (asum_data_$db_dir,
		star_names (star_entries (sx).nindex), code);
	      if code ^= 0 then
		    call asum_error_$log (code, "asum_system_init_",
		        "Failed to delete ^a",
		        pathname_ (asum_data_$db_dir,
		        star_names (star_entries (sx).nindex)));
        end;
        free star_names;
        free star_entries;
        return;


%include star_structures;

        end clean_out_db_dir;


initialize_first_segment:
        procedure;

        declare first_segment_ptr	pointer;
        declare sys_area		area based (get_system_free_area_ ());

        allocate as_user_message_perprocess_info in (sys_area);
        asum_data_$process_info_ptr = as_user_message_perprocess_info_ptr;

/**** Be sure to set these values, or else the process which calls this
      entry will never be able to use the ASUM facility itself. */

        asum_data_$process_id = get_process_id_ ();
        asum_data_$lock_id = get_lock_id_ ();

        as_user_message_perprocess_info.sentinel =
	  AS_USER_MESSAGE_PROCESS_SENTINEL;
        as_user_message_perprocess_info.mseg_ptr (*) = null ();

        call asum_create_segment_$first (first_segment_ptr);
        as_user_message_system_info_ptr = first_segment_ptr;
        asum_data_$system_info_ptr = first_segment_ptr;

        as_user_message_system_info.sentinel = AS_USER_MESSAGE_SYSTEM_SENTINEL;
        as_user_message_system_info.time_of_bootload =
	  sys_info$time_of_bootload;
        as_user_message_system_info.lock = ""b;
        as_user_message_system_info.n_segments = 1;
        as_user_message_system_info.highest_in_use = 0;
        unspec (as_user_message_system_info.destination_am) = ""b;

        call asum_create_segment_ (0, first_segment_ptr);
        as_user_message_perprocess_info.mseg_ptr (0) = first_segment_ptr;
        return;
        end initialize_first_segment;
        end asum_system_init_;


