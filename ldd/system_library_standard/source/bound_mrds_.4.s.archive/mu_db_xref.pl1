/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1985 *
        *                                                         *
        *********************************************************** */

/* format: ^inddcls,^indattr,indnoniterend,^indnoniterdo,indend,tree,^case,insnl,comcol61,dclind5,declareind5,delnl */

/*DESCRIPTION
  This set of routines manages a temporary keyed vfile. This file contains the
  database crossreference (ie., which domains are used by which attributes or
  which attributes are used by which relations). The $build entry point is used
  to create and initialize the file, the $reference, $dereference and $delete
  are used to modify it, and the $find is used to query it.
*/

/****^  HISTORY COMMENTS:
  1) change(85-12-03,Spitzer), approve(85-12-03,MCR7311),
     audit(86-09-15,Gilcrease), install(86-10-16,MR12.0-1187):
     written
                                                   END HISTORY COMMENTS */

mu_db_xref:
     proc;

	return;

/************************* EP build *************************/

/*DESCRIPTION
  This procedure creates a keyed_sequential vfile_ and goes through
  each relation in the db_model adding the attribute and domain names to the
  vfile as keys and a crossreference as the record data.  No duplicate
  attributes or domains are stored so when complete it contains a list of all
  the unique objects in the database.
*/

mu_db_xref$xref_build:
     entry (Itemp_dir_path, Idb_path, Idbm_ptr, Ofile_name, Oiocb_ptr, Oerror_message, Ocode);

/* Initialization */

	temp_dir_path = Itemp_dir_path;
	db_path = Idb_path;
	dbm_ptr = Idbm_ptr;

/* Create the attach description, attach and open the file */

	temp_file_attach_name = unique_chars_ ("0"b) || ".rmdb.xref";
	temp_file_attach_desc = "vfile_  " || rtrim (temp_dir_path) || ">" || temp_file_attach_name || " -share";

	temp_file_iocb_ptr, temp_seg_ptr, fm_ptr = null;
	close_temp_file = TRUE;
	on cleanup
	     begin;
		if fm_ptr ^= null
		then call terminate_file_ (fm_ptr, (0), TERM_FILE_TERM, (0));
		call cleaner;
	     end;

	call iox_$attach_name (temp_file_attach_name, temp_file_iocb_ptr, temp_file_attach_desc, null, code);
	if code = 0
	then call iox_$open (temp_file_iocb_ptr, Keyed_sequential_update, "0"b, code);
	if code ^= 0
	then call error (code, temp_file_attach_desc);

	call mu_temp_segments$get_temp_segment_path (temp_dir_path, myname, temp_seg_ptr, code);
	if code ^= 0
	then call error (code, "Unable to get a temporary segment.");
	crossref_info_record_ptr = temp_seg_ptr;

	max_seg_size = sys_info$max_seg_size * 4;

/* Look at all the relations */

	do fi_ptr = ptr (dbm_ptr, db_model.file_ptr) repeat ptr (dbm_ptr, file_info.fwd_ptr)
	     while (rel (fi_ptr) ^= NULL_OFFSET);

	     file_model_name = rtrim (file_info.file_name) || ".m";
	     call initiate_file_ (db_path, file_model_name, R_ACCESS, fm_ptr, (0), code);
	     if fm_ptr = null
	     then call error (code, rtrim (db_path) || file_model_name);

/* Add this relation to the xref. */
	     call find_record (RELATION_KEY_HEAD, (file_info.file_name), crossref_info_record_ptr, max_seg_size);
	     if code = 0
	     then call error (code, (file_info.file_name));
	     else if code ^= error_table_$no_record
		then call error (code, error_message);

	     call add_name ("", rel (fi_ptr), "0"b);

/* Get a pointer to the relation_info structure in the file_model. */
	     ri_ptr = ptr (fm_ptr, file_model.rel_ptr);	/* Relation info ptr */

/* Loop through all attributes */

	     do ai_ptr = ptr (fm_ptr, rel_info.attr_ptr) repeat ptr (fm_ptr, attr_info.fwd_thread)
		while (rel (ai_ptr) ^= NULL_OFFSET);

		call find_record (ATTRIBUTE_KEY_HEAD, (attr_info.name), crossref_info_record_ptr, max_seg_size);
		if code = 0
		then do;				/* it is there, so update the reference count */
		     call add_name ((file_info.file_name), "0"b, "1"b);
		     if code ^= 0
		     then call error (code, "Rewriting list record: " || key);
		     end;
		else if code = error_table_$no_record
		     then do;			/*  attribute name is not in list so add it */
			call add_name ((file_info.file_name), attr_info.domain_ptr, "0"b);
			if code ^= 0
			then call error (code, "Storing list record: " || key);
			end;
		     else call error (code, "Seek key: " || key);

/* Now update the domain crossreference record for this attribute */

		di_ptr = ptr (dbm_ptr, attr_info.domain_ptr);
		call find_record (DOMAIN_KEY_HEAD, (domain_info.name), crossref_info_record_ptr, max_seg_size);
		if code = 0
		then do;				/* key is already there */
		     call add_name ((attr_info.name), "0"b, "1"b);
		     if code ^= 0
		     then call error (code, "Storing list record: " || key);
		     end;
		else if code = error_table_$no_record
		     then do;			/* key is not there, so add it */
			call add_name ((domain_info.name), attr_info.domain_ptr, "0"b); 
			                              /* entry for generated attr */
			if code ^= 0
			then call error (code, "Storing list record: " || key);
			call add_name ((attr_info.name), "0"b, "1"b);
			if code ^= 0
			then call error (code, "Storing list record: " || key);
			end;
		     else call error (code, "Seeking list record: " || key);

		end;				/* END of all attributes */

/* Done with this file_model segment */
	     call terminate_file_ (fm_ptr, (0), TERM_FILE_TERM, code);
	     if code ^= 0
	     then call error (code, "Terminating " || file_model_name);

	     end;					/* END of all files (relations) */

/* Now go thru the list of domains adding the domain name as an attribute name
   to take care of the case where a domain might not have an attribute defined
   for it */

	do di_ptr = ptr (dbm_ptr, db_model.domain_ptr) repeat ptr (dbm_ptr, domain_info.fwd_thread)
	     while (rel (di_ptr) ^= NULL_OFFSET);

	     call find_record (ATTRIBUTE_KEY_HEAD, (domain_info.name), crossref_info_record_ptr, max_seg_size);
	     if code = error_table_$no_record
	     then do;				/*  Attr name is not in list so add it */
		call add_name ("", rel (di_ptr), "0"b);
		if code ^= 0
		then call error (code, "Storing list record: " || key);
		end;
	     else if code ^= 0
		then call error (code, "Seeking list record: " || key);

/* Add in the unreferenced domains */
	     call find_record (DOMAIN_KEY_HEAD, (domain_info.name), crossref_info_record_ptr, max_seg_size);
	     if code = error_table_$no_record
	     then do;
		call add_name ((domain_info.name), rel (di_ptr), "0"b);
		if code ^= 0
		then call error (code, "Storing list record: " || key);
		end;
	     else if code ^= 0
		then call error (code, "Seeking list record: " || key);

	     end;					/* END loop thru all domains */

/* Finally, do all the unreferenced attributes. The unreferenced domains were
   caught in the previous loop, when all the defined domains were added. */

	do ua_ptr = ptr (dbm_ptr, db_model.unreferenced_attribute_ptr)
	     repeat ptr (dbm_ptr, unreferenced_attribute.fwd_thread) while (rel (ua_ptr) ^= NULL_OFFSET);

	     call find_record (ATTRIBUTE_KEY_HEAD, (unreferenced_attribute.name), crossref_info_record_ptr,
		max_seg_size);
	     if code = 0
	     then call error (mrds_error_$internal_error, "Encountered a seek key for unreferenced attribute: " || key);
	     else if code = error_table_$no_record
		then do;
		     call add_name ("", unreferenced_attribute.domain_ptr, "0"b);
		     if code ^= 0
		     then call error (code, "Storing list record: " || key);
		     end;
		else call error (code, "Seeking key: " || key);

/* Now update the domain crossreference record for this attribute */
	     di_ptr = ptr (dbm_ptr, unreferenced_attribute.domain_ptr);
	     call find_record (DOMAIN_KEY_HEAD, (domain_info.name), crossref_info_record_ptr, max_seg_size);
	     if code = 0
	     then do;				/* key is already there */
		call add_name ((unreferenced_attribute.name), "0"b, "1"b);
		if code ^= 0
		then call error (code, "Storing list record: " || key);
		end;
	     else if code = error_table_$no_record
		then call error (mrds_error_$internal_error,
			"Did not encounter a seek domain key for an unreferenced attribute: " || key);
		else call error (code, "Seeking list record: " || key);

	     end;					/* do ai_ptr */

/* vfile_ now contains all unique attribute names as keys with domain offset and reference count as data.  */

	Ofile_name = temp_file_attach_name;
	Oiocb_ptr = temp_file_iocb_ptr;
	close_temp_file = FALSE;

	call error (0, "");
%page;
/************************* EP destroy ***************************/

/*DESCRIPTION
  This entry point deletes the crossreference file.
*/

mu_db_xref$xref_destroy:
     entry (IOfile_iocb_ptr, Itemp_dir_path, IOfile_name, Oerror_message, Ocode);

	temp_file_iocb_ptr = IOfile_iocb_ptr;
	temp_dir_path = Itemp_dir_path;
	temp_file_attach_name = IOfile_name;

	temp_seg_ptr = null;
	if temp_file_iocb_ptr ^= null
	then close_temp_file = TRUE;			/* so cleaner proc will delete it */

	IOfile_iocb_ptr = null;
	IOfile_name = "";
	call error (0, "");
%page;
/************************* EP reference *************************/

/*DESCRIPTION
  This entry point adds a given attribute or domain to the specified type of
  record. An error is returned if the record doesn't already exist.
*/

mu_db_xref$xref_reference:
     entry (Ifile_iocb_ptr, Ikey_head, Irecord_name, Iobject_name, Irecord_ptr, Irecord_length, Oerror_message, Ocode);

	temp_file_iocb_ptr = Ifile_iocb_ptr;
	temp_seg_ptr = null;
	close_temp_file = FALSE;
	call get_temp_dir_path;

	on cleanup call cleaner;
	call mu_temp_segments$get_temp_segment_path (temp_dir_path, myname, temp_seg_ptr, code);
	if code ^= 0
	then call error (code, "Cannot get temp segment.");

	crossref_info_record_ptr = temp_seg_ptr;
	max_seg_size = sys_info$max_seg_size * 4;
	call find_record (Ikey_head, Irecord_name, crossref_info_record_ptr, max_seg_size);
	if code ^= 0
	then call error (code, "Seeking list record: " || key);

	call add_name (Iobject_name, "0"b, "1"b);
	if code = 0
	then do;
	     if Irecord_ptr ^= null
	     then do;				/* give the caller something for his trouble */
		max_seg_size = min (currentsize (crossref_info_record) * 4, Irecord_length);
		call mlr_ (crossref_info_record_ptr, max_seg_size, Irecord_ptr, max_seg_size);
		end;
	     call error (0, "");
	     end;
	else call error (code, "Rewriting list record: " || key);
%page;
/************************* INTERNAL add_name *************************/

/* This internal subroutine adds a single name to a crossref record and writes
   it back out to the temp file. It maintains the list of unique names in
   sorted ascending order. */

add_name:
     proc (name, offset, record_exists);

dcl  idx fixed bin;
dcl  name char (*) parameter;
dcl  offset bit (18) unaligned parameter;
dcl  position fixed bin;
dcl  record_exists bit (1) aligned parameter;

	if record_exists
	then do;
	     if ^search (name, idx)
	     then do;
		position, crossref_info_record.count = crossref_info_record.count + 1;
		crossref_info_record.object_head (position) = OBJECT_HEAD;
		crossref_info_record.object (position) = name;
		end;				/* end insert somewhere */
	     call iox_$rewrite_record (temp_file_iocb_ptr, crossref_info_record_ptr,
		currentsize (crossref_info_record) * 4, code);
	     end;					/* end record exists */
	else do;					/* build a new record */
	     crossref_info_record.offset = offset;
	     if name ^= ""
	     then do;
		crossref_info_record.count = 1;
		crossref_info_record.object_head = OBJECT_HEAD;
		crossref_info_record.object (1) = name;
		end;
	     else crossref_info_record.count = 0;

	     call iox_$write_record (temp_file_iocb_ptr, crossref_info_record_ptr,
		currentsize (crossref_info_record) * 4, code);
	     end;					/* end build a new record */

	return;
     end add_name;
%page;
/************************* EP create *************************/

/*DESCRIPTION
  This entry point creates a new crossreference record of the type specified.
*/
mu_db_xref$xref_create_record:
     entry (Ifile_iocb_ptr, Ikey_head, Irecord_name, Ioffset, Oerror_message, Ocode);

	temp_file_iocb_ptr = Ifile_iocb_ptr;
	crossref_info_record_ptr = addr (local_buffer);
	temp_seg_ptr = null;
	close_temp_file = FALSE;

/* Look for the record, it had better not be there or we can't create it */
	call find_record (Ikey_head, Irecord_name, null, 0);
	if code = 0
	then if Ikey_head = DOMAIN_KEY_HEAD		/* it was there */
	     then call error (mrds_error_$domain_already_defined, Irecord_name);
	     else call error (mrds_error_$attr_already_exists, Irecord_name);
	else if code ^= error_table_$no_record
	     then call error (code, error_message);

/* It wasn't there, go ahead, create it and write it out to the file */
	call add_name ("", Ioffset, "0"b);
	call error (code, error_message);
%page;
/************************* EP delete *************************/

/*DESCRIPTION
  This entry deletes a single record from the crossreference file. Note that
  if other records reference this one, they are not modified. The caller should
  call $dereference on all other referenced records before using $delete.
*/

mu_db_xref$xref_delete_record:
     entry (Ifile_iocb_ptr, Ikey_head, Irecord_name, Oerror_message, Ocode);

	temp_file_iocb_ptr = Ifile_iocb_ptr;
	temp_seg_ptr = null;
	close_temp_file = FALSE;

	call find_record (Ikey_head, Irecord_name, null, 0);
	if code ^= 0
	then if code = error_table_$no_record
	     then call error (0, "");
	     else call error (code, error_message);

	call iox_$delete_record (temp_file_iocb_ptr, code);
	call error (code, "Unable to delete record for key list: " || key);
%page;
/************************* EP dereference *************************/

/*DESCRIPTION
  This entry point deletes a specific name from a specified crossreference
  record.
*/

mu_db_xref$xref_dereference:
     entry (Ifile_iocb_ptr, Ikey_head, Irecord_name, Iobject_name, Oreference_count, Oerror_message, Ocode);

	temp_file_iocb_ptr = Ifile_iocb_ptr;
	temp_seg_ptr = null;
	close_temp_file = FALSE;
	call get_temp_dir_path;

	on cleanup call cleaner;
	call mu_temp_segments$get_temp_segment_path (temp_dir_path, myname, temp_seg_ptr, code);
	if code ^= 0
	then call error (code, "Cannot get temp segment.");

	crossref_info_record_ptr = temp_seg_ptr;
	max_seg_size = sys_info$max_seg_size * 4;
	call find_record (Ikey_head, Irecord_name, crossref_info_record_ptr, max_seg_size);
	if code ^= 0
	then call error (code, "Seeking list record: " || key);

	if ^search (Iobject_name, place)
	then call error (mrds_error_$internal_error,
		"Unable to find name " || rtrim (Iobject_name) || " in list record: " || key);

	call delete (place);

	call iox_$rewrite_record (temp_file_iocb_ptr, crossref_info_record_ptr, currentsize (crossref_info_record) * 4,
	     code);
	if code ^= 0
	then call error (code, "Rewriting list record: " || key);

	Oreference_count = crossref_info_record.count;

	call error (0, "");
%page;
/************************* EP modify_record_name *************************/

/*DESCRIPTION
  This entry point changes the key for a specified crossreference record.
  This must be done be deleting the old record (with it's key), and re-entering
  it. The contents of the record may or may not be specified. If not, the record
  is read first. The current record is then deleted, and the same record is
  then stored.
*/

mu_db_xref$xref_modify_record_name:
     entry (Ifile_iocb_ptr, Ikey_head, Ifrom_name, Ito_name, Irecord_ptr, Oerror_message, Ocode);

	temp_file_iocb_ptr = Ifile_iocb_ptr;
	temp_seg_ptr = null;
	close_temp_file = FALSE;

	if Irecord_ptr = null
	then do;
	     call get_temp_dir_path;
	     on cleanup call cleaner;

	     call mu_temp_segments$get_temp_segment_path (temp_dir_path, myname, temp_seg_ptr, code);
	     if code ^= 0
	     then call error (code, "Cannot get a temp segment.");

	     max_seg_size = sys_info$max_seg_size * 4;
	     crossref_info_record_ptr = temp_seg_ptr;

	     call find_record (Ikey_head, Ifrom_name, crossref_info_record_ptr, max_seg_size);
	     if code ^= 0
	     then call error (code, error_message);
	     end;
	else do;
	     crossref_info_record_ptr = Irecord_ptr;
	     temp_seg_ptr = null;

	     call find_record (Ikey_head, Ifrom_name, null, (0));
	     if code ^= 0
	     then call error (code, error_message);
	     end;

	call iox_$delete_record (temp_file_iocb_ptr, code);
	if code ^= 0
	then call error (code, "Deleting list record: " || key);

	call find_record (Ikey_head, Ito_name, null, (0));
	if code ^= error_table_$no_record
	then call error (mrds_error_$internal_error, "Found list record but shouldn't have:" || key);

	call iox_$write_record (temp_file_iocb_ptr, crossref_info_record_ptr, currentsize (crossref_info_record) * 4,
	     code);
	if code ^= 0
	then call error (code, "Writing list record: " || key);

	call error (0, "");
%page;
/************************* EP modify_reference_name *************************/

/*DESCRIPTION
  This entry point reads the specified record from the crossreference file,
  searches for the specified name. It should be there. It then deletes the
  old name, and adds the new name. This effectively does a rename operation.
  Note that in the initial implementation it moves all the names twice in the
  worst case. It should be modified to check whether the insertion point is also
  the deletion point.
*/

mu_db_xref$xref_modify_reference_name:
     entry (Ifile_iocb_ptr, Ikey_head, Irecord_name, Ifrom_name, Ito_name, Oerror_message, Ocode);

	temp_seg_ptr = null;
	close_temp_file = FALSE;
	temp_file_iocb_ptr = Ifile_iocb_ptr;
	call get_temp_dir_path;

	on cleanup call cleaner;

	call mu_temp_segments$get_temp_segment_path (temp_dir_path, myname, temp_seg_ptr, code);
	if code ^= 0
	then call error (code, "Unable to get a temp segment.");

	crossref_info_record_ptr = temp_seg_ptr;
	max_seg_size = sys_info$max_seg_size * 4;

/* Retrieve the specified record */
	call find_record (Ikey_head, Irecord_name, crossref_info_record_ptr, max_seg_size);
	if code ^= 0
	then call error (code, error_message);

/* Find the specified from name */
	if ^search (Ifrom_name, place)
	then call error (mrds_error_$internal_error,
		"Unable to find name " || rtrim (Ifrom_name) || " in list record: " || key);

	call delete (place);
	call add_name (Ito_name, "0"b, "1"b);

	call error (0, "");
%page;
/************************* INTERNAL delete *************************/

/*DESCRIPTION
  This internal subroutine deletes a single name from the current
  crossref_info_record. */

delete:
     proc (idx);

dcl  from_ptr ptr;
dcl  idx fixed bin parameter;
dcl  move_length fixed bin (21);
dcl  to_ptr ptr;

	if idx ^= crossref_info_record.count
	then do;					/* if not last entry, must move data */
	     from_ptr = addr (crossref_info_record.entry (idx + 1));
	     to_ptr = addr (crossref_info_record.entry (idx));
	     move_length = (crossref_info_record.count - idx) * 33;

	     call mlr_ (from_ptr, move_length, to_ptr, move_length);
	     end;

	crossref_info_record.count = crossref_info_record.count - 1;
	return;
     end delete;
%page;
/************************* INTERNAL search *************************/

/*DESCRIPTION
  This internal subroutine looks for the specified name inthe current
  crossreference_info_record. If found, it returns the position. If not found,
  0 is returned; as the point for new entries is always at the end of the
  list. */

search:
     proc (name, idx) returns (bit (1) aligned);

dcl  idx fixed bin parameter;
dcl  name char (*) parameter;
dcl  position fixed bin (21);
dcl  search_name char (33);

	search_name = OBJECT_HEAD || name;
	position = index (crossref_info_record_objects, search_name);
	if position = 0
	then idx = 0;
	else idx = divide (position, 33, 17, 0) + 1;
	return (idx > 0);

     end search;
%page;
/************************* EP find *************************/

/*DESCRIPTION
  This routine searches the temp file for the specified record, returning as
  much of the record as was requested.
*/

mu_db_xref$xref_find_record:
     entry (Ifile_iocb_ptr, Ikey_head, Irecord_name, Irecord_ptr, Irecord_length, Oerror_message, Ocode);

	temp_file_iocb_ptr = Ifile_iocb_ptr;
	temp_seg_ptr = null;
	close_temp_file = FALSE;

	call find_record (Ikey_head, Irecord_name, Irecord_ptr, Irecord_length);
	call error (code, error_message);

/************************* INTERNAL find_record *************************/

find_record:
     proc (key_head, record_name, record_ptr, record_length);

dcl  chars_read fixed bin (21);
dcl  key_head char (*) parameter;
dcl  record_length fixed bin (21) parameter;
dcl  record_name char (*) parameter;
dcl  record_ptr ptr parameter;

	key = key_head || rtrim (record_name);
	call iox_$seek_key (temp_file_iocb_ptr, key, (0), code);
	if code ^= 0
	then do;
	     error_message = "Seeking record key: " || key;
	     return;
	     end;

	if record_ptr ^= null
	then do;
	     call iox_$read_record (temp_file_iocb_ptr, record_ptr, record_length, chars_read, code);
	     if code ^= error_table_$long_record
	     then error_message = "Reading list record: " || key;
	     else do;
		code = 0;
		error_message = "";
		end;
	     end;
	return;
     end find_record;
%page;
/************************* EP statistics *************************/

/*DESCRIPTION
  This entry point returns the number of records of each type that exist in
  the database crossreference file.
*/

mu_db_xref$xref_statistics:
     entry (Ifile_iocb_ptr, Odomain_count, Oattribute_count, Orelation_count, Oerror_message, Ocode);

/* Initialize */
	temp_file_iocb_ptr = Ifile_iocb_ptr;
	Odomain_count, Oattribute_count, Orelation_count = 0;
	close_temp_file = FALSE;
	
/* Position to beginning of file */
	call iox_$position (temp_file_iocb_ptr, -1, 0, code);
	if code ^= 0
	then call error (code, "Positioning to beginning of crossreference file.");

/* Loop through all the records in the file */
	call iox_$read_key (temp_file_iocb_ptr, key, (0), code);
	do while (code = 0);
	     if /* case */ substr (key, 1, min (length (key), length (ATTRIBUTE_KEY_HEAD))) = ATTRIBUTE_KEY_HEAD
	     then Oattribute_count = Oattribute_count + 1;
	     else if substr (key, 1, length (DOMAIN_KEY_HEAD)) = DOMAIN_KEY_HEAD
	     then Odomain_count = Odomain_count + 1;
	     else Orelation_count = Orelation_count + 1;
	     call iox_$position (temp_file_iocb_ptr, 0, 1, code);
						/* goto next record */
	     if code = 0
	     then call iox_$read_key (temp_file_iocb_ptr, key, (0), code);
	     end;					/* do while */

	if code = error_table_$end_of_info
	then call error (0, "");
	else call error (code, "Reading crossreference file.");
%page;
RETURN_TO_CALLER:
	return;

/************************* INTERNAL error *************************/

error:
     proc (code, msg);

dcl  code fixed bin (35) parameter;
dcl  msg char (*) parameter;

	Ocode = code;
	if code = 0
	then Oerror_message = "";
	else Oerror_message = msg;
	call cleaner;

	goto RETURN_TO_CALLER;
     end error;

/************************* INTERNAL cleaner *************************/

cleaner:
     proc;

	if temp_seg_ptr ^= null
	then call mu_temp_segments$free_temp_segment (myname, temp_seg_ptr, (0));
	if (temp_file_iocb_ptr ^= null & close_temp_file)
	then call close_and_delete_temp_file;

	return;
     end cleaner;

/************** INTERNAL close_and_delete_file ***********************/

close_and_delete_temp_file:
     proc;

	call iox_$close (temp_file_iocb_ptr, (0));
	call iox_$detach_iocb (temp_file_iocb_ptr, (0));
	call iox_$destroy_iocb (temp_file_iocb_ptr, (0));
	temp_file_iocb_ptr = null;

	call delete_$path (temp_dir_path, temp_file_attach_name, "101111"b, myname, (0));

	return;
     end close_and_delete_temp_file;
%page;
/************************* INTERNAL get_temp_dir_path *************************/

/*DESCRIPTION
  Find the directory the crossreference file is created in. This is the temp
  directory specified for this rmdb invocation. */

get_temp_dir_path:
     proc;

	attach_block_ptr = temp_file_iocb_ptr -> iocb.actual_iocb_ptr -> iocb.attach_data_ptr;
	temp_dir_path = substr (attach_block.attach_descrip_string, 8, attach_block.dname_len);

	return;
     end get_temp_dir_path;
%include access_mode_values;
%include iocb;
%include iox_modes;
%include mdbm_db_model;
%include mdbm_file_model;
%include rmdb_crossref_info;
%include terminate_file;
%include vfile_attach_block;
%page;
dcl  addr builtin;
dcl  cleanup condition;
dcl  close_temp_file bit (1) aligned;
dcl  code fixed bin (35);
dcl  currentsize builtin;
dcl  db_path char (168);
dcl  delete_$path entry (char (*), char (*), bit (36) aligned, char (*), fixed bin (35));
dcl  divide builtin;
dcl  error_message char (500);
dcl  error_table_$end_of_info fixed bin (35) ext static;
dcl  error_table_$long_record fixed bin (35) ext static;
dcl  error_table_$no_record fixed bin (35) ext static;
dcl  FALSE bit (1) aligned int static options (constant) init ("0"b);
dcl  file_model_name char (32);
dcl  fixed builtin;
dcl  Idb_path char (*) parameter;
dcl  Idbm_ptr ptr parameter;
dcl  Ifile_iocb_ptr ptr parameter;
dcl  Ifrom_name char (*) parameter;
dcl  Ikey_head char (*) parameter;
dcl  index builtin;
dcl  initiate_file_ entry (char (*), char (*), bit (*), ptr, fixed bin (24), fixed bin (35));
dcl  Iobject_name char (*) parameter;
dcl  Ioffset bit (18) unaligned parameter;
dcl  IOfile_iocb_ptr ptr parameter;
dcl  IOfile_name char (*) parameter;
dcl  iox_$attach_name entry (char (*), ptr, char (*), ptr, fixed bin (35));
dcl  iox_$close entry (ptr, fixed bin (35));
dcl  iox_$delete_record entry (ptr, fixed bin (35));
dcl  iox_$destroy_iocb entry (ptr, fixed bin (35));
dcl  iox_$detach_iocb entry (ptr, fixed bin (35));
dcl  iox_$open entry (ptr, fixed bin, bit (1) aligned, fixed bin (35));
dcl  iox_$position entry (ptr, fixed bin, fixed bin (21), fixed bin (35));
dcl  iox_$read_key entry (ptr, char (256) var, fixed bin (21), fixed bin (35));
dcl  iox_$read_record entry (ptr, ptr, fixed bin (21), fixed bin (21), fixed bin (35));
dcl  iox_$rewrite_record entry (ptr, ptr, fixed bin (21), fixed bin (35));
dcl  iox_$seek_key entry (ptr, char (256) var, fixed bin (21), fixed bin (35));
dcl  iox_$write_record entry (ptr, ptr, fixed bin (21), fixed bin (35));
dcl  Irecord_length fixed bin (21) parameter;
dcl  Irecord_name char (*) parameter;
dcl  Irecord_ptr ptr parameter;
dcl  Itemp_dir_path char (*) parameter;
dcl  Ito_name char (*) parameter;
dcl  key char (256) varying;
dcl  length builtin;
dcl  local_buffer (10) fixed bin (35);
dcl  max_seg_size fixed bin (21);
dcl  mu_temp_segments$free_temp_segment entry (char (*), ptr, fixed bin (35));
dcl  mu_temp_segments$get_temp_segment_path entry (char (*), char (*), ptr, fixed bin (35));
dcl  min builtin;
dcl  mlr_ entry (ptr, fixed bin (21), ptr, fixed bin (21));
dcl  mrds_error_$attr_already_exists fixed bin (35) ext static;
dcl  mrds_error_$domain_already_defined fixed bin (35) ext static;
dcl  mrds_error_$internal_error fixed bin (35) ext static;
dcl  myname char (32) int static options (constant) init ("mu_db_xref");
dcl  null builtin;
dcl  NULL_OFFSET bit (18) unal int static options (constant) init ((18)"1"b);
dcl  Oattribute_count fixed bin parameter;
dcl  Ocode fixed bin (35) parameter;
dcl  Odomain_count fixed bin parameter;
dcl  Oerror_message char (*) parameter;
dcl  Ofile_name char (*) parameter;
dcl  Oiocb_ptr ptr parameter;
dcl  Oreference_count fixed bin (21) parameter;
dcl  Orelation_count fixed bin parameter;
dcl  place fixed bin;
dcl  ptr builtin;
dcl  rel builtin;
dcl  rtrim builtin;
dcl  substr builtin;
dcl  sys_info$max_seg_size fixed bin (35) ext static;
dcl  temp_dir_path char (168);
dcl  temp_file_attach_desc char (256);
dcl  temp_file_attach_name char (32);
dcl  temp_file_iocb_ptr ptr;
dcl  temp_seg_ptr ptr;
dcl  terminate_file_ entry (ptr, fixed bin (24), bit (*), fixed bin (35));
dcl  TRUE bit (1) aligned int static options (constant) init ("1"b);
dcl  unique_chars_ entry (bit (*)) returns (char (15));

     end mu_db_xref;
