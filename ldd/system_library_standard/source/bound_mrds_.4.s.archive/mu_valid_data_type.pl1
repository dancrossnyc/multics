/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* HISTORY:

   Originally written by Jim Gray - - December 1979
   Modified by Jim Gray - - Dec. 1979, to add entry to allow structures/arrays to be legal

*/

mu_valid_data_type: valid_scalar_data_type: procedure (input_descriptor) returns (bit (1) aligned);

/* DESCRIPTION:

   given a 36-bit multics argument descriptor,
   this routine determines whether it describes a data type
   that is currently supported by the current version MRDS databases.
   a true value is returned if the data type is supported/valid, else false is returned.
   the descriptor is assumed to be valid, with correct values for
   scale, precision, size, etc. for that data type, since this is to
   be an efficient run-time routine having error checks made elsewhere.
   the current supported data types are 1-12, 19-22, 43-46, scalar
   values(no arrays). see the subsystem writers guide for
   details of descriptors and their type information.
   note: the data types that MRDS can handle can be expanded to those
   that assign_ can handle, but no further. currently the other types that
   assign_ can handle, that mrds doesn't are 33-34, and 41-42.
   types 41-42 could never be supported due to the need for mrds to be able
   to calculate bit storage length of any data type, and the types
   require knowledge of the storage location, in order to do that.

*/

/* PARAMETERS:

   input_descriptor - - (input) bit(36), multics pl1 argument descriptor
   to be checked as to whether it is a supported MRDS data type,
   see subsystem writers guide for format.

   valid_flag - - (output) bit(1) aligned, true/false indicator,
   true if descriptor given is a supported MRDS data type, else false.

   sub_error_ - - (output) condition, signaled upon occurence of an error
   to provide more information

*/

/* normal entry */

	arrays_ok, structures_ok = OFF;

	call check_descriptor ();

/* reports results to caller */

	return (valid_flag);





/* entry to allow arrays and structures to be legal */

structures_arrays_ok: valid_structure_data_type: entry (input_descriptor) returns (bit (1) aligned);

	arrays_ok, structures_ok = ON;

	call check_descriptor ();

/* report results to users */

	return (valid_flag);

check_descriptor: procedure ();

/* get local version of descriptor */

	descriptor = input_descriptor;

/* invalidate array variables */

	if dimension > 0 & ^arrays_ok then
	     valid_flag = OFF;
	else do;

/* check for supported data types */

/*  if (data_type >= 1 & data_type <= 12) | /* binary or decimal */
/*  (data_type >= 19 & data_type <= 22) | /* character and bit */
/*      /* (data_type >= 33 & data_type <= 34) | /* binary unsigned */
/*      /* (data_type >= 41 & data_type <= 42) | /* decimal 4-bit */
/*  (data_type >= 43 & data_type <= 46) | /* decimal 4-bit byte-aligned, "packed decimal" */
/*   (data_type = 17 & structures_ok) then ; */

		if legal (data_type) then
		     valid_flag = ON;
		else if data_type = 17 & structures_ok then
		     valid_flag = ON;
		else valid_flag = OFF;


	     end;

     end;

	declare legal		 (0:63) bit (1) /* array of flags for legal data types */
				 init ((1) ("0"b), (12) ("1"b), (6) ("0"b), (4) ("1"b), (20) ("0"b), (4) ("1"b), (17) ("0"b))
				 int static options (constant);
	declare valid_flag		 bit (1) aligned;	/* on => valid, else invalid data type */
	declare input_descriptor	 bit (36);	/* users data descriptor */
	declare descriptor		 bit (36);	/* local version of descriptor */
	declare 1 descriptor_dimension unal based (addr (descriptor)), /* overlay for dimension field of descriptor */
		2 unused_1	 bit (8) unal,
		2 dimension	 unsigned fixed bin (4) unal, /* dimension field */
		2 unused_2	 bit (24) unal;
	declare 1 descriptor_type	 unal based (addr (descriptor)), /* overlay for data type field */
		2 unused_1	 bit (1) unal,
		2 data_type	 unsigned fixed bin (6) unal, /* descriptor type code */
		2 unused_2	 bit (29) unal;
	declare ON		 bit (1) init ("1"b) int static options (constant); /* true value */
	declare OFF		 bit (1) init ("0"b) int static options (constant); /* false value */
	declare structures_ok	 bit (1);		/* on => allow structures to be legal */
	declare arrays_ok		 bit (1);		/* on => allow arrays to be legal */
	declare addr		 builtin;

     end;
