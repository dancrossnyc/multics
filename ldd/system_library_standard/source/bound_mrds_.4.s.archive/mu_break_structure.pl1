/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* HISTORY:

   Originally written by J. A. Weeldreyer - - December 1975

   Completely rewritten by Jim Gray - - January 1980, to
   1) correct handling of arrays
   2) generalize the structure handling to any number of levels
   3) put the data length/alignment routines in common code
   4) redo the handling of settting/getting bit offsets in pointers
   5) make a call to a  common  valid_data_type  routine  so  packed
   .   decimal cound be handled

   81-10-28 Davids: modified to call bit_offset_ and set_bit_offset_
   (new  system  routines  that  came  out  with  MR9.0)  instead of
   mu_pointer_bit_offset$get  and  $set.  Also   changed   to   call
   set_bit_offset_ only if needed (i.e. if there are pad bits before
   the next data bit, i.e. needed_bits = 0)  instead  of  of  always
   calling it.

   83-04-11 Davids: Changed calls to the system procedure bit_offset_
   and set_bit_offset_ to references to the new pl1 builtins bitno and
   setbitno.
*/

mu_break_structure: break_structure: procedure (area_ptr, input_data_ptr, input_desc_ptr,
	arg_array_ptr, argument_count, error_code);

/* DESCRIPTION:

   the purpose of this routine is to make it possible for  the  user
   to  specify  a  structure  with  all attributes contained in that
   structure, when doing a store/retrieve/etc., rather  than  having
   to  give individual variables for each attribute in the relation.
   the function of this routine is to take the structure declaration
   argument  list  of  a  data pointer and a descriptor pointer, and
   convert them into an equivalent list of data/descriptor pointers,
   like  in  an  argument  list,  with individual structure elements
   described by each entry in this list, so that it looks  like  the
   user   actually  did  give  individual  variables  in  his  entry
   options(variable) call  to  store,  retrieve,  etc.  an  area  of
   sufficient  size  to  hold the new argument list to be built must
   have it's pointer passed in, and a pointer  to  the  arg_list  is
   returned,  along with the total argument count. SEE PARAMETERS ON
   NEXT PAGE.

   Note 1 difference, data pointer to varying data  types  point  to
   the length word instead of the first word of data.
*/

/* PARAMETERS:

   area_ptr - - (input) pointer, points to  an  area  of  sufficient
   size  to  hold the new argument list, appoxiamately 2 * number of
   individual variables words of storage + 4 words of overhead.

   input_data_ptr - - (input) pointer,  points  the  the  structures
   data,  this  is  taken  from  the  original arg_list of the entry
   options(variable) callee

   input_desc_ptr - - (input)  pointer,  points  to  the  structures
   descriptor, taken from the original arg_list as above.

   arg_array_ptr - - (output) pointer, points to the  array  portion
   of  the newly built argument list that contains the array of data
   and descriptor pointers.

   argument_count - - (output) fixed bin, the number of  data  items
   decribed by the newly built argument list.

   error_code - - (output) fixed bin(35), 0  unless  an  unsupported
   data type was encountered.
*/

/* initialize */

	error_code = 0;

	last_data_ptr = input_data_ptr;
	last_desc_ptr = input_desc_ptr;

/* get space for the new argument list */

	argument_count = get_arg_count ();

	num_ptrs = 2 * argument_count;

	allocate arg_array set (arg_array_ptr) in (work_area);

	al_ptr = addrel (arg_array_ptr, -2);		/* use arg_list overlay for convenience */

/* fill in the descriptor and data pointers in the new argument list */

	arg_list_index = 1;

	call fill_arg_list ();

/* the argument list header would look like this,
   if we were going to fill it in, but it is unused
   and in fact would destory block headers in the work area if used

   arg_list.arg_count, arg_list.desc_count = 2 * argument_count ;
   arg_list.code = 4 ;  arg_list.pad = 0 ;				/* normal arg list */


/* give the user back the broken down argument list we built
   pointed to by arg_array_ptr, with size of argument_count * 2 */

	return;

fill_arg_list: procedure ();

/* this is a recursive procedure to procede through the list
   of descriptors describing, the input structure, and to fill in
   an argument list with data and descriptor pointers, that is
   equivalent to the user making the call, not with a structure name,
   but with individual structure qualified references. */

	number_of_elements = fixed (string (last_desc_ptr -> descriptor.size));
	last_desc_ptr = addrel (last_desc_ptr, 1);	/* skip over structure descriptor to first element descriptor */
	element_index = 1;

/* go through all elements in this structure */

	do while (element_index <= number_of_elements & error_code = 0);

	     desc_ptr = last_desc_ptr;

/* exit if unsupported data type found */

	     if ^mu_valid_data_type$structures_arrays_ok (desc_ptr -> descriptor_overlay) then
		error_code = mrds_error_$invalid_dm_descriptor;
	     else do;

/* make a recursive call if this is a lower level structure */

		     if descriptor.type = STRUCTURE then
			call fill_arg_list ();
		     else do;

/* set the position of the data pointer to correctly reflect
   the required alignment on bit/char/word boundary according to it's type */

			     bit_offset = bitno (last_data_ptr);
			     needed_bits = mu_data_align (desc_ptr, bit_offset);
			     if needed_bits = 0
			     then next_bit_offset = bit_offset;
			     else do;
				     next_bit_offset = bit_offset + needed_bits;
				     last_data_ptr = setbitno (last_data_ptr, next_bit_offset);
				end;

/* fill in the next slot in the new argument list we are building,
   with the descriptor and data pointers for this datum,
   then set up the index for the next slot in the list */

			     arg_list.arg_des_ptr (arg_list_index) = last_data_ptr;
			     arg_list.arg_des_ptr (arg_list_index + argument_count) = desc_ptr;
			     arg_list_index = arg_list_index + 1;

/* compute the space needed for this data, and advance the pointer
   to the current end of data, so we can do proper alignment next time */

			     array_elements = get_array_size ();
			     data_length = mu_data_length (desc_ptr -> descriptor_overlay);

			     if array_elements = 0 then
				new_offset = next_bit_offset + data_length;
			     else do;
				     align_bits = mu_data_align (desc_ptr, next_bit_offset + data_length);
				     new_offset = next_bit_offset + data_length +
					((array_elements - 1) * (data_length + align_bits));
				end;

			     last_data_ptr = setbitno (last_data_ptr, new_offset);

/* advance to next descriptor for next structure element,
   this will require skipping bounds info, if this was an array */

			     last_desc_ptr = addrel (last_desc_ptr, 1 + (fixed (descriptor.number_dims) * 3));

			end;

/* go on to next structure element */

		     element_index = element_index + 1;

		end;

	end;



	declare element_index	 fixed bin;	/* number of structure element under consideration */
	declare number_of_elements	 fixed bin (35);	/* number of elements in this structure */

     end;

get_arg_count: procedure () returns (fixed bin (35));

/* routine to calculate the total number of data items that
   are include in all levels of a structure declaration
   this requires an additional recursive pass through
   the structure declaration, in order to count all
   levels of structure elements that will occupy an arg_list slot */

	number_of_args = 0;
	desc_ptr = last_desc_ptr;

	call count_elements ();

	return (number_of_args);



	declare number_of_args	 fixed bin (35);	/* number of entries needed in new arg list */

count_elements: procedure ();

/* this is a recursive routine, that will increment the
   number of arg_list slots needed, once for every non-structure
   declaration element in all levels of this structure descriptor */

	structure_size = fixed (string (descriptor.size));
	desc_ptr = addrel (desc_ptr, 1);		/* skip structure descriptor */
	element_count = 1;

/* count all non-structure declarations, making recursive calls
   for any lower level structures. note that an array counts only
   as one entry needed in the arg_list */

	do while (element_count <= structure_size);

	     if descriptor.type = STRUCTURE then
		call count_elements ();
	     else do;

/* non-structure element, count it, and advance to next descriptor */

		     number_of_args = number_of_args + 1;

		     desc_ptr = addrel (desc_ptr, 1 + (fixed (descriptor.number_dims) * 3));

		end;

/* advance to next element in structure */

	     element_count = element_count + 1;

	end;



	declare element_count	 fixed bin (35);	/* current position in structure descriptor */
	declare structure_size	 fixed bin (35);	/* total number of structure elements */

     end;

     end;

get_array_size: procedure () returns (fixed bin (35));

/* routine to find the total number of elements involved in an array */

	num_dims = fixed (descriptor.number_dims);

	if num_dims = 0 then
	     element_count = 0;			/* not an array, scalar variable */
	else do;

		element_count = 1;			/* init to multiplicative identity */

		do i = 1 to num_dims;

		     element_count = element_count * ((upper_bound (i) - lower_bound (i) + 1));

		end;

	     end;

	return (element_count);



	declare element_count	 fixed bin (35);	/* current count of number of array elements */

     end;

	declare input_data_ptr	 ptr;		/* input pointer to structure data */
	declare input_desc_ptr	 ptr;		/* input pointer to structure descriptor */
	declare arg_list_index	 fixed bin;	/* index into array of data/desc ptrs in arg list being built */
	declare area_ptr		 ptr;		/* pointer to area where arg list is allocated */
	declare work_area		 area based (area_ptr); /* area for arg list to be built in */
	declare new_offset		 fixed bin (35);	/* updated offset for end of data pointer */
	declare align_bits		 fixed bin;	/* needed padding for array data elements */
	declare mu_data_length	 entry (bit (36)) returns (fixed bin (35)); /* calculates storage bits */
	declare data_length		 fixed bin (35);	/* required storage bit length */
	declare array_elements	 fixed bin (35);	/* number of elements in an array */
	declare needed_bits		 fixed bin;	/* number of bits to get proper alignment */
	declare mu_data_align	 entry (ptr, fixed bin (35)) returns (fixed bin); /* gets padding for proper alignment */
	declare bit_offset		 fixed bin (35);	/* true bit offset of data */
	declare STRUCTURE		 fixed bin int static options (constant) init (17); /* data type for structure */
	declare mrds_error_$invalid_dm_descriptor fixed bin (35) ext; /* unsupported data type */
	declare mu_valid_data_type$structures_arrays_ok entry (bit (36)) returns (bit (1) aligned); /* decides if type supported */
	declare error_code		 fixed bin (35);	/* error status encoding */
	declare last_desc_ptr	 ptr;		/* pointer to last descriptor pointer looked at */
	declare last_data_ptr	 ptr;		/* last pointer to end of data */
	declare argument_count	 fixed bin;	/* number of data items in structure */
	declare arg_array_ptr	 ptr;		/* points to start of array of data/desc pointers */
	declare descriptor_overlay	 bit (36) unal based; /* overlay for descriptor */
	declare i			 fixed bin;	/* dimension loop index */
	declare next_bit_offset	 fixed bin (35);	/* bit offset after data alignment */
	declare arg_array		 (num_ptrs) ptr based (arg_array_ptr); /* array of desc/data ptrs to be passed back */
	dcl     (bitno, setbitno, addrel, fixed, string) builtin;

%include mdbm_descriptor;
%page;
%include mdbm_arg_list;

     end;
