/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

mrds_dsl_search: proc (dbcb_ptr, area_ptr, code);

/*
   .                        BEGIN_DESCRIPTION
   This  is the procedure which directs the searching of the database to locate
   the  next  tuple satisfying the selection expression.  Search is implemented
   as  a  finite  state  machine  which  recognizes  six op codes, namely:

   (1) initialize tuple variable ranges,

   (2) move comparison values,

   (3) select next tuple,

   (4) return information,

   (5) return null.

   (6) initialize the search_vars structure

   The  search_vars  and  search_ops  structures  must be in existence prior to
   calling mrds_dsl_search.

   .    State 6 is executed first and initiates the  search_vars
   .    structure. Among other things this structure will keep a
   .    pointer to the tid list.

   .    State 2 (move) is executed next. This state  moves  into
   .    locations  known  to state 3 values that will be used to
   .    locate tuples using key searchs. It will also encode the
   .    values if need be.

   .    State  1  (init)  is now executed.  It merely  marks the
   .    search as .  starting at the top of the relation.

   .    State  3  (select)  is now executed,  it selects a tuple
   .    based  on  the search specification  and the rest of the
   .    conditions on    the tuple.  mu_retrieve does the actual
   .    retrieveal.

   .    State 4 is the normal return  case,  it  sets  the  next
   .    state to be executed back to 3 and returns.

   .    State  5  is  the  error  case  it  sets  the  code   to
   .    tuple_not_found and returns.

   Note  that  for  more  complex   SEs   there   may   be   several
   move-init-select  loops but the function of each loop remains the
   same.
   .                           END_DESCRIPTION

*/


/* MRDS_DEGUG_TOOL SWITCHES:

   bit 1 = display each tuple located.
   bits 2 thru 9 = not used.

*/
%page;
/* HISTORY:

   76-01-01 O.  D.  Friesen: Pre-MR7.0 version written.

   78-09-01 J.  A.  Weeldreyer: Completely rewritten for MR7.0.

   79-05-17 Al Kepner: Modified to add entries db_on and db_off.

   79-06-18   Al   Kepner:   Modified   to   interpret  error_table_$no_key  as
   tuple_not_found.

   79-07-03 Al Kepner: Modified to use mu_convert$convert_data and to eliminate
   code  for  setting the bit length of a varying character string.  The length
   of  a  varying  character string will now be stored in the db as a character
   count.

   79-07-31 Al Kepner: Modified to make -current work correctly.

   79-08-30 Davids: Modified to handle the where clause ((r.i > 4) & (r.i < 6))
   where i is a secondary index.

   79-09-06  Davids:  Modified  to  accommodate  a  new  calling  sequence  for
   mu_encd_key  .  Also
   inclusion   of   mdbm_ind_sel_info.incl.pl1.    Note:   move_data.t_ptr  and
   init_info.val_ptr  both  point  to  a ind_sel_info structure - hopefully the
   same one.

   79-10-01 Jim Gray: Modified to correct clean up handler.

   79-11-14   Rickie   E.    Brinegar:  Modified  to  use  mrds_debug_tool  and
   db_mrds_dsl_search   instead   of   entry   points   db_on  and  db_off  and
   debug_switch.

   79-11-14 Rickie E.  Brinegar: Modified to allocate tid_array and tid_list in
   select_area, an area which is never freed.

   79-12-21  Jim  Paradise:  Modified  to  dimension  data_array  starting at 0
   instead of 1 (got a subscriptrange error).

   80-02-04  Rickie  E.   Brinegar: Modified to keep the intersection code from
   leaving the tl_ptr pointing to a useless tid_list.

   80-02-05  Jim  Gray:  Modified  to add area_ptr parameter, for passing on to
   mu_retrieve, and mrds_dsl_eval_expr.

   80-02-15  Davids: corrected indexing into data_array so that element zero is
   never  referenced.  redeclared data_array to start will element 1.  Modified
   mu_retrieve  interface  so  that it accepts an output variable which
   points  to  tuple.data of the current tuple.  corrected handling of code for
   extracting values of varying attributes for key head types.

   80-08-01  E Brunelle: Modified to use temp segments as opposed to allocating
   storage in search_area.

   80-10-20  Jim  Gray: Modified to put calls to temp seg manager in mdbm_util_
   format   for   naming   conventions,   and   add   db_index   parameter   to
   get_temp_segment entries.  This allows the opening resultant dir to be used.

   80-10-22  Jim Gray: Modified to fix bug from brunelle's change, he felt that
   union  and  differ  operators  in  the  init_range  operation would not work
   properly  unless  all of the init operation were allowed to complete, rather
   than  doing  an err_xfer immediately.  The operand_error routine was written
   for  this,  but has now be commented out.  The error introduced was that the
   error_table_$no_key  condition  was  no  longer  captured  in the code for a
   unique  index  operand  in  init_range.   It  was discovered that unions and
   differs  can not be generated by mrds_dsl_srch_prog, so that Brunelles worry
   was  unfounded,  at least for now.  Several initializations for ta_nids that
   were removed were added back, and the same for some tid_list.ta_ptr nulling.

   80-10-23 Davids: Modified d_ptr to be an array (data_ptrs) with an extent of
   mrds_data_$max_tup_var.   This  allows multiple retrieve operations in a row
   without  lossing  the first d_ptr values.  It is assumed (I cannot prove it,
   but  it  looks this way) that the multiple retrieve operations will all deal
   with  different tuple variables.  The d_ptr is used only when moving varying
   length attributes.  This fixes TR7675.

   80-10-24  Jim  Gray:  Modified  to allow tid_lists to freed when they are no
   longer  needed,  (otherwise  the growth of space usage is exponential in the
   number  of  move-init-select  triples being executed on the number of tuples
   involved  at each level.) This reduces the actual storage need to the number
   of  move-init-select  triples  needed  to implement the selction expression.
   The  area  for  freeing  them is managed as an internal static area, that is
   emptied  whenever  a new selection expression is started.  This required the
   new dbcb.new_select_expr bit in the mrds_dbcb.incl include file.

   80-10-25  Jim Gray: Modified to correct logic in init_range/unique_index, so
   that  when no_key is found, the ntids is set to 0, and the init_info loop is
   exited   normally,  rather  than  taking  an  immediate  err_xfer,  so  that
   search_vars  is  properly  set up to free the tid_array temp segment, and so
   that  the  tid_list  is  freed.   Previously, one un-freed temp segment (and
   tid_list)  was  left  around every time the no_key condition happened, which
   would eventually blow out the static_area.

   81-03-11 Rickie E.  Brinegar: Modified the index range code to behave in the
   same  manner  as  the  unique index code works in regards to getting back an
   error  code  which  is  not  zero from the indexing routine.  The error code
   error_table_$no_record  is  now  treated as a good transfer instead of as an
   error  transfer  for  the  case of the index range.  This permits the proper
   freeing of tid_list structures.

   81-03-27  Jim  Gray  :  changed  dbi  parameter  in   mu_pos_rel,
   mu_get_tid$get_tid_key,    get_tid_hash,    get_index_tids,   and
   retrieve to dbcb_ptr  as  part  of  getting  rid  of  mus_ptr_man
   module.

   81-04-25 Jim Gray : changed length declarations of  dbi_pic,  and
   mrds_data_$temp_seg_name, to allow three digit db_index values as
   part of increasing from 64 to 128 possible database openings.

   81-05-01 Jim Gray : commented out call to mu_hash_key, so  module
   mu_hash_key  could  be  removed,  since  blocked  files  are  not
   implemented.

   81-05-01 Jim Gray : extended tid_list  structure  to  contain  an
   extended  file_id,  and  added comparison of file_id's to current
   tid  comparison  in  the  init  section  for   the   intersection
   operation.  This  was  not  done  for  union  and  difference, as
   gen_srch_prog can not currently generate these operators.


   81-05-22 Jim Gray : added error message to give  details  when  a
   conversion  type move_info failed in it's call to mu_convert. The
   data types, and the source data value are displayed.  Also  added
   conversion  of move_info.s_ptr from the tuple.var_offset array to
   the current offset, for varying attrs, prior to this conversion.

   81-06-01 Jim Gray :  changed  to  use  new  resultant  structure.
   Blocked  file  code  removed,  and code never referenced removed.
   This included for the init operation, the  difference  and  union
   operations  (gen_srch_prog  never  genrates any but intersection)
   and the hash, link chain type of operand location mechanisms. The
   move_info foreign key, and encode_attr options were removed also.

   81-06-12 Jim Gray : removed extra assignment of  tid_list.fwd_thd
   pointer  for  the  case  of  init_info  operator with null second
   operand. This assignment is taken care of  by  the  free_tid_list
   routine,  and this extra code was accidentally left in during the
   addition of this routine.

   81-06-17  Jim  Gray   :   added   iocb   ptr   index   param   to
   mu_get_tid$get_tid_key so that retrieves would not be required to
   use the dedicated update iocb.

   81-06-30 Jim Gray : added a second key  value  parameter  to  the
   call  to  get  tuple  id's on a key head or index, so that ranges
   like 10 < x < 20 could be handled in one call  to  vfile  select,
   instead of two.

   81-07-01 Jim Gray : changed call to mu_pos_rel into a direct call
   to  iox_$position to avoid un-needed overhead. mu_pos_rel used to
   call iox_$control "seek_head", but that is  un-necessary  without
   blocked files, and position is needed for mu_scan_records to work
   properly. Also added call to  mu_scan_records$init  for  retrieve
   only openings, so that the EOF indicator would be reset.

   81-07-18  Jim  Gray  :  changed  to  handled  new  encodings   of
   init_info.op_type for the new access methods.

   81-07-22 Jim Gray  :  added  logic  to  allow  vfile  to  do  the
   intersection  of  tid lists whenever possible, rather than having
   mrds do it, as vfile can do it faster  on  a  previously  defined
   subset, using less space than the mrds method.

   82-06-07 Davids: expanded the description at the begining of the
   source.

   82-09-02 Mike Kubicar : made the changes necessary to use the simple
   vector structure instead of the tuple structure.

   82-0-21 Davids: changed references to search_vars.info.iocb_ind (vi) to
   search_vars.info.cursor_ptr (vi) (this changes the calling parameters of
   mu_get_tid$get_tid_key and $key_index_tids. Also removed the call to
   iox_$control (select control order) which was used to overcome a bug
   with record status and the calls to iox_$position and mu_scan_records$init
   which were used to initialize the position when the entire relation is to
   be retrieved.

   82-10-01 Davids: removed references to move_info.encd_index and
   mu_encd_key$encd_key since this is no longer done by mrds (its
   done by the relation manager).

   82-10-05 Davids: changed calling sequences of mu_get_tid entries

   82-10-13 Davids: Changes to get the module to compile. Removed the
   the references to rm_rel_info.file_id and tid_list.file_id which
   was assigned from rm_rel;_info.file_id. tid_list.file_id was
   used in the intersection merge loop.

   82-10-22 D. Woodka : Changed to set search_vars.info.first_seq_io
   if the range is unrestricted.

   82-10-22 Davids: Updated the parameter list of mu_retrieve, removed
   data_ptrs parameter. 

   82-10-28 Davids:Modified the call to mu_get_tid$get_tid_key to use
   the select_area instead of the area input as a parameter (area_ptr).
   The call to mu_get_tid$get_index_tids does not need to be modified since
   it uses an area set up spefically to hold tids.

   82-10-29 Davids: Modified so that move_info.s_ptr is now used for the
   pointer to the source data instead of using s_ptr to point to an offset
   in the tuple for the data when the source is a varying string.

   82-11-10 Davids: all calls to mu_temp_segments$free_temp_segment were
   modified to pass pointer (ta_ptr, 0) instead of just a ta_ptr. It used
   to be that the tid_array (based off of ta_ptr) was just overlayed on the
   temp segment with conversion to the relation manager the temp segment
   has become an area and the tid_array allocated in that area. The ta_ptr
   therefore no longer points to the base of the segment. The call to the
   pointer function corrects that. This modification has also been made
   to the assignment of the ta_ptr from tid_list.ta_ptr when a previous subset
   is to be used.

   82-12-21 Davids: Modified the internal proc combine_opnds to also copy the
   value of the non_standard_vfile_descriptor element of the tid_list to keep
   from using the last subset incorrectly. TR14389

   83-01-14 Davids: Modified the internal proc free_tid_list to correctly
   handle the case of removing the second element from the tid list. It was
   incorrectly changing the value of stack_ptr (pointer to the first element
   on the list) if the value of stack_ptr and last_tl_ptr (pointer to the
   parent of the element to be deleted) where equal, i.e. the element to be
   deleted was the second element on the list. It now changes the value of 
   stack_ptr only if stack_ptr and tl_ptr (pointer to the element to be
   deleted) are equal, i.e. the element to be deleted is the first first
   element on the list.

   83-04-04 Davids: Explicitly declared the builtins fixed, pointer, rel.
   Removed declarations to BIT_VAR, data_array, offset.

   83-04-22 Mike Kubicar : Removed most of the code for the init operation
   since all this is now handled by relation manager.  A select with the
   proper search specification does the same thing.  Also, the init_info
   structure no longer exists.  Finally, the calling sequence for mu_retrieve
   has changed.

   83-05-18 Ron Harvey : Changed calling sequence of mu_retrieve in order to
   accommodate a 'shortened' simple_typed_vector.

   83-05-21 Mike Kubicar : Updated to use new search specification

   84-10-21 John Hergert: added initialization of search_vars.info.ntids. Also
   removed duplicate initialization of search_vars.info.first_seq_io.

*/
%page;
	dbi_pic = dbcb.dbi;				/* convert dbi to 3 chars */
	temp_seg_name = mrds_data_$temp_seg_name || dbi_pic; /* make unique name for temp segs for this dbi */
	stack_ptr = null;				/* initiallize */
	display_tuples = "0"b;

/*	display_tuples = substr (db_mrds_dsl_search, 1, 1);   Removered for performance */

	icode = 0;
	on cleanup call tidy_up;
	sv_ptr = dbcb.sv_ptr;
	so_ptr = dbcb.so_ptr;
	ti_ptr = dbcb.ti_ptr;
	select_area_ptr = dbcb.select_area_ptr;
	range_ptr = dbcb.range_ptr;			/* to obtain tuple variable name for debugging. */

next:	;					/* main loop */
	go to operation (search_ops.op.code (search_ops.ic));

operation (1): ;					/* initialize variable range */

	vi = search_ops.op.var_ind (search_ops.ic);	/* var index */
	rmri_ptr = search_vars.info.ri_ptr (vi);	/* point to rel_info */
	search_vars.info.ntids (vi) = 0;
	search_vars.info.first_seq_io (vi) = "1"b;	/* indicate that the first sequential i/o is to be done */
	search_ops.ic = search_ops.ic + search_ops.op.good_xfer (search_ops.ic);
	go to next;
%page;
operation (2): ;					/* move values required for init. or select */

	mi_ptr = search_ops.op.info_ptr (search_ops.ic);	/* pick up move info */
	vi = search_ops.op.var_ind (search_ops.ic);
	rmri_ptr = search_vars.info.ri_ptr (vi);

	do while (mi_ptr ^= null);			/* move each item in list, in turn */

	     if move_info.extr_attr
	     then move_info.s_ptr = tuple_info.tuple
		     (move_info.tuple_var_index).tuple_ptr
		     -> simple_typed_vector
		     .dimension (move_info.tuple_attr_index).value_ptr;
	     if move_info.var_ind > 0 then /* if db. */
		if search_vars.new_val (move_info.var_ind, vi) then /* if new value */
		     must_move = "1"b;
		else must_move = "0"b;		/* if have moved this before */
	     else must_move = "1"b;
	     if must_move then do;

		     if move_info.bit_move then /* if straight bit move */
			targ_string = src_string;
		     else if move_info.var_move then do;/* is variable len field */
			     true_len = move_info.s_ptr -> fb35u;
			     if addr (move_info.s_desc) -> descriptor.type = CHAR_VAR
			     then true_len = true_len * 9 + 36;
			     else true_len = true_len + 36;
			     ts_ptr = move_info.t_ptr;
			     true_string = move_info.s_ptr -> true_string;
			end;
		     else if move_info.expr then do;	/* if expression */
			     call mrds_dsl_eval_expr (area_ptr, move_info.s_ptr,
				search_vars.info.ri_ptr (move_info.var_ind),
				tuple_info.tuple (move_info
				.tuple_var_index).tuple_ptr, icode);
			     if icode ^= 0 then call error (icode);
			end;
		     else do;			/* is straight assign_ conversion */
			     temp_s_ptr = move_info.s_ptr;
			     call mu_convert$convert_data (temp_s_ptr, addr (move_info.s_desc),
				move_info.t_ptr, addr (move_info.t_desc), icode);
			     if icode ^= 0 then do;
				     call sub_err_ (icode, caller_name, continue, info_ptr, return_value,
					"^/^a^a^a^a^a",
					"Unable to convert a """, mu_display_descriptor (addr (move_info.s_desc)),
					""" into a """, mu_display_descriptor (addr (move_info.t_desc)),
					""" data type, during the search operation.");

				     call mdb_display_data_value$ptr (temp_s_ptr, addr (move_info.s_desc));

				     call error (icode);

				end;

			end;
		end;				/* if must move */

	     mi_ptr = move_info.fwd_thd;

	end;					/* move loop */

	do i = 1 to search_vars.nvars;		/* remember all vals moved for this var. */
	     search_vars.new_val (i, search_ops.op.var_ind (search_ops.ic)) = "0"b;
	end;

	search_ops.ic = search_ops.ic + search_ops.op.good_xfer (search_ops.ic);
	go to next;
%page;
operation (3): ;					/* select next tuple */

	seli_ptr = search_ops.op.info_ptr (search_ops.ic);/* pick up select info */

	if dbcb.current_flag then icode = 0;		/* -current so no need to retrieve */
	else call mu_retrieve (dbcb_ptr, area_ptr,
		addr (search_vars.info (search_ops.op.var_ind (search_ops.ic))),
		select_info.relation_search_specification_ptr,
		select_info.cvla_ptr, select_info.tid_ptr,
		(range.tup_var.name (search_ops.op.var_ind (search_ops.ic))),
		tuple_info.tuple (select_info.tuple_info_index).tuple_ptr,
		range.tup_var.stv_ptr (select_info.tuple_info_index),
		range.tup_var.idl_ptr (select_info.tuple_info_index),
		icode);				/* retrieve the tuple */
	if icode ^= 0 then
	     if icode ^= mrds_error_$no_tuple
		& icode ^= error_table_$no_record then call error (icode);
	     else search_ops.ic = search_ops.ic + search_ops.op.err_xfer (search_ops.ic);
	else do;
		do i = 1 to search_vars.nvars;	/* tell that we have new set ov vals to move */
		     search_vars.new_val (search_ops.op.var_ind (search_ops.ic), i) = "1"b;
		end;
		if display_tuples then do;
			temp_rti_ptr = addr (search_vars.info (search_ops.op.var_ind (search_ops.ic)));
			temp_rmri_ptr = temp_rti_ptr -> rtrv_info.ri_ptr;
			call mdb_display_tuple_$data (
			     tuple_info.tuple (select_info
			     .tuple_info_index).tuple_ptr,
			     temp_rmri_ptr, iox_$user_output, icode);
			call ioa_ ("Tuple Accepted for ""^a""",
			     rtrim (range.tup_var.name (search_ops.op.var_ind (search_ops.ic))));
			if icode ^= 0 then call error (icode);
			call ioa_ ("TID = ^w", select_info.tid_ptr -> b36);
		     end;
		search_ops.ic = search_ops.ic + search_ops.op.good_xfer (search_ops.ic);
	     end;
	go to next;
%page;
operation (4): ;					/* return data */

	search_ops.ic = search_ops.ic + search_ops.op.good_xfer (search_ops.ic);
	code = 0;
exit:	;
	return;

operation (5): ;					/* return null */
	code = mrds_error_$tuple_not_found;
	go to exit;

operation (6): ;					/* pickup svp */

	dbcb.sv_ptr,
	     sv_ptr = search_ops.op.info_ptr (search_ops.ic);
	do i = 1 to search_vars.nvars;		/* init move flags */
	     do j = 1 to search_vars.nvars;
		search_vars.new_val (i, j) = "1"b;
	     end;
	end;
	search_ops.ic = search_ops.ic + search_ops.op.good_xfer (search_ops.ic);
	go to next;
%page;
error: proc (cd);

/* Error Procedure */

	dcl     cd		 fixed bin (35);

	if cd = mrds_error_$no_tuple
	     | cd = error_table_$no_record
	     | cd = mrds_error_$tuple_not_found then do;	/* if normal termination */
		search_ops.ic = search_ops.ic + search_ops.op.err_xfer (search_ops.ic);
		go to next;
	     end;
	else do;					/* if true error */
		code = cd;
		call tidy_up;
		go to exit;
	     end;

     end error;
%page;
tidy_up: proc;

/* Cleanup Procedure */

	dcl     temp_tl		 ptr init (null);

	tl_ptr = stack_ptr;
	do while (tl_ptr ^= null);
	     temp_tl = tid_list.fwd_thd;
	     if tid_list.free_array then do;
		     ta_nids = tid_list.nids;
		     ta_ptr = tid_list.ta_ptr;
		     call mu_temp_segments$free_temp_segment (temp_seg_name, pointer (ta_ptr, 0), icode);
		     tid_list.free_array = "0"b;
		end;
	     free tl_ptr -> tid_list in (internal_static_area);
	     tl_ptr = temp_tl;
	end;

	stack_ptr = null ();

     end tidy_up;
%page;
	dcl     (code,				/* Output: status code */
	        icode,				/* internal status code */
	        true_len)		 fixed bin (35);	/* true length of variable len attr. */

	dcl     CHAR_VAR		 fixed bin (5) int static options (constant) init (22);

	dcl     (i,				/* internal index */
	        j,
	        vi)		 fixed bin;	/* var. index */

	dcl     (d_ptr		 init (null),	/* to tuple.data */
	        es_ptr		 init (null),
	        opnd1p		 init (null),	/* pointers to tid_lists in stack */
	        opnd2p		 init (null),
	        stack_ptr		 init (null),	/* to head of stack of tid_lists */
	        tl_ptr		 init (null),	/* to tid list */
	        ts_ptr		 init (null)) ptr;	/* to variable string */

	dcl     (display_tuples,
	        must_move)		 bit (1);

	dcl     b36		 bit (36) based;
	dcl     fb35u		 fixed bin (35) unal based;
	dcl     src_string		 bit (move_info.sbit_len) based (move_info.s_ptr);
	dcl     targ_string		 bit (move_info.tbit_len) based (move_info.t_ptr);
	dcl     true_string		 bit (true_len) based (ts_ptr);

	dcl     data_ptrs		 (mrds_data_$max_tup_var) ptr init (null ());
	dcl     mrds_data_$max_tup_var fixed bin (35) external static;

	dcl     1 tid_list		 aligned based (tl_ptr), /* structure for stacking up tuple ids */
		2 fwd_thd		 ptr,
		2 free_array	 bit (1) unal,	/* if array needs to be freed */
		2 non_standard_vfile_descriptor bit (1),/* on => secondary index type desc */
		2 reserved	 bit (34) unal,
		2 tup_var_index	 fixed bin,	/* tup var iocb identifier */
		2 nids		 fixed bin (35),	/* no. ids in array */
		2 ta_ptr		 ptr;		/* pointer to array of tuple ids */

	dcl     dbi_pic		 pic "999";
	dcl     temp_seg_name	 char (26);

	dcl     (error_table_$no_record,
	        mrds_error_$no_tuple,
	        mrds_data_$max_id_len,
	        mrds_error_$tuple_not_found,
	        sys_info$max_seg_size) ext fixed bin (35);

	dcl     (addr,
	        fixed,
	        null,
	        pointer,
	        rel,
	        rtrim
	        /*	        substr     */
	        )			 builtin;

	dcl     cleanup		 condition;

	dcl     ioa_		 entry options (variable);
	dcl     iox_$user_output	 ptr ext;
	dcl     mdb_display_tuple_$data entry (ptr, ptr, ptr, fixed bin (35));
	dcl     mrds_dsl_eval_expr	 entry (ptr, ptr, ptr, ptr, fixed bin (35));
	dcl     mu_convert$convert_data entry (ptr, ptr, ptr, ptr, fixed bin (35));
	dcl     mu_retrieve		 entry (ptr, ptr, ptr, ptr, ptr, ptr, char (*), ptr, ptr, ptr, fixed bin (35));
	dcl     mu_temp_segments$free_temp_segment entry (char (*), ptr, fixed bin (35));

	dcl     (temp_rti_ptr,
	        temp_rmri_ptr)	 ptr;		/* temp ptrs for mdb_display_tuple_ */

	dcl     area_ptr		 ptr;

	dcl     mrds_data_$max_attributes fixed bin (35) ext static;
	dcl     mrds_data_$temp_seg_name char (23) ext;	/* common name for temp segments */

	dcl     internal_static_area	 area (1024) int static; /* space for tid list managment */
	declare sub_err_		 entry options (variable); /* reports error details */
	declare continue		 char (1) init ("c") int static options (constant); /* dont stop after printing error */
	declare info_ptr		 ptr init (null ());/* dummy arg */
	declare caller_name		 char (32) init ("mrds_dsl_search") int static options (constant); /* name of calling routine */
	declare return_value	 fixed bin (35) init (0); /* dummy arg */
	declare mu_display_descriptor	 entry (ptr) returns (char (120) varying); /* gets char form of descriptor */
	declare mdb_display_data_value$ptr entry (ptr, ptr); /* outputs char form of data value */
	declare temp_s_ptr		 ptr;		/* temp, so that mvoe_info.s_ptr doesn't get changed */
	declare 1 reset_info	 aligned,		/* does reset of subset number */
		2 words		 (4) fixed bin (35) init (0, 0, 0, 0),
		2 dap		 ptr init (null ());
%page;
%include mrds_dbcb;
%page;
%include mrds_search_ops;
%page;
%include mrds_tuple_info;
%page;
%include mrds_search_vars;
%page;
%include mdbm_rtrv_info;
%page;
%include mrds_range;
%page;
%include mdbm_rm_rel_info;
%page;
%include mdbm_descriptor;
%page;
%include mdbm_ind_sel_info;
%page;
%include mdbm_seg_area;
%page;
%include mrds_select_area;
%page;
%include mrds_debug_names;
%page;
%include vu_typed_vector;

     end mrds_dsl_search;
