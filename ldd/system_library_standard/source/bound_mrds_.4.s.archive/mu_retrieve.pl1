/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */


/****^  HISTORY COMMENTS:
  1) change(85-11-17,Dupuis), approve(85-12-16,MCR7314),
     audit(86-02-04,Brunelle), install(86-02-05,MR12.0-1013):
     This entry is being made to cover the change made on 85-06-14 by Thanh
     Nguyen. (see mrds #137)
  2) change(85-11-17,Dupuis), approve(85-12-16,MCR7314),
     audit(86-02-04,Brunelle), install(86-02-05,MR12.0-1013):
     This entry is being made to cover the change made on 85-10-13 by John
     Hergert. (see mrds #138, phx19901)
                                                   END HISTORY COMMENTS */


mu_retrieve: proc (dbcb_ptr, area_ptr, rti_ptr, search_spec_ptr_parm,
	cvla_ptr_parm, tid_ptr, tuple_var_name, whole_stv_ptr,
	simple_typed_vector_ptr_parm, id_list_ptr_parm, code);

/* NOTES:

   This  procedure  retrieves  the  next  tuple  within the current range which
   satisfies the specified constraints.

*/
%page;
/* HISTORY:

   78-11-01 J. A. Weeldreyer: Initially written.

   79-03-28 Al Kepner: Modified to return the located  tuple_id  for
   the restricted range case.

   79-05-17 Al Kepner: Modified to add entries db_on & db_off.

   79-06-21 Al Kepner: Partially rewritten to provide for comparison
   between two values from the same tuple.

   79-08-21 NSDavids: Comparison of  the  operands  (which  was  not
   always  done  correctly  if  they were of different scales and/or
   precisions) was replaced by a call to mu_compare_values.

   79-12-01 Rickie E.  Brinegar:  Modified  to  use  mrds_debug_tool
   switches instead of the entry points db_on & db_off.

   80-02-01 Jim Gray: Modified to add area_ptr parameter.

   80-02-15 Davids: Modified added data_ptr to the parameter list as
   output.  this  is  a  pointer  to  tuple.data  which is needed by
   mrds_dsl_search for determining the value of varying attributes.

   80-03-25 R. Lackey: Modified to remove calls to mdbm_util_

   80-05-08  Davids:  modified  assignments  of  tuple_num_atts  and
   tuple_nvar_atts  to  take  values from rm_rel_info.model_num_attr
   and  model_nvar_atts   rather   than   rm_rel_info.num_attr   and
   nvar_atts.  This  was  to  fix  a problem with submodels were the
   submodel view did not contain a varying string attribute and  the
   model did.

   80-10-30 M. Pierret: Modified to align 'match' for efficiency  of
   call to mu_compare_values.

   81-02-20 Rickie E. Brinegar: Changed calls to  mdb_display_value_
   to be calls to mdb_display_data_value$ptr. The latter allows more
   that 256 characters to be displayed.

   81-03-27 Jim Gray : changed dbi parameter to  dbcb_ptr,  and  for
   the  mu_sec_get_tuple  routines called, changed the dbi parameter
   to both dbcb_ptr and rmri_ptr. This is part of getting rid of the
   mus_ptr_man module.

   81-05-21   Jim   Gray   :   changed   placement   of   call    to
   mu_comapre_values,  so that if an error occured, the debug output
   about what the values were, gets  displayed.  This  was  done  to
   improve  the  information  in  the error message about conversion
   problems from mu_compare_values. Also added display of data  type
   for the value displayed, for the non-zero error code case.

   81-05-28 Jim Gray : commented out code dealing wiith foreign  key
   thread chasing.

   81-06-01 Jim Gray : changed to use new resultant structure.


   81-06-17 Jim Gray : added iocb index param to mu_sec_get_tuple$id
   so that key retrieves do not need to use dedicated update iocb.

   81-10-19 Davids: deleted many declared but unreferenced variables
   and also a couple of include files that were never used. modified
   the internal routine get_comparison_value to call add_bit_offset_
   rather  than  overlaying  a  bit  array  and  taking  the addr of
   bit_array (offset), this because there is a pl1 bug which  causes
   an  incorrect  addr to be returned when the code is compiled with
   the prefix subscriptrange (see tr11784)

   82-09-03 Mike Kubicar : Converted the module to use the simple vector
   structure instead of the tuple structure.

   82-10-26 Davids: changed the call to mu_sec_get_tuple$id to pass the
   rtrv_info.record_collection_cursor_ptr instead of the cursor_ptr.

   82-10-28 Davids: Modified the calls to mu_sec_get_tuple$next and $id
   to use the dbcb.select_area_ptr instead of the area_ptr which is an
   input parameter. The select_area does not get reinitialized until the
   selection expression changes, the area pointed to be the input param
   gets reinitialized at every call of retrieve (or delete or modify)

   83-04-25 Mike Kubicar : There is no longer any distinction between
   getting tuple sequentially and getting them via a key list.  Removed
   mu_sec_get_tuple$* calls and replaced it with a single internal
   procedure to get the next tuple via a search specification.

   83-04-28 Davids: Removed dcls for mu_sec_get_tuple$next and id.
   added a dcl for the builtin empty.

   83-05-24 R. Harvey: Changed to use the appropriate simple_typed_vector_ptr
   and id_list_ptr that are now passed in as arguments.

   83-05-31 Mike Kubicar : Updated to use new relation manager calling
   sequence and search specification.

   83-08-03 Mike Kubicar : This program will no longer free the element
   id list after returning from relation manager.  It uses the static
   list set up by search program generation.

   84-08-07 Thanh Nguyen : Added code to check and call the user's decoded 
   procedure of an attribute (if it is required), in case of the exp_ptr 
   is null.

   85-01-15 Thanh Nguyen : Added code to check error code after calling 
   get_comparison_value and handle the case of uncessful allocation by reset
   the work area.  Modified get_comparison_value procedure to call
   mrds_space_allocate function instead of the standard PL/I allocate.  Added
   two include files (mrds_space_allocate and mrds_area_initialize).

   85-01-25 Thanh Nguyen & John Hergert : Added code to check and continue
   to get the next tuple when the get_next_tuple subroutine received the
   mrds_error_$inconsistent_data_length.  This error is caused by the deleted
   tuple in the share mode while getting the tuple by its tuple-id.

   85-04-14 Thanh Nguyen: Added code to detect the case of the scope that is 
   changed  from non-shared to shared mode.

   85-06-14 Thanh Nguyen: Added code to check for the scope that is changed
   from non-shared to shared mode only if the dbcb.scopes_changed is on (This
   flag is set by mrds_dsl_set_scope and reset by mrds_dsl_gen_srch_prog and
   mrds_dsl_optimize

   85-10-13 John Hergert: Backed out some changes made in fix of
   84-08-02. This was done to fix TR's phx11536 and phx19901
*/

/* PARAMETERS:
   dbi -- (INPUT) data base index

   rti_ptr -- (INPUT) pointer to rtrv_info

   search_spec_ptr_parm -- (INPUT) pointer to the search spec to use for
   the retrieval.  Note that the search spec may be changed from an
   absolute to relative spec during this call.

   cvla_ptr_parm -- (INPUT) pointer to list of comparison values

   tid_ptr -- (INPUT) pointer to place that tuple_id of retrieved tuple
   will be stored.

   tuple_var_name -- (INPUT) name of the tuple variable for which retrieval
   is done (used for debugging only)

   whole_stv_ptr -- (INPUT) pointer to simple_typed_vector of whole view of
   relation.

   simple_typed_vector_ptr -- (INPUT) pointer to newly retrieved tuple

   id_list_ptr_parm -- (INPUT) pointer to id_list structure which corresponds to
   simple_typed_vector_ptr -> simple_typed_vector.

   code -- (OUTPUT) error code */

/* MRDS_DEBUG_TOOL SWITCHES:

   bit 1 = display values compared.
   bit 2 = display tuple data.
   bits 3 through 9 = not used.
*/
%page;
	display_values_compared = substr (db_mu_retrieve, 1, 1);
	display_tuple_data = substr (db_mu_retrieve, 2, 1);
	cvla_ptr = cvla_ptr_parm;
	id_list_ptr = id_list_ptr_parm;
	simple_typed_vector_ptr = simple_typed_vector_ptr_parm;

	rmri_ptr = rtrv_info.ri_ptr;
	k = 0;
	ta_ptr = rtrv_info.ta_ptr;
	ta_nids = rtrv_info.ntids;

	found = "0"b;
	do while (^found);				/* loop until find approp. tuple */

	     call get_next_tuple (dbcb_ptr, rti_ptr,
		search_spec_ptr_parm, simple_typed_vector_ptr, tuple_id);
	     found = "1"b;


/* Now that we've got one, see if it matches the rest of the constraints */

	     i, j = 0;
	     if cvla_ptr ^= null then do;		/* if comparisons to be made */

		     work_area_ptr = dbcb.work_area_ptr;
		     match = "0"b;
		     do i = 1 to cvl_array.nlists while (^match); /* loop through and groups */
			cvl_ptr = cvl_array.list_ptr (i);
			match = "1"b;
			do j = 1 to comp_val_list.nvals while (match); /* loop through and group items */

			     desc_ptr1 = addr (comp_val_list.val.desc1 (j));
			     desc_ptr2 = addr (comp_val_list.val.desc2 (j));
			     need_to_free_user_value = "0"b;
GET_COMPARISON_VALUE:
			     call get_comparison_value (
				comp_val_list.val.exp_ptr (j),
				null(),
				comp_val_list.val.erslt_ptr (j),
				comp_val_list.val.attr_ind (j),
				desc_ptr1,
				di_ptr,
				icode);
			     if icode = error_table_$noalloc
			     then do;
				     call mrds_area_initialize (work_area_ptr);
				     go to GET_COMPARISON_VALUE;
				end;
			     if comp_val_list.val.match_ptr (j) = null () /* compare to value from current tuple. */
			     then do;
				     call get_comparison_value (
					comp_val_list.val.exp_ptr2 (j),
					comp_val_list.val.c_ai_ptr2 (j),
					comp_val_list.val.erslt_ptr2 (j),
					comp_val_list.val.attr_ind2 (j),
					desc_ptr2,
					di_ptr2,
					icode);
				     if icode = error_table_$noalloc then do;
					     call mrds_area_initialize (work_area_ptr);
					     go to GET_COMPARISON_VALUE;
					end;
				end;
			     else do;		/* compare to value not from current tuple */
				     di_ptr2 = comp_val_list.val.match_ptr (j);
				end;		/* compare to value not from current tuple */

			     call mu_compare_values (di_ptr, desc_ptr1, di_ptr2, desc_ptr2,
				comp_val_list.val.op (j), match, code);

			     if display_values_compared | code ^= 0 then do;
				     if display_values_compared then
					call ioa_ ("di_ptr = ^p; di_ptr2 = ^p", di_ptr, di_ptr2);
				     if display_values_compared then
					call ioa_ ("Compared: ");
				     else call ioa_ ("Compared the data type:  ^a", mu_display_descriptor (desc_ptr1));
				     call mdb_display_data_value$ptr (di_ptr, desc_ptr1);
				     call ioa_ ("Using the comparison operator ""^a"" to:", rtrim (CVL_ops (comp_val_list.val.op (j))));
				     if ^display_values_compared then
					call ioa_ ("The data type:  ^a", mu_display_descriptor (desc_ptr2));
				     call mdb_display_data_value$ptr (di_ptr2, desc_ptr2);
				end;		/* if debug_switch */

			     if code ^= 0
			     then call error (code);
			     if need_to_free_user_value then
				free value_for_user;
			end;			/* comparing attr. in and group */
		     end;				/* comparing and group with or group */
		     found = match;
		end;				/* if had comparisons */
	     if display_tuple_data then do;
		     call mdb_display_tuple_$data (simple_typed_vector_ptr, rmri_ptr, iox_$user_output, icode);
		     if icode ^= 0 then call error (icode);
		     if found
		     then call ioa_ ("Tuple Accepted for ""^a""", tuple_var_name);
		     else call ioa_ ("Tuple Rejected for ""^a""", tuple_var_name);
		end;				/* if debug switch */
	end;					/* search for tuple */

	code = 0;

exit:
	return;
%page;
get_next_tuple:
     proc (dbcbptr, retrieve_info_ptr, search_spec_ptr,
	simple_typed_vector_ptr, tuple_id);

/**********
*
*   This routine will get the next tuple from a relation.  It needs to call
*   get_tuple_id followed by get_tuple_by_id since mrds needs both the
*   tuple id and the tuple in many cases.  It tries to use relation manager
*   as efficiently as is reasonable.  To do so, it gets as many tuple ids as
*   it can by one call to relation manager get_tuple_id.  It will then return
*   the first tuple in the list of ids by getting the tuple by id.  On
*   successive calls, it will use the other tuple ids in the list.  When
*   it has run out of tuple ids, it will get more by calling $get_tuple_id
*   again.  The routine effectively buffers tuple ids.  The routine uses
*   the following parameters:
*
*   dbcbptr  (input)  - Pointer to the dbcb
*   retrieve_info_ptr (input) - Pointer to the retrieve info to be used
*       on this retrieval.  Note that the rtrv_info structure may be
*       modified by this procedure.
*   search_spec_ptr (input) - The relation_search_specification to be used
*       in the search.  Note that the search spec pointed at may be modified by
*       this procedure.
*   simple_typed_vector_ptr (output) - The tuple which was retrieved.  Note
*       that locations pointed at by the simple typed vector structure will
*       be filled in with data from the database.  The simple typed vector
*       structure itself is not changed.  If no data is to be returned
*       by the procedure (i.e. only the tuple id is desired) as indicated
*       by a zero array extent on the id list, the contents of the structure
*       pointed to by this pointer is undefined.  Indeed, the pointer is not
*       used.
*   tuple (output) - The tuple id of the tuple returned.
*
*
*   If relation manager returns an error code, the error routine is called.
*   Also, if a call is to be made to $get_tuple_id and less tuple ids than
*   expected were returned in a prior call, then mrds_error_$no_tuple_found
*   is passed to the error routine.
*
**********/


/*  Parameters */

	dcl     dbcbptr		 ptr;
	dcl     retrieve_info_ptr	 ptr;
	dcl     search_spec_ptr	 ptr;
	dcl     simple_typed_vector_ptr ptr;
	dcl     tuple_id		 bit (36) aligned;
	dcl     continue_for_next_tuple bit (1) aligned;

/*  Local data */

	dcl     icode		 fixed bin (35);	/* Returned error code */


/* Procedure */

	continue_for_next_tuple = "1"b;
	do while (continue_for_next_tuple);
	     continue_for_next_tuple = "0"b;
	     if dbcb.scopes_changed then do; 
	        if retrieve_info_ptr -> rtrv_info.ri_ptr -> rm_rel_info.file_type ^= 3 then 
		 /* this relation is not a temporary relation */
		 if dbcb.non_shared_to_shared = "0"b then do;
		     current_scope_ptr = retrieve_info_ptr -> rtrv_info.ri_ptr -> rm_rel_info.scope_flags_ptr;
		     if (current_scope_flags.permits.read_attr |
		         current_scope_flags.permits.delete_tuple |
		         current_scope_flags.permits.modify_attr) then
		        if ^current_scope_flags.prevents.modify_attr |
			(^current_scope_flags.prevents.append_tuple &
			 ^current_scope_flags.prevents.delete_tuple) then
			if retrieve_info_ptr -> rtrv_info.maxtids ^=
			  mrds_data_$max_safe_tids_returned_per_call then
			/* Somebody just changes the scope to shared mode within the
			same select expression (should be -another) */
			  dbcb.non_shared_to_shared = "1"b;
		end;
	     end;

	     if retrieve_info_ptr -> rtrv_info.ctid >=
		retrieve_info_ptr -> rtrv_info.ntids then do; /* None left from prior call or first time in routine */
		     if retrieve_info_ptr -> rtrv_info.first_seq_io then do; /* Furst get from this tuple variable */
			     retrieve_info_ptr -> rtrv_info.first_seq_io = "0"b;
			     search_spec_ptr -> relation_search_specification.head.type =
				ABSOLUTE_RELATION_SEARCH_SPECIFICATION_TYPE;
			end;
		     else do;			/* Get another set of tids */
			     if retrieve_info_ptr -> rtrv_info.ntids <
				retrieve_info_ptr -> rtrv_info.maxtids /* Got less than we expected last time */
			     then call error (mrds_error_$tuple_not_found);
			     search_spec_ptr -> relation_search_specification.head.type =
				RELATIVE_RELATION_SEARCH_SPECIFICATION_TYPE;
			     retrieve_info_ptr -> rtrv_info.ta_ptr -> element_id_list.number_of_elements = 0;
			end;
		     call dbcbptr -> dbcb.relmgr_entries.get_tuple_id (
			retrieve_info_ptr -> rtrv_info.relation_cursor_ptr,
			search_spec_ptr, dbcbptr -> dbcb.select_area_ptr,
			retrieve_info_ptr -> rtrv_info.ta_ptr,
			icode);
		     if icode ^= 0
		     then call error (icode);
		     retrieve_info_ptr -> rtrv_info.ctid = 0;
		     retrieve_info_ptr -> rtrv_info.ntids =
			retrieve_info_ptr -> rtrv_info.ta_ptr -> element_id_list.number_of_elements;
		end;


/* Now get the next tuple in the element id list */

	     retrieve_info_ptr -> rtrv_info.ctid =
		retrieve_info_ptr -> rtrv_info.ctid + 1;
	     tuple_id = retrieve_info_ptr -> rtrv_info.ta_ptr ->
		element_id_list.id (retrieve_info_ptr -> rtrv_info.ctid);
	     if id_list_ptr -> id_list.number_of_ids > 0	/* Retrieving one or more attributes of the tuple */
	     then do;
		     call dbcbptr -> dbcb.relmgr_entries.get_tuple_by_id (
			retrieve_info_ptr -> rtrv_info.relation_cursor_ptr,
			tuple_id, id_list_ptr, dbcbptr -> dbcb.select_area_ptr,
			simple_typed_vector_ptr, icode);
		     if icode = mrds_error_$inconsistent_data_length then do;
			     icode = 0;
			     continue_for_next_tuple = "1"b;
			end;
		     else if icode ^= 0
		     then call error (icode);
		end;
	end;					/* end while */

     end get_next_tuple;
%page;
get_comparison_value: proc (exp_ptr, ai_ptr, erslt_ptr, attr_index, desc_ptr, di_ptr, icode);

/* This routine produces a pointer to one of the values to be used in the
   comparison.  An attribute will be check and call the decoded procedure
   if there is a decode proc for that attribute.  An expression may be
   evaluated if necessary. */

	dcl     exp_ptr		 ptr;		/* INPUT : ptr to expression to be evaluated or null */
	dcl     ai_ptr		 ptr;		/* INPUT : ptr to rm_attr_info, it may be null. */
	dcl     erslt_ptr		 ptr;		/* INPUT : ptr to result of expression. */
	dcl     attr_index		 fixed bin (17);	/* INPUT : attribute of interest */
	dcl     desc_ptr		 ptr;		/* INPUT : ptr to descriptor */
	dcl     di_ptr		 ptr;		/* IN/OUT: ptr to comparison value. */
	dcl     icode		 fixed bin (35);	/* IN/OUT: standard error code. */

	icode = 0;
	if exp_ptr = null ()			/* Just an attribute, no expression */
	then do;
		di_ptr = whole_stv_ptr -> simple_typed_vector.dimension (attr_index).value_ptr;
		if ai_ptr ^= null then /* need to decode attribute */
		     if ai_ptr -> rm_attr_info.domain_ptr -> rm_domain_info.decd_proc
		     then do;
			     t_domain_ptr = ai_ptr -> rm_attr_info.domain_ptr;
			     user_bit_length = t_domain_ptr -> rm_domain_info.user_bit_len;
			     user_val_ptr = mrds_space_allocate (work_area_ptr, (user_bit_length + 35) / 36);
			     if user_val_ptr = null () then do;
				     icode = error_table_$noalloc;
				     return;
				end;
			     k = k + 1;
			     value_for_user = "0"b;	/* clear out space */
						/* evaluate and call decoded procedure */
			     call mu_get_data$get_data_item (ai_ptr, work_area_ptr, di_ptr,
				user_val_ptr, desc_ptr, icode);
			     if icode = error_table_$noalloc then
				return;
			     di_ptr = user_val_ptr;	/* set output ptr */
			end;
	     end;
	else do;					/* if expression */
		di_ptr = erslt_ptr;
		call mrds_dsl_eval_expr (area_ptr, exp_ptr, rmri_ptr, whole_stv_ptr, icode);
	     end;					/* if expression */
	if icode ^= 0 then call error (icode);
     end get_comparison_value;
%page;
%include mrds_space_allocate;
%page;
%include mrds_area_initialize;
%page;
error: proc (cd);

/* Error procedure */

	dcl     cd		 fixed bin (35);

	if (cd = dm_error_$no_tuple) | (cd = dm_error_$no_tuple_id)
	then code = mrds_error_$no_tuple;
	else code = cd;
	go to exit;

     end error;
%page;
	dcl     cvla_ptr_parm	 ptr;
	dcl     id_list_ptr_parm	 ptr parameter;
	dcl     simple_typed_vector_ptr_parm ptr parameter;
	dcl     search_spec_ptr_parm	 ptr;
	dcl     tuple_var_name	 char (*);	/* tuple variable name for debugging */
	dcl     user_bit_length	 fixed bin;
	dcl     value_for_user	 bit (user_bit_length) based (user_val_ptr);
	dcl     work_area_ptr	 ptr;

	dcl     (i, k,				/* internal indexes */
	        j)		 fixed bin;

	dcl     (code,				/* Output:  status code */
	        icode)		 fixed bin (35);	/* offset of item in tuple.data */

	dcl     (area_ptr,
	        desc_ptr1,				/* ptr to desc for first value to be compared. */
	        desc_ptr2,				/* ptr to desc for second value to be compared. */
	        di_ptr,				/* to data item */
	        di_ptr2,				/* ptr to second comparison value */
	        t_domain_ptr,			/* temp ptr use to point to rm_domain_info. */
	        tid_ptr,
	        user_val_ptr,			/* ptr to converted value for decoding */
	        whole_stv_ptr)	 ptr;		/* Input:  to place to store tuple id */


	dcl     (display_tuple_data,			/* flags */
	        display_values_compared,
	        found)		 bit (1) unaligned;

	dcl     match		 bit (1) aligned;	/* aligned for efficiency in call to mu_compare_values */
	dcl     need_to_free_user_value bit (1) aligned;

	dcl     (addr,
	        fixed,
	        null,
	        rel,
	        rtrim,
	        substr,
	        unspec)		 builtin;

	dcl     tuple_id		 bit (36) aligned based (tid_ptr);

	dcl     CVL_ops		 (1:6) char (2) int static options (constant) init (
				 "=",
				 "^=",
				 "<",
				 "<=",
				 ">",
				 ">=");
	dcl     1 current_scope_flags	aligned based (current_scope_ptr) like scope_flags;
          dcl     current_scope_ptr      ptr;
	dcl     dm_error_$no_tuple	 fixed bin (35) ext static;
	dcl     dm_error_$no_tuple_id	 fixed bin (35) ext static;
	dcl     mrds_data_$max_safe_tids_returned_per_call fixed bin (35) ext static;
	dcl     mrds_error_$no_tuple	 ext fixed bin (35);
	dcl     mrds_error_$tuple_not_found fixed bin (35) ext static;
	dcl     mrds_error_$inconsistent_data_length fixed bin (35) ext static;
	dcl     mrds_dsl_eval_expr	 entry (ptr, ptr, ptr, ptr, fixed bin (35));
	dcl     ioa_		 entry options (variable);

	dcl     iox_$user_output	 ext ptr;

	dcl     sys_info$max_seg_size	 fixed bin (35) ext static;

	dcl     error_table_$noalloc	 fixed bin (35) ext static;

	dcl     mdb_display_data_value$ptr entry (ptr, ptr);

	dcl     mdb_display_tuple_$data entry (ptr, ptr, ptr, fixed bin (35));
	dcl     mu_compare_values	 entry (ptr, ptr, ptr, ptr, fixed bin, bit (1) aligned, fixed bin (35));
	dcl     mu_display_descriptor	 entry (ptr) returns (char (120) varying); /* gets char form of descriptor */
	dcl     mu_get_data$get_data_item entry (ptr, ptr, ptr, ptr, ptr, fixed bin (35));
%page;
%include dm_element_id_list;
%page;
%include dm_id_list;
%page;
%include dm_relation_spec;
%page;
%include dm_specification_head;
%page;
%include mdbm_scope_info;
%page;
%include mdbm_comp_val_list;
%page;
%include mdbm_rm_rel_info;
%page;
%include mdbm_rm_attr_info;
%page;
%include mdbm_rm_domain_info;
%page;
%include mdbm_rtrv_info;
%page;
%include mrds_debug_names;
%page;
%include mrds_dbcb;
%page;
%include vu_typed_vector;

     end mu_retrieve;
