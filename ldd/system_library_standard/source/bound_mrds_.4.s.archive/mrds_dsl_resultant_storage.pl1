/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* HISTORY:

   Originally written by Jim Gray - - August 1979
   Modified by Jim Gray - - 80-9-24, to add the entry $get_opening_temp_dir,
   in order to be able to get the temp dir for a particular opening.
   Also, if the temp_dir is all blanks (initial state), then it is now
   set to the process directory (the default) in this routine during a $get.

   Modified by Ron Harvey - - 83-01-18, to use get_shortest_path_ before
   saving off the directory.
*/

mrds_dsl_resultant_storage: procedure (); return;		/* not valid entry */

/* DESCRIPTION:

   this routine is used to set and retrieve the storage location for
   the resultant database model that is created at open time from
   the users model or submodel, and used for runtime access of the
   data in the database by dsl_$store, retrieve, etc.
   each opening may use a different storage location for it's resultant
   via intervening calls to the $set entry to this routine,
   with the pathname of the desired storage location.
   the open modules that create the dbcb, rdbi, select
   segments of the resultant call the $get entry to find
   out what directory to store the resultant under.

*/

/* PARAMETERS:

   set entry ===

   relative_path - - (input) char(*), the pathname of the directory under which
   the resultant model for the next opening is to be stored. this
   should have a larger quota than the process directory if a
   large database opening is planned, or many opens are to be done.

   error_code - - (output) fixed bin(35), error status encoding, 0 unless an error occurred,
   such as an invalid pathname, or pathname not a directory.

   sub_errror_ - - (output) condition, signaled upone occurence of error to propvide more info

   get entry ===

   returns(char(168)) - - (output) the current pathname that the last opening
   would have stored it's resultant model under. the default(i.e. set was never called)
   is the user's process directory.

   get_opening_temp_dir entry ===

   database_index - - (input) fixed bin(35), the database opening index of the
   particular opening whose temporary storage directory is desired.

   error_code - - (output) fixed bin(35), the error status encoding, 0 unless an error occurred,
   such as an invalid database index.

   returns(char(168)) - - (output) the temporary storage directory path for the
   particular database opening whose index was given.


*/

set: set_temp_dir: entry (relative_path, error_code);

/* check for a valid length, and legal pathname */

	error_code = 0;				/* initialize */

	call expand_pathname_ (relative_path, directory_path, entryname, error_code);
	if error_code ^= 0 then
	     call sub_err_ (error_code, caller_name, continue, info_ptr, return_value, "^/^a^a^a",
		"Unable to expand the pathname """, relative_path, """.");
	else do;

/* check to be sure that this is a directory */

		call hcs_$status_minf (directory_path, entryname, chase, type, bit_count, error_code);
		if error_code ^= 0 then
		     call sub_err_ (error_code, caller_name, continue, info_ptr, return_value, "^/^a^a^a",
			"Unable to get the status of the entry """, relative_path, """.");
		else do;

			MSF = ((bit_count > 0) & (type = DIRECTORY));
			if type ^= DIRECTORY | MSF then do;
				error_code = error_table_$no_dir;
				call sub_err_ (error_code, caller_name, continue, info_ptr, return_value, "^/^a^a^a",
				     "The pathname """, relative_path, """ does not refer to a directory.");
			     end;
			else do;

/* good directory path, save it for reference by the $get entry */

				saved_directory = get_shortest_path_ (rtrim (directory_path) || ">" || rtrim (entryname));

			     end;

		     end;

	     end;

	return;

get: get_temp_dir: entry returns (char (168));

/* return the remembered resultant model storage directory */

	if saved_directory = BLANK then
	     saved_directory = get_pdir_ ();

	return (saved_directory);

get_opening_temp_dir: entry (db_index, code) returns (char (168));

/* routine to get the temp dir for a particular database opening specified by it's index */

	code = 0;
	returned_dir = BLANK;

/* check for a valid database opening index */

	call mu_database_index$get_resultant_model_pointer (db_index, dbcb_ptr);
	if dbcb_ptr = null () then
	     code = mrds_error_$invalid_db_index;
	else do;

/* get the path of the resultant model for this openiong */

		call hcs_$fs_get_path_name (dbcb_ptr, pathname, pathname_len, dbcb_segment, code);
		if code ^= 0 then ;
		else do;

			returned_dir = pathname;

		     end;

	     end;

	return (returned_dir);

	declare saved_directory	 char (168) int static init ((168)" "); /* blanks => use process dir */
	declare pathname_len	 fixed bin;	/* length of directory portion returned */
	declare code		 fixed bin (35);	/* error code for get_opening_temp_dir entry */
	declare db_index		 fixed bin (35);	/* database opening index */
	declare dbcb_ptr		 ptr;		/* pointer to the resultant model */
	declare mrds_error_$invalid_db_index fixed bin (35) ext; /* not good opening index */
	declare returned_dir	 char (168);	/* path to resultant model for a given opening */
	declare pathname		 char (168);	/* temp for getting directory portion of dbcb segment path */
	declare dbcb_segment	 char (32);	/* name of dbcb segment for this opening */
	declare hcs_$fs_get_path_name	 entry (ptr, char (*), fixed bin, char (*), fixed bin (35)); /* gets path from pointer */
	declare mu_database_index$get_resultant_model_pointer entry (fixed bin (35), ptr); /* gets resultant model ptr from index */
	declare get_pdir_		 entry () returns (char (168)); /* gets process directory */
	declare BLANK		 char (1) init (" ") int static options (constant); /* space character */
	declare error_table_$no_dir	 fixed bin (35) ext;/* path not to directory */
	declare expand_pathname_	 entry (char (*), char (*), char (*), fixed bin (35)); /* breaks apart, and checks path */
	declare error_code		 fixed bin (35);	/* error status encoding */
	declare get_shortest_path_	 entry (char (*)) returns (char (168));
	declare hcs_$status_minf	 entry (char (*), char (*), fixed bin (1), fixed bin (2), fixed bin (24), fixed bin (35));
	declare bit_count		 fixed bin (24);	/* current bit count of entry */
	declare MSF		 bit (1);		/* on => multisegment file */
	declare DIRECTORY		 fixed bin (2) init (2); /* type for directory */
	declare chase		 fixed bin (1) init (1); /* causes links to be chased */
	declare directory_path	 char (168);	/* directory portion of path */
	declare entryname		 char (32);	/* entry portion of path */
	declare relative_path	 char (*);	/* input pathname */
	declare sub_err_		 entry options (variable); /* reports errors */
	declare type		 fixed bin (2);	/* 0 => link, 1 => seg, 2 => dir */
	declare caller_name		 char (26) init ("mrds_dsl_resultant_storage"); /* name of calling routine */
	declare continue		 char (1) init ("c"); /* dont stop after printing mesg */
	declare info_ptr		 ptr init (null ());/* unused */
	declare return_value	 fixed bin (35) init (0); /* unused */
	declare (null, rtrim)	 builtin;

     end;
