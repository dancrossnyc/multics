/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

mu_check_scope: check_scope: procedure (dbc_p, fle_ptr, this_ul_ptr, permit_requests_ptr, prevent_requests_ptr,
	conflict_detail_ptr, conflict_sw, conflict_ul_ptr);

/* this procedure checks to see if a requested scope can be granted to the user */

/* HISTORY:

   Originally written by O Friesen in July 1977
   Modified by M. Pierret 17 April 1980 to remove priority queue checking.

   80-12-10 Jim Gray : changed to use of mdbm_scope_requests include file
   to supprot change from r-u to r-s-m-d type scope modes.
   Also added conflict_detail_ptr parameter.
*/

/* first check the active scopes in force for this file */

	dbc_ptr = dbc_p;				/* use local variable */
	num_filns = 0;
	conflict_ul_ptr = null;
	ul_ptr = this_ul_ptr;
	this_user_id = user_list.process_id;

	ul_ptr = convert (dbc_ptr, dbc.active_users_ofs);

	conflict_sw = "0"b;


	do while (ul_ptr ^= null);

	     call check_files_scopes;
						/* conflict_sw and conflict_ul_ptr will be set by
						   check_files_scopes if necessary */

	     ul_ptr = convert (dbc_ptr, user_list.next_active_ofs); /* look at next active user */

	end;

/* must also examine all waiting processes whose event_signal_sw is ON, and
   *  processes who are high priority waiters.  To avoid deadlocks, if the process
   *  requesting scope is a high priority user, then high priority waiters are not
   *  checked */

	if ^conflict_sw then do;
		ul_ptr = convert (dbc_ptr, dbc.waiting_users_ofs);

		do while (ul_ptr ^= null);
		     if user_list.event_signal_sw
		     then call check_files_scopes;
		     else if ^(this_ul_ptr -> user_list.priority_high)
			     & user_list.priority_high
		     then call check_files_scopes;
		     else ;

		     ul_ptr = convert (dbc_ptr, user_list.next_waiting_ofs);
		end;

	     end;

	return;

check_files_scopes: proc;

	fl_ptr = convert (dbc_ptr, user_list.fil_list_ofs); /* look at each list of files for each active user */
	do while (fl_ptr ^= null & ^conflict_sw);

	     if fil_name = fil_list.name
	     then if ul_ptr ^= this_ul_ptr
		then call mu_check_conflict (SET, fl_ptr, permit_requests_ptr, prevent_requests_ptr,
			conflict_detail_ptr, conflict_sw);
	     if conflict_sw then conflict_ul_ptr = ul_ptr;
	     fl_ptr = convert (dbc_ptr, fil_list.next_ofs); /* look at next file in this user's list */
	end;

     end check_files_scopes;

convert: proc (a_ptr, ofs) returns (ptr);

/* this procedure function converts an offset from "0"b to null
   or from the offset value to a pointer value within the segment denoted by a_ptr
*/

	dcl     result		 ptr;		/* the reultant pointer value */
	dcl     a_ptr		 ptr;		/* ptr to the segment to which the offset refers */
	dcl     ofs		 bit (18) unal;	/* the bit offset */


	if ofs ^= NULL_OFS
	then result = ptr (a_ptr, ofs);
	else result = null;

	return (result);

     end convert;


	dcl     dbc_p		 ptr parm;


	dcl     fil_name		 char (30) based (fle_ptr); /* name of file whose scope is being checked */

	dcl     fle_ptr		 ptr;		/* ptr to name of file whose scope is being checked */
	dcl     conflict_ul_ptr	 ptr;		/* pointer to a user causing a conflict with a scope request */
	dcl     this_ul_ptr		 ptr;		/* parameter ptr to user_list */

	dcl     this_user_id	 bit (36);	/* process id of this user */

	dcl     conflict_sw		 bit (1) unal;	/* ON => a scope conflict */

	dcl     addr		 builtin;
	dcl     fixed		 builtin;
	dcl     null		 builtin;
	dcl     ptr		 builtin;
	dcl     rel		 builtin;

	dcl     mu_check_conflict	 entry (bit (1), ptr, ptr, ptr, ptr, bit (1));



	dcl     sys_info$max_seg_size	 fixed bin ext;

%include mdbm_dbc;
%include mdbm_scope_requests;

%include mdbm_users;

     end mu_check_scope;
