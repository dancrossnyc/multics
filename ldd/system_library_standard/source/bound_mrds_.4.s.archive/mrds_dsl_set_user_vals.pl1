/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(87-01-22,Hergert), approve(88-07-11,MCR7903),
     audit(88-07-07,Dupuis), install(88-08-01,MR12.2-1073):
     For new parser, changed references of sel_ptr to select_list_ptr.
                                                   END HISTORY COMMENTS */



mrds_dsl_set_user_vals:
    procedure (dbcb_ptr, area_ptr, argp_ptr, descp_ptr, num_args, arg_sel_ptr,
        code);

/* HISTORY: 
   84-07-19 Hergert: Extracted from mrds_dsl_select_clause. This was done
   to avoid expensive initializations in mrds_dsl_select_clause that werent
   necessary when processing -another's. update_movelists was eliminated
   and the code was put inline in the entry "another" */

        select_list_ptr = arg_sel_ptr;
        call set_u_vals;
        code = 0;
        return;

another:
    entry (dbcb_ptr, area_ptr, argp_ptr, descp_ptr, num_args, code);

/* This entry is called by translate to reset the user value items in
   the select list to correspond to the new arguments in case of a -another. */

        select_list_ptr = dbcb.select_ptr;
        call set_u_vals;				/* this is the beginning of what was update_movelist */
        do k = 1 to select_list.num_vars;		/* loop through for each var */
	  ml_ptr = move_list_array.ml_ptr (k);
	  mli = 0;
	  do i = 1 to select_list.num_items;		/* update each item */
	      if select_list.item.var_index (i)
		= move_list_array.var_index (k) then do;
		mli = mli + 1;
		move_list.item.attr_index (mli) =
		    select_list.item.ai_ptr (i) -> rm_attr_info.defn_order;
		move_list.item.user_ptr (mli) =
		    select_list.item.user_ptr (i);
		move_list.item.user_desc_ptr (mli) =
		    select_list.item.user_desc_ptr (i);
	      end;
	  end;
        end;					/* this is the end of what was update movelist */

        code = 0;
exit:
        return;					/* that's all, folks */

error:
    proc (cd);

/* Internal error procedure */

dcl     cd		 fixed bin (35);		/* internal status code */

        code = cd;					/* pass bad news back to caller */
        go to exit;

    end error;

set_u_vals:
    proc;						/* Procedure to fill in user value items in the select list */

        arg_ptr = null;				/* initialize */

        pa_size = num_args;				/* set size of template array */
        desc_ptr = descp_ptr -> ptr_array (num_args);	/* get last of value args */
        skip_flag = "0"b;

        if descriptor.type = STRUCTURE then do;		/* if everything included in structure */

	  call mu_break_structure (area_ptr,
	      argp_ptr -> ptr_array (num_args),
	      descp_ptr -> ptr_array (num_args), arg_ptr, arg_count, icode);
	  if icode ^= 0 then call error (icode);
	  if arg_count ^= select_list.num_items then do;	/* if no. components doesn't match no. sel. items */
	      dbcb.val_mod, dbcb.val_rtrv = "0"b;
	      skip_flag = "1"b;
	  end;

	  else do;
	      num_args = num_args - 1;		/* update unused value counter */
	      pa_size = arg_count;			/* set size of template array */
	      a_ptr = addr (str_args (1));		/* point to first of arg pointers */
	      d_ptr = addr (str_args (arg_count + 1));	/* point to first of desc. pointers */
	      was_structure = "1"b;			/* remember was struct. */
	  end;

        end;					/* breaking up structure */

        else do;					/* if value for each select item specified separately */

	  if select_list.num_items > num_args then do;	/* if not enougn values to cover all items */
	      dbcb.val_mod, dbcb.val_rtrv = "0"b;
	      skip_flag = "1"b;
	  end;

	  else do;
	      num_args = num_args - select_list.num_items;/* update unused value count, we will use sufficient values from the end of the list to cover all select items. */

	      a_ptr = addr (argp_ptr -> ptr_array (num_args + 1));
						/* point to first used arg pointer */
	      d_ptr = addr (descp_ptr -> ptr_array (num_args + 1));
						/* point to first used desc. pointer */
	      pa_size = select_list.num_items;		/* set template size */
	      was_structure = "0"b;			/* remember was not struct. */
	  end;

        end;					/* item values specified separately */

        if ^skip_flag then do;			/* if have user values to set */

	  do i = 1 to select_list.num_items;		/* for each specified select item */

	      select_list.item.user_desc_ptr (i), desc_ptr =
		d_ptr -> ptr_array (i);		/* pick up pointer to current value descriptor */
	      rdi_ptr =
		select_list.item.ai_ptr (i) -> rm_attr_info.domain_ptr;

	      if desc_ptr -> bit36
		= rm_domain_info.user_desc /* if no conversion required */
		| descriptor.type = STRUCTURE
		| descriptor.number_dims ^= "0"b then do;

		select_list.item.must_convert (i) = "0"b;
						/* remember no conversion required */
		select_list.item.user_ptr (i) = a_ptr -> ptr_array (i);
						/* pick up pointer to user value */
		if ^was_structure
		then /* if vals. specified separately */
		     if descriptor.type = VAR_CHAR
		         | descriptor.type = VAR_BIT
		     then /* if varying */
			select_list.item.user_ptr (i) =
			    addrel (select_list.item.user_ptr (i), -1);
						/* to include length */

	      end;				/* if no conversion required */

	      else do;				/* if conversion is required */

		select_list.item.must_convert (i) = "1"b;
						/* remember to convert */
		select_list.item.user_ptr (i) = a_ptr -> ptr_array (i);
						/* pick up pointer to user value */
		if ^was_structure
		then /* if vals. specified separately */
		     if descriptor.type = VAR_CHAR
		         | descriptor.type = VAR_BIT
		     then /* if varying */
			select_list.item.user_ptr (i) =
			    addrel (select_list.item.user_ptr (i), -1);
						/* to include length */

		if ^mu_valid_data_type$valid_scalar_data_type (desc_ptr
		    -> bit36)
		then call error (mrds_error_$bad_select_value);
						/* if unsupported data type */

	      end;				/* where conversion is required */

	  end;					/* filling in user value info. */

	  if arg_ptr ^= null then arg_ptr = null;

        end;					/* if had user values */
    end set_u_vals;

%include mrds_dbcb;
%page;
%include mrds_select_list;
%page;
%include mdbm_rm_attr_info;
%page;
%include mdbm_move_list;
%page;
%include mdbm_rm_domain_info;
%page;
%include mdbm_descriptor;
%page;

dcl     (
        argp_ptr,					/* Input/Output -- pointer to next arg pointer */
        arg_sel_ptr,
        descp_ptr,					/* Input/Output -- pointer to next descriptor pointer */
        arg_ptr,					/* pointer to pointer list returned by break_structure */
        a_ptr,					/* points to list of arg pointers */
        d_ptr
        )			 ptr;			/* points to list of descriptor pointers */

dcl     skip_flag		 bit (1);			/* on if no user vaos to set */

dcl     (
        num_args,					/* Input/Output -- number of unused value args */
        i,					/* internal index */
        k,					/* internal index */
        mli,					/* internal index */
        pa_size,					/* current size of ptr_array */
        arg_count
        )			 fixed bin;		/* number of arguments out of break_structure */

dcl     (
        code,					/* Output -- return code */
        icode
        )			 fixed bin (35);		/* internal status code */

dcl     was_structure	 bit (1) unal;		/* on if user vals in structure */
dcl     str_args		 (2 * arg_count) ptr based (arg_ptr);
						/* structure items from break_structure */
dcl     ptr_array		 (pa_size) ptr based;	/* template */
dcl     bit36		 bit (36) based;		/* template */

dcl     STRUCTURE		 fixed bin (5) int static init (17)
			 options (constant);
dcl     VAR_BIT		 fixed bin (5) int static init (20)
			 options (constant);
dcl     VAR_CHAR		 fixed bin (5) int static init (22)
			 options (constant);

dcl     (
        mrds_error_$bad_select_value,
        sys_info$max_seg_size
        )			 fixed bin (35) ext;

dcl     (addr, addrel, fixed, null, rel)
			 builtin;

/* Multics subroutines */

/* MRDS subroutines */

dcl     mu_break_structure	 entry (ptr, ptr, ptr, ptr, fixed bin,
			 fixed bin (35));
dcl     mu_valid_data_type$valid_scalar_data_type
			 entry (bit (36)) returns (bit (1) aligned);
						/* decides if supported data type */
dcl     area_ptr		 ptr;
dcl     continue		 char (1) init ("c");	/* dont stop after printing error mesg */
dcl     info_ptr		 ptr init (null ());	/* unused */
dcl     return_value	 fixed bin (35) init (0);	/* unused */
dcl     caller_name		 char (32) init ("mrds_dsl_set_user_vals");
						/* name of calling module */

    end mrds_dsl_set_user_vals;
