/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

mu_quiesce: proc;

/* HISTORY:

   Originally written by Al Kepner, March 1979.

   80-12-09 Jim Gray : changed method of getting dbc_ptr, so that a common
   routine could determine if AMDB -rs needed to be run to update the
   dbc structure versions.

   82-05-19 Mike Kubicar : modified to allow multiple database quiesces
   per process.  Also removed code that started to implement multiple
   quiesces per call.

   84-10-23 Paul Benjamin : changed to use a smaller lock wait time when 
   calling set_lock_$lock from the cleanup handler.
*/

/* DESCRIPTION:


   BEGIN_DESCRIPTION
   " N__a_m_e:  mu_quiesce
   "
   "      This  routine allows  the caller to  quiesce an  entire data
   " base   or  selected   files   for  such   purposes   as  dumping,
   " restructuring, or file ring changes. Files which are quiesced are
   " reserved  for the  exclusive use  of the  process which  does the
   " quiescing.
   "
   "
   " E__n_t_r_y:  mu_quiesce$quiesce_quiet
   "
   "
   "      This  entry is  called  to quiesce  an entire  data  base or
   " selected files.
   "
   "
   " U__s_a_g_e
   "
   "      dcl  mu_quiesce$quiesce_quiet entry (char (168), fixed bin (17),
   "	     fix bin (35));
   "
   "      call mu_quiesce$quiesce_quiet (database_pathname, wait_time, code);
   "
   " where:
   "
   " 1.   database_pathname    (Input)
   "             the pathname of the database to be quiesced.
   "
   " 2.   wait_time            (Input)
   "             the length of time (in seconds) to wait on locks.
   "
   " 3.   code                 (Output)
   "             is a standard system error code.  If the wait time is
   "             exceeded   the   error    code   returned   will   be
   "             mdbm_error_$db_busy.  The data base has been quiesced
   "             only  if a  0 error  code  is returned.   Other error
   "             codes     which    may     be     returned    include
   "             mdbm_error_$quiesced_dead_db (The data  base has been
   "             quiesced  by  a  process  which  no  longer  exists,)
   "             mdbm_error_$my_quiesced_db (Attempt to quiesce a data
   "             base  which   has  already  been   quiesced  by  this
   "             process,)  mdbm_error_$hold_quiesced_db  (Attempt  to
   "             quiesce a  data base before  previously quiesced data
   "             bases  have  been  freed,)
   "             mdbm_error_$trouble_lock (The data base is locked and
   "             may          be          inconsistent.)           and
   "             mdbm_error_$quiesce_too_few (The number of data bases
   "             to quiesce is negative or zero.)
   "
   "
   " N__o_t_e_s
   "
   "      Only one user  at a time may quiesce a given
   " data base.  The  data base is locked against  further attempts to
   " quiesce  until  mu_quiesce$quiesce_free  is  called by  the  same
   " process which first called mu_quiesce$quiesce_quiet.
   "
   "
   " E__n_t_r_y:  mu_quiesce$quiesce_free
   "
   "
   "      This entry  is called to  free the files or  data base which
   " have been quiesced.
   "
   "
   " U__s_a_g_e
   "
   "      dcl  mu_quiesce$quiesce_free entry (char (168), fixed bin(35));
   "
   "      call mu_quiesce$quiesce_free (database_pathname, code);
   "
   " where:
   "
   " 1.   database_pathname    (Input)
   "             the pathname of the database to be freed.
   "
   " 2.   code                 (Output)
   "             is a  standard system error code.   Error codes which
   "             may be returned  include mdbm_error_$quiesced_db (The
   "             data  base  has been  quiesced  by another  process,)
   "             mdbm_error_$quiesced_dead_db (The data  base has been
   "             quiesced  by  a  process  which  no  longer  exists,)
   "             mdbm_error_$trouble_lock (The data base is locked and
   "             may          be           inconsistent,)          and
   "             mdbm_error_$free_not_quiesced (Attempt to free a data
   "             base which was not quiesced.)
   "
   "
   END_DESCRIPTION

*/

quiesce_quiet: quiet: entry (db_path, quiesce_wait_time, code);
	dcl     db_path		 char (168);
	dcl     quiesce_wait_time	 fixed bin (17);
	dcl     code		 fixed bin (35) parm;

/* Initialization: */
	hold_ul_ptr, dbc_ptr = null ();
	handling_a_cleanup = "0"b;
	on cleanup begin;
	     handling_a_cleanup = "1"b;
	     call tidy_up;
	end;
	code = 0;

/* Obtain a pointer to the dbc (dbc_ptr). */
	call get_dbc_ptr (bc, dbc_ptr);

/* Lock the db against other attempts to quiesce. */
	call set_lock_$lock (dbc.quiesce_lock,
	     quiesce_wait_time,
	     icode);
	if icode ^= 0 then do;
		if icode = error_table_$lock_wait_time_exceeded
		then call error (mdbm_error_$db_busy);
		if icode = error_table_$invalid_lock_reset
		then do;
			dbc.trouble_switch = "1"b;
			call error (mdbm_error_$quiesced_dead_db);
		     end;
		if icode = error_table_$locked_by_this_process
		then call error (mdbm_error_$my_quiesced_db);
		call error (icode);
	     end;

	time_remaining = quiesce_wait_time;
	go to check_opens;

	do while (time_remaining > 0);

/* Sleep for 30 seconds. */
	     time_remaining = time_remaining - 30;
	     call timer_manager_$sleep (30, "11"b);

check_opens:   ;

/* Lock open_lock using the wait time suppied. */
	     call set_lock_$lock (dbc.open_lock,
		quiesce_wait_time,
		icode);
	     if icode ^= 0 then do;
		     if icode = error_table_$lock_wait_time_exceeded
		     then call error (mdbm_error_$db_busy);
		     if icode = error_table_$invalid_lock_reset
		     then do;
			     dbc.trouble_switch = "1"b;
			     call error (mdbm_error_$trouble_lock);
			end;
		     else call error (icode);
		end;

/* Check for potentially inconsistent data base. */
	     if dbc.trouble_switch then do;
		     call set_lock_$unlock (dbc.open_lock, icode);
		     call error (mdbm_error_$trouble_lock);
		end;

/* Determine if any users have the db open. */
	     if dbc.open_users = 0 then go to quiesce_db_ok;

/* Unlock open_lock. */
	     call set_lock_$unlock (dbc.open_lock, icode);
	     if icode ^= 0 then call error (icode);
	end;

/* The wait time has been exceeded. */
	call error (mdbm_error_$db_busy);

quiesce_db_ok: ;
	quiesce_sw = "1"b;
	quiesce_db = "1"b;

/* Add information about the quiescing process to the users list. */
	num_filns = 0;
	allocate user_list in (dbc.static_area) set (hold_ul_ptr);
	ul_ptr = hold_ul_ptr;
	call get_lock_id_ (user_list.db_lock_id);
	if icode ^= 0 then call error (icode);
	user_list.rdbi_bits = "0"b;
	user_list.num_filns = 0;
	user_list.fil_list_ofs = NULL_OFS;
	user_list.next_active_ofs = NULL_OFS;
	user_list.next_waiting_ofs = NULL_OFS;
	user_list.next_open_ofs = dbc.open_users_ofs;	/* Add user to list of data base
						   open users. */
	dbc.open_users_ofs = rel (ul_ptr);
	user_list.group_id = get_group_id_ ();
	user_list.open_mode = mdbm_data_$quiesce_mode;
	user_list.bypass_count = 0;
	user_list.allowance_count = 0;
	user_list.process_id = get_process_id_ ();
	user_list.ev_chn_id = 0;
	user_list.dead_proc = "0"b;
	user_list.dead_proc_conflict = "0"b;
	user_list.priority_high = "0"b;
	user_list.waiting_sw = "0"b;
	user_list.active_sw = "0"b;
	user_list.event_signal_sw = "0"b;
	user_list.passive_sw = "1"b;			/* assume passivity */
	call set_lock_$unlock (dbc.open_lock, icode);
	if icode ^= 0 then call error (icode);
	go to common_exit;

quiesce_free: free: entry (db_path, code);

/* Initialization: */
	hold_ul_ptr, dbc_ptr = null ();
	handling_a_cleanup = "0"b;
	on cleanup begin;
	     handling_a_cleanup = "1"b;
	     call tidy_up;
	end;
	code = 0;

/* Obtain a pointer to the dbc (dbc_ptr). */
	call get_dbc_ptr (bc, dbc_ptr);

/* Make sure quiesce_lock was locked by this process.
   If not give an appropriate error code and return. */

	call get_lock_id_ (lock_id);
	if dbc.quiesce_lock ^= lock_id
	then do;
		call set_lock_$lock (dbc.quiesce_lock,
		     0, icode);
		if icode = 0
		then do;
			call free_db;
			call error (mdbm_error_$free_not_quiesced);
		     end;
		else if icode = error_table_$invalid_lock_reset
		then do;
			dbc.trouble_switch = "1"b;
			call error (mdbm_error_$quiesced_dead_db);
		     end;
		else if icode = error_table_$lock_wait_time_exceeded
		then call error (mdbm_error_$quiesced_db);
		else call error (icode);
	     end;
	else do;
		call free_db;
	     end;
common_exit: ;
	return;

convert: proc (a_ptr, ofs) returns (ptr);

/* this procedure function converts an offset from NULL_OFS to null
   or from the offset value to a pointer value within the segment denoted by a_ptr
*/

	dcl     result		 ptr;		/* the resultant pointer value */
	dcl     a_ptr		 ptr;		/* ptr to the segment to which the offset refers */
	dcl     ofs		 bit (18) unal;	/* the bit offset */

	dcl     (null, ptr)		 builtin;

	if ofs ^= NULL_OFS
	then result = ptr (a_ptr, ofs);
	else result = null;

	return (result);

     end convert;

delete_quiesce_user_from_list: proc;

/* This routine deletes the quiesce user entry out of the list of open
   users.  It is called in response to (1) most errors, (2) the cleanup condition,
   and (3) the mu_quiesce$free entry point. */

	previous_ul_ptr = null ();
	proc_id = get_process_id_ ();
	do ul_ptr = convert (dbc_ptr, dbc.open_users_ofs)
	     repeat convert (dbc_ptr, user_list.next_open_ofs)
	     while (ul_ptr ^= null ());
	     if user_list.process_id = proc_id
		& user_list.open_mode = mdbm_data_$quiesce_mode
	     then do;
		     hold_ul_ptr = ul_ptr;
		     if previous_ul_ptr = null ()
		     then dbc.open_users_ofs = user_list.next_open_ofs;
		     else previous_ul_ptr -> user_list.next_open_ofs = user_list.next_open_ofs;
		     go to free_user_storage;
		     dcl	   proc_id	      bit (36); /* process_id of this process. */
		     dcl	   previous_ul_ptr	      ptr;/* ptr to the user_list entry which precedes the current one */
		end;
	     previous_ul_ptr = ul_ptr;
	end;
free_user_storage: ;
	if hold_ul_ptr ^= null ()
	then free hold_ul_ptr -> user_list in (dbc.static_area);
	return;
     end delete_quiesce_user_from_list;

error: proc (cd);
	dcl     cd		 fixed bin (35) parm;
	code = cd;
	call tidy_up;
	go to common_exit;
     end error;

free_db: proc;
	call set_lock_$lock (dbc.open_lock,
	     mdbm_data_$lock_wait, icode);
	if icode ^= 0 then do;
		if icode = error_table_$lock_wait_time_exceeded
		then call error (mdbm_error_$db_busy);
		if icode = error_table_$invalid_lock_reset
		then do;
			dbc.trouble_switch = "1"b;
			call error (mdbm_error_$trouble_lock);
		     end;
		else call error (icode);
	     end;

/* Check for potentially inconsistent data base. */
	if dbc.trouble_switch then do;
		call set_lock_$unlock (dbc.open_lock, icode);
		call error (mdbm_error_$trouble_lock);
	     end;
	quiesce_sw = "0"b;
	quiesce_db = "0"b;
	call delete_quiesce_user_from_list;
	call set_lock_$unlock (dbc.open_lock, icode);
	if icode ^= 0 then call error (icode);
	call set_lock_$unlock (dbc.quiesce_lock, icode);
	if icode ^= 0 then call error (icode);
	return;
     end free_db;

get_dbc_ptr: proc (bc, dbc_ptr);
	dcl     bc		 fixed bin (24) parm;
	dcl     dbc_ptr		 ptr parm;

/* Use the data base pathname supplied in the quiesce data structure to
   obtain a pointer to the dbc. */

	call mu_concurrency_control$open_control_segment (db_path,
	     dbc_ptr, bc, icode);
	if icode ^= 0 then
	     call error (icode);

	return;
     end get_dbc_ptr;

tidy_up: proc;

/* This routine is called when any error occurs and for the
   cleanup condition. It attempts to leave the dbc in a non quiesced state. */
	if code = mdbm_error_$my_quiesced_db then return;
	if code = mdbm_error_$hold_quiesced_db then return;
	if code = mdbm_error_$quiesce_too_few then return;
	if dbc_ptr = null () then return;
	call get_lock_id_ (lock_id);
	if dbc.quiesce_lock ^= lock_id
	then return;
	if handling_a_cleanup
	     then call set_lock_$lock (dbc.open_lock,	/* mdbm_data_$lock_wait is too */
	     mdbm_data_$cleanup_lock_wait, icode);	/* long for a cleanup handler */
	else call set_lock_$lock (dbc.open_lock,
	     mdbm_data_$lock_wait, icode);
	if icode = 0 | icode = error_table_$locked_by_this_process
	then do;
		quiesce_sw = "0"b;
		quiesce_db = "0"b;
		call delete_quiesce_user_from_list;
		call set_lock_$unlock (dbc.open_lock, icode);
		call set_lock_$unlock (dbc.quiesce_lock, icode);
	     end;
     end tidy_up;

/* VARIABLES FOR MU_QUIESCE */
	dcl     bc		 fixed bin (24);
	dcl     cleanup		 condition;
	dcl     error_table_$invalid_lock_reset ext fixed bin (35);
	dcl     error_table_$lock_wait_time_exceeded ext fixed bin (35);
	dcl     error_table_$locked_by_this_process ext fixed bin (35);
	dcl     get_group_id_	 entry returns (char (32));
	dcl     get_lock_id_	 entry (bit (36) aligned);
	dcl     get_process_id_	 entry returns (bit (36));
	dcl     handling_a_cleanup     bit (1) aligned;
	dcl     hold_ul_ptr		 ptr;		/* ptr to user_list entry when newly allocated
						   or about to be freed. */
	dcl     icode		 fixed bin (35);
	dcl     lock_id		 bit (36) aligned;
	dcl     mdbm_data_$cleanup_lock_wait ext fixed bin (17);
	dcl     mdbm_data_$lock_wait	 ext fixed bin (17);
	dcl     mdbm_data_$quiesce_mode ext fixed bin (17);
	dcl     mdbm_error_$db_busy	 ext fixed bin (35);
	dcl     mdbm_error_$free_not_quiesced ext fixed bin (35);
	dcl     mdbm_error_$hold_quiesced_db ext fixed bin (35);
	dcl     mdbm_error_$my_quiesced_db ext fixed bin (35);
	dcl     mdbm_error_$quiesce_too_few ext fixed bin (35);
	dcl     mdbm_error_$quiesced_db ext fixed bin (35);
	dcl     mdbm_error_$quiesced_dead_db ext fixed bin (35);
	dcl     mdbm_error_$trouble_lock ext fixed bin (35);
	dcl     set_lock_$lock	 entry (bit (36) aligned, fixed bin, fixed bin (35));
	dcl     set_lock_$unlock	 entry (bit (36) aligned, fixed bin (35));
	dcl     sys_info$max_seg_size	 ext fixed bin (35);
	dcl     time_remaining	 fixed bin (71);
	dcl     timer_manager_$sleep	 entry (fixed bin (71), bit (2));
	dcl     mu_concurrency_control$open_control_segment entry (char (168), ptr, fixed bin (24), fixed bin (35)); /* opens dbc_ptr */
	dcl     (fixed, null, rel) builtin;

%include mdbm_dbc;

%include mdbm_users;
     end mu_quiesce;
