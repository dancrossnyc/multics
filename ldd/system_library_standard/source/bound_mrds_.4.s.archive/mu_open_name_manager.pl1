/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* HISTORY:

   Originally written by Jim Gray - - February 1981

*/

mu_open_name_manager: procedure (); return;		/* not a legal entry */

/* DESCRIPTION:

   This routine provides the ability to refer the an opening
   of a database (via dsl_), a model (via mmi_), or a submodel (via msmi_),
   with a user defined name of arbitrary length, and to have
   an arbitrary number of openings of any kind at the same time.
   The result of a "name to opening correspondence" is a pointer
   to the particular structure involved
   (i.e. a pointer to either the resultant, db, or sub - model)
   The current search method used is a binary threaded tree of names.
   The internal procedures for it were copied from the
   mrds_rst_tree_... routines.

   There are  6 entries:
   define_open_name, get_model_pointer, display_open_names,
   delete_open_name, delete_all_open_names, list_all_open_names

   The last returns a structure, rather than calling ioa_, like the display entry.

   The delete_all_open_names entry should be used with caution,
   since, not only the callers (say a model manager),
   but all opening names will be deleted as well.
*/

/* PARAMETERS:

   ===== define_open_name entry

   user_name - - (input) char(*), the name the user desires to give this opening,
   it will be accepted as a valid name if not already in the list of open names

   open_model_type - - (input) char(1), "r" => resultant model, "m" => db model,
   "s" => submodel, is the type of opening being defined

   model_pointer - - (input) pointer, a pointer to the resultant/db/sub model,
   depending on the open_model_type, that is to be associated with this name.

   ===== get_model_pointer entry

   user_name - - (input) char(*), the name for which the opened model
   pointer is to be retrieved.

   open_model_type - - (output), char(1), same as for define_open_name entry

   model_pointer - - (output), pointer, same as for define_open_name entry

   ===== display_open_names entry

   no inputs - - displays the (ordered by name) current set of open names,
   the open type, and in debug mode, the model pointer.

   ===== delete_open_name entry

   user_name - - (input) char(*), removes all information associated with this
   name from the list of open names

   ===== delete_all_open_names entry

   only error code parameter(see below), deletes all currently defined names,
   the error code will be 0 if no names are defined.

   ===== list_all_open_names entry

   user_area_ptr - - (input) a pointer to an area in which to allocate a list
   of pointers to the names in the list

   open_name_list_ptr - - (output) a pointer to a singly linked list of open
   names, where each element may be overlayed with the mrds_open_name_element.incl.pl1
   This pointer will be null of there are no open names defined.

   open_name_list_size - - (output) fixed bin (24), the number of elements
   in the open name list.


   *******************************************************
   ***** common to all entries, but display_open_names

   error_code - - (output) fixed bin (35), error status encoding, 0 unless an error occurred

*/

/* entry to allow defing of a new opening name */

define_open_name: entry (user_name, open_model_type, model_pointer, error_code);

	on area begin;				/* capture name space overflow */
		error_code = mdbm_error_$too_many_open_names;
		goto skip_allocate;
	     end;

	error_code = 0;

	call tree_insert (user_name, root_of_tree_ptr, node_ptr, success);

	if success then
	     current_number_of_names = current_number_of_names + 1;
	else error_code = mdbm_error_$open_name_already_known;

skip_allocate:

	return;

/* entry to remove an opening name from further use */

delete_open_name: entry (user_name, error_code);

	error_code = 0;


	call tree_delete (user_name, root_of_tree_ptr, success);

	if success then do;
		current_number_of_names = current_number_of_names - 1;
		if current_number_of_names = 0 then
		     call clean_up ();
	     end;

	else error_code = mdbm_error_$open_name_not_known;

	return;

/* entry to get a pointer to the model (resultant, db or sub model)
   given an opening name, also returned is the type of model */

get_model_pointer: entry (user_name, open_model_type, model_pointer, error_code);

	error_code = 0;
	model_pointer = null ();
	open_model_type = "";

	call tree_search (user_name, root_of_tree_ptr, node_ptr, parent_ptr, success);

	if success then do;
		mrds_open_name_ptr = node_ptr;
		model_pointer = mrds_open_name.mrds_info.model_pointer;
		open_model_type = mrds_open_name.mrds_info.opening_type;
	     end;

	else error_code = mdbm_error_$open_name_not_known;

	return;

/* entry to display all currently known opening names */

display_open_names: entry ();

	node_ptr = root_of_tree_ptr;			/* convention to get first on list */

	success = "1"b;

	if current_number_of_names > 0 then
	     call ioa_ ("^/Number of opening names:  ^d^/", current_number_of_names);

	number_of_open_names = 0;

/* go through the tree in order, till all names displayed */

	do while (success);

	     call tree_successor (root_of_tree_ptr, node_ptr, successor_ptr, successor_parent_ptr, success);

	     if success then do;
		     number_of_open_names = number_of_open_names + 1;
		     mrds_open_name_ptr, node_ptr = successor_ptr; /* to get next in list */

		     call ioa_ ("^/Opening name:  ^a", mrds_open_name.user_info.name);
		     call ioa_ ("Opening type:  ^a", mrds_open_name.mrds_info.opening_type);

		     if substr (db_mu_open_name_manager, 1, 1) then do; /* display debug output if switch on */

			     put skip data (mrds_open_name_ptr);

			     put skip data (mrds_open_name);

			     put skip;

			end;
		end;

	end;

	if number_of_open_names = 0 then
	     call ioa_ ("^/No opening names defined.^/");
	else call ioa_ ("^/");

	return;

/* entry to delete all names from the lsit of open names */

delete_all_open_names: entry (error_code);

	error_code = 0;

	success = "1"b;

	do while (success);

	     node_ptr = root_of_tree_ptr;		/* get first one on list each time */

	     call tree_successor (root_of_tree_ptr, node_ptr, successor_ptr, successor_parent_ptr, success);

	     if success then do;
		     node_ptr = successor_ptr;

		     call tree_delete ((node_ptr -> mrds_open_name.user_info.name), root_of_tree_ptr, success);

		     if ^success then
			error_code = mdbm_error_$open_name_not_known;

		end;

	end;

	current_number_of_names = 0;

	call clean_up ();

	return;

/* entry to return a linked list of currently defined open names */

list_all_open_names: entry (user_area_ptr, structure_version, open_name_list_ptr, open_name_list_size, error_code);

/* initizlize */

	error_code = 0;
	node_ptr = root_of_tree_ptr;
	success = "1"b;
	open_name_list_ptr = null ();
	open_name_list_size = 0;
	number_of_open_names = 0;

	on area begin;
		error_code = error_table_$area_too_small;
		goto exit;
	     end;

	if user_area_ptr = null () then
	     error_code = error_table_$badcall;
	else if structure_version ^= mrds_open_name_element_structure_version then
	     error_code = error_table_$unimplemented_version;

	if error_code ^= 0 then ;
	else do;

/* go through the tree in reverse order, so that the list is in order */

		do while (success);

		     call tree_predecessor (root_of_tree_ptr, node_ptr, predecessor_ptr, predecessor_parent_ptr, success);

		     if success then do;

			     number_of_open_names = number_of_open_names + 1;

			     mrds_open_name_ptr, node_ptr = predecessor_ptr;
			     mrds_open_name_element_length_init = mrds_open_name.user_info.name_length;

			     allocate mrds_open_name_element set (mrds_open_name_element_ptr) in (user_area_ptr -> work_area);

			     unspec (mrds_open_name_element) = "0"b;

/* fill in the details for this element in the list */

			     mrds_open_name_element.version = mrds_open_name_element_structure_version;
			     mrds_open_name_element.name_length = mrds_open_name_element_length_init;
			     mrds_open_name_element.name = mrds_open_name.user_info.name;
			     mrds_open_name_element.open_type = mrds_open_name.mrds_info.opening_type;
			     mrds_open_name_element.model_pointer = mrds_open_name.mrds_info.model_pointer;

/* insert the element into the linked list, at the head */

			     mrds_open_name_element.next = open_name_list_ptr;
			     open_name_list_ptr = mrds_open_name_element_ptr;

			end;

		end;

	     end;

	if error_code = 0 then
	     open_name_list_size = number_of_open_names;

exit:

	return;

tree_search: procedure (key, root_ptr, node_ptr, parent_ptr, success);


/* HISTORY:

   originally written by jim gray - - july 1978

*/

/* DESCRIPTION:
   Threaded binary tree search
   Given a pointer to the desired list, do a binary search for the key.
   Return either a not found indication,
   or a found indication with a pointer to the key node,
   and a pointer to it's parent */

/* PARAMETERS:

   key - - (input) word to be searched for as key to tree node

   root_ptr - - (input) pointer to root node of desired tree

   node_ptr - - (output) pointer to node containing key when found,
   else root pointer pointer

   parent_ptr - - (output) pointer to direct tree parent when key node found,
   else pointer to prospective parent for insertion of key

   success - - (output) bit value indicating key was found in tree(on),
   or that place for it's  insertion was found(off)

*/


/* Initialize search loop
   note: parent_ptr is root_ptr when no dummy head exists,
   or when the dummy head node left link is a thread
   thus indicating a empty tree */

	parent_ptr = root_ptr;
	success = "0"b;

/* if dummy node at head of tree missing,
   we fail since tree was never built */

	if root_ptr = null () then ;
	else do;
		node_ptr = root_ptr -> mrds_open_name.left.link;
		thread = root_ptr -> mrds_open_name.left.thread;


/* Search the tree while the data key is not found,
   and branches remain to be searched .
   failure to make even one loop pass means the tree is empty,
   because the dummy head node left link is a thread to itself */

		do while (^thread & ^success);

/* Branch left for smaller or right for larger keys.
   If key matches, note success and remember pointers. */

		     if key > node_ptr -> mrds_open_name.user_info.name then do;
			     thread = node_ptr -> mrds_open_name.right.thread;
			     parent_ptr = node_ptr;
			     node_ptr = node_ptr -> mrds_open_name.right.link;
			end;

		     else if key < node_ptr -> mrds_open_name.user_info.name then do;
			     thread = node_ptr -> mrds_open_name.left.thread;
			     parent_ptr = node_ptr;
			     node_ptr = node_ptr -> mrds_open_name.left.link;
			end;

		     else success = "1"b;

		end;

	     end;

	declare key		 char (*);	/* key to be searched for */
	declare root_ptr		 ptr;		/* pointer to root of tree */
	declare node_ptr		 ptr;		/* output ptr to found node */
	declare parent_ptr		 ptr;		/* prospective parent node for insertion */
	declare success		 bit (1);		/* on => key found, else place for insertion found */
	declare thread		 bit (1);		/* on => link is a thread not pointer */



     end;

tree_successor: procedure (root_ptr, node_ptr, successor_ptr, successor_parent_ptr, success);


/* HISTORY:

   originally written by jim gray - - july 1978

*/

/* DESCRIPTION:
   threaded binary tree inorder successor retrieval routine
   given a pointer to the current node in the tree
   ( set node_ptr = root_ptr to get first tree element )
   and a pointer to the root of the tree
   a pointer to it's inorder successor and that nodes parent
   are returned with a success indication, or
   when end of tree(no more successors) or empty tree is detected,
   a failure indication is returned */

/* PARAMETERS:

   root_ptr - - (input) pointer to root of desired tree

   node_ptr - - (input) pointer to current for which the successor is desired

   successor_ptr - - (output) pointer to resulting inorder successor of current node

   successor_parent_ptr - - (output) pointer to successor node direct tree parent

   success - - (output) bit value that is on when successor found,
   and off when end of tree or empty tree is detected

*/



/* no current node means no successor */

	if node_ptr = null () then
	     success = "0"b;

	else do;

/* current node exists, if it's right link is a thread
   it is either a pointer to the root meaning no more successors
   or it points to the current node's inorder successor */

		successor_parent_ptr = node_ptr;
		successor_ptr = node_ptr -> mrds_open_name.right.link;

		if node_ptr -> mrds_open_name.right.thread then

		     if successor_ptr = root_ptr then
			success = "0"b;
		     else success = "1"b;

		else do;

/* current node's right link is not a thread,
   go left from current node's right descendent until
   a left thread is found and return it's owner
   as the inorder successor */

			do while (^successor_ptr -> mrds_open_name.left.thread);

			     successor_parent_ptr = successor_ptr;
			     successor_ptr = successor_ptr -> mrds_open_name.left.link;

			end;

/* if pointer is still to root, the dummy head node
   left link was a thread indicating an empty tree */

			if successor_ptr = root_ptr then
			     success = "0"b;
			else success = "1"b;

		     end;


	     end;


	declare root_ptr		 ptr;		/* points to root of tree */
	declare node_ptr		 ptr;		/* points to node for which successor desired */
	declare successor_ptr	 ptr;		/* pointer to resulting inoder successor */
	declare successor_parent_ptr	 ptr;		/* successor node direct parent ptr */
	declare success		 bit (1);		/* on => successor found */




     end;

tree_delete: procedure (key, root_ptr, success);

/* HISTORY:

   originally written by jim gray - - july 1978

*/

/* DESCRIPTION:
   threaded binary tree deletion routine
   A search is made for the key in the tree
   specified by the root pointer.
   If the key is not found,
   the deletion fails.
   Otherwise the tree node area is unlinked
   from the tree, and the space freed */

/* PARAMETERS:

   key - - (input) word in tree indicating node to be deleted

   root_ptr - - (input/output) pointer to root node of desired tree,
   may be changed if key is at root node

   success - - (output) bit value indicating deletion done(on),
   or attempt to delete node not in tree(off)     */

/* basic algorithm

   simple case - delete node has no right subtree
   make delete node's left subtree the new descendent of delete node's parent

   complex case - delete node has a right subtree
   subcase 1 - delete node's successor is direct descendent
   replace delete node with successor, giving it the
   delete node's left subtree
   subcase 2 - delete node's successor is not a direct descendent
   same as subcase 1 but additionally
   successor's parent get's successors right subtree as it's left subtree
   and successor's right subtree becomes that of the delete node's */


/* get pointer to node to be deleted and to it's parent */

	call tree_search (key, root_ptr, node_ptr, parent_ptr, success);

/* if node to be deleted is not found, deletion fails */

	if ^success then ;

	else do;

/* node found, save data pointer, and rearrange tree links to eliminate the node */

		thread = "0"b;

/* fix predecessor thread

   since we are replacing the delete node with it's successor(if it has one),
   the delete node's predecessor must have its's right thread
   point to this new node(the delete node's successor) */

		if node_ptr -> mrds_open_name.right.thread then ;
		else call tree_successor (root_ptr, node_ptr, successor_ptr, successor_parent_ptr, success);
		if node_ptr -> mrds_open_name.left.thread then ;
		else do;
			call tree_predecessor (root_ptr, node_ptr, predecessor_ptr, predecessor_parent_ptr, success);
			if node_ptr -> mrds_open_name.right.thread then
			     predecessor_ptr -> mrds_open_name.right.link = node_ptr -> mrds_open_name.right.link;
			else do;
				predecessor_ptr -> mrds_open_name.right.link = successor_ptr;
			     end;
		     end;

/* if simple case of no inorder successor(right link a thread)
   then use the left subtree of delete node as his parent's new descendent,
   when the left link of the delete node is not a thread,
   else a left thread means that the parent link will become a thread.
   the left thread of the delete node may be used as this thread unless it points
   to the parent, in which case the right thread must be used. */

		if node_ptr -> mrds_open_name.right.thread then
		     if ^node_ptr -> mrds_open_name.left.thread then
			successor_ptr = node_ptr -> mrds_open_name.left.link;
		     else do;
			     thread = "1"b;
			     if parent_ptr ^= node_ptr -> mrds_open_name.left.link then
				successor_ptr = node_ptr -> mrds_open_name.left.link;
			     else successor_ptr = node_ptr -> mrds_open_name.right.link;
			end;

		else do;

/* complex case - delete node has a successor
   give the successor node a new left subtree(previously a thread)
   that is the current delete node's left subtree
   this is the first step in moving the successor node
   into the delete node's place in the tree */

			successor_ptr -> mrds_open_name.left.link = node_ptr -> mrds_open_name.left.link;
			successor_ptr -> mrds_open_name.left.thread = node_ptr -> mrds_open_name.left.thread;

/* for direct descendent successor, ignore right subtrees */

			if node_ptr = successor_parent_ptr then ;
			else do;

/* for successor not a direct descendent, the successor's new right subtree
   will be that of the delete node's.   The successor's old right subtree becomes
   the left subtree of the successor's old parent */

/* fix successor's parent's threads for case of delete node's right link not a thread,
   and successor is not direct descendent of delete node,

   successor node's right link a thread means that the successor node's
   parent's left link must become a thread to the successor node since the successor node
   is being made the predecessor of the successor node's parent.
   also the successor's right thread must be changed to pointer
   since it will link to delete node's right subtree(known to be nonempty).

   successor node's right link not a thread means that the successor's
   parent node's left link will be a pointer set equal to the successor
   node's right link. (the successor parent gets as his left, the successor's rught subtree) */

				if successor_ptr -> mrds_open_name.right.thread then do;
					successor_parent_ptr -> mrds_open_name.left.thread = "1"b;
					successor_ptr -> mrds_open_name.right.thread = "0"b;
				     end;
				else successor_parent_ptr -> mrds_open_name.left.link =
					successor_ptr -> mrds_open_name.right.link;
				successor_ptr -> mrds_open_name.right.link = node_ptr -> mrds_open_name.right.link;

			     end;

		     end;

/* for all cases, change parent of delete node to point to it's new successor.
   determine which branch of delete node parent to change.
   the link from the parent will be a thread only if
   the delete node's links were both threads */

		if node_ptr = parent_ptr -> mrds_open_name.left.link then do;
			parent_ptr -> mrds_open_name.left.link = successor_ptr;
			parent_ptr -> mrds_open_name.left.thread = thread;
		     end;

		else do;
			parent_ptr -> mrds_open_name.right.link = successor_ptr;
			parent_ptr -> mrds_open_name.right.thread = thread;
		     end;


/* release deleted nodes space */

		call node_free (length (key), node_ptr);
		success = "1"b;

	     end;

	declare key		 char (*);	/* name to be searched for, and deleted */
	declare root_ptr		 ptr;		/* pointer to root of tree */
	declare success		 bit (1);		/* on => deletion accomplished */
	declare successor_ptr	 ptr;		/* points to successor node */
	declare successor_parent_ptr	 ptr;		/* points to successor parent */
	declare thread		 bit (1);		/* on => link is a thread not pointer */
	declare predecessor_ptr	 ptr;		/* pointer to previous in order */
	declare predecessor_parent_ptr ptr;		/* points to aprent of predecessor */
	declare parent_ptr		 ptr;		/* points to node parent */
	declare node_ptr		 ptr;		/* pointer to current element in tree */





     end;

tree_insert: procedure (key, root_ptr, node_ptr, success);


/* HISTORY:

   originally written by jim gray - - july 1978

*/

/* DESCRIPTION:
   Threaded binary tree insertion routine
   Given a pointer to the root of the desired list, a search is made
   for the key.
   If the key is found, the insertion fails to
   avoid duplicating keys.
   A successful insertion returns a pointer to
   the new tree node */

/* PARAMETERS:

   key - - (input) word to be inserted as key in new node

   root_ptr - - (input/output) pointer to root node of tree,
   will be modified on empty tree insert

   node_ptr - - (output) pointer to the node just inserted

   success - - (output) bit value indicating good insertion(on)
   or failure due to key duplication attempt(off)

*/


/* get pointer to inorder parent in tree */

	call tree_search (key, root_ptr, node_ptr, parent_ptr, success);

/*  A search success(key was found) means a duplication
   of keys is being attempted, return failure */

	if success then success = "0"b;

/* Normal insertion, get a new list element, and fill in the blanks */

	else do;
		success = "1"b;

		call node_allocate (length (key), node_ptr);
		node_ptr -> mrds_open_name.user_info.name = key;
		node_ptr -> mrds_open_name.right.thread = "1"b;
		node_ptr -> mrds_open_name.left.thread = "1"b;

/* Add the new element to the tree.
   Change the head pointer if empty tree */

		if root_ptr ^= null () then ;
		else do;

/* no dummy node for tree head, get new node for it,
   then make its right link a pointer to itself, and
   make it's left link a thread to itself thus indicating
   that the tree is empty */

			call node_allocate (length (key), root_ptr);

			root_ptr -> mrds_open_name.right.link = root_ptr;
			root_ptr -> mrds_open_name.right.thread = "0"b;

			root_ptr -> mrds_open_name.left.link = root_ptr;
			root_ptr -> mrds_open_name.left.thread = "1"b;

		     end;

/* dummy head node for tree exists for all cases now, but tree may still
   be empty(dummy node left link = thread), if so then force the
   dummy node to be a right parent of the new data node
   this is done by making the dummy node pointer serve as the
   new node parent and setting the dummy node key equal to
   the new node key so the test for descendent direction
   will cause a left insert to take place */

		if ^root_ptr -> mrds_open_name.left.thread then ;
		else do;
			parent_ptr = root_ptr;
			root_ptr -> mrds_open_name.user_info.name = key;
		     end;

/* good parent within tree, determine if node is right
   or left descendent.   right descendents have a left thread
   to their direct parent, and a right thread
   to their inorder successor. left descendents have a right
   thread to their direct parent, and a left thread
   to their inorder predecessor */

		if key > parent_ptr -> mrds_open_name.user_info.name then do;

			node_ptr -> mrds_open_name.right.link = parent_ptr -> mrds_open_name.right.link;
			node_ptr -> mrds_open_name.left.link = parent_ptr;

			parent_ptr -> mrds_open_name.right.link = node_ptr;
			parent_ptr -> mrds_open_name.right.thread = "0"b;

		     end;

		else do;

			node_ptr -> mrds_open_name.left.link = parent_ptr -> mrds_open_name.left.link;
			node_ptr -> mrds_open_name.right.link = parent_ptr;

			parent_ptr -> mrds_open_name.left.link = node_ptr;
			parent_ptr -> mrds_open_name.left.thread = "0"b;

		     end;


	     end;

	declare key		 char (*);	/* name to be inserted */
	declare root_ptr		 ptr;		/* points to root of tree */
	declare node_ptr		 ptr;		/* pointer to node created */
	declare success		 bit (1);		/* on => good insertion operation */
	declare parent_ptr		 ptr;		/* pointer to parent of new node */


     end;

tree_predecessor: procedure (root_ptr, node_ptr, predecessor_ptr, predecessor_parent_ptr, success);


/* HISTORY:

   originally written by jim gray - - july 1978

*/

/* DESCRIPTION:
   threaded binary tree inorder predecessor retrieval routine
   given a pointer to the current node in the tree
   ( set node_ptr = root_ptr to get last tree element )
   and a pointer to the root of the tree
   a pointer to it's inorder predecessor and that nodes parent
   are returned with a success indication, or
   when end of tree(no more predecessors) or empty tree is detected,
   a failure indication is returned */

/* PARAMETERS:

   root_ptr - - (input) pointer to root of desired tree

   node_ptr - - (input) pointer to current for which the predecessor is desired

   predecessor_ptr - - (output) pointer to resulting inorder predecessor of current node

   predecessor_parent_ptr - - (output) pointer to predecessor node direct tree parent

   success - - (output) bit value that is on when predecessor found,
   and off when end of tree or empty tree is detected

*/



/* no current node means no predecessor */

	if node_ptr = null () then
	     success = "0"b;

	else do;

/* current node exists, if it's left link is a thread
   it is either a pointer to the root meaning no more predecessors
   (or empty tree when node_ptr was root_ptr)
   or it points to the current node's inorder predecessor */

		predecessor_parent_ptr = node_ptr;
		predecessor_ptr = node_ptr -> mrds_open_name.left.link;

		if node_ptr -> mrds_open_name.left.thread then

		     if predecessor_ptr = root_ptr then
			success = "0"b;
		     else success = "1"b;

		else do;

/* current node's left link is not a thread,
   go left from current node's left descendent until
   a right thread is found and return it's owner
   as the inorder predecessor */

			success = "1"b;

			do while (^predecessor_ptr -> mrds_open_name.right.thread);

			     predecessor_parent_ptr = predecessor_ptr;
			     predecessor_ptr = predecessor_ptr -> mrds_open_name.right.link;

			end;

		     end;


	     end;


	declare root_ptr		 ptr;		/* points to root of tree */
	declare node_ptr		 ptr;		/* points to node predecessor desired for */
	declare predecessor_ptr	 ptr;		/* pointer to preious node */
	declare predecessor_parent_ptr ptr;		/* parent of previous node ptr */
	declare success		 bit (1);		/* on => predecessor found */




     end;

node_allocate: procedure (key_length, node_ptr);

/* DESCRIPTION:

   routine to allocate the space needed for the opening name structure.
   The space where the allocations occur is a temp segment
   whose location is determined by set_mrd_temp_dir
   (the value before the first allocation in this routine)

*/

/* PARAMETERS:

   key_length - - (input) fixed bin(24), the length of the varying length
   name in the open name structure.

   open_model_type - - (input) char(1), the type of opening
   "r" => resultant model, "m" => db_model, "s" => submodel

   model_pointer - - (input) pointer, a pointer to the model for this opening type

   node_ptr - - (output) pointer, points to the newly allocated node

*/

/* initialize */

	if area_ptr = null () then
	     call init_work_area ();

	mrds_open_name_length_init = key_length;

	allocate mrds_open_name set (mrds_open_name_ptr) in (work_area);

	unspec (mrds_open_name) = "0"b;

	mrds_open_name.version = mrds_open_name_structure_version;
	mrds_open_name.user_info.name_length = key_length;
	mrds_open_name.mrds_info.opening_type = open_model_type;
	mrds_open_name.mrds_info.model_pointer = model_pointer;

	node_ptr = mrds_open_name_ptr;



	declare key_length		 fixed bin (24);	/* length of name */
	declare node_ptr		 ptr;		/* points to allocated tree element */

     end;

node_free: procedure (key_length, node_ptr);

/* routine to free a tree node allocated in the work area */


	mrds_open_name_length_init = key_length;

	free node_ptr -> mrds_open_name in (work_area);


	declare node_ptr		 ptr;		/* points to an allocated tree element */
	declare key_length		 fixed bin (24);	/* length of users name */

     end;

init_work_area: procedure ();

/* routine to make a temp seg in the user process dir */

	call get_temp_segment_ (program_name, area_ptr, error_code);
	if error_code ^= 0 then
	     goto skip_allocate;

	area_ptr -> work_area = empty ();

     end;

clean_up: procedure ();

/* routine to get rid of temp segment, after last name deleted
   it also re-initializes all critical internal static storage */

	if area_ptr ^= null () then do;

		call release_temp_segment_ (program_name, area_ptr, discard);

		area_ptr = null ();

		root_of_tree_ptr = null ();

		current_number_of_names = 0;

	     end;



	declare discard		 fixed bin (35);	/* unused error code */

     end;

	declare program_name	 char (32) init ("mu_open_name_manager"); /* name of calling program */
	declare root_of_tree_ptr	 ptr int static init (null ()); /* points to root of name tree */
	declare user_name		 char (*);	/* users name for this opening */
	declare error_code		 fixed bin (35);	/* error status endoing */
	declare mdbm_error_$too_many_open_names fixed bin (35) ext; /* more than space allows */
	declare mdbm_error_$open_name_not_known fixed bin (35) ext; /* name given not in tree */
	declare mdbm_error_$open_name_already_known fixed bin (35) ext; /* name already in tree */
	declare success		 bit (1);		/* on => operation succeded */
	declare parent_ptr		 ptr;		/* pointer to parent of node */
	declare model_pointer	 ptr;		/* pointer to resultant/model/submodel */
	declare open_model_type	 char (1);	/* r => resultant, m => model, s => submodel */
	declare ioa_		 entry options (variable); /* reports open name list */
	declare area_ptr		 ptr int static init (null ()); /* points to space for open names */
	declare work_area		 area (sys_info$max_seg_size) based (area_ptr); /* space for open names */
	declare sys_info$max_seg_size	 fixed bin (35) ext;/* largest segment */
	declare number_of_open_names	 fixed bin (24);	/* number of names displayed */
	declare current_number_of_names fixed bin (24) int static init (0); /* current count of names known */
	declare successor_ptr	 ptr;		/* points to next in tree "inorder" */
	declare area		 condition;	/* signaled when no space for names */
	declare get_temp_segment_	 entry (char (*), ptr, fixed bin (35)); /* gets work space */
	declare release_temp_segment_	 entry (char (*), ptr, fixed bin (35)); /* gets rid of temp pace */
	declare successor_parent_ptr	 ptr;		/* pointer to parent of next node */
	declare node_ptr		 ptr;		/* points to current node */
	declare sysprint		 file;		/* for debug output */
	declare (null, substr, length, empty, unspec) builtin;
	declare open_name_list_ptr	 ptr;		/* points to head of linked list of open names */
	declare open_name_list_size	 fixed bin (24);	/* number of elements in list */
	declare error_table_$area_too_small fixed bin (35) ext; /* not enough space in suers area */
	declare error_table_$badcall	 fixed bin (35) ext;/* null area pointer */
	declare error_table_$unimplemented_version fixed bin (35) ext; /* bad structure version */
	declare structure_version	 fixed bin;	/* desired version of structure */
	declare user_area_ptr	 ptr;		/* pointer to place to put list of names */
	declare predecessor_ptr	 ptr;		/* points to previous in list */
	declare predecessor_parent_ptr ptr;		/* points to parent of previous node */

%include mrds_open_name;

%include mrds_open_name_element;

%include mrds_debug_names;

     end;
