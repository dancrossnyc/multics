/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1981 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(85-11-17,Dupuis), approve(85-12-16,MCR7314),
     audit(86-02-04,Brunelle), install(86-02-05,MR12.0-1013):
     Added a call to the error procedure for the else clause error
     checking after the call to
     transaction_manager_$get_current_txn_id (mrds #143).
  2) change(85-11-20,Dupuis), approve(85-12-16,MCR7314),
     audit(86-02-04,Brunelle), install(86-02-05,MR12.0-1013):
     This entry is being made to cover the change made on 85-11-15 by
     Hergert.
  3) change(86-07-16,Dupuis), approve(86-08-05,MCR7491), audit(86-08-08,Blair),
     install(86-08-15,MR12.0-1127):
     85-11-22 Hergert: Removed all references to var_exists_ptr. Moved
     variable var_exists into select_list structure.  This was done to
     fix the bug where compiled set expressions that referenced a different
     set of relations would fail to execute properly. (mrds #158)
  4) change(86-07-16,Dupuis), approve(86-08-05,MCR7491), audit(86-08-08,Blair),
     install(86-08-15,MR12.0-1127):
     86-02-18 Hergert: Added code to fix bug where compiling a selection
     expression using relations that have zero populations generated a
     null search program. The effect of this was that any future use
     of the compiled se resulted in tuple_not_found regardless if it
     existed or not. (mrds #159)
  5) change(86-09-22,Dupuis), approve(86-09-30,MCR7554), audit(86-10-10,Blair),
     install(86-10-13,MR12.0-1184):
     Initialized dbcb.non_shared_to_shared and dbcb.scopes_changed to "0"b
     (phx20565).
  6) change(87-08-17,Dupuis), approve(87-09-01,MCR7764), audit(87-09-04,Blair),
     install(87-09-09,MR12.1-1100):
     For char and bit varying literals, the pointer was being set to the
     beginning of the string instead of to the length word. (This fix was
     provided by John Hergert.)
  7) change(87-09-22,Hergert), approve(88-07-11,MCR7903),
     audit(88-07-08,Dupuis), install(88-08-01,MR12.2-1073):
     Rewritten for new parser.
  8) change(88-09-07,Dupuis), approve(88-09-20,MCR7995), audit(88-09-21,Blair),
     install(88-09-26,MR12.2-1119):
     Added code that initializes the transaction id.
                                                   END HISTORY COMMENTS */


mrds_dsl_translate: proc (dbcb_ptr, area_ptr, caller, se_ptr, se_len, argp_ptr, descp_ptr, num_args, code);

/* NOTES:

   This procedure translates a given selection expression into a tabular form which can be efficiently utilized by
   the data base search procedure.
*/

/* HISTORY:

   Initially written by J. A. Weeldreyer -- January, 1976.

   Modified by J. A. Weeldreyer to incorporate  set  operations  for
   MR6.0 -- April, 1977.

   Modified to  recognize  previous  store  operation,  by  Oris  D.
   Friesen -- Dec. 1977

   Modified by JA Weeldreyer to correct error in diagnosing  missing
   select clause -- March, 1978.

   Modified by O Friesen to set retrieve_flag -- April 1978.

   Modified by JA Weeldreyer to free old current  select  clause  in
   case of consecutive -currents -- August, 1978.

   Modified  by  JA  Weeldreyer  to  incorporate  MR7.0  changes  --
   September, 1978.

   Modified by Al Kepner, May  1  1979,  to  add  db_on  and  db_off
   entries for debugging.

   Modified by Al Kepner, June 1, 1979 to use select_area.

   Modified by Rickie E.  Brinegar  on  November  30,  1979  to  use
   mrds_debug_tool  switches  instead  of the entry points db_on and
   db_off.

   Modified by Jim Gray - - Feb. 1980, to add area_ptr parameter, to
   pass on to both select and where clause routines.

   Modified by Jim Gray - - April 1980, to capture  case  where  too
   many arguments were given in call to dsl_$retrieve/modify/delete.

   81-06-23 Jim Gray : changed trans_block to always call  optimize,
   even  if  where clause is present, instead of having where clause
   do it, in order to clarify module structure and program logic.

   81-06-26 Roger Lackey : to add code to  support  no_optimize  and
   print_search_order

   81-07-02    Jim     Gray     :     added     internal     routine
   get_relation_statistics   to   initialize   the   new  population
   statistics now saved in the rm_rel_info structure, to reduce  the
   number of calls made to mu_get_rel_size.

   81-07-06 Jim Gray : changed stategy for  updating  statistics  to
   take  into account number of S.E.'s, rather than tuple variables,
   and to update small relations on a per S.E. basis.

   81-11-03 Davids: Added  code  to  make  sure  that  a  non-simple
   selection expression, i.e. one containing set operations contains
   the correct number of simple SEs and set operators. This fixes TR
   11350

   82-09-24 Davids: Replaced the call to mu_get_rel_size with a call
   to mu_rel_statistics$record_statistics.

   82-10-18 Davids: modified to use the corrected parameter list for
   mu_rel_statistics$record_statistics

   83-02-21 Moberg: Fixed bug where -current always allowed modify and delete

   83-04-07 Davids: Explicitly declared the mod builtin function. Deleted
   declarations to the unused varaibles dup_keys, total_keys, and tuple_count.

   83-05-23 Harvey: Added code to support a shortened simple_typed_vector by
   keepting track of when a new retrieve happens (-another)

   84-07-19 Hergert: Modified call to set_user_vals because we pulled that
   routine out of mrds_dsl_select_clause and made it an external procedure.
   This was done as part of a performance improvement in the handling
   of retrieves with -another.

   84-07-26 Thanh Nguyen: Turn the valid retrieval bit (dbcb.val_rtrv) on
   for the retrieve with "-another", because this bit may be turned off by the
   previous delete with "-current".  This is the fix for TR #17643, problem
   number 122 in the mrds error list.

   84-08-24 Hergert: Added variable sex to use as template to overlay
   the selection expression. This was done so we could do a simple compare
   for "-another" (if sex="-another") instead of having to call
   mrds_dsl_get_token.

   84-09-15 Hergert: Added code to handle new keyword "-compiled" and 
   also code to handle the initial compiling of select expressions.

   85-04-14 Thanh Nguyen: Added code to save the transaction id (only when 
   DM file in used) for any new select expression and user started his own
   transaction.

   85-11-15 Hergert: Added code that saved txn_id when parsing
   a select set. This allows the user to use -another with a DM relation
   and select set.
/* INPUT CONDITIONS:

   dbcb_ptr points to a valid DBCB.

   se_ptr points to the beginning of the selection  expression to be translated.

   se_len is the number of characters in the selection expression.

   argp_ptr points to the first of a list of argument pointers for values to be plugged into the selection
   expression and to be used for the select list.

   descp_ptr points to a list of descriptor pointers corresponding to the argp_ptrs.

   num_args is the number of values specified.
*/

/* OUTPUT DEFINITIONS:

   If there are no errors, dbcb.pred_ptr, dbcb.select_ptr, dbcb.range_ptr, and dbcb.lit_ptr will point to tabular
   representations of the selection expression predicate, -select clause, -range clause, and literals, respectively.

   If an error is detected, any previous selection expression tables will be deleted, and dbcb.pred_ptr, dbcb.select_ptr,
   dbcb.range_ptr, and dbcb.lit_ptr will be set to null.

   argp_ptr, descp_ptr, and num_args will be updated to point to the first value not used by the selection
   expression, if there are no errors; else they will be undefined.

   code = 0;  if no errors are detected.

   code = mrds_error_$no_prior_se;  if "-another" was specified and no valid selection expression has been previously
   specified.

   code = mrds_error_$incomp_se; if -another has been specified for any caller other than retrieve.

   code = mrds_error_$missing_pred;  if no predicate was found where one was expected.

   code = mrds_error_$missing_select;  if no -select clause was found where one was expected.

   code = mrds_error_$missing_range;  if no -range clause was found where one was expected.

   code = something else;  if another error was detected by a subroutine.
*/

        if first_time_thru then do;			/* initialize options */
	  first_time_thru = "0"b;
	  unspec(options) = "0"b;				/* quickie init */
	  options.ot, options.error = "1"b;
        end;

        dbcb.no_optimize, dbcb.print_search_order, dbcb.another_flag,
	   dbcb.current_flag = "0"b;
        compiled_se_info_ptr = dbcb.compiled_se_info_ptr;
        x_pred_leaf_ptr = null;

        on cleanup call mrds_dsl_delete_se (dbcb_ptr, (caller), icode);

        i = verify (sex, white_space);
        if i ^= 0
        then
	   if index (substr (sex, i), "-another") = 1 then do;
						/* check for -another w/o whitespace */
	       if caller = mrds_data_$caller_compile
	       then call error (mrds_error_$inval_comp_expr);

	       if dbcb.range_ptr = null
	       then /* if no existing s.e. */
		  call error (mrds_error_$no_prior_se);
	       call mrds_dsl_set_user_vals$another (dbcb_ptr, area_ptr,
		  argp_ptr,
		  descp_ptr, num_args, icode);	/* reset select list */
	       if icode ^= 0 then call error (icode);
	       dbcb.another_flag = "1"b;		/* let everyone know this is -another */
	       dbcb.val_rtrv = "1"b;			/* and for sure this is a valid expression */
	       do i = 1 to dbcb.range_ptr -> range.num_vars;
		 dbcb.range_ptr -> range.tup_var (i).copy_for_current =
		      "0"b;
		 dbcb.range_ptr -> range.tup_var (i).copied_for_current =
		      "0"b;
	       end;
	       code = 0;				/* be nice to caller */
	       return;				/* nothing more to do */
	   end;					/* if -another */


	   else if index (substr (sex, i), "-compiled") = 1 then do;
						/* already translated */

		  if dbcb.compiled_se_info_ptr = null
		  then call error (mrds_error_$no_prior_se);

		  if caller = mrds_data_$caller_compile
		  then call error (mrds_error_$inval_comp_expr);

/* restore the saved  dbcb pointers */

		  se_index_ptr = argp_ptr -> ptr_template;
						/* get se_index; It better be the first arg in arg list */
		  argp_ptr = addrel (argp_ptr, 2);	/* adjust arglist to pass over se_iindex */
		  descp_ptr = addrel (descp_ptr, 2);	/* and descriptor list*/
		  num_args = num_args - 1;		/* one less argument now */
		  current_flag = "0"b;

						/* make sure we have good index */
		  if se_index > compiled_se_info.number_of_compiled_se |
		     se_index <= 0 then call error (mrds_error_$no_sel_exp);
		  if compiled_se_info.free (se_index)
		       then call error (mrds_error_$no_sel_exp);

		  dbcb.select_area_ptr =
		       compiled_se_info.se_info.saved_ptrs
		       .select_area_ptr (se_index);
		  dbcb.range_ptr =
		       compiled_se_info.se_info.saved_ptrs
		       .range_ptr (se_index);
		  dbcb.select_ptr =
		       compiled_se_info.se_info.saved_ptrs
		       .select_ptr (se_index);
		  dbcb.ti_ptr =
		       compiled_se_info.se_info.saved_ptrs
		       .ti_ptr (se_index);
		  dbcb.ss_ptr =
		       compiled_se_info.se_info.saved_ptrs
		       .ss_ptr (se_index);
		  dbcb.so_ptr =
		       compiled_se_info.se_info.saved_ptrs
		       .so_ptr (se_index);
		  dbcb.lit_ptr =
		       compiled_se_info.se_info.saved_ptrs
		       .lit_ptr (se_index);
		  dbcb.last_s_e_id_num =
		       compiled_se_info.se_info.se_id_num (se_index);
		  dbcb.dup_retain =
		       compiled_se_info.se_info.dup_retain (se_index);

		  dbcb.val_rtrv,			/* init valid. flags */
		       dbcb.val_dtr,
		       dbcb.new_select_expr = "1"b;

		  dbcb.non_shared_to_shared, dbcb.scopes_changed = "0"b;

		  if dbcb.ss_ptr ^= null
		  then dbcb.val_mod, dbcb.val_del = "0"b;
		  else dbcb.val_mod, dbcb.val_del = "1"b;


		  if compiled_se_info.x_leaf_ptr (se_index) ^= null
		  then do;			/* we have .x.s to fill in */
		      x_pred_leaf_ptr =
			 compiled_se_info.x_leaf_ptr (se_index);
						/* find the right predicate list */
		      if num_args < x_pred_leaf.number_of_x
		      then /* make sure we have enough args */
			 call error (mrds_error_$insuff_args);

		      str_size = "0"b;
		      on stringsize str_size = "1"b;

		      do i = 1 to x_pred_leaf.number_of_x;
			desc_ptr, x_pred_leaf.lit_desc_ptr = descp_ptr -> ptr_template;
			if descriptor.type = varying_bit_dtype
			     | descriptor.type = varying_char_dtype
			     then x_pred_leaf.lit_arg_ptr = addrel(argp_ptr -> ptr_template,-1); /* get the length too */
			else x_pred_leaf.lit_arg_ptr = argp_ptr -> ptr_template;
			argp_ptr = addrel (argp_ptr, 2);
						/* adjust arglist */
			descp_ptr = addrel (descp_ptr, 2);
						/* and descriptor list*/
			num_args = num_args - 1;	/* and arg count */

			if ^mu_valid_data_type$valid_scalar_data_type
			     (x_pred_leaf.lit_desc_ptr -> bit36)
			then call error (mrds_error_$inv_literal_type);

			lit_length = x_pred_leaf.info.lit_val_len (i);
			if x_pred_leaf.info.encode_proc (i) then do;
						/* if must encode */
			    if x_pred_leaf.lit_desc_ptr -> bit36 ^=
			         x_pred_leaf.info.encode_in_desc_ptr (i)
			         -> bit36 then do;	/* if must convert also */

			        if x_pred_leaf.info.encode_bit_len (i)
				   > 2376
			        then /* get some space */
				   /* 2376 = length of work_space in bits */
				   allocate encode_space
				        in (select_area);
			        else es_ptr = addr (work_space);
			        encode_space = "0"b;

			        call mu_convert$convert_data (x_pred_leaf
				   .lit_arg_ptr,
				   x_pred_leaf.lit_desc_ptr, es_ptr,
				   x_pred_leaf.info
				   .encode_in_desc_ptr (i), icode);
			        if icode ^= 0 then call error (icode);
			        if str_size
			        then call error (
				        mrds_error_$inv_comparison);

			        encode_arg_list.user_val_ptr = es_ptr;
			    end;
			    else encode_arg_list.user_val_ptr =
				    x_pred_leaf.lit_arg_ptr;

			    encode_arg_list.user_desc_ptr =
			         x_pred_leaf.encode_in_desc_ptr (i);

			    if x_pred_leaf.info.encode_in_desc_ptr (i)
			         -> descriptor.type =
			         varying_char_dtype
			         /* see if need to adjust ptr */
			         | x_pred_leaf.info
			         .encode_in_desc_ptr (i)
			         -> descriptor.type = varying_bit_dtype
			    then
			         encode_arg_list.user_val_ptr =
				    addr (encode_arg_list.user_val_ptr
				    -> varying.string);

			    encode_arg_list.db_desc_ptr =
			         x_pred_leaf.info
			         .encode_out_desc_ptr (i);

			    encode_arg_list.db_val_ptr =
			         x_pred_leaf.info.lit_val_ptr (i);

			    encode_arg_list.code_ptr = addr (icode);
			    encode_arg_list.coded_ptr = addr (FB35_DESC);
			    call cu_$generate_call (x_pred_leaf
			         .encode_entry (i),
			         addr (encode_arg_list));
			    if icode ^= 0 then call error (icode);
						/* encode the value */
			end;

			else do;			/* if not encoding */
			    if x_pred_leaf.lit_desc_ptr -> bit36 ^=
			         x_pred_leaf.info.encode_out_desc_ptr (i)
			         -> bit36 then do;	/* must convert */

			        call mu_convert$convert_data (x_pred_leaf
				   .lit_arg_ptr,
				   x_pred_leaf.lit_desc_ptr,
				   x_pred_leaf.info.lit_val_ptr (i),
				   x_pred_leaf.info
				   .encode_out_desc_ptr (i), icode);
			        if icode ^= 0 then call error (icode);
			        if str_size
			        then call error (
				        mrds_error_$inv_comparison);
			    end;
			    else x_pred_leaf.info.lit_val_ptr (i)
				    -> literal_bit_string =
				    x_pred_leaf.lit_arg_ptr
				    -> literal_bit_string;
			end;			/* if not encoding */
		      end;			/* do loop */
		      revert stringsize;
		  end;				/* if we have .x.'s */

		  call mrds_dsl_select_clause_$compiled_clause (dbcb_ptr,
		       area_ptr, (caller), argp_ptr, descp_ptr, num_args,
		       compiled_se_info.temp_rel_list_ptr (se_index),
		       current_flag, icode);
		  if icode ^= 0 then call error (icode);

		  if dbcb.ss_ptr = null
		  then dbcb.so_ptr -> search_ops.ic = 1;/* make sure the search program is reset */
		  else do;
		      ss_ptr = dbcb.ss_ptr;
		      do i = 1 to select_sets.nitems;
			select_sets.items.so_ptr (i) -> search_ops.ic =
			     1;
		      end;
		  end;
		  if dbcb.transactions_needed & dbcb.user_started_transaction then do;
		       call transaction_manager_$get_current_txn_id (mstxn_txn_id, icode);
		       if icode ^= dm_error_$no_current_transaction then
			  dbcb.se_transaction_id = mstxn_txn_id;
		       else call error (icode);
		  end;
		  else dbcb.se_transaction_id = "0"b;

		  return;
	        end;				/* -compiled */


	        else do;				/* process a selection expression */

		  if index (substr (sex, i), "-current") ^= 1 then do;
		      current_flag = "0"b;
		      call mrds_dsl_delete_se (dbcb_ptr, (caller), icode);
						/* delete prev. s.e. tables */
		      if icode ^= 0 then call error (icode);
		  end;
		  else current_flag = "1"b;

		  dbcb.val_rtrv,			/* init valid. flags */
		       dbcb.val_dtr,
		       dbcb.val_mod,
		       dbcb.val_del = "1"b;

		  if dbcb.transactions_needed
		       & dbcb.user_started_transaction then do;
		      call transaction_manager_$get_current_txn_id (
			 mstxn_txn_id, icode);
		      if icode ^= dm_error_$no_current_transaction
		      then
			 dbcb.se_transaction_id = mstxn_txn_id;
		      else call error(icode);
		  end;
		  else dbcb.se_transaction_id = "0"b;

		  call mrds_dsl_parser (dbcb_ptr, area_ptr, caller,
		       addr (options), se_ptr, se_len, argp_ptr, descp_ptr,
		       num_args, current_flag, icode);
		  if icode ^= 0 then call error (icode);

		  if options.pse
		  then call mu_print_error$print_se (se_ptr, se_len);

	        end;

        dbcb.prev_select = "0"b;			/* so as not to mess up -current */
        code = 0;					/* be nice to caller */

exit:
        return;

error:
    proc (cd);

/* Internal error procedure */

dcl     cd		 fixed bin (35);		/* internal status code */

        call mrds_dsl_delete_se (dbcb_ptr, (caller), code); /* if error, don't leave incomplete tables */
        code = cd;					/* pass bad news back to caller */
        go to exit;

    end error;

set_options:
    entry (mode_flags_ptr);

/* entry to set options from command level. pso_sw controls -pso in select
    expression. ot_sw controls -no_ot in select expression. pse_sw controls
    whether or not the selection expression gets printed out.
 */

        if first_time_thru then do;			/* initialize options */
	  first_time_thru = "0"b;
	  unspec(options) = "0"b;				/* quickie init */
	  options.ot, options.error = "1"b;
        end;

        if mode_flags.list_sw then do;			/* listing modes */
	  mode_flags.value.pso = options.pso;
	  mode_flags.value.pse = options.pse;
	  mode_flags.value.ot = options.ot;
	  mode_flags.value.force = options.force;
	  mode_flags.value.error = options.error;
        end;
        else do;					/* setting modes */
	  if mode_flags.selected.pso then options.pso = mode_flags.value.pso;
	  if mode_flags.selected.pse then options.pse = mode_flags.value.pse;
	  if mode_flags.selected.ot then options.ot = mode_flags.value.ot;
	  if mode_flags.selected.force
	  then options.force = mode_flags.value.force;
	  if mode_flags.selected.error
	  then options.error = mode_flags.value.error;
        end;

        return;

%include mrds_dbcb;
%page;
%include mrds_range;
%page;
%include mrds_select_sets;
%page;
%include mdbm_seg_area;
%page;
%include mrds_select_area;
%page;
%include mrds_compiled_se_info;
%page;
%include mrds_search_ops;
%page;
%include mdbm_descriptor;
%page;
%include std_descriptor_types;
%page;
%include mrds_se_options;

dcl     FB35_DESC		 bit (36) aligned static options (constant)
			 init ("404000000043"b3);	/* descriptor for decode return code */
dcl     addr		 builtin;
dcl     addrel		 builtin;
dcl     area_ptr		 ptr;
dcl     argp_ptr		 ptr;			/* Input -- pointer to arg pointers */
dcl     bit36		 bit (36) based;
dcl     caller		 fixed bin (35) parameter;
dcl     cleanup		 condition;
dcl     code		 fixed bin (35);		/* Output -- return code */
dcl     cu_$generate_call	 entry (entry, ptr);
dcl     current_flag	 bit (1) aligned;
dcl     descp_ptr		 ptr;			/* Input -- pointer to arg descriptor pointers */
dcl     dm_error_$no_current_transaction
			 fixed bin (35) external static;
dcl     1 encode_arg_list	 aligned,			/* arg list for encode proc. */
	2 nargs		 fixed bin (17) unal init (6),
	2 code		 fixed bin (17) unal init (4),
	2 ndescs		 fixed bin (17) unal init (6),
	2 pad		 fixed bin (17) unal init (0),
	2 user_val_ptr	 ptr,
	2 db_val_ptr	 ptr,
	2 code_ptr	 ptr,
	2 user_desc_ptr	 ptr,
	2 db_desc_ptr	 ptr,
	2 coded_ptr	 ptr;
dcl     encode_space	 bit (x_pred_leaf.info.encode_bit_len (i))
			 based (es_ptr);		/* for conversions before encoding */
dcl     es_ptr		 ptr;
dcl     first_time_thru	 bit (1) aligned internal static init ("1"b);
dcl     fixed		 builtin;
dcl     i			 fixed bin;		/* standard loop variable */
dcl     icode		 fixed bin (35);		/* internal status code */
dcl     index		 builtin;
dcl     lit_length		 fixed bin;		/* length of the literal in lit pool */
dcl     literal_bit_string	 bit (lit_length) based;	/* used to install the .x. literal at run time */
dcl     mrds_data_$caller_compile
			 fixed bin (35) external static;
dcl     mrds_data_$max_attributes
			 fixed bin (35) external static;
dcl     mrds_data_$max_id_len	 fixed bin (35) ext;	/* longest tuple variable length */
dcl     mrds_data_$max_select_items
			 fixed bin (35) external static;
dcl     mrds_dsl_delete_se	 entry (ptr, fixed bin (35), fixed bin (35));
dcl     mrds_dsl_parser	 entry (ptr, ptr, fixed bin (35), ptr, ptr,
			 fixed bin, ptr, ptr, fixed bin, bit (1) aligned,
			 fixed bin (35));
dcl     mrds_dsl_select_clause_$compiled_clause
			 entry (ptr, ptr, fixed bin (35), ptr, ptr,
			 fixed bin, ptr, bit (1) aligned, fixed bin (35))
			 ;
dcl     mrds_dsl_set_user_vals$another
			 entry (ptr, ptr, ptr, ptr, fixed bin,
			 fixed bin (35));
dcl     mrds_error_$insuff_args
			 fixed bin (35) external static;
dcl     mrds_error_$inv_comparison
			 fixed bin (35) external static;
dcl     mrds_error_$inv_literal_type
			 fixed bin (35) external static;
dcl     mrds_error_$inval_comp_expr
			 fixed bin (35) external static;
dcl     mrds_error_$no_prior_se
			 fixed bin (35) external static;
dcl     mrds_error_$no_sel_exp fixed bin (35) external static;
dcl     mstxn_txn_id	 bit (36) aligned;
dcl     mu_convert$convert_data
			 entry (ptr, ptr, ptr, ptr, fixed bin (35));
dcl     mu_print_error$print_se
			 entry (ptr, fixed bin);
dcl     mu_valid_data_type$valid_scalar_data_type
			 entry (bit (36)) returns (bit (1) aligned);
dcl     null		 builtin;
dcl     num_args		 fixed bin;		/* Input -- number of value args */
dcl     1 options		 aligned like option_list internal static;
dcl     ptr_template	 ptr based;		/* template for getting args off arglist */
dcl     rel		 builtin;
dcl     se_index		 fixed bin (35) based (se_index_ptr);
						/* se_index specified by caller */
dcl     se_index_ptr	 ptr;			/* pointer to selection expression index for compiled se */
dcl     se_len		 fixed bin;		/* Input -- char. length of selection expression */
dcl     se_ptr		 ptr;			/* Input -- pointer to selection expression */
dcl     sex		 char (se_len) based (se_ptr);/* template to overlay the se */
dcl     str_size		 bit;
dcl     stringsize		 condition;
dcl     substr		 builtin;
dcl     sys_info$max_seg_size	 fixed bin (35) external static;
dcl     transaction_manager_$get_current_txn_id
			 entry (bit (36) aligned, fixed bin (35));
dcl     unspec		 builtin;
dcl     1 varying		 unaligned based,		/* template of varying string */
	2 length		 fixed bin (35),		/* length word */
	2 string		 char (0);		/* string begins here */
dcl     verify		 builtin;
dcl     white_space		 char (3) aligned internal static
			 options (constant) init (" 	
");						/* SP TAB NL */
dcl     work_space		 (33) fixed bin (71);

    end mrds_dsl_translate;
