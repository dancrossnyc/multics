/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

mu_compare_values: compare_data_values: proc (value1_ptr, desc1_ptr, value2_ptr, desc2_ptr, operator, result, code);

/* DESCRIPTION */

/*
   This routine accepts two pointers to some data values and two pointers to the
   Multics descriptors describing those values, it compares them with respect
   to the input relational operator. Eithr a result ("1"b or "0"b) or an error code
   is returned. Character strings may be compared only against other character
   strings either or both of which may be varying. The same for bit strings. Complex
   numeric data types may be compared only against other complex data types, also
   only the operators equal and not_equal may be used, any other operator will
   cause an error. Real numeric data types may be compared only against other real
   numeric data types. Any other combination of data types will generate an error.
   Numeric comparisons are performed by converting the operands into complex/real
   float decimal (59).

   All errors are reported to the user via sub_err_ as well as in the returned
   error code.

   The internal procedure error performs a non-local goto to compare_values_exit
   to exit this routine.


   
   
   HISTORY:

   16-aug_79 NSDavids Original coding

   Modified by Jim Gray - - Dec. 1979, to add  packed  decimal  data
   type capability

   Modified  March  25,  1980  by  R.  Lackey  to  remove  calls  to
   mdbm_util_

   Modified November 24, 1980 by M.  Pierret  to  align  result  for
   efficiency

   81-05-19 Jim Gray : changed the "&" to "|"  in  the  complex  and
   real  data  type  cases,  so  that  any  complex  or  real number
   comparisons can be handled.

   81-05-20 Jim Gray : added a case for doing bit-char type compares
   by  converting  the  bit  operand  to char, and doing a char-char
   compare. Also added data type to  error  message  for  conversion
   errors.

   81-05-23 Jim Gray : added  special  case  for  fixed  bin,  equal
   scale, comaprisons, for performance improvment, by avoiding calls
   to mu_convert for this case. This  was  originally  coded  by  M.
   Pierret.  I adopted it, and made some corrections to the original
   code, and put it in the subroutine compare_fb_fb.

   81-05-23  B  Jim  Gray  :  added  special  case  for  float   bin
   comparisons,  done  in  a  manner  similar  to the fixed bin case
   above.

   83-06-13 Ron Harvey : changed addrel (addr (char_temp), 1)  to be
   addrel (char_temp_ptr, 1) instead. This alleviates a compiler bug
   (phx15402).

*/

/* PARAMETERS */

	dcl     value1_ptr		 ptr;		/* (input) pointer to first operand */
	dcl     desc1_ptr		 ptr;		/* (input) pointer to descriptor of first operand */
	dcl     value2_ptr		 ptr;		/* (input) ditto for the second operand */
	dcl     desc2_ptr		 ptr;		/* (input) ditto ditto */
	dcl     operator		 fixed bin;	/* (input) the relational operator */
						/* 1 = */
						/* 2 ^= */
						/* 3 < */
						/* 4 <= */
						/* 5 > */
						/* 6 >= */
	dcl     result		 bit (1) aligned;	/* (output) true if comparison was true */
	dcl     code		 fixed bin (35);	/* (output) error code */

/* BASED */

	dcl     01 varying_string	 based,
		02 size		 bit (36),	/* first word is length */
		02 data		 bit (36);	/* rest is data */

	dcl     01 desc		 based,		/* a multics descriptor */
		02 version	 bit (1) unal,
		02 type		 bit (6) unal,
		02 packed		 bit (1) unal,
		02 dims		 bit (4) unal,
		02 size,
		  03 scale	 bit (12) unal,
		  03 precision	 bit (12) unal;

	dcl     desc1_type		 unsigned fixed bin (6) based (addr (desc1.type)) unal;
	dcl     desc2_type		 unsigned fixed bin (6) based (addr (desc2.type)) unal;

	declare bit_temp		 bit (bit_temp_size) based; /* overlay for doing bit-char compares */

	declare 1 overlay		 based,		/* overlay for count field of varying string */
		2 unused		 bit (12),
		2 fb24		 bit (24);	/* only need 24 bits worth */

/* CONSTANTS */

	dcl     CHAR		 bit (6) init ("010101"b) internal static options (constant);
	dcl     CHAR_VAR		 bit (6) init ("010110"b) internal static options (constant);
	dcl     BIT		 bit (6) init ("010011"b) internal static options (constant);
	dcl     BIT_VAR		 bit (6) init ("010100"b) internal static options (constant);
	dcl     CFLD59A_DESC	 bit (36) init ("100110000000000000000000000000111011"b) internal static options (constant);
	dcl     RFLD59A_DESC	 bit (36) init ("100101000000000000000000000000111011"b) internal static options (constant);
	dcl     REAL		 (63) bit (1) internal static options (constant) /* true if tuple is real */
				 init ((4) ("1"b), (4) ("0"b), (2) ("1"b), (2) ("0"b), (30) ("0"b), (2) ("1"b), (19) ("0"b));
	dcl     COMPLEX		 (63) bit (1) internal static options (constant) /* true if type is complex */
				 init ((4) ("0"b), (4) ("1"b), (2) ("0"b), (2) ("1"b), (32) ("0"b), (2) ("1"b), (17) ("0"b));
	declare FIXED_BIN		 (63) bit (1) int static options (constant) /* true if fixed bin value */
				 init ((2) ("1"b), (61) ("0"b));
	declare FLOAT_BIN		 (63) bit (1) int static options (constant) /* true if float bin value */
				 init ((2) ("0"b), (2) ("1"b), (59) ("0"b));
	declare mu_display_descriptor	 entry (ptr) returns (char (120) varying);
	dcl     mrds_error_$inv_comparison fixed bin (35) external static;
	dcl     mrds_error_$inv_operator fixed bin (35) external static;

/* AUTOMATIC */

	dcl     01 desc1		 like desc;
	dcl     01 desc2		 like desc;
	dcl     operand1_ptr	 ptr;		/* pointer toward what will be used as first operand */
	dcl     operand2_ptr	 ptr;		/* pointer toward what will be used as second operand */
	dcl     cfld59a1		 complex float decimal (59) aligned; /* place for the first operand if its complex */
	dcl     cfld59a2		 complex float decimal (59) aligned; /* ditto for the second operand */
	dcl     rfld59a1		 real float decimal (59) aligned; /* place for the first operand if its real */
	dcl     rfld59a2		 real float decimal (59) aligned; /* ditto for the second operand */
	declare bit_temp_size	 fixed bin (24);	/* bit length of overlay for bit_char compare */
	declare char_temp		 char (4096) varying; /* place for char version of bit string */
	declare char_temp_ptr	 ptr;		/* will be address of char_temp */
	declare char_temp_size	 bit (24);	/* temp for char-char compare routine parameter */

/* MRDS ROUTINES */

	dcl     mu_convert		 entry (ptr, ptr, ptr, ptr, fixed bin (35));

	declare (addr, addrel, bin, char, copy, ltrim, null, string, substr, unspec) builtin;

	code = 0;					/* make sure we don't return garbage */
	result = "0"b;


	desc1 = desc1_ptr -> desc;			/* get our own copy of the descriptors */
	desc2 = desc2_ptr -> desc;

	if desc1.type = CHAR_VAR | desc1.type = BIT_VAR	/* make varying strings look like non-varying */
	then do;
		operand1_ptr = addr (value1_ptr -> varying_string.data); /* move operand pointer over one word */
		string (desc1.size) = substr (value1_ptr -> varying_string.size, 13);
						/* modify descriptor to show accutal string length */
		desc1_type = desc1_type - 1;		/* modify type to non-varying */
	     end;
	else operand1_ptr = value1_ptr;

	if desc2.type = CHAR_VAR | desc2.type = BIT_VAR
	then do;
		operand2_ptr = addr (value2_ptr -> varying_string.data);
		string (desc2.size) = substr (value2_ptr -> varying_string.size, 13);
		desc2_type = desc2_type - 1;
	     end;
	else operand2_ptr = value2_ptr;

	if operator < 1 | operator > 6		/* make sure we have a legal operator */
	then call error (mrds_error_$inv_operator, ltrim (char (operator)) || " is not a valid operator code");



/* Do the comparison */


	if desc1.type = CHAR & desc2.type = CHAR
	then call compare_char_char (operand1_ptr, string (desc1.size), operand2_ptr, string (desc2.size),
		operator, result);


	else
	     if desc1.type = BIT & desc2.type = BIT
	then call compare_bit_bit (operand1_ptr, string (desc1.size), operand2_ptr, string (desc2.size), operator, result);


	else
	     if COMPLEX (desc1_type) | COMPLEX (desc2_type) /* CHANGE 81-05-19 : allow any complex number comparison */
	then do;
		call mu_convert (operand1_ptr, addr (desc1), addr (cfld59a1), addr (CFLD59A_DESC), code);
		if code ^= 0
		then call error (code, "Could not convert a " || mu_display_descriptor (desc1_ptr) ||
			" value to a complex float decimal (59) data type");
		call mu_convert (operand2_ptr, addr (desc2), addr (cfld59a2), addr (CFLD59A_DESC), code);
		if code ^= 0
		then call error (code, "Could not convert a " ||
			mu_display_descriptor (desc2_ptr) || " value to a complex float decimal (59) data type");
		call compare_c59_c59 (cfld59a1, cfld59a2, operator, result);
	     end;


	else
	     if REAL (desc1_type) | REAL (desc2_type)	/* CHANGE 81-05-19 : allow any real number comparison */
	then do;

/* BEGIN CHANGE 81-05-23 ********************************************** */

		if FIXED_BIN (desc1_type) & FIXED_BIN (desc2_type) &
		     desc1.scale = desc2.scale then
		     call compare_fb_fb ();
		else if FLOAT_BIN (desc1_type) & FLOAT_BIN (desc2_type) then
		     call compare_flb_flb ();

/* END CHANGE 81-05-23 ************************************************ */

		else do;
			call mu_convert (operand1_ptr, addr (desc1), addr (rfld59a1), addr (RFLD59A_DESC), code);
			if code ^= 0
			then call error (code, "Could not convert a " || mu_display_descriptor (desc1_ptr) ||
				" value to a real float decimal (59) data type");
			call mu_convert (operand2_ptr, addr (desc2), addr (rfld59a2), addr (RFLD59A_DESC), code);
			if code ^= 0
			then call error (code, "Could not convert a " ||
				mu_display_descriptor (desc2_ptr) || " value to a real float decimal (59) data type");
			call compare_r59_r59 (rfld59a1, rfld59a2, operator, result);
		     end;
	     end;


/* BEGIN CHANGE 81-05-20 ******************************************** */

	else if (desc1.type = BIT & desc2.type = CHAR) | (desc1.type = CHAR & desc2.type = BIT) then do;

/* do bit-char comparisons as char-char comaprisons,
   after converting the bit oeprand to character */

		if desc1.type = BIT then do;
			bit_temp_size = bin (string (desc1.size));
			char_temp = char (operand1_ptr -> bit_temp);
			char_temp_size = addr (char_temp) -> overlay.fb24;
			char_temp_ptr = addr (char_temp);
			call compare_char_char (addrel (char_temp_ptr, 1), char_temp_size,
			     operand2_ptr, string (desc2.size),
			     operator, result);
		     end;
		else do;
			bit_temp_size = bin (string (desc2.size));
			char_temp = char (operand2_ptr -> bit_temp);
			char_temp_size = addr (char_temp) -> overlay.fb24;
			char_temp_ptr = addr (char_temp);
			call compare_char_char (operand1_ptr, string (desc1.size),
			     addrel (char_temp_ptr, 1), char_temp_size,
			     operator, result);
		     end;
	     end;

/* END CHANGE 81-05-20 *********************************************** */


	else call error (mrds_error_$inv_comparison, "The data types " || mu_display_descriptor (desc1_ptr) ||
		" and " || mu_display_descriptor (desc2_ptr) || " cannot be compared");


compare_values_exit:
	return;

compare_char_char: proc (c_operand1_ptr, c_operand1_size, c_operand2_ptr, c_operand2_size, c_operator, c_result);

/* PARAMETERS */

	dcl     c_operand1_ptr	 ptr;
	dcl     c_operand1_size	 bit (24);
	dcl     c_operand2_ptr	 ptr;
	dcl     c_operand2_size	 bit (24);
	dcl     c_operator		 fixed bin;
	dcl     c_result		 bit (1) aligned;

/* BASED */

	dcl     c_operand1		 char (bin (c_operand1_size)) based (c_operand1_ptr);
	dcl     c_operand2		 char (bin (c_operand2_size)) based (c_operand2_ptr);


	goto c_compare (c_operator);			/* value of c_operator was checked when
						   compare_values was entered */


c_compare (1):					/* operator: = */
	if c_operand1 = c_operand2
	then c_result = "1"b;
	else c_result = "0"b;
	goto c_exit;

c_compare (2):					/* operator: ^= */
	if c_operand1 ^= c_operand2
	then c_result = "1"b;
	else c_result = "0"b;
	goto c_exit;

c_compare (3):					/* operator: < */
	if c_operand1 < c_operand2
	then c_result = "1"b;
	else c_result = "0"b;
	goto c_exit;

c_compare (4):					/* operator: <= */
	if c_operand1 <= c_operand2
	then c_result = "1"b;
	else c_result = "0"b;
	goto c_exit;

c_compare (5):					/* operator: > */
	if c_operand1 > c_operand2
	then c_result = "1"b;
	else c_result = "0"b;
	goto c_exit;

c_compare (6):					/* operator: >= */
	if c_operand1 >= c_operand2
	then c_result = "1"b;
	else c_result = "0"b;
	goto c_exit;


c_exit:	return;

     end /* compare_char_char */;

compare_bit_bit: proc (b_operand1_ptr, b_operand1_size, b_operand2_ptr, b_operand2_size, b_operator, b_result);

/* PARAMETERS */

	dcl     b_operand1_ptr	 ptr;
	dcl     b_operand1_size	 bit (24);
	dcl     b_operand2_ptr	 ptr;
	dcl     b_operand2_size	 bit (24);
	dcl     b_operator		 fixed bin;
	dcl     b_result		 bit (1) aligned;

/* BASED */

	dcl     b_operand1		 bit (bin (b_operand1_size)) based (b_operand1_ptr);
	dcl     b_operand2		 bit (bin (b_operand2_size)) based (b_operand2_ptr);


	goto b_compare (b_operator);			/* value of b_operator was checked when
						   compare_values was entered */


b_compare (1):					/* operator: = */
	if b_operand1 = b_operand2
	then b_result = "1"b;
	else b_result = "0"b;
	goto b_exit;

b_compare (2):					/* operator: ^= */
	if b_operand1 ^= b_operand2
	then b_result = "1"b;
	else b_result = "0"b;
	goto b_exit;

b_compare (3):					/* operator: < */
	if b_operand1 < b_operand2
	then b_result = "1"b;
	else b_result = "0"b;
	goto b_exit;

b_compare (4):					/* operator: <= */
	if b_operand1 <= b_operand2
	then b_result = "1"b;
	else b_result = "0"b;
	goto b_exit;

b_compare (5):					/* operator: > */
	if b_operand1 > b_operand2
	then b_result = "1"b;
	else b_result = "0"b;
	goto b_exit;

b_compare (6):					/* operator: >= */
	if b_operand1 >= b_operand2
	then b_result = "1"b;
	else b_result = "0"b;
	goto b_exit;


b_exit:	return;

     end /* compare_bit_bit */;

compare_c59_c59: proc (cx_operand1, cx_operand2, cx_operator, cx_result);

/* PARAMETERS */

	dcl     cx_operand1		 complex float decimal (59) aligned;
	dcl     cx_operand2		 complex float decimal (59) aligned;
	dcl     cx_operator		 fixed bin;
	dcl     cx_result		 bit (1) aligned;



	goto cx_compare (cx_operator);		/* value of cx_operator was checked when
						   compare_values was entered */


cx_compare (1):					/* operator: = */
	if cx_operand1 = cx_operand2
	then cx_result = "1"b;
	else cx_result = "0"b;
	goto cx_exit;

cx_compare (2):					/* operator: ^= */
	if cx_operand1 ^= cx_operand2
	then cx_result = "1"b;
	else cx_result = "0"b;
	goto cx_exit;

cx_compare (3):					/* operator: < */
	call error (mrds_error_$inv_operator, "The relational operator < is not allowed for complex data types");
	goto cx_exit;

cx_compare (4):					/* operator: <= */
	call error (mrds_error_$inv_operator, "The relational operator <= is not allowed for complex data types");
	goto cx_exit;

cx_compare (5):					/* operator: > */
	call error (mrds_error_$inv_operator, "The relational operator > is not allowed for complex data types");
	goto cx_exit;

cx_compare (6):					/* operator: >= */
	call error (mrds_error_$inv_operator, "The relational operator >= is not allowed for complex data types");
	goto cx_exit;


cx_exit:	return;

     end /* compare_c59_c59 */;

compare_r59_r59: proc (r_operand1, r_operand2, r_operator, r_result);

/* PARAMETERS */

	dcl     r_operand1		 real float decimal (59) aligned;
	dcl     r_operand2		 real float decimal (59) aligned;
	dcl     r_operator		 fixed bin;
	dcl     r_result		 bit (1) aligned;



	goto r_compare (r_operator);			/* value of r_operator was checked when
						   compare_values was entered */


r_compare (1):					/* operator: = */
	if r_operand1 = r_operand2
	then r_result = "1"b;
	else r_result = "0"b;
	goto r_exit;

r_compare (2):					/* operator: ^= */
	if r_operand1 ^= r_operand2
	then r_result = "1"b;
	else r_result = "0"b;
	goto r_exit;

r_compare (3):					/* operator: < */
	if r_operand1 < r_operand2
	then r_result = "1"b;
	else r_result = "0"b;
	goto r_exit;

r_compare (4):					/* operator: <= */
	if r_operand1 <= r_operand2
	then r_result = "1"b;
	else r_result = "0"b;
	goto r_exit;

r_compare (5):					/* operator: > */
	if r_operand1 > r_operand2
	then r_result = "1"b;
	else r_result = "0"b;
	goto r_exit;

r_compare (6):					/* operator: >= */
	if r_operand1 >= r_operand2
	then r_result = "1"b;
	else r_result = "0"b;
	goto r_exit;


r_exit:	return;

     end /* compare_r59_r59 */;

/* BEGIN CHANGE 81-05-23 **************************************************** */

compare_fb_fb: procedure ();

/* Comparison of special cased fixed binary values, with equal scales */

	declare fb35a		 fixed bin (35) aligned based; /* for picking up packed, with prec < 36 */
	declare fb71a		 fixed bin (71) aligned based; /* for picking up packed, with prec < 71, but >= 36 */
	declare fixed_bin_operand1	 fixed bin (71);	/* first value to compare */
	declare fixed_bin_operand2	 fixed bin (71);	/* second value to compare */
	declare bit_operand1	 bit (bit_operand1_len) based (operand1_ptr); /* gets significant digits */
	declare bit_operand2	 bit (bit_operand2_len) based (operand2_ptr); /* gets significant digits */
	declare bit_operand1_len	 fixed bin;	/* length of significant digit portion */
	declare bit_operand2_len	 fixed bin;	/* length of significant digit portion */

	if desc1.packed
	then do;
		bit_operand1_len = bin (desc1.precision) + 1;
		if substr (bit_operand1, 1, 1)
		then unspec (fixed_bin_operand1) = copy ("1"b, 71 - bin (desc1.precision)) || bit_operand1;
		else unspec (fixed_bin_operand1) = copy ("0"b, 71 - bin (desc1.precision)) || bit_operand1;
	     end;
	else if bin (desc1.precision) < 36
	then fixed_bin_operand1 = operand1_ptr -> fb35a;
	else fixed_bin_operand1 = operand1_ptr -> fb71a;

	if desc2.packed
	then do;
		bit_operand2_len = bin (desc2.precision) + 1;
		if substr (bit_operand2, 1, 1)
		then unspec (fixed_bin_operand2) = copy ("1"b, 71 - bin (desc2.precision)) || bit_operand2;
		else unspec (fixed_bin_operand2) = copy ("0"b, 71 - bin (desc2.precision)) || bit_operand2;
	     end;
	else if bin (desc2.precision) < 36
	then fixed_bin_operand2 = operand2_ptr -> fb35a;
	else fixed_bin_operand2 = operand2_ptr -> fb71a;



	goto FB_COMPARE (operator);

FB_COMPARE (1):					/* operator: = */
	if fixed_bin_operand1 = fixed_bin_operand2
	then result = "1"b;
	else result = "0"b;
	goto END_FB_COMPARE;

FB_COMPARE (2):					/* operator: ^= */
	if fixed_bin_operand1 ^= fixed_bin_operand2
	then result = "1"b;
	else result = "0"b;
	goto END_FB_COMPARE;

FB_COMPARE (3):					/* operator: < */
	if fixed_bin_operand1 < fixed_bin_operand2
	then result = "1"b;
	else result = "0"b;
	goto END_FB_COMPARE;

FB_COMPARE (4):					/* operator: <= */
	if fixed_bin_operand1 <= fixed_bin_operand2
	then result = "1"b;
	else result = "0"b;
	goto END_FB_COMPARE;

FB_COMPARE (5):					/* operator: > */
	if fixed_bin_operand1 > fixed_bin_operand2
	then result = "1"b;
	else result = "0"b;
	goto END_FB_COMPARE;

FB_COMPARE (6):					/* operator: >= */
	if fixed_bin_operand1 >= fixed_bin_operand2
	then result = "1"b;
	else result = "0"b;
	goto END_FB_COMPARE;

END_FB_COMPARE:

     end;

/* END CHANGE 81-05-23 ************************************************** */

/* BEGIN CHANGE 81-05-23 B **************************************************** */

compare_flb_flb: procedure ();

/* Comparison of special cased float binary values, with equal scales */

	declare flb27a		 float bin (27) aligned based; /* for picking up packed, with prec <= 27 */
	declare flb63a		 float bin (63) aligned based; /* for picking up packed, with prec < 63, but >= 27 */
	declare float_bin_operand1	 float bin (63);	/* first value to compare */
	declare float_bin_operand2	 float bin (63);	/* second value to compare */
	declare 1 bit_operand1	 unal based (operand1_ptr), /* gets significant digits */
		2 exponent	 bit (8) unal,
		2 mantissa	 bit (bit_operand1_len);
	declare 1 bit_operand2	 unal based (operand2_ptr), /* gets significant digits */
		2 exponent	 bit (8) unal,
		2 mantissa	 bit (bit_operand2_len);
	declare bit_operand1_len	 float bin;	/* length of significant digit portion */
	declare bit_operand2_len	 float bin;	/* length of significant digit portion */

	if desc1.packed
	then do;
		bit_operand1_len = bin (desc1.precision) + 1;
		if substr (bit_operand1.mantissa, 1, 1)
		then unspec (float_bin_operand1) = string (bit_operand1) || copy ("1"b, 63 - bin (desc1.precision));
		else unspec (float_bin_operand1) = string (bit_operand1) || copy ("0"b, 63 - bin (desc1.precision));
	     end;
	else if bin (desc1.precision) <= 27
	then float_bin_operand1 = operand1_ptr -> flb27a;
	else float_bin_operand1 = operand1_ptr -> flb63a;

	if desc2.packed
	then do;
		bit_operand2_len = bin (desc2.precision) + 1;
		if substr (bit_operand2.mantissa, 1, 1)
		then unspec (float_bin_operand2) = string (bit_operand2) || copy ("1"b, 63 - bin (desc2.precision));
		else unspec (float_bin_operand2) = string (bit_operand2) || copy ("0"b, 63 - bin (desc2.precision));
	     end;
	else if bin (desc2.precision) <= 27
	then float_bin_operand2 = operand2_ptr -> flb27a;
	else float_bin_operand2 = operand2_ptr -> flb63a;



	goto FLB_COMPARE (operator);

FLB_COMPARE (1):					/* operator: = */
	if float_bin_operand1 = float_bin_operand2
	then result = "1"b;
	else result = "0"b;
	goto END_FLB_COMPARE;

FLB_COMPARE (2):					/* operator: ^= */
	if float_bin_operand1 ^= float_bin_operand2
	then result = "1"b;
	else result = "0"b;
	goto END_FLB_COMPARE;

FLB_COMPARE (3):					/* operator: < */
	if float_bin_operand1 < float_bin_operand2
	then result = "1"b;
	else result = "0"b;
	goto END_FLB_COMPARE;

FLB_COMPARE (4):					/* operator: <= */
	if float_bin_operand1 <= float_bin_operand2
	then result = "1"b;
	else result = "0"b;
	goto END_FLB_COMPARE;

FLB_COMPARE (5):					/* operator: > */
	if float_bin_operand1 > float_bin_operand2
	then result = "1"b;
	else result = "0"b;
	goto END_FLB_COMPARE;

FLB_COMPARE (6):					/* operator: >= */
	if float_bin_operand1 >= float_bin_operand2
	then result = "1"b;
	else result = "0"b;
	goto END_FLB_COMPARE;

END_FLB_COMPARE:

     end;

/* END CHANGE 81-05-23 B ************************************************** */

error: proc (error_code, message);

/* PARAMETERS */

	dcl     error_code		 fixed bin (35);
	dcl     message		 char (*);


/* MULTICS ROUTINES */

	dcl     sub_err_		 entry options (variable);


/* AUTOMATIC */

	dcl     retval		 fixed bin (35);	/* needed to make sub_err_ happy */



	code = error_code;				/* code is global */

	call sub_err_ (error_code, "compare_value", "c", null (), retval, message);

	goto compare_values_exit;			/* NON LOCAL GOTO TO EXIT COMPARE_VALUES */

     end /* error */;






     end /* mu_compare_values */;
