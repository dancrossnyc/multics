/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* HISTORY:

   Originally written by Jim Gray - - January 1980

*/

mu_trim_descriptor: trim_descriptor: procedure (character_descriptor) returns (char (*));

/* DESCRIPTION:

   this routine takes the character form of the descriptor as returned
   from mu_display_descriptor, and puts it in it's shortest possible form,
   by trimming comments, using short forms of keywords, and omitting
   keywords when defaults apply.
   NOTE: without array dimensions, the maximum input length from mu_display_descriptor
   is about 77 characters, the maximum output from this routine is about 29 characters

*/

/* PARAMETERS:

   character_descriptor - - (input) char(120) varying, the output from mu_display_descriptor,
   the character form of the descriptor declaration attributes

   trimmed_descriptor - - (output) char(*), the reduced, shorted form of the character form of the
   descriptor in terms of declaration attributes.

*/

/* get local version of declaration attributes */

	desc = character_descriptor;

/* determine data catagory */

	i = index (desc, "char");
	j = index (desc, "bit");
	h = index (desc, "/*");			/* start of comment, possibly containing "bit" */

/* do strings if char or bit keyword found */

	if i ^= 0 | (j ^= 0 & h = 0) then do;		/* string data types */

/* check for long character keyword */

		g = index (desc, "character");
		if g = 0 then ;
		else substr (desc, g + 4) = substr (desc, g + 9); /* replace character with char */

/* check for varying attributes */
		k = index (desc, "var");
		l = index (desc, "nonvar");
		m = index (desc, "ying");

		if k = 0 then ;			/* no varying attribute present */
		else if l ^= 0 then do;		/* nonvarying attribute present, remove it since default */
			if m = 0 then /* short form nonvar removed */
			     substr (desc, l) = substr (desc, l + 6);
			else substr (desc, l) = substr (desc, l + 10); /* long form nonvarying removed */
		     end;
		else do;				/* varying attribute present, shorten it */
			if m = 0 then ;		/* already short */
			else substr (desc, k + 3) = substr (desc, k + 7); /* shorten varying to var */
		     end;

/* check for alignment attribute */

		n = index (desc, "aligned");
		o = index (desc, "unal");

		if n = 0 then ;			/* no alignment attribute */
		else if o = 0 then do;		/* aligned, leave alone, unless varying */
			if k = 0 | l ^= 0 then ;	/* varying not present */
			else substr (desc, n) = substr (desc, n + 7); /* remove varying default of aligned */
		     end;
		else substr (desc, o) = substr (desc, o + 9); /* unaligned, remove since default */

	     end;
	else do;

/* do numbers if real or complex keyword found */

		p = index (desc, "real");
		q = index (desc, "complex");

		if p + q = 0 then ;			/* already shortened, or not a number */
		else do;				/* number types */

/* get rid of default real attribute */

			if p = 0 then ;
			else substr (desc, p) = substr (desc, p + 4);

/* shorten complex keyword */

			if q = 0 then ;
			else substr (desc, q) = "cplx" || substr (desc, q + 7);

/* use short forms of decimal/binary keywords */

			r = index (desc, "binary");
			s = index (desc, "decimal");

			if r = 0 then ;
			else substr (desc, r + 3) = substr (desc, r + 6); /* use bin for binary */

			if s = 0 then ;
			else substr (desc, s + 3) = substr (desc, s + 7); /* use dec for decimal */

/* get rid of default 0 scale */

			t = index (desc, ",0)");
			if t = 0 then ;
			else substr (desc, t) = substr (desc, t + 2);

/* check for alignment attribute */

			v = index (desc, "aligned");
			w = index (desc, "unal");

			if v = 0 then ;		/* nothing to be done */
			else if w ^= 0 then
			     substr (desc, w + 4) = substr (desc, w + 9); /* shorten unaligned to unal */
			else substr (desc, v) = substr (desc, v + 7); /* remove default aligned */

/* strip off any comments */

			h = index (desc, "/*");
			u = index (desc, "*/");
			if h = 0 | u = 0 then ;
			else substr (desc, h - 1) = substr (desc, u + 2);

		     end;

	     end;

/* return the modified descriptor string */

	desc = rtrim (ltrim (desc));

	return (desc);

	declare (g, h, i, j, k, l, m, n, o,
	        p, q, r, s, t, u, v, w) fixed bin (24);	/* indexes into descriptor string */
	declare desc		 char (120) varying;/* local version of descriptor string */
	declare character_descriptor	 char (120) varying;/* input descriptor string */
	declare index		 builtin;
	declare ltrim		 builtin;
	declare substr		 builtin;
	declare rtrim		 builtin;

     end;
