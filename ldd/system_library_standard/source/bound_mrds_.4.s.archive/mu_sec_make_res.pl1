/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1981 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(86-05-14,Dupuis), approve(86-08-05,MCR7491), audit(86-08-08,Blair),
     install(86-08-15,MR12.0-1127):
     Added code to keep track of the rm_attr_info structures that have been
     allocated (phx20301, mrds #154). Previously this code allocated one
     rm_attr_info structure for each attribute in each relation. In the test
     case for this TR this resulted in 7926 rm_attr_info's being allocated,
     which took up 206076 words. This new code results in about 435
     rm_attr_info's being allocated, for the test case.
                                                   END HISTORY COMMENTS */


mu_sec_make_res:
make_res:
     proc (insecure_dbrdy_ptr, insecure_frdy_ptr, temp_area_ptr, 
	arg_submodel_iocb_ptr, resultant_attributes_info_ptr_parm, error_code);
	goto common;

/*

		      BEGIN_DESCRIPTION

   This routine builds the part of the resultant model needed to ready a file.
   this  includes  rm_rel_info, the rm_rel_infos for the files relations, the
   rm_attr_infos,  and  rm_domain_infos  for  the  relations  attributes,  and
   rm_plink_infos  and rm_clink_infos for the files links.  the rm_rel_array,
   and  rm_rel_array are updated to reflect the readied file.  the file itself
   is  attached  and  opened  for  the  given  ready  mode.   note that if the
   resultant for the file is already built from a previous readying, that only
   the attach and open process take place.

		       END_DESCRIPTION

   PARAMETERS:

   insecure_dbrdy_ptr  -  - (input) pointer to the db_rdy structure containing
   the db_index, db_model pointer, and dbcb pointer

   insecure_frdy_ptr  - - (input) pointer to the file_rdy structure containing
   the file name, file ready mode, and it's index in the file array

   temp_area_ptr - - (input) pointer to a scratch area for use in calling
   mus_get_rel_names and mus_get_att_names

   arg_submodel_iocb_ptr - - (input) submodel iocb pointer, if a submodel
   opening

   resultant_attributes_info_ptr_parm - - (input) pointer to resultant_attributes_info structure.

   error_code - - (output) fixed bin (35), type of error encoding, 0 unless an
   error occured

   sub_error_  -  -  (output)  condition,  signaled upon detection of error to
   provide more info


   HISTORY:

   78-08-01 Oris D. Friesen: Originally written.

   79-05-01 Jim Gray : Rewritten to
   1) add sub_err_ and structured reporting of errors
   2) insure cleanup of parameter structures
   3) add logic to only attach & open if resultant already built for file
   4) correct and complete initialization of resultant structures
   5)  add  logic  formerly  in mu_sec_complete_res(deleted) to update readied
   .   links
   6) add array of varying attribute pointers to rm_rel_info

   79-12-01 Jim Gray : Modified to make the  build_ptr  routine  use
   cv_ptr_  on a path$entry, instead of an hcs_$initiate, which does
   not work.

   79-12-02 Jim Gray : Modified to change get_assign_length, so that
   packed decimal types would work properly

   80-04-01 Jim Gray : Modified to fix  attr  definition  order  for
   submodels.

   80-04-02 Jim Gray : Modified to set rm_rel_info.delete/store bits
   off it submodel view does not contain all attributes.

   80-04-03 Jim Gray  :  Modified  to  make  db  path  available  to
   mus_attach_open_vile  so that the change to relative paths in the
   model could be expanded for the attach description.

   80-05-01 Jim Gray : Modified to include the models num_attrs, and
   nvar_atts  in the rm_rel_info, so that partial view submodels can
   properly access the tuple structure.

   80-05-01 Jim Gray  :  Modified  to  make  partial  view  submodel
   modify, a debug switch for this release.

   80-05-02  Jim  Gray  :  Modified  to   add   model_nkey_attr   to
   rm_rel_info for key head submodel access info.

   80-06-18  M.  Pierret:  Modified  to   accept   submodel   access
   information.

   80-06-24 Lindsey Spratt: Modified to set the mdbm_secured  switch
   equal to dsm_sw.

   80-08-01 Lindsey Spratt: Modified to add access  permission  bits
   to mus_get_ interface.

   80-11-05 Jim Gray : Modified to set the mdbm_secured bit from the
   secured  bit  in the model (as set by secure_mrds_db), instead of
   from the submodel switch.

   80-11-05  Jim  Gray  :  Modified  to  add  mdbm_secured  bit   to
   rm_attr_info  so  that rm_rel_info does not have to be checked in
   routines that do not have that info (e.g. select/where clause and
   expr/func routines)

   80-11-06 Jim  Gray  :  Modified  to  set  mdbm_secured  bit  from
   rm_db_info.mdbm_secured,  so  that model is only touched once for
   the setting of the secure bit in the resultant.

   80-11-04 Jim Gray : Modified to take the call to attach and  open
   the  data  vfile out of this routine, now that the file is opened
   at set_scope time in mrds_dsl_set_fscope instead, so that  access
   checks  and access/scope conflict checks can be made indenpendent
   of opening the file.

   80-12-10 Jim Gray : to properly initialize  the  new  version  of
   scope_info.   This   only   happenns   for   files   readied   in
   scope_update/retrieve modes, for other modes open  still  happens
   here.

   80-12-11 Jim Gray : added  initialization  of  submodel  name  in
   scope info

   80-12-24 Jim Gray : improved error message  for  case  when  null
   access doesn't allow getting pointer to model segment.

   81-01-22     Davids:      changed      mrds_dsm_open_read      to
   mrds_dsm_open$read.    also    removed    the    use    of    the
   mrds_dsm_entry_dcls include file

   81-01-23    Jim    Gray     :     added     initialization     of
   last_model_attr_char_var   bit   in  rm_rel_info,  now  added  to
   mus_get_att_names interface, so that partial view  submodels  can
   determine  where  the end of a tuple with varying attributes, not
   in  it's  view,  has  it's  last  bit.  Also  removed  all  logic
   preventing   partial   view   modifies   that   turned   off  the
   rm_rel_info.modify bit.

   81-01-27 Jim Gray : added setting of needed access for DBA  types
   if access violation.

   81-01-30 Jim Gray : added  init  of  current_tuple_population  in
   rm_rel_info.

   81-02-20 Jim Gray  :  changed  init  of  rm_rel_info.key_attr_ptr
   array,  so  that the key attr pointers always appear in model key
   order. Previously a submodel that re-order  the  key  attributes,
   and  stored  data, would have a tuple not retrievable by that key
   in the model, and vice versa. This is a fix for TR 9038. Now  the
   key  is  always  maintained  in the model's key order, for entire
   view relations, whether the opening is through  the  model  or  a
   submodel.  Note  that  the method used for the fix only works for
   full view submodels doing a store, if we ever allow  null  values
   in  key  attrs,  and  partial  view  stores, this will have to be
   changed.

   81-05-06 Rickie E. Brinegar : Added build_entry and  changed  the
   encode,  decode and check proc pointers in the resultant model to
   entry variables. This was done to allow these  procedures  to  be
   written  in  other  than  pl1  and  to  accommodate  the  use  of
   cu_$generate_call instead of cu_$gen_call.

   81-05-28 Jim Gray :  changed  code  to  handle  to  structure  of
   resultant  model.  This involved combining the rm_rel/file_array,
   and combining the rm_rel/file_info. All blocked file and  foreign
   key  references  were  eliminated.  The  -check  option stuff was
   removed.  Now  only  one  rm_domain_info  per  domain  is   used.
   Descriptors are now used, instead of pointers to descriptors.

   81-06-16 Jim Gray : changed initization of number of iocb's possible
   per relation, to allow up to 20 tuple variables on the same relation.

   81-07-02 Jim Gray : added initialization of the relation vfile statistics
   in rm_rel_info, and the statistics update count and time.

   81-09-16 Davids: added  the  rtrim  builtin.  rel_info.name  will
   never be more than 30 characters but since it is declared as char
   (32) a stringsize is signaled when the code is  compiled  with  a
   prefix of stringsize. adding the rtrim  allows  the  code  to  be
   compiled.

   82-04-21  R. Lackey : Add rm_rel_info.number_selected = 0;
   To help keep track of how much space is used and delete old subsets.
   TR12205 (Suggestion).

   82-05-12 Roger Lackey  : added min to
   rm_rel_info.file_id_len = min (7, db_model.unblk_file_id_len);
   because file_id_len is used as a length for substr in several modules
   where the target variable is only 7 bits long.

   82-08-12  Mike  Kubicar  : Added a fix as part of TR phx 13118.  In
   case    of   problems   accessing   an   encode/decode   procedure,
   mu_sec_make_res  will return mrds_error_$bad_domain_proc.  This
   is    because    an    upper    level   routine   is   interpreting
   error_table_$moderr  as  incorrect  access to model/submodel.  This
   also applies to error_table_$no_info.

   82-08-20 D. Woodka : deleted references to  rm_attr_info.bit_offset
   and rm_rel_info.max_data_len for DMS conversion.     

   82-09-23 Davids: added the setting of rm_rel_info.primary_key_index_id

   82-09-24 Woodka : modified for DMS conversion. Deleted references to iocb
   pointers, and  references to deleted fields, and added  initialization of
   several new fields.

   82-11-05 Davids: added assignment to the new field model_defn_order in
   rm_attr_info.

   83-02-26 Moberg: added parameters so that the temp_segment is not gotten
   for each relation and if a submodel_opening, the submodel is not opened
   for each relation

   83-04-06 Davids: Added code to set the new rm_rel_info.scope_flags_ptr.
   Also deleted references to discard_code, mrds_data_$max_tuple_var, length
   min, substr.

   83-06-06 Davids: Added code in the build_entry procedure so that the error
   code returned is set before the call to sub_err_ and so that the info_ptr
   argument in the call to sub_err_ is the addr of the error_code. This is
   so that the sub_error handler in mrds_dsl_create_res_copy can reset the
   error code to allow the resultant to be created even if the entry does
   not exist. It was decided to do this so that the resultant creation code
   will not need to be duplicated for saving the resultant in the db dir
   during the database creation.
*/
%page;
common:						/* initialize */
	submodel_iocb_ptr = arg_submodel_iocb_ptr;
	num_dims = 0;
	resultant_attributes_info_ptr = resultant_attributes_info_ptr_parm;
	error_code = 0;

/* copy the pointer parameters for security purposes */

	frdy_ptr = insecure_frdy_ptr;
	dbrdy_ptr = insecure_dbrdy_ptr;

	dbcb_ptr = db_rdy.dbcb_ptr;
	rdbi_ptr = dbcb.rdbi_ptr;
	dbm_ptr = db_rdy.db_model_ptr;
	fa_index = file_rdy.file_array_index;
	rmra_ptr = rm_db_info.ra_ptr;

/* get the pointer to the file model for this file */

	call
	     hcs_$initiate ((rm_db_info.db_path),
	     rtrim (rm_rel_array.rel_data.model_name (fa_index)) || ".m", "", 0, 0,
	     fm_ptr, error_code);

	if error_code = error_table_$moderr then do;
		call
		     mrds_dm_authorization$set_needed_access (rtrim (rm_db_info.db_path),
		     error_code);
		if error_code ^= 0 then
		     error_code = error_table_$moderr;
		else call
			hcs_$initiate ((rm_db_info.db_path),
			rtrim (rm_rel_array.rel_data.model_name (fa_index)) || ".m",
			"", 0, 0, fm_ptr, error_code);
	     end;

	if fm_ptr = null then
	     call
		sub_err_ (error_code, caller_name, continue, info_ptr,
		return_value, "^/^a^a^a",
		"Unable to get a pointer to the model segment """,
		rtrim (rm_db_info.db_path) || ">"
		|| rtrim (rm_rel_array.rel_data (fa_index).model_name) || ".m",
		""".");
	else do;

		error_code = 0;
		fi_ptr = pointer (dbm_ptr, file_model.fi_ptr);

/* set up for processing the relation */

		call get_area_and_rel_init ();


		if error_code = 0 then do;

/* now process each relation within this file */

			rel_index = 1;
			call process_relation ();

/* scope ready modes need the mdbm to manage concurrency, initialize if neccessary */

			if (file_rdy.mode >= SCOPE_MODES) & (error_code = 0)
			then call set_up_scope ();	/* scope retrieve or scope update */

		     end;

	     end;

	return;
%page;
get_area_and_rel_init:
     procedure ();

/* routine to get the initial values needed to allocate the rm_rel_info
   if it hasn't been previously built, else just get the rmfi_ptr */


/* get space for a parameter area */

	temp_area_ptr -> parameter_area = empty ();

/* get the number of relations in the submodel or model for this file */

	call mus_get_rel_names (dbcb.dsm_sw, rmra_ptr, fa_index, temp_area_ptr,
	     fm_ptr, rns_ptr, error_code);

     end;
%page;
set_up_scope:
     proc;

/* get the scope_info pointer, or initialize it if this is its first reference */

	if dbcb.scope_ptr ^= null () then
	     scope_ptr = dbcb.scope_ptr;
	else do;					/* first time, init structure */

		max_file_init = rm_rel_array.num_rels;
		allocate scope_info set (scope_ptr) in (dbcb.static_area);

		dbcb.scope_ptr = scope_ptr;

		scope_info.mbz1 = OFF;
		scope_info.nfiles = max_file_init;
		scope_info.active_scopes = 0;

		do i = 1 to scope_info.nfiles;
		     scope_info.scope.name (i) = BLANK;
		     scope_info.scope.sm_name (i) = BLANK;
		     scope_info.scope.flags (i) = OFF;
		end;
	     end;

/* enter this files name in an empty slot in the scope array */

	do i = 1 to scope_info.nfiles while (scope_info.scope.name (i) ^= BLANK);
	end;

	scope_info.scope.name (i) = rm_rel_info.model_name;
	scope_info.scope.sm_name (i) = rm_rel_info.name;
	rm_rel_info.scope_flags_ptr = addr (scope_info.scope (i).flags);

     end set_up_scope;
%page;
process_relation:
     procedure ();

/* build the attr/domain/relation/plink/clink resultant infos for this relation */

	ri_ptr = rel_names.item (rel_index).ri_ptr;

	call
	     mus_get_att_names (dbm_ptr, dbcb.dsm_sw, rns_ptr, rel_index,
	     temp_area_ptr, ans_ptr, error_code);
	if error_code = 0 then do;

/* go through each attribute in the users view of this relation */

		do att_index = 1 to att_names.num while (error_code = 0);

		     call init_rm_domain_info ();

		     call init_rm_attr_info ();

		     att_names.item.rai_ptr (att_index) = rai_ptr;

		end;


/* find an empty slot in the relation array,
   then fill in the resultant relation info */

		if error_code = 0 then do;

			rm_rel_index = fa_index;

			call init_rm_rel_info ();

			rm_rel_array.rel_data.ri_ptr (rm_rel_index) = rmri_ptr;

		     end;

	     end;

     end;
%page;
init_rm_domain_info:
     proc ();

/* fill in the resultant domain info */

	di_ptr = att_names.item.di_ptr (att_index);

	declare found		 bit (1);		/* on => leave loop */

	found = OFF;
	rdi_ptr = rm_db_info.domain_list_ptr;
	do while (^found);

	     if rdi_ptr = null () then
		found = ON;
	     else if rm_domain_info.name = domain_info.name then
		found = ON;
	     else rdi_ptr = rm_domain_info.next_domain_ptr;

	end;

	if rdi_ptr = null () then do;			/* domain name not init yet */
		allocate rm_domain_info set (rdi_ptr) in (rm_db_info.static_area);
		rm_domain_info.next_domain_ptr = rm_db_info.domain_list_ptr;
		rm_db_info.domain_list_ptr = rdi_ptr;


		rm_domain_info.db_desc = domain_info.db_desc;
		rm_domain_info.user_desc = domain_info.user_desc;
		rm_domain_info.user_bit_len =
		     mu_data_length ((rm_domain_info.user_desc));
		rm_domain_info.name = domain_info.name;


		error_source = "domain " || rm_domain_info.name;


		rm_domain_info.ck_proc, rm_domain_info.encd_proc,
		     rm_domain_info.decd_proc = "0"b;
		if domain_info.check_path_ptr ^= NULL_OFFSET then do;
			rm_domain_info.ck_proc_entry =
			     build_entry (domain_info.check_path_ptr, di_ptr, "check");
			rm_domain_info.ck_proc = "1"b;
		     end;
		if domain_info.encd_path_ptr ^= NULL_OFFSET then do;
			rm_domain_info.encd_proc_entry =
			     build_entry (domain_info.encd_path_ptr, di_ptr, "encode");
			rm_domain_info.encd_proc = "1"b;
		     end;
		if domain_info.decd_path_ptr ^= NULL_OFFSET then do;
			rm_domain_info.decd_proc_entry =
			     build_entry (domain_info.decd_path_ptr, di_ptr, "decode");
			rm_domain_info.decd_proc = "1"b;
		     end;



		rm_domain_info.pad = OFF;

	     end;

     end init_rm_domain_info;
%page;
init_rm_attr_info:
     proc ();

dcl 1 irai_based_rm_attr_info like rm_attr_info based (irai_based_rm_attr_info_ptr);
dcl irai_based_rm_attr_info_ptr ptr;
dcl irai_havent_found_one_yet bit (1) aligned;
dcl irai_loop fixed bin;
dcl 1 irai_rm_attr_info like rm_attr_info;
/* fill in the resultant attribute info */

	ai_ptr = att_names.item.ai_ptr (att_index);
	rai_ptr = addr (irai_rm_attr_info);

	rm_attr_info.name = att_names.item.sm (att_index);
	rm_attr_info.model_name = attr_info.name;
	rm_attr_info.key_attr = attr_info.key_attr;
	rm_attr_info.index_attr = attr_info.index_attr;
	type = addr (rm_domain_info.db_desc) -> descriptor.type;
	rm_attr_info.read_perm = att_names.item.r_perm (att_index);
	rm_attr_info.modify_perm = att_names.item.u_perm (att_index);
	rm_attr_info.mdbm_secured = rm_db_info.mdbm_secured;
	rm_attr_info.reserved = OFF;
	rm_attr_info.index_id = attr_info.index_id;
	rm_attr_info.defn_order = att_index;		/* will be defn order for view */
	rm_attr_info.model_defn_order = attr_info.defn_order; /* will be defn order for actual model */
	rm_attr_info.key_order = attr_info.key_order;
	rm_attr_info.bit_length = attr_info.bit_length;
	rm_attr_info.domain_ptr = rdi_ptr;
	rm_attr_info.number_of_dups = 0;


	if rm_attr_info.index_attr	/* Don't update resultant_attributes_info if it's an indexed attribute */
	then call allocate_an_rm_attr_info_structure;
	else if resultant_attributes_info.current_number_of_attributes = 0
	     then do;		/* Update it for the first rm_attr_info */
		call allocate_an_rm_attr_info_structure;
		call update_resultant_attributes_info;
	     end;
	     else do;
		irai_havent_found_one_yet = ON;
		do irai_loop = 1 to resultant_attributes_info.current_number_of_attributes
		     while (irai_havent_found_one_yet);
		     if resultant_attributes_info.attributes.name (irai_loop) = rm_attr_info.name
		     then do;
			irai_based_rm_attr_info_ptr = resultant_attributes_info.attributes.value_ptr (irai_loop);
			if unspec (irai_based_rm_attr_info) = unspec (rm_attr_info)
			then irai_havent_found_one_yet = OFF;
		     end;
		end;
		if irai_havent_found_one_yet
		then do;
		     call allocate_an_rm_attr_info_structure;
		     call update_resultant_attributes_info;
		end;
		else rai_ptr = irai_based_rm_attr_info_ptr;
	     end;
%skip(1);
	return;
%page;
allocate_an_rm_attr_info_structure: proc;
%skip(1);
	allocate rm_attr_info in (rm_db_info.static_area) set (rai_ptr);
	unspec (rm_attr_info) = unspec (irai_rm_attr_info);
%skip(1);
	return;
%skip(1);
     end allocate_an_rm_attr_info_structure;
%page;
update_resultant_attributes_info: proc;
%skip(1);
dcl 1 urai_rai_info like resultant_attributes_info based (urai_rai_info_ptr);
dcl urai_rai_info_ptr ptr;
dcl urai_save_number_of_attributes fixed bin;
%skip(1);
	if resultant_attributes_info.current_number_of_attributes + 1
	> resultant_attributes_info.number_of_attributes
	then do;
	     urai_rai_info_ptr = resultant_attributes_info_ptr;
	     urai_save_number_of_attributes = resultant_attributes_info.number_of_attributes;
	     rai_init_number_of_attributes = urai_save_number_of_attributes + mrds_data_$number_of_resultant_attributes;
	     allocate resultant_attributes_info in (dbcb.static_area)
		set (resultant_attributes_info_ptr);
	     resultant_attributes_info.number_of_attributes = urai_save_number_of_attributes;
	     unspec (resultant_attributes_info) = unspec (urai_rai_info);
	     resultant_attributes_info_ptr_parm = resultant_attributes_info_ptr;
	     free urai_rai_info in (dbcb.static_area);
	     resultant_attributes_info.number_of_attributes = urai_save_number_of_attributes + mrds_data_$number_of_resultant_attributes;
	     resultant_attributes_info.current_number_of_attributes = urai_save_number_of_attributes;
	end;
%skip(1);
	resultant_attributes_info.current_number_of_attributes
	     = resultant_attributes_info.current_number_of_attributes + 1;
	resultant_attributes_info.value_ptr (resultant_attributes_info.current_number_of_attributes) = rai_ptr;
	resultant_attributes_info.name (resultant_attributes_info.current_number_of_attributes) = rm_attr_info.name;
%skip(1);
	return;
%skip(1);
     end update_resultant_attributes_info;
%skip(1);
     end init_rm_attr_info;
%page;
init_rm_rel_info:
     proc ();

/* fill in the resultant relation info */

	nvar_atts_init = att_names.num_varying_attrs;
	nkey_attr_init = att_names.num_key_attrs;
	natts_init = att_names.num;

	allocate rm_rel_info set (rmri_ptr) in (rm_db_info.static_area);

	entire_view = rel_names.item.total_view (rel_index);
	rm_rel_info.name = rel_names.item.sm (rel_index);
	rm_rel_info.model_name = rtrim (rel_info.name);	/* CHANGE 81-09-16 */
	rm_rel_info.retrieve = (file_rdy.mode ^= LOAD);
	rm_rel_info.modify =
	     ((file_rdy.mode = UPDATE) | (file_rdy.mode = SCOPE_UPDATE));
	rm_rel_info.store =
	     (((file_rdy.mode = LOAD) | rm_rel_info.modify) & entire_view);
	rm_rel_info.delete = ((rm_rel_info.modify) & entire_view);
						/* verify str/del/mod flags valid before set */
	if rm_rel_info.nkey_attr = rel_info.num_key_attrs then
	     rm_rel_info.total_key = ON;
	else rm_rel_info.total_key = OFF;
	rm_rel_info.indexed = rel_info.indexed;
	rm_rel_info.mdbm_secured = rm_db_info.mdbm_secured; /* check whether secure_mrds_db has set this */
	rm_rel_info.status_perm = rel_names.item.status_perm (rel_index);
	rm_rel_info.append_tuple_perm =
	     rel_names.item.append_tuple_perm (rel_index);
	rm_rel_info.delete_tuple_perm =
	     rel_names.item.delete_tuple_perm (rel_index);
	rm_rel_info.unused_perm = rel_names.item.unused_perm (rel_index);
	rm_rel_info.last_model_attr_char_var = att_names.last_model_attr_char_var;
	rm_rel_info.reserved = OFF;
	rm_rel_info.num_attr = natts_init;
	rm_rel_info.model_num_attr = rel_info.num_attr;
	rm_rel_info.nkey_attr = nkey_attr_init;
	rm_rel_info.model_nkey_attr = rel_info.num_key_attrs;
	rm_rel_info.nsec_inds = 0;			/* not counted yet */
	rm_rel_info.max_key_len = ceil (rel_info.max_key_len / 9);
	rm_rel_info.current_tuple_population = 0;	/* set later at file attach time */

	rm_rel_info.last_statistics_update_count = 0;
	rm_rel_info.last_statistics_update_time = 0;
	rm_rel_info.last_statistics_update_s_e_ref_num = 0;
	if rel_info.primary_key_index_id = "111111111111111111111111111111111111"b then do;
		rm_rel_info.primary_key_index_id = "0"b;
		rm_rel_info.rel_id = (36)"1"b;
	     end;
	else do;
		rm_rel_info.primary_key_index_id = rel_info.primary_key_index_id;
		rm_rel_info.rel_id = rel_info.id;
	     end;
	rm_rel_info.reserved = OFF;
	rm_rel_info.ready_mode = file_rdy.mode;
	rm_rel_info.file_type = file_model.file_type;
	rm_rel_info.tuple_id_len = file_model.tuple_id_len;
	rm_rel_info.scope_flags_ptr = null ();



/* fill in the pointer arrays */

	call fill_rel_ptr_arrays ();			/* get good pointers for this process */

/* Set up an id_list structure for gets */

	il_number_of_ids = rm_rel_info.num_attr;
	allocate id_list in (rm_db_info.static_area) set (id_list_ptr);
	id_list.version = ID_LIST_VERSION_1;
	id_list.number_of_ids = il_number_of_ids;
	do i = 1 to rm_rel_info.num_attr;
	     id_list.id (i) = rm_rel_info.attr_ptrs (i)
		-> rm_attr_info.model_defn_order;
	end;
	rm_rel_info.id_list_ptr = id_list_ptr;

     end init_rm_rel_info;
%page;
fill_rel_ptr_arrays:
     proc ();

/* fill in all the pointer arrays in the rel info */


/* fill in the attribute pointer, key attribute pointer
   and varying data type attribute pointer arrays,
   and count up the number of secondary index attributes */

	j = 0;
	k = 1;
	do i = 1 to rm_rel_info.num_attr;

	     rai_ptr = att_names.item.rai_ptr (i);
	     rm_rel_info.attr_ptrs (i) = rai_ptr;

	     if ^rm_attr_info.key_attr then
		;
	     else do;

		     if entire_view then
			j = rm_attr_info.key_order;
		     else j = j + 1;
		     rm_rel_info.key_attr_ptrs (j) = rai_ptr;


		end;


	     if rm_attr_info.index_attr then
		rm_rel_info.nsec_inds = rm_rel_info.nsec_inds + 1;

	end;

     end fill_rel_ptr_arrays;
%page;



build_entry:
     proc (path_entry_offset, base_pointer, proc_type) returns (entry);

/* DESCRIPTION:

   This  procedure  initiates the segment referenced by the pathname structure
   at the given offset The pointer to the initiated segment is returned in the
   output_ptr  parameter.   If  the  segment  could not be initiated the error
   procedure is called.

*/

	dcl     output_entry	 entry variable;	/* output -- entry of initiated segment */
	declare proc_type		 char (*);	/* type of procedure being set up */
	declare path_entry_offset	 bit (18);	/* offset in the given area to the path_entry struct */
	declare base_pointer	 ptr;		/* base of segment for given path_entry */
	declare reported_error	 fixed bin (35);	/* error reported via sub_error */

	if error_code = 0 then do;
		path_entry_ptr = pointer (base_pointer, path_entry_offset);
		output_entry =
		     cv_entry_ (path_entry.path || "$" || path_entry.entry, null,
		     error_code);

		if error_code ^= 0 then do;
			reported_error = error_code;
			error_code = mrds_error_$bad_domain_proc;
			call sub_err_ (reported_error, caller_name, "c", addr (error_code),
			     return_value, "^/^a^a^a ^a^a^a ^a^a^a^/",
			     "Unable to build an entry variable for the """, proc_type,
			     """ procedure using the path$entry =", path_entry.path, "$",
			     path_entry.entry, "for """, error_source, """.");
		     end;
	     end;

	return (output_entry);

     end build_entry;
%page;
	dcl     (
	        insecure_frdy_ptr,			/* nonsecure pointer to file ready info */
	        insecure_dbrdy_ptr
	        )			 ptr;		/* points to db ready info */

	dcl     resultant_attributes_info_ptr_parm ptr parm;
	dcl     error_code		 fixed bin (35);	/* status codes */

	dcl     (
	        fa_index,				/* index to file array */
	        i,				/* index variable */
	        j,
	        k,
	        rel_index,				/* index to relation */
	        att_index,				/* index to attribute */
	        rm_rel_index			/* index into resultant relation array */
	        )			 fixed bin;

	dcl     (null, addr, ceil, fixed) builtin;
	dcl     (empty, pointer, rel, rtrim, unspec) builtin;

	dcl     sys_info$max_seg_size	 fixed bin ext;

	dcl     arg_submodel_iocb_ptr	 ptr;
	dcl     submodel_iocb_ptr	 ptr ext;

	declare NULL_OFFSET		 bit (18) init ((18)"1"b); /* mrds version of null offset */

	dcl     hcs_$initiate
				 entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr,
				 fixed bin (35));

	dcl     mus_get_rel_names
				 entry (bit (1) unal, ptr, fixed bin, ptr, ptr, ptr, fixed bin (35));
	dcl     mus_get_att_names
				 entry (ptr, bit (1) unal, ptr, fixed bin, ptr, ptr, fixed bin (35));
	declare OFF		 bit (1) init ("0"b); /* false value */
	declare sub_err_		 entry options (variable); /* reports errors */
	declare caller_name		 char (19) init ("mu_sec_make_res") /* calling program name */
				 int static options (constant);
	declare continue		 char (1) init ("c"); /* don't stop after printing message */
	declare info_ptr		 ptr init (null ());/* unused */
	declare return_value	 fixed bin (35) init (0); /* unused */
	declare temp_area_ptr	 ptr;		/* points to temporary segment for parameter area */
	declare parameter_area	 area (sys_info$max_seg_size) based; /* space for parameters */
	declare UNBLOCKED		 fixed bin init (1);/* type code for unblocked file */
	declare LOAD_MODE		 fixed bin init (4);/* load ready mode type */
	declare SCOPE_MODES		 fixed bin init (5);/* >= 5 => scope modes */
	declare NEVER_READIED	 bit (36) init ((36)"0"b); /* => file never been readied */
	declare ON		 bit (1) init ("1"b); /* true value */
	declare LOAD		 fixed bin init (4);/* load mode type */
	declare UPDATE		 fixed bin init (3);/* update mode type */
	declare SCOPE_UPDATE	 fixed bin init (6);/* scope update mode type */
	declare type		 fixed bin;	/* temporary for descriptor type */
	declare BLANK		 char (1) init (" "); /* space character */
	declare mu_data_length	 entry (bit (36)) returns (fixed bin (35));
						/* bit length from descriptor */
	declare error_source	 char (48) varying; /* logical structure where setting up proc ptrs */
	dcl     cv_entry_		 entry (char (*), ptr, fixed bin (35)) returns (entry);
						/* get an entry from path$entry */
	declare entire_view		 bit (1);		/* on => all attributes present in view of relation */
	declare error_table_$moderr	 fixed bin (35) ext static; /* no access to entry */
	declare mrds_data_$number_of_resultant_attributes fixed bin (35) external;
	declare mrds_error_$bad_domain_proc fixed bin (35) ext; /* No acces to encode/decode procedure */
	declare mrds_dm_authorization$set_needed_access
				 entry (char (*), fixed bin (35)); /* sets access for DBA types */
%page;
%include dm_id_list;
%page;
%include mdbm_db_model;
%page;
%include mdbm_file_model;
%page;
%include mdbm_rm_db_info;
%page;
%include mrds_dbcb;
%page;
%include mdbm_db_file_list;
%page;
%include mdbm_rel_att_array;
%page;
%include mdbm_rm_domain_info;
%page;
%include mdbm_rm_attr_info;
%page;
%include mdbm_rm_rel_array;
%page;
%include mdbm_rm_rel_info;
%page;
%include mdbm_descriptor;
%page;
%include mdbm_scope_info;
%page;
%include mrds_res_attr_info;
     end mu_sec_make_res;

