/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
mu_rel_statistics: proc;

/*
                   BEGIN_DESCRIPTION
  This module calls the various relation manager routines to  get  a
  relations's  statistics.  There  are  two types of routines, those
  that return statistics and the one that records the statistics  in
  the        resultant.       The       main       entry       point
  mu_rel_statistics$mu_rel_statistics should never be called.


  The entry return_tuple_count returns an exact count of the  number
  of  tuples  in  the  relation.


  The  entry  record_statistics records the number of duplicates for
  each  indexed  attribute  in  the  number_of_dups  element  in the
  attribute's  rm_attr_info  structure.  It also records an estimate
  of the total  number of  tuples    in    the   relation   in   the
  current_tuple_population  element  of  the  relation's rm_rel_info
  structure.   The statistics on when the statistics  were collected
  (also  in  rm_rel_info) are also upgraded.  Since things are being
  recorded  in  the  resultant structures the database must be open.
  Cursors  are  obtained  via mu_cursor_manager_ so that they may be
  saved  and  used  later  (or  reused  if  they  have  already been
  created).

  Known Bugs:

  Other Problems:

  History:
      82-09-24 Davids: written

      82-10-18 Davids: corrected the parameter list of the record_statistics
      entry to include the parameter relmgr_get_count - it had been left out

      83-05-23 Mike Kubicar : new relation manager calling sequences and
      relation cursor changes.

      83-09-20 Ron Harvey: changed record_statistics entry so that it uses its
      new relmgr_get_population parameter in preference to relmgr_get_count.

                   END_DESCRIPTION
*/
%page;
/* PARAMETERS */

	dcl     cursor_ptrs_storage_ptr ptr;		/* (input) pointer to storage where cursor_ptrs to */
						/*         <rel_opening_id-collection_index-tuple_variable> */
						/*        mappings are kept */
	dcl     cursor_storage_area_ptr ptr;		/* (input) pointer to where the cursors will be allocated */
	dcl     dbi		 fixed bin (35);	/* (input) index of an open database */
	dcl     last_s_e_id_num	 fixed bin (35);	/* (input) identifer for last selection expression seen */
	dcl     Prmri_ptr		 ptr;		/* (input) pointer to the relation's rm_rel_info structure */
						/*         needed because rmri_ptr is "P" */
						/*         dcl'ed in the incl file */
	dcl     relmgr_create_cursor	 entry (bit (36) aligned, ptr, ptr, fixed bin (35));
						/* (input) entry used to create a cursor */
	dcl     relmgr_get_count	 entry (ptr, ptr, fixed bin (35), fixed bin (35));
						/* (input) entry used to count tuples in a relation */
	dcl     relmgr_get_duplicate_key_count entry (ptr, bit (36) aligned, fixed bin (17), fixed bin (35), fixed bin (35));
						/* (input) entry used to count duplicates within a key */
	dcl     relmgr_get_population	 entry (ptr, fixed bin (35), fixed bin (35));
						/* (input) entry used to get estimeated 'population' of a relation */
	dcl     relmgr_open		 entry (char (*), char (*), bit (36) aligned, fixed bin (35));
						/* (input)entry used to open a relation */

	dcl     code		 fixed bin (35);	/* (output) standard error code */
	dcl     tuple_count		 fixed bin (35);	/* (output) number of tuples in the relation */

/* AUTOMATIC */

	dcl     i			 fixed bin;	/*loop index */
	dcl     cursor_ptr		 ptr;		/* pointer to a cursor */


/* CONSTANTS */

	dcl     ALL_THE_ATTRIBUTES	 fixed bin init (1) internal static options (constant);
						/* all one fields in an index will be considered */
						/* when looking for duplicates */
	dcl     DEFAULT_TUPLE_VARIABLE fixed bin (35) init (0) internal static options (constant);

/* BUILTINS */

	dcl     clock		 builtin;
	dcl     null		 builtin;

/* ENTRIES */

	dcl     mu_cursor_manager_$get entry (fixed bin (35), ptr, fixed bin (35), bit (36) aligned, entry, entry, ptr, ptr,
				 ptr, fixed bin (35));

/* INCLUDES */
%page;
%include mdbm_rm_rel_info;
%page;
%include mdbm_rm_attr_info;
%page;
return_tuple_count: entry (dbi, relmgr_create_cursor, relmgr_open, relmgr_get_count,
	cursor_ptrs_storage_ptr, cursor_storage_area_ptr, Prmri_ptr, tuple_count, code);

	rmri_ptr = Prmri_ptr;
	call mu_cursor_manager_$get (dbi, rmri_ptr, DEFAULT_TUPLE_VARIABLE,
	     rmri_ptr -> rm_rel_info.rel_id,
	     relmgr_create_cursor, relmgr_open, cursor_ptrs_storage_ptr,
	     cursor_storage_area_ptr, cursor_ptr, code);

	if code = 0
	then call relmgr_get_count (cursor_ptr, null (), tuple_count, code);

	if code ^= 0
	then tuple_count = 0;

	goto exit;
%page;
record_statistics: entry (dbi, relmgr_create_cursor, relmgr_open, relmgr_get_duplicate_key_count, relmgr_get_population, relmgr_get_count,
	cursor_ptrs_storage_ptr, cursor_storage_area_ptr, Prmri_ptr, last_s_e_id_num, code);

/* This entry will use the relmgr_get_population procedure for an 'estimated' count
   of the number of tuples in the relation. If the 'estimated' count is ZERO,
   then the relmgr_get_count procedure will be used for the actual count. */

	rmri_ptr = Prmri_ptr;
	call mu_cursor_manager_$get (dbi, rmri_ptr, DEFAULT_TUPLE_VARIABLE,
	     rmri_ptr -> rm_rel_info.rel_id,
	     relmgr_create_cursor, relmgr_open, cursor_ptrs_storage_ptr,
	     cursor_storage_area_ptr, cursor_ptr, code);
	if code ^= 0
	then goto exit;

	do i = 1 to rmri_ptr -> rm_rel_info.num_attr;
	     rai_ptr = rmri_ptr -> rm_rel_info.attr_ptrs (i);
	     if rai_ptr -> rm_attr_info.index_attr
	     then do;
		     call relmgr_get_duplicate_key_count (cursor_ptr,
			rai_ptr -> rm_attr_info.index_id,
			ALL_THE_ATTRIBUTES,
			rai_ptr -> rm_attr_info.number_of_dups, code);
		     if code ^= 0
		     then goto exit;
		end;
	end;

	call relmgr_get_population (cursor_ptr, rmri_ptr -> rm_rel_info.current_tuple_population, code);
	if code ^= 0 then goto exit;

	if rmri_ptr -> rm_rel_info.current_tuple_population = 0
	then do;					/* make certain */
		call relmgr_get_count (cursor_ptr, null (), rmri_ptr -> rm_rel_info.current_tuple_population, code);
		if code ^= 0
		then goto exit;
	     end;

	rmri_ptr -> rm_rel_info.last_statistics_update_count = 1;
	rmri_ptr -> rm_rel_info.last_statistics_update_time = clock ();
	rmri_ptr -> rm_rel_info.last_statistics_update_s_e_ref_num = last_s_e_id_num;

exit:
	return;
%page;
     end mu_rel_statistics;
