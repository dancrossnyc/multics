/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* HISTORY:
   Originally written by Jim Gray - - September 1979
   Modified by Jim Gray - - Dec. 1979, to change internal routine to call to
   mu_data_class$scalar so that packed decimal would be accepted.
   Modified March 25, 1980 by R. Lackey to remove calls to mdbm_util_  */

mu_convert_parameter: procedure (); return;		/* not valid entry */

/* DESCRIPTION:
   this routine was written to overcome documentation errors in the old MRDS
   (e.g. dsl_$open specifies mode as fixed bin, but examples use constants = fixed dec )
   and to make the input/output parameters acceptable by the various
   entries declared options(variable) more flexible.
   there are two entries, $input for converting the users input parameter
   to the data type needed by the particular dsl_ entry, and
   $output to assign from the internal dsl_ entry data type into
   the users given data type when outputting values.
   NOTE: no conversion or extra work is needed if data types agree
   with the ones specified in the dsl_ interface write up.
   NOTE: the internal data type is assumed to be mrds supported(types 1-12, 19-22, and dimension = 0),
   if the users data type is not mrds supported, mrds_error_$invalid_dm_descriptor is the error code
*/

/* PARAMETERS:
   user_data_ptr - - (input/output) pointer, for $input entry, points to source of input data parameter,
   for $output, points to target of output data parameter.

   actual_data_ptr - - (input/output) pointer, for $input entry, points to data to be used internally by dsl_ entry,
   for $output entry, points to data used internally by dsl_ entry,
   and source for any output conversion that may be needed.

   user_desc_ptr - - (input) pointer, points to bit(36) pl1 descriptor
   of data pointed to by the user_data_ptr.

   actual_desc_ptr - - (input) pointer, points to bit(36) pl1 descriptor
   of data pointed to by actual_data_ptr.

   work_area_ptr - - (input) pointer, for $input entry only,
   points to an area where a converted temporary version of the input
   parameter may be placed if necessary, preferrably a temp segment,
   overlayed with an area of segment size, that may be released when not needed.

   error_code - - (output) fixed bin(35), error status encoding, 0 unless an error occured.
*/

input: convert_input_parameter: entry (user_data_ptr, user_desc_ptr, actual_data_ptr, actual_desc_ptr,
	work_area_ptr, error_code);

/* this entry converts, if necessary, the user's data type, into that required
   internally by the dsl_ entry, as specified by the descriptor pointed to
   bu the actual_desc_ptr, with the data pointed to by actual_data_ptr.
   no conversion is necessary if the data types agree */

	error_code = 0;				/* initialize */

/* use the user's data as is, if descriptors agree */

	if user_desc_ptr -> desc_ovrly = actual_desc_ptr -> desc_ovrly then do;
		desc_ptr = user_desc_ptr;
		if ^mu_data_class$scalar (desc_ptr) then
		     error_code = mrds_error_$invalid_dm_descriptor;
		else actual_data_ptr = user_data_ptr;
	     end;
	else do;

/* conversion will be required, first check for mrds supported data type */

		desc_ptr = user_desc_ptr;
		if ^mu_data_class$scalar (desc_ptr) then
		     error_code = mrds_error_$invalid_dm_descriptor; /* not supported mrds data type */
		else do;

/* get some space for the required data type temporary, of length in bits,
   as specified by it's data type */

			num_dims = 0;
			data_bit_length = mu_data_length (actual_desc_ptr -> desc_ovrly);
			allocate data_space set (actual_data_ptr) in (work_area);

/* now convert from the user's parameter, into this new space,
   and with required data type */

			call mu_convert (user_data_ptr, user_desc_ptr, actual_data_ptr, actual_desc_ptr, error_code);
		     end;
	     end;
	return;

output: convert_output_parameter: entry (actual_data_ptr, actual_desc_ptr, user_data_ptr, user_desc_ptr,
	error_code);

/* this entry does assignment of output parameters from the data type needed
   internally by a particular dsl_ entry, using a bit move if data types aggree,
   or doing a conversion if the data types are different, but mrds supported */


	error_code = 0;				/* initialize */

/* a bit move will do, if descriptors agree */

	if actual_desc_ptr -> desc_ovrly = user_desc_ptr -> desc_ovrly then do;
		desc_ptr = user_desc_ptr;
		if ^mu_data_class$scalar (desc_ptr) then
		     error_code = mrds_error_$invalid_dm_descriptor;
		else do;

/* do the bit move after determining the datas bit length */

			num_dims = 0;
			data_bit_length = mu_data_length (desc_ptr -> desc_ovrly);
			user_data_ptr -> data_space = actual_data_ptr -> data_space;
		     end;
	     end;

/* descriptors disaree, we will have to use assign_ to output the parameter */

	else do;
		desc_ptr = user_desc_ptr;
		if ^mu_data_class$scalar (desc_ptr) then
		     error_code = mrds_error_$invalid_dm_descriptor;
		else call mu_convert (actual_data_ptr, actual_desc_ptr, user_data_ptr, user_desc_ptr, error_code);
	     end;

	return;

	declare mu_data_class$scalar	 entry (ptr) returns (bit (1) aligned); /* decides is data type supported */
	declare data_space		 bit (data_bit_length) unal based; /* overlay for data move or temporary */
	declare ON		 bit (1) init ("1"b); /* true value */
	declare OFF		 bit (1) init ("0"b); /* false value */
	declare data_bit_length	 fixed bin (24);	/* bit length of data type */
	declare mu_data_length	 entry (bit (36)) returns (fixed bin (35)); /*  bit length from descriptor */
	declare mrds_error_$invalid_dm_descriptor fixed bin (35) ext; /* not mrds data type */
	declare error_code		 fixed bin (35);	/* error status encoding */
	declare desc_ovrly		 bit (36) based unal; /* overlay for multics pl1 descriptor */
	declare work_area_ptr	 ptr;		/* points to area in which converted parameer will reside */
	declare work_area		 area (sys_info$max_seg_size) based (work_area_ptr); /* space for converted parameter */
	declare sys_info$max_seg_size	 fixed bin (35) ext;/* largest segment size */
	declare actual_data_ptr	 ptr;		/* points to data used by internal routines */
	declare user_data_ptr	 ptr;		/* points to callers data */
	declare actual_desc_ptr	 ptr;		/* points to descriptor for internal data */
	declare user_desc_ptr	 ptr;		/* points to descriptor for users data */
	declare mu_convert		 entry (ptr, ptr, ptr, ptr, fixed bin (35)); /* does assign_ */

%include mdbm_descriptor;

     end;
