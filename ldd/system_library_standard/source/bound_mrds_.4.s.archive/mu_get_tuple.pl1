/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(87-01-22,Hergert), approve(88-07-11,MCR7903),
     audit(88-07-07,Dupuis), install(88-08-01,MR12.2-1073):
     For new parser, changed referneces of sel_ptr to select_list_ptr.
                                                   END HISTORY COMMENTS */



mu_get_tuple: proc (I_dbcb_ptr, I_area_ptr, I_rmri_ptr, X_t_ptr, O_code);

/* .                        BEGIN_DESCRIPTION

   This procedure was removed from mrds_dsl_define_temp_rel  by R. Lackey
   so it could be used by rmdb_create_and_pop_rel.

   The purpose is to get the next tuple of a translated selection expression

   .                         END_DESCRIPTION
*/

/* HISTORY
   82-04-26 R. Lackey : Moved from mrds_dsl_temp_rel and made an expternal proc
   for use by other routines.

   82-09-09 Mike Kubicar : converted from using the tuple structure to using
   the simple typed vector structure.

   83-06-08 Davids: Modified so that mrds_dsl_retrieve$set_tuple is called
   with the input simple_typed_vector_ptr (X_t_ptr) instead of a temp_ptr
   and then doing a copy of the vector.
*/

%page;


/*      PARAMETERS    */

	dcl     I_dbcb_ptr		 ptr parameter;	/* Pointer to dbcb */
	dcl     I_area_ptr		 ptr parameter;	/* Pointer to work area */
	dcl     I_rmri_ptr		 ptr parameter;	/* Pointer to rm_rel_info structure */
	dcl     X_t_ptr		 ptr parameter;	/*  Pointer to tuple structure */
	dcl     O_code		 fixed bin (35) parameter; /* Error code */

	dbcb_ptr = I_dbcb_ptr;
	area_ptr = I_area_ptr;
	rmri_ptr = I_rmri_ptr;
	simple_typed_vector_ptr = X_t_ptr;
	O_code = 0;

	if dbcb.ss_ptr ^= null then do;		/* set ptrs needed later */
		ss_ptr = dbcb.ss_ptr;
		select_list_ptr = select_sets.items.select_ptr (1);
		range_ptr = select_sets.items.range_ptr (1);
		ti_ptr = select_sets.items.ti_ptr (1);
	     end;
	else do;
		range_ptr = dbcb.range_ptr;		/* initialize */
		select_list_ptr = dbcb.select_ptr;
		ti_ptr = dbcb.ti_ptr;
	     end;
%page;
	if dbcb.ss_ptr ^= null then do;		/* if a "set" selection expr. */

		call mrds_dsl_retrieve$set_tuple (dbcb_ptr, area_ptr, simple_typed_vector_ptr, icode);
	     end;
	else do;					/* Not a "set" selection expr */

		call mrds_dsl_search (dbcb_ptr, area_ptr, icode);
		if icode = 0 then do;		/* if got hit, build temp rel tuple */
			old_vi = 0;
			simple_typed_vector_ptr -> simple_typed_vector.number_of_dimensions
			     = select_list.num_items;
			do i = 1 to select_list.num_items; /* put each attr value into tuple */
			     if old_vi ^= select_list.item.var_index (i) then do;
						/* do tuple init only if necessary */
				     old_vi = select_list.item.var_index (i);
				     rip = range.tup_var.ri_ptr (old_vi);
				     do j = 1 to tuple_info.num_tuples
					while (old_vi ^= tuple_info.tuple.var_index (j));
				     end;
				     st_ptr = tuple_info.tuple.tuple_ptr (j);
				end;		/* tuple init. */
			     traip = rm_rel_info.attr_ptrs (i);
			     sraip, rai_ptr = select_list.item.ai_ptr (i); /* target and source attr info ptrs */

			     simple_typed_vector_ptr ->
				simple_typed_vector.dimension (
				traip -> rm_attr_info.defn_order)
				.value_ptr = st_ptr ->
				simple_typed_vector.dimension (
				sraip -> rm_attr_info.defn_order)
				.value_ptr;
			end;			/* attr loop */
		     end;

	     end;					/* if not set */

	O_code = icode;
	X_t_ptr = simple_typed_vector_ptr;

exit:	return;
%page;
	dcl     addr		 builtin;
	dcl     area_ptr		 ptr;
	dcl     fixed		 builtin;
	dcl     i			 fixed bin;
	dcl     icode		 fixed bin (35);
	dcl     j			 fixed bin;
	dcl     mrds_data_$max_attributes fixed bin (35) ext static;
	dcl     mrds_data_$max_id_len	 fixed bin (35) ext;
	dcl     mrds_data_$max_select_items ext fixed bin (35);
	dcl     mrds_dsl_retrieve$set_tuple entry (ptr, ptr, ptr, fixed bin (35));
	dcl     mrds_dsl_search	 entry (ptr, ptr, fixed bin (35));
	dcl     null		 builtin;
	dcl     old_vi		 fixed bin;
	dcl     rel		 builtin;
	dcl     rip		 ptr;
	dcl     sraip		 ptr;
	dcl     st_ptr		 ptr;
	dcl     sys_info$max_seg_size	 fixed bin (35) ext static;
	dcl     traip		 ptr;
%page;
%include mrds_tuple_info;
%page;
%include mrds_dbcb;
%page;
%include mdbm_rm_db_info;
%page;
%include mrds_range;
%page;
%include mdbm_rm_rel_info;
%page;
%include mdbm_rm_domain_info;
%page;
%include mdbm_rm_attr_info;
%page;
%include mrds_select_list;
%page;
%include mrds_select_sets;
%page;
%include mdbm_descriptor;
%page;
%include vu_typed_vector;


     end mu_get_tuple;
