/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1981 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(86-05-14,Dupuis), approve(86-08-05,MCR7491), audit(86-08-08,Blair),
     install(86-08-15,MR12.0-1127):
     Added code to allocate and free the resultant_attributes_info_ptr
     structure (phx20301, mrds #154). Added a pointer to it as an additional
     parameter to the call to mu_sec_make_res.
                                                   END HISTORY COMMENTS */


/* HISTORY:

   Originally written by Jim Gray - - July 1979

   81-05-29 Jim Gray : combined functions of mrds_dsl_ready_file into
   this module, and changed to handle to resultant structure.

   81-09-15 Davids: added the rtrim operator.  this  was  needed  so
   that the module would compile when -prefix stringsize was used in
   the call to pl1. The length of rm_rel_array.name.submodel was not
   changed  to char (30) even though 30 characters is the max length
   because the current length of 32 is hard-wired in to the code  in
   several places.

   82-07-26 R. Harvey: fixed call to mrds_dsl_finish_file in cleanup
   handler to correspond with reality.

   82-10-05 Mike Kubicar : Converted this module for the relation manager.
   Specifically, the call to mrds_dsl_finish_file was remove (the module
   has been deleted) and replaced by a call to relation_manager_$close.  At
   the point that mrds_dsl_finish_file was called, no scopes had yet been
   set nor cursor created.  Thus, merely closing the relation will suffice.

   83-02-22 Bert Moberg : get temp segment and open submodel in this routine
   instead of mu_sec_make_res to save much time

   83-03-17 Bert Moberg : fixed bug where finish_code was used before it was
   inited; also did some clean up

*/

mrds_dsl_ready_all: ready_all: procedure (database_index, ready_mode, error_code);

/* DESCRIPTION:

   given a database index of an open database, and a file ready mode,
   this routine will ready all files that are not currently readied
   for that database, using the given ready mode.
   if an error occurs, any files that this
   routine has readied, will be finished so as to leave the user
   in a known state for his file ready modes

*/

/* PARAMETERS:

   database_index - - (input) fixed bin(35) integer returned by the call to mrds_dsl_open for this opening

   ready_mode - - (input) fixed bin integer between 1 and 6 representing correspondingly
   retrieve, monitor_retrieve, update, load, scope_retrieve, and scope_update
   file ready modes

   error_code - - (output) fixed bin(35) error type encoding, 0 unless an error occured

   sub_error_ - - (output) condition, signaled upon error occurence to provide more  info

*/
%page;
/* check for a recursive call */

	error_code = 0;				/* initialize */

	if previous_invocation then do;
		error_code = mrds_error_$no_recursion;
		call sub_err_ (error_code, caller_name, continue, info_ptr, return_value, "^/^a",
		     "Attempt to invoke this routine recursively, a release must be done first.");
	     end;
	else do;

		previous_invocation = ON;

/* initialize the "files to be readied list" cleanup */

		dbrdy_ptr = null ();
		temp_area_ptr = null ();
		submodel_iocb_ptr = null ();
		resultant_attributes_info_ptr = null;
		clean_up_condition = OFF;

		on cleanup begin;			/* in case user does a quit/release */
			clean_up_condition = ON;
			call clean_up ();
		     end;

/* make sure this is a legal database index */

		call get_pointers ();

		if error_code = 0 then do;


/* initialize the list of files to be readied */

			call init_file_list ();

/* get a list of all non-ready files for this database */

			do fa_index = 1 by 1 to rm_rel_array.num_rels;

			     call add_file ();	/* put in ready list */

			end;

/* ready each file in the list */

			call ready_files ();

		     end;

/* on error or cleanup, finish all files that we readied
   and get rid of the ready list we built */

		call clean_up ();

	     end;

	return;
%page;
get_pointers: procedure ();

/* get the nonsecure resultant segment pointer */

	call mu_database_index$get_resultant_model_pointer (database_index, dbcb_ptr);
	if dbcb_ptr = null () then do;
		error_code = mrds_error_$invalid_db_index;
		call sub_err_ (error_code, caller_name, continue, info_ptr, return_value, "^/^a ^d ^a",
		     "The database index", database_index, "does not refer to a known database open by this process.");
	     end;
	else do;

/* get secure resultant pointer */

		rdbi_ptr = dbcb.rdbi_ptr;

/* get the database db_model segment pointer */

		dbm_ptr = null;
		call hcs_$initiate ((rm_db_info.db_path), "db_model", "", 0, 0, dbm_ptr, error_code);
		if error_code = error_table_$moderr then do;
			call mrds_dm_authorization$set_needed_access (rtrim (rm_db_info.db_path), error_code);
			if error_code ^= 0 then
			     error_code = error_table_$moderr;
			else call hcs_$initiate ((rm_db_info.db_path), "db_model", "", 0, 0, dbm_ptr, error_code);
		     end;
		if dbm_ptr ^= null () then
		     error_code = 0;		/* in case already known to process, etc. */
		else call sub_err_ (error_code, caller_name, continue, info_ptr, return_value, "^/^a^a^a",
			"Unable to get a pointer to the database segment """,
			rtrim (rm_db_info.db_path) || ">db_model", """.");

/* get pointer to the file array */

		rmra_ptr = rm_db_info.ra_ptr;		/* array of files accessible by this users */

	     end;

     end;
%page;
init_file_list: procedure ();

/* fill in the header to the "files to be readied" list */

	if dbcb_ptr ^= null () then do;

		allocate db_rdy in (dbcb.static_area);
		db_rdy.frdy_ptr = null;
		db_rdy.dbi = database_index;
		db_rdy.dbcb_ptr = dbcb_ptr;
		db_rdy.db_model_ptr = dbm_ptr;

	     end;

     end;
%page;
add_file: procedure ();

/* fill in the next entry in the "files to be readied" list */

	allocate file_rdy in (dbcb.static_area);
	file_rdy.next = null;
	file_rdy.name = rtrim (rm_rel_array.name (fa_index).submodel);
	file_rdy.mode = ready_mode;
	file_rdy.file_array_index = fa_index;
	file_rdy.file_readied = OFF;

/* put the next file to ready in the list in order */

	if db_rdy.frdy_ptr = null () then do;
		db_rdy.frdy_ptr = frdy_ptr;		/* first on list */
		last_frdy_ptr = frdy_ptr;
	     end;
	else do;					/* put at end of list */
		last_frdy_ptr -> file_rdy.next = frdy_ptr;
		last_frdy_ptr = frdy_ptr;
	     end;

     end;
%page;
ready_files: procedure ();

	call mu_temp_segments$get_temp_segment (database_index, caller_name, temp_area_ptr, error_code);
	if error_code ^= 0 then
	     call sub_err_ (error_code, caller_name, continue, info_ptr, return_value, "^/^a",
		"Unable to get a tempoaray segment.");

	if dbcb.dsm_sw & error_code = 0 then do;
		call mrds_dsm_open$read ((rm_db_info.sm_path), submodel_iocb_ptr, error_code);
		if error_code ^= 0 then
		     call sub_err_ (error_code, caller_name, continue, info_ptr, return_value, "^/^a ^a",
			"Unable to open the submodel using the path -", rm_db_info.sm_path);
	     end;

/* allocate structure to keep track of duplicate rm_attr_info's */

	rai_init_number_of_attributes = mrds_data_$number_of_resultant_attributes;
	allocate resultant_attributes_info in (dbcb.static_area)
	     set (resultant_attributes_info_ptr);
	resultant_attributes_info.current_number_of_attributes = 0;

/* make a call to ready_file for each of the files in the ready list */

	do frdy_ptr = db_rdy.frdy_ptr repeat file_rdy.next
	     while (frdy_ptr ^= null () & error_code = 0);

	     call mu_sec_make_res (dbrdy_ptr, frdy_ptr, temp_area_ptr, submodel_iocb_ptr, resultant_attributes_info_ptr, error_code);

	     if error_code = error_table_$moderr |
		error_code = error_table_$no_info then /* no access on entry */
		error_code = mrds_error_$no_model_access;
	     else file_rdy.file_readied = ON;		/* even if not error free, so can be un-built */

	end;

     end;
%page;
clean_up: proc;

/* clear the database file ready list out of the dbcb area */
/* in addition, un-ready any files readied, if an error occured */

	declare hold_ptr		 ptr;
	declare rel_info_ptr	 ptr;

	finish_code = 0;
	if submodel_iocb_ptr ^= null () then do;
		call mrds_dsm_close (submodel_iocb_ptr, finish_code);
		if finish_code ^= 0 & ^clean_up_condition then
		     call sub_err_ (finish_code, caller_name, continue, info_ptr, return_value, "^/^a^a^a",
			"Unable to close the submodel during clean up.");
	     end;
	if temp_area_ptr ^= null () then do;
		call mu_temp_segments$delete_temp_segment (caller_name, temp_area_ptr, finish_code);
		if finish_code ^= 0 & ^clean_up_condition then
		     call sub_err_ (finish_code, caller_name, continue, info_ptr, return_value, "^/^a^a^a",
			"Unable to release a temp segment during clean up.");
	     end;

	if dbrdy_ptr ^= null () then do;

		do frdy_ptr = db_rdy.frdy_ptr repeat hold_ptr
		     while (frdy_ptr ^= null);

		     hold_ptr = file_rdy.next;

/* if an error occurred, any files that were in the ready list
   and were readied before the error occurence, must be finsihed,
   so as to leave the user in a known state.  Since no scopes have
   been set or cursors created, a file is finished merely by closing
   the relation. */

		     if (error_code ^= 0 | clean_up_condition) &
			file_rdy.file_readied
		     then do;
			     rel_info_ptr = rm_rel_array.rel_data (file_rdy.file_array_index).ri_ptr;
			     if rel_info_ptr ^= null then
				call dbcb.relmgr_entries.close (rel_info_ptr -> rm_rel_info.opening_id, finish_code);
			     if finish_code ^= 0 & ^clean_up_condition then
				call sub_err_ (finish_code, caller_name, continue, info_ptr, return_value, "^/^a^a^a",
				     "Unable to finish the file """, file_rdy.name, """ during clean up.");
			end;

		     free file_rdy in (dbcb.static_area);

		end;

		free db_rdy in (dbcb.static_area);
		dbrdy_ptr = null ();

	     end;

	     if resultant_attributes_info_ptr ^= null
	     then free resultant_attributes_info in (dbcb.static_area);

/* reset recursion flag */

	previous_invocation = OFF;

     end;
%page;
	declare (addr, fixed, null,
	        rel, rtrim)		 builtin;
	declare temp_area_ptr	 ptr;
	declare submodel_iocb_ptr	 ptr;
	declare error_code		 fixed bin (35);	/* error return status */
	declare database_index	 fixed bin (35);	/* database opening index */
	declare ready_mode		 fixed bin;	/*  between 1 and 6 for file ready mode */
	declare fa_index		 fixed bin;	/* index into file array */
	declare clean_up_condition	 bit (1);		/* on => cleanup has been signaled */
	declare cleanup		 condition;	/* signaled upond quit/release */
	declare last_frdy_ptr	 ptr;		/* points to last on list */
	declare ON		 bit (1) init ("1"b); /* true value */
	declare OFF		 bit (1) init ("0"b); /* false value */
	declare sub_err_		 entry options (variable); /* reports errors */
	declare caller_name		 char (18) init ("mrds_dsl_ready_all"); /* name of calling routine */
	declare continue		 char (1) init ("c"); /* dont stop after printing mesg */
	declare info_ptr		 ptr init (null ());/* unused */
	declare return_value	 fixed bin (35) init (0); /* unused */
	declare mu_database_index$get_resultant_model_pointer entry (fixed bin (35), ptr); /* gets resultant pointer */
	declare mrds_error_$invalid_db_index fixed bin (35) ext; /* not open db index */
	declare sys_info$max_seg_size	 fixed bin (35) ext;/* largest segment length */
	declare finish_code		 fixed bin (35);	/* discarded clean up error code */
	declare previous_invocation	 bit (1) init ("0"b) int static; /* recursion flag */
	declare mrds_error_$no_recursion fixed bin (35) ext; /* attempt to invoke recursively */
	declare error_table_$moderr	 fixed bin (35) ext;/* not enough access */
	declare mrds_dm_authorization$set_needed_access entry (char (*), fixed bin (35)); /* sets access for DBA types */
	declare error_table_$no_info	 fixed bin (35) ext;/* no acl to db_dir or db_model */
	declare mrds_data_$number_of_resultant_attributes fixed bin (35) external;
	declare mrds_error_$no_model_access fixed bin (35) ext; /* no access to model */
	dcl     mrds_dsm_close	 entry (ptr, fixed bin (35));
	dcl     mrds_dsm_open$read	 entry (char (*), ptr, fixed bin (35));
	dcl     mu_temp_segments$get_temp_segment entry (fixed bin (35), char (*), ptr, fixed bin (35));
	dcl     mu_temp_segments$delete_temp_segment entry (char (*), ptr, fixed bin (35));
	dcl     mu_sec_make_res	 entry (ptr, ptr, ptr, ptr, ptr, fixed bin (35));
	dcl     hcs_$initiate	 entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2),
				 ptr, fixed bin (35));
%page;
%include mdbm_db_file_list;
%page;
%include mdbm_rm_db_info;
%page;
%include mrds_dbcb;
%page;
%include mrds_res_attr_info;
%page;
%include mdbm_rm_rel_array;
%page;
%include mdbm_rm_rel_info;
%page;
%include mdbm_db_model;

     end;
