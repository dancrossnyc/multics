/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1976 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

mu_de_queue_user: de_queue_user: proc (open_sw, scope_sw, a_dbc_ptr, this_ul_ptr, code);


/*
   HISTORY:
   Written by Oris Friesen July 1977
   Modifidied by M. Pierret 13 April 1980 to remove priority queue.
*/

/* remove all traces of this user.
   Remove from
   -list of open users
   -list of active or waiting users

*/

	dcl     ophset		 bit (18) unal based; /* offset format */
	dcl     (ouo_ptr,				/* ptr to open_users_offset */
	        this_ul_ptr,			/* ptr to the user_list entry which is to be dequeued */
	        this_fl_ptr,			/* ptr to file_list entry to be de-queued */

	        auo_ptr,				/* ptr to active_users offset */
	        wuo_ptr,				/* ptr to waiting_users offset */
	        a_dbc_ptr)		 ptr;		/* ptr to data base control segment */
	dcl     code		 fixed bin (35);
	dcl     scope_sw		 bit (1) unal;	/* ON => free the file list for a user */
	dcl     open_sw		 bit (1) unal;	/* ON => de_queue from open list; OFF => de_queue only from active and waiting  and
						   priority lists */

	dcl     null		 builtin;
	dcl     addr		 builtin;
	dcl     fixed		 builtin;
	dcl     rel		 builtin;
	dcl     sys_info$max_seg_size	 fixed bin ext;

	dcl     mdbm_error_$unknown_proc_id fixed bin (35) ext;

%include mdbm_dbc;

%include mdbm_users;

	dcl     hold_open_mode	 fixed bin;	/* open mode of user being de-queued */

/* look at list of open users */
	dbc_ptr = a_dbc_ptr;
	ouo_ptr = addr (dbc.open_users_ofs);
	auo_ptr = addr (dbc.active_users_ofs);
	wuo_ptr = addr (dbc.waiting_users_ofs);

	if this_ul_ptr = null
	then call error (mdbm_error_$unknown_proc_id);
	else ul_ptr = this_ul_ptr;
	num_filns = 0;

	if user_list.active_sw
	then do;

		ul_ptr = convert (dbc_ptr, auo_ptr -> ophset);
		do while (ul_ptr ^= this_ul_ptr & ul_ptr ^= null);

		     auo_ptr = addr (user_list.next_active_ofs);
		     ul_ptr = convert (dbc_ptr, user_list.next_active_ofs);
		end;

		if ul_ptr = null then call error (mdbm_error_$unknown_proc_id);

		auo_ptr -> ophset = user_list.next_active_ofs;
		dbc.active_users = dbc.active_users - 1;
		user_list.next_active_ofs = NULL_OFS;
		user_list.active_sw = "0"b;
		user_list.passive_sw = "1"b;
	     end;

	else if user_list.waiting_sw
	then do;
		ul_ptr = convert (dbc_ptr, wuo_ptr -> ophset);
		do while (ul_ptr ^= this_ul_ptr & ul_ptr ^= null);
		     wuo_ptr = addr (user_list.next_waiting_ofs);
		     ul_ptr = convert (dbc_ptr, user_list.next_waiting_ofs);
		end;

		if ul_ptr = null then call error (mdbm_error_$unknown_proc_id);

		wuo_ptr -> ophset = user_list.next_waiting_ofs;
		dbc.waiting_users = dbc.waiting_users - 1;
		user_list.next_waiting_ofs = NULL_OFS;
		user_list.waiting_sw = "0"b;

	     end;

/* free all files referenced by this user only if the scope_sw is ON */

	if scope_sw then do;
		fl_ptr = convert (dbc_ptr, user_list.fil_list_ofs);
		do while (fl_ptr ^= null);
		     this_fl_ptr = convert (dbc_ptr, fil_list.next_ofs);
		     free fil_list in (dbc.static_area);
		     fl_ptr = this_fl_ptr;
		end;
		user_list.fil_list_ofs = NULL_OFS;
	     end;

	if open_sw then do;
		hold_open_mode = user_list.open_mode;

		ul_ptr = convert (dbc_ptr, ouo_ptr -> ophset);
		do while (ul_ptr ^= this_ul_ptr & ul_ptr ^= null);
		     ouo_ptr = addr (user_list.next_open_ofs);
		     ul_ptr = convert (dbc_ptr, user_list.next_open_ofs);
		end;
		if ul_ptr = null then call error (mdbm_error_$unknown_proc_id);

		ouo_ptr -> ophset = user_list.next_open_ofs;
		dbc.open_users = dbc.open_users - 1;


		free user_list in (dbc.static_area);
						/* finished */
		this_ul_ptr = null;			/* return a null pointer to caller */

	     end;
exit:
	return;

convert: proc (a_ptr, ofs) returns (ptr);

/* this procedure function converts an offset from "0"b to null
   or from the offset value to a pointer value within the segment denoted by a_ptr
*/

	dcl     result		 ptr;		/* the reultant pointer value */
	dcl     a_ptr		 ptr;		/* ptr to the segment to which the offset refers */
	dcl     ofs		 bit (18) unal;	/* the bit offset */

	dcl     (null, ptr)		 builtin;

	if ofs ^= NULL_OFS
	then result = ptr (a_ptr, ofs);
	else result = null;

	return (result);

     end convert;

error: proc (cd);

	dcl     cd		 fixed bin (35);

	code = cd;
	goto exit;

     end error;

     end mu_de_queue_user;

