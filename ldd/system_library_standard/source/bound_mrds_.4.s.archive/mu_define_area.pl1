/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

mu_define_area:
define_area:
     procedure (defined_area_ptr, area_size, area_name, extensible, no_freeing,
	zero_on_alloc, zero_on_free, error_code);

/* DESCRIPTION:

   This  is  a general routine to encapsulate the call to define_area_ and the
   initializing  of  the  area_info structure needed for that call.  Note that
   the area defined by this call must be deleted by a call to release_area_ to
   properly clean up any temp segments created.
   
   Notice:  If the caller's temp segment should be placed in the MRDS temp
   directory, the caller MUST call the define_temp_dir_area entry point which
   uses mu_temp_segs to get the temp segment. The segment may then be released
   by an appropriate call to mu_temp_segments.

   PARAMETERS:

   defined_area_ptr  -  -  (input/output)  pointer, points to the start of the
   area   to   be   defined  by  this  call.   also  the  address  pointed  by
   defined_area_ptr  must  be  even(0  mod  2).   if  null, then it's value is
   assigned, and a temp segment for the area is created.

   dbi - - (input) fixed bin (35), the database index which is associated with
   the area being defined. It is used for the call to mu_temp_segments.

   area_size - - (input) fixed bin(18), the size that the area will be defined
   to have, the initial size for extensible areas

   area_name  -  - (input) char(11), a name for the area, it will be used with
   extensible  areas  to name added segments following the {unique_name}.area.
   they should be of the form MRDS.store or LINUS.modify for identification.

   extensible  -  - (input) bit(1) aligned, ON => define this as an extensible
   area.  This will also cause the 'system' bit to come on in order to get the
   extension to be placed in the same directory.

   no_freeing  -  -  (input) bit(1) aligned, ON => define this as an area that
   will never have any freeing done, in order to make use of a faster allocate
   method.

   zero_on_alloc - - (input) bit(1) aligned, ON => zero out storage of a block
   to be allocated before returning from the allocation.

   zero_on_free - - (input) bit(1) aligned, ON => zero out storage of block at
   the time it is being freed.

   error_code  -  -  (output)  fixed bin(35), 0 unless an error occured in the
   call to define_area_ or while getting a temp segment.
   
   
   
   HISTORY:

   80-02-01 Jim Gray : Originally written.
   
   81-07-07  Rickie  E.   Brinegar:  Modified  to  always  pass define_area_ a
   non-null  pointer.   MRDS  now  handles getting and releasing temp segments
   only using define_area_ to reset the header of the area.

   82-07-08 R. Harvey: Modified to set system bit on extensible areas and to
   copy a static structure for speed.

   83-01-27 R. Harvey: Added define_temp_dir_area entry point.

   85-01-15 Thanh Nguyen: Added define_spec_temp_dir_area entry point to create
   our own space manager in the economic way of allocate without freeing.
*/

/* initialize the area_info, based on input parameters */

	error_code = 0;
	if defined_area_ptr = null then
	     call get_temp_segment_ (area_name, defined_area_ptr, error_code);
	goto COMMON;



define_temp_dir_area:
     entry (defined_area_ptr, dbi, area_size, area_name, extensible,
	no_freeing, zero_on_alloc, zero_on_free, error_code);

	error_code = 0;
	if defined_area_ptr = null () then
	     call mu_temp_segments$get_temp_segment (dbi, area_name, defined_area_ptr, error_code);



COMMON:
	if error_code = 0 then do;
		static_area_info.control.extend = extensible;
		static_area_info.control.zero_on_alloc = zero_on_alloc;
		static_area_info.control.zero_on_free = zero_on_free;
		static_area_info.control.no_freeing = no_freeing;
		if extensible then static_area_info.control.system = "1"b;
		static_area_info.owner = area_name;
		static_area_info.size = area_size;
		static_area_info.areap = defined_area_ptr;

/* now make the call to define the area according to the parameters */

		call define_area_ (addr (static_area_info), error_code);
	     end;					/* error_code = 0 */


	return;
%page;
define_spec_temp_dir_area: entry (defined_area_ptr, dbi, area_name, error_code);

/* This entry defines a special area which is the temporary segment is created
   as any other temporary segment in MRDS, but it only be initialized by
   subroutine mrds_area_initialize (mrds_area_initialize.incl.pl1) and 
   allocated by function allocate (mdbm_allocate.incl.pl1).

   For now, this entry is only called by mrds_dsl_retrieve, mrds_dsl_modify,
   mrds_dsl_store, mrds_dsl_compile and mrds_dsl_define_temp_rel to create the
   "mrds area" for the allocation of value_for_user in module mu_retrieve.
 */

	error_code = 0;
	if defined_area_ptr = null then
	     call mu_temp_segments$get_temp_segment (dbi, area_name, defined_area_ptr, error_code);
	if error_code = 0 then
	     call mrds_area_initialize (defined_area_ptr);

	return;
%page;
%include mrds_area_initialize;
%page;
	declare defined_area_ptr	 ptr;		/* points to area to be defined */
	declare dbi		 fixed bin (35);	/* data base index */
	declare area_size		 fixed bin (18);	/* size of area to be defined */
	declare area_name		 char (11);	/* name to be given to area and extended segs */
	declare (extensible, zero_on_alloc, zero_on_free, no_freeing) bit (1) aligned;
						/* parameters area is to have */

	dcl     1 static_area_info	 aligned internal static,
		2 version		 fixed bin init (1),/* version number for this structure is 1 */
		2 control		 aligned,		/* control bits for the area */
		  3 extend	 bit (1) unal init ("0"b), /* says area is extensible */
		  3 zero_on_alloc	 bit (1) unal init ("0"b), /* says block gets zerod at allocation time */
		  3 zero_on_free	 bit (1) unal init ("0"b), /* says block gets zerod at free time */
		  3 dont_free	 bit (1) unal init ("0"b), /* debugging aid, turns off free requests */
		  3 no_freeing	 bit (1) unal init ("0"b), /* for allocation method without freeing */
		  3 system	 bit (1) unal init ("0"b), /* says area is managed by system */
		  3 pad		 bit (30) unal init ((30)"0"b),
		2 owner		 char (32) unal init (""), /* creator of the area */
		2 n_components	 fixed bin init (0),/* number of components in the area (returned only) */
		2 size		 fixed bin (18) init (0), /* size of the area in words */
		2 version_of_area	 fixed bin init (1),/* version of area (returned only) */
		2 areap		 ptr init (null ()),/* pointer to the area (first component on multisegment area) */
		2 allocated_blocks	 fixed bin init (0),/* number of blocks allocated */
		2 free_blocks	 fixed bin init (0),/* number of free blocks not in virgin */
		2 allocated_words	 fixed bin (30) init (0), /* number of words allocated in the area */
		2 free_words	 fixed bin (30) init (0); /* number of words free in area not in virgin */

	declare define_area_	 entry (ptr, fixed bin (35)); /* routine that defines an area */
	declare error_code		 fixed bin (35);	/* error status encoding */
	dcl     mu_temp_segments$get_temp_segment entry (fixed bin (35), char (*), ptr, fixed bin (35));
	dcl     get_temp_segment_	 entry (char (*), ptr, fixed bin (35));
						/* get a seg to define the area on */
	dcl     (addr, null)	 builtin;



     end;

