/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

mrds_dsl_thread_fn_list: proc (dbcb_ptr, fn_entry, code);

/* NOTES:

   Procedure to fill in a scalfn_info block for a builtin or declared scalar
   function, given a pointer to the entry in the text portion of the object
   segment.
*/

/* HISTORY:

   76-06-01 J. A. Weeldreyer: Initially written.

   80-11-17 Rickie E. Brinegar: Modified to accept an initiated entry in the
   form of fn_entry instead of a pointer to the initiated segment.
*/

%include mrds_dbcb;

%include definition;

%include entry_sequence_info;

%include object_info;

%include mrds_scalfn_info;

%include mdbm_seg_area;

	dcl     (b_ptr,				/* pointer to base of object */
	        d_ptr,				/* ptr to definition block */
	        e_ptr,				/* pointer to entry sequence */
	        pd_ptr,				/* pointer to parameter descriptor offsets */
	        s_ptr)		 ptr;		/* pointer to seg. definition block */

	dcl     fn_entry		 entry variable;	/* Input: initiated function entry */

	dcl     i			 fixed bin;	/* internal index */

	dcl     (code,				/* Output: status code */
	        icode)		 fixed bin (35);	/* internal status code */

	dcl     name		 char (32) var;	/* function name */
	dcl     1 obj_info		 aligned like object_info; /* place for object information */
	dcl     bc		 fixed bin (24);	/* bit count of object seg */
	dcl     stype		 fixed bin (2);	/* type code of object seg */
	dcl     1 acc		 aligned based,	/* template for acc string */
		2 len		 fixed bin (8) unal,
		2 string		 char (0 refer (acc.len)) unal;
	dcl     bit36		 bit (36) based;	/* template for descriptor */

	dcl     mrds_error_$cant_ref_fun fixed bin (35) ext static;
	dcl     sys_info$max_seg_size	 fixed bin (35) ext static;

	dcl     (addr,
	        addrel,
	        codeptr,
	        fixed,
	        null,
	        ptr,
	        rel)		 builtin;

	dcl     hcs_$status_mins	 entry (ptr, fixed bin (2), fixed bin (24), fixed bin (35));
	dcl     object_info_$brief	 entry (ptr, fixed bin (24), ptr, fixed bin (35));
	dcl     get_definition_	 entry (ptr, char (*), char (*), ptr, fixed bin (35));

	sfi_ptr = null;				/* initiallize */


	b_ptr = ptr (codeptr (fn_entry), 0);		/* point to base of object */
	call hcs_$status_mins (b_ptr, stype, bc, icode);	/* get bit count of object */
	if icode ^= 0 then call error (mrds_error_$cant_ref_fun);
	call object_info_$brief (b_ptr, bc, addr (obj_info), icode); /* get info on obj seg */
	if icode ^= 0 then call error (mrds_error_$cant_ref_fun);
	e_ptr = addrel (codeptr (fn_entry), -2);	/* point to entry sequence */
	if e_ptr -> entry_sequence.flags.has_descriptors then do; /* if have args */
		pd_ptr = addrel (obj_info.textp, e_ptr -> entry_sequence.descr_relp_offset); /* point to parameter descriptors */
		nsfi_args_init = fixed (pd_ptr -> parm_desc_ptrs.n_args) - 1; /* no. input args */
	     end;
	else nsfi_args_init = 0;
	allocate scalfn_info in (dbcb.static_area);	/* allocate. an info block */
	scalfn_info.fwd_ptr = dbcb.sfi_ptr;		/* fill in the block */
	scalfn_info.entry_ptr = codeptr (fn_entry);
	d_ptr = addrel (obj_info.defp, e_ptr -> entry_sequence.def_relp); /* point to def. block */
	name = addrel (obj_info.defp, d_ptr -> definition.symbol) -> acc.string; /* function name */
	scalfn_info.name = name;

	if e_ptr -> entry_sequence.flags.has_descriptors then do; /* if fixed input */
		scalfn_info.info_ent_ptr = null;	/* no info entry in this case */
		scalfn_info.rslt_desc = addrel (obj_info.textp, pd_ptr -> parm_desc_ptrs.descriptor_relp
		     (nsfi_args_init + 1)) -> bit36;	/* last arg is result */
		do i = 1 to scalfn_info.nargs;	/* fill in input descriptors */
		     scalfn_info.arg_desc (i) = addrel (obj_info.textp, pd_ptr -> parm_desc_ptrs.descriptor_relp (i)) -> bit36;
		end;
	     end;					/* if fixed args */

	else do;					/* no descriptors, variable args */
		scalfn_info.rslt_desc = "0"b;
		scalfn_info.nargs = 0;
		s_ptr = addrel (obj_info.defp, d_ptr -> definition.segname); /* point to def. block for seg. */
		call get_definition_ (obj_info.defp, addrel (obj_info.defp, s_ptr -> definition.symbol) -> acc.string,
		     name || "_info", d_ptr, icode);	/* definition of corr. info entry */
		if icode ^= 0 then call error (mrds_error_$cant_ref_fun);
		scalfn_info.info_ent_ptr = addrel (obj_info.textp, d_ptr -> definition.value);
	     end;					/* if variable args */

	dbcb.sfi_ptr = sfi_ptr;			/* put block at head of list */
	code = 0;
exit:	return;

error: proc (cd);

/* error procedure */

	dcl     cd		 fixed bin (35);

	code = cd;
	go to exit;

     end error;

     end mrds_dsl_thread_fn_list;
