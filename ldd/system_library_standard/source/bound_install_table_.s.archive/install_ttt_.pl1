/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(85-07-15,EJSharpe), approve(86-02-20,MCR7303),
     audit(85-11-07,Coren), install(86-04-23,MR12.0-1045):
     add security auditing
  2) change(87-03-17,LJAdams), approve(87-04-03,MCR7646),
     audit(87-05-05,Gilcrease), install(87-05-14,MR12.1-1030):
     Added check for current TTT_version_3.
  3) change(88-01-26,Brunelle), approve(88-01-26,MCR7813),
     audit(88-10-05,Blair), install(88-10-17,MR12.2-1171):
     Upgrade to TTT_version_4 which encompassed c_chars expansion.
                                                   END HISTORY COMMENTS */


/* format: style2 */
install_ttt_:
     procedure (TTT_pointer, Wordcount, Complaint, Code);

/* install_ttt_ installs a ttt in ring 1 for an administrator.

   taken from up_ttt_ of december 1981

   This program checks a candidate TTT for acceptability and installs it.
   Written 6/27/77 by Robert Coren
   Bug fix August 1977 by T. Casey
   Bug fix July 1978 by T. Casey
   Fix to check offset of function key table in each tte 5/29/81 by Suzanne Krupp
   Modified November 1981, E. N. Kittlitz.  user_table_entry conversion.
   Modified December 1981, Benson I. Margulies. Renamed to install_ttt_
            and changed to install to ring 1 and stop cross-checking with cdt
   Modified December 1984, Keith Loepere, for new version create_branch_info.
*/

/* This program is called through install_gate_ */


	declare TTT_pointer		 pointer;		/* Supplied segment */
	declare Wordcount		 fixed bin (18) unsigned;
	declare Complaint		 character (*);	/* explanation of rejection */
	declare Code		 fixed bin (35);	/* status code */

/* ENTRIES */

	dcl     access_audit_r1_$log_general
				 entry options (variable);
	dcl     admin_gate_$syserr_error_code
				 entry options (variable);
	dcl     initiate_file_	 entry (char (*), char (*), bit (*), ptr, fixed bin (24), fixed bin (35));
	dcl     get_wdir_		 entry () returns (char (168));
	dcl     get_group_id_	 entry returns (char (32));
	dcl     get_group_id_$tag_star entry () returns (char (32));
	dcl     hcs_$set_safety_sw_seg entry (ptr, bit (1), fixed bin (35));
	dcl     hcs_$set_damaged_sw_seg
				 entry (ptr, bit (1), fixed bin (35));
	dcl     hcs_$replace_acl	 entry (char (*), char (*), ptr, fixed bin, bit (1), fixed bin (35));
	dcl     hcs_$create_branch_	 entry (char (*), char (*), ptr, fixed bin (35));
	dcl     hcs_$truncate_seg	 entry (ptr, fixed bin (19), fixed bin (35));
	dcl     cu_$level_get	 entry returns (fixed bin (3));
	dcl     cu_$level_set	 entry (fixed bin (3));
	dcl     get_ring_		 entry () returns (fixed bin (3));
	dcl     pathname_		 entry (char (*), char (*)) returns (char (168));
	dcl     set_lock_$lock	 entry (bit (36) aligned, fixed bin, fixed bin (35));
	dcl     set_lock_$unlock	 entry (bit (36) aligned, fixed bin (35));
	dcl     terminate_file_	 entry (ptr, fixed bin (24), bit (*), fixed bin (35));
						/* cauise a segfault at least in this process */
	dcl     (get_temp_segment_, release_temp_segment_)
				 entry (character (*), pointer, fixed bin (35));

	declare access_operations_$install_table
				 bit (36) aligned ext static;

	declare error_table_$locked_by_this_process
				 fixed bin (35) ext static;
	declare error_table_$invalid_lock_reset
				 fixed bin (35) ext static;
	declare error_table_$smallarg	 fixed bin (35) ext static;
	declare error_table_$invalid_ascii
				 fixed bin (35) ext static;
	declare error_table_$unimplemented_version
				 fixed bin (35) ext static;
	declare error_table_$zero_length_seg
				 fixed bin (35) ext static;
	declare error_table_$noentry	 fixed bin (35) ext static;
	declare error_table_$improper_data_format
				 fixed bin (35) ext static;

/* AUTOMATIC */

	dcl     1 auto_event_flags	 aligned like audit_event_flags;
	dcl     code		 fixed bin (35);
	dcl     complaint		 character (128);
	dcl     highest		 fixed bin;
	dcl     i			 fixed bin;
	dcl     j			 fixed bin;
	dcl     tabp		 ptr;
	dcl     locked		 bit (1) aligned;
          dcl     path		 char (168) varying;
	dcl     saved_level		 fixed bin (3);
	dcl     saved_proc_group_id	 character (32) aligned;
	dcl     system_tttp		 pointer;
          dcl     wdir                   char (168);
	dcl     wordcount		 fixed bin (18) unsigned;

/* INTERNAL STATIC */

	dcl     TTT_dir		 character (168) init (">system_control_1") internal static;
	dcl     TTT_entryname	 character (32) init ("ttt") internal static;

	dcl     ME		 character (32) init ("install_ttt_") options (constant) internal static;
	dcl     LEGAL_CHARS		 char (37) int static options (constant)
				 init ("ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_");

/* BASED */

	dcl     rp		 (7) fixed bin (18) based;

	declare ttt_seg_copy_var	 (wordcount) bit (36) aligned based;
	declare 1 system_ttt	 aligned like ttt based (system_tttp);
						/* BUILTIN */

/* CONDITIONS */

	declare cleanup		 condition;
	declare seg_fault_error	 condition;

	dcl     (addr, bin, clock, hbound, length, null, rel, rtrim, string, substr, verify)
				 builtin;

	saved_level = -1;
	tttp, system_tttp = null;
	locked = "0"b;
	on cleanup call clean_up;

	saved_level = cu_$level_get ();

	wordcount = Wordcount;
	code = 0;
	complaint = "";
	path = "";

	if wordcount < 64
	then do;
		complaint = "Supplied TTT less than 64 words long.";
		code = error_table_$smallarg;
		go to ERROR_RETURN;
	     end;

/* First copy supplied TTT to keep it from being modified */
/* after being approved */

	call get_temp_segment_ (ME, tttp, code);
	if code ^= 0
	then do;
		complaint = "Could not get temp segment.";
		call admin_gate_$syserr_error_code (SYSERR_LOG_OR_DISCARD, code, "install_ttt_: ^a", complaint);
		go to ERROR_RETURN;
	     end;

	tttp -> ttt_seg_copy_var = TTT_pointer -> ttt_seg_copy_var;
						/* WHUMP */

/* From now on look only at the copy */

	if ttt.version ^= TTT_version_4
	then do;					/* Check right overlay dcl */
		complaint = "incorrect table version";
		code = error_table_$unimplemented_version;
		go to ERROR_RETURN;
	     end;

	ttt.author.proc_group_id = get_group_id_ ();	/* no fibbing */
	ttt.author.lock = ""b;			/* it will be unlocked when we install */
	ttt.last_install_time = 0;			/* set for real below */
	ttt.author.table = "ttt";
          wdir = get_wdir_ ();			/* Validation level not yet set down, so its callers wdir */
	ttt.author.w_dir = substr (wdir, 1, length(ttt.author.w_dir));

/* Now initiate system ttt in real ring, and check access */

	call cu_$level_set (get_ring_ ());

	call initiate_file_ (TTT_dir, TTT_entryname, RW_ACCESS, system_tttp, (0), code);
	if code = error_table_$zero_length_seg
	then code = 0;				/* we may be replacing a busted segment */

	if code = error_table_$noentry
	then call try_to_create_ttt (code);
	if code ^= 0
	then do;
		path = pathname_ (TTT_dir, TTT_entryname);
		complaint = "Incorrect access to " || path;
		string (auto_event_flags) = ""b;
		auto_event_flags.admin_op = "1"b;
		call access_audit_r1_$log_general (ME, (saved_level), string (auto_event_flags),
		     access_operations_$install_table, "system terminal type table (TTT)", code, null (), (0));
		go to ERROR_RETURN;
	     end;
	else do;
		string (auto_event_flags) = ""b;
		auto_event_flags.grant = "1"b;
		auto_event_flags.admin_op = "1"b;
		call access_audit_r1_$log_general (ME, (saved_level), string (auto_event_flags),
		     access_operations_$install_table, "system terminal type table (TTT)", code, null (), (0));
	     end;

	on seg_fault_error /* Damaged ttt? */
	     begin;				/* we turn it off and truncate seg. If this installation
	        fails the next try will work no worse for it. */

		call hcs_$set_damaged_sw_seg (system_tttp, "0"b, (0));
		call hcs_$truncate_seg (system_tttp, 0, (0));
	     end;

	highest = system_ttt.highest_coded_type;

	revert seg_fault_error;			/* it was broken or it was not */

	call set_lock_$lock (system_tttp -> ttt.author.lock, (0), code);
	if code = error_table_$invalid_lock_reset | code = error_table_$locked_by_this_process
						/* force */
	then code = 0;
	if code ^= 0
	then do;
		complaint = "TTT lock for installation by " || system_tttp -> ttt.author.proc_group_id;
		go to ERROR_RETURN;
	     end;

	locked = "1"b;

/* Whether or not the new ttt gets installed, leave our group id */
/* there for an informative message to someone else locked out */
/* if the installation fails, the old one will get put back */

	saved_proc_group_id = system_tttp -> ttt.author.proc_group_id;
	system_tttp -> ttt.author.proc_group_id = ttt.author.proc_group_id;

	do i = 1 to ttt.n_tt_entries;			/* do a quick check on each terminal type entry */
	     ttep = addr (ttt.tt_entries (i));
	     if verify (rtrim (tte.name), LEGAL_CHARS) ^= 0
						/* cv_ttf wouldn't have done this */
	     then do;
		     complaint = rtrim (tte.name) || " not a valid terminal type name";
		     code = error_table_$invalid_ascii;
		     go to ERROR_RETURN;
		end;

	     call check_offset (tte.initial_string.offset);
						/* make sure all offsets are at least within TTT */
	     call check_offset (tte.additional_info.offset);
	     tabp = addr (tte.tables);
	     do j = 1 to 7;
		call check_offset (tabp -> rp (j));
	     end;

/* find old entry for same type (if any) */

	     do j = 1 to system_ttt.n_tt_entries while (system_ttt.tt_entries (j).name ^= tte.name);
	     end;

	     if j > system_ttt.n_tt_entries		/* there wasn't any */
	     then highest, tte.coded_type = highest + 1;
	     else tte.coded_type = system_ttt.tt_entries (j).coded_type;
	end;

	ttt.highest_coded_type = highest;		/* whether it changed or not */

/* we are ready to install it now */

	wordcount = ttt.total_ttt_size;		/* We should validate this! */

	ttt.last_install_time = clock ();		/* for ttt_info_ */

	system_tttp -> ttt_seg_copy_var = tttp -> ttt_seg_copy_var;
	call set_lock_$unlock (system_tttp -> ttt.author.lock, (0));
	locked = "0"b;

	call terminate_file_ (system_tttp, wordcount * 36, TERM_FILE_TRUNC_BC, code);
	if code ^= 0
	then call admin_gate_$syserr_error_code (SYSERR_LOG_OR_DISCARD, code,
		"install_ttt_: could not set bitcount and terminate ttt.");

	call release_temp_segment_ (ME, tttp, (0));

	Code = 0;
	return;

ERROR_RETURN:
	call clean_up;
	Complaint = complaint;
	Code = code;
	return;

check_offset:
     proc (offset);

/* an internal procedure that makes sure offset is within TTT */

	dcl     offset		 fixed bin (18);

	if offset ^= 0				/* 0 is OK, of course */
	then if offset > ttt.total_ttt_size | offset < bin (rel (addr (ttt.tables)))
						/* can't have it pointing into type entries */
	     then do;
		     complaint = "Invalid offset in entry for type " || tte.name;
		     code = error_table_$improper_data_format;
		     go to ERROR_RETURN;
		end;

	return;
     end check_offset;

clean_up:
     procedure;
	if tttp ^= null
	then call release_temp_segment_ (ME, tttp, (0));
	tttp = null;
	if system_tttp ^= null
	then do;
		if locked
		then do;
			call set_lock_$unlock (system_tttp -> ttt.author.lock, (0));
			system_tttp -> ttt.author.proc_group_id = saved_proc_group_id;
		     end;
		call terminate_file_ (system_tttp, (0), TERM_FILE_TERM, (0));
		locked = "0"b;
		system_tttp = null;
	     end;
	if saved_level > 0
	then call cu_$level_set (saved_level);
	saved_level = -1;
     end clean_up;

try_to_create_ttt:
     procedure (code);

	declare code		 fixed bin (35);
	declare 1 cbi		 aligned like create_branch_info;
	declare 1 segment_acl	 (3) aligned,
		2 access_name	 character (32),
		2 modes		 bit (36) aligned,
		2 xmodes		 bit (36) aligned,
		2 status_code	 fixed bin (35);

	cbi.version = create_branch_version_2;
	string (cbi.switches) = ""b;
	cbi.parent_ac_sw = "1"b;			/* inherit system low from >sc1 */
	cbi.mode = RW_ACCESS;
	cbi.mbz2 = ""b;
	cbi.rings (1) = get_ring_ ();
	cbi.rings (2) = 5;
	cbi.rings (3) = 5;
	cbi.userid = get_group_id_ ();		/* Us, others to be added */
	cbi.bitcnt = 0;				/* more later */
	cbi.quota, cbi.dir_quota = 0;
	cbi.access_class = ""b;

	code = 0;

	call hcs_$create_branch_ (TTT_dir, TTT_entryname, addr (cbi), code);
	if code ^= 0
	then return;				/* No such luck */
	call initiate_file_ (TTT_dir, TTT_entryname, RW_ACCESS, system_tttp, (0), code);
	if code = error_table_$zero_length_seg
	then code = 0;
	call hcs_$set_safety_sw_seg (system_tttp, "1"b, (0));
						/* not absolutely neccessary */

	segment_acl (*).xmodes = ""b;
	segment_acl (*).status_code = 0;

	segment_acl (1).access_name = get_group_id_$tag_star ();
	segment_acl (1).modes = RW_ACCESS;
	segment_acl (2).access_name = "*.SysDaemon.*";	/* even if default goes away */
	segment_acl (2).modes = RW_ACCESS;
	segment_acl (3).access_name = "*.*.*";
	segment_acl (3).modes = R_ACCESS;

	call hcs_$replace_acl (TTT_dir, TTT_entryname, addr (segment_acl), hbound (segment_acl, 1), "0"b, code);
	if code ^= 0
	then call admin_gate_$syserr_error_code (SYSERR_LOG_OR_DISCARD, code, "install_ttt_: could not set acl of ttt.")
		;
	code = 0;					/* this is still enough to go ahead with installation */
     end try_to_create_ttt;

%page;
%include access_mode_values;
%page;
%include author_dcl;
%page;
%include create_branch_info;
%page;
%include terminate_file;
%page;
%include ttt;
%page;
%include access_audit_eventflags;
%page;
%include syserr_constants;

debug:
     entry (d, e);
	dcl     (d, e)		 char (*);

	TTT_dir = d;
	TTT_entryname = e;
	return;
     end install_ttt_;
