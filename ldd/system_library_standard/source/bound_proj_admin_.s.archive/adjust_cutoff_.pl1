/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


adjust_cutoff_:
     procedure (bv_pdtep, bv_time_now);

/* ADJUST_CUTOFF_ - program to fix up absolute cutoff. */

/****^  HISTORY COMMENTS:
  1) change(1986-02-01,Gilcrease), approve(1986-03-27,MCR7369),
     audit(1986-06-20,LJAdams), install(1986-06-30,MR12.0-1081):
     Dummy hcom for first comment. Modified 750702 by PG to correct operation
     when called more than once with same time.
  2) change(1986-03-27,Gilcrease), approve(1986-03-27,MCR7369),
     audit(1986-06-20,LJAdams), install(1986-06-30,MR12.0-1081):
        Add increment of one week for weekly cutoffs SCP 6250.
  3) change(1999-06-23,Haggett):
     Y2K
  4) change(2016-01-15,Swenson), approve(2016-01-15,MCR10003):
     Fix to support 4-character time zone abbreviations.
                                                   END HISTORY COMMENTS */


/* parameters */

dcl (bv_pdtep ptr,
     bv_time_now fixed bin (71)) parameter;

/* automatic */

dcl (pdtep, pdtp) ptr,
    (mm, dd, yy) fixed bin,
     time_of_day fixed bin (71),			/* placeholder only */
     day_of_week fixed bin,				/* .. */
     time_zone char (4) aligned,			/* .. */
     time_now fixed bin (71);

/* internal static */

dcl  NEVER fixed bin (71) int static options (constant) init (4418064000000000);
dcl  bigfloat float bin int static options (constant) init (1e37);

dcl (static_mm, static_dd, static_yy) fixed bin int static,
     oldtime fixed bin (71) int static init (-1);

/* entries */

dcl  decode_clock_value_ entry (fixed bin (71), fixed bin, fixed bin, fixed bin, fixed bin (71),
     fixed bin, char (4) aligned),
     datebin_$revert entry (fixed bin, fixed bin, fixed bin, fixed bin, fixed bin, fixed bin, fixed bin (71));

/* include files */

%include user_attributes;
%include pdt;


/* program */

	pdtep = bv_pdtep;
	time_now = bv_time_now;

	if time_now > user.absolute_cutoff then do;	/* have we past the cutoff date? */
	     if user.absolute_cutoff = 0 then do;	/* special case. old-style segment, thing never set */
		user.absolute_cutoff = NEVER;		/* Default shd be open, never, never */
		if user.absolute_limit = 0e0 then user.absolute_limit = bigfloat;
		return;
	     end;
	     if user.absolute_increm = 0 then return;	/* 0 = never */

	     if oldtime ^= time_now then do;		/* optimize common case for up_pdt_ */
		oldtime = time_now;
		call decode_clock_value_ (time_now, static_mm, static_dd, static_yy, time_of_day, day_of_week, time_zone);
	     end;

	     mm = static_mm;
	     dd = static_dd;
	     yy = static_yy;

	     if user.absolute_increm = 1 then do;	/* 1 = daily */
		dd = dd + 1;
	     end;
	     else if user.absolute_increm = 2 then do;	/* 2 = monthly */
		mm = mm + 1;
		dd = 1;
	     end;
	     else if user.absolute_increm = 3 then do;	/* 3 = yearly */
		yy = yy + 1;
	     end;
	     else if user.absolute_increm = 4 then do;	/* 4 = calendar yr */
		mm = 1;
		dd = 1;
		yy = yy + 1;
	     end;
	     else if user.absolute_increm = 5 then do;	/* 5 = year starting July 1 */
		dd = 1;
		if mm ^< 7 then yy = yy + 1;
		mm = 7;
	     end;
	     else if user.absolute_increm = 6 then do;	/* 6 = weekly */
		dd = dd + 7;
	     end;
	     else return;				/* garbage increment code */

	     call datebin_$revert (mm, dd, yy, 0, 0, 0, user.absolute_cutoff);
	     user.absolute_spent = 0e0;		/* reset spending since we changed the cutoff date */
	end;

	return;

     end;
