/* ***************************************************************
   *                                                             *
   * Copyright, (C) Honeywell Information Systems Inc., 1982     *
   *                                                             *
   * Copyright (c) 1975 by Massachusetts Institute of Technology *
   *                                                             *
   *************************************************************** */


	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* Name:  lex_string_							*/
	/*									*/
	/*    This procedure implements the scanning function for reduction_compiler translators. */
	/*									*/
	/* Status:								*/
	/* 1) Modified:  September 8, 1984 by G. C. Dixon: fix reference thru unset pointer	*/
	/*    (phx18140); change to remove compilation warnings.				*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

	

	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

lex_string_:
	procedure	(APstr, ALstr, Parea, AS,
		 Aquote_open, Aquote_close, Acomment_open, Acomment_close, Astmt_delim, breaks,
		 ignored_breaks, lex_delims, lex_control_chars, APstmt, APtoken, code);

     dcl						/*	PARAMETERS			*/
	APstr			ptr,		/* ptr to characters to be ignored, followed by	*/
						/* string to be lexed. (In)			*/
	ALstr			fixed bin(21),	/* length of string to be lexed. (In)		*/
	ALstr_ignore		fixed bin(21),	/* number of characters to be ignored,		*/
						/* prior to the string. (In)			*/
	Parea			ptr,		/* ptr to temporary segment in which tokens are	*/
						/* to be created.  The temporary segment must be	*/
						/* one created by translator_temp_. (In)	*/
	AS			bit(*),		/* control switches (see S and Signore). (In)	*/
	Aquote_open		char(*),		/* opening delimiter of quoted strings. (In)	*/
	Aquote_close		char(*),		/* closing delimiter of quoted strings. (In)	*/
	Acomment_open		char(*),		/* delimiter of comment's beginning. (In)	*/
	Acomment_close		char(*),		/* delimiter of comment's ending. (In)		*/
	Astmt_delim		char(*),		/* delimiter of statement's ending. (In)	*/
	breaks			char(*) var aligned,/* list of break characters. (In)		*/
	ignored_breaks		char(*) var aligned,/* chars in the break list for which no output	*/
						/* token is to be created. (In)		*/
	lex_delims		char(*) var aligned,/* string of all possible lexical delimiter chars.*/
						/* (In)					*/
	lex_control_chars		char(*) var aligned,/* string of control chars (1/lex_delim-char).(In)*/
	APstmt			ptr,		/* ptr to chain of statement descriptors. (Out)	*/
	APtoken			ptr,		/* ptr to chain of token descriptors. (Out)	*/
	code			fixed bin(35);	/* a status code. (Out)			*/

     dcl						/*	AUTOMATIC VARIABLES			*/
	Lquote_copy		fixed bin(21),	/* length of copy of a quoted string with	*/
						/* doubled quotes removed.			*/
	Lquote_incr		fixed bin(21),	/* length of part of quoted string between 2	*/
						/* doubled quotes.				*/
	Lquote_str		fixed bin(21),	/* length of entire quoted string.		*/
	Lstr			fixed bin(21),	/* length of unlexed part of string. (in chars)	*/
	Lstr_search		fixed bin(21),	/* length of unlexed string beyond false delim.	*/
	Ndoubled_quotes		fixed bin,	/* number of doubled quotes in quoted string.	*/
	Nlines			fixed bin(21),	/* number of lines lexed so far.		*/
	Nstmt			fixed bin,	/* number stmts lexed so far in line being parsed.*/
	Ntokens_in_stmt		fixed bin,	/* number of tokens in statement when last 	*/
						/* comment was lexed (or, if stmts aren't being	*/
						/* output, then total number of tokens lexed).	*/
	Pquote_copy		ptr,		/* ptr to copy of quoted string.		*/
	Pquote_str		ptr,		/* ptr to quoted string.			*/
	Pstr			ptr,		/* ptr to unlexed part of string.		*/
	Pstr_search		ptr,		/* ptr to unlexed string beyond false delim.	*/
	Sarg			bit(36) aligned,	/* aligned fixed-length copy of AS.		*/
	1 Snew_line		aligned,
	  2 quote_open		bit(1),		/* on if open quote delimiter contains new-line.	*/
	  2 quote_close		bit(1),		/* on if close quote delimiter contains new-line.	*/
	  2 comm_open		bit(1),		/* on if comment open delim contains new-line.	*/
	  2 comm_close		bit(1),		/* on if comment close delim contains new-line.	*/
	  2 stmt_delim		bit(1),		/* on if stmt delim contains new-line.		*/
	Sreuse_token		bit(1) aligned init ("0"b),
						/* on if a token was unmade, and can be reused.	*/
	ch			char(1) aligned,	/* a character temp.			*/
	comment_close		char(4) varying aligned,
	comment_open		char(4) varying aligned,
						/* aligned fixed-length copy of Acomment_open.	*/
	delim_control_char		char(1) aligned,	/* a break control character (see delim).	*/
	doubled_quote		char(8) varying aligned,
						/* representation of quoting delimiter within a	*/
						/* quoted string.				*/
						/* aligned fixed-length copy of Acomment_close.	*/
	i			fixed bin(21),	/* string index.				*/
	j			fixed bin,	/* string index.				*/
	k			fixed bin(21),	/* string index.				*/
	l			fixed bin(21),	/* string index.				*/
	quote_close		char(4) varying aligned,
						/* aligned fixed-length copy of Aquote_close.	*/
	quote_open		char(4) varying aligned,
						/* aligned fixed-length copy of Aquote_open.	*/
	spec_lex_control_chars	char(36) varying aligned,
						/* control chars for delimiters in next variable.	*/
	spec_lex_delims		char(36) varying aligned,
						/* delimiter characters: 1st char of quote, stmt,	*/
						/* comment-open and comment-close delimiters.	*/
	stmt_delim		char(4) varying aligned;
						/* aligned fixed-length copy of stmt_delim.	*/

     dcl						/*	BASED VARIABLES			*/
	1 S			unaligned based (addr (Sarg)),
						/* input argument switches for lex_string_.	*/
	  2 output_stmts		bit(1),		/* on if stmt descriptors are to be output.	*/
	  2 output_comments		bit(1),		/* on if comment tokens are to be output.	*/
	  2 retain_doubled_quotes	bit(1),		/* on if doubled quoting delimiters within a	*/
						/* quoted string are to be retained instead of	*/
						/* being converted to single quotes.		*/
	  2 equate_comment_close_stmt_delim		/* on if comment_close and stmt delims are equal,	*/
				bit(1),		/* and if a comment_close delim is also to be	*/
						/* treated as a stmt delim.			*/
	1 Signore			unaligned based (addr (Sarg)),
						/* input argument switches for init_lex_delims 	*/
	  2 quote			bit(1),		/* on if quoting delimiters are not to be output	*/
						/* as tokens.				*/
	  2 stmt			bit(1),		/* on if statement delimiters are not to be	*/
						/* output as tokens.			*/
	1 delim			unaligned based (addr (delim_control_char)),
						/* switches overlaying delimiter control chars.	*/
	  2 white_space,				/* switch on if char cannot appear at beginning	*/
	    3 S			bit(1),		/* of a stmt (ie, stmt adjusted to exclude char).	*/
	  2 new_line,				/* switch on if delimiter char is a new-line.	*/
	    3 S			bit(1),
	  2 comment_open,				/* switch on if delimiter char is 1st char	*/
	    3 S			bit(1),		/* of a comment-open delimiter.		*/
	  2 quote_open,				/* switch on if delimiter char is 1st char	*/
	    3 S			bit(1),		/* of an open quote delimiter.		*/
	    3 Signore		bit(1),		/* on if quoting delimiter is not to be output	*/
						/* as a token.				*/
	  2 stmt,					/* switch on if delimiter char is 1st char	*/
	    3 S			bit(1),		/* of a statement delimiter.			*/
	    3 Signore		bit(1),		/* on if statement delimiter is not to be output	*/
						/* as a token.				*/
	  2 break,
	    3 S			bit(1),		/* switch on if delimiter char is a break.	*/
	    3 Signore		bit(1),		/* on if break char is not to be output as a token*/
	first_str_char		char(1) based (Pstr),
						/* first char of unparsed remainder of string.	*/
	quote_copy		char(Lquote_copy) based (Pquote_copy),
						/* copy of quoted string in which doubled quotes	*/
						/* have been converted to single quotes.	*/
	quote_copy_array (Lquote_copy)
				char(1) based (Pquote_copy),
						/* array overlaying quote_copy.		*/
	quote_str			char(Lquote_str) based (Pquote_str),
						/* the original quoted string.		*/
	quote_str_array (Lquote_str)	char(1) based (Pquote_str),
						/* array overlaying quote_str.		*/
	str			char(Lstr) based (Pstr),
						/* remainder of string to be lexed.		*/
	str_array (Lstr)		char(1) based (Pstr),
						/* remainder of string to be lexed, as an array.	*/
	str_search		char(Lstr_search) based (Pstr_search);
						/* remainder of string to be lexed beyond a false	*/
						/*   delimiter.				*/

	%include lex_descriptors_;

     dcl						/*	BUILTIN FUNCTIONS			*/
	(addr, collate, copy, index, length, min, null, search, size, string, substr)
				builtin;

     dcl						/*	STATIC VARIABLES			*/
	NL			char(1) aligned int static init ("
"),
	NP			char(1) aligned int static init (""),
         (error_table_$no_stmt_delim,
	error_table_$unbalanced_quotes,
	error_table_$zero_length_seg)	fixed bin(35) ext static,
	max_Lvalue		fixed bin(18) int static init (262143);
						/* 2**18 - 1;  the largest value which can be	*/
						/* stored in a fixed bin(18) number.		*/

	Nlines = 1;				/* Perform initialization for old entry point.	*/
	Pstr = APstr;
	Lstr = ALstr;
	go to init;


lex:	entry    (APstr, ALstr, ALstr_ignore, Parea, AS,
		Aquote_open, Aquote_close, Acomment_open, Acomment_close, Astmt_delim, breaks,
		ignored_breaks, lex_delims, lex_control_chars, APstmt, APtoken, code);

	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
	/*							*/
	/* PRE-INITIALIZATION:					*/
	/*							*/
	/*  1) Count the number of <new-line> characters in the lines to be	*/
	/*     ignored, so we can put correct line numbers into the tokens.	*/
	/*							*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

	Nlines = 1;
	Pstr = APstr;
	Lstr = ALstr_ignore;
	do while (Lstr > 0);
	     i = index(str,NL);
	     if i = 0 then do;
		Pstr = addr(str_array(Lstr+1));
		Lstr = 0;
		end;
	     else do;
		Nlines = Nlines + 1;
		Pstr = addr(str_array(i+1));
		Lstr = Lstr - i;
		end;
	     end;
	Lstr = ALstr;


	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
	/*							*/
	/* INITIALIZATION:						*/
	/*							*/
	/*  1) Copy arguments.					*/
	/*  2) If creating statement (stmt) descriptors, as well as token	*/
	/*     descriptors, create the first stmt descriptor.		*/
	/*  3) Set switches if quoting, comment-open, comment-close, or stmt	*/
	/*     delimiters contains a new-line character.			*/
	/*							*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

init:	Sarg = AS;
	S.output_comments = S.output_comments & S.output_stmts;
	quote_open = Aquote_open;
	quote_close = Aquote_close;
	doubled_quote = quote_close;
	doubled_quote = doubled_quote || quote_close;
	comment_open = Acomment_open;
	comment_close = Acomment_close;
	stmt_delim = Astmt_delim;

	if S.output_stmts & (length(stmt_delim) > 0) then do;
		/* stmt descriptors being output.			*/
	     Pstmt = allocate (Parea, size(stmt));
	     stmt.version = 1;
	     stmt.size = size(stmt);
	     stmt.Pnext = null;
	     stmt.Plast = null;
	     stmt.Pvalue = Pstr;
	     stmt.Lvalue = Lstr;
		/* Length of stmt will be computed by subtracting characters*/
		/* remaining in string being lexed (str) after last token	*/
		/* of stmt is lexed from chars in str before first token	*/
		/* of stmt is lexed.  stmt_ subroutine does computation.	*/
	     stmt.Pfirst_token = null;
	     stmt.Plast_token = null;
	     stmt.Ntokens = 0;
		/* token_ subroutine fills in last 3 values.		*/
	     stmt.Puser = null;
	     stmt.semant_type = 0;
	     stmt.Pcomments = null;
	     stmt.line_no = Nlines;
	     stmt.Istmt_in_line = 1;
	     string(stmt.group2.S) = "0"b;
	     APstmt = Pstmt;
	     end;
	else do;	/* No stmt descriptors being output.			*/
	     APstmt = null;
	     Ntokens_in_stmt = 0;
	     end;
		/* str has not yet ended with a stmt delimiter.		*/
	APtoken = null;
	code = 0;

	string(Snew_line) = "0"b;
	if length(quote_open) > 0 then
	     if index(quote_open,NL) > 0 then
		Snew_line.quote_open = "1"b;
	if length(quote_close) > 0 then
	     if index(quote_close,NL) > 0 then
		Snew_line.quote_close = "1"b;
	if length(comment_open) > 0 then
	     if index(comment_open,NL) > 0 then
		Snew_line.comm_open = "1"b;
	if length(comment_close) > 0 then
	     if index(comment_close,NL) > 0 then
		Snew_line.comm_close = "1"b;
	if length(stmt_delim) > 0 then
	     if index(stmt_delim,NL) > 0 then
		Snew_line.stmt_delim = "1"b;
	if S.equate_comment_close_stmt_delim then
	     if comment_close = stmt_delim then
		if length(stmt_delim) > 0 then;
		else S.equate_comment_close_stmt_delim = "0"b;
	     else S.equate_comment_close_stmt_delim = "0"b;
		/* Begin lexing the first line.			*/

	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
	/*							*/
	/* PERFORM LEXICAL ANALYSIS:					*/
	/*							*/
	/*  1) str overlays only the characters at the end of the input	*/
	/*     which remain to be lexed.  The address and length of		*/
	/*     str are adjusted after each token is lexed to cause str to	*/
	/*     overlay only the unlexed characters of interest to the lexer.	*/
	/*  2) str is repeatedly lexed for tokens until it is exhausted.	*/
	/*  3) Lexing is performed by searching for lexical delimiters in str.*/
	/*  4) For each lexical delimiter found, the following is done:	*/
	/*     a) If the delimiter is not at the very beginning of str, then	*/
	/*	a token preceeds it.  Create a descriptor for this token.	*/
	/*     b) Access the control character for the found delimiter.  This	*/
	/*	character is a group of bits (see delim) which specify	*/
	/*	what type of delimiter was found, and whether or not the	*/
	/*	delimiter should be ignored or should be represented by a	*/
	/*	token.  Delimiter types include: quoting char, comment	*/
	/*	opening char, comment closing char, and stmt delimiter, or	*/
	/*	a regular break character or new-line character.		*/
	/*     c)	If the delimiter is a new-line char, increment the line	*/
	/*	counter.  If the new-line occurs at the beginning of a stmt,*/
	/*	update stmt descriptors line-no-of-stmt value.		*/
	/*     d) If delimiter is a quoting char (or 1st char of a multi-char	*/
	/*	quoting delimiter), then process the quoted string and the	*/
	/*	trailing quoting character(s).			*/
	/*     e) If delimiter is a comment opening char (or 1st char of a	*/
	/*	multi-char comment opening delimiter), then process the	*/
	/*	comment, including the comment closing character(s).	*/
	/*     f) If the delimiter is a stmt termination delimiter, then	*/
	/*	perform stmt termination functions and new stmt initiation	*/
	/*	functions, creating a token for stmt terminator if req'd.	*/
	/*     g) If the delimiter is a regular break, create a token for it	*/
	/*	unless it is to be ignored.  If an ignored break is a	*/
	/*	white-space char and it appears at the beginning of a stmt,	*/
	/*	exclude it from the body of the stmt.			*/
	/*  5) If no more delimiters are found but some part of str remains,	*/
	/*     it is considered to be a token;  build a token descriptor.	*/
	/*							*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

LEX:
	do while (Lstr > 0);
	     i = search(str, lex_delims);
RE_LEX:	     if i = 0 then do;
		/* No more delimiters, but some of str left.  It's a token.	*/
		call token_(Pstr, Lstr);
		Lstr = 0;
		go to END_LEX;
		end;

	     if i > 1 then do;
		/* Token appears before delimiter.			*/
		call token_(Pstr, i-1);
		Pstr = addr(str_array(i));
		Lstr = Lstr - (i-1);
		/* Adjust str to overlay part of str beyond token.	*/
		end;

	     delim_control_char = substr(lex_control_chars, index(lex_delims, first_str_char), 1);

	     if delim.quote_open.S then
		if length(quote_open) = 1 then do;
		     call quote_;
		     go to END_LEX;
		     end;
		else if Lstr >= length(quote_open) then
		     if substr(str,1,length(quote_open)) = quote_open then do;
			call quote_;
			go to END_LEX;
			end;

	     if delim.comment_open.S then
		if length(comment_open) = 1 then do;
		     call comment_;
		     go to END_LEX;
		     end;
		else if Lstr >= length(comment_open) then
		     if substr(str,1,length(comment_open)) = comment_open then do;
			call comment_;
			go to END_LEX;
			end;

	     if delim.stmt.S then
		if length(stmt_delim) = 1 then do;
		     call stmt_;
		     go to END_LEX;
		     end;
		else if Lstr >= length(stmt_delim) then
		     if substr(str,1,length(stmt_delim)) = stmt_delim then do;
			call stmt_;
			go to END_LEX;
			end;

	     if delim.new_line.S then do;
		Nlines = Nlines + 1;
		if S.output_stmts then
		     if stmt.Pvalue = Pstr then do;
			stmt.line_no = stmt.line_no + 1;
			stmt.Istmt_in_line = 1;
			end;
		end;

	     if delim.white_space.S then
		if S.output_stmts then
		     if stmt.Pvalue = Pstr then do;
			stmt.Pvalue = addr(str_array(2));
			stmt.Lvalue = stmt.Lvalue - 1;
			end;

	     if delim.break.S then do;
		if delim.break.Signore then;
		else
		     call token_(Pstr, 1);
		if Lstr = 1 then
		/* avoid performing substr beyond end of str.		*/
		     Lstr = 0;
		else do;
		     Pstr = addr(str_array(2));
		     Lstr = Lstr - 1;
		     end;
		go to END_LEX;
		end;

		/* The break character which was found is not a real 	*/
		/* delimiter, but is just the first character of a comment,	*/
		/* quoting, or statement delimiter.  Ignore it.		*/
	     if i > 1 then call unmake_token_;
		/* get rid of any token thought to precede the break.	*/
	     Pstr_search = addr(str_array(i+1));
	     Lstr_search = Lstr - i;
	     k = search(str_search,lex_delims) + i;
	     if k = i then
		i = 0;
	     else
		i = k;
	     go to RE_LEX;

END_LEX:
	     end LEX;

	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
	/*							*/
	/* TERMINATION:						*/
	/*							*/
	/*  1) If stmt's are being delimited but string being lexed did not	*/
	/*     end with a stmt delimiter, return an error code.		*/
	/*     If it did end with a stmt delimiter, get rid of the last stmt	*/
	/*     descriptor (the newest one which is empty), and make the stmt	*/
	/*     descriptor for the stmt containing the last stmt delimiter be	*/
	/*     the last stmt descriptor.				*/
	/*  2) Return ptr-to/length-of unused portion of output storage area.	*/
	/*							*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

	if length(stmt_delim) > 0 then
	     if APtoken = null then do;
		code = error_table_$zero_length_seg;
		if S.output_stmts then
		     APstmt = null;
		end;
	     else if token.S.end_of_stmt then
		if S.output_stmts then do;
		     Pstmt = stmt.Plast;
		     stmt.Pnext = null;
		     end;
		else;
	     else
		code = error_table_$no_stmt_delim;
	else if APtoken = null then
	     code = error_table_$zero_length_seg;

	return;

	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
	/*							*/
	/* COMMENTS:						*/
	/*							*/
	/*  1) Process comments in three parts:  the comment opening	*/
	/*     delimiter;  the comment;  the comment closing delimiter.	*/
	/*  2) Skip over the comment opening delimiter.			*/
	/*  3) If comments are being output, create a token for the comment.	*/
	/*  4) Increment line counter for any new-line chars in comment.	*/
	/*  5) Skip over the comment closing delimiter.			*/
	/*  6) If the string being lexed ends with a comment, and no closing	*/
	/*     delimiter is found for the comment, ignore this condition.	*/
	/*							*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

comment_:
	proc;

	if Lstr = length(comment_open) then do;
		/* str exhausted in mid-comment. That's OK.		*/
	     Lstr = 0;
	     return;
	     end;
	else do;
	     Pstr = addr(str_array(length(comment_open)+1));
	     Lstr = Lstr - length(comment_open);
	     if Snew_line.comm_open then
		Nlines = Nlines + 1;
	     end;

	k = index (str, comment_close);

	if k = 0 then do;
		/* remainder of str is the comment.  No comment close delim.*/
	     if S.output_comments then
		call comment_token_(Pstr, Lstr);
	     Lstr = 0;
	     return;
	     end;

	if S.output_comments then
	     call comment_token_(Pstr, k-1);

	k = k-1;
	do while (k > 0);
	     Pstr_search = Pstr;
	     Lstr_search = k;
	     j = index(str_search,NL);
	     if j = 0 then
		j = k;
	     else
		Nlines = Nlines + 1;
	     Pstr = addr(str_array(j+1));
	     Lstr = Lstr - j;
	     k = k - j;
	     end;
	if S.equate_comment_close_stmt_delim then;
	else if Lstr = length(comment_close) then
		/* lexing comment close delim exhausts str.		*/
	     Lstr = 0;
	else do;
	     Pstr = addr(str_array(length(comment_close)+1));
	     Lstr = Lstr - length(comment_close);
	     if Snew_line.comm_close then
		Nlines = Nlines + 1;
	     end;
	if S.output_stmts then
	     if stmt.Ntokens = 0 then do;
		stmt.Pvalue = Pstr;
		stmt.Lvalue = Lstr;
		stmt.line_no = Nlines;
		stmt.Istmt_in_line = 1;
		end;

	end comment_;

	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
	/*							*/
	/* COMMENT DESCRIPTORS:					*/
	/*							*/
	/*  1) Allocate a new token descriptor; chain it onto stmt descr.	*/
	/*  2) Set flags indicating position of comment relative to beginning	*/
	/*     of stmt and relative to the previous comment in this stmt.	*/
	/*							*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

comment_token_:
	proc     (P, L);

     dcl
	P			ptr,		/* ptr to comment.	*/
	L			fixed bin(21);	/* length of comment*/

	if stmt.Pcomments = null then do;
	     Pcomment = allocate (Parea, size(comment));
	     stmt.Pcomments = Pcomment;
	     comment.Plast = null;
	     string(comment.S) = "0"b;
	     Ntokens_in_stmt = stmt.Ntokens;
	     end;
	else do;
	     comment.Pnext = allocate (Parea, size(comment));
	     comment.Pnext -> comment.Plast = comment.Pnext;
	     Pcomment = comment.Pnext;
	     string(comment.S) = "0"b;
	     if Ntokens_in_stmt = stmt.Ntokens then
		comment.S.contiguous = "1"b;
	     Ntokens_in_stmt = stmt.Ntokens;
	     end;
	comment.version = 1;
	comment.size = size(comment);
	comment.Pnext = null;
	comment.Pvalue = P;
	comment.Lvalue = min(max_Lvalue,L);
	comment.line_no = Nlines;
	if stmt.Ntokens = 0 then
	     comment.S.before_stmt = "1"b;

	end comment_token_;

	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
	/*							*/
	/* QUOTED STRINGS:						*/
	/*							*/
	/*  1) Process quoted strings in three parts:  open quoting delim;	*/
	/*     quoted string;  close quoting delimiter.			*/
	/*  2) If quoting delimiters are not being ignored, create a token	*/
	/*     for the begin quoting delim.				*/
	/*  3) Search for the end of the quoted string, taking into account	*/
	/*     doubled quoting delimiters appearing in the string which	*/
	/*     represent occurrences of the quoting delimiter in the string.	*/
	/*     If the end quoting delim is not found, return an error code and*/
	/*     assume that the remainder of str is the quoted string.	*/
	/*  4) If doubled quoting delimiters appear within the quoted string	*/
	/*     and doubled quotes are _n_o_t being retained, copy the quoted	*/
	/*     string, translating doubled quotes into the single quote	*/
	/*     representation they should have in an unquoted string.	*/
	/*  5) Create a token representing the quoted string (or its copy).	*/
	/*  6) Increment the line counter for any new-line chars which appear	*/
	/*     in the quoted string.					*/
	/*  6) If quoting delimiters are not being ignored, create a token	*/
	/*     for the end quoting delim.				*/
	/*							*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

quote_:
	proc;

	if delim.quote_open.Signore then;
	else
	     call token_(Pstr, length(quote_open));
	if Lstr = length(quote_open) then do;
	     /* begin quote delim appears at end of str.			*/
	     Lstr = 0;
	     code = error_table_$unbalanced_quotes;
	     return;
	     end;
	else do;
	     Pstr = addr(str_array(length(quote_open)+1));
	     Lstr = Lstr - length(quote_open);
	     if Snew_line.quote_open then
		Nlines = Nlines + 1;
	     end;

	k = index(str,quote_close);
	if k = 0 then do;
	     call token_(Pstr, Lstr);
	     token.S.quoted_string = "1"b;
	     Lstr = 0;
	     code = error_table_$unbalanced_quotes;
	     return;
	     end;

	l = index(str,doubled_quote);

	if l ^= k then do;
		/* No doubled quoting delims appear in the quoted string.	*/
	     k = k-1;
	     call token_(Pstr, k);
	     token.S.quoted_string = "1"b;
	     do while (k > 0);
		Pstr_search = Pstr;
		Lstr_search = k;
		j = index(str_search,NL);
		if j = 0 then
		     j = k;
		else
		     Nlines = Nlines + 1;
		Pstr = addr(str_array(j+1));
		Lstr = Lstr - j;
		k = k - j;
		end;
	     end;
	else do;
		/* Doubled quotes were found within the quoted string.	*/
		/*  1) Compute length of quoted string, including doubled	*/
		/*     quotes.					*/
		/*  2) Count number of doubled quotes as length is computed.*/
		/*  3) Unless doubled quotes are to be retained, copy the	*/
		/*     quoted string, translating double to single quotes.	*/
		/*  4) Create a token for the quoted string (or its copy).	*/
	     Pquote_str = Pstr;
	     Lquote_str = 0;
	     Ndoubled_quotes = 0;

	     do while (l = k);
		/* Do until end of quoted string is found.		*/
		Lquote_incr = (l-1) + length(doubled_quote);
		Lquote_str = Lquote_str + Lquote_incr;
		Ndoubled_quotes = Ndoubled_quotes + 1;
		if Lstr = Lquote_incr then do;
		     Lstr = 0;
		     code = error_table_$unbalanced_quotes;
		     go to DONE_QUOTING;
		     end;
		Pstr = addr(str_array(Lquote_incr+1));
		Lstr = Lstr - Lquote_incr;

		k = index(str, quote_close);
		if k = 0 then do;
		     Lquote_str = Lquote_str + Lstr;
		     Lstr = 0;
		     code = error_table_$unbalanced_quotes;
		     go to DONE_QUOTING;
		     end;

		l = index(str,doubled_quote);
		end;

	     Lquote_str = Lquote_str + (k-1);
	     Pstr = addr(str_array(k));
	     Lstr = Lstr - (k-1);

DONE_QUOTING:
	     if S.retain_doubled_quotes then do;
		Pquote_copy = Pquote_str;
		Lquote_copy = Lquote_str;
		end;
	     else do;
	          Lquote_copy = Lquote_str - (Ndoubled_quotes * length(quote_close));
		Pquote_copy = allocate (Parea, size(quote_copy));
	          Lquote_copy = 0;
	     
	          do while (Lquote_str > 0);
	               k = index(quote_str, quote_close);
	               if k = 0 then do;
	                    Lquote_copy = Lquote_copy + Lquote_str;
	                    substr(quote_copy, Lquote_copy-Lquote_str+1) = quote_str;
	                    Lquote_str = 0;
	                    end;
	               else do;
	                    Lquote_copy = Lquote_copy + k;
	                    substr(quote_copy, Lquote_copy-(k-1)) = quote_str;
	                    Pquote_str = addr(quote_str_array(k+2));
	                    Lquote_str = Lquote_str - (k+1);
	                    end;
	               end;
		end;
	     
	     call token_(Pquote_copy,Lquote_copy);
	     token.S.quoted_string = "1"b;
	     token.S.quotes_in_string = "1"b;
	     token.S.quotes_doubled = S.retain_doubled_quotes;
	     do while (Lquote_copy > 0);
		j = index(quote_copy,NL);
		if j = 0 then
		     j = Lquote_copy;
		else
		     Nlines = Nlines + 1;
		if Lquote_copy > j then
		     Pquote_copy = addr(quote_copy_array(j+1));
		Lquote_copy = Lquote_copy - j;
		end;
	     if Lstr = 0 then
		return;
	     end;

	if delim.quote_open.Signore then;
	else
	     call token_(Pstr,length(quote_close));
	if Lstr = length(quote_close) then
	     Lstr = 0;
	else do;
	     Pstr = addr(str_array(length(quote_close)+1));
	     Lstr = Lstr - length(quote_close);
	     if Snew_line.quote_close then
		Nlines = Nlines + 1;
	     end;

	end quote_;

	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
	/*							*/
	/* STATEMENT DESCRIPTORS:					*/
	/*							*/
	/*  1) If stmt delims are not being ignored, create a stmt delim token*/
	/*  2) If stmt descriptors are being output, fill in remaining values	*/
	/*     for current stmt, and create next stmt descriptor.  Otherwise,	*/
	/*     reset count of tokens in stmt so tokens will have good count.	*/
	/*							*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

stmt_:
	proc;

	if delim.stmt.Signore then;
	else
	     call token_(Pstr,length(stmt_delim));
	if APtoken ^= null then
	     token.S.end_of_stmt = "1"b;

	if Lstr = length(stmt_delim) then
	     Lstr = 0;
	else do;
	     Pstr = addr(str_array(length(stmt_delim)+1));
	     Lstr = Lstr - length(stmt_delim);
	     if Snew_line.stmt_delim then
		Nlines = Nlines + 1;
	     end;

	if S.output_stmts then do;
	     stmt.Lvalue = min(max_Lvalue, stmt.Lvalue - Lstr);
	     if stmt.line_no = Nlines then
		Nstmt = stmt.Istmt_in_line + 1;
	     else
		Nstmt = 1;
	     stmt.Pnext = allocate (Parea, size(stmt));
	     stmt.Pnext -> stmt.Plast = Pstmt;
	     Pstmt = stmt.Pnext;
	     stmt.version = 1;
	     stmt.size = size(stmt);
	     stmt.Pnext = null;
	     stmt.Pvalue = Pstr;
	     stmt.Lvalue = Lstr;
	     stmt.Pfirst_token = null;
	     stmt.Plast_token = null;
	     stmt.Puser = null;
	     stmt.Pcomments = null;
	     stmt.Ntokens = 0;
	     stmt.semant_type = 0;
	     stmt.line_no = Nlines;
	     stmt.Istmt_in_line = Nstmt;
	     string(stmt.group2.S) = "0"b;
	     end;

	else
	     Ntokens_in_stmt = 0;

	end stmt_;

	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
	/*							*/
	/* TOKEN DESCRIPTORS:					*/
	/*							*/
	/*  1) Allocate a new token descriptor, chained onto previous one.	*/
	/*     If a used token already exists, reuse it.			*/
	/*  2) Fill in the token descriptor from input arguments.		*/
	/*  3) If stmt descriptors are being output, fill in token's stmt	*/
	/*     position information and stmt descriptor's token information.	*/
	/*  4) If this is the first token, fill in argument ptr to token chain*/
	/*							*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

token_:
	proc     (P, L);

     dcl
	P			ptr,		/* ptr to token.	*/
	L			fixed bin(21);	/* length of token.	*/

	if Sreuse_token then Sreuse_token = "0"b;
	else
	     if APtoken = null then do;
	          Ptoken = allocate (Parea, size(token));
	          token.Plast = null;
	          APtoken = Ptoken;
	          end;
	     else do;
	          token.Pnext = allocate (Parea, size(token));
	          token.Pnext -> token.Plast = Ptoken;
	          Ptoken = token.Pnext;
	          end;
	token.version = 1;
	token.size = size(token);
	token.Pnext = null;
	token.Pvalue = P;
	token.Lvalue = min(max_Lvalue,L);
	token.Nvalue = 0;
	string(token.S) = "0"b;

	if S.output_stmts then do;
	     token.Pstmt = Pstmt;
	     stmt.Ntokens = stmt.Ntokens + 1;
	     token.Itoken_in_stmt = stmt.Ntokens;
	     stmt.Plast_token = Ptoken;
	     if stmt.Pfirst_token = null then
		stmt.Pfirst_token = Ptoken;
	     end;
	else do;
	     token.Pstmt = null;
	     Ntokens_in_stmt = Ntokens_in_stmt + 1;
	     token.Itoken_in_stmt = Ntokens_in_stmt;
	     end;

	token.Psemant = null;
	token.line_no = Nlines;

	end token_;

	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
	/*							*/
	/* DELETING THE LAST TOKEN WHICH WAS CREATED:			*/
	/*							*/
	/* 1) Set a flag indicating that the last token descriptor is to be	*/
	/*    reused in the next call to token_.			*/
	/* 2) Adjust the bounds of the string to include the last token.	*/
	/* 3) Adjust token counts in statement descriptor or temp. counter.	*/
	/*							*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

unmake_token_:	procedure;

	Sreuse_token = "1"b;
	Pstr = token.Pvalue;
	Lstr = Lstr + token.Lvalue;
	if S.output_stmts then do;
	     stmt.Ntokens = stmt.Ntokens - 1;
	     if stmt.Plast_token = stmt.Pfirst_token then do;
		stmt.Pfirst_token = null;
		stmt.Plast_token  = null;
		end;
	     else stmt.Plast_token  = token.Plast;
	     end;
	else Ntokens_in_stmt = Ntokens_in_stmt - 1;

	end unmake_token_;

	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
	/*							*/
	/* INITIALIZE LEX DELIMITERS:					*/
	/*							*/
	/*  1) Input includes the quote delimiters, comment-open delimiter,	*/
	/*     comment-close delimiter, stmt delimiter, break characters,	*/
	/*     ignored break characters, and switches indicating whether	*/
	/*     quote delimiters and stmt delimiters are to be ignored.	*/
	/*  2) Create a lex_delims character string consisting of the first	*/
	/*     character of the quote delimiter, comment-open delimiter,	*/
	/*     stmt delimiter, along with a new-line char and the other	*/
	/*     white-space chars (all ASCII control chars except BS & HT),	*/
	/*     and each of the user-specified break characters.		*/
	/*  3) For each character in lex_delims, create a corresponding char	*/
	/*     in lex_control_chars specifying what type of the lex_delim	*/
	/*     character is.  (Each character of lex_control_chars can be	*/
	/*     overlaid by the delim bit string structure.)		*/
	/*							*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

init_lex_delims:
	entry    (Aquote_open, Aquote_close, Acomment_open, Acomment_close, Astmt_delim, AS,
		breaks, ignored_breaks, lex_delims, lex_control_chars);

	quote_open = Aquote_open;
	comment_open = Acomment_open;
	stmt_delim = Astmt_delim;
	Sarg = AS;

	lex_delims = "";
	lex_control_chars = "";
	spec_lex_delims = "";
	spec_lex_control_chars = "";

	if length(quote_open) > 0 then do;
	     ch = substr(quote_open,1,1);
	     spec_lex_delims = ch;
	     string(delim) = "0"b;
	     delim.quote_open.S = "1"b;
	     delim.quote_open.Signore = Signore.quote;
	     spec_lex_control_chars = delim_control_char;
	     end;

	if length(comment_open) > 0 then do;
	     ch = substr(comment_open,1,1);
	     if length(spec_lex_delims) > 0 then
		i = index(spec_lex_delims,ch);
	     else
		i = 0;
	     if i > 0 then
		delim_control_char = substr(spec_lex_control_chars,i,1);
	     else do;
		spec_lex_delims = spec_lex_delims || ch;
		string(delim) = "0"b;
		end;
	     delim.comment_open.S = "1"b;
	     if i > 0 then
		substr(spec_lex_control_chars,i,1) = delim_control_char;
	     else
		spec_lex_control_chars = spec_lex_control_chars || delim_control_char;
	     end;

	if length(stmt_delim) > 0 then do;
	     ch = substr(stmt_delim,1,1);
	     if length(spec_lex_delims) > 0 then
		i = index(spec_lex_delims,ch);
	     else
		i = 0;
	     if i > 0 then
		delim_control_char = substr(spec_lex_control_chars,i,1);
	     else do;
		spec_lex_delims = spec_lex_delims || ch;
		string(delim) = "0"b;
		end;
	     delim.stmt.S = "1"b;
	     delim.stmt.Signore = Signore.stmt;
	     if i > 0 then
		substr(spec_lex_control_chars,i,1) = delim_control_char;
	     else
		spec_lex_control_chars = spec_lex_control_chars || delim_control_char;
	     end;

	do k = 1 to length(breaks);
	     ch = substr(breaks,k,1);
	     if length(spec_lex_delims) > 0 then
		i = index(spec_lex_delims,ch);
	     else
		i = 0;
	     if i > 0 then
		delim_control_char = substr(spec_lex_control_chars,i,1);
	     else do;
		lex_delims = lex_delims || ch;
		string(delim) = "0"b;
		end;
	     delim.break.S = "1"b;
	     l = index(ignored_breaks,ch);
	     if l > 0 then
		delim.break.Signore = "1"b;
	     if i > 0 then
		substr(spec_lex_control_chars,i,1) = delim_control_char;
	     else
		lex_control_chars = lex_control_chars || delim_control_char;
	     end;

	lex_delims = lex_delims || spec_lex_delims;
	lex_control_chars = lex_control_chars || spec_lex_control_chars;

	i = index(lex_delims, NL);
	if i > 0 then do;
	     delim_control_char = substr(lex_control_chars,i,1);
	     if delim.break.Signore then do;
		delim.white_space.S = "1"b;
		delim.new_line.S = "1"b;
		substr(lex_control_chars,i,1) = delim_control_char;
		end;
	     end;
	i = index(lex_delims, NP);
	if i > 0 then do;
	     delim_control_char = substr(lex_control_chars,i,1);
	     if delim.break.Signore then do;
		delim.white_space.S = "1"b;
		substr(lex_control_chars,i,1) = delim_control_char;
		end;
	     end;

	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


%include translator_temp_alloc;

	end lex_string_;
