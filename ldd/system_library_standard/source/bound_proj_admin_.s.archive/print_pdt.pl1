/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/* PRINT_PDT - procedure to print the contents of the binary Project Definition Table
   which was created by the procedure CV_PMF

   Initial coding by Michael J. Spier, September 10, 1969		 */


/****^  HISTORY COMMENTS:
  1) change(86-01-01,Gilcrease), approve(86-03-27,MCR7369),
     audit(86-06-20,LJAdams), install(86-06-30,MR12.0-1081):
               To make old comments good to history_comment modified by Eleanor
     Stone 04/13/70 at 12:54 Janice B. Phillipps -- modified 02/22/72 to allow
     output from print_pdt to be used as input to cv_pmf. . -- modified
     05/25/72 to provide long and brief modes. . -- modified 06/09/72 to search
     for "sel_name". . -- modified 04/01/73 to print new charging info on 6180
     (virtual cpu and memory units). Modified 740823 by PG for authorizations.
     Modified June 1975 by T. Casey, for per-user load_control group Modified
     Nov 1975 by T. Casey for subsystem and initproc packed into same string
     Modified May 1976 by T. Casey to print the per-user cutoff warning
     thresholds. Modified May 1977 by John Gintell to implement -pmf, make
     output look reasonable and cleanup program. Modified May 1978 by T. Casey
     to print pdir_quota. Modified November 1978 by T. Casey for MR7.0 to print
     new absentee control parameters. Modified November 1979 by T. Casey for
     MR8.0 to print process preservation parameters. Modified Feb 1980 by M. B.
     Armstrong to implement multiple rate structures. (UNCA) Modified May 1980
     by R. McDonald  to include page charges. (UNCA) Modified June 1981 by E.
     N. Kittlitz for UNCA changes. Modified December 1981 by E. N. Kittlitz for
     user_warn controls. Modified September 1982 by E. N. Kittlitz for
     default_ring. Modified 1984-07-05 BIM for authorization range.
  2) change(86-02-26,Gilcrease), approve(86-03-27,MCR7369),
     audit(86-06-20,LJAdams), install(86-06-30,MR12.0-1081):
               Put weekly displays in for SCP 6250.
  3) change(99-06-23,Haggett):
     Y2K
                                                   END HISTORY COMMENTS */


/* format: style4 */
print_pdt: procedure;


dcl  bigfloat float bin internal static init (1e37);
dcl  NEVER fixed bin (71) int static init		/* This date is 12/31/99 2359. */
	(1011000110010110011001001110100110111010100100000000b); /* .. if Multics last this long we will have to fix */
dcl  MILLION fixed bin (35) internal static init (1000000);
dcl  three_asterisks char (3) int static init ("***");

dcl  error_table_$badopt fixed bin ext;


/* DECLARATION OF AUTOMATIC STORAGE VARIABLES */

dcl  ctr fixed bin init (0);
dcl  access_ceiling bit (72) aligned,
     authorization_string char (500);
dcl  rs_name char (32);
dcl  max_rs_number fixed bin;
dcl  temp float bin;
dcl  an fixed bin;
dcl  (pdt_dir, pdt_path) char (168) aligned;
dcl  datestr char (18);
dcl  datstng char (26);
dcl  datstr char (10);
dcl  sel_name char (32) aligned init ("");
dcl  pdt_name char (32) aligned;
dcl  (i, ii, iii, slng) fixed bin;
dcl  code fixed bin (35);
dcl  no_header bit (1) init (""b);
dcl  brief bit (1) init (""b);
dcl  pmf bit (1) init (""b);
dcl  long bit (1) init (""b);
dcl  non_zero_limit bit (1);
dcl  (argp, pdtp, pdtep) ptr;
dcl  attr char (512) varying;
dcl  limit_string char (10) varying;
dcl  char32 char (32);
dcl  default_home_dir char (64);
dcl  len fixed bin (17);
dcl  strng10 char (64) aligned;


/* DECLARATION OF BASED STRUCTURES */

dcl  arg char (slng) unaligned based (argp);


/* DECLARATION OF BUILTIN FUNCTIONS */

dcl  (addr, clock, divide, float, length, mod, max, null, substr, string, rtrim) builtin;

/* DECLARATION OF EXTERNAL ENTRIES */

dcl  expand_pathname_ entry (char (*) aligned, char (*) aligned, char (*) aligned, fixed bin (35));
dcl  system_info_$access_ceiling entry (bit (72) aligned);
dcl  system_info_$max_rs_number entry (fixed bin);
dcl  system_info_$rs_name entry (fixed bin, char (*), fixed bin (35));
dcl  convert_access_class_$to_string_range_short entry ((2) bit (72) aligned, char (*), fixed bin (35));
dcl  format_attributes_ entry (ptr, char (*) var);
dcl  date_time_$format entry (char(*), fixed binary(71), char(*), char(*)) returns(char(250) varying);
dcl  com_err_ entry options (variable);
dcl  ioa_ entry options (variable);
dcl  ioa_$rsnnl entry options (variable);
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  cu_$arg_count entry returns (fixed bin);
dcl  hcs_$initiate entry (char (*) aligned, char (*) aligned, char (*) aligned,
	fixed bin (1), fixed bin (2), ptr, fixed bin (35));
dcl  hcs_$terminate_noname entry (ptr, fixed bin (35));
dcl  ttt_info_$decode_type entry (fixed bin, char (*), fixed bin (35));

%include user_attributes;
%include pdt;

/* LOCATE AND INITIALIZE A PDT */


	call system_info_$max_rs_number (max_rs_number);

	call cu_$arg_ptr (1, argp, slng, code);		/* get 1st arg: name of pdt */
	if code ^= 0 then do;
	     call com_err_ (code, "print_pdt", "");
	     return;
	end;

	pdt_path = arg;
	if substr (pdt_path, max (slng - 3, 1), 4) ^= ".pdt" then do;
	     pdt_path = rtrim (pdt_path) || ".pdt";
	end;

	if substr (pdt_path, 1, 1) = ">" | substr (pdt_path, 1, 1) = "<" then do;
	     call expand_pathname_ (pdt_path, pdt_dir, pdt_name, code);
	     if code ^= 0 then do;
		call com_err_ (code, "print_pdt", pdt_path);
		return;
	     end;
	end;
	else do;
	     pdt_name = substr (pdt_path, 1, length (pdt_name));
	     pdt_dir = ">sc1>pdt";
	end;

	call hcs_$initiate (pdt_dir, pdt_name, "", 0, 0, pdtp, code);
	if pdtp = null then do;
	     call com_err_ (code, "print_pdt", "^a>^a", pdt_dir, pdt_name);
	     return;
	end;

	call system_info_$access_ceiling (access_ceiling);

	do an = 2 to cu_$arg_count ();
	     call cu_$arg_ptr (an, argp, slng, code);	/* get next arg: a name in a pdt or a control arg */
	     if substr (arg, 1, 1) = "-" then do;	/* control option? */
		if arg = "-brief" | arg = "-bf" then no_header, brief = "1"b;
		else if arg = "-long" | arg = "-lg" then long = "1"b;
		else if arg = "-pmf" then pmf, brief = "1"b;
		else if arg = "-no_header" | arg = "-nhe" then no_header = "1"b;
		else do;
		     call com_err_ (error_table_$badopt, "print_pdt", """^a""", arg);
		     goto TERM;
		end;
	     end;
	     else do;
		sel_name = arg;
		no_header = "1"b;
	     end;

	end;

	if ^no_header then do;
	     call DATE_TIME ((clock ()), datestr);
	     if ^pmf then call ioa_ ("^/^-^-^28a^3x^20a^/", pdt_name, datestr);
	     call ioa_ ("Projectid:^12x^a;", pdt.project_name);
	     if ^pmf then call ioa_ ("process_group_id:^5x^a;", pdt.author.proc_group_id);
	     if ^pmf then call ioa_ ("table:^16x^a;", pdt.author.table);
	     if ^pmf then call ioa_ ("w_dir:^16x^a;", pdt.author.w_dir);
	     if ^pmf then call ioa_ ("max_size:^13x^d;", pdt.max_size);
	     if ^pmf then call ioa_ ("current_size:^9x^d;", pdt.current_size);
	     if ^pmf then call ioa_ ("version:^14x^d;", pdt.version);
	     if ^pmf then call ioa_ ("n_users:^14x^d;", pdt.n_users);
	     if ^pmf then call ioa_ ("project_dir:^10x^a;", pdt.project_dir);
	     if ^pmf & max_rs_number > 0 then do;
		call system_info_$rs_name ((pdt.rs_number), rs_name, code); /* get rate structure name */
		call ioa_ ("rate_structure:^7x^a (^d);", rs_name, pdt.rs_number);
	     end;
	end;

/* P R I N T    U S E R    E N T R I E S   */

	do i = 1 to pdt.current_size;
	     pdtep = addr (pdt.user (i));
	     if user.state ^= 0 then do;
		if pmf & user.state ^= 1 then go to SKIP;
		if sel_name ^= "" then if sel_name ^= user.person_id then go to SKIP;
		ctr = ctr + 1;
		call ioa_ ("^/^/personid:^13x^a;", user.person_id);
		if ^brief then call ioa_ (" state:^15x^1d;", user.state);
		if ^brief then call ioa_ (" now_in:^14x^d;", user.now_in);
		if ^brief & user.n_foreground ^= 0 then
		     call ioa_ (" n_foreground:^23t^d;", user.n_foreground);
		if ^brief & user.n_background ^= 0 then
		     call ioa_ (" n_background:^23t^d;", user.n_background);
		if ^brief & user.n_interactive ^= 0 then
		     call ioa_ (" n_interactive:^23t^d", user.n_interactive);
		if ^brief & user.n_disconnected ^= 0 then
		     call ioa_ (" n_disconnected:^23t^d", user.n_disconnected);
		if user.password ^= "" then call ioa_ (" password:^10x^8a;", user.password);
		call format_attributes_ (addr (user.at), attr);
		if brief & string (user.at) = "000000000000001110"b then ;
		else call ioa_ (" attributes:^10x^a", attr);

		if user.uflags.ip_given then		/* if initproc is in new format */
		     ii = user.ip_len;		/* pick up its length */
		else ii = 64;			/* if old format, it occupies the whole string */
		call ioa_$rsnnl ("^a", strng10, iii, substr (user.initial_procedure, 1, ii));
		if user.uflags.dont_call_init_admin then strng10 = rtrim (strng10) || ", direct";
		if brief & strng10 = "process_overseer_" then ;
		else call ioa_ (" initproc:^12x^a;", strng10);

		if user.uflags.ss_given then
		     call ioa_ (" subsystem:^11x^a;", substr (user.initial_procedure, user.ip_len + 1, user.ss_len));

		default_home_dir = ">user_dir_dir>" || rtrim (pdt.project_name) || ">" || user.person_id;
		if brief & user.home_dir = default_home_dir then ;
		else call ioa_ (" homedir:^13x^a;", user.home_dir);
		if brief & user.bump_grace = 2880 then ;
		else call ioa_ (" grace:^15x^d;", user.bump_grace);
		if brief & user.low_ring = 4 & user.high_ring = 5 then ;
		else call ioa_ (" ring:^16x^1d, ^1d, ^1d;", user.low_ring, user.high_ring, user.default_ring);
		if user.at.igroup then
		     call ioa_ (" group:^15x^a;", user.group);
		if user.pdir_quota ^= 0 then
		     call ioa_ (" pdir_quota:^10x^d;", user.pdir_quota);
		if brief & user.max_foreground = 0 then ;
		else call ioa_ (" max_foreground:^23t^d;", user.max_foreground);
		if brief & user.max_background = 0 then ;
		else call ioa_ (" max_background:^23t^d;", user.max_background);
		if brief & user.abs_foreground_cpu_limit = 0 then ;
		else call ioa_ (" abs_foreground_cpu_limit:^23t^d;", user.abs_foreground_cpu_limit);
		if user.lot_size ^= 0 then		/* skip if dft value */
		     if user.lot_size < 0 then call ioa_ (" lot_size:^12x^d, own;", -user.lot_size);
		     else call ioa_ ("lot_size:^13x^d;", user.lot_size);
		if user.kst_size ^= 0 then call ioa_ (" kst_size:^12x^d;", user.kst_size);
		if user.cls_size ^= 0 then
		     if user.cls_size < 0 then call ioa_ (" cls_size:^12x^d, stack;", -user.cls_size);
		     else call ioa_ (" cls_size:^12x^d;", user.cls_size);

		if user.outer_module ^= "" then call ioa_ (" outer_module:^8x^a;", user.outer_module);

		if (user.user_authorization (1) | user.user_authorization (2)) ^= ""b /* we would like to compare to project min, ... */
		then do;
		     call convert_access_class_$to_string_range_short (user.user_authorization, authorization_string, code);
		     if code ^= 0
		     then authorization_string = "unknown";

		     if authorization_string ^= "system_low" & authorization_string ^= ""
		     then call ioa_ (" authorization:^7x""^a"";", authorization_string);
		end;
		if user.dollar_limit = bigfloat then do;
		     if ^brief then call ioa_ (" limit:^15xopen;");
		end;
		else call ioa_ (" limit:^15x^.2f;", user.dollar_limit);

		attr = "shift_limit:        ";
		non_zero_limit = ""b;
		do ii = 1 to 7, 0;
		     if user.shift_limit (ii) = bigfloat
		     then attr = attr || " open,";
		     else do;
			call ioa_$rsnnl (" ^.2f,", limit_string, len, user.shift_limit (ii));
			attr = attr || limit_string;
			non_zero_limit = "1"b;
		     end;
		end;
		substr (attr, length (attr), 1) = ";";
		if brief & ^non_zero_limit then ;
		else call ioa_ (" ^a", attr);

		if user.absolute_limit = bigfloat & user.absolute_cutoff = NEVER then ;
		else do;
		     if user.absolute_limit = bigfloat then attr = "cutoff:              open,";
		     else call ioa_$rsnnl ("cutoff:^14x^.2f,", attr, len, user.absolute_limit);
		     if user.absolute_cutoff = NEVER then attr = attr || " open,";
		     else do;
			call DATE_TIME (user.absolute_cutoff, datstr);
			attr = attr || " " || datstr || ",";
		     end;
		     if user.absolute_increm = 0 then do;
			len = length (attr);
			substr (attr, len, 1) = ";";
		     end;
		     else if user.absolute_increm = 1 then attr = attr || " daily;";
		     else if user.absolute_increm = 2 then attr = attr || " monthly;";
		     else if user.absolute_increm = 3 then attr = attr || " yearly;";
		     else if user.absolute_increm = 4 then attr = attr || " cyear;";
		     else if user.absolute_increm = 5 then attr = attr || " fyear;";
		     else if user.absolute_increm = 6 then attr = attr || "weekly;";
		     call ioa_ (" ^a", attr);
		end;

		if brief & user.user_warn_dollars = 10e0 then ;
		else call ioa_ (" user_warn_dollars:^3x^.2f;", user.user_warn_dollars);
		if brief & user.user_warn_pct = 10 then ;
		else call ioa_ (" user_warn_percent:^3x^d;", user.user_warn_pct);
		if brief & user.user_warn_days = 10 then ;
		else call ioa_ (" user_warn_days:^6x^d;", user.user_warn_days);

		if brief & user.warn_dollars = 10e0 then ;
		else call ioa_ (" warn_dollars:^8x^.2f;", user.warn_dollars);
		if brief & user.warn_pct = 10 then ;
		else call ioa_ (" warn_percent:^8x^d;", user.warn_pct);
		if brief & user.warn_days = 10 then ;
		else call ioa_ (" warn_days:^11x^d;", user.warn_days);


		if ^pmf then call ioa_ (" dollar_charge:^7x$^.2f;", user.dollar_charge);

		if ^long then go to SKIP;
		call ioa_ (" absolute_spent:^6x$^.2f;", user.absolute_spent);
		call DATE_TIME (user.daton, datstng);
		call ioa_ (" date_on:^13x^24a;", datstng);
		call DATE_TIME (user.datof, datstng);
		call ioa_ (" date_off:^12x^24a;", datstng);
		call DATE_TIME (user.last_login_time, datstng);
		call ioa_ (" last_login_time:^5x^24a;", datstng);
		if user.last_login_time ^= 0 then do;
		     call ioa_ (" last_login_unit:^5x^a;", user.last_login_unit);
		     call ttt_info_$decode_type ((user.last_login_type), char32, code);
		     call ioa_ (" last_login_type:^5x^a;", char32);
		end;
		call DATE_TIME (user.time_last_bump, datstng);
		call ioa_ (" time_last_bump:^6x^24a;", datstng);
		call DATE_TIME (user.last_update, datstng);
		call ioa_ (" last_update:^9x^24a;", datstng);
		call ioa_ (" logins:^14x^d;", user.logins);
		call ioa_ (" crashes:^13x^d;", user.crashes);

/* P r i n t   i n t e r a c t i v e   u s a g e   */

		temp = 0e0;
		do ii = 0 to 7;
		     temp = temp + user.interactive (ii).charge;
		end;
		if temp = 0e0 then do;
		     call ioa_ ("^/Interactive Usage:^2xnone");
		end;
		else do;
		     call ioa_ ("^/Interactive Usage:  $^.2f", temp);
		     call ioa_ ("^/shift^2x$charge^5xvcpu^6xmemory*K^6xconnect^4xterminal i/o");
		     do ii = 1 to 7, 0;
			if user.interactive (ii).charge = 0e0 then ; /* if zero charge, don't print */
			else call ioa_ ("^1d^4x^8.2f^1x^9a^4x^10.1f^4x^9a^6x^10.1f",
				ii, user.interactive (ii).charge,
				cv_time (user.interactive (ii).cpu), float (user.interactive (ii).core / 1e6),
				cv_time (user.interactive (ii).connect),
				float (user.interactive (ii).io_ops / 1e3));
		     end;
		end;

/* P r i n t   a b s e n t e e    u s a g e    */

		temp = 0e0;
		do ii = 1 to 4;
		     temp = temp + user.absentee (ii).charge;
		end;
		if temp = 0e0 then do;
		     call ioa_ ("^/Absentee Usage:^5xnone");
		end;
		else do;
		     call ioa_ ("^/Absentee Usage:     $^.2f", temp);
		     call ioa_ ("^/queue^2x$charge^6xjobs^10xvcpu^5xmemory*K");
		     do ii = 1 to 4;
			if user.absentee (ii).charge = 0e0 then ;
			else call ioa_ ("^1d^4x^8.2f^7x^4d^5x^9a^3x^10.1f^24x", ii, user.absentee (ii).charge,
				user.absentee (ii).jobs, cv_time (user.absentee (ii).cpu),
				float (user.absentee (ii).memory / 1e6));
		     end;
		end;

/*  P r i n t    i o  d a e m o n    u s a g e    */

		temp = 0e0;
		do ii = 1 to 4;
		     temp = temp + user.iod (ii).charge;
		end;
		if temp = 0e0 then do;
		     call ioa_ ("^/IO Daemon Usage:^4xnone");
		end;
		else do;
		     call ioa_ ("^/IO Daemon Usage:    $^.2f", temp);
		     call ioa_ ("^/queue^2x$charge^3xpieces^7xpages^9xlines");
		     do ii = 1 to 4;
			if user.iod (ii).charge = 0e0 then ;
			else call ioa_ ("^1d^4x^8.2f^10d^12d^14d",
				ii, user.iod (ii).charge, user.iod (ii).pieces,
				user.iod (ii).pages, user.iod (ii).lines);
		     end;
		end;
	     end;
SKIP:	end;

	if pmf & ^no_header then call ioa_ ("^/^/end;");

	if sel_name ^= "" & ctr = 0 then do;
	     call com_err_ (0, "print_pdt", "^a not found in ^a.", sel_name, pdt_name);
	end;

TERM:	call hcs_$terminate_noname (pdtp, code);
	return;

cv_time: procedure (time) returns (char (9) aligned);

/* procedure to convert from fixed bin (71) to a nice formatted string of hrs:mins:secs */

/* automatic */

dcl  time fixed bin (71);
dcl  hours fixed bin;
dcl  minutes fixed bin;
dcl  seconds fixed bin;

/* builtins */

dcl  (unspec) builtin;

/* pictures */

dcl  1 time_string aligned,
       2 hours picture "zz9" unaligned,
       2 colon1 char (1) unaligned,
       2 minutes picture "99" unaligned,
       2 colon2 char (1) unaligned,
       2 seconds picture "99" unaligned;

	seconds = float (time, 63) / float (MILLION);
	minutes = divide (seconds, 60, 35, 0);
	seconds = mod (seconds, 60);			/* get rid of the remainder */
	hours = divide (minutes, 60, 35, 0);
	minutes = mod (minutes, 60);			/* get rid of the remainder */

	time_string.colon1 = ":";
	time_string.colon2 = ":";

	if hours < 1000				/* don't die if junque */
	then time_string.hours = hours;
	else unspec (time_string.hours) = unspec (three_asterisks); /* can't say unspec of a constant any more. progress ... */
	time_string.minutes = minutes;
	time_string.seconds = seconds;

	return (string (time_string));
     end;

%page;
DATE_TIME:
	procedure (p_clock, p_dt_str);

dcl p_clock fixed binary (71)  parameter;
dcl p_dt_str char (*) parameter;

	p_dt_str = date_time_$format ("^9999yc-^my-^dm  ^Hd^99v.9MH ^xxxxza^xxxda.", p_clock, "", "");
	return;

end DATE_TIME;

end print_pdt;
                        