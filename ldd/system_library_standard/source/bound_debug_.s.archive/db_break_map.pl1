/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */



db_break_map:	procedure;

/*	This procedure is called to manipulate break maps.  It is called by  db_break
*	to perform the following tasks:
*
*	init:		Returns a pointer to the break map in  a specified segment.
*			If no break map exists then one will be created.
*
*	check:		Returns a pointer to the break map in a specified segment.
*			However, if no break map exists it will not create one.
*
*	get_slots:	It will add anothere page full of break slots to an existing
*			break map.
*
*	delete:		It deletes the break map from the specified segment.
*
*	Rewritten  Dec 72  for the  6180  by  Bill Silver.
*/




/*		PARAMETERS		*/

dcl	arg_seg_ptr	ptr,		/* (I) Pointer to segment that contains
					*   or will contain a break map.  */
	arg_bit_count	fixed bin(24),	/* (I) Bit count of this segment. */
	arg_break_map_ptr	ptr;		/* (I/O) Pointer to break map of a segment.
					*  If there is any ERROR it is returned null. */



/*		AUTOMATIC  DATA		*/

dcl	access_mode	fixed bin(5),	/* Access mode of the segment.  */
	bit_count		fixed bin(24),	/* The total number of bits in a segment. */
	bits_left		fixed bin,	/* The number of bits left unused in the
					*  last page of the segment.  */
	code		fixed bin(35),	/* Error return code.  */
	dir_name		char(168) aligned,	/* Directory name of the segment. */
	ent_name		char(32)  aligned,	/* Entry name of the segment.  */
	end_ptr		ptr,		/* Pointer to the last word in the segment or
					*  where the last word in the segment will be. */
	i		fixed bin,	/* A work index. */
	mapp		ptr,		/* Just declared to get rid of warning.  */
	max_length	fixed bin(19),	/* The max number of words in the object segment. */
	max_num_pages	fixed bin,	/* Number of pages in object segment. */
	new_bits		fixed bin(24),	/* Number of new bits being added to a segment. */
	new_slots		fixed bin,	/* Number of new break slots being added
					*  to the break map. */
	new_words		fixed bin(18),	/* Number of new words being added to a segment. */
	new_slots_ptr	ptr,		/* Pointer to where new break slots will be added. */
	obj_map_ptr	ptr,		/* Pointer to the object map in the segment
					*  or where the object map will go.  */
	page_bits		fixed bin,	/* The number of bits in a page. */
	page_num		fixed bin,	/* The number of the last page in the segment -
					*  starting with page  1.  */
	page_words	fixed bin,	/* The number of words in a page. */
	seg_ptr		ptr,		/* Pointer to the base of the object segment. */
	word_count	fixed bin(19);	/* Total number of words in segment. */

dcl    1	seg_acl		aligned,		/* Structure used to add an ACL entry to the object segment. */
	2 user_id char(32),
	2 access bit(36),
	2 pad bit(36),
	2 status fixed bin(35);

dcl     1	delete_acl	aligned,		/* Used to delete an ACL. */
	2  user_id	char(32),
	2  status		fixed bin(35);
dcl 1 oi like object_info;



/*		BASED  DATA		*/

/*	This is an overlay of an instruction.  We only want to reference the  offset
*	field of the instruction.
*/
dcl    1	based_inst    based    aligned,
        (	2  offset     bit(18),
	2  pad        bit(18)) unaligned;


/*	These are the two formats of the object map offset found at the end of an object segment. */

dcl	ns_obj_map_off	fixed bin(18)	based	aligned,
	stand_obj_map_off	bit(18)		based 	aligned;


dcl 1 map_ver_1 aligned based (obj_map_ptr),	/* version 1 object map */
	2 decl_vers fixed bin,		/* version number of current structure format */
	2 identifier char(8) aligned,		/* must be the constant "obj_map" */
	2 text_offset bit(18) unaligned,	/* offset rel to base of object segment of base of text section */
	2 text_length bit(18) unaligned,	/* length in words of text section */
	2 def_offset bit(18) unaligned,	/* offset rel to base of object seg of base of definition section */
	2 def_length bit(18) unaligned,	/* length in words of definition section */
	2 link_offset bit(18) unaligned,	/* offset rel to base of object seg of base of linkage section */
	2 link_length bit(18) unaligned,	/* length in words of linkage section */
	2 symb_offset bit(18) unaligned,	/* offset rel to base of object seg of base of symbol section */
	2 symb_length bit(18) unaligned,	/* length in words of symbol section */
	2 bmap_offset bit(18) unaligned,	/* offset rel to base of object seg of base of break map */
	2 bmap_length bit(18) unaligned;	/* length in words of break map */



/*		INTERNAL  STATIC  DATA	*/

/*	The following constants are used to restart a break that was set on an EIS type
*	instruction.  The transfer constant is a "tra" instruction which temporarily replaces
*	the instruction which follows the EIS instruction.  This "tra" transfers to the
*	first instruction in the break map header.  When  the break map header is created
*	the "tra" is saved in the break map header and its offset is relocated.
*	The following seven instructions in the break map header put the mme2 back into
*	the break location, replace the tra with the instruction that originally followed
*	the eis instruction, and returns control to the instruction after the eis instruction.
*/
dcl	tra_con	bit(36)	internal static
	init  (	"000000000000000000111001000000000000"b); /* 000000710000 tra eis.instructions */





/*		EXTERNAL ENTRIES		*/

dcl     (	addr, addrel, bit, divide, fixed, null, ptr, rel, size )  builtin;

dcl	sys_info$page_size  fixed bin  external;
%include db_ext_stat_;

dcl	com_err_		     entry  options(variable),
	get_group_id_	     entry  returns (char(32) aligned),
	hcs_$add_acl_entries     entry  (char(*) aligned, char(*) aligned, ptr, fixed bin, fixed bin(35)),
	hcs_$delete_acl_entries  entry  (char(*) aligned, char(*) aligned, ptr, fixed bin, fixed bin(35)),
	hcs_$fs_get_mode	     entry  (ptr, fixed bin (5), fixed bin(35)),
	hcs_$fs_get_path_name    entry  (ptr, char(*) aligned, fixed bin, char(*) aligned, fixed bin(35)),
	hcs_$get_max_length_seg  entry (ptr, fixed bin(19), fixed bin(35)),
	hcs_$set_bc_seg	     entry  (ptr, fixed bin(24), fixed bin(35)),
	hcs_$truncate_seg	     entry  (ptr, fixed bin(19), fixed bin(35)),
	ioa_$ioa_stream	     entry options (variable),
	object_info_$brief	     entry  (ptr, fixed bin(24), ptr, fixed bin(35));
/**/
%include	object_info;
%include  object_map;
/**/
%include	obj_map_old_1_;
/**/
%include	db_break_map_map;
/**/
init:	entry  (arg_seg_ptr, arg_bit_count, arg_break_map_ptr);


/*	This entry is called to return a pointer to the break map in the specified segment.
*	If this segment does not have a break map then one will be created.  Note, when
*	a break map is created we make sure that the user has write access to the
*	segment.   Also note that the number of break slots initially allocated to the
*	break map will vary from segment to segment.  Enough slots will be allocated
*	so that all of the last page of the segment will be used.  Only if there is no
*	room for at least one break slot will another page be used for the break map.
*	If the user needs more break slots he will get them - a page full at a time.
*/

	call CHECK_MAP;			/* See if there is a break map and copy args. */

	call CHECK_ACCESS;			/* Even if there is a break map already in ... */

	if arg_break_map_ptr ^= null then return;

/*	There is no break map.  Before we create one we have to see if there is room
*	in this segment for a break map with at least one break.  If not we can't make
*	the break map.  First get the number of pages in the segment.  
*/
	page_words = sys_info$page_size;
	page_bits  = page_words * 36;
	page_num  =  divide((bit_count + page_bits -1),page_bits, 17, 0);
	bits_left =  page_num * page_bits  -  bit_count;		/* Num unused bits in last page. */
	if   bits_left < ((size(bmap)+size(break_slot)+2)*36)
	     then do;			/* Won't fit on last page, get max length of segment. */
		call hcs_$get_max_length_seg (seg_ptr, max_length, code) ;
		if   code ^= 0
		     then goto ERROR;
					/* Get num of pages in segment. */
		max_num_pages = divide (max_length+page_words-1, page_words, 17, 0) ;
		if   page_num = max_num_pages	/* Last page in seg? */
		     then do;		/* YES, can't create break map. */
			call ioa_$ioa_stream (debug_output, " No room for break map.");
			return;
		     end;
	     end;


/*	There is room for a break map.  We have to determine how may break slots we
*	can initially allocate.  First, we must see how many bits will be left in the last
*	page of the segment after the break map header has been allocated.  NOTE, we must
*	allow for two extra words that may be needed in the object map.
*/
	bits_left = bits_left - (size(bmap)*36) - (2*36);

/*	If we can't fit at least one break slot on this page we will add another page
*	to the segment.
*/
	if   bits_left  <  (size(break_slot)*36)	/* Room on this page? */
	     then bits_left = bits_left + page_bits;	/* NO, add page. */


/*	Now we can get the number of full break slots we can allocate.  Then we can
*	determine the total number of words and bits in the break map.
*/
	new_slots  =  divide(bits_left , (size(break_slot)*36), 17, 0);
	new_words  =  (new_slots * size(break_slot)) + size(bmap);
	new_bits   =  new_words * 36;


/*	The last word of the segment will contain a relative word
*	offset to the beginning of the object map.
*/
	end_ptr = ptr(seg_ptr,divide((bit_count-35),36,24,0));/* Get pointer to last word in segment. */
/*	STANDARD  object map.  This new type of object map is easier to handle since:
*	1.  It does not have to be moved.  Only the obj_map_off has to be moved.
*	2.  The break map entries are already there.  They just have to be filled in.
*	The break map will start where the obj_map_off word is now.  The obj_map_off word
*	will be moved to the new last word in the segment.  Its value will not be changed.
*/

	break_map_ptr  =  end_ptr;
	obj_map_ptr  =  ptr(end_ptr, end_ptr -> stand_obj_map_off);
	end_ptr  =  addrel(break_map_ptr, new_words);

/*	Now we will move the obj_map_off word.  The old one will get overlayed by the
*	break map header.  Break map length is in WORDS.
*/
	end_ptr -> stand_obj_map_off  =  break_map_ptr -> stand_obj_map_off;

	if obj_map_ptr -> object_map.decl_vers = 1 then do;
	     map_ver_1.bmap_offset  =  rel(break_map_ptr);
	     map_ver_1.bmap_length  =  bit (fixed (new_words, 18), 18);
	end;
	else do;
	     obj_map_ptr -> object_map.break_map_offset = rel (break_map_ptr);
	     obj_map_ptr -> object_map.break_map_length = bit (fixed (new_words, 18), 18);
	end;

/*	Now that the break map has been inserted into the segment, we can set the bit count
*	of the segment and then initialize the header of the break map and the new break
*	slots.  We will also return a pointer to the new break map.
*/

	bit_count  =  bit_count  +  new_bits;
	call hcs_$set_bc_seg (seg_ptr, bit_count, code);
	if   code ^= 0
	     then goto ERROR;

	bmap.num_slots  =  new_slots;		/* Initialize break map header info. */
	bmap.num_set =  0;
	bmap.bit_count  =  bit_count;
	bmap.version = "ver3";

	bmap.eis.tra = tra_con;		/* Set up EIS restart instructions. */
	addr(bmap.eis.tra)->based_inst.offset = rel(addr(bmap.eis.instructions));
	bmap.eis.mme2_indw,
	bmap.eis.inst_indw = "0"b;
	do   i = 1 to 9;
	     bmap.eis.instructions(i) = db_ext_stat_$break_instructions (i);
	end;

	do   i  =  1  to  new_slots;		/* Initialize the new break slots. */
	     addr(bmap.breaks(i))->break_slot.type = -1;
	end;

	arg_break_map_ptr  =  break_map_ptr;	/* Return ptr to break map. */

	return;				/* This is the end of the  init  entry.  */
/**/
get_slots:	entry  (arg_break_map_ptr);


/*	This entry is called to add more break slots to the break map.  We know that
*	this segment  does not have room for even one more break slot on its last
*	page.  Thus, if this is the last page in the segment, we will not be
*	able to add more break slots.  If there are free pages left in the segment,
*	we will allocate one full page of break slots.
*/

	break_map_ptr  =  arg_break_map_ptr;	/* Copy argument. */
	bit_count  =  bmap.bit_count;		/* Bit count of segment is saved in break map. */
	page_words =  sys_info$page_size;	/* Set up some constants we need. */
	page_bits  =  page_words * 36;

/*	Get number of pages in this  segment.  */

	page_num  =  divide((bit_count + page_bits -1),  page_bits, 17, 0);

	seg_ptr  =  ptr(break_map_ptr, 0);	/* Get pointer to base of segment. */
					/* Get max length of segment. */
	call hcs_$get_max_length_seg (seg_ptr, max_length, code) ;
	if   code ^= 0
	     then goto ERROR;

	max_num_pages = divide (max_length+page_words-1, page_words, 17, 0) ;
	if   page_num  =  max_num_pages	/* Is this the last page? */
	     then do;			/* YES, can't add more slots. */
		arg_break_map_ptr  =  null();	/* Denote ERROR by returning null pointer. */
		return;
	     end;


/*	We do have room for another page of break slots.  We must get some info about
*	this segment and we must get the number of bits that are left unused on
*	the last page of the segment.  This will always be less than the number of
*	bits needed for one break slot so we will add a page to the segment.
*/
	oi.version_number = object_info_version_2;
	call object_info_$brief (seg_ptr, bit_count, addr(oi), code);
	if   code ^= 0
	     then goto ERROR;

	if oi.old_format then goto ERROR_OLD_FORMAT;

	bits_left  =  page_num * page_bits - bit_count  +  page_bits;

/*	We can now figure out how many new break slots to add.  From this we can
*	directly get the number of word and bits that are being added to the segment.
*/
	new_slots  =  divide(bits_left, (size(break_slot)*36), 17, 0);
	new_words  =  new_slots * size(break_slot);
	new_bits   =  new_words * 36;
	end_ptr  =  ptr(seg_ptr, divide((bit_count-35),  36, 24, 0));


/*	Now that we are all set up and have a pointer to the last word in the segment -
*	where the obj_map_off word is - we can insert the new break slots.
*/
/*	STANDARD type object map.  All we have to do is update the length of the break
*	map in the object map and then move the obj_map_off word down to the new end of
*	the segment.
*/

	obj_map_ptr  =  ptr(end_ptr, end_ptr -> stand_obj_map_off);
	if obj_map_ptr -> object_map.decl_vers = 1
	     then map_ver_1.bmap_length  =
		bit(fixed((fixed (map_ver_1.bmap_length, 18) + new_words), 18), 18);

	else obj_map_ptr -> object_map.break_map_length  =
		bit(fixed((fixed (obj_map_ptr -> object_map.break_map_length, 18) + new_words), 18), 18);

	addrel(end_ptr, new_words) -> stand_obj_map_off  =  end_ptr->stand_obj_map_off;


/*	Now that we have made room for the new break slots, we must update the  bit count
*	and update the break map header info.  We must also initialize the new break
*	slots. 
*/

	bit_count  =  bit_count  +  new_bits;
	call hcs_$set_bc_seg(seg_ptr, bit_count, code);
	if   code ^= 0
	     then goto ERROR;
	bmap.bit_count  =  bit_count;

	do   i  =  (bmap.num_slots + 1)  to  (bmap.num_slots + new_slots);
	     if   bmap.version = "ver3"
		then break_slot_ptr = addr(bmap.breaks(i));
	     break_slot.type = -1;
	end;

	bmap.num_slots  =  bmap.num_slots  +  new_slots;

	return;				/* This is the end of the  get_slots  entry.  */
/**/
check:	entry (arg_seg_ptr, arg_bit_count, arg_break_map_ptr);


/*	This entry is called to return a pointer to the break map of the specified segment.
*	If no break map exists, we will return a null pointer and we will not try
*	to create a break map.  Note, if there is a break map, we will check the user's
*	access to this segment to ensure that he has write access.
*/

	call CHECK_MAP;			/* Get break map pointer. */
	if   code ^= 0
	     then goto ERROR;

	if   arg_break_map_ptr  =  null()	/* Is there a break map? */
	     then  return;			/* NO. */

	call CHECK_ACCESS;			/* YES, make sure access is OK. */
	if   code ^= 0
	     then goto ERROR;


	return;				/* This is the end of the  check  entry. */
/**/
delete:	entry (arg_break_map_ptr);


/*	This entry is called to delete an existing break map from a segment.  The
*	break map will be deleted and the object map will be updated to denote this
*	fact.  We will reset the bit count to what its original value was before the
*	break map was added to the segment.  Also, we will truncate the segment so that it
*	will actually be its former size.
*	First we will copy the argument and get some info about the segment.
*/

	break_map_ptr  =  arg_break_map_ptr;
	bit_count  =  bmap.bit_count;
	seg_ptr  =  ptr(break_map_ptr, 0);	/* Get pointer to base of segment.  */

	oi.version_number = object_info_version_2;
	call object_info_$brief (seg_ptr, bit_count, addr(oi), code);
	if   code ^= 0
	     then goto ERROR;

	if oi.old_format then goto ERROR_OLD_FORMAT;

/*	Now we will get a pointer to the end of the segment where the object map offset
*	word is.  We will also get the number of bits in the break map.   This is the
*	number of words that must be deleted from the segment.
*/
	end_ptr  =  ptr(seg_ptr, divide((bit_count - 35),  36, 24, 0));
	new_bits  =  oi.blng * 36;		/* Num of bits in break map. */

/*	STANDARD object map.  All we have to do is zero out the break map entries in
*	the object map (they stay there) and to move the object map offset word to
*	to the new end of the segment.  It will go where the first word of the break
*	map is now.
*/

	obj_map_ptr  =  ptr(seg_ptr, end_ptr -> stand_obj_map_off);
	if obj_map_ptr -> object_map.decl_vers = 1 then do;
	     map_ver_1.bmap_offset,
	     map_ver_1.bmap_length  =  "0"b;
	end;

	else do;
	     obj_map_ptr -> object_map.break_map_offset = "0"b;
	     obj_map_ptr -> object_map.break_map_length = "0"b;
	end;

	break_map_ptr -> stand_obj_map_off  =  end_ptr -> stand_obj_map_off;


/*	Now that we have correctly rearrainged the segment we can reset the bit count
*	and truncate the unused portion of the segment.
*/
	bit_count  =  bit_count  -  new_bits;
	call hcs_$set_bc_seg (seg_ptr, bit_count, code);
	if   code ^= 0
	     then goto ERROR;

	word_count=  divide(bit_count+35, 36, 17, 0);
	call hcs_$truncate_seg(seg_ptr, word_count, code);
	if   code ^= 0
	     then goto ERROR;


/*	Now all we have to do is reset that  ACL  entry that we added (possibly)
*	when the beak map was created.
*/
	call hcs_$fs_get_path_name (seg_ptr, dir_name, (0), ent_name, code);
	if   code ^= 0
	     then goto ERROR;

	delete_acl.user_id  =  get_group_id_();
	call hcs_$delete_acl_entries (dir_name, ent_name, addr(delete_acl), 1, code);


	return;			/* End of the  delete  entry.  */
/**/
CHECK_MAP:	procedure;

dcl  probe (3) char(4) based (arg_break_map_ptr);		/* (2,3) = "breakmap" in a probe break map  */


/*  This procedure initializes some variables and then checks to see if we have a
*  break map in this segment.  The break map pointer (either valid or null) will
*  br put in  arg_break_map_ptr.
*/

	seg_ptr  =  ptr(arg_seg_ptr, 0);		/* Get pointer to the base of segment. */
	bit_count  =  arg_bit_count;			/* Copy argument. */


/*  Get some info about this segment.  This will tell us whether there is a
*  break map or not.  
*/
	oi.version_number = object_info_version_2;
	call object_info_$brief (seg_ptr, bit_count, addr(oi), code);
	if   code ^= 0
	     then goto ERROR;

	if oi.old_format then goto ERROR_OLD_FORMAT;

	arg_break_map_ptr  =  oi.bmapp;		/* Get break map pointer. */

/*  The 2-3 words of a probe break map are "breakmap".  The probe and debug break maps are not compatible */

	if arg_break_map_ptr ^= null then if probe (2) = "brea" then do;
	     call ioa_$ioa_stream (debug_output, "probe breaks are still set in this segment");
	     arg_break_map_ptr = null();
	     goto ERROR;
	end;

/* Convert from version 2 to version 3 break map */

	if   arg_break_map_ptr ^= null() then do;
	     break_map_ptr = arg_break_map_ptr;
	     if bmap.version = "ver2" then do;
		bmap.version = "ver3";
		do i = 1 to 9;
		     bmap.instructions (i) = db_ext_stat_$break_instructions (i);
		end;
	     end;
	     return;
	end;

	end  CHECK_MAP;
/**/
CHECK_ACCESS:	procedure;


/*	This procedure is called to check that this segment has write access.  Since
*	we must write into the break map this is necessary.  If we don't have  W  access
*	we will try to add ourselves to the  ACL of the segment and thus give ourselves
*	W  access.
*/

	call hcs_$fs_get_mode (seg_ptr, access_mode, code);
	if   code ^= 0
	     then goto ERROR;

	if   (bit(access_mode,5) & ("00010"b))  ^=  "00000"b
	     then return;			/* YES, we do have  W  access.  */


/*	NO, we don't have write access.  The  W  bit is off.  We will get the path name
*	of the segment and the validation level and we will try to add ourselves to the
*	ACL of the segment.  Note we will be added under the  group_id  name  and with
*	REWA access.  
*/
	call hcs_$fs_get_path_name (seg_ptr, dir_name, (0), ent_name, code);
	if   code ^= 0
	     then goto ERROR;

	seg_acl.user_id = get_group_id_();
	seg_acl.access = "1111"b;
	seg_acl.pad = "0"b;

	call hcs_$add_acl_entries (dir_name, ent_name, addr(seg_acl), 1, code);
	if   code ^= 0
	     then goto ERROR;


	end  CHECK_ACCESS;
/**/
/*	This is the location transfered to when any error occurs due to a call to one
*	of the system procedures.  This is part of the main block of  db_break_map  so
*	when it is called by an internal procedure control will be returned directly
*	to the caller of  db_break_map.  Note, regardless of the error,  we will
*	return a null  break map pointer.
*/

ERROR:
	arg_break_map_ptr  =  null();

	call com_err_(code, "debug", "Error in  db_break_map.  ");
	return;

ERROR_OLD_FORMAT:

	call com_err_ (0, "debug", "Version 1 object segments are not supported by debug");
	arg_seg_ptr = null;

	return;


	end  db_break_map;
