/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


db_parse_arg: proc (il, lin, ill, retp, type, size);

dcl  l fixed bin;

dcl  il char (132) aligned,				/* input character string to be scanned */
     conversion bit (1) aligned,
     lin fixed bin,					/* starting index into il */
     ill fixed bin,					/* length of il */
     retp ptr,					/* pointer to location in which to return arg */
     type fixed bin,				/* type of returned arg */
     size fixed bin;				/* size in chars or bits of returned arg */

/* types handled:

   1 fixed bin (octal or decimal)
   3 float bin
   13 pointer
   19 bit string
   21 char string
   0 variable
   -1 no arg error
   -2 syntax error
   -3 % in string

   */

dcl (bit, fixed, addrel, substr, mod, ptr) builtin;

dcl  db_conversion condition;

dcl  neg fixed bin;

dcl  work char (80);
dcl  bstr bit (size) based (retp) aligned,
     cstr char (size) based (retp) aligned,
    (i, j, cstrt, k, depth) fixed bin,
     nl char (1) aligned static init ("
"),
    (temp, temp1) float bin,
     fword fixed bin based,
     flword float bin based,
     c1 char (1) aligned,
     bptr ptr based,
     db_get_count$data ext entry (char (132) aligned, fixed bin, fixed bin, ptr, fixed bin, fixed bin),
     db_get_count ext entry (char (132) aligned, fixed bin, fixed bin) returns (fixed bin),
     db_get_count$dec ext entry (char (132) aligned, fixed bin, fixed bin) returns (fixed bin);

dcl  assign_ ext entry (ptr, fixed bin, fixed bin, ptr, fixed bin, fixed bin);
%include its;
/*  */

	type = -1;				/* initialize return args */
	size = 0;
	neg = 0;

	do i = lin to ill while (substr (il, i, 1) = " "); /* skip leading blanks */
	end;
	if i >= ill then go to ERROR;			/* syntax error if off end of string */

	c1 = substr (il, i, 1);			/* get first character of argument */
	if c1 = ")" | c1 = ";" then return;		/* must signal no arg error */

	if c1 = "&" then do;			/* decimal fixed bin */
	     if substr (il, i+1, 1) = "n" then do;
		i = i + 2;
		go to is_var;
	     end;
	     if substr (il, i+1, 1) = "d" | substr (il, i+1, 1) = "o" then go to get_fixed;
	     else go to ERROR;
	end;

	if c1 = "." then do;			/* decimal # or floating # */
	     call get_float;
	end;

	if c1 = """" then do;			/* bit or char string */
	     cstrt = 0;
scan_end_chars:
	     do j = i+1 to ill while (substr (il, j, 1) ^= """"); /* look for end of string */
	     end;
	     if j >= ill then go to ERROR;		/* syntax error */
	     size = j - i - 1;			/* get size of string */
	     if substr (il, j+1, 1) = "b" then do;	/* bit string */
		if cstrt ^= 0 then go to ERROR;	/* have found doubled quotes in it */
		bstr = "0"b;			/* set to zeros to start */
		do k = 1 to size;			/* set each one bit ON */
		     if substr (il, i+k, 1) = "1" then substr (bstr, k, 1) = "1"b;
		end;
		type = 19;
		lin = j+2;
		return;
	     end;
						/* check here for "" in char string */
	     if substr (il, j+1, 1) = """" then do;
		substr (cstr, cstrt+1, size+1) = substr (il, i+1, size+1); /* copy string ending with " */
		i = j + 1;			/* remember where in scan we are */
		cstrt = cstrt+size+1;		/* update filled in offset in output string */
		go to scan_end_chars;		/* and scan for closing " */
	     end;

	     substr (cstr, cstrt+1, size) = substr (il, i+1, size); /* copy string */
	     size = cstrt+size;			/* and remember final size for caller */
	     type = 21;
	     lin = j + 1;
	     return;
	end;

	if verify (c1, "-+0123456789") = 0 then do;
get_fixed:   j = db_get_count$dec (il, i, lin);		/* assume afixed binary no. */
	     if i = lin then go to ERROR;
	     if substr (il, lin, 1) = "." | substr (il, lin, 1) = "e" then call get_float;
	     else if substr (il, lin, 1) = "|" then do;
		j = db_get_count (il, i, lin);	/* rescan in octal for segment no. */
		call get_offset;
	     end;
	     type = 1;
	     retp -> fword = j;
	     go to RETURN;
	end;

	if c1 = "%" then do;			/* dummy argument */
	     type = -3;
	     lin = i+1;				/* set up return arg */
	     c1 = substr (il, lin, 1);
	     if verify (c1, ", );") ^= 0 then go to ERROR;
	     return;
	end;

is_var:	depth = 0;				/* argument must be a variable */
	do lin = i+1 to ill;			/* scan char by char */
	     c1 = substr (il, lin, 1);		/* pick up current character */
	     if verify (c1, "0123456789 abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ._") = 0 then go to endl;
	     if c1 = "(" then depth = depth + 1;
	     if c1 = ")" then do;
		if depth > 0 then depth = depth - 1;
		else go to done;
	     end;
	     else if c1 = "-" then do;
		if substr (il, lin+1, 1) = ">" then lin = lin + 1;
		else if depth = 0 then go to done;
	     end;
	     else if depth = 0 then go to done;
endl:	end;
	go to ERROR;
done:	
	size = lin - i;				/* get length of variable name */
	cstr = substr (il, i, size);			/* copy name into return area */
	type = 0;
RETURN:	return;

ERROR:	type = -2;
	return;




ptr_offset: entry (il, lin, ill, base_val, retp, type, size);

/* entry to parse the offset portion of a pointer whose seg. no. is known */

dcl  base_val fixed bin;

	j = base_val;
	call get_offset;


get_float: proc;
	     call db_get_count$data (il, i, lin, retp, 6, 35);
	     if i = lin then go to ERROR;;
	     type = 3;
	     go to RETURN;
	end get_float;

get_offset: proc;

	     k = db_get_count (il, lin+1, lin);		/* get offset */
	     retp -> bptr = ptr (baseptr (j), k);	/* create and return pointer */
	     type = 13;
	     if substr (il, lin, 1) = "(" then do;	/* bit offset given */
		j = db_get_count$dec (il, lin+1, lin);
		retp -> bptr = addrel (retp -> bptr, divide (j, 36, 18, 0)); /* maybe bit offset > 36 */
		retp -> its.bit_offset = bit (fixed (mod (j, 36), 6)); /* stuff in bit offset */
		if substr (il, lin, 1) ^= ")" then go to ERROR;
		lin = lin + 1;			/* skip over last ")" */
	     end;
	     if substr (il, lin, 1) = "["
		then do;
		l = db_get_count$dec (il, lin+1, lin);
		if l > 7 then go to ERROR;
		retp -> its.ringno = bit (fixed (l, 3), 3);
		if substr (il, lin, 1) ^= "]" then go to ERROR;
		lin = lin + 1;
	     end;
	     go to RETURN;

	end get_offset;


     end;
