/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


pl1_frame_: proc (spt, ans);

/*	sets ans =  "1"b if stack frame pointed at by pt is a pl1 frame */

/*	Modified:  2 Januaray, 1973  by S. Webber for 6180.   */

	dcl spt ptr,
	(bc, code) fixed bin,
	ans bit (1) aligned;

	dcl pl1_operators$call_out ptr ext;

	dcl p ptr int static,
	(defp, pt) ptr,
	v2 bit (1) int static,
	legal_f_ entry (ptr) returns (fixed bin),
	bit_word aligned bit (36) based (p),
	fix_word fixed bin based (p),
	(addr, addrel, baseptr, divide, fixed, null, ptr, rel, substr) builtin,
	pl1_frame_ entry (ptr) returns (aligned bit (1));

	dcl lang fixed bin;

	dcl based_ptr ptr based;

	dcl 1 half aligned based,
	2 (left, right) unaligned bit (18);

	dcl 1 acc aligned based,
	2 length unal bit (9),
	2 string unal char (1);
						/*  */
%include definition;
/*  */
%include stack_frame;
/*  */
%include its;


%include pl1_stack_frame;
/*  */
	pt = spt;

/* Clear out any flags (such as condition list present) which may have
   been set in stack frame pointer.  This is necessary because the
   pointer we are passed may actually be the back point in a stack frame */

	addr (pt) -> its.pad1 = "0"b;
	addr (pt) -> its.pad2 = "0"b;

	if pt = null				/* pt can't possibly point to a stack frame */
	then do;
no:	     ans = "0"b;
	     return;
	end;

	if legal_f_ (pt) ^= 0 then goto no;		/* check to see if frame is at least threaded */

	lang = fixed(pt -> stack_frame.translator_id, 18);
				/* find out which translator produced
					the segment */

	if lang = 2 then v2 = "0"b;	/*PL/I, version 1 */
	else if lang = 0 then v2 = "1"b;	/* pl/I version 2 */

	else go to no;		/* not PL/I at all */

	/* get entry pointer  for use by "name" entry */

	p = pt -> stack_frame.entry_ptr;

	ans = "1"b;
	return;
						/*  */
pl1_frame_$name: entry (spt, name_pt, name_size);

/*	sets name_pt & name_size to determine name of pl1 program
   corresponding to stack frame pointed at by pt.  name_pt will be
   set to null if frame is not a pl1 frame */

	dcl name_pt ptr,
	name_size fixed bin;

	if ^ pl1_frame_ (spt)			/* first see if we have a good pl1 frame */
	then do;					/* if not, there's no name to return */
l2:	     name_pt = null;
	     name_size = 0;
	     return;
	end;					/* p now contains the entry pointer */

	if addrel(p, 1) -> bit_word = "000000000110001100010111010001000000"b then
		/* a tsbbp ap|614 marks the entry as a begin block */
	go to l2;	/* in which case we can't get the name */

	if v2					/* for Version II */
	then do;
	     p = addrel (p, -1);			/* length of name is 1 word before entry */
	     if p -> half.left then goto std_obj;	/* left half ^= 0 means std object segment */
	     goto l1;
	end;
						/* for Version I */
	/* name-size is 3 words before entry point */

	p = addrel(p, -3);

l1:	name_size = p -> fix_word;			/* get length of name in characters */
	name_pt = addrel (p, -divide (name_size+3, 4, 18, 0)); /* name immediately precedes length; get length in  */
						/* words (rounding up) and subtract from pointer */
	return;

/* For a standard object segment we use the fact that the
   linkage ptr in the stack frame points to the linkage header
   in CLS and the first two words in linkage header point
   to definition section */

std_obj:	defp = spt -> pl1_stack_frame.linkage_ptr -> based_ptr;

	p = addrel (defp, p -> half.left);
	p = addrel (defp, p -> definition.symbol);

	name_size = fixed (p -> acc.length, 9);
	name_pt = addr (p -> acc.string);

     end;
