/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


db_fill_snt:	procedure( arg_sp, arg_snt_ptr );


/*	This procedure fills in the  SNT  table with data from the specified stack frame.  */




/*		PARAMETER  DATA		*/


dcl	arg_sp		ptr,		/* Pointer to the stack frame where we
					*  will get our data.  */

	arg_snt_ptr	ptr;		/* Pointer to the  SNT  table.  */





/*		AUTOMATIC  DATA		*/


dcl	code		fixed bin,	/* Return code. */

	dummy		fixed bin;	/* Dummy argument. */


dcl	lot_ptr		ptr,		/* Pointer to the  LOT  table.  */
	isot_ptr		ptr,		/* Pointer to the ISOT  table.  */

	proc_segno	fixed bin;	/* Segment number of the procedure which
					*  owns the stack frame.  */


dcl	procedure_ptr	ptr,		/* Pointer to the procedure which owns
					*  the stack frame.  */

	dum_string	char (32) aligned;	/* dummy string used as argument */


dcl	1 situation 	aligned,
	  2 bad_frame bit (1) unal,
	  2 pad1 bit (4) unal,
	  2 entry_ptr_bad bit (1) unal,
	  2 pad2 bit (30) unal;


dcl 1 cond_info aligned,
%include cond_info;





/*		BASED  DATA		*/


dcl    1	lot_array ( 0:1023 )  aligned  based,	/* Map of  LOT table. Used to reference
					*  specific entries in the LOT.  */

	2 segno	bit(18)	unaligned,

	2 offset	bit(18)	unaligned;


dcl	based_name_string    char(ent_pt_name_len)    based;




/*		EXTERNAL  DATA		*/


dcl	db_stack_util$procedure_ptr	ext  entry  ( ptr, ptr, fixed bin ),

	hcs_$fs_get_path_name	ext  entry  ( ptr, char(*) aligned, fixed bin, char(*) aligned, fixed bin ),

	find_condition_info_ 	ext  entry  ( ptr, ptr, fixed bin );

dcl	stack_frame_exit_		ext entry  ( ptr, ptr, ptr,
					 bit (1) aligned, ptr, char(32) aligned,
					 ptr );

dcl	get_entry_name_		ext entry  (ptr, char (*) aligned, fixed bin,
					 char (*) aligned, fixed bin );




dcl     (	addr,
	baseno,
	baseptr,
	fixed,
	null,
	ptr,
	rel  )	builtin;
/**/
%include db_snt;
/**/
%include its;
/**/
%include stack_header;
/**/
%include stack_frame;
/**/
	sp  =  arg_sp;			/* Copy arguments. */

	sntp  =  arg_snt_ptr;


	snt.sp  =  sp;			/* Save pointer to this stack frame.  */


	call	get_proc_ptr;		/* get a pointer to the point */
					/* where the frame was exited */

	if    procedure_ptr  =  null()

/*	Pointer is either invalid or is null.  Set up null SNT  data.  */

			then  do;
bad_proc_ptr:		snt.ent_pt_name,
			snt.ent_name  =  "(unknown procedure)";
			snt.dir_name  =  " ";
			snt.pp,
			snt.lp,
			snt.symp  =  null();
			snt.symflag  =  "0"b;
			return;
			end;



/*	Procedure pointer is  OK.  Fill with what should be  good  data.   */

	snt.symflag  =  "1"b;		/* Indicate that we don't have a symbol
					*  table pointer yet.  */

	snt.symp  =  null();


/*	We will get the  lot  pointer for this procedure from the actual entry in the
*	lot for this procedure.  We can get a pointer to the beginning of the lot from
*	the stack header.
*/

	lot_ptr  =  ptr( sp, 0 ) -> stack_header.lot_ptr;

	proc_segno  =  fixed ( baseno( procedure_ptr ));

	snt.lp  =  ptr( baseptr( lot_ptr -> lot_array(proc_segno).segno),
		      lot_ptr -> lot_array(proc_segno).offset );

	isot_ptr = ptr (sp, 0) -> stack_header.isot_ptr;
	snt.static_ptr  =  ptr( baseptr( isot_ptr -> lot_array(proc_segno).segno),
		      isot_ptr -> lot_array(proc_segno).offset );


	snt.pp  =  procedure_ptr;


/*	For crawl-out frame don't try to get pathname, just stuff it in */

	if fixed( sp -> stack_frame.translator_id, 18) = 3
		then do;

		snt.ent_pt_name, snt.ent_name = "signal_caller";

		snt.dir_name = "signal_caller_directory";

		return;
	end;

/*	Get the path name of the procedure.  If we can't get the path name then see
*	if the frame belongs to the signaller.  If it doesn't then we don't know who
*	it belongs to.
*/

	call	hcs_$fs_get_path_name( procedure_ptr, snt.dir_name, dummy, snt.ent_name, code );

	if	code  ^=  0		/* Did we get a path name. */

		then  do;			/* NO, check for signaller. */

		if  fixed (sp -> stack_frame.translator_id, 18) = 4


			then  do;		/* It is the signaller. */

			snt.ent_pt_name, snt.ent_name  =  "return_to_ring_0_";

			snt.dir_name  =  "signaller_directory";

			return;
			end;


		else  do;		/* It isn't the signaller.  */

			snt.ent_name  =  "(unknown procedure)";

			snt.dir_name  =  " ";

			end;

		end;


/*	Now try to get the entry point name of the procedure.  If we can't
*	get it, we'll just use the entry name of the segment.
*/

	if ^situation.entry_ptr_bad then do;	/* don't bother if we don't have entry ptr */

	     call get_entry_name_ (sp -> stack_frame.entry_ptr,
				snt.ent_pt_name, proc_segno,
				dum_string, code );

	     if code = 0 then return;
	end;

	snt.ent_pt_name = snt.ent_name;	/* couldn't get entry name */

	return;


proc_ptr:	entry (arg_sp, arg_pp);

	/* entry to get just a procedure pointer */

dcl  arg_pp ptr;

	sp = arg_sp;

	call get_proc_ptr;

	arg_pp = procedure_ptr;
	return;


get_proc_ptr:	proc;

/* internal procedure to figure out where a stack frame comes from */

	call find_condition_info_ ( sp, addr(cond_info), code);
				/* get stuff that stack_frame_exit_ wants */

	/* now let stack_frae_exit_ do the real work */

	call stack_frame_exit_ (sp, cond_info.mcptr, cond_info.wcptr,
			  (cond_info.crawlout), procedure_ptr, dum_string,
			  addr(situation));

	if situation.bad_frame | addr (procedure_ptr) -> its.its_mod ^= "100011"b
			/* no good */
	then procedure_ptr = null;

	return;
	end;

	end	db_fill_snt;
