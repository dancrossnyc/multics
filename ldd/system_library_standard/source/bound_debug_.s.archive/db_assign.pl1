/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


db_assign: proc (il, lin, ill, data_ptr, sntp, db_mc_ptr, old_type, a_cur_size, a_old_size, print_mode, dec_default);

%include db_ext_stat_;

dcl  db_mc_ptr ptr;
dcl  il char (132) aligned,
    (lin, ill) fixed bin,
     print_mode fixed bin,
     data_ptr ptr;

dcl  a_cur_size fixed bin;
dcl  cur_size fixed bin;
dcl  a_old_size fixed bin;
dcl  old_type fixed bin;
dcl  old_size fixed bin;
dcl  new_size fixed bin;
dcl  last_char fixed bin;				/* ill -1 (line ends with new_line) */

dcl
     com_err_ entry options (variable),
     cu_$level_get entry returns (fixed bin),
     db_get_count ext entry (char (132) aligned, fixed bin, fixed bin) returns (fixed bin),
     db_get_count$dec ext entry (char (132) aligned, fixed bin, fixed bin) returns (fixed bin),
     db_regs$get ext entry (ptr, char (4), bit (72), fixed bin),
     db_sym ext entry (char (72) var, ptr, ptr, fixed bin, fixed bin, char (1) aligned,
     char (*) aligned, fixed bin, fixed bin, fixed bin),
     print_text_$format ext entry (ptr, char (*) var),
     hcs_$add_acl_entries entry (char (*) aligned, char (*) aligned, ptr, fixed bin, fixed bin (35)),
     hcs_$delete_acl_entries entry (char (*)aligned, char (*)aligned, ptr, fixed, fixed bin (35)),
     get_group_id_ entry returns (char (32) aligned),
     hcs_$fs_get_mode ext entry (ptr, fixed bin (5), fixed bin (35)),
     ioa_$ioa_stream ext entry options (variable),
     db_parse_arg ext entry (char (132) aligned, fixed bin, fixed bin, ptr, fixed bin, fixed bin);

dcl  fix_bit entry (bit (*) aligned, fixed bin) returns (fixed bin);
dcl  fix_bit$double entry (bit (*) aligned, fixed bin) returns (fixed bin (71));

dcl
     access_ok fixed bin (1),
     base fixed bin,
     code fixed bin,
     code35 fixed bin (35),
     emode fixed bin (5),
     off fixed bin,
     offset fixed bin,
     op fixed bin,
     rb (0:2) fixed bin,
     rep_count fixed bin,
     size fixed bin,
     max_size fixed bin,
     tag fixed bin,
     type fixed bin,
    (i, j, k) fixed bin;
dcl  index_start_no fixed bin;			/* index in il of the beginning of a type 1 no. string */

dcl 1 delete_acl aligned,
    2 access_name char (32),
    2 status_code fixed bin (35);
dcl 1 segment_acl aligned,
    2 access_name char (32),
    2 modes bit (36) init ("111000000000000000000000000000000000"b),
    2 zero_pad bit (36) init ("0"b),
    2 status_code fixed bin (35);

dcl (old_sign, new_sign) fixed bin;

dcl  pad_bits fixed bin;
dcl  off_inc fixed bin;
dcl (old_bit_off, new_bit_off) fixed bin;

dcl  fword fixed bin based;

dcl  flword float bin based;

dcl  two_words bit (72) based;

dcl  words (2) bit (36) aligned based;

dcl  tw_flag fixed bin init (0);

dcl  reg_name char (4);

dcl  len_ptr ptr;

dcl  dp ptr,
     tp ptr,
     tem (17) ptr,
     temp ptr,

     bptr ptr based;
dcl  packed_ptr ptr unal based;

dcl (old_ptr, new_ptr) ptr;
dcl  ones bit (72) int static init ((72)"1"b);

dcl  TOO_BIG fixed bin int static init(1);
dcl  BAD_SYNTAX fixed bin int static init(2);
dcl  MISS_PAREN fixed bin int static init(3);
dcl  BAD_PR fixed bin int static init(4);
dcl  NO_REG fixed bin int static init(5);
dcl  NO_SYM fixed bin int static init(6);
dcl  OPCODE fixed bin int static init(7);
dcl  TAG fixed bin int static init(8);
dcl  SYNTAX fixed bin int static init(9);
dcl  BAD_REP fixed bin int static init(10);
dcl  mess (10) char(40) var int static init (
	"Value too large",				/* TOO_BIG */
	"Bad syntax in instruction input",
	"Missing "")""",
	"Invalid pointer register",
	"Register name missing",
	"Variable not defined",
	"Bad opcode",
	"Bad tag",
	"Syntax error scanning input",
	"Illegal repetition factor");
dcl  sign_bit bit (1) unal based;
dcl  dec_default bit (1) unal;			/* 1 = decimal default
						   0 = octal default ( registers, temporaries ) */

dcl (old_word, new_word) bit (36) aligned;
dcl (old_double, new_double) fixed bin (71);

dcl  control char (8) aligned;			/* variable ioa_ control string */

dcl  mode char (1) aligned,
     old_str char (old_size) based (dp),
     str char (size) based (tp),
     repstr char (size*rep_count) based,
     old_bits bit (old_size) based (dp),
     new_bits bit (size) based (tp),
     chars (0:10000) char (1) unal based,
     bitarr (0:10000) bit (1) unal based,
     sym_name char (72) aligned,
     opcode6 char (6) aligned,
     c2 char (2) aligned,
     c4 char (4) aligned,
    (name1, name2) char (72) var,
     db_sym_name char (72) var,
    (type_char, mode_char) char (1) aligned;

/*	The following declaration is included(temporarily) to allow
   *	the use of the old-style names of the pointer registers.
*/

dcl  old_pr_names (0:7) char (2) int static init
    ("ap", "ab", "bp", "bb", "lp", "lb", "sp", "sb");

dcl  conversion condition;
dcl  underflow condition;


dcl  ffdouble fixed bin (71) based;			/* used for printing double words in ^d */
dcl 1 ff aligned based,
    2 (w0, w1, w2, w3, w4, w5, w6, w7) fixed bin;

dcl (addr, addrel, bit, char, fixed, index, max, min, mod, null, substr, unspec, rel) builtin;
dcl (abs, binary, divide, search, verify) builtin;
						/*  */
%include db_snt;
/*  */
%include db_inst;
/*  */
%include its;
/*  */


dcl 1 op_mnemonic_$op_mnemonic (0:1023) ext static aligned,
    2 opcode char (6) unal,
    2 dtype fixed bin (2) unal,			/* 0 - desc9a, 1 - descb, 2 - decimal */

    2 num_desc fixed bin (5) unal,
    2 num_words fixed bin (8) unal;

%include db_data_map;
/*  */

	temp = addr (tem);				/* get pointer to temporary storage */
	dp = data_ptr;				/* get pointer to first word to change */
	cur_size = a_cur_size;
	old_size = a_old_size;


/*  If the user does not have w access on the segment, try to add w user.proj.tag  */

	call hcs_$fs_get_mode (dp, emode, code35);	/* see if the user has write permit on the segment */
	if code35 = 0 then do;
	     if bit (emode, 5) & "00010"b then access_ok = 1; /* if write permit is there, OK */
	     else do;
		access_ok = 0;			/* hasn't got write permit, change the access */
		segment_acl.access_name = get_group_id_ ();
		call hcs_$add_acl_entries (snt.dir_name, snt.ent_name, addr (segment_acl), 1, code35);
	     end;
	end;
	if code35 ^= 0 then do;			/* Can't get write access on segment */
	     call com_err_ (code35, "debug", "Cannot change ^p", dp);
	     return;
	end;

	if print_mode ^= 0 then
	     call ioa_$ioa_stream (debug_output, "Changing ^p", dp); /* print out location changings */

	last_char = ill -1;
	do while (get_char (lin));

	     rep_count = 1;

	     if mode = "(" then call get_rep_count (rep_count);
	     if mode = "(" then call get_instruction;	/* instruction format  (opcode) */
	     else if mode = "$" then do;		/* register being used as value */
		dec_default = "0"b;
		i = search (substr (il, lin, ill-lin+1), " ;");
		if i = 0 then i = ill;
		else i = lin + i -1;
		if i-lin-1 < 1 then call error (NO_REG, "");
		sym_name = substr (il, lin+1, i-lin-1); /* copy register name into temporary */
		lin = i;
		reg_name = substr (sym_name, 1, 4);
		type = 1;
		size = 36;
		call db_regs$get (db_mc_ptr, reg_name, temp -> two_words, print_mode);
		if reg_name = "aq" then size = 72;
		do i = 0 to 7;
		     if reg_name = db_data$names (i) then do;
			size = 72;
			type = 13;
		     end;
		end;
		if size ^= 72 then tp = addrel (temp, 1);
		else tp = temp;

		call store_value;

	     end;

	     else do;				/* call db_parse_arg to pick off the other types */
		index_start_no = lin;		/* patch for octal default */
		type = 0;
		if ^dec_default then do;
		     temp -> fword = db_get_count (il, lin, i);
		     if i > lin then if index (", ;
", substr (il, i, 1)) ^= 0 then do;
			     type = 1;
			     lin = i;
			end;
		end;

		if type = 0 then call db_parse_arg (il, lin, ill, temp, type, size); /* scan for next item */
		tp = temp;

		if type = -1 then goto reset;		/* goto reset if ";", etc. */

		if type = 1 | type = 3 then size = 36;	/* arithmetic type s go in fullword */
		if type = 13 then size = 72;		/* pointer on double-word */

		if type = 0 then do;		/* a variable as input parameter */
		     db_sym_name = str;		/* copy variable name into temporary */
		     call db_sym (db_sym_name, sntp, tp, offset, type, type_char, mode_char, size, max_size, code);
		     if code ^= 0 then call error (NO_SYM, (name1));
		end;

		call store_value;

	     end;
	end;

reset:
	if access_ok = 0 then call hcs_$delete_acl_entries (snt.dir_name, snt.ent_name, addr (segment_acl), 1, code35);
	return;


/*  */
bump:	proc;

/*	This internal procedure is used to bump the data pointer
   *	to the next item after the one just assigned to.
*/

	     off_inc = divide (old_size, 36, 17, 0);
	     old_bit_off = fixed  (addr (dp) -> its.bit_offset, 6);

	     new_bit_off = old_bit_off + mod (old_size, 36);
	     if new_bit_off > 36 then do;		/* into next word */
		new_bit_off = new_bit_off - 36;
		off_inc = off_inc + 1;		/* must bump word offset */
	     end;

	     dp = addrel (dp, off_inc);		/* this will set bit offset */
						/* to zero, so we may have  */
	     if new_bit_off ^= 0 then			/* to set it again */
		addr (dp) -> its.bit_offset = bit (fixed (new_bit_off, 6), 6);

	     rep_count = rep_count - 1;
	     return;
	end bump;





/*  This procedure is an error exit from db_assign.  It prints an error message and goes to reset. */

error:	proc (mess_code, illegal_string);

dcl  mess_code fixed bin;				/* error codes for db_assign */
dcl  illegal_string char (*) aligned;			/* offending character or string */

	     call ioa_$ioa_stream (debug_output, "^a  ^a", mess (mess_code), illegal_string);
	     goto reset;

	end error;



/*  This procedure looks for a non_blank character and sets mode to it.  If mode is ";" or there
    are no more characters left in the line, then get_char returns "0"b.  Otherwise
   it returns "1"b (for found next character).
*/

get_char:	proc (index) returns (bit (1));

dcl  index fixed bin;
dcl  i fixed;

	     lin = index;
	     if lin <= last_char then do;
		i = verify (substr (il, lin, last_char - lin + 1), " ");
		if i > 0 then do;
		     lin = lin + i -1;
		     mode = substr (il, lin, 1);
		     if mode ^= ";" then return ("1"b);
		end;
		else lin = last_char + 1;
	     end;

	     return ("0"b);

	end get_char;

	

/*  This procedure attempts to parse an instruction of the form:

	( opcode base|offset,tag )

*/

get_instruction: proc;

	     if ^get_char (lin + 1) then call error (MISS_PAREN,  "");
	     j = search (substr (il, lin, last_char - lin + 1), " )"); /* blank or ) follows opcode */
	     if j = 0 then call error (MISS_PAREN,  "");
	     opcode6 = substr (il, lin, j -1);		/* copy opcode name */
	     lin = lin + j -1;
	     op = -1;
	     do i = 0 to 1023 while (op = -1);		/* search for the opcode */
		if opcode6 = op_mnemonic_$op_mnemonic (i).opcode then op = i;
	     end;
	     if op = -1 then call error (OPCODE, opcode6);

	     if ^get_char (lin) then call error (SYNTAX, "");
	     base = -1;				/* -1 indicates no pr specified */

	     if substr (il, lin+3, 1) = "|" then do;	/* standard pointer register prN|NN */
		if substr (il, lin, 2) ^= "pr" then call error (BAD_PR, "");
		lin = lin + 2;
		base = index ("01234567", substr (il, lin, 1)) -1;
		if base = -1 then call error (BAD_PR, "");
		lin = lin + 2;
	     end;

	     else if substr (il, lin+2, 1) = "|" then do; /*  old-style pointer pp|NN */
		c2 = substr (il, lin, 2);		/* copy it for compare */
		lin = lin + 3;			/* increment index */
		base = -1;
		do i = 0 to 7 while (base = -1);	/* search for the base name */
		     if c2 = old_pr_names (i) then base = i;
		end;
		if base = -1 then call error (BAD_PR, "");
	     end;

	     j = lin;				/* check for number */
	     off = db_get_count (il, lin, lin);		/* pick up the offset specified by the user */
	     if j = lin then if substr (il, lin, 1) = ")" then off = 0; /* not a number */
		else call error (SYNTAX, "");
	     tag = 0;				/* indicates tag not yet specified */
	     if substr (il, lin, 1) = "," then do;	/* a tag was specified */
		j = index (substr (il, lin+1, 4), ")"); /* find location of the ")" */
		if j = 0 then call error (MISS_PAREN,  "");	/* error condition */
		c4 = substr (il, lin, j);		/* pick up the tag field */
		lin = lin+j+1;			/* skip over rest of instruction input */

		tag = -1;
		do i = 0 to 63 while (tag = -1);
		     if db_data$tags (i) = c4 then tag = i;
		end;
		if tag = -1 then call error (TAG, c4);
	     end;
	     else do;
		if ^get_char (lin) then call error (MISS_PAREN, "");
		if mode ^= ")" then call error (SYNTAX, "");
		lin = lin + 1;
	     end;

	     do rep_count = rep_count to 1 by -1;
		if print_mode ^= 0 then
		     call print_text_$format (dp, name1);
		k = dp -> ff.w0;			/* save the old value */
		if base = -1 then do;		/* a base was never spec ified */
		     dp -> instr.offset = off;	/* copy full offset into instruction */
		     dp -> instr.pr_bit = "0"b;	/* make sure don't use base */
		end;
		else do;
		     dp -> instr_pr.pr = bit (fixed (base, 3)); /* copy base into instruction */
		     dp -> instr_pr.offset = off;	/* copy offset */
		     dp -> instr.pr_bit = "1"b;	/* turn on bit 29 */
		end;
		dp -> instr.opcode = bit (fixed (op, 10)); /* fill in opcode */
		dp -> instr.tag = bit (fixed (tag, 6)); /* fill in tag */
		dp -> instr.inhibit = "0"b;
		i = dp -> ff.w0;			/* get new value */
		if print_mode ^= 0 then do;
		     call print_text_$format (dp, name2);
		     call ioa_$ioa_stream (debug_output, "^a^/to^/^a", name1, name2);
		end;
		dp = addrel (dp, 1);
	     end;

	     return;

	end get_instruction;





/*  This procedure has a value and stores it at the location given with dp.  Rep_count  is the number of
    times to repeat a given value.
*/

store_value: proc;

	     len_ptr = null;
	     if old_type = 0 then cur_size, old_size = size;
	     else if cur_size < old_size then len_ptr = addrel (dp, -1);
	     if type <= 4 then do;

						/* for arithmetic values, if not a variable specified on left, just fill in rest of word */
		if old_type = 0 then old_size = 36 - fixed (addr (dp) -> its.bit_offset, 6);
	     end;

	     if type = 21 then do;			/* character string */
		if old_type ^= 21 & old_type ^= 0 then do;
		     old_size = divide (old_size, 9, 17, 0); /* convert size from bits to chars */
		     cur_size = divide (cur_size, 9, 17, 0);
		end;
		if old_size <= 0 then call error (TOO_BIG, "");
		size = min (old_size, size);
		new_size = rep_count*size;
		if print_mode ^= 0 then do;
		     if rep_count > 1 then call ioa_$ioa_stream (debug_output, """^a"" to (^d)""^a""", substr (dp -> repstr, 1, new_size), rep_count, str);
		     else call ioa_$ioa_stream (debug_output, """^a"" to ""^a""", substr (dp -> old_str, 1, cur_size), str);
		end;
		do rep_count = rep_count to 1 by -1;
		     old_str = str;
		     dp = addr (dp -> chars (size));
		end;
		if len_ptr ^= null then do;		/* if a varying string, update length */
		     len_ptr -> fword = min (new_size, old_size);
		     cur_size = old_size;		/* so we won't do it again */
		end;
		rep_count = 1;
	     end;

	     else if type = 19 then do;		/* bit string */
		if old_type = 21 then do;		/* if char string, convert size to bits */
		     old_size = 9*old_size;
		     cur_size = 9*cur_size;
		end;
		size = min (old_size, size);		/* bit string */
		new_size = rep_count*size;

		do rep_count = rep_count to 1 by -1;
		     if print_mode ^= 0 then
			call ioa_$ioa_stream (debug_output, """^a""b to ""^a""b", char (substr (dp -> old_bits, 1, cur_size)),
			char (tp -> new_bits));
		     dp -> old_bits = new_bits;
		     dp = addr (dp -> bitarr (size));
		end;
		if len_ptr ^= null then do;
		     len_ptr -> fword = min (new_size, old_size);
		     cur_size = old_size;
		end;
	     end;

	     else if type = 13 then do while (rep_count > 0); /* pointer */
		if old_type = 0 then dp = addrel (dp, 0); /* eliminate bit offset if not var. */
		if old_size < 36 then call error (TOO_BIG, "");
		if old_size < 72 then do;		/* into packed ptr */
		     unspec (old_ptr) = unspec (dp -> packed_ptr);
		     if size = 36 then
			unspec (new_ptr), unspec (dp -> packed_ptr) = unspec (tp -> packed_ptr);
		     else unspec (new_ptr), unspec (dp -> packed_ptr) = unspec (tp -> bptr);
		end;
		else do;
		     unspec (old_ptr) = unspec (dp -> bptr);
		     if size = 36 then
			unspec (new_ptr), unspec (dp -> bptr) = unspec (tp -> packed_ptr);
		     else unspec (new_ptr), unspec (dp -> bptr) = unspec (tp -> bptr);
		end;

		if print_mode ^= 0 then
		     call ioa_$ioa_stream (debug_output, "^p to ^p", old_ptr, new_ptr);
		call bump;
	     end;

	     else if type = 14 then do while (rep_count > 0); /* offset variable */
		if old_size < 36 then call error (TOO_BIG, "");
		if print_mode ^= 0 then do;
		     old_word = old_bits;
		     new_word = new_bits;
		     call ioa_$ioa_stream (debug_output, "^w to ^w", old_word, new_word);
		end;

		old_bits = new_bits;
		call bump;
	     end;


	     else if type = 1 | type = 2 then do;	/* fixed bin */
		if ^dec_default then do;
		     if substr (il, index_start_no, 2) = "&d" then control = "^d to ^d";
		     else if old_size = 36 then control = "^w to ^w";
		     else control = "^o to ^o";
		end;
		else do;				/* decimal default assumed unles &o was used */
		     if substr (il, index_start_no, 2) = "&o" then control = "^o to ^o";
		     else control = "^d to ^d";
		end;
		do while (rep_count > 0);
		     if abs (fix_bit$double ((new_bits), size)) >= binary (2)** (old_size) then call error (TOO_BIG, "");
		     if dp -> sign_bit then old_sign = -1;
		     else old_sign = 1;

		     if tp -> sign_bit then new_sign = -1;
		     else new_sign = 1;

		     if print_mode ^= 0 then do;
			if old_size <= 36 then do;
			     old_word = old_bits;
			     new_word = new_bits;
			     call ioa_$ioa_stream (debug_output, control, fix_bit (old_word, old_size),
				fix_bit (new_word, size));
			end;

			else do;
			     old_double = fix_bit$double ((old_bits), old_size);
			     new_double = fix_bit$double ((new_bits), size);
			     if dec_default then call ioa_$ioa_stream (debug_output, control,
				addr (old_double) -> ffdouble, addr (new_double) -> ffdouble);
			     else call ioa_$ioa_stream (debug_output, "^w^w to ^w^w", addr (old_double) -> ff.w0,
				addr (old_double) -> ff.w1,
				addr (new_double) -> ff.w0, addr (new_double) -> ff.w1);
			end;
		     end;

		     if size >= old_size then
			old_bits = substr (new_bits, size-old_size+1);
		     else do;
			pad_bits = old_size - size;
			if new_sign < 0 then substr (old_bits, 1, pad_bits) = ones;
			else substr (old_bits, 1, pad_bits) = "0"b;

			substr (old_bits, pad_bits+1) = new_bits;
		     end;

		     call bump;
		end;
	     end;

	     else if type = 3 | type = 4 then do;
		do while (rep_count > 0);
		     if old_size < 9 then call error (TOO_BIG, "");

		     if print_mode ^= 0 then do;
			on underflow begin;		/* maybe some value wasn't really */
						/* floating, so print it out octal */
			     call ioa_$ioa_stream (debug_output, "^w to ^w", dp -> fword, tp -> fword);
			     goto rev_under;
			end;

			call ioa_$ioa_stream (debug_output, "^12.4f to ^12.4f", addr (old_bits) -> flword,
			     addr (new_bits) -> flword);
rev_under:		revert underflow;
		     end;

		     old_bits = substr (new_bits, 1, min (old_size, size));
		     call bump;
		end;
	     end;


	     else call error (SYNTAX, "");
	     return;


	end store_value;

	

/*  This procedure attempts to get a repetition count.  It assumes a format:

	[blank(s)]  [decimal digit(s)]  [blank(s)]

    If the string is not a repetion count, lin and mode are restored.  The main procedure  will then
    try to parse an instruction
*/

get_rep_count: proc (rep);

dcl  rep fixed bin;

	     rep = 1;
	     i = lin;				/* save in  case this is not repetition */
	     if get_char (lin + 1) then do;
		k = lin;
		j = db_get_count$dec (il, lin, lin);

		if lin = k then do;
		     lin = i;
		     mode = "(";
		     return;
		end;

		if get_char (lin) then if mode = ")" then do;
			if j < 1 then call error (BAD_REP, "");
			if ^get_char (lin + 1) then call error (SYNTAX, "");
			rep = j;
			return;
		     end;
	     end;

	     call error (MISS_PAREN,  "");

	end get_rep_count;

     end db_assign;
