/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


legal_f_: proc (arg_stack_frame_ptr, code);

/* This procedure makes some validity checks on the stack frame pointer.  It makes sure the current stack frame
   and the previous and next frames are at location modulo 16.  If the current and next frame are in the same
   segment, the procedure checks that they are in order.
*/

dcl  arg_stack_frame_ptr ptr;				/* ptr to stack frame to be checked */
dcl  code fixed bin (35);

dcl (null, baseno, fixed, rel) builtin;
%include stack_frame;

/*  */
	code = 0;
	sp = arg_stack_frame_ptr;
	if sp = null then code = 1;
	else do;
	     call check_ptr (sp);
	     call check_ptr (sp -> stack_frame.prev_sp);
	     call check_ptr (sp -> stack_frame.next_sp);

	     call check_frame (sp, sp -> stack_frame.next_sp);
	     call check_frame (sp -> stack_frame.prev_sp, sp);
	end;

	return;

/*  */
/* If a stack frame pointer is not null, it must be modulo 16. */

check_ptr: proc (p);

dcl  p ptr;
dcl  zero_mod_16_test bit (18) aligned static options (constant) init ("000000000000001111"b);

	     if p ^= null then if rel (p) & zero_mod_16_test then code = 1;

	end check_ptr;


/* If two stack frame pointers are in the same segment, a check is made that the second frame follows the first
   and that the first stack frame is of the minimum length. */

check_frame: proc (s1, s2);

dcl  s1 ptr;					/* ptr to lower stack frame */
dcl  s2 ptr;					/* ptr to higher stack frame */

	     if baseno (s1) = baseno (s2)
	     then if fixed (rel (s2), 18) - fixed (rel (s1), 18) < stack_frame_min_length then code = 1;

	     return;

	end check_frame;

     end legal_f_;
