/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


db_parse_condition:	procedure;


/*	This procedure is called to parse condition data involved with a conditional break.
*	This procedure was created so that semantic considerations would not be present
*	in  db_break.
*
*	Written in  Dec 72  for the  6180  by  Bill Silver.
*/



dcl	arg_cond_ptr	ptr,		/* Pointer to condition data passed as an
					*  argument.  */

	break_map_ptr	ptr,		/* Pointer to the segments break map. */

	cond_data		char(236),	/* Return area where condition data is
					*  actually built.  */

	cond_len		fixed bin,	/* Actual size of the condition data.
					*  0 => no condition.  */

	sntp		ptr;		/* Pointer to debug's  snt data.  */


dcl	il	char(132)  aligned,
	(lin, ill, acode)	  fixed bin;


dcl	cond_flag		fixed bin;	/* Return flag indicating whether condition
					*  was met or not.  0 => YES, 1 => NO. */


dcl	return_string	char(72) var;	/* Used to return compare line. 


/*	This constant indicates the size of the whole condition data area.  */

dcl	cond_size		fixed bin	    init(224)	internal static;



dcl	cond_ptr	ptr;		/* Pointer to the condition data. */


dcl  1 cond_map	based ( cond_ptr )  aligned,
    (2 relation,				/* Relation between two variables.
					*  1 =>  "=",  2 => "^=".  */
     2 p1,				/* offset of first comparand */
     2 p2,				/* ditto for 2nd (both are -1 if variable) */
     2 lname1,				/* length of name1 */
     2 lname2) fixed bin,			/* length of name2 */
     2 (name1,name2) char(40),		/* names of variables used in comparison */
     2 compare char(64) aligned,		/* contents of compare line for cond. break */
     2 (constant1,constant2) bit(288) aligned;	/* constants used in comparison */



dcl (tp1,tp2,tp) ptr;

dcl
     db_sym ext entry (char (72) var,ptr,ptr,fixed bin, fixed bin,
		char(1) aligned, char(*) aligned, fixed bin, fixed bin, fixed bin(35)),
     ioa_$ioa_stream ext entry options(variable),
     db_parse_arg ext entry (char (132) aligned,fixed bin,fixed bin,ptr,fixed bin,fixed bin);

%include db_ext_stat_;

dcl
     (i,j) 	fixed bin,
     code 	fixed bin(35),
     exec 	fixed bin,
      l		fixed bin,
     no		fixed bin,
     old_value 	fixed bin,
     pc 		fixed bin,
     pflag	fixed bin,
     t2 		fixed bin,
     temp 	fixed bin,
     relation 	fixed bin;

dcl	pcm	fixed bin;
dcl	cp	ptr;


dcl	char1 (32)	char(1)	based,

	char32		char(32)	based;

dcl
    (c1,c2) char (1) aligned,
     bits bit(pc) based,
     n1 char(72) var,
     str char (exec) based;


dcl
     addr builtin,
     fixed builtin,
     null builtin,
     ptr builtin,
      rel builtin,
     substr builtin,
     unspec builtin;
/*  */
check:	entry ( break_map_ptr, arg_cond_ptr, sntp, cond_flag );


/*	This entry is called by  db_break to determine if the condition of the specified
*	break has been met.  The answer will be returned in cond_flag where:
*	0  => YES,  and  1 => NO.  Note, in the case of an error the  cond_flag  will
*	be set to  0.
*/


	cond_ptr  =  arg_cond_ptr;		/* Copy argument pointer. */

	pc = 36;				/* Default size to compare is 1 word. */
	cond_flag  =  0;			/* Initialize return arg. */

	relation  =  cond_map.relation;

	     i = cond_map.p1;			/* get default pointer to data */
	     if i < 0 then do;
		n1 = substr(cond_map.name1,1,cond_map.lname1);
		if substr (n1,1,1) = "(" then do;		/* got a numeric pointer (xxx|yyy) */
		     call db_parse_arg((n1),2,cond_map.lname1,addr(cond_map.constant1),j,exec);
		     if substr(cond_map.constant1,31,6) ^= "100011"b then go to badcond;  /* not  "43" its pair */
		     unspec(tp1) = substr(cond_map.constant1,1,72);
		     go to next_constant;
		end;
		call db_sym(n1,sntp,tp1,temp,t2,c1,c2,pc,pcm,code); /* get pointer to first data item */
		if code ^= 0 then do;
badcond:		     call ioa_$ioa_stream (debug_output, "Error in conditional break.");
			return;
		end;
		if c2 = "a" then pc = pc * 9;
		else if c2 = "p" then pc = 72;
	     end;
	     else tp1 = addr(cond_map.constant1);
next_constant:
	     i = cond_map.p2;
	     if i < 0 then do;
		n1 = substr(cond_map.name2,1,cond_map.lname2);
		call db_sym(n1,sntp,tp2,temp,t2,c1,c2,pc,pcm,code);
		if code ^= 0 then go to badcond;
		if c2 = "a" then pc = pc * 9;
		else if c2 = "p" then pc = 72;
	     end;
	     else tp2 = addr(cond_map.constant2);


	     if tp1 -> bits = tp2 -> bits then do;		/* make compare */
		if relation = 2 then cond_flag = 1;		/* if looking for not equal we lose */
		return;
	     end;
	     if relation = 1 then cond_flag = 1;		/* lose if looking for equal */


	return;
/*  */
print_line:	entry ( arg_cond_ptr, return_string );


/*	This entry is called by  db_break  in order to get a string of data which it
*	can print about a condition.
*/


	return_string  =  arg_cond_ptr -> cond_map.compare;


	return;
/**/
set:	 entry(il,lin,ill,cond_len,cond_data,acode);


/*	This entry is called  to parse the condition line entered by the user and
*	to convert this input line into the appropriate condition data.  The condition
*	data will then be returned to the caller ( db_parse ).
*/



	acode = 0;				/* zero out return error code */
	pflag = 0;				/* reset pointer relation flag */

	cond_ptr  =  addr(cond_data);			/* We will build the condition data
						*  in our own area.  */

	pc = 36;					/* default number of bits to compare */
	if ill <= lin then do;			/* resetting conditional break ? */
		cond_len  =  0;		/* YES, reset condition. */
		cond_data  =  " ";
	     return;
	end;
	cond_map.compare = substr(il,lin,ill-lin);	/* save compare line */
	tp = addr(cond_map.constant1);		/* default pointer to constant area */
	call db_parse_arg(il,lin,ill,tp,j,exec);		/* pick off first argument */
	if j = 0 then do;				/* a variable */
	     cond_map.name1 = tp -> str;		/* copy name of variable into break */
	     if tp -> char1(1) = "/" then		/* test for pointer */
	       if substr(il,lin,1) = "/" then do;	/* handle form /xxx/yyyy */
		pflag = 1;			/* set flag for pointer case */
		cp = addr(il);			/* get pointer to original string */
		tp -> char1(1) = "(";		/* start change of form to (xxx|yyyy) */
		tp -> char1(exec + 1) = "|";
		do l = 1 to ill - lin while (cp->char1(lin + l) >= "0" &
					cp->char1(lin + l) <= "7");
		     tp -> char1(l + exec + 1) = cp -> char1(lin + l);
		end;

		exec = exec + l + 1;
		lin = lin + l;
		tp -> char1(exec) = ")";
		cond_map.name1 = substr(tp->char32,1,exec);
	       end;
	     cond_map.lname1 = exec;
	     cond_map.p1 = -1;			/* indicate we've got a variable */
	end;
	else if j < 0 then do;			/* syntax error */
ser:	     acode = 100;				/* special error code indicates syntax error */
	     return;
	end;
	else cond_map.p1 = 1;		/* Filll in offset of constant area */

skip_blanks:	do lin = lin to ill while(substr(il,lin,1) = " "); /* skip blanks */
	end;
	if lin >= ill then go to ser;
	if pflag = 1 then				/* are we handling pointer relation */
	  if substr(il,lin,2) ="&t" then		/* is it valid */
	    do;
	     pflag = 0;
	     lin = lin + 2;				/* start beyond the "&t" */
	     go to skip_blanks;			/* scan for next symbol */
	    end;
	    else go to ser;			    	/* incorrect syntax for pointer relation */
	if substr(il,lin,1) = "=" then relation = 1;	/* get compare relation */
	else if substr(il,lin,2) = "^=" then do;	/* not-equal compare relation */
	     relation = 2;
	     lin = lin + 1;				/* one more character to skip */
	end;
	else do;					/* bad compare relation */
	     call ioa_$ioa_stream (debug_output, "Only ""="" and ""^^="" allowed.");
code0:	     acode = 100;
	     return;
	end;

	lin = lin + 1;				/* scan over (rest of) compare relation */
	tp = addr(cond_map.constant2);		/* set default pointer */
	call db_parse_arg(il,lin,ill,tp,j,exec);		/* get second argument */
	if j = 0 then do;				/* a variable */
	     cond_map.name2 = tp -> str;		/* copy name of variable into break */
	     cond_map.lname2 = exec;
	     cond_map.p2 = -1;			/* indicate we've got variable */
	end;
	else if j < 0 then go to ser;
	else cond_map.p2 = 2;
	cond_map.relation  =  relation;			/* Save relation for when condition
						*  is tested.  */


/*	Now return condition line we have just made.  Return the actual number of
*	characters used.  The rest of the are will just be blank.
*/

	cond_len  =  cond_size;



	end	db_parse_condition;
