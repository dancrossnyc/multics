/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


db_regs:	procedure;



/*	This procedure is used to print, get, or assign the values of the  debug  or  user
*	defined data registers.  There is an entry provided for each of these three
*	functions.   The  debug data registers  are really data fields in the machine
*	conditions and are referenced via pre-defined names.
*
*	Rewritten  Nov 72  for the  6180  by  Bill Silver.
*/



/*		PARAMETER  DATA		*/

dcl	db_mc_ptr	ptr,		/* Pointer to the current machine conditions.  All debug keeps
				*  is a pointer to the machine conditions which are in the stack.
				*  If this pointer is null then we don't have any machine
				*  registers to play with.  Note, the user defined registers
				*  are always available.  	*/

	name	char(4) aligned,	/* The name of the data item that is to be processed.  It is
				*  either a predefined debug data name or the name of a
				*  user defined register.  	*/

	print_mode	fixed bin,	/* 0 => BRIEF,  1 => LONG.  */

	value	bit(72) aligned;	/* Used to assign or get the value of one debug data item.
				*  Its contents are always right justified.  	*/





/*		AUTOMATIC  DATA		*/


/*	These  data items are used as work variables.  */

dcl	block_ptr		ptr,	/* Pointer to a block of 8 words to be printed. */


	work_ptr		ptr;	/* Just a temporary pointer. */

dcl	indp		ptr;	/* pointer to indicator reg. in scu */

dcl	delim		char(2);	/* comma or blank for indicator list */

dcl	namex	fixed bin,	/* The index of the db_data$names table. */

	userx	fixed bin,	/* The index of both the user_reg_names and
				*  user_reg_values  table. */

	i	fixed bin;	/* Just a work varaible. */

dcl	len	fixed bin;	/* Another work variable. */


/*	This variable is used to obtain a printable string of information about
*	an instruction from the  print_text_$format procedure.
*/

dcl	source_string	char (72)	varying;




/*	These words are used to print data items in octal via calls to  "ioa_".   They
*	are needed to correctly print, for example, a 3 octal digit number since the
*	number must be right justified in a 36 bit word and all but the 3 digits to be
*	printed must be zero.
*/

dcl	( print_word1, print_word2, print_word3, print_word4 )
	bit(36)	init( "0"b );




/*	This word is used in printing out the value of the eaq in floating format */

dcl	float_val float bin(63);


dcl	print_request bit (1) init ("0"b);	/* ON if entry by db_regs$print  */




/*		BASED  DECLARATIONS		*/


/*	Used to overlay floating value for eaq output */

dcl	1 float_overlay	aligned based(addr(float_val)),
	2 exponent	unal bit(8),
	2 a_part		unal bit(36),
	2 q_part		unal bit(27);


/*	Used to print out a block of  8  words.  */

dcl	block (0:7)  bit(36)  based;
dcl	eight_words bit(288) based aligned;


/*	Used to reference a pointer as a bit string.  */

dcl	ptr_bit_string	bit(72)	based;

dcl	based_ptr 	ptr   based;

dcl	ind_bits		bit(14) based(indp);	/* indicators */



/*		INTERNAL  STATIC  DATA	    */



/*	The following two tables are used to convert an index of a debug data name into
*	an index of a label constant array.  Except for the first and the last entries
*	all of the entries of these two tables correspond to a debug data name as defined
*	in the  db_data$names array.  The first entry (-1) is used when there is no room
*	left for another user register.  The last entry is used for  user defined registers.
*	The value of each entry is an index into the label array which corresponds to each.
*	of these tables.  Note, the  get_ass_label_table  is used for both the
*	get_label array  and the  assign_label array.   The entries in the label arrays
*	are used to transfer the routine which can process this type of data.
*/



dcl	print_label_table ( -1:33 )	fixed bin	  internal  static

/*			    DATA NAME	PRINT ROUTINE	*/

	init (	    0,	/*		return		*/
		(8) 6,	/* pointer regs	print_pr		*/
		(8) 7,	/* index regs	print_xreg	*/
		    9,	/*   aq		print_aq		*/
		    1,	/*   all		print_all		*/
		    2,	/*   prs		print_prs		*/
		    3,	/*   regs		print_regs	*/
		    4,	/*   scu		print_scu		*/
		    5,	/*   user		print_user_regs	*/
		   10,	/*   a		print_a		*/
		   11,	/*   q		print_q		*/
		   12,	/*   exp		print_exp		*/
		   13,	/*   tr		print_tr		*/
		   14,	/*   ralr		print_ralr	*/
		   15,	/*   ppr		print_ppr		*/
		   16,	/*   tpr		print_tpr		*/
		   17,	/*   even		print_even	*/
		   18,	/*   odd		print_odd		*/
		   19,	/*   ind		print_indicators	*/
		   20,	/*   eaq		print_floating_eaq  */
		    8);	/*   		print_user_reg	*/



dcl	get_ass_label_table ( -1:33 )	fixed bin	  internal  static

/*			    DATA NAME	GET/ASSIGN ROUTINE	*/

	init (	    0,	/*		return		*/
		(8) 2,	/* pointer regs	get/assign_pr	*/
		(8) 3,	/* index regs	get/assign_xreg	*/
		    5,	/*   aq		get/assign_aq	*/
		    1,	/*   all		get/assign_illegal	*/
		    1,	/*   prs		get/assign_illegal	*/
		    1,	/*   regs		get/assign_illegal	*/
		    1,	/*   scu		get/assign_illegal	*/
		    1,	/*   user		get/assign_illegal	*/
		    6,	/*   a		get/assign_a	*/
		    7,	/*   q		get/assign_q	*/
		    8,	/*   exp		get/assign_exp	*/
		    9,	/*   tr		get/assign_tr	*/
		   10,	/*   ralr		get/assign_ralr	*/
		   11,	/*   ppr		get/assign_ppr	*/
		   12,	/*   tpr		get/assign_tpr	*/
		   13,	/*   even		get/assign_even	*/
		   14,	/*   odd		get/assign_odd	*/
		    1,	/*   ind		get/assign_illegal	*/
		    1,	/*   eaq		get/assign_illegal	*/
		    4);	/*   		get/assign_user_reg	*/


/*	The following table contains the names to be associated with
*	each bit of the Indicators register.
*/

dcl	ind_names (14) char(4)	int static initial
	("zero",
	 "neg ",
	 "cary",
	 "ovfl",
	 "eovf",
	 "eufl",
	 "oflm",
	 "tro ",
	 "par ",
	 "parm",
	 "^bar",
	 "tru ",
	 "mif ",
	 "abs ");




/*	These tables contain the user defined registers.  The maximum number that may
*	be defined is  16.   The corresponding entries of the two tables define the
*	name and the value of each register.  Note, these registers are defied as
*	INTERNAL STATIC and thus will remain unchanged for recursive calls to  debug.
*	This is not true for the debug machine condition data.
*/

/*	These variables contain the number of user defined registers which have actually
*	been defined  and the  maximum number which may be defined.
*/

dcl      (num_user_regs	fixed bin    init(0),

	max_num_user_regs	fixed bin	   init(16) )    internal static;


dcl	user_reg_names(16)	char(4)	internal  static;

dcl	user_reg_values(16)	bit(36)	internal static;





/*		EXTERNAL  and  BUILTIN  DATA		*/


/*	These are the external procedures called by  db_regs.  */

%include db_ext_stat_;

dcl	print_text_$format	ext    entry	( ptr, char(*) var ),

	ioa_$ioa_stream	ext    entry	options(variable);

dcl	ioa_$rsnnl	ext    entry	options(variable);



dcl	( addr, substr )	builtin;
/**/
% include	db_data_map;
/**/
% include	its;
% include mc;
/**/


print:	entry  ( db_mc_ptr, name, print_mode );

	print_request = "1"b;		/* Set so we won't create if not found */

	call	get_namex;		/* Get the index of this name. */


/*	This index is used to reference the label table which then gives us the index
*	of the label constant that we want to  goto.
*/

	goto	print_label( print_label_table(namex) );






get:	entry  ( db_mc_ptr, name, value, print_mode );


	call	get_namex;


	value  =  "0"b;		/* Initially set the return value to zero.  */


	goto	get_label( get_ass_label_table(namex) );






assign:	entry  ( db_mc_ptr, name, value, print_mode );


	call	get_namex;


	print_word1  =  substr( value, 1,36);	/* Break up the input value into two words */
	print_word2  =  substr( value,37,36);	/* so it can be more easily printed
					*  via  ioa_.  */


	goto	assign_label( get_ass_label_table(namex) );





/*	We come here if  "namex"  =  -1  which implies that there was no room for another
*	user defined register.  We will simply return.
*/

print_label(0):
get_label(0):
assign_label(0):

	return;




/*	This label is called from  get_namex  when the pointer to the machine conditions is
*	null.  Since there is no register data to work with we will just return.
*/

no_mc_data:

	if	print_mode  =  0			/* BRIEF  or  LONG  */

		then	call    ioa_$ioa_stream (debug_output, "No  mc  data.");


		else  do;				/* LONG. */
		call    ioa_$ioa_stream (debug_output, "No fault frame found in stack trace.");
		end;


	return;
/**/
get_namex:	procedure;


/*	This procedure is called to set  "namex"  to the number which corresponds to the data
*	name passed to  db_regs  in  "name".   If it is a standard pre-defined debug data
*	name then  "namex"  will be simply the index of the   db_data$names array entry
*	which contains this name.  Otherwise it will be a user defined register name and "namex"
*	will be equal to a number one greater than the highest valid index to  db_data$names.
*	The index of the user register is set in  "userx".   If there is no room to allocate
*	a new user register then  "namex"  will be set to  -1.
*/



	mcp  =  db_mc_ptr;		/* Copy the parameter which points to the area where
				*  debug's  copy of the machine conditions are saved.  */


/*	See if this name is one of the standard debug data names.  If it is then  "namex"
*	is equal to the index of the db_data$names entry which contains this name.
*	If it is one of the standard register names then we will check the pointer to the
*	machine conditions that we were passed.  If it is  null  then we can't do anything
*	with this register since as far as we are conserned it doesn't exist.
*/

	do    namex  =  0  to  db_data$n_regs;

	if    name  =  db_data$names(namex)		/* Is it one of the standard machine
						*  condition type register names? */

		then    if    db_mc_ptr  =  null()	/* YES it is - do we have a pointer
						*  to it?  */

			then  goto  no_mc_data;	/* NO. */

			else  do;			/* YES, return with namex. */
			scup  =  addr( mcp -> mc.scu );
			return;
			end;

	end;


/*	This name is not one of the standard names.  It must be the name of a user defined
*	register.  "namex"  is set correctly.  It came out of the  do loop  one greater
*	than the number of standard names.  We will now see if this user name is allready
*	defined.  If it is we will just return with  "userx"  set correctly.
*/

	do    userx  =  1  to  num_user_regs;

	if    name   =  user_reg_names(userx)    then  return;

	end;


/*	This is a new user register name.  Do we have another slot in the user register
*	tables for it?  If not we will tell the user and  "namex"  will be set to -1.
*	The register will not be created for a print request.
*/


	if print_request then do;
	     call ioa_$ioa_stream (debug_output, "User register not defined.  ^a", name);
	     namex = -1;
	     return;
	end;
	if	userx  >  max_num_user_regs

		then  do;
		call  ioa_$ioa_stream (debug_output, "User register  ^a  not initialized - max number exceded",name);
		namex  =  -1;
		return;
		end;


/*	There is room for this new user register so lets initialize it.
*/

	num_user_regs  =  userx;		/* Reset the count of active user registers
					*  to reflect this new register.  */

	user_reg_names(userx)   =  name;	/* Remember its name. */

	user_reg_values(userx)  =  "0"b;	/* Initialize its value to zero. */

/*	If we are in LONG mode then we will tell the user that he has just created
*	a new user register.  */

	if	print_mode  ^=  0

		then    call    ioa_$ioa_stream (debug_output, "Creating new user register  ^a", name );


	end	get_namex;
/**/
/*	These are the routines called via the  print_label  array.   Each little piece
*	of code  PRINTS  some of the debug machine conditions data.
*/


/*	Print all of the machine conditions data.  Also print the user defined
*	registers.
*/

print_label(1):			/*	print_all 	*/

	if	print_mode  ^=  0
		then    call    ioa_$ioa_stream (debug_output, "All  ""machine conditions""  data.");

	call	print_prs;

	call	print_regs;

	call	print_scu;

	if	print_mode  ^=  0
		then    call  ioa_$ioa_stream (debug_output, "^/The  8  words after the  SCU  data");
	block_ptr  =  addr( mcp -> mc.mask );
	call	print_block;

	block_ptr  =  addr( mcp -> mc.eis_info );
	if block_ptr -> eight_words ^= "0"b then do;
		if	print_mode  ^=  0
		then    call  ioa_$ioa_stream (debug_output, "^/EIS  info");
		call	print_block;
	end;

	call	print_user_regs;

	return;





/* 	Print  all  of the  pointer registers.  */

print_label(2):

	call	print_prs;
	return;


print_prs:	procedure;

	call	ioa_$ioa_stream (debug_output, "^/Pointer Registers");

	do    i  =  0  to  7;
	call	ioa_$ioa_stream (debug_output, "^a^-^p",db_data$names(i), mcp->mc.prs(i));
	end;

	end	print_prs;





/*	Print all of the registers: index registers, A,Q,Exp,Timer Register and
*	Ring Alarm Register.
*/

print_label(3):

	call	print_regs;
	return;


print_regs:	procedure;

	if	print_mode  ^=  0

		then  do;

		call  ioa_$ioa_stream (debug_output, "^/Index  and other  Registers");

		do    i  =  0  to  7;
		call	ioa_$ioa_stream (debug_output, "^a^-^.3b", db_data$names(i+8), mcp->mc.regs.x(i));
		end;
		end;


		else  do;			/* BRIEF  mode.  */

		call    ioa_$ioa_stream (debug_output, "^-^.3b  ^.3b  ^.3b  ^.3b",
			mc.regs.x(0), mc.regs.x(1), mc.regs.x(2), mc.regs.x(3));
		call    ioa_$ioa_stream (debug_output, "^-^.3b  ^.3b  ^.3b  ^.3b",
			mc.regs.x(4), mc.regs.x(5), mc.regs.x(6), mc.regs.x(7));

		end;
	call	ioa_$ioa_stream (debug_output, "a^-^w^/q^-^w", mcp->mc.regs.a, mcp->mc.regs.q);

	call	print_exp;
	call	print_tr;
	call	print_ralr;

	end	print_regs;





/*	Print the SCU data.  We will print out the  PPR, TPR and the EVEN and ODD
*	instructions.  Then we will print out the  SCU  data as a block.
*/

print_label(4):

	call	print_scu;
	return;


print_scu:	procedure;

	if	print_mode  ^=  0

		then  do;
		call	ioa_$ioa_stream (debug_output, "^/SCU  data");
		call	print_ppr;
		call	print_tpr;
		call	ioa_$ioa_stream (debug_output, "^/");
		call	print_even;
		call	print_odd;
		call	print_ind;
		call	ioa_$ioa_stream (debug_output, "The  SCU  data as a block");
		end;

	block_ptr  =  scup;
	call	print_block;

	end	print_scu;





/*	Print out all of the user defined registers.  */

print_label(5):

	call	print_user_regs;
	return;


print_user_regs:	procedure;

	if	num_user_regs  =  0

		then  do;
		if	print_mode  ^=  0
			then    call  ioa_$ioa_stream (debug_output, "^/No user defined registers");
		return;
		end;

	if	print_mode  ^=  0
		then    call  ioa_$ioa_stream (debug_output, "^/User defined registers");

	do    i  =  1  to  num_user_regs;
	call	ioa_$ioa_stream (debug_output, "^a^-^w", user_reg_names(i), user_reg_values(i));
	end;

	end	print_user_regs;





/*	Print out  one  pointer register.  */

print_label(6):			/*	print_pr  	*/

	call	ioa_$ioa_stream (debug_output, "^a^-^p",db_data$names(namex), mcp->mc.prs(namex));
	return;





/*	Print out  one  index register.  */

print_label(7):			/*	print_xreg  	*/

	call	ioa_$ioa_stream (debug_output, "^a^-^.3b", db_data$names(namex), mcp->mc.regs.x(namex-8) );
	return;





/*	Print out  one  user defined register.  */

print_label(8):			/*	print_user_reg	*/

	call	ioa_$ioa_stream (debug_output, "^a^-^w", user_reg_names(userx), user_reg_values(userx));
	return;





/*	Print the  AQ  as a combined register  or  print the  A  or  the  Q.  */

print_label(9):			/*	print_aq  	*/

	call	ioa_$ioa_stream (debug_output, "aq^-^w ^w", mcp -> mc.regs.a, mcp -> mc.regs.q);
	return;


print_label(10):			/*	print_a   	*/

	call	ioa_$ioa_stream (debug_output, "a^-^w", mcp->mc.regs.a);
	return;



print_label(11):			/*	print_q   	*/

	call	ioa_$ioa_stream (debug_output, "q^-^w", mcp->mc.regs.q);
	return;





/*	Print the  Exponent register.  */

print_label(12):

	call	print_exp;
	return;

print_exp:	procedure;

	call	ioa_$ioa_stream (debug_output, "exp^-^.3b", "0"b || mc.regs.e);

	end	print_exp;






/*	Print the  Timer Register.  */

print_label(13):

	call	print_tr;
	return;


print_tr:		procedure;

	call	ioa_$ioa_stream (debug_output, "tr^-^.3b", mcp->mc.regs.t);

	end	print_tr;





/*	Print the  Ring Alarm Register.  */

print_label(14):

	call	print_ralr;
	return;


print_ralr:	procedure;

	call	ioa_$ioa_stream (debug_output, "ralr^-^.3b", mc.regs.ralr);

	end	print_ralr;




/*	Print the  PPR.  */

print_label(15):

	call	print_ppr;
	return;


print_ppr:	procedure;

	if	print_mode  ^=  0
		then    call  ioa_$ioa_stream (debug_output, "^/ppr:^-prr  psr   p    ic");

	call	ioa_$ioa_stream (debug_output, "^- ^.3b  ^.3b  ^.1b  ^.3b", scu.ppr.prr,
		     scu.ppr.psr, scu.ppr.p, scu.ilc);

	end	print_ppr;





/*	Print  the  TPR.  */

print_label(16):

	call	print_tpr;
	return;


print_tpr:	procedure;

	if	print_mode  ^=  0
		then    call  ioa_$ioa_stream (debug_output, "^/tpr:^-trr  tsr   tbr   ca");

	call	ioa_$ioa_stream (debug_output, "^- ^.3b  ^.3b  ^.3b  ^.3b",  scu.tpr.trr,
		     scu.tpr.tsr, scu.tpr_tbr, scu.ca);

	end	print_tpr;





/*	Print out the  EVEN  or  the  ODD  instruction.  */

print_label(17):

	call	print_even;
	return;

print_even:	procedure;

	call	print_text_$format( addr( scup -> scu.even_inst), source_string);

	call	ioa_$ioa_stream (debug_output, "even^-^a", source_string );

	end	print_even;



print_label(18):

	call	print_odd;
	return;


print_odd:	procedure;

	call	print_text_$format( addr( scup -> scu.odd_inst), source_string);

	call	ioa_$ioa_stream (debug_output, "odd^-^a", source_string);

	end	print_odd;



print_label(19):

	call	print_ind;
	return;

/*	Print out eaq in exponential format */

print_label(20):

	float_overlay.exponent = mc.e;
	float_overlay.a_part = mc.a;
	float_overlay.q_part = mc.q;

	call ioa_$ioa_stream (debug_output, "eaq^-^e",float_val);
	return;


print_ind:	procedure;

	indp = addr(scup -> scu.ir);	/* point to indicator bits */

	delim = "";			/* initialize */
	source_string = "";

	if indp -> ind_bits = (14)"0"b
	then source_string = "none";		/* no point if they're all off */

	else
	do i = 1 to 14;
	     if substr (indp -> ind_bits, i, 1)
	     then do;

		call ioa_$rsnnl ("^a^a^a", source_string, len, source_string,
			delim, ind_names(i) );
		delim = ", ";		/* in case it was first one */
	     end;
	end;

	call ioa_$ioa_stream (debug_output, "indicators: ^a", source_string);

	end	print_ind;








/*	This procedure prints out a block of  8  octal words.  It must be passed
*	a pointer to the block of wors to be printed.
*/

print_block:	procedure;

	call	ioa_$ioa_stream (debug_output, "^/^-^w  ^w  ^w  ^w",
		block_ptr->block(0), block_ptr->block(1), block_ptr->block(2), block_ptr->block(3));

	call	ioa_$ioa_stream (debug_output, "^-^w  ^w  ^w  ^w",
		block_ptr->block(4), block_ptr->block(5), block_ptr->block(6), block_ptr->block(7));

	end	print_block;
/**/
/*	These are the routines called via the  get_label  array.  note, the value returned
*	will always be  RIGHT  justified with leading zeros.
*/




/*	The names used to print multiple data items cannot be used to retrieve data.
*	A zero will be returned.
*/

get_label(1):			/*	get_illegal	*/

	return;			/* value is allready zero.  */




get_label(2):			/*	get_pr    	*/

	value  =  addr( mcp -> mc.prs(namex)) -> ptr_bit_string;
	return;




get_label(3):			/*	get_xreg		*/

	substr( value, 55, 18 )  =  mcp -> mc.regs.x(namex-8);
	return;



get_label(4):			/*	get_user_reg	*/

	substr( value, 37, 36 )  =  user_reg_values(userx);
	return;




get_label(5):			/*	get_aq		*/

	substr( value, 1, 36 )   =  mcp -> mc.regs.a;
	substr( value, 37, 36 )  =  mcp -> mc.regs.q;
	return;




get_label(6):			/*	get_a		*/

	substr( value, 37, 36 )  =  mcp -> mc.regs.a;
	return;




get_label(7):			/*	get_q		*/

	substr( value, 37, 36 )  =  mcp -> regs.q;
	return;




get_label(8):			/*	get_exp		*/

	substr( value, 65, 8 )  =  mcp -> mc.regs.e;
	return;



get_label(9):			/*	get_tr		*/

	substr( value, 46, 27 )  =  mcp -> mc.regs.t;
	return;




get_label(10):			/*	get_ralr		*/

	substr( value, 70, 3 )  =  mcp -> mc.regs.ralr;
	return;




get_label(11):			/*	get_ppr		*/

	work_ptr  =  addr( value );
	work_ptr -> its.segno  =  scup -> scu.ppr.psr;
	work_ptr -> its.ringno =  scup -> scu.ppr.prr;
	substr( value, 3, 1 )  =  scup -> scu.ppr.p;	/* Normal its pointers have no p bit. */
	work_ptr -> its.offset =  scup -> scu.ilc;
	return;




get_label(12):			/*	get_tpr		*/

	work_ptr  =  addr( value );
	work_ptr -> its.segno  =  scup -> scu.tpr.tsr;
	work_ptr -> its.ringno =  scup -> scu.tpr.trr;
	work_ptr -> its.bit_offset  =  scup -> scu.tpr_tbr;
	work_ptr -> its.offset =  scup -> scu.ca;
	return;




get_label(13):			/*	get_even		*/

	substr( value, 37, 36 )  =  scup -> scu.even_inst;
	return;




get_label(14):			/*	get_odd		*/

	substr( value, 37, 36 )  =  scup -> scu.odd_inst;
	return;
/**/
/*	These routines are called via the assign_label array.  note, the value to be
*	assigned is always assumed to be a  RIGHT  justified  BIT  string.
*	Note, if the print mode is  LONG  we will print out the value of the data item
*	before it is changed and after the assignment.  If we are in  BRIEF  mode we will
*	just make the assignment without telling the user anything.
*/



/*	The name used to print multiple data items cannot be used to assign values.
*	Each assignment must be made to a specific register.
*/

assign_label(1):			/*	assign_illegal	*/

	call	ioa_$ioa_stream (debug_output, "The  debug  name  ^a  cannot be used in an assignment command.",
		      db_data$names(namex));
	return;

assign_label(2):			/*	assign_pr		*/

	if	print_mode  =  1

		then    	call	ioa_$ioa_stream (debug_output, "^a  changed from  ^p  to  ^p",
			          db_data$names(namex), mcp -> mc.prs(namex), addr(value) -> based_ptr);

	addr( mcp -> mc.prs(namex)) -> ptr_bit_string  =  value;

	return;

assign_label(3):			/*	assign_xreg	*/

	if	print_mode  =  1
		then  do;
		call	ioa_$ioa_stream (debug_output, "^a  changed from  ^.3b  to  ^.3b",
		          db_data$names(namex), mc.regs.x(namex-8), substr(print_word2, 19, 18));
		end;

	mcp -> mc.regs.x(namex-8)  =  substr( print_word2, 19, 18 );

	return;

assign_label(4):			/*	assign_user_reg	*/

	if	print_mode  =  1

		then	call	ioa_$ioa_stream (debug_output, "^a  changed from  ^w  to  ^w",
			          user_reg_names(userx), user_reg_values(userx), print_word2);

	user_reg_values(userx)  =  print_word2;

	return;

assign_label(5):			/*	assign_aq		*/

	if	print_mode  =  1

		then	call	ioa_$ioa_stream (debug_output, "aq    changed from  ^w^w  to  ^w^w",
		   	          mcp -> mc.regs.a, mcp -> mc.regs.q, print_word1, print_word2);

	mcp -> mc.regs.a  =  print_word1;
	mcp -> mc.regs.q  =  print_word2;

	return;

assign_label(6):			/*	assign_a		*/

	if	print_mode  =  1

		then	call	ioa_$ioa_stream (debug_output, "a     changed from  ^w  to  ^w",
				mcp -> mc.regs.a, print_word2);

	mcp -> mc.regs.a  =  print_word2;

	return;

assign_label(7):			/*	assign_q		*/

	if print_mode = 1 then
	call	ioa_$ioa_stream (debug_output, "q     changed from  ^w  to  ^w",
			          mcp -> mc.regs.q, print_word2);

	mcp -> mc.regs.q  =  print_word2;

	return;

assign_label(8):			/*	assign_exp	*/

	if	print_mode  =  1
		then  do;
		call	ioa_$ioa_stream (debug_output, "exp   changed from  ^.3b  to  ^.3b",
			     "0"b || mc.regs.e, "0"b || substr(print_word2, 29, 8));
		end;

	mcp -> mc.regs.e  =  substr( print_word2, 29, 8 );

	return;

assign_label(9):			/*	assign_tr		*/

	if	print_mode  =  1
		then  do;
		call	ioa_$ioa_stream (debug_output, "tr    changed from  ^.3b  to  ^.3b",
			     mc.regs.t, substr(print_word2, 10, 27));
		end;

	mcp -> mc.regs.t  =  substr( print_word2, 10, 27 );

	return;

assign_label(10):			/*	assign_ralr	*/

	if	print_mode  =  1
		then  do;
		call	ioa_$ioa_stream (debug_output, "ralr  changed from  ^.3b  to  ^.3b",
			     mc.regs.ralr, substr(print_word2, 34, 3));
		end;

	mcp -> mc.regs.ralr  =  substr( print_word2, 34, 3 );

	return;

assign_label(11):			/*	assign_ppr	*/

	work_ptr  =  addr( value );

	if	print_mode  =  1

		then  do;
		call	ioa_$ioa_stream (debug_output, "Old  ppr");
		call	print_ppr;
		end;

	scup -> scu.ppr.psr  =  work_ptr -> its.segno;
	scup -> scu.ppr.prr  =  work_ptr -> its.ringno;
	scup -> scu.ppr.p  =  substr( value, 3,1 );
	scup -> scu.ilc  =  work_ptr -> its.offset;

	if	print_mode  =  1

		then  do;
		call	ioa_$ioa_stream (debug_output, "New  ppr");
		call	print_ppr;
		end;

	return;

assign_label(12):			/*	assign_tpr	*/

	work_ptr  =  addr( value );

	if	print_mode  =  1

		then  do;
		call	ioa_$ioa_stream (debug_output, "Old  tpr");
		call	print_tpr;
		end;

	scup -> scu.tpr.tsr  =  work_ptr -> its.segno;
	scup -> scu.tpr.trr  =  work_ptr -> its.ringno;
	scup -> scu.tpr_tbr  =  work_ptr -> its.bit_offset;
	scup -> scu.ca  =  work_ptr -> its.offset;

	if	print_mode  =  1

		then  do;
		call	ioa_$ioa_stream (debug_output, "New  tpr");
		call	print_tpr;
		end;

	return;

assign_label(13):			/*	assign_even	*/

	if	print_mode  =  1

		then  do;
		call	print_text_$format( addr( scup -> scu.even_inst), source_string);
		call	ioa_$ioa_stream (debug_output, "Old  even instruction:  ^a", source_string);
		end;

	scup -> scu.even_inst  =  print_word2;

	if	print_mode  =  1

		then  do;
		call	print_text_$format( addr( scup -> scu.even_inst), source_string);
		call	ioa_$ioa_stream (debug_output, "New  even instruction:  ^a", source_string);
		end;

	return;

assign_label(14):			/*	assign_odd	*/

	if	print_mode  =  1

		then  do;
		call	print_text_$format( addr( scup -> scu.odd_inst), source_string);
		call	ioa_$ioa_stream (debug_output, "Old  odd instruction:  ^a", source_string);
		end;

	scup -> scu.odd_inst  =  print_word2;

	if	print_mode  =  1

		then  do;
		call	print_text_$format( addr( scup -> scu.odd_inst), source_string);
		call	ioa_$ioa_stream (debug_output, "New  odd instruction:  ^a", source_string);
		end;

	return;

	end	db_regs;
