/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        *********************************************************** */

/**** format: ind3,ll80,initcol6,indattr,^inddcls,dclind4,idind16	       */
/**** format: struclvlind2,^ifthenstmt,^ifthendo,^ifthen,^indnoniterdo       */
/**** format: ^inditerdo,^indnoniterend,^indthenelse,case,^indproc,^indend   */
/**** format: ^delnl,^insnl,comcol41,^indcom,^indblkcom,linecom,^indcomtxt   */

std: set_time_default: set_time_defaults: proc;

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*							       */
/* Names: set_time_default, std                                              */
/*                                                                           */
/* SYNTAX AS A COMMAND:                                                      */
/*     std key value {-control_arg}				       */
/*                                                                           */
/* SYNTAX AS AN ACTIVE FUNCTION:                                             */
/*    [std key value {-control_arg}]                                         */
/*                                                                           */
/* FUNCTION:                                                                 */
/* This  command  sets a  default date/time  value for  the process.         */
/* When used as an active function,  it returns "true" if the key is         */
/* valid and the value is proper for the key.  Otherwise, it returns         */
/* "false".                                                                  */
/*                                                                           */
/* ARGUMENTS:                                                                */
/* key                                                                       */
/*    is a keyword representing the default to set.                          */
/* value                                                                     */
/*    is  a  value  to become  the  new  default.  If  the  value is         */
/*    "-system"  (or "-sys"),  the system  default is  used.  If the         */
/*    value is -pop, it uses a remembered value, saved by an earlier         */
/*    setting with the  -push option.  It is an  error if no earlier         */
/*    -push has been done.                                                   */
/*                                                                           */
/* CONTROL ARGUMENTS:                                                        */
/* -push                                                                     */
/*    saves the current  value of the default before  setting to the         */
/*    new value.                                                             */
/*                                                                           */

/* LIST OF keys:                                                             */
/* debug							       */
/*    Set the date/time software debugging switch.  The value must be "off"  */
/*    or "false", or "on" or "true".  The initial default is "off".	       */
/* date                                                                      */
/*    Set the process default date.  The value must be acceptable to         */
/*    date_time_$format (see note).				       */
/* date_time                                                                 */
/*    Set the process default date_time.   The value must be accept-         */
/*    able to date_time_$format (see note).			       */
/* language, lang                                                            */
/*    Set the process default language.  The language name may be in         */
/*    any of the languages known to the date/time system.                    */
/* time                                                                      */
/*    Set the process default date.  The value must be acceptable to         */
/*    date_time_$format (see note).				       */
/* zone                                                                      */
/*    Set the process default zone.  The zone abbreviation may be in         */
/*    any of the languages known to the date/time system.                    */
/*							       */
/* Notes							       */
/* The named format strings acceptable to date_time_$format may be seen      */
/* by typing "display_time_info -format".  The names "date", "time", and     */
/* "date_time" are not allowed in this context.			       */
/*							       */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* Status:						       */
/*   1) 03/30/83 - jaf	Created				       */
/*							       */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *-* */


/****^  HISTORY COMMENTS:
  1) change(1986-07-18,GDixon), approve(1986-07-25,MCR7495),
     audit(1986-07-25,Martinson), install(1986-08-19,MR12.0-1120):
     Add the debug keyword, with values of "off" or "on".
  2) change(2016-01-15,Swenson), approve(2016-01-15,MCR10003):
     Fix to support 4-character time zone abbreviations.
                                                   END HISTORY COMMENTS */


      if (time_defaults_$zone_delta = -1)
      then call date_time_$set_time_defaults;

      call arg_start_up;
      if err_sw then return;
      if ^command
      then do;
         ret = "true";		/* assume a correct AF call	       */
         err = return_false;		/* redirect the error output call    */
      end;
      sys_sw, pop_sw, push_sw = "0"b;
      keyname, value = "";

/* NOW process the arguments given.				       */

      do arg_no = 1 to arg_ct;
         call get_arg (arg_no, arg_p, arg_l, code);
         if (arg = "-push")
         then push_sw = "1"b;
         else if (keyname = "")
         then do;
	  do keyno = 1 to keyword_last;
	     if (keyword (keyno) = arg)
	     then goto got_key;
	  end;
	  call err (error_table_$bad_arg, me_s, "^a", arg);
	  return;
got_key:
	  keyname = arg;
         end;
         else if (value = "")
         then do;
	  if (arg = "-system") | (arg = "-sys")
	  then sys_sw = "1"b;
	  else if (arg = "-pop")
	  then pop_sw = "1"b;
	  value = arg;
         end;
         else do;
	  if (index (arg, "-") = 1)
	  then code = error_table_$badopt;
	  else code = error_table_$bad_arg;
	  goto usage_msg;
         end;
      end;
      if (value = "")
      then do;
         code = error_table_$wrong_no_of_args;
         arg_p = addr (arg_p);
         arg_l = 0;
usage_msg:
         call err (code, me_s, "^a
USAGE:^-std key value {-push}
value may be -pop or -sys", arg);
         return;
      end;

      if (keyno < 4) & ^pop_sw & ^sys_sw
      then do;			/* validate format string	       */
         if (length (value) > 64)
         then do;
	  call err (error_table_$bigarg, me_s, "^a ""^a""", keyname,
	     value);
	  return;
         end;
         if (value = "date") | (value = "time") | (value = "date_time")
         then do;
	  call err (0, me_s, "The keyword is not usable here. ^a",
	     value);
	  return;
         end;
         call date_time_$valid_format ((value), errloc, code);
         if (code ^= 0)
         then do;
	  call err (code, me_s, "^[
Format is: ""^va""
 error at: ^vx^^^]",
	  (errloc > 0), length (value), value, errloc);
	  return;
         end;
      end;
      if push_sw | pop_sw
      then if (p.heap = null())
      then p.heap = get_system_free_area_();

/* ------------------------------------------------------------------------- */
/*  Note that the setting, pushing, & popping does not effect lower rings.   */
/* ------------------------------------------------------------------------- */
      goto rtn (keyno);		/* format: tree		       */


rtn (1): /** date						       */
      if push_sw
      then call push (p.date, (time_defaults_$date));
      if pop_sw
      then time_defaults_$date = pop (p.date);
      else if sys_sw
         then time_defaults_$date = "system_date";
         else time_defaults_$date = value;
      return;

rtn (2): /** date_time					       */
      if push_sw
      then call push (p.date_time, (time_defaults_$date_time));
      if pop_sw
      then time_defaults_$date_time = pop (p.date_time);
      else if sys_sw
         then time_defaults_$date_time = "system_date_time";
         else time_defaults_$date_time = value;
      return;

rtn (4): /** language					       */
rtn (5): /** lang						       */
      if push_sw
      then call push (p.lang, time_defaults_$language);
      if pop_sw
      then value = pop (p.lang);
      else if sys_sw
         then value = "system_lang";
      call date_time_$set_lang ((value), code);
      if (code ^= 0)
      then do;
         call err (code, me_s, "Setting language ""^a"".", value);
         if push_sw
         then value = pop (p.lang);
      end;
      return;

rtn (3): /** time						       */
      if push_sw
      then call push (p.time, (time_defaults_$time));
      if pop_sw
      then time_defaults_$time = pop (p.time);
      else if sys_sw
         then time_defaults_$time = "system_time";
         else time_defaults_$time = value;
      return;

rtn (6): /** zone						       */
      if push_sw
      then call push (p.zone, (time_defaults_$zone_short));
      if pop_sw
      then value = pop (p.zone);
      else if sys_sw
         then value = "system_zone";
      call date_time_$set_zone ((value), code);
      if (code ^= 0)
      then do;
         call err (code, me_s, "Setting zone ""^a"".", value);
         if push_sw
         then value = pop (p.zone);
      end;
      return;

rtn (7): /** debug						       */
rtn (8): /** db						       */
      if push_sw
      then if time_defaults_$debug
	 then call push (p.debug, "on");
	 else call push (p.debug, "off");
      if pop_sw
      then value = pop (p.debug);
      else if sys_sw
         then value = "off";
      if value = "on" | value = "true" then
         on_sw = "1"b;
      else if value = "off" | value = "false" then
         on_sw = "0"b;
      else do;
         call err (error_table_$bad_arg, me_s, "Setting debug switch to ""^a"".", value);
         if push_sw
         then value = pop (p.debug);
      end;
      time_defaults_$debug = on_sw;
      return;

pop_err:
      call err (0, me_s, "No value available to pop. ^a", keyname);
      return;

return_false: proc;

      ret = "false";

   end return_false;
/* * * * * * * * * * * * *  END set_time_defaults  * * * * * * * * * * * * * */

ptd: print_time_default: print_time_defaults: entry;

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*							       */
/* Names: print_time_defaults, ptd                                           */
/*                                                                           */
/* SYNTAX AS A COMMAND:                                                      */
/*     ptd {keys} {-control_arg}				       */
/*                                                                           */
/* SYNTAX AS AN ACTIVE FUNCTION:                                             */
/*    [ptd key {-control_arg}]                                               */
/*                                                                           */
/* FUNCTION:                                                                 */
/* This  command displays  system or  process time-related defaults.         */
/* If set_time_default has pushed any  values, these are also shown.         */
/* The keys  specify which defaults  to print.  When  called with no         */
/* keys,  all  time-related defaults  are  shown.  When  used  as an         */
/* active  function,  it returns  the  current value  of one  of the         */
/* defaults.                                                                 */
/*                                                                           */
/* ARGUMENTS:                                                                */
/* key                                                                       */
/*    selects which default value is to be displayed.                        */
/*                                                                           */
/* CONTROL ARGUMENTS:                                                        */
/* -system, -sys                                                             */
/*    This requests that the system defaults be displayed instead of         */
/*    the process defaults.                                                  */
/*                                                                           */
/* LIST OF keys:                                                             */
/* date                                                                      */
/*    Display  the  default date  format.  A  date format  shows the         */
/*    year, month, and day in month.                                         */
/* date_time                                                                 */
/*    Display the default date/time format.  This combines both date         */
/*    and time.                                                              */
/* debug							       */
/*    Display the date/time debugging switch.			       */
/* language, lang                                                            */
/*    Display  the  default  language.   Any  time  words  in output         */
/*    date/time strings will be in this language.                            */
/* time                                                                      */
/*    Display  the  default time  format.  A  time format  shows the         */
/*    hour, minutes, and perhaps seconds.                                    */
/* zone                                                                      */
/*    Display the default time  zone name.  Unless explicitly speci-         */
/*    fied, all  input time strings will  be interpreted relative to         */
/*    this  zone, and  all output time  values will  be expressed in         */
/*    this zone.                                                             */
/*                                                                           */
/* NOTES:                                                                    */
/* The values displayed are in this order:                                   */
/*    date, date_time, time, language, zone, debug (if on).                  */
/*                                                                           */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* Status:						       */
/*   1) 03/30/83 - jaf	Created				       */
/*							       */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *-* */

      if (time_defaults_$zone_delta = -1)
      then call date_time_$set_time_defaults;

/**** Assume we were called as an active function.  Get ptr to/length of our */
/****  return argument, and count of our input arguments.		       */
      err_sw = ""b;
      string (k) = ""b;
      call arg_start_up;
      if err_sw then return;

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* NOW process all the arguments given.				       */
      do arg_no = 1 to arg_ct;
         call get_arg (arg_no, arg_p, arg_l, code);
         done = ""b;
         do i = 1 to dimension (keyword, 1) while (^done);
	  if (keyword (i) = arg)
	  then do;
	     done = "1"b;
	     if ^command & (string (k.w) ^= ""b) & (i <= keyword_last)
	     then do;
	        call err (0, me_p,
		 "Active function only accepts one keyword. ^a", arg);
	        return;
	     end;
	     key_sw (i) = "1"b;
	  end;
         end;
         if ^done
         then do;
	  call err (error_table_$badopt, me_p, "^a", arg);
	  err_sw = "1"b;
         end;
      end;
      if ^command & (string (k.w) = ""b)
      then do;
         call err (0, me_p, "Active function must have a keyword.");
         return;
      end;

      if err_sw
      then return;

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/* There are no errors. Do what is required for each option.	       */

      if (string (k.w) = ""b)
      then do;
         string (k.w) = "11110100"b;
         if time_defaults_$debug
         then k.debug_sw = "1"b;
      end;
      sys_sw = (k.system_sw ^= "00"b);

      if k.date_sw
      then do;
         if sys_sw
         then ret = ti_keyword.str (site_date);
         else ret = time_defaults_$date;
         if command
         then if sys_sw
         then call ioa_ ("System default date format: ""^a""", ret);
         else call list$format (p.date, "date format:", ret);
      end;

      if k.date_time_sw
      then do;
         if sys_sw
         then ret = ti_keyword.str (site_date_time);
         else ret = time_defaults_$date_time;
         if command
         then if sys_sw
         then call ioa_ ("System default date/time format: ""^a""", ret);
         else call list$format (p.date_time, "date/time format:", ret);
      end;

      if k.time_sw
      then do;
         if sys_sw
         then ret = ti_keyword.str (site_time);
         else ret = time_defaults_$time;
         if command
         then if sys_sw
         then call ioa_ ("System default time format: ""^a""", ret);
         else call list$format (p.time, "time format:", ret);
      end;

      if k.lang_sw
      then do;
         if sys_sw
         then ret = ti_language.name (time_info_$default_language_index, time_info_$default_language_index);
         else ret = rtrim (time_defaults_$language);
         if command
         then if sys_sw
	  then call ioa_ ("System default language: ^a", ret);
	  else do;
	     if (time_info_$default_language_index = time_defaults_$language_index)
	     then ret = ret || " (system_lang)";
	     call list (p.lang, "language:", ret);
	  end;
      end;

      if k.zone_sw
      then do;
         if sys_sw
         then do;
	  ret = sys_info$time_zone;
	  if command
	  then do;
	     lang_index = time_info_$default_language_index;
	     zone_index = date_time_$get_time_info_index ((ret), Zone_table);
	     call ioa_ ("System default zone: ^a  ^a (^a)",
	        zone_dif (ti_zone.delta (lang_index, zone_index)),
	        ret, ti_zone.long (lang_index, zone_index));
	  end;
         end;
         else do;
	  ret = time_defaults_$zone_short;
	  if command
	  then do;
	     if (translate (ret, AZ, az) = translate (sys_info$time_zone, AZ, az))
	     then ret = ret || " (system_zone, ";
	     else ret = ret || " (";
	     ret = ret || time_defaults_$zone_long;
	     ret = ret || ")";
	     call list (p.zone, "zone: "|| zone_dif (time_defaults_$zone_delta),
	        ret);
	  end;
         end;
      end;

      if k.debug_sw
      then do;
         if sys_sw
         then ret = "off";
         else if time_defaults_$debug
	    then ret = "on";
	    else ret = "off";
         if command
         then if sys_sw
	    then call ioa_ ("System default date/time debugging: ""^a""", ret);
	    else call list (p.debug, "date/time debugging:", ret);
         else if ret = "on"
	    then ret = "true";
	    else ret = "false";
      end;

      return;

/* * * * * * * * * * * * * END print_time_defaults * * * * * * * * * * * * * */

zone_dif: proc (td) returns (char (5));
dcl td		fixed bin (71);

dcl time		fixed bin (71);
dcl 1 result,
      2 s		char (1),
      2 (HH,MM)	pic "99";

	time = td;
	s = "-";			/* values stored in table have       */
	if (time < 0)		/* ..opposite sign from the way it   */
	then do;			/* ..is displayed.		       */
	   s = "+";
	   time = -time;
	end;
	HH, i = divide (time, 3600000000, 17, 0);
	time = time - i*3600000000;
	MM = divide (time, 60000000, 17, 0);
	return (string (result));
       end zone_dif;

arg_start_up: proc;

       err_sw = ""b;
       call cu_$af_return_arg (arg_ct, ret_p, ret_l, code);
       if code = 0			/* if called as an active function,  */
       then do;
	command = "0"b;
	err = active_fnc_err_;
	get_arg = cu_$af_arg_ptr;
       end;
       else if code = error_table_$not_act_fnc /* if called as a command,    */
       then do;
	command = "1"b;		/* indicate so		       */
	get_arg = cu_$arg_ptr;
	err = com_err_;
	ret_p = addr (ret_temp);
	ret_l = maxlength (ret_temp);
       end;
       else do;			/* if some unknown error occurs,     */
	command = "0"b;		/* ..report it to user as if we were */
	call active_fnc_err_ (code, me_p); /* ..called as an active fnc    */
	err_sw = "1"b;
       end;
    end arg_start_up;

push: proc (list_p, item);

dcl list_p	ptr,
    item		char (*);

dcl e_p		ptr;
dcl temp		char (64)var;
dcl 1 e		based (e_p),
      2 version	char (8),		/* identification for dump tracing   */
      2 next	ptr,
      2 data	char (64)var;


         allocate e in (heap);
         e.version = "std_stk";
         e.next = list_p;
         e.data = item;
         list_p = e_p;
         return;

pop: entry (list_p) returns (char (64)var);

         if (list_p = null())
         then goto pop_err;
         e_p = list_p;
         temp = e.data;
         list_p = e.next;
         free e in (heap);
         return (temp);

list: entry (list_p, item, current);
dcl current	char (*)var;
dcl fmt_sw	bit (1);

         fmt_sw = ""b;
         goto start;

list$format: entry (list_p, item, current);

         fmt_sw = "1"b;
start:
         call ioa_ (   "Default ^a ^a", item, form (current));
         do e_p = list_p repeat (e.next) while (e_p ^= null());
	  call ioa_ ("        ^vx ^a", length (item), form ((e.data)));
         end;
         return;

form: proc (format) returns (char (100)var);
dcl format	char (*)var;
dcl result	char (100)var;
dcl i		fixed bin;

         result = format;
         if fmt_sw
         then do;
	  if (index (format, "^") = 0)
	  then do;
	     done = ""b;
	     do i = 1 to ti_keyword.number_kwd while (^done);
	        if (ti_keyword.e.name (i) = format)
	        then do;
		 result = result || " (";
		 result = result || ti_keyword.e.str (i);
		 result = result || ")";
		 done = "1"b;
	        end;
	     end;
	     if ^done
	     then result = result || " (** UNKNOWN KEYWORD **)";
	  end;
	  else do;
	     done = ""b;
	     do i = 1 to ti_keyword.number_kwd while (^done);
	        if (ti_keyword.e.str (i) = format)
	        then do;
		 result = result || " (";
		 result = result || rtrim (ti_keyword.e.name (i));
		 result = result || ")";
		 done = "1"b;
	        end;
	     end;
	  end;
         end;
         return (result);

      end form;

end push;

dcl AZ		char (26) int static options (constant) init (
		"ABCDEFGHIJKLMNOPQRSTUVWXYZ");
dcl az		char (26) int static options (constant) init (
		"abcdefghijklmnopqrstuvwxyz");
dcl active_fnc_err_ entry options (variable);
dcl arg		char (arg_l) based (arg_p);
dcl arg_ct	fixed bin;
dcl arg_l		fixed bin (21);
dcl arg_no	fixed bin;
dcl arg_p		ptr;
dcl code		fixed bin (35);
dcl com_err_	entry () options (variable);
dcl command	bit (1);
dcl cu_$af_arg_ptr	entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl cu_$af_return_arg entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl cu_$arg_ptr	entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl date_time_$valid_format
		entry (char(*), fixed bin, fixed bin(35));
dcl date_time_$get_time_info_index
		entry (char(*), fixed bin) returns(fixed bin);
dcl date_time_$set_time_defaults entry;
dcl date_time_$set_lang
		entry (char (*), fixed bin (35));
dcl date_time_$set_zone
		entry (char (*), fixed bin (35));
dcl done		bit (1);
dcl err		entry options (variable) automatic;
dcl err_sw	bit (1);
dcl errloc	fixed bin;
dcl error_table_$bad_arg fixed bin (35) ext static;
dcl error_table_$badopt fixed bin (35) ext static;
dcl error_table_$bigarg fixed bin (35) ext static;
dcl error_table_$not_act_fnc fixed bin (35) ext static;
dcl error_table_$wrong_no_of_args fixed bin(35) ext static;
dcl get_arg	entry (fixed bin, ptr, fixed bin (21), fixed bin (35))
		automatic;
dcl get_system_free_area_ entry() returns(ptr);
dcl heap		area based (p.heap);
dcl i		fixed bin;
dcl ioa_		entry () options (variable);
dcl keyname	char (32)var;
dcl keyno		fixed bin;
dcl lang_index	fixed bin;
dcl me_s		char (16) int static options (constant)
		init ("set_time_default");
dcl me_p		char (20) int static options (constant)
		init ("print_time_defaults");
/* dcl microseconds_per_hour float dec (20) int static options (constant)
		init (36e8);				       */
dcl on_sw		bit(1);
dcl pop_sw	bit (1);
dcl push_sw	bit (1);
dcl ret		char (ret_l) var based (ret_p);
dcl ret_l		fixed bin (21);
dcl ret_p		ptr;
dcl ret_temp	char (128)var;
dcl sys_info$time_zone  char (4) aligned ext static;
dcl sys_sw	bit (1);
dcl value		char (64)var;
dcl zone_index	fixed bin;
dcl 1 p		int static,	/* put together to ease probing      */
      2 date	ptr init (null ()),
      2 date_time	ptr init (null ()),
      2 debug	ptr init (null ()),
      2 heap	ptr init (null ()),
      2 lang	ptr init (null ()),
      2 time	ptr init (null ()),
      2 zone	ptr init (null ());

dcl (addr, dimension, divide, index, length, maxlength, null, rtrim,
     string, translate
    )		builtin;


dcl key_sw	(10) bit (1)unal defined k;
dcl 1 k,
     2 w,
       3 date_sw	bit (1),
       3 date_time_sw bit (1),
       3 time_sw	bit (1),
       3 lang_sw	bit (2),		/* 4 language, 5 lang	       */
       3 zone_sw	bit (1),
       3 debug_sw   bit (2),		/* 7 debug,    8 db		       */
     2 system_sw	bit (2);		/* 9 -sys,    10 -system	       */

dcl keyword_last	fixed bin int static options (constant) init (8);
dcl keyword	(10) char (10) int static options (constant) init (
		"date",		/* 1 */
		"date_time",	/* 2 */
		"time",		/* 3 */
		"language",	/* 4 */
		"lang",		/* 5 */
		"zone",		/* 6 */
		"debug",		/* 7 */
		"db",		/* 8 */
		"-sys",		/* 9 */
		"-system");        /* 10 */

%include time_names;
%include time_info_search;
%include time_defaults_;

   end set_time_default;
