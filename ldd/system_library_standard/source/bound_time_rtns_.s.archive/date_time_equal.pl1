/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */

/**** format: ind3,ll80,initcol6,indattr,^inddcls,dclind4,idind16	       */
/**** format: struclvlind2,^ifthenstmt,^ifthendo,^ifthen,^indnoniterdo       */
/**** format: ^inditerdo,^indnoniterend,^indthenelse,case,^indproc,^indend   */
/**** format: ^delnl,^insnl,comcol41,^indcom,^indblkcom,linecom,^indcomtxt   */

date_time_equal: dteq: time_equal: teq: proc;

/* These active functions compare date-time values; an error is reported if
   either argument is unacceptable to convert_date_to_binary_$relative.

	date_time_equal A B		"true" if A = B, "false" otherwise.
	date_time_before A B	"true" if A < B, "false" otherwise.
	date_time_after A B		"true" if A > B, "false" otherwise.
	date_time_valid A		"true" if A = time value acceptable
				to the convert_date_to_binary_
				subroutine, "false" otherwise

   All of these active functions print their result when called as commands.

 Initial version 3/4/74 by Barry L. Wolman */
/* Time comparison functions added 11/28/78 by Jim Homan */
/* Rewritten 01/18/80 by S. Herbst */
/* Bug fixed in time comparisons 04/14/80 S. Herbst */
/* Changed and, or to accept 0 args or 1 arg 09/16/82 S. Herbst */
/* Added -date to date_time comparison commands 10/26/82 S. Herbst */
/* Fixed dteq and friends to not reject negative times 11/23/82 S. Herbst */
/* Added the date_time_valid function 11/23/82 J. A. Bush */
/* removed a portion, creating date_time_equal.pl1 02/07/84 J A Falksen */
/* Fixed a long-standing bug in dtv relating to multiple args. 84-11-13 jaf */

dcl arg		char (alen) based (aptr);
dcl arg1		char (arg_len (1)) based (arg_ptr (1));
dcl arg2		char (arg_len (2)) based (arg_ptr (2));

dcl return_arg	char (return_len) varying based (return_ptr);

dcl (bad_arg, usage) char (168);
dcl myname	char (32);
dcl date_time_string char (128)var;

dcl arg_ptr	(2) ptr;
dcl (aptr, return_ptr) ptr;

dcl (af_sw, date_sw) bit (1);

dcl (arg_len	(2)) fixed bin;
dcl (alen, arg_count, i, return_len) fixed bin;
dcl code		fixed bin (35);
dcl (now, time1, time2) fixed bin (71);

dcl error_table_$not_act_fnc fixed bin (35) ext;

dcl get_arg	entry (fixed bin, ptr, fixed bin, fixed bin (35)) automatic;
dcl complain	entry variable options (variable);

dcl (active_fnc_err_, active_fnc_err_$suppress_name) entry options (variable);
dcl (com_err_, com_err_$suppress_name) entry options (variable);
dcl convert_date_to_binary_ entry (char (*), fixed bin (71), fixed bin (35));
dcl convert_date_to_binary_$relative
		entry (char (*), fixed bin (71), fixed bin (71), fixed bin (35));
dcl cu_$af_return_arg entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl cu_$af_arg_ptr	entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl cu_$arg_ptr	entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl ioa_		entry options (variable);

dcl (addr, clock) builtin;


      myname = "date_time_equal";
      usage = "date_time1 date_time2 {-control_arg}";

      call get_args;
      call convert_times;

      if time1 = time2
      then go to TRUE;
      else go to FALSE;


date_time_before: dtbe: time_before: tbe: entry;

      myname = "date_time_before";
      usage = "date_time1 date_time2 {-control_arg}";

      call get_args;
      call convert_times;

      if time1 < time2
      then go to TRUE;
      else go to FALSE;


date_time_after: dtaf: time_after: taf: entry;

      myname = "date_time_after";
      usage = "date_time1 date_time2 {-control_arg}";

      call get_args;
      call convert_times;

      if time1 > time2
      then go to TRUE;
      else go to FALSE;

date_time_valid: dtv: entry;

      myname = "date_time_valid";
      usage = "date_time string";

      call get_count;
      if arg_count = 0
      then go to USAGE;
      call get_arg (1, aptr, alen, code); /* get the first arg */
      date_time_string = arg;
      if arg_count > 1 		/* if more than 1 arg */
      then do i = 2 to arg_count;	/* get the rest and || together */
         call get_arg (i, aptr, alen, code);
         date_time_string = date_time_string || " " || arg;
      end;
      call convert_date_to_binary_ ((date_time_string), time1, code);
      if code = 0
      then go to TRUE;
      else go to FALSE;
				/**/
TRUE: if af_sw
      then return_arg = "true";
      else call ioa_ ("true");
      return;

FALSE:
      if af_sw   
      then return_arg = "false";
      else call ioa_ ("false");
      return;

USAGE:
      if af_sw
      then call active_fnc_err_$suppress_name (0, myname, "Usage:  ^a ^a", myname, usage);
      else call com_err_$suppress_name (0, myname, "Usage:  ^a ^a", myname, usage);

RETURN:
      return;


get_count: proc;

/* This internal procedure tests for af invocation and gets argument count. */

      call cu_$af_return_arg (arg_count, return_ptr, return_len, code);

      if code = error_table_$not_act_fnc
      then do;
         af_sw = "0"b;
         complain = com_err_;
         get_arg = cu_$arg_ptr;
      end;
      else do;
         af_sw = "1"b;
         complain = active_fnc_err_;
         get_arg = cu_$af_arg_ptr;
      end;

   end get_count;



get_args: proc;

/* This internal procedure gets two arguments. */

dcl (i, j)	fixed bin;

      call get_count;

      j = 0;
      date_sw = "0"b;

      do i = 1 to arg_count;

         call get_arg (i, aptr, alen, code);

         if (arg = "-date") | (arg = "-dt")
         then date_sw = "1"b;
         else do;			/* other arg */
	  j = j + 1;
	  if j > 2
	  then go to USAGE;
	  arg_ptr (j) = aptr;
	  arg_len (j) = alen;
         end;
      end;
      if j < 2
      then go to USAGE;

   end get_args;


convert_times: proc;

/* This internal procedure converts both arguments to clock values. */

      now = clock ();

      call convert_date_to_binary_$relative (arg1, time1, now, code);
      if code ^= 0
      then do;
         bad_arg = arg1;
         go to BAD_TIME;
      end;

      call convert_date_to_binary_$relative (arg2, time2, now, code);
      if code ^= 0
      then do;
         bad_arg = arg2;
         go to BAD_TIME;
      end;

      if date_sw
      then do;		/* compare date only */
         call make_date (time1);
         call make_date (time2);
      end;

      return;

BAD_TIME: call complain (code, myname, "^a", bad_arg);
      go to RETURN;

make_date: proc (A_time);

dcl A_time	fixed bin (71);

      tv.version = Vtime_value_3;
      call date_time_$from_clock (A_time, "", addr (tv), code);
      A_time = tv.dc;

dcl date_time_$from_clock entry (fixed bin (71), char (*), ptr, fixed bin (35));

dcl 1 tv		like time_value;
%include time_value;

   end make_date;

   end convert_times;

   end date_time_equal;
