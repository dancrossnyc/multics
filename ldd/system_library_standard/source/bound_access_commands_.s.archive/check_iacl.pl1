/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(88-10-11,TLNguyen), approve(88-10-11,MCR8013),
     audit(88-09-11,Barstad), install(89-01-17,MR12.3-1004):	
     Replace star convention with ACL matching convention for -exclude User_id.
                                                   END HISTORY COMMENTS */

check_iacl: proc;

/* CHECK_IACL - list any acls which do not correspond to the initial acl.
   THVV */
/* MCR 4266 Say "Directory empty" instead of error_table_$nomatch 01/07/80 S. Herbst */

dcl  DIRECTORY_TYPE fixed bin (2) static options (constant) init (2);
dcl  SEGMENT_TYPE fixed bin (2) static options (constant) init (1);
dcl  SEGMENT_TYPE_IN_BIT bit (2) static options (constant) init ("01"b);

dcl  MAX_ALLOWANCE_TO_EXCLUDE fixed bin static options (constant) init (10);

dcl  TRUE bit (1) int static options (constant) init ("1"b);
dcl  FALSE bit (1) int static options (constant) init ("0"b);

dcl  LITERAL_DOT char (1) internal static options (constant) init (".");
dcl  LITERAL_DOT_DOT char (2) internal static options (constant) init ("..");
dcl  LITERAL_DOT_DOT_STAR char (3) internal static options (constant) init ("..*");
dcl  LITERAL_STAR char (1) internal static options (constant) init ("*");

dcl  MY_NAME char (10) static options (constant) init ("check_iacl");

dcl (dn1, dn) char (168) aligned,
    (en1, en) char (32) aligned,
     ring fixed bin (3),
     allsw bit (1),
     got_path bit (1),
     headed bit (1),
     exclude_count fixed bin,                        /* count the number of -exclude control arguments */
    (nisacl, nidacl) fixed bin,
     eptr ptr,
     nptr ptr,
     ecount fixed bin,
    (isaclp, idaclp) ptr,
     nacl fixed bin,
     aclp ptr,
     areap ptr,
     (arg_index, entry_index) fixed bin,
    (arg_count, arg_len) fixed bin,
     arg_ptr ptr,
     arg char (arg_len) based (arg_ptr),
     code fixed bin (35);
                                        /* the following array of record    */
                                        /* is reserved for -exclude User_id */
                                        /* See documentation for details.   */
                                        /* It contains the name of User_id, */
                                        /* a flag which is set if User_id   */
                                        /* is a null string, the length of  */
                                        /* User_id, number of dot characters*/
                                        /* appeared in User_id, and dot     */
                                        /* character positions in User_id.  */
dcl  1 exclude (MAX_ALLOWANCE_TO_EXCLUDE),
       2 name char (32),
       2 null_string_flag bit (1),
       2 actual_length fixed bin,
       2 dot_count fixed bin,
       2 dot_location (2) fixed bin;

dcl  error_table_$entlong fixed bin (35) ext;
dcl  error_table_$badopt fixed bin (35) ext;
dcl  error_table_$bad_name fixed bin (35) ext;
dcl  error_table_$too_many_args fixed bin (35) ext;

dcl  get_system_free_area_ entry () returns (ptr),
     cu_$arg_count entry (fixed bin, fixed bin (35)),
     cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35)),
     get_ring_ entry () returns (fixed bin),
     get_wdir_ entry () returns (char (168)),
     absolute_pathname_ entry (char (*), char (*) aligned, fixed bin (35)),
     expand_pathname_ entry (char (*) aligned, char (*) aligned, char (*) aligned, fixed bin (35)),
     ioa_ entry options (variable),
     (com_err_, com_err_$suppress_name) entry options (variable);
dcl  hcs_$star_ entry (char (*) aligned, char (*) aligned, fixed bin (2), ptr, fixed bin, ptr, ptr, fixed bin (35));
dcl  hcs_$list_dir_inacl entry (char (*) aligned, char (*) aligned, ptr, ptr, ptr, fixed bin, fixed bin (3),
     fixed bin (35));
dcl  hcs_$list_inacl entry (char (*) aligned, char (*) aligned, ptr, ptr, ptr, fixed bin, fixed bin (3),
     fixed bin (35));
dcl  hcs_$list_dir_acl entry (char (*) aligned, char (*) aligned, ptr, ptr, ptr, fixed bin, fixed bin (35));
dcl  hcs_$list_acl entry (char (*) aligned, char (*) aligned, ptr, ptr, ptr, fixed bin, fixed bin (35));

dcl (after, before, fixed, index, length, null, rtrim, substr, verify, reverse) builtin;
dcl  cleanup condition;

dcl 1 seg_acl (10) aligned,
    2 name char (32),
    2 mode bit (36),
    2 mbz bit (36),
    2 code fixed bin (35);

dcl 1 dir_acl (nacl) based (aclp) aligned,
    2 access_name char (32),
    2 modes bit (36),
    2 statuscode fixed bin (35);

dcl 1 segment_acl (nacl) based (aclp) aligned,
    2 access_name char (32),
    2 modes bit (36),
    2 mbz bit (36),
    2 statuscode fixed bin (35);

dcl 1 entries (ecount) aligned based (eptr),
    2 type bit (2) unal,
    2 nnames bit (16) unal,
    2 nindex bit (18) unal;

dcl  names (100) char (32) based (nptr) aligned;
%page;
/* begin check_iacl main program */

	call cu_$arg_count (arg_count, code);
          if code ^= 0 then do;
	     call com_err_ (code, MY_NAME);
	     return;
	end;
                                                            /* initialized */
          ecount = 0;
          eptr = null;
	nptr = null;
	isaclp = null;
	idaclp = null;

	seg_acl (*).mbz = (36) "0"b;

	allsw, got_path = FALSE;                          /* indicate that -all and path have not specified yet */
	exclude_count = 0;				/* indicate that -exclude control argument has not specified yet */

	do arg_index = 1 to arg_count;                    /* parsing input arguments specified on the command line */
                                                            /* get an input argument specified on the command line */
	     call cu_$arg_ptr (arg_index, arg_ptr, arg_len, code);
	     if code ^= 0 then do;
		call com_err_ (code, MY_NAME);
		return;
	     end;

	     if index (arg, "-") = 1 then do;             /* the first character of the input argument is a hyphen */
		if arg = "-all" | arg = "-a" then allsw = TRUE;

		else if arg = "-exclude" | arg = "-ex" then do;
		     arg_index = arg_index + 1;
		     if arg_index > arg_count then do;
			call com_err_ (0, MY_NAME, "Missing User_id for -exclude");
			return;
		     end;

		     call cu_$arg_ptr (arg_index, arg_ptr, arg_len, code);
		     if code ^= 0 then do;
			call com_err_ (code, MY_NAME, "Trying to get User_id for -exclude.");
			return;
		     end;

		     exclude_count = exclude_count + 1;    /* indicate that a -exclude User_id has been found */

		     if exclude_count > MAX_ALLOWANCE_TO_EXCLUDE then do;
			call com_err_ (error_table_$too_many_args, MY_NAME, "You can only supply up to 10 -exclude User_id.");
			return;
		     end;
                                                               /* initialize a specified array of record element */
		     exclude (exclude_count).name = "";
		     exclude (exclude_count).null_string_flag = FALSE;
		     exclude (exclude_count).actual_length = 0;
		     exclude (exclude_count).dot_count = 0;
		     exclude (exclude_count).dot_location (*) = 0;
                                                               /* is null string specified in place of User_id for -exclude? */
		     if arg = "" then exclude (exclude_count).null_string_flag = TRUE;
		     if (arg_len > 0) & (index (arg, " ") > 0) then exclude (exclude_count).null_string_flag = TRUE;
                                                              /* save specified User_id for -exclude control argument into the array */
		     exclude (exclude_count).name = arg;
                                                              /* scan specified User_id and update its components whenever appropriate */
		     call set_components;
		     if code ^= 0 then return;
		end;
		else do;
		     call com_err_ (error_table_$badopt, MY_NAME, "^a", arg);
		     return;
		end;
	     end;
	     else do;                                        /* assume that the input argument is the path */
		if got_path then do;                       /* checking for the case of more than one path is specified */
USAGE:
		     call com_err_$suppress_name (0, MY_NAME, "Usage:  check_iacl {path} {-control_args}");
		     return;
		end;

		got_path = TRUE;                           /* indicate that the directory path is specified */

		call absolute_pathname_ (arg, dn1, code);
		if code ^= 0 then do;
		     call com_err_ (code, MY_NAME, "^a", arg);
		     return;
		end;
	     end;
	end;                                                /* end of parsing input arguments specified on the command line */

	if ^got_path then dn1 = get_wdir_ ();               /* case the path is omitted then get the current working directory pathname */

	call expand_pathname_ (dn1, dn, en, code);

	areap = get_system_free_area_ ();
	ring = get_ring_ ();

	on condition (cleanup) begin;
	     if isaclp ^= null then free isaclp -> segment_acl;
	     if idaclp ^= null then free idaclp -> dir_acl;
	     if nptr ^= null then free nptr -> names;
	     if eptr ^= null then free eptr -> entries;
	end;

                                                             /* get information on all segment and directory entries in the directory path */
	call hcs_$star_ (dn1, "**", 10b, areap, ecount, eptr, nptr, code);
	if code ^= 0 then do;
	     call com_err_ (code, MY_NAME, "^a", dn1);
	     return;
	end;

                                                             /* get the entire IACL for segments in the directory path */
	call hcs_$list_inacl (dn, en, areap, isaclp, null, nisacl, ring, code);
	if code ^= 0 then do;
	     call com_err_ (code, MY_NAME);
	     return;
	end;

                                                             /* get the entire IACL for directories in the directory path */
	call hcs_$list_dir_inacl (dn, en, areap, idaclp, null, nidacl, ring, code);

	do entry_index = 1 to ecount;
	     headed = FALSE;
	     aclp = null;
	     en1 = names (fixed (entries (entry_index).nindex));

	     if entries (entry_index).type = SEGMENT_TYPE_IN_BIT then do;
                                                              /* list the entire ACL of a segment */
		call hcs_$list_acl (dn1, en1, areap, aclp, null, nacl, code);
		if code ^= 0 then call com_err_ (code, MY_NAME, "^a>^a", dn1, en1);

		call compare_seg_acl (isaclp, aclp, nisacl, nacl, (SEGMENT_TYPE));
	     end;
	     else do;
		call hcs_$list_dir_acl (dn1, en1, areap, aclp, null, nacl, code);
		if code ^= 0 then call com_err_ (code, MY_NAME, "^a>^a", dn1, en1);
	          call compare_dir_acl (idaclp, aclp, nidacl, nacl, (DIRECTORY_TYPE));
	     end;
	end;

	call ioa_ ("");

	return;

/*-----------------------------------------------------------------------*/
%page;
compare_seg_acl: proc (p1, p2, n1, n2, segment_type);

                                                   /* parameter */
dcl (p1, p2) ptr,
    (n1, n2) fixed bin,
     segment_type fixed bin;

                                                   /* local */
dcl (i, j) fixed bin,
     tcount fixed bin,
     aclbit bit (n2);

/* begin compare_seg_acl procedure */

   if p1 = null then return;
   if p2 = null then return;
                                                   /* initialized */
   aclbit = FALSE;
   tcount = n2;

   do i = 1 to n1;
      if inhibited (rtrim (p1 -> segment_acl.access_name (i))) then
         goto ACL_OK;

      do j = 1 to n2;
         if p1 -> segment_acl.access_name (i) = p2 -> segment_acl.access_name (j) then do;
            substr (aclbit, j, 1) = TRUE;
	  tcount = tcount - 1;

	  if p1 -> segment_acl.modes (i) = p2 -> segment_acl.modes (j) then
	     goto ACL_OK;

	  if allsw then do;
	     if ^headed then call head;

	     call ioa_ ("^-ACL for ^a changed from ^a  to  ^a", p2 -> segment_acl.access_name (j),
		    cmode (p1 -> segment_acl.modes (i), segment_type), cmode (p2 -> segment_acl.modes (j), segment_type));
	  end;

	  goto ACL_OK;
         end;
      end;                                      /* nested do loop */

      if allsw then do;
         if ^headed then call head;

         call ioa_ ("^-ACL deleted: ^a ^a", cmode (p1 -> segment_acl.modes (i), segment_type), p1 -> segment_acl.access_name (i));

      end;

ACL_OK:
   end;                                         /* outer do loop */

   do i = 1 to n2 while (tcount > 0);
      if ^substr (aclbit, i, 1) then do;
         tcount = tcount - 1;

         if ^inhibited (rtrim (p2 -> segment_acl.access_name (i))) then do;
	  
	  if ^headed then call head;

	  call ioa_ ("^-ACL added: ^a ^a", cmode (p2 -> segment_acl.modes (i), segment_type), p2 -> segment_acl.access_name (i));
         end;
      end;
   end;

   return;

   end compare_seg_acl;


/*-----------------------------------------------------------------------*/
%page;
compare_dir_acl: proc (p1, p2, n1, n2, directory_type);

                                                   /* parameter */
dcl (p1, p2) ptr,
    (n1, n2) fixed bin,
     directory_type fixed bin;

                                                   /* local */
dcl (i, j) fixed bin,
     tcount fixed bin,
     aclbit bit (n2);

/* begin compare_dir_acl procedure */

   if p1 = null then return;
   if p2 = null then return;
                                                   /* initialized */
   aclbit = FALSE;
   tcount = n2;

   do i = 1 to n1;
      if inhibited (rtrim (p1 -> dir_acl.access_name (i))) then
         goto ACL_OK;
 
      do j = 1 to n2;
         if p1 -> dir_acl.access_name (i) = p2 -> dir_acl.access_name (j) then do;
	  substr (aclbit, j, 1) = TRUE;
	  tcount = tcount - 1;

	  if p1 -> dir_acl.modes (i) = p2 -> dir_acl.modes (j) then
               goto ACL_OK;

	  if allsw then do;
	     if ^headed then call head;

               call ioa_ ("^-ACL for ^a changed from ^a  to  ^a", p2 -> dir_acl.access_name (j),
	          cmode (p1 -> dir_acl.modes (i), directory_type), cmode (p2 -> dir_acl.modes (j), directory_type));
	  end;

            goto ACL_OK;
         end;
      end;                                      /* nested do loop */

      if allsw then do;
         if ^headed then call head;

         call ioa_ ("^-ACL deleted: ^a ^a", cmode (p1 -> dir_acl.modes (i), directory_type), p1 -> dir_acl.access_name (i));
      end;

ACL_OK:
   end;                                         /* outer do loop */

   do i = 1 to n2 while (tcount > 0);
      if ^substr (aclbit, i, 1) then do;
         tcount = tcount - 1;

         if ^inhibited (rtrim (p2 -> dir_acl.access_name (i))) then do;
	  if ^headed then call head;

	  call ioa_ ("^-ACL added: ^a ^a", cmode (p2 -> dir_acl.modes (i), directory_type), p2 -> dir_acl.access_name (i));
         end;
      end;
   end;

   return;

   end compare_dir_acl;

/*------------------------------------------------------------------------*/
%page;
cmode:	proc (x, t) returns (char (5) aligned);

dcl  x bit (36) aligned;
dcl  t fixed bin;

dcl  ans char (5) aligned;

dcl (i, k) fixed bin;
dcl  XMODE (2, 5) char (1) int static options (constant) init ("r", "e", "w", "a", "", "s", "m", "a", "", "");

/* begin cmode internal procedure */

   k = 1;
   ans = "";

   do i = 1 to 5;
     if substr (x, i, 1) then do;
       substr (ans, k, 1) = XMODE (t, i);
       k = k + 1;
     end;
   end;

   if ans = "" then ans = "null";
   return (ans);

   end cmode;

/* ------------------------------------------------------------------------*/
%page;
inhibited: proc (p_access_identifier) returns (bit (1));

/* Since up to 10 -exclude control arguments are allowed, so inhibit will  */
/* loop until all specified User_id(s) are excluded.                       */
/* inhibit will return TRUE if the access identifier portion of ACL entry  */
/* matches the User_id for -exclude.  Otherwise, returns FALSE.            */

                                          /* input parameter */
dcl p_access_identifier char (*) aligned; /* access name portion of ACL entry */

dcl exclude_index fixed bin;              /* local */
                    
/* begin inhibit internal procedure */

   do exclude_index = 1 to exclude_count;
                                          /* User_id for -ex is a null string */
      if exclude (exclude_index).null_string_flag then do;
                                          /* for any ACL entry whose 2nd component value is literal "*" and
                                             whose 3rd component value is literal "*" then a match is found */
         if after (p_access_identifier, LITERAL_DOT) = "*.*" then
	  return (TRUE);               /* return to compare_acl internal procedure */
      end;
      else do;                           /* User_id for -ex is not a null string */
                                         /* the original User_id for -ex did not have a dot character */
         if exclude (exclude_index).dot_count = 0 then do;
                                         /* a match is found if each component value of ACL entry is the same with each
                                            component value of User_id for -ex, repectively. */
	  if p_access_identifier = exclude (exclude_index).name then
	     return (TRUE);            /* return to compare_acl internal procedure */
         end;
                                         /* the original User_id for -ex had only one dot character */	     
         else if exclude (exclude_index).dot_count = 1 then do;
                                         /* case original User_id value for -ex is a dot character */
	  if exclude (exclude_index).name = LITERAL_DOT_DOT_STAR then do;
                                         /* if the 3rd component value of ACL entry is a literal "*", a match is found */
	     if before (reverse (p_access_identifier), LITERAL_DOT) = LITERAL_STAR then
	        return (TRUE);         /* return to compare_acl internal procedure */
	  end;
                                         /* case the original User_id has a dot character in the first letter */
	  else if exclude (exclude_index).dot_location (1) = 1 then do;
                                         /* if the last two component values of ACL entry is the same as those of User_id */
                                         /* then a match is found */
	     if after (p_access_identifier, LITERAL_DOT) = after (exclude (exclude_index).name, LITERAL_DOT) then
	        return (TRUE);         /* return to compare_acl internal procedure */
	  end;
                                         /* case the original User_id has a dot character in the last letter */
	  else if exclude (exclude_index).dot_location (1) = exclude (exclude_index).actual_length then do;
                                         /* if the 1st component value and the 3rd component value of ACL entry is the same */
                                         /* as those of User_id then a match is found */
	     if (before (p_access_identifier, LITERAL_DOT) = before (exclude (exclude_index).name, LITERAL_DOT)) &
	        (before (reverse (p_access_identifier), LITERAL_DOT) = LITERAL_STAR) then
	        return (TRUE);         /* return to compare_acl internal procecudre */
	  end;

	  else do;                     /* case the original User_id has a dot character between  */
                                         /* if the entire component value of ACL entry is the same as those of User_id
                                            then a match is found */
	     if p_access_identifier = exclude (exclude_index).name then
	        return (TRUE);         /* return to compare_acl internal procedure */
	  end;
         end;                            /* The specified User_id has one dot character */
         else do;                        /* two dots are found in the specified User_id */
                                         /* if User_id value is ".." then a match is found */
	  if exclude (exclude_index).name = LITERAL_DOT_DOT then
	     return (TRUE);            /* return to compare_acl internal procedure */
                                         /* the original User_id has ".." in the first two letters */
	  else if (exclude (exclude_index).dot_location (1) = 1) & (exclude (exclude_index).dot_location (2) = 2) then do;
                                         /* if the 3rd component value of ACL entry is the same as those of User_id
                                            then a match is found */
	     if before (reverse (p_access_identifier), LITERAL_DOT) =
	        before (reverse (rtrim (exclude (exclude_index).name)), LITERAL_DOT) then
	        return (TRUE);        /* return to compare_acl internal procedure */
	  end;
                                        /* the original User_id has ".." in the last two letter */
	  else if (exclude (exclude_index).dot_location (1) = exclude (exclude_index).actual_length - 1) &
		(exclude (exclude_index).dot_location (2) = exclude (exclude_index).actual_length) then do;
                                        /* if the 1st component value and the 3rd component value of ACL entry are
                                           the same as those of User_id then a match is found */
	     if (before (p_access_identifier, LITERAL_DOT) = before (exclude (exclude_index).name, LITERAL_DOT)) &
	        (before (reverse (p_access_identifier), LITERAL_DOT) = LITERAL_STAR) then
	        return (TRUE);        /* return to compare_acl internal procedure */
	  end;
                                        /* the original User_id has dots in the first letter and the last letter */
	  else if (exclude (exclude_index).dot_location (1) = 1) &
		(exclude (exclude_index).dot_location (2) <= exclude (exclude_index).actual_length) then do;
                                        /* if the last two component values of ACL entry is the same as those of
                                           User_id then a match is found */
	     if after (p_access_identifier, LITERAL_DOT) = after (exclude (exclude_index).name, LITERAL_DOT) then
	        return (TRUE);        /* return to compare_acl internal procedure */
	  end;

            else do;
                                        /* otherwise, an exact match to each component value is required in order to return TRUE */
	     if p_access_identifier = exclude (exclude_index).name then
	        return (TRUE);        /* return to compare_acl internal procedure */
	  end;
         end;                           /* two dots are found in the specified User_id */		
      end;                              /* User_id for -ex is not a null string */
   end;                                 /* looping until all specified User_id for -ex are processed */

   return (FALSE);                      /* return to compare_acl internal procedure */

   end inhibited;                       /* end of inhibited internal procedure */

/*------------------------------------------------------------------------*/
%page;
head:	proc;

	call ioa_ ("^/^a", en1);

	headed = TRUE;
	return;
	     
	end head;

/*-----------------------------------------------------------------------*/
%page;
set_components: proc;

/* validate specified User_id for -exclude.  For cases such as its length */
/* longer than 32 characters long, then report as error.  Also, do not    */
/* allow mixing of white space characters and other characters in         */
/* specified User_id.                                                     */
/* For valid specified User_id, locate dot characters in specified        */
/* User_id.  Maximum number of dots allowed is two.  Since ACL matching   */
/* is allowed for User_id, several checks have been made to update        */
/* specified User_id value.                                               */
                                         /* local */
dcl character_index fixed bin;           /* scan User_id to locate dot character positions */
dcl user_id_name_length fixed bin;       /* length of specified User_id name */

dcl MAX_DOT fixed bin internal static options (constant) init (2);
dcl USER_ID_MAX_LENGTH fixed bin internal static options (constant) init (32);

/* begin set_component internal procedure */

   code = 0;

   if length (exclude (exclude_count).name) > USER_ID_MAX_LENGTH then do;
      code = error_table_$entlong;
      goto set_components_ERROR_RETURN;
   end;
                                        /* are there white spaces in User_id? */
   user_id_name_length = index (exclude (exclude_count).name, " ") - 1;
                                        /* no white spaces in User_id */
   if (user_id_name_length = - 1) then
      exclude (exclude_count).actual_length = length (exclude (exclude_count).name);
   else do;                             /* white space(s) are in User_id */
      exclude (exclude_count).actual_length = user_id_name_length;
                                        /* if white spaces and other non white space characters are in User_id then treats as error.
                                           Otherwise, it is ok for User_id containing only white space(s). */
      if verify (substr (exclude (exclude_count).name, exclude (exclude_count).actual_length + 1), " ") ^= 0 then do;
         code = error_table_$bad_name;
         goto set_components_ERROR_RETURN;
      end;
   end;
                                       /* locate dot characters in the specified User_id */
   do character_index = 1 to exclude (exclude_count).actual_length;
      if substr (exclude (exclude_count).name, character_index, 1) = LITERAL_DOT then do;
         exclude (exclude_count).dot_count = exclude (exclude_count).dot_count + 1;

         if exclude (exclude_count).dot_count > MAX_DOT then do;
	  code = error_table_$bad_name;
            goto set_components_ERROR_RETURN;
         end;
                                       /* save the dot position in an array of dot locations */
         exclude (exclude_count).dot_location (exclude (exclude_count).dot_count) = character_index;
      end;
   end;
                                       /* do not set component if all three components of User_id are specified.
                                          For example: check_iacl -ex Foo.Multics.a */
   if (exclude (exclude_count).dot_count = MAX_DOT) &
      (exclude (exclude_count).dot_location (1) > 1) &
      (exclude (exclude_count).dot_location (2) < exclude (exclude_count).actual_length) then
      goto set_components_NORMAL_RETURN;
                                       /* specified User_id is not a null string */
   if ^exclude (exclude_count).null_string_flag then do;
                                       /* for example: check_iacl -ex Foo */
      if exclude (exclude_count).dot_count = 0 then

                                       /* append the literal ".*.*" to the specified User_id */
         substr (exclude (exclude_count).name, exclude (exclude_count).actual_length + 1, 4) = ".*.*";

     else if exclude (exclude_count).dot_count = 1 then do;
                                       /* for the case of only one dot char is found in the specified User_id */
        if exclude (exclude_count).name = LITERAL_DOT then
                                       /* if specified User_id value is "." then update its value */
	 exclude (exclude_count).name = LITERAL_DOT_DOT_STAR;
                                       /* Othewise, for examples: -ex .Multics; -ex Foo.; -ex Foo.Multics, */
                                       /* append literal ".*" to the specified User_id */
        else substr (exclude (exclude_count).name, exclude (exclude_count).actual_length + 1, 2) = ".*";
     end;
                                       /* p_dot_count = 2 and specified User_id value is not ".."  */
     else if exclude (exclude_count).name ^= LITERAL_DOT_DOT then do;
                                       /* for examples: -ex ..a; -ex .Multics.a  */
        if (exclude (exclude_count).dot_location (1) = 1) &
	 (exclude (exclude_count).dot_location (2) = 2 |
	  exclude (exclude_count).dot_location (2) < exclude (exclude_count).actual_length) then;
                                      /* Otherwise, for examples: -ex Foo..; -ex .Multics.; -ex Foo.Multics.,
                                         append a literal "*" to the specified User_id */
        else substr (exclude (exclude_count).name, exclude (exclude_count).actual_length + 1, 1) = LITERAL_STAR;
     end;
     else;                            /* OK for -ex ..  */
  end;                                /* specified User_id is not a null string */     
  else;                               /* OK for -ex " "  */

set_components_NORMAL_RETURN:
  return;                             /* return to check_iacl main program */

set_components_ERROR_RETURN:
  call com_err_ (code, MY_NAME, "^a", exclude (exclude_count).name);
  return;                             /* for error, return to check_iacl main program */

  end set_components;                 /* end of set components internal procedure */
 
/*--------------------------------------------------------------------------*/
%page;
  end check_iacl;                     /* end of check_iacl main program */

