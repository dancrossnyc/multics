/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   *********************************************************** */
cv_acl_type_:
     procedure ();

/* *	CV_ACL_TYPE_ -- Procedure used by ACL commands to convert from one format
   *	   of ACL representation to another.
   *
   *	This family of procedures converts from one format of ACL structure to
   *	another, in order to accomodate the different formats used by existing
   *	hcs_ entrypoints.  The ACL structures are reallocated, copied, and 
   *	freed.  There is only one ACL structure in use at any given time in
   *	this program: it is pointed to by acl_ptr, and the number of entries is
   *	given by acl_count.  Except when actually calling the primitives, only
   *	the appropriate general ACL structure format will be used.  Now, this
   *	may look rather inefficient, and, in truth, it is, but it is only used
   *	relatively rarely: IACL manipulations, since they are not now supported
   *	by fs_util_, privileged operations, likewise unsupported, and
   *	force_no_type operations, presumably infrequent.   Also, the conversion
   *	if incoming ACL structures (that is, prior to calling the primitive) is
   *	restricted to uses in list_acl (and IACL) where specific access names
   *	were requested. The normal case, where no names were requested, will
   *	simply result in an immediate return because the pointer is null (or
   *	the count zero)
   *	
   *	2 October 1983, W. Olin Sibert
   */

declare	P_acl_ptr pointer parameter;
declare	P_new_acl_ptr pointer parameter;
declare	P_acl_count fixed bin parameter;
declare	P_area_ptr pointer parameter;
declare	P_old_type char (32) parameter;
declare	P_new_type char (32) parameter;

declare	system_area_ptr pointer;
declare	system_area area based (system_area_ptr);
declare	based_stuff fixed bin aligned based;		/* For (invalid) general-purpose freeing operations */

declare	replace_sw bit (1) aligned;
declare	old_acl_ptr pointer;
declare	new_acl_ptr pointer;
declare	old_type fixed bin;
declare	new_type fixed bin;

declare	acle_idx fixed bin;
declare	old_acle_ptr pointer;
declare	new_acle_ptr pointer;

declare	sub_err_ entry options (variable);

declare	GENERAL		init (101) fixed bin internal static options (constant);
declare	GENERAL_EXTENDED	init (102) fixed bin internal static options (constant);
declare	GENERAL_DELETE	init (103) fixed bin internal static options (constant);
declare	SEGMENT_ARRAY	init (104) fixed bin internal static options (constant);
declare	SEGMENT_STRUCTURE	init (105) fixed bin internal static options (constant);
declare	DIRECTORY_ARRAY	init (106) fixed bin internal static options (constant);
declare	DIRECTORY_STRUCTURE	init (107) fixed bin internal static options (constant);
declare	DELETE		init (108) fixed bin internal static options (constant);

declare  (addr, null) builtin;

/*  */

cv_acl_type_$create:
     entry (P_acl_ptr, P_acl_count, P_area_ptr, P_old_type, P_new_type, P_new_acl_ptr);

	replace_sw = "0"b;
	goto COMMON;



cv_acl_type_$replace:
     entry (P_acl_ptr, P_acl_count, P_area_ptr, P_old_type, P_new_type);

	replace_sw = "1"b;
	goto COMMON;


COMMON:
	acl_ptr = P_acl_ptr;
	acl_count = P_acl_count;
	system_area_ptr = P_area_ptr;

/* Either a null pointer of zero count is sufficient evidence that there is nothing
   there, and a null pointer and zero count will always be returned in that case */

	if (acl_count = 0) | (acl_ptr = null ()) then do;
	     if replace_sw then do;			/* Update the output parameters */
		P_acl_count = 0;
		P_acl_ptr = null ();
		if (acl_ptr ^= null ()) then free acl_ptr -> based_stuff in (system_area);
		end;
	     return;
	     end;

	call get_type (P_old_type, old_type);
	call get_type (P_new_type, new_type);

	old_acl_ptr = acl_ptr;

/* These procedures do their own allocation, but the old one is freed after all is done.
   There is a race here: if this procedure is interrupted during the copying, the old one
   will never be freed. This, however, hardly seems exciting, or worth the expense of 
   setting up a cleanup handler to handle. */

/* Only a few of the sensible conversion are supported in this procedure, by the way:
   those which are of interest to the standard ACL commands. */

	if (old_type = GENERAL) & (new_type = SEGMENT_ARRAY) then call general_to_segment_array ();
	else if (old_type = GENERAL) & (new_type = DIRECTORY_ARRAY) then call general_to_directory_array ();
	else if (old_type = SEGMENT_ARRAY) & (new_type = GENERAL) then call segment_array_to_general ();
	else if (old_type = DIRECTORY_ARRAY) & (new_type = GENERAL) then call directory_array_to_general ();
	else call bad_conversion ();

	if replace_sw then do;
	     P_acl_ptr = new_acl_ptr;
	     free old_acl_ptr -> based_stuff in (system_area);
	     end;
	else P_new_acl_ptr = new_acl_ptr;

	return;

/*  */

general_to_segment_array:
     procedure ();

	if (acl_ptr -> general_acl.version ^= GENERAL_ACL_VERSION_1) then call bad_type ();

	allocate segment_acl_array in (system_area) set (new_acl_ptr);

	do acle_idx = 1 to acl_count;			/* Copy relevant portions of each entry */
	     old_acle_ptr = addr (acl_ptr -> general_acl.entries (acle_idx));
	     new_acle_ptr = addr (new_acl_ptr -> segment_acl_array (acle_idx));
	     new_acle_ptr -> segment_acl_entry.access_name = old_acle_ptr -> general_acl_entry.access_name;
	     new_acle_ptr -> segment_acl_entry.mode = old_acle_ptr -> general_acl_entry.mode;
	     new_acle_ptr -> segment_acl_entry.status_code = old_acle_ptr -> general_acl_entry.status_code;
	     new_acle_ptr -> segment_acl_entry.extended_mode = ""b;
	     end;

	return;
	end general_to_segment_array;



general_to_directory_array:
     procedure ();

	if (acl_ptr -> general_acl.version ^= GENERAL_ACL_VERSION_1) then call bad_type ();

	allocate directory_acl_array in (system_area) set (new_acl_ptr);

	do acle_idx = 1 to acl_count;			/* Copy relevant portions of each entry */
	     old_acle_ptr = addr (acl_ptr -> general_acl.entries (acle_idx));
	     new_acle_ptr = addr (new_acl_ptr -> directory_acl_array (acle_idx));
	     new_acle_ptr -> directory_acl_entry.access_name = old_acle_ptr -> general_acl_entry.access_name;
	     new_acle_ptr -> directory_acl_entry.mode = old_acle_ptr -> general_acl_entry.mode;
	     new_acle_ptr -> directory_acl_entry.status_code = old_acle_ptr -> general_acl_entry.status_code;
	     end;

	return;
	end general_to_directory_array;

/*  */

segment_array_to_general:
     procedure ();

	allocate general_acl in (system_area) set (new_acl_ptr);
	new_acl_ptr -> general_acl.count = acl_count;
	new_acl_ptr -> general_acl.version = GENERAL_ACL_VERSION_1;

	do acle_idx = 1 to acl_count;			/* Copy relevant portions of each entry */
	     old_acle_ptr = addr (acl_ptr -> segment_acl_array (acle_idx));
	     new_acle_ptr = addr (new_acl_ptr -> general_acl.entries (acle_idx));
	     new_acle_ptr -> general_acl_entry.access_name = old_acle_ptr -> segment_acl_entry.access_name;
	     new_acle_ptr -> general_acl_entry.mode = old_acle_ptr -> segment_acl_entry.mode;
	     new_acle_ptr -> general_acl_entry.status_code = old_acle_ptr -> segment_acl_entry.status_code;
	     end;

	return;
	end segment_array_to_general;



directory_array_to_general:
     procedure ();

	allocate general_acl in (system_area) set (new_acl_ptr);
	new_acl_ptr -> general_acl.count = acl_count;
	new_acl_ptr -> general_acl.version = GENERAL_ACL_VERSION_1;

	do acle_idx = 1 to acl_count;			/* Copy relevant portions of each entry */
	     old_acle_ptr = addr (acl_ptr -> directory_acl_array (acle_idx));
	     new_acle_ptr = addr (new_acl_ptr -> general_acl.entries (acle_idx));
	     new_acle_ptr -> general_acl_entry.access_name = old_acle_ptr -> directory_acl_entry.access_name;
	     new_acle_ptr -> general_acl_entry.mode = old_acle_ptr -> directory_acl_entry.mode;
	     new_acle_ptr -> general_acl_entry.status_code = old_acle_ptr -> directory_acl_entry.status_code;
	     end;

	return;
	end directory_array_to_general;

/*  */

get_type:
     procedure (P_type_name, P_type);

declare	P_type_name char (*) parameter;
declare	P_type fixed bin parameter;

declare	type_name char (32);

/* This procedure is strictly used as an interface by acl_commands_; nonetheless, in order
   to avoid having to share definitions for the type constants, types are passed as
   character strings to make things more readable, and converted here to integers for
   greater efficiency. */


	type_name = P_type_name;
	if (type_name = "general") then P_type = GENERAL;
	else if (type_name = "segment_array") then P_type = SEGMENT_ARRAY;
	else if (type_name = "directory_array") then P_type = DIRECTORY_ARRAY;
	else if (type_name = "general_extended") then P_type = GENERAL_EXTENDED;
	else if (type_name = "general_delete") then P_type = GENERAL_DELETE;
	else if (type_name = "delete") then P_type = DELETE;
	else if (type_name = "segment_structure") then P_type = SEGMENT_STRUCTURE;
	else if (type_name = "directory_structure") then P_type = DIRECTORY_STRUCTURE;
	else call bad_conversion ();

	return;
	end get_type;



bad_conversion:
     procedure ();

	call sub_err_ (0, "cv_acl_type_", ACTION_CANT_RESTART, (null ()), (0),
	     "Undefined operation: cannot convert from ACL type ""^a"" to type ""^a"".",
	     P_old_type, P_new_type);

	end bad_conversion;



bad_type:
     procedure ();

	call sub_err_ (0, "cv_acl_type_", ACTION_CANT_RESTART, (null ()), (0),
	     "Input ACL is not of specified type ""^a"".", P_old_type);

	end bad_type;

%page; %include acl_structures;
%page; %include sub_err_flags;

	end cv_acl_type_;
