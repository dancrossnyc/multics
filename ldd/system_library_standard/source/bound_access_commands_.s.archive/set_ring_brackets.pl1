/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1985 *
   *                                                         *
   *********************************************************** */

set_ring_brackets:
srb:
     procedure () options (variable);

/* sytle: version3 */

/*
   ring bracket setting program.

   Command/Interface	Function
   -----------------	--------
   set_ring_brackets	sets ring brackets via fs_util_
   l_set_ring_brackets	sets ring brackets via installation_tools_
   hp_set_ring_brackets	sets ring brackets via hphcs_
   set_dir_ring_brackets	allow only dirs
   l_set_dir_ring_brackets	allow only dirs
   hp_set_dir_ring_brackets	allow only dirs

   Usage:

	srb path r1 r2 r3

   Where:
	path is a starname indicating segment(s) to have brackets set.
	rN is a ring number from 0 to 7
		if not provided, 
			r3 = r2 (dir operation excludes r3)
			r2 = r1
			r1 = current validation level.

   Originally coded by R. J. Feiertag on March 23, 1972
   Completely recoded by M. Pandolf on January 10, 1984

*/

%page;

/* DECLARATIONS */

/* Automatic */

	dcl     argl		 fixed bin (21);	/* length of command line arg */
	dcl     argno		 fixed bin;	/* index into command line args */
	dcl     argp		 pointer;		/* pointer to command line arg */
	dcl     bc		 fixed bin (24);	/* entry's bit count */
	dcl     code		 fixed bin (35);	/* standard status code */
	dcl     dirname		 char (168);	/* path name of parent */
	dcl     ename_count		 fixed bin;	/* number of names in structure */
	dcl     ename_ix		 fixed bin;	/* index into ename structure */
	dcl     enamep		 pointer;		/* pointer to structure of entrynames */
	dcl     entryname		 char (32);	/* star name of target to be set */
	dcl     i			 fixed bin;	/* index... */
	dcl     nargs		 fixed bin;	/* number of command line args */
	dcl     ring		 dim (3) fixed bin (3); /* the ring bracket values */
	dcl     ss_type		 fixed bin (2);	/* storage system entry type */
	dcl     system_areap	 pointer;		/* pointer to system free area */

/* Based */

	dcl     arg		 char (argl) based (argp); /* command line argument */
	dcl     dir_ring		 dim (2) fixed bin (3) based (addr (ring)); /* for correct dir RB parameter */
	dcl     1 ename		 aligned based (enamep), /* entryname structure */
		2 count		 fixed bin,
		2 string		 dim (ename_count refer (ename.count)) char (32) unaligned;
	dcl     system_area		 area based (system_areap); /* is system_free_area_ */

/* Static, External */

	dcl     error_table_$bad_conversion fixed bin (35) ext static;
	dcl     error_table_$invalid_ring_brackets fixed bin (35) ext static;
	dcl     error_table_$lower_ring fixed bin (35) ext static;
	dcl     error_table_$nomatch	 fixed bin (35) ext static;
	dcl     error_table_$not_privileged fixed bin (35) ext static;
	dcl     error_table_$notadir	 fixed bin (35) ext static;
	dcl     error_table_$too_many_args fixed bin (35) ext static;

/* Entry */

	dcl     check_star_name_$entry entry (char (*), fixed bin (35));
	dcl     com_err_		 entry () options (variable);
	dcl     cu_$arg_count_rel	 entry (fixed bin, ptr, fixed bin (35));
	dcl     cu_$arg_list_ptr	 entry () returns (ptr);
	dcl     cu_$arg_ptr_rel	 entry (fixed bin, ptr, fixed bin (21), fixed bin (35), ptr);
	dcl     cu_$generate_call	 entry (entry, ptr);
	dcl     cu_$level_get	 entry () returns (fixed bin);
	dcl     cv_dec_check_	 entry (char (*), fixed bin (35)) returns (fixed bin (35));
	dcl     expand_pathname_	 entry (char (*), char (*), char (*), fixed bin (35));
	dcl     fs_util_$set_ring_brackets entry (char (*), char (*), (*) fixed bin (3), fixed bin (35));
	dcl     get_ring_		 entry () returns (fixed bin (3));
	dcl     get_system_free_area_	 entry () returns (ptr);
	dcl     hcs_$set_dir_ring_brackets entry (char (*), char (*), (2) fixed bin (3), fixed bin (35));
	dcl     hcs_$star_		 entry (char (*), char (*), fixed bin (2), ptr, fixed bin, ptr, ptr, fixed bin (35));
	dcl     hcs_$status_minf	 entry (char (*), char (*), fixed bin (1), fixed bin (2), fixed bin (24), fixed bin (35));
	dcl     hphcs_$set_dir_ring_brackets entry (char (*), char (*), (2) fixed bin (3), fixed bin (35));
	dcl     hphcs_$set_ring_brackets entry (char (*), char (*), (*) fixed bin (3), fixed bin (35));
	dcl     installation_tools_$set_dir_ring_brackets entry (char (*), char (*), (2) fixed bin (3), fixed bin (35));
	dcl     installation_tools_$set_ring_brackets entry (char (*), char (*), (*) fixed bin (3), fixed bin (35));
	dcl     pathname_		 entry (char (*), char (*)) returns (char (168));

/* Constant */

	dcl     CHASE		 fixed bin (1) internal static options (constant) init (1);

	dcl     IDENT		 dim (6) char (32) internal static options (constant)
				 init ("set_ring_brackets", "l_set_ring_brackets", "hp_set_ring_brackets",
				 "set_dir_ring_brackets", "l_set_dir_ring_brackets", "hp_set_dir_ring_brackets");

	dcl     (RB		 init (1),
	        L_RB		 init (2),
	        HP_RB		 init (3),
	        D_RB		 init (4),
	        L_D_RB		 init (5),
	        HP_D_RB		 init (6)) internal static options (constant);

/* Builtin */

	dcl     addr		 builtin;
	dcl     max		 builtin;
	dcl     mod		 builtin;
	dcl     null		 builtin;
	dcl     sum		 builtin;

/* Condition */

	dcl     cleanup		 condition;
	dcl     linkage_error	 condition;

%page;

/* BEGIN MAIN CODE */

/*
set_ring_brackets:
sdrb:
	entry () options (variable);
*/

	call SET (RB, fs_util_$set_ring_brackets, cu_$arg_list_ptr ());
	return;

l_set_ring_brackets:
lset_ring_brackets:
lsrb:
     entry () options (variable);

	call SET (L_RB, installation_tools_$set_ring_brackets, cu_$arg_list_ptr ());
	return;

hp_set_ring_brackets:
hpset_ring_brackets:
hpsrb:
     entry () options (variable);

	call SET (HP_RB, hphcs_$set_ring_brackets, cu_$arg_list_ptr ());
	return;

set_dir_ring_brackets:
sdrb:
     entry () options (variable);

	call SET (D_RB, hcs_$set_dir_ring_brackets, cu_$arg_list_ptr ());
	return;

l_set_dir_ring_brackets:
lset_dir_ring_brackets:
lsdrb:
     entry () options (variable);

	call SET (L_D_RB, installation_tools_$set_dir_ring_brackets, cu_$arg_list_ptr ());
	return;

hp_set_dir_ring_brackets:
hpset_dir_ring_brackets:
hpsdrb:
     entry () options (variable);

	call SET (HP_D_RB, hphcs_$set_dir_ring_brackets, cu_$arg_list_ptr ());
	return;

error_return:
	call RELEASE_STORAGE ();
	return;

%page;

/* INTERNAL PROCEDURES */

SET:
     procedure (operation, operator, command_line_argp);

	dcl     operation		 fixed bin parameter;
	dcl     operator		 entry options (variable) parameter;
	dcl     command_line_argp	 pointer parameter;

/* initialize important values */

	system_areap = get_system_free_area_ ();
	star_names_ptr,
	     star_entry_ptr,
	     enamep = null ();

	on cleanup
	     call RELEASE_STORAGE ();

/* get arg information */

	call cu_$arg_count_rel (nargs, command_line_argp, code);
	if code ^= 0
	then call ABORT (code, IDENT (operation),
		"^/Usage is: ^a path {r1 {r2^[ {r3^;^]}}", IDENT (operation), (operation < 4));

/* get starname of entries to set */

	call cu_$arg_ptr_rel (1, argp, argl, code, command_line_argp);
	if code ^= 0
	then call ABORT (code, IDENT (operation),
		"^/Usage is: ^a path {r1 {r2^[ {r3^;^]}}", IDENT (operation), (operation < 4));

	call expand_pathname_ (arg, dirname, entryname, code);
	if code ^= 0
	then call ABORT (code, IDENT (operation), """^a""", arg);

/*  get the ring brackets from the command line */

	if ((nargs > 3) & (operation > 3)) | ((nargs > 4) & (operation < 4))
	then call ABORT (error_table_$too_many_args, IDENT (operation));

	do argno = 2 to nargs;

	     call cu_$arg_ptr_rel (argno, argp, argl, code, command_line_argp);
	     if code = 0
	     then do;
		     ring (argno - 1) = cv_dec_check_ (arg, code);
		     if code ^= 0
		     then call ABORT (error_table_$bad_conversion, IDENT (operation),
			     """^a"" isn't numeric.", arg);
		end;
	end;

	if (nargs > 3) & (operation > 3)
	then call ABORT (error_table_$too_many_args, IDENT (operation));

/* validate the ring brackets */

	if nargs = 1
	then ring (1), ring (2), ring (3) = cu_$level_get (); /* if no ring brackets, assume validation level */
	if nargs = 2
	then ring (2), ring (3) = ring (1);
	if nargs = 3
	then ring (3) = ring (2);

	if ^((operation = 1) | (operation = 4))
	then on linkage_error
		call ABORT (error_table_$not_privileged, IDENT (operation),
		     "Access to ^[hphcs_^;^;installation_tools_^;^].", mod (operation, 3) + 1);
	else do;
		if ring (1) < max (cu_$level_get (), get_ring_ ())
		then call ABORT (error_table_$lower_ring, IDENT (operation),
			"^d ^d ^[^d^;^s^]", ring (1), ring (2), (operation < 4), ring (3));

		if (ring (1) > ring (2)) | (ring (2) > ring (3))
		then call ABORT (error_table_$invalid_ring_brackets, IDENT (operation),
			"^d ^d ^[^d^;^s^]", ring (1), ring (2), (operation < 4), ring (3));
	     end;

/* set the ring brackets */

	call MAKE_NAME_LIST (dirname, entryname, enamep);

	if enamep -> ename.count = 0
	then call ABORT (error_table_$nomatch, IDENT (operation),
		"^a.", pathname_ (dirname, entryname));

	do i = 1 to enamep -> ename.count;

	     if operation > 3
	     then call operator (dirname, enamep -> ename.string (i), dir_ring, code);
	     else call operator (dirname, enamep -> ename.string (i), ring, code);

	     if code ^= 0
	     then call com_err_ (code, IDENT (operation),
		     "^a.", pathname_ (dirname, enamep -> ename.string (i)));

	end;

	call RELEASE_STORAGE ();

	return;

MAKE_NAME_LIST:
     procedure (parent, starname, eptr);

	dcl     parent		 char (168) parameter;
	dcl     starname		 char (32) parameter;
	dcl     eptr		 pointer parameter;

/* see if we have a starname or not */

	call check_star_name_$entry (starname, code);
	if code > 2				/* malformed star name */
	then do;
		call com_err_ (code, IDENT (operation),
		     "^a.", starname);
		goto error_return;
	     end;

	if code = 0				/* no special characters in starname */
	then do;
		call hcs_$status_minf (parent, starname, CHASE, ss_type, bc, code);
		if code ^= 0
		then call ABORT (code, IDENT (operation), "^a.", pathname_ (parent, starname));

		if (operation > 3) & (ss_type ^= star_DIRECTORY)
		then call ABORT (error_table_$notadir, IDENT (operation), "^a.", pathname_ (parent, starname));

		ename_count = 1;
		allocate ename set (eptr) in (system_area);
		eptr -> ename.string (1) = starname;
	     end;
	else do;					/* potentially matches multiple names */
		call hcs_$star_ (parent, starname, star_BRANCHES_ONLY, system_areap,
		     star_entry_count, star_entry_ptr, star_names_ptr, code);
		if code ^= 0
		then do;
			call com_err_ (code, IDENT (operation),
			     "^a.", pathname_ (parent, starname));
			goto error_return;
		     end;

		ename_count = star_entry_count;
		allocate ename set (eptr) in (system_area);
		ename_ix = 1;
		do i = 1 to star_entry_count;
		     if operation > 3		/* DIR wanted */
		     then if star_entries (i).type = star_DIRECTORY
			then eptr -> ename.string (ename_ix) = star_names (star_entries (i).nindex);
			else ename_ix = ename_ix - 1;
		     else eptr -> ename.string (ename_ix) = star_names (star_entries (i).nindex);
		     ename_ix = ename_ix + 1;
		end;

		eptr -> ename.count = ename_ix - 1;

		free star_names_ptr -> star_names in (system_area);
		free star_entry_ptr -> star_entries in (system_area);

	     end;

	return;

     end MAKE_NAME_LIST;

ABORT:
     procedure () options (variable);

	call cu_$generate_call (com_err_, cu_$arg_list_ptr ());
	goto error_return;

     end ABORT;

     end SET;

RELEASE_STORAGE:
     procedure ();

	system_areap = get_system_free_area_ ();

	if enamep ^= null ()
	then free enamep -> ename in (system_area);

	if star_names_ptr ^= null ()
	then free star_names_ptr -> star_names in (system_area);

	if star_entry_ptr ^= null ()
	then free star_entry_ptr -> star_entries in (system_area);

	return;

     end RELEASE_STORAGE;

%page;

/* INCLUDE FILES */

%include star_structures;

     end set_ring_brackets;
