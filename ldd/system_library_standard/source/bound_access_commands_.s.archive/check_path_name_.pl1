/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


check_path_name_:		proc(pp,plen,cacl,whoami,dirp,entp,npp,ecount,eptr,nptr,retc);

/* This procedure is used by the access commands to expand given path names, to check them for stars,
	and to call hcs_$star_ if appropriate. */

/* initially coded by M. Weaver 21 March 1970 */
/* last modified by M. Weaver 8 October 1970 */

	dcl arg char(plen) unaligned based(pathp);
	dcl (dirname based(dirp), pathname) char(168) aligned;
	dcl dname char(168) var int static;
	dcl entname char(32) aligned based(entp);
	dcl ename char(32) aligned based(q);
	dcl gt char(1) var int static;		/* contains ">" or " " */
	dcl whoami char(16) aligned;
	dcl new_path char(168) aligned based(npp);		/* for full path name for identification */
	dcl (pathp, dirp, entp, pp, npp, areap, q, eptr, nptr, (ep, np, mp) int static) ptr;
	dcl (cacl, csw int static) bit(1) aligned;
	dcl (plen, scode, code, retc, ecount, lng, j int static) fixed bin(17);
	dcl 1 entries(0:99) aligned based(eptr),		/* structure returned by hcs_$star_ */
		2 type bit(2) unaligned,
		2 nname bit(16) unaligned,
		2 nindex bit(18) unaligned;
	dcl names(0:499) char(32) based(nptr) aligned;

	dcl (ioa_$rsnnl, com_err_) entry options(variable);
	dcl hcs_$star_ entry(char(*) aligned, char(*) aligned, fixed bin, ptr, fixed bin, ptr, ptr, fixed bin),
	    get_wdir_ entry(char(168) aligned);
	dcl (addr, fixed, index, null, substr) builtin;
	dcl expand_path_ ext entry(ptr, fixed bin(17), ptr, ptr, fixed bin(17));
	dcl check_star_ ext entry(ptr, fixed bin(17), fixed bin(17));
	dcl freen_ ext entry(ptr);
	dcl get_system_free_area_ ext entry returns(ptr);

/* * * * * * * * * * * * * * * * * * * * * * */

	retc = 2;				/* assume error until finish */

/* check for working directory */
	if pp->arg = "-wd" then go to wdr;
	else if pp->arg = "-wdir" then do;
wdr:		pathp = addr(pathname);
		call get_wdir_(pathname);
		plen = index(pathname, " ") - 1;
		if plen < 0 then plen = 168;
		end;
	else pathp = pp;

/* get dirname and entname */
	call expand_path_(pathp, plen, dirp, entp, code);
	if code ^= 0 then do;
err1:		call com_err_(code,whoami,arg);
		return;
		end;

	if substr(dirname, 1, 4) = ">   "		/* Check to see if pathname */
	then if substr(entname, 1, 4) = "    "		/* is the root, AFTER expansion */
	     then do;
		if cacl then do;
		     new_path = ">";
		     go to rset;
		     end;
		else do;
		     call com_err_(0, whoami, "There is no ACL on the root.");
		     return;
		     end;
		end;

	call check_star_(entp, 32, scode);		/* see if there are stars in the name */

	if dirname = "> " then gt = "";		/* don't want ">>" to appear in a pathname */
	else gt = ">";

	if scode = 0 then do;		/* no stars */
		call ioa_$rsnnl("^a^a^a",new_path,lng,dirname,gt,entname);
rset:		retc = 0;
		if cacl then dirname = new_path;
		ecount = 1;
		end;

	else if scode < 3 then do;		/* have stars */
		eptr, nptr = null;
		areap = get_system_free_area_();
		call hcs_$star_(dirname,entname,2,areap,ecount,eptr,nptr,code);
		if code ^= 0 then do;
			call com_err_(code,whoami,arg);
			if eptr ^= null then call freen_(eptr);
			if nptr ^= null then call freen_(nptr);
			return;		/* can't get pathnames to use */
			end;
		if cacl then do;
			csw = "1"b;		/* set internal static cacl switch */
			if substr(dirname,167,1) ^= " " then do;
				call com_err_(0, whoami, "Directory name too long to use with star convention. ^a",
				dirname);
				return;
				end;
			end;
		else csw = "0"b;			/* no cacl */
		dname = substr(dirname,1,index(dirname, " ")-1);     /* dname is var and is used several times */
		mp = npp;			/* store the pointer to the path name for messages */
		ep = eptr;		/* store pointers from hcs_$star_ */
		np = nptr;
		j = 0;
		retc = 1;
		end;

	else do;				/* scode > 2 */

	     code = scode;			/* Print message for check_star_ error ($badstar) */
	     go to err1;

	     end;

	if cacl then entname = " ";
	return;


indiv:	entry(dpr,epr,ssw);

/* In this entry, mp->new_path will always be set; for CACLs, dirname will be set equal to mp->new_path;
   for ACLs, epr will be set to point to the appropriate entry name. */

	dcl (dpr, epr) ptr;			/* these correspand to dirp and entp but can't have same names */
	dcl ssw bit(1) aligned;

	if ep->entries(j).type ^= "10"b then do;		/* not a directory */
		ssw = "1"b;
		if csw then go to ret;		/* want only directories for cacl commands */
		end;
	else ssw = "0"b;	/* have a directory */

	q = addr(np->names(fixed(ep->entries(j).nindex,18)-1));		/* get address of entry name */
	mp->new_path = dname || gt || ename;
	if csw then
		dpr->dirname = mp->new_path;
	else
		epr = q;
ret:	j = j + 1;		/* update entry count */

	return;
	end check_path_name_;
