/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */

/* Procedure to print the access authorization of a process */
/* Usage: print_proc_auth [options]

   no options:	print process authorization using short level and category names.

   -long,-lg	print process authorization using long level and category names.

   -all,-a:	print the maximum authorization of this process also.

   If this process has any system privileges, they will also be printed */

/* Originally coded by J. Whitmore  09/21/74
   Modified 750417 by LJS
   Modified 25 September 1983 by J. Spencer Love to add "comm" privilege and fix bugs. */

ppa:
print_proc_auth:
     procedure () options (variable);

dcl  aptr pointer,					/* arg pointer */
     alen fixed bin,				/* arg length */
     bchar char (alen) based (aptr);			/* arg string */

dcl (current, max) bit (72) aligned;			/* process authorizations */

%include aim_template;

dcl  priv (18) char (8) varying static options (constant) init ("ipc", "dir", "seg", "soos", "ring1", "rcp", "comm",
     "priv_8", "priv_9", "priv_10", "priv_11", "priv_12", "priv_13", "priv_14", "priv_15", "priv_16", "priv_17",
     "priv_18");

dcl  auth_string char (512),				/* string for authorization names */
     priv_string char (168) varying,			/* string for privilege names */
     command char (24);				/* entrypoint name for com_err_ */

dcl  long_sw bit (1) aligned init ("0"b),		/* long option indicator  */
     max_sw bit (1) aligned init ("0"b),		/* -all option indicator */
     ec fixed bin (35),				/* error code  */
     i fixed bin,					/* do loop index */
     nargs fixed bin;

dcl  auth_p pointer,				/* locator for auth structure */
    (addr, index, length, reverse, rtrim, string, substr) builtin;

dcl  hcs_$get_authorization entry (bit (72) aligned, bit (72) aligned),
    (ioa_, com_err_) entry options (variable),
     cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35)),
     convert_authorization_$to_string entry (bit (72) aligned, char (*), fixed bin (35)),
     cu_$arg_count entry returns (fixed bin),
     convert_authorization_$to_string_short entry (bit (72) aligned, char (*), fixed bin (35)),
     error_table_$badopt ext static fixed bin (35);
%page;
	command = "print_proc_auth";
	nargs = cu_$arg_count ();

	do i = 1 to nargs;
	     call cu_$arg_ptr (i, aptr, alen, ec);
	     if index (bchar, "-") ^= 1 then do;
		call com_err_ (0, command, "Usage:  ppa {-control_args}");
		return;
	     end;
	     if bchar = "-long" | bchar = "-lg" then long_sw = "1"b;
	     else if bchar = "-all" | bchar = "-a" then max_sw = "1"b;
	     else do;
		ec = error_table_$badopt;
		call com_err_ (ec, command, bchar);
		return;
	     end;

	end;


	call hcs_$get_authorization (current, max);	/* get the authorizations */

	if long_sw then
	     call convert_authorization_$to_string (current, auth_string, ec);
	else call convert_authorization_$to_string_short (current, auth_string, ec);

	if ec ^= 0 then				/* if this happens, we're in trouble */
	     call com_err_ (ec, command, "Could not convert current authorization.");

	else do;
	     if auth_string = "" then call ioa_ ("^/Current authorization is un-named.");
	     else call print_formatted ("Current auth", auth_string); /* all was well, print it */
	end;

	if max_sw then do;				/* shall we print more info? */

	     if long_sw then
		call convert_authorization_$to_string (max, auth_string, ec);
	     else call convert_authorization_$to_string_short (max, auth_string, ec);

	     if ec ^= 0 then do;			/* conversion trouble? */
		call com_err_ (ec, command, "Could not convert max authorization.");
	     end;
	     else do;
		if auth_string = "" then call ioa_ ("Maximum authorization is un-named.");
		else call print_formatted ("Maximum auth", auth_string);
	     end;
	end;


	auth_p = addr (current);			/* the privileges are in the last 18 bits of current */
	priv_string = "";				/* and null the string */
	do i = 1 to 18;				/* look at all the priv bits */

	     if substr (string (auth_p -> privileges), i, 1) then do; /* add the name */

		priv_string = priv_string || priv (i) || ",";

	     end;					/* look for other bits */
	end;

	if length (priv_string) > 1 then do;		/* Only print privileges if set. */

	     auth_string = substr (priv_string, 1, length (priv_string) - 1); /* Remove comma. */

	     call print_formatted (" System Priv", auth_string);
	end;

	call ioa_ ();

	return;
%page;
print_formatted: proc (title, string);

dcl (title, string) char (*),
     ioa_$nnl entry options (variable),
    (len, ind, max_len, max_ch, pos) fixed bin,
     ll fixed bin init (71);				/* maximum number of characters per line */

	     ind = 1;				/* initialize the string index */

	     max_len = length (rtrim (string));		/* number of good chars */

	     pos = length (title) + 4;		/* get last used print position */

	     do while ((max_len-ind + 1) >50);		/* get ready to format */

		max_ch = ll - pos;			/* max chars left for this line */
		len = index (reverse (substr (string, ind, max_ch)), ",") - 1; /* find last comma */
						/* in the string of chars that could */
						/* fit on this line */
		if len < 0 then len = 0;		/* If no comma, get it right. */
		len = max_ch - len;			/* number of chars for this line */
		call ioa_ ("^[^/^a:^;^s^]^vt^a", (ind = 1), title, pos, substr (string, ind, len));
		ind = ind + len;			/* update the index */
		if substr (string, ind, 1) = " " then ind = ind + 1; /* Skip spaces in -long string */
	     end;

	     call ioa_ ("^[^/^a:^;^s^]^vt^a", (ind = 1), title, pos, substr (string, ind));

	     return;

	end print_formatted;

     end print_proc_auth;
