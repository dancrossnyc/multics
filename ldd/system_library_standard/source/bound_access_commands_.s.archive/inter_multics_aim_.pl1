/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
/* Utilities to aid in the propogation of AIM between Multics systems */

/* Created:  July 1982 by G. Palter */

/* format: style4,delnl,insnl,ifthenstmt,ifthen */


inter_multics_aim_:
     procedure ();

	return;					/* not an entrypoint */


/* Common Parameters */

dcl  P_code fixed binary (35) parameter;


/* get_system_aim_attributes_ Parameters */

dcl  P_area_ptr pointer parameter;			/* -> area where to allocate output structure */
dcl  P_version_wanted character (8) unaligned parameter;	/* version of aim_attributes structure desired */
dcl  P_aim_attributes_ptr pointer parameter;		/* set -> aim_attributes structure we create */


/* compute_common_aim_ceiling_ Parameters */

dcl  P_aim_attributes_1_ptr pointer parameter;		/* -> first system's AIM attributes */
dcl  P_common_ceiling_1 bit (72) aligned parameter;	/* set to the common ceiling in first system's terms */
dcl  P_aim_attributes_2_ptr pointer parameter;		/* -> second system's AIM attributes */
dcl  P_common_ceiling_2 bit (72) aligned parameter;	/* set to the common ceiling in second system's terms */


/* translate_aim_attributes_ Parameters */

dcl  P_source_aim_attributes_ptr pointer parameter;	/* -> source system's AIM attributes */
dcl  P_source_aim_authorization bit (72) aligned parameter; /* the access class/authorization to translate */
dcl  P_target_aim_attributes_ptr pointer parameter;	/* -> target system's AIM attributes */
dcl  P_target_aim_authorization bit (72) aligned parameter; /* set to the translated access class/authorization */


/* Local copies of parameters */

dcl  1 aim_attributes_1 aligned based (aim_attributes_1_ptr) like aim_attributes;
dcl  1 aim_attributes_2 aligned based (aim_attributes_2_ptr) like aim_attributes;
dcl  (aim_attributes_1_ptr, aim_attributes_2_ptr) pointer;

dcl  user_area area based (user_area_ptr);
dcl  user_area_ptr pointer;


/* Remaining declarations */

dcl  1 local_aim_template_1 aligned like aim_template;
dcl  1 local_aim_template_2 aligned like aim_template;

dcl  common_max_level fixed binary;			/* maximum sensitivity in common between systems */
dcl  category_translation (18, 2) fixed binary;		/* describes how to translate the categories */

dcl  ip pointer;					/* -> installation_parms */

dcl  idx fixed binary;

dcl  SYSTEM_CONTROL_DIR character (168) static options (constant) initial (">system_control_dir");
dcl  INSTALLATION_PARMS character (32) static options (constant) initial ("installation_parms");

/* format: off */
dcl (error_table_$ai_no_common_max, error_table_$ai_outside_common_range, error_table_$noalloc,
     error_table_$unimplemented_version)
	fixed binary (35) external;
/* format: on */

dcl  get_system_free_area_ entry () returns (pointer);
dcl  initiate_file_ entry (character (*), character (*), bit (*), pointer, fixed binary (24), fixed binary (35));
dcl  terminate_file_ entry (pointer, fixed binary (24), bit (*), fixed binary (35));

dcl  (area, cleanup) condition;

dcl  (hbound, lbound, min, null, substr, unspec) builtin;
%page;
/* Returns the AIM attributes defined on this system */

get_system_aim_attributes_:
     entry (P_area_ptr, P_version_wanted, P_aim_attributes_ptr, P_code);

	if P_version_wanted ^= AIM_ATTRIBUTES_VERSION_1 then do;
	     P_code = error_table_$unimplemented_version;
	     return;				/* that's the only version we understand */
	end;

	if P_area_ptr = null () then			/* default to system free area */
	     user_area_ptr = get_system_free_area_ ();
	else user_area_ptr = P_area_ptr;

	aim_attributes_ptr, ip = null ();		/* for cleanup handler */

	on condition (cleanup)
	     begin;
		if aim_attributes_ptr ^= null () then free aim_attributes in (user_area);
		if ip ^= null () then call terminate_file_ (ip, 0, TERM_FILE_TERM, (0));
		aim_attributes_ptr, ip = null ();
	     end;

	call initiate_file_ (SYSTEM_CONTROL_DIR, INSTALLATION_PARMS, R_ACCESS, ip, (0), P_code);
	if P_code ^= 0 then return;			/* couldn't get to it */

	on condition (area)
	     begin;				/* in case caller's area isn't large enough */
		P_code = error_table_$noalloc;
		go to RETURN_FROM_GET_SYSTEM_AIM_ATTRIBUTES_;
	     end;

	allocate aim_attributes in (user_area) set (aim_attributes_ptr);

	revert condition (area);

	aim_attributes.version = AIM_ATTRIBUTES_VERSION_1;

	aim_attributes.access_class_ceiling = installation_parms.access_authorization_ceiling;

	do idx = lbound (aim_attributes.levels, 1) to hbound (aim_attributes.levels, 1);
	     aim_attributes.levels (idx).long_name = installation_parms.level_names (idx);
	     aim_attributes.levels (idx).short_name = installation_parms.short_level_names (idx);
	end;

	do idx = lbound (aim_attributes.categories, 1) to hbound (aim_attributes.categories, 1);
	     aim_attributes.categories (idx).long_name = installation_parms.category_names (idx);
	     aim_attributes.categories (idx).short_name = installation_parms.short_category_names (idx);
	end;

	P_aim_attributes_ptr = aim_attributes_ptr;	/* completed successfully */
	P_code = 0;

RETURN_FROM_GET_SYSTEM_AIM_ATTRIBUTES_:
	if ip ^= null () then call terminate_file_ (ip, 0, TERM_FILE_TERM, (0));

	return;
%page;
/* Compute maximum authorization or access class which is in common between two systems */

compute_common_aim_ceiling_:
     entry (P_aim_attributes_1_ptr, P_common_ceiling_1, P_aim_attributes_2_ptr, P_common_ceiling_2, P_code);

	aim_attributes_1_ptr = P_aim_attributes_1_ptr;
	aim_attributes_2_ptr = P_aim_attributes_2_ptr;

	if (aim_attributes_1.version ^= AIM_ATTRIBUTES_VERSION_1)
	     | (aim_attributes_2.version ^= AIM_ATTRIBUTES_VERSION_1) then do;
	     P_code = error_table_$unimplemented_version;
	     return;				/* one of the structures is not acceptable */
	end;

	call compute_translation ();			/* computes necessary information to compute common ceiling */

	if common_max_level = -1 then do;		/* no levels in common: no common ceiling */
	     P_code = error_table_$ai_no_common_max;
	     return;
	end;

	P_code = 0;				/* we will succeed */


	unspec (local_aim_template_1) = ""b;		/* build ceiling in terms of first system */

	local_aim_template_1.level = common_max_level;

	do idx = lbound (category_translation, 1) to hbound (category_translation, 1);
	     if category_translation (idx, 1) ^= 0 then substr (local_aim_template_1.categories, idx, 1) = "1"b;
	end;

	P_common_ceiling_1 = unspec (local_aim_template_1);


	unspec (local_aim_template_2) = ""b;		/* build ceiling in terms of second system */

	local_aim_template_2.level = common_max_level;

	do idx = lbound (category_translation, 1) to hbound (category_translation, 1);
	     if category_translation (idx, 2) ^= 0 then substr (local_aim_template_2.categories, idx, 1) = "1"b;
	end;

	P_common_ceiling_2 = unspec (local_aim_template_2);

	return;
%page;
/* Translates the AIM attributes in an authorization or access class from one system's definition to another */

translate_aim_attributes_:
     entry (P_source_aim_attributes_ptr, P_source_aim_authorization, P_target_aim_attributes_ptr,
	P_target_aim_authorization, P_code);

	aim_attributes_1_ptr = P_source_aim_attributes_ptr;
	aim_attributes_2_ptr = P_target_aim_attributes_ptr;

	if (aim_attributes_1.version ^= AIM_ATTRIBUTES_VERSION_1)
	     | (aim_attributes_2.version ^= AIM_ATTRIBUTES_VERSION_1) then do;
	     P_code = error_table_$unimplemented_version;
	     return;				/* one of the structures is not acceptable */
	end;

	call compute_translation ();			/* computes necessary information to compute common ceiling */

	if common_max_level = -1 then do;		/* no levels in common: can't translate */
	     P_code = error_table_$ai_no_common_max;
	     return;
	end;

	unspec (local_aim_template_1) = P_source_aim_authorization;
	unspec (local_aim_template_2) = ""b;

	if local_aim_template_1.level > common_max_level then do;
	     P_code = error_table_$ai_outside_common_range;
	     return;				/* source level too high: can't translate */
	end;

	local_aim_template_2.level = local_aim_template_1.level;
						/* levels stay the same when translating */

	do idx = lbound (category_translation, 1) to hbound (category_translation, 1);
	     if substr (local_aim_template_1.categories, idx, 1) then
		if category_translation (idx, 1) ^= 0 then
		     substr (local_aim_template_2.categories, category_translation (idx, 1), 1) = "1"b;
		else do;				/* can't translate this category */
		     P_code = error_table_$ai_outside_common_range;
		     return;
		end;
	end;

	P_target_aim_authorization = unspec (local_aim_template_2);

	P_code = 0;				/* can only be here on success */

	return;
%page;
/* Computes how to translate between two sets of AIM attributes */

compute_translation:
     procedure ();

dcl  highest_possible_level fixed binary;
dcl  (idx, jdx) fixed binary;

dcl  continue bit (1) aligned;


/* Only sensitivity levels from level-0 up to but no including the first level which does not have the same long and short
   names on both systems may be translated */

	unspec (local_aim_template_1) = aim_attributes_1.access_class_ceiling;
	unspec (local_aim_template_2) = aim_attributes_2.access_class_ceiling;

	common_max_level = -1;

	highest_possible_level = min (local_aim_template_1.level, local_aim_template_2.level);
	continue = "1"b;

	do while (continue);
	     idx = common_max_level + 1;
	     if idx <= highest_possible_level then
		if (aim_attributes_1.levels (idx).long_name = aim_attributes_2.levels (idx).long_name)
		     & (aim_attributes_1.levels (idx).short_name = aim_attributes_2.levels (idx).short_name) then
		     common_max_level = idx;		/* this level is OK */
		else continue = "0"b;		/* this level's names differ on the two systems */
	     else continue = "0"b;			/* this level is too high */
	end;

	if common_max_level = -1 then return;		/* no common levels: can't ever translate */


/* Setup the access category translations: if a category N on system 1 has the same long and short name as category M on
   system 2, then category_translation(N,1) will be set to M and cateogry_translation(M,2) will be set to N */

	category_translation (*, *) = 0;		/* assume nothing translates */

	do idx = lbound (category_translation, 1) to hbound (category_translation, 1);

	     if substr (local_aim_template_1.categories, idx, 1) then do;
						/* only try to translate categories within systems' ceiling */

		continue = "1"b;

		do jdx = lbound (category_translation, 1) to hbound (category_translation, 1) while (continue);
		     if substr (local_aim_template_2.categories, jdx, 1) then
			if (aim_attributes_1.categories (idx).long_name
			     = aim_attributes_2.categories (jdx).long_name)
			     & (aim_attributes_1.categories (idx).short_name
			     = aim_attributes_2.categories (jdx).short_name) then do;
			     category_translation (idx, 1) = jdx;
			     category_translation (jdx, 2) = idx;
			     continue = "0"b;	/* found it */
			end;
		end;
	     end;
	end;

	return;
     end compute_translation;
%page;
%include aim_attributes;
%page;
%include aim_template;
%page;
%include installation_parms;
%page;
%include access_mode_values;

%include terminate_file;

     end inter_multics_aim_;
