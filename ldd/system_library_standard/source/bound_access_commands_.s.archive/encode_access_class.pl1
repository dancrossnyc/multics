/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1985 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION:

	encode_access_class & decode_access_class

	Encode_access_class is an interface to the subroutine
     convert_access_class_$encode.  It either returns or prints an encoded
     version of an access class.  At the time of this writing, its
     main use is for an administrator setting up a data management
     to run at a particular AIM classification or someone looking in
     the pool_manager_ directories.

     USAGE:  eac STR {-ctl_arg}
	or [eac STR {-ctl_arg}]
     where STR is the access class to be encoded and the allowed control
	argument is -access_class (or -acc) which takes a STR value.  Only
	STR or -acc may be used, not both, and not more than once.

	Decode_access_class takes an encoded access class string and
     returns or prints the class in a readable form.  It calls
     convert_access_class_$decode to get the binary form of the class and
     then uses convert_access_class_$to_string to get the string to return
     to the user.

     USAGE:  dac STR
	or [dac STR]
*/

/* HISTORY:

Written by Lee A. Newcomb, 01/18/85.
Modified:
01/23/85 by Lee A. Newcomb:  Fixed to use long names of commands in error
            messages and correct to call ERROR_RETURN instead of com_err_ in
            when no arg is present.
*/

/* format: style2,ll79,ind3,^indprocbody,ifthendo,ifthen,^indnoniterdo,^inddcls,dclind5,idind35,linecom */
encode_access_class:
eac:
   proc () options (variable);

/* START OF DECLARATIONS */
/* Automatic */
dcl  (
     access_class			bit (72) aligned init (""b),
     access_class_string		char (256) init (""),
     arg_idx			fixed bin init (0),
     arg_len			fixed bin (21) init (0),
     arg_list_ptr			ptr init (null),
     arg_ptr			ptr init (null),
     code				fixed bin (35) init (0),
     encoded_access_class		char (15) init (""),
     is_active_function		bit (1) aligned init ("0"b),
     myname			char (19) init ("*code_access_class"),
     number_of_args			fixed bin init (-1),
     return_arg_len			fixed bin (21) init (0),
     return_arg_ptr			ptr init (null),
     sci_ptr			ptr init (null)
     )				automatic;

/* Based */
dcl  arg				char (arg_len) based (arg_ptr),
     return_arg			char (return_arg_len) varying
				based (return_arg_ptr);

/* Builtin */
dcl  (null, rtrim)			builtin;

/* Condition */
dcl  cleanup			condition;

/* Constant */
dcl  (
     ACC_CTL_ARG_LONG		char (13) init ("-access_class"),
     ACC_CTL_ARG_SHORT		char (4) init ("-acc"),
     DAC_NAME			char (19) init ("decode_access_class"),
     DAC_USAGE_MSG			char (23)
				init ("decode_access_class STR"),
     EAC_NAME			char (19) init ("encode_access_class"),
     EAC_USAGE_MSG			char (34)
				init (
				"encode_access_class STR {-ctl_arg}"),
     OPTIONAL_IOA_STRING_NOT_USED	bit (1) aligned init ("0"b),
     OPTIONAL_IOA_STRING_USED		bit (1) aligned init ("1"b),
     SSU_INVOCATION_ERR_MSG		char (49)
				init (
				"Cannot establish standalone subsystem invocation."
				)
     )				internal static options (constant);

/* Entry */
dcl  (
     com_err_			entry options (variable),
     convert_access_class_$decode	entry (bit (72) aligned, char (*)),
     convert_access_class_$encode	entry (bit (72) aligned, char (*)),
     convert_access_class_$from_string	entry (bit (72) aligned, char (*),
				fixed bin (35)),
     convert_access_class_$to_string	entry (bit (72) aligned, char (*),
				fixed bin (35)),
     cu_$arg_list_ptr		entry (ptr),
     get_authorization_		entry () returns (bit (72) aligned),
     ioa_				entry () options (variable),
     requote_string_		entry (char (*)) returns (char (*)),
     ssu_$abort_line		entry () options (variable),
     ssu_$arg_ptr			entry (ptr, fixed bin, ptr,
				fixed bin (21)),
     ssu_$destroy_invocation		entry (ptr),
     ssu_$return_arg		entry (ptr, fixed bin, bit (1) aligned,
				ptr, fixed bin (21)),
     ssu_$standalone_invocation	entry (ptr, char (*), char (*), ptr,
				entry, fixed bin (35))
     )				external;

/* External */

dcl  (
     error_table_$noarg,
     error_table_$too_many_args
     )				fixed bin (35) external;

/* END OF DECLARATIONS */
%page;
/* encode_access_class:			repeat for reader	*/
/* eac:							*/
/*     proc options (variable);				*/

SETUP_EAC_INVOCATION:
   do;
      myname = EAC_NAME;
      on cleanup call FINISH ();

      call cu_$arg_list_ptr (arg_list_ptr);
      call ssu_$standalone_invocation (sci_ptr, myname, "", arg_list_ptr,
	 ABORT_ENTRY, code);
      if code ^= 0 then				/* should be very rare */
         call ERROR_RETURN_FROM_SSU_SETUP (code, myname);
   end SETUP_EAC_INVOCATION;

   call ssu_$return_arg (sci_ptr, number_of_args, is_active_function,
        return_arg_ptr, return_arg_len);

GET_ACCESS_CLASS_TO_ENCODE:
   do;
      if number_of_args = 0 then
         access_class = get_authorization_ ();		/* process' access class */
      else
INTERPRET_ARGS:
         do;
         arg_idx = 1;
         call ssu_$arg_ptr (sci_ptr, arg_idx, arg_ptr, arg_len);
         if arg = ACC_CTL_ARG_LONG | arg = ACC_CTL_ARG_SHORT then
GET_REAL_ACCESS_CLASS_ARG:
	  do;
	  arg_idx = arg_idx + 1;
	  if arg_idx > number_of_args then
	     call ERROR_RETURN (error_table_$noarg, EAC_USAGE_MSG,
		OPTIONAL_IOA_STRING_NOT_USED, "");
	  if arg_idx < number_of_args then
	     call ERROR_RETURN (error_table_$too_many_args, EAC_USAGE_MSG,
		OPTIONAL_IOA_STRING_NOT_USED, "");
	  call ssu_$arg_ptr (sci_ptr, arg_idx, arg_ptr, arg_len);
         end GET_REAL_ACCESS_CLASS_ARG;
         call convert_access_class_$from_string (access_class, arg, code);
         if code ^= 0 then
	  call ERROR_RETURN (code, "Access class string provided: ^a",
	       OPTIONAL_IOA_STRING_USED, arg);

      end INTERPRET_ARGS;
   end GET_ACCESS_CLASS_TO_ENCODE;

   call convert_access_class_$encode (access_class, encoded_access_class);

GET_EAC_RESULT_TO_USER:
   if is_active_function then
      return_arg = encoded_access_class;
   else call ioa_ ("^a", encoded_access_class);

   call RETURN ();

/* end encode_access_class; */
%page;
decode_access_class:
dac:
   entry options (variable);

SETUP_DAC_INVOCATION:
   do;
      myname = DAC_NAME;
      on cleanup call FINISH ();

      call cu_$arg_list_ptr (arg_list_ptr);
      call ssu_$standalone_invocation (sci_ptr, myname, "", arg_list_ptr,
	 ABORT_ENTRY, code);
      if code ^= 0 then				/* should be very rare */
         call ERROR_RETURN_FROM_SSU_SETUP (code, myname);
   end SETUP_DAC_INVOCATION;

GET_ENCODED_ACCESS_CLASS_STRING:
   do;
      call ssu_$return_arg (sci_ptr, number_of_args, is_active_function,
	 return_arg_ptr, return_arg_len);

      if number_of_args = 0 then
         call ERROR_RETURN (error_table_$noarg, DAC_USAGE_MSG,
	    OPTIONAL_IOA_STRING_NOT_USED, "");
      if number_of_args > 1 then
         call ERROR_RETURN (error_table_$too_many_args, DAC_USAGE_MSG,
	    OPTIONAL_IOA_STRING_NOT_USED, "");
      call ssu_$arg_ptr (sci_ptr, 1 /* only one allowed */, arg_ptr, arg_len);
   end GET_ENCODED_ACCESS_CLASS_STRING;

GET_DAC_RESULT:
   do;
      call convert_access_class_$decode (access_class, arg);
      call convert_access_class_$to_string (access_class, access_class_string,
	 code);
      if code ^= 0 then
         call ERROR_RETURN (code,
	    "Provided access class string to decode: ^a.",
	    OPTIONAL_IOA_STRING_USED, arg);
   end GET_DAC_RESULT;

GET_DAC_RESULT_TO_USER:
   if is_active_function then
      return_arg = requote_string_ (rtrim (access_class_string));
   else call ioa_ ("^a", access_class_string);

   call RETURN ();

/* end decode_access_class; */
%page;
MAIN_RETURN:
   return;




RETURN:
   proc ();
   call FINISH ();
   go to MAIN_RETURN;
   end RETURN;





ABORT_ENTRY:
   procedure ();

   call FINISH ();
   go to MAIN_RETURN;

   end ABORT_ENTRY;



FINISH:
   procedure ();

   if sci_ptr ^= null () then
      call ssu_$destroy_invocation (sci_ptr);

   return;
   end FINISH;




ERROR_RETURN:
   proc (er_p_code, er_p_ioa_string, er_p_ioa_optional_arg_given,
        er_p_ioa_optional_arg);

dcl  (
     er_p_code			fixed bin (35),
     er_p_ioa_string		char (*),
     er_p_ioa_optional_arg_given	bit (1) aligned,
     er_p_ioa_optional_arg		char (*)
     )				parameter;


   if er_p_ioa_optional_arg_given then
      call ssu_$abort_line (sci_ptr, er_p_code, er_p_ioa_string,
	 er_p_ioa_optional_arg);
   else call ssu_$abort_line (sci_ptr, er_p_code, er_p_ioa_string);

/* ssu_$abort_line does not return */

   end ERROR_RETURN;




ERROR_RETURN_FROM_SSU_SETUP:
   proc (erfss_p_code, erfss_p_myname);

dcl  (
     erfss_p_code			fixed bin (35),
     erfss_p_myname			char (*)
     )				parameter;

   call com_err_ (erfss_p_code, erfss_p_myname, SSU_INVOCATION_ERR_MSG);

   go to MAIN_RETURN;				/* FINISH skipped since nothing to destroy */

   end ERROR_RETURN_FROM_SSU_SETUP;

   end encode_access_class;
