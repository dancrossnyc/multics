/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


find_common_acl_names_: proc (a_access_name, a_names_ptr, a_datap,			/* input args */
			a_count, a_missing_component, a_already_used, a_code);	/* output args */


/* DECLARATIONS */


/* fixed point */

dcl (
     a_acl_count,
     a_count,
     a_ex_acl_type,
     a_type,
     count init (0),
     i,
     j
     ) fixed bin aligned;

dcl (
     a_code,
     code init (0),
     error_table_$badcall ext,
     error_table_$badstar ext,
     error_table_$out_of_sequence ext
     ) fixed bin (35) aligned;


/* pointers */

dcl (
     a_datap,
     a_names_ptr,
     a_caller_areap,
     names_ptr,
     procp int static init (null)
     ) ptr aligned;


/* bit strings */

dcl (
     a_already_used,
     a_missing_component,
     match_found,
     missing_component init ("0"b)
     ) bit (1) aligned;


/* character strings */

dcl (
     a_access_name
     ) char (*);

dcl (
     a_en,
     component (3),
     component2 (3)
     ) char (32) aligned;

dcl (
     a_dn
     ) char (168) aligned;


/* based structures */

dcl 1 acl (acl_count) aligned based (aclp),
     2 access_name char (32) aligned,
     2 modes bit (real_access_bit_length) aligned,
     2 extended_access bit (extended_access_bit_length) aligned,
     2 reterr fixed bin (35) aligned;

dcl  acl_entry_already_used (acl_count) bit (1) unaligned based (bsp);

dcl 1 data aligned based (a_datap),
     2 aclp pointer,
     2 bsp pointer,
     2 acl_count fixed bin(17),
     2 extended_access_bit_length fixed bin(17),
     2 real_access_bit_length fixed bin(17);

dcl  name_array (acl_count) char (32) aligned based (names_ptr);


/* include files */

% include extended_access_data;


/* builtin functions */

dcl (
     addr,
     index,
     length,
     null,
     substr,
     verify
     ) builtin;


/* entries */

dcl  cu_$ptr_call ext entry
     options (variable);

dcl  hcs_$make_ptr ext entry
    (ptr aligned, char (*) aligned, char (*) aligned, ptr aligned, fixed bin (35) aligned);

/*  */

	a_count = 0;
	names_ptr = a_names_ptr;
	a_already_used = "0"b;
	a_missing_component = "0"b;
	a_code = 0;

	if aclp = null
	then call return (error_table_$out_of_sequence);

	call set_components (a_access_name, component);
	do i = 1 to 3 while (^missing_component);
	     if component (i) = ""
	     then missing_component = "1"b;
	end;

	do i = 1 to acl_count;
	     call set_components (substr (acl (i).access_name, 1, 32), component2);
	     match_found = "1"b;
	     do j = 1 to 3 while (match_found);
		if component (j) ^= ""
		then if component (j) ^= component2 (j)
		then match_found = "0"b;
	     end;
	     if match_found
	     then do;
		if acl_entry_already_used (i)
		then a_already_used = "1"b;
		else
		do;
		     count = count + 1;
		     name_array (count) = acl (i).access_name;
		     acl_entry_already_used (i) = "1"b;
		end;
	     end;
	end;

	if count > 0
	then a_count = count;
	a_missing_component = missing_component;

	go to RETURN;


init:	entry (a_dn, a_en, a_type, a_ex_acl_type, a_caller_areap, a_datap, a_code);

	a_code = 0;
	acl_count = 0;
	aclp = null;
	bsp = null;

	if a_type = 5
	then do;
	     extended_access_bit_length = 36;
	     real_access_bit_length = 36;
	     if a_ex_acl_type < 1 | a_ex_acl_type > typ_count
	     then call return (error_table_$badcall);
	     call hcs_$make_ptr
	     (null, segdata (a_ex_acl_type).gate_name,
	     segdata (a_ex_acl_type).acl_prefix||"acl_list", procp, code);
	     if procp = null
	     then call return (code);
	     acl_count = -1;
	     call cu_$ptr_call (procp, a_dn, a_en, aclp, acl_count, a_caller_areap, code);
	     if code ^= 0
	     then call return (code);
	     do i = 1 to acl_count;
		if acl (i).reterr ^= 0
		then call return (acl (i).reterr);
	     end;
	end;

	else
	call return (error_table_$badcall);

	if code ^= 0
	then call return (code);

	return;


/* ------------------------------------------------------------------------- */
RETURN:	return;

/*  */

/* ------------------ */
/* LEVEL 1 PROCEDURES */
/* ------------------ */

set_components: proc (sc_access_name, sc_component);

dcl (
     sc_dot_count init (0),
     sc_dot_loc (2) init ((2) 0),
     sc_i,
     sc_len
     ) fixed bin aligned;

dcl (
     sc_access_name
     ) char (*);

dcl (
     sc_component (3)
     ) char (32) aligned;


	     do sc_i = 1 to 3;
		sc_component (sc_i) = "";
	     end;

	     if sc_access_name = "."
	     then do;
		sc_component(3) = "*";
		sc_access_name = "..*";
		return;
	     end;

	     sc_len = index (sc_access_name, " ") - 1;
	     if sc_len = -1
	     then sc_len = length (sc_access_name);
	     else if verify(substr(sc_access_name,sc_len+1)," ")^=0  /* blanks inside the name */
		then call return(error_table_$badstar);

	     do sc_i = 1 to sc_len;
		if substr (sc_access_name, sc_i, 1) = "."
		then do;
		     sc_dot_count = sc_dot_count + 1;
		     if sc_dot_count > 2
		     then call return (error_table_$badstar);
		     sc_dot_loc (sc_dot_count) = sc_i;
		end;
	     end;

	     if sc_dot_count = 0
	     then do;
		sc_component (1) = sc_access_name;
		sc_component (2), sc_component (3) = "*";
		substr(sc_access_name,sc_len+1,4) = ".*.*";
	     end;

	     else
	     if sc_dot_count = 1
	     then do;
		if sc_dot_loc (1) = 1
		then do;
		     sc_component (2) = substr (sc_access_name, 2, sc_len-1);
		     sc_component (3) = "*";
		end;
		else
		do;
		     sc_component (1) = substr (sc_access_name, 1, sc_dot_loc (1)-1);
		     if sc_dot_loc (1) < sc_len
		     then sc_component (2) = substr (sc_access_name, sc_dot_loc (1)+1, sc_len-sc_dot_loc (1));
		     sc_component (3) = "*";
		end;
		substr(sc_access_name,sc_len+1,2) = ".*";
	     end;

	     else					/* sc_dot_count = 2 */
	     do;
		if sc_dot_loc (1) ^= 1
		then sc_component (1) = substr (sc_access_name, 1, sc_dot_loc (1)-1);
		if sc_dot_loc (1)+1 < sc_dot_loc (2)
		then sc_component (2) = substr (sc_access_name, sc_dot_loc (1)+1, sc_dot_loc (2)-sc_dot_loc (1)-1);
		if sc_dot_loc (2) < sc_len
		then sc_component (3) = substr (sc_access_name, sc_dot_loc (2)+1, sc_len-sc_dot_loc (2));
	     end;

	     return;

	end set_components;

/*  */
/* ------------------ */
/* LEVEL 2 PROCEDURES */
/* ------------------ */

return:	proc (r_code);

dcl (
     r_code
     ) fixed bin (35) aligned;

	     a_code = r_code;
	     go to RETURN;

	end return;


     end find_common_acl_names_;
