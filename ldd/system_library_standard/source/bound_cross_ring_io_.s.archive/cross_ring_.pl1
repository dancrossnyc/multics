/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* format: style2 */
cross_ring_:
     procedure;
	return;

/* CROSS_RING_ - cross-ring iox attachment.

   This program runs in the outer ring. It attaches the outer ring IOCB to a gate
   into the appropriate inner ring.

   THVV 2/77 
   April 1981:
   Fixed bug whereby inner ring close entrypoint was called instead
   of cross_ring_close entry in this program. --Benson I. Margulies.

   November 1981:
   Fixed to use newer inner/outer ring protocol, cleaned up -- BIM */
/* 10/82 BIM: fixed att_err to use c instead of code uniformly */

/* parameters */

	dcl     iocb_ptr		 ptr;		/* pointer to cross_ring_ iocb */
	dcl     attach_param	 (*) char (*) varying;
						/* param list for attach */
	dcl     com_err_sw		 bit (1);		/* call com_err on error if "1"b */
	dcl     return_code		 fixed bin (35);	/* return error to caller */
	dcl     open_mode		 fixed bin;	/* open mode for open call only */
	dcl     dummy		 bit (1);		/* extend sw for open call only */

/* automatic storage */

	dcl     target_ring		 fixed bin;
	dcl     save_mask		 bit (36) aligned;	/* save ips mask here */
	dcl     code		 fixed bin (35);	/* for error codes */
	dcl     inner_index		 bit (72) aligned;
	dcl     myname		 char (11) static options (constant) init ("cross_ring_");
	dcl     act_iocb_ptr	 ptr;		/* store actual iocb pointer here on most calls */

	dcl     system_free_area	 area based (get_system_free_area_ ());

/* entry variables */

	dcl     cv_dec_check_	 entry (char (*), fixed bin (35)) returns (fixed bin);
	dcl     cu_$level_get	 entry () returns (fixed bin);
	dcl     (
	        hcs_$set_ips_mask,
	        hcs_$reset_ips_mask
	        )			 entry (bit (36) aligned, bit (36) aligned);
	dcl     com_err_		 entry options (variable);
	dcl     sub_err_		 entry () options (variable);
	dcl     get_system_free_area_	 entry () returns (ptr);



	dcl     cross_ring_gates_ptr_	 external static pointer unaligned init (null ());

INIT_GATES:
     procedure () returns (pointer unaligned);
	dcl     gp		 pointer unaligned;

	allocate gates set (gp);
	gp -> gates (*) = null_entry;
	return (gp);
     end INIT_GATES;

null_entry:					/* Used to initialize entry variables to known state */
     entry;
	return;

	dcl     1 gates		 (7) aligned based (cross_ring_gates_ptr_),
		2 dispatch_find_attachment
				 variable entry (char (*), bit (72) aligned, fixed bin (35)),
		2 dispatch_release_attachment
				 variable entry (bit (72) aligned, fixed bin (35)),
		2 dispatch_open	 variable entry (bit (72) aligned, fixed bin, bit (1), fixed bin (35)),
		2 dispatch_close	 variable entry (bit (72) aligned, fixed bin (35)),
		2 dispatch_modes	 variable entry,
		2 dispatch_control	 variable entry,
		2 dispatch_position	 variable entry,
		2 dispatch_put_chars variable entry,
		2 dispatch_get_line	 variable entry,
		2 dispatch_get_chars variable entry,
		2 dispatch_read_length
				 variable entry,
		2 dispatch_seek_key	 variable entry,
		2 dispatch_read_key	 variable entry,
		2 dispatch_write_record
				 variable entry,
		2 dispatch_read_record
				 variable entry,
		2 dispatch_rewrite_record
				 variable entry,
		2 dispatch_delete_record
				 variable entry;



/* Conditions */

	declare (cleanup, area, bad_area_format)
				 condition;

/* external variables */

	dcl     (
	        error_table_$bad_mode,
	        error_table_$not_open,
	        error_table_$smallarg,
	        error_table_$bad_conversion,
	        error_table_$badringno,
	        error_table_$noalloc
	        )			 ext static fixed bin (35);
	dcl     error_table_$bad_arg	 fixed bin (35) ext;
	dcl     error_table_$not_detached
				 external fixed bin (35);
	dcl     error_table_$wrong_no_of_args
				 external fixed bin (35);

/* built in fuctions */

	dcl     (size, hbound, addr, length, null, index, search, substr, ptr, fixed)
				 builtin;

%include cross_ring_attach_data_;

%include iocb;

%include iox_modes;
%include iox_entries;



/* cross_ring_attach entry point to attach cross_ring_ to a switch. sample command call would be:

   io_call attach x cross_ring_ target ringno

   cross_ring_ sets the pointers in the iocb to a gate, dispatch_ which
   crosses into inner ring, and calls a pl1 program cross_ring_ring_io_ to drop validation level and forward.
*/

cross_ring_attach:
     entry (iocb_ptr, attach_param, com_err_sw, return_code);

	if cross_ring_gates_ptr_ = null
	then cross_ring_gates_ptr_ = INIT_GATES ();

	save_mask = ""b;
	attach_data_ptr = null;
	inner_index = ""b;
	target_ring = 0;

	on cleanup call clean_up_attach;

	if hbound (attach_param, 1) ^= 2
	then call att_err (error_table_$wrong_no_of_args, "Usage: cross_ring_ target_switch ringno.");

	target_ring = cv_dec_check_ ((attach_param (2)), code);
	if code ^= 0
	then call att_err (error_table_$bad_conversion, attach_param (2) || " is not a valid integer.");
	if target_ring < 1
	then call att_err (error_table_$smallarg,
		attach_param (2) || " is less than one. Cross Ring I/O to ring zero is not possible.");
	if target_ring > cu_$level_get ()
	then call att_err (error_table_$badringno,
		attach_param (2) || " is not less than or equal to the current validation level.");

/* We initialize only one ring's worth of entry variables because the
   system only provides the gates r1_io_ through r4_io_. We would take
   linkage errors on any others, but the user might have provided them. */

	call init_one_ring (target_ring, return_code);
	if return_code ^= 0
	then call att_err (return_code, "No cross ring I/O available for ring " || attach_param (2));

/* Locate the inner ring switch (which must exist already) */

	call dispatch_find_attachment (target_ring) ((attach_param (1)), inner_index, code);
	if code ^= 0
	then call att_err (code, attach_param (1) || " is not a valid inner ring switch.");

/* Prevent multiple attachment */

	call hcs_$set_ips_mask ("0"b, save_mask);
	if iocb_ptr -> iocb.attach_descrip_ptr ^= null
	then call att_err (error_table_$not_detached, "");


	on area, bad_area_format
	     begin;
		goto NO_ALLOC;
	     end;

	allocate attach_data set (attach_data_ptr) in (system_free_area);

/* fill in iocb with things required by attach */

	iocb_ptr -> iocb.attach_data_ptr = attach_data_ptr;
	iocb_ptr -> iocb.attach_descrip_ptr = addr (attach_data.atd);
	iocb_ptr -> iocb.open = cross_ring_open;
	iocb_ptr -> iocb.detach_iocb = cross_ring_detach;
	iocb_ptr -> iocb.modes = dispatch_modes (target_ring);
	iocb_ptr -> iocb.control = dispatch_control (target_ring);
	attach_data.atd = myname || " " || attach_param (1) || " " || attach_param (2);
	attach_data.inner_index = inner_index;
	attach_data.target_ring = target_ring;

	call iox_$propagate (iocb_ptr);
	call hcs_$reset_ips_mask (save_mask, save_mask);

	return_code = 0;
	return;

NO_ALLOC:
	call att_err (error_table_$noalloc, "Could not allocate space for attach data.");

/* some error occured during cross_ring_attach */

att_err:
     procedure (c, r);
	declare c			 fixed bin (35);
	declare r			 character (*);

	if save_mask ^= ""b
	then call hcs_$reset_ips_mask (save_mask, save_mask);

	if com_err_sw
	then call com_err_ (c, myname, "^a", r);
	else call sub_err_ (c, myname, "c", null (), (0), "^a", r);
	return_code = c;
	go to RETURN;
     end att_err;
RETURN:
	return;

/* entry point to detach cross_ring_ */

cross_ring_detach:
     entry (iocb_ptr, return_code);

	save_mask = ""b;
	on cleanup call clean_up;

	call hcs_$set_ips_mask (""b, save_mask);
	act_iocb_ptr = iocb_ptr -> iocb.actual_iocb_ptr;
	attach_data_ptr = act_iocb_ptr -> iocb.attach_data_ptr;
	inner_index = attach_data.inner_index;
	target_ring = attach_data.target_ring;
	iocb_ptr -> iocb.attach_descrip_ptr = null;
	call iox_$propagate (iocb_ptr);
	call hcs_$reset_ips_mask (save_mask, save_mask);
	call dispatch_release_attachment (target_ring) (inner_index, code);
	return_code = 0;
	return;

/* entry point to open cross_ring_ */

cross_ring_open:
     entry (iocb_ptr, open_mode, dummy, return_code);

	if (open_mode < lbound (iox_modes, 1)) | (open_mode > hbound (iox_modes, 1))
	then do;
		return_code = error_table_$bad_mode;
		return;
	     end;
	save_mask = ""b;
	on cleanup call clean_up;

	if return_code ^= 0
	then return;

	call hcs_$set_ips_mask (""b, save_mask);
	act_iocb_ptr = iocb_ptr -> iocb.actual_iocb_ptr;
	attach_data_ptr = act_iocb_ptr -> iocb.attach_data_ptr;
	target_ring = attach_data.target_ring;

	act_iocb_ptr -> iocb.close = cross_ring_close;	/* close up shop inside too */
	act_iocb_ptr -> iocb.position = dispatch_position (target_ring);
	if (open_mode = Stream_output) | (open_mode = Stream_input_output)
	then act_iocb_ptr -> iocb.put_chars = dispatch_put_chars (target_ring);
	if (open_mode = Stream_input) | (open_mode = Stream_input_output)
	then act_iocb_ptr -> iocb.get_line = dispatch_get_line (target_ring);
	if (open_mode = Stream_input) | (open_mode = Stream_input_output)
	then act_iocb_ptr -> iocb.get_chars = dispatch_get_chars (target_ring);
	if open_mode > Stream_input_output
	then do;
		act_iocb_ptr -> iocb.read_length = dispatch_read_length (target_ring);
		act_iocb_ptr -> iocb.seek_key = dispatch_seek_key (target_ring);
		act_iocb_ptr -> iocb.read_key = dispatch_read_key (target_ring);
		act_iocb_ptr -> iocb.write_record = dispatch_write_record (target_ring);
		act_iocb_ptr -> iocb.read_record = dispatch_read_record (target_ring);
		act_iocb_ptr -> iocb.rewrite_record = dispatch_rewrite_record (target_ring);
		act_iocb_ptr -> iocb.delete_record = dispatch_delete_record (target_ring);
	     end;
	attach_data.open = iox_modes (open_mode);
	attach_data.open_mode = open_mode;
	act_iocb_ptr -> iocb.open_descrip_ptr = addr (attach_data.open);
	inner_index = attach_data.inner_index;
	call iox_$propagate (act_iocb_ptr);
	call hcs_$reset_ips_mask (save_mask, save_mask);

	call dispatch_open (target_ring) (inner_index, open_mode, dummy, return_code);

	return;

/* entry to close cross_ring_ */

cross_ring_close:
     entry (iocb_ptr, return_code);

	save_mask = ""b;
	on cleanup call clean_up;

	call hcs_$set_ips_mask (""b, save_mask);
	act_iocb_ptr = iocb_ptr -> iocb.actual_iocb_ptr;
	act_iocb_ptr -> iocb.open_descrip_ptr = null;
	act_iocb_ptr -> iocb.open = cross_ring_open;
	act_iocb_ptr -> iocb.detach_iocb = cross_ring_detach;
	attach_data_ptr = act_iocb_ptr -> iocb.attach_data_ptr;
	inner_index = attach_data.inner_index;
	target_ring = attach_data.target_ring;
	call iox_$propagate (act_iocb_ptr);
	call hcs_$reset_ips_mask (save_mask, save_mask);

	call dispatch_close (target_ring) (inner_index, return_code);
	if return_code = error_table_$not_open
	then return_code = 0;
	return;

clean_up_attach:
     procedure;
	if inner_index ^= ""b
	then call dispatch_release_attachment (target_ring) (inner_index, (0));
clean_up:
     entry;
	if save_mask ^= ""b
	then call hcs_$reset_ips_mask (save_mask, save_mask);
     end clean_up_attach;

init_one_ring:
     procedure (ring, code);
	declare ring		 fixed bin;
	declare code		 fixed bin (35);
	declare hbound		 builtin;
	declare entrypoints		 (17) character (32)
				 init ("find_attachment", "release_attachment", "open", "close", "modes",
				 "control", "position", "put_chars", "get_line", "get_chars", "read_length",
				 "seek_key", "read_key", "write_record", "read_record", "rewrite_record",
				 "delete_record") internal static options (constant);

	declare 1 segname		 unaligned,
		2 r		 character (1) init ("r"),
		2 N		 picture "9",
		2 io		 character (4) init ("_io_");

/* Warning, the following is marginal (tho probably legal) PL/I */

	declare 1 gates_as_arrays	 (7) aligned based (cross_ring_gates_ptr_),
		2 entries		 (17) entry variable;

	declare ex		 fixed bin;
	declare hcs_$make_entry	 entry (ptr, char (*), char (*), entry, fixed bin (35));

	segname.N = ring;
	code = 0;

	do ex = 1 to hbound (entrypoints, 1);
	     call hcs_$make_entry (null (), string (segname), entrypoints (ex), gates_as_arrays (ring).entries (ex),
		code);
	     if code ^= 0
	     then return;
	end;

     end init_one_ring;
     end cross_ring_;
