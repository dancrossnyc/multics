/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(88-05-16,Huen), approve(88-05-16,MCR7841), audit(88-05-25,RWaters),
     install(88-07-05,MR12.2-1054):
     Fix kermit 15, 16, 17, and 18.
                                                   END HISTORY COMMENTS */


kermit_mode_mgr_: proc;
  
  /********************************************************************/
  /*							*/
  /*n	kermit_mode_mgr_					*/
  /*							*/
  /*d	The mode manager contains the subroutines and commands that	*/
  /*d	are responsible for the maintainance of the two modes	*/
  /*d	databases. A subset of the permanent modes are user-visible	*/
  /*d	and user-settable.					*/
  /*							*/
  /*l	Written:	84-10-15	by Dean Elhard			*/
  /*l     Modified: 86-01-17  by Don Kozlowski - Fix typo in parity	*/
  /*l                         value. (kermit 14)              	*/
  /*l     Modified: 87-06-19  by Don Kozlowski - Move CR and NL       */
  /*l                         constant definitions to include file.   */
  /*l                         (kermit 15)                             */
  /*l	Modified: 87-06-19  by S Huen - Add extended packet support	*/
  /*l               based on D. Kozlowski's version. (kermit 16)      */
  /*							*/
  /********************************************************************/
  
  /* constants */
  
  dcl true		bit (1) static options (constant) init ("1"b);
  dcl false		bit (1) static options (constant) init ("0"b);
  
  dcl Print_all		bit (1) static options (constant) init ("1"b);
  dcl Print_one		bit (1) static options (constant) init ("0"b);
  
  dcl Ascii		char (1) static options (constant) init ("A");
  dcl Binary		char (1) static options (constant) init ("B");
  dcl On			char (1) static options (constant) init ("Y");
  dcl Off			char (1) static options (constant) init ("N");
  dcl Discard		char (1) static options (constant) init ("D");
  dcl Keep		char (1) static options (constant) init ("K");
  dcl None		char (1) static options (constant) init ("N");
  dcl Mark		char (1) static options (constant) init ("M");
  dcl Space		char (1) static options (constant) init ("S");
  dcl Even		char (1) static options (constant) init ("E");
  dcl Odd			char (1) static options (constant) init ("O");
  dcl Accept_eight_bit	char (1) static options (constant) init ("Y");
  dcl No_eight_bit		char (1) static options (constant) init ("N");
  dcl No_repeat		char (1) static options (constant) init (" ");
  dcl Seven_bit		fixed bin static options (constant) init (7);
  dcl Eight_bit		fixed bin static options (constant) init (8);
  
  /* parameters */
  
  dcl A_code		fixed bin (35);
  dcl A_db		fixed bin parameter;
  dcl A_infop		ptr parameter;
  dcl A_sci_ptr		ptr parameter;
  dcl A_selector (*)	fixed bin parameter;
  dcl A_valuep		ptr parameter;
  
  /* procedures */
  
  dcl cv_dec_check_		entry (char(*), fixed bin(35)) 
			    returns(fixed bin(35));
  dcl ioa_		entry() options(variable);
  dcl ioa_$rsnnl		entry() options(variable);
  dcl ssu_$arg_count	entry (ptr, fixed bin);
  dcl ssu_$arg_ptr		entry (ptr, fixed bin, ptr, fixed bin(21));
  dcl ssu_$abort_line	entry() options(variable);
  
  /* external */
  
  dcl error_table_$wrong_no_of_args
			external fixed bin (35);
  dcl kermit_et_$bad_mode_value
			external fixed bin (35);
  dcl kermit_et_$unknown_mode external fixed bin (35);
  
  /* based */
  
  dcl arg			char (argl) based (argp);
  dcl 01 info		aligned like kermit_info based (A_infop);
  dcl 01 temp_modes		aligned like kermit_temp_modes
			     based (info.temp_modesp);
  dcl 01 perm_modes		aligned like kermit_perm_modes
			     based (info.perm_modesp);
  dcl db (1:db_sz)		char (1) unal based (dbp);
  dcl mode_name		char (mnl) based (mnp);
  dcl mode_value		char (mvl) based (mvp);
  dcl value (1:value_sz)	char (1) unal based (A_valuep);
  dcl checkpoint (1:db_sz)	char (1) unal based (ckp);
  
  /* automatic */
  
  dcl argl		fixed bin (21);
  dcl argp		ptr;
  dcl checkpointed		bit (1);
  dcl ckp			ptr;
  dcl dbp			ptr;
  dcl db_sz		fixed bin;
  dcl ec			fixed bin (35);
  dcl i			fixed bin;
  dcl item		fixed bin;
  dcl mnl			fixed bin (21);
  dcl mnp			ptr;
  dcl mode		char (1) unaligned;
  dcl mode2 (1:4)		fixed bin (9) unsigned unaligned;
  dcl mvl			fixed bin (21);
  dcl mvp			ptr;
  dcl nargs		fixed bin;
  dcl select (1:1)		fixed bin;
  dcl select2 (1:4)		fixed bin;
  dcl value_sz		fixed bin;
  
  /* conditions */
  
  dcl cleanup		condition;
  
  /* builtin */
  
  dcl addr                    builtin;
  dcl byte		builtin;
  dcl hbound		builtin;
  dcl index		builtin;
  dcl length		builtin;  
  dcl mod			builtin;
  dcl null		builtin;
  dcl rank		builtin;
  dcl translate		builtin;
  dcl unspec		builtin;

  /* include files */
  

%include kermit_dcls;

%include kermit_info;

%include kermit_mode_info;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */


get: entry (A_sci_ptr, A_infop);
  
  /********************************************************************/
  /*							*/
  /*n	Name:	kermit_mode_mgr_$get		external	*/
  /*i	Input:	sci_ptr, subsystem_info_ptr			*/
  /*f	Function:	looks up the mode name in the list of user	*/
  /*f		visible modes, calls get_modes to get the value,	*/
  /*f		looks up the format of the value for the	*/
  /*f		specified mode and displays it.		*/
  /*o	Output:	none					*/
  /*							*/
  /*l	Written:	84-10-30	by Dean Elhard			*/
  /*							*/
  /********************************************************************/
  
  call ssu_$arg_count (A_sci_ptr, nargs);
  
  /* if no arguments were supplied, display all the modes		*/
  
  if nargs = 0
    then call print_mode (A_infop, Print_all, "");
    else do i = 1 to nargs;
      call ssu_$arg_ptr (A_sci_ptr, i, argp, argl);
      call print_mode (A_infop, Print_one, arg);
    end;
    
  return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */


set: entry (A_sci_ptr, A_infop);
  
  /********************************************************************/
  /*							*/
  /*n	Name:	kermit_mode_mgr_$set		external	*/
  /*i	Input:	sci_ptr, info_ptr				*/
  /*f	Function:	looks up the mode name in the list of		*/
  /*f		user-settable modes, insures that the value is	*/
  /*f		legal for that mode, and calls store_modes to	*/
  /*f		write them into the modes database.		*/
  /*o	Output:	none					*/
  /*							*/
  /*l	Written:	84-10-30	by Dean Elhard			*/
  /*							*/
  /********************************************************************/
  
  call ssu_$arg_count (A_sci_ptr, nargs);
  
  if nargs ^= 2
    then call ssu_$abort_line (A_sci_ptr, error_table_$wrong_no_of_args);
    
  /* get the mode name					*/
  
  call ssu_$arg_ptr (A_sci_ptr, 1, mnp, mnl);
  
  /* get the mode value					*/
  
  call ssu_$arg_ptr (A_sci_ptr, 2, mvp, mvl);
  
  /* try to encode the value based on the mode name		*/
  
  call encode_mode (A_infop, mode_name, select (1), mode_value, mode, ec);
  if ec ^= 0
    then if select (1) = 0
      then call ssu_$abort_line (A_sci_ptr, ec, mode_name);
      else call ssu_$abort_line (A_sci_ptr, ec, mode_value);
  
  return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */


retrieve: entry (A_infop, A_db, A_selector, A_valuep, A_code);
  
  /********************************************************************/
  /*							*/
  /*n	Name:	kermit_mode_mgr_$retrieve		external	*/
  /*i	Input:	info_ptr, db_selector, mode_set_specifier	*/
  /*f	Function:	gets the modes specified by the mode set	*/
  /*f		specifier from the specified mode_info database	*/
  /*f		and places the values into the mode value list	*/
  /*o	Output:	mode_value_list, error_code			*/
  /*							*/
  /*l	Written:	84-10-15	by Dean Elhard			*/
  /*							*/
  /********************************************************************/
  
  /* select the database to be used and get the size		*/
  
  if A_db = Permanent
    then do;
      dbp = addr (perm_modes.mode);
      db_sz = hbound (perm_modes.mode, 1);
    end;
    else do;
      dbp = addr (temp_modes.mode);
      db_sz = hbound (temp_modes.mode, 1);
    end;
  
  A_code = 0;
  value_sz = hbound (A_selector, 1);
  
  /*  special case the Retrieve_all case			*/
  
  if value_sz = 1 & A_selector (1) = 0
    then do;
      value_sz = db_sz;
      value (*) = db (*);
    end;
    
  /* otherwise iterate throught the selectors and copy out the	*/
  /* requested modes into the mode value array			*/
  
    else do i = 1 to value_sz while (A_code = 0);
      item = A_selector (i);
      if item < 1 | item > db_sz
        then A_code = kermit_et_$unknown_mode;
        else value (i) = db (item);
    end;
  
  return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */


store: entry (A_infop, A_db, A_selector, A_valuep, A_code);
  
  /********************************************************************/
  /*							*/
  /*n	Name:	kermit_mode_mgr_$store		external	*/
  /*i	Input:	info_ptr, db_selector, mode_set_specifier,	*/
  /*i		mode_value_list				*/
  /*f	Function:	writes the mode values from the mode value list	*/
  /*f		into the modes specified by the mode set	*/
  /*f		specifier in the database selected by db_selector	*/
  /*o	Output:	error_code				*/
  /*							*/
  /*l	Written:	84-10-15	by Dean Elhard			*/
  /*l	Modified:	84-10-27	by Dean Elhard to add mode validation	*/
  /*l			and checkpointing			*/
  /*							*/
  /********************************************************************/
  
  /* select the database to write the modes to			*/
  
  if A_db = Permanent
    then do;
      dbp = addr (perm_modes.mode);
      db_sz = hbound (perm_modes.mode, 1);
    end;
    else do;
      dbp = addr (temp_modes.mode);
      db_sz = hbound (temp_modes.mode, 1);
    end;
  
  value_sz = hbound (A_selector, 1);
  A_code = 0;
  
  ckp = null;
  checkpointed = false;
  
  /* insure cleanup of checkpoint data on a release		*/
  
  on cleanup begin;
    if ckp ^= null
      then do;
        if checkpointed
	then db (*) = checkpoint (*);
        free checkpoint;
      end;
  end;
  
  /* checkpoint against invalid mode specification		*/
  
  allocate checkpoint;
  
  checkpoint (*) = db (*);
  checkpointed = true;
  
  /* special case the Store_all case				*/
  
  if value_sz = 1 & A_selector (1) = 0
    then do;
      value_sz = db_sz;
      db (*) = value (*);
    end;
    
  /* otherwise iterate throught the selected modes writing the	*/
  /* values from the value array into the modes db		*/
  
    else do i = 1 to value_sz while (A_code = 0);
      item = A_selector (i);
      if item < 1 | item > db_sz
        then A_code = kermit_et_$unknown_mode;
        else db (item) = value (i);
    end;
  
  /* validate that the new modes are legitimate			*/
  
  call validate_modes (A_infop, A_db, A_code);
  
  /* if not, restore the db to it's previous state		*/
  
  if A_code ^= 0
    then db (*) = checkpoint (*);
    
  /* release the checkpoint information				*/
  
  checkpointed = false;
  free checkpoint;
  
  return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */


validate_modes: proc (infop, db, ec);
  
  /********************************************************************/
  /*							*/
  /*n	Name:	validate_modes			internal	*/
  /*i	Input:	info_ptr, db_selector			*/
  /*f	Function:	validates that the modes currently set into the	*/
  /*f		permanent and temporary modes databases are valid	*/
  /*o	Output:	error_code				*/
  /*							*/
  /*l	Written:	84-10-27	by Dean Elhard			*/
  /*l	Modified: 87-06-19  by S. Huen - Change Max_maxl to 1500    */
  /*l		which is the maximum packet length. (kermit 16)   */
  /*							*/
  /********************************************************************/
  
  /* constants */
  
  dcl Min_maxl		fixed bin static options (constant) init (20);
  dcl Max_maxl		fixed bin static options (constant) init (1500);
  
  dcl Min_time		fixed bin static options (constant) init (5);
  dcl Max_time		fixed bin static options (constant) init (20);
  
  dcl Min_eol		fixed bin static options (constant) init (1);
  dcl Max_eol		fixed bin static options (constant) init (31);
  
  dcl Min_ctl_1		fixed bin static options (constant) init (33);
  dcl Max_ctl_1		fixed bin static options (constant) init (62);
  dcl Min_ctl_2		fixed bin static options (constant) init (96);
  dcl Max_ctl_2		fixed bin static options (constant) init (126);
  
  dcl On			fixed bin static options (constant) init (89);
  dcl Off			fixed bin static options (constant) init (78);
  
  dcl No_repeat		fixed bin static options (constant) init (32);
  
  dcl Max_start		fixed bin static options (constant) init (31);
  
  dcl Min_ck_type		fixed bin static options (constant) init (1);
  dcl Max_ck_type		fixed bin static options (constant) init (1);
  
  dcl No_parity		fixed bin static options (constant) init (78);
  dcl Even_parity		fixed bin static options (constant) init (69);
  dcl Odd_parity		fixed bin static options (constant) init (79);
  dcl Space_parity		fixed bin static options (constant) init (83);
  dcl Mark_parity		fixed bin static options (constant) init (77);
  
  dcl Keep_incomplete	fixed bin static options (constant) init (75);
  dcl Discard_incomplete	fixed bin static options (constant) init (68);
  
  dcl Binary		fixed bin static options (constant) init (66);
  dcl Ascii		fixed bin static options (constant) init (65);
  
  dcl Min_retry_threshold	fixed bin static options (constant) init (5);
  dcl Max_retry_threshold	fixed bin static options (constant) init (20);
  
  dcl Seven_bit		fixed bin static options (constant) init (7);
  dcl Eight_bit		fixed bin static options (constant) init (8);
  
  /* parameters */
  
  dcl infop		ptr;
  dcl db			fixed bin;
  dcl ec			fixed bin (35);
  
  /* based */
  
  dcl 01 perm		aligned based (info.perm_modesp),
       02 version		char (8) unaligned,
       02 maxl		fixed bin (8) unaligned,
       02 time		fixed bin (8) unaligned,
       02 npad		fixed bin (8) unaligned,
       02 padc		char (1) unaligned,
       02 eol		fixed bin (9) unsigned unaligned,
       02 qctl		fixed bin (9) unsigned unaligned,
       02 qbin		fixed bin (9) unsigned unaligned,
       02 rept		fixed bin (9) unsigned unaligned,
       02 start		fixed bin (9) unsigned unaligned,
       02 chkt		fixed bin (8) unaligned,
       02 parity		fixed bin (9) unsigned unaligned,
       02 incomplete	fixed bin (9) unsigned unaligned,
       02 file_warning	fixed bin (9) unsigned unaligned,
       02 file_type		fixed bin (9) unsigned unaligned,
       02 retry_threshold	fixed bin (8) unaligned,
       02 line_byte_size	fixed bin (8) unaligned;
  
  dcl 01 temp		aligned based (info.temp_modesp),
       02 version		char (8) unaligned,
       02 i_maxl		fixed bin (8) unaligned,
       02 i_time		fixed bin (8) unaligned,
       02 i_npad		fixed bin (8) unaligned,
       02 i_padc		char (1) unaligned,
       02 i_eol		fixed bin (9) unsigned unaligned,
       02 i_qctl		fixed bin (9) unsigned unaligned,
       02 o_maxl		fixed bin (8) unaligned,
       02 o_time		fixed bin (8) unaligned,
       02 o_npad		fixed bin (8) unaligned,
       02 o_padc		char (1) unaligned,
       02 o_eol		fixed bin (9) unsigned unaligned,
       02 o_qctl		fixed bin (9) unsigned unaligned,
       02 qbin		fixed bin (9) unsigned unaligned,
       02 rept		fixed bin (9) unsigned unaligned,
       02 start		fixed bin (9) unsigned unaligned,
       02 chkt		fixed bin (8) unaligned,
       02 parity		fixed bin (9) unsigned unaligned;
  
  /* automatic */
  
  dcl valid		bit (1);
  
  ec = 0;
  
  /* validate permanent modes					*/
  
  if db = Permanent
    then do;
      valid = (perm.maxl >= Min_maxl) & (perm.maxl <= Max_maxl);
      valid = valid & (perm.time >= Min_time) & (perm.time <= Max_time);
      valid = valid & (perm.eol >= Min_eol) & (perm.eol <= Max_eol);
      valid = valid & (((perm.qctl >= Min_ctl_1) & (perm.qctl <= Max_ctl_1)) |
		  ((perm.qctl >= Min_ctl_2) & (perm.qctl <= Max_ctl_2)));
      valid = valid & (((perm.qbin >= Min_ctl_1) & (perm.qbin <= Max_ctl_1)) |
		   ((perm.qbin >= Min_ctl_2) & (perm.qbin <= Max_ctl_2)) |
		   (perm.qbin = On) | (perm.qbin = Off)) &
		  (perm.qbin ^= perm.qctl);
      valid = valid & (((perm.rept >= Min_ctl_1) & (perm.rept <= Max_ctl_1)) |
		   ((perm.rept >= Min_ctl_2) & (perm.rept <= Max_ctl_2)) |
		   (perm.rept = No_repeat)) &
		  (perm.rept ^= perm.qctl) & (perm.rept ^= perm.qbin);
      valid = valid & (perm.start <= Max_start) & (perm.start ^= perm.eol) &
		  (perm.start ^= CR_fixed);
      valid = valid & (perm.chkt >= Min_ck_type) & (perm.chkt <= Max_ck_type);
      valid = valid & ((perm.parity = No_parity) |
		   (perm.parity = Even_parity) |
		   (perm.parity = Odd_parity) |
		   (perm.parity = Space_parity) |
		   (perm.parity = Mark_parity));
      valid = valid & ((perm.incomplete = Keep_incomplete) |
		   (perm.incomplete = Discard_incomplete));
      valid = valid & ((perm.file_warning = On) | (perm.file_warning = Off));
      valid = valid & ((perm.file_type = Binary) | (perm.file_type = Ascii));
      valid = valid & (perm.retry_threshold >= Min_retry_threshold) &
		  (perm.retry_threshold <= Max_retry_threshold);
      valid = valid & ((perm.line_byte_size = Seven_bit) |
		   (perm.line_byte_size = Eight_bit));
      
    end;
      
  /* validate temporary modes					*/
  
  if db = Temporary
    then do;
      valid = (temp.i_maxl >= Min_maxl) & (temp.i_maxl <= Max_maxl);
      valid = valid & (temp.i_time >= Min_time) & (temp.i_time <= Max_time);
      valid = valid & (temp.i_eol >= Min_eol) & (temp.i_eol <= Max_eol);
      valid = valid & (((temp.i_qctl >= Min_ctl_1) &
		    (temp.i_qctl <= Max_ctl_1)) |
		   ((temp.i_qctl >= Min_ctl_2) &
		    (temp.i_qctl <= Max_ctl_2)));
      valid = valid & (temp.o_maxl >= Min_maxl) & (temp.o_maxl <= Max_maxl);
      valid = valid & (temp.o_time >= Min_time) & (temp.o_time <= Max_time);
      valid = valid & (temp.o_eol >= Min_eol) & (temp.o_eol <= Max_eol);
      valid = valid & (((temp.o_qctl >= Min_ctl_1) &
		    (temp.o_qctl <= Max_ctl_1)) |
		   ((temp.o_qctl >= Min_ctl_2) &
		    (temp.o_qctl <= Max_ctl_2)));
      valid = valid & (((temp.qbin >= Min_ctl_1) & (temp.qbin <= Max_ctl_1)) |
		   ((temp.qbin >= Min_ctl_2) & (temp.qbin <= Max_ctl_2)) |
		   (temp.qbin = On) | (temp.qbin = Off)) &
		  (temp.qbin ^= temp.i_qctl) & (temp.qbin ^= temp.o_qctl);
      valid = valid & (((temp.rept >= Min_ctl_1) & (temp.rept <= Max_ctl_1)) |
		   ((temp.rept >= Min_ctl_2) & (temp.rept <= Max_ctl_2)) |
		   (temp.rept = No_repeat)) &
		  (temp.rept ^= temp.i_qctl) &
		  (temp.rept ^= temp.o_qctl) &
		  (temp.rept ^= temp.qbin);
      valid = valid & (temp.start <= Max_start) &
		  (temp.start ^= temp.i_eol) &
		  (temp.start ^= temp.o_eol) &
		  (temp.start ^= CR_fixed);
      valid = valid & (temp.chkt >= Min_ck_type) & (temp.chkt <= Max_ck_type);
      valid = valid & ((temp.parity = No_parity) |
		   (temp.parity = Even_parity) |
		   (temp.parity = Odd_parity) |
		   (temp.parity = Space_parity) |
		   (temp.parity = Mark_parity));
    end;
    
  if ^valid
    then ec = kermit_et_$bad_mode_value;
  
end validate_modes;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */


print_mode: proc (infop, all_sw, mode_name);
  
  /********************************************************************/
  /*							*/
  /*n	Name:	print_mode			internal	*/
  /*i	Input:	info_ptr, all_switch, mode_name		*/
  /*f	Function:	prints out the value of a given mode or of all	*/
  /*f		the kermit user visible modes			*/
  /*o	Output:	none					*/
  /*							*/
  /*l	Written:	84-10-30	by Dean Elhard			*/
  /*							*/
  /********************************************************************/
  
  /* parameters */
  
  dcl infop		ptr;
  dcl all_sw		bit (1);
  dcl mode_name		char (*);
  
  /* based */
  
  dcl 01 info		aligned like kermit_info based (infop);
  
  /* automatic */
  
  dcl chr			char (1) unaligned;
  dcl chrp		ptr;
  dcl found		bit (1);
  dcl num (1:4)		fixed bin (8) unaligned;
  dcl num2		fixed bin unaligned;
  dcl nump		ptr;
  dcl select (1:1)		fixed bin;
  dcl string		char (3) varying;
  
  found = false;
  chrp = addr (chr);
  nump = addr (num);
  
  /* display the value of the line_byte_size mode			*/
  
  if mode_name = "line_byte_size" | all_sw
    then do;
      found = true;
      select (1) = Line_byte_size;
      call kermit_mode_mgr_$retrieve (infop, Permanent, select, nump, ec);
      call ioa_ ("Line byte size   = ^d bit", num (1));
    end;
    
  /* display the value of the file_type mode			*/
  
  if mode_name = "file_type" | all_sw
    then do;
      found = true;
      select (1) = File_type;
      call kermit_mode_mgr_$retrieve (infop, Permanent, select, chrp, ec);
      call ioa_ ("File type        = ^[binary^;ascii^]", (chr = Binary));
    end;
    
  /* display the value of the file_warning mode			*/
  
  if mode_name = "file_warning" | all_sw
    then do;
      found = true;
      select (1) = File_warning;
      call kermit_mode_mgr_$retrieve (infop, Permanent, select, chrp, ec);
      call ioa_ ("File warning     = ^[on^;off^]", (chr = On));
    end;
    
  /* display the value of the incomplete mode			*/
  
  if mode_name = "incomplete" | all_sw
    then do;
      found = true;
      select (1) = Incomplete;
      call kermit_mode_mgr_$retrieve (infop, Permanent, select, chrp, ec);
      call ioa_ ("Incomplete       = ^[keep^;discard^]", (chr = Keep));
    end;
    
  /* display the value of the control_prefix character		*/
  
  if mode_name = "control_prefix" | mode_name = "cp" | all_sw
    then do;
      found = true;
      select (1) = Quote_char;
      call kermit_mode_mgr_$retrieve (infop, Permanent, select, chrp, ec);
      call ioa_ ("Control prefix   = ""^a""", chr);
    end;
    
  /* display the value of the eight_bit_prefix character		*/
  
  if mode_name = "eight_bit_prefix" | mode_name = "ebp" | all_sw
    then do;
      found = true;
      select (1) = Eight_bit_char;
      call kermit_mode_mgr_$retrieve (infop, Permanent, select, chrp, ec);
      call ioa_ ("Eight bit prefix = ^[""^a""^;off^s^;From remote^s^]",
		1+index (No_eight_bit || Accept_eight_bit, chr), chr);
    end;
    
  /* display the value of the repeat_prefix character		*/
  
  if mode_name = "repeat_prefix" | mode_name = "rp" | all_sw
    then do;
      found = true;
      select (1) = Repeat_char;
      call kermit_mode_mgr_$retrieve (infop, Permanent, select, chrp, ec);
      call ioa_ ("Repeat prefix    = ^[off^s^;""^a""^]",
		(chr = No_repeat), chr);
    end;
    
  /* dispaly the value of the start_of_packet character		*/
  
  if mode_name = "start_of_packet" | mode_name = "sop" | all_sw
    then do;
      found = true;
      select (1) = Start_char;
      call kermit_mode_mgr_$retrieve (infop, Permanent, select, chrp, ec);
      
  /* special encoding to insure \NNN display format		*/
      
      call ioa_$rsnnl ("^3o", string, 3, rank (chr));
      string = translate (string, "0", " ");
      call ioa_ ("Start of packet  = ""\^a""", string);
    end;
    
  /* display the value of the end_of_packet character		*/
  
  if mode_name = "end_of_packet" | mode_name = "eop" | all_sw
    then do;
      found = true;
      select (1) = Eol_char;
      call kermit_mode_mgr_$retrieve (infop, Permanent, select, chrp, ec);
      
  /* special encoding to insure \NNN format			*/
      
      call ioa_$rsnnl ("^3o", string, 3, rank (chr));
      string = translate (string, "0", " ");
      call ioa_ ("End of packet    = ""\^a""",string);
    end;
    
  /* display the value of the parity mode			*/
  
  if mode_name = "parity" | all_sw
    then do;
      found = true;
      select (1) = Parity;
      call kermit_mode_mgr_$retrieve (infop, Permanent, select, chrp, ec);
      call ioa_ ("Parity           = ^[none^;mark^;space^;even^;odd^]",
		index ("NMSEO", chr));
    end;
    
  /* display the value of the packet_length mode			*/
  
  if mode_name = "packet_length" | mode_name = "pl" | all_sw
    then do;
      found = true;
      select2 (1) = Maxl;
      select2 (2) = Capabilities;
      select2 (3) = Max_len_ext_1;
      select2 (4) = Max_len_ext_2;
      call kermit_mode_mgr_$retrieve (infop, Permanent, select2, nump, ec);
      if num (1) < 94
	 then call ioa_ ("Packet length    = ^d", num (1));
      else if num(1) = 94 
	 then do;
	      num2 = (num (3) * 95) + num (4);
	      if unspec (num (2)) & Ext_Headers
		 then call ioa_ ("Packet length    = ^d", num2);
	      else call ioa_ ("Packet length    = ^d", num (1));
	      end;
    end;
    
  /* display the value of the retry_threshold mode		*/
  
  if mode_name = "retry_threshold" | mode_name = "rt" | all_sw
    then do;
      found = true;
      select (1) = Retry_threshold;
      call kermit_mode_mgr_$retrieve (infop, Permanent, select, nump, ec);
      call ioa_ ("Retry threshold  = ^d", num (1));
    end;
    
  /* display the value of the timeout mode			*/
  
  if mode_name = "timeout" | all_sw
    then do;
      found = true;
      select (1) = Timeout;
      call kermit_mode_mgr_$retrieve (infop, Permanent, select, nump, ec);
      call ioa_ ("Timeout          = ^d", num (1));
    end;
    
  /* if no matching mode name was found then abort the command	*/
  
  if ^found
    then call ssu_$abort_line (info.sci_ptr, kermit_et_$unknown_mode);
    
end print_mode;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */


encode_mode: proc (infop, name, index, value, encoded, ec);
  
  /********************************************************************/
  /*							*/
  /*n	Name:	encode_mode			internal	*/
  /*i	Input:	info_ptr, mode_name, mode_value		*/
  /*f	Function:	Given a mode name and value, determines the index	*/
  /*f		for the specified mode and the encoded value for	*/
  /*f		the mode given				*/
  /*o	Output:	mode_index, encoded_value, error_code		*/
  /*							*/
  /*l	Written:	84-10-30	by Dean Elhard			*/
  /*l	Modified: 86-01-31  by Don Kozlowki fix typo in odd parity	*/
  /*							*/
  /********************************************************************/
  
  /* parameters */
  
  dcl infop		ptr;
  dcl name		char (*);
  dcl index		fixed bin;
  dcl value		char (*);
  dcl encoded		char (1);
  dcl ec			fixed bin (35);
  
  /* constants */
  
  dcl valid_modes (1:22)	char (16) varying static options (constant)
			     init ("control_prefix",
				 "cp",
				 "eight_bit_prefix",
				 "ebp",
				 "end_of_packet",
				 "eop",
				 "file_type",
				 "file_warning",
				 "incomplete",
				 "line_byte_size",
				 "packet_length",
				 "pl",
				 "parity",
				 "repeat_prefix",
				 "rp",
				 "retry_threshold",
				 "rt",
				 "start_of_packet",
				 "sop",
				 "timeout",
				 "window_size",
				 "ws");
  
  /* automatic */
  
  dcl num			fixed bin (35);
  dcl i			fixed bin;
  
  index = 0;
  ec = 0;
  
  /* scan the list of user-visible mode names for the name given	*/
  
  do i = 1 to hbound (valid_modes, 1) while (index = 0);
    if valid_modes (i) = name
      then index = i;
  end;
  
  /* if not found, return with an appropriate error code		*/
  
  if index = 0
    then do;
      ec = kermit_et_$unknown_mode;
      return;
    end;
    
  /* now go process the value encoding appropriately for the mode	*/
  
  goto MODE (index);

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */


MODE (1):
MODE (2):		/* control prefix */
  
  /* the control prefix must be a single character, illegal chars are	*/
  /* trapped when the mode is stored				*/
  
  if length (value) ^= 1
    then ec = kermit_et_$bad_mode_value;
    else mode = value;
  
  /* set the index to the correct database index			*/
  
  select (1) = Quote_char;
  goto DONE;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */


MODE (3):
MODE (4):		/* eight bit prefix */
  
  /* the values "on" and "off" are translated into "Y" and "N"	*/
  /* respectively, otherwise, a single character is expected.	*/
  /* Illegal values are trapped when the mode is stored.		*/
  
  if value = "on"
    then mode = On;
  else if value = "off"
    then mode = Off;
  else if length (value) ^= 1
    then ec = kermit_et_$bad_mode_value;
    else mode = value;
  
  /* set the index to the correct database index			*/
  
  select (1) = Eight_bit_char;
  goto DONE;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */


MODE (5):
MODE (6):		/* end of packet */
  
  /* any single character is a valid encoding. Illegal characters	*/
  /* are trapped when the store is attempted.			*/
  
  if length (value) ^= 1
    then ec = kermit_et_$bad_mode_value;
    else mode = value;
  
  /* set the index to the correct database index			*/
  
  select (1) = Eol_char;
  goto DONE;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */


MODE (7):		/* file type */
  
  /* Two legal values are permitted.  "binary" and "ascii"		*/
  
  if value = "binary"
    then mode = Binary;
  else if value = "ascii"
    then mode = Ascii;
    else ec = kermit_et_$bad_mode_value;
  
  /* set the index to the correct database index			*/
  
  select (1) = File_type;
  goto DONE;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */


MODE (8):		/* file warning */
  
  /* file warning has two legal encodings, "on" and "off"		*/
  
  if value = "on"
    then mode = On;
  else if value = "off"
    then mode = Off;
    else ec = kermit_et_$bad_mode_value;
  
  /* set the index to the correct database index			*/
  
  select (1) = File_warning;
  goto DONE;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */


MODE (9):		/* incomplete */
  
  /* incomplete has two legal encodings, "on" and "off"		*/
  
  if value = "keep"
    then mode = Keep;
  else if value = "discard"
    then mode = Discard;
    else ec = kermit_et_$bad_mode_value;
  
  /* set the index to the correct database index			*/
  
  select (1) = Incomplete;
  goto DONE;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */


MODE (10):	/* line byte size */
  
  /* line byte size must be either 7 or 8			*/
  
  if value = "7bit" | value = "7"
    then mode = byte (Seven_bit);
  else if value = "8bit" | value = "8"
    then mode = byte (Eight_bit);
    else ec = kermit_et_$bad_mode_value;
  
  /* set the index to the correct data base index			*/
  
  select (1) = Line_byte_size;
  goto DONE;
  
  
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */


MODE (11):
MODE (12):	/* packet length */
  
  /* packet length must be a valid numeric value. illegal values	*/
  /* are trapped when the store is attempted.			*/
  
  num = cv_dec_check_ (value, ec);
  
  /* make sure the value supplied can be encoded in nine bits	*/

  
  if (ec ^= 0) & (num >= 0) & (num < 1100)
    then ec = kermit_et_$bad_mode_value;
    else do;
  
  /* set the index to the correct database index			*/

         select (1) = Capabilities;
         call kermit_mode_mgr_$retrieve (infop, Permanent, select, addr (mode), ec);
         if num > 1500   /* Packet length exceeds the maximum */
                then do;
                     call ioa_ ("kermit (set): Mode value exceeds 1500 which is the maximum packet length.");
                     ec = kermit_et_$bad_mode_value;
                     call ssu_$abort_line (A_sci_ptr, ec, mode_value);
                     return;
                end;
         else if num > 94     /* Extended packets requested */
	    then unspec (mode) = unspec (mode) | Ext_Headers;
         else unspec (mode) = unspec (mode) & ^Ext_Headers;
         select2 (1) = Maxl;
         select2 (2) = Capabilities;
         select2 (3) = Max_len_ext_1;
         select2 (4) = Max_len_ext_2;

         mode2 (1) = min (num, 94);
         unspec (mode2 (2)) = unspec (mode);
         mode2 (3) = num / 95;
         mode2 (4) = mod(num, 95);
         call kermit_mode_mgr_$store (A_infop, Permanent, select2, addr (mode2), ec);		   

   end;
   if ec ^= 0
       then call ssu_$abort_line (A_sci_ptr, ec, mode_value);
   return;
   
  

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */


MODE (13):	/* parity */
  
  /* parity can have 5 values: "none", "space", "mark", "even", "odd"	*/
  
  if value = "none"
    then mode = None;
  else if value = "space"
    then mode = Space;
  else if value = "mark"
    then mode = Mark;
  else if value = "even"
    then mode = Even;
  else if value = "odd"
    then mode = Odd;
    else ec = kermit_et_$bad_mode_value;
  
  /* set the index to the correct database index			*/
  
  select (1) = Parity;
  goto DONE;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */


MODE (14):
MODE (15):	/* repeat prefix */
  
  /* the repeat prefix can be "off", or a single character value.	*/
  /* illegal characters are trapped when the store is attempted	*/
  
  if value = "off"
    then mode = No_repeat;
  else if length (value) ^= 1
    then ec = kermit_et_$bad_mode_value;
    else mode = value;
  
  /* set the index to the correct database index			*/
  
  select (1) = Repeat_char;
  goto DONE;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */


MODE (16):
MODE (17):	/* retry threshold */
  
  /* retry threshold must be a valid numeric encoding. Illegal values	*/
  /* are trapped when the store is attempted.			*/
  
  num = cv_dec_check_ (value, ec);
  
  /* make sure the value supplied can be encoded in nine bits	*/
  
  if (ec ^= 0) & (num >= 0) & (num < 512)
    then ec = kermit_et_$bad_mode_value;
    else mode = byte (num);
  
  /* set the index to the correct database index			*/
  
  select (1) = Retry_threshold;
  goto DONE;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */


MODE (18):
MODE (19):	/* start of packet */
  
  /* the start_of_packet character must be a single character.	*/
  /* illegal values are trapped when the store is attempted.	*/
  
  if length (value) ^= 1
    then ec = kermit_et_$bad_mode_value;
    else mode = value;
  
  /* set the index to the correct database index			*/
  
  select (1) = Start_char;
  goto DONE;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */


MODE (20):	/* timeout */
  
  /* timeout must be a valid numeric encoding.  Illegal values are	*/
  /* trapped when the store is attempted			*/
  
  num = cv_dec_check_ (value, ec);
  
  /* make sure the value supplied can be encoded in nine bits	*/
  
  if (ec ^= 0) & (num >= 0) & (num < 512)
    then ec = kermit_et_$bad_mode_value;
    else mode = byte (num);
  
  /* set the index to the correct database index			*/
  
  select (1) = Timeout;
  goto DONE;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */


MODE (21):	/* window size */
MODE (22):	/* window size */
  
  /* The only currently supported window size is one (1)	*/
  
  num = cv_dec_check_ (value, ec);
  
  if (ec ^= 0) & (num ^= 1)
    then ec = kermit_et_$bad_mode_value;
    else mode = byte (num);
  
  /* set the index to the correct database index			*/
  
  select (1) = Window_size;
  goto DONE;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

DONE:
  /* if we could encode it, try to store it in the modes db		*/
  
  call kermit_mode_mgr_$store (A_infop, Permanent, select, addr (mode), ec);
  if ec ^= 0
    then call ssu_$abort_line (A_sci_ptr, ec, mode_value);


  return;

end encode_mode;

end kermit_mode_mgr_;
