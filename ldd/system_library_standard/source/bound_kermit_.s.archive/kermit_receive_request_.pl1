/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   *********************************************************** */
kermit_receive_request_: proc (kermit_scip, infop);

/**********************************************************************/
/*							*/
/*n	Name:	kermit_receive_request_		external	*/
/*i 	Input:	kermit_scip, infop				*/
/*f 	Function: Extracts the filename from the		*/
/*f		request line. Sets up the communications 	*/
/*f		environment for file transfer. 		*/
/*f 		Calls receive_from_remote_ to receive the files.	*/
/*o 	Output:	none					*/
/*							*/
/*l	Written:	84-10-27	by Maureen Mallmes			*/
/*l	Modified:	85-01-17	by Maureen Mallmes to detect invalid	*/
/*l			control arguments.  See problem number	*/
/*l			3 in the kermit error list.		*/
/*l	     		Modified to disallow starnames and	*/
/*l			archive components for the local file.	*/
/*							*/
/**********************************************************************/



/*  automatic  */

	dcl     arg_idx		 fixed binary;
	dcl     arg_lth		 fixed binary (21);
	dcl     arg_ptr		 ptr;
	dcl     argument		 character (arg_lth) based (arg_ptr);
	dcl     argument_count	 fixed bin;
	dcl     01 cl_info_struc	 aligned,
		02 resetread	 bit (1) unal,
		02 mbz		 bit (35) unal;
	dcl     code		 fixed bin (35);
	dcl     dname		 char (168);
	dcl     ename		 char (32);
	dcl     file_sw		 bit (1);
	dcl     first_filename	 char (168);
	dcl     files_received	 fixed bin;
	dcl     infop		 ptr;
	dcl     initial_seq_n	 fixed bin;
	dcl     initial_state	 fixed bin;
	dcl     kermit_scip		 ptr;
	dcl     transfer_modes_set	 bit (1);

/*  constants  */

	dcl     False		 bit (1) internal static options (constant) init ("0"b);
	dcl     Rec_init		 fixed bin internal static options (constant) init (0);
	dcl     Five_seconds	 fixed bin (71) internal static options (constant) init (5);
	dcl     True		 bit (1) internal static options (constant) init ("1"b);

/*  external  */

	dcl     error_table_$badopt	 fixed bin (35) ext static;
	dcl     error_table_$nostars	 fixed bin (35) ext static;
	dcl     error_table_$pathlong	 fixed bin (35) ext static;
	dcl     error_table_$too_many_args fixed bin (35) ext static;

/*  builtin  */

	dcl     index		 builtin;

/*  procedures  */

	dcl     check_star_name_$entry entry (char (*), fixed bin (35));
	dcl     continue_to_signal_	 entry (fixed bin (35));
	dcl     cu_$cl		 entry (1 aligned, 2 bit (1) unal, 2 bit (35) unal);
	dcl     expand_pathname_	 entry (char (*), char (*), char (*), fixed bin (35));
	dcl     ioa_		 entry () options (variable);
	dcl     ssu_$abort_line	 entry () options (variable);
	dcl     ssu_$arg_count	 entry (ptr, fixed bin);
	dcl     ssu_$arg_ptr	 entry (ptr, fixed bin, ptr, fixed bin (21));
	dcl     ssu_$get_request_name	 entry (ptr) returns (char (32));
	dcl     timer_manager_$sleep	 entry (fixed bin (71), bit (2));

/*  Conditions  */

	dcl     cleanup		 condition;
	dcl     quit		 condition;

/*  Include files  */

%include kermit_dcls;

%include kermit_info;


/*  initialize receive_request_data  */
	code = 0;
	first_filename = " ";
	file_sw = False;
	transfer_modes_set = False;
	cl_info_struc.resetread = True;
	cl_info_struc.mbz = False;
	initial_state = Rec_init;
	initial_seq_n = 0;


/*  Handlers  */
	on quit begin;
		if transfer_modes_set then do;
						/*  Reset the modes for user input and output  */
			call kermit_comm_mgr_$reset_line_modes (infop, code);
			transfer_modes_set = False;
						/*  Pass control  */
			call cu_$cl (cl_info_struc);
						/*  Back (restart) so set the modes for file transfer  */
			call kermit_comm_mgr_$set_line_modes (infop, code);
			transfer_modes_set = True;
		     end;
		else call continue_to_signal_ (0);	/* do nothing  */
	     end;


	on cleanup call receive_request_cleanup;

	call ssu_$arg_count (kermit_scip, argument_count);

/*  get the first and only user-supplied filename, if given  */
	do arg_idx = 1 to argument_count;
	     call ssu_$arg_ptr (kermit_scip, arg_idx, arg_ptr, arg_lth);

	     if index (argument, "-") ^= 1 then do;
		     if ^file_sw then do;
			     call expand_pathname_ (argument, dname, ename, code);
			     if code = 0 then do;
				     call check_star_name_$entry (ename, code);
				     if code ^= 0 & code < 3 then code = error_table_$nostars;
				end;

			     if code ^= 0 then call ssu_$abort_line (kermit_scip, code, "^a", argument);

			     first_filename = argument;
			     file_sw = True;
			end;

		     else call ssu_$abort_line (kermit_scip, error_table_$too_many_args, "^/Usage: ^a {path}", ssu_$get_request_name (kermit_scip));
		end;

	     else call ssu_$abort_line (kermit_scip, error_table_$badopt, "^a", argument);
	end;

/*  ...greet the user  */
	call ioa_ ("^/Receiving...");


/*  Get ready to receive the segment(s)  */
/*  Give the user some time get back to remote  */
	call timer_manager_$sleep (Five_seconds, "11"b);

/*  Initialize the temporary modes data base  */
	call kermit_xfer_modes_$init (infop, code);
						/*  this should never happen  */
	if code ^= 0 then call ssu_$abort_line (kermit_scip, code);

/*  Set the tty_ modes  */
	call kermit_comm_mgr_$set_line_modes (infop, code);
	if code ^= 0 then call ssu_$abort_line (kermit_scip, code, "^/^a", "Unable to set line modes for file transfer");
	transfer_modes_set = True;

	call kermit_receive_$receive_from_remote (infop, initial_state, initial_seq_n, first_filename, file_sw, files_received, code);

	call kermit_comm_mgr_$reset_line_modes (infop, (0));
	transfer_modes_set = False;

	if code ^= 0 then
	     call ssu_$abort_line (kermit_scip, code, "^/^d files received.", files_received);


	call ioa_ ("^/Transaction completed: ^d file(s) received.", files_received);
	return;


/*  Reset the line modes and free filenames storage */
receive_request_cleanup:
     proc;

	if transfer_modes_set then call kermit_comm_mgr_$reset_line_modes (infop, code);
	transfer_modes_set = False;
	return;
     end receive_request_cleanup;

     end kermit_receive_request_;
