/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1990   *
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(88-05-16,Huen), approve(88-05-16,MCR7841), audit(88-05-25,RWaters),
     install(88-07-05,MR12.2-1054):
     Fix kermit 15, 16, 17, and 18.
  2) change(89-01-02,Huen), approve(89-01-02,MCR8027), audit(89-01-25,Lee),
     install(89-03-01,MR12.3-1020):
     Fix kermit bugs: PC_File_Transfer 18, 20, 23, 24.
  3) change(90-09-20,Huen), approve(90-09-20,MCR8203), audit(90-09-25,Gray),
     install(90-10-14,MR12.4-1039):
     phx21339 (pc_25): Change version to 1.4
                                                   END HISTORY COMMENTS */


kermit: proc;
  
  /********************************************************************/
  /*							*/
  /*n	Name:	kermit				external	*/
  /*i	Input:	multics command line arguments		*/
  /*f	Function:	sets up the subsystem environment and call ssu_	*/
  /*f		to execute the kermit requests.		*/
  /*o	Ouptut:	none					*/
  /*							*/
  /*l	Written:	84-10-12	by Dean Elhard			*/
  /*l	Modified: 86-01-16  by Don Kozlowski - Change subsystem     */
  /*l			version to 1.1 . (kermit 13)		*/
  /*l     Modified: 86-10-09  by Don Kozlowski - Do not set "server"	*/
  /*l			and "transfer_modes_set" flags until	*/
  /*l			it is in server mode. (kermit 13)	*/
  /*l	Modified: 86-06-12  by Don Kozlowski - Change subsystem     */
  /*l			version to 1.2 . (kermit 16)		*/
  /*l	Modified:87-07-22	by Don Kozlowski - Use vfile for debug	*/
  /*l			to allow for msf traces (kermit 17)	*/
  /*l     Modified: 89-01-02  by S. Huen - Change subsystem version   */
  /*l			to 1.3. (PC_18, 20, 23, 24)    	*/
  /*l     Modified: 90-09-24  by S. Huen - Change subsystem version   */
  /*l			to 1.4. (PC_25)                         */
  /*							*/
  /********************************************************************/
  
  /* constants */
  
  dcl true		bit (1) static options (constant) init ("1"b);
  dcl false		bit (1) static options (constant) init ("0"b);
  
  dcl Subsystem_Name	char (6) static options (constant)
			     init ("kermit");
  dcl Subsystem_Version	char (3) static options (constant)
			     init ("1.4");
  dcl Subsystem_Info_Dir	char (168) static options (constant)
			     init (">doc>subsystem>kermit");
  dcl Default_prompt	char (29) static options (constant)
			     init ("^/Multics-Kermit^[ (^d)^]:^2x");
  
  /* procedures */
  
  dcl com_err_		entry() options(variable);
  dcl cu_$arg_count_rel	entry (fixed bin, ptr, fixed bin(35));
  dcl cu_$arg_list_ptr	entry (ptr);
  dcl cu_$arg_ptr_rel	entry (fixed bin, ptr, fixed bin(21),
			     fixed bin(35), ptr);
  dcl expand_pathname_	entry (char(*), char(*), char(*),
			     fixed bin(35));
  dcl expand_pathname_$add_suffix
			entry (char(*), char(*), char(*), char(*),
			     fixed bin(35));
  dcl get_system_free_area_	entry() returns(ptr);
  dcl initiate_file_	entry (char(*), char(*), bit(*), ptr,
			     fixed bin(24), fixed bin(35));
  dcl iox_$attach_name	entry (char (*), ptr, char (*), ptr, fixed bin (35));
  dcl iox_$close		entry (ptr, fixed bin (35));
  dcl iox_$detach_iocb	entry (ptr, fixed bin (35));
  dcl iox_$look_iocb	entry (char(*), ptr, fixed bin(35));
  dcl iox_$open		entry (ptr, fixed bin, bit (1) aligned, fixed bin (35));
  dcl pathname_		entry (char(*), char(*)) returns(char(168));
  dcl ssu_$add_request_table	entry (ptr, ptr, fixed bin, fixed bin(35));
  dcl ssu_$create_invocation	entry (char(*), char(*), ptr, ptr, char(*),
			     ptr, fixed bin(35));
  dcl ssu_$destroy_invocation entry (ptr);
  dcl ssu_$execute_start_up	entry () options (variable);
  dcl ssu_$execute_string	entry (ptr, char(*), fixed bin(35));
  dcl ssu_$get_temp_segment	entry (ptr, char(*), ptr);
  dcl ssu_$listen		entry (ptr, ptr, fixed bin(35));
  dcl ssu_$release_temp_segment
			entry (ptr, ptr);
  dcl ssu_$set_abbrev_info	entry (ptr, ptr, ptr, bit(1) aligned);
  dcl ssu_$set_prompt	entry (ptr, char(64) var);
  dcl ssu_$set_prompt_mode	entry (ptr, bit(*));
  dcl unique_chars_		entry (bit (*)) returns (char (15));  

  /* external */
  
  dcl error_table_$badopt	external fixed bin (35);
  dcl error_table_$noarg	external fixed bin (35);
  dcl error_table_$noentry	external fixed bin (35);
  dcl iox_$user_input	ptr ext static;
  dcl iox_$user_io		ptr ext static;
  dcl kermit_requests_$requests
			bit(36) aligned external;
  dcl ssu_et_$subsystem_aborted
			external fixed bin (35);
  dcl ssu_request_tables_$standard_requests
			bit(36) aligned external;
  
  /* structures */
  
  dcl 01 info		aligned like kermit_info;
  dcl 01 kermit_args	aligned,
       02 flags		aligned,
        03 request_loop	bit (1) unaligned,
        03 abbrev		bit (1) unaligned,
        03 prompt		bit (1) unaligned,
        03 start_up		bit (1) unaligned,
        03 debug		bit (1) unaligned,
        03 prompt_given	bit (1) unaligned,
        03 profile_given	bit (1) unaligned,
        03 switchname_given	bit (1) unaligned,
        03 request_given	bit (1) unaligned,
        03 pad		bit (27) unaligned,
       02 prompt		char (64) varying,
       02 profile		char (168),
       02 switchname	char (32),
       02 request		char (512) varying,
       02 debug_path	char (168) unaligned;
  
  /* automatic */
  
  dcl arg_listp		ptr;
  dcl ec			fixed bin (35);
  
  /* conditions */
  
  dcl cleanup		condition;
  
  /* builtin */
  
  dcl addr		builtin;
  dcl index		builtin;
  dcl null		builtin;
  
  /* include files */
  
%include access_mode_values;

%include iox_modes;

%include kermit_info;

%include kermit_dcls;

%include kermit_mode_info;

%include ssu_prompt_modes;

%include terminate_file;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */


  /* initialize the subsystem info structure prior to setting up	*/
  /* the cleanup handlers to free the kermit databases		*/
  
  info.version = kermit_info_version;
  info.sci_ptr     = null;
  info.perm_modesp = null;
  info.temp_modesp = null;
  info.log_infop   = null;
  info.comm_infop  = null;
  
  on cleanup call kermit_cleanup (addr (info));
  
  /* parse the command line arguments				*/
  
  call cu_$arg_list_ptr (arg_listp);
  
  call parse_command_line (arg_listp, addr (kermit_args));
  
  /* set up the subsystem invocation				*/
  
  call kermit_initialization (addr (kermit_args), addr (info));
  
  /* only enter the request loop if required			*/
  
  if kermit_args.request_loop
    then call ssu_$listen (info.sci_ptr, iox_$user_input, ec);
    
  call kermit_cleanup (addr (info));
  
  return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */


parse_command_line: proc (arg_listp, argsp);
  
  /********************************************************************/
  /*							*/
  /*n	Name:	parse_command_line			internal	*/
  /*i	Input:	arg_list_ptr				*/
  /*f	Function:	parses the control arguments detecting illegal	*/
  /*f		control args.				*/
  /*f		Legal control arguments are:			*/
  /*f		   -abbrev, -ab				*/
  /*f			specifies that abbrev processing by the	*/
  /*f			subsystem request processor is to be	*/
  /*f			initially enabled.			*/
  /*f		   -debug pathname, -db pathname		*/
  /*f			specifies the pathname of a segment in	*/
  /*f			which to log packet traffic for use in	*/
  /*f			debugging kermit.			*/
  /*f		   -io_switch switchname, -iosw switchname	*/
  /*f			specified the name of the io switch	*/
  /*f			over which to perform the file	*/
  /*f			transfer.  If not specified, the users	*/
  /*f			login channel is used.		*/
  /*f		   -no_abbrev, -nab				*/
  /*f			specified that abbrev processing by the	*/
  /*f			subsystem request processor is to be	*/
  /*f			initially disabled. (default)		*/
  /*f		   -no_prompt, -npmt			*/
  /*f			specified that no prompting is to be	*/
  /*f			done in the request loop.		*/
  /*f		   -no_start_up, -nsu, -ns			*/
  /*f			do not execute the kermit start_up.	*/
  /*f		   -profile pathname, -pf pathname		*/
  /*f			specifies the name of the profile	*/
  /*f			segment to be used as the default	*/
  /*f			profile for abbrev processing.  If this	*/
  /*f			is not specified, the users default	*/
  /*f			profile is used. NB. -profile implies	*/
  /*f			-abbrev				*/
  /*f		   -prompt prompt_string			*/
  /*f			specifies the prompt string to be used.	*/
  /*f		   -quit					*/
  /*f			do not enter the subsystem request	*/
  /*f			loop.  Quit the subsystem after	*/
  /*f			executing the request_string, if any.	*/
  /*f		   -request request_string, -rq request_string	*/
  /*f			execute request string as a subsystem	*/
  /*f			request line entering the subsystem	*/
  /*f			request loop			*/
  /*f		   -request_loop, -rql			*/
  /*f			enters the subsystem request loop after	*/
  /*f			executing the request_string, if any.	*/
  /*f			(default)				*/
  /*f		   -start_up, -su				*/
  /*f			The user's home directory, the project	*/
  /*f			directory, and >site are searched in	*/
  /*f			that order for a segment named	*/
  /*f			start_up.kermit.  (default)		*/
  /*o	Output:	request_string, quit_flag, abbrev_flag,		*/
  /*o		profile_path, start_up_flag, debug_flag,	*/
  /*o		debug_path, switchname			*/
  /*							*/
  /*l	Written:	84-10-12	by Dean Elhard			*/
  /*l	Modified:	84-11-01	by Dean Elhard to trap missing request,	*/
  /*l			prompt, profile, and switchname strings	*/
  /*l			embedded in the arg list.		*/
  /*l	Modified:	84-11-08	to add -start_up and -no_start_up	*/
  /*l	Modified:	84-11-15	to add -debug			*/
  /*							*/
  /********************************************************************/
  
  /* arguments */
  
  dcl arg_listp		ptr;
  dcl argsp		ptr;
  
  /* structures */
  
  dcl 01 args		aligned like kermit_args based (argsp);
  
  /* based */
  
  dcl arg			char (argl) based (argp);
  
  /* automatic */
  
  dcl argl		fixed bin (21);
  dcl argp		ptr;
  dcl debug_pending		bit (1);
  dcl ec			fixed bin (35);
  dcl i			fixed bin;
  dcl nargs		fixed bin;
  dcl profile_pending	bit (1);
  dcl prompt_pending	bit (1);
  dcl request_pending	bit (1);
  dcl switchname_pending	bit (1);
  
  /* initialize state to default before starting parse		*/
  
  args.flags.request_loop	= true;
  args.flags.abbrev		= false;
  args.flags.prompt		= true;
  args.flags.start_up	= true;
  args.flags.debug		= false;
  args.flags.prompt_given	= false;
  args.flags.profile_given	= false;
  args.flags.switchname_given = false;
  args.flags.request_given	= false;
  args.prompt		= "";
  args.profile		= "";
  args.switchname		= "";
  args.request		= "";
  args.debug_path		= "";
  
  profile_pending		= false;
  prompt_pending		= false;
  request_pending		= false;
  switchname_pending	= false;
  debug_pending		= false;
  
  /* get the arg count					*/
  
  call cu_$arg_count_rel (nargs, arg_listp, ec);
  if ec ^= 0
    then call abort (ec, "");
    
  do i = 1 to nargs;
    
    call cu_$arg_ptr_rel (i, argp, argl, ec, arg_listp);
    if ec ^= 0
      then call abort (ec, "");
      
  /* get the prompt text if the previous arg was -prompt		*/
  
    if prompt_pending
      then do;
        if index (arg, "-") = 1
	then call abort (error_table_$noarg, "Prompt string expected.");
        prompt_pending = false;
        args.flags.prompt_given = true;
        args.prompt = arg;
      end;
    
  /* get the profile pathname if the previous arg was -profile	*/
  
    else if profile_pending
      then do;
        if index (arg, "-") = 1
	then call abort (error_table_$noarg, "Profile pathname expected.");
        profile_pending = false;
        args.flags.profile_given = true;
        args.flags.abbrev = true;
        args.profile = arg;
      end;
    
  /* get the request string if the previous arg was -request	*/
  
    else if request_pending
      then do;
        if index (arg, "-") = 1
	then call abort (error_table_$noarg, "Request expected.");
        request_pending = false;
        args.flags.request_given = true;
        args.request = arg;
      end;
    
  /* get the switchname if the previous arg was -io_switch		*/
  
    else if switchname_pending
      then do;
        if index (arg, "-") = 1
	then call abort (error_table_$noarg, "Switch name expected.");
        switchname_pending = false;
        args.flags.switchname_given = true;
        args.switchname = arg;
      end;
    
  /* get the debug pathname if the previous are was -debug		*/
    
    else if debug_pending
      then do;
        if index (arg, "-") = 1
	then call abort (error_table_$noarg, "Debug pathname expected.");
        debug_pending = false;
        args.flags.debug = true;
        args.debug_path = arg;
      end;
      
  /* enable abbrev processing					*/

    else if arg = "-abbrev" | arg = "-ab"
      then args.flags.abbrev = true;
    
  /* flag that the next arg should be a debug segment path		*/
    
    else if arg = "-debug" | arg = "-db"
      then debug_pending = true;
    
  /* flag that the next arg should be a switchname		*/
  
    else if arg = "-io_switch" | arg = "-iosw"
      then switchname_pending = true;
    
  /* disable abbrev processing				*/
  
    else if arg = "-no_abbrev" | arg = "-nab"
      then args.flags.abbrev = false;
    
  /* disable subsystem prompting				*/
  
    else if arg = "-no_prompt" | arg = "-npmt"
      then args.flags.prompt = false;
    
  /* disable start_up.kermit execution				*/
  
    else if arg = "-no_start_up" | arg = "-nsu" | arg = "-ns"
      then args.flags.start_up = false;
      
  /* flag that the next arg should be a profile pathname		*/
  
    else if arg = "-profile" | arg = "-pfl"
      then profile_pending = true;
    
  /* flag that the next arg should be a prompt string		*/
  
    else if arg = "-prompt" | arg = "-pmt"
      then prompt_pending = true;
    
  /* disable request loop entry after processing the request str	*/
  
    else if arg = "-quit" | arg = "-no_request_loop" | arg = "-nrql"
      then args.flags.request_loop = false;
    
  /* flag that the next arg should be a request string		*/
  
    else if arg = "-request" | arg = "-rq"
      then request_pending = true;
    
  /* enable request loop entry after request processing		*/
  
    else if arg = "-request_loop" | arg = "-rql"
      then args.flags.request_loop = true;
    
  /* enable start_up.kermit execution				*/
    
    else if arg = "-start_up" | arg = "-su"
      then args.flags.start_up = true;
      
  /* otherwise complain since that is all the valid args		*/
  
      else call abort (error_table_$badopt, arg);
  end;
  
  /* if there were any supplementary args outstanding when we ran out	*/
  /* of command line arguments, complain and abort the subsystem	*/
  
  if request_pending
    then call abort (error_table_$noarg, "Request expected.");
  if profile_pending
    then call abort (error_table_$noarg, "Profile pathname expected.");
  if switchname_pending
    then call abort (error_table_$noarg, "Switch name expected.");
  if prompt_pending
    then call abort (error_table_$noarg, "Prompt string expected.");
  if debug_pending
    then call abort (error_table_$noarg, "Debug path expected.");
    
end parse_command_line;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */


kermit_initialization: proc (argsp, infop);
  
  /********************************************************************/
  /*							*/
  /*n	Name:	kermit_initialization		internal	*/
  /*i	Input:	arg_info, info_ptr				*/
  /*f	Function:	initializes the subsystem_info structure, creates	*/
  /*f		an ssu_ invocation, initializes the profile and	*/
  /*f		abbrev state depending on the abbrev_flag and	*/
  /*f		profile_path, and calls the ssu_ request	*/
  /*f		processor to execute the request_string.	*/
  /*o	Output:	none					*/
  /*							*/
  /*l	Written:	84-10-12	by Dean Elhard			*/
  /*l	Modified:	84-11-01	by Dean Elhard to null iocbp in	*/
  /*l			log_info immediately to reduce cleanup	*/
  /*l			error window			*/
  /*l	Modified:	84-11-08	by Dean Elhard to execute start_up	*/
  /*							*/
  /********************************************************************/
  
  /* arguments */
  
  dcl argsp		ptr;
  dcl infop		ptr;
  
  /* based */
  
  dcl 01 args		aligned like kermit_args based (argsp);
  dcl 01 info		aligned like kermit_info based (infop);
  dcl 01 log_info		aligned like kermit_log_info
			     based (info.log_infop);
  dcl 01 perm_modes		aligned like kermit_perm_modes
			     based (info.perm_modesp);
  dcl 01 temp_modes		aligned like kermit_temp_modes
			     based (info.temp_modesp);
  dcl 01 comm_info		aligned like kermit_comm_info
			     based (info.comm_infop);
  dcl sys_area		area based (system_free_areap);
  
  /* automatic */
  
  dcl dname		char (168);
  dcl ec			fixed bin (35);
  dcl ename		char (32);
  dcl system_free_areap	ptr;
  dcl profile_ptr		ptr;
  dcl prompt_mode		bit (2);
  
  /* get the area to allocate the databases in			*/
  
  system_free_areap = get_system_free_area_ ();
  
  /* allocate the databases and set the version numbers		*/
  
  allocate log_info in (sys_area);
  
  /* null iocb pointer to minimize error window			*/
  
  log_info.log_file.iocbp = null;
  log_info.version = kermit_log_info_version;
  
  allocate perm_modes in (sys_area);
  perm_modes.version = kermit_perm_modes_version;
  
  allocate temp_modes in (sys_area);
  temp_modes.version = kermit_temp_modes_version;
  
  allocate comm_info in (sys_area);
  
  /* null input_buffer pointer to minimize error window		*/
  
  comm_info.input_buffer.bufferp = null;
  comm_info.debug_segp = null;
  comm_info.version = kermit_comm_info_version;
  comm_info.server = "0"b;	         /* Initialize server flag    	*/
  comm_info.transfer_modes_set = "0"b; /* Initialize transfer_modes_set flag */
  
  /* now create the ssu_ invocation				*/
  
  call ssu_$create_invocation (Subsystem_Name, Subsystem_Version, infop,
		addr (ssu_request_tables_$standard_requests),
		Subsystem_Info_Dir, info.sci_ptr, ec);
  
  if ec ^= 0
    then call abort (ec, "Unable to create subsystem invocation.");
    
  /* add our request table to the subsystem			*/
  
  call ssu_$add_request_table (info.sci_ptr, addr (kermit_requests_$requests),
		1, ec);
  
  /* set the prompt string if required and set up the prompt mode	*/
  
  if ^args.flags.prompt_given
    then args.prompt = Default_prompt;
    
  call ssu_$set_prompt (info.sci_ptr, args.prompt);
    
  if args.flags.prompt
    then prompt_mode = PROMPT | PROMPT_AFTER_NULL_LINES;
    else prompt_mode = DONT_PROMPT | PROMPT_AFTER_NULL_LINES;
  
  call ssu_$set_prompt_mode (info.sci_ptr, prompt_mode);
  
  /* find the profile if a non-standard profile was requested	*/
  
  if args.flags.profile_given
    then do;
      call expand_pathname_$add_suffix ((args.profile), "profile", dname,
				ename, ec);
      if ec ^= 0
        then call abort (ec, (args.profile));
      call initiate_file_ (dname, ename, R_ACCESS, profile_ptr, (0), ec);
      if profile_ptr = null
        then if ec = error_table_$noentry
	then call com_err_ (ec, Subsystem_Name, "^/^a does not exist.",
		pathname_ (dname, ename));
	else call abort (ec, (args.profile));
    end;
    else profile_ptr = null;
  
  /* set the abbrev info regarding the profile use and initial state	*/
  
  call ssu_$set_abbrev_info (info.sci_ptr, profile_ptr, profile_ptr,
		(args.flags.abbrev));
  
  /* if a switch was supplied, then make sure it exists and save	*/
  /* the iocb pointer for use by the communications stuff		*/
  
  if args.flags.switchname_given
    then do;
      call iox_$look_iocb ((args.switchname), comm_info.ft_iocbp, ec);
      if ec ^= 0
        then call abort (ec, (args.switchname));
    end;
    else comm_info.ft_iocbp = iox_$user_io;
  
  /* set the default modes in the permanent and temporary modes dbs	*/
  
  call kermit_mode_mgr_$store (infop, Permanent, Store_all,
			addr (Perm_defaults), ec);
  call kermit_mode_mgr_$store (infop, Temporary, Store_all,
			addr (Temp_defaults), ec);

  /* set up the initial logging state				*/
  
  log_info.flags.enabled = false;
  log_info.flags.stats_valid = false;
  
  /* get a temp-seg for use as an input buffer			*/
  
  call ssu_$get_temp_segment (info.sci_ptr, "buffer", comm_info.bufferp);
  
  /* set up the rest of the communications status info		*/
  
  comm_info.bufferl = 0;
  comm_info.old_modes = "";
  comm_info.old_framing_chars.start_char = " ";
  comm_info.old_framing_chars.end_char = " ";
  comm_info.old_wake_table.breaks (*) = false;
  comm_info.old_wake_table.mbz = ""b;
  
  /* set up the debug file if necessary				*/
  
  if args.flags.debug
    then do;
      call expand_pathname_ (args.debug_path, dname, ename, ec);
      if ec ^= 0
        then call abort (ec, args.debug_path);
      call iox_$attach_name ("kermit.debug." || unique_chars_ ("0"b),
	     comm_info.debug_segp, "vfile_ " || pathname_ (dname, ename),
	     null(), ec);
	call iox_$open (comm_info.debug_segp, Stream_output, "0"b, ec);
      if ec ^= 0
        then call abort (ec, pathname_ (dname, ename));
    end;
    
  /* execute the start_up if requested				*/
  
  if args.flags.start_up
    then do;
      call ssu_$execute_start_up (info.sci_ptr, ec);
      if ec = ssu_et_$subsystem_aborted
        then call abort (ec, "^/Abort occurred while executing start_up.");
    end;
    
  /* lastly, execute the request string (if any)			*/
  
  if args.flags.request_given
    then do;
      call ssu_$execute_string (info.sci_ptr, (args.request), ec);
      if ec = ssu_et_$subsystem_aborted
        then args.request_loop = false;
    end;
    
end kermit_initialization;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */


kermit_cleanup: proc (infop);
  
  /********************************************************************/
  /*							*/
  /*n	Name:	kermit_cleanup			internal	*/
  /*i	Input:	subsystem_info_ptr				*/
  /*f	Function:	frees the subsystem_info structure and destroys	*/
  /*f		the ssu_ invocation				*/
  /*o	Output:	none					*/
  /*							*/
  /*l	Written:	84-10-12	by Dean Elhard			*/
  /*l	Modified:	84-11-01	by Dean Elhard to close log_file on	*/
  /*l			cleanup if open.			*/
  /*							*/
  /********************************************************************/
  
  /* arguments */
  
  dcl infop		ptr;
  
  /* structures */
  
  dcl 01 comm_info		aligned like kermit_comm_info
			     based (info.comm_infop);
  dcl 01 info		aligned like kermit_info based (infop);
  dcl 01 log_info		aligned like kermit_log_info
			     based (info.log_infop);
  dcl 01 perm_modes		aligned like kermit_perm_modes
			     based (info.perm_modesp);
  dcl sys_area		area based (system_free_areap);
  dcl 01 temp_modes		aligned like kermit_temp_modes
			     based (info.temp_modesp);
  
  /* automatic */
  
  dcl system_free_areap	ptr;
  
  /* find the area to free the stuff into			*/
  
  system_free_areap = get_system_free_area_ ();
  
  /* free each of the databases				*/
  
  if info.comm_infop ^= null
    then do;
      
  /* free the input buffer temp-seg				*/
  
      if comm_info.input_buffer.bufferp ^= null
        then call ssu_$release_temp_segment (info.sci_ptr,
			comm_info.input_buffer.bufferp);
      
  /* terminate and set the bit_count on the debug file		*/
      
      if comm_info.debug_segp ^= null
        then do;
	 call iox_$close (comm_info.debug_segp, ec);
	 call iox_$detach_iocb (comm_info.debug_segp, ec);
        end;
        
  /* and then free the communications database			*/
  
      free comm_info in (sys_area);
    end;
    
  if info.perm_modesp ^= null
    then free perm_modes in (sys_area);
  if info.temp_modesp ^= null
    then free temp_modes in (sys_area);
  if info.log_infop ^= null
    then do;
      
  /* close and detach the log_file				*/
      
      call kermit_log_mgr_$disable (infop, ec);
      call kermit_log_mgr_$close_log (infop, ec);
        
  /* free the log_info database				*/
        
      free log_info in (sys_area);
    end;
    
  /* lastly, destroy the ssu_ invocation			*/
  
  if info.sci_ptr ^= null
    then call ssu_$destroy_invocation (info.sci_ptr);
    
end kermit_cleanup;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */


abort: proc (code, message);
  
  /********************************************************************/
  /*							*/
  /*n	Name:	abort				internal	*/
  /*i	Input:	error_code, message				*/
  /*f	Function:	prints a message constructed from the error code	*/
  /*f		and message and then aborts the subsystem	*/
  /*o	Output:	none					*/
  /*							*/
  /*l	Written:	84-10-14	by Dean Elhard			*/
  /*							*/
  /********************************************************************/
  
  /* parameters */
  
  dcl code		fixed bin (35);
  dcl message		char (*);
  
  /* cleanup the subsystem before we leave			*/
  
  call kermit_cleanup (addr (info));
  
  call com_err_ (code, Subsystem_Name, message);
  goto ABORT;
  
end abort;

ABORT:
  return;
  
end kermit;
