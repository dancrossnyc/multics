/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(87-11-24,Huen), approve(87-11-24,MCR7803), audit(87-12-07,RWaters),
     install(88-09-16,MR12.2-1113):
     Fix kermit error 13.
                                                   END HISTORY COMMENTS */


kermit_server_:
     proc (infop, filenames_areap);

/**********************************************************************/
/*							*/
/*n 	Name:	kermit_server_$kermit_server_		external	*/
/*i 	Input:	infop, filenames_areap			*/
/*f 	Function: Provides a state-switching mechanism and data 	*/
/*f		interface for the server.			*/
/*f		Implemented states are:			*/
/*f		rec_init, send_init, init, generic_logout,	*/
/*f		generic_finish.				*/
/*f		An error packet is returned if the remote issues	*/
/*f		an unimplemented command to the Multics server	*/
/*o 	Output:	none					*/
/*							*/
/**********************************************************************/


/*  parameters  */

	dcl     infop		 ptr;
	dcl     filenames_areap	 ptr;

/*  automatic */

	dcl     ec		 fixed bin (35);
	dcl     generic_sw		 bit (1);
	dcl     packet_n		 fixed bin;
	dcl     packet_type		 char (1);
	dcl     remote_data		 char (Max_remote_packet_size);
	dcl     remote_data_lth	 fixed bin (21);
	dcl     generic_state	 fixed bin;
	dcl     state		 fixed bin;

/*  based  */

	dcl     generic_type	 char (1) based (addr (remote_data));
	dcl     remote_datap	 ptr;

/*  labels  */

	dcl     server_state	 (0:4) label init (Other, Server_Rec_Init, Server_Send_Init, Server_Init, Server_Generic);
	dcl     generic_command	 (0:2) label init (Generic_Other, Generic_Logout, Generic_Finish);

/*  constant  */

	dcl     Error_msg		 char (15) internal static options (constant) init ("Not Implemented");
	dcl     Generic_packet	 char (1) unal internal static options (constant) init ("G");
	dcl     Generic_packets	 char (2) internal static options (constant) init ("LF");
	dcl     GF_packet		 char (1) unal internal static options (constant) init ("F");
	dcl     GL_packet		 char (1) unal internal static options (constant) init ("L");
	dcl     Max_remote_packet_size fixed bin internal static options (constant) init (3000);
	dcl     Max_packet_size	 fixed bin internal static options (constant) init (94);
	dcl     Server_packets	 char (4) internal static options (constant) init ("RSIG");
	dcl     True		 bit (1) internal static options (constant) init ("1"b);


/*  builtin  */

	dcl     (addr, before, index, length, ltrim, null, rtrim, size, unspec) builtin;

/*  procedures  */

	dcl     convert_status_code_	 entry (fixed bin (35), char (8) aligned, char (100) aligned);

/*  include  */

%include kermit_dcls;

%include kermit_mode_info;

%include kermit_transfer_info;


/*  clear any garbage on the line  */
	call kermit_comm_mgr_$flush_input (infop, ec);

	remote_datap = addr (remote_data);

	do while ("1"b);

	     packet_n = 0;
	     call rec_server_idle (infop, packet_n, packet_type, remote_datap, remote_data_lth);

	     state = index (Server_packets, packet_type);
	     goto server_state (state);


Server_Rec_Init:
	     call svr_send_file (infop, packet_n, remote_datap, remote_data_lth, filenames_areap);
	     goto exit_state;

Server_Send_Init:
	     call svr_receive_file (infop, packet_n, remote_datap, remote_data_lth);
	     goto exit_state;

Server_Init:
	     call svr_init (infop, packet_n, remote_datap, remote_data_lth);
	     goto exit_state;

Server_Generic:
	     generic_state = index (Generic_packets, generic_type);
	     goto generic_command (generic_state);

Generic_Finish:
	     call kermit_pad_$send (infop, Ack_packet, null (), (0), packet_n, (0), (0), (0));
	     generic_sw = True;
	     call verify_termination (infop, Generic_packet, generic_sw, GF_packet);
	     goto shutdown_server;

Generic_Logout:
	     call kermit_pad_$send (infop, Ack_packet, null (), (0), packet_n, (0), (0), (0));
	     generic_sw = True;
	     call verify_termination (infop, Generic_packet, generic_sw, GL_packet);
	     call logout_user;
	     goto exit_state;			/*  should never come back here  */

Generic_Other:
Other:
	     call kermit_pad_$send (infop, Error_packet, addr (Error_msg), length (Error_msg), packet_n, (0), (0), ec);

exit_state:
	end;
shutdown_server:
	return;

rec_server_idle:
     proc (infop, sequence_n, packet_type, packet_datap, packet_data_lth);

/**********************************************************************/
/*							*/
/*n 	Name:	kermit_server_$rec_server_idle	internal	*/
/*i 	Input:	infop, sequence_n,				*/
/*f 	Function: Waits for messages from remote.		*/
/*o 	Output:	packet_type, packet_datap, packet_data_lth	*/
/*l       Modified: 86-01-24  by Don Kozlowski - Idle until a packet  */
/*l			is received regardless of the packet    */
/*l			number.  Remove all reset_line_modes    */
/*l			except before logout. (kermit 13)	*/
/*							*/
/**********************************************************************/

/*  parameters  */

	dcl     infop		 ptr;
	dcl     packet_datap	 ptr;
	dcl     packet_data_lth	 fixed bin (21);
	dcl     packet_type		 char (1);
	dcl     sequence_n		 fixed bin;

/*  automatic  */

	dcl     ec		 fixed bin (35);
	dcl     old_timeout		 fixed bin (8) unal;
	dcl     old_timeout_select	 (1) fixed bin;
	dcl     server_timeout	 fixed bin (8) unal;
	dcl     timeout_select	 (1) fixed bin;

/*  based  */

	dcl     packet_data		 char (Max_remote_packet_size) based (packet_datap);

/*  constants  */

	dcl     Thirty_seconds	 fixed bin (8) unal internal static options (constant) init (30);


/*  Make the timeout interval reasonable for this state  */
	timeout_select (1) = I_timeout;
	server_timeout = Thirty_seconds;
	sequence_n = 0;
	ec = 0;

	call kermit_mode_mgr_$store (infop, Temporary, timeout_select, addr (server_timeout), ec);

/*  Loop until we get a packet  */

	call kermit_pad_$receive (infop, packet_type, packet_datap, length (packet_data), packet_n, packet_data_lth, (0), ("0"b), ec);

	do while (ec ^= 0);
	     call kermit_pad_$send (infop, Nak_packet, null (), (0), sequence_n, (0), (0), ec);
	     call kermit_pad_$receive (infop, packet_type, packet_datap, length (packet_data), packet_n, packet_data_lth, (0), ("0"b), ec);
	end;

/*  Have a packet.  Let's reset the timeout interval  */
	old_timeout_select (1) = Timeout;
	call kermit_mode_mgr_$retrieve (infop, Permanent, old_timeout_select, addr (old_timeout), ec);
	call kermit_mode_mgr_$store (infop, Temporary, timeout_select, addr (old_timeout), ec);

	return;
     end rec_server_idle;

svr_init:
     proc (infop, sequence_n, packet_datap, packet_data_lth);

/**********************************************************************/
/*							*/
/*n 	Name:	kermit_server_$svr_init		internal	*/
/*i 	Input:	infop, sequence_n, packet_datap, packet_data_lth	*/
/*f	Function:	Negotiates parameters with remote		*/
/*o 	Output:	none					*/
/*							*/
/**********************************************************************/

/*  parameters  */

	dcl     infop		 ptr;
	dcl     packet_datap	 ptr;
	dcl     packet_data_lth	 fixed bin (21);
	dcl     sequence_n		 fixed bin;

/*  automatic  */

	dcl     ack_init_data	 char (Max_packet_size);
	dcl     ack_init_data_lth	 fixed bin (21);
	dcl     ack_init_datap	 ptr;
	dcl     ack_init_packet	 char (Max_packet_size);
	dcl     ack_init_packet_lth	 fixed bin (21);
	dcl     ack_init_packetp	 ptr;
	dcl     ec		 fixed bin (35);
	dcl     short_message	 char (8) aligned;
	dcl     long_message	 char (100) aligned;


	ec = 0;
	ack_init_datap = addr (ack_init_data);
	ack_init_packetp = addr (ack_init_packet);

/*  Get the local modes   */
	call kermit_xfer_modes_$get_local_params (infop, ack_init_datap, ack_init_data_lth, ack_init_packetp, ack_init_packet_lth, ec);
	if ec ^= 0 then goto init_error;

	call kermit_xfer_modes_$check_params (infop, packet_datap, packet_data_lth, ack_init_datap, ec);
	if ec ^= 0 then
	     goto init_error;

/* else all is fine, so give the remote kermit the local modes  */
	call kermit_pad_$send (infop, Ack_packet, ack_init_packetp, ack_init_packet_lth, sequence_n, (0), (0), ec);
	if ec ^= 0 then
	     goto init_error;

/* All okay, so set the tty_ line to the new modes  */
	call kermit_xfer_modes_$process_params (infop, packet_datap, packet_data_lth, ack_init_datap, ec);

	call kermit_comm_mgr_$set_line_modes (infop, ec);
	return;

init_error:
	call convert_status_code_ (ec, short_message, long_message);
	call kermit_pad_$send (infop, Error_packet, addr (long_message), length (rtrim (long_message)), packet_n, (0), (0), ec);
	return;
     end svr_init;

svr_send_file:
     proc (infop, sequence_n, packet_datap, packet_data_lth, filenames_areap);

/**********************************************************************/
/*							*/
/*n 	Name:	kermit_server_$svr_send_files		internal	*/
/*i 	Input:	infop, sequence_n, packet_datap, packet_data_lth,	*/
/*f		filenames_areap				*/
/*f 	Function:	Gets the names of the files to be sent.		*/
/*f		Calls kermit_send_$send_to_remote to send a file.	*/
/*o 	Output:	none					*/
/*							*/
/**********************************************************************/

/*  parameters */

	dcl     infop		 ptr;
	dcl     filenames_areap	 ptr;
	dcl     packet_datap	 ptr;
	dcl     packet_data_lth	 fixed bin (21);
	dcl     sequence_n		 fixed bin;

/*  automatic  */

	dcl     error_msg		 char (256);
	dcl     filename		 char (packet_data_lth);
	dcl     long_message	 char (100) aligned;
	dcl     short_message	 char (8) aligned;


/*  based  */

	dcl     01 filenames	 like kermit_filenames based (filenames_areap);
	dcl     packet_data		 char (packet_data_lth) based (packet_datap);


/*  external  */

	dcl     error_table_$noarg	 fixed bin (35) ext static;

	ec = 0;

	if packet_data_lth = 0 then do;
		ec = error_table_$noarg;
		goto send_error;
	     end;

	filenames.n_paths = 0;
	filename = before (ltrim (packet_data), " ");

	call kermit_get_filenames_ (infop, rtrim (filename), filenames_areap, error_msg, ec);

	if ec ^= 0 then goto send_error;

	call kermit_send_$send_to_remote (infop, filenames_areap, "", "0"b, (0), ec);
	if ec ^= 0 then goto send_error;
	return;

send_error:
	call convert_status_code_ (ec, short_message, long_message);
	call kermit_pad_$send (infop, Error_packet, addr (long_message), length (rtrim (long_message)), packet_n, (0), (0), ec);
	return;
     end svr_send_file;

svr_receive_file:
     proc (infop, sequence_n, packet_datap, packet_data_lth);

/**********************************************************************/
/*							*/
/*n 	Name:	kermit_server_$svr_receive_file	internal	*/
/*i 	Input:	infop, sequence_n, packet_datap, packet_data_lth	*/
/*f 	Function:	Receives a file or file group from the remote.	*/
/*f		Negotiates parameters.  Calls			*/
/*f		kermit_receive_$receive_from_remote to receive	*/
/*f		a file or file group			*/
/*o 	Output:	none					*/
/*							*/
/**********************************************************************/

/*  parameters  */

	dcl     infop		 ptr;
	dcl     packet_datap	 ptr;
	dcl     packet_data_lth	 fixed bin (21);
	dcl     sequence_n		 fixed bin;

/*  automatic  */
	dcl     ack_init_data	 char (Max_packet_size);
	dcl     ack_init_data_lth	 fixed bin (21);
	dcl     ack_init_datap	 ptr;
	dcl     ack_init_packet	 char (Max_packet_size);
	dcl     ack_init_packet_lth	 fixed bin (21);
	dcl     ack_init_packetp	 ptr;
	dcl     ec		 fixed bin (35);
	dcl     file_sw		 bit (1);
	dcl     first_filename	 char (packet_data_lth);
	dcl     initial_state	 fixed bin;
	dcl     long_message	 char (100) aligned;
	dcl     short_message	 char (8) aligned;

/*  constants  */

	dcl     False		 bit (1) internal static options (constant) init ("0"b);

	ec = 0;
	ack_init_datap = addr (ack_init_data);
	ack_init_packetp = addr (ack_init_packet);

	call kermit_xfer_modes_$get_local_params (infop, ack_init_datap, ack_init_data_lth, ack_init_packetp, ack_init_packet_lth, ec);
	if ec ^= 0 then goto modes_error;

	call kermit_xfer_modes_$check_params (infop, packet_datap, packet_data_lth, ack_init_datap, ec);
	if ec ^= 0 then
	     goto modes_error;

/* else all is fine, so give the remote kermit the local modes  */
	call kermit_pad_$send (infop, Ack_packet, ack_init_packetp, ack_init_packet_lth, sequence_n, (0),
	     (0), ec);
	if ec ^= 0 then
	     goto modes_error;

/* All okay, so set the tty_ line to the new modes  */
	call kermit_xfer_modes_$process_params (infop, packet_datap, packet_data_lth, ack_init_datap, ec);

	call kermit_comm_mgr_$set_line_modes (infop, ec);

	initial_state = Rec_file_header;
	first_filename = "";
	file_sw = False;
	sequence_n = sequence_n + 1;

	call kermit_receive_$receive_from_remote (infop, initial_state, sequence_n, first_filename, file_sw, (0), ec);
	return;

modes_error:
	call convert_status_code_ (ec, short_message, long_message);
	call kermit_pad_$send (infop, Error_packet, addr (long_message), length (rtrim (long_message)), packet_n, (0), (0), ec);
	return;
     end svr_receive_file;

logout_user: proc;

/**********************************************************************/
/*							*/
/*n 	Name:	kermit_server_$logout_user		internal	*/
/*i 	Input:	none					*/
/*f 	Function: Logs out the user in response to a Generic Logout	*/
/*f		packet.					*/
/*o 	Output:	state					*/
/*							*/
/**********************************************************************/

/*  automatic  */

	dcl     action		 char (7);
	dcl     01 local_finish_info	 aligned like finish_info;
	dcl     1 logout_string	 aligned,		/* information about logouts */
		02 version	 fixed bin,	/* this is version 0 */
		02 hold		 bit (1) unaligned, /* don't hangup line */
		02 brief		 bit (1) unaligned, /* don't print logout message */
		02 pad		 bit (34) unaligned;/* must be zero */
	dcl     term_structure_ptr	 ptr;


/*  procedures  */

	dcl     signal_		 entry (char (*), ptr, ptr);
	dcl     execute_epilogue_	 entry (bit (1) aligned);
	dcl     terminate_process_	 entry (char (*), ptr);


/*  include  */

%include finish_info;
%include condition_info_header;


	call kermit_comm_mgr_$reset_line_modes (infop, (0));

	action = "logout";
	logout_string.version = 0;
	logout_string.hold = "0"b;			/* set default values for arguments */
	logout_string.brief = "1"b;			/* .. */
	logout_string.pad = "0"b;
	term_structure_ptr = addr (logout_string);

	finish_info_ptr = addr (local_finish_info);
	finish_info.type = "logout";

no_more_arguments:
	finish_info.length = size (finish_info);
	finish_info.version = 1;
	finish_info.info_string = "";
	unspec (finish_info.action_flags) = ""b;
	finish_info.status_code = 0;
	call signal_ ("finish", null (), addr (finish_info));
	call execute_epilogue_ ("0"b);
	call terminate_process_ (action, term_structure_ptr);
	go to no_more_arguments;			/* and don't come back */
     end logout_user;

verify_termination:
     proc (infop, packet_type, generic_sw, generic_packet_type);

/**********************************************************************/
/*							*/
/*n 	Name:	kermit_server_$verify_termination	internal	*/
/*i 	Input:    infop, packet_type, generic_sw,		*/
/*i 	          generic_packet_type				*/
/*f 	Function: Verifies receipt of the transmitted ack before	*/
/*f		exiting the server.				*/
/*o 	Output:	none					*/
/*							*/
/**********************************************************************/

/*  parameters  */

	dcl     infop		 ptr;
	dcl     generic_sw		 bit (1);
	dcl     generic_packet_type	 char (1);
	dcl     packet_type		 char (1);

/*  automatic  */

	dcl     chars_received	 fixed bin (21);
	dcl     chars_sent		 fixed bin (21);
	dcl     done		 bit (1);
	dcl     ec		 fixed bin (35);
	dcl     eol_split		 bit (1);
	dcl     packet_n		 fixed bin;
	dcl     packet_size		 fixed bin (21);
	dcl     packet_timeout	 fixed bin (8) unal;
	dcl     r_packet_size	 fixed bin (21);
	dcl     remote_data		 char (Max_remote_packet_size);
	dcl     remote_datap	 ptr;
	dcl     remote_packet_type	 char (1);
	dcl     timeout_select	 (1) fixed bin;

/*   based  */
	dcl     remote_generic_type	 char (1) based (addr (remote_data));

/*  constants  */

	dcl     False		 bit (1) internal static options (constant) init ("0"b);
	dcl     Five_seconds	 fixed bin (8) unal internal static options (constant) init (5);
	dcl     True		 bit (1) internal static options (constant) init ("1"b);


	timeout_select (1) = I_timeout;
	packet_timeout = Five_seconds;

	call kermit_mode_mgr_$store (infop, Temporary, timeout_select, addr (packet_timeout), ec);

	done = False;
	remote_packet_type = "";
	remote_data = "";
	remote_datap = addr (remote_data);

	call kermit_pad_$receive (infop, remote_packet_type, remote_datap, length (remote_data), packet_n, chars_received,
	     r_packet_size, eol_split, ec);


	do while (remote_packet_type = packet_type & ^done);
	     if generic_sw & remote_generic_type ^= generic_packet_type then done = True;
	     else call kermit_pad_$send (infop, Ack_packet, null (), 0, packet_n, chars_sent, packet_size, ec);

	     remote_packet_type = "";
	     remote_data = "";
	     if ^done then call kermit_pad_$receive (infop, remote_packet_type, remote_datap, length (remote_data), packet_n, chars_received,
		     packet_size, eol_split, ec);
	end;
	return;
     end verify_termination;

     end kermit_server_;
