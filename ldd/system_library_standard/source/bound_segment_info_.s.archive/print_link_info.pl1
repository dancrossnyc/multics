/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(86-07-31,Elhard), approve(86-07-31,MCR7457),
     audit(86-11-05,DGHowe), install(86-11-20,MR12.0-1222):
     Modified to iterate across components 1 to N of an object MSF.
  2) change(88-09-21,TLNguyen), approve(88-09-21,MCR7997),
     audit(88-10-03,Parisek), install(88-10-06,MR12.2-1135):
     Change the print_link_info command to return selected items of information
     for the specified object segment.
                                                   END HISTORY COMMENTS */


/* Print Link Info - command to display the contents of a standard Multics object segment.

   Designed and Initially coded by Michael J. Spier, March 17, 1971
   modified 75/06/05 by M. Weaver to remove call to old_print_link_info
   modified 76/07/28 by S. Webber to use get_temp_segments_ and to add -header
   modified 77/03/03 by M. Weaver to handle case of -he only
   modified 78/10/12 by J. Spencer Love to add a cleanup handler.
   also changed to use clock builtin and singular version of get_temp_segment_
   modified 82/03/08 by M. Weaver to handle archive components
*/

/* format: style3,^indnoniterdo */
print_link_info:
pli:
     procedure () options (variable);

/* Obligatory overhead */

dcl	(addr, clock, divide, min, null, ptr, substr, unspec)
			builtin;
dcl	cleanup		condition;

/* AUTOMATIC STORAGE VARIABLES */

dcl	(arg_count, last_path, arg_idx, arg_len)
			fixed bin;
dcl	status		fixed bin (35);
dcl	bitcount		fixed bin (24);
dcl	(my_arg_ptr, arg_ptr, p)
			ptr;
dcl	header_sw		bit (1) aligned;
dcl	msf_sw		bit (1);
dcl	componentname	char (32);
dcl	objname		char (32);
dcl	dirname		char (168);
dcl	date		char (24) aligned;

dcl	1 auto_form_link_info_args
			aligned like form_link_info_args;

/* STATIC VARIABLES AND CONSTANTS */

dcl	who_am_i		char (16) static init ("print_link_info") options (constant);

/* BASED STRUCTURES */

dcl	arg		char (arg_len) unaligned based (my_arg_ptr);

%include form_link_info_args;
%include object_info;

/* EXTERNALS */

dcl	active_fnc_err_	entry () options (variable);
dcl	check_star_name_$entry
			entry (char (*), fixed bin (35));
dcl	com_err_		entry () options (variable);
dcl	com_err_$suppress_name
			entry () options (variable);
dcl	cu_$af_arg_count	entry (fixed bin, fixed bin (35));
dcl	cu_$arg_ptr	entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl	date_time_	entry (fixed bin (71), char (*) aligned);
dcl	error_table_$badopt external fixed bin (35);
dcl	error_table_$dirseg external fixed bin (35);
dcl	error_table_$nostars
			ext fixed bin (35);
dcl	error_table_$not_act_fnc
			fixed bin (35) external;
dcl	expand_pathname_$component
			entry (char (*), char (*), char (*), char (*), fixed bin (35));
dcl	form_link_info_	entry (ptr, fixed bin (35));
dcl	get_system_free_area_
			entry() returns(ptr);
dcl	get_temp_segment_	entry (char (*), ptr, fixed bin (35));
dcl	hcs_$terminate_noname
			entry (ptr, fixed bin (35));
dcl	initiate_file_$component
			entry (char (*), char (*), char (*), bit (*), ptr, fixed bin (24), fixed bin (35));
dcl	ioa_		entry () options (variable);
dcl	iox_$put_chars	entry (ptr, ptr, fixed bin (22), fixed bin (35));
dcl	iox_$user_output	ext ptr;
dcl	object_lib_$get_component_info
			entry (ptr, ptr, char(8), char(*), ptr,
		          fixed bin(35));
dcl	object_lib_$initiate
			entry (char (*), char (*), char (*), bit (1), ptr, fixed bin (24), bit (1), fixed bin (35));
dcl	release_temp_segment_
			entry (char (*), ptr, fixed bin (35));
dcl	pathname_$component entry (char (*), char (*), char (*)) returns (char (194));

	call cu_$af_arg_count (arg_count, status);
	if status = 0
	then do;
	     call active_fnc_err_ (0, who_am_i, "This command may not be invoked as an active function.");
	     return;
	end;
	else if status ^= error_table_$not_act_fnc
	then do;
	     call com_err_ (status, who_am_i);
	     return;
	end;

          msf_sw = "0"b;                                    /* must be initialized */
	last_path = 0;
	header_sw = "1"b;
	unspec (auto_form_link_info_args) = "0"b;
	arg_ptr = addr (auto_form_link_info_args);
	form_link_info_args.version = form_link_info_args_version_1;

	do arg_idx = 1 to arg_count;			/* compile options */
	     call cu_$arg_ptr (arg_idx, my_arg_ptr, arg_len, status);
	     if status ^= 0
	     then do;
		call com_err_ (status, who_am_i, "Getting argument #^d.", arg_idx);
		return;
	     end;
	     if substr (arg, 1, min (1, arg_len)) ^= "-"
	     then last_path = arg_idx;		/* remember where last path is */
	     else if arg = "-no_header" | arg = "-nhe"
	     then header_sw = "0"b;
	     else if arg = "-header" | arg = "-he"
	     then form_link_info_args.flags.hd_sw = "1"b;
	     else if arg = "-length" | arg = "-ln"
	     then form_link_info_args.flags.ln_sw = "1"b;
	     else if arg = "-entry" | arg = "-et"
	     then form_link_info_args.flags.et_sw = "1"b;
	     else if arg = "-link" | arg = "-lk"
	     then form_link_info_args.flags.lk_sw = "1"b;
	     else if arg = "-long" | arg = "-lg"
	     then form_link_info_args.flags.lg_sw = "1"b;
	     else do;
		call com_err_ (error_table_$badopt, who_am_i, "^a", arg);
		return;
	     end;
	end;

	if last_path = 0
	then do;					/* wasn't any last path = wasn't any path */
	     call com_err_$suppress_name (0, who_am_i, "Usage is: pli paths {-control_args}");
	     return;
	end;
	if ^form_link_info_args.flags.hd_sw & ^form_link_info_args.flags.ln_sw & ^form_link_info_args.flags.et_sw
	     & ^form_link_info_args.flags.lk_sw
	then do;
	     form_link_info_args.flags.hd_sw = header_sw;
	     form_link_info_args.flags.ln_sw = "1"b;
	     form_link_info_args.flags.et_sw = "1"b;
	     form_link_info_args.flags.lk_sw = "1"b;
	end;
	else header_sw = form_link_info_args.flags.hd_sw; /* -header overrides -no_header */
	if form_link_info_args.flags.lg_sw
	then header_sw, form_link_info_args.flags.hd_sw = "1"b;
						/* -long forces -header */

/* Now proceed to print object segment information */

	form_link_info_args.list_ptr = null;
	form_link_info_args.obj_ptr = null;
	on cleanup
	     begin;
		if form_link_info_args.list_ptr ^= null ()
		then call release_temp_segment_ (who_am_i, form_link_info_args.list_ptr, status);
		if form_link_info_args.obj_ptr ^= null ()
		then call hcs_$terminate_noname (ptr (form_link_info_args.obj_ptr, 0), status);
	     end;
	call get_temp_segment_ (who_am_i, form_link_info_args.list_ptr, status);
	if status ^= 0
	then do;
	     call com_err_ (status, who_am_i, "Getting temp segment.");
	     return;
	end;

	do arg_idx = 1 to last_path;
	     call cu_$arg_ptr (arg_idx, my_arg_ptr, arg_len, status);
	     if substr (arg, 1, min (1, arg_len)) ^= "-"
	     then do;
		call expand_pathname_$component (arg, dirname, objname, componentname, status);
		if status ^= 0
		then do;
		     call com_err_ (status, who_am_i, "^a", arg);
		     goto finish_up;
		end;
		call check_star_name_$entry (objname, status);
		if status ^= 0
		then do;
		     if status = 1 | status = 2
		     then status = error_table_$nostars;
		     call com_err_ (status, who_am_i, "^a", objname);
		     go to finish_up;
		end;
		form_link_info_args.flags.cn_sw = (componentname ^= "");
		form_link_info_args.component_name = componentname;

		call initiate_file_$component (dirname, objname, componentname, "100"b, form_link_info_args.obj_ptr,
		     bitcount, status);
		if status = error_table_$dirseg & componentname = ""
		then call object_lib_$initiate (dirname, objname, "", "1"b, form_link_info_args.obj_ptr, bitcount,
			msf_sw, status);

		if form_link_info_args.obj_ptr = null ()
		then do;
error_return:
		     call com_err_ (status, who_am_i, "^a", pathname_$component (dirname, objname, componentname));
		     goto get_next;
		end;

		form_link_info_args.flags.bc_sw = "1"b;
		form_link_info_args.bit_count = bitcount;

		form_link_info_args.list_bc = 0;

/* if we have an msf use special handling */

		if msf_sw
		then call form_msf_link_info (status);
		else call form_link_info_ (arg_ptr, status);
						/* format information into listing segment */
		if status ^= 0
		then go to error_return;

		if header_sw
		then do;
		     call date_time_ (clock (), date);
		     call ioa_ ("^/^2-^a^4x^a", arg, date);
		end;
		call iox_$put_chars (iox_$user_output, form_link_info_args.list_ptr,
		     divide (form_link_info_args.list_bc, 9, 21, 0), status);

get_next:
		if form_link_info_args.obj_ptr ^= null ()
		then do;
		     p = ptr (form_link_info_args.obj_ptr, 0);
		     form_link_info_args.obj_ptr = null ();
						/* prevent race with cleanup handler */
		     call hcs_$terminate_noname (p, status);
		end;
	     end;
	end;

finish_up:
	if form_link_info_args.list_ptr ^= null ()
	then call release_temp_segment_ (who_am_i, form_link_info_args.list_ptr, status);
	return;

form_msf_link_info:
     proc (status);

dcl	status		fixed bin (35);

dcl	sys_areap		ptr;
dcl	sys_area		area based (sys_areap);
dcl	c		fixed bin;

%include object_lib_defs;

	sys_areap = get_system_free_area_ ();

	comp_infop = null;

	on cleanup
	     begin;
		if comp_infop ^= null
		then do;
		     do c = 1 to component_info.max;
			call hcs_$terminate_noname (component_info.comp (c).segp, 0);
		     end;
		     free component_info in (sys_area);
		end;
	     end;

	call object_lib_$get_component_info (form_link_info_args.obj_ptr, sys_areap, component_info_version_1, "none",
	     comp_infop, status);
	if status ^= 0
	then return;

	do c = 1 to component_info.max while (status = 0);
	     form_link_info_args.obj_ptr = component_info.comp (c).segp;
	     form_link_info_args.bit_count = component_info.comp (c).bc;

	     call form_link_info_ (arg_ptr, status);
	end;
	
	do c = 1 to component_info.max;
	     call hcs_$terminate_noname (component_info.comp (c).segp, 0);
	end;
	free component_info in (sys_area);

     end form_msf_link_info;

     end;						/* END OF EXTERNAL PROCEDURE print_link_info */


