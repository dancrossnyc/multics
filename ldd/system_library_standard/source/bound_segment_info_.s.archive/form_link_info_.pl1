/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(86-09-05,JMAthane), approve(86-09-05,MCR7525),
     audit(86-09-11,Martinson), install(86-11-12,MR12.0-1212):
     Fixed to stop link analysis before reference trap structure.  Now displays
     first reference trap info in a convenient format.  Now uses
     object_link_dcls.incl.pl1.
                                                   END HISTORY COMMENTS */

/* Form Link Info - subroutine to format object segment linkage information into printable file.

   Designed and Initially coded by Michael J. Spier, March 17, 1971   */
/* modified 6/75 by M. Weaver to use version 2 object_info_ structure */
/* modified 1/77 by S. Webber to sort entry names, use get_temp_segments_, and handle non-standard definitions */
/* modified 8/77 by M. Weaver to check perprocess static attribute */
/* modified 3/82 by M. Weaver to handle archive components */
/* Modified: 28 July 1982 by G. Palter to fix bug which caused a null component name to appear when called with the old
   format structure (eg: by create_data_segment_) */
/* Changed to use interpret_link_info.incl.pl1 05/16/83 S. Herbst */
/* modified 1/84 by M. Weaver to detect loop in definitions */
/* modified 4/84 by M. Weaver to copy dates so they are even-word aligned */
/* Modified JMAthane 11/24/84 to stop link analysis before first reference trap structure if any,
display first reference trap info if any, and use object_link_dcls.incl.pl1   */

/* format: style3,^indnoniterdo */


form_link_info_:
     procedure (P_arg_ptr, code);

dcl	P_arg_ptr		ptr,
	code		fixed bin (35);


/* DECLARATION OF EXTERNAL ENTRIES */

dcl	date_time_	entry (fixed bin (71), char (*) aligned);
dcl	(get_temp_segment_, release_temp_segment_)
			entry (char (*), ptr, fixed bin (35));
dcl	decode_definition_	entry (ptr, ptr) returns (bit (1) aligned);
dcl	decode_definition_$init
			entry (ptr, fixed bin (24));
dcl	hcs_$fs_get_path_name
			entry (ptr, char (*), fixed bin, char (*), fixed bin (35));
dcl	hcs_$status_mins	entry (ptr, fixed bin, fixed bin (24), fixed bin (35));
dcl	interpret_link_$tptr
			entry (ptr, ptr, ptr, fixed bin (35));
dcl	(
	ioa_$rs,
	ioa_$rsnnl
	)		entry options (variable);
dcl	object_info_$long	entry (ptr, fixed bin (24), ptr, fixed bin (35));
dcl	pathname_$component entry (char (*), char (*), char (*)) returns (char (194));

dcl	error_table_$bad_segment
			external fixed bin (35);

/* DECLARATION OF AUTOMATIC STORAGE VARIABLES */

dcl	(junk, i, j, lng, lslng, l1, link_offset)
			fixed bin;
dcl	orel		fixed bin (18);
dcl	offset21		fixed bin (21);
dcl	bitcount		fixed bin (24);
dcl	aligned_bin_date	fixed bin (71);
dcl	(counter, previous) fixed bin;
dcl	total_def_counter	fixed bin;
dcl	(p, argp, objp, dp, lp, listp, first_dp, arg_ptr)
			ptr;
dcl	(sblkp, smp)	ptr;
dcl	attributes	char (128) var;
dcl	n		fixed bin;
dcl	severity		fixed bin;
dcl	alm_or_bcpl	fixed bin;
dcl	first_link	bit (1) aligned;
dcl	get_out		bit (1) aligned;
dcl	new_defblock	fixed bin (1);
dcl	sortp		ptr;
dcl	objname		char (32);
dcl	dirname		char (168);
dcl	wst		char (256) aligned;
dcl	date		char (24) aligned;
dcl	user		char (40) aligned;
dcl	address		char (12) aligned;
dcl	entry		char (20) aligned;
dcl	link_end		fixed bin (18);
dcl	fr_trap_ptr	ptr;

dcl	1 dd		aligned,
	  2 next_def	ptr,
	  2 last_def	ptr,
	  2 block_ptr	ptr,
	  2 section	char (4) aligned,
	  2 offset	fixed bin,
	  2 entrypoint	fixed bin,
	  2 defname	char (32) aligned;

dcl	1 auto_form_link_info_args
			aligned like form_link_info_args;

/* DECLARATION OF BUILTIN FUNCTIONS */

dcl	(addr, addrel, bin, char, divide, index, rel, substr, length, null, rtrim, unspec)
			builtin;

/* DECLARATIONS OF STATIC STORAGE */

dcl	FT2		bit (6) aligned static options (constant) init ("100110"b);
dcl	newline		char (1) static init ("
");

/* DECLARATION OF BASED STRUCTURES */

dcl	1 sort		(0:1) aligned based (sortp),
	  2 thread	fixed bin,
	  2 def_info	char (32),
	  2 section	char (4),
	  2 offset	fixed bin,
	  2 entrypoint	fixed bin;

dcl	1 lsort		(0:1) aligned based (sortp),
	  2 thread	fixed bin,
	  2 link_address	char (12),
	  2 link_info	aligned like interpret_link_info;

dcl	1 args		aligned based (argp),
	  2 obj_ptr	ptr,
	  2 list_ptr	ptr,
	  2 list_bc	fixed bin,
	  2 hd_sw		bit (1) unaligned,
	  2 ln_sw		bit (1) unaligned,
	  2 et_sw		bit (1) unaligned,
	  2 lk_sw		bit (1) unaligned,
	  2 lg_sw		bit (1) unaligned;

dcl	listing		char (131072) based (listp);
dcl	string		char (131071) based (p);
dcl	based_fixed	fixed bin based;

dcl	cleanup		condition;

declare	1 oi		aligned like object_info;

/* \014 */
	arg_ptr, argp = P_arg_ptr;
	if form_link_info_args.version ^= form_link_info_args_version_1
	then do;					/* old input structure; copy first */
	     unspec (auto_form_link_info_args) = "0"b;
	     arg_ptr = addr (auto_form_link_info_args);
	     form_link_info_args.version = form_link_info_args_version_1;
	     form_link_info_args.list_bc = args.list_bc;
	     form_link_info_args.list_ptr = args.list_ptr;
	     form_link_info_args.obj_ptr = args.obj_ptr;
	     form_link_info_args.flags.hd_sw = args.hd_sw;
	     form_link_info_args.flags.ln_sw = args.ln_sw;
	     form_link_info_args.flags.et_sw = args.et_sw;
	     form_link_info_args.flags.lk_sw = args.lk_sw;
	     form_link_info_args.flags.lg_sw = args.lg_sw;
	     form_link_info_args.component_name = "";
	end;

	objp = form_link_info_args.obj_ptr;
	listp = form_link_info_args.list_ptr;
	lslng = divide (form_link_info_args.list_bc, 9, 17, 0);
						/* get size of list segment in characters */
	code = 0;					/* preset error code */
	sortp = null;				/* don't  call release_temp_segments_ unnecessarily */

	call hcs_$fs_get_path_name (objp, dirname, lng, objname, code);
	if code ^= 0
	then return;
	if form_link_info_args.flags.bc_sw
	then bitcount = form_link_info_args.bit_count;
	else do;
	     call hcs_$status_mins (objp, i, bitcount, code);
	     if code ^= 0
	     then return;
	end;

	oi.version_number = object_info_version_2;
	call object_info_$long (objp, bitcount, addr (oi), code);
	if code ^= 0
	then return;

	if ^oi.format.standard
	then if ^oi.format.old_format
	     then do;

		code = error_table_$bad_segment;
		return;

	     end;

	link_offset = bin (oi.linkp -> linkage_header.begin_links, 18);

	if form_link_info_args.flags.lk_sw | form_link_info_args.flags.et_sw
	then do;
	     sortp = null;
	     on cleanup call release_temp_segment_ ("form_link_info_", sortp, code);
	     call get_temp_segment_ ("form_link_info_", sortp, code);
	end;

	if form_link_info_args.flags.hd_sw
	then do;					/* print header information */
	     if oi.format.old_format & ((oi.compiler = "alm     ") | (oi.compiler = "bcpl    "))
	     then alm_or_bcpl = 1;
	     else alm_or_bcpl = 0;
	     call date_time_ (oi.compile_time, date);	/* convert object creation time */
	     user = " ";
	     if oi.format.standard
	     then do;				/* standard, we can get user name */
		substr (user, 1, 2) = "by";
		substr (user, 4, 32) = oi.userid;
		i = index (substr (user, 4, 34), " ") + 3;
		substr (user, i, 1) = newline;
	     end;
	     offset21 = bin (oi.cvers.offset, 18) * 4 + 1 + alm_or_bcpl;
						/* offset is from symb|0 */
	     lng = bin (oi.cvers.length, 18);
	     call ioa_$rs ("^2/Object Segment ^a^/Created on ^a^/^ausing ^a^[^/with separate static^;^]", wst, l1,
		pathname_$component (dirname, objname, (form_link_info_args.component_name)), date, user,
		substr (oi.symbp -> string, offset21, lng), oi.format.separate_static);
	     call put_list;

/* Do the following for long-format output */

	     if form_link_info_args.flags.lg_sw
	     then do;
		severity = 0;
		if ^oi.format.old_format
		then do;
		     sblkp = addrel (oi.symbp, oi.symbp -> sb.area_ptr);
		     if rel (sblkp)
		     then if sblkp -> pl1_symbol_block.identifier = "pl1info"
			then severity = sblkp -> pl1_symbol_block.greatest_severity;
		end;

		call ioa_$rs ("^/Translator:^-^a", wst, l1, oi.compiler);
		call put_list;

		offset21 = bin (oi.comment.offset, 18) * 4 + 1 + alm_or_bcpl;
		lng = bin (oi.comment.length, 18);
		call ioa_$rs ("Comment:^2-^a", wst, l1, substr (oi.symbp -> string, offset21, lng));
		call put_list;

		if severity > 0
		then do;
		     call ioa_$rs ("Severity:^2-^d", wst, l1, severity);
		     call put_list;
		end;

		if oi.source_map ^= 0
		then do;
		     call ioa_$rs ("Source:", wst, l1);
		     call put_list;
		     smp = addrel (oi.symbp, oi.source_map);
		     do n = 1 to smp -> source_map.number;
			offset21 = bin (smp -> source_map.map (n).pathname.offset, 18) * 4 + 1 + alm_or_bcpl;
			lng = bin (smp -> source_map.map (n).pathname.size, 18);
			unspec (aligned_bin_date) = unspec (smp -> source_map.map (n).dtm);
						/* copy date to align properly */
			call date_time_ (aligned_bin_date, date);
			call ioa_$rs ("   ^26a  ^a", wst, l1, date, substr (oi.symbp -> string, offset21, lng));
			call put_list;
		     end;
		end;

		if oi.entry_bound ^= 0
		then do;
		     call ioa_$rs ("Entry Bound^-^d", wst, l1, oi.entry_bound);
		     call put_list;
		end;

		if oi.text_boundary ^= 2
		then do;
		     call ioa_$rs ("Text Boundary^-^d", wst, l1, oi.text_boundary);
		     call put_list;
		end;

		if oi.static_boundary ^= 2
		then do;
		     call ioa_$rs ("Static Boundary^-^d", wst, l1, oi.static_boundary);
		     call put_list;
		end;

		attributes = "";
		if oi.format.old_format
		then attributes = attributes || "old_format, ";
		if oi.format.bound
		then attributes = attributes || "bound, ";
		if oi.format.relocatable
		then attributes = attributes || "relocatable, ";
		if oi.format.procedure
		then attributes = attributes || "procedure, ";
		if oi.format.standard
		then attributes = attributes || "standard, ";
		if oi.format.gate
		then attributes = attributes || "gate, ";
		if oi.format.separate_static
		then attributes = attributes || "separate_static, ";
		if oi.format.perprocess_static
		then attributes = attributes || "perprocess_static, ";
		if oi.format.links_in_text
		then attributes = attributes || "links_in_text, ";
		lng = length (attributes) - 2;
		if lng > 1
		then attributes = substr (attributes, 1, lng);
		call ioa_$rs ("Attributes:^-^a", wst, l1, attributes);
		call put_list;

	     end;
	end;
	if form_link_info_args.flags.ln_sw
	then do;					/* print length information */
	     orel = bin (rel (objp), 18);		/* Find offset of object (eg, for component of archive) */
	     call ioa_$rs ("^/^8xObject    Text    Defs    Link    Symb  Static^/Start^9o^8o^8o^8o^8o^8o", wst, l1,
		orel, bin (rel (oi.textp), 18) - orel, bin (rel (oi.defp), 18) - orel,
		bin (rel (oi.linkp), 18) - orel, bin (rel (oi.symbp), 18) - orel, bin (rel (oi.statp), 18) - orel);
	     call put_list;
	     call ioa_$rs ("Length  ^6o  ^6o  ^6o  ^6o  ^6o  ^6o", wst, l1, divide (bitcount, 36, 17, 0), oi.tlng,
		oi.dlng, oi.llng, oi.slng, oi.ilng);
	     call put_list;
	end;

	if form_link_info_args.flags.et_sw
	then do;					/* we want defs info */
	     first_dp = oi.defp;
	     if oi.format.standard
	     then first_dp = addrel (oi.defp, first_dp -> definition.forward);
						/* skip def section header */
	     total_def_counter = 0;			/* set loop detection counter */
	     counter = 0;				/* reset counter */
	     do dp = first_dp repeat addrel (oi.defp, dp -> definition.forward) while (dp -> based_fixed ^= 0);
		if ^dp -> definition.ignore
		then counter = counter + 1;		/* count defs that aren't ignored */
		total_def_counter = total_def_counter + 1;
		if total_def_counter > 8000
		then do;
		     call put_nl;
		     wst = "Cannot display definitions because of a loop.";
		     l1 = length (rtrim (wst));
		     call put_list;
		     call put_nl;
		     call put_nl;
		     go to print_links;		/* continue processing */
		end;
	     end;

	     call ioa_$rs ("^2/^d Definitions:^/", wst, l1, counter);
	     call put_list;

	     call decode_definition_$init (objp, bitcount);
	     dd.next_def = objp;			/* initialize definition search */
	     new_defblock = 1b;
	     get_out = "0"b;

	     if decode_definition_ (dd.next_def, addr (dd))
	     then goto print_links;
class_3:
	     if dd.section = "segn"
	     then do while ("1"b);

		     call put_nl;
		     if dd.next_def ^= dd.block_ptr
		     then address = "segnames:";
		     else address = "segname:";

		     wst = char (address, 12) || dd.defname;
		     l1 = length (rtrim (wst));
		     call put_list;
		     call put_nl;

		     if decode_definition_ (dd.next_def, addr (dd))
		     then goto print_links;
		     do while (dd.section = "segn");
			wst = (12)" " || dd.defname;
			l1 = length (rtrim (wst));
			call put_list;
			call put_nl;
			if decode_definition_ (dd.next_def, addr (dd))
			then goto print_links;
		     end;
		     call put_nl;

/* Now we've processed all segnames, do entroes... */

		     sort (0).thread = 0;
		     sort (0).def_info = "";

/* now search and sort within this class 3 list */

		     do j = 1 by 1;
			sort (j).def_info = dd.defname;
			sort (j).section = dd.section;
			sort (j).offset = dd.offset;
			sort (j).entrypoint = dd.entrypoint;

/* now sort */

			previous, i = 0;
merge_defs:
			if sort (j).def_info <= sort (i).def_info
			then do;
			     sort (previous).thread = j;
			     sort (j).thread = i;
			end;
			else if sort (i).thread = 0
			then do;
			     sort (j).thread = 0;
			     sort (i).thread = j;
			end;
			else do;
			     previous = i;
			     i = sort (i).thread;
			     goto merge_defs;
			end;
			if decode_definition_ (dd.next_def, addr (dd))
			then do;
			     get_out = "1"b;
			     goto print_defs;
			end;
			if dd.section = "segn"
			then goto print_defs;
		     end;

/* Now output the defs for this class 3 loop */

print_defs:
		     do i = sort (0).thread repeat sort (i).thread while (i ^= 0);
			call ioa_$rsnnl ("^a|^o", address, junk, sort (i).section, sort (i).offset);
			if sort (i).entrypoint ^= 0
			then entry = "Entrypoint";
			else entry = "";
			wst = char (address, 16) || char (sort (i).def_info, 32) || entry;
			l1 = length (rtrim (wst));
			call put_list;
			call put_nl;
		     end;
		     if get_out
		     then goto print_links;

		end;

	     else do while ("1"b);			/* no segname defs; just loop and print */
		     if dd.entrypoint ^= 0
		     then entry = "Entrypoint";
		     else entry = "";
		     call ioa_$rsnnl ("^a|^o", address, junk, dd.section, dd.offset);
		     wst = char (address, 16) || char (dd.defname, 32) || entry;
		     l1 = length (rtrim (wst));
		     call put_list;
		     call put_nl;
		     if decode_definition_ (dd.next_def, addr (dd))
		     then goto print_links;
		end;

	end;


print_links:
	if form_link_info_args.flags.lk_sw
	then do;					/* link info wanted */


/* Now print out linkage information */

	     if oi.linkp -> first_ref_relp = 0
	     then link_end = oi.llng;
	     else link_end = bin (oi.linkp -> first_ref_relp, 18);
	     counter = 0;				/* reset link counter */
	     do j = link_offset to link_end - 1 by 2;	/* first count number of links */
		p = addrel (oi.linkp, j);		/* ptr to tentative link */
		if p -> object_link.tag = FT2 & p -> object_link.mbz2 = "0"b
		then counter = counter + 1;
	     end;
	     j = 0;				/* reset j */
	     if counter > 0
	     then do;

		lsort (0).thread = 0;		/* initialize sort table */
		lsort (0).segment_name = " ";		/* ... */

		do link_offset = link_offset to link_end - 1 by 2;
						/* don't bother if no links */
		     p = addrel (oi.linkp, link_offset);
		     if (p -> object_link.tag = FT2) & (p -> object_link.mbz2 = "0"b)
		     then do;
			j = j + 1;		/* count the links */
			if addrel (p, p -> object_link.header_relp) ^= oi.linkp
			then lsort (j).segment_name = "***invalid link";
						/* link does not point to its header */
			else do;
			     lsort (j).link_info.version = INTERPRET_LINK_INFO_VERSION_1;
			     call interpret_link_$tptr (addr (lsort (j).link_info), p, objp, code);
			     if code ^= 0
			     then do;
				lsort (j).segment_name = "***invalid link";
				code = 0;
			     end;
			     else if lsort (j).segment_name = substr (lsort (j).entry_point_name, 2, 32)
			     then if lsort (j).expression = " "
				then if lsort (j).modifier = " "
				     then lsort (j).entry_point_name = " ";
			end;
			call ioa_$rsnnl ("link|^o", lsort (j).link_address, i, link_offset);
			previous, i = 0;
merge_in:
			if lsort (j).segment_name <= lsort (i).segment_name
			then do;
			     lsort (previous).thread = j;
			     lsort (j).thread = i;
			end;
			else if lsort (i).thread = 0
			then do;
			     lsort (j).thread = 0;
			     lsort (i).thread = j;
			end;
			else do;
			     previous = i;
			     i = lsort (i).thread;
			     goto merge_in;
			end;
		     end;
		end;
		do i = lsort (0).thread repeat lsort (i).thread while (i ^= 0);
		     if first_link ^= "1"b
		     then do;			/* no header for links */
			call ioa_$rs ("^2/^d Links:^/", wst, l1, counter);
			call put_list;
			first_link = "1"b;
		     end;
		     lp = addr (lsort (i).link_info);	/* ptr to link to be printed */
		     call ioa_$rs ("^12a^a^a^a^a^a", wst, l1, lsort (i).link_address, lsort (i).segment_name,
			lsort (i).entry_point_name, lsort (i).expression, lsort (i).modifier, lsort (i).trap);
		     call put_list;
		end;
		if oi.linkp -> first_ref_relp ^= 0
		then do;
		     call ioa_$rs ("^2/First reference trap:^/", wst, l1);
		     call put_list;
		     fr_trap_ptr = addrel (oi.linkp, oi.linkp -> first_ref_relp);
		     do j = 1 to fr_trap_ptr -> n_traps;
			call ioa_$rs ("call ^o, ^[no arg^;arg ^o^]", wst, l1, fr_trap_ptr -> call_relp (j),
			     fr_trap_ptr -> info_relp (j) = 0, fr_trap_ptr -> info_relp (j));
			call put_list;
		     end;
		end;
	     end;
	     else do;
		call ioa_$rs ("^2/No Links.", wst, l1);
		call put_list;
	     end;

	end;
	call ioa_$rs ("^2/", wst, l1);
	call put_list;

	if P_arg_ptr -> form_link_info_args.version = form_link_info_args_version_1
	then form_link_info_args.list_bc = lslng * 9;
	else args.list_bc = lslng * 9;
	if sortp ^= null
	then call release_temp_segment_ ("form_link_info_", sortp, code);

	return;

put_list:
     proc;					/* to place formatted output in caller's listing */

	substr (listing, lslng + 1, l1) = substr (wst, 1, l1);
						/* copy string into listing */
	lslng = lslng + l1;

	return;

     end put_list;

put_nl:
     proc;

	substr (listing, lslng + 1, 1) = newline;
	lslng = lslng + 1;
	return;

     end put_nl;					/* \014 */

%include form_link_info_args;

%include interpret_link_info;

%include object_link_dcls;

%include definition;

%include object_info;
%include source_map;
%include symbol_block;
%include pl1_symbol_block;

     end form_link_info_;
