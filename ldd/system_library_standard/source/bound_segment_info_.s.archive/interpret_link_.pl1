/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(86-06-24,DGHowe), approve(86-06-24,MCR7396), audit(86-11-12,Zwick),
     install(86-11-20,MR12.0-1222):
     add an understanding of heap links
                                                   END HISTORY COMMENTS */


/* Procedure to decode a given link and return to the caller a symbolic and
   directly printable interpretation of it.

   Initially designed and coded by Michael J. Spier, March 2, 1971
   Modified by Richard A. Barnes, October 14, 1974 for interpret_link_$tptr	*/
/* Modified 5/26/75 by M. Weaver  to add *static segref code */
/* modified 9/19/75 by M. Weaver to use standard include files */
/* modified 1/30/76 by S. Webber to handle *system links */
/* modified 12/76 by M. Weaver to  be compatible with new stack_header include file */
/* modified 10/77 by R. Barnes to print out more link info */
/* modified 8/82 BIM for better include files, entrypoint for checker */
/* Changed to use interpret_link_info.incl.pl1 05/12/83 S. Herbst */

interpret_link_: procedure (A_structure_ptr, A_link_ptr, A_code);

/* PARAMETERS */

declare (A_structure_ptr, A_link_ptr, text_ptr) pointer, A_code fixed bin (35);


/* DECLARATION OF EXTERNAL SYMBOLS */

declare  error_table_$no_defs fixed bin (35) external;
declare  error_table_$bad_link_type fixed bin (35) external;
declare  error_table_$no_linkage fixed bin (35) external;

/* ENTRIES */

declare  ioa_$rsnnl external entry options (variable);

/* DECLARATION OF INTERNAL STATIC VARIABLES */


declare  symbolic_modifier (0:63) char (4) aligned internal static
         initial ("    ", ",au ", ",qu ", ",du ", ",ic ", ",al ", ",ql ", ",dl ",
         ",x0 ", ",x1 ", ",x2 ", ",x3 ", ",x4 ", ",x5 ", ",x6 ", ",x7 ",
         ",*  ", ",au*", ",qu*", ",du*", ",ic*", ",al*", ",ql*", ",dl*",
         ",x0*", ",x1*", ",x2*", ",x3*", ",x4*", ",x5*", ",x6*", ",x7*",
         ",f1 ", ",itp", ",???", ",its", ",sd ", ",scr", ",f2 ", ",f3 ",
         ",ci ", ",*  ", ",sc ", ",ad ", ",di ", ",dic", ",id ", ",idc",
         ",*  ", ",*au", ",*qu", ",*du", ",*ic", ",*al", ",*ql", ",*dl",
         ",*x0", ",*x1", ",*x2", ",*x3", ",*x4", ",*x5", ",*x6", ",*x7");

/* DECLARATION OF AUTOMATIC STORAGE VARIABLES */

declare 1 auto_interpret_link_info aligned like interpret_link_info;

declare 1 old_interpret_link_info aligned based,
	2 segment_name char (32) aligned,
	2 entry_point_name char (33) aligned,
	2 expression char (8) aligned,
	2 modifier char (4) aligned,
	2 trap char (32) aligned;

declare (defbase, ili_ptr, lhp, linkp, original_lp, p, tpp, xp) pointer;
declare (have_textp, old_version_sw) bit (1) aligned;
declare (i, j, lng, type, offset, class) fixed bin;
declare  link_segment_no bit (18) aligned;
declare  modx fixed bin;
declare  segno fixed bin (18);
declare  searching bit (1) aligned;
declare  reloffset fixed bin (18);
declare  sign char (1) aligned;

/* DECLARATION OF BUILTIN FUNCTIONS */

declare (addr, addrel, baseno, bin, ptr, rel, substr) builtin;

/* DECLARATION OF BASED STRUCTURES */

declare 1 b1 aligned based (p),
        2 lhe18 fixed bin (18) unsigned unaligned,
        2 rhe18 fixed bin (18) unsigned unaligned;

declare 1 b7 aligned based (p),
        2 nwords fixed bin,
        2 dA_code fixed bin;

declare  based_ptr pointer based (lhp);

/*  */

	have_textp = "0"b;
	go to join;

interpret_link_$tptr: entry (A_structure_ptr, A_link_ptr, text_ptr, A_code);

	have_textp = "1"b;

join:
	A_code = 0;
	if A_structure_ptr -> interpret_link_info.version = INTERPRET_LINK_INFO_VERSION_1 then do;
	     old_version_sw = "0"b;
	     ili_ptr = A_structure_ptr;		/* can put it right into caller's structure */
	end;
	else do;
	     old_version_sw = "1"b;
	     ili_ptr = addr (auto_interpret_link_info);
	end;

	ili_ptr -> interpret_link_info.segment_name,
	     ili_ptr -> interpret_link_info.entry_point_name,
	     ili_ptr -> interpret_link_info.expression,
	     ili_ptr -> interpret_link_info.modifier,
	     ili_ptr -> interpret_link_info.trap = "";

	linkp = A_link_ptr;				/* copy argument for efficiency */

	if linkp -> object_link.tag = ITS_MODIFIER then do;
						/* we have a snapped link, we must find unsnapped version */
	     sb = ptr (addr (p), 0);			/* get ptr to stack header */
	     lotp = sb -> stack_header.lot_ptr;		/* get ptr to lot from stack header */
	     offset = bin (rel (linkp), 18);		/* get offset of snapped link in linkage segment */
	     link_segment_no = baseno (linkp);		/* get segment number of linkage segment */
	     searching = "1"b;
	     do segno = 80 to sb -> stack_header.cur_lot_size while (searching); /* scan the lot */
		lhp = lot (segno).lp;
		if baseno (lhp) = link_segment_no then do;
		     reloffset = offset - bin (rel (lhp), 18);
						/* get offset into linkage section */
		     if reloffset >= lhp -> linkage_header.begin_links then
						/* might be in this section */
			if reloffset < lhp -> linkage_header.block_length then do;
						/* we found the right linkage section */
			     if lhp -> linkage_header.unused then original_lp = addr (lhp -> linkage_header.unused) -> based_ptr;
			     else original_lp = lhp -> linkage_header.original_linkage_ptr;
						/* get pointer to virgin section */
			     linkp = addrel (original_lp, reloffset); /* get pointer to unsnapped link */
			     if linkp -> object_link.tag = FAULT_TAG_2 then
				goto start;
			     searching = "0"b;	/* stop the search */
			end;
		end;
	     end;

	     A_code = error_table_$no_linkage;
	     return;
	end;

	else if linkp -> object_link.tag = FAULT_TAG_2 then
						/* its unsnapped, no problem */
	     lhp = addrel (linkp, linkp -> object_link.header_relp);
						/* pointer to linkage block header */

	else do;
	     A_code = error_table_$bad_link_type;
	     return;
	end;

start:

	if lhp -> its.its_mod = ITS_MODIFIER		/* linkage header begins with pointer */
	then defbase = lhp -> linkage_header.def_ptr;	/* we have pointer to definition section */
	else do;					/* virgin linkage section, locate defs */
	     if lhp -> virgin_linkage_header.defs_in_link = "0"b
						/* defs in text */
	     then if have_textp
		then defbase = addrel (text_ptr, lhp -> virgin_linkage_header.def_offset);
		else defbase = ptr (lhp, lhp -> virgin_linkage_header.def_offset);
	     else if lhp -> virgin_linkage_header.defs_in_link = "010000"b
						/* defs in linkage */
	     then defbase = addrel (lhp, lhp -> virgin_linkage_header.def_offset);
	     else do;
		A_code = error_table_$no_defs;	/* cannot locate defs */
		return;
	     end;
	end;

	xp = addrel (defbase, linkp -> object_link.expression_relp);	/* pointer to link's expression word */

	modx = bin (linkp -> object_link.modifier, 6);	/* get the modifier */
	go to EXPRESSION_JOIN;

given_exp: entry (A_structure_ptr, Exp_relp, Modifier, Def_section_ptr, A_code);

declare Exp_relp fixed bin (18);
declare Def_section_ptr pointer;
declare Modifier bit (6) unaligned;

	A_code = 0;
	if A_structure_ptr -> interpret_link_info.version = INTERPRET_LINK_INFO_VERSION_1 then do;
	     old_version_sw = "0"b;
	     ili_ptr = A_structure_ptr;		/* can put it directly into caller's structure */
	end;
	else do;
	     old_version_sw = "1"b;
	     ili_ptr = addr (auto_interpret_link_info);
	end;

	xp = addrel (Def_section_ptr, Exp_relp);
	modx = bin (Modifier, 6);
	defbase = Def_section_ptr;
	ili_ptr -> interpret_link_info.segment_name,
	     ili_ptr -> interpret_link_info.entry_point_name,
	     ili_ptr -> interpret_link_info.expression,
	     ili_ptr -> interpret_link_info.modifier,
	     ili_ptr -> interpret_link_info.trap = "";

EXPRESSION_JOIN:

	if xp -> exp_word.expression ^= 0 then do;	/* there is an xp -> exp_word.expression */
	     sign = "+";				/* assume its positive */
	     i = xp -> exp_word.expression;		/* convert value to fixed bin */
	     if i < 0 then do;			/* display negative value as minus sign	& 	*/
	          i = -i;				/*   positive octal value.			*/
		sign = "-";
	     end;
	     call ioa_$rsnnl ("^a^o", ili_ptr -> interpret_link_info.expression, lng, sign, i);
	end;
	tpp = addrel (defbase, xp -> exp_word.type_relp);	/* pointer to type-pair  */

	type = tpp -> type_pair.type;			/* get type of link */
	if (type = LINK_SELF_BASE) |
	   (type = LINK_SELF_OFFSETNAME) then do;	/* self relative links */
	     class = tpp -> type_pair.segname_relp;	/* get segref A_code */
	     if (class >= CLASS_TEXT) &
	        (class <= CLASS_HEAP) then
		ili_ptr -> interpret_link_info.segment_name = 
			 SYMBOLIC_SECTION_NAMES (class);
	     else do;
		A_code = error_table_$bad_link_type;
		return;
	     end;
	end;
	else do;					/* links with symbolic segname */
	     p = addrel (defbase, tpp -> type_pair.segname_relp);
						/* pointer to segname ACC string */
	     ili_ptr -> interpret_link_info.segment_name =
	          p -> acc_string.string;
	end;

	if (type = LINK_SELF_BASE) |
	   (type = LINK_REFNAME_BASE) then
	     substr (ili_ptr -> interpret_link_info.entry_point_name, 1, 2) = "|0";
	else do;
	     p = addrel (defbase, tpp -> type_pair.offsetname_relp);
						/* pointer to entryname ACC string */
	     substr (ili_ptr -> interpret_link_info.entry_point_name, 1, 1) = "$";
	     substr (ili_ptr -> interpret_link_info.entry_point_name, 2) = 
		p -> acc_string.string;
	end;

	ili_ptr -> interpret_link_info.modifier = symbolic_modifier (modx);
						/* and convert to symbolic */

	if tpp -> type_pair.trap_relp ^= 0 then		/* there is a trap before link */
	     do;
	     p = addrel (defbase, tpp -> type_pair.trap_relp);
						/* pointer to trap-pair */
	     if (type = LINK_CREATE_IF_NOT_FOUND) | 
	        (type = LINK_SELF_OFFSETNAME & class = CLASS_SYSTEM) |
	        (type = LINK_SELF_OFFSETNAME & class = CLASS_HEAP) then do; /* create if not found, or *system or *heap */
		     call ioa_$rsnnl ("	Init -> def|^o, length = ^d", ili_ptr -> interpret_link_info.trap,
		     lng, tpp -> type_pair.trap_relp, p -> nwords);
	     end;
	     else do;				/* have real trap before link */
		i = p -> lhe18;			/* offset of call link */
		j = p -> rhe18;			/* offset of arg link */
		call ioa_$rsnnl ("	Trap: call ^o, arg ^o", ili_ptr -> interpret_link_info.trap, lng, i, j);
	     end;
	end;

	if old_version_sw then do;
	     A_structure_ptr -> old_interpret_link_info.segment_name = ili_ptr -> interpret_link_info.segment_name;
	     A_structure_ptr -> old_interpret_link_info.entry_point_name =
		substr(ili_ptr -> interpret_link_info.entry_point_name,1,33);
	     A_structure_ptr -> old_interpret_link_info.expression = ili_ptr -> interpret_link_info.expression;
	     A_structure_ptr -> old_interpret_link_info.modifier = ili_ptr -> interpret_link_info.modifier;
	     A_structure_ptr -> old_interpret_link_info.trap = 
		substr(ili_ptr -> interpret_link_info.trap,1,32);
	end;

	return;

%page;
/* Include Files */
%include interpret_link_info;
%page;
%include lot;
%page;
%include definition_dcls;
%page;
%include object_link_dcls;
%page;
%include its;
%page;
%include stack_header;
     end interpret_link_;
