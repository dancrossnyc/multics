/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


system_type: procedure () options (variable);

/* *	SYSTEM_TYPE
   *
   *	Simple command/AF to canonicalize system type names, or return the
   *	name for the type of the current system.
   *
   *	03/23/81, W. Olin Sibert
   */

dcl  code fixed bin (35);
dcl  arg_count fixed bin;
dcl  arg char (arg_lth) based (arg_ptr);
dcl  arg_ptr pointer;
dcl  arg_lth fixed bin (21);
dcl  ret_str char (rs_lth) varying based (rs_ptr);
dcl  rs_ptr pointer;
dcl  rs_lth fixed bin (21);
dcl  af_sw bit (1) aligned;

dcl  input_name char (32);
dcl  output_name char (32);
dcl  type fixed bin;

dcl  active_fnc_err_ entry options (variable);
dcl  com_err_ entry options (variable);
dcl  cu_$af_return_arg entry (fixed bin, pointer, fixed bin (21), fixed bin (35));
dcl  cu_$arg_ptr entry (fixed bin, pointer, fixed bin (21), fixed bin (35));
dcl  ioa_ entry options (variable);
dcl  system_type_ entry (char (*), char (*), fixed bin, fixed bin (35));

dcl  error_table_$too_many_args fixed bin (35) external static;

dcl  WHOAMI char (32) internal static options (constant) init ("system_type");

/*  */

	call cu_$af_return_arg (arg_count, rs_ptr, rs_lth, code);
	af_sw = (code = 0);
	if af_sw then ret_str = "";

	if arg_count > 1 then do;
	     if af_sw then
		call active_fnc_err_ (error_table_$too_many_args, WHOAMI,
		     "^/Usage:^-[^a {SystemName}]", WHOAMI);
	     else call com_err_ (error_table_$too_many_args, WHOAMI,
		     "^/Usage:^-^a {SystemName}", WHOAMI);
	     return;				/* Nothing more to do here */
	     end;

	if arg_count = 1 then do;			/* Canonicalize a specified name */
	     call cu_$arg_ptr (1, arg_ptr, arg_lth, (0));
	     input_name = arg;
	     end;
	else input_name = "";			/* Otherwise, depend on system_type_ for the default */

	call system_type_ (input_name, output_name, type, code);

	if code ^= 0 then do;
	     if af_sw then
		call active_fnc_err_ (code, WHOAMI, """^a""", input_name);
	     else call com_err_ (code, WHOAMI, """^a""", input_name);
	     return;
	     end;

	if ^af_sw then				/* Print it out */
	     if (input_name = "") then
		call ioa_ ("Current system:^-^a", output_name);
	     else call ioa_ ("Canonical name:^-^a", output_name);
	else ret_str = output_name;			/* Otherwise, just return it */

	return;
	end system_type;
