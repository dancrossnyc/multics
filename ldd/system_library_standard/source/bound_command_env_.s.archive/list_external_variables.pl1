/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


list_external_variables: lev: proc;

/* This command prints information about selected external
   variables (*system link targets). */
/* coded October 1976 by M. Weaver */
/*  modified December 1976 by M. Weaver to  adjust ioa_control bounds  */
/* Modified November 1982 by T. Oke to change format for longer VLA sizes */
/* Modified December 1983 by M. Weaver to print sizes in decimal */

dcl (i, j, n, alng, nnames, nprinted, nchars) fixed bin;
dcl  code fixed bin (35);
dcl (hdrsw, lgsw, allsw, fatal) bit (1) aligned;
dcl (tp, np, aptr, vptr, alp) ptr;
dcl  arg char (alng) based (aptr);
dcl  vname char (65);
dcl  date char (24);
dcl  me char (23) aligned init ("list_external_variables") static options (constant);
dcl  ioa_control (0:3) char (30) var static options (constant) init (
	"^30a ^3o ^6o ^8d ^16a ^p",		/* short name -lg */
	"^a^/^31x^3o ^6o ^8d ^16a ^p",	/* long name -lg */
	"^30a ^3o ^6o ^8d",			/* short name -bf */
	"^a^/^31x^3o ^6o ^8d");		/* long name -bf */
dcl (error_table_$badopt, error_table_$too_many_args, error_table_$bigarg) ext fixed bin (35);
dcl (addr, baseno, bin, fixed, hbound, lbound, null, ptr, rel, substr) builtin;
dcl (com_err_, ioa_) entry options (variable);
dcl  cu_$arg_count entry () returns (fixed bin);
dcl  cu_$arg_ptr_rel entry (fixed bin, ptr, fixed bin, fixed bin (35), ptr);
dcl  cu_$arg_list_ptr entry () returns (ptr);
dcl  date_time_ entry (fixed bin (71), char (*));

%include system_link_names;


%include stack_header;



/* find out if there are any external variables */

	sb = ptr (addr (nnames), 0);
	tp = sb -> stack_header.sys_link_info_ptr;
	if tp = null then do;
no_variables:  call com_err_ (0, me, "There are no external variables.");
	     return;
	end;
	if tp -> variable_table_header.cur_num_of_variables < 1 then goto no_variables;

	hdrsw = "1"b;
	lgsw = "0"b;
	allsw = "0"b;
	fatal = "0"b;
	nnames = 0;
	nprinted = 0;
	alp = cu_$arg_list_ptr();
	n = cu_$arg_count ();

	begin;

dcl 1 list (n) aligned,
    2 name char (65),
    2 nsize fixed bin (17) unal,
    2 found bit (1) unal,
    2 pad bit (17) unal;


/* process all the arguments */

	     do i = 1 to n;
		call cu_$arg_ptr_rel (i, aptr, alng, code, alp);
		if code ^= 0 then do;
		     call com_err_ (code, me, arg);
		     fatal = "1"b;
		end;
		else if substr (arg, 1, 1) = "-" then do;
		     if arg = "-unlabelled_common" | arg = "-uc" then do;
			nnames = nnames + 1;
			list (nnames).name = "blnk*com";
			list (nnames).nsize = 8;
			list (nnames).found = "0"b;
		     end;
		     else if arg = "-long" | arg = "-lg" then lgsw = "1"b;
		     else if arg = "-all" | arg = "-a" then allsw = "1"b;
		     else if arg = "-no_header" | arg = "-nhe" then hdrsw = "0"b;
		     else do;
			call com_err_ (error_table_$badopt, me, arg);
			fatal = "1"b;
		     end;
		end;
		else do;
		     nnames = nnames + 1;
		     if nnames > hbound (list, 1) then do;
			call com_err_ (error_table_$too_many_args, me, "^d names maximum",
			     hbound (list, 1));
			return;
		     end;
		     if alng > 31 then do;
			call com_err_ (error_table_$bigarg, me, arg);
			fatal = "1"b;
		     end;
		     list (nnames).name = arg;
		     list (nnames).nsize = alng;
		     list (nnames).found = "0"b;
		end;
	     end;

	     if fatal then return;
	     if nnames = 0 then allsw = "1"b;		/* print all by default */

	     if hdrsw then do;
		if lgsw then call ioa_ (
		     "^/NAME^-^-         SEGMENT OFFSET   SIZE       ALLOCATED   INIT_PTR^/");
		else call ioa_ ("^/NAME^-^-         SEGMENT OFFSET   SIZE^/");
	     end;

/* loop through system name list, printing info for desired variables */


	     do i = lbound (tp -> variable_table_header.hash_table, 1) to
		     hbound (tp -> variable_table_header.hash_table, 1);
		do np = tp -> variable_table_header.hash_table (i) repeat
			np -> variable_node.forward_thread while (np ^= null);
		     if allsw then call print_it;
		     else do j = 1 to nnames;		/* see if this name matches any on list */
			if ^list (j).found then do;
			     if list (j).nsize = np -> variable_node.name_size
			     then if list (j).name = np -> variable_node.name then do;
				     call print_it;
				     list (j).found = "1"b;
				     nprinted = nprinted + 1;
				     if nprinted = nnames then return;
				     go to next_name;
				end;
			end;
		     end;
next_name:	end;
	     end;
	     if allsw then return;

	     call ioa_ ("^/The following variables were not found:");
	     do i = 1 to nnames;
		if ^list (i).found then do;
		     if list (i).name = "blnk*com" then vname = "unlabelled common";
		     else vname = list (i).name;
		     call ioa_ ("^a", vname);
		end;
	     end;

	end;					/* of begin block */

	return;



print_it:	proc;

	     if np -> variable_node.name = "blnk*com" then vname = "unlabelled common";
	     else vname = np -> variable_node.name;
	     vptr = np -> variable_node.vbl_ptr;
	     if lgsw then do;
		call date_time_ (np -> variable_node.time_allocated, date);
		aptr = np -> variable_node.init_ptr;
		call ioa_ (ioa_control (bin ((np -> variable_node.name_size > 31), 1)), vname, fixed (baseno (vptr), 15),
		     bin (rel (vptr), 18), np -> variable_node.vbl_size, substr (date, 1, 16), aptr);
	     end;
	     else call ioa_ (ioa_control (bin ((np -> variable_node.name_size > 31), 1)+2), vname,
		fixed (baseno (vptr), 15), bin (rel (vptr), 18), np -> variable_node.vbl_size);
	     return;

	end;					/* of print_it */


     end;
