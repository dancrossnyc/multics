/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1990   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(90-05-23,Gray), approve(90-05-23,MCR8175), audit(90-06-21,Huen),
     install(90-07-04,MR12.4-1019):
     Added cleanup handler to the condition handler to fix case where the
     condition command does a non-local goto.
                                                   END HISTORY COMMENTS */


on:
     procedure () options (variable);

/* This command/active function provides the capability to trap  conditions during
   the execution of a command line.  The user may specify a command line to be
   invoked on detection of the condition.

   Usage:		on conditions action_line {-control_args} subject_line

   */

/* Rewritten 24 April 1978 by G. Palter */
/* Modified 12/16/80, W. Olin Sibert, to add -retry_command_line control argument */
/* Modified 83-06-16, T. Oke, to only trim whitespace from the software msg. */

	dcl     argument		 character (argument_lth) based (argument_ptr);
	dcl     argument_lth	 fixed binary (21);
	dcl     argument_ptr	 pointer;

	dcl     return_value	 character (return_value_lth) varying based (return_value_ptr);
	dcl     return_value_lth	 fixed binary (21);
	dcl     return_value_ptr	 pointer;

	dcl     active_function	 bit (1) aligned;
	dcl     get_arg		 entry (fixed binary (21), pointer, fixed binary (21), fixed binary (35)) variable;
	dcl     complain		 entry () options (variable) variable;

	dcl     code		 fixed binary (35);

	dcl     argument_count	 fixed binary (21);

	dcl     (have_condlist, have_action, in_command,
	        restart_sw, retry_sw, call_cl_sw, call_cp_sw, long_sw, brief_sw) bit (1) aligned;

	dcl     subject		 character (subject_lth) aligned based (subject_ptr);
	dcl     subject_lth		 fixed binary (21);
	dcl     subject_ptr		 pointer;

	dcl     subject_used	 fixed binary (21);

	dcl     first_subject	 character (256) aligned;

	dcl     new_subject		 character (new_subject_lth) aligned based (new_subject_ptr);
	dcl     new_subject_lth	 fixed binary (21);
	dcl     new_subject_ptr	 pointer;

	dcl     condlist		 character (condlist_lth) based (condlist_ptr);
	dcl     condlist_lth	 fixed binary (21);
	dcl     condlist_ptr	 pointer;

	dcl     action		 character (action_lth) based (action_ptr);
	dcl     action_lth		 fixed binary (21);
	dcl     action_ptr		 pointer;

	dcl     exclude		 character (exclude_lth) based (exclude_ptr);
	dcl     exclude_lth		 fixed binary (21);
	dcl     exclude_ptr		 pointer;

	dcl     system_area		 area based (system_area_ptr);
	dcl     system_area_ptr	 pointer;

	dcl     (idx, idx2, name_lth)	 fixed binary (21);

	dcl     invocation_depth	 fixed binary;

	dcl     WHITESPACE		 character (5) static options (constant) initial ("
 	");						/* NL SP HT VT FF */
	dcl     PUNCTUATION		 character (2) static options (constant) initial (" ,");
	dcl     NL		 character (1) static options (constant) initial ("
");

	dcl     (error_table_$badopt,
	        error_table_$inconsistent,
	        error_table_$not_act_fnc,
	        error_table_$wrong_no_of_args) fixed binary (35) external;

	dcl     iox_$user_io	 pointer external;

	dcl     active_fnc_err_	 entry () options (variable);
	dcl     com_err_		 entry () options (variable);
	dcl     condition_		 entry (character (*), entry);
	dcl     condition_interpreter_ entry (pointer, pointer, fixed binary (21), fixed binary,
				 pointer, character (*), pointer, pointer);
	dcl     cu_$af_arg_ptr	 entry (fixed binary (21), pointer, fixed binary (21), fixed binary (35));
	dcl     cu_$af_return_arg	 entry (fixed binary (21), pointer, fixed binary (21), fixed binary (35));
	dcl     cu_$arg_count	 entry (fixed binary (21));
	dcl     cu_$arg_ptr		 entry (fixed binary (21), pointer, fixed binary (21), fixed binary (35));
	dcl     cu_$cl		 entry () options (variable);
	dcl     cu_$cp		 entry (pointer, fixed binary (21), fixed binary (35));
	dcl     get_system_free_area_	 entry () returns (pointer);
	dcl     ioa_$ioa_switch	 entry () options (variable);

	dcl     (any_other, cleanup)	 condition;

	dcl     (addr, empty, index, length, max, null, search, substr, verify) builtin;


/* Initialization */

	call cu_$af_return_arg (argument_count, return_value_ptr, return_value_lth, code);

	if code = 0
	then do;					/* invoked as an active function */
		active_function = "1"b;
		get_arg = cu_$af_arg_ptr;
		complain = active_fnc_err_;
		return_value = "false";		/* assume nothin raised */
	     end;

	else if code = error_table_$not_act_fnc
	then do;					/* command */
		active_function = "0"b;
		call cu_$arg_count (argument_count);
		get_arg = cu_$arg_ptr;
		complain = com_err_;
	     end;

	else do;					/* strange error */
		call com_err_ (code, "on");
		return;
	     end;


	have_condlist,				/* seen list of conditions to trap */
	     have_action,				/* seen action to perfom */
	     in_command = "0"b;			/* fetching subject line */

	subject_ptr = addr (first_subject);		/* use automatic space */
	subject_lth = length (first_subject);

	first_subject = "";

	subject_used = 0;				/* empty at the moment */

	condlist_ptr,
	     action_ptr,
	     exclude_ptr = null ();

	condlist_lth,
	     action_lth,
	     exclude_lth = 0;			/* list of conditions to exclude */


	restart_sw,				/* automatic restart */
	     retry_sw,				/* retry the command line if the condition occurs */
	     call_cl_sw,				/* invoke the listener */
	     call_cp_sw,				/* have some action to perform */
	     long_sw,				/* print long message */
	     brief_sw = "0"b;			/* print no messages */


	system_area_ptr = get_system_free_area_ ();


	on cleanup
	     begin;
		if subject_ptr ^= addr (first_subject) then
		     free subject in (system_area);	/* free storage */
	     end;


/* Process argument list */

	do idx = 1 to argument_count;

	     call get_arg (idx, argument_ptr, argument_lth, code);
	     if code ^= 0 then do;
		     call complain (code, "on", "Fetching argument #^d", idx);
		     go to RETURN;
		end;


	     if in_command
	     then do;				/* in subject command line */
CLARG:
		     if subject_used + argument_lth + 1 > subject_lth
		     then do;			/* must allocate more room for command line */
			     new_subject_lth = max ((2 * subject_lth), (subject_lth + argument_lth));
			     allocate new_subject in (system_area) set (new_subject_ptr);
			     new_subject = subject;
			     if subject_ptr ^= addr (first_subject) then
				free subject in (system_area); /* free old copy */
			     subject_ptr = new_subject_ptr;
			     subject_lth = new_subject_lth;
			end;
		     substr (subject, (subject_used + 1), argument_lth) = argument;
		     subject_used = subject_used + argument_lth + 1;
		end;


	     else do;				/* process options, conditions, etc */

		     if substr (argument, 1, 1) = "-"
		     then do;			/* an option */
			     if (argument = "-restart") | (argument = "-rt")
			     then if retry_sw
				then do;
					call complain (error_table_$inconsistent, "on", """-restart"" and ""-retry_command_line"".");
					goto RETURN;
				     end;
				else restart_sw = "1"b;

			     else if argument = "-cl"
			     then if active_function
				then do;		/* -cl not allowed for active function */
					call complain (error_table_$badopt, "on", "Active function may not use ""-cl"".");
					go to RETURN;
				     end;
				else call_cl_sw = "1"b;

			     else if (argument = "-exclude") | (argument = "-ex")
			     then do;
				     idx = idx + 1; /* -exclude takes a list of conditions */
				     call get_arg (idx, argument_ptr, argument_lth, code);
				     if code ^= 0 then do;
					     call complain (code, "on", "Condition list for ""-exclude"".");
					     go to RETURN;
					end;
				     if exclude_ptr ^= null () then do;
					     call complain (error_table_$wrong_no_of_args, "on", """-exclude"" may only be used once.");
					     go to RETURN;
					end;
				     exclude_ptr = argument_ptr;
				     exclude_lth = argument_lth;
				end;

			     else if (argument = "-long") | (argument = "-lg")
			     then if brief_sw
				then do;		/* -brief and -long */
					call complain (error_table_$inconsistent, "on", """-long"" and ""-brief"".");
					go to RETURN;
				     end;
				else long_sw = "1"b;

			     else if (argument = "-brief") | (argument = "-bf")
			     then if long_sw
				then do;		/* -brief and -long */
					call complain (error_table_$inconsistent, "on", """-long"" and ""-brief"".");
					go to RETURN;
				     end;
				else brief_sw = "1"b;

			     else if (argument = "-retry_command_line") | (argument = "-rcl")
			     then if restart_sw
				then do;
					call complain (error_table_$inconsistent, "on", """-restart"" and ""-retry_command_line"".");
					goto RETURN;
				     end;
				else retry_sw = "1"b;

			     else do;
				     call complain (error_table_$badopt, "on", """^a"".", argument);
				     go to RETURN;
				end;
			end;


		     else do;			/* condition list, action, or start of subject */
			     if ^have_condlist
			     then do;
				     have_condlist = "1"b;
				     condlist_ptr = argument_ptr;
				     condlist_lth = argument_lth;
				end;

			     else if ^have_action
			     then do;
				     have_action = "1"b;
				     action_ptr = argument_ptr;
				     action_lth = argument_lth;
				end;

			     else do;
				     in_command = "1"b;
				     go to CLARG;
				end;
			end;
		end;
	end;


	if subject_used = 0 then do;
		call complain (0, "on", "Usage:  on conditions action {-control_args} subject");
		go to RETURN;
	     end;

	subject_used = subject_used - 1;		/* elimintate trailing space */

	if action_lth ^= 0
	then if verify (action, WHITESPACE) ^= 0
	     then call_cp_sw = "1"b;			/* actually something to do */


/* Set up handlers and invoke the subject line */

	idx = 1;

	do while (substr (condlist, idx) ^= "");	/* while something left */
	     name_lth = search (substr (condlist, idx), PUNCTUATION) - 1;
	     if name_lth < 0 then name_lth = length (condlist) - idx + 1; /* rest of list */

	     call condition_ ((substr (condlist, idx, name_lth)), handler);

	     idx = idx + name_lth;
	     idx2 = verify (substr (condlist, idx), PUNCTUATION) - 1;
	     if idx2 > 0 then idx = idx + idx2;
	end;


RETRY_COMMAND:
	invocation_depth = 0;			/* nothing raised yet */

	call cu_$cp (addr (subject), subject_used, (0));


RETURN:
	if subject_ptr ^= addr (first_subject) then
	     free subject in (system_area);

	return;


handler:
     procedure (mc_ptr, condition_name, wc_ptr, info_ptr, continue_sw);

/* This internal procedure is invoked to handle any of the conditions being
   trapped.  It process all control arguments.
   */

	dcl     mc_ptr		 pointer;		/* machine conditions */
	dcl     condition_name	 character (*);	/* the conditions raised */
	dcl     wc_ptr		 pointer;		/* wall crossing */
	dcl     info_ptr		 pointer;		/* software information */
	dcl     continue_sw		 bit (1);		/* ON if the condition should continue up */

%include condition_info_header;

	dcl     1 software_data	 aligned like condition_info_header based (info_ptr);

	dcl     small_area		 area;
	dcl     (idx, idx2, idx3)	 fixed binary (21);
	dcl     name_lth		 fixed binary (21);

	dcl     error_msg		 character (error_msg_lth) based (error_msg_ptr);
	dcl     error_msg_lth	 fixed binary (21);
	dcl     error_msg_ptr	 pointer;

	dcl     old_invocation_depth	fixed binary;

	dcl     software_msg	 character (256) varying;

	dcl     length		 builtin;


/* Scan exclude list to see if we should ignore this condition */

	if exclude_lth ^= 0 then do;
		idx = 1;

		do while (substr (exclude, idx) ^= "");
		     name_lth = search (substr (exclude, idx), PUNCTUATION) - 1;
		     if name_lth < 0 then name_lth = length (exclude) - idx + 1; /* rest of list */

		     if condition_name = substr (exclude, idx, name_lth) then do;
			     continue_sw = "1"b;	/* give it to superiors */
			     return;
			end;

		     idx = idx + name_lth;
		     idx2 = verify (substr (exclude, idx), PUNCTUATION) - 1;
		     if idx2 > 0 then idx = idx + idx2;
		end;
	     end;


/* Print a message if requested */

	if ^brief_sw then do;
		software_msg = "";

		if info_ptr ^= null then
		     if software_data.version >= 1 then
			if length (software_data.info_string) > 0 then do;
				software_msg = software_data.info_string;
				if verify (substr (software_msg, length (software_msg), 1), WHITESPACE) = 0 then
				     software_msg = substr (software_msg, 1, length (software_msg) - 1);
			     end;

		call ioa_$ioa_switch (iox_$user_io, "on:  Condition ""^a"" raised.  ^a",
		     condition_name, software_msg);
	     end;


/* Check for recursive signalling */

	old_invocation_depth = invocation_depth;
on	cleanup invocation_depth = old_invocation_depth;
	invocation_depth = invocation_depth + 1;

	if invocation_depth > 2 then go to RETURN;	/* bad loop */
	else if invocation_depth > 1 then do;
		call ioa_$ioa_switch (iox_$user_io, "on:  Recursive signalling of ""^a"".", condition_name);
		go to RETURN;
	     end;


/* If an active function, indicate a condition was trapped */

	if active_function then
	     return_value = "true";


/* Print detailed information if requested */

	if long_sw then do;
		call condition_interpreter_ (addr (small_area), error_msg_ptr, error_msg_lth,
		     3, mc_ptr, condition_name, wc_ptr, info_ptr);

		idx = 1;
		idx2 = index (error_msg, "Error");	/* trim the message somewhat */
		if (idx2 > 0) & (idx2 < 4) then
		     idx = idx2 + 6;

		idx2 = verify (substr (error_msg, idx), " ");
		if idx2 > 0 then
		     idx = idx + idx2 - 1;

		idx2 = idx;
		do idx3 = idx to error_msg_lth;
		     if substr (error_msg, idx3, 1) = NL then do;
			     call ioa_$ioa_switch (iox_$user_io, "^a", substr (error_msg, idx2, idx3 - idx2));
			     idx2 = idx3 + 1;
			end;
		end;
	     end;					/* no need to free it as the area is in automatic */


/* Invoke the action command line, call the listener, and restart */

	if call_cp_sw then
	     call cu_$cp (action_ptr, action_lth, (0));

	invocation_depth = old_invocation_depth;

	if call_cl_sw then do;
		on any_other system;
		call cu_$cl ((36)"0"b);
		revert any_other;
	     end;

	if restart_sw then
	     if info_ptr = null () then
		return;				/* can probably restart */
	     else if software_data.cant_restart then
		call ioa_$ioa_switch (iox_$user_io, "on:  Can not restart ""^a"".", condition_name);
	     else return;

	if retry_sw then /* Try the command line again */
	     goto RETRY_COMMAND;

	go to RETURN;				/* abort */

     end handler;

     end on;
