/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


set_severity_indicator: ssi: proc ();


/*

   This command sets a specified severity indicator.

   Usage: ssi severity_indicator indicator_value

   where severity_indicator is the name of the severity indicator to be set
   to the indicator value specified.

   Written 5/6/80 by Michael R. Jordan
   Modified for installation 5/81 by Michael R. Jordan.

*/

/*		CONSTANTS			*/


dcl  ME char (22) static options (constant) init ("set_severity_indicator");


/*		STATIC DATA		*/


/*		AUTOMATIC			*/


dcl  found bit (1) aligned;				/* ON => variable was found */
dcl  node_ptr ptr;					/* ptr to variable node */
dcl  code fixed bin (35);				/* error code */
dcl  nargs fixed bin;				/* number of command arguments supplied */
dcl  arg_ptr ptr;					/* ptr to arg */
dcl  arg_len fixed bin;				/* length of arg */
dcl  indicator_name char (22);			/* severity indicator name */

dcl 1 my_init_info like init_info_single_word;


/*		BASED			*/


dcl  arg char (arg_len) based (arg_ptr);		/* a command line argument */
dcl  severity_indicator fixed bin (35) aligned based;


/*		EXTERNAL ENTRIES		*/


dcl  cv_dec_check_ entry (char (*), fixed bin (35)) returns (fixed bin (35));
dcl  cu_$arg_count entry (fixed bin);
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  set_ext_variable_ entry (char (*), ptr, ptr, bit (1) aligned, ptr, fixed bin (35));
dcl  com_err_ entry options (variable);


/*		ERROR CODES		*/


dcl  error_table_$bad_arg fixed bin (35) ext;
dcl  error_table_$wrong_no_of_args fixed bin (35) ext;
dcl  error_table_$bigarg fixed bin (35) ext;


/*		BUILTINS and CONDITIONS	*/


dcl  addr builtin;
dcl  length builtin;
dcl  rtrim builtin;
dcl  stackbaseptr builtin;

	my_init_info.size = 1;
	my_init_info.type = TEMPLATE_INIT;
	my_init_info.init_template (1) = 0;


/*

   Make sure there are the proper number of arguments.

*/


	call cu_$arg_count (nargs);			/* get number of args */
	if nargs ^= 2
	then do;
	     code = error_table_$wrong_no_of_args;
USAGE:	     call com_err_ (code, ME, "^/Usage:  ^a indicator_name indicator_value", ME);
	     return;
	end;


/*

   First we must get the severity indicator name.  We should also make sure it is
   a valid severity indicator name.

*/


	call cu_$arg_ptr (1, arg_ptr, arg_len, code);
	if code ^= 0
	then do;
	     call com_err_ (code, ME, "Cannot get argument #1.");
	     return;
	end;
	indicator_name = arg;
	if indicator_name ^= arg			/* name too long */
	then do;
	     call com_err_ (error_table_$bigarg, ME,
		"^a^/The maximum length for a severity indicator name is ^d characters.",
		arg, length (indicator_name));
	     return;
	end;


/*

   Next we should get the new value for the indicator.  It must be a valid
   decimal integer.

*/


	call cu_$arg_ptr (2, arg_ptr, arg_len, code);
	if code ^= 0
	then do;
	     call com_err_ (code, ME, "cannot get argument #2.");
	     return;
	end;
	my_init_info.init_template (1) = cv_dec_check_ (arg, code);
	if code ^= 0				/* bad indicator value */
	then do;
	     call com_err_ (error_table_$bad_arg, ME,
		"^/Severity indicator value must be a decimal integer.");
	     return;
	end;


/*

   And, at last, we can attempt to create and set the indicator.  If the
   indicator already exists we can try to reset it.  If the data type 'seems'
   incompatible we will complain.  (Note that in the current implementation the
   only check we can make is that the indicator is a one word value.)

*/


	call set_ext_variable_ (rtrim (indicator_name) || "_severity_", addr (my_init_info), stackbaseptr (), found, node_ptr, code);
	if code ^= 0
	then do;
	     call com_err_ (code, ME, "^/Error setting the severity indicator ^a.", indicator_name);
	     return;
	end;
	if found					/* in this case we must reset the indicator */
	then do;
	     if node_ptr -> variable_node.vbl_size ^= 1
	     then do;
		call com_err_ (0b, ME, "Severity indicator ^a is not a single word variable.", indicator_name);
		return;
	     end;
	     node_ptr -> variable_node.vbl_ptr -> severity_indicator = my_init_info.init_template (1);
	end;

	return;

%include system_link_init_info;

%include system_link_names;


     end set_severity_indicator;
