/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* a real command interface for signal. Finally. */
/* format: style2 */

signal:
     procedure options (variable);


/* Coded 12/81 Benson I. Margulies */

	declare signal_		 entry (character (*), pointer, pointer, pointer);
	declare com_err_		 entry () options (variable);
	declare cu_$arg_count	 entry (fixed bin, fixed bin (35));
	declare cu_$arg_ptr		 entry (fixed bin, ptr, fixed bin (21), fixed bin (35));

	declare cv_ptr_		 entry (character (*), fixed binary (35)) returns (pointer);
	declare cv_ptr_$terminate	 entry (pointer);

	declare argument_count	 fixed bin;
	declare argument_ptr	 pointer;
	declare argument_length	 fixed bin (21);
	declare argument		 character (argument_length) based (argument_ptr);
	declare argx		 fixed bin;

	declare error_ptr		 pointer;
	declare error_name		 character (256);
	declare based_error_code	 fixed bin (35) based (error_ptr);

%include condition_info_header;
	declare 1 cih		 aligned like condition_info_header;

	declare condition_name	 character (256);
	declare code		 fixed bin (35);

	declare (
	        error_table_$badopt,
	        error_table_$too_many_args,
	        error_table_$noarg
	        )			 fixed bin (35) external static;
	declare ME		 character (32) init ("signal") internal static options (constant);
	declare cleanup		 condition;
	declare (unspec, substr, null, currentsize)
				 builtin;


	call cu_$arg_count (argument_count, code);
	if code ^= 0
	then do;
		call com_err_ (code, ME);
		return;
	     end;

	if argument_count = 0
	then do;
		call com_err_ (0, ME, "Usage: signal CONDITION -control_args");
		return;
	     end;

	error_ptr = null;
	on cleanup
	     begin;
		if error_ptr ^= null
		then call cv_ptr_$terminate (error_ptr);
	     end;
	condition_name = "";
	unspec (cih) = ""b;
	cih.version = 1;
	cih.info_string = " ";
	cih.length = currentsize (cih);

	do argx = 1 to argument_count;
	     call cu_$arg_ptr (argx, argument_ptr, argument_length, (0));
	     if substr (argument, 1, 1) ^= "-"
	     then do;
		     if condition_name ^= ""
		     then do;
			     call com_err_ (error_table_$too_many_args, ME, "Only one condition name may be given.")
				;
			     return;
			end;
		     condition_name = argument;
		end;
	     else if argument = "-info_string"
	     then do;
		     if cih.info_string ^= ""		/* -info_string "" -info_string foo will work, which is likely wrong */
		     then do;
			     call com_err_ (error_table_$too_many_args, ME, "Only one info_string may be given.");
			     go to RETURN;
			end;
		     if argx = argument_count
		     then do;
nostring:
			     call com_err_ (error_table_$noarg, ME,
				"An info string must be supplied with -info_string.");
			     go to RETURN;
			end;
		     argx = argx + 1;
		     call cu_$arg_ptr (argx, argument_ptr, argument_length, (0));
		     if substr (argument, 1, 1) = "-"
		     then go to nostring;
		     cih.info_string = argument;
		end;
	     else if argument = "-code"
	     then do;
		     if argx = argument_count
		     then do;
nocode:
			     call com_err_ (error_table_$noarg, ME,
				"An error table code must be supplied with -code.");
			     go to RETURN;
			end;
		     argx = argx + 1;
		     call cu_$arg_ptr (argx, argument_ptr, argument_length, (0));
		     if substr (argument, 1, 1) = "-"
		     then goto nocode;

		     if index (argument, "$") = 0
		     then error_name = "error_table_$" || argument;
		     else error_name = argument;
		     error_ptr = cv_ptr_ (error_name, code);
		     if code ^= 0
		     then do;
			     call com_err_ (code, ME, "^a", error_name);
			     return;
			end;
		     cih.status_code = based_error_code;
		end;
	     else if argument = "-cant_restart"
	     then cih.cant_restart = "1"b;
	     else if argument = "-default_restart"
	     then cih.default_restart = "1"b;
	     else if argument = "-quiet_restart"
	     then cih.quiet_restart = "1"b;
	     else if argument = "-support_signal"
	     then cih.support_signal = "1"b;
	     else do;
		     call com_err_ (error_table_$badopt, ME, "^a", argument);
		     go to RETURN;
		end;
	end;					/* the loop */

	if condition_name = ""
	then do;
		call com_err_ (error_table_$noarg, ME, "A condition name must be given.");
RETURN:
		if error_ptr ^= null
		then call cv_ptr_$terminate (error_ptr);
		return;
	     end;

	call signal_ (condition_name, null, addr (cih), null);
	go to RETURN;

     end signal;
