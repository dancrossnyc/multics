/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(88-08-29,TLNguyen), approve(88-08-29,MCR7961),
     audit(88-09-13,Parisek), install(88-09-15,MR12.2-1110):
     Call the cu_$af_return_arg to report error when users attempt to run the
     program_interrupt as an active function.
                                                   END HISTORY COMMENTS */


/* format: style2 */
program_interrupt:
pi:
     procedure;

/* initially coded in February 1970 by V. Voydock */
/* modified on February 8, 1970 at 3:50 P. M. by V. Voydock */
/* Modified 761026 by PG to convert to Version 2 PL/I */
/* Changed to use info structure by B. Margulies, July, 1981 */

/* the purpose of this program is to allow users of editors, subsystems and
   other complicated programs to "interrupt"  that program and re-enter it
   at a known place.  To make use of program_interrupt, a program must establish a
   condition handler for the condition "program_interrupt".  When the user wishes to
   "interrupt" a program he presses the "quit" button and types "program_interrupt" or
   "pi". For example, suppose qedx had a handler for "program_interrupt"
   which when it was entered, stopped whatever the editor was doing and
   looked for a request from the console.  Then a user of qedx who inadvertantly
   typed "1,$p" could kill this printout by hitting "quit" and then typing "pi"    */

%include condition_info_header;
%include program_interrupt_info;

/* entries */

	dcl     (active_fnc_err_, com_err_)
		                     entry () options (variable);
          dcl     cu_$af_return_arg      entry (fixed bin, pointer, fixed bin (21), fixed bin (35));
	dcl     signal_		 entry () options (variable);
	dcl     start		 entry options (variable);

/* automatic */

          dcl code                       fixed bin (35);

	declare 1 pi_info		 aligned like program_interrupt_info automatic;

/* builtin */
	declare (addr, currentsize, null,string)
                                         builtin;


	pi_info.version = program_interrupt_info_version_1;
	pi_info.length = currentsize (pi_info);
	string (pi_info.action_flags) = ""b;

/* We expect the default handler to have a special case for this
   condition, that sets the "default_handler_restarted" bit and
   then returns. just in case this gets signalled under a handler
   that does not grok this protocol, we set neither default restart
   nor quiet restart, so that the user gets up to level 2, as today. */

	pi_info.info_string = "";			/* avoid spurious messages */
	pi_info.status_code = 0;
	pi_info.default_handler_restarted_this_signal = "0"b;

	code = 0;

	call cu_$af_return_arg ((0), null (), (0), code);  /* report an error when the pi command is invoked as an active function */
	if code = 0 then do;
	     call active_fnc_err_ (code, program_interrupt_condition_name, "This command cannot be invoked as an active function.");
	     return;
	end;

	call signal_ (program_interrupt_condition_name, null () /* no mc */, addr (pi_info));


/* the program_interrupt protocol allowed programs to restart the signal,
   after noting that it had gone by, rather than doing a nonlocal go to
   from the handler. To compatably support this, we depend on the 
   default handler to set a bit saying that no user program caught and
   restarted the signal. If one did, then we call the start command,
   to kick things off again. */

	if ^pi_info.default_handler_restarted_this_signal
	then call start;				/* this does not return! */

	call com_err_ (0, "program_interrupt", "There is no suspended invocation of a subsystem that supports the use of this command.");
	return;

     end program_interrupt;
