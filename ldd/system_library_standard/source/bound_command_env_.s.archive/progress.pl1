/* ******************************************************
   *					      *
   *					      *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *					      *
   *					      *
   ****************************************************** */

progress:
pg:
     proc;

/* The progress command concatenates its arguments, and executes them as a command
   line.	While executing it, progress (pg) prints out the progress of the process -
   the cpu time used since starting, and percent of real time.  It also gives
   an indication of paging activity (page faults per second of cpu time).

   Originally written Jan 1973 by Dan Bricklin.
   Modified by M.A.Meer Oct 1975 to fix brief bug and allow long command lines.
   Modified 761026 by PG to switch to iox_.
*/


dcl
     addr builtin,
     arg char (arglen) based (argp) unaligned,
     arg_list_ptr ptr,
     arglen fixed bin,
     argno fixed bin,
     argp ptr,
     briefsw bit (1),
     cleanup condition,
     clock_ entry returns (fixed bin (71)),
     code fixed bin (35),
     com_err_ entry options (variable),
     cpu_delta1 float bin,
     cpu_delta2 float bin,
     cpu_percent1 float bin,
     cpu_percent2 float bin,
     cpu_sw bit (1) int static init ("1"b),
     cpu_time_and_paging_ entry (fixed bin, fixed bin (71), fixed bin),
     cput1 fixed bin (71),
     cput2 fixed bin (71),
     cput3 fixed bin (71),
     cu_$arg_list_ptr entry (ptr),
     cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35)),
     cu_$arg_ptr_rel entry (fixed bin, ptr, fixed bin, fixed bin (35), ptr),
     cu_$cp entry (ptr, fixed bin, fixed bin (35)),
     cv_dec_check_ entry (char (*), fixed bin (35)) returns (fixed bin (35)),
     divide builtin,
     error_table_$badopt fixed bin (35) ext,
     farg fixed bin,
     i fixed bin,
     io_switch ptr int static init (null),
     ioa_$ioa_switch entry options (variable),
     iox_$look_iocb entry (char (*), ptr, fixed bin (35)),
     iox_$user_io ptr external static,
     len fixed bin,
     line char (256) init (" "),
     line_len fixed bin,
     max builtin,
     null builtin,
     on_sw bit (1) int static init ("1"b),
     pf_per_sec float bin,
     pf1 fixed bin,
     pf2 fixed bin,
     pf3 fixed bin,
     pp1 fixed bin,
     pp2 fixed bin,
     pp3 fixed bin,
     real_delta1 float bin,
     real_delta2 float bin,
     realt1 fixed bin (71),
     realt2 fixed bin (71),
     realt3 fixed bin (71),
     (index, substr) builtin,
     time_between_calls fixed bin (71) int static init (10000000),
     timer_manager_$alarm_call entry (fixed bin (71), bit (2), entry),
     timer_manager_$cpu_call entry (fixed bin (71), bit (2), entry),
     timer_manager_$reset_alarm_call entry (entry),
     timer_manager_$reset_cpu_call entry (entry);

/* program */

	briefsw = "0"b;				/* we don't start in brief, usually */

	if io_switch = null
	then io_switch = iox_$user_io;

	call cu_$arg_ptr (1, argp, arglen, code);	/* see if we have any options */
	if code = 0 then
	     if index (arg, "-") = 1 then do;

		if arg = "-brief" | arg = "-bf"
		then do;
		     briefsw = "1"b;
		     argno = 1;
		     go to common;
		end;

		if arg = "-increment" | arg = "-ic" then go to get_delta;

		if arg = "-os" | arg = "-output_switch" | arg = "-output_stream"
		then do;
		     call cu_$arg_ptr (2, argp, arglen, code);
		     if code ^= 0
		     then do;
			call com_err_ (code, "progress", "Switchname missing.");
			return;
		     end;

		     call iox_$look_iocb (arg, io_switch, code);
		     if code ^= 0
		     then do;
			call com_err_ (code, "progress", "^a", arg);
			return;
		     end;
		     return;
		end;

		if arg = "-on"
		then do;
		     on_sw = "1"b;
		     return;
		end;

		if arg = "-off"
		then do;
		     on_sw = "0"b;
		     return;
		end;

		if arg = "-cput"
		then do;
		     cpu_sw = "1"b;
		     go to get_delta;
		end;

		if arg = "-realt"
		then do;
		     cpu_sw = "0"b;
		     go to get_delta;
		end;

		call com_err_ (error_table_$badopt, "progress", arg);
		return;
	     end;

	argno = 0;
common:
	on_sw = "1"b;				/* print interval messages */

	on cleanup call cleanup_handler;		/* what to do on cleanup */

	line_len = 0;

	farg = argno + 1;				/* keep index of first non option arg */

loop:
	argno = argno + 1;
	call cu_$arg_ptr (argno, argp, arglen, code);
	if code = 0 then do;
	     line_len = line_len + arglen + 1;
	     go to loop;
	end;


	call cu_$arg_list_ptr (arg_list_ptr);

	begin;					/* allow long line */

dcl  line char (line_len) aligned init ("");

	     len = 1;				/* index to insert chars */
	     do i = farg to argno - 1;
		call cu_$arg_ptr_rel (i, argp, arglen, code, arg_list_ptr);
		substr (line, len, arglen) = arg;
		len = len + arglen + 1;
	     end;

	     call cpu_time_and_paging_ (pf1, cput1, pp1); /* get initial time values */
	     realt1 = clock_ ();

	     pf2 = pf1;
	     cput2 = cput1;
	     pp2 = pp1;
	     realt2 = realt1;

	     if ^briefsw then
		if cpu_sw then call timer_manager_$cpu_call (cput1 + time_between_calls, "00"b, interval);
		else call timer_manager_$alarm_call (realt1 + time_between_calls, "00"b, interval);

	     call cu_$cp (addr (line), line_len, code);

	     if ^briefsw then
		if cpu_sw then call timer_manager_$reset_cpu_call (interval);
		else call timer_manager_$reset_alarm_call (interval);

	     call cpu_time_and_paging_ (pf3, cput3, pp3);
	     realt3 = clock_ ();

	     cpu_delta1 = float (cput3 - cput1)/1000000.0;
	     real_delta1 = float (realt3 - realt1)/1000000.0;
	     cpu_percent1 = float (100 * cpu_delta1)/real_delta1;
	     pf_per_sec = float (pf3 - pf1)/cpu_delta1;

	     call ioa_$ioa_switch (io_switch, "finished: ^.2f/^.2f = ^.2f% (^.2f (^f))",
		cpu_delta1, real_delta1, cpu_percent1, pf_per_sec, pf3-pf1);

	end;

	return;

/* this option changes the time between calls */

get_delta:
	call cu_$arg_ptr (2, argp, arglen, code);
	if code ^= 0 then do;
	     call com_err_ (code, "progress", "This argument is the time interval in seconds.");
	     return;
	end;

	i = cv_dec_check_ (arg, code);
	if code ^= 0 then do;
	     call com_err_ (0, "progress", "Bad number: ^a", arg);
	     return;
	end;

	time_between_calls = 1000000 * i;

	return;

cleanup_handler:
	proc;

	     if cpu_sw then call timer_manager_$reset_cpu_call (interval);
	     else call timer_manager_$reset_alarm_call (interval);

	     return;

	end;

interval:
	proc;

	     call cpu_time_and_paging_ (pf3, cput3, pp3);
	     realt3 = clock_ ();

	     cpu_delta1 = float (cput3 - cput1)/1000000.0;
	     real_delta1 = float (realt3 - realt1)/1000000.0;
	     cpu_percent1 = float (100 * cpu_delta1)/real_delta1;
	     cpu_delta2 = float (cput3 - cput2)/1000000.0;
	     real_delta2 = float (realt3 - realt2)/1000000.0;
	     cpu_percent2 = float (100 * cpu_delta2)/real_delta2;
	     pf_per_sec = float (pf3 - pf2)/cpu_delta2;

	     if on_sw then call ioa_$ioa_switch (io_switch, "^.2f/^.2f = ^.2f%, ^.2f/^.2f = ^.2f% (^.2f (^f))",
		cpu_delta1, real_delta1, cpu_percent1, cpu_delta2, real_delta2, cpu_percent2,
		pf_per_sec, pf3-pf2);

	     cput2 = cput3;
	     pf2 = pf3;
	     realt2 = realt3;
	     pp2 = pp3;

	     if cpu_sw then call timer_manager_$cpu_call (cput3 + time_between_calls, "00"b, interval);
	     else call timer_manager_$alarm_call (realt3 + time_between_calls, "00"b, interval);

	     return;

	end;

     end;
