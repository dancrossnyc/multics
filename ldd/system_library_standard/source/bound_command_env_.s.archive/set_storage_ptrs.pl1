/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


set_storage_ptrs: proc;

/* The entries in this command set area pointers in the stack header */

/* coded November 1976 by Melanie Weaver */
/* modified December 1976 by Melanie Weaver to check code properly after trying to set ptr */
/* Modified July 1979 by C. Hornig to add -create option. */

dcl  address char (*);
dcl  whox fixed bin;
dcl  new_ptr ptr;
dcl  code fixed bin (35);
dcl 1 ai aligned like area_info;

dcl  me (2) char (20) aligned options (constant) static init ("set_system_storage", "set_user_storage");

dcl  com_err_ entry options (variable);
dcl  cu_$arg_count entry () returns (fixed bin);
dcl  cv_ptr_ entry (char (*), fixed bin (35)) returns (ptr);
dcl  cv_ptr_$terminate entry (ptr);
dcl  define_area_ entry (pointer, fixed bin (35));
dcl  set_system_free_area_ entry (pointer);
dcl  set_user_free_area_ entry (pointer);

dcl  error_table_$noarg fixed bin (35) ext;
dcl  error_table_$badcall fixed bin (35) ext;
dcl  sys_info$max_seg_size fixed bin (19) ext;

dcl (addr, null, ptr, stackframeptr) builtin;

%include stack_header;

%include area_info;

%include area_structures;


set_user_storage: entry (address);

	whox = 2;
	goto join;


set_system_storage: entry (address);

	whox = 1;

join:	if cu_$arg_count () ^= 1 then do;
	     call com_err_ (0, me (whox), "Usage: ^a {-create | -system | {pointer}}", me (whox));
	     return;
	end;

	sb = ptr (stackframeptr (), 0);		/* get ptr to base of stack */

	if address = "-system" then new_ptr = sb -> stack_header.clr_ptr;

	else if address = "-create" then do;
	     ai.version = area_info_version_1;
	     string (ai.control) = ""b;
	     ai.control.extend = "1"b;
	     ai.control.zero_on_free = "1"b;
	     ai.control.system = "1"b;
	     ai.owner = me (whox);
	     ai.size = sys_info$max_seg_size;
	     ai.areap = null ();
	     call define_area_ (addr (ai), code);
	     if code ^= 0 then do;
		call com_err_ (code, me (whox), "Creating area.");
		return;
	     end;
	     new_ptr = ai.areap;
	end;

	else do;
	     new_ptr = cv_ptr_ (address, code);
	     if new_ptr = null then do;		/* perhaps system entry should accept null */
		if code = 0 then code = error_table_$badcall;
		call com_err_ (code, me (whox), address);
		return;
	     end;
	     if ^(new_ptr -> area_header.flags.zero_on_alloc | new_ptr -> area_header.flags.zero_on_free) then do;
		call com_err_ (0, me (whox), "Area must be either zero_on_free or zero_on_alloc.");
		call cv_ptr_$terminate (new_ptr);
		return;
	     end;
	end;

	if whox = 2
	then call set_user_free_area_ (new_ptr);
	else call set_system_free_area_ (new_ptr);

	return;

     end;
