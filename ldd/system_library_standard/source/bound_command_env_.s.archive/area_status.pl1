/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: style2,indcomtxt */

area_status: proc;

/* 81-09-12.  E. N. Kittlitz. call cv_ptr_$terminate on the segment cv_ptr_ originally got for us. */


/****^  HISTORY COMMENTS:
  1) change(86-06-18,Kissel), approve(86-07-31,MCR7465), audit(86-08-01,Wong),
     install(86-09-04,MR12.0-1134):
     Added the get_block_data_info entry so that callers can walk through an
     area and look at each block.
                                                   END HISTORY COMMENTS */


/* Parameters */

dcl  a_area_infop ptr;
dcl  a_code fixed bin (35);

dcl  P_code fixed bin (35) parameter;
dcl  P_block_allocated_flag bit (1) parameter;
dcl  P_data_size fixed bin (18) parameter;
dcl  P_next_data_ptr ptr parameter;
dcl  P_output_area_ptr ptr parameter;
dcl  P_block_data_ptr ptr parameter;
dcl  P_next_ptr_flag bit (1) parameter;
dcl  P_area_ptr ptr parameter;

/* Static */

dcl  my_name char (12) static init ("area_status") options (constant);

/* Automatic */

dcl  area_copy_size fixed bin (18);
dcl  given_areap ptr;				/* pointer returned by cv_ptr_ based on command args */
dcl  have_name bit (1);
dcl  n_components fixed bin;
dcl  next_areap ptr;
dcl  ptrs (1) ptr;
dcl  steps fixed bin;
dcl  not_subr bit (1);
dcl  first bit (1);
dcl  free_count1 fixed bin;
dcl  total_free1 fixed bin;
dcl  total_virgin fixed bin;
dcl  used_count1 fixed bin;
dcl  total_used1 fixed bin;
dcl  nextp ptr;
dcl  offset fixed bin;
dcl  total_free fixed bin;
dcl  free_count fixed bin;
dcl  code fixed bin (35);
dcl  bp ptr;
dcl  trace bit (1);
dcl  long bit (1);
dcl  sb_n_allocated fixed bin;
dcl  sb_n_free fixed bin;
dcl  tp ptr;
dcl  tc fixed bin;
dcl  i fixed bin;

/* Builtins */

dcl (addrel, bin, hbound, lbound, max, null, ptr, rel, size, string) builtin;

/* Conditions */

dcl  cleanup condition;

/* External */

dcl ((error_table_$bad_segment,
      error_table_$bad_arg,
      error_table_$bad_conversion,
      error_table_$badopt,
      error_table_$end_of_info,
      error_table_$unimplemented_version,
      error_table_$wrong_no_of_args) fixed bin (35),
     sys_info$max_seg_size fixed bin (18),
     iox_$user_output ptr
     ) external static;

/* Entries */

dcl  cu_$arg_count entry returns (fixed bin);
dcl  get_temp_segments_ entry (char (*), (*) ptr, fixed bin (35));
dcl  release_temp_segments_ entry (char (*), (*) ptr, fixed bin (35));
dcl  dump_seg_ entry (ptr, ptr, fixed bin, fixed bin, bit (6) aligned);
dcl  com_err_ entry options (variable);
dcl  cv_oct_check_ entry (char (*), fixed bin (35), fixed bin);
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  ioa_ entry options (variable);
dcl  cv_ptr_ entry (char (*), fixed bin (35)) returns (ptr);
dcl  cv_ptr_$terminate entry (ptr);

/* Based */

dcl  targ char (tc) based (tp);
dcl  copy_area (area_copy_size) fixed bin based (ptrs (1));


/*  */

	tc = 0;
	not_subr = "1"b;
	have_name = "0"b;
	offset = 0;
	areap = null;
	given_areap = null;
          on cleanup call clean_up_seg;
	trace = "0"b;
	long = "0"b;
	do i = 1 to cu_$arg_count ();
	     call cu_$arg_ptr (i, tp, tc, code);
	     if targ = "-trace" then trace = "1"b;
	     else if targ = "-long" | targ = "-lg" then trace, long = "1"b;
	     else if targ = "-offset" | targ = "-ofs" then do     /* obsolete control arg */
		i = i + 1;
		call cu_$arg_ptr (i, tp, tc, code);
		if code ^= 0 then do;
		     call com_err_ (code, my_name, "Offset not supplied.");
		     call clean_up_seg;
		     return;
		end;
		call cv_oct_check_ (targ, code, offset);
		if code ^= 0 then do;
		     code = error_table_$bad_conversion;
		     goto err;
		end;
	     end;
	     else if ^have_name then do;
                    given_areap = cv_ptr_ (targ, code);
		if code ^= 0 then goto err;
		areap = given_areap;		/* make working copy */
		have_name = "1"b;
	     end;
	     else do;
		call com_err_ (error_table_$badopt, my_name, "^a", targ);
		call clean_up_seg;
		return;
	     end;
	end;

	if areap = null then do;
	     call com_err_ (error_table_$wrong_no_of_args, my_name, "Usage: area_status virtual_ptr {-control_args}
                    control args: -trace, -long (-lg)");
	     return;
	end;

	if offset ^= 0 then areap = addrel (areap, offset);

	if area_header.version ^= area_version_1 then do;
	     call com_err_ (error_table_$unimplemented_version, my_name, "^/while referencing the area at ^p.",areap);
	     call clean_up_seg;
	     return;
	end;

	if area_header.extend then areap = addrel (areap, area_header.extend_info) -> extend_block.first_area;

/* Now get stats for the area */


	if get_statistics () then do;
	     call ioa_ ("Area format error.");
	     call clean_up_seg;
	     return;
	end;

	if sb_n_allocated ^= used_count1 then if long then
		call ioa_ ("Area header does not agree: blocks allocated is ^d; should be ^d", area_header.n_allocated, used_count1);
	if sb_n_free ^= free_count1 then if long then
		call ioa_ ("Area header does not agree: blocks free is ^d; should be ^d", area_header.n_free, free_count1);
	if total_free1 ^= total_free | free_count1 ^= free_count then do;
	     call ioa_ ("Free list has ^d words in ^d blocks", total_free, free_count);
	     call ioa_ ("Scan of area found ^d words in ^d free blocks", total_free1, free_count1);
	end;


	call ioa_ ("^/^16xBusy^6xFree^/");
	call ioa_ ("Blocks^4x^10d^10d", used_count1, free_count1);
	call ioa_ ("Words^5x^10d^10d", total_used1, total_free1);
	call ioa_ ("^d words of virgin storage", total_virgin);
	if string (area_header.flags) then do;		/* some control bits are ON */
	     if area_header.flags.extend then
		call ioa_ ("in ^d components.", n_components);
	     if area_header.flags.zero_on_alloc then call ioa_ ("Zero on allocation in effect.");
	     if area_header.flags.zero_on_free then call ioa_ ("Zero on free in effect.");
	     if area_header.flags.dont_free then call ioa_ ("Freeing disabled.");
	     if area_header.allocation_method = 1 then
		call ioa_ ("Blocks are packed -- no freeing allowed.");
	     call ioa_ (" ");
	end;
	call clean_up_seg;
	return;

/*  */

get_statistics: proc returns (bit (1) aligned);

dcl  save_areap ptr;
dcl print_areap ptr;

/* This subroutine scans an area and accumulates statistics about the area.
   It makes a copy of the area in a temporary segment since it marks blocks for cross checking.
*/

	     save_areap = areap;
	     sb_n_allocated = 0;
	     sb_n_free = 0;
	     total_virgin = 0;
	     free_count = 0;
	     total_free = 0;
	     total_free1 = 0;
	     free_count1 = 0;
	     total_used1 = 0;
	     used_count1 = 0;
	     steps = 0;
	     n_components = 0;

	     on cleanup call release_temp_segments_ ("area_status", ptrs, code);
	     call get_temp_segments_ ("area_status", ptrs, code);

	     next_areap = areap;
	     do areap = areap repeat next_areap while (next_areap ^= null);
		n_components = n_components + 1;
		if area_header.extend then next_areap = addrel (areap, area_header.extend_info) -> extend_block.next_area;
		else next_areap = null;

                    if area_header.allocation_method = NO_FREEING_ALLOCATION_METHOD then go to end_loop;
		total_virgin = total_virgin + bin (area_header.last_usable, 18) - bin (area_header.next_virgin, 18);
		sb_n_allocated = sb_n_allocated + area_header.n_allocated;
		sb_n_free = sb_n_free + area_header.n_free;

/* First scan the free list */

		area_copy_size = max (bin (area_header.next_virgin, 18), bin (area_header.last_block, 18));
		if area_copy_size + bin (rel (areap), 18) > sys_info$max_seg_size then
		     area_copy_size = sys_info$max_seg_size - bin (rel (areap), 18);
		copy_area = areap -> copy_area;
                    print_areap = areap;
		areap = ptrs (1);
		do i = lbound (areap -> area_header.freep, 1) to hbound (areap -> area_header.freep, 1);
		     bp = addrel (areap, areap -> area_header.freep (i).relp); /* get ptr to first thing on free list */
		     if bp ^= areap then do;
			first = "1"b;
			do blockp = bp repeat addrel (areap, block.fp) while (blockp ^= bp | first);
			     first = "0"b;
			     block.marked = "1"b;
			     total_free = total_free + bin (block.cur_size, 18);
			     free_count = free_count + 1;
			     if block.prev_busy = "0"b & not_subr then
				call ioa_ ("BLOCK AT ^p HAS PREVIOUS FREE", ptr(print_areap, rel(blockp)));
			     if trace & not_subr then call ioa_ ("FREE SIZE ^4o AT ^p", bin (block.cur_size, 18)-2, ptr(print_areap, rel(blockp)));
			     steps = steps + 1;
			     if steps > 50000
			     then do;
				areap = save_areap;
				return ("1"b);
			     end;
			end;
		     end;
		end;

/* Now scan all blocks in the area */


		steps = 0;

		do blockp = addrel (areap, size (area_header)) repeat addrel (blockp, block.cur_size)
			while (bin (rel (blockp), 18) - bin (rel (areap), 18) < bin (areap -> area_header.next_virgin, 18));

		     if bin (rel (blockp), 18) = bin (rel (areap), 18) + bin (areap -> area_header.last_block, 18) then do;
is_busy:
			if trace & not_subr then
			     call ioa_ ("BUSY ^6o AT ^p", bin (block.cur_size, 18)-2, ptr(print_areap, rel(blockp)));
			used_count1 = used_count1 + 1;
			total_used1 = total_used1 + bin (block.cur_size, 18);
			if block.marked & not_subr then /* found on free list in first pass */
			     call ioa_ ("BLOCK AT ^p NOT FREE", ptr(print_areap, rel(blockp)));
			if long & not_subr then
			     call dump_seg_ (iox_$user_output, addrel (blockp, 2), bin (rel (blockp), 18)+2,
			     bin (block.cur_size, 18)-2, "110010"b);
		     end;
		     else do;
			nextp = addrel (blockp, block.cur_size);
			if nextp->block.prev_busy
			then go to is_busy;
			if trace & not_subr then
			     call ioa_ ("     ^6o AT ^p", bin (block.cur_size, 18), ptr(print_areap, rel(blockp)));
			free_count1 = free_count1 + 1;
			total_free1 = total_free1 + bin (block.cur_size, 18);
			if block.marked = "0"b & not_subr then /* not on free list */
			     call ioa_ ("FREE BLOCK AT ^p NOT ON FREE LIST", ptr(print_areap, rel(blockp)));
		     end;
		     steps = steps + 1;
		     if steps > 50000
		     then do;
			areap = save_areap;
			return ("1"b);
		     end;
		end;


end_loop:
	     end;

	     call release_temp_segments_ ("area_status", ptrs, code);
	     areap = save_areap;
	     return ("0"b);

	end get_statistics;

/*  */

area_info_: entry (a_area_infop, a_code);

	area_infop = a_area_infop;
	if area_info.version ^= area_info_version_1 then do;
	     a_code = error_table_$unimplemented_version;
	     area_info.version_of_area = area_header.version;
	     return;
	end;

	areap = area_info.areap;

	not_subr = "0"b;

	if get_statistics () then do;
	     a_code = error_table_$bad_segment;
	     return;
	end;


	string (area_info.control) = "0"b;
	area_info.zero_on_alloc = area_header.zero_on_alloc;
	area_info.zero_on_free = area_header.zero_on_free;
	area_info.dont_free = area_header.dont_free;
	area_info.system = area_header.system;
	if area_header.allocation_method = 1 then area_info.no_freeing = "1"b;
	if area_header.extend | area_header.defined_by_call then do;
	     area_info.extend = area_header.extend;
	     extend_blockp = addrel (areap, area_header.extend_info);
	     area_info.owner = extend_block.name;
	     area_info.n_components = n_components;
	end;
          else do;
               area_info.owner = "";
               area_info.n_components = 1;
          end;
	area_info.size = bin (area_header.last_usable, 18);
	area_info.version_of_area = area_header.version;
	area_info.allocated_blocks = used_count1;
	area_info.free_blocks = free_count1;
	area_info.allocated_words = total_used1;
	area_info.free_words = total_free1;

	a_code = 0;
	return;

/*****************************************************************************/
/*							       */
/*   ENTRY:  get_block_data_info				       */
/*							       */
/*   This entry takes a pointer to an area, a flag, and a pointer to some    */
/*   data in the area.  If the flag is not set, then the size of the block   */
/*   (in words) of the block holding the specified data is returned, along   */
/*   with a flag indicating whether the block is free or allocated.  If the  */
/*   flag is set, then information about the block after the one pointed to  */
/*   by the input pointer is returned.  A pointer to the area in which the   */
/*   returned data block exists is also returned.  This will be the same as  */
/*   the input area pointer, unless the area is extensible and the next      */
/*   block is in the next area.				       */
/*							       */
/*****************************************************************************/

get_block_data_info:
     entry (P_area_ptr, P_next_ptr_flag, P_block_data_ptr, P_output_area_ptr, P_next_data_ptr, P_data_size,
	P_block_allocated_flag, P_code);

	areap = P_area_ptr;

/* Initialize the outputs in case of error. */

	P_output_area_ptr = areap;
	P_next_data_ptr = null ();
	P_data_size = 0;
	P_block_allocated_flag = "0"b;
	P_code = 0;

	call Set_get_block_data_info_Args (P_code);

	/*** We should try the next area in some cases. */

	if code = error_table_$end_of_info & area_header.flags.extend & P_next_ptr_flag
	     then do;
		areap = addwordno (areap, bin (area_header.extend_info, 18));
		call Set_get_block_data_info_Args (P_code);
		end;

	return;

clean_up_seg:
     proc;

	if given_areap ^= null then call cv_ptr_$terminate (given_areap);

     end;


err:
	call com_err_ (code, my_name, targ);
	return;

/*****************************************************************************/
/*							       */
/*   PROCEDURE:  Set_get_block_data_info_Args			       */
/*							       */
/*   This procedure uses all of the global variables and parameters of the   */
/*   get_block_data_info entry, except for the return code.  It sets the     */
/*   output parameters if it can and returns a code.  The code is	       */
/*   error_table_$end_of_info if everything is all right, but the block      */
/*   requested is in virgin storage.  Otherwise, the code indicates some     */
/*   problem with the area.					       */
/*							       */
/*****************************************************************************/

Set_get_block_data_info_Args:
     proc (P_code);

dcl  P_code		       fixed bin (35) parameter;

/* Make sure the area pointer is OK. */

	if areap = null ()
	     then P_code = error_table_$bad_arg;

/* The area pointer is OK. */

	     else do;

		/*** Check the area format. */

		if area_header.version ^= area_version_1
		     | area_header.allocation_method = NO_FREEING_ALLOCATION_METHOD
		     then code = error_table_$unimplemented_version;

		     /*** The area is OK, keep going. */

		     else do;

			/*** Initialize the block pointer. */

			if P_block_data_ptr = null ()
			     then blockp = addwordno (areap, size (area_header));
			     else blockp = addwordno (P_block_data_ptr, -alloc_blkhdrsz);

			if P_next_ptr_flag then blockp = addwordno (blockp, bin (block.cur_size, 18));

			/*** Skip the extend block if we happened to get it. */

			if wordno (blockp) + alloc_blkhdrsz = bin (area_header.extend_info, 18)
			     then blockp = addwordno (blockp, bin (block.cur_size, 18));

			/*** Easy case, everything is in this area. */

			if wordno (blockp) - wordno (areap) < bin (area_header.next_virgin, 18)
			     then do;
				P_next_data_ptr = addwordno (blockp, alloc_blkhdrsz);
				P_data_size = bin (block.cur_size, 18);

				if wordno (blockp) = wordno (areap) + bin (area_header.last_block, 18)
				     then P_block_allocated_flag = "1"b;
				     else do;
					if addwordno (blockp, bin (block.cur_size, 18)) -> block.prev_busy
					     then P_block_allocated_flag = "1"b;
					     else P_block_allocated_flag = "0"b;
					end;
				end;

			     /*** No block here, let our caller know. */

			     else P_code = error_table_$end_of_info;

			end;
		end;

/* Output args are either at their initial values, or we set them above. */

	return;

     end Set_get_block_data_info_Args;

%include area_structures;
%include area_info;

     end area_status;
