/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* HISTORY:

   Originally written by Jim Gray - - February 1980

   81-09-17 Davids: deleted the  variable  last_ptr  which  was  the
   index  of  the last pointer in the argument list and replaced all
   references to last_ptr with num_ptrs. This stops a subscriptrange
   condition  from  occuring  when  referencing  the  argument  list
   arg_desc_ptr array.

   81-09-17 Davids: changed cmdb_list so that  it  is  based  rather
   than automatic. If its automatic the dimension of arg_desc_ptr is
   0 since num_ptrs is 0 at the  time  the  structure  is  allocated
   (procedure  is  entered). This causes a subscriptrange condition.
   After cmdb_list is allocated it is necessary to reset  the  value
   of  num_ptrs  to  its larger value (it was set to a smaller value
   becuase cmdb_list does not include the code argument) so that the
   descriptor pointer to the argument before code can be referenced.

   84-10-23 Benjamin: created tidy_up procedure and changed the cleanup handler
   to call it, removing the nonlocal goto that existed.
*/

mrds_dm_create_db: create_db: procedure ();

/* DESCRIPTION:
   this routine provides a subroutine interface to create_mrds_db.
   it should be declared entry options(variable), and arguments should be
   the same character string arguments as would be given at command level.
   it provides the same options and features, but is basically a
   go/no-go interface, returning the error code of the first error encountered.
   some error codes do not provide much detail, because CMDB was
   oriented toward a command level interface with detailed error messages.
   thus a listing should be asked for, to provide full information.
*/

/* PARAMETERS:
   source_path - - (input) char(*), the pathname of the create_mrds_db source,
   with or without the .cmdb suffix

   db_path - - (input) char(*), the pathname of the database to be created.
   the database directory name will get a .db suffix
   if this optional argument is not given, the path defaults to [wd]>source_entry
   with .db replacing the .cmdb suffix

   list_opt - - (input) char(*), if this value is "-list" or "-ls", then a listing
   is produced, with error messages, using the entry portion of source
   path, with cmdb relpaced by the list suffix. this argument is optional.

   storage_opt - - (input) char(*), if this value is "-temp_dir", the next argument
   is used for temporary working storage during the creation of the database.
   this will only be necessary if a record quota overflow occurs in the [pd]

   storage_path - - (input) char(*), the pathname of a directory
   with more quota the the [pd]. this arg must be present if storage_opt is, but both are optional.

   error_code - - (output) fixed bin(35), the error status encoding, 0 unless
   an error occured, in which case it the first error encountered.
*/
%page;
/* make sure we don't leave in an inconsistant state */

	arg_list_ptr = null ();
	num_ptrs, num_dims, nargs, error_code = 0;
	on cleanup call tidy_up;

/* get the callers argument list */

	call cu_$arg_list_ptr (arg_list_ptr);
	nargs = arg_list_ptr -> arg_list.desc_count / 2;
	if nargs = 0 then
	     error_code = error_table_$bad_arg;
	else do;
		if arg_list_ptr -> arg_list.code = SPECIAL then
		     desc_index = nargs + 1;
		else desc_index = nargs;
		num_ptrs = nargs + desc_index;	/* CHANGED 81-09-17 */

/* verify all but the error code are character arguments */

		i = 1;
		done = OFF;
		do while (^done);
		     if arg_list_ptr -> arg_list.arg_des_ptr (desc_index + i) -> descriptor.type ^=
			CHAR_NONVAR then do;
			     done = ON;
			     error_code = error_table_$bad_arg;
			end;
		     else if desc_index + i < num_ptrs - 1 then /* CHANGED 81-09-17 */
			i = i + 1;
		     else done = ON;
		end;
		if error_code ^= 0 then ;
		else do;
			if arg_list_ptr -> arg_list.arg_des_ptr (num_ptrs) -> descriptor_ovrly ^=
			     /* CHANGED 81-09- */
			     FIXED_BIN_35_DESC then
			     error_code = error_table_$bad_arg;
			else do;

/* the arguments have been verified as character and   fixed bin(35) for the error code, now build the arg list
   for the call to the command CMDB, that is the same, minus the error code  */

				num_ptrs = 2 * (nargs - 1);
				call make_cmdb_call ();
			     end;
		     end;
	     end;

/* clean up before leaving */

exit:
	call tidy_up;

	return;
%page;
tidy_up:  procedure ();

	if cmdb_list_ptr ^= null
	then free cmdb_list_ptr -> cmdb_list;

	if nargs <= 0 | arg_list_ptr = null () then ;
	else arg_list_ptr -> arg_list.arg_des_ptr (nargs) -> FB35_ovrly = error_code;

/* reset CMDB for command level use */

	call create_mrds_db$set_command_level ();

     end tidy_up;
%page;
make_cmdb_call: procedure ();

/* routine to build the CMDB arg list,
   and make the call to cmdb as a subroutine */

	allocate cmdb_list set (cmdb_list_ptr);

	num_ptrs = num_ptrs + 2;			/* set it back so that pointers in the
						   larger arg_list.arg_des_ptr array can be referenced */

	cmdb_list.desc_count, cmdb_list.arg_count = 2 * (nargs - 1);
	cmdb_list.code = NORMAL;
	cmdb_list.pad = 0;

	do j = 1 by 1 to nargs - 1;

	     cmdb_list.arg_des_ptr (j) =
		arg_list_ptr -> arg_list.arg_des_ptr (j); /* data pointers */
	     cmdb_list.arg_des_ptr (nargs - 1 + j) =
		arg_list_ptr -> arg_list.arg_des_ptr (desc_index + j); /* descriptor ptrs */

	end;

/* initialize condition information structure */

	my_cond_info.mc_ptr = null ();
	my_cond_info.version = 1;
	my_cond_info.condition_name = " ";
	my_cond_info.info_ptr = null ();
	my_cond_info.wc_ptr = null ();
	my_cond_info.loc_ptr = null ();
	my_cond_info.crawlout = "0"b;
	my_cond_info.pad1 = "0"b;
	my_cond_info.pad2 = "0"b;
	my_cond_info.user_loc_ptr = null ();
	my_cond_info.pad3 (*) = "0"b;

	condition_info_ptr = addr (my_cond_info);


/* set up to capture any command errors */

	first_time = ON;

	on command_error begin;

		if ^first_time then ;
		else do;

			first_time = OFF;

			stack_ptr = null ();	/* use most recent condition frame */

			my_cond_info.condition_name = "command_error";

			call find_condition_info_ (stack_ptr, condition_info_ptr, code);
			if code ^= 0 then
			     error_code = mrds_error_$rst_logic_error;
			else do;
				command_error_info_ptr = condition_info_ptr -> condition_info.info_ptr;
				if command_error_info_ptr = null () then
				     error_code = mrds_error_$rst_logic_error;
				else do;
					error_code = command_error_info_ptr -> command_error_info.status_code;
					if error_code = 0 then
					     error_code = mrds_error_$rst_logic_error;
					command_error_info_ptr -> command_error_info.print_sw = OFF; /* tell com_err_ to shut up */
				     end;

			     end;

		     end;

	     end;

/* set up the mrds_rst_error capture logic */

	on mrds_rst_error begin;

		if ^first_time then ;
		else do;

			first_time = OFF;

			stack_ptr = null ();	/* use most recent condition frame */

			my_cond_info.condition_name = "mrds_rst_error";

			call find_condition_info_ (stack_ptr, condition_info_ptr, code);
			if code ^= 0 then
			     error_code = mrds_error_$rst_logic_error;
			else do;
				mrds_error_cond_ptr = condition_info_ptr -> condition_info.info_ptr;
				if mrds_error_cond_ptr = null () then
				     error_code = mrds_error_$rst_logic_error;
				else do;
					error_code = mrds_error_cond_ptr -> mrds_error_condition_info.status_code;
					if error_code = 0 then
					     error_code = mrds_error_$rst_logic_error;
				     end;

			     end;

		     end;

	     end;

/* tell CMDB to set up for a subroutine call */

	call create_mrds_db$set_subroutine_level ();

/* make the call to the CMDB command */

	call cu_$generate_call (create_mrds_db, addr (cmdb_list));


	declare first_time		 bit (1);		/* on => capture this error, else ignore */
	declare 1 my_cond_info	 like condition_info; /* local version to be filled in by find_cond_info */

     end;
%page;
	declare addr		 builtin;
	declare null		 builtin;
	declare arg_list_ptr	 ptr;		/* points to argument list */
	declare 1 cmdb_list		 like arg_list based (cmdb_list_ptr); /* arg list for CMDB call */
	declare cmdb_list_ptr	 ptr init (null);	/* pointer to the cmdb_list structure */
	declare mrds_error_cond_ptr	 ptr;		/* points to mrds error condition info */
	declare mrds_rst_error	 condition;	/* signaled by mrds_rst_error, when subroutine interface */
	declare command_error	 condition;	/* signaled by com_err_ from CMDB */
	declare cleanup		 condition;	/* signaled upon quit/release */
	declare command_error_info_ptr ptr;		/* points to command_error_info */
	declare cu_$arg_list_ptr	 entry (ptr);	/* gets poinmter to arg list */
	declare nargs		 fixed bin;	/* number of arguments */
	declare SPECIAL		 fixed bin int static options (constant) init (8); /* => extra stack frame ptr */
	declare NORMAL		 fixed bin int static options (constant) init (4); /* => no extra ptrs */
	declare desc_index		 fixed bin;	/* offset to descriuptor pointers */
	declare (i, j)		 fixed bin;	/* loop indexes */
	declare done		 bit (1);		/* on => all char args checked */
	declare ON		 bit (1) int static options (constant) init ("1"b); /* true value */
	declare OFF		 bit (1) int static options (constant) init ("0"b); /* false value */
	declare CHAR_NONVAR		 fixed bin int static options (constant) init (21); /* character nonvarying data type */
	declare descriptor_ovrly	 bit (36) unal based; /* overlay for descriptor */
	declare cu_$generate_call	 entry (entry, ptr);/* makes call given arg list */
	declare create_mrds_db	 entry options (variable); /* CMDB command */
	declare stack_ptr		 ptr init (null ());/* null => most recent */
	declare find_condition_info_	 entry (ptr, ptr, fixed bin (35)); /* gets condition information */
	declare mrds_error_$rst_logic_error fixed bin (35) ext; /* bad program */
	declare error_code		 fixed bin (35);	/* error status encoding */
	declare code		 fixed bin (35);	/* local error code */
	declare create_mrds_db$set_command_level entry ();/* sets up for use as command */
	declare create_mrds_db$set_subroutine_level entry (); /* sets up for use as subroutine */
	declare FIXED_BIN_35_DESC	 bit (36) init ("100000100000000000000000000000100011"b) int static options (constant);
	declare error_table_$bad_arg	 fixed bin (35) ext;/* not options variable, character, or fixed bin(35) */
	declare FB35_ovrly		 fixed bin (35) based; /* overlay for assigning error code */
%page;
	declare 1 mrds_error_condition_info based aligned,
%include cond_info_structure;
	2 severity fixed bin,
	     2 severity_high fixed bin;

	declare 1 command_error_info	 aligned based,
%include cond_info_structure;
	2 name_ptr ptr,
	     2 name_lth fixed bin,
	     2 errmess_ptr ptr,
	     2 errmess_lth fixed bin,
	     2 max_errmess_lth fixed bin,
	     2 print_sw bit (1);
%page;
%include mdbm_arg_list;
%include mdbm_descriptor;
%include condition_info;


     end;
