/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1981 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(88-01-18,Blair), approve(88-02-26,MCR7840), audit(88-03-03,Dupuis),
     install(88-03-08,MR12.2-1034):
     Add code to use the mrds search list.  SCP 6366.
  2) change(88-02-25,Blair), approve(88-02-25,MCR7840), audit(88-03-03,Dupuis),
     install(88-03-08,MR12.2-1034):
     Create a local area for use by search_paths_$get.
                                                   END HISTORY COMMENTS */


mrds_dm_db_secured: procedure (); return;		/* not a legal entry */

/*
                   BEGIN_DESCRIPTION
   This routine has three entries that will either return the  state
   of  or  turn  the  secured  bit in the database model on/off. The
   entries   are   names   set_db_secured,   reset_db_secured,   and
   get_secured_status.  Changing the state requires that the user be
   a DBA. This secured bit interface will only work  for  version  4
   databases.  The  data  model  must  have been opened by a call to
   dmd_$open_dm.
                   END_DESCRIPTION
*/

/* PARAMETERS:
   data_model_ptr - - (input) pointer, the  pointer  the  data  base
   model  returned  from  a  call  to  dmd_$open_dm  for  the  given
   database. (all entries but get_secured_state)

   rel_db_path - - (input) char(*), the  relative  pathname  of  the
   database whose secured state is to be determined, with or without
   the suffix. This is for the get_secure_state entry only.

   area_ptr - - (input) pointer,  for  the  get  entry  only,  to  a
   freeing  area  of  at least 20 words, in which the database_state
   structure is to be allocated.

   structure_version - - (input) fixed bin, for the get entry  only,
   the desired version of the structure. Normaly, the version number
   given in the include file.

   database_state_ptr - - (output) pointer, for the get entry  only,
   a  pointer  to the mrds_database_state.incl.pl1 defined structure
   that has been allocated in the area supplied  by  the  user,  and
   with  the  requested  version.  this  routine  will  fill  in the
   database state parameters in the structure.

   error_code - - (output) fixed bin(35), the error status encoding,
   0 unless an error occurred.  */

/* HISTORY:

   Originally written by Jim Gray - - November 1980

   81-01-20 Jim Gray : changed from mrds_dm_set_db_secured, with two
   set/reset  entries,  into  mrds_dm_db_secured,  with  a third get
   entry, replacing mrds_dm_get_secured_status.  The  get  interface
   was  extended  from 1 bit, to an extensible structure. Calls were
   added to the new authorization (DBA) handling  routines,  instead
   of handling this logic internally.

   81-04-20 Jim Gray : added entry for  mmi_$get_secured_state  that
   uses  a db_path rether than a db_model pointer. Also added use of
   mrds_dm_check_path,  and  use   of   hcs_$status_   rather   than
   hcs_$get_user_effmode.

   83-02-24 Davids: explicitly declared variables that were declared by
   context or implication. Deleted declarations to variables that were
   never referenced.
*/

/* entry to set secured bit on */

set_db_secured: entry (data_model_ptr, error_code);

	dbm_ptr = data_model_ptr;
	secure_bit = "1"b;
	set_operation = "1"b;

	call common ();

	return;


/* entry to turn the secured bit off */

reset_db_secured: entry (data_model_ptr, error_code);

	dbm_ptr = data_model_ptr;
	secure_bit = "0"b;
	set_operation = "1"b;

	call common ();

	return;

/* entry to get database secured state info */

get_secured_status: entry (data_model_ptr, area_ptr, structure_version, database_state_ptr, error_code);

	dbm_ptr = data_model_ptr;
	set_operation = "0"b;
	database_state_ptr = null ();

	call common ();

	return;


/* entry to get secured db state, using path rather than model ptr */

get_secured_state: entry (rel_db_path, area_ptr, structure_version, database_state_ptr, error_code);

dcl gs_local_area area (2048);

	database_state_ptr = null ();			/* init */
	use_search_paths = "0"b;
	if search (rel_db_path, "<>") = 0 then do;
	     call search_paths_$get (MRDS_SEARCHLIST, sl_control_default, "", null (), addr(gs_local_area), sl_info_version_1, mrds_search_list_ptr, error_code);
	     if error_code ^= 0 then return;
	     loop_idx = mrds_search_list_ptr -> sl_info.num_paths;
	     use_search_paths = "1"b;
	     end;
	else do;
	     call absolute_pathname_ (rel_db_path, abs_path, error_code);
	     if error_code ^= 0 then return;
	     loop_idx = 1;
	     end;
	error_code = 1;
	do idx = 1 to loop_idx while (error_code ^= 0);
	     if use_search_paths then abs_path = pathname_ (mrds_search_list_ptr -> sl_info.paths(idx).pathname, rel_db_path);
	     call mrds_dm_check_path (abs_path, containing_dir, db_dir, new_found, error_code);
	     if error_code = error_table_$incorrect_access then
		error_code = 0;			/* ignore access problems for right now,
		     may need to set acl's for a DBA */
	     end;                                              /* end do */
	if error_code = 0 then do;
		if ^new_found then
		     error_code = mrds_error_$version_not_supported;
		else do;

			db_path = rtrim (containing_dir) || ">" || db_dir;
			dbm_ptr = null ();

			set_operation = "0"b;

			call common ();

		     end;
	     end;

	return;

common: procedure ();

/* initialize */

	error_code = 0;

/* check for a valid pointer to a version 4 database model */

	if dbm_ptr = null () & ^set_operation then
	     model_name = "db_model";			/* get_secured_state entry */
	else call hcs_$fs_get_path_name (dbm_ptr, db_path, ldn, model_name, error_code);
	if error_code ^= 0 then ;
	else if model_name ^= "db_model" then
	     error_code = mrds_error_$version_not_supported;
	else do;

/* determine action based on entry called */

		if set_operation then
		     call change_secured_state ();
		else call get_secured_info ();

	     end;

     end;

change_secured_state: procedure ();

/* check for correct access by DBA type, to set secured bit */

	call check_access ();			/* this will fail if user not dba */
	if error_code ^= 0 then ;
	else do;


/* change the secured bit in an indivisible operation */

		secure_word_ptr = addr (dbm_ptr -> db_model.consistant);
		old_secure_word = secure_word;
		unspec (new_secure_word) = secure_word;
		new_secure_word.mdbm_secured = secure_bit;

		changed = "0"b;
		do while (^changed);

		     changed = stacq (unspec (secure_word),
			unspec (new_secure_word), unspec (old_secure_word));

		end;

	     end;

     end;

check_access: procedure ();

/* check for correct access by DBA type, to set secured bit */

	DBA, set_ok, read_ok, unspec (my_status_branch) = "0"b; /* init */

/* check for access on the db_model segment */

	call hcs_$status_ (rtrim (db_path), rtrim (model_name), dont_chase_links,
	     addr (my_status_branch), addr (local_area), error_code);

	if error_code = 0 | error_code = error_table_$incorrect_access |
	     error_code = error_table_$no_s_permission then do;

		error_code = 0;

		access_mode_overlay_ptr = addr (my_status_branch.mode);

		if access_mode_overlay.read & access_mode_overlay.write then
		     set_ok = "1"b;
		if access_mode_overlay.read then
		     read_ok = "1"b;

/* find out if the user is a DBA */

		call mrds_dm_authorization$get_user_class (rtrim (db_path), addr (local_area),
		     mrds_authorization_structure_version, mrds_authorization_ptr, error_code);
		if error_code = 0 then
		     DBA = mrds_authorization.administrator;

	     end;

/* if an access violation occured, try to set access for the user.
   This will fail if the user is not a DBA. */

	if error_code = 0 then do;
		if DBA then do;
			if ((set_operation & ^set_ok) | (^set_operation & ^read_ok)) then
			     call mrds_dm_authorization$set_needed_access (rtrim (db_path), error_code);
		     end;
		else do;				/* non-DBA */
			if set_operation then
			     error_code = error_table_$insufficient_access;
			else if ^read_ok then /* no set operation */
			     error_code = mrds_error_$no_model_access;
		     end;

	     end;

     end;

get_secured_info: procedure ();

/* set access for a DBA if needed */

	call check_access ();
	if error_code = 0 then do;

/* we may need to get the model pointer for the get_secured_state entry */

		if dbm_ptr = null () then
		     call hcs_$initiate (rtrim (db_path), "db_model", "",
			0, 1, dbm_ptr, error_code);
		if dbm_ptr ^= null () then do;

			error_code = 0;

/* check on input parameters for correctness */

			if area_ptr = null () then
			     error_code = error_table_$badcall;
			else do;

				unspec (my_area_info) = "0"b;
				my_area_info.version = 1;
				my_area_info.areap = area_ptr;

				call area_info_ (addr (my_area_info), error_code);
				if error_code ^= 0 then ; /* couldn't get area info */
				else if my_area_info.no_freeing then
				     error_code = mrds_error_$not_freeing_area;
				else do;

					if structure_version ^= mrds_authorization_structure_version then
					     error_code = error_table_$unimplemented_version;
					else do;

/* set up for too small an area given */

						on area begin;
							error_code = error_table_$area_too_small;
							goto skip_allocate;
						     end;

						allocate database_state set (database_state_ptr) in (work_area);
						revert area;
						unspec (database_state) = "0"b; /* init */

/* fill in the structure info details */

						database_state.version = database_state_structure_version;
						database_state.secured = db_model.mdbm_secured;
						database_state.unsecured = ^(database_state.secured);
						database_state.mbz = "0"b;

skip_allocate:
					     end;
				     end;
			     end;
		     end;
	     end;
     end;

	declare DBA		 bit (1);		/* on => user is a DBA */
          declare MRDS_SEARCHLIST        char (4) int static options (constant) init ("mrds");
          declare abs_path               char (168);
          declare absolute_pathname_     entry (char(*), char(*), fixed bin(35));
	declare access_mode_overlay_ptr ptr;		/* points to mode bits */
	declare area		 condition;	/* not enough space left */
	declare area_info_		 entry (ptr, fixed bin (35)); /* gets area specs */
	declare area_ptr		 ptr;		/* pointer to area for allocation of structure */
	declare changed		 bit (1);		/* on => change successfull */
	declare containing_dir	 char (168);	/* containing directory of database */
	declare data_model_ptr	 ptr;		/* pointer to database model */
	declare db_dir		 char (32);	/* directory name of database */
	declare db_path		 char (168);	/* pathname of database */
	declare dont_chase_links	 fixed bin (1) init (0); /* dont follow links */
	declare error_code		 fixed bin (35);	/* error status encoding */
	declare error_table_$area_too_small fixed bin (35) ext; /* can't allocate structure */
	declare error_table_$badcall	 fixed bin (35) ext;/* null area ptr */
	declare error_table_$incorrect_access fixed bin (35) ext; /* no acl on dir or object */
	declare error_table_$insufficient_access fixed bin (35) ext; /* not sma on db_dir or rw on db_model */
	declare error_table_$no_s_permission fixed bin (35) ext; /* no "s" on containing dir */
	declare error_table_$unimplemented_version fixed bin (35) ext; /* bad structure version */
	declare hcs_$fs_get_path_name	 entry (ptr, char (*), fixed bin, char (*), fixed bin (35)); /* gets path from pointer */
	declare hcs_$initiate	 entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2),
				 ptr, fixed bin (35)); /* gets ptr to seg */
	declare hcs_$status_	 entry (char (*), char (*), fixed bin (1), ptr, ptr, fixed bin (35)); /* gets access modes */
          declare idx                    fixed bin;         /* index to search path loop */
          declare loop_idx               fixed bin;         /* number of entries in search list */
	declare ldn		 fixed bin;	/* length of db dir name */
	declare local_area		 area (2048);	/* temp space for authorization structure */
	declare model_name		 char (32);	/* name of database model */
	declare mrds_dm_authorization$get_user_class entry (char (*), ptr, fixed bin, ptr, fixed bin (35)); /* detects DBA's */
	declare mrds_dm_authorization$set_needed_access entry (char (*), fixed bin (35)); /* sets all access DBA needs */
	declare mrds_dm_check_path	 entry (char (*), char (168), char (32), bit (1), fixed bin (35)); /* check for path to db */
	declare mrds_error_$no_model_access fixed bin (35) ext; /* no "r" to db_model */
	declare mrds_error_$not_freeing_area fixed bin (35) ext; /* no freeing attr for area */
	declare mrds_error_$version_not_supported fixed bin (35) ext; /* not version 4 database */
          declare mrds_search_list_ptr   pointer;
	declare new_found		 bit (1);		/* on => new version db arch */
	declare old_secure_word	 bit (36);	/* value before change is made */
          declare pathname_              entry (char(*), char(*)) returns(char(168));
	declare read_ok		 bit (1);		/* on => user has access to read state */
	declare rel_db_path		 char (*);	/* relative database path */
          declare search                 builtin;
          declare search_paths_$get      entry (char(*), bit(36), char(*), ptr, ptr, fixed bin, ptr, fixed bin(35));
	declare secure_bit		 bit (1);		/* on => secured */
	declare secure_word		 bit (36) aligned based (secure_word_ptr); /* bits to be change in model */
	declare secure_word_ptr	 ptr;		/* points to proper spot in model */
	declare set_ok		 bit (1);		/* on => user has access to write state */
	declare set_operation	 bit (1);		/* on => set or reset to be done */
	declare structure_version	 fixed bin;	/* desired version of output structure */
	declare sys_info$max_seg_size	 fixed bin (35) ext;/* largest segment */
          declare use_search_paths        bit (1);
	declare work_area		 area (sys_info$max_seg_size) based (area_ptr); /* overlay for users area */
	declare (addr, empty, fixed, null, rel, rtrim, stacq, unspec) builtin;
	declare 1 access_mode_overlay	 unal based (access_mode_overlay_ptr), /* overlay for mode bits */
		2 pad1		 bit (1) unal,
		2 read		 bit (1) unal,
		2 exec		 bit (1) unal,
		2 write		 bit (1) unal,
		2 pad2		 bit (1) unal;
	declare 1 my_area_info	 like area_info;	/* local copy */
	declare 1 my_status_branch	 like status_branch;/* local copy */
	declare 1 new_secure_word	 aligned,		/* overlay for portion of db_model with secured bit */
		2 consistent	 bit (1) unal,
		2 mdbm_secured	 bit (1) unal,
		2 reserved	 bit (34) unal;

%include mrds_database_state;
%page;
%include sl_control_s;
%page;
%include sl_info;
%include status_structures;
%page;
%include mrds_authorization;
%page;
%include area_info;
%page;
%include mdbm_db_model;
%page;

     end;
