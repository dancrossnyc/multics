/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

mrds_dm_check_path: check_path: procedure (I_in_path, O_containing_dir, O_db_dir_name, O_new_found, O_code);

/* DESCRIPTION:

   this routine takes a relative pathname, and determines if it is a
   old or new architecture MRDS database. It attempts to require the
   minimum of access to  do  this.  It  was  written  primarily  for
   mmi_$get_authorization and mmi_$get_secured_state.

*/

/* PARAMETERS:

   I_in_path - - (input) char(*), the relative or absolute path to  be
   examined. Suffixes are not required.

   O_containing_dir - - (output) char(*) the containing directory of
   the database

   O_db_dir_name - - (output) char(*), the entry  name,  with  suffix,  if
   any, of the database dir

   O_new_found - - (output) bit(1),  on  =>  this  is  a  new  version
   database architecture (created by MR8 or later MRDS)

   O_code - - (output) fixed bin(35), the  error  status  encoding  it
   will  be  error_table_$incorrect_access if the user has no access
   to the data model entry.

*/
%page;
/* HISTORY:

   83-01-25 Roger Lackey : Rewritten to use the following sequence:
   what is given for db_path
   if not found then try db_path with .db suffix

   83-01-27  Roger Lackey: Corrected check fo .db suffix

   83-02-01 Roger Lackey: Returns mrds_error_$no_database if no model is found.

   83-04-29 Davids: Extensive modifications for performance reasons.
   The db_path variable is set in the main procedure instead of the internal
   find_model procedure. This reduces the number of times the variable is set
   (and rtrim and concatenate are referenced) by half (2 instead of 4).
   The check_db_path internal procedure was eliminated (with its call to
   hcs_$status_minf and needed error handling). The existance of the
   db_dir is now checked by checking for the no_dir error returned from status
   when the check for the db_model segment is made There was always 1 call
   and if the input path did not contain a .db suffix and the db dir did there
   was another call. The call to the internal check_model procedure is made
   with just the code variable instead of the special model_code which is
   assigned to code if the model was found. A variable called db_dir_length
   was created instead of referencing the length builtin 3 times.
*/
%page;
/* mrds_dm_check_path: check_path: procedure (I_in_path, O_containing_dir, O_db_dir_name, O_new_found, O_code); */
	dcl     I_in_path		 char (*) parameter;
	dcl     O_code		 fixed bin (35) parameter;
	dcl     O_containing_dir	 char (*) parameter;
	dcl     O_db_dir_name	 char (*) parameter;
	dcl     O_new_found		 bit (1) parameter;

	O_containing_dir = "";
	O_db_dir_name = "";
	O_new_found = "0"b;
	O_code = 0;

	model_found = "0"b;

	db_dir = "";				/* Incase of error in expandpath */

	call expand_pathname_ (I_in_path, containing_dir, temp_db_dir, code);
	if code ^= 0
	then do;
		containing_dir = "";
		goto exit;
	     end;

	db_dir = rtrim (temp_db_dir);
	db_path = pathname_ (containing_dir, (db_dir));

	call check_model (model_found, code);

	if ^model_found				/* See if db_dir has .db suffix */
	then do;
		db_dir_length = length (db_dir);

		if db_dir_length < 30
		then do;
			if db_dir_length > 3
			then do;
				if substr (db_dir, db_dir_length - 2, 3) = ".db"
				then goto exit;
			     end;

			db_dir = db_dir || ".db";
			db_path = rtrim (db_path) || ".db";

			call check_model (model_found, code);
		     end;
	     end;

exit:	O_containing_dir = containing_dir;
	O_db_dir_name = db_dir;

	if model_found
	then do;
		if model_name = "db_model"
		then O_new_found = "1"b;
	     end;
	else do;					/* No database */
		code = mrds_error_$no_database;
		call expand_pathname_$add_suffix ((db_dir), "db", temp_dir_path, O_db_dir_name, dummy_code);
	     end;

	O_code = code;

	return;

%page;
/* * * * * * * * * * * * * * * * * *   check_model   * * * * * * * * * * *  */

check_model: proc (cm_model_found, cm_model_code);

	dcl     cm_model_code	 fixed bin (35) parameter;
	dcl     cm_model_found	 bit (1) aligned parameter;

	model_name = "db_model";
	call find_model (model_name, cm_model_found, cm_model_code);
	if cm_model_code ^= error_table_$no_dir & ^cm_model_found
	then do;
		model_name = "data_model";
		call find_model (model_name, cm_model_found, cm_model_code);
	     end;

     end check_model;
%page;
/* * * * * * * * * * * * * * *    find_model    * * * * * * * * * * * *   */

find_model: proc (name, fm_found, fm_code);

	dcl     name		 char (*) parameter;/* Model name to try */
	dcl     fm_found		 bit (1) parameter aligned; /* ON = Model found */
	dcl     fm_code		 fixed bin (35) parameter; /* Error code for this internal procedure */


	call hcs_$status_minf (db_path, model_name, no_chase, entry_type, bit_count, fm_code);
	if fm_code = 0
	then do;
		if model_name = "db_model"
		then do;
			if entry_type ^= SEGMENT
			then do;
				fm_code = error_table_$noentry;
				fm_found = "0"b;
			     end;
			else fm_found = "1"b;
		     end;
		else do;
			if entry_type ^= DIR | bit_count = 0
			then do;
				fm_code = error_table_$noentry;
				fm_found = "0"b;
			     end;
			else fm_found = "1"b;
		     end;
	     end;					/* END if fm_code = 0 then do */
	else if fm_code = error_table_$incorrect_access
	then do;
		fm_code = mrds_error_$no_model_access;
		fm_found = "1"b;
	     end;

     end find_model;

%page;
	dcl     bit_count		 fixed bin (24);	/* bit count of entry */
	dcl     code		 fixed bin (35);	/* error status encoding */
	dcl     containing_dir	 char (168);	/* containing dir of db */
	dcl     db_dir		 char (32) varying; /* db dir entry */
	dcl     db_dir_length	 fixed bin;	/* number of chars in db_dir */
	dcl     db_path		 char (168);
	dcl     DIR		 fixed bin init (2);/* entry = direcotry */
	dcl     dummy_code		 fixed bin (35);
	dcl     entry_type		 fixed bin (2);	/* type of entry found */
	dcl     error_table_$incorrect_access fixed bin (35) ext static;
	dcl     error_table_$noentry	 fixed bin (35) ext;/* no entry found */
	dcl     expand_pathname_$add_suffix entry (char (*), char (*), char (*), char (*), fixed bin (35));
	dcl     error_table_$no_dir	 fixed bin (35) ext;/* some dir in path doesnt exists */
	dcl     expand_pathname_	 entry (char (*), char (*), char (*), fixed bin (35)); /* gets abs containing dir, and entryname */
	dcl     hcs_$status_minf	 entry (char (*), char (*), fixed bin (1), fixed bin (2), fixed bin (24), fixed bin (35)); /* gets entry type */
	dcl     length		 builtin;
	dcl     model_name		 char (32);
	dcl     mrds_error_$no_database fixed bin (35) ext static;
	dcl     mrds_error_$no_model_access fixed bin (35) ext static;
	dcl     model_found		 bit (1) aligned;
	dcl     no_chase		 fixed bin (1) init (0) int static options (constant); /* don't chase links */
	dcl     pathname_		 entry (char (*), char (*)) returns (char (168));
	dcl     rtrim		 builtin;
	dcl     SEGMENT		 fixed bin init (1);/* entry = segment */
	dcl     substr		 builtin;
	dcl     temp_db_dir		 char (32);
	dcl     temp_dir_path	 char (168);

     end mrds_dm_check_path;
