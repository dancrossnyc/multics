/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

mrds_dsm_read_header: proc (area_ptr, hd_ptr, iocb_ptr, a_code);

/*
   This routine using the input iocb_ptr reads a record with a  null
   key  and checks to be sure its a submodel header. If it is not it
   returns the code mrds_error_$not_dsm. If it is, then for the main
   entry  point it obtains the number of relations loads that number
   into the header and returns a pointer  to  the  header  structure
   which  it  allocated in the area pointed to by the area_ptr input
   parameter. For the version entry point after the header  is  read
   and  varified  the  version value is extracted and returned while
   the space the header record was read into is freed.  The  db_path
   entry point is similar to the version entry point but the db_path
   rather than the version is returned.

   Known Bugs:

   Other Problems:

   HISTORY

   80-08-11 Spratt: Remove code to infer database_pn  from  the  dsm
   .        path, which was valid as long as the dsm was  always  in
   .        the  db  directory.  It  became necessary to change this
   .        because dsm's are now only placed in  the  db  when  the
   .        -install  control argument is used with cmdsm, otherwise
   .        the dsm ends up in the users working directory.

   80-12-24 Davids: changed the version comparison from equal to the
   .        lastest version to < 4, since submodel code will be able
   .        to handle version 4 or later code.

   81-01-08  Davids:  added  code  description  and  reformated  the
   .        dclarations and history section added the entry  version
   .        removed  the  version check and added a check to be sure
   .        that the record read is indeed a submodel header record.
   .        reworked   the  code  creating  the  internal  procedure
   .        common.

   81-01-09 Davids: discovered that the key of the header record was
   .        not the same for version 1, 4, and 5 submodels. all keys
   .        force  the header record to the begining of the file but
   .        that can be done with keys of "", low (32) or low  (256)
   .        so  now  the header record is found just by going to the
   .        beginning of the file.

   81-01-12        Davids:        changed        reference        of
   .        mrds_dsm_display_rels.incl.pl1                        to
   .        mrds_dsm_relation_names.incl.pl1.   this   expands   the
   .        relation names for 32 to 64 characters.

   81-01-28 Davids:  changed drel_ptr to mrds_dsm_relation_names_ptr
   .        to  correspond to changes in the mrds_dsm_relation_names
   .        include file.

   81-03-31 Davids: added the db_path entry point, removed the  call
   .        to mrds_dsm_get_relation_names to determine  the  number
   .        of  relations  in  the  submodel for version 5 submodels
   .        since  for  version  5  submodels  that  information  is
   .        correctly stored in the header.

   81-05-20   Rickie   E.   Brinegar:    Changed    references    to
   .        dsm_relation_names to mrds_dsm_relation_names due  to  a
   .        change in the include file.

   81-06-01   Davids:   changed   mrds_dsm_header_str.incl.pl1    to
   .        mrds_dsm_header.incl.pl1.

   84-10-23   Thanh Nguyen:  On the opening of an old  submodel < 5,
   .        we only need to get the number of relations.  Therefore,
   .        the   entry   mrds_dsm_get_relation_names$number_of_rels
   .        should be called instead of mrds_dsm_get_relation_names.
   .        Another reason  for this change  is that  the allocation 
   .        area passing  from mrds_dsl_init_res  is too  small (200
   .        words)  to kept more  than 6 rel. names  to be filled by
   .        mrds_dsm_get_relation_names.  Kudo to  Hurst from  AFDSC
   .        for reporting this problem.

   84-11-01 Paul Benjamin: Changed to use local_hd_ptr for manipulation,
   .        only setting hd_ptr to something useful just prior to returning.
*/

/* PARAMETERS */

	dcl     area_ptr		 ptr;		/* (input) allocation area */
	dcl     db_path		 char (168);	/* (output) path of database associated with submodel */
	dcl     hd_ptr		 ptr;		/* (output) header record structure pointer */
	dcl     iocb_ptr		 ptr;		/* (input) iocb pointer */
	dcl     a_code		 fixed bin (35);	/* (output) error code */
	dcl     version		 fixed bin;	/* (output) version of submodel */

/* AUTOMATIC */

	dcl     code		 fixed bin (35) init (0); /* internal error code */
	dcl     local_hd_ptr	 ptr;		/* local copy of hd_ptr */
	dcl     01 mrds_dsm_header_copy like mrds_dsm_header; /* storage for a header record */

/* BASED */

	dcl     area_buffer		 area based (area_ptr); /* allocation buffer assumes non-freeing */

/* BUILTIN */
	dcl     addr		 builtin;
	dcl     null		 builtin;
	dcl     size		 builtin;

/* ENTRIES */

	dcl     mrds_dsm_get_relation_names$number_of_rels entry (ptr, fixed bin (35)) returns (fixed bin);
		  

%include mrds_dsm_header;
%page;
%include mrds_dsm_relation_names;

/*
   main entry point - reads and verifies the header structure, reads
   all  the  relations  and loads the relation count into the header
   structure. Why the relation count is not  stored  in  the  header
   structure to begin with i do not know.
*/

	hd_ptr = null;
	allocate mrds_dsm_header in (area_buffer) set (local_hd_ptr);

	call common (local_hd_ptr, size (mrds_dsm_header) * 4);
	if code = 0 & local_hd_ptr -> mrds_dsm_header.dsm_generator_version < 5 then
	     local_hd_ptr -> mrds_dsm_header.num_of_relations = mrds_dsm_get_relation_names$number_of_rels (iocb_ptr, code);

	if code = 0
	     then hd_ptr = local_hd_ptr;

	a_code = code;

	return;

version: entry (iocb_ptr, version, a_code);

/*
   The main reason for this entry point is so that modules that need
   to know the submodel version they are dealing with do not have to
   include the entire header structure.
*/

	call common (addr (mrds_dsm_header_copy), size (mrds_dsm_header) * 4);
	if code = 0
	then version = mrds_dsm_header_copy.dsm_generator_version;
	else version = 0;

	a_code = code;

	return;

db_path: entry (iocb_ptr, db_path, a_code);

/*
   This entry returns  just  the  db_path  that  is  stored  in  the
   submodel  header.  routines  that  need  to know just the db_path
   should not  be  required  to  know  the  entire  submodel  header
   structure.
*/

	call common (addr (mrds_dsm_header_copy), size (mrds_dsm_header_copy) * 4);
	if code = 0
	then db_path = mrds_dsm_header_copy.database_pn;
	else db_path = "";

	a_code = code;
	return;

common: proc (buffer_ptr, buffer_size);

/*
   This internal procedure reads and verifies the header structure
*/

/* PARAMETERS */

	dcl     buffer_ptr		 ptr;		/* (input) pointer to input buffer */
	dcl     buffer_size		 fixed bin (21);	/* (input) size of buffer */

/* AUTOMATIC */

	dcl     record_length	 fixed bin (21);	/* length of record */

/* CONSTANTS */

	dcl     BOF		 fixed bin init (-1) internal static options (constant);
						/* used to indicate the beginning of the file */

/* ENTRIES */

	dcl     iox_$position	 entry (ptr, fixed bin, fixed bin (21), fixed bin (35));
	dcl     iox_$read_record	 entry (ptr, ptr, fixed bin (21), fixed bin (21), fixed bin (35));

/* EXTERNAL */

	dcl     mrds_error_$not_dsm	 fixed bin (35) external static;



	code = 0;

	call iox_$position (iocb_ptr, BOF, 0, code);
	if code = 0
	then do;
		call iox_$read_record (iocb_ptr, buffer_ptr, buffer_size, record_length, code);
		if code = 0
		then do;
			if buffer_ptr -> mrds_dsm_header.name ^= "data_submodel_header"
			then code = mrds_error_$not_dsm;
		     end;

	     end;

	return;

     end /* common */;


     end /* mrds_dsm_read_header */;

