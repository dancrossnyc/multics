/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1981 *
        *                                                         *
        * Copyright (c) 1976 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(88-01-19,Blair), approve(88-02-26,MCR7840), audit(88-03-03,Dupuis),
     install(88-03-08,MR12.2-1034):
     Add code to find the db pathname using a "mrds" searchlist. SCP6366.
                                                   END HISTORY COMMENTS */


/* DESCRIPTION:

   This procedure opens a data model for retrieval. A pointer to the
   opened   data   model  is  returned  if  no  errors  occur.  (for
   mrds_dm_open and open_dm) An opening name is associated with  the
   opening for the open_model entry.

   The mrds_dm_open entry is for use by internal mrds.  The  open_dm
   entry  is  for  external sue by dmd_. The open_model entry is for
   external use by mmi_. The external entries  check  for  the  user
   being  a  DBA  if  the  database  ius secured. A DBA will get any
   needed access set if an acces violation occurs.

*/

/* PARAMETERS:

   ======== open_model entry

   rel_path - - (input) char(*), the relative or  absolute  pathname
   of  the  database  whose  model  is  to  be  opened, no suffix is
   required.

   open_name - - (input) char(*), the opening name (arbitrary) to be
   assoicated  with  this  opening  of  the model, and to be used in
   subsequent mmi_ calls

   code - - (output) fixed bin(35), the error status encoding

   ======== mrds_dm_open and open_dm entries

   rel_path - - (input) char(168),  the  relative  pathname  of  the
   database  model  to  be  opened.  This  will be the pathname of a
   directory with a msf named "data_model" under it for old  version
   databases,  or  with  a segment named "db_model" under it for new
   version databases, with a ".db" suffix on the directory.

   mode - - (input) fixed bin, either 1 or 2, currently only mode  =
   2 for retrieval from a database model is supported.

   data_model_ptr - - (output) pointer, the database model  segment(
   or  msf)  pointer, that is returned upon a successfull opening of
   the data model.

   code - -  (output)  fixed  bin(35),  the  standard  error  status
   encoding, 0 unless an error occured.

*/

/* HISTORY:

   Written by RG Luebke October 1975

   Modified by J. A. Weeldreyer to change header -- December, 1976.

   Modified by O D Friesen to handle queued scope requests  --  July
   1977

   Modified by Oris Friesen to accomodate new version data bases  --
   October 1978


   Modified by Jim Gray - -  Jan.  1980,  to  disallow  opening  for
   creation.

   Rewritten by Jim Gray - - Feb. 1980,  to  correct  bad  logic  in
   determining  type and version of database, and to remove obsolute
   subroutine calls.

   Modified by Jim Gray - - June 1980, to change  Entry  not  found.
   error  message  to  the  no_database  error message, to make more
   sense to higher level routines.

   81-01-21 Jim Gray : modified to have access set for DBA types

   81-02-12 Jim Gray : modified to have the  open_dm  entry,  called
   only by dmd_, to require a DBA once the database is secured.

   81-04-22 Jim Gray : added  the  open_model  entry  for  the  mmi_
   interface.    Changed    path    checking    to   use   the   new
   mrds_dm_check_path routine, so that suffixes  would  be  handled,
   and access violation handling delayed for possible DBA setting of
   needed access. The mrds_dm_open_table_mgr usage  was  removed  to
   allow  the  new  open  name manager to provide the only number of
   opening restrictions.

   81-04-30 Jim Gray : added error_table_$no_info to codes  captured
   from  hcs_$initiate  of the db_model segment, for case where user
   has no acl to both db dir and db_model. This gets translated into
   mrds_error_$no_model_access.

   83-06-17 Davids: Replaced the generate_call to dmd_v1_$open_dm
   with an error code assignment (mrds_error_$version_3_db) to indicate that
   old version databases are no longer supported.

   83-06-21 Davids: Removed the rest of the overhead dealing with 
   old version database which is now never executed (except to decide
   not to execute it).
*/

/* BEGIN CHANGE 81-02-12 *********************************************** */

mrds_dm_open: procedure (rel_path_a, mode_a, data_model_ptr_a, code_a);

/* entry to be used internally by mrds code, no access restrictions */

	internal_call = "1"b;
	rel_path = rel_path_a;
	mode = mode_a;

	call common ();

	data_model_ptr_a = data_model_ptr;
	code_a = code;

	return;







open_dm: entry (rel_path_b, mode_b, data_model_ptr_b, code_b);

/* entry to be called only via dmd_, never by any mrds modules,
   to use this entry on a secured database, the user must be a DBA */

	internal_call = "0"b;
	rel_path = rel_path_b;
	mode = mode_b;

	call common ();

	if code = 0 then
	     call secured_db_check ();

	data_model_ptr_b = data_model_ptr;
	code_b = code;

	return;

/* END CHANGE 81-02-12 ********************************************* */

/* BEGIN CHANGE 81-04-22 ************************************************ */

open_model: entry (rel_path_c, open_name, code_c);

/* this entry is called from mmi_ for opening the model,
   it makes use of the open_dm entry to make sure the user
   is a DBA if the database is secured. */

	call open_dm ((rel_path_c), 2, model_ptr, code_c);
	if code_c = 0 then do;

/* opening successful, associate the model pointer with the open name */

		call mu_open_name_manager$define_open_name (open_name, "m" /* model opening type */, model_ptr, code_c);

	     end;

	return;

/* END CHANGE 81-04-22 ************************************************** */

common: procedure ();

/* initialize */

	dbm_ptr, data_model_ptr = null ();
	code = 0;

/* check the opening mode given */

	if mode < 1 | mode > 2 then
	     code = mrds_error_$invalid_opening_mode;

	else if mode = 1				/* indicates opening for creation */ then do;
		code = mrds_error_$invalid_opening_mode;
		call sub_err_ (code, caller_name, continue, info_ptr, return_value, "^/^a",
		     "Opening database models for creation will not be allowed until a later release.");
	     end;

	else if mode = 2				/* open for retrieval */ then do;

/* BEGIN CHANGE 81-04-22 ************************************************ */

/* check on the path that was given to us, it may be
   to either an old or new architecture database, and for
   new databases, it may or may not have the .db suffix */

		use_search_paths = "0"b;
		if search (rel_path, "<>") = 0 then do;
		     call search_paths_$get (MRDS_SEARCHLIST, sl_control_default, "", null (), addr(local_area),
			sl_info_version_1, mrds_search_list_ptr, code);
		     loop_idx = mrds_search_list_ptr -> sl_info.num_paths;
		     use_search_paths = "1"b;
		     end;
		else do;
		     call absolute_pathname_ (rel_path, abs_path, code);
		     loop_idx = 1;
		     end;
		if code = 0 then do;
		     code = 1;
		     do idx = 1 to loop_idx while (code ^= 0);
			if use_search_paths then abs_path = pathname_ (mrds_search_list_ptr -> sl_info.paths(idx).pathname, rel_path);
			call mrds_dm_check_path (abs_path, containing_dir, db_dir, new_found, code);
			if code = error_table_$incorrect_access then
			     code = 0;	/* ignore access problems for right now,
					              may need to set acl's for a DBA */
			end;                          /* end do */
		     end;

		if code = 0 then do;
			if ^new_found		/* old architecture */
			then code = mrds_error_$version_3_db;
			else do;

/* now we need to get a pointer to the new architecture model segment */

				db_path = rtrim (containing_dir) || ">" || db_dir;

/* END CHANGE 81-04-22 ************************************************* */

/* BEGIN CHANGE 81-01-21 *********************************************** */

				call hcs_$initiate (db_path, "db_model", "", 0, 1, data_model_ptr, code);

				if code = error_table_$moderr |
				     code = error_table_$no_info then do; /* segment present */
					call mrds_dm_authorization$set_needed_access
					     (rtrim (db_path), code); /* if user DBA */

					if code ^= 0 then
					     code = mrds_error_$no_model_access; /* this used to be error_table_$moderr */
					else call hcs_$initiate (db_path, "db_model", "", 0, 0, data_model_ptr, code);
				     end;

/* END CHANGE 81-01-21 ********************************************** */

				if data_model_ptr ^= null then do;

					dbm_ptr = data_model_ptr;

					if db_model.version ^= 4 then
					     code = error_table_$unimplemented_version;
					else code = 0;


				     end;
			     end;
		     end;

	     end;

	if code ^= 0 then
	     data_model_ptr, dbm_ptr = null ();

	return;

     end;

/* BEGIN CHANGE 81-02-12 ********************************************* */

secured_db_check: procedure ();

/* routine to check for the database being is a secured state,
   and if so, that the user is a DBA, and thus may use the external entry */

	if code ^= 0 then ;
	else if internal_call then ;
	else do;

/* get the secured state of the dataabase */

		call mrds_dm_db_secured$get_secured_status (dbm_ptr, addr (local_area),
		     database_state_structure_version, database_state_ptr, code);
		if code ^= 0 then

		     call sub_err_ (code, caller_name, continue, info_ptr, return_value, "^/^a^a^a",
			"Unable to get the secured state of database """, db_path, """.");

		else if ^database_state.secured then ;
		else do;

/* database secured, see if the user is a DBA */

			call mrds_dm_authorization$get_user_class (rtrim (db_path), addr (local_area),
			     mrds_authorization_structure_version, mrds_authorization_ptr, code);
			if code ^= 0 then

			     call sub_err_ (code, caller_name, continue, info_ptr, return_value, "^/^a^a^a",
				"Unable to get user class for database """, db_path, """.");

			else if mrds_authorization.administrator then ;
			else do;

/* not DBA on secured db, issue error */

				code = error_table_$insufficient_access;
				call sub_err_ (code, caller_name, continue, info_ptr, return_value, "^/^a^a^a ^a",
				     "The database """, db_path, """ has been secured,",
				     "so the caller must be a DBA to use direct model access.");

			     end;

		     end;

	     end;

	if code ^= 0 then
	     data_model_ptr, dbm_ptr = null ();

     end;

/* END CHANGE 81-02-12 ************************************************ */

          declare MRDS_SEARCHLIST        char (4) init ("mrds") int static options (constant);
          declare abs_path               char (168);
          declare absolute_pathname_     entry (char(*), char(*), fixed bin(35));
	declare caller_name		 char (32) init ("dmd_$open_dm"); /* name of calling routine */
	declare code		 fixed bin (35);	/* error return code (Output) */
	declare code_a		 fixed bin (35);	/* temp for mrds_dm_open entry */
	declare code_b		 fixed bin (35);	/* temp for open_dm entry */
	declare code_c		 fixed bin (35);	/* error code for open_model entry */
	declare containing_dir	 char (168);	/* dir over db */
	declare continue		 char (1) init ("c"); /* dont stop after print mesg */
	declare ctl_file		 char (32) init ("ctl_file");
	declare data_model_ptr	 ptr;		/* pointer to the opened data model (Output) */
	declare data_model_ptr_a	 ptr;		/* temp for mrds_dm_open entry */
	declare data_model_ptr_b	 ptr;		/* temp for open_dm entry */
	declare db_dir		 char (32);	/* db entry name */
	declare db_path		 char (168);
	declare error_table_$incorrect_access fixed bin (35) ext; /* no acl to db */
	declare error_table_$insufficient_access fixed bin (35) ext; /* not DBA and db secured */
	declare error_table_$moderr	 fixed bin (35) ext;/* no access */
	declare error_table_$no_info	 fixed bin (35) ext;/* no acl to db dir or db_model */
	declare error_table_$unimplemented_version fixed bin (35) external;
	declare hcs_$initiate	 entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr, fixed bin (35));
          declare idx                    fixed bin;
	declare info_ptr		 ptr init (null ());/* unused */
	declare internal_call	 bit (1);		/* on => called from mrds, not by dmd_ */
	declare local_area		 area (4096);	/* space for db state, user class info, and search list */
          declare loop_idx               fixed bin;
	declare mu_open_name_manager$define_open_name entry (char (*), char (1), ptr, fixed bin (35)); /* associates name with ptr */
	declare mode		 fixed bin;	/* mode of opening 1= creation 2= retrieval (Input) */
	declare mode_a		 fixed bin;	/* temp for mrds_dm_open entry */
	declare mode_b		 fixed bin;	/* temp for open_dm entry */
	declare model_ptr		 ptr;
	declare mrds_dm_authorization$get_user_class entry (char (*), ptr, fixed bin, ptr, fixed bin (35)); /* finds if DBA */
	declare mrds_dm_authorization$set_needed_access entry (char (*), fixed bin (35)); /* sets access needed, if DBA */
	declare mrds_dm_check_path	 entry (char (*), char (168), char (32), bit (1), fixed bin (35)); /* checks for legal db path */
	declare mrds_dm_db_secured$get_secured_status entry (ptr, ptr, fixed bin, ptr, fixed bin (35)); /* gets secured bit */
	declare mrds_error_$invalid_opening_mode fixed bin (35) external;
	declare mrds_error_$no_model_access fixed bin (35) ext; /* no r acl on db_model */
	declare mrds_error_$version_3_db fixed bin (35) ext;
          declare mrds_search_list_ptr   ptr;
	declare new_found		 bit (1);		/* on => new version architecture */
	declare open_name		 char (*);	/* user defined opening name */
          declare pathname_              entry (char(*), char(*)) returns(char(168));
	declare rel_path		 char (168);	/* pathname of data model  (Input) */
	declare rel_path_a		 char (168);	/* temp for mrds_dm_open entry */
	declare rel_path_b		 char (168);	/* temp for open_dm entry */
	declare rel_path_c		 char (*);	/* relative db path for open_model entry */
	declare return_value	 fixed bin (35) init (0); /* unused */
          declare search_paths_$get      entry (char(*), bit(36), char(*), ptr, ptr, fixed bin, ptr, fixed bin(35));
	declare sub_err_		 entry options (variable); /* reports errors */
	declare sys_info$max_seg_size	 fixed bin (35) ext;
          declare use_search_paths       bit (1);
	declare (addr, empty, fixed, null, rel, rtrim, search) builtin;

%include mdbm_db_model;
%page;
%include mrds_authorization;
%page;
%include mrds_database_state;
%page;
%include sl_info;
%page;
%include sl_control_s;

     end mrds_dm_open;
