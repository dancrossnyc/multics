/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

mrds_dsm_define_temp: proc (dsm_pn, iocb_ptr, a_code);

/*
   The function of the define_dsm module is to prepare  a  temporary
   data  submodel to accept relation definitions. If dsm_pn is null,
   the path is set to a unique entry in the process  directory.  The
   file  is  attached  to  a  unique switchname for direct_output. A
   temporary header record is written which  contains  the  submodel
   version  and  a  string  identifing the header record. A complete
   header record cannot be written because the number  of  relations
   is  not  yet  known.  The  temporary  record is needed because it
   contains the submodel version.

   Known Bugs:

   Other Problems:
   
   HISTORY:

   75-11-?? Lackey: written

   76-12-?? Lackey: added creator_id to the header record

   80-11-24 Spratt: Use the pathname specified  in  temp_dsm_pn,  if
   .        it's non-null. Enforce the requirement that the dsm  not
   .        exist prior to "definition."

   81-02-24 Davids: reformated the header and declaration  sections.
   .        removed the iox_modes include file. reformated the  code
   .        and   renamed   some   variables,   also   changed  some
   .        declarations. the header record now written has null  or
   .        0  values  in  elements  not  used  rather than just not
   .        setting them.

   81-02-25 Davids: changed the temp_dsm_pn parameter to dsm_pn  and
   .        added the internal variable  internal_dsm_pn.  this  was
   .        needed  so  that  if  the path parameter was "" we could
   .        generate a path that was in the  process  directory.  we
   .        could  not merely just change the parameters value since
   .        it was an input parameter, also it  was  a  zero  length
   .        string whose value we could not change.

   81-06-02   Davids:   changed   mrds_dsm_header_str.incl.pl1    to
   .        mrds_dsm_header;
*/

/* PARAMETERS */

	dcl     dsm_pn		 char (*);	/* (input) path of the dsm segment */
	dcl     iocb_ptr		 ptr;		/* (output) iocb pointer to the dsm segment */
	dcl     a_code		 fixed bin (35);	/* (output) standard error code */

/* AUTOMATIC */

	dcl     atd		 char (178) init (""); /* attach description for attachment to the dsm segment */
	dcl     bit_count		 fixed bin (24);	/* bit count of dsm segment, if it already exists */
	dcl     code		 fixed bin (35);	/* internal error code */
	dcl     dsm_dir		 char (168);	/* directory containing the dsm segment */
	dcl     dsm_entry		 char (32);	/* entry name of the dsm segment */
	dcl     01 header_str	 like mrds_dsm_header; /* automatic version of the header record */
	dcl     internal_dsm_pn	 char (168);	/* a working copy of the dsm_path */
	dcl     key		 char (256) varying;/* key for the header record */
	dcl     record_length	 fixed bin (21);	/* size of header srecord in bytes */
	dcl     type		 fixed bin (2);	/* type of dsm entry, if it already exists */

/* BASED */

%include mrds_dsm_header;

/* BUILTIN */

	dcl     addr		 builtin;
	dcl     low		 builtin;
	dcl     null		 builtin;
	dcl     size		 builtin;
	dcl     substr		 builtin;

/* CONSTANTS */

	dcl     KEYED_SEQUENTIAL_UPDATE fixed bin init (10) internal static options (constant);

/* ENTRIES */

	dcl     expand_pathname_	 entry (char (*), char (*), char (*), fixed bin (35));
	dcl     get_pdir_		 entry returns (char (168));
	dcl     hcs_$status_minf	 entry (char (*), char (*), fixed bin (1), fixed bin (2), fixed bin (24), fixed bin (35));
	dcl     iox_$attach_name	 entry (char (*), ptr, char (*), ptr, fixed bin (35));
	dcl     iox_$destroy_iocb	 entry (ptr, fixed bin (35));
	dcl     iox_$detach_iocb	 entry (ptr, fixed bin (35));
	dcl     iox_$open		 entry (ptr, fixed bin, bit (1) aligned, fixed bin (35));
	dcl     iox_$seek_key	 entry (ptr, char (256) varying, fixed bin (21), fixed bin (35));
	dcl     iox_$write_record	 entry (ptr, ptr, fixed bin (21), fixed bin (35));
	dcl     unique_chars_	 entry (bit (*)) returns (char (15));

/* EXTERNAL */

	dcl     error_table_$namedup	 external static fixed bin (35);
	dcl     error_table_$no_record external static fixed bin (35);
	dcl     error_table_$noentry	 external static fixed bin (35);
	dcl     mrds_data_$dsmd_version_number external static fixed bin;

	if dsm_pn = ""
	then internal_dsm_pn = substr (get_pdir_ (), 1, 32) || ">" || unique_chars_ ("0"b) || "temp_.dsm";
	else internal_dsm_pn = dsm_pn;


	call expand_pathname_ (internal_dsm_pn, dsm_dir, dsm_entry, a_code);
	if a_code ^= 0
	then goto exit;

	call hcs_$status_minf (dsm_dir, dsm_entry, 1, type, bit_count, a_code);
	if a_code = 0
	then do;
		a_code = error_table_$namedup;
		goto exit;
	     end;
	else
	     if a_code ^= error_table_$noentry
	then goto exit;

	atd = "vfile_ " || internal_dsm_pn;
	call iox_$attach_name ((unique_chars_ ("0"b) || ".dsm"), iocb_ptr, atd, null (), a_code);
	if a_code ^= 0
	then goto exit;

	call iox_$open (iocb_ptr, KEYED_SEQUENTIAL_UPDATE, "0"b, a_code);
	if a_code ^= 0
	then do;
		call iox_$detach_iocb (iocb_ptr, code);
		call iox_$destroy_iocb (iocb_ptr, code);
		goto exit;
	     end;



	key = low (32);
	call iox_$seek_key (iocb_ptr, key, record_length, a_code);
	if a_code = error_table_$no_record
	then do;
		header_str.dsm_generator_version = mrds_data_$dsmd_version_number;
		header_str.date_time_generated = 0;
		header_str.database_pn = "";
		header_str.name = "data_submodel_header";
		header_str.num_of_relations = 0;
		header_str.creator_id = "";

		record_length = size (header_str) * 4;
		call iox_$write_record (iocb_ptr, addr (header_str), record_length, a_code);
	     end;

exit:
	return;

     end /* mrds_dsm_define_temp */;
