/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

mrds_dsm_open: proc (submodel_pn, iocb_ptr, code);

/*
   This routine opens a submodel for  either  read,  update,  shared
   read,  or  shared  update depending on the entry used. it returns
   either a zero error code and a pointer to the submodel iocb or  a
   non-zero  error  code  and a null iocb pointer. The prinary entry
   point mrds_dsm_open should never be called. The file  is  checked
   to  be  sure  its a valid submodel after opening and if its not a
   valid  submodel  the  file  is  closed   and   the   error   code
   mrds_error_$not_dsm  is  returned.  If  for  any  reason the file
   cannot be varified it is also closed and an error code returned.

   Known Bugs:

   Other Problems:

   HISTORY

   81-01-22 Davids: written.

   81-01-30 Davids: modified to verify that the  file  is  really  a
   .        submodel by calling mrds_dsm_read_header$version, If the
   .        error code returned is zero its a submodel.

   81-04-24 Davids: added the update_share entry point.

   83-06-17 Davids: Modified to return mrds_error_$version_1_dsm if the
   submodel being opened is a version 1 submodel. A version 1 submodel
   will not be opened
*/

/* PARAMETERS */

	dcl     submodel_pn		 char (*);	/* (input) path to submodel to be opened */
	dcl     iocb_ptr		 ptr;		/* (output) pointer to submodel iocb */
	dcl     code		 fixed bin (35);	/* (output) error code */

/* AUTOMATIC */

	dcl     atd		 char (200) init (""); /* attach description */
	dcl     mode		 fixed bin;	/* opening mode */

/* BUILTIN */

	dcl     null		 builtin;
	dcl     rtrim		 builtin;

/* EXTERNAL */

	dcl     error_table_$badcall	 fixed bin (35) ext static;

	iocb_ptr = null ();
	code = error_table_$badcall;
	return;






read: entry (submodel_pn, iocb_ptr, code);

	atd = "vfile_ " || submodel_pn;
	mode = 8;
	call common;
	return;





update: entry (submodel_pn, iocb_ptr, code);

	atd = "vfile_ " || submodel_pn;
	mode = 10;
	call common;
	return;





read_share: entry (submodel_pn, iocb_ptr, code);

	atd = "vfile_ " || rtrim (submodel_pn) || " -share";
	mode = 8;
	call common;
	return;





update_share: entry (submodel_pn, iocb_ptr, code);

	atd = "vfile_ " || rtrim (submodel_pn) || " -share";
	mode = 10;
	call common;
	return;

common: proc;

/* AUTOMATIC */

	dcl     a_code		 fixed bin (35);	/* internal error code */
	dcl     version		 fixed bin;	/* used as an output parameter to read_header,
						   nothing is done with the returned value */

/* EXTERNAL */

	dcl     mrds_error_$version_1_dsm fixed bin (35) ext static;

/* ENTRIES */

	dcl     iox_$attach_name	 entry (char (*), ptr, char (*), ptr, fixed bin (35));
	dcl     iox_$close		 entry (ptr, fixed bin (35));
	dcl     iox_$destroy_iocb	 entry (ptr, fixed bin (35));
	dcl     iox_$detach_iocb	 entry (ptr, fixed bin (35));
	dcl     iox_$open		 entry (ptr, fixed bin, bit (1) aligned, fixed bin (35));
	dcl     mrds_dsm_read_header$version entry (ptr, fixed bin, fixed bin (35));
	dcl     unique_chars_	 entry (bit (*)) returns (char (15));





	call iox_$attach_name (unique_chars_ ("0"b), iocb_ptr, atd, null (), code);
	if code ^= 0
	then iocb_ptr = null ();
	else do;
		call iox_$open (iocb_ptr, mode, "0"b, code);
		if code ^= 0
		then do;
			call iox_$detach_iocb (iocb_ptr, a_code);
			call iox_$destroy_iocb (iocb_ptr, a_code);
			iocb_ptr = null ();
		     end;
		else do;
			call mrds_dsm_read_header$version (iocb_ptr, version, code);
			if code = 0 & version = 1
			then code = mrds_error_$version_1_dsm;
			if code ^= 0
			then do;
				call iox_$close (iocb_ptr, a_code);
				call iox_$detach_iocb (iocb_ptr, a_code);
				call iox_$destroy_iocb (iocb_ptr, a_code);
			     end;
		     end;
	     end;

	return;

     end /* common */;

     end /* mrds_dsm_open */;

