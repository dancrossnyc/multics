/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1976 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */



/*
                   BEGIN_DESCRIPTION
   this routine has three  entries,  get_header  for  use  by  dmd_,
   mrds_dm_get_header for use internally by mrds, and get_model_info
   for use by mmi_

   It's purpose is to return the version and creation infmoration on
   the database model.

   There are three entries. mrds_dm_get_header is for  internal  use
   by  mrds.  get_header is for external use by dmd_. get_model_info
   is for external use by mmi_. The external entries check  for  the
   user being a DBA if the database is secured.
                   END_DESCRIPTION
*/

/* PARAMETERS:

   ======= for the get_model_info entry

   open_name - - (input) char(*), the name given to mmi_$open_model

   area_ptr - - (input) ptr, points to a freeing area for  structure
   allocation

   structure_version - - (input) fixed bin, the desired  version  of
   the structure

   mrds_db_model_info_ptr - - (output) ptr, points to the  allocated
   structure in mrds_db_model_info.incl.pl1

   code - - (output) fixed bin(35), the error status encoding

   ======= for the mrds_dm_get_header and get_header entries

   data_model_ptr - - (input) ptr, the model pointer  returned  from
   dmd_$open_dm

   area_ptr - - (input) ptr, points to an area in which to  allocate
   the header information

   dmh_ptr  -  -  (output)  ptr,  points   to   the   structure   in
   mrds_dm_header.incl.pl1

   code - - (output) fixed bin(35), error status encoding

*/

/* HISTORY:

   Modified by Oris Friesen for new version data  bases  --  October
   1978

   Modified by Jim Gray - - Feb. 1980, to correctly determine  which
   version  database  data_model_ptr, we were being called with. Old
   versions  will  have  data_mode_ptr  =  to  an  iocb_ptr  in  the
   area_linker,  since  it  is  to  the  data_model  vfile  for that
   version.


   81-02-12 Jim Gray  :  changed  so  that  calls  to  the  external
   interface  dmd_$get_header  require  a  DBA  once the database is
   secured.  mrds_dm_get_header  entry  should  only  be  called  by
   internal mrds, and internal mrds should never call the get_header
   entry.

   81-04-22 Jim Gray : added get_model_info entry for mmi_

   83-02-18 Davids: Modified get_model_info entry by adding the label
   exit_get_model_info and changing the deeply nested structure to one
   which just goes to the exit increase of an error. Also added code
   for handling version2 structures and for differentiating between
   version 1 and version 2 structures. Added the declaration for version 1
   structures since the include file now has version 2.

   83-02-24 Davids: changed references to mrds_db_model_info_(V DM)FILE_TYPE
   to mrds_db_model_info_(v dm)file_type, and before_joural in the dmfile_attributes
   substructure of mrds_db_model_info to rollback.

   83-06-10 Roger Lackey : Added code to force version 3 database to be
   vfile_type database instead of trying to overlay the db_model to determine
   what type it is.

   83-06-21 Davids: Removed check for old version database and the call
   to v1 code if it was an old version db (old version dbs can no longer
   be opened)
*/

/* BEGIN CHANGE 81-02-12 **************************************** */

mrds_dm_get_header: proc (data_model_ptr_a, area_ptr_a, dmh_ptr_a, code_a);

/* for internal mrds use */

	internal_call = "1"b;

	data_model_ptr = data_model_ptr_a;
	area_ptr = area_ptr_a;

	call common ();

	dmh_ptr_a = dmh_ptr;
	code_a = code;

	return;

get_header: entry (data_model_ptr_b, area_ptr_b, dmh_ptr_b, code_b);

/* for external use only, not by mrds, needs a DBA if db secured */

	internal_call = "0"b;

	data_model_ptr = data_model_ptr_b;
	area_ptr = area_ptr_b;

	call common ();

	dmh_ptr_b = dmh_ptr;
	code_b = code;

	return;

/* END CHANGE 81-02-12 ************************************************* */

/* BEGIN CHANGE 81-04-22 ************************************** */

get_model_info: entry (open_name, area_ptr_c, structure_version, mrds_db_model_info_ptr, code_c);

/* routine to get db creation info for the mmi_ interface.
   It uses the get_header entry to allow secured databases only
   have DBA's use this entry, and to handle old version databases
   in a common manner. */

/* initialize */

	code_c = 0;
	mrds_db_model_info_ptr = null ();

/* get the model pointer from the opening name */

	call mu_open_name_manager$get_model_pointer (open_name, model_type, model_ptr, code_c);
	if code_c ^= 0
	then goto exit_get_model_info;

/* get the header info for either an old or new database,
   not allowing a non-dba to mess with a secured database. */

	call get_header (model_ptr, addr (local_area), dmh_ptr_c, code_c);
	if code_c ^= 0
	then goto exit_get_model_info;

	dmh_ptr = dmh_ptr_c;
	area_ptr = area_ptr_c;

/* check the arguments */

	if area_ptr = null ()
	then do;
		code_c = error_table_$badcall;
		goto exit_get_model_info;
	     end;

	unspec (my_area_info) = "0"b;
	my_area_info.version = 1;
	my_area_info.areap = area_ptr;
	call area_info_ (addr (my_area_info), code_c);
	if code_c ^= 0
	then goto exit_get_model_info;

	if my_area_info.no_freeing
	then do;
		code_c = mrds_error_$not_freeing_area;
		goto exit_get_model_info;
	     end;

	if structure_version ^= 1 & structure_version ^= 2
	then do;
		code_c = error_table_$unimplemented_version;
		goto exit_get_model_info;
	     end;

/* good arguments, fill in the users structure */

	on area begin;
		code_c = error_table_$area_too_small;
		goto exit_get_model_info;
	     end;

	on cleanup begin;
		if mrds_db_model_info_ptr ^= null ()
		then do;
			if structure_version = 1
			then
			     free mrds_db_model_info_ptr -> mrds_db_model_info_1 in (return_area);
			else
			     free mrds_db_model_info_ptr -> mrds_db_model_info in (return_area);
			mrds_db_model_info_ptr = null ();
		     end;
	     end;

	if structure_version = 1
	then do;
		allocate mrds_db_model_info_1 set (mrds_db_model_info_ptr) in (return_area);
		unspec (mrds_db_model_info_1) = "0"b;
		mrds_db_model_info_1.version = 1;
		mrds_db_model_info_1.model_version = dm_header.dmd_version;
		mrds_db_model_info_1.creator_id = dm_header.creator_id;
		mrds_db_model_info_1.creation_time = dm_header.create_time;
	     end;
	else do;
		if dm_header.dmd_version = 3 then vfile_database_sw = "1"b;
		else vfile_database_sw = model_ptr -> db_model.vfile_type;

		allocate mrds_db_model_info set (mrds_db_model_info_ptr) in (return_area);
		unspec (mrds_db_model_info) = "0"b;
		mrds_db_model_info.version = 2;
		mrds_db_model_info.model_version = dm_header.dmd_version;
		mrds_db_model_info.creator_id = dm_header.creator_id;
		mrds_db_model_info.creation_time = dm_header.create_time;
		if vfile_database_sw
		then do;
			mrds_db_model_info.db_type = mrds_db_model_info_vfile_type;
			mrds_db_model_info.dmfile_attributes.protected = "0"b;
			mrds_db_model_info.dmfile_attributes.rollback = "0"b;
			mrds_db_model_info.dmfile_attributes.concurrency = "0"b;
		     end;
		else do;
			mrds_db_model_info.db_type = mrds_db_model_info_dmfile_type;
			mrds_db_model_info.dmfile_attributes.protected = model_ptr -> db_model.db_type_flags.transactions_needed;
			mrds_db_model_info.dmfile_attributes.rollback = model_ptr -> db_model.db_type_flags.rollback_on;
			mrds_db_model_info.dmfile_attributes.concurrency = model_ptr -> db_model.db_type_flags.concurrency_on;
		     end;
	     end;

exit_get_model_info:
	return;

/* END CHANGE 81-04-22 ************************************************* */

common: procedure ();

/* initialize */

	dmh_ptr = null;


	call hcs_$fs_get_path_name (data_model_ptr, db_path, ldn, model_name,
	     code);
	if code = 0 then do;

		dbm_ptr = data_model_ptr;

/* check for the user being a DBA, if the database is secured */

		if ^internal_call then
		     call secured_db_check ();

		if code = 0 then do;

/* fill in the database creation information */

			on cleanup begin;
				if dmh_ptr ^= null () then do;
					free dm_header in (return_area);
					dmh_ptr = null ();
				     end;
			     end;

			on no_read_permission begin;
				code = mrds_error_$no_model_access;
				dmh_ptr = null ();
				goto exit;
			     end;

			allocate dm_header in (return_area);
			unspec (dm_header) = "0"b;

			dm_header.dm_header_id = " "; /* this used to be 'dmd_head' */
			dm_header.dmd_version = db_model.version;

			changer_ptr = pointer (dbm_ptr, db_model.changer_ptr);
			do while (changer_ptr -> changer.next ^= NULL_OFFSET); /* creator is last on change list */
			     changer_ptr = pointer (dbm_ptr, changer_ptr -> changer.next);
			end;

			dm_header.creator_id = changer_ptr -> changer.id;
			dm_header.create_time = changer_ptr -> changer.time;

		     end;
	     end;
exit:

	return;

     end;

/* BEGIN CHANGE 81-02-12 ********************************************** */

secured_db_check: procedure ();

/* routine to check for the database being is a secured state,
   and if so, that the user is a DBA, and thus may use the external entry */

	if code ^= 0 then ;
	else if internal_call then ;
	else do;

/* get the secured state of the dataabase */

		call mrds_dm_db_secured$get_secured_status (dbm_ptr, addr (local_area),
		     database_state_structure_version, database_state_ptr, code);
		if code ^= 0 then

		     call sub_err_ (code, caller_name, continue, info_ptr, return_value, "^/^a^a^a",
			"Unable to get the secured state of database """, db_path, """.");

		else if ^database_state.secured then ;
		else do;

/* database secured, see if the user is a DBA */

			call mrds_dm_authorization$get_user_class (rtrim (db_path), addr (local_area),
			     mrds_authorization_structure_version, mrds_authorization_ptr, code);
			if code ^= 0 then

			     call sub_err_ (code, caller_name, continue, info_ptr, return_value, "^/^a^a^a",
				"Unable to get user class for database """, db_path, """.");

			else if mrds_authorization.administrator then ;
			else do;

				code = error_table_$insufficient_access;

				call sub_err_ (code, caller_name, continue, info_ptr, return_value, "^/^a^a^a ^a",
				     "The database """, db_path, """ has been secured,",
				     "so the caller must be a DBA to use direct model access.");

			     end;

		     end;

	     end;

	if code ^= 0 then
	     data_model_ptr, dbm_ptr = null ();

     end;

/* END CHANGE 81-02-12 ************************************************ */

	declare NULL_OFFSET		 bit (18) init ((18)"1"b);
	declare area		 condition;	/* if area too small */
	declare area_info_		 entry (ptr, fixed bin (35)); /* gets area details */
	declare area_ptr		 ptr;		/* points to area in which informationb is returned */
	declare area_ptr_a		 ptr;		/* temp for mrd_dm_get_header entry */
	declare area_ptr_b		 ptr;		/* temp for get_header entry */
	declare area_ptr_c		 ptr;		/* temp for get_model_info entry */
	declare caller_name		 char (32) init ("dmd_$open_dm"); /* name of calling routine */
	declare cleanup		 condition;
	declare code		 fixed bin (35);	/* status return code */
	declare code_a		 fixed bin (35);	/* temp for mrds_dm_get_header entry */
	declare code_b		 fixed bin (35);	/* temp for get_header entry */
	declare code_c		 fixed bin (35);	/* temp for get_model_info entry */
	declare continue		 char (1) init ("c"); /* dont stop after print mesg */
	declare data_model_ptr	 ptr;		/* points to data model to be searched -- input */
	declare data_model_ptr_a	 ptr;		/* temp for mrds_dm_get_header entry */
	declare data_model_ptr_b	 ptr;		/* temp for get_header_entry */
	declare db_path		 char (168);
	declare dmh_ptr_a		 ptr;		/* temp for mrds_dm_get_header entry */
	declare dmh_ptr_b		 ptr;		/* temp for get_header entry */
	declare dmh_ptr_c		 ptr;		/* temp for get_model_info entry */
	declare error_table_$area_too_small fixed bin (35) ext; /* small area */
	declare error_table_$badcall	 fixed bin (35) ext;/* null area ptr */
	declare error_table_$insufficient_access fixed bin (35) ext; /* not DBA and db secured */
	declare error_table_$unimplemented_version fixed bin (35) ext; /* bad struct version */
	declare hcs_$fs_get_path_name	 entry (ptr, char (*), fixed bin, char (*), fixed bin (35));
	declare info_ptr		 ptr init (null ());/* unused */
	declare internal_call	 bit (1);		/* on => called from mrds, not by dmd_ */
	declare ldn		 fixed bin;
	declare local_area		 area (1024);	/* space for db state, and user class info */
	declare mu_open_name_manager$get_model_pointer entry (char (*), char (1), ptr, fixed bin (35)); /* gets ptr from name */
	declare model_name		 char (32);
	declare model_ptr		 ptr;
	declare model_type		 char (1);	/* type of opening */
	declare mrds_dm_authorization$get_user_class entry (char (*), ptr, fixed bin, ptr, fixed bin (35)); /* finds if DBA */
	declare mrds_dm_db_secured$get_secured_status entry (ptr, ptr, fixed bin, ptr, fixed bin (35)); /* gets secured bit */
	declare mrds_error_$no_model_access fixed bin (35) ext; /* no r acl to model */
	declare mrds_error_$not_freeing_area fixed bin (35) ext; /* no freeing attr on area */
	declare no_read_permission	 condition;	/* no r acl to model */
	declare open_name		 char (*);	/* model opening name */
	declare return_area		 area (sys_info$max_seg_size) based (area_ptr);
	declare return_value	 fixed bin (35) init (0); /* unused */
	declare structure_version	 fixed bin;	/* desired structure version */
	declare sub_err_		 entry options (variable); /* reports errors */
	declare sys_info$max_seg_size	 fixed bin ext;
	declare vfile_database_sw	 bit (1) aligned;
	declare (addr, empty, fixed, rel, null, pointer, rtrim, unspec) builtin;
	declare 1 my_area_info	 like area_info;	/* local copy */
	declare 1 mrds_db_model_info_1 aligned based (mrds_db_model_info_ptr),
						/* version 1 of this structure (now obsolete) */
		2 version		 fixed bin,	/* version number for this structure */
		2 model_version	 fixed bin,	/* the version number of the database model */
		2 creator_id	 char (32),	/* the person.project.tag of the database creator */
		2 creation_time	 fixed bin (71),	/* the convert date to binary form of the database creation time */
		2 mbz		 bit (36) unal;

%include mdbm_db_model;
%page;
%include mrds_dm_header;
%page;
%include mrds_authorization;
%page;
%include mrds_database_state;
%page;
%include area_info;
%page;
%include mrds_db_model_info;

     end mrds_dm_get_header;
