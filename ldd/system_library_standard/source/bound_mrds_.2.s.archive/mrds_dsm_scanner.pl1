/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

mrds_dsm_scanner:
     procedure (p_mrds_dsm_scanner_info_ptr, p_lex_stack_ptr, p_stack_index,
	p_code);

/*
   ??-??-?? Spratt: written

   80-06-28 Spratt: Order the alphanum_token_list by token size,  as
   .        was already done in the special_token_list.

   81-01-23: Davids: modified  internal  procedure  comment_skip  so
   .        that  before   if   calls   get_next_char_non_white   it
   .        increments  mrds_dsm_scanner_info.pos  by 1. This caused
   .        comments to really be skiped rather than causing  errors
   .        on the finial "/".

   81-05-08 Davids: Added a "PROGRAM LOGIC ERROR" clause to sub_err_
   .        message printed is the  mrds_dsm_scanner_info  structure
   .        is the wrong version.

   .        added an ioa_ call to report_mds_error to send the error
   .        message  to the listing - if a listing is being produced
   .        (listing_iocb_ptr ^= null)

   81-05-15 Davids: set p_code explicitly to zero in the init entry.

   .        reformated the call to sub_err_ and added a comment that
   .        the call to sub_err_ never returns

   .        removed unreferenced variables.

   81-05-26 Davids: rewrote most of the  comment  handling  code  so
   .        that multiple line comments and line numbers are handled
   .        correctly  and so comment lines (besides the first line)
   .        are output to the listing.

   81-07-21  Jim  Gray  :  added  a  check  for  the  legal  special
   .        characters allowed "(", ")", ",", ";", ":", and  "="  so
   .        that any other remaining special characters are detected
   .        as illegal in the scanner, and do  not  cause  a  parser
   .        failure.

   81-07-24 Davids: added the character "/" to the list  of  special
   .        characters so that comments will  be  processed  without
   .        errors.  the  character "*" does not need to be added to
   .        the special list for comment processing because once the
   .        /  is  found  a special check is made to see whether the
   .        next character is an *.

   81-09-16 Davids: added the substr builtin so that the code  would
   .        compile with -prefix stringrange. Since in execution the
   .        string  would  be  truncated  anyway the addition of the
   .        substr will not change the execution behavior.
   
   DESCRIPTION:

   Lexical analyzer or scanner for returning tokens  from  the  data
   submodel  source  to  the  parser.  A token may be an identifier,
   keyword, or end of file. Also returned  in  mrds_dsm_scanner_info
   for  use by the parser; an integer encoding value identifying the
   token, pointers to the token in the  source,  the  start  of  the
   current  line,  the  line  number and length of the token. A line
   numbered version of the original source can be produced. Comments
   and  white space are skipped over, and any invalid characters are
   detected.

   There are two entries: init entry - should be  called  first  for
   initialization  normal  entry  -  for  returning  tokens from the
   source

   Note that the value returned by p_code will currently  always  be
   zero. errors will be reported as they are found and an indication
   that     errors     have      occured      will      be      that
   mrds_dsm_scanner_info.highest_severity is ^= 0.



   PARAMETERS:

   === normal entry ===

   p_mrds_dsm_scanner_info_ptr - - (input) pointer to the info structure for
   the scanner.

   p_lex_stack_ptr - - (input) pointer to the lexical stack

   p_stack_index - - (input) stack element which is hold the returned token,
   etc.

   p_code - - (output) an error code describing reason for failure of scanner.

   lex_stack - - (output) the specified element contains the token pointer,
   length, encoding, and line number and line start pointer.

   (output) for the line numbered listing goes to switch pointed to by
   mrds_dsm_scanner_info.listing_iocb_ptr.

   === init entry ===

   p_mrds_dsm_scanner_info_ptr - - (input) same as above.

   p_code - - (output) same as above.
*/

/* PARAMETER */

	dcl     p_stack_index	 fixed bin;
	dcl     p_lex_stack_ptr	 ptr;
	dcl     p_code		 fixed bin (35);
	dcl     p_mrds_dsm_scanner_info_ptr ptr;

/* AUTOMATIC */

	dcl     current_terminal	 char (256) varying;
	dcl     current_terminal_and_token_match bit (1) aligned;
	dcl     debug_sw		 bit (1) aligned;
	dcl     encoding		 fixed bin (35);
	dcl     message		 char (256) varying;
	dcl     message_length	 fixed bin;
	dcl     symbol_found	 bit (1);
	dcl     alphanum_token_list_ptr ptr;
	dcl     special_token_list_ptr ptr;
	dcl     alphanum_token_list_index fixed bin;
	dcl     special_token_list_index fixed bin;
	dcl     alphanum_token_list_size fixed bin;
	dcl     special_token_list_size fixed bin;
	dcl     line_no_pic		 pic "zzzzzz9";
	dcl     work_area_ptr	 ptr;
	dcl     overlength_token_already_seen bit (1) aligned;

/* BASED */

	dcl     source_overlay	 char (sys_info$max_seg_size) based;
	dcl     token		 char (mrds_dsm_scanner_info.token_length)
				 based (mrds_dsm_scanner_info.token_ptr);
	dcl     work_area		 area (sys_info$max_seg_size) based (work_area_ptr);
	dcl     1 alphanum_token_list	 based (alphanum_token_list_ptr),
		2 size		 fixed bin (35),
		2 index		 (alphanum_token_list_size refer (alphanum_token_list.size))
				 fixed bin (35);

	dcl     1 special_token_list	 based (special_token_list_ptr),
		2 size		 fixed bin (35),
		2 index		 (special_token_list_size refer (special_token_list.size))
				 fixed bin (35);
	dcl     char_string		 (sys_info$max_seg_size) char (1) based;

/* BUILTIN */

	dcl     substr		 builtin;
	dcl     reverse		 builtin;
	dcl     max		 builtin;
	dcl     string		 builtin;
	dcl     hbound		 builtin;
	dcl     null		 builtin;
	dcl     index		 builtin;
	dcl     length		 builtin;
	dcl     verify		 builtin;
	dcl     addr		 builtin;
	dcl     ltrim		 builtin;
	dcl     addrel		 builtin;

/* CONSTANT */

	dcl     MYNAME		 init ("mrds_dsm_scanner") char (16) internal static
				 options (constant);
	dcl     EOF_ENCODING	 fixed bin internal static options (constant) init (0);
	dcl     WHITESPACE_CHARS	 char (2) internal static options (constant)
				 init ("	 ");	/* tab and blank. */
	dcl     ALPHANUM_CHARS	 char (62) internal static options (constant)
				 init ("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890");
	dcl     IDENTIFIER_CHARS	 char (64) internal static options (constant)
				 init (
				 "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890-_");
	dcl     SPECIAL_CHARS	 char (7) init ("(),;:=/");
	dcl     NL_CHAR		 char (1) internal static options (constant) init ("
");

	dcl     START		 fixed bin internal static options (constant) init (0);
	dcl     CASE_END		 fixed bin internal static options (constant) init (7);
	dcl     ALPHANUM_TYPE	 fixed bin internal static options (constant) init (1);
	dcl     SPECIAL_TYPE	 fixed bin internal static options (constant) init (2);
	dcl     NL_TYPE		 fixed bin internal static options (constant) init (3);
	declare ILLEGAL_TYPE	 fixed bin int static options (constant) init (5);
	dcl     EOF_TYPE		 fixed bin internal static options (constant) init (6);
	dcl     WHITESPACE_TYPE	 fixed bin internal static options (constant) init (4);

	dcl     TYPE_NAME_ARRAY	 (0:7) char (32) varying internal static
				 options (constant)
				 init ("start", "alphanumeric", "special", "newline", "white space",
				 "illegal", "end of file", "case end");

/* ENTRY */

	dcl     sub_err_		 entry options (variable);
	dcl     ioa_$ioa_switch	 entry options (variable);
	dcl     ioa_$rs		 entry options (variable);
	dcl     ioa_		 entry options (variable);
	dcl     requote_string_	 entry (char (*)) returns (char (*));
	dcl     iox_$put_chars	 entry (ptr, ptr, fixed bin (21), fixed bin (35));

/* EXTERNAL */

	dcl     error_table_$unimplemented_version fixed bin (35) ext;
	dcl     sys_info$max_seg_size	 fixed bin (24) ext;

/* normal entry */

	mrds_dsm_scanner_info_ptr = p_mrds_dsm_scanner_info_ptr;
	if mrds_dsm_scanner_info.version ^= MRDS_DSM_SCANNER_INFO_VERSION_1 then
	     call
		sub_err_ (error_table_$unimplemented_version, MYNAME, "s", null,
		(0),
		"PROGRAM LOGIC ERROR^/The wrong version of the mrds_dsm_scanner_info structure was supplied."
		);



/* will never return from the call to sub_err_ */

	debug_sw = mrds_dsm_scanner_info.debug_scanner;
	lex_stack_ptr = p_lex_stack_ptr;
	work_area_ptr = mrds_dsm_scanner_info.work_area_ptr;
	special_token_list_ptr = mrds_dsm_scanner_info.special_token_list_ptr;
	alphanum_token_list_ptr = mrds_dsm_scanner_info.alphanum_token_list_ptr;
	p_code = 0;
	goto state (START);

/* initialization entry */

mrds_dsm_scanner$init:
     entry (p_mrds_dsm_scanner_info_ptr, p_code);

	p_code = 0;
	mrds_dsm_scanner_info_ptr = p_mrds_dsm_scanner_info_ptr;
	work_area_ptr = mrds_dsm_scanner_info.work_area_ptr;
	call initialize_encoding_information;
	call
	     get_next_char_init (mrds_dsm_scanner_info.char_ptr,
	     mrds_dsm_scanner_info.type, mrds_dsm_scanner_info.char);

	return;

/* START */
state (0):					/*
						   Using the type code for the current character, go to the appropiate state
						   for that class of tokens, the parser having initialized the current character
						   before the first call, and scanner obtaining the next character to be used
						   when called again before returning to the parser.
						*/
	token_length = 0;
	symbol_found = "0"b;
	overlength_token_already_seen = "0"b;


/* Loop from start state to the recognition states, while a token is not
   found, and end of source is not detected.
*/

	do while (^symbol_found);

	     if debug_sw then
		call
		     ioa_ ("A^[n^] ^a character (type ^d) at position ^d: ^a",
		     (
		     index ("aeiouh",
		     substr (TYPE_NAME_ARRAY (mrds_dsm_scanner_info.type), 1, 1))
		     > 0), TYPE_NAME_ARRAY (mrds_dsm_scanner_info.type),
		     mrds_dsm_scanner_info.type, mrds_dsm_scanner_info.pos,
		     requote_string_ ((mrds_dsm_scanner_info.char)));

	     goto state (mrds_dsm_scanner_info.type);

/* ALPHANUMERIC */
state (1):					/* Letter or digit found, accumulate characters that are letters, numbers,
						   underscores, hyphens into an identifier token then make checks for keywords
						   and pathnames that may follow to provide correct parser and scanner encoding.
						   */
	     call alphanum_handler ();
	     call
		stack_put (p_lex_stack_ptr, p_stack_index,
		mrds_dsm_scanner_info.token_count);
	     symbol_found = "1"b;
	     goto state (CASE_END);			/* SPECIAL */

state (2):					/* Special character found, if slash, check for comment else return encoding
						   for the character.
						   */
	     if ^comment_skip () then do;

/* not a comment, single character special instead, get it's encoding */

		     call special_handler ();
		     call
			stack_put (p_lex_stack_ptr, p_stack_index,
			mrds_dsm_scanner_info.token_count);
		     symbol_found = "1"b;
		end;
	     goto state (CASE_END);

/* NL */
state (3):					/* new line detected */
	     call
		get_next_char_new_line (mrds_dsm_scanner_info.char_ptr,
		mrds_dsm_scanner_info.type, mrds_dsm_scanner_info.char);
	     symbol_found = "0"b;
	     goto state (CASE_END);

/* WHITE_SPACE */
state (4):					/* white space detected, skip over it */
	     call
		get_next_char_non_white (mrds_dsm_scanner_info.char_ptr,
		mrds_dsm_scanner_info.type, mrds_dsm_scanner_info.char);
	     symbol_found = "0"b;
	     goto state (CASE_END);

/* ILLEGAL */
state (5):					/* illegal character detected */
	     call
		ioa_$rs ("^a^a^a ^d ^a ^d^a", message, message_length,
		"Character """, mrds_dsm_scanner_info.char,
		""", before token number", mrds_dsm_scanner_info.token_count + 1,
		"on line", mrds_dsm_scanner_info.line_number, ".");
	     call
		report_mds_error (1 /* severity */, ILLEGAL_CHAR_ERROR, (message));
	     call
		get_next_char (mrds_dsm_scanner_info.char_ptr,
		mrds_dsm_scanner_info.type, mrds_dsm_scanner_info.char);
	     symbol_found = "0"b;
	     goto state (CASE_END);

/* EOF */
state (6):					/* end of input detected */
	     encoding = EOF_ENCODING;
	     token_ptr = mrds_dsm_scanner_info.char_ptr;
	     call
		stack_put (p_lex_stack_ptr, p_stack_index,
		mrds_dsm_scanner_info.token_count);
	     symbol_found = "1"b;
	     goto state (CASE_END);

/* CASE_END */
state (7):
	end;

	if debug_sw then
	     call
		ioa_ (
		"Scanner returns: ^a token on ^a line (encoding of ^d) is ^a",
		add_cardinal_suffix ((mrds_dsm_scanner_info.token_count)),
		add_cardinal_suffix ((mrds_dsm_scanner_info.line_number)),
		encoding, requote_string_ ((token)));

	return;

stack_put:
     procedure (p_lex_stack_ptr, p_stack_index, p_token_count);
						/* START OF DECLARATIONS */
						/* Parameter */

	dcl     p_lex_stack_ptr	 ptr;
	dcl     p_stack_index	 fixed bin;
	dcl     p_token_count	 fixed bin (35);

/* Automatic */
/* Based */
/* Builtin */
/* Controlled */
/* Constant */
/* Entry */
/* External */
/* END OF DECLARATIONS */

	lex_stack_ptr = p_lex_stack_ptr;

/* increment the number of tokens seen in this line */

	p_token_count = p_token_count + 1;

/* routine to put the token info into the stack */

	lex_stack (p_stack_index).symptr = mrds_dsm_scanner_info.token_ptr;
	lex_stack (p_stack_index).symlen = mrds_dsm_scanner_info.token_length;
	lex_stack (p_stack_index).line = mrds_dsm_scanner_info.line_number;
	lex_stack (p_stack_index).symbol = encoding;
	lex_stack (p_stack_index).line_strt = mrds_dsm_scanner_info.line_ptr;
	lex_stack (p_stack_index).line_size = mrds_dsm_scanner_info.line_length;
	lex_stack (p_stack_index).token_num = mrds_dsm_scanner_info.token_count;

     end;

alphanum_handler:
     procedure ();
	dcl     current_terminal_and_token_match bit (1) aligned;


	token_ptr = char_ptr;
	token_length =
	     verify (
	     substr (mrds_dsm_scanner_info.source_ptr -> source_overlay, pos,
	     mrds_dsm_scanner_info.source_length), IDENTIFIER_CHARS);
	if token_length = 0 then do;
		token_length =
		     mrds_dsm_scanner_info.source_length - mrds_dsm_scanner_info.pos + 1;
		mrds_dsm_scanner_info.pos = mrds_dsm_scanner_info.source_length + 1;
		mrds_dsm_scanner_info.char_ptr = null;
		mrds_dsm_scanner_info.type = EOF_TYPE;
	     end;
	else do;
		token_length = token_length - 1;
		mrds_dsm_scanner_info.pos = token_length + mrds_dsm_scanner_info.pos;
		mrds_dsm_scanner_info.char_ptr =
		     addr (mrds_dsm_scanner_info.source_ptr
		     -> char_string (mrds_dsm_scanner_info.pos));
		mrds_dsm_scanner_info.char =
		     mrds_dsm_scanner_info.source_ptr
		     -> char_string (mrds_dsm_scanner_info.pos);
		call
		     get_char_type (mrds_dsm_scanner_info.char,
		     mrds_dsm_scanner_info.type);
	     end;

	current_terminal = "";
	current_terminal_and_token_match = "0"b;

	do alphanum_token_list_index = 1
	     to hbound (alphanum_token_list.index, 1)
	     while (^current_terminal_and_token_match
	     & token_length
	     <= mrds_dsm_terminals
	     .TL (alphanum_token_list.index (alphanum_token_list_index)).ln);
	     if token_length
		^= mrds_dsm_terminals
		.TL (alphanum_token_list.index (alphanum_token_list_index)).ln then
		current_terminal_and_token_match = "0"b;
	     else do;
		     current_terminal =
			substr (string (mrds_dsm_terminals.TC),
			mrds_dsm_terminals
			.TL (alphanum_token_list.index (alphanum_token_list_index)).fc,
			mrds_dsm_terminals
			.TL (alphanum_token_list.index (alphanum_token_list_index)).ln);
		     current_terminal_and_token_match = (current_terminal = token);
		end;
	end;

	if current_terminal_and_token_match then do;
		encoding = alphanum_token_list.index (alphanum_token_list_index - 1);
						/* Since the index was incremented before the match was noted, the index for the match is one less than the current value of alphanum_token_list_index. */

	     end;
	else if mrds_dsm_scanner_info.identifier_encoding = -1 then do;
		call
		     ioa_$rs ("Unrecognized token: ^a^/On line ^d, token number ^d.",
		     message, message_length, token, mrds_dsm_scanner_info.line_number,
		     mrds_dsm_scanner_info.token_count);
		call
		     report_mds_error (2 /* severity */, UNRECOGNIZED_TOKEN_ERROR,
		     (message));
	     end;
	else do;
		encoding = mrds_dsm_scanner_info.identifier_encoding;

	     end;					/* Find encoding for token.  Look first in list of alphanumeric terminals.
						   If the token is not there and an identifier terminal encoding is known,
						   use the identifier encoding.
						   */


     end;

get_char_type:
     proc (p_char, p_type);
	dcl     p_char		 char (1) aligned;
	dcl     p_type		 fixed bin (35);

	if p_char = NL_CHAR then
	     p_type = NL_TYPE;
	else if index (WHITESPACE_CHARS, p_char) > 0 then
	     p_type = WHITESPACE_TYPE;
	else if index (ALPHANUM_CHARS, p_char) > 0 then
	     p_type = ALPHANUM_TYPE;
	else if index (SPECIAL_CHARS, p_char) > 0 then
	     p_type = SPECIAL_TYPE;
	else p_type = ILLEGAL_TYPE;

     end;

comment_skip:
     procedure () returns (bit (1) aligned);

/* AUTOMATIC */

	dcl     old_pos		 fixed bin (35);
	dcl     old_char		 char (1);
	dcl     old_char_ptr	 ptr;
	dcl     old_type		 fixed bin;
	dcl     new_line_index	 fixed bin (35);
	dcl     result		 bit (1) aligned;
	dcl     end_comment_index	 fixed bin;


/* check for presence of a comment, return failure if not found */

	old_type = mrds_dsm_scanner_info.type;
	old_pos = mrds_dsm_scanner_info.pos;
	old_char_ptr = mrds_dsm_scanner_info.char_ptr;
	old_char = mrds_dsm_scanner_info.char;
	call
	     get_next_char (mrds_dsm_scanner_info.char_ptr,
	     mrds_dsm_scanner_info.type, mrds_dsm_scanner_info.char);
	if ^(old_char = "/" & mrds_dsm_scanner_info.char = "*") then do;
		mrds_dsm_scanner_info.char_ptr = old_char_ptr;
		mrds_dsm_scanner_info.char = old_char;
		mrds_dsm_scanner_info.type = old_type;
		mrds_dsm_scanner_info.pos = old_pos;
		result = "0"b;
	     end;
	else do;

/* routine to bypass comments in the source */

		end_comment_index =
		     index (
		     substr (mrds_dsm_scanner_info.source_ptr -> source_overlay,
		     mrds_dsm_scanner_info.pos,
		     mrds_dsm_scanner_info.source_length - mrds_dsm_scanner_info.pos + 1)
		     , "*/") + mrds_dsm_scanner_info.pos - 1;
		if end_comment_index = mrds_dsm_scanner_info.pos - 1 then
		     end_comment_index = mrds_dsm_scanner_info.source_length + 1;

		new_line_index =
		     index (
		     substr (mrds_dsm_scanner_info.source_ptr -> source_overlay,
		     mrds_dsm_scanner_info.pos,
		     mrds_dsm_scanner_info.source_length - mrds_dsm_scanner_info.pos + 1)
		     , NL_CHAR) + mrds_dsm_scanner_info.pos - 1;

		do while ((new_line_index < end_comment_index)
		     & (mrds_dsm_scanner_info.type ^= EOF_TYPE));
		     mrds_dsm_scanner_info.pos = new_line_index;
		     call
			get_next_char_new_line (mrds_dsm_scanner_info.char_ptr,
			mrds_dsm_scanner_info.type, mrds_dsm_scanner_info.char);
		     new_line_index =
			index (
			substr (mrds_dsm_scanner_info.source_ptr -> source_overlay,
			mrds_dsm_scanner_info.pos,
			mrds_dsm_scanner_info.source_length - mrds_dsm_scanner_info.pos
			+ 1), NL_CHAR) + mrds_dsm_scanner_info.pos - 1;
		end;

		if mrds_dsm_scanner_info.type ^= EOF_TYPE then do;
			mrds_dsm_scanner_info.pos = end_comment_index + 2;
			call
			     get_next_char_non_white (mrds_dsm_scanner_info.char_ptr,
			     mrds_dsm_scanner_info.type, mrds_dsm_scanner_info.char);
			symbol_found = "0"b;
			result = "1"b;
		     end;
		else do;				/* check for comment error */
			call
			     ioa_$rs ("^a ^d^a", message, message_length,
			     "Comment ends line number", line_number, ".");
			call
			     report_mds_error (2 /* severity */,
			     NO_COMMENT_END_DELIMITER_ERROR, (message));
		     end;
	     end;

	return (result);

     end;

special_handler:
     procedure ();

	current_terminal_and_token_match = "0"b;
	mrds_dsm_scanner_info.token_ptr = mrds_dsm_scanner_info.char_ptr;

	do special_token_list_index = 1
	     to hbound (special_token_list.index, 1)
	     while (^current_terminal_and_token_match);
	     current_terminal =
		substr (string (mrds_dsm_terminals.TC),
		mrds_dsm_terminals
		.TL (special_token_list.index (special_token_list_index)).fc,
		mrds_dsm_terminals
		.TL (special_token_list.index (special_token_list_index)).ln);
	     token_length =
		mrds_dsm_terminals
		.TL (special_token_list.index (special_token_list_index)).ln;
	     if token_length
		> mrds_dsm_scanner_info.source_length - mrds_dsm_scanner_info.pos
		+ 1 then
		current_terminal_and_token_match = "0"b;
	     else current_terminal_and_token_match = (current_terminal = token);
	end;

	if current_terminal_and_token_match then do;
		encoding = special_token_list.index (special_token_list_index - 1);
		mrds_dsm_scanner_info.pos =
		     mrds_dsm_scanner_info.pos + mrds_dsm_scanner_info.token_length - 1;
	     end;
	else do;
		call
		     ioa_$rs ("Special character ^a in line ^d.", message,
		     message_length, mrds_dsm_scanner_info.char,
		     mrds_dsm_scanner_info.line_number);
		call
		     report_mds_error (4 /* severity */, UNRECOGNIZED_CHARACTER_ERROR,
		     (message));
		encoding = EOF_ENCODING;
	     end;
	call
	     get_next_char (mrds_dsm_scanner_info.char_ptr,
	     mrds_dsm_scanner_info.type, mrds_dsm_scanner_info.char);

     end;

get_next_character_routine:
     procedure ();					/* dummy entry, not used */

/* This procedure has four entry points.
   get_next_char_init   should be called first to set up things
   get_next_char_new_line is used to advance the current line, output it, and get the first char
   get_next_char_non_white skips white spaces until a valid character is found
   get_next_char$get_next_char  returns only info about the next char in source
*/
/* START OF DECLARATIONS */
/* Parameter */

	dcl     p_chr_ptr		 ptr;
	dcl     p_type		 fixed bin (35);
	dcl     p_chr_val		 char (1) aligned;

/* Automatic */

	dcl     code		 fixed bin (35);
	dcl     output_text		 char (256) varying;
	dcl     nonwhite_char_index	 fixed bin (35);

/* Based */

/* Builtin */
/* Controlled */
/* Constant */
/* Entry */
/* External */
/* END OF DECLARATIONS */




/* INIT */
get_next_char_init:
     entry (p_chr_ptr, p_type, p_chr_val);		/* This entry initializes internal stativ values */

	mrds_dsm_scanner_info.pos = 0;		/* Starting position is first character */
	mrds_dsm_scanner_info.line_number = 0;



/* NEW LINE */
get_next_char_new_line:
     entry (p_chr_ptr, p_type, p_chr_val);		/* entry to advance to next line */
	mrds_dsm_scanner_info.pos = mrds_dsm_scanner_info.pos + 1;
	if mrds_dsm_scanner_info.pos <= mrds_dsm_scanner_info.source_length
	then do;					/* find end of next line */

		mrds_dsm_scanner_info.line_ptr =
		     addr (mrds_dsm_scanner_info.source_ptr
		     -> char_string (mrds_dsm_scanner_info.pos));
		mrds_dsm_scanner_info.line_length =
		     index (
		     substr (mrds_dsm_scanner_info.line_ptr -> source_overlay, 1,
		     mrds_dsm_scanner_info.source_length - mrds_dsm_scanner_info.pos + 1)
		     , NL_CHAR);
		if mrds_dsm_scanner_info.line_length = 0 then
		     mrds_dsm_scanner_info.line_length =
			mrds_dsm_scanner_info.source_length
			- mrds_dsm_scanner_info.pos + 1; /* segment doesn't end last line with NL */

		mrds_dsm_scanner_info.line_number =
		     mrds_dsm_scanner_info.line_number + 1;
		mrds_dsm_scanner_info.token_count = 0;

		if mrds_dsm_scanner_info.listing_iocb_ptr ^= null then do;

/* listing switch on, output the current line */

			line_no_pic = mrds_dsm_scanner_info.line_number;
			output_text =
			     line_no_pic || "   "
			     ||
			     substr (mrds_dsm_scanner_info.line_ptr -> source_overlay, 1,
			     mrds_dsm_scanner_info.line_length);

			call
			     iox_$put_chars (mrds_dsm_scanner_info.listing_iocb_ptr,
			     addrel (addr (output_text), 1), length (output_text), code);
			if code ^= 0 then do;
				call
				     ioa_$rs ("^a ^d ^a", message, message_length,
				     "Error in trying to output line number",
				     mrds_dsm_scanner_info.line_number, "to listing segment");
				call
				     report_mds_error (4 /* severity */, LISTING_IO_ERROR,
				     (message));
			     end;
		     end;
		p_chr_val =
		     mrds_dsm_scanner_info.source_ptr
		     -> char_string (mrds_dsm_scanner_info.pos);
		p_chr_ptr =
		     addr (mrds_dsm_scanner_info.source_ptr
		     -> char_string (mrds_dsm_scanner_info.pos));
		call get_char_type (p_chr_val, p_type);
	     end;

	else do;
		p_type = EOF_TYPE;
		p_chr_val = " ";
	     end;
	return;

/* NEXT NON WHITE */
get_next_char_non_white:
     entry (p_chr_ptr, p_type, p_chr_val);		/* This entry skips white space */

	nonwhite_char_index =
	     verify (
	     substr (mrds_dsm_scanner_info.source_ptr -> source_overlay,
	     mrds_dsm_scanner_info.pos,
	     mrds_dsm_scanner_info.source_length - mrds_dsm_scanner_info.pos + 1),
	     WHITESPACE_CHARS);

	if nonwhite_char_index > 0 then do;
		mrds_dsm_scanner_info.pos =
		     mrds_dsm_scanner_info.pos + nonwhite_char_index - 1;
		p_chr_val =
		     mrds_dsm_scanner_info.source_ptr
		     -> char_string (mrds_dsm_scanner_info.pos);
		p_chr_ptr =
		     addr (mrds_dsm_scanner_info.source_ptr
		     -> char_string (mrds_dsm_scanner_info.pos));
		call get_char_type (p_chr_val, p_type);
	     end;
	else do;
		mrds_dsm_scanner_info.pos = mrds_dsm_scanner_info.source_length + 1;
		p_type = EOF_TYPE;
		p_chr_val = " ";
	     end;
	return;					/* NEXT CHAR */
get_first_char:
get_next_char:
     entry (p_chr_ptr, p_type, p_chr_val);		/* return next character in source */
	mrds_dsm_scanner_info.pos = mrds_dsm_scanner_info.pos + 1;


	if mrds_dsm_scanner_info.pos <= mrds_dsm_scanner_info.source_length
	then do;
		p_chr_val =
		     mrds_dsm_scanner_info.source_ptr
		     -> char_string (mrds_dsm_scanner_info.pos);
		p_chr_ptr =
		     addr (mrds_dsm_scanner_info.source_ptr
		     -> char_string (mrds_dsm_scanner_info.pos));
		call get_char_type (p_chr_val, p_type);
	     end;
	else do;
		p_type = EOF_TYPE;
		p_chr_val = " ";
	     end;
	return;

     end get_next_character_routine;

initialize_encoding_information:
     proc;					/* START OF DECLARATIONS */
						/* Parameter */

/* Automatic */

	dcl     token_list_index	 fixed bin (35);
	dcl     non_alphanum_char_index fixed bin;
	dcl     special_token_sort_index fixed bin;
	dcl     alphanum_token_sort_index fixed bin;

/* Based */
/* Builtin */
/* Controlled */
/* Constant */
/* Entry */
/* External */
/* END OF DECLARATIONS */

	alphanum_token_list_size = hbound (mrds_dsm_terminals.TL, 1);
	special_token_list_size = hbound (mrds_dsm_terminals.TL, 1);
	allocate alphanum_token_list in (work_area);
	allocate special_token_list in (work_area);
	mrds_dsm_scanner_info.special_token_list_ptr = special_token_list_ptr;
	mrds_dsm_scanner_info.alphanum_token_list_ptr = alphanum_token_list_ptr;

	alphanum_token_list_index = 0;
	special_token_list_index = 0;

	do token_list_index = 1 to hbound (mrds_dsm_terminals.TL, 1);
	     current_terminal =
		substr (string (mrds_dsm_terminals.TC),
		mrds_dsm_terminals.TL (token_list_index).fc,
		mrds_dsm_terminals.TL (token_list_index).ln);
	     non_alphanum_char_index =
		index (ALPHANUM_CHARS, substr (current_terminal, 1, 1));

	     if non_alphanum_char_index > 0 then do;
		     alphanum_token_list_index = alphanum_token_list_index + 1;
		     do alphanum_token_sort_index = alphanum_token_list_index - 1 to 1
			by -1
			while (mrds_dsm_terminals.TL (token_list_index).ln
			> mrds_dsm_terminals
			.TL (alphanum_token_list.index (alphanum_token_sort_index)).ln);
			alphanum_token_list.index (alphanum_token_sort_index + 1) =
			     alphanum_token_list.index (alphanum_token_sort_index);
		     end;
		     alphanum_token_list.index (alphanum_token_sort_index + 1) =
			token_list_index;
		end;
	     else if current_terminal = "<identifier>" then
		mrds_dsm_scanner_info.identifier_encoding = token_list_index;
	     else do;
		     special_token_list_index = special_token_list_index + 1;
		     do special_token_sort_index = special_token_list_index - 1 to 1
			by -1
			while (mrds_dsm_terminals.TL (token_list_index).ln
			> mrds_dsm_terminals
			.TL (special_token_list.index (special_token_sort_index)).ln);
			special_token_list.index (special_token_sort_index + 1) =
			     special_token_list.index (special_token_sort_index);
		     end;
		     special_token_list.index (special_token_sort_index + 1) =
			token_list_index;
		end;
	end;
	alphanum_token_list.size = alphanum_token_list_index;
	special_token_list.size = special_token_list_index;

     end;

report_mds_error:
     proc (p_severity, p_error_code, p_message);

/* PARAMETER */

	dcl     p_severity		 fixed bin;
	dcl     p_error_code	 fixed bin (35);
	dcl     p_message		 char (*);


	mrds_dsm_scanner_info.highest_severity =
	     max (p_severity, mrds_dsm_scanner_info.highest_severity);

	call
	     ioa_$ioa_switch (mrds_dsm_scanner_info.error_iocb_ptr,
	     "^/Severity ^d, ^a^/^a", p_severity,
	     MRDS_DSM_ERROR_MESSAGE (p_error_code), p_message);

	if mrds_dsm_scanner_info.listing_iocb_ptr ^= null () then
	     call
		ioa_$ioa_switch (mrds_dsm_scanner_info.listing_iocb_ptr,
		"^/Severity ^d, ^a^/^a", p_severity,
		MRDS_DSM_ERROR_MESSAGE (p_error_code), p_message);

     end;						/* End of report_mds_error. */

add_cardinal_suffix:
     proc (p_num) returns (char (32) varying) options (non_quick);

/* The options(nonquick) is used to avoid a compiler bug.  This procedure is
   called in a stack extension and should therefore  be non-quick.  The compiler
   neglects to make it so, however.
*/

	dcl     p_num		 fixed bin (35);
	dcl     num_pic		 pic "zzzzzzzzzz9";
	dcl     rev		 char (2);
	dcl     SUFFIX		 (0:3) char (2) internal static options (constant)
				 init ("th", "st", "nd", "rd");
	dcl     idx		 fixed bin;

	num_pic = p_num;
	rev = substr (reverse (num_pic), 1, 2);		/* CHANGE 81-09-16 */
	if rev = "11" | rev = "21" | rev = "31" then
	     idx = 0;
	else idx = index ("123", substr (rev, 1, 1));

	return (ltrim (num_pic) || SUFFIX (idx));
     end;

%include mrds_dsm_parse_stack;
%page;
%include mrds_dsm_scan_info;
%page;
%include mrds_dsm_error_info;
%page;
%include mrds_dsm_terminals;


     end;

