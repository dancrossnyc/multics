/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

mrds_dsm_dsmd: proc;

/* DESCRIPTION:

   This  routine  is  obsolete,  it   is   maintained   to   provide
   compatability with MR8.0 and earlier releases.

   Known Bugs:

   Other Problems:
   
   HISTORY

   76-12-01 Weeldreyer: Modified to add get_dsm_relations entry

   80-08-01 Spratt:  Changed  calls  to  module  names  from  dsmd_
   .         entries, and add ext iocb_ptr for submodels

   80-11-07 Gray:  Added  sub_err_  additional  detail  for  when  a
   .        submodel points to a database, that no longer exists  in
   .        the same place

   80-12-31 Davids: added the entry get_dsm_file_rels. This entry is
   .        basicly a stub so that linus can  open  via  a  submodel
   .        without having to be changed.
   .
   .        Added the description, Known Bugs,  and  Other  Problems
   .        sections and reformated the history section.

   81-01-05  Davids:  changed   the   name   of   this   module   to
   .        mrds_dsm_dsmd_ so that we could write a transfer  vector
   .        called dsmd_ so that we would be consistant with how the
   .        rest of mrds works.

   .        added the internal  variable  a_code  to  the  procedure
   .        cleanup_handler  so  that  it  does not return incorrect
   .        values of code back to the user.

   81-01-20 Davids: removed  the  call  to  mrds_dsm_validate_header
   .        since mrds_dsm_read_header now validates the  header  as
   .        it reads it.

   81-01-22 Davids: changed mrds_dsm_open_read to mrds_dsm_open$read

   81-01-26  Davids:  changed  the  name  from   mrds_dsm_dsmd_   to
   .        mrds_dsm_dsmd

   .        deleted    the    unused    entry    points    get_mode,
   .        get_submodel_pn, validate_rel, and validate_rel_close.

   .        modified the open_dsm_read entry to remove code that was
   .        needed to support the operation of validate_rel.

   .        modified  the  declaration  section  to  remove   unused
   .        declarations, including several include files.

   81-01-27 Davids: implemented an internal working area based on  a
   .        temp segment gotten at open time.

   .        implemented   the   entries   get_dsm_header_record_ptr,
   .        get_relation_block_ptr,  and get_dsm_relation_names_ptr.
   .        these entries are for mrds code use only and will not be
   .        documented in the manual.

   .        implemented   the   mapping   from   the  relation_block
   .        structure  to the mrds_dsm_relation_str structure in the
   .        get_relation entry.

   81-01-29    Davids:    implemented    the    mapping   from   the
   .        mrds_dsm_relation_names       structure      to      the
   .        dsm_display_rels   structure  in  the  dsm_get_relations
   .        entry

   81-01-30 Davids: implemented the header_info, relation_data,  and
   .        attribute_data entries.

   .        alphabetized entries.

   81-02-03 Davids: The open entry point was checking to see if  the
   .        submodel was already open before it  tried  to  open  it
   .        rather than checking to see that no submodel was open. I
   .        introduced this bug was changing from the  mode  to  the
   .        submodel_already_open variable.

   81-02-04   Davids:   Removed    the    entries    attribute_data,
   .        get_dsm_header_record_ptr,   get_dsm_relation_names_ptr,
   .        get_relation_block_ptr,  header_info, and relation_data.
   .        These entries will be  moved  into  a  new  mrds_dsm_dsi
   .        module.

   81-02-05 Davids: The force_close_dsm was removed since it was not
   .        documented and is not used by internal mrds code.

   81-05-21  Rickie  E.  Brinegar:  Modified  to  use  the   changed
   .        mrds_dsm_relation_names.incl.pl1      which      changed
   .        dsm_relation_names to mrds_dsm_relation_names.

   81-06-01 Davids: Modified so that the header  structure  returned
   .        from the mrds_dsm_read_header call  is  translated  into
   .        the  structure  to  be  returned to the user rather than
   .        just passing the pointer back. At  the  moment  the  two
   .        structures  are  the same but that may not always be the
   .        case.

   81-06-08    Davids:    Made    the    close_dsm    entry     call
   .        mrds_dsm_close$force rather than mrds_dsm_close

   .        removed checks for and processing of long  relation  and
   .        attribute    names    in   the   get_dsm_relations   and
   .        get_relation entries (long names are not possible).

   .        Made security sensitive, i.e. if the database  that  the
   .        submodel  references  is  secure and the caller is not a
   .        DBA the model names  passed  back  by  get_relation  are
   .        spaces.
*/

/* PARAMETER */

	dcl     area_ptr		 ptr;		/* (input) pointer to area to allocate structures */
	dcl     code		 fixed bin (35);	/* (output) error code */
	dcl     display_rels_ptr	 ptr;		/* (output) pointer to the dsm_display_rels str */
	dcl     dsm_file_name	 char (*);	/* (input) file whose relations are to be returned */
	dcl     mrds_dsm_header_ptr	 ptr init (null ());/* pointer to the mrds_dsm_header str */
	dcl     dsm_relation_name	 char (*);	/* (input) relation whose relation data is to be returned */
	dcl     header_record_ptr	 ptr;		/* (output) pointer to the dsm_header_record str */
	dcl     rstr_ptr		 ptr;		/* (output) pointer to the dsm_relation_str structure */
	dcl     submodel_pn		 char (*);	/* (input) path to submodel */

/* AUTOMATIC */

	dcl     a_code		 fixed bin (35);	/* internal error code */
	dcl     db_path		 char (168);	/* path to the submodels database */
	dcl     i			 fixed bin;	/* loop index */
	dcl     temp_sm_pn		 char (168);	/* absolute path of submodel */

/* BASED */

	dcl     area		 area (sys_info$max_seg_size) based (area_ptr); /* space to allocate structures whose pointers
						   will be returned to the caller */
	dcl     work_area		 area (sys_info$max_seg_size) based (work_area_ptr);
						/* space to allocate structures for internal use */

/* BUILTIN */

	dcl     empty		 builtin;
	dcl     null		 builtin;

/* CONDITION */

	dcl     cleanup		 condition;

/* CONSTANT */

	dcl     DSM_SUFFIX		 char (32) varying internal static options (constant) init ("dsm");

/* ENTRY */

	dcl     absolute_pathname_$add_suffix entry (char (*), char (*), char (*), fixed bin (35));
	dcl     get_temp_segment_	 entry (char (*), pointer, fixed bin (35));
	dcl     mrds_dsm_close$force	 entry (ptr);
	dcl     mrds_dsm_determine_auth_sec entry (char (*), char (*), char (*)) returns (bit (1));
	dcl     mrds_dsm_get_relation_names entry (ptr, ptr, ptr, fixed bin (35));
	dcl     mrds_dsm_open$read	 entry (char (*), ptr, fixed bin (35));
	dcl     mrds_dsm_read_header	 entry (ptr, ptr, ptr, fixed bin (35));
	dcl     mrds_dsm_read_header$db_path entry (ptr, char (168), fixed bin (35));
	dcl     mrds_dsm_read_relation entry (char (*), ptr, ptr, ptr, fixed bin (35));
	dcl     release_temp_segment_	 entry (char (*), pointer, fixed bin (35));

/* EXTERNAL */

	dcl     mrds_error_$incorrect_dsmd_seq fixed bin (35) external static;
	dcl     sys_info$max_seg_size	 fixed bin (35) external static;

/* INTERNAL */

	dcl     iocb_ptr		 internal static ptr init (null);
	dcl     mask_model_info	 bit (1) unaligned internal static init ("0"b);
	dcl     submodel_already_open	 bit (1) internal static init ("0"b);
	dcl     work_area_ptr	 ptr internal static init (null ());

%include mrds_dsm_display_rels;
%page;
%include mrds_dsm_header;
%page;
%include mrds_dsm_header_str;
%page;
%include mrds_dsm_relation_names;
%page;
%include mrds_dsm_rel_str;
%page;
%include mrds_dsm_rel_block;

close_dsm: entry (code);

	if submodel_already_open
	then do;
		call mrds_dsm_close$force (iocb_ptr);
		submodel_already_open = "0"b;
		call release_temp_segment_ ("mrds_dsm_dsmd", work_area_ptr, a_code);
		work_area_ptr = null ();
		mask_model_info = "0"b;
	     end;
	else code = mrds_error_$incorrect_dsmd_seq;

	return;

get_dsm_file_rels: entry (dsm_file_name, area_ptr, display_rels_ptr, code);

/*
   For internal mrds use only. Not to be documented in any user manual.

   Because each file has only 1 relation in it and the file name  is
   the  same  as  the  relation name there is no reason to query the
   submodel about anything.
*/

	if submodel_already_open
	then do;
		nrels_alloc = 1;
		allocate dsm_display_rels in (area);
		display_rels_ptr = drel_ptr;
		dsm_display_rels.relation = dsm_file_name;
		code = 0;
	     end;
	else do;
		code = mrds_error_$incorrect_dsmd_seq;
		display_rels_ptr = null ();
	     end;

	return;

get_dsm_header: entry (area_ptr, header_record_ptr, code);




	header_record_ptr = null ();
	code = 0;
	if ^submodel_already_open
	then code = mrds_error_$incorrect_dsmd_seq;
	else do;
		call mrds_dsm_read_header (work_area_ptr, mrds_dsm_header_ptr, iocb_ptr, code);
		if code = 0
		then do;
			allocate dsm_header_record in (area) set (header_record_ptr);
			header_record_ptr -> dsm_header_record.dsm_generator_version =
			     mrds_dsm_header_ptr -> mrds_dsm_header.dsm_generator_version;
			header_record_ptr -> dsm_header_record.date_time_generated =
			     mrds_dsm_header_ptr -> mrds_dsm_header.date_time_generated;
			header_record_ptr -> dsm_header_record.database_pn =
			     mrds_dsm_header_ptr -> mrds_dsm_header.database_pn;
			header_record_ptr -> dsm_header_record.name =
			     mrds_dsm_header_ptr -> mrds_dsm_header.name;
			header_record_ptr -> dsm_header_record.num_of_relations =
			     mrds_dsm_header_ptr -> mrds_dsm_header.num_of_relations;
			header_record_ptr -> dsm_header_record.creator_id =
			     mrds_dsm_header_ptr -> mrds_dsm_header.creator_id;

			free mrds_dsm_header_ptr -> mrds_dsm_header;
		     end;
	     end;

	return;

get_dsm_relations: entry (area_ptr, display_rels_ptr, code);

	if submodel_already_open
	then do;
		call mrds_dsm_get_relation_names (work_area_ptr, mrds_dsm_relation_names_ptr, iocb_ptr, code);
		if code = 0
		then do;
			nrels_alloc = mrds_dsm_relation_names.nrels;
			allocate dsm_display_rels in (area);
			do i = 1 to nrels_alloc;
			     dsm_display_rels.relation (i) = mrds_dsm_relation_names.relation (i);
			end;
		     end;

		if mrds_dsm_relation_names_ptr ^= null ()
		then free mrds_dsm_relation_names_ptr -> mrds_dsm_relation_names;
	     end;
	else code = mrds_error_$incorrect_dsmd_seq;

	if code = 0
	then display_rels_ptr = drel_ptr;
	else display_rels_ptr = null ();

	return;

get_relation: entry (dsm_relation_name, area_ptr, rstr_ptr, code);

	if submodel_already_open
	then do;
		call mrds_dsm_read_relation (dsm_relation_name, work_area_ptr, relation_block_ptr, iocb_ptr, code);
		if code = 0
		then do;
			dsm_num_attr_alloc = relation_block.no_rb_attributes;
			allocate dsm_relation_str in (area) set (rstr_ptr);
			rstr_ptr -> dsm_relation_str.key.submodel_rel_name = relation_block.dsm_rel_name;
			if mask_model_info
			then rstr_ptr -> dsm_relation_str.record.model_rel_name = "";
			else rstr_ptr -> dsm_relation_str.record.model_rel_name = relation_block.dm_rel_name;
			do i = 1 to rstr_ptr -> dsm_relation_str.no_attributes;
			     rstr_ptr -> dsm_relation_str.record.attribute_info (i).submodel_att_name =
				relation_block.attribute_info (i).dsm_attr_name;
			     if mask_model_info
			     then rstr_ptr -> dsm_relation_str.record.attribute_info (i).model_att_name = "";
			     else rstr_ptr -> dsm_relation_str.record.attribute_info (i).model_att_name =
				     relation_block.attribute_info (i).dm_attr_name;
			end;
		     end;

		if relation_block_ptr ^= null ()
		then free relation_block_ptr -> relation_block;

	     end;
	else code = mrds_error_$incorrect_dsmd_seq;

	return;

open_dsm_read: entry (submodel_pn, code);

	if submodel_already_open
	then code = mrds_error_$incorrect_dsmd_seq;
	else do;
		on condition (cleanup) call cleanup_handler;
		call absolute_pathname_$add_suffix (submodel_pn, (DSM_SUFFIX), temp_sm_pn, code);
		if code ^= 0
		then do;
			call cleanup_handler;
			return;
		     end;

		call mrds_dsm_open$read (temp_sm_pn, iocb_ptr, code);
		if code ^= 0
		then do;
			call cleanup_handler;
			return;
		     end;

		submodel_already_open = "1"b;

		call get_temp_segment_ ("mrds_dsm_dsmd", work_area_ptr, code);
		if code ^= 0
		then do;
			call cleanup_handler;
			return;
		     end;
		work_area = empty;

		call mrds_dsm_read_header$db_path (iocb_ptr, db_path, code);
		if code ^= 0
		then do;
			call cleanup_handler;
			return;
		     end;
		else mask_model_info = ^mrds_dsm_determine_auth_sec (db_path, temp_sm_pn, "");

	     end;

	return;

cleanup_handler: proc;

	if iocb_ptr ^= null
	then call mrds_dsm_close$force (iocb_ptr);
	submodel_already_open = "0"b;
	if work_area_ptr ^= null ()
	then call release_temp_segment_ ("mrds_dsm_dsmd", work_area_ptr, a_code);
	work_area_ptr = null ();
	iocb_ptr = null;
	mask_model_info = "0"b;
	return;
     end cleanup_handler;

     end /* mrds_dsm_dsmd */;
