/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

mrds_dsm_parse: proc (p_mrds_dsm_parse_info_ptr, p_code);

/*
   HISTORY

   ??-??-?? Spratt: written

   81-05-07   Davids:    modified    to    set    the    value    of
   .        mrds_dsm_semantics_info.data_model_ptr, which  was  just
   .        added to the structure.

   .        started this history section.

   81-05-08 Davids: added the phrase "PROGRAM LOGIC  ERROR"  to  the
   .        message output by sub_err_ in the event that the version
   .        of mrds_dsm_parse_info is wrong.

   .        added a call to ioa_ in report_mdb_error to  send  error
   .        messages   to   the  listing,  if  one  is  being  built
   .        (listing_iocb_ptr ^= null ());

   81-05-15      Davids:      added       the       setting       of
   .        mrds_dsm_parse_info.highest_severity_(scanner semantics)
   .        after     each     call    to    mrds_dsm_scanner    and
   .        mrds_dsm_semantics.  also  removed   some   unreferenced
   .        variable declarations.

   81-05-20 Davids: fixed a bug in how the address of shared  tables
   .        was determined in next_term, DPDA.v1 was being used when
   .        it should have been DPDA.v2.
*/

/* PARAMETER */

	dcl     p_mrds_dsm_parse_info_ptr ptr;
	dcl     p_code		 fixed bin (35);

/* AUTOMATIC */

	dcl     code		 fixed bin (35);
	dcl     debug_sw		 bit (1) aligned;
	dcl     db_look		 pic "99" defined (db_data.type) pos (3);
	dcl     1 db_data,
		2 flag		 char (1),	/* * means stacked */
		2 state		 pic "zzz9",
		2 fil1		 char (2),
		2 type		 char (6),
		2 data		 char (100);
	dcl     ls_top		 fixed bin (24);	/* location of top of lexical stack */
	dcl     altn		 fixed bin (24);	/* APPLY alternative number */
	dcl     current_state	 fixed bin (24);	/* number of current state */
	dcl     test_symbol		 fixed bin (24);	/* encoding of current symbol */
	dcl     current_table	 fixed bin (24);	/* number of current table */
	dcl     i			 fixed bin (24);	/* temp */
	dcl     la_ct		 fixed bin (24);	/* number of terminals in look-ahead stack */
	dcl     la_get		 fixed bin (24);	/* location in look_ahead stack to get next symbol */
	dcl     la_need		 fixed bin (24);	/* number of look-ahead symbols needed */
	dcl     la_put		 fixed bin (24);	/* location in look_ahead stack to put next symbol */
	dcl     an		 fixed bin (24);
	dcl     la_use		 fixed bin (24);	/* location in look-ahead stack to test with */
	dcl     (m, n)		 fixed bin (24);
	dcl     next_state		 fixed bin (24);	/* number of next state */
	dcl     nil_sym		 fixed bin (24);
	dcl     nil		 fixed bin (24);
	dcl     nil_flag		 bit (1);
	dcl     ps_top		 fixed bin (24);	/* location of top of parse stack */
	dcl     recov_msg		 char (150) var;
	dcl     rulen		 fixed bin (24);	/* APPLY rule number */
	dcl     t			 fixed bin (24);
	declare token_cnt		 fixed binary (24); /* number of tokens used */
	declare error_mark		 fixed binary (24); /* point to get past before another local correction allowed */
	dcl     work_area_ptr	 ptr;
	declare message		 char (128) varying;/* message with details of error */
	declare message_length	 fixed binary;	/* length of returned error message */

/* BASED */

	dcl     work_area		 area (sys_info$max_seg_size) based (work_area_ptr);

/* BUILTIN */

	dcl     (
	        abs,
	        addr,
	        copy,
	        fixed,
	        hbound,
	        lbound,
	        length,
	        ltrim,
	        min,
	        max,
	        mod,
	        null,
	        sign,
	        string,
	        substr
	        )			 builtin;

/* CONDITION */

	dcl     cleanup		 condition;

/* CONSTANT */

	dcl     MYNAME		 char (14) internal static options (constant) init ("mrds_dsm_parse");
	declare end_of_input_msg	 char (18) internal static options (constant) init (" --END_OF_INPUT-- ");
						/* EOI message */
	dcl     DDop		 (-1:2) char (4) int static options (constant) init ("LOOK", "FINI", "READ", "ERR");

/* ENTRY */

	dcl     sub_err_		 entry options (variable);
	declare ioa_$rs		 entry options (variable);
	dcl     ioa_$ioa_switch	 entry options (variable);
						/* routine to return string */
	dcl     mrds_dsm_scanner$init	 entry (ptr, fixed bin (35));

	dcl     mrds_dsm_scanner	 entry (ptr, ptr, fixed bin, fixed bin (35));
	dcl     mrds_dsm_semantics	 entry (ptr, fixed bin (24), fixed bin (24), ptr, fixed bin (24), fixed bin (35));
	dcl     ioa_$ioa_switch_nnl	 entry options (variable);

/* EXTERNAL */

	dcl     error_table_$unimplemented_version fixed bin (35) ext;
	dcl     iox_$user_output	 ptr ext static;
	declare sys_info$max_seg_size	 fixed binary (35) external; /* largest segment size */

	mrds_dsm_parse_info_ptr = p_mrds_dsm_parse_info_ptr;
	on cleanup call finish;
	if mrds_dsm_parse_info.version ^= MRDS_DSM_PARSE_INFO_VERSION_1
	then call sub_err_ (error_table_$unimplemented_version, MYNAME, "s", null, (0),
		"PROGRAM LOGIC ERROR^/The wrong version of mrds_dsm_parse_info was used.");


/* the call to sub_err_ will never return */

	p_struct_ptr = null;
	mrds_dsm_scanner_info_ptr = null;
	mrds_dsm_semantics_info_ptr = null;
	lex_stack_ptr = null;
	cur_lex_top_ptr = null;

	p_code = 0;
	work_area_ptr = mrds_dsm_parse_info.work_area_ptr;

	allocate lex_stack in (work_area);
	allocate p_struct in (work_area);
	allocate cur_lex_top in (work_area);

	allocate mrds_dsm_semantics_info in (work_area);
	mrds_dsm_semantics_info.version = MRDS_DSM_SEMANTICS_INFO_VERSION_1;
	mrds_dsm_semantics_info.debug_semantics = mrds_dsm_parse_info.debug_semantics;
	mrds_dsm_semantics_info.work_area_ptr = mrds_dsm_parse_info.work_area_ptr;
	mrds_dsm_semantics_info.submodel_iocb_ptr = mrds_dsm_parse_info.submodel_iocb_ptr;
	mrds_dsm_semantics_info.error_iocb_ptr = mrds_dsm_parse_info.error_iocb_ptr;
	mrds_dsm_semantics_info.listing_iocb_ptr = mrds_dsm_parse_info.listing_iocb_ptr;
	mrds_dsm_semantics_info.data_model_ptr = mrds_dsm_parse_info.data_model_ptr;
	mrds_dsm_semantics_info.highest_severity = 0;

	allocate mrds_dsm_scanner_info in (work_area);
	mrds_dsm_scanner_info.version = MRDS_DSM_SCANNER_INFO_VERSION_1;
	mrds_dsm_scanner_info.debug_scanner = mrds_dsm_parse_info.debug_scanner;
	mrds_dsm_scanner_info.source_ptr = mrds_dsm_parse_info.source_ptr;
	mrds_dsm_scanner_info.source_length = mrds_dsm_parse_info.source_length;
	mrds_dsm_scanner_info.error_iocb_ptr = mrds_dsm_parse_info.error_iocb_ptr;
	mrds_dsm_scanner_info.listing_iocb_ptr = mrds_dsm_parse_info.listing_iocb_ptr;
	mrds_dsm_scanner_info.work_area_ptr = mrds_dsm_parse_info.work_area_ptr;
	mrds_dsm_scanner_info.highest_severity = 0;

	call mrds_dsm_scanner$init (mrds_dsm_scanner_info_ptr, code);

	current_state = 1;
	debug_sw = mrds_dsm_parse_info.debug_parse;
	nil_sym = -1;				/* set nil_sym non-existant */
	nil_flag = "0"b;				/* Initially not in skip error recovery */
	ls_top, ps_top = 0;
	la_put, la_get = 1;
	la_ct = 0;
	token_cnt = 0;
	error_mark = -1;

/* Begin parsing loop. */

	do while (current_state ^= 0);

	     current_table = current_state;
	     string (db_data) = "";
	     db_data.state = current_state;

	     goto CASE (DPDA.v1 (current_table));

CASE (3):
	     current_table = DPDA.v2 (current_table);
CASE (1):
	     la_use = mod (la_get + la_need - 1, -lbound (lex_stack, 1)) + 1;
	     if (la_need >= -lbound (lex_stack, 1) - 1)
	     then do;
		     call too_many (-lbound (lex_stack, 1), "lookahead");
		     call finish_mdp;
		     return;
		end;
	     la_need = la_need + 1;
	     call read_look (p_code);
	     if p_code ^= 0
	     then do;
		     call finish_mdp;
		     return;
		end;
	     goto NEXT;

CASE (10):					/* Shared read */
	     current_table = DPDA.v2 (current_table);

CASE (9):						/* Read. */
	     db_data.type = "READ";
	     la_need = 1;
	     la_use = la_get;
	     call read_look (p_code);
	     if p_code ^= 0
	     then do;
		     call finish_mdp;
		     return;
		end;
	     goto NEXT;

CASE (2):						/* Stack and Shared read */
	     current_table = DPDA.v2 (current_table);

CASE (0):						/* Stack and Read. */
	     db_data.type = "READ";
	     db_data.flag = "*";
	     la_need = 1;
	     la_use = la_get;
	     if (ps_top >= hbound (parse_stack, 1))
	     then do;
		     call too_many (hbound (parse_stack, 1), "parse");
		     call finish_mdp;
		     return;
		end;
	     ps_top = ps_top + 1;			/* Top of  parsing stack. */
	     parse_stack (ps_top) = current_state;	/* Stack the current state. */
	     cur_lex_top (ps_top) = ls_top;		/* save current lex top (for recovery) */
	     call read_look (p_code);
	     if p_code ^= 0
	     then do;
		     call finish_mdp;
		     return;
		end;
	     goto NEXT;

CASE (6):						/* Apply Shared */
	     current_table = DPDA.v2 (current_state + 3);
CASE (4):						/* Apply state. */
CASE (5):						/* Apply single */
	     la_need = 1;
	     rulen = DPDA.v1 (current_state + 2);
	     altn = DPDA.v2 (current_state + 2);
	     if debug_sw
	     then do;
		     db_data.type = "APLY";
		     db_data.data = "(";
		     call ioa_$ioa_switch_nnl (iox_$user_output, "^a^i ^i)", string (db_data), rulen, altn);
		end;

	     if (rulen > 0) & mrds_dsm_parse_info.highest_severity < 3
	     then do;
		     call mrds_dsm_semantics (mrds_dsm_semantics_info_ptr, rulen, altn, lex_stack_ptr, ls_top, code);
		     mrds_dsm_parse_info.highest_severity_semantics =
			max (mrds_dsm_parse_info.highest_severity_semantics,
			mrds_dsm_semantics_info.highest_severity);
		     if code ^= 0
		     then do;
			     p_code = code;
			     call finish_mdp;
			     return;
			end;
		end;

	     if debug_sw
	     then do;
		     call ioa_$ioa_switch_nnl (iox_$user_output, "^-pd=^i ld=^i(", DPDA.v1 (current_state + 1),
			DPDA.v2 (current_state + 1));
		     do t = ps_top to ps_top - DPDA.v1 (current_state + 1) + 1 by -1;
			call ioa_$ioa_switch_nnl (iox_$user_output, " ^d", parse_stack (t));
		     end;
		     call ioa_$ioa_switch_nnl (iox_$user_output, ")^/");
		end;

	     if DPDA.v1 (current_state + 1) = -1
	     then if (ps_top >= hbound (parse_stack, 1))
		then do;
			call too_many (hbound (parse_stack, 1), "parse");
			call finish_mdp;
			return;
		     end;
		else parse_stack (ps_top + 1) = current_state;

	     ps_top = ps_top - DPDA.v1 (current_state + 1);
	     ls_top = ls_top - DPDA.v2 (current_state + 1);

	     if ps_top <= 0
	     then do;
		     call report_mdp_error (4, PARSE_FAILURE, "The parse stack is empty.");
		     call finish_mdp;
		     return;
		end;

	     do i = current_table + 4 to current_table + DPDA.v2 (current_table)
		while (DPDA.v1 (i) ^= parse_stack (ps_top));
	     end;

	     if i > current_table + DPDA.v2 (current_table)
	     then current_state = DPDA.v2 (current_table + 3);
	     else current_state = DPDA.v2 (i);
NEXT:
	end;					/* End of parse loop. */

	return;					/* Effective end of mrds_dsm_parse. */

read_look:
     proc (p_code);

	dcl     p_code		 fixed bin (35);

	p_code = 0;

	do while (la_ct < la_need);
	     call mrds_dsm_scanner (mrds_dsm_scanner_info_ptr, addr (lex_stack), -la_put, code);
	     mrds_dsm_parse_info.highest_severity_scanner =
		max (mrds_dsm_parse_info.highest_severity_scanner,
		mrds_dsm_scanner_info.highest_severity);
	     la_put = mod (la_put, -lbound (lex_stack, 1)) + 1;
	     la_ct = la_ct + 1;
	end;

	test_symbol = lex_stack.symbol (-la_use);
	m = 0;
	nil = 0;
	an = test_symbol - 1;			/* The current table of the Deterministic Push-Down Automata(DPDA) must be
						   looped through, looking for an entry whose v1 equals the test_symbol.
						   Since the v1 column in the tables of the DPDA are arranged in ascending numberic
						   order, the search can be terminated when a v1>=test_symbol is found.
						   If a match is found, the next_state is set to the v2 of the matching entry and
						   got_symbol is called.
						   If a match is not found, an error condition has occurred and must be dealt
						   with appropriately.
						   */

	do i = current_table + 1 to current_table + DPDA.v2 (current_table) while (an < test_symbol);
	     n = DPDA.v1 (i);
	     if n < 0
	     then an = -n;
	     else an = n;
	     if an < test_symbol
	     then if n < 0
		then m = i;
		else if n = nil_sym
		then nil = i;
	end;

	if an = test_symbol
	then do;
		next_state = DPDA.v2 (i - 1);
		call got_symbol (p_code);
		if p_code ^= 0
		then return;
	     end;
	else do;
		if an > test_symbol
		then do i = 1 to current_table + DPDA.v2 (current_table);
			if abs (DPDA.v1 (i)) = nil_sym
			then nil = i;
		     end;

		if (m > 0)
		then do;
			next_state = DPDA.v2 (m);
			call got_symbol (p_code);
		     end;

		else if nil_flag & nil > 0
		then do;				/* If skip recovery has just occurred
						   and there is a nil symbol
						   transition take the transition
						   and back up to the nil
						   symbol in the lookahead
						   stack. */
			next_state = DPDA.v2 (nil);
			la_get = mod (la_get - 2, -lbound (lex_stack, 1)) + 1;
			la_ct = la_ct + 1;
			test_symbol = nil_sym;
			call got_symbol (p_code);
		     end;

		else if token_cnt > error_mark
		then do;
			if local_recovered (p_code)
			then do;
				call read_look (p_code);
				if p_code ^= 0
				then return;
			     end;
			else if p_code ^= 0
			then return;
			else if skip_recovered (p_code)
			then call report_mdp_error (3, PARSE_ERROR_RECOVERY, (recov_msg));
			else if p_code ^= 0
			then return;
			else do;
				if debug_sw
				then call ioa_$ioa_switch_nnl (iox_$user_output, " ^4i  ", current_state);
				call ioa_$rs ("^a ^d ^a ^a", message, message_length, "Line",
				     lex_stack (-la_get).line, "symbol", getermc (test_symbol, la_get));
				call report_mdp_error (2, PARSE_NO_RECOVERY, (message));
				p_code = PARSE_NO_RECOVERY;
			     end;
		     end;

		else if skip_recovered (p_code)
		then call report_mdp_error (3, PARSE_ERROR_RECOVERY, (recov_msg));
		else if p_code ^= 0
		then return;
		else do;
			if debug_sw
			then call ioa_$ioa_switch_nnl (iox_$user_output, " ^4i  ", current_state);
			call ioa_$rs ("^a ^d ^a ^a", message, message_length, "Line", lex_stack (-la_get).line,
			     "symbol", getermc (test_symbol, la_get));
			call report_mdp_error (2, PARSE_NO_RECOVERY, (message));
			p_code = PARSE_NO_RECOVERY;
		     end;
	     end;					/* End of (an ^= ts) case. */
	return;					/* Effective end of read_look. */

got_symbol:
     proc (p_code);
	dcl     p_code		 fixed bin (35);
	p_code = 0;
	nil_flag = "0"b;				/* If skip error recovery was
						   in progress, it is now
						   complete. */
	if debug_sw
	then do;
		if (next_state < 0)
		then do;				/* is this a look-ahead state? */
			db_data.type = "LK01";
			db_look = la_need;
			db_data.data = geterm (test_symbol, 0);
						/* display only terminal "name" on look-ahead */
			db_data.flag = " ";
		     end;
		else do;
			db_data.data = getermc (test_symbol, la_get);
						/* display terminal "name" and data, if available */
		     end;
		call ioa_$ioa_switch_nnl (iox_$user_output, "^a^/", string (db_data));
	     end;
	current_state = next_state;
	if (current_state < 0)
	then do;					/* Transition is a look-ahead state. */
		current_state = -current_state;
	     end;
	else do;
		if (ls_top >= hbound (lex_stack, 1))
		then do;
			call too_many (hbound (lex_stack, 1), "lexical");
			p_code = LEX_TOO_MANY;
			return;
		     end;
		ls_top = ls_top + 1;
		lex_stack (ls_top) = lex_stack (-la_get);
		la_get = mod (la_get, -lbound (lex_stack, 1)) + 1;
		la_ct = la_ct - 1;
		token_cnt = token_cnt + 1;
	     end;

     end;						/* End of got_symbol. */

skip_recovered:
     proc (p_code) returns (bit (1));

/* *
   Skip recovery requires that the user difine one or more  recovery
   terminal symbols by means of the

   -recover <nil> st1 st2 ...

   control  included  in  the  lrk  source.   st1  st2 etc. are skip
   terminals.  They are terminals which can  end  statements.   They
   cause  a  table  to  be built for skip recovery.  This table is a
   list of read or lookahead states which can follow the reading  of
   a skip terminal. These states correspond to the beginnings of new
   statements.

   Skip  recovery  is  done  when  an  error  has occurred and local
   recovery (if used) was not successful.  Basically what it does is
   to skip forward in the source by calling  the  scanner  until  it
   encounters  one  of  the skip terminals.  It then tries to find a
   state which followed a previous occurrence of the found terminal.
   If one is found it adjusts the lexical and parse stacks and  then
   procedes.

   Effectively  a  bad "statement" has been discarded.  In this case
   "statement" means an input string bounded by two  identical  skip
   terminals  (such  as  ";"  for  example)  including  the boundary
   terminal on  the  right.   If  the  language  is  such  that  the
   discarded  statement  is optional (syntactically) the rest of the
   input can be checked for syntax errors.

   When a bad "statement" is discarded the parser  is  restarted  in
   the  state  in  which it began to process that statement.  If the
   next input symbol encountered is not acceptable  to  this  state,
   the  parser  makes  a last attempt at error recovery by replacing
   the bad "statement" with the <nil> symbol defined by the -recover
   control if used.

   The <nil> symbol is one which the scanner must NEvER  return.  It
   is  needed  because some languages do not allow all statements to
   occur at every point.  This means that when you back  up  to  the
   last  statement  beginning  point, you may not be allowed to have
   the statement you find next.  As an example, take  this  grammar:
   <g>  ::= <i> | <g> <i> !
   <i>  ::= <a> | <b> !
   <a>  ::= a ; <rd> !
   <rd> ::= r ; | <rd> r ; !
   <b>  ::= b ; <sd> !
   <sd> ::= s ; | <sd> s ; !
   
   Then  suppose  that  you  intended to have an input like line (1)
   below, but instead you got (2):

   (1)  a ; r ; r ; b ; s ; s ; s ; a ; r ; r ; r ;
   (2)  a ; r ; r ; b ; s ; s ; s   a ; r ; r ; r ;

   Suppose that the grammar had specified
   -recover <nil> ;
   and local recovery  is  not  used.   When  the  "s"  "a"  ";"  is
   encountered,  skip  recovery  will discard it as a bad statement.
   But this then means that it will miss the fact that it should  be
   entering  the  <a>  rule.   It  will  then get to the "r" but the
   parser will have restarted in a state which can  read  either  an
   "a",  "b",  or  "s".   So  it  will  have to skip again.  In this
   example, skipping will occur, one statement at a time, until  EOI
   is reached.  This means that no syntax checking is done in all of
   the "r" s which are skipped.  This is not highly desireable.

   However, if you add a rule like this:

   <a>  ::= <nil> <rd> !
   then  the  generated <nil> from skip recovery will allow the <rd>
   to be correctly parsed, reducing  the  number  of  useless  error
   messages by quite a bit, usually.

   These <nil> rules can help parse thru misplaced statements during
   error  recovery,  but  will  never  accept these statements under
   normal circumstances.  The semantics on these <nil> rules  should then report an error.
   */

	dcl     p_code		 fixed bin (35);
	dcl     (i, ii)		 fixed bin (24);
	dcl     (j, jj)		 fixed bin (24);
	dcl     c			 fixed bin (24);
	dcl     dec4		 pic "zzz9";


	p_code = 0;
	if (hbound (skip_v1, 1) <= 0)
	then return ("0"b);				/* no skip table */
	error_mark = 0;
	current_table = 1;
	recov_msg = "Unuseable ";
	recov_msg = recov_msg || geterm (test_symbol, la_get);
	recov_msg = recov_msg || " on line ";
	dec4 = lex_stack (-la_get).line;
	recov_msg = recov_msg || ltrim (dec4);
	recov_msg = recov_msg || ",  Skipped to ";

	nil_sym = skip_v1 (2);			/* SKIP table */
	c = 1;
	do while (c ^= 0);
	     if (la_ct < 1)
	     then do;				/* if look-ahead stack is empty, get a symbol */
		     call mrds_dsm_scanner (mrds_dsm_scanner_info_ptr, addr (lex_stack), -la_put, p_code);
		     mrds_dsm_parse_info.highest_severity_scanner =
			max (mrds_dsm_parse_info.highest_severity_scanner,
			mrds_dsm_scanner_info.highest_severity);
		     la_put = mod (la_put, -lbound (lex_stack, 1)) + 1;
		     la_ct = 1;
		end;
	     c = lex_stack.symbol (-la_get);
	     do i = current_table + 2 to current_table + skip_v2 (current_table);
						/* SKIP table */
		if (skip_v1 (i) = c)
		then do;				/* SKIP table */
			jj = skip_v2 (i);		/* SKIP table */
			do j = ps_top to 1 by -1;
			     do ii = jj + 1 to jj + skip_v2 (jj);
						/* SKIP table */
				if (skip_v1 (ii) = parse_stack (j))
				then do;		/* SKIP table */
					ps_top = j - 1;
					ls_top = cur_lex_top (j);
					current_state = skip_v2 (ii);
						/* SKIP table */
					recov_msg = recov_msg || geterm (c, 0);
					recov_msg = recov_msg || " on line ";
					dec4 = lex_stack (-la_get).line;
					recov_msg = recov_msg || ltrim (dec4) || " " || copy ("!*!", 26);
					lex_stack (-la_get).symlen = 0;
						/* generate a nil symbol into the look-ahead stack */
					lex_stack (-la_get).symbol = nil_sym;
					la_get = mod (la_get, -lbound (lex_stack, 1)) + 1;
						/* Advance past nil symbol.
						   It will not be used unless
						   the next symbol cannot be read. */
					la_ct = la_ct - 1;
					nil_flag = "1"b;
					return ("1"b);
				     end;
			     end;
			end;
		     end;
	     end;
	     la_get = mod (la_get, -lbound (lex_stack, 1)) + 1;
	     la_ct = la_ct - 1;
	end;
	recov_msg = recov_msg || end_of_input_msg || copy ("!*!", 26);
	current_state = 0;
	return ("1"b);
     end;						/* End of skip_recovered. */

geterm:
     proc (idx, ids) returns (char (100) var);

	dcl     (idx, ids)		 fixed bin (24);
	dcl     temp		 char (100) var;
	dcl     c_str		 char (20000) based;

	temp = "";
get_rest:
	if (ids > 0)
	then if (lex_stack (-ids).symlen > 0)
	     then do;
		     temp = temp || """";
		     temp = temp || substr (lex_stack (-ids).symptr -> c_str, 1, min (50, lex_stack (-ids).symlen));
		     temp = temp || """";
		     return (temp);
		end;
	if (idx = 0)
	then temp = end_of_input_msg;
	else temp = substr (string (TC), TL.fc (idx), TL.ln (idx));
	return (temp);
getermc:
     entry (idx, ids) returns (char (100) var);

	if (idx = 0)
	then temp = end_of_input_msg;
	else temp = substr (string (TC), TL.fc (idx), TL.ln (idx));
	temp = temp || " ";
	goto get_rest;
     end;						/* End of get_term and get_termc. */

local_recovered:
     proc (p_code) returns (bit (1));

/*
   "    this procedure implements the LRK local error recovery (using
   "    the  DPDA  table).  This  is  done by using the current (bad)
   "    symbol and the next input symbol. All  possible  parses  from
   "    this state are examined. These trial parses proceed until the
   "    next read or lookahead state is encountered. The trial parses
   "    are true simulations of what  can  happen,  apply  states are
   "    chosen according to the simulated top of parse stack.

   "    Given:
   "         B is the current symbol (bad)
   "         N is the next input symbol
   "         C is the current state
   "         R is a "next" read state
   "    These are the conditions which can exist.
   "         C( N )    R( B N )    -kind-
   "            0         1 0    symbol leading to R is missing
   "            0         0 1    B is a wrong symbol
   "            1         1 0    B and N reversed in input
   "            1         0 x    B is an extra symbol in the input
   "            0         0 0    recovery fails

   "    The recovery tries to find  a  useable  combination.  If  one
   "    exists,  the  search  does  not  stop.  If  a  second  one is
   "    encountered, the search stops, a message is  generated  which
   "    says the choice is not unique, and then the first combination
   "    is used.

   "    The local recovery shcheme was altered in  Sept  1977  by  Al
   "    Kepner  to  allow  local  recovery from errors encountered by
   "    look-ahead states.  Preveously  only  errors  encountered  by
   "    read states could be handled.  The error correction scheme is
   "    still the same heuristic described above.
   "
   "    Some  complexity has been added to procedure next_term.  Note
   "    the new variables la_get2 and la_use2.  These  are  necessary
   "    to  handle  the  case  where  an  error  is  encountered by a
   "    look-ahead state and the next state found is not a look-ahead
   "    state.  In this case the next  read  state  encountered  will
   "    correspond  to the "bad" symbol or a symbol to the left of it
   "    (depending on how many look-ahead states preceded the error).
   "    The goal is to  find  the  read  or  look-ahead  state  which
   "    corresponds  to  the  input  symbol to the right of the "bad"
   "    symbol.  The goal is recognized by the condition  "la_use2  =
   "    la_next".   Until  this  goal  is reached look-ahead and read
   "    states are simply passed through using the  look-ahead  stack
   "    to find the appropriate next state.
   */

	p_code = 0;
	if (test_symbol < 0)
	then do;
		call ioa_$rs ("^a ^d ^a", message, message_length, "Line", lex_stack (-la_get).line,
		     "Negative terminal; cannot recover");

		call report_mdp_error (2, PARSE_NO_RECOVERY, (message));
		return ("0"b);
	     end;
	error_mark = token_cnt + la_need;
	do while (la_ct < la_need + 1);

	     call mrds_dsm_scanner (mrds_dsm_scanner_info_ptr, addr (lex_stack), -la_put, p_code);
	     mrds_dsm_parse_info.highest_severity_scanner =
		max (mrds_dsm_parse_info.highest_severity_scanner,
		mrds_dsm_scanner_info.highest_severity);
	     if p_code ^= 0
	     then return ("0"b);

	     la_put = mod (la_put, -lbound (lex_stack, 1)) + 1;
	     la_ct = la_ct + 1;
	end;
	if hbound (skip_v1, 1) > 0
	then nil_sym = skip_v1 (2);			/* SKIP table */
	else nil_sym = -1;
	la_next = mod (la_use, -lbound (lex_stack, 1)) + 1;
	next_symbol = lex_stack (-la_next).symbol;
	dcl     string		 builtin;
	string (sws) = "0"b;
	transit = -1;
	combinations = 0;
	depth = 0;
	if debug_sw
	then call dump_la;
	do i = current_table + 1 to current_table + DPDA.v2 (current_table) while (combinations < 2);
	     alt_symbol = abs (DPDA.v1 (i));
	     if alt_symbol = nil_sym
	     then go to try_again;
	     if debug_sw
	     then call ioa_$ioa_switch_nnl (iox_$user_output, "#^4i ^4a ^i ^a^/", current_state, DDop (sign (DPDA.v2 (i))),
		     alt_symbol, geterm (alt_symbol, 0));
	     string (cycle) = "0"b;
	     if combinations < 2
	     then do;
		     call next_term ((ps_top), (DPDA.v2 (i)), p_code);
		     if p_code ^= 0
		     then return ("0"b);
		end;
try_again:
	end;
	recov_msg = "";
	if (transit = -1)
	then return ("0"b);
	goto case (fixed (string (sws)));

case (0):						/* can't resolve it */
	return ("0"b);

case (3):
case (7):						/* cannot occur */
	signal condition (logic_error);
	dcl     logic_error		 condition;

case (1):						/* B is wrong symbol */
	recov_msg = recov_msg || geterm (transit, 0);
	recov_msg = recov_msg || " used in place of erroneous ";
	recov_msg = recov_msg || geterm (test_symbol, la_get);
	goto set_symbol;

case (2):						/* symbol leading to R is missing */
	recov_msg = recov_msg || "Missing ";
	recov_msg = recov_msg || geterm (transit, 0);
	recov_msg = recov_msg || " is assumed before ";
	recov_msg = recov_msg || geterm (test_symbol, la_get);
	la_ct = la_ct + 1;
	lex_stack (-la_put) = lex_stack (-la_next);
	lex_stack (-la_next) = lex_stack (-la_use);
	la_put = mod (la_put, -lbound (lex_stack, 1)) + 1;
set_symbol:
	lex_stack (-la_use).token_num = 0;		/* flag as phoney token for semantics */
	la_next = la_use;
	lex_stack (-la_next).symptr = addr (default_symbol);
	lex_stack (-la_next).symlen = length (default_symbol);
	lex_stack (-la_next).line = lex_stack (-(mod (la_put - 2, -lbound (lex_stack, 1)) + 1)).line;
	lex_stack (-la_next).symbol = transit;
	goto done;

case (4):
case (5):						/* B is an extra symbol */
	recov_msg = recov_msg || "Extraneous ";
	recov_msg = recov_msg || geterm (test_symbol, la_use);
	recov_msg = recov_msg || " ignored before ";
	recov_msg = recov_msg || geterm (next_symbol, la_next);
	la_ct = la_ct - 1;
	la_put = mod (la_put - 2, -lbound (lex_stack, 1)) + 1;
						/* Back up one in look-ahead stack. */
	lex_stack (-la_use) = lex_stack (-la_next);
	goto done;

case (6):						/* B and N reversed */
	recov_msg = recov_msg || geterm (test_symbol, la_use);
	recov_msg = recov_msg || " and ";
	recov_msg = recov_msg || geterm (next_symbol, la_next);
	recov_msg = recov_msg || " are reversed.";
	lex_stack (ls_top + 1) = lex_stack (-la_use);
	lex_stack (-la_use) = lex_stack (-la_next);
	lex_stack (-la_next) = lex_stack (ls_top + 1);
done:
	if combinations <= 1
	then ;
	else recov_msg = recov_msg || copy (" ", 30) || "(choose first of many possibilities)";
	call ioa_$rs ("^a ^d ^a", message, message_length, "Line", mrds_dsm_scanner_info.line_number, recov_msg);

	call report_mdp_error (1, PARSE_ERROR_RECOVERY, (message));
	if debug_sw
	then call dump_la;
	return ("1"b);				/* recovery completed */

	dcl     1 sws,
		2 CNf		 bit (1) unal,	/* current state contains next symbol */
		2 RBNf		 bit (2) unal;	/* next read matches bad or next symbol */
	dcl     combinations	 fixed bin (24);	/* useable combinations found so far */
	dcl     transit		 fixed bin (24);	/* found alternate symbol to use from current state */
	dcl     la_next		 fixed bin (24);	/* temporary "next" look-ahead position */
	dcl     alt_symbol		 fixed bin (24);	/* current alternate symbol */
	dcl     cycle		 (4000) bit (1) unal;
	dcl     default_symbol	 char (13) int static init ("ERROR_SYMBOL_");
	dcl     next_symbol		 fixed bin (24);
	dcl     p_code		 fixed bin (35);
	dcl     depth		 fixed bin (24);

dump_la:
     proc;

	dcl     ii		 fixed bin (24);
	if debug_sw
	then do;
		ii = la_get;
		do while (ii ^= la_put);
		     call ioa_$ioa_switch_nnl (iox_$user_output, "#la(-^i) ^3i""^a""^/", ii, lex_stack (-ii).symbol,
			geterm (lex_stack (-ii).symbol, 0));
		     ii = mod (ii, -lbound (lex_stack, 1)) + 1;
		end;
	     end;
     end dump_la;					/*  */
next_term:
     proc (top, next_state, p_code);
	dcl     p_code		 fixed bin (35);

	p_code = 0;

	look_ahead = (next_state < 0);
	if look_ahead
	then do;
		la_use2 = la_use;
		la_get2 = la_get;
	     end;
	else la_use2, la_get2 = mod (la_get, -lbound (lex_stack, 1)) + 1;
	depth = depth + 5;
	do i = 1 to ps_top;
	     parse_stack2 (i) = parse_stack (i);
	end;
NEXT:
	if (next_state = 0)
	then do;
		transit = 0;
		depth = depth - 5;
		go to done;
	     end;
	next_state = abs (next_state);
	cur_st = next_state;
	if DPDA.v1 (cur_st) = 0 | DPDA.v1 (cur_st) = 2
	then do;					/* Stack state? */
		if top >= hbound (parse_stack, 1)
		then do;
			call too_many (hbound (parse_stack, 1), "parse");
			p_code = PARSE_TOO_MANY;
			return;
		     end;
		top = top + 1;
		parse_stack (top) = cur_st;
	     end;
	goto CASE (DPDA.v1 (cur_st));
CASE (2):						/* Stack and Shared read */
CASE (3):						/* Shared look */
CASE (10):					/* Shared read */
	cur_st = DPDA.v2 (cur_st);
CASE (0):						/* Stack and Read. */
CASE (1):						/* Look. */
CASE (9):						/* Read. */
	if DPDA.v1 (cur_st) = 1
	then la_use2 = mod (la_use2, -lbound (lex_stack, 1)) + 1;
	else la_use2 = la_get2;
	if la_use2 = la_next
	then do;
		if debug_sw
		then call ioa_$ioa_switch_nnl (iox_$user_output, "#^vx^4i READ^/", depth, next_state);
		rep = 0;
		do s = test_symbol, next_symbol while (next_symbol ^= alt_symbol);
		     rep = rep + 1;
		     do i = cur_st + 1 to cur_st + DPDA.v2 (cur_st) while (combinations < 2);
			if ((DPDA.v1 (i) < 0) & (-DPDA.v1 (i) <= s)) | (DPDA.v1 (i) = s)
			then do;
				if debug_sw
				then call ioa_$ioa_switch_nnl (iox_$user_output, "#^vx(^i)^i^/", depth, rep, s);
				if (combinations = 0)
				then do;
					combinations = 1;
					transit = alt_symbol;
					if (rep = 1)
					then RBNf = "10"b;
					else RBNf = "01"b;
				     end;
				else combinations = 2;
			     end;
		     end;
		end;
		if (next_symbol = alt_symbol)
		then do;
			if (combinations = 0)
			then do;
				CNf = "1"b;
				do i = cur_st + 1 to cur_st + DPDA.v2 (cur_st);
				     if ((DPDA.v1 (i) < 0) & (-DPDA.v1 (i) <= test_symbol))
					| DPDA.v1 (i) = test_symbol
				     then RBNf = "10"b;
				end;
				transit = alt_symbol;
				combinations = 1;
			     end;
			else combinations = 2;
		     end;
done:
		depth = depth - 5;
		do i = 1 to ps_top;
		     parse_stack (i) = parse_stack2 (i);
		end;
		return;
	     end;
	else do;
		if la_use2 = la_use			/* la_use points to the bad input symbol. */
		then s = alt_symbol;		/* We are considering an alternate symbol. */
		else s = lex_stack (-la_use2).symbol;
		marked = 0;
		do i = cur_st + 1 to cur_st + DPDA.v2 (cur_st) while (abs (DPDA.v1 (i)) <= s);
		     if abs (DPDA.v1 (i)) = s
		     then go to found;
		     else if DPDA.v1 (i) < 0
		     then marked = i;
		end;
		if marked ^= 0
		then i = marked;
		else go to done;
found:
		next_state = DPDA.v2 (i);
		if next_state >= 0
		then la_get2 = mod (la_get2, -lbound (lex_stack, 1)) + 1;
		go to NEXT;
	     end;
CASE (4):						/* Apply state. */
CASE (5):						/* Apply single */
CASE (6):						/* Apply Shared */
	if debug_sw
	then call ioa_$ioa_switch_nnl (iox_$user_output, "#^vx^4i APLY^/", depth, next_state);
	if DPDA.v1 (cur_st + 1) = -1
	then do;
		if (top >= hbound (parse_stack, 1))
		then do;
			call too_many (hbound (parse_stack, 1), "parse");
			p_code = PARSE_TOO_MANY;
			return;
		     end;
		parse_stack (top + 1) = cur_st;
	     end;
	top = top - DPDA.v1 (cur_st + 1);
	if (DPDA.v1 (cur_st) = 6)
	then cur_st = DPDA.v2 (cur_st + 3);
	if top > 0
	then do i = cur_st + 4 to cur_st + DPDA.v2 (cur_st);
		if (DPDA.v1 (i) = parse_stack (top))
		then do;
			next_state = DPDA.v2 (i);
			goto NEXT;
		     end;
	     end;
	else return;
	next_state = DPDA.v2 (cur_st + 3);
	goto NEXT;




	dcl     top		 fixed bin (24);	/* top of parse stack for this invocation */
	dcl     next_state		 fixed bin (24);	/* branch to follow */
	dcl     cur_st		 fixed bin (24);	/* current state for this recursion */
	dcl     rep		 fixed bin (24);
	dcl     s			 fixed bin (24);
	dcl     look_ahead		 bit (1);
	dcl     i			 fixed bin (24);
	dcl     la_get2		 fixed bin (24);
	dcl     la_use2		 fixed bin (24);
	dcl     marked		 fixed bin (24);
     end;						/* End of next_term. */
     end;						/* End of  local_recovered. */

     end;						/* End of read_look. */

too_many:
     proc (x, t);
	p6 = x;
	call ioa_$rs ("^a", message, message_length, "Exceeded " || p6 || " entries of lrk " || t || " stack.");
	call report_mdp_error (4, INTERNAL_STACK_OVERFLOW, (message));
	return;

/* *	variables for too_many:	*/
	dcl     p6		 pic "zzzzz9";
	dcl     t			 char (*) parm;
	dcl     x			 fixed bin (24) parm;
     end;						/* End of too_many. */

finish_mdp:
     proc;
	if lex_stack_ptr ^= null
	then free lex_stack in (work_area);
	if mrds_dsm_scanner_info_ptr ^= null
	then free mrds_dsm_scanner_info in (work_area);
	if mrds_dsm_semantics_info_ptr ^= null
	then free mrds_dsm_semantics_info in (work_area);
     end;						/* End of finish_mdp. */

report_mdp_error: proc (p_severity, p_internal_error_code, p_message);

	dcl     p_severity		 fixed bin (35);
	dcl     p_internal_error_code	 fixed bin (35);
	dcl     p_message		 char (*);

	mrds_dsm_parse_info.highest_severity = max (p_severity, mrds_dsm_parse_info.highest_severity);

	call ioa_$ioa_switch (mrds_dsm_parse_info.error_iocb_ptr, "Severity ^d, ^a^/^a", p_severity,
	     MRDS_DSM_ERROR_MESSAGE (p_internal_error_code), p_message);

	if mrds_dsm_parse_info.listing_iocb_ptr ^= null ()
	then call ioa_$ioa_switch (mrds_dsm_parse_info.listing_iocb_ptr, "Severity ^d, ^a^/^a", p_severity,
		MRDS_DSM_ERROR_MESSAGE (p_internal_error_code), p_message);

     end;						/* End of report_mdp_error. */

finish: proc;

	if p_struct_ptr ^= null
	then free p_struct;
	if lex_stack_ptr ^= null
	then free lex_stack;
	if mrds_dsm_semantics_info_ptr ^= null
	then free mrds_dsm_semantics_info;
	if mrds_dsm_scanner_info_ptr ^= null
	then free mrds_dsm_scanner_info;
     end;						/* End of finish. */

%include mrds_dsm_parse_stack;
%page;
%include mrds_dsm_parse_info;
%page;
%include mrds_dsm_sem_info;
%page;
%include mrds_dsm_scan_info;
%page;
%include mrds_dsm_error_info;
%page;
%include mrds_dsm_parse_table;
%page;
%include mrds_dsm_skip_table;
%page;
%include mrds_dsm_terminals;

     end;						/* End of mrds_dsm_parse. */
