/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

mrds_dsm_determine_auth_sec: proc (db_path, dsm_dirname, dsm_entryname) returns (bit (1) unal);

/*
   This module determines the security state of the database and the
   authorization  to  that  database  for the caller. It returns the
   value true ("1"b) if either the database is in an unsecure  state
   or  the database is in a secure state and the caller is a DBA for
   that database, for any other condition it returns  false  ("0"b).
   If  for some reason the database cannot be opened or its security
   state cannot be determined the database will be assumed to be  in
   a  secure  state an a warning will be sent via sub_err_ that this
   assumption is being made. If the caller's authorization cannot be
   determined  it  will  be  assumed to be that of a normal user (as
   opposed to a DBA) and again a warning will be sent  via  sub_err_
   that  this  assuption  is  being made. Old version databases will
   always have the value true returned.

   where:

   db_path: (input) char  (*)  relative  or  absolute  path  to  the
   .   database
   dsm_dirname: (input) char (*) absolute  path  to  the  submodel's
   .   containing directory
   dsm_entryname: (input) char (*) entry name of the submodel - must
   .   include the dsm suffix.
   return_value: (output) bit (1) unal true if the database  is  not
   .   secure or the database is secure and the caller is a DBA else
   .   false.

   Known Bugs:

   Other problems:

   HISTORY:

   81-04-27 Davids: originally coded;
   83-01-24 Roger Lackey :  Changed the length of SECURE_DATABASE_MESSAGE 
                            and NOT_ADMINISTRATOR_MESSAGE to accommodate long 
		        directory pathnames in error messages.
		        Also added undefine variables.

   83-09-28 Paul Benjamin:  Backed out change of 83-01-24 as meaningless.
*/

/* PARAMETERS */

	dcl     db_path		 char (*);	/* (input) absolute or relative path to the database */
	dcl     dsm_dirname		 char (*);	/* (input) absolute path to the submodel's containing directory */
	dcl     dsm_entryname	 char (*);	/* (input) entry name of the submodel
						   - must conatin the dsm suffix */

/* AUTOMATIC */

	dcl     db_ptr		 ptr init (null ());/* pointer to the database's data model */
	dcl     internal_error	 fixed bin (35);	/* standard error code */
	dcl     local_area		 area (50);	/* area for small allocations */

/* BUILTINS */

	dcl     addr		 builtin;
	dcl     empty		 builtin;
	dcl     null		 builtin;


/* CONDITIONS */

	dcl     cleanup		 condition;

/* CONSTANT */

	dcl     SECURE_DATABASE_MESSAGE char (150) internal static options (constant)
				 init ("^/ASSUMING DATABASE IS SECURE^/Could not open the database ^a^/refered to by ^a>^a");
	dcl     NOT_ADMINISTRATOR_MESSAGE char (150) internal static options (constant)
				 init ("^/ASSUMING YOU ARE NOT A DATABASE ADMINISTRATOR^/Could not " ||
				 "determine your authorization to the database ^a^/refered to by ^a>^a");

/* EXTERNAL */

	dcl     mrds_error_$version_not_supported fixed bin (35) external static;

/* ENTRIES */

	dcl     mrds_dm_authorization$get_user_class entry (char (*), ptr, fixed bin, ptr, fixed bin (35));
	dcl     mrds_dm_close	 entry (ptr, fixed bin (35));
	dcl     mrds_dm_open	 entry (char (168), fixed bin, ptr, fixed bin (35));
	dcl     mrds_dm_db_secured$get_secured_status entry (ptr, ptr, fixed bin, ptr, fixed bin (35));

%include mrds_authorization;
%page;
%include mrds_database_state;

	on cleanup
	     begin;
		if db_ptr ^= null ()
		then call mrds_dm_close (db_ptr, internal_error);
	     end;

/*
   Open the database  to  determine  its  securitry  state.  If  the
   database  cannot  be  opened  no  information  about the database
   version or security state of the database can be obtained so  for
   security  reasons  it  must be assummed that the database is in a
   secure state. A message indicating this assumption is set to  the
   user.
   */

	call mrds_dm_open ((db_path), 2, db_ptr, internal_error);
	if internal_error ^= 0
	then do;
		call report_error (internal_error, SECURE_DATABASE_MESSAGE,
		     db_path, dsm_dirname, dsm_entryname);
		allocate database_state in (local_area) set (database_state_ptr);
		database_state.secured = "1"b;
	     end;
	else do;

/*
   With the database successfully open a check may be  made  on  its
   security state. If the error mrds_error_$version_not_supported is
   returned it means that the database is a version  that  does  not
   have  a  security  attribute,  the  database  will  be flaged (in
   database_state.secured) as  unsecured.  If  any  other  error  is
   returned it is assumed that the database has a security attribute
   but its value could not  be  determined.  The  database  will  be
   flaged  as secure and a message about the assumption will be sent
   to the user.
*/

		call mrds_dm_db_secured$get_secured_status (db_ptr, addr (local_area),
		     database_state_structure_version, database_state_ptr, internal_error);
		if internal_error ^= 0
		then do;
			allocate database_state in (local_area) set (database_state_ptr);
			if internal_error = mrds_error_$version_not_supported
			then database_state.secured = "0"b;
			else do;
				call report_error (internal_error, SECURE_DATABASE_MESSAGE,
				     db_path, dsm_dirname, dsm_entryname);
				database_state.secured = "1"b;
			     end;
		     end;
		call mrds_dm_close (db_ptr, internal_error); /* no reason to keep the db open */
	     end;

/*
   If    the     error     returned     by     get_user_clase     is
   mrds_error_$version_not_supported it means that the database does
   have use the DBA concept. For these databases all users have  the
   functionality of a DBA and an authorization of administrator will
   be set. For any other error it will be asummed that the  database
   does use the DBA concept but that the authorization of the caller
   cannot be determined, for security reasons it  must  be  assummed
   that  the  caller  is  not an administrator. A warning about this
   assumption will be sent to the user.
*/

	call mrds_dm_authorization$get_user_class (db_path, addr (local_area),
	     mrds_authorization_structure_version, mrds_authorization_ptr, internal_error);
	if internal_error ^= 0
	then do;
		allocate mrds_authorization in (local_area) set (mrds_authorization_ptr);
		if internal_error = mrds_error_$version_not_supported
		then mrds_authorization.administrator = "1"b;
		else do;
			call report_error (internal_error, NOT_ADMINISTRATOR_MESSAGE,
			     db_path, dsm_dirname, dsm_entryname);
			mrds_authorization.administrator = "0"b;
		     end;
	     end;

	return (^database_state.secured | (database_state.secured & mrds_authorization.administrator));

report_error: proc (icode, message, arg1, arg2, arg3);

/*
   This routine is used to report errors via the sub_err_ condition.
   sub_err_ is called with the continue switch set so that after the
   sub_err_ condition has been  acted  on  by  the  system  and  the
   message  is printed control is returned to the entry which called
   report_error. All this assumes that the user has not set  up  his
   own  sub_err_  handler  - if he has he can return control to this
   module or not as well as printing the message or not.
*/


/* PARAMETERS */

	dcl     icode		 fixed bin (35);	/* (input) error code */
	dcl     message		 char (*);	/* (input) error message */
	dcl     arg1		 char (*);	/* (input) first argument to the error message */
	dcl     arg2		 char (*);	/* (input) second argument to the error message */
	dcl     arg3		 char (*);	/* (input) third argument to the error message */

/* AUTOMATIC */

	dcl     retval		 fixed bin (35);	/* not used but needed as a parameter by sub_err_ */

/* ENTRIES */

	dcl     sub_err_		 entry options (variable);




	call sub_err_ (icode, "mrds_dsm_determine_auth_sec", "c", null (), retval, message, arg1, arg2, arg3);

	return;

     end;						/* report_error */

     end;						/* determine_security_authorization */

