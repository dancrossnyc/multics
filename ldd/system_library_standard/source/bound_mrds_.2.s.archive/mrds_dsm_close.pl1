/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

mrds_dsm_close: proc (iocb_ptr, code);

/*
   The close_dsm  module  has  two  entry  points  for  closing  and
   detaching  data  submodels. The first, close, closes detaches and
   destroyes the iocb and  returns  any  errors.  The  second  entry
   point,  force,  closes  detaches  and destroyes the iocb with out
   returning any error codes.

   Known Bugs:

   Other Problems:

   HISTORY

   75-11-?? Lackey: written.

   81-02-02 Davids: added the call to iox_$destroy_iocb.
*/

/* PARAMETERS */

	dcl     iocb_ptr		 ptr;		/* (input) pointer to the iocb */
	dcl     code		 fixed bin (35);	/* (output) error code */

/* AUTOMATIC */

	dcl     a_code		 fixed bin (35);	/* internal error code */

/* BUILTINS */

	dcl     null		 builtin;

/* ENTRIES */

	dcl     iox_$close		 entry (ptr, fixed bin (35));
	dcl     iox_$destroy_iocb	 entry (ptr, fixed bin (35));
	dcl     iox_$detach_iocb	 entry (ptr, fixed bin (35));

/* EXTERNAL */

	dcl     error_table_$badcall	 fixed bin (35) external static;





	if iocb_ptr ^= null ()
	then do;
		call iox_$close (iocb_ptr, code);
		if code = 0
		then do;
			call iox_$detach_iocb (iocb_ptr, code);
			if code = 0
			then call iox_$destroy_iocb (iocb_ptr, code);
		     end;
	     end;
	else code = error_table_$badcall;

	return;

force: entry (iocb_ptr);

	if iocb_ptr ^= null ()
	then do;
		call iox_$close (iocb_ptr, a_code);
		call iox_$detach_iocb (iocb_ptr, a_code);
		call iox_$destroy_iocb (iocb_ptr, a_code);
	     end;

	return;

     end /* mrds_dsm_close */;
