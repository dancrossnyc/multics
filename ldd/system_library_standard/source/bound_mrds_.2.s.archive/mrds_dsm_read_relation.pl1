/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

mrds_dsm_read_relation: proc (relation_name, area_ptr, a_relation_block_ptr, iocb_ptr, a_code);

/*
   This routine loads a relation_block_str from data in the submodel
   vfile  pointed  to  by the iocb_ptr parameter. The version of the
   submodel is determined and as long as its version 1, 4  or  5  it
   can  be  processed.  There  are no other submodel versions. Since
   version 1 and 4 submodels do not have access bits in the relation
   record  access  of append_tuple and delete_tuple for the relation
   and access of read and modify for the attributes in the  relation
   is  set  in the relation_block_str. Access for version 5 submodel
   relations is of course taken from the access bits in the record.

   Known bugs:

   Other problems:

   HISTORY

   80-12-23 Davids: This routine has been extensively modified  from
   .        the eariler version which had no  history  section.  The
   .        bigest changes where handling of version 4 submodels and
   .        a call to sub_err_ to explain any errors.

   81-01-06 Davids: modified  to  call  mrds_dsm_get_version  rather
   .        than reading the header struction in line.

   81-01-09   Davids:   changed   call    mrds_dsm_get_version    to
   .        mrds_dsm_read_header$version.

   81-01-14 Davids: modified to support version  1  submodels  which
   .        are handled like version 4 submodels.

   .        modified to handle the new relation_block structure  and
   .        to zero what used to be the pad fields (now mbz fields).

   81-04-30 Davids: modified to use  the  new  rel_rec_5  structure,
   .        i.e. named 1 bit access elements  rather  than  just  an
   .        unnamed bit string.
*/

/* PARAMETERS */

	dcl     relation_name	 char (*);	/* (input) name of the relation to be read */
	dcl     area_ptr		 ptr;		/* (input) area to allocate relation_block */
	dcl     a_relation_block_ptr	 ptr;		/* (output) pointer to the realtion_block str */
	dcl     iocb_ptr		 ptr;		/* (input) pointer to the submodel iocb */
	dcl     a_code		 fixed bin (35);	/* (output) a error code */

/* AUTOMATIC */

	dcl     byte_len		 fixed bin (21);	/* length in bytes of area needed for records */
	dcl     byte_ptr		 ptr init (null ());/* pointer to area records will be read into */
	dcl     code		 fixed bin (35);	/* internal error code */
	dcl     idx		 fixed bin;	/* loop indx */
	dcl     record_key		 char (256) varying;/* vfile record key */
	dcl     record_length	 fixed bin (21);	/* length of record just read */
	dcl     version		 fixed bin;	/* submodel version */

/* BASED */

	dcl     area_buffer		 area based (area_ptr); /* space for relation_block str */
	dcl     byte_string		 char (byte_len) based unal; /* space to read a record */

/* BUILTIN */

	dcl     null		 builtin;

/* ENTRIES */

	dcl     iox_$read_record	 entry (ptr, ptr, fixed bin (21), fixed bin (21), fixed bin (35));
	dcl     iox_$seek_key	 entry (ptr, char (256) varying, fixed bin (21), fixed bin (35));
	dcl     mrds_dsm_read_header$version entry (ptr, fixed bin, fixed bin (35));

/* EXTERNAL */

	dcl     mrds_error_$version_not_supported fixed bin (35) external static;

%include mrds_dsm_rel_rec_4;

%include mrds_dsm_rel_rec_5;

%include mrds_dsm_rel_block;

%include mrds_dsm_head_strings;

	call mrds_dsm_read_header$version (iocb_ptr, version, code);
	if code ^= 0
	then call error_exit ("Could not read submodel version");

	if version = 4
	then call process_version_1_or_4;
	else
	     if version = 5
	then call process_version_5;
	else
	     if version = 1
	then call process_version_1_or_4;
	else do;
		code = mrds_error_$version_not_supported;
		call error_exit ("Unrecognized submodel version");
	     end;




	a_code = 0;
	a_relation_block_ptr = relation_block_ptr;
	return;

error_return:
	a_code = code;
	a_relation_block_ptr = null ();
	if byte_ptr ^= null ()
	then free byte_ptr -> byte_string;
	return;

process_version_1_or_4: proc;

	record_key = relation_name;

	call iox_$seek_key (iocb_ptr, (record_key), byte_len, code);
	if code ^= 0
	then call error_exit ("Relation record was not in submodel vfile_");

	allocate byte_string set (byte_ptr);

	call iox_$read_record (iocb_ptr, byte_ptr, byte_len, record_length, code);
	if code ^= 0
	then call error_exit ("Relation record could not be read");

	rb_number_of_attributes = byte_ptr -> rel_rec_4.no_attributes;
	allocate relation_block in (area_buffer);
	relation_block.version = RELATION_BLOCK_VERSION_1;
	relation_block.dsm_rel_name = relation_name;
	relation_block.dm_rel_name = byte_ptr -> rel_rec_4.model_rel_name;
	relation_block.rel_access.append = "1"b;
	relation_block.rel_access.delete = "1"b;
	relation_block.rel_access.null = "0"b;
	relation_block.rel_access.mbz1 = "0"b;
	do idx = 1 to byte_ptr -> rel_rec_4.no_attributes;
	     relation_block.attribute_info (idx).dsm_attr_name
		= byte_ptr -> rel_rec_4.attribute_info (idx).submodel_att_name;
	     relation_block.attribute_info (idx).attr_access.read = "1"b;
	     relation_block.attribute_info (idx).attr_access.modify = "1"b;
	     relation_block.attribute_info (idx).attr_access.null = "0"b;
	     relation_block.attribute_info (idx).attr_access.mbz2 = "0"b;
	     relation_block.attribute_info (idx).dm_attr_name
		= byte_ptr -> rel_rec_4.attribute_info (idx).model_att_name;
	     relation_block.attribute_info (idx).dm_attr_flags.mbz3 = "0"b;
	end;

	free byte_ptr -> byte_string;

	return;

     end /* process_version_4 */;

process_version_5: proc;

	record_key = REL_HEAD || relation_name;

	call iox_$seek_key (iocb_ptr, (record_key), byte_len, code);
	if code ^= 0
	then call error_exit ("Relation record was not in submodel vfile_");

	allocate byte_string set (byte_ptr);

	call iox_$read_record (iocb_ptr, byte_ptr, byte_len, record_length, code);
	if code ^= 0
	then call error_exit ("Relation record could not be read");

	rb_number_of_attributes = byte_ptr -> rel_rec_5.attr_num;
	allocate relation_block in (area_buffer);
	relation_block.version = RELATION_BLOCK_VERSION_1;
	relation_block.dsm_rel_name = relation_name;
	relation_block.dm_rel_name = byte_ptr -> rel_rec_5.rel_dm_name;
	relation_block.rel_access.append = byte_ptr -> rel_rec_5.access.append;
	relation_block.rel_access.delete = byte_ptr -> rel_rec_5.access.delete;
	relation_block.rel_access.null = byte_ptr -> rel_rec_5.access.null;
	relation_block.rel_access.mbz1 = "0"b;
	do idx = 1 to byte_ptr -> rel_rec_5.attr_num;
	     relation_block.attribute_info (idx).dsm_attr_name = byte_ptr -> rel_rec_5.attr (idx).dsm_name;
	     relation_block.attribute_info (idx).attr_access.read = byte_ptr -> rel_rec_5.attr (idx).access.read;
	     relation_block.attribute_info (idx).attr_access.modify = byte_ptr -> rel_rec_5.attr (idx).access.modify;
	     relation_block.attribute_info (idx).attr_access.null = byte_ptr -> rel_rec_5.attr (idx).access.null;
	     relation_block.attribute_info (idx).attr_access.mbz2 = "0"b;
	     relation_block.attribute_info (idx).dm_attr_name = byte_ptr -> rel_rec_5.attr (idx).dm_name;
	     relation_block.attribute_info (idx).dm_attr_flags.mbz3 = "0"b;
	end;

	free byte_ptr -> byte_string;

	return;

     end /* process_version_5 */;

error_exit: proc (message);

/* PARAMETERS */

	dcl     message		 char (*);	/* (input) error message */

/* AUTOMATIC */

	dcl     retval		 fixed bin (35);

/* ENTRIES */

	dcl     sub_err_		 entry options (variable);



	call sub_err_ (code, "mrds_dsm_read_relation", "c", null (), retval, message);

	goto error_return;

     end /* error_return */;

     end /* mrds_dsm_read_relation */;

