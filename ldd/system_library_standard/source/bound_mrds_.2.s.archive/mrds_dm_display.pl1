/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */

/* format: ^inddcls,^indattr,indnoniterend,^indnoniterdo,indend,tree,^case,insnl,comcol61,dclind5,declareind5,delnl */

mrds_dm_display:
     proc (I_mrds_dm_display_info_ptr, O_err_msg, O_err_code);

/* BEGIN DESCRIPTION

   The purpose of this procedure is to display the db_model info.

   The output is through the iocb_ptr supplied in mrds_dm_display_info.

   END DESCRIPTION */


/****^  HISTORY COMMENTS:
  1) change(82-05-20,DWoodka), approve(), audit(), install():
     written.
  2) change(82-08-18,DWoodka), approve(), audit(), install():
     modified to remove bit offset and bit length numbers from the display
     and include the database type (page_file or vfile) for the DMS conversion.
  3) change(83-02-14,Davids), approve(), audit(), install():
     modified to use the new db_type_flags in the db_model structure instead
     of the old numeric db_type.
  4) change(83-02-28,Davids), approve(), audit(), install():
     Modified to indicate that Rollback is on/off instead of before journalling
     to keep it consistent with the rest of the user interface.
  5) change(85-12-03,Spitzer), approve(85-12-03,MCR7311),
     audit(86-09-15,Gilcrease), install(86-10-16,MR12.0-1187):
     modified to use crossreference file. display unreferenced objects.
     display crossreferences.
                                                   END HISTORY COMMENTS */


/*      PARAMETERS     */

dcl  I_mrds_dm_display_info_ptr ptr parameter;		/* Pointer to mrds_dm_display_info structure */
dcl  O_err_code fixed bin (35) parameter;		/* Error code */
dcl  O_err_msg char (*) parameter;			/* Text of error message */

%page;

/*      INITIALIZATION     */

	mrds_dm_display_info_ptr = I_mrds_dm_display_info_ptr;
						/* Init parameters */
	O_err_msg = "";
	O_err_code = 0;

	iocb_ptr = mrds_dm_display_info.output_iocb_ptr;	/* For faster reference */
	temp_file_iocb_ptr, second_temp_file_iocb_ptr = null;
						/* Used in tidy_up */
	dbm_ptr = mrds_dm_display_info.dbm_ptr;

	max_seg_size = sys_info$max_seg_size * 4;

	temp_seg_ptrs (*), fm_ptr = null;
	on cleanup call tidy_up;			/* Establish cleanup handler */

	if mrds_dm_display_info.version ^= MRDS_DM_DISPLAY_INFO_VERSION_1
	then call error (error_table_$unimplemented_version, "^/For mrds_dm_display_info.version");
%page;

/*    print header    */

	if mrds_dm_display_info.sw.header
	then call print_header;

/*    display cmdb format    */

	if mrds_dm_display_info.sw.cmdb
	then call mrds_dm_display_cmdb (mrds_dm_display_info_ptr, err_msg, code);

/*    display domains    */

	if mrds_dm_display_info.sw.domains
	then call print_domain_info;

/*    display attribute info    */

	if mrds_dm_display_info.sw.attribute
	then call print_attrib_info;

/*   display relation info     */

	if mrds_dm_display_info.sw.relation
	then call print_rel_info;

/*    display index info    */

	if mrds_dm_display_info.sw.index
	then call print_index_info;

/*    display domain crossreference    */

	if mrds_dm_display_info.sw.domain_xref
	then call print_xref (DOMAIN_KEY_HEAD, 1);

/*    display attribute crossreference    */

	if mrds_dm_display_info.sw.attribute_xref
	then call print_xref (ATTRIBUTE_KEY_HEAD, 2);

/*    display complete crossreference    */

	if mrds_dm_display_info.sw.all_xref
	then call print_complete_xref;

/*    display history info    */

	if mrds_dm_display_info.sw.history
	then call mrds_dm_display_history (mrds_dm_display_info_ptr, err_msg, code);

	call tidy_up;

exit:
	return;

%page;

print_rel_info:
     proc;

dcl  pii_object  char (32);

	if mrds_dm_display_info.sw.names_only
	then call ioa_$ioa_switch (iocb_ptr, "^/RELATION NAMES:");
	if rel_name_list_ptr = null
	then call print_all_relations;
	else do i = 1 to rel_name_list_ptr -> name_list.num_names;
	     pii_object = (rel_name_list_ptr -> name_list.name (i));
	     call print_object (pii_object);
	     end;

	call ioa_$ioa_switch (iocb_ptr, "");		/* add a line feed */

     end print_rel_info;
%page;



print_all_relations:
     proc;					/* called by print_rel_info */

dcl  par_object char (30);

	if db_model.num_rels < 1
	then do;
	     call ioa_$ioa_switch (iocb_ptr, "^2/There are no relations defined for the database^/^a",
		mrds_dm_display_info.db_path);
	     return;
	     end;
	else do fi_ptr = ptr (dbm_ptr, db_model.file_ptr) repeat ptr (dbm_ptr, file_info.fwd_ptr)
		while (rel (fi_ptr) ^= NULL_OFFSET);	/* loop through all relations (files) */

	          par_object = file_info.file_name;
	          call print_object (par_object);
		end;
     end print_all_relations;



print_object:
	proc (po_object_of_print);

dcl   po_object_of_print char (*) parameter;
	
		file_model_name = rtrim (po_object_of_print) || ".m";
						/* get relation name */
		call initiate_file_ (db_path, file_model_name, R_ACCESS, fm_ptr, (0), code);
		if fm_ptr = null
		then call error (mrds_error_$no_model_rel, "^/" || rtrim (rel_name_list_ptr -> name_list.name (i)));

		ri_ptr = ptr (fm_ptr, file_model.rel_ptr);
						/* relation info ptr */
		if mrds_dm_display_info.sw.names_only
		then call ioa_$ioa_switch (iocb_ptr, "^a", rel_info.name);
						/* print relation name */
		else if mrds_dm_display_info.sw.default
		     then call print_rel_info_default;
		     else if mrds_dm_display_info.sw.long
			then call print_rel_info_long;
			else call print_rel_info_brief;

		call terminate_file_ (fm_ptr, 0, TERM_FILE_TERM, (0));

	end print_object;
%page;

print_rel_info_brief:
print_rel_info_default:
     proc;					/* print relation info for default or brief switch */
						/* called by print_rel_info or print_all_relations */


	call ioa_$ioa_switch (iocb_ptr, "^2/RELATION: ^5x^32a", rel_info.name);
	if rel_info.num_attr > 1
	then plural = "S";
	else plural = "";

	printed_one_sw = "0"b;

	do ai_ptr = ptr (fm_ptr, rel_info.attr_ptr) /* get attribute info */
	     repeat ptr (fm_ptr, attr_info.fwd_thread) while (rel (ai_ptr) ^= NULL_OFFSET);

	     if ^mrds_dm_display_info.sw.default
	     then /* Brief form */
		if ^printed_one_sw
		then do;
		     call ioa_$ioa_switch (iocb_ptr, "^/^3x^22a^a", "ATTRIBUTE" || plural || ":", attr_info.name);
		     printed_one_sw = "1"b;
		     end;
		else call ioa_$ioa_switch (iocb_ptr, "^25x^a", attr_info.name);
	     else do;				/* Default form */
		if ^printed_one_sw
		then do;
		     call ioa_$ioa_switch (iocb_ptr, "^/^3x^a", "ATTRIBUTE" || plural || ":");
		     printed_one_sw = "1"b;
		     end;

		if attr_info.key_attr
		then type = "Key";
		else type = "Data";

		if attr_info.index_attr
		then indx = "Index";
		else indx = "";

		untrimmed_dcl =
		     mdbm_util_$display_descriptor (
		     addr (pointer (dbm_ptr, attr_info.domain_ptr) -> domain_info.user_desc));
		dcl_trimmed = mdbm_util_$trim_descriptor (untrimmed_dcl);

		call ioa_$ioa_switch (iocb_ptr, "^6x^32a^2x^a^2x^a", attr_info.name, type, indx);
		call ioa_$ioa_switch (iocb_ptr, "^10x^a", dcl_trimmed);

		end;
	     end;
     end print_rel_info_brief;
%page;

print_rel_info_long:
     proc;					/* called by print_rel_info or print_all_relations */


	rel_long.rel_name = rel_info.name;
	rel_long.nattrs = rel_info.num_attr;

	call iox_$put_chars (iocb_ptr, addr (rel_long), length (string (rel_long)), code);
	if code ^= 0
	then call error (code, "");


	if rel_info.num_attr > 1
	then plural = "S";
	else plural = "";


	call ioa_$ioa_switch_nnl (iocb_ptr, "^2/^3x^a:", "ATTRIBUTE" || plural);

	do ai_ptr = ptr (fm_ptr, rel_info.attr_ptr) /* get attribute info */
	     repeat ptr (fm_ptr, attr_info.fwd_thread) while (rel (ai_ptr) ^= NULL_OFFSET);

	     if attr_info.key_attr
	     then type = "Key";
	     else type = "Data";

	     if attr_info.index_attr
	     then indx = "Index";
	     else indx = "";

	     call ioa_$ioa_switch (iocb_ptr, "^2/^6xName:^7x^a", attr_info.name);
	     call ioa_$ioa_switch (iocb_ptr, "^6xType:^7x^a^2x^a", type, indx);

	     di_ptr = pointer (dbm_ptr, attr_info.domain_ptr);

	     call ioa_$ioa_switch (iocb_ptr, "^6xDomain_info:^/^12xname: ^a", domain_info.name);

	     call ioa_$ioa_switch_nnl (iocb_ptr, "^12xdcl:  ^a",
		mdbm_util_$display_descriptor (addr (domain_info.db_desc)));
	     if domain_info.check_path_ptr ^= NULL_OFFSET
	     then call ioa_$ioa_switch_nnl (iocb_ptr, "^/^15x-check_proc ^a",
		     get_path_entry (domain_info.check_path_ptr, "$"));

	     if domain_info.encd_path_ptr ^= NULL_OFFSET
	     then call ioa_$ioa_switch_nnl (iocb_ptr, "^/^15x-encode_proc ^a",
		     get_path_entry (domain_info.encd_path_ptr, "$"));

	     if domain_info.decd_path_ptr ^= NULL_OFFSET
	     then call ioa_$ioa_switch_nnl (iocb_ptr, "^/^15x-decode_proc ^a",
		     get_path_entry (domain_info.decd_path_ptr, "$"));

	     if domain_info.db_desc ^= domain_info.user_desc
	     then /* It had a -decode_dcl */
		call ioa_$ioa_switch_nnl (iocb_ptr, "^/^15x-decode_dcl ^/^15x^a",
		     mdbm_util_$display_descriptor (addr (domain_info.user_desc)));
	     call ioa_$ioa_switch (iocb_ptr, "");	/* add a line feed */

	     end;

     end print_rel_info_long;

%page;

print_domain_info:
     proc;
	if db_model.domain_ptr = NULL_OFFSET
	then do;
	     call ioa_$ioa_switch (iocb_ptr, "^2/No domains exist for the database^/^a", mrds_dm_display_info.db_path);
	     return;
	     end;

	if mrds_dm_display_info.sw.names_only
	then call ioa_$ioa_switch (iocb_ptr, "^2/DOMAIN NAMES:");
	else do;
	     if db_model.num_domains > 1
	     then plural = "S";
	     else plural = "";
	     call ioa_$ioa_switch (iocb_ptr, "^2/DOMAIN" || plural || ":");
	     end;

	if dom_name_list_ptr = null
	then do;
	     printed_one_sw = "0"b;
	     do di_ptr = ptr (dbm_ptr, db_model.domain_ptr) /* loop through all domains */
		repeat ptr (dbm_ptr, domain_info.fwd_thread) while (rel (di_ptr) ^= NULL_OFFSET);
		if (mrds_dm_display_info.sw.unreferenced_domains & domain_info.unreferenced)
		     | (^mrds_dm_display_info.sw.unreferenced_domains)
		then do;
		     if mrds_dm_display_info.sw.names_only
		     then call ioa_$ioa_switch (iocb_ptr, "^a", domain_info.name);
						/* print domain name */
		     else call print_domain;
		     printed_one_sw = "1"b;
		     end;
		end;
	     if ^printed_one_sw
	     then call ioa_$ioa_switch (iocb_ptr, "^2/No unreferenced domains exist for the database^/^a",
		     mrds_dm_display_info.db_path);
	     end;
	else do i = 1 to dom_name_list_ptr -> name_list.num_names;
		di_ptr = ptr (dbm_ptr, db_model.domain_ptr);

		do while (domain_info.name ^= dom_name_list_ptr -> name_list.name (i));
		     di_ptr = ptr (dbm_ptr, domain_info.fwd_thread);
		     if rel (di_ptr) = NULL_OFFSET
		     then call error (mrds_error_$no_model_dom,
			     "^/" || rtrim (dom_name_list_ptr -> name_list.name (i)));
		     end;


		if mrds_dm_display_info.sw.names_only
		then call ioa_$ioa_switch (iocb_ptr, "^a", domain_info.name);
						/* print domain name */
		else call print_domain;
		end;

	call ioa_$ioa_switch (iocb_ptr, "");		/* add a line feed */

     end print_domain_info;
%page;

print_domain:
     proc;					/* called by print_domain_info */

	long_desc_str = mdbm_util_$display_descriptor (addr (domain_info.db_desc));
	if mrds_dm_display_info.sw.long
	then do;
	     desc_str = long_desc_str;
	     call ioa_$ioa_switch_nnl (iocb_ptr, "^-^a^/^-^5x^a", domain_info.name, desc_str);
	     end;
	else do;
	     desc_str = mdbm_util_$trim_descriptor (long_desc_str);
	     call ioa_$ioa_switch_nnl (iocb_ptr, "^-^20a^1x^a", domain_info.name, desc_str);
	     end;

	if domain_info.check_path_ptr ^= NULL_OFFSET
	then call ioa_$ioa_switch_nnl (iocb_ptr, "^/^15x-check_proc ^a",
		get_path_entry (domain_info.check_path_ptr, "$"));

	if domain_info.encd_path_ptr ^= NULL_OFFSET
	then call ioa_$ioa_switch_nnl (iocb_ptr, "^/^15x-encode_proc ^a",
		get_path_entry (domain_info.encd_path_ptr, "$"));

	if domain_info.decd_path_ptr ^= NULL_OFFSET
	then call ioa_$ioa_switch_nnl (iocb_ptr, "^/^15x-decode_proc ^a",
		get_path_entry (domain_info.decd_path_ptr, "$"));

	if domain_info.db_desc ^= domain_info.user_desc
	then call ioa_$ioa_switch_nnl (iocb_ptr, "^/^15x-decode_dcl ^/^15x^a",
		mdbm_util_$display_descriptor (addr (domain_info.user_desc)));

	call ioa_$ioa_switch (iocb_ptr, "");		/* add a line feed */
     end print_domain;
%page;

print_attrib_info:
     proc;

	if ^mrds_dm_display_info.sw.header
	then call build_db_attr_list;			/* if the attribute list is not already built */

          if (db_model.unreferenced_attribute_ptr = NULL_OFFSET & mrds_dm_display_info.unreferenced_attributes)
	     then do;
	     call ioa_$ioa_switch (iocb_ptr, "^2/No unreferenced attributes exist for the database^/^a", mrds_dm_display_info.db_path);
	     return;
	     end;
	if mrds_dm_display_info.sw.names_only
	then call ioa_$ioa_switch (iocb_ptr, "^2/ATTRIBUTE NAMES:");
	else do;
	     call ioa_$ioa_switch (iocb_ptr, "^/ATTRIBUTES:");
	     call ioa_$ioa_switch_nnl (iocb_ptr, "^/^-^20a^1x^a^/", "NAME:", "DOMAIN:");
	     end;

	call iox_$position (temp_file_iocb_ptr, BOF, 0, code);
	if code ^= 0
	then call error (code, "Positioning temp file to BOF");

	if attr_name_list_ptr = null
	then if mrds_dm_display_info.sw.unreferenced_attributes
	     then do ua_ptr = ptr (dbm_ptr, db_model.unreferenced_attribute_ptr)
	          repeat ptr (dbm_ptr, unreferenced_attribute.fwd_thread) while (rel (ua_ptr) ^= NULL_OFFSET);

	          if mrds_dm_display_info.sw.names_only
		then call ioa_$ioa_switch (iocb_ptr, "^a", unreferenced_attribute.name);
	          else do;
		     di_ptr = ptr (dbm_ptr, unreferenced_attribute.domain_ptr);
		     call ioa_$ioa_switch (iocb_ptr, "^-^20a^1x^a", unreferenced_attribute.name,
			domain_info.name);
		     end;
		end;				/* do ua_ptr */
	     
	     else do;
		seek_head_info.n = length (ATTRIBUTE_KEY_HEAD);
		seek_head_info.search_key = ATTRIBUTE_KEY_HEAD;

		call iox_$control (temp_file_iocb_ptr, "seek_head", addr (seek_head_info), code);
		if code = error_table_$no_record
		then code = error_table_$end_of_info;

		do while (code = 0);

		     call iox_$read_key (temp_file_iocb_ptr, key, (0), code);
		     if code = 0
		     then if substr (key, 1, length (ATTRIBUTE_KEY_HEAD)) = ATTRIBUTE_KEY_HEAD
			then if mrds_dm_display_info.sw.names_only
			     then do;
				call ioa_$ioa_switch (iocb_ptr, "^a",
				     substr (key, length (ATTRIBUTE_KEY_HEAD) + 1));
				call iox_$position (temp_file_iocb_ptr, 0, 1, code);
				end;
			     else do;
				call iox_$read_record (temp_file_iocb_ptr, temp_seg_ptr, 8, (0), code);

				if (code = 0) | (code = error_table_$long_record)
				then do;
				     di_ptr = ptr (dbm_ptr, temp_seg_ptr -> crossref_info_record.offset);
				     call ioa_$ioa_switch (iocb_ptr, "^-^20a^1x^a",
					substr (key, length (ATTRIBUTE_KEY_HEAD) + 1),
					di_ptr -> domain_info.name);
				     code = 0;
				     end;
				else call error (code, "Reading attribute record from xref file for key: " || key);
				end;
			else code = error_table_$end_of_info;
		     end;

		if code ^= error_table_$end_of_info
		then call error (code, "Getting attribute names from temp file");
		end;

	else do i = 1 to attr_name_list_ptr -> name_list.num_names;
		key = ATTRIBUTE_KEY_HEAD || rtrim (attr_name_list_ptr -> name_list.name (i));
		call iox_$seek_key (temp_file_iocb_ptr, key, (0), code);
		if code ^= 0
		then call error (mrds_error_$no_model_attr, "^/" || rtrim (attr_name_list_ptr -> name_list.name (i)));

		if mrds_dm_display_info.sw.names_only
		then call ioa_$ioa_switch (iocb_ptr, "^a", attr_name_list_ptr -> name_list.name (i));
		else do;
		     call iox_$read_record (temp_file_iocb_ptr, temp_seg_ptr, 8, (0), code);
		     if (code = 0) | (code = error_table_$long_record)
		     then do;
			di_ptr = ptr (dbm_ptr, temp_seg_ptr -> crossref_info_record.offset);

			call ioa_$ioa_switch (iocb_ptr, "^-^20a^1x^a", attr_name_list_ptr -> name_list.name (i),
			     di_ptr -> domain_info.name);
			code = 0;           /* in case the code was long_record */
			end;
		     else call error (code, "Reading attribute record from xref file for key: " || key);
		     end;
		end;

	call ioa_$ioa_switch (iocb_ptr, "");	/* add a new_line */

	return;
     end print_attrib_info;

%page;

build_db_attr_list:
     proc;					/* called by print_header or print_attrib_info */

	if temp_file_iocb_ptr ^= null
	then return;

	temp_file_iocb_ptr = mrds_dm_display_info.xref_iocb_ptr;
	if temp_file_iocb_ptr = null
	then do;
	     call mu_db_xref$xref_build (mrds_dm_display_info.temp_dir_path, mrds_dm_display_info.db_path, dbm_ptr,
		mrds_dm_display_info.xref_name, mrds_dm_display_info.xref_iocb_ptr, error_message, code);
	     if code ^= 0
	     then call error (code, error_message);

	     end;

	temp_file_iocb_ptr = mrds_dm_display_info.xref_iocb_ptr;
	temp_file_attach_name = mrds_dm_display_info.xref_name;

	call mu_temp_segments$get_temp_segment_path (mrds_dm_display_info.temp_dir_path, myname, temp_seg_ptr, code);
	if code ^= 0
	then call error (code, "Getting a temp segment in [pd].");

	return;
     end build_db_attr_list;

%page;
print_index_info:
     proc;

	if mrds_dm_display_info.sw.names_only
	then call ioa_$ioa_switch (iocb_ptr, "^/INDEXED RELATION NAMES:");

	if index_name_list_ptr = null
	then call print_all_indexes;
	else do i = 1 to index_name_list_ptr -> name_list.num_names;

		file_model_name = rtrim (index_name_list_ptr -> name_list.name (i)) || ".m";
						/* get index name */
		call initiate_file_ (db_path, file_model_name, R_ACCESS, fm_ptr, (0), code);
		if fm_ptr = null
		then call error (mrds_error_$no_model_rel, "^/" || rtrim (index_name_list_ptr -> name_list.name (i)));

		ri_ptr = ptr (fm_ptr, file_model.rel_ptr);
						/* relation info ptr */

		if ^rel_info.indexed
		then call ioa_$ioa_switch (iocb_ptr, "^/^3xThe relation ^a is not indexed^/", rel_info.name);

		else do;				/* if the relation is indexed */

		     if mrds_dm_display_info.sw.names_only
		     then call ioa_$ioa_switch (iocb_ptr, "^a", index_name_list_ptr -> name_list.name (i));
		     else do;
			call ioa_$ioa_switch (iocb_ptr, "^2/INDEXED RELATION: ^8x^32a",
			     index_name_list_ptr -> name_list.name (i));


			call ioa_$ioa_switch (iocb_ptr, "^/^3x^a", "INDEXED ATTRIBUTES:");


			do ai_ptr = ptr (fm_ptr, rel_info.attr_ptr) /* loop through attributes */
			     repeat ptr (fm_ptr, attr_info.fwd_thread) while (rel (ai_ptr) ^= NULL_OFFSET);

			     if attr_info.index_attr
			     then call ioa_$ioa_switch (iocb_ptr, "^6x^a", attr_info.name);
			     end;
			end;
		     end;

		call terminate_file_ (fm_ptr, 0, TERM_FILE_TERM, (0));
		end;

	call ioa_$ioa_switch (iocb_ptr, "");		/* add line feed */

     end print_index_info;
%page;

print_all_indexes:
     proc;					/* called by print_index_info */

	if db_model.num_rels < 1
	then do;
	     call ioa_$ioa_switch (iocb_ptr, "^2/There are no relations defined for the database^/^a",
		mrds_dm_display_info.db_path);
	     return;
	     end;
	else do fi_ptr = ptr (dbm_ptr, db_model.file_ptr) repeat ptr (dbm_ptr, file_info.fwd_ptr)
		while (rel (fi_ptr) ^= NULL_OFFSET);	/* loop through all relations (files) */

		file_model_name = rtrim (file_info.file_name) || ".m";
						/* get relation name */

		call initiate_file_ (db_path, file_model_name, R_ACCESS, fm_ptr, (0), code);
		if fm_ptr = null
		then call error (code, "^/" || rtrim (db_path) || file_model_name);

		ri_ptr = ptr (fm_ptr, file_model.rel_ptr);
						/* relation info Ptr */

		if rel_info.indexed
		then do;

		     if mrds_dm_display_info.sw.names_only
		     then call ioa_$ioa_switch (iocb_ptr, "^a", rel_info.name);
		     else do;
			call ioa_$ioa_switch (iocb_ptr, "^2/INDEXED RELATION: ^8x^32a", rel_info.name);


			call ioa_$ioa_switch (iocb_ptr, "^/^3x^a", "INDEXED ATTRIBUTES:");

			do ai_ptr = ptr (fm_ptr, rel_info.attr_ptr) /* loop through attributes */
			     repeat ptr (fm_ptr, attr_info.fwd_thread) while (rel (ai_ptr) ^= NULL_OFFSET);

			     if attr_info.index_attr
			     then call ioa_$ioa_switch (iocb_ptr, "^6x^a", attr_info.name);
			     end;

			end;

		     end;

		call terminate_file_ (fm_ptr, 0, TERM_FILE_TERM, (0));
		end;

     end print_all_indexes;

%page;
print_header:
     proc;


	call build_db_attr_list;
	call mu_db_xref$xref_statistics (temp_file_iocb_ptr, (0), total_attributes, (0), error_message, code);
	if code ^= 0
	then call error (code, error_message);

	if db_model.db_type_flags.vfile_type
	then call ioa_$ioa_switch (iocb_ptr, "DATA MODEL FOR VFILE DATA BASE  ^a", mrds_dm_display_info.db_path);
						/* Database path */
	else do;
	     call ioa_$ioa_switch (iocb_ptr, "DATA MODEL FOR DMFILE DATA BASE  ^a", mrds_dm_display_info.db_path);
						/* Database path */
	     if db_model.db_type_flags.transactions_needed
	     then do;
		call ioa_$ioa_switch (iocb_ptr, "^-Database requires transactions");
		call ioa_$ioa_switch (iocb_ptr, "^-   Rollback is    ^[on^;off^]", db_model.db_type_flags.rollback_on)
		     ;
		call ioa_$ioa_switch (iocb_ptr, "^-   Concurrency is ^[on^;off^]",
		     db_model.db_type_flags.concurrency_on);
		end;
	     else call ioa_$ioa_switch (iocb_ptr, "^-Database does not require transactions");
	     end;

	if db_model.mdbm_secured
	then call ioa_$ioa_switch (iocb_ptr, "Data base secured.");

	header_1.version_num = db_model.version;

	changer_ptr = pointer (dbm_ptr, db_model.changer_ptr);
						/* last on list = creator */

	do while (changer_ptr -> changer.next ^= NULL_OFFSET);
	     changer_ptr = pointer (dbm_ptr, changer_ptr -> changer.next);
	     end;

	header_1.creator = changer_ptr -> changer.id;

	call date_time_ ((changer_ptr -> changer.time), header_1.create_time);

	call iox_$put_chars (iocb_ptr, addr (header_1), length (string (header_1)), code);
	if code ^= 0
	then call error (code, "");

	if pointer (dbm_ptr, db_model.changer_ptr) -> changer.next ^= NULL_OFFSET
	then do;					/* If db_model has been changed */
	     header_2.changer = pointer (dbm_ptr, db_model.changer_ptr) -> changer.id;
	     call date_time_ ((pointer (dbm_ptr, db_model.changer_ptr) -> changer.time), header_2.change_time);
	     call iox_$put_chars (iocb_ptr, addr (header_2), length (string (header_2)), code);
	     if code ^= 0
	     then call error (code, "");

	     end;

	header_3.num_rels = db_model.num_rels;

	header_3.num_attrs = total_attributes;		/*  count all attributes */

	header_3.num_domains = db_model.num_domains;

	call iox_$put_chars (iocb_ptr, addr (header_3), length (string (header_3)), code);
	if code ^= 0
	then call error (code, "");

	call ioa_$ioa_switch (iocb_ptr, "");		/* Add a line feed */

     end print_header;


%page;
print_xref:
     proc (px_key_head, px_type);

dcl  px_key_head char (*) parameter;
dcl  px_loop fixed bin;
dcl  px_type fixed bin parameter;

	call build_db_attr_list;

	call iox_$position (temp_file_iocb_ptr, BOF, 0, code);
	if code ^= 0
	then call error (code, "Positioning temp file to BOF");

	seek_head_info.n = length (px_key_head);
	seek_head_info.search_key = px_key_head;

	call iox_$control (temp_file_iocb_ptr, "seek_head", addr (seek_head_info), code);
	if code ^= 0
	then if code = error_table_$no_record
	     then do;
		call ioa_$ioa_switch (iocb_ptr, "^2/No ^[domains^;attributes^] exist for the database.", px_type = 1);
		return;
		end;
	     else call error (code, "Seeking to first domain xref record");

	printed_one_sw = "0"b;
	call ioa_$ioa_switch (iocb_ptr, "^2/^[^20a^1x^;^s^]^20a^1x^[^20a^]^/", px_type = 1, "DOMAINS", "ATTRIBUTES",
	     px_type = 2, "RELATIONS");

	call iox_$read_key (temp_file_iocb_ptr, key, (0), code);
	do while (code = 0);
	     if substr (key, 1, length (px_key_head)) = px_key_head
	     then do;
		key = substr (key, length (px_key_head) + 1);
		call iox_$read_record (temp_file_iocb_ptr, temp_seg_ptr, max_seg_size, (0), code);
		if code = 0
		then do;
		     if temp_seg_ptr -> crossref_info_record.count ^= 0
		     then do;
			do px_loop = 1 to temp_seg_ptr -> crossref_info_record.count;
			     call ioa_$ioa_switch (iocb_ptr, "^[^20a^;^20x^s^]^1x^a", px_loop = 1, key,
				temp_seg_ptr -> crossref_info_record.object (px_loop));
			     end;			/* do pdx_loop */

			printed_one_sw = "1"b;
			end;

		     call iox_$read_key (temp_file_iocb_ptr, key, (0), code);
		     end;
		end;
	     else code = error_table_$end_of_info;
	     end;					/* do while code = 0 */

	if code ^= error_table_$end_of_info
	then call error (code, "Reading crossreference file.");

	if ^printed_one_sw
	then call ioa_$ioa_switch (iocb_ptr, "^2/No referenced ^[domains^;attributes^] exist for the database^/^a",
		px_type = 1, mrds_dm_display_info.db_path);

	return;

     end print_xref;
%page;
print_complete_xref:
     proc;

dcl  pcx_attribute_loop fixed bin;
dcl  pcx_attribute_name char (32);
dcl  pcx_domain_loop fixed bin;
dcl  pcx_domain_name char (32);
dcl  pcx_prev_attribute_name char (32);
dcl  pcx_prev_domain_name char (32);

	call build_db_attr_list;
	call attach_second_iocb;

	call iox_$position (temp_file_iocb_ptr, BOF, 0, code);
	if code ^= 0
	then call error (code, "Positioning temp file to BOF");

	printed_one_sw = "0"b;
	call ioa_$ioa_switch (iocb_ptr, "^2/^20a^x^20a^x^20a^/", "DOMAINS", "ATTRIBUTES", "RELATIONS");

/* Position first iocb to first domain key */
	seek_head_info.search_key = DOMAIN_KEY_HEAD;
	seek_head_info.n = length (DOMAIN_KEY_HEAD);

	call iox_$control (temp_file_iocb_ptr, "seek_head", addr (seek_head_info), code);
	if code ^= 0
	then if code = error_table_$no_record
	     then do;
		call ioa_$ioa_switch (iocb_ptr, "^2/No domains exist for the database.");
		return;
		end;
	     else call error (code, "Seeking to first domain xref record");

	call mu_temp_segments$get_temp_segment_path (mrds_dm_display_info.temp_dir_path, myname, temp_seg_ptrs (2),
	     code);
	if code ^= 0
	then call error (code, "Cannot get temp segment in [pd].");

	pcx_prev_domain_name, pcx_prev_attribute_name = "";

/*
   Produce the listing. This is done by reading the domain records from the
   temp_file_iocb_ptr file. These records contain list of attributes the domains
   are used in. Ignore unreferenced domains. Read the attribute record from the
   second_temp_file_iocb_ptr file. These records contain list of relations the
   attribute is used in. If no relations, display {Unreferenced} in the relation
   column; otherwise display the domain, attribute and list of relations.
*/

	call iox_$read_key (temp_file_iocb_ptr, key, (0), code);
	do while (code = 0);
	     if substr (key, 1, length (DOMAIN_KEY_HEAD)) ^= DOMAIN_KEY_HEAD
	     then code = error_table_$end_of_info;
	     else do;
		call iox_$read_record (temp_file_iocb_ptr, temp_seg_ptr, max_seg_size, (0), code);
		if code = 0
		then do;
		     pcx_domain_name = substr (key, length (DOMAIN_KEY_HEAD) + 1);

/* ignore unreferenced domains by testing count of domain record. The first
   reference of a domain record is the generated attribute with the same name,
   so we skip that one. */
		     do pcx_domain_loop = 1 to temp_seg_ptr -> crossref_info_record.count;

/* make attribute record key. look for this record (has to be there according
   to the rules of building the xref file). */
			key = ATTRIBUTE_KEY_HEAD || temp_seg_ptr -> crossref_info_record.object (pcx_domain_loop);
			call iox_$seek_key (second_temp_file_iocb_ptr, key, (0), code);
			if code ^= 0
			then if (code = error_table_$no_record) & (temp_seg_ptr -> crossref_info_record.count = 1)
			     then do;		/* this is a generated attribute for a domain */
				temp_seg_ptrs (2) -> crossref_info_record.count = 0;
				pcx_attribute_name = pcx_domain_name;
				end;
			     else call error (code, "Searching crossreference for attribute list record: " || key);
			else do;			/* read the attribute record into the second temp segment */
			     call iox_$read_record (second_temp_file_iocb_ptr, temp_seg_ptrs (2), max_seg_size, (0),
				code);
			     if code ^= 0
			     then call error (code, "Reading crossreference for attribute list record: " || key);

			     pcx_attribute_name = temp_seg_ptr -> crossref_info_record.object (pcx_domain_loop);
			     end;

/* finally get to print something out. if the count of attribute record is zero,
   then the attribute isn't used in any relations. */
			if temp_seg_ptrs (2) -> crossref_info_record.count = 0
			then do;
			     call ioa_$ioa_switch (iocb_ptr, "^[^20x^s^;^20a^]^1x^[^20x^s^;^20a^]^1x{Unreferenced}", 
				pcx_domain_name = pcx_prev_domain_name, pcx_domain_name,
				pcx_attribute_name = pcx_prev_attribute_name, pcx_attribute_name);

			     pcx_prev_domain_name = pcx_domain_name;
			     pcx_prev_attribute_name = pcx_attribute_name;
			     printed_one_sw = "1"b;
			     end;

/* otherwise, display the xref line doing previous line name suppressions */
			else do pcx_attribute_loop = 1 to temp_seg_ptrs (2) -> crossref_info_record.count;
				call ioa_$ioa_switch (iocb_ptr, "^[^20x^s^;^20a^]^1x^[^20x^s^;^20a^]^1x^20a",
				     pcx_domain_name = pcx_prev_domain_name, pcx_domain_name,
				     pcx_attribute_name = pcx_prev_attribute_name, pcx_attribute_name,
				     temp_seg_ptrs (2) -> crossref_info_record.object (pcx_attribute_loop));

				pcx_prev_domain_name = pcx_domain_name;
				pcx_prev_attribute_name = pcx_attribute_name;
				printed_one_sw = "1"b;

				end;		/* do pcx_attribute_loop */
			end;			/* do pcx_domain_loop */
		     end;
		end;

/* the first file iocb should now be positioned to the next sequential record
   as a byproduct of reading the domain record. try to read the current
   record. */
	     if code = 0
	     then call iox_$read_key (temp_file_iocb_ptr, key, (0), code);

	     end;					/* do while code = 0 */

/* done reading all the domain records, or we encountered some kind of error
   reading the crossreference file. */
	if code ^= error_table_$end_of_info
	then call error (code, "Reading crossreference file.");

/* if we didn't print any lines, there must not have been any domains in the
   crossreference file. */
	if ^printed_one_sw
	then call ioa_$ioa_switch (iocb_ptr, "^/No referenced domains exist for the database.");

	return;
%page;
/*
   This internal subroutine attaches a second iocb to the same crossreference
   file that was previously built. Note that it must be opened in -share mode
   even though only the current process has the file opened.
*/

attach_second_iocb:
     proc;

dcl  asi_attach_desc char (256) varying;

	asi_attach_desc = "vfile_ " || rtrim (mrds_dm_display_info.temp_dir_path);
	asi_attach_desc = asi_attach_desc || ">";
	asi_attach_desc = asi_attach_desc || temp_file_attach_name;
	asi_attach_desc = asi_attach_desc || " -share";

	call iox_$attach_name (unique_chars_ ("0"b), second_temp_file_iocb_ptr, (asi_attach_desc), null, code);
	if code ^= 0
	then call error (code, (asi_attach_desc));

	call iox_$open (second_temp_file_iocb_ptr, Keyed_sequential_update, "0"b, code);
	if code ^= 0
	then call error (code, (asi_attach_desc));

	return;
     end attach_second_iocb;

     end print_complete_xref;
%page;
/*  * * * * * * * * * * * * * *      error     * * * * * * * * * * * * * *   */



error:
     proc (err_code, err_message);			/* Error procedure  */

dcl  err_code fixed bin (35);
dcl  err_message char (*);


	O_err_code = err_code;
	O_err_msg = err_message;
	call tidy_up;
	goto exit;

     end error;


%page;


/* * * * * * * * * * * * * * * *   tidy_up  * * * * * * * * * * * * * * *  */

tidy_up:
     proc;

	if second_temp_file_iocb_ptr ^= null
	then do;
	     call iox_$close (second_temp_file_iocb_ptr, (0));
	     call iox_$detach_iocb (second_temp_file_iocb_ptr, (0));
	     call iox_$destroy_iocb (second_temp_file_iocb_ptr, (0));
	     second_temp_file_iocb_ptr = null;
	     end;

	if temp_seg_ptr ^= null
	then call mu_temp_segments$free_all_temp_segments (myname, (0));

	if fm_ptr ^= null
	then call terminate_file_ (fm_ptr, 0, TERM_FILE_TERM, (0));

	return;
     end tidy_up;
%page;
/*    * * * * * * * *     get_path_entry      * * * * * * * * * *           */

/* called by print_header, print_rel_info_long and print_domain */

get_path_entry:
     procedure (path_ptr, separator) returns (char (256));

dcl  path_ptr bit (18) unal parameter;			/* offset to struct in dbm_area */
dcl  separator char (1) parameter;			/* either ">" or "$" */

/* get the path - entry character string from the path_entry structure */

	path_entry_ptr = pointer (dbm_ptr, path_ptr);

	return (rtrim (path_entry.path) || separator || rtrim (path_entry.entry));

     end get_path_entry;
%page;

/*    DECLARATIONS    */

dcl  1 rel_long aligned,				/* Structure for relation -long */
       2 l1 char (19) unal init ("
RELATION NAME:   "),
       2 rel_name char (32) unal,
       2 l2 char (23) unal init ("
Number attributes:	 "),
       2 nattrs pic "zzzzzz9" unal;



dcl  1 header_1,					/* Data base header info */
       2 lf0 char (1) unal init ("
"),
       2 l1 char (22) unal init ("Version:"),
       2 version_num pic "zz9" unal,
       2 lf1 char (1) unal init ("
"),
       2 l2 char (21) unal init ("Created by: "),
       2 creator char (32) unal,
       2 lf2 char (1) unal init ("
"),
       2 l3 char (21) unal init ("Created on: "),
       2 create_time char (24) unal,
       2 lf3 char (1) unal init ("
");


dcl  1 header_2,					/*  second part of header */
       2 l1 char (21) unal init ("Changed by: "),
       2 changer char (32) unal,
       2 lf1 char (1) unal init ("
"),
       2 l2 char (21) unal init ("Changed on: "),
       2 change_time char (24) unal,
       2 lf2 char (1) unal init ("
");

dcl  1 header_3,					/* third part of header */
       2 lf0 char (1) unal init ("
"),
       2 l1 char (21) unal init ("Total Domains: "),
       2 num_domains pic "zzz9" unal,
       2 lf1 char (1) unal init ("
"),
       2 l2 char (21) unal init ("Total Attributes: "),
       2 num_attrs pic "zzz9" unal,
       2 lf2 char (1) unal init ("
"),
       2 l3 char (21) unal init ("Total Relations: "),
       2 num_rels pic "zzz9" unal,
       2 lf3 char (1) unal init ("
");
dcl  1 seek_head_info,
       2 relation_type fixed bin init (0),		/* head = search_key */
       2 n fixed bin,
       2 search_key char (256);

dcl  addr builtin;
dcl  BOF int static options (constant) init (-1);
dcl  cleanup condition;
dcl  code fixed bin (35);
dcl  date_time_ entry (fixed bin (71), char (*));
dcl  dcl_trimmed char (80);
dcl  desc_str char (120) varying;
dcl  err_msg char (256);
dcl  error_message char (500);
dcl  error_table_$end_of_info fixed bin (35) ext static;
dcl  error_table_$long_record fixed bin(35) ext static;
dcl  error_table_$no_record fixed bin (35) ext static;
dcl  error_table_$unimplemented_version fixed bin (35) ext static;
dcl  file_model_name char (32);
dcl  fixed builtin;
dcl  i fixed bin;
dcl  indx char (5);
dcl  initiate_file_ entry (char (*), char (*), bit (*), ptr, fixed bin (24), fixed bin (35));
dcl  ioa_$ioa_switch entry () options (variable);
dcl  ioa_$ioa_switch_nnl entry () options (variable);
dcl  iocb_ptr ptr;
dcl  iox_$attach_name entry (char (*), ptr, char (*), ptr, fixed bin (35));
dcl  iox_$close entry (ptr, fixed bin (35));
dcl  iox_$control entry (ptr, char (*), ptr, fixed bin (35));
dcl  iox_$destroy_iocb entry (ptr, fixed bin (35));
dcl  iox_$detach_iocb entry (ptr, fixed bin (35));
dcl  iox_$open entry (ptr, fixed bin, bit (1) aligned, fixed bin (35));
dcl  iox_$position entry (ptr, fixed bin, fixed bin (21), fixed bin (35));
dcl  iox_$put_chars entry (ptr, ptr, fixed bin (21), fixed bin (35));
dcl  iox_$read_key entry (ptr, char (256) var, fixed bin (21), fixed bin (35));
dcl  iox_$read_record entry (ptr, ptr, fixed bin (21), fixed bin (21), fixed bin (35));
dcl  iox_$seek_key entry (ptr, char (256) var, fixed bin (21), fixed bin (35));
dcl  key char (256) varying;
dcl  length builtin;
dcl  long_desc_str char (120) varying;
dcl  max_seg_size fixed bin (21);
dcl  mdbm_util_$display_descriptor entry (ptr) returns (char (120) varying);
dcl  mdbm_util_$trim_descriptor entry (char (120) varying) returns (char (*));
dcl  mrds_dm_display_cmdb entry (ptr, char (*), fixed bin (35));
dcl  mrds_dm_display_history entry (ptr, char (*), fixed bin (35));
dcl  mrds_error_$no_model_attr fixed bin (35) ext static;
dcl  mrds_error_$no_model_dom fixed bin (35) ext static;
dcl  mrds_error_$no_model_rel fixed bin (35) ext static;
dcl  mu_db_xref$xref_build entry (char (*), char (*), ptr, char (*), ptr, char (*), fixed bin (35));
dcl  mu_db_xref$xref_statistics entry (ptr, fixed bin, fixed bin, fixed bin, char (*), fixed bin (35));
dcl  mu_temp_segments$free_all_temp_segments entry (char (*), fixed bin (35));
dcl  mu_temp_segments$get_temp_segment_path entry (char (*), char (*), ptr, fixed bin (35));
dcl  myname char (32) int static options (constant) init ("mrds_dm_display");
dcl  null builtin;
dcl  NULL_OFFSET int static bit (18) unal init ((18)"1"b) options (constant);
dcl  plural char (1) varying;
dcl  pointer builtin;
dcl  printed_one_sw bit (1);
dcl  ptr builtin;
dcl  rel builtin;
dcl  rtrim builtin;
dcl  second_temp_file_iocb_ptr ptr;
dcl  string builtin;
dcl  substr builtin;
dcl  sys_info$max_seg_size fixed bin (35) ext static;
dcl  temp_file_attach_name char (32);
dcl  temp_file_iocb_ptr ptr;
dcl  temp_seg_ptr ptr based (addr (temp_seg_ptrs (1)));
dcl  temp_seg_ptrs (2) ptr;
dcl  terminate_file_ entry (ptr, fixed bin (24), bit (*), fixed bin (35));
dcl  total_attributes fixed bin;
dcl  type char (4);
dcl  unique_chars_ entry (bit (*)) returns (char (15));
dcl  untrimmed_dcl char (120) varying;

%page;
%include access_mode_values;
%page;
%include iox_modes;
%page;
%include mrds_dm_display_info;
%page;
%include mdbm_db_model;
%page;
%include mdbm_file_model;
%page;
%include rmdb_crossref_info;
%page;
%include terminate_file;

     end mrds_dm_display;

