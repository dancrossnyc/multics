/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(85-09-24,Elhard), approve(85-09-24,MCR7198),
     audit(86-06-30,Weaver), install(86-07-16,MR12.0-1094):
     Improved documentation and removed obsolete nonstandard object support.
                                                   END HISTORY COMMENTS */


/* format: style3,^indnoniterdo */
make_bound_object_map_:
     proc (code);

/**********************************************************************/
/*							*/
/*	Name:	make_bound_object_map_			*/
/*	Input:	none					*/
/*	Function:	builds the bound segment's object map, sets the	*/
/*		object map relp at the end of the object segment,	*/
/*		and calculates the bit count for the new bound	*/
/*		object segment.				*/
/*	Output:	error_code				*/
/*							*/
/**********************************************************************/

/* modified 75.06.20 by M. Weaver  to create version 2 map */
/* modified 77/08/16 by M. Weaver to add perprocess_static switch */

declare	maprel		fixed bin (18);
declare	max_length	fixed bin (19);
declare	code		fixed bin (35);
declare	error_table_$boundviol
			fixed bin (35) external;

declare	hcs_$get_max_length_seg
			entry (ptr, fixed bin (19), fixed bin (35));
declare	(addrel, bin, bit, ptr, multiply, rel, size)
			builtin;

declare	(obj_mapp, seg_ptr) pointer;

declare	01 obj_map	aligned like object_map based (obj_mapp);

%include bindext;

/*  */

%include object_map;

/*  */


	seg_ptr = bx_$temp_bsegp;			/* Get pointer to base of object segment. */

	call hcs_$get_max_length_seg (seg_ptr, max_length, code);
	if code ^= 0
	then return;				/* Get maximum number of words object segment may grow. */
						/* get current object length */
	maprel = bin (rel (bx_$bsymp), 18) + bx_$s_lng;
	if (maprel + size (object_map) + 1) > max_length
	then do;
	     code = error_table_$boundviol;		/* no room for map */
	     return;
	end;

	obj_mapp = ptr (seg_ptr, maprel);		/* make ptr to map */

	obj_map.decl_vers = object_map_version_2;
	obj_map.identifier = "obj_map";
	obj_map.text_offset = "0"b;
	obj_map.text_length = bit (bin (bx_$textlng, 18), 18);
	obj_map.definition_offset = rel (bx_$bdefp);
	obj_map.definition_length = bit (bin (bx_$d_lng, 18), 18);
	obj_map.linkage_offset = rel (bx_$blnkp);
	obj_map.linkage_length = bit (bin (bx_$l_lng, 18), 18);
	obj_map.static_offset = rel (bx_$bstatp);
	obj_map.static_length = bit (bin (bx_$i_lng, 18), 18);
	obj_map.symbol_offset = rel (bx_$bsymp);
	obj_map.symbol_length = bit (bin (bx_$s_lng, 18), 18);
	obj_map.break_map_offset, obj_map.break_map_length = "0"b;
	obj_map.format.bound, obj_map.format.standard = "1"b;
	if bx_$bproc = 1
	then obj_map.format.procedure = "1"b;

	if bx_$bound_sep_stat = 1
	then obj_map.format.separate_static = "1"b;
	if bx_$perprocess_static = 1
	then obj_map.format.perprocess_static = "1"b;

	addrel (obj_mapp, size (object_map)) -> map_ptr = bit (bin (maprel, 18), 18);
						/* fill in rel ptr to beg of obj map */
	bx_$bseg_bitcount = multiply ((maprel + size (object_map) + 1), 36, 24, 0);

	code = 0;
	return;

     end make_bound_object_map_;
