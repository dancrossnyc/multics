/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(85-09-24,Elhard), approve(85-09-24,MCR7198),
     audit(86-06-30,Weaver), install(86-07-16,MR12.0-1094):
     Improved readability and documentation.
  2) change(86-07-02,Elhard), approve(86-07-02,MCR7285),
     audit(86-07-23,JRGray), install(86-08-06,MR12.0-1119):
     Modified to zero the info_relp value for the correct trap when no info
     link is present instead of zeroing the info_relp for the first trap.
                                                   END HISTORY COMMENTS */

/* format: style3,^indnoniterdo */
generate_first_ref_traps_:
     procedure;

/**********************************************************************/
/*							*/
/*	Name:	generate_firstref_traps_			*/
/*	Input:	none					*/
/*	Function:	scans the component table and copies the firstref	*/
/*		traps from each component into the new firstref	*/
/*		trap block, relocating each of the references and	*/
/*		regenerating the links.			*/
/*	Output:	none					*/
/*							*/
/**********************************************************************/

/* DECLARATION OF EXTERNAL ENTRIES */

declare	ext_link_		entry (pointer);

declare	decode_link_	entry (pointer) returns (bit (1) aligned);

/* DECLARATION OF AUTOMATIC VARIABLES */

declare	(component_firstref_blockp, linkp, extp, firstref_blockp)
			pointer;

declare	(compno, j, k)	fixed bin;

declare	eside		(2) char (3) aligned init ("lhe", "rhe");

declare	1 firstref_block	aligned automatic,		/* dcl of first reference trap structure */
	  2 version	fixed bin,
	  2 n_traps	fixed bin,		/* number of traps in array */
	  2 trap		(bx_$n_firstrefs, 2) bit (18) unaligned;
						/* automatic adjustable storage */
						/* array for easier referencing */
declare	1 ext		aligned like external_ref;

/* DECLARATION OF BUILTIN FUNCTIONS */

declare	(addr, addrel, bin, bit, null, rel, size, unspec)
			builtin;

/* DECLARATION OF BASED STRUCTURES */

declare	1 based_firstref_block
			aligned based (firstref_blockp) like firstref_block;
declare	1 component_firstref_block
			aligned based (component_firstref_blockp) like firstref_block;
declare	1 lh		aligned based,		/* linkage header */
	  2 defseg	fixed bin,		/* 0->defs in text, 16->defs in link */
	  2 defptr	bit (18) unaligned,		/* offset of definition section */
	  2 first_reference bit (18) unaligned,		/* offset of first ref trap array */
	  2 fthread	pointer,			/* unused */
	  2 bthread	pointer,			/* unused */
	  2 link_begin	bit (18) unaligned,		/* offset in linkage section of linkage info */
	  2 block_lng	bit (18) unaligned,
	  2 dum2		bit (18) unaligned,
	  2 linkage_lng	bit (18) unaligned;


/*  */

%include extref;

/*  */

%include bindext;

/*  */

%include comptbl;

/*  */


/* assume that all regular links have already been generated */
	firstref_block.version = 1;
	firstref_block.n_traps = 0;			/* for now */

	extp = addr (ext);				/* to use when decoding and generating  links */
	ext.relinfo = "lnk18";			/* fudge relocation info; can't be anything else */
	ext.section = "link";			/* offsets are wrt linkage section */

/* look at each object for traps */

	ctp = bx_$ctp;

	do compno = 1 to bx_$ncomp;

	     ctep = comp_tbl (compno);
	     if comp.cfrtp ^= null
	     then do;				/* this component has a firstref trap */

		linkp = comp.clnkp;			/* get ptr to component's linkage section */
		component_firstref_blockp = comp.cfrtp; /* get ptr to component's trap array */
		ext.compent_ptr = ctep;

/* get offset of trap array relative to component's linkage section */

		ext.offset = bin (rel (comp.cfrtp), 18) - bin (rel (comp.clnkp), 18) + 2;

		do j = 1 to component_firstref_block.n_traps;
						/* do for each trap in component */

		     firstref_block.n_traps = firstref_block.n_traps + 1;
		     ext.ref_ptr = addr (firstref_block.trap (firstref_block.n_traps, 1));
						/* get ptr to new trap pair (incl header) */

		     do k = 1 to 2;			/* call and arg ptrs are processed the same */
			ext.side = eside (k);
			ext.loffset = bin (component_firstref_block.trap (j, k), 18);
						/* get offset of original link */
			if ext.loffset = 0
			then firstref_block.trap (firstref_block.n_traps, k) = ""b;
			else if decode_link_ (extp)
			then bx_$fatal_error = 1;	/* presumably a message will have been printed */
			else call ext_link_ (extp);	/* regenerate link; must be external */
		     end;
		end;
	     end;
	end;

/* allocate the firstref block in the linkage section */

	firstref_blockp = addrel (bx_$tlinkp, bx_$tlinklng);
	bx_$tlinkp -> lh.first_reference = bit (bin (bx_$tlinklng, 18), 18);
	bx_$tlinklng = bx_$tlinklng + size (firstref_block);
						/* adjust the linkage length */
	unspec (based_firstref_block) = unspec (firstref_block);

	return;
     end generate_first_ref_traps_;
