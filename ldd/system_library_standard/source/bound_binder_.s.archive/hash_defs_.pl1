/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */

/****^  HISTORY COMMENTS:
  1) change(85-09-24,Elhard), approve(85-09-24,MCR7198),
     audit(86-06-30,Weaver), install(86-07-16,MR12.0-1094):
     Improved documentation.
                                                   END HISTORY COMMENTS */

/* HASH_DEFS - Program to Convert Object Segments for Definition Hashing.
	12/2/76 by Noel I. Morris	*/

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/**********************************************************************/
/*							*/
/*	Name:	hash_defs_				*/
/*	Input:	component_table				*/
/*	Function:	given the component_table and associated insym	*/
/*		tables, builds a definition_hash_table for the	*/
/*		new bound object segment.  Creation of the hash	*/
/*		table occcurs in three stages:		*/
/*		  -- scanning of the definitions for duplicate	*/
/*		     definition names to create the duplicate	*/
/*		     tables, mark the duplicate definitions as	*/
/*		     duplicates, and to redefine the location of	*/
/*		     the definition to point to the duplicate	*/
/*		     table.				*/
/*		  -- hashing the non-duplicate symbols into the	*/
/*		     definition hash table.			*/
/*		  -- if there were duplicates in the definition	*/
/*		     hash table, hashing the segname definitions	*/
/*		     into the component hash table.		*/
/*	Output:	none					*/
/*							*/
/**********************************************************************/

/* format: style3,^indnoniterdo */
hash_defs_:
     proc;

dcl	(sp, sp1)		ptr,			/* pointers to insym entries */
	ctep1		ptr,			/* pointer to component table entry */
	(ip, ip1)		ptr,			/* pointers to insym table entries */
	(sytp, sgtp)	ptr,			/* pointers to seg/sym hash tables */
	(symx, segx, cx, cx1, sx, sx1)
			fixed bin,		/* table indices */
	defrel		bit (18) aligned,		/* rel ptr to definition */
	defp		ptr,			/* ITS pointer to definition */
	namep		ptr,			/* pointer to symbol */
	axtp		ptr,			/* pointer to auxiliary table */
	axx		fixed bin,		/* aux table index */
	dupn		fixed bin,		/* duplicate symbol counter */
	htsize		fixed bin (17);		/* size of hash table */


dcl	(addr, addrel, bin, bit, hbound, mod, substr, unspec)
			builtin;

dcl	1 symht		based aligned,		/* def symbol hash table */
	  2 size		fixed bin,
	  2 table		(0 refer (symht.size)),
	  ( 3 defp	bit (18),
	    3 pad		bit (18)
	    )		unal;

dcl	1 seght		based aligned,		/* segment name def hash table */
	  2 size		fixed bin,
	  2 table		(0 refer (seght.size)),
	  ( 3 defp	bit (18),
	    3 headp	bit (18)
	    )		unal;

dcl	1 auxt		based aligned,		/* auxiliary symbol table */
	  2 size		fixed bin,
	  2 table		(0 refer (auxt.size)),
	  ( 3 defp	bit (18),
	    3 headp	bit (18)
	    )		unal;

dcl	1 accname		based aligned,
	( 2 lth		fixed bin (8),
	  2 chr		char (0 refer (accname.lth))
	  )		unal;

dcl	1 bound_seg_comp	aligned like comp auto;	/* dummy comp table entry for bound segment */

dcl	1 bound_seg_seg	aligned like seg auto;	/* dummy seg table entry for bound segment */

dcl	1 symbol_table_is	aligned like is auto;	/* dummy is entry for symbol_table */

dcl	1 bind_map_is	aligned like is auto;	/* dummy insym entry for bind_map */


%include bindext;


%include comptbl;


%include bndtbl;


%include insym;


%include definition;


/* first we generate a dummy component entry for the bound segment	*/
/* table as well as dummy insym entries for the bind map and symbol	*/
/* table.						*/


	ctp = bx_$ctp;				/* Get pointer to component table. */

	unspec (bound_seg_comp) = "0"b;		/* Prepare to make dummy comp table entry. */
	defrel = bx_$tdefp -> definition.forward;	/* Get rel ptr to seg def for bound segment. */
	bound_seg_comp.defthread = bin (defrel, 18);	/* Place in dummy comp table entry. */

	unspec (bound_seg_seg) = "0"b;		/* Prepare to make dummy segname table entry. */
	bound_seg_seg.comp = addr (bound_seg_comp);
	defp = addrel (bx_$tdefp, defrel);		/* Get pointer to definition. */
	bound_seg_seg.defrel = defrel;
	namep = addrel (bx_$tdefp, defp -> definition.symbol);
						/* Get pointer to name. */
	unspec (substr (bound_seg_seg.name, 1, namep -> accname.lth + 1)) = unspec (namep -> accname);
	bound_seg_seg.lng = namep -> accname.lth + 1;	/* Copy the segment name. */

	unspec (symbol_table_is) = "0"b;		/* Prepare dummy insym entry for symbol_table. */
	defrel = defp -> definition.forward;		/* Get rel ptr to def for symbol_table. */
	symbol_table_is.defrel = defrel;
	defp = addrel (bx_$tdefp, defrel);
	namep = addrel (bx_$tdefp, defp -> definition.symbol);
	unspec (substr (symbol_table_is.symbol, 1, namep -> accname.lth + 1)) = unspec (namep -> accname);
	symbol_table_is.lng = namep -> accname.lth + 1;	/* Copy the symbol name. */

	unspec (bind_map_is) = "0"b;			/* Prepare dummy insym entry for bind_map. */
	defrel = defp -> definition.forward;		/* Get rel ptr to def for bind_map. */
	bind_map_is.defrel = defrel;
	defp = addrel (bx_$tdefp, defrel);
	namep = addrel (bx_$tdefp, defp -> definition.symbol);
	unspec (substr (bind_map_is.symbol, 1, namep -> accname.lth + 1)) = unspec (namep -> accname);
	bind_map_is.lng = namep -> accname.lth + 1;	/* Copy the symbol name. */


/* now we scan through the component table and check each insym	*/
/* to see if it is a duplicate.  If it is a duplicate, then create	*/
/* a duplicate table for the symbol if necessary and then add the	*/
/* duplicate to the table.					*/

	axtp = addrel (bx_$tdefp, bx_$curdeflng);	/* Get pointer to end of defs. */
	dupn = 0;					/* Initialize duplicate counters. */

	cx = 0;					/* Start with zeroth component. */
	ctep = addr (bound_seg_comp);			/* Point to fake comp for bound segment. */
	sp = addr (bind_map_is);			/* Point to fake insym entry for bind_map. */
	call dup_search;				/* Search for duplicate name. */
	sp = addr (symbol_table_is);			/* Point to fake insym entry for symbol_table. */
	call dup_search;				/* Search for duplicate name. */

	do cx = 1 to bx_$ncomp;			/* Iterate through components. */
	     ctep = comp_tbl (cx);			/* Get pointer to component table entry. */
	     ip = comp.insymentp;			/* Get pointer to syms for this component. */

	     do sx = 1 to ip -> insym.n_insyms - 1;	/* Look through the symbols. */
		sp = addr (ip -> insym.entry (sx));	/* Get pointer to symbol table entry. */

		if ^(sp -> is.ignore | sp -> is.delete | sp -> is.duplicate)
		then call dup_search;		/* Search for duplicate name. */
	     end;
	end;


/* now we take all of the definitions that are not duplicates and	*/
/* hash them into the definition has table.			*/

	sytp = axtp;				/* Get pointer for sym hash table. */

	bx_$tdefp -> definition.value = bit (bx_$curdeflng);
						/* Set pointer to hash table. */

	htsize = hlen (bx_$nsymdefs + 2);		/* Compute size of hash table. */
	sytp -> symht.size = htsize;			/* Set size of hash table. */

	sp = addr (bind_map_is);			/* Point to fake insym entry for bind_map. */
	call hash_sym;				/* Make hash table entry for it. */

	sp = addr (symbol_table_is);			/* Point to fake insym entry for symbol_table. */
	call hash_sym;				/* Make hash table entry for it. */

	do cx = 1 to bx_$ncomp;			/* Through the components again. */
	     ctep = comp_tbl (cx);
	     ip = comp.insymentp;

	     do sx = 1 to ip -> insym.n_insyms - 1;	/* Through the symbols again. */
		sp = addr (ip -> insym.entry (sx));

		if ^(sp -> is.ignore | sp -> is.delete | sp -> is.duplicate)
		then call hash_sym;			/* Enter symbol in hash table, if desired. */
	     end;
	end;

	bx_$curdeflng = bx_$curdeflng + sytp -> symht.size + 1;
						/* Increase size of defs. */


/* if there were no duplicates, we return now, otherwise we create	*/
/* a component hash table from the segment name table.		*/

	if dupn = 0
	then /* If no duplicated names ... */
	     return;				/* No need for seg name hash table. */

	sgtp = addrel (bx_$tdefp, bx_$curdeflng);	/* Get pointer to seg name hash table. */

	htsize = hlen (bx_$nsegdefs + 1);		/* Compute size of seg name hash table. */
	sgtp -> seght.size = htsize;			/* Fill in size of table. */

	sp = addr (bound_seg_seg);			/* Point to fake seg entry for bound segment. */
	call hash_seg;				/* Insert in hash table. */

	sntp = bx_$sntp;				/* Get pointer to segment name table. */
	do sx = 1 to sntp -> snt.n_names;		/* Go through the segment name table. */
	     sp = addr (sntp -> snt.entry (sx));	/* Get pointer to segment name table entry. */

	     if sp -> seg.defrel
	     then /* If this is a real name ... */
		call hash_seg;			/* Insert seg name in hash table. */
	end;

	bx_$curdeflng = bx_$curdeflng + sgtp -> seght.size + 1;
						/* Compute final size of defs. */


	return;					/* All finished. */


dup_search:
     proc;

/**********************************************************************/
/*							*/
/*	Name:	dup_search				*/
/*	Input:	cx, sp					*/
/*	Function:	given a component table index (cx) and a pointer	*/
/*		to an insym entry (sp), scan all of the later	*/
/*		components insym lists for another definition	*/
/*		with the same name.  If duplicate definitions are	*/
/*		found, create a duplicate table, add all of the	*/
/*		duplicates to it, flag that the duplicates are	*/
/*		duplicates, and change the rel_ptr in the insym	*/
/*		for the original to point to the duplicate table	*/
/*		rather than the definition itself.		*/
/*	Output:	duplicate table, dupn			*/
/*							*/
/**********************************************************************/

	axx = 0;					/* Initialize auxiliary table index. */
	do cx1 = cx + 1 to bx_$ncomp;			/* Look at the rest of the components. */
	     ctep1 = comp_tbl (cx1);
	     ip1 = ctep1 -> comp.insymentp;

	     do sx1 = 1 to ip1 -> insym.n_insyms - 1;
		sp1 = addr (ip1 -> insym.entry (sx1));

		if ^(sp1 -> is.ignore | sp1 -> is.delete)
		then if substr (sp -> is.symbol, 1, sp -> is.lng) = substr (sp1 -> is.symbol, 1, sp1 -> is.lng)
		     then do;
			if axx = 0
			then do;			/* If this is first occurrence of duplicate ... */
			     axx = 1;		/* Initialize index. */
			     axtp -> auxt.defp (1) = sp -> is.defrel;
						/* Fill in first entry. */
			     axtp -> auxt.headp (1) = bit (bin (comp.defthread, 18));
			     sp -> is.defrel = bit (bx_$curdeflng, 18);
			end;			/* Save rel ptr to aux table instead of def. */

			axx = axx + 1;		/* Step index. */
			axtp -> auxt.defp (axx) = sp1 -> is.defrel;
						/* Fill in another entry. */
			axtp -> auxt.headp (axx) = bit (bin (ctep1 -> comp.defthread, 18));
			sp1 -> is.duplicate = "1"b;	/* Indicate symbol was a duplicate. */
		     end;


	     end;
	end;

	if axx ^= 0
	then do;					/* If we found a dup ... */
	     axtp -> auxt.size = axx;			/* Fill in size of aux table. */
	     bx_$curdeflng = bx_$curdeflng + axx + 1;	/* Increase length of defs. */
	     axtp = addrel (axtp, axx + 1);		/* Get new aux table pointer. */
	     dupn = dupn + 1;			/* Count another duplicated name. */
	end;


     end dup_search;


hash_sym:
     proc;


/**********************************************************************/
/*							*/
/*	Name:	hash_sym					*/
/*	Input:	sp					*/
/*	Function:	inserts the relp for the specified definition	*/
/*		into the definition hash table.  The entry is	*/
/*		inserted into the first empty slot at of after	*/
/*		the index calculated by the hash function.	*/
/*	Output:	none					*/
/*							*/
/**********************************************************************/

	namep = addr (sp -> is.symbol);		/* Get pointer to first word of ACC string. */
	symx = hash ();				/* Hash the name. */

	do while (sytp -> symht.defp (symx));		/* Find empty slot in hash table. */
	     symx = mod (symx, htsize) + 1;
	end;

	sytp -> symht.defp (symx) = sp -> is.defrel;	/* Set pointer in hash table entry. */



     end hash_sym;


hash_seg:
     proc;

/**********************************************************************/
/*							*/
/*	Name:	hash_seg					*/
/*	Input:	sp					*/
/*	Function:	given a pointer to an insym entry, inserts a relp	*/
/*		for that definition into the first empty slot in	*/
/*		the component hash table at of after the index	*/
/*		generated by the hashing function.		*/
/*	Output:	none					*/
/*							*/
/**********************************************************************/

	namep = addr (sp -> seg.name);
	segx = hash ();

	do while (sgtp -> seght.defp (segx));		/* Find an empty slot in the hash table. */
	     segx = mod (segx, htsize) + 1;
	end;

	sgtp -> seght.defp (segx) = sp -> seg.defrel;	/* Set def pointer in hash table entry. */
	ctep = sp -> seg.comp;			/* Get address of component table entry. */
	sgtp -> seght.headp (segx) = bit (bin (ctep -> comp.defthread, 18));
						/* Set pointer to first segname def. */


     end hash_seg;


hash:
     proc returns (fixed bin);

/**********************************************************************/
/*							*/
/*	Name:	hash					*/
/*	Input:	namep, htsize				*/
/*	Function:	given a pointer to an acc string, calculates the	*/
/*		hash function on it and returns the index.  The	*/
/*		hash function used is the remainder of the first	*/
/*		word of the acc string (count and first three	*/
/*		characters) divided by the size of the hash table	*/
/*	Output:	hash_index				*/
/*							*/
/**********************************************************************/

dcl	word		fixed bin (35) based;	/* first word of name */


	return (mod (namep -> word, htsize) + 1);


     end hash;



hlen:
     proc (s) returns (fixed bin);

/**********************************************************************/
/*							*/
/*	Name:	hlen					*/
/*	Input:	s					*/
/*	Function:	given the number of definitions to be placed into	*/
/*		a hash table, returns the size of the hash table	*/
/*		The hash table is sized such that it is not more	*/
/*		than 80% full.				*/
/*	Output:	htsize					*/
/*							*/
/**********************************************************************/

dcl	s		fixed bin;		/* required hash buckets */

dcl	s1		fixed bin,		/* minimum hash table size desired */
	i		fixed bin;		/* iteration variable */

dcl	sizes		(11) fixed bin static options (constant)
			init (13, 27, 53, 89, 157, 307, 503, 733, 1009, 1451, 2003);


	s1 = s * 1.25e0;				/* Allow for 20% of buckets to be empty. */
	do i = 1 to hbound (sizes, 1);		/* Pick an appropriate sizes. */
	     if s1 <= sizes (i)
	     then return (sizes (i));
	end;
	return (s1);				/* Default for very large hash tables. */


     end hlen;




     end;
