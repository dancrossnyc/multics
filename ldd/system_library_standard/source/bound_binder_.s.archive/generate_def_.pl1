/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(85-09-24,Elhard), approve(85-09-24,MCR7198),
     audit(86-06-30,Weaver), install(86-07-16,MR12.0-1094):
     Improved documentation, changed errname to use the caller-supplied name
     instead of  "binder_", deleted support for obsolete non-standard objects.
                                                   END HISTORY COMMENTS */

/* format: style3,^indnoniterdo */
%;
/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1978 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/**********************************************************************/
/*							*/
/*	Name:	generate_def_				*/
/*	Input:	compent_ptr, definition_ptr			*/
/*	Function:	given a pointer to the current component_table	*/
/*		entry (compent_ptr) and a pointer to an insym	*/
/*		entry (definition_ptr), regenerates the specfied	*/
/*		definition in the definition section of the new	*/
/*		bound object_segment and threads it in place. The	*/
/*		references are relocated and any links referenced	*/
/*		by the definitions (as in pascal exported vars)	*/
/*		are generated.				*/
/*	Ouptut:	none					*/
/*							*/
/**********************************************************************/


/* Designed and initially coded by Michael J. Spier, October 6, 1970	*/
/* modified  June, july 1975 by M. Weaver for separate static */
/* modified Sept 1978 by David Spector for hash-coding strm */
/* modified Sept 82 by JMAthane for PASCAL exportable variables definitions */

generate_def_:
     procedure (compent_ptr, definition_ptr);

declare	(compent_ptr, definition_ptr)
			pointer;

/* DECLARATION OF CONSTANTS */

declare	lda_pr0_instr	bit (18) static options (constant) init ("010011101001010000"b);

/* DECLARATION OF EXTERNAL SYMBOLS */

declare	com_err_		external entry options (variable);
declare	strm_hash_$lookup	external entry (char (*), fixed bin (17));
declare	strm_hash_$make_entry
			external entry (char (*), fixed bin (17));
declare	int_link_		entry (ptr) returns (bit (1));
declare	decode_link_	entry (ptr) returns (bit (1));
declare	ext_link_		entry (ptr);

/* DECLARATION OF INTERNAL STATIC VARIABLES */

declare	(defbase, linkbase) pointer internal static;
declare	inlink		fixed bin internal static;
declare	errname		char (16) aligned internal static;

/* DECLARATION OF AUTOMATIC STORAGE VARIABLES */

declare	(i, linkoffset)	fixed bin;
declare	defoffset		fixed bin (18);
declare	(p, ip, dp, sp, lp, dsp)
			pointer;
dcl	1 my_ext		aligned like external_ref;

dcl	generate_ext_link	bit (1) init ("0"b);

/* DECLARATION OF BUILTIN FUNCTIONS */

declare	(addr, addrel, bin, bit, divide, fixed, substr)
			builtin;

/* DECLARATION OF BASED STRUCTURES */

declare	1 new_def		aligned based (dp),
	  2 forward_relp	unal fixed bin (18) unsigned,
	  2 backward_relp	unal fixed bin (18) unsigned,
	  2 thing_relp	unal fixed bin (18) unsigned,
	  2 flags		unal like definition_flags,
	  2 class		unal fixed bin (3) unsigned,
	  2 name_relp	unal fixed bin (18) unsigned,
	  2 segname_relp	unal fixed bin (18) unsigned,
	  2 n_args	unal fixed bin (18) unsigned,
	  2 descriptor_relp (0 refer (new_def.n_args)) unal fixed bin (18) unsigned;
declare	1 last_def	aligned like new_def based (lp);
declare	1 insyme		aligned like is based (sp);

declare	descr_list	(1000) unal fixed bin (18) unsigned based (dsp);
						/* based on descriptor ptrs in def */

declare	1 dum_instr	aligned,
	  2 register	bit (3) unaligned,
	  2 rel_address	bit (15) unaligned,
	  2 op_code	bit (18) unaligned;
declare	acc_string_overlay	char (257) aligned based;

%page;
	ctp = bx_$ctp;
	strmp = bx_$strmp;
	ctep = compent_ptr;				/* copy pointer to current component table entry */
	sp = definition_ptr;			/* copy pointer to definition entry */
	if insyme.regenerated = "1"b
	then return;

	ip = comp.insymentp;			/* pointer to component's definitions */

	defoffset = bx_$curdeflng;			/* get current size of definition section */
	linkoffset = bx_$tlinklng;			/* get current length of new linkage section */

	dp = addrel (defbase, defoffset);		/* pointer to location where new def will be generated */
	if comp.defblockp = "0"b
	then do;
	     comp.defblockp, comp.current_def = bit (bin (defoffset, 18), 18);
						/* remember current definition */
	end;
	else do;
	     lp = addrel (defbase, comp.current_def);	/* pointer to last def  */
	     new_def.backward_relp = fixed (comp.current_def, 18);
						/* backwards pointer */
	     last_def.forward_relp = defoffset;		/* thread defs together */
	     comp.current_def = bit (bin (defoffset, 18), 18);
						/* remember last def */
	end;
	insyme.defrel = comp.current_def;
	new_def.thing_relp = fixed (insyme.value, 18);	/* copy value of definition */
	new_def.class = fixed (insyme.class, 18);	/* class of definition */
	new_def.flags.new = "1"b;			/* and set new format flag */
	defoffset = defoffset + 3;			/* grow def section by 3 words */

/* now copy descriptor ptrs, if they exist for this entry */
/* if ^insyme.has_descr then descriptors may be invalid, but copy them anyway */

	if insyme.nargs > 0
	then do;					/* entry has descriptors */
	     new_def.flags.argcount = "1"b;		/* indicate we have arg count */
	     if insyme.has_descr
	     then new_def.flags.descriptors = "1"b;	/* have valid descriptors */
	     new_def.n_args = insyme.nargs;
	     dsp = insyme.descr_ptr;			/* initialize for better referencing */
	     do i = 1 to insyme.nargs;		/* copy and relocate ptrs */
		new_def.descriptor_relp (i) = descr_list (i) + comp.crelt;
	     end;
	     defoffset = defoffset + divide (insyme.nargs + 2, 2, 17, 0);
						/* grow def section by length of array */
	end;

	if bx_$standard = 1
	then if insyme.retain_flag
	     then new_def.flags.retain = "1"b;		/* turn on only if on before */

/* now lookup generated strings to see if one can be reused */

	call strm_hash_$lookup (substr (insyme.symbol, 1, insyme.lng), i);
	if i ^= 0
	then do;					/* string is already in strm */
	     new_def.name_relp = fixed (strm.entry (i).map, 18);
	     goto adjust_value;
	end;

/* string not found, generate string and put into map */

	i, strm.nstr = strm.nstr + 1;
	if strm.nstr > strm.max_size
	then do;
	     call com_err_ (0, errname, "stringmap table overflow; please contact maintenance");
	     strm.nstr = 1;
	     bx_$fatal_error = 1;
	end;
	new_def.name_relp = defoffset;		/* pointer to newly generated symbol string */
	strm.entry (i).map = bit (bin (defoffset, 18), 18);
	p = addrel (defbase, defoffset);		/* pointer to new string */
	substr (p -> acc_string_overlay, 1, insyme.lng) = substr (insyme.symbol, 1, insyme.lng);
	defoffset = defoffset + divide (insyme.lng + 3, 4, 17, 0);
						/* grow definition section */

	call strm_hash_$make_entry (substr (insyme.symbol, 1, insyme.lng), i);

/* now compute the value of the new definition */

adjust_value:
	bx_$nsymdefs = bx_$nsymdefs + 1;

	if new_def.class = 0
	then /* simple text reference */
	     do;
	     new_def.thing_relp = new_def.thing_relp + comp.crelt;

	     if comp.standard_object = 1
	     then /* have to do some extra fiddling here */
		do;
		if insyme.entrypoint
		then new_def.flags.entry = "1"b;	/* standard entries are only text */
		if (insyme.ignore) | (insyme.delete)
		then do;
		     new_def.flags.ignore = "1"b;	/* need this for name but don't want linker to find it */
		     bx_$nsymdefs = bx_$nsymdefs - 1;
		end;
	     end;
	     goto return;
	end;
	else if new_def.class = 2
	then /* reference relative to symbol section */
	     do;
	     new_def.thing_relp = new_def.thing_relp + comp.crels;
						/* get value of symbol */
	     goto return;
	end;
	else if new_def.class = 1
	then do;
	     if new_def.thing_relp < comp.clngi + 8
	     then do;				/* this is an ALM segdef located in the linkage section */
		new_def.thing_relp = new_def.thing_relp + comp.creli;
		goto return;
	     end;
	     else do;
		if comp.compiler = "PASCAL  "
		then do;

/* We have a definition for a link, i.e. for a Pascal exportable variable which
   is represented by a link.  We must regenerate the link.  To do this,
   we fabricate an "instruction" that references the link along with the other
   link info.  The link may indirect through another link that may be in
   another component.  To handle this case, we must first call int_link_ to 
   regenerate the correct target for this definition's link. */

		     dum_instr.rel_address = bit (bin (new_def.thing_relp, 15), 15);
		     dum_instr.register = "000"b;
		     dum_instr.op_code = lda_pr0_instr; /* make instruction = lda 0|nn,* */
		     my_ext.ref_ptr = addr (dum_instr);
		     my_ext.dont_prelink = "0"b;
		     my_ext.compent_ptr = ctep;
		     my_ext.loffset = new_def.thing_relp;
		     my_ext.side = "lhe";
		     my_ext.relinfo = "link15";
		     my_ext.dont_relocate = "0"b;
		     if decode_link_ (addr (my_ext)) = "1"b
		     then go to error_skip;
		     generate_ext_link = "1"b;
		     go to return;
		end;
	     end;
	end;
	else if new_def.class = 4
	then do;					/* segdef in separate static  */
	     if bx_$bound_sep_stat = 1
	     then i = 0;				/*  will still have separate static */
	     else do;				/* static will be in linkage section */
		new_def.class = 1;			/* change to  linkage */
		i = 8;				/* now static  will be further offset by linkage header */
	     end;
	     new_def.thing_relp = new_def.thing_relp + comp.creli + i;
	     goto return;
	end;
	call com_err_ (0, errname, "definition ^a in file ^a has illegal class ^o",
	     substr (insyme.symbol, 2, insyme.lng - 1), comp.filename, new_def.class);

error_skip:
	bx_$fatal_error = 1;

return:
	insyme.regenerated = "1"b;			/* indicate that this def has been regenerated */
	if ^new_def.flags.ignore
	then ip -> insym.retained = "1"b;		/* indicate that a def was retained for this component */
	bx_$curdeflng = defoffset;			/* update length of new definition section */
	bx_$tlinklng = linkoffset;			/* update length of new linkage section */

	if generate_ext_link
	then do;
	     if int_link_ (addr (my_ext)) = "1"b
	     then do;
		my_ext.segname = "*link";
		my_ext.slng = 6;
		my_ext.elng = 0;
		my_ext.code15, my_ext.type = "000000000000000001"b;
		my_ext.expr = "000"b || dum_instr.rel_address;
	     end;
	     call ext_link_ (addr (my_ext));
	     new_def.thing_relp = fixed (dum_instr.rel_address, 15);
	end;

	return;


%page;


init:
     entry;

	defbase = bx_$tdefp;			/* pointer to base of new definition section */
	linkbase = bx_$tlinkp;			/* pointer to base of new linkage section */
	inlink = 0;				/* reset pointer to inbound link */
	if bx_$debug = 1
	then errname = "generate_def_";
	else errname = bx_$caller;

	return;

%page;
%include extref;
%page;
%include bindext;
%page;
%include comptbl;
%page;
%include bndtbl;
%page;
%include insym;
%page;
%include definition_dcls;

     end generate_def_;
