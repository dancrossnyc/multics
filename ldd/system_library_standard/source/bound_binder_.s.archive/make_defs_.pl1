/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(85-09-24,Elhard), approve(85-09-24,MCR7198),
     audit(86-06-30,Weaver), install(86-07-16,MR12.0-1094):
     Improved documentation and readablilty, changed errname to use caller
     supplied name instead of "binder_".
                                                   END HISTORY COMMENTS */


/* format: style3,^indnoniterdo */
%;
/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1978 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */


/* Designed and initially coded by Michael J. Spier, October 6, 1970	*/
/* Modified Sept 1978 by David Spector for hash-coding strm */

make_defs_:
     procedure;


/* DECLARATION OF EXTERNAL SYMBOLS */

declare	com_err_		external entry options (variable);
declare	generate_def_	external entry (pointer, pointer);
declare	hash_defs_	external entry;
declare	strm_hash_$make_entry
			external entry (char (*), fixed bin (17));

/* DECLARATION OF INTERNAL STATIC VARIABLES */

declare	(defbase, linkbase, last_def, last_segname)
			pointer internal static;
declare	errname		char (16) aligned internal static;
declare	last_def_rel	fixed bin aligned internal static;

/* DECLARATION OF AUTOMATIC STORAGE VARIABLES */

declare	(i, j, ndefs)	fixed bin;
declare	(ip, sp)		pointer;
declare	(defblock_head, segblock_head, rel_ptr)
			fixed bin aligned;
declare	temp_name		char (32) varying;
declare	newignore		bit (1) aligned;

/* DECLARATION OF BUILTIN FUNCTIONS */

declare	(addr, addrel, bin, bit, divide, fixed, length, null, rtrim, substr)
			builtin;

/* DECLARATION OF BASED VARIABLES */

declare	acc_string_overlay	char (acc_string.count + 1) based (acc_string_ptr);
declare	01 last_definition	aligned like definition based (last_def);

/*  */

%include bindext;

/*  */

%include comptbl;

/*  */

%include bndtbl;

/*  */

%include insym;

/*  */

%include definition_dcls;

/*  */

open_section:
     entry;

/**********************************************************************/
/*							*/
/*	Name:	make_defs_$open_section			*/
/*	Input:	none					*/
/*	Function:	initializes the definition section of the new	*/
/*		bound object segment and creates the standard	*/
/*		definitions for the bound segment.		*/
/*	Output:	none					*/
/*							*/
/**********************************************************************/

	ctp = bx_$ctp;
	strmp = bx_$strmp;
	errname = bx_$caller;
	if bx_$debug = 1
	then errname = "make_defs_";
	last_def, defbase = bx_$tdefp;		/* pointer to base of new definition section */
	linkbase = bx_$tlinkp;			/* pointer to base of new linkage section */
	newignore = "0"b;				/* defs by this entry not ignored */

/* generate dummy def for standard object */

	def_ptr = defbase;
	definition.forward_relp = 2;
	definition.flags.new = "1"b;
	definition.flags.ignore = "1"b;
	bx_$curdeflng = 2;				/* adjust for dummy def */
	last_def = addrel (last_def, 2);		/* have reinitialized everything necessary */


/* Make a definition block for the new bound segment itself */

	last_segname = null;			/* indicate initialization */
	last_def_rel,				/* initialize threads */
	     segblock_head = bx_$curdeflng;

	temp_name = rtrim (bx_$bound_segname);
	call fabricate_def (temp_name, CLASS_SEGNAME, 0);

	last_definition.segname_relp,			/* pointer to def block */
	     last_definition.forward_relp = bx_$curdeflng;
	last_segname = last_def;			/* remember segname thread  */
	call fabricate_def ("symbol_table", CLASS_SYMBOL, 0);
						/* fabricate definitions for bound segment */
	call fabricate_def ("bind_map", CLASS_SYMBOL, 0);
	bx_$bindmap_def = last_def;			/* remember pointer to bindmap definition */

	bx_$curdeflng = bx_$curdeflng + 1;		/* grow def section for the zero word */

	return;




close_section:
     entry;

/**********************************************************************/
/*							*/
/*	Name:	make_defs_$close_section			*/
/*	Input:	none					*/
/*	Function:	generates and threads in segname definitions for	*/
/*		definition blocks which have retained definitions	*/
/*		terminates the threads, and generates the hash	*/
/*		table					*/
/*	Output:	none					*/
/*							*/
/**********************************************************************/

	ctp = bx_$ctp;
	sntp = bx_$sntp;
	strmp = bx_$strmp;
	do i = 1 to bx_$ncomp;			/* scan all component segments */
	     ctep = comp_tbl (i);			/* pointer to component entry */
						/* rel pointer to head of def list */
	     defblock_head = fixed (comp.defblockp, 18);
	     if defblock_head ^= 0
	     then do;
		call check_ignore ();		/* if defblock ignored, ignore segnames */
						/* remember pointer to first segname */
		segblock_head = bx_$curdeflng;	/* remember defblock head */
		comp.defthread = bx_$curdeflng;
		do j = 1 to snt.n_names;		/* scan segname table */
		     sp = addr (snt.entry (j));	/* pointer to segname entry  */
		     if sp -> seg.comp = ctep		/* this is same component */
		     then do;
			temp_name = substr (sp -> seg.name, 2, sp -> seg.lng - 1);
			call fabricate_def (temp_name, CLASS_SEGNAME, 0);
			if ^newignore
			then do;
			     bx_$nsegdefs = bx_$nsegdefs + 1;
						/* Save rel_ptr to new def. */
			     sp -> seg.defrel = bit (bin (rel_ptr, 18), 18);
			end;
		     end;
		end;				/* pointer to current regular def */
		def_ptr = addrel (defbase, defblock_head);
						/* thread blocks together, forwards ... */
		last_definition.forward_relp = defblock_head;
						/* and backwards */
		definition.backward_relp = last_def_rel;

gen_blockpointer:
		definition.segname_relp = segblock_head;/* pointer to segblock block */
		if definition.forward_relp ^= 0
		then do;				/* follow thread */
		     def_ptr = addrel (defbase, definition.forward_relp);
		     goto gen_blockpointer;
		end;

/* end of list */
		last_def_rel = fixed (comp.current_def, 18);
		last_def = addrel (defbase, last_def_rel);
	     end;
	end;

	last_segname -> definition.thing_relp,		/* last thread points to zero word */
	     last_definition.forward_relp, addrel (defbase, 2) -> definition.backward_relp = bx_$curdeflng;
	if last_definition.class ^= CLASS_SEGNAME
	then last_definition.segname_relp = segblock_head;
	bx_$curdeflng = bx_$curdeflng + 1;		/* thread must end at physical end for checker */

	call hash_defs_;				/* Make defs hash table now. */

	return;






regenerate_block:
     entry (compent_ptr);

/**********************************************************************/
/*							*/
/*	Name:	make_defs_$regenerate_block			*/
/*	Input:	component_entry_pointer			*/
/*	Function:	given a pointer to a component table entry, scan	*/
/*		the insym table for that component and regenerate	*/
/*		any definitions which are to be retained.	*/
/*	Output:	none					*/
/*							*/
/**********************************************************************/

declare	compent_ptr	pointer;

	ctep = compent_ptr;				/* copy pointer to current component table entry */

	ip = comp.insymentp;			/* pointer to component's definitions */
	ndefs = ip -> insym.n_insyms;			/* get number of definitions for this component */

/* now generate definitions for all insyms which are to be retained */

	do i = 1 to ndefs - 1;			/* scan definition table for component */
	     sp = addr (ip -> insym.entry (i));		/* pointer to current definition */
	     if sp -> is.regenerated
	     then goto skip;			/* this definition has already been regenerated */
	     if ((sp -> is.delete | sp -> is.ignore) & ^sp -> is.retain_flag)
	     then go to skip;
	     call generate_def_ (ctep, sp);		/* generate this definition */
skip:
	end;


	return;


/*  */

check_ignore:
     proc;

/**********************************************************************/
/*							*/
/*	Name:	check_ignore				*/
/*	Input:	defblock_head				*/
/*	Function:	scans the definition block specified by defblock	*/
/*		head for non-ignored definition and sets the	*/
/*		newignore flag if all of the definitions in the	*/
/*		block are ignored.				*/
/*	Output:	newignore					*/
/*							*/
/**********************************************************************/

	newignore = "1"b;				/* ignore unless we find 1 nonignored def */
						/* find beginning of defblock */
	def_ptr = addrel (defbase, defblock_head);
test_ignore:
	if ^definition.flags.ignore
	then do;					/* at least 1 nonignored def */
	     newignore = "0"b;
	     return;				/* don't need to look further */
	end;

	if definition.forward_relp ^= 0
	then do;					/* follow thread */
	     def_ptr = addrel (defbase, definition.forward_relp);
	     go to test_ignore;
	end;

	return;
     end;


/**/


fabricate_def:
     procedure (defstring, newclass, newvalue);

/**********************************************************************/
/*							*/
/*	Name:	fabricate_def				*/
/*	Input:	defstring, newclass, newvalue			*/
/*	Function:	creates a definition in the definition section	*/
/*		with the name specified by defstring, the class	*/
/*		specified by newclass, and a thing_relp specified	*/
/*		by newvalue.				*/
/*							*/
/**********************************************************************/

declare	defstring		char (32) varying;
declare	newclass		fixed bin (3) unsigned;
declare	newvalue		fixed bin (18) unsigned;

declare	(i, defoffset)	fixed bin;
declare	dp		pointer;
declare	01 new_def	aligned like definition based (dp);

	defoffset = bx_$curdeflng;
	rel_ptr = defoffset;			/* relative offset of def */
	dp = addrel (defbase, rel_ptr);		/* absolute pointer to new def */
	new_def.class = newclass;
	new_def.thing_relp = newvalue;
	new_def.flags.new = "1"b;
	new_def.flags.ignore = newignore;
	defoffset = defoffset + 3;
	do i = 1 to strm.nstr;			/* lookup string in map */
						/* pointer to a generated string */
	     acc_string_ptr = addrel (defbase, strm.entry (i).map);
	     if defstring = acc_string.string
	     then do;
		new_def.name_relp = fixed (strm.entry (i).map, 18);
		goto string_generated;
	     end;
	end;
	i, strm.nstr = strm.nstr + 1;
	if strm.nstr > strm.max_size
	then do;
	     call com_err_ (0, errname, "stringmap table overflow; please contact maintenance.");
	     strm.nstr = 1;
	     bx_$fatal_error = 1;
	end;
	new_def.name_relp = defoffset;		/* pointer to newly generated symbol string */
	strm.entry (i).map = bit (bin (defoffset, 18), 18);
	acc_string_ptr = addrel (defbase, defoffset);
	acc_string.count = length (defstring);
	acc_string.string = defstring;
	defoffset = defoffset + divide (acc_string.count + 4, 4, 17, 0);

	call strm_hash_$make_entry (acc_string_overlay, i);

string_generated:
	bx_$curdeflng = defoffset;
	if last_segname = null
	then return;				/* only once for first definition */

	last_definition.forward_relp = rel_ptr;		/* thread entries together */
	new_def.backward_relp = last_def_rel;		/* backwards thread */
	last_def = dp;				/* remember this definition */
	last_def_rel = rel_ptr;			/* and its rel-ptr form */
	if newclass ^= CLASS_SEGNAME
	then /* not a segname */
	     do;					/* pointer to head of segname block */
	     new_def.segname_relp = segblock_head;
	     return;				/* and that's all */
	end;

/* thread of segname entries */
	last_segname -> definition.thing_relp = rel_ptr;
	new_def.segname_relp = defblock_head;		/* set up segname thread  */
	last_segname = dp;				/* remember this segname definition */

	return;

     end fabricate_def;

     end make_defs_;
