/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(85-09-24,Elhard), approve(85-09-24,MCR7198),
     audit(86-06-30,Weaver), install(86-07-16,MR12.0-1094):
     Changed errname to use the caller-supplied name instead of "binder_",
     improved documentation, removed non-functional support for obsolete
     "indirect" keyword.  "indirect" now functions the same as "retain".
  2) change(86-07-02,Elhard), approve(86-07-02,MCR7281),
     audit(86-07-23,JRGray), install(86-08-06,MR12.0-1119):
     Modified to improve error messages for multiple retain, delete, or no_link
     keywords given for a single input component.
                                                   END HISTORY COMMENTS */


/**********************************************************************/
/*							*/
/*	Name:	incorporate_options_			*/
/*	Input:	none					*/
/*	Function:	incorporates the options specified in the	*/
/*		bindfile into the component table, (symbol length	*/
/*		based on no_table specification), insym lists,	*/
/*		(indirect, retain, delete, or nolink specified),	*/
/*		and segname table, (synonym statements).  checks	*/
/*		are also made to insure that all the options are	*/
/*		processed and that none of the segnames in the	*/
/*		segname table match the bound objectname.  Checks	*/
/*		are also made to insure that all options are	*/
/*		consistent.				*/
/*	Output:	none.					*/
/*							*/
/**********************************************************************/

/* format: style3,^indnoniterdo */
incorporate_options_:
     procedure;

/* coded by Michael J. Spier 1970? */
/* modified 11/24/76 by M. Weaver to set comp.table_deleted */
/* Modified 01/14/81 W. Olin Sibert for new format of input structure */
/* Modified 85-02-11 by Dean Elhard to change errname to "bind"	*/
/* Modified 85-03-18 by Dean Elhard to clean up documentation and	*/
/*		    remove support for the indirect keyword.  It	*/
/*		    now behaves exactly as retain.		*/

/* DECLARATION OF EXTERNAL SYMBOLS */

declare	(com_err_, ioa_)	external entry options (variable);

/* DECLARATION OF INTERNAL STATIC VARIABLES */


/* DECLARATION OF AUTOMATIC STORAGE VARIABLES */

declare	(i, j, k, ndefs, nobjects)
			fixed bin;
declare	(p, inpp, areap, optp, ip, dp, sp)
			pointer;
declare	(g_nt, g_rt, g_in, g_dl, g_nl, op_sw, tab_sw)
			bit (1) aligned;
declare	opt_code		char (1) aligned;
declare	(errname, str1, str3)
			char (32) aligned;
declare	str2		char (256) aligned;
declare	newname		char (33) aligned;
declare	message		char (256) varying;

/* DECLARATION OF BUILTIN FUNCTIONS */

declare	(addr, addrel, bin, bit, index, null, substr)
			builtin;

/* DECLARATION OF BASED STRUCTURES */

declare	reset		bit (297) aligned based (p);
declare	acc_count		bit (9) aligned based (p);

/*  */

	ctp = bx_$ctp;
	inpp = bx_$inpp;
	sntp = bx_$sntp;
	areap = bx_$optp;

	if bx_$debug = 1
	then errname = "incorporate_options_";
	else errname = bx_$caller;

	addr (newname) -> reset = "0"b;		/* make acc string of bound segname */
	i = index (bx_$bound_segname, " ");
	if i = 0
	then i = 32;
	else i = i - 1;
	addr (newname) -> acc_count = bit (bin (i, 9), 9);
	substr (newname, 2, i) = substr (bx_$bound_segname, 1, i);

	nobjects = bx_$ncomp;			/* number of component objects */
	if areap = null
	then goto check_bound_name;


/* incorporate specified options into insym table */

	g_nt, g_rt, g_in, g_dl, g_nl = "0"b;

/* copy global options */

	if option.g_delete = "d"
	then g_dl = "1"b;
	else if option.g_indirect = "i"
	then g_rt = "1"b;
	else if option.g_retain = "r"
	then g_rt = "1"b;
	else if option.g_nolink = "l"
	then do;
	     g_rt, g_nl = "1"b;
	end;

	if option.g_notable = "t"
	then g_nt = "1"b;

	do i = 1 to nobjects;
	     ctep = comp_tbl (i);
	     if comp.ignore = 1
	     then goto next_object;
	     ip = comp.insymentp;			/* pointer to insym table of this component */
	     ndefs = ip -> insym.n_insyms - 1;		/* number of defs to scan */
	     op_sw = "0"b;				/* preset option flag */
	     optp = null;				/* reset pointer to option structure */
	     tab_sw = "0"b;				/* reset switch for keeping specific table */
	     if option.g_nolink = "l"
	     then ip -> insym.global_nolink = "1"b;
	     if inp.obj (i).option ^= "0"b
	     then do;				/* there is an option entry */
		optp = addrel (areap, inp.obj (i).option);
		if op.n_options > op.n_synonyms
		then op_sw = "1"b;			/* more than just synonyms */
		if op.no_link = "l"
		then ip -> insym.global_nolink = "1"b;
		if op.table = "t"
		then do;				/* want to keep table */
		     if comp.clngns = comp.clngss
		     then call ioa_ ("Warning: ^a has no symbol table, which bindfile wanted kept.", comp.filename);
		     else tab_sw = "1"b;		/* do not delete this table */
		end;
	     end;
	     if g_nt
	     then if ^tab_sw
		then do;				/* truncate any symbol table */
		     if comp.io_table ^= 0
		     then call ioa_ (
			     "Warning: symbol table not removed from ^a^/^-because it may be needed for data-directed I/O.",
			     comp.filename);
		     else do;
			if comp.clngns > comp.clngss
			then comp.table_deleted = 1;
			comp.clngns = comp.clngss;	/* use the shorter length */
		     end;
		end;
	     do j = 1 to ndefs;			/* scan insym table */
		dp = addr (ip -> insym.entry (j));	/* pointer to one definition */
		if op_sw = "1"b
		then do k = 2 to op.n_options;	/* lookup options */
			p = addr (op.opes (k));
			if p -> ope.symb ^= dp -> is.symbol
			then goto next_option;
			opt_code = p -> ope.code;
			if opt_code = "r"
			then dp -> is.retain = "1"b;
			else if opt_code = "i"
			then dp -> is.retain = "1"b;
			else if opt_code = "d"
			then dp -> is.delete = "1"b;
			else if opt_code = "l"
			then do;
			     dp -> is.retain, dp -> is.no_link = "1"b;
			end;
			else goto next_option;	/* skip synonyms */
			p -> ope.code = "*";	/* indicate that entry has been processed */
			goto next_def;
next_option:
		     end;
		if optp ^= null
		then do;				/* use "global" options */
		     if op.delete = "d"
		     then dp -> is.delete = "1"b;
		     else if op.indirect = "i"
		     then dp -> is.retain = "1"b;
		     else if op.retain = "r"
		     then dp -> is.retain = "1"b;
		     else if op.no_link = "l"
		     then do;
			dp -> is.retain, dp -> is.no_link = "1"b;
		     end;
		     else goto use_Global;
		end;
		else do;				/* use "Global" options */
use_Global:
		     dp -> is.retain = g_rt;
		     dp -> is.delete = g_dl;
		     dp -> is.no_link = g_nl;
		end;
next_def:
	     end;
next_object:
	end;

/* next process all synonyms */

	ndefs = snt.n_names;			/* size of segname table */
	do i = 1 to nobjects;
	     if inp.obj (i).option = "0"b
	     then goto try_next;			/* no option here */
	     optp = addrel (areap, inp.obj (i).option);	/* pointer to option table */
	     if op.n_options = 0
	     then goto try_next;			/* only global stuff */
	     p = addr (op.opes (1));			/* first string is the filename */
	     do j = 1 to snt.n_names;			/* scan segname table */
		if snt.entry (j).name = substr (p -> ope.symb, 1, 33)
		then goto filename_found;
	     end;
	     goto try_next;
filename_found:
	     ctep = snt.entry (j).comp;		/* pointer to file's component entry */
	     op.opes (1).code = "*";
	     do k = 2 to op.n_options;		/* now locate all synonyms for this file */
		p = addr (op.opes (k));
		if p -> ope.code ^= "s"
		then goto not_synonym;
		do j = 1 to ndefs;			/* compare with all segnames in table */
		     sp = addr (snt.entry (j));
		     if sp -> seg.name = substr (p -> ope.symb, 1, 33)
		     then do;
			if sp -> seg.comp = ctep
			then goto set_mark;		/* already in table */
			call com_err_ (0, errname, "segname ^a has been multiply declared in bindfile",
			     substr (sp -> seg.name, 2, sp -> seg.lng - 1));
			goto not_synonym;
		     end;
		end;
		ndefs = ndefs + 1;
		sp = addr (snt.entry (ndefs));	/* pointer to segname table entry */
		sp -> seg.name = p -> ope.symb;	/* copy string */
		sp -> seg.comp = ctep;		/* remember pointer to component table entry */
		sp -> seg.lng = p -> ope.lng;
set_mark:
		p -> ope.code = "*";		/* indicate that entry was processed */
not_synonym:
	     end;
try_next:
	end;
	snt.n_names = ndefs;			/* update size of segname table */
	if ndefs > snt.max_size
	then do;
	     call com_err_ (0, errname, "Segname table overflow; current limit = ^d.", snt.max_size);
	     bx_$fatal_error = 1;
	end;



/* Now check to see if all options were correctly processed */

	do i = 1 to nobjects;
	     if inp.obj (i).option ^= "0"b
	     then do;
		optp = addrel (areap, inp.obj (i).option);
		if op.n_options = 0
		then goto next_comp;
		p = addr (op.opes (1));
		str3 = substr (p -> ope.symb, 2, p -> ope.lng - 1);
		do j = 1 to op.n_options;
		     p = addr (op.opes (j));
		     if p -> ope.code ^= "*"
		     then do;
			message =
			     "'^a: ^a;' of bind-file entry ^a:^/Only one the 'retain', 'delete', or 'no_link', keywords may be specified."
			     ;
			opt_code = p -> ope.code;
			str2 = substr (p -> ope.symb, 2, p -> ope.lng - 1);
			if opt_code = "r"
			then str1 = "retain";
			else if opt_code = "i"
			then str1 = "indirect";
			else if opt_code = "d"
			then str1 = "delete";
			else if opt_code = "l"
			then str1 = "no_link";
			else if opt_code = "s"
			then do;
			     if j = 1
			     then str1 = "objectname";
			     else str1 = "synonym";
			     message = "'^a: ^a;' of bind-file entry ^a could not be processed";
			end;
			else str1 = "'" || opt_code || "'";
			call com_err_ (0, errname, message, str1, str2, str3);
			bx_$fatal_error = 1;
		     end;
		end;
	     end;
next_comp:
	end;



check_bound_name:
	do i = 1 to snt.n_names;			/* rescan segname table */
	     p = addr (snt.entry (i));
	     if p -> seg.name = newname
	     then do;
		if areap ^= null
		then /* have a bindfile */
		     call com_err_ (0, errname, "segname ^a has been multiply declared in bindfile",
			bx_$bound_segname);
		else call com_err_ (0, errname, "segname ^a has been multiply declared", bx_$bound_segname);
		bx_$fatal_error = 1;
	     end;
	end;


%page;
%include bindext;
%page;
%include comptbl;
%page;
%include bndtbl;
%page;
%include insym;
%page;
%include binder_input;
%page;
%include option;

     end incorporate_options_;
