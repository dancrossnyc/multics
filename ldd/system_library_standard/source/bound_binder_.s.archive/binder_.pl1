/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


binder_: proc (P_old_input_ptr);

/* *	BINDER_
   *
   *	This procedure, once the standard subroutine interface for the binder, is now
   *	just a writearound to call bind_ with the appropriately formatted new structure.
   *	It is slightly complicated by the fact that it must copy between two structures
   *	both named input, described in two different include files; this is done by
   *	including one in the outer procedure, and one in a begin block.
   *
   *	01/21/81, W. Olin Sibert
   *	10/3/84, M. Sharpe modified to use version 2 of binder_input.incl.pl1
   */

dcl  P_old_input_ptr pointer parameter;

dcl 1 old_input aligned like inp based (P_old_input_ptr);

dcl (p, inpp) pointer;				/* Silly pointers not declared by the include files */
dcl  time_now fixed bin (71);
dcl  (idx, old_idx) fixed bin;

dcl  inp_area area;

dcl  bind_ entry (pointer);
dcl  convert_date_to_binary_ entry (char (*), fixed bin (71), fixed bin (35));
dcl  get_system_free_area_ entry () returns (area);

dcl (clock, null, substr) builtin;

dcl cleanup condition;

%page;

	inpp = null ();
	on cleanup begin;
	     if inpp ^= null () then free inp in (inp_area);
	end;
	begin;					/* Copy all the information which is meaningful */

	inp_area = get_system_free_area_ ();
	NTOTAL = old_input.nupd+old_input.narc;
	NOBJ = old_input.nobj;
	allocate inp in (inp_area) set (inpp);



	     unspec (inp) = ""b;

	     inp.version = BINDER_INPUT_VERSION_2;
	     inp.caller_name = "binder_";		/* The "caller_name name", left as binder_ for compatibility */

	     inp.bound_seg_name = old_input.bound_seg_name;

	     inp.narc = old_input.narc;
	     inp.nupd = old_input.nupd;
	     inp.ntotal = old_input.narc + old_input.nupd;
	     inp.nobj = old_input.nobj;


	     inp.archive (*).path = "";		/* First, clean these all out, then copy the used entries */
	     inp.archive (*).real_path = "";	/* Most things were already initialized by the unspec, above */
	     inp.archive (*).ptr = null ();	/* All archive pointers will be null, sorry */

	     do idx = 1 to inp.ntotal;		/* Now, copy what we can from the old input */
		inp.archive (idx).real_path =
		     substr (old_input.archive_file (idx).name, 1, old_input.archive_file (idx).lng);
		inp.archive (idx).uid = old_input.archive_file (idx).uid;
		inp.archive (idx).dtm = old_input.archive_file (idx).dtm;
		end;

	     inp.bindfilep = old_input.bindfilep;
	     inp.bindfile_bc = old_input.bindfile_bc;
	     inp.bindfile_name = substr (old_input.bindfile_name, 1, old_input.bindfile_name_lng);
	     call convert_date_to_binary_ ((old_input.bindfile_date_up), inp.bindfile_time_up, (0));
	     call convert_date_to_binary_ ((old_input.bindfile_date_mod), inp.bindfile_time_mod, (0));
	     inp.bindfile_idx = 1;		/* All archive indices are faked to be one, even though */
						/* this may be incorrect, since the field must have some */
						/* value for certain error messages to work at all. */

	     inp.options.debug = old_input.debug;
	     inp.options.list_seg = old_input.list_seg;
	     inp.options.map_opt = old_input.map_opt;
	     inp.options.list_opt = old_input.list_opt;
	     inp.options.brief_opt = old_input.brief_opt;

	     inp.obj (*).base = null ();		/* Initialize certain values for all the input components */
	     inp.obj (*).filename = "";

	     time_now = clock ();

	     idx = 0;
	     do old_idx = 1 to old_input.nobj;		/* Copy all meaningful values for real components */
		if old_input.obj (old_idx).bitcount > 0 then do;
		     idx = idx + 1;
		     inp.obj (idx).filename = old_input.obj (old_idx).filename;
		     inp.obj (idx).base = old_input.obj (old_idx).base;
		     inp.obj (idx).bitcount = old_input.obj (old_idx).bitcount;
		     inp.obj (idx).option = old_input.obj (old_idx).option;
		     inp.obj (idx).flag = old_input.obj (old_idx).flag;

		     inp.obj (idx).archive_idx = 1;	/* To make messages work; same as for bindfile above */
		     inp.obj (idx).time_mod = time_now; /* This is as valid as we can make it. They will all be */
		     inp.obj (idx).time_up = time_now; /* the same, though they will all also be wrong */
		end;
	     end;

	     inp.nobj = idx;			/* reset after tossing out zero-length segs */
	     call bind_ (addr (inp));		/* Call the real interface */

%page;	%include binder_input;

	     end; 				/* Begin block */

	if inpp ^= null () then free inp in (inp_area);
	return;					/* All done */

%page;	%include input;

	end binder_;
