/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(85-09-24,Elhard), approve(85-09-24,MCR7198),
     audit(86-06-30,Weaver), install(86-07-16,MR12.0-1094):
     Improved documentation and readability, changed errnameto use the
     caller-supplied name instead of "binder_", changed to call
     regenerate_all_links_ after normal resolution to pick up any *system links
     not already regenerated, and to remove obsolete nonstandard object
     support.
                                                   END HISTORY COMMENTS */


/* format: style3,^indnoniterdo */
%;
/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/**********************************************************************/
/*							*/
/*	Name:	rebuild_object_				*/
/*	Input:	compent_ptr				*/
/*	Function:	given a pointer to the component table entry for	*/
/*		a given input object segment (compent_ptr),	*/
/*		relocate the text section for that component,	*/
/*		resolving all referenced links in the process,	*/
/*		regenerate any unreferenced *system links.	*/
/*		Then relocate the linkage section.  Finally, we	*/
/*		relocate any external references within the	*/
/*		symbol section by generating a repatch table	*/
/*		entry for it and then attempting to resolve the	*/
/*		link.					*/
/*	Output:	none.					*/
/*							*/
/**********************************************************************/

/* Designed and initially coded by Michael J. Spier, September 30, 1970 */
/* modified 75.06.20 by M. Weaver for separate static */
/* modified 77.10.21 by M. Weaver to regenerate links when there is no text */
/* modified Dec 1978 by David Spector to make repatch table automatically extensible */
/* Modified 01/15/81 W. Olin Sibert to remove red shifts */
/* Modified September 82 JMAthane to relocate links referenced by symbol tables */

rebuild_object_:
     procedure (compent_ptr);

declare	compent_ptr	pointer;



/* DECLARATION OF EXTERNAL ENTRIES */

declare	regenerate_all_links_
			external entry (pointer);
declare	decode_link_	external entry (pointer) returns (bit (1) aligned);
declare	get_relinfo_	external entry (pointer);
declare	get_relinfo_$init	external entry (pointer);
declare	ext_link_		external entry (pointer);
declare	generate_def_	external entry (pointer, pointer);
declare	int_link_		external entry (pointer) returns (bit (1) aligned);
declare	com_err_		external entry options (variable);
declare	temp_mgr_$allocate	ext entry (fixed bin);
declare	temp_mgr_$reserve	external entry (pointer);

/* DECLARATION OF INTERNAL STATIC VARIABLES */

declare	(textbase, defbase, intbase)
			pointer internal static initial (null);
declare	TRUE		bit (1) static options (constant) init ("1"b);
declare	FALSE		bit (1) static options (constant) init ("0"b);
declare	PR4		bit (3) static options (constant) init ("4"b3);
declare	LDA_INSTR		bit (9) static options (constant) init ("235"b3);
declare	INDIRECT_TM	bit (2) static options (constant) init ("01"b);
declare	INDIRECT_TD	bit (4) static options (constant) init (""b);

declare	SPECIAL_CASE	(4) bit (18) aligned static options (constant) init ("551"b3,
						/* stba */
			"552"b3,			/* stbq */
			"751"b3,			/* stca */
			"752"b3);			/* stcq */
declare	errname		char (16) aligned internal static;

/* DECLARATION OF AUTOMATIC STORAGE VARIABLES */

declare	(i, textoffset, intoffset, int_reloc_offset, symboffset, textend, val, lng, intlimit, relocate)
			fixed bin (18);
declare	(wordp, argp, extp, sp, p, intp)
			pointer;
declare	(textptr, defptr)	pointer;
declare	opcode		bit (18) aligned;

declare	1 ext		aligned like external_ref;	/* DECLARATION OF BUILTIN FUNCTIONS */

declare	(addr, addrel, bin, bit, fixed, hbound, null, size)
			builtin;

/* DECLARATION OF BASED STRUCTURES */

declare	1 word		aligned based (wordp),
	  2 lhe18		bit (18) unaligned,
	  2 rhe18		bit (18) unaligned;
declare	1 instr		aligned based,
	  2 lp		bit (3) unaligned,
	  2 lp_offset	bit (15) unaligned,
	  2 op_code	bit (9) unaligned,
	  2 op_code_extension
			bit (1) unaligned,
	  2 inhibit	bit (1) unaligned,
	  2 use_pr	bit (1) unaligned,
	  2 tm		bit (2) unaligned,
	  2 td		bit (4) unaligned;
declare	1 word_instr	aligned based (wordp) like instr;
declare	internal_static	(lng) fixed bin based (p);


/*  */
	ctp = bx_$ctp;
	ext.compent_ptr, ctep = compent_ptr;		/* copy argument into stack for efficiency */

	val = 0;					/* reset conversion variable */
	extp = addr (ext);				/* get address of external ref structure */



	call get_relinfo_$init (comp.crltp);		/* initialize relocation bit scanner */

	argp = addr (ext.offset);
	textoffset = comp.crelt;			/* get relocation value for text section */
	intoffset = comp.creli;			/* copy relocation value for internal static */
	symboffset = comp.crels;			/* copy relocation value for symbol section */
	textptr = addrel (textbase, textoffset);	/* compute pointer to text section */
	textend = comp.clngt;			/* and get length of section */
	int_reloc_offset = intoffset;
	if comp.separate_static = 0
	then intlimit = comp.clngi + 8;		/* offset of links within linkage sectioon */
	else do;
	     intlimit = 8;				/* sep static doesn't have relocation bits */
	     if bx_$bound_sep_stat = 0
	     then int_reloc_offset = int_reloc_offset + 8;/* in this case, refs to static are shifted to link */
	end;
	defptr = comp.cdefp;			/* copy pointer to definition section */

	ext.section = "text";			/* indicate referencing section */

	if comp.clngt = 0
	then /* no text to relocate; regenerate links anyway */
	     goto copy_unresolved_links;

	ext.dont_relocate = "0"b;

relocate_text:
	call get_relinfo_ (argp);			/* get next non-absolute relocation code */
	if ext.relinfo = "overflow"
	then goto copy_unresolved_links;
	if ext.offset >= textend
	then goto copy_unresolved_links;		/* end of text section */

/* First process text-to-text references  */

	ext.ref_ptr, wordp = addrel (textptr, ext.offset);/* compute pointer to specified word */
	if ext.side = "lhe"
	then relocate = fixed (word.lhe18, 18);
	else relocate = fixed (word.rhe18, 18);

	if ext.relinfo = "text    "
	then /* relocate by text relocation counter */
	     do;
	     relocate = relocate + textoffset;
	     goto restore_text;
	end;

/* Now process references to the linkage section */

	else if ext.relinfo = "lnk18   "
	then do;
	     ext.loffset = relocate;
	     if decode_link_ (extp) = "1"b
	     then goto error_skip;
	     call ext_link_ (extp);
	     goto relocate_text;
	end;

	else if ext.relinfo = "int18   "
	then do;
	     relocate = relocate + int_reloc_offset;
	     goto restore_text;
	end;

	else if ext.relinfo = "symb    "
	then do;
	     relocate = relocate + symboffset;
	     goto restore_text;
	end;

	else if ext.relinfo = "int15   "
	then do;
	     if ext.side ^= "lhe"
	     then do;
wrong_halfword:
		call com_err_ (0, errname, "relocation ^a illegal for right half of word ^o in text of ^a",
		     ext.relinfo, ext.offset, comp.filename);
		goto error_skip;
	     end;
	     relocate = fixed (word_instr.lp_offset, 15);
	     relocate = relocate + int_reloc_offset;
	     word_instr.lp_offset = bit (bin (relocate, 15), 15);
	     goto relocate_text;
	end;

	else if ext.relinfo = "lnk15   "
	then do;
	     if ext.side ^= "lhe"
	     then goto wrong_halfword;
	     if word_instr.use_pr ^= "1"b
	     then do;
illegal_link15:
		call com_err_ (0, errname, "illegal instruction format word ^o in text of ^a", ext.offset,
		     comp.filename);
		goto error_skip;
	     end;
	     opcode = word_instr.op_code;
	     do i = 1 to 4;
		if opcode = SPECIAL_CASE (i)
		then goto illegal_link15;
	     end;
	     if word_instr.tm = "10"b
	     then goto illegal_link15;		/* indirect and tally */
	     if word_instr.tm ^= "11"b
	     then /* indirect then index is OK */
		if word_instr.td ^= "0000"b
		then goto illegal_link15;
	     ext.loffset = fixed (word_instr.lp_offset, 15);
	     ext.dont_prelink = "0"b;
	     if decode_link_ (extp) = "1"b
	     then goto error_skip;
	     if ext.trap ^= "0"b
	     then if bin (ext.type, 18) ^= 6
		then ext.dont_prelink = "1"b;		/* trap is just offset of init struc for type 6 */
						/* if link target is found, trapping isn't necessary */

	     if int_link_ (extp) = "1"b
	     then goto relocate_text;
	     call ext_link_ (extp);
	     goto relocate_text;
	end;

	else if ext.relinfo = "negtext "
	then do;
	     relocate = -1;
	     if ext.side = "lhe"
	     then addr (relocate) -> word.rhe18 = word.lhe18;
	     else addr (relocate) -> word.rhe18 = word.rhe18;
	     relocate = relocate + textoffset;
	     goto restore_text;
	end;

	else if ext.relinfo = "def     "
	then do;
	     p = comp.insymentp;
	     do i = 1 to p -> insym.n_insyms - 1;	/* try to find def being referenced */
		if p -> entry (i).def_offset = relocate
		then do;				/* have matching def */
		     call generate_def_ (ctep, addr (p -> insym.entry (i)));
						/* this def has to be regenerated */
		     if ext.side = "lhe"
		     then word.lhe18 = comp.current_def;
		     else word.rhe18 = comp.current_def;
		     goto relocate_text;
		end;
	     end;
	     call com_err_ (0, errname, "def|^o referenced by text|^o of ^a^/^-is not the beginning of a definition",
		relocate, ext.offset, comp.filename);
	     goto error_skip;
	end;

	else if ext.relinfo = "selfrel "
	then goto relocate_text;			/* treat self-relative as absolute */

	call com_err_ (0, errname, "relocation ^a illegal for word ^o in text of ^a", ext.relinfo, ext.offset,
	     comp.filename);

error_skip:
	bx_$fatal_error = 1;
	goto relocate_text;

restore_text:
	if ext.side = "lhe"
	then word.lhe18 = addr (relocate) -> word.rhe18;
	else word.rhe18 = addr (relocate) -> word.rhe18;
	goto relocate_text;

copy_unresolved_links:
	call regenerate_all_links_ (ctep);		/* regenerate all links not already covered */

	lng = comp.clngi;				/* get length of internal static section */
	if lng = 0
	then goto relocate_symbol;			/* no internal static for this component */
	intp = addrel (bx_$tintp, intoffset);		/* pointer to new IS location */
	intp -> internal_static = comp.cstatp -> internal_static;
	if intlimit = 8
	then goto relocate_symbol;			/* there's nothing in linkage to relocate  */

	call get_relinfo_$init (comp.crllp);		/* initiate search of rel_link */
relocate_linkage:
	call get_relinfo_ (argp);
	if ext.relinfo = "overflow"
	then goto relocate_symbol;
	if ext.offset < 8
	then goto relocate_linkage;
	if ext.offset >= intlimit
	then goto relocate_symbol;
	wordp = addrel (intp, ext.offset - 8);		/* pointer to relocatable word */
	if ext.side = "lhe"
	then relocate = fixed (word.lhe18, 18);
	else relocate = fixed (word.rhe18, 18);

	if ext.relinfo = "text    "
	then do;
	     relocate = relocate + textoffset;
	     goto restore_linkage;
	end;

	else do;
	     call com_err_ (0, errname, "relocation ^a illegal for word ^o in linkage of ^a", ext.relinfo, ext.offset,
		comp.filename);
	     bx_$fatal_error = 1;
	     goto relocate_linkage;
	end;

restore_linkage:
	if ext.side = "lhe"
	then word.lhe18 = addr (relocate) -> word.rhe18;
	else word.rhe18 = addr (relocate) -> word.rhe18;
	goto relocate_linkage;


relocate_symbol:
	sp = comp.csymp;
	ext.section = "symb";
	call get_relinfo_$init (comp.crlsp);
	lng = comp.clngns;
	ext.offset = 0;
	do while (ext.offset <= lng);			/* relocate symbol tree */
	     call get_relinfo_ (argp);		/* get next relocation code */
	     if ext.relinfo = "overflow"
	     then goto done;
	     if ext.offset > lng
	     then goto done;			/* get_relinfo_ doesn't know about removal of symbtree */
	     val = 0;
	     if ext.relinfo ^= "lnk18   "
	     then goto skip_this;			/* check only for external refs */
	     wordp = addrel (sp, ext.offset);
	     if ext.side = "lhe"
	     then addr (val) -> word.rhe18 = word.lhe18;
	     else addr (val) -> word.rhe18 = word.rhe18;
	     rptp = bx_$last_rptp;
	     i, rpt.npt = rpt.npt + 1;		/* increment size of repatch table */
	     if i = hbound (rpt.entry, 1)
	     then do;				/* Allocate new chunk of repatch table */
		call temp_mgr_$allocate (size (rpt));
		p = bx_$freep;
		bx_$last_rptp = p;
		rpt.thread = p;
		call temp_mgr_$reserve (addrel (p, size (rpt)));
		p -> rpt.thread = null;
		p -> rpt.npt = 0;
	     end;
	     rptep = addr (rpt.entry (i));		/* pointer to new repatch table entry */
	     rpte.pbase = "s";			/* patching relative to symbol section */
	     rpte.code = "t";			/* patch with 0 relocation value */
	     rpte.poffset = bit (bin ((ext.offset + comp.crels), 18), 18);
	     rpte.halfword = ext.side;		/* get halfword to patch */

	     ext.loffset = val;			/* store offset of referenced link */
	     val = 0;
	     ext.ref_ptr = addr (val);
	     if decode_link_ (extp) = "1"b
	     then goto skip_this;

/* A symbol table reference to an external must always have a link
   associated with it.  But if the external reference is to another
   component, the link is converted to a type 1 link to the other component's
   text or linkage section.  This avoids having to retain segdefs and
   add segment names that aren't otherwise needed. */

/* create a "lda 4|nn,*" instruction */

	     addr (val) -> word.lhe18 = addr (val) -> word.rhe18;
	     addr (val) -> instr.lp = PR4;
	     addr (val) -> instr.op_code = LDA_INSTR;
	     addr (val) -> instr.op_code_extension = FALSE;
	     addr (val) -> instr.inhibit = FALSE;
	     addr (val) -> instr.use_pr = TRUE;
	     addr (val) -> instr.tm = INDIRECT_TM;
	     addr (val) -> instr.td = INDIRECT_TD;

	     ext.dont_prelink = "0"b;
	     ext.side = "lhe";
	     ext.relinfo = "link15";
	     ext.section = "text";
	     ext.offset = 0;
	     ext.dont_relocate = "0"b;
	     if int_link_ (extp) = "1"b
	     then do;
		if (addr (val) -> instr.tm = "00"b) & (addr (val) -> instr.td = "0000"b)
		     & (^addr (val) -> instr.use_pr)
		then do;				/* relocated to "lda nn" */
		     ext.segname = "*text";
		     ext.code15 = "0"b;
		end;
		else if (addr (val) -> instr.tm = "00"b) & (addr (val) -> instr.td = "0000"b)
		     & (addr (val) -> instr.use_pr) & (addr (val) -> instr.lp = PR4)
		then do;				/* relocated to "lda 4|nn" */
		     ext.segname = "*link";
		     ext.code15 = "000000000000000001"b;
		end;
		else goto external_link;
		ext.slng = 6;
		ext.elng = 0;
		ext.type = "000000000000000001"b;
		addr (val) -> instr.lp = "000"b;
		ext.expr = addr (val) -> word.lhe18;
		ext.link_tm, ext.link_td = "0"b;
	     end;
external_link:
	     ext.section = "symb";
	     addr (val) -> instr.lp = "000"b;
	     call ext_link_ (extp);			/* and regenerate the very same link */
	     if ext.side = "lhe"			/* and store in repatch table */
	     then rpte.pexpr = addr (val) -> word.lhe18;
	     else rpte.pexpr = addr (val) -> word.rhe18;

skip_this:
	end;

done:
	return;

init:
     entry;

	textbase = bx_$temp_bsegp;			/* pointer to base of new text section */
	defbase = bx_$tdefp;			/* pointer to base of new definition section */
	intbase = bx_$tintp;			/* pointer to base of new internal static section */
	if bx_$debug = 1
	then errname = "rebuild_object_";
	else errname = bx_$caller;

	return;

%page;
%include extref;
%page;
%include bindext;
%page;
%include comptbl;
%page;
%include insym;
%page;
%include bndtbl;

     end rebuild_object_;
