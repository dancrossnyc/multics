/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


print_error_message: pem: proc;

/* Modified 84-05-28 by SGH (UNCA) for active function. */
/* Modified 840724 by Charlie Spitzer. fix for MCR changes. */

/* Automatic */

dcl  active_fnc bit(1);		
dcl  af_return_arg_len fixed bin(21);	
dcl  af_return_arg_ptr ptr;
dcl  code fixed bin (35);
dcl  error_code fixed bin (35);
dcl  esw fixed bin;
dcl  long char (100) aligned;
dcl  n_args fixed bin;
dcl  short char (8) aligned;
dcl  tc fixed bin;
dcl  tp ptr;

/* Based */ 

dcl  af_return_arg char (af_return_arg_len) varying based (af_return_arg_ptr);
dcl  targ char (tc) based (tp);

/* Builtins */

dcl  rtrim builtin;

/* Static */

dcl  ME char (32) int static options (constant) init ("print_error_message");

/* External */

dcl  error_table_$bad_arg ext fixed bin (35);
dcl  error_table_$not_act_fnc ext fixed bin (35);

/* Procedures */

dcl  active_fnc_err_ entry options (variable);
dcl  argument_routine entry variable options (variable);
dcl  com_err_ entry options (variable);
dcl  convert_status_code_ entry (fixed bin (35), char (8) aligned, char (100) aligned);
dcl  cu_$af_arg_ptr entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl  cu_$af_return_arg entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl  cu_$arg_ptr ext entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  cv_dec_check_ entry (char (*), fixed bin (35)) returns (fixed bin (35));
dcl  cv_oct_check_ entry (char (*), fixed bin (35)) returns (fixed bin (35));
dcl  error_routine entry variable options (variable);
dcl  ioa_ entry options (variable);
dcl  ioa_$rsnnl entry options (variable);
dcl  requote_string_ entry (char(*)) returns(char(*));

	esw = 1;					/* indicates decimal short form */
	go to common;

peo:	entry;

	esw = 3;					/* indicates octal short form */
	go to common;

pel:	entry;

	esw = 2;					/* indicates decimal long form */
	go to common;

peol:	entry;

	esw = 4;					/* indicates octal long form */

common:
	call cu_$af_return_arg (n_args, af_return_arg_ptr, af_return_arg_len, code);
	if code = error_table_$not_act_fnc then do;
	     active_fnc = "0"b;
	     argument_routine = cu_$arg_ptr;
	     error_routine = com_err_;
	end;
	else do;
	     active_fnc = "1"b;
	     argument_routine = cu_$af_arg_ptr;
	     error_routine = active_fnc_err_;
	end;

	call argument_routine (1, tp, tc, code);
	if code ^= 0 | tc = 0 then do;
	     call error_routine (code, ME);
	     return;
	end;

	if esw < 3 then error_code = cv_dec_check_ (targ, code);
	else error_code = cv_oct_check_ (targ, code);	/* get correct code value */
	if code ^= 0 then do;
	     call error_routine (error_table_$bad_arg, ME, "^a", targ);
	     return;
	end;

	call convert_status_code_ (error_code, short, long);
	if active_fnc then
	     if esw = 1 | esw = 3 then call ioa_$rsnnl ("^a", af_return_arg, af_return_arg_len, requote_string_ (rtrim (short)));
	     else call ioa_$rsnnl ("^a", af_return_arg, af_return_arg_len, requote_string_ (rtrim (long)));
	else do;
	     if esw = 1 then call ioa_ ("^d = ^a", error_code, short);
	     else if esw = 2 then call ioa_ ("^d = ^a", error_code, long);
	     else if esw = 3 then call ioa_ ("^o = ^a", error_code, short);
	     else call ioa_ ("^o = ^a", error_code, long);
	end;

     end print_error_message;
