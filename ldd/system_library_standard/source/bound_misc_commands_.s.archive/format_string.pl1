/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */


	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* Name: format_string, fstr							*/
	/*									*/
	/*   This command/af does fill and adjust processing for a string, using		*/
	/* format_document_$string.							*/
	/*									*/
	/* History:								*/
	/* 0) Created: December 1983 by G. C. Dixon					*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

format_string:
fstr:	proc options(variable);
	
    dcl	Ifirst_string_arg		fixed bin,	/* arg no of the first string argument.  It and	*/
						/*   all remaining args are strings to be 	*/
						/*   formatted.				*/
       	Presult			ptr,		/* ptr to resulting output from format_document_	*/
	Pstr			ptr,		/* ptr to input to format_document_$string.	*/
	Pstr_nonvar		ptr,		/* ptr to nonvarying representation of input.	*/
	Pundent_line		ptr,		/* ptr to portion of first line of result which	*/
						/*   must be indented or undented.		*/
	Sadjust			bit(1),		/* On if output to be right-adjusted.		*/
	Sbreak_word		bit(1),		/* On if over-length words can be broken across	*/
						/*   lines.				*/
	Shyphenate		bit(1),		/* On if hyphenation should be performed.	*/
	code			fixed bin(35),
         (hyphenate_word_part, indent, line_length, starting_column, undent)
				fixed bin,	/* Control argument operand values.		*/
         (result_len, str_length)	fixed bin(21);	/* Length of input and output strings.		*/

    dcl	Lstr_nonvar		fixed bin(21) based(Pstr),
	result			char(result_len) based(Presult),
	result_array (result_len)	char(1) based (Presult),
	str			char(str_length) varying based (Pstr),
	str_nonvar		char(Lstr_nonvar) based(Pstr_nonvar),
	undent_line		char(line_length) varying based (Pundent_line);
	
    dcl  (abs, addr, addrel, copy, currentsize, index,
	length, null, substr, wordno)
				builtin;

    dcl  (cleanup, sub_error_)	condition;

    dcl   format_document_$string	entry (char(*), char(*), fixed bin(21), ptr, fixed bin(35)),
         (get_temp_segment_, release_temp_segment_)
				entry (char(*), ptr, fixed bin(35)),
	ioa_$nnl			entry() options(variable),
	requote_string_		entry (char(*)) returns(char(*));

    dcl  (FALSE			init("0"b),
	TRUE			init("1"b)) bit(1) int static options(constant),
	NL			char(1) int static options(constant) init("
"),
	SP			char(1) int static options(constant) init(" "),
         (error_table_$badopt,
	error_table_$inconsistent,
	error_table_$noarg)		fixed bin(35) ext static,
	ME			char(13) int static options(constant) init("format_string"),
	sys_info$max_seg_size	fixed bin(35) ext static;

	call get_invocation_type (Saf);		/* Find out how we were invoked, get count of args*/

	Sadjust = FALSE;				/* Initialize control argument values.		*/
	Sbreak_word = TRUE;
	Shyphenate = FALSE;
	hyphenate_word_part = 2;
	indent = 0;
	line_length = 65;
	starting_column = 1;
	str_length = 0;
	undent = 0;

	do while (get_arg());			/* Process control arguments, and figure length	*/
	   if index(arg, "-") = 1 then do;		/*   of text string.			*/

	      if arg = "-line_length" | arg = "-ll" then do;
	         if get_op ("^a requires a line length operand.", arg) then do;
		  line_length = cv_int$pos (op, "^a requires a positive line length operand.", arg);
		  end;
	         end;

	      else if arg = "-indent" | arg = "-ind" | arg = "-in" then do;
	         if get_op ("^a requires a line indentation operand.", arg) then do;
		  indent = cv_int$nonneg (op, "^a requires a nonnegative indentation count.", arg);
		  end;
	         end;

	      else if arg = "-undent" | arg = "-und" | arg = "-un" then do;
	         if get_op ("^a requires a first line undentation operand.", arg) then do;
		  undent = cv_int (op, "^a requires an integer undentation operand.", arg);
		  end;
	         end;

	      else if arg = "-column" | arg = "-col" then do;
	         if get_op ("^a requires a starting column position operand.", arg) then do;
		  starting_column = cv_int$pos (op, "^a requires a positive column position.", arg);
		  end;
	         end;

	      else if arg = "-adjust" | arg = "-adj" then
	         Sadjust = TRUE;
	      else if arg = "-no_adjust" | arg = "-nadj" then
	         Sadjust = FALSE;

	      else if arg = "-break_word" then
	         Sbreak_word = TRUE;
	      else if arg = "-no_break_word" then
	         Sbreak_word = FALSE;

	      else if arg = "-hyphenate" | arg = "-hph" then do;
	         Shyphenate = TRUE;
	         if get_op ("", arg) then do;
		  hyphenate_word_part = cv_int$pos (op, "", arg);
		  if hyphenate_word_part = -9999 then do;
		     call put_op();			/* -9999 indicates conversion error occurred.	*/
		     hyphenate_word_part = 2;		/* Assumed -hph operand is really another ctl arg.*/
		     end;
		  end;
	         end;
	      else if arg = "-no_hyphenate" | arg = "-nhph" then
	         Shyphenate = FALSE;

	      else if arg = "-string" | arg = "-str" then do;
	         if get_arg () then go to STRING_ARG;
	         end;

	      else
	         call error (error_table_$badopt, ME, arg);
	      end;

	   else do;				/* first text string argument.		*/
STRING_ARG:     Ifirst_string_arg = Iarg;
	      str_length = str_length + length(arg);
	      do while (get_arg());			/*   All remaining args are text strings.	*/
	         str_length = str_length + length(SP) + length(arg);
	         end;
	      end;
	   end;
	
	if str_length = 0 then			/* Check argument consistency.		*/
	   call error (error_table_$noarg, ME, "Need a string to be formatted.");
	if (indent > 0 & indent >= line_length) then
	   call error (error_table_$inconsistent, ME, "^/-line_length ^d -indent ^d", line_length, indent);
	if (undent > 0 & undent > indent) then
	   call error (error_table_$inconsistent, ME, "^/-indent ^d -undent ^d", indent, undent);
	if (undent < 0 & indent-undent > line_length) then
	   call error (error_table_$inconsistent, ME, "^/-line_length ^d ^[-indent ^d ^;^s^]-undent ^d",
	      line_length, indent > 0, indent, undent);
	if (starting_column > line_length) then
	   call error (error_table_$inconsistent, ME, "^/-line_length ^d -column ^d",
	      line_length, starting_column);
	if Serror then return;

	str_length = str_length + abs(undent) + starting_column;
						/* Add room to text string for undent space	*/
						/*   and starting column filler.		*/

	Pstr = null;				/* Get temp seg to hold string, undent_line and	*/
	on cleanup begin;				/*   result.				*/
	   call release_temp_segment_ (ME, Pstr, code);
	   end;
	call get_temp_segment_ (ME, Pstr, code);
	Serrors_are_fatal = TRUE;
	call error (code, ME, "Getting a temp segment.");

	Pstr_nonvar = addrel(Pstr, 1);		/* Overlay str (which is a varying string)	*/
						/*   with its nonvarying representation.	*/

	fdo.version_number = format_document_version_2;	/* Fill in format_document_ info structure.	*/
	fdo.indentation = indent;
	fdo.line_length = line_length - indent;
	fdo.switches = FALSE;
	fdo.adj_sw = Sadjust;
	fdo.galley_sw = TRUE;
	fdo.literal_sw = TRUE;
	fdo.break_word_sw = Sbreak_word;
	fdo.max_line_length_sw = TRUE;
	fdo.sub_err_sw = TRUE;
	fdo.hyphenation_sw = Shyphenate;
	fdo.syllable_size = hyphenate_word_part;

	str = "";					/* Prepare to fill in string from arguments.	*/
	if undent < 0 then				/* For indented first line, add a place holder.	*/
	   str = copy ("~", -undent);

	call reprocess_args(Ifirst_string_arg);		/* Reprocess arguments to fill in text args into  */
	do while (get_arg());			/*   string variable.			*/
	   str = str || arg;
	   do while (get_arg());
	      str = str || SP;
	      str = str || arg;
	      end;
	   end;

	Pundent_line = addrel (Pstr, currentsize(str));
	if undent > 0 then do;			/* For undented first line, save portion of string*/
	   undent_line = copy(SP, indent-undent);	/*   to be undented, removing it from input.	*/
	   if length(str) > undent then do;
	      undent_line = undent_line || substr (str, 1, undent);
	      str = substr(str, undent+1);
	      end;
	   else do;
	      undent_line = undent_line || str;
	      str = copy (SP, undent-length(str)+1);
	      end;
	   end;

	Presult = addrel (Pundent_line, currentsize(undent_line));
	result_len = sys_info$max_seg_size*4 - wordno(Presult);

	on sub_error_ call sub_error_handler();
	call format_document_$string (str_nonvar, result,
	   result_len, addr(fdo), code);		/* Call format_document_ to do the fill/adj work. */
	revert sub_error_;
	if code ^= 0 then
	   call error (code, ME, "While formatting the string.");

	else do;					/* If no errors occurred:			*/
	   if undent < 0 then			/*   remove placeholder for indented first line.	*/
	      substr (result, indent+1, -undent) = "";
	   else if undent > 0 then			/*   or add undented part of first line to result.*/
	      substr (result, 1, indent) = undent_line;
	   if starting_column > 1 then do;		/* If other text already appears on first line:	*/
	      if starting_column-1 <= indent-undent then do;
	         Presult = addr (result_array(starting_column));
	         result_len = result_len - (starting_column-1);
	         end;				/*   remove indent spaces on first line to	*/
						/*   accommodate assumed text; or		*/
	      else do;				/*   force output to begin on a new line.	*/
	         result_len = result_len + length(NL);
	         result = NL || substr(result, 1, result_len-length(NL));
	         end;
	      end;
	   if Saf then do;				/* AF: return unquoted result, without final NL.	*/
	      result_len = result_len - length(NL);
	      call set_return_arg (requote_string_(result));
	      end;
	   else					/* COMMAND: print final result.		*/
	      call ioa_$nnl ("^a", result);
	   end;

RETURN:	if Pstr ^= null then			/* Give back the temp segment.		*/
	   call release_temp_segment_ (ME, Pstr, code);
	return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* 		I  N  T  E  R  N  A  L        P  R  O  C  E  D  U  R  E  S		*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


cv_int:	proc (op, str, arg1) returns (fixed bin);	/* Convert control arg operand to integer.	*/

    dcl	op			char(*),
	str			char(*),
	arg1			char(*);

    dcl   Smust_be_nonnegative	bit(1),
	Smust_be_positive		bit(1),
	number			fixed bin;

    dcl	convert			builtin;

    dcl  (conversion, size)		condition;
	
    dcl  (error_table_$bad_conversion,
          error_table_$out_of_bounds)	fixed bin(35) ext static;

	Smust_be_nonnegative = FALSE;
	Smust_be_positive = FALSE;

CV_NUM:	on conversion, size begin;
	   code = error_table_$bad_conversion;
	   if str = "" then go to BAD_NUM_OK;		/* operand optional: no error message.		*/
	   go to BAD_NUM;
	   end;
	number = convert (number, op);
	revert conversion, size;
	if (number < 0 & Smust_be_nonnegative) |
	   (number < 1 & Smust_be_positive) then do;
	   code = error_table_$out_of_bounds;
BAD_NUM:	   call error (code, ME, "^a ^a^/" || str, arg1, op, arg1);
	   return (1);
	   end;
	return (number);

BAD_NUM_OK:
	return (-9999);

cv_int$nonneg:
	entry (op, str, arg1) returns(fixed bin);

	Smust_be_nonnegative = TRUE;
	Smust_be_positive = FALSE;
	go to CV_NUM;

cv_int$pos:
	entry (op, str, arg1) returns(fixed bin);

	Smust_be_nonnegative = FALSE;
	Smust_be_positive = TRUE;
	go to CV_NUM;

	end cv_int;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


    dcl	Serror			bit(1),		/* On if fatal error has occurred.		*/
       	Serrors_are_fatal		bit(1);		/* On if errors are fatal.			*/

error: 	proc options(variable);			/* Procedure to report errors via com_err_ or	*/
						/*   active_fnc_err_, as appropriate.  This proc	*/
						/*   has same calling sequence as com_err_.	*/

    dcl	code			fixed bin(35) based (Pcode),
	Pcode			ptr;

    dcl	cu_$arg_list_ptr		entry returns(ptr),
	cu_$arg_ptr		entry (fixed bin, ptr, fixed bin(21), fixed bin(35)),
	cu_$generate_call		entry (entry, ptr);

	call cu_$arg_ptr (1, Pcode, 0, 0);		/* Access error table code argument.		*/
	if code = 0 then return;			/* If non-zero, this ISN'T an error.		*/
	Serror = TRUE;				/* Record fact that an error occurred.		*/
	call cu_$generate_call (err, cu_$arg_list_ptr()); /* Actually call com_err_ or active_fnc_err_.	*/
	if Serrors_are_fatal then
	   go to RETURN;

	end error;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


    dcl	Iarg			fixed bin,	/* Current argument being processed.		*/
	Larg			fixed bin(21),	/* Length of current argument.		*/
	Lop			fixed bin(21),	/* Length of current ctl arg operand.		*/
	Lret			fixed bin(21),	/* Max length of AF return value.		*/
	Nargs			fixed bin,	/* Number of arguments.			*/
	Parg			ptr,		/* Ptr to current argument.			*/
	Parg_list			ptr,		/* Ptr to command/af's argument list.		*/
	Pop			ptr,		/* Ptr to current operand.			*/
	Pret			ptr,		/* Ptr to AF return value.			*/
	Saf			bit(1),		/* On if invoked as an active function.		*/
	arg			char(Larg) based(Parg),
	op			char(Lop) based(Pop),
	ret			char(Lret) varying based(Pret),
         (arg_ptr			variable,
	cu_$af_arg_ptr_rel,
	cu_$arg_ptr_rel)		entry (fixed bin, ptr, fixed bin(21), fixed bin(35), ptr),
	cu_$af_return_arg		entry (fixed bin, ptr, fixed bin(21), fixed bin(35)),
       	cu_$arg_list_ptr		entry returns(ptr),
         (err			variable,
	active_fnc_err_,		
	com_err_)			entry() options(variable);
	

get_invocation_type:				/* Were we invoked as command or af?  Arg count?	*/
	proc (Saf);

    dcl	Saf			bit(1);

	Serrors_are_fatal = FALSE;
	call cu_$af_return_arg (Nargs, Pret, Lret, code);
	if code = 0 then do;
	   Saf = TRUE;
	   arg_ptr = cu_$af_arg_ptr_rel;
	   err = active_fnc_err_;
	   ret = "";
	   end;
	else do;
	   Saf = FALSE;
	   arg_ptr = cu_$arg_ptr_rel;
	   err = com_err_;
	   end;
	Iarg = 0;					/* No args processed so far.			*/
	Serror = FALSE;				/* No errors so far.			*/
	Parg_list =  cu_$arg_list_ptr();		/* Remember arg list ptr for subrs below.	*/

	end get_invocation_type;
       

get_arg:	proc returns(bit(1));			/* Returns TRUE if another argument exists.	*/
						/*   Its value is accessible via arg variable.	*/

	if Iarg+1 > Nargs then
	   return(FALSE);
	Iarg = Iarg + 1;
	call arg_ptr (Iarg, Parg, Larg, code, Parg_list);
	return(TRUE);

get_op:	entry (str, arg1) returns(bit(1));		/* Returns TRUE if another argument exists.	*/
						/*   Its value is accessible via op variable.	*/

    dcl	str			char(*),
	arg1			char(*);

    dcl	error_table_$smallarg	fixed bin(35) ext static;

	if Iarg+1 > Nargs then do;
	   if str ^= "" then
	      call error (error_table_$noarg, ME, str, arg1);
	   return(FALSE);
	   end;
	Iarg = Iarg + 1;
	call arg_ptr (Iarg, Pop, Lop, code, Parg_list);
	if op = "" then do;
	   if str ^= "" then
	      call error (error_table_$smallarg, ME, """^va""^/" || str, length(op), op, arg1);
	   return(FALSE);
	   end;
	return(TRUE);


put_op:	entry;					/* Return operand to list of unprocessed args.	*/

	Iarg = Iarg - 1;
	return;


reprocess_args:					/* Reprocess argument list again, starting with	*/
	entry (Ith_arg);				/*   the Ith argument.			*/

    dcl	Ith_arg			fixed bin;

	Iarg = Ith_arg - 1;				/* get_arg adds 1 before reading an arg.	*/
	return;


set_return_arg:					/* Set AF return value.			*/
	entry (str);

	ret = str;
	return;

	end get_arg;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


sub_error_handler:
	proc;

    dcl	code			fixed bin(35),
	continue_to_signal_		entry (fixed bin(35)),
	error_table_$unimplemented_version
				fixed bin(35) ext static,
       	find_condition_info_	entry (ptr, ptr, fixed bin(35));

	condition_info_ptr = addr (auto_condition_info);
	condition_info.version = condition_info_version_1;
	call find_condition_info_ (null(), addr(condition_info), code);
	if code ^= 0 then
	   call error (code, ME, "Handling sub_error_ condition from format_document_$string.");

	sub_error_info_ptr = condition_info.info_ptr;
	if sub_error_info.version ^= sub_error_info_version_1 then
	   call error (error_table_$unimplemented_version, ME, "
Version ^d of sub_error_info structure isn't supported.",
	      sub_error_info.version);
	if sub_error_info.name ^= "format_document_" then do;
	   call continue_to_signal_ (code);
	   return;
	   end;

	format_document_error_ptr = sub_error_info.info_ptr;
	if format_document_error.version_number ^= format_document_error_version_1 then 
	   call error (error_table_$unimplemented_version, ME, "
Version ^d of format_document_error structure isn't supported.",
	      format_document_error.version_number);
	call error (format_document_error.error_code, ME);
	return;

%include condition_info;

    dcl	1 auto_condition_info	aligned like condition_info;

%include condition_info_header;
%include sub_error_info;

%include format_document_error;

	end sub_error_handler;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

%include format_document_options;

    dcl	1 fdo			aligned like format_document_options;

	end format_string;
