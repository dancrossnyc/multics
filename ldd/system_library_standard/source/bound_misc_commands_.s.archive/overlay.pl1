/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

overlay: ov: proc;

/* OVERLAY - overlay multiple segments.

   THVV */
/* Usage message with no args; reject bad control args 08/14/80 S. Herbst */
/* Change -in to -ind, add clean_up handler, rename variables 02/18/82 L. Baldwin */
/* Change to allow the archive convention.  07/08/84 R. Roach */

%include prt_conv_info;
%include access_mode_values;

dcl  BEAD_COUNT fixed bin;
dcl  NL char (1) int static options (constant) init ("
"),
     NLVTFF char (3) int static options (constant) init ("
"),
     SP char (1) int static options (constant) init (" "),
     BS char (1) int static options (constant) init (""),
     VT char (1) int static options (constant) init (""),
     FF char (1) int static options (constant) init ("");

dcl  obuf char (BEAD_COUNT+1) based (obuf_ptr) aligned;
dcl  system_area area (1024) based (area_ptr);
dcl 1 bead (BEAD_COUNT) based (bead_ptr) aligned,
    2 loc fixed bin (26) unal,
    2 char char (1) unal;
dcl  seg char (curr_seg_len) based (curr_seg_ptr) aligned;
dcl  arg char (arg_len) based (arg_ptr) unaligned;

dcl  slew char (1);
dcl  cpt char (32);
dcl  en char (32);
dcl  dn char (168);
dcl  obuf_storage char (513);
dcl  output char (4096);

dcl  eof (10) bit (1);

dcl (area_ptr, arg_ptr, bead_ptr, obuf_ptr, curr_ptr, curr_seg_ptr) ptr;
dcl  info_ptr (10) ptr;
dcl  seg_ptr (10) ptr init ((10) null);
dcl (temp_ptr, temp1_ptr) ptr init (null);

dcl (arg_count, arg_no, arg_len) fixed bin;
dcl (i, ii, j, k, m, n) fixed bin;
dcl  nchars fixed bin;
dcl (next_line, curr_line) fixed bin;
dcl  neof fixed bin;
dcl  file_count fixed bin;
dcl  col_no fixed bin;
dcl  nxline (10) fixed bin init ((10)0);
dcl  ocount fixed bin;
dcl  offset (10) fixed bin;
dcl  page_len fixed bin init (60);
dcl  storage (512) fixed bin;

dcl  io fixed bin (21);
dcl  curr_seg_len fixed bin (21);
dcl  seg_len (10) fixed bin (21);
dcl  line_no (10) fixed bin (21);
dcl  bit_count fixed bin (24);
dcl  code fixed bin (35);

dcl  error_table_$badopt fixed bin (35) ext;
dcl  iox_$user_output ptr ext;
dcl  print_conv_$print_conv_ ext;

dcl (com_err_, com_err_$suppress_name) entry options (variable);
dcl  cu_$arg_count entry (fixed bin, fixed bin (35));
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  cv_dec_check_ entry (char (*), fixed bin (35)) returns (fixed bin);
dcl  expand_pathname_$component entry (char(*), char(*), char(*), char(*), fixed bin(35));
dcl  get_system_free_area_ entry () returns (ptr);
dcl  hcs_$terminate_noname entry (ptr, fixed bin (35));
dcl  initiate_file_$component entry (char(*), char(*), char(*), bit(*), ptr, fixed bin(24), fixed bin(35));
dcl  iox_$put_chars entry (ptr, ptr, fixed bin (21), fixed bin (35));
dcl  prt_conv_ entry (ptr, fixed bin, ptr, fixed bin, ptr);

dcl (addr, divide, hbound, length, min, mod, null, search, string, substr, unspec) builtin;
dcl  cleanup condition;

/* ======================================================= */

	area_ptr = get_system_free_area_ ();

	file_count = 0;
	BEAD_COUNT = hbound (storage, 1);		/* set the initial values */
	bead_ptr = addr (storage);
	obuf_ptr = addr (obuf_storage);

	call cu_$arg_count (arg_count, code);
	if code ^= 0 then do;
	     call com_err_ (code, "overlay");
	     return;
	end;
	if arg_count = 0 then do;
	     call com_err_$suppress_name (0, "overlay", "Usage:  overlay paths {-control_args}");
	     return;
	end;

	do arg_no = 1 to arg_count;
	     call cu_$arg_ptr (arg_no, arg_ptr, arg_len, code);
	     if arg = "-page_length" | arg = "-pl" then do;
		arg_no = arg_no + 1;
		call cu_$arg_ptr (arg_no, arg_ptr, arg_len, code);
		if code ^= 0 then do;
ERROR:		     call com_err_ (code, "overlay", "^a", arg);
		     return;
		end;
		page_len = cv_dec_check_ (arg, code);
		if code ^= 0 then do;
		     call com_err_ (0, "overlay", "Invalid integer argument ^a for -page_length", arg);
		     return;
		end;
	     end;
	     else if arg = "-indent" | arg = "-ind" | arg = "-in" then do;
		arg_no = arg_no + 1;
		call cu_$arg_ptr (arg_no, arg_ptr, arg_len, code);
		if code ^= 0 then go to ERROR;
		offset (file_count) = cv_dec_check_ (arg, code);
		if code ^= 0 then do;
		     call com_err_ (0, "overlay", "Invalid integer argument ^a for -indent", arg);
		     return;
		end;
	     end;
	     else if substr (arg, 1, 1) = "-" then do;
		code = error_table_$badopt;
		go to ERROR;
	     end;
	     else do;
		file_count = file_count + 1;
		if file_count > hbound (seg_ptr, 1) then do;
		     call com_err_ (0, "overlay", "Number of files exceeds implementation maximum of ^d", hbound (seg_ptr, 1));
		     return;
		end;

		call expand_pathname_$component (arg, dn, en, cpt, code);
		if code ^= 0 then go to ERROR;

		allocate pci set (info_ptr (file_count)) in (system_area);
		call init_pci (info_ptr (file_count));

		offset (file_count) = 0;
		line_no (file_count) = 1;
		seg_ptr (file_count) = null;

		call initiate_file_$component (dn, en, cpt, R_ACCESS, seg_ptr (file_count), bit_count, code);
		if code ^= 0 then go to ERROR;
		seg_len (file_count) = divide (bit_count, 9, 17, 0);
	     end;
	end;

	if file_count = 0 then do;
	     call com_err_$suppress_name (0, "overlay", "Usage:  overlay paths {-control_args}");
	     return;
	end;

	on cleanup call clean_up;

	do i = 1 to file_count;
	     info_ptr (i) -> pci.page_length = page_len;
	     info_ptr (i) -> pci.phys_page_length = page_len;
	     info_ptr (i) -> pci.overflow_off = "0"b;
	end;

	neof = 0;					/* Initialize counters */
	curr_line = 1;
	eof (*) = "0"b;

	do while (neof < file_count);			/* Stop when end of all input */

	     nchars = 0;				/* number of chars in this line */
	     next_line = 1 + page_len * divide (curr_line+page_len-1, page_len, 17, 0);

	     do i = 1 to file_count;			/* Take input from all segs */
		if eof (i) then go to SKIP;
		if curr_line < nxline (i) then go to SKIP;

		curr_seg_len = seg_len (i);		/* Get input seg length */
		curr_seg_ptr = seg_ptr (i);		/* .. ptr */
		curr_ptr = addr (substr (seg, line_no (i), 1)); /* .. ptr to current loc */
		n = search (substr (seg, line_no (i)), NLVTFF); /* .. loc of end of input line */
		if n = 0 then n = seg_len (i) - line_no (i);
		line_no (i) = line_no (i) + n;
		if line_no (i) >= seg_len (i) then do;
		     eof (i) = "1"b;		/* ignore this seg from now on */
		     neof = neof + 1;
		end;

		do while (n > 0);			/* Normalize line */
		     call prt_conv_ (curr_ptr, n, addr (obuf), ocount, info_ptr (i));
		     do j = 1 to ocount-1;
			if substr (obuf, j, 1) ^= " " then do;
			     nchars = nchars + 1;	/* Save each character */
			     if nchars > BEAD_COUNT then call MORE_ROOM;
			     bead (nchars).char = substr (obuf, j, 1);
			     bead (nchars).loc = j + offset (i);
			end;
		     end;
		end;

		slew = substr (obuf, ocount, 1);	/* Deal with slew */
		if slew = FF then do;
		     nxline (i) = 1 + page_len * divide (curr_line+page_len-1, page_len, 17, 0);
		end;
		else if slew = VT then do;
		     nxline (i) = 1 + 10 * divide (curr_line+9, 10, 17, 0);
		end;
		else if slew = NL then do;		/* Can reach vertical tabstop via NL's */
		     nxline (i) = curr_line+1;
		end;
		next_line = min (next_line, nxline (i));
SKIP:	     end;					/* End loop on input files. one line assembled */
	     call sort;				/* Order chars on line */
	     io = 0;				/* output counter */
	     col_no = 1;				/* column */
	     do k = 1 to nchars;			/* put out all chars */
		m = bead (k).loc - col_no;		/* compute white space */
		if m > 0 then do ii = 1 to m;		/* if going right */
		     io = io + 1;
		     substr (output, io, 1) = SP;
		end;
		if m < 0 then do;			/* if going left (should be only one) */
		     io = io + 1;
		     substr (output, io, 1) = BS;
		end;
		io = io + 1;			/* Now put out char */
		substr (output, io, 1) = bead (k).char;
		col_no = bead (k).loc + 1;		/* remember last used column */
	     end;
	     io = io + 1;				/* output slew char */
	     if next_line = curr_line+1 then substr (output, io, 1) = NL;
	     else if mod (next_line-1, page_len) = 0 then substr (output, io, 1) = FF;
	     else substr (output, io, 1) = VT;
	     call iox_$put_chars (iox_$user_output, addr (output), io, (0));
	     curr_line = next_line;

	end;

	call clean_up;
	return;

/* ------------------------------------------------------- */

sort:	proc;

dcl  temp fixed bin;
dcl  swaps fixed bin;
dcl  d fixed bin;
dcl  i fixed bin;

dcl  vec (BEAD_COUNT) fixed bin based (bead_ptr);

	     d = nchars;
PASS:	     swaps = 0;
	     d = divide (d + 1, 2, 17, 0);
	     do i = 1 to nchars - d;
		if vec (i) > vec (i+d) then do;
		     swaps = swaps + 1;
		     temp = vec (i);
		     vec (i) = vec (i+d);
		     vec (i+d) = temp;
		end;
	     end;
	     if d > 1 then go to PASS;
	     if swaps > 0 then go to PASS;

	end sort;

init_pci:	proc (p);

dcl  p ptr;

	     unspec (p -> pci) = "0"b;		/* clear everything */
	     p -> pci.cv_proc = addr (print_conv_$print_conv_);
	     p -> pci.level = 0;
	     p -> pci.pos = 0;
	     p -> pci.lmarg = 0;
	     p -> pci.rmarg = length (obuf) - 1;
	     p -> pci.phys_line_length = length (obuf) - 1;
	     p -> pci.page_length = 60;
	     p -> pci.phys_page_length = 66;
	     p -> pci.lpi = 6;
	     p -> pci.sheets_per_page = 1;
	     p -> pci.line_count = 0;
	     p -> pci.page_count = 0;
	     string (p -> pci.modes) = ""b;
	     p -> pci.top_label_line = "";
	     p -> pci.bot_label_line = "";
	     p -> pci.top_label_length = 0;
	     p -> pci.bot_label_length = 0;
	     p -> pci.line = 1;
	     p -> pci.slew_residue = 0;
	     p -> pci.label_nelem = 0;
	     p -> pci.sav_pos = 0;
	     p -> pci.func = 0;
	     p -> pci.temp = "0"b;
	     p -> pci.overflow_off = "1"b;

	end init_pci;

MORE_ROOM: proc;

dcl  k fixed bin;

	     k = BEAD_COUNT;
	     BEAD_COUNT = 2*BEAD_COUNT;
	     allocate bead set (temp_ptr) in (system_area);
	     allocate obuf set (temp1_ptr) in (system_area);
	     BEAD_COUNT = k;
	     temp_ptr -> bead = bead;
	     temp1_ptr -> obuf = obuf;
	     if bead_ptr ^= addr (storage) then free bead;
	     if obuf_ptr ^= addr (obuf_storage) then free obuf;
	     BEAD_COUNT = 2*BEAD_COUNT;
	     bead_ptr = temp_ptr;
	     obuf_ptr = temp1_ptr;

	end MORE_ROOM;

clean_up:	proc;

	     do i = 1 to file_count;
		if seg_ptr (i) ^= null then call hcs_$terminate_noname (seg_ptr (i), code);
		free info_ptr (i) -> pci;
	     end;
	     if temp_ptr ^= null then free bead;
	     if temp1_ptr ^= null then free obuf;

	end clean_up;

     end overlay;
