/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


ma_resynch_: proc (a_info_ptr); default (fixed&^precision&^constant) precision (21); /* DEFAULT */
default (constant&real&^decimal) binary;

/* This program is part of the merge_ascii/compare_ascii subsystem. */
/* It is called with a pointer to a control structure which */
/* describes a number of texts, and the place in each */
/* at which synchronization was lost. RESYNCH_ fills in information */
/* indicating where it found it possible to get back in synch. */

/* Coded by RE Mullen */

dcl  a_info_ptr ptr;

dcl  i fixed bin;
dcl  EOF bit (1) aligned init (""b);
dcl  blocklen (8) fixed bin;
dcl  blocklines (8) fixed bin;
dcl  depth (8) fixed bin;				/* chars past cp(i) where block(i) created */
dcl  xiny (8, 8) fixed bin;				/* xiny(i,j) is chars past cp(j) where block(i) found */
dcl  votes (8) fixed bin;				/* est value of synch on block (i) */


dcl  cp_i ptr;					/* for loops */
dcl  len_i fixed bin;
dcl  depth_i fixed bin;
dcl  blocklen_i fixed bin;
dcl  blocklines_i fixed bin;
dcl  votes_i fixed bin;
dcl  i_in (8) fixed bin;

dcl (best, best_votes) fixed bin;
dcl  n_blocks fixed bin;

dcl  NL char (1) aligned int static options (constant) init ("
");
dcl  ch char (999) based;
dcl  skipchars (0:1) char (1) unal based;
dcl  ioa_ entry options (variable);

dcl  synch bit (1) aligned;

/*  */
%include merge_ascii_info;
/*  */

/* this program finds the next point at which the text are back in synch.
   If no resynch point is found, we say that we are "in synch at the ends",
   and set the global switch ma_info.eof.

   It is the contract of this program to also set the following global variables:
   ma_info.difflen(i) is set to the number of chars which differ in each text.
   ma_info.difflines(i) is set to the number of lines which differ in each text.
   ma_info.synchlen is set to the number of characters which are in the resynched block.
   ma_info.synchlines is set to the number of lines which are in the resynched block.
   ma_info.same_as(i) is set to the seg_index of the lowest numbered segment
   with a difference matching that present in text(i).
   If no lower numbered text has a matching difference then same_as(i) is set to zero.

   Note that no variables in ma_info are set by any internal procedures.
   Note that this program does not modify any variables it uses to regain synch,
   it advances no pointers, it does not reduce the remaining lengths.
*/
	ma_info_ptr = a_info_ptr;			/* copy pointer at least, to automatic */

	do i = lo to hi;
	     depth (i) = 0;
	end;

/* We start out not in synch.  Each call to try_deeper_resynch
   defines a block of lines in each segment which begins one
   line deeper in the remaining text.  The variable depth(i) is the number
   of characters between where synch was lost and the first character of
   the line starting the defined block. */
	synch = ""b;
	do while (^synch);
	     call try_deeper_resynch;
	end;

/* Finally in SYNCH again.
   Got in synch at blocks: substr(cp(*)->ch, xiny(best,*)+1, synchlen)
   If EOF then we must setup a zero_length resynched block at the end of each text.
   We then strip matching lines off the tail of the alleged differences.
   Finally we determine difflines(*) and which differences match.
*/
	ma_info.eof = EOF;

/* Set synchlen, synchlines, difflen (*) */
	do i = lo to hi;
	     if EOF then do;			/* at synch at ends */
		difflen (i) = len (i);		/* difference is entire rest */
		synchlen, synchlines = 0;		/* resynch block is empty */
	     end;
	     else do;				/* set lenght of differences */
						/* synchlen, synchlines already set correctly by check_synch */
		difflen (i) = xiny (best, i);
	     end;
	end;

	call shrink_diff;				/* strip matching chars */

	do i = lo to hi;
	     difflines (i) = DIFFLINES (i);
	     same_as (i) = SAME_AS (i);		/* seg index of lowest matching text, or zero */
	end;


/*  */
try_deeper_resynch: proc;

dcl (i, j, k) fixed bin;


	     n_blocks = 0;

	     do i = lo to hi;			/* setup blocks in each text, scan others  */

/* init useful vars */
		cp_i = cp (i);
		depth_i = depth (i);
		len_i = len (i);
		votes_i = 1;
						/* go deeper */
		k = index (substr (cp_i -> ch, depth_i+1, len_i-depth_i), NL);
		if k = 0 then depth_i = len_i;
		else depth_i = depth_i + k;


/* setup block */
		blocklen_i, blocklines_i = 0;		/* block is null so far */
gb_small:
		k = index (substr (cp_i -> ch, (depth_i+blocklen_i)+1, len_i- (depth_i+blocklen_i)), NL);
		if k > 0 then do;			/* was able to grow by another line */
		     blocklen_i = blocklen_i + k;
		     blocklines_i = blocklines_i + 1;

		     if blocklen_i < minchars
		     | blocklines_i < minlines then go to gb_small;
		     n_blocks = n_blocks + 1;		/* one more defined */
		end;
		else do;				/* not able to define block */
		     blocklen_i, blocklines_i = 0;
		     votes_i = 0;
		end;



/* scan other texts for block(i) */
		do j = lo to hi while (votes_i ^= 0);
		     if i = j then i_in (j) = depth_i;
		     else do;
						/* scan one */
			if substr (cp (j) -> ch, 1, blocklen_i)
			= substr (cp_i -> ch, depth_i+1, blocklen_i) then do;
			     i_in (j) = 0;		/* found at top */
			     votes_i = votes_i + 1;	/* favor inserts/deletes if tie */
			end;
			else do;
			     i_in (j) = index (substr (cp (j) -> ch, 1, depth (j)+blocklen_i),
				substr (cp_i -> ch, depth_i, blocklen_i+1));
			     if i_in (j) = 0 then votes_i = 0; /* not present */
			end;
		     end;
		end;


/* scan for block (i) is done, nb. */
		depth (i) = depth_i;
		votes (i) = votes_i;
		if votes (i) > 0 then do;		/* worth remembering? */
		     blocklen (i) = blocklen_i;
		     blocklines (i) = blocklines_i;
		     do j = lo to hi;
			xiny (i, j) = i_in (j);
		     end;
		end;
	     end;

	     if n_blocks = 0 then do;			/* at EOF in all texts */
		synch = "1"b;
		EOF = "1"b;
		return;
	     end;

	     synch = ""b;				/* VALIDATE SYNCH */
	     do while (^synch);
		call get_best;
		if best = 0 then return;
		call check_synch;			/* sets synch, synchlen, synchlines */
		if ^synch then votes (best) = 0;
	     end;

	end try_deeper_resynch;


/*  */
check_synch: proc;					/* IP to see if block (best) is unique in each text */

dcl (i, j, k) fixed bin;
dcl  lo_ptr ptr;
dcl  restlen_all_same bit (1);
dcl  restlen fixed bin;

	     lo_ptr = addr (cp (lo) -> skipchars (xiny (best, lo)));
	     synchlen = blocklen (best);		/* this many chars in synch block so far */
	     synchlines = blocklines (best);

	     restlen_all_same = "1"b;
	     i_in (lo) = xiny (best, lo);
	     restlen = -i_in (lo) - synchlen + len (lo);
	     do i = lo + 1 to hi;
		i_in (i) = xiny (best, i);
		if restlen > len (i) - i_in (i) - synchlen then do;
		     restlen = len (i) - i_in (i) - synchlen;
		     restlen_all_same = ""b;
		end;
	     end;

grow_loop:					/* first make block as big as possible */
	     j = index (substr (lo_ptr -> ch, synchlen+1, restlen), NL);
	     if j = 0 then do;
		if restlen_all_same then j = restlen;
		if j = 0 then go to grow_done;	/* was not another NL in range */
	     end;
	     do i = lo + 1 to hi;
		if substr (lo_ptr -> ch, synchlen+1, j)
		^= substr (cp (i) -> ch, i_in (i)+synchlen+1, j) then go to grow_done;
	     end;
	     synchlen = synchlen + j;			/* grow synched chars */
	     synchlines = synchlines + 1;		/* grow synched lines */
	     restlen = restlen - j;
	     if restlen > 0 then go to grow_loop;

grow_done:					/* here when can't grow synched block further */
	     if synchlen = 0 then go to real_synch;	/* in "synch" at EOF (*) */

/* now see if stuff is unique */

	     do i = lo to hi;
		if index (substr (cp (i) -> ch, i_in (i)+synchlen, len (i)-i_in (i)-synchlen),
		substr (lo_ptr -> ch, 1, synchlen)) ^= 0 then go to pseudo_synch;
	     end;

real_synch:
	     synch = "1"b;
	     return;

pseudo_synch:
	     synch = ""b;
	     return;

	end check_synch;


/*  */
DIFFLINES: proc (di) returns (fixed bin);		/* IP to count lines in difflen(*) */

dcl  dc fixed bin;					/* chars left in diff */
dcl  dl fixed bin;					/* lines in diff counted */
dcl  dj fixed bin;					/* length of one line */
dcl  di fixed bin;					/* text seg in question */
dcl  dp ptr;					/* ptr to rest of diff */
dcl  dch char (dc) based (dp);

	     dc = difflen (di);
	     dp = cp (di);
	     dl = 0;
	     do while (dc > 0);
		dj = index (dch, NL);
		if dj = 0 then dj = dc;
		dc = dc - dj;
		dp = addr (dp -> skipchars (dj));
		dl = dl + 1;
	     end;
	     return (dl);

	end DIFFLINES;


SAME_AS:	proc (si) returns (fixed bin);		/* IP to det if diff matches other diff */

dcl  si fixed bin;					/* text seg in question */
dcl  sas fixed bin;					/* one other diff, being compared */
dcl  sap ptr;					/* ptr to diff */
dcl  sac fixed bin;					/* chars in diff */
dcl  sa_ch char (sac) based;				/* handy template */

	     sap = cp (si);
	     sac = difflen (si);
	     do sas = lo to si - 1;			/* loop over segs with lower indices */
		if sac = difflen (sas) then
		     if sap -> sa_ch = cp (sas) -> sa_ch then
			return (sas);
	     end;
	     return (0);				/* evid not same as any other */

	end SAME_AS;

/*  */
get_best:	proc;					/* IP to choose among synchs */

dcl  gbi fixed bin;

	     best, best_votes = 0;

	     do gbi = lo to hi;
		if votes (gbi) > best_votes then do;
		     best = gbi;
		     best_votes = votes (best);
		end;
	     end;

	end get_best;


/*  */
shrink_diff: proc;					/* IP to avoid "abcdef" changed to "xyzef" foolishness */
dcl (shi, shj, shk) fixed bin;

dcl  max_same fixed bin;
dcl  chars_same fixed bin;
dcl  lines_same fixed bin;

	     chars_same = 0;
	     lines_same = 0;
	     max_same = difflen (lo);
	     do shi = lo + 1 to hi;
		if difflen (shi) < max_same then max_same = difflen (shi);
	     end;
	     if max_same = 0 then return;		/* nothing to compress */

	     do while (chars_same < max_same);
		shj = index (reverse (substr
		     (cp (lo) -> ch, difflen (lo)-max_same+1, max_same-chars_same-1)), NL);
		if shj = 0 then go to sh_done;
		do shi = lo + 1 to hi;
						/* compare complete lines bracketed by NL */
		     if substr (cp (lo) -> ch, difflen (lo)-chars_same-shj, shj+1)
		     ^= substr (cp (shi) -> ch, difflen (shi)-chars_same-shj, shj+1)
		     then go to sh_done;		/* not the same */
		end;
		chars_same = chars_same + shj;	/* discovered more the same */
		lines_same = lines_same + 1;
	     end;
sh_done:
	     if chars_same ^= 0 then do;
		do shi = lo to hi;
		     difflen (shi) = difflen (shi) - chars_same;
		end;
		synchlen = synchlen + chars_same;
		synchlines = synchlines + lines_same;
	     end;

	end shrink_diff;

     end ma_resynch_;
