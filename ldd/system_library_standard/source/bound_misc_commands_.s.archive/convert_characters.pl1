/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


convert_characters: cvc: proc;

/* procedure to convert a predefined set of characters in a segment to a different set */

/* Originally coded by E. Franklin
   Recode for SSS by R. Mullen */

dcl  unique_chars_ entry (bit (*)) returns (char (15));	/* to make tempname */
dcl  establish_cleanup_proc_ entry (entry);		/* remember to cleanup */
dcl  ioa_ ext entry options (variable);			/* input output ascii */
dcl  com_err_ ext entry options (variable);
dcl  cu_$arg_count ext entry (fixed bin);
dcl  cu_$arg_ptr ext entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  expand_path_ ext entry (ptr, fixed bin, ptr, ptr, fixed bin (35));
dcl  hcs_$terminate_noname ext entry (ptr, fixed bin (35));
dcl  hcs_$initiate_count ext entry (char (*) aligned, char (*) aligned, char (*) aligned, fixed bin (24),
     fixed bin (12), ptr, fixed bin (35));
dcl  hcs_$make_seg entry (char (*) aligned, char (*) aligned, char (*) aligned, fixed bin, ptr, fixed bin (35));
dcl  hcs_$fs_move_seg entry (ptr, ptr, fixed bin (1), fixed bin (35));
dcl  hcs_$delentry_seg entry (ptr, fixed bin (35));
dcl  hcs_$set_bc_seg entry (ptr, fixed bin (24), fixed bin (35));

dcl (inptr, tempptr, outptr) ptr init (null);		/* point to segs to be dealt with */
dcl  fs_flag bit (1) aligned init ("0"b);		/* 1 => setting from_string */
dcl  string char (charnum) based;
dcl (bcd_flag, dart_flag, uc_flag, lc_flag, mult_flag, sp_flag) bit (1) unaligned init ("0"b);
dcl  ts_flag bit (1) aligned init ("0"b);		/* 1 => setting to_string */
dcl  procname char (18) aligned init ("convert_characters");
dcl  tempname char (24) aligned;			/* name of seg in process dir */
dcl  max_nargs fixed bin init (3);			/* will be set to two for some entrys */

dcl (from_string, to_string) char (128) varying aligned init (""); /* define the conversion */
dcl (static_from_string, static_to_string) char (128) varying aligned /* define the default conversion */
     internal static init ("");

dcl (code, bcode) fixed bin (35);			/* status codes */
dcl (error_table_$action_not_performed,			/* to make sure user knows */
     error_table_$noarg,
     error_table_$too_many_args)
     fixed bin (35) external static;

dcl  argptr pointer;				/* will point to last arg picked up */
dcl (arglen, nargs) fixed bin (17);

dcl  aa char (4) aligned;				/* aligned arg */
dcl  argbuf char (arglen) based (argptr);		/* the last arg picked up */

dcl  dir char (168) aligned;				/* dirname for last patharg picked up */
dcl  entry char (32) aligned;				/* ename for same */
dcl  btcnt fixed bin (24);				/* bit count */

dcl (i, j) fixed bin (24);
dcl  charnum fixed bin (24);				/* num of chars in seg being converted */


dcl (addr, addrel, divide, length, min, null, ptr, substr, translate) builtin; /* pawns */


/* This entry converts from one user specified string to another */

	call cu_$arg_count (nargs);
	call cu_$arg_ptr (1, argptr, arglen, code);
	if code ^= 0 then go to error;
	aa = argbuf;
	if aa = "sp" then go to special;
	else if aa = "bcd" then go to convert_bcd;
	else if aa = "dart" then go to convert_dartmouth;
	else if aa = "mp" then go to convert_multics_pl1;
	else if aa = "uc" then go to convert_upper_case;
	else if aa = "lc" then go to convert_lower_case;
	else if aa = "to" then go to convert_to;
	else if aa = "from" then go to convert_from;
	else do;
	     call com_err_ (0, procname, "Unrecognized  key - ^a", argptr -> argbuf);
	     return;
	end;
special:
	sp_flag = "1"b;
	from_string = static_from_string;		/* it uses internal static strings */
	to_string = static_to_string;			/* to define the conversion */
	if nargs = 1 then go to print_strings;		/* no problem even if int static strings were not set */
	if static_from_string = "" then if static_to_string = "" then do; /* complain */
		code = error_table_$action_not_performed;
		call com_err_ (code, procname, "^/First use convert_from and convert_to to specify conversion.");
		return;
	     end;
	go to got_nargs;				/* if one string is "" then the strings will be unequal below */

/* This entry converts bcd special characters to corresponding ascii/ebcdic ones */

convert_bcd:
	bcd_flag = "1"b;
	from_string = "ABCDEFGHIJKLMNOPQRSTUVWXYZ%<#&";
	to_string = "abcdefghijklmnopqrstuvwxyz()=+";
	go to start;


convert_dartmouth:
	dart_flag = "1"b;
	from_string = "^_>+='{""?";
	to_string = "'=""<>:+?!";
	go to start;

/* This entry converts all lower case letters to upper case */

convert_upper_case:
	uc_flag = "1"b;
	from_string = "abcdefghijklmnopqrstuvwxyz";
	to_string = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
	go to start;

/* This entry converts all upper case letters to lower case. */

convert_lower_case:
	lc_flag = "1"b;
	from_string = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
	to_string = "abcdefghijklmnopqrstuvwxyz";
	go to start;

/* This entry converts from multics pl1 format to 360 pl1 format */

convert_multics_pl1:
	mult_flag = "1"b;
	from_string = "abcdefghijklmnopqrstuvwxyz	""";
	to_string = "ABCDEFGHIJKLMNOPQRSTUVWXYZ '";
	go to start;


/* The above entries all have max_nargs set to 3.
   If no nore args are given the appropriate from_string and to_string will be printed.
   If one or two more args are given the first is the pathname of the segment to be converted.
   If one more arg is given the converted copy will replace the original.
   If two more args are given then the converted copy will be placed in arg2.

   The entries below set max_nargs to 2.
   Only one more arg may be given, either the from_string or the to_string.
   */

/* This entry causes from string to be reset */

convert_from:
	fs_flag = "1"b;
	max_nargs = 2;go to start;

/* This entry causes to string to be reset */

convert_to:
	ts_flag = "1"b;
	max_nargs = 2;go to start;

/* The body of the command starts here. */
start:						/* all keys come here except "sp" */
	if nargs = 1 then do;
	     if max_nargs = 3 then go to print_strings;	/* automatic copies have been set */
	     else do;				/* should have gotten a string to set */
		code = error_table_$noarg;		/* set up status code */
error:		call com_err_ (code, procname);	/* come here if nothing to say besides code */
		go to RETURN;			/* go through cleanup */
	     end;
	end;

got_nargs: if nargs > max_nargs then do;		/* here if nargs ^= 0 */
	     code = error_table_$too_many_args;		/* set status code */
	     go to error;				/* and print a simple message */
	end;

	call cu_$arg_ptr (2, argptr, arglen, code);	/* get ptr to arg we know is there */
	if code ^= 0 then go to error;		/* suprise */

	if max_nargs = 2 then do;			/* setting a string */
	     if arglen > 128 then do;			/* cmust not be too long */
		call com_err_ (0, procname, "The string length (^d) exceeds 128 characters.", arglen);
		return;				/* nothing to clean up */
	     end;
	     if fs_flag then static_from_string = argbuf; /* copy arg to proper */
	     else if ts_flag then static_to_string = argbuf; /* internal static string */
	     return;				/* and just return */
	end;

	if sp_flag & length (from_string) ^= length (to_string) then do; /* be sensible */
	     code = error_table_$action_not_performed;	/* let user know nothing happened */
	     call com_err_ (code, procname, "^/Length of from_string (^d) is not equal to length of to_string (^d).",
		length (from_string), length (to_string)); /* give useful information */
	     return;				/* and give up */
	end;
	call expand_path_ (argptr, arglen, addr (dir), addr (entry), code); /* get absolute pathname */
	if code ^= 0 then do;			/* can't */
error_tell_arg: call com_err_ (code, procname, argptr -> argbuf); /* here to tell user which arg loses */
	     go to RETURN;				/* go through cleanup */
	end;

	call establish_cleanup_proc_ (cleanup);		/* dont leave a mess in any case */

	call hcs_$initiate_count (dir, entry, "", btcnt, 1, inptr, code); /* get ptr to seg to be converted */
	if inptr = null then do;			/* could not initiate if */
error_tell_dirent: call com_err_ (code, procname, "^a>^a", dir, entry); /* here to tell losing pathname */
	     go to RETURN;				/* go though cleanup */
	end;
	charnum = divide (btcnt+8, 9, 24, 0);		/* compute number of characters */

	tempname = "cvc_temp." || unique_chars_ ("0"b);	/* name for temp seg is reasonable & unique */
	call hcs_$make_seg ("", tempname, "", 1011b, tempptr, code); /* create a temporary seg */
	if tempptr = null then do;			/* could not create it */
	     call com_err_ (code, procname,		/* tell user what happened */
		"Unable to create ^a in process directory.", tempname); /* and why */
	     go to RETURN;				/* go through cleanup */
	end;

	if nargs = 3 then do;			/* don't write back into original seg */
	     call cu_$arg_ptr (3, argptr, arglen, code);	/* get name of output seg */
	     if code ^= 0 then go to error;		/* give simple message and return */
	     call expand_path_ (argptr, arglen, addr (dir), addr (entry), code); /* convert arg to abs path */
	     if code ^= 0 then go to error_tell_arg;	/* print errmessage, which arg lost, and return */
	     call hcs_$make_seg (dir, entry, "", 1011b, outptr, code); /* create output seg if does not exist */
	     if outptr = null then go to error_tell_dirent; /* tell dir and entry since we know which */
	end;
	else outptr = inptr;			/* modify original seg */

/* Here we do conversion.  to take advantage of EIS we convert large
blocks at a time.  To take advantage of the MVT instruction we must
use constants in the translate builtin. */
	do j = 1 to charnum by 16384;
	     i = min (16384, charnum-j+1);

	     if bcd_flag then
		substr (tempptr -> string, 1, i) = translate
		(substr (inptr -> string, 1, i), "abcdefghijklmnopqrstuvwxyz()=+", "ABCDEFGHIJKLMNOPQRSTUVWXYZ%<#&");
	     else if dart_flag then
		substr (tempptr -> string, 1, i) = translate
		(substr (inptr -> string, 1, i), "^_>+='{""?", "'=""<>:+?!");
	     else if lc_flag then
		substr (tempptr -> string, 1, i) = translate
		(substr (inptr -> string, 1, i), "abcdefghijklmnopqrstuvwxyz", "ABCDEFGHIJKLMNOPQRSTUVWXYZ");
	     else if uc_flag then
		substr (tempptr -> string, 1, i) = translate
		(substr (inptr -> string, 1, i), "ABCDEFGHIJKLMNOPQRSTUVWXYZ", "abcdefghijklmnopqrstuvwxyz");
	     else if mult_flag then
		substr (tempptr -> string, 1, i) = translate
		(substr (inptr -> string, 1, i), "abcdefghijklmnopqrstuvwxyz	""", "ABCDEFGHIJKLMNOPQRSTUVWXYZ '");
	     else if sp_flag then
		substr (tempptr -> string, 1, i) = translate
		(substr (inptr -> string, 1, i), to_string, from_string);
	     tempptr = addrel (tempptr, 4096);
	     inptr = addrel (inptr, 4096);
	end;
	call hcs_$set_bc_seg (tempptr, 9*charnum, bcode); /* in case of trouble later */

	tempptr = ptr (tempptr, 0);
	call hcs_$fs_move_seg (tempptr, outptr, 1, code); /* truncate out seg, copy temp, trunc temp */
	if code ^= 0 then do;			/* somehow failed */
	     tempptr = null;			/* so we won't delete temp */
	     call com_err_ (code, procname, "^/Converted copy ^a is in process directory.", tempname); /* tell user all is not lost */
	     if bcode ^= 0 then call com_err_ (bcode, procname, tempname); /* warn if bcnt not set on temp */
	     go to RETURN;				/* cleanup and leave */
	end;

	if outptr ^= inptr then do;			/* if same following steps not needed */
	     call hcs_$set_bc_seg (outptr, 9*charnum, code); /* set btcnt on output seg */
	     if code ^= 0 then go to error_tell_dirent;	/* could not set btcnt, tell user the segments name */
	end;

RETURN:						/* come here to exit if anything to cleanup */
	call cleanup;				/* use handy internal proc */

	return;					/* now we can return */
print_strings:					/* here to print strings */
	call ioa_ ("From string = ""^a""", from_string); /* first one */
	call ioa_ ("  To string = ""^a""^/", to_string);	/* then other */
	return;					/* and all is done */

/* --------------------------------------------------------------------------- */

cleanup:	proc;
	     if tempptr ^= null then call hcs_$delentry_seg (tempptr, code); /* delete temp seg */
	     if outptr ^= null then if inptr ^= outptr then call hcs_$terminate_noname (outptr, code);
	     if inptr ^= null then call hcs_$terminate_noname (inptr, code); /* & terminate others */
	end cleanup;
     end convert_characters;
