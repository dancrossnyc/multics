/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


ma_analyze_: proc (a_maip); default (fixed&^precision&^constant) precision (21); /* DEFAULT */
default (constant&real&^decimal) binary;

/* MA_ANALYZE_ prints divergent text, and call the editor if need be. */

/* Recoded Spring '77 RE Mullen */
/* Modified 11/10/80 Jay Pattin for cpa -output_file */

%include merge_ascii_info;
/*  */

dcl  a_maip ptr;

dcl  nd bit (1) aligned;				/* if ^nd then only print new, sans old, context, commentary */
dcl  i fixed bin;
dcl  j fixed bin;
dcl  first_zero fixed bin;
dcl  autox fixed bin;
dcl  ch char (999) based;
dcl  varch char (100) varying;
dcl  context_type char (16);
dcl  Context_type char (16);
dcl  skipchars (0:1) char (1) unal based;
dcl  NL char (1) init ("
");
dcl  ma_edit_ entry (ptr);
dcl (ioa_$ioa_switch, ioa_$ioa_switch_nnl) entry options (variable);

/*  */

/* If we are doing a merge, extra white space improves readability. */
/* This is because we enter the editor between sucessive sets of differences */
/* If we are doing a comparison, more white space is confusing. */

	ma_info_ptr = a_maip;

	nd = ^print_new_lines;			/* nd = non-discriminatory */

	if synchlen = 0 then do;
	     context_type = "at end.";
	     Context_type = "At end";
	end;
	else do;
	     context_type = "preceding:";
	     Context_type = "Preceding:";
	end;

	if have_orig then do;
	     if have_output then do;
		autox = AUTOX ();
		if autox ^= 0 then do;
		     call take_diff (autox);		/* pick up the change */
		     return;			/* all done */
		end;
	     end;
	     if nd then call ioa_$ioa_switch (output_iocb_ptr, "");
	     if difflen (lo) > 0 then do;		/* [a] non null */
		if nd then call print_diff (lo);
		do i = lo + 1 to hi;
		     if difflen (i) > 0 & same_as (i) = 0 then do; /* change */
			if nd then do;
			     varch = textid (i);
			     call set_same_varch (i);
			     if have_output then call ioa_$ioa_switch (output_iocb_ptr, "");
			     call ioa_$ioa_switch (output_iocb_ptr,"Changed by ^a to:", varch);
			end;
			call print_diff (i);
		     end;
		end;
		if nd then do;
		     varch = "";			/* note unchanged texts */
		     call set_same_varch (lo);
		     if varch ^= "" then do;
			if have_output then call ioa_$ioa_switch (output_iocb_ptr, "");
			call ioa_$ioa_switch (output_iocb_ptr, "Unchanged by ^a", varch);
		     end;
		     call set_varch_zero;		/* note deletes */
		     if varch ^= "" then do;
			if have_output then call ioa_$ioa_switch (output_iocb_ptr, "");
			call ioa_$ioa_switch (output_iocb_ptr, "Deleted by ^a, ^a", varch, context_type);
			call print_context (first_zero);
		     end;
		end;
	     end;
	     else do;				/* [a] null: inserts only */
		do i = lo + 1 to hi;
		     if difflen (i) > 0 & same_as (i) = 0 then do; /* insert */
			if have_output then call ioa_$ioa_switch (output_iocb_ptr, "");
			if nd then do;
			     varch = textid (i);
			     call set_same_varch (i);
			     call ioa_$ioa_switch (output_iocb_ptr, "Inserted in ^a:", varch);
			end;
			call print_diff (i);
		     end;
		end;
		if nd then do;
		     call set_varch_zero;
		     if varch ^= "" then do;
			if have_output then call ioa_$ioa_switch (output_iocb_ptr, "");
			call ioa_$ioa_switch (output_iocb_ptr, "Nothing inserted in ^a", varch);
		     end;
		     if have_output then call ioa_$ioa_switch (output_iocb_ptr, "");
		     call ioa_$ioa_switch (output_iocb_ptr, "^a", Context_type);
		     call print_context (lo);
		end;
	     end;
	     if nd then call ioa_$ioa_switch (output_iocb_ptr, "");
	     if have_output then call ma_edit_ (ma_info_ptr);
	     return;
	end;

	else do;					/* no original */
	     call ioa_$ioa_switch (output_iocb_ptr, "");
	     do i = lo to hi;
		if difflen (i) > 0 & same_as (i) = 0 then do;
		     if have_output then call ioa_$ioa_switch (output_iocb_ptr, "");
		     varch = textid (i);
		     call set_same_varch (i);
		     call ioa_$ioa_switch (output_iocb_ptr, "Present in ^a:", varch);
		     call print_diff (i);
		end;
	     end;
	     varch = "";
	     call set_varch_zero;
	     if varch ^= "" then do;
		if have_output then call ioa_$ioa_switch (output_iocb_ptr, "");
		call ioa_$ioa_switch (output_iocb_ptr, "Nothing present in ^a, ^a", varch, context_type);
		call print_context (first_zero);
	     end;
	     call ioa_$ioa_switch (output_iocb_ptr, "");
	     if have_output then call ma_edit_ (ma_info_ptr);
	end;

/*  */
print_diff: proc (x);				/* IP to print diff block if interesting */

dcl  xp ptr;
dcl  x fixed bin;
dcl  sax fixed bin;
dcl (i, j, k) fixed bin;

	     xp = cp (x);
	     k = 0;
	     do i = 1 to difflines (x);
		j = index (substr (xp -> ch, k+1, difflen (x) - k), NL);
		if j = 0 then j = difflen (x) - k;
		if no_line_numbers then
		     call ioa_$ioa_switch_nnl (output_iocb_ptr, "^a",
		     substr (xp -> ch, k+1, j));

		else call ioa_$ioa_switch_nnl (output_iocb_ptr, "^a^d^-^a",
		     textid (x), line (x)+i-1, substr (xp -> ch, k+1, j));

		k = k + j;
	     end;
	     if k ^= difflen (x) then call ioa_$ioa_switch (output_iocb_ptr, "print_diff: k ^= difflen");

	end print_diff;



/*  */
print_context: proc (x);				/* IP to print lines following insert|delete */

dcl  x fixed bin;
dcl (i, j, k) fixed bin;
dcl  restlen fixed bin;
dcl  restline fixed bin;
dcl  restp ptr;
dcl  restrel fixed bin;

	     if synchlen = 0 then return;
	     restlen = len (x) - difflen (x);
	     restrel = 0;
	     restline = line (x) + difflines (x);
	     restp = addr (cp (x) -> skipchars (difflen (x)));

	     do i = 1 to min (synchlines, 5);
		j = index (substr (restp -> ch, restrel+1, restlen), NL);
		if j = 0 then j = restlen;
		if no_line_numbers then
		     call ioa_$ioa_switch_nnl (output_iocb_ptr, "^a",
		     substr (restp -> ch, restrel+1, j));

		else call ioa_$ioa_switch_nnl (output_iocb_ptr, "^a^d^-^a",
		     textid (x), restline, substr (restp -> ch, restrel+1, j));
		if j > 1 then return;
		restline = restline + 1;
		restrel = restrel + j;
		restlen = restlen - j;
	     end;

	end print_context;


/*  */
take_diff: proc (tdi);				/* IP to pick up changed text */

dcl  tdi fixed bin;

	     if difflen (tdi) = 0 then return;		/* evid was deletion */

	     substr (cp (1) -> ch, 1, difflen (tdi))
		= substr (cp (tdi) -> ch, 1, difflen (tdi));
	     cp (1) = addr (cp (1) -> skipchars (difflen (tdi)));
	     tchars (1) = tchars (1) + difflen (tdi);
	     tlines (1) = tlines (1) + difflines (tdi);

	end take_diff;


/*  */
AUTOX:	proc returns (fixed bin);

dcl (ai, aj, ak) fixed bin;

	     aj, ak = 0;

	     do ai = lo + 1 to hi;			/* set ai to first text that changed */
		if same_as (ai) = 0 then do;
		     aj = ai;
		     go to a_other;
		end;
	     end;
	     call ioa_$ioa_switch (output_iocb_ptr, "ma_analyze_: called when blocks dont differ. Non-fatal.");
	     return (lo);				/* take any, eg orig */

a_other:
	     do ai = aj+1 to hi;			/* see if 2nd distinct change OR ident change to ai */
		if same_as (ai) = 0 then return (0);	/* 2nd distinct change, bomb */
		else if same_as (ai) = aj then if ^convergence_ok then return (0);
	     end;

	     if edit (aj) then return (0);
	     else return (aj);

	end AUTOX;

/*  */

set_varch_zero: proc;				/* IP to set varch to zero_len B-G */

dcl  szvi fixed bin;
	     varch = "";
	     do szvi = 3 to hi;
		if difflen (szvi) = 0 then do;
		     if varch = "" then do;
			varch = textid (szvi);
			first_zero = szvi;
		     end;
		     else varch = varch || ", " || textid (szvi);
		end;
	     end;
	end set_varch_zero;


set_same_varch: proc (ssvi);				/* IP to set varch to B-G same as param */

dcl (ssvi, ssvj) fixed bin;

	     do ssvj = ssvi + 1 to hi;
		if same_as (ssvj) = ssvi then do;
		     if varch = "" then varch = textid (ssvj);
		     else varch = varch || ", " || textid (ssvj);
		end;
	     end;

	end set_same_varch;



     end ma_analyze_;
