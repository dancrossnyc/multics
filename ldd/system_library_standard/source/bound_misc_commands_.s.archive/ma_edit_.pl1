/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


ma_edit_: proc (a_info_ptr); default (fixed&^precision&^constant) precision (21); /* DEFAULT */
	default (constant&real&^decimal) binary;

/* MA_EDIT_ performs simple editing for merge_ascii subsystem */
/* Recoded RE Mullen Spring '77 */
/* Modified "x" request to print archive cpt THVV 1980 */

dcl  a_info_ptr ptr;

dcl (i, j, k) fixed bin;
dcl  code fixed bin (35);
dcl (ioa_, ioa_$nnl) entry options (variable);
dcl (iox_$user_input, iox_$user_output) ptr ext;
dcl  iox_$control entry (ptr, char (*) aligned, ptr, fixed bin (35));
dcl  iox_$put_chars entry (ptr, ptr, fixed bin, fixed bin (35));
dcl  iox_$get_line entry (ptr, ptr, fixed bin, fixed bin, fixed bin (35));
dcl  cv_dec_check_ entry (char (*), fixed bin (35), fixed bin);
dcl  cu_$cp entry (ptr, fixed bin, fixed bin (35));

dcl  skipchars (0:1) char (1) unal based;
dcl  ch char (999) based;

dcl (start_line, end_line) fixed bin;
dcl  nl char (1) init ("
");

dcl  temp_ptr ptr;					/* temps for dealing with block of text */
dcl  dirn char (168);
dcl  en char (32);
dcl  cpt char (32);
dcl  temp_chars fixed bin;
dcl  temp_lines fixed bin;


dcl (rbuff, buff) char (200);
dcl (rnc, nc) fixed bin;
dcl  n fixed bin;
dcl  req char (n) based (addr (buff));
						/* ENDCL */

/*  */
%include merge_ascii_info;
/*  */

	ma_info_ptr = a_info_ptr;

	difflen (1) = 0;
	difflines (1) = 0;
	line (1) = tlines (1) + 1;

pedit:	call ioa_ ("EDIT");
	rnc = 0;

read_loop:

/* DEBUGGING */
/*
   call ioa_ ("
   i	tp	tl	tc	cp	dl	dc	line");
   do i = 1 to hi;
   call ioa_ ("^10d  ^p^-^10d^10d  ^p^-^10d^10d^10d",
   i,
   tptr (i), tlines (i), tchars (i), cp (i), difflines (i), difflen (i), line (i));
   end;
   /* END DEBUGGING */
	if rnc = 0 then do;
	     call iox_$get_line (iox_$user_input, addr (rbuff), 200, rnc, code);
	end;

	if substr (rbuff, 1, 2) = "e " then do;		/* EXECUTE --- call cp with rest of line */
	     substr (rbuff, 1, 1) = "";
	     call cu_$cp (addr (rbuff), rnc, code);
	     rnc = 0;
	     go to read_loop;
	end;

	nc = index (substr (rbuff, 1, rnc), " ");
	if nc = 0 then nc = rnc;
	substr (buff, 1, nc) = substr (rbuff, 1, nc);
	if nc ^= rnc then substr (rbuff, 1, rnc-nc)
	     = substr (rbuff, nc + 1, rnc-nc);		/* shift whats left */
	rnc = rnc - nc;				/* accout for what we took */

	n = nc - 1;				/* get real number of chars in req */


	if req = "" then;				/* ignore null req */
	else if n = 1 then do;			/* some one char req */
	     if req = "x" then do;			/* STATUS --- relate texids to paths, etc. */
		call ioa_ ("text   line nos.^-path");
		do i = 2 to ma_max_texts, 1;
		     if tptr (i) ^= null () then do;
			if i = 1 then do;		/* print true output path, not temp */
			     dirn = op_dirname;
			     en = op_ename;
			     cpt = "";
			end;
			else do;
			     dirn = dirname (i);
			     en = ename (i);
			     cpt = component (i);
			end;
			if difflines (i) = 0 then
			     call ioa_ ("^a^-^-^a>^a^[::^a^;^s^]",
			     textid (i), dirn, en, (cpt ^= ""), cpt);
			else if difflines (i) = 1 then
			     call ioa_ ("^a^9d^-^a>^a^[::^a^;^s^]",
			     textid (i), line (i), dirn, en, (cpt ^= ""), cpt);
			else call ioa_ ("^a^9d,^d^-^a>^a^[::^a^;^s^]",
			     textid (i), line (i), line (i) + difflines (i) - 1, dirn, en, (cpt ^= ""), cpt);
		     end;
		end;
	     end;
	     else go to UNREQ;			/* no other single char is valid req */
	end;
	else if req = "input" then do;		/* INPUT --- accept "none of the above" */
	     if rnc > 0 then go to MB_LAST;
	     call ioa_ ("INPUT");
i_loop:	     call iox_$get_line (iox_$user_input, addr (rbuff), 200, rnc, code);
	     if rnc = 2 then if substr (rbuff, 1, 1) = "." then go to pedit;
	     substr (cp (1) -> ch, difflen (1) + 1, rnc) = substr (rbuff, 1, rnc);
	     tchars (1) = tchars (1) + rnc;
	     tlines (1) = tlines (1) + 1;
	     difflen (1) = difflen (1) + rnc;
	     difflines (1) = difflines (1) + 1;
	     go to i_loop;
	end;
	else if req = "go" then do;			/* GO --- return from editor to compare loop */
	     if rnc > 0 then do;
MB_LAST:		call ioa_ ("^a must be the last request on a line.", req);
		go to RESET;
	     end;
	     cp (1) = addr (cp (1) -> skipchars (difflen (1)));
	     return;
	end;
	else if req = "help" then do;			/* HELP --- tell requests possible */
	     call ioa_ ("Edit requests:");
	     call ioa_ ("bk	copy previously printed block from text b.");
	     call ioa_ ("bx,yk	copy lines x though y from segment b.");
	     call ioa_ ("bx,yp	print lines x through y from segment b.");
	     call ioa_ ("md	undo all edit requests since changes last displayed.");
	     call ioa_ ("input	enter input mode.");
	     call ioa_ (".	return from input mode to edit mode.");
	     call ioa_ ("go	exit editor and continue comparison.");
	     call ioa_ ("quit	abort merge.");
	     call ioa_ ("e <command_line> execute rest of line.");
	     call ioa_ ("x	provide text status.");
	     call ioa_ ("help	provide help to user.");
	end;
	else if req = "quit" then do;			/* QUIT --- abort this merge */
	     if rnc > 0 then go to MB_LAST;
	     go to abort_label;
	end;
	else if substr (req, n, 1) = "p" then do;	/* PRINT --- display lines */
	     call GET_ADDR;
	     call PRINTEMPS (i);
	end;
	else if substr (req, n, 1) = "k" then do;	/* KOPY --- take specified lines */
	     call GET_ADDR;
	     call TAKE_TEMPS;
	end;
	else if substr (req, n, 1) = "d" then do;	/* DELETE --- undo recent choices */
	     if n ^= 2 then do;
DELIMP:		call ioa_ ("cannot ""^a"": the only delete request possible is ""md""", req);
		go to RESET;
	     end;
	     if substr (req, 1, 1) ^= "m" then go to DELIMP;
	     tchars (1) = tchars (1) - difflen (1);
	     tlines (1) = tlines (1) - difflines (1);
	     difflen (1), difflines (1) = 0;
	end;
	else do;					/* LOSE */
UNREQ:	     call ioa_ ("cannot ""^a"": unrecognized request", req);
	     go to RESET;
NO_BLOCK:	     call ioa_ ("cannot ""^a"": current block is empty", req);
	     go to RESET;
RESET:	     code = 0;
	     rnc = 0;
	     call iox_$control (iox_$user_input, "resetread", null (), 0);
	end;
	go to read_loop;

/*  */

GET_ADDR:	proc;					/* IP to determine addressed lines */

	     i = index (ma_text_ids, substr (req, 1, 1));
	     if i = 0 then do;
BAD_TID:		call ioa_ ("cannot ""^a"": invalid text identifier ""^a""", req, substr (req, 1, 1));
		go to RESET;
	     end;
	     if tptr (i) = null () then go to BAD_TID;
	     if n = 2 then do;			/* entire block */
		if difflen (i) = 0 then go to NO_BLOCK; /* null block */
		temp_chars = difflen (i);
		temp_lines = difflines (i);
		temp_ptr = cp (i);
		start_line = line (i);
	     end;
	     else do;
		call READ_LINNOS (i, 1);
		call SET_TEMPS (i);
	     end;

	end GET_ADDR;

/*  */

TAKE_TEMPS: proc ;					/* IP to pick up changed text */


	     if temp_chars = 0 then return;		/* evid was nothing there */

	     substr (cp (1) -> ch, difflen (1) + 1, temp_chars)
		= substr (temp_ptr -> ch, 1, temp_chars);
	     tchars (1) = tchars (1) + temp_chars;
	     tlines (1) = tlines (1) + temp_lines;
	     difflen (1) = difflen (1) + temp_chars;
	     difflines (1) = difflines (1) + temp_lines;

	end TAKE_TEMPS;

/*  */

READ_LINNOS: proc (segx, oplen);
dcl  segx fixed bin;				/* segment index */
dcl  oplen fixed bin;				/* length of operator: eg "p" */
dcl  LC fixed bin;
dcl  cv_dec_check_ entry (char (*) aligned, fixed bin (35)) returns (fixed bin);

dcl  x fixed bin;

	     LC = n - oplen - 1;			/* subtract oplen and textid from req len */

	     if difflen (segx) = 0 then do;		/* "<" and ">" are undefined */
		if index (substr (buff, 2, LC), "<") > 0 then go to NO_BLOCK;
		else if index (substr (buff, 2, LC), ">") > 0 then go to NO_BLOCK;
	     end;

	     x = index (substr (buff, 2, LC), ",");
	     if x = 1 then do;
		call ioa_ ("cannot ""^a"": no numeral before comma", req);
		go to RESET;
	     end;
	     else if x = LC then do;
		call ioa_ ("cannot ""^a"": no numeral after comma", req);
		go to RESET;
	     end;
	     else if x = 0 then do;			/* only one number given */
		if substr (buff, 2, LC) = "<" then start_line = line (segx);
		else if substr (buff, 2, LC) = ">" then start_line = line (segx) + difflines (segx) -1;
		else do;
		     start_line = cv_dec_check_ (substr (buff, 2, LC), code);
		     if code ^= 0 then do;
			call ioa_ ("cannot ""^a"": bad line number ^a", req, substr (buff, 2, LC));
			go to RESET;
		     end;
		end;
		end_line = start_line;
	     end;
	     else do;				/* comma and two numbers? */
		if substr (buff, 2, x-1) = "<" then start_line = line (segx);
		else do;				/* ">,N" not accepted */
		     start_line = cv_dec_check_ (substr (buff, 2, x-1), code);
		     if code ^= 0 then do;
			call ioa_ ("cannot ""^a"": bad line number ^a", req, substr (buff, 2, x-1));
			go to RESET;
		     end;
		end;
		if substr (buff, 2+x, LC-x) = ">" then end_line = line (segx) + difflines (segx) - 1;
		else do;				/* "N,<" not accepted */
		     end_line = cv_dec_check_ (substr (buff, 2+x, LC - x), code);
		     if code ^= 0 then do;
			call ioa_ ("cannot ""^a"": bad line number ^a", req, substr (buff, 2+x, LC-x));
			go to RESET;
		     end;
		end;
	     end;

	     if start_line <= 0 then do;
		call ioa_ ("cannot ""^a"": neg line number ^d", req, start_line);
		go to RESET;
	     end;

	     if end_line - start_line < 0 then do;
		call ioa_ ("cannot ""^a"": start ^d  > end ^d", req, start_line, end_line);
		go to RESET;
	     end;

	end READ_LINNOS;

/*  */

SET_TEMPS: proc (x);				/* IP to set (global) tp, tc, temp_lines  */
dcl  x fixed bin;
dcl  xptr ptr;
dcl  xchars fixed bin;				/* total chars */
						/* */
dcl  tsc fixed bin;
dcl  N fixed bin;

dcl (i, j, k) fixed bin;

	     xptr = tptr (x);
	     xchars = tchars (x);
	     k = 0;

	     do i = 1 to end_line;
		if k >= xchars then do;
		     call ioa_ ("cannot ""^a"": seg ^a has ^d lines", req, textid (x), i - 1);
		     go to RESET;
		end;
		if i = start_line then do;		/* make temp_ptr point at start of this line */
		     temp_ptr = addr (xptr -> skipchars (k));
		     tsc = k;
		end;
		j = index (substr (xptr -> ch, k + 1, xchars - k), nl);
		if j = 0 then j = xchars - k;		/* take all if no newline */
		k = k + j;
	     end;

	     temp_chars = k - tsc;
	     temp_lines = end_line - start_line + 1;

	end SET_TEMPS;


/*  */

PRINTEMPS: proc (x);				/* IP to print (temp_ptr , temp_chars) */

dcl (i, j, k) fixed bin;
dcl  x fixed bin;

	     k = 0;

	     do i = 1 to temp_lines;
		j = index (substr (temp_ptr -> ch, k+1, temp_chars - k), nl);
		if j = 0 then j = temp_chars - k;
		call ioa_$nnl ("^a^d^-^a",
		     textid (x), start_line + i - 1, substr (temp_ptr -> ch, k+1, j));
		k = k + j;
	     end;
	     if k ^= temp_chars then call ioa_ ("PRINTEMPS: k ^= temp_chars"); /* DEBUG */

	end PRINTEMPS;


     end ma_edit_;
