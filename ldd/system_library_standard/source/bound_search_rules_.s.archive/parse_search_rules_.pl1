/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


parse_search_rules_: proc (a_dirname, a_ename, a_caller, a_pointer, a_code);

/* This proceedure sets up pointers corresponding to the path names
   found in the search rule segment.  It also verifies that the
   segments so initiated is a directory. */

dcl (a_dirname, a_ename, a_caller) char (*);

dcl  a_pointer ptr;

dcl  a_code fixed bin (35);
dcl  code fixed bin (35);
dcl  bitcnt fixed bin (24);
dcl  cc fixed bin;					/* segment character count */
dcl  tcc fixed bin;					/* total character count */
dcl  bn fixed bin;					/* count to next blank */
dcl  nln fixed bin;					/* count to nex new link */
dcl  ncl fixed bin;					/* number of characters left */
dcl  size fixed bin;				/* size of search rule name */
dcl  blank_flag fixed bin;				/* =1 if no more blanks in seg */
dcl  src fixed bin;					/* search rule counter */
dcl  ii fixed bin;
dcl  i fixed bin;

dcl  type fixed bin (2);

dcl (dname, dir, path) char (168),
    (ename, entry, caller) char (32),
     subname char (12),
     string char (ncl) based,
     ch (2) char (1) based unaligned;

dcl  nl char (1) static options (constant) init ("
"),
     blank char (1) static options (constant) init (" ");

dcl 1 sr based aligned,				/* output name structure */
    2 number fixed bin,
    2 name (22) char (168);

dcl (ptr, pptr, dirp, enp,
     sp, srptr) ptr;
dcl  segp ptr init (null);

dcl  hcs_$status_minf entry (char (*), char (*), fixed bin (1), fixed bin (2),
     fixed bin (24), fixed bin (35));
dcl  hcs_$get_system_search_rules entry (ptr, fixed bin (35));
dcl  hcs_$initiate entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2),
     ptr, fixed bin (35));
dcl  com_err_ entry options (variable);
dcl  hcs_$terminate_noname entry (ptr, fixed bin (35));
dcl  expand_path_ entry (ptr, fixed bin, ptr, ptr, fixed bin (35));

dcl (error_table_$notadir,
     error_table_$argerr) ext fixed bin (35);

%include system_dft_sr;
%include search_rule_flags;

dcl 1 system_rules like dft_sr_arg aligned;

dcl  null builtin;

	dirp = addr (dir);				/* initiate some pointers */
	enp = addr (entry);
	code, blank_flag = 0;
	dname = a_dirname;				/* copy args */
	ename = a_ename;
	caller = a_caller;
	srptr = a_pointer;
	call hcs_$status_minf (dname, ename, 1, type, bitcnt, code);
	if code ^= 0 then do;
	     call com_err_ (code, caller, " ^a>^a", dname, ename);
	     go to fin;
	end;
	if type ^= 1 then do;			/* this is not a data segment */
	     code = error_table_$argerr;
	     call com_err_ (code, caller, "^/ ^a>^a  is not a search segment ", dname, ename);
	     go to fin;
	end;
	if bitcnt = 0 then go to search_rule_err;
	call hcs_$initiate (dname, ename, "", 0, 1, segp, code);
	if segp = null then do;
	     if code ^= 0 then go to init_err;
	     else code = error_table_$argerr;
init_err:	     call com_err_ (code, caller, "^/search segment ^a>^a was not initiated", dname, ename);
	     go to fin;
	end;

/* initiate parse */

	tcc = divide (bitcnt, 9, 17, 0);		/* get the total character count */
	if tcc = 0 then do;
search_rule_err: code = error_table_$argerr;
	     call com_err_ (code, caller, "^/search segment ^a>^a was empty", dname, ename);
	     go to fin;
	end;

	xsp = addr (system_rules);
	call hcs_$get_system_search_rules (xsp, code);
	if code ^= 0 then do;
	     call com_err_ (code, caller, "Cannot read dft rules");
	     go to fin;
	end;

	cc = 1;					/* start with first character */
	ncl = tcc;				/* start with all characters left */
	src = 1;					/* start with search rule count = 1 */

parse:
	sp = addr (segp -> ch (cc));			/* pointer to new string */
	if blank_flag = 1 then go to new_line;		/* no more blanks in segment */
	if segp -> ch (cc) = blank then do;		/* remove leading blanks */
	     do i = cc to tcc while (segp -> ch (i) = blank); end;
	     cc = i;
	end;
	ncl = tcc - cc + 1;				/* update characters left */
	if ncl <= 0 then go to nl_err;		/* segment must end with a new line */
	sp = addr (segp -> ch (cc));			/* pointer to remaining string */
new_line:	nln = index (sp -> string, nl) - 1;		/* count to next new line */
	if nln < 0 then do;				/* must end with a new line */
nl_err:	     code = error_table_$argerr;
	     call com_err_ (code, caller, "^/^a>^a search segment must end with a new line", dname, ename);
	     go to fin;
	end;
	if nln = 0 then go to next;			/* try next line */
	if blank_flag = 1 then do;			/* no more blanks so don't fool around */
	     size = nln;
	     go to handle_string;
	end;
	bn = index (sp -> string, blank);		/* count to next blank */
	if bn = 0 then do;				/* no more blanks */
	     blank_flag = 1;
	     size = nln;
	     go to handle_string;
	end;
	if bn < nln then do;			/* find out how much to copy */
	     size = bn;				/* size of string to first blank */
	     do i = bn + 1 to nln;			/* check for imbedded blanks */
		if sp -> ch (i) ^= blank then do;
		     code = error_table_$argerr;
		     call com_err_ (code, caller, "^/search segment ^a>^a, imbedded blank in string ^a",
			dname, ename, substr (sp -> string, 1, nln));
		     go to fin;
		end;
	     end;
	     go to handle_string;			/* no imbedded blanks so copy it */
	end;
	else size = nln;

handle_string: srptr -> sr.name (src) = substr (sp -> string, 1, size); /* copy the string */

	if sp -> ch (1) ^= ">" then go to check_code;	/* absolute pathnames begin with > */
	pptr = addr (srptr -> sr.name (src));
	call expand_path_ (pptr, size, dirp, enp, code);
	if code ^= 0 then do;
	     subname = "expand_path_";
sub_err:	     call com_err_ (code, caller, "^a in search segment ^a>^a", srptr -> sr.name (src), dname, ename);
	     go to fin;
	end;

	call hcs_$status_minf (dir, entry, 1, type, bitcnt, code);
	if code ^= 0 then do;
	     subname = "status_minf";
	     go to sub_err;
	end;
	if type ^= 2 then do;
	     code = error_table_$notadir;
	     call com_err_ (code, caller, "^/improper search rule ^a, search segment ^a>^a",
		srptr -> sr.name (src), dname, ename);
	     go to fin;
	end;

next:
	cc = cc + nln + 1;				/* position to next line */
	if cc < tcc then do;			/* continue if something left */
	     ncl = tcc - cc + 1;			/* find number of characters remaining */
	     src = src + 1;				/* bump search rule count */
	     if src > 22 then do;			/* too many search rules */
		code = error_table_$argerr;
		call com_err_ (code, caller, "^/too many search rules in search segment ^a>^a",
		     dname, ename);
		go to fin;
	     end;
	     go to parse;				/* do the next one */
	end;
	srptr -> sr.number = src;			/* put away search rule count */

fin:	if segp ^= null then call hcs_$terminate_noname (segp, (0));
	a_code = code;
	return;
check_code:
	do ii = 1 to hbound (search_rule_names, 1);
	     if search_rule_names (ii) = srptr -> sr.name (src) then go to next;
	end;
	do ii = 1 to dft_sr_arg.ntags;
	     if dft_sr_arg.tags (ii).name = srptr -> sr.name (src) then go to next;
	end;
	if srptr -> sr.name (src) = "home_dir" then go to next;
	if srptr -> sr.name (src) = "process_dir" then go to next;
	code = error_table_$argerr;
	call com_err_ (code, caller, "^/bad string ^a in search segment ^a>^a",
	     srptr -> sr.name (src), dname, ename);
	go to fin;

     end parse_search_rules_;
