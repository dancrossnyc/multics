/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(85-09-18,Spitzer), approve(85-09-18,MCR7272),
     audit(85-12-05,Lippard), install(85-12-16,MR12.0-1001):
     Fix error msgs for delete_search_rules.
  2) change(85-12-17,GDixon), approve(85-12-17,PBF7272),
     audit(85-12-17,Martinson), install(85-12-17,MR12.0-1002):
     Change test to look for non-control-arg instead of a control arg.
  3) change(87-11-05,Lippard), approve(87-11-23,MCR7797),
     audit(88-01-13,GWMay), install(88-01-19,MR12.2-1016):
     Added -no_force, -inhibit_error, -no_inhibit_error.
                                                   END HISTORY COMMENTS */

/* format: off */
add_search_rules: asr: proc;

/* written around August 1972 by C. D. Tavares */
/* Modified April 7, 1973 by C. D. Tavares to add keyword handling and
   prepare for AML submission */
/* Modified 4/13/76 by Steve Herbst */
/* Changed for installation-modifiable keywords 8/76 THVV */
/* Short control arg names -be/-before -af/-after added 09/28/79 S. Herbst */
/* Add -force and remain silent if already in intended position 03/09/81 S. Herbst */

/* Usage is 'add_search_rules pathname (-before or -after pathname2) pathname3 etc...
   Rules are added to end of current search rules unless followed by -after or -before,
   when they will be put after or before the next (existing) search rule.
   Since the rule matching is done by directory unique ID, there is no need to
   type in the rule exactly as hardcore remembers it. Relative pathnames are acceptable. */

dcl  nargs fixed bin,
     explanation char (168) aligned,
     ioa_$rsnnl ext entry options (variable),
     ref_rule char (168) aligned,
     argno fixed bin,
     error_gotten bit (1) aligned initial (""b),
     rule_ids (21) bit (36) aligned,
     new_id bit (36),
    (force_sw, inhibit_err_sw, namedup_sw) bit (1),
     namedup_index fixed,
     after fixed bin,
    (i, j) fixed bin,
     cu_$arg_count ext entry returns (fixed bin),
     (com_err_, com_err_$suppress_name) entry options (variable),
     cu_$arg_ptr ext entry (fixed bin, pointer, fixed bin(21), fixed bin(35)),
     ap pointer,
     al fixed bin (21),
     code fixed bin (35),
     absolute_pathname_ ext entry (char (*), char (*) aligned, fixed bin (35)),
    (addr, hbound, index, null, substr) builtin,
     new_rule char (168) aligned,
     get_pdir_ entry () returns (char (168) aligned),
     user_info_$homedir entry (char (*) aligned),
     hcs_$status_long ext entry (char (*) aligned, char (*), fixed bin, ptr, ptr, fixed bin (35)),
     hcs_$get_search_rules ext entry (pointer),
     hcs_$get_system_search_rules entry (ptr, fixed bin (35)),
    (error_table_$too_many_sr,
     error_table_$no_s_permission,
     error_table_$name_not_found,
     error_table_$badopt,
     error_table_$namedup) ext fixed bin (35),
     place fixed bin,
     arg char (al) based (ap),
     hcs_$initiate_search_rules ext entry (pointer, fixed bin(35)),
     myname char (32);

%include branch_status;
%include system_dft_sr;
%include search_rule_flags;

dcl 1 system_rules aligned like dft_sr_arg;

dcl 1 myrules aligned,
    2 number_of_rules fixed bin,
    2 rules (21) char (168);

	myname = "add_search_rules";
	nargs = cu_$arg_count ();
	if nargs = 0 then do;			/* user probably wants instructions */
usage_error:   call com_err_$suppress_name (0, myname,
		"Usage:  ^a path1 {-before path2} {-after path2} etc.", myname);
	     return;
	end;

	call setup;				/* get current search rules and initialize environment */

/* ----------------------------------------------------------------------------- */

setup:	proc;					/* this initializes our data structure */

	     call hcs_$get_system_search_rules (addr (system_rules), (0));
	     call hcs_$get_search_rules (addr (myrules));

	     do i = 1 to number_of_rules;
		rule_ids (i) = ""b;			/* so we don't garbage out */
		call hcs_$status_long (myrules.rules (i), "", 1, addr (branch_status), null, code);
		if (code = 0 | code = error_table_$no_s_permission)
		then rule_ids (i) = branch_status.unique_id; /* unique id is ok */
		else do;
		     do j = 1 to hbound (search_rule_names, 1); /* it may be a keyword */
			if myrules.rules (i) = search_rule_names (j) then do;
			     substr (rule_ids (i), j, 1) = "1"b; /* give it a "unique" id */
			     go to nxrule;
			end;
		     end;
		end;
nxrule:	     end;


	end setup;

/* ----------------------------------------------------------------------------- */

	force_sw, inhibit_err_sw = "0"b;
	do i = 1 to nargs;
	     call cu_$arg_ptr (i, ap, al, code);
	     if arg = "-force" | arg = "-fc" then force_sw = "1"b;  /* it's global */
	     else if arg = "-no_force" | arg = "-nfc" then force_sw = "0"b;
	     else if arg = "-inhibit_error" | arg = "-ihe" then inhibit_err_sw = "1"b;
	     else if arg = "-no_inhibit_error" | arg = "-nihe" then inhibit_err_sw = "0"b;
	end;

	argno = 0;

another:						/* to process next arg */
	argno = argno + 1;
	call get_and_validate (new_rule, all_done, new_id, error); /* setup next arg */

/* ----------------------------------------------------------------------------- */

get_and_validate: proc (which_rule, no_arg_label, which_id, error_label);
						/* gets unique ID of next arg and processes errors, etc */

dcl  which_rule char (*) aligned,
     which_id bit (36),
     error_label label,
     no_arg_label label;

start_gav:					/* for false starts */
	     call cu_$arg_ptr (argno, ap, al, code);	/* get next arg */
	     if code ^= 0 then go to no_arg_label;	/* no arg */

	     if index (arg, "-") = 1 then
		if arg = "-before" | arg = "-be" | arg = "-after" | arg = "-af" then
		     if error_gotten then do;
			argno = argno+2;
			error_gotten = "0"b;
			go to start_gav;
		     end;
		     else go to usage_error;
		else if arg = "-force" | arg = "-fc" | arg = "-no_force" | arg = "-nfc"
		     | arg = "-inhibit_error" | arg = "-ihe" | arg = "-no_inhibit_error" | arg = "-nihe" then do;
		     argno = argno + 1;
		     go to start_gav;
		end;
		else go to bad_option;

	     if arg = "process_dir" then which_rule = get_pdir_ ();
	     else if arg = "home_dir" then call user_info_$homedir (which_rule);
	     else do;
		call absolute_pathname_ (arg, which_rule, code);
		if code ^= 0 then do;		/* hmmm */
		     explanation = arg;
		     go to error_label;
		end;
	     end;

	     call hcs_$status_long (which_rule, "", 1, addr (branch_status), null, code); /* get unique id of dir */

	     if code ^= 0 & code ^= error_table_$no_s_permission then do;

		which_id = ""b;			/* check for keywords */
		do i = 1 to 3;
		     if search_rule_names (i) = arg then do; /* matches */
			substr (which_id, i, 1) = "1"b; /* generate our "unique" id for matching */
			which_rule = search_rule_names (i); /* this is the string we want */
			return;
		     end;
		end;
		do i = 1 to system_rules.ntags;
		     if system_rules.tags (i).name = arg then do;
			which_rule = arg;		/* can introduce dupe by this path. always could */
			return;
		     end;
		end;

		explanation = which_rule;		/* pathname not found */
		go to error_label;
	     end;

	     which_id = branch_status.unique_id;	/* we have valid dir, return its id */

	     return;

	end get_and_validate;

/* ----------------------------------------------------------------------------- */

	if number_of_rules = hbound (rule_ids, 1) then do;  /* can't add another */
	     code = error_table_$too_many_sr;
	     go to error_fin;
	end;

	error_gotten = ""b;				/* none yet */
	namedup_sw = ""b;

	do i = 1 to number_of_rules;			/* hardcore accepts duplications, but we won't */
	     if (rule_ids (i) = new_id & new_id ^= ""b) | myrules.rules (i) = new_rule then do; /* rule already there */
		if force_sw then do;		/* delete the old occurrence */
		     number_of_rules = number_of_rules - 1;
		     do i = i to number_of_rules;
			myrules.rules (i) = myrules.rules (i + 1);
			rule_ids (i) = rule_ids (i + 1);
		     end;
		end;
		else do;				/* complain later if not intended for same place */
		     namedup_sw = "1"b;
		     namedup_index = i;
		end;
	     end;
	end;

next_arg:
	argno = argno + 1;				/* see if there is a position option */
	call cu_$arg_ptr (argno, ap, al, code);
	if code ^= 0 then do;			/* no more args */
one_string:					/* add this one to end */
	     if namedup_sw then
		if namedup_index = number_of_rules then go to all_done;  /* already in right place */
		else do;
namedup_error:	   if ^inhibit_err_sw then do;
		      code = error_table_$namedup;
		      call ioa_$rsnnl ("^a already elsewhere in search path.", explanation, 0, new_rule);
		      go to error;
		      end;
		   end;

	     place = number_of_rules + 1;
	     argno = argno - 1;			/* so we will finish when we try */
	     go to simple_add;
	end;

	if index (arg, "-") ^= 1 then go to one_string;	/* not an option, add last arg to end */
	else if arg = "-force" | arg = "-fc" then go to next_arg;
	else if arg = "-no_force" | arg = "-nfc" then go to next_arg;
	else if arg = "-inhibit_error" | arg = "-ihe" then go to next_arg;
	else if arg = "-no_inhibit_error" | arg = "-nihe" then go to next_arg;
	else if arg = "-before" | arg = "-be" then after = 0;
	else if arg = "-after" | arg = "-af" then after = 1;
	else do;					/* and yell if neither */
bad_option:    call com_err_ (error_table_$badopt, myname, "^a", arg);
	     return;
	end;

	explanation = "";
	argno = argno + 1;				/* if we are here, we have had a position option */
	call get_and_validate (ref_rule, error, branch_status.unique_id, error); /* get what we are supposed to add after or before */

	do i = 1 to number_of_rules;			/* search for it */
	     if rule_ids (i) = branch_status.unique_id & branch_status.unique_id ^= ""b then go to found_ref; /* unique id's match */
	     if myrules.rules (i) = ref_rule then go to found_ref; /* pathnames match */
	end;

	code = error_table_$name_not_found;		/* not there, can't add before or after it */
	call ioa_$rsnnl ("^a is not in search path.", explanation, 0, ref_rule);
	go to error;

found_ref:
	if namedup_sw then
	     if after = 0 /* -before */ then
		if namedup_index = i - 1 then go to another;  /* already there; remain silent */
		else go to namedup_error;
	     else if namedup_index = i + 1 then go to another;  /* remain silent */
		else go to namedup_error;

	place = i + after;				/* ordinal number for new rule */

	do i = number_of_rules to place by -1;		/* move all the others up one */
	     myrules.rules (i+1) = myrules.rules (i);
	     rule_ids (i+1) = rule_ids (i);		/* so we don't lose track of correspondence */
	end;

simple_add:
	myrules.rules (place) = new_rule;		/* put it in */
	rule_ids (place) = new_id;
	number_of_rules = number_of_rules + 1;

	go to another;				/* and do it again! */

error:	call com_err_ (code, myname, explanation);	/* make user feel bad */
	error_gotten = "1"b;			/* to skip any following "-after" or "-before" */
	go to another;				/* do it again */

error_fin: call com_err_ (code, myname, "While processing ^a", new_rule); /* bad error, give up */
all_done:
	call hcs_$initiate_search_rules (addr (myrules), code); /* hand them to hardcore */
	if code ^= 0 then call com_err_ (code, myname);	/* hardcore ungrateful */

	return;

delete_search_rules: dsr: entry;

	myname = "delete_search_rules";
	nargs = cu_$arg_count ();
	if nargs = 0 then do;			/* user wants explanation, probably */
	     call com_err_$suppress_name (0, myname,
		"Usage:  ^a paths", myname);
	     return;
	end;

	call setup;				/* get present rules */

	do argno = 1 to nargs;			/* thru all args */

	     call get_and_validate (ref_rule, del_error, branch_status.unique_id, del_error); /* set up for id match */

	     do i = 1 to number_of_rules;		/* find it */
		if rule_ids (i) = branch_status.unique_id & branch_status.unique_id ^= ""b then go to del_rule; /* id's match */
		if myrules.rules (i) = ref_rule then go to del_rule; /* pathnames match */
	     end;

	     code = error_table_$name_not_found;	/* isn't in search rules */
	     call ioa_$rsnnl ("^a not in search path.", explanation, 0, ref_rule);
del_error:     call com_err_ (code, myname, explanation);	/* yell at user again */
	     go to endloop;

del_rule:	     do i = i to number_of_rules - 1;		/* scruntch them all down */
		myrules.rules (i) = myrules.rules (i+1);
		rule_ids (i) = rule_ids (i+1);
	     end;

	     number_of_rules = number_of_rules - 1;	/* one away */

endloop:	end;					/* until we are all done */

	go to all_done;

     end add_search_rules;
