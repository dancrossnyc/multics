/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


set_search_rules: ssr:
     procedure options (variable);

/* Created 770322 by PG from old version that was combined with set_search_dirs. */
/* Add -default control arg 06/10/80 S. Herbst */

/* based */

dcl arg char (arg_len) based (arg_ptr);

/* automatic */

dcl 1 search_rules,					/* the search rule structure */
    2 num fixed bin,				/* the number of search rules */
    2 names (21) char (168) aligned;			/* the search rules */

dcl (dn, path) char (168);
dcl en char (32);

dcl (default_sw, got_path_sw) bit (1);

dcl arg_ptr ptr;

dcl (arg_count, arg_len, i) fixed bin;
dcl code fixed bin (35);


dcl error_table_$badopt fixed bin (35) ext;
dcl error_table_$segknown fixed bin (35) ext;

dcl (active_fnc_err_, com_err_, com_err_$suppress_name) entry options (variable);
dcl cu_$af_return_arg entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl expand_pathname_ entry (char (*), char (*), char (*), fixed bin (35));
dcl hcs_$get_search_rules entry (ptr);
dcl hcs_$initiate_search_rules entry (ptr, fixed bin (35));
dcl ioa_ entry options (variable);
dcl parse_search_rules_ entry (char (*), char (*), char (*), ptr, fixed bin (35));

dcl (addr, null, substr) builtin;
/**/
	call cu_$af_return_arg (arg_count, null, 0, code);
	if code = 0 then do;
	     call active_fnc_err_ (0, "set_search_rules", "Cannot be called as an active function.");
	     return;
	end;

	default_sw, got_path_sw = "0"b;
	do i = 1 to arg_count;

	     call cu_$arg_ptr (i, arg_ptr, arg_len, code);

	     if substr (arg, 1, 1) = "-" then
		if arg = "-default" | arg = "-df" then do;
		     if got_path_sw then do;		/* multiple specifications */
USAGE:			call com_err_$suppress_name (0, "set_search_rules",
			     "Usage:  set_search_rules path
or:     set_search_rules -default");
			return;
		     end;
		     default_sw, got_path_sw = "1"b;
		end;
		else do;
		     call com_err_ (error_table_$badopt, "set_search_rules", "^a", arg);
		     return;
		end;

	     else if got_path_sw then go to USAGE;
	     else do;
		path = arg;
		got_path_sw = "1"b;
	     end;
	end;

	if ^got_path_sw | default_sw then do;
	     search_rules.num = 1;
	     search_rules.names (1) = "default";
	end;
	else do;
	     call expand_pathname_ (path, dn, en, code);
	     if code ^= 0 then do;
		call com_err_ (code, "set_search_rules", "^a", path);
		return;
	     end;

	     call parse_search_rules_ (dn, en, "set_search_rules", addr (search_rules), code);
	     if code ^= 0 & code ^= error_table_$segknown then return;
	end;

	call hcs_$initiate_search_rules (addr (search_rules), code);
	if code ^= 0 then call com_err_ (code, "set_search_rules", "");

	return;


print_search_rules: psr: entry options (variable);

/* This entry point is called to print the search rules */

	call cu_$af_return_arg (arg_count, null, 0, code);
	if code = 0 then do;
	     call active_fnc_err_ (0, "print_search_rules", "Cannot be called as an active function.");
	     return;
	end;

	if arg_count > 0 then do;
	     call com_err_$suppress_name (0, "print_search_rules", "Usage:  print_search_rules");
	     return;
	end;

	call hcs_$get_search_rules (addr (search_rules));

	do i = 1 to search_rules.num;
	     call ioa_ ("^a", search_rules.names (i));
	end;

end set_search_rules;
