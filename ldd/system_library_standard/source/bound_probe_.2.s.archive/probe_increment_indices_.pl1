/****^  ******************************************************
        *                                                    *
        * Copyright, (C) Honeywell Bull Inc., 1988           *
        *                                                    *
        * Copyright (c) 1972 by Massachusetts Institute of   *
        * Technology and Honeywell Information Systems, Inc. *
        *                                                    *
        ****************************************************** */



/****^  HISTORY COMMENTS:
  1) change(88-09-07,WAAnderson), approve(88-09-30,MCR7952),
     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
     Added format control comment to make the source more readable.
                                                   END HISTORY COMMENTS */


/* format: style1,insnl,ifthendo,indthenelse,^indnoniterdo,^inditerdo,indcom,^indthenbegin,^indprocbody,ind2,ll78,initcol0,dclind4,idind24,struclvlind1,comcol41 */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

probe_increment_indices_:
  procedure (invert_sw, subscript, bounds, n_subscripts, finished,
       almost_finished);

  /* *	PROBE_INCREMENT_INDICES_
   *
   *	Increment a set of array indices to get to the next element in 
   *	a cross-section. The order is determined by invert_sw, which is
   *	set to "1"b for Fortran style subscripts, and "0"b otherwise.
   *
   *	Modification history:
   *	 2 Jun 83, W. Olin Sibert: return almost_finished,
   *	   change calling sequence for a single entrypoint
   *	29 Nov 78, JRD: fix stupidity - index(1) is MOST, not least sig!!!
   *	11 Nov 78, James R. Davis: Initial coding
   */

  dcl invert_sw		bit (1) aligned parameter;
				/* "1"b => Fortran style subscripts */
  dcl subscript		(*) fixed bin (24) parameter;
				/* i/o what we are incrementing */
  dcl bounds		(2, *) fixed bin (24) parameter;
				/* (input) low and high limits */
  dcl n_subscripts		fixed bin parameter;
				/* input: how many dims are meaningful */
  dcl finished		bit (1) aligned parameter;
				/* output: set "1"b when incremented over full range */
  dcl almost_finished	bit (1) aligned parameter;
				/* output: set "1"b when next call will set "finished" */

  dcl LOWER		fixed bin static options (constant) init (1);
  dcl UPPER		fixed bin static options (constant) init (2);
				/**/
  if invert_sw
    then
         call increment (1, (n_subscripts));
    else call increment ((n_subscripts), 1);
  return;



increment:
  procedure (first, last);

  dcl first		fixed bin parameter;
  dcl last		fixed bin parameter;

  dcl idx			fixed bin;
  dcl direction		fixed bin;

  if (last > first)
    then /* This determines the order in which the */
         direction = 1;		/* subscripts are processed */
    else direction = -1;

  idx = first;			/* start with least significant */

  subscript (idx) = subscript (idx) + 1;
  do while (subscript (idx) > bounds (UPPER, idx));
				/* did we just overflow ? */
    subscript (idx) = bounds (LOWER, idx);
				/* then reset to low */
    if (idx = last) then do;		/* have just finished last? */
        finished = "1"b;
        return;
      end;

    idx = idx + direction;		/* now bump next highest */
    subscript (idx) = subscript (idx) + 1;
				/* bump, and test before we exit */
  end;

  finished = "0"b;			/* there is useful work to be finished */

  almost_finished = "1"b;
  do idx = first to last by direction;	/* Is this the last time we'll be here? */
    if (subscript (idx) ^= bounds (UPPER, idx))
      then
	 almost_finished = "0"b;
  end;
  return;
  end increment;

  end probe_increment_indices_;


