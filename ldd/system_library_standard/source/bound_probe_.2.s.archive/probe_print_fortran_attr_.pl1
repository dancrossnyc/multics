/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(88-09-07,WAAnderson), approve(88-09-30,MCR7952),
     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
     Added format control comment to make the source more readable.
                                                   END HISTORY COMMENTS */


/* format: style1,insnl,ifthendo,indthenelse,^indnoniterdo,^inditerdo,indcom,^indthenbegin,^indprocbody,ind2,ll78,initcol0,dclind4,idind24,struclvlind1,comcol41 */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

probe_print_fortran_attr_:
  proc (P_probe_info_ptr, P_refp, P_long_sw, P_code);

  /* Added hexadecimal types 02/07/84 S. Herbst */

  dcl P_probe_info_ptr	ptr parameter;
  dcl P_refp		ptr parameter;
  dcl P_long_sw		bit (1) aligned parameter;
  dcl P_code		fixed bin (35) parameter;


  dcl 1 P_reference		aligned like reference_node based (refp);
  dcl refp		ptr;
  dcl Sym			ptr;	/* to the symbol node to print - used GLOBALLY */
  dcl ioa_$ioa_switch	entry options (variable);
  dcl null		builtin;

  probe_info_ptr = P_probe_info_ptr;
  P_code = 0;
  refp = P_refp;
  Sym = P_reference.symbol_ptr;

  if Sym = null () then do;

      if P_reference.type = ext_procedure_runtime_dtype
        then call ioa_$ioa_switch (probe_info.output_switch, " entrypoint");
        else call ioa_$ioa_switch (probe_info.output_switch,
	        " unknown type (^d)", P_reference.type);
      return;
    end;

  call ioa_$ioa_switch (probe_info.output_switch, "^a ^a ^a",
       get_ft_attr_str (),
       get_ft_class_str (),
       get_ft_dim_str ());

  return;

get_ft_attr_str:
  proc returns (char (168) varying);

  dcl attr_str		char (168) varying;
  dcl t			fixed bin;/* data type */
  dcl fixed		builtin;

  t = fixed (Sym -> runtime_symbol.type, 6);
  if t = ft_integer_dtype
    then attr_str = " integer";
  else if t = ft_real_dtype
    then attr_str = " real";
  else if t = ft_double_dtype
    then attr_str = " double precision real";
  else if t = ft_complex_dtype
    then attr_str = " complex";
  else if t = ft_complex_double_dtype
    then attr_str = " double precision complex ";
  else if t = ft_hex_real_dtype
    then attr_str = " real hexadecimal";
  else if t = ft_hex_double_dtype
    then attr_str = " double precision real hexadecimal";
  else if t = ft_hex_complex_dtype
    then attr_str = " complex hexadecimal";
  else if t = ft_hex_complex_double_dtype
    then attr_str = " double precision complex hexadecimal";
  else if t = ft_external_dtype
    then attr_str = " external";
  else if t = ft_logical_dtype
    then attr_str = " logical";
  else if t = ft_char_dtype then do;
      attr_str = " char*";
      attr_str = attr_str || value (Sym -> runtime_symbol.size, Sym);
      if Sym -> runtime_symbol.aligned
        then attr_str = attr_str || " (word aligned)";
        else attr_str = attr_str || " (byte aligned)";
    end;				/* char dtype */
  else if t = label_constant_runtime_dtype
    then attr_str = " label";
  else if t = int_entry_runtime_dtype |
       t = ext_entry_runtime_dtype |
       t = ext_procedure_runtime_dtype
    then attr_str = " entrypoint";
  else attr_str = " (unknown type)";


  return (attr_str);

  end get_ft_attr_str;

get_ft_class_str:
  proc () returns (char (168) varying);

  dcl class_str		char (168) varying;
  dcl c			fixed bin;/* the storage class */
  dcl (addrel, fixed, index, substr)
			builtin;
  dcl tp			ptr;
  dcl i			fixed bin;
  dcl common_class		fixed bin internal static
			options (constant) init (5);

  dcl ft_class		(15) char (10) internal static
			options (constant) init (
			"automatic", "automatic", "?", "static",
			"common",
			"?", "?", "parameter", "parameter", "?",
			"?", "", "", "?", "?");

  c = fixed (Sym -> runtime_symbol.class, 4);

  class_str = ft_class (c);

  if c = common_class & Sym -> runtime_symbol.level ^= "0"b
    then do;
      tp = addrel (Sym, Sym -> runtime_symbol.father);
      tp = addrel (tp, tp -> runtime_block.name);
				/* point to ACC common name */
      i = index (tp -> acc.string, "|");/* will be name|name */
      if substr (tp -> acc.string, 1, i - 1)
	 ^= "b_" /* default coommon name */
        then do;			/* not in default, so give name */
	class_str = class_str || "/";
	class_str = class_str || substr (tp -> acc.string, 1, i - 1);
	class_str = class_str || "/";
        end;			/* copying common name */
    end;				/* common hacking */

  return (class_str);

  end get_ft_class_str;

get_ft_dim_str:
  proc () returns (char (168) varying);

  dcl dim_str		char (168) varying;
  dcl n			fixed bin;/* number of dims */
  dcl i			fixed bin;/* ranges over all dims */
  dcl fixed		builtin;

  n = fixed (Sym -> runtime_symbol.ndims, 6);

  if n = 0
    then return ("");
    else do;
      dim_str = " dimension (";
      do i = n to 1 by -1;
        if Sym -> runtime_symbol.bounds (i).lower ^= 1
	then do;
	  dim_str =
	       dim_str
	       || value (Sym -> runtime_symbol.bounds (i).lower, Sym);
	  dim_str = dim_str || ":";
	end;
        dim_str =
	   dim_str || value (Sym -> runtime_symbol.bounds (i).upper, Sym);
        if i ^= 1
	then dim_str = dim_str || ",";
      end;
      dim_str = dim_str || ")";
    end;
  return (dim_str);

  end get_ft_dim_str;

value:
  procedure (ev, context) returns (character (10) varying);

  dcl ev			fixed bin (35) parameter;
				/* input: an encoded value */
  dcl context		ptr parameter;
				/* input: to symbol node of ev */

  dcl val			fixed bin (35);
  dcl 1 an_ev		aligned like encoded_value;
  dcl refp		ptr;	/* to data itself, for decoding */
  dcl block_ptr		ptr;
  dcl stack_ptr		ptr;
  dcl linkage_ptr		ptr;
  dcl based_class		bit (4) internal static options (constant)
			init ("0011"b);
  dcl code		fixed bin (35);
  dcl (char, ltrim, null, rtrim, string, unspec)
			builtin;

  dcl stu_$get_implicit_qualifier
			entry (ptr, ptr, ptr, ptr, ptr) returns (ptr);
  dcl stu_$decode_runtime_value
			entry (fixed bin (35), ptr, ptr, ptr, ptr, ptr,
			fixed bin (35)) returns (fixed bin (35));

  /* GLOBAL imports P_reference */

  string (an_ev) = unspec (ev);
  if an_ev.flag = "10"b
    then do;			/* it is encoded */
      stack_ptr = P_reference.source_info_ptr -> source_info.stack_ptr;
      linkage_ptr =
	 P_reference.source_info_ptr -> source_info.seg_info_ptr
	 -> seg_info.linkage_ptr;
      block_ptr = P_reference.source_info_ptr -> source_info.block_ptr;
      refp = P_reference.address_ptr;
      if refp = null
        then if context -> runtime_symbol.class = based_class
				/* can try for implicit */
	     then refp =
		     stu_$get_implicit_qualifier (block_ptr, Sym,
		     stack_ptr, linkage_ptr, block_ptr);
      val = stu_$decode_runtime_value (ev, block_ptr, stack_ptr, linkage_ptr,
	 block_ptr, refp, code);
      if code ^= 0
        then return ("*");
    end;
    else val = ev;

  return (rtrim (ltrim (char (val))));

  end value;

%include probe_references;

%include probe_source_info;

%include probe_seg_info;

%include std_descriptor_types;
%include probe_info;

%include acc;
%include runtime_symbol;


  end probe_print_fortran_attr_;
