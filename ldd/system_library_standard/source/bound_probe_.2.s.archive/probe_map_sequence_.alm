" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Bull Inc., 1987                *
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1982 *
" *                                                         *
" * Copyright (c) 1972 by Massachusetts Institute of        *
" * Technology and Honeywell Information Systems, Inc.      *
" *                                                         *
" ***********************************************************

" HISTORY COMMENTS:
"  1) change(87-06-18,RWaters), approve(87-06-18,MCR7687),
"     audit(87-06-24,Huen), install(87-07-15,MR12.1-1040):
"     Probe error #109: restore indicator registors correctly.
"  2) change(88-10-18,WAAnderson), approve(88-10-18,MCR7952),
"     audit(88-10-18,JRGray), install(88-10-24,MR12.2-1184):
"     Probe source archive split. Part of C-Probe support.
"                                                      END HISTORY COMMENTS


"
"
"	This code is placed in the break map header in order to
"	save registers, call the debugger, and restore the registers.
"	Also has template code sequences for break slots.
"
"		Initial Version:  1 July 1974  --  Jeffrey M. Broughton
"		       Modified:  13 August 1975 by JMB for new break sequence
"		       Modified:  05 May 1977 by B. Greenberg for spri/lpri in
"						break slot s.t. cobol works
"		       Comments added: JRD 12 Sept 79
"
"		       Modified:  12 March 1984 by M. Weaver to copy return ptr as bit string
"		       Modified:  01 May 1984 by S. Herbst to move sreg instruction before new sequence
"			to copy return_ptr, which changes q register.
"                          Modified:  05 May 1987 by R. Waters to correctly restore the indicator registers after continuing from a break.
"

	name	probe_map_sequence_

	equ	probe_extension_size,32

	segdef	code		This is the start of the code sequence
	segdef	return		This is the code to return from a break
	segdef	old_return
	segdef	count		This is the number of words of code here
	segdef	after_code	Slot sequences
	segdef	before_code


	equ	pointers,0	Will store pointer registers at start of extension
	equ	registers,16	And registers at offset 16 (decimal)
	equ	indicators,26	Indicators at offset 26
	equ	slot_ptr,28	Return ptr into slot left here
	equ	old_retptr_value,30	Old value of stack_frame.return_ptr
"	see probe_break_extension.incl.pl1

	equ	break_op,4	Offset in operator pointers of break handler ptr

" 

	even
code:
"
"	called with lb set to return addr in map sequence code
"
	rem			develop address of extension
	eppbp	sp|stack_frame.next_sp,*	grow frame 32 words
	epbpsb	sp|0
	eppbb	bp|probe_extension_size	bb -> new "next_sp"
	even
	inhibit	on
	spribb	sp|stack_frame.next_sp	grow frame to hold extension
	spribb	sb|stack_header.stack_end_ptr
	inhibit	off

	sti	bp|indicators
	sreg	bp|registers		save in extension
	ldaq	sp|stack_frame.return_ptr	pick up old ret_ptr, retaining any indicators
	staq	bp|old_retptr_value		save it
	sprilb	bp|slot_ptr		save before/after-code ret addr

	eppbp	return-*,ic		remember where to return to
	spribp	sp|stack_frame.return_ptr	PL/I to return to "return"
	epplp	sp|stack_frame.lp_ptr,*	restore linkage ptr
	eppap	arg_list-*,ic		set up ptr to arg list
	eppbp	sb|stack_header.trans_op_tv_ptr,*	to operator_pointers_
	callsp	bp|break_op,*		call break handler

return:
	eppbp	sp|stack_frame.next_sp,*	find extension
	eppbp	bp|-probe_extension_size		bp -> extension
	spbpsb	sp|0

	ldaq	bp|old_retptr_value		"get saved info - saved indicators may show as tag bits
	staq	sp|stack_frame.return_ptr
	ldaq	spec_inst-*,ic		"get a pair of clever instructions
	staq	bp|old_retptr_value		"put them into the extension
	ldi	bp|indicators		"restore
	lreg	bp|registers

	even
	inhibit	on			"shrink the stack
	spribp	sp|stack_frame.next_sp
	spribp	sb|stack_header.stack_end_ptr
	inhibit 	off

	tra	bp|old_retptr_value			go to break slot code

	even
arg_list:
	zero	0,4			arglist header (no args)
	zero	0,0

	even

"	these two instructions are placed on the stack and executed there!
"	they are placed on top of a pointer in the extension
"	the first of the pair is at loc old_retptr_value.  When executed, ic is the offset of
"	old_retptr_value, so this loads the prs from the base of the extension.
"	the second transfers in analogous way thru the ptr at slot_ptr 8which is a misnomer, for
"	it is really the return address)
spec_inst:
	lpri	-old_retptr_value,ic
	tra	slot_ptr-(old_retptr_value+1),ic*

count:	zero	0,count-code		number of words used


old_return:
	eppbp	sp|stack_frame.next_sp,*	find extension
	eppbp	bp|-32
	spbpsb	sp|0

	eppbb	bp|slot_ptr,*		restore saved info
	spribb	sp|stack_frame.return_ptr
	ldi	bp|indicators
	lreg	bp|registers

	inhibit	on
	spribp	sp|stack_frame.next_sp
	spribp	sb|stack_header.stack_end_ptr
	inhibit 	off

	lpri	sp|stack_frame.next_sp,*	restore pointers
	rtcd	sp|stack_frame.return_ptr

"	These are the template code sequences for the break slot code.
"
before_code:
	spri	sp|stack_frame.next_sp,*	save ALL PR'S!
	tsplb	*-*			go to map code- probe patches this
	nop	0,du		DU holds offset of slot
	nop	0,du		to be replaced by instruction
	nop 	0,du
	nop	0,du
	nop	0,du
	tra	0		to loc + inst_length


after_code:
	nop	0,du		instruction
	nop	0,du
	nop 	0,du
	nop	0,du
	spri	sp|stack_frame.next_sp,*	save ALL PR'S
	tsplb	*-*			go to map code- patched by probe
	nop	0,du		slot offset
	tra	0		to loc + inst_length
" 


	include	stack_header
	include	stack_frame
	end
