/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(88-09-30,WAAnderson), approve(88-09-30,MCR7863),
     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
     Fixed bugs associated with object segments compiled with the -brief_table
     control argument.
  2) change(88-09-30,WAAnderson), approve(88-09-30,MCR7952),
     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
     Added format control comment to make the source more readable.
                                                   END HISTORY COMMENTS */


/* format: style1,insnl,ifthendo,indthenelse,^indnoniterdo,^inditerdo,indcom,^indthenbegin,^indprocbody,ind2,ll78,initcol0,dclind4,idind24,struclvlind1,comcol41 */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

probe_trace_a_stack_:
  proc (P_probe_info_ptr, P_first, P_all);

  /* trace the stack, starting at the frame P_first - build structure of levels   in the area scratch_area

   James R. Davis 22 June 79
   Modified 25 Aug 79 JRD */
  /* Changed to store component info for each stack frame 09/18/81 S. Herbst */
  /* Changed to store printed frame number I.J, J^=0 for support frames 12/10/81 S. Herbst */
  /* Changed to detect caller loop in symbol table, and stop 02/25/82 S. Herbst */
  /* Removed remaining call to stu_$get_runtime_block (calling stu_find_containing_block instead) 10/31/83 M. Weaver */
  /* Changed not to print funny quick-block levels for which no instruction_ptr 02/17/84 S. Herbst */

  dcl P_probe_info_ptr	ptr aligned parameter;
  dcl P_first		ptr aligned parameter;
  dcl P_all		bit (1) aligned parameter;
				/* include support frames? */

  dcl include_support	bit (1) aligned;
  dcl (p, prev_lfp, saved_lfp, test_lfp)
			ptr;
  dcl (frame_decimal, frame_number)
			fixed bin;
  dcl code		fixed bin (35);
  dcl condition_frame	ptr;	/*  to most recent frame where a condition occured */
  dcl was_error		bit (1) aligned;
				/* was that condition "error" ? */

  dcl component_info_$offset	entry (ptr, fixed bin (18), ptr, fixed bin (35))
			;
  dcl find_condition_info_	entry (ptr, ptr, fixed bin (35));
  dcl stack_frame_exit_	entry (ptr, ptr, ptr, bit (1) aligned, ptr,
			char (32) aligned, ptr);
  dcl is_condition_frame_	entry (ptr) returns (bit (1) aligned);

  dcl 1 frame_situation	aligned like stack_frame_exit_str;
  dcl 1 cond_info		aligned like condition_info;

  dcl probe_seg_info_	entry (ptr, ptr, fixed bin (35)) returns (ptr);

  dcl (addr, addrel, baseno, bin, binary, null, ptr, rel,
      string, stackbaseptr, unspec)
			builtin;

  dcl area		condition;


  probe_info_ptr = P_probe_info_ptr;
  include_support = P_all;
  if stack_info.good_stack & include_support = stack_info.traced_with_all
    then return;

  stack_info.max_level = 0;		/* haven't got any frames yet */
  stack_info.traced_with_all = include_support;
  lfp, prev_lfp = null ();		/* have no frames at the start */
  condition_frame = null ();		/* there are no conditions */
  was_error = "0"b;			/* and none are "error" */

  do sp = P_first repeat (sp -> stack_frame.prev_sp) while (sp ^= null);
    if is_condition_frame_ (sp)
      then do;
        condition_frame = sp;		/* it happended here */
        call find_condition_info_ (sp, addr (cond_info), (0));
        was_error = is_this_an_error_frame ();
      end;			/* condition framing */
      else cond_info.mc_ptr, cond_info.wc_ptr = null ();

    if this_frame_should_be_traced () then do;
        lfp = new_level ();

        level_frame.support = sp -> stack_frame_flags.support;

        level_frame.condition_frame_ptr = condition_frame;
        level_frame.flags.error_signalled = was_error;
        condition_frame = null ();	/* has been claimed */
        was_error = "0"b;

        call stack_frame_exit_ (sp, cond_info.mc_ptr, cond_info.wc_ptr,
	   (sp -> stack_frame_flags.crawl_out),
	   p, (""), addr (frame_situation));

        level_frame.instruction_ptr = p;
        level_frame.stack_ptr = sp;

        if frame_situation.entry_ptr_invalid
				/* only return_to_ring_0 will be invalid */
	then level_frame.seg_info_ptr =
		probe_seg_info_ (probe_info_ptr, null (), (0));
				/* this is dummy */
	else call analyze_frame (sp); /* there is much to learn about this frame */
      end;			/* of handling frame we like */
  end;				/* of loop thru stack */

RENUMBER:
  frame_number, frame_decimal = 0;

  do p = lfp repeat (p -> level_frame.prev) while (p ^= null);
    if p -> level_frame.support
      then frame_decimal = frame_decimal + 1;
      else do;
        frame_number = frame_number + 1;
        frame_decimal = 0;
      end;
    p -> level_frame.printed_number = frame_number;
    p -> level_frame.printed_decimal = frame_decimal;
  end;

  stack_info.good_stack = "1"b;
  return;

is_this_an_error_frame:
  proc () returns (bit (1) aligned);
  return (cond_info.condition_name = "error" &
       cond_info.info_ptr = null () & cond_info.mc_ptr = null ());
  end is_this_an_error_frame;


this_frame_should_be_traced:
  proc () returns (bit (1) aligned);
  return (include_support | ^sp -> stack_frame_flags.support);
  end this_frame_should_be_traced;


analyze_frame:
  proc (a_sp);

  dcl a_sp		ptr parameter;
  dcl stu_$find_containing_block
			entry (ptr, fixed bin (18) unsigned)
			returns (ptr);
  dcl stu_$get_map_index	entry (ptr, fixed bin (18) unsigned, fixed bin,
			ptr);

  dcl bp			ptr;	/* to runtime_block node */
  dcl hp			ptr;	/* to std_symbol_header */

  dcl entryp		ptr;
  dcl seg_infop		ptr;
  dcl continue_tracing	bit (1) aligned;



  entryp = a_sp -> stack_frame.entry_ptr;
				/* entry that created this frame */

  level_frame.seg_info_ptr, seg_infop =
       probe_seg_info_ (probe_info_ptr, entryp, code);
  level_frame.run_unit_manager = a_sp -> stack_frame_flags.run_unit_manager;

  hp = level_frame.seg_info_ptr -> seg_info.symbol_header_ptr;

  if hp ^= null ()
    then call stu_$get_map_index (hp, bin (rel (p), 18),
	    level_frame.stmnt_map_entry_index, (null));

  bp = stu_$find_containing_block (hp, bin (rel (p), 18));

  if bp = null () /* no symbol table can do no more */
    then do;
      level_frame.entry_ptr = entryp;
    end;
    else do;

      /* may be a quick block - first calculate information that will be true for all blocks that share this frame
   then trace back quick calls */

      level_frame.block_ptr = bp;

      saved_lfp = lfp;

      continue_tracing = bp -> runtime_block.quick;
				/* trace only while we're quick */
      do while (continue_tracing);
        level_frame.flags.quick = "1"b; /* obviously */

        /* first location of this block executed */
        level_frame.entry_ptr =
	   ptr (bp,
	   addrel (bp, bp -> runtime_block.first) -> statement_map.location)
	   ;

        /* is the above wrong thing to do for multiple entry blocks?
   probably so, but how can you tell if thats the case ? */

        if seg_infop -> seg_info.language_type = FORTRAN_lang_type
				/* FT quick block is also externally callable - skip the
						   descriptor flag,   point to real entry seq */
	then level_frame.entry_ptr = addrel (level_frame.entry_ptr, 1);

        /* now get ptr to caller, and determine block */

        if bp -> runtime_block.entry_info ^= "0"b /* quick proc */
	then do;
	  p = addrel (a_sp, bp -> runtime_block.entry_info)
	       -> quick_entry.return;

	  /* for FT the quick_entry.return ptr is left pointing into pl1 operators, so that
   the returing quick block will skip the non-quick father and go directly to father's caller */

	  if baseno (p)
	       = baseno (stackbaseptr () -> stack_header.pl1_operators_ptr)
	    then do;
	      p = null ();		/* no place to return to in THIS seg */
	      bp = addrel (bp, bp -> runtime_block.father);
	    end;

	    /* additional code here would ensure that there was only one frame in the level_chain
   for this FT case, thus users would see only one fram,e, which is what they want to see */

	    else do;
	      p = addrel (p, -1);	/* point to the calling instruction */
	      bp = stu_$find_containing_block (hp, bin (rel (p), 18));
	    end;
	end;			/* entry info hacking */
	else do;			/* assume begin block */
	  p = addrel (level_frame.entry_ptr, -1);
				/* assume we fell in */
	  bp = addrel (bp, bp -> runtime_block.father);
				/* "called" by father, obviously */
	end;

        /* now p -> last loc in caller, bp is callers block */
        do test_lfp = lfp /* detect caller loop in symbol table */
	   repeat (test_lfp -> level_frame.prev)
	   while (test_lfp ^= saved_lfp);

	if test_lfp -> level_frame.block_ptr = bp
	  then go to NO_MORE_QUICK;
        end;


        /* make a new level for caller, who may or may not be quick but we already know much about it */

        if p ^= null then do;		/* print level only if we have instruction_ptr */

	  lfp = new_level ();

	  level_frame.instruction_ptr = p;
	  level_frame.block_ptr = bp;
	  level_frame.stack_ptr = a_sp;
	  level_frame.seg_info_ptr = seg_infop;

	  if p ^= null
	    then call stu_$get_map_index (hp, bin (rel (p), 18),
		    level_frame.stmnt_map_entry_index, (null));

	  if bp = null ()		/* can't find father ! */
	    then continue_tracing = "0"b;
	  else if bp -> runtime_block.quick
	    then continue_tracing = "1"b;
				/* how good is the optimizer? */
	  else continue_tracing = "0"b;
				/* fatherblock is owner */
	end;
	else continue_tracing = "0"b;
      end;			/* quick loop */

NO_MORE_QUICK:
				/* now we know we have a level for the OWNER of the frame */
      level_frame.entry_ptr = entryp;

    end;				/* frame with symbol table */

  call component_info_$offset (ptr (entryp, 0), binary (rel (entryp), 18),
       addr (ci), code);
  level_frame.component_text_ptr = null;
  if code = 0
    then
         if rel (ci.text_start) ^= "0"b then do;
	   level_frame.component_name = ci.name;
	   level_frame.component_text_ptr = text_start;
	 end;


  end analyze_frame;
				/*  */

new_level:
  proc () returns (ptr);

  /* return a ptr to a new level_frame  and intialize the new level_frame

   old level_frames from previous use in this process are re-cycled if available,
   this conserves time */

  return (initialize_level (get_ptr_to_new ()));




get_ptr_to_new:
  proc () returns (ptr);

  /* global imports scratch_area, stack_info, lfp */

  if lfp = null () /* first call , have no frames */
    then do;
      if stack_info.level_chain = null ()
        then do;			/* first time ever in whole process */
	allocate level_frame in (scratch_area) set (stack_info.level_chain);
	unspec (stack_info.level_chain -> level_frame) = "0"b;
	stack_info.level_chain -> level_frame.next = null ();
				/* obviously */
        end;
      return (stack_info.level_chain);
    end;				/* null lfp case */
    else do;			/* can use lfp */
      if level_frame.next = null /* have used them all up */
        then do;			/* must make a new one */
	on area go to RENUMBER;	/* give up if stack is too big */
	allocate level_frame in (scratch_area) set (level_frame.next);
	unspec (level_frame.next -> level_frame) = "0"b;
	level_frame.next -> level_frame.next = null ();
				/* obviously there is no next, either */
        end;			/* making a brand new level */
      return (level_frame.next);
    end;
  end get_ptr_to_new;

initialize_level:
  proc (tp) returns (ptr);

  /* initialize the level_frame we have ptr to, and return its address */
  dcl tp			ptr parameter;

  tp -> level_frame.stmnt_map_entry_index = -1;
  tp -> level_frame.instruction_ptr,
       tp -> level_frame.block_ptr, tp -> level_frame.stack_ptr,
       tp -> level_frame.entry_ptr,
       tp -> level_frame.seg_info_ptr, tp -> level_frame.condition_frame_ptr =
       null ();
  string (tp -> level_frame.flags) = "0"b;

  tp -> level_frame.number, stack_info.max_level =
       stack_info.max_level + 1;
  tp -> level_frame.prev = prev_lfp;
  prev_lfp = tp;

  return (tp);
  end initialize_level;

  end new_level;
				/*  */

%include probe_info;

  /* ;;;;;;; */

%include probe_static_info;

  /* ;;;;;;; */
  /* ;;;;;;; */

%include probe_level_frame;

  /* ;;;;;;; */

%include probe_source_info;

  /* ;;;;;;; */

%include probe_seg_info;

  /* ;;;;;;; */

%include probe_lang_types;

  /* ;;;;;;; */

%include component_info;

  /* ;;;;;;; */


%include condition_info;

  /* ;;;;;;; */

%include stack_frame_exit_str;

  /* ;;;;;;; */

%include stack_header;

  /* ;;;;;;; */

%include runtime_symbol;

  /* ;;;;;;; */

%include quick_entry;

  /* ;;;;;;; */

%include stack_frame;

  /* ;;;;;;; */

%include std_symbol_header;

  /* ;;;;;;; */

%include statement_map;

  end probe_trace_a_stack_;
