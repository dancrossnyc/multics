/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(88-09-07,WAAnderson), approve(88-09-30,MCR7952),
     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
     Added format control comment to make the source more readable.
                                                   END HISTORY COMMENTS */


/* format: style1,insnl,ifthendo,indthenelse,^indnoniterdo,^inditerdo,indcom,^indthenbegin,^indprocbody,ind2,ll78,initcol0,dclind4,idind24,struclvlind1,comcol41 */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

probe_pretty_source_info_:
  proc (P_probe_info_ptr, P_sourcep, P_return_string);

  dcl P_probe_info_ptr	ptr parameter;
  dcl P_sourcep		ptr parameter;
				/* to callers source_info */
  dcl P_return_string	char (*);

  /* given a source info, format and return a string describing it
   if map_entry_index is valid and there is a statement map for the seg, give line number
   otherwise give offset (use instruction_ptr) and warn user
   show level number if there is one

   James R. Davis 2 July 79
*/

  dcl sourcep		ptr;	/* copy of P_sourcep */
  dcl 1 caller_source	aligned like source_info based (sourcep);

  dcl level		fixed bin;/* what level we are at */
  dcl blockname		char (64);/* name of current block */
  dcl map_index		fixed bin;/* index into statement map for source_info */
  dcl no_stmnts		fixed bin;/* how many statements does proc have */
  dcl file		fixed bin;/* file number of line */
  dcl line		fixed bin;/* line number */
  dcl stmt		fixed bin;/* statement number */
  dcl map_ptr		ptr;	/* to the statement map for proc */

  dcl 1 map_entry_array	(no_stmnts) based (map_ptr) like statement_map;

  dcl probe_stack_trace_$where_source_info
			entry (ptr, ptr, fixed bin, char (*));

  dcl ioa_$rsnnl		entry options (variable);
  dcl (binary, fixed, null, rel)
			builtin;
				/*  */

  probe_info_ptr = P_probe_info_ptr;
  sourcep = P_sourcep;

  call probe_stack_trace_$where_source_info (probe_info_ptr, sourcep, level,
       blockname);

  map_index = caller_source.stmnt_map_entry_index;
  map_ptr = caller_source.seg_info_ptr -> seg_info.statement_map_ptr;
  no_stmnts = caller_source.seg_info_ptr -> seg_info.map_size;

  if map_ptr ^= null () & map_index > 0 & map_index <= no_stmnts then do;
      file = fixed (map_entry_array (map_index).file, 8);
      line = fixed (map_entry_array (map_index).line, 14);
      stmt = fixed (map_entry_array (map_index).statement, 5);

      call ioa_$rsnnl (
	 "line ^[^d-^;^s^]^d^[,^d^;^s^] in ^a ^[(level ^d)^;^s(no active frame)^]",
	 P_return_string, (0),
	 (file > 0), file,
	 line,
	 (stmt > 1), stmt,
	 blockname,
	 (level >= 0), level);
    end;
    else do;
      call ioa_$rsnnl (
	 "  ^a|^o ^[(level ^d)^;^s(no active frame)^] - ^[map missing^;offset invalid^]",
	 P_return_string, (0),
	 blockname, binary (rel (caller_source.instruction_ptr), 18),
	 (level >= 0), level,
	 map_ptr = null ());
    end;
  return;

  /*  */

%include probe_info;

  /* ;;;;;;; */

%include probe_seg_info;

  /* ;;;;;;; */

%include probe_source_info;

  /* ;;;;;;; */

%include statement_map;

  end probe_pretty_source_info_;
