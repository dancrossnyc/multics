/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(88-09-07,WAAnderson), approve(88-09-30,MCR7952),
     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
     Added format control comment to make the source more readable.
                                                   END HISTORY COMMENTS */


/* format: style1,insnl,ifthendo,indthenelse,^indnoniterdo,^inditerdo,indcom,^indthenbegin,^indprocbody,ind2,ll78,initcol0,dclind4,idind24,struclvlind1,comcol41 */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

probe_statement_number_:
  proc (P_probe_info_ptr, P_location, P_seg_info_ptr) returns (fixed bin);

  /* *	This routine is used to find the statement number (the index in the
   *	array of map_array entries) of a given location in the object program.
   *	In order to save time, it first estimates the location of the entry.
   *
   *	Created in the mists of antiquity, probably by J. M. Broughton
   *	Converted to probe 4.0 and renamed to probe_statement_number_, 05/28/79 W. Olin Sibert */

  dcl (
      P_probe_info_ptr	pointer,
      P_location		bit (18), /* offset in object program */
      P_seg_info_ptr	pointer
      )			parameter;

  dcl found_statement	fixed bin;

  dcl 1 map_array		(1) aligned based like statement_map;

  dcl probe_info_ptr	pointer;	/* to avoid including probe_info */
  dcl seg_info_ptr		pointer;
  dcl loc			fixed bin (24);
				/* binary version of location */
  dcl sp			pointer;	/* start of statement map */
  dcl first		fixed bin (24);
				/* first location in program */
  dcl last		fixed bin (24);
				/* last location plus one */
  dcl try			fixed bin;/* first estimate of statement number */
  dcl (i, j)		fixed bin;

  dcl (binary, divide, fixed, null)
			builtin;
				/*  */

  /* get pointers to statemen_map, etc, and make guess as to where entry is */

  probe_info_ptr = P_probe_info_ptr;
  seg_info_ptr = P_seg_info_ptr;

  if seg_info_ptr = null ()
    then /* something wrong with it */
         goto NOT_FOUND;

  loc = binary (P_location, 18, 0);
  sp = seg_info_ptr -> seg_info.statement_map_ptr;
  if sp = null
    then goto NOT_FOUND;		/* caller may worry about error */

  first = binary (sp -> map_array (1).location, 18, 0);
  if loc < first
    then goto NOT_FOUND;		/* location is before beginning */
  last =
       binary (sp -> map_array (seg_info_ptr -> seg_info.map_size).location,
       18, 0);
  if loc >= last
    then goto NOT_FOUND;		/* location is after end */

  try = divide (seg_info_ptr -> seg_info.map_size * (loc - first),
       (last - first), 17, 0) + 1;

  /* look for appropriate map entry, ie one containing location */

  do i = try by 1 /* if too big, look for entry above loc wanted */
       while (loc > fixed (sp -> map_array (i).location));
  end;

  do j = i by -1 /* look for one below loc, if too small */
       while (loc < fixed (sp -> map_array (j).location));
  end;

  found_statement = j;		/* if it was equal, it will fall through */

  return (found_statement);


NOT_FOUND:
  found_statement = -1;
  return (found_statement);

  /*  */

%include probe_seg_info;

  /* ;;;;;;; */

%include statement_map;

  end;				/* probe_statement_number_ external procedure */
