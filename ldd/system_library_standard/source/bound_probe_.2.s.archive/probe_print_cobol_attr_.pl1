/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(88-09-07,WAAnderson), approve(88-09-30,MCR7952),
     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
     Added format control comment to make the source more readable.
                                                   END HISTORY COMMENTS */


/* format: style1,insnl,ifthendo,indthenelse,^indnoniterdo,^inditerdo,indcom,^indthenbegin,^indprocbody,ind2,ll78,initcol0,dclind4,idind24,struclvlind1,comcol41 */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

probe_print_cobol_attr_:
  proc (P_probe_info_ptr, P_refp, P_long_sw, P_code);

  /* JRDavis wrote this back in the fifteenth century - it was found in the runes (sic) of a Celtic temple
   and brought here by Alan Chambers.  Translated into PL/I by Jim Davis

   Modified 4 Sept 79 JRD for bug fixes
*/

  dcl P_probe_info_ptr	ptr parameter;
  dcl P_refp		ptr parameter;
  dcl P_long_sw		bit (1) aligned parameter;
  dcl P_code		fixed bin (35) parameter;


  dcl 1 P_reference		aligned like reference_node based (refp);
  dcl refp		ptr;
  dcl sym			ptr;
  dcl sp			ptr;
  dcl ioa_$ioa_switch	entry options (variable);
  dcl (addrel, char, fixed, ltrim, null)
			builtin;

  probe_info_ptr = P_probe_info_ptr;
  P_code = 0;
  refp = P_refp;
  sym = P_reference.symbol_ptr;

  if sym = null () then do;

      if P_reference.type = ext_procedure_runtime_dtype
        then call ioa_$ioa_switch (probe_info.output_switch, "external entry")
	        ;
        else call ioa_$ioa_switch (probe_info.output_switch,
	        "??unknown type?? (^d)", P_reference.type);

      return;
    end;				/* non-symbol case */
  call ioa_$ioa_switch (probe_info.output_switch, "^a ^a ^a",
       get_cobol_level_str (sym),
       get_cobol_attr_str (sym),
       get_cobol_dim_str (sym, 0));

  if P_long_sw
    then
      do sp = addrel (sym, sym -> runtime_symbol.son) repeat sp
	 while (sp ^= null ());
      call print_son (sp, fixed (sym -> runtime_symbol.ndims, 6));
      if sp -> runtime_symbol.brother ^= "0"b
        then sp = addrel (sp, sp -> runtime_symbol.brother);
        else sp = null ();
    end;

  return;

print_son:
  proc (s, inherit_dims);
  dcl s			ptr parameter;
				/* input: to a son symbol */
  dcl inherit_dims		fixed bin parameter;
				/* Dims of Our Father, Living Still */
  dcl q			ptr;
  dcl nextq		ptr;

  call ioa_$ioa_switch (probe_info.output_switch, "^a ^A  ^a ^a",
       get_cobol_level_str (s),
       addrel (s, s -> runtime_symbol.name),
       get_cobol_attr_str (s),
       get_cobol_dim_str (s, inherit_dims));

  if s -> runtime_symbol.son ^= (18)"0"b
    then
      do q = addrel (s, s -> runtime_symbol.son)
	 repeat nextq while (q ^= null ());
				/* curse pl1 for lack of do-until */
      call print_son (q, fixed (s -> runtime_symbol.ndims, 6));
      if q -> runtime_symbol.brother = "0"b
        then nextq = null ();
        else nextq = addrel (q, q -> runtime_symbol.brother);
    end;				/* son,sibling loop */

  end print_son;





get_cobol_level_str:
  proc (sp) returns (char (20) varying);

  dcl sp			ptr parameter;
  dcl l			fixed bin;
  dcl max_depth		fixed bin internal static
			options (constant) init (5);
  dcl indepth		fixed bin;/* number of spaces before level number */
  dcl (char, copy, fixed, ltrim, min, rtrim)
			builtin;

  l = fixed (sp -> runtime_symbol.level, 6);
  indepth = min (l, max_depth) * 3;
  if l = 0
    then return ("  77");
    else return (copy (" ", indepth) || rtrim (ltrim (char (l))));
  end get_cobol_level_str;

get_cobol_attr_str:
  proc (sp) returns (char (64) varying);

  dcl sp			ptr parameter;

  dcl type		fixed bin;
  dcl prec		fixed bin (35);
  dcl scale		fixed bin;
  dcl attr		char (64) varying;

  type = fixed (sp -> runtime_symbol.type, 6);
  prec = fixed (sp -> runtime_symbol.size, 35);
  scale = bit8_to_bin8 (sp -> runtime_symbol.scale);

  if type = cobol_comp_6_dtype /* may also be comp_7 */
    then do;
      if prec <= 17
        then do;
	attr = " COMP-7";
	if sp -> runtime_symbol.aligned
	  then attr = attr || " SYNC";
        end;
        else attr = " COMP-6";
    end;				/* comp-6, 7 */
  else if type = cobol_display_ls_dtype
    then attr = " DISPLAY SIGN SEPARATE LEADING";
  else if type = cobol_display_uns_dtype
    then attr = " DISPLAY";
  else if type = cobol_display_ts_dtype
    then attr = " DISPLAY SIGN SEPARATE TRAILING";
  else if type = cobol_display_ls_overp_dtype
    then attr = " DISPLAY SIGN LEADING";
  else if type = cobol_display_ts_overp_dtype
    then attr = " DISPLAY SIGN TRAILING";
  else if type = cobol_char_string_dtype
    then do;
      attr = " PICTURE (";
      attr = attr || ltrim (char (prec));
      attr = attr || ") x.";
    end;
  else if type = cobol_comp_5_uns_dtype /* or COMP-8 unsigned, cant tell */
    then do;
      attr = " COMP-5 or COMP-8 PICTURE";
      attr = attr || guess_picture (prec, scale);
    end;
  else if type = cobol_comp_5_ts_dtype
    then do;
      attr = " COMP-5 PIC S";
      attr = attr || guess_picture (prec, scale);
    end;
  else if type = cobol_comp_8_ls_dtype
    then do;
      attr = " COMP-8 PIC S";
      attr = attr || guess_picture (prec, scale);
    end;
  else if type = label_constant_runtime_dtype
    then attr = " paragraph label";
  else if type = int_entry_runtime_dtype
       | type = ext_entry_runtime_dtype
       | type = ext_procedure_runtime_dtype
    then attr = " entrypoint";
  else attr = "?";

  return (attr);

guess_picture:
  proc (p, s) returns (char (32) varying);

  dcl p			fixed bin (35) parameter;
				/* "precision" of data */
  dcl s			fixed bin parameter;
				/* "scale" of data */

  dcl (abs, copy)		builtin;

  /* this procedure exists because there is currently no
   encoding of the picture used with arithmetic data in COBOL - fortunately
   it is possible to derive the picture from the prec and scale in the
   symbol table.  Unfortunately as of this date (May 30 79) the scale is
   not correctly in the symbol table
   */

  /* ASSERT p > 0, s is an integer */

  /* three possibilities:

   s <= 0, padding is on the right
   s >0 & s <= prec implied decimal pt
   s>  prec padding on left */

  if s <= 0
    then return (copy ("9", prec) || copy ("P", abs (scale)));
  else if s <= prec
    then return (copy ("9", prec - scale) || "V" || copy ("9", scale));
  else return (copy ("P", scale - prec) || copy ("9", prec));

  end guess_picture;

bit8_to_bin8:
  proc (bit8) returns (fixed bin (8));
  dcl bit8		bit (8) unal parameter;
  dcl bin			builtin;

  if bin (bit8, 8) <= 127
    then return (bin (bit8, 8));
    else return (bin (bit8, 8) - 256);
  end bit8_to_bin8;
  end get_cobol_attr_str;

get_cobol_dim_str:
  proc (symp, inheritance) returns (char (168) varying);
  dcl symp		ptr parameter;
  dcl inheritance		fixed bin parameter;
  dcl dim_str		char (168) varying;
  dcl n			fixed bin;/* number of dims */
  dcl i			fixed bin;

  n = fixed (symp -> runtime_symbol.ndims, 6);
  if n <= inheritance
    then dim_str = "";
    else do;
      dim_str = " OCCURS ";
      do i = inheritance + 1 to n;
        dim_str = dim_str || " ";
        dim_str =
	   dim_str || value (symp -> runtime_symbol.bounds (i).upper, symp);
        if i < n
	then dim_str = dim_str || " ,";
      end;
      dim_str = dim_str || " TIMES";
    end;
  return (dim_str);

  end get_cobol_dim_str;

value:
  procedure (ev, context) returns (character (10) varying);

  dcl ev			fixed bin (35) parameter;
				/* input: an encoded value */
  dcl context		ptr parameter;
				/* input: to symbol node of ev */

  dcl val			fixed bin (35);
  dcl 1 an_ev		aligned like encoded_value;
  dcl refp		ptr;	/* to data itself, for decoding */
  dcl block_ptr		ptr;
  dcl stack_ptr		ptr;
  dcl linkage_ptr		ptr;
  dcl based_class		bit (4) internal static options (constant)
			init ("0011"b);
  dcl code		fixed bin (35);
  dcl (char, ltrim, null, rtrim, string, unspec)
			builtin;

  dcl stu_$get_implicit_qualifier
			entry (ptr, ptr, ptr, ptr, ptr) returns (ptr);
  dcl stu_$decode_runtime_value
			entry (fixed bin (35), ptr, ptr, ptr, ptr, ptr,
			fixed bin (35)) returns (fixed bin (35));

  /* GLOBAL imports P_reference */

  string (an_ev) = unspec (ev);
  if an_ev.flag = "10"b
    then do;			/* it is encoded */
      stack_ptr = P_reference.source_info_ptr -> source_info.stack_ptr;
      linkage_ptr =
	 P_reference.source_info_ptr -> source_info.seg_info_ptr
	 -> seg_info.linkage_ptr;
      block_ptr = P_reference.source_info_ptr -> source_info.block_ptr;
      refp = P_reference.address_ptr;
      if refp = null
        then if context -> runtime_symbol.class = based_class
				/* can try for implicit */
	     then refp =
		     stu_$get_implicit_qualifier (block_ptr, context,
		     stack_ptr, linkage_ptr, block_ptr);
      val = stu_$decode_runtime_value (ev, block_ptr, stack_ptr, linkage_ptr,
	 block_ptr, refp, code);
      if code ^= 0
        then return ("*");
    end;
    else val = ev;

  return (rtrim (ltrim (char (val))));

  end value;

%include probe_info;


%include probe_references;


%include probe_source_info;


%include probe_seg_info;


%include std_descriptor_types;
%include runtime_symbol;

  end probe_print_cobol_attr_;
