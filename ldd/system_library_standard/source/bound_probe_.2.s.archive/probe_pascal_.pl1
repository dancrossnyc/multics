/****^  ********************************************
        *                                          *
        * Copyright, (C) Honeywell Bull Inc., 1988 *
        *                                          *
        ******************************************** */

/*
   ***************************************************************************
   *                                                                         *
   *                                                                         *
   *  Copyright (c) 1980 by Centre Interuniversitaire de Calcul de Grenoble  *
   *    and Institut National de Recherche en Informatique et Automatique    *
   *                                                                         *
   *                                                                         *
   ***************************************************************************
*/



/****^  HISTORY COMMENTS:
  1) change(88-09-07,WAAnderson), approve(88-09-30,MCR7952),
     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
     Added format control comment to make the source more readable.
                                                   END HISTORY COMMENTS */


/* format: style1,insnl,ifthendo,indthenelse,^indnoniterdo,^inditerdo,indcom,^indthenbegin,^indprocbody,ind2,ll78,initcol0,dclind4,idind24,struclvlind1,comcol41 */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

probe_pascal_:
  proc;

  /* PROBE <-> PASCAL utilities */
  /* Written: 1983 JMAthane Grenoble University. */
  /* Fixed $indice_value to copy probe_info_ptr arg 08/01/83 S. Herbst */
  /* Added version string to runtime_type_info structure 10/06/83 S. Herbst */

  /* entries are :

   probe_pascal_$real_type entry (fixed bin (35), ptr, fied bin (35), ptr)
   probe_pascal_$indice_id entry (fixed bin (35), ptr, fixed bin(35))
   probe_pascal_$indice_value entry (ptr, ptr, fixed bin (35), fixed bin (35), ptr, fixed bin (35))
   probe_pascal_$get_external_proc_name entry (ptr, fixed bin (35), char (256)) ;
*/


  dcl (addr, addrel, rtrim, substr, unspec)
			builtin;

  dcl probe_error_$malfunction
			entry options (variable);

  call probe_error_$malfunction ();


  /* Different parameters used */


  dcl P_type		fixed bin (35);
  dcl P_type_ptr		ptr;
  dcl P_real_type		fixed bin (35);
  dcl P_real_type_ptr	ptr;
  dcl P_value		fixed bin (35);
  dcl P_probe_info_ptr	ptr;
  dcl P_seg_info_ptr	ptr;
  dcl P_reference_ptr	ptr;
  dcl P_name		char (256) varying;
  dcl P_code		fixed bin (35);



  /**/
real_type:
  entry (P_type, P_type_ptr, P_real_type, P_real_type_ptr);


  dcl 1 type_info		like runtime_type_info;

  if P_type = pascal_user_defined_type_instance_dtype then do;
      if P_type_ptr -> pascal_symbol_node_header.subrange_limits then do;

	type_info.version = RUNTIME_TYPE_INFO_VERSION_1;

	call runtime_symbol_info_$type (P_type_ptr, addr (type_info),
	     P_code);
	if P_code ^= 0
	  then go to SOME_ERROR;

	P_real_type = type_info.base_type;
	P_real_type_ptr = type_info.base_type_addr;
	return;
        end;
    end;
  P_real_type = P_type;
  P_real_type_ptr = P_type_ptr;
  return;

indice_id:
  entry (P_type, P_type_ptr, P_value) returns (char (32) varying);


  dcl (null, maxlength)	builtin;
  dcl pascal_char		char (1);
  dcl arithmetic_to_ascii_	entry (ptr, fixed bin, bit (1), fixed bin,
			fixed bin, char (132) var);
  dcl result_string		char (132) varying;
  dcl real_type		fixed bin (35);
  dcl type_ptr		ptr;
  dcl i			fixed bin (35);
  dcl p1			ptr;

  dcl probe_pascal_$real_type entry (fixed bin (35), ptr, fixed bin (35), ptr)
			;

  call probe_pascal_$real_type (P_type, P_type_ptr, real_type, type_ptr);

  if real_type = pascal_integer_dtype then do;
      call arithmetic_to_ascii_ (addr (P_value), (real_type), "0"b, 35, 0,
	 result_string);
      return (rtrim (result_string));
    end;
  else if real_type = pascal_char_dtype then do;
      unspec (pascal_char) = substr (unspec (P_value), 28, 9);
      return ("'" || pascal_char || "'");
    end;
  else if real_type = pascal_boolean_dtype then do;
      if P_value = 0
        then
	   return ("false");
        else return ("true");
    end;
  else if real_type = pascal_enumerated_type_instance_dtype then do;
      p1 = runtime_symbol_info_$son (type_ptr);
      i = 0;
      do while (p1 ^= null);
        if i = P_value
	then
	     return (runtime_symbol_info_$name (p1) -> acc.string);
        i = i + 1;
        p1 = runtime_symbol_info_$successor (p1);
      end;
    end;

  return ("???");			/* never if valid symbol table */

indice_value:
  entry (P_probe_info_ptr, P_reference_ptr, P_value, P_type, P_type_ptr,
       P_code);


  dcl assign_$computational_	entry (ptr, ptr, fixed bin (35));
  dcl probe_create_reference_ entry (ptr, ptr);
  dcl probe_error_$record	entry options (variable);
  dcl probe_et_$size	fixed bin (35) ext;
  dcl probe_get_$expression	entry (ptr, 1 aligned like reference_node,
			fixed bin (35));
  dcl probe_et_$recorded_message
			fixed bin (35) ext;
  dcl size		condition;
  dcl (
      1 tar_str,
      1 src_str
      )			aligned like computational_data;
  dcl 1 eprec		like encoded_precision;
  dcl 1 ref		like reference_node based (P_reference_ptr);

  P_code = 0;

  probe_info_ptr = P_probe_info_ptr;

  call probe_create_reference_ (probe_info_ptr, P_reference_ptr);

  call probe_get_$expression (probe_info_ptr,
       P_reference_ptr -> reference_node, P_code);
  if P_code ^= 0
    then return;

  if ^probe_info.execute
    then return;

  if ref.type = char_dtype then do;
      if ref.precision ^= 1 then do;
	call probe_error_$record (P_probe_info_ptr, 0,
	     "A character string cannot be used here.");
	P_code = probe_et_$recorded_message;
	return;
        end;
      ref.type = pascal_char_dtype;
      ref.precision = 9;
    end;

  tar_str.address = addr (P_value);
  tar_str.data_type = real_fix_bin_1_dtype;
  tar_str.flags = "0"b;
  tar_str.prec_or_length = 35;
  tar_str.scale = 0;

  unspec (eprec) = unspec (ref.precision);

  src_str.address = ref.address_ptr;
  src_str.flags = "0"b;
  src_str.prec_or_length = eprec.prec;
  src_str.scale = eprec.scale;
  src_str.packed = ref.packed;

  if ref.type < pascal_typed_pointer_type_dtype then do;
      src_str.data_type = ref.type;
      P_type = pascal_integer_dtype;
      P_type_ptr = null;
    end;
    else do;
      call probe_pascal_$real_type (ref.type, ref.type_ptr, P_type,
	 P_type_ptr);
      if P_type = pascal_boolean_dtype
	 | P_type = pascal_char_dtype
	 | P_type = pascal_enumerated_type_element_dtype
	 | P_type = pascal_enumerated_type_dtype then do;
	if src_str.prec_or_length >= 36
	  then
	       src_str.data_type = real_fix_bin_2_uns_dtype;
	  else
	       src_str.data_type = real_fix_bin_1_uns_dtype;
	src_str.packed = "1"b;
        end;
      else if P_type = pascal_integer_dtype then do;
	src_str.data_type = pascal_integer_dtype;
        end;
      else do;
        call probe_error_$record (probe_info_ptr, 0,
	   "A value of type of ^a cannot be used here.", ref.name);
        P_code = probe_et_$recorded_message;
        return;
      end;
    end;

  if P_type = pascal_enumerated_type_element_dtype then do;
      P_type = pascal_enumerated_type_instance_dtype;
      P_type_ptr = runtime_symbol_info_$father_type (ref.symbol_ptr);
    end;

  on size
    begin;
    P_code = probe_et_$size;
    go to SOME_ERROR;
  end;

  call assign_$computational_ (addr (tar_str), addr (src_str), P_code);

SOME_ERROR:
  return;

get_external_proc_name:
  entry (P_seg_info_ptr, P_value, P_name);

  /* Returns in P_name the real name of the external procedure
   referenced by the link at P_value in the linkage section */

  dcl (work, def_p, seg_n_p, ent_n_p)
			ptr;

  work = P_seg_info_ptr -> linkage_ptr; /* to linkage section */
  def_p = work -> def_ptr;
  work =
       addrel (def_p,
       addrel (work -> original_linkage_ptr, P_value) -> exp_ptr);
				/* to expr word */
  work = addrel (def_p, work -> exp_word.type_ptr);
				/* to type pair */
  seg_n_p = addrel (def_p, work -> seg_ptr);
  ent_n_p = addrel (def_p, work -> ext_ptr);

  if seg_n_p = ent_n_p
    then
         if seg_n_p -> acc.num_chars > maxlength (P_name)
	 then P_name = "";
	 else P_name = seg_n_p -> acc.string;
  else if (seg_n_p -> acc.num_chars + ent_n_p -> acc.num_chars + 1)
       > maxlength (P_name)
    then P_name = "";
  else
       P_name = seg_n_p -> acc.string || "$" || ent_n_p -> acc.string;

  return;

%include probe_info;
%include probe_references;
%include linkdcl;
%include computational_data;
%include probe_tokens;
%include runtime_symbol_info_;
%include encoded_precision;
%include pascal_symbol_node;
%include std_descriptor_types;
%include acc;
%include probe_seg_info;
%include probe_source_info;

  end probe_pascal_;
