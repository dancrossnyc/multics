/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(88-09-07,WAAnderson), approve(88-09-30,MCR7952),
     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
     Added format control comment to make the source more readable.
                                                   END HISTORY COMMENTS */


/* format: style1,insnl,ifthendo,indthenelse,^indnoniterdo,^inditerdo,indcom,^indthenbegin,^indprocbody,ind2,ll78,initcol0,dclind4,idind24,struclvlind1,comcol41 */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

probe_print_pl1_attr_:
  proc (P_probe_info_ptr, P_refp, P_long_sw, P_code);

  /* Jim Davis 25 May 79 */

  dcl P_probe_info_ptr	ptr parameter;
  dcl P_refp		ptr parameter;
  dcl P_long_sw		bit (1) aligned parameter;
  dcl P_code		fixed bin (35) parameter;

  dcl 1 P_reference		aligned like reference_node based (refp);
  dcl refp		ptr;
  dcl sym			ptr;	/* to symbol node */
  dcl sp			ptr;
  dcl next		ptr;
  dcl (addrel, bin, fixed, hbound, lbound, null, rtrim, substr)
			builtin;
  dcl (
      ioa_$ioa_switch,
      ioa_$rsnnl
      )			entry options (variable);
  dcl probe_block_name_	entry (ptr, ptr, bit (1) aligned)
			returns (char (256) varying);

  probe_info_ptr = P_probe_info_ptr;
  P_code = 0;
  refp = P_refp;
  sym = P_reference.symbol_ptr;

  if sym = null () then do;
      if P_reference.type = ext_procedure_runtime_dtype
        then call ioa_$ioa_switch (probe_info.output_switch, "external entry")
	        ;
        else call ioa_$ioa_switch (probe_info.output_switch,
	        "unknown type (^d)", P_reference.type);

      /* sure wish there was a way to display attributes of external entries */
      return;
    end;				/* non-symbol case */

  call ioa_$ioa_switch (probe_info.output_switch, "^a ^a ^a ^a",
       get_pl1_attr_str (sym),
       get_pl1_class_str (sym),
       get_pl1_dims_str (sym, 0, "1"b),
       get_pl1_level_str (sym));

  if fixed (sym -> runtime_symbol.type, 6) = structure_dtype & P_long_sw
    then
      do sp = addrel (sym, sym -> runtime_symbol.son) /* for son */
	 repeat next while (sp ^= null ());
      call print_member (sp, fixed (sym -> runtime_symbol.ndims, 6));
      if sp -> runtime_symbol.brother ^= (18)"0"b
        then next = addrel (sp, sp -> runtime_symbol.brother);
        else next = null ();
    end;

  call ioa_$ioa_switch (probe_info.output_switch, "Declared in ^a",
       probe_block_name_ (probe_info_ptr, P_reference.source_info_ptr, "0"b));
  return;

print_member:
  proc (s, inheritance);

  dcl s			ptr parameter;
				/* to a symbol node */
  dcl inheritance		fixed bin parameter;
  dcl q			ptr;	/* to son and sons' siblings */
  dcl nextq		ptr;
  dcl level		fixed bin;

  level = fixed (s -> runtime_symbol.level, 6);

  call ioa_$ioa_switch (probe_info.output_switch, "  ^vx^d ^A ^a ^a",
       (level - 2) * 2, level, addrel (s, s -> runtime_symbol.name),
       get_pl1_dims_str (s, inheritance, "0"b),
       get_pl1_attr_str (s));

  if s -> runtime_symbol.son ^= (18)"0"b
    then
      do q = addrel (s, s -> runtime_symbol.son) /* for our son, and for */
	 repeat nextq /* all his brothers, until */
	 while (q ^= null ());	/* curse PL/I, becasue it lacks do-until */
      call print_member (q, fixed (s -> runtime_symbol.ndims, 6));
      if q -> runtime_symbol.brother = (18)"0"b
        then nextq = null ();		/* have reached the end */
        else nextq = addrel (q, q -> runtime_symbol.brother);
    end;				/* son,sibling loop */

  end print_member;

get_pl1_attr_str:
  proc (sym) returns (char (168) varying);

  dcl sym			ptr parameter;

  dcl attr		char (168) varying;
  dcl temp		char (64) varying;
  dcl type		fixed bin;
  dcl p			ptr;

  dcl ptr			builtin;

  type = fixed (sym -> runtime_symbol.type, 6);
  if ^legal_type (type)
    then
         return ("?");

  attr = "";
  temp = "";

  if data_type_info_$info (type).computational
    then if data_type_info_$info (type).arithmetic
	 then do;
	   attr = attr
	        ||
	        branch_on (data_type_info_$info (type).complex, " complex",
	        "");
	   attr = attr
	        ||
	        branch_on (data_type_info_$info (type).fixed, " fixed",
	        " float");
	   attr = attr
	        ||
	        branch_on (data_type_info_$info (type).decimal, " dec",
	        " bin");

	   if data_type_info_$info (type).arithmetic_attributes.fixed
	     then if sym -> runtime_symbol.scale = "0"b
		  then call ioa_$rsnnl (" (^d)", temp, (0),
			  sym -> runtime_symbol.size);
		  else call ioa_$rsnnl (" (^d,^d)", temp, (0),
			  sym -> runtime_symbol.size,
			  bit8_to_bin8 (sym -> runtime_symbol.scale));
	     else call ioa_$rsnnl (" (^d)", temp, (0),
		     sym -> runtime_symbol.size);
				/* float, has no scale */
	   attr = attr || rtrim (temp);

	   attr = attr
	        ||
	        branch_on (data_type_info_$info (type)
	        .arithmetic_attributes.signed, "", " unsigned");
	 end;			/* arithmetic */
	 else do;			/* string or picture */
	   if data_type_info_$info (type).char_string
	        | data_type_info_$info (type).bit_string
	     then do;
	       attr = attr
		  ||
		  branch_on (data_type_info_$info (type).varying,
		  " varying", "");
	       attr = attr
		  ||
		  branch_on (data_type_info_$info (type).char_string,
		  " char", " bit");
	       attr = attr || "(";
	       attr = attr || value (sym -> runtime_symbol.size, sym);
	       attr = attr || ")";
	     end;			/* strings */
	   else if type = picture_runtime_dtype
	     then do;
	       p = ptr (sym, sym -> runtime_symbol.size);
				/* to picture_info_block */
	       if p -> picture_image.type = picture_complexfix_type |
		  p -> picture_image.type = picture_complexflo_type
	         then attr = attr || " complex picture";
	         else attr = attr || " picture";
	       attr = attr || " """;	/* to begin picture with */
	       attr = attr || p -> picture_image.chars;
	       attr = attr || """";
	     end;			/* picture */
	   else attr = "?";		/* some random computational type */
	 end;			/* non-arithmetic computational */
    else do;			/* non-computational */
      if type = pointer_dtype
        then attr = " pointer";
      else if type = offset_dtype
        then do;
	attr = " offset";
	if sym -> runtime_symbol.size ^= 0
	  then do;
	    attr = attr || "(";
	    attr = attr
	         || symbol_name (addrel (sym, sym -> runtime_symbol.size));
	    attr = attr || ")";
	  end;			/* getting default area */
        end;			/* offset */
      else if type = label_dtype
        then attr = " label variable";
      else if type = entry_dtype
        then attr = " entry variable";
      else if type = structure_dtype
        then attr = " structure";
      else if type = area_dtype
        then do;
	attr = " area (";
	attr = attr || value (sym -> runtime_symbol.size, sym);
	attr = attr || ")";
        end;
      else if type = file_dtype
        then attr = " file";
      else if type = label_constant_runtime_dtype
        then attr = " label";
      else if type = int_entry_runtime_dtype
        then attr = " internal entry";
      else if type = ext_entry_runtime_dtype
        then attr = " external entry";
      else if type = ext_procedure_runtime_dtype
        then attr = " external procedure";
      else attr = "?";
    end;				/* non-computational */

  attr = attr || branch_on (sym -> runtime_symbol.bits.packed, " unal", "");
  return (attr);

branch_on:
  proc (t_or_f, true_str, false_str) returns (char (*));
  dcl t_or_f		bit (1) unal parameter;
  dcl true_str		char (*) parameter;
  dcl false_str		char (*) parameter;

  if t_or_f
    then return (true_str);
    else return (false_str);
  end branch_on;

  end get_pl1_attr_str;

get_pl1_dims_str:
  proc (P_sym, P_inherited, P_verbose) returns (char (168) varying);

  dcl P_sym		ptr parameter;
  dcl P_inherited		fixed bin parameter;
  dcl P_verbose		bit (1) aligned parameter;

  dcl n			fixed bin;
  dcl i			fixed bin;
  dcl dims_str		char (168) varying;

  n = fixed (P_sym -> runtime_symbol.ndims, 6);
  if n <= P_inherited
    then dims_str = "";
    else do;
      if P_verbose
        then dims_str = " dimension (";
        else dims_str = " (";
      do i = P_inherited + 1 to n;
        if P_sym -> runtime_symbol.bounds (i).lower ^= 1
	then do;
	  dims_str =
	       dims_str
	       || value (P_sym -> runtime_symbol.bounds (i).lower, P_sym);
	  dims_str = dims_str || ":";
	end;
        dims_str =
	   dims_str
	   || value (P_sym -> runtime_symbol.bounds (i).upper, P_sym);
        if i < n			/* more to come */
	then dims_str = dims_str || ",";
      end;			/* dims loop */
      dims_str = dims_str || ")";
    end;
  return (dims_str);
  end get_pl1_dims_str;

get_pl1_level_str:
  proc (symb) returns (char (168) varying);
  dcl symb		ptr parameter;

  dcl l			fixed bin;/* level */
  dcl level_str		char (168) varying;

  l = fixed (symb -> runtime_symbol.level, 6);
  if l < 1
    then
         return ("");
  else if l = 1
    then
         return (" level 1");
  else do;
    call ioa_$rsnnl (" level ^d in ^a", level_str, (0), l,
         king_of_structure ());
    return (level_str);
  end;

king_of_structure:
  proc () returns (char (64));
  dcl i			fixed bin;
  dcl p			ptr;

  p = symb;
  do i = l - 1 to 1 by -1;
    p = addrel (p, p -> runtime_symbol.father);
  end;
  return (addrel (p, p -> runtime_symbol.name) -> acc.string);
  end king_of_structure;

  end get_pl1_level_str;

get_pl1_class_str:
  proc (symb) returns (char (168) varying);
  dcl symb		ptr parameter;
  dcl based_class		internal static fixed bin
			options (constant) init (3);
  dcl c			fixed bin;/* the class */
  dcl class_str		char (168) varying;

  dcl class_name		(15) char (20) internal static
			options (constant) init (
			"automatic", "automatic", "based",
			"internal static",
			"external static", "internal controlled",
			"external controlled", "parameter",
			"parameter", "?", "?", "constant", "constant",
			"?", "?");

  c = fixed (symb -> runtime_symbol.class, 4);
  class_str = class_name (c);

  if c = based_class
    then if symb -> runtime_symbol.location
	    ^= (18)"0"b /* got implicit qualifier */
	 then do;
	   class_str = class_str || " (";
	   class_str =
	        class_str
	        ||
	        symbol_name (addrel (symb, symb -> runtime_symbol.location))
	        ;
	   class_str = class_str || ")";
	 end;			/* getting implicit locator */
  return (class_str);
  end get_pl1_class_str;


  /* VARIOUS HANDY LITTLE PROCS */

symbol_name:
  proc (sp) returns (char (256) varying);

  dcl sp			ptr parameter;
				/* to the symbol node */
  dcl name		char (256) varying;
				/* its fully qualified name */
  dcl p			ptr;

  p = sp;
  name = addrel (p, p -> runtime_symbol.name) -> acc.string;
				/* our name */
  do while (fixed (p -> runtime_symbol.level, 6) > 1);
				/* invariant: we have a father */
    p = addrel (p, p -> runtime_symbol.father);
				/* point to father */
    name = addrel (p, p -> runtime_symbol.name) -> acc.string || "." || name;
				/* copy name */
  end;
  return (name);
  end symbol_name;



legal_type:
  proc (stype) returns (bit (1) aligned);
  dcl stype		fixed bin parameter;

  return (stype >= lbound (data_type_info_$info, 1) &
       stype <= hbound (data_type_info_$info, 1));
  end legal_type;


bit8_to_bin8:
  proc (b) returns (fixed bin (8));
  dcl b			bit (8) parameter;

  if bin (b, 8) <= 127
    then return (bin (b, 8));
    else return (bin (b, 8) - 256);
  end bit8_to_bin8;


value:
  procedure (ev, context) returns (character (10) varying);

  dcl ev			fixed bin (35) parameter;
				/* input: an encoded value */
  dcl context		ptr parameter;
				/* input: to symbol node of ev */

  dcl val			fixed bin (35);
  dcl 1 an_ev		aligned like encoded_value;
  dcl refp		ptr;	/* to data itself, for decoding */
  dcl block_ptr		ptr;
  dcl stack_ptr		ptr;
  dcl linkage_ptr		ptr;
  dcl based_class		bit (4) internal static options (constant)
			init ("0011"b);
  dcl code		fixed bin (35);
  dcl (char, ltrim, null, rtrim, string, unspec)
			builtin;

  dcl stu_$get_implicit_qualifier
			entry (ptr, ptr, ptr, ptr, ptr) returns (ptr);
  dcl stu_$decode_runtime_value
			entry (fixed bin (35), ptr, ptr, ptr, ptr, ptr,
			fixed bin (35)) returns (fixed bin (35));

  /* GLOBAL imports P_reference */

  string (an_ev) = unspec (ev);
  if an_ev.flag = "10"b
    then do;			/* it is encoded */
      stack_ptr = P_reference.source_info_ptr -> source_info.stack_ptr;
      linkage_ptr =
	 P_reference.source_info_ptr -> source_info.seg_info_ptr
	 -> seg_info.linkage_ptr;
      block_ptr = P_reference.source_info_ptr -> source_info.block_ptr;
      refp = P_reference.address_ptr;
      if refp = null
        then if context -> runtime_symbol.class = based_class
				/* can try for implicit */
	     then refp =
		     stu_$get_implicit_qualifier (block_ptr, context,
		     stack_ptr, linkage_ptr, block_ptr);
      val = stu_$decode_runtime_value (ev, block_ptr, stack_ptr, linkage_ptr,
	 block_ptr, refp, code);
      if code ^= 0
        then
	   return ("*");
    end;
    else val = ev;
  return (rtrim (ltrim (char (val))));

  end value;

%include probe_info;
%include probe_source_info;
%include probe_seg_info;
%include probe_references;
%include std_descriptor_types;
%include runtime_symbol;
%include statement_map;
%include acc;
%include data_type_info_;
%include picture_image;

  end;				/* print_pl1_attr; */
