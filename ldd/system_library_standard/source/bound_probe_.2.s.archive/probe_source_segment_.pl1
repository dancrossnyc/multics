/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/****^  HISTORY COMMENTS:
  1) change(87-06-18,RWaters), approve(87-06-18,MCR7687), audit(87-06-24,Huen),
     install(87-07-15,MR12.1-1040):
     Probe error #108: allow the object command to work w/o source code.
  2) change(88-09-07,WAAnderson), approve(88-09-30,MCR7952),
     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
     Added format control comment to make the source more readable.
                                                   END HISTORY COMMENTS */

/* format: style1,insnl,ifthendo,indthenelse,^indnoniterdo,^inditerdo,indcom,^indthenbegin,^indprocbody,ind2,ll78,initcol0,dclind4,idind24,struclvlind1,comcol41 */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

probe_source_segment_:
  proc ();

  call probe_error_$malfunction ();	/* dummy entry */

  /* This module is used to examine the source of a program.	It can list source
   statements,  search for a string in the source,  and check if a given
   statement is within the statement map.

   Initial Version:  13 August 1974 by Jeffrey M. Broughton
   Modified: 20 Sept 78 by James R Davis to not  print anything if ps "string"	fails,
   and to ident lines properly on output
   Converted to probe 4.0 05/19/79 WOS
   Fixed to implement ps "", May 79 JRD
/* Added $position_source_lines for relative positioning by number of lines 10/08/81 S. Herbst */
  /* Changed $find_source to handle regular expressions 10/09/81 S. Herbst */
  /* Changed to handle long PL/1 and FORTRAN statements (>256 chars) 10/23/81 S. Herbst */
  /* Added $get_file_ptr for use by probe_find_location_ */
  /* Fixed not to print to end of seg for some cases of symbol table mismatch 06/01/82 S. Herbst */
  /* Fixed bug in regular expression searching for complicated programs 07/14/82 S. Herbst */
  /* Fixed $list_statement to not stray beyond text into int proc statements 09/13/82 S. Herbst */
  /* Fixed "b /REGEXP/" loop bug 10/18/82 S. Herbst */
  /* Modified:  7 April 1983, TO - Add 'line_start' routine to correct for
	line start modulus 256K in source.  Add line counting to 
	'file_pointer' to setup line breaks. */
  /* Modified: 13 April 1983, TO - Modify archive checking to presume archive
	component implied.  Fix bug in 'get_stmt_length' in which the first
	statment can start at character 1, and have a length of 0.  If so,
	the max function prevents a character check at character position 0. */
  /* Modified: 11 May 1983, RG - To use find_source_file_$look_in_wdir which
	supports archive components implied/explicit. */
  /* Fixed regexp search with internal procedures 08/05/83 S. Herbst */
  /* Modified: 31 Aug 1983, Lee A. Newcomb: to use probe search lists. */
  /* Fixed to detect when saved source pointer points to wrong thing 09/01/83 S. Herbst */
  /* Fixed "ps /foo   /" to not ignore the trailing white space 02/09/84 S. Herbst */
  /* Fixed "ps +N" for case where last int proc is not end of program 02/10/84 S. Herbst */
  /* Fixed get_stmt_length for zero-length statements listed in map 02/13/84 S. Herbst */
  /* Fixed line_start int proc to test if seg_info.per_file(file).break_line(i) = 0 02/24/84 S. Herbst */
  /* Fixed not to check seg_info.(directory_name entry_name) since these usually
   refer to the object not the source 11/07/84 Steve Herbst */
  /* Fixed file_pointer proc to always search for source seg, not trust stored ptr 11/28/84 Steve Herbst */
  /* Fixed to return null on error if entered through $get_file_ptr 01/03/85 Steve Herbst */
  /* Fixed bug that caused a fault when stmt map shows 0 as a stmt's start position 01/16/85 Steve Herbst */
  /* Fixed loop caused by 2 stmt map entries for an on statement 01/16/85 Steve Herbst */
  /* Fixed undefined source bug when last match for regexp is last statement 01/23/85 Steve Herbst */
  /* Changed the procedure file_pointer to return an error code so the object command will work without a source file. 05/21/87 RWaters */


  dcl (
      P_probe_info_ptr	pointer,
      P_number_to_list	fixed bin,/* number of statements to list */
      P_search_string	character (*),
				/* string to be searched for */
      P_origin_source_info_ptr
			ptr,
      P_relocate		fixed bin,/* move source pointer this number of stmts */
      P_code		fixed bin (35)
      )			parameter;

  dcl 1 origin_source_info	aligned based (origin_source_info_ptr)
			like source_info;
  dcl origin_source_info_ptr	ptr;

  dcl position_lines	bit (1) aligned;
				/* position N lines instead of N statements */
  dcl returns_ptr_sw	bit (1) aligned;
  dcl line_number		fixed bin;
  dcl statement_number	fixed bin;
  dcl smp			pointer;	/* to first statement map entry of interest */
  dcl file_number		fixed bin;/* number of file that we are currently using */
  dcl filep		pointer;	/* to current file */
  dcl info		pointer;	/* seg_info pointer for origin_source_info */
  dcl based_string		character (1) aligned based;
				/* dummy string to overlay segment, and output buffer */

  dcl number		fixed bin initial (1);
				/* number of statements that we have listed */
  dcl start		fixed bin (35);
				/* character offset of start of statement's text */
  dcl len			fixed bin (35);
				/* length of the statement in characters */
  dcl offset		fixed bin;/* collumn in which statement starts */
  dcl p			ptr;
  dcl last_file_number	fixed bin;/* last source file scaned */
  dcl (stmt_len, stmt_start)	fixed bin (21);
  dcl code		fixed bin (35);
  dcl (i, j, last_source_index)
			fixed bin;

  dcl 1 map_array		(map_size) aligned based (smp)
			like statement_map;
				/* overlay for entire statement map */
  dcl map_size		fixed bin (21);
  dcl find_source_file_$search_path
			entry (char (*), char (*), char (*), char (*),
			ptr, fixed bin (24), fixed bin (35));
  dcl ioa_$ioa_switch_nnl	entry options (variable);
  dcl iox_$put_chars	entry (pointer, pointer, fixed binary (21),
			fixed binary (35));

  dcl probe_find_location_	entry (ptr, ptr, fixed bin, fixed bin,
			fixed bin, bit (36) aligned, ptr, fixed bin);

  dcl (
      probe_et_$bad_line,
      probe_et_$no_saved_string,
      probe_et_$string_search_failed,
      probe_et_$no_statement_map,
      probe_et_$recorded_message
      )			fixed bin (35) external static;

  dcl probe_error_		entry options (variable);
  dcl probe_error_$malfunction
			entry options (variable);
  dcl probe_error_$record	entry options (variable);

  dcl newline		char (1) aligned internal static
			options (constant) initial ("
");
  dcl TAB_BS		char (2) internal static options (constant)
			init ("	");

  dcl (addrel, addr, binary, divide, fixed, index, length, max, min)
			builtin;
  dcl (mod, null, pointer, reverse, rtrim, string, substr, unspec)
			builtin;
%page;
list_statement:
  entry (P_probe_info_ptr, P_origin_source_info_ptr, P_number_to_list, P_code)
       ;

  returns_ptr_sw = "0"b;

  call common_setup;

  if statement_number < 1 | statement_number > map_size
    then call probe_error_ (probe_info_ptr, probe_et_$bad_line, "", "");
				/* segment does not have a table of source lines */

  smp = addr (smp -> map_array (statement_number));
				/* make smp point only to the part of the source map we */
				/* are interested in. This is sorta kludgy. */

  last_file_number = -1;		/* no such file number; for comparison */

  do while (number <= P_number_to_list);/* loop until we have processed all statements */
    file_number = fixed (map_array (number).file) + 1;
    if file_number = last_file_number
      then goto MAIN_RETURN;		/* gone beyond text into int proc statements */
    last_file_number = file_number;
    filep = file_pointer (P_code);	/* get a pointer to the file */
    if P_code ^= 0
      then goto MAIN_RETURN;
    start = line_start (number - 1 + statement_number) + 1;
				/* where in segment does statement begin */

    /* get character offset of statement from beginning of line */

    i = start
         -
         index (reverse (substr (filep -> based_string, 1, start - 1)),
         newline);
    if i = start
      then i = 0;			/* find location of first preceding newline */

    offset = 0;			/* at start of line, no padding needed */
    do i = i + 1 to start - 1;	/* compute indentation of the line */
      j = index (TAB_BS, substr (filep -> based_string, i, 1));
				/* check if tab, backspace or something else */
      if j = 0
        then offset = offset + 1;	/* and have a width of one */
      else if j = 1
        then /* a tab */
	   offset = offset + 10 - mod (offset, 10);
				/* compute how far to tabulate */
      else if j = 2
        then offset = offset - 1;	/* backspace */
    end;

    /* get all lines that we can print in this part -- all that belong to the same file,
   and which have monotonically increasing line and statement numbers */

    do number = number + 1 by 1
         to P_number_to_list /* look for a statement not in current group */
         while (file_number = fixed (map_array (number).file) + 1
         & string (map_array (number).source_id)
         >= string (map_array (number - 1).source_id));
    end;
    len = line_start (statement_number - 1 + number - 1) - start +
         get_stmt_length (fixed (map_array (number - 1).length, 17, 0),
         (number)) + 1;

    if len = 0
      then call probe_error_ (probe_info_ptr, probe_et_$bad_line, "", "");
				/* may happen for dcl statement */
      else do;			/* write out the lines */
        call ioa_$ioa_switch_nnl (probe_info.output_switch, "^v( ^)", offset);
        p = addr (substr (filep -> based_string, start, 1));
        call iox_$put_chars (probe_info.output_switch, p, (len), code);
        if code ^= 0
	then call probe_error_ (probe_info_ptr, code, "Writing output");
        call iox_$put_chars (probe_info.output_switch, addr (newline), 1,
	   code);
      end;

    if string (map_array (number).source_id) = (27)"1"b
      then goto MAIN_RETURN;
				/* we have reached the end of the program */

  end;				/* and loop back for next file, if there is one */

  goto MAIN_RETURN;
%page;
position_source:
  entry (P_probe_info_ptr, P_origin_source_info_ptr, P_relocate, P_code);

  position_lines = "0"b;
  go to POSITION;


position_source_lines:
  entry (P_probe_info_ptr, P_origin_source_info_ptr, P_relocate, P_code);

  position_lines = "1"b;

POSITION:
  returns_ptr_sw = "0"b;

  call common_setup;

  if statement_number < 0 | statement_number > map_size
    then do;
      P_code = probe_et_$bad_line;
      goto SOME_ERROR;
    end;

  if position_lines then do;
POSITION_LINES:
      line_number = fixed (map_array (statement_number).line);
				/* ps +N lines, ps -N lines */
      line_number = line_number + P_relocate;
      if line_number < 1 then do;
	call probe_error_$record (probe_info_ptr, 0,
	     "Attempt to position before first line.");
	go to RECORDED_MESSAGE;
        end;

      call probe_find_location_ (probe_info_ptr,
	 origin_source_info.seg_info_ptr,
	 0, line_number, 1, "1110"b, (null), statement_number);
      if statement_number = -1 then do;
	call probe_error_$record (probe_info_ptr, 0,
	     "No source line number ^d", line_number);
	go to RECORDED_MESSAGE;
        end;
    end;

    else do;			/* ps +N, ps -N */
      if statement_number + P_relocate < 0
	 | statement_number + P_relocate > map_size then do;
	position_lines = "1"b;
	go to POSITION_LINES;	/* next best thing */
        end;
      statement_number = statement_number + P_relocate;
    end;

  goto CALCULATE_BLOCK_ETC;
%page;
find_source:
  entry (P_probe_info_ptr, P_origin_source_info_ptr, P_search_string, P_code);

  /* this entry implements the search for a quoted string - it remembers the string used for
   use if a "" is upplied */

  dcl search_string		char (256) varying;
				/* string to search for */
  dcl regexp_string		char (256) varying;
				/* search_string /.../ without the slashes */
  dcl previous_search_string	char (256) varying internal static init ("");
				/* last string searched for */

  dcl (found_start, search_end, search_start)
			fixed bin (21);
  dcl search_file_		entry (ptr, fixed bin (21), fixed bin (21), ptr,
			fixed bin (21), fixed bin (21), fixed bin (21),
			fixed bin (21), fixed bin (35));

  returns_ptr_sw = "0"b;

  call common_setup;

  if P_search_string = "" then do;	/* wants same string as last time */
      if previous_search_string = "" then do;
				/* but there was no last time */
	P_code = probe_et_$no_saved_string;
				/* failure */
	goto SOME_ERROR;
        end;
      search_string = previous_search_string;
    end;

    else do;
      search_string = P_search_string;
      previous_search_string = P_search_string;
				/* and save it for posterity */
    end;

  if substr (search_string, 1, 1) = "/"
       & substr (search_string, length (rtrim (search_string)), 1) = "/"
    then do;
				/* regular expression */
      regexp_string =
	 substr (search_string, 2, length (rtrim (search_string)) - 2);

      search_end = line_start ((map_size)) +
	 fixed (map_array (map_size).length, 17, 0) - 1;

      if statement_number < 1 | statement_number > map_size then do;
	search_start = line_start (1);
	statement_number = 0;
        end;
      else if statement_number = map_size
        then search_start = search_end;
      else do;
        if unspec (map_array (statement_number).source_info) =
	   unspec (map_array (statement_number + 1).source_info)
	then
	     statement_number = statement_number + 1;
				/* there are 2 stmt map entries for an on statement */
        search_start = line_start (statement_number + 1);
      end;

      file_number =
	 fixed (map_array (min (map_size, statement_number + 1)).file, 17,
	 0) + 1;
      filep = file_pointer (code);
      if code ^= 0
        then
	   call probe_error_ (probe_info_ptr, code);

      search_end = 0;
      do i = 1 to map_size;
        j = line_start (i);
        if j > search_end then do;
	  search_end = j;
	  last_source_index = i;
	end;
      end;
      search_end =
	 search_end + fixed (map_array (last_source_index).length, 17, 0)
	 - 1;

      if statement_number < 1 | statement_number > map_size then do;
	search_start = max (1, fixed (map_array (1).start, 17, 0));
	statement_number = 0;
        end;
      else if statement_number = map_size
        then search_start = search_end;
      else search_start =
	      max (1, fixed (map_array (statement_number + 1).start, 17, 0))
	      ;

SEARCH:
      call search_file_ (addrel (addr (regexp_string), 1), 1,
	 length (regexp_string),
	 filep, search_start, search_end, found_start, 0, code);
      if code ^= 0 then do;		/* search previous portion too, like ps "STRING" */

	call search_file_ (addrel (addr (regexp_string), 1), 1,
	     length (regexp_string),
	     filep, 1, search_start - 1, found_start, 0, code);
	if code ^= 0 then do;
	    P_code = probe_et_$string_search_failed;
	    goto MAIN_RETURN;
	  end;
        end;

      do i = 1 to map_size;		/* find the statement corresponding to this text position */
        stmt_start = line_start (i);
        stmt_len = fixed (map_array (i).length, 21, 0);
        if found_start >= stmt_start & found_start < stmt_start + stmt_len
	then
	     go to FOUND_STRING;
      end;

      search_start = found_start + 1;	/* must be in a comment; keep searching */
      go to SEARCH;
    end;


  if statement_number < 1 | statement_number > map_size
    then statement_number = 0;	/* start at beginnning, if undefined loc now */

  /* Scan through all executable statements looking for "string" */

  last_file_number = -1;		/* shouldn't be any file with this number */
  do i = statement_number + 1 to info -> seg_info.map_size,
       1 to statement_number;
    file_number = fixed (map_array (i).file, 17, 0) + 1;
				/* get file number */
    if file_number ^= last_file_number	/* if not in last file, get new filep */
      then filep = file_pointer (code);

    start = line_start (i) + 1;	/* where in source is the line */
    len = get_stmt_length (fixed (map_array (i).length, 17, 0), i + 1);

    if index (substr (filep -> based_string, start, len), search_string) ^= 0
      then goto FOUND_STRING;

    last_file_number = file_number;	/* not in current line try again */
  end;				/* of loop through statements */

  P_code = probe_et_$string_search_failed;
				/* sorry */
  goto MAIN_RETURN;

FOUND_STRING:
  statement_number = i;

  goto CALCULATE_BLOCK_ETC;



CALCULATE_BLOCK_ETC:

  dcl loc			bit (18);
  dcl hp			ptr;
  dcl stu_$find_containing_block
			entry (ptr, fixed bin (18) unsigned)
			returns (ptr);
  dcl probe_stack_trace_$find_block_frame
			entry (ptr, ptr);

  loc = map_array (statement_number).location;
  hp = info -> seg_info.symbol_header_ptr;

  origin_source_info.block_ptr =
       stu_$find_containing_block (hp, binary (loc, 18, 0));

  if origin_source_info.block_ptr ^= null ()
    then call probe_stack_trace_$find_block_frame (probe_info_ptr,
	    origin_source_info_ptr);

  /* must set these after searching stack */

  origin_source_info.instruction_ptr = pointer (hp, loc);
  origin_source_info.stmnt_map_entry_index = statement_number;

  goto MAIN_RETURN;			/* end for position and search */
%page;
get_file_ptr:
  entry (P_probe_info_ptr, P_origin_source_info_ptr, P_file_number)
       returns (ptr);

  dcl P_file_number		fixed bin;

  returns_ptr_sw = "1"b;

  call common_setup;

  if P_file_number = 0
    then file_number = 1;
    else file_number = P_file_number;
  return (file_pointer (0));
%page;
common_setup:
  proc;

  /* all three entries call this internal proc to do common setup and checking */


  probe_info_ptr = P_probe_info_ptr;
  origin_source_info_ptr = P_origin_source_info_ptr;
  P_code = 0;

  info = origin_source_info.seg_info_ptr;
  if info = null ()
    then do;
      P_code = probe_et_$bad_line;
      goto SOME_ERROR;
    end;

  smp = info -> seg_info.statement_map_ptr;
  if smp = null ()
    then do;
      P_code = probe_et_$no_statement_map;
      goto SOME_ERROR;
    end;

  map_size = info -> seg_info.map_size;

  statement_number = origin_source_info.stmnt_map_entry_index;
  end common_setup;
RECORDED_MESSAGE:
  P_code = probe_et_$recorded_message;
  goto MAIN_RETURN;

SOME_ERROR:
  if returns_ptr_sw
    then
         return (null);

MAIN_RETURN:
  return;
%page;
get_stmt_length:
  proc (P_len, P_next_number) returns (fixed bin (35));

  /* Looks for the statement delimiter; since the statement map's length number
   is mod (256), end of stmt is either N, 256+N, 512+N, etc. */

  dcl (P_len, P_next_number, len, limit)
			fixed bin (35);
  dcl lang		fixed bin;
  dcl char		char (1);
  dcl max			builtin;


  if P_len = 0
    then
         return (0);

  lang = info -> seg_info.language_type;
  if lang ^= PL1_lang_type & lang ^= PASCAL_lang_type
       & lang ^= FORTRAN_lang_type
    then
         return (P_len);		/* nothing we can do */

  len = P_len;
  limit = line_start ((P_next_number)) - start;
				/* up to start of next statement in map */

  do while (len < limit);

    char = substr (filep -> based_string, max (start + len - 1, 1), 1);
    if lang = FORTRAN_lang_type then do;
        if char = ";" | char = newline
	then
	     return (len);
      end;
    else if char = ";"
      then
	 return (len);

    len = len + 256;
  end;

  return (P_len);

  end get_stmt_length;
%page;
file_pointer:
  procedure (e_code) returns (pointer);

  /* global imports:
   info ptr to seg_info
   file_number the number of the file of interest
*/

  dcl e_code		fixed bin (35);
  dcl bitcount		fixed bin (24);
  dcl char_count		fixed bin (21);
  dcl (i, j, k, start, limit) fixed bin (21);
  dcl line		fixed bin;
  dcl string		char (char_count) unaligned based (try);
  dcl NL			char (1) static options (constant) initial ("
");
  dcl try			pointer;
  dcl osrc		pointer;	/* to original source map */
  dcl relpath		char (relpath_l) based (relpath_p);
				/* the rel path we must expand */
  dcl relpath_l		fixed bin;
  dcl relpath_p		ptr;
  dcl relpath_ename		char (32);/* the entryname part of relpath as */
				/* returned by find_source_file_$search_path */

  e_code = 0;
  osrc = info -> seg_info.original_source_ptr;

  /* get pointer to the segment */
  try = info -> seg_info.file_pointers (file_number);

  if try = null () then do;
      relpath_p =
	 addrel (info -> seg_info.symbol_header_ptr,
	 osrc -> source_map.offset (file_number));
      relpath_l = (fixed (osrc -> source_map (file_number).size));
				/* and get length of files path */
      call find_source_file_$search_path ((relpath), "", "probe",
	 relpath_ename, try, bitcount, e_code);

      /* If we are attempting to execute the object request, then just return
an error code all the way back to probe_requests_$object and let it handle it.
Otherwise call probe_error_
*/
      if e_code ^= 0
        then
	   if probe_info.request_name = "object"
	     then
		return (null ());
    end;

  if try = null () then do;
      call probe_error_ (probe_info_ptr, e_code,
	 "Cannot find source file ^a using probe search list.",
	 relpath_ename);
      return (null ());
    end;

  if try ^= info -> seg_info.file_pointers (file_number) then do;

      /* if the file is beyond the 256K character limit then we need to fill in
   the line break points. Do this by counting lines in all 256K character
   sections which are filled, and fill in the line_break point table.  The last
   table entry is always the maximum possible 18-bit line number to stop the
   scan. */

      char_count = divide (bitcount, 9, 21, 0);

      line = 1;
      j = 0;
      do i = 1 to divide (char_count, 2 ** 18, 18, 0);
        start = (i - 1) * 2 ** 18 + 1;
        limit = 2 ** 18;
        k = index (substr (string, start, limit), NL);
        do line = line repeat line + 1 while (k ^= 0);
	limit = limit - k;
	k = index (substr (string, start, limit), NL);
	start = start + k;
        end /* do line (count lines)*/;

        info -> seg_info.per_file (file_number).break_line (j) = line;
        j = j + 1;
      end /* do i (scan char blocks) */;
      info -> seg_info.per_file (file_number).break_line (j) = 2 ** 18 - 1;

      /* Having just gotton ptr to source file, we might want to check it to see if
   it has changed since the object seg was compiled, and WARN if so. */

      info -> seg_info.file_pointers (file_number) = try;
    end;
  return (info -> seg_info.file_pointers (file_number));

  end file_pointer;
%page;
line_start:
  procedure (line_number) returns (fixed bin (21));

  /* Procedure to scan the segment information line_break and convert the
   line character offset in the map, with the line character modulus info
   in the seg_info structure to a true character address. */

  dcl address		fixed bin (21);
				/* character address */
  dcl file		fixed bin;/* current file */
  dcl i			fixed bin;
  dcl source_line		fixed bin;/* line in source */
  dcl break_line		fixed bin;
  dcl line_number		fixed bin;
  dcl smp			ptr;


  smp = info -> seg_info.statement_map_ptr;
  file = fixed (smp -> map_array (line_number).file, 17, 0) + 1;
  source_line = fixed (smp -> map_array (line_number).line, 14, 0);
  address = fixed (smp -> map_array (line_number).start, 18, 0);

  do i = 0 to 3;
    break_line = info -> seg_info.per_file (file).break_line (i);
    if break_line <= 0
      then
	 return (address);		/* no info stored for this entry */
    else if source_line > break_line
      then address = address + 2 ** 18;
    else
         return (address);
  end;
  return (address);

  end line_start;
%page;
%include access_mode_values;
%page;
%include probe_info;
%page;
%include probe_lang_types;
%page;
%include probe_seg_info;
%page;
%include probe_source_info;
%page;
%include source_map;
%page;
%include statement_map;


  end probe_source_segment_;
