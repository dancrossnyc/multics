/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(88-09-07,WAAnderson), approve(88-09-30,MCR7952),
     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
     Added format control comment to make the source more readable.
                                                   END HISTORY COMMENTS */


/* format: style1,insnl,ifthendo,indthenelse,^indnoniterdo,^inditerdo,indcom,^indthenbegin,^indprocbody,ind2,ll78,initcol0,dclind4,idind24,struclvlind1,comcol41 */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

probe_stack_trace_:
  proc ();

  call probe_error_$malfunction ();	/* dummy entry */

  /* this module is the interface to the Multics stack - it is the only authorized caller of
   probe_trace_a_stack_, and shares with it and only it the knowledge of the internal
   probe stack.  We have a variety of entries to return information about the invocations of
   entries on the stack


   print_stack_history 	- dump the stack in nice format

   find_previous_invocation	- ???
   find_condition_frame	- find info for condition
   get_level		- find info for frame N
   find_frame		- find info for first frame with SP = x
   find_block_frame		- find info for frame of given BP
   find_proc_frame		 -find info for the N'th frame of given entry_ptr
   condition_raised		- return name of condition raised in frame of given SP, or ""

   where_source_info	-interprets a source_info, setting level number and block name for caller


   Initial Version:  13 August 1974 by Jeffrey M. Broughton
   Modified:  19 August 1975 by JMB to allocate level structures
   Modified:   7 June 78 by James R. Davis fix TR1326
   Modified:28 June 78 By JRD to not lose with new_fortran
   Modified: 20 Sept 78 by JRDto not include find_physical_block
   Converted to probe 4.0 05/19/79 WOS
   yet more conversion JRD 1 July 79 */
  /* Added $current_level function entrypoint for use in "ps level +N" 10/09/81 S. Herbst */
  /* Changed to use level_frame.printed_number 12/10/81 S. Herbst */
  /* Fixed to call probe_block_name_ with "0"b (brief form) 08/26/83 S. Herbst */

  dcl (
      P_probe_info_ptr	pointer,
      P_entry_ptr		pointer,	/* (Input) pointer to desired procedure */
      P_invocation		fixed bin,/* what this number of levels back */
      P_level_number	fixed bin,/* (Input) desired level_number */
      P_level_decimal	fixed bin,/* (Input) support frame decimal M in N.M */
      P_block_name		char (*), /* name of a block found */
      P_cond_name		char (32),/* (output) name of the condition found */
      P_sourcep		ptr,	/* to callers source_info to be filled in or used as input */
      P_invoc_count		fixed bin,/* (input): number of invocations back to search for */
      P_stack_frame_ptr	pointer
      )			parameter;/* pointer to stack frame we are interested in */


  /* many of these entries take a source_info struc, using some of the values as input, or perhaps
   filling the struc in as output.  All entries that need this struc have as parameter P_sourcep,
   which is assigned to level_source_ptr, and the struc found_source_info is referenced */
  dcl 1 found_source_info	aligned like source_info
			based (level_source_ptr);
  dcl level_source_ptr	ptr;



  dcl count		fixed bin;/* number of invocations found thus far */
  dcl last_invocation	pointer;	/* last invocation found */
  dcl saved_lfp		pointer;
  dcl i			fixed bin;
  dcl continue_tracing	bit (1) aligned;
  dcl code		fixed bin (35);

  dcl 1 cond_info		aligned like condition_info automatic;

  dcl find_condition_info_	entry (pointer, pointer, fixed bin (35));

  dcl probe_error_$malfunction
			entry options (variable);
  dcl probe_block_name_	entry (ptr, ptr, bit (1) aligned)
			returns (character (256) varying);
  dcl probe_trace_a_stack_	entry (ptr, ptr, bit (1) aligned);

  dcl (addr, max, null)
			builtin;
				/*  */
MAIN_RETURN:
  return;
				/*  */
probe_stack_trace_$find_proc_frame:
  entry (P_probe_info_ptr, P_sourcep, P_entry_ptr, P_invoc_count);


  level_source_ptr = P_sourcep;
  call setup;
  count = 0;
  last_invocation = null ();

  lfp = stack_info.level_chain;
  continue_tracing = "1"b;		/* curse pl1, which lacks do ... until */
  do while (continue_tracing);
    if level_frame.entry_ptr = P_entry_ptr then do;
        last_invocation = lfp;	/* remember in case this is the last one found */
        count = count + 1;
      end;

    if (count >= P_invoc_count) | (level_frame.number >= stack_info.max_level)
      then
	 continue_tracing = "0"b;
      else lfp = level_frame.next;	/* look at the next frame */
  end;

  if last_invocation = null () then do; /* didn't find any */
      found_source_info.entry_ptr,
	 found_source_info.stack_ptr,
	 found_source_info.block_ptr,
	 found_source_info.instruction_ptr = null ();
      found_source_info.stmnt_map_entry_index = -1;

      /* the old code set the entry_ptr to that passed to us */
      goto MAIN_RETURN;
    end;

  lfp = last_invocation;
  found_source_info = level_frame.source_info;

  goto MAIN_RETURN;			/* end of code for $find_proc_frame entry point */

  /*  */


  /* used by get_invocation_level - whateverit is called now */

probe_stack_trace_$find_previous_invocation:
  entry (P_probe_info_ptr, P_sourcep, P_invocation);


  call setup;
  level_source_ptr = P_sourcep;

  count = 0;
  last_invocation = null ();

  if found_source_info.stack_ptr ^= null & found_source_info.block_ptr ^= null
    then do;			/* look for it */
      lfp = stack_info.level_chain;
      continue_tracing = "1"b;	/* curse pl1, which lacks do ... until */
      do while (continue_tracing);	/* look for [invocation]th occurence of frame */
        if count <= 0 then do;
	  if found_source_info.stack_ptr = level_frame.stack_ptr
	    then /* look for starting level */
	         if found_source_info.block_ptr = level_frame.block_ptr
		 then do;		/* found */
		   count = 1;
		   last_invocation = lfp;
		 end;
	end;

        else if found_source_info.block_ptr = level_frame.block_ptr then do;
	  count = count + 1;	/* found one, now look for previous */
	  last_invocation = lfp;
	end;

        if (count >= P_invocation)
	   | (level_frame.number >= stack_info.max_level)
	then
	     continue_tracing = "0"b;
	else lfp = level_frame.next;	/* consider the previous frame */
      end;
    end;

  if last_invocation = null () then do; /* not even one */
      found_source_info.stack_ptr, found_source_info.instruction_ptr = null;
      goto MAIN_RETURN;
    end;

  found_source_info = last_invocation -> level_frame.source_info;

  goto MAIN_RETURN;			/* end of code for $find_previous_invocation entry */

  /*  */
probe_stack_trace_$condition_raised:
  entry (P_probe_info_ptr, P_sourcep, P_cond_name);


  call setup;
  level_source_ptr = P_sourcep;

  do lfp = stack_info.level_chain repeat level_frame.next
       while (level_frame.number <= stack_info.max_level);
    if level_frame.stack_ptr = found_source_info.stack_ptr
      then do;
        if level_frame.condition_frame_ptr = null () then do;
				/* don't let f_c_i_ do this, it does it wrong */
	  P_cond_name = "";		/* no condition */
	  goto MAIN_RETURN;
	end;

        call find_condition_info_ ((level_frame.condition_frame_ptr),
	   addr (cond_info), (0));
        P_cond_name = cond_info.condition_name;
        goto MAIN_RETURN;
      end;
  end;				/* loop */
  P_cond_name = "";			/* not found ! unlikely */
  goto MAIN_RETURN;			/* end of code for condition_raised */

probe_stack_trace_$find_condition_frame:
  entry (P_probe_info_ptr, P_sourcep, P_cond_name);

  call setup;

  level_source_ptr = P_sourcep;

  begin;
    dcl other_frame		  ptr;
    dcl error_frame		  ptr;

    other_frame, error_frame = null ();
    lfp = stack_info.level_chain;
    continue_tracing = "1"b;		/* curse pl1, which lacks do ... until */
    do while (continue_tracing);
      if level_frame.condition_frame_ptr ^= null
        then
	   if level_frame.error_signalled
				/* "error" is less interesting then others */
	     then if error_frame = null
		  then error_frame = lfp;
				/* first instance of "error" */
		  else ;		/* not the first, leave ptr alone */
	     else other_frame = lfp;	/* more interesting error, search done */

      if (level_frame.number >= stack_info.max_level)
	 | (other_frame ^= null ())
        then
	   continue_tracing = "0"b;
        else lfp = level_frame.next;
    end;				/* loop through frames */

    if other_frame = null
      then /* got no interesting one? */
	 other_frame = error_frame;	/* so use "error" */

    if other_frame = null then do;
        P_cond_name = "";
        found_source_info.stack_ptr,
	   found_source_info.entry_ptr,
	   found_source_info.block_ptr,
	   found_source_info.instruction_ptr = null ();
      end;
      else do;
        call find_condition_info_
	   ((other_frame -> level_frame.condition_frame_ptr),
	   addr (cond_info), code);
        P_cond_name = cond_info.condition_name;
        found_source_info = other_frame -> level_frame.source_info;
      end;
  end;				/* begin block */

  goto MAIN_RETURN;			/* end of code for $find_condition_frame entry point */

  /*  */

probe_stack_trace_$current_level:
  entry (P_probe_info_ptr) returns (fixed bin);

  /* Returns the number (as traced by "stack") of the current frame */


  call setup;

  lfp = stack_info.level_chain;
  return (level_frame.printed_number);

  /* end of code for $current_level entrypoint */

  /*  */

probe_stack_trace_$get_level:
  entry (P_probe_info_ptr, P_sourcep, P_level_number, P_level_decimal);


  call setup;
  level_source_ptr = P_sourcep;

  i = max (1, P_level_number);	/* must be positive */

  lfp = stack_info.level_chain;
  continue_tracing = "1"b;		/* curse pl1, which lacks do ... until */
  do while (continue_tracing & lfp ^= null);
				/* find indicated frame */

    saved_lfp = lfp;

    if level_frame.printed_number = i
         & level_frame.printed_decimal = P_level_decimal
      then
	 continue_tracing = "0"b;
      else lfp = lfp -> level_frame.next;
  end;

  if lfp = null
    then lfp = saved_lfp;		/* asked for too high a number; give highest */
  P_sourcep -> source_info = level_frame.source_info;

  goto MAIN_RETURN;			/* end of code for $get_level entrypoint */

  /*  */

probe_stack_trace_$find_frame:
  entry (P_probe_info_ptr, P_sourcep, P_stack_frame_ptr);


  call setup;
  level_source_ptr = P_sourcep;

  lfp = stack_info.level_chain;
  continue_tracing = "1"b;		/* curse pl1, which lacks do ... until */
  do while (continue_tracing);	/* search all frames for one that matches */
    if level_frame.stack_ptr = P_stack_frame_ptr then do;
				/* found it */
        found_source_info = level_frame.source_info;
        goto MAIN_RETURN;
      end;
    if level_frame.number >= stack_info.max_level
      then
	 continue_tracing = "0"b;
      else lfp = level_frame.next;
  end;

  found_source_info.stack_ptr,
       found_source_info.block_ptr,
       found_source_info.instruction_ptr,
       found_source_info.entry_ptr = null ();
  goto MAIN_RETURN;			/* end of code for $find_frame entrypoint */

  /*  */

probe_stack_trace_$find_block_frame:
  entry (P_probe_info_ptr, P_sourcep);

  /* given a block pointer, search the stack for the first frame whose block is the given
   block - if not found, then found_source_info.stack_ptr will be null () */


  call setup;
  level_source_ptr = P_sourcep;

  if found_source_info.block_ptr = null ()
    then call probe_error_$malfunction (probe_info_ptr, 0,
	    "null block ptr in call to find_block_frame");

  continue_tracing = "1"b;		/* I wish we had do ... until */
  lfp = stack_info.level_chain;
  do while (continue_tracing);
    if level_frame.block_ptr = found_source_info.block_ptr then do;
        found_source_info = level_frame.source_info;
        goto MAIN_RETURN;
      end;

    if level_frame.number >= stack_info.max_level
      then
	 continue_tracing = "0"b;
      else lfp = level_frame.next;
  end;				/* of loop through frames */

  found_source_info.stack_ptr = null ();
  goto MAIN_RETURN;
				/* end of code for $find_block_frame entrypoint */

  /*  */

probe_stack_trace_$where_source_info:
  entry (P_probe_info_ptr, P_sourcep, P_level_number, P_block_name);


  call setup;
  level_source_ptr = P_sourcep;

  continue_tracing = "1"b;		/* I wish we had do ... until */
  lfp = stack_info.level_chain;
  do while (continue_tracing);	/* look for the frame for the current block */
    if level_frame.stack_ptr = found_source_info.stack_ptr
         & level_frame.block_ptr = found_source_info.block_ptr then do;
        P_level_number = level_frame.printed_number;
        P_block_name =
	   probe_block_name_ (probe_info_ptr,
	   addr (level_frame.source_info), "0"b);
        goto MAIN_RETURN;
      end;

    if level_frame.number >= stack_info.max_level
      then
	 continue_tracing = "0"b;
      else lfp = level_frame.next;
  end;

  /* not found, so make the name by using the input, and hope there's enough
   information there to make a coherent name */

  P_block_name =
       probe_block_name_ (probe_info_ptr, addr (found_source_info), "0"b);
  P_level_number = -1;		/*  show failure */

  goto MAIN_RETURN;			/* no frame for block */

  /*  */
setup:
  proc;


  probe_info_ptr = P_probe_info_ptr;

  call probe_trace_a_stack_ (probe_info_ptr,
       probe_info.current_stack_frame -> frame.back,
       (stack_info.traced_with_all));
  end setup;


  /*	INCLUDE FILES	*/

  /* ;;;;;;; */

%include probe_info;

  /* ;;;;;;; */

%include probe_static_info;

  /* ;;;;;;; */

%include probe_source_info;

  /* ;;;;;;; */

%include probe_seg_info;

  /* ;;;;;;; */

%include probe_level_frame;

  /* ;;;;;;; */

%include stack_frame;

  /* ;;;;;;; */

%include stack_header;

  /* ;;;;;;; */

%include lot;

  /* ;;;;;;; */

%include stu_frame;

  /* ;;;;;;; */

%include condition_info;

  /* ;;;;;;; */

%include runtime_symbol;

  /* ;;;;;;; */

%include std_symbol_header;

  /* ;;;;;;; */

%include pl1_symbol_block;

  /* ;;;;;;; */

%include probe_lang_types;

  /* ;;;;;;; */

%include statement_map;

  end;				/* probe_stack_trace_ external procedure */
