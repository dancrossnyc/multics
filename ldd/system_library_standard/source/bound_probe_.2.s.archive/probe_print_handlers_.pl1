/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(88-09-07,WAAnderson), approve(88-09-30,MCR7952),
     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
     Added format control comment to make the source more readable.
                                                   END HISTORY COMMENTS */


/* format: style1,insnl,ifthendo,indthenelse,^indnoniterdo,^inditerdo,indcom,^indthenbegin,^indprocbody,ind2,ll78,initcol0,dclind4,idind24,struclvlind1,comcol41 */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/* probe_print_handlers_ - lists enabled condition handlers in a frame.

   Cribbed 14 November 1981 by J. Spencer Love from list_onunits_, which is called by trace_stack_			*/

probe_print_handlers_:
  procedure (P_probe_info_ptr, P_source_info_ptr);

  declare P_probe_info_ptr	    ptr parameter,
	P_source_info_ptr	    ptr parameter;
				/* input: to source info describing frame */

  declare (addr, addrel, baseno, null, size, unspec)
			    builtin;

  declare cname_len		    fixed bin (21),
	file_given	    bit (1) aligned,
	file_name		    char (32),
	on_unit_ptr	    ptr,
	oswitch		    ptr,
	source_info_ptr	    ptr,
	strp		    ptr;

  declare cname		    char (cname_len)
			    based (on_unit_ptr -> on_unit.name);

  declare 1 Arg_source	    aligned like source_info
			    based (source_info_ptr);

  declare 1 filevar		    based aligned,
	 2 fabp		    ptr,
	 2 fsbp		    ptr;

  declare 1 fab		    based aligned,
				/* File attributes block. */
	 2 switch		    bit (36),
	 2 filename	    char (32);

  declare interpret_ptr_	    entry (ptr, ptr, ptr),
	ioa_$ioa_switch	    entry () options (variable);
%page;
%include probe_info;
%page;
%include probe_source_info;
%page;
%include on_unit;
%page;
%include stack_frame;
%page;
%include interpret_ptr_struc;
%page;

  probe_info_ptr = P_probe_info_ptr;
  source_info_ptr = P_source_info_ptr;

  oswitch = probe_info.output_switch;
  sp = Arg_source.stack_ptr;

  strp = addr (strbuf);

  if (^stack_frame_flags.condition) | (stack_frame.on_unit_relp1 = ""b)
    then do;
      call ioa_$ioa_switch (oswitch, "No handlers.");
      return;
    end;

  do on_unit_ptr = addrel (sp, stack_frame.on_unit_relp1)
       repeat (addrel (sp, on_unit_ptr -> on_unit.next))
       while (on_unit_ptr ^= sp);

    cname_len = on_unit_ptr -> on_unit.size;
    if cname_len < 0
      then do;
        call ioa_$ioa_switch (oswitch,
	   "Warning:  On unit at ^p has condition name length of ^d.",
	   on_unit_ptr, cname_len);
        cname_len = 0;
      end;
    else if cname_len > 32
      then do;
        call ioa_$ioa_switch (oswitch,
	   "Warning:  On unit at ^p has condition name length of ^d.
^-Maximum length for condition names is 32.", on_unit_ptr, cname_len);
        cname_len = 32;
      end;

    if cname_len > 0
      then do;
        if on_unit_ptr -> on_unit.pad ^= ""b
	then call ioa_$ioa_switch (oswitch,
		"Warning:  Pad field in on unit at ^p is ""^16b""b.",
		on_unit_ptr, on_unit_ptr -> on_unit.pad);

        call check_file_given ();

        if on_unit_ptr -> on_unit.flags.pl1_system
	then call ioa_$ioa_switch (oswitch,
		"on ^a^[ (^a)^;^s^]^[ snap^] system;", cname, file_given,
		file_name, on_unit_ptr -> on_unit.pl1_snap);

	else do;
	  call interpret_ptr_ (on_unit_ptr -> on_unit.body, null (), strp);
	  call ioa_$ioa_switch (oswitch,
	       "on ^a^[ (^a)^;^s^]^[ snap^] call ^a^a|^a ^a", cname,
	       file_given, file_name, on_unit_ptr -> on_unit.pl1_snap,
	       struc.segment,
	       struc.entryn, struc.offset, struc.comment);
	end;
      end;
  end;
  return;
%page;
  /* The following procedure tries to guess if this is a file condition.  We could just check the list of condition
   names which normally have file pointers, but it is possible that handlers could be set up which are nonstandard.
   The PL/I operator which sets up file conditions sets on_unit.file to addrel (addr (on_unit.file), 2) and puts a
   copy of the file variable after the on unit.  This must be done since the storage for the on_unit cannot be
   preallocated in the stack frame because the same on statement can set up multiple concurrent on_units if it
   specifies a file variable.  There is at present NO INDICATION in the on_unit that the file field is valid; until
   there is, this will have to do.  I plan to lobby for setting aside another flag bit to indicate that the file
   field is valid.											*/

check_file_given:
  procedure ();

  declare file_ptr		    ptr;

  file_given = "0"b;

  /* If condition_ is used, name will have been copied onto stack.  Otherwise, name will point to text section.		*/

  if baseno (on_unit_ptr -> on_unit.name) = baseno (sp)
    then
         return;

  /* Value must be exactly as created by an spri instruction in same ring.					*/

  file_ptr = addrel (on_unit_ptr, size (on_unit));

  if unspec (file_ptr) ^= unspec (on_unit_ptr -> on_unit.file)
    then
         return;

  /* For unlikely coincidence that these constraints, we will try to treat the pointer as pointing to a file value.	*/

  file_name = file_ptr -> filevar.fabp -> fab.filename;
  file_given = "1"b;
  return;

  end check_file_given;

  end probe_print_handlers_;
