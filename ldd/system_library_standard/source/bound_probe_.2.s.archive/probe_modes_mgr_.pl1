/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(88-09-07,WAAnderson), approve(88-09-30,MCR7952),
     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
     Added format control comment to make the source more readable.
                                                   END HISTORY COMMENTS */


/* format: style1,insnl,ifthendo,indthenelse,^indnoniterdo,^inditerdo,indcom,^indthenbegin,^indprocbody,ind2,ll78,initcol0,dclind4,idind24,struclvlind1,comcol41 */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

probe_modes_mgr_:
  proc ();

  call probe_error_$malfunction ();	/* dummy entry */

  /* This is a start at the modes_manager_ written so that
   code which needs it can at least be debugged

   James R. Davis  12 July 79
   Modified 15 Sept 79 to hide set_modes and print_modes from world

   *** ENTRIES HERE ***

   mode_request		- implements probe's "mode" request
   excludep		- tells whether or not a given  name should be excluded
*/
  /* Made prompt mode static 04/26/82 S. Herbst */
  /* Added "mode meter" to meter time, vcpu and pf's at halts 09/23/82 S. Herbst */
  /* Added "mode truncate_strings" 05/21/84 S. Herbst */

  /* COMMON PARAMETERS */

  dcl P_probe_info_ptr	ptr parameter;
  dcl P_acc_ptr		ptr parameter;
				/* input: to an acc string */
  dcl P_probe_modes_ptr	pointer parameter;
				/* input: ptr to probe_modes structure to be init'd */

  /* the OFFICIAL names of the values of the len-type probe modes for i = 1 to 3 */

  dcl official_mode_names	(3) char (8) aligned internal static
			options (constant)
			init ("brief", "short", "long");
  dcl unofficial_mode_names	(3) char (2) aligned internal static
			options (constant) init ("bf", "sh", "lg");

  dcl code		fixed bin (35);
				/* global error code */

  dcl probe_error_		entry options (variable);
  dcl probe_error_$record	entry options (variable);
  dcl probe_error_$malfunction
			entry options (variable);
  dcl cpu_time_and_paging_	entry (fixed bin, fixed bin (71), fixed bin);
  dcl ioa_$ioa_switch	entry options (variable);

  dcl (
      probe_et_$syntax_error,
      probe_et_$too_many_args
      )			fixed bin (35) external static;

  dcl (clock, fixed, hbound, lbound, length, string, vclock)
			builtin;
				/*  */

probe_modes_mgr_$mode_request:
  entry (P_probe_info_ptr);

  /* *	This entry implements the "mode" request for probe. It is here because this is
   *	where all the other stuff concerned with modes is kept. */

  probe_info_ptr = P_probe_info_ptr;

  if probe_info.ct -> token.type >= probe_info.end_token
    then call print_modes ();
    else call set_mode ();
  return;


probe_modes_mgr_$excludep:
  entry (P_probe_info_ptr, P_acc_ptr) returns (bit (1) aligned);

  /* DUMMY ENTRY FOR NOW */

  return ("0"b);			/* exclude nothing */


probe_modes_mgr_$init:
  entry (P_probe_modes_ptr);

  /* *	This is a special entry, called during probe initialization to set the per-process
   *	modes structure to its default values, either consed up out of whole cloth or
   *	copied from Person_id.probe. */

  string (P_probe_modes_ptr -> probe_modes.bits) = ""b;

  P_probe_modes_ptr -> probe_modes.len_modes = 0;
  P_probe_modes_ptr -> probe_modes.len_modes.error_messages = LONG_mode_type;
  P_probe_modes_ptr -> probe_modes.len_modes.qualification = SHORT_mode_type;
  P_probe_modes_ptr -> probe_modes.len_modes.value_print = LONG_mode_type;
				/* for now */

  P_probe_modes_ptr -> probe_modes.value_separator = " = ";
				/* fun to parse, eh? */
  P_probe_modes_ptr -> probe_modes.use_exclude_names = "0"b;
  P_probe_modes_ptr -> probe_modes.octal_bitstrings = "0"b;
  P_probe_modes_ptr -> probe_modes.use_prompt = "0"b;

  P_probe_modes_ptr -> probe_modes.debug_modes_set = "0"b;
				/* announce special debugging modes */
  P_probe_modes_ptr -> probe_modes.ignore_faults = "0"b;
  P_probe_modes_ptr -> probe_modes.catch_errors = "0"b;
  P_probe_modes_ptr -> probe_modes.catch_error_once = "0"b;
  P_probe_modes_ptr -> probe_modes.debug_breaks = "0"b;
  P_probe_modes_ptr -> probe_modes.debug = "0"b;
  P_probe_modes_ptr -> probe_modes.meter = "0"b;
  P_probe_modes_ptr -> probe_modes.truncate_strings = "1"b;
  return;				/* end of code for this entry */


  /* INTERNAL PROCEDURES: */

print_modes:
  proc;

  /* print the names of all modes and their values */

  call mp ("error_messages", probe_modes.error_messages);
  call mp ("qualification", probe_modes.qualification);
  call mp ("value_print", probe_modes.value_print);

  call bp ("truncate_strings", probe_modes.truncate_strings);
  call bp ("meter", probe_modes.meter);
  call bp ("prompt", probe_modes.use_prompt);
  if probe_modes.use_prompt
    then call ioa_$ioa_switch (probe_info.output_switch,
	    "prompt string = ""^va""",
	    length (probe_static_info.prompt), probe_static_info.prompt);

  /* we don't tell them about MAGIC modes such as debug = unless they are in debug mode */

  if probe_modes.debug_modes_set then do;
      call bp ("ignore_faults", probe_modes.ignore_faults);
      call bp ("catch_errors", probe_modes.catch_errors);
      call bp ("catch_error_once", probe_modes.catch_error_once);
      call bp ("debug_breaks", probe_modes.debug_breaks);
      call bp ("debug", probe_modes.debug);
    end;				/*  *MAGIC* modes */

  call ioa_$ioa_switch (probe_info.output_switch, "value_separator = ""^va""",
       length (probe_modes.value_separator), probe_modes.value_separator);

  /* add exclude name code later */
  return;



mp:
  proc (name, value);		/* if this were LISP, we wouldnt need this program */

  /* *	This prints the value of a mode which can be "short", "brief", or "long". */

  dcl name		char (*) parameter;
  dcl value		fixed bin parameter;

  if value >= lbound (official_mode_names, 1) &
       value <= hbound (official_mode_names, 1)
    then
         call ioa_$ioa_switch (probe_info.output_switch, "^a = ^a", name,
	    official_mode_names (value));
    else call probe_error_$malfunction (probe_info_ptr, 0,
	    "Bad value ^d for mode ^a", value, name);


  end mp;


bp:
  proc (name, bitv);

  /* *	This prints the value of a mode which is either ON or OFF. */

  dcl name		char (*) parameter;
  dcl bitv		bit (1) unal parameter;
  dcl bitv_name		(0:1) char (4) aligned internal static
			options (constant) init ("off", "on");

  call ioa_$ioa_switch (probe_info.output_switch, "^a: ^a", name,
       bitv_name (fixed (bitv)));
  end bp;

  end print_modes;

set_mode:
  proc;

  dcl identifiers_name	char (probe_info.ct -> identifier.length)
			based (probe_info.ct -> identifier.name);
  dcl constant_string	char (probe_info.ct -> constant.precision)
			based (probe_info.ct -> constant.data_ptr);
  dcl mode_name		char (32);
  dcl mode_value		char (32) varying;

  if probe_info.ct -> token.type ^= NAME_TYPE
    then
         call probe_error_ (probe_info_ptr, probe_et_$syntax_error,
	    "Invalid mode name.");

  mode_name = identifiers_name;

  probe_info.ct = probe_info.ct -> token.next;
				/* look at value for this mode */

  if probe_info.ct -> token.type >= end_token
    then
         call probe_error_ (probe_info_ptr, probe_et_$syntax_error,
	    "A value for the ^a mode must be specified", mode_name);

  if probe_info.ct -> token.type = NAME_TYPE
    then
         mode_value = identifiers_name;

  else if probe_info.ct -> token.type = CONSTANT_TYPE
       & probe_info.ct -> constant.data_type = char_dtype * 2
    then
         mode_value = constant_string;

  else call probe_error_
	  (probe_info_ptr, probe_et_$syntax_error, "Invalid mode value.");

  if probe_info.ct -> token.next -> token.type < probe_info.end_token
    then
         call probe_error_ (probe_info_ptr, probe_et_$too_many_args);

  if mode_name = "error_messages" | mode_name = "em"
    then
         probe_modes.error_messages = set_len ();
  else if mode_name = "qualification" | mode_name = "qf"
    then
         probe_modes.qualification = set_len ();
  else if mode_name = "value_print" | mode_name = "vp"
    then
         probe_modes.value_print = set_len ();
  else if mode_name = "value_separator" | mode_name = "vs"
    then
         probe_modes.value_separator = mode_value;

  else if mode_name = "meter" then do;	/* set metering of time, vcpu, pf's at halts */
      probe_modes.meter = set_bit ();
      if probe_modes.meter then do;
	probe_static_info.last_clock = clock ();
	probe_static_info.last_vclock = vclock ();
	call cpu_time_and_paging_ (probe_static_info.last_page_faults, 0, 0)
	     ;
        end;
    end;

  else if mode_name = "truncate_strings"
    then /* set whether value req prints only 1st 200 */
         probe_modes.truncate_strings = set_bit ();

  else if mode_name = "prompt"
    then /* turn prompting on and off */
         probe_static_info.prompt_on_sw = set_bit ();
  else if mode_name = "prompt_string"
    then
         probe_static_info.prompt = mode_value;

  else if mode_name = "ignore_faults"
    then /* *MAGIC* */
         probe_modes.ignore_faults = set_bit ();
  else if mode_name = "catch_errors" | mode_name = "catch_error"
    then /* *MAGIC* */
         probe_modes.catch_errors = set_bit ();
  else if mode_name = "catch_error_once" | mode_name = "ceo"
    then /* *MAGIC* */
         probe_modes.catch_error_once = set_bit ();
  else if mode_name = "debug_breaks"
    then
         probe_modes.debug_breaks = set_bit ();
  else if mode_name = "debug"
    then
         probe_modes.debug = set_bit ();

  else call probe_error_ (probe_info_ptr, 0,
	  "There is no mode named ""^a""", mode_name);

  if probe_modes.ignore_faults
       | probe_modes.catch_errors /* see if any debugging modes are set */
       | probe_modes.catch_error_once | probe_modes.debug_breaks
       | probe_modes.debug
    then
         probe_modes.debug_modes_set = "1"b;
				/* and record that fact */
    else probe_modes.debug_modes_set = "0"b;
  return;


set_len:
  proc () returns (fixed bin);

  dcl i			fixed bin;


  do i = 1 to hbound (official_mode_names, 1);
    if mode_value = official_mode_names (i)
         | mode_value = unofficial_mode_names (i)
      then
	 return (i);
  end;

  call probe_error_ (probe_info_ptr, 0,
       """^a"" is not a valid value for the ""^a"" mode",
       mode_value, mode_name);
  end set_len;


set_bit:
  proc () returns (bit (1));

  if mode_value = "true" | mode_value = "on" | mode_value = "yes" |
       mode_value = "TRUE" | mode_value = "ON" | mode_value = "YES"
    then
         return ("1"b);

  else if mode_value = "false" | mode_value = "off" | mode_value = "no" |
       mode_value = "FALSE" | mode_value = "OFF" | mode_value = "NO"
    then
         return ("0"b);

  else call probe_error_ (probe_info_ptr, 0,
	  "The ""^a"" mode can only be set ""on"" or ""off""", mode_name);
  end set_bit;
  end set_mode;


  /* INCLUDE FILES: */



%include probe_info;

  /* ;;;;;;; */

%include probe_static_info;

  /* ;;;;;;; */

%include probe_modes;

  /* ;;;;;;; */

%include probe_tokens;

  /* ;;;;;;; */

%include acc;

  /* ;;;;;;; */

%include std_descriptor_types;

  end probe_modes_mgr_;
