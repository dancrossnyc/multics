/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(88-09-07,WAAnderson), approve(88-09-30,MCR7952),
     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
     Added format control comment to make the source more readable.
                                                   END HISTORY COMMENTS */


/* format: style1,insnl,ifthendo,indthenelse,^indnoniterdo,^inditerdo,indcom,^indthenbegin,^indprocbody,ind2,ll78,initcol0,dclind4,idind24,struclvlind1,comcol41 */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

probe_subsys_util_:
  proc ();

  return;				/* dummy entry */

  /* *	This procedure contains some utility routines for the "probe" debugger. */
  /* *	Shamelessly stolen from subsystem_util_, 04/22/79 W. Olin Sibert */
  /* *	Efficiency improved (it uses about 10% of all time in conditional bk), 28 Feb 80 JRD */
  /* Changed not to create breakseg (done now by probe_break_mgr_) 09/28/81 S. Herbst */
  /* Changed to store probe_static_info.probe_segno for use by probe_break_handler_ 10/07/81 S. Herbst */
  /* Changed to use 1 scratch segment per ring 12/29/81 S. Herbst */

  dcl (
      P_version		fixed bin,/* version number for validity check */
      P_invocation_ptr	pointer,	/* -> new/old invocation data created/to destroy */
      P_code		fixed binary (35)
      )			parameter;/* status code */

  dcl code		fixed bin (35);
  dcl old_invocation_ptr	pointer;
  dcl probe_scratch_ptr	pointer;
  dcl probe_static_info_ptr	pointer;

  dcl based_area		area based;

  dcl com_err_		entry options (variable);
  dcl cu_$cl		entry (bit (1) aligned);
  dcl define_area_		entry (pointer, fixed bin (35));
  dcl get_temp_segment_	entry (char (*), ptr, fixed bin (35));
  dcl hcs_$truncate_seg	entry (pointer, fixed bin (19), fixed (35));
  dcl probe_modes_mgr_$init	entry (pointer);

  dcl sys_info$max_seg_size	fixed bin (18) external static;
  dcl iox_$user_output	pointer external static;
  dcl iox_$user_input	pointer external static;

  dcl probe_request_table_$	fixed bin external static;
  dcl probe_data_$major_version
			fixed bin external static;
  dcl probe_data_$minor_version
			fixed bin external static;
  dcl probe_data_$version_string
			char (32) aligned external static;
  dcl probe_data_$info_directory
			char (168) aligned external static;
  dcl probe_data_$prompt_string
			char (32) varying external static;

  dcl probe_data_$invocation_list_ptr
			pointer external static;
  dcl probe_data_$probe_static_info_ptr
			pointer external static;
  dcl probe_data_$probe_scratch_ptr
			pointer external static;

  dcl error_table_$unimplemented_version
			fixed bin (35) external static;

  dcl RW_MODE		fixed bin (5) internal static
			options (constant) init (01010b);

  dcl (addr, baseno, codeptr, copy, hbound, null, size,
      string, unspec)	builtin;

  /*  */

probe_subsys_util_$create_invocation:
  entry (P_version, P_invocation_ptr, P_code);

  /* *	This entry creates a new invocation of probe. It strings it on the list of
   *	active invocations; the head of this list is in external static, called
   *	probe_data_$invocation_list_ptr. P_invocation_ptr is a pointer (output) to
   *	a probe_info structure and associated items which is allocated (in system_free_4_)
   *	by this procedure. The caller must correctly supply P_version. As long as at least
   *	one invocation of a probe is active, the values of listener_info.depth will
   *	never be repeated. */

  if P_version ^= probe_info_version_1 then do;
				/* our only validity check */
      P_code = error_table_$unimplemented_version;
      return;
    end;

  code = 0;			/* we're successful */
  old_invocation_ptr = probe_data_$invocation_list_ptr;
  probe_static_info_ptr = probe_data_$probe_static_info_ptr;
  P_invocation_ptr = null ();

  if probe_static_info_ptr = null () then do;
				/* similarly, create probe_static_info if not there */

      call create_probe_scratch ();	/* get temp segment */

      call create_probe_static_info (); /* this sets probe_static_info_ptr */
    end;
    else probe_scratch_ptr = probe_data_$probe_scratch_ptr;

  if code ^= 0
    then goto INITIALIZATION_ERROR;

  call create_probe_info ();		/* set up the database we were called about */

  probe_info.listener_info.previous = old_invocation_ptr;
				/* chain into recursion list */
  probe_info.listener_info.next = null ();

  if old_invocation_ptr ^= null () then do;
				/* new level, not first */
      probe_info.listener_info.depth =
	 old_invocation_ptr -> probe_info.listener_info.depth + 1;
      old_invocation_ptr -> probe_info.listener_info.next = probe_info_ptr;
    end;
    else probe_info.listener_info.depth = 1;
				/* first level */

  probe_data_$invocation_list_ptr = probe_info_ptr;
				/* update invocation chain */
  P_invocation_ptr = probe_info_ptr;

INITIALIZATION_ERROR:
  P_code = code;

  return;				/* end of code for $create_invocation entry */

  /*  */

probe_subsys_util_$destroy_invocation:
  entry (P_invocation_ptr);

  /* *	This entry destroys an invocation of probe. */

  probe_info_ptr = P_invocation_ptr;
  old_invocation_ptr = probe_data_$invocation_list_ptr;
  probe_scratch_ptr = probe_data_$probe_scratch_ptr;
  probe_static_info_ptr = probe_data_$probe_static_info_ptr;

  if probe_info_ptr = null ()
    then return;			/* decide whether we can do anything */
  if probe_static_info_ptr = null ()
    then return;
  if probe_scratch_ptr = null ()
    then return;
  if old_invocation_ptr = null ()
    then return;

  if probe_data_$invocation_list_ptr = P_invocation_ptr
    then
         probe_data_$invocation_list_ptr = probe_info.listener_info.previous;
				/* pop back a level iff one to destroy is last */

  if probe_info.listener_info.previous ^= null ()
    then
         probe_info.listener_info.previous -> probe_info.listener_info.next =
	    probe_info.listener_info.next;

  if probe_info.listener_info.next ^= null ()
    then
         probe_info.listener_info.next -> probe_info.listener_info.previous =
	    probe_info.listener_info.previous;

  free probe_info.ptr_to_current_source
       -> current_source in (probe_scratch_ptr -> based_area);
  free probe_info.ptr_to_initial_source
       -> initial_source in (probe_scratch_ptr -> based_area);

  free probe_info in (probe_scratch_ptr -> based_area);
				/* get rid of the last trace */

  return;				/* end of code for $destroy_invocation entry */

  /*  */

NULL_LABEL:
  call com_err_ (0, "probe",
       "Attempt to goto null label variable. Returning to command level.");

  call cu_$cl ("0"b);

  goto NULL_LABEL;

  /*  */

create_probe_info:
  proc ();

  /* *	This procedure sets all the values in probe_info to their default settings */

  allocate probe_info in (probe_scratch_ptr -> based_area)
       set (probe_info_ptr);

  allocate current_source in (probe_scratch_ptr -> based_area)
       set (probe_info.ptr_to_current_source);

  allocate initial_source in (probe_scratch_ptr -> based_area)
       set (probe_info.ptr_to_initial_source);

  probe_info.probe_info_version = probe_info_version_1;

  probe_info.static_info_ptr = probe_data_$probe_static_info_ptr;
  probe_info.modes_ptr = probe_static_info.modes_ptr;

  probe_info.machine_cond_ptr = null ();

  probe_info.first_token = null ();
  probe_info.ct = null ();
  probe_info.end_token = "000000"b3;
  probe_info.buffer_ptr = null ();
  probe_info.buffer_lth = 0;

  probe_info.current_stack_frame = null ();
  probe_info.input_type = 0;
  probe_info.language_type = 0;
  probe_info.return_method = 0;
  probe_info.entry_method = 0;

  probe_info.break_slot_ptr = null ();	/* initialize the break_info substructure */
  probe_info.last_break_slot_ptr = null ();
  probe_info.break_reset = "0"b;
  probe_info.real_break_return_loc = null ();

  probe_info.break_segment_ptr = probe_static_info.break_segment_ptr;
  probe_info.break_area_ptr = null ();
  probe_info.scratch_area_ptr = probe_data_$probe_scratch_ptr;
  probe_info.probe_area_ptr = null ();
  probe_info.work_area_ptr = null ();
  probe_info.expression_area_ptr = null ();

  string (probe_info.flags) = ""b;
  probe_info.flags.execute = "1"b;

  probe_info.input_switch = probe_static_info.input_switch;
  probe_info.output_switch = probe_static_info.output_switch;

  probe_info.error_code = 0;
  probe_info.error_message = "<<NO MESSAGE>>";

  probe_info.request_name = "<<NO REQUEST>>";
  probe_info.abort_probe_label = NULL_LABEL;
  probe_info.abort_line_label = NULL_LABEL;
  probe_info.depth = 0;
  probe_info.previous = null ();
  probe_info.next = null ();

  current_source.stmnt_map_entry_index = -1;
  current_source.instruction_ptr = null ();
  current_source.stack_ptr = null ();	/* now initialize things probe_info refers to */
  current_source.entry_ptr = null ();
  current_source.block_ptr = null ();
  current_source.seg_info_ptr = null ();

  initial_source.stmnt_map_entry_index = -1;
  initial_source.instruction_ptr = null ();
  initial_source.stack_ptr = null ();	/* now initialize things probe_info refers to */
  initial_source.entry_ptr = null ();
  initial_source.block_ptr = null ();
  initial_source.seg_info_ptr = null ();

  return;
  end;				/* create_probe_info internal procedure */

  /*  */

create_probe_scratch:
  proc ();

  /* *	This procedure creates the probe_scratch_ segment in the process dir,
   *	and initializes its area. It contains nothing but a segment size area;
   *	all information for managing it is kept in probe_static_info. */

  dcl 1 scratch_area_info	aligned like area_info;
				/* automatic copy */

  call get_temp_segment_ ("probe_scratch_", probe_scratch_ptr, code);
  if probe_scratch_ptr = null ()
    then goto INITIALIZATION_ERROR;	/* punt if it fails; Note that this will */
				/* re-use an old scratch seg if one was present */

  call hcs_$truncate_seg (probe_scratch_ptr, 0, (0));
				/* eliminate its former contents, if any */

  unspec (scratch_area_info) = ""b;

  scratch_area_info.version = area_info_version_1;
				/* prepare to initialize the area */

  string (scratch_area_info.control) = ""b;
				/* set all the flags */
  scratch_area_info.extend = "0"b;
  scratch_area_info.zero_on_alloc = "0"b;
  scratch_area_info.zero_on_free = "0"b;
  scratch_area_info.dont_free = "0"b;
  scratch_area_info.no_freeing = "0"b;
  scratch_area_info.system = "0"b;

  scratch_area_info.owner = "probe scratch area";
  scratch_area_info.size = sys_info$max_seg_size;
				/* a whole segment, more or less */

  scratch_area_info.areap = probe_scratch_ptr;

  call define_area_ (addr (scratch_area_info), code);
  if code ^= 0
    then goto INITIALIZATION_ERROR;	/* sorry, we lose */

  probe_data_$probe_scratch_ptr = probe_scratch_ptr;
				/* remember it in our external static */

  return;
  end;				/* create_probe_scratch niternal procedure */

  /*  */

create_probe_static_info:
  proc ();

  /* *	This procedure allocates and initializes the probe_static_info structure.
   *	It is allocated in the probe scratch area, which is pointed to by probe_scratch_ptr.
   *	At the end, probe_data_$probe_static_info_ptr is set to point to it.  There is one
   *	of these structures per process; it contains global probe data. */

  dcl probe_modes_ptr	pointer unaligned;
  dcl seg_info_ptr		pointer unaligned;
  dcl probe_seg_mgr_$get_breakseg_ptr
			entry (fixed bin (35)) returns (ptr);

  allocate probe_static_info in (probe_scratch_ptr -> based_area)
       set (probe_static_info_ptr);

  unspec (probe_static_info_ptr -> probe_static_info) =
       copy ("777043777043"b3, size (probe_static_info));

  probe_static_info_ptr -> probe_static_info.probe_info_version =
       probe_info_version_1;

  probe_static_info_ptr -> probe_static_info.major_version =
       probe_data_$major_version;
  probe_static_info_ptr -> probe_static_info.minor_version =
       probe_data_$minor_version;
  probe_static_info_ptr -> probe_static_info.version_string =
       probe_data_$version_string;

  probe_static_info_ptr -> probe_static_info.name = "probe";
  probe_static_info_ptr -> probe_static_info.prompt =
       probe_data_$prompt_string;
  unspec (probe_static_info_ptr -> probe_static_info.switches) = "0"b;

  probe_static_info_ptr -> probe_static_info.break_segment_ptr =
       probe_seg_mgr_$get_breakseg_ptr (code);
  if code ^= 0
    then return;
				/* initialize breakseg only before setting a break */
  probe_static_info_ptr -> probe_static_info.scratch_segment_ptr =
       probe_scratch_ptr;

  probe_static_info_ptr -> probe_static_info.probe_segno =
       baseno (codeptr (probe_subsys_util_));
				/* probe's own segment number */
  probe_static_info_ptr -> probe_static_info.last_break_segno = "0"b;

  probe_static_info_ptr -> probe_static_info.stack_info.traced_with_all =
       "0"b;
  probe_static_info_ptr -> probe_static_info.stack_info.max_level = -1;
  probe_static_info_ptr -> probe_static_info.stack_info.level_chain = null ();

  probe_static_info_ptr -> probe_static_info.request_table_ptr_array (*) =
       null ();
  probe_static_info_ptr -> probe_static_info.info_directory_name_array (*) =
       "";
  probe_static_info_ptr -> probe_static_info.exclude_name_array (*) = "";

  probe_static_info_ptr -> probe_static_info.input_switch = iox_$user_input;
  probe_static_info_ptr -> probe_static_info.output_switch = iox_$user_output;

  probe_static_info_ptr -> probe_static_info.request_table_ptr_array (1) =
       addr (probe_request_table_$);
  probe_static_info_ptr -> probe_static_info.info_directory_name_array (1) =
       probe_data_$info_directory;

  probe_static_info_ptr -> probe_static_info.request_table_info.array_ptr =
       addr (probe_static_info_ptr
       -> probe_static_info.request_table_ptr_array);
  probe_static_info_ptr -> probe_static_info.request_table_info.array_size =
       1;
  probe_static_info_ptr
       -> probe_static_info.request_table_info.array_max_size =
       hbound (probe_static_info.request_table_ptr_array, 1);
  probe_static_info_ptr
       -> probe_static_info.request_table_info.using_internal_array = "1"b;

  probe_static_info_ptr -> probe_static_info.info_directory_info.array_ptr =
       addr (probe_static_info_ptr
       -> probe_static_info.info_directory_name_array);
  probe_static_info_ptr -> probe_static_info.info_directory_info.array_size =
       1;
  probe_static_info_ptr
       -> probe_static_info.info_directory_info.array_max_size =
       hbound (probe_static_info.info_directory_name_array, 1);
  probe_static_info_ptr
       -> probe_static_info.info_directory_info.using_internal_array = "1"b;

  probe_static_info_ptr -> probe_static_info.exclude_name_info.array_ptr =
       addr (probe_static_info_ptr -> probe_static_info.exclude_name_array);
  probe_static_info_ptr -> probe_static_info.exclude_name_info.array_size = 0;
  probe_static_info_ptr
       -> probe_static_info.exclude_name_info.array_max_size =
       hbound (probe_static_info.exclude_name_array, 1);
  probe_static_info_ptr
       -> probe_static_info.exclude_name_info.using_internal_array = "1"b;

  seg_info_offset_count = 1023;	/* start out with 1024 entries, until the LOT exceeds it */
  allocate probe_seg_info_array in (probe_scratch_ptr -> based_area)
       set (probe_static_info_ptr -> probe_static_info.seg_info_offset_ptr);
  probe_static_info_ptr -> probe_static_info.seg_info_offset_ptr
       -> probe_seg_info_array.count =
       seg_info_offset_count;

  allocate probe_modes in (probe_scratch_ptr -> based_area)
       set (probe_modes_ptr);

  call probe_modes_mgr_$init ((probe_modes_ptr));
				/* get default values for modes */

  probe_static_info_ptr -> probe_static_info.modes_ptr = probe_modes_ptr;
				/* copy it into static structure */

  seg_info_nfiles = 1;		/* allocate the "null" seg_info block */
  allocate seg_info in (probe_scratch_ptr -> based_area) set (seg_info_ptr);

  seg_info_ptr -> seg_info.language_type = OTHER_lang_type;
				/* and fill it in */
  string (seg_info_ptr -> seg_info.bits) = ""b;
  seg_info_ptr -> seg_info.directory_name = "<<NO DIRECTORY>>";
  seg_info_ptr -> seg_info.entry_name = "<<NO ENTRY NAME>>";
  seg_info_ptr -> seg_info.segname = "<<NO ENTRYPOINT>>";
  seg_info_ptr -> seg_info.identifier = -1;
				/* better than zero, even */
  seg_info_ptr -> seg_info.pointers = null ();
				/* set them all to null */
  seg_info_ptr -> seg_info.bounds = 0;	/* set all the bounds information to zeros */
  seg_info_ptr -> seg_info.map_size = -1;
  seg_info_ptr -> seg_info.error_code = -1;
  seg_info_ptr -> seg_info.pad (*) = -1;
  seg_info_ptr -> seg_info.nfiles = 1;
  seg_info_ptr -> seg_info.file_pointers (1) = null ();

  probe_static_info_ptr -> probe_static_info.null_seg_info_ptr = seg_info_ptr;
				/* remember where it is */

  probe_data_$probe_static_info_ptr = probe_static_info_ptr;
				/* remember it in external static */

  return;
  end create_probe_static_info;

  /*  */

%include probe_info;

  /* ;;;;;;; */

%include probe_static_info;

  /* ;;;;;;; */

%include probe_modes;

  /* ;;;;;;; */

%include probe_source_info;

  /* ;;;;;;; */

%include probe_seg_info;

  /* ;;;;;;; */

%include probe_info_constants;

  /* ;;;;;;; */

%include probe_lang_types;

  /* ;;;;;;; */

%include area_info;

  end;				/* probe_subsys_util_ external procedure */
