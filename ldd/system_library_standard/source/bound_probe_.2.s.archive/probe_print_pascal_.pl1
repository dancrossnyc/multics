/****^  *************************************************************************
        *                                                                       *
        * Copyright, (C) Honeywell Bull Inc., 1988                              *
        *                                                                       *
        * Copyright (c) 1980 by Centre Interuniversitaire de Calcul de Grenoble *
        * and Institut National de Recherche en Informatique et Automatique     *
        *                                                                       *
        ************************************************************************* */

/****^  HISTORY COMMENTS:
  1) change(86-09-05,JMAthane), approve(86-09-05,MCR7525),
     audit(86-09-11,Martinson), install(86-11-12,MR12.0-1212):
     This procedure now calls pascal_symbol_$display_data_. or
     pascal_symbol_$display_declaration entries instead of doing things itself.
     pascal_symbol_ entries are used by other tools to display the value of any
     PASCAL object, given a reference to its corresponding symbol table entry.
  2) change(88-09-07,WAAnderson), approve(88-09-30,MCR7952),
     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
     Added format control comment to make the source more readable.
                                                   END HISTORY COMMENTS */

/* format: style1,insnl,ifthendo,indthenelse,^indnoniterdo,^inditerdo,indcom,^indthenbegin,^indprocbody,ind2,ll78,initcol0,dclind4,idind24,struclvlind1,comcol41 */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/* Written: JMAthane Grenoble University 1983 */
/* Fixed "sb field_name" not to fault if parent node has no name 07/25/83 S. Herbst */
/* Fixed "v field_name not to fault if address cannot be computed 07/26/83 S. Herbst */
/* Changed for new probe_increment_indices_ calling sequence 08/02/83 Olin Sibert */
/* Fixed bug causing random results from "v enumerated_subrange_var" 08/03/83 S. Herbst */
/* Changed to print cross-sections created by probe_get_value_ 08/18/83 S. Herbst */
/* Added version string to runtime_type_info structure 10/06/83 S. Herbst */
/* Fixed bug in cross_sections JMAthane 20/03/83 */
/* Modified to pack printing when array elements are equal JMAthane 20/03/83 */
/* Modified to call pascal_symbol_ subroutines, instead of doing things here.	JMAthane June 85 */

/* Entries:
   probe_print_pascal_$attr entry (ptr, ptr, bit (1), fixed bin (35))
   probe_print_pascal_$value entry (ptr, ptr, fixed bin (35), bit(1))
*/

probe_print_pascal_:
  proc;

  dcl probe_error_$malfunction
			entry options (variable);

  call probe_error_$malfunction ();
%page;
attr:
  entry (P_probe_info_ptr, P_refp, P_long_sw, P_code);

  dcl P_probe_info_ptr	ptr;
  dcl P_refp		ptr;
  dcl P_long_sw		bit (1);
  dcl P_code		fixed bin (35);


  dcl 1 P_reference		like reference_node based (refp);
  dcl refp		ptr;
  dcl Sym			ptr;
  dcl long_switch		bit (1);
  dcl ioa_$ioa_switch	entry options (variable);
  dcl ioa_$ioa_switch_nnl	entry options (variable);
  dcl margin		fixed bin (35) init (1);

  dcl (copy, null)		builtin;

%page;

  probe_info_ptr = P_probe_info_ptr;
  refp = P_refp;
  Sym = P_reference.symbol_ptr;
  long_switch = P_long_sw;

  call ioa_$ioa_switch_nnl (probe_info.output_switch, copy (" ", margin));
  if P_reference.type = ext_procedure_runtime_dtype
    then
         if P_reference.symbol_ptr = null then do;
	   call ioa_$ioa_switch (probe_info.output_switch,
	        "external procedure");
	   return;
	 end;

  if (P_reference.type = pascal_typed_pointer_type_dtype)
       | (P_reference.type = pascal_record_file_type_dtype)
       | (P_reference.type = pascal_record_type_dtype)
       | (P_reference.type = pascal_set_dtype)
       | (P_reference.type = pascal_enumerated_type_dtype)
       | (P_reference.type = pascal_string_type_dtype)
       | (P_reference.type = pascal_user_defined_type_dtype) then do;
      call pascal_symbol_$display_declaration (Sym, probe_info.output_switch,
	 0, 3, "00101"b, error_code);
      if error_code ^= 0
        then go to SOME_ERROR;
    end;

  else if (P_reference.type = pascal_value_formal_parameter_dtype)
       | (P_reference.type = pascal_variable_formal_parameter_dtype)
       | (P_reference.type = pascal_entry_formal_parameter_dtype)
       | (P_reference.type = pascal_label_dtype)
       | (P_reference.type = pascal_parameter_procedure_dtype)
       | (P_reference.type = pascal_internal_procedure_dtype)
       | (P_reference.type = pascal_exportable_procedure_dtype)
       | (P_reference.type = pascal_imported_procedure_dtype)
       | (P_reference.type = pascal_integer_dtype)
       | (P_reference.type = pascal_real_dtype)
       | (P_reference.type = pascal_char_dtype)
       | (P_reference.type = pascal_boolean_dtype)
       | (P_reference.type = pascal_enumerated_type_instance_dtype)
       | (P_reference.type = pascal_enumerated_type_element_dtype)
       | (P_reference.type = pascal_user_defined_type_instance_dtype)
       | (P_reference.type = pascal_text_file_dtype)
    then do;
      if Sym ^= null
        then
	   call pascal_symbol_$display_declaration
	        (Sym, probe_info.output_switch, margin, 3,
	        "011"b || P_long_sw || "1"b, error_code);
        else
	   call pascal_symbol_$display_var_type
	        (P_reference.type, P_reference.type_ptr,
	        probe_info.output_switch, margin, 3, P_long_sw || "1"b,
	        error_code);
      if error_code ^= 0
        then go to SOME_ERROR;
    end;

  return;

%page;
value:
  entry (P_probe_info_ptr, P_refp, P_code, P_done);

  dcl P_done		bit (1) aligned;

  dcl symb_name		char (256) var;
  dcl name_ptr		ptr;
  dcl error_code		fixed bin (35);
  dcl Block_ptr		ptr;
  dcl Base_addr		ptr;
  dcl Linkage_ptr		ptr;
  dcl Stack_ptr		ptr;
  dcl probe_et_$no_address	fixed bin (35) ext;
  dcl probe_et_$recorded_message
			fixed bin (35) ext;
  dcl probe_error_$record	entry options (variable);
  dcl 1 ref_subscripts	aligned based (P_reference.subscript_ptr)
			like reference_subscripts;
  dcl 1 subscript_info	like reference_subscripts;

  refp = P_refp;
  Sym = P_reference.symbol_ptr;
  long_switch = "1"b;
  probe_info_ptr = P_probe_info_ptr;

  if P_reference.address_ptr = null
       & ^data_type_info_$info (P_reference.type).type
    then do;
NO_ADDRESS:
      call probe_error_$record (probe_info_ptr, probe_et_$no_address,
	 P_reference.name);
      error_code = probe_et_$recorded_message;
      go to SOME_ERROR;
    end;

  Block_ptr = P_reference.source_info_ptr -> source_info.block_ptr;
  Stack_ptr = P_reference.source_info_ptr -> source_info.stack_ptr;
  Linkage_ptr =
       P_reference.source_info_ptr -> source_info.seg_info_ptr
       -> seg_info.linkage_ptr;
  Base_addr = P_reference.base_addr;

  P_done = "0"b;
  error_code = 0;
  symb_name = P_reference.name;
  if symb_name = ""
    then
         if Sym ^= null then do;
	   name_ptr = runtime_symbol_info_$name (Sym);
	   if name_ptr ^= null
	     then
		symb_name = name_ptr -> acc.string;
	 end;

  if P_reference.type = pascal_typed_pointer_type_dtype
       | P_reference.type = pascal_record_file_type_dtype
       | P_reference.type = pascal_record_type_dtype
       | P_reference.type = pascal_set_dtype
       | P_reference.type = pascal_enumerated_type_dtype
       | P_reference.type = pascal_string_type_dtype
       | P_reference.type = pascal_user_defined_type_dtype then do;
      call pascal_symbol_$display_declaration (Sym, probe_info.output_switch,
	 margin, 3, "11011"b, error_code);
      if error_code ^= 0
        then go to SOME_ERROR;
      P_done = "1"b;
    end;
  else if (P_reference.type = pascal_value_formal_parameter_dtype)
       | (P_reference.type = pascal_variable_formal_parameter_dtype)
       | (P_reference.type = pascal_entry_formal_parameter_dtype)
       | (P_reference.type = pascal_label_dtype)
       | (P_reference.type = pascal_parameter_procedure_dtype)
       | (P_reference.type = pascal_internal_procedure_dtype)
       | (P_reference.type = pascal_exportable_procedure_dtype)
       | (P_reference.type = pascal_imported_procedure_dtype)
       | (P_reference.type = pascal_integer_dtype)
       | (P_reference.type = pascal_real_dtype)
       | (P_reference.type = pascal_char_dtype)
       | (P_reference.type = pascal_boolean_dtype)
       | (P_reference.type = pascal_enumerated_type_instance_dtype)
       | (P_reference.type = pascal_enumerated_type_element_dtype)
       | (P_reference.type = pascal_user_defined_type_instance_dtype)
       | (P_reference.type = pascal_text_file_dtype)
    then do;
      if P_reference.cross_section
        then subscript_info = ref_subscripts;
        else subscript_info.number = 0;
      call pascal_symbol_$display_data (P_reference.type,
	 P_reference.type_ptr, probe_info.output_switch, margin, 3, "111"b,
	 Stack_ptr, Linkage_ptr, Block_ptr, subscript_info,
	 P_reference.address_ptr, symb_name, P_reference.precision,
	 error_code);
      if error_code ^= 0
        then go to SOME_ERROR;
      P_done = "1"b;
    end;

NORMAL_RETURN:

  P_code = 0;

  return;


SOME_ERROR:

  P_code = error_code;
  P_done = "1"b;

  return;
%include probe_info;
%page;
%include probe_seg_info;
%page;
%include probe_source_info;
%page;
%include probe_references;
%page;
%include pascal_loc_class_codes;
%page;
%include std_descriptor_types;
%page;
%include acc;
%page;
%include runtime_symbol;
%page;
%include runtime_symbol_block;
%page;
%include runtime_block_type;
%page;
%include runtime_symbol_info_;
%page;
%include data_type_info_;
%page;
%include system;
%page;
%include pascal_symbol_;


  end probe_print_pascal_;
