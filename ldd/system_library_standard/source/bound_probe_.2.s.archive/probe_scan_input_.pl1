/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(88-05-25,WAAnderson), approve(88-09-30,MCR7952),
     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
     Modified code in the internal procedure 'build_operator_from_char' to
     evaluate the * character. The * character may be either the TIMES operator
     or the C_INDIRECTION operator. The operator type is resolved based on the
     previous token.
  2) change(88-09-07,WAAnderson), approve(88-09-30,MCR7952),
     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
     Added format control comment to make the source more readable.
                                                   END HISTORY COMMENTS */


/* format: style1,insnl,ifthendo,indthenelse,^indnoniterdo,^inditerdo,indcom,^indthenbegin,^indprocbody,ind2,ll78,initcol0,dclind4,idind24,struclvlind1,comcol41 */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

probe_scan_input_:
  procedure (P_probe_info_ptr, P_input_ptr, P_input_lth, P_area_ptr,
       P_language_type,
       P_input_used_lth, P_first_token, P_code);

  /* * 11 Sep 81, S. Herbst:
   *    Changed to handle virtual entries of the form path|N.
   * 05 Oct 81, S. Herbst:
   *    Changed to handle regular expressions.
   * 01 Dec 81, S. Herbst:
   *    Fixed to report illegal char correctly.
   * 18 Oct 82, S. Herbst:
   *    Fixed to handle regular expression containing quotes.
   * ?? Jun 83, JMAthane:
   *    To add PASCAL.
   * 27 Jul 83, S. Herbst:
   *    Changed to accomodate new COLON_CHAR_TYPE, translate Pascal ".." 
   *    to colon.
   * 08 Aug 83, S. Herbst:
   *    Fixed to put current executiogn ring number in createdSSS|OOO
   *    value.
   * 15 Feb 84, S. Herbst:
   *    Fixed to allow dots in entry names when running FORTRAN.
   * 09 Mar 84, S. Herbst:
   *    Changed to allow ".." as double operator anywhere in line.
   * 30 Mar 84, S. Herbst:
   *    Made to save the input ptr & len in probe_info.buffer_(ptr lth).
   * 20 Sep 84, S. Herbst:
   *    Fixed to put -'s in COBOL identifiers, not translate them to _'s.
   * ?? Apr 88, C. Hinatsu:
   *    To add C operators.
   * */

  /* *	Input string scanner for probe debugger.
   Initially coded sometime in the past as part of probe main procedure, J. M. Broughton.
   Split off into external procedure for added versatility, 04/21/79 W. Olin Sibert.
   made  trilingual (and a lot prettier, if I say so myself) JRDavis 3 Aug 79
   bug fixes JRD 7 Feb 80
   extended ptr constants, sp|NNN, lp|NNN, tp|NNN JRD 8 Mar 80 */

  /* This procedure converts an input string into probe tokens. It reads 
 * up to the first statement delimiter, and returns a pointer to       
 * a chain of tokens allocated in the caller-supplied area. It can     
 * return an error code if it encounters a syntax error, or if it runs 
 * out of input string without hitting a plausible delimiter.          
 *                                                                     
 * Arguments:                                                          
 *                                                                     
 * P_probe_info_ptr                                                    
 *   is a pointer to the probe_info structure for this invocation of
 *   probe.
 *
 * P_input_ptr
 *   is a pointer to the start of the input string.
 *
 * P_input_lth
 *   is the length of the input string.
 *
 * P_area_ptr
 *   is a pointer to an area in which the scanner will allocate tokens.
 *
 * P_language_type
 *   is the language type for scanning.
 *
 * P_input_used_lth (Output)
 *   is the count of characters read from the input string; in the case of most
 *   errors, it will be zero; otherwise, it is the index of the unhappy 
 *   character.
 *
 * P_first_token (Output)
 *   is a pointer to the first token in the chain allocated by this procedure.
 *
 * P_code (Output)
 *   is an error code; a value of zero indicates that all has gone well, and 
 *   any other value indicates an error, except for 
 *   probe_et_$input_exhausted, which indicates that we ran out of 
 *   input prematurely.
 */
%page;
  dcl (
      P_probe_info_ptr	pointer,
      P_input_ptr		pointer,	/* pointer to input buffer */
      P_input_lth		fixed bin (21),
				/* length of input buffer */
      P_area_ptr		pointer,	/* pointer to working area for token allocations, etc. */
      P_language_type	fixed bin (21),
				/* type of language syntax, for parsing */
      P_input_used_lth	fixed bin (21),
				/* (Output) count of chars used from input buffer */
      P_first_token		pointer,	/* (Output) pointer to first token in our output chain */
      P_code		fixed bin (35)
      )			parameter;/* (Output) error code */


  /* IMPORTANT VARIABLES */

  dcl Cur_state		fixed bin,/* what state we are in (computational, not political) */
      Cur_pos		fixed bin (21),
				/* index into Input_str of current char */
      Cur_char		char (1) aligned,
				/* the char we are now parsing */
      Char_type		fixed bin;/* what kind of char it is */
  dcl First_token		ptr;	/* to the first token we allocate */
  dcl Last_token		ptr;	/* to the last token we allocated */
  dcl Paren_level		fixed bin;/* keep count of ((()())) */
  dcl Token_pos		fixed bin (21);
				/* where in buffer the chars of the token begin */

  dcl regexp_sw		bit (1) aligned;
				/* inside /regular expression/ instead of quoted string */

  dcl (ptr_segno, ptr_wordno, ptr_offset, ptr_bitno)
			fixed bin;/* used in building ptr constants */
  dcl i			fixed bin;/* every program needs one of these */
  dcl code		fixed bin (35);

  dcl token_area		area based (token_area_ptr);
				/* where we do our work */
  dcl token_area_ptr	pointer;

  dcl input_string		char (input_string_lth)
			based (input_string_ptr);
  dcl input_string_ptr	pointer;
  dcl input_string_lth	fixed bin (21);

  dcl string_buffer		character (256) varying aligned;
				/* place to put strings while building them */

  dcl char_type		(0:127) fixed bin (17) unaligned
			based (char_type_ptr);
				/* the char type array we use */
  dcl char_type_ptr		ptr;
  dcl action_table		(14, 0:27) fixed bin (17) unaligned
			based (action_table_ptr);
				/* the all-important table */
  dcl action_table_ptr	ptr;


  dcl (
      probe_scan_data_$pl1_char_type,	/* char_types for three languages */
      probe_scan_data_$fortran_char_type,
      probe_scan_data_$pascal_char_type,
      probe_scan_data_$cobol_char_type,
      probe_scan_data_$c_char_type
      )			(0:127) fixed bin (17) unaligned external
			static;

  dcl (
      probe_scan_data_$pl1_action_table,
      probe_scan_data_$fortran_action_table,
      probe_scan_data_$pascal_action_table,
      probe_scan_data_$cobol_action_table,
      probe_scan_data_$c_action_table
      )			(14, 0:27) fixed bin (17) unaligned
			external static;

  dcl probe_scan_data_$operator_type
			(0:127) fixed bin (17) unaligned external
			static;

  dcl 1 probe_scan_data_$doubles
			(13) external static,
       2 pair		char (2),
       2 type		fixed bin;

  dcl 1 probe_scan_data_$fort_ops
			(9) external static,
       2 name		char (4) aligned,
       2 op_code		fixed bin;

  dcl 1 probe_scan_data_$pasc_ops
			(3) external static,
       2 name		char (4) aligned,
       2 op_code		fixed bin;


  dcl (
      probe_et_$recorded_message,
      probe_et_$unbalanced_parens,
      probe_et_$string_long,
      probe_et_$illegal_char
      )			fixed bin (35) external static;

  dcl CR			char (1) aligned internal static
			options (constant) init ("
");


  dcl (cv_dec_check_, cv_oct_check_)
			entry (char (*), fixed bin (35))
			returns (fixed bin (35));
  dcl get_ring_		entry returns (fixed bin (3));
  dcl probe_error_$record	entry options (variable);

  dcl (addr, baseno, bin, binary, bit, divide, fixed, hbound, index, length,
      maxlength)		builtin;
  dcl (mod, null, pointer, rank, rel, reverse, substr, translate, unspec)
			builtin;
%page;
  P_code = 0;
  code = 0;
  probe_info_ptr = P_probe_info_ptr;

  input_string_ptr, probe_info.buffer_ptr = P_input_ptr;
  input_string_lth, probe_info.buffer_lth = P_input_lth;

  token_area_ptr = P_area_ptr;

  if P_language_type = FORTRAN_lang_type then do;
				/* select proper tables */
      char_type_ptr = addr (probe_scan_data_$fortran_char_type);
      action_table_ptr = addr (probe_scan_data_$fortran_action_table);
    end;
  else if P_language_type = COBOL_lang_type then do;
      char_type_ptr = addr (probe_scan_data_$cobol_char_type);
      action_table_ptr = addr (probe_scan_data_$cobol_action_table);
    end;
  else if P_language_type = PASCAL_lang_type then do;
      char_type_ptr = addr (probe_scan_data_$pascal_char_type);
      action_table_ptr = addr (probe_scan_data_$pascal_action_table);
    end;
  else if P_language_type = C_lang_type then do;
      char_type_ptr = addr (probe_scan_data_$c_char_type);
      action_table_ptr = addr (probe_scan_data_$c_action_table);
    end;
  else do;
    char_type_ptr = addr (probe_scan_data_$pl1_char_type);
    action_table_ptr = addr (probe_scan_data_$pl1_action_table);
  end;


  First_token = null ();
  Last_token = null ();
  Paren_level = 0;

  Cur_state = NULL_STATE;





  /* ***** FINITE STATE MACHINE ***** */


  do Cur_pos = 1 to length (input_string);

    Cur_char = substr (input_string, Cur_pos, 1);
    if rank (Cur_char) > hbound (char_type, 1)
      then Char_type = ILLEGAL_CHAR_TYPE;
      else Char_type = char_type (rank (Cur_char));

    /* Can come here after an action has changed states to re-interpret Cur_char in new state */

REPROC:
    goto ACTION (action_table (Cur_state, Char_type));

AR:				/* most actions jump back here when done */

  end;

  /* if last char wasn't a new-line, pretend we have another one-

   this is a bit of a kludge, because all routines jump back to AR or REPROC.
   But we have do do it, so that numbers and identifiers get finished off.
   And we can't just stick a NL after the string.
   Fortunately, nobody is looking at Cur_pos, because this pseduo-CR has no valid position.
*/

  if Cur_char ^= CR then do;
      Cur_char = CR;
      Char_type = char_type (rank (Cur_char));
      goto REPROC;
    end;

  /* once that's done, we can check for unbalanced parens, quotes,  dot-operators, etc. */

  if Paren_level ^= 0
    then call LOSS (probe_et_$unbalanced_parens);
  if Cur_state = STRING_STATE then do;
      if regexp_sw
        then call probe_error_$record (probe_info_ptr, 0,
	        "No closing / for regular expression.");
        else call probe_error_$record (probe_info_ptr, 0, "Unbalanced quotes")
	        ;
      goto RECORDED_MESSAGE;
    end;

  if Cur_state = IN_DOT_OP_STATE then do;
      call probe_error_$record (probe_info_ptr, 0,
	 "Ends in an incomplete FORTRAN logical operator or constant");
      goto RECORDED_MESSAGE;
    end;

EXIT:				/* all returns come through here */
  P_code = code;
  P_input_used_lth = Cur_pos;		/* fencepost maybe possible ?? */
  P_first_token = First_token;

MAIN_RETURN:

  return;

LOSS:
  proc (ecode);			/* call me to set error and return */
  dcl ecode		fixed bin (35) parameter;
  code = ecode;
  Cur_pos = 0;			/* show our disgust */
  goto EXIT;
  end LOSS;

RECORDED_MESSAGE:
  code = probe_et_$recorded_message;
  goto EXIT;

  /* NOW COME THE ACTIONS - begining on next page  */

ACTION (1):			/* when white space is seen in NULL state, it means
						   that previous token was followed by white - set its flag */
  if Last_token ^= null ()
    then Last_token -> token.header.flags.trailing_whitespace = "1"b;

  goto AR;



ACTION (11):			/* a left paren */
  Paren_level = Paren_level + 1;
  Token_pos = Cur_pos;
  call build_operator_from_char (Cur_char);
  goto AR;


ACTION (12):			/* right paren */
  Paren_level = Paren_level - 1;
  if Paren_level < 0
    then call LOSS (probe_et_$unbalanced_parens);
  Token_pos = Cur_pos;
  call build_operator_from_char (Cur_char);
  goto AR;



ACTION (13):			/* random ops */
  Token_pos = Cur_pos;
  if Cur_char = "/" & Last_token = First_token then do;
				/* "/" right after the request name */
      Cur_state = STRING_STATE;	/* starts a regular expression */
      regexp_sw = "1"b;
      string_buffer = "/";
    end;
    else call build_operator_from_char (Cur_char);
  goto AR;



ACTION (14):			/* a dot */
  Cur_state = DOT_SEEN_STATE;
  Token_pos = Cur_pos;
  goto AR;



ACTION (15):			/* first op of a possible double op series */
  string_buffer = Cur_char;		/* save it */
  Cur_state = POSSIBLE_DOUBLE_STATE;
  Token_pos = Cur_pos;
  goto AR;



ACTION (16):			/* PASCAL_ARROW char encountered in NULL STATE */
  Token_pos = Cur_pos;
  call build_operator (bin (substr (PASCAL_ARROW, 13)));
  go to AR;

ACTION (20):			/* a digit - starts a number */
  Cur_state = NUMBER_PRE_DOT_STATE;
  Token_pos = Cur_pos;
  string_buffer = Cur_char;
  goto AR;


ACTION (21):			/* saw a dot then a number */
  Cur_state = NUMBER_POST_DOT_STATE;
  string_buffer = ".";
  call append (Cur_char);
  goto AR;


ACTION (22):			/* more numbers */
  call append (Cur_char);
  goto AR;


ACTION (23):			/* something that can't go in a number */
  call build_number;		/* finish the number */
  Cur_state = NULL_STATE;
  goto REPROC;			/* re-interpret the char */


ACTION (24):			/* a dot in middle */
  call append (Cur_char);
  Cur_state = NUMBER_POST_DOT_STATE;
  goto AR;


ACTION (25):			/* sign is part of exponent */
  Cur_state = NUMBER_EXP2_STATE;	/* only one + or - per exponnet, tho */
  call append (Cur_char);
  goto AR;

ACTION (26):			/* saw an "e" or an "f" build exponent */
  call append (Cur_char);
  Token_pos = Cur_pos;
  Cur_state = NUMBER_EXP1_STATE;
  goto AR;


ACTION (27):			/* an i - end of number */
  call append (Cur_char);
  call build_number;
  Cur_state = NULL_STATE;
  goto AR;


ACTION (28):			/* an "o" - interp as octal */
  call build_octal;
  Cur_state = NULL_STATE;
  goto AR;

ACTION (30):			/* name begins */
  Cur_state = NAME_STATE;
  Token_pos = Cur_pos;
  string_buffer = Cur_char;
  goto AR;

ACTION (31):			/* name continues */
  call append (Cur_char);
  goto AR;


ACTION (32):			/* name ends */
  if P_language_type = PASCAL_lang_type then do;
      do i = 1 to hbound (probe_scan_data_$pasc_ops, 1);
        if probe_scan_data_$pasc_ops (i).name = string_buffer then do;
	  call build_operator (probe_scan_data_$pasc_ops (i).op_code);
	  Cur_state = NULL_STATE;
	  goto REPROC;
	end;
      end;
    end;
  call build_name;
  Cur_state = NULL_STATE;
  goto REPROC;

ACTION (36):			/* have hyphen in COBOL mode */
  call append ("-");
  goto AR;			/* treat it same as an underscore */

ACTION (40):			/* begin quoted */
  Cur_state = STRING_STATE;
  regexp_sw = "0"b;
  Token_pos = Cur_pos;
  string_buffer = "";
  goto AR;


ACTION (41):			/* anything but quote */
  call append (Cur_char);
  if Cur_char = "/" & regexp_sw then do;/* another slash inside regular expression */
      if length (string_buffer) > 2
        then
	   if substr (string_buffer, length (string_buffer) - 2, 2) = "\c"
	     then go to AR;		/* literal slash */
      Cur_state = QUOTE_SEEN_STATE;
    end;
  goto AR;


ACTION (42):
  if regexp_sw
    then call append (Cur_char);	/* quota means nothing inside regular expression */
    else Cur_state = QUOTE_SEEN_STATE;	/* prepare for end of string */
  goto AR;



ACTION (45):			/* almost anything after a quote is true end */
END_STRING:
  call build_char_string;
  Cur_state = NULL_STATE;
  goto REPROC;


ACTION (46):			/* b after quote - is bit string */
  if regexp_sw
    then go to END_STRING;
  Cur_state = BIT_STR_END_STATE;	/* but what kind? b1? b2? b3? */
  goto AR;			/* we'll find out next char */


ACTION (47):			/* o after ", is octal string */
  if regexp_sw
    then go to END_STRING;
  call build_bit_string (3);		/* radix 3 */
  Cur_state = NULL_STATE;
  goto AR;


ACTION (48):			/* another quote - is quote doubling */
  if regexp_sw
    then go to END_STRING;
  call append (Cur_char);
  Cur_state = STRING_STATE;
  goto AR;

ACTION (50):			/* a digit from 1 to 4 after  "b */
  call build_bit_string (fixed (Cur_char));
  Cur_state = NULL_STATE;
  goto AR;


ACTION (51):			/* anthing else after "b default radix is 1 */
  call build_bit_string (1);
  Cur_state = NULL_STATE;
  goto REPROC;








ACTION (55):			/* after a dot, a non-letter */
  call build_operator_from_char (".");
  Cur_state = NULL_STATE;
  goto REPROC;


ACTION (56):			/* letter after dot (FORTRAN only ) */
  Cur_state = IN_DOT_OP_STATE;
  string_buffer = Cur_char;
  goto AR;


ACTION (57):			/* a letter in DOT_OP_STATE */
  call append (Cur_char);
  goto AR;


ACTION (58):			/* final dot delimts */
  do i = 1 to hbound (probe_scan_data_$fort_ops, 1);
    if probe_scan_data_$fort_ops (i).name = string_buffer then do;
FORTRAN_DOT_OPERATOR:
        call build_dot;
        Cur_state = NULL_STATE;
        go to AR;
      end;
  end;
  if string_buffer = "true" | string_buffer = "false"
    then go to FORTRAN_DOT_OPERATOR;
  go to NOT_FORTRAN_DOT_OPERATOR;


ACTION (59):			/* .foo<not .> might be an entryname (FORTRAN) */
NOT_FORTRAN_DOT_OPERATOR:
  call append (Cur_char);
  call build_name;
  Cur_state = NULL_STATE;
  go to REPROC;

ACTION (60):			/* ptr begins with | after digits */
  ptr_segno = cv_oct_check_ ((string_buffer), code);
  if code ^= 0
    then call segno_err (substr (string_buffer, code, 1));
  ptr_wordno, ptr_bitno, ptr_offset = 0;
  string_buffer = "";
  Cur_state = PTR_WORD_STATE;
  goto AR;


ACTION (61):			/* digits for wordno or bitno */
  call append (Cur_char);
  goto AR;


ACTION (62):			/* paren begins bit offset */
  ptr_wordno = cv_oct_check_ ((string_buffer), code);
  if code ^= 0
    then call wordno_err (substr (string_buffer, code, 1));
  string_buffer = "";
  Cur_state = PTR_BIT_STATE;
  goto AR;


ACTION (63):			/* right paren ends bit offset */
  ptr_bitno = cv_dec_check_ ((string_buffer), code);
  if code ^= 0
    then call bitno_err (substr (string_buffer, code, 1));

  call build_pointer;
  Cur_state = NULL_STATE;
  goto AR;


ACTION (64):			/* other char, while in word no */
  ptr_wordno = cv_oct_check_ ((string_buffer), code);
  if code ^= 0
    then call wordno_err (substr (string_buffer, code, 1));
  call build_pointer;
  Cur_state = NULL_STATE;
  goto REPROC;

ACTION (65):			/* vertical bar after name */
  begin;
    dcl init_ptr		  ptr;
    if string_buffer = "sp"
      then init_ptr = current_source.stack_ptr;
    else if string_buffer = "lp"
      then init_ptr = current_source.seg_info_ptr -> seg_info.linkage_ptr;
    else if string_buffer = "tp"
      then init_ptr = pointer (current_source.instruction_ptr, 0);
    else if string_buffer = "ip"
      then init_ptr = current_source.instruction_ptr;
    else do;
      call append (Cur_char);		/* a virtual entry of the form path|N */
      go to AR;
    end;

    ptr_segno = binary (baseno (init_ptr), 18);
    ptr_offset = binary (rel (init_ptr), 18);
  end;				/* begin */

  Cur_state = PTR_WORD_STATE;
  string_buffer = "";
  goto AR;

ACTION (70):			/* another char after poss. double op
						   but we dont form a double op */
  call build_operator_from_char (substr (string_buffer, 1, 1));
  Cur_state = NULL_STATE;
  goto REPROC;


ACTION (71):			/* possible double */
  if Cur_state = DOT_SEEN_STATE
    then string_buffer = ".";		/* first dot seen doesn't normally get saved */

  call append (Cur_char);

  if P_language_type = PASCAL_lang_type
       & index (reverse (string_buffer), "..") = 1 then do;
				/* number.. = Pascal range */
      if length (string_buffer) > 2 then do;
	string_buffer =
	     substr (string_buffer, 1, length (string_buffer) - 2);
	call build_number;
        end;
      call build_operator_from_char (":");
				/* Pascal ".." becomes cross-section */
      Cur_state = NULL_STATE;
      go to AR;
    end;

  do i = 1 to hbound (probe_scan_data_$doubles, 1);
    if string_buffer = probe_scan_data_$doubles (i).pair then do;
        if string_buffer = ".." & P_language_type = PASCAL_lang_type
	then
	     call build_operator_from_char (":");
				/* Pascal ".." becomes cross-section */
	else call build_operator (probe_scan_data_$doubles (i).type);
        Cur_state = NULL_STATE;
        goto AR;
      end;
  end;
  call build_operator_from_char (substr (string_buffer, 1, 1));
  Token_pos = Cur_pos;
  call build_operator_from_char (Cur_char);
  Cur_state = NULL_STATE;
  goto AR;



  /* Action Specific for C to handle the address (&) and mod (%) operators */


  /* ACTION (80): */



  /* THESE ARE ERROR ACTIONS */


ACTION (90):
  call probe_error_$record (probe_info_ptr, 0,
       "Too many decimal points in number (after: ""^a"")", string_buffer);
  goto RECORDED_MESSAGE;


ACTION (91):
  call probe_error_$record (probe_info_ptr, 0,
       "Syntax error in segment number of pointer constant");
  goto RECORDED_MESSAGE;



ACTION (92):
  call probe_error_$record (probe_info_ptr, 0,
       "Bad character in number: ^a after ^a",
       safety (Cur_char), string_buffer);
  goto RECORDED_MESSAGE;


ACTION (93):
  call wordno_err (Cur_char);
  goto RECORDED_MESSAGE;


ACTION (95):
  call bitno_err (Cur_char);
  goto RECORDED_MESSAGE;



ACTION (99):
  call probe_error_$record (probe_info_ptr, probe_et_$illegal_char, "^a",
       safety (Cur_char));
  goto RECORDED_MESSAGE;



wordno_err:
  proc (c);
  dcl c			char (1) aligned parameter;
  call probe_error_$record (probe_info_ptr, 0,
       "Non octal char in word offset of pointer constant: ^a", safety (c));
  goto RECORDED_MESSAGE;

segno_err:
  entry (c);
  call probe_error_$record (probe_info_ptr, 0,
       "Non octal char in segment number of pointer constant: ^a", safety (c))
       ;
  goto RECORDED_MESSAGE;


bitno_err:
  entry (c);
  call probe_error_$record (probe_info_ptr, 0,
       "Non decimal char in bit offset of pointer constant: ^a", safety (c));
  goto RECORDED_MESSAGE;
  end;


safety:
  proc (cc) returns (char (6) aligned);
  dcl cc			char (1) aligned parameter;
  dcl (digit1, digit2, digit3, ncc)
			fixed;
  dcl rsc			char (6) aligned;
  dcl ioa_$rsnnl		entry options (variable);

  dcl printable_chars	char (94) internal static
			options (constant) init
			(
			"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789,<.>/?;+:*`@_}]~^-=)('&%$#""!{[|\"
			);

  ncc = rank (cc);
  digit1 = divide (ncc, 64, 17, 0);
  ncc = ncc - digit1 * 64;
  digit2 = divide (ncc, 8, 17, 0);
  digit3 = ncc - digit2 * 8;
  call ioa_$rsnnl ("""^[^a^3s^;^s\^d^d^d^]""", rsc, (0),
       index (printable_chars, cc) > 0, cc, digit1, digit2, digit3);
  return (rsc);
  end safety;


append:
  proc (c);
  dcl c			char (1) aligned parameter;

  if length (string_buffer) = maxlength (string_buffer)
    then call LOSS (probe_et_$string_long);
  string_buffer = string_buffer || c;
  end append;


  /* CONSTRUCTORS  called to build tokens and thread them on.  They often take input in
   string_buffer, and convert it to right thing.

   build_operator (op_type)
   build_operator_from_char (op_char)
   build_name
   build_char_string
   build_bit_string(radix)
   build_dot
   build_number
   build_octal
   build_pointer

*/

build_operator_from_char:
  proc (op_name);
  dcl op_name		char (1) aligned parameter;
  dcl a			ptr;	/* to the op we allocate */
  dcl op_type		fixed bin;

  op_type = probe_scan_data_$operator_type (rank (op_name));

  goto com;

build_operator:
  entry (pop_type);
  dcl pop_type		fixed bin parameter;

  op_type = pop_type;

com:

  allocate operator in (token_area) set (a);
  call init_token (a);

  a -> token.header.type = OPERATOR_TYPE | bit (fixed (op_type, 18));

  call thread (a);

  /* Here we try to account for the C indirection. eg 'v *tempstr'. We don't
   want to multiply, we want to get the value of whatever tempstr is 
   pointing to. If the previous token is an operator, then the '*' is 
   assumed to mean indirection.  If the previous token is a right 
   paren then the '*' is assumed to be the TIMES operator. */

  if (a -> token.type = TIMES) & (P_language_type = C_lang_type) then do;
      if (Last_token -> token.header.prev ^= null ()) then do;
	if (((Last_token -> token.header.prev -> token.header.type
	     > OPERATOR_TYPE) &
	     (Last_token -> token.header.prev -> token.header.type
	     ^= RIGHT_PAREN) &
	     (Last_token -> token.header.prev -> token.header.type
	     ^= RIGHT_BRACKET)) |
	     (Last_token -> token.header.prev -> token.header.prev = null))
	  then
	       a -> token.header.type = C_INDIRECTION;
        end;
        else a -> token.header.type = C_INDIRECTION;
    end;
				/*
          else if (a->token.type = ARROW) & (Planguage_type = C_lang_type) then
	    a->token.header.type = PERIOD;
*/

  end;


build_name:
  proc;
  dcl a			ptr;

  allocate identifier in (token_area) set (a);
  call init_token (a);

  a -> token.header.type = NAME_TYPE;
  a -> identifier.name = ptr_to_nth_char (Token_pos);
  a -> identifier.length = length (string_buffer);
  call thread (a);

  return;

ptr_to_nth_char:
  proc (cp) returns (ptr);
  dcl cp			fixed bin (21) parameter;
  dcl char_array		(input_string_lth) char (1) unal
			based (input_string_ptr);
  return (addr (char_array (cp)));
  end ptr_to_nth_char;
  end build_name;


build_char_string:
  proc;

  dcl a			ptr;
  dcl based_chars		char (char_len) based;
  dcl char_len		fixed bin (21);

  a = new_constant (char_dtype * 2);
  a -> constant.scale = 0;
  char_len,
       a -> constant.precision,
       a -> constant.scale_and_precision = length (string_buffer);

  allocate based_chars in (token_area) set (a -> constant.data_ptr);

  a -> constant.data_ptr -> based_chars = string_buffer;

  call thread (a);
  end build_char_string;


build_bit_string:
  proc (radix);
  dcl radix		fixed bin parameter;
  dcl a			ptr;
  dcl based_bits		bit (bit_len) based;
  dcl bit_len		fixed bin (24);

  a = new_constant (bit_dtype * 2);
  a -> constant.encoded_precision.scale = 0;
  bit_len, a -> constant.encoded_precision.precision,
       a -> constant.scale_and_precision = length (string_buffer) * radix;

  allocate based_bits in (token_area) set (a -> constant.data_ptr);

convert_chars_to_bit:
  begin;

    dcl output_index	  fixed bin;
    dcl c			  char (1) aligned;
				/* current char being converted */
    dcl input_index		  fixed bin;
				/* index of c in input_chars */
    dcl fb4		  fixed bin (4);

    dcl radix_chars		  (4) char (16) static internal
			  options (constant)
			  init /*   the chars valid in radix */
			  ("0100000000000000",
				/* we will take index of these */
			  "0123000000000000",
			  "0123456700000000",
			  "0123456789ABCDEF");

    output_index = 1;

    do input_index = 1 to length (string_buffer);
				/* for each char in input */
      c = substr (string_buffer, input_index, 1);
      if radix = 4
        then c = translate (c, "ABCDEF", "abcdef");
				/* hex can be in either case */
      fb4 = index (radix_chars (radix), c) - 1;
				/* "0" has index 1, but "is" 0 */
      if fb4 < 0 then do;
	call probe_error_$record (probe_info_ptr, 0,
	     "Non-^[binary^;quaternary^;octal^;hex^] character ^a in bit string",
	     radix, safety (c));
	goto RECORDED_MESSAGE;
        end;

      /* *	Now fb4 is the number whose bit value is to inserted into the string., that is,
   *	if c is "A" (which implies radix = 4), then fb4 is decimal 10, or "1010"b
   *	For radices lower than four we want  to strip of the leading zeroes. The index
   *	of the first significant bit is given by (5 - radix). */

      substr (a -> constant.data_ptr -> based_bits, output_index, radix) =
	 /* write as many bits as called for */
	 substr (bit (fb4), 5 - radix, radix);
      output_index = output_index + radix;
				/* where next string will begin */
    end;				/* loop through characters */

  end convert_chars_to_bit;		/* begin block */


  call thread (a);
  end build_bit_string;

build_dot:
  proc;
  dcl a			ptr;
  dcl based_logical		bit (1) aligned based;
  dcl i			fixed bin;


  if string_buffer = "true" | string_buffer = "false"
    then do;
      a = new_constant (bit_dtype * 2);
      a -> constant.encoded_precision.scale = 0;
      a -> constant.encoded_precision.precision,
	 a -> constant.scale_and_precision = 1;

      allocate based_logical in (token_area) set (a -> constant.data_ptr);

      if string_buffer = "true"
        then a -> constant.data_ptr -> based_logical = "1"b;
        else a -> constant.data_ptr -> based_logical = "0"b;
      call thread (a);

    end;				/* logical constant */
    else do;			/* hope its an operator */
      do i = 1 to hbound (probe_scan_data_$fort_ops, 1);
        if probe_scan_data_$fort_ops (i).name = string_buffer
	then goto MATCH;
      end;

      /* fell out - bad name */

      call probe_error_$record (probe_info_ptr, 0,
	 """^a"" is not a recognized FORTRAN operator ", string_buffer);
      goto RECORDED_MESSAGE;

MATCH:
      call build_operator (probe_scan_data_$fort_ops (i).op_code);
    end;				/* making operator */
  end build_dot;


build_number:
  proc;

  dcl dtype_found		fixed bin (35);
  dcl scale_prec_found	fixed bin (35);
  dcl temp_target		char (256);
				/* no arith constant can exceed 64 words */
  dcl data_size		fixed bin;/* how many bits data is */
  dcl based_bits		bit (data_size) based;
  dcl a			ptr;
  dcl numbuf		char (128) aligned;
  dcl char_to_numeric_	entry (ptr, fixed bin (35), fixed bin (35), ptr,
			fixed bin);
  dcl get_size_in_bits_	entry (fixed bin, fixed bin (35),
			bit (1) aligned) returns (fixed bin);

  numbuf = string_buffer;
  call char_to_numeric_ (addr (temp_target), dtype_found, scale_prec_found,
       addr (numbuf), length (string_buffer));

  a = new_constant ((dtype_found));
  a -> constant.scale_and_precision = scale_prec_found;
  unspec (a -> constant.encoded_precision) = unspec (scale_prec_found);

  data_size =
       get_size_in_bits_ (divide (dtype_found, 2, 17, 0), scale_prec_found,
       bit (mod (dtype_found, 2)));

  allocate based_bits in (token_area) set (a -> constant.data_ptr);

  a -> constant.data_ptr -> based_bits = addr (temp_target) -> based_bits;

  call thread (a);
  end build_number;


build_octal:
  proc;

  dcl a			ptr;
  dcl code		fixed bin (35);
  dcl based_fixed		fixed bin (35) based;


  a = new_constant (real_fix_bin_1_dtype * 2);

  a -> constant.scale = 0;
  a -> constant.precision, a -> constant.scale_and_precision = 35;

  allocate based_fixed in (token_area) set (a -> constant.data_ptr);

  a -> constant.data_ptr -> based_fixed =
       cv_oct_check_ ((string_buffer), code);
  if code ^= 0 then do;
      call probe_error_$record (probe_info_ptr, 0,
	 "Non octal difgit in ""^a""o", string_buffer);
      goto RECORDED_MESSAGE;
    end;

  call thread (a);
  end build_octal;


build_pointer:
  proc;

  dcl a			ptr;
  dcl based_ptr		based ptr;

  dcl 1 its_you		aligned like its_unsigned;


  unspec (its_you) = "0"b;
  its_you.segno = ptr_segno;
  its_you.offset = ptr_offset + ptr_wordno;
  its_you.bit_offset = ptr_bitno;
  its_you.ringno = get_ring_ ();
  its_you.its_mod = ITS_MODIFIER;

  a = new_constant (pointer_dtype * 2);
  a -> constant.encoded_precision,
       a -> constant.scale_and_precision = 0;

  allocate based_ptr in (token_area) set (a -> constant.data_ptr);
  unspec (a -> constant.data_ptr -> based_ptr) = unspec (its_you);

  call thread (a);
  end build_pointer;


new_constant:
  proc (dt) returns (ptr);
  dcl dt			fixed bin parameter;
  dcl a			ptr;


  allocate constant in (token_area) set (a);
  call init_token (a);
  a -> token.header.type = CONSTANT_TYPE;
  a -> constant.data_type = dt;
  return (a);
  end new_constant;



init_token:
  proc (tp);
  dcl tp			ptr parameter;


  tp -> token.header.next = null ();
  tp -> token.header.prev = Last_token;
  tp -> token.header.buffer_ptr = input_string_ptr;
  tp -> token.header.location = Token_pos;
  tp -> token.header.flags = "0"b;
  if Last_token ^= null ()
    then tp -> token.header.flags.leading_whitespace =
	    Last_token -> token.header.trailing_whitespace;
  end init_token;



thread:
  proc (t);
  dcl t			ptr parameter;


  if First_token = null ()
    then First_token = t;
    else Last_token -> token.next = t;
  Last_token = t;
  end thread;

  /*	INCLUDE FILES		*/

%include probe_info;
%include probe_tokens;
%include probe_lang_types;
%include probe_operators;
%include probe_scan_dcls;
%include probe_source_info;
%include probe_seg_info;

%include std_descriptor_types;
%include encoded_precision;
%include its;

  end probe_scan_input_;
