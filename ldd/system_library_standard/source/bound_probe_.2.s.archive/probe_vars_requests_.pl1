/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(88-09-07,WAAnderson), approve(88-09-30,MCR7952),
     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
     Added format control comment to make the source more readable.
                                                   END HISTORY COMMENTS */


/* format: style1,insnl,ifthendo,indthenelse,^indnoniterdo,^inditerdo,indcom,^indthenbegin,^indprocbody,ind2,ll78,initcol0,dclind4,idind24,struclvlind1,comcol41 */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

probe_vars_requests_:
  proc;

  /* Here we have the probe variable requests:

   the 'declare' request:         dcl {NAME} TYPE {-force}
   the 'list_variables' request:  lsv {NAMES}

   James R. Davis Feb 80

*/
  /* Added unaligned pointers 12/04/81 S. Herbst */
  /* Added "external" variables 04/26/82 S. Herbst */
  /* Fixed "dcl" bad-type error message 07/15/82 S. Herbst */
  /* Implemented "dcl NAME TYPE defined EXPRESSION" 03/12/84 S. Herbst */
  /* Fixed bug causing auto var to not be allocated 07/09/84 S. Herbst */
  /* Fixed to translate "-" to "_" in COBOL identifiers when looking up in symbol table 09/20/84 Steve Herbst */

  dcl P_probe_info_ptr	ptr parameter;
				/* input */

  dcl 1 ref_1		aligned like reference_node based (ref_1_ptr);
  dcl ref_1_ptr		ptr;

  dcl variable_name		char (64) varying;
				/* name of var */
  dcl variable_type		char (64) varying;
				/* what type */
  dcl translated_name	char (64) varying;
				/* var name with "-" translated to "_" (COBOL) */
  dcl unaligned_sw		bit (1) aligned;
  dcl external_sw		bit (1) aligned;
  dcl force		bit (1) aligned;
				/* -force ? */
  dcl address_type		fixed bin;
  dcl address_ptr		ptr;
  dcl code		fixed bin (35);
  dcl control_arg		char (64) varying;

  dcl symbol_ptr		ptr;	/* to symbol node of like-named var if already is one */
  dcl response		char (64) varying;

  dcl (
      probe_et_$bad_dcl_type,
      probe_et_$noarg,
      probe_et_$too_many_args,
      probe_et_$var_exists,
      probe_et_$var_doesnt_exist
      )
			fixed bin (35) external static;

  dcl probe_create_reference_ entry (ptr, ptr);
  dcl probe_get_$control_arg	entry (ptr, char (64) varying, fixed bin (35));
  dcl probe_get_$expression	entry (ptr, 1 aligned like reference_node,
			fixed bin (35));
  dcl probe_variable_mgr_$create_variable
			entry (ptr, char (64) varying,
			char (64) varying, bit (1) aligned,
			fixed bin, ptr, bit (1) aligned, ptr unal,
			fixed bin (35));
  dcl probe_variable_mgr_$list_variable
			entry (ptr, char (64) varying, fixed bin (35));
  dcl probe_variable_mgr_$list_all_variables
			entry (ptr, fixed bin (35));

  dcl probe_error_$warning	entry options (variable);
  dcl probe_error_		entry options (variable);

  dcl stu_$find_runtime_symbol
			entry (ptr, char (*), ptr, fixed bin)
			returns (ptr);
  dcl command_query_	entry options (variable);

  dcl (addr, null, translate) builtin;
MAIN_RETURN:
  return;
%page;
declare_request:
  entry (P_probe_info_ptr);

  probe_info_ptr = P_probe_info_ptr;

  if current_token.type >= probe_info.end_token
    then
         goto DCL_USAGE;

  if current_token.type ^= NAME_TYPE
    then goto DCL_USAGE;
  variable_name = current_identifier_name;
  call bump_ct ();

  external_sw, unaligned_sw = "0"b;
  call accept_unal_arg ();

  if current_token.type ^= NAME_TYPE
    then goto DCL_USAGE;
  variable_type = current_identifier_name;
  call bump_ct ();

  call accept_unal_arg ();

  if external_sw
    then address_type = ADDRESS_EXTERNAL_TYPE;
    else address_type = ADDRESS_ALLOC_TYPE;
  address_ptr = null;

  if probe_info.ct -> operator.type < probe_info.end_token
    then
         if probe_info.ct -> token.type = NAME_TYPE then do;
	   if current_identifier_name = "defined"
	        | current_identifier_name = "def" then do;
	       call bump_ct ();
	       if probe_info.ct -> token.type >= probe_info.end_token
	         then do;
		 call probe_error_ (probe_info_ptr, probe_et_$noarg);
		 goto MAIN_RETURN;
	         end;
	       call probe_create_reference_ (probe_info_ptr, ref_1_ptr);
	       call probe_get_$expression (probe_info_ptr, ref_1, code);
	       if code ^= 0 then do;
		 call probe_error_ (probe_info_ptr, code);
		 goto MAIN_RETURN;
	         end;
	       address_type = ADDRESS_GIVEN_TYPE;
	       address_ptr = ref_1.address_ptr;
	     end;
	     else go to TOO_MANY;
	 end;

  force = "0"b;
  call probe_get_$control_arg (probe_info_ptr, control_arg, code);
  if control_arg = "force" | control_arg = "fc"
    then force = "1"b;
  else if control_arg ^= ""		/* something else */
    then goto DCL_USAGE;

  if current_token.type < probe_info.end_token
    then goto TOO_MANY;

  if unaligned_sw & variable_type ^= "pointer" & variable_type ^= "ptr"
    then
         call probe_error_ (probe_info_ptr, 0,
	    "Only pointers can be declared unaligned in probe.  ^a",
	    variable_name);

  if ^probe_info.flags.execute
    then goto MAIN_RETURN;

  if probe_info.language_type = COBOL_lang_type
    then translated_name = translate (variable_name, "_", "-");
    else translated_name = variable_name;

  symbol_ptr = stu_$find_runtime_symbol (current_source.block_ptr,
       (translated_name), (null), (0));

  if symbol_ptr ^= null ()
    then /* tell user already exists */
         call probe_error_$warning (probe_info_ptr, 0,
	    "Warning: a program variable also named ^a is known",
	    variable_name);


  call probe_variable_mgr_$create_variable (probe_info_ptr, variable_name,
       variable_type, unaligned_sw,
       address_type, address_ptr, force, probe_variable_ptr, code);

  if code = probe_et_$var_exists then do;

      query_info.version = query_info_version_4;
      query_info.switches.yes_or_no_sw = "1"b;
      query_info.question_iocbp = probe_info.output_switch;
      query_info.answer_iocbp = probe_info.input_switch;

      call command_query_ (addr (query_info), response, "declare",
	 "A variable named ^a is already declared as ^a. Replace it?",
	 variable_name, probe_variable.declared_type);
      if response = "no"
        then goto MAIN_RETURN;
      call probe_variable_mgr_$create_variable (probe_info_ptr, variable_name,
	 variable_type, unaligned_sw,
	 address_type, address_ptr, "1"b, probe_variable_ptr, code);

    end;
  if code ^= 0
    then
         if code = probe_et_$bad_dcl_type
	 then call probe_error_ (probe_info_ptr, code, variable_type);
	 else call probe_error_ (probe_info_ptr, code, variable_name);

  goto MAIN_RETURN;

DCL_USAGE:
  call probe_error_ (probe_info_ptr, 0,
       "Usage: dcl NAME TYPE {-force}");
  goto MAIN_RETURN;

%page;
list_variables_request:
  entry (P_probe_info_ptr);

  probe_info_ptr = P_probe_info_ptr;
  code = 0;

  if current_token.type < probe_info.end_token
    then
      do while (current_token.type < probe_info.end_token & code = 0);
      if current_token.type ^= NAME_TYPE
        then goto LSV_USAGE;
      variable_name = current_identifier_name;
      if probe_info.flags.execute
        then
	   call probe_variable_mgr_$list_variable (probe_info_ptr,
	        variable_name, code);
      if code = probe_et_$var_doesnt_exist then do;
	call probe_error_$warning (probe_info_ptr, code, variable_name);
	code = 0;			/* list the others, no harm in it */
        end;

      call bump_ct ();
    end;				/* looping thru all NAMEs */
  else if probe_info.flags.execute
    then
         call probe_variable_mgr_$list_all_variables (probe_info_ptr, code);

  if code ^= 0
    then call probe_error_ (probe_info_ptr, code);
  goto MAIN_RETURN;

LSV_USAGE:
  call probe_error_ (probe_info_ptr, 0, "Usage: lsv {NAMES}");
  goto MAIN_RETURN;



bump_ct:
  proc ();
  probe_info.ct = current_token.next;
  end bump_ct;

TOO_MANY:
  call probe_error_ (probe_info_ptr, probe_et_$too_many_args);
  goto MAIN_RETURN;
%page;
accept_unal_arg:
  proc;

  /* For declare request, sees if next arg is "unaligned" or "unal" and sets flag */

NEXT:
  if probe_info.ct -> operator.type < probe_info.end_token
    then
         if probe_info.ct -> token.type = NAME_TYPE
	 then
	      if current_identifier_name = "external"
		 | current_identifier_name = "ext" then do;
		external_sw = "1"b;
		call bump_ct ();
		go to NEXT;
	        end;
	      else if (current_identifier_name = "unaligned"
		 | current_identifier_name = "unal") then do;
		unaligned_sw = "1"b;
		call bump_ct ();
		go to NEXT;
	        end;
  end accept_unal_arg;
%page;
%include probe_info;
%page;
%include probe_lang_types;
%page;
%include probe_references;
%page;
%include probe_source_info;
%page;
%include probe_tokens;
%page;
%include probe_var_info;
%page;
%include query_info;


  end probe_vars_requests_;
