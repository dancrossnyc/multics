/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(88-08-24,WAAnderson), approve(88-09-30,MCR7952),
     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
     Added support for 'char', 'long' and 'double' data types.
  2) change(88-09-07,WAAnderson), approve(88-09-30,MCR7952),
     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
     Added format control comment to make the source more readable.
                                                   END HISTORY COMMENTS */


/* format: style1,insnl,ifthendo,indthenelse,^indnoniterdo,^inditerdo,indcom,^indthenbegin,^indprocbody,ind2,ll78,initcol0,dclind4,idind24,struclvlind1,comcol41 */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

probe_variable_mgr_:
  proc;

  /* Here are the entry points for probe variables:
    create_variable		to make one
    find_variable		to search for one
    list_variable		to list a single var
    list_var_ptr		to list a var given ptr
    list_all_variables	to list them all


   INITIAL IMPLEMENTATION 20 Feb 80 by Jim Davis

   "Plan to write one and throw it away."

   We have a static pointer to the chain of the variables
   We search linearly, placing new variables at the head, in the hope that they
   are the most likely to be referenced.
   Names may come in with a % in front

*/
  /* Add unaligned pointers 12/04/81 S. Herbst */
  /* Add external variables 04/26/82 S. Herbst */
  /* Replaced create_variable's P_external_sw / P_address_type & P_address_ptr for "dcl defined" 03/12/84 S.Herbst */

  dcl P_probe_info_ptr	ptr aligned parameter;
				/* used by all */
  dcl P_variable_name	char (64) varying parameter;
  dcl P_variable_type	char (64) varying parameter;
  dcl P_unaligned_sw	bit (1) aligned parameter;
  dcl P_address_type	fixed bin;
  dcl P_address_ptr		ptr;
  dcl P_force_creation	bit (1) aligned parameter;
  dcl P_reference_node_ptr	ptr aligned parameter;
				/* fill in during lookup */
  dcl P_var_info_ptr	ptr unal parameter;
  dcl P_code		fixed bin (35) parameter;

  dcl start_of_chain	ptr unal internal static init (null ());

  dcl normal_name		char (64) varying;
  dcl (seg_name, entry_point_name)
			char (64);
  dcl var_ptr		ptr;
  dcl i			fixed bin;

  dcl 1 ref		aligned like reference_node based (refp);
  dcl refp		ptr;

  dcl (
      PROBE_VAR_INTEGER_TYPE	init (1), /* fixed bin short */
      PROBE_VAR_FLOAT_TYPE	init (3), /* float bin  short */
      PROBE_VAR_POINTER_TYPE	init (13),/* ITS ptr */
      PROBE_VAR_CHAR_TYPE	init (21),/* char */
      PROBE_VAR_LONG_TYPE	init (2), /* long */
      PROBE_VAR_DOUBLE_TYPE	init (4)	/* double */
      )			fixed bin static internal options (constant);

  dcl 1 name_to_type	(6) internal static options (constant),
       2 names		(5) char (32)
			init ("fixed", "integer", "int", "comp-6",
			"computational-6",
			"float", "real", "real", "real", "real",
			"pointer", "ptr", "ptr", "ptr", "ptr",
			"double", "dbl", "dbl", "dbl", "dbl",
			"char", "char", "char", "char", "char",
			"long", "long", "long", "long", "long"),
       2 type		init (1, 3, 13, 4, 21, 2);

  dcl type_to_make		fixed bin;

  dcl (
      probe_et_$var_exists,		/* already is one */
      probe_et_$bad_dcl_type,
      probe_et_$no_vars,		/* there aren't any at all */
      probe_et_$var_doesnt_exist	/* specific one missing */
      )			fixed bin (35) external static;

  dcl get_external_variable_	entry (char (*), ptr, fixed bin (19), ptr,
			fixed bin (35));
  dcl hcs_$make_ptr		entry (ptr, char (*), char (*), ptr,
			fixed bin (35));
  dcl ioa_$ioa_switch	entry options (variable);

  dcl (index, length, null, pointer, substr)
			builtin;
%page;
MAIN_RETURN:
  return;
%page;
create_variable:
  entry (P_probe_info_ptr, P_variable_name, P_variable_type, P_unaligned_sw,
       P_address_type, P_address_ptr, P_force_creation, P_var_info_ptr,
       P_code);

  probe_info_ptr = P_probe_info_ptr;
  P_code = 0;

  type_to_make = what_type_is ((P_variable_type));
  if type_to_make < 0 then do;
      P_code = probe_et_$bad_dcl_type;
      goto MAIN_RETURN;
    end;

  normal_name = normalize_name ((P_variable_name));
  probe_variable_ptr = find_var_info (normal_name);

  if probe_variable_ptr ^= null ()
    then
         if P_force_creation
	 then call delete_current ();
	 else do;
	   P_code = probe_et_$var_exists;
	   goto MAIN_RETURN;
	 end;

  if P_address_type = ADDRESS_EXTERNAL_TYPE then do;
      i = index (normal_name, "$");
      if i ^= 0 then do;
	seg_name = substr (normal_name, 1, i - 1);
	if i < length (normal_name)
	  then entry_point_name = substr (normal_name, i + 1);
	  else entry_point_name = seg_name;
	call hcs_$make_ptr (null, seg_name, entry_point_name, var_ptr,
	     P_code);
	if var_ptr = null
	  then goto MAIN_RETURN;
	if i = length (normal_name)
	  then var_ptr = pointer (var_ptr, 0);
				/* foo$ means base of segment foo */
        end;
        else do;
	call get_external_variable_ ((normal_name), var_ptr, 0, null,
	     P_code);
	if P_code ^= 0
	  then goto MAIN_RETURN;
        end;
    end;

  allocate probe_variable;
  probe_variable.name = normal_name;
  probe_variable.declared_type = P_variable_type;
  probe_variable.type = type_to_make;
  probe_variable.unaligned_sw = P_unaligned_sw;

  if P_address_type = ADDRESS_EXTERNAL_TYPE
    then probe_variable.address = var_ptr;
  else if P_address_type = ADDRESS_GIVEN_TYPE
    then probe_variable.address = P_address_ptr;

  else if probe_variable.type = PROBE_VAR_INTEGER_TYPE then do;
      allocate probe_variable_integer in (scratch_area);
      probe_variable_integer = 0b;
    end;
  else if probe_variable.type = PROBE_VAR_FLOAT_TYPE then do;
      allocate probe_variable_float in (scratch_area);
      probe_variable_float = 0.0;
    end;
  else if probe_variable.type = PROBE_VAR_DOUBLE_TYPE then do;
      allocate probe_variable_double in (scratch_area);
      probe_variable_double = 0.0;
    end;
  else if probe_variable.type = PROBE_VAR_LONG_TYPE then do;
      allocate probe_variable_long in (scratch_area);
      probe_variable_long = 0;
    end;
  else if probe_variable.type = PROBE_VAR_CHAR_TYPE then do;
      allocate probe_variable_char in (scratch_area);
      probe_variable_char = "";
    end;
  else if probe_variable.type = PROBE_VAR_POINTER_TYPE then do;
      if P_unaligned_sw
        then allocate probe_variable_pointer_unal in (scratch_area);
        else allocate probe_variable_pointer in (scratch_area);
      probe_variable_pointer = null ();
    end;

  probe_variable.next = start_of_chain;
  start_of_chain = probe_variable_ptr;

  P_var_info_ptr = probe_variable_ptr;
  goto MAIN_RETURN;
%page;
find_variable:
  entry (P_probe_info_ptr, P_reference_node_ptr, P_code);

  probe_info_ptr = P_probe_info_ptr;
  P_code = 0;
  refp = P_reference_node_ptr;

  normal_name = normalize_name ((ref.name));
  probe_variable_ptr = find_var_info (normal_name);
  if probe_variable_ptr = null () then do;
      P_code = probe_et_$var_doesnt_exist;
      goto MAIN_RETURN;
    end;

  ref.symbol_ptr = null ();
  ref.address_ptr = probe_variable.address;
  ref.type = probe_variable.type;
  ref.descriptor = probe_variable.type * 2;

  if probe_variable.type = PROBE_VAR_INTEGER_TYPE
    then ref.precision = 35;
  else if probe_variable.type = PROBE_VAR_CHAR_TYPE
    then ref.precision = 1;
  else if probe_variable.type = PROBE_VAR_LONG_TYPE
    then ref.precision = 71;
  else if probe_variable.type = PROBE_VAR_DOUBLE_TYPE
    then ref.precision = 63;
  else if probe_variable.type = PROBE_VAR_FLOAT_TYPE
    then ref.precision = 27;
  else if probe_variable.type = PROBE_VAR_POINTER_TYPE
    then ref.precision = 0;		/* for completeness, tho useless */
				/* else malfunction */

  ref.flags = "0"b;
  ref.flags.probe_variable = "1"b;

  ref.probe_var_info_ptr = probe_variable_ptr;
  goto MAIN_RETURN;
%page;
list_variable:
  entry (P_probe_info_ptr, P_variable_name, P_code);

  probe_info_ptr = P_probe_info_ptr;
  P_code = 0;

  if start_of_chain = null () then do;
      P_code = probe_et_$no_vars;
      goto MAIN_RETURN;
    end;

  normal_name = normalize_name ((P_variable_name));
  probe_variable_ptr = find_var_info (normal_name);
  if probe_variable_ptr = null () then do;
      P_code = probe_et_$var_doesnt_exist;
      goto MAIN_RETURN;
    end;
  call list_current_var ();
  goto MAIN_RETURN;

list_var_ptr:
  entry (P_probe_info_ptr, P_var_info_ptr, P_code);
				/* used by symbol request */

  probe_info_ptr = P_probe_info_ptr;
  P_code = 0;
  probe_variable_ptr = P_var_info_ptr;
  call ioa_$ioa_switch (probe_info.output_switch,
       "probe variable ^a^[ unaligned^]",
       probe_variable.declared_type, probe_variable.unaligned_sw);
  goto MAIN_RETURN;


list_all_variables:
  entry (P_probe_info_ptr, P_code);

  probe_info_ptr = P_probe_info_ptr;

  if start_of_chain = null () then do;
      P_code = probe_et_$no_vars;
      goto MAIN_RETURN;
    end;

  do probe_variable_ptr = start_of_chain repeat probe_variable.next
       while (probe_variable_ptr ^= null ());
    call list_current_var ();
  end;
  P_code = 0;
  goto MAIN_RETURN;


list_current_var:
  proc;

  if probe_variable.type = PROBE_VAR_INTEGER_TYPE
    then call ioa_$ioa_switch (probe_info.output_switch, "^a^16t^a^32t^d",
	    probe_variable.name, probe_variable.declared_type,
	    probe_variable_integer);
  else if probe_variable.type = PROBE_VAR_FLOAT_TYPE
    then call ioa_$ioa_switch (probe_info.output_switch, "^a^16t^a^32t^f",
	    probe_variable.name, probe_variable.declared_type,
	    probe_variable_float);
  else if probe_variable.type = PROBE_VAR_POINTER_TYPE
    then call ioa_$ioa_switch (probe_info.output_switch,
	    "^a^16t^a^[ unaligned^]^32t^p",
	    probe_variable.name, probe_variable.declared_type,
	    probe_variable.unaligned_sw,
	    probe_variable_pointer);

  /* else malfunction */
  end list_current_var;
%page;
  /* INTERNAL PROCEDURES */

normalize_name:
  proc (weird_name) returns (char (64) varying);
  dcl weird_name		char (*) parameter;

  if substr (weird_name, 1, 1) = "%"
    then return (substr (weird_name, 2));
    else return (weird_name);
  end normalize_name;


find_var_info:
  proc (name_wanted) returns (ptr unal);
  dcl name_wanted		char (64) varying parameter;
  dcl p			ptr unal;

  do p = start_of_chain repeat p -> probe_variable.next while (p ^= null ());
    if p -> probe_variable.name = name_wanted
      then
	 return (p);
  end;
  return (null ());
  end find_var_info;

what_type_is:
  proc (type_desired) returns (fixed bin);
  dcl type_desired		char (*) parameter;
  dcl type_x		fixed bin;
  dcl name_x		fixed bin;

  dcl hbound		builtin;

  do type_x = 1 to hbound (name_to_type, 1);
    do name_x = 1 to hbound (name_to_type.names, 2);
      if name_to_type (type_x).names (name_x) = type_desired
        then
	   return (name_to_type (type_x).type);
    end;
  end;
  return (-1);
  end what_type_is;



delete_current:
  proc ();

  call unthread_current ();
  if probe_variable.type = PROBE_VAR_INTEGER_TYPE
    then free probe_variable_integer;
  else if probe_variable.type = PROBE_VAR_FLOAT_TYPE
    then free probe_variable_float;
  else if probe_variable.type = PROBE_VAR_POINTER_TYPE
    then free probe_variable_pointer;

  free probe_variable;

  end delete_current;

unthread_current:
  proc ();
  dcl p			ptr unal;

  if start_of_chain = probe_variable_ptr
    then start_of_chain = probe_variable.next;
    else
      do p = start_of_chain repeat (p -> probe_variable.next)
	 while (p ^= null ());
      if p -> probe_variable.next = probe_variable_ptr
        then do;
	p -> probe_variable.next = probe_variable.next;
	return;
        end;
    end;

  /* falling thru is impossible if variable is known */
  return;
  end unthread_current;
%page;
%include probe_info;
%page;
%include probe_references;
%page;
%include probe_var_info;


  end probe_variable_mgr_;

