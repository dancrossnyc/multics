/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(88-09-07,WAAnderson), approve(88-09-30,MCR7952),
     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
     Added format control comment to make the source more readable.
                                                   END HISTORY COMMENTS */


/* format: style1,insnl,ifthendo,indthenelse,^indnoniterdo,^inditerdo,indcom,^indthenbegin,^indprocbody,ind2,ll78,initcol0,dclind4,idind24,struclvlind1,comcol41 */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

probe_request_mgr_:
  proc ();

  return;				/* dummy entry */

  /* *	This procedure implements the finding of requests and builtins for the
   *	new probe. It also contains entries for printing portions of the,
   *	for the "?" request. */

  /*	Created: 04/09/79 W. Olin Sibert, stolen bodily from subsystem_request_mgr_
   Modified JRD 11 Aug 79 to not include builtins in the request list
*/

  dcl (
      P_probe_info_ptr	pointer,
      P_request_name	char (*), /* name of request to find */
      P_request_entry	entry variable options (variable),
				/* (Output) entry variable for request */
      P_request_info_ptr	pointer,	/* (Output) pointer to information about the request */
      P_code		fixed binary (35)
      )			parameter;

  dcl request_name		character (32);

  dcl request_table_array_ptr pointer;
  dcl request_table_array_size
			fixed bin;
  dcl request_table_ptrs	(request_table_array_size) pointer
			based (request_table_array_ptr);

  dcl request_idx		fixed bin;/* this and request_table_ptr are output from locate_reqest */

  dcl entry_variable	entry variable options (variable);
				/* for building up return value */

  dcl 1 entry_variable_overlay
			aligned based (addr (entry_variable)),
       2 codeptr		pointer,
       2 environmentptr	pointer;

  dcl (idx, jdx, kdx)	fixed bin;
  dcl name_size		fixed bin;
  dcl type_wanted		fixed bin;

  dcl ioa_		entry options (variable);
  dcl ioa_$nnl		entry options (variable);

  dcl probe_error_$record	entry options (variable);

  dcl (
      probe_et_$invalid_request,
      probe_et_$unknown_request,
      probe_et_$unimplemented_request,
      probe_et_$recorded_message
      )			fixed bin (35) external static;

  dcl WHITESPACE		char (2) internal static options (constant)
			init ("	");
				/* SP HT */
  dcl (
      WANT_ANYTHING		init (1),
      WANT_REQUEST		init (2),
      WANT_BUILTIN		init (3)
      )			fixed bin internal static options (constant);

  dcl (addr, length, ltrim, max, null, pointer, rtrim, verify)
			builtin;
				/*  */

  /* *	This entry searches a request table for the named request and returns
   *	the entry variable which is that request's processor. */

find_request:
  entry (P_probe_info_ptr, P_request_name, P_request_entry,
       P_request_info_ptr, P_code);


  type_wanted = WANT_REQUEST;
  goto FIND_COMMON;


find_builtin:
  entry (P_probe_info_ptr, P_request_name, P_request_entry,
       P_request_info_ptr, P_code);

  type_wanted = WANT_BUILTIN;
  goto FIND_COMMON;


FIND_COMMON:
  probe_info_ptr = P_probe_info_ptr;

  request_table_array_ptr = probe_static_info.request_table_info.array_ptr;
  request_table_array_size = probe_static_info.request_table_info.array_size;

  entry_variable_overlay.codeptr = null ();
  entry_variable_overlay.environmentptr = null ();

  P_request_entry = entry_variable;	/* null to start with */

  if length (ltrim (rtrim (P_request_name, WHITESPACE), WHITESPACE)) <= 32
    then
         request_name =
	    ltrim (rtrim (P_request_name, WHITESPACE), WHITESPACE);

    else do;
      call probe_error_$record (probe_info_ptr, probe_et_$invalid_request,
	 """^a""", P_request_name);
      goto RECORDED_MESSAGE;
    end;

  if verify (request_name, WHITESPACE) = 0 then do;
      call probe_error_$record (probe_info_ptr, probe_et_$invalid_request);
      goto RECORDED_MESSAGE;
    end;

  call locate_request ();

  if request_idx = -1 then do;	/* we lost */
      call probe_error_$record (probe_info_ptr, probe_et_$unknown_request,
	 """^a""", P_request_name);
      goto RECORDED_MESSAGE;
    end;

  /* otherwise, fall through to here if successful */
  entry_variable_overlay.codeptr = pointer (probe_request_table_ptr,
       probe_request_table.requests (request_idx).code_loc);

  P_request_entry = entry_variable;
  P_request_info_ptr = addr (probe_request_table.requests (request_idx));

  if probe_request_table.requests (request_idx).unimplemented then do;
      call probe_error_$record (probe_info_ptr,
	 probe_et_$unimplemented_request, """^a""", P_request_name);
      goto RECORDED_MESSAGE;
    end;

    else P_code = 0;

MAIN_RETURN:
  return;				/* end of code for $find_request and $find_builtin */


RECORDED_MESSAGE:
  P_code = probe_et_$recorded_message;
  goto MAIN_RETURN;

  /*  */

  /* *	This entry prints a summary of the requests defined in a given request
   *	table.  The summary includes each reques's name, abbreviation(s), and
   *	brief description as found in the table. */

probe_request_mgr_$list_requests:
  entry (P_probe_info_ptr);

  /* *	This entrypoint lists all the requests currently known by probe. */

  call list_common (WANT_REQUEST);
  return;


probe_request_mgr_$list_builtins:
  entry (P_probe_info_ptr);

  /* This entrypoint lists all the builtins currently implemented */
  call list_common (WANT_BUILTIN);
  return;


list_common:
  proc (typew);

  dcl typew		fixed bin parameter;

  probe_info_ptr = P_probe_info_ptr;

  request_table_array_ptr = probe_static_info.request_table_info.array_ptr;
  request_table_array_size = probe_static_info.request_table_info.array_size;

  /*	Make an initial loop through the tables to determine the size of longest name
   for sake of pretty printout and conservation of horizontal space (and thus time) */

  name_size = 0;

  do idx = 1 to request_table_array_size;
				/* for each request table */
    probe_request_table_ptr = request_table_ptrs (idx);

    do jdx = 1 to probe_request_table.n_requests;
				/* for each request/builtin therein */

      if interesting (probe_request_table.requests (jdx)) then do;
	request_namelist_ptr = pointer (probe_request_table_ptr,
	     probe_request_table.requests (jdx).namelist_loc);

	if request_namelist.n_names = 2
	  then
	       name_size = max (name_size,
		  length (rtrim (request_namelist.names (1)))
		  + length (rtrim (request_namelist.names (2))) + 2);

	  else name_size =
		  max (name_size,
		  length (rtrim (request_namelist.names (1))));
        end;
    end;
  end;

  /*	Print the summary */

  do idx = 1 to request_table_array_size;
    probe_request_table_ptr = request_table_ptrs (idx);

    do jdx = 1 to probe_request_table.n_requests;

      if interesting (probe_request_table.requests (jdx)) then do;
	request_namelist_ptr = pointer (probe_request_table_ptr,
	     probe_request_table.requests (jdx).namelist_loc);

	if request_namelist.n_names = 2
	  then
	       call ioa_$nnl ("^va^2x", name_size,
		  rtrim (request_namelist.names (1)) || ", "
		  || request_namelist.names (2));

	  else call ioa_$nnl ("^va^2x", name_size,
		  request_namelist.names (1));

	request_info_string_ptr = pointer (probe_request_table_ptr,
	     probe_request_table.requests (jdx).info_string.loc);
	request_info_string_lth =
	     probe_request_table.requests (jdx).info_string.lth;

	call ioa_ (request_info_string);

	if request_namelist.n_names > 2 then do;
				/* print additional abbreviations */
	    call ioa_$nnl ("^3x(");
	    do kdx = 2 to request_namelist.n_names;
	      call ioa_$nnl ("^a^[, ^;)^/^]",
		 request_namelist.names (kdx),
		 (kdx ^= request_namelist.n_names));
	    end;
	  end;
        end;
    end;
  end;
  return;

interesting:
  proc (rinfo) returns (bit (1) aligned);
  dcl 1 rinfo		aligned like probe_request_info parameter;

  return (
       (typew = WANT_REQUEST & rinfo.flags.is_request)
       | (typew = WANT_BUILTIN & rinfo.flags.is_builtin) &
       (rinfo.info_string.lth ^= 0) &
       ^rinfo.unimplemented &
       ^rinfo.secret);
  end interesting;

  end list_common;

  /*  */

locate_request:
  proc ();

  /* *	This procedure sets request_idx to the index of the desired request in the table,
   *	or to -1 if no satisfactory match is found */

  do idx = 1 to request_table_array_size;
    probe_request_table_ptr = request_table_ptrs (idx);

    do jdx = 1 to probe_request_table.n_requests;

      if (probe_request_table.is_request (jdx) & type_wanted = WANT_REQUEST)
	 | (probe_request_table.is_builtin (jdx)
	 & type_wanted = WANT_BUILTIN)
	 | (type_wanted = WANT_ANYTHING) then do;

	request_namelist_ptr =
	     pointer (probe_request_table_ptr,
	     probe_request_table.requests (jdx).namelist_loc);
	do kdx = 1 to request_namelist.n_names;
	  if request_name = request_namelist.names (kdx) then do;
	      request_idx = jdx;
	      return;		/* successful */
	    end;
	end;
        end;
    end;				/* of loop through request table */
  end;

  request_idx = -1;			/* failed to find it */
  probe_request_table_ptr = null ();
  return;				/* return, anyway */
  end;				/* locate_request internal procedure */

  /*  */

%include probe_info;

  /* ;;;;;;; */

%include probe_static_info;

  /* ;;;;;;; */

%include probe_request_table;
  end;				/* probe_request_mgr_ external procedure */
