/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/****^  HISTORY COMMENTS:
  1) change(86-03-13,GWMay), approve(86-04-16,MCR7373),
     audit(86-04-29,LJAdams), install(86-05-01,MR12.0-1051):
     Changed to reference entry_desc_info_version_2 constant.
  2) change(86-09-08,DGHowe), approve(86-09-08,MCR7524),
     audit(86-09-16,Ginter), install(86-09-24,MR12.0-1158):
     use command name arglist and check for mbz and pad1 to be "0"b
  3) change(88-09-07,WAAnderson), approve(88-09-30,MCR7952),
     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
     Added format control comment to make the source more readable.
                                                   END HISTORY COMMENTS */

/* format: style1,insnl,ifthendo,indthenelse,^indnoniterdo,^inditerdo,indcom,^indthenbegin,^indprocbody,ind2,ll78,initcol0,dclind4,idind24,struclvlind1,comcol41 */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/* Program to print argument list in "pretty" format.  Based on earlier
   list_frame_args_ by T. VanVleck and S. Webber */
/* Initial Version: 14 June 1974 by B. Wolman */
/* Adapted for probe, 07/15/79 W. Olin Sibert */
/* Truly adapted for probe (a quick job) JRDavis 15 Sept 79 */
/* Changed to flag char strings truncated to 100 chars 09/30/81 S. Herbst */
/* Changed to detect overlength varying strings and return arguments 14 November 1981 J. Spencer Love */
/* Changed to accept all arithmetic types incl hexfp, extended, generic 02/08/84 S. Herbst */

probe_print_arglist_:
  proc (P_probe_info_ptr, P_source_info_ptr);

  dcl P_probe_info_ptr	ptr parameter;
  dcl P_source_info_ptr	ptr parameter;
				/* input: to source info describing frame */

  dcl 1 Arg_source		aligned like source_info
			based (source_info_ptr);
  dcl source_info_ptr	ptr;


  dcl argp		ptr,	/* to a particular arg */
      ap			ptr,	/* to the arglist as a whole */
      descp		ptr,	/* to a descriptor in the arglist */
      ep			ptr,	/* entry ptr for proc of interest */
      ip			ptr,	/* to info about expected arg types */
      arg_index		fixed bin,/* the index of the arg currently being printed */
      oswitch		ptr,	/* the io switch to write on */
      str_length		fixed bin (24),
      scale		fixed bin,
      type		fixed bin,/* data type of Nth arg */
      ndims		fixed bin,/* number of dimensions of N'th arg */
      packed		bit (1) aligned,
				/* was data packed? */
      quick_block		bit (1) aligned,
				/* is this a quick call? */
      expected_type		fixed bin,/* for N'th arg, what was expected data type? */
      expected_scale	fixed bin,/* scale likewise */
      expected_str_length	fixed bin (24),
      expected_ndims,
      expected_packed	bit (1) aligned,
      code		fixed bin (35),
      no_args		fixed bin,/* how many args we have */
      no_descs		fixed bin,/* how many descriptors */
      expected_no_args	fixed bin,/* how many the program wanted */
      arg_list_arg_count	fixed bin,/* for arg_list.incl.pl1 */
      arith_str		char (500) varying,
      hexfp_space		fixed bin (71),
      overlength_varying_string
			fixed bin (24),
      truncated		fixed bin (24),
      type_unknown		bit (1) aligned;

  dcl add_bit_offset_	entry (ptr, fixed bin (24))
			returns (ptr) reducible;
  dcl assign_$computational_	entry (ptr, ptr, fixed bin (35));
  dcl condition_		entry (char (*), entry);
  dcl decode_descriptor_	entry (ptr, fixed bin, fixed bin,
			bit (1) aligned, fixed bin, fixed bin (24),
			fixed bin);
  dcl display_file_value_	entry (ptr, file, fixed bin (35));
  dcl get_entry_arg_descs_$info
			entry (ptr, fixed bin, (*) ptr, ptr,
			fixed bin (35));
  dcl get_ring_		entry () returns (fixed bin (3));
  dcl ioa_$ioa_switch	entry options (variable);
  dcl ioa_$ioa_switch_nnl	entry options (variable);
  dcl ioa_$rsnnl		entry options (variable);
  dcl requote_string_	entry (char (*)) returns (char (*));

  dcl probe_check_ptr_$convert
			entry (ptr, bit (*))
			returns (char (256) varying);
  dcl probe_check_ptr_$convert_packed
			entry (ptr unal, bit (*))
			returns (char (256) varying);

  dcl probe_check_ptr_$check	entry (ptr, fixed bin (35));

  dcl probe_error_		entry options (variable);

  dcl 1 no_arg_info		aligned,
       2 no_args		fixed bin init (-1),
       2 function		bit (1) initial ("0"b);

  dcl 1 arg_info		aligned,	/* for get_entry_arg_descs */
       2 no_args		fixed bin,
       2 function		bit (1),
       2 descs		(128) ptr;

  dcl 1 entry_flags		aligned like entry_desc_info;

  dcl 1 (source, target)	aligned like computational_data;

  dcl word		(2) fixed bin based,
      packed_ptr		unal ptr based,
      unpacked_ptr		aligned ptr based,
      based_file		file based,
      based_length		fixed bin (24) based,
      bit_string		bit (str_length) based,
      char_string		char (str_length) based,
      based_cs		char (100) based;

  dcl (addr, addrel, binary, hbound, ltrim, max, maxlength, min, null, ptr,
      unspec, verify)	builtin;

  dcl 1 lv		aligned based (argp),
       2 ptr		ptr,
       2 stack		ptr;

  dcl star_length		fixed bin (24) static init (16777215);
				/* length in char(*) entry descriptor */


  dcl LEGAL		char (96) int static
			init /* Printables except PAD, but with BS */
			(
			" !""#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
			);

  dcl 1 entry_arg_info	aligned based,
       2 no_args		fixed bin,
       2 function		bit (1),
       2 descs		(n refer (entry_arg_info.no_args)) ptr;


  probe_info_ptr = P_probe_info_ptr;
  source_info_ptr = P_source_info_ptr;

  oswitch = probe_info.output_switch;

  ep = Arg_source.entry_ptr;		/* needed to decode descriptors */
  sp = Arg_source.stack_ptr;

  call find_arglist ();

  entry_flags.version = entry_desc_info_version_2;
  call get_entry_arg_descs_$info (ep, arg_info.no_args, arg_info.descs,
       addr (entry_flags), code);

  if code = 0 then do;
      arg_info.function = entry_flags.function;
      ip = addr (arg_info);
    end;
    else ip = addr (no_arg_info);

  expected_no_args = ip -> entry_arg_info.no_args;

  if expected_no_args > 0
    then if expected_no_args ^= no_args
	 then call ioa_$ioa_switch (oswitch,
		 "Warning: ^d arguments expected, ^d supplied.",
		 expected_no_args, no_args);

  if no_args = 0 then do;
      call ioa_$ioa_switch (oswitch, "No arguments.");
      return;
    end;

  if no_args > 128 then do;
      call ioa_$ioa_switch (oswitch,
	 "Only first 128 of ^d args will be considered.", no_args);
      no_args = 128;
      expected_no_args = min (expected_no_args, 128);
      if no_descs ^= 0
        then no_descs = 128;
    end;

  call condition_ ("any_other", handler);

  do arg_index = 1 to no_args;

    argp = cv_ptr (ap -> arg_list.arg_ptrs (arg_index));
    type_unknown = "0"b;

    if no_descs ^= 0 then do;
        if ap -> arg_list.call_type = Envptr_supplied_call_type
	then descp =
		cv_ptr (ap -> arg_list_with_envptr.desc_ptrs (arg_index));
	else descp = cv_ptr (ap -> arg_list.desc_ptrs (arg_index));

        call decode_descriptor_ (descp, 0, type, packed, ndims, str_length,
	   scale);

        if expected_no_args >= arg_index
	then if ip -> entry_arg_info.descs (arg_index) ^= null
	       then call compare_expected_with_actual;
      end;
    else if expected_no_args >= arg_index
      then do;
        if ip -> entry_arg_info.descs (arg_index) = null
	then call guess_type;
	else call decode_descriptor_ (ip
		-> entry_arg_info.descs (arg_index), 0, type, packed,
		ndims, str_length, scale);
      end;
    else call guess_type;


    /* now type is set, and possible others such as str_length, scale, packed, a */

    if arg_index = no_args & ip -> entry_arg_info.function
      then do;
        call ioa_$ioa_switch (oswitch, "ARG ^3d @ ^p Returns ^a.", arg_index,
	   argp, type_name (type));
        go to next_arg;
      end;

    call ioa_$ioa_switch_nnl (oswitch, "ARG ^3d @ ^p = ", arg_index, argp);

    if type < -1
      then goto unknown_type;
    if type > hbound (form, 1)
      then goto unknown_type;

    overlength_varying_string, truncated = 0;

    goto form (type);

    /* Arithmetic */

form (1):
form (2):
form (3):
form (4):
form (5):
form (6):
form (7):
form (8):
form (9):
form (10):
form (11):
form (12):
form (29):
form (30):
form (33):
form (34):
form (35):
form (36):
form (38):
form (39):
form (41):
form (42):
form (43):
form (44):
form (45):
form (46):
form (47):
form (48):
form (49):
form (50):
				/* Copied from display_data_ */

    unspec (source) = "0"b;
    source.address = argp;
    source.data_type = type;
    source.packed = packed;
    source.prec_or_length = str_length;
    source.scale = scale;
    source.picture_image_ptr = null;

    if source.data_type = real_flt_dec_generic_dtype |
         source.data_type = cplx_flt_dec_generic_dtype then do;
				/* don't print generic's tremendous precision */
        unspec (target) = "0"b;
        target.address = addr (hexfp_space);
        if source.data_type = real_flt_dec_generic_dtype
	then
	     target.data_type = real_flt_hex_1_dtype;
	else target.data_type = cplx_flt_hex_1_dtype;
        target.prec_or_length = 27;
        target.picture_image_ptr = null;

        call assign_$computational_ (addr (target), addr (source), code);
        if code = 0
	then source = target;
      end;

    unspec (target) = "0"b;
    target.address = addr (arith_str);
    target.data_type = varying_char_dtype;
    target.prec_or_length = maxlength (arith_str);
    target.picture_image_ptr = null;

    call assign_$computational_ (addr (target), addr (source), code);
    if code ^= 0
      then go to unknown_type;

    arith_str = ltrim (arith_str);
    call ioa_$ioa_switch (oswitch, "^a", arith_str);

    goto next_arg;

    /* Pointer */

form (13):
    if packed
      then call ioa_$ioa_switch (oswitch, "^a",
	      probe_check_ptr_$convert_packed (argp -> packed_ptr, ""b));
      else call ioa_$ioa_switch (oswitch, "^a^[ (type unknown)^]",
	      probe_check_ptr_$convert (argp -> unpacked_ptr, ""b),
	      type_unknown);

    goto next_arg;

    /* Label, Entry Variables */

form (15):
form (16):
    call ioa_$ioa_switch (oswitch, "^a ^[(external entry)^;^p^]",
         probe_check_ptr_$convert (argp -> lv.ptr, ""b),
         (argp -> lv.stack = null ()), argp -> lv.stack);

    /*** What I really want to do here is display a level number instead of a stackframeptr. */

    goto next_arg;


    /* Label, Entry Constants */

form (24):
form (25):
form (26):
form (27):

    call ioa_$ioa_switch (oswitch, "^a",
         probe_check_ptr_$convert (argp -> unpacked_ptr, ""b));

    goto next_arg;

    /* Varying bit string */

form (20):
    if addrel (argp, -1) -> based_length > str_length
         | addrel (argp, -1) -> based_length < 0
      then overlength_varying_string = addrel (argp, -1) -> based_length;
      else str_length = addrel (argp, -1) -> based_length;

    /* Bit string */

form (19):
    if str_length > 72 then do;
        truncated = str_length;
        str_length = 72;
      end;

    call ioa_$ioa_switch (oswitch,
         "^[(Length = ^d, Maxlength = ^d)  ^;^2s^]""^b""b^[ (truncated from ^d bits)^]",
         (overlength_varying_string ^= 0), overlength_varying_string,
         max (str_length, truncated),
         argp -> bit_string, (truncated > 0), truncated);

    goto next_arg;

    /* Varying char string */

form (22):
    if addrel (argp, -1) -> based_length > str_length
         | addrel (argp, -1) -> based_length < 0
      then overlength_varying_string = addrel (argp, -1) -> based_length;
      else str_length = addrel (argp, -1) -> based_length;

    /* Char string */

form (21):
    if str_length > 256 then do;
        truncated = str_length;
        str_length = 168;
      end;

    call ioa_$ioa_switch (oswitch,
         "^[(Length = ^d, Maxlength = ^d)  ^;^2s^]^a^[ (truncated from ^d chars)^;^s^]^[ (type unknown)^]",
         (overlength_varying_string ^= 0), overlength_varying_string,
         max (str_length, truncated),
         requote_string_ (argp -> char_string), (truncated > 0), truncated,
         type_unknown);

    goto next_arg;

    /* File */

form (23):
    call display_file_value_ (oswitch, argp -> based_file, (0));
    goto next_arg;

    /* Cannot determine type */

form (0):
form (-1):
    call ioa_$ioa_switch (oswitch, "^w (type unknown)", argp -> word (1));

    go to next_arg;

    /* Offset */

form (14):
    call ioa_$ioa_switch (oswitch, " ^w", argp -> word (1));

    goto next_arg;

    /* Area or Structure, or unrecognized type */

unknown_type:
form (17):
form (18):
form (28):
form (31):
form (32):
form (37):
form (40):
form (51):
form (52):
form (53):
form (54):
form (55):
form (56):
form (57):
form (58):
form (59):
    call ioa_$ioa_switch (oswitch, " (^a) ^w",
         type_name (type), argp -> word (1));

next_arg:
    if ndims > 0
      then call ioa_$ioa_switch (oswitch, "^10x(^d-dim array)", ndims);

skip_arg:
  end;				/* arg printing loop */
  return;

  /* internal procs follow */

find_arglist:
  procedure ();

  dcl bp			ptr;


  if sp = null ()
    then call probe_error_ (probe_info_ptr, 0,
	    "Can't find arg list because can't find stack frame.");

  bp = Arg_source.block_ptr;
  quick_block = "0"b;
  if bp ^= null ()
    then if bp -> runtime_block.type = ""b
	 then call probe_error_ (probe_info_ptr, 0,
		 "Begin block has no arguments.");
         else if bp -> runtime_block.quick
	 then quick_block = "1"b;

  if quick_block
    then do;			/* Make sure quick block has valid arglistptr.		*/
      ap = addrel (sp, bp -> runtime_block.entry_info);
      if ap -> its.its_mod ^= ITS_MODIFIER | ap -> its.mod ^= ""b
	 | ap -> its.pad1 ^= ""b
	 | ap -> its.pad2 ^= ""b | ap -> its.pad3 ^= ""b
	 | ap -> its.pad4 ^= ""b
	 | binary (ap -> its.ringno) ^= get_ring_ ()
	 | ap -> its.bit_offset ^= ""b
        then do;
	ap = null ();
	no_args, arg_list_arg_count, no_descs = 0;
	return;
        end;
      ap = ap -> quick_entry.argptr;
    end;
    else do;
      call probe_check_ptr_$check (stack_frame.arg_ptr, code);
      if code ^= 0
        then call probe_error_ (probe_info_ptr, code, "(argument ptr)");
      ap = stack_frame.arg_ptr;
    end;

  if ap = null ()
    then call probe_error_ (probe_info_ptr, 0, "Argument ptr is null.");

  call probe_check_ptr_$check (ap, code);
  if code ^= 0
    then call probe_error_ (probe_info_ptr, code);

  if ap -> command_name_arglist.pad1 ^= "0"b |
       ap -> command_name_arglist.mbz ^= "0"b
    then call probe_error_ (probe_info_ptr, 0,
	    "Arg list at ^p has some pad bits set.", ap);

  if ap -> arg_list.call_type ^= Quick_call_type &
       ap -> arg_list.call_type ^= Interseg_call_type &
       ap -> arg_list.call_type ^= Envptr_supplied_call_type
    then call ioa_$ioa_switch (oswitch,
	    "Warning:  Arg list at ^p has bad call type (^d).", ap,
	    ap -> arg_list.call_type);

  if quick_block & (ap -> arg_list.call_type ^= Quick_call_type)
    then call ioa_$ioa_switch (oswitch,
	    "Warning:  Arg list at ^p has nonquick type for quick call.",
	    ap);

  if ^quick_block & (ap -> arg_list.call_type = Quick_call_type)
    then call ioa_$ioa_switch (oswitch,
	    "Warning:  Arg list at ^p has quick type for nonquick call.",
	    ap);

  /* ALM does not set the envptr for C. */

  if bp ^= null () & ^quick_block
    then if ^runtime_block_is_external (bp)
	 then if ap -> arg_list.call_type = Interseg_call_type
		 & probe_info.language_type ^= C_lang_type
	        then call ioa_$ioa_switch (oswitch,
		        "Warning:  Arg list at ^p has no environmentptr.",
		        ap);
	      else if ap -> arg_list_with_envptr.envptr = null ()
		 & probe_info.language_type = C_lang_type
	        then call ioa_$ioa_switch (oswitch,
		        "Warning:  Arg list at ^p has a null environmentptr.",
		        ap);
	      else ;
         else if ap -> arg_list.call_type = Envptr_supplied_call_type
	 then if ap -> arg_list_with_envptr.envptr ^= null ()
	        then call ioa_$ioa_switch (oswitch,
		        "Warning:  Arg list at ^p has extraneous environmentptr.",
		        ap);

  no_args, arg_list_arg_count = ap -> arg_list.arg_count;
  no_descs = ap -> arg_list.desc_count;

  if no_descs > 0 & no_descs ^= no_args
    then call probe_error_ (probe_info_ptr, 0,
	    "Arg list at ^p has ^d args but only ^d descriptors.", ap,
	    no_args, no_descs);

  return;

  end find_arglist;
%page;
  /* This procedure is used to determine whether an entrypoint is internal or external.  It uses the following
   simple heuristic:  the first runtime_block in the runtime symbol table for the current component is
   assumed to be external; all others are considered internal.  I don't like this very well, but it is the
   best that can be done at present.									*/

runtime_block_is_external:
  procedure (bp) returns (bit (1) aligned);

  declare bp		    ptr,
	p		    ptr;

  p = addrel (bp, bp -> runtime_block.header);
  p = addrel (p,
       addrel (p, p -> std_symbol_header.area_pointer)
       -> pl1_symbol_block.root);
  p = addrel (p, p -> runtime_block.son);

  if bp = p
    then return ("1"b);
    else return ("0"b);

  end runtime_block_is_external;
%page;
  /* This procedure performs a (rough) comparison using calling descriptor and entry arg descriptor.
   The global variable arg_index indicates the argument being checked.
   The actual form of structures is not checked. */

compare_expected_with_actual:
  proc;


  call decode_descriptor_ (ip -> entry_arg_info.descs (arg_index), 0,
       expected_type, expected_packed,
       expected_ndims, expected_str_length, expected_scale);

  if type ^= expected_type
    then call ioa_$ioa_switch (oswitch,
	    "Warning: arg ^d type mismatch: ^a supplied, ^a expected.",
	    arg_index, type_name (type), type_name (expected_type));

  if packed ^= expected_packed
    then if (expected_type ^= 19) & (expected_type ^= 21)
	 then call ioa_$ioa_switch (oswitch,
		 "Warning: arg ^d packing mismatch: ^b supplied, ^b expected.",
		 arg_index, packed, expected_packed);

  if ndims ^= expected_ndims
    then call ioa_$ioa_switch (oswitch,
	    "Warning: arg ^d ndims mismatch: ^d supplied, ^d expected.",
	    arg_index, ndims, expected_ndims);

  if str_length ^= expected_str_length
    then if (expected_type < bit_dtype) | (expected_str_length ^= star_length)
	 then call ioa_$ioa_switch (oswitch,
		 "Warning: arg ^d length mismatch: ^d supplied, ^d expected.",
		 arg_index, str_length, expected_str_length);

  if scale ^= expected_scale
    then call ioa_$ioa_switch (oswitch,
	    "Warning: arg ^d scale mismatch: ^d supplied, ^d expected.",
	    arg_index, scale, expected_scale);

  end;
%page;
  /* This procedure attempts to guess the type of a datum by inspection.
   It guesses pointer, character string, or octal word.
   It is called when no descriptors are available. */

guess_type:
  proc;

  packed = "0"b;
  scale = 0;
  ndims = 0;
  type_unknown = "1"b;

  if argp -> its.its_mod = ITS_MODIFIER & argp -> its.pad1 = ""b
    then type = pointer_dtype;
    else do;
      str_length = verify (argp -> based_cs, LEGAL) - 1;
      if str_length < 0
        then str_length = 100;
      if str_length >= 2
        then type = char_dtype;
        else type = -1;
    end;
  end;
%page;
handler:
  proc (mcp, cname, cop, infop, continue);

  dcl (mcp, cop, infop)	ptr,
      cname		char (*),
      continue		bit (1);

  if cname = "alrm"
    then do;
refuse:
      continue = "1"b;
      return;
    end;

  if cname = "cput"
    then goto refuse;
  if cname = "program_interrupt"
    then goto refuse;
  if cname = "mme2"
    then goto refuse;
  if cname = "finish"
    then goto refuse;
  if cname = "storage"
    then goto refuse;
  if cname = "quit"
    then goto refuse;

  if cname = "cleanup"
    then
         return;

  call ioa_$ioa_switch (oswitch, "not accessible - ^a fault", cname);

  goto skip_arg;
  end handler;
%page;
type_name:
  proc (t) returns (char (40));

  dcl t			fixed bin parameter;
  dcl buff		char (40);

%include probe_data_type_names;

  if t >= 1 & t <= hbound (type_name, 1)
    then
         return (type_name (t));

  call ioa_$rsnnl ("type ^d", buff, 40, t);

  return (buff);

  end;
%page;
cv_ptr:
  procedure (p) returns (ptr);

  declare p		    ptr;

  declare 1 ITS		    aligned like its based (addr (p)),
	1 ITP		    aligned like itp based (addr (p)),
	OFFSET		    bit (18) unaligned based (addr (p));

  if ^quick_block
    then
         return (p);

  if ITS.its_mod = ITS_MODIFIER & ITS.mod = ""b
    then
         return (p);

  if ITS.its_mod = ""b
    then
         return (ptr (ep, OFFSET));

  if ITP.itp_mod = ITP_MODIFIER & binary (ITP.pr_no) = 6
    then
         return (
	    add_bit_offset_ (addrel (sp, ITP.offset),
	    binary (ITP.bit_offset)))
	    ;
  call probe_error_ (probe_info_ptr, 0,
       "Bad modifiers in quick arglist at ^p", ap);
  end cv_ptr;
%page;
%include probe_info;
%page;
%include probe_source_info;
%page;
%include computational_data;
%page;
%include arg_list;
%page;
%include entry_desc_info;
%page;
%include its;
%page;
%include pl1_symbol_block;
%page;
%include quick_entry;
%page;
%include runtime_symbol;
%page;
%include stack_frame;
%page;
%include std_descriptor_types;
%page;
%include std_symbol_header;
%page;
%include probe_lang_types;

  end probe_print_arglist_;
