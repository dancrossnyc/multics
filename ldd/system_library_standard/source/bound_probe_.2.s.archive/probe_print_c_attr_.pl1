/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(88-09-07,WAAnderson), approve(88-09-30,MCR7952),
     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
     Added format control comment to make the source more readable.
                                                   END HISTORY COMMENTS */

/* format: style1,insnl,ifthendo,indthenelse,^indnoniterdo,^inditerdo,indcom,^indthenbegin,^indprocbody,ind2,ll78,initcol0,dclind4,idind24,struclvlind1,comcol41 */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

probe_print_c_attr_:
  proc (P_probe_info_ptr, P_refp, P_long_sw, P_code);

  dcl P_probe_info_ptr	parameter ptr;
  dcl P_refp		parameter ptr;
  dcl P_long_sw		parameter bit (1) aligned;
  dcl P_code		parameter fixed bin (35);

  dcl 1 P_reference		aligned like reference_node based (refp);
  dcl refp		ptr;
  dcl sym			ptr;
  dcl sp			ptr;
  dcl next		ptr;
  dcl (addr, addrel, fixed, null, substr)
			builtin;
  dcl (
      ioa_$ioa_switch,
      ioa_$ioa_switch_nnl,
      ioa_$rsnnl
      )			entry options (variable);
  dcl probe_block_name_	entry (ptr, ptr, bit (1) aligned)
			returns (char (256) varying);
  dcl 01 acc_str		based,
       02 str_len		fixed bin (9) unsigned unaligned,
       02 str_name		char (0 refer (acc_str.str_len)) unaligned;
  dcl next_sym		ptr;
  dcl name_ptr		ptr;
  dcl ioa_str		char (14);
  dcl tackon_parens		char (2) varying init ("");
  dcl dummy_ptr		ptr;
  dcl temp_str_1		char (168) varying;
  dcl temp_str_2		char (168) varying;
%page;
/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

this_symbol_occupies_storage:
  proc (ref_ptr, sym_ptr) returns (bit (1));

  dcl ref_ptr		parameter ptr;
  dcl sym_ptr		parameter ptr;
  dcl containing_block	ptr;
  dcl steps		fixed bin;
  dcl t_ptr		ptr;
  dcl t_name		char (168) varying;
  dcl stu_$find_runtime_symbol
			entry (pointer, char (*), pointer, fixed bin)
			returns (pointer);

  if fixed (sym_ptr -> runtime_symbol.class) ^= 0
    then return ("1"b);

  name_ptr = addrel (sym, fixed (sym -> runtime_symbol.name, 1));
  t_name =
       substr (name_ptr -> acc_str.str_name, 1, name_ptr -> acc_str.str_len);
  if (t_name ^= ref_ptr -> reference_node.name) then do;
      t_ptr =
	 stu_$find_runtime_symbol (ref_ptr
	 -> reference_node.source_info_ptr -> source_info.block_ptr,
	 (ref_ptr -> reference_node.name), containing_block, steps);
      if t_ptr = null ()
        then return ("0"b);
      else if fixed (t_ptr -> runtime_symbol.class) ^= 0
        then return ("1"b);
    end;

  return ("0"b);

  end this_symbol_occupies_storage;
%page;
/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

  dummy_ptr = null ();
  probe_info_ptr = P_probe_info_ptr;
  P_code = 0;
  refp = P_refp;
  sym = P_reference.symbol_ptr;
  next_sym = null ();

  name_ptr = addrel (sym, fixed (sym -> runtime_symbol.name, 1));

  if (fixed (sym -> runtime_symbol.level) = 0 &
       fixed (sym -> runtime_symbol.class) = 0 &
       fixed (sym -> runtime_symbol.location) = 0)
    then
         call ioa_$ioa_switch_nnl (probe_info.output_switch, "typedef");

  if P_reference.type = ext_entry_runtime_dtype then do;
      sym = addrel (sym, fixed (sym -> runtime_symbol.son));
      if (fixed (sym -> runtime_symbol.type) = pointer_dtype)
        then
	   ioa_str = "^a^a()";
        else ioa_str = "^a ^a()";
      call ioa_$ioa_switch (probe_info.output_switch, ioa_str,
	 get_c_attr_str (sym, dummy_ptr),
	 substr (name_ptr -> acc_str.str_name, 1,
	 name_ptr -> acc_str.str_len));
      return;
    end;

  if fixed (sym -> runtime_symbol.type) = pointer_dtype
    then
         ioa_str = "^a^a";
    else ioa_str = "^a ^a";

  temp_str_1 = get_c_attr_str (sym, dummy_ptr);
  temp_str_2 =
       substr (name_ptr -> acc_str.str_name, 1, name_ptr -> acc_str.str_len)
       || get_c_dims_str (sym, 0, "0"b) || get_c_class_str (sym);

  if next_sym ^= null ()
    then
         sym = next_sym;

  if ((fixed (sym -> runtime_symbol.type) = structure_dtype |
       fixed (sym -> runtime_symbol.type) = c_enum_dtype |
       fixed (sym -> runtime_symbol.type) = c_union_dtype) & P_long_sw)
    then do;
      if (^this_symbol_occupies_storage (addr (P_reference), sym)) then do;
	temp_str_1 = temp_str_1 || temp_str_2;
	temp_str_2 = "";
        end;
      call ioa_$ioa_switch (probe_info.output_switch, "^a { ", temp_str_1);
      do sp = addrel (sym, sym -> runtime_symbol.son) /* for son */
	 repeat next while (sp ^= null ());
        call print_member (sp, fixed (sym -> runtime_symbol.ndims, 6), 1);
        if sp -> runtime_symbol.brother ^= (18)"0"b
	then next = addrel (sp, sp -> runtime_symbol.brother);
	else next = null ();
      end;
      call ioa_$ioa_switch (probe_info.output_switch, " } ^a", temp_str_2);
    end;
    else
         call ioa_$ioa_switch (probe_info.output_switch, ioa_str, temp_str_1,
	    temp_str_2);

  call ioa_$ioa_switch (probe_info.output_switch, "Declared in ^a",
       probe_block_name_ (probe_info_ptr, P_reference.source_info_ptr, "0"b));
  return;
%page;
/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

print_member:
  proc (s, inheritance, level_num);

  dcl s			ptr parameter;
				/* to a symbol node */
  dcl inheritance		fixed bin parameter;
  dcl level_num		fixed bin parameter;
  dcl q			ptr;	/* to son and sons' siblings */
  dcl nextq		ptr;
  dcl temp_ptr		ptr;
  dcl ioa_str		char (14);
  dcl print_whole_struct_or_union_ptr
			ptr;
  dcl saved_ptr		ptr;
  dcl temp_str_1		char (168) varying;
  dcl temp_str_2		char (168) varying;

  temp_ptr =
       addrel (s, fixed (s -> runtime_symbol.name, 1));
  if (substr (temp_ptr -> acc_str.str_name, 1, 1) = "!")
    then
         return;

  print_whole_struct_or_union_ptr = null ();
  saved_ptr = null ();

  if fixed (s -> runtime_symbol.type) = pointer_dtype
    then
         ioa_str = "^vx ^a^a";
    else
         ioa_str = "^vx ^a ^a";
  temp_str_1 = get_c_attr_str (s, print_whole_struct_or_union_ptr);
  temp_str_2 =
       substr (temp_ptr -> acc_str.str_name, 1, temp_ptr -> acc_str.str_len)
       || get_c_dims_str (s, inheritance, "0"b);

  if print_whole_struct_or_union_ptr ^= null () then do;
      saved_ptr = s;
      s = print_whole_struct_or_union_ptr;
    end;
  if ((fixed (s -> runtime_symbol.type) = structure_dtype |
       fixed (s -> runtime_symbol.type) = c_enum_dtype |
       fixed (s -> runtime_symbol.type) = c_union_dtype) & P_long_sw)
    then do;
      if (^this_symbol_occupies_storage (addr (P_reference), s)) then do;
	temp_str_1 = temp_str_1 || temp_str_2;
	temp_str_2 = "";
        end;
      call ioa_$ioa_switch (probe_info.output_switch, "^vx ^a {",
	 level_num * 4, temp_str_1);
      if s -> runtime_symbol.son ^= (18)"0"b
	 & fixed (s -> runtime_symbol.type) ^= pointer_dtype
	 & fixed (s -> runtime_symbol.type) ^= c_typeref_dtype
        then
	do q =
	     addrel (s, s -> runtime_symbol.son) /* for our son, and for */
	     repeat nextq /* all his brothers, until */
	     while (q ^= null ());	/* curse PL/I, becasue it lacks do-until */
	call print_member (q, fixed (s -> runtime_symbol.ndims, 6),
	     level_num + 1);
	if q -> runtime_symbol.brother = (18)"0"b
	  then nextq = null ();	/* have reached the end */
	  else nextq = addrel (q, q -> runtime_symbol.brother);
        end;			/* son,sibling loop */

      if P_long_sw
        then
	   call ioa_$ioa_switch (probe_info.output_switch, "  ^vx} ^a",
	        level_num * 4, temp_str_2);
    end;
    else
         call ioa_$ioa_switch (probe_info.output_switch, ioa_str,
	    level_num * 4, temp_str_1, temp_str_2);
  if saved_ptr ^= null ()
    then
         s = saved_ptr;

  end print_member;
%page;
/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

get_c_attr_str:
  proc (sym, p_w_s_o_u_ptr) returns (char (168) varying);

  dcl sym			parameter ptr;
  dcl p_w_s_o_u_ptr		parameter ptr;

  dcl son_of_sym		ptr;
  dcl attr		char (168) varying;
  dcl temp		char (64) varying;
  dcl d_type		fixed bin;
%page;
/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

handle_typeref_or_entry:
  proc (start_ptr, attr);

  dcl start_ptr		parameter ptr;
  dcl attr		char (*) var;
  dcl son_of_sym		ptr;
  dcl temp_ptr		ptr;

  son_of_sym =
       addrel (start_ptr, fixed (start_ptr -> runtime_symbol.son));

  if (fixed (son_of_sym -> runtime_symbol.type) = structure_dtype |
       fixed (son_of_sym -> runtime_symbol.type) = c_enum_dtype |
       fixed (son_of_sym -> runtime_symbol.type) = c_union_dtype)
    then
         next_sym = son_of_sym;
  temp_ptr =
       addrel (son_of_sym, fixed (son_of_sym -> runtime_symbol.name, 1));
  if (substr (temp_ptr -> acc_str.str_name, 1, 1) ^= "!")
    then do;
      attr = " "
	 ||
	 substr (temp_ptr -> acc_str.str_name, 1,
	 temp_ptr -> acc_str.str_len) || " " || attr;
      return;
    end;
  else if (fixed (son_of_sym -> runtime_symbol.type) = structure_dtype)
    then
         attr = " struct " || attr;
  else if (fixed (son_of_sym -> runtime_symbol.type) = c_union_dtype)
    then
         attr = " union " || attr;
  else if (fixed (son_of_sym -> runtime_symbol.type) = c_enum_dtype)
    then
         attr = " enum " || attr;

  p_w_s_o_u_ptr = son_of_sym;

  end handle_typeref_or_entry;
%page;
/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

get_standard_type:

  proc ();

  if d_type = char_dtype
    then
         attr = " char " || attr;
  else if d_type = real_fix_bin_1_uns_dtype
    then
         attr = " unsigned int " || attr;
  else if d_type = real_fix_bin_1_dtype
    then
         attr = " int " || attr;
  else if d_type = real_fix_bin_2_dtype
    then
         attr = " long " || attr;
  else if d_type = real_fix_bin_2_uns_dtype
    then
         attr = " unsigned long " || attr;
  else if d_type = real_flt_bin_1_dtype
    then
         attr = " float " || attr;
  else if d_type = real_flt_bin_2_dtype
    then
         attr = " double " || attr;
  else if d_type = label_dtype
    then
         attr = " label " || attr;
  else if d_type = structure_dtype
    then
         attr = " struct ";
  else if d_type = c_union_dtype
    then
         attr = " union ";
  else if d_type = c_enum_dtype
    then
         attr = " enum ";
  else if d_type = c_enum_const_dtype
    then attr = "";
  else attr = " unknown type " || attr;

  end get_standard_type;
%page;
/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

  d_type = fixed (sym -> runtime_symbol.type);

  attr = "";
  temp = "";

  if d_type = c_typeref_dtype | d_type = ext_entry_runtime_dtype
    then
         call handle_typeref_or_entry (sym, attr);
  else if d_type = pointer_dtype then do;
      attr = "*";
      if sym -> runtime_symbol.son ^= "0"b then do;
	son_of_sym =
	     addrel (sym, fixed (sym -> runtime_symbol.son, 17));
	do while (fixed (son_of_sym -> runtime_symbol.type) = pointer_dtype)
	     ;
	  attr = attr || "*";
	  son_of_sym =
	       addrel (son_of_sym,
	       fixed (son_of_sym -> runtime_symbol.son));
	end;
	d_type = fixed (son_of_sym -> runtime_symbol.type);
	if d_type = ext_entry_runtime_dtype
	  then
	       tackon_parens = "()";
	if d_type = c_typeref_dtype | d_type = ext_entry_runtime_dtype
	  then
	       call handle_typeref_or_entry (son_of_sym, attr);
	  else call get_standard_type ();
        end;
    end;
  else call get_standard_type ();

  return (attr);

  end get_c_attr_str;
%page;
/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

get_c_dims_str:
  proc (P_sym, P_inherited, P_verbose) returns (char (168) varying);

  dcl P_sym		ptr parameter;
  dcl P_inherited		fixed bin parameter;
  dcl P_verbose		bit (1) aligned parameter;

  dcl (add_on, n, i)	fixed bin;
  dcl dims_str		char (168) varying;

  n = fixed (P_sym -> runtime_symbol.ndims, 6);
  if n <= P_inherited
    then dims_str = "";
    else do;
      if P_verbose
        then dims_str = " dimension [";
        else dims_str = " [";
      do i = P_inherited + 1 to n;
        add_on = 1;
        if P_sym -> runtime_symbol.bounds (i).lower ^= 0
	then do;
	  dims_str =
	       dims_str
	       || value (P_sym -> runtime_symbol.bounds (i).lower, P_sym);
	  dims_str = dims_str || ":";
	  add_on = 0;
	end;
        dims_str =
	   dims_str
	   ||
	   value (P_sym -> runtime_symbol.bounds (i).upper + add_on, P_sym);
				/* add 1 because C starts with 0 as lower bound */
        if i < n			/* more to come */
	then dims_str = dims_str || "][";
      end;			/* dims loop */
      dims_str = dims_str || "]";
    end;

  return (dims_str);
  end get_c_dims_str;
%page;
/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

get_c_class_str:
  proc (symb) returns (char (*) var);

  dcl symb		ptr parameter;
  dcl c			fixed bin;/* the class */

  c = fixed (symb -> runtime_symbol.address.class);
  if c = 4
    then return (" internal static");
  else if c = 5
    then return (" external static");
  else if c = 12 | c = 13
    then return (" constant");
  return ("");

  end get_c_class_str;
%page;
/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

value:
  procedure (ev, context) returns (character (10) varying);

  dcl ev			fixed bin (35) parameter;
				/* input: an encoded value */
  dcl context		ptr parameter;
				/* input: to symbol node of ev */

  dcl val			fixed bin (35);
  dcl 1 an_ev		aligned like encoded_value;
  dcl refp		ptr;	/* to data itself, for decoding */
  dcl block_ptr		ptr;
  dcl stack_ptr		ptr;
  dcl linkage_ptr		ptr;
  dcl code		fixed bin (35);
  dcl (char, ltrim, rtrim, string, unspec)
			builtin;

  dcl stu_$decode_runtime_value
			entry (fixed bin (35), ptr, ptr, ptr, ptr, ptr,
			fixed bin (35)) returns (fixed bin (35));

  /* GLOBAL imports P_reference */

  string (an_ev) = unspec (ev);
  if an_ev.flag = "10"b
    then do;			/* it is encoded */
      stack_ptr = P_reference.source_info_ptr -> source_info.stack_ptr;
      linkage_ptr =
	 P_reference.source_info_ptr -> source_info.seg_info_ptr
	 -> seg_info.linkage_ptr;
      block_ptr = P_reference.source_info_ptr -> source_info.block_ptr;
      refp = P_reference.address_ptr;
      val = stu_$decode_runtime_value (ev, block_ptr, stack_ptr, linkage_ptr,
	 block_ptr, refp, code);
      if code ^= 0
        then
	   return ("*");
    end;
    else val = ev;

  return (rtrim (ltrim (char (val))));

  end value;
%page;
/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
%include probe_info;
%page;
%include probe_source_info;
%page;
%include probe_seg_info;
%page;
%include probe_references;
%page;
%include std_descriptor_types;
%page;
%include runtime_symbol;
%page;

  end probe_print_c_attr_;
