/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(87-04-15,RWaters), approve(87-04-15,MCR7635), audit(87-04-28,Huen),
     install(87-05-21,MR12.1-1033):
     Fix bug #2144
  2) change(89-02-28,RWaters), approve(89-02-28,MCR8068), audit(89-09-07,Vu),
     install(89-09-19,MR12.3-1068):
     Fix bugs 1737 & 1873
  3) change(90-08-30,Huen), approve(90-08-30,MCR8160),
     audit(90-09-07,Zimmerman), install(90-10-17,MR12.4-1046):
     pl1_2221: Fix the PL1 compiler to not complain about constant symbols that
     are actually legal.
  4) change(90-10-17,Gray), approve(90-10-17,MCR8160), audit(90-10-19,Schroth),
     install(90-10-25,MR12.4-1049):
     Modified to only validate constants for symbols declared by dcl statement.
                                                   END HISTORY COMMENTS */

/* format: style3,^indattr,ifthendo,ifthen,^indnoniterdo,indproc,^elsestmt,dclind9,idind23 */
validate:
     proc (sp);

/* Modified 780314 by PG to fix 1673 (don't default constants unless default statement explicitly touches constants)
	and to print error 206 only if none of the attribute sets are consistent.
   Modified 780629 by PG for unsigned
   Modified 780712 by PG to diagnose liking to a structure containing refer extents
   Modified 780725 by PG to move responsibility for setting the aliasable bit to declare and declare_structure.
   Modified 780731 by PG to use adam to determine storage class.
   Modified 780927 by PCK to flag the use of unaligned decimal for Release 24 of PL/I
   Modified 790521 by RAB to complete the implementation of multiple
	attribute sets for default statements started on 780314.
  Modified 830427 by BIM for options (packed) for pointers.
  Modified 860618 by RW to diagnose "dcl z varying" as incorrect
  Modified 890202 by RW "constant" attribute only on files and entries,
     	duplicate parameter dcls only diagnosed once

*/

/* parameters */

dcl      sp pointer parameter;

/* automatic */

dcl      (adam, s, b, d, ds) ptr;
dcl      m fixed bin (15);
dcl      (n, minimum, maximum) fixed bin (31);
dcl      1 invalid aligned like symbol.attributes;
dcl      (invalid_attribute_set, valid_attribute_set, return_parameter, created_descriptor) bit (1) aligned;

/* external static */

dcl      pl1_stat_$check_ansi bit (1) aligned ext static;
dcl      pl1_stat_$unaligned_dec bit (1) aligned ext static;

/* builtins */

dcl      (binary, hbound, index, lbound, length, null, string, substr, unspec) builtin;

/* program */

	s = sp;

/* Since the storage class has not been propagated down at this time for members of
   structures, get a pointer to the level-1 symbol node ("adam") which contains the
   storage class of the structure.  (Which itself may not have been set for parameters...) */

	do adam = s repeat (adam -> symbol.father) while (adam -> symbol.father ^= null);
	end;

/* Prevent the descriptor for parameters of internal procedures from being defaulted */

	created_descriptor = adam -> symbol.parameter & adam -> symbol.param_desc;

	if created_descriptor then
	     s -> symbol.param_desc = "0"b;

	if s -> symbol.level = 0 & s -> symbol.member then do;
	     call print (113);
	     s -> symbol.member = "0"b;
	end;

	if adam -> symbol.parameter & s -> symbol.location = 0
	     & ^(s -> symbol.member | s -> symbol.dcl_type = by_compiler) then do;

/* parameter attribute but not a parameter */
	     if s -> symbol.token -> token.declaration -> symbol.location = 0 then
		call print (97);			/* else it is just a duplicate declaration, diagnose it later */

	end;

	if (s -> symbol.level > 1 | s -> symbol.member) & s -> symbol.father = null then do;
	     call print (212);
	     s -> symbol.level = 0;
	     s -> symbol.member = "0"b;
	end;

/* Diagnose an invalid attribute set. */

	invalid = inconsistent (s -> symbol.attributes);

	if string (invalid) ^= ""b then do;
	     m = 200;
	     if s -> symbol.external & string (adam -> symbol.storage_class) ^= "0"b
		& ^(adam -> symbol.static | adam -> symbol.constant | adam -> symbol.controlled) then
		m = 218;

	     if s -> symbol.varying & string (s -> symbol.data_type) ^= "0"b & ^(s -> symbol.bit | s -> symbol.char)
		then
		m = 219;

	     if s -> symbol.initialed & (adam -> symbol.parameter | adam -> symbol.param_desc | adam -> symbol.defined)
		then
		m = 220;

	     if s -> symbol.member & string (s -> symbol.storage_class) ^= ""b then
		m = 210;
	end;
	else
	     m = 0;

	if m ^= 0 then do;
	     call print (m);
	     string (s -> symbol.attributes) = string (s -> symbol.attributes) & ^string (invalid);
	end;

	call check_extent_type;

/* Prevent the return value from being defaulted. */

	return_parameter =
	     s -> symbol.parameter & ^created_descriptor & s -> symbol.level < 2 & s -> symbol.dcl_type = by_compiler;
	if return_parameter then do;
	     s -> symbol.parameter = "0"b;
	     s -> symbol.return_value = "1"b;
	end;

/* Apply the defaults */

	if ^adam -> symbol.temporary then
	     do b = s -> symbol.block_node repeat b -> block.father while (b ^= null);
		do d = b -> block.default repeat d -> default.next while (d ^= null);
		     if d -> default.no_defaults then
			go to develop;

		     valid_attribute_set, invalid_attribute_set = "0"b;
		     if d -> default.system then
			call system;
		     else if evaluate (d, s, adam, (d -> default.predicate)) then
			if d -> default.error then
			     call print (211);
			else
			     do ds = d -> default.symbol repeat ds -> symbol.next while (ds ^= null);
				string (invalid) =
				     string (s -> symbol.attributes) | string (ds -> symbol.attributes);
				invalid = inconsistent (invalid);

				if string (invalid) ^= ""b then
				     invalid_attribute_set = "1"b;
				else if merge_attributes (s, ds) /* merge default symbol attributes into s */ then
				     invalid_attribute_set = "1"b;
				else do;
				     s -> symbol.defaulted = "1"b;
				     valid_attribute_set = "1"b;
				end;
			     end;

		     if invalid_attribute_set /* None of the attribute sets could be applied. */
			& ^valid_attribute_set then
			call print (206);
		end;
	     end;

	call system;

/* now check that the automagickly supplied attributes still match the 
 * declared attributes
 * diagnose this: dcl x fixed bin constant
 */

	if adam -> symbol.constant & adam -> symbol.dcl_type = by_declare & ^(s -> symbol.file | s -> symbol.entry) then do;
	     call print (200);
	     s -> symbol.constant = "0"b;		/* lets do it all again to get the defaults right this time. */
	     call validate (s);
	end;

/* These errors might result from supplying the system defaults.  */

	call check_extent_type;

/* Restore the attributes modified above. */

develop:
	if created_descriptor then do;
	     s -> symbol.parameter = "0"b;
	     s -> symbol.param_desc = "1"b;
	end;

	if return_parameter then do;
	     s -> symbol.parameter = "1"b;
	     s -> symbol.return_value = "0"b;
	end;

/* remove wart -- entry() caused a dummy list to be attached to symbol.general to prevent defaulting */

	if s -> symbol.entry then
	     if s -> symbol.general ^= null then
		if s -> symbol.general -> list.number = 0 then
		     s -> symbol.general = null;

/* Check for completed attributes and prevent faults if they are not complete */

	m = 0;
	if s -> symbol.returns then
	     if s -> symbol.dcl_size = null then do;
		call print (279);
		s -> symbol.returns = "0"b;
	     end;
	if s -> symbol.dimensioned then
	     if s -> symbol.array = null then do;
		call print (280);
		s -> symbol.dimensioned = "0"b;
	     end;
	if s -> symbol.picture then
	     if s -> symbol.general = null then do;
		call print (281);
		s -> symbol.picture = "0"b;
	     end;
	if s -> symbol.position then
	     if s -> symbol.initial = null then do;
		call print (282);
		s -> symbol.position = "0"b;
	     end;
	if s -> symbol.initialed then
	     if s -> symbol.initial = null then do;
		call print (283);
		s -> symbol.alloc_in_text, s -> symbol.initialed = "0"b;
	     end;
	if s -> symbol.generic then
	     if s -> symbol.general = null then do;
		m = 284;
		s -> symbol.generic = "0"b;
	     end;
	if s -> symbol.environment then
	     if ^s -> symbol.interactive & ^s -> symbol.stringvalue then
		m = 285;
	if s -> symbol.options then
	     if ^s -> symbol.variable_arg_list & ^s -> symbol.alloc_in_text & ^s -> symbol.explicit_packed then do;
		m = 498;
		s -> symbol.options = "0"b;
	     end;
	if s -> symbol.alloc_in_text then do;
	     if pl1_stat_$check_ansi then
		call print (349);

	     if ^(s -> symbol.internal & adam -> symbol.static & (s -> symbol.structure | s -> symbol.initialed))
	     then do;
		m = 482;
		s -> symbol.alloc_in_text = "0"b;
	     end;
	end;
	if m ^= 0 then
	     call print (m);

/* check for nonstandard constructs */

	if pl1_stat_$check_ansi then do;
	     if s -> symbol.external then
		if index (s -> symbol.token -> token.string, "$") ^= 0 then
		     call print (8);
	     if adam -> symbol.param_desc & s -> symbol.local then
		call print (353);
	end;

/* check for the unaligned and decimal attributes so that the user can be warned of an implementation change for Release 25 */

	if s -> symbol.unaligned & s -> symbol.decimal & ^s -> symbol.temporary then
	     pl1_stat_$unaligned_dec = "1"b;

/* develop the packed bit.	*/

	if (s -> symbol.fixed | s -> symbol.float | s -> symbol.char | s -> symbol.bit | s -> symbol.picture
	     | s -> symbol.ptr) & s -> symbol.unaligned then
	     s -> symbol.packed = "1"b;

/* check the declared precision	*/

	if s -> symbol.fixed | s -> symbol.float then do;
	     if s -> symbol.decimal then
		n = max_p_dec;
	     else if s -> symbol.fixed then
		n = max_p_fix_bin_2;
	     else
		n = max_p_flt_bin_2;

	     if s -> symbol.c_dcl_size > n then do;
		call print (201);
		s -> symbol.c_dcl_size = n;
	     end;					/*
 NOTE: neither of the following 2 tests will ever be true, as a too 
large or too small of scale NEVER occures. Scale is fixed bin (7) and can
never have a too big of number to fit in it.  These tests have
therefore been moved to get_scale(), which is found in
attribute_parse.pl1
RW 89
*/
						/*
*	     if s -> symbol.scale < min_scale then do;
*		call print (222);
*		s -> symbol.scale = min_scale;
*	     end;
*	     if s -> symbol.scale > max_scale then do;
*		call print (222);
*		s -> symbol.scale = max_scale;
*	     end;
*/
	     s -> symbol.precision = "1"b;
	     return;
	end;

/* check the size of areas and strings.	*/

	minimum = 0;
	if s -> symbol.char then
	     maximum = max_char_string;
	else if s -> symbol.bit then
	     maximum = max_bit_string;
	else if s -> symbol.area then do;
	     maximum = max_area_size;
	     minimum = min_area_size;
	end;
	else
	     return;

	d = s -> symbol.dcl_size;
	if d = null then
	     return;				/* should emit error message about incomplete attribute set */
	if d -> node.type ^= token_node then
	     return;
	if d -> token.type ^= dec_integer then
	     return;
	n = token_to_binary (d);

	if n > maximum then do;
	     call print (205);
	     n = maximum;
	end;

	if n < minimum then do;
	     call print (204);
	     n = minimum;
	end;

	s -> symbol.dcl_size = null;
	s -> symbol.c_dcl_size = n;
	return;

check_extent_type:
     procedure ();

	m = 0;
	if s -> symbol.star_extents
	     & ^(adam -> symbol.parameter | adam -> symbol.param_desc | adam -> symbol.return_value) then
	     m = 215;

	if s -> symbol.refer_extents & ^adam -> symbol.based & string (adam -> symbol.storage_class) ^= "0"b then
	     m = 217;

	if s -> symbol.exp_extents & (adam -> symbol.parameter | adam -> symbol.param_desc | adam -> symbol.static) then
	     m = 216;

/* Check to avoid parsing ` dcl x varying; ' without a diagnostic.
	   Since this is called twice, check data type to avoid printing 
	   out error two times */
	if s -> symbol.varying & string (s -> symbol.data_type) ^= "0"b & ^(s -> symbol.bit | s -> symbol.char) then
	     m = 219;

	if m ^= 0 then
	     call print (m);

     end /* check_extent_type */;

/* subroutine to print an error message.	*/

print:
     proc (m);

dcl      m fixed bin (15) parameter;

	call semantic_translator$error (m, s);

     end;

/* subroutine to check string(symbol.attributes) for inconsistency */

inconsistent:
     procedure (bv_attributes) returns (1 aligned like symbol.attributes);

/* parameters */

dcl      1 bv_attributes aligned like symbol.attributes;

/* automatic */

dcl      1 a aligned like symbol.attributes,
         1 b aligned like symbol.attributes;
dcl      i fixed bin;

/* program */

	string (a) = string (bv_attributes);
	string (b) = ""b;

	do i = lbound (incompatable, 1) to hbound (incompatable, 1);
	     if substr (string (a), i, 1) then
		string (b) = string (b) | (string (a) & incompatable (i));
	end;

	return (b);

     end inconsistent;

/* subroutine to evaluate the predicate of a default statement */

evaluate:
     procedure (d, bv_s, bv_adam, e) returns (bit (1) aligned);

/* parameters */

dcl      (d, bv_s, bv_adam, e) ptr parameter;

/* automatic */

dcl      (adam, r, s, t) ptr;
dcl      (i, letterx, n) fixed bin;
dcl      m fixed bin (15);
dcl      c char (1);
dcl      v (2:3) bit (1) aligned;
dcl      ident (2) char (256) varying;
dcl      word char (11);

/* program */

	s = bv_s;
	adam = bv_adam;
	if e = null then
	     go to fail;
	if e -> node.type = token_node then do;
	     word = e -> token.string;
	     letterx = binary (unspec (substr (word, 1, 1)), 9);
	     do i = index_given_letter (letterx) by 1 while (keyword (i) < word);
	     end;
	     if keyword (i) ^= word then
		go to err2;

	     return (substr (string (s -> symbol.attributes), bit_index (i), 1));
	end;

	if e -> node.type = operator_node then do;
	     n = e -> operator.number;
	     if n > 3 | n < 2 then
		go to err1;
	     do i = 2 to n;
		v (i) = evaluate (d, s, adam, (e -> operand (i)));
	     end;
	     if e -> operator.op_code = or_bits then
		return (v (2) | v (3));
	     if e -> operator.op_code = and_bits then
		return (v (2) & v (3));
	     if e -> operator.op_code = not_bits then
		return (^v (2));
	     go to err1;
	end;
	if e -> node.type ^= reference_node then
	     go to err2;
	if e -> reference.symbol -> token.string ^= "range" then
	     go to err2;
	r = e -> reference.offset;
	if r = null then
	     go to err2;
	if r -> node.type ^= list_node then
	     go to err2;
	n = r -> list.number;
	if n > 2 then
	     go to err0;
	if adam -> symbol.param_desc | adam -> symbol.return_value then
	     go to fail;
	if adam -> symbol.constant & ^(s -> symbol.file | s -> symbol.entry) then
	     go to fail;

	do i = 1 to n;
	     if r -> element (i) -> node.type ^= token_node then
		go to err2;
	     ident (i) = r -> element (i) -> token.string;
	end;

	t = s -> symbol.token;

	if n = 1 then do;
	     if t -> token.size < length (ident (1)) then
		go to fail;
	     if ident (1) = "*" then
		go to exit;
	     if substr (t -> token.string, 1, length (ident (1))) ^= ident (1) then
		go to fail;
	     go to exit;
	end;
	else do;
	     if length (ident (1)) ^= 1 then
		go to err0;
	     if length (ident (2)) ^= 1 then
		go to err0;
	     c = t -> token.string;
	     if c < ident (2) | c > ident (1) then
		go to fail;
	     go to exit;
	end;

/* error conditions detected during predicate evaluation. */


err0:
	m = 207;					/* range operand syntax error	*/
	go to print;
err1:
	m = 208;					/* operator is not boolean		*/
	go to print;
err2:
	m = 209;					/* illegal operand in predicate	*/


/* error print and recovery routine */

print:
	call error_$no_text (m, d -> default.source_id, null);
	d -> default.predicate = null;
fail:
	return ("0"b);
exit:
	return ("1"b);

     end evaluate;

system:
     proc;

/* check for nonstandard defaults */

	if pl1_stat_$check_ansi then
	     if (s -> symbol.variable_arg_list & ^s -> symbol.entry) | (s -> symbol.environment & ^s -> symbol.file)
		then
		call print (126);

/* entry defaults	*/

	if s -> symbol.returns | s -> symbol.reducible | s -> symbol.irreducible | s -> symbol.variable_arg_list then
	     s -> symbol.entry = "1"b;

	if s -> symbol.entry then
	     s -> symbol.irreducible = ^s -> symbol.reducible;

/* file defaults	*/

	if string (s -> symbol.file_attributes) then
	     s -> symbol.file = "1"b;

/* arithmetic defaults */

	if ^s -> symbol.constant then do;
	     if string (s -> symbol.data_type) = "0"b then
		s -> symbol.fixed = "1"b;
	     if s -> symbol.fixed | s -> symbol.float then do;

/* arithmetic defaults for variables */

		s -> symbol.binary = ^s -> symbol.decimal;
		s -> symbol.real = ^s -> symbol.complex;
		if s -> symbol.c_dcl_size = 0 then
		     if s -> symbol.fixed then
			if s -> symbol.binary then
			     s -> symbol.c_dcl_size = default_fix_bin_p;
			else
			     s -> symbol.c_dcl_size = default_fix_dec_p;
		     else if s -> symbol.binary then
			s -> symbol.c_dcl_size = default_flt_bin_p;
		     else
			s -> symbol.c_dcl_size = default_flt_dec_p;
	     end;
	     else if (s -> symbol.bit | s -> symbol.char) then do;

/* string defaults for variables */

		s -> symbol.non_varying = ^s -> symbol.varying;
		if s -> symbol.dcl_size = null then
		     if s -> symbol.c_dcl_size = 0 then
			s -> symbol.c_dcl_size = 1;
	     end;
	end;

/* area defaults  */

	if s -> symbol.area then
	     if s -> symbol.dcl_size = null then
		if s -> symbol.c_dcl_size = 0 then
		     s -> symbol.c_dcl_size = default_area_size;

/* scope class defaults	*/

	if s -> symbol.file | s -> symbol.entry then
	     if substr (string (s -> symbol.storage_class), 1, 7) | s -> symbol.member | s -> symbol.aligned
		| s -> symbol.unaligned | s -> symbol.initialed | s -> symbol.return_value then
		s -> symbol.variable = "1"b;

	if ^s -> symbol.variable then
	     if (s -> symbol.entry | s -> symbol.file) then
		s -> symbol.constant = "1"b;

	if s -> symbol.condition then
	     s -> symbol.external, s -> symbol.auto = "1"b;

	s -> symbol.variable =
	     ^s -> symbol.constant & ^(s -> symbol.builtin | s -> symbol.condition | s -> symbol.generic);

	if ((s -> symbol.file | s -> symbol.entry) & s -> symbol.constant & ^s -> symbol.internal) then
	     s -> symbol.external = "1"b;

	s -> symbol.internal = ^s -> symbol.external;

	if s -> symbol.variable & s -> symbol.external & ^s -> symbol.controlled then
	     s -> symbol.static = "1"b;

	if ^(s -> symbol.builtin | s -> symbol.condition | s -> symbol.generic | s -> symbol.member) then
	     if string (s -> symbol.storage_class) = "0"b then
		s -> symbol.auto = "1"b;

/* storage alignment and packing defaults */

	if (s -> symbol.char | s -> symbol.bit | s -> symbol.picture | s -> symbol.structure)
	     & ^(s -> symbol.aligned | s -> symbol.varying) then
	     s -> symbol.unaligned = "1"b;

	s -> symbol.aligned = ^s -> symbol.unaligned;

	if (s -> symbol.fixed | s -> symbol.float) & ^(s -> symbol.signed | s -> symbol.unsigned | s -> symbol.constant)
	     then
	     s -> symbol.signed = "1"b;

     end system;

/* include files */

%include semant;
%include default;
%include symbol;
%include symbol_bits;
%include reference;
%include operator;
%include token;
%include token_types;
%include list;
%include block;
%include op_codes;
%include nodes;
%include system;
%include pl1_attribute_table;
%include declare_type;
     end;
