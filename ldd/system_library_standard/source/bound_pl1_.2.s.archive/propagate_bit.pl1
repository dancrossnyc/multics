/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


propagate_bit:	proc(sym,number);

/* Modified 780616 by PG for unsigned */
/* Modified Dec 1978 by DS for new cross-ref 'set' format */

/* parameters */

dcl (	sym ptr,
	number fixed bin (15)) parameter;

/* automatic */

dcl	(p, r) ptr;

/* builtins */

dcl	(null, string, substr) builtin;

/* include files */

%include symbol;
%include symbol_bits;
%include cross_reference;

/* program */

	if sym->symbol.temporary then return;

	p = sym;

	if number = set_bit				/* Set gets propagated to ancestors as well */
	then do;
		r = p -> symbol.cross_references;
		if r ^= null then r -> cross_reference.set_reference = "1"b;
						/* r = null means symbol is compiler-developed */
						/* Support new 'set' format in listing */
		r = p;
		do while(r->symbol.father^=null);
			r=r->symbol.father;
			substr(string(r->symbol.attributes),number,1) = "1"b;
		end;
	end;
	else if substr (string (p->symbol.attributes), number, 1)
	     then return;

	substr(string(p->symbol.attributes),number,1) = "1"b;
	if p->symbol.son^=null
	then call propagate((p->symbol.son));

propagate:	proc(p);

dcl	p ptr unal,
	q ptr;

	q = p;

	do while(q^=null);
		substr(string(q->symbol.attributes),number,1) = "1"b;

		if q->symbol.son^=null
		then call propagate(q->symbol.son);

		q = q->symbol.brother;
	end;

	end propagate;

     end /* propagate_bit */;
