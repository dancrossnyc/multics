/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


io_data_list_semantics:proc(b,s_param,t_param);

/* updated 12-11-72 by PAB to make way for pictures */
/* Modified 780616 by PG for unsigned */
/* Modified Dec 1978 by David Spector for new 'set' xref format */




	dcl (trans_op,format_op) bit(9) aligned;	/* particular transmission operator */
	dcl  context_with_top_bit_on bit(36) init("000001000000000000000000000000000000"b)
		internal static options(constant) aligned;
	dcl decode_complex_fun(2) bit(9) aligned init(real_fun,imag_fun);

	dcl p_str char(256) varying aligned;
	dcl prefix bit(12) aligned;
	dcl (p,q,r,s,tt,tp,jp,op,bx,vp,pa_ptr,rr,pp,wp,vs,uncomplex_temp,format_ptr,length_ptr,ip,c_format_ptr,q2,
	     loop_ptr) ptr;

	dcl ctl_pointer(64) ptr unaligned;

	dcl 1 format_list_ptr_table(64) aligned,
	     2 it_factor fixed bin(31),
	     2 f_ptr pointer unaligned;
	dcl (nss,ri,sy) ptr;
	dcl (i,j,ki,k,n,constant_operands,pti,ctli,wi,si,de,pa_opnum,
	peti,first_peti,op_num,var_cnt,num_eaten,data_item_index,cur_rep,ctl_cnt) fixed bin(15) ;
	dcl c_length fixed bin (31);
	dcl bbin35 fixed bin(35) based;
	dcl (null,string,substr,hbound) builtin;
	dcl pl1_stat_$ok_list ptr external;
	dcl (get_of_noncomputational,data_format_found) bit(1) aligned ;
	dcl no_quick_edit bit(1) aligned init("0"b);	/* flag to disqualify put_edit_trans's from becoming put_fields */
	dcl (b,s_param,t_param) ptr;
	dcl t ptr;
	dcl (flt,fltt) ptr;
	dcl (fop,pa_type) bit(9) aligned;


/* program */

	s=s_param;
	prefix=s->statement.prefix;
	t=t_param;
	nss=s->statement.next;
	trans_op=t->operator.op_code;
	jp=t->operator.operand(1);

	if trans_op=get_data_trans then goto get_data_;

	if trans_op=get_edit_trans then goto edit_loop_;
	if trans_op=put_edit_trans then goto edit_loop_;

	if jp=null
	then	if trans_op=put_data_trans
		then	do;
			bx=b;
			     do while(bx^=null);
			     bx->block.get_data="1"b;	/* this means put block in S.T. */
			     bx=bx->block.father;
			     end;
			end;
		else;
	else call io_join_semantics(jp);

exit:	return;

edit_loop_:



	r=create_statement(assignment_statement,(nss->statement.back),null,prefix);
	/* make a format statement,
	   set PS.newformat and set PS.special_list_p=addr(format) */

	if b->block.plio_ps->list.element(32) =  null 	/* ps.new_format is unique in that both compiled 	*/
	then do;					/* code and plio runtime touch it.  Therefore we 	*/
		tt=create_symbol(null,null,by_compiler);/* cant let the optim. remove apparently redundent*/
		tt->symbol.binary,			/* assgnmts to it in the code.  To do this we	*/
		tt->symbol.fixed,			/* create a dummy symbol defined on it,thereby	*/
		tt->symbol.aligned,			/* making ps.new_format aliasable and hence	*/
		tt->symbol.overlayed,		/* unoptimizable.				*/
		tt->symbol.aliasable,
		tt->symbol.defined="1"b;
		tt->symbol.c_dcl_size=15;
		call declare(tt);

		rr=tt->symbol.reference;
		rr->reference.units=word_;
		rr->reference.c_offset=30;
		rr->reference.qualifier=copy_expression((b->block.plio_ps->list.element(1)->symbol.reference));
		b->block.plio_ps->list.element(32)=rr;
	end;

	r->statement.processed,r->statement.generated="1"b;

		r->statement.root,tt=create_operator(join,2);
			op,tt->operator.operand(1)=create_operator(assign,2);
			op->operator.operand(2)=declare_constant$integer(1);
			op->operator.operand(1)=b->block.plio_ps->list.element(ps_new_format+2);

			op,tt->operator.operand(2)=create_operator(assign,2);
			op->operator.operand(1)=b->block.plio_ps->list.element(ps_special_list+2);
			q,op->operator.operand(2)=create_operator(addr_fun,2);
			q->operator.operand(1)=declare_temporary(pointer_type,0,0,null);
			r=create_statement(format_statement,(nss->statement.back),null,prefix);
			r->statement.processed,r->statement.generated="1"b;
			tp=create_symbol(b,null,by_compiler);
			tp->symbol.constant,tp->symbol.format="1"b;
			tp->symbol.initial=r;	/* points at the format statement */
			q->operator.operand(2)=tp->symbol.reference;
			tp,r->statement.root=t->operator.operand(2);	/* format list */
			call io_data_list_semantics$format_list_semantics(b,r,tp);



	call io_join_semantics(jp);


end_edit_loop_:
	if trans_op=put_edit_trans	/* try to replace slow put_edit_tras with fast put_fields	*/
	then if ^no_quick_edit then do;
		pti = 0;
		call format_list_process(tp);	/* which builds an array of simple  format items	*/
		goto make_quick_puts;	/* which replace the put_edit_tras	*/
		end;
punt:
exit_2:
	if t->operator.operand(3)=null  then goto exit;
	t=t->operator.operand(3);		/* next (DL)(FL) pair */
	jp=t->operator.operand(1);
	goto edit_loop_;

/*  */
/*  This block of code creates a series of put_fields and put_field_chks instead of the orig. put_edit_tras */


make_quick_puts:

string(context) = "0"b;

r->statement.next->statement.root = expression_semantics(b,s_param,(r->statement.next->statement.root),context);

jp = r->statement.next->statement.root;

if jp->operator.op_code = join
then var_cnt = jp->operator.number;
else var_cnt = 1;

cur_rep = 0;
ctl_cnt = 0;
peti = 0;
data_format_found = "0"b;
do data_item_index = 1 to var_cnt;

next_format:
	call get_next_format;	/* this subroutine sets format_op */
	if format_op >= x_format
	then if format_op <= line_format
	     then do;
		ctl_cnt = ctl_cnt+1;
		if ctl_cnt>64 then goto punt;
		goto next_format;
		end;

	data_format_found = "1"b;
	ctl_cnt = 0;
	if jp->operator.op_code=join	/* jp points to the root of the ass. stat. after the format stat */
	then vp = jp->operand(data_item_index);
	else vp = jp;

	if vp->node.type ^= operator_node
	then goto err495;

	if vp->operator.op_code ^= put_edit_trans
	then do;
		if vp->operator.op_code = do_fun
		then goto punt;	/* an implied do-loop was here */
		if vp->operator.op_code = join
		then goto punt;	/* a structure was found here	*/
				/* maybe can be handled in future,one problem */
				/* is knowing length of output of conversion */

		if vp->operator.op_code = loop
		then do;	/* an array was expanded here	*/

			num_eaten = expand_loop_set_ptr(vp,vp,ip); /* the ip arg is a dummy, we dont use it here */
			first_peti = peti;
			do i = 1 to (num_eaten-1);
				call get_next_format;
				if format_list_ptr_table(first_peti).f_ptr ^=
				   format_list_ptr_table(peti).f_ptr
				then if ^compare_format((format_list_ptr_table(first_peti).f_ptr),
					(format_list_ptr_table(peti).f_ptr))
					then goto punt;	/* not all conversions for this item = */
				end;
		  	end;
		else goto err495;
		end;
	end;
cur_rep = 0;
ctl_cnt = 0;
peti = 0;
do data_item_index = 1 to var_cnt;

next_format_this_data_item:

	call get_next_format;
	op_num = format_ptr->operator.number;
	if format_op = skip_format
	then	ctli = 1;
	else	if format_op = column_format
		then	ctli = 2;
		else	if format_op = page_format
			then	ctli = 3;
			else 	if format_op = line_format
				then	ctli = 4;
				else	if format_op = x_format	/* I treat it as a control format */
					then ctli = 5;
					else ctli = 0;	/* not a control format */

	if ctli>0
	then do;
	     pp = create_operator(put_control,2);
	     pp->operand(1) = declare_constant$integer((ctli));
	     if op_num > 2
	     then pp->operand(2)=copy_unique_expression((format_ptr->operand(3)));
	     else pp->operand(2)=declare_constant$integer(1);	/* we'll be safe but some error checking could be done here	*/
	     ctl_cnt = ctl_cnt + 1;
	     ctl_pointer(ctl_cnt) = pp;
	     goto next_format_this_data_item;
	     end;

	else do;

		do op_num = op_num repeat op_num-1 while (format_ptr->operand(op_num) = null);
		     end;		/* treat null operands as if they dont exist & apply the defaults	*/
		if jp->operator.op_code=join	/* jp points to the root of the ass. stat. after the format stat */
		then do;
		     pa_type = operator_node;
		     pa_opnum = data_item_index;
		     pa_ptr = jp;
		     ip = jp->operand(data_item_index);
		     end;
		else do;
		     pa_type = statement_node;
		     pa_ptr = r->statement.next;
		     ip = jp;
		     end;

		if ip->operator.op_code = put_edit_trans
		then do;
		     vp = ip->operand(2);
		     loop_ptr = null;
		     end;
		else do;	/* we have a loop operator here,meaning an array */
		     num_eaten = expand_loop_set_ptr(ip,vp,loop_ptr);
		     do i = 1 to (num_eaten-1);
			call get_next_format;
			end;
		     end;

		if format_op = a_format
		|  format_op = b_format
		then 	do;

			if format_op=a_format
			then pp = vp;
			else pp= convert$from_builtin(vp,bit_type);	/* convert the string to bits */
			p = create_operator(put_field,2);

			if op_num > 2  	/* means there is a length given	*/
			then do;
				if format_ptr->operand(3)->node.type = reference_node
				then if format_ptr->operand(3)->reference.symbol->symbol.constant
				     then do;	/* declare the temporary with this constant length */
					c_length = format_ptr->operand(3)->reference.symbol->symbol.initial->bbin35;
					length_ptr = null;	/* no dcl_size if there is a c_dcl_size */
					goto lengths_set;
					end;

				/* needs a dcl_size & a c_dcl_size of zero */
				c_length = 0;
				length_ptr = copy_unique_expression((format_ptr->operand(3)));
		lengths_set:
				p->operand(2) = convert$to_target_fb(pp,declare_temporary(char_type,
					      c_length,0,length_ptr));
				end;	/* the target temp. assignment does the check for size cond. */
			else p->operand(2) = convert$from_builtin(pp,char_type); /* no length, no check */

			if p->operand(2)->node.type=operator_node
			then pp = p->operand(2)->operand(1);
			else pp = p->operand(2);

			if op_num > 2
			then if length_ptr = null
			     then wp = format_ptr->operand(3);	/* just use op(3) for width */
			     else wp = share_expression(length_ptr);
			else if pp->reference.varying_ref
			     then do;
				wp = create_operator(length_fun,2);
				wp->operand(1) = declare_temporary(integer_type,max_length_precision,
						0,null);
				wp->operand(2) = share_expression((p->operand(2)));
				end;
			     else if pp->reference.length = null /* use ref length */
				then wp = declare_constant$integer((pp->reference.c_length));
				else wp = share_expression((pp->reference.length));
			p->operand(1) = wp;	/* op(1) of put_field is length of output string */
			end;

		else	if ^pef_format(vp)		/* must be complex (c_format) format item */
			then do;
				if vp->node.type = operator_node
				then vs = vp->operand(1)->reference.symbol;
				else vs = vp->reference.symbol;
				c_format_ptr = format_ptr;
				wp = create_operator(join,2);
				if vs->symbol.complex 
				then do;
					uncomplex_temp = declare_temporary(substr(string(vs->symbol.attributes),1,36)
						       & ^unaligned_mask & ^complex_mask | aligned_mask | real_mask,
						       (vs->symbol.c_dcl_size), (vs->symbol.scale), null);
					do j = 1 to 2;
					     call get_next_part_of_cplx_format(j+2);
					     q = create_operator(decode_complex_fun(j),2);
					     q->operator.processed = "1"b;
					     q->operand(1) = uncomplex_temp;
					     if j = 1
					     then q->operand(2) = vp;
					     else q->operand(2) = share_expression(vp);
					     if ^pef_format(q)
					     then goto err170;
					     wp->operand(j) = p;
					     end;
					end;

				else if vs->symbol.char
				then do j = 1 to 2;
					/* The point of this code is to change the temp on the LHS */
					/* of the bottom assign_op to a complex version of itself, and */
					/* to insert a real or imag operator above that assign_op, */
					/* with the old version of the temp on it's LHS	*/
					call get_next_part_of_cplx_format(j+2);
					if j = 1
					then if ^pef_format(vp)
					     then goto err170;
					     else;
					else if ^pef_format(share_expression(vp))
					     then goto err170;
					q = p->operand(2)->operand(2)->operand(1);
					p->operand(2)->operand(2)->operand(1) = force_cplx_temp(q);
					q2 = create_operator(decode_complex_fun(j),2);
					q2->operator.processed = "1"b;
					q2->operand(1) = q;
					q2->operand(2) = p->operand(2)->operand(2);
					p->operand(2)->operand(2) = q2;
					wp->operand(j) = p;
					end;

				else do;
					call get_next_part_of_cplx_format(3);
					if ^pef_format(vp) then goto err170;
					wp->operand(1) = p;
					call get_next_part_of_cplx_format(4);
					if ^pef_format(create_token("0",dec_integer)) then goto err170;
					wp->operand(2) = p;
					end;



				p = wp;
				end;

			if ctl_cnt>0
			then do;
			     pp = create_operator(join,(ctl_cnt+1));
			     do j=1 to ctl_cnt;
				pp->operand(j)=ctl_pointer(j);
				end;
			     if loop_ptr = null
			     then pp -> operand(ctl_cnt+1) = p;
			     else do;
				loop_ptr -> operand(1) = p;
				pp -> operand(ctl_cnt+1) = ip;
				end;
			     p=pp;
			     ctl_cnt = 0;
			     end;
			else if loop_ptr ^= null
			     then do;
				loop_ptr -> operand(1) = p;
				p = ip;
				end;

			if pa_type = statement_node
			then pa_ptr->statement.root = p;
			else pa_ptr->operator.operand(pa_opnum) = p;
		end;
	end;

goto exit_2;

/**/
expand_loop_set_ptr:proc(op_param,vp_param,pa_param) returns(fixed bin (31));

dcl (op_ptr,op_param,vp_param,pa_param)  pointer;

op_ptr=op_param;
if op_ptr->operator.operand(4)->node.type ^= reference_node
then  goto punt;

if ^op_ptr->operator.operand(4)->reference.symbol->symbol.constant
then goto punt;
else if op_ptr->operator.operand(1)->operator.op_code = put_edit_trans
     then do;
	pa_param = op_ptr;
	vp_param = op_ptr->operator.operand(1)->operator.operand(2);
	return((op_ptr->operator.operand(4)->reference.symbol->symbol.initial->bbin35));
	end;

    else if op_ptr->operator.operand(1)->operator.op_code = loop
	then return((op_ptr->operator.operand(4)->reference.symbol->symbol.initial
			->bbin35 * expand_loop_set_ptr((op_ptr->operator.operand(1)),vp_param,pa_param)));
	else goto punt;

end expand_loop_set_ptr;



/* Sees if format list is entirely known at compile time and produces an expanded array of simple format items */


format_list_process:proc(p_param);

dcl (h,iteration_factor,i,j) fixed bin, (p,p_param,q) ptr;

do p = p_param repeat p->operand(1) while (p ^= null);

	if p->operator.op_code=e_format		/* e,f_formats need the creation of a picture so all */
	|  p->operator.op_code=f_format		/* fields must be known at compile time, for the others */
	then constant_operands=p->operator.number;	/* only the iteration factor must be known.	*/
	else if p->operator.op_code = r_format
	     then constant_operands = 3;
	     else constant_operands=2;

	do i = 2 to constant_operands;
		if p->operand(i) ^= null
		then if p->operand(i)->node.type ^= reference_node
		     then goto punt;
		     else if ^p->operand(i)->reference.symbol->symbol.constant
			then goto punt;	/* Throughout this proc as soon as we give up on quick i/o we */
		end;			/* just goto punt.	*/

	if p->operand(2) ^= null
	then iteration_factor = p->operand(2)->reference.symbol->symbol.initial->bbin35;
	else iteration_factor=1;
	if p->operator.op_code = r_format
	then	do;
		q2 = p->operand(3)->reference.symbol;
		q2->symbol.initial->statement.root,
		q = expression_semantics((q2->symbol.block_node),(q2->symbol.initial),
				(q2->symbol.initial->statement.root),(context_with_top_bit_on));
					/* the last arg MUST be passed by value cause it is an	*/
					/* in/out arg yet dcl'd options(constant) !!!		*/
		do j=1 to iteration_factor;
			call format_list_process(q);
			end;
		end;
	else	if p->operator.op_code = l_parn
		then	do;
			q = p->operand(3);	/* operand(3) is the true format item */
			do j=1 to iteration_factor;
				call format_list_process(q);
				end;
			end;

		else do;
			if p->operator.op_code = c_format
			then do;
					/* op(3) is real form. item, op(4) is imag form. item */
				if p->operator.number = 2 then goto punt;

				do h=3 to p->operator.number;
	
					if p->operand(h)->operand(2) ^= null then goto punt;
					do k=3 to p->operand(h)->operator.number;
						if p->operand(h)->operand(k)^=null
						then if p->operand(h)->operand(k)->node.type ^= reference_node
						     then goto punt;
						     else if ^p->operand(h)->operand(k)->reference.symbol->symbol.constant
							then goto punt;
						end;
	
					end;
				end;
			else if p->operator.op_code = bn_format
			     then goto punt;
	 		     else	if p->operator.op_code=e_format
			     	then	if p->operator.number > 4
			     		then	if p->operand(5)^=null
			     			then 	if p->operand(5)->reference.symbol->symbol.initial
			     				->bbin35 <= p->operand(4)->reference.symbol->symbol.initial
			     				->bbin35
			     				then goto punt;	/* sig digits < dec prec !! */


			if pti>hbound(format_list_ptr_table,1)-1 then goto punt;
			pti = pti+1;
			format_list_ptr_table(pti).it_factor = iteration_factor;
			format_list_ptr_table(pti).f_ptr = p;
			end;

		end;
end;


/*      */
/* Process p_format,e_format,f_format items, return "0"b if not one of those types.	*/


pef_format:proc(vp_param) returns(bit(1) aligned);

dcl	(vp,vp_param) ptr;

vp = vp_param;

if format_op=f_format
then	do;

	if  op_num > 3	/* op(4) is the decimal precision (de)	*/
	then de = format_ptr->operand(4)->reference.symbol->symbol.initial->bbin35;
	else de = 0;	/* 0 is the default decimal precision	*/
	if  op_num > 4	/* op(5) is the scale factor (ki)	*/
	then ki = format_ptr->operand(5)->reference.symbol->symbol.initial->bbin35;
	else ki = 0;	/* 0 is the default scale factor	*/
	wi = format_ptr->operand(3)->reference.symbol->symbol.initial->bbin35;  /* op(3) is the field width (wi)*/

	if de<0				/* These are language defined errors. */
	then goto err496;
	else if wi<0
	     then goto err496;
	     else if wi=0 
		then goto ef_null;
		else	if de>0
			then	if wi<de+2
				then goto err496;
	if de=0
	then p_str = copy("-",wi-1)||"-9";
	else p_str = copy("-",wi-de-2)||"-9.v"||copy("9",de);

	p = create_operator(put_field_chk,3);

	rr = declare_picture_temp((p_str),(-ki),"0"b,"0"b);
	p->operand(1) = declare_constant$integer((rr->reference.c_length-1));
	p->operand(2) = convert$to_target_fb(vp,rr);
	if p->operand(2)->operand(2)->node.type = operator_node
	then if p->operand(2)->operand(2)->operator.op_code = assign
	     then p->operand(2)->operand(2)->operator.op_code = assign_round;
	p->operand(3) = declare_constant$integer((wi-min(max_p_dec,wi)));
	return("1"b);
	end;

if	format_op = e_format
then	do;

	wi = format_ptr->operand(3)->reference.symbol->symbol.initial->bbin35;
	if wi = 0 then goto ef_null;
	if op_num > 3
	then de = format_ptr->operand(4)->reference.symbol->symbol.initial->bbin35;
	else do;
		p = convert$from_builtin(vp,(float_mask|decimal_mask|aligned_mask|real_mask));
		if p->node.type = operator_node
		then p = p->operand(1);
		de = p->reference.symbol->symbol.c_dcl_size-1;
	     end;
	if op_num > 4
	then si = format_ptr->operand(5)->reference.symbol->symbol.initial->bbin35;
	else si = de+1;

	if de=0
	then	if si<0
		then goto err496;
		else	if wi-si-5<0
			then goto err496;
			else;
	else	if si-de<0
		then goto err496;
		else	if wi-si-6<0
			then goto err496;

	if de ^= 0
	then p = create_pic_ass_pf(copy("b",wi-si-6)||copy("-",si-de)||"9.v"
			||copy("9",de)||"es999",vp,0,"0"b,"1"b);
	else	p = create_pic_ass_pf(copy("b",wi-si-5)||copy("-",si)||"9ves999",vp,0,"0"b,"1"b);
	return("1"b);
	end;
if format_op = picture_format
then do;
	p = format_ptr->operand(3)->reference.symbol;
	p_str = string(p->symbol.initial->picture_image.chars);
	p = create_pic_ass_pf(p_str,vp,(p->symbol.initial->picture_image.scalefactor),"0"b,"0"b);
		/* The complex bit, arg 3, can be "0"b because there is no such thing as a complex	*/
		/* picture in a format list -- there is no way to express it in a pl1 program		*/
	return("1"b);
	end;
return("0"b);

ef_null:
	p = create_operator(nop,0);
	return("1"b);

err496:
	k = 496;
	call semantic_translator$abort(k,null);
end;

/*    */
create_pic_ass_pf:proc(v_str,vq,scalefac,complex_bit,pfc) returns(ptr);

dcl (p,q,vq) pointer;
dcl scalefac fixed bin(31);
dcl v_str char(256) varying aligned;
dcl (pfc,complex_bit) bit(1) aligned;

q = declare_picture_temp((v_str),scalefac,complex_bit,"0"b);
if pfc
then do;
	p = create_operator(put_field_chk,3);
	p->operand(1) = declare_constant$integer((q->reference.c_length-1));
	p->operand(3) = declare_constant$integer(0);
     end;
else do;
	p = create_operator(put_field,2);
	p->operand(1) = declare_constant$integer((q->reference.c_length));
     end;

p->operand(2) = convert$to_target_fb(vq,q);
return(p);
end;
/*  */
format_list_semantics:entry(b,s_param,t);

	b -> block.why_nonquick.format_statement = "1"b;
	b -> block.no_stack = "0"b;

	fop=t->operator.op_code;

	do i=1 to t->operator.number;
	flt=t->operand(i);
	if flt=null then goto end_f_loop;

	if i=1 then
		do;
f_list:
		call io_data_list_semantics$format_list_semantics(b,s_param,flt);
		goto end_f_loop;
		end;

	if i=2 then
		do;
int:
		if flt->node.type=token_node
		then if flt->token.type^=is_identifier then goto convert_to_integer;
fl_process:
		string(context)="0000"b;
		flt = expression_semantics(b,s_param,flt,context);
		call make_non_quick (flt, "0001"b);	/* block.why_nonquick.invoked_by_format */

convert_to_integer:
		flt=convert$to_target(flt,declare_temporary(integer_type,default_fix_bin_p,0,null));
		goto end_f_loop;
		end;

	if i=3 then
		do;
		if fop=l_parn then goto f_list;
		if fop=r_format then
			do;
			string(context)="0000"b;
			flt = expression_semantics(b,s_param,flt,context);
			if def_context.aggregate then goto err171;
			call make_non_quick (flt, "0001"b);	/* block.why_nonquick.invoked_by_format */
			if flt->node.type=operator_node then fltt=flt->operand(1);
			else fltt=flt;
			if fltt->node.type^=reference_node then goto err171;
			if ^fltt->reference.symbol->symbol.format then goto err171;
			goto end_f_loop;
			end;

		if fop=c_format then
			do;
c_form:
			if flt->node.type^=operator_node then goto err170;
			if flt->operator.op_code^=e_format  then
			if flt->operator.op_code^=f_format  then
			if flt->operator.op_code^=picture_format then goto err170;
			goto f_list;
			end;
		if fop=picture_format then goto end_f_loop;	/* pc is e reference node already */
		goto int;
		end;

	if i=4 & fop=c_format then goto c_form;
	goto int;				/* all other cases require an integer */

err171:
	k=171;
	goto sig_format_err;

err170:
	k=170;
sig_format_err:
	call semantic_translator$error(k,null);

end_f_loop:
	t->operand(i)=flt;
	end;

	return;

/*  */
get_data_:
		/* the whole job is done here; we produce
		   directly for code generator.  */

	if jp=null then			/* (gdt(1))=null means oklist=const(0) */
		do;
		jp,t->operand(1)=create_operator(join,0);
		goto full_symtab;
		end;
	n=jp->operator.number;
	if n=0 then
		do;
full_symtab:
		bx=b;
		do while(bx^=null);
		bx->block.get_data="1"b;
		bx=bx->block.father;
		end;
		goto gdexit;
		end;

	do i=1 to n;
			/* in each case make sure that the operand is
				(a) reference to a variable, not to a constant or expression
				(b) that the ref is not subscripted or qualified
					i.e., no   p->x    or    x(j,4)
				(c) that ref is string/arith
				(d) or is array/structure of string/arith
			   and set "set" and "put_in_symtab" for ref and ref's containing structures
			*/
	ri=jp->operand(i);
	if ri->node.type=token_node then
		do;
		string(context)="0"b;
		ri = expression_semantics(b,s,ri,context);
		if ri->node.type ^= reference_node then goto err469;
		goto gdcommon;
		end;
	if ri->node.type ^= reference_node then goto err469;
	if ri->reference.qualifier ^= null then goto err469;
	if ri->reference.offset ^= null then goto err469;
	string(context)="0"b;
	ri = expression_semantics(b,s,ri,context);

	/* ********************************
	 *
	 *  There is an unexplained problem
	 *  with defined items.  BASIS says
	 *  that any defined item is OK here,
	 *  AG94 allows string-overlay and
	 *  non-asterisk simple defined.
	 *
	 ************************************ */


gdcommon:
	/* there were no subscripts or qualifiers */
	sy=ri->reference.symbol;

	if def_context.aggregate then if sy->symbol.defined
		then ri=defined_reference(b,s,ri,null,sy,"0"b);


	call walk(sy);
	if get_of_noncomputational
	then go to err470;

	go to ok;

err469:
	k=469;
	if ri->node.type^=reference_node then
		do;
		k=473;		/* err470 is called only with a reference */
		sy=null;
		end;
	else sy=ri->reference.symbol;
	goto gderr;

err470:
	k=470;
gderr:
	call semantic_translator$error(k,sy);
	ri=null;
ok:
	jp->operand(i)=ri;	/* it has been altered by expression semantics */
	end;
gdexit:
	bx=create_list(2);
	bx->list.element(1)=pl1_stat_$ok_list;
	pl1_stat_$ok_list=bx;
	bx->list.element(2)=jp;
			/* making a list of the oklists as
			   (next,join) pairs */
	goto exit;

/*  */


    walk:	proc(sp);
	dcl (sp,tp) ptr;

	get_of_noncomputational = "0"b;

	tp=sp->symbol.father;
		do while (tp^=null);
		tp->symbol.put_in_symtab,
		tp->symbol.set="1"b;
		if tp->symbol.cross_references ^= null
		then tp->symbol.cross_references->cross_reference.set_reference = "1"b;
		tp=tp->symbol.father;
		end;

    down:	entry(sp);

	sp->symbol.put_in_symtab,
	sp->symbol.set="1"b;
	tp = sp -> symbol.cross_references;
	if tp ^= null then tp -> cross_reference.set_reference = "1"b;

	tp=sp->symbol.son;
	if tp = null				/* at bottom? */
	then if (substr (string (sp -> symbol.attributes), 1, 36) & computational_mask) = ""b
	     then get_of_noncomputational = "1"b;

	do while (tp ^= null);
	     call down(tp);
	     tp=tp->symbol.brother;
	end;
	return;

end walk;







    label_of_statement:	proc(s) returns(ptr);
	/* returns ptr to label of statement which is created
	   and whose address is returned in "s"  */
	dcl (s,r) ptr;
	s=create_statement(assignment_statement,(nss->statement.back),null,prefix);
	s->statement.processed,s->statement.generated="1"b;

	r=create_label(b,null,by_compiler);
	r->label.statement=s;
	s->statement.labels=create_list(2);
	s->statement.labels->list.element(2)=r;
	return(r);
end;

/*   */
    io_join_semantics:	proc(t);

	dcl t ptr;

	dcl (randi,s,op,q,tt) ptr;
	dcl (i,j,k,l,m,n) fixed bin(15);

	j=1;
	if t=null then goto join_finish;
	n=t->operator.number;

join_loop:
	do i=j to n;
	randi=t->operand(i);
	if randi->node.type=operator_node then
		if randi->operator.op_code=do_fun
		then	do;
			k=i-1;
			no_quick_edit = "1"b;
			goto new_join;
			end;
	op=create_operator(trans_op,2);
	op->operand(2)=randi;





	t->operand(i)=op;		/* we insert transmission operator */
	end;
	k=n;

new_join:
		/* if no elements, nothing
		   if one element, no join: direct "assignment"
		   if >1 elements, make a new join, but
		   if n  elements, use original join  */

	l=k+1-j;
	if l=0 then goto process_do;

	s=create_statement(assignment_statement,(nss->statement.back),null,prefix);
	s->statement.generated="1"b;

	if l=1 then
		do;
		s->statement.root=t->operand(j);
		goto process_do;
		end;
	if l=n then	/* simple join */
		do;
		s->statement.root=t;
		goto join_finish;
		end;

	s->statement.root,
	q=create_operator(join,l);

		do m=1 to l;
		q->operand(m)=t->operand(m+j-1);
		end;

process_do:
	if k=n then goto join_finish;

	s=create_statement(do_statement,(nss->statement.back),null,prefix);
	s->statement.generated="1"b;
	s->statement.root=randi;
	tt=randi->operand(1);
	call io_join_semantics(tt);


	randi->operand(1)=label_of_statement(s);
	s->statement.processed="0"b;	/* ? */
	s->statement.statement_type=null_statement;

	j=k+2;
	if j>n then goto join_finish;	/* skipping over the "do" leaves nothing */
	goto join_loop;

join_finish:

	end io_join_semantics;
/**/
get_next_format:proc ;

	do while (cur_rep = 0);
		peti = peti + 1;
		if peti> pti
		then do;
			if ^data_format_found then goto err497;
			peti = 1;
			end;
		cur_rep = format_list_ptr_table(peti).it_factor;
		end;

	cur_rep = cur_rep-1;

	format_ptr = format_list_ptr_table(peti).f_ptr;
	format_op = format_ptr->operator.op_code;

	end;
/**/
compare_format: proc(pa,pb) returns(bit(1) aligned);

dcl	(pa,pb,a,b) ptr;
dcl	i fixed bin;

	/* since operand(1) is chain ptr and operand(2) is iteration factor,
	   only operands(3-n) are significant for us. */

	a = pa;
	b = pb;

	if a = b then return("1"b);

	if a ^= null
	then if b ^= null
	then if a -> operator.op_code = b -> operator.op_code
	then if a -> operator.number = b -> operator.number
	then do;
	     do i = 3 to b -> operator.number;
		if a -> operand(i) ^= b -> operand(i)
		then if ^ compare_expression((a -> operand(i)),(b -> operand(i)))
		     then go to fail;
		end;
	     return("1"b);
	     end;

fail:	return("0"b);

	end;
/**/


err495:
	k = 495;
	goto idl_err;
err497:
	k = 497;
	goto idl_err;
err427:
	k = 427;
idl_err:
	call semantic_translator$abort(k,null);



/*		*/
force_cplx_temp:proc(q_param) returns(ptr);

dcl	(q,q_param) ptr;

	q = q_param;
	return(declare_temporary(substr(string(q->reference.symbol->
		symbol.attributes),1,36) & ^unaligned_mask & ^real_mask
		| aligned_mask | complex_mask,(q->reference.symbol->
		symbol.c_dcl_size),(q->reference.symbol->symbol.scale),
		null));

end;

get_next_part_of_cplx_format:proc(num);
dcl	num fixed bin(31);

	if c_format_ptr->operator.number < num
	then return;

	format_ptr = c_format_ptr->operand(num);
	format_op = format_ptr->operator.op_code;
	do op_num = format_ptr->operator.number repeat op_num-1 while(format_ptr->operand(op_num) = null);
		end;

	return;

end;

/* include files */

%include semant;
%include picture_image;
%include nodes;
%include system;
%include mask;
%include reference;
%include block;
%include token;
%include token_types;
%include semantic_bits;
%include symbol;


%include boundary;
%include declare_type;
% include label;
%include list;
%include op_codes;
%include operator;
%include statement;
%include statement_types;
%include ps_map;
%include cross_reference;
     end /* io_data_list_semantics */;
