/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(86-07-15,Ginter), approve(86-07-15,MCR7287), audit(86-07-16,Mabey),
     install(86-07-28,MR12.0-1105):
     Bug fixes for the MR12.0 release of the compiler.
                                                   END HISTORY COMMENTS */


/*	Modified:	781219 by RAB to fix 1806 (star_extent exprs get ERROR 316)	*/
/*	Modified: 17 Mar 1980 by PCK to implement by name assignment */
/*		Also fixes 1878				 */
/*	Modified: 2 April 1980 by PCK to increase implementation limit
		of the number of substructures that may immediately
		be contained in a structure from a minimum of 256 to
		a minimum of 32767 */
/*	Modified: 7 June 1985 by MM to fix 2109 (by name assignments that
		generate temporaries aren't handled correctly.) */

/* format: style3 */
expand_primitive:
     proc (blk, stmnt, input_tree, context) returns (ptr);

dcl	(blk, stmnt, tree, input_tree, one, subs, loops, last, qual, p, a, b, s, symbols_block, bna)
			ptr;
dcl	(i, given, ndims, n, stars_given)
			fixed bin (15);
dcl	pds		bit (1) aligned;
dcl	pl1_stat_$eis_mode	bit (1) aligned ext static;
dcl	pl1_stat_$by_name_parts_tree
			ptr aligned ext static;

dcl	null		builtin;

	if input_tree -> node.type = operator_node
	then return (input_tree);

/* generates a LOOP/JOIN tree processed by subscripter and by expression_semantics */

	last, loops = null;
	this_context = "0"b;
	one = declare_constant$integer (1);
	stars_given, n = 0;

	if def_context.by_name_assignment
	then bna = pl1_stat_$by_name_parts_tree;
	else bna = null;

	s = input_tree -> reference.symbol;

	if s -> symbol.block_node = null
	then symbols_block = blk;
	else symbols_block = s -> symbol.block_node;

	if s -> symbol.reference = input_tree | input_tree -> reference.array_ref
	then do;
		tree = create_reference ((input_tree -> reference.symbol));
		tree -> reference = input_tree -> reference;
	     end;
	else tree = input_tree;

/*  handling the case of unsubscripted array reference */

	if s -> node.type = label_node
	then do;
		b = create_bound ();
		b -> bound.c_lower = s -> label.low_bound;
		b -> bound.c_upper = s -> label.high_bound;
		b -> bound.c_multiplier = 1;
		subs = create_list (1);
		subs -> list.element (1) = create_token ("*", asterisk);
		given = 1;
	     end;
	else do;
		qual = tree -> reference.qualifier;

		subs = tree -> reference.offset;

		if subs = null
		then given = 0;
		else if subs -> node.type ^= list_node
		then do;
			given = 0;		/*   simplify-offset may have already split the
					     offset into offset and c_offset with disastrous
					     results, therefore, undo the work   */
			pds = tree -> reference.put_data_sw;
			tree -> reference = tree -> reference.symbol -> symbol.reference -> reference;
			tree -> reference.put_data_sw = pds;
			tree -> reference.shared = "0"b;
			tree -> reference.ref_count = 1;
			subs = null;
		     end;
		else do;
			subs = copy_expression ((subs));
						/* preserve original subs */
			given = subs -> list.number;
		     end;

		a = s -> symbol.array;

		if a ^= null
		then ndims = a -> array.number_of_dimensions;
		else ndims = 0;

/*   the case of an unsubscripted structure or a scalar   */
		if given = 0 & ndims = 0
		then return (expander (tree, bna));

		if ndims ^= given & given ^= 0
		then call semantic_translator$abort (81, s);

		b = a -> array.bounds;
		tree -> reference.offset = copy_expression (s -> symbol.reference -> reference.offset);
		if tree -> reference.length ^= null
		then tree -> reference.length = copy_expression (tree -> reference.length);
	     end;

/*   This reference is (or will be) a fully subscripted array reference.  
Implied asterisks will be added.  */

	if given = 0
	then do;
		n, given = ndims;
		subs = create_list (ndims);

		subs -> list.element (*) = create_token ("*", asterisk);
	     end;
	else do i = 1 to given;			/* count the asterisks */
		p = subs -> list.element (i);

		if p -> node.type = token_node
		then if p -> token.type = asterisk
		     then n = n + 1;
	     end;

	stars_given = n;

	do i = 1 to given;
	     p = subs -> list.element (i);

	     if p -> node.type = token_node
	     then if p -> token.type = asterisk
		then do;
			p = make_loop (n, b, s);
			n = n - 1;
			p -> operand (1) = loops;
			loops = p;
			if last = null
			then last = p;

			if b -> bound.c_lower ^= 1
			then do;
				if b -> bound.lower = null
				then b -> bound.lower = declare_constant$integer ((b -> bound.c_lower));
				subs -> list.element (i) =
				     addf ((p -> operand (2)), subf (copy_expression (b -> bound.lower), one));
			     end;
			else subs -> list.element (i) = p -> operand (2);
		     end;

	     b = b -> bound.next;
	end;

	tree -> reference.array_ref = "0"b;

	if s -> node.type = label_node
	then do;
		p = subscripter (blk, stmnt, tree, subs, s);
		p -> reference.offset = expression_semantics (blk, stmnt, (p -> reference.offset), "0"b);
		call simplify_offset (p, context);
	     end;
	else if s -> symbol.structure
	then p = expander (tree, bna);
	else p = process_subscripted_reference (tree, subs);

	if last = null
	then return (p);

	last -> operand (1) = p;

	return (loops);

/* builds ALL loops for THIS level except as noted for the major structure */

expander:
     proc (tree, bna) returns (ptr);

/* parameters */

dcl	tree		ptr;			/* reference to be expanded into loop/join operators */
dcl	bna		ptr;			/* by name parts tree--for expanding structure refs
			in by name assignments	*/

/* automatic */

dcl	(s, a, q, qt, b, p, bnm, join_operator)
			ptr;
dcl	(k, i, n, m, our_last_index)
			fixed bin (15);
dcl	first_time	bit (1) aligned;
dcl	number_of_members	fixed bin (35);

	first_time = "1"b;
	s = tree -> reference.symbol;
	a = s -> symbol.array;

	if a ^= null
	then do;
		n = a -> array.number_of_dimensions;
		m = n + 1 - a -> array.own_number_of_dimensions;
		our_last_index = n - given + stars_given;
	     end;

/* If this is a structure call yourself for each son and collect the results.  */

	if s -> symbol.structure
	then do;

		k = 0;
		bnm = null;

/* Expand all members of the structure if this is ordinary
		   (not by name assignment) aggregate expansion, otherwise
		   use the by name parts tree to select members that
		   have names that match other structures in the by name
		   assignment. */

		if ^def_context.by_name_assignment
		then do;
			number_of_members = 0;
			do q = s -> symbol.son repeat q -> symbol.brother while (q ^= null);
			     number_of_members = number_of_members + 1;
			end;

			if number_of_members > max_number_of_operands
			then call semantic_translator$abort (383, s);

			join_operator = create_operator (join, (number_of_members));
			do q = s -> symbol.son repeat q -> symbol.brother while (q ^= null);
			     call expand_son (q, bnm);
			end;
		     end;
		else do;
			number_of_members = 0;
			do bnm = bna -> by_name_agg.son repeat bnm -> by_name_agg.right_brother while (bnm ^= null);
			     number_of_members = number_of_members + 1;
			end;

			if number_of_members > max_number_of_operands
			then call semantic_translator$abort (383, s);

			join_operator = create_operator (join, (number_of_members));
			do bnm = bna -> by_name_agg.son repeat bnm -> by_name_agg.right_brother while (bnm ^= null);
			     do q = s -> symbol.son repeat q -> symbol.brother
				while (q -> symbol.token ^= bnm -> by_name_agg.token);
			     end;
			     call expand_son (q, bnm);
			end;
		     end;

/* If this is not an array reference, return the join operator.  */

		if ^tree -> reference.array_ref
		then return (join_operator);

		q = join_operator;
		goto make_my_loops;
	     end;


	if ^tree -> reference.array_ref
	then do;
		if ^tree -> reference.processed
		then do;
			tree -> reference.qualifier = qual;

			tree = expression_semantics (blk, stmnt, tree, this_context);
		     end;

		return (tree);
	     end;


/* create a set of subscripts adjusted to compensate for the fact that the loop will run from
   1 to n rather than from lb to hb.	*/

	b = a -> array.bounds;
	q = create_list ((a -> array.number_of_dimensions));

	do i = 1 to n - given;
	     p = declare_index (our_last_index + 1 - i);
	     if b -> bound.c_lower ^= 1
	     then do;
		     if b -> bound.lower = null
		     then b -> bound.lower = declare_constant$integer ((b -> bound.c_lower));
		     q -> list.element (i) = addf (p, subf (copy_expression (b -> bound.lower), one));
		end;
	     else q -> list.element (i) = p;

	     b = b -> bound.next;
	end;

	k = 0;

	do i = n - given + 1 to n;
	     k = k + 1;
	     q -> list.element (i) = copy_expression (subs -> list.element (k));
	end;

	q = process_subscripted_reference (tree, q);



/* make a loop operator for each dimension at THIS level; i.e., excluding inherited dimensions.  */

make_my_loops:
	b = a -> array.bounds;

	k = 0;

	if n ^= given
	then do i = m to n;
		p = make_loop (our_last_index - k, b, s);
		p -> operand (1) = q;
		q = p;
		b = b -> bound.next;
		k = k + 1;
	     end;

/* return the top loop operator.  */

	return (q);

/* Expands a son of a structure into loop and join operators */

expand_son:
     procedure (q, bnm);

/* parameters */

dcl	q		ptr;			/* A son of the structure being expanded by expander */
dcl	bnm		ptr;			/* The corresponding point in the by_name_parts_tree or null */

	k = k + 1;

	qt = create_reference (q);
	qt -> reference = q -> symbol.reference -> reference;
	qt -> reference.shared = "0"b;
	qt -> reference.ref_count = 1;
	qt -> reference.length = copy_expression (qt -> reference.length);
	qt -> reference.offset = copy_expression (qt -> reference.offset);

	if ^first_time
	then qt -> reference.qualifier = share_expression (qual);
	else do;
		first_time = "0"b;
		qt -> reference.qualifier = qual;

/* force temp, if any, to be unshared so
		   simplify_offset will not try to alter qualifier */

		if qual ^= null
		then if qual -> node.type = operator_node
		     then if qual -> operand (1) -> reference.shared
			then do;
				qual -> operand (1) = copy_expression (qual -> operand (1));
				qual -> operand (1) -> reference.shared = "0"b;
				qual -> operand (1) -> reference.ref_count = 1;
			     end;
	     end;

	qt -> reference.put_data_sw = tree -> reference.put_data_sw;

	if tree -> reference.array_ref
	then qt -> reference.array_ref = "1"b;
	else if qt -> reference.symbol -> symbol.array ^= null
	then if qt -> reference.symbol -> symbol.array -> array.own_number_of_dimensions ^= 0
	     then qt -> reference.array_ref = "1"b;
	     else qt -> reference.array_ref = "0"b;
	else qt -> reference.array_ref = "0"b;

	if ^qt -> reference.array_ref & subs ^= null
	then qt = process_subscripted_reference (qt, copy_expression ((subs)));

	join_operator -> operator.operand (k) = expander (qt, bnm);

	return;

     end /* expand_son */;

     end /* expander */;

process_subscripted_reference:
     proc (tree, subs) returns (ptr);

dcl	(tree, subs, p, s)	ptr;

dcl	constant		fixed bin,
	modified		bit (1) aligned;

dcl	pl1_stat_$locator	(128) ptr ext static,
	pl1_stat_$index	fixed bin (15) ext static;

	s = tree -> reference.symbol;

	if qual ^= null
	then do;
		pl1_stat_$index = pl1_stat_$index + 1;
		if pl1_stat_$index > hbound (pl1_stat_$locator, 1)
		then do;
			call semantic_translator$abort (70, s);
			return (null);
		     end;
		pl1_stat_$locator (pl1_stat_$index) = tree;
	     end;

	if s -> symbol.defined
	then p = defined_reference (blk, stmnt, tree, subs, s, this_context);
	else p = subscripter (blk, stmnt, tree, (subs), s);

	p -> reference.array_ref = "0"b;

	if s -> symbol.defined
	then ;
	else p -> reference.qualifier = qual;

	if p -> reference.offset ^= null
	then do;
		if ^pl1_stat_$eis_mode
		then call bit_ptr ((p -> reference.offset), qual);
		p -> reference.offset =
		     expression_semantics (symbols_block, stmnt, (p -> reference.offset), this_context);

		p -> reference.offset = convert$to_integer ((p -> reference.offset), integer_type);

		call simplify_expression ((p -> reference.offset), constant, modified);

		if modified
		then do;
			p -> reference.offset = null;
			p -> reference.c_offset = constant;
		     end;
	     end;

	if p -> reference.length ^= null
	then do;
		p -> reference.length =
		     expression_semantics (symbols_block, stmnt, (p -> reference.length), this_context);
		p -> reference.length = convert$to_integer ((p -> reference.length), integer_type);
	     end;

	call simplify_offset (p, context);

	if qual ^= null
	then pl1_stat_$index = pl1_stat_$index - 1;

	p -> reference.processed = "1"b;		/* otherwise expression_semantics might destroy offset, modword... */

	return (p);

     end process_subscripted_reference;

/* subroutine to create a loop operator */

make_loop:
     proc (i, b, s) returns (ptr);

dcl	i		fixed bin (15);
dcl	constant_field	fixed bin;
dcl	(p, q, b, s, lower, upper)
			ptr;
dcl	(constant, modified)
			bit (1) aligned;

	if b -> bound.lower = null
	then lower, b -> bound.lower = declare_constant$integer ((b -> bound.c_lower));
	else lower = copy_expression (b -> bound.lower);

	if b -> bound.upper = null
	then upper, b -> bound.upper = declare_constant$integer ((b -> bound.c_upper));
	else upper = copy_expression (b -> bound.upper);

	p = create_operator (loop, 5);
	p -> operand (2) = declare_index ((i));
	p -> operand (3) = one;

	if lower -> node.type = reference_node & upper -> node.type = reference_node
	then if lower -> reference.symbol -> node.type = symbol_node
		& upper -> reference.symbol -> node.type = symbol_node
	     then if lower -> reference.symbol -> symbol.constant & upper -> reference.symbol -> symbol.constant
		then constant = "1"b;
		else constant = "0"b;
	     else constant = "0"b;
	else constant = "0"b;

	if b -> bound.c_lower = 1
	then p -> operand (4) = upper;
	else if constant
	then p -> operand (4) = declare_constant$integer (b -> bound.c_upper - b -> bound.c_lower + 1);
	else p -> operand (4) = subf (upper, subf (lower, one));

	q = p -> operand (4);
	call refer_extent (q, qual);

	p -> operand (4) = expression_semantics (symbols_block, stmnt, q, this_context);
	p -> operand (4) = convert$to_integer ((p -> operand (4)), integer_type);

	call simplify_expression ((p -> operand (4)), constant_field, modified);

	if modified
	then p -> operand (4) = declare_constant$integer ((constant_field));

	return (p);

     end make_loop;

/* subroutine to declare an index variable.  */

declare_index:
     proc (i) returns (ptr);

dcl	i		fixed bin (7);
dcl	(t, d)		ptr;

	t = create_token ("s." || bindec$vs ((i)), identifier);

	do d = t -> token.declaration repeat d -> symbol.multi_use while (d ^= null);
	     if d -> symbol.block_node = blk
	     then return (d -> symbol.reference);
	end;

	d = create_symbol (blk, t, by_compiler);
	d -> symbol.fixed, d -> symbol.binary, d -> symbol.real, d -> symbol.auto, d -> symbol.allocate = "1"b;

	call declare (d);

	return (d -> symbol.reference);

     end declare_index;

/* subroutine to create expressions. */

addf:
     proc (a, b) returns (ptr);

dcl	(a, b, c)		ptr;
dcl	opcode		bit (9) aligned;

	opcode = add;

	go to common;

subf:
     entry (a, b) returns (ptr);

	opcode = sub;
common:
	c = create_operator (opcode, 3);
	c -> operand (2) = a;
	c -> operand (3) = b;

	return (c);

     end addf;

bit_ptr:
     proc (exp, q);

dcl	(exp, q)		ptr;
dcl	i		fixed bin (15);

	if exp = null
	then return;
	if exp -> node.type ^= operator_node
	then return;

	if exp -> op_code = bit_pointer
	then do;
		exp -> operand (1) = declare_temporary (integer_type, default_fix_bin_p, 0, null);
		exp -> operand (2) = share_expression (q);
		exp -> operator.processed = "1"b;
	     end;
	else do i = 2 to exp -> operator.number;
		call bit_ptr ((exp -> operand (i)), q);
	     end;

     end bit_ptr;

%include semant;
%include array;
%include by_name_agg;
%include declare_type;
%include label;
%include list;
%include nodes;
%include op_codes;
%include operator;
%include reference;
%include semantic_bits;
%include symbol;
%include system;
%include token;
%include token_types;

     end expand_primitive;
