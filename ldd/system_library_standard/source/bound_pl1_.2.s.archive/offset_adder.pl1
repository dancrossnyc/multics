/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


offset_adder:	proc(a,ca,ua,mwa,arg_b,arg_cb,arg_ub,arg_mwb,no_improve);

/* Modified: 79/04/23 by PCK to implement 4-bit decimal */

dcl	(a,arg_b,b,p,q) ptr;
dcl	(ca,arg_cb,cb) fixed bin(31);
dcl	(ua,arg_ub,ub) fixed bin(3);
dcl	(mwa,arg_mwb,mwb) bit(1) aligned;	/* ON means units ^= word_, but variable offset in words */
dcl	n fixed bin(15);
dcl	bit_offset fixed bin(31);

dcl	no_improve bit(1);

dcl	(divide,min,mod,null,substr) builtin;

dcl	c_table(7,7) fixed bin(31,1) int static initial(
					1, 4.5, 9,18,36,36,36,
					0,   1, 2, 4, 8, 8, 8,
					0,   0, 1, 2, 4, 4, 4,
					0,   0, 0, 1, 2, 2, 2,
					0,   0, 0, 0, 1, 1, 1,
					0,   0, 0, 0, 0, 1, 1,
					0,   0, 0, 0, 0, 0, 1);

dcl	pl1_stat_$eis_mode bit(1) aligned ext static;


	b = arg_b; cb = arg_cb; ub = arg_ub; mwb = arg_mwb; /* value b,cb,ub,mwb; */

	call get_ptr(a,ua,mwa);

	call get_ptr(b,ub,mwb);

	if ua = 0
	then ua = ub;
	else if ub = 0
	     then ub = ua;
	     else if ua ^= ub & (ua < word_ | ub < word_)
		then if ua < ub
		     then do;
			     cb = cb * c_table (ua,ub);

			     if b ^= null
			     then b = convert_variable_offset (b,ua,ub);

			end;
		     else do;
			     ca = ca * c_table (ub,ua);

			     if a ^= null
			     then a = convert_variable_offset (a,ub,ua);

			end;

	ua = min(ua,ub);
	ca = ca+cb;

	if a = null
	then do;
		a = b;

		if b = null
		then if ^no_improve
		then if ua < word_
		then do;
			/* improve offset units */
			bit_offset = ca * c_table(bit_,ua);

			do n = word_ to bit_ by -1
			     while(mod(bit_offset,c_table(bit_,n)) ^= 0);
			end;

			if n = word_ | ^pl1_stat_$eis_mode
			then do;
				ca = divide(bit_offset,c_table(bit_,n),31,0);
				ua = n;
			     end;
		end;
	end;
	else	if b ^= null
		then do;
			q = create_operator(add,3);
			q->operand(2) = a;
			q->operand(3) = b;
			a = q;
		end;

	if a ^= null & ca ^= 0
	then do;
		q = create_operator(add,3);
		q->operand(2) = a;
		q->operand(3) = declare_constant$integer(ca);
		a = q;
		ca = 0;
	end;

	return;

get_ptr:	proc(pt,units,offset_is_modword);

dcl	(pt,t,new) ptr;
dcl	units fixed bin(3);
dcl	offset_is_modword bit(1) aligned;

	if pt = null then return;

	if ^ pl1_stat_$eis_mode
	then if pt -> node.type = operator_node
	then if substr(pt -> operator.op_code,1,5) = substr(mod_bit,1,5)
	then do;
	     pt = pt -> operand(3);
	     return;
	     end;

	if ^ offset_is_modword
	     then return;

	/* force pt to use "units" instead of word_ */

	t = create_operator(mult,3);

	t -> operator.processed = "0"b;
	t -> operand(1) = null;
	t -> operand(2) = pt;
	t -> operand(3) = declare_constant$integer((c_table(units,word_)));

	pt = t;

	offset_is_modword = "0"b;

	end /* get_ptr */;

/* Convert a variable offset from one set of units to another set of units */

convert_variable_offset:
	procedure (variable_offset,to_units,from_units) returns(pointer);

/* parameters */

dcl  variable_offset pointer;
dcl  (from_units,to_units) fixed binary(3);

/* automatic */

dcl  converted_variable_offset pointer;


	if from_units = digit_ & to_units = bit_
	then converted_variable_offset =  create_operator (digit_to_bit,2);	/* Special case digit offset to bit offset conversion to avoid scaled multiplicaion */
	else do;			/* All other offset conversions are simple integer multiplications */
		converted_variable_offset = create_operator (mult,3);
		converted_variable_offset -> operand(3) = declare_constant$integer ((c_table(to_units,from_units)));
	     end;

	converted_variable_offset -> operand(2) = variable_offset;

	return (converted_variable_offset);

	end /* convert_variable_offset */;

%include semant;
%include operator;
%include reference;
%include nodes;
%include op_codes;
%include boundary;
%include system;

	end /* offset_adder */;

