/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* This procedure walks thru an expression tree.  If it finds a call to an
   internal procedure, it makes the internal procedure non-quick */

make_non_quick: proc(pt, reason);

dcl	pt ptr;
dcl	reason bit (36) aligned;

dcl	(p,q) ptr,
	null builtin,
	i fixed bin;

%include reference;
%include list;
%include operator;
%include symbol;
%include block;
%include nodes;
%include op_codes;

	p = pt;
	if pt = null then return;

	if p -> node.type = reference_node
	then do;
	     call make_non_quick((p -> reference.offset), reason);
	     call make_non_quick((p -> reference.length), reason);
	     call make_non_quick((p -> reference.qualifier), reason);
	     return;
	     end;

	if p -> node.type = list_node
	then do;

	     do i = 1 to p -> list.number;
		call make_non_quick((p -> element(i)), reason);
		end;

	     return;
	     end;

	if p -> node.type ^= operator_node then return;

	if p -> operator.op_code = std_call
	then do;
	     q = p -> operand(2);
	     if q -> node.type = reference_node
	     then do;
		q = q -> reference.symbol;
		if q -> symbol.internal & q -> symbol.constant
		then do;
			string (q -> symbol.equivalence -> block.why_nonquick) =
			     string (q -> symbol.equivalence -> block.why_nonquick) | reason;
			q -> symbol.equivalence -> block.no_stack = "0"b;
		     end;
		end;
	     end;

	do i = 1 to p -> operator.number;
	     call make_non_quick((p -> operand(i)), reason);
	     end;

	end;
