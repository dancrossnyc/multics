/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* Modified Dec 1978 by David Spector for new xref 'set' format */
/* Modified 79/04/19 by Peter Krupp to implement 4-bit decimal */

expand_initial: proc(sp,st,locator);

dcl	(s,sp,st,blk,p,q,lab,swt,increase,subscript,total_size,nest,allocate,one,ar,r,a,b,v,off) ptr;
dcl	(d,locator,stat) ptr;
dcl	(c_total_size,coff) fixed bin(31);
dcl	(n,i,total_elements) fixed bin(15);

dcl	units fixed bin(3);
dcl	round(4) fixed bin(15) int static initial(36,0,4,2);
dcl	optable(4) bit(9) aligned initial(bit_to_word,""b,char_to_word,half_to_word);

dcl	(constant_extents,temporary_required) bit(1) aligned;

dcl	fab_image aligned bit(length(unspec(fab))) based(addr(fab));
dcl	1 fab,
	2 bits,
	3 fill1 bit(27),
	3 internal bit(1),
	3 fill2 bit(8),
	2 title char(32),
	2 line_size fixed bin(15),
	2 page_size fixed bin(15),
	2 buffer_size fixed bin(15);

dcl	(null,string,fixed,length,unspec,addr,binary,bit) builtin;

	s = sp;
	stat = st;
	one = declare_constant$integer(1);
	blk = s->symbol.block_node;
	s->symbol.allocate  ,
	s->symbol.set = "1"b;

	if s->symbol.constant
	then do;
		q = create_operator(jump_if_eq,3);
		q->operand(1),lab = create_label(blk,null,by_compiler);
		q->operand(2),swt = declare_integer(blk);
		q->operand(3) = one;

		swt->reference.symbol->symbol.static,
		swt->reference.symbol->symbol.internal,
		swt->reference.symbol->symbol.allocate = "1"b;
		swt->reference.symbol->symbol.auto = "0"b;
		/* int static is assumed to be initialized to zero */

		p = make_statement(if_statement,q);

		/* create an internal static file state block of 290 words and set the "general"
		pointer of the file constant's symbol node to point to the symbol node of the
		file state block.  */
			
		p = create_symbol(blk,create_token(s->symbol.token->token.string||".fsb"
			,identifier),by_compiler);
		p->symbol.c_dcl_size = 290;
		p->symbol.storage_block,p->symbol.static = "1"b;
		p->symbol.external = s->symbol.external;
		p->symbol.internal = s->symbol.internal;
		p->symbol.allocate = "1"b;
		call get_size(p);
		p->symbol.boundary = mod2_;
		s->symbol.general = p;
		
		/* create a file attribute block that contains the initial attribute set used when
		opening the file control block.    */
		
		string(fab.bits) = "0010"b||string(s->symbol.file_attributes);
				/* "001"b marks the file as version 2 */
		fab.internal = s->symbol.internal;
		fab.title = s->symbol.token->token.string;
		fab.line_size,fab.page_size,fab.buffer_size = 0;
		q = declare_constant$bit(fab_image);
		p->symbol.general = q->reference.symbol;
		
		
		/* generate prologue to assign the addr(fab) to the 1st pointer
		of the file constant, and the addr(fsb) to the 2nd pointer.  */
		
		a = create_operator(addr_fun,2);
		a->operand(2) = q;
		q = make_statement(assignment_statement,assignf((s->symbol.reference),a));
		a = create_operator(addr_fun,2);
		a->operand(2) = p->symbol.reference;
		q = copy_expression(s->symbol.reference);
		q->reference.shared = "0"b;
		q->reference.ref_count = 1;
		q->reference.c_offset = 2;
		q->reference.units = word_;
		q = make_statement(assignment_statement,assignf(q,a));

		p = make_statement(assignment_statement,assignf(swt,one));
		p = make_statement(null_statement,null);
		p->statement.labels = create_list(2);
		p->statement.labels->element(2) = lab;
		lab->label.statement = p;
		return;
	end;

	if s->symbol.area
	then do;
		if s->symbol.based | s->symbol.controlled
		then do;
			p  ,
			stat = create_statement(assignment_statement,stat,null,(stat->statement.prefix));
			p->statement.generated = "1"b;
		end;
		else	p = create_statement$prologue(assignment_statement,blk,null,(blk->block.prefix));

		p->statement.root  ,
		q = create_operator(assign,2);

		r = create_reference((s->symbol.token));

		if locator^=null
		then	r->reference.qualifier = copy_expression((locator));
	
		if s->symbol.father^=null
		then	call link_father();

		q->operand(1) = r;
		q->operand(2) = create_reference(create_token("empty",identifier));

		q->operand(2)->reference.offset = create_list(0);

		return;
	end;

	if s->symbol.initialed
	then do;
		q = s->symbol.initial;
		if s->symbol.dimensioned
		then	goto array_initialization;
		else do;
			r = create_reference((s->symbol.token));
			r->reference.qualifier = copy_expression((locator));

			if s->symbol.father^=null
			then	call link_father();

unravel:			if q->element(3)^=null
			then	call semantic_translator$abort(442,s);

			if q->element(1)->node.type^=token_node
			then	call semantic_translator$abort(442,s);

			if q->element(1)->token.type^=dec_integer
			then	call semantic_translator$abort(442,s);

			if token_to_binary((q->element(1)))^=1
			then	call semantic_translator$abort(442,s);

			if q->element(2) ^= null
			then	if q->element(2)->node.type = list_node
			then do;
				q = q->element(2);
				go to unravel;
			end;

			p = make_statement(assignment_statement,assignf(r,(q->element(2))));
		end;
	end;

	return;

/* prepare for array initialization by getting a subscript, code to increment the subscript,
   and a reference to an array element.	*/

array_initialization:
	subscript = declare_integer(blk);
	increase = assignf(subscript,addf(subscript,one));
	r = create_reference(s);
	r->reference = s->symbol.reference->reference;
	r->reference.array_ref = "0"b;
	r->reference.qualifier = copy_expression((locator));
	r->reference.symbol = s->symbol.token;

	if s->symbol.father^=null
	then	call link_father();

	a = s->symbol.array;
	n = a->array.number_of_dimensions;
	r->reference.offset = create_list(n);

	total_elements = 0;
	constant_extents = "1"b;

/* insure that the high and low bounds are available in the object program.	*/

	do b = a->array.bounds repeat b->bound.next while(b ^= null);
		if b->bound.lower=null
		then	b->bound.lower = declare_constant$integer((b->bound.c_lower));
		else	constant_extents = "0"b;

		if b->bound.upper=null
		then	b->bound.upper = declare_constant$integer((b->bound.c_upper));
		else	constant_extents = "0"b;

		if constant_extents
		then	if total_elements=0
			then	total_elements = b->bound.c_upper-b->bound.c_lower+1;
			else	total_elements = total_elements * (b->bound.c_upper-b->bound.c_lower+1);
	end;

/* if this is a vector call assign_initial to create assignments from the initial attribute
   to elements of the vector.  The number of elements  in the vector is assumed to be
   equal to or greater than the number of elements in the initial attribute. */

	if n = 1
	then do;
		if a->array.bounds->bound.c_lower = 1
		then	p = declare_constant$integer(0);
		else	p = subf((a->array.bounds->bound.lower),one);

		p = make_statement(assignment_statement,assignf(subscript,p));
		r->reference.offset->element(1) = subscript;
		p = make_statement(assignment_statement,assign_initial(q,null,0,"1"b,temporary_required));

		return;
	end;

/* Create a vector whose elements have the same attributes as the elements of
   the array.  The initial attribute values are assigned to the vector using
   the procedure assign_initial.  The vector is made large enough to
   hold all the values given in the initial attribute.	*/

	p=make_statement(assignment_statement,assignf(subscript,declare_constant$integer(0)));
	allocate = make_statement(null_statement,null);
	p = create_symbol(blk,null,by_compiler);
	p->symbol.auto = "1"b;
	string(p->symbol.data_type) = string(s->symbol.data_type);
	string(p->symbol.misc_attributes) = string(s->symbol.misc_attributes);
	p->symbol.member = "0"b;
	p->symbol.c_dcl_size = s->symbol.c_dcl_size;
	p->symbol.scale = s->symbol.scale;
	p->symbol.dcl_size = s->symbol.dcl_size;

	unspec (p->symbol.pix) = unspec (s->symbol.pix);
	if s -> symbol.picture then p -> symbol.general = s -> symbol.general;

	if p->symbol.varying
	then	p->symbol.reference->reference.varying_ref = "1"b;
	else do;
		p->symbol.reference->reference.c_length = s->symbol.reference->reference.c_length;
		p->symbol.reference->reference.length = s->symbol.reference->reference.length;
	end;

	p->symbol.boundary = s->symbol.boundary;

	v  ,
	p->symbol.array = create_array();
	v->array.number_of_dimensions = 1;
	v->array.own_number_of_dimensions = 1;
	v->array.virtual_origin  ,
	v->array.element_size = a->array.element_size;
	v->array.c_virtual_origin  ,
	v->array.c_element_size = a->array.c_element_size;
	v->array.c_element_size_bits = a->array.c_element_size_bits;
	v->array.offset_units = a->array.offset_units;

	b  ,
	v->array.bounds = create_bound();
	b->bound.c_lower = 1;
	b->bound.c_multiplier = v->array.c_element_size;
	b->bound.multiplier = v->array.element_size;
	if b->bound.multiplier = null
	then	b->bound.multiplier = declare_constant$integer((b->bound.c_multiplier));

	total_size = null;
	c_total_size = 0;
	ar = r;

	r = create_reference((p->symbol.token));
	r->reference.offset = create_list(1);
	r->reference.offset->element(1) = subscript;
	q = make_statement(assignment_statement,assign_initial(q,total_size,c_total_size,"1"b,temporary_required));

	if temporary_required
	then	if total_size=null
		then do;
			total_size = declare_constant$integer(c_total_size);
			c_total_size = 0;
		end;


/* set the upper bound of the vector to the number of items in the initial attribute.  */

	b->bound.upper = total_size;
	b->bound.c_upper = c_total_size;

/* set the size of the vector to the number of values found in the initial attribute
   times the size of an element of the vector.	*/

	if total_size = null
	then	if a->array.element_size = null
		then	c_total_size = c_total_size*a->array.c_element_size;
		else	total_size = multf((a->array.element_size),declare_constant$integer(c_total_size));
	else	if a->array.element_size = null
		then	if a->array.c_element_size ^= 1
			then	total_size = multf(total_size,declare_constant$integer((a->array.c_element_size)));
			else;
		else	total_size = multf(total_size,(a->array.element_size));

/* Change total_size and c_total_size to be in units of words */

	units = v->array.offset_units;
	if units < word_
	then do;
		if total_size ^= null
		then do;
			q = create_operator(optable(units),2);
			q->operand(2) = total_size;
			total_size = q;
		end;
		else	c_total_size = divide(c_total_size+round(units)-1,round(units),31,0);
	end;

	p->symbol.word_size = total_size;
	p->symbol.c_word_size = c_total_size;

	if total_size ^= null
	then do;
		p->symbol.exp_extents = "1"b;
		q = create_operator(allot_auto,2);
		p->symbol.reference->reference.qualifier  ,
		q->operand(1) = declare_pointer(blk);
		q->operand(2) = total_size;
		allocate->statement.root = copy_expression((q));
		allocate->statement.statement_type = assignment_statement;
	end;

/* create code to copy the elements of the vector into the array.  The bounds of the
   array are used to control the loop.  The number of elements in the vector is
   assumed to equal or exceed the number of elements in the array.	*/

	q = make_statement(assignment_statement,assignf(subscript,declare_constant$integer(0)));
	nest = create_operator(join,2);
	nest->operand(1) = increase;
	nest->operand(2) = assignf(ar,r);

	i = 0;

	do b = a->array.bounds repeat b->bound.next while(b^=null);
		i = i+1;
		q = create_operator(loop,5);
		q->operand(1) = nest;
		q->operand(2)  ,
		ar->reference.offset->element(i) = declare_integer(blk);
		q->operand(3) = b->bound.lower;
		q->operand(4) = b->bound.upper;
		nest = q;
	end;

	q = make_statement(assignment_statement,nest);

	return;

/* subroutine to assign the values of an initial attribute to a vector.	*/

assign_initial: proc(init,count,c_count,check_range,temporary_reqd) returns(ptr);

dcl	(init,count,numb,p,v,t,q,q1) ptr;
dcl	stack(1024) ptr unal;
dcl	(i,k,l,items,limit) fixed bin(15),
	n fixed bin(15) init(0);
dcl	(c_count,c_numb,case) fixed bin(31);

dcl	(check_range,temporary_reqd) bit(1) aligned;
dcl	hbound builtin;

	limit = divide(hbound(stack,1),2,15,0);
	items, l = 0;
	temporary_reqd = "0"b;

	do p = init repeat p->element(3) while(p^=null);
		t = p->element(1);		/* repetition factor */
		v = p->element(2);		/* value */

		n = 0;
		case = 1;

		if t->node.type = token_node
		then	if t->token.type = dec_integer
			then do;
				n = token_to_binary(t);
				if n < 6 then case = 0;
			end;
			else	check_range = "0"b;
		else	check_range = "0"b;

		if v=null
		then	;
		else	if v->node.type=list_node
			then	case = 2;

		go to action(case);

action(0):
		/* optimized special case */

		if count=null
		then	c_count = c_count+n;
		else	count = addf(count,declare_constant$integer((n)));

		do k = 1 to n;
			items = items + 1;
			l = l+2;
			if items > limit
			then	call semantic_translator$abort(264,s);

			stack(l-1) = increase;
			stack(l) = assignf(r,v);
		end;

		go to next;

action(1):
		/* normal case */

		temporary_reqd = "1"b;

		q = assignf(r,v);

		if count=null
		&  n^=0
		then	c_count = c_count+n;
		else	if count=null
			then	count = t;
			else	count = addf(count,t);

		q1 = create_operator(join,2);
		q1->operand(1) = increase;
		q1->operand(2) = q;
		q = create_operator(loop,5);
		q->operand(1) = q1;
		q->operand(2) = declare_integer(blk);
		q->operand(3) = one;
		q->operand(4) = t;

		items = items + 1;
		l = l+1;
		if items > limit
		then	call semantic_translator$abort(264,s);
		stack(l) = q;

		goto next;

action(2):
		/* difficult case -- initial value is a list */

		temporary_reqd = "1"b;

		numb = null;
		c_numb = 0;
		q = assign_initial(v,numb,c_numb,"0"b,"0"b);

		if t->node.type=token_node
		then	if t->token.type=dec_integer
			then	n = token_to_binary(t);
			else	check_range = "0"b;
		else	check_range = "0"b;

		if n^=0
		&  numb=null
		then	c_numb = c_numb*n;
		else	if numb=null
			then	numb=multf(declare_constant$integer(c_numb),t);
			else	numb = multf(numb,t);

		if count=null
		&  numb=null
		then	c_count = c_count+c_numb;
		else	if count=null
			then	if c_count=0
				then	count = numb;
				else do;
					count = addf(declare_constant$integer(c_count),numb);
					c_count = 0;
				end;
			else	if c_numb=0
				then	count = addf(count,numb);
				else	count = addf(count,declare_constant$integer(c_numb));

		q1 = create_operator(loop,5);
		q1->operand(1) = q;
		q1->operand(2) = declare_integer(blk);
		q1->operand(3) = one;
		q1->operand(4) = t;

		items = items + 1;
		l = l+1;
		if items > limit
		then	call semantic_translator$abort(264,s);
		stack(l) = q1;

next:
	end;

/* create a join of everything generated by this invocation of assign_initial. */

	q = create_operator(join,l);

	do i = 1 to l;
		q->operand(i) = stack(i);
	end;

	if check_range
	then	if constant_extents
		then	if count=null
			&  c_count^=total_elements
			then	call semantic_translator$abort(292,s);

	return(q);

	end assign_initial;

/* subroutine to make an assignment or arithmetic operators. */

assignf: proc(v,e) returns(ptr);

dcl	(v,e,q) ptr;
dcl	opcode bit(9) aligned;

	if e=null
	then	q = create_operator(nop,0);
	else do;
		q = create_operator(assign,2);
		q->operand(1) = v;
		q->operand(2) = e;
	end;

	go to exit;

addf: entry(v,e) returns(ptr);

	opcode = add;
	go to common;

subf: entry(v,e) returns(ptr);

	opcode = sub;
	go to common;

multf: entry(v,e) returns(ptr);

	opcode = mult;

common:
	q = create_operator(opcode,3);
	q->operand(2) = v;
	q->operand(3) = e;

exit:
	return(q);

	end;

/* subroutine to make a statement in the prologue or main code sequence. */

make_statement: proc(type,e) returns(ptr);

dcl	(e,p) ptr;
dcl	type bit(9) aligned;

	if s->symbol.based | s->symbol.controlled
	then do;
		p  ,
		stat = create_statement(type,stat,null,(stat->statement.prefix));
		p->statement.root = copy_expression((e));
		p->statement.generated = "1"b;
	end;
	else do;
		p = create_statement$prologue(type,blk,null,(blk->block.prefix));
		p->statement.root = copy_expression((e));
	end;

	return(p);

	end;

link_father:	proc();

dcl	(i,count) fixed bin(15);

dcl	(p,q) ptr;

	count = 0;

	do p = s->symbol.father repeat p->symbol.father while(p^=null);
		count = count+1;
	end;

	r->reference.length  ,
	q = create_list(count);
	p = s->symbol.father;

	do i=1 to count;
		q->element(i) = p->symbol.token;
		p = p->symbol.father;
	end;

	end link_father;

%include semant;
%include symbol;
%include boundary;
%include system;
%include label;
%include reference;
%include token;
%include token_types;
%include declare_type;
%include statement;
%include block;
%include statement_types;
%include op_codes;
%include operator;
%include array;
%include list;
%include nodes;

	end expand_initial;
