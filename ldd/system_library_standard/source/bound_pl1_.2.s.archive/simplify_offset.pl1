/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* This version of simplify_offset assumes that mod_bit, mod_byte,
   mod_half, and bit_pointer operators do not appear in the tree */

/*	Modified:	10 April 1977 by RAB to eliminate use of mod_word operator
	Modified:	26 November 1977 by RAB to fix 1690
	Modified:	10 February 1978 by RAB to fix 1691
	Modified:	25 August 1978 by RAB to help fix 1780
	Modified:	5 September 1978 by RAB to fix 1782
	Modified:	17 Jan 1979 by RAB to fix 1816 (fault with aligned unsigned subscript)
	Modified: 23 April 1979 by PCK to implement 4-bit decimal
	Modified:	23 May 1979 by RAB to fix 1820 (large lower bound in word
		array causes bad code)
*/

simplify_offset: proc(pt,context);

dcl	pt ptr;		/* points at a reference node */

dcl	(f,p1,p2,p3,p4,r,s,s1,s2,s3,s4,sym,q,symref) ptr,
	i fixed bin,
	sign fixed bin(1),
	(has_offset, ok_to_free) bit(1) aligned,
	multiple fixed bin(31),
	(bit_offset,c_bit_offset,factor) fixed bin(24),
	(orig_c_offset,start_gen_storage,start_generation) fixed bin(24),
	(n,fix_precision,lower_precision) fixed bin(24),
	op_code bit(9) aligned,
	(called_fix_exp, fractional_offset_to_be_added) bit(1) aligned,
	fix_bin fixed bin based;

dcl	convert_offset(0:5) init(36,1,4.5,9,18,36) fixed bin(7,1) int static options(constant);
dcl	units_per_word(0:5) init(1,36,8,4,2,1) fixed bin(6) int static;

dcl	(divide,max,min,mod,null,substr) builtin;

%include semant;

%include operator;
%include reference;
%include symbol;
%include array;
%include op_codes;
%include nodes;
%include system;
%include boundary;
%include semantic_bits;

			/*      */

	q = pt;

	s = q -> reference.symbol;

	has_offset, ok_to_free = "1"b;

	/* following code attempts to reduce precision of length
	   expression; it checks if index register can be used
	   to hold length */

	p1 = q -> reference.length;
	if p1 ^= null
	then if p1 -> node.type = operator_node
	then do;
	     if s -> symbol.dcl_size ^= null
	     then fix_precision = max_length_precision;
	     else if s -> symbol.c_dcl_size >= max_index_register_value
		then fix_precision = max_length_precision;
		else fix_precision = max_signed_xreg_precision;

	     /* ok to reduce precision of expression */

	     if fix_precision = max_signed_xreg_precision
	      | p1 -> operand(1) -> reference.symbol -> symbol.c_dcl_size > max_p_fix_bin_1
	     then if p1 -> operator.op_code = assign
	     then do;
		p2 = fix_exp((p1 -> operand(2)));

		if fb_value(p2)
		then if p2 -> symbol.c_dcl_size <= fix_precision
		     then if p2 -> symbol.scale = 0
			then do;
			     q -> reference.length = p1 -> operand(2);
			     call free_op(p1);
			     end;
		end;
	     else p2 = fix_exp(p1);
	     end;

	/* following code uses modword_in_offset to discover if no further processing
	   of offset expression is possible */

	if q -> reference.modword_in_offset
	     then return;
	/* following code attempts to simplify offset expressions of the form

		c
		exp + c
		exp - c
		c + exp

		c1 * c2
		c1 * (exp + c2)
		c1 * (exp - c2)
		c1 * (c2 + exp)
						*/

	p1 = q -> reference.offset;
	if p1 = null
	then do;
	     call check_addr;
	     goto ret;
	     end;

	/* The following block of code is necessary because the 6180 will not allow
	   variable fractional offsets to be negative */

	orig_c_offset = q -> reference.c_offset;

	fractional_offset_to_be_added = def_context.f_offset_to_be_added;

	if q -> reference.units < word_ | fractional_offset_to_be_added
	then do;
	     p2 = s -> symbol.reference;
	     if q -> reference.units = p2 -> reference.units
		then start_gen_storage = p2 -> reference.c_offset;
		else start_gen_storage = divide(convert_offset(p2 -> reference.units) * p2 -> reference.c_offset,
			convert_offset(q -> reference.units),31,0);
	     orig_c_offset = max(start_gen_storage,orig_c_offset);
	     end;

	/* *********************************************************************** */

	called_fix_exp = "0"b;

simplify:	if p1 -> node.type ^= operator_node
	then do;

	     s1 = p1 -> reference.symbol;

	     if fb1_const(s1)
	     then do;
		q -> reference.offset = null;
		q -> reference.c_offset = q -> reference.c_offset + s1 -> symbol.initial -> fix_bin;
		call check_addr;
		goto ret;
		end;

	     goto ret;
	     end;

	op_code = p1 -> operator.op_code;

	if op_code = add
	then do;
	     sign = 1;
	     goto l1;
	     end;

	if op_code = sub
	then do;
	     sign = -1;

l1:	     p2 = p1 -> operand(3);
	     if p2 -> node.type ^= reference_node then goto simp1;

	     s2 = p2 -> reference.symbol;

	     if fb1_const(s2)
	     then do;

		/* eliminate the add or sub operator and absorb the constant */

		q -> reference.offset = check_exp((p1 -> operand(2)));

absorb:		call free_op(p1);
		p1 = q -> reference.offset;

		q -> reference.c_offset = q -> reference.c_offset + sign *
		 s2 -> symbol.initial -> fix_bin;
		goto simplify;
		end;

simp1:	     if sign < 0 then goto check_sub;

	     p2 = p1 -> operand(2);
	     if p2 -> node.type ^= reference_node
	     then do;

		/* The following code tries to improve the precision of the
		   offset expression to 17, 18, or 24 depending on the offset
		   units and the size of the variable	*/

replace:
		if called_fix_exp then goto rep;

		lower_precision = max_signed_xreg_precision;

		if q -> reference.units < word_  & ^ q -> reference.modword_in_offset
		 | fractional_offset_to_be_added
		then do;
		     fix_precision = max_offset_precision;
		     if s -> symbol.dcl_size ^= null then goto set_bit;
		     if s -> symbol.c_dcl_size > max_index_register_value then goto set_bit;
		     if s -> symbol.c_dcl_size > max_signed_index_register_value
		      & fractional_offset_to_be_added
			then lower_precision = max_uns_xreg_precision;

		     r = q;
		     sym = s;
		     start_generation = start_gen_storage;

check_again:
		     f = sym;

		     if sym -> symbol.member
		     then do;

			/* can't reduce precision if member has offset
			   expression */

			if sym -> symbol.reference -> reference.offset ^= null
			then goto set_bit;

			if sym -> symbol.dimensioned
			then do f = sym repeat f -> symbol.father
				while(f -> symbol.array -> array.own_number_of_dimensions
				      ^= f -> symbol.array -> array.number_of_dimensions);
				end;
			end;

		     if f -> symbol.bit_size ^= null then go to set_bit;

		     /* the next block of code determines if the maximum
		        variable offset will fit in an index register.
		        The maximum offset is calculated in n.	*/

		     n = f -> symbol.c_bit_size;
		     n = divide(n, convert_offset(q -> reference.units), 24, 0);

		     n = n + start_generation - q -> reference.c_offset;

		     if n >= max_index_register_value then goto set_bit;
		     if n >= max_signed_index_register_value
		      & fractional_offset_to_be_added
			then lower_precision = max_uns_xreg_precision;

		     if sym -> symbol.defined
		     then do;

			/* have to do same check on all those we are
			   defined on */

			r = r -> reference.qualifier;
			if r -> node.type = operator_node
			     then r = r -> operand(1);
			sym = r -> reference.symbol;
			symref = sym -> symbol.reference;

			if symref -> reference.c_offset ^= 0
			then do;
			     if q -> reference.units = symref -> reference.units
				then start_generation = symref -> reference.c_offset;
				else start_generation =
				     divide(convert_offset(symref->reference.units) * symref->reference.c_offset,
					convert_offset(q->reference.units), 31, 0);
			     end;
			else start_generation = 0;
			go to check_again;
			end;
		     end;

		fix_precision = lower_precision;

set_bit:		called_fix_exp = "1"b;

		if fix_precision = max_length_precision
		then if p1 -> operand(1) -> reference.symbol -> symbol.c_dcl_size <= max_p_fix_bin_1
		     then go to rep;

		if p1 -> operator.op_code = assign
		then do;
		     p2 = fix_exp((p1 -> operand(2)));
		     if fb_value(p2)
		     then if p2 -> symbol.c_dcl_size <= fix_precision
			then if p2 -> symbol.scale = 0
			     then do;
				p2 = p1 -> operand(2);
				call free_op(p1);
				p1, q -> reference.offset = p2;
				goto simplify;
				end;
		     end;
		else do;
		     if substr(p1 -> operator.op_code,1,5) = substr(mod_bit,1,5)
		     then p2 = p1 -> operand(3); else p2 = p1;
		     p2 = fix_exp(p2);
		     end;

		goto rep;
		end;

	     s2 = p2 -> reference.symbol;

	     if fb1_const(s2)
	     then do;
		q -> reference.offset = check_exp((p1 -> operand(3)));
		goto absorb;
		end;

	     goto replace;

	     /* the following code tries to catch
			exp - exp
	        which gets eliminated,
			(exp1 + exp2) - exp1
	        which gets simplified, and
			exp1 * exp2 - exp1
	        which gets converted to
			(exp2 - 1) * exp1
	       with obvious simplifcation when exp2 is a constant */

check_sub:
	     if compare_expression((p1 -> operand(2)),(p1 -> operand(3)))
	     then do;
		call free_exp(p1);
		p1 = null;
		call check_addr;
		goto rep;
		end;

	     p2 = p1 -> operand(2);
	     if p2 -> node.type ^= operator_node then goto replace;

	     if p2 -> operator.op_code = add
	     then do;
		if compare_expression((p2 -> operand(2)),(p1 -> operand(3)))
		then do;
		     q -> reference.offset = check_exp((p2 -> operand(3)));
elim_sub:
		     call free_op(p1);
		     p2 = check_exp(p2);
		     call free_op(p2);
		     p1 = q -> reference.offset;
		     go to simplify;
		     end;

		if compare_expression((p2 -> operand(3)),(p1 -> operand(3)))
		then do;
		     q -> reference.offset = check_exp((p2 -> operand(2)));
		     go to elim_sub;
		     end;

		go to replace;
		end;

	     if p2 -> operator.op_code ^= mult then goto replace;

	     if ^ compare_expression((p2 -> operand(2)),(p1 -> operand(3))) then goto replace;

	     p3 = p2 -> operand(3);
	     if p3 -> node.type ^= reference_node
	     then do;
switch:		p1 -> operator.op_code = mult;
		p2 -> operator.op_code = sub;
		p2 -> operand(2) = p3;
		p2 -> operand(3) = declare_constant$integer(1);

		p3 = p1 -> operand(1);
		p1 -> operand(1) = p2 -> operand(1);
		p2 -> operand(1) = p3;
		goto replace;
		end;

	     s3 = p3 -> reference.symbol;
	     if ^ fb1_const(s3) then goto switch;

	     p1 -> operand(2) = declare_constant$integer(s3 -> symbol.initial -> fix_bin - 1);
	     p1 -> operand(1) = p2 -> operand(1);
	     p1 -> operator.op_code = mult;

	     goto replace;
	     end;

	if op_code ^= mult then goto replace;

	p2 = p1 -> operand(2);
	if p2 -> node.type ^= reference_node then goto check_mb;

	s2 = p2 -> reference.symbol;
	if ^ fb1_const(s2) then goto check_mb;

again:	p3 = p1 -> operand(3);
	if p3->node.type^=operator_node
	then do;
	     s3 = p3->reference.symbol;

	     if fb1_const(s3)
	     then do;
		q -> reference.offset = null;
		q -> reference.c_offset = q -> reference.c_offset + s2 -> symbol.initial -> fix_bin * s3 -> symbol.initial -> fix_bin;
		call free_op(p1);
		call check_addr;
		goto ret;
		end;
	     else goto check_mb;
	     end;

	if p3 -> operator.op_code = add then sign = 1;
	else if p3 -> operator.op_code = sub then sign = -1;
	     else goto check_mb;

	p4 = p3 -> operand(3);
	if p4 -> node.type ^= reference_node then goto check_mb;

	s4 = p4 -> reference.symbol;
	if fb1_const(s4)
	then do;
	     p1 -> operand(3) = p3 -> operand(2);
alter:	     call free_op(p3);
	     q -> reference.c_offset = q -> reference.c_offset + sign *
	      s2 -> symbol.initial -> fix_bin * s4 -> symbol.initial -> fix_bin;
	     goto again;
	     end;

	if sign < 0 then goto check_mb;

	p4 = p3 -> operand(2);
	if p4 -> node.type ^= reference_node then goto check_mb;

	s4 = p4 -> reference.symbol;

	if fb1_const(s4)
	then do;
	     p1 -> operand(3) = p3 -> operand(3);
	     goto alter;
	     end;

check_mb:	if q -> reference.fo_in_qual then goto replace;

	/* following code attempts to recognize references to items
	   which have a constant bit offset and a variable word offset;
	   the offset expression for this type of reference is
		mult(t4,exp,multiple_of_bits_per_word)	*/

	if q -> reference.units >= word_  then goto replace;

	if q -> reference.length ^= null then goto replace;
	if s -> symbol.decimal then goto replace;
	if s -> symbol.bit
	then if q -> reference.c_length > bits_per_double
	     then goto replace;
	     else;
	else if s -> symbol.char | s -> symbol.picture
	     then if q -> reference.c_length > characters_per_double
		then goto replace;

	if q -> reference.units = bit_ then factor = 1;
	else factor = bits_per_character;

	p3 = p1 -> operand(3);
	if p3 -> node.type ^= reference_node then goto replace;

	s3 = p3 -> reference.symbol;
	if ^ fb1_const(s3) then goto replace;

	bit_offset = s3 -> symbol.initial -> fix_bin * factor;
	if mod(bit_offset,bits_per_word) ^= 0 then goto replace;

	/* found it, mark the reference and eliminate
	   or change mult operator */

	multiple = divide(bit_offset,bits_per_word,31,0);
	c_bit_offset = q -> reference.c_offset * factor;

	if mod(c_bit_offset,bits_per_word) ^= 0
	then do;

	     if multiple = 1
	     then do;
		q -> reference.offset = check_exp((p1 -> operand(2)));
		call free_op(p1);
		p1 = q -> reference.offset;
		end;

	     else p1 -> operand(3) = declare_constant$integer(multiple);

	     q -> reference.modword_in_offset = "1"b;
	     has_offset = "0"b;
	     end;

	else do;

	     /* we probably shouldn't have gotten here,
	        but we'll improve units to word_ and
	        forget about marking the reference */

	     q -> reference.c_offset = divide(c_bit_offset,bits_per_word,24,0);
	     q -> reference.units = word_;

	     if multiple = 1
	     then do;
		q -> reference.offset = check_exp((p1 -> operand(2)));
		call free_op(p1);
		p1 = q -> reference.offset;
		go to simplify;
		end;
	     else p1 -> operand(3) = declare_constant$integer(multiple);
	     end;

	if p1 -> node.type = operator_node
	     then goto replace;

rep:
	q->reference.offset = p1;

ret:
	if q -> reference.units = 0
	then	return;

	if q -> reference.units = word_
	then do;
		if has_offset
		then	if abs(q -> reference.c_offset) > max_index_register_value
			then	call restore_orig_c_offset;
		return;
	     end;

	if q->reference.units = bit_
	then if ^ s -> symbol.bit
	then if s->symbol.char
	     |  s->symbol.decimal
	     |  s->symbol.picture
	then do;
		q->reference.units = character_;
		q->reference.c_offset = divide(q->reference.c_offset,bits_per_character,17,0);
		orig_c_offset = divide(orig_c_offset,bits_per_character,31,0);

		p1 = q->reference.offset;
		if p1=null
		then	go to check_neg;

		if q->reference.modword_in_offset
		then	goto check_neg;

		if p1->node.type=operator_node
		then do;
			if p1->operator.op_code=mult
			then do i = 2 to 3;
				p3 = p1->operand(i);

				if p3->node.type=reference_node
				then do;
					s3 = p3->reference.symbol;

					if fb1_const(s3)
					then do;
						bit_offset = s3->symbol.initial->fix_bin;
						if bit_offset=bits_per_character
						then do;
							q->reference.offset = check_exp((p1->operand(5-i)));
							call free_op(p1);
							p1 = q->reference.offset;

							goto simplify;
						end;
						else if mod(bit_offset,bits_per_character) = 0
						     then if p1->operand(1)->reference.ref_count <= 1
						     then do;
							multiple = divide(bit_offset,bits_per_character,31,0);
							p1->operand(i) = declare_constant$integer(multiple);
							go to check_neg;
							end;
					end;
				end;
			end;

			s1 = p1->operand(1)->reference.symbol;
		end;
		else	s1 = p1->reference.symbol;

		p2 = create_operator((div),3);
		p2->operand(1) = declare_temporary((integer_type),(s1->symbol.c_dcl_size),0,null);
		p2->operand(2) = p1;
		p2->operand(3) = declare_constant$integer((bits_per_character));
		p2->operator.processed = "1"b;

		q->reference.offset = p2;

	end;

	/* The following block of code is necessary because the 6180 will not allow
	   variable fractional offsets to be negative.  To be specific,
	   negative character offsets may only appear in the a or q, and
	   negative bit offsets may not appear at all.  We must protect
	   against negative variable offsets and against negative constant
	   offsets that are so large as to exceed the 15-bit constant address
	   portion of the instruction word.	*/

check_neg:
	if q -> reference.units = character_ & s -> symbol.decimal & s -> symbol.unaligned
	then do;
		call double_offset;
		orig_c_offset = 2 * orig_c_offset;
	     end;

	if has_offset
	then if q -> reference.c_offset > orig_c_offset
	      | divide(q -> reference.c_offset,units_per_word(q->reference.units),19,0) <= -16383
	then do;
	     if q -> reference.units = character_ | q -> reference.units = digit_
	     then do;
		q -> reference.big_offset = "1"b;
		return;
		end;

	     call restore_orig_c_offset;
	     end;

	/* ************************************************************* */


	return;

check_addr:    proc;
	     /* this code tries to improve addr(x) -> y_unaligned */
     
	     has_offset = "0"b;
	     p2 = q -> reference.qualifier;
	     if p2 = null then return;
     
	     if p2 -> node.type ^= operator_node then return;
     
	     if p2 -> operator.op_code = addr_fun
	     then do;
		q -> reference.fo_in_qual = "0"b;
		p1, q -> reference.offset = null;
		return;
		end;
     
	     if p2 -> operator.op_code ^= addr_fun_bits then return;

	     /* if qual is unshared, someone else is also using it,
	        so altering it is unsafe. */

	     if ^ p2 -> operand(1) -> reference.shared then return;

	     /* if the reference is an aggregate, simplify_offset may be
	        undone, so altering qualifier is unsafe. */

	     if q -> reference.array_ref then return;

	     if s -> node.type = symbol_node
	     then if s -> symbol.structure
		then return;
     
	     p3 = p2 -> operand(2);

	     if q -> reference.c_offset ^= 0
	     then if q -> reference.units ^= p3 -> reference.units
		then return;
     
	     p1, q -> reference.offset = p3 -> reference.offset;
	     q -> reference.c_offset = q -> reference.c_offset + p3 -> reference.c_offset;
	     q -> reference.units = p3 -> reference.units;
	     q -> reference.fo_in_qual = p3 -> reference.fo_in_qual;
	     q -> reference.modword_in_offset = p3 -> reference.modword_in_offset;
     
	     if p3->reference.symbol->symbol.reference = p3
	     then p3, p2->operand(2) = copy_expression((p3));
     
	     p3 -> reference.offset = null;
	     p3 -> reference.c_offset, p3 -> reference.units = 0;
	     p3 -> reference.modword_in_offset = "0"b;
     
	     p2 -> operator.op_code = addr_fun;

	     call check_char_units;
     
	     end;

check_exp:     proc(off) returns(ptr);

	     /* check_exp is called when off is to replace the current q->reference.offset.
	        off is assumed to be contained in q->reference.offset.  If q->reference.offset
	        is also contained in q->reference.length, then off's ref count must be
	        incremented. */

dcl	     off ptr;

dcl	     p ptr;

	     p = off;

	     if p ^= null
	     then do;
	     	if q -> reference.length ^= null
		then if in_expression((q -> reference.offset),(q -> reference.length))
		     then p = share_expression(p);

		if p -> node.type = reference_node
		then if p -> reference.symbol -> symbol.packed
		     then p = convert$to_integer(p,(integer_type));
		end;

	     return(p);

	     end;


in_expression: proc(p,pt) reducible returns(bit(1) aligned);

dcl	     (p,pt) ptr,
	     k fixed binary;

	     if p=pt then goto yes;

	     if pt -> node.type ^= operator_node then goto no;

	     do k = 1 to pt -> operator.number;
		if pt -> operand(k) ^= null
		then if in_expression(p,(pt -> operand(k)))
		     then go to yes;
		end;

no:	     return("0"b);

yes:	     return("1"b);
	     end;

fb1_const:     proc(pt) reducible returns(bit(1) aligned);

dcl	     (p,pt) ptr;

	     p = pt;
	     if ^ p -> symbol.constant then goto no;
	     if ^ p -> symbol.fixed then goto no;
	     if ^ p -> symbol.binary then goto no;

	     if p -> symbol.c_word_size = words_per_fix_bin_1 then return("1"b);

no:	     return("0"b);
	     end;

fb_value:	     proc(pt) reducible returns(bit(1) aligned);

dcl	     (p,pt) ptr;

	     p = pt;
	     if p = null then goto no;

	     if ^ p -> symbol.fixed then goto no;
	     if ^ p -> symbol.binary then goto no;
	     if ^ p -> symbol.real then goto no;

	     if p -> symbol.aligned | p -> symbol.constant then return("1"b);

no:	     return("0"b);
	     end;

fix_exp:	     proc(pt) returns(ptr);

dcl	     pt ptr;

dcl	     (p,s1,s2,s3,t) ptr;

	     p = pt;
	     if p -> node.type = reference_node then return(p -> reference.symbol);

	     t = p -> operand(1);
	     if t ^= null
	     then do;
		s1 = t -> reference.symbol;
		if ^ t -> reference.shared then goto back;
		if ^ fb_value(s1) then goto back;
		if s1 -> symbol.c_dcl_size <= fix_precision then goto back;
		end;

	     /* output is fixed bin, but precision is too large.  see if we can
	        reduce precision */

	     if p -> operator.op_code = assign then goto ck2;

	     if p -> operator.op_code > mult then goto back;

	     s3 = fix_exp((p -> operand(3)));

	     if ^ fb_value(s3) then goto back;
	     if s3 -> symbol.c_dcl_size > max_p_fix_bin_1 then goto back;

ck2:	     s2 = fix_exp((p -> operand(2)));

	     if ^ fb_value(s2) then goto back;
	     if s2 -> symbol.c_dcl_size > max_p_fix_bin_1 then goto back;

	     /* both operands are fix single, reduce precision */

	     p -> operator.processed = "1"b;
	     p -> operand(1) = declare_temporary((integer_type),(fix_precision),
	      0,null);
	     s1 = p -> operand(1) -> reference.symbol;

back:	     return(s1);
	     end;

free_op:	     proc(pt);

dcl	     (pt,r1) ptr;

	     r1 = pt -> operand(1);
	     if r1 -> reference.ref_count < 2
	     then if ok_to_free
		then call free_node(pt);
		else;
	     else do;
		r1 -> reference.ref_count = r1 -> reference.ref_count - 1;
		ok_to_free = "0"b;
		end;

	     end;

free_exp:      proc(exp);

dcl	     (exp,px,py) ptr,
	     j fixed bin;

	     px = exp;
	     do j = 1 to px -> operator.number;
		py = px -> operand(j);
		if py ^= null
		then do;
		     if j = 1
		     then if py -> reference.ref_count > 1
			then do;
			     py -> reference.ref_count = py -> reference.ref_count - 1;
			     return;
			     end;

		     if py -> node.type = operator_node
		     then call free_exp(py);
		     end;
		end;

	     call free_node(px);
	     end;

check_char_units:	proc;

dcl	     (new,o,s1) ptr;

	     if q -> reference.units = character_
	     then if ^ s -> symbol.char
	     then if ^ s -> symbol.decimal
	     then if ^ s -> symbol.picture
	     then do;
		q -> reference.units = bit_;
		q -> reference.c_offset = q -> reference.c_offset * bits_per_character;

		if q -> reference.offset ^= null
		then if ^ q -> reference.modword_in_offset
		then do;
		     o = q -> reference.offset;
		     if o -> node.type = operator_node
			then s1 = o -> operand(1) -> reference.symbol;
			else s1 = o -> reference.symbol;

		     new = create_operator((mult),3);
		     new -> operand(1) = declare_temporary((integer_type),s1 -> symbol.c_dcl_size + 4,0,null);
		     new -> operand(2) = declare_constant$integer((bits_per_character));
		     new -> operand(3) = o;
		     new -> operator.processed = "1"b;
		     p1, q -> reference.offset = new;
		     end;
		end;

	     end;

/* Convert off set from character_ to digit_ units for unaligned decimal variables */

double_offset:
	procedure;

declare	(new,o,s1) pointer;

	q -> reference.units = digit_;
	q -> reference.c_offset = q -> reference.c_offset * packed_digits_per_character;

	if q -> reference.offset ^= null
	then if ^ q -> reference.modword_in_offset
	     then do;
		     o = q -> reference.offset;

		     if o -> node.type = operator_node
		     then s1 = o -> operand(1) -> reference.symbol;
		     else s1 = o -> reference.symbol;

		     new = create_operator((mult),3);
		     new -> operand(1) = declare_temporary((integer_type),s1 -> symbol.c_dcl_size + 1,0,null);

		     new -> operand(2) = declare_constant$integer((packed_digits_per_character));
		     new -> operand(3) = o;
		     new -> operator.processed = "1"b;
		     p1, q -> reference.offset = new;
		end;

	end /* double_offset */;

/* makes orig_c_offset the new q -> reference.c_offset */

restore_orig_c_offset:	proc;

dcl	(p1,p2,p3,p4) ptr;
dcl	difference fixed bin(31);
dcl	(prec2,prec3) fixed bin(24);

	p2 = q -> reference.offset;

	if p2 -> node.type = operator_node
	     then p4 = p2 -> operand(1);
	     else p4 = p2;
	prec2 = p4 -> reference.symbol -> symbol.c_dcl_size;

	difference = q -> reference.c_offset - orig_c_offset;
	q -> reference.c_offset = orig_c_offset;

	p1 = create_operator(add,3);
	p1 -> operand(2) = p2;
	p3, p1 -> operand(3) = declare_constant$integer(difference);
	prec3 = p3 -> reference.symbol -> symbol.c_dcl_size;
	p1 -> operand(1) = declare_temporary((integer_type),
		min(max_p_fix_bin_1,max(prec2,prec3)  + 1),0,null);
	p1 -> operator.processed = "1"b;

	q -> reference.offset = p1;

	end /* restore_orig_c_offset */;


	end;
