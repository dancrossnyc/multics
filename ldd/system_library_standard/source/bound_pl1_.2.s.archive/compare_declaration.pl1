/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


compare_declaration:	proc(pa,pb,ignore_aligned) returns(bit(1) aligned);

/* Modified 780712 by PG for unsigned */

dcl	(asize,bsize,pa,pb,a,b,ba,bb,as,bs) ptr;

dcl	(c_asize,c_bsize) fixed bin(31);

dcl	(i,ndims) fixed bin;

dcl	(array_bit, a_reference, b_reference) bit(1) aligned;

dcl	ignore_aligned bit(1) aligned;

dcl	(null,string,unspec) builtin;

	asize,bsize = null;
	c_asize,c_bsize = 0;
	if pa = pb then goto exit;
	if pa = null | pb = null then goto fail;

	if pa->node.type = reference_node
	then do;

		/* we're comparing for purposes of optimizing an assignment */

		a = pa->reference.symbol;
		array_bit = pa->reference.array_ref;
		a_reference = "1"b;
	end;
	else do;

		/* we're comparing entire declaration OR we were called by compare_declaration to process a structure member */

		a = pa;
		array_bit = a->symbol.dimensioned;
		a_reference = "0"b;
	end;

	if pb->node.type = reference_node
	then do;
		b = pb->reference.symbol;
		array_bit = array_bit | pb->reference.array_ref;
		b_reference = "1"b;
	end;
	else do;
		b = pb;
		array_bit = array_bit | b->symbol.dimensioned & ^ a_reference;
		b_reference = "0"b;
	end;

	if string(a->symbol.data_type) ^= string(b->symbol.data_type) then goto fail;
	if a->symbol.binary ^= b->symbol.binary then goto fail;
	if a->symbol.real ^= b->symbol.real then goto fail;
	if a->symbol.scale ^= b->symbol.scale then goto fail;
	if a->symbol.aligned ^= b->symbol.aligned
	then	if ^ ignore_aligned
		then	goto fail;
		else	if ^ (a->symbol.bit | a->symbol.char)
			then	goto fail;

	if a -> symbol.unsigned ^= b -> symbol.unsigned
	then go to fail;

	if a->symbol.varying ^= b->symbol.varying then goto fail;

	if a->symbol.picture
	then	if unspec(a->symbol.general->reference.symbol->symbol.initial->picture_image)
			^=unspec(b->symbol.general->reference.symbol->symbol.initial->picture_image)
		then	goto fail;

	asize = a->symbol.dcl_size;
	bsize = b->symbol.dcl_size;
	c_asize = a->symbol.c_dcl_size;
	c_bsize = b->symbol.c_dcl_size;

	if (a->symbol.bit|a->symbol.char) & a_reference & ^array_bit & ^a->symbol.varying
	then do;
		asize = pa->reference.length;
		c_asize = pa->reference.c_length;
	end;

	if (b->symbol.bit|b->symbol.char) & b_reference & ^array_bit & ^b->symbol.varying
	then do;
		bsize = pb->reference.length;
		c_bsize = pb->reference.c_length;
	end;

	if c_asize^=c_bsize
	then	goto fail;

	if asize^=bsize
	then	if a_reference & b_reference
		then	if ^ compare_expression(asize,bsize)
			then	goto fail;
			else;
		else 	goto fail;

	if array_bit
	then	if a->symbol.dimensioned^=b->symbol.dimensioned
		then	if a_reference
			then	goto fail;
			else do;
				if b->symbol.dimensioned
				then	if b->symbol.array->array.own_number_of_dimensions ^= 0
					then	goto fail;
					else;
				else	if a->symbol.array->array.own_number_of_dimensions ^= 0
					then	goto fail;
				array_bit = "0"b;
			end;

	if array_bit
	then do;
		if a->symbol.array->array.own_number_of_dimensions ^= b->symbol.array->array.own_number_of_dimensions
		then	goto fail;

		if a_reference
		then do;
			if a->symbol.array->array.number_of_dimensions ^= b->symbol.array->array.number_of_dimensions
			then	goto fail;

			if a->symbol.array->array.interleaved ^= b->symbol.array->array.interleaved
			then	goto fail;

			ndims = b->symbol.array->array.number_of_dimensions;
		end;
		else	ndims = b->symbol.array->array.own_number_of_dimensions;

		ba = a->symbol.array->array.bounds;
		bb = b->symbol.array->array.bounds;

		do i = 1 to ndims while(ba ^= null);
			if a->symbol.star_extents^=b->symbol.star_extents then goto fail;

			if ba->bound.c_lower ^= bb->bound.c_lower then goto fail;
			if ba->bound.c_upper ^= bb->bound.c_upper then goto fail;

			if ba->bound.lower=null & bb->bound.lower^=null
			then do;
				if bb->bound.lower->node.type^=reference_node
				then	goto fail;
				if ^bb->bound.lower->reference.symbol->symbol.constant
				then	goto fail;
			end;		else

			if ba->bound.lower^=null & bb->bound.lower=null
			then do;
				if ba->bound.lower->node.type^=reference_node
				then	goto fail;
				if ^ba->bound.lower->reference.symbol->symbol.constant
				then	goto fail;
			end;		else

			if ^compare_expression((ba->bound.lower),(bb->bound.lower))
			then	goto fail;

			if ba->bound.upper=null & bb->bound.upper^=null
			then do;
				if bb->bound.upper->node.type^=reference_node
				then	goto fail;
				if ^bb->bound.upper->reference.symbol->symbol.constant
				then	goto fail;
			end;		else

			if ba->bound.upper^=null & bb->bound.upper=null
			then do;
				if ba->bound.upper->node.type^=reference_node
				then	goto fail;
				if ^ba->bound.upper->reference.symbol->symbol.constant
				then	goto fail;
			end;		else

			if ^compare_expression((ba->bound.upper),(bb->bound.upper))
			then	goto fail;

			ba = ba->bound.next;
			bb = bb->bound.next;
		end;
	end;

	if a->symbol.structure
	then do;
		as = a->symbol.son;
		bs = b->symbol.son;

		do while(as ^= null);
			if bs=null
			then	goto fail;

			if ^compare_declaration(as,bs,"0"b)
			then	goto fail;

			as = as->symbol.brother;
			bs = bs->symbol.brother;
		end;

		if bs^=null
		then	goto fail;
	end;

exit:
	return("1"b);

fail:
	return("0"b);

%include semant;

%include array;
%include nodes;
%include picture_image;
%include reference;
%include symbol;

	end compare_declaration;
