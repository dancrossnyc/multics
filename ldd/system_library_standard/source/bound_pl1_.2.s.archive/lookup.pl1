/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* Modified Dec 1978 by David Spector to process suppress_cross_ref context bit
   to suppress redundant int entry/label cross-references */
/* Modified: 27 Dec 1980 by PCK to implement by name assignment */

lookup: proc(blk,stmnt,tree,s,context) returns(bit(1) aligned);

dcl	(blk,stmnt,tree,s,d,q,b,f,name) ptr;
dcl	fully_qualified bit(1);
dcl	(n,k) fixed bin(15);
dcl	pl1_stat_$LHS ptr ext static;

dcl	(addr,null,substr,string) builtin;

%include semant;


%include symbol;

%include label;

%include reference;
%include semantic_bits;

%include block;

%include statement;


%include token;

%include list;

%include cross_reference;

%include nodes;

			/*      */

	n = 0;
	d = null;
	if tree->node.type = reference_node
		then do;
			q = tree->reference.length;
			name = tree->reference.symbol;
		     end;
		else do;
			q = null;
			name = tree;
		     end;

/* search for an applicable declaration for which this is a fully qualified reference.  Remember any
applicable declaration for which this is a partialy qualified reference.  If two
or more applicable declarations can be found and this is not a fully qualified reference
to any of them, this is an ambiguous reference.  If only one applicable declaration
can be found, this is a valid partialy qualified reference to that declaration.  The search
for an applicable declaration begins in the current block and continues outward until
the first applicable declaration is found.  After the first applicable
declaration is found, all additional searching is confined to the block in which the
first applicable declaration was found.  */

	b = blk;
	do while(b^=null);
		s = name->token.declaration;
		do while(s^=null);
			fully_qualified = "1"b;
			if s->symbol.block_node^=b
			then	goto not_applicable;
			if s->node.type = label_node
				then if q = null
					then go to applicable;
					else go to not_applicable;
			if q = null then do;
					if s->symbol.member then fully_qualified = "0"b;
					go to applicable;
				      end;
			k = 1;
			f = s;
			do while(k <= q->list.number);
				do f=f->symbol.father repeat f->symbol.father while(f^=null);
					if f->symbol.token = q->list.element(k) then go to next_name;
					fully_qualified = "0"b;
				end;
				go to not_applicable;
next_name:
				k = k+1;
			end;

			fully_qualified = fully_qualified & f->symbol.father=null;
		
applicable:
		
			if fully_qualified then go to exit;
			n = n+1;
			d = s;
not_applicable:
			s = s->symbol.multi_use;
		end;

		if n>0 then b = null;else b = b->block.father;
	end;

	if n>1 then call semantic_translator$abort(221,name);
	if d = null then return("0"b);
	s = d;

exit:
	if tree->node.type = reference_node & ^def_context.by_name_lookup
		then do;
			tree->reference.length = null;
			tree->reference.symbol = s;
		     end;
	if s->node.type = symbol_node
		then	if ^def_context.ignore_based
			then do d=s repeat d->symbol.father while(d^=null);
				d->symbol.allocate = "1"b;
			end;

	if stmnt ^= null
	then if stmnt->node.type = statement_node & ^def_context.suppress_cross_ref
	then do;
		d = create_cross_reference();
		q = s;
		if s -> node.type ^= label_node
		then if s -> symbol.condition
		     then q = s -> symbol.equivalence;
		d->cross_reference.next = q->symbol.cross_references;
		q->symbol.cross_references = d;
		string(d->cross_reference.source_id) = string(stmnt->statement.source_id);
	end;

	return("1"b);

	end lookup;
