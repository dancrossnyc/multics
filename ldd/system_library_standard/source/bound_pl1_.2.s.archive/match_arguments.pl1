/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* Modified 780712 by PG for unsigned
   Modified 790812 by RAB to fix 1797 (erroneous WARNING 47 when array of
	character strings passed to function expecting star extents lengths.)
   Modified 4 October 1980 by M. N. Davidoff to eliminate internal static.  Fixes 2023.
*/
/* format: style3,tree */
match_arguments:
     procedure (pa, pb) returns (bit (1) aligned);

dcl	pa		ptr;
dcl	pb		ptr;

/* automatic */

dcl	a		ptr;
dcl	a_reference	bit (1) aligned;
dcl	a_root		ptr;
dcl	b		ptr;
dcl	found_brother	bit (1) aligned;
dcl	parent_is_scalar	bit (1) aligned;

/* builtin */

dcl	(null, string, unspec)
			builtin;

%include semant;
%include array;
%include nodes;
%include picture_image;
%include reference;
%include symbol;

/* If a is a reference, the length given in the reference is used as the size
   and the bounds and dimensionality of b are ignored.  A star extent of b is
   considered to match any corresponding extent of a.  If the arguments are
   structures, this procedure makes a prefix walk over the members to ensure
   that the members match. */

	b = pb;

	if pa = b
	then return ("1"b);

	if pa = null
	then return ("0"b);

	if pa -> node.type = reference_node
	then do;
		a_reference = "1"b;
		a = pa -> reference.symbol;
	     end;
	else do;
		a_reference = "0"b;
		a = pa;
	     end;

	parent_is_scalar = "0"b;
	a_root = a;
	do while (a ^= a_root -> symbol.father);
	     if b = null
	     then return ("0"b);

	     if a_reference
	     then if a = a_root
		then if ^match (pa, b)
		     then return ("0"b);
		     else ;
		else if ^match ((a -> symbol.reference), b)
		     then return ("0"b);
		     else ;
	     else if ^match (a, b)
		then return ("0"b);

	     if a -> symbol.son ^= null
	     then do;
		     a = a -> symbol.son;
		     b = b -> symbol.son;
		end;
	     else do;
		     found_brother = "0"b;
		     do while (a ^= a_root -> symbol.father & ^found_brother);
			if a -> symbol.brother = null | a = a_root
			then do;
				if b -> symbol.brother ^= null & a ^= a_root
				then return ("0"b);

				a = a -> symbol.father;
				b = b -> symbol.father;
			     end;
			else do;
				a = a -> symbol.brother;
				b = b -> symbol.brother;
				found_brother = "1"b;
			     end;
		     end;
		end;
	end;

	return ("1"b);

/* Check if two nodes match. */

match:
     procedure (pa, pb) returns (bit (1) aligned);

dcl	pa		ptr;
dcl	pb		ptr;

/* automatic */

dcl	a		ptr;
dcl	asize		ptr;
dcl	b		ptr;
dcl	ba		ptr;
dcl	bb		ptr;
dcl	bsize		ptr;
dcl	c_asize		fixed bin (24);
dcl	c_bsize		fixed bin (24);

	b = pb;
	asize, bsize = null;
	c_asize, c_bsize = 0;

	if pa = b
	then return ("1"b);

	if a_reference
	then a = pa -> reference.symbol;
	else a = pa;

	if string (a -> symbol.data_type) ^= string (b -> symbol.data_type) | a -> symbol.binary ^= b -> symbol.binary
	     | a -> symbol.real ^= b -> symbol.real | a -> symbol.scale ^= b -> symbol.scale
	     | a -> symbol.aligned ^= b -> symbol.aligned | a -> symbol.unsigned ^= b -> symbol.unsigned
	     | a -> symbol.varying ^= b -> symbol.varying
	then return ("0"b);

	if ^a_reference & a -> symbol.dimensioned ^= b -> symbol.dimensioned
	then return ("0"b);

	if a -> symbol.float | a -> symbol.fixed
	then do;
		c_asize = a -> symbol.c_dcl_size;
		c_bsize = b -> symbol.c_dcl_size;
	     end;

	else if a -> symbol.char | a -> symbol.bit
	     then do;
		     if a_reference & ^a -> symbol.varying
		     then do;
			     asize = pa -> reference.length;
			     c_asize = pa -> reference.c_length;
			end;
		     else do;
			     asize = a -> symbol.dcl_size;
			     c_asize = a -> symbol.c_dcl_size;
			end;

		     bsize = b -> symbol.dcl_size;
		     c_bsize = b -> symbol.c_dcl_size;
		end;

	if a -> symbol.picture
	then if unspec (a -> symbol.general -> reference.symbol -> symbol.initial -> picture_image)
		^= unspec (b -> symbol.general -> reference.symbol -> symbol.initial -> picture_image)
	     then return ("0"b);
	     else ;

	else if a -> symbol.area
	     then do;
		     asize = a -> symbol.dcl_size;
		     bsize = b -> symbol.dcl_size;
		     c_asize = a -> symbol.c_dcl_size;
		     c_bsize = b -> symbol.c_dcl_size;
		end;

	if b -> symbol.star_extents
	then if bsize = null & (c_asize ^= c_bsize | asize ^= null)
	     then return ("0"b);
	     else ;
	else if c_asize ^= c_bsize | ^compare_expression (asize, bsize)
	     then return ("0"b);

	if a_reference & a -> symbol.father = null
	then if pa -> reference.array_ref ^= b -> symbol.dimensioned
	     then return ("0"b);

	if b -> symbol.dimensioned
	then do;
		if a -> symbol.array -> array.own_number_of_dimensions > b -> symbol.array -> array.number_of_dimensions
		then call semantic_translator$abort (269, a);

		if a -> symbol.array -> array.number_of_dimensions ^= b -> symbol.array -> array.number_of_dimensions
		     & (a -> symbol.array -> array.own_number_of_dimensions
		     ^= b -> symbol.array -> array.own_number_of_dimensions | a -> symbol.father = null
		     | b -> symbol.father = null)
		then return ("0"b);

		ba = a -> symbol.array -> array.bounds;
		bb = b -> symbol.array -> array.bounds;

		if bb = null
		then return ("0"b);

		do while (ba ^= null & bb ^= null);
		     if b -> symbol.star_extents
		     then if constant_extent ((bb -> bound.lower)) & constant_extent ((bb -> bound.upper))
			     & (ba -> bound.c_lower ^= bb -> bound.c_lower
			     | ba -> bound.c_upper ^= bb -> bound.c_upper | ^constant_extent ((ba -> bound.lower))
			     | ^constant_extent ((ba -> bound.upper)))
			then return ("0"b);
			else ;

		     else if ba -> bound.c_lower ^= bb -> bound.c_lower | ba -> bound.c_upper ^= bb -> bound.c_upper
			     | ^same_extent_bounds ((ba -> bound.lower), (bb -> bound.lower))
			     | ^same_extent_bounds ((ba -> bound.upper), (bb -> bound.upper))
			then return ("0"b);

		     ba = ba -> bound.next;
		     bb = bb -> bound.next;
		end;
	     end;

	else if a_reference
	     then if pa -> reference.array_ref
		then if ^parent_is_scalar
		     then return ("0"b);
		     else ;
		else parent_is_scalar = "1"b;
	     else if a -> symbol.dimensioned
		then return ("0"b);

	return ("1"b);

same_extent_bounds:
     procedure (a, b) returns (bit (1) aligned) reducible;

dcl	a		ptr;
dcl	b		ptr;

	if constant_extent (a)
	then if constant_extent (b)
	     then return ("1"b);
	     else return ("0"b);
	else if constant_extent (b)
	     then return ("0"b);
	     else return (compare_expression (a, b));
     end same_extent_bounds;

/* An extent is considered constant if it is null or a reference to a constant
   symbol. */

constant_extent:
     procedure (p) returns (bit (1) aligned) reducible;

dcl	p		ptr;

	if p = null
	then return ("1"b);

	else if p -> node.type = reference_node
	     then if p -> reference.symbol -> symbol.constant
		then return ("1"b);

	return ("0"b);
     end constant_extent;

     end match;

     end match_arguments;
