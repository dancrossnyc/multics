/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


simplify_expression:	proc(input_tree,constant,input_tree_modified);

dcl	(input_tree,tree,s) ptr;

dcl	(i,constant,const(2:3)) fixed bin;
dcl	fix_bin fixed bin based;

dcl	(input_tree_modified,modified(2:3)) bit(1) aligned;

dcl	null builtin;

	tree = input_tree;

	constant = 0;

	input_tree_modified = "0"b;

	if tree->node.type = reference_node
	then do;
		s = tree->reference.symbol;

		if	s->node.type = symbol_node
		then if	s->symbol.constant
		then if	s->symbol.fixed
		then if	s->symbol.binary
		then if	s->symbol.c_word_size = words_per_fix_bin_1
		then if	s->symbol.scale = 0
		then do;
			constant = s->symbol.initial->fix_bin;
			input_tree_modified = "1"b;
		end;

		return;
	end;

	if tree->node.type ^= operator_node
	then	return;

	if tree->operator.op_code^=add
	&  tree->operator.op_code^=sub
	&  tree->operator.op_code^=mult
	then	return;

	do i = 2 to tree->operator.number;
		call simplify_expression((tree->operand(i)),const(i),modified(i));
	end;

	if modified(2)
	&  modified(3)
	then do;
		if tree->operator.op_code=add
		then	constant = const(2)+const(3);
		else

		if tree->operator.op_code=sub
		then	constant = const(2)-const(3);
		else	constant = const(2)*const(3);

		input_tree_modified = "1"b;

		return;
	end;

	do i=2 to 3;
		if modified(i)
		then	if tree->operand(i)->node.type = operator_node
			then	tree->operand(i) = declare_constant$integer((const(i)));
	end;

	return;

%include language_utility;
%include nodes;
%include op_codes;
%include operator;
%include reference;
%include symbol;
%include system;

	end simplify_expression;
