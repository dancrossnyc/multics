/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


check_star_extents:	proc(ps,plist);

/* In any procedure call, if an operator_node having an output temporary with a length
   expression appears as an argument in a position corresponding to a star extent parameter
   descriptor (or in any position if the procedure is declared options(variable)), that
   procedure and any procedures invoked in arguments following that one must be made
   non-quick in order to avoid destroying the argument by shortening the stack.  (This fixes
   bug 816.)  This program is called only when it has been determined by the caller that
   descriptors are required.

   Written by:	Richard A. Barnes	13 December 1973	*/

dcl	(ps,plist) ptr;

dcl	options_variable bit(1) aligned;
dcl	(i,k,n) fixed bin;
dcl	(a,arg_list,s) ptr;

dcl	(fixed,null) builtin;

dcl	make_non_quick entry(ptr, bit (36) aligned);

%include nodes;
%include block;
%include symbol;
%include reference;
%include operator;
%include list;


	s = ps;
	arg_list = plist;

	n = arg_list -> list.number - fixed(s -> symbol.returns,1);

	do k = 1 to n;
	     a = arg_list -> element(k);
	     if a -> node.type = operator_node
	     then if a -> operand(1) -> reference.length ^= null
	     then do;
		if s -> symbol.constant
		then if s -> symbol.equivalence ^= null
		     then do;
			     s -> symbol.equivalence -> block.why_nonquick.stack_extended_by_args = "1"b;
			     s -> symbol.equivalence -> block.no_stack = "0"b;
			end;

		do i = k + 1 to n;
		     call make_non_quick((arg_list -> element(i)), "001"b);	/* block.why_nonquick.stack_extended_by_args */
		     end;

		return;
		end;

	     end;
end;
