/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* Modified 780814 by PG to fix 1771 (incorrectly diagnosing refer-with-like error.
   Modified: 30 August 1979 by PCK to remove refer-with-like diagnostic
   Modified: 30 August 1979 by PCK to fix 1804 and 1823
   Modified: 22 September 1980 by M. N. Davidoff to set symbol.structure after like attribute is expanded.  Fixes 2013.
   Modified: 16 February 1981 by M. N. Davidoff to allow likes to likes and to implement 1952
	(diagnose dcl 1 a, 2 b like a).
   Modified: 23 February 1981 by M. N. Davidoff to resolve like references before any like attributes are expanded.
	Fixes 2057.
   Modified: 10 June 1981 by PCK to fix bug 2074--faulting on declarations
     with factored like attributes and qualifed references as like targets
*/
/* format: style3,ifthenstmt */
context_processor:
     procedure (P_root, P_abort);

dcl	P_root		ptr;			/* (Input) */
dcl	P_abort		label variable;		/* (Output) */

/* automatic */

dcl	b		ptr;
dcl	root		ptr;
dcl	s		ptr;

/* builtin */

dcl	null		builtin;

/* external static */

dcl	pl1_stat_$check_ansi
			bit (1) aligned external static;
dcl	pl1_stat_$cur_statement
			ptr external static;
dcl	1 pl1_stat_$statement_id
			external static,
	  2 file_number	bit (8),
	  2 line_number	bit (14),
	  2 statement_number
			bit (5);

%include semant;
%include block;
%include nodes;
%include reference;
%include context;
%include declare_type;
%include symbol;
%include token;

/* program */

	root = P_root;

/* Make a prefix walk over the block nodes to process the contextual
   declarations. */

	do b = root repeat next_prefix_walk_block_node (b) while (b ^= null);
	     call process_block_context (b);
	end;

/* Make a prefix walk over the block nodes to resolve all like references. */

	P_abort = process_next_block;

	do b = root repeat next_prefix_walk_block_node (b) while (b ^= null);
	     if b -> block.like_attribute
	     then do s = b -> block.declaration repeat s -> symbol.next while (s ^= null);
		     pl1_stat_$cur_statement = s;
		     pl1_stat_$statement_id = s -> symbol.source_id;

		     if s -> node.type = symbol_node
		     then if s -> symbol.like then call resolve_like_reference (b, s);
		end;
process_next_block:
	end;

/* Make a prefix walk over the block nodes to expand all like attributes. */

	do b = root repeat next_prefix_walk_block_node (b) while (b ^= null);
	     if b -> block.like_attribute
	     then do s = b -> block.declaration repeat s -> symbol.next while (s ^= null);
		     pl1_stat_$cur_statement = s;
		     pl1_stat_$statement_id = s -> symbol.source_id;

		     if s -> node.type = symbol_node
		     then if s -> symbol.like then call expand_like_attribute (s);
		end;
	end;

	return;

/* Find the next block node in a prefix walk of all the block nodes. */

next_prefix_walk_block_node:
     procedure (P_b) returns (ptr);

dcl	P_b		ptr;			/* (Input) */

/* automatic */

dcl	b		ptr;

/* program */

	if P_b -> block.son ^= null then return (P_b -> block.son);

	do b = P_b repeat b -> block.father while (b ^= null);
	     if b -> block.brother ^= null then return (b -> block.brother);
	end;

	return (b);
     end next_prefix_walk_block_node;

/* Process the contextual declarations in a block. */

process_block_context:
     procedure (P_b);

dcl	P_b		ptr;			/* (Input) */

/* automatic */

dcl	b		ptr;
dcl	c		ptr;
dcl	cb		ptr;
dcl	d		ptr;
dcl	found_block	ptr;
dcl	found_context	bit (1) aligned;
dcl	found_declaration	ptr;
dcl	s		ptr;

/* Scan the context chain for this block.  For each context, search the block
   symbol chains from this block out. */

	b = P_b;
	do c = b -> block.context repeat c -> context.next while (c ^= null);
	     found_block, found_declaration = null;
	     found_context = "0"b;

	     if c -> context.parameter
	     then do;
		     do d = c -> context.token -> token.declaration repeat d -> symbol.multi_use
			while (d ^= null & ^found_context);

			if d -> symbol.block_node = b /* possible previous declaration */
			then if context_matches (c, d)
			     then do;
				     found_context = "1"b;
				     found_block = b;
				     found_declaration = d;
				end;
		     end;

/* Undeclared parameters must not have contextually derived attributes added
   to them, even for strong contexts such as ptr, area, file, since a default
   statement could still supply proper attributes. */

		     if ^found_context
		     then do;
			     d = create_symbol (b, (c -> context.token), by_context);
			     d -> symbol.parameter = "1"b;
			     call print (214, d);
			end;
		end;

	     else do;
		     do cb = b repeat cb -> block.father while (cb ^= null & ^found_context);
			do d = c -> context.token -> token.declaration repeat d -> symbol.multi_use
			     while (d ^= null & ^found_context);

			     if d -> symbol.block_node = cb
						/* possible previous declaration */
			     then if context_matches (c, d)
				then do;
					found_context = "1"b;
					found_block = cb;
					found_declaration = d;
				     end;
			end;
		     end;

		     if ^found_context
		     then do;
			     found_declaration =
				create_symbol ((root -> block.son), (c -> context.token), by_context);
			     found_declaration -> symbol.data_type = c -> context.bits.types;

			     if c -> context.ptr then call print (69, found_declaration);
			     if c -> context.area then call print (74, found_declaration);
			     if c -> context.file then call print (75, found_declaration);
			     if c -> context.condition then call print (133, found_declaration);
			end;
		end;

	     if c -> context.condition
	     then if b ^= root -> block.son & b ^= found_block
		then do;				/* make storage for condition in current block */
			s = create_symbol (b, (c -> context.token), by_compiler);
			s -> symbol.condition = "1"b;
			s -> symbol.equivalence = found_declaration;
		     end;
	end;

	return;

/* Match a context with a previous declaration. */

context_matches:
     procedure (c, d) returns (bit (1) aligned);

dcl	c		ptr;			/* (Input) */
dcl	d		ptr;			/* (Input) */

	if c -> context.parameter
	then if d -> symbol.level > 1 then return ("0"b);
	     else if d -> node.type = symbol_node then d -> symbol.parameter = "1"b;

	if c -> context.condition
	then if d -> symbol.condition & d -> symbol.dcl_type = by_compiler then return ("0"b);

	return ("1"b);
     end context_matches;

     end process_block_context;

/* Resolve the like reference in a like attribute. */

resolve_like_reference:
     procedure (P_b, P_s);

dcl	P_b		ptr;			/* (Input) */
dcl	P_s		ptr;			/* (Input) */

/* automatic */

dcl	like		ptr;
dcl	s		ptr;

/* program */

	s = P_s;

/* There may not be a like reference.  The parse already printed a message. */

	if s -> symbol.general = null then return;

/* Make sure a structure qualified reference doesn't have subscripts or
   pointer qualification.  The parse should really have caught this. */

	like = null;

	if s -> symbol.general -> node.type = reference_node
	then do;
		if s -> symbol.general -> reference.offset ^= null
		     | s -> symbol.general -> reference.qualifier ^= null
		then call error_exit (119, s);
		if s -> symbol.general -> reference.symbol -> node.type = symbol_node
		then like = s -> symbol.general -> reference.symbol;
	     end;

	if like = null
	then if ^lookup (P_b, s, (s -> symbol.general), like, ""b) then call error_exit (120, s);

	if like -> node.type ^= symbol_node then call error_exit (120, s);

	s -> symbol.general = like -> symbol.reference;

return_from_resolve_like_reference:
	return;

/* Print an error message and exit resolve_like_reference. */

error_exit:
     procedure (m, s);

dcl	m		fixed bin (15);		/* (Input) */
dcl	s		ptr;			/* (Input) */

	s -> symbol.general = null;
	call print (m, s);
	goto return_from_resolve_like_reference;
     end error_exit;

     end resolve_like_reference;

/* Expand a like attribute. */

expand_like_attribute:
     procedure (P_s);

dcl	P_s		ptr;			/* (Input) */

/* automatic */

dcl	1 check_ansi	aligned,
	  2 like_to_like	bit (1),
	  2 sons_contain_like
			bit (1);
dcl	like		ptr;
dcl	like_count	fixed bin;
dcl	p		ptr;
dcl	q		ptr;
dcl	s		ptr;

/* internal static */

dcl	max_like_loop_count fixed bin internal static options (constant) initial (100);
						/* Error message 389 must be changed when this limit is
						   changed. */

/* program */

	s = P_s;
	check_ansi = ""b;

	if s -> symbol.general = null then return;	/* already expanded the like attribute */

	if s -> symbol.son ^= null then call error_exit (189, s);

/* Find the ultimate like target. */

	like = s -> symbol.general -> reference.symbol;
	check_ansi.like_to_like = like -> symbol.like;
	do like_count = 1 to max_like_loop_count while (like -> symbol.general ^= null);
	     if like = s then call error_exit (388, s);	/* recursive like reference */
	     like = like -> symbol.general -> reference.symbol;
	end;

	if like_count > max_like_loop_count then call error_exit (389, s);

/* If the like reference refers to a father of the symbol with the like
   attribute we are expanding, then the like attribute is recursive. */

	do p = s -> symbol.father repeat p -> symbol.father while (p ^= null);
	     if like = p then call error_exit (388, s);
	end;

/* Expand the like attribtue. */

	call copy_expression$copy_sons (like, s);

	s -> symbol.general = null;

	if s -> symbol.son = null then call error_exit (120, s);

	s -> symbol.structure = "1"b;

/* Code for correctly diagnosing misuse of the refer option would go here. */

	do p = s -> symbol.son repeat p -> symbol.next while (p ^= null);
	     p -> symbol.dcl_type = s -> symbol.dcl_type;
	     p -> symbol.block_node = s -> symbol.block_node;
	     p -> symbol.source_id = s -> symbol.source_id;

/* The following code for the case in which symbol.param_desc is on is
   probably never executed.  Nothing in the parse sets that bit.  It seems
   like an attempt to make the like attribute in descriptors work by changing
   the name of the symbol node to something that will never be looked up.  See
   PL/I suggestion 1812. */

	     if s -> symbol.param_desc
	     then p -> symbol.token = s -> symbol.token;
	     else do;
		     p -> symbol.multi_use = p -> symbol.token -> token.declaration;
		     p -> symbol.token -> token.declaration = p;
		end;

/* Like attributes in sons are expanded because fathers precede sons in the
   symbol.next chain. */

	     if p -> symbol.like then check_ansi.sons_contain_like = "1"b;

	     q = p;
	end;

	q -> symbol.next = s -> symbol.next;
	s -> symbol.next = s -> symbol.son;

	if pl1_stat_$check_ansi
	then do;
		if check_ansi.like_to_like then call print (386, s);
		if check_ansi.sons_contain_like then call print (387, s);
	     end;

return_from_expand_like_attribute:
	return;

/* Print an error message and exit expand_like_attribute. */

error_exit:
     procedure (m, s);

dcl	m		fixed bin (15);		/* (Input) */
dcl	s		ptr;			/* (Input) */

	call print (m, s);
	goto return_from_expand_like_attribute;
     end error_exit;

     end expand_like_attribute;

/* Print an error message. */

print:
     procedure (m, s);

dcl	m		fixed bin (15);		/* (Input) */
dcl	s		ptr;			/* (Input) */

	call error_$no_text (m, s -> symbol.source_id, s);
     end print;

     end context_processor;
