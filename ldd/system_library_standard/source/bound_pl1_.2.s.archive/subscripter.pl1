/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* Modified: 79/04/23 by PCK to implement 4-bit decimal */

subscripter: proc(blk,stmnt,tree,subs,s) returns(ptr);

dcl	(blk,stmnt,tree,s,subs,subscript,e,sum,a,b,q,off,pdssl) ptr;
dcl	(n,i,k,n_minus_k) fixed bin(15);
dcl	(units,cunits) fixed binary(3);
dcl	(c_sum,c_subscript,coff) fixed bin(31);

dcl	op_table(4) bit(9) aligned initial(mod_bit,""b,mod_byte,mod_half);

dcl	pl1_stat_$eis_mode bit(1) aligned ext static;

dcl	(addr,null,substr,string,fixed,char,max) builtin;

	c_sum = 0;
	sum = null;
	n = subs->list.number;
	if s->node.type = label_node
	then do;
		b = create_bound();
		b->bound.c_lower = s->label.low_bound;
		b->bound.c_upper = s->label.high_bound;
		b->bound.c_multiplier = 1;
		k = 1;
	     end;
	else do;
		a = s->symbol.array;
		b = a->array.bounds;
		k = a->array.number_of_dimensions;
		if n < k then call print(81);
		if n > k & ^s->symbol.entry then call print(82);
	     end;

	if tree->reference.put_data_sw
	then pdssl = create_list(k);
	else pdssl = null;

/* The parse produces separate subscript and argument lists when possible
	ex 1:	a(i)(arg1,arg2);
   but when the syntax is ambiguous, it produces a single list:
	ex 2:	a(i).b(first_arg_or_subs,...last_arg_or_subs);

   Note that the elements are pushed, i.e., the list for example 2 is:
	(last_arg_or_subs,...first_arg_or_subs,i)
*/
	do i = n-k+1 to n;			/* take last _k of _n elements */

	     subscript = subs->list.element(i);
	     if subscript->node.type = token_node
		then if subscript->token.type = dec_integer
			then do;
				c_subscript = token_to_binary(subscript);

/* Check the subscript against the constant array bounds.
   The following code works for all cases except where someone has already put a reference
   to the constant in the bound.upper or bound.lower fields, _a_n_d that constant is zero.
*/


				if b->bound.lower = null | b->bound.c_lower ^= 0
				then if c_subscript < b->bound.c_lower
				     then call print(184);
				if b->bound.upper = null | b->bound.c_upper ^= 0
				then if c_subscript > b->bound.c_upper
				     then call print(184);
				subscript = null;
			     end;
			else;
		else if subscript->node.type=operator_node
		     then subscript = copy_expression((subscript));

	     if subscript ^= null
		then do;
			this_context = "0"b;
			subscript = expression_semantics(blk,stmnt,subscript,this_context);
			if def_this_context.aggregate then call print(84);
			subscript = convert$to_integer(subscript,integer_type);
		     end;


	     if substr(stmnt->statement.prefix,7,1) /* subscriptrange */
	          then if b->bound.lower^=null | b->bound.upper^=null | subscript^=null
		then do;
			if subscript = null then subscript = declare_constant$integer(c_subscript);
			if b->bound.lower = null
				then b->bound.lower = declare_constant$integer((b->bound.c_lower));
			if b->bound.upper = null
				then b->bound.upper = declare_constant$integer((b->bound.c_upper));
			q = create_operator(bound_ck,4);
			q->operand(2) = subscript;
			q->operand(3) = copy_expression(b->bound.lower);
			q->operand(4) = copy_expression(b->bound.upper);
			subscript = expression_semantics((s->symbol.block_node),stmnt,q,this_context);
		     end;

	     if b->bound.c_multiplier^=0
	     then	if subscript=null
		then	c_sum = c_sum+b->bound.c_multiplier*c_subscript;
		else	if b->bound.c_multiplier=1
			then	sum = addf(sum,subscript);
			else	sum = addf(sum,multf
					(declare_constant$integer((b->bound.c_multiplier)),subscript));

	     else	if subscript=null
		then	if c_subscript=1
			then	sum = addf(sum,copy_expression(b->bound.multiplier));		else
			if c_subscript^=0
			then	sum = addf(sum,multf
				(copy_expression(b->bound.multiplier),declare_constant$integer(c_subscript)));
			else;
		else	sum = addf(sum,multf(copy_expression(b->bound.multiplier),subscript));

	     if pdssl ^= null		/* save the subscripts for data i/o in the opposite order */
		then if subscript ^= null
			then pdssl->list.element(n-i+1) = share_expression(subscript);
			else pdssl->list.element(n-i+1) = declare_constant$integer(c_subscript);

	     b = b->bound.next;
	end;

/* strip off the subscripts we used, return the extra ones (possible arguments to a
   subscripted entry variable, for example. */

	if k ^= n
	then do;
		n_minus_k=n-k;
		b = create_list(n_minus_k);
		do i = 1 to n_minus_k;	/* take first n_minus_k elements of subs */
		     b->element(i) = subs->element(i);
		end;
		subs = b;
	end;
	else	subs = null;

/* Subtract the virtual origin from the sum of the multipliers times the subscripts. */

	e = tree;
	if s->node.type = symbol_node
	then if tree = s->symbol.reference
		then	e = copy_expression((tree));

	if pdssl ^= null
	then do;
		e->reference.subscript_list=pdssl;
		blk->block.plio_ssl->symbol.c_word_size = max(blk->block.plio_ssl->symbol.c_word_size,k+1);
	end;

	if s->node.type = label_node
	then do;
		units = word_;
		c_sum = c_sum-s->label.low_bound;
	end;
	else do;
		units = a->array.offset_units;
		c_sum = c_sum-a->array.c_virtual_origin;
		if a->virtual_origin^=null
		then	if sum=null
			then do;
				sum = create_operator(negate,2);
				sum->operator.operand(2) = copy_expression(a->virtual_origin);
			end;
			else	sum = subf(sum,copy_expression(a->array.virtual_origin));

		if	units=character_
		then if	pl1_stat_$eis_mode
		then if	s->symbol.bit
		     |	s->symbol.binary
		     |	s->symbol.ptr
		then do;
			units = bit_;
			c_sum = c_sum * bits_per_character;
			if sum^=null
			then	sum = multf(sum,declare_constant$integer(bits_per_character));
		end;
	end;

/* call the offset_adder to add the offset produced from the subscripts to the offset
   produced by the declaration processor.  All conversions of units are done by the
   offset adder.  */

	off = e->reference.offset;
	coff = e->reference.c_offset;
	cunits = e->reference.units;
	call offset_adder(off,coff,cunits,(e->reference.modword_in_offset),sum,c_sum,units,"0"b,e->reference.fo_in_qual);
	e->reference.offset = off;
	e->reference.c_offset = coff;
	e->reference.units = cunits;
	e->reference.modword_in_offset = "0"b;

/* If the units of the offset are less than words and the offset is variable the top operator
   in the offset expression must be a mod operator.  */

	if	^pl1_stat_$eis_mode
	then if	e->reference.units < word_
	then if	e->reference.offset ^= null
	then do;
		q = create_operator(op_table(e->reference.units),3);
		q->operand(3) = e->reference.offset;
		e->reference.offset = q;
	end;

	e->reference.shared = "0"b;
	e->reference.ref_count = 1;
	if s->symbol.packed then e->reference.padded_ref = "0"b;

	return(e);

/* subroutine to print an error message and abort. */

print: proc(m);

dcl	m fixed bin(15);
dcl	semantic_translator$abort entry(fixed bin(15),ptr);

	call semantic_translator$abort(m,s);

	end print;

/* subroutine to build expressions.  */

addf: proc(a,b) returns(ptr);

dcl	(a,b,c) ptr;
dcl	opcode bit(9) aligned;

	opcode = add;

	if a=null
	then return(b);

	go to common;

subf: entry(a,b) returns(ptr);

	opcode = sub;
	go to common;

multf: entry(a,b) returns(ptr);

	opcode = mult;
common:
	c = create_operator(opcode,3);
	c->operand(2) = a;
	c->operand(3) = b;

	return(c);

	end addf;

%include semant;
%include block;
%include label;
%include symbol;
%include array;
%include reference;
%include statement;
%include list;
%include token;
%include operator;
%include op_codes;
%include boundary;
%include nodes;
%include token_types;
%include declare_type;
%include semantic_bits;
%include system;


	end subscripter;
