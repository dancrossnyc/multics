/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


declare_structure: proc(ps);

/* Modified 780724 by PG to call validate before copying storage_class of adam. */
/* Modified 790419 by PCK to implement 4-bit decimal */

dcl	(adam,base,bit_offset,allocate,ps,s,d,b,off,q) ptr;
dcl	n fixed bin(15);
dcl	coff fixed bin(31);
dcl	cdesc bit(1);

dcl	pl1_stat_$eis_mode bit(1) aligned ext static;

dcl	(min,max,null,fixed,divide,string,substr) builtin;

%include semant;
%include symbol;
%include array;
%include block;
%include reference;
%include operator;
%include statement;
%include op_codes;
%include nodes;
%include statement_types;
%include boundary;
%include list;
%include system;

	s = ps;
	b = s->symbol.block_node;
	adam = s;

/* Scan the structure to:
	1. propagate the refer and exp_extent bits upward.
	2. determine the boundary required by each member.
	3. determine the boundary required by the structure.
	4. determine the packing of the structure.
	5. Validate the structure and each of its members.
	6. Apply the father's alignment attributes to the sons.
	7. Copy the level 1 defined structure's base ref to the members.
	8. Copy the level 1 storage class to the members.
								*/
	cdesc = s->symbol.parameter | s->symbol.return_value | s->symbol.controlled;

	if cdesc
	then	s->symbol.descriptor = declare_descriptor$param((s->symbol.block_node),null,s,null,"1"b);

	call structure_scan(s);

/* set base to the locator value used to reference the level 1 structure.
   and set bit_offset the the proper bit_pointer value to use for packed members.	*/

	allocate,bit_offset,base = null;

	if	s->symbol.auto
	then if	s->symbol.exp_extents
	then do;
		base = declare_pointer(b);
		allocate = create_operator(allot_auto,2);
		allocate->operand(1) = base;
	end;

	if s->symbol.based
	then do;
		base = s->symbol.reference->reference.qualifier;
		if s->symbol.unaligned & s->symbol.packed
		then	if pl1_stat_$eis_mode
			then	s->symbol.reference->reference.fo_in_qual = "1"b;
			else	bit_offset = create_operator(bit_pointer,2);
	end;

	if s->symbol.parameter
	then do;
		if ^s->symbol.allocated
		then do;
			base = create_operator(param_ptr,3);
			base->operand(2) = declare_constant$integer(fixed(s->symbol.location));
			base->operand(3) = b;
		end;
		else	base = declare_pointer(b);

		if s->symbol.unaligned & s->symbol.packed
		then	if pl1_stat_$eis_mode
			then	s->symbol.reference->reference.fo_in_qual = "1"b;
			else do;
				bit_offset = create_operator(bit_pointer,2);
				bit_offset->operand(2) = base;
			end;
	end;

/* Set the qualifier field of the structure's reference node.  */

	s->symbol.reference->reference.qualifier = base;

/* set the padded bit for references to the level one structure.	*/

	if s->symbol.packed
	then do;
		s->symbol.reference->reference.padded_ref =
			^(s->symbol.based|s->symbol.parameter|s->symbol.defined);

		if s->symbol.reference->reference.padded_ref
		then	s->symbol.boundary = max(s->symbol.boundary,word_);
	end;

/* If this is a packed unaligned structure set the offset to include the bit_pointer.  */

	if bit_offset ^= null
	then do;
		s->symbol.reference->reference.offset = bit_offset;
		s->symbol.reference->reference.units = bit_;
	end;

/* Set the aliasable bit */

	if s -> symbol.based | s -> symbol.parameter | s -> symbol.defined | s -> symbol.external
	then s -> symbol.aliasable = "1"b;

/* scan the structure again and:

	1. compute each member's size and offset.
	2. determine the level 1 structure's size.
	3. make each member based on the level 1 structure's base pointer.
	4. initialize each member.
	5. set each members padded bit.
	6. process each entry variable's descriptor list and return descriptor.
	7. give each member the storage class bits of the level one structure.
								*/

	call get_structure_size(s);

	s->symbol.reference->reference.c_length = 0;

/* Make sure the value will fit in a segment */

	if s -> symbol.c_word_size > max_words_per_variable
	then call semantic_translator$error (357,s);

/* If this has constant extents and requires a descriptor, declare_descriptor
   must be called after all the extents are calculated in order to actually
   declare the constant descriptor.  If the descriptor template used for
   entry definitions has not been built, declare_descriptor must also be
   called. */

	if cdesc
	then	if s->symbol.descriptor = null
		then s->symbol.descriptor = declare_descriptor((s->symbol.block_node),null,s,null,"1"b);
		else if s->symbol.parameter
		     then if s->symbol.descriptor->reference.symbol->symbol.descriptor = null
			then s->symbol.descriptor = declare_descriptor((s->symbol.block_node),null,s,null,"1"b);


/* If this was automatic with variable extents, fill in the size field of the allot_auto operator */

	if allocate^=null
	then do;
		allocate->operand(2) = copy_expression(s->symbol.word_size);

		q = create_statement$prologue(assignment_statement,b,null,(b->block.prefix));
		q->statement.root = allocate;
	end;

	call initialize(s);

	return;

/* subroutine to:
	1. propagate the refer, exp_extent, star_extent bits upward.
	2. determine the boundary required by each structure member.
	3. determine the boundary required by each structure.
	4. determine the packing of the structure.
	5. Validate the structure and each of its members.
	6. Apply the father's alignment attributes to the sons.
	7. Compute the logical level numbers of the sons.
							*/
structure_scan: proc(ps);

dcl	(ps,d,s) ptr;

	s = ps;

	if s->symbol.member
	then do;
		s->symbol.level = s->symbol.father->symbol.level+1;	/* set logical level */

		if ^(s -> symbol.aligned | s -> symbol.unaligned)
		then do;
			s -> symbol.aligned = s -> symbol.father -> symbol.aligned;
			s -> symbol.unaligned = s -> symbol.father -> symbol.unaligned;
		     end;
	     end;

	if s -> symbol.son = null
	then do;
		call validate (s);
		if s -> symbol.member
		then do;
			string(s->symbol.storage_class) = string(adam->symbol.storage_class);
			s->symbol.equivalence = adam->symbol.equivalence;
		end;
		call get_size(s);
		return;
	     end;

	s->symbol.structure,s->symbol.packed = "1"b;

	do d = s->symbol.son repeat d->symbol.brother while(d^=null);
		call structure_scan(d);
		s->symbol.packed = s->symbol.packed & d->symbol.packed;
		s->symbol.boundary = max(s->symbol.boundary,d->symbol.boundary);
		s->symbol.refer_extents = s->symbol.refer_extents | d->symbol.refer_extents;
		s->symbol.exp_extents = s->symbol.exp_extents |d->symbol.exp_extents;
		s->symbol.star_extents = s->symbol.star_extents | d->symbol.star_extents;
	end;

	call validate(s);

	if s -> symbol.member
	then do;
		string(s->symbol.storage_class) = string(adam->symbol.storage_class);
		s->symbol.equivalence = adam->symbol.equivalence;
	     end;

	if s -> symbol.aligned
	then do;
		s -> symbol.boundary = max(s -> symbol.boundary,word_);
		s -> symbol.packed = "0"b;
	     end;

	if s->symbol.dimensioned
	then	s->symbol.array->array.element_boundary = s->symbol.boundary;

	end structure_scan;

/* subroutine to:
	1.  compute each member's offset.
	2. determine the level 1 structure's size.
	3. make each member based on the level 1 structure's base pointer.
	4. make each member's offset include the proper bit pointer.
	5. initialize each member.
	6. set each members's padded bit.
	7. process each entry vairable's descriptor list and return descriptor.
									*/
get_structure_size: proc(ps);

dcl	(ps,s,d,f,r,q,p,fsize,rv,t) ptr;
dcl	(i,j,k) fixed bin(3);
dcl	 fc_size fixed bin(31);

dcl	opcodes(4) bit(9) aligned initial(bit_to_char,bit_to_word,char_to_word,half_to_word);

dcl	opcode_index(4,7) fixed bin(15) internal static init(0,0,1,0,2,2,2,
						   0,0,0,0,0,0,0,
						   0,0,0,0,3,3,3,
						   0,0,0,0,4,4,4);

dcl	round_const(4,7) fixed bin(15) int static initial(0,0,9,0,36,36,36,
						0,0,0,0, 0, 0, 0,
						0,0,0,0, 4, 4, 4,
						0,0,0,0, 2, 2, 2);

dcl	mod_const(6:7) fixed bin(15) int static initial(2,4);

dcl	mod_ops(6:7) bit(9) aligned  initial(word_to_mod2,word_to_mod4);

dcl	offset_ops(4) bit(9) aligned initial(mod_bit,""b,mod_byte,mod_half);

	s = ps;
	j = s->symbol.boundary;
	f = s->symbol.reference;
	fc_size = 0;
	fsize = null;

	do d = s->symbol.son repeat d->symbol.brother while(d^=null);
		string(d->symbol.storage_class) = string(s->symbol.storage_class);
		d->symbol.aliasable = adam->symbol.aliasable;
		d->symbol.equivalence = adam->symbol.equivalence;
		r = d->symbol.reference;
		r->reference.qualifier = base;
		if pl1_stat_$eis_mode
		     then r -> reference.fo_in_qual = adam -> symbol.reference -> reference.fo_in_qual;
		i = d->symbol.boundary;

/* If this members boundary requirement is less stringent than the boundary
   forced upon it by the preceeding member, no rounding is needed and the
   actual boundary of the member will be up graded to that determined by the
   preceeding member.	*/

		if i<=j
		then do;
			d->symbol.boundary = j;
			go to get_offset;
		end;

/* If the current boundary is less than word then round it to that needed by this member.	*/

		if j < word_
		then do;
			if fsize = null
			then fc_size = divide(fc_size+round_const(j,i)-1,round_const(j,i),31,0);
			else do;
				q = create_operator(opcodes(opcode_index(j,i)),2);
				q->operand(2) = fsize;
				fsize = q;
			end;
		end;

/* If this member needs a mod boundary perform a mod operation on the current boundary.	*/

		if i > word_
		then do;
			if fsize = null
			then fc_size = divide(fc_size+mod_const(i)-1,mod_const(i),31,0)*mod_const(i);
			else do;
				q = create_operator(mod_ops(i),2);
				q->operand(2) = fsize;
				fsize = q;
			end;
		end;

/* set the units of the current boundary equal to the boundary requirement of this member.	*/

		j = i;


/* get this members offset by adding the fathers offset to the fathers current size.*/

get_offset:
		t = f->reference.offset;

		if	t ^= null
		then if	t -> node.type = operator_node
		then if	substr(t -> op_code,1,5) = substr(mod_bit,1,5)
		then	t = t -> operand(3);

		r->reference.offset = t;
		r->reference.c_offset = f->reference.c_offset;
		k,r->reference.units = f->reference.units;

		off = r->reference.offset;
		coff = r->reference.c_offset;

		call offset_adder(off,coff,k,"0"b,(fsize),(fc_size),j,"0"b,r->reference.fo_in_qual);

		r->reference.offset = off;
		r->reference.c_offset = coff;

		if r->reference.c_offset = 0 & r->reference.offset = null
		then	r->reference.units = 0;
		else	r->reference.units = min(k,word_);

/* If the offset is variable and the units are less than word and the offset is an expression
   containing anything otherthan a simple bit_pointer, then create the proper mod operator
   at the top of the expression.	*/

		if	^pl1_stat_$eis_mode
		then if	r->reference.offset ^= null
		then if	r->reference.units < word_
		then do;
			q = r->reference.offset;

			if q->node.type = operator_node
			then	if q->operator.op_code ^=bit_pointer
				then do;
					p = create_operator(offset_ops(r->reference.units),3);
					p->operand(3)=q;
					r->reference.offset = p;
				end;
				else;
			else do;
				p = create_operator(offset_ops(r->reference.units),3);
				p->operand(3) = q;
				r->reference.offset = p;
			end;
		end;

		if	pl1_stat_$eis_mode
		then if	r->reference.units=character_
		then if	d->symbol.bit | d->symbol.binary | d->symbol.ptr
		then do;
			r->reference.units = bit_;
			r->reference.c_offset = r->reference.c_offset * bits_per_character;

			if r->reference.offset^=null
			then do;
				p = create_operator(mult,3);
				p->operand(2) = declare_constant$integer(bits_per_character);
				p->operand(3) = r->reference.offset;
				r -> reference.offset = p;
			end;
		end;

/* set padded bit for this member.	*/

		if d->symbol.packed
		then do;
/* walk father chain looking for next structure element */
			do q = d repeat q->symbol.father while(q^=null);
				if q->symbol.brother ^= null then go to succ;
			end;
succ:
			if q = null
			then	r->reference.padded_ref = ^(d->symbol.based|d->symbol.parameter|d->symbol.defined);
			else	r->reference.padded_ref = q->symbol.brother->symbol.aligned;
		end;

/* If this is an entry variable then process its decriptors.	*/

		if d->symbol.entry
		then do;
			if d->symbol.returns
			then do;
				rv = d->symbol.dcl_size;
				rv->symbol.return_value = "1"b;
				if rv->symbol.structure | rv->symbol.dimensioned | rv->symbol.star_extents
				then do;
					d->symbol.dcl_size = copy_expression(d->symbol.dcl_size);
					call declare(rv);
					d->symbol.dcl_size->symbol.star_extents = rv->symbol.star_extents;
				end;
				else	call declare(rv);
			end;
			do q = d->symbol.general repeat q->element(2) while(q^=null);
				q->element(1)->symbol.param_desc ="1"b;
				call declare((q->element(1)));
			end;
		end;

/* Determine the size of the member.  If it is not a sub-structure it was computed by
   get_size when the boundary was determined, otherwise it is computed now by calling
   get_structure_size.  In both cases the c_length field of the reference node serves
   to hold the units in which the size has been computed.  */

		if d->symbol.structure then call get_structure_size(d);

/* Add this members size to the father's current size.	*/

		call offset_adder(fsize,fc_size,j,"0"b,(d->symbol.word_size),(d->symbol.c_word_size),
			(r->reference.c_length),"0"b,"0"b);
		r->reference.c_length = 0;

		if (d->symbol.char|d->symbol.bit) & ^d->symbol.varying
		then do;
			r->reference.c_length = d->symbol.c_dcl_size;
			r->reference.length = d->symbol.dcl_size;
		end;

		if d->symbol.picture
		then	r->reference.c_length = d->symbol.c_dcl_size;
	end;

/* record the size of this structure in the symbol node, and the units in which the size
   is measured in the reference node.	*/

	s->symbol.reference->reference.c_length = j;
	s->symbol.word_size = fsize;
	s->symbol.c_word_size = fc_size;

/* call get_size to find the size in bits, to find the array size, to improve the units
   in which the size is measured, to round the size to an integeral number of words,etc.	*/

	call get_size(s);

	end get_structure_size;

initialize:	proc(p);

dcl	(p,q,r) ptr;

	r = p;

	do q = r repeat q->symbol.son while(q^=null);

		if  q->symbol.auto
		&  (q->symbol.initialed
		   |q->symbol.area)
		then	call expand_initial(q,null,null);

		call initialize((q->symbol.brother));

	end;

	end initialize;

     end /* declare_structure */;
