/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/*	Modified:	1 July 1977 by RAB to fix 1637	*/
/*	Modified: 26 December 1979 by PCK to implement by name assignment */
/*	Modified: 23 June 1981 by EBush to increase max size of arg lists */

function: proc(blk,stmnt,input_tree,s,context) returns(ptr);

dcl	(blk,stmnt,tree,input_tree,s,p,old,arg_list,arg_list_op,p_desc_list,save_arg_list_op) ptr,
	(a,op,q,r,sa,t) ptr,
	(subs,sym,array_ptr,bound_ptr,based_ref,based_sym,descr_ptr) ptr,
	(newarray,newbound) ptr,
	(i,j,k,n,called,caller) fixed bin(15),
	desc_list ptr,

	descriptors_required bit(1);


dcl	pl1_stat_$locator(128) ptr ext static;
dcl	pl1_stat_$index fixed bin(15) ext static;

dcl	(addr,divide,hbound,length,null,substr) builtin;

%include semant;
%include array;
%include block;
%include declare_type;
%include list;
%include nodes;
%include op_codes;
%include operator;
%include quick_info;
%include reference;
%include semantic_bits;
%include statement;
%include statement_types;
%include symbol;
%include symbol_bits;
%include system;
%include token;
%include token_types;

	if input_tree->operator.processed then return(input_tree);

	if s -> symbol.constant & s -> symbol.equivalence ^= null
	then do;
		called = s -> symbol.equivalence -> block.number;
		caller = blk -> block.number;
		substr(quick_info(called),caller,1) = "1"b;
		if stmnt->statement.force_nonquick
		then do;
			s -> symbol.equivalence -> block.no_stack = "0"b;
			s -> symbol.equivalence -> block.why_nonquick.stack_extended_by_args = "1"b;
		end;
	end;

	tree = input_tree;

	n = 0;
	descriptors_required = "0"b;
	arg_list_op = tree->operand(3);
	arg_list = null;
	p_desc_list = s->symbol.general;

	if arg_list_op^=null
	then	if arg_list_op->operand(2)->list.number=0
		then do;
			save_arg_list_op = arg_list_op;

			arg_list_op  ,
			tree->operand(3) = null;
		end;

	if arg_list_op=null
	then	if p_desc_list=null
		then do;
		        if s->symbol.returns
			   then desc_list = create_list(1);
		        goto process_returns;
		     end;
		else	call print(85);

	if p_desc_list = null
	then do;
		if ^s->symbol.variable_arg_list
		then do;
			call semantic_translator$error(86,s);
			s->symbol.variable_arg_list = "1"b;
		end;

		descriptors_required = "1"b;
		n = arg_list_op->operand(2)->list.number;
	end;
	else do;
		do q = p_desc_list repeat q->element(2) while(q^=null);
			n = n+1;
			descriptors_required = descriptors_required | q->element(1)->symbol.star_extents;
		end;

		if s->symbol.dcl_size ^= null
		then	descriptors_required = descriptors_required | s->symbol.dcl_size->symbol.star_extents;

		if arg_list_op->operand(2)->list.number ^= n then call print(87);
	end;

			/*   process all the arguments   */
	arg_list = arg_list_op->operand(2);

	if arg_list->list.number > max_list_elements - 1
	then call semantic_translator$abort(340,create_token(bindec$vs(max_list_elements-1),dec_integer));

	do k = 1 to divide(n,2,15,0);
		q = arg_list->element(k);
		arg_list->element(k) = arg_list->element(n-k+1);
		arg_list->element(n-k+1) = q;
	end;

	k = arg_list->list.number;
	if s->symbol.returns
	     then k = k+ 1;
	desc_list = create_list(k);

	do k = 1 to arg_list->list.number;
		old=stmnt->statement.back;	/* prepare to nullify statements generated
						   for  k-th argument */
		this_context = "01"b;
		a = arg_list->element(k);
		if p_desc_list ^= null
		then	p = p_desc_list->element(1);
		else	p = null;

		desc_list->list.element(k) = null;

		if a->node.type=operator_node
		then do;
			if a->operator.op_code=assign	/*   assuming the only kind of assignment is to t0   */
			then	arg_list->element(k)  ,
				a = a->operand(2);

			goto by_value;
		end;

		if a->node.type = token_node
		then	if a->token.type & is_constant
			then	goto by_value;

		q = copy_expression((a));
		q = expression_semantics(blk,stmnt,q,this_context);

		if q->node.type^=reference_node
		then do;

			/* operator_semantics won't do right thing if we
			   build dummy assignment with return_value
			   source or varying string target, so we
			   match_arguments first.	*/

			if q->node.type^=operator_node
			then	goto undo;
			if q->op_code^=std_call
			then	goto undo;
			if ^q->operand(1)->reference.symbol->symbol.return_value
			then	if ^q->operand(1)->reference.symbol->symbol.varying
				then	goto undo;
			a = q;

			if p^=null
			then	if ^match_arguments((q->operand(1)),p)
				then	goto by_value;

			if descriptors_required
			then	desc_list->list.element(k) = share_expression((q->operand(1)->reference.symbol->symbol.descriptor));

			goto next;
		end;

		if q -> reference.symbol -> node.type ^= symbol_node	/* arg was label array constant element */
		then	goto undo;

		if q->reference.symbol->symbol.constant			/* arg was builtin like null */
		then	goto undo;

			/*   checking for cross-sections or defined arrays   */

		sym = q->reference.symbol;
		array_ptr = sym->symbol.array;
		descr_ptr = sym->symbol.descriptor;

		if def_this_context.cross_section
		then do;
			bound_ptr = array_ptr->array.bounds;
			subs = q->reference.offset;

			if sym->symbol.defined & ^ sym->symbol.overlayed
			then do;
				if sym->symbol.isub
				then do;
					call semantic_translator$error(296,sym);
					goto undo;
				end;

				based_ref = copy_expression(sym->symbol.equivalence);

				if ^lookup((sym->symbol.block_node),stmnt,based_ref,based_sym,"0"b)
				then	call semantic_translator$abort(175,sym);

				if based_ref->node.type^=reference_node
				then	call semantic_translator$abort(343,sym);

				based_ref->reference.symbol = based_sym->symbol.token;
				if subs=null
				then do;
					subs = copy_expression(based_ref->reference.offset);
					sym = based_sym;
				end;
				else do;
					t = copy_expression(based_ref->reference.offset);
					j = 0;

					do i = 1 to subs->list.number;
test:
						j = j+1;
						if j>t->list.number
						then	call semantic_translator$abort(175,sym);

						if t->element(j)->node.type^=token_node
						then	goto test;

						if t->element(j)->token.type^=asterisk
						then	goto test;

						if subs->element(i)->node.type=token_node
						then	if subs->element(i)->token.type=asterisk
							then	;
							else	t->element(j) = subs->element(i);
						else	t->element(j) = subs->element(i);
					end;

					subs = t;
					sym = based_sym;
				end;

				array_ptr = sym->symbol.array;
				descr_ptr = sym->symbol.descriptor;
				bound_ptr = array_ptr->array.bounds;

				based_ref->reference.offset = null;
				q = expression_semantics(blk,stmnt,based_ref,this_context);

				if q=sym->symbol.reference
				then	q = copy_expression((q));

				q->reference.offset = subs;
			end;
			else	based_ref = null;

			newarray = create_array();
			newarray->array = array_ptr->array;
			newarray->array.number_of_dimensions  ,
			newarray->array.own_number_of_dimensions = 0;
			newbound = null;

			do i = 1 to subs->list.number;
				if subs->element(i)->node.type=token_node
				then if	subs->element(i)->token.type=asterisk
				then do;
					newarray->array.number_of_dimensions  ,
					newarray->array.own_number_of_dimensions = newarray->array.number_of_dimensions + 1;

					if newbound=null
					then do;
						newbound = create_bound();
						newarray->array.bounds = newbound;
					end;
					else do;
						newbound->bound.next = create_bound();
						newbound = newbound->bound.next;
					end;

					newbound->bound = bound_ptr->bound;
					newbound->bound.next = null;

					if bound_ptr->bound.lower = null
					then	subs->element(i) = declare_constant$integer((bound_ptr->bound.c_lower));

					else	subs->element(i) = copy_expression(bound_ptr->bound.lower);
				end;

				bound_ptr = bound_ptr->bound.next;
			end;

			sym->symbol.array = newarray;
			sym->symbol.descriptor = null;

			if p^=null
			then if	^match_arguments(q,p)
			then do;
				call semantic_translator$error(47,q);
				sym->symbol.array = array_ptr;
				sym->symbol.descriptor = descr_ptr;
				goto undo;
			end;

			sym->symbol.array = array_ptr;
			q->reference.offset = copy_expression(sym->symbol.reference->reference.offset);

			if q -> reference.qualifier ^= null
			then do;
				pl1_stat_$index = pl1_stat_$index + 1;
				if pl1_stat_$index > hbound(pl1_stat_$locator,1)
				then	call print(70);
				pl1_stat_$locator(pl1_stat_$index) = q;
			end;

			q = subscripter(blk,stmnt,q,subs,sym);
			q->reference.offset = expression_semantics(blk,stmnt,(q->reference.offset),"0"b);
			call simplify_offset(q,"0"b);

			if q -> reference.qualifier ^= null
			then	pl1_stat_$index = pl1_stat_$index - 1;

			q->reference.array_ref = "1"b;
			sym->symbol.array = newarray;
		end;
		else do;
			if p^=null
			then if	^match_arguments(q,p)
			then do;
				call print(47);
				go to undo;
			end;

			if sym->symbol.defined
			then if sym->symbol.structure | q->reference.array_ref
			then do;
				q = defined_reference(blk,stmnt,q,null,sym,this_context);
				if q->reference.offset ^= null
				then do;
					q->reference.offset = expression_semantics(blk,stmnt,(q->reference.offset),"0"b);
					call simplify_offset(q,"0"b);
				end;
			end;
		end;

		a = q;
		sa = a->reference.symbol;
		call propagate_bit(sa,set_bit);
		call propagate_bit(sa,passed_as_arg_bit);

		if sa->symbol.static
		|  sa->symbol.controlled
		then	call propagate_bit(sa,aliasable_bit);

		if	sa->symbol.entry
		then if	sa->symbol.internal
		then if	sa->symbol.constant
		then do q = sa->symbol.block_node repeat q->block.father while(q^=null);
			q->block.flush_at_call = "1"b;
		end;

		if desc_list->list.element(k)^=null		/*   descriptor already made previously   */
		then	if ^descriptors_required
			then	call print(89);
			else	;
		else	if descriptors_required	/*   since not made elsewhere already   */
			then	desc_list->list.element(k) = declare_descriptor(blk,stmnt,sa,
					(a->reference.qualifier),
					a->reference.array_ref || def_this_context.cross_section);

		sym->symbol.array = array_ptr;
		sym->symbol.descriptor = descr_ptr;

		go to next;

undo:
		if old = null		/* if this was the first statement of the prologue       */
		then q = blk->block.prologue; /* the back ptr was null, so use the block.prologue ptr. */
		else q = old->statement.next;
		do q = q repeat q->statement.next while(q^=stmnt);
			q->statement.root = null;
			q->statement.statement_type = null_statement;
		end;

by_value:
		op = create_operator(assign,2);

		if p=null
		then do;
			q = create_symbol(null,null,by_compiler);
			q->symbol.temporary = "1"b;
			op->operand(1) = q->symbol.reference;
		end;
		else	op->operand(1) = p->symbol.reference;

		op->operand(2) = a;
		a  ,
		op = expression_semantics(blk,stmnt,op,this_context);

		if op->node.type=operator_node
		then	op = op->operand(1);

		if descriptors_required
		then	desc_list->list.element(k) = declare_descriptor(blk,stmnt,(op->reference.symbol),
					(op->reference.qualifier),(op->reference.array_ref));

next:
		arg_list->element(k) = a;

		if p_desc_list^=null
		then	p_desc_list = p_desc_list->element(2);
	end;

process_returns:
	if stmnt->statement.statement_type=call_statement
	&  def_context.top
	then	if ^s->symbol.returns
		then	;
		else do;
			do p = s->symbol.dcl_size repeat p->symbol.dcl_size while(p->symbol.entry);
				q = create_operator(std_call,3);
				q->operand(2) = tree->operand(2);
				q->operand(3) = create_operator(std_arg_list,3);
				q->operand(3) = tree->operand(3);

				tree->operand(2) = expression_semantics(blk,stmnt,q,"0"b);
				tree->operand(3) = null;

				if ^p->symbol.returns
				then	goto ret;
			end;

			call print(88);
		end;

	else	if ^s->symbol.returns
		then	call print(263);

	if s->symbol.returns
	then do;
		if arg_list_op=null
		then	tree->operand(3)  ,
			arg_list_op = save_arg_list_op;

		n = n+1;
		a = arg_list;
		arg_list_op->operand(2),arg_list = create_list(n);

		do k = 1 to n-1;
			arg_list->element(k) = a->element(k);
		end;

		q = s->symbol.dcl_size;

		if q->symbol.star_extents then descriptors_required = "1"b;

		if q->symbol.structure | q->symbol.dimensioned | q->symbol.star_extents
		then do;

			/* we get a unique copy of the return_value and declare it to fix bugs 1217 and 1311. */

			q = copy_expression(s->symbol.dcl_size);
			call declare(q);
		end;

		if descriptors_required
		then do;
			desc_list->list.element(n) = copy_expression(q->symbol.descriptor);

			if q->symbol.star_extents
			then do;
				desc_list->list.element(n)->reference.shared = "0"b;
				desc_list->list.element(n)->reference.ref_count = 1;
			end;
		end;

		tree->operand(1)  ,
		arg_list->element(n)  ,
		r = copy_expression(q->symbol.reference);
		r->reference.shared = "0"b;
		r->reference.ref_count = 2;

		if q->symbol.star_extents & (q->symbol.bit|q->symbol.char) & ^ q->symbol.varying
		then do;
			op = create_operator(desc_size,2);
			op->operand(1) = declare_temporary(integer_type,max_length_precision,0,null);
			op->operand(2) = desc_list->list.element(n);
			op->operator.processed = "1"b;
			desc_list->list.element(n)->reference.ref_count = 2;
			r->reference.length = op;
		end;
		else	r->reference.length = null;

		if q->symbol.dimensioned | q->symbol.structure | q->symbol.star_extents
		then do;
			def_context.aggregate = q->symbol.dimensioned | q->symbol.structure;

			if def_context.aggregate & def_context.by_name_assignment
			then call print(382);

			if q->symbol.star_extents
			then do;

				/* protect stack extension from shorteninng
				   by other procedures in this expression
				   (fixes 1637)	*/

				stmnt->statement.force_nonquick = "1"b;
				call make_non_quick((stmnt->statement.root),"001"b);
			end;

			q = create_statement(assignment_statement,
				(stmnt->statement.back),null,(stmnt->statement.prefix));
			q->statement.root = tree;

			arg_list->element(n)->reference.ref_count = 3;
		end;
	end;

	if descriptors_required
	then do;
		arg_list_op->operand(3)  = desc_list;
		call check_star_extents(s,arg_list);
	end;

/* Prepare a storage_block temporary large enough to hold
   the argument list.  Caution ****** this code depends on the
   format of the Multics standard argument list.  */

	if arg_list_op^=null
	then do;
		if descriptors_required
		then	n = n+n;

		if s->symbol.internal | s->symbol.variable
		then	n = n+1;

		arg_list_op->operand(1) = declare_temporary(storage_block_type,(n+1)*2,0,null);
	end;

ret:
	return(tree);

/* subroutine to print and error message and abort. */

print: proc(m);

dcl	m fixed bin(15);

dcl	pp ptr;

	if m^=47
	then	call semantic_translator$abort(m,s);

	pp = q;

	if pp->node.type=operator_node then pp = pp->operand(1);
	if pp->node.type=reference_node then pp = pp->reference.symbol;

	if pp->symbol.dcl_type^=by_compiler
	then	call semantic_translator$error(m,q);

	end print;


	end function;
