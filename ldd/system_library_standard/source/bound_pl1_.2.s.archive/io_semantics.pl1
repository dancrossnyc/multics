/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1990   *
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(87-06-26,Huen), approve(87-06-26,MCR7712), audit(87-12-01,RWaters),
     install(87-12-01,MR12.2-1005):
     Fix bug2164
  2) change(90-08-24,Huen), approve(90-08-24,MCR8187),
     audit(90-09-07,Zimmerman), install(90-10-17,MR12.4-1046):
     pl1_2224: Fix the PL1 compiler use of variables that are targets of "read
     into" statements.
                                                   END HISTORY COMMENTS */


io_semantics:proc(bb,ss,tt) ;
	dcl    (bb,ss,tt) ptr;

	/* Written by P. A. Belmont on 9-29-71
	   called by expression_semantics "on the way down"
	   upon encountering any of the  "outer" io op_codes:
	   get_file,get_string,put_file,put_string,open_file,
	   xxx_file for various xxx's

	   or "inner op_codes:
	   get_list_trans,put_list_trans,get_edit_trans,
	   put_edit_trans,get_data_trans,put_data_trans.
	*/


	/* updated 12-17-74 to make not_bytebuffer in psr.job smarter and to add bit_string bit */

	/* updated 7-31-74 to add propagate_bit at line 913,
		abnormal_return for keyto (release-2,action(19),keyto_join:  */

	/* updated 12-22-77 by P. Krupp to  fix bugs 1657, 1658, 1680          */
	/* Modified 780616 by PG for unsigned */
	/* Modified 790110 by RAB to fix 1813 (referenced but not set not diag for file vars) */
          /* Modified 4-10-87 by RW to fix bug 2164 */

dcl type bit (36);
dcl opcode_temp bit(9) aligned;
dcl (a,b,cs,ns,vs,q,r,s,t,tp,tp1,dp) ptr;
dcl (locate_var,locate_set,locate_size) ptr;
dcl transop bit(9) aligned;
dcl convtype bit(36) aligned;
dcl (i,n,m,PS_offset,lal) fixed bin(15);
dcl no_byte bit(1) aligned;
dcl cbs fixed bin(24);
dcl strlen fixed bin(31);
dcl assign_list(21) ptr;
dcl end_of_join ptr;

/* builtins */

dcl (addr, binary, bit, length, mod, null, substr, string) builtin;

dcl job bit(36) aligned;
dcl job_additions bit(36) aligned;
dcl bb36 bit(36) aligned based;
dcl constsize fixed bin(35);
dcl stringdesc bit(36) aligned;

dcl fab2mod2(7) ptr aligned;
dcl fab2template_b bit(504) aligned based(addr(fab2mod2));
dcl 1 fab2template based(addr(fab2mod2)),
	2 bits bit(36) aligned,
	2 name char(32) aligned,
	2 ( ls,ps,bs ) fixed bin(15),
	2 title168p	ptr;

dcl pl1_stat_$generate_symtab ext bit(1);
dcl pl1_stat_$check_ansi ext bit(1) aligned;

dcl rand_index(35) fixed bin(15) static internal init(2,2,1,4,4, 4,1,1,1,1, 3,1,1,1,1,
					    1,1,1,1,4, 3,3,3,1,1, 1,1,1,2,0,
					    0,0,0,5,0);


/* program */

	t=tt;
	if t->operator.op_code >= terminate_trans then goto main_io_operator;

transmission_operators:

	transop=t->operator.op_code;
	tp=t->operator.operand(2);

	if tp->node.type=operator_node
	then if tp->op_code=join then
		do;
		/* builtin, processing a pseudovariable target
		   of get-list or get-edit, will replace the PV
		   with join(assign(temp,PV),temp,assign(PV,temp)) in the cases
		   onsource, onchar, pageno.  This is because
		   these PVs are implemented as calls instead of
		   as storage references.  io_semantics must
		   now rearange things.

		   builtin must have completely processed its things
		   and operator_semantics must copy the tree ("tt")
		   argument back into the tree-proper. */

		tt=tp;			/* replace GET with JOIN */
		t->operand(2)=tp->operand(2);	/* GET's target is now the "temp"  */
		tp->operand(2)=t;		/*  yielding JOIN(ASSIGN(temp,PV),GET(-,temp),ASSIGN(PV,temp)) */
		tp=t->operand(2);		/* tp points to the target of GET */
		end;

	if tp->node.type=token_node then
		do;
		if ^(transop=put_list_trans|transop=put_edit_trans) then goto err471;
		if (tp -> token.type & is_constant) ^= is_constant
		then go to err472;

		tp, t -> operator.operand (2) = convert (tp, decoded_type (binary (tp -> token.type, 9)));
		end;

	if tp->node.type=operator_node then
		do;
		if ^(transop=put_list_trans|transop=put_edit_trans) then
			goto err471;
		tp=tp->operator.operand(1);
		end;

	if tp->node.type=label_node
		then convtype=local_label_var_type;
	else if tp->reference.symbol->node.type=label_node
		then convtype=local_label_var_type;
	else if tp->reference.symbol->symbol.constant
	     & (tp->reference.symbol->symbol.entry | tp->reference.symbol->symbol.format)
		then convtype=substr(string(tp->reference.symbol->symbol.attributes),1,36);
	else convtype=(36)"0"b;

	if convtype^=(36)"0"b
		then if transop=put_list_trans
			then do;
			t->operator.operand(2)=create_operator(assign,2);
			t->operator.operand(2)->operator.operand(2)=tp;
			t->operator.operand(2)->operator.operand(1),tp=declare_temporary(convtype,0,0,null);
			t->operator.operand(2)->operator.processed="1"b;
			end;
			else call semantic_translator$abort(358,tp);

	if tp->reference.symbol->symbol.picture
	then do;
		tp->reference.symbol->symbol.general->reference.symbol->symbol.allocate = "1"b;

		if transop=put_list_trans
		then do;
			t->operator.op_code = put_field;
			t->operand(1) = declare_constant$integer((tp->reference.c_length));
		     end;
	     end;

	type = substr (string (tp -> reference.symbol -> symbol.attributes), 1, 36);

	if (type & computational_mask) = ""b		/* is the symbol computational? */
	then if (transop = put_data_trans) | (transop = put_list_trans)	/* Not computational, is this a put? */
	     then do;				/* yes. */
			t->operand(1) = declare_descriptor(bb,ss,(tp->reference.symbol),
					(tp->reference.qualifier),"0"b);
			if pl1_stat_$check_ansi
			then do;
				if t->operand(2)->node.type = operator_node
				then	n = 352;
				else	n = 351;
			 	call semantic_translator$error(n,tp);
			end;
		end;
	     else go to err472;

	if transop=put_data_trans then
		do;
		t->operator.operand(1)=tp->reference.subscript_list;
		tp=tp->reference.symbol;
			do while(tp^=null);
			tp->symbol.put_in_symtab="1"b;
			tp=tp->symbol.father;
			end;
		return;
		end;

	if (type & arithmetic_mask) ^= ""b		/* arithmetic? */
	then	if transop=put_list_trans
		then do;
			t->operator.op_code=put_field;
			t->operator.operand(2)=convert$from_builtin((t->operand(2)),char_type);
			t->operand(1)=declare_constant$integer((t->operand(2)->operand(1)->reference.c_length));
			end;
		else t->operand(1)=declare_descriptor(bb,ss,(tp->reference.symbol),(tp->reference.qualifier),"0"b);

	if (type & string_mask) ^= ""b		/* string? */
			/* NOTE: we do NOT make up a descriptor
				in the case of a pictured value.
				The lack of one tips off the code generator. */

	then do;		/* string case - must manufacture a descriptor */
			/* Note: we must here handle a substr as a
			   storage reference (i.e., the symbol of the
			   whole string but a reference with a possibly
			   shorter length).  declare_descriptor would
			   return a descriptor for the whole string;  the
			   situation is _n_o_t analogous to argument passing
			   since in that case a temporary is made.  */

		if tp -> reference.symbol -> symbol.bit
		then if tp -> reference.varying_ref
		     then stringdesc = "1010100"b;	/* descriptor type 20 */
		     else stringdesc = "1010011"b;	/* descriptor type 19 */
		else if tp -> reference.varying_ref
		     then stringdesc = "1010110"b;	/* descriptor type 22 */
		     else stringdesc = "1010101"b;	/* descriptor type 21 */

		substr(stringdesc,8,1)=tp->reference.symbol->symbol.packed;
		q=null;

		if tp->reference.varying_ref then
			do;
			s=tp->reference.symbol;
			if s->symbol.dcl_size=null then
			constsize=s->symbol.c_dcl_size;
			else	do;
				q=copy_expression(s->symbol.dcl_size);
				if s->symbol.refer_extents then
				call refer_extent(q,(tp->reference.qualifier));
				string(context)="0"b;
				q = expression_semantics(bb,ss,q,context);
				end;
			end;

		else	do;	/* non varying */
			if tp->reference.length=null then constsize=tp->reference.c_length;
			else	q=copy_expression(tp->reference.length);
			end;

		if q=null then
			do;
			substr(stringdesc,13,24)=substr(addr(constsize)->bb36,13,24);
			t->operator.operand(1)=declare_constant(stringdesc,arg_desc_type,length(stringdesc),0);
			end;
		else	do;
			dp,t->operator.operand(1)=create_operator(make_desc,3);
			dp->operator.operand(1)=declare_temporary(arg_desc_type,length(stringdesc),0,null);
			dp->operator.operand(2)=declare_constant(stringdesc,arg_desc_type,length(stringdesc),0);
			dp->operator.operand(3)=q;
			end;
		end;

	if transop<=get_edit_trans then
		do;
		tp=tp->reference.symbol;
		call propagate_bit(tp,set_bit);
		call propagate_bit(tp,passed_as_arg_bit);
		end;

	return;

err471:
	n=471;
	goto  abort_trans;

err472:
	n=472;

abort_trans:
	if t->operator.operand(2)->node.type=operator_node then n=n+3;
	call semantic_translator$error(n,tp);
	return;

main_io_operator:
	vs,cs=ss;
	if ss->statement.labels=null then goto keep_statement;
	cs=create_statement((ss->statement.statement_type),ss,null,(ss->statement.prefix));
	cs->statement.root=ss->statement.root;
	ss->statement.root=null;
	ss->statement.statement_type=null_statement;
	return;

keep_statement:
	lal=0;
	end_of_join=null;
	ns=cs->statement.next;
	b=bb;
	if b->block.plio_ps=null then
		do;
		call io_semantics_util$make_ps(b);
		b -> block.why_nonquick.io_statements = "1"b;
		b -> block.no_stack = "0"b;
		end;


		/* Map of PS for the curious:

		PS|00 Stack_Frame_p
		PS|02 Symbol_Table_Top_p
		PS|04 Symbol_Table_Block_p
		PS|06 Format_Area_p
		PS|08 Subscript_List_p
		PS|10 Abnormal_Return_Label
		PS|16 Source_p	(addr(file) or addr(FFSB) or addr(ref))
		PS|18 Special_List_p	/Set_P_p
		PS|20 Copy_File_p
		PS|21			/Variable_Bit_Length
		PS|22 Job
		PS|23 Number
		PS|24 Value_p		/Variable_p
		PS|26 Descriptor
		PS|27 ..........
		PS|28 Offset
		PS|29 Prep_sw		/Locking_sw
		PS|30 New_Format_sw
		.....
		PS|48 Key (char(256) varying  )
							*/
	m=t->operator.number;
		t->operator.operand(m)=convert((t->operator.operand(m)),bit_type);
		job=t->operator.operand(m)->reference.symbol->symbol.initial->bb36;
		job_additions="0"b;
		/* See: io_statement_parse;  the options etc are recorded as a bit 36. */
	m=m-1;

			/* Now handle the special cases and then call expression_semantics
			   for all the ordinary operands. Check that all items but
			   into and from are scalar. */

	if substr(job,4,3)^="0"b then				/* data,edit,list */
		do;
		call io_data_list_semantics(b,cs,(t->operator.operand(4)));
		if t->operator.operand(4)->operator.op_code=get_data_trans then
			do;
			if lal<20 then lal=lal+1;
			else goto err467;
			assign_list(lal)=t->operator.operand(4);
			end;
		t->operator.operand(4)=null;
		goto loop1;
		end;

	if substr(job,20,1) then goto locate_prelim;		/* locate */

loop1:
	do i=1 to m;
	if t->operator.operand(i)=null then goto end_loop1;
	string(context)="0"b;

	if i=1 then if (job & "000000000000000000000000101"b)^="0"b
		then def_context.evaluate_offset="1"b;
			/* force evaluation of offset for aggregate FROM,INTO */

	t->operand(i) = expression_semantics(b,cs,(t->operand(i)),context);
	if t -> operand (i) -> node.type = label_node
	     then call semantic_translator$abort(78,null); /* illegal label constant */
	if t -> operand(i) -> node.type = reference_node
	then if t -> operand (i) -> reference.symbol -> node.type = label_node
	     then call semantic_translator$abort(78,null); /* illegal label constant */
	if i=1 then	if (job & "00000000000000000000000010101"b) ^="0"b	/* into,from,(ref) */
			then goto end_loop1;
	if def_context.aggregate then goto err62;	/* scalar */
end_loop1:
	end;
/* 





		JOB BITS

	INPUT(PARSE)	AS ALTERED(HEREIN)		TO RUNTIME

	1  file
	2  string option
	3 		varying
	4  data
	5  edit
	6  list
	7  get
	8  put
	9  page
	10 line
	11 skip
	12 copy-file
	13 p1p2
	14 bit_string
	15 unlock
	16 read
	17 write
	18 rewrite
	19 delete
	20 locate
	21 key
	22 keyto
	23 keyfrom
	24 set		set
	25 into
	26 ignore
	27 from
	28					rel-6
	29					rel-5	NB: RELEASE-NUMBER 6-bits
	30					rel-4	    copied and reset to 0 by RECIO
	31					rel-3
	32					rel-2
	33					rel-1
	34 open		not-byte-buffer		not-byte-buffer
	35
	36		packedptr			packedptr

	*/

loop2:
	do i=1 to 29,
		34;	/* OPEN,TITLE,PSIZE,LSIZE */
	if substr(job,i,1) then
		do;
		tp=t->operator.operand(rand_index(i));
		goto action(i);
		end;
action(3):					/* varying */
action(6):					/* list */
action(9):					/* page */
action(13):					/* p1p2 */

end_loop2:
	end;
/*  */
exit:
	if end_of_join ^=null then
		do;
		if job_additions^="0"b then job=job|job_additions;
		substr(job,28,6)="000010"b;	/* release 2 */

				/* release-2 adds: abnormal-return after KEYTO.  See comment
					at keyto_join:  
				   release-1 adds: char(256) var KEYs
						not_byte_buffer switch  */
		end_of_join->operator.operand(1)=declare_constant$bit(job);	/* for record_io, stream_prep operators */
					/* the bit36 "job" may have been changed  */
		lal=lal+1;
		assign_list(lal)=end_of_join;
		end;
	vs=create_statement(assignment_statement,(cs->statement.back),null,(cs->statement.prefix));
	vs->statement.generated,vs->statement.processed="1"b;
	if lal=1 then vs->statement.root=assign_list(1);
	else	do;
		vs->statement.root,tp=create_operator(join,lal);
			do i=1 to lal;
			tp->operator.operand(i)=assign_list(i);
			end;
		end;


	/* original operator is nulled out */
	do lal=1 to m+1;
	t->operator.operand(lal)=null;
	end;


	return;
err62:
	n=62;
	goto abort_null;

err114:
	n=114;
	goto abort_tp;

err115:
	n=115;
	goto abort_tp;

err468:
	n=468;
	tp=q;
	goto abort_tp;

err461:
	n=461;
	goto abort_tp;

err462:
	n=462;
	goto abort_tp;

err463:
	n=463;
	goto abort_tp;

err464:
	n=464;
	goto abort_tp;

err465:
	n=465;
	goto abort_tp;

err466:
	n=466;
	goto abort_null;

err467:
	n=467;
	goto abort_null;


abort_null:
	tp=null;
abort_tp:
	call semantic_translator$error(n,tp);
	if n=467 then return;
	goto end_loop2;


/*  */

action(12):								/* copy_file */
	PS_offset=ps_copy;
	goto test_file;
action(1):								/* file */
	PS_offset=ps_source;
test_file:
	if ^tp->reference.symbol->symbol.file then goto err462;
	goto set_addr;

action(11):								/* skip */
	if tp=null then tp=declare_constant$integer(1);
action(10):								/* line */
action(26):								/* ignore */
	call assign_ps(tp,ps_number,"int",null);
	goto end_loop2;

action(21):								/* key */
action(23):								/* keyfrom */

	r=b->block.plio_ps->list.element(50);
	if r=null then r=io_semantics_util$keys(b);
	if tp->node.type=token_node then tp=convert(tp,char_type);
	call assign_ps(tp,49,"aok",r);
				/* c_offset must address the first data-word of the
				   char256varying KEY; not the length-word !!   */
	goto end_loop2;

action(24):								/* set */
	PS_offset=ps_special_list;
	if substr(job,20,1)	/* locate */
	then	tp=locate_set;
	if ^tp->reference.symbol->symbol.ptr then goto err463;
	call propagate_bit((tp->reference.symbol),set_bit);
	if tp->reference.symbol->symbol.unaligned then substr(job_additions,36,1)="1"b;
	goto set_addr;



action(29):								/* (ref) for lock,unlock */

	n=476;	/* (REF) not implemented now */
		/* when it is, then check for data type:LOCK */
	goto abort_tp;

action(25):								/* into */
	call propagate_bit((tp->reference.symbol),set_bit);
	/* TR13134: Padded ref. bug occurs at read into statement */
	call propagate_bit((tp->reference.symbol),passed_as_arg_bit);
	/* if i=29 then goto set_variable_p; */
action(27):								/* from */


	/* generate    BITSIZE   and   BYTE-ALIGNMENT   */


	no_byte="0"b;	/* we are prepared to find a byte-aligned, byte-length buffer */

	s=tp->reference.symbol;
	if s->symbol.dimensioned & ^tp->reference.array_ref then
		do;
				/* array-element case is special */
		a=s->symbol.array;
		q=a->array.element_size_bits;
		cbs=a->array.c_element_size_bits;
		if a->array.element_boundary=bit_ then no_byte="1"b;		/* BIT boundary */
		end;

	else	do;
                    if s -> node.type = symbol_node
                    then do;
			q=s->symbol.bit_size;
			cbs=s->symbol.c_bit_size;
                         end;
                    else do;            /* bug2164: s is sometimes a reference node */
      			q = s -> reference.symbol -> symbol.bit_size;
 			cbs = s -> reference.symbol -> symbol.c_bit_size;
		     end;
		if s->symbol.boundary=bit_ then no_byte="1"b;	/* aligned on BIT boundary */
		end;


	if s->symbol.bit then substr(job_additions,14,1)="1"b;	/*bit info needed for stringvalue */


	if q=null then
		do;
		if mod(cbs,9)^=0 then no_byte="1"b;
		 q=declare_constant$integer((cbs));
		end;
	else	do;
		q=copy_expression((q));
		if ^ byte_buffer(s)
		     then no_byte = "1"b;
		if s->symbol.refer_extents then
		call refer_extent(q,(tp->reference.qualifier));
		q = expression_semantics(b,cs,q,"0"b);
		end;



	if s->symbol.varying then
		do;
		 if tp->reference.array_ref then substr(job_additions,35,1)="1"b;	/* varying_array */
		 substr(job_additions,3,1)="1"b;				/* varying */
		 no_byte="0"b;		/* padding always exists in a varying string */
		end;

			/* NB: unless the file has env(stringvalue),
			   the runtime will do addrel(p,-1) on variable_p
			   if work.varying (3) is set; and will add 36 to
			   variable_bitlen if work.varying is set UNLESS
			   work.varying_array (35) is also set.  */

	if no_byte then substr(job_additions,34,1)="1"b;	/* probable non-byte-buffer */
	call assign_ps(q,ps_var_bitlen,"int",null);		/* variable_bitlen */

set_variable_p:
	PS_offset=ps_var_p;
	goto set_addr;			/* variable_p */

action(22):								/* keyto */
	s=tp->reference.symbol;
	if ^s->symbol.char then goto err464;
	call propagate_bit(s,set_bit);

	vs=create_statement(assignment_statement,cs,null,(cs->statement.prefix));
	vs->statement.generated,vs->statement.processed="1"b;
	q=create_operator(assign,2);
	q->operator.operand(1)=tp;


	r=b->block.plio_ps->list.element(50);
	if r=null then r=io_semantics_util$keys(b);
	r=copy_expression((r));

	r->reference.c_length=0;	/* rule for varying string on RHS */
	q->operator.operand(2)=r;
	vs->statement.root=operator_semantics(b,cs,q,"0"b);

		/* i.e., key=PS|48->defined,aligned,char(256) varying */
	goto end_loop2;



action(28):								/* else for lock */
	t->operator.operand(1)=declare_temporary(bit_type,36,0,null);
		/* code generator will call lock and then
		   assign PS|31 to this temp. */

	goto end_loop2;

action(20):								/* locate */
	call alloc_semantics$init_only(locate_set,cs,(locate_var->reference.symbol));


action(14):								/* lock */
action(15):								/* unlock */
action(16):								/* read */
action(17):								/* write */
action(18):								/* rewrite */
action(19):								/* delete */
	if ss->statement.root=tt then
		do;
		ss->statement.statement_type=null_statement;
		ss->statement.root=null;
		end;
			/* takes care of all RECIO except lock_file with ELSE */

	if  substr(job,22,1) /* KEYTO */ then
		do;
		opcode_temp=record_io;
		goto keyto_join;
		end;

	end_of_join=create_operator(record_io,1);

	goto end_loop2;

action(2):								/* string option */
	r=tp;
	if substr(job,7,1) then
		do;	/* get */
		r,tp=convert(tp,char_type);
		if tp->node.type=operator_node then r=tp->operator.operand(1);
		s=r->reference.symbol;
		end;
	else	do;	/* put */
		if r->node.type ^= reference_node then goto err466;
		s=r->reference.symbol;
		if ^s->symbol.char then if ^s->symbol.picture then goto err466;
		call propagate_bit(s,set_bit);
		end;

	if b->block.plio_ffsb=null then call io_semantics_util$make_ffsb(b);

	if r->reference.varying_ref then
		do;
		substr(job_additions,3,1)="1"b;	/* set the varying bit */
		q=s->symbol.dcl_size;
		if q=null then q=declare_constant$integer((s->symbol.c_dcl_size));
		else	do;
			q=copy_expression((q));
			if s->symbol.refer_extents then call refer_extent(q,(r->reference.qualifier));
			q = expression_semantics(b,cs,q,"0"b);
			end;
		end;
	else	do;
		q=r->reference.length;
		if q=null then q=declare_constant$integer((r->reference.c_length));
		else q=copy_expression((q));
		end;

	call assign_ps(q,ps_number,"aok",null);	/* ps|ps_number = (max)length */
	r=tp;
	tp=b->block.plio_ffsb->symbol.reference;
	call assign_ps(r,6,"adr",tp);	/* ffsb|6 = addr(string expression)  */
	PS_offset=ps_source;
	goto set_addr;		/* ps|16 = addr(ffsb)  */

action(4):								/* data */
	pl1_stat_$generate_symtab="1"b;	/* generate SOME of the s.t.  */
	if substr(job,7,1)
	     then go to end_loop2;	/* get */

	if b->block.plio_ssl=null then call io_semantics_util$make_ssl(b);

	goto end_loop2;



action(5):								/* edit */

	if b->block.plio_fa=null then call io_semantics_util$make_fa(b);
	goto end_loop2;

action(7):								/* get */
action(8):								/* put */

	vs=create_statement((cs->statement.statement_type),(ns->statement.back),null,(cs->statement.prefix));
	vs->statement.generated,vs->statement.processed="1"b;

	cs->statement.statement_type=null_statement;
	cs->statement.root=null;	/* place holder only */

	vs->statement.root=t;	/* will generate the terminate call */
	t->operator.op_code=terminate_trans;
	opcode_temp=stream_prep;

keyto_join:
	/* of all the recio statements, read with keyto needs a null-statement
	   for abnormal return since the assignment to the keyto variable
	   follows the recio operator.  Changes must also be made in the CG
	   and in pl1_operators, not to mention in PLIO.  version-2. (7-74)  */


	vs=create_statement(null_statement,(ns->statement.back),null,(cs->statement.prefix));
				/* creates a null-statement for abnormal returns;
				   principally for the get and put statements
				   but also (7-74) for recio with keyto  */
	vs->statement.generated,vs->statement.processed="1"b;
	r=create_label(b,null,by_compiler);
	r->label.statement=vs;
	vs->statement.labels=create_list(2);
	vs->statement.labels->list.element(2)=r;	/* return label */

	end_of_join=create_operator(opcode_temp,2);
	end_of_join->operator.operand(2)=r;	/* ab ret label */
	goto end_loop2;

action(34):								/* OPEN */
	if b->block.plio_fab2=null then call io_semantics_util$make_fab2(b);
	r=b->block.plio_fab2->symbol.reference;

	if tp->node.type=token_node then fab2template.bits=bit(substr(tp->token.string,1,36),36);
	else fab2template.bits=tp->reference.symbol->symbol.initial->bb36;
	fab2template.bits=fab2template.bits | "001"b;	/* signifying the title168 changes */
	fab2template.name=" ";
	fab2template.ls,
	fab2template.ps,
	fab2template.bs=0;
	fab2template.title168p = null;

	tp=t->operator.operand(4);	/* pagesize */
	if tp^=null then call assign_ps(tp,10,"int",r);

	tp=t->operator.operand(1);	/* linesize */
	if tp^=null then call assign_ps(tp,9,"int",r);

	tp=t->operator.operand(3);	/* title */
	if tp^=null then
		do;
		call assign_ps(tp,1,"c32",r);
		if b->block.plio_ffsb=null then call io_semantics_util$make_ffsb(b);
					/* we'll use fake-fsb to store title168 */
		tp1=b->block.plio_ffsb->symbol.reference;
		call assign_ps(tp1,12,"adr",r);	/* fab2.title168p=addr(ffsb) */
		call assign_ps(share_expression(tp), 0,"ttl",tp1);	/* ffsb=char(title_exp,168) */
		end;

			/* the mechanism "convert$to_target" might
			   have been used, and used to be used, to
			   handle constant page_size,line_size, and
			   title options:  but (at least for title,
			   i.e., for strings) this procedure was capable
			   of returning an assignment operator
			   rather than a reference to a constant: thus
			   I could not rely on its use as a mechanism
			   for producing constant components for FAB2.

			   [I had used: fab2template.X=convert$to_target(
			    tp,declare_temporary(XX,...)->reference.symbol->
			    symbol.initial->based.XX  ]
							*/
	q=declare_constant$bit((fab2template_b));
	call assign_ps(q,0,"aok",r);
	if lal>1 then
		do;
		q=assign_list(1);
		assign_list(1)=assign_list(lal);
		assign_list(lal)=q;		/* assign whole fab2 template
					   before filling in the individual
					   variable fields */
		end;
	call assign_ps(r,ps_special_list,"adr",null);	/* PS|special_list_p=addr(fab2) */
	goto exit;

		/* Code Generator generates calls to runtime routines as follows:
		a) record_io:	call plio2_recio_(psp)
		b) open_file:	call plio2_$open_explicit_(psp)
		c) close_file:	call plio2_$close1_(psp)
		d) stream_prep:	call plio2_$get_prep_(psp)
				call plio2_$put_prep_(psp)
		e)terminate_trans:	if GET statement then call plio2_$get_terminate_(psp)
				if PUT statement then call plio2_$put_terminate_(psp)
		f) put_data_trans:
		g) put_edit_trans:
		h) put_list_trans:
		i) get_edit_trans:
		j) get_list_trans:
		*/
/*  */
set_addr:
	call assign_ps(tp,PS_offset,"adr",null);
	goto end_loop2;

locate_prelim:
	tp=t->operator.operand(4);
	if tp->node.type ^= token_node then goto err461;
	if tp->token.type ^= identifier then goto err461;

	if substr(job,24,1) then
		do;
		tp=create_reference(tp);
		tp->reference.qualifier=t->operator.operand(1);
		t->operator.operand(1)=null;
		end;
	else	substr(job,24,1)="1"b;
		/* we place this directly in job rather than in job_additions, as it will be tested */

	string(context)="0"b;
	tp = expression_semantics(b,cs,tp,context);
	s=tp->reference.symbol;
	if s->symbol.controlled then goto err114;
	if ^s->symbol.based then goto err115;
	if s->symbol.level>=2 then goto err465;
	locate_set,q=tp->reference.qualifier;
	if q=null then goto err468;
	if q->node.type=operator_node then goto err468;
			/* assignment of pointer must be to a pointer variable
			   not to a pointer expression */
	if ^q->reference.symbol->symbol.ptr then goto err468;

	locate_var=tp;
	locate_size=s->symbol.bit_size;
	if locate_size=null then locate_size=declare_constant$integer((s->symbol.c_bit_size));
	else	do;
		locate_size=copy_expression((locate_size));
		/* "refer_extent" is not called: we wish to use the left-hand sides */
		string(context)="0"b;
		locate_size = expression_semantics(b,cs,locate_size,context);
		end;

	call assign_ps(locate_size,ps_var_bitlen,"aok",null);

	t->operator.operand(4)=null;
	goto loop1;
/*  */

assign_ps:proc(x,PS_offset,dtype,tref);
	dcl (x,tref) ptr;
	dcl PS_offset fixed bin(15);
	dcl dtype char(3) aligned;	/* "int","ptr","c32","ttl","adr","spf","aok","cvr" */
	dcl (tp,ap) ptr;
	dcl outtype bit(36) aligned;

	/* This subroutine has as its principal use
	   the assignment with coercive conversion
	   of some element to PS.  It has been extended
	   to do addressing and to assign to storage blocks
	   other than PS */

	if lal<20 then lal=lal+1;
	else goto err467;
	assign_list(lal),tp=create_operator(assign,2);

     /* SET TARGET */
	if tref ^= null then		/* not directed at PS */
		do;
		tp->operator.operand(1)=copy_expression((tref));
		tp->operator.operand(1)->reference.c_offset=PS_offset;	/* ? */
		end;
	else	do;
		tp->operator.operand(1),ap=b->block.plio_ps->list.element(PS_offset+2);
		if PS_offset=ps_key then if ap=null then tp->operator.operand(1)=
					io_semantics_util$keys(b);
		end;

     /* SET "RIGHT-HAND-SIDE"  */
	if dtype="aok" then tp->operator.operand(2)=x;

	else if dtype="adr" then		/* store addr(x)  */
		do;
		tp->operator.operand(2),ap=create_operator(addr_fun_bits,2);
		ap->operator.operand(2)=x;
		if x->node.type = reference_node
		then if ^ x->reference.symbol->symbol.file	/* 1-79 */
		     then call propagate_bit((x->reference.symbol), aliasable_bit);	/* 6-73, 7-74 */
		ap->operator.operand(1)=declare_temporary(pointer_type,0,0,null);
		end;

	else	do;		/* COERCIONS */
		if dtype="int" then
			outtype=integer_type;
		else if dtype="ptr" then
			outtype=pointer_type;
		else	outtype=char_type;

		if dtype="ttl" then strlen=168;
		else strlen=32;
		tp->operator.operand(2)=convert$to_target(x,
		declare_temporary(outtype,strlen,0,null));
		end;
end assign_ps;
/*  */

io_semantics_util:proc;

dcl	(b,s,t,tp,q,r) ptr;
dcl	(i,n) fixed bin(15);
dcl	bp ptr unaligned based;





io_semantics_util$make_ps:entry(b);
	n=48;		/* Builds the ordinary PS, 48 words long */
	q=addr(b->block.plio_ps);
	goto make;

end_make_ps:
	tp=create_list(50);
	tp->list.element(1)=s;
	q->bp=tp;	/* block.plio_ps -> list; list(1)->ps_symbol */

	do i=2 to 22 by 2     ,    23 to 31 ;	/* We leave element 32 null as a flag to io_data_l_sem,	*/
					/* if a new_format is needed they will make one,along	*/
					/* with a defined ref. to protect it from the optimizer	*/
					/* messing around with it.				*/
	tp->list.element(i),r=copy_expression(s->symbol.reference);
	r->reference.c_offset=i-2;
	r->reference.units=word_;
	end;
	return;

io_semantics_util$keys:entry(b) returns(ptr);
			/* Extends the size of PS to 48+65 words long
			   to accomodate the new key, which is char256varying.
			   Also sets list.element(50)=ref to defined char256varying
			   whose qualifier is PS|48  */

	t=b->block.plio_ps->list.element(1);
	t->symbol.c_word_size,
	t->symbol.c_dcl_size=113;
	t->symbol.c_bit_size=113*bits_per_word;	/* 113=48+65, 65=length of c-256-var, KEY as of 73-12-6 */

		s=create_symbol(null,null,by_compiler);
		s->symbol.char,
		s->symbol.varying,		/* key is c256var 73-12-6 */
		s->symbol.aligned,
		s->symbol.overlayed,
		s->symbol.aliasable,		/* 6-73 */
		s->symbol.defined="1"b;
		s->symbol.dcl_size=create_token("256",dec_integer);
		/* s->symbol.initial=create_token("1",dec_integer); */
		/* s->symbol.position="1"b; */

		call declare(s);

	r=s->symbol.reference;
	r->reference.units=word_;
	r->reference.c_offset=49;
			/* c_offset addresses first data-word, not length-word !! */
	r->reference.c_length=256;		/* must =0 if on R.H.S.  */
	r->reference.qualifier=copy_expression(t->symbol.reference);

	b->block.plio_ps->list.element(50)=r;
	return(r);


io_semantics_util$make_fa:entry(b);
	n=122;
	q=addr(b->block.plio_fa);
	goto make;

io_semantics_util$make_ffsb:entry(b);
	n=42;
				/* 32 are needed for the original use,
				   viz., the "fake fsb" used for string option.
				   But 42 are needed for the newer use (6-30-72)
				   for the title168.  */
	q=addr(b->block.plio_ffsb);
	goto make;

io_semantics_util$make_ssl:entry(b);
	n=1;	/* WILL BE RESET AT SEMANT TIME TO LENGTH OF LONGEST SSL */
	q=addr(b->block.plio_ssl);
	goto make;

io_semantics_util$make_fab2:entry(b);
	n=14;
	q=addr(b->block.plio_fab2);
	goto make;

make:
	if q->bp ^=null then return;			/* this is a mild error. */

	q->bp,s=create_symbol(b,(null),by_compiler);

	s->symbol.storage_block,
	s->symbol.auto,
	s->symbol.allocate,
	s->symbol.internal="1"b;

	s->symbol.boundary=mod2_;
	s->symbol.c_word_size,
	s->symbol.c_dcl_size=n;
	s->symbol.c_bit_size=n*bits_per_word;

	if n=48 then goto end_make_ps;
	return;
end io_semantics_util;

/**/
byte_buffer:	proc(sym) reducible returns(bit(1) aligned);

/* determines if a symbol is eligible to be a buffer whose length is an integral number of bytes */

dcl	(adam,s,sym) ptr;

	s, adam = sym;

loop:	do while(s -> symbol.structure);
	     s = s -> symbol.son;
	     end;

	if ^ s -> symbol.char
	then if ^ s -> symbol.picture
	     then if ^ s -> symbol.decimal
		then if s -> symbol.bit | s -> symbol.packed
		     then return("0"b);

	if s = adam
	     then return("1"b);

	do while(s -> symbol.brother = null);
	     s = s -> symbol.father;
	     if s = adam
		then return("1"b);
	     end;

	s = s -> symbol.brother;
	go to loop;
end byte_buffer;

/* include files */

%include semant;
/*  */
%include nodes;
%include block;
%include list;
%include operator;
%include op_codes;
%include semantic_bits;
%include symbol;
%include array;
%include system;
%include reference;
%include token;
%include token_types;
%include statement;
%include statement_types;
%include declare_type;
%include label;
%include ps_map;
%include symbol_bits;
%include boundary;
%include mask;
%include decoded_token_types;
     end /* io_semantics */;
