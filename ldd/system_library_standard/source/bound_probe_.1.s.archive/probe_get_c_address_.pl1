/****^  ******************************************************
        *                                                    *
        * Copyright, (C) Honeywell Bull Inc., 1988           *
        *                                                    *
        * Copyright (c) 1972 by Massachusetts Institute of   *
        * Technology and Honeywell Information Systems, Inc. *
        *                                                    *
        ****************************************************** */


/****^  HISTORY COMMENTS:
  1) change(88-09-07,WAAnderson), approve(88-09-30,MCR7952),
     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
     Written as part of C-Probe support.
                                                   END HISTORY COMMENTS */

/* format: style1,insnl,ifthendo,indthenelse,^indnoniterdo,^inditerdo,indcom,^indthenbegin,^indprocbody,ind2,ll78,initcol0,dclind4,idind24,struclvlind1,comcol41 */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

probe_get_c_address_:
  proc (the_addr, original_class, symbol_pt, subs_pt) returns (ptr);

  dcl the_addr		ptr parameter;
  dcl original_class	fixed bin (6) unsigned parameter;
  dcl symbol_pt		ptr parameter;
  dcl subs_pt		ptr parameter;

  dcl sym_pt		ptr init (symbol_pt);

  dcl data_ptr		ptr;	/* hold address as we calculate it */
  dcl bo			fixed bin (35);
				/* bit offset of data */
  dcl subscript		(n_dims) fixed bin based (subs_pt);
				/* the subscripts supplied */
  dcl 1 address_info	like runtime_address_info;
  dcl code		fixed bin (35);
  dcl sum			fixed bin (35);
				/* holds array offset as calc'ed */
  dcl subs_x		fixed bin;/* index into subscripts */

  dcl (addr, null, convert)	builtin;
%page;
/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

  address_info.version = RUNTIME_ADDRESS_INFO_VERSION_1;
  address_info.units = 1;
  address_info.location =
       convert (address_info.location, the_addr -> its_unsigned.offset);
  address_info.offset_is_encoded = "0"b;
  address_info.use_digit = 0;
  address_info.offset =
       convert (address_info.offset, the_addr -> its_unsigned.bit_offset);
  address_info.class = original_class;

  data_ptr = the_addr;

  bo = convert (bo, address_info.offset);

  n_dims = runtime_symbol_info_$array_dims (sym_pt);
  if (n_dims > 0) & (subs_pt ^= null) then do;
      begin;
        dcl 1 array_info	      like runtime_array_info;

        array_info.version = RUNTIME_ARRAY_INFO_VERSION_1;
        call runtime_symbol_info_$array (sym_pt, addr (array_info), code);
        if code ^= 0
	then return (null);
        sum = 0;
        do subs_x = 1 to n_dims;
	sum = sum
	     + (subscript (subs_x) * array_info.bounds.multiplier (subs_x));
        end;
        bo = bo + sum;
      end;
    end;				/* subscript hacking */
  return (bitrel (data_ptr, (bo)));
no:
  return (null ());
%page;
/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

bitrel:
  proc (P_ptr, P_bit_offset) returns (ptr);
  dcl P_ptr		ptr parameter;
  dcl P_bit_offset		fixed bin (24) parameter;

  dcl 1 str		aligned based (P_ptr),
       2 filler		unal bit (P_bit_offset),
       2 target		unal bit (1);

  if P_bit_offset < 0
    then goto no;
  return (addr (str.target));
  end bitrel;
/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */
%page;
%include runtime_symbol_info_;
%page;
%include its;

  end probe_get_c_address_;
