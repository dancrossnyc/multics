/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: style1,insnl,ifthendo,indthenelse,^indnoniterdo,^inditerdo,indcom,^indthenbegin,^indprocbody,ind2,ll78,initcol0,dclind4,idind24,struclvlind1,comcol41 */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/****^  HISTORY COMMENTS:
  1) change(87-06-18,RWaters), approve(87-06-18,MCR7687), audit(87-06-24,Huen),
     install(87-07-15,MR12.1-1040):
     Probe error #107: correctly implement source path PATH.
  2) change(88-09-07,WAAnderson), approve(88-09-30,MCR7952),
     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
     Added format control comment to make the source more readable.
  3) change(88-10-21,WAAnderson), approve(88-10-21,MCR7952),
     audit(88-10-24,RWaters), install(88-10-27,MR12.2-1194):
     Modified code to implement a C feature. If the user specifes 'seg' instead
     of 'seg$main', probe will now assume the user wants 'seg$main' if no
     statement map is found for 'seg'.  This is not particularily elegant
     because it will try using the 'seg$main' convention for any object,
     regardless of the compiler used to generate the object.  Other modules
     affected to implement this feature are 'probe_find_procedure_' and
     'probe_seg_info_'. The include 'probe_info.incl.pl1' was modified to
     include the new file 'retry_using_main'.
                                                   END HISTORY COMMENTS */


probe_command_:
  procedure options (variable);

  /* *	Command procedure for the "probe" debugger. It does hardly anything at all, just
   *	creates the global data structure and calls the probe listener. The code for the
   *	"halt" request also appears here, since it must invoke the listener, as does the
   *	code for responding to breakpoints. */

  /* Improved error message if can't get ptr to break seg 08/31/81 S. Herbst */
  /* Changed to call probe_break_mgr_$reset_all_pause_breaks on cleanup 04/19/84 S. Herbst */
  /* Changed to omit epilogue when returning if previous error occurred during "quit" 01/15/85 Steve Herbst */
  /* Fixed to correctly implement source path PATH 05/21/87 RWaters */


  dcl code		fixed bin (35);
  dcl alp			pointer;

  dcl cu_$arg_count_rel	entry (fixed bin, ptr);
  dcl cu_$arg_list_ptr	entry (ptr);
  dcl cu_$arg_ptr_rel	entry (fixed bin, pointer, fixed bin,
			fixed bin (35), ptr);

  dcl have_we_greeted	bit (1) aligned internal static init ("0"b);
  dcl ioa_		entry options (variable);
  dcl probe_data_$greeting_msg
			char (256) varying external static;
  dcl probe_data_$version_string
			char (32) aligned external static;


  dcl probe_announce_entry_	entry (pointer);
  dcl probe_break_mgr_$reset_all_pause_breaks
			entry (ptr);
  dcl probe_error_		entry options (variable);
  dcl probe_error_$warning	entry options (variable);
  dcl probe_error_$malfunction
			entry options (variable);
  dcl probe_find_procedure_	entry (ptr, char (*), bit (36) aligned, ptr,
			fixed bin (35));
  dcl probe_listen_		entry (ptr, fixed bin (35));
  dcl probe_subsys_util_$create_invocation
			entry (fixed bin, ptr, fixed bin (35));
  dcl probe_subsys_util_$destroy_invocation
			entry (ptr);
  dcl probe_stack_trace_$where_source_info
			entry (ptr, ptr, fixed bin, char (*));
  dcl probe_stack_trace_$condition_raised
			entry (ptr, ptr, char (32));
  dcl probe_stack_trace_$find_condition_frame
			entry (ptr, ptr, char (32));
  dcl probe_stack_trace_$find_frame
			entry (ptr, ptr, ptr);

  dcl (
      error_table_$noarg,
      error_table_$action_not_performed,
      error_table_$badopt
      )			fixed bin (35) external static;

  dcl cleanup		condition;

  dcl (addr, null, stackframeptr, substr)
			builtin;

  /*  */

  probe_info_ptr = null ();

  on cleanup
    begin;
    call probe_break_mgr_$reset_all_pause_breaks (probe_info_ptr);
    call clean_things_up ();
  end;

  call probe_subsys_util_$create_invocation
       (probe_info_version, probe_info_ptr, code);
  if code ^= 0 then do;
      if code ^= error_table_$action_not_performed
        then /* haven't already printed message about breakseg */
	   call probe_error_$malfunction (probe_info_ptr, code,
	        "Unable to initialize probe.");
      call clean_things_up ();
      return;
    end;

  probe_info.abort_probe_label = PROBE_COMMAND_RETURNS;
				/* for handling initialization errors, mostly */
  probe_info.abort_line_label = PROBE_COMMAND_RETURNS;
  probe_info.current_stack_frame = stackframeptr ();
  probe_static_info.good_stack = "0"b;	/* stack is a new beast */

  call cu_$arg_list_ptr (alp);


  if ^have_we_greeted then do;
      have_we_greeted = "1"b;
      if probe_data_$greeting_msg ^= ""
        then call ioa_ ("^a - ^a", probe_data_$version_string,
	        probe_data_$greeting_msg);
    end;

  call process_command_arguments (alp);

  call probe_listen_ (probe_info_ptr, (0));
				/* do it */

PROBE_COMMAND_RETURNS:
  if probe_info.executing_quit_request
    then
         return;			/* don't chance looping with another error */

  if probe_info.return_method = RETURN_TO_CONDITION then do;
      call probe_error_$warning (probe_info_ptr, 0,
	 "Temporary restriction: unable to restart conditions. Use the start command instead."
	 );
      probe_info.return_method = RETURN_TO_CALLER;
    end;

  call clean_things_up ();
  return;				/* end of code for probe command */

  /*  */

clean_things_up:
  proc ();

  if probe_info_ptr ^= null () then do; /* invalidate the saved stack */
      if addr (probe_static_info) ^= null ()
        then
	   probe_static_info.good_stack = "0"b;
    end;

  call probe_subsys_util_$destroy_invocation (probe_info_ptr);
  return;
  end;				/* internal procedure clean_things_up */

  /*  */

process_command_arguments:
  proc (P_alp) options (non_quick);

  /* *	This procedure is used to process the command-line arguments. */

  dcl P_alp		pointer parameter;

  dcl al			fixed bin;
  dcl ap			pointer;
  dcl arg			character (al) based (ap);
				/* argument as returned by cu_$arg_ptr */
  dcl procedure_arg		char (200);
  dcl (argno, nargs)	fixed bin;
  dcl cond_name		char (32);



  procedure_arg = "";		/* start out empty */

  call cu_$arg_count_rel (nargs, P_alp);/* get number of arguments that we were called with */

  do argno = 1 to nargs;		/* loop through our arguments */
    call cu_$arg_ptr_rel (argno, ap, al, (0), P_alp);

    if substr (arg, 1, 1) ^= "-" then do;
				/* a procedure name */
PROCESS_PROCEDURE_NAME:
        if procedure_arg ^= ""
	then /* punt if we already have one */
	     call probe_error_ (probe_info_ptr, 0,
		"At most one procedure may be specified. ^a", arg);

        procedure_arg = arg;		/* remember it */
      end;

      else do;			/* otherwise, process a control argument */
        if arg = "-name" | arg = "-nm" then do;
	  if argno = nargs
	    then call probe_error_
		    (probe_info_ptr, error_table_$noarg,
		    "A procedure name must follow ""^a"".", arg);

	  argno = argno + 1;	/* get the procedure name */
	  call cu_$arg_ptr_rel (argno, ap, al, (0), P_alp);
	  goto PROCESS_PROCEDURE_NAME;/* and process it */
	end;

        else if arg = "-brief" | arg = "-bf"
	then probe_static_info.brief_sw = "1"b;
        else if arg = "-long" | arg = "-lg"
	then probe_static_info.brief_sw = "0"b;

        else if arg = "-no_handle_conditions"
	then probe_static_info.no_handle_faults_sw = "1"b;
        else if arg = "-handle_conditions"
	then probe_static_info.no_handle_faults_sw = "0"b;

        else if arg = "-recursive_breaks"
	then probe_static_info.recursive_breaks_sw = "1"b;
        else if arg = "-no_recursive_breaks"
	then probe_static_info.recursive_breaks_sw = "0"b;

        else call probe_error_ (probe_info_ptr, error_table_$badopt, """^a""",
	        arg);
      end;			/* of control arg case */
  end;				/* of loop through arguments */

  if procedure_arg ^= "" then do;	/* user specified a procedure, use it */

      probe_info.retry_using_main = 0;  

      call probe_find_procedure_ (probe_info_ptr, procedure_arg, "111"b,
	 probe_info.ptr_to_initial_source, code);

/* A kludge. If no statement map and no explicit entry point given, try */
/* the same operation using procedure_arg$main. This is implemented for */
/* the convienience of C programmers.                                   */

      if (probe_info.retry_using_main = 1 & index(procedure_arg,"$") = 0) then do;
          procedure_arg = rtrim(procedure_arg) || "$main";
          code = 0;
          call probe_find_procedure_ (probe_info_ptr, procedure_arg, "111"b,
  	 probe_info.ptr_to_initial_source, code);
       end;

      if code ^= 0
        then call probe_error_ (probe_info_ptr, code);
				/* procedure seems to be losing */

      if initial_source.stack_ptr = null ()
        then /* figure out what to do upon return */
	   probe_info.return_method = RETURN_TO_CALLER;
				/* no active frame */

        else do;
	call probe_stack_trace_$condition_raised
	     (probe_info_ptr, probe_info.ptr_to_initial_source, cond_name);

	if cond_name = ""
	  then probe_info.return_method = RETURN_TO_FRAME;
				/* just has invocation on the stack */
	  else probe_info.return_method = RETURN_TO_CONDITION;
				/* faulted out */
        end;
    end;				/* processing procedure arg */

    else do;			/* no arg, look for a fault frame */
      call probe_stack_trace_$find_condition_frame (probe_info_ptr,
	 probe_info.ptr_to_initial_source, cond_name);
      if initial_source.entry_ptr ^= null ()
        then /* found a condition frame, use it */
	   probe_info.return_method = RETURN_TO_CONDITION;
        else do;			/* no fault on stack -use last frame */
	call probe_stack_trace_$find_frame (probe_info_ptr,
	     probe_info.ptr_to_initial_source,
	     probe_info.current_stack_frame -> stack_frame.prev_sp);
	probe_info.return_method = RETURN_TO_FRAME;
        end;
    end;				/* making implicit definition */

  current_source = initial_source;	/* they start out the same */
  current_source.seg_info_ptr -> seg_info.file_pointers (*) = null ();
				/* start out null */
  probe_info.language_type =
       current_source.seg_info_ptr -> seg_info.language_type;

  call probe_announce_entry_ (probe_info_ptr);
				/* announce our arrival */
  end;				/* process_command_args internal procedure */

  /*  */

  /*	INCLUDE FILES	*/

%include probe_info;

  /* ;;;;;;; */

%include probe_static_info;

  /* ;;;;;;; */

%include probe_source_info;

  /* ;;;;;;; */

%include probe_seg_info;

  /* ;;;;;;; */

%include probe_info_constants;

  /* ;;;;;;; */

%include stack_frame;

  end;				/* probe_command_ external procedure */
