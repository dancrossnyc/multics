/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(88-09-07,WAAnderson), approve(88-09-30,MCR7952),
     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
     Added format control comment to make the source more readable.
                                                   END HISTORY COMMENTS */


/* format: style1,insnl,ifthendo,indthenelse,^indnoniterdo,^inditerdo,indcom,^indthenbegin,^indprocbody,ind2,ll78,initcol0,dclind4,idind24,struclvlind1,comcol41 */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

probe_compare_reference_:
  procedure (P_probe_info_ptr, P_operation, P_operand_1, P_operand_2, P_code)
       returns (bit (1));

  /*
   Modified in July 1977 by R.J.C. Kissel to handle new data ttypes.	When any_to_any_ is
   updated to handle all data types, all references to probe_assign_ should be changed to references
   to assign_ and probe_assign_ and probe_convert_ should be deleted.
   Modified 18 Nov 78 by James R. Davis to check for valid decimal and varying strings
   Modified 18 Nov 79 by James R. Davis to use data_type_info_ and assign_computational_
   Modified June 83 JMAthane to handle PASCAL values. */
  /* Added version string to runtime_type_info structure 10/06/83 S. Herbst */

  dcl (
      P_probe_info_ptr	pointer,
      P_operation		bit (18) aligned,
      P_code		fixed bin (35),
      1 P_operand_1		aligned like reference_node,
      1 P_operand_2		aligned like reference_node
      )			parameter;

  dcl 1 operand		(2) aligned like reference_node;
				/* copies of input operands */
  dcl 1 op_data		(2) aligned like computational_data;
  dcl 1 intermediate	(2) aligned like computational_data;

  dcl code		fixed bin (35);
				/* global error code */
  dcl operation_code	fixed bin;/* binary verison of comparison operation */

  dcl 1 generation		aligned like source_info based (generation_ptr);
				/* enviroment */
  dcl generation_ptr	pointer;

  dcl 1 type_bits		aligned,	/* indicates type, base and mode */
       2 float		bit (1) unaligned,
				/* of the temp or target, which */
       2 binary		bit (1) unaligned,
				/* need not be the same as for the operand */
       2 complex		bit (1) unaligned;
  dcl 1 type_bits_copy	aligned like type_bits;

  dcl type_type		fixed bin;/* type_bits, as in fixed bin (3) */

  dcl 1 common_info		(0:7),	/* indexed by type_type */
       2 type_array		fixed bin initial /* type to convert to */
			(real_fix_dec_9bit_ls_dtype,
			cplx_fix_dec_9bit_ls_dtype,
			real_fix_bin_2_dtype,
			cplx_fix_bin_2_dtype,
			real_flt_dec_9bit_dtype,
			cplx_flt_dec_9bit_dtype,
			real_flt_bin_2_dtype,
			cplx_flt_bin_2_dtype),
       2 prec_array		fixed bin
			initial (59, 59, 71, 71, 59, 59, 63, 63),
				/* precision of result */
       2 size_array		fixed bin initial (30, 60, 2, 4, 32, 64, 2, 4);
				/* number of words */

  dcl space		(2) bit (1152) aligned;
				/* enough to hold float decimal (59) complex */
  dcl first_based_char	char (str_len (1)) based (str_ptr (1));
  dcl second_based_char	char (str_len (2)) based (str_ptr (2));
  dcl first_based_bit	bit (str_len (1)) based (str_ptr (1));
  dcl second_based_bit	bit (str_len (2)) based (str_ptr (2));
  dcl str_len		(2) fixed bin (21);
  dcl str_ptr		(2) pointer;

  dcl result		bit (1);	/* often the result of the comapison */
  dcl i			fixed bin;

  dcl float_decimal		decimal (59) float based;
				/* overlay for a float decimal number  */
  dcl float_decimal_complex	decimal (59) float complex based;
				/* and others ... */
  dcl fixed_decimal		decimal (59, 0) fixed based;
  dcl float_binary		binary (63) float based;
  dcl float_binary_complex	binary (63) float complex based;
  dcl fixed_binary		binary (71) fixed based;
  dcl fixed_binary_complex	binary (71, 0) fixed complex based;
  dcl based_label		label based;
  dcl based_entry		entry variable based;
  dcl based_integer		fixed bin (35) based;
  dcl based_ptr		pointer based;
  dcl based_packed_ptr	pointer unaligned based;
  dcl based_file		file based;

  dcl pointers		(2) pointer;
  dcl labels		(2) label;
  dcl entries		(2) entry variable;
  dcl 1 label		aligned,
       2 place		pointer,
       2 frame		pointer;
  dcl 1 entry		aligned like label;


  dcl reverse_result	(7:12) bit (1) aligned internal static
			options (constant)
			initial /* ^= is the "reverse" of = */
			("0"b, "0"b, "0"b, "1"b, "1"b, "1"b);

  dcl wanted_result		(7:12) fixed bin internal static
			options (constant)
			initial /* result (ie sign (-)) desired */
			(-1, 1, 0, 0, 1, -1);


  dcl (
      probe_et_$bad_comparison,
      probe_et_$bad_decimal,
      probe_et_$bad_type,
      probe_et_$bad_varying,
      probe_et_$recorded_message
      )			fixed bin (35) external static;

  dcl probe_error_$record	entry options (variable);
  dcl valid_decimal_	entry (fixed bin, ptr, fixed bin)
			returns (bit (1));
  dcl assign_$computational_	entry (ptr, ptr, fixed bin (35));
  dcl stu_$offset_to_pointer	entry (pointer, pointer, pointer, pointer,
			pointer, pointer) returns (pointer);

  dcl (abs, addr, addrel, bin, ceil, character, fixed, max, null,
      pointer, sign, string, substr, unspec)
			builtin;
				/**/

  probe_info_ptr = P_probe_info_ptr;
  P_code = 0;			/* unless we find otherwise */
  operation_code = bin (substr (P_operation, 4, 15), 17);
				/* convert to a number */

  operand (1) = P_operand_1;		/* copy arguments */
  operand (2) = P_operand_2;

  if probe_info.language_type = PASCAL_lang_type then do;
      do i = 1 to 2;
        call set_pascal_term (operand (i));
      end;
      if operand (1).type_ptr ^= operand (2).type_ptr
        then go to BAD_OPERAND;
    end;
  do i = 1 to 2;			/* get information about reference */
    call setup_str (operand (i), op_data (i));
  end;


  if data_type_info_$info (op_data.data_type (1)).computational then do;
      if ^data_type_info_$info (op_data.data_type (2)).computational
        then
	   goto BAD_OPERAND;

      if ^data_type_info_$info (op_data.data_type (1)).arithmetic &
	 ^data_type_info_$info (op_data.data_type (2))
	 .arithmetic /* string to string */
        then do;

	do i = 1 to 2;

	  if data_type_info_$info (op_data (i).data_type).varying
	    then do;
	      str_len (i) = op_data (i).address -> based_integer;
	      str_ptr (i) = addrel (op_data (i).address, 1);

	      if str_len (i) < 0 | str_len (i) > op_data (i).prec_or_length
	        then do;
		call probe_error_$record (probe_info_ptr,
		     probe_et_$bad_varying, operand (i).name);
		goto RECORDED_MESSAGE;
	        end;
	    end;
	    else do;
	      str_len (i) = op_data (i).prec_or_length;
	      str_ptr (i) = op_data (i).address;
	    end;
	end;
	if data_type_info_$info (op_data (1).data_type).char_string then do;
				/* first is char */
	    if data_type_info_$info (op_data (2).data_type).char_string
	      then do;
	        if first_based_char > second_based_char
		then i = 1;
	        else if first_based_char = second_based_char
		then i = 0;
	        else i = -1;
	      end;
	      else do;		/* sec. is bit */
	        if first_based_char > character (second_based_bit)
		then i = 1;
	        else if first_based_char = character (second_based_bit)
		then i = 0;
	        else i = -1;
	      end;		/* char:bit */
	  end;			/* chart to ? */
	  else do;
	    if data_type_info_$info (op_data (2).data_type).char_string
	      then do;
	        if character (first_based_bit) > second_based_char
		then i = 1;
	        else if character (first_based_bit) = second_based_char
		then i = 0;
	        else i = -1;
	      end;
	      else do;
	        if first_based_bit > second_based_bit
		then i = 1;
	        else if first_based_bit = second_based_bit
		then i = 0;
	        else i = -1;
	      end;		/* bit:bit */
	  end;
	if reverse_result (operation_code)
	  then return (^(wanted_result (operation_code) = i));
	  else return (wanted_result (operation_code) = i);
        end;			/* string comparisons */


        else do;			/* at least one is arith */

	do i = 1 to 2;
	  if data_type_info_$info (op_data (i).data_type).decimal
	    then
	         if ^valid_decimal_ (op_data (i).data_type,
		    op_data.address (i), (op_data (i).prec_or_length))
		 then do;		/* and BAD!! */
		   call probe_error_$record (probe_info_ptr,
		        probe_et_$bad_decimal, operand (i).name);
		   goto RECORDED_MESSAGE;
		 end;
	end;

	/* must convert to common type for comparison */

	type_bits = compute_type_bits (op_data (1).data_type);
	type_bits_copy = compute_type_bits (op_data (2).data_type);
	string (type_bits) = string (type_bits) | string (type_bits_copy);

	type_type = fixed (string (type_bits), 3, 0);

	intermediate (*).data_type = common_info (type_type).type_array;
	intermediate (*).flags = "0"b;
	intermediate (*).prec_or_length =
	     common_info (type_type).prec_array;
	intermediate (*).picture_image_ptr = null ();

	do i = 1 to 2;
	  intermediate (i).scale = op_data (i).scale;
	  if data_type_info_$info (op_data (i).data_type).decimal &
	       type_bits.binary
	    then
	         intermediate (i).scale =
		    ceil (abs (op_data (i).scale) * 3.332)
		    * sign (op_data (i).scale);
	end;

	intermediate (*).scale =
	     max (intermediate (1).scale, intermediate (2).scale);

	do i = 1 to 2;
	  intermediate (i).address = addr (space (i));
	  call assign_$computational_ (addr (intermediate (i)),
	       addr (op_data (i)), code);
	  if code ^= 0
	    then goto SOME_ERROR;
	end;


	/* perform comparison */

	if type_bits.complex /* complex only allows equla or not equal */
	  then do;
	    if P_operation ^= EQUALS & P_operation ^= NOT_EQUALS
	      then
		 goto BAD_COMPARISON;
	    if ^type_bits.binary	/* we will compare fixed as float */
	      then result =
		      (addr (space (1)) -> float_decimal_complex
		      = addr (space (2)) -> float_decimal_complex);
	    else if type_bits.float
	      then result =
		      (addr (space (1)) -> float_binary_complex
		      = addr (space (2)) -> float_binary_complex);
	    else result =
		    (addr (space (1)) -> fixed_binary_complex
		    = addr (space (2)) -> fixed_binary_complex);
	    if reverse_result (operation_code)
				/* is result really ^ result */
	      then return (^result);
	      else return (result);
	  end;
	  else do;
	    if ^type_bits.binary
	      then do;
	        if type_bits.float
		then i = sign (addr (space (1)) -> float_decimal
			- addr (space (2)) -> float_decimal);
		else i = sign (addr (space (1)) -> fixed_decimal
			- addr (space (2)) -> fixed_decimal);
	      end;
	      else do;
	        if type_bits.float
		then i = sign (addr (space (1)) -> float_binary
			- addr (space (2)) -> float_binary);
		else i = sign (addr (space (1)) -> fixed_binary
			- addr (space (2)) -> fixed_binary);
	      end;
	    if reverse_result (operation_code)
	      then return (^(wanted_result (operation_code) = i));
	      else return (wanted_result (operation_code) = i);
	  end;


        end;			/* arith compare */
    end;				/* computational compares */
  else if op_data (1).data_type = pointer_dtype
       | op_data (1).data_type = offset_dtype then do;

      do i = 1 to 2;
        if P_operation ^= EQUALS & P_operation ^= NOT_EQUALS
	then
	     goto BAD_COMPARISON;
        if op_data (i).data_type = pointer_dtype
	then if op_data (i).flags.packed
	       then pointers (i) = op_data.address (i) -> based_packed_ptr;
	       else pointers (i) = op_data.address (i) -> based_ptr;
        else if op_data (i).data_type = offset_dtype /* offset */
	then do;
	  generation_ptr = operand (i).source_info_ptr;
	  pointers (i) =
	       stu_$offset_to_pointer (generation.block_ptr,
	       operand (i).symbol_ptr, op_data.address (i),
	       generation.stack_ptr,
	       (generation.seg_info_ptr -> seg_info.linkage_ptr),
	       generation.block_ptr);
	end;
        else go to BAD_OPERAND;
      end;


      result = pointers (1) = pointers (2);
      if reverse_result (operation_code)
        then return (^result);
        else return (result);


    end;				/* pointer and offset */
  else if op_data (1).data_type = label_dtype |
       op_data (1).data_type = label_constant_runtime_dtype
    then do;
      if P_operation ^= EQUALS & P_operation ^= NOT_EQUALS
        then
	   goto BAD_COMPARISON;

      do i = 1 to 2;		/* prepare both operands */
        if op_data (i).data_type = label_dtype
	then labels (i) = op_data.address (i) -> based_label;
        else if op_data (i).data_type = label_constant_runtime_dtype
	then do;
	  label.place = op_data.address (i);
	  label.frame =
	       operand (i).source_info_ptr -> source_info.stack_ptr;
	  labels (i) = addr (label) -> based_label;
	end;
        else go to BAD_OPERAND;
      end;

      result = labels (1) = labels (2);
      if reverse_result (operation_code)
        then return (^result);
        else return (result);

    end;				/* label */
  else if op_data (1).data_type = entry_dtype then do;
      do i = 1 to 2;
        if op_data (i).data_type = entry_dtype
				/* entry variable */
	then entries (i) = op_data.address (i) -> based_entry;
        else if op_data (i).data_type = int_entry_runtime_dtype
	then do;
	  entry.place = op_data.address (i);
	  entry.frame =
	       operand (i).source_info_ptr -> source_info.stack_ptr;
	  entries (i) = addr (entry) -> based_entry;
	end;
        else if op_data (i).data_type = ext_entry_runtime_dtype
	then do;
	  entry.place = op_data.address (i);
	  entry.frame = null;
	  entries (i) = addr (entry) -> based_entry;
	end;
        else go to BAD_OPERAND;
      end;


      if P_operation ^= EQUALS & P_operation ^= NOT_EQUALS
        then
	   goto BAD_COMPARISON;

      result = entries (1) = entries (2);
      if reverse_result (operation_code)
        then return (^result);
        else return (result);
    end;				/* entry */
  else if op_data (1).data_type = file_dtype then do;
      if op_data (2).data_type ^= file_dtype
				/* can only compare two files */
        then go to BAD_OPERAND;

      if P_operation = EQUALS
        then do;
	return (op_data.address (1) -> based_file
	     = op_data.address (2) -> based_file);
        end;
      if P_operation = NOT_EQUALS
        then do;
	return (op_data.address (1) -> based_file
	     ^= op_data.address (2) -> based_file);
        end;
      goto BAD_COMPARISON;

    end;				/* file */


  /* fall through */

BAD_OPERAND:
  call probe_error_$record (probe_info_ptr, probe_et_$bad_type,
       operand (1).name, operand (2).name);
  goto RECORDED_MESSAGE;


BAD_COMPARISON:
  code = probe_et_$bad_comparison;
  goto SOME_ERROR;


RECORDED_MESSAGE:
  code = probe_et_$recorded_message;
  goto SOME_ERROR;


SOME_ERROR:
  P_code = code;
  return ("0"b);			/* since it failed for other reasons, as well */


set_pascal_term:
  proc (ref);

  /* Transformation of a PASCAL value to more general type value,
   in order to allow comparison between PASCAL value and probe constants,
   comparison between typed pointers,
   comparison between values subranges of same type.. */

  dcl 1 ref		like reference_node parameter aligned;

  dcl barr		(100) bit (1) unal based (ref.address_ptr);
  dcl get_size_in_bits_	entry (fixed bin, fixed bin (35), bit (1))
			returns (fixed bin);
  dcl probe_pascal_$real_type entry (fixed bin (35), ptr, fixed bin (35), ptr)
			;
  dcl 1 type_info		like runtime_type_info;

  call probe_pascal_$real_type (ref.type, ref.type_ptr, ref.type,
       ref.type_ptr);		/* if subrange */

  if ref.type = pascal_char_dtype then do;
      ref.type = char_dtype;
      ref.packed = "1"b;
      ref.address_ptr = addr (barr (ref.precision - 8));
    end;
  if ref.type = pascal_user_defined_type_instance_dtype then do;
      if ref.type_ptr -> pascal_symbol_node_header.array_info
	 & ref.type_ptr -> pascal_symbol_node_header.packed then do;
	type_info.version = RUNTIME_TYPE_INFO_VERSION_1;

	call runtime_symbol_info_$type (type_ptr, addr (type_info), code);
	if code ^= 0
	  then
	       go to SOME_ERROR;

	if type_info.base_type = pascal_char_dtype
	     & runtime_symbol_info_$array_dims (ref.type_ptr) = 1 then do;
	    ref.precision =
	         get_size_in_bits_ ((ref.type), ref.precision, ref.packed)
	         / 9;
	    ref.type = char_dtype;
	    ref.type_ptr = null;
	    ref.packed = "1"b;
	  end;
        end;
      else if ref.type_ptr -> pascal_symbol_node_header.type
	 = pascal_typed_pointer_type_dtype then do;
	ref.type = pointer_dtype;
	ref.type_ptr = null;
	if ref.precision = 36
	  then ref.packed = "1"b;
	  else ref.packed = "0"b;
        end;
    end;
  else if ref.type = pascal_enumerated_type_element_dtype then do;
      ref.type = pascal_enumerated_type_instance_dtype;
      ref.type_ptr = runtime_symbol_info_$father_type (ref.symbol_ptr);
    end;

  if ref.type = pascal_enumerated_type_instance_dtype
       | ref.type = pascal_boolean_dtype then do;
      if ref.precision >= 36
        then ref.type = real_fix_bin_2_uns_dtype;
        else ref.type = real_fix_bin_1_uns_dtype;
      ref.packed = "1"b;
    end;

  if ref.type = pascal_user_defined_type_instance_dtype
       | ref.type = pascal_text_file_dtype then do;
      if ref.type_ptr -> pascal_symbol_node_header.type = pascal_set_dtype
        then ref.type_ptr = null;	/* to allow comparison with <<set>> constants */
      ref.type = bit_dtype;
      ref.packed = "1"b;
    end;
  end;

setup_str:
  proc (ref, comp);

  dcl 1 ref		parameter aligned like reference_node;
  dcl 1 comp		parameter aligned like computational_data;
  dcl 1 an_encoded_value	aligned like encoded_precision;

  comp.address = ref.address_ptr;
  comp.data_type = ref.type;
  string (comp.flags) = "0"b;
  comp.flags.packed = ref.flags.packed;
  if data_type_info_$info (ref.type).arithmetic
    then do;
      unspec (an_encoded_value) = unspec (ref.precision);
      comp.prec_or_length = an_encoded_value.prec;
      comp.scale = an_encoded_value.scale;
    end;
    else do;
      comp.prec_or_length = ref.precision;
      comp.scale = 0;
    end;
  if ref.type = picture_runtime_dtype
    then comp.picture_image_ptr = pointer (ref.symbol_ptr, ref.precision);
    else comp.picture_image_ptr = null ();
  end setup_str;

compute_type_bits:
  proc (P_dtype) returns (1 aligned like type_bits);

  dcl P_dtype		fixed bin parameter;

  dcl 1 d_type_bits		aligned like type_bits;


  if data_type_info_$info (P_dtype).arithmetic then do;
      d_type_bits.float = ^data_type_info_$info (P_dtype).fixed;
      d_type_bits.binary = ^data_type_info_$info (P_dtype).decimal;
      d_type_bits.complex = data_type_info_$info (P_dtype).complex;
    end;

    else do;
      d_type_bits.float = "0"b;
      if data_type_info_$info (P_dtype).bit_string
        then
	   d_type_bits.binary = "1"b;
        else d_type_bits.binary = "0"b;
      d_type_bits.complex = "0"b;
    end;
  return (d_type_bits);
  end compute_type_bits;


  /**/
%include probe_info;
%include probe_references;
%include probe_tokens;
%include probe_operators;
%include probe_lang_types;
%include probe_source_info;
%include probe_seg_info;

%include computational_data;
%include data_type_info_;
%include encoded_precision;
%include std_descriptor_types;
%include pascal_symbol_node;
%include runtime_symbol_info_;

  end probe_compare_reference_;
