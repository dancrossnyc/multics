/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(88-05-18,WAAnderson), approve(88-09-30,MCR7952),
     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
     Added the call to 'probe_print_c_attr_' in the symbol_request entry.
  2) change(88-05-27,WAAnderson), approve(88-09-30,MCR7952),
     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
     Added code that allows for C indirection on the lefthand side of the
     assignment statement of the 'let_request'.
  3) change(88-06-10,WAAnderson), approve(88-09-30,MCR7952),
     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
     Changed 'boolean_expr' (called from the 'if_request' entry) to verify
     the conditional C operators == and != are used instead of the PL/1
     conditional operator = and ^=.
  4) change(88-09-07,WAAnderson), approve(88-09-30,MCR7952),
     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
     Added format control comment to make the source more readable.
                                                   END HISTORY COMMENTS */


/* format: style1,insnl,ifthendo,indthenelse,^indnoniterdo,^inditerdo,indcom,^indthenbegin,^indprocbody,ind2,ll78,initcol0,dclind4,idind24,struclvlind1,comcol41 */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

probe_expr_requests_:
  proc ();


  call probe_error_$malfunction ();	/* dummy entry */

  call reject_next_argument ();	/* just so it's referenced */


  /*   Implements the following requests:

	call
	if
	let
	symbol
	value
	while
*/
  /*
   Modified 3 Sept 79 JRD
   Modified 20 Feb 80 JRD probe variables in symbol request */
  /* Added algol68 typing to 'symbol' request 09/23/82 S. Herbst */
  /* Modified June 83 JMAthane to add PASCAL typing to 'symbol' request */
  /* Changed "let" to allow := in place of = in Pascal mode 07/27/83 S. Herbst */
  /* Changed to call display_data_$for_probe instead of obsolete probe_print_value_ 08/02/83 Olin Sibert */
  /* Fixed "if" to parse line only if conditional is true 08/22/83 S. Herbst */
  /* Changed if request to allow "if BOOLEAN:" syntax 04/05/84 S. Herbst */


  dcl P_probe_info_ptr	pointer parameter;

  dcl code		fixed bin (35);

  dcl based_str_ptr		pointer;
  dcl based_str_lth		fixed bin (21);
  dcl based_str		char (based_str_lth) based (based_str_ptr);

  dcl (ref_1_ptr, ref_2_ptr)	pointer;
  dcl 1 ref_1		aligned like reference_node based (ref_1_ptr);
				/* temporary reference nodes */
  dcl 1 ref_2		aligned like reference_node based (ref_2_ptr);

  dcl 1 type_info		like runtime_type_info;

  dcl (
      probe_et_$bad_constant,
      probe_et_$recorded_message,
      probe_et_$bad_predicate,
      probe_et_$noarg,
      probe_et_$syntax_error,
      probe_et_$misused_equal,
      probe_et_$misused_not_equal,
      probe_et_$too_many_args
      )			fixed bin (35) external static;

  dcl display_data_$for_probe entry (ptr, 1 aligned like reference_node,
			fixed bin (35));
  dcl probe_assign_value_	entry (ptr, 1 aligned like reference_node,
			1 aligned like reference_node, fixed bin (35));
  dcl probe_compare_reference_
			entry (ptr, bit (18) aligned,
			1 aligned like reference_node,
			1 aligned like reference_node, fixed bin (35))
			returns (bit (1) aligned);
  dcl probe_create_reference_ entry (ptr, ptr);
  dcl probe_error_		entry options (variable);
  dcl probe_error_$malfunction
			entry options (variable);
  dcl probe_get_$expression	entry (ptr, 1 aligned like reference_node,
			fixed bin (35));
  dcl probe_get_$reference	entry (ptr, 1 aligned like reference_node,
			fixed bin (35));
  dcl probe_get_$request_list entry (ptr, ptr, fixed bin (21), fixed bin (35))
			;
  dcl probe_get_$value	entry (ptr, 1 aligned like reference_node,
			bit (36) aligned, fixed bin (35));
  dcl probe_invoke_$subroutine
			entry (ptr, 1 aligned like reference_node,
			fixed bin (35));
  dcl probe_listen_$check_line
			entry (ptr, ptr, fixed bin (21), fixed bin (35))
			;
  dcl probe_listen_$interpret_line
			entry (ptr, ptr, fixed bin (21), fixed bin (35))
			;
  dcl probe_print_pascal_$attr
			entry (ptr, ptr, bit (1) aligned,
			fixed bin (35));
  dcl probe_print_algol68_attr_
			entry (ptr, ptr, bit (1) aligned,
			fixed bin (35));
  dcl probe_print_pl1_attr_	entry (ptr, ptr, bit (1) aligned,
			fixed bin (35));
  dcl probe_print_c_attr_	entry (ptr, ptr, bit (1) aligned,
			fixed bin (35));
  dcl probe_print_cobol_attr_ entry (ptr, ptr, bit (1) aligned,
			fixed bin (35));
  dcl probe_print_fortran_attr_
			entry (ptr, ptr, bit (1) aligned,
			fixed bin (35));
  dcl probe_variable_mgr_$find_variable
			entry (ptr, ptr, fixed bin (35));
  dcl probe_variable_mgr_$list_var_ptr
			entry (ptr, ptr unal, fixed bin (35));
  dcl stu_$find_runtime_symbol
			entry (ptr, char (*), ptr, fixed bin)
			returns (ptr);
  dcl stu_$get_runtime_address
			entry (ptr, ptr, ptr, ptr, ptr, ptr, ptr)
			returns (ptr);

  dcl (addr, addrel, fixed, null)
			builtin;
%page;
RECORDED_MESSAGE:
  code = probe_et_$recorded_message;
  go to SOME_ERROR;


SYNTAX_ERROR:			/* general-purpose error exit */
  call probe_error_ (probe_info_ptr, probe_et_$syntax_error);
  go to MAIN_RETURN;


SOME_ERROR:			/* general for error code type errors */
  call probe_error_ (probe_info_ptr, code);
				/* never returns */
  go to MAIN_RETURN;		/* just in case */


MAIN_RETURN:
  return;				/* only such exit from this procedure */


value_request:
  entry (P_probe_info_ptr);

  /* *	Prints the value of a variable or expression */

  call setup (1);

  call require_argument ();

  call probe_get_$expression (probe_info_ptr, ref_1, code);
  if code ^= 0
    then go to SOME_ERROR;

  if probe_info.ct -> token.type = NAME_TYPE then do;
      if current_identifier_name = "data"
	 & probe_info.language_type = C_lang_type
        then
	   code = 1;
      probe_info.ct = probe_info.ct -> token.next;
    end;

  call reject_argument ();		/* nothing after this */

  if probe_info.flags.execute then do;
      call display_data_$for_probe (probe_info_ptr, ref_1, code);
      if code ^= 0
        then go to SOME_ERROR;
    end;

  go to MAIN_RETURN;		/* end of code for $value_request entry */
%page;
let_request:
  entry (P_probe_info_ptr);

  dcl c_indirect_count	fixed bin;
  dcl not_done_indirection	bit (1);
  dcl ptr_overlay		based ptr;

  /* *	Assigns a new value to a variable */

  code = 0;

  call setup (2);

  c_indirect_count = 0;
  not_done_indirection = "1"b;

  do while (not_done_indirection);
    if probe_info.ct -> token.type < probe_info.token_info.end_token
         & probe_info.ct -> token.type = C_INDIRECTION then do;
        c_indirect_count = c_indirect_count + 1;
        probe_info.ct = probe_info.ct -> token.next;
      end;
      else not_done_indirection = "0"b;
  end;

  call require_argument ();

  call probe_get_$value (probe_info_ptr, ref_1, "000000000000"b3, code);

  if code ^= 0
    then go to SOME_ERROR;

  if (ref_1.symbol_ptr ^= null ()) then do;
      if (fixed (ref_1.symbol_ptr -> runtime_symbol.type) = c_typeref_dtype)
        then do;
	do while (fixed (ref_1.symbol_ptr -> runtime_symbol.type)
	     = c_typeref_dtype);
	  ref_1.symbol_ptr =
	       addrel (ref_1.symbol_ptr,
	       fixed (ref_1.symbol_ptr -> runtime_symbol.son, 17));
	end;
	if (fixed (ref_1.symbol_ptr -> runtime_symbol.type) = c_enum_dtype)
	  then do;
	    ref_1.type = real_fix_bin_1_dtype;
	    ref_1.precision = 35;
	  end;
	  else do;
	    ref_1.type =
	         fixed (ref_1.symbol_ptr -> runtime_symbol.type, 35);
	    ref_1.precision =
	         fixed (ref_1.symbol_ptr -> runtime_symbol.size, 35);
	    ref_1.flags.packed =
	         ref_1.symbol_ptr -> runtime_symbol.bits.packed;
	  end;
        end;
    end;

  do while (c_indirect_count > 0);
    c_indirect_count = c_indirect_count - 1;
    if ref_1.symbol_ptr -> runtime_symbol.son ^= "0"b then do;
        ref_1.symbol_ptr =
	   addrel (ref_1.symbol_ptr,
	   fixed (ref_1.symbol_ptr -> runtime_symbol.son));
        ref_1.type = fixed (ref_1.symbol_ptr -> runtime_symbol.type);
        ref_1.address_ptr = ref_1.address_ptr -> ptr_overlay;
        ref_1.precision = ref_1.symbol_ptr -> runtime_symbol.size;
      end;
  end;

  if probe_info.ct -> operator.type ^= EQUALS &
       (probe_info.language_type ^= PASCAL_lang_type
       | probe_info.ct -> operator.type ^= PASCAL_ASSIGN)
    then
         call probe_error_ (probe_info_ptr, probe_et_$syntax_error,
	    "Usage: let <value> = <expression>");

  call bump_ct ();			/* get the next token */
  call require_argument ();

  call probe_get_$expression (probe_info_ptr, ref_2, code);
				/* get value for assignment */
  if code ^= 0
    then go to SOME_ERROR;

  call reject_argument ();		/* nothing after this */

  if probe_info.flags.execute then do;	/* do it! */
      call probe_assign_value_ (probe_info_ptr, ref_1, ref_2, code);
      if code ^= 0
        then go to SOME_ERROR;	/* print the message */
    end;

  go to MAIN_RETURN;		/* end of code for $let_request entry */
%page;
symbol_request:
  entry (P_probe_info_ptr);

  /* *	Prints information about a symbol */

  dcl sb_long_sw		bit (1) aligned;

  call setup (1);

  call require_argument ();
  call probe_get_$reference (probe_info_ptr, ref_1, code);
  if code ^= 0
    then go to SOME_ERROR;

  if ref_1.flags.constant & ref_1.type ^= ext_procedure_runtime_dtype then do;
      code = probe_et_$bad_constant;
      go to SOME_ERROR;
    end;

  if probe_info.ct -> token.type >= probe_info.end_token
    then
         sb_long_sw = "0"b;		/* clearly, no options specified */

    else do;			/* otherwise, check for options */
      if probe_info.ct -> token.type ^= NAME_TYPE
        then go to SYNTAX_ERROR;

      based_str_ptr = probe_info.ct -> identifier.name;
      based_str_lth = probe_info.ct -> identifier.length;

      if based_str = "long" | based_str = "lg"
        then
	   sb_long_sw = "1"b;
      else if based_str = "brief" | based_str = "bf"
        then
	   sb_long_sw = "0"b;
      else go to SYNTAX_ERROR;	/* Unrecognized option */

      call bump_ct ();		/* get the next token */
      call reject_argument ();	/* not at end yet? */
    end;				/* of checking for options */

  if probe_info.flags.execute
    then if ref_1.flags.probe_variable
	 then do;
	   call probe_variable_mgr_$list_var_ptr (probe_info_ptr,
	        ref_1.probe_var_info_ptr, code);
	   if code ^= 0
	     then go to SOME_ERROR;
	 end;
	 else do;
	   if probe_info.language_type = FORTRAN_lang_type
	     then call probe_print_fortran_attr_ (probe_info_ptr,
		     addr (ref_1), sb_long_sw, (0));
	   else if probe_info.language_type = COBOL_lang_type
	     then call probe_print_cobol_attr_ (probe_info_ptr,
		     addr (ref_1), sb_long_sw, (0));

	   else if probe_info.language_type = PASCAL_lang_type
	     then call probe_print_pascal_$attr (probe_info_ptr,
		     addr (ref_1), sb_long_sw, (0));
	   else if probe_info.language_type = ALGOL68_lang_type
	     then call probe_print_algol68_attr_ (probe_info_ptr,
		     addr (ref_1), sb_long_sw, (0));
	   else if probe_info.language_type = PL1_lang_type
	     then call probe_print_pl1_attr_ (probe_info_ptr, addr (ref_1),
		     sb_long_sw, (0));
	   else call probe_print_c_attr_ (probe_info_ptr, addr (ref_1),
		   sb_long_sw, (0));
	 end;			/* program vars */

  go to MAIN_RETURN;
%page;
call_request:
  entry (P_probe_info_ptr);

  /* *	This fellow calls an external procedure. Sorry, no internal procedure calls
   *	yet, though our experts are working around the clock to bring them to you */

  call setup (1);			/* need one reference node this time */

  call require_argument ();		/* must specify something to call, natch */

  call probe_get_$value (probe_info_ptr, ref_1, "110"b, code);
				/* get the thing to call */
  if code ^= 0
    then go to SOME_ERROR;

  call reject_argument ();		/* can't have anything folowing the argument list */

  if probe_info.execute then do;	/* do it */
      call probe_invoke_$subroutine (probe_info_ptr, ref_1, code);
      if code ^= 0
        then go to SOME_ERROR;
    end;

  go to MAIN_RETURN;		/* end of code for the call request */
%page;
while_request:
  entry (P_probe_info_ptr);

  /* *	The while request executes a set of probe requests for as long as the specified condition is true */


  dcl conditional_expr_ptr	ptr;	/* to the start of conditional expr tokens */
  dcl after_ptr		ptr;	/* to restore ct */


  dcl comparison_result	bit (1) aligned;
  dcl requests_ptr		pointer;
  dcl requests_lth		fixed bin (21);


  call setup (2);
  call require_argument ();

  conditional_expr_ptr = probe_info.ct;

  comparison_result = boolean_expr (conditional_expr_ptr);
  if comparison_result & probe_info.execute then do;

      call common_conditional_munch ();

      after_ptr = probe_info.ct;
      do while (comparison_result);
        call probe_listen_$interpret_line (probe_info_ptr, requests_ptr,
	   requests_lth, code);
        if code ^= 0
	then go to SOME_ERROR;
        comparison_result = boolean_expr (conditional_expr_ptr);
      end;
      probe_info.ct = after_ptr;
      if code ^= 0
        then go to SOME_ERROR;
    end;
    else call skip_line ();

  go to MAIN_RETURN;


if_request:
  entry (P_probe_info_ptr);

  /* The if request executes a set of probe requests once, if the   specified condition is true */


  call setup (2);

  call require_argument ();		/* can't just say 'while' */

  comparison_result = boolean_expr ((probe_info.ct));

  call common_conditional_munch ();

  if comparison_result & probe_info.execute then do;

      call probe_listen_$interpret_line (probe_info_ptr, requests_ptr,
	 requests_lth, code);
      if code ^= 0
        then go to SOME_ERROR;
    end;
  else if probe_info.setting_break then do;
      call probe_listen_$check_line (probe_info_ptr, requests_ptr,
	 requests_lth, code);
      if code ^= 0
        then go to SOME_ERROR;
    end;
  else call skip_line ();

  go to MAIN_RETURN;
%page;
boolean_expr:
  proc (exp_begin) returns (bit (1) aligned);


  dcl exp_begin		ptr parameter;

  dcl operation		bit (18) aligned;
  dcl result		bit (1) aligned;

  dcl b1al		bit (1) aligned based;
  dcl b1unal		bit (1) unaligned based;

  /* must set up probe_info.ct for sake of probe_get_$expression */


  probe_info.ct = exp_begin;
  call require_argument ();
  call probe_get_$expression (probe_info_ptr, ref_1, code);
  if code ^= 0
    then go to ERR_IN_BOOLEAN_EXPR;

  operation = probe_info.ct -> operator.type;
  if probe_info.language_type = C_lang_type then do;
      if operation = EQUALS
        then
	   call probe_error_ (probe_info_ptr, probe_et_$misused_equal);
      else if operation = C_EQUAL
        then
	   operation = EQUALS;
      else if operation = NOT_EQUALS
        then
	   call probe_error_ (probe_info_ptr, probe_et_$misused_not_equal);
      else if operation = C_NOT_EQUAL
        then
	   operation = NOT_EQUALS;
    end;
  if operation < LESS_THAN | operation > NOT_LESS_THAN
    then
         if operation ^= COLON
	 then
BAD_PRED:
	   call probe_error_ (probe_info_ptr, probe_et_$bad_predicate);
	 else do;			/* might be "if BOOLEAN: " */
	   if ^probe_info.execute then do;
				/* don't have type yet */
	       call probe_variable_mgr_$find_variable (probe_info_ptr,
		  addr (ref_1), code);
	       if code ^= 0 then do;	/* not a probe variable */
		 ref_1.symbol_ptr = stu_$find_runtime_symbol
		      (probe_info.ptr_to_current_source
		      -> source_info.block_ptr,
		      (ref_1.name), null, 0);
		 if ref_1.symbol_ptr = null
		   then go to BAD_PRED;
				/* no such variable */

		 type_info.version = RUNTIME_TYPE_INFO_VERSION_1;
		 call runtime_symbol_info_$type (ref_1.symbol_ptr,
		      addr (type_info), code);
		 if code ^= 0
		   then go to BAD_PRED;
		 ref_1.type = type_info.type;
	         end;
	     end;

	   if ref_1.type = bit_dtype then do;
	       if probe_info.execute
	         then
		    if ref_1.packed
		      then return ((ref_1.address_ptr -> b1unal));
		      else return ((ref_1.address_ptr -> b1al));
	         else return ("0"b);
	     end;
	     else go to BAD_PRED;
	 end;

  call bump_ct ();			/* skip over the relational operator */
  call require_argument ();
  call probe_get_$expression (probe_info_ptr, ref_2, code);
  if code ^= 0
    then go to ERR_IN_BOOLEAN_EXPR;

  if probe_info.execute
    then result =
	    probe_compare_reference_ (probe_info_ptr, operation, ref_1,
	    ref_2, code);
    else result = "0"b;
  if code ^= 0
    then go to ERR_IN_BOOLEAN_EXPR;
  return (result);
ERR_IN_BOOLEAN_EXPR:
  go to SOME_ERROR;
  end boolean_expr;
%page;
common_conditional_munch:
  proc;


  if probe_info.ct -> operator.type ^= COLON
    then /* must have a colon here, but print a sensible message */
         call probe_error_ (probe_info_ptr, 0,
	    "The relational expression and the requests to be executed must be separated by a colon."
	    );

  call bump_ct ();			/* skip over the colon */

  call require_argument ();

  call probe_get_$request_list (probe_info_ptr, requests_ptr, requests_lth,
       code);
  if code ^= 0
    then
         go to SOME_ERROR;

  call reject_argument ();		/* nothing may follow the request line */


  end common_conditional_munch;
%page;
setup:
  proc (P_n_references);

  /* *	This procedure sets up the request variables, and initializes as many
   *	reference nodes and associated data as the request has requested */

  dcl P_n_references	fixed bin;


  probe_info_ptr = P_probe_info_ptr;	/* copy the global parameter */

  if P_n_references > 0
    then /* initialize a reference node */
         call probe_create_reference_ (probe_info_ptr, ref_1_ptr);

  if P_n_references > 1
    then /* initialize another one */
         call probe_create_reference_ (probe_info_ptr, ref_2_ptr);

  if P_n_references > 2
    then /* but this is too much */
         call probe_error_$malfunction (probe_info_ptr, 0,
	    "Too many reference nodes requested: ^d", P_n_references);

  return;

  end setup;
%page;
reject_argument:
  proc ();

  /* *	This procedure simply calls probe_error_ if the current token is not the
   *	end of the token chain -- it is called by requests which have processed all
   *	expected arguments and want to barf if there are any extras */

  if probe_info.ct -> token.type < probe_info.end_token
    then
         call probe_error_ (probe_info_ptr, probe_et_$too_many_args);
  return;

  end reject_argument;


reject_next_argument:
  proc ();


  /* *	This is just like reject_argument, except that it tests whether there are any
   *	argument tokens AFTER the current one, rather than starting with the current one */

  if probe_info.ct -> token.next = null ()
    then
         call probe_error_ (probe_info_ptr, probe_et_$too_many_args);

  if probe_info.ct -> token.next -> token.type < probe_info.end_token
    then
         call probe_error_ (probe_info_ptr, probe_et_$too_many_args);
  return;

  end reject_next_argument;


require_argument:
  proc ();


  /* *	This is just like reject_argument, except that it barfs if there are not
   *	any more arguments */

  if probe_info.ct -> token.type >= probe_info.end_token
    then
         call probe_error_ (probe_info_ptr, probe_et_$noarg);
  return;

  end require_argument;
%page;
skip_line:
  proc;

  dcl prev_ct		ptr init (null);


  do probe_info.ct = probe_info.ct repeat (probe_info.ct -> token.next)
       while (probe_info.ct ^= null);
    prev_ct = probe_info.ct;
    if probe_info.ct -> token.type = end_token
      then go to SKIP_RETURN;
  end;
SKIP_RETURN:
  probe_info.ct = prev_ct;
  return;

  end skip_line;

bump_ct:
  proc ();

  /* *	This procedure makes probe_info.ct point at the next token. */

  probe_info.ct = probe_info.ct -> token.next;

  if probe_info.ct = null ()
    then go to SYNTAX_ERROR;		/* some protection against mistakes */

  return;

  end bump_ct;
%page;
%include probe_info;
%page;
%include probe_break_slot;
%page;
%include probe_info_constants;
%page;
%include probe_lang_types;
%page;
%include probe_operators;
%page;
%include probe_references;
%page;
%include probe_seg_info;
%page;
%include probe_source_info;
%page;
%include probe_tokens;
%page;
%include runtime_symbol;
%page;
%include runtime_symbol_info_;
%page;
%include statement_map;
%page;
%include std_descriptor_types;


  end probe_expr_requests_;
