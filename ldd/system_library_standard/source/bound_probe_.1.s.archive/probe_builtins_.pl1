/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(88-06-01,WAAnderson), approve(88-09-30,MCR7952),
     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
     Changed the code in the 'addr_builtin' entry to allow the address of
     a constant to be taken only when we are referring to a C character
     array that has been internally converted to a character string
     constant.
  2) change(88-06-21,WAAnderson), approve(88-09-30,MCR7952),
     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
     Added the 'sizeof_builtin' entry and the appropriate code to perform
     the task.
  3) change(88-09-07,WAAnderson), approve(88-09-30,MCR7952),
     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
     Added format control comment to make the source more readable.
                                                   END HISTORY COMMENTS */


/* format: style1,insnl,ifthendo,indthenelse,^indnoniterdo,^inditerdo,indcom,^indthenbegin,^indprocbody,ind2,ll78,initcol0,dclind4,idind24,struclvlind1,comcol41 */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

probe_builtins_:
  proc;


  /* All probe builtins are here - each builtin has same calling sequence.
   The reference_node we get a pointer to is pounded on pretty hard as the builtin is evaluated
   The arguments to the builtin are stored as reference_nodes in their own right,
   and the pointers to the ref nodes are in the array sub_refs (see below).

   Someday, builtins might want to work on cross-sections:
   this would require calling increment_indices to iterate over the reference
   We would have to construct an array of return values (that isn't hard, but must know
   how many will be needed at allocate time, which would be before iterating),
   then fill in as we iterate.

   Designed and Coded by Jim Davis 11 Aug 79
   Modified 17 Aug 79

   Modified June 83 JMAthane to add following entries:
   probe_builtins_$pascal_nil_builtin
   probe_builtins_$pascal_false_builtin
   probe_builtins_$pascal_true_builtin
   probe_builtins_$pascal_chr_builtin
   probe_builtins_$pascal_ord_builtin
   probe_builtins_$pascal_eof_builtin
   probe_builtins_$pascal_eoln_builtin
*/
  /* Fixed unspec to work on structures and arrays 08/12/83 S. Herbst */
  /* Changed to call get_size_in_bits_$structure with ref_ptr, handle var extents 06/05/84 S. Herbst */

  call probe_error_$malfunction ();

  dcl (
      P_probe_info_ptr	ptr,
      P_refp		ptr,	/* to a reference node */
      P_code		fixed bin (35)
      )			parameter;

  dcl 1 P_reference		aligned like reference_node based (refp);
  dcl refp		ptr;	/* copy of P_refp */

  dcl 1 sub_refs		aligned like subscript_reference_ptrs
			based (P_reference.subscript_refs_ptr);
  dcl 1 subscript		aligned based (sub) like reference_node;
				/* an arbitrary arg */

  dcl sub			ptr;	/* to one of our args */
  dcl data_length		fixed bin (35);
  dcl start		fixed bin (35);
  dcl ptr_bitno		fixed bin (35);
				/* bit offset ofptr used in "ptr" builtin */

  dcl bit_array		(data_length) bit (1) unal based;
				/* used in substr builtin to get addr */
  dcl char_array		(data_length) char (1) unal based;

  dcl based_ptr		ptr based;
  dcl based_integer		fixed bin (35) based;

  dcl ioa_$ioa_switch	entry options (variable);
				/* used for warnings */

  dcl probe_error_$record	entry options (variable);
  dcl probe_error_$malfunction
			entry options (variable);

  dcl get_size_in_bits_	entry (fixed bin, fixed bin (35),
			bit (1) aligned) returns (fixed bin);
  dcl get_size_in_bits_$structure
			entry (ptr) returns (fixed bin);

  dcl probe_et_$recorded_message
			fixed bin (35) external static;

  dcl p1			ptr;

  dcl i			fixed bin (35);

  dcl 1 p			based,
       2 p1		bit (30) unal,
       2 ftag		bit (6) unal,
       2 p2		bit (36) unal;

  dcl (addr, addrel, baseno, baseptr, divide, fixed, null, pointer, rel)
			builtin;

RECORDED_MESSAGE:
  P_code = probe_et_$recorded_message;
EXIT_HERE:

  return;

probe_builtins_$addr_builtin:
  entry (P_probe_info_ptr, P_refp, P_code);

  call setup (1, 1);

  sub = sub_refs (1, 1).ptr;
  if subscript.constant & ^subscript.pseudo_var &
       ^(subscript.type = 21
       & P_probe_info_ptr -> probe_info.random_info.language_type
       = C_lang_type) then do;
      call probe_error_$record (probe_info_ptr, 0,
	 "Can't get the address of a constant");
      goto RECORDED_MESSAGE;
    end;
  pointer_bif () -> based_ptr = subscript.address_ptr;
  goto EXIT_HERE;

probe_builtins_$pascal_nil_builtin:
  entry (P_probe_info_ptr, P_refp, P_code);

probe_builtins_$null_builtin:
  entry (P_probe_info_ptr, P_refp, P_code);

  call setup (0, 0);
  pointer_bif () -> based_ptr = null ();
  goto EXIT_HERE;

probe_builtins_$octal_builtin:
  entry (P_probe_info_ptr, P_refp, P_code);

  call setup (1, 1);

  call octunspecom;
  P_reference.octal = "1"b;
  goto EXIT_HERE;

probe_builtins_$unspec_builtin:
  entry (P_probe_info_ptr, P_refp, P_code);

  call setup (1, 1);
  call octunspecom;
  goto EXIT_HERE;

probe_builtins_$substr_builtin:
  entry (P_probe_info_ptr, P_refp, P_code);

  call setup (2, 3);

  P_reference.pseudo_var = "1"b;
  sub = sub_refs.ptr (1, 1);
  call require_string (1);
  if data_type_info_$info (subscript.type).varying
    then do;
      P_reference.type = subscript.type - 1;
				/* same type, nonvarying */
      P_reference.address_ptr = addrel (subscript.address_ptr, 1);
      data_length = subscript.address_ptr -> based_integer;
    end;
    else do;
      P_reference.type = subscript.type;
      P_reference.address_ptr = subscript.address_ptr;
      data_length = subscript.precision;
    end;
  P_reference.descriptor = P_reference.type * 2 + 1;
				/* packed */
  P_reference.packed = "1"b;

  start = get_num_arg (2);

  if P_reference.n_subscripts = 3
    then do;
      P_reference.precision = get_num_arg (3);

      if P_reference.precision < 0
        then do;
	call probe_error_$record (probe_info_ptr, 0,
	     "The third arg to substr must be  > 0");
	goto RECORDED_MESSAGE;
        end;
      if start + P_reference.precision - 1 > data_length
        then call ioa_$ioa_switch (probe_info.output_switch, "stringrange");

    end;
    else P_reference.precision = data_length - start + 1;

  if P_reference.type = bit_dtype
    then P_reference.address_ptr =
	    addr (P_reference.address_ptr -> bit_array (start));
    else P_reference.address_ptr =
	    addr (P_reference.address_ptr -> char_array (start));
  goto EXIT_HERE;

probe_builtins_$length_builtin:
  entry (P_probe_info_ptr, P_refp, P_code);

  call setup (1, 1);

  sub = sub_refs (1, 1).ptr;
  call require_string (1);
  if data_type_info_$info (subscript.type).varying
    then data_length = subscript.address_ptr -> based_integer;
    else data_length = subscript.precision;

  integer_bif () -> based_integer = data_length;
  goto EXIT_HERE;

probe_builtins_$maxlength_builtin:
  entry (P_probe_info_ptr, P_refp, P_code);

  call setup (1, 1);
  sub = sub_refs (1, 1).ptr;
  call require_string (1);
  integer_bif () -> based_integer = subscript.precision;
  goto EXIT_HERE;

probe_builtins_$addrel_builtin:
  entry (P_probe_info_ptr, P_refp, P_code);

  call setup (2, 2);
  pointer_bif () -> based_ptr = addrel (get_ptr_arg (1), get_num_arg (2));
  goto EXIT_HERE;

probe_builtins_$ptr_builtin:
  entry (P_probe_info_ptr, P_refp, P_code);

  call setup (2, 3);
  if P_reference.n_subscripts = 3
    then ptr_bitno = get_num_arg (3);
    else ptr_bitno = 0;

  pointer_bif () -> based_ptr =
       bitrel (pointer (get_ptr_arg (1), get_num_arg (2)), ptr_bitno);
  goto EXIT_HERE;

bitrel:
  proc (p, bo) returns (ptr);
  dcl p			ptr parameter;
  dcl bo			fixed bin (35) parameter;
  dcl bit_array		(0:35) bit (1) unal based (p);


  if bo > 35 | bo < 0
    then do;
      call probe_error_$record (probe_info_ptr, 0,
	 "pointer: bit offset must be between 0 and 35");
      goto RECORDED_MESSAGE;
    end;
  return (addr (bit_array (bo)));
  end bitrel;

probe_builtins_$rel_builtin:
  entry (P_probe_info_ptr, P_refp, P_code);

  call setup (1, 1);
  integer_bif () -> based_integer = fixed (rel (get_ptr_arg (1)), 35);
  goto EXIT_HERE;

probe_builtins_$segno_builtin:
  entry (P_probe_info_ptr, P_refp, P_code);

  call setup (1, 1);
  integer_bif () -> based_integer = fixed (baseno (get_ptr_arg (1)), 35, 0);
  goto EXIT_HERE;

probe_builtins_$baseptr_builtin:
  entry (P_probe_info_ptr, P_refp, P_code);

  call setup (1, 1);
  pointer_bif () -> based_ptr = baseptr (get_num_arg (1));
  goto EXIT_HERE;

probe_builtins_$pascal_false_builtin:
  entry (P_probe_info_ptr, P_refp, P_code);

  call setup (0, 0);
  pascal_boolean_bif () -> based_integer = 0;
  goto EXIT_HERE;

probe_builtins_$pascal_true_builtin:
  entry (P_probe_info_ptr, P_refp, P_code);

  call setup (0, 0);
  pascal_boolean_bif () -> based_integer = 1;
  goto EXIT_HERE;

probe_builtins_$pascal_chr_builtin:
  entry (P_probe_info_ptr, P_refp, P_code);

  call setup (1, 1);
  pascal_char_bif () -> based_integer = get_num_arg (1);
  goto EXIT_HERE;

probe_builtins_$pascal_ord_builtin:
  entry (P_probe_info_ptr, P_refp, P_code);

  call setup (1, 1);
  integer_bif () -> based_integer = get_enumerated_arg (1);
  goto EXIT_HERE;

probe_builtins_$pascal_eof_builtin:
  entry (P_probe_info_ptr, P_refp, P_code);

  call setup (1, 1);
  i = eof_place_in_pascal_fsb;
  p1 = sub_refs.ptr (1, 1);
  if p1 -> reference_node.type_ptr ^= null
    then
      do;
      if p1 -> reference_node.type_ptr -> pascal_symbol_node_header.type
	 ^= pascal_record_file_type_dtype
        then
	   call iwanta (1, "file");
    end;
  else if p1 -> reference_node.type ^= pascal_text_file_dtype
    then
         call iwanta (1, "file");
  go to join;

probe_builtins_$pascal_eoln_builtin:
  entry (P_probe_info_ptr, P_refp, P_code);

  call setup (1, 1);
  i = eoln_place_in_pascal_fsb;
  p1 = sub_refs.ptr (1, 1);
  if p1 -> reference_node.type ^= pascal_text_file_dtype
    then
         call iwanta (1, "text file");
join:
  if p1 -> reference_node.address_ptr -> p.ftag ^= "43"b3
       | p1 -> reference_node.address_ptr -> based_ptr = null then do;
      call probe_error_$record (probe_info_ptr, 0,
	 "file control block for ^a is not initialized.",
	 p1 -> reference_node.name);
      go to RECORDED_MESSAGE;
    end;

  p1 = p1 -> reference_node.address_ptr -> based_ptr;
  pascal_boolean_bif () -> based_integer = addrel (p1, i) -> based_integer;
  goto EXIT_HERE;

probe_builtins_$sizeof_builtin:
  entry (P_probe_info_ptr, P_refp, P_code);

  dcl total_bytes		fixed bin (35);
  dcl rt_ptr		ptr;

  call setup (1, 1);

  if (P_probe_info_ptr -> probe_info.random_info.language_type ^= C_lang_type)
    then do;
      call probe_error_$record (probe_info_ptr, 0,
	 "The sizeof builtin is a C language builtin.");
      goto RECORDED_MESSAGE;
    end;

  sub = sub_refs.ptr (1, 1);

  if (subscript.symbol_ptr ^= null ()) then do;
      total_bytes = 0;
      rt_ptr = subscript.symbol_ptr;
      call get_the_size (rt_ptr, total_bytes, "0"b);
      sizeof_bif () -> based_integer = total_bytes;
    end;
    else do;
      call probe_error_$record (probe_info_ptr, 0,
	 "Cannot get a pointer to the runtime symbol node for ^a",
	 subscript.name);
      goto RECORDED_MESSAGE;
    end;
  goto EXIT_HERE;

get_the_size:
  proc (rt_ptr_arg, total_bytes, subcomponent);

  dcl rt_ptr_arg		ptr parameter;
  dcl total_bytes		fixed bin (35) parameter;
  dcl subcomponent		bit (1) parameter;

  if (fixed (rt_ptr_arg -> runtime_symbol.type) = structure_dtype) then do;
      rt_ptr_arg =
	 addrel (rt_ptr_arg, fixed (rt_ptr_arg -> runtime_symbol.son));
      do while (fixed (rt_ptr_arg -> runtime_symbol.brother) ^= 0);
        subcomponent = "1"b;
        rt_ptr_arg =
	   addrel (rt_ptr_arg, fixed (rt_ptr_arg -> runtime_symbol.brother))
	   ;
      end;
      total_bytes =
	 divide (fixed (rt_ptr_arg -> runtime_symbol.offset, 35), 9, 35, 0);
      if (fixed (rt_ptr_arg -> runtime_symbol.type) = structure_dtype)
        then
	   call get_the_size (rt_ptr_arg, total_bytes, subcomponent);
    end;
  if (fixed (rt_ptr_arg -> runtime_symbol.type) = c_union_dtype) then do;
      begin;
        dcl rt_ptr		      ptr;
        dcl (t_b, max_bytes)	      fixed bin (35);
        dcl not_done	      bit (1);

        rt_ptr =
	   addrel (rt_ptr_arg, fixed (rt_ptr_arg -> runtime_symbol.son));
        not_done = "1"b;
        max_bytes = 0;
        do while (not_done);
	t_b = 0;
	call get_the_size ((rt_ptr), t_b, subcomponent);
	if (t_b > max_bytes)
	  then max_bytes = t_b;
	if (rt_ptr -> runtime_symbol.brother = "000000"b3)
	  then
	       not_done = "0"b;
	  else rt_ptr =
		  addrel (rt_ptr,
		  fixed (rt_ptr -> runtime_symbol.brother));
        end;
        total_bytes = total_bytes + max_bytes;
      end;
      return;
    end;
  total_bytes = total_bytes + get_size_of_one (rt_ptr_arg, subcomponent);
  end get_the_size;

get_size_of_one:
  proc (sym_ptr, subcom) returns (fixed bin (35));

  dcl sym_ptr		ptr parameter;
  dcl subcom		bit (1) parameter;

  dcl rt_ptr		ptr;
  dcl size_of_unit		fixed bin (35);
  dcl no_of_dims		fixed bin;
  dcl no_of_elements	fixed bin;
  dcl i			fixed bin;

  no_of_elements = 1;

  rt_ptr = sym_ptr;
  do while (fixed (rt_ptr -> runtime_symbol.type) = c_typeref_dtype);
    rt_ptr = addrel (rt_ptr, fixed (rt_ptr -> runtime_symbol.son));
  end;
  if (fixed (rt_ptr -> runtime_symbol.type) = char_dtype) then do;
      if (rt_ptr -> runtime_symbol.size = 1
	 & rt_ptr -> runtime_symbol.bits.simple &
	 ^rt_ptr -> runtime_symbol.bits.packed)
        then
	   size_of_unit = 4;
        else size_of_unit = 1;
    end;
  else if (fixed (rt_ptr -> runtime_symbol.type) = real_fix_bin_1_dtype |
       fixed (rt_ptr -> runtime_symbol.type) = real_fix_bin_2_dtype)
    then
         size_of_unit = divide (rt_ptr -> runtime_symbol.size + 1, 9, 35, 0);
  else if (fixed (rt_ptr -> runtime_symbol.type) = real_fix_bin_1_uns_dtype |
       fixed (rt_ptr -> runtime_symbol.type) = real_fix_bin_2_uns_dtype |
       fixed (rt_ptr -> runtime_symbol.type) = real_flt_bin_2_dtype |
       fixed (rt_ptr -> runtime_symbol.type) = real_flt_bin_1_dtype)
    then
         size_of_unit = divide (rt_ptr -> runtime_symbol.size, 9, 35, 0);
  else if (fixed (rt_ptr -> runtime_symbol.type) = pointer_dtype)
    then
         size_of_unit = 8;

  if (^rt_ptr -> runtime_symbol.bits.simple
       & (subscript.n_subscripts = 0 | subcom)) then do;
      no_of_dims = fixed (rt_ptr -> runtime_symbol.ndims);
      do i = 1 to no_of_dims;
        no_of_elements =
	   no_of_elements
	   * (rt_ptr -> runtime_symbol.bounds (i).upper
	   - rt_ptr -> runtime_symbol.bounds (i).lower + 1);
      end;
      size_of_unit = size_of_unit * no_of_elements;
    end;
  return (size_of_unit);
  end get_size_of_one;


setup:
  proc (min_args, max_args);
  dcl min_args		fixed bin parameter;
  dcl max_args		fixed bin parameter;

  refp = P_refp;
  probe_info_ptr = P_probe_info_ptr;

  if P_reference.cross_section then do;
      call probe_error_$record (probe_info_ptr, 0,
	 "Cross-sections can only be used as array subscripts, not with builtins"
	 );
      goto RECORDED_MESSAGE;
    end;

  if P_reference.n_subscripts < min_args then do;
      call probe_error_$record (probe_info_ptr, 0,
	 "^a requires at least ^d arg^[s^]",
	 P_reference.name, min_args, (min_args > 1));
      goto RECORDED_MESSAGE;
    end;
  if P_reference.n_subscripts > max_args then do;
      call probe_error_$record (probe_info_ptr, 0,
	 "^a takes only ^d arg^[s^]",
	 P_reference.name, max_args, (max_args > 1));
      goto RECORDED_MESSAGE;
    end;

  P_reference.constant = "1"b;
  end setup;


  /* These are used to set the attributes of P_reference according to what will be returned */

sizeof_bif:
  proc () returns (ptr);

  P_reference.type = real_fix_bin_1_dtype;
  P_reference.type_ptr = null;
  P_reference.descriptor = P_reference.type * 2;
  P_reference.precision = 35;
  allocate based_integer in (expression_area) set (P_reference.address_ptr);
  return (P_reference.address_ptr);
  end sizeof_bif;

pascal_boolean_bif:
  proc () returns (ptr);

  P_reference.type = pascal_boolean_dtype;
  P_reference.type_ptr = null;
  P_reference.descriptor = P_reference.type * 2;
  P_reference.precision = 36;
  allocate based_integer in (expression_area) set (P_reference.address_ptr);
  return (P_reference.address_ptr);
  end pascal_boolean_bif;

pointer_bif:
  proc () returns (ptr);

  P_reference.type = pointer_dtype;
  P_reference.type_ptr = null;
  P_reference.descriptor = P_reference.type * 2;
  allocate based_ptr in (expression_area) set (P_reference.address_ptr);
  return (P_reference.address_ptr);
  end pointer_bif;

pascal_char_bif:
  proc () returns (ptr);

  P_reference.type = pascal_char_dtype;
  P_reference.type_ptr = null;
  P_reference.descriptor = P_reference.type * 2;
  P_reference.precision = 36;
  allocate based_integer in (expression_area) set (P_reference.address_ptr);
  return (P_reference.address_ptr);
  end pascal_char_bif;

integer_bif:
  proc () returns (ptr);

  P_reference.type = real_fix_bin_1_dtype;
  P_reference.type_ptr = null;
  P_reference.descriptor = P_reference.type * 2;
  P_reference.precision = 35;
  allocate based_integer in (expression_area) set (P_reference.address_ptr);
  return (P_reference.address_ptr);
  end integer_bif;

require_string:
  proc (sidx);
  dcl sidx		fixed bin parameter;
  dcl 1 ref		aligned like reference_node
			based (sub_refs (1, sidx).ptr);

  if ^data_type_info_$info (ref.type).char_string &
       ^data_type_info_$info (ref.type).bit_string
    then call iwanta (sidx, "string");
  if ref.cross_section
    then call nocross (sidx);
  end;

  /* These are used to get an the Nth arg -
   require it to be of the type needed, and convert it if possible and necessary
   the arg is returned for use by the builtin
*/
get_ptr_arg:
  proc (idx) returns (ptr);
  dcl idx			fixed bin;
  dcl 1 sref		aligned like reference_node
			based (sub_refs (1, idx).ptr);

  if sref.type ^= pointer_dtype
    then call iwanta (idx, "pointer");
  if sref.cross_section
    then call nocross (idx);
  return (sref.address_ptr -> based_ptr);
  end get_ptr_arg;


get_enumerated_arg:
  proc (idx) returns (fixed bin (35));
  dcl idx			fixed bin parameter;
  dcl val			fixed bin (35);
  dcl 1 sref		aligned like reference_node
			based (sub_refs.ptr (1, idx));
  dcl assign_$computational_	entry (ptr, ptr, fixed bin (35));

  dcl 1 tar_str		aligned like computational_data;
  dcl 1 src_str		aligned like computational_data;

  dcl 1 eprec		aligned like encoded_precision;

  dcl unspec		builtin;

  dcl probe_pascal_$real_type entry (fixed bin (35), ptr, fixed bin (35), ptr)
			;

  if sref.type = char_dtype then do;
      sref.type = pascal_char_dtype;
      sref.precision = 9;
    end;
  call probe_pascal_$real_type (sref.type, sref.type_ptr, sref.type,
       sref.type_ptr);
  if ^((sref.type = pascal_enumerated_type_element_dtype)
       | (sref.type = pascal_char_dtype)
       | (sref.type = pascal_enumerated_type_instance_dtype))
    then call iwanta (idx, "char or an enumerated type element or instance");

  if sref.cross_section
    then call nocross (idx);

  tar_str.address = addr (val);
  tar_str.data_type = real_fix_bin_1_dtype;
  tar_str.flags = "0"b;
  tar_str.prec_or_length = 35;
  tar_str.scale = 0;


  src_str.address = sref.address_ptr;
  if sref.precision >= 36
    then
         src_str.data_type = real_fix_bin_2_uns_dtype;
    else
         src_str.data_type = real_fix_bin_1_uns_dtype;
  src_str.flags = "0"b;
  src_str.flags.packed = "1"b;

  unspec (eprec) = unspec (sref.precision);

  src_str.prec_or_length = eprec.prec;
  src_str.scale = eprec.scale;

  call assign_$computational_ (addr (tar_str), addr (src_str), (0));
  return (val);

  end get_enumerated_arg;

get_num_arg:
  proc (idx) returns (fixed bin (35));
  dcl idx			fixed bin parameter;
  dcl val			fixed bin (35);
  dcl 1 sref		aligned like reference_node
			based (sub_refs.ptr (1, idx));
  dcl assign_$computational_	entry (ptr, ptr, fixed bin (35));

  dcl 1 tar_str		aligned like computational_data;
  dcl 1 src_str		aligned like computational_data;

  dcl 1 eprec		aligned like encoded_precision;

  dcl unspec		builtin;

  dcl probe_pascal_$real_type entry (fixed bin (35), ptr, fixed bin (35), ptr)
			;

  call probe_pascal_$real_type (sref.type, sref.type_ptr, sref.type,
       sref.type_ptr);
  if ^data_type_info_$info (sref.type).computational
    then call iwanta (idx, "number");

  if sref.cross_section
    then call nocross (idx);

  tar_str.address = addr (val);
  tar_str.data_type = real_fix_bin_1_dtype;
  tar_str.flags = "0"b;
  tar_str.prec_or_length = 35;
  tar_str.scale = 0;


  src_str.address = sref.address_ptr;
  src_str.data_type = sref.type;
  src_str.flags = "0"b;
  src_str.flags.packed = sref.flags.packed;

  unspec (eprec) = unspec (sref.precision);

  src_str.prec_or_length = eprec.prec;
  src_str.scale = eprec.scale;

  call assign_$computational_ (addr (tar_str), addr (src_str), (0));
  return (val);

  end get_num_arg;


iwanta:
  proc (num, what);
  dcl num			fixed bin parameter;
  dcl what		char (*) aligned parameter;

  call probe_error_$record (probe_info_ptr, 0,
       "The ^[first^;second^;third^] arg to the ^a builtin must be a ^a",
       num, P_reference.name, what);
  goto RECORDED_MESSAGE;
  end iwanta;

nocross:
  proc (n);
  dcl n			fixed bin parameter;
  call probe_error_$record (probe_info_ptr, 0,
       "The ^[first^;second^;third^;fourth^] argument to ^a cannot be an array cross-section",
       n, P_reference.name);
  goto RECORDED_MESSAGE;
  end nocross;

octunspecom:
  proc;

  /* common for octal and unspec */
  P_reference.pseudo_var = "1"b;
  sub = sub_refs.ptr (1, 1);
  if subscript.cross_section
    then call nocross (1);
  P_reference.address_ptr = subscript.address_ptr;
  P_reference.type = bit_dtype;
  P_reference.type_ptr = null;
  P_reference.descriptor = P_reference.type * 2;
  P_reference.packed = "1"b;

  if subscript.symbol_ptr ^= null
    then
         P_reference.precision = get_size_in_bits_$structure (sub);
    else
         P_reference.precision =
	    get_size_in_bits_ ((subscript.type), (subscript.precision),
	    (subscript.packed));
  if P_reference.precision = -1
    then do;
      call probe_error_$record (probe_info_ptr, 0,
	 "^a can't determine size of ^a",
	 P_reference.name, subscript.name);
      goto RECORDED_MESSAGE;
    end;
  return;


  end octunspecom;
%page;

%include probe_info;

%include probe_source_info;

%include probe_seg_info;

%include probe_references;

%include data_type_info_;

%include std_descriptor_types;

%include encoded_precision;

%include computational_data;

%include runtime_symbol;

%include pascal_gen_constants;

%include pascal_symbol_node;
%include probe_lang_types;
  end probe_builtins_;
