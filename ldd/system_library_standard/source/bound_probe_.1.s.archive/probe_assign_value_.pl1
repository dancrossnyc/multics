/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: style1,insnl,ifthendo,indthenelse,^indnoniterdo,^inditerdo,indcom,^indthenbegin,^indprocbody,ind2,ll78,initcol0,dclind4,idind24,struclvlind1,comcol41 */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

/****^  HISTORY COMMENTS:
  1) change(86-09-05,JMAthane), approve(86-09-05,MCR7525),
     audit(86-09-11,Martinson), install(86-11-12,MR12.0-1212):
     Extended pointer values assignment capabilities when language is PASCAL.
     Any pointer value is now allowed (variable or constant).  Removed
     references to pascal_symbol_node declaration.  They have been replaced by
     calls to runtime_symbol_info_.
  2) change(88-06-01,WAAnderson), approve(88-09-30,MCR7952),
     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
     Added a test that checks for character string constants in C.  If we
     happen to encounter one, we confirm that the 'constant_token_ptr' is
     null and allow the assignment because the 'string' is actually an
     array of characters (as changed by probe_eval_).
  3) change(88-09-07,WAAnderson), approve(88-09-30,MCR7952),
     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
     Added format control comment to make the source more readable.
                                                   END HISTORY COMMENTS */

probe_assign_value_:
  proc (P_probe_info_ptr, P_target, P_source, P_code);

  /* assign the value designated by P_source to the storage designated by
   P_target.  Both are input only */

  /*   Written 11 Nov 78 By James R. Davis
   Modified 11 May 79 JRD to check for constant assignment.
   Modified June 79 WOS to convert to probe 4.0
   Modified 13 Nov 79 JRD to convert to assign_$computational and data_type_info */
  /* Fixed to catch size condition 08/20/81 S. Herbst */
  /* Modified June 83 JMAthane to add PASCAL values */
  /* Fixed "let pascal_string = constant_string" to pad target with blanks 07/27/83 S. Herbst */
  /* Changed for new probe_increment_indices_ calling sequence 08/02/83 Olin Sibert */
  /* Fixed to work on arrays, cross-sections and structures 08/23/83 S. Herbst */
  /* Added version string to runtime_type_info structure 10/06/83 S. Herbst */
  /* Changed to call get_size_in_bits_$structure with ref_ptr, handle var extents 06/05/84 S. Herbst */
  /* Fixed to compute addresses correctly for based cross-sections 06/06/84 S. Herbst */
  /* Extended pointer values assignment possibilities in Pascal.
   Removed references to pascal_symbol_node declaration.
   JMAthane June 85 	*/

  dcl (
      P_probe_info_ptr	pointer,
      P_code		fixed bin (35)
      )			parameter;

  dcl 1 P_target		aligned like reference_node parameter;
  dcl 1 P_source		aligned like reference_node parameter;

  dcl BASED_CLASS		bit (4) unaligned int static
			options (constant) init ("0011"b);

  dcl (
      1 source,
      1 target
      )			aligned like computational_data;

  dcl (target_indices, source_indices)
			(16) fixed bin;
  dcl (target_invert, source_invert)
			bit (1) aligned;
  dcl (target_p, source_p)	ptr;
  dcl done		bit (1) aligned init ("0"b);
  dcl code		fixed bin (35);

  dcl 1 subscripts		aligned based like reference_subscripts;

  /* FORTRAN allows up to 7 dims, PL/I allows more than 16 I think, but 16 is our maximum */

  dcl (
      probe_et_$bad_assign,
      probe_et_$bad_section,
      probe_et_$constant_target,
      probe_et_$no_address,
      probe_et_$recorded_message,
      probe_et_$c_string_assign,
      probe_et_$size
      )			fixed bin (35) external static;

  dcl probe_error_$record	entry options (variable);
  dcl get_size_in_bits_	entry (fixed bin, fixed bin (35), bit (1))
			returns (fixed bin);
  dcl get_size_in_bits_$structure
			entry (ptr) returns (fixed bin);
  dcl probe_increment_indices_
			entry (bit (1) aligned, (*) fixed bin,
			(2, *) fixed bin (24),
			fixed bin, bit (1) aligned, bit (1) aligned);
  dcl probe_pascal_$real_type entry (fixed bin (35), ptr, fixed bin (35), ptr)
			;
  dcl assign_$computational_	entry (ptr, ptr, fixed bin (35));
				/* converts computational types */
  dcl area_assign_		entry (pointer, pointer);
				/* assigns one area to another */
  dcl stu_$get_runtime_address
			entry (ptr, ptr, ptr, ptr, ptr, ptr, ptr)
			returns (ptr);
  dcl stu_$offset_to_pointer	entry (ptr, ptr, ptr, ptr, ptr, ptr)
			returns (ptr);
  dcl stu_$pointer_to_offset	entry (ptr, ptr, ptr, ptr, ptr, ptr)
			returns (offset);
				/* used to convert on based of default area */

  dcl (addr, baseno, binary, copy, divide, null, nullo, pointer, string,
      substr, unspec)	builtin;

  dcl conversion		condition;
				/* \014 */
  probe_info_ptr = P_probe_info_ptr;

  if P_target.flags.constant & ^P_target.flags.pseudo_var then do;
				/* "let 7 = 14", eh? */
      if (probe_info.language_type = C_lang_type &
	 P_target.type = char_dtype & P_target.precision > 1)
        then do;
	if (P_source.type ^= char_dtype & ^P_source.flags.constant)
	  then
	       code = probe_et_$c_string_assign;
	else if ^P_target.flags.c_ptr_to_char
	     & P_target.constant_token_ptr = null () then do;
	    begin;
	      dcl based_str		    char (256) based;
	      dcl the_null_byte	    char (1)
				    based (addr (zero_value));
	      dcl zero_value	    fixed bin (9) unsigned init (0);
	      substr (P_target.address_ptr -> based_str, 1,
		 P_source.precision) =
		 substr (P_source.address_ptr -> based_str, 1,
		 P_source.precision);
	      substr (P_target.address_ptr -> based_str,
		 P_source.precision + 1, 1) =
		 the_null_byte;
	      return;
	    end;
	  end;
	else do;
	  call probe_error_$record (probe_info_ptr, 0,
	       "Cannot assign a string to a char pointer.");
	  goto RECORDED_MESSAGE;
	end;
        end;
        else code = probe_et_$constant_target;
      goto SOME_ERROR;
    end;

  if ^P_target.cross_section then do;
      if P_source.cross_section then do;/* cant assign xsection to scalar */
	code = probe_et_$bad_section;
	goto SOME_ERROR;
        end;

      if P_target.address_ptr = null () then do;
				/* no place to assign to */
	call probe_error_$record (probe_info_ptr, probe_et_$no_address,
	     P_target.name);
	goto RECORDED_MESSAGE;
        end;

      call assign_reference ();
    end;
    else do;			/* assigning to a xsection */

      target_indices = P_target.subscript_ptr -> subscripts.value (1, *);
				/* set to low bound */
      target_p = P_target.address_ptr;
      if P_target.symbol_ptr ^= null
        then
	   if P_target.symbol_ptr -> runtime_symbol.class = BASED_CLASS
	     then
		target_p = null;	/* let stu_ compute the based address */
      target_invert =
	 P_target.source_info_ptr -> source_info.seg_info_ptr
	 -> seg_info.language_type
	 = FORTRAN_lang_type;

      source_indices = P_source.subscript_ptr -> subscripts.value (1, *);
				/* set to low bound */
      source_p = P_source.address_ptr;
      if P_source.symbol_ptr ^= null
        then
	   if P_source.symbol_ptr -> runtime_symbol.class = BASED_CLASS
	     then
		source_p = null;	/* let stu_ compute the based address */
      source_invert =
	 P_source.source_info_ptr -> source_info.seg_info_ptr
	 -> seg_info.language_type
	 = FORTRAN_lang_type;

      do while (^done);

        P_target.address_ptr =
	   stu_$get_runtime_address (P_target.source_info_ptr
	   -> source_info.block_ptr,
	   P_target.symbol_ptr,
	   P_target.source_info_ptr -> source_info.stack_ptr,
	   (P_target.source_info_ptr -> source_info.seg_info_ptr
	   -> seg_info.linkage_ptr),
	   P_target.source_info_ptr -> source_info.block_ptr,
	   target_p,
	   addr (target_indices));
        if P_target.address_ptr = null () then do;
	  call probe_error_$record (probe_info_ptr, probe_et_$no_address,
	       P_target.name);
	  goto RECORDED_MESSAGE;
	end;

        /* do the same with source if not a constant */
        if P_source.symbol_ptr ^= null
	then P_source.address_ptr = stu_$get_runtime_address
		(P_source.source_info_ptr -> source_info.block_ptr,
		P_source.symbol_ptr,
		P_source.source_info_ptr -> source_info.stack_ptr,
		(P_source.source_info_ptr -> source_info.seg_info_ptr
		-> seg_info.linkage_ptr),
		P_source.source_info_ptr -> source_info.block_ptr,
		source_p,
		addr (source_indices));
        call assign_reference ();
        call probe_increment_indices_ (target_invert, target_indices,
	   P_target.subscript_ptr -> subscripts.value,
	   P_target.subscript_ptr -> subscripts.number,
	   done, ("0"b));

        if P_source.cross_section
	then
	     call probe_increment_indices_ (source_invert, source_indices,
		P_source.subscript_ptr -> subscripts.value,
		P_source.subscript_ptr -> subscripts.number,
		done, ("0"b));

      end;			/* of cross-section assign loop */
    end;				/* of cross-section code */

  P_code = 0;			/* all done, successfully */
  return;


RECORDED_MESSAGE:
  code = probe_et_$recorded_message;
  goto SOME_ERROR;


SOME_ERROR:
  P_code = code;
  return;


bad_assignment:
  call probe_error_$record (probe_info_ptr, probe_et_$bad_assign,
       P_source.name, P_target.name);
  goto RECORDED_MESSAGE;

  /* \014 */

assign_reference:
  procedure ();

  dcl 1 temp		aligned like reference_node;


  dcl based_ptr		pointer aligned based;
				/* overlays for various data types */
  dcl based_packed_ptr	pointer unaligned based;
  dcl based_offset		offset based;
  dcl based_label		label based;
  dcl based_entry		entry based;
  dcl based_file		file based;

  dcl 1 label_var		aligned,	/* internal representation of label */
       2 place		pointer,	/* location of label */
       2 frame		pointer;	/* stack frame containing invocation */

  dcl 1 entry_var		aligned like label_var;

  dcl gen			pointer;	/* temporary for generation of offset */
  dcl p			pointer;	/* temporary */

  dcl (source_len, source_size, target_len, target_size)
			fixed bin;
  dcl target_object		bit (target_size)
			based (P_target.address_ptr) unal;
  dcl source_object		bit (source_size)
			based (P_source.address_ptr) unal;
  dcl target_string		char (target_len) based (P_target.address_ptr);
  dcl source_string		char (source_len) based (P_source.address_ptr);
  dcl (target_real_type, source_real_type)
			fixed bin (35);
  dcl (target_real_type_ptr, source_real_type_ptr)
			ptr;
  dcl 1 target_type_type_info like runtime_type_info;
  dcl 1 source_type_type_info like runtime_type_info;
				/* \014                                                      */

  temp.argument_list, target_real_type_ptr, source_real_type_ptr = null;
  on conversion go to bad_assignment;	/* catch error */
  on size
    begin;
    code = probe_et_$size;
    go to SOME_ERROR;
  end;

  if probe_info.language_type = PASCAL_lang_type then do;
      if P_target.source_info_ptr ^= null
        then
	   if baseno (P_target.address_ptr)
	        = baseno (P_target.source_info_ptr -> source_info.entry_ptr)
	     then do;
	       code = probe_et_$constant_target;
	       go to SOME_ERROR;
	     end;
      call probe_pascal_$real_type (P_target.type, P_target.type_ptr,
	 target_real_type, target_real_type_ptr);
      call probe_pascal_$real_type (P_source.type, P_source.type_ptr,
	 source_real_type, source_real_type_ptr);
    end;
    else do;
      target_real_type = P_target.type;
      target_real_type_ptr = P_target.type_ptr;
      source_real_type = P_source.type;
      source_real_type_ptr = P_source.type_ptr;
    end;


  if source_real_type_ptr ^= null then do;
      source_type_type_info.version = RUNTIME_TYPE_INFO_VERSION_1;
      call runtime_symbol_info_$type (source_real_type_ptr,
	 addr (source_type_type_info), code);
      if code ^= 0
        then go to bad_assignment;
    end;
  if target_real_type_ptr ^= null then do;
      target_type_type_info.version = RUNTIME_TYPE_INFO_VERSION_1;
      call runtime_symbol_info_$type (target_real_type_ptr,
	 addr (target_type_type_info), code);
      if code ^= 0
        then go to bad_assignment;
    end;

  if target_real_type = structure_dtype then do;
      if source_real_type ^= structure_dtype then do;
	call probe_error_$record (probe_info_ptr, 0,
	     "Can't assign a scalar to a structure.");
	go to RECORDED_MESSAGE;
        end;

      if ^same_format (P_target.symbol_ptr, P_source.symbol_ptr) then do;
	if target_real_type = structure_dtype
	  then call probe_error_$record (probe_info_ptr, 0,
		  "Structures have different format. Use the unspec builtin if necessary."
		  );
	  else call probe_error_$record (probe_info_ptr,
		  "Arrays have different dimension.");
	go to RECORDED_MESSAGE;
        end;

      call make_unspec (P_target);
      call make_unspec (P_source);

      call setup_str (P_target, target, (bit_dtype));
      call setup_str (P_source, source, (bit_dtype));

      call assign_$computational_ (addr (target), addr (source), code);
      if code ^= 0
        then go to SOME_ERROR;
    end;

  else if data_type_info_$info (target_real_type).computational then do;
      if ^data_type_info_$info (source_real_type).computational
        then goto bad_assignment;

      call setup_str (P_target, target, target_real_type);
      call setup_str (P_source, source, source_real_type);

      call assign_$computational_ (addr (target), addr (source), code);
      if code ^= 0
        then goto SOME_ERROR;
    end;				/* computational */

  else if target_real_type = pointer_dtype then do;
      if (source_real_type = pascal_user_defined_type_instance_dtype
	 & source_type_type_info.type = pascal_typed_pointer_type_dtype)
	 | source_real_type = pointer_dtype
				/* another pointer */
        then if P_source.packed	/* is it a packed pointer */
	     then p = P_source.address_ptr -> based_packed_ptr;
	     else p = P_source.address_ptr -> based_ptr;
      else if source_real_type = offset_dtype /* offset */
        then do;
	gen = P_source.source_info_ptr;
				/* to avoid typing */
	p = stu_$offset_to_pointer (gen -> source_info.block_ptr,
	     P_source.symbol_ptr, P_source.address_ptr,
	     gen -> source_info.stack_ptr,
	     (gen -> source_info.seg_info_ptr -> seg_info.linkage_ptr),
	     gen -> source_info.block_ptr);
				/* convert offset using default area */
	if p = null & P_source.address_ptr -> based_offset ^= nullo
	  then go to bad_assignment;	/* could not get default area */
        end;
      else go to bad_assignment;	/* won't allow ptr = 1 */

      if P_target.packed
        then P_target.address_ptr -> based_packed_ptr = p;
				/* assign value to symbol */
        else P_target.address_ptr -> based_ptr = p;

    end;				/* pointer */

  else if target_real_type = offset_dtype then do;

      if source_real_type = pointer_dtype /* pointer */
        then do;
	gen = P_target.source_info_ptr;
	if P_source.packed		/* unpack it if necessary */
	  then p = P_source.address_ptr -> based_packed_ptr;
	  else p = P_source.address_ptr -> based_ptr;
	P_target.address_ptr -> based_offset =
	     /* convert ptr relative to area */
	     stu_$pointer_to_offset (gen -> source_info.block_ptr,
	     P_target.symbol_ptr, addr (p),
	     gen -> source_info.stack_ptr,
	     (gen -> source_info.seg_info_ptr -> seg_info.linkage_ptr),
	     gen -> source_info.block_ptr);
	if P_target.address_ptr -> based_offset = nullo & p ^= null
	  then go to bad_assignment;	/* could not get default area */
        end;
      else if source_real_type = offset_dtype
				/* another offset */
        then P_target.address_ptr -> based_offset =
	        P_source.address_ptr -> based_offset;
      else go to bad_assignment;

    end;				/* offset */

  else if target_real_type = label_dtype then do;

      if source_real_type = label_dtype /* variable */
        then P_target.address_ptr -> based_label =
	        P_source.address_ptr -> based_label;
      else if source_real_type
	 =
	 label_constant_runtime_dtype
	 /* constant, must get frame label is in */
        then do;
	label_var.place = P_source.address_ptr;
	label_var.frame = P_source.source_info_ptr -> source_info.stack_ptr;
	unspec (P_target.address_ptr -> based_label) = unspec (label_var);
        end;
      else go to bad_assignment;

    end;				/* label var */

  else if target_real_type = entry_dtype then do;

      if source_real_type = entry_dtype /* entry variable */
        then P_target.address_ptr -> based_entry =
	        P_source.address_ptr -> based_entry;
      else if source_real_type >= int_entry_runtime_dtype /* entry constant */
        then do;
	entry_var.place = P_source.address_ptr;
	if source_real_type = int_entry_runtime_dtype
	  then entry_var.frame =
		  P_source.source_info_ptr -> source_info.stack_ptr;
				/* internal proc, get display */
	  else entry_var.frame = null ();
				/* level 0, display is null */
	P_target.address_ptr -> based_entry =
	     addr (entry_var) -> based_entry;
        end;
      else go to bad_assignment;

    end;				/* entry var */

  else if target_real_type = area_dtype then do;

      if source_real_type ^= area_dtype
        then go to bad_assignment;	/* can only assign an area to another area */

      call area_assign_ (P_target.address_ptr, P_source.address_ptr);
    end;				/* area */

  else if target_real_type = file_dtype then do;
      if source_real_type ^= file_dtype
        then go to bad_assignment;	/* only a file can be source */

      P_target.address_ptr -> based_file = P_source.address_ptr -> based_file;

    end;				/* file */

  else if data_type_info_$info (target_real_type).type then do;
      call probe_error_$record (probe_info_ptr, 0,
	 "Can't assign to a PASCAL type");
      go to RECORDED_MESSAGE;
    end;				/* type */

  else if target_real_type = pascal_char_dtype then do;
      if source_real_type = pascal_char_dtype
        then
	   call assign_pascal_enumerated;
      else if source_real_type = char_dtype
	 & P_source.precision = 1 then do;
				/* unique char constant */
	P_source.type = pascal_char_dtype;
	P_source.precision = 9;
	call assign_pascal_enumerated;
        end;
      else go to bad_assignment;
    end;				/* PASCAL char */

  else if target_real_type = pascal_boolean_dtype then do;
      if source_real_type = pascal_boolean_dtype
        then
	   call assign_pascal_enumerated;
        else go to bad_assignment;
    end;				/* PASCAL boolean */

  else if target_real_type = pascal_enumerated_type_element_dtype then do;
      call probe_error_$record (probe_info_ptr, 0,
	 "Can't assign to an enumerated type element constant.");
      go to RECORDED_MESSAGE;
    end;				/* PASCAL enumerated type element */

  else if target_real_type = pascal_enumerated_type_instance_dtype then do;
      if source_real_type = pascal_enumerated_type_element_dtype then do;
	if target_real_type_ptr
	     = runtime_symbol_info_$father_type (P_source.symbol_ptr)
	  then
	       call assign_pascal_enumerated;
	  else go to bad_assignment;
        end;
      else if source_real_type = pascal_enumerated_type_instance_dtype
        then do;
	if target_real_type_ptr = source_real_type_ptr
	  then
	       call assign_pascal_enumerated;
	  else go to bad_assignment;
        end;
      else go to bad_assignment;
    end;				/* PASCAL enumerated type instance */

  else if target_real_type = pascal_text_file_dtype then do;
      call probe_error_$record (probe_info_ptr, 0,
	 "Can't assign to a PASCAL file (temporary restriction).");
      go to RECORDED_MESSAGE;
    end;

  else if target_real_type = pascal_user_defined_type_instance_dtype then do;
      if source_real_type = pascal_user_defined_type_instance_dtype then do;
	if source_real_type_ptr = target_real_type_ptr then do;
	    if target_type_type_info.has_dimensions /* array */
	         | target_type_type_info.type
	         = pascal_record_type_dtype /* record */
	         | target_type_type_info.type = pascal_set_dtype /* set */
	      then do;
	        source_size =
		   get_size_in_bits_ ((P_source.type), P_source.precision,
		   P_source.packed);
	        target_size =
		   get_size_in_bits_ ((P_target.type), P_target.precision,
		   P_target.packed);
	        if source_size > target_size
		then
		     target_object =
			substr (source_object, 1, target_size);
		else
		     target_object = source_object;
	      end;
	    else if target_type_type_info.type =
	         pascal_record_file_type_dtype then do;
	        call probe_error_$record (probe_info_ptr, 0,
		   "Can't assign to a PASCAL file (temporary restriction)."
		   );
	        go to RECORDED_MESSAGE;
	      end;
	    else if target_type_type_info.type =
	         pascal_typed_pointer_type_dtype then do;
	        if P_target.precision = 36
		then
		     if P_source.precision = 72
		       then
			  P_target.address_ptr -> based_packed_ptr =
			       P_source.address_ptr -> based_ptr;
		       else
			  P_target.address_ptr -> based_packed_ptr =
			       P_source.address_ptr -> based_packed_ptr;
	        else
		   if P_source.precision = 72
		then
		     P_target.address_ptr -> based_ptr =
			P_source.address_ptr -> based_ptr;
	        else
		   P_target.address_ptr -> based_ptr =
		        P_source.address_ptr -> based_packed_ptr;
	      end;
	    else go to bad_assignment;
	  end;
	else
	     if target_type_type_info.type = pascal_set_dtype
	     & P_source.name = "<<set>>" then do;
	    source_size =
	         get_size_in_bits_ ((P_source.type), P_source.precision,
	         P_source.packed);
	    target_size =
	         get_size_in_bits_ ((P_target.type), P_target.precision,
	         P_target.packed);
	    if source_size > target_size
	      then
		 target_object = substr (source_object, 1, target_size);
	      else
		 target_object = source_object;
	  end;
	else go to bad_assignment;
        end;
      else if source_real_type = pointer_dtype then do;
	if target_type_type_info.type = pascal_typed_pointer_type_dtype
	  then do;
	    if P_target.precision = 36
	      then
		 if ^P_source.packed
		   then
		        P_target.address_ptr -> based_packed_ptr =
			   P_source.address_ptr -> based_ptr;
		   else
		        P_target.address_ptr -> based_packed_ptr =
			   P_source.address_ptr -> based_packed_ptr;
	    else
	         if ^P_source.packed
	      then
		 P_target.address_ptr -> based_ptr =
		      P_source.address_ptr -> based_ptr;
	    else
	         P_target.address_ptr -> based_ptr =
		    P_source.address_ptr -> based_packed_ptr;
	  end;
	  else go to bad_assignment;
        end;
      else if source_real_type = char_dtype then do;
	if P_source.precision > 1
	     & target_type_type_info.packed
	     & target_type_type_info.has_dimensions then do;

	    target_type_type_info.version = RUNTIME_TYPE_INFO_VERSION_1;

	    call runtime_symbol_info_$type (target_real_type_ptr,
	         addr (target_type_type_info), code);
	    if code ^= 0
	      then go to bad_assignment;

	    n_dims = runtime_symbol_info_$array_dims (target_real_type_ptr);
	    if (target_type_type_info.base_type = pascal_char_dtype)
	         & (n_dims = 1)
	      then
	        do;
	        target_size =
		   get_size_in_bits_ ((P_target.type), P_target.precision,
		   P_target.packed);
	        source_size =
		   get_size_in_bits_ ((P_source.type), P_source.precision,
		   P_source.packed);
	        if source_size > target_size
		then
		     target_object =
			substr (source_object, 1, target_size);
		else do;
		  target_len = divide (target_size, 9, 17, 0);
		  source_len = divide (source_size, 9, 17, 0);
		  target_string =
		       source_string
		       || copy (" ", target_len - source_len);
		end;
	      end;
	      else go to bad_assignment;
	  end;
	  else go to bad_assignment;
        end;
      else go to bad_assignment;
    end;				/* PASCAL user defined type instance dtype */

  else do;
    call probe_error_$record (probe_info_ptr, 0,
         "Can't assign to an object of type like ^a", P_target.name);
    go to RECORDED_MESSAGE;
  end;
  return;
%page;
  /* Procedures internal to assign_reference: */

assign_pascal_enumerated:
  proc;

  call set_up (P_target, target);
  call set_up (P_source, source);

  call assign_$computational_ (addr (target), addr (source), code);
  if code ^= 0
    then go to SOME_ERROR;

set_up:
  proc (ref, comp);

  dcl 1 ref		parameter aligned like reference_node;
  dcl 1 comp		parameter aligned like computational_data;

  comp.address = ref.address_ptr;
  comp.prec_or_length = ref.precision;
  if ref.precision >= 36
    then
         comp.data_type = real_fix_bin_2_uns_dtype;
    else
         comp.data_type = real_fix_bin_1_uns_dtype;
  string (comp.flags) = "0"b;
  comp.flags.packed = "1"b;
  comp.scale = 0;
  end set_up;
  end assign_pascal_enumerated;
%page;
make_unspec:
  proc (P_ref);

  dcl 1 P_ref		aligned like reference_node;

  P_ref.pseudo_var = "1"b;
  P_ref.type = bit_dtype;
  P_ref.type_ptr = null;
  P_ref.descriptor = P_ref.type * 2;
  P_ref.packed = "1"b;
  P_ref.precision = get_size_in_bits_$structure (addr (P_ref));
  if P_ref.precision = -1 then do;
      call probe_error_$record (probe_info_ptr, 0,
	 "Can't determine size of ^a", P_ref.name);
      go to RECORDED_MESSAGE;
    end;
  end make_unspec;
%page;
same_format:
  proc (P_ptr1, P_ptr2) returns (bit (1));

  dcl (P_ptr1, P_ptr2)	ptr;	/* pointers to symbol nodes */
  dcl (p1, p2)		ptr;
  dcl (var1_type, var2_type)	fixed bin;

  var1_type = binary (P_ptr1 -> runtime_symbol.type);
  var2_type = binary (P_ptr2 -> runtime_symbol.type);
  if var1_type ^= var2_type
    then
         return ("0"b);
  if P_ptr1 -> runtime_symbol.ndims ^= P_ptr2 -> runtime_symbol.ndims
    then
         return ("0"b);

  if var1_type = structure_dtype then do;
      p1 = runtime_symbol_info_$son (P_ptr1);
      do p2 = runtime_symbol_info_$son (P_ptr2)
	 repeat (runtime_symbol_info_$brother (p2))
	 while (p2 ^= null);

        if ^same_format (p1, p2)
	then
	     return ("0"b);
        p1 = runtime_symbol_info_$brother (p1);
      end;
      if p1 ^= null
        then return ("0"b);
        else return ("1"b);
    end;

    else do;
      if P_ptr1 -> runtime_symbol.aligned ^= P_ptr2 -> runtime_symbol.aligned
        then return ("0"b);
      if P_ptr1 -> runtime_symbol.packed ^= P_ptr2 -> runtime_symbol.packed
        then return ("0"b);
      if P_ptr1 -> runtime_symbol.simple ^= P_ptr2 -> runtime_symbol.simple
        then return ("0"b);
      if P_ptr1 -> runtime_symbol.scale ^= P_ptr2 -> runtime_symbol.scale
        then return ("0"b);
      if P_ptr1 -> runtime_symbol.size ^= P_ptr2 -> runtime_symbol.size
        then return ("0"b);

      return ("1"b);
    end;

  end same_format;
%page;
setup_str:
  proc (ref, comp, t_code);

  dcl 1 ref		parameter aligned like reference_node;
  dcl t_code		fixed bin (35);
  dcl 1 comp		parameter aligned like computational_data;

  dcl 1 an_encoded_value	like encoded_precision;

  comp.address = ref.address_ptr;
  comp.data_type = t_code;
  string (comp.flags) = "0"b;
  comp.flags.packed = ref.flags.packed;
  if data_type_info_$info (ref.type).arithmetic
    then do;
      unspec (an_encoded_value) = unspec (ref.precision);

      comp.prec_or_length = an_encoded_value.prec;
      comp.scale = an_encoded_value.scale;
    end;
    else do;
      comp.prec_or_length = ref.precision;
      comp.scale = 0;
    end;
  if ref.type = picture_runtime_dtype
    then comp.picture_image_ptr = pointer (ref.symbol_ptr, ref.precision);
    else comp.picture_image_ptr = null ();
  end setup_str;

  end assign_reference;
				/* \014                                                      */
%include probe_info;
%include probe_tokens;
%include probe_references;
%include probe_source_info;
%include probe_seg_info;
%include probe_lang_types;

%include encoded_precision;
%include data_type_info_;
%include computational_data;
%include runtime_symbol;
%include std_descriptor_types;
%include runtime_symbol_info_;

  end probe_assign_value_;
