/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(88-09-07,WAAnderson), approve(88-09-30,MCR7952),
     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
     Added format control comment to make the source more readable.
                                                   END HISTORY COMMENTS */


/* format: style1,insnl,ifthendo,indthenelse,^indnoniterdo,^inditerdo,indcom,^indthenbegin,^indprocbody,ind2,ll78,initcol0,dclind4,idind24,struclvlind1,comcol41 */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

probe_announce_entry_:
  proc (P_probe_info_ptr);

  /* *	This procedure is used by the probe command and the breakpoint halt request
   *	to announce why probe was entered, and what it all means. */

  /* Fixed halt message for already reset pause break 01/06/81 S. Herbst */
  /* Changed invocation banner to print full pathname 08/26/83 S. Herbst */

  dcl P_probe_info_ptr	pointer;

  dcl ilevel		fixed bin;
  dcl level_info		char (64) varying;
  dcl after_before_string	char (8);
  dcl block_name		char (256);
  dcl cond_name		char (32);

  dcl ioa_$ioa_switch	entry options (variable);
  dcl probe_block_name_	entry (ptr, ptr, bit (1) aligned)
			returns (char (256) varying);
  dcl probe_error_$malfunction
			entry options (variable);
  dcl probe_line_number_	entry (pointer, 1 aligned like source_info)
			returns (char (64));
  dcl probe_stack_trace_$condition_raised
			entry (ptr, ptr, char (32));
  dcl probe_stack_trace_$where_source_info
			entry (ptr, ptr, fixed bin, char (*));

  dcl BREAK_PLACE		(0:1) char (8) varying internal static
			options (constant) init ("after", "before");

  dcl (character, fixed, ltrim, rel, rtrim)
			builtin;
				/*  */
  probe_info_ptr = P_probe_info_ptr;

  call probe_stack_trace_$where_source_info (probe_info_ptr,
       probe_info.ptr_to_initial_source,
       ilevel, block_name);

  if ilevel >= 0 then do;		/* make a description of our frame, if any */
      level_info = "(level ";
      level_info = level_info || ltrim (rtrim (character (ilevel)));
      level_info = level_info || ")";
    end;

    else level_info = "(no active frame)";

  if probe_info.return_method = RETURN_TO_FRAME then do;
      if ^probe_static_info.brief_sw then do;
	if current_source.stmnt_map_entry_index >= 0
	  then
	       call ioa_$ioa_switch (probe_info.output_switch,
		  "^a exited at ^a ^a.",
		  block_name,
		  probe_line_number_ (probe_info_ptr, current_source),
		  level_info);
	  else call ioa_$ioa_switch (probe_info.output_switch,
		  "^a exited at offset ^o ^a.",
		  block_name,
		  fixed (rel (initial_source.instruction_ptr), 35, 0),
		  level_info);
        end;
    end;

  else if probe_info.return_method = RETURN_TO_CONDITION then do;
      call probe_stack_trace_$condition_raised (probe_info_ptr,
	 probe_info.ptr_to_initial_source, cond_name);
      if cond_name = ""
        then cond_name = "<<UNKNOWN>>";

      if current_source.stmnt_map_entry_index >= 0
        then
	   call ioa_$ioa_switch (probe_info.output_switch,
	        "Condition ^a raised at ^a of ^a ^a.",
	        cond_name,
	        probe_line_number_ (probe_info_ptr, current_source),
	        block_name,
	        level_info);
        else call ioa_$ioa_switch (probe_info.output_switch,
	        "Condition ^a raised at ^a|^o ^a.",
	        cond_name,
	        block_name,
	        fixed (rel (initial_source.instruction_ptr), 35, 0),
	        level_info);
    end;

  else if probe_info.return_method = RETURN_TO_CALLER then do;
      if ^probe_static_info.brief_sw then do;
	block_name =
	     probe_block_name_ (probe_info_ptr,
	     probe_info.ptr_to_initial_source,
	     "1"b /* long: full pathname */);
	call ioa_$ioa_switch (probe_info.output_switch, "Using ^a ^a.",
	     block_name,
	     level_info);
        end;
    end;

  else if probe_info.return_method = RETURN_TO_BREAK then do;

      if probe_info.break_slot_ptr -> break_slot.location = "0"b
        then /* pause, already reset */
	   after_before_string = "before";
        else after_before_string =
	        BREAK_PLACE (probe_info.break_slot_ptr -> break_slot.type);

      if probe_static_info.brief_sw
        then call ioa_$ioa_switch (probe_info.output_switch,
	        "^[<<^;>>^]^a ^a",
	        after_before_string = "before",
	        block_name,
	        probe_line_number_ (probe_info_ptr, initial_source));
        else call ioa_$ioa_switch (probe_info.output_switch,
	        "Stopped ^a ^a of ^a. ^a",
	        after_before_string,
	        probe_line_number_ (probe_info_ptr, initial_source),
	        block_name,
	        level_info);
    end;

  else call probe_error_$malfunction (probe_info_ptr, 0,
	  "Unusual return method ^d", probe_info.return_method);
  return;

  /*  */

  /*	INCLUDE FILES	*/

%include probe_info;

  /* ;;;;;;; */

%include probe_static_info;

  /* ;;;;;;; */

%include probe_source_info;

  /* ;;;;;;; */

%include probe_seg_info;

  /* ;;;;;;; */

%include probe_info_constants;

  /* ;;;;;;; */

%include probe_break_slot;

  /* ;;;;;;; */

%include stack_frame;

  end;				/* external procedure probe_announce_entry_ */
