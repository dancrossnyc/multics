/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(88-09-07,WAAnderson), approve(88-09-30,MCR7952),
     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
     Added format control comment to make the source more readable.
                                                   END HISTORY COMMENTS */


/* format: style1,insnl,ifthendo,indthenelse,^indnoniterdo,^inditerdo,indcom,^indthenbegin,^indprocbody,ind2,ll78,initcol0,dclind4,idind24,struclvlind1,comcol41 */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

probe_fault_handler_:
  proc (P_probe_info_ptr);

  /* *	This procedure is invoked when it appears that there was a fault caused by an
   *	invalid pointer. It decides whether the condition probably was caused by a bad
   *	pointer, calling probe_error_ if so, or continuing to signal if not.
   *
   *	Written by Olin Sibert
   *	Modified 10/09/79 by JRDavis to say where fault happened. */
  /* Added null_pointer to list of handled conditions 01/15/85 Steve Herbst */
  /* Changed to quit probe after handling if condition occurred during quit request 01/15/85 Steve Herbst */


  dcl P_probe_info_ptr	pointer parameter;

  dcl idx			fixed bin;
  dcl code		fixed bin (35);

  dcl 1 cond_info		aligned like condition_info automatic;

  dcl storage_condition_count fixed bin internal static init (0);
				/* to limit the number of these */

  dcl com_err_		entry options (variable);
  dcl cu_$cl		entry (bit (1) aligned);
  dcl continue_to_signal_	entry (fixed bin (35));
  dcl find_condition_info_	entry (ptr, ptr, fixed bin (35));
  dcl probe_error_		entry options (variable);

  dcl POINTER_FAULTS	(13) char (32) internal static
			options (constant) init
			("fault_tag_1",
			"fault_tag_3",
			"no_read_permission",
			"no_write_permission",
			"not_in_read_bracket",
			"not_in_write_bracket",
			"null_pointer",
			"out_of_bounds",
			"seg_fault_error",
			"storage",
			"packed_pointer_fault",
			"lot_fault",
			"isot_fault");
  dcl STORAGE_CONDITION	char (32) internal static
			options (constant) init ("storage");

  dcl (addr, hbound, null)
			builtin;
%page;
  probe_info_ptr = P_probe_info_ptr;

  call find_condition_info_ (null, addr (cond_info), code);
  if code ^= 0 then do;
      call probe_error_ (probe_info_ptr, code, "In pointer error handler.");
      return;
    end;

  if ^probe_static_info.no_handle_faults_sw
    then
      do idx = 1 to hbound (POINTER_FAULTS, 1);
      if cond_info.condition_name = POINTER_FAULTS (idx) then do;
				/* One of ours */
	if cond_info.condition_name = STORAGE_CONDITION
	  then /* special handling */
	       storage_condition_count = storage_condition_count + 1;
	if storage_condition_count > 2 then do;
				/* warn the user */
	    call com_err_ (0, probe_static_info.name,
	         "Storage condition occurred. Shorten stack and restart.");
	    call cu_$cl ("0"b);
	    storage_condition_count = 0;
	  end;
	  else do;
	    call probe_error_ (probe_info_ptr, 0,
	         "Condition ""^a"" occurred ^[in lower ring^] at ^p. Possible invalid pointer.",
	         cond_info.condition_name,
	         cond_info.flags.crawlout,
	         cond_info.user_loc_ptr);
	  end;
	if probe_info.executing_quit_request
	  then go to probe_info.abort_probe_label;
	  else return;
        end;
    end;				/* of loop checking fault names */

continue_to_signal:
  call continue_to_signal_ ((0));	/* not one of ours, see who else wants it */
  return;
%page;
%include probe_info;
%page;
%include probe_static_info;
%page;
%include condition_info;


  end probe_fault_handler_;
