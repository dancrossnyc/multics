/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(88-09-07,WAAnderson), approve(88-09-30,MCR7952),
     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
     Added format control comment to make the source more readable.
                                                   END HISTORY COMMENTS */


/* format: style1,insnl,ifthendo,indthenelse,^indnoniterdo,^inditerdo,indcom,^indthenbegin,^indprocbody,ind2,ll78,initcol0,dclind4,idind24,struclvlind1,comcol41 */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

probe_get_generation_:
  proc (P_probe_info_ptr, P_new_source_info_ptr, P_invocation, P_code);

  /* We parse a GENERATION that is, what can go inside square brackets after the name of a variable
   we are in the business of returning a block pointer and a stack frame pointer for the
   use of somebody trying to get the value of a variable

   a GENERATION:

   level N
   -N
   LINE
   PROCEDURE

   In the case of a relative invocation (-N) we can't set the actual block or source pointers, because
   they aren't known until the symbol is resolved 8starting in the current block).  So we set P_invocation,
   and our caller looks back the specified number of invocations.
   James R. Davis 1 July 79
   last modified: 17 Oct 79 JRD
*/

  dcl (
      P_probe_info_ptr	pointer,
      P_new_source_info_ptr	ptr parameter,
				/* to source_info_ptr struc for us to fill out */
      P_invocation		fixed bin,/* relative generation interpreted by caller */
      P_code		fixed bin (35)
      )			parameter;

  dcl 1 new_source		aligned like source_info
			based (new_source_info_ptr);
  dcl new_source_info_ptr	ptr;

  dcl level		fixed bin (35);
				/* used with level _i */
  dcl inv_level		fixed bin;/* for relative invocation */
  dcl code		fixed bin (35);
  dcl saved_ct		ptr;

  dcl probe_get_$integer	entry (ptr, fixed bin (35), fixed bin (35));
  dcl probe_get_$line	entry (ptr, ptr, fixed bin, bit (36) aligned,
			fixed bin, fixed bin (35));
  dcl probe_get_$object	entry (ptr, ptr, fixed bin (35));
  dcl probe_stack_trace_$get_level
			entry (ptr, ptr, fixed bin, fixed bin);
  dcl probe_error_$record	entry options (variable);

  dcl probe_et_$recorded_message
			fixed bin (35) external static;
				/*  */
  new_source_info_ptr = P_new_source_info_ptr;
  probe_info_ptr = P_probe_info_ptr;
  P_invocation = 0;
  code = 0;
  saved_ct = probe_info.ct;

  if ct -> token.type = NAME_TYPE
       & ct -> token.next -> token.type = CONSTANT_TYPE
    then do;			/* level specified */
      if current_identifier_name ^= "level"
        then goto SYNTAX_ERROR;
      ct = ct -> token.next;
      call probe_get_$integer (probe_info_ptr, level, code);
      if code ^= 0 then do;
	call probe_error_$record (probe_info_ptr, 0,
	     "An integer must follow level in a generation.");
	goto RECORDED_MESSAGE;
        end;
      if probe_info.execute
        then
	   call probe_stack_trace_$get_level (probe_info_ptr,
	        new_source_info_ptr, (level), 0);
    end;				/* level */

  /* may be a relative invocation: -_i */

  else if ct -> token.type = MINUS then do;
      ct = ct -> token.next;
      if ct -> token.type ^= CONSTANT_TYPE
        then goto SYNTAX_ERROR;	/* must be a constant here */
      call probe_get_$integer (probe_info_ptr, level, code);
      if code ^= 0
        then goto SYNTAX_ERROR;
      new_source = current_source;
      P_invocation = level;
    end;
  else do;
    call probe_get_$line (probe_info_ptr, new_source_info_ptr, inv_level,
         "1110"b, (0), code);
    if code = 0
      then P_invocation = inv_level;
      else do;			/* OBJECT */
        call probe_get_$object (probe_info_ptr, new_source_info_ptr, code);
        if code ^= 0
	then goto SYNTAX_ERROR;
      end;			/* object */
  end;				/* line or path */


MAIN_RETURN:
  P_code = code;
  return;


SYNTAX_ERROR:
  call probe_error_$record (probe_info_ptr, 0, "Syntax error in generation");
  goto RECORDED_MESSAGE;

RECORDED_MESSAGE:
  code = probe_et_$recorded_message;
  probe_info.ct = saved_ct;
  goto MAIN_RETURN;


  /*	INCLUDE FILES	*/

%include probe_info;

  /* ;;;;;;; */

%include probe_tokens;

  /* ;;;;;;; */

%include probe_references;

  /* ;;;;;;; */

%include probe_source_info;

  /* ;;;;;;; */

%include probe_operators;

  /* ;;;;;;; */

%include std_descriptor_types;

  /* ;;;;;;; */

%include probe_seg_info;

  /* ;;;;;;; */

  end;				/* external procedure probe_get_generation_ */
