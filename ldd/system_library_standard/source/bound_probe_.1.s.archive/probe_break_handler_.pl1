/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(88-09-07,WAAnderson), approve(88-09-30,MCR7952),
     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
     Added format control comment to make the source more readable.
                                                   END HISTORY COMMENTS */


/* format: style1,insnl,ifthendo,indthenelse,^indnoniterdo,^inditerdo,indcom,^indthenbegin,^indprocbody,ind2,ll78,initcol0,dclind4,idind24,struclvlind1,comcol41 */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

probe_break_handler_:
  proc ();


  call probe_error_$malfunction ();	/* dummy entry */

  /* *	This procedure contains the routines which are called by the code sequences
   *	in the break map header. It sets up a new probe_info structure, and interprets
   *	the breakpoint request list. */

  /* Changed to ignore 2 breaks in a row in probe itself, for debugging 10/07/81 S. Herbst */
  /* Changed to reset a temporary break when it hits one 12/10/81 S. Herbst */
  /* Fixed to ignore break if break segment not found. 05/13/83 S. Herbst */
  /* Do "start" control order on output switch before returning to prevent losing wakeups 09/02/83 S. Herbst */
  /* Changed to apply RETURN_PTR_MASK to stack_frame.return_ptr (see incl comment) 03/06/84 S. Herbst */
  /* Changed to call probe_break_mgr_$reset_all_pause_breaks on cleanup 04/19/84 S. Herbst */

  dcl PAUSE_LINE		char (6) int static options (constant)
			init ("pause
");

  dcl bp			ptr;
  dcl p			ptr;
  dcl code		fixed bin (35);
  dcl callers_frame		pointer;

  dcl 1 based_instruction	aligned based,
       2 offset		bit (18) unal,
       2 misc		bit (18) unal;
				/* opcode and modifier */

  dcl com_err_		entry options (variable);
  dcl iox_$control		entry (ptr, char (*), ptr, fixed bin (35));

  dcl probe_break_mgr_$reset_all_pause_breaks
			entry (ptr);
  dcl probe_break_mgr_$reset_break_at_line
			entry (ptr, ptr, fixed bin, bit (1) aligned,
			fixed bin (35));
  dcl probe_error_		entry options (variable);
  dcl probe_error_$malfunction
			entry options (variable);
  dcl probe_listen_$interpret_line
			entry (ptr, ptr, fixed bin (21), fixed bin (35))
			;
  dcl probe_seg_info_	entry (ptr, ptr, fixed bin (35)) returns (ptr);

  dcl probe_subsys_util_$create_invocation
			entry (fixed bin, ptr, fixed bin (35));
  dcl probe_subsys_util_$destroy_invocation
			entry (ptr);

  dcl (probe_et_$old_break)	fixed bin (35) external static;

  dcl cleanup		condition;

  dcl (addr, addrel, baseno, length, null, pointer, size, stackframeptr,
      unspec)		builtin;
				/*  */

probe_break_handler_$break_type_1:
  entry ();

  /* *	This is the entry for type 1 (standard) breaks */

  probe_info_ptr = null ();

  on cleanup
    begin;
    call probe_break_mgr_$reset_all_pause_breaks (probe_info_ptr);
    call clean_things_up ();
  end;

  call probe_subsys_util_$create_invocation (probe_info_version,
       probe_info_ptr, code);
  if code ^= 0 then do;		/* MOBY lossage */
      call com_err_ (code, "probe",
	 "Unable to initialize probe for breakpoint; break ignored.");
      call clean_things_up ();
      return;
    end;

  if probe_info.break_segment_ptr = null
    then go to IGNORE_BREAK;		/* rather than blow up later */

  probe_info.abort_probe_label = BREAK_TYPE_1_RETURNS;
				/* for handling initialization errors, mostly */
  probe_info.abort_line_label = BREAK_TYPE_1_RETURNS;
  probe_info.current_stack_frame = stackframeptr ();

  callers_frame = stackframeptr () -> stack_frame.prev_sp;
				/* frame of caller - routine that took break */

  break_extension_info_ptr =
       addrel (stackframeptr (), -size (probe_break_extension));

  p = probe_break_extension.slot_return_addr;
				/* instruction after call to map seq. */

  /* FOR DEBUGGING: Ignore second recursive break in probe itself */

  if ^probe_static_info.recursive_breaks_sw
    then
         if baseno (p) = probe_static_info.probe_segno
	 then
	      if probe_static_info.last_break_segno
		 = probe_static_info.probe_segno
	        then
		   go to IGNORE_BREAK;
				/* skip the second break in a row in probe itself */

  probe_static_info.last_break_segno = baseno (p);

  if p -> based_instruction.misc ^= NOP_code
    then call probe_error_ (probe_info_ptr, probe_et_$old_break);

  bsp = pointer (p, p -> based_instruction.offset);
				/* to break slot */
  stp = pointer (bsp, break_slot.statement_item_offset);
				/* set up statement item */
  ent = pointer (probe_info.break_segment_ptr, statement_item.proc_entry);

  /* some consistency checks here */

  if ent = null
    then go to IGNORE_BREAK;
  if procedure_entry.time_stamp ^= statement_item.identifier
    then do;			/* probably set by someone else  - we shall ignore it */
IGNORE_BREAK:
      call clean_things_up ();
      return;
    end;

  current_source.stmnt_map_entry_index = statement_item.number;
  current_source.instruction_ptr = pointer (bsp, break_slot.location);
  current_source.stack_ptr = callers_frame;

  /* now to get entry ptr - someday this should be stored in proc_entry */

  if break_slot.symbol_block_offset = "0"b
    then do;			/* someday, this will happen, when breaks can be set ala debug */
      current_source.block_ptr = null ();
      current_source.entry_ptr = callers_frame -> stack_frame.entry_ptr;
    end;
    else do;
      current_source.block_ptr, bp =
	 pointer (bsp, break_slot.symbol_block_offset);

      if bp -> runtime_block.quick then do;
	p = null ();		/* havent got entry yet */
	if bp -> runtime_block.entry_info ^= "0"b then do;
	    p = addrel (callers_frame, bp -> runtime_block.entry_info);
				/* pt to entry_info */
	    p = addrel (p -> quick_entry.return, -1);
				/* pt to call to this block */
	    p = addrel (p, p -> based_instruction.offset);
				/* assume it is a relative TRA NNN,ic */

	    /* now i think for fortran, this is instead a pl1_op call  so this kludeg ahead... */

	    if baseno (p) ^= baseno (bp)
				/* our return isn't into same seg we started  in */
	      then p = null ();	/* show failure */
	  end;
	if p = null () /* fortran, or no entry info */
	  then do;
	    p = addrel (bp, bp -> runtime_block.first);
				/* pt to statement_map for first stmt */
	    p = pointer (p, p -> statement_map.location);
	  end;
        end;			/* quick */
        else p = callers_frame -> stack_frame.entry_ptr;

      current_source.entry_ptr = p;
    end;				/* non-null bp */


  current_source.seg_info_ptr =
       probe_seg_info_ (probe_info_ptr, (current_source.entry_ptr), (0));

  /*  In old probe, when the break was encountered, a ptr to the break map was saved in seg_info.break_info
   But we don't need it anymore --- I hope --- */



  /* *Note that the return loc in frame will be into break map, not text, and stu_ gets
   *confused, so fudge it (remember stack_frame_exit gives return loc - 1). Record
   *information about the break, to make it restartable. We will want to return to the
   *spot in the break map, unless it gets changed by resetting an active break, but
   *make it look otherwise for a while. */

  probe_info.break_slot_ptr = bsp;
  unspec (probe_info.real_break_return_loc) =
       unspec (callers_frame -> stack_frame.return_ptr) & RETURN_PTR_MASK;
  callers_frame -> stack_frame.return_ptr =
       addrel (current_source.instruction_ptr, 1);

  probe_info.return_method = RETURN_TO_BREAK;
				/* remember how we got here */


  initial_source = current_source;
  probe_info.language_type =
       current_source.seg_info_ptr -> seg_info.language_type;

  probe_static_info.stack_info.good_stack = "0"b;
				/* the stack has changed, after all */

  if bsp -> break_slot.command_list = PAUSE_LINE then do;
				/* reset if temporary break */
      call probe_break_mgr_$reset_break_at_line (probe_info_ptr,
	 probe_info.ptr_to_current_source, BREAK_BEFORE, "0"b, (0));

      call probe_listen_$interpret_line (probe_info_ptr, addr (PAUSE_LINE),
	 length (PAUSE_LINE), (0));
    end;

    else call probe_listen_$interpret_line (probe_info_ptr,
	    addr (bsp -> break_slot.command_list),
	    (bsp -> break_slot.count), (0));

BREAK_TYPE_1_RETURNS:
  call clean_things_up ();		/* clean up */
  return;				/* return to program causing the break */






clean_things_up:
  proc ();

  if probe_info_ptr ^= null () then do; /* do some things, if we can */
      if addr (probe_static_info) ^= null ()
        then /* invalidate the saved stack */
	   probe_static_info.good_stack = "0"b;

      if probe_info.return_method = RETURN_TO_BREAK
        then /* only true if break info is also valid */
	   callers_frame -> stack_frame.return_ptr =
	        probe_info.real_break_return_loc;
    end;				/* repair damage done earlier */

  call probe_subsys_util_$destroy_invocation (probe_info_ptr);

  call iox_$control (probe_info.output_switch, "start", null, 0);
				/* prevent wakeups from being lost while break is executing */
  return;
  end;				/* internal procedure clean_things_up */


  /*	INCLUDE FILES	*/

%include probe_info;

  /* ;;;;;;; */

%include probe_static_info;

  /* ;;;;;;; */

%include probe_modes;

  /* ;;;;;;; */

%include probe_source_info;

  /* ;;;;;;; */

%include probe_seg_info;

  /* ;;;;;;; */

%include probe_break_slot;
%include probe_break_info;
%include probe_break_extension;

  /* ;;;;;;; */

%include probe_info_constants;

  /* ;;;;;;; */

%include runtime_symbol;

  /* ;;;;;;; */

%include statement_map;

  /* ;;;;;;; */

%include quick_entry;

  /* ;;;;;;; */

%include stack_frame;

  end;				/* probe_break_handler_ external procedure */
