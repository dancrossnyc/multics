/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(88-09-07,WAAnderson), approve(88-09-30,MCR7952),
     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
     Added format control comment to make the source more readable.
                                                   END HISTORY COMMENTS */


/* format: style1,insnl,ifthendo,indthenelse,^indnoniterdo,^inditerdo,indcom,^indthenbegin,^indprocbody,ind2,ll78,initcol0,dclind4,idind24,struclvlind1,comcol41 */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

get_size_in_bits_:
  proc (P_type, P_prec, P_packedp) returns (fixed bin);

  /* returns number of bits that data of specified type, etc. occupies,
   or -1 for unhandleable types.

   James R. Davis 20 Sept 78
   modified 20 May 79 JRD to know COBOL, and use data_type_info_
   modified June 83 JMAthane to know ALGOL and PASCAL  */
  /* Added $structure to allow unspec and let to work on arrays and structures 08/24/83 S. Herbst */
  /* Fixed $structure to reject refer extents 08/25/83 S. Herbst */
  /* Added hex (47-50), extended (81-82), and generic (83-86) types 02/14/84 S. Herbst */
  /* Fixed $structure to handle encoded array bounds, now takes ref_ptr not symbol_ptr 06/05/84 S. Herbst */


  dcl (
      P_type		fixed bin,/* data type */
      P_prec		fixed bin (35),
				/* declared precision */
      P_packedp		bit (1) aligned
			/* 1 if packed else 0 */
      )			parameter;

  dcl TOP_LEVEL		fixed bin int static options (constant)
			init (1);
  dcl BASED_CLASS		bit (4) unaligned int static
			options (constant) init ("0011"b);

  dcl t			fixed bin;

  dcl type		fixed bin;
  dcl prec		fixed bin (35);
  dcl packedp		bit (1) aligned;

  dcl 1 an_encoded_prec	aligned like encoded_precision;

  dcl get_size_in_bits_	entry (fixed bin, fixed bin (35),
			bit (1) aligned) returns (fixed bin);
  dcl probe_error_$warning	entry options (variable);
  dcl runtime_symbol_info_$brother
			entry (ptr) returns (ptr);
  dcl runtime_symbol_info_$son
			entry (ptr) returns (ptr);
  dcl stu_$decode_runtime_value
			entry (fixed bin (35), ptr, ptr, ptr, ptr, ptr,
			fixed bin (35)) returns (fixed bin (35));
  dcl stu_$get_implicit_qualifier
			entry (ptr, ptr, ptr, ptr, ptr) returns (ptr);

  dcl (divide, fixed, hbound, lbound, mod, null, substr, unspec)
			builtin;

  type = P_type;
  if type < lbound (sizer, 1) | type > hbound (sizer, 1)
    then
         return (-1);		/* type we cant handle */
  if data_type_info_$info (type).fixed
    then do;
      unspec (an_encoded_prec) = unspec (P_prec);
      prec = an_encoded_prec.prec;
    end;
    else prec = P_prec;
  packedp = P_packedp;

  goto sizer (type);

sizer (1):
sizer (2):
  t = prec + 1;
  if ^packedp
    then if t <= 36
	 then return (36);
	 else return (72);
    else return (t);

sizer (3):
sizer (4):
float_bin:
  t = prec + 1 + 8;			/* sign and exponent */
  if ^packedp
    then if t <= 36
	 then return (36);
	 else return (72);
    else return (t);

sizer (5):
sizer (6):
  t = prec + 1;
  if ^packedp
    then if t <= 36
	 then t = 36;
	 else t = 72;
  return (t * 2);

sizer (7):
sizer (8):
complex_float_bin:
  t = prec + 1 + 8;			/* float complx bin */
  if ^packedp
    then if t <= 36
	 then t = 36;
	 else t = 72;
  return (2 * t);

sizer (9):
  return ((prec + 1) * 9);		/* fixed dec */

sizer (10):
float_dec_9bit:
  return ((prec + 1) * 9 + 9);	/* float dec */

sizer (11):
  return ((((prec + 1) * 9) * 2));	/* cplx fixed dec */

sizer (12):			/* cplx float dec */
complex_float_dec_9bit:
  return (((((prec + 1) * 9) + 9) * 2));

sizer (13):			/* pointer */
  if packedp
    then return (36);
    else return (72);

sizer (14):
  return (36);			/* offset */

sizer (15):
  return (144);			/* label -two pts */


sizer (16):
  return (144);			/* entry - two ptrs */

sizer (17):
  return (-1);			/* structure */

sizer (18):
  return (-1);			/* area */

sizer (19):
  return (prec);			/* bit */

sizer (20):			/* varying bit */
  return (prec + 36);

sizer (21):
  return (prec * 9);		/* char */

sizer (22):
  return ((prec * 9) + 36);		/* char varying */

sizer (23):			/* file */
  return (144);

sizer (24):			/* label constant */
sizer (25):			/* entries of three flavors */
sizer (26):
sizer (27):
sizer (28):			/* not used */
  return (-1);

sizer (29):
sizer (30):
  return (prec * 9);		/* real fixed dec 9bit overpunched */

sizer (31):			/* not used */
sizer (32):			/* not used */
  return (-1);

sizer (33):			/* unsigned binary short */
  if packedp
    then return (prec);
    else return (36);
sizer (34):			/* unsigned binary long */
  if packedp
    then return (prec);
    else return (72);

sizer (35):
  return (prec * 9);		/* unsigned dec 9 bit */

sizer (36):
  return ((prec + 1) * 9);		/* TS dec 9 bit */

sizer (37):			/* not used */
  return (-1);

sizer (38):			/* fixed unsigned 4bit digit aligned COBOL */
  return (prec * 4.5e0);

sizer (39):			/* fixed TS 4bit digit */
  return ((prec + 1) * 4.5e0);

sizer (40):			/* RFU */
  return (-1);

sizer (41):			/* fixed LS 4bit digit aligned COBOL */
  return ((prec + 1) * 4.5e0);

sizer (42):			/* float unsigned 4bit digit aligned COBOL */
  return ((prec + 1) * 4.5e0 + 9);

sizer (43):			/* real fixed 4bit LS byte aligned */
  return (prec * 4.5e0);

sizer (44):
  return ((prec + mod (prec, 2)) * 4.5e0 + 9);
				/* float 4bit byte al */

sizer (45):
  return ((prec + mod (prec, 2)) * 4.5e0 * 2);
				/* cmlx fixed LS 4bit byte al */

sizer (46):			/* cplx flt 4bit byte aligned */
  return (((prec + mod (prec, 2)) * 4.5e0 + 9) * 2);

sizer (47):			/* real flt hex */
sizer (48):
  go to float_bin;

sizer (49):			/* cplx flt hex */
sizer (50):
  go to complex_float_bin;

sizer (51):
sizer (52):
sizer (53):
sizer (54):
sizer (55):
sizer (56):
sizer (57):
sizer (58):
sizer (59):			/* algol68 straight */
sizer (60):			/* algol68 format */
sizer (61):			/* algol68 array descriptor */
sizer (62):			/* algol68 union */
sizer (63):
  return (-1);

sizer (64):			/* pascal typed pointer */
sizer (65):			/* pascal char */
sizer (66):			/* pascal boolean */
  return (prec);

sizer (67):			/* pascal record file */
sizer (68):			/* pascal record */
sizer (69):			/* pascal set */
sizer (70):			/* pascal enumerated type */
  return (-1);

sizer (71):			/* pascal enumerated type element */
sizer (72):			/* pascal enumerated type instance */
  return (prec);

sizer (73):			/* pascal user defined type */
  return (-1);

sizer (74):			/* pascal user defined type instance */
sizer (75):			/* pascal text file */
  return (prec);

sizer (76):
sizer (77):
sizer (78):
sizer (79):
sizer (80):
  return (-1);

sizer (81):			/* real flt dec extended */
  go to float_dec_9bit;

sizer (82):			/* cplx flt dec extended */
  go to complex_float_dec_9bit;

sizer (83):			/* real flt dec generic */
  return ((prec + 1) * 9 + 36);

sizer (84):			/* cplx flt dec generic */
  return (((prec + 1) * 9 + 36) * 2 + mod (prec + 1, 4) * 9);

sizer (85):			/* real flt bin generic */
  return (108);

sizer (86):			/* cplx flt bin generic */
  return (108 * 2 + 36);
%page;

structure:
  entry (A_ref_ptr) returns (fixed bin);

  /* Returns size given a pointer to a reference node. Works on scalars, arrays, structures */

  dcl A_ref_ptr		ptr;
  dcl a_temp_val		fixed bin;



  a_temp_val = size_of_structure (A_ref_ptr -> reference_node.symbol_ptr,
       A_ref_ptr -> reference_node.source_info_ptr,
       (A_ref_ptr -> reference_node.subscript_ptr),
       A_ref_ptr -> reference_node.address_ptr,
       (A_ref_ptr -> reference_node.cross_section), TOP_LEVEL);
  return (a_temp_val);
%page;
size_of_structure:
  proc (P_symbol_ptr, P_source_info_ptr, P_subscript_ptr, P_address_ptr,
       P_cross_section_sw, P_level) returns (fixed bin);

  /* Returns the bit size of most kinds of (PL/1 anyway) variable, including
   structures and arrays. Returns -1 as does get_size_in_bits_ if it can't */

  dcl (P_symbol_ptr, P_source_info_ptr, P_subscript_ptr, P_address_ptr)
			ptr;
  dcl (P_level, round_factor, var_type)
			fixed bin;
  dcl (address_ptr, p)	ptr;
  dcl (P_cross_section_sw, packed_sw)
			bit (1) aligned;
  dcl (i, total_size)	fixed bin (21);
  dcl (code, high, low)	fixed bin (35);
  dcl 1 si		aligned like source_info
			based (P_source_info_ptr);
  dcl 1 ref_subs		aligned based (P_subscript_ptr)
			like reference_subscripts;

  if fixed (P_symbol_ptr -> runtime_symbol.type) = structure_dtype then do;

      total_size = 0;

      do p = runtime_symbol_info_$son (P_symbol_ptr)
	 repeat (runtime_symbol_info_$brother (p))
	 while (p ^= null);

        i = size_of_structure ((p), P_source_info_ptr, null, P_address_ptr,
	   P_cross_section_sw, P_level + 1);
        if i = -1
	then return (-1);
	else total_size = total_size + i;
      end;
    end;

    else do;
      if substr (unspec (P_symbol_ptr -> runtime_symbol.size), 1, 2) = "10"b
        then
	   return (-1);
				/* encoded size field: variable or refer extent */
      var_type = fixed (P_symbol_ptr -> runtime_symbol.type, 17, 0);
      packed_sw = P_symbol_ptr -> runtime_symbol.packed;
      total_size =
	 get_size_in_bits_ (var_type, P_symbol_ptr -> runtime_symbol.size,
	 packed_sw);

      if total_size > 0 & ^packed_sw & P_level > 1
        then /* in structure, round off to whole word */
	   if var_type = pointer_dtype then do;
				/* aligned pointer always starts at even word */
	       if mod (P_symbol_ptr -> runtime_symbol.offset, 2) ^= 0
	         then
		    total_size = total_size + 36;
	     end;
	     else do;
	       if var_type = cplx_fix_bin_1_dtype
		  | var_type = cplx_flt_bin_1_dtype
	         then
		    round_factor = 72;
	       else if var_type = cplx_fix_bin_2_dtype
		  | var_type = cplx_flt_bin_2_dtype
	         then
		    round_factor = 144;
	       else round_factor = 36;

	       total_size =
		  round_factor
		  *
		  divide (total_size + round_factor - 1, round_factor, 17,
		  0);
	     end;
    end;

  if total_size = -1 | P_symbol_ptr -> runtime_symbol.ndims = "0"b
    then
         return (total_size);

  address_ptr = P_address_ptr;
  if address_ptr = null
    then
         if P_symbol_ptr -> runtime_symbol.class = BASED_CLASS
	 then
	      address_ptr =
		 stu_$get_implicit_qualifier (si.block_ptr, P_symbol_ptr,
		 si.stack_ptr,
		 (si.seg_info_ptr -> seg_info.linkage_ptr), si.block_ptr);

  /* Compute array extents, if any */

  do i = 1 to fixed (P_symbol_ptr -> runtime_symbol.ndims);

    if P_subscript_ptr ^= null
      then
	 if ref_subs.number >= i then do;
				/* use specified subscript */
	     low = ref_subs.value (1, i);
	     if P_cross_section_sw
	       then high = ref_subs.value (2, i);
	       else high = low;
	     go to HAVE_BOUNDS;
	   end;

    low = P_symbol_ptr -> runtime_symbol.bounds.lower (i);
    if low < 0 then do;
        low = stu_$decode_runtime_value (low, si.block_ptr, si.stack_ptr,
	   (si.seg_info_ptr -> seg_info.linkage_ptr), si.block_ptr,
	   address_ptr, code);
        if code ^= 0
	then
	     return (-1);
      end;
    high = P_symbol_ptr -> runtime_symbol.bounds.upper (i);
    if high < 0 then do;
        high = stu_$decode_runtime_value (high, si.block_ptr, si.stack_ptr,
	   (si.seg_info_ptr -> seg_info.linkage_ptr), si.block_ptr,
	   address_ptr, code);
        if code ^= 0
	then
	     return (-1);
      end;
HAVE_BOUNDS:
    if low <= 0
      then
	 call probe_error_$warning (null, 0, "Lower bound <= 0.");
    if high <= 0
      then
	 call probe_error_$warning (null, 0, "Upper bound <= 0.");
    if low <= 0 | high <= 0
      then
	 return (-1);
    total_size = total_size * (high - low + 1);
  end;
  return (total_size);

  end size_of_structure;

%include data_type_info_;
%page;
%include encoded_precision;
%page;
%include probe_references;
%page;
%include probe_seg_info;
%page;
%include probe_source_info;
%page;
%include runtime_symbol;
%page;
%include std_descriptor_types;


  end get_size_in_bits_;
