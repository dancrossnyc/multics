/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(88-09-07,WAAnderson), approve(88-09-30,MCR7952),
     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
     Added format control comment to make the source more readable.
                                                   END HISTORY COMMENTS */


/* format: style1,insnl,ifthendo,indthenelse,^indnoniterdo,^inditerdo,indcom,^indthenbegin,^indprocbody,ind2,ll78,initcol0,dclind4,idind24,struclvlind1,comcol41 */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

ioa_util_:
  proc (P_code);

  return;

  /* *	This procedure includes a small handful of entries for calling ioa_ in ways that ioa_
   *	itself doesn't support. In particular, it provides an equivalent to ioa_$ioa_switch
   *	which operates on a supplied string and IOCB pointer, and also part of an arglist,
   *	much like ioa_$general_rs. */

  dcl (
      P_string_ptr		pointer,
      P_string_lth		fixed bin (21),
      P_arg_list_ptr	pointer,
      P_first_arg		fixed bin,
      P_output_switch	pointer,
      P_output_str		char (*) varying,
      P_code
      )			parameter;

  dcl (new_arg_list_ptr, old_arg_list_ptr)
			pointer;
  dcl (new_argno, new_arg_count)
			fixed bin;
  dcl (old_argno, old_arg_count)
			fixed bin;
  dcl output_lth		fixed bin (21);
  dcl output_switch		pointer;
  dcl ioa_entry		entry variable options (variable);
  dcl ioa_str_ptr		pointer;
  dcl (pad_sw, nl_sw, iocb_sw)
			bit (1) aligned;
  dcl code		fixed bin (35);
  dcl based_fb35		fixed bin (35) based;
  dcl based_string_ptr	pointer;
  dcl based_string_lth	fixed bin (21);
  dcl based_string		char (based_string_lth)
			based (based_string_ptr);

  dcl 1 new_arg_list	aligned based (new_arg_list_ptr),
       2 header,
       (
        3 twice_nargs,
        3 code,
        3 twice_ndescs,
        3 pad1
        )			fixed bin (17) unaligned,
       2 arg_ptr		(new_arg_count) pointer aligned,
       2 desc_ptr		(new_arg_count) pointer aligned;

  dcl 1 old_arg_list	aligned based (old_arg_list_ptr),
       2 header,
       (
        3 twice_nargs,
        3 code,
        3 twice_ndescs,
        3 pad1
        )			fixed bin (17) unaligned,
       2 arg_ptr		(old_arg_count) pointer aligned,
       2 desc_ptr		(old_arg_count) pointer aligned;

  dcl 1 descriptor		aligned based,
       2 version_2		bit (1) unaligned,
				/* should be "1"b */
       2 type		fixed bin (6) unsigned unaligned,
				/* see std_descriptor_types.incl.pl1 for a list */
       2 packed		bit (1) unaligned,
       2 dimensions		fixed bin (4) unsigned unaligned,
       2 size		fixed bin (24) unsigned unaligned;

  dcl 1 arith_descriptor	aligned based,
       2 version_2		bit (1) unaligned,
       2 type		fixed bin (6) unsigned unaligned,
       2 packed		bit (1) unaligned,
       2 dimensions		fixed bin (4) unsigned unaligned,
       2 scale		fixed bin (11) unaligned,
       2 precision		fixed bin (11) unaligned;

  dcl 1 ptr_desc		aligned like arith_descriptor;
  dcl 1 ioa_str_desc	aligned like descriptor;

  dcl ioa_$ioa_switch	entry options (variable);
  dcl ioa_$ioa_switch_nnl	entry options (variable);
  dcl ioa_$general_rs	entry (pointer, fixed bin, fixed bin, char (*),
			fixed bin (21), bit (1) aligned,
			bit (1) aligned);
  dcl cu_$generate_call	entry (entry, pointer);
  dcl cu_$grow_stack_frame	entry (fixed bin (18), ptr, fixed bin (35));

  dcl iox_$user_output	pointer external static;

  dcl ioa_error		condition;

  dcl (addr, currentsize, divide, maxlength, null, substr, unspec)
			builtin;

  /*  */

ioa_util_$switch_with_string:
  entry (P_string_ptr, P_string_lth, P_arg_list_ptr, P_first_arg,
       P_output_switch);

  pad_sw = "0"b;
  nl_sw = "0"b;
  iocb_sw = "1"b;
  goto COMMON;


ioa_util_$switch_nnl_with_string:
  entry (P_string_ptr, P_string_lth, P_arg_list_ptr, P_first_arg,
       P_output_switch);

  pad_sw = "0"b;
  nl_sw = "1"b;
  iocb_sw = "1"b;
  goto COMMON;


ioa_util_$rs_with_string:
  entry (P_string_ptr, P_string_lth, P_arg_list_ptr, P_first_arg,
       P_output_str);

  pad_sw = "0"b;
  nl_sw = "0"b;
  iocb_sw = "0"b;
  goto COMMON;


ioa_util_$rsnnl_with_string:
  entry (P_string_ptr, P_string_lth, P_arg_list_ptr, P_first_arg,
       P_output_str);

  pad_sw = "0"b;
  nl_sw = "1"b;
  iocb_sw = "0"b;
  goto COMMON;


  /* *	First, figure out how big the new arg list will be, make room
   *	for it, and fill in the header */


COMMON:
  old_arg_list_ptr = P_arg_list_ptr;	/* find out about arg list we've been given */
  old_arg_count = divide (old_arg_list.twice_nargs, 2, 17, 0);

  new_arg_count = old_arg_count - P_first_arg + 1;
				/* new_arg_count is now exactly number of args as */
				/* are in desired portion of old_arg_list */

  if iocb_sw
    then /* if we have to put an IOCB pointer at the beginning, */
         new_arg_count = new_arg_count + 1;
				/* make room for one more argument */
  new_arg_count = new_arg_count + 1;	/* also increment it to make room for the ioa_ string */

  call cu_$grow_stack_frame (currentsize (new_arg_list), new_arg_list_ptr,
       code);
  if code ^= 0
    then /* make room for the new arg list, then fill it in */
         signal ioa_error;		/* a reasonablke thing to do, I think */

  new_arg_list.twice_nargs = 2 * new_arg_count;
				/* fill in new arg list header */
  new_arg_list.twice_ndescs = 2 * new_arg_count;
  new_arg_list.code = 4;		/* Intersegment, external call type */
  new_arg_list.pad1 = 0;


  /* *	This next section of code constructs descriptors and sets various pointers
   *	which will be inserted into the newly created argument list */


  unspec (ioa_str_desc) = ""b;	/* construct descriptor for ioa_ control string */
  ioa_str_desc.version_2 = "1"b;
  ioa_str_desc.type = char_dtype;
  ioa_str_desc.packed = "0"b;
  ioa_str_desc.dimensions = 0;
  ioa_str_desc.size = P_string_lth;	/* length of ioa_ control string */

  ioa_str_ptr = P_string_ptr;		/* pointer to input string */

  if iocb_sw then do;		/* construct various stuff to describe the output IOCB */
      if P_output_switch ^= null ()
        then /* null IOCB pointer means user_output, of course */
	   output_switch = P_output_switch;
        else output_switch = iox_$user_output;

      unspec (ptr_desc) = ""b;
      ptr_desc.version_2 = "1"b;	/* construct the descriptor for the IOCB pointer */
      ptr_desc.type = pointer_dtype;
      ptr_desc.packed = "0"b;
      ptr_desc.dimensions = 0;
      ptr_desc.scale = 0;		/* I don't know what scale and precision should be for */
      ptr_desc.precision = 72;	/* a pointer, but hopefully my callee won't, either. */
    end;


  /* *	Now, fill in the argument pointers and descriptors in the new argument
   *	list -- for the entries which are designed to do output, an IOCB pointer
   *	must be inserted at the beginning */


  new_argno = 1;			/* the current argno in the new arg list */

  if iocb_sw then do;
      new_arg_list.arg_ptr (new_argno) = addr (output_switch);
      new_arg_list.desc_ptr (new_argno) = addr (ptr_desc);
      new_argno = new_argno + 1;	/* so we'll start packing it at the right arg */
    end;

  new_arg_list.arg_ptr (new_argno) = ioa_str_ptr;
  new_arg_list.desc_ptr (new_argno) = addr (ioa_str_desc);
  new_argno = new_argno + 1;		/* now it's the index of the first arg to be copied into */

  old_argno = P_first_arg;		/* now copy useful part of old arg list */

  do new_argno = new_argno to new_arg_count;
				/* now go through all the ones that are left */
    new_arg_list.arg_ptr (new_argno) = old_arg_list.arg_ptr (old_argno);
    new_arg_list.desc_ptr (new_argno) = old_arg_list.desc_ptr (old_argno);
    old_argno = old_argno + 1;	/* point at the next arg, and loop again */
  end;


  /* *	Now, we can finally call ioa_. We call ioa_$general_rs if we can, otherwise
   *	we have to call ioa_$ioa_switch or ioa_$ioa_switch_nnl */


  if iocb_sw then do;		/* must call ioa_$ioa_switch directly, since there is nothing */
      if nl_sw
        then /* like ioa_$general_rs for doing output */
	   ioa_entry = ioa_$ioa_switch;
        else ioa_entry = ioa_$ioa_switch_nnl;
      call cu_$generate_call (ioa_entry, new_arg_list_ptr);
				/* DO IT */
    end;

    else do;			/* for this, we perform complicated machinations */
      based_string_ptr = addr (substr (P_output_str, 1, 1));
				/* must fake a char (*) argument for ioa_$general_rs */
      based_string_lth = maxlength (P_output_str);

      call ioa_$general_rs (new_arg_list_ptr,
	 1,			/* note that control string is always first arg in new arglist */
	 2,			/* and that first ioa_ arg is always number 2 */
	 based_string, output_lth, pad_sw, nl_sw);

      addr (P_output_str) -> based_fb35 = output_lth;
				/* KLUDGE to stick length back into varying string */
    end;

  return;				/* Goddamn, am I glad this is finally over */

  /*  */

%include std_descriptor_types;

  end;				/* ioa_util_ external procedure */
