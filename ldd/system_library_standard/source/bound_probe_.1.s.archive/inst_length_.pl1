/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(88-09-07,WAAnderson), approve(88-09-30,MCR7952),
     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
     Added format control comment to make the source more readable.
                                                   END HISTORY COMMENTS */


/* format: style1,insnl,ifthendo,indthenelse,^indnoniterdo,^inditerdo,indcom,^indthenbegin,^indprocbody,ind2,ll78,initcol0,dclind4,idind24,struclvlind1,comcol41 */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

inst_length_:
  procedure (ip, special) returns (fixed bin);

  /* given a ptr to an instruction (ip) - return the number of words that must be
   moved to relocate the instruction.  Note special handling of an "xec" off
   pl1_operators

   Issue Unresolved - Seems to assume that all "xec" are xec7s of pl1_operators
   This may not be true for COBOL and for sure its false for ALM.  Does it need
   a "language_type" parameter?

*/

  dcl (
      ip			pointer,	/* to instruction */
      special		fixed bin
      )			parameter;/* if non-EIS, nonzero means special modifiers;
						   if EIS, then number of EIS-type descriptors */
  dcl pop			pointer;	/* to instruction in pl1 operators */
  dcl op_index		fixed bin;/* op code, used as index into op_mnemonic */

  dcl 1 instruction_overlay	based aligned,
				/* for picking out op code */
       2 tag		bit (3) unaligned,
       2 offset		fixed bin (14) unaligned,
       2 opcode		bit (10) unaligned;

  dcl pl1_operators_$operator_table
			external;


  dcl (addr, addrel, fixed)	builtin;
				/* find out length of the instruction */
  op_index = fixed (ip -> instruction_overlay.opcode, 10, 0);
				/* get instruction_overlay.opcode */

  /* There is one degenerate case:  that of an xec of an eis instruction in the operators.
   The descriptors follow the xec, so its lenght must be adjusted.  */

  if op_mnemonic_$op_mnemonic (op_index).opcode = "xec " then do;
      pop = addrel (addr (pl1_operators_$operator_table), ip -> offset);
      op_index = fixed (pop -> instruction_overlay.opcode, 10, 0);
    end;

  special = op_mnemonic_$op_mnemonic (op_index).num_desc;
  return (op_mnemonic_$op_mnemonic (op_index).num_words);

%include op_mnemonic_format;

  end inst_length_;



