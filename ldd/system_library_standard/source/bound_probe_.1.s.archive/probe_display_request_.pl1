/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(88-09-07,WAAnderson), approve(88-09-30,MCR7952),
     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
     Added format control comment to make the source more readable.
                                                   END HISTORY COMMENTS */


/* format: style1,insnl,ifthendo,indthenelse,^indnoniterdo,^inditerdo,indcom,^indthenbegin,^indprocbody,ind2,ll78,initcol0,dclind4,idind24,struclvlind1,comcol41 */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

probe_display_request_:
  proc (P_probe_info_ptr);

  /* This is the request processor for the display request - the actual work is done by probe_display_data_
   we just check the syntax -

   Modified 15 Oct 79 JRDavis
   Modified 08 Mar 80 JRDavis to always indirect through constant */
  /* Made subscript ranges work 07/23/82 S. Herbst */
  /* Changed for new probe_increment_indices_ calling sequence 08/25/83 S. Herbst */
  /* Changed to allow expression for the count arg 08/26/83 S. Herbst */
  /* Removed heuristic that always interpreted a pointer as an indirection 04/17/85 Steve Herbst */


  dcl P_probe_info_ptr	ptr aligned parameter;

  dcl indirect		bit (1) aligned;
				/* we should indirect through address supplied */
  dcl daddress		ptr;	/* to the place to dump */
  dcl dformat		char (32) aligned;
				/* name of format to use */
  dcl dunits		fixed bin (35);
				/* how many to dump */

  dcl a_ref_ptr		pointer;
  dcl 1 a_ref		aligned like reference_node based (a_ref_ptr);

  dcl 1 (source, target)	aligned like computational_data;

  dcl assign_$computational_	entry (ptr, ptr, fixed bin (35));

  dcl probe_display_data_	entry (ptr, ptr, char (32) aligned, fixed bin,
			fixed bin (35));

  dcl probe_get_$expression	entry (ptr,
			1 structure aligned like reference_node,
			fixed bin (35));
  dcl probe_get_$integer	entry (ptr, fixed bin (35), fixed bin (35));
  dcl probe_create_reference_ entry (ptr, ptr);
  dcl probe_increment_indices_
			entry (bit (1) aligned, (*) fixed bin,
			(2, *) fixed bin (24),
			fixed bin, bit (1) aligned, bit (1) aligned);
  dcl stu_$get_runtime_address
			entry (ptr, ptr, ptr, ptr, ptr, ptr, ptr)
			returns (ptr);

  dcl based_ptr		ptr aligned based;
  dcl code		fixed bin (35);
  dcl identifiers_name	char (ct -> identifier.length)
			based (ct -> identifier.name);

  dcl probe_error_		entry options (variable);
  dcl probe_et_$syntax_error	fixed bin (35) external static;

  dcl (addr, null, unspec)	builtin;
%page;

  probe_info_ptr = P_probe_info_ptr;
  indirect = "0"b;

  dunits = 1;
  dformat = "octal";		/* defaults */

  call probe_create_reference_ (probe_info_ptr, a_ref_ptr);
				/* make a reference node */

  if ct -> token.type >= probe_info.end_token
    then call probe_error_ (probe_info_ptr, probe_et_$syntax_error);
				/* no args ! */

  if ct -> token.type = TIMES | ct -> token.type = ARROW |
       ct -> token.type = C_INDIRECTION then do;
      indirect = "1"b;
      ct = ct -> token.next;
    end;

  call probe_get_$expression (probe_info_ptr, a_ref, code);
  if code ^= 0
    then go to SOME_ERROR;

  if indirect
    then daddress = a_ref.address_ptr -> based_ptr;
    else daddress = a_ref.address_ptr;

  if there_is_more () /* have specified a format */
    then do;
      if ct -> token.type ^= NAME_TYPE
        then goto SYNTAX_ERROR;
      dformat = identifiers_name;
      ct = ct -> token.next;

      if there_is_more ()
        then do;
	call probe_get_$expression (probe_info_ptr, a_ref, code);
	if code ^= 0
	  then go to SOME_ERROR;
	if a_ref.address_ptr = null
	  then go to SYNTAX_ERROR;

	unspec (source) = "0"b;
	source.address = a_ref.address_ptr;
	source.data_type = a_ref.type;
	source.prec_or_length = a_ref.precision;

	unspec (target) = "0"b;
	target.address = addr (dunits);
	target.data_type = real_fix_bin_1_dtype;
	target.prec_or_length = 35;

	call assign_$computational_ (addr (target), addr (source), code);
	if code ^= 0
	  then go to SYNTAX_ERROR;
        end;
    end;				/* trying for format */

  if there_is_more ()		/* too many args */
    then call probe_error_ (probe_info_ptr, probe_et_$syntax_error);

  if probe_info.execute
    then
         if a_ref.cross_section
	 then call display_cross_section;
	 else call probe_display_data_ (probe_info_ptr, daddress, dformat,
		 (dunits), code);

  if code ^= 0 then do;
SOME_ERROR:
      call probe_error_ (probe_info_ptr, code);
    end;
  return;


SYNTAX_ERROR:
  call probe_error_ (probe_info_ptr, probe_et_$syntax_error);
  return;


there_is_more:
  proc () returns (bit (1) aligned);
  return (ct -> token.type < end_token);
  end there_is_more;
%page;
display_cross_section:
  proc;

  /* Cycles through the subscript range specified and displays at a pointer
   to each array element. */

  dcl Indices		(16) fixed bin;
  dcl (Base_addr, Block_ptr, Linkage_ptr, Psymbp, Stack_ptr)
			ptr;
  dcl i			fixed bin;
  dcl done		bit (1) aligned;
  dcl 1 ref_subscripts	aligned based (a_ref.subscript_ptr)
			like reference_subscripts;

  do i = 1 to ref_subscripts.number;
    Indices (i) = ref_subscripts.value (1, i);
  end;
  Base_addr = a_ref.base_addr;
  Block_ptr = a_ref.source_info_ptr -> source_info.block_ptr;
  Linkage_ptr =
       a_ref.source_info_ptr -> source_info.seg_info_ptr
       -> seg_info.linkage_ptr;
  Psymbp = a_ref.symbol_ptr;
  Stack_ptr = a_ref.source_info_ptr -> source_info.stack_ptr;

  done = "0"b;
  do while (^done);
    daddress =
         stu_$get_runtime_address (Block_ptr, Psymbp, Stack_ptr, Linkage_ptr,
         Block_ptr,
         Base_addr, addr (Indices));

    call probe_display_data_ (probe_info_ptr, daddress, dformat, (dunits),
         code);

    call probe_increment_indices_ ("0"b, Indices, ref_subscripts.value,
         ref_subscripts.number,
         done, ("0"b));
  end;
  end display_cross_section;
%page;
%include probe_info;

  /* ;;;;;;; */

%include probe_operators;

  /* ;;;;;;; */

%include probe_tokens;

  /* ;;;;;;; */

%include probe_references;

  /* ;;;;;;; */

%include probe_source_info;

  /* ;;;;;;; */

%include probe_seg_info;

  /* ;;;;;;; */

%include std_descriptor_types;

  /* ;;;;;;; */

%include computational_data;

  end probe_display_request_;
