/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(88-09-07,WAAnderson), approve(88-09-30,MCR7952),
     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
     Added format control comment to make the source more readable.
  2) change(88-10-19,WAAnderson), approve(88-10-19,MCR7952),
     audit(88-10-25,RWaters), install(88-10-27,MR12.2-1194):
     Modified to support C. We don't use 'ep', just 'bp'. The code
     written for the other languages is poorly written and doesn't lend
     itself well to the needs of C so a new block of code was written
     exclusively for C.
                                                   END HISTORY COMMENTS */

/* format: style1,insnl,ifthendo,indthenelse,^indnoniterdo,^inditerdo,indcom,^indthenbegin,^indprocbody,ind2,ll78,initcol0,dclind4,idind24,struclvlind1,comcol41 */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

probe_block_name_:
  proc (P_probe_info_ptr, P_source_info_ptr, P_longp)
       returns (char (256) varying);

  /* Given a block as defined by the source_info block pointed to by */
  /* P_source_info_ptr,  return its name in one of the following     */
  /* formats:                                                        */
  /*                                                                 */
  /* segname$entryname                      for an external entry.   */
  /* $entryname in segname                  for an internal proc.    */
  /* Block at line NN in segname$entryname  for a begin block where  */
  /*                                        line number is known.    */
  /* Block at segname|NNNNNN in entryname   for a begin block of     */
  /*                                        unknown line number.     */
  /*                                                                 */
  /* We use the following components of source_info:                 */
  /*                                                                 */
  /* block pointer (if available)                                    */
  /* entry pointer (except for quick begin blocks)                   */
  /* seg_info (to get the segname)                                   */
  /*                                                                 */
  /* The entryname portion of seg_info is not used, because there is */
  /* only one seg_info for a given external procedure, and we might  */
  /* be interested in one of its entry points other than the main    */
  /* one.                                                            */
  /*                                                                 */
  /*   James R. Davis 12 July 79                                     */

  /* 10/21/82, S.Herbst,                                             */
  /* Changed to print entry point name of ext proc if different from */
  /* segname.                                                        */
  /* 06/??/83, JMAthane,                                             */
  /* Changed to handle PASCAL with blocks.                           */
  /* 08/26/83, S.Herbst,                                             */
  /* Implemented P_longp to return full pathnames.                   */
  /* 02/14/84, S.Herbst,                                             */
  /* Fixed to work on hardcore segments.                             */
  /* 05/29/84, S.Herbst,                                             */
  /* Fixed bug sometimes causing foo$bar$foo$baz, also garbage names.*/
  /* 05/29/84, S. Herbst,                                            */
  /* Fixed to detect ext entry points in lang's other than PL/1      */
  /* (runtime_block.type="01"b3).                                    */

  dcl P_probe_info_ptr	ptr parameter;
				/* Input: only used because subrs we call use it */
  dcl P_source_info_ptr	ptr parameter;
				/* to callers source info */
  dcl P_longp		bit (1) aligned parameter;
				/* Input: return full pathnames */

  dcl ret_string		char (256) varying;
				/* what we return */

  dcl source_info_ptr	ptr;

  dcl 1 callers_source	aligned like source_info
			based (source_info_ptr);

  dcl bp			ptr;	/* copy of block_ptr */
  dcl ep			ptr;	/* cop of entry ptr */
  dcl sip			ptr;	/* ptr to seg_info */
  dcl p			ptr;	/* temp ptr */
  dcl (file, line, stmt)	fixed bin;/* from statement_map entry */
  dcl whole_name		char (256);
  dcl segment_pathname	char (168);
  dcl ext_entry_name	char (72);
  dcl proc_name		char (32);

  dcl format_pointer_$its	entry (ptr, bit (1) aligned, ptr)
			returns (char (256) varying);
  dcl ioa_$rsnnl		entry options (variable);
  dcl get_entry_name_	entry (ptr, char (*), fixed bin (18),
			char (8) aligned, fixed bin (35));
  dcl pathname_		entry (char (*), char (*)) returns (char (168));
  dcl code		fixed bin (35);

  dcl (addrel, after, before, fixed, index, ltrim, null, rel, rtrim,
      substr)		builtin;

  probe_info_ptr = P_probe_info_ptr;
  source_info_ptr = P_source_info_ptr;
  bp = callers_source.block_ptr;
  ep = callers_source.entry_ptr;

  sip = callers_source.seg_info_ptr;

  ext_entry_name = "";
  ret_string = "";
  segment_pathname = "";
  if (probe_info.language_type = C_lang_type) then do;
      if P_longp
        then
	   segment_pathname =
	        pathname_ (sip -> seg_info.directory_name,
	        sip -> seg_info.entry_name);
        else segment_pathname = sip -> seg_info.entry_name;
      if bp ^= null () then do;
	if bp -> runtime_block.name then do;
	    p = addrel (bp, bp -> runtime_block.name);
	    ret_string = p -> acc.string;
	    ret_string =
	         before (ret_string, "$") || " in "
	         || rtrim (segment_pathname);
	    return (ret_string);
	  end;			/* named proc */
	  else do;		/* is a begin block */
	    ret_string = sip -> seg_info.entry_name;
	    if bp -> runtime_block.first ^= "0"b
	      then do;		/* have statement map */
	        p = addrel (bp, bp -> runtime_block.first);
				/* pt to statement_map entry */

	        file = fixed (p -> statement_map.file, 8);
	        line = fixed (p -> statement_map.line, 14);
	        stmt = fixed (p -> statement_map.statement, 5);

	        call ioa_$rsnnl (
		   "Block at line ^[^d-^;^s^]^d^[,^d^;^s^] of ^a",
		   ret_string, (0),
		   file > 0, file, line, stmt > 1, stmt,
		   rtrim (segment_pathname));
	        return (ret_string);
	      end;		/* begin block with line */
	  end;			/* begin-block */
        end;			/* using bp */
    end;

  if P_longp then do;
      whole_name, segment_pathname =
	 pathname_ (sip -> seg_info.directory_name,
	 sip -> seg_info.entry_name);
      proc_name = sip -> seg_info.segname;
      if proc_name ^= sip -> seg_info.entry_name
        then /* bound component ... unless language is C */
	   whole_name =
	        rtrim (sip -> seg_info.segname) || " in "
	        || segment_pathname;
    end;
    else do;
      whole_name, proc_name = sip -> seg_info.segname;
      if whole_name = ""		/* is this possible */
        then whole_name = sip -> seg_info.entry_name;
    end;
  if whole_name = ""		/* what still?? */
    then whole_name = "<<unknown>>";

  if bp ^= null ()
    then do;
				/* first look for containing block if PASCAL with block */
      if bp -> symbol_block.type = PASCAL_WITH_BLOCK
        then
	   bp = addrel (bp, bp -> symbol_block.owner);
      if bp -> runtime_block.name /* a proc, may be internal or external */
        then do;
	p = addrel (bp, bp -> runtime_block.name);
	ret_string = p -> acc.string;
	ret_string = before (ret_string, "$");
				/* just the segment name */
	if P_longp
	  then
	       if ret_string = proc_name
	         then ret_string = whole_name;
				/* external procedure ... all external in C */
	         else ret_string =
		         ret_string || " in " || rtrim (whole_name);
				/* internal procedure */
	if (bp -> runtime_block.father = "777421"b3
	     | bp -> runtime_block.type = "01"b3)
	  then
	       /* external entry point */
	       if ep ^= null then do;
		 call get_entry_name_ (ep, ext_entry_name, 0, "", code);
		 if index (ext_entry_name, "$") ^= 0
		   then /* just the entry point name */
		        ext_entry_name = after (ext_entry_name, "$");
		 if code = 0 & ext_entry_name ^= ret_string
		   then
		        if P_longp
			then
			     if sip -> seg_info.segname
				^= sip -> seg_info.entry_name
			       then /* bound comp */
				  ret_string =
				       rtrim (sip -> seg_info.segname)
				       || "$" ||
				       rtrim (ext_entry_name)
				       || " in " || segment_pathname;
			       else ret_string =
				       rtrim (segment_pathname)
				       || "$"
				       || rtrim (ext_entry_name);
			else ret_string =
				ret_string || "$"
				|| rtrim (ext_entry_name);
	         end;
        end;			/* named proc */
        else do;			/* is a begin block */
	if bp -> runtime_block.first ^= "0"b
	  then do;		/* have statement map */
	    p = addrel (bp, bp -> runtime_block.first);
				/* pt to statement_map entry */

	    file = fixed (p -> statement_map.file, 8);
	    line = fixed (p -> statement_map.line, 14);
	    stmt = fixed (p -> statement_map.statement, 5);

	    call ioa_$rsnnl ("Block at line ^[^d-^;^s^]^d^[,^d^;^s^] of ^a",
	         ret_string, (0),
	         file > 0, file, line, stmt > 1, stmt,
	         whole_name);
	  end;			/* begin block with line */
	  else do;
	    call ioa_$rsnnl ("Block at ^a|^o", ret_string, (0),
	         whole_name,
	         fixed (rel (ep), 18));
	  end;			/* begin block with offset */
        end;			/* begin-block */
    end;				/* using bp */
  else if ep ^= null ()
    then do;
      if is_begin_block (ep)
        then do;
	call ioa_$rsnnl ("Block at ^a|^o", ret_string, (0),
	     whole_name,
	     fixed (rel (ep), 18));
        end;			/* begin-block */
        else do;
	dcl entry_point_name        char (32);
	call get_entry_name_ (ep, entry_point_name, (0), (""), code);
	if code = 0
	  then
	       if P_longp
	         then ret_string =
		         rtrim (whole_name) || "$"
		         || rtrim (entry_point_name);
	         else ret_string = rtrim (entry_point_name);
	  else do;
	    ret_string = format_pointer_$its (ep, "1"b, null);
	    ret_string =
	         ltrim (substr (ret_string, index (ret_string, " ")));
	  end;
        end;			/* proc using ep */
    end;				/* trying to use ep */
  else ret_string = rtrim (whole_name); /* have no info, so I doubt this will help */

  return (ret_string);




is_begin_block:
  proc (tp) returns (bit (1) aligned);


  dcl tp			ptr parameter;
  dcl cp			ptr;
  dcl iword		bit (36) aligned based (cp);
  dcl i			fixed bin;
  dcl (addrel, hbound)	builtin;

  cp = addrel (tp, 1);		/* point to first instruction */
  do i = 1 to hbound (begin_block_entries, 1);
    if iword = begin_block_entries (i)	/*  matches */
      then return ("1"b);
  end;
  return ("0"b);

%include begin_block_entries;

  end is_begin_block;

%include probe_source_info;

%include probe_seg_info;

%include statement_map;

%include acc;

%include runtime_symbol_block;

%include runtime_block_type;

%include runtime_symbol;

%include probe_lang_types;
%include probe_info;
  end probe_block_name_;
