/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(88-09-07,WAAnderson), approve(88-09-30,MCR7952),
     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
     Added format control comment to make the source more readable.
                                                   END HISTORY COMMENTS */


/* format: style1,insnl,ifthendo,indthenelse,^indnoniterdo,^inditerdo,indcom,^indthenbegin,^indprocbody,ind2,ll78,initcol0,dclind4,idind24,struclvlind1,comcol41 */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

probe_array_bounds_:
  proc
       (P_probe_info_ptr, P_symbolp, P_reference, P_source_info, P_address,
       P_code) returns ((2, 16) fixed bin (24));

  /* given all the inputs abouta reference, return an array filled
   with the upper and lower bounds of all its subscripts - so we
   ca do subscriptrange checking and fill in star extents

   Initially Coded by James R. Davis 22 Sept 78
   Modified: JRD 31 Oct 78 to return FORTRAN arrays reversed
   */

  dcl (
      P_probe_info_ptr	pointer,
      P_symbolp		ptr,	/* (input) to runtime_symbol node */
      P_address		ptr,	/* (input) for stu_, where symbols storage is */
      P_code		fixed bin (35)
      )			parameter;/* error code */
  dcl 1 P_reference		aligned like reference_node parameter;
				/* (input) info about reference */
  dcl 1 P_source_info	aligned like source_info parameter;
				/* (input) where declared; etc */

  dcl array_bounds		(2, 16) fixed bin (24);
				/* what we fill in for caller */
  dcl (low, high)		fixed bin (35);
  dcl code		fixed bin (35);
  dcl dims		fixed bin;/* how many dims ref has */
  dcl reverse		bit (1);	/* set to reverse bounds */
  dcl father_ptr		ptr;	/* to the runtime_block containing the symbol */
  dcl level		fixed bin;/* nesting of this variable */
  dcl array_bounds_x	fixed bin;

  dcl probe_et_$bad_value	fixed bin (35) external static;
  dcl probe_et_$recorded_message
			fixed bin (35) external static;

  dcl stu_$decode_runtime_value
			entry (fixed bin (35), ptr, ptr, ptr, ptr, ptr,
			fixed bin (35)) returns (fixed bin (35));
  dcl probe_error_$record	entry options (variable);
  dcl probe_error_$malfunction
			entry options (variable);

  dcl (
      LOW			init (1),
      HIGH		init (2)
      )			fixed bin internal static options (constant);

  dcl (addrel, fixed, hbound) builtin;
				/*  */

  probe_info_ptr = P_probe_info_ptr;
  P_code = 0;			/* until we find otherwise */

  dims = fixed (P_symbolp -> runtime_symbol.ndims, 6);
  if dims > hbound (array_bounds, 2)	/* PL/I  allows >15 dims, but we dont */
    then call probe_error_$malfunction ();

  /* get pointer to the runtime_block that symbol is part of, see if we are FORTRAN */

  level = fixed (P_symbolp -> runtime_symbol.level, 6, 0);
  if level <= 1
    then father_ptr = addrel (P_symbolp, P_symbolp -> runtime_symbol.father);
    else do;
      father_ptr = P_symbolp;		/* point at symbol node */
      do low = 1 to level;		/* trace back to the block */
        father_ptr = addrel (father_ptr, father_ptr -> runtime_symbol.father);
      end;
    end;
  reverse = father_ptr -> runtime_block.fortran;

  do array_bounds_x = 1 to dims;	/* reverse order for FORTRAN */

    low = P_symbolp -> runtime_symbol.bounds (array_bounds_x).lower;
    if low < 0 then do;
        low = stu_$decode_runtime_value (low,
	   P_source_info.block_ptr, P_source_info.stack_ptr,
	   (P_source_info.seg_info_ptr -> seg_info.linkage_ptr),
	   P_source_info.block_ptr, P_address, code);
        if code ^= 0 then do;
	  call probe_error_$record (probe_info_ptr, probe_et_$bad_value,
	       P_reference.name);
	  goto RECORDED_MESSAGE;
	end;
      end;

    high = P_symbolp -> runtime_symbol.bounds (array_bounds_x).upper;
    if high < 0 then do;
        high = stu_$decode_runtime_value (high,
	   P_source_info.block_ptr, P_source_info.stack_ptr,
	   (P_source_info.seg_info_ptr -> seg_info.linkage_ptr),
	   P_source_info.block_ptr, P_address, code);
        if code ^= 0 then do;
	  call probe_error_$record (probe_info_ptr, probe_et_$bad_value,
	       P_reference.name);
	  goto RECORDED_MESSAGE;
	end;
      end;

    if reverse then do;
        array_bounds (LOW, dims - array_bounds_x + 1) = low;
        array_bounds (HIGH, dims - array_bounds_x + 1) = high;
      end;
      else do;
        array_bounds (LOW, array_bounds_x) = low;
        array_bounds (HIGH, array_bounds_x) = high;
      end;

  end;
  return (array_bounds);


RECORDED_MESSAGE:			/* error exit */
  P_code = probe_et_$recorded_message;
  array_bounds (*, *) = -1;		/* return useless dimensions */
  return (array_bounds);

  /*  */

%include probe_info;

  /* ;;;;;;; */

%include probe_source_info;

  /* ;;;;;;; */

%include probe_seg_info;

  /* ;;;;;;; */

%include runtime_symbol;

  /* ;;;;;;; */

%include probe_tokens;

  /* ;;;;;;; */

%include probe_references;

  end;				/* probe_array_bounds_ external procedure */
