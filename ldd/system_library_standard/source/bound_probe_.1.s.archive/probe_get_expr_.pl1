/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(88-05-25,WAAnderson), approve(88-10-18,MCR7952),
     audit(88-10-18,JRGray), install(88-10-24,MR12.2-1184):
     Added the internal procedures 'account_for_c_indirection' and
     'trace_c_indirection' to handle the C_INDIRECTION operator.The
     C_INDIRECTION operator and the TIMES operator are both represented
     graphically by the * character.
  2) change(88-05-27,WAAnderson), approve(88-10-18,MCR7952),
     audit(88-10-18,JRGray), install(88-10-24,MR12.2-1184):
     Added support for the AMPERSAND operator in 'get_factor'.
  3) change(88-06-13,WAAnderson), approve(88-10-18,MCR7952),
     audit(88-10-18,JRGray), install(88-10-24,MR12.2-1184):
     Modified 'get_bexpr' to handle the C_LEFT_SHIFT and C_RIGHT_SHIFT
     operators.
  4) change(88-09-07,WAAnderson), approve(88-10-18,MCR7952),
     audit(88-10-18,JRGray), install(88-10-24,MR12.2-1184):
     Added format control comment to make the source more readable.
  5) change(88-11-30,WAAnderson), approve(88-12-05,MECR0006),
     audit(88-12-02,JRGray), install(88-12-05,MR12.2-1220):
     Added code to ensure probe chases the linked list of runtime_symbol
     structures whose head runtime_symbol structure is of type c_typeref_dtype
     ONLY when the program being probed has been generated by the C compiler.
     Prior to this change, Pascal enumerated types were being confused with
     c_typeref_dtypes, resulting in an infinite loop.
  6) change(89-09-18,WAAnderson), approve(89-09-18,MCR8042),
     audit(89-09-18,JRGray), install(89-09-21,MR12.3-1070):
     See above.  Closing out MECR006.
                                                   END HISTORY COMMENTS */


/* format: style1,insnl,ifthendo,indthenelse,^indnoniterdo,^inditerdo,indcom,^indthenbegin,^indprocbody,ind2,ll78,initcol0,dclind4,idind24,struclvlind1,comcol41 */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

probe_get_expr_:
  proc (P_probe_info_ptr, P_reference, P_code);

  /* This marvel can not only get expressions, it can get expressions using
   precedence ! Written at 6AM after an all-nighter, and is no doubt a crock

   JRDavis 13 Fri July 79

   Well, it was close...

   Modified 13 Nov 79 JRD

   BEXP := EXP << EXP
   EXP := TERM [+ TERM]...
   TERM := FACTOR [* FACTOR]...
   FACTOR := VALUE | (EXP)

   where <<, + or * can also be >>, - or /,% respectively, and "..."
   denotes arbitrary number of repitions of the stuff in the brackets,
   and a VALUE is what probe_get_$value returns.
*/
  /* * 09 Sep 81, S.Herbst:
    *    Fixed to handle "v (2+2)" and print better errmsg for "v -1|0".
    * ?? Jun 83, JMAthane:
    *    To know PASCAL array indices between brackets.
    * ?? Apr 88, Hinatsu:
    *    To add C operators "% << >>".
    *  */

  dcl (
      P_probe_info_ptr	ptr,
      1 P_reference		aligned like reference_node,
      P_code		fixed bin (35)
      )			parameter;

  dcl code		fixed bin (35);
  dcl pre_op_code		char (1) aligned;
  dcl saved_ct		ptr;

  dcl probe_create_reference_$init
			entry (ptr, ptr);
  dcl probe_builtins_$addr_builtin
			entry (ptr, ptr, fixed bin (35));
  dcl probe_operate_$infix	entry (ptr, char (1) aligned,
			1 structure aligned like reference_node,
			1 structure aligned like reference_node,
			1 structure aligned like reference_node,
			fixed bin (35));
  dcl probe_operate_$prefix	entry (ptr, char (1) aligned,
			1 structure aligned like reference_node,
			1 structure aligned like reference_node,
			fixed bin (35));

  dcl (
      probe_et_$recorded_message,
      probe_et_$bad_section,
      probe_et_$bad_expression
      )			fixed bin (35) external static;

  dcl probe_error_$record	entry options (variable);

  dcl (addr, addrel, fixed, null)
			builtin;
  dcl c_indirect_count	(40) fixed bin;
  dcl c_indirect_ix		fixed bin;
  dcl ptr_overlay		ptr based;
%page;
/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

account_for_c_indirection:
  proc ();

  dcl not_done_indirection	bit (1);

  if probe_info.language_type ^= C_lang_type  then return;
  c_indirect_ix = c_indirect_ix + 1;
  c_indirect_count (c_indirect_ix) = 0;
  not_done_indirection = "1"b;
  do while (not_done_indirection);
    if probe_info.ct -> token.type < probe_info.token_info.end_token
         & probe_info.ct -> token.type > OPERATOR_TYPE then do;
        if probe_info.ct -> token.type = C_INDIRECTION then do;
	  c_indirect_count (c_indirect_ix) =
	       c_indirect_count (c_indirect_ix) + 1;
	  probe_info.ct = probe_info.ct -> token.next;
	end;
	else not_done_indirection = "0"b;
      end;
      else not_done_indirection = "0"b;
  end;
  probe_info.ct = probe_info.ct -> token.prev;

  end account_for_c_indirection;
%page;
/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

trace_c_indirection:
  proc (ref_node_ptr);

  dcl ref_node_ptr		ptr;
  dcl 01 temp_ref		aligned like reference_node
			based (ref_node_ptr);

  if probe_info.language_type ^= C_lang_type then return;
  if (c_indirect_ix <= 0)
    then return;
  do while (c_indirect_count (c_indirect_ix) > 0);
    c_indirect_count (c_indirect_ix) = c_indirect_count (c_indirect_ix) - 1;
    if temp_ref.symbol_ptr -> runtime_symbol.son ^= "0"b then do;
        temp_ref.symbol_ptr =
	   addrel (temp_ref.symbol_ptr,
	   fixed (temp_ref.symbol_ptr -> runtime_symbol.son));
				/* typeref */
        do while (fixed (temp_ref.symbol_ptr -> runtime_symbol.type)
	   = c_typeref_dtype);
	temp_ref.symbol_ptr =
	     addrel (temp_ref.symbol_ptr,
	     fixed (temp_ref.symbol_ptr -> runtime_symbol.son));
        end;
        temp_ref.type = fixed (temp_ref.symbol_ptr -> runtime_symbol.type);
        temp_ref.address_ptr = temp_ref.address_ptr -> ptr_overlay;
        temp_ref.precision = temp_ref.symbol_ptr -> runtime_symbol.size;
      end;
  end;
  if c_indirect_ix > 0
    then c_indirect_ix = c_indirect_ix - 1;
  end trace_c_indirection;
%page;
/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

  pre_op_code = "?";
  probe_info_ptr = P_probe_info_ptr;
  P_code = 0;
  code = 0;
  saved_ct = ct;
  c_indirect_ix = 0;

  if ct -> token.type >= OPERATOR_TYPE then do;
      if probe_info.ct -> token.type = PLUS
        then pre_op_code = "+";
      else if probe_info.ct -> token.type = MINUS
        then pre_op_code = "-";
      else if probe_info.ct -> token.type = AMPERSAND
	 & (probe_info.language_type = C_lang_type)
        then pre_op_code = "?";
      else if probe_info.ct -> token.type = C_INDIRECTION
	 & (probe_info.language_type = C_lang_type) then do;
	call account_for_c_indirection ();
	pre_op_code = "*";
        end;
      else if probe_info.ct -> token.type
	 ^= LEFT_PAREN /* don't confuse ( with prefix ops */
	 &
	 ^(probe_info.language_type = PASCAL_lang_type
	 & probe_info.ct -> token.type = LEFT_BRACKET)
        then do;

	code = probe_et_$bad_expression;
	goto LOSS;
        end;
      if ct -> token.type ^= LEFT_PAREN
	 & ct -> token.type ^= LEFT_BRACKET &
	 ct -> token.type ^= AMPERSAND
        then ct = ct -> token.next;
    end;
GET_EXPR:

  call get_bexpr (P_reference);
  if pre_op_code ^= "?"
    then
         if P_reference.type = pointer_dtype & c_indirect_ix = 0
	    & pre_op_code ^= "*" then do;
				/* might be -1|0, etc. */

	   pre_op_code = "?";
	   ct = saved_ct;		/* reparse with "-" as part of ptr */
	   go to GET_EXPR;
	 end;
         else if P_reference.flags.cross_section
	 then goto SECTION_LOSS;
         else if pre_op_code = "*" & c_indirect_ix > 0
	 then
	      call trace_c_indirection (addr (P_reference));

         else if probe_info.execute & pre_op_code ^= "*"
	 then
	      call probe_operate_$prefix (probe_info_ptr, pre_op_code,
		 P_reference, P_reference, code);

LOSS:

  P_code = code;
  return;

SECTION_LOSS:
  code = probe_et_$bad_section;
  goto LOSS;

SINISTER_ERROR:

  call probe_error_$record (probe_info_ptr, probe_et_$bad_expression,
       "Too many left parentheses");
  code = probe_et_$recorded_message;
  return;
%page;
/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

get_bexpr:
  proc (bfirst);

  dcl 1 bfirst		aligned like reference_node parameter;
  dcl 1 bsecond_ref_block	aligned like ref_block automatic;
  dcl op_code		char (1) aligned;

  call probe_create_reference_$init (probe_info_ptr, addr (bsecond_ref_block))
       ;

  call get_expr (bfirst);
  do while ((probe_info.ct -> token.type = C_LEFT_SHIFT |
       probe_info.ct -> token.type = C_RIGHT_SHIFT |
       probe_info.ct -> token.type = C_INDIRECTION) &
       probe_info.language_type = C_lang_type);

    if probe_info.ct -> token.type = C_LEFT_SHIFT
      then op_code = "<";
    else if probe_info.ct -> token.type = C_RIGHT_SHIFT
      then op_code = ">";
    if (probe_info.ct -> token.type = C_LEFT_SHIFT
         | probe_info.ct -> token.type = C_RIGHT_SHIFT)
      then
	 ct = ct -> token.next;

    if probe_info.ct -> token.type = C_INDIRECTION
      then do;
        call account_for_c_indirection ();
        ct = ct -> token.next;
      end;
    if bfirst.cross_section
      then
	 goto SECTION_LOSS;

    call get_expr (bsecond_ref_block.ref_node);
    if bsecond_ref_block.ref_node.cross_section
      then
	 goto SECTION_LOSS;

    if probe_info.execute
      then do;
        if bsecond_ref_block.ref_node.type = pointer_dtype
	then
	     call trace_c_indirection (addr (bsecond_ref_block.ref_node));
        if bfirst.type = pointer_dtype
	then
	     call trace_c_indirection (addr (bfirst));
        call probe_operate_$infix (probe_info_ptr, op_code, bfirst,
	   bsecond_ref_block.ref_node, bfirst, code);
        if code ^= 0
	then
	     goto LOSS;
      end;
  end;

  end get_bexpr;
%page;
/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

get_expr:
  proc (first);

  dcl 1 first		aligned like reference_node parameter;
  dcl 1 second_ref_block	aligned like ref_block automatic;
  dcl op_code		char (1) aligned;

  call probe_create_reference_$init (probe_info_ptr, addr (second_ref_block));

  call get_term (first);
  do while (probe_info.ct -> token.type = PLUS |
       probe_info.ct -> token.type = MINUS |
       probe_info.ct -> token.type = C_INDIRECTION);

    if probe_info.ct -> token.type = PLUS
      then op_code = "+";
    else if probe_info.ct -> token.type = MINUS
      then op_code = "-";
    if (probe_info.ct -> token.type = PLUS
         | probe_info.ct -> token.type = MINUS)
      then
	 ct = ct -> token.next;

    if probe_info.ct -> token.type = C_INDIRECTION
      then do;
        call account_for_c_indirection ();
        ct = ct -> token.next;
      end;

    if first.cross_section
      then
	 goto SECTION_LOSS;

    call get_term (second_ref_block.ref_node);
    if second_ref_block.ref_node.cross_section
      then
	 goto SECTION_LOSS;

    if probe_info.execute
      then do;
        if second_ref_block.ref_node.type = pointer_dtype
	then
	     call trace_c_indirection (addr (second_ref_block.ref_node));
        if first.type = pointer_dtype
	then
	     call trace_c_indirection (addr (first));
        call probe_operate_$infix (probe_info_ptr, op_code, first,
	   second_ref_block.ref_node, first, code);
        if code ^= 0
	then
	     goto LOSS;
      end;
  end;				/* otherwise loop back for another */

  end get_expr;
%page;
/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

get_term:
  proc (alpha);

  dcl 1 alpha		aligned like reference_node parameter;
  dcl 1 beta_ref_block	aligned like ref_block automatic;
  dcl term_op_code		char (1) aligned;

  call probe_create_reference_$init (probe_info_ptr, addr (beta_ref_block));
  call get_factor (alpha);

  do while (probe_info.ct -> token.type = TIMES |
       probe_info.ct -> token.type = SLASH |
       (probe_info.ct -> token.type = PERCENT
       & probe_info.language_type = C_lang_type));
    if probe_info.ct -> token.type = TIMES
      then term_op_code = "*";
    else if probe_info.ct -> token.type = SLASH
      then term_op_code = "/";
    else if probe_info.ct -> token.type = PERCENT
      then term_op_code = "%";

    probe_info.ct = probe_info.ct -> token.next;

    if (probe_info.ct -> token.type = C_INDIRECTION) then do;
        call account_for_c_indirection ();
        probe_info.ct = probe_info.ct -> token.next;
      end;

    if alpha.cross_section
      then
	 goto SECTION_LOSS;

    call get_factor (beta_ref_block.ref_node);
    if beta_ref_block.ref_node.cross_section
      then
	 goto SECTION_LOSS;

    if probe_info.execute
      then do;
        if beta_ref_block.ref_node.type = pointer_dtype
	then
	     call trace_c_indirection (addr (beta_ref_block.ref_node));
        if alpha.type = pointer_dtype
	then
	     call trace_c_indirection (addr (alpha));
        call probe_operate_$infix (probe_info_ptr, term_op_code, alpha,
	   beta_ref_block.ref_node, alpha, code);
        if code ^= 0
	then
	     goto LOSS;
      end;

  end;				/* looping through all consequtive TERMS */
  end get_term;
%page;
/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

get_factor:
  proc (val);

  dcl 1 val		aligned like reference_node parameter;
  dcl probe_get_$value	entry (ptr,
			1 structure aligned like reference_node,
			bit (36) aligned, fixed bin (35));
  dcl indir_flag		bit (1);
  dcl defer_ampersand	bit (1);
  dcl 01 sub_refs		aligned like subscript_reference_ptrs;
  dcl probe_create_reference_ entry (ptr, ptr);
  dcl temp_node_ptr		ptr;

  indir_flag = "0"b;

  if ct -> token.type = LEFT_PAREN then do;
      ct = ct -> token.next;
      if ct -> token.type >= RIGHT_PAREN
        then
	   goto SINISTER_ERROR;
      if (ct -> token.type = C_INDIRECTION)
        then
	   call account_for_c_indirection ();
      call get_expr (val);
      if code ^= 0
        then
	   goto LOSS;
      if ct -> token.type ^= RIGHT_PAREN
        then
	   goto SINISTER_ERROR;
      ct = ct -> token.next;
    end;
    else do;
      if (ct -> token.type = C_INDIRECTION) then do;
	indir_flag = "1"b;
	ct = ct -> token.next;
        end;
      if ct -> token.type = AMPERSAND then do;
	ct = ct -> token.next;
	call probe_create_reference_ (probe_info_ptr, temp_node_ptr);
	temp_node_ptr -> reference_node.name = "<<<constant>>>";
	temp_node_ptr -> reference_node.source_info_ptr =
	     val.source_info_ptr;
				/* Set the c_symbol_ptr to any non-null value because get_value will null the
   symbol_ptr field if the symbol is a char array */
	val.c_symbol_ptr = addr (val);
	defer_ampersand = "1"b;
        end;
        else defer_ampersand = "0"b;

      call probe_get_$value (probe_info_ptr, val, "000"b, code);

      if code ^= 0
        then
	   goto LOSS;
      if (val.symbol_ptr ^= null ()) then do;
	if (fixed (val.symbol_ptr -> runtime_symbol.type)
	     = c_enum_const_dtype) & probe_info.language_type = C_lang_type then do;
	    val.type = real_fix_bin_1_dtype;
	    val.precision = 35;
	    val.symbol_ptr = null ();
	  end;
	else if (fixed (val.symbol_ptr -> runtime_symbol.type)
	     = c_typeref_dtype & probe_info.language_type = C_lang_type)
	  then do;
	    do while (fixed (val.symbol_ptr -> runtime_symbol.type)
	         = c_typeref_dtype);
	      val.symbol_ptr =
		 addrel (val.symbol_ptr,
		 fixed (val.symbol_ptr -> runtime_symbol.son, 17));
	    end;
	    if (fixed (val.symbol_ptr -> runtime_symbol.type)
	         = c_enum_dtype) then do;
	        val.type = real_fix_bin_1_dtype;
	        val.precision = 35;
				/*	         val.symbol_ptr = null();*/
	      end;
	      else do;
	        val.type =
		   fixed (val.symbol_ptr -> runtime_symbol.type, 35);
	        val.precision =
		   fixed (val.symbol_ptr -> runtime_symbol.size, 35);
	        val.flags.packed =
		   val.symbol_ptr -> runtime_symbol.bits.packed;
	      end;
	  end;
        end;
      if (indir_flag)
        then
	   call trace_c_indirection (addr (val));
      else if (defer_ampersand) then do;
	sub_refs (1, 1).ptr = addr (val);
	temp_node_ptr -> reference_node.optional_info.n_subscripts = 1;
	temp_node_ptr -> reference_node.subscript_refs_ptr =
	     addr (sub_refs);
	call probe_builtins_$addr_builtin (probe_info_ptr, temp_node_ptr,
	     code);
	temp_node_ptr -> reference_node.optional_info.n_subscripts = 0;
	temp_node_ptr -> reference_node.c_symbol_ptr = val.symbol_ptr;
	val = temp_node_ptr -> reference_node;
        end;

    end;
  return;

  end get_factor;
%page;
/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

%include probe_info;
%page;
%include probe_references;
%page;
%include probe_ref_block;
%page;
%include probe_source_info;
%page;
%include probe_tokens;
%page;
%include probe_operators;
%page;
%include probe_lang_types;
%page;
%include std_descriptor_types;
%page;
%include runtime_symbol;

  end probe_get_expr_;
