/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(88-09-07,WAAnderson), approve(88-09-30,MCR7952),
     audit(88-09-30,JRGray), install(88-10-24,MR12.2-1184):
     Added format control comment to make the source more readable.
                                                   END HISTORY COMMENTS */


/* format: style1,insnl,ifthendo,indthenelse,^indnoniterdo,^inditerdo,indcom,^indthenbegin,^indprocbody,ind2,ll78,initcol0,dclind4,idind24,struclvlind1,comcol41 */

/****  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

probe_check_ptr_:
  proc ();

  /* *	This procedure converts the pointer value P_xxx_pointerter into a character string,
   *	interpreting appropriately and including error messages describing any problems
   *	with it 
   *	Modified: 22 Sept 79 JRD to not require pad bits to be zero, because some Multics stack frame ptrs
   *			     keep information in these bits, and the hardware doesn't care.
*/
  /* Entry point $indirectable added 09/11/81 S. Herbst */
  /* Fixed to catch illegal_modifier that slipped through before; 06/01/82 S. Herbst */

  dcl (
      P_its_pointer		pointer aligned parameter,
      P_packed_pointer	pointer unaligned parameter,
      P_flags		bit (*),
      P_code		fixed bin (35)
      )			parameter;

  dcl return_str		char (256) varying;
  dcl dname		char (168);
  dcl ename		char (32);
  dcl long_info		char (100) aligned;
  dcl test_pointer		pointer;
  dcl code		fixed bin (35);

  dcl its_ptr_ptr		pointer;
  dcl 1 its_ptr		aligned based (its_ptr_ptr) like its_unsigned;

  dcl 1 flags		aligned,	/* P_flags overlays onto this */
       2 dont_include_pathname
			bit (1) unaligned;

  dcl process_dir_names	(2) char (64) varying internal static
			init ("", "");
				/* long and short name of users pdir */
  dcl initialized		bit (1) aligned internal static init ("0"b);

  dcl convert_status_code_	entry (fixed bin (35), char (8) aligned,
			char (100) aligned);
  dcl get_pdir_		entry () returns (char (168));
  dcl hcs_$fs_get_mode	entry (ptr, fixed bin (5), fixed bin (35));
  dcl hcs_$fs_get_path_name	entry (ptr, char (*), fixed bin, char (*),
			fixed bin (35));
  dcl ioa_$rsnnl		entry options (variable);

  dcl (
      error_table_$bad_ptr,
      error_table_$invalidsegno
      )			fixed bin (35) external static;

  dcl probe_et_$null_ptr	fixed bin (35) ext;

  dcl (addr, binary, length, null, rtrim, string, substr)
			builtin;

  dcl illegal_modifier	condition;
				/*  */

probe_check_ptr_$convert:
  entry (P_its_pointer, P_flags) returns (char (256) varying);

  if ^initialized
    then call initialize ();		/* initialize static copies of process dir names */

  call ioa_$rsnnl ("^o|^o^[(^d)^]", return_str, (0),
       addr (P_its_pointer) -> its_ptr.segno,
       addr (P_its_pointer) -> its_ptr.offset,
       (addr (P_its_pointer) -> its_ptr.bit_offset ^= 0),
       addr (P_its_pointer) -> its_ptr.bit_offset);

  call check_its_pointer ();		/* find out whether it's wholesome or not */
  if code = 0
    then test_pointer = P_its_pointer;	/* assign it for use later */
    else test_pointer = null ();

  goto CONVERT_POINTER_COMMON;


probe_check_ptr_$convert_packed:
  entry (P_packed_pointer, P_flags) returns (char (256) varying);

  if ^initialized
    then call initialize ();		/* initialize static copies of process dir names */

  call ioa_$rsnnl ("^p", return_str, (0), P_packed_pointer);

  call check_packed_pointer ();	/* find out if its any good */
  if code = 0
    then test_pointer = P_packed_pointer;
				/* assign it for use later */
    else test_pointer = null ();

  goto CONVERT_POINTER_COMMON;


CONVERT_POINTER_COMMON:		/* common code for converting */
  string (flags) = P_flags;		/* copy the flags */

  if code ^= 0 then do;		/* bad pointer -- set by check_xxx_pointer */
      return_str = return_str || " (Invalid pointer.)";
      return (return_str);
    end;

  if test_pointer = null ()
    then /* null */
         return ("null");

  dcl bit_1_unaligned_array	(100) bit (1) unaligned;
				/* Stupid bug in pl1 24c makes this arbitrarily difficult */
  dcl stupid_idx		fixed bin;

  stupid_idx = 73;
  bit_1_unaligned_array (stupid_idx) = flags.dont_include_pathname;
  if bit_1_unaligned_array (stupid_idx)
    then
         /* don't bother getting pathname */
         return (return_str);

  call hcs_$fs_get_path_name (test_pointer, dname, (0), ename, code);
  if code = error_table_$invalidsegno then do;
      return_str = return_str || " (Invalid segment number)";
      return (return_str);
    end;

  else if code ^= 0 then do;
      call convert_status_code_ (code, (""), long_info);
				/* get a string describing error */
      return_str = return_str || " (Error: ";
      return_str = return_str || rtrim (long_info);
      return_str = return_str || ")";
      return (return_str);
    end;

  return_str = return_str || " ";	/* append the pathname */
  if dname = process_dir_names (1)
    then /* construct the pathname to return */
         return_str = return_str || "[pd]";
  else if dname = process_dir_names (2)
    then
         return_str = return_str || "[pd]";
  else return_str = return_str || rtrim (dname);

  if dname ^= ">"
    then /* it's not the ROOT */
         return_str = return_str || ">";

  return_str = return_str || rtrim (ename);
				/* add the entryname */

  return (return_str);		/* all done converting pointer */

  /*  */

probe_check_ptr_$check:
  entry (P_its_pointer, P_code);

  /* *	This entry validates the supplied pointer */
  call check_its_pointer ();

  P_code = code;			/* copy the code */
  return;				/* end of code for $check entrypoint */


probe_check_ptr_$check_packed:
  entry (P_packed_pointer, P_code);

  /* *	just like the above, only for packed pointers */

  call check_packed_pointer ();

  P_code = code;
  return;				/* end of code for $check_packed entrypoint */


probe_check_ptr_$indirectable:
  entry (P_its_pointer, P_code);

  /* Makes sure you can indirect through the supplied pointer */


  if P_its_pointer = null
    then P_code = probe_et_$null_ptr;
    else do;
      code = 0;
      call hcs_$fs_get_mode (P_its_pointer, 0, code);
      P_code = code;
    end;
  return;
				/*  */

check_its_pointer:
  proc ();

  /* *	This procedure tests the validity of P_its_pointer, and sets code
   *	accordingly. */

  dcl test_ptr		ptr;


  code = 0;			/* assume it's good */
  its_ptr_ptr = addr (P_its_pointer);

  if its_ptr.its_mod ^= "43"b3
    then goto BAD_ITS_POINTER;

  if its_ptr.segno > binary ("7777"b3) & its_ptr.segno < binary ("77776"b3)
    then
         goto BAD_ITS_POINTER;	/* segno out of range */
  if its_ptr.bit_offset > 35
    then goto BAD_ITS_POINTER;

  on illegal_modifier go to BAD_ITS_POINTER;
  test_ptr = P_its_pointer;
  revert illegal_modifier;

  code = 0;
  return;				/* success */

BAD_ITS_POINTER:
  code = error_table_$bad_ptr;	/* failure */
  return;
  end;				/* check_its_pointer internal procedure */

  /*  */

check_packed_pointer:
  proc ();

  /* *	This procedure tests the validity of P_packed_pointer, and sets code
   *	accordingly. */

  dcl packed_ptr_ptr	pointer;
  dcl 1 packed_ptr		aligned based (packed_ptr_ptr),
				/* our own version of this, with unsigned binary */
      (
       2 bit_offset		fixed bin (6) unsigned,
       2 segno		fixed bin (12) unsigned,
       2 offset		fixed bin (18) unsigned
       )			unaligned;


  code = 0;			/* assume it's good */
  packed_ptr_ptr = addr (P_packed_pointer);

  if packed_ptr.bit_offset > 35
    then code = error_table_$bad_ptr;	/* there's not much you can check about one of these */
    else code = 0;
  return;
  end;				/* check_packed_pointer internal procedure */

  /*  */

initialize:
  proc ();

  /* *	This procedure initializes the process_dir_names array to be the
   *	the long and short names of this processes process dir; i.e.,
   *	>process_dir_dir>[unique] and >pdd>[unique], so that the convert
   *	entrypoints can replace that directory name with [pd]. */


  if process_dir_names (1) = "" then do;/* initialize them */
      process_dir_names (1) = get_pdir_ ();
				/* the real name */
      if substr (process_dir_names (1), 1, length (">process_dir_dir")) =
	 ">process_dir_dir" then do;
	process_dir_names (2) = ">pdd";
				/* make one with >pdd at the front */
	process_dir_names (2) = process_dir_names (2) ||
	     substr (process_dir_names (1), length (">process_dir_dir") + 1)
	     ;
        end;
        else process_dir_names (2) = process_dir_names (1);
    end;
  return;
  end;				/* internal procedure initialize */

  /*  */

%include its;
  end;				/* external procedure probe_check_ptr_ */
