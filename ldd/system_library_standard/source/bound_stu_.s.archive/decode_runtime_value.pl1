/****^  ******************************************************
        *                                                    *
        * Copyright (c) 1986 by Massachusetts Institute of   *
        * Technology and Honeywell Information Systems, Inc. *
        *                                                    *
        * Copyright (c) 1972 by Massachusetts Institute of   *
        * Technology and Honeywell Information Systems, Inc. *
        *                                                    *
        ****************************************************** */


/****^  HISTORY COMMENTS:
  1) change(86-09-05,JMAthane), approve(86-09-05,MCR7525),
     audit(86-09-11,Martinson), install(86-11-12,MR12.0-1212):
     Fixed bug in code 16 value decoding.
                                                   END HISTORY COMMENTS */

/* procedure to decode the values stored in a PL/1 symbol table */

/* Modified: 8 December 1978 by RAB to fix PL/I bug 1790 (can't decode value from internal controlled desc)
   Modified: 3  Mar 79 by James R. Davis  MCR 3735, and overhaull for beauty and legality
   Modified June 83 JMAthane to add decode_runtime_value_extended entry point
	and code 16 interpretation.
   Modified August 1983 W. Olin Sibert to use attempt_thunk
   Modified June 86 JMAthane.  fixed bug in code 16 decoding
*/

decode_runtime_value: proc (v, blk, sp, lp, tp, refp, code) returns (fixed bin (35));

	dcl     v			 fixed bin (35),	/* value to decode */
	        blk		 ptr,		/* ptr to runtime block node */
	        sp		 ptr,		/* stack frame pointer */
	        lp		 ptr,		/* linkage pointer */
	        tp		 ptr,		/* object pointer */
	        refp		 ptr,		/* based reference pointer */
	        code		 fixed bin (35);	/* completion code */
	dcl     arg_list_arg_count	 fixed bin;	/* used to be in include file */

	dcl     attempt_thunk	 entry (fixed bin (35), pointer, pointer, pointer, fixed bin (35))
				 returns (fixed bin (35));

	dcl     1 a_value		 aligned like encoded_value;

	dcl     (n, n1, n2, n3)	 fixed bin;	/* values extracted from encode_value */
	dcl     temp		 ptr;		/* just a temp */
	dcl     (addr, addrel, baseno, bin, fixed, hbound, null, ptr, stackbaseptr, string, substr, unspec) builtin;
	dcl     ptr_var		 ptr based;
	dcl     based_fixed_bin	 fixed bin based;

	string (a_value) = unspec (v);		/* convert to internal form */

	if (a_value.flag = "11"b) | (a_value.flag = "00"b) then do;
		code = 0;
		return (v);
	     end;

	n = fixed (a_value.code, 4);

	if n > 16 then go to fail;

	go to join;

decode_runtime_value_extended: entry (v, blk, sp, lp, tp, refp, symb, code) returns (fixed bin (35));

/* This entry assumes that the value IS encoded and that code is on 6 bits */

	dcl     symb		 ptr;		/* ptr to runtime symbol node */

	string (a_value) = unspec (v);
	n = fixed (addr (a_value) -> pascal_encoded_value.code, 6);

join:
	if n > hbound (sw, 1)
	then do;
fail:		code = 1;
		return (0);
	     end;

	n1 = fixed (a_value.n1, 6);
	n2 = fixed (a_value.n2, 6);
	n3 = fixed (a_value.n3, 18);

	code = 0;

	goto sw (n);

sw (0):						/* automatic variable */
	return (addrel (get_stack_ptr (sp, n1), n3) -> based_fixed_bin);

sw (1):						/* internal static variable */
	return (addrel (get_static_ptr (), n3) -> based_fixed_bin);

sw (2):						/* external static */
	return (addrel (addrel (get_linkage_ptr (), n3) -> ptr_var, n1) -> based_fixed_bin);

sw (3):						/* bit offset of reference pointer */
	begin;					/* used by pre-EIS compilers only */
	     dcl	   1 an_its_ptr	      aligned like its;
	     if refp = null then goto fail;
	     string (an_its_ptr) = unspec (refp);
	     return (fixed (an_its_ptr.bit_offset, 6) + n3);
	end;					/* type 3 begin block */

sw (4):						/* based on automatic pointer */
	return (addrel (addrel (get_stack_ptr (sp, n1), n3) -> ptr_var, n2) -> based_fixed_bin);

sw (5):						/* based on internal static pointer */
	return (addrel (addrel (get_static_ptr (), n3) -> ptr_var, n2) -> based_fixed_bin);

sw (6):						/* based on external static pointer */
	return (addrel (addrel (addrel (get_linkage_ptr (), n3) -> ptr_var, n1) -> ptr_var, n2) -> based_fixed_bin);

sw (7):						/* based on reference pointer (refer) */
	if refp = null then goto fail;
	return (addrel (refp, n2) -> based_fixed_bin);

sw (8):						/* value given by procedure (thunk) */
	return (attempt_thunk (v, blk, sp, refp, code));	/* Do the best we can */

sw (9):						/* value given by argument n2 of procedure */

	temp = get_arglist_ptr (sp, n1, ("0"b));
	if n2 > arg_list_arg_count then goto fail;
	return (addrel (convert_ptr (temp -> arg_list.arg_ptrs (n2)), n3) -> based_fixed_bin);

sw (10):						/* value based on argument n2 of procedure */
	temp = get_arglist_ptr (sp, n1, ("0"b));
	if n2 > arg_list_arg_count then goto fail;
	return (addrel (convert_ptr (temp -> arg_list.arg_ptrs (n2)) -> ptr_var, n3) -> based_fixed_bin);

sw (11):						/* value given by size field at offset n3 in descriptor n2 */
	temp = addrel (get_desc_ptr (sp, n1, n2), n3);
	if temp -> arg_descriptor.flag
	then return (temp -> arg_descriptor.size);	/* version II arg descriptor */
	else return (fixed (substr (unspec (temp -> arg_descriptor.size), 7, 18), 18)); /* version I (kludge ) */

sw (12):						/* value given by field at offset n3 in descriptor of arg n2 of
						   block n1 steps along display chain */
	return (addrel (get_desc_ptr (sp, n1, n2), n3) -> based_fixed_bin);



sw (13):						/* value given by size in descriptor of controlled variable */
	return (fixed (get_ctl_descriptor () -> arg_descriptor.size, 24));


sw (14):						/* value given by word ,offset from ctl dec */
	return (get_ctl_descriptor () -> based_fixed_bin);


sw (15):						/* value given by word at offset n2 from ctl var */
	return (addrel (get_ctl_block_ptr () -> ctl_block.data, n2) -> based_fixed_bin);


sw (16):						/* value given by corresponding symbol block, on n2 bits, signed if n1 =1 */

	begin;
	     dcl	   (symbol_ptr, block_ptr, loc) ptr;
	     dcl	   block_dcld_in	      entry (ptr) returns (ptr);
	     dcl	   display_count	      fixed bin;
	     dcl	   get_runtime_address    entry (ptr, ptr, ptr, ptr, ptr, ptr, ptr) returns (ptr);
	     dcl	   value		      fixed bin (35);
	     dcl	   1 signed_value	      based,
		     2 s		      bit (1) unal,
		     2 v		      bit (n2) unal;
	     dcl	   unsigned_value	      bit (n2) unal based;
	     dcl	   v_36b		      bit (36) based;
	     dcl	   this_sp	      ptr;
	     dcl	   this_block	      ptr;
	     dcl	   i		      fixed bin;

get_linkage_ptr: proc () returns (ptr);

/* The same as below, but returns null when faulty ptr */

	dcl     ilp		 ptr unal;

	if lp ^= null then return (lp);
	else do;					/* must find it ourselves */
		ilp = stackbaseptr () -> stack_header.lot_ptr -> lot.lp (fixed (baseno (get_text_ptr ()), 18));
		if faulty_ptr (ilp) then return (null);
		return (ilp);
	     end;
     end get_linkage_ptr;
	     symbol_ptr = addrel (symb, n3);
	     this_block = block_dcld_in (symbol_ptr);
	     block_ptr = blk;
	     display_count = 0;
	     do while (this_block ^= block_ptr);
		block_ptr = runtime_symbol_info_$father (block_ptr);
		if block_ptr = null then go to fail;
		display_count = display_count + 1;
	     end;
	     this_sp = sp;
	     if sp ^= null then
		do i = 1 to display_count;
		     this_sp = this_sp -> frame.display;
		end;
	     loc = get_runtime_address (block_ptr, symbol_ptr, this_sp, get_linkage_ptr (), get_text_ptr (), null, null);
	     if loc = null then go to fail;
	     if n2 > 36 then go to fail;
	     if n1 > 1 then go to fail;
	     n2 = n2 - n1;
	     if n1 = 1 then
		addr (value) -> v_36b = copy (loc -> signed_value.s, 36 - n2) || loc -> signed_value.v;
	     if n1 = 0 then
		addr (value) -> v_36b = copy ("0"b, 36 - n2) || loc -> unsigned_value;
	     return (value);
	end;

get_stack_ptr: proc (stack, display_ct) returns (ptr);
	dcl     stack		 ptr parameter;
	dcl     display_ct		 fixed bin parameter;
	dcl     q			 ptr;
	dcl     i			 fixed bin;
	q = stack;
	if q = null then goto fail;

	do i = 1 to display_ct;
	     q = q -> frame.display;
	end;
	return (q);
     end get_stack_ptr;

get_linkage_ptr: proc () returns (ptr);

/* global inputs lp */

	dcl     ilp		 ptr unal;

	if lp ^= null then return (lp);
	else do;					/* must find it ourselves */
		ilp = stackbaseptr () -> stack_header.lot_ptr -> lot.lp (fixed (baseno (get_text_ptr ()), 18));
		if faulty_ptr (ilp) then goto fail;
		return (ilp);
	     end;
     end get_linkage_ptr;


get_text_ptr: proc () returns (ptr);

/* global inputs: tp, sp, blk */
	if tp ^= null then return (tp);
	if sp ^= null then return (sp -> frame.entry);
	if blk ^= null then return (ptr (blk, 0));
	goto fail;
     end get_text_ptr;


get_static_ptr: proc () returns (ptr);
	dcl     isp		 ptr unal;

	isp = stackbaseptr () -> stack_header.isot_ptr -> isot.isp (fixed (baseno (get_text_ptr ()), 18));
	if faulty_ptr (isp) then goto fail;
	return (isp);
     end get_static_ptr;


get_arglist_ptr: proc (stack, display_ct, quick) returns (ptr);
	dcl     stack		 ptr parameter;
	dcl     display_ct		 fixed bin parameter;
	dcl     quick		 bit (1) aligned parameter; /* (output) caller: pass me ("0"b) if you don't care */
	dcl     q			 ptr;
	q = get_stack_ptr (stack, display_ct);
	quick = "0"b;

	if blk = null
	then q = q -> frame.argptr;
	else if blk -> runtime_block.quick
	then do;
		quick = "1"b;
		if blk -> runtime_block.entry_info = "0"b then goto fail;
		q = (addrel (q, blk -> runtime_block.entry_info) -> quick_entry.argptr);
	     end;
	else q = q -> frame.argptr;

	arg_list_arg_count = q -> arg_list.arg_count;	/* set globally for our callers */
	return (q);
     end get_arglist_ptr;



get_desc_ptr: proc (stack, display_ct, narg) returns (ptr);
	dcl     stack		 ptr parameter;
	dcl     display_ct		 fixed bin parameter;
	dcl     narg		 fixed bin parameter;
	dcl     quick		 bit (1) aligned;
	dcl     q			 ptr;

	q = get_arglist_ptr (stack, display_ct, quick);

	if ^quick					/* don't know why, but ignore for quick */
	then if q -> arg_list.header.desc_count < narg then goto fail;

	if q -> arg_list.header.call_type = Envptr_supplied_call_type
	then return (convert_ptr (q -> arg_list_with_envptr.desc_ptrs (narg)));
	else return (convert_ptr (q -> arg_list.desc_ptrs (narg)));
     end get_desc_ptr;



get_ctl_block_ptr: proc () returns (ptr);

/* returns ptr to the controlled variable control block -
   GLOBAL input n1 (0 for internal, 1 for external)
   n3 offset in linkage or static of the ctl block */
	if n1 = 0
	then return (addrel (get_static_ptr (), n3));
	else return (addrel (get_linkage_ptr (), n3) -> ptr_var);
     end get_ctl_block_ptr;

get_ctl_descriptor: proc () returns (ptr);

/* Il Kludge: due to bug in PL/I, for internal controlled encoding
   where the descriptor is desired (Type 13 and 14)(NOT 15!!)
   n3 is the offset in the static section of the descriptor ptr itself, not the ctl block
   n2 is offset from descriptor of the field wanted
   n1 is 0 for internal, 1 for external */

	dcl     dp		 ptr;
	if n1 = 0
	then dp = addrel (get_static_ptr (), n3) -> ptr_var; /* pt to descriptor */
	else dp = addrel (get_linkage_ptr (), n3) -> ptr_var -> ctl_block.descriptor;
	return (addrel (dp, n2));			/* offset from the descriptor */
     end get_ctl_descriptor;



convert_ptr: proc (P_ptr) returns (ptr);

/*  given a ptr, which may be an ITS, ITP, or text embedded ptr, convert to ITS so we can use it
   For certain constructs, clever ptrs like ITP are used, and these can be eval'd only by knowing
   the value of a users pointer reg. */

	dcl     P_ptr		 ptr parameter;
	dcl     1 an_itp_ptr	 aligned like itp;
	dcl     reg		 fixed bin;
	dcl     basep		 ptr;
	dcl     1 text_embedded_ptr	 aligned,
		2 offset		 bit (18) unal,
		2 pad		 bit (18) unal;
	dcl     (string, unspec)	 builtin;

	string (an_itp_ptr) = unspec (P_ptr);

	if an_itp_ptr.itp_mod = "43"b3		/* ITS */
	then return (P_ptr);

	if an_itp_ptr.itp_mod = "00"b3		/* text relative to base of seg */
	then do;
		string (text_embedded_ptr) = unspec (P_ptr);
		return (ptr (get_text_ptr (), text_embedded_ptr.offset));
	     end;

	if an_itp_ptr.itp_mod = "41"b3		/* ITP */
	then do;
		reg = bin (an_itp_ptr.pr_no, 3);
		if reg = 6 then basep = sp;
		else if reg = 4 then basep = get_static_ptr ();
		else goto fail;
		return (bitrel (addrel (basep, an_itp_ptr.offset), bin (an_itp_ptr.bit_offset, 6)));
	     end;					/* ITP */

	goto fail;				/* fell through -no of the above */


     end convert_ptr;

bitrel: proc (P_ptr, P_bit_offset) returns (ptr);
	dcl     P_ptr		 ptr parameter;
	dcl     P_bit_offset	 fixed bin (24) parameter;

	dcl     1 str		 aligned based (P_ptr),
		2 filler		 unal bit (P_bit_offset),
		2 target		 unal bit (1);

	if P_bit_offset < 0 then goto fail;
	return (addr (str.target));
     end bitrel;

faulty_ptr: proc (P_unal_ptr) returns (bit (1) aligned);
	dcl     P_unal_ptr		 ptr unal parameter;
	dcl     baseno		 builtin;
	return (baseno (P_unal_ptr) = "0"b);
     end faulty_ptr;

%include stu_frame;

%include runtime_symbol;

%include quick_entry;

%include ctl_block;

%include stack_header;

%include lot;

%include its;

%include arg_descriptor;

%include arg_list;

%include pascal_symbol_node;

%include runtime_symbol_info_;

     end;
