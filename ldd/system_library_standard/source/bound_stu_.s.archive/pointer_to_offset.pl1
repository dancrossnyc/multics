/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* procedure to convert an pointer to a offset using the area, if any,
   on which the offset was declared

   Initial Version: 22 January 1973 by BLW
   Modified: 12 August 1973 by J.M. Broughton - changed stu_$offset_to_pointer to go in other direction
   modified: 26 Feb 79 by JRDavis - fix for display steps
   */

pointer_to_offset: proc (block_pt, symbol_pt, data_pt, stack_pt, link_pt, text_pt) returns (offset);

	dcl     block_pt		 ptr,		/* ptr to block in which offset is declared */
	        symbol_pt		 ptr,		/* ptr to runtime symbol node for offset variable */
	        data_pt		 ptr,		/* ptr to actual pointer variable storage */
	        stack_pt		 ptr,		/* ptr to stack frame associated with offset */
	        link_pt		 ptr,		/* ptr to linkage section */
	        text_pt		 ptr;		/* ptr to object program */

	dcl     p			 ptr,		/*  to symbol_node for offset */
	        q			 ptr,		/*  to symbol_node for area */
	        bp		 ptr,		/* block of offset */
	        bq		 ptr,		/* block of area */
	        ap		 ptr,		/* address of area */
	        sp		 ptr,		/* stack frame of area */
	        i			 fixed bin,
	        (addrel, fixed, nullo, null, offset) builtin,
	        stu_$block_dcld_in	 entry (ptr) returns (ptr),
	        stu_$get_display_steps entry (ptr, ptr) returns (fixed bin),
	        stu_$get_runtime_address entry (ptr, ptr, ptr, ptr, ptr, ptr, ptr) returns (ptr);


	dcl     area		 area based,
	        pointer		 pointer based;


	p = symbol_pt;
	if p = null then return (nullo);

/* get ptr to symbol node of area, if any */

	if p -> runtime_symbol.size = 0 then return (nullo);

	q = addrel (p, p -> runtime_symbol.size);

	if fixed (q -> runtime_symbol.type, 6) ^= area_dtype then return (nullo);

/* get ptr to symbol block of area */

	bq = stu_$block_dcld_in (q);

/* get ptr to stack frame associated with area */

	sp = stack_pt;
	bp = block_pt;

	do i = 1 to stu_$get_display_steps (bp, bq);
	     if sp ^= null then sp = sp -> frame.display;
	end;

/* get address of area and perform conversion */

	ap = stu_$get_runtime_address (bq, q, sp, link_pt, text_pt, null, null);

	if ap = null then return (nullo);

	return (offset (data_pt -> pointer, ap -> area));

%include stu_frame;

%include runtime_symbol;

%include std_descriptor_types;


     end;
