/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

get_runtime_line_no: proc (head_pt, offset, start, num, line_no);

/*	Procedure to get a line number corresponding to a given offset in
	a standard object segment. By using the symbol header, it avoids
	problems with internal procedures.

	Coded 9 March 1973 by Robert S. Coren.
	Modeled on stu_$get_line_no by BLW.

	Modified: 21 June 1974 by J.M. Broughton to fix stu_$get_line of several lines
*/


	dcl     head_pt		 ptr;		/* pointer to standard symbol header */
	dcl     offset		 fixed bin (18);	/* offset in text (input) */
	dcl     start		 fixed bin (18);	/* location where code for source line starts(output) */
	dcl     num		 fixed bin (18);	/* number of words in line (output) */
	dcl     line_no		 fixed bin (18);	/* line number (output) */

	dcl     stu_$get_statement_map entry (ptr, ptr, ptr, fixed bin);

	dcl     map_pt		 ptr;
	dcl     end_pt		 ptr;
	dcl     inc		 fixed bin;
	dcl     extra		 fixed bin;

	dcl     (ln, loc)		 fixed bin (18);
	dcl     ll		 fixed bin;
	dcl     lim		 fixed bin;

	dcl     (addrel, fixed, null, string) builtin;


%include statement_map;




	extra = 0;
join:
	line_no = -1;
	call stu_$get_statement_map (head_pt, map_pt, end_pt, inc);
	if map_pt = null then go to no;


/*	search through the statement map for the entry nearest offset */

	do while (map_pt ^= end_pt);

	     ln = fixed (map_pt -> statement_map.source_id.line, 14);
	     loc = fixed (map_pt -> statement_map.location, 18);

	     if loc <= offset then do;
		     if line_no ^= ln then do;	/* first statement on line */
			     if extra ^= 0 then do;	/* for "stu_$get_line" entry */
				     line_offset = fixed (map_pt -> statement_map.source_info.start,
					18);
				     file = fixed (map_pt -> statement_map.source_id.file, 8);
				end;

			     else start = loc;

			     line_no = ln;
			end;

		end;


	     else do;
		     if line_no = ln then go to step;	/* more statements on the line */
		     if line_no = -1 then go to no;	/* past it without finding one */
		     if extra = 0 then num = loc - start;

		     else do;			/* add on however many lines were requested */
			     lim = line_no + n_lines;
			     do while (ln < lim);
				if string (map_pt -> statement_map.source_id) =
				     (27)"1"b then go to done; /* don't use dummy entry */
				map_pt = addrel (map_pt, inc);
				ln = fixed (map_pt -> statement_map.source_id.line, 14);
			     end;

done:			     map_pt = addrel (map_pt, -inc); /* look at last good one */
			     line_length = fixed (map_pt -> statement_map.source_info.start, 18) +
				fixed (map_pt -> statement_map.source_info.length, 9) -
				line_offset;

			end;

		     return;
		end;

step:
	     map_pt = addrel (map_pt, inc);		/* look at next statement map entry */
	end;


no:
	line_no = -1;
	if extra = 0 then
	     start = -1;
	return;





get_line: entry (head_pt, offset, n_lines, line_no, line_offset, line_length, file);

/*	This entry is used to return info about the line useful for printing it */

	dcl     line_offset		 fixed bin (18);
	dcl     line_length		 fixed bin;
	dcl     n_lines		 fixed bin;	/* number of lines caller wants to print */
	dcl     file		 fixed bin;


	ll = 0;
	extra = 1;				/* indicate stu_$get_line entry */
	go to join;

     end get_runtime_line_no;
