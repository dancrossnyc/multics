/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

get_display_steps: proc (P_start, P_goal) returns (fixed bin);

/* given ptrs to runtime_block nodes P_start and P_goal, where P_start is contained in P_goal,
   calculate the number of display frames that will exist between them.

   Created: 23 Feb 79 James R. Davis
   Modified: June 83 JMAthane to know PASCAL with blocks
*/

	dcl     P_start		 ptr parameter;
	dcl     P_goal		 ptr parameter;

	dcl     steps		 fixed bin;
	dcl     op		 ptr;

	steps = 0;
	do op = owner_of (P_start)
	     repeat (prev_frame_owner (op))
	     while (op ^= owner_of (P_goal));
	     steps = steps + 1;
	end;
	return (steps);

prev_frame_owner: proc (qp) returns (ptr);

/* qp pts to a runtime block node that is a frame owner - return ptr to the
   block node that owns the frame that the display ptr of this frame must pt to.
   The lexical father of this block - which, if non-quick, is the desired block,
   but if quick - its owner is the one we want. */
	dcl     qp		 ptr parameter;

	return (owner_of (father_of (qp)));

     end;



father_of: proc (qp) returns (ptr);
	dcl     qp		 ptr parameter;
	return (addrel (qp, qp -> symbol_block.father));
     end father_of;



owner_of: proc (qp) returns (ptr);

/* return ptr to runtime_block of block that owns the frame we use - if non-quick this is
   ourself - if quick, use the owner field.  Older segs don't have this, so must assume that
   father is owner but this need not be true.  Old segs must be recompiled so this info will
   be available */
	dcl     qp		 ptr parameter;

	if qp -> symbol_block.type = PASCAL_WITH_BLOCK
	then return (addrel (qp, qp -> symbol_block.owner));
	else if qp -> symbol_block.quick
	then if qp -> symbol_block.owner_flag
	     then return (addrel (qp, qp -> symbol_block.owner));
	     else return (father_of (qp));
	else return (qp);				/* non-quicks own their own frame */
     end owner_of;

%include runtime_symbol_block;
%include runtime_block_type;
     end get_display_steps;
