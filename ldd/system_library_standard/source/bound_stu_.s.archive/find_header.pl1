/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* Procedure to find symbol header of a specified program

   Modified: 25 September 1972 by BLW for std obj segments
   Modified: 11 June 1975 by JMB for version 2 object info
							*/

find_header: proc(seg_pt,name,bc) returns(ptr);

dcl	seg_pt	ptr,		/* points at text segment */
	name	char(32) aligned,	/* name of segment */
	bc	fixed bin;	/* bit count */

dcl	(p,q) ptr,
	dir char(168),
	ent char(32),
	(n,code,size) fixed bin,
	hcs_$make_ptr entry(ptr,char(*) aligned,char(*) aligned,ptr,fixed bin),
	hcs_$status_mins entry(ptr,fixed bin,fixed bin,fixed bin),
	object_info_$brief entry(ptr,fixed bin,ptr,fixed bin),
	component_info_$name entry(ptr,char(32) aligned,ptr,fixed bin);

dcl	(index,null,ptr,substr) builtin;

dcl	1 oi structure aligned like object_info;

%include object_info;
%include component_info;

	if seg_pt ^= null then p = seg_pt;
	else do;
	     n = index(name," ");
	     if n = 0 then n = 33;
	     call hcs_$make_ptr(null,substr(name,1,n-1),"symbol_table",p,code);
	     if code ^= 0 then goto no;
	     end;

	if bc ^= 0 then n = bc;
	else do;
	     call hcs_$status_mins(p,size,n,code);
	     if code ^= 0 then goto no;
	     end;

	p = ptr(p,0);

	oi.version_number = object_info_version_2;
	call object_info_$brief(p,n,addr(oi),code);

	if code ^= 0 then goto no;

	/* if segment is not bound, there is only one symbol header and
	   that's the one we'll use */

	if ^ oi.bound then return(oi.symbp);

	call component_info_$name(p,name,addr(ci),code);

	if code ^= 0 then goto no;

	return(ci.symb_start);

no:	return(null);

	end;
