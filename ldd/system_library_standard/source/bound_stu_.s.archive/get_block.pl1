/****^  ******************************************************
        *                                                    *
        * Copyright (c) 1986 by Massachusetts Institute of   *
        * Technology and Honeywell Information Systems, Inc. *
        *                                                    *
        * Copyright (c) 1972 by Massachusetts Institute of   *
        * Technology and Honeywell Information Systems, Inc. *
        *                                                    *
        ****************************************************** */


/****^  HISTORY COMMENTS:
  1) change(86-09-05,JMAthane), approve(86-09-05,MCR7525),
     audit(86-09-11,Martinson), install(86-11-12,MR12.0-1212):
     Added PASCAL entry points parsing.
                                                   END HISTORY COMMENTS */

/* Procedure to get a pointer to the runtime symbol block for a PL/I
   program given a pointer to its stack frame  and optionally an execution loc

   modified: 06 Oct 78 by James R. Davis for separate static begin blocks,  greater cleanliness
   and not assume ic is in frame owners block
   Modified: 25 Aug 79 by JRD to find symbol section header by object info, not link
   Modified: JMAthane, September 82 to add PASCAL entry points
*/
get_block: proc (stack_pt, header_pt, block_pt);

	dcl     (stack_pt		 ptr,		/* points at stack frame (input) */
	        header_pt		 ptr,		/* set to point at symbol header */
	        block_pt		 ptr) parameter;	/* set to point at symbol block */

	dcl     p			 ptr,		/* into object seg */
	        sp		 ptr,		/* copy of stack_pt */
	        ic		 fixed bin,	/* offset of execution, or -1 if not supplied */
	        i			 fixed bin,
	        based_ptr		 based ptr,
	        based_word		 bit (36) based,	/* for search for instructions */
	        rel_to_next		 bit (18),	/* self relative offset for symbol table search */
	        bitcount		 fixed bin (24),
	        code		 fixed bin (35),
	        trans		 fixed bin;	/* translator that produced object seg */

	dcl     1 oi		 aligned like object_info;

	dcl     hcs_$status_mins	 entry (ptr, fixed bin (2), fixed bin (24), fixed bin (35));
	dcl     object_info_$brief	 entry (ptr, fixed bin (24), ptr, fixed bin (35));
	dcl     (addr, addrel, fixed, null, pointer) builtin;

	dcl     1 structure		 aligned based,	/* two words placed by PL/I in entry sequence */
		2 ignore		 bit (36),	/* various flags we dont care about */
		2 head_offset	 bit (18) unal,	/* offset in linkage sec of ptr to header */
		2 block_offset	 bit (18) unal;	/* offset from header to frame owner block node */

%page;

/* no location available with this entry */

	ic = -1;

join:	sp = stack_pt;
	header_pt, block_pt = null;			/* assume the worst */
	if sp = null then return;			/* cant find translator or entry ptr, give up */

	trans = fixed (sp -> frame.translator_id, 18);	/* who made this seg? */
	if trans = 0 then do;			/* PL/I version 2 */
		p = addrel (sp -> frame.entry, 1);
		if p -> based_word ^= "000614272100"b3 /* tsp2 pr0|614 enter_begin */
		     & p -> based_word ^= "001376272100"b3 /* tsp2 pr0|1376 ss_enter_begin */
		then p = addrel (p, 2);		/* not a begin block, so skip two instructions */
	     end;
	else if trans = 2 then do;			/* PL/I version 1 */
		p = addrel (p, 3);

/* in version 1 the header and block offsets are marked by a preceeding
   tra 2,ic instruction, which is anywhere from 3 to 8 words past the address
   pointed to by the entry pointer */

		do i = 3 to 8;
		     if p -> based_word = "000002710004"b3 then goto found_tra;
		     p = addrel (p, 1);
		end;
		return;				/* fell through, its not there ! */
found_tra:     end;					/* of version one */
	else if trans = 8 then do;			/* Grenoble University PASCAL */
		p = addrel (sp -> frame.entry, 2);	/* 3rd word */
		if (p -> based_word ^= "000001273100"b3) /* tsp3 0|1 : old internal */
		     & (p -> based_word ^= "000064273100"b3) /* tsp3 0|52 : internal */
		     & (p -> based_word ^= "000131273100"b3) /* tsp3 0|89 : v7 int_entry */
		then do;
			p = addrel (p, 2);		/* 5th word */
			if (p -> based_word ^= "500002273100"b3) /* tsp3 5|2 : old exportable */
			     & (p -> based_word ^= "500055273100"b3) /* tsp3 5|45 : old exportable fast */
			     & (p -> based_word ^= "500065273100"b3) /* tsp3 5|53 : exportable */
			     & (p -> based_word ^= "500067273100"b3) /* tsp3 5|55 : exportable fast */
			then do;
				p = addrel (p, 1);	/* 6th word */
				if (p -> based_word ^= "200117273100"b3) /* tsp3 2|79 : v7 MAIN_entry */
				     & (p -> based_word ^= "200130273100"b3) /* tsp3 2|88 : v7 ext_entry */
				then do;
					p = addrel (p, 2); /* 8th word */
					if (p -> based_word ^= "500000273100"b3) /* tsp3 5|0 : old MAIN */
					     & (p -> based_word ^= "500054273100"b3) /* tsp3 5|44 : old MAIN_fast */
					     & (p -> based_word ^= "500063273100"b3) /* tsp3 5|51 : MAIN */
					     & (p -> based_word ^= "500066273100"b3) /* tsp3 5|54 MAIN fast */
					then return;
				     end;
			     end;
		     end;
		p = addrel (p, 1);
	     end;
	else return;				/* no other language is supported */

/* now p points to the two word structure where symbol table ptrs are */

	if p -> structure.head_offset = (18)"0"b then return; /* no symbol table */

/*  in former days, we got a pointer to the symbol section header by snapping the link *symbol,
   which is found at offselt  {p -> structure.head_offset} in the linkage section

   This is not a good idea though, because a run unit may have been entered since the  time
   that the program called out, which means that snapping links will not work.  Run units
   work by setting up a whole new name space.
*/

	call hcs_$status_mins (pointer (p, 0), (0), bitcount, code);
	if code ^= 0 then return;
	oi.version_number = object_info_version_2;
	call object_info_$brief (pointer (p, 0), bitcount, addr (oi), code);
	if code ^= 0 then return;
	header_pt = oi.symbp;

/* if the seg is bound, then header_pt is to header of the whole seg.  Thats OK, because the
   have the offset relative to the header of the block node we are interested in.  From that block node
   we can get the ptr to the header we want.
*/


	block_pt = addrel (header_pt, p -> structure.block_offset);

	if ^block_pt -> runtime_block.flag then return;	/* not modern symbol table, can do no more */

	if ic < 0 then return;			/* cant be a quick block */

/* get pointer to the root symbol_block for this seg.  The seg may be bound, we cant trust
   header_pt, as it may be the header for the bound seg as a whole.  Find the header for the component */

	p = addrel (block_pt, block_pt -> runtime_block.header); /* point to header */
	block_pt = addrel (p, p -> std_symbol_header.area_pointer); /* point to pl1 symbol block */
	block_pt = addrel (p, block_pt -> pl1_symbol_block.root); /* point at first block */
	block_pt = addrel (block_pt, block_pt -> runtime_block.son); /* skip the root, its useless */

/* now search from the first block (root) for the smallest block that contains ic */

	rel_to_next = "1"b;				/* make sure we enter loop */
	do p = block_pt repeat addrel (p, rel_to_next) while (rel_to_next ^= (18)"0"b);
	     if ic >= fixed (addrel (p, p -> runtime_block.first) -> statement_map.location, 18)
		& ic <= fixed (addrel (p, p -> runtime_block.last) -> statement_map.location, 18)
	     then do;
		     block_pt = p;			/* we are in this block */
		     rel_to_next = p -> runtime_block.son; /* search son if there is one */
		end;
	     else rel_to_next = p -> runtime_block.brother; /* else brother */
	end;
	return;

get_runtime_block: entry (stack_pt, header_pt, block_pt, loc);

	dcl     loc		 fixed bin parameter;

/* this entry is called when a location in the object seg is available
   One should not expect stu_ to do without the stack_pt,
   even though stu could find the symbol information without it.  It is up to
   the caller to get it */

	ic = loc;
	goto join;
%page;
%include stu_frame;
%include runtime_symbol;
%include std_symbol_header;
%include pl1_symbol_block;
%include statement_map;
%include object_info;

     end get_block;
