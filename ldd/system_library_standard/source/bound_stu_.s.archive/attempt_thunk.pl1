/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
attempt_thunk:
     procedure (P_encoded_value, P_blockp, P_stackp, P_refp, P_code) returns (fixed bin (35));

/* ATTEMPT_THUNK -- This procedure is used by stu_ to call a thunk: a small
   procedure that is used to encode a value that cannot be expressed at
   compile time, such as the location of a value that is determined by
   a refer extent, or adjustable automatic.  The thunk is a non-quick internal
   procedure with access to its parent's stack frame, and in theory must be
   called with an entry variable containing a pointer to that stack frame.
   In many cases, however (such as refer extents for based variables), the
   thunk never references its parent's stack frame, but only references the
   data itself (for which it is supplied a pointer) and makes some of its
   own calculations to determine the address.  

   Thus, it is often possible to call a thunk even without a stack frame
   pointer, and that's what this program does: it examines the object code
   of the thunk to see whether it looks like it will work without a valid
   stack frame pointer for display chasing (linkage section references are
   also prohibited), and if it looks safe, calls it.  Of course, if there
   is a valid stack frame pointer supplied by our caller, it uses that,
   instead, and doesn't go through all these heuristics.

   Well, yes: I KNOW this is a kludge, but it does seem to work. Sure would 
   be nifty if this information were in the symbol table, though, and there
   is even room elsewhere in a thunk-encoded value to put it (n1 and n2).

   23 Jun 83, W. Olin Sibert: Initial coding, for azm and display_data_.
   */

	declare P_encoded_value	 fixed bin (35) parameter;
	declare P_blockp		 pointer parameter;
	declare P_stackp		 pointer parameter;
	declare P_refp		 pointer parameter;
	declare P_code		 fixed bin (35) parameter;

	declare refp		 pointer;
	declare blockp		 pointer;
	declare value		 fixed bin (35);

	declare 1 ev		 aligned like encoded_value;

	declare thunk_entry		 variable entry (pointer, fixed bin (35));
	declare 1 entry_template	 aligned,
		2 location	 pointer,
		2 stack_frame	 pointer;

	declare thunk_ptr		 pointer;
	declare thunk_lth		 fixed bin;
	declare thunk		 (thunk_lth) bit (36) aligned based (thunk_ptr);

	declare (addr, binary, hbound, null, pointer) builtin;

/*  */

	refp = P_refp;
	sp = P_stackp;
	blockp = P_blockp;
	unspec (ev) = unspec (P_encoded_value);

/* First, see if the encoded value actually represents a thunk. If not, give
   up immediately, since our caller should have handled the other types. */

	if (binary (ev.code, 4) ^= 8) then call punt (1); /* 8 is thunk-type */

/* Next, see if we got a valid stack pointer. If so, then we will just call 
   the thunk entry variable and be done with it. */

	if (sp ^= null ()) then do;
		thunk_ptr = pointer (sp -> stack_frame.entry_ptr, ev.n3);
		entry_template.location = thunk_ptr;
		entry_template.stack_frame = sp;
		unspec (thunk_entry) = unspec (entry_template);

		call thunk_entry (refp, value);

		P_code = 0;			/* Successful */
		return (value);
	     end;

/* If we have no stack frame pointer, first we find the thunk, assuming that
   is is in the segment that the block pointer indicates, and then we check
   the code to ensure that it does nothing untoward. */

	if (blockp = null ()) then call punt (2);

	thunk_ptr = pointer (blockp, ev.n3);
	entry_template.location = thunk_ptr;
	entry_template.stack_frame = baseptr (""b);	/* Guaranteed unusable */
	unspec (thunk_entry) = unspec (entry_template);	/* thunk_ptr may be changed after this. */

	call find_thunk_bounds ();

	call check_thunk_code ();

	call thunk_entry (refp, value);

	P_code = 0;
	return (value);

/*  */

find_thunk_bounds:
     procedure ();

	declare idx		 fixed bin;


/*^ This procedure verifies that the thunk entry sequence starts as follows:
	lxl7	stack_frame_size,dl
	epp2	pr7|34,*
	tsp2	pr2|1047		int_entry
	zero	2,0
	zero	0,0
   After doing so, it adjusts thunk_ptr to point to the beginning of the
   executable code for the thunk.
   */

	thunk_lth = 5;				/* To look at the beginning */
	if (substr (thunk (1), 19, 18) ^= "727007"b3) then call punt (3);
	if (thunk (2) ^= "700034352120"b3) then call punt (3);
	if (thunk (3) ^= "201047272100"b3) then call punt (3);
	if (thunk (4) ^= "000002000000"b3) then call punt (3);
	if (thunk (5) ^= "000000000000"b3) then call punt (3);

	thunk_ptr = addrel (thunk_ptr, 5);
	thunk_lth = 200;				/* More than 200 instructions seems unlikely */

/* Now, go looking for the end of the thunk, searching for the transfer to
   the return operator:
	tra	pr0|631		return
   */

	do idx = 1 to hbound (thunk, 1);
	     if (thunk (idx) = "000631710100"b3) then do;
		     thunk_lth = idx - 1;
		     return;
		end;
	end;

	call punt (4);				/* No return operator found */

     end find_thunk_bounds;

/*  */

check_thunk_code:
     procedure ();

	declare idx		 fixed bin;
	declare jdx		 fixed bin;
	declare opcode		 bit (12) aligned;
	declare TRANSFERS		 (24) bit (12) aligned internal static options (constant) init
				 ("7100"b3 /* tra */,
				 "6050"b3 /* tpl */,
				 "6040"b3 /* tmi */,
				 "6054"b3 /* tpnz */,
				 "6000"b3 /* tze */,
				 "6010"b3 /* tnz */,
				 "6070"b3 /* ttf */,
				 "6064"b3 /* ttn */,
				 "7000"b3 /* tsx0 */,
				 "7010"b3 /* tsx1 */,
				 "7020"b3 /* tsx2 */,
				 "7030"b3 /* tsx3 */,
				 "7040"b3 /* tsx4 */,
				 "7050"b3 /* tsx5 */,
				 "7060"b3 /* tsx6 */,
				 "7070"b3 /* tsx7 */,
				 "2700"b3 /* tsp0 */,
				 "2710"b3 /* tsp1 */,
				 "2720"b3 /* tsp2 */,
				 "2730"b3 /* tsp3 */,
				 "6700"b3 /* tsp4 */,
				 "6710"b3 /* tsp5 */,
				 "6720"b3 /* tsp6 */,
				 "6730"b3 /* tsp7 */);

	declare 1 inst		 aligned,
		2 offset		 fixed bin (18) unsigned unaligned,
		2 opcode		 bit (10) unaligned,
		2 pad		 bit (2) unaligned,
		2 pr_flag		 bit (1) unaligned,
		2 tag		 bit (6) unaligned;
	declare 1 pr_inst		 aligned,
		2 pr_no		 fixed bin (3) unsigned unaligned,
		2 offset		 fixed bin (14) unaligned,
		2 opcode		 bit (10) unaligned,
		2 pad		 bit (2) unaligned,
		2 pr_flag		 bit (1) unaligned,
		2 tag		 bit (6) unaligned;

/*  */

/* By rights, this should do more checking: it's easily confused by EIS, and
   I'm not sure what else could go wrong. I believe I've gotten most of the
   important cases, though. The other ones will just fault, I suppose. */

	do idx = 1 to thunk_lth;
	     unspec (inst) = thunk (idx);
	     unspec (pr_inst) = thunk (idx);

/* The most important check is for stack frame references: we allow only
   references to the argument pointer and to variables within the variable
   portion of the stack frame. Note that this will also disallow linkage 
   section references, since it prohibits loading the LP from the frame. */

	     if inst.pr_flag then
		if (pr_inst.pr_no = 6) then
		     if (pr_inst.offset < 64) then /* random variable */
			if (pr_inst.offset ^= 26) then /* arg pointer */
			     call punt (5);

/* Next, check to be sure it's not a transfer instruction. */

	     opcode = inst.opcode || "00"b;
	     do jdx = 1 to hbound (TRANSFERS, 1);
		if (opcode = TRANSFERS (jdx)) then call punt (6);
	     end;
	end;

	return;
     end check_thunk_code;

/*  */

PUNT:
	return (0);



punt:
     procedure (why);

	declare why		 fixed bin (35) parameter;

	P_code = why;
	goto PUNT;

     end punt;

%page; %include runtime_symbol;
%page; %include stack_frame;

     end attempt_thunk;
