/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* procedure to convert an offset to a pointer using the area, if any,
   on which the offset was declared

   Initial Version: 22 January 1973 by BLW
   Modified: 22 Feb       79 by JRDavis to do display steps right
*/

offset_to_pointer: proc (block_pt, symbol_pt, data_pt, stack_pt, link_pt, text_pt) returns (ptr);

	dcl     block_pt		 ptr,		/* ptr to block in which offset is declared */
	        symbol_pt		 ptr,		/* ptr to runtime symbol node for offset variable */
	        data_pt		 ptr,		/* ptr to actual offset variable storage */
	        stack_pt		 ptr,		/* ptr to stack frame associated with offset */
	        link_pt		 ptr,		/* ptr to linkage section */
	        text_pt		 ptr;		/* ptr to object program */

	dcl     p			 ptr,		/* to symbol_node of the offset */
	        q			 ptr,		/*  to symbol_node for  area */
	        sp		 ptr,		/* to stack frame for the area */
	        bq		 ptr,		/* to block_node of the area */
	        bp		 ptr,		/* to block_node of the offset */
	        ap		 ptr,		/* to the area itself */
	        (addrel, fixed, null, pointer) builtin,
	        i			 fixed bin,
	        stu_$get_display_steps entry (ptr, ptr) returns (fixed bin),
	        stu_$block_dcld_in	 entry (ptr) returns (ptr),
	        stu_$get_runtime_address entry (ptr, ptr, ptr, ptr, ptr, ptr, ptr) returns (ptr);
	dcl     area		 area based,
	        offset		 offset unaligned based;


	p = symbol_pt;
	if p = null then return (null);

/* get ptr to symbol node of area, if any */

	if p -> runtime_symbol.size = 0 then return (null);

	q = addrel (p, p -> runtime_symbol.size);

	if fixed (q -> runtime_symbol.type, 6) ^= area_dtype then return (null);

	bq = stu_$block_dcld_in (q);
	sp = stack_pt;
	bp = block_pt;
	do i = 1 to stu_$get_display_steps (bp, bq);
	     if sp ^= null then sp = sp -> frame.display;
	end;


/* get address of area and perform conversion */

	ap = stu_$get_runtime_address (bq, q, sp, link_pt, text_pt, null, null);

	if ap = null then return (null);

	return (pointer (data_pt -> offset, ap -> area));

%include runtime_symbol;

%include stu_frame;

%include std_descriptor_types;

     end;
