/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(1987-06-19,Rauschelbach), approve(1987-06-29,MCR7736),
     audit(1987-07-21,Farley), install(1987-08-06,MR12.1-1064):
     Error message duplication was removed, and a call to com_err_ with a more
     standard version.
  2) change(2016-03-31,Swenson), approve(2016-03-31,MCR10010),
     audit(2016-04-03,GDixon), install(2016-04-05,MR12.6e-0004):
     Fix acquire_resource and register_resource to not incorrectly format error
     message when no resource of the specified type is available.
                                                   END HISTORY COMMENTS */


/* format:style4,delnl,insnl,indattr,ifthen,dclind10 */
register_resource:
rgr:
     proc;

/* This command registers a resource or a number of resources.
   Written 10/09/78 by C. D. Tavares */
/* Modified 08/79 by CDT to remove warning when default attributes are
   supplied from RTDT on registration.  The fix is not a complete solution. */
/* Modified 12/10/79 by CDT to get rid of timer sleep code which is now
   handled in ring 1 */
/* Last modified 06/17/81 by CDT to make error messages nicer and to reject
   -owner in set_resource call. */
/* Modified 841106 to query users when registering/acquiring multi-class volumes which are basically useless... - M. M. Pozzo */

/* automatic */

dcl	action		   fixed bin,
	ap		   pointer,
	al		   fixed bin,
	alp		   pointer,
	arg_positions_ptr	   pointer,
	eca_ptr		   pointer,
	nargs		   fixed bin,
	position		   fixed bin,
	code		   fixed bin (35),
	i		   fixed bin,
	myname		   char (32),
	err_msg		   char (256) varying,
	resource_subtype	   char (32),
	yes_sw		   bit (1);

/* external static */

dcl	(
	sys_info$max_seg_size,
	error_table_$noarg,
	error_table_$inconsistent,
	error_table_$lock_wait_time_exceeded,
	error_table_$resource_not_modified,
	error_table_$action_not_performed
	)		   external fixed bin (35) static;

/* entries */

dcl	aim_check_$equal
			   entry (bit (72) aligned, bit (72) aligned) returns (bit (1) aligned);
dcl	build_resource_desc_$from_arglist
			   ext
			   entry (pointer, pointer, pointer, pointer, bit (1) aligned, pointer, char (*) varying,
			   fixed bin (35));

dcl	define_area_	   ext entry (pointer, fixed bin (35)),
	release_area_	   ext entry (pointer);

dcl	command_query_$yes_no  entry options (variable),
	cu_$arg_count	   ext entry (fixed bin),
	cu_$arg_ptr	   ext entry (fixed bin, pointer, fixed bin, fixed bin (35)),
	cu_$arg_list_ptr	   ext entry (pointer);

dcl	ioa_		   ext entry options (variable);

dcl	resource_info_$defaults
			   ext entry (char (*) aligned, char (*), pointer, fixed bin, fixed bin (35));

dcl	(
	rcp_admin_$register,
	rcp_admin_$deregister,
	rcp_sys_$clear_resource,
	rcp_admin_$acquire,
	rcp_$acquire,
	rcp_admin_$release,
	rcp_$release,
	rcp_admin_$set_status,
	rcp_$set_status
	)		   ext entry (pointer, char (*), fixed bin (35));

/* based */

dcl	arg		   char (al) based (ap),
	temp_area		   area (1000) based (auto_area_info.areap),
	arg_positions	   (eca_ptr -> arg_struc_template.n_extra_args) fixed bin based (arg_positions_ptr);

dcl	1 arg_struc_template   aligned based (eca_ptr),
	  2 n_extra_args	   fixed bin,
	  2 each		   (0 refer (arg_struc_template.n_extra_args)),
	    3 long_name	   char (32),
	    3 short_name	   char (32),
	    3 n_following	   fixed bin;

/* builtins */

dcl	(addr, null, unspec, index)
			   builtin;

/* conditions */

dcl	cleanup		   condition;

/* static */

dcl	sys_dir		   char (168) static initial (">system_control_1>rcp");

/* constants */

dcl	1 register_control_args
			   aligned static options (constant),
	  2 n_extra_args	   fixed bin initial (1),
	  2 each		   (1),
	    3 long_name	   char (32) initial ("-type"),
	    3 short_name	   char (32) initial ("-tp"),
	    3 n_following	   fixed bin initial (1);

dcl	1 no_control_args	   aligned static options (constant),
	  2 n_extra_args	   fixed bin initial (0);

dcl	1 only_priv_control_arg
			   aligned static options (constant),
	  2 n_extra_args	   fixed bin initial (1),
	  2 each		   (1),
	    3 long_name	   char (32) initial ("-priv"),
	    3 short_name	   char (32) initial ("-priv"),
	    3 n_following	   fixed bin initial (0);

dcl	(
	Register		   initial (1),
	Deregister	   initial (2),
	Acquire		   initial (3),
	Release		   initial (4),
	Set		   initial (5),
	Clear		   initial (6)
	)		   fixed bin static options (constant);
%page;
%include resource_control_desc;
%page;
%include area_info;

dcl	1 auto_area_info	   aligned automatic like area_info;
%page;
	action = Register;
	myname = "register_resource";
	goto common;
%skip (4);
deregister_resource:
drr:
     entry;

	action = Deregister;
	myname = "deregister_resource";
	goto common;
%skip (4);
acquire_resource:
aqr:
     entry;

	action = Acquire;
	myname = "acquire_resource";
	goto common;
%skip (4);
release_resource:
rlr:
     entry;

	action = Release;
	myname = "release_resource";
	goto common;
%skip (4);
set_resource:
setr:
     entry;

	action = Set;
	myname = "set_resource";
	goto common;
%skip (4);
clear_resource:
clr:
     entry;

	action = Clear;
	myname = "clear_resource";
	goto common;
%skip (4);
common:
	unspec (auto_area_info) = ""b;
	auto_area_info.version = area_info_version_1;
	auto_area_info.owner = myname;
	auto_area_info.size = sys_info$max_seg_size;
	auto_area_info.areap = null;
	auto_area_info.extend, auto_area_info.no_freeing = "1"b;

	call cu_$arg_count (nargs);
	if nargs < 2 then
noarg:
	     call crump (error_table_$noarg, "Usage: ^a resource_type resource_names {-control_args}");

	call cu_$arg_list_ptr (alp);

	on cleanup call clean_up;

	call define_area_ (addr (auto_area_info), code);
	if code ^= 0 then
	     call crump (code, "Defining area.");

	if action = Register then
	     eca_ptr = addr (register_control_args);
	else if (action = Deregister) | (action = Clear) then
	     eca_ptr = addr (no_control_args);
	else eca_ptr = addr (only_priv_control_arg);

	allocate arg_positions in (temp_area);

	call build_resource_desc_$from_arglist (alp, auto_area_info.areap, eca_ptr, resource_desc_ptr,
	     (action = Register), arg_positions_ptr, err_msg, code);
	if code ^= 0 then
	     call crump (code, (err_msg));

	if resource_descriptions.n_items <= 0 then
	     goto noarg;


	goto process_action (action);
%page;
process_action (1):					/* register */
	if ^resource_descriptions.item (1).given.owner then do;
	     if resource_descriptions.item (1).given.aim_range then
		err_msg = "-access_class";
	     else if resource_descriptions.item (1).given.acs_path then
		err_msg = "-acs_path";
	     else if resource_descriptions.item (1).given.comment then
		err_msg = "-comment";
	     else if resource_descriptions.item (1).given.user_alloc then
		err_msg = "-user_alloc";
	     else if resource_descriptions.item (1).given.release_lock then
		err_msg = "-release_lock";
	     else err_msg = "";

	     if err_msg ^= "" then do;
		err_msg = err_msg || " requires -owner";
		call crump (error_table_$inconsistent, (err_msg));
	     end;


	end;					/*  See if this is an acquire as well and if so, if this is a multi-class volume if the user really wants to do this */

	if ^multi_class_volume_continue () then do;
	     err_msg = "User does not wish to acquire useless multi-class volume";
	     call crump (error_table_$action_not_performed, (err_msg));
	end;


/* We get the defaults for this type of resource and fill them into the
   structure that we got back from build_resource_desc_ if they aren't already
   provided.  Notice that we only do this for ONE resource type-- because the
   current syntax of the registration command only provides for registering
   resources of one resource type at a time;  plus all of the resources share
   common control arguments, meaning that you can't (say) provide attributes
   for one resource but not the others;  so we assume that if the first
   resource in the structure doesn't have something, none of them have it.  */

	Resource_count = 1;				/* get defaults for type */

	if search_list ("-type", position) then do;
	     call cu_$arg_ptr (position + 1, ap, al, code);
	     if code ^= 0 then
		call crump (code, "after -type.");
	     resource_subtype = arg;
	end;
	else resource_subtype = "";

	call resource_info_$defaults (resource_descriptions.item (1).type, resource_subtype, resource_desc_ptr, 0, code)
	     ;
	if code ^= 0 then
	     call crump (code, "Obtaining defaults.");

	call rcp_admin_$register (resource_desc_ptr, sys_dir, code);
	if code ^= 0 then
	     call crump_in_struc (code, "Cannot register resources.");

	goto process_action_end;

process_action (2):					/* deregister */
	call rcp_admin_$deregister (resource_desc_ptr, sys_dir, code);
	if code ^= 0 then
	     call crump_in_struc (code, "Cannot deregister resources.");

	goto process_action_end;

process_action (3):					/* acquire */
						/*  If this is a multi-class volume acquire, make sure user really wants to do this */
	if ^multi_class_volume_continue () then do;
	     err_msg = "User does not wish to acquire useless multi-class volume";
	     call crump (error_table_$action_not_performed, (err_msg));
	end;

	if search_list ("-priv", 0) then
	     call rcp_admin_$acquire (resource_desc_ptr, sys_dir, code);
	else call rcp_$acquire (resource_desc_ptr, sys_dir, code);
	if code ^= 0 then
	     call crump_in_struc (code, "Cannot acquire resources.");

	do i = 1 to resource_descriptions.n_items;
	     if ^resource_descriptions.given.name (i) then
		call ioa_ ("Resource ^a ^a acquired.", resource_descriptions.type (i),
		     resource_descriptions.item.name (i));
	end;

	goto process_action_end;

process_action (4):					/* release */
	if release_continue () then
	     if search_list ("-priv", 0) then
		call rcp_admin_$release (resource_desc_ptr, sys_dir, code);
	     else call rcp_$release (resource_desc_ptr, sys_dir, code);
	if code ^= 0 then
	     call crump_in_struc (code, "Cannot release resources.");

	goto process_action_end;

process_action (5):					/* set */
	if resource_descriptions.item (1).given.owner then
	     call crump (error_table_$resource_not_modified, "Cannot modify resource owner via set_resource.");

	if search_list ("-priv", 0) then
	     call rcp_admin_$set_status (resource_desc_ptr, sys_dir, code);
	else call rcp_$set_status (resource_desc_ptr, sys_dir, code);
	if code ^= 0 then
	     call crump_in_struc (code, "Cannot set resources.");

	goto process_action_end;

process_action (6):					/* clear */
	call rcp_sys_$clear_resource (resource_desc_ptr, sys_dir, code);
	if code ^= 0 then
	     call crump_in_struc (code, "Cannot clear resources.");

	goto process_action_end;

process_action_end:
	call clean_up;

/* ----- */

clean_up:
     proc;

	if auto_area_info.areap ^= null then
	     call release_area_ (auto_area_info.areap);

     end clean_up;

/* ----- */

return_hard:
	return;
%skip (4);
search_list:
     proc (desired_arg, position) returns (bit (1) aligned);

dcl	desired_arg	   char (*) parameter,
	position		   fixed bin parameter;

dcl	i		   fixed bin;

	do i = 1 to eca_ptr -> arg_struc_template.n_extra_args
	     while (eca_ptr -> arg_struc_template.long_name (i) ^= desired_arg);
	end;

	if i ^> eca_ptr -> arg_struc_template.n_extra_args then do;
	     position = arg_positions (i);
	     if position > 0 then
		return ("1"b);
	     else return (""b);
	end;

	position = -1;
	return (""b);

     end search_list;
%skip (4);
crump:
     proc (code, reason);

dcl	code		   fixed bin (35),
	reason		   char (*);

dcl	(
	com_err_,
	com_err_$suppress_name
	)		   ext entry options (variable),
	i		   fixed bin;

	call com_err_ (code, myname, reason, myname);
	call clean_up;
	goto return_hard;

crump_in_struc:
     entry (code, reason);

	do i = 1 to resource_descriptions.n_items while (resource_descriptions.item (i).status_code = 0);
	end;

	if i > resource_descriptions.n_items then
	   call com_err_ (code, myname, reason);
	else call com_err_ (resource_descriptions.item (i).status_code, myname, "for ^a ^a",
		resource_descriptions.item (i).type, resource_descriptions.item (i).name);

	if code = error_table_$lock_wait_time_exceeded then
	     call com_err_$suppress_name (code, myname, "Resource registry is busy.");

	call clean_up;

	goto return_hard;

     end crump;
%skip (4);
test:
     entry (new_sys_dir);

dcl	new_sys_dir	   char (*) parameter;

	if new_sys_dir = "" then
	     sys_dir = ">system_control_1>rcp";
	else sys_dir = new_sys_dir;
	return;
%skip (4);
multi_class_volume_continue:
     proc () returns (bit (1));

dcl	continue		   bit (1);
	continue = "1"b;				/* Are we acquiring a multi-class resource */

	if (resource_descriptions.item (1).given.owner & resource_descriptions.item (1).given.aim_range) then do;

/* Is it a multi-class volume? */

	     if index (resource_descriptions.item (1).type, "vol") ^= 0 then do;

/* Is the min_access_class < max_access_class? */

		if ^aim_check_$equal (resource_descriptions.item (1).aim_range (1),
		     resource_descriptions.item (1).aim_range (2)) then do;

/* Does the user wish to continue? */
		     call command_query_$yes_no (yes_sw, 0, myname, "",
			"Do you really want to acquire a multi-class volume?");
		     if ^yes_sw then
			continue = "0"b;
		end;
	     end;
	end;
	return (continue);

     end multi_class_volume_continue;
%page;
release_continue:
     proc () returns (bit (1));

dcl	continue		   bit (1);
	continue = "1"b;

	call command_query_$yes_no (yes_sw, 0, myname, "",
	     "Releasing this resource may cause it to be degaussed.  Do you wish to continue?");

	if ^yes_sw then
	     continue = "0"b;

	return (continue);
     end release_continue;

     end register_resource;
