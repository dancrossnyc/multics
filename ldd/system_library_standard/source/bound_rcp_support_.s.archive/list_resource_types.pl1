/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


list_resource_types: lrt: proc;

/* This command lists all known resource types in >sc1>rtdt. */
/* Written 03/28/78 by C. D. Tavares */
/* Modified 8/81 by M.R. Jordan to fix bugs in control argument processing. */
%page;
/*		*** CONSTANTS ***			*/

dcl  SYSDIR char (168) static initial (">system_control_1");
dcl  SYSENT char (32) static initial ("rtdt") options (constant);

/*		*** AUTOMATIC ***			*/

dcl  al fixed bin;
dcl  alp pointer;
dcl  ap pointer;
dcl  attribute_string char (512) varying;
dcl  bc fixed bin (24);
dcl  code fixed bin (35);
dcl  dirname char (168);
dcl  ename char (32);
dcl  header_sw bit (1)aligned;
dcl  i fixed bin;
dcl  j fixed bin;
dcl  junk fixed bin;
dcl  long_sw bit (1) aligned;
dcl  n_names_to_match fixed bin;
dcl  nargs fixed bin;
dcl  syn_found bit (1) aligned;
dcl  temp_atts (2) bit (72) aligned;

/*		*** BASED ***			*/

dcl  arg based (ap) char (al);

/*		*** ERROR CODES ***			*/

dcl  error_table_$badopt fixed bin (35) ext;
dcl  error_table_$name_not_found fixed bin (35) ext;
dcl  error_table_$unimplemented_version fixed bin (35) ext;

/*		*** EXTERNAL ENTRIES ***		*/

dcl  com_err_ ext entry options (variable);
dcl  cu_$arg_count ext entry (fixed bin);
dcl  cu_$arg_list_ptr ext entry (pointer);
dcl  cu_$arg_ptr_rel ext entry (fixed bin, pointer, fixed bin, fixed bin (35), pointer);
dcl  cv_rcp_attributes_$to_string_given_rtde ext entry (pointer, (2) bit (72) aligned, char (*) varying, fixed bin (35));
dcl  expand_pathname_$add_suffix ext entry (char (*), char (*), char (*), char (*), fixed bin (35));
dcl  hcs_$initiate_count ext entry (char (*), char (*), char (*), fixed bin (24), fixed bin, pointer, fixed bin (35));
dcl  hcs_$terminate_noname ext entry (pointer, fixed bin (35));
dcl  ioa_ ext entry options (variable);

/*		*** BUILTIN FUNCTIONS ***		*/
/*			 &			*/
/*		   *** CONDITIONS ***		*/

dcl  index builtin;
dcl  length builtin;
dcl  null builtin;
dcl  pointer builtin;
dcl  reverse builtin;
dcl  substr builtin;

dcl  cleanup condition;
%page;
%include rtdt;
%page;
	rtdtp = null ();

	call cu_$arg_list_ptr (alp);
	call cu_$arg_count (nargs);

	begin;


dcl  matchnames (nargs) char (32);


	     dirname = SYSDIR;
	     ename = SYSENT;

	     header_sw = "1"b;
	     long_sw = "0"b;
	     n_names_to_match = 0;

	     do i = 1 to nargs;
		call cu_$arg_ptr_rel (i, ap, al, code, alp);
		if code ^= 0 then call crump (code, "obtaining arguments");

		if substr (arg, 1, 1) = "-" then do;
		     if arg = "-lg" | arg = "-long" then long_sw = "1"b;

		     else if arg = "-pn" | arg = "-pathname" then do;
			i = i + 1;
			call cu_$arg_ptr_rel (i, ap, al, code, alp);
			if code ^= 0 then call crump (code, "No pathname supplied.");

			call expand_pathname_$add_suffix (arg, "rtdt", dirname, ename, code);
			if code ^= 0 then call crump (code, arg);
		     end;

		     else if arg = "-nhe" | arg = "-no_header" then header_sw = "0"b;

		     else call crump (error_table_$badopt, arg);
		end;

		else do;
		     n_names_to_match = n_names_to_match + 1;
		     matchnames (n_names_to_match) = arg;
		end;
	     end;

	     on cleanup call clean_up;

/* ------------------------- */

clean_up:	     proc;


		if rtdtp ^= null ()
		then call hcs_$terminate_noname (rtdtp, 0);

		return;


	     end clean_up;

/* ------------------------- */

	     call hcs_$initiate_count (dirname, ename, "", bc, 0, rtdtp, code);
	     if rtdtp = null then
		if ename = "rtdt.rtdt" then do;
		     ename = "rtdt";
		     call hcs_$initiate_count (dirname, ename, "", bc, 0, rtdtp, code);
		end;
	     if rtdtp = null then call crump (code, "^a>^a");

	     if (rtdt.version ^= RTDT_version_2) & (rtdt.version ^= RTDT_version_3) then
		call crump (error_table_$unimplemented_version, "^a>^a");

	     if header_sw then
		call ioa_ (" Type^-Name^[^2-Attributes^]^/", long_sw);

	     do junk = 1, 2 to 2 while (syn_found);

		syn_found = ""b;

		do rtdep = pointer (rtdt.first_resource, rtdt.rtdt_area)
			repeat (pointer (rtde.next_resource, rtdt.rtdt_area))
			while (rtdep ^= null);

		     if rtde.valid then do;

			do i = 1 to n_names_to_match while (matchnames (i) ^= rtde.name);
			end;

			if n_names_to_match = 0 | i <= n_names_to_match then do;

			     if i > 0 then matchnames (i) = "";

			     call ioa_ ("^[Volume^;Device^]^-^a^[  (synonym for ^a)^;^]", rtde.is_volume, rtde.name,
				rtde.is_synonym, rtde.syn_to);

			     if (long_sw & ^rtde.is_synonym) then do;

				temp_atts (1) = rtde.attributes_valid;
				temp_atts (2) = ""b;
				call cv_rcp_attributes_$to_string_given_rtde (rtdep, temp_atts, attribute_string, code);
				if code ^= 0 then call crump (code, "While getting attributes for " || rtde.name);

				do j = 1 by 1 while (attribute_string ^= "");
				     call ioa_ ("^- ^[^;  ^]^a", (j = 1), knockoff_60_ch (attribute_string));
				end;
			     end;

			     if rtde.is_synonym then if n_names_to_match > 0 then do;
				     matchnames (i) = rtde.syn_to;
				     syn_found = "1"b;
				end;

			end;
		     end;
		end;
	     end;

	     do i = 1 to n_names_to_match;
		if matchnames (i) ^= "" then
		     call com_err_ (error_table_$name_not_found, "list_resource_types", "^a", matchnames (i));
	     end;
	     call clean_up;

	     return;
	     
knockoff_60_ch: proc (string) returns (char (60) varying);

dcl  string char (512) varying parameter;

dcl  i fixed bin,
     temp char (60) varying;

		if length (string) <= 60 then do;
		     temp = string;
		     string = "";
		     return (temp);
		end;

		i = 61 - index (reverse (substr (string, 1, 60)), ",");
		temp = substr (string, 1, i);
		string = substr (string, i+1);

		return (temp);
	     end knockoff_60_ch;
	     
crump:	     proc (code, reason);

dcl  code fixed bin (35) parameter,
     reason char (*) parameter;

		call com_err_ (code, "list_resource_types", reason, dirname, ename);
		call clean_up;
		goto return_hard;
	     end crump;

	end;					/* begin block */

return_hard:
	return;

     end list_resource_types;
