/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


cancel_resource:
cnr:
     proc ();

/*
   D_E_S_C_R_I_P_T_I_O_N_

   This command takes a reservation identifier and cancels the
   reservation to which it belongs.  This command just implements the
   user interface.  It calls resource_control_$cancel_id to do the
   actual work.


   J_O_U_R_N_A_L_I_Z_A_T_I_O_N_

   1) Written 11/78 by R.J.C. Kissel.
*/

/* Local Variables */

dcl  code fixed bin (35);
dcl  nargs fixed bin;
dcl  arg_ptr ptr;
dcl  arg_len fixed bin;
dcl  arg char (arg_len) based (arg_ptr);
dcl  arg_count fixed bin;
dcl  res_id char (res_id_len) based (res_id_ptr);
dcl  res_id_len fixed bin;
dcl  res_id_ptr ptr;
dcl  system bit (1) aligned;

/* External Entries */

dcl  resource_control_$cancel_id_string
     entry (char (*), char (*), bit (1) aligned, fixed bin (35));
dcl  cu_$arg_count entry (fixed bin);
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  com_err_ entry options (variable);

/* External Constants */

dcl  error_table_$badopt fixed bin (35) external;

	call cu_$arg_count (nargs);
	if nargs > 3 | nargs < 2
	then goto ERROR_usage;

	call cu_$arg_ptr (1, arg_ptr, arg_len, code);
	if code ^= 0
	then goto ERROR_arg;

	system = "0"b;

	if nargs = 2
	then do;					/* Only "-id res_id". */
	     if arg = "-id"
	     then do;
		call cu_$arg_ptr (2, arg_ptr, arg_len, code);
		if code ^= 0
		then goto ERROR_arg;
		res_id_len = arg_len;
		res_id_ptr = arg_ptr;
	     end;

	     else goto ERROR_carg;
	end;					/* Only "-id res_id". */

	else do;					/* Either "-priv -id res_id" or "-id res_id -priv". */
	     if arg = "-priv"
	     then do;
		system = "1"b;
		arg_count = 2;
	     end;

	     else if arg = "-id"
	     then do;
		call cu_$arg_ptr (2, arg_ptr, arg_len, code);
		if code ^= 0
		then goto ERROR_arg;

		arg_count = 3;
		res_id_len = arg_len;
		res_id_ptr = arg_ptr;
	     end;

	     else goto ERROR_carg;

	     call cu_$arg_ptr (arg_count, arg_ptr, arg_len, code);
	     if code ^= 0
	     then goto ERROR_arg;

	     if arg_count = 3
	     then do;				/* Must be "-priv". */
		if arg = "-priv"
		then system = "1"b;
		else goto ERROR_carg;
	     end;					/* Must be "-priv". */

	     else do;				/* Must be "-id res_id". */
		if arg = "-id"
		then do;
		     call cu_$arg_ptr (3, arg_ptr, arg_len, code);
		     if code ^= 0
		     then goto ERROR_arg;

		     res_id_len = arg_len;
		     res_id_ptr = arg_ptr;
		end;

		else goto ERROR_carg;
	     end;					/* Must be "-id res_id". */
	end;					/* Either "-priv -id res_id" or "-id res_id -priv". */

	call resource_control_$cancel_id_string (res_id, "", system, code);
	if code ^= 0
	then goto ERROR_cancel;
	return;

/*
   Error handling code.
*/

ERROR_arg:
	call com_err_ (code, "cancel_resource");
	return;

ERROR_cancel:
	call com_err_ (code, "cancel_resource", "Unable to cancel reservation ^a.", res_id);
	return;

ERROR_carg:
	call com_err_ (error_table_$badopt, "cancel_resource", "^a", arg);
	return;

ERROR_usage:
	call com_err_ (0b, "cancel_resource", "Usage: cnr -id reservation_id {-priv}");
	return;

     end cancel_resource;
