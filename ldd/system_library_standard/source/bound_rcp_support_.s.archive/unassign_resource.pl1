/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


unassign_resource: ur: procedure;

/*	This program is a command that may be called to unassign a resource controled by RCP.
   *	Created on 01/10/75 by Bill Silver.
   *	Changed on 03/30/75 by Bill Silver to add "device" option.
   *	Modified on 12/09/78 by Michael R. Jordan for version 3 list info.
   *	Modified 2/80 by Michael R. Jordan to add -all
   *	Modified 12/12/83 by Jim Lippard to remove "all".
   *
   *	In the current implementation this command can unassign only devices.
   *	Its calling sequence is:
   *
   *	unassign_resource, ur [resource] [-control_args]
   *
   *	resource		Specifies the resource to be unassigned.
   *			A user may unassign any device by specifying its name.
   *
   *	The following optional control arguments are also supported:
   *
   *	(-com | -comment)	The value argument is a comment that will be displayed
   *			to the operator when the device is unassigned.  If more
   *			than one term is required they should be in quotes.
   *	(-am  | -admin)	Indicates that a force unassignment is to be done.
   *			The user must have access to the gate rcp_sys_.
   *	(-a | -all)	Indicates that all resources are to be unassigned.
*/

/*		AUTOMATIC  DATA		*/

dcl  pointers (1) ptr;				/* Pointer array for temp segment manager. */

dcl  admin_flag bit (1);				/* ON => we must do a force unassignment. */
dcl  all_sw bit (1);				/* ON => unassign all resources */
dcl  arg_len fixed bin;				/* Length of an argument string. */
dcl  arg_ptr ptr;					/* Pointer to an argument string. */
dcl  argx fixed bin;				/* Number of the current argument. */
dcl  comment char (64);				/* Comments to and from operator. */
dcl  device_name char (32);				/* Name of device to be unassigned. */
dcl  ecode fixed bin (35);				/* error_table_ code. */
dcl  i fixed bin;
dcl  num_args fixed bin;				/* Number of command arguments. */
dcl  num_unassigned fixed bin;			/* Number of devices unassigned. */
dcl  option char (12);				/* Command option string. */
dcl  seg_size fixed bin (19);				/* Max size of temp segment. */


/*		BASED  DATA		*/

dcl  argument char (arg_len) based (arg_ptr);		/* Used to reference argument string. */


/*		INTERNAL STATIC DATA	*/

dcl  brief_options (3) char (4)			/* Brief form of command options. */
     internal static init ("-com", "-am", "-a");

dcl  long_options (3) char (8)			/* Long  form of command options. */
     internal static init ("-comment", "-admin", "-all");

dcl  HAS_VALUE (3) bit (1) unal internal static options (constant) init ("1"b, "0"b, "0"b);

/*		EXTERNAL ENTRIES CALLED	*/

dcl  cleanup condition;

dcl (addr, hbound, null, substr) builtin;

dcl (error_table_$badopt,
     error_table_$inconsistent,
     error_table_$noarg,
     error_table_$resource_unassigned) fixed bin (35) external;

dcl  com_err_ entry options (variable);
dcl  cu_$arg_count entry (fixed bin);
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  get_temp_segments_ entry (char (*), (1) ptr, fixed bin (35));
dcl  hcs_$get_max_length_seg entry (ptr, fixed bin (19), fixed bin (35));
dcl  rcp_$copy_list entry (ptr, fixed bin (19), fixed bin (35));
dcl  rcp_$unassign entry (bit (36) aligned, bit (*), char (*), fixed bin (35));
dcl  rcp_sys_$unassign_device entry (char (*), fixed bin (35));
dcl  release_temp_segments_ entry (char (*), (1) ptr, fixed bin (35));

%include rcp_list_info;

/*	Begin command:  unassign_resource
*/
	ecode,					/* Initialize. */
	     num_unassigned = 0;
	comment,
	     device_name = " ";
	admin_flag = "0"b;				/* Assume no admin unassignment. */
	all_sw = "0"b;				/* not -all */

	call cu_$arg_count (num_args);		/* Total number of command arguments. */

	if num_args < 1				/* Was any device specified? */
	then do;					/* No, no argument. */
NO_RESOURCE:   call com_err_ (error_table_$noarg, "unassign_resource", "No resource specified.");
	     return;
	end;

	call cu_$arg_ptr (1, arg_ptr, arg_len, ecode);	/* Get resource name. */
	if ecode ^= 0
	then do;
	     call com_err_ (ecode, "unassign_resource", "Error getting resource name argument.");
	     return;
	end;

	if substr (argument, 1, 1) ^= "-"		/* Make sure that it is not a control argument. */
	then do;
	     argx = 2;
	     device_name = argument;
	end;
	else argx = 1;

	do argx = argx to num_args;			/* Process any optional control arguments. */
	     call PROCESS_ARG;			/* Most will be processed in pairs. */
	     if ecode ^= 0				/* Was there an error? */
	     then return;				/* Yes, abort. */
	end;

	if device_name ^= ""
	& all_sw then do;
	     call com_err_ (error_table_$inconsistent, "unassign_resource", "Cannot specify resource name and -all.");
	     return;
	end;

	if device_name = ""
	& ^all_sw
	then goto NO_RESOURCE;

	if admin_flag				/* Does user want to force the unassignment? */
	then do;					/* Yes. */
	     if all_sw
	     then do;
		call com_err_ (error_table_$inconsistent, "unassign_resource", "Cannot specify -admin and -all together.");
		return;
	     end;
	     call rcp_sys_$unassign_device (device_name, ecode);
	     if ecode ^= 0
	     then call com_err_ (ecode, "unassign_resource", "Error force unassigning ^a.", device_name);
	     return;
	end;

/*	User wants to unassign one or more devices from her/his process.
   *	Get temporary segment for RCP list info structure.
   *	Set up cleanup handler to release temp segment.
*/
	pointers (1) = null ();
	on cleanup begin;
	     if pointers (1) ^= null ()
	     then call release_temp_segments_ ("unassign_resource", pointers, ecode);
	end;

	call get_temp_segments_ ("unassign_resource", pointers, ecode);
	if ecode ^= 0				/* Unable to get temporary working segment? */
	then do;					/* Yes. */
	     call com_err_ (ecode, "unassign_resource", "Error getting temporary segment.");
	     return;
	end;

	call hcs_$get_max_length_seg (pointers (1), seg_size, ecode);
	if ecode ^= 0				/* We need max size of temp segment. */
	then do;
	     call com_err_ (ecode, "unassign_resource", "Error getting maximum length of temporary segment.");
	     goto RETURN;
	end;

	rli_ptr = pointers (1);			/* Temp segment used to RCP info. */
	rli.version_num = rli_version_4;

	call rcp_$copy_list (rli_ptr, seg_size, ecode);
	if ecode ^= 0				/* Error copying process's RCP info? */
	then do;					/* Yes. */
	     call com_err_ (ecode, "unassign_resource", "Error copying RCP info from lower ring.");
	     goto RETURN;
	end;

	do i = 1 to rli.head.num_dassign;		/* Look at each assigned device. */
	     dassign_ptr = addr (rli.dassigns (i));	/* Get pointer to assignment entry. */
	     if all_sw |				/* Unassigning all devices? */
	     (device_name = dassign.device_name)	/* Or this device? */
	     then do;				/* Yes, unassign this device. */
		num_unassigned = num_unassigned + 1;
		call rcp_$unassign (dassign.rcp_id, "0"b, comment, ecode);
		if ecode ^= 0
		then call com_err_ (ecode, "unassign_resource", "Error unassigning ^a.", dassign.device_name);
		comment = " ";			/* Issue comment only once. */
	     end;
	end;

	if num_unassigned = 0			/* Did we unassign any devices? */
	then if all_sw				/* No. */
	     then call com_err_ (error_table_$resource_unassigned, "unassign_resource", "No resources assigned.");
	     else call com_err_ (error_table_$resource_unassigned, "unassign_resource", "^a", device_name);

RETURN:						/* Come here to release temp  segment. */
	call release_temp_segments_ ("unassign_resource", pointers, ecode);
	if ecode ^= 0
	then call com_err_ (ecode, "unassign_resource", "Error releasing temporary segment.");

	return;
						/* 	*/
PROCESS_ARG: procedure;

/*	This procedure is called to process one option argument.
   *	All of the option arguments except "-admin" have a value argument.
   *	This value must be the next argument.  In this case we will process
   *	the value argument too.
*/
	     call cu_$arg_ptr (argx, arg_ptr, arg_len, ecode);
	     if ecode ^= 0
	     then do;
		call com_err_ (ecode, "unassign_resource", "Error getting argument ^d.", argx);
		return;
	     end;

	     option = argument;			/* Save option argument. */

	     do i = 1 to hbound (brief_options, 1);	/* Look for valid option name. */
		if (option = brief_options (i)) |	/* Is it this brief name? */
		(option = long_options (i))		/* Or this long name. */
		then do;				/* Yes, one of them. */
		     if HAS_VALUE (i)
		     then do;
			call GET_VALUE;		/* Get accompanying value argument. */
			if ecode ^= 0		/* Check for errors. */
			then return;
		     end;
		     goto OPTION (i);		/* Go process this option. */
		end;
	     end;

	     ecode = error_table_$badopt;		/* Option not found. */
	     call com_err_ (ecode, "uasssign_resource", "^a", option);
	     return;

OPTION (1):					/* "-com" or "-comment" */
	     comment = argument;			/* Save user's comment to operator. */
	     return;

OPTION (2):					/* "-am" or "-admin" */
	     admin_flag = "1"b;			/* We want to unassign through privileged gate. */
	     return;

OPTION (3):					/* "-a" or "-all" */

	     all_sw = "1"b;
	     return;

	end PROCESS_ARG;
						/* 	*/
GET_VALUE: procedure;

/*	This procedure is called to get the value argument that is associated
   *	with the current option argument.
*/
	     if argx = num_args			/* Is this the last argument? */
	     then do;				/* Yes, value argument missing. */
		ecode = error_table_$noarg;
		call com_err_ (ecode, "unassign_resource", "No value argument for ^a.", option);
		return;
	     end;

	     argx = argx + 1;			/* Move to the next argument. */

	     call cu_$arg_ptr (argx, arg_ptr, arg_len, ecode);
	     if ecode ^= 0
	     then do;
		call com_err_ (ecode, "unassign_resource", "Error getting argument ^d.", argx);
		return;
	     end;

	     if substr (argument, 1, 1) = "-"		/* Is next argument a control option? */
	     then do;				/* Yes, value argument is missing. */
		ecode = error_table_$noarg;
		call com_err_ (ecode, "unassign_resource", "No value argument for ^a.", option);
		return;
	     end;

	end GET_VALUE;


     end unassign_resource;
