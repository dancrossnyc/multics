/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


resource_control_:
     proc;

/*
   This subroutine implements the user ring interface to the resource
   control package.  All the work is done by the various entry points
   and this main procedure should never be called.
*/

/*
   Written by R.J.C. Kissel 5/78.
   Modified by R.J.C. Kissel 1/79 to call rcp_ gate and to add cancellation entry.
*/

	return;					/* To make this call a nop. */

reserve:
	entry (resource_desc_ptr, resource_res_ptr, authorization, system, code);

/*
   This entry point implements the reservation function.  It takes
   a description of the resources to be reserved, (a rservation group)
   and makes the reservation as an indivisible operation.  The code
   returned indicates success or failure and the code returned with
   each resource indicates more specifically where a failure occured.
*/

/* Arguments */

/* See the resource_control_desc include file for pointer declarations. */

dcl  authorization bit (72) aligned;			/* Only used if system = "1"b. */
dcl  system bit (1) aligned;				/* This call wishes to do a privileged reservation. */
dcl  code fixed bin (35);				/* A standard system status code. */

/* Local Variables */

/* Local Constants */

/* Local Overlays */

/* Include Files */

%include resource_control_desc;

/* External Entries */

dcl  rcp_sys_$reserve entry (ptr, ptr, bit (72) aligned, fixed bin (35));
dcl  rcp_$reserve entry (ptr, ptr, fixed bin (35));
dcl  rcp_sys_$cancel_id_string
     entry (char (*), char (*), fixed bin (35));
dcl  rcp_$cancel_id_string
     entry (char (*), fixed bin (35));

/* External Constants */

dcl  error_table_$mdc_no_access
     fixed bin (35) external;

/* Builtin Functions and Conditions */

dcl (linkage_error) condition;

	if system
	then do;					/* Check access to rcp_sys_ gate. */
	     on linkage_error
		goto BAD_ACCESS;
	     call rcp_sys_$reserve (resource_desc_ptr, resource_res_ptr, authorization, code);
	     revert linkage_error;
	end;

	else call rcp_$reserve (resource_desc_ptr, resource_res_ptr, code);

	return;

cancel_id_string:
	entry (P_res_id, P_grp_id, system, code);

dcl  P_res_id char (*) parameter;
dcl  P_grp_id char (*) parameter;
	
	if system
	then do;
	     on linkage_error
		goto BAD_ACCESS;
	     call rcp_sys_$cancel_id_string (P_res_id, P_grp_id, code);
	     revert linkage_error;
	end;

	else call rcp_$cancel_id_string (P_res_id, code);

	return;

BAD_ACCESS:
	code = error_table_$mdc_no_access;
	return;

     end resource_control_;
