/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(87-06-19,Rauschelbach), approve(87-06-29,MCR7736),
     audit(87-07-21,Farley), install(87-08-06,MR12.1-1064):
     Error message duplication was removed, and a call to com_err_ with a more
     standard version.
                                                   END HISTORY COMMENTS */


resource_status: rst: proc;

/* This command prints information about selected RCP resources.

   Written in 1979 by C. D. Tavares.
   Last modified 11/19/80 by CDT to change -usage_lock to -lock and to make
   sure it always calls the system error routine appropriate to its calling
   mode (command or AF).
   Modified 7/82 BIM to get the arg list ptr before looking at the arg list.
*/

/* automatic */

dcl  al fixed bin,
     alp pointer,
     ap pointer,
     arg_ptr entry (fixed bin, pointer, fixed bin, fixed bin (35)) variable,
     arg_ptr_rel entry (fixed bin, pointer, fixed bin, fixed bin (35), pointer) variable,
     called_as_af bit (1) aligned,
     code fixed bin (35),
     resource_type char (32),
    (i, j, control_arg_type) fixed bin,
     nargs fixed bin,
     priv_sw bit (1) aligned,
     return_ptr pointer,
     return_len fixed bin (24);
						/* static */

dcl  registry_dir char (168) static initial (">system_control_1>rcp");

/* constants */

dcl  Name fixed bin initial (0) static options (constant);

dcl  legal_control_args (44) char (24) static options (constant) initial
    ("-priv", "FUTURE_EXP",				/* 1, 2 */
     "-unique_id", "-uid",				/* 3, 4 */
     "-potential_attributes", "-pattr",			/* 5, 6 */
     "-attributes", "-attr",				/* 7, 8 */
     "-potential_access_class", "-pacc",		/* 9, 10 */
     "-access_class", "-acc",				/* 11, 12 */
     "-owner", "-ow",				/* 13, 14 */
     "-acs_path", "FUTURE_EXP",			/* 15, 16 */
     "-location", "-loc",				/* 17, 18 */
     "-comment", "-com",				/* 19, 20 */
     "-charge_type", "-crgtp",			/* 21, 22 */
     "-mode", "-md",				/* 23, 24 */
     "-lock", "FUTURE_EXP",				/* 25, 26 */
     "-release_lock", "-rll",				/* 27, 28 */
     "-awaiting_clear", "FUTURE_EXP",			/* 29, 30 */
     "-alloc", "FUTURE_EXP",				/* 31, 32 */
    (10) (1) "FUTURE_EXP",				/* 33 thru 42 */
     "-all", "-a");					/* 43, 44 */

dcl  explanation char (168) static options (constant) initial
    ("^/^5xUsage: resource_status resource_type resource_names {control_args}");

/* external static */

dcl (error_table_$badopt,
     error_table_$badcall,
     error_table_$noarg,
     error_table_$not_act_fnc,
     error_table_$too_many_args) fixed bin (35) external static;

/* based */

dcl  arg char (al) based (ap),
     return_string char (return_len) varying based (return_ptr);

%include rst_control;

/* entries */

dcl (com_err_, active_fnc_err_) ext entry options (variable),
     cu_$af_return_arg ext entry (fixed bin, pointer, fixed bin (24), fixed bin (35)),
     cu_$arg_list_ptr ext entry (pointer),
    (cu_$arg_ptr, cu_$af_arg_ptr) ext entry (fixed bin, pointer, fixed bin, fixed bin (35)),
    (cu_$arg_ptr_rel, cu_$af_arg_ptr_rel) ext entry (fixed bin, pointer, fixed bin, fixed bin (35), pointer),
     interpret_resource_desc_ ext entry
    (pointer, fixed bin, char (*), bit (*) aligned, bit (1) aligned, char (*) varying, fixed bin (35)),
     resource_info_$get_primary_type entry (char (*), char (*), fixed bin (35));

dcl (rcp_$get_status, rcp_admin_$get_status) ext entry (pointer, char (*), fixed bin (35));

/* builtins */

dcl (empty, hbound, index, length, null, size, string, substr, unspec) builtin;

%include resource_control_desc;

	called_as_af = ""b;
	unspec (rst_control) = ""b;
	priv_sw = ""b;

	call cu_$af_return_arg (nargs, return_ptr, return_len, code);
	if code = 0 then called_as_af = "1"b;
	else if code = error_table_$not_act_fnc then code = 0;
	if code ^= 0 then call crump (code, "Getting argument count.");

	if nargs < 2 then call crump (error_table_$noarg, explanation);

	if called_as_af then do;
	     arg_ptr = cu_$af_arg_ptr;
	     arg_ptr_rel = cu_$af_arg_ptr_rel;
	end;
	else do;
	     arg_ptr = cu_$arg_ptr;
	     arg_ptr_rel = cu_$arg_ptr_rel;
	     return_ptr = null;
	     return_len = 0;
	end;

/* First get the primary resoure type. */

	call cu_$arg_list_ptr (alp);


	call arg_ptr_rel (1, ap, al, code, alp);
	if code ^= 0
	then call crump (code, "Getting argument.");
	call resource_info_$get_primary_type (arg, resource_type, code);
	if code ^= 0
	then call crump (code, arg);

/* Next loop through the arguments and decide how many resources
   the caller wants information about. */



	Resource_count = 0;
	do i = 2 to nargs;
	     call arg_ptr (i, ap, al, code);
	     if arg = "-name" | arg = "-nm" then do;
		i = i + 1;
		Resource_count = Resource_count + 1;
	     end;
	     else if substr (arg, 1, 1) ^= "-" then
		Resource_count = Resource_count + 1;
	end;

	if Resource_count <= 0 then call crump (error_table_$noarg, explanation);

	begin;

dcl  stackarea area (size (null -> resource_descriptions) + 100) automatic;
	     stackarea = empty ();

	     allocate resource_descriptions in (stackarea);

	     resource_descriptions.version_no = resource_desc_version_1;
	     unspec (resource_descriptions.item (*)) = ""b;

	     resource_descriptions.item (*).type = resource_type;

	     Resource_count = 0;

	     do i = 2 to nargs;

		call arg_ptr_rel (i, ap, al, code, alp);

		if code ^= 0 then call crump (code, "Getting argument.");

		control_arg_type = Name;

		if arg = "-name" | arg = "-nm" then do;
		     i = i + 1;
		     call arg_ptr_rel (i, ap, al, code, alp);
		     if code ^= 0 then call crump (code, "After -name.");
		end;

		else if substr (arg, 1, 1) = "-" then do;
		     do control_arg_type = 1 to hbound (legal_control_args, 1)
			     while (legal_control_args (control_arg_type) ^= arg);
		     end;

		     if control_arg_type > hbound (legal_control_args, 1) then call crump (error_table_$badopt, arg);
		end;


		goto process_control_arg (control_arg_type);

process_control_arg (1): process_control_arg (2):		/* -priv */
		priv_sw = "1"b;
		goto end_process_control_arg;

process_control_arg (3): process_control_arg (4):		/* -unique_id, -uid */
		rst_control.uid = "1"b;
		goto end_process_control_arg;

process_control_arg (5): process_control_arg (6):		/* -potential_attributes, -pattr */
		rst_control.potential_attributes = "1"b;
		goto end_process_control_arg;

process_control_arg (7): process_control_arg (8):		/* -attributes, -attr */
		rst_control.attributes = "1"b;
		goto end_process_control_arg;

process_control_arg (9): process_control_arg (10):	/* -potential_access_class, -pacc */
		rst_control.potential_aim_range = "1"b;
		goto end_process_control_arg;

process_control_arg (11): process_control_arg (12):	/* -access_class, -acc */
		rst_control.aim_range = "1"b;
		goto end_process_control_arg;

process_control_arg (13): process_control_arg (14):	/* -owner, -ow */
		rst_control.owner = "1"b;
		goto end_process_control_arg;

process_control_arg (15): process_control_arg (16):	/* -acs_path */
		rst_control.acs_path = "1"b;
		goto end_process_control_arg;

process_control_arg (17): process_control_arg (18):	/* -location, -loc */
		rst_control.location = "1"b;
		goto end_process_control_arg;

process_control_arg (19): process_control_arg (20):	/* -comment, -com */
		rst_control.comment = "1"b;
		goto end_process_control_arg;

process_control_arg (21): process_control_arg (22):	/* -charge_type, -crgtp */
		rst_control.charge_type = "1"b;
		goto end_process_control_arg;

process_control_arg (23): process_control_arg (24):	/* -mode */
		rst_control.mode = "1"b;
		goto end_process_control_arg;

process_control_arg (25): process_control_arg (26):	/* -lock */
		rst_control.usage_lock = "1"b;
		goto end_process_control_arg;

process_control_arg (27): process_control_arg (28):	/* -release_lock, -rll */
		rst_control.release_lock = "1"b;
		goto end_process_control_arg;

process_control_arg (29): process_control_arg (30):	/* -awaiting_clear */
		rst_control.awaiting_clear = "1"b;
		goto end_process_control_arg;

process_control_arg (31): process_control_arg (32):	/* -alloc */
		rst_control.user_alloc = "1"b;
		goto end_process_control_arg;

process_control_arg (43): process_control_arg (44):	/* -all, -a */
		rst_control = "1"b;
		rst_control.given_flags, rst_control.desired_attributes = ""b;
						/* this is mostly debugging garbage */
		goto end_process_control_arg;

process_control_arg (0):				/* normal name */
		Resource_count = Resource_count + 1;
		resource_descriptions.item (Resource_count).name = arg;
		resource_descriptions.given (Resource_count).name = "1"b;

end_process_control_arg:
	     end;

	     resource_descriptions.n_items = Resource_count;

	     if called_as_af then
		if resource_descriptions.n_items > 1 then call crump (error_table_$badcall,
		     "Only one resource allowed in active function invocation.");
	     if string (rst_control) = ""b then
		string (rst_control) = rst_control_defaults; /* default, name, attributes, mode, and user_free */

	     if called_as_af then do;
		j = index (string (rst_control), "1"b);
		if j = 0 then call crump (error_table_$noarg, "Desired return value not specified.");
		if j ^= length (string (rst_control)) then
		     if substr (string (rst_control), j+1) ^= ""b then
			call crump (error_table_$too_many_args, "Cannot return more than one resource property in active function invocation.");
	     end;

Process (6):					/* Status */
	     if priv_sw then
		call rcp_admin_$get_status (resource_desc_ptr, registry_dir, code);
	     else call rcp_$get_status (resource_desc_ptr, registry_dir, code);
	     if code ^= 0 then do;

		do i = 1 to resource_descriptions.n_items while (resource_descriptions.item (i).status_code = 0);
		end;

		if i > resource_descriptions.n_items then
		     call crump (code, "Cannot obtain status from ring 1.");
		else do;
		     if ^called_as_af then do;
			call com_err_ (resource_descriptions.item (i).status_code,
			     "resource_status", "^a ^a", resource_descriptions.item (i).type,
			     resource_descriptions.item (i).name);
		     end;
		     else do;
			call active_fnc_err_ (resource_descriptions.item (i).status_code,
			     "resource_status", "^a ^a", resource_descriptions.item (i).type,
			     resource_descriptions.item (i).name);
			return_string = "";
			goto return_hard;
		     end;
		end;
	     end;

	     else call interpret_resource_desc_ (resource_desc_ptr, 0, "resource_status",
		string (rst_control), called_as_af, return_string, code);
						/* ignore code, err msg has already been printed */
	end;					/* begin block */

	return;
	
crump:	proc (code, message);

dcl  code fixed bin (35),
     message char (*);

	     if called_as_af then do;
		call active_fnc_err_ (code, "resource_status", message, "resource_status");
		return_string = "";
	     end;
	     else call com_err_ (code, "resource_status", message, "resource_status");
	     goto return_hard;
	end crump;

return_hard: return;
	
test:	entry (newdir);

dcl  newdir char (*) parameter;

	if newdir = "" then registry_dir = ">system_control_1>rcp";
	else registry_dir = newdir;
	return;

     end resource_status;
