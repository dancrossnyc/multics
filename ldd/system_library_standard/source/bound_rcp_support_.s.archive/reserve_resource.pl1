/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


reserve_resource:
rsr:
     proc ();

/*
   D_E_S_C_R_I_P_T_I_O_N_

   This command takes a resource description and reserves the
   requested resources for the calling process.  This command just
   implements the user interface.  It calls parse_resource_desc_$check
   to parse the resource description and resource_control_$reserve to
   reserve the resource.



   J_O_U_R_N_A_L_I_Z_A_T_I_O_N__

   1) Written 11/78 by R.J.C. Kissel.

*/

/* Local variables */

dcl  nargs fixed bin;
dcl  arg_ptr ptr;
dcl  arg_len fixed bin;
dcl  arg char (arg_len) based (arg_ptr);
dcl  code fixed bin (35);
dcl  info_area ptr;
dcl  err_msg char (256) varying;

/* Include Files */

%include resource_control_desc;

/* External Entries */

dcl  cu_$arg_count entry (fixed bin);
dcl  get_system_free_area_
     entry () returns (ptr);
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  parse_resource_desc_$check
     entry (char (*), ptr, ptr, ptr, char (*) varying, fixed bin (35));
dcl  com_err_ entry options (variable);
dcl  resource_control_$reserve
     entry (ptr, ptr, bit (72) aligned, bit (1) aligned, fixed bin (35));

/* External Constants */

dcl  error_table_$badopt fixed bin (35) external;

/* Builtin Functions and Conditions */

dcl (null) builtin;

dcl (cleanup) condition;

	resource_desc_ptr = null ();
	resource_res_ptr = null ();
	info_area = get_system_free_area_ ();

	on cleanup
	     call Cleanup_Handler;

	call cu_$arg_count (nargs);
	if nargs ^= 2
	then goto ERROR_usage;

	call cu_$arg_ptr (1, arg_ptr, arg_len, code);
	if code ^= 0
	then goto ERROR_arg;

	if arg ^= "-resource" & arg ^= "-rsc"
	then goto ERROR_carg;

	call cu_$arg_ptr (2, arg_ptr, arg_len, code);
	if code ^= 0
	then goto ERROR_arg;

	call parse_resource_desc_$check (arg, info_area, resource_desc_ptr, resource_res_ptr, err_msg, code);
	if code ^= 0
	then goto ERROR_parse;

	call resource_control_$reserve (resource_desc_ptr, resource_res_ptr, "0"b, "0"b, code);
	if code ^= 0
	then goto ERROR_res;

	return;

/*
   All error handling code goes here.
*/

ERROR_arg:
	call Cleanup_Handler ();
	call com_err_ (code, "reserve_resource");
	return;

ERROR_carg:
	call Cleanup_Handler ();
	call com_err_ (error_table_$badopt, "reserve_resource", "^a", arg);
	return;

ERROR_parse:
	call Cleanup_Handler ();
	call com_err_ (code, "reserve_resource", "^a", err_msg);
	return;

ERROR_res:
	call Cleanup_Handler ();
	call com_err_ (code, "reserve_resource", "No reservations made.");
	return;

ERROR_usage:
	call Cleanup_Handler ();
	call com_err_ (0b, "reserve_resource", "Usage: rsr -rsc resource_desc");
	return;

Cleanup_Handler:
	proc ();

	     if resource_desc_ptr ^= null ()
	     then free resource_descriptions;

	     if resource_res_ptr ^= null ()
	     then free reservation_description;

	end Cleanup_Handler;

     end reserve_resource;
