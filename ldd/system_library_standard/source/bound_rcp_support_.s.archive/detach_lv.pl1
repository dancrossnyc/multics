/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


detach_lv: dlv: procedure;

/*	This program is a command that may be called to detach a logical volume.
   *	Created on 04/08/76 by Bill Silver.
   *	Modified on 12/09/78 by Michael R. Jordan for version 3 list info.
   *	Modified on 05/03/82 by J. Bongiovanni for version 4 list info.
   *
   *	demoun, dmt  volume
   *
   *	volume	Specifies the name of the logical volume or volumes to be detached.
   *		A user may detach all logical volumes attached for his/her
   *		process by specifying:
   *				"all"
   *		A user may detach one logical volume by specifying its volume name.
*/

/*		AUTOMATIC  DATA		*/

dcl  pointers (1) ptr;				/* Pointer array for temp segment manager. */

dcl  arg_len fixed bin;				/* Length of an argument string. */
dcl  arg_ptr ptr;					/* Pointer to an argument string. */
dcl  ecode fixed bin (35);				/* error_table_ code. */
dcl  i fixed bin;
dcl  num_args fixed bin;				/* Number of command arguments. */
dcl  num_detached fixed bin;				/* Number of volumes detached. */
dcl  seg_size fixed bin (19);				/* Max size of temp segment. */
dcl  volume_name char (32);				/* Name of volume to be detached. */


/*		BASED  DATA		*/

dcl  argument char (arg_len) based (arg_ptr);		/* Used to reference argument string. */


/*		EXTERNAL ENTRIES CALLED	*/

dcl  cleanup condition;

dcl (addr, null) builtin;

dcl  error_table_$noarg fixed bin (35) external;

dcl  com_err_ entry options (variable);
dcl  cu_$arg_count entry (fixed bin);
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  get_temp_segments_ entry (char (*), (1) ptr, fixed bin (35));
dcl  hcs_$get_max_length_seg entry (ptr, fixed bin (19), fixed bin (35));
dcl  rcp_$copy_list entry (ptr, fixed bin (19), fixed bin (35));
dcl  rcp_$detach_lv entry (bit (36) aligned, fixed bin (35));
dcl  release_temp_segments_ entry (char (*), (1) ptr, fixed bin (35));
						/* 	*/
%include rcp_list_info;
/* 	*/
/*	Begin command:  detach_lv
*/
	ecode,					/* Initialize. */
	     num_detached = 0;
	volume_name = " ";

	call cu_$arg_count (num_args);		/* Total number of command arguments. */

	if num_args < 1				/* Was any volume specified? */
	then do;					/* No, no argument. */
	     call com_err_ (error_table_$noarg, "detach_lv", "No volume specified.");
	     return;
	end;

	call cu_$arg_ptr (1, arg_ptr, arg_len, ecode);	/* Get volume name. */
	if ecode ^= 0
	then do;
	     call com_err_ (ecode, "detach_lv", "Error getting volume name argument.");
	     return;
	end;

	volume_name = argument;			/* Remember volume name. */

/*	User wants to detach one or more logical volumes from her/his process.
   *	Get temporary segment for RCP list info structure.
   *	Set up cleanup handler to release temp segment.
*/
	pointers (1) = null ();
	on cleanup begin;
	     if pointers (1) ^= null ()
	     then call release_temp_segments_ ("detach_lv", pointers, ecode);
	end;

	call get_temp_segments_ ("detach_lv", pointers, ecode);
	if ecode ^= 0				/* Unable to get temporary working segment? */
	then do;					/* Yes. */
	     call com_err_ (ecode, "detach_lv", "Error getting temporary segment");
	     goto RETURN;
	end;

	call hcs_$get_max_length_seg (pointers (1), seg_size, ecode);
	if ecode ^= 0				/* We need max size of temp segment. */
	then do;
	     call com_err_ (ecode, "detach_lv", "Error getting max seg length of temp segment");
	     goto RETURN;
	end;

	rli_ptr = pointers (1);			/* Temp segment used for RCP info. */
	rli.version_num = rli_version_4;

	call rcp_$copy_list (rli_ptr, seg_size, ecode);
	if ecode ^= 0				/* Error copying process's RCP info? */
	then do;					/* Yes. */
	     call com_err_ (ecode, "detach_lv", "Error copying RCP info");
	     goto RETURN;
	end;

	do i = 1 to rli.head.num_lv;			/* Look at each attached logical volume. */
	     lv_ptr = addr (rli.lvs (i));		/* Get pointer to lv attach entry. */
	     if (volume_name = "all") |		/* Detaching all lvs? */
	     (volume_name = lv.volume_name)		/* Or this lv? */
	     then do;				/* Yes, detach this logical volume. */
		num_detached = num_detached + 1;
		call rcp_$detach_lv (lv.rcp_id, ecode);
		if ecode ^= 0
		then call com_err_ (ecode, "detach_lv", "Error detaching ^a", lv.volume_name);
	     end;
	end;

	if num_detached = 0				/* Did we detach any volumes? */
	then if volume_name = "lv"			/* No. */
	     then call com_err_ (0, "detach_lv", "No logical volumes attached");
	     else call com_err_ (0, "detach_lv", "Logical volume ^a not attached", volume_name);

RETURN:
	call release_temp_segments_ ("detach_lv", pointers, ecode);
	if ecode ^= 0
	then call com_err_ (ecode, "detach_lv", "Error releasing temp segment");

	return;

     end detach_lv;
