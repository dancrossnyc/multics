/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(86-05-22,Martinson), approve(86-05-22,MCR7411),
     audit(86-05-22,GJohnson), install(86-05-22,MR12.0-1061):
     Fix assign_resource so that the -wait control argument works.
  2) change(86-06-04,Hartogs), approve(86-06-04,MCR7383),
     audit(86-06-05,Coppola), install(86-07-18,MR12.0-1098):
     Changed to use version constant in rcp_device_info.incl.pl1
                                                   END HISTORY COMMENTS */


assign_resource: ar: procedure;


/*	This program is a command that may be called to assign a resource controled by RCP.
   *	Created on 01/07/75 by Bill Silver.
   *	Changed on 04/02/76 by Bill Silver for "-number" and "-wait" arguments.
   *	Changed on 05/24/78 by Michael R. Jordan for tape_drive and disk_drive and the waring for tape and disk.
   *	Changed on 11/17/78 by M. R. Jordan for -speed and -den 6250.
   *	Modified 6/79 by Michael R. Jordan for 32 character resource types.
   *      Changed 05/83 by B. Braun to add active function capability (phx14713) 
   *      and correct declarations of structures used in ipc_ calls (phx13447).
   *	Modified  9/83 by J. A. Bush to use tape_info_version_3 tape_info structure
   *	Modified 831010 for multiple console support... -E. A. Ranzenbach
   *      Modified 841017 to do correct cleanup handling... -M. M. Pozzo
   *
   *	In the current implementation this command can assign only devices.
   *	Its calling sequence is:
   *
   *	assign_resource  resource_type  -control_args-
   *
   *	resource_type	This argument specifies the type of resource to be
   *			assigned.  Currently only device type resources can
   *			be assigned.  Thus this argument must specify a known
   *			device type.  If no "-device" control argument is
   *			specified RCP will attempt to assign any appropriate
   *			device of this type.
   *
   *	The following optional control arguments are also supported.  They may
   *	be used to specify the characteristics of the device to be assigned.
   *	Most of these control arguments must be followed by a value argument.
   *
   *	(-dv  | -device)	Specifies that a specific device is to be assigned.
   *			Its value argument must be the name of the device.
   *			RCP will attempt to assign only this specific device.
   *	(-lg  | -long)	Specifies that the user wants all available information about
   *			the device that is assigned.
   *	(-com | -comment)	The value argument is a comment that will be displayed
   *			to the operator when the device is assigned.  If more
   *			than one term is required they should be in quotes.
   *	(-model)		Device model number.
   *	(-tk  | -track)	For tapes, the track type.  Must be 9 or 7.
   *	(-den | -density)	For tapes, the density must be one of the following
   *			values:  6250, 1600, 800, 556, or 200.
   *	(-vol | -volume)	The name of a volume used to qualify assignment.
   *	(-tn  | -train)	For printers, the print train type.
   *	(-ll  | -line_length)  For printer, the line length.
   *	(-sys | -system)	Specifies that the user wants to be a system process.
   *	(-nb  | -number)    The number of similar devices to assign.
   *	(-wt  | -wait)	Specifies that the user wants to wait for assignments.
   *			Optional value => minutes to wait.
   *	(-speed)		For tapes, the speed must be one of the following
   *			values: 75, 125, or 200.
   *
   *      Active Function Syntax is:
   *            [ar resource_type {-control_args}]
   *	 
   *      The active function returns true if an
   *	assignment was successful and returns false if the resources are
   *	unavailable.  Other errors are reported by active_fnc_error_.
   *	The -long control argument is not allowed.  
*/

/*		AUTOMATIC  DATA		*/

dcl 1 info_buffer like tape_info;			/* An input device info buffer big enough for tapes. */

dcl 1 alist (16) aligned,				/* List of assigned devices. */
    2 rcp_id bit (36),				/* RCP ID for this assignment. */
    2 info like tape_info;				/* Output device info structure. */

dcl 1 event_data aligned like event_wait_info;		/* Event message structure, not used. */

dcl  active_fnc			bit(1);		/* True if called as an active function 	*/
dcl  af_return_arg_len		fixed bin(21);	
dcl  af_return_arg_ptr		ptr;
dcl  arg_len fixed bin(21);				/* Length of an argument string.		*/
dcl  arg_ptr ptr;					/* Pointer to an argument string.		*/
dcl  argx fixed bin;				/* Number of the current argument.		*/
dcl  badx fixed bin (35);				/* Index to bad character.			*/
dcl  comment char (64);				/* Comments to and from operator.		*/
dcl  density bit (5);				/* Tape density characteristic.		*/
dcl  density_comment char (30) varying;			/* Used to print density capabilities.		*/
dcl  device_flag bit (1);				/* ON => user wants specific device by name.	*/
dcl  device_type char (32);				/* Device type.				*/
dcl  dtypex fixed bin;				/* Device type index.			*/
dcl  ecode fixed bin (35);				/* error_table_ code.			*/
dcl  fixed_arg fixed bin;				/* Used to convert an argumment to fixed bin.	*/
dcl  i fixed bin;
dcl  line_length fixed bin;				/* Printer line length.			*/
dcl  long_flag bit (1);				/* ON => all available information.		*/
dcl  max_num_waits fixed bin;				/* Maximum number of minutes to wait.		*/
dcl  num_args fixed bin;				/* Number of command arguments.		*/
dcl  num_assigned fixed bin;				/* Number of devices assigned so far.		*/
dcl  num_waits fixed bin;				/* Number of times we have waited.		*/
dcl  number fixed bin;				/* Number of devices to assign.		*/
dcl  option char (12);				/* Command option string.			*/
dcl  option_code fixed bin;				/* 0 => none,  1 => string,  2 => binary.	*/
dcl  print_train fixed bin;				/* Printer print train characteristic.		*/
dcl  speed bit (3);					/* Tape drive speed characteristics.		*/
dcl  speed_comment char (30) varying;			/* Used to print speed capability.		*/
dcl  statex fixed bin;				/* State of device assignment.		*/
dcl  system_flag bit (1);				/* ON => user wants to be a system process.	*/
dcl  temp_ecode fixed bin (35);
dcl  tracks fixed bin;				/* Tape track characteristic.			*/
dcl  volume_name char (32);				/* Tape or disk volume name.			*/
dcl  wait_flag bit (1);				/* ON => waiting for assignment.		*/


/*		BASED  DATA		*/

dcl  argument char (arg_len) based (arg_ptr);		/* Used to reference argument string. */
dcl af_return_arg			char(af_return_arg_len) varying based (af_return_arg_ptr);

/*		INTERNAL STATIC DATA	*/

dcl  brief_options (13) char (6)			/* Brief form of command options. */
     internal static init ("-dv", "-lg", "-com", "-model", "-tk", "-den",
     "-vol", "-tn", "-ll", "-sys", "-nb", "-wt", "-speed") options(constant);

dcl  long_options (13) char (12)			/* Long  form of command options. */
     internal static init ("-device", "-long", "-comment", "-model", "-track", "-density",
     "-volume", "-train", "-line_length", "-system", "-number", "-wait", "-speed") options(constant);

dcl  option_codes (13) fixed bin			/* Used to describe value argument. */
     internal static init (1, 0, 1, 2, 2, 2, 1, 2, 2, 0, 2, -2, 2) options(constant);

dcl  density_names (5) char (5) varying			/* Tape density capabilities. */
     internal static init ("200 ", "556 ", "800 ", "1600 ", "6250 ") options(constant);

dcl  density_values (5) fixed bin			/* Tape density values. */
     internal static init (200, 556, 800, 1600, 6250) options(constant);

dcl  console_models (4) char (4)			/* Operator's console model names. */
     internal static init ("IBM", "EMC", "SCC", "LCC") options(constant);

dcl  speed_values (3) fixed bin			/* Tape drive speed values. */
     internal static init (75, 125, 200) options(constant);

dcl  speed_names (3) char (4) varying			/* Tape drive speed names. */
     internal static init ("75 ", "125 ", "200 ") options(constant);


/*		EXTERNAL ENTRIES CALLED	*/

dcl  cleanup condition;				/* Used to unassign if trouble. */

dcl (addr, hbound, substr, null) builtin;

dcl (error_table_$action_not_performed,
     error_table_$bad_arg,
     error_table_$badopt,
     error_table_$inconsistent,
     error_table_$noarg,
     error_table_$not_act_fnc,
     error_table_$resource_reserved,
     error_table_$resource_unavailable,
     error_table_$wrong_no_of_args) fixed bin (35) external;

dcl  active_fnc_err_		entry options(variable),
     com_err_			entry options (variable),
     convert_ipc_code_ entry (fixed bin (35)),
     cu_$af_arg_ptr			entry (fixed bin, ptr, fixed bin(21), fixed bin(35)),
     cu_$af_return_arg		entry (fixed bin, ptr, fixed bin(21), fixed bin(35)),
     cu_$arg_ptr			entry (fixed bin, ptr, fixed bin, fixed bin (35)),
     cv_dec_check_			entry (char (*), fixed bin (35)) returns (fixed bin (35)),
     get_argument			entry (fixed bin, ptr, fixed bin(21), fixed bin(35)) variable,
     error_rtn_			entry() options(variable) variable,
     ioa_				entry options (variable),
     ipc_$block			entry (ptr, ptr, fixed bin (35)),
     ipc_$create_ev_chn		entry (fixed bin (71), fixed bin (35)),
     ipc_$delete_ev_chn		entry (fixed bin (71), fixed bin (35)),
     rcp_$assign_device		entry (char (*), ptr, fixed bin (71), char (*), bit (36) aligned, fixed bin (35)),
     rcp_$check_assign		entry (bit (36) aligned, ptr, char (*), fixed bin, fixed bin (35)),
     rcp_$unassign			entry (bit (36) aligned, bit (*), char (*), fixed bin (35)),
     resource_info_$get_dtypex	entry (char (*), char (*), fixed bin, fixed bin (35)),
     timer_manager_$sleep		entry (fixed bin (71), bit (2));

%include rcp_device_info;

%include rcp_tape_info;

%include rcp_disk_info;

%include rcp_printer_info;

%include event_wait_channel;

%include event_wait_info;
%page;
/*
   *
   *	     Begin command:  assign_resource, ar
   *
*/


	device_flag,				/* Now initialize other variables. */
	     long_flag,
	     system_flag,
	     wait_flag = "0"b;

	dtypex,
	     ecode,
	     num_assigned,
	     event_wait_channel.channel_id(1) = 0;

	number = 1;

	comment = " ";

	do i = 1 to hbound (alist, 1);
	     alist (i).rcp_id = "0"b;
	end;
	device_info_ptr = addr (info_buffer);		/* All structures use the same buffer. */

	device_info.version_num = DEVICE_INFO_VERSION_1;			/* Set up assignment data.  Assume same version. */
	device_info.usage_time,			/* These fields not used yet. */
	     device_info.wait_time = 0;
	device_info.device_name = " ";		/* Blank => assign any device of specified type. */
	device_info.model = 0;
	device_info.qualifiers (*) = 0;

	tracks = 0;				/* Initialize device characteristics. */
	density = "0"b;
	volume_name = " ";
	speed = "0"b;
	print_train,
	     line_length = 0;

          /* get command arguments */
	call cu_$af_return_arg (num_args, af_return_arg_ptr, af_return_arg_len, ecode);	
          if ecode = error_table_$not_act_fnc then do;
	   active_fnc = "0"b;
	   get_argument = cu_$arg_ptr;
	   error_rtn_ = com_err_;
	   end;
          else do;					/* active function case			*/
	   active_fnc = "1"b;
	   get_argument = cu_$af_arg_ptr;
	   error_rtn_ = active_fnc_err_;
	   af_return_arg = "false";
	   end;

	call GET_RESOURCE_TYPE;			/* Get required argument. */
	if ecode ^= 0 then goto MAIN_RETURN;

	do argx = 2 to num_args;			/* Process any optional control arguments. */
	     call PROCESS_ARG;			/* Most will be processed in pairs. */
	     if ecode ^= 0 then goto MAIN_RETURN;	/* Was there an error? */
	end;

	call CHECK_DEVICE_INFO;			/* See if device info is valid. */
	if ecode ^= 0 then goto MAIN_RETURN;		/* Is it valid? */

	on cleanup begin;				/* If user quits unassign all devices. */
	     call CLEANUP;
	end;

	call ipc_$create_ev_chn (event_wait_channel.channel_id(1), ecode);
	if ecode ^= 0				/* RCP needs an event channel. */
	then do;					/* But we don't have one. */
	     call convert_ipc_code_ (ecode);
	     call error_rtn_ (ecode, "assign_resource", "Error creating event channel.");
	     goto MAIN_RETURN;
	end;

	do while ((num_assigned < number) & (ecode = 0));
	     call ASSIGN_DEVICE;			/* Try to assign one device. */
	end;

	if ecode ^= 0				/* Was there an error. */
	then goto MAIN_RETURN;			/* Yes. */

       
/*          Successful assignment of resources  */

	if active_fnc then af_return_arg = "true";	/* Active Function case prints no info.		*/
	else do;
	   if (long_flag) & (^device_flag) & (num_assigned > 1)
	   then call ioa_ ("^d devices assigned", num_assigned);

	   do number = 1 to num_assigned;		/* Print info about each assigned device. */
	     device_info_ptr = addr (alist (number).info);
	     call PRINT_DEVICE_INFO;			/* Print info about one device. */
             end;
	end;

	num_assigned = 0;				/* Don't unassign any devices.                    */
MAIN_RETURN:
	call CLEANUP;				/* Clean up event channel.			*/

	return;					/* We are finished.				*/
	

/*
   *
   *	This procedure will attempt to assign one device.
   *	If this device cannot be assigned because no appropriate device is
   *	currently available, then all devices assigned up to that point will
   *	be unassigned.  If the user wants to wait for the assignment(s) then
   *	we will go blocked for one minute and try again.
   *
   */


ASSIGN_DEVICE: procedure;


	     num_assigned = num_assigned + 1;		/* Up count of assigned devices. */
	     device_info_ptr = addr (info_buffer);	/* Use input info structure. */

	     call rcp_$assign_device (device_type, device_info_ptr, event_wait_channel.channel_id(1), comment,
		alist (num_assigned).rcp_id, ecode);
	     if ecode ^= 0				/* Was assignment started OK? */
	     then do;				/* No. */
		if (ecode ^= error_table_$resource_unavailable) &
		     (ecode ^= error_table_$resource_reserved)
		     then do;				/* Error during assignment. */
		     call error_rtn_ (ecode, "assign_resource", "Error assigning ^a device ^a",
			device_type, device_info.device_name);
		     return;
		     end;
		end;
	     device_info_ptr = addr (alist (num_assigned).info); /* Get pointer to output info structure. */
	     device_info.version_num = addr (info_buffer) -> device_info.version_num;
	     device_info.device_name = " ";


ASSIGN_LOOP:					/* Loop until assignment completed. */
	     comment = " ";
	     call rcp_$check_assign (alist (num_assigned).rcp_id, device_info_ptr, comment, statex, ecode);
	     if comment ^= " "			/* Did RCP send a comment? */
	     then if ^active_fnc then call ioa_ ("RCP comment: ^a", comment);

	     goto STATE (statex);			/* Process current state of assignment. */


STATE (0):					/* Assignment completed OK. */
	     return;


STATE (1):					/* Short wait, block until wakeup comes. */
	     call ipc_$block (addr (event_wait_channel), addr (event_data), ecode);
	     if ecode ^= 0				/* Error in blocking is bad. */
	     then do;
		call convert_ipc_code_ (ecode);
		call error_rtn_ (ecode, "assign_resource", "Error waiting for device assignment.");
		return;
	     end;
	     goto ASSIGN_LOOP;			/* Waked up, check assignment again. */


STATE (2):					/* Long wait, don't support this yet. */
	     ecode = error_table_$action_not_performed;


STATE (3):					/* Fatal error. */
	     if (ecode ^= error_table_$resource_unavailable) &
	     (ecode ^= error_table_$resource_reserved)
	     then do;				/* Error during assignment. */
		call error_rtn_ (ecode, "assign_resource", "Error assigning ^a device ^a",
		     device_type, device_info.device_name);
		return;
	     end;

	     if ^wait_flag                                /* Can't get device now, should we wait? */
	     then do;				/* No. */
	          if active_fnc then return;
		call error_rtn_ (ecode, "assign_resource", "Unable at this time to assign ^a device ^a",
		     device_type, device_info.device_name);
		return;
	     end;

/*	Assignment can be made if we wait.  Check to see if we have already
   *	waited too many times.
*/
	     if num_waits = max_num_waits		/* Have we waited to many times? */
	     then do;				/* Yes. */
	          if active_fnc then return;
		call error_rtn_ (ecode, "assign_resource", "Maximum wait of ^d minutes exceeded", max_num_waits);
		return;
	     end;

/*	We will wait for the assignment(s).  First unassign any device already assigned.
*/
	     alist (num_assigned).rcp_id = "0"b;	/* This assignment failed. */
	     do i = 1 to (num_assigned -1);		/* Unassign any devices already assigned. */
		call rcp_$unassign (alist (i).rcp_id, "0"b, "", temp_ecode);
		alist (i).rcp_id = "0"b;		/* Don't use this RCP ID again. */
		if temp_ecode ^= 0
		then do;				/* Error unassigning this device. */
		     call error_rtn_ (temp_ecode, "assign_resource", "Error unassigning device");
		     if ecode = 0 then ecode = temp_ecode;
		end;
	     end;

	     if num_waits = 0			/* Is this the first wait? */
	     then if ^active_fnc then call error_rtn_ (0, "assign_resource", "Waiting for device assignments");

	     num_waits = num_waits + 1;		/* Count number of times we have waited. */
	     num_assigned = 0;			/* No devices now assigned. */

	     call timer_manager_$sleep (60, "11"b);	/* Wait for one minute. */

	     ecode = 0;
	     return;

	end ASSIGN_DEVICE;

/*
   *
   *	This procedure is called to validate the data entered for this device
   *	assignment.  The actual testing performed depends upon the type of
   *	device being assigned.  If everything is OK we will fill in the device
   *	characteristics that go with this device type.
   *
   */


CHECK_DEVICE_INFO: procedure;


	     if (device_flag) & (number > 1)		/* Only one specific device can be assigned. */
	     then do;				/* More than one is an error. */
		ecode = error_table_$inconsistent;
		call error_rtn_ (ecode, "assign_resource", "Attempt to assign device ^a ^d times",
		     device_info.device_name, number);
	     end;

	     device_info.system_flag = system_flag;	/* Tell RCP whether or not this is a system process. */
	     goto DTYPE_CHECK (dtypex);		/* Go check depending upon device type. */


DTYPE_CHECK (1):					/* TAPE */
	     if (tracks = 0) &			/* If no track type specified ... */
	     (volume_name = " ")			/* and no volume specified ... */
	     then tracks = 9;			/* then use default track type. */
	     if (tracks = 7) &			/* Check that tracks and density are OK. */
	     (substr (density, 4, 2) ^= "00"b)
	     then do;				/* 7 track and 1600 is invalid. */
		ecode = error_table_$inconsistent;
		call error_rtn_ (ecode, "assign_resource", "Inconsistent track and density values.");
	     end;
	     tape_info_ptr = device_info_ptr;		/* Get pointer to tape_info structure. */
	     tape_info.version_num = tape_info_version_3; /* newer version than the others */
	     tape_info.tracks = tracks;		/* Fill in tape characteristics. */
	     tape_info.density = density;
	     tape_info.volume_name = volume_name;
	     tape_info.write_flag = "0"b;
	     tape_info.position_index = 0;
	     tape_info.speed = speed;
	     tape_info.unused_qualifier = "0"b;
	     return;


DTYPE_CHECK (2):					/* DISK */
	     disk_info_ptr = device_info_ptr;		/* Get pointer to disk_info structure. */
	     disk_info.volume_name = volume_name;	/* Fill in disk characteristics. */
	     disk_info.write_flag = "0"b;
	     return;


DTYPE_CHECK (3):					/* CONSOLE */
	     if (device_info.device_name ^= " ") &	/* Does user want specific device? */
	     (substr (device_info.device_name, 1, 3) ^= "opc")
	     then do;				/* Yes, but not the correct name. */
		ecode = error_table_$bad_arg;
		call error_rtn_ (ecode, "assign_resource", "Illegal console device name: ^a",
		     device_info.device_name);
	     end;
	     return;


DTYPE_CHECK (4):					/* PRINTER */
	     printer_info_ptr = device_info_ptr;	/* Get pointer to printer_info structure. */
	     printer_info.print_train = print_train;	/* Fill in printer characteristics. */
	     printer_info.line_length = line_length;
	     return;


DTYPE_CHECK (5):					/* PUNCH */
DTYPE_CHECK (6):					/* READER */
	     return;				/* Nothing to do for these device types. */


DTYPE_CHECK (7):					/* SPECIAL */
	     if device_info.device_name = " "		/* Did user specify a device name? */
	     then do;				/* No, for this device type he must. */
		ecode = error_table_$noarg;
		call error_rtn_ (ecode, "assign_resource", "Must specify SPECIAL device name.");
	     end;


	end CHECK_DEVICE_INFO;

/*
   *
   *	This procedure is called when the assignment has been aborted.
   *	If we have an RCP ID we will try to unassign the device we are assigning.
   *	If we have created an event channel then we must delete it.
   *
   */


CLEANUP:	procedure;

      dcl cleanup_code fixed bin (35);

	     do i = 1 to num_assigned;		/* Unassign all assigned devices. */
		if alist (i).rcp_id ^= "0"b		/* If we have an RCPID try to unassign. */
		then call rcp_$unassign (alist (i).rcp_id, "0"b, "", cleanup_code);
	     end;

	     if event_wait_channel.channel_id(1) = 0 then return;	/* Did we created an event channel? */

	     call ipc_$delete_ev_chn (event_wait_channel.channel_id(1), cleanup_code);

          return;

	end CLEANUP;

/*
   *
   *	This procedure is called to get the resource type to be assigned.
   *	The resource type name must be the first argument to this command.
   *
   */



GET_RESOURCE_TYPE: procedure;


	     if num_args < 1			/* Is there a resource type argument. */
	     then do;				/* No. */
		ecode = error_table_$noarg;
		call error_rtn_ (ecode, "assign_resource", "No resource type specified.");
		return;
	     end;

	     call get_argument (1, arg_ptr, arg_len, ecode); /* Get resource type argument. */
	     if ecode ^= 0
	     then do;
		call error_rtn_ (ecode, "assign_resource", "Error getting resource type argument");
		return;
	     end;

	     call resource_info_$get_dtypex (argument, device_type, dtypex, ecode);
	     if ecode ^= 0 then do;
		call error_rtn_ (ecode, "assign_resource", "^a", argument);
		return;
	     end;
	     else return;


	end GET_RESOURCE_TYPE;

/*
   *
   *	This procedure is called to get any value argument associated with this option.
   *	Processing of the value argument depends upon the option code value associated
   *	with this option.  The option code values are:
   *
   *	     0. This option argument has no accompanying value argument.
   *	     1. This option argument has a string type value argument.
   *	     2. This option argument has a binary type value argument.
   *	     (-1, -2) This option argument is optional.
   *
   */


GET_VALUE: procedure (option_num);


dcl  option_num fixed bin;				/* Number that identifies this option. */


	     option_code = option_codes (option_num);	/* Get code value for this option. */

	     if option_code = 0			/* Is there an accompanying argument value? */
	     then return;				/* No, nothing else to do. */

/* Get accompanying argument value. */
	     if argx = num_args			/* Is this the last argument? */
	     then if option_code < 0			/* Must there be a value argument? */
		then do;				/* No. */
		     if option_code = -1 then arg_ptr = null ();
		     else fixed_arg = 0;
		     return;
		end;
		else do;				/* Yes, value argument missing. */
		     ecode = error_table_$wrong_no_of_args;
		     call error_rtn_ (ecode, "assign_resource", "No value argument for ^a", option);
		     return;
		end;

	     argx = argx + 1;			/* Get the next argument. */
	     call get_argument (argx, arg_ptr, arg_len, ecode);
	     if ecode ^= 0
	     then do;
		call error_rtn_ (ecode, "assign_resource", "Error getting argument ^d", argx);
		return;
	     end;

	     if substr (argument, 1, 1) = "-"		/* Is next argument a control option? */
	     then if option_code < 0			/* Must there be a value argument? */
		then do;				/* No, two  control args in a row is OK. */
		     argx = argx - 1;		/* Process this argument over again. */
		     if option_code = -1 then arg_ptr = null ();
		     else fixed_arg = 0;
		     return;
		end;
		else do;				/* Yes, value argument is missing. */
		     ecode = error_table_$wrong_no_of_args;
		     call error_rtn_ (ecode, "assign_resource", "No value argument for ^a", option);
		     return;
		end;

	     if option_code = 1			/* Is argument value a string? */
	     then return;				/* Yes, no conversion necessary. */

/* Convert argument value to binary. */
	     fixed_arg = cv_dec_check_ (argument, badx);
	     if badx ^= 0				/* Argument contains non decimal characters. */
	     then do;
		ecode = error_table_$bad_arg;
		call error_rtn_ (ecode, "assign_resource", " ""^a"" is not a decimal number.", argument);
		return;
	     end;


	end GET_VALUE;

/*
   *
   *	This procedure prints information about one assigned device.
   *
   */


PRINT_DEVICE_INFO: procedure;

	     if (long_flag) | (^device_flag)
	     then call ioa_ ("Device ^a assigned", device_info.device_name);

	     if ^long_flag then return;		/* Does user want all available information? */

	     goto DTYPE_INFO (dtypex);		/* Other info depends upon device type. */


DTYPE_INFO (1):					/* TAPE */
	     call ioa_ ("Model^-=  ^d", device_info.model);
	     tape_info_ptr = device_info_ptr;		/* Use tape specific info. */
	     call ioa_ ("Tracks^-=  ^d", tape_info.tracks);
	     density_comment = "";			/* Clear density comment. */
	     do i = 1 to hbound (density_names, 1);	/* Test for each possiblle density. */
		if substr (tape_info.density, i, 1)
		then density_comment = density_comment || " " || density_names (i);
	     end;
	     call ioa_ ("Densities^-= ^a", density_comment);
	     speed_comment = "";
	     do i = 1 to hbound (speed_names, 1);	/* Test for each possible speed. */
		if substr (tape_info.speed, i, 1)
		then speed_comment = speed_comment || " " || speed_names (i);
	     end;
	     call ioa_ ("Speed^-= ^a", speed_comment);
	     return;


DTYPE_INFO (3):					/* CONSOLE */
	     call ioa_ ("Model^-=  ^a", console_models (device_info.model));
	     return;


DTYPE_INFO (4):					/* PRINTER */
	     call ioa_ ("Model^-=  ^d", device_info.model);
	     printer_info_ptr = device_info_ptr;	/* Use printer specific info. */
	     call ioa_ ("Train^-=  ^d", printer_info.print_train);
	     if printer_info.line_length = -1
	     then call ioa_ ("Line Len^-=  not specified");
	     else call ioa_ ("Line Len^-=  ^d", printer_info.line_length);
	     return;


DTYPE_INFO (2):					/* DISK */
DTYPE_INFO (5):					/* PUNCH */
DTYPE_INFO (6):					/* READER */
DTYPE_INFO (7):					/* SPECIAL */
	     call ioa_ ("Model^-=  ^d", device_info.model);
	     return;				/* No extra information for these device types. */


	end PRINT_DEVICE_INFO;

/*
   *
   *	This procedure is called to process one optional control argument.
   *	Many of the control arguments have an accompanying value argument.
   *	This value must be the next argument.  In this case we will process
   *	the value argument too.
   *
   */


PROCESS_ARG: procedure;


	     call get_argument (argx, arg_ptr, arg_len, ecode);
	     if ecode ^= 0
	     then do;
		call error_rtn_ (ecode, "assign_resource", "Error getting argument ^d", argx);
		return;
	     end;

	     option = argument;			/* Save option argument. */

	     do i = 1 to hbound (long_options, 1);	/* Look for valid option name. */
		if (option = brief_options (i)) |	/* Is it this brief name? */
		(option = long_options (i))		/* Or this long name? */
		then do;				/* Yes, one of them. */
		     call GET_VALUE (i);		/* Get value argument if any. */
		     if ecode ^= 0 then return;	/* Check for errors. */
		     goto OPTION (i);		/* Go process this option. */
		end;
	     end;

	     ecode = error_table_$badopt;		/* Option name not found. */
	     call error_rtn_ (ecode, "assign_resource", "^a", argument);
	     return;


OPTION (1):					/* "-dv" or "-device" */
	     device_info.device_name = argument;	/* Assign a specific device. */
	     device_flag = "1"b;
	     return;


OPTION (2):					/* "-lg" or "-long" */
               if active_fnc then do;			/* -lg isn't allowed in AF case		*/
	        ecode = error_table_$bad_arg;
	        call error_rtn_ (ecode, "assign_resource", "Control arg not allowed for the active function. ^a", argument);
	        end;

	     else long_flag = "1"b;			/* Return all info when device assigned. */
	     return;


OPTION (3):					/* "-com" or "-comment" */
	     comment = argument;			/* Save user's comment to operator. */
	     return;


OPTION (4):					/* "-model" */
	     device_info.model = fixed_arg;
	     return;


OPTION (5):					/* "-tk" or "-track" */
	     if (fixed_arg ^= 9) &			/* Validate value. */
	     (fixed_arg ^= 7)
	     then goto BAD_ARG;
	     tracks = fixed_arg;
	     return;


OPTION (6):					/* "-den" or "-density" */
	     do i = 1 to hbound (density_values, 1);	/* Look for a valid density value. */
		if fixed_arg = density_values (i)
		then do;				/* We found one. */
		     substr (density, i, 1) = "1"b;
		     return;
		end;
	     end;
	     goto BAD_ARG;				/* Invalid value. */


OPTION (7):					/* "-vol" or "-volume" */
	     volume_name = argument;
	     return;


OPTION (8):					/* "-tn" or "-train" */
	     print_train = fixed_arg;
	     return;


OPTION (9):					/* "-ll" or "-line_length" */
	     line_length = fixed_arg;
	     return;


OPTION (10):					/* "-sys" or "-system" */
	     system_flag = "1"b;			/* User wants to be a system process. */
	     return;


OPTION (11):					/* "-nb" or "-number" */
	     number = fixed_arg;			/* Number of similar devices to assign. */
	     if number > hbound (alist, 1)		/* Is number too large? */
	     then goto BAD_ARG;			/* Yes, error. */
	     return;


OPTION (12):					/* "-wt" or "-wait" */
	     wait_flag = "1"b;			/* Remember that user wants to wait. */
	     if (fixed_arg = 0) |			/* If no wait time specified. */
	     (fixed_arg > (24 * 60))			/* Or wait time greater tha allowed max? */
	     then max_num_waits = (24 * 60);		/* Use default of 24 hours. */
	     else max_num_waits = fixed_arg;		/* Use user's wait time. */
	     num_waits = 0;				/* Initialize actual number of waits. */
	     return;


OPTION (13):					/* "-speed" */
	     do i = 1 to hbound (speed_values, 1);	/* look for a valid speed value */
		if fixed_arg = speed_values (i) then do; /* found one */
		     substr (speed, i, 1) = "1"b;
		     return;
		end;
	     end;
	     goto BAD_ARG;


BAD_ARG:
	     ecode = error_table_$bad_arg;
	     call error_rtn_ (ecode, "assign_resource", " ""^a"" is invalid for option ^a", argument, option);


	end PROCESS_ARG;

     end assign_resource;
