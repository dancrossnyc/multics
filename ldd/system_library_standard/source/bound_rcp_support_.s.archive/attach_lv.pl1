/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


attach_lv: alv: procedure;

/*	This program is a command that may be called to attach a logical volume.
   *	Created on 04/07/76 by Bill Silver.
   *
   *	Its calling sequence is:
   *
   *	attach_lv  volume_name
   *
   *	volume_name	The name of the logical volume to be attached.
*/

/* Modified 6/82 by F. W. Martinson to check number of arguments */
/*		AUTOMATIC  DATA		*/

dcl 1 info_buffer like lv_info;			/* An input logical volume info buffer. */

dcl 1 wait_list,					/* Structure used to block. */
    2 num_chans fixed bin,				/* Number of event channels to wait for. */
    2 channel fixed bin (71);				/* The only channel we will use. */

dcl 1 event_data,					/* Event message structure, not used. */
    2 channel_id fixed bin (71),
    2 message fixed bin (71),
    2 sender bit (36),
    2 origin bit (36),
    2 data_ptr ptr;

dcl  arg_len fixed bin;				/* Length of an argument string. */
dcl  arg_ptr ptr;					/* Pointer to an argument string. */
dcl  ecode fixed bin (35);				/* error_table_ code. */
dcl  num_args fixed bin;				/* Number of command arguments. */
dcl  rcp_id bit (36) aligned;				/* RCP ID for this attach operation. */
dcl  statex fixed bin;				/* State of device assignment. */
dcl  volume_name char (32);				/* Volume name. */


/*		BASED  DATA		*/

dcl  argument char (arg_len) based (arg_ptr);		/* Used to reference argument string. */


/*		EXTERNAL ENTRIES CALLED	*/

dcl  cleanup condition;				/* Used to unassign if trouble. */

dcl (addr) builtin;

dcl (error_table_$noarg,
     error_table_$notacted,
     error_table_$too_many_args) fixed bin (35) external;

dcl  com_err_ entry options (variable);
dcl  convert_ipc_code_ entry (fixed bin (35));
dcl  cu_$arg_count entry (fixed bin);
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  ioa_ entry options (variable);
dcl  ipc_$block entry (ptr, ptr, fixed bin (35));
dcl  ipc_$create_ev_chn entry (fixed bin (71), fixed bin (35));
dcl  ipc_$delete_ev_chn entry (fixed bin (71), fixed bin (35));
dcl  rcp_$attach_lv entry (ptr, fixed bin (71), bit (36) aligned, fixed bin (35));
dcl  rcp_$check_attach_lv entry (bit (36) aligned, ptr, fixed bin, fixed bin (35));
dcl  rcp_$detach_lv entry (bit (36) aligned, fixed bin (35));
						/* 	*/
%include rcp_lv_info;
/* 	*/
/*	Begin command:  attach_lv, alv
*/
	ecode,					/* Now initialize variables. */
	     wait_list.channel = 0;
	wait_list.num_chans = 1;

	lv_info_ptr = addr (info_buffer);		/* Set up volume info structure. */

	lv_info.version_num = rlvi_version_1;		/* Assume version. */
	lv_info.usage_time,				/* These fields not used yet. */
	     lv_info.wait_time = 0;
	lv_info.system_flag = "0"b;			/* System process concept not supported yet. */

	call GET_VOLUME_INFO;			/* Get volume name. */
	if ecode ^= 0 then return;

	lv_info.volume_name = volume_name;

	rcp_id = "0"b;				/* No RCP ID yet. */

	on cleanup begin;				/* If user quits detach logical volume. */
	     call CLEANUP;
	end;

	call ipc_$create_ev_chn (wait_list.channel, ecode);
	if ecode ^= 0				/* RCP needs an event channel. */
	then do;					/* But we don't have one. */
	     call convert_ipc_code_ (ecode);
	     call com_err_ (ecode, "attach_lv", "Error creating event channel.");
	     return;
	end;

	call rcp_$attach_lv (lv_info_ptr, wait_list.channel, rcp_id, ecode);
	if ecode ^= 0				/* Was attach started OK? */
	then do;					/* No. */
	     call com_err_ (ecode, "attach_lv", "Error attaching ^a", volume_name);
	     call CLEANUP;
	     return;
	end;

ATTACH_LOOP:					/* Loop until attachment completed. */
	call rcp_$check_attach_lv (rcp_id, lv_info_ptr, statex, ecode);

	goto STATE (statex);			/* Process current state of attachment. */

STATE (0):					/* Attachment completed OK. */
	rcp_id = "0"b;				/* Don't detach now. */
	call CLEANUP;				/* Cleanup event channel. */
	call ioa_ ("^a attached", volume_name);
	return;

STATE (1):					/* Short wait, block until wakeup comes. */
	call ipc_$block (addr (wait_list), addr (event_data), ecode);
	if ecode ^= 0				/* Error in blocking is bad. */
	then do;
	     call convert_ipc_code_ (ecode);
	     call com_err_ (ecode, "attach_lv", "Error waiting for attach.");
	     call CLEANUP;
	     return;
	end;
	goto ATTACH_LOOP;				/* Waked up, check attach again. */

STATE (2):					/* Long wait, don't support this yet. */
	ecode = error_table_$notacted;

STATE (3):					/* Fatal error. */
	call com_err_ (ecode, "attach_lv", "Error attaching ^a", volume_name);
	call CLEANUP;
	return;
						/* 	*/
CLEANUP:	procedure;

/*	This procedure is called when the attachment has been aborted.
   *	If we have an RCP ID we will try to detach the volume we are attaching.
   *	If we have created an event channel then we must delete it.
*/
	     if rcp_id ^= "0"b			/* If we have an RCP ID try to detach. */
	     then call rcp_$detach_lv (rcp_id, ecode);

	     if wait_list.channel = 0 then return;	/* Did we created an event channel? */

	     call ipc_$delete_ev_chn (wait_list.channel, ecode);
	     if ecode ^= 0
	     then do;
		call convert_ipc_code_ (ecode);
		call com_err_ (ecode, "attach_lv", "Deleting event channel.");
	     end;

	end CLEANUP;
						/* 	*/
GET_VOLUME_INFO: procedure;

/*	This procedure is called to get the volume name.
*/
	     call cu_$arg_count (num_args);		/* Get number of arguments. */

	     if num_args ^= 1 then do;		/* Is there a volume name argument. */
		if num_args = 0 then ecode = error_table_$noarg; /* No. */
		else ecode = error_table_$too_many_args;
		call com_err_ (ecode, "attach_lv", "One argument required");
		return;
	     end;

	     call cu_$arg_ptr (1, arg_ptr, arg_len, ecode); /* Get volume name argument. */
	     if ecode ^= 0
	     then do;
		call com_err_ (ecode, "attach_lv", "Error getting volume name argument");
		return;
	     end;

	     volume_name = argument;			/* Save the volume name argument. */

	end GET_VOLUME_INFO;

     end attach_lv;
