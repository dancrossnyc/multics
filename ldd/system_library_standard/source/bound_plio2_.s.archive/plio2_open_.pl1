/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

plio2_open_: proc options (support);

/* Modified 790710 by PCK to fix bug 1845 */
/* Modified 790327 by RAB to use stackframeptr builtin */
/* Modified 780706 by PG to fix close_in_this_static to unthread multiple fsb's properly */
/* Modified 780309 by PG to fix 1706 (sysprint didn't get print attribute if opened explicitly) */
/* Modified 78.01.31 by RAB for close_in_this_static	*/
/* Modified 77.09.19 by RAB to fix 1674 in which get_chars was attempted for I/O modules that didn't support it */
/* Modified 770823 by PG to permit read & write statements on stream files */
/* 77-03-04: changed to support quick pl1 io by adding the "console" bit to the fsb	*/
/* 76-09-08: changed to use iox_$foo call forwarder	*/
/* 76-03-12: changed to get right referencing_dir for search rules in call to iox_$attach */
/* 75-05-27: changed to fix bug 1363 */
/* 74-12-17: modified for bit_string in job_bits,lock checking removed  */
/* 74-12-2: modified for env(stringvalue) */
/* 74.09.12: fixed for add_finish_handler */
/* 73-12-3: updated for new io (iox).  */

/* parameters */

dcl (pspp ptr,
     xname char (*)
     ) parameter;

/* based */

dcl  bch168 char (168) aligned based;
dcl  based_label label based;
dcl 1 fab aligned based,
    2 switch bit (36) aligned,
    2 name char (32) aligned,
    2 (line_size, page_size, buffer_size) fixed bin (17),
    2 ch168p ptr;

/* builtins */

dcl (addr, baseno, bit, fixed, min, null, rel, stackframeptr, string, substr) builtin;

/* entries */

dcl  hcs_$make_ptr entry (ptr, char (*), char (*), ptr, fixed bin (35));
dcl  ioa_ options (variable);
dcl  plio2_recio_$recio_close_ ext entry (ptr);
dcl  plio2_signal_$s_ ext entry (ptr, char (*), char (*), fixed bin (15));
dcl  plio2_signal_$s_r_ ext entry (ptr, char (*), char (*), fixed bin (15));
dcl  com_err_ entry options (variable);
dcl  get_line_length_$switch entry (ptr, fixed bin (35)) returns (fixed bin);
dcl  add_epilogue_handler_ entry (entry, fixed bin (35));
dcl  iox_$find_iocb entry (char (*), ptr, fixed bin (35));
dcl  iox_$open entry (ptr, fixed bin, bit (1) aligned, fixed bin (35));
dcl   iox_$position entry (ptr, fixed bin, fixed bin(21), fixed bin(35));
dcl  iox_$close entry (ptr, fixed bin (35));
dcl  iox_$detach_iocb entry (ptr, fixed bin (35));
dcl  unique_bits_ entry returns (bit (70));
dcl  unique_chars_ entry (bit (*)) returns (char (15));
dcl  iox_$attach_ptr entry (ptr, char (*), ptr, fixed bin (35));
dcl  iox_$err_no_operation entry;

/* external static */

dcl  plio2_data_$max_page_size fixed bin (35) external;

/* internal static */

dcl  begining_of_file fixed bin int static options(constant) initial(-1);
dcl  debug_sw fixed bin (15) static internal init (0);

/* automatic */

dcl  evx entry variable;
dcl  code fixed bin (35);
dcl (psp, fsbp, fabp, fab2p) ptr;
dcl (i, iroute, erno) fixed bin (15);
dcl  title_option bit (1) aligned;
dcl  lnzc_set bit (1) aligned init ("0"b);
dcl  condition char (13) init ("ERROR");
dcl  fab2px ptr;
dcl (default_ps, default_ls) fixed bin (35);
dcl (A18, B18) bit (18) aligned;
dcl  nono_18 bit (18) aligned;
dcl  iocb_name char (32);
dcl  iocb_status fixed bin (35) init (0);
dcl  iocb_p ptr;
dcl  iocb_title char (200);
dcl  iocb_attach_type fixed bin;
dcl  1 temp_file aligned like file_value;
dcl  1 temp_ps aligned like ps;
dcl  fabprime bit (36) aligned;

/* include files */

%include stack_frame;
%include pl1_file_value;
%include plio2_fsb;
%include plio2_fsbr;
%include plio2_ps;
%include iocb;

/* program */

/* 	OPEN ENTRIES  */

open_implicit_: entry (pspp);
	psp = pspp;
	fsbp = ps.fsbp;
	fab2p = ps.fab2p;
	iroute = 4;
	go to open_question;

open_explicit_: entry (pspp);

	iroute = 1;
	plio2_data_$pspstat, psp = pspp;

	plio2_data_$fsbpstat, ps.fsbp, fsbp = ps.source_p -> file_value.fsb_ptr;
	plio2_data_$fab2pstat, ps.fab2p, fab2p = ps.special_list_p;
	ps.file_p = ps.source_p;

	addr (ps.ab_return) -> based_label = EXIT;

open_question:
	if fsb.switch.open then go to check;

/* thread on first opening and at the
   same time store the declared attributes
   and filename in the FSB.

   To get new declared attributes (for debugging)
   RENEW by unthreading, zeroing FSB-attributes */

	if fsb.switch.threaded
	then fsb.declared_attributes (1) = fsb.declared_attributes (1) | ps.source_p -> file_value.fab_ptr -> fab.switch;
	else do;
	     fsb.fsb_thread = plio2_data_fsb_thread_;

	     if fsb.fsb_thread = null then
		do;
		evx = close_all_;
		call add_epilogue_handler_ (evx, code);
		if code ^= 0
		then call com_err_ (code, "plio2_$open", "Unable to add epilogue handler.");
	     end;
	     fabp = ps.source_p -> file_value.fab_ptr;
	     fsb.declared_attributes (1) = fabp -> fab.switch;
	     fsb.filename = fabp -> fab.name;

/* avoid a LOOP in the THREAD as surely as easily
   possible by setting the "threaded" bit here.  */

	     plio2_data_fsb_thread_ = fsbp;
	     fsb.switch.threaded = "1"b;
	end;

	title_option = "0"b;			/* but we will look to see if there is one */
	if fab2p -> fab.name ^= "" then
	     do;
	     title_option = "1"b;
	     fsb.title = fab2p -> fab.name;
	end;
	else fsb.title = fsb.filename;

	if iroute = 4 then goto no_title168;		/* no title with implicit opening */
	if substr (fab2p -> fab.switch, 3, 1) = "0"b then goto no_title168; /* compiled with version 1 of PL1  */
	if fab2p -> fab.buffer_size = -111111111111011101b then goto no_title168; /* corrects for bug in
						   early version 2 PL1 compilers */
	if fab2p -> fab.ch168p = null then goto no_title168; /* no title option */
	fsb.path_name = fab2p -> fab.ch168p -> bch168;	/* title168 is correctly present - use it */
	title_option = "1"b;
	goto title_is_set;
no_title168:
	if ^title_option then fsb.path_name = "vfile_ " || fsb.filename;
	else fsb.path_name = fsb.title;
title_is_set:

	if substr (fsb.declared_attributes (1), 28, 1) /* internal */ then fsb.title = unique_chars_ (unique_bits_ ());
	else fsb.title = fsb.filename;
	iocb_name = fsb.title;

/* COMMENT ON ALL OF THESE NAMES:

   at this point we have:

   fsb.filename = declared file name
   fsb.title    = (a) fsb.filename if external
   = (b) uniquename if internal
   and is to be used as iocb_name (for find_iocb)
   fsb.path_name= (a) "vfile_ "||fsb.filename if no title option
   = (b) TITLE if title option is specified
   and is to be used as iocb_title (for iox_$attach_iocb)

   later, for the canonical sysin and sysprint, fsb.path_name will
   be changed to "syn_ user_input" or "syn_ user_output".
   */

	if iroute = 1
	then fab2px = fab2p;			/* explicit open - use all attributes */
	else do;
	     fabprime = fab2p -> fab.switch;
	     fab2px = addr (fabprime);

	     if substr (fsb.declared_attributes (1), 8, 1) /* update */
	     then if substr (string (ps.job), 16, 2)	/* read,write */
		then substr (fabprime, 6, 3) = "000"b;	/* in,out,up */
	end;
	string (fsb.switch) = (fsb.declared_attributes (1)|
	     fab2px -> fab.switch|"000000000000000000000000000010010000"b)
	     &"111111111111111111110001000111110111"b;

/* zero out:	eof,prelim_eof,transmit_error,detach,iox_close,te_hold,buffer_in_use  */
/* set to one:	threaded,emptyline		*/

/*   TABLES for IMPLICATIONS,DEFAULTS,CONFLICTS, "NONOS"    */

dcl 1 open_bits (27) aligned static internal,
    2 (
     b18 init (
						/* [1-15] IMPLICATIONS  */
     "1"b, "01"b, "1010000000"b, "0001"b, "1000100000"b, "0"b,
     "000100111011011"b, "0000000100010"b, "000000001"b,
     "0000000001"b, "00000000001"b, "000000000001"b, "0000000000001"b,
     "00000000100001"b, "000000000000001"b,

/* [16-20] DEFAULTS  */
     "0111"b,					/* 16 - input, output, update */
     "0000101"b,					/* 17 - stream, record */
     "000010011"b,					/* 18 - stream(!?), sequential, direct */
     "0000000000011"b,				/* 19 - not_used_2, stringvalue */
     "00000100000001"b,				/* 20 - notkeyed, keyed */

/* [21-27] NONOs  */
     "01"b,					/* 21 - input */
     "001"b,					/* 22 - output */
     "000000001"b,					/* 23 - interactive */
     "000001"b,					/* 24 - notkeyed */
     "000000000001"b,				/* 25 - not_used_2 */
     "00000000000001"b,				/* 26 - keyed */
     "00001"b),					/* 27 - stream */

     c18 init (

/* [1-6] [7-15] CONFLICTS  */
     "011"b, "0101"b, "0011"b, "0000101"b, "000000011"b,
 (10) (1)"0"b,

/* [16-20] DEFAULTS  */
     "01"b,					/* 16 - input */
     "00001"b,					/* 17 - stream */
     "00000001"b,					/* 18 - sequential */
     "00000000001"b,				/* 19 - not_used_1 */
     "000001"b,					/* 20 - notkeyed */

/* [21-27] NONOs  */
     "0001111"b,					/* 21 - write, rewrite, delete, locate */
     "001011"b,					/* 22 - read, rewrite, delete */
     "00000000000010011"b,				/* 23 - ignore, nokey, nokeyfrom */
     "0000000111"b,					/* 24 - key, keyto, keyfrom */
     "000000000010001"b,				/* 25 - set, nofrom */
     "00000000000000001"b,				/* 26 - nokeyfrom */
     "0000111"b)					/* 27 - rewrite, delete, locate */
     ) bit (18) unaligned;

	A18 = substr (string (fsb.switch), 5, 15);	/* NOTE: begins on bit number 5 */
	B18 = "0"b;

/* Open step 2. Supply implied attributes */

	do i = 1 to 15;
	     if A18 & open_bits.b18 (i) then substr (B18, i, 1) = "1"b;
	end;

/* Open step 3. Supply default attributes */

	do i = 16 to 20;
	     if (B18 & open_bits.b18 (i)) = "0"b then B18 = (B18 | open_bits.c18 (i));
	end;

/* Open step 4. Supply print attribute. */

	if (fsb.filename = "sysprint") & substr (B18, 5, 1) /* stream */ & substr (B18, 3, 1) /* output */
	& ^fsb.switch.internal
	then substr (B18, 1, 1) = "1"b;		/* PRINT */

/* Open step 5. Check for a consistent file description. */

	do i = 1 to 5;
	     if (B18 & open_bits.c18 (i)) = open_bits.c18 (i) then
		do;
		erno = 109+i;

/* 110: input and output conflict
   111: input and update conflict
   112: output and update conflict
   113: record and stream conflict
   114: sequential and direct conflict
   115: forwards and backwards conflict - NOT USED ANY MORE
   */
		go to check;
	     end;
	end;

	if ((B18 & "0000001001"b) = "0000001001"b)	/* record and interactive */
	| ((B18 & "0100000001"b) = "0100000001"b)	/* input  and interactive */
	| ((B18 & "000010000000100"b) = "000010000000100"b) /* stream and stringvalue */
	then do;
	     erno = 108;
						/* file cannot be opened: interactive may apply to stream output only,
						   stringvalue may apply to record i/o only	*/
	     goto check;
	end;

	nono_18 = "0"b;

	do i = 21 to 27;
	     if (B18 & open_bits.b18 (i)) then nono_18 = (nono_18 | open_bits.c18 (i));
	end;
	if ((B18 & "000101"b) = "000101"b) then nono_18 = (nono_18 | "0001001"b);
						/* notkeyed and update --> no write or locate */

	substr (string (fsb.switch), 5, 15) = substr (B18, 1, 15);
	substr (string (fsb.nono), 1, 18) = substr (nono_18, 1, 18);

	if fsb.filename = "sysprint"
	then if fsb.switch.print
	     then if ^title_option
		then if ^fsb.switch.internal
		     then fsb.path_name = "syn_ user_output";

	if fsb.filename = "sysin"
	then if fsb.switch.input
	     then if fsb.switch.stream
		then if ^title_option
		     then if ^fsb.switch.internal
			then fsb.path_name = "syn_ user_input";

	call iox_$find_iocb (iocb_name, iocb_p, iocb_status);
	if iocb_status ^= 0 then
	     do;
	     erno = 104;				/* call to iox_$find_iocb fails */
	     goto attach_fails;
	end;

	fsb.iocb_p = iocb_p;

	if iocb_p -> iocb.attach_descrip_ptr = null then
	     do;
	     iocb_title = fsb.path_name;

	     do sp = stackframeptr()
		     repeat (sp -> stack_frame.prev_sp)
		     while (sp -> stack_frame_flags.support);
	     end;
	     call iox_$attach_ptr (iocb_p, iocb_title, sp -> stack_frame.entry_ptr, iocb_status);

	     if iocb_status ^= 0 then
		do;
		erno = 105;			/* call to attach_iocb fails */
		goto attach_fails;
	     end;
	     else fsb.switch.detach = "1"b;

	end;

	if iocb_p -> iocb.open_descrip_ptr = null then
	     do;
	     if fsb.switch.input then iocb_attach_type = 1; else
	     if fsb.switch.output then iocb_attach_type = 2; else
	     iocb_attach_type = 3;
	     if fsb.switch.record then
		if fsb.switch.direct then iocb_attach_type = iocb_attach_type+10;
		else if fsb.switch.keyed then iocb_attach_type = iocb_attach_type+7;
		else iocb_attach_type = iocb_attach_type+3;
	     if iocb_attach_type = 6 then iocb_attach_type = 7;
						/* iox_ has 4 io types: in,out,up, and in-out */

	     call iox_$open (iocb_p, iocb_attach_type, "0"b, iocb_status);
	     if iocb_status ^= 0 then
		do;
		erno = 106;			/* call to iocb.open fails */
		goto attach_fails;
	     end;
	     fsb.switch.iox_close = "1"b;
	     goto is_iox_opened;
	end;

/* Here we may test compatibility for data-sets already opened.
   Not implemented 73-12-3 */

/* AG94 requires that files with the input stream or record sequential (input | update) attributes be
   positioned to the beginning of the file.  If iox_$open has been called this was already done, otherwise
   iox_$position must be called. */


	if (fsb.stream & fsb.input) | (fsb.record & fsb.sequential & (fsb.input | fsb.update))
	then call iox_$position (iocb_p, begining_of_file, 0, iocb_status);

is_iox_opened:
	if fsb.switch.record then
	     do;
	     string (fsbr.recio) = "000"b;
	     string (fsbr.inbuf_sw) = "0"b;
	     string (fsbr.outbuf_sw) = "0"b;
	     fsbr.lnzc = 0;
	     fsbr.outbuf_key = "";
	     fsbr.key_saved = "";
	end;

	else do;

	     i = get_line_length_$switch (iocb_p, iocb_status);
	     if iocb_status = 0
	     then do;
		default_ls = i;
		default_ps = plio2_data_$max_page_size;
		fsb.console = "1"b;			/* if there was a meaningful line len, we will want to use get_line, not get_chars */
	     end;
	     else do;
		default_ls = 132;
		default_ps = 60;
		if iocb_p -> iocb.get_chars = iox_$err_no_operation
		then fsb.console = "1"b;		/* use get_line for input */
		else fsb.console = "0"b;		/* use get_chars for input */
	     end;


	     if fab2p -> fab.line_size>0 then fsb.lsize = fab2p -> fab.line_size;
	     else fsb.lsize = default_ls;

	     if fsb.switch.print then
		do;
		if fab2p -> fab.page_size>0 then fsb.psize = fab2p -> fab.page_size;
		else fsb.psize = default_ps;
	     end;
	     else fsb.psize = 0;			/* 0 for 'not a print file'  */

/* AG94 specifies that if a linesize is given then
   the file _m_u_s_t have the output attribute;
   and that if a pagesize is given then it _m_u_s_t have
   the print attribute.  The punishment is unspecified
   and none is supplied here.  */

	     fsb.blc,
		fsb.kol = 0;
	     fsb.lineno,
		fsb.pageno,
		fsb.bnc = 1;
	     if fsb.print then fsb.lsep = 4;		/* set up for initial PAGE option */
	     else fsb.lsep = 1;			/* set up for GET LIST initial comma */


	     fsb.bptr = addr (fsb.buffer);
	     fsb.bsize = 848;

	     if fsb.stream
	     then if fsb.output
		then fsb.limit = min (fsb.bsize, fsb.lsize);
	end;
						/*  C A U T I O N :

						   check this value against
						   fsb.incl.pl1 at fsb.buffer.

						   Size is in bytes.     */

	fsb.switch.open = "1"b;
	goto check;

attach_fails:
	if debug_sw = 1 then call ioa_ ("iocb_status=^d", iocb_status);
	fsb.lnzc = iocb_status;
	lnzc_set = "1"b;

check:
	if ^fsb.switch.open then
	     do;
	     if fsb.switch.iox_close then call iox_$close (iocb_p, iocb_status);
	     if iocb_status ^= 0
	     then do;
		fsb.lnzc = iocb_status;
		lnzc_set = "1"b;
	     end;

	     if fsb.switch.detach then call iox_$detach_iocb (iocb_p, iocb_status);
	     if iocb_status ^= 0
	     then do;
		fsb.lnzc = iocb_status;
		lnzc_set = "1"b;
	     end;
	     if ^lnzc_set then fsb.lnzc = 0;
	     call plio2_signal_$s_ (psp, "UNDEFINEDFILE", "plio2_open_", erno);
	end;
	if iroute = 1 then return;

	if ^fsb.switch.open then
	     do;
	     condition = "ERROR";
	     erno = 102;
						/* file not open after return from handler of undefinedfile */
	     call plio2_signal_$s_r_ (psp, condition, "plio2_open_", erno);
	end;
	return;

debug_open: entry;
	debug_sw = 1-debug_sw;
	return;


clear_sysprint_: entry;

	call hcs_$make_ptr (null, "stat_", "sysprint.fsb", fsbp, code);
	if fsbp = null then return;

	if fsb.switch.open
	then if ^fsb.switch.internal
	     then if fsb.switch.stream
		then if fsb.switch.output
		     then do;
			fsb.bnc = 1;
			fsb.lineno = 1;
			fsb.pageno = 1;
			fsb.kol = 0;
			return;
		     end;
	return;

set_pageno: entry (isfile, page_num);
dcl  isfile (2) ptr;
dcl  page_num fixed bin (15);
dcl  pnln fixed bin (15);
	pnln = 1;
	goto pnlnjoin;

get_pageno: entry (isfile) returns (fixed bin (15));
	pnln = 2;
	goto pnlnjoin;

get_lineno: entry (isfile) returns (fixed bin (15));
	pnln = 3;

pnlnjoin:
	fsbp = isfile (2);
	if ^fsb.switch.open then
	     do;
	     erno = 141;
get_lineno_sig:
	     call plio2_signal_$s_ (null, "ERROR", "get_lineno", erno);
	     if pnln = 1 then return;
	     else return (0);
	end;
	if ^fsb.switch.print then
	     do;
	     erno = 142;
	     goto get_lineno_sig;
	end;
	if pnln = 1 then
	     do;
	     fsb.pageno = page_num;
	     return;
	end;
	if pnln = 2 then return (fsb.pageno);
	else return (fsb.lineno);
						/*  	CLOSE ENTRIES  */

close_:	entry (pspp);
	psp = pspp;
	plio2_data_$pspstat = psp;
	fsbp = ps.source_p -> file_value.fsb_ptr;
	iroute = 10;
	go to close10;

closebyname_:
close_by_name_: entry (xname);
dcl  msg_sw bit (1) ;
dcl  found_name bit (1);
	msg_sw = "0"b;
by_name_join:
	found_name = "0"b;

	psp = null;
dcl  name32 char (32) aligned;
	name32 = xname;
	iroute = 12;
	fsbp = plio2_data_fsb_thread_;
	do while (fsbp ^= null);
	     if name32 = fsb.filename then
		do;
		go to close10;
by_name_rejoin:	found_name = "1"b;
	     end;
	     fsbp = fsb.fsb_thread;
	end;

	if found_name then return;
	if ^msg_sw then call ioa_ ("filename ^a not found", xname);
	else by_name_code = /* error_table_$no_file */ 1 ;
	return;
close_by_name_sys_: entry (xname, by_name_code);
dcl  by_name_code fixed bin (35);
	by_name_code = 0;
	msg_sw = "1"b;
	go to by_name_join;

closeall_:
closeall:
close_all:
close_all_: entry;
	psp = null;
	iroute = 11;
	fsbp = plio2_data_fsb_thread_;
	do while (fsbp ^= null);
close10:
	     plio2_data_$fsbpstat = fsbp;
	     if fsb.switch.open then
		do;
		if fsb.switch.record
		then do;
		     temp_file.fab_ptr = null;
		     temp_file.fsb_ptr = fsbp;
		     temp_ps.source_p = addr (temp_file);
		     call plio2_recio_$recio_close_ (addr (temp_ps));
		end;
		iocb_p = fsb.iocb_p;
		if fsb.switch.iox_close then call iox_$close (iocb_p, iocb_status);
		if iocb_status ^= 0
		then do;
		     fsb.lnzc = iocb_status;
		     lnzc_set = "1"b;
		end;
		if fsb.switch.detach then call iox_$detach_iocb (iocb_p, iocb_status);
		if iocb_status ^= 0
		then do;
		     fsb.lnzc = iocb_status;
		     lnzc_set = "1"b;
		end;

		fsb.switch.open = "0"b;
	     end;
	     if iroute = 10 then return;
	     if iroute = 12 then go to by_name_rejoin;
	     fsbp = fsb.fsb_thread;
	end;
	return;

listfiles:
	entry ();

	fsbp = plio2_data_fsb_thread_;
	call ioa_ ("thread:^p", fsbp);
	do while (fsbp ^= null);
	     call ioa_ ("  fsbp=^p,name=^a", fsbp, fsbp -> fsb.filename);
	     fsbp = fsbp -> fsb.fsb_thread;
	end;

EXIT:	return;

get_fsb_thread: entry (pspp);
	pspp = plio2_data_fsb_thread_;
	return;

set_fsb_thread: entry (pspp);
	plio2_data_fsb_thread_ = pspp;
	return;

/* This procedure closes and unthreads all fsb's contained in a specified static section. */

close_in_this_static: entry (start_thread, static_ptr, static_len);

dcl  start_thread ptr,				/* start of fsb thread (Input/Output) */
     static_ptr ptr,				/* start of static section (Input) */
     static_len fixed bin (18);			/* length of static section in words (Input) */

dcl (static_seg_no, static_start, static_end) bit (18) aligned;
dcl  last ptr;

	static_seg_no = baseno (static_ptr);
	static_start = rel (static_ptr);
	static_end = bit (fixed (fixed (static_start, 18) + static_len, 18), 18);

	psp = null;
	last = null;

	do fsbp = start_thread repeat fsbp -> fsb.fsb_thread while (fsbp ^= null);
	     if baseno (fsbp) = static_seg_no
	          & rel (fsbp) >= static_start & rel (fsbp) < static_end
	     then do;
		     if fsbp -> fsb.switch.open
		     then do;
			temp_file.fab_ptr = null;
			temp_file.fsb_ptr = fsbp;
			temp_ps.source_p = addr (temp_file);
			call close_ (addr (temp_ps));
		     end;

		     if last ^= null
		     then last -> fsb.fsb_thread = fsbp -> fsb.fsb_thread;
		     else start_thread = fsbp -> fsb.fsb_thread;
		end;
	     else last = fsbp;
	end;

	return;

     end /* plio2_open_ */;
