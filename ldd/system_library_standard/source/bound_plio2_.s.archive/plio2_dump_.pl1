/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* Modified 9 October 1980 by M. N. Davidoff to fix 1978 (doesn't compile because nono_word had wrong number of initial list
	elements).
*/
/* format: style3 */
plio2_dump_:
     procedure;

/* parameters */

dcl	OF		char (*);
dcl	SN		char (*);

/* automatic */

dcl	fsbp		ptr;
dcl	i		fixed bin;
dcl	psp		ptr;

/* based */

dcl	fsb_buffer	char (fsb.bsize) based (fsb.bptr);

/* builtin */

dcl	(hbound, length, low, max, maxlength, min, null, string, substr)
			builtin;

/* entry */

dcl	ioa_$ioa_switch	entry options (variable);
dcl	octptr		entry (char (*), char (*)) returns (ptr);

/* internal static */

dcl	switch_word	(36) char (16) varying static internal options (constant)
			init ("zot(1)", "zot(2)", "version_2", "open", "print", "input", "output", "update", "stream",
			"notkeyed", "record", "sequential", "direct", "interactive", "not_used_1", "not_used_2",
			"stringvalue", "keyed", "namelist", "implementation", "not_used_4", "transmit_error",
			"buffer_in_use", "copy", "detach", "te_hold", "not_used_5", "internal", "threaded",
			"fsb_in_use", "console", "emptyline", "iox_close", "xxx4", "xxx5", "xxx6");

dcl	nono_word		(18) char (12) varying static internal options (constant)
			init ("bit_string", "not_used_3", "read", "write", "rewrite", "delete", "locate", "key",
			"keyto", "keyfrom", "set", "into", "ignore", "from", "nofrom", "nokey", "nokeyfrom", "nolock");

dcl	job_word		(36) char (16) varying static internal options (constant)
			init ("explicit_file", "string", "varying_string", "data", "edit", "list", "get", "put", "page",
			"line", "skip", "copy", "p1p2", "bit_string", "char_string", "read", "write", "rewrite",
			"delete", "locate", "key", "keyto", "keyfrom", "set", "into", "ignore", "from", "version(1)",
			"version(2)", "version(3)", "version(4)", "version(5)", "version(6)", "not_byte_buffer", "pad1",
			"packed_ptr");

dcl	ps_switch_word	(4) char (16) varying internal static options (constant)
			initial ("first_field", "file", "transmit_error", "semi_sep");

/* external static */

dcl	iox_$error_output	ptr external static;

%include plio2_fsb;
%include plio2_fsbr;
%include plio2_ps;
%include plio2_psr;

/* program */

setfsbp:
     entry (SN, OF);

	plio2_data_$fsbpstat = octptr (SN, OF);

	return;

setpsp:
     entry (SN, OF);

	plio2_data_$pspstat = octptr (SN, OF);

	return;

filelist:
     entry;

	call ioa_$ioa_switch (iox_$error_output, "List of files open or opened:");

	do fsbp = plio2_data_fsb_thread_ repeat fsbp -> fsb.fsb_thread while (fsbp ^= null);
	     call ioa_$ioa_switch (iox_$error_output, "fspb: ^p, filename: ^a^[, open pathname: ^a^;^s^]", fsbp,
		fsb.filename, fsb.switch.open, fsb.path_name);
	end;

	call ioa_$ioa_switch (iox_$error_output, "");

	return;

dgfsb:
     entry (SN, OF);

	fsbp = octptr (SN, OF);
	goto dfsbcommon;

dcfsb:
     entry;

	fsbp = plio2_data_$fsbpstat;

dfsbcommon:
	call ioa_$ioa_switch (iox_$error_output, "fsbp: ^p", fsbp);
	if fsbp = null
	then return;

	call ioa_$ioa_switch (iox_$error_output, "filename: ^a", validate ((fsb.filename)));
	call ioa_$ioa_switch (iox_$error_output, "title: ^a", validate (fsb.title));

	if fsb.filename ^= """get_string_option""" & fsb.filename ^= """put_string_option"""
	then call ioa_$ioa_switch (iox_$error_output, "pathname: ^a", validate (fsb.path_name));

	call print_switches ("attributes", string (fsb.switch), switch_word);
	call ioa_$ioa_switch (iox_$error_output, "bsize: ^d, thread: ^p, DA: ^w", fsb.bsize, fsb.fsb_thread,
	     fsb.declared_attributes (1));

	if fsb.switch.record
	then do;
		call print_switches ("forbidden operations", string (fsb.nono), nono_word);
		call ioa_$ioa_switch (iox_$error_output,
		     "^[^[Current record exists.^;Current record deleted.^]^;^sNo current record.^]",
		     fsbr.recio.rec_exists, fsbr.recio.rec_valid);

		if fsbr.recio.buffer_used
		then call ioa_$ioa_switch (iox_$error_output, "buffer_used");

		if fsbr.switch.keyed
		then call ioa_$ioa_switch (iox_$error_output, "key_saved: ""^v^a""", length (fsbr.key_saved),
			fsbr.key_saved);

		if fsbr.inbuf_sw.exists
		then do;
			call ioa_$ioa_switch (iox_$error_output, "inbuf_exists^[ free^]^[ in_use^]", fsbr.inbuf_sw.free,
			     fsbr.inbuf_sw.use);
			call ioa_$ioa_switch (iox_$error_output, "max: ^d, cur: ^d, ptr: ^p", fsbr.inbuf_maxlen,
			     fsbr.inbuf_curlen, fsbr.inbuf_ptr);
		     end;
		else call ioa_$ioa_switch (iox_$error_output, "no inbuf");

		if fsbr.outbuf_sw.exists
		then do;
			call ioa_$ioa_switch (iox_$error_output, "outbuf_exists^[ free^]^[ in_use^]",
			     fsbr.outbuf_sw.free, fsbr.outbuf_sw.use);
			call ioa_$ioa_switch (iox_$error_output, "max: ^d, cur: ^d, ptr: ^p", fsbr.outbuf_maxlen,
			     fsbr.outbuf_curlen, fsbr.outbuf_ptr);

			if fsbr.outbuf_sw.use & fsbr.switch.keyed
			then call ioa_$ioa_switch (iox_$error_output, "outbuf_key: ""^v^a""", length (fsbr.outbuf_key),
				fsbr.outbuf_key);
		     end;
		else call ioa_$ioa_switch (iox_$error_output, "no outbuf");
	     end;

	else do;
		call ioa_$ioa_switch (iox_$error_output, "lsep: ^d, blc: ^d, bnc: ^d", fsb.lsep, fsb.blc, fsb.bnc);
		call ioa_$ioa_switch (iox_$error_output, "bptr: ^p, kol: ^d", fsb.bptr, fsb.kol);

		if fsb.switch.stream
		then call ioa_$ioa_switch (iox_$error_output, "limit: ^d", fsb.limit);

		if fsb.switch.output
		then call ioa_$ioa_switch (iox_$error_output, "lsize: ^d", fsb.lsize);

		if fsb.switch.print
		then call ioa_$ioa_switch (iox_$error_output, "lineno: ^d, pageno: ^d, psize: ^d", fsb.lineno, fsb.pageno,
			fsb.psize);

		i = min (max (fsb.blc, fsb.bnc - 1), 20);
		if i > 0
		then call ioa_$ioa_switch (iox_$error_output, "buffer: ""^v^a""", i, substr (fsb_buffer, 1, i));
	     end;

	call ioa_$ioa_switch (iox_$error_output, "");

	return;

dgps:
     entry (SN, OF);

	psp = octptr (SN, OF);
	goto pscommon;

dcps:
     entry;

	psp = plio2_data_$pspstat;

pscommon:
	call ioa_$ioa_switch (iox_$error_output, "psp: ^p", psp);
	if psp = null
	then return;

	if ps.job.read | ps.job.write | ps.job.rewrite | ps.job.delete | ps.job.locate
	then do;
		call print_switches ("job", string (ps.job), job_word);
		call ioa_$ioa_switch (iox_$error_output, "keytemp: ^a", validate_vs (psr.keytemp));
		call ioa_$ioa_switch (iox_$error_output, "var_p: ^p, set_p_p: ^p, source_p: ^p", psr.variable_p,
		     psr.set_p_p, psr.source_p);
		call ioa_$ioa_switch (iox_$error_output, "number: ^d, variable_bitlen: ^d", psr.number,
		     psr.variable_bitlen);
		call ioa_$ioa_switch (iox_$error_output, "file_p: ^p, fsbp: ^p, auxp: ^p, fabp: ^p, fab2p: ^p",
		     psr.file_p, psr.fsbp, psr.auxp, psr.fabp, psr.fab2p);
	     end;

	else do;
		call ioa_$ioa_switch (iox_$error_output, "sfp: ^p, STTp: ^p, STBp: ^p", ps.stack_frame_p, ps.ST_top_p,
		     ps.ST_block_p);
		call ioa_$ioa_switch (iox_$error_output, "format_area_p: ^p, ss_list_p: ^p", ps.format_area_p,
		     ps.ss_list_p);
		call ioa_$ioa_switch (iox_$error_output, "source_p: ^p, special_list_p: ^p, copy_file_p: ^p", ps.source_p,
		     ps.special_list_p, ps.copy_file_p);
		call print_switches ("job", string (ps.job), job_word);
		call ioa_$ioa_switch (iox_$error_output, "number: ^d", ps.number);
		call ioa_$ioa_switch (iox_$error_output, "value_p: ^p, descriptor: ^w, length: ^d, offset: ^w",
		     ps.value_p, ps.descriptor, ps.length, ps.offset);
		call ioa_$ioa_switch (iox_$error_output, "prep: ^d, new_format: ^d", ps.prep, ps.new_format);
		call print_switches ("ps.switch", substr (string (ps.switch), 1, hbound (ps_switch_word, 1)),
		     ps_switch_word);
		call ioa_$ioa_switch (iox_$error_output, "file_p: ^p, fsbp: ^p, auxp: ^p", ps.file_p, ps.fsbp, ps.auxp);
		call ioa_$ioa_switch (iox_$error_output, "fabp: ^p, fab2p: ^p", ps.fabp, ps.fab2p);
		call ioa_$ioa_switch (iox_$error_output, "vp: ^p, descr: ^w, start_copy: ^d", ps.vp, ps.descr,
		     ps.start_copy);
	     end;

	call ioa_$ioa_switch (iox_$error_output, "");

	return;

print_switches:
     procedure (title, bits, names);

dcl	title		char (*);
dcl	bits		bit (*);
dcl	names		(*) char (*) varying;

dcl	i		fixed bin;
dcl	line		char (72) varying;

	if bits = ""b
	then return;

	line = title || ":";
	do i = 1 to length (bits);
	     if substr (bits, i, 1)
	     then if length (line) + 1 + length (names (i)) <= maxlength (line)
		then line = line || " " || names (i);
		else do;
			call ioa_$ioa_switch (iox_$error_output, "^a", line);
			line = (5)" " || names (i);
		     end;
	end;

	call ioa_$ioa_switch (iox_$error_output, "^a", line);
     end print_switches;

validate:
     procedure (str) returns (char (256) varying);

dcl	str		char (*);

	if str = low (length (str))
	then return ("Unset string.");
	else return (str);
     end validate;

validate_vs:
     procedure (arg_str) returns (char (256) varying);

dcl	arg_str		char (*) varying;

	if length (arg_str) > maxlength (arg_str)
	then return ("Unset string.");
	else return (arg_str);
     end validate_vs;

     end plio2_dump_;
