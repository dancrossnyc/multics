/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* ******************************************************
   *                                                    *
   *					      *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

plio2_pdt_:
put_value_data_:proc(pspp) options(support);








% include plio2_ident;
/* updated 10-14-71 */

	go to start;


	dcl (pspp,psp,sslp ) ptr;
	dcl (offset,i,ii) fixed bin(15);
	dcl idesc bit(36);

	dcl (addr,addrel,bit,divide,fixed,null,substr) builtin;
	dcl plio2_put_util_$put_field_ ext entry(ptr,ptr,fixed bin(15));
	dcl plio2_put_util_$put_prep_ ext entry(ptr);
	dcl plio2_ldo_$ldo_for_data ext entry(ptr);
	dcl plio2_signal_$s_ ext entry(ptr,char(*),char(*),fixed bin(17));

	dcl plio2_sym_to_desc ext entry(ptr,ptr,ptr,ptr) returns(bit(36) aligned);
% include plio2_ps;

/*  */




% include runtime_symbol;


	dcl identifier_string char(256) aligned;
	dcl char_buf char(1000) unaligned based;
	dcl name_string char(512) varying;
	dcl ssl(100) fixed bin(15) based;
	dcl jtype fixed bin(12);
	dcl isize fixed bin(35);
	dcl ( dfxb15 init("100000100000000000000000000000001111"b),
	      dfxd63 init("100100100000000000000000000000111111"b) ) bit(36) static internal;
	dcl subscr_dec char(64) aligned;
	dcl icode fixed bin(15);
	dcl (last_node_p,l1_p,name_p,stack_frame(17) based,sym_p,sym_q,new_sp) ptr;
	dcl stu_$decode_value ext entry(fixed bin(35),ptr,ptr,fixed bin(15))
		returns( fixed bin(35));
	dcl  subscr fixed bin(15);
	dcl subscr_string char(32) aligned;
	dcl subscr_chl fixed bin(15);
	dcl bbit36 bit(36) based;
	dcl bbit9 bit(9) based;
	dcl fixed9 fixed bin(9);

	dcl isl fixed bin(15);	/* identifier string length */

					dcl carry fixed bin(15);
					dcl dgt(0:9) char(1) static internal
					init("0","1","2","3","4","5","6","7","8","9");






/*  */
start:
	psp=pspp;
	ps.switch.semi_sep="0"b;
	if ps.prep^=0 then call plio2_put_util_$put_prep_(psp);
	last_node_p,
	sym_p=addrel(ps.ST_top_p,ps.offset);

		/* given addr(symbol_node)
		   obtain a descriptor taking care
		   of the two contingencies:
		   first, that it may be either an old or a new ST.
		   second, that it may be an element or an array node.    */



	/* get the level one ST_node_pointer  */

	sym_q=sym_p;
loop_struct:
	if fixed(sym_q->runtime_symbol.level,6)<2 then go to level_1_node;
	sym_q=addrel(sym_q,sym_q->runtime_symbol.father);
	go to loop_struct;

level_1_node:
	l1_p=sym_q;

	if sym_p->runtime_symbol.type="111111"b
	then do;
		idesc = "0"b;
		ps.top_half = bit(fixed(sym_p->runtime_symbol.size,18),18);
	end;
	else	idesc=plio2_sym_to_desc(sym_p,l1_p,psp,null);
		/* the null stack frame ptr will be replaced
		   by s_to_d using information in PS */

/*   */

/* make name  */



	isl=0;
	name_string="";
	sym_p=last_node_p;	/* start from level_N_name */
name_loop:


	name_p=addrel(sym_p,sym_p->runtime_symbol.name);

	fixed9=fixed(name_p->bbit9,9);
	name_string=substr(name_p->char_buf,2,fixed9)||"."||name_string;
	isl=fixed9+isl+1;
	if isl>255 then goto err244;



	if sym_p=l1_p then go to end_name_loop;	/*  end at the level one node */
	/* if fixed(sym_p->runtime_symbol.level,6)<2 then go to end_name_loop; */
	sym_p=addrel(sym_p,sym_p->runtime_symbol.father);
	go to name_loop;
end_name_loop:



	sslp=ps.ss_list_p;
	if sslp->ssl(1)>0 then
		do;
		substr(name_string,isl,1)="(";
			do i=2 to sslp->ssl(1)+1;
			subscr=sslp->ssl(i);
	
			if subscr<0 then
				do;
				subscr=-subscr;
				isl=isl+1;
				name_string=name_string||"-";
				end;
			if subscr=0 then
				do;
				name_string=name_string||"0,";
				isl=isl+2;
				end;
			else	do;
					do ii=64 to 1 by -1;
					carry=divide(subscr,10,35,0);
					substr(subscr_dec,ii,1)=dgt(subscr-10*carry);
					if carry=0 then go to signif;
					subscr=carry;
					end;


	signif:
				name_string=name_string||substr(subscr_dec,ii,65-ii)||",";
				isl=isl+66-ii;
				end;
			if isl>255 then goto err244;
			end;
	
		substr(name_string,isl,1)=")";
		/* replaces the final comma with the close_paren  */

		end;	/* end of subscript pack */

	else 	isl=isl-1;	/* kill the final DOT:       a.b.c. -> a.b.c     */
publish_name:
	identifier_string=substr(name_string,1,isl)||"=";
	isl=isl+1;

	call plio2_put_util_$put_field_(psp,addr(identifier_string),isl);


	ps.descr=idesc;
	ps.vp=ps.value_p;

	call plio2_ldo_$ldo_for_data(psp);

	return;

err244:
	call plio2_signal_$s_(psp,"ERROR","put data",244);
				/* err244: Identifier longer than 255 not handled by this implementation */
	isl=255;
	goto publish_name;

end plio2_pdt_;
