/****^  ******************************************************
        *                                                    *
        * Copyright, (C) Honeywell Bull Inc., 1988           *
        *                                                    *
        * Copyright (c) 1972 by Massachusetts Institute of   *
        * Technology and Honeywell Information Systems, Inc. *
        *                                                    *
        ****************************************************** */



/****^  HISTORY COMMENTS:
  1) change(88-04-06,Huen), approve(88-04-06,MCR7871), audit(88-04-13,RWaters),
     install(88-04-26,MR12.2-1043):
     Add comments for PL/1 bug 2140 and 2152.
                                                   END HISTORY COMMENTS */


plio2_put_util_:proc options(support);


/* updated 73-12-6 */
          /* 88-04-06: Insert a comment to warn users about the obsoletion
		   of the modules by SHuen */
	/* 77-05-26: to fix 1626 by RAB */
	/* 76-09-08: changed to use iox_$put_chars call forwarder */
	/* 73-12-6: changed over for iox_  */
	/* 73-10-30: fixed for new splitting rules
		and an entry for clearing output buffers introduced. */
	/* 9-27-72: finished internal-proceduring; added <NP> */
	/* 9-7-72: began internal-proceduring it and fixed bug in put_normal_char */
	/* 1-28-72: pageno stuff added */
	/*1-21-72:	There should no longer be non-explicit files */
	/* 8-2-71: slight fix to handling of SKIP by put_prep */


/* 	plio2_put_util_$
	contains the entries:
		put_prep_(psp)
		put_terminate_(psp)

		put_copy_(psp,n)

		put_page_(psp)
		put_skip_(psp,n)
		put_line_(psp,n)
		put_column_(psp,n)
		put_field_(psp,csp,csl)

	and, internally, the PUT_PUBLISH code which includes
	the code for the host interface procedure WRITE_HOST.

	This is the only procedure in the stream-directed output
	package which actually touches the output stream, that is,
	actually writes.

	1975: In order to improve performance, R.Schoeman has 
	reimplemented pl1 stream output in the operators which is 
	resided in bound_library_wired_. Therefore most of the 
	modules in this program for stream output has been obsoleted.
          For example, the put_field_ module is rewritten in put_field_.alm
							*/


/* automatic */

dcl	(pspp,psp,sptr,fsbp,fieldp,fieldpp) ptr;
dcl	(erno,nn,skip_count,target_line,fieldl,fieldll,/*col_no,*/blanks_out,blanks_left) fixed bin(15);
dcl	(pfstart,kkolx,sl,si,sll,shortline,/*iskip,*/testkol) fixed bin(15);
dcl	(x,y) char(1) aligned;

/* based */

dcl  based_int fixed bin (35) based;
dcl  p_vector (100) ptr based;

/* builtins */

dcl (addr, addrel, divide, min, mod, null, substr, string) builtin;

/* internal static */

dcl	NL char(1) aligned static internal init("
");
dcl	TAB char(1) aligned static internal init("	");
dcl	BL  char(1) aligned static internal init(" ");
dcl	SEMI char(1) aligned static internal init(";");
dcl	new_line_line char(100) aligned static internal init((100)"
");
dcl	blank_line char(100) aligned static internal init(" ");


dcl	1 putfab2 aligned static internal,
	2 pfs bit(36) aligned init("001000101"b),
	2 pfn char(32) aligned init(" "),
	2 (pfbs,pfls,pfps) fixed bin(35) init(0);

dcl	ybuf char(1000) aligned based(sptr);

dcl ioa_ ext entry options(variable);
dcl put_data_block_all_ entry (ptr);
dcl plio2_signal_$s_ ext entry(ptr,char(*),char(*),fixed bin(15));
dcl iox_$put_chars entry (ptr, ptr, fixed bin(21), fixed bin(35));
dcl plio2_signal_$s_r_ ext entry(ptr,char(*),char(*),fixed bin(15));
dcl plio2_open_$open_implicit_ ext entry(ptr);
dcl ctl_char$cr char(1) ext;
dcl ctl_char$np char(1) ext;
dcl iocb_p ptr;
dcl iocb_status fixed bin(35);
dcl plio2_data_$max_page_size fixed bin(35) external;

/* include files */

%include plio2_fsb;
%include plio2_ps;

/* program */

/* PREP */

put_prep_:entry(pspp);
	psp=pspp;
	call put_prep;
	return;


put_prep:proc;
			/* By a revision of pl1_operators_'s entry
			   stream_prep, put_prep_ will be called before
			   any call to put_terminate_ or the transmission
			   entries.  Thus there is less need to keep the
			   historical  test of the prep_sw and call to
			   put_prep_ in these routines.  The reason for
			   putting back the "prep_call" which was so
			   carefully removed in the original design is to
			   assure that the output file is open BEFORE the
			   first element for transmission is evaluated.  */
	plio2_data_$pspstat=psp;
	ps.prep=0;
	string(ps.switch)="0"b;

	if ps.job.string then
		do;
     /* STRING
        OPTION  */
		plio2_data_$pliostringfsbp,
		plio2_data_$fsbpstat,
		ps.fsbp,
		fsbp=ps.source_p;

		bnc=1;
		blc,kol=0;

		bsize=ps.number;
		lsize=ps.number+10000;
		fsb.limit=fsb.bsize;
		fsb.title,fsb.filename="""put_string_option""";
		/* for string option,
			fsb.buffer,
			fsb.path_name,
			fsb.declared_attributes(2)
		   must not be used - fske_fsb is too short  */
		string(fsb.switch)="001100101"b;
		/* v2pl1,open,stream,output */
		/* fsb.bptr has already been set to addr(string) by
		   the calling program  */
		ps.file_p=null;
		goto exit_put_prep;
		end;

     /* FILE or
        SYSPRINT   */

	if ps.job.explicit_file then ps.file_p=ps.source_p;
				else	do;
					call ioa_ ("error in put_util: no explicit file");
					ps.file_p=addr_sysprint();
					ps.job.explicit_file="1"b;
					end;

	ps.fsbp,fsbp,plio2_data_$fsbpstat=ps.file_p->p_vector(2);
	if fsb.switch.open then go to open1;
     /* IMPLICIT OPEN */
	plio2_data_$fabpstat,ps.fabp=ps.file_p->p_vector(1);
	plio2_data_$fab2pstat,ps.fab2p=addr(putfab2);
	call plio2_open_$open_implicit_(psp);
open1:
	if fsb.switch.output="0"b|fsb.switch.stream="0"b then go to err221;
	if ps.job.skip then
		do;
		skip_count=ps.number;
		call put_skip;
		end;
	else	do;
		if ps.job.page then call put_page;
		if ps.job.line then
			do;
			target_line=ps.number;
			call put_line;
			end;
		end;

exit_put_prep:
	ps.switch.first_field="1"b;
	ps.switch.semi_sep="1"b;
	return;
end put_prep;



/* TERMINATE  */

put_terminate_:entry(pspp);

	psp=pspp;
	if ps.prep^=0 then call put_prep;
					/* see NOTE at "put_prep" */
	fsbp=ps.fsbp;
	ps.switch.first_field="0"b;
	if ps.job.data then
		do;
		if ps.switch.semi_sep then
			do;
			ps.switch.first_field="1"b;
			call put_data_block_all_(psp);
			ps.switch.first_field="0"b;
			end;
		if bnc=1 then
			do;
			y=SEMI;
			call put_normal_char;
			end;
		else substr(xbuf,bnc-1,1)=";";

		end;
	if ps.job.string then
		do;
		if ps.job.varying_string then   addrel(bptr,-1)->based_int=bnc-1;
		else	do;
			if bnc>bsize then return;
			substr(xbuf,bnc,bsize+1-bnc)=" ";
			end;
		return;
		end;

	if fsbp->fsb.switch.interactive then
		do;
		skip_count=1;
		call put_skip;
		end;


	call put_publish;
	return;




clear_output_buffer:entry(pspp);
	psp=pspp;
	if ps.job.string then return;
	fsbp=ps.fsbp;

	if ^fsb.switch.open then return;
	if ^fsb.switch.output then return;
	if ^fsb.switch.stream then return;

	fsb.bnc=1;
	fsb.lineno=1;
	fsb.kol=0;
	fsb.switch.emptyline="0"b;

	return;
put_publish_:entry(pspp);
	psp=pspp;
	fsbp=ps.fsbp;
	call put_publish;
	return;


put_field_:entry(pspp,fieldpp,fieldll);
	psp=pspp;
	fsbp=ps.fsbp;

	if ps.job.edit then
		do;
		call put_field;
		return;
		end;
	if ps.switch.first_field then
		do;
		if kol=0 then go to post_tab;
		if fsb.switch.print then
			do;
			testkol=10 + 10*divide(kol-1,10,35,0);
			if testkol=kol then goto post_tab;
			kol=testkol;
			if kol<lsize then
				do;
				x=TAB;
				call insert_char;
				end;
			else call put_new_line;
			end;
post_tab:
		if ps.job.data then ps.switch.first_field="0"b;
		end;
	else ps.switch.first_field="1"b;
	call put_field;
				/* Always first-field for LIST,
				   alternately first/second field
				   for DATA; at this point, "first_field"
				   is correct for the NEXT field.  */
	y=BL;
	if ps.switch.first_field then call put_normal_char;
	return;


put_field:proc;
	fieldp=fieldpp;
	fieldl=fieldll;
	pfstart=1;
	sptr=fieldp;
try_this_line:
	kkolx=kol+fieldl;
	if kkolx>lsize then go to pf1;
	kol=kkolx;	/* ASSUMES that field consists of single
			   column characters only !!!!!!!!!!!!!!  */
	go to pf22;
pf2:	kol=fieldl;	/* kol must have been =0  */
pf22:	sl=fieldl;
				/* "put" remainder of string in one piece */
	si=pfstart;
	call insert_string;
	return;

pf1:	if ps.job.edit then go to pf3;
pf4:	if kol^=0    then call put_new_line;
	if emptyline then call put_new_line;
	if fieldl<=lsize then go to pf2;
	shortline=lsize;
	go to pf33;
pf3:	shortline=lsize-kol;
pf33:	sl=shortline;
	si=pfstart;
	call insert_string;
	/* kol=lsize but see below that kol becomes 0 */

	fieldl=fieldl-shortline;
	pfstart=pfstart+shortline;
	call put_new_line;	/* kol becomes 0 */
	goto try_this_line;

end put_field;




put_normal_char:proc;
				/* The "put_field" for a single character. */
	if kol=lsize then call put_new_line;
	kol=kol+1;
	x=y;
	call insert_char;
end put_normal_char;



put_skip_fast:proc;
				/* sets kol=0,emptyline,lineno */
	/* doesn't care about psize !!! */
	if skip_count > 1 then go to psf98;
	x=NL;
	call insert_char;
	goto exit_psf;

psf98:	sptr=addr(new_line_line);
	si=1;
psf99:	if skip_count>100 then go to psf100;
	sl=skip_count;
	call insert_string;
	fsb.limit = min(bsize,lsize+bnc-1);
	goto exit_psf;
psf100:
	sl=100;
	call insert_string;
	skip_count=skip_count-100;
	lineno=lineno+100;
	go to psf99;

exit_psf:
	kol=0;
	emptyline="0"b;
	lineno=lineno+skip_count;

end put_skip_fast;



/*  */
insert_char:proc;			/* doesn't care about lsize or psize */
	if bnc>bsize then call put_publish;
	substr(xbuf,bnc,1)=x;
	if x=NL  | x=ctl_char$cr | x=ctl_char$np
	then fsb.limit = min(bsize,lsize+bnc);
	bnc=bnc+1;
	return;
end insert_char;


insert_string:proc;			/* doesn't care about psize or lsize */
insert_string_1:
	if sl<1 then return;
	if sl < bsize-bnc+2 then
		do;
		substr(xbuf,bnc,sl)=substr(ybuf,si,sl);
		bnc=bnc+sl;
		return;
		end;
	sll=bsize+1-bnc;
	substr(xbuf,bnc,sll)=substr(ybuf,si,sll);
	bnc=bsize+1;
	call put_publish;
	sl=sl-sll;
	si=si+sll;
	go to insert_string_1;
end insert_string;


put_publish:proc;
	if ps.job.string then goto err220;
	iocb_p=fsb.iocb_p;
	if bnc>1 then
		do;
		call iox_$put_chars(iocb_p,bptr,bnc-1,iocb_status);
		if iocb_status ^=0 then fsb.switch.transmit_error="1"b;

		bnc=1;	/* buffer has been cleared */
		fsb.limit=min(bsize,lsize-kol);

		if fsb.switch.transmit_error then call plio2_signal_$s_(psp,"TRANSMIT",
							"put_util",222);
		fsb.switch.transmit_error="0"b;
		end;
	return;
end put_publish;

addr_sysprint:proc returns(ptr);
	dcl sysprint file print stream output;
	return(addr(sysprint));
end addr_sysprint;




/*  */


/*put_column_:entry(pspp,nn);	*/
/*	psp=pspp;	*/
/*	fsbp=ps.fsbp;	*/
/*	col_no=nn;	*/
/*	*/
/*	if col_no>lsize | col_no<1 then col_no=1;	*/
/*				/* AG94 doesn't say what to do if col_no<1 */
/*	if col_no>kol then goto pc90;	*/
/*	call put_new_line;	*/
/*pc90:	*/
/*	iskip=col_no -1 -kol;	/* number of intervening blanks */
/*	kol  =col_no -1;		/* kol of last of these blanks is col_no -1 */
/*	*/
/*	sptr=addr(blank_line);	*/
/*	si=1;	*/
/*pc99:	*/
/*	if iskip>100 then go to pc100;	*/
/*	sl=iskip;	*/
/*	call insert_string;	*/
/*	return;	*/
/*pc100:	*/
/*	sl=100;	*/
/*	call insert_string;	*/
/*	iskip=iskip-100;	*/
/*	go to pc99;	*/
/*	*/
/*	*/
put_blanks_:entry(pspp,nn);
	psp=pspp;
	fsbp=ps.fsbp;
	do blanks_left=nn  repeat(blanks_left-100) while (blanks_left>0);
		blanks_out=min(blanks_left,100);
		call put_field_(psp,addr(blank_line),blanks_out);
		end;
	return;



/*put_skip_:entry(pspp,nn);	*/
/*	psp=pspp;	*/
/*	fsbp=ps.fsbp;	*/
/*	skip_count=nn;	*/
/*	call put_skip;	*/
/*	return;	*/
/*	*/
/*	*/
put_skip:proc;
	if ps.job.string then goto err223;
	fsb.limit = min(fsb.bnc+fsb.lsize,fsb.bsize);
	if skip_count>0 then go to pso_1;
	if fsb.switch.print then
		do;
		x=ctl_char$cr;
		call insert_char;
		kol=0;
		emptyline="1"b;
		return;
		end;
	goto err224;

pso_1:
	if lineno>psize | (lineno+skip_count)<=psize then
		do;
		call put_skip_fast;
		return;
		end;
	call fill_page_with_NLs;
	call plio2_signal_$s_(psp,"ENDPAGE","put_skip",225);
	return;

end put_skip;
/*	*/
/*	*/
/*	*/
/*put_line_:entry(pspp,nn);	*/
/*	psp=pspp;	*/
/*	fsbp=ps.fsbp;	*/
/*	target_line=nn;	*/
/*	call put_line;	*/
/*	return;	*/


put_line:proc;
	if ps.job.string then goto err226;
	if ^fsb.switch.print then goto err227;
	if target_line<1 then target_line=1;
				/* AG94 says "must be >0"  */
	if target_line=lineno then return;
	if lineno > psize 
	then do;
		if target_line > lineno 
		then do;
			skip_count=target_line-lineno;
			call put_skip_fast;
			end;
		else call put_page;
		return;
		end;
	if target_line < lineno | target_line > psize then
		do;
		call fill_page_with_NLs;
		call plio2_signal_$s_(psp,"ENDPAGE","put_line",228);
		return;
		end;

	/* lineno < target_line  */
	skip_count=target_line-lineno;
	call put_skip_fast;
	return;

end put_line;
/*	*/
/*	*/
/*	*/
/*put_page_:entry(pspp);	*/
/*	psp=pspp;	*/
/*	fsbp=ps.fsbp;	*/
/*	call put_page;	*/
/*	return;	*/


put_page:proc;
	/* call fill_page_with_NLs; */
	if (lineno<=psize)
	|  (kol>0)
	| (kol=0 & emptyline)
	then	do;
		x=NL;
		call insert_char;
		end;
	lineno=1;
	pageno=pageno+1;
	kol=0;
	emptyline="0"b;
	x=ctl_char$np;
	call insert_char;
				/* MULTICS must insert <CR> if necessary. */
				/* This entry called by default handler for the
				   endpage condition.  */
	return;

end put_page;

fill_page_with_NLs:proc;

	if ps.job.string then goto err229;
	if ^fsb.switch.print then goto err230;

	if psize=plio2_data_$max_page_size then
		do;
		kol=0;
		emptyline="0"b;
		lineno=1;
		return;	/* RETURN */
		end;

	/* returns with
		kol=0
		emptyline="0"b
		lineno=pagesize*M+1    */

	if kol^=0 		then go to ppo_work;
	if lineno=1 		then go to ppo_work;
	if mod(lineno,psize)^=1 	then go to ppo_work;
	if emptyline 	then go to ppo_work;

	/* we are looking at the beginning of a page
	   with lineno=1+N*psize,  N^=1     
	   Hence, when put_page_ is called by the handler of the PAGE
	   condition, all that happens is that lineno=1  */

	return;

ppo_work:
	skip_count=1 - lineno + psize*(1+divide(lineno-1,psize,35,0));
	call put_skip_fast;
	return;

end fill_page_with_NLs;




put_new_line:proc;

	/* puts the NL character duly considering psize.
	   used by:  put_field,put_tab,put_bl,put_col  */

	if ps.job.string then goto err226;
	x=NL;
	call insert_char;
	kol=0;
	emptyline="0"b;
	lineno=lineno+1;
	if lineno=psize+1 then call plio2_signal_$s_(psp,"ENDPAGE","new_line",231);
	return;
end put_new_line;


/*  */
     /* ABNORMAL RETURNS */

err220:
	erno=220;
			/* PUT STRING overflows the string */
	goto sig_and_return;

err221:
	erno=221;
			/* FILE used with PUT STATEMENT must have stream,output attributes */
	goto sig_and_return;

err223:
	erno=223;
			/* SKIP not allowed with STRING OPTION */
	goto sig_and_return;

err224:
	erno=224;
			/* SKIP with count<1 requires PRINT attribute */
	goto sig_and_return;

err226:
	erno=226;
			/* LINE not allowed with STRING OPTION */
	goto sig_and_return;

err227:
	erno=227;
			/* LINE requires the PRINT attribute */
	goto sig_and_return;

err229:
	erno=229;
			/* PAGE not allowed with STRING OPTION */
	goto sig_and_return;

err230:
	erno=230;
			/* PAGE requires PRINT attribute */
	goto sig_and_return;

err233:
	erno=233;
	goto sig_and_return;

sig_and_return:	call plio2_signal_$s_r_(psp,"ERROR","put_util",erno);
	/* signals and then returns abnormally to the user's procedure */



quick_condition:	entry(pspp,condition_code);

dcl	condition_code fixed bin(35);

	psp=pspp;
	fsbp=ps.fsbp;
	goto quick_cond(condition_code);

quick_cond(0):			/* non-zero code returned by iox_$put_chars */
	fsb.transmit_error="1"b;
	call plio2_signal_$s_(psp,"TRANSMIT","quick_stream",222);
	fsb.transmit_error="0"b;
	return;

quick_cond(1):			/* ENDPAGE is to be signalled */
	call plio2_signal_$s_(psp,"ENDPAGE","quick_new_line",234);
	return;

quick_cond(2):			/* LINE or PAGE option or format in PUT stmnt  */
				/* on file without print attribute             */
	erno = 235;
	goto qs_signal_abnormal_ret;

quick_cond(3):			/* COL or LINE format/option with zero value  */
	erno = 236;
	goto qs_signal_abnormal_ret;

quick_cond(4):			/* CONTROL format with value <0	      */
	erno = 237;
	goto qs_signal_abnormal_ret;

quick_cond(5):			/* SKIP(0) found on non-print file	      */
	erno = 224;
	goto qs_signal_abnormal_ret;

quick_cond(6):			/* fill_page_with_NL's when psize = max!!!!	*/
	erno = 233;
	goto qs_signal_abnormal_ret;

quick_cond(7):		/* "buffer", i.e. target string, overflowed on put with string option */
	erno = 220;
	goto qs_signal_abnormal_ret;

quick_cond(8):		/* request is for a string of over 260 final output length */
	call plio2_signal_$s_(psp,"ERROR","quick_260_limit",242);
	return;

quick_cond(9):		/* request for line(0) was made	*/
	erno = 262;
	goto qs_signal_abnormal_ret;

quick_cond(10):		/* no parameter to format item given where one  was needed	*/
	erno = 148;
	goto qs_signal_abnormal_ret;

quick_cond(11):		/* non-zero error code returned by stu_ while evaluating format	*/
	erno = 195;
	goto qs_signal_abnormal_ret;

quick_cond(12):		/* max nesting depth of 10 for r_formats exceeded	*/
	erno = 197;
	goto qs_signal_abnormal_ret;

quick_cond(13):		/* attempt to restart after ERROR or SIZE */
	erno = 266;
	goto qs_signal_abnormal_ret;

quick_cond(14):
quick_cond(15):
quick_cond(16):
quick_cond(17):
quick_cond(18):		/* no such quick_cond codes! */
	erno = 174;
	goto qs_signal_abnormal_ret;

qs_signal_abnormal_ret:
	call  plio2_signal_$s_r_(psp,"ERROR","quick_put_cond",erno);
	/* signals & returns abnormally to user's procedure */

end plio2_put_util_;
