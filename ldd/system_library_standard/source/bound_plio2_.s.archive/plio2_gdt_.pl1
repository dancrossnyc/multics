/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

plio2_gdt_:
get_data_temp_:proc(pspp) options(support);

/*	Modified:	4 April 1978 by RAB to more properly determine time to call stu_$get_implicit_qualifier */


dcl (pspp,psp) ptr;

dcl ( oklist_p, val_p, sym_p, new_sp , ldip,new_block_p, p) ptr;
dcl (text_p, link_p, ref_p) ptr init(null);
dcl ( i, n,  isteps, icode, nsubs ) fixed bin;
dcl isize fixed bin(35);
dcl	bbit36 bit(36) based;
dcl (addr, addrel, bit, binary, fixed, null, rel, substr) builtin;
dcl  based_bit36 bit (36) aligned based;
dcl new_ST_sw bit(1) aligned;

dcl	stu_$find_runtime_symbol ext entry(ptr,char(*) aligned, ptr , fixed bin) returns(ptr);
dcl	stu_$get_runtime_address ext entry(ptr,ptr,ptr,ptr,ptr,ptr,ptr) returns (ptr);
dcl	stu_$decode_runtime_value ext entry (fixed bin(35),ptr,ptr,ptr,ptr,ptr,fixed bin) returns(fixed bin(35));
dcl	stu_$get_implicit_qualifier ext entry (ptr,ptr,ptr,ptr,ptr) returns(ptr);
dcl	plio2_sym_to_desc ext entry(ptr,ptr,ptr,ptr) returns(bit(36)aligned);



	dcl 1 val_struct based,
		2 flag bit(2) unal,
		2 type bit(4) unal,
		2 rest bit(30) unal;

	dcl 1 oklist aligned based(oklist_p),
		2 okln fixed bin(15),
		2 offset(128) bit(18) unaligned;

	dcl oklistlength fixed bin(17);
	dcl delta bit(18);
	dcl sym_q ptr;
	dcl erno fixed bin(35);

	dcl 1 ldi aligned based(ldip),
		2 l fixed bin(15),
		2 chars char(256) aligned,
		2 name_l fixed bin(15),
		2 (isub,sub(128)) fixed bin(15);

	dcl ( jsub,jlower,jupper ) fixed bin(35);

%include pl1_stack_frame;
% include symbol_node;
% include runtime_symbol;
% include plio2_ps;




/*  */
/*	NOTE WELL on SymTab: I use the old symtab whenever it seems
		to agree with the new.
*/

start:
	psp=pspp;
	ldip=ps.auxp;

	sym_p=stu_$find_runtime_symbol(ps.ST_block_p,substr(ldi.chars,1,ldi.name_l),new_block_p,isteps);
	if sym_p=null then goto err72;
	if isteps<0 then  goto err72;
			/* isteps is now used to report errors;
			   -5 means a partial name which is  ambiguous (sym_p is NOT null in this case)
			   -1 means a null block ptr
			   -2,-3 mean th name is too long or has too many parts
			   -4 means the symbol has been searched for but not found */

	if sym_p->runtime_symbol.flag then new_ST_sw = "1"b;
	else new_ST_sw = "0"b;

	oklist_p=ps.special_list_p;
	oklistlength=oklist.okln;
	if ps.job.p1p2 then oklistlength=oklistlength+oklistlength;
	/* since, in version one, oklist is stored one per word */

	if oklistlength>0 then
		do;
		sym_q=sym_p;

okloop:		delta=bit(fixed(binary(rel(sym_q),18,0)-binary(rel(ps.ST_top_p),18,0),18,0),18);
			do i=1 to oklistlength;
			if delta=oklist.offset(i) then go to ok_exit;
			end;

		if fixed(sym_q->symbol_node.level,6)<2 then goto err73;	/* SAME */
		sym_q=addrel(sym_q,sym_q->symbol_node.father);		/* SAME */
		go to okloop;

ok_exit:		end;



	nsubs=fixed(sym_p->symbol_node.ndims,6);			/* SAME */
	if nsubs^=ldi.isub then goto  err74;

	new_sp=ps.stack_frame_p;
	do i=1 to isteps;
	new_sp=new_sp->pl1_stack_frame.display_ptr;
					/* Here's an OPERATING SYSTEM
					   interface for you. son's SF
					   points to parent's SF
					   in this fashion in MULTICS */


	end;


	/* check subscript ranges */

	do i=1 to nsubs;

	jsub=ldi.sub(i);
	if new_ST_sw then
		do;
		jlower=sym_p->runtime_symbol.bounds(i).lower;
		jupper=sym_p->runtime_symbol.bounds(i).upper;
		end;
	else	do;
		jlower=sym_p->symbol_node.bounds(i).lower;
		jupper=sym_p->symbol_node.bounds(i).upper;
		end;

	icode=0;

	if jlower<0
	then do;
		if ref_p = null & sym_p -> runtime_symbol.class = "0011"b
		then ref_p = stu_$get_implicit_qualifier(new_block_p,sym_p,new_sp,link_p,text_p);
		else;
	 	jlower=stu_$decode_runtime_value((jlower),new_block_p,new_sp,null,null,ref_p,icode);
		end;

	if icode^=0 then goto err76;
	if jupper<0
	then do;
		if ref_p = null & sym_p -> runtime_symbol.class = "0011"b
		then ref_p = stu_$get_implicit_qualifier(new_block_p,sym_p,new_sp,link_p,text_p);
		else;
	 	jupper=stu_$decode_runtime_value((jupper),new_block_p,new_sp,null,null,ref_p,icode);
		end;

	if icode^=0 then goto err76;
	if jsub<jlower|jsub>jupper then goto err77;
	end;	/* end of do-loop on all subscripts */

	val_p=stu_$get_runtime_address(new_block_p,sym_p,new_sp,null,null,null,addr(ldi.sub(1)));
	if val_p=null then goto err75;

	if sym_p->runtime_symbol.type="111111"b
	then do;
		ps.top_half = bit(fixed(sym_p->runtime_symbol.size,18),18);
		ps.descr = "0"b;
	end;
	else	ps.descr=plio2_sym_to_desc(sym_p,null,psp,new_sp);

	ps.vp=val_p;

	if substr(ps.descr,1, 7)="1010100"b then goto varstrret;
	if substr(ps.descr,1, 7)="1010110"b then goto varstrret;
	/*
	if substr(ps.descr,1,15)="000001000001001"b then goto varstrret;
	if substr(ps.descr,1,15)="000001000001010"b then goto varstrret;
	*/


	return;

varstrret:
	ps.vp=addrel(ps.vp,1);	/* PLIO2 needs to have the pointer "as an argument"  */
	return;


err72:	erno=72;
	goto error_exit;

err73:	erno=73;
	goto error_exit;

err74:	erno=74;
	goto error_exit;

err75:	erno=75;
	goto error_exit;

err76:	erno=76;
	goto error_exit;

err77:	erno=77;
	goto error_exit;

error_exit:
	addr(ps.descr)->based_bit36=addr(erno)->based_bit36;
		/* returns erno to which 63 will be added:

		72 135 identifier not found in S.T.
		73 136 identifier not found in (or under) data list of get-data statement
		74 137 number of subscripts in identifier not equal number specified in S.T.
		75 138 error return from stu_$get_runtime_address
		76 139 error return from stu_$decode_runtime_value
		77 140 subscript range error, info from S.T.

		*/
	ps.vp=null;
	return;

end plio2_gdt_;
