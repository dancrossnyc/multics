/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

display_file_value_: proc (P_switch, P_file, P_code);

/* formats information about the file, and outputs it on switch.
   Code is returned 0 for no errors, oterwise it is a standard system error code

   Designed 18 July 78 by James R. Davis
*/

dcl (P_switch ptr,					/* to switch for io */
     P_file file variable,				/* the file whose value we print */
     P_code fixed bin (35)				/* standard system error code */
     ) parameter;


dcl  fsbp ptr,					/* to file state block */
     fabp ptr,					/* to file attribute block */
     swp ptr,					/* to switch for io */
     ioa_$ioa_switch entry options (variable),
     chbuf char (fsb.bsize) based (fsb.bptr),
    (addr, substr, null) builtin;

dcl  iox_$user_output ptr external;			/* default switch */
dcl  TIC char (1) static options (constant) init ("!");	/* used in stream input */

	P_code = 0;
	fsbp = addr (P_file) -> file_value.fsb_ptr;
	fabp = addr (P_file) -> file_value.fab_ptr;
	swp = P_switch;
	if swp = null () then swp = iox_$user_output;

	call ioa_$ioa_switch (swp, "fab: ^p, fsb: ^p", fabp, fsbp);

	if ^ fsb.switch.open
	then if fab.switch.stream
	     then if fab.switch.input
		then call ioa_$ioa_switch (swp,
		     "closed ^[internal^;external^] stream input file: ^32a",
		     fab.switch.internal, fab.name);
		else if fab.switch.output
		then call ioa_$ioa_switch (swp,
		     "closed ^[internal^;external^] stream output file: ^32a ^[print page size: ^d line size: ^d^;^2s^]",
		     fab.switch.internal, fab.name, fab.switch.print, fab.page_size, fab.line_size);
		else call ioa_$ioa_switch (swp,
		     "closed ^[internal^;external^] stream file not input or output: ^32a",
		     fab.switch.internal, fab.name);
	     else if fab.switch.record
	     then call ioa_$ioa_switch (
		"closed ^[internal^;external^]  record ^[output ^;^] ^[input ^;^]^[update ^;^]^[keyed ^;^]^[sequential^;^]^[direct^;^]^[(stringvalue)^;^] file: ^32a",
		fab.switch.internal, fab.switch.output, fab.switch.input, fab.switch.update,
		fab.switch.keyed, fab.switch.sequential, fab.switch.direct,
		fab.switch.stringvalue, fab.name);
	     else call ioa_$ioa_switch (swp, "closed file not record or stream name: ^32a", fab.name);
	else do;					/* open file */
	     call ioa_$ioa_switch (swp, "^[internal^;external^] file name: ^32a ^/ path: ^168a^/iocb at ^p",
		fsb.switch.internal, fsb.filename, fsb.path_name, fsb.iocb_p);

	     if fsb.switch.stream
	     then if fsb.switch.input
		then do;
		     call ioa_$ioa_switch (swp, "stream input last char ^d", fsb.blc);
		     call ioa_$ioa_switch (swp, "^a^a^a",
			substr (chbuf, 1, fsb.bnc-1), TIC, substr (chbuf, bnc, blc -bnc + 1));
		end;				/* of input stream file */
		else if fsb.switch.output
		then call ioa_$ioa_switch (swp,
		     "stream output ^[print page size ^d line size ^d^/pageno ^d lineno ^d colno^d^;^5s^]",
		     fsb.switch.print,		/* if print then give print parms */
		     fsb.psize, fsb.lsize, fsb.pageno, fsb.lineno, fsb.kol);
		else call ioa_$ioa_switch (swp, "stream, but not input or output");
	     else if fsb.switch.record then call ioa_$ioa_switch (swp,
		"record ^[input^;^]^[output^;^]^[update^;^] ^[keyed^;^]^[sequential^;^]^[direct^;^] ^[(string value)^;^]",
		fsb.switch.input, fsb.switch.output, fsb.switch.update,
		fsb.switch.keyed, fsb.switch.sequential, fsb.switch.direct, fsb.switch.stringvalue);
	     else call ioa_$ioa_switch (swp, "not stream or record");
	end;					/* of open file */
						/*  */
%include  pl1_file_value;
%include plio2_fsb;
%include plio2_fab;
     end display_file_value_;
