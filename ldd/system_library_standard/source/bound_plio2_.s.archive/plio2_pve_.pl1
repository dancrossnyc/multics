/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

plio2_pve_:proc(pspp) options(support);
put_value_edit_:entry(pspp);

		/* Ref: see AG94 section 12.12 page 12-17 ff  format statement
		                 section 8.2.12 page 8-11 ff  format controlled conversion
		*/

dcl	(/*p,*/psp,pspp/*,inpicture_p,outpicture_p*/) ptr;

/*	dcl erno fixed bin(15);	*/
/*	dcl (i,ipreciz,code,idn,topdigits) fixed bin(15);	*/
/*	dcl fake_arg bit(1) unaligned based;	*/
/*	dcl based_bits bit(1000) unaligned based;	*/
/*	*/
/*	dcl decimal_temp char(130) aligned;	*/
/*	dcl decimal char(130) aligned;	*/
/*	*/
/*	dcl 1 descriptive aligned,	*/
/*		2 type5 aligned,	*/
/*			3 ( cr,bd,ff,ls,pack ) char(1) unal,	*/
/*		2 (prec,scale,bit_length,typex) fixed bin(15);	*/
/*	dcl 1 based_mask aligned based(addr(type5)),	*/
/*	     2 bc2 char(2) unaligned;	*/
/*	dcl 1 xm12 aligned based,	*/
/*		2 top_24 bit(24) unal,	*/
/*		2 m_12 bit(12) unal;	*/
/*	dcl  1 xlc aligned based,	*/
/*		2 c3 char(3) unal,	*/
/*		2 last_char char(1) unal;	*/
/*	*/
/*	dcl ( addr,addrel,baseptr,divide,fixed,length,mod,substr,unspec) builtin;	*/
/*	*/
/*dcl	plio2_fl_$reset_ ext entry(ptr);	*/
/*dcl	plio2_fl_$get_next_ ext entry(ptr);	*/
/*dcl	plio2_put_util_$put_field_ ext entry(ptr,ptr,fixed bin(15));	*/
/*dcl	plio2_put_util_$put_prep_ ext entry(ptr);	*/
/*dcl	plio2_put_util_$put_page_ ext entry(ptr);	*/
/*dcl	plio2_put_util_$put_line_ ext entry(ptr,fixed bin(15));	*/
/*dcl	plio2_put_util_$put_skip_ ext entry(ptr,fixed bin(15));	*/
/*dcl	plio2_put_util_$put_column_ ext entry(ptr,fixed bin(15));	*/
/*dcl	dnd$with_strings ext entry(bit(36) aligned,ptr,fixed bin(15));	*/
dcl	plio2_signal_$s_ ext entry(ptr,char(*),char(*), fixed bin(15));	
/*dcl	plio2_signal_$s_r_ ext entry(ptr,char(*),char(*), fixed bin(15));	*/
/*	*/
/*	dcl sign_char char(1) unaligned;	*/
/*	dcl format_bp ptr;	*/
/*	dcl expstr char(5) aligned;	*/
/*	*/
/*	dcl v_output char(516) varying;	*/
/*	*/
/*	dcl zeroes char(256) aligned static internal init((256)"0");	*/
/*	*/
/*	dcl dgt(0:9) char(1) static internal	*/
/*	init("0","1","2","3","4","5","6","7","8","9");	*/
/*	*/
/*	dcl 1 second_part unaligned based,	*/
/*		2 xxx bit(bit_offset),	*/
/*		2 next_bit bit(1);	*/
/*	*/
/*	dcl 1 format_block aligned based(format_bp),	*/
/*		2 ( type,nval,val(3)) fixed bin(15);	*/
/*	*/
/*	dcl (exp,ftype,iw,icomplex,is,ip,id,nval) fixed bin(15);	*/
/*	dcl bl24 char(24) aligned init("");	*/
/*	*/
/*	dcl ( ddfix,ddflo) bit(36) aligned;	*/
/*	dcl char256 char(256) aligned;	*/
/*	dcl vbit256 bit(256) varying aligned;	*/
/*	dcl efbuf char(264) aligned;	*/
/*	dcl (lzero,ief,dscale,lpref) fixed bin(15);	*/
/*	*/
/*dcl	buffer char(64) aligned;	*/
/*dcl	space char(128) aligned;	*/
/*	*/
/*dcl	conversion condition;	*/
/*dcl	plio2_resig_ ext entry(ptr);	*/
/*	*/
/*dcl	1 dec_fixed(2)	based(addr(space)) unal,	*/
/*	2 sign_of_mantissa	char(1) unal,	*/
/*	2 mantissa	char(outprec) unal,	*/
/*	*/
/*	1 dec_float(2)	based(addr(space)) unal,	*/
/*	2 sign_of_mantissa	char(1) unal,	*/
/*	2 mantissa	char(outprec) unal,	*/
/*	2 unused		bit(1) unal,	*/
/*	2 exponent	fixed bin(7) unal;	*/
/*	*/
/*%include desc_dcls;	*/
/*%include desc_types;	*/
/*%include descriptor;	*/
/*%include picture_desc_;	*/
/*%include picture_image;	*/
/*%include picture_util;	*/
/*%include plio_format_codes;	*/
/*%include plio2_ps;	*/

/*	psp=pspp;	*/
/*	if ps.prep^=0 then call plio2_put_util_$put_prep_(psp);	*/
/*	on conversion call plio2_resig_(psp);	*/
/*	ps.vp=ps.value_p;	*/
/*	ps.descr=ps.descriptor;	*/
/*	call dnd$with_strings(ps.descr,addr(descriptive),code);	*/
/*	if code^=0 then goto err232;	*/
/*	*/
/*	if type5.cr="s"	*/
/*	then	if type5.ff="v"	*/
/*		then	ps.vp = addrel(ps.vp,-1);	*/
/*	*/
/*	icomplex=0;	*/
/*	format_bp=ps.format_area_p;	*/
/*	if ps.new_format^=0 then call plio2_fl_$reset_(psp);	*/
/*	*/
/*get_next_format_item:	*/
/*	*/
/*	call plio2_fl_$get_next_(psp);	*/
/*	*/
/*complex_edit_1:	*/
/*	ftype=format_block.type;	*/
/*	nval=format_block.nval;	*/
/*	iw=format_block.val(1);	*/
/*	*/
/*	if nval>0 then if iw<0 then goto bad_param_values;	*/
/*	*/
/*	if icomplex>0 then go to ef_prep;	*/
/*	*/
/*	if ftype<x_format then go to data_format;	*/
/*	if ftype=x_format then	*/
/*		do;	*/
/*		if nval<1 then goto too_few_params;	*/
/*more_x:		if iw<1 then goto get_next_format_item;	*/
/*		if iw>24 then is=24;	*/
/*		else is=iw;	*/
/*		iw=iw-is;	*/
/*		call plio2_put_util_$put_field_(psp,addr(bl24),is);	*/
/*		goto more_x;	*/
/*		end;	*/
/*	*/
/*	if ftype=skip_format then	*/
/*		do;	*/
/*		if nval<1 then iw=1;	*/
/*		call plio2_put_util_$put_skip_(psp,iw);	*/
/*		go to get_next_format_item;	*/
/*		end;	*/
/*	*/
/*	*/
/*	if ftype=column_format then	*/
/*		do;	*/
/*		if nval<1 then go to too_few_params;	*/
/*		if iw<1 then iw=1;		/* not AG94-0 ........... */
/*		call plio2_put_util_$put_column_(psp,iw);	*/
/*		go to get_next_format_item;	*/
/*		end;	*/
/*	*/
/*	*/
/*	if ftype=page_format then	*/
/*		do;	*/
/*		call plio2_put_util_$put_page_(psp);	*/
/*		go to get_next_format_item;	*/
/*		end;	*/
/*	*/
/*	*/
/*	if ftype=line_format then	*/
/*		do;	*/
/*		if nval<1 then go to too_few_params;	*/
/*		if iw<1 then goto bad_param_values;	*/
/*		call plio2_put_util_$put_line_(psp,iw);	*/
/*		go to get_next_format_item;	*/
/*		end;	*/
/*	*/
/*pic_format:	*/
/*	if ftype=picture_format	*/
/*	then do;	*/
/*		outpicture_p = addrel(baseptr(format_block.val(2)),format_block.val(3));	*/
/*	*/
/*		call assign_type_p(outpicture_p,outtype,outscale_prec);	*/
/*		call assign_type_d(ps.descr,psp,inpicture_p,intype,inscale_prec);	*/
/*	*/
/*		if icomplex=2	*/
/*		then	if outtype^=char_desc*2	*/
/*			then	outtype = outtype+4;	*/
/*	*/
/*		if ps.descr="0"b	*/
/*		then	if outtype=char_desc*2	*/
/*			then do;	*/
/*				call assign_(addr(buffer),char_desc*2,outscale_prec,ps.vp,intype,inscale_prec);	*/
/*				call pack_picture_(addr(char256)->char1,p->char1,addr(buffer)->char1);	*/
/*	*/
/*				icomplex = 2;	*/
/*	*/
/*				goto put_field_edit;	*/
/*			end;	*/
/*			else do;	*/
/*				call unpack_picture_(addr(buffer)->char1,inpicture_p->char1,ps.vp->char1);	*/
/*				call assign_(addr(space),outtype,outscale_prec,addr(buffer),intype,inscale_prec);	*/
/*			end;	*/
/*		else	call assign_(addr(space),outtype,outscale_prec,ps.vp,intype,inscale_prec);	*/
/*	*/
/*		if icomplex=2	*/
/*		then	i = 2;	*/
/*		else	i = 1;	*/
/*	*/
/*		if outtype=D_fixed_real_desc*2	*/
/*		|  outtype=D_fixed_cplx_desc*2	*/
/*		then	p = addr(dec_fixed(i));	*/
/*		else	p = addr(dec_float(i));	*/
/*	*/
/*		call pack_picture_(addr(decimal)->char1,outpicture_p->char1,p->char1);	*/
/*	*/
/*		iw = outpicture_p->picture_image.varlength;	*/
/*	*/
/*		substr(char256,1,iw) = substr(decimal,1,iw);	*/
/*	*/
/*		goto put_field_edit;	*/
/*	end;	*/
/*	*/
/*	goto no_such_format_type;	*/
/*	*/
/*err232:	*/
/*	erno=232;	*/
/*			/*  bad output descriptor */
/*	goto sandr;	*/
/*	*/
/*too_few_params:	*/
/*	erno=148;	*/
/*			/* too few parameters in format item */
/*	goto sandr;	*/
/*	*/
/*no_such_format_type:	*/
/*	*/
/*	erno=260;	*/
/*			/* illegal format code assembled - containt maint-pers */
/*	goto sandr;	*/
/*	*/
/*bad_string_size:	*/
/*	erno=261;	*/
/*			/* size of field ("w") not in range 0 to 256 */
/*	goto sandr;	*/
/*	*/
/*bad_param_values:	*/
/*	erno=262;	*/
/*			/* bad parameter value in format item (output)  */
/*	goto sandr;	*/
/*	*/
/*err264:	*/
/*	erno=264;	*/
/*			/* put edit cannot handle a string longer than 256 */
/*	goto sandr;	*/
/*	*/
/*err265:	*/
/*	erno=265;	*/
/*			/* put edit cannot handle a string of length <0.	*/
/*			   possible compiler error.   contain maint-pers.  */
/*	goto sandr;	*/
/*	*/
/*sandr:	*/
/*	call plio2_signal_$s_r_(psp,"ERROR","PVE",erno);	*/
/*	*/
/*data_format:	*/
/*	if ftype=a_format then	*/
/*		do;	*/
/*		if bc2="sc" then	*/
/*			do;	*/
/*			if type5.ff="v"	*/
/*			then do;	*/
/*				descriptive.prec = ps.vp->based_int;	*/
/*				ps.vp = addrel(ps.vp,1);	*/
/*			end;	*/
/*	*/
/*			if descriptive.prec>256 then goto err264;	*/
/*			if descriptive.prec<0   then goto err265;	*/
/*			substr(char256,1,descriptive.prec)=substr(ps.vp->based_chars,1,descriptive.prec);	*/
/*			end;	*/
/*	*/
/*		else	do;	*/
/*			call assign_type_d(ps.descr,psp,inpicture_p,intype,inscale_prec);	*/
/*	*/
/*			if ps.descr="0"b	*/
/*			then do;	*/
/*				intype = char_desc*2;	*/
/*				inprec = inpicture_p->picture_image.varlength;	*/
/*				inscale = 0;	*/
/*			end;	*/
/*	*/
/*			call assign_(addr(v_output),v_char_desc*2,256,ps.vp,intype,inscale_prec);	*/
/*	*/
/*			descriptive.prec = length(v_output);	*/
/*	*/
/*			if descriptive.prec>256 then goto err264;	*/
/*			if descriptive.prec<0   then goto err265;	*/
/*			substr(char256,1,descriptive.prec) = substr(v_output,1,descriptive.prec);	*/
/*			end;	*/
/*		goto put_field_string;	*/
/*	*/
/*		end;	*/
/*	*/
/*	if ftype=b_format then	*/
/*		do;	*/
/*		if bc2="sb" then	*/
/*			do;	*/
/*			if type5.ff="v"	*/
/*			then do;	*/
/*				descriptive.prec = ps.vp->based_int;	*/
/*				ps.vp = addrel(ps.vp,1);	*/
/*			end;	*/
/*	*/
/*			if descriptive.prec>256 then goto err264;	*/
/*			if descriptive.prec<0   then goto err265;	*/
/*			substr(vbit256,1,descriptive.prec)=substr(vp->based_bits,1,descriptive.prec);	*/
/*			end;	*/
/*	*/
/*		else	do;	*/
/*			call assign_type_d(ps.descr,psp,inpicture_p,intype,inscale_prec);	*/
/*	*/
/*			if ps.descr="0"b	*/
/*			then do;	*/
/*				call unpack_picture_(addr(buffer)->char1,inpicture_p->char1,ps.vp->char1);	*/
/*				call assign_(addr(vbit256),v_bit_desc*2,256,addr(buffer),intype,inscale_prec);	*/
/*			end;	*/
/*			else	call assign_(addr(vbit256),v_bit_desc*2,256,ps.vp,intype,inscale_prec);	*/
/*	*/
/*			descriptive.prec = length(vbit256);	*/
/*	*/
/*			if descriptive.prec>256 then goto err264;	*/
/*			if descriptive.prec<0   then goto err265;	*/
/*			end;	*/
/*	*/
/*		char256=(128)"0"||(128)"0";	*/
/*			do i= 1 to descriptive.prec;	*/
/*			if substr(vbit256,i,1) then substr(char256,i,1)="1";	*/
/*			end;	*/
/*	*/
/*		go to put_field_string;	*/
/*		end;	*/
/*	*/
/*	if ftype=c_format then	*/
/*		do;	*/
/*		icomplex=1;	*/
/*		format_bp=addrel(format_bp,5);	*/
/*		go to complex_edit_1;	*/
/*		end;	*/
/*	*/
/*ef_prep:		*/
/*	if nval<1 then goto too_few_params;	*/
/*	if iw>256 then go to  bad_string_size;	*/
/*	if iw<0 then goto bad_param_values;	*/
/*	if iw=0 then goto edit_exit;	*/
/*	*/
/*	lzero=0;	*/
/*	sign_char="+";	*/
/*	efbuf="";	*/
/*	*/
/*	if ftype=e_format then	*/
/*		do;	*/
/*	*/
/*			/* E format forms - AG94 preserves the Y33 forms	*/
/*	*/
/*			  zeros		nonzeros	*/
/*	*/
/*			     0e+000	    56e-123	s>0,d=0 [s=2,d=0]	*/
/*			 0.000e+000	56.123e-123	s>d>0   [s=5,d=3]	*/
/*			 0.000e+000	 0.123e-123	s=d>0   [s,d=3]	*/
/*			*/
/*	*/
/*			/* check parameters, make defaults */
/*		if nval<2 then id=iw-8;	*/
/*		else do;	*/
/*			id = format_block.val(2);	*/
/*			if id>59 then goto bad_param_values;	*/
/*			end;	*/
/*		if nval<3 then is=id+1;	*/
/*		else do;	*/
/*			is=format_block.val(3);	*/
/*			if id>59 then goto bad_param_values;	*/
/*			end;	*/
/*	*/
/*		if id<0 | is<id | is<1 then goto bad_param_values;	*/
/*		if id>iw then goto sig_size_for_ef;	*/
/*	*/
/*	*/
/*			/* prepare to convert INPUT to decimal float */
/*	*/
/*			/* NB: Technically, according to AG94-0, two	*/
/*			   conversions take place.  First, INPUT->FLO DEC(n_input)	*/
/*			   and then FLO DEC(n_input)->FLO DEC(n_format).	*/
/*	*/
/*			   However, AG94 says elsewhere that precision of	*/
/*			   floating point number is the _m_i_n_i_m_u_m number of	*/
/*			   digits which must be kept; I may elect to keep	*/
/*			   more;  and no double rounding may occur (except due to	*/
/*			   bin->dec) and so the single conversion done here	*/
/*			   is functionally equivalent to the double conversion	*/
/*			   specified.      */
/*	*/
/*		if icomplex=2 then	ddflo="1001100"b;	*/
/*		else		ddflo="1001010"b;	*/
/*		if is>59 then	*/
/*			do;	*/
/*			lzero=is-59;	*/
/*			ipreciz=59;	*/
/*			end;	*/
/*	*/
/*		else	ipreciz=is;	*/
/*	*/
/*		expstr="e+000";	*/
/*		if id>0 then idn=1; else idn=0;	*/
/*	*/
/*		addr(ddflo)->m_12=addr(ipreciz)->m_12;	*/
/*	*/
/*		call assign_type_d(ps.descr,psp,inpicture_p,intype,inscale_prec);	*/
/*		call assign_type_d(ddflo,psp,outpicture_p,outtype,outscale_prec);	*/
/*	*/
/*		if ps.descr="0"b	*/
/*		then do;	*/
/*			call unpack_picture_(addr(buffer)->char1,inpicture_p->char1,ps.vp->char1);	*/
/*			call assign_round_(addr(decimal),outtype,outscale_prec,addr(buffer),intype,inscale_prec);	*/
/*		end;	*/
/*		else	call assign_round_(addr(decimal),outtype,outscale_prec,ps.vp,intype,inscale_prec);	*/
/*	*/
/*			/* ************************** */
/*			/* 			*/
/*			/*  must contrive that this	*/
/*			/*  conversion is ROUNDED	*/
/*			/*			*/
/*			/* ************************** */
/*	*/
/*		if icomplex=2 then	substr(decimal,1,ipreciz+2)=	*/
/*				substr(decimal,ipreciz+3,ipreciz+2);	*/
/*	*/
/*			do i= 2 to ipreciz+1;	*/
/*			if substr(decimal,i,1)^="0" then go to float_signif;	*/
/*			end;	*/
/*	*/
/*		lzero=id+1+idn;	*/
/*		ief=260-lzero;	*/
/*		goto finish_e_picture;	*/
/*	*/
/*float_signif:	*/
/*		exp=0;	*/
/*		addr(exp)->last_char=substr(decimal,ipreciz+2,1);	*/
/*		if exp>=128 then exp=exp-256;	*/
/*		if i>2 then	*/
/*			do;	*/
/*			exp=exp+2-i;	*/
/*			decimal_temp=decimal;	*/
/*			substr(decimal,2,ipreciz)=	*/
/*			substr(decimal_temp,i,ipreciz+2-i)||	*/
/*			substr(decimal_temp,2,i-2);	*/
/*			end;	*/
/*		sign_char=substr(decimal,1,1);	*/
/*	*/
/*			/* make up non-trivial expstr */
/*	*/
/*		exp=exp +id +ipreciz -is;	*/
/*			/* shift decimal point to left (ipreciz),	*/
/*			   then to far right (is), then to proper	*/
/*			   decimal point (id)	*/
/*			*/
/*	*/
/*		if exp<0 then	*/
/*			do;	*/
/*			exp=-exp;	*/
/*			substr(expstr,2,1)="-";	*/
/*			end;	*/
/*		if exp>=100 then	*/
/*			do;	*/
/*			exp=exp-100;	*/
/*			substr(expstr,3,1)="1";	*/
/*			end;	*/
/*		substr(expstr,4,2)=dgt(divide(exp,10,35,0))||dgt(mod(exp,10));	*/
/*	*/
/*		ief=260 - is -idn;		/* leaving space for decimal point if necessary */
/*		topdigits=is - id;	*/
/*	*/
/*		if topdigits >= ipreciz then	*/
/*			do;		/* -xxxxxx000.00000e+000  */
/*					/* if id=0 then topdigits=is	*/
/*					   and topdigits >= ipreciz;	*/
/*					   thus, id=0 is handled here */
/*			substr(efbuf,ief,ipreciz)=substr(decimal,2,ipreciz);	*/
/*			lzero=lzero+idn;	*/
/*			end;	*/
/*	*/
/*		else	do;	*/
/*					/* -xxxxx.xx0000000e+000  */
/*					/* id^=0  */
/*			substr(efbuf,ief,topdigits)=substr(decimal,2,topdigits);	*/
/*			substr(efbuf,ief+topdigits+1,ipreciz-topdigits)=	*/
/*			substr(decimal,topdigits+2,  ipreciz-topdigits);	*/
/*	*/
/*			if is=id then	*/
/*				do;	*/
/*					/* -0.xxxxxxxx00000000e+000  */
/*				ief=ief-1;	*/
/*				substr(efbuf,ief,1)="0";	*/
/*				end;	*/
/*	*/
/*			end;	*/
/*	*/
/*finish_e_picture:	*/
/*		substr(efbuf,260-lzero,lzero)=substr(zeroes,1,lzero);	*/
/*		if idn=1 then substr(efbuf,259-id,1)=".";	*/
/*		substr(efbuf,260,5)=expstr;	*/
/*	*/
/*		goto put_field_ef;	*/
/*	*/
/*		end;	*/
/*	*/
/*	*/
/*	if ftype=f_format then	*/
/*		do;	*/
/*	*/
/*		/* F-format output forms:	*/
/*		zero		nonzero	*/
/*		    0		  123  	d=0	*/
/*		0.000		0.012	d>0	*/
/*		0.000	        345.123	d>0	*/
/*							*/
/*		if nval<1 then go to too_few_params;	*/
/*		if nval<2 then id=0;	*/
/*		else id=format_block.val(2);	*/
/*		if nval<3 then ip=0;	*/
/*		else ip=format_block.val(3);	*/
/*		if id<0 then go to bad_param_values;	*/
/*		if id>iw then goto sig_size_for_ef;	*/
/*	*/
/*		if icomplex=2 then	ddfix="100101100000000000000000000000111011"b;	*/
/*		else		ddfix="100100100000000000000000000000111011"b;	*/
/*	*/
/*			/* AG94-0 specifies two conversions:	*/
/*			   First, INPUT to DEC (fix/flo according to INPUT)	*/
/*					   (prec,scale according to INPUT)	*/
/*			   Multiply the result of this by 10**ip.	*/
/*			   Second, intermediate-value -> FIX DEC(p,q) where	*/
/*			   p and q come from the format:	*/
/*				if d=0, (w-1,0)	*/
/*				else    (w-2,d)	*/
/*			   I do not do these two conversions at present.	*/
/*			   As a result, my CHAR->F-format can preserve	*/
/*			   the fractional part of a CHAR like "23.456"	*/
/*			   whereas AG94-0 calls for CHAR->FIX DEC(59,0)	*/
/*			   which would lose the fractional part.	*/
/*	*/
/*			*/
/*	*/
/*	*/
/*		dscale=id+ip;	*/
/*		substr(ddfix,13,12)=addr(dscale)->m_12;	*/
/*	*/
/*		call assign_type_d(ps.descr,psp,inpicture_p,intype,inscale_prec);	*/
/*		call assign_type_d(ddfix,psp,outpicture_p,outtype,outscale_prec);	*/
/*	*/
/*		if ps.descr="0"b	*/
/*		then do;	*/
/*			call unpack_picture_(addr(buffer)->char1,inpicture_p->char1,ps.vp->char1);	*/
/*			call assign_round_(addr(decimal),outtype,outscale_prec,addr(buffer),intype,inscale_prec);	*/
/*		end;	*/
/*		else	call assign_round_(addr(decimal),outtype,outscale_prec,ps.vp,intype,inscale_prec);	*/
/*	*/
/*			/* ************************** */
/*			/* 			*/
/*			/*  must contrive that this	*/
/*			/*  conversion is ROUNDED	*/
/*			/*			*/
/*			/* ************************** */
/*	*/
/*		if icomplex=2 then substr(decimal,1,60)=substr(decimal,61,60);	*/
/*	*/
/*	*/
/*			do i=2 to 60;	*/
/*			if substr(decimal,i,1)^="0" then go to fixed_signif;	*/
/*			end;	*/
/*	*/
/*		ipreciz=1;	*/
/*		go to build_fixed_output;	*/
/*	*/
/*fixed_signif:	*/
/*		ipreciz=61-i;	*/
/*		sign_char=substr(decimal,1,1);	*/
/*	*/
/*build_fixed_output:	*/
/*		if id=0|id>=ipreciz then	*/
/*			do;	*/
/*			ief=265-ipreciz;	*/
/*			substr(efbuf,ief,ipreciz)=substr(decimal,61-ipreciz,ipreciz);	*/
/*			if id=0 then go to put_field_ef;	*/
/*	*/
/*			ief=263-id;	*/
/*			lpref=id+2-ipreciz;	*/
/*			substr(efbuf,ief,lpref)=substr(zeroes,2,lpref);	*/
/*			substr(efbuf,ief+1,1)=".";	*/
/*			end;	*/
/*	*/
/*		else	do;	*/
/*			ief=264-ipreciz;	*/
/*			substr(efbuf,ief,ipreciz+1)=	*/
/*			substr(decimal,i,ipreciz-id)||"."||	*/
/*			substr(decimal,61-id,id);	*/
/*			end;	*/
/*		goto put_field_ef;	*/
/*		end;	*/
/*	*/
/*	if ftype=picture_format	*/
/*	then	goto pic_format;	*/
/*	*/
/*	go to no_such_format_type;	*/
/*	*/
/*	*/
/*	*/
/*	*/
/*put_field_ef:	*/
/*	if sign_char="-" then	*/
/*		do;	*/
/*		ief=ief-1;	*/
/*		substr(efbuf,ief,1)="-";	*/
/*		end;	*/
/*	if (265-ief)>iw then	*/
/* sig_size_for_ef:	*/
/*	call plio2_signal_$s_(psp,"SIZE","put_edit",263);	*/
/*	substr(char256,1,iw)=substr(efbuf,265-iw,iw);	*/
/*	go to put_field_edit;	*/
/*	*/
/*	*/
/*	*/
/*put_field_string:	*/
/*	if nval<1 then iw=descriptive.prec;	*/
/*	if iw>256 then goto bad_string_size;	*/
/*	if iw<0   then goto bad_param_values;	*/
/*	*/
/*	if iw<descriptive.prec then call plio2_signal_$s_(psp,"STRINGSIZE","pve",-1);	*/
/*	else	if iw>descriptive.prec then substr(char256,descriptive.prec+1,iw-descriptive.prec)=" ";	*/
/*	goto put_field_edit;	*/
/*	*/
/*put_field_edit:	*/
/*		if iw>256 then goto bad_string_size;	*/
/*		if iw>0 then call plio2_put_util_$put_field_(psp,addr(char256),iw);	*/
/*edit_exit:	*/
/*		if icomplex=1 then	*/
/*			do;	*/
/*			icomplex=2;	*/
/*			format_bp=addrel(format_bp,5);	*/
/*			go to complex_edit_1;	*/
/*			end;	*/
/*		return;	*/
/*	*/
pve_error:entry(pspp);		/* entry added for use by pl1_operators when	*/
			/* in checking a f_format finds that the size	*/
			/* has been violated.  This way the buffer gets	*/
			/* put out and full processing of the condiition	*/
			/* is possible.*/

	psp=pspp;
	call plio2_signal_$s_(psp,"SIZE","put_edit",263);
	return;


end plio2_pve_;
