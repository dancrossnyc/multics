/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/*	Modified: 05/01/78 by PCK to implement unsigned binary
	Modified: 9 August 1978 by PCK to fix 1768
	Modified: 25 Apr 1979 by PCK to implement 4-bit decimal */

dnd:proc(d,p,code) options(support);
	dcl d bit(36) aligned, p ptr, code fixed bin(15);
	/* d is descriptor, p points at D_structure (see below), and code=1 for failure */

/* updated 5-4-71 */

	dcl 1 D aligned based(q),	/* this is the D_STRUCTURE ! ! !  */
		2 type5 aligned,
			3 ( cr,bd,ff,ls,pack) char(1) unaligned,
		2 ( precx,
		    scalex,
		    bit_lengthx,
		    typex ) fixed bin(15);




	dcl ( prec, scale,  bit_length,type ) fixed bin(15);
	dcl q ptr;
dcl (addr, string, substr) builtin;
	dcl WS fixed bin(15);

	dcl fixed builtin;
% include plio2_descriptor_forms;
%include std_descriptor_types;

	/* 	START */
	WS=0;
common:

	q=p;
	desc_ptr=addr(d);
	code=0;



	if nd_first then
		do;
		type=fixed(nd_type,6,0);
		if type=0 then go to bad_type;
		if type > cplx_flt_dec_9bit_dtype & type < real_fix_dec_9bit_ls_overp_dtype then		/* if not an arithmetic data type then */
			do;
			if WS=0 then go to bad_type;
			if type < bit_dtype | type > varying_char_dtype then go to bad_type;	/* if not a string data type then */
			addr(D.type5)->based_char5=string_types(type - bit_dtype + 1);
			D.precx=fixed(substr(desc_ptr->based_bits,13,24),24,0);
			go to string_exit;
			end;

		if type <= cplx_flt_dec_9bit_dtype
		then addr(D.type5)->based_char5=types_table(type)||" ";
		else if type<=real_fix_bin_2_uns_dtype
		     then addr(D.type5)->based_char5=types_table(type - real_fix_bin_1_uns_dtype + real_fix_bin_1_dtype) || " ";
		     else addr(D.type5)->based_char5=types_table(type - real_fix_dec_4bit_bytealigned_ls_dtype + real_fix_dec_9bit_ls_dtype) || " ";

		prec=fixed(nd_prec,12,0);

		scale=fixed(nd_scale,12,0);
		if scale>100000000000b then  scale=scale - 1000000000000b;

		if nd_pack then D.type5.pack="p";

		if D.type5.bd="d" then
			do;
			if D.type5.ff="l" then bit_length=prec+2;
			else bit_length=prec+1;

			if type <= cplx_flt_dec_9bit_dtype
			then bit_length=bit_length*9;	/* chars are 9 bits */
			else bit_length=(bit_length+mod(bit_length,2))*4.5; /* 2 digits per character */
			end;
		else	do;
			if nd_pack then
				do;
				if D.type5.ff="l" then bit_length=prec+9;
				else if type <= real_fix_bin_2_dtype
				     then bit_length = prec + 1;
				     else bit_length = prec;
				end;
			else go to unpacked_binary;
			end;
		end;

	else	do;
		type=fixed(od_type,15,0);
		if type=0
		then	do;
				/* descriptor="0"b is the signal for a pictured item */
			string (D.type5) = "p    ";
			return;
			end;
		if type>8 then
			do;
			if WS=0 then go to bad_type;
			if type>522|type<519 then go to bad_type;
			addr(D.type5)->based_char5=string_types(type-514);
			D.precx=fixed(substr(desc_ptr->based_bits,19,18),18,0);
string_exit:
			if D.bd="b" then D.bit_lengthx=D.precx;
			else D.bit_lengthx=9*D.precx;
			return;
			end;

		prec=fixed(od_prec,9,0);

		scale=fixed(od_scale,8,0);
		if scale>10000000b then scale=scale-100000000b;

		addr(D.type5)->based_char5=types_table(type)||" ";

unpacked_binary:
		if D.type5.ls="l" then bit_length=72;
		else bit_length=36;
		end;


	if prec>63 then
		do;
		if D.type5.bd="d" then goto bad_prec;
		if D.type5.ff="l" then goto bad_prec;
		if prec>71 then goto bad_prec;
		end;
	D.precx=prec;


	if scale>127 then goto bad_scale;
	if scale<-128 then goto bad_scale;
	D.scalex=scale;

	D.typex=type;
	D.bit_lengthx=bit_length;

	return;

bad_prec:
bad_scale:
bad_type:
	code=1;
	return;

with_strings:entry(d,p,code);
	WS=1;
	go to common;

	dcl string_types(8) char(4) static internal init(
		"sb n", /*	514	*/
		"sbvn", /*	520	*/
		"sc n", /*	524	*/
		"scvn", /*	530	*/
		"sb o", /*	01007	*/
		"sc o", /*	01010	*/
		"sbvo", /*	01011	*/
		"scvo"	 /*	01012	*/	);


end;
