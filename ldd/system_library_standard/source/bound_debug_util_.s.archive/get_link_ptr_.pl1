/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* format: style4,delnl,insnl,ifthenstmt,ifthen,indnoniterend,indend,^indproc */

get_link_ptr_:
     proc (loc_ptr, link_ptr, entry_ptr);

/* This procedure  is given a pointer to a text location and tries to find an external reference
   just before the location.   If a link reference is found, a pointer to the original link and the snapped
   link itself are returned.  If a text-to-text transfer appears to be found, a pointer to the target
   is returned.  In the latter case, the caller is responsible for determining that
   the returned pointer in fact points to an entry sequence (this can be done by
   calling get_entry_name_).  */
/* coded by M. Weaver 7/5/73 */
/* last modified by M. Weaver 10/17/73 */
/* last modified by M. Weaver 1/10/74 to change opcodes to 10 bits */
/* last modified by J.M. Broughton on 2 July 1975 to prevent fault when
   rel (loc_ptr) is small, i.e. -~ 0  */
/* Modified 2/82 BIM to make sure temp_ptr is initialized when used. */


declare  (loc_ptr, link_ptr, temp_ptr, segptr, entry_ptr, ls_ptr) ptr;
declare  based_ptr ptr based;

declare  i fixed bin;
declare  type fixed bin (2);
declare  link_offset fixed bin (18);
declare  bitcnt fixed bin (24);
declare  code fixed bin (35);

declare  lang char (8) aligned;

declare  (
         epp2 init ("0111010100"b),
         tra init ("1110010000"b),
         tsp3 init ("0101110110"b)
         ) bit (10) aligned int static options (constant);

declare  object_info_$display entry (ptr, fixed bin (24), ptr, fixed bin (35));
declare  hcs_$status_mins entry (ptr, fixed bin (2), fixed bin (24), fixed bin (35));
declare  component_info_$offset entry (ptr, fixed bin (18), ptr, fixed bin (35));

declare  (addr, addrel, baseno, bin, null, rel, ptr) builtin;

%page;
%include object_info;
declare  1 oi aligned like object_info;
%page;
%include component_info;
%page;
%include stack_header;
%page;
%include lot;
%page;
%include instruction;
%page;
%include object_link_dcls;



	link_ptr, entry_ptr, temp_ptr = null;		/* initialize output args */

	segptr = ptr (loc_ptr, 0);			/* get ptr to beg of seg */

/* get ptrs to sections of object seg and determine language */

	call hcs_$status_mins (segptr, type, bitcnt, code);
	if code ^= 0 then return;

	oi.version_number = object_info_version_2;
	call object_info_$display (segptr, bitcnt, addr (oi), code);
	if code ^= 0 then return;

	if oi.compiler = "binder" then do;		/* find language of component */
	     call component_info_$offset (loc_ptr, bin (rel (loc_ptr), 18), addr (ci), code);
	     if code = 0 then
		lang = ci.compiler;
	     else lang = "binder";
	     end;
	else lang = oi.compiler;

/* now look for external reference; if proc is pl1 type, we know what code should look like */

	instruction_ptr = loc_ptr;

	if (lang = "pl1") | (lang = "v2pl1") | (lang = "fortran") | (lang = "PL/I") then do;
						/* look for epp2  pr4|k,* */

	     if instruction_common.opcode = epp2	/* at link ref; probably linkage error */
		| instruction_common.opcode = tsp3	/* transfer to math operator is by link */
	     then temp_ptr = loc_ptr;

	     else do;				/* should be at transfer to pl1 call operator */

		if lang = "pl1" then do;		/* version 1 */
		     if rel (temp_ptr) < bit (bin (2, 18)) then return;
		     temp_ptr = addrel (loc_ptr, -2);
		     end;
		else do;				/* version 2 */
		     if rel (temp_ptr) = (18)"0"b then return;
		     temp_ptr = addrel (loc_ptr, -1);
		     end;

		if temp_ptr = null then return;
		if temp_ptr -> instruction_common.opcode ^= epp2 then return;

		end;

	     if temp_ptr = null then return;
	     if temp_ptr -> instruction_common.pr	/* has a PR */
	     then if temp_ptr -> instruction_pr.address.pr = 4
						/* PR4 */
		     & temp_ptr -> instruction_pr.tag = "010100"b /* ,* */ then
		     go to get_link;
		else return;
	     else if temp_ptr -> instruction_common.tag = ""b then go to get_ttr;
						/* assume text-text transfer */
	     else return;

	     end;

	else do;					/* not pl1 */

	     temp_ptr = loc_ptr;
	     do i = 1 to 3;				/* look back in text */

		if temp_ptr -> instruction_common.pr	/* PR */
		     & temp_ptr -> instruction_pr.address.pr = 4 & temp_ptr -> instruction_pr.tag = "010100"b then
		     go to get_link;		/* something  pr4|k,* */

		if rel (temp_ptr) = (18)"0"b then go to check_for_tra;
		temp_ptr = addrel (temp_ptr, -1);	/* move ptr back */

		end;

check_for_tra:
	     temp_ptr = loc_ptr;			/* reset */

	     if temp_ptr -> instruction_common.opcode = tra & temp_ptr -> instruction_common.tag = "0"b then
		go to get_ttr;			/* have tra  n */

	     return;				/* couldn't find anything */

	     end;

get_link:						/* instruction address should be the offset of the link in the linkage section */
						/* use original object linkage section for link_ptr and active
						   linkage section fo entry_ptr */
	link_offset = temp_ptr -> instruction_pr.address.offset;

	link_ptr = addrel (oi.linkp, link_offset);

	if link_ptr -> object_link.tag ^= "100110"b then
	     link_ptr = null;			/* not ft2 */

	else do;					/* find link being used; will probably be snapped */

	     sb = ptr (addr (temp_ptr), 0);		/* get ptr to stack header */

	     ls_ptr = lot_ptr -> lot.lp (bin (baseno (segptr), 18));

	     entry_ptr = addrel (ls_ptr, link_offset) -> based_ptr;
						/* pick up link itself */

	     if addr (entry_ptr) -> object_link.tag = "100110"b then entry_ptr = null;
						/* not snapped yet */
	     end;

	return;


get_ttr:						/* instruction address should be offset in text of entry sequence */
	entry_ptr = ptr (loc_ptr, temp_ptr -> instruction_off.offset);

	return;

     end get_link_ptr_;
