/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

find_ls_owner_:	proc(lptr, target, ls_offset);

/* This procedure takes a pointer, presumably to the combined linkage segment, and
	returns the segment number of the owning procedure.
	If the pointer is not to the cls or if it is not a pointer,
	-1 is returned */

/* initially coded as trace_link_ by M. Weaver 17 June 1971 */
/* last modified by M. Weaver 21 August 1971 */
/* recoded as find_ls_owner_ by M. Weaver 11 June 1973 */
/* modified 14 September 1978 by M. Weaver to initialize after_beg, before_end */




/* numbers */

     dcl	(lng, i, hcsct, highct) fixed bin;
     dcl	(target, ls_offset) fixed bin(18);
     dcl	code fixed bin(35);

/* character strings */

     dcl	(dname, pdname) char(168) aligned;
     dcl	(ename, pename) char(32) aligned;

/* bit strings */

     dcl  (tseg, toff, closest_off, lsoff) bit(18) aligned;
     dcl	check_sw bit(1) aligned;

/* pointers */

     dcl	(lptr, linkp based) ptr;

/* entries */

     dcl  hcs_$high_low_seg_count entry(fixed bin, fixed bin);

/* structures */

     dcl	1 lot(0:999) based(lot_ptr) aligned,
		2 (seg, off) bit(18) unal;

/* builtins */
     dcl	(addr, baseno, fixed, ptr, null, rel, substr) builtin;
/**/
%include stack_header;

%include its;

/* * * * * * * * * * * * * * * * * * * * */
	check_sw = "0"b;
	target = -1;			/* initialize; return this if error */
	ls_offset = 0;
common:	if lptr = null then go to return;		/* don't risk simfault */

	/* check to see if we have a real pointer */
	if addr(lptr)->its.its_mod ^= "100011"b then go to return;		/* not a ptr */

	sb = ptr(addr(tseg),0);				/* get ptr to base of stack */

	call hcs_$high_low_seg_count(highct, hcsct);	/* find range */

	/* copy sections of lptr to save accessing time */
	tseg = baseno(lptr);
	toff = rel(lptr);

	if check_sw then go to check;		/* see if ptr points to a cls */

	closest_off = "0"b;		/* keep track of closest linkage header */

	/* loop through LOT looking for a match; if don't find any, lptr doesn't
	   point to a linkage section */
	/* pointer to LOT (linkage offset table) is conveniently stored in stack header */
	do i = hcsct to hcsct + highct;	/* check all possible segs; link won't be pointing to a ring 0 seg */
		lsoff = lot_ptr -> lot(i).off;  /* isolate offset of seg's ls */
		if lot_ptr->lot(i).seg = tseg		/* get correct segment */
		   then if lsoff <= toff	/* could be in range */
		      then if lsoff >= closest_off	/* got better value */
		         then do;
				closest_off = lsoff;	/* update */
				target = i;
				ls_offset = bin(closest_off, 18);
				end;
		end;				/* finished looking */
	return;			/* used only for find_ls_owner_ entry */

check:	stack_seg = baseno(sb);		/* get segno of stack in case cls is there */

	/* assume LOT is contiguous with cls if they are in same seg */
	/* also assume that a ls in a seg other than stack is combined only with other ls's */

	if (baseno(lot_ptr) = tseg) & (rel(lot_ptr) <= toff) then after_beg = "1"b;

	do i = hcsct to hcsct + highct;	/* may need to look at entire LOT */
		lsoff = lot_ptr -> lot(i).off; /* extract ahead of time */
		if lot_ptr -> lot(i).seg = tseg /* same seg */
		     then if tseg ^= stack_seg then do;
yes:			return ("1"b);
			end;
		     else if lsoff > toff
			then if after_beg then go to yes;
			else before_end = "1"b;
		     else if lsoff = toff then go to yes;
		     else if lsoff < toff
			then if before_end then go to yes;
			else after_beg = "1"b;
		end;
	if after_beg & before_end then go to yes;

return:
	if check_sw then return ("0"b);	/* all done */
	else return;
/**/
is_cls_:	entry(lptr) returns(bit(1) aligned);

declare	(after_beg, before_end) bit(1) aligned;
declare	stack_seg bit(18) aligned;

	after_beg, before_end = "0"b;
	check_sw = "1"b;

	go to common;

	end find_ls_owner_;
