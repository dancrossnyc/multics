/****^  *************************************************************************
        *                                                                       *
        * Copyright (c) 1980 by Centre Interuniversitaire de Calcul de Grenoble *
        * and Institut National de Recherche en Informatique et Automatique     *
        *                                                                       *
        ************************************************************************* */


/****^  HISTORY COMMENTS:
  1) change(86-09-05,JMAthane), approve(86-09-05,MCR7525),
     audit(86-09-11,Martinson), install(86-11-12,MR12.0-1212):
     Added runtime_symbol_info_$subrange entry which was missing.  Added
     has_dimensions and has_subrange_limits fields in type_info record.
     Structure version numbers have not been changed since this change does not
     affect existing programs.
                                                   END HISTORY COMMENTS */

/* Written June 83 JMAthane Grenoble University */

/* This set of entries return information about both old (fixed format)
   and new (variable format designed for PASCAL) symbol tables */


/* The include segment runtime_symbol_info_.incl.pl1 contains declarations
          of these entries and of the structures filled by them.  */
/* Changed to use include file declarations 09/02/83 S. Herbst */
/* Added version strings to structures, status codes to entries using them 10/05/83 S. Herbst */
/* Added subrange entry, and filling of new fields in type_info
(size_is_encoded, has_subrange_limits and has_dimensions)	JMAthane 08/31/84 */

runtime_symbol_info_: proc;

	dcl     bp		 ptr parameter;
	dcl     info_ptr		 ptr parameter;
	dcl     code		 fixed bin (35);

	dcl     i			 fixed bin;
	dcl     work		 ptr;
	dcl     (addr, addrel, bin, fixed, min, null, size)
				 builtin;

	dcl     error_table_$unimplemented_version
				 fixed bin (35) external;
%page;
son: entry (bp) returns (ptr);

	if bp -> pascal_symbol_node_header.flags.version_flag then
	     if bp -> runtime_symbol.son = "0"b then return (null);
	     else return (addrel (bp, bp -> runtime_symbol.son));

	if ^bp -> pascal_symbol_node_header.flags.son_level then return (null);

	i = size (pascal_symbol_node_header);
	if bp -> pascal_symbol_node_header.flags.name_next then i = i + size (pascal_name_next);
	if bp -> pascal_symbol_node_header.flags.base_type_info then i = i + size (pascal_base_type_info);
	if bp -> pascal_symbol_node_header.flags.address then i = i + size (pascal_address);
	if bp -> pascal_symbol_node_header.flags.father_brother then i = i + size (pascal_father_brother);
	work = addrel (bp, i);
	if work -> pascal_son_level.son = 0 then return (null);
	return (addrel (bp, work -> pascal_son_level.son));
%page;
father_type: entry (bp) returns (ptr);

	if bp -> pascal_symbol_node_header.flags.version_flag then
	     return (null);

	if ^bp -> pascal_symbol_node_header.flags.father_type_successor then return (null);

	i = size (pascal_symbol_node_header);
	if bp -> pascal_symbol_node_header.flags.name_next then i = i + size (pascal_name_next);
	if bp -> pascal_symbol_node_header.flags.base_type_info then i = i + size (pascal_base_type_info);
	if bp -> pascal_symbol_node_header.flags.address then i = i + size (pascal_address);
	if bp -> pascal_symbol_node_header.flags.father_brother then i = i + size (pascal_father_brother);
	if bp -> pascal_symbol_node_header.flags.son_level then i = i + size (pascal_son_level);
	work = addrel (bp, i);
	if work -> pascal_father_type_successor.father_type = 0 then return (null);
	return (addrel (bp, work -> pascal_father_type_successor.father_type));
%page;
successor: entry (bp) returns (ptr);

	if bp -> pascal_symbol_node_header.flags.version_flag then
	     return (null);

	if ^bp -> pascal_symbol_node_header.flags.father_type_successor then return (null);

	i = size (pascal_symbol_node_header);
	if bp -> pascal_symbol_node_header.flags.name_next then i = i + size (pascal_name_next);
	if bp -> pascal_symbol_node_header.flags.base_type_info then i = i + size (pascal_base_type_info);
	if bp -> pascal_symbol_node_header.flags.address then i = i + size (pascal_address);
	if bp -> pascal_symbol_node_header.flags.father_brother then i = i + size (pascal_father_brother);
	if bp -> pascal_symbol_node_header.flags.son_level then i = i + size (pascal_son_level);
	work = addrel (bp, i);
	if work -> pascal_father_type_successor.successor = 0 then return (null);
	return (addrel (bp, work -> pascal_father_type_successor.successor));
%page;
level: entry (bp) returns (fixed bin);

	if bp -> pascal_symbol_node_header.flags.version_flag then
	     return (fixed (bp -> runtime_symbol.level, 6));

	if ^bp -> pascal_symbol_node_header.flags.son_level then return (0);

	i = size (pascal_symbol_node_header);
	if bp -> pascal_symbol_node_header.flags.name_next then i = i + size (pascal_name_next);
	if bp -> pascal_symbol_node_header.flags.base_type_info then i = i + size (pascal_base_type_info);
	if bp -> pascal_symbol_node_header.flags.address then i = i + size (pascal_address);
	if bp -> pascal_symbol_node_header.flags.father_brother then i = i + size (pascal_father_brother);
	return (addrel (bp, i) -> pascal_son_level.level);
%page;
type: entry (bp, info_ptr, code);

	dcl     1 type_info		 like runtime_type_info based (info_ptr);

	if type_info.version ^= RUNTIME_TYPE_INFO_VERSION_1 then do;
		code = error_table_$unimplemented_version;
		return;
	     end;

	code = 0;

	if bp -> pascal_symbol_node_header.version_flag then do;
		type_info.aligned = bp -> runtime_symbol.aligned;
		type_info.packed = bp -> runtime_symbol.packed;
		type_info.scale = fixed (bp -> runtime_symbol.scale, 8);
		type_info.size = bp -> runtime_symbol.size;
		type_info.size_is_encoded = is_encoded (type_info.size);
		type_info.type = fixed (bp -> runtime_symbol.type, 6);
		type_info.base_type = 0;
		type_info.type_addr = null;
		type_info.base_type_addr = null;
		type_info.has_dimensions = (bp -> runtime_symbol.ndims ^= "0"b);
		type_info.has_subrange_limits = "0"b;
		return;
	     end;

	type_info.aligned = bp -> pascal_symbol_node_header.aligned;
	type_info.packed = bp -> pascal_symbol_node_header.packed;
	type_info.type = bp -> pascal_symbol_node_header.type;
	type_info.size_is_encoded = bp -> pascal_symbol_node_header.size_is_encoded;
	type_info.has_dimensions = bp -> pascal_symbol_node_header.array_info;
	type_info.has_subrange_limits = bp -> pascal_symbol_node_header.subrange_limits;
	type_info.scale = 0;
	if bp -> pascal_symbol_node_header.type_offset = 0 then
	     type_info.type_addr = null;
	else
	     type_info.type_addr = addrel (bp, bp -> pascal_symbol_node_header.type_offset);
	if ^bp -> pascal_symbol_node_header.base_type_info then do;
		type_info.base_type = 0;
		type_info.base_type_addr = null;
		if ^bp -> pascal_symbol_node_header.size then type_info.size = 0;
		else do;
			i = size (pascal_symbol_node_header);
			if bp -> pascal_symbol_node_header.flags.name_next then
			     i = i + size (pascal_name_next);
			if bp -> pascal_symbol_node_header.flags.base_type_info then
			     i = i + size (pascal_base_type_info);
			if bp -> pascal_symbol_node_header.flags.address then
			     i = i + size (pascal_address);
			if bp -> pascal_symbol_node_header.flags.father_brother then
			     i = i + size (pascal_father_brother);
			if bp -> pascal_symbol_node_header.flags.son_level then
			     i = i + size (pascal_son_level);
			if bp -> pascal_symbol_node_header.flags.father_type_successor then
			     i = i + size (pascal_father_type_successor);
			work = addrel (bp, i);
			type_info.size = work -> pascal_size;
		     end;
	     end;
	else do;
		i = size (pascal_symbol_node_header);
		if bp -> pascal_symbol_node_header.flags.name_next then i = i + size (pascal_name_next);
		work = addrel (bp, i);
		type_info.base_type = work -> pascal_base_type_info.base_type;
		if work -> pascal_base_type_info.base_type_offset = 0 then
		     type_info.base_type_addr = null;
		else
		     type_info.base_type_addr = addrel (bp, work -> pascal_base_type_info.base_type_offset);
		if ^bp -> pascal_symbol_node_header.size then type_info.size = 0;
		else do;
			if bp -> pascal_symbol_node_header.flags.base_type_info then
			     i = i + size (pascal_base_type_info);
			if bp -> pascal_symbol_node_header.flags.address then
			     i = i + size (pascal_address);
			if bp -> pascal_symbol_node_header.flags.father_brother then
			     i = i + size (pascal_father_brother);
			if bp -> pascal_symbol_node_header.flags.son_level then
			     i = i + size (pascal_son_level);
			if bp -> pascal_symbol_node_header.flags.father_type_successor then
			     i = i + size (pascal_father_type_successor);
			work = addrel (bp, i);
			type_info.size = work -> pascal_size;
		     end;
	     end;
	return;
%page;
father: entry (bp) returns (ptr);

	if bp -> pascal_symbol_node_header.flags.version_flag then
	     if bp -> runtime_symbol.father = "0"b then return (null);
	     else return (addrel (bp, bp -> runtime_symbol.father));

	if ^bp -> pascal_symbol_node_header.flags.father_brother then return (null ());

	i = size (pascal_symbol_node_header);
	if bp -> pascal_symbol_node_header.flags.name_next then i = i + size (pascal_name_next);
	if bp -> pascal_symbol_node_header.flags.base_type_info then i = i + size (pascal_base_type_info);
	if bp -> pascal_symbol_node_header.flags.address then i = i + size (pascal_address);
	work = addrel (bp, i);
	if work -> pascal_father_brother.father = 0 then return (null);
	return (addrel (bp, work -> pascal_father_brother.father));
%page;
brother: entry (bp) returns (ptr);

	if bp -> pascal_symbol_node_header.flags.version_flag then
	     if bp -> runtime_symbol.brother = "0"b then return (null);
	     else return (addrel (bp, bp -> runtime_symbol.brother));

	if ^bp -> pascal_symbol_node_header.flags.father_brother then return (null ());

	i = size (pascal_symbol_node_header);
	if bp -> pascal_symbol_node_header.flags.name_next then i = i + size (pascal_name_next);
	if bp -> pascal_symbol_node_header.flags.base_type_info then i = i + size (pascal_base_type_info);
	if bp -> pascal_symbol_node_header.flags.address then i = i + size (pascal_address);
	work = addrel (bp, i);
	if work -> pascal_father_brother.brother = 0 then return (null);
	else
	     return (addrel (bp, work -> pascal_father_brother.brother));
%page;
name: entry (bp) returns (ptr);

	if bp -> pascal_symbol_node_header.flags.version_flag then
	     if bp -> runtime_symbol.name = "0"b then return (null);
	     else return (addrel (bp, bp -> runtime_symbol.name));

	if ^bp -> pascal_symbol_node_header.flags.name_next then return (null);

	work = addrel (bp, size (pascal_symbol_node_header));
	if work -> pascal_name_next.name = 0 then return (null);
	return (addrel (bp, work -> pascal_name_next.name));
%page;

next: entry (bp) returns (ptr);

	if bp -> pascal_symbol_node_header.flags.version_flag then do;
		if bp -> runtime_symbol.next = "0"b then return (null);
		return (addrel (bp, bin (bp -> runtime_symbol.next, 14) - 16384));
	     end;

	if ^bp -> pascal_symbol_node_header.flags.name_next then return (null);

	work = addrel (bp, size (pascal_symbol_node_header));
	if work -> pascal_name_next.next_token = 0 then return (null);
	return (addrel (bp, work -> pascal_name_next.next_token));
%page;
address: entry (bp, info_ptr, code);

	dcl     1 address_info	 like runtime_address_info based (info_ptr);

	if address_info.version ^= RUNTIME_ADDRESS_INFO_VERSION_1 then do;
		code = error_table_$unimplemented_version;
		return;
	     end;

	code = 0;

	if bp -> pascal_symbol_node_header.flags.version_flag then do;
		address_info.location = fixed (bp -> runtime_symbol.location, 18);
		address_info.class = fixed (bp -> runtime_symbol.class, 4);
		address_info.units = fixed (bp -> runtime_symbol.units, 2);
		address_info.use_digit = fixed (bp -> runtime_symbol.use_digit, 1);
		if bp -> runtime_symbol.bits.simple then do;
			address_info.offset_is_encoded = "0"b;
			address_info.offset = 0;
		     end;
		else do;
			address_info.offset = bp -> runtime_symbol.offset;
			address_info.offset_is_encoded = is_encoded (address_info.offset);
		     end;
		return;
	     end;

	if ^bp -> pascal_symbol_node_header.flags.address then do;
		address_info.class = 0;
		return;
	     end;

	i = size (pascal_symbol_node_header);
	if bp -> pascal_symbol_node_header.flags.name_next then i = i + size (pascal_name_next);
	if bp -> pascal_symbol_node_header.flags.base_type_info then i = i + size (pascal_base_type_info);
	work = addrel (bp, i);
	address_info.location = work -> pascal_address.location;
	address_info.class = work -> pascal_address.class;
	address_info.units = fixed (work -> pascal_address.units, 2);
	address_info.use_digit = fixed (work -> pascal_address.use_digit, 1);
	address_info.offset_is_encoded = work -> pascal_address.offset_is_encoded;

	if ^bp -> pascal_symbol_node_header.flags.offset then address_info.offset = 0;
	else do;
		i = i + size (pascal_address);
		if bp -> pascal_symbol_node_header.flags.father_brother then
		     i = i + size (pascal_father_brother);
		if bp -> pascal_symbol_node_header.flags.son_level then
		     i = i + size (pascal_son_level);
		if bp -> pascal_symbol_node_header.flags.father_type_successor then
		     i = i + size (pascal_father_type_successor);
		if bp -> pascal_symbol_node_header.flags.size then
		     i = i + size (pascal_size);
		address_info.offset = addrel (bp, i) -> pascal_offset;
	     end;
	return;
%page;
array_dims: entry (bp) returns (fixed bin);

	if bp -> pascal_symbol_node_header.version_flag then return (bp -> runtime_symbol.ndims);

	if ^bp -> pascal_symbol_node_header.array_info then return (0);

	i = size (pascal_symbol_node_header);
	if bp -> pascal_symbol_node_header.flags.name_next then i = i + size (pascal_name_next);
	if bp -> pascal_symbol_node_header.flags.base_type_info then i = i + size (pascal_base_type_info);
	if bp -> pascal_symbol_node_header.flags.address then i = i + size (pascal_address);
	if bp -> pascal_symbol_node_header.flags.father_brother then i = i + size (pascal_father_brother);
	if bp -> pascal_symbol_node_header.flags.son_level then i = i + size (pascal_son_level);
	if bp -> pascal_symbol_node_header.flags.father_type_successor then i = i + size (pascal_father_type_successor);
	if bp -> pascal_symbol_node_header.flags.size then i = i + size (pascal_size);
	if bp -> pascal_symbol_node_header.flags.offset then i = i + size (pascal_offset);
	if bp -> pascal_symbol_node_header.flags.subrange_limits then i = i + size (pascal_subrange_limits);
	return (addrel (bp, i) -> pascal_array_info.ndims);
%page;
array: entry (bp, info_ptr, code);

	dcl     1 array_info	 like runtime_array_info based (info_ptr);

	if array_info.version ^= RUNTIME_ARRAY_INFO_VERSION_1 then do;
		code = error_table_$unimplemented_version;
		return;
	     end;

	code = 0;

	if bp -> pascal_symbol_node_header.version_flag then do;
		n_dims = fixed (bp -> runtime_symbol.ndims, 6);
		unspec (array_info) = "0"b;
		array_info.ndims = n_dims;
		if n_dims > 0 then do;
			array_info.use_digit = fixed (bp -> runtime_symbol.use_digit, 1);
			array_info.array_units = fixed (bp -> runtime_symbol.array_units, 2);
			array_info.virtual_origin = bp -> runtime_symbol.virtual_org;
			array_info.virtual_origin_is_encoded = is_encoded (array_info.virtual_origin);
			do i = 1 to min (n_dims, 16);
			     array_info.bounds (i).lower = bp -> runtime_symbol.bounds (i).lower;
			     array_info.bounds (i).upper = bp -> runtime_symbol.bounds (i).upper;
			     array_info.bounds (i).multiplier = bp -> runtime_symbol.bounds (i).multiplier;
			     array_info.bounds (i).lower_is_encoded = is_encoded (array_info.bounds (i).lower);
			     array_info.bounds (i).upper_is_encoded = is_encoded (array_info.bounds (i).upper);
			     array_info.bounds (i).multiplier_is_encoded = is_encoded (array_info.bounds (i).multiplier);
			     array_info.bounds (i).subscript_type = 0;
			     array_info.bounds (i).subscript_type_addr = null;
			end;
		     end;
		return;
	     end;

	if ^bp -> pascal_symbol_node_header.array_info then return;

	i = size (pascal_symbol_node_header);
	if bp -> pascal_symbol_node_header.flags.name_next then i = i + size (pascal_name_next);
	if bp -> pascal_symbol_node_header.flags.base_type_info then i = i + size (pascal_base_type_info);
	if bp -> pascal_symbol_node_header.flags.address then i = i + size (pascal_address);
	if bp -> pascal_symbol_node_header.flags.father_brother then i = i + size (pascal_father_brother);
	if bp -> pascal_symbol_node_header.flags.son_level then i = i + size (pascal_son_level);
	if bp -> pascal_symbol_node_header.flags.father_type_successor then i = i + size (pascal_father_type_successor);
	if bp -> pascal_symbol_node_header.flags.size then i = i + size (pascal_size);
	if bp -> pascal_symbol_node_header.flags.offset then i = i + size (pascal_offset);
	if bp -> pascal_symbol_node_header.flags.subrange_limits then i = i + size (pascal_subrange_limits);
	work = addrel (bp, i);
	array_info.ndims, n_dims = work -> pascal_array_info.ndims;
	array_info.array_units = work -> pascal_array_info.array_units;
	array_info.virtual_origin_is_encoded = work -> pascal_array_info.virtual_origin_is_encoded;
	array_info.virtual_origin = work -> pascal_array_info.virtual_origin;
	array_info.use_digit = work -> pascal_array_info.use_digit;
	do i = 1 to min (n_dims, 16);
	     array_info.bounds (i).lower_is_encoded = work -> pascal_array_info.bounds (i).lower_is_encoded;
	     array_info.bounds (i).upper_is_encoded = work -> pascal_array_info.bounds (i).upper_is_encoded;
	     array_info.bounds (i).multiplier_is_encoded = work -> pascal_array_info.bounds (i).multiplier_is_encoded;
	     array_info.bounds (i).lower = work -> pascal_array_info.bounds (i).lower;
	     array_info.bounds (i).upper = work -> pascal_array_info.bounds (i).upper;
	     array_info.bounds (i).multiplier = work -> pascal_array_info.bounds (i).multiplier;
	     array_info.bounds (i).subscript_type = work -> pascal_array_info.bounds (i).subscript_type;
	     if work -> pascal_array_info.bounds (i).subscript_type_offset ^= 0 then
		array_info.bounds (i).subscript_type_addr =
		     addrel (bp, work -> pascal_array_info.bounds (i).subscript_type_offset);
	     else
		array_info.bounds (i).subscript_type_addr = null;
	end;
	return;
%page;
subrange: entry (bp, info_ptr, code);

	dcl     1 subrange_info	 like runtime_subrange_info based (info_ptr);

	if subrange_info.version ^= RUNTIME_SUBRANGE_INFO_VERSION_1 then do;
		code = error_table_$unimplemented_version;
		return;
	     end;

	code = 0;

	subrange_info.has_subrange_limits = "0"b;

	if bp -> pascal_symbol_node_header.version_flag then return;

	if ^bp -> pascal_symbol_node_header.subrange_limits then return;

	i = size (pascal_symbol_node_header);
	if bp -> pascal_symbol_node_header.flags.name_next then i = i + size (pascal_name_next);
	if bp -> pascal_symbol_node_header.flags.base_type_info then i = i + size (pascal_base_type_info);
	if bp -> pascal_symbol_node_header.flags.address then i = i + size (pascal_address);
	if bp -> pascal_symbol_node_header.flags.father_brother then i = i + size (pascal_father_brother);
	if bp -> pascal_symbol_node_header.flags.son_level then i = i + size (pascal_son_level);
	if bp -> pascal_symbol_node_header.flags.father_type_successor then i = i + size (pascal_father_type_successor);
	if bp -> pascal_symbol_node_header.flags.size then i = i + size (pascal_size);
	if bp -> pascal_symbol_node_header.flags.offset then i = i + size (pascal_offset);
	work = addrel (bp, i);
	subrange_info.has_subrange_limits = "1"b;
	subrange_info.upper_bound_is_encoded = work -> pascal_subrange_limits.upper_bound_is_encoded;
	subrange_info.lower_bound_is_encoded = work -> pascal_subrange_limits.lower_bound_is_encoded;
	subrange_info.subrange_lower_bound = work -> pascal_subrange_limits.subrange_lower_bound;
	subrange_info.subrange_upper_bound = work -> pascal_subrange_limits.subrange_upper_bound;
	return;
%page;
n_variants: entry (bp) returns (fixed bin);

	if bp -> pascal_symbol_node_header.version_flag then return (0);

	if ^bp -> pascal_symbol_node_header.variant_info then return (0);

	i = size (pascal_symbol_node_header);
	if bp -> pascal_symbol_node_header.flags.name_next then i = i + size (pascal_name_next);
	if bp -> pascal_symbol_node_header.flags.base_type_info then i = i + size (pascal_base_type_info);
	if bp -> pascal_symbol_node_header.flags.address then i = i + size (pascal_address);
	if bp -> pascal_symbol_node_header.flags.father_brother then i = i + size (pascal_father_brother);
	if bp -> pascal_symbol_node_header.flags.son_level then i = i + size (pascal_son_level);
	if bp -> pascal_symbol_node_header.flags.father_type_successor then i = i + size (pascal_father_type_successor);
	if bp -> pascal_symbol_node_header.flags.size then i = i + size (pascal_size);
	if bp -> pascal_symbol_node_header.flags.offset then i = i + size (pascal_offset);
	if bp -> pascal_symbol_node_header.flags.subrange_limits then i = i + size (pascal_subrange_limits);
	if bp -> pascal_symbol_node_header.array_info then do;
		nd = addrel (bp, i) -> pascal_array_info.ndims;
		i = i + size (addrel (bp, i) -> pascal_array_info);
	     end;

	return (addrel (bp, i) -> pascal_variant_info.number_of_variants);
%page;
variant: entry (bp, info_ptr, code);

	dcl     1 variant_info	 like runtime_variant_info based (info_ptr);

	if variant_info.version ^= RUNTIME_VARIANT_INFO_VERSION_1 then do;
		code = error_table_$unimplemented_version;
		return;
	     end;

	code = 0;

	if bp -> pascal_symbol_node_header.version_flag then do;
no_variants:
		return;
	     end;

	if ^bp -> pascal_symbol_node_header.variant_info then go to no_variants;

	i = size (pascal_symbol_node_header);
	if bp -> pascal_symbol_node_header.flags.name_next then i = i + size (pascal_name_next);
	if bp -> pascal_symbol_node_header.flags.base_type_info then i = i + size (pascal_base_type_info);
	if bp -> pascal_symbol_node_header.flags.address then i = i + size (pascal_address);
	if bp -> pascal_symbol_node_header.flags.father_brother then i = i + size (pascal_father_brother);
	if bp -> pascal_symbol_node_header.flags.son_level then i = i + size (pascal_son_level);
	if bp -> pascal_symbol_node_header.flags.father_type_successor then i = i + size (pascal_father_type_successor);
	if bp -> pascal_symbol_node_header.flags.size then i = i + size (pascal_size);
	if bp -> pascal_symbol_node_header.flags.offset then i = i + size (pascal_offset);
	if bp -> pascal_symbol_node_header.flags.subrange_limits then i = i + size (pascal_subrange_limits);
	if bp -> pascal_symbol_node_header.array_info then do;
		nd = addrel (bp, i) -> pascal_array_info.ndims;
		i = i + size (addrel (bp, i) -> pascal_array_info);
	     end;
	work = addrel (bp, i);
	n_variants,
	     variant_info.number_of_variants = work -> pascal_variant_info.number_of_variants;
	variant_info.first_value_in_set = work -> pascal_variant_info.first_value_in_set;
	do i = 1 to n_variants;
	     if work -> pascal_variant_info.case (i).set_offset ^= 0 then
		variant_info.case (i).set_addr = addrel (bp, work -> pascal_variant_info.case (i).set_offset);
	     else
		variant_info.case (i).set_addr = null;
	     if work -> pascal_variant_info.case (i).brother ^= 0 then
		variant_info.case (i).brother_addr = addrel (bp, work -> pascal_variant_info.case (i).brother);
	     else
		variant_info.case (i).brother_addr = null;
	end;
	return;
%page;
is_encoded: proc (value) returns (bit (1));

	dcl     value		 fixed bin (35);

	if addr (value) -> encoded_value.flag = "10"b then do;
		addr (value) -> encoded_value.flag = "00"b;
		return ("1"b);
	     end;
	else return ("0"b);

     end is_encoded;
%page;
%include runtime_symbol_info_;
%page;
%include runtime_symbol;
%page;
%include pascal_symbol_node;


     end runtime_symbol_info_;
