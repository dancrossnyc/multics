/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

find_condition_info_: proc (a_sp, a_cip, a_code);

/* This procedure is given a pointer to a stack frame being used when a condition occurred
   and returns the information relevant to that condition.
   0)  coded by M. Weaver  6 / 21 / 73
   1)  modified by C. D. Tavares on 09/28/78 to fix bug where signal_ args were
   always assumed to be in stack (via dead process code)
   2)  modified by JRDavis  10 May 79 to use new include file arg_list.incl, stackframeptr () */
/* Fixed not to fault if no condition frame 12/12/79 S. Herbst */
/* Fixed to initialize fff_sw correctly 11/22/83 by M. Weaver */
/* Changed to copy stack_frame.return_ptr through RETURN_PTR_MASK 03/07/84 S. Herbst */


declare (a_sp, a_cip, nsp, locp, callp, temptr) ptr;
declare  ptra (0 : 10) ptr based aligned;
declare  bptr ptr based;
declare  ap ptr;					/* to arg list */
declare  live_stack bit (1) aligned,
         old_stack_segno bit (18);

declare (a_code, code) fixed bin (35);
declare  error_table_$noentry ext fixed bin (35);
declare (lng, nargs) fixed bin;

declare  op_name char (32) aligned;
declare  bchar char (lng) based unaligned;

declare (fff_sw, trap_sw, frame_flag) bit (1) aligned;
declare  spno bit (18) aligned;


declare  find_condition_frame_ entry (ptr) returns (ptr);
declare  is_condition_frame_ entry (ptr) returns (bit (1) aligned);
declare  interpret_op_ptr_ entry (ptr, ptr, ptr, char (32) aligned, bit (1) aligned);
declare (addr, addrel, baseno, baseptr, bin, null, pointer, ptr, rel, rtrim, stackframeptr, substr) builtin;

declare 1 string_desc aligned based,			/* overlay of string descriptor */
        2 xxx bit (18) unaligned,
        2 string_lng bit (18) unaligned;

declare 1 auto_cond_info like condition_info;

%include arg_list;

%include its;

%include stack_frame;

%include stack_header;
%include mc;
%include condition_info;
/* this procedure is coded to work on any stack, even a defunct one */

	condition_info_ptr = a_cip;
	fff_sw = "0"b;

	if a_sp = null then do;
	     sp = find_condition_frame_ (a_sp);
	     if sp = null then go to error;
	end;
	else sp = a_sp;

	if baseno (stackframeptr ()) = baseno (sp)	/* is supplied stack ptr same seg as our stack ? */
	then live_stack = "1"b;

	else do;
	     live_stack = ""b;			/* we are debugging a dead stack */
	     old_stack_segno = baseno (pointer (sp, 0) -> stack_header.stack_begin_ptr);
	end;

common:	code = 0;
	trap_sw = "0"b;				/* usually have real condition */

/* initialize output structure */

	condition_info.mc_ptr, condition_info.info_ptr, condition_info.wc_ptr, condition_info.loc_ptr = null;
	condition_info.condition_name = " ";
	condition_info.flags.crawlout = "0"b;

	if sp = null then go to error;		/* have no stack seg to look at */
	if a_sp ^= null				/* check for valid condition frame */
	then if ^is_condition_frame_ (sp) then go to error; /* no valid info */

/* check to be sure we in fact have a condition frame; also we have to know
   type of condition so we know where to find info */

	nsp = translate_ptr (sp -> stack_frame.next_sp);	/* get ptr to next frame */

	if sp -> stack_frame_flags.signaller then do;	/* had a fault */

	     if nsp -> stack_frame_flags.link_trap then trap_sw = "1"b;

	     else ap = translate_ptr (translate_ptr (nsp -> stack_frame.next_sp) -> stack_frame.arg_ptr);
						/* get ptr to signaller arg list */

	end;

	else do;					/* have crawlout or software signal */
	     if nsp -> stack_frame_flags.signal
	     then ap = translate_ptr (nsp -> stack_frame.arg_ptr);
	     else do;				/* only one more possibility left */
		if nsp -> stack_frame_flags.crawl_out then do;
		     ap = translate_ptr (nsp -> stack_frame.operator_and_lp_ptr);
		     condition_info.flags.crawlout = "1"b;
		end;
		else do;
error:		     code = error_table_$noentry;
		     go to return;
		end;
	     end;
	end;

/* fill output structure */

	if ^trap_sw then do;			/* get info from arg list */

	     if ap = null then go to error;		/* real ap was null ptr */
	     nargs = ap -> arg_list.arg_count;
	     if nargs < 1 | nargs > 4 then go to error;
	     go to fill_in (nargs);

fill_in (4):   condition_info.wc_ptr = translate_ptr (translate_ptr (ap -> ptra (4)) -> bptr);

fill_in (3):   condition_info.info_ptr = translate_ptr (translate_ptr (ap -> ptra (3)) -> bptr);

fill_in (2):   condition_info.mc_ptr = translate_ptr (translate_ptr (ap -> ptra (2)) -> bptr);

fill_in (1):   lng = bin (translate_ptr (ap -> ptra (nargs+1)) -> string_lng, 18);
						/* get name length from descriptor */
	     temptr = translate_ptr (ap -> ptra (1));
	     condition_info.condition_name = rtrim (substr (temptr -> bchar, 1, lng));
	end;

	else do;					/* link trap; not condition but did not call out of last frame */
	     condition_info.mc_ptr = addrel (nsp, 48);	/* have only machine conditions */
	     condition_info.condition_name = "fault_tag_2"; /* return something to distinguish this */
	end;

/* find out which, if any, mc we have to work with */

	if condition_info.wc_ptr ^= null then mcp = condition_info.wc_ptr; /* crawlout; left ring with fault */

	else if condition_info.flags.crawlout | (condition_info.mc_ptr = null) then mcp = null;

	else mcp = condition_info.mc_ptr;		/* have mc for this ring */

/* if condition occurred in pl1_operators_, find transfer point */

	if live_stack then
	     call interpret_op_ptr_ (mcp, sp, callp, op_name, frame_flag);
	else do;
	     callp = null;
	     op_name = "";
	     frame_flag = "1"b;
	end;

/* fill in loc_ptr */

	if callp ^= null then locp = callp;		/* this will be more useful */
	else if mcp ^= null then do;			/* use ppr from mc */
	     scup = addr (mcp -> mc.scu (0));
	     locp = ptr (baseptr (bin (bin (scup -> scu.ppr.psr, 15), 18)),
		scup -> scu.ilc);
	end;
	else do;					/* assume signal_ was called */
	     unspec (locp) = unspec (sp -> stack_frame.return_ptr) & RETURN_PTR_MASK;
	     if rel (locp) ^= "0"b
	     then locp = addrel (locp, -1);
	end;

	condition_info.loc_ptr, condition_info.user_loc_ptr = locp;

	if ^fff_sw then
	     if sp -> stack_frame_flags.support then do;	/* find most recent nonsupport frame */
		nsp = sp;
		spno = baseno (sp -> stack_frame.next_sp);
		do while (baseno (nsp -> stack_frame.prev_sp) = spno);
		     nsp = translate_ptr (nsp -> stack_frame.prev_sp);
		     if ^nsp -> stack_frame_flags.support then do; /* found one */
						/* see if this is condition frame; if it is, can't use ret_ptr */
			if is_condition_frame_ (nsp) then do;
			     call find_condition_info_ (nsp, addr (auto_cond_info), code);
			     if code = 0 then do;	/* have loc_ptr to use */
				condition_info.user_loc_ptr = auto_cond_info.loc_ptr;
				go to return;
			     end;
			end;
			call interpret_op_ptr_ (null, nsp, callp, op_name, frame_flag);
			if callp ^= null then condition_info.user_loc_ptr = callp;
			else do;			/* use return ptr with non-neg offset */
			     unspec (condition_info.user_loc_ptr) =
				unspec (nsp -> stack_frame.return_ptr) & RETURN_PTR_MASK;
			     if rel (condition_info.user_loc_ptr) ^= "0"b
			     then condition_info.user_loc_ptr = addrel (condition_info.user_loc_ptr, -1);
			end;
			go to return;
		     end;
		end;
	     end;

/* if we are in find_fault_frame_, fill in return args */

return:	if fff_sw then do;
	     a_mcp = condition_info.mc_ptr;
	     faultptr = condition_info.loc_ptr;
	     cname = condition_info.condition_name;
	     cop = condition_info.wc_ptr;		/* this isn't compatible but is more useful */
	end;
	else a_code = code;

	return;

/*  */
find_fault_frame_: entry (a_sp, a_mcp, faultsp, faultptr, cop, cname);

/* this interface  is from the precurser to find_condition_info_
   which was written for trace_stack_ */

declare (a_mcp, faultsp, faultptr, cop) ptr;
declare  cname char (32) aligned;

	sp = find_condition_frame_ (a_sp);
	faultsp = sp;

	if sp = null then do;			/* nothing there */
	     a_mcp, faultptr, cop = null;
	     cname = " ";
	     return;
	end;

	condition_info_ptr = addr (auto_cond_info);	/* will use find_condition_info_'s setup */
	fff_sw = "1"b;
	go to common;

translate_ptr: proc (inptr) returns (pointer);

/* This internal procedure translates pointers in dead stacks to pointers
   valid within the process trying to debug them. */

declare  inptr pointer parameter;

	     if live_stack then return (inptr);		/* usual case, easy enough. */

	     if inptr = null then return (inptr);	/* next easiest thing */

	     if baseno (inptr) = old_stack_segno then
		return (pointer (sp, rel (inptr)));

/* If we got here, we have a dead stack, and a pointer to something not in the stack.
   If we ever install a subsystem to debug dead processes, we should put here a call
   to its address-space manager who can tell us what the pointer pointed to and
   what number it goes by in this process.  But for now, we just punt and give
   back the original pointer. */

	     return (inptr);

	end translate_ptr;

     end find_condition_info_;
