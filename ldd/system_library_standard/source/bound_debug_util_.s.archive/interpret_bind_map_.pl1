%;
/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */


interpret_bind_map_:  procedure(loc_ptr, segname, new_offset, xcode);

/* initially coded as interpret_bind_map by M. Spier 21 May 1971 */
/* converted to a subroutine by M. Weaver 17 June 1971 */
/* last modified by M. Weaver 27 July 1971 */


	/* DECLARATION OF EXTERNAL ENTRIES */

declare	get_bound_seg_info_ entry(ptr, fixed bin(24), ptr, ptr, ptr, fixed bin);
declare	hcs_$status_mins ext entry(ptr, fixed bin(2), fixed bin(24), fixed bin);
declare   (error_table_$bad_segment, error_table_$name_not_found, error_table_$oldobj) ext fixed bin;
declare	error_table_$not_bound ext fixed bin;

declare	(addr, addrel, divide, fixed, null, ptr, rel, substr) builtin;

	/* DECLARATION OF AUTOMATIC STORAGE VARIABLES */

dcl	xcode fixed bin;				/* Parameter */
declare	(i,j,k,l,value,nargs,nopts,lng,arg_lng,link_offset,m,compsw) fixed bin;
declare	new_offset fixed bin(18);
declare   bitcount fixed bin(24);
declare   type fixed bin(2);
declare	store_value(2) fixed bin;		/* so offsets will be more referenceable in a do loop */
declare	(defbase, t_lng, l_lng, s_lng, d_lng) fixed bin;
declare	noff(2) fixed bin init(0,0);			/* indicates whish components offsets are in */
declare	(loc_ptr, p, argp, objp, symb_addr, bmp, sblkp) pointer;
declare	string char(50000) based;		/* for looking at symbol table header */
declare	segname char(32) aligned;

dcl codep ptr,
    (code based(codep), auto_code) fixed bin;

declare	1 symb_def aligned,
	2 next_def pointer,
	2 last_def pointer,
	2 block_ptr pointer,
	2 section char(4) aligned,
	2 offset fixed bin,
	2 entrypoint fixed bin,
	2 defname char(32) aligned;

	/* DECLARATION OF BASED STRUCTURES */

declare 1 linkheader based aligned,
	2 defseg fixed bin,
	2 defoffset bit(18) unaligned,
	2 dum1 bit(18) unaligned,
	2 block_thread pointer,
	2 dum2 pointer,
	2 link_begin bit(18) unaligned,
	2 sect_lng bit(18) unaligned;

declare	var_string char(lng) based(p);

declare 1 symbol_header based aligned,		/* structure of symbol table header */
	2 com_boff fixed bin aligned,		/* offset of compiler name from symbp, in bits */
	2 (dum1,com_lng) bit(18) unal,		/* length of compiler name, in bits */
	2 vers_boff fixed bin aligned,		/* offset of version name, in bits */
	2 (dum2, vers_lng) bit(18) unal;		/* length of version name */
					/* there's more but we don't want it here */
/*  */

% include object_info;

declare	1 oi structure aligned like object_info;
% include symbol_block;

/*  */


/*  */

% include bind_map;

/*  */

	/* new_offset is not initialized to 0 because default_error_handler_ programs expect
	   its value to be changed only if there is something valid to change it to */
	compsw = 1;				/* only looking for 1 offset */
	objp = ptr(loc_ptr,0);			/* get ptr to base of object segment */
	store_value(1) = fixed(rel(loc_ptr),18);		/* get desired offset */

	codep = addr(xcode);				/* Set for proper reference */

decode:	call hcs_$status_mins(objp, type, bitcount, code);	/* get bit count for decode definition */
	if code ^= 0 then return;			/* can't do anything more */

	oi.version_number = object_info_version_2;
	call get_bound_seg_info_(objp, bitcount, addr(oi), bmp, sblkp, code);
	if code ^= 0 then do;		/* 2 offsets are in same proc if seg not bound */
	  	if code = error_table_$not_bound then if compsw = 2 then samesw = "1"b;
		return;
	end;

display:
	do m = 1 to compsw;			/* do twice if comparing */
	     value = store_value(m);		/* use scalar for more speed */
	     do j = 1 to n_components;			/* look at values for each object component */
		k = fixed(component(j).text_start, 18);
		l = fixed(component(j).text_lng, 18);
		if value >= k then if value < k+l then do;
		     if compsw = 2 then do;		/* just comparing */
			noff(m) = j;		/* save component no. so can compare */
			go to end_display;		/* don't look at any more now */
		     end;
		     else do;			/* want name */
			p = addrel(sblkp, component(j).name_ptr);
			lng = fixed(component(j).name_lng, 18);
			segname = var_string;			/* copy name into argument */
			new_offset = value - k;			/* calculate offset also */
			return;					/* done */
		     end;
		end;
	     end;

	     code = error_table_$name_not_found;		/* can't find component for ptr */
	     return;

end_display: end;

	if noff(1) = noff(2) then samesw = "1"b;	/* offsets are in same procedure */
	return;
						/* error_table_$different_procs */





compare_offsets_:   entry(object_ptr, off1, off2, samesw);

	/* procedure to see if 2 offsets into the same bound segment belong to the same procedure */

declare	object_ptr ptr;			/* ptr to beginning of bound segment */
declare	(off1, off2) fixed bin(18);		/* offsets to be compared */
declare	samesw bit(1) aligned;		/* indicates whether offsets are in same proc */

	compsw = 2;				/* looking for 2 offsets */
	samesw = "0"b;				/* set it to false until we are sure */
	objp = object_ptr;			/* copy arg */
	store_value(1) = off1;		/* save offsets so we can reference them in a do loop */
	store_value(2) = off2;

	codep = addr(auto_code);			/* no code parameter here */

	go to decode;			/* go do rest */

	end interpret_bind_map_;
