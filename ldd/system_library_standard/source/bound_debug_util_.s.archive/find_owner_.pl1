/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

find_owner_: proc (in_ptr, a_owner, a_section_offset, a_section,
	     a_class, a_ls_ptr);

/* This procedure determines whether a pointer points to a linkage or static
   section and returns the useful information it finds along the way. */

/* coded July 1975 by M. Weaver */

/* arguments:
   1) in_ptr	input pointer

   2) a_owner	segno of owner of linkage or static section (output)

   3) a_section_offset offset of beginning of linkage or static section (output)

   4) a_section	name of logical section (output)

   5) a_class	class of physical section (output)

   6) a_ls_ptr	ptr to beginning of owner's linkage section (output)
*/



dcl (in_ptr, a_ls_ptr, ls_ptr, is_ptr, lotp, isotp) ptr;

dcl (i, class, a_class, highct, hcsct) fixed bin;
dcl (owner, a_owner, section_offset, a_section_offset, tempseg) fixed bin (18);

dcl (a_section, section) char(8) aligned;

dcl (addr, baseptr, bin, null, ptr, rel) builtin;

dcl  hcs_$high_low_seg_count entry (fixed bin, fixed bin);

dcl 1 lot (0:1000) aligned based(lotp),			/* template for lot */
    2 seg bit (18) unaligned,				/* segment number of linkage section */
    2 offset bit (18) unaligned;			/* offset of beginning of linkage section */

dcl 1 isot(0:1000) aligned based(isotp) like lot;

	
%include stack_header;
	
%include its;

	
%include linkdcl;
	
	class = 0;				/* initialize "output" variables */
	section_offset = 0;
	section = "text";				/* until proven otherwise */
	ls_ptr = null;

	i = 100000;				/* test at end for large i */
	if addr (in_ptr) -> its.its_mod ^= "100011"b then go to finish; /* see if we have a ptr */
	if in_ptr = null then goto finish;

	sb = ptr (addr (owner), 0);			/* get ptr to base of stack */
	lotp = stack_header.lot_ptr;			/* so we can get ptr to base of LOT */
	isotp = stack_header.isot_ptr;
	tempseg = bin (baseno (in_ptr), 18);

	call hcs_$high_low_seg_count (highct, hcsct);

	do i = hcsct to hcsct + highct;
	     if bin (lot (i).seg, 18) ^= tempseg then goto check_isot; /* no LOT entry for this seg */
	     if rel (in_ptr) < lot (i).offset then goto check_isot; /* not possibly in linkage section */
	     ls_ptr = ptr (baseptr (lot (i).seg), lot (i).offset); /* get ptr to ls */
	     section_offset = bin (lot (i).offset, 18);
	     if bin (rel (in_ptr), 18) < bin (ls_ptr -> header.stats.block_length, 18) + section_offset
	     then do;				/* in_ptr pts to this linkage section */
		class = 1;
		if section_offset < bin(ls_ptr -> header.stats.begin_links, 18)
		then section = "static";
		else section = "linkage";		/* ptr points to links */
		go to finish;
	     end;

/* see if in_ptr points to separate static */

check_isot:    if bin (isot (i).seg, 18) ^= tempseg then go to next_segno;
						/* not even same seg */
	     is_ptr = ptr (baseptr (isot (i).seg), isot (i).offset);
	     if is_ptr = ls_ptr then goto next_segno;	/* no separate static */
	     if rel (in_ptr) < isot (i).offset then goto next_segno; /* not in this static */
	     section_offset = bin (isot (i).offset, 18);
	     if bin (rel (in_ptr), 18) >= section_offset + bin(ls_ptr -> header.stats.static_length, 18)
	     then goto next_segno;
	     class = 4;
	     section = "static";
	     go to finish;

next_segno:
	end;

finish:
	a_section = section;
	a_class = class;
	if section = "text" then do;			/* no matching ls or ss found */
	     a_section_offset = 0;
	     a_owner = -1;
	     a_ls_ptr = null;
	end;
	else do;
	     a_section_offset = section_offset;
	     a_owner = i;
	     a_ls_ptr = ls_ptr;
	end;

	return;
     end;
