%;
/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

dissassemble:	disassemble:	procedure ( data_ptr, ret_string, instr_word_num );



/*	This procedure is called to produce a character string, symbolic
*	representation of an instruction word (an instruction in object form).
*
*	Rewritten on  Nov 9, 1972  for the  6180  by  Bill Silver.
*/



dcl	data_ptr	    ptr,		/* The input pointer to the object instruction
				*  word to be  dissassembled. */

	ret_string    char (72) var,	/* The return string which will contain the
				*  instruction in symbolic form.  */

	instr_word_num	fixed bin;	/* The number of the instruction word to be
					*  processed.
					*  0 => process word 1 - do not return anything
					*  1 => process word 1 - return the number of
					*       words in this instrruction in instr_word_num
					*  2-4 => process one of the descriptors.
					*       The data_ptr must still point to the
					*       instruction word.  */


dcl	real_ilc fixed bin(18);	/* The program offset of the instruction */
				/* when it is being taken from the break map */


dcl  1 op_mnemonic_$op_mnemonic(0:1023) ext static aligned,
	2 opcode		char(6) unal,
	2 dtype		fixed bin(2) unal,
	2 num_desc	fixed bin(5) unal,
	2 num_words	fixed bin(8) unal;

dcl	opcode	    fixed bin,	/* A numeric representation of the opcode.  */

	offset	    fixed bin(17);	/* The value of the instruction offset. */

dcl	note_offset fixed bin(17);	/* result of ic modification. */

dcl	mnemonic	    char (6),	/* Op code name. */

	sym_pr	    char (4),	/* Symbolic pointer register field. */

	sym_tag	    char (4),	/* Symbolic tag field. */

	note	    char (24);	/* Special message returned with instruction. */


dcl	string_len    fixed bin;		/* A dummy return variable  -  length of
					*  string returned by  ioa_$rsnnl.  */

dcl	word	    fixed bin (35)	based;	/* Used to reference 1 word of data. */

dcl	ic_word	    fixed bin (35);		/* Word referenced by computed address
					*  of an instruction that has  "ic"
					*  modification.  */


dcl	out_of_bounds	condition;

dcl	ioa_$rsnnl	entry	options(variable);


dcl	( addrel, fixed, rel, substr )	builtin;
/**/
% include db_inst;
/**/
% include db_data_map;
/**/
	real_ilc = fixed(rel(data_ptr), 18);

join:
	ilc_ptr  =  data_ptr;	/* Copy argument pointer to instruction. */

	note  =  " ";		/* We don't usually have to return a note. */


	opcode  =  fixed(ilc_ptr -> instr.opcode);	/* Get numeric value of op code. */

	mnemonic  =  op_mnemonic_$op_mnemonic(opcode).opcode;	/* Get op code opcode. */


/*	Find out which instruction word we must test.  If the word to be tested is greater
*	thane the number of words in the instruction then there is an error.  If it is
*	OK then we will transfer to the routine which will process this particular word
*	of the instruction.
*/

	if	op_mnemonic_$op_mnemonic(opcode).num_words < instr_word_num

		then  do;
		ret_string  =  "Error in call to disassemble - word number too big.";
		return;
		end;

	goto	instruction_word ( instr_word_num );




instruction_word(0):			/* This is the first word of the instruction. */
instruction_word(1):


/*	Look for multi-word instruction.  */

	if	op_mnemonic_$op_mnemonic(opcode).num_words  >  1

		then  do;				/* This is a multi-word instr. */
		call	multi_word_instr;
		return;
		end;


/*	Now get the  pr  name if there is one.  Note, the presence of the  pr  field
*	will imply that there is a small offset field.
*/
	if	ilc_ptr -> instr.pr_bit

		then  do;
		sym_pr  =  substr( db_data$names( fixed( ilc_ptr->instr_pr.pr ) ), 1,3)  ||  "|";
		offset  =  ilc_ptr -> instr_pr.offset;
		end;

		else  do;
		sym_pr  =  " ";
		offset  =  ilc_ptr -> instr.offset;
		end;



/*	Now get the tag field.  Note, some instructions use their tag fields in non
*	standard ways.   Also special processing is required for the  "ic"  modifier.
*/

	if	op_mnemonic_$op_mnemonic(opcode).num_desc  =  0

		then  do;				/* Standard tag field. */
		sym_tag  =  db_data$tags(fixed(ilc_ptr->instr.tag));
		if	sym_tag  =  ",ic"
			then  call  ic_modifier;
		end;


/*	Non standard tag field.  Get octal representation.  */

		else  call  ioa_$rsnnl(",^o", sym_tag, string_len, fixed(ilc_ptr->instr.tag, 17));



/*	Now generate the return string.  */

	call	ioa_$rsnnl("^6o   ^w     ^8a^a^o^a^a", ret_string, string_len,
		real_ilc,  ilc_ptr -> word, mnemonic,
		sym_pr, offset, sym_tag, note);


	return;


with_ilc:	entry(data_ptr, ret_string, instr_word_num, arg_ilc);

dcl	arg_ilc fixed bin(18);

/* This entry is used when the instruction being disassembled is in the
*  break map. The fourth argument contains the original offset of the instrucion.
*/


	real_ilc = arg_ilc;
	go to join;
/**/
instruction_word(2):
instruction_word(3):
instruction_word(4):

	/* make sure we point to the right word */

	real_ilc = real_ilc + instr_word_num - 1;
	ilc_ptr = addrel(ilc_ptr, instr_word_num - 1);

	call	ioa_$rsnnl ("^6o   ^w^-^5x(EIS desc.)",
		ret_string, string_len, real_ilc, ilc_ptr -> word );

	return;
multi_word_instr:	procedure;


/*	This procedure returns a string that will print a multi-word instruction.
*	We don't want to actually dissassemble it.  We will just print a note telling
*	that  it is a multi-word instruction and then the octal representation of the
*	of the instruction word.
*/


/*	We must test to see if we have to return the number of words in this instruction.
*	If the argument  instr_word_num  =  0  then the caller does not want us to return
*	this data.
*/

	if	instr_word_num  =  1

		then    instr_word_num  =  op_mnemonic_$op_mnemonic(opcode).num_words;


	call	ioa_$rsnnl ("^6o   ^w     ^8a (EIS)",
		ret_string, string_len,
		real_ilc, ilc_ptr -> word, mnemonic);



	end	multi_word_instr;
/**/
ic_modifier:	procedure;


/*	This procedure produces a special note which is appended to the end of a
*	dissassembled instruction which uses  ic  modification.
*/

	if	ilc_ptr->instr.pr_bit	/* If there is a  pr  field just forget */
		then  return;		/* it.  Too complicated and too rare to
					*  worry about.  */

/*	No  pr  field implies that the computed address of the instruction will be in
*	the procedure segment.  We will try to retrieve the word the computed address
*	references.  If the computed address is out of the bounds of the segment then
*	we will set up a special note.
*/

	on	condition  (out_of_bounds)

	begin;				/* Execute here only if out of bounds
					*  condition signalled. */

	note  =  "    (address not in seg)";	/* Set up special note. */

	goto	revert_oob_cond;		/* Go eliminate the condition. */

	end;


/*	The next statement is executed after the  "on"  statement.  This is where
*	the  out of bounds  may occur.
*/

	ic_word  =  addrel(ptr(ilc_ptr, real_ilc), offset) -> word;


revert_oob_cond:

	revert  condition (out_of_bounds);	/* Turn off condition. */

/*	If  note  not equal to blank then the condition was signalled and we will
*	just return.  If it is still blank then the computed address was within
*	the bounds of the segment.  Thus the  note  will contain the computed
*	address and the word that it references.
*/

	if	note  ^=  " "  then  return;

	note_offset  =  offset + real_ilc;

	call  ioa_$rsnnl ("^-  ^6o   ^w", note, string_len, note_offset, ic_word);


	end	ic_modifier;



	end	disassemble;
