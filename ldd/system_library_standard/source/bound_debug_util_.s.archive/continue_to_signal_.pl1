/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

continue_to_signal_: proc (code);

/* this procedure looks for the most recent call to a condition handler   and sets the continue bit

   modified 10 May 79 JRDavis to not use arg_list.incl.pl1 (which it wasn't using anyway)
*/

declare (null, ptr, rel) builtin;

declare (limit, type, ndims, size, scale) fixed bin;
declare  code fixed bin (35);
declare  error_table_$not_done ext fixed bin (35);
declare  ap ptr;					/* to arg list */
declare (bbit based, packed) bit (1) aligned;

declare  ptra (0 : 10) ptr based;			/* template for argument ptrs */

declare  cu_$stack_frame_ptr entry () returns (ptr);
declare  decode_descriptor_ entry (ptr, fixed bin, fixed bin, bit (1) aligned,
         fixed bin, fixed bin, fixed bin);


%include stack_frame;

%include stack_header;

/*  */
	code = 0;
	sp = cu_$stack_frame_ptr ();			/* find starting point */
	sb = ptr (sp, 0);				/* get ptr to stack header */

	do while (sp ^= null);			/* look for a signal_ frame */

	     if ^(sp -> stack_frame_flags.signal)
	     then sp = sp -> stack_frame.prev_sp;	/* look some more */

	     else do;				/* look for an argument list to handler */
		do limit = 1 to 2;			/* but limit search to 2 frames */
		     sp = sp -> stack_frame.next_sp;
		     ap = sp -> stack_frame.arg_ptr;	/* pick up arglist ptr */

		     if ap ^= null then do;		/* have an argument list */
			call decode_descriptor_ (ap, 5, type, packed, ndims, size, scale);
			if (type = 19) & (size = 1) then do; /* have bit(1) */
			     ap -> ptra (5) -> bbit = "1"b;
			     return;		/* got what we came for */
			end;
		     end;
		end;
		go to error;			/* couldn't find proper arg list */
	     end;
	end;

error:	code = error_table_$not_done;

	return;


/*  */
is_condition_frame_: entry (a_sp) returns (bit (1) aligned);

/* this procedure is for use when tracing an arbitrary stack forward */

declare (a_sp, nsp) ptr;

	sp = a_sp;				/* get ptr to frame in question */

	if sp -> stack_frame_flags.signaller then	/* faulted out of this frame */
	     return ("1"b);

	nsp = ptr (sp, rel (sp -> stack_frame.next_sp));	/* may need to look at next frame also */
	if nsp -> stack_frame_flags.crawl_out then return ("1"b);

	if nsp -> stack_frame_flags.signal then do;

/*	distinguish between software and hardware conditions;
   for the former, condition frame is just before signal_'s;
   for the latter, condition frame is 2 before signal_'s */

	     if ptr (sp, rel (sp -> stack_frame.prev_sp)) -> stack_frame_flags.signaller
	     then return ("0"b);

	     else return ("1"b);			/* software condition */

	end;

	return ("0"b);

     end;
