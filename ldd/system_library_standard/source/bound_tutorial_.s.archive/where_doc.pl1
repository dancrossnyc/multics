/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(86-06-12,GJohnson), approve(86-06-12,MCR7410),
     audit(86-06-17,Martinson), install(86-06-18,MR12.0-1079):
     Changed to use iox_ user_output.
                                                   END HISTORY COMMENTS */


/* format: style2 */
where_doc:
wdoc:
     proc;

/* HISTORY:
Written by Jim Paradise, fall 1980.
Modified:
03/02/81 by M. Pierret to leave data base open.
06/16/81 by M. Pierret to canonicalize names, accept multi-word
            entry names, surround operation with set/del scope.
10/15/81 by M. Pierret to accept -(dont_a a)llow_partial_match control arg
            and to select manuals by doing an index comparison on each
            entry_name_rel.entry_name, if -allow_partial_match given.
10/19/81 by M. Pierret to use display_info instead of display_flags, and to
            display topics selected when -apm specified.
04/22/83 by Matthew Pierret:  Reformatted the HISTORY section to be useable by
            automatic subsys tools.
           Changed to set display_info.short_name_flag off by default.
           Added an automatic local_display_info, like display_info, upon
            which display_info is based (display_info_ptr = addr
            (local_display_info)).
05/13/83 by J. Siwila:  Added facility to display a menu when user has asked
           for a description of some part of the manuals found and the number
           of manuals found is greater than one.  Also made 
           -allow_partial_matches the default.  Fixed cleanup procedures to
           act according to whether or not the menu facility has been invoked.
06/15/83 by J. Siwila:  Changed -dont_allow_partial_matches to the default and 
           added prompt asking user whether or not to do partial match search
           when neither -allow_partial_matches nor -dont_allow_partial_matches 
           has been specified explicitly.  Also turned topics_flag on for all
           cases when partial matches are searched for.
07/18/83 by J. Siwila:  Added -no_description, -no_audience, 
           -no_table_of_contents, and -no_new_features control arguments.
09/01/83 by M. Pierret: Changed to clean up the screen and display without
            menu if any error occurs while setting up the menu.  Changed 
            cleanup handler to cleanup the screen.  Removed -brief.
09/21/83 by M. Pierret: Made many changes to in general clean up the code.
            Added comments and more useful error messages, prompts and menu
            headers.  Added more complete argument checking. Changed to only
            use a menu if video is already on, i.e., to never turn video on.
            Changed to clear bottom window before displaying.
            Changed default database path to >doc>facilities_data_dir.
09/29/83 by M. Pierret: Changed to always open the database when -dbpn is
            specified and close the existing opening, if there is one.
            Changed to print all manuals if -output_file is specified rather
            than setting up a menu. Simplified the setup_menu algorithm.
            Changed -apm to set dont_allow_partial_matches to off (-dapm
            already did the converse).
09/30/83 by Matthew Pierret: Changed to print "where_doc must be followed..."
            instead of "Command name must be followed...". Delayed clearing of
            user_io window until just before shrinking it. Removed an
            invalid ioa_ control string. Changed the clean_up subroutine to use
            a local variable instead of (0) in its external calls. This is because
            dsl_$close complains if it doesn't get a fixed bin (35) last arg.
*/

/*
DESCRIPTION:
   where_doc returns information, as determined by control args, relevant
   to a given topic_name.

   The data base is only opened once per process by either where_doc or
   explain_doc;  the module online_doc_db_index keeps track of the index
   of the opening.
*/

/* START of DECLARATIONS */
/* Automatic */

	dcl     (topic_name, temp_topic_name)
				 char (64) var;
	dcl     topic_array		 (25) char (64) varying;
	dcl     entry_name		 char (64);
	dcl     mrds_database_path	 char (256);
	dcl     output_switch_name	 char (32);
	dcl     output_file_path	 char (256);

	dcl     (accept_control_argument, mrds_scope_set, database_path_sw, output_file_sw, use_menu_display,
	        partial_matches_allowed, dont_allow_partial_matches)
				 bit (1) aligned init ("0"b);
	dcl     yes_sw		 bit (1) aligned;

	dcl     (
	        arg_idx,
	        arg_len,
	        control_argument_idx,
	        manual_idx,
	        manual_array	 (25),
	        manual_number,
	        nargs,
	        number_of_manuals
	        )			 fixed bin;
	dcl     (
	        current_mrds_dbi	 init (0),
	        mrds_dbi		 init (0),
	        code
	        )			 fixed bin (35);

	dcl     output_ptr		 ptr;
	dcl     arg_ptr		 ptr;

	dcl     1 local_display_info	 aligned like display_info;

/* Based */

	dcl     arg		 char (arg_len) based (arg_ptr);

/* Internal static */

	dcl     argument_type	 (1:4) char (64) varying options (constant)
				 init ("topic name", "output file path name", "", "MRDS database path name")
				 internal static;

	dcl     control_argument	 (1:28) char (32) varying options (constant)
				 init ("where_doc", "-output_file", "-of", "-database_pathname", "-dbpn",
				 "-description", "-desc", "-audience", "-aud", "-table_of_contents", "-toc",
				 "-new_features", "-nf", "", "-a", "-all", "-allow_partial_matches", "-apm",
				 "-dont_allow_partial_matches", "-dapm", "-no_description", "-no_desc", "-no_audience",
				 "-no_aud", "-no_table_of_contents", "-no_toc", "-no_new_features", "-no_nf")
				 internal static;

	dcl     myname		 char (9) options (constant) init ("where_doc") internal static;
	dcl     LOWER_CASE_ALPHA	 char (26) init ("abcdefghijklmnopqrstuvwxyz");
	dcl     UPPER_CASE_ALPHA	 char (26) init ("ABCDEFGHIJKLMNOPQRSTUVWXYZ");

/* Error table */

	dcl     (
	        error_table_$noarg,
	        error_table_$badopt,
	        error_table_$bad_arg,
	        error_table_$not_act_fnc,
	        error_table_$active_function,
	        error_table_$noentry,
	        mrds_error_$invalid_db_index,
	        mrds_error_$tuple_not_found
	        )			 external fixed bin (35);

/*  Entries */

	dcl     absolute_pathname_	 entry (char (*), char (*), fixed bin (35));
	dcl     absolute_pathname_$add_suffix
				 entry (char (*), char (*), char (*), fixed bin (35));
	dcl     active_fnc_err_	 entry () options (variable);
	dcl     command_query_$yes_no	 entry options (variable);
	dcl     com_err_		 entry options (variable);
	dcl     complain		 entry variable options (variable);
	dcl     cu_$arg_ptr		 entry (fixed bin, ptr, fixed bin, fixed bin (35));
	dcl     cu_$af_return_arg	 entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
	dcl     display_doc		 entry (ptr, fixed bin (35), fixed bin, ptr, char (*) var, fixed bin (35));
	dcl     dsl_$close		 entry () options (variable);
	dcl     dsl_$dl_scope_all	 entry (fixed binary (35), fixed binary (35));
	dcl     dsl_$open		 entry options (variable);
	dcl     dsl_$retrieve	 entry options (variable);
	dcl     dsl_$set_scope_all	 entry options (variable);
	dcl     online_doc_db_index$set_index
				 entry (fixed bin (35));
	dcl     online_doc_db_index$return_index
				 entry (fixed bin (35));

/* Conditions */

	dcl     cleanup		 condition;

/* Builtins */

	dcl     (after, before, copy, empty, hbound, length, rtrim, string, substr, translate, ltrim, index)
				 builtin;

/* Menu dcls */

	dcl     (
	        video_is_on,
	        choice_flag		 init ("1"b),
	        fkey
	        )			 bit (1) aligned;
	dcl     (choice, choices_idx, number_of_options)
				 fixed bin;

	dcl     menu_io_switch_name	 char (32);
	dcl     choices		 (number_of_options) char (64) var based (choices_ptr);
	dcl     headers		 (2) char (70) var;
	dcl     trailers		 (2) char (60) var;

	dcl     1 user_io_window_info	 like window_position_info;
	dcl     1 current_user_io_window_info
				 like window_position_info;
	dcl     1 menu_window_info	 like window_position_info;
	dcl     1 local_menu_format	 like menu_format;
	dcl     1 local_menu_requirements
				 like menu_requirements;
	dcl     1 local_area_info	 like area_info;

	dcl     (menu_io_ptr, choices_ptr, menu_ptr, work_area_ptr)
				 ptr;

	dcl     video_data_$terminal_iocb
				 ptr external;

	dcl     (addr, null, unspec)	 builtin;

	dcl     work_area		 area (sys_info$max_seg_size) based (work_area_ptr);

	dcl     sys_info$max_seg_size	 ext fixed bin (35);

	dcl     unique_chars_	 entry (bit (*)) returns (char (15));
	dcl     define_area_	 entry (ptr, fixed bin (35));
	dcl     release_area_	 entry (ptr);

/* END OF DECLARATIONS */

/* format: indcomtxt,^indblkcom */

	current_user_io_window_info.version = -1;
	menu_io_ptr, output_ptr, work_area_ptr = null;
	mrds_scope_set = "0"b;
	video_is_on = (video_data_$terminal_iocb ^= null);

	mrds_database_path = ">doc>facilities_data_dir>online_doc.db";
						/* Should be ">site>online_doc.db" or some-such */
	topic_name = "";
	topic_array = "";

	display_info_ptr = addr (local_display_info);
	string (display_info) = "0"b;
	string (display_info.header) = copy ("1"b, length (string (display_info.header)));
	display_info.header.short_name_flag = "0"b;
	display_info.header.topics_flag = "0"b;

	call cu_$af_return_arg (nargs, (null), (0), code);
	if code = 0
	then call active_fnc_err_ (error_table_$active_function, myname, "");
	else if code ^= error_table_$not_act_fnc
	then do;
		call com_err_ (code, myname);
		return;
	     end;

	complain = com_err_;

	if nargs = 0
	then do;
		call complain (error_table_$noarg, myname, "^/Usage: ^a topic_name  {-control_args}", myname);
		return;
	     end;
	accept_control_argument = "0"b;		/* First argument cannot be a control argument. */
	control_argument_idx = 1;			/* First argument must be of argument_type (1) - topic name. */

ARGUMENT_PROCESSING_LOOP:
	do arg_idx = 1 to nargs;
	     call cu_$arg_ptr (arg_idx, arg_ptr, arg_len, code);
	     if index (arg, "-") ^= 1
	     then do;
		     goto ARG (control_argument_idx);

		/*** The argument is not a control argument.  If no control argument has
		     been processed yet, the argument is of type argument_type (1). If a
		     control argument has been processed but the last control argument does not
		     expect an arguemnt, control_argument_idx is 0 and this case is in error.
		     If an argument to a control argument is expected, it is of type
		     argument_type (control_argument_idx). */

ARG (0):						/* unexpected argument */
		     call complain (error_table_$badopt, myname, "Argument is out of place: ^a.", arg);
		     return;

ARG (1):						/* topic name, immediately follows the command name. */
		     if length (arg) + length (topic_name) >= 64
		     then do;
			     call complain (error_table_$bad_arg, myname,
				"Topic name ""^a ^a"" exceeds the 64 character limit.", topic_name, arg);
			     return;
			end;
		     if length (topic_name) ^= 0
		     then topic_name = topic_name || " ";
		     topic_name = topic_name || ltrim (rtrim (arg));
		     accept_control_argument = "1"b;
		     control_argument_idx = 1;
		     goto NEXT_1;

ARG (2):
		     call absolute_pathname_ (arg, output_file_path, code);
		     if code ^= 0
		     then do;
			     call complain (code, myname, "Output file pathname argument ^a.", arg);
			     return;
			end;
		     accept_control_argument = "1"b;
		     control_argument_idx = 0;
		     goto NEXT_1;

ARG (4):
		     call absolute_pathname_$add_suffix (arg, "db", mrds_database_path, code);
		     if code ^= 0
		     then do;
			     call complain (code, myname, "Data base pathname argument ^a.", arg);
			     return;
			end;
		     accept_control_argument = "1"b;
		     control_argument_idx = 0;
		     goto NEXT_1;

NEXT_1:
		end;
	     else if ^accept_control_argument
	     then do;

		/*** A control argument was specified, but the command was not expecting
		     a control argument at this point. It was expecting the argument
		     associated with control_argument(control_argument_idx), which is
		     described in argument_type (control_argument_idx).
		     It should never be the case that accept_control_argument is off and
		     control_argument_idx is equal to 0. */

		     call complain (error_table_$noarg, myname, "^a must be followed by a^[n^] ^a.",
			control_argument (control_argument_idx),
			(index ("aeiouh", substr (argument_type (control_argument_idx), 1, 1)) > 0),
			argument_type (control_argument_idx));
		     return;
		end;
	     else do;

		/*** The argument is a control argument and it is expected. Find the control
		     argument in the control_argument array. The index into this array identifies
		     the case to process in the following case statement (computed goto). */

		     do control_argument_idx = 2 to hbound (control_argument, 1)
			while (control_argument (control_argument_idx) ^= arg);
		     end;
		     if control_argument_idx > hbound (control_argument, 1)
		     then do;
			     call complain (error_table_$badopt, myname, "^a", arg);
			     return;
			end;

		     goto CONTROL_ARG (control_argument_idx);

		/*** Case of control argument with the index control_argument_idx.  In each
		     case where an argument is expected to follow the control argument,
		     accept_control_argument is turned off so that an error occurs if the
		     next argument is a control argument. If no argument is expected,
		     accept_control_argument is turned on, meaning that control arguments are
		     allowed, and control_argument_idx is set to 0, indicating that there is
		     no control argument expecting an argument. */


CONTROL_ARG (2):
CONTROL_ARG (3):					/* -output_file, -of */
		     output_file_sw = "1"b;
		     accept_control_argument = "0"b;
		     control_argument_idx = 2;
		     goto NEXT_ARG;

CONTROL_ARG (4):
CONTROL_ARG (5):					/* -database_pathname, -dbpn */
		     database_path_sw = "1"b;
		     accept_control_argument = "0"b;
		     control_argument_idx = 4;
		     goto NEXT_ARG;

CONTROL_ARG (6):
CONTROL_ARG (7):					/* -description, -desc */
		     display_info.text.description_flag = "1"b;
		     accept_control_argument = "1"b;
		     control_argument_idx = 0;
		     goto NEXT_ARG;

CONTROL_ARG (8):
CONTROL_ARG (9):					/* -audience, -aud */
		     display_info.text.audience_flag = "1"b;
		     accept_control_argument = "1"b;
		     control_argument_idx = 0;
		     goto NEXT_ARG;

CONTROL_ARG (10):
CONTROL_ARG (11):					/* -table_of_contents, -toc */
		     display_info.text.table_of_contents_flag = "1"b;
		     accept_control_argument = "1"b;
		     control_argument_idx = 0;
		     goto NEXT_ARG;

CONTROL_ARG (12):
CONTROL_ARG (13):					/* -new_features, -nf */
		     display_info.text.new_features_flag = "1"b;
		     accept_control_argument = "1"b;
		     control_argument_idx = 0;
		     goto NEXT_ARG;

CONTROL_ARG (14):					/* "" */
		     goto NEXT_ARG;

CONTROL_ARG (15):
CONTROL_ARG (16):					/* -all, -a */
		     string (display_info.text) = copy ("1"b, length (string (display_info.text)));
		     string (display_info.header) = copy ("1"b, length (string (display_info.header)));
		     display_info.header.topics_flag = "0"b;
						/* Value of this flag is set depending on whether partial matches are selected. */
		     accept_control_argument = "1"b;
		     control_argument_idx = 0;
		     goto NEXT_ARG;

CONTROL_ARG (17):
CONTROL_ARG (18):					/* -allow_partial_match, -acm */
		     partial_matches_allowed = "1"b;
		     dont_allow_partial_matches = "0"b;
		     display_info.header.topics_flag = "1"b;
		     accept_control_argument = "1"b;
		     control_argument_idx = 0;
		     goto NEXT_ARG;

CONTROL_ARG (19):
CONTROL_ARG (20):					/* -dont_allow_partial_match, -dacm */
		     partial_matches_allowed = "0"b;
		     dont_allow_partial_matches = "1"b;
		     display_info.header.topics_flag = "0"b;
		     accept_control_argument = "1"b;
		     control_argument_idx = 0;
		     goto NEXT_ARG;

CONTROL_ARG (21):
CONTROL_ARG (22):					/* -no_description, -nd  */
		     display_info.text.description_flag = "0"b;
		     accept_control_argument = "1"b;
		     control_argument_idx = 0;
		     goto NEXT_ARG;

CONTROL_ARG (23):
CONTROL_ARG (24):					/* -no_audience, -no_aud */
		     display_info.text.audience_flag = "0"b;
		     accept_control_argument = "1"b;
		     control_argument_idx = 0;
		     goto NEXT_ARG;

CONTROL_ARG (25):
CONTROL_ARG (26):					/* -no_table_of_contents, -no_toc */
		     display_info.text.table_of_contents_flag = "0"b;
		     accept_control_argument = "1"b;
		     control_argument_idx = 0;
		     goto NEXT_ARG;

CONTROL_ARG (27):
CONTROL_ARG (28):					/* -no_new_features, -nnf */
		     display_info.text.new_features_flag = "0"b;
		     accept_control_argument = "1"b;
		     control_argument_idx = 0;
		     goto NEXT_ARG;

NEXT_ARG:
		     ;
		end;
	end ARGUMENT_PROCESSING_LOOP;

/* format: ^indblkcom,indcomtxt */

	if control_argument_idx ^= 0 & ^accept_control_argument
	then do;

	     /*** An argument was expected since control_argument_idx is non-zero, and
		the argument was not optional, since accept_control_argument is off. */

		call complain (error_table_$noarg, myname, "^a must be followed by a^[n^] ^a.",
		     control_argument (control_argument_idx),
		     (index ("aeiouh", substr (argument_type (control_argument_idx), 1, 1)) > 0),
		     argument_type (control_argument_idx));
		return;
	     end;

/**** End of argument processing.  Execute the command. */

	on cleanup call cleanup_all;

     /*** Prepare to access the online_doc data base by setting MRDS scope and/or
	opening the data base. */

	call online_doc_db_index$return_index (current_mrds_dbi);

	if database_path_sw
	then mrds_dbi = 0;				/* To guarantee opening a new database. */
	else mrds_dbi = current_mrds_dbi;		/* Continue using same opening */

	if mrds_dbi = 0
	then do;

	     /*** The online_doc data base has not been opened yet in this process. Open it. */

		call open_data_base (mrds_database_path, mrds_dbi, code);
		if code ^= 0
		then call cleanup_and_abort (code,
			"^/^10xThe data base is temporarily out of service.  Try again shortly.^/^10xIf this problem persists, see your administrator.^s"
			, "");
	     end;

     /*** Set the MRDS scope to allow this opening to read and to prevent nothing */

	call dsl_$set_scope_all (mrds_dbi, 1, 0, 30, code);
	if code ^= 0
	then if code = mrds_error_$invalid_db_index
	     then do;

		/*** The index held by online_doc_db_index is incorrect. Reset it to zero and
		     re-open the data base. */

		     call online_doc_db_index$set_index (0);
		     call open_data_base (mrds_database_path, mrds_dbi, code);
		     if code ^= 0
		     then call cleanup_and_abort (code,
			     "^/^10xThe data base is temporarily out of service.  Try again shortly.^/^10xIf this problem persists, see your administrator.^s"
			     , "");
		     call dsl_$set_scope_all (mrds_dbi, 1, 0, 30, code);
		end;

	if code ^= 0
	then call cleanup_and_abort (code,
		"^/^10xThe data base is temporarily out of service.  Try again shortly.^/^10xIf this problem persists, see your administrator.^s"
		, "");
	mrds_scope_set = "1"b;

     /*** Canonicalize topic_name before searching */

	do while (index (topic_name, "  ") ^= 0);	/* reduce double-blanks to single */
	     temp_topic_name = after (topic_name, "  ");
	     topic_name = before (topic_name, "  ") || " " || temp_topic_name;
	end;
	topic_name = translate (topic_name, LOWER_CASE_ALPHA, UPPER_CASE_ALPHA);

     /*** Search for topic_name in the entry_name_rel relation. */

	number_of_manuals = 0;

	call dsl_$retrieve (mrds_dbi, "-range (x entry_name_rel) -select x.manual_number -where x.entry_name = .V.",
	     topic_name, manual_number, code);

	if code ^= 0
	then do;

	     /*** No exact match was found for the given topic_name. Search for
		partial matches if the user so requests. This search is a linear
		search of the entire entry_name_rel relation. */

		if code ^= mrds_error_$tuple_not_found
		then call cleanup_and_abort (code,
			"^/This programming error occurred while searching for ^a.^/Please report this error to your adminstrator."
			, (topic_name));

		code = 0;
		if ^partial_matches_allowed & ^dont_allow_partial_matches
		then do;
			call command_query_$yes_no (yes_sw, 0, myname,
			     "There is no exact match for the topic ""^a"". Do you want^/to see if the topic you've asked about partially matches any^/topics in the data base?"
			     ,
			     "Cannot find the topic ""^a"".  Do you want to search for^/partial matches (this can be a time-consuming search)?"
			     , topic_name);
			if ^yes_sw
			then do;
				call clean_up;
				return;
			     end;
			else call partial_matches;
		     end;
		else if partial_matches_allowed
		then call partial_matches;

	     end;
	else
RETRIEVE_ONLY_EXACT_MATCHES:
	     do;

	     /*** An exact match was found for topic_name. Retrieve all other exact matches. */

		display_info.header.topics_flag = "0"b; /* No need to display what the user typed. */

		do while (code = 0 & number_of_manuals < hbound (manual_array, 1));
		     number_of_manuals = number_of_manuals + 1;
		     manual_array (number_of_manuals) = manual_number;
		     topic_array (number_of_manuals) = "";

		     call dsl_$retrieve (mrds_dbi, "-another", topic_name, manual_number, code);
		end;

		topic_array (1) = topic_name;		/* Since this is an match exact, there is only one topic. */

	     end RETRIEVE_ONLY_EXACT_MATCHES;

	if code ^= 0
	then if code ^= mrds_error_$tuple_not_found
	     then call cleanup_and_abort (code,
		     "^/This programming error occurred while searching for ""^a"".^/Please report this error to your adminstrator."
		     , (topic_name));

	if number_of_manuals = 0
	then call cleanup_and_abort (error_table_$noentry, "^/No information was found about ^a.", (topic_name));

	code = 0;


     /*** Display all manuals in manual_arrray. Use menu to selectively
	display manuals only if there are more than one manual, the video system is
	already on and the user requested textual information be displayed on the terminal. */

	if string (display_info.text) ^= "0"b & number_of_manuals > 1 & video_is_on & ^output_file_sw
	then call setup_menu (use_menu_display);	/* If the menu was set up correctly, use_menu_display is on. */

	if output_file_sw
	then do;

	     /*** Output should be directed to output_file_path. */

		output_switch_name = "online_doc_output" || unique_chars_ ("0"b);
		call iox_$attach_name (output_switch_name, output_ptr, ("vfile_ " || output_file_path || " -extend"),
		     null, code);
		if code ^= 0
		then call cleanup_and_abort (code, "^/Output could not be directed to ^a.", (output_file_path));
		call iox_$open (output_ptr, Stream_output, "0"b, code);
		if code ^= 0
		then call cleanup_and_abort (code, "^/Output could not be directed to ^a.", (output_file_path));
	     end;
	else output_ptr = iox_$user_output;

     /*** Select and display manuals. */

	if use_menu_display
	then call menu_display;
	else call display;


	call clean_up;
RETURN:
	return;

open_data_base:
     proc (mrds_database_path, mrds_dbi, code);

/* This subroutine opens the MRDS database at mrds_database_path and sets  */
/* the online_doc_db_index to the newly opened database's index (mrds_dbi). */

	dcl     mrds_database_path	 char (*);
	dcl     mrds_dbi		 fixed bin (35);
	dcl     code		 fixed bin (35);


	call dsl_$open (mrds_database_path, mrds_dbi, 1, code);
	if code = 0
	then call online_doc_db_index$set_index (mrds_dbi);

	return;

     end open_data_base;
%page;
setup_menu:
     proc (sm_menu_was_created);

/* This subroutine sets up a menu from which manuals are to be selected for */
/* display.  If an error occurs, the screen is cleaned up and the parameter */
/* flag sm_menu_was_created is returned with a value of "0"b.               */

	dcl     sm_menu_was_created	 bit (1) aligned;
	dcl     sm_code		 fixed bin (35) init (0);

	sm_menu_was_created = "0"b;

	headers (1) = "The following manuals match your topic.";
	headers (2) = "On which manuals do you wish to see details?  (Choose one at a time.)";
	trailers (1) = "Type the associated number to select a manual.";
	trailers (2) = "-";

     /*** Get info about the current user_io window. Save a copy, use a copy for user_io and use another copy for menu. */

	user_io_window_info.version = window_position_info_version_1;
	call iox_$control (iox_$user_io, "get_window_info", addr (user_io_window_info), sm_code);
	if sm_code ^= 0
	then call sm_cleanup_and_return;

	current_user_io_window_info = user_io_window_info;
	menu_window_info = user_io_window_info;

     /*** Define format of menu. */

	local_menu_format.version = menu_format_version_1;
	local_menu_format.max_width = user_io_window_info.width;
	local_menu_format.max_height = number_of_manuals + 5;
	local_menu_format.n_columns = 1;
	local_menu_format.center_headers = "1"b;
	local_menu_format.center_trailers = "1"b;
	local_menu_format.pad = "0"b;
	local_menu_format.pad_char = "-";

	local_menu_requirements = menu_requirements_version_1;

     /*** Define an work area in which to allocate choices array. */

	unspec (local_area_info) = "0"b;
	local_area_info.version = 1;
	local_area_info.control.extend = "1"b;
	local_area_info.owner = myname;
	local_area_info.size = sys_info$max_seg_size;
	local_area_info.areap = null;
	call define_area_ (addr (local_area_info), sm_code);
	if sm_code ^= 0
	then call sm_cleanup_and_return;
	work_area_ptr = local_area_info.areap;

     /*** Allocate array of choices */

	number_of_options = number_of_manuals + 1;
	alloc choices in (work_area);

     /*** Carve out menu i/o window from user i/o window.  If there is not at
	least five lines for the display window, don't use menu. */

	if user_io_window_info.height > local_menu_format.max_height + 5
	then do;

	     /*** The current user_io window is large enough to fit a menu window and
		a moderately sized (at least 5 lines) user_io window.  Before shrinking
		the user_io window to make room for the menu window, clear the whole
		current user_io window, in effect clearing the new user_io window and the new
		menu window at the same time. */

		call window_$clear_window (iox_$user_io, sm_code);
		if sm_code ^= 0
		then call sm_cleanup_and_return;

	     /*** Set up the origins and heights of the menu and user_io windows.  The
		menu window will begin where the existing user_io window begins; the new
		user_io window will shrink, taking up what's left of the existing user_io window. */

		menu_window_info.extent.height = local_menu_format.max_height;
		user_io_window_info.origin.line = menu_window_info.origin.line + menu_window_info.extent.height;
		user_io_window_info.extent.height =
		     user_io_window_info.extent.height - menu_window_info.extent.height;
		call iox_$control (iox_$user_io, "set_window_info", addr (user_io_window_info), sm_code);
		if sm_code ^= 0
		then call sm_cleanup_and_return;

	     /*** Create the menu window.  An iocb is needed first. */

		menu_io_switch_name = "menu_i/o" || unique_chars_ ("0"b);
		call iox_$find_iocb (menu_io_switch_name, menu_io_ptr, sm_code);
		if sm_code ^= 0
		then call sm_cleanup_and_return;

		call window_$create (video_data_$terminal_iocb, addr (menu_window_info), menu_io_ptr, sm_code);
		if sm_code ^= 0
		then call sm_cleanup_and_return;

	     /*** Set up contents of menu. */

		do choices_idx = 1 to number_of_manuals;
		     call dsl_$retrieve (mrds_dbi,
			"-range (x full_name_rel) -select x.full_name -where x.manual_number = .V.",
			manual_array (choices_idx), choices (choices_idx), sm_code);
		end;

		choices (number_of_options) = "None of the above / No More";

		do choices_idx = 1 to number_of_manuals;
		     choices (choices_idx) = translate (choices (choices_idx), " ", "_");
		end;
		call menu_$create (choices, headers, trailers, addr (local_menu_format), MENU_OPTION_KEYS,
		     work_area_ptr, addr (local_menu_requirements), menu_ptr, sm_code);
		if sm_code ^= 0
		then call sm_cleanup_and_return;

		call menu_$display (menu_io_ptr, menu_ptr, sm_code);
		if sm_code ^= 0
		then call sm_cleanup_and_return;

		sm_menu_was_created = "1"b;
	     end;

SM_RETURN:
	return;

sm_cleanup_and_return:
     proc;

     /*** Return instead of aborting because information can still be display
	without a menu. */

	call cleanup_screen;
	goto SM_RETURN;

     end sm_cleanup_and_return;

     end setup_menu;
%page;

menu_display:
     proc;

/* This subroutine displays information about manuals selected from a */
/* menu.  The menu must already be set up (at menu_io_ptr).               */

	dcl     md_code		 fixed bin (35) init (0);

	choice_flag = "1"b;
	display_info.display_leading_blank_line = output_file_sw;

	do while (choice_flag);
	     call menu_$get_choice (menu_io_ptr, menu_ptr, null, fkey, choice, md_code);
	     if md_code ^= 0
	     then call cleanup_and_abort (md_code, "Unable to get menu choice.^s", "");
	     if fkey
	     then call window_$bell (menu_io_ptr, 0);
	     else if choice < number_of_options
	     then do;
		     manual_number = manual_array (choice);
		     call window_$clear_window (output_ptr, md_code);
		     if md_code ^= 0
		     then call complain (md_code, myname);
		     call display_doc (output_ptr, mrds_dbi, manual_number, display_info_ptr, (topic_array (choice)),
			md_code);
		     if md_code ^= 0
		     then call complain (md_code, myname);
		end;
	     else if choice = number_of_options
	     then do;				/* No mas! No mas! Quit out of menu */
		     choice_flag = "0"b;
		     call cleanup_screen;
		end;
	     else call window_$bell (menu_io_ptr, 0);
	end;

     end menu_display;
%page;

display:
     proc;

/* This subroutine display information about the manuals in manual_array. */
/* This subroutine is used for displaying without menus.                  */

	dcl     d_code		 fixed bin (35) init (0);

	display_info.display_leading_blank_line = "1"b;

	do manual_idx = 1 to number_of_manuals;

	     manual_number = manual_array (manual_idx);
	     call display_doc (output_ptr, mrds_dbi, manual_number, display_info_ptr, (topic_array (manual_idx)),
		d_code);
	     if d_code ^= 0
	     then call complain (d_code, myname, "^/A manual could not be displayed.");

	end;
     end display;
%page;
partial_matches:
     proc;

/* This subroutine searches for entry_names which "partially match" the    */
/* topic name. An entry_name is a partial match if it contains topic name. */

	code = 0;
	display_info.header.topics_flag = "1"b;

	call dsl_$retrieve (mrds_dbi, "-range (x entry_name_rel) -select x.entry_name x.manual_number", entry_name,
	     manual_number, code);

	if code ^= 0
	then if code = mrds_error_$tuple_not_found
	     then call cleanup_and_abort (error_table_$noentry, "^/The online_doc database contains no data.^s", "");
	     else call cleanup_and_abort (code, "^/Unable to access the data base.^s", "");


RETRIEVE_EACH_TUPLE_LOOP:
	do while (code = 0 & number_of_manuals < hbound (manual_array, 1));
	     if index (entry_name, topic_name) ^= 0
	     then do;
		     do manual_idx = 1 to number_of_manuals while (manual_array (manual_idx) ^= manual_number);
		     end;
		     if manual_idx > number_of_manuals
		     then do;
			     number_of_manuals = number_of_manuals + 1;
			     manual_array (number_of_manuals) = manual_number;
			     topic_array (number_of_manuals) = rtrim (entry_name);
			end;
		end;

	     call dsl_$retrieve (mrds_dbi, "-another", entry_name, manual_number, code);

	end RETRIEVE_EACH_TUPLE_LOOP;

	return;

     end partial_matches;
%page;
/* cleanup procedures */

cleanup_and_abort:
     proc (p_code, p_err_msg, p_err_msg_arg);

	dcl     p_code		 fixed bin (35);
	dcl     p_err_msg		 char (*) var;
	dcl     p_err_msg_arg	 char (*);

	if video_is_on
	then call cleanup_screen;
	call clean_up;
	call complain (p_code, myname, p_err_msg, p_err_msg_arg);
	goto RETURN;

     end cleanup_and_abort;

cleanup_all:
     proc;

	call cleanup_screen;
	call clean_up;

     end cleanup_all;

clean_up:
     proc;

	dcl     cu_code		 fixed bin (35) init (0);

	if output_ptr ^= null & output_file_sw
	then do;
		call iox_$close (output_ptr, (cu_code));
		call iox_$detach_iocb (output_ptr, (cu_code));
	     end;

	if mrds_scope_set
	then call dsl_$dl_scope_all (mrds_dbi, (cu_code));
	if current_mrds_dbi ^= 0 & current_mrds_dbi ^= mrds_dbi
	then call dsl_$close (current_mrds_dbi, (cu_code));
	if work_area_ptr ^= null
	then call release_area_ (work_area_ptr);

     end clean_up;

cleanup_screen:
     proc;

	if video_is_on
	then do;
		if menu_io_ptr ^= null ()
		then call window_$destroy (menu_io_ptr, (0));
		if current_user_io_window_info.version = window_position_info_version_1
		then call iox_$control (iox_$user_io, "set_window_info", addr (current_user_io_window_info), (0));
		if menu_io_ptr ^= null
		then call window_$clear_window (iox_$user_io, code);
	     end;


     end cleanup_screen;



%page;
%include display_doc_info;
%page;
%include window_dcls;
%page;
%include menu_dcls;
%page;
%include iox_dcls;
%page;
%include iox_modes;
%page;
%include area_info;
%page;
%include window_control_info;

     end where_doc;
