/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* Written by J. Siwila 3/30/83 */

/* Changed 3/30/84 by J. Siwila: zeroed out user_io_window_info in order to
   be sure that stack garbage does not interfere with invocation of 
   tut_main_menu. */

/* This procedure sets up and displays the main menu in the Tutorial. */


/* format: style2 */
tut_main_menu_:
     proc (menu_io, function_key_data_ptr, Phelp_args, pseudo);

/* Automatic */

	dcl     change_origin	 bit (1) aligned;
	dcl     choice		 fixed bin;
	dcl     choices		 (10) char (30) var;
	dcl     code		 fixed bin (35);
	dcl     fkey		 bit (1) aligned;
	dcl     headers		 (1) char (30) var;
	dcl     init_display	 bit (1) aligned init ("0"b);
	dcl     menu_io		 ptr;
	dcl     menu_io_switch_name	 char (32);
	dcl     menu_ptr		 ptr;
	dcl     my_area		 area (4095);
	dcl     1 my_menu_format	 like menu_format;
	dcl     1 my_menu_requirements like menu_requirements;
	dcl     new_io_height	 fixed bin;
	dcl     1 true_io_window_info	 like window_position_info;
	dcl     seg_name		 char (15) init ("tut_main_menu_0");
	dcl     seg_name_1		 char (16) init ("tut_the_tutorial");
	dcl     seg_name_2		 char (12) init ("tut_glossary");
	dcl     seg_name_3		 char (12) init ("tut_practice");
	dcl     trailers		 (2) char (40) var;
	dcl     1 user_io_window_info	 like window_position_info;
	dcl     ME_MAIN_MENU	 char (14) init ("tut_main_menu_");
	dcl     last		 fixed bin init (0);
	dcl     last1		 fixed bin init (0);
	dcl     pseudo		 bit (1) aligned;

/* Builtin */

	dcl     (null, addr, empty, unspec)
                                         builtin;
	dcl     (program_interrupt, any_other)
				 condition;

/* Entries */

	dcl     cu_$cl		 entry () options (variable);
	dcl     tut_get_seg_	 entry () options (variable);
	dcl     tut_getting_help_	 entry () options (variable);
	dcl     tut_giving_commands_	 entry () options (variable);
	dcl     tut_log_in_		 entry () options (variable);
	dcl     tut_mail_		 entry () options (variable);
	dcl     tut_storing_information_
				 entry () options (variable);
	dcl     tut_wordpro_	 entry () options (variable);
	dcl     tut_writing_text_	 entry () options (variable);
	dcl     tut_quit_		 entry () options (variable);
	dcl     tut_terminate_sys_	 entry () options (variable);
	dcl     tut_window_		 entry () options (variable);
	dcl     unique_chars_	 entry (bit (*)) returns (char (15));
	dcl     tut_bottom_		 entry () options (variable);

/* External */

	dcl     video_data_$terminal_iocb
				 ptr external;
	dcl     video_was_already_on	 bit (1) aligned external;

/* Create the menu */

	choices (1) = "The Tutorial";
	choices (2) = "New Terms";
	choices (3) = "Practice";
	choices (4) = "Getting Help with Multics";
	choices (5) = "Giving Commands";
	choices (6) = "Writing Text";
	choices (7) = "Messages and Mail";
	choices (8) = "Storing Information";
	choices (9) = "Logging In and Out";
	choices (10) = "Wordprocessing";

	headers (1) = "<<<Multics Tutorial>>>";
	if pseudo
	then trailers (1) = "Use ESC q to Exit";
	else trailers (1) = "Use Function Key F4 to Exit";
	trailers (2) = "-";

	unspec (user_io_window_info) = "0"b;
          unspec (true_io_window_info) = "0"b;
	user_io_window_info.version = window_position_info_version_1;
	call iox_$control (iox_$user_io, "get_window_info", addr (user_io_window_info), code);
	if code ^= 0
	then do;
		call tut_quit_ (code, ME_MAIN_MENU, "Can't get window info.", menu_io, user_io_window_info);
		return;
	     end;
	my_menu_format.version = menu_format_version_1;
	my_menu_format.max_width = user_io_window_info.extent.width;
	my_menu_format.max_height = 8;
	my_menu_format.n_columns = 2;
	my_menu_format.center_headers = "1"b;
	my_menu_format.center_trailers = "1"b;
	my_menu_format.pad = "0"b;
	my_menu_format.pad_char = "-";

	my_menu_requirements = menu_requirements_version_1;

/* Now carve out temporary menu I/O window from the user_i/o window. */


	menu_io_switch_name = "menu_i/o" || unique_chars_ ("0"b);
	call iox_$find_iocb (menu_io_switch_name, menu_io, code);
	if code ^= 0
	then do;
		call tut_quit_ (code, ME_MAIN_MENU, "Unable to get IOCB pointer for menu window.", menu_io,
		     user_io_window_info);
		return;
	     end;
	call window_$create (video_data_$terminal_iocb, addr (user_io_window_info), menu_io, code);
	if code ^= 0
	then do;
		call tut_quit_ (code, ME_MAIN_MENU, "Unable to create the menu_i/o window.", menu_io,
		     user_io_window_info);
		return;
	     end;

SET_UP:
	change_origin = "0"b;
	call tut_window_ (menu_io, true_io_window_info, my_menu_format.max_height, change_origin, code);
	if code ^= 0
	then return;
	new_io_height = user_io_window_info.height - my_menu_format.max_height;
START:
	change_origin = "1"b;
	call tut_window_ (iox_$user_io, true_io_window_info, new_io_height, change_origin, code);
	if code ^= 0
	then return;

	call menu_$create (choices, headers, trailers, addr (my_menu_format), MENU_OPTION_KEYS, addr (my_area),
	     addr (my_menu_requirements), menu_ptr, code);
	if code ^= 0
	then do;
		call tut_quit_ (code, ME_MAIN_MENU, "Unable to create menu.", menu_io, user_io_window_info);
		return;
	     end;

/* Display menus */


	call menu_$display (menu_io, menu_ptr, code);
	if code ^= 0
	then do;
		call tut_quit_ (code, ME_MAIN_MENU, "Unable to display menu.", menu_io, user_io_window_info);
		return;
	     end;

	if init_display
	then go to NEXT;
	else do;
		init_display = "1"b;
		call tut_get_seg_ (seg_name, menu_io, user_io_window_info, code);
		if code ^= 0
		then return;
	     end;

NEXT:
	on condition (program_interrupt) go to START;

/* Now start processing input from user */

	do while ("1"b);

/* Get an option number or function key value from user. */

	     code = 0;
	     call iox_$control (iox_$user_io, "reset_more", null (), code);
	     call menu_$get_choice (menu_io, menu_ptr, function_key_data_ptr, fkey, choice, code);

/* Perform an action depending on the user's selection. */

	     if code ^= 0
	     then do;
		     call tut_quit_ (code, ME_MAIN_MENU, "Unable to get choice.", menu_io, user_io_window_info);
		     return;
		end;
	     if fkey
	     then do;
		     if choice = 1
		     then do;
			     call tut_bottom_ (true_io_window_info, new_io_height, my_menu_format.max_height,
				Phelp_args, code);
			     if code ^= 0
			     then return;
			end;

		     else if choice = 2
		     then do;
			     call tut_cl ();
			     if code ^= 0
			     then return;
			end;
		     else if choice = 3
		     then if last ^= 0
			then do;
				if last ^= last1
				then last = last1;
				call prev_menu ();
			     end;
			else call window_$bell (menu_io, (0));
		     else if choice = 4
		     then do;
			     call EXIT ();
			     return;
			end;
		     else call window_$bell (menu_io, (0));
		end;
	     else do;
		     if choice = 1
		     then do;
			     call the_tut ();
			     if code ^= 0
			     then return;
			end;
		     else if choice = 2
		     then do;
			     call terms ();
			     if code ^= 0
			     then return;
			end;
		     else if choice = 3
		     then do;
			     call prac ();
			     if code ^= 0
			     then return;
			end;
		     else if choice = 4
		     then do;
MENU1:
			     if last1 ^= 0
			     then last = last1;
			     call tut_getting_help_ (menu_io, user_io_window_info, function_key_data_ptr, fkey,
				choice, last1, Phelp_args, pseudo, code);
			     if code ^= 0
			     then return;
			     if fkey
			     then if choice = 3
				then call prev_menu ();
				else do;
					call EXIT ();
					return;
				     end;
			     else do;
				     init_display = "1"b;
				     goto SET_UP;
				end;
			end;

		     else if choice = 5
		     then do;
MENU2:
			     if last1 ^= 0
			     then last = last1;
			     call tut_giving_commands_ (menu_io, user_io_window_info, function_key_data_ptr, fkey,
				choice, last1, Phelp_args, pseudo, code);
			     if code ^= 0
			     then return;
			     if fkey
			     then if choice = 3
				then call prev_menu ();
				else do;
					call EXIT ();
					return;
				     end;
			     else do;
				     init_display = "1"b;
				     goto SET_UP;
				end;
			end;

		     else if choice = 6
		     then do;
MENU3:
			     if last1 ^= 0
			     then last = last1;
			     call tut_writing_text_ (menu_io, user_io_window_info, function_key_data_ptr, fkey,
				choice, last1, Phelp_args, pseudo, code);
			     if code ^= 0
			     then return;
			     if fkey
			     then if choice = 3
				then call prev_menu ();
				else do;
					call EXIT ();
					return;
				     end;
			     else do;
				     init_display = "1"b;
				     goto SET_UP;
				end;
			end;

		     else if choice = 7
		     then do;
MENU4:
			     if last1 ^= 0
			     then last = last1;
			     call tut_mail_ (menu_io, user_io_window_info, function_key_data_ptr, fkey, choice,
				last1, Phelp_args, pseudo, code);
			     if code ^= 0
			     then return;
			     if fkey
			     then if choice = 3
				then call prev_menu ();
				else do;
					call EXIT ();
					return;
				     end;
			     else do;
				     init_display = "1"b;
				     goto SET_UP;
				end;
			end;

		     else if choice = 8
		     then do;
MENU5:
			     if last1 ^= 0
			     then last = last1;
			     call tut_storing_information_ (menu_io, user_io_window_info, function_key_data_ptr,
				fkey, choice, last1, Phelp_args, pseudo, code);
			     if code ^= 0
			     then return;
			     if fkey
			     then if choice = 3
				then call prev_menu ();
				else do;
					call EXIT ();
					return;
				     end;
			     else do;
				     init_display = "1"b;
				     goto SET_UP;
				end;
			end;

		     else if choice = 9
		     then do;
MENU6:
			     if last1 ^= 0
			     then last = last1;
			     call tut_log_in_ (menu_io, user_io_window_info, function_key_data_ptr, fkey, choice,
				last1, Phelp_args, pseudo, code);
			     if code ^= 0
			     then return;
			     if fkey
			     then if choice = 3
				then call prev_menu ();
				else do;
					call EXIT ();
					return;
				     end;
			     else do;
				     init_display = "1"b;
				     goto SET_UP;
				end;
			end;

		     else if choice = 10
		     then do;
MENU7:
			     if last1 ^= 0
			     then last = last1;
			     call tut_wordpro_ (menu_io, user_io_window_info, function_key_data_ptr, fkey, choice,
				last1, Phelp_args, pseudo, code);
			     if code ^= 0
			     then return;
			     if fkey
			     then if choice = 3
				then call prev_menu ();
				else do;
					call EXIT ();
					return;
				     end;
			     else do;
				     init_display = "1"b;
				     goto SET_UP;
				end;
			end;

		     else call window_$bell (menu_io, (0));
		end;
	end;
	return;

/* Procedures for nonmenu options */

the_tut:
     proc ();

	call tut_get_seg_ (seg_name_1, menu_io, user_io_window_info, code);
	return;

     end the_tut;

terms:
     proc ();

	call tut_get_seg_ (seg_name_2, menu_io, user_io_window_info, code);
	return;

     end terms;

prac:
     proc ();

	call tut_get_seg_ (seg_name_3, menu_io, user_io_window_info, code);
	return;

     end prac;

EXIT:
     proc ();

	if choice = 4
	then do;
		call tut_terminate_sys_ (menu_io, user_io_window_info);
		if video_was_already_on
		then call window_$clear_window (iox_$user_io, (0));
		fkey = "0"b;
		return;
	     end;
	else call window_$bell (menu_io, (0));
     end EXIT;

prev_menu:
     proc ();

	if last = 0
	then goto SET_UP;
	else if last = 1
	then goto MENU1;
	else if last = 2
	then goto MENU2;
	else if last = 3
	then goto MENU3;
	else if last = 4
	then goto MENU4;
	else if last = 5
	then goto MENU5;
	else if last = 6
	then goto MENU6;
	else if last = 7
	then goto MENU7;
	else call window_$bell (menu_io, (0));

     end prev_menu;

tut_cl:
     proc ();

	on any_other system;
	call window_$clear_window (iox_$user_io, code);
	if code ^= 0
	then do;
		call tut_quit_ (code, ME_MAIN_MENU, "Unable to clear window.", menu_io, user_io_window_info);
		return;
	     end;
	trailers (1) = "Type ""pi"" and RETURN to reenter tutorial";
	call menu_$create (choices, headers, trailers, addr (my_menu_format), MENU_OPTION_KEYS, addr (my_area),
	     addr (my_menu_requirements), menu_ptr, code);
	if code ^= 0
	then do;
		call tut_quit_ (code, ME_MAIN_MENU, "Unable to create menu.", menu_io, user_io_window_info);
		return;
	     end;
	call menu_$display (menu_io, menu_ptr, code);
	if code ^= 0
	then do;
		call tut_quit_ (code, ME_MAIN_MENU, "Unable to display menu", menu_io, user_io_window_info);
		return;
	     end;
	if pseudo
	then trailers (1) = "Use ESC q to Exit";
	else trailers (1) = "Use Function Key F4 to Exit";
	call cu_$cl;

     end tut_cl;

%include function_key_data;
%page;
%include help_args_;
%page;
%include iox_dcls;
%page;
%include menu_dcls;
%page;
%include window_dcls;
%page;
%include window_control_info;

     end tut_main_menu_;
