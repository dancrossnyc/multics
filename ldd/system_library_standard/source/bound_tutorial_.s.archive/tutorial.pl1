/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(86-01-22,LJAdams), approve(86-01-22,MCR7327),
     audit(86-04-17,Lippard), install(86-04-24,MR12.0-1048):
     Added ssu_ references so subsystem calls to help_ will work properly.
     Added include file "help_args" which contains data needed by help.
  2) change(87-08-07,LJAdams), approve(87-09-03,MCR7766),
     audit(88-09-03,GDixon), install(88-09-13,MR12.2-1109):
     Changed Vhelp_args_2 to Vhelp_args_3.  Moved code from tut_quit_
     and tut_terminate_sys_ into here thus eliminating these modules.
                                                   END HISTORY COMMENTS */


/* Written by J. Siwila  3/30/83 */
/* Modified:  April,1985  by L.Adams - use new help_args_incl         */

/* This procedure starts the Tutorial by setting up the video system and
      alternate function key escape sequences and initializing the 
      help_args data structure. */

/* format: style2 */
tutorial:
     proc ();

/* Automatic */

	dcl     code		 fixed bin (35);
	dcl     key_shift_idx	 fixed bin;
	dcl     menu_io		 ptr;
	dcl     my_area_ptr		 ptr;
	dcl     1 local_area_info	 like area_info;
	dcl     reason		 char (512);
	dcl     1 user_io_window_info	 like window_position_info;
	dcl     1 auto_terminal_info	 like terminal_info;
	dcl     i			 fixed bin;
	dcl     pseudo		 bit (1) aligned;

/* Based */

	dcl     1 fkey_data		 like function_key_data based (function_key_data_ptr) aligned;
	dcl     my_area		 area (sys_info$max_seg_size) based (my_area_ptr);

/* Builtin */

	dcl     (addr, length, null, unspec)
				 builtin;

/* Conditions */

	dcl     (cleanup)		 condition;

/* Entries */

	dcl     tut_main_menu_	 entry () options (variable);
	dcl     ttt_info_$function_key_data
				 entry (char (*), ptr, ptr, fixed bin (35));
	dcl     video_utils_$turn_on_login_channel
				 entry (fixed bin (35), char (*));
          dcl     video_utils_$turn_off_login_channel 
				entry (fixed bin(35));
          dcl     com_err_		 entry() options(variable);
	dcl     define_area_	 entry (ptr, fixed bin (35));
	dcl     release_area_	 entry (ptr);

/* Internal Static */

	dcl     ME_EXAMPLE		 char (8) init ("tutorial") int static options(constant);
	dcl     PSEUDO_KEYS		 char (8) static options (constant) init ("gcpq");
	dcl     PSEUDO_KEYS_COUNT	 char (4) init ("1234") int static options(constant);
          dcl     tutorial_active        bit (1) internal static init("0"b);
	dcl     video_was_already_on	 bit (1) aligned internal static init ("0"b);


/* External */

	dcl     error_table_$no_table	 fixed bin (35) ext;
	dcl     sys_info$max_seg_size	 ext fixed bin (35);
	dcl     video_data_$terminal_iocb
				 pointer external;
%page;
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

          if tutorial_active				/* tutorial CANNOT be invoked recursively */
          then do;					/*   because of its use of internal static*/
						/*   variables.			  */
                    call com_err_  (0, ME_EXAMPLE, "The tutorial command may not be invoked recursively.
Type ""release -all"" to stop the prior invocation, then invoke tutorial again.");
		return;
               end;
          else tutorial_active = "1"b;

	menu_io = null;				/* initialize values needed for cleanup   */
	my_area_ptr = null;				/*   on unit			  */
          Phelp_args = null;

	video_was_already_on = (video_data_$terminal_iocb ^= null);
	if video_was_already_on			/* video details used by cleanup too.	  */
	then do;
		user_io_window_info = window_position_info_version_1;
		call iox_$control (iox_$user_io, "get_window_info", addr (user_io_window_info), code);
		if code ^= 0
		then do;
			call com_err_ (code, ME_EXAMPLE, "Unable to get window info.");
			return;
		     end;
	     end;
	on condition (cleanup) call clean_up ();

	unspec (local_area_info) = "0"b;

	local_area_info.version = area_info_version_1;
	local_area_info.control.extend = "1"b;
	local_area_info.owner = ME_EXAMPLE;
	local_area_info.size = sys_info$max_seg_size;
	local_area_info.areap = null;

	call define_area_ (addr (local_area_info), code);
	if code ^= 0
	then do;
		call tut_quit_ (code, ME_EXAMPLE, reason, menu_io, user_io_window_info);
		return;
	     end;
	my_area_ptr = local_area_info.areap;
%page;
/* Invoke the window system if it's not already invoked */

	if ^video_was_already_on
	then do;
		call video_utils_$turn_on_login_channel (code, reason);
		if code ^= 0
		then do;
			if code = error_table_$no_table
			then call tut_quit_ (code, ME_EXAMPLE,
				"The Multics Tutorial can be invoked only on an appropriately configured video terminal.  Please configure your terminal properly, or see your local Multics consultant."
				, menu_io, user_io_window_info);
			else call tut_quit_ (code, ME_EXAMPLE, reason, menu_io, user_io_window_info);
			return;
		     end;
		user_io_window_info = window_position_info_version_1;
		call iox_$control (iox_$user_io, "get_window_info", addr (user_io_window_info), code);
		if code ^= 0
		then do;
			call tut_quit_ (code, ME_EXAMPLE, "Unable to get window info after turning on video.",
			     menu_io, user_io_window_info);
			return;
		     end;
	     end;

	call window_$clear_window (iox_$user_io, code);
	if code ^= 0
	then do;
		call tut_quit_ (code, ME_EXAMPLE, "Unable to clear window.", menu_io, user_io_window_info);
		return;
	     end;

/* See if we have to use escape sequences for function keys */

	pseudo = "0"b;
	auto_terminal_info.version = terminal_info_version;
	call iox_$control (iox_$user_io, "terminal_info", addr (auto_terminal_info), code);
	if code ^= 0
	then do;
		call tut_quit_ (code, ME_EXAMPLE, "Unable to get terminal info.", menu_io, user_io_window_info);
		return;
	     end;
	function_key_data_ptr = null;
	call ttt_info_$function_key_data (auto_terminal_info.term_type, my_area_ptr, function_key_data_ptr, code);
	if code ^= 0
	then do;
		if code = error_table_$no_table
		then call alt_keys;
		else do;
			call tut_quit_ (code, ME_EXAMPLE, "Cannot get function key data.", menu_io,
			     user_io_window_info);
			return;
		     end;
	     end;
	if function_key_data_ptr = null
	then call alt_keys;
	if fkey_data.highest < length (PSEUDO_KEYS_COUNT)
	then call alt_keys;
%page;
	call help_$init (ME_EXAMPLE, "", "", Vhelp_args_3, Phelp_args, code);
	if code ^= 0
	then do;
		call tut_quit_ (code, ME_EXAMPLE, "Unable to initiate help_.", menu_io, user_io_window_info);
		return;
	     end;
	help_args.Sctl.all = "1"b;
	help_args.Sctl.inhibit_errors = "1"b;
	help_args.Nsearch_dirs = help_args.Nsearch_dirs + 1;
	help_args.Npaths = 1;
	help_args.search_dirs = ">doc>facilities_data_dir";
	help_args.path.value = ">doc>facilities_data_dir>tut_glossary.gi.info";
	help_args.path.S.pn_ctl_arg = "0"b;
	help_args.path.S.info_name_not_starname = "1"b;

MAIN_MENU:
	call tut_main_menu_ (menu_io, function_key_data_ptr, Phelp_args, pseudo);
	call help_$term (ME_EXAMPLE, Phelp_args, code);
	if code ^= 0
	then do;
		call tut_quit_ (code, ME_EXAMPLE, "Unable to terminate help_.", menu_io, user_io_window_info);
		return;
	     end;
	call clean_up();
          return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

alt_keys:
     proc;

	pseudo = "1"b;
	function_key_data_highest = length (PSEUDO_KEYS_COUNT);
	allocate fkey_data in (my_area) set (function_key_data_ptr);
	fkey_data.version = function_key_data_version_1;
	fkey_data.seq_ptr = addr (PSEUDO_KEYS);
	fkey_data.seq_len = length (PSEUDO_KEYS);
	do key_shift_idx = 0 to 3;
	     fkey_data.home.sequence_length (key_shift_idx) = 0;
	     fkey_data.left.sequence_length (key_shift_idx) = 0;
	     fkey_data.up.sequence_length (key_shift_idx) = 0;
	     fkey_data.right.sequence_length (key_shift_idx) = 0;
	     fkey_data.down.sequence_length (key_shift_idx) = 0;
	end;

	do i = 1 to function_key_data_highest;
	     fkey_data.function_keys (i, KEY_PLAIN).sequence_index = 2 * i - 1;
	     fkey_data.function_keys (i, KEY_PLAIN).sequence_length = 2;
	end;
     end alt_keys;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
%page;
/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

clean_up:
     proc ();

          call help_$term ("tutorial", Phelp_args, (0));
	if tutorial_active then
	     call tut_terminate_sys_ (menu_io, user_io_window_info);
	if my_area_ptr ^= null
	then call release_area_ (my_area_ptr);
	return;
     end clean_up;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

terminate_sys_:
     proc ();

          if tutorial_active then do;
	     if menu_io ^= null ()
	     then call window_$destroy (menu_io, (0));
	     menu_io = null;
	     if video_was_already_on
	     then call iox_$control (iox_$user_io, "set_window_info", addr (user_io_window_info), (0));
	     else call video_utils_$turn_off_login_channel ((0));
	     tutorial_active = "0"b;
	end;

end terminate_sys_;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

tut_quit_:
     entry (acode, ME, explanation, Pmenu_io, puser_io_window_info);

     dcl     acode                       fixed bin(35),
             explanation		 char (*),
             ME	           	 char (*),
             Pmenu_io                    ptr,
             1 puser_io_window_info like window_position_info;

          menu_io = Pmenu_io;
          user_io_window_info = puser_io_window_info;
	call terminate_sys_;
	call com_err_ (acode, ME, explanation);
	return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

tut_terminate_sys_:
     entry (Pmenu_io, puser_io_window_info);

          menu_io = Pmenu_io;
          user_io_window_info = puser_io_window_info;
          call terminate_sys_;
          return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
%page;
%include help_args_;
%page;
%include iox_dcls;
%page;
%include window_dcls;
%page;
%include function_key_data;
%page;
%include menu_dcls;
%page;
%include window_control_info;
%page;
%include terminal_info;
%page;
%include area_info;

     end tutorial;
