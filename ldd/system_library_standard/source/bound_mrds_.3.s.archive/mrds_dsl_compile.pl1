/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        *********************************************************** */

/****^  HISTORY COMMENTS:
  1) change(85-11-17,Dupuis), approve(85-12-16,MCR7314),
     audit(86-02-04,Brunelle), install(86-02-05,MR12.0-1013):
     This entry is being made to cover the change made on 85-03-04 by
     John Hergert (mrds #144)
  2) change(85-11-17,Dupuis), approve(85-12-16,MCR7314),
     audit(86-02-04,Brunelle), install(86-02-05,MR12.0-1013):
     Added the mrds_start_transaction and mrds_finish_transaction
     include files. (see mrds #142, phx19907)
  3) change(86-07-16,Dupuis), approve(86-08-05,MCR7491), audit(86-08-08,Blair),
     install(86-08-15,MR12.0-1127):
     85-11-22 Hergert: Removed all references to var_exists_ptr. Moved
     variable var_exists into select_list structure. This was done to
     fix the bug where compiled set expressions that referenced a different
     set of relations would fail to execute properly. (mrds #158)
                                                   END HISTORY COMMENTS */

mrds_dsl_compile:
compile:
     proc;

/* (database_index, selection_expression, se_index, values,...., values, code)

   DESCRIPTION

 The purpose of this procedure is to implement the dsl_$compile function. 
 This procedure creates an argument list for and calls translate, then 
 squirrels away the translated selection expression for future use by others.


   HISTORY:

 84-09-01 Originally written by John Hergert.

 85-03-04 John Hergert Fixed bug that failed to detect the condition when
 se_index was equal to 1 on the first call to dsl_$compile. It failed to
 return mrds_error_$no_sel_exp.

   INPUT CONDITIONS:

 database_index is the index of the database the caller wishes to compile
 a selection expression for.

 selection_expression is the expression supplied by the user to be compiled.

 se_index is the index of the selection expression.

 values are the indices (if any) of the temp rels used in the se 


   OUTPUT DEFINITIONS:

 If no errors are encountered the selection expression was sucessfully 
 compiled.

 se_index is the index of the selection expression just compiled.

 code = 0; if no errors were detected.

 code = error_table_$bad_ptr; if the dbcbw_ptr could not be obtained.

 code = mrds_error_$invalid_db_index; if no dbcb_ptr was found for the 
 database index.

 If less then 4 arguments were passed to this procedure the condition 
 arg_error will be signaled.

 code = something else; if another error is detected by this module. 

*/

	area_ptr, dbcb_ptr = null;
	call cu_$arg_list_ptr (al_ptr);		/* Get pointer to this proc arg list */
	if al_ptr = null then signal arg_error;		/* This returns you to command level */

	nargs = arg_list.arg_count / 2;		/* Get the number of arguments to this proc */
	if nargs < 4 then signal arg_error;		/* This returns to command level */

	if arg_list.code = 4
	then num_ptrs = arg_list.arg_count;		/* Determine number of ptrs in arg list */
	else num_ptrs = arg_list.arg_count + 1;

	call cu_$arg_ptr (nargs, cd_ptr, arg_len, icode); /* Get pointer to callers return code */
	if icode ^= 0 then signal arg_error;		/* This returns to command level */

	call cu_$arg_ptr (1, dbi_ptr, arg_len, icode);	/* Get pointer to database index */
	if icode ^= 0 then call error (icode);

	call cu_$arg_ptr (2, se_ptr, se_len, icode);	/* Get pointer to selection expression */
	if icode ^= 0 then call error (icode);

	if arg_list.code = 4			/* Get se descriptor */
	then desc_ptr = arg_list.arg_des_ptr (nargs + 2);
	else desc_ptr = arg_list.arg_des_ptr (nargs + 3);

	if descriptor.type = 22 then do;		/* if char var */
		se_len_ptr = addrel (se_ptr, -1);	/* get current length of varying string */
		se_len = se_len_ptr -> fb35u;
	     end;

	call cu_$arg_ptr (3, se_index_ptr, arg_len, icode); /* Get pointer to selection expression index */
	if icode ^= 0 then call error (icode);

	if nargs > 4 then do;			/* If we have any values get pointer to them */
		appl_ptr = addr (arg_list.arg_des_ptr (4));

		if arg_list.code = 4		/* and their descriptors */
		then adpl_ptr = addr (arg_list.arg_des_ptr (nargs + 4));
		else adpl_ptr = addr (arg_list.arg_des_ptr (nargs + 5));
	     end;
	else adpl_ptr, appl_ptr = null;

	num_args = nargs - 4;			/* Number of args passed to translate */

	call mu_database_index$get_resultant_model_pointer (database_index,
	     dbcb_ptr);				/* Get the dbcb pointer */
	if dbcb_ptr = null then call error (mrds_error_$invalid_db_index);


	compiled_se_info_ptr = dbcb.compiled_se_info_ptr;
	if se_index >= 0 then do;			/* were compiling an se */

		dbi_pic = dbcb.dbi;
		if dbcb.compiled_se_info_ptr = null () then do; /* get a place to put compiled selection expressions */
						/* if we dont already have one */
			call mu_define_area$define_temp_dir_area (
			     dbcb.compiled_se_info_ptr,
			     database_index, (sys_info$max_seg_size), "MRDS" || dbi_pic,
			     "0"b /* not extensible */, "1"b /* no freeing */, "0"b,
			     "0"b /* no zeroing */, icode);
			if icode ^= 0 then call error (icode);

			compiled_se_info_ptr = dbcb.compiled_se_info_ptr;
						/* initialize our new cse area */
			compiled_se_info.real_select_area_ptr = dbcb.select_area_ptr;
			compiled_se_info.number_of_compiled_se = 1;
			compiled_se_info.compile_area_ptr = null;
			compiled_se_info.se_info.seg_ptr (1) = null;
			compiled_se_info.se_info.saved_ptrs (1) = null;
			compiled_se_info.se_info.free (1) = "1"b;
			compiled_se_info.se_info.dup_retain (1) = "0"b;

			call get_cse_area (1);	/* get an area for the cse */
		     end;

/* get a work area */

		call mu_define_area$define_temp_dir_area (
		     compiled_se_info.compile_area_ptr,
		     database_index, (sys_info$max_seg_size), "MRDS" || dbi_pic,
		     "0"b /* not extensible */, "1"b /* no freeing */, "0"b,
		     "0"b /* no zeroing */, icode);
		if icode ^= 0 then call error (icode);
		area_ptr = compiled_se_info.compile_area_ptr;

		on cleanup call cleanup_handler;

		if se_index = 0 then do;		/* If new compiled se */
			sei = 0;
			do i = 1 to compiled_se_info.number_of_compiled_se;
			     if compiled_se_info.se_info.free (i) & sei = 0
			     then do;
				     sei = i;
				     compiled_se_info.se_info.free (sei) = "0"b;
				     dbcb.select_area_ptr, compiled_se_info.se_info.select_area_ptr (sei) =
					pointer (compiled_se_info.se_info.seg_ptr (sei), rel (compiled_se_info.real_select_area_ptr));
				     call mrds_dsl_delete_se (dbcb_ptr, (mrds_data_$caller_compile), icode);
				     if icode ^= 0 then call error (icode);
				end;
			end;
			if sei = 0 then do;		/* cant reuse a deleted one */
				compiled_se_info.number_of_compiled_se =
				     /* so make a new one */
				     compiled_se_info.number_of_compiled_se + 1;
				sei = compiled_se_info.number_of_compiled_se;

				compiled_se_info.se_info.free (sei) = "0"b;

				call get_cse_area (sei);
			     end;
		     end;
		else do;				/* redefining an old se */
			if (se_index <= compiled_se_info.number_of_compiled_se) &
			^(compiled_se_info.se_info.free(se_index))
			then do;
				sei = se_index;
				dbcb.select_area_ptr = compiled_se_info.se_info.select_area_ptr (sei);
				call mrds_dsl_delete_se (dbcb_ptr, (mrds_data_$caller_compile), icode);
				if icode ^= 0 then call error (icode);
			     end;
			else call error (mrds_error_$no_sel_exp);
		     end;

	     end;
	else do;					/* deleteing a compiled se */
		if dbcb.compiled_se_info_ptr = null then call error (mrds_error_$no_sel_exp);
		sei = -se_index;
		if sei <= compiled_se_info.number_of_compiled_se
		     & ^compiled_se_info.se_info.free (sei)
		then do;
			compiled_se_info.se_info.saved_ptrs (sei) = null;
						/* remove all references to the seg */
			compiled_se_info.se_info.free (sei) = "1"b;
			compiled_se_info.se_info.dup_retain (sei) = "0"b;
						/* indicate this seg is free now */
			code = 0;
		     end;
		else call error (mrds_error_$no_sel_exp);

		return;				/* nothing else to do here */
	     end;

	mstxn_transactions_needed = dbcb.transactions_needed;
	on cleanup begin;
	     call mstxn_cleanup;
	     call cleanup_handler;
	end;
	on any_other call mstxn_any_other;

%include mrds_start_transaction;
	if mstxn_code ^= 0
	then call error (mstxn_code);

	call mrds_dsl_translate (dbcb_ptr, area_ptr,
	     (mrds_data_$caller_compile), se_ptr, se_len, appl_ptr, adpl_ptr,
	     num_args, icode);
	mftxn_code = icode;
%include mrds_finish_transaction;
	if icode ^= 0 then call error (icode);

/* save the world for others */

	compiled_se_info.se_info.saved_ptrs.range_ptr (sei) = dbcb.range_ptr;
	compiled_se_info.se_info.saved_ptrs.select_ptr (sei) = dbcb.select_ptr;
	compiled_se_info.se_info.saved_ptrs.ti_ptr (sei) = dbcb.ti_ptr;
	compiled_se_info.se_info.saved_ptrs.ss_ptr (sei) = dbcb.ss_ptr;
	compiled_se_info.se_info.saved_ptrs.so_ptr (sei) = dbcb.so_ptr;
	compiled_se_info.se_info.saved_ptrs.lit_ptr (sei) = dbcb.lit_ptr;
	compiled_se_info.se_info.se_id_num (sei) = dbcb.last_s_e_id_num;
	compiled_se_info.se_info.dup_retain (sei) = dbcb.dup_retain;
	compiled_se_info.se_info.x_leaf_ptr (sei) = compiled_se_info.temp_x_leaf_ptr;
	compiled_se_info.se_info.temp_rel_list_ptr (sei) = compiled_se_info.temp_temp_rel_list_ptr;

	dbcb.select_area_ptr = compiled_se_info.real_select_area_ptr; /* cleanup after ourselves */
	compiled_se_info.temp_temp_rel_list_ptr,
	     compiled_se_info.temp_x_leaf_ptr = null;
	call mrds_dsl_delete_se (dbcb_ptr, mrds_data_$caller_compile, icode);
	if icode ^= 0 then call error (icode);

	if compiled_se_info.compile_area_ptr ^= null
	then call mu_release_area (compiled_se_info.compile_area_ptr);

	se_index = sei;
	code = 0;					/* evevrythings OK */
compile_exit:
	return;

get_cse_area:
     proc (index);

/* get an area for the new compiled selection expression
   (dbcb.select_area_ptr).  We cant use the one supplied to us by
   dsl_init_res because it is expecting to be reused and we want to save it.
*/

	dcl     index		 fixed bin (35);

	call mu_temp_segments$get_temp_segment (database_index, /* get a place to put thge compiled se */
	     "MRDS" || dbi_pic, compiled_se_info.se_info.seg_ptr (index), icode);
	if icode ^= 0 then call error (icode);

	compiled_se_info.se_info.saved_ptrs.select_area_ptr (index), dbcb.select_area_ptr = /* start the new area at the same offset the old starts in */
	     pointer (compiled_se_info.se_info.seg_ptr (index), rel (dbcb.select_area_ptr));

	dbcb.new_select_expr = "1"b;			/* tell search to start new tid_list management period */
	dbcb.last_s_e_id_num = mod (dbcb.last_s_e_id_num + 1, 999999); /* increment the select expr ID for current S.E. */

	call mrds_dsl_init_select_area (dbcb_ptr, icode); /* and initialize it */
	if icode ^= 0 then call error (icode);

     end get_cse_area;

error:
     proc (cd);

	dcl     cd		 fixed bin (35);	/* (INPUT) error code */

	code = cd;				/* Return the error code to caller */
	call cleanup_handler;			/* Tidy up before we leave */
	goto compile_exit;				/* Exit mrds_dsl_compile */

     end error;

cleanup_handler:
     proc;

	if dbcb_ptr ^= null then do;
		if dbcb.compiled_se_info_ptr ^= null
		then if compiled_se_info.compile_area_ptr ^= null
		     then call mu_release_area (compiled_se_info.compile_area_ptr);
		call mrds_dsl_delete_se (dbcb_ptr, mrds_data_$caller_compile, icode);
	     end;

	return;

     end cleanup_handler;
%page;
restore_significant_data: proc;

	return;

     end restore_significant_data;
%page;
should_rollback: proc () returns (bit (1));

	return ("0"b);

     end should_rollback;

%include mrds_dbcb;
%page;
%include mrds_compiled_se_info;
%page;
%include mdbm_arg_list;
%page;
%include mdbm_descriptor;
%page;
%include mdbm_seg_area;

/* Multics Subroutines */

	dcl     cu_$arg_list_ptr	 entry (ptr);
	dcl     cu_$arg_ptr		 entry (fixed bin, ptr, fixed bin,
				 fixed bin (35));

	dcl     sys_info$max_seg_size	 ext fixed bin (35);

/* DBM Routines */

	dcl     mrds_data_$caller_compile
				 fixed bin (35) ext;

	dcl     mrds_error_$invalid_db_index
				 ext fixed bin (35);
	dcl     mrds_error_$no_sel_exp
				 ext fixed bin (35);

	dcl     mrds_dsl_delete_se	 entry (ptr, fixed bin (35), fixed bin (35));
	dcl     mrds_dsl_init_select_area
				 entry (ptr, fixed bin (35));
	dcl     mu_temp_segments$get_temp_segment
				 entry (fixed bin (35), char (*), ptr,
				 fixed bin (35));
	dcl     mu_database_index$get_resultant_model_pointer
				 entry (fixed bin (35), ptr);
	dcl     mrds_dsl_translate	 entry (ptr, ptr, fixed bin, ptr, fixed bin, ptr,
				 ptr, fixed bin, fixed bin (35));

/* OTHERS */

	dcl     (
	        se_ptr,				/* pointer to selection expr. */
	        se_index_ptr,			/* pointer to selection expression index */
	        cd_ptr,				/* pointer to error code */
	        dbi_ptr,				/* ptr to db index */
	        appl_ptr,				/* pointer to args for translate */
	        adpl_ptr
	        )			 ptr;		/* pointer to descs for translate */

	dcl     fb35u		 fixed bin (35) unal based;

	dcl     sei		 fixed bin (35);	/* selection expression indedx */
	dcl     icode		 fixed bin (35);	/* Internal error code */

	dcl     code		 fixed bin (35) based (cd_ptr);
						/* Output: status code */
	dcl     database_index	 fixed bin (35) based (dbi_ptr);
						/* input: db index */
	dcl     se_index		 fixed bin (35) based (se_index_ptr);
						/* input: se index */

	dcl     (
	        nargs,				/* num args passed in */
	        i,				/* index variable */
	        se_len,				/* length of selection expr. */
	        arg_len,				/* length of an arg */
	        num_args
	        )			 fixed bin;	/* num args for translate */

	dcl     (null, addr, addrel, fixed, rel, mod, pointer)
				 builtin;

	dcl     (cleanup, arg_error, any_other)	 condition;

/* STATIC VARIABLES */

	declare clean_up_condition	 bit (1) init ("0"b); /* on => clean up proc called */
	declare mu_release_area	 entry (ptr);
	declare area_ptr		 ptr;

	declare mu_define_area$define_temp_dir_area
				 entry (ptr, fixed bin (35), fixed bin (18),
				 char (11), bit (1) aligned, bit (1) aligned,
				 bit (1) aligned, bit (1) aligned,
				 fixed bin (35));
	declare se_len_ptr		 ptr;		/* temp for getting varying se length */
	dcl     dbi_pic		 picture "999";

     end mrds_dsl_compile;
