/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

mrds_dsl_eval_func: proc (area_ptr, sfn_ptr, rmri_ptr, simple_typed_vector_ptr, code);

/* this routine evaluates functions appearing in
   the where clause.


*/

/* HISTORY:

   Modified for MR7.0 by JA Weeldreyer -- February, 1979

   Modified by NSDavids 27-aug-79 to initialize icode to zero rather than garbage

   Modified by Jim Gray - - Feb. 1980, to add area_ptr parameter.

   7-may-80  Davids:  modified  assignments  of  tuple_num_atts  and
   tuple_nvar_atts  to  take  values from rm_rel_info.model_num_attr
   and  model_nvar_atts   rather   than   rm_rel_info.num_attr   and
   nvar_atts.  This  was  to  fix  a problem with submodels were the
   submodel view did not contain a varying string attribute and  the
   model did.

   81-06-01 Jim Gray : modified to use new resultant structure.

   82-08-23 Mike Kubicar : converted from tuple structure to simple
   typed vector.

*/

	do i = 1 to scalfn.nargs;
	     if scalfn.arg.type (i) = EXPR
	     then call mrds_dsl_eval_expr (area_ptr, scalfn.arg.ef_ptr (i), rmri_ptr, simple_typed_vector_ptr, icode);

	     else if scalfn.arg.type (i) = SCAL_FUN
	     then call mrds_dsl_eval_func (area_ptr, scalfn.arg.ef_ptr (i), rmri_ptr, simple_typed_vector_ptr, icode);

	     else if scalfn.arg.type (i) = DATABASE
	     then call get_db_item;			/* go initialize appropriate assn_ptr and argument list ptr */
	     if icode ^= 0 then call error (icode);

	     if scalfn.arg.must_convert (i)
	     then call mu_convert$convert_data (scalfn.arg.assn_ptr (i),
		     addr (scalfn.arg.desc (i)),
		     scalfn.arg.arg_assn_ptr (i),
		     addr (scalfn.arg.arg_desc (i)),
		     icode);
	     if icode ^= 0 then call error (icode);

	end;

	call cu_$gen_call (scalfn.entry_ptr, scalfn.arg_list_ptr);

	code = 0;

exit:
	return;

get_db_item: proc;

/* procedure to move an attr. value out of the tuple, and decode it if necessary. */

	rai_ptr = scalfn.arg.ai_ptr (i);

	call mu_get_data$get_data_item (rai_ptr, area_ptr,
	     (simple_typed_vector.dimension (rm_attr_info.defn_order)
	     .value_ptr), scalfn.arg.assn_ptr (i),
	     addr (scalfn.arg.desc (i)), icode);

     end get_db_item;

error: proc (cd);

/* Error Procedure */

	dcl     cd		 fixed bin (35);

	code = cd;
	go to exit;

     end error;

	dcl     i			 fixed bin;	/* index value */

	dcl     code		 fixed bin (35);	/* Output:  status code */
	dcl     icode		 fixed bin (35) init (0); /* internal status code */

	dcl     (addr, null)	 builtin;

	dcl     mu_convert$convert_data entry (ptr, ptr, ptr, ptr, fixed bin (35));
	dcl     cu_$gen_call	 entry (ptr, ptr);

	dcl     mrds_dsl_eval_expr	 entry (ptr, ptr, ptr, ptr, fixed bin (35));
	dcl     mu_get_data$get_data_item entry (ptr, ptr, ptr, ptr, ptr, fixed bin (35));
	declare area_ptr		 ptr;

%include mrds_expressions;

%include mdbm_rm_rel_info;

%include mdbm_rm_attr_info;

%include vu_typed_vector;


     end mrds_dsl_eval_func;
