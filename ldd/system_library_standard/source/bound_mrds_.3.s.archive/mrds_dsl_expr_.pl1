/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1981 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

mrds_dsl_expr_:
    proc ();


/*
   BEGIN_DESCRIPTION
   This  procedure  translates  a  where-clause  arithmetic  expression into a
   postfix  polish  form which can be easily evaluated within mrds_dsl_search.
   END_DESCRIPTION



   HISTORY:

   77-05-01 J. A. Weeldreyer: Initially written.

   78-02-01  J.   A.   Weeldreyer:  Modified to properly handle expr.  without
   variables.

   79-02-01 J. A. Weeldreyer: Modified for MR7.0.

   79-05-04   Al   Kepner:   Modified   to   add   set_type_and_len   proc  to
   condense_data_stack.

   79-06-01 Al Kepner: Modified to use select_area.

   79-09-01  NSDavids:  Modified  to correctly build a character or bit string
   literal  as  opposed to treating it like a number which was returned from a
   function call.  Also to handle the case were the result of an expression is
   a literal type.

   79-12-01 Jim Gray : Modified to change complex data type determination from
   internal  to a call to mu_data_class$complex_data_class so that the new packed
   decimal data types get included.

   80-02-01 Jim Gray : Modified to add area_ptr parameter.

   80-09-24  Davids:  added  to the code that handles attributes a check to be
   sure  that  the  user has read permission on the attribute, if not the code
   dies  with  an  incorrect  access  error.   also removed declared but never
   referenced variables including the include file mdbm_arg_list.  Modified by
   Jim Gray - - 80-11-05, to "and" the mdbm_secured bit with the r_perm bit in
   the rm_attr_info so that secure_mrds_db turns on this check.

   81-05-06  Rickie  E.   Brinegar:  Modified  to  make  use  of  the modified
   rm_domain_info stucture.

   81-06-01 Jim Gray : modified to use new resultant strucuture.
   Also took out unused assign_ parameters.

   81-09-21 Davids: enclosed several expr.item (i) = data_stack  (j)
   assignments  with  unspecs  because  pl1 has a bug which causes a
   subscriptrange  condition  to  occur  when  the   dimensions   of
   data_stack and item are not the same.

   81-09-22 Davids: another subscriptrange condition caused  by  the
   pl1 bug.

   81-11-04  Davids:  corrected  a  problem  that  would   cause   a
   subscriptrange  condition  to  occur when an expression had extra
   parens, i.e. ((1 + 2)). The fix was to check  for  the  condition
   nops = 0 when the token is a ")", i.e. token_proc (8).

   83-02-28 Davids: explicitly declared variables that were declared by
   context of implication and removed declarations to variables that
   were never referenced.

   83-09-13 R. Harvey: added knowledge of the range structure so that the
   needed bits could be set for the attributes. Also removed / operators
   to improve speed.

   84-09-20 Hergert: Made -compiled and .X. illegal tokens. Also fixed typo
   where label token_proc(4) was spelled troken_proc(4). If -where showed up
   in an expression.....

   84-11-01 John Hergert: added call to mu_print_error for error reporting.
*/


/****^  HISTORY COMMENTS:
  1) change(88-06-27,Hergert), approve(88-07-11,MCR7903),
     audit(88-07-14,Dupuis), install(88-08-01,MR12.2-1073):
     Reworked for new parser.
                                                   END HISTORY COMMENTS */

init:
    entry (psi_ptr,level);

        if level=1 then do;
	   allocate data_stacks in (parser_work_area);
	   data_stacks.stack_top (*) = 0;
        end;
        else nstk_items = 0;

        return;

build_function:
    entry (psi_ptr,dbcb_ptr, efd_ptr, level, code);

        if nstk_items >= mrds_data_$max_expr_stack_size
        then
						/* make sure we dont overflow */
	   call error (mrds_error_$expr_stack_ovfl, LOUD, 0, WCE_TYPE,
	        "Too many items have been specified in an expression.");

        nstk_items = nstk_items + 1;			/* add function to data stack */
        data_stack.type (nstk_items) = SCAL_FUN;
        data_stack.op_code (nstk_items), data_stack.data_type (nstk_items) =
	   0;
        data_stack.desc (nstk_items) = exp_fun_data.descriptor;
        data_stack.loc_index (nstk_items) = exp_fun_data.loc_index;
        data_stack.bit_length (nstk_items) = exp_fun_data.bit_length;
        data_stack.assn_ptr (nstk_items) = exp_fun_data.assn_ptr;
        data_stack.ai_ptr (nstk_items) = null;
        data_stack.fn_ptr (nstk_items) = exp_fun_data.ef_ptr;

        code = 0;
        return;

build_attribute:
    entry (psi_ptr,dbcb_ptr, range_ptr, rel_index, ai_ptr, level, code);

dcl     ai_ptr		 ptr;
dcl     rel_index		 fixed bin;


        if nstk_items >= mrds_data_$max_expr_stack_size
        then
						/* check for overflow */
	   call error (mrds_error_$expr_stack_ovfl, LOUD, 0, WCE_TYPE,
	        "Too many items have been specified in an expression.");

        rai_ptr = ai_ptr;				/* save space to move attr. value */
        if rm_attr_info.mdbm_secured & ^(rm_attr_info.read_perm)
						/* if you don't have read access to an attribute */
        then call error (mdbm_error_$inc_attr_acc, LOUD, 0, AV_TYPE,
	        "You must have read access to use an attribute in an expression."
	        );				/* it shouldn't be in an expression */
        rdi_ptr = rm_attr_info.domain_ptr;

/* Say this attribute is needed */

        range.tup_var (rel_index).needed_bits.attr (rm_attr_info.defn_order) =
	   "1"b;

        li.encd_proc = "0"b;
        li.src_ptr, li.srcd_ptr, li.encdd_ptr = null;

        li.litd_ptr = addr (rm_domain_info.user_desc);
        li.encd_blen = 0;
        call mrds_dsl_make_literal$alloc (dbcb_ptr, addr (li), code);
        if code ^= 0
        then
	   call error (code, LOUD, 0, WCE_TYPE, "");

        nstk_items = nstk_items + 1;			/* add tuple attr. to data stack */
        data_stack.type (nstk_items) = DATA;
        data_stack.op_code (nstk_items) = 0;
        data_stack.data_type (nstk_items) = DATABASE;
        data_stack.desc (nstk_items) = li.litd_ptr -> bit36;
        data_stack.loc_index (nstk_items) = li.lit_offset;
        data_stack.bit_length (nstk_items) = li.lit_blen;
        data_stack.assn_ptr (nstk_items) = li.lit_ptr;	/* we dont know this now */
        data_stack.ai_ptr (nstk_items) = ai_ptr;
        data_stack.fn_ptr (nstk_items) = null;

        code = 0;
        return;

build_literal:
    entry (psi_ptr,dbcb_ptr, a_ptr, d_ptr, char_sw, level, code);

/* Procedure to build a literal expr. item and add it to the data stack. */

dcl     (a_ptr, d_ptr)	 ptr;
dcl     lit_char		 char (lit_len) based (a_ptr);
dcl     lit_char_var	 char (lit_len) var based (a_ptr);
dcl     lit_len		 fixed bin;

        if nstk_items >= mrds_data_$max_expr_stack_size	/* check for overflow */
        then call error (mrds_error_$expr_stack_ovfl, LOUD, 0, WCE_TYPE,
	        "Too many items have been specified in a en expression.");

        nstk_items = nstk_items + 1;			/* add literal to data stack */

        lit_len = fixed (string (d_ptr -> descriptor.size));
        if ^char_sw then do;
	  if d_ptr -> descriptor.type = CHAR_VAR_TYPE
	  then
	       if index (lit_char_var, "i") ^= 0
	       then				/* check if could be complex */
		  desc_ptr = addr (CFLTD59);
	       else desc_ptr = addr (RFLTD59);

	  else if d_ptr -> descriptor.type = CHAR_TYPE
	       then
		  if index (lit_char, "i") ^= 0
		  then
		       desc_ptr = addr (CFLTD59);
		  else desc_ptr = addr (RFLTD59);

	       else if mu_data_class$complex_data_class (d_ptr)
		  then
		       desc_ptr = addr (CFLTD59);
		  else desc_ptr = addr (RFLTD59);
        end;

        data_stack.type (nstk_items) = DATA;
        data_stack.op_code (nstk_items) = 0;
        data_stack.data_type (nstk_items) = LITERAL;
        data_stack.ai_ptr (nstk_items), data_stack.fn_ptr (nstk_items) = null;

        if char_sw then do;
	  data_stack.desc (nstk_items) = d_ptr -> bit36;
	  li.litd_ptr = d_ptr;
        end;
        else do;
	  data_stack.desc (nstk_items) = desc_ptr -> bit36;
	  li.litd_ptr = desc_ptr;
        end;

        li.src_ptr = a_ptr;				/* make the literal */
        li.srcd_ptr = d_ptr;
        li.encd_proc = "0"b;
        li.encdd_ptr = null;
        li.encd_blen = 0;

        call mrds_dsl_make_literal (dbcb_ptr, addr (li), code);
        if code ^= 0
        then
	   call error (code, LOUD, 0, WCE_TYPE, "");

        data_stack.loc_index (nstk_items) = li.lit_offset;
        data_stack.bit_length (nstk_items) = li.lit_blen;
        data_stack.assn_ptr (nstk_items) = li.lit_ptr;

        code = 0;
        return;

condense_stack:
    entry (psi_ptr,dbcb_ptr, a_select_area_ptr, operator, level, code);

/* Procedure to combine the top 2 data_stack items, and the parameter operator
   into one sub_expression.  Space to hold the result is allocated in
   the literal pool. */

dcl     (i, j, k)		 fixed bin;
dcl     operator		 char (1) aligned;

        select_area_ptr = a_select_area_ptr;
        if data_stack.type (nstk_items - 1) ^= EXPR	/* two data items */
	   & data_stack.type (nstk_items) ^= EXPR then do;/* build new sub-expr */

	  nexp_items_init = mrds_data_$max_expr_items;	/* may grow to max */
	  allocate expr in (select_area);		/* Allocations in select_area are never freed.  This area
						   is reinitialized at the beginning of each new selection expression. */
	  expr.nitems = 3;				/* just starting */
	  unspec (expr.item (1)) = unspec (data_stack (nstk_items - 1));
	  unspec (expr.item (2)) = unspec (data_stack (nstk_items));
	  data_stack.type (nstk_items - 1) = EXPR;
	  data_stack.ai_ptr (nstk_items) = null;
	  data_stack.fn_ptr (nstk_items - 1) = expr_ptr;	/* reuse first data_stack item for new sub-expr */
	  data_stack.desc (nstk_items - 1) =
	       resolve_descs (data_stack.desc (nstk_items - 1),
	       data_stack.desc (nstk_items));
	  nstk_items = nstk_items - 1;		/* reduce data stack */
        end;					/* building new sub_expr */

        else if data_stack.type (nstk_items - 1) = EXPR	/* if both are sub-exprs */
	        & data_stack.type (nstk_items) = EXPR then do;
						/* combine both into one */
	       expr_ptr = data_stack.fn_ptr (nstk_items - 1);
						/* the first one will survive */
	       i = expr.nitems;			/* no. items in first */
	       expr_ptr1 = data_stack.fn_ptr (nstk_items);
	       j = expr_ptr1 -> expr.nitems;		/* no. items in second */
	       if i + j + 1 > mrds_data_$max_expr_items
	       then				/* check for overflow */
		  call error (mrds_error_$max_expr_items, LOUD, 0,
		       WCE_TYPE,
		       "Too many items have been specified in an expression."
		       );

	       expr.nitems = i + j + 1;		/* set count for combined expr */
	       do k = i + 1 to i + j;			/* append second expr. to first */
		 unspec (expr.item (k)) =
		      unspec (expr_ptr1 -> expr.item (k - i));

	       end;


	       data_stack.desc (nstk_items - 1) =
		  resolve_descs (data_stack.desc (nstk_items - 1),
		  data_stack.desc (nstk_items));
	       nstk_items = nstk_items - 1;		/* reduce stack size */
	   end;					/* condensing two sub-exprs */

	   else do;				/* adding data item to sub-expr */

	       if data_stack.type (nstk_items) = EXPR then do;
		 i = nstk_items;			/* i -> sub_expr */
		 j = nstk_items - 1;		/* j -> data item */
	       end;
	       else do;
		 i = nstk_items - 1;		/* ditto */
		 j = nstk_items;
	       end;

	       expr_ptr = data_stack.fn_ptr (i);	/* look at sub-expr */
	       if expr.nitems + 2 > mrds_data_$max_expr_items
	       then				/* check for overflow */
		  call error (mrds_error_$max_expr_items, LOUD, 0,
		       WCE_TYPE,
		       "Too many item have been specified in an expression."
		       )
		       ;

	       expr.nitems = expr.nitems + 2;		/* update count */
	       if i < j
	       then				/* if expr is first operand */
		  unspec (expr.item (expr.nitems - 1)) =
		       unspec (data_stack (j));
						/* CHANGE 81-09-21 append data item */
	       else do;				/* if data item is first */
		 do k = expr.nitems - 2 to 1 by -1;
		     expr.item (k + 1) = expr.item (k); /* move each item up one slot */
		 end;
		 unspec (expr.item (1)) = unspec (data_stack (j));
						/* CHANGE 81-09-21 move data item into first slot */
	       end;				/* if data item first */

	       data_stack.desc (i) =
		  resolve_descs (data_stack.desc (i), data_stack.desc (j));

	       if i = nstk_items
	       then				/* if sub-expr last item in stack */
		  data_stack (nstk_items - 1) = data_stack (nstk_items);
						/* move it down one */
	       nstk_items = nstk_items - 1;

	   end;					/* appending data item to sub-expr */

        li.encd_proc = "0"b;
        li.src_ptr,					/* reserve space for result */
	   li.srcd_ptr, li.encdd_ptr = null;

        li.litd_ptr = addr (data_stack.desc (nstk_items));
        li.encd_blen = 0;
        call mrds_dsl_make_literal$alloc (dbcb_ptr, addr (li), code);
        if code ^= 0
        then
	   call error (code, LOUD, 0, WCE_TYPE, "");
        data_stack.loc_index (nstk_items) = li.lit_offset;
        data_stack.bit_length (nstk_items) = li.lit_blen;
        data_stack.assn_ptr (nstk_items) = li.lit_ptr;

        expr.item.type (expr.nitems) = OPERATOR;		/* now add operator to expr */
        expr.item.op_code (expr.nitems) = index (OPERATOR_LIST, operator);

        expr.item.desc (expr.nitems) = data_stack.desc (nstk_items);
        expr.item.loc_index (expr.nitems) = data_stack.loc_index (nstk_items);
        expr.item.bit_length (expr.nitems) =
	   data_stack.bit_length (nstk_items);
        expr.item.assn_ptr (expr.nitems) = data_stack.assn_ptr (nstk_items);
        expr.item.data_type (expr.nitems) = 0;
        expr.item.ai_ptr (expr.nitems), expr.item.fn_ptr (expr.nitems) = null;

        code = 0;
        return;

finish:
    entry (psi_ptr,efd_ptr, a_select_area_ptr, level);


        if nstk_items = 1
        then					/* special case of single function in expr */
	   if data_stack.type (1) = SCAL_FUN then do;
	       nexp_items_init = 1;
	       allocate expr in (a_select_area_ptr -> select_area);
	       expr.nitems = 1;
	       unspec (expr.item (1)) = unspec (data_stack (1));
	       data_stack.fn_ptr (1) = expr_ptr;
	   end;

        exp_fun_data.loc_index = data_stack.loc_index (1);	/* fill in result info for caller */
        exp_fun_data.bit_length = data_stack.bit_length (1);
        exp_fun_data.descriptor = data_stack.desc (1);
        exp_fun_data.assn_ptr = data_stack.assn_ptr (1);
        exp_fun_data.ef_ptr = data_stack.fn_ptr (1);

        return;

resolve_descs:
    proc (d1, d2) returns (bit (36) aligned);

/* Procedure to determine whether to use complex or real float dec (59). */

dcl     (d1, d2, rslt)	 bit (36) aligned;

        if mu_data_class$complex_data_class (addr (d1))
	   | mu_data_class$complex_data_class (addr (d2))
        then
	   rslt = CFLTD59;				/* if either input is complex */
        else rslt = RFLTD59;				/* if not */
        return (rslt);

    end resolve_descs;

error:
    proc (cd, loud, stack_offset, error_type, message);

dcl     cd		 fixed bin (35);		/* standard error code */
dcl     loud		 bit (1) aligned;		/* OFF => dont print or signal error */
dcl     stack_offset	 fixed bin;		/* offset from ls_top of where token is in lex stack */
dcl     error_type		 char (*);
dcl     message		 char (*);

        se_info_ptr = dbcb.se_info_ptr;

        code = cd;

        se_info.loud = loud;
        se_info.error_type = error_type;
        se_info.token_start = 0;
        se_info.stack_offset = stack_offset;		/* save this for semantics */
        se_info.error_msg = message;
        se_info.error_info_supplied = "1"b;		/* so no one else handles it */

        goto exit;

    end error;

%include mrds_dbcb;
%page;
%include mrds_se_info;
%page;
%include mrds_exp_fun_data;
%page;
%include mrds_expressions;
%page;
%include mdbm_descriptor;
%page;
%include mrds_lit_info;
%page;
%include mdbm_rm_attr_info;
%page;
%include mdbm_rm_domain_info;
%page;
%include mrds_range;
%page;
%include mdbm_seg_area;
%page;
%include mrds_select_area;

dcl     expr_ptr1		 ptr;			/* another pointer to expr */

dcl     code		 fixed bin (35);
dcl     bit36		 bit (36) based;
dcl     1 li		 aligned like lit_info;

dcl     nstk_items		 fixed bin
			 based (addr (data_stacks.stack_top (level)));
						/* current number of items in data stack */
dcl     level		 fixed bin (17);
dcl     1 data_stack	 (mrds_data_$max_expr_stack_size) aligned like expr.item
			 based (addr (data_stacks.stack (level, 1)));

dcl     1 data_stacks	 (mrds_data_$max_nested_expr)
			 aligned based (parser_static_info.data_stacks_ptr),
	2 stack_top	 fixed bin,
	2 stack		 (mrds_data_$max_expr_stack_size)
			 aligned like expr.item;

dcl     CHAR_VAR_TYPE	 fixed bin (5) int static options (constant)
			 init (22);
dcl     CHAR_TYPE		 fixed bin (5) int static options (constant)
			 init (21);



dcl     (
        mrds_data_$max_attributes,
        mrds_data_$max_id_len,
        mrds_data_$max_expr_stack_size,
        mrds_data_$max_expr_items,
        mrds_data_$max_nested_expr,
        mrds_error_$expr_stack_ovfl,
        mrds_error_$max_expr_items,
        mdbm_error_$inc_attr_acc,
        sys_info$max_seg_size
        )			 fixed bin (35) ext;

dcl     (null, addr, fixed, string, index, unspec, rel)
			 builtin;

dcl     mrds_dsl_make_literal	 entry (ptr, ptr, fixed bin (35));
dcl     mrds_dsl_make_literal$alloc
			 entry (ptr, ptr, fixed bin (35));
dcl     mu_data_class$complex_data_class
			 entry (ptr) returns (bit (1) aligned);
						/* returns true if
						   descriptor pointed to = complex numeric */
dcl     char_sw		 bit (1) aligned;
dcl     LOUD		 bit (1) aligned internal static
			 options (constant) init ("1"b);
dcl     OPERATOR_LIST	 char (4) aligned internal static
			 options (constant) init ("+-*/");
dcl     se_info_ptr		 ptr;
dcl     a_select_area_ptr      ptr;
exit:
    end mrds_dsl_expr_;
