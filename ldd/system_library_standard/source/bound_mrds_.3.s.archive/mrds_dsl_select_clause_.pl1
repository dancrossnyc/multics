/****^  ********************************************
        *                                          *
        * Copyright, (C) Honeywell Bull Inc., 1988 *
        *                                          *
        ******************************************** */



/****^  HISTORY COMMENTS:
  1) change(87-01-22,Hergert), approve(88-07-11,MCR7903),
     audit(88-07-07,Dupuis), install(88-08-01,MR12.2-1073):
     Written.
                                                   END HISTORY COMMENTS */


mrds_dsl_select_clause_:
    proc ();

/* DESCRIPTION:

   BEGIN_DESCRIPTION
   This  procedure  translates  the  -select  clause  within  a  DSL selection
   expression  into a tabular form which can be efficiently processed when the
   data is being accessed. The various entrypoints are called by
   mrds_dsl_semantics during the parse.


   INPUT CONDITIONS:

   compiled_clause entry:
   This handles a selection expression that consists of a -compiled only.

   all_attributes entry:
   This handles the portion of a select clause that is meant to return
   a dump of the relation. It is of the type "-select a".

   one_attribute entry:
   This handles the portion of a select clause that is meant to return
   a single attribute. It is of the type "-select a.car".

   finish entry:
   This is called after all of the individual select items have been
   dealt with. It wraps up the processing of the select clause.


   END_DESCRIPTION

   HISTORY:

   76-01-01 J. A. Weeldreyer: Initially written.

   76-09-01 J. A. Weeldreyer: Modified to correct assign_ length problem.

   76-09-02 J. A. Weeldreyer: Modified to correct area ptr init problem.

   76-10-01  J.   A.   Weeldreyer:  Modified  to  return error if key attr not
   defined for temp rel.

   76-11-01 J . A. Weeldreyer: Modified  to fix temp rel key problem.

   76-11-02 J. A. Weeldreyer: Modified to incorporate inverted attributes.

   77-04-01  J.   A.   Weeldreyer:  Modified  to  implement -dup and to remove
   complex range code.

   77-12-01 Oris D.  Friesen: Modified to allocate 'store -another' version of
   select_list.

   78-09-01 J. A. Weeldreyer: Modified for MR7.0.

   79-03-22 Al Kepner: Modified to add scope checking.

   79-03-25  Al  Kepner:  Modified  by  to  include all range variables in the
   tuple_info  structure  and  to flag those range variables which are used in
   the -select clause.

   79-06-01 Al Kepner: Modified to use select_area.

   79-11-01 Jim Gray: Modified to make hanlding of deletes with se_values work
   correctly,  by considering the caller, and not gobbling up the se_values as
   arg values.

   80-01-01     Jim     Gray     :     Modified     to     add     call     to
   mu_valid_data_type$valid_scalar_data_type, so that packed decimal could be properly
   handled.

   80-01-15  Jim  Paradise:  Updated  to update the move lists on handling the
   -another entry: set_user_vals.

   80-02-01 Jim Gray : Modified to add area_ptr parameter in all entries.

   80-05-07 Davids: modified assignments of tuple_num_atts and tuple_nvar_atts
   to  take  values from rm_rel_info.model_num_attr and model_nvar_atts rather
   than  rm_rel_info.num_attr  and  nvar_atts.  This was to fix a problem with
   submodels were the submodel view did not contain a varying string attribute
   and the model did.

   80-09-25   Davids:  the  internal  procedure  check_access  was  added  and
   appropriate  calls  placed  in  the  code.   this module will now check the
   access  on  all  attributes specified in the select clause for the retrieve
   and  modify  operations.   if  the  user  does  not  have  access the error
   incorrect  attribute access is returned.  access at the relation level i.e.
   append  and  delete  are  done  elsewhere.  the information needed to check
   these  access  are  not  easily  gotten  at  this level in all cases.  also
   removed  the declared but never referenced variables.

   80-11-05  Jim Gray : Modified to "and" the mdbm_secured bit with the r_perm
   bits in rm_attr_info so that secure_mrds_db turns this check on.

   80-12-10 Jim Gray : changed scope mode checks to agree with change from r-u
   to  r-s-m-d  type  modes, also changed names to read_attr, modify_attr, and
   delete_tuple  to  agree  with  security  compatiple  names.  Documented and
   cleaned  up  the  scope  checking  code.   Added  sub_err_  messages on the
   particulars  of  the  scope  violation.  This was done with the new routine
   scope_error.   The  mrds_data_$caller_xxx  parameters were changed to fixed
   bin(35) to agree with the mrds_data_ declarations.

   81-06-01 Jim Gray : changed to use new resultant structure.

   81-06-23 Jim Gray : added fix to re-use space for select_list structure
   when many -current operations are done, ala TR 10193.

   81-09-09 Davids: modified so that the internal routine set_u_val is not
   called for the case of a define_temp_rel. TR 11447

   81-12-18 Davids: Modified so that the val_del and  val_mod  flags
   are  no  longer set to "0"b if an attribute comes from a temp_rel
   or if the range variable (if no attributes are specified)  refers
   to  a  temp_rel.  This  is so that temp_rels can be updated. Also
   deleted declared but unreferenced variables.

   82-06-16 Mike Kubicar : Added the fix for TR phx12345.  This module
   would take an area condition if many retrieves with a selection expression
   of "-current ..." were done in a row.

   82-08-27 Mike Kubicar : Removed tuple structure and allocation of tuples.

   82-09-22 Davids: removed references to dbcb.transact_ctl_seg, since this
   bit was always "0"b and the if statements testing it always used ^dbcb...
   not much really changed.

   82-11-02 Mike Kubicar : Changed make_tuple_info (and added a bit of code)
   to pre-allocate enough space of any simple vectors needed for a search.

   83-04-06 Davids: Modified the scope checking code to use the new
   scope_flags_ptr in the rm_rel_info structure instead of sequentially
   looking through th escope_info array for the correct relation.
   The declaration to the variable j was deleted since it is no longer used.
   Also explicitly declared the mod builtin function.

   83-04-11 Davids: Replaced reference to add_bit_offset_ with a reference to
   addnitno.

   83-04-22 R. Harvey: added code to set bits in the attr_needed_list structure
   so that less data may be copied from the relation manager.

   84-07-19 Hergert: Moved set_user_vals out of here and made it external.
   Also took set_u_vals and update_movelists with it. Changed calls to
   set_u_vals to mrds_dsl_set_user_vals. This was all done as
   a performancce improvement in the processing of -another's

   84-09-05 Hergert: Added check for call from dsl_$compile so we dont
   bother checking scope or setting user vals since we dont know them anyway.
   Also added entry point compiled_clause for handling compiled se.

   84-11-01 Hergert: Added call to mu_print_error for reporting errors.

   84-11-25 Hergert: created procedure check_scope so that we will check scope
   on compiled selection expressions. This was an oversight during the original
   implemantation. Also made struct free_relations to handle this problem.

   84-12-12 Hergert: Added code to initialize the select_list structure. There
   were certain situations where the random data in the pointers caused
   fault_tags.

   85-11-22 Hergert: Removed all references to var_exists_ptr. Moved
   variable var_exists into select_list structure. It needs to be kept
   around for compiling select expresssions, and it doesnt need to be
   kept for normal processing. This seemed to be the best compromise.

   86-05-05 Hergert: Reorganized and modified for new parser.
*/

compiled_clause:
    entry (dbcb_ptr, area_ptr, caller, argp_ptr, descp_ptr, num_args, trl_ptr,
        cur_sw, code);

/* this entry processes a selection expression consisting of only a -compiled
   clause. It sets up the user values and the move lists for the actual use
   of a compiled select expression.
*/

        compiled_sw = "1"b;
        select_area_ptr = dbcb.select_area_ptr;

        if dbcb.ss_ptr = null then do;
	  range_ptr = dbcb.range_ptr;			/* pick up correct ptr to range list */
	  select_list_ptr = dbcb.select_ptr;		/* and select list */
        end;
        else do;					/* if complex select. expr. */
	  ss_ptr = dbcb.ss_ptr;
	  range_ptr = select_sets.items.range_ptr (1);
	  select_list_ptr = select_sets.items.select_ptr (1);
        end;

/* make sure no one has changed a temp rel on us since we first compiled this se */
        if trl_ptr ^= null
        then
	  do i = 1 to temp_rel_list.number_of_temp_rels;
	      if dbcb.rdbi_ptr -> rm_db_info.tra_ptr
		-> rm_rel_array.name.submodel (temp_rel_list.index (i)) ^=
		temp_rel_list.name (i)
	      then call error (mrds_error_$undef_temp_rel, ^LOUD, 0, "", "");
	  end;

        call mrds_dsl_set_user_vals
	  (dbcb_ptr, area_ptr, argp_ptr, descp_ptr, num_args,
	  select_list_ptr, code);
        if code ^= 0 then call error (code, ^LOUD, 0, "", "");

        call check_scope;				/* make sure proper scope has been set */

        if dbcb.ss_ptr ^= null then do;			/* must copy user data */
	  s_ptr = select_sets.items.select_ptr (1);	/* data from 1st block */
	  do k = 2 to select_sets.nitems;
	      if ^select_sets.oper_flag (k) then do;
		select_list_ptr = select_sets.items.select_ptr (k);
		do i = 1 to select_list.num_items;	/* can copy because from same domains */
		    select_list.item.user_ptr (i) =
		        s_ptr -> select_list.item.user_ptr (i);
		    select_list.item.must_convert (i) =
		        s_ptr -> select_list.item.must_convert (i);
		    select_list.item.user_desc_ptr (i) =
		        s_ptr -> select_list.item.user_desc_ptr (i);
		    call make_move_lists;
		end;
	      end;
	  end;
        end;
        else call make_move_lists;

        return;

all_attributes:
    entry (dbcb_ptr, a_range_ptr, a_select_list_ptr, a_rmri_ptr,
        relation_index, cur_sw, caller, code);

/* this entry process a single token appearing in a select clause.
   This is assumed to be either a reference to dump a whole relation
   or a single attribute in a relation that need no other qualification.
*/
        range_ptr = a_range_ptr;
        select_list_ptr = a_select_list_ptr;
        rmri_ptr = a_rmri_ptr;
        dbcb.val_mod = "0"b;				/* whole tuple includes key attr. */
        var_exists (relation_index) = "1"b;		/* remember this var selected */
        range.tup_var.used (relation_index) = "1"b;	/* remember this var used */
        ss_ptr = dbcb.ss_ptr;

        if ss_ptr = null then check_sw = "0"b;
        else check_sw = "1"b;

        compiled_sw = "0"b;

        if caller ^= mrds_data_$caller_delete
        then do;
	  if ^cur_sw
	  then range.tup_var.whole_tuple_selected (relation_index) = "1"b;
						/* remember whole tuple selected */
	  else if ^range.tup_var.whole_tuple_selected (relation_index) &
		 ^range.tup_var.copied_for_current (relation_index)
	       then range.tup_var.copy_for_current (relation_index) = "1"b;
        end;

/* Keep a list of relations associated with free tuple
   variables (scope must be set before use.) */

        if ^range.tup_var.temp_rel (relation_index)
        then call add_free_rel (relation_index);		/* add_assoc. rels. to free list */

        do i = 1 to rm_rel_info.num_attr;		/* for each attribute */

	  if ^rm_rel_info.mdbm_secured
	  then call check_access (caller,
		 rm_rel_info.attr_ptrs (i) -> rm_attr_info.read_perm,
		 rm_rel_info.attr_ptrs (i) -> rm_attr_info.modify_perm);

	  if select_list.num_items >= mrds_data_$max_select_items
	  then do;				/* if no more room */
	      call ioa_$rsnnl ("Only ^d items are allowed.", err_msg,
		err_msg_len, mrds_data_$max_select_items);
	      call error (mrds_error_$max_select_items, LOUD, 0, SC_TYPE,
		err_msg);
	  end;

	  select_list.num_items = select_list.num_items + 1;
						/* we have room, increment count */
	  unspec (select_list.item (select_list.num_items)) = "0"b;

	  if check_sw
	  then					/* if checking union compat */
	       if dbcb.prev_select then do;		/* if have prev block */
		  if rm_rel_info.attr_ptrs (i)
		      -> rm_attr_info.domain_ptr -> rm_domain_info.name ^=
		      select_sets.domains (select_list.num_items)
		  then				/* if not compat */
		       call error (mrds_error_$block_dom_incons, LOUD, 0,
			 SC_TYPE,
			 "");
	       end;

	  select_list.item.key (select_list.num_items) = "0"b;
						/* temp rel keys must
						   be spec. explic. */
	  select_list.item.index (select_list.num_items) = "0"b;
	  select_list.item.var_index (select_list.num_items) =
	      relation_index;
	  select_list.item.ai_ptr (select_list.num_items) =
	      rm_rel_info.attr_ptrs (i);

        end;					/* looping through attrib. */

        return;

one_attribute:
    entry (dbcb_ptr, a_range_ptr, a_select_list_ptr, a_rmri_ptr, attr_index,
        relation_index, temp_rel_key, cur_sw, caller, code);

/* this entry process a uniquely qualified attribute in a select clause.
   This is the case when the realtion and an attribute are specified
   as in -select a.foo
*/

        range_ptr = a_range_ptr;
        select_list_ptr = a_select_list_ptr;
        rmri_ptr = a_rmri_ptr;
        ai_ptr = rm_rel_info.attr_ptrs (attr_index);
        ss_ptr = dbcb.ss_ptr;

        if ss_ptr = null then check_sw = "0"b;
        else check_sw = "1"b;

        compiled_sw = "0"b;

        if select_list.num_items >= mrds_data_$max_select_items
        then do;					/* If we already have max items */
	  call ioa_$rsnnl ("Only ^d items are allowed.", err_msg,
	      err_msg_len, mrds_data_$max_select_items);
	  call error (mrds_error_$max_select_items, LOUD, 0, SC_TYPE,
	      err_msg);
        end;

        if select_list.num_items > 0
	  & select_list.item.var_index (select_list.num_items)
	  ^= relation_index
        then dbcb.val_mod, dbcb.val_del = "0"b;		/* cant update mult. tuples */

        select_list.num_items = select_list.num_items + 1;	/* have more room, so bump up count */
        unspec (select_list.item (select_list.num_items)) = "0"b;

        if check_sw
        then					/* if checking union compat */
	   if dbcb.prev_select then do;		/* if have prev block */
	       if ai_ptr -> rm_attr_info.domain_ptr -> rm_domain_info.name ^=
		 select_sets.domains (select_list.num_items)
	       then
		  call error (mrds_error_$block_dom_incons, LOUD, 0,
		      SC_TYPE,
		      "");
						/* if not compat */
	   end;

        if ai_ptr -> rm_attr_info.mdbm_secured
        then call check_access (caller, ai_ptr -> rm_attr_info.read_perm,
	       ai_ptr -> rm_attr_info.modify_perm);

        if ai_ptr -> rm_attr_info.key_attr
        then					/* cant modify key attr. */
	   dbcb.val_mod = "0"b;

        if dbcb.prev_select
        then
	   select_list.item.key (select_list.num_items) =
	       select_sets.items.select_ptr (1)
	       -> select_list.item.key (select_list.num_items);
        else
	   select_list.item.key (select_list.num_items) = temp_rel_key;

        select_list.item.var_index (select_list.num_items) = relation_index;
        select_list.item.ai_ptr (select_list.num_items) = ai_ptr;
        var_exists (relation_index) = "1"b;		/* remember this var. selected */
        range.tup_var.used (relation_index) = "1"b;
						/* remember this var used */

        if caller ^= mrds_data_$caller_modify
        then
	   if ^cur_sw
	   then range.tup_var (relation_index).needed_bits
		  .attr (ai_ptr -> rm_attr_info.defn_order) = "1"b;
						/* Mark this attribute as selected */
	   else if ^range.tup_var (relation_index).needed_bits
		  .attr (ai_ptr -> rm_attr_info.defn_order)
		  & ^range.tup_var.whole_tuple_selected (relation_index)
		  & ^range.tup_var.copied_for_current (relation_index)
	        then range.tup_var.copy_for_current (relation_index) = "1"b;


/* Keep a list of relations associated with free tuple
   variables if the db does not have a transaction control file (implies
   scope must be set before use.) */

        if ^range.tup_var.temp_rel (relation_index)
        then call add_free_rel (relation_index);		/* add_assoc. rels. to free list */

        return;

finish:
    entry (dbcb_ptr, a_range_ptr, a_select_list_ptr, ti_ptr, caller, area_ptr,
        argp_ptr, descp_ptr, num_args, cur_sw, code);
						/* this entry finishes up a select clause */

        range_ptr = a_range_ptr;
        select_list_ptr = a_select_list_ptr;
        select_area_ptr = dbcb.select_area_ptr;
        compiled_sw = "0"b;

        if ^cur_sw & dbcb.prev_select then do;		/* must copy user data */
	  s_ptr = dbcb.ss_ptr -> select_sets.items.select_ptr (1);
						/* dtat from 1st block */

	  if s_ptr -> select_list.num_items ^= select_list.num_items
	  then do;				/* must match */
	      call ioa_$rsnnl (
		"^d items were selected in the previous select clause and ^d items were selected in the current one."
		, err_msg, err_msg_len, s_ptr -> select_list.num_items,
		select_list.num_items);
	      call error (mrds_error_$block_sel_incons, LOUD, 1, SC_TYPE,
		err_msg);
	  end;

	  do i = 1 to select_list.num_items;		/* can copy because from same domains */
	      select_list.item.user_ptr (i) =
		s_ptr -> select_list.item.user_ptr (i);
	      select_list.item.must_convert (i) =
		s_ptr -> select_list.item.must_convert (i);
	      select_list.item.user_desc_ptr (i) =
		s_ptr -> select_list.item.user_desc_ptr (i);
	      call make_move_lists;
	  end;					/* user data copy */
        end;					/* if previous select block */

/* there are four cases of existance of selection_expression values, and argument values:
   1) neither are present
   2) both are present
   3) only argument values are present
   4) only selection expression values are present

   1 and 4 are legal for delete, compile and define_temp_rel, 2 and 3 are
   legal for retrieve/modify/store
   if the user leaves out any values for retrieve/modify/store, he gets
   an insufficient_args error
   case 4 with delete must not gobble up se_values mistaken for arg values
   NOTE: se_values are legal in two cases
   a) for temp rels in the range clause
   b) for all selection expressions, for substitutions in the where clause
*/
        else if caller = mrds_data_$caller_compile
	   then call make_tuple_info;
	   else if num_args <= 0 | caller = mrds_data_$caller_delete
		  | caller = mrds_data_$caller_define_temp_rel
	        then do;				/* if no user args, can only delete or dtrel */
		  dbcb.val_mod, dbcb.val_rtrv = "0"b;
		  call make_tuple_info;
	        end;
	        else do;
		  call mrds_dsl_set_user_vals
		      (dbcb_ptr, area_ptr, argp_ptr, descp_ptr, num_args,
		      select_list_ptr, code);
		  call make_move_lists;
	        end;

        if caller ^= mrds_data_$caller_compile then call check_scope;
						/* we dont care about scope if compiling */

        if cur_sw
        then dbcb.current_ptr = select_list_ptr;		/* put select list pointer in correct slot */
        else dbcb.prev_select = "1"b;			/* remember we have procesed a select list */

        return;

check_scope:
    proc;
						/* We must check for proper scope setting on each relation referenced.
						   If a relation appears in the where clause but not in the select clause,
						   then it must have at least read_attr scope permission.
						   A relation appearing in the select clause will require
						   read_attr permission for a retrieve or define_temp_rel oepration
						   modify_attr permission for a modify operation
						   delete_tuple permission for a delete oepration.
						   NOTE: store requires append_tuple, but is handled in mrds_dsl_store
						*/

        do i = 1 to range.num_vars;			/* verify scope for each variable */
	  if ^range.tup_var.temp_rel (i) then do;	/*  for data base rels. only */
	      rmri_ptr = range.tup_var.ri_ptr (i);
	      free_rel = "0"b;			/* assume is bound */
	      do k = 1 to num_free_rels while (^free_rel);/* search free relation list */
		if range.tup_var.rel_index (i) = free_rels (k)
		then free_rel = "1"b;		/* found it */
	      end;

	      if free_rel then do;			/* tuple variable appears in select clause */
		go to free_scope_check (caller);	/* if free, check scope for function */
free_scope_check (1):				/* delete */
		if rm_rel_info.scope_flags_ptr
		    -> scope_flags.permits.delete_tuple /* if scope not set for delete_tuple */
		then goto end_free_scope_check;
		else call scope_error (caller, mrds_error_$scope_viol);

free_scope_check (2):				/* modify */
		if rm_rel_info.scope_flags_ptr
		    -> scope_flags.permits.modify_attr	/* if scope not set for modify_attr */
		then goto end_free_scope_check;
		else call scope_error (caller, mrds_error_$scope_viol);

free_scope_check (3):				/* retrieve */
free_scope_check (4):				/* define_temp_rel */
		if rm_rel_info.scope_flags_ptr
		    -> scope_flags.permits.read_attr	/* if scope not set for retrieve */
		then goto end_free_scope_check;
		else call scope_error (caller, mrds_error_$scope_viol);
end_free_scope_check:
	      end;
	      else				/* tuple variable does not appear in select clause,
						   just where clause */
		 if ^rm_rel_info.scope_flags_ptr
		     -> scope_flags.permits.read_attr	/* if scope not set for retrieve */
		 then call scope_error (mrds_data_$caller_retrieve,
			mrds_error_$scope_viol);	/* insist on retrieve for bound rels. */
	  end;					/* checking this relation */
        end;

    end check_scope;

scope_error:
    procedure (calling_routine, code);

/* routine to issue error message with specifics of scope violation */

        if calling_routine = mrds_data_$caller_delete
        then
	   scope_type = "delete_tuple";
        else if calling_routine = mrds_data_$caller_modify
	   then
	        scope_type = "modify_attr";
	   else scope_type = "read_attr";		/* retrieve, define_temp_rel operations,
						   or tuple variable not in select clause */

        call sub_err_ (code, caller_name, continue, info_ptr, return_value,
	  "^/^a^a^a^a^a",
	  "The relation """, rm_rel_info.name,
	  """ needs a scope permission of """,
	  scope_type, """ in order to perform this operation.");

        call error (code, ^LOUD, 0, "", "");		/* now we can do the normal error exit */

declare code		 fixed bin (35);		/* local copy */
declare calling_routine	 fixed bin (35);		/* type of calling routine, or application of tuple variable */
declare scope_type		 char (20) varying;		/* type of requried scope permission */

    end;

check_access:
    proc (calling_module, r_bit, m_bit);

/* this module is chechs the access of the attribute via the r_bit
   and m_bit and depending on the operation to be performed either returns or
   calls error with the incorrect attribute access code */

dcl     calling_module	 fixed bin (35);		/* special code indicating the calling module */
dcl     r_bit		 bit (1) unal;		/* "1" => user has read permission on attribute */
dcl     m_bit		 bit (1) unal;		/* "1" => user has modify permission on attribute */


dcl     mdbm_error_$inc_attr_acc
			 fixed bin (35) external static;



        if caller = mrds_data_$caller_retrieve then do;
	  if ^(r_bit)
	  then call error (mdbm_error_$inc_attr_acc, LOUD, 0, AV_TYPE,
		 "You must have read permission on this attribute to retrieve from it."
		 );
        end;
        else
	   if caller = mrds_data_$caller_modify
	   then do;
	       if ^(m_bit)
	       then call error (mdbm_error_$inc_attr_acc, LOUD, 0, AV_TYPE,
		      "You must have modify permission on this attribute to modify it."
		      );
	   end;

        return;

    end;

add_free_rel:
    proc (var_index);

/* Procedure to add all those relation indices assoc. with a free tup. var. to the free list */

dcl     (var_index,
        rel_index,
        j)		 fixed bin;

        rel_index = range.tup_var.rel_index (var_index);	/* pick up relation index */

        free_rel = "0"b;				/* assume not on free list */
        do j = 1 to num_free_rels while (^free_rel);	/* search for it on free list */
	  if free_rels (j) = rel_index then free_rel = "1"b;
						/* if found */
        end;
        if ^free_rel then do;				/* if not there, must add it */
	  num_free_rels = num_free_rels + 1;
	  free_rels (num_free_rels) = rel_index;
        end;
    end add_free_rel;

make_move_lists:
    proc;

/* Procedure to make a move list for every selected vauiable */

dcl     (i,
        k,
        var_init,
        mli)		 fixed bin;

        if select_list.mla_ptr = null () then do;
	  select_list.num_vars = range.num_vars;	/* Max size */
	  allocate move_list_array in (select_area);
	  do i = 1 to select_list.num_vars;
	      move_list_array.ml_ptr (i) = null ();
	  end;
        end;
        select_list.num_vars = 0;

        do i = 1 to range.num_vars;			/* count the number of selected vars */
	  if var_exists (i)
	  then select_list.num_vars = select_list.num_vars + 1;
        end;

        var_init = 1;				/* initiallize */
        do k = 1 to select_list.num_vars;		/* make move list for each var. */
	  do move_list_array.var_index (k) = var_init to range.num_vars
	      while (^var_exists (move_list_array.var_index (k)));
	  end;					/* pick a var index */
	  var_init = move_list_array.var_index (k) + 1;

	  if move_list_array.ml_ptr (k) = null () then do;
	      ml_nitems_init = mrds_data_$max_select_items;
	      allocate move_list in (select_area);
	      move_list_array.ml_ptr (k) = ml_ptr;
	  end;
	  else do;
	      ml_ptr = move_list_array.ml_ptr (k);
	      move_list.nitems = mrds_data_$max_select_items;
	  end;
	  mli = 0;
	  do i = 1 to select_list.num_items;		/* find and add all selected items of this var. */
	      if select_list.item.var_index (i)
		= move_list_array.var_index (k) then do;/* if attr of this var. */
		mli = mli + 1;
		move_list.item.attr_index (mli) =
		    select_list.item.ai_ptr (i) -> rm_attr_info.defn_order;
		move_list.item.user_ptr (mli) =
		    select_list.item.user_ptr (i);
		move_list.item.user_desc_ptr (mli) =
		    select_list.item.user_desc_ptr (i);
	      end;
	  end;					/* adding selected items */

	  move_list.nitems = mli;
        end;					/* making move lists */

        call make_tuple_info;

    end make_move_lists;

make_tuple_info:
    proc;

/* Procedure to make the tuple info structure and allocate each tuple */

dcl     (i, tii)		 fixed bin;

        if cur_sw | compiled_sw			/* If -current or -compiled, don't bother */
        then return;
        ti_ntuples_init = range.num_vars;
        allocate tuple_info in (select_area);		/* Allocations in select_area are never freed.  This area
						   is reinitialized at the beginning
						   of each new selection expression */

        tii = 0;					/* init */
        do i = 1 to range.num_vars;			/* set up for each variable */
	  rmri_ptr = range.tup_var.ri_ptr (i);
	  tii = tii + 1;
	  tuple_info.tuple.var_index (tii) = i;
	  tuple_info.tuple.tuple_ptr (tii) =
	      create_simple_vector (rmri_ptr, select_area_ptr);
	  tuple_info.tuple.tuple_id (tii) = "0"b;
        end;					/* loop through range vars */

    end make_tuple_info;

error:
    proc (cd, loud, stack_offset, error_type, message);

dcl     cd		 fixed bin (35);		/* standard error code */
dcl     loud		 bit (1) aligned;		/* OFF => dont print or signal error */
dcl     stack_offset	 fixed bin;		/* offset from ls_top of where token is in lex stack */
dcl     error_type		 char (*);
dcl     message		 char (*);

        se_info_ptr = dbcb.se_info_ptr;

        code = cd;

        se_info.loud = loud;
        se_info.error_type = error_type;
        se_info.token_start = 0;
        se_info.stack_offset = stack_offset;		/* save this for semantics */
        se_info.error_msg = message;
        se_info.error_info_supplied = "1"b;		/* so no one else handles it */

        goto exit;

    end error;

create_simple_vector:
    proc (rmri_ptr, area_ptr) returns (ptr);


/*

   BEGIN_DESCRIPTION

   This routine will allocate a simple vector for a given relation.  It
   takes a pointer to an rm_rel_info structure as input.  It will examine
   that structure and allocate enough storage to completely contain all
   attributes in it.  Then it will set up pointers to appropriate places in
   that storage for the attributes.

   END_DESCRIPTION

   Parameters:

   rm_ri_ptr (input)  -  A pointer to the rm_rel_info structure for the relation
   of interest.
   area_ptr  (input)  -  The area to allocate the vector in.

   Output:

   A Pointer to a simple vector structure that can be used to do gets from the
   relation.

*/


/* Parameters */

dcl     rmri_ptr		 ptr;
dcl     area_ptr		 ptr;


/* Local */

dcl     attr_offset		 (256) fixed bin (24);
						/* Offsets of attributes from start of allocated block */
dcl     block_size		 fixed bin (24);		/* Size of the block to alloate */
dcl     data_string		 bit (block_size) based (data_string_ptr);
						/* The block */
dcl     data_string_ptr	 ptr;			/* Pointer to above */
dcl     i			 fixed bin;		/* Loop index */
dcl     total_attr		 fixed bin;		/* Total number of attributes */
dcl     vector_area		 area based (area_ptr);	/* Where to allocate vectors */
dcl     vector_ptr		 ptr;			/* Newly created vector */



        total_attr = rm_rel_info.num_attr;
        stv_number_of_dimensions = total_attr;
        allocate simple_typed_vector in (vector_area) set (vector_ptr);
        vector_ptr -> simple_typed_vector.type = SIMPLE_TYPED_VECTOR_TYPE;
        vector_ptr -> simple_typed_vector.number_of_dimensions = total_attr;
        block_size = 0;
        do i = 1 to total_attr;
	  attr_offset (i) = block_size +
	      align_data_item (
	      addr (rm_rel_info.attr_ptrs (i) -> rm_attr_info.domain_ptr
	      -> rm_domain_info.db_desc),
	      (block_size));
	  block_size =
	      attr_offset (i)
	      + rm_rel_info.attr_ptrs (i) -> rm_attr_info.bit_length;
        end;
        allocate data_string in (vector_area) set (data_string_ptr);
        do i = 1 to total_attr;
	  vector_ptr -> simple_typed_vector.dimension (i).value_ptr =
	      addbitno (data_string_ptr, attr_offset (i));
        end;

        return (vector_ptr);

    end create_simple_vector;

align_data_item:
    procedure (d_ptr, base_to_pad) returns (fixed bin);

/* HISTORY:

   Originally written by Jim Gray - - December 1979

*/



/* DESCRIPTION:

   given a pointer to a standard multics pl1 data argument descriptor,
   and a current storage offset at which data is to be placed,
   this routine calculates from the data type, and the given address
   the number of padding bits needed to properly align the data
   on either a byte, word, or double word boundary, as required
   by the data type definition, and routines such as assign_.
   currently the data types that assign_ can handle are supported
   by this routine(i.e. 1-12, 19-22, 33-34, 43-46)

*/

/* PARAMETERS:

   d_ptr - - (input) pointer, points to the standard multics pl1 argument
   descriptor for the data to be byte/word/even_word aligned using the given address

   base_to_pad - - (input) fixed bin(35), the current address(offset), of the last
   data item, after which the data item described by the input descriptor
   is to be placed, for the first data item, base_to_pad = 0.

   needed_bits - - (output) fixed bin, the number of bits to add to base_to_pad,
   in order to obtain the correct byte/word/even_word alignment for the
   data type as described by the input descriptor.

*/

/* using the declared alignment and data type for this attribute,
   return the number of bits necessary to put the data on a boundary
   as defined by pl1, such as byte, word or double word aligned, for using that type.
   directly in such operations as the any_to_any convert via assign_
   without having to do a bit move to get the proper alignment.
   this makes data storage in the tuple a true representation of the pl1
   attributes of unaligned and aligned for complete user choice
   in the trade off between speed and space. */


dcl     d_ptr		 ptr;			/* Pointer to a standard Multics descriptor */
dcl     needed_bits		 fixed bin;		/* number of bits needed to get the alignment */
dcl     base_to_pad		 fixed bin (24) parameter;	/* original value to be padded out */

        needed_bits = 0;				/* initialize */

        if d_ptr = null ()
        then ;
        else if d_ptr -> descriptor.packed
	   then do;				/* unaligned */

	       if ^(d_ptr -> descriptor.type = 21
		 | (d_ptr -> descriptor.type >= 9
		 & d_ptr -> descriptor.type <= 12)	/* char or decimal */
		 | (d_ptr -> descriptor.type >= 43
		 & d_ptr -> descriptor.type <= 46))
	       then ;				/* packed decimal */
	       else needed_bits = pad (BYTE, base_to_pad);

	   end;
	   else do;				/* aligned */

	       if (d_ptr -> descriptor.type >= 9
		 & d_ptr -> descriptor.type <= 12)
		 |
		 /* decimal */ (d_ptr -> descriptor.type >= 43
		 & d_ptr -> descriptor.type <= 46)
		 |
		 /* packed decimal */ (d_ptr -> descriptor.type >= 19
		 & d_ptr -> descriptor.type <= 22)
		 | /* bit or char */ d_ptr -> descriptor.type = 1
		 | d_ptr -> descriptor.type = 3
		 | d_ptr -> descriptor.type = 33
	       then				/* binary short */
		  needed_bits = pad (WORD, base_to_pad);

	       else if d_ptr -> descriptor.type = 2
		      | d_ptr -> descriptor.type = 34
		      |
		      /* binary long */ (d_ptr -> descriptor.type >= 4
		      & d_ptr -> descriptor.type <= 8)
		  then				/* binary complex */
		       needed_bits = pad (DOUBLE_WORD, base_to_pad);
		  else ;				/* none needed otherwise */

	   end;

        return (needed_bits);

pad:
    procedure (pad_size, pad_base) returns (fixed bin);

/* routine to return the number of bits necessary to pad a bit count
   out to an alignment boundary of 9(byte), 36(word), or 72(double word) bits
   as determined by the pad size input */

        if mod (pad_base, pad_size) = 0
        then number_of_bits = 0;
        else do;

	  number_of_bits = pad_size - mod (pad_base, pad_size);

        end;

        return (number_of_bits);


dcl     pad_size		 fixed bin;		/* either 9 or 36 or 72 */
dcl     pad_base		 fixed bin (24);		/* current bit length to be padded */
dcl     number_of_bits	 fixed bin;		/* what has to be added to get to the desired boundary */

    end pad;

dcl     BYTE		 fixed bin init (9) internal static
			 options (constant);
						/* byte boundary = 9 bits */
dcl     WORD		 fixed bin init (36) int static
			 options (constant);
						/* word boundary = 36 bits */
dcl     DOUBLE_WORD		 fixed bin init (72) int static
			 options (constant);
						/* double word boundary = 72 bits */

    end align_data_item;

%include mrds_dbcb;
%page;
%include mrds_select_list;
%page;
%include mdbm_rm_db_info;
%page;
%include mdbm_rm_rel_array;
%page;
%include mdbm_rm_rel_info;
%page;
%include mdbm_rm_attr_info;
%page;
%include mrds_tuple_info;
%page;
%include mdbm_move_list;
%page;
%include mdbm_rm_domain_info;
%page;
%include mrds_se_info;
%page;
%include mrds_range;
%page;
%include mdbm_descriptor;
%page;
%include mrds_select_sets;
%page;
%include mrds_compiled_se_info;
%page;
%include mdbm_scope_info;
%page;
%include mdbm_seg_area;
%page;
%include mrds_select_area;
%page;
%include vu_typed_vector;


dcl     1 free_relations	 based (select_list.fr_ptr) aligned,
						/* list of relation used in the select clause */
	2 num_free_rels	 fixed bin,
	2 free_rels	 (mrds_data_$max_relations) fixed bin;
						/* array to hold all indicies of free vars */

dcl     LOUD		 bit init ("1"b) aligned internal static
			 options (constant);
dcl     a_range_ptr		 ptr;
dcl     a_rmri_ptr  	 ptr;
dcl     a_select_list_ptr	 ptr;
dcl     addbitno		 builtin;
dcl     addr		 builtin;
dcl     ai_ptr		 ptr;
dcl     area_ptr		 ptr;
dcl     argp_ptr		 ptr;
dcl     attr_index		 fixed bin;
dcl     caller		 fixed bin (35) parm;
dcl     caller_name		 char (32) init ("mrds_dsl_select_clause");
dcl     check_sw		 bit (1) aligned;		/* on if checking union comp. */
dcl     code		 fixed bin (35);
dcl     compiled_sw		 bit (1) aligned;		/* switch indicating if -compiled entry */
dcl     continue		 char (1) init ("c");	/* dont stop after printing error mesg */
dcl     cur_sw		 bit (1) aligned;		/* switch indicating if -current or -select entry */
dcl     descp_ptr		 ptr;
dcl     err_msg		 char (256);
dcl     err_msg_len		 fixed bin;
dcl     fixed		 builtin;
dcl     free_rel		 bit (1) unal;		/* on if relat.is assoc. with free var. */
dcl     i			 fixed bin;
dcl     icode		 fixed bin (35);
dcl     info_ptr		 ptr init (null ());	/* unused */
dcl     ioa_$rsnnl		 entry () options (variable);
dcl     k			 fixed bin;
dcl     mod		 builtin;
dcl     mrds_data_$caller_compile
			 fixed bin (35) ext;	/* dsl_$compile called */
dcl     mrds_data_$caller_define_temp_rel
			 fixed bin (35) external static;
dcl     mrds_data_$caller_delete
			 fixed bin (35) ext;	/* dsl_$delete called */
dcl     mrds_data_$caller_modify
			 fixed bin (35) external static;
dcl     mrds_data_$caller_retrieve
			 fixed bin (35) external static;
dcl     mrds_data_$max_attributes
			 fixed bin (35) ext static;
dcl     mrds_data_$max_id_len	 fixed bin (35) external;
dcl     mrds_data_$max_relations
			 fixed bin (35) external;
dcl     mrds_data_$max_select_items
			 fixed bin (35) external;
dcl     mrds_data_$max_temp_rels
			 fixed bin (35) external;
dcl     mrds_dsl_set_user_vals entry (ptr, ptr, ptr, ptr, fixed bin, ptr,
			 fixed bin (35));
dcl     mrds_error_$block_dom_incons
			 fixed bin (35) external;
dcl     mrds_error_$block_sel_incons
			 fixed bin (35) external;
dcl     mrds_error_$max_select_items
			 fixed bin (35) external;
dcl     mrds_error_$scope_viol fixed bin (35) external;
dcl     mrds_error_$undef_temp_rel
			 fixed bin (35) external;
dcl     null		 builtin;
dcl     num_args		 fixed bin;
dcl     rel		 builtin;
dcl     relation_index	 fixed bin;
dcl     return_value	 fixed bin (35) init (0);	/* unused */
dcl     s_ptr		 ptr;
dcl     se_info_ptr		 ptr;
dcl     sub_err_		 entry options (variable);	/* reports error details */
dcl     sys_info$max_seg_size	 fixed bin (35) external;
dcl     temp_rel_key           bit (1) aligned parameter;

exit:
    end mrds_dsl_select_clause_;
