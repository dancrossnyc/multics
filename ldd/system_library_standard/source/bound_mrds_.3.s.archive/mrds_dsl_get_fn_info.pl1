/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

mrds_dsl_get_fn_info: get_fn_info: proc (dbi, fn_name, area_ptr, info_ptr, code);

/* NOTES:

   Procedure  to  return  the  scalfn_info  block  corresponding  to the given
   function name.



   HISTORY:

   77-06-01 J. A. Weeldreyer: Initially written.

   79-05-01 J. B. Picone: Modified to correct the setting of sfi_ptr.

   81-06-17  Rickie E.  Brinegar: Modified to call dsl_v1_$get_fn_info for old
   version databases.

   81-06-23 Jim Gray : added call to mrds_dsl_get_builtins in order to
   get builtin function definitions on an as needed basis.

   83-06-20 Davids: Removed check for old version database and the call
   to v1 code if it was an old version db (old version dbs can no longer
   be opened)
*/

	call mu_database_index$get_resultant_model_pointer (dbi, dbcb_ptr); /* get dbcb ptr */
	if dbcb_ptr = null then
	     call error (mrds_error_$invalid_db_index);

/* BEGIN CHANGE 81-06-23 ********************************************** */

	if dbcb.sfi_ptr = null () then do;
		call mrds_dsl_get_builtins (dbcb_ptr, icode);
		if icode ^= 0 then call error (icode);
	     end;

/* END CHANGE 81-06-23 ********************************************** */

	do sfi_ptr = dbcb.sfi_ptr repeat scalfn_info.fwd_ptr /* search for function block */
	     while (sfi_ptr ^= null);
	     if fn_name = scalfn_info.name then
		go to null_sfi_ptr;
	end;
null_sfi_ptr: ;
	if sfi_ptr = null then
	     call error (mrds_error_$undef_fun);

	nsfi_args_init = scalfn_info.nargs;
	allocate scalfn_info in (wk_area) set (info_ptr);
	info_ptr -> scalfn_info = scalfn_info;		/* copy to callers area */

	code = 0;
exit:
	return;

error: proc (cd);

/* error procedure */

	dcl     cd		 fixed bin (35);

	code = cd;
	go to exit;

     end error;

%include mrds_dbcb;
%page;
%include mrds_scalfn_info;

	dcl     (code,				/* Output:  status code */
	        dbi)		 fixed bin (35);	/* Input:  data base index */

	dcl     fn_name		 char (*);	/* Input:  name of function */

	dcl     info_ptr		 ptr;		/* Input:  pointer to recieving structure */
	dcl     area_ptr		 ptr;		/* Input: pointer to alloc. area */
	dcl     wk_area		 area (sys_info$max_seg_size) based (area_ptr);

	dcl     (mrds_error_$invalid_db_index,
	        mrds_error_$undef_fun,
	        sys_info$max_seg_size) fixed bin (35) ext;

	dcl     (null,
	        addr,
	        rel,
	        fixed)		 builtin;

	dcl     mu_database_index$get_resultant_model_pointer entry (fixed bin (35), ptr);
	declare icode		 fixed bin (35);	/* temp error code */
	declare mrds_dsl_get_builtins	 entry (ptr, fixed bin (35)); /* defines builtins */

     end mrds_dsl_get_fn_info;
