/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */


mrds_dsl_get_relation_list: get_relation_list: procedure (db_index, area_ptr, structure_version,
	mrds_relation_list_ptr, error_code);

/* DESCRIPTION:

   Given a database opening index, and a pointer to a freeing area,
   this routine will return a structure containing the names
   of all the relations in the model that the opening has in it's view.
   It indicates whether this was a submodel
   opening, and returns submodel alias names as well in that case.
   For secured databases, no model information is returned,
   unless the user is  a DBA.

*/

/* PARAMETERS:

   db_index - - (input) fixed bin(35), the database opening index as returned from dsl_$open,
   this may be an opening through either a model or submodel of any version.

   area_ptr - - (input) ptr, pointer to a freeing area in which the returned
   structure is to be allocated. Allow about 30 words per expected relation for the area size.

   structure_version - - (input) fixed bin, the desired version of the
   relation info structure to be returned.

   mrds_relation_list_ptr - - (output) ptr, points to the allocated structure
   as defined in the include file mrds_relation_list.incl.pl1

   error_code - - (output) fixed bin(35), the error status encoding, 0 unless an error occured.

*/

/* HISTORY:

   Originally written by Jim Gray - - March 1981

*/

/* initialize */

	error_code = 0;
	mrds_relation_list_ptr = null ();
	clean_up_condition = "0"b;

	on cleanup begin;
		clean_up_condition = "1"b;
		call clean_up ();
	     end;

/*  check for a valid opening index */

	call mu_database_index$get_resultant_model_pointer (db_index, dbcb_ptr);
	if dbcb_ptr = null () then
	     error_code = mrds_error_$invalid_db_index;
	else do;

/* good opening index, check for a good area */

		if area_ptr = null () then
		     error_code = error_table_$badcall;
		else do;
			unspec (my_area_info) = "0"b;
			my_area_info.version = 1;
			my_area_info.areap = area_ptr;

			call area_info_ (addr (my_area_info), error_code);
			if error_code ^= 0 then ;	/* couldn't get area info */
			else if my_area_info.no_freeing then
			     error_code = mrds_error_$not_freeing_area;
			else do;

/* check for a known structure version */

				if structure_version ^= mrds_relation_list_structure_version then
				     error_code = error_table_$unimplemented_version;
				else do;

/* check for a supported database version */

					rdbi_ptr = dbcb.rdbi_ptr;
					if rm_db_info.db_version ^= 4 then
					     error_code = mrds_error_$version_not_supported;
					else do;

/* set up for too small an area given */

						on area begin;
							error_code = error_table_$area_too_small;
							goto skip_allocate;
						     end;

/* fill in the info in a structure in the users area */

						rmra_ptr = rm_db_info.ra_ptr;
						mrds_relation_list_num_rels_init = rm_rel_array.num_rels;
						allocate mrds_relation_list set (mrds_relation_list_ptr) in (users_area);
						revert area;

						unspec (mrds_relation_list) = "0"b;
						mrds_relation_list.version = mrds_relation_list_structure_version;
						mrds_relation_list.num_rels_in_view = mrds_relation_list_num_rels_init;
						mrds_relation_list.submodel_view = dbcb.dsm_sw;

						if rm_db_info.mdbm_secured then
						     mrds_relation_list.access_info_version = 5;
						else mrds_relation_list.access_info_version = 4;

/* check on the user class for secured databases */

						call mrds_dm_authorization$get_user_class
						     (rtrim (rm_db_info.db_path), addr (local_area),
						     mrds_authorization_structure_version, mrds_authorization_ptr, error_code);
						if error_code = 0 then do;

/* fill in the details for each relation in the view */

							do i = 1 to mrds_relation_list_num_rels_init while (error_code = 0);

							     call get_relation_data ();

							end;

						     end;
					     end;
				     end;
			     end;
		     end;
	     end;

/* clean up before returning */

	call clean_up ();

skip_allocate:
	return;

get_relation_data: procedure ();

/* routine to get the data for an individual relation in the users view */

	rmri_ptr = rm_rel_array.rel_data (i).ri_ptr;
	mrds_relation_list.relation (i).submodel_name = rm_rel_info.name;

/* only DBA's can know model names in a secured db */

	if rm_db_info.mdbm_secured & ^mrds_authorization.administrator then
	     mrds_relation_list.relation (i).model_name = " ";
	else mrds_relation_list.relation (i).model_name = rm_rel_info.model_name;

/* find out what the multics acls are on this relation */

	call mu_get_relation_acl (rtrim (rm_db_info.db_path),
	     rtrim (rm_rel_info.model_name), mrds_authorization.administrator,
	     read_acl, write_acl, error_code);

	if error_code = 0 then do;

		multics_access_string = "";

		if read_acl then
		     multics_access_string = multics_access_string || "r";

		if write_acl then
		     multics_access_string = multics_access_string || "w";

		if multics_access_string = "" then
		     multics_access_string = "n";

		mrds_relation_list.relation (i).system_acl = multics_access_string;

		if mrds_relation_list.access_info_version = 4 then /* relation, not attribute level, security */
		     mrds_relation_list.relation (i).mrds_access,
			mrds_relation_list.relation (i).effective_access =
			mrds_relation_list.relation (i).system_acl;

/* fill in the access for submodel security */

		else do;				/* version 5 submodel security */

			mrds_access_string = "";


			if rm_rel_info.append_tuple_perm then
			     mrds_access_string = mrds_access_string || "a";

			if rm_rel_info.delete_tuple_perm then
			     mrds_access_string = mrds_access_string || "d";

			if mrds_access_string = "" then
			     mrds_access_string = "n";

			mrds_relation_list.relation (i).mrds_access = mrds_access_string;

/* fill in the effective access for attribute level security */

			if write_acl then
			     mrds_relation_list.relation (i).effective_access = mrds_access_string;
			else mrds_relation_list.relation (i).effective_access = "n";
		     end;
	     end;

     end;

clean_up: procedure ();

/* routine to get rid of allocated space, if an error
   occurs, or cleanup is signaled */

	if clean_up_condition | error_code ^= 0 then do;

		if mrds_relation_list_ptr ^= null () then do;

			free mrds_relation_list_ptr -> mrds_relation_list in (users_area);

			mrds_relation_list_ptr = null ();

		     end;

	     end;

     end;

	declare area		 condition;	/* happens when space too small */
	declare area_info_		 entry (ptr, fixed bin (35)); /* gets details on the area */
	declare area_ptr		 ptr;		/* points to a freeing area */
	declare clean_up_condition	 bit (1);		/* set on if cleanup signaled */
	declare cleanup		 condition;	/* occurs upon quit/release */
	declare db_index		 fixed bin (35);	/* database opening index */
	declare error_code		 fixed bin (35);	/* error status encoding */
	declare error_table_$area_too_small fixed bin (35) ext; /* area too small error */
	declare error_table_$badcall	 fixed bin (35) ext;/* null area ptr */
	declare error_table_$unimplemented_version fixed bin (35) ext; /* unknown structure version */
	declare i			 fixed bin;	/* loop index */
	declare local_area		 area (1024);	/* space for return args */
	declare mu_get_relation_acl	 entry (char (*), char (*),
				 bit (1), bit (1), bit (1), fixed bin (35)); /* gets users  acls on relation data */
	declare mu_database_index$get_resultant_model_pointer entry (fixed bin (35), ptr); /* gets pointer to resultant model */
	declare mrds_access_string	 char (4) varying;	/* mrds access encoding */
	declare mrds_dm_authorization$get_user_class entry (char (*), ptr, fixed bin, ptr, fixed bin (35)); /* gets user class */
	declare mrds_error_$invalid_db_index fixed bin (35) ext; /* bad opening index */
	declare mrds_error_$not_freeing_area fixed bin (35) ext; /* area without freeing attribute */
	declare mrds_error_$version_not_supported fixed bin (35) ext; /* not version 4 or later */
	declare multics_access_string	 char (4) varying;	/* multics access encoding */
	declare read_acl		 bit (1);		/* on => user has "r" on relation data */
	declare structure_version	 fixed bin;	/* desired version of structure */
	declare sys_info$max_seg_size	 fixed bin (35) ext;/* largest segment */
	declare users_area		 area (sys_info$max_seg_size) based (area_ptr); /* overlay for input area */
	declare write_acl		 bit (1);		/* on => user has "w" on relation data */
	declare (addr, empty, fixed, null, rel, rtrim, unspec) builtin;
	declare 1 my_area_info	 like area_info;	/* local storage for area details */

%include mrds_relation_list;
%page;
%include mrds_authorization;
%page;
%include mrds_dbcb;
%page;
%include mdbm_rm_rel_info;
%page;
%include mdbm_rm_rel_array;
%page;
%include mdbm_rm_db_info;
%page;
%include area_info;

     end;
