/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

mrds_dsl_get_rslt_info:
     proc;

exit:
	return;

/* HISTORY:

   77-05-01  J. C. C. Jagernauth: Initially written.

   78-09-01 J. C. C. Jageranuth: Modified for MR7.0.

   80-02-26  Lindsey  L.   Spratt: Modified to fix submodel bug, get_file_rels
   was  using  mr_ptr  instead of model_files_ptr; due to position in argument
   lists, mr_ptr and area_ptr were basically the same piece of storage, what's
   done to one happened to the other.

   80-06-01 Jim Gray : Modified to take advantage of the new open_mode info in
   the  dbcb,  and  return  it from the get_pn entry, so that list_db in linus
   would work as documented.

   80-06-02  Jim  Gray : Modified to correctly pass back an error code for tne
   entries  get_rels  and  get_file_relations,  when  an unknown file name was
   given on input, instead of passing back the code from close.

   80-06-03  Jim  Gray : Modified to fix linus submodel bug, during linus_open
   of  a submodel, model_files were getting written on during setting of scope
   data  because of successive calls to get_file_names and get_relation_names,
   where  linus  was  passing  a  pointer  to  a  non-freeing  area,  but  the
   mrds_dsm_dsmd  interface  expects a freeing area, and was thus doing a free
   of some temporary storage it used(in mrds_dsm_read_file_rels).  the same is
   true  of  the  dmd_  interface for models, when a cleanup is signaled.  The
   fix(temporaryily)  was  to  install  a local area, that is freeing, in this
   routine  to  buffer linus from the problem, and do the allocation here into
   the linus(or other caller) area.

   80-12-10  Jim  Gray  :  declared  the  scope  structure  passed back by the
   get_scope_info   entry  to  be  "like"  the  mdbm_scope_info  include  file
   structure,  which  changed  to support r-s-m-d scope modes, rather than r-u
   modes.   Linus  will  now  have to call this entry, rather than maintaining
   it's own internal static scope mode information.

   81-02-11  Jim  Gray  : changed calls to dsmd_, into mrds_dsm_dsmd calls, in
   order to call internal, not external bound segment names

   81-04-22  Jim  Gray  :  removed  use  of  the mrds_dm_get_file_rels module,
   instead  making the relation name(s) returned equal to the input file name,
   on the premise that blocked files will never be implemented.

   81-05-13  Rickie  E.  Brinegar: added the get_security_info entry to return
   the  mrds_security_info  structure  which  consist of a security bit and an
   administrator bit.

   81-05-14  Rickie  E.   Brinegar: modified the get_rslt_data procedure to be
   sensitve  to  the mdbm_secured and administrator bits in the resultant.  No
   key information is returned, the key head attribute is flagged as being and
   index,  and  the  domain  name  is  not  returned for non-administrators on
   secured databases.

   81-06-08  Davids:  removed  all  references  to  mrds_dsm_dsmd$*  from  the
   get_file_relations entry and just have the code return as the relation name
   the file name for submodels (this is what the mrds_dsm_dsm code did anyway,
   also  it  has  already  been done for the model). Also changed the get_rels
   entry so that references  to  mrds_dsm_dsm$*  have  been  replaced  by  the
   internal mrds interface modules.

   81-06-16 Rickie E.  Brinegar: Changed get_file_names entry to get_rslt_rels
   and  modified  get_rslt_rels  to call dsl_v1_$get_rslt_rels for old version
   databases.

   81-06-17  Rickie  E.   Brinegar:  Modified  the get_rslt_info entry to call
   dsl_v1_$get_rslt_info  for  old  version  databases.   At  the  same  time,
   get_rslt_data  was  modified  to  fill in the descriptor information in the
   rslt_info_structure.    Also  modified  the  get_temp_info  entry  to  call
   dsl_v1_$get_temp_info for old version database.

   81-06-19  Rickie  E.   Brinegar:  Removed the unused entries get_rslt_desc,
   get_temp_desc, get_file_relations and get_rels.

   81-08-24  Rickie  E.   Brinegar:  Modified the get_scope_info entry to call
   dsl_v1_$get_scope_info to get the scope info for old version models, and to
   convert the old version info structure to a new version info structure.

   82-08-20 D. Woodka : Deleted reference to rm_attr_info.bit_offset for
   DMS conversion.

   83-02-18 B. Moberg : Modified to tell users which attributes are part of
   the key of a relation in a secure database

   83-06-20 Davids: Removed check for old version database and the call
   to v1 code if it was an old version db (old version dbs can no longer
   be opened)
*/

get_rslt_info:
     entry (db_index, rel_name, in_area_ptr, out_rslt_ptr, code);

	declare out_rslt_ptr	 ptr;
	area_ptr = in_area_ptr;

/* return attribute info for a permanent relation */

	call init;				/* get dbcb pointer */

	rmra_ptr = rm_db_info.ra_ptr;			/* point to rel array */
	do i = 1 to rm_rel_array.num_rels /* locate relation name */
	     while (rel_name ^= rm_rel_array.name.submodel (i));
	end;
	if i > rm_rel_array.num_rels then do;		/* relation is not defined */
		code = mrds_error_$undef_rel;
		rslt_ptr = null;
	     end;
	else do;
		rmri_ptr = rm_rel_array.rel_data.ri_ptr (i); /* point to resultant model relation information */
		call get_rslt_data (rslt_ptr);	/* fill in rslt_info structure */
	     end;

	out_rslt_ptr = rslt_ptr;

	return;					/* end get_rslt_info */
get_temp_info:
     entry (db_index, rel_index, in_area_ptr, temp_rslt_ptr, code);

	declare temp_rslt_ptr	 ptr;
	area_ptr = in_area_ptr;

/* return attribute info for a temporary relation */

	call init;				/* get dbcb pointer */

	rmra_ptr = rm_db_info.tra_ptr;
	if rel_index < 1 | rel_index > mrds_data_$max_temp_rels then do;
						/* undef temp rel */
		code = mrds_error_$undef_temp_rel;
		rslt_ptr = null;
	     end;
	else do;					/* if is defined */
		rmri_ptr = rm_rel_array.rel_data.ri_ptr (rel_index);
						/* get pointer to temp rel info */
		call get_rslt_data (rslt_ptr);
	     end;					/* if rel defined */

	temp_rslt_ptr = rslt_ptr;

	return;					/* end get_temp_info */

get_scope_info:
     entry (db_index, in_area_ptr, sci_ptr, code);
	area_ptr = in_area_ptr;

/* return scope info for each permanent relation */

	dcl     1 scp_info		 aligned like scope_info based (sci_ptr);
	dcl     sci_ptr		 ptr;




	sci_ptr = null;
	call init;				/* get dbcb pointer */

	scope_ptr = dbcb.scope_ptr;			/* point to scope info structure */
	max_file_init = scope_ptr -> scope_info.nfiles;
	allocate scp_info set (sci_ptr) in (area_ptr -> wk_area);
	unspec (sci_ptr -> scp_info) = unspec (scope_ptr -> scope_info);
						/* init user scope_ptr->scope information */

get_scope_info_exit:
	return;					/* end get_scope_info */

get_pn:
     entry (db_index, db_path, mode, code);

/* return the database pathname, and opening mode */

	declare mode		 char (20);
	declare mode_code		 fixed bin;

	call init;				/* get dbcb pointer */

	db_path = rm_db_info.sm_path;

/* set the mode argument */

	mode_code = fixed (dbcb.open_mode);
	if mode_code = 0 then
	     mode = "Mode not available";
	else if mode_code = 1 then
	     mode = "retrieval";
	else if mode_code = 2 then
	     mode = "update";
	else if mode_code = 3 then
	     mode = "exclusive_retrieval";
	else if mode_code = 4 then
	     mode = "exclusive_update";
	else mode = "Unknown opening mode";

	return;					/* end get_pn */

get_rslt_rels:
     entry (db_index, in_area_ptr, mr_ptr, code);
	area_ptr = in_area_ptr;


/* return model or sub-model file names */

	call init;

	rmra_ptr = rm_db_info.ra_ptr;
	num_relations_alloc = rm_rel_array.num_rels;
	allocate model_relations set (mr_ptr) in (area_ptr -> wk_area);
	do i = 1 to model_relations.nrels;
	     if dbcb.dsm_sw then
		mr_ptr -> model_relations.relation_name (i) =
		     rm_rel_array.name.submodel (i);
	     else mr_ptr -> model_relations.relation_name (i) =
		     rm_rel_array.rel_data.model_name (i);
	end;

	return;

get_db_version:
     entry (db_index, db_version, code);

/* return version number of data base manager */

	dcl     db_version		 fixed bin;

	call init;				/* get dbcb pointer */

	db_version = rm_db_info.db_version;

	return;


/* 81-05-13 Rickie E. Brinegar: Start added code *************************** */

get_security_info:
     entry (db_index, security_info_area_ptr, security_ptr, code);

	dcl     (security_info_area_ptr, security_ptr) ptr;

	call init;

	allocate mrds_security_info set (security_ptr)
	     in (security_info_area_ptr -> wk_area);
	mrds_security_info_ptr = security_ptr;
	mrds_security_info.db_secure = rm_db_info.mdbm_secured;
	mrds_security_info.administrator = rm_db_info.administrator;
	mrds_security_info.pad = "0"b;
	code = 0;
	return;

/* 81-05-13 Rickie E. Brinegar: End added code ***************************** */

init:
     proc;

/* initialize the dbcb pointer */

	code = 0;
	call mu_database_index$get_resultant_model_pointer (db_index, dbcb_ptr);
	if dbcb_ptr = null then do;			/* undefined */
		code = mrds_error_$invalid_db_index;
		go to exit;
	     end;
	rdbi_ptr = dbcb.rdbi_ptr;

     end init;

get_rslt_data:
     proc (rslt_ptr);

	declare rslt_ptr		 ptr;

/*  fill rslt info structure using the resultant model
   relation, attribute and domain information */

	rslt_alloc = rm_rel_info.num_attr;
	allocate rslt_info set (rslt_ptr) in (area_ptr -> wk_area);
	rslt_ptr -> rslt_info.num_key_attr = rm_rel_info.nkey_attr;
	rslt_ptr -> rslt_info.key_length = rm_rel_info.max_key_len;
	rslt_ptr -> rslt_info.retrieve, rslt_ptr -> rslt_info.total_key = "1"b;
	rslt_ptr -> rslt_info.modify, rslt_ptr -> rslt_info.store,
	     rslt_ptr -> rslt_info.delete, rslt_ptr -> rslt_info.inversion = "0"b;
	do i = 1 to rm_rel_info.num_attr;		/* init attr info */
	     rai_ptr = rm_rel_info.attr_ptrs (i);	/* point to attribute information */
	     rdi_ptr = rm_attr_info.domain_ptr;		/* point to domain information */

/* 81-05-14 Rickie E. Brinegar: Start changed code ************************* */

	     rslt_ptr -> rslt_info.attr.attr_name (i) = rm_attr_info.name;
	     rslt_ptr -> rslt_info.attr.attr_length (i) = rm_attr_info.bit_length;

	     rslt_ptr -> rslt_info.attr.inver_flag (i) = rm_attr_info.index_attr;
	     rslt_ptr -> rslt_info.attr.key_flag (i) = rm_attr_info.key_attr;
	     rslt_ptr -> rslt_info.attr.key_attr_order (i) = rm_attr_info.key_order;
	     if ^rm_db_info.mdbm_secured | rm_db_info.administrator then do;
		     rslt_ptr -> rslt_info.attr.domain_name (i) = rm_domain_info.name;
		end;
	     else do;
		     rslt_ptr -> rslt_info.attr.domain_name (i) = "";
		end;

/* 81-05-14 Rickie E. Brinegar: End changed code *************************** */

	     rslt_ptr -> rslt_info.attr (i).descriptor = rm_domain_info.user_desc;
	     if rslt_ptr -> rslt_info.attr.inver_flag (i) then
		rslt_ptr -> rslt_info.inversion = "1"b;
	end;					/* attribute loop */

     end get_rslt_data;

	dcl     area_ptr		 ptr;
	dcl     code		 fixed bin (35);
	dcl     db_index		 fixed bin (35);
	dcl     db_path		 char (168) var;
	dcl     i			 fixed bin (35);	/* internal index */
	dcl     in_area_ptr		 ptr;
	dcl     local_area		 area (4096);
	dcl     mrds_data_$max_temp_rels fixed bin (35) ext;
	dcl     mrds_error_$invalid_db_index fixed bin (35) ext;
	dcl     mrds_error_$undef_rel	 fixed bin (35) ext;
	dcl     mrds_error_$undef_temp_rel fixed bin (35) ext;
	dcl     mu_database_index$get_resultant_model_pointer entry (fixed bin (35), ptr);
	dcl     rel_index		 fixed bin (35);	/* Input: temp rel index */
	dcl     rel_name		 char (*);
	dcl     submodel_iocb_ptr	 ptr init (null ());
	dcl     sys_info$max_seg_size	 fixed bin (35) ext;
	dcl     wk_area		 area (sys_info$max_seg_size) based (area_ptr);
	dcl     (addr, empty, fixed, null, rel, unspec) builtin;

%include mrds_model_relations;
%page;
%include mrds_dbcb;
%page;
%include mdbm_rm_db_info;
%page;
%include mrds_rslt_info;
%page;
%include mdbm_rm_rel_info;
%page;
%include mdbm_rm_domain_info;
%page;
%include mdbm_rm_attr_info;
%page;
%include mdbm_rm_rel_array;
%page;
%include mdbm_scope_info;
%page;
%include mrds_security_info;

     end mrds_dsl_get_rslt_info;

