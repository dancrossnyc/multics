/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

mdb_display_data_value: mddv: procedure ();

/* DESCRIPTION :

   The  purpose  of  the command is to display on the terminal, the value of a
   data  item,  when only a pointer to it's storage location, and a pointer to
   it's  descriptor  are known.  the input pointers can be any form of virtual
   pointer  that  is  accepted  by the cv_ptr_ subroutine.  assign_ is used to
   convert  the  data  to  character  format.   the  descriptor  is the system
   standard  pl1  data  descriptor for arguments.  see the reference manual or
   subsystem writers guide for storage formats of data, and their descriptors.

   NOTE:  the  converted  character  form  of  the data value must be <= 50000
   characters,  due  the  internal  buffer  size  used  in  the  call to iox_.

   ADDITION:  the  entry  mdb_display_data_value$ptr is a subroutine interface
   that will accept pointers directly, rather than virtual pointers.


   PARAMETERS :

   vir_data_ptr  -  -  (input)  virtual pointer (char (*)), that points to the
   data value in storage

   vir_desc_ptr  -  -  (input)  virtual  pointer (char(*)), that points to the
   multics pl1 data descriptor(bit(36)) for the data value

   data  value  -  -  (output)  displayed  on  the  terminal  when  conversion
   successful

   command_error_  -  - (output) condition, signaled by com_err_, that is used
   to reports errors in virtual pointer or data conversion.

   input_data_ptr,   input_desc_ptr   -   -  (input)  pointers,  same  as  the
   virtual_...._ptr    parameters,    except    for   the   subroutine   entry
   mdb_display_data_value$ptr


   HISTORY:

   79-11-01 Jim Gray : Originally written.

   79-11-02 Jim Gray : Modified to add subroutine interface

*/

/* check for correct argument count */

	call cu_$arg_count (nargs);
	if nargs ^= 2 then
	     call com_err_ (error_table_$wrong_no_of_args, caller_name, "^/^a^/",
		"Usage: mdb_display_data_value virtual_data_pointer virtual_descriptor_pointer");
	else do;

/* get the two char(*) arguments */

		call cu_$arg_ptr (1, vir_data_ptr_ptr, vir_data_ptr_len, error_code);
		call cu_$arg_ptr (2, vir_desc_ptr_ptr, vir_desc_ptr_len, error_code);


/* get a real pointer to the data value */

		data_ptr = cv_ptr_ (vir_data_ptr, error_code);
		if error_code ^= 0 then
		     call com_err_ (error_code, caller_name, "^/^a^a^a^/",
			"Unable to convert the virtual data pointer """,
			vir_data_ptr, """ to a real pointer.");
		else do;

/* get a real pointer to the multics pli descriptor for the given data value */

			desc_ptr = cv_ptr_ (vir_desc_ptr, error_code);
			if error_code ^= 0 then
			     call com_err_ (error_code, caller_name, "^/^a^a^a^/",
				"Unable to convert the virtual descriptor pointer """,
				vir_desc_ptr, """ to a real pointer.");
			else do;

/* convert and output the data value */

				call convert_value ();
			     end;
		     end;

		return;




/* subroutine interface, that accepts pointer input values directly */

ptr: entry (input_data_ptr, input_desc_ptr);

		data_ptr = input_data_ptr;
		desc_ptr = input_desc_ptr;

		call convert_value ();

		return;

convert_value: procedure ();

/* this routine makes the call to convert the data from the input
   type into character format for output to the terminal. */

/* set up pointers to the char(50000) output variable, and it's descriptor */

	char_data_ptr = addr (char_data);
	char_desc_ptr = addr (char_desc);

/* now use the encapsuled assign_ to do the conversion */

	call mu_convert (data_ptr, desc_ptr, char_data_ptr, char_desc_ptr, error_code);
	if error_code ^= 0 then
	     call com_err_ (error_code, caller_name, "^/^a ^a^p^a^p^a^/",
		"Unable to convert the data to character form,",
		"using the data pointer """, data_ptr,
		""" and the descriptor pointer """, desc_ptr, """.");
	else do;

/* output the converted data value */

		call output_value ();

	     end;
     end;

	     end;

output_value: procedure ();

/* this routine does the i/o to the user's terminal of the converted
   data value in it's character format, a header is output first */

	header = NL || "The data value is:" || NL;
	header_ptr = addr (header);

	call iox_$put_chars (iox_$user_output, header_ptr, length (rtrim (header)), error_code);
	if error_code ^= 0 then
	     call com_err_ (error_code, caller_name, "^/^a^/",
		"Unable to output the header to user_output.");
	else do;

/* output the actual data vaule in character form, surrounded by quotes, with trailing new lines */

		char_data = char_data || """";
		char_data = """" || char_data;
		char_data = char_data || NL;
		char_data = char_data || NL;

		call iox_$put_chars (iox_$user_output, addrel (char_data_ptr, 1), length (char_data), error_code);
		if error_code = 0 then ;
		else call com_err_ (error_code, caller_name, "^/^a^/",
			"Unable to output data value to user_output.");

	     end;

     end;

	declare header		 char (24);	/* header information */
	declare NL		 char (1) init ("
");						/* new line character */
	declare header_ptr		 ptr;		/* points to  header character buffer */
	declare com_err_		 entry options (variable); /* reports command errors */
	declare char_data		 char (50004) varying; /* general output variable + 4 chars for NL'S/quotes */
	declare (data_ptr,				/* points to input data value */
	        desc_ptr,				/* points to input value's descriptor */
	        char_data_ptr,			/* points to output variable */
	        char_desc_ptr)	 ptr;		/* points to descriptor for char output variable */
	declare error_code		 fixed bin (35);	/* error status encoding */
	declare vir_data_ptr	 char (vir_data_ptr_len) based (vir_data_ptr_ptr); /* virutal pointer to input data value */
	declare vir_desc_ptr	 char (vir_desc_ptr_len) based (vir_desc_ptr_ptr); /* virutal pointer to input value descriptor */
	declare cv_ptr_		 entry (char (*), fixed bin (35)) returns (ptr); /* converts virtual pointers to real pointers */
	declare char_desc		 bit (36) init ("101011000000000000001100001101010000"b); /* char (50000) varying descriptor */
	declare mu_convert		 entry (ptr, ptr, ptr, ptr, fixed bin (35)); /* encapsulates assign_ conversion routine */
	declare caller_name		 char (22) init ("mdb_display_data_value"); /* name of calling routine */
	declare iox_$user_output	 external pointer;	/* user_i/o iocb pointer */
	declare iox_$put_chars	 entry (ptr, ptr, fixed bin (21), fixed bin (35)); /* outputs characters */
	declare cu_$arg_ptr		 entry (fixed bin, ptr, fixed bin (21), fixed bin (35)); /* gets char(*) arguments */
	declare cu_$arg_count	 entry (fixed bin); /* gets argument count */
	declare nargs		 fixed bin;	/* number of arguments */
	declare error_table_$wrong_no_of_args fixed bin (35) ext; /* wrong arg count, s/b 2 */
	declare vir_data_ptr_ptr	 ptr;		/* points to virtual_data_ptr char(*) arg */
	declare vir_desc_ptr_ptr	 ptr;		/* pointer to virutal_desc_ptr char (*) arg */
	declare vir_data_ptr_len	 fixed bin (21);	/* length of virtual_data_ptr char(*) arg */
	declare vir_desc_ptr_len	 fixed bin (21);	/* length of virtual_desc_ptr char(*) arg */
	declare input_data_ptr	 ptr;		/* subr input data pointer */
	declare input_desc_ptr	 ptr;		/* subr input descriptor pointer */
	declare (
	        addr,
	        addrel,
	        length,
	        rtrim
	        )			 builtin;

     end;
