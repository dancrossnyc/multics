/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

mrds_dsl_make_literal: proc (dbcb_ptr, lip, code);

/*  NOTES:

   This  procedure  builds  a  literal  entry  in  the dbcb literal pool.  The
   literal is aligned, zero padded, and encoded if necessary.


   HISTORY:

   79-02-01 J. A. Weedreyer: Initially written.

   79-06-06 Al Kepner: Modified to use select_area.

   79-08-28 NSDavids: Modified to initialize the internal status code to zero.

   79-12-02  Mary  Ward:  Modified  to pass data descriptors "by value" rather
   than  just  give  the  user  a  pointer  into  the  resultant  model and to
   initialize the pointer and descriptor for the return code to be used by the
   encode procedure.

   79-12-01      Jim      Gray:      Modified      to     add     calls     to
   mu_data_class$valid_scalar_data_type,   and   mu_data_class$real_data_class,  and
   $complex_data_class,  so  that  packed  decimal  could  be handled also the
   routines mu_data_length$_data_bit_length, and mu_data_align$align_data_item are
   called instead of internal calculation, for the same reason.

   81-05-06  Rickie  E.   Brinegar:  Modified  to  make  use  of  the modified
   rm_domain_info   structure   and   to   use  cu_$generate_call  instead  of
   cu_&gen_call.

   83-04-04 Davids: Removed declarations to things that are no longer
   used: addrel, align_array, arith_len, cleanup, mod,
   mu_data_class$complex_data_class mu_data_class$real_data_class,
   num_desc, string.

   83-09-26 Mike Kubicar - Added code to check if a stringsize condition has
   occurred while converting the literal.  If so, just move the original
   literal into the literal pool and let the compare code handle things.

*/
%page;
	alloc_sw = "0"b;				/* remember main entry */
	go to common;

alloc: entry (dbcb_ptr, lip, code);

/* Entry to merely alocate space, without moving in value */

	alloc_sw = "1"b;

common:
	num_dims = 0;
	stringsize_occurred = "0"b;
	select_area_ptr = dbcb.select_area_ptr;
	if dbcb.lit_ptr = null then do;		/* must alloc lit area */
		allocate literal_string in (select_area); /* Allocations in select_area are never freed.  This area
						   is reinitialized at the beginning of each new selection expression. */
		literal_string = "0"b;
		dbcb.cur_lit_offset = 0;
	     end;


	lit_info.lit_blen = mu_data_length$get_data_bit_length (lit_info.litd_ptr -> descriptor_overlay);

	dbcb.cur_lit_offset = dbcb.cur_lit_offset +
	     mu_data_align$align_data_item (lit_info.litd_ptr, dbcb.cur_lit_offset);

	if dbcb.cur_lit_offset + lit_info.lit_blen > mrds_data_$lit_string_size - 1 then
	     call error (mrds_error_$lit_string_ovfl);	/* if about to overflow the literal pool */

	lit_info.lit_offset = dbcb.cur_lit_offset;	/* set up output for caller */
	lit_info.lit_ptr = addr (literal_array (lit_info.lit_offset));

	if ^alloc_sw then do;			/* if also moving in value */

		if ^mu_valid_data_type$valid_scalar_data_type (lit_info.srcd_ptr -> descriptor_overlay) then
		     call error (mrds_error_$inv_literal_type);

		on conversion call error (mrds_error_$bad_arith_const);
		on overflow call error (mrds_error_$bad_arith_const);
		on underflow call error (mrds_error_$bad_arith_const);

		if lit_info.encd_proc then do;	/* if must encode */
			if lit_info.srcd_ptr -> bit36 ^= lit_info.encdd_ptr -> bit36 then do; /* if must first convert */
				lit_info.encd_blen = mu_data_length$get_data_bit_length (lit_info.encdd_ptr -> descriptor_overlay);
				if lit_info.encd_blen > 2376 then do; /* if long, must alloc. */
					allocate encd_bs in (select_area); /* Allocations in select_area are never freed.  This area
						   is reinitialized at the beginning of each new selection expression. */
				     end;
				else eb_ptr = addr (wkspc); /* if can use stack work space */
				encd_bs = "0"b;	/* clear the space */
				call mu_convert$convert_data (lit_info.src_ptr,
				     lit_info.srcd_ptr,
				     eb_ptr,
				     lit_info.encdd_ptr,
				     icode);
				if icode ^= 0 then call error (icode);
				encode_list.uv_ptr = eb_ptr;
			     end;			/* if needed to convert */

			else encode_list.uv_ptr = lit_info.src_ptr; /* if no need to convert */

			user_descriptor = lit_info.encdd_ptr -> bit36; /* move user descriptor into temporary */
			encode_list.ud_ptr = addr (user_descriptor);
			if lit_info.encdd_ptr -> descriptor.type = varying_char_dtype /* see if need to adjust ptr */
			     | lit_info.encdd_ptr -> descriptor.type = varying_bit_dtype then
			     encode_list.uv_ptr = addr (encode_list.uv_ptr -> varying.string);
			db_descriptor = lit_info.litd_ptr -> bit36; /* move db descriptor into temporary */
			encode_list.dbd_ptr = addr (db_descriptor);
			if lit_info.litd_ptr -> descriptor.type = varying_char_dtype
			     | lit_info.litd_ptr -> descriptor.type = varying_bit_dtype then
			     encode_list.dbv_ptr = addr (lit_info.lit_ptr -> varying.string);
			else encode_list.dbv_ptr = lit_info.lit_ptr;

			encode_list.code_ptr = addr (icode);
			encode_list.coded_ptr = addr (FB35_DESC);
			call cu_$generate_call (lit_info.encd_entry, addr (encode_list));
			if icode ^= 0 then call error (icode); /* encode the value */


		     end;				/* if encoding */

		else do;				/* if not encoding */

			if lit_info.srcd_ptr -> bit36 ^= lit_info.litd_ptr -> bit36 then do; /* if must convert */


/*
*
*  First, just try to convert to the target data type.  If a stringsize
*  occurs, then just move the given type to the literal pool.  Conversion
*  will occur at comparison time.  That code is better suited to deal with
*  them.
*
*/

				on stringsize
				     stringsize_occurred = "1"b;
				call mu_convert$convert_data (lit_info.src_ptr,
				     lit_info.srcd_ptr,
				     lit_info.lit_ptr,
				     lit_info.litd_ptr,
				     icode);
				revert stringsize;
				if icode ^= 0 then call error (icode);
				if stringsize_occurred then do; /* It's not safe to convert */
					lit_info.lit_blen = mu_data_length$get_data_bit_length (
					     lit_info.srcd_ptr -> descriptor_overlay);
					dbcb.cur_lit_offset = dbcb.cur_lit_offset +
					     mu_data_align$align_data_item (lit_info.srcd_ptr, dbcb.cur_lit_offset);
					if dbcb.cur_lit_offset + lit_info.lit_blen > mrds_data_$lit_string_size - 1
					then call error (mrds_error_$lit_string_ovfl);

					lit_info.lit_offset = dbcb.cur_lit_offset; /* set up output for caller */
					lit_info.lit_ptr = addr (literal_array (lit_info.lit_offset));
					lit_info.litd_ptr = lit_info.srcd_ptr;
					lit_bit_str = lit_info.src_ptr -> lit_bit_str;
				     end;
			     end;
			else lit_bit_str = lit_info.src_ptr -> lit_bit_str; /* if no conversion */

		     end;				/* if not encoding */


	     end;					/* if moving in value */

	dbcb.cur_lit_offset = dbcb.cur_lit_offset + lit_info.lit_blen; /* update the cursor */

	code = 0;

exit:
	return;
%page;
error: proc (cd);

/* Error Procedure */

	dcl     cd		 fixed bin (35);

	code = cd;
	go to exit;

     end error;
%page;
%include mrds_dbcb;
%page;
%include mrds_lit_info;
%page;
%include mrds_literal_string;
%page;
%include mdbm_descriptor;
%page;
%include mdbm_seg_area;
%page;
%include mrds_select_area;
%page;
%include std_descriptor_types;
%page;
	dcl     (code,				/* Output:  status code */
	        icode		 init (0)) fixed bin (35); /* internal status code */

	dcl     FB35_DESC		 bit (36) aligned static options (constant)
				 init ("100000100000000000000000000000100011"b); /* descriptor for decode return code */

	dcl     db_descriptor	 bit (36) aligned;	/* temp for db descriptor */
	dcl     user_descriptor	 bit (36) aligned;	/* temp for encode descriptor */

	dcl     stringsize_occurred	 bit (1);		/* True if a strinsize condition occurred
	     					   during literal conversion */
	dcl     eb_ptr		 ptr;		/* to bit str. containing converted val, ready for encoding */

	dcl     bit36		 bit (36) based;	/* template */
	dcl     alloc_sw		 bit (1);
	dcl     encd_bs		 bit (lit_info.encd_blen) based (eb_ptr); /* conv. val. ready for encoding */
	dcl     wkspc		 (33) fixed bin (71); /* work space to save alloc. */
	dcl     lit_bit_str		 bit (lit_info.lit_blen) based (lit_info.lit_ptr); /* final literal */

	dcl     1 varying		 unaligned based,	/* template of varying string */
		2 length		 fixed bin (35),	/* length word */
		2 string		 char (0);	/* string begins here */

	dcl     1 encode_list	 aligned,		/* arg list for encode proc. */
		2 nargs		 fixed bin (17) unal init (6),
		2 code		 fixed bin (17) unal init (4),
		2 ndescs		 fixed bin (17) unal init (6),
		2 pad		 fixed bin (17) unal init (0),
		2 uv_ptr		 ptr,
		2 dbv_ptr		 ptr,
		2 code_ptr	 ptr,
		2 ud_ptr		 ptr,
		2 dbd_ptr		 ptr,
		2 coded_ptr	 ptr;

	declare descriptor_overlay	 bit (36) unal based; /* overlay for descriptor */
	declare mu_data_length$get_data_bit_length entry (bit (36)) returns (fixed bin (35)); /* storage bit length of data */
	declare mu_data_align$align_data_item entry (ptr, fixed bin (35)) returns (fixed bin); /* alignment needed for data,
						   given last used offset */
	declare mu_valid_data_type$valid_scalar_data_type entry (bit (36)) returns (bit (1) aligned); /* decides if supported data type */

	dcl     (mrds_data_$lit_string_size,
	        mrds_error_$bad_arith_const,
	        mrds_error_$inv_literal_type,
	        mrds_error_$lit_string_ovfl,
	        sys_info$max_seg_size) ext fixed bin (35);

	dcl     (conversion,
	        stringsize,
	        underflow,
	        overflow)		 condition;

	dcl     (null,
	        addr,
	        fixed,
	        rel)		 builtin;

	dcl     cu_$generate_call	 entry (entry, ptr);
	dcl     mu_convert$convert_data entry (ptr, ptr, ptr, ptr, fixed bin (35));

     end mrds_dsl_make_literal;
