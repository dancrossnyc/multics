/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* HISTORY:

   Originally written by Jim Gray - - January 1981

   83-04-04 Davids: explicitly declared the builtin function empty which was
   implicitly declared.

   83-06-20 Davids: Removed check for old version database and the call
   to v1 code if it was an old version db (old version dbs can no longer
   be opened)
*/

mrds_dsl_get_scope: get_scope: procedure
	(db_index, relation_name, permits, prevents, scope_mode_version, error_code);

/* DESCRIPTION:

   This routine will return the scope permit/prevent ops currently
   set on a given relation for a particular database opening.
   It also returns the version of the concurrency control in effect,
   so that the user may know whether to interpret the
   encodings of 0-1-2-4-8 as n-r-s-d-m or n-r-a-d-m.
   The permit and prevent arguments are encoded in the same
   fashion as for the dsl_$set/dl_scope routines.
   The database opening index may be to a model or submodel opening
   of any version MRDS database. If the opening is through
   a submodel, the submodel relation name should be used.

*/

/* PARAMETERS:

   db_index - - (input) fixed bin(35), the database opening index as returned
   from a call to dsl_$open. This may be either a model or submodel
   opening of any version MRDS database.

   relation_name - - (input) char(*), the name of the relation for which the
   current scope information is desired. If the opening was through a submodel,
   then this should be the submodel name of the relation.

   permits - - (output) fixed bin, the sum of the permited scope modes
   taken from the encodings 0 = null, 1 = read_attr, 2 = store or append_tuple,
   4 = delete_tuple, 8 = modify_attr as used by dsl_$set/dl_scope.

   prevents - - (output) fixed bin, the sum of the prevented scope modes
   for this relation, using the same encodings as for permits.

   scope_mode_version - - (output) fixed bin, the concurrency control
   version be used by the database. 5 => r-a-m-d, earlier versions
   make use of r-s-m-d. (outmoded 4 using r-u will not be encountered)

   error_code - - (output) fixed bin(35), the error status encoding, 0 for
   a successfull operation. It will be mrds_error_$scope_not_set
   if no scope is currently set on the relation. An error code of 0,
   with permit/prevents = 0 indicates null scope has been set.

*/

/* initialize */

	permits, prevents, scope_mode_version, error_code = 0;

/* check for a valid database index */

	call mu_database_index$get_resultant_model_pointer (db_index, dbcb_ptr);
	if dbcb_ptr = null () then
	     error_code = mrds_error_$invalid_db_index;
	else do;

/* get the version of the scope modes */

		dbc_ptr = dbcb.dbc_ptr;
		scope_mode_version = dbc.version;

/* set up the overlay pointers */

		permit_requests_ptr = addr (permits);
		prevent_requests_ptr = addr (prevents);

		call get_new_scope;

	     end;

get_new_scope: procedure ();

/* routine to get r-a-m-d type scope using the latest version of
   scope_info in the new version resultant model */

	scope_ptr = dbcb.scope_ptr;
	if scope_ptr = null then
	     error_code = mrds_error_$non_scope_ready;
	else do;

		found, finished = OFF;
		i = 1;

		do while (^finished);

		     if relation_name = scope_info.scope (i).sm_name then do;

			     permit_requests.read_attr = scope_info.scope (i).flags.permits.read_attr;
			     permit_requests.modify_attr = scope_info.scope (i).flags.permits.modify_attr;
			     permit_requests.append_tuple = scope_info.scope (i).flags.permits.append_tuple;
			     permit_requests.delete_tuple = scope_info.scope (i).flags.permits.delete_tuple;

			     prevent_requests.read_attr = scope_info.scope (i).flags.prevents.read_attr;
			     prevent_requests.modify_attr = scope_info.scope (i).flags.prevents.modify_attr;
			     prevent_requests.append_tuple = scope_info.scope (i).flags.prevents.append_tuple;
			     prevent_requests.delete_tuple = scope_info.scope (i).flags.prevents.delete_tuple;

			     finished, found = ON;

			end;

		     else if i < scope_info.nfiles then
			i = i + 1;

		     else finished = ON;

		end;

		if ^found then
		     error_code = mrds_error_$unknown_relation_name;

		else if ^scope_info.scope (i).flags.touched then
		     error_code = mrds_error_$scope_not_set;

	     end;

%include mdbm_scope_info;
     end;

	declare db_index		 fixed bin (35);	/* opening index for database */
	declare mu_database_index$get_resultant_model_pointer entry (fixed bin (35), ptr); /* gets pointer from open index */
	declare mrds_error_$invalid_db_index fixed bin (35) ext; /* not good opening index */
	declare relation_name	 char (*);	/* the submodel or model name of the relation */
	declare permits		 fixed bin;	/* the permited scope modes */
	declare prevents		 fixed bin;	/* the prevented scope modes */
	declare scope_mode_version	 fixed bin;	/* the dbc structure version */
	declare error_code		 fixed bin (35);	/* the error status encoding */
	declare mrds_error_$scope_not_set fixed bin (35) ext; /* no scope set for relation */
	declare sys_info$max_seg_size	 fixed bin (35) ext;/* largest segment */
	declare (addr, null, rel, empty, fixed) builtin;
	declare i			 fixed bin;	/* loop index */
	declare ON		 bit (1) init ("1"b); /* true value */
	declare OFF		 bit (1) init ("0"b); /* false value */
	declare found		 bit (1);		/* on => given name found in resultant model */
	declare finished		 bit (1);		/* loop exit control */
	declare work_area		 area (4096);	/* space for returned structures about scope */
	declare mrds_error_$unknown_relation_name fixed bin (35) ext; /* name not in view */
	declare mrds_error_$non_scope_ready fixed bin (35) ext; /* relation not readied for scope concurrency */

%include mrds_dbcb;

%include mdbm_scope_requests;

%include mdbm_dbc;

     end;
