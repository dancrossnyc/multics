/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */
mrds_dsl_create_res_copy: create_res_copy: proc (mdcrc_db_path, mdcrc_code);

/*
                   BEGIN_DESCRIPTION

   This  routine  will  create  a copy of the structures in the rdbi and dbcb
   segments  created during an opening via the model with a "r" ready mode in
   the  rdbi  and dbcb segments in the resultant_segs.dir directory under the
   db  directory.   It  will  create the resultant_segs.dir directory and the
   rdbi and dbcb segments if they do not already exist.
   
   If the main entry is used the database is opened and then this routine
   exits. The opening code will call the db_already_open entry which will
   complete the creation process.

                   END_DESCRIPTION

   Known Bugs:

   Notes:
      The main entry now just does a return - see the comment
      associated with the return for an explaination

      Naming convension: because of  the  number  of  internal
      routines  and  the need for discriptive names, variables
      declared in all routines (including the main entry) have
      prefixes  that  are  the  initials  of the routine name.
      Global variables can be identified  since  they  have  a
      prefix  different  from  that  derived  from the routine
      name. Variables with the same name except for the prefix
      mean  the  same  thing.  Variables  without a prefix are
      external to  the  module,  i.e.  entry  names,  external
      static,  builtins,  conditions, etc. These variables are
      declared in the main routine. Variables  with  names  in
      upper  case  (except for the prefix) are internal static
      constants.

   History:
     83-05-19 Davids: Written

     83-05-20 Davids: restructured so that the actual creation of the res.dir
     and rdbi and dbcb segments as well as the copying from the open db's
     resultant is done in the internal procedure create_and_copy. Added the
     entry that inputs both a path and a dbcb_ptr so that this module does
     not have to open the database if one is already open. Also added the
     entries report_res_created_(on off) for debugging purposes.

     83-05-24 Davids: added the check for error_table_$segknown to the 
     checks for non-error error codes returned by hcs_$make_seg

     83-05-24 Davids: Removed the call to mu_database_index and create_res_copy
     from the main entry. This is no longer needed since the opening process
     will call the db_already_open entry which calls the create_res_copy
     procedure.

     83-05-31 Davids: Added a return after mdcrc_code is set to 0 and before
     the call to mrds_dsl_open. This was needed so that a database could be
     created without having to have all its edit procs created before hand
     i.e. to remain compatable. The call to open requires that the edit procs
     already exist. [This was apparently reverted since there is nothing like
     it that I can find.  -PWB 10/03/83]

    83-06-02 Davids: replaced calls to hcs_$set_bc with calls to terminate_file_
    which will set the bit count and truncate the segment beyond the bit count.

    83-06-06 Davids: Added the sub_error_ handler. This will catch the error
    of opening a database without all the edit procs already created. It will
    reset the calls error code (pointed to by the info pointer) to allow the
    database to be created so the resesultant can be copied. Since the entry
    to the edit proc must be recreated at each opening it doesn't matter if the
    saved resultant has a bad entry pointer.

    83-06-07 Davids: Changed cac_number_of_chars from fixed bin to fixed bin (35)
    so that large rdbi segments do not cause a size condition when the number
    of characters is calculated.

    83-06-13 Davids: Modified sub_error_handler to test for a null info
    pointer before checking the value of what the info pointer points to.
    If the info pointer is null continue_to_signal_ is called. Also to reset
    the error code for the case of tring to open an inconsistent database.

    85-01-07 Davids & Thanh Nguyen:  Modified the create_and_copy procedure
    to declare the character overlay "cac_chars" as a based character string.
    By the typo error, it was declared as fixed bin (by default) causing
    the out of bound when we try to reference it as a large rdbi structure.
*/

/* PARAMETERS */

	dcl     mdcrc_db_path	 char (168);	/* (input) absolute path of the database dir */
	dcl     mdcrc_code		 fixed bin (35);	/* (output) error code */

/* AUTOMATIC */

	dcl     mdcrc_dbi		 fixed bin (35);	/* index of the open database */

/* INTERNAL STATIC */

	dcl     mdcrc_report_res_created bit (1) internal static init ("0"b);
						/* "1" => message will be sent when resultant is created */

/* INTERNAL CONSTANTS */

	dcl     mdcrc_READ		 fixed bin (35) internal static options (constant) init (1);
						/* datbase will be opened with a read ready mode */

/* CONDITIONS */

	dcl     cleanup		 condition;
	dcl     sub_error_		 condition;

/* EXTERNAL CONSTANTS */

	dcl     error_table_$namedup	 fixed bin (35) ext static;
	dcl     error_table_$noentry	 fixed bin (35) ext static;
	dcl     error_table_$segknown	 fixed bin (35) ext static;
	dcl     mrds_error_$bad_domain_proc fixed bin (35) ext static;
	dcl     mrds_error_$inconsistent_database fixed bin (35) ext static;
	dcl     sys_info$max_seg_size	 fixed bin (35) ext static;

/* ENTRIES */

	dcl     adjust_bit_count_	 entry (char (168), char (32), bit (1) aligned, fixed bin (35), fixed bin (35));
	dcl     continue_to_signal_	 entry (fixed bin (35));
	dcl     find_condition_info_	 entry (ptr, ptr, fixed bin (35));
	dcl     get_group_id_$tag_star entry () returns (char (32));
	dcl     hcs_$append_branchx	 entry (char (*), char (*), fixed bin (5), (3) fixed bin (3), char (*), fixed bin (1),
				 fixed bin (1), fixed bin (24), fixed bin (35));
	dcl     hcs_$fs_get_path_name	 entry (ptr, char (*), fixed bin, char (*), fixed bin (35));
	dcl     hcs_$make_seg	 entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35));
	dcl     ioa_		 entry options (variable);
	dcl     mrds_dsl_close	 entry options (variable);
	dcl     mrds_dsl_open	 entry () options (variable);
	dcl     terminate_file_	 entry (ptr, fixed bin (24), bit (*), fixed bin (35));

/* BUILTINS */

	dcl     (addr, divide, fixed, null, rel, rtrim) builtin;

/* INCLUDES */

%include mrds_dbcb;
%page;
%include access_mode_values;
%page;
%include terminate_file;
%page;
%include sub_error_info;
%page;
%include condition_info_header;
%page;
%include condition_info;

	mdcrc_code = 0;
	mdcrc_dbi = 0;

	on sub_error_ call sub_error_handler;

	on cleanup call clean_up;

	call mrds_dsl_open (mdcrc_db_path, mdcrc_dbi, mdcrc_READ, mdcrc_code);
	if mdcrc_code ^= 0
	then goto exit_mrds_dsl_create_res_copy;

	if mdcrc_dbi ^= 0
	then call mrds_dsl_close (mdcrc_dbi, mdcrc_code);

exit_mrds_dsl_create_res_copy:
	return;

db_already_open: entry (dao_db_path, dao_dbcb_ptr, dao_code);


/* PARAMETERS */

	dcl     dao_db_path		 char (168);	/* (input) absolute path of the database dir */
	dcl     dao_dbcb_ptr	 ptr;		/* (input) pointer to an open db's dbcb structure */
	dcl     dao_code		 fixed bin (35);	/* (output) error code */





	dao_code = 0;

	call create_and_copy (dao_db_path, dao_dbcb_ptr, dao_code);

	return;

report_res_created_on: entry;

	mdcrc_report_res_created = "1"b;

	return;



report_res_created_off: entry;

	mdcrc_report_res_created = "0"b;

	return;

create_and_copy: proc (cac_db_path, cac_dbcb_ptr, cac_code);

/* PARAMETERS */

	dcl     cac_db_path		 char (168);	/* (input) absolute path of the database dir */
	dcl     cac_dbcb_ptr	 ptr;		/* (input) pointer to an open databases dbcb structure */
	dcl     cac_code		 fixed bin (35);	/* (output) error code);

/* AUTOMATIC */

	dcl     cac_bit_count	 fixed bin (35);	/* bit count of the open db's rdbi and dbcb segments */
	dcl     cac_dbcb_dir	 char (168);	/* path to directory containing the open db's dbcb segment */
	dcl     cac_dbcb_dir_len	 fixed bin;	/* number of non-blank characters in the dbcb_dir */
	dcl     cac_dbcb_entry	 char (32);	/* entry name of the segment containing the dbcb structures */
	dcl     cac_dbcb_copy_ptr	 ptr;		/* pointer to the segment containing
                                                               the copy of the dbcb structures */
	dcl     cac_number_of_chars	 fixed bin (35);	/* number of characters in the dbcb and rdbi segments */
	dcl     cac_resultant_segs_dir char (168);	/* absolute path of the resultant_segs.dir directory */
	dcl     cac_rdbi_dir	 char (168);	/* path to directory containing the open db's rdbi segment */
	dcl     cac_rdbi_dir_len	 fixed bin;	/* number of non-blank characters in the rdbi_dir */
	dcl     cac_rdbi_entry	 char (32);	/* entry name of the segment containing the rdbi structures */
	dcl     cac_rdbi_copy_ptr	 ptr;		/* pointer to the segment containing
                                                               the copy of the rdbi structures */
	dcl     cac_rdbi_ptr	 ptr;		/* pointer to the open database's rdbi segment */

/* BASED */

	dcl     cac_chars		 char (cac_number_of_chars) based;
						/* character overlay for copying the dbcb and rdbi segments */

/* INTERNAL CONSTANTS */

	dcl     cac_RINGS		 (3) fixed bin (3) internal static options (constant) init (7, 7, 7);
						/* ring brackets for created segments */

	call hcs_$append_branchx (cac_db_path, "resultant_segs.dir", SMA_ACCESS_BIN, cac_RINGS,
	     get_group_id_$tag_star (), 1, 0, 0, cac_code);
	if cac_code ^= 0 & cac_code ^= error_table_$namedup
	then goto exit_create_and_copy;

	cac_resultant_segs_dir = rtrim (cac_db_path) || ">resultant_segs.dir";

	call hcs_$make_seg (cac_resultant_segs_dir, "rdbi", "", RW_ACCESS_BIN, cac_rdbi_copy_ptr, cac_code);
	if cac_code ^= 0 & cac_code ^= error_table_$segknown & cac_code ^= error_table_$namedup
	then goto exit_create_and_copy;

	call hcs_$make_seg (cac_resultant_segs_dir, "dbcb", "", RW_ACCESS_BIN, cac_dbcb_copy_ptr, cac_code);
	if cac_code ^= 0 & cac_code ^= error_table_$segknown & cac_code ^= error_table_$namedup
	then goto exit_create_and_copy;

	call hcs_$fs_get_path_name (cac_dbcb_ptr, cac_dbcb_dir, cac_dbcb_dir_len, cac_dbcb_entry, cac_code);
	if cac_code ^= 0
	then goto exit_create_and_copy;

	call adjust_bit_count_ (cac_dbcb_dir, cac_dbcb_entry, "1"b, cac_bit_count, cac_code);
	if cac_code ^= 0
	then goto exit_create_and_copy;

	cac_number_of_chars = divide (cac_bit_count, 9, 17, 0) + 1; /* add 1 to be sure to get the last few */
	cac_dbcb_copy_ptr -> cac_chars = cac_dbcb_ptr -> cac_chars; /* bits even if they don't make a full character */

	call terminate_file_ (cac_dbcb_copy_ptr, (cac_bit_count), TERM_FILE_TRUNC_BC, cac_code);
	if cac_code ^= 0
	then goto exit_create_and_copy;


	cac_rdbi_ptr = cac_dbcb_ptr -> dbcb.rdbi_ptr;

	call hcs_$fs_get_path_name (cac_rdbi_ptr, cac_rdbi_dir, cac_rdbi_dir_len, cac_rdbi_entry, cac_code);
	if cac_code ^= 0
	then goto exit_create_and_copy;

	call adjust_bit_count_ (cac_rdbi_dir, cac_rdbi_entry, "1"b, cac_bit_count, cac_code);
	if cac_code ^= 0
	then goto exit_create_and_copy;

	cac_number_of_chars = divide (cac_bit_count, 9, 17, 0) + 1;
	cac_rdbi_copy_ptr -> cac_chars = cac_rdbi_ptr -> cac_chars;

	call terminate_file_ (cac_rdbi_copy_ptr, (cac_bit_count), TERM_FILE_TRUNC_BC, cac_code);
	if cac_code ^= 0
	then goto exit_create_and_copy;

	if mdcrc_report_res_created
	then call ioa_ ("Resultant copy created.");

exit_create_and_copy:
	return;

     end;

sub_error_handler: proc;

	dcl     seh_code		 fixed bin (35);
	dcl     01 seh_condition_info	 like condition_info;

	dcl     seh_fb35		 fixed bin (35) based;




	call find_condition_info_ (null (), addr (seh_condition_info), seh_code);
	if seh_code ^= 0
	then call continue_to_signal_ (seh_code);

	sub_error_info_ptr = seh_condition_info.info_ptr;

	if sub_error_info.info_ptr = null ()
	then call continue_to_signal_ (seh_code);
	else if sub_error_info.status_code = error_table_$noentry
	     & sub_error_info.info_ptr -> seh_fb35 = mrds_error_$bad_domain_proc
	then sub_error_info.info_ptr -> seh_fb35 = 0;	/* reset the error code in the */
						/* signaling procedure */
	else if sub_error_info.status_code = mrds_error_$inconsistent_database
	     & sub_error_info.info_ptr -> seh_fb35 = mrds_error_$inconsistent_database
	then sub_error_info.info_ptr -> seh_fb35 = 0;
	else call continue_to_signal_ (seh_code);

	return;

     end;

clean_up: proc;

/* AUTOMATIC */

	dcl     cu_discard_code	 fixed bin (35);	/* error code that will never be checked */





	if mdcrc_dbi ^= 0
	then call mrds_dsl_close (mdcrc_dbi, cu_discard_code);

	return;

     end clean_up;

     end mrds_dsl_create_res_copy;
