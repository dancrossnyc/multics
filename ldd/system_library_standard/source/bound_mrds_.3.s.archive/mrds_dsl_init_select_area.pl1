/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

mrds_dsl_init_select_area: proc (dbcbp, code);
	dcl     dbcbp		 ptr parm;	/* ptr to the dbcb (INPUT) */
	dcl     code		 fixed bin (35) parm; /* error code (OUTPUT) */

/* NOTES:
   This procedure initializes the area used for all selection expression allocations.
   */

/* HISTORY:
   Originally written by Al Kepner, June 1, 1979.

   82-12-09 Davids: changed the area to a freeing area so that the
   page_file relation manager will work. It should be changed back
   to a freeing area on Jan 15, 1983.

   83-04-04 Davids: Explicit declaration of the builtin functions null, 
   pointer, and rel.

   83-04-04 Davids: Changed the area back to non-freeing

   83-05-04 Mike Kubicar : Changed the area back to freeing (temporarily)

   84-09-05 John Hergert: removed call to hcs_$truncate_seg for 
   performance improvement. Also took out 2nd parameter 'select_area_ptr'
   since it is already in the dbcb. No point in passing it in twice.

*/
	dbcb_ptr = dbcbp;
	select_area_ptr = dbcb.select_area_ptr;

	code = 0;
	call mu_define_area (select_area_ptr, size (model_area), "MRDS.select",
	     "0"b /* not extensible */, "0"b /* no freeing */, "0"b, "0"b /* no zeroing */, icode);
	if icode ^= 0 then call error (icode);
	allocate select_area_struct in (select_area);	/* Allocations in select_area are never freed.  This area
						   is reinitialized at the beginning
						   of each new selection expression. */
	model_seg_ptr = pointer (select_area_ptr, 0);
	model_seg.struct_offset = rel (select_area_struct_ptr);
	select_area_struct.version = 1;
	select_area_struct.dbcb_ptr = dbcb_ptr;
exit:	;
	return;

error: proc (icode);
	dcl     icode		 fixed bin (35) parm;
	code = icode;
	go to exit;
     end error;

/* VARIABLES FOR MRDS_DSL_INIT_SELECT_AREA */

	dcl     hcs_$truncate_seg	 entry (ptr, fixed bin (18), fixed bin (35));
	dcl     icode		 fixed bin (35);
	dcl     sys_info$max_seg_size	 fixed bin (35) ext;
	declare mu_define_area	 entry (ptr, fixed bin (18), char (11),
				 bit (1) aligned, bit (1) aligned, bit (1) aligned, bit (1) aligned, fixed bin (35));
	dcl     (null, pointer, rel)	 builtin;

%include mdbm_seg_area;

%include mrds_select_area;

%include mrds_dbcb;
     end mrds_dsl_init_select_area;
