/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */



/* HISTORY:

   Originally written by Jim Gray - - July 1979

   81-01-30 Jim Gray : modified to call mrds_dsl_db_openings$list_dbs instead
   of mrds_dsl_list_dbs, after module renamed and modified for new interface $list_openings


   81-04-25 Jim Gray : changed size of work area to depend on mrds_data_$max_dbs

*/


mrds_dsl_close_all: close_all: procedure ();

/* DESCRIPTION:

   this routine will determine what databases the user currently has open,
   and proceed to close them all for him. an attempt will be made to close
   all open databases, regardless of any errors encountered during
   a close attempt on one particular database opening.

*/

/* PARAMETERS:

   (input) none

   error_code - - (output) fixed bin (35) error status type encoding, 0 unless an error occurred.

   sub_error_ - - (output) condition, signaled upon occurence of an error to provide more info

*/
%page;
/* check for the existance of a fixed bin (35) error code parameter */

	call cu_$arg_list_ptr (al_ptr);
	num_ptrs = arg_list.arg_count;
	nargs = arg_list.arg_count / 2;

	if nargs ^= 1 then do;
		code = error_table_$wrong_no_of_args;
		call sub_err_ (code, caller_name, continue, info_ptr, return_value, "^/^a ^d ^a ^a",
		     "The number of arguments =", nargs, "was not 1 for the",
		     "error code argument, dcld ""fixed binary (35) aligned"".");
	     end;
	else do;

		error_code_ptr = arg_list.arg_des_ptr (1);
		error_code = 0;			/* initialize */

/* get a parameter area, and establish a clean up handler */

		area_ptr = null ();
		clean_up_condition = OFF;

		on cleanup begin;
			clean_up_condition = ON;
			call clean_up ();
		     end;

		call get_temp_segment_ (caller_name, area_ptr, error_code);
		if error_code ^= 0 then
		     call sub_err_ (error_code, caller_name, continue, info_ptr, return_value, "^/^a",
			"Unable to obtain temporary segment for open database list.");
		else do;

			work_area = empty ();

/* get the open database list */

			call mrds_dsl_db_openings$list_dbs (area_ptr, database_list_ptr);
			if database_list_ptr = null () then ; /* no databases to close */
			else do;

				do loop_index = 1 by 1 to database_list.number_open;

				     call mrds_dsl_close (database_list.db (loop_index).index, code);
				     if code = 0 then ;
				     else if error_code ^= 0 then ; /* return first encountered error code */
				     else error_code = code;
				end;
			     end;
		     end;

/* get rid of temporary segment */

		call clean_up ();
	     end;
%page;
clean_up: procedure ();

/* remove temporary parameter space */

	if area_ptr = null () then ;
	else do;

		call release_temp_segment_ (caller_name, area_ptr, code);
		area_ptr = null ();
		if code = 0 | clean_up_condition then ;
		else do;
			call sub_err_ (error_code, caller_name, continue, info_ptr, return_value, "^/^a",
			     "Unable to release the temporary parameter space for the list of open databases.");
			if error_code ^= 0 then ;
			else error_code = code;

		     end;

	     end;

     end;
%page;
	dcl     cleanup		 condition;	/* signaled upon quit/release */
	dcl     clean_up_condition	 bit (1);		/* on => cleanup signaled */
	dcl     get_temp_segment_	 entry (char (*), ptr, fixed bin (35)); /* gets work space */
	dcl     release_temp_segment_	 entry (char (*), ptr, fixed bin (35)); /* deletes work space */
	dcl     ON		 bit (1) init ("1"b); /* true value */
	dcl     OFF		 bit (1) init ("0"b); /* false value */
	dcl     work_area		 area (60 * mrds_data_$max_dbs) based (area_ptr); /* parameter space */
	dcl     mrds_data_$max_dbs	 fixed bin (35) ext;/* max num open dbs */
	dcl     area_ptr		 ptr;		/* points to work space */
	dcl     empty		 builtin;		/* inits areas */
	dcl     caller_name		 char (18) init ("mrds_dsl_close_all"); /* name of calling routine */
	dcl     continue		 char (1) init ("c"); /* dont stop after printing mesg */
	dcl     info_ptr		 ptr init (null ());/* unused */
	dcl     return_value	 fixed bin (35) init (0); /* unused */
	dcl     error_code_ptr	 ptr;		/* pointer to error code argument */
	dcl     mrds_dsl_db_openings$list_dbs entry (ptr, ptr); /* getS list of open databases */
	dcl     mrds_dsl_close	 entry options (variable); /* closes open databases */
	dcl     sub_err_		 entry options (variable); /* reports errors */
	dcl     loop_index		 fixed bin (35);	/* opening index to be closed */
	dcl     error_code		 fixed bin (35) based (error_code_ptr); /* return status code */
	dcl     error_table_$wrong_no_of_args fixed bin (35) ext; /* arg count ^= 1 */
	dcl     cu_$arg_list_ptr	 entry (ptr);	/* gets argument list */
	dcl     nargs		 fixed bin;	/* argument count */
	dcl     SPECIAL		 fixed bin init (8);/* special arg list type */
	dcl     fixed_bin_35_descriptor bit (36) init ("100000100000000000000000000000100011"b);
	dcl     packed_mask		 bit (36) init ("111111101111111111111111111111111111"b); /* ignore alignment */
	dcl     code		 fixed bin (35);	/* temp error code variable */
	dcl     null		 builtin;
%page;
%include mrds_database_list;
%include mdbm_descriptor;
%include mdbm_arg_list;

     end;
