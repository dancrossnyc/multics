/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */


/* Invoke a subsystem request */

/* Created:  3 May 1980 by W. Olin Sibert */
/* Modified: 15 February 1982 by G. Palter to treat the continue_sw from unknown requests according to the documentation
   and to reflect the reorganization of the sci structure */

/* format: style4,delnl,insnl,ifthenstmt,ifthen */


ssu_execute_:
     procedure ();

	return;					/* not an entrypoint */


/* Parameters */

dcl  P_sci_ptr pointer parameter;
dcl  P_request_name character (*) parameter;		/* name of the request to be incoked */
dcl  P_arg_list_ptr pointer parameter;			/* -> the arguments for the request */
dcl  P_code fixed binary (35) parameter;


/* Local copies of parameters */

dcl  code fixed bin (35);


/* Remaining declarations */

dcl  saved_request_data_ptr pointer;
dcl  saved_executing_request bit (1) aligned;

dcl  1 auto_request_data aligned like request_data automatic;

dcl  continue_sw bit (1) aligned;

dcl  iox_$error_output pointer external;

dcl  (
     ssu_et_$active_function_error,
     ssu_et_$not_command_request,
     ssu_et_$not_af_request,
     ssu_et_$unknown_request
     ) fixed binary (35) external;

dcl  cu_$af_return_arg_rel entry (fixed binary, pointer, fixed binary (21), fixed binary (35), pointer);
dcl  cu_$generate_call entry (entry, pointer);
dcl  find_condition_info_ entry (pointer, pointer, fixed binary (35));
dcl  ioa_$ioa_switch entry () options (variable);
dcl  iox_$put_chars entry (pointer, pointer, fixed binary (21), fixed binary (35));
dcl  ssu_$abort_line entry () options (variable);
dcl  ssu_$locate_request entry (pointer, character (*), pointer, fixed binary (35));
dcl  ssu_$unknown_request entry (pointer, pointer, character (*), pointer, bit (1) aligned);
dcl  ssu_misc_procs_$unknown_request entry (pointer, pointer, character (*), pointer, bit (1) aligned);

dcl  (active_function_error, cleanup) condition;

dcl  (addr, null, length, substr) builtin;

/**/

/* Invokes a subsystem request: the default procedure reached by ssu_$invoke_request; also responsible for invoking
   Multics requests */

execute_request:
     entry (P_sci_ptr, P_request_name, P_arg_list_ptr, P_code);

	call ssu_check_sci (P_sci_ptr);

	sci_ptr = P_sci_ptr;

	request_data_ptr = addr (auto_request_data);

	call ssu_$locate_request (sci_ptr, P_request_name, request_data_ptr, code);
	if code = ssu_et_$unknown_request then do;	/* not in the request table (or whatever) */
	     continue_sw = "0"b;
	     call ssu_$unknown_request (sci_ptr, sci.info_ptr, P_request_name, P_arg_list_ptr, continue_sw);
	     if continue_sw then			/* caller handled it and wants request line ... */
		P_code = 0;			/* ... to be completed normally */
	     else do;				/* caller wants request line aborted ... */
		call ssu_misc_procs_$unknown_request (sci_ptr, sci.info_ptr, P_request_name, P_arg_list_ptr,
		     continue_sw);
		P_code = code;
	     end;
	     return;
	end;

	else if code ^= 0 then			/* some other peculiar type of error */
	     call ssu_$abort_line (sci_ptr, code, """^a""", P_request_name);

	request_data.arg_list_ptr = P_arg_list_ptr;

	call cu_$af_return_arg_rel			/* fill in call_info substructure */
	     (request_data.arg_count, request_data.rv_ptr, request_data.rv_lth, code, request_data.arg_list_ptr);

	if code = 0 then				/* and set the AF flag */
	     request_data.af_sw = "1"b;
	else request_data.af_sw = "0"b;

	if (^request_data.af_sw) & (^request_data.flags.allow_command) then
	     call ssu_$abort_line (sci_ptr, ssu_et_$not_command_request, "^a", request_data.full_name);

	if request_data.af_sw & (^request_data.flags.allow_af) then
	     call ssu_$abort_line (sci_ptr, ssu_et_$not_af_request, "^a", request_data.full_name);

	P_code = 0;

	saved_request_data_ptr = sci.request_data_ptr;	/* save it for later... */
	saved_executing_request = sci.executing_request;	/* in case called from another request */

	on cleanup
	     begin;				/* restore state on an abort */
		sci.request_data_ptr = saved_request_data_ptr;
		sci.executing_request = saved_executing_request;
	     end;

	sci.request_data_ptr = request_data_ptr;	/* request_data is in our frame now, and will stick around */
	sci.executing_request = "1"b;			/* as long as necessary */

	if request_data.flags.multics_request then do;	/* invoke a Multics command/AF as a request ... */
	     on condition (active_function_error)	/* ... catch AF errors in order to print the message */
		call report_active_function_error ();
	     call cu_$generate_call (request_data.entry, request_data.arg_list_ptr);
	     revert condition (active_function_error);
	end;

	else call request_data.entry (sci_ptr, sci.info_ptr);
						/* an ordinary request */

	sci.request_data_ptr = saved_request_data_ptr;
	sci.executing_request = saved_executing_request;

	return;

/**/

/* Reports active function errors: prints the message that would have been printed by the default error handler and then
   aborts the active function's execution */

report_active_function_error:
     procedure ();

dcl  1 cond_info aligned automatic like condition_info;

dcl  1 afe_info aligned based (cond_info.info_ptr) like com_af_error_info;

dcl  code fixed binary (35);

	call find_condition_info_ ((null ()), addr (cond_info), code);
	if code ^= 0 then				/* can't happen */
	     call ssu_$abort_line (sci_ptr, code, "Unable to find active function error frame.");

	if cond_info.info_ptr = null () then
	     call ssu_$abort_line (sci_ptr, code, "Unable to find active function error frame.");

	call iox_$put_chars (iox_$error_output, afe_info.errmess_ptr, afe_info.errmess_lth, (0));

	call ssu_$abort_line (sci_ptr, ssu_et_$active_function_error);
						/* never returns (we hope) */

     end report_active_function_error;

/**/

%include "_ssu_check_sci";
%page;
%include "_ssu_sci";
%page;
%include "_ssu_request_data";
%page;
%include condition_info;
%page;
%include com_af_error_info;

%include condition_info_header;

     end ssu_execute_;
