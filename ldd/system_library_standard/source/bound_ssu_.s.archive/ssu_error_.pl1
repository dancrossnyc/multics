/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */


/* Standard procedures for printing error messages for subsystems: ssu_$print_message, ssu_$abort_line, ssu_$abort_system;
   for the abort_line and abort_subsystem entries, the appropriate non-local transfers are made */

/* Created:  3 May 1980 by W. Olin Sibert from subsystem_listen_ */
/* Modified: 14 February 1982 by G. Palter to support standalone invocations */
/* Modified: June 1982 by G. Palter to reflect reorganization of SCI */
/* Modified: 6 November 1984 by G. Palter to use ssu_$get_subsystem_and_request_name and to correct the order of arguments
   in the call to assign_ (subsystem_utilities error #0020) */

/* format: style4,delnl,insnl,ifthenstmt,ifthen */


ssu_error_:
     procedure ();

	return;					/* not an entrypoint */


dcl  function fixed binary;

dcl  (arg_list_ptr, arg_ptr) pointer;
dcl  arg_count fixed binary;

dcl  arg_type fixed binary;
dcl  arg_packed bit (1) aligned;
dcl  arg_ndims fixed binary;
dcl  arg_size fixed binary;
dcl  arg_scale fixed binary;

dcl  based_pointer pointer aligned based;
dcl  based_fb35 fixed binary (35) aligned based;

dcl  error_code fixed binary (35);
dcl  error_message char (100) aligned;
dcl  (from_size, to_size) fixed bin (35);

dcl  caller_name character (72) varying;

dcl  output_message character (2048);
dcl  abort_label label variable;

dcl  error_table_$active_function fixed binary (35) external;
dcl  error_table_$not_act_fnc fixed binary (35) external;
dcl  ssu_et_$not_af_request fixed binary (35) external;
dcl  ssu_et_$not_command_request fixed binary (35) external;

dcl  iox_$error_output pointer external;
dcl  ssu_$null_label label variable external;

dcl  active_fnc_err_ entry () options (variable);
dcl  assign_ entry (pointer, fixed binary, fixed binary (35), pointer, fixed binary, fixed binary (35));
dcl  convert_status_code_ entry (fixed binary (35), character (8) aligned, character (100) aligned);
dcl  com_err_ entry () options (variable);
dcl  cu_$arg_count entry (fixed binary);
dcl  cu_$arg_ptr entry (fixed binary, pointer, fixed binary (21), fixed binary (35));
dcl  cu_$arg_list_ptr entry (pointer);
dcl  cu_$cl entry (bit (1) aligned);
dcl  decode_descriptor_
	entry (pointer, fixed binary, fixed binary, bit (1) aligned, fixed binary, fixed binary, fixed binary);
dcl  ioa_$general_rs
	entry (pointer, fixed binary, fixed binary, character (*), fixed binary, bit (1) aligned, bit (1) aligned);
dcl  ioa_$ioa_switch entry () options (variable);
dcl  ssu_$get_subsystem_and_request_name entry (pointer) returns (character (72) varying);
dcl  ssu_$print_message entry () options (variable);

dcl  PRINT_MESSAGE fixed binary static options (constant) initial (1);
dcl  ABORT_LINE fixed binary static options (constant) initial (2);
dcl  ABORT_SUBSYSTEM fixed binary static options (constant) initial (3);

dcl  (addr, binary, null, rtrim, substr, unspec) builtin;

/**/

/* Print an error message and continue execution */

print_message:
     entry () options (variable);

	function = PRINT_MESSAGE;
	go to COMMON;


/* Print an error message and then abort execution of the current request line (if any) */

abort_line:
     entry () options (variable);

	function = ABORT_LINE;
	go to COMMON;


/* Print an error message and then abort execution of the subsystem */

abort_subsystem:
     entry () options (variable);

	function = ABORT_SUBSYSTEM;
	go to COMMON;


/* Insure that the first argument is supplied and is an sci_ptr: if only that argument is present, print no message but
   perform any appropriate non-local transfers dependent on the entry invoked */

COMMON:
	call cu_$arg_count (arg_count);

	if arg_count = 0 then			/* there must be arguments */
	     call ssu_check_sci (null ());

	call cu_$arg_list_ptr (arg_list_ptr);

	call cu_$arg_ptr (1, arg_ptr, (0), (0));

	call decode_descriptor_ (arg_list_ptr, 1, arg_type, arg_packed, arg_ndims, arg_size, arg_scale);

	if (arg_type ^= pointer_dtype) | (arg_packed ^= "0"b) | (arg_ndims ^= 0) then call ssu_check_sci (null ());
						/* not a pointer */

	sci_ptr = arg_ptr -> based_pointer;		/* got it */

	call ssu_check_sci (sci_ptr);			/* validate it */

	if arg_count = 1 then go to EXIT_AFTER_PRINTING;	/* no message to print: abort the line or subsystem */


/* Pick up the error code argument */

	call cu_$arg_ptr (2, arg_ptr, (0), (0));
	call decode_descriptor_ (arg_list_ptr, 2, arg_type, arg_packed, arg_ndims, arg_size, arg_scale);

	if (arg_type = real_fix_bin_1_dtype) & (arg_packed = "0"b) then
	     error_code = arg_ptr -> based_fb35;	/* caller's code is a single-word fixed binary value */

	else do;					/* caller's code is something else: try to convert it */
	     if (arg_type >= bit_dtype) & (arg_type <= varying_char_dtype) then
		from_size = arg_size;
	     else from_size = (262144 * arg_scale) + arg_size;
	     to_size = 35;				/* target is fixed binary (35) */
	     call assign_ (addr (error_code), (2 * real_fix_bin_1_dtype), to_size, arg_ptr,
		(2 * arg_type + binary (arg_packed, 1)), from_size);
	end;

	if (error_code = 0) & (arg_count < 3) then	/* no error and no message: just abort as appropriate */
	     go to EXIT_AFTER_PRINTING;


/* Build the error message: convert the input status code, get the subsystem/request name, and process the caller's ioa_
   control string and arguments */

	if error_code ^= 0 then			/* get the error message */
	     call convert_status_code_ (error_code, (""), error_message);

	caller_name = ssu_$get_subsystem_and_request_name (sci_ptr);

	if arg_count >= 3 then			/* build the caller's message */
	     call ioa_$general_rs (arg_list_ptr, 3, 4, output_message, (0), ("1"b), ("0"b));
	else output_message = "";			/* no caller-supplied message */


/* Print the message: for standalone invocations, call com_err_ or active_fnc_err_ as appropriate, translating the
   not_af_request and not_command_request error codes to the appropiate error_table_ entries; additionally, the presence
   of these codes will cause the opposite entry to be called in order to achieve the correct behaviour */

	if sci.standalone_invocation then do;
	     request_data_ptr = sci.request_data_ptr;
	     if error_code = ssu_et_$not_af_request then error_code = error_table_$active_function;
	     if error_code = ssu_et_$not_command_request then error_code = error_table_$not_act_fnc;
	     if request_data.af_sw then		/* invoked as an active function */
		if error_code = error_table_$active_function then
		     call com_err_ (error_code, caller_name, "^a", output_message);
		else call active_fnc_err_ (error_code, caller_name, "^a", output_message);
	     else					/* invoked as a Multics command */
		if error_code = error_table_$not_act_fnc then
		call active_fnc_err_ (error_code, caller_name, "^a", output_message);
	     else call com_err_ (error_code, caller_name, "^a", output_message);
	end;

	else call ioa_$ioa_switch (iox_$error_output, "^a: ^[^a ^;^s^]^a", caller_name, (error_code ^= 0),
		error_message, output_message);


/* Post processing: for abort_line or abort_subsystem, perform the appropriate non-local transfer if not a standalone
   invocation; if a standalone invocation, call the caller's abort entry (which is expected not to return) */

EXIT_AFTER_PRINTING:
	if function = PRINT_MESSAGE then return;	/* simple exit */

	else if function = ABORT_LINE then abort_label = sci.request_processor_info.abort_line_label;

	else abort_label = sci.listener_info.abort_subsystem_label;
						/* anything we don't know about, just punt */

	if sci.debug_mode then do;			/* delay the inevitable, slightly */
	     call ioa_$ioa_switch (iox_$error_output, "ssu_error_: Debug mode set; calling cu_$cl.");
	     call cu_$cl ("0"b);			/* if a start occurs, continue */
	end;

	if sci.standalone_invocation then		/* standalone invocation: call abort entry (and ... */
	     call sci.standalone_abort_entry ();	/* ... probably never return here) */

	else do;
	     if substr (unspec (abort_label), 31, 6) = "43"b3 then
		if abort_label ^= ssu_$null_label then go to abort_label;
	     call ssu_$print_message (sci_ptr, 0, "Cannot go to abort label; returning...");
	end;

	return;

/**/

%include "_ssu_check_sci";
%page;
%include "_ssu_sci";
%page;
%include "_ssu_request_data";
%page;
%include std_descriptor_types;

     end ssu_error_;
