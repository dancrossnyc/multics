/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */


/* Standard subsystem requests quit, self_identify (.), subsystem_name, subsystem_version, abbrev, ready, ready_on,
   ready_off, and execute; also a utility to make implementation of the apply request simpler */

/* Created:  11 May 1980 by W. Olin Sibert */
/* Modified: 14 September 1980 by W. Olin Sibert to fix bug in quit request (not copying sci_ptr) */
/* Modified: 23 July 1982 by Jay Pattin to add abbrev request */
/* Modified: 16 December 1981 by Jay Pattin to add summarize_requests and implement new definition of list_requests */
/* Modified: 12 February 1982 by G. Palter to move summarize_requests and list_requests to ssu_request_mgr_ and changed to
   call cu_$evaluate_active_string rather than cu_$af */
/* Modified: 24 February 1982 by G. Palter to add subsystem_name and subsystem_version */
/* Modified: 19 June 1982 by G. Palter to make the self_identify request work as advertised */
/* Modified: 30 July 1982 by G. Palter to make the abbrev request work as an active request by returning true/false if
   request line expansion is enabled/disabled, respectively */

/* format: style4,delnl,insnl,ifthenstmt,ifthen */


ssu_misc_requests_:
     procedure ();

	return;					/* not an entrypoint */


/* Parameters */

dcl  P_sci_ptr pointer parameter;

dcl  P_info_ptr pointer parameter;			/* all requests */

dcl  P_first_argument fixed binary parameter;		/* apply_request_util: first argument of the command line */
dcl  P_seg_ptr pointer parameter;			/* apply_request_util: -> data being manipulated */
dcl  P_input_lth fixed binary (21) parameter;		/* apply_request_util: >0 => set bit count before call */
dcl  P_output_lth fixed binary (21) parameter;		/* apply_request_util: length of data returned by call */


/* Remaining declarations  */

dcl  argument character (argument_lth) based (argument_ptr);
dcl  argument_lth fixed binary (21);
dcl  argument_ptr pointer;

dcl  af_sw bit (1) aligned;
dcl  return_string character (return_string_lth) varying based (return_string_ptr);
dcl  return_string_lth fixed binary (21);
dcl  return_string_ptr pointer;

dcl  (arg_idx, n_arguments) fixed binary;

dcl  command_line_buffer character (2048);
dcl  command_line char (command_line_lth) based (command_line_ptr);
dcl  (command_line_lth, command_line_max_lth) fixed binary (21);
dcl  command_line_ptr pointer;

dcl  code fixed binary (35);

dcl  level fixed binary;

dcl  abbrev_switch bit (1) aligned;
dcl  (default_profile_ptr, profile_ptr) pointer;

dcl  ready_procedure entry (pointer) variable;
dcl  ready_mode bit (1) aligned;

dcl  temp_seg_ptr pointer;
dcl  temp_seg_comment character (32);

dcl  dirname character (168);
dcl  ename character (32);
dcl  pathname character (204);

dcl  seg_ptr pointer;
dcl  (old_seg_bc, new_seg_bc) fixed binary (24);

/* format: off */
dcl (error_table_$badopt, error_table_$command_line_overflow, error_table_$fatal_error, error_table_$noarg)
	fixed binary (35) external;
/* format: on */

%include cp_active_string_types;

dcl  sys_info$max_seg_size fixed binary (19) external;

dcl  cu_$evaluate_active_string entry (pointer, character (*), fixed binary, character (*) varying, fixed binary (35));
dcl  cu_$cp entry (pointer, fixed binary (21), fixed binary (35));
dcl  expand_pathname_$add_suffix entry (character (*), character (*), character (*), character (*), fixed binary (35));
dcl  hcs_$fs_get_path_name entry (pointer, character (*), fixed binary, character (*), fixed binary (35));
dcl  hcs_$set_bc_seg entry (pointer, fixed binary (24), fixed binary (35));
dcl  hcs_$status_mins entry (pointer, fixed binary (2), fixed binary (24), fixed binary (35));
dcl  initiate_file_ entry (character (*), character (*), bit (*), pointer, fixed binary (24), fixed binary (35));
dcl  ioa_ entry () options (variable);
dcl  pathname_ entry (character (*), character (*)) returns (character (168));
dcl  ssu_$abort_line entry () options (variable);
dcl  ssu_$abort_subsystem entry () options (variable);
dcl  ssu_$arg_count entry (pointer, fixed binary);
dcl  ssu_$arg_ptr entry (pointer, fixed binary, pointer, fixed binary (21));
dcl  ssu_$get_abbrev_info entry (pointer, pointer, pointer, bit (1) aligned);
dcl  ssu_$get_invocation_count entry (pointer, fixed binary, fixed binary);
dcl  ssu_$get_procedure entry (pointer, character (*), entry, fixed binary (35));
dcl  ssu_$get_request_name entry (pointer) returns (character (32));
dcl  ssu_$get_subsystem_and_request_name entry (pointer) returns (character (72) varying);
dcl  ssu_$get_subsystem_name entry (pointer) returns (character (32));
dcl  ssu_$get_subsystem_version entry (pointer) returns (character (32));
dcl  ssu_$get_temp_segment entry (pointer, character (*), pointer);
dcl  ssu_$release_temp_segment entry (pointer, pointer);
dcl  ssu_$return_arg entry (pointer, fixed binary, bit (1) aligned, pointer, fixed binary (21));
dcl  ssu_$set_abbrev_info entry (pointer, pointer, pointer, bit (1) aligned);
dcl  ssu_$set_debug_mode entry (pointer, bit (1) aligned);
dcl  ssu_$set_ready_mode entry (pointer, bit (1) aligned);
dcl  sub_err_ entry () options (variable);

dcl  CANT_RESTART character (1) static options (constant) initial ("s");

dcl  LONG_PDD_NAME character (32) varying static options (constant) initial (">process_dir_dir>");

dcl  cleanup condition;

dcl  (addr, divide, index, length, maxlength, null, rtrim, substr) builtin;

/**/

NO_ARGS_EXIT:
	call ssu_$abort_line (sci_ptr, 0, "No arguments may be given.");



/* Abort the current subsystem */

quit:
     entry (P_sci_ptr, P_info_ptr);

	sci_ptr = P_sci_ptr;

	call ssu_$arg_count (sci_ptr, n_arguments);
	if n_arguments ^= 0 then go to NO_ARGS_EXIT;

RETRY_QUIT:
	call ssu_$abort_subsystem (sci_ptr, 0);

	call sub_err_ (error_table_$fatal_error, ssu_$get_subsystem_and_request_name (sci_ptr), CANT_RESTART, null (),
	     (0), "Attempt to abort subsystem failed.");

	go to RETRY_QUIT;				/* in case he somehow restarts */



/* Standard self-identification request */

self_identify:
     entry (P_sci_ptr, P_info_ptr);

	sci_ptr = P_sci_ptr;

	call ssu_$arg_count (sci_ptr, n_arguments);
	if n_arguments ^= 0 then go to NO_ARGS_EXIT;

	call ssu_$get_abbrev_info (sci_ptr, (null ()), (null ()), abbrev_switch);
	call ssu_$get_invocation_count (sci_ptr, level, (0));

	call ioa_ ("^a ^a^[ (abbrev)^]^[ (level ^d)^]", ssu_$get_subsystem_name (sci_ptr),
	     ssu_$get_subsystem_version (sci_ptr), abbrev_switch, (level > 1), level);

	return;

/**/

/* Standard subsystem_name request: prints/returns the name of the current subsystem */

subsystem_name:
     entry (P_sci_ptr, P_info_ptr);

	sci_ptr = P_sci_ptr;

	call ssu_$return_arg (sci_ptr, n_arguments, af_sw, return_string_ptr, return_string_lth);
	if n_arguments ^= 0 then go to NO_ARGS_EXIT;

	if af_sw then
	     return_string = rtrim (ssu_$get_subsystem_name (sci_ptr));
	else call ioa_ ("^a", ssu_$get_subsystem_name (sci_ptr));

	return;



/* Standard subsystem_version request: prints/returns the version of the current subsystem */

subsystem_version:
     entry (P_sci_ptr, P_info_ptr);

	sci_ptr = P_sci_ptr;

	call ssu_$return_arg (sci_ptr, n_arguments, af_sw, return_string_ptr, return_string_lth);
	if n_arguments ^= 0 then go to NO_ARGS_EXIT;

	if af_sw then
	     return_string = rtrim (ssu_$get_subsystem_version (sci_ptr));
	else call ioa_ ("^a", ssu_$get_subsystem_version (sci_ptr));

	return;

/**/

/* Standard abbrev request/active request:  As a request, allows the user to enable/disable abbreviation processing and
   set the profile; as an active request, returns true/false if request line expansion is enabled/disabled respectively */

abbrev:
     entry (P_sci_ptr, P_info_ptr);

	sci_ptr = P_sci_ptr;

	call ssu_$return_arg (sci_ptr, n_arguments, af_sw, return_string_ptr, return_string_lth);

	if af_sw then do;				/* tell user is abbrev is enabled/disabled */
	     if n_arguments ^= 0 then go to NO_ARGS_EXIT;
	     call ssu_$get_abbrev_info (sci_ptr, (null ()), (null ()), abbrev_switch);
	     if abbrev_switch then return_string = "true";
	     else return_string = "false";
	     return;
	end;

	abbrev_switch = "1"b;			/* default is to turn on abbrev with current profile */
	call ssu_$get_abbrev_info (sci_ptr, default_profile_ptr, profile_ptr, ("0"b));

	do arg_idx = 1 to n_arguments;
	     call ssu_$arg_ptr (sci_ptr, arg_idx, argument_ptr, argument_lth);
	     if index (argument, "-") = 1 then do;
		if (argument = "-off") then abbrev_switch = "0"b;
		else if (argument = "-on") then abbrev_switch = "1"b;
		else if (argument = "-profile") then do;
		     abbrev_switch = "1"b;
		     arg_idx = arg_idx + 1;
		     call get_profile ();
		end;
		else call ssu_$abort_line (sci_ptr, error_table_$badopt, """^a""", argument);
	     end;
	     else call ssu_$abort_line (sci_ptr, 0, "Usage:  ^a {-control_args}", ssu_$get_request_name (sci_ptr));
	end;

	call ssu_$set_abbrev_info (sci_ptr, default_profile_ptr, profile_ptr, abbrev_switch);

	return;


/* Pickup and initiate the desired profile segment */

get_profile:
     procedure ();

dcl  profile_dirname character (168);
dcl  profile_ename character (32);

	if arg_idx > n_arguments then
	     call ssu_$abort_line (sci_ptr, error_table_$noarg, "Profile pathname after ""-profile"".");

	call ssu_$arg_ptr (sci_ptr, arg_idx, argument_ptr, argument_lth);

	call expand_pathname_$add_suffix (argument, "profile", profile_dirname, profile_ename, code);
	if code ^= 0 then call ssu_$abort_line (sci_ptr, code, argument);

	call initiate_file_ (profile_dirname, profile_ename, R_ACCESS, profile_ptr, (0), code);
	if code ^= 0 then
	     call ssu_$abort_line (sci_ptr, code, "Initiating ^a.", pathname_ (profile_dirname, profile_ename));

	return;

     end get_profile;

/**/

/* Standard request to print a ready message (actually invoke the ready procedure) */

ready:
     entry (P_sci_ptr, P_info_ptr);

	sci_ptr = P_sci_ptr;

	call ssu_$arg_count (sci_ptr, n_arguments);
	if n_arguments ^= 0 then go to NO_ARGS_EXIT;

	call ssu_$get_procedure (sci_ptr, "ready", ready_procedure, code);

	if code = 0 then				/* found the ready procedure all right */
	     call ready_procedure (sci_ptr);
	else call ssu_$abort_line (sci_ptr, code, "Attempting to invoke the ready procedure.");

	return;



/* Standard request to enable printing of ready messages after executing request lines */

ready_on:
     entry (P_sci_ptr, P_info_ptr);

	ready_mode = "1"b;
	go to READY_ON_OFF_COMMON;


/* Standard request to disable printing of ready messages after executing request lines */

ready_off:
     entry (P_sci_ptr, P_info_ptr);

	ready_mode = "0"b;
	go to READY_ON_OFF_COMMON;

READY_ON_OFF_COMMON:
	sci_ptr = P_sci_ptr;

	call ssu_$arg_count (sci_ptr, n_arguments);
	if n_arguments ^= 0 then go to NO_ARGS_EXIT;

	call ssu_$set_ready_mode (sci_ptr, ready_mode);

	return;

/**/

/* Standard request to enable/disable debug mode */

debug_mode:
     entry (P_sci_ptr, P_info_ptr);

	sci_ptr = P_sci_ptr;

	call ssu_$arg_count (sci_ptr, n_arguments);

	if n_arguments ^= 1 then
	     call ssu_$abort_line (sci_ptr, 0, "Usage: ^a [on | off]", ssu_$get_request_name (sci_ptr));

	call ssu_$arg_ptr (sci_ptr, 1, argument_ptr, argument_lth);

	if (argument = "on") | (argument = "-on") then call ssu_$set_debug_mode (sci_ptr, "1"b);
	else if (argument = "off") | (argument = "-off") then call ssu_$set_debug_mode (sci_ptr, "0"b);
	else call ssu_$abort_line (sci_ptr, 0, "Usage: ^a [on | off]", ssu_$get_request_name (sci_ptr));

	return;

/**/

/* Standard execute request: executes a Multics command line; as an active request, evaluates a Multics active string and
   returns the result to the request line processor */

execute:
     entry (P_sci_ptr, P_info_ptr);

	sci_ptr = P_sci_ptr;

	call ssu_$return_arg (sci_ptr, n_arguments, af_sw, return_string_ptr, return_string_lth);

	if af_sw & (n_arguments = 0) then
	     call ssu_$abort_line (sci_ptr, 0, "The ^a active request must have at least one argument.",
		ssu_$get_request_name (sci_ptr));

	command_line_ptr = addr (command_line_buffer);	/* prepare to construct it in automatic storage */
	command_line_lth = 0;
	command_line_max_lth = maxlength (command_line_buffer);

	temp_seg_ptr = null ();			/* for cleanup handler */
	temp_seg_comment = ssu_$get_request_name (sci_ptr);

	on condition (cleanup)
	     begin;
		if temp_seg_ptr ^= null () then call ssu_$release_temp_segment (sci_ptr, temp_seg_ptr);
	     end;

	do arg_idx = 1 to n_arguments;
	     call ssu_$arg_ptr (sci_ptr, arg_idx, argument_ptr, argument_lth);

	     call add_to_command_line (argument);
	end;

	if af_sw then				/* now, do it! */
	     call cu_$evaluate_active_string (null (), command_line, NORMAL_ACTIVE_STRING, return_string, code);
	else call cu_$cp (command_line_ptr, command_line_lth, code);

	if temp_seg_ptr ^= null () then		/* if we got one, get rid of it */
	     call ssu_$release_temp_segment (sci_ptr, temp_seg_ptr);

	if code = 100 then				/* and ignore this one */
	     code = 0;

	if code ^= 0 then				/* punt the request line if it failed */
	     call ssu_$abort_line (sci_ptr, code);

	return;

/**/

/* Utility for implementing subsystem apply requests: it constructs the command line (or active string) starting with the
   specified argument, catenates the pahtname of the segment (identified by P_seg_ptr) to the line, and executes the
   command line or evaluates the active string.  If requested, the bit count of the segment will be set before execution
   and restored on completion; the character count of the segment after executing the command line will be returned */

apply_request_util:
     entry (P_sci_ptr, P_first_argument, P_seg_ptr, P_input_lth, P_output_lth);

	call ssu_check_sci (P_sci_ptr);

	sci_ptr = P_sci_ptr;
	seg_ptr = P_seg_ptr;

	call ssu_$return_arg (sci_ptr, n_arguments, af_sw, return_string_ptr, return_string_lth);

	command_line_ptr = addr (command_line_buffer);	/* prepare to construct it in automatic storage */
	command_line_lth = 0;
	command_line_max_lth = maxlength (command_line_buffer);
	temp_seg_ptr = null ();
	temp_seg_comment = ssu_$get_request_name (sci_ptr);

	on condition (cleanup)
	     begin;
		if temp_seg_ptr ^= null () then call ssu_$release_temp_segment (sci_ptr, temp_seg_ptr);
	     end;

	call hcs_$fs_get_path_name (seg_ptr, dirname, (0), ename, code);
	if code ^= 0 then call ssu_$abort_line (sci_ptr, code, "Cannot determine pathname of temporary segment.");

	pathname = pathname_ (dirname, ename);
	if substr (pathname, 1, length (LONG_PDD_NAME)) = LONG_PDD_NAME then
	     pathname = ">pdd>" || substr (pathname, length (LONG_PDD_NAME) + 1);

	if P_input_lth >= 0 then do;			/* set the bitcount of the segment before going on */
	     call hcs_$status_mins (seg_ptr, (0), old_seg_bc, code);
	     if code ^= 0 then call ssu_$abort_line (sci_ptr, code, "Cannot get original bitcount of ^a.", pathname);
	     call hcs_$set_bc_seg (seg_ptr, (9 * P_input_lth), code);
	     if code ^= 0 then call ssu_$abort_line (sci_ptr, code, "Cannot set bitcount of ^a.", pathname);
	end;

	do arg_idx = P_first_argument to n_arguments;
	     call ssu_$arg_ptr (sci_ptr, arg_idx, argument_ptr, argument_lth);

	     call add_to_command_line (argument);
	end;

	call add_to_command_line (pathname);		/* and add the pathname, too */

	if af_sw then				/* now, do it! */
	     call cu_$evaluate_active_string (null (), command_line, NORMAL_ACTIVE_STRING, return_string, code);
	else call cu_$cp (command_line_ptr, command_line_lth, code);

	if temp_seg_ptr ^= null () then		/* if we got one, get rid of it */
	     call ssu_$release_temp_segment (sci_ptr, temp_seg_ptr);

	if code = 100 then				/* and ignore this one */
	     code = 0;

	if code ^= 0 then				/* punt the request line if it failed */
	     call ssu_$abort_line (sci_ptr, code);

	call hcs_$status_mins (seg_ptr, (0), new_seg_bc, code);
	if code ^= 0 then call ssu_$abort_line (sci_ptr, code, "Cannot determine bitcount of ^a.", pathname);

	P_output_lth = divide (new_seg_bc, 9, 21, 0);	/* return the new length */

	if P_input_lth >= 0 then do;			/* now, re-set the bitcount of the segment before returning */
	     call hcs_$set_bc_seg (seg_ptr, old_seg_bc, code);
	     if code ^= 0 then call ssu_$abort_line (sci_ptr, code, "Cannot restore old bitcount of ^a.", pathname);
	end;

	return;

/**/

/* Add the string to the command line expanding into a temporary segment if necessary */

add_to_command_line:
     procedure (p_string);

dcl  p_string character (*) parameter;
dcl  str_lth fixed binary (21);

	str_lth = length (p_string);

	if (command_line_lth + str_lth + 1) > command_line_max_lth then do;
	     if temp_seg_ptr ^= null () then call ssu_$abort_line (sci_ptr, error_table_$command_line_overflow);
	     call ssu_$get_temp_segment (sci_ptr, temp_seg_comment, temp_seg_ptr);

	     temp_seg_ptr -> command_line = command_line; /* copy what we already have */
	     command_line_ptr = temp_seg_ptr;		/* and then update the command_line_XXX values */
	     command_line_max_lth = 4 * sys_info$max_seg_size;
	end;

	if command_line_lth > 0 then do;		/* put a space between tokens */
	     command_line_lth = command_line_lth + 1;
	     substr (command_line, command_line_lth, 1) = " ";
	end;

	substr (command_line, command_line_lth + 1, str_lth) = p_string;
	command_line_lth = command_line_lth + str_lth;	/* copy in the argument */

	return;

     end add_to_command_line;

/**/

%include "_ssu_check_sci";
%page;
%include "_ssu_sci";
%page;
%include access_mode_values;

     end ssu_misc_requests_;
