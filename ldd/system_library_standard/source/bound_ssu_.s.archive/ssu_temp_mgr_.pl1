/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */


/* Associates temporary segments and areas with a subsystem invocation so they may all be freed at once when the
   invocation is destroyed */

/* Created:  8 May 1980 by W. Olin Sibert */
/* Modified: 2 November 1981 by W. Olin Sibert to fix area release bug (phx10462) */

/* format: style4,delnl,insnl,ifthenstmt,ifthen */


ssu_temp_mgr_:
     procedure ();

	return;					/* not an entrypoint */


/* Parameters */

dcl  P_sci_ptr pointer parameter;

dcl  P_comment character (*) parameter;			/* get_segment, get_area: additional info about what part of
						   the subsystem wants this segment/area */

dcl  P_seg_ptr pointer parameter;			/* get_segment, release_segment: set -> the segment acquired
						   for get; -> segment to release for release */

dcl  P_area_infop pointer parameter;			/* get_area: -> optional area_info setup by caller */

dcl  P_area_ptr pointer parameter;			/* get_area, release_area: set -> the area acquired for get;
						   for release, -> segment to release */


/* Data describing all temporary segments and areas acquired for this subsystem */

dcl  1 temp_info aligned based (temp_info_ptr),		/* describes a single segment/area */
       2 type fixed binary,				/* unused/segment/area */
       2 ptr pointer,
       2 name character (32) unaligned;
dcl  temp_info_ptr pointer;

dcl  NO_TYPE fixed binary static options (constant) initial (1);
dcl  SEGMENT_TYPE fixed binary static options (constant) initial (2);
dcl  AREA_TYPE fixed binary static options (constant) initial (3);

dcl  1 temp_info_array aligned based (sci.temp_info_ptr),
       2 size fixed binary,
       2 element (alloc_temp_info_array_size refer (temp_info_array.size)) like temp_info;

dcl  alloc_temp_info_array_size fixed binary;


/* Remaining declarations */

dcl  1 area_info_automatic like area_info aligned automatic;

dcl  code fixed binary (35);
dcl  idx fixed binary;
dcl  old_ptr pointer;

dcl  sys_info$max_seg_size fixed binary (19) external;

dcl  error_table_$area_too_small fixed binary (35) external;
dcl  error_table_$badcall fixed binary (35) external;

dcl  define_area_ entry (pointer, fixed binary (35));
dcl  get_temp_segment_ entry (character (*), pointer, fixed binary (35));
dcl  release_area_ entry (pointer);
dcl  release_temp_segment_ entry (character (*), pointer, fixed binary (35));
dcl  ioa_$rsnnl entry () options (variable);
dcl  ssu_$abort_line entry () options (variable);

dcl  (addr, currentsize, null, unspec) builtin;

/**/

/* Acquire a temporary segment: on failure, aborts the request line (shouldn't ever fail anyway) */

get_segment:
     entry (P_sci_ptr, P_comment, P_seg_ptr);

	call ssu_check_sci (P_sci_ptr);

	sci_ptr = P_sci_ptr;

	call get_temp_info_ptr ();			/* get a pointer to an empty temp_info */

	temp_info.type = SEGMENT_TYPE;
	call ioa_$rsnnl ("^a.^d^[ (^a)^]", temp_info.name, (0), sci.subsystem_name, sci.recursion_info.level,
	     (P_comment ^= ""), P_comment);		/* construct the name it will be allocated with */

	call get_temp_segment_ (temp_info.name, temp_info.ptr, code);

	if code ^= 0 then				/* try to punt... */
	     call ssu_$abort_line (sci_ptr, code, "Unable to get temporary segment.");

	P_seg_ptr = temp_info.ptr;

	return;

/**/

/* Acquires an area in a temporary segment */

get_area:
     entry (P_sci_ptr, P_area_infop, P_comment, P_area_ptr);

	call ssu_check_sci (P_sci_ptr);

	sci_ptr = P_sci_ptr;

	call get_temp_info_ptr ();			/* get one */

	temp_info.type = AREA_TYPE;
	call ioa_$rsnnl ("^a.^d^[ (^a)^]", temp_info.name, (0), sci.subsystem_name, sci.recursion_info.level,
	     (P_comment ^= ""), P_comment);		/* construct the name it will be allocated with */

	if P_area_infop = null () then do;		/* get an area with default characteristics */
	     unspec (area_info_automatic) = ""b;
	     area_info_automatic.control.extend = "1"b;
	     if sci.debug_mode then			/* make it non-freeing */
		area_info_automatic.control.dont_free = "1"b;
	     else area_info_automatic.control.zero_on_free = "1"b;
	end;					/* normally, zero when freeing */

	else unspec (area_info_automatic) = unspec (P_area_infop -> area_info);
						/* copy the caller's area_info */

	area_infop = addr (area_info_automatic);

	area_info.version = area_info_version_1;	/* and set a few things therein */
	area_info.areap = null ();
	area_info.owner = temp_info.name;
	area_info.size = sys_info$max_seg_size;		/* the entire segment, please */

	call define_area_ (area_infop, code);		/* get it! */

	if code ^= 0 then				/* try to punt... */
	     call ssu_$abort_line (sci_ptr, code, "Unable to define area.");

	temp_info.ptr = area_info.areap;
	P_area_ptr = area_info.areap;			/* return the area pointer */

	return;

/**/

/* Releases a temporary segment */

release_segment:
     entry (P_sci_ptr, P_seg_ptr);

	call ssu_check_sci (P_sci_ptr);

	sci_ptr = P_sci_ptr;

	if sci.temp_info_ptr = null () then		/* none even allocated yet! */
	     return;

	do idx = 1 to temp_info_array.size;
	     temp_info_ptr = addr (temp_info_array.element (idx));

	     if temp_info.type = SEGMENT_TYPE then
		if temp_info.ptr = P_seg_ptr then do;
		     P_seg_ptr = null ();		/* so caller doesn't try again */
		     call release_temp_segment_ (temp_info.name, temp_info.ptr, (0));

		     temp_info.type = NO_TYPE;	/* and free up this entry */
		     temp_info.ptr = null ();
		     temp_info.name = "";

		     return;			/* all done */
		end;
	end;					/* of loop looking */

	return;					/* even if we didn't find it */

/**/

/* Release an area */

release_area:
     entry (P_sci_ptr, P_area_ptr);

	call ssu_check_sci (P_sci_ptr);

	sci_ptr = P_sci_ptr;

	if sci.temp_info_ptr = null () then		/* none even allocated yet! */
	     return;

	do idx = 1 to temp_info_array.size;
	     temp_info_ptr = addr (temp_info_array.element (idx));

	     if temp_info.type = AREA_TYPE then
		if temp_info.ptr = P_area_ptr then do;
		     P_area_ptr = null ();		/* so caller doesn't try again */
		     call release_area_ (temp_info.ptr);

		     temp_info.type = NO_TYPE;	/* and free up this entry */
		     temp_info.ptr = null ();
		     temp_info.name = "";

		     return;			/* all done */
		end;
	end;					/* of loop looking */

	return;					/* even if we didn't find it */

/**/

/* Release all segments and area acquired by this subsystem: called by ssu_$destroy_invocation */

release_everything:
     entry (P_sci_ptr);

	sci_ptr = P_sci_ptr;

	if sci.temp_info_ptr = null () then return;	/* no temporaries allocated */

	do idx = 1 to temp_info_array.size;
	     temp_info_ptr = addr (temp_info_array.element (idx));

	     if temp_info.type = AREA_TYPE then call release_area_ (temp_info.ptr);

	     else if temp_info.type = SEGMENT_TYPE then call release_temp_segment_ (temp_info.name, temp_info.ptr, (0));

	     temp_info.type = NO_TYPE;		/* and free up this entry */
	     temp_info.ptr = null ();
	     temp_info.name = "";
	end;					/* of loop releasing */

	old_ptr = sci.temp_info_ptr;			/* null pointer first to avoid trying to free it twice */
	sci.temp_info_ptr = null ();

	free old_ptr -> temp_info_array in (sci_parent_area);

	return;

/**/

/* Finds a empty temp_info element: expands the array of temp_info's if necessary */

get_temp_info_ptr:
     procedure ();

dcl  idx fixed binary;
dcl  new_ptr pointer;

	if sci.temp_info_ptr = null () then do;
	     alloc_temp_info_array_size = 10;		/* start out with ten */
	     allocate temp_info_array in (sci_parent_area) set (sci.temp_info_ptr);
	     temp_info_array.size = alloc_temp_info_array_size;
	     do idx = 1 to temp_info_array.size;	/* initialize them */
		temp_info_array (idx).type = NO_TYPE;
		temp_info_array (idx).ptr = null ();
		temp_info_array (idx).name = "";
	     end;
	end;

	do idx = 1 to temp_info_array.size;		/* look for a free one */
	     if temp_info_array (idx).type = NO_TYPE then do;
		temp_info_ptr = addr (temp_info_array.element (idx));
		return;				/* got one */
	     end;
	end;

	old_ptr = sci.temp_info_ptr;			/* no free slots: make it bigger */
	alloc_temp_info_array_size = 3 * temp_info_array.size;

	allocate temp_info_array in (sci_parent_area) set (new_ptr);

	new_ptr -> temp_info_array.size = alloc_temp_info_array_size;

	do idx = 1 to old_ptr -> temp_info_array.size;	/* copy all the existing ones */
	     new_ptr -> temp_info_array.element (idx) = old_ptr -> temp_info_array.element (idx);
	end;

	do idx = (old_ptr -> temp_info_array.size + 1) to new_ptr -> temp_info_array.size;
	     new_ptr -> temp_info_array (idx).type = NO_TYPE;
	     new_ptr -> temp_info_array (idx).ptr = null ();
	     new_ptr -> temp_info_array (idx).name = "";
	end;					/* and initialize all the new ones */

	sci.temp_info_ptr = new_ptr;			/* new one is now ready */

	temp_info_ptr = addr (new_ptr -> temp_info_array.element (old_ptr -> temp_info_array.size + 1));
						/* first new */

	free old_ptr -> temp_info_array in (sci_parent_area);

	return;

     end get_temp_info_ptr;

/**/

%include "_ssu_check_sci";
%page;
%include "_ssu_sci";
%page;
%include area_info;

     end ssu_temp_mgr_;
