/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */
/* format: style4,delnl,insnl,ifthenstmt,indnoniterend */
dial_out_modes_$set:
     procedure (Dop, Modes, Code);

/* Written January 1983 by C. Hornig */

dcl  Dop ptr parameter;
dcl  Modes char (*) parameter;
dcl  Code fixed bin (35) parameter;

dcl  error_table_$bad_mode fixed bin (35) ext static;
dcl  error_table_$bad_mode_value fixed bin (35) ext static;
dcl  error_table_$unimplemented_version fixed bin (35) ext static;

dcl  get_user_free_area_ entry () returns (ptr);
dcl  mode_string_$parse entry (char (*), ptr, ptr, fixed bin (35));

dcl  i fixed bin;
dcl  (set_raw, set_echo, set_lfecho) bit (1) aligned;

dcl  cleanup condition;

dcl  null builtin;

/* * * * * * * * * * SET * * * * * * * * * */

	dop = Dop;
	set_raw = do_info.raw_sw;
	set_echo = do_info.echo_sw;
	set_lfecho = do_info.lfecho_sw;

	mode_string_info_ptr = null ();
	on cleanup
	     begin;
		if mode_string_info_ptr ^= null () then free mode_string_info;
	     end;

	call mode_string_$parse (Modes, get_user_free_area_ (), mode_string_info_ptr, Code);
	if Code ^= 0 then return;

	if mode_string_info.version ^= mode_string_info_version_2 then call abort (error_table_$unimplemented_version);

	do i = 1 to mode_string_info.number;
	     if mode_string_info.modes (i).version ^= mode_value_version_3
	     then call abort (error_table_$unimplemented_version);

	     if /* case */ mode_string_info.modes (i).mode_name = "echo"
	     then if mode_string_info.modes (i).boolean_valuep
		then set_echo = mode_string_info.modes (i).boolean_value;
		else call abort (error_table_$bad_mode_value);
	     else if mode_string_info.modes (i).mode_name = "raw"
	     then if mode_string_info.modes (i).boolean_valuep
		then set_raw = mode_string_info.modes (i).boolean_value;
		else call abort (error_table_$bad_mode_value);
	     else if mode_string_info.modes (i).mode_name = "echo_lf"
	     then if mode_string_info.modes (i).boolean_valuep
		then set_lfecho = mode_string_info.modes (i).boolean_value;
		else call abort (error_table_$bad_mode_value);
	     else if mode_string_info.modes (i).mode_name = "send_lf"
	     then if mode_string_info.modes (i).boolean_valuep
		then do_info.flags.send_lf_sw = mode_string_info.modes (i).boolean_value;
		else call abort (error_table_$bad_mode_value);
	     else if mode_string_info.modes (i).mode_name = "quit"
	     then if mode_string_info.modes (i).boolean_valuep
		then do_info.flags.quit_sw = mode_string_info.modes (i).boolean_value;
		else call abort (error_table_$bad_mode_value);
	     else if mode_string_info.modes (i).mode_name = "line"
	     then if mode_string_info.modes (i).boolean_valuep
		then do_info.flags.no_breakall_sw = mode_string_info.modes (i).boolean_value;
		else call abort (error_table_$bad_mode_value);
	     else call abort (error_table_$bad_mode);
	end;

punt:
	free mode_string_info;

	do_info.ci.raw_sw = set_raw;
	do_info.ci.echo_sw = set_echo;
	do_info.ci.lfecho_sw = set_lfecho;

	return;

/* * * * * * * * * * ABORT * * * * * * * * * */

abort:
     procedure (Error);

dcl  Error fixed bin (35) parameter;

	Code = Error;
	goto punt;
     end abort;
%page;
%include dial_out_invocation;
%include mode_string_info;

     end dial_out_modes_$set;
