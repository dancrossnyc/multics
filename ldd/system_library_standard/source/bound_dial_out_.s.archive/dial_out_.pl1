/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1991   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */

/* format: style4,delnl,insnl,ifthenstmt,indnoniterend */
dial_out_:
     procedure (Dial_out_info_ptr, Code);

/* dial_out: make a dial_out connection for a user. */
/* Written by C. Hornig, March 1980. */
/* Modified for installation, April 1982, by C. Hornig */
/* Modified January 1983 by C. Hornig to fix many bugs */
/* Modified March 1983 by K. Loepere to fix more bugs and enhance */


/****^  HISTORY COMMENTS:
  1) change(91-07-15,Oke), approve(91-09-09,MCR8247),
     audit(92-04-24,WAAnderson), install(92-04-24,MR12.5-1012):
     Changed to zero doi local do_info structure in initialization.
  2) change(91-08-19,JRGray), approve(91-09-09,MCR8247),
     audit(92-04-24,WAAnderson), install(92-04-24,MR12.5-1012):
     Set profile_ptr to null preventing 'dial_out' from cleaning it up
     after ssu_ becomes responsible for it. (Communications 457)
                                                   END HISTORY COMMENTS */


dcl  Code fixed bin (35) parameter;
dcl  Dial_out_info_ptr ptr parameter;

dcl  do_request_table_$do_request_table_ external;
dcl  ssu_request_tables_$standard_requests external;
dcl  sys_info$max_seg_size fixed bin (35) ext static;

dcl  error_table_$unimplemented_version fixed bin (35) ext static;
dcl  video_data_$terminal_iocb ptr external static;

dcl  continue_to_signal_ entry (fixed bin (35));
dcl  cu_$arg_list_ptr entry returns (ptr);
dcl  cu_$caller_ptr entry () returns (ptr);
dcl  cu_$cl entry (bit (36) aligned);
dcl  cu_$get_cl_intermediary entry (entry);
dcl  cu_$set_cl_intermediary entry (entry);
dcl  dial_out_modes_$set entry (ptr, char (*), fixed bin (35));
dcl  dial_out_util_$call_out entry (ptr, entry, ptr);
dcl  dial_out_util_$interaction_loop entry (ptr, bit (1) aligned, bit (1) aligned);
dcl  dial_out_util_$process_line_status entry (ptr);
dcl  dial_out_util_$reset_do_modes entry (ptr);
dcl  dial_out_util_$revert_fo entry (ptr);
dcl  dial_out_util_$set_do_modes entry (ptr);
dcl  get_process_id_ entry () returns (bit (36) aligned);
dcl  hcs_$wakeup entry (bit (36) aligned, fixed bin (71), fixed bin (71), fixed bin (35));
dcl  ioa_ entry () options (variable);
dcl  ssu_$add_request_table entry (ptr, ptr, fixed bin, fixed bin (35));
dcl  ssu_$create_invocation entry (char (*), char (*), ptr, ptr, char (*), ptr, fixed bin (35));
dcl  ssu_$destroy_invocation entry (ptr);
dcl  ssu_$execute_line entry (ptr, ptr, fixed bin (21), fixed bin (35));
dcl  ssu_$execute_start_up entry () options (variable);
dcl  ssu_$get_temp_segment entry (ptr, char (*), ptr);
dcl  ssu_$print_blast entry (ptr, ptr, fixed bin, char (*), fixed bin (35));
dcl  ssu_$set_abbrev_info entry (ptr, ptr, ptr, bit (1) aligned);
dcl  ssu_$set_ec_search_list entry (ptr, char (32));
dcl  ssu_$set_ec_suffix entry (ptr, char (32));

dcl  based_atd varying char (256) based;
dcl  based_modes char (doi.modes_len) based (doi.modes_ptr);

dcl  code fixed bin (35);
dcl  1 hangup_proc_data aligned,
       2 entry_var variable entry (ptr),
       2 data_ptr ptr,
       2 prior fixed bin;
dcl  1 doi aligned like do_info;
dcl  in_video bit (1) aligned;
dcl  net_input_buff char (2048);
dcl  str_to_match char (1024);

dcl  (cleanup, quit) condition;

dcl  (addr, length, null, string, unspec) builtin;
%page;
/* find out initial modes, options, etc. */
	Code = 0;
	if (Dial_out_info_ptr -> dial_out_info.version ^= "doinfo_0")
	     & (Dial_out_info_ptr -> dial_out_info.version ^= "doinfo_1")
	     & (Dial_out_info_ptr -> dial_out_info.version ^= DIAL_OUT_INFO_VERSION_2) then do;
	     Code = error_table_$unimplemented_version;
	     return;
	     end;

	dop = addr (doi);
	unspec (doi) = ""b;
	doi.ci = Dial_out_info_ptr -> dial_out_info;

	if doi.ci.version = "doinfo_0" then doi.ci.cmd_version = "";
	if (doi.ci.version = "doinfo_0") | (doi.ci.version = "doinfo_1") then do;
	     doi.ci.modes_ptr = null ();
	     doi.ci.modes_len = 0;
	     end;

	doi.version = doi.ci.cmd_version || "/2a";
	doi.abort_label = return_to_caller;
	doi.abort_code = 0;
	doi.sci_ptr = null ();
	doi.fo_iocbp = null ();
	doi.temp_seg_p = null ();
	doi.match_length = 0;
	string (doi.flags) = ""b;
	doi.flags.echo_mode = "1"b;

	in_video = video_data_$terminal_iocb ^= null ();
	if doi.ci.modes_ptr ^= null () then do;
	     call dial_out_modes_$set (dop, based_modes, doi.abort_code);
	     if doi.abort_code ^= 0 then goto doi.abort_label;
	     end;

	doi.old_modes = "";
	call iox_$modes (iox_$user_input, "", doi.old_modes, code);

	doi.cmd_ptr = null ();
	call cu_$get_cl_intermediary (doi.saved_cl_intermediary);

	on cleanup call cleaner;

	call ssu_$create_invocation (doi.ci.command_name, (doi.version), addr (doi), doi.ci.request_table_ptr,
	     ">doc>subsystem>dial_out", doi.sci_ptr, doi.abort_code);
	if doi.abort_code ^= 0 then goto return_to_caller;
	call ssu_$add_request_table (doi.sci_ptr, addr (do_request_table_$do_request_table_), 2, doi.abort_code);
	if doi.abort_code ^= 0 then goto return_to_caller;
	call ssu_$add_request_table (doi.sci_ptr, addr (ssu_request_tables_$standard_requests), 3, doi.abort_code);
	if doi.abort_code ^= 0 then goto return_to_caller;

	call ssu_$print_blast (doi.sci_ptr, cu_$caller_ptr (), 1, "", code);
	call ssu_$set_abbrev_info (doi.sci_ptr, doi.ci.profile_ptr, null (), (doi.ci.flags.abbrev_sw));
	Dial_out_info_ptr -> dial_out_info.profile_ptr = null();	/* COM 457: it's now completely ssu_'s responsibility */
	call ssu_$set_ec_search_list (doi.sci_ptr, "dial_out");
	call ssu_$set_ec_suffix (doi.sci_ptr, "dial_out");

	call ssu_$get_temp_segment (doi.sci_ptr, "work_area", doi.temp_seg_p);
	doi.cmd_buff_len = sys_info$max_seg_size * 4;
	call ssu_$get_temp_segment (doi.sci_ptr, "command_area", doi.cmd_ptr);

	doi.match_string_p = addr (str_to_match);
	doi.match_length = 0;
	doi.match_max_length = length (str_to_match);
	doi.net_input_buff_ptr = addr (net_input_buff);
	doi.net_input_buff_len = length (net_input_buff);
	doi.net_input_last_char_filled = 0;
	doi.net_input_last_char_output = 0;

	on quit
	     begin;
	     if doi.ci.flags.quit_sw then do;
		call iox_$control (doi.ci.net_iocb, "interrupt", null (), doi.abort_code);
		if doi.abort_code ^= 0 then goto return_to_caller;
		end;
	     else call continue_to_signal_ (doi.abort_code);
	end;

	doi.my_cl_intermediary = do_cl_intermediary;
	call cu_$set_cl_intermediary (doi.my_cl_intermediary);

	hangup_proc_data.entry_var = process_hangup;
	hangup_proc_data.data_ptr = addr (doi);
	hangup_proc_data.prior = 1;
	call iox_$control (doi.ci.net_iocb, "hangup_proc", addr (hangup_proc_data), code);

	if ^doi.ci.flags.brief_sw
	then call ioa_ ("Ready on ^a...", doi.ci.net_iocb -> iocb.attach_descrip_ptr -> based_atd);

	call dial_out_util_$process_line_status (dop);
	call dial_out_util_$reset_do_modes (dop);	/* undo mode set above for running start_up, request */

	if ^doi.ci.flags.no_startup_sw then call ssu_$execute_start_up (doi.sci_ptr, code);

	if doi.ci.request_ptr ^= null ()
	then call ssu_$execute_line (doi.sci_ptr, doi.ci.request_ptr, doi.ci.request_length, code);

	call dial_out_util_$set_do_modes (dop);
%page;
/* The main work lies in util_.  This is so the interaction loop may , be
   reentered (recursively) from the wait request. */
	call dial_out_util_$interaction_loop (dop, "0"b, "0"b);

return_to_caller:
	call cleaner;
	Code = doi.abort_code;

	return;
%page;
/* * * * * * * * * * CLEANER * * * * * * * * * */

cleaner:
     procedure;

	call cu_$set_cl_intermediary (doi.saved_cl_intermediary);
	call dial_out_util_$reset_do_modes (dop);
	if doi.raw_sw
	then if ^in_video then call iox_$control (iox_$user_input, "send_initial_string", null (), code);
						/* we need to reset tabs, etc. that foreign screwed up - would be nice if
						   this wasn't necessary */
	call dial_out_util_$revert_fo (addr (doi));
	if doi.sci_ptr ^= null () then do;
	     call ssu_$destroy_invocation (doi.sci_ptr);
	     end;
	doi.cmd_ptr = null ();
	return;

     end cleaner;

/* * * * * * * * * * DO_CL_INTERMEDIARY * * * * * * * * * * */

do_cl_intermediary:
     procedure (Flags) options (non_quick);
dcl  Flags bit (36) aligned parameter;

	call dial_out_util_$call_out (dop, cu_$cl, cu_$arg_list_ptr ());
						/* This gets the modes right */
	return;
     end do_cl_intermediary;

/* * * * * * * * * * PROCESS_HANGUP * * * * * * * * * * */

process_hangup:
     procedure (Data_ptr);

dcl  code fixed bin (35);
dcl  Data_ptr ptr parameter;

	call hcs_$wakeup (get_process_id_ (), Data_ptr -> event_call_info.data_ptr -> do_info.net_rs.ev_chn, 0, code);
	return;

%include event_call_info;

     end process_hangup;

%page;
%include dial_out_invocation;
%include iocb;
%include iox_dcls;

     end dial_out_;
