/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1990   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



	

/****^  HISTORY COMMENTS:
  1) change(90-01-25,Vu), approve(90-01-25,MCR8153), audit(90-06-21,Huen),
     install(90-09-04,MR12.4-1032):
     The active function for get_pathname will now return quoted string.
                                                   END HISTORY COMMENTS */


/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* N__a_m_e:  get_pathname, gpn							*/
	/*									*/
	/*      This active function, given a reference name or an octal segment number, returns	*/
	/* the full path name of the segment identified by this reference name or segment number.	*/
	/*									*/
	/* U__s_a_g_e									*/
	/*									*/
	/*      [get_pathname ref_name]						*/
	/*									*/
	/*		or							*/
	/*									*/
	/*      [get_pathname octal_segment_no]						*/
	/*									*/
	/* To input a reference name which looks like an octal segment number:		*/
	/*									*/
	/*      [get_pathname -name octal_reference_name]					*/
	/*									*/
	/*		or							*/
	/*									*/
	/*      [get_pathname  -nm  octal_reference_name]					*/
	/*									*/
	/* S__t_a_t_u_s									*/
	/*									*/
	/* 1) Created:  Feb, 1970 by V. L. Voydock.					*/
	/* 2) Modified: Apr, 1973 by G. C. Dixon; accept octal segment numbers, add -name arg.	*/
	/* 3) Modified: 12/15/75 by Steve Herbst to be called as a command.			*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

/**/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


get_pathname: gpn:	procedure;

     dcl						/*	automatic variables			*/
	Larg			fixed bin,	/* length of an input argument.		*/
	Ldirectory		fixed bin,	/* length of directory part of path name.	*/
	Lentry			fixed bin,	/* length of entry part of path name.		*/
	Lret			fixed bin,	/* maximum length of return argument.		*/
	Nargs			fixed bin,	/* number of input arguments.			*/
	Parg			ptr,		/* ptr to input argument.			*/
	Pret			ptr,		/* ptr to return argument.			*/
	Pseg			ptr,		/* ptr to segment whose path name to be returned	*/
	code			fixed bin(35),	/* status code.				*/
	command			bit(1) aligned,	/* ON if called as a command.			*/
	directory			char(168) aligned,	/* directory part of path name.		*/
	entry			char(32) aligned,	/* entry part of path name.			*/
	path			char(168) aligned,	/* path name.				*/
	segno			fixed bin(35);	/* octal segment number.			*/

     dcl						/*	based variables			*/
	arg			char(Larg) based (Parg),
						/* an input argument.			*/
	ret			char(Lret) varying based (Pret);
						/* our return argument.			*/

     dcl						/* 	builtin functions			*/
         (addr, baseptr, index, mod, rtrim, substr)	builtin;


     dcl  gripe entry variable options(variable);		/* either active_fnc_err_ or com_err_		*/

     dcl						/*	entries				*/
	active_fnc_err_		entry options (variable),
	com_err_			entry options(variable),
	cu_$af_return_arg		entry (fixed bin, ptr, fixed bin, fixed bin(35)),
	cu_$arg_count		entry (fixed bin, fixed bin(35)),
	cu_$arg_ptr		entry (fixed bin, ptr, fixed bin, fixed bin(35)),
	cv_oct_check_		entry (char(*), fixed bin(35)) returns (fixed bin(35)),
	hcs_$fs_get_path_name	entry (ptr, char(*) aligned, fixed bin, char(*) aligned, fixed bin(35)),
	hcs_$fs_get_seg_ptr		entry (char(*), ptr, fixed bin(35)),
	ioa_			entry options(variable),
	requote_string_		entry (char (*)) returns (char (*));

     dcl						/*	static variables			*/
         (error_table_$badopt,
	error_table_$bigarg,
	error_table_$invalidsegno,
	error_table_$not_act_fnc,
	error_table_$seg_unknown,
	error_table_$smallarg,
	error_table_$wrong_no_of_args)
				fixed bin(35) ext static,
	proc			char(12) aligned int static init ("get_pathname");
/**/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


	call cu_$af_return_arg (Nargs, Pret, Lret, code);	/* get input arg count; get ptr/lng of return arg	*/
	if code=error_table_$not_act_fnc then do;	/* called as a command 			*/
	     command = "1"b;
	     gripe = com_err_;
	     call cu_$arg_count(Nargs,code);
	     code = 0;
	end;
	else do;
	     command = "0"b;
	     gripe = active_fnc_err_;
	end;
	if code ^= 0 then
	     go to error;

	if Nargs = 0 then				/* make sure we were passed 1 or 2 input args	*/
	     go to wnoa;
	if Nargs > 2 then
	     go to wnoa;

	if Nargs = 2 then do;			/* if 2 input args, then first must be a control	*/
	     call cu_$arg_ptr (1, Parg, Larg, code);	/* arg, either "-name" or "-nm".		*/
	     if arg ^= "-nm" then			/* otherwise, an error has occurred.		*/
		if arg ^= "-name" then
		     go to badopt;
	     call cu_$arg_ptr (2, Parg, Larg, code);	/* get second argument, and treat it as a	*/
	     go to get_ptr;				/* reference name, even tho it may look like a	*/
	     end;					/* segment number.				*/

						/* Only 1 argument, a reference name or segment	*/
	call cu_$arg_ptr (1, Parg, Larg, code);		/* number.  Access this argument.		*/
	if Larg = 0 then				/* make sure its not a null string.		*/
	     go to smallarg;
	segno = cv_oct_check_ (arg, code);		/* see if it is an octal segment number.	*/
	if code = 0 then do;			/* if so, convert segment number to a ptr, and	*/
	     Pseg = baseptr (segno);			/* assume this points to desired segment.	*/
	     go to get_path;
	     end;
	else do;					/* arg not an octal number, so assume it is a	*/
get_ptr:	     if Larg > 32 then			/* reference name, and convert it to a segment ptr*/
		go to bigarg;
	     call hcs_$fs_get_seg_ptr (arg, Pseg, code);
	     if code ^= 0 then
		go to seg_unknown;
	     end;

get_path:	call hcs_$fs_get_path_name (Pseg, directory, Ldirectory, entry, code);
	if code ^= 0 then				/* Convert segment ptr to a path name.  If a	*/
	     go to invalidsegno;			/* reference name was supplied as the argument,	*/
	Lentry = mod (index (entry, " ")+32, 33);	/* then this conversion must work.  Therefore, 	*/
						/* any errors indicate that a segno was supplied	*/
						/* and that there is no segment with that number.	*/
	path = substr(directory,1,Ldirectory) || ">" || substr(entry,1,Lentry);

	if command then call ioa_("^a",path);
	else ret = requote_string_ (rtrim (path));
	return;					/* return the path name as the value of the	*/
						/* active function.				*/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


wnoa:	code = error_table_$wrong_no_of_args;		/* report errors to user.			*/
error:	Parg = addr (entry);
	Larg = 0;
printerr:	call gripe (code, (proc),
	     "  ^a^/^a:^-[^a ref_name]^/or:^3-[^a octal_segment_no]^/or:^3-[^a -name octal_ref_name]",
	     arg, "Calling sequence is", (proc), (proc), (proc));
	     return;

badopt:	code = error_table_$badopt;
	go to printerr;

smallarg:	code = error_table_$smallarg;
	go to argerr;

bigarg:	code = error_table_$bigarg;
argerr:	call gripe (code, (proc), "  ""^a""  cannot be a reference name.", arg);
	return;

seg_unknown:
	call gripe (error_table_$seg_unknown, (proc), "  ^a  is not a known reference name.", arg);
	return;

invalidsegno:
	call gripe (error_table_$invalidsegno, (proc), "  ^o", segno);
	return;

	end get_pathname;
