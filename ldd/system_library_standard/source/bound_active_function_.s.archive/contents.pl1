/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* format: ^inddcls,^indattr,indnoniterend,^indnoniterdo,indend,tree,^case,insnl,comcol61,dclind5,declareind5,delnl */


/****^  HISTORY COMMENTS:
  1) change(86-01-03,Spitzer), approve(86-01-03,MCR7321),
     audit(86-01-06,Blair), install(86-01-07,MR12.0-1005):
     Add -from/-to and -match/-exclude control arguments.
  2) change(86-12-01,GWMay), approve(86-12-01,MCR7575),
     audit(86-12-04,Lippard), install(86-12-09,MR12.0-1238):
     added -newline,-nl,-no_newline,-nnl and -requote_line, -rql control
     arguments.
                                                   END HISTORY COMMENTS */


contents:
     proc () options (variable);

/* active function to return contents of seg as big string. */
/* rewritten to accept archive components pathnames 1/29/82 LAB */

/* Argument processing */
	call cu_$af_return_arg (arg_count, return_ptr, return_len, code);
	if code = error_table_$not_act_fnc
	then do;
	     af_sw = "0"b;
	     complain = com_err_;
	     end;
	else do;
	     af_sw = "1"b;
	     complain = active_fnc_err_;
	     end;

	path = "";

	have_selection_args = "0"b;
	loop = 1;
	to_line, from_line = UNUSED;
	Schange_NL_to_SP = "1"b;
	Schange_NL_to_QUOTE = "0"b;

	from_stringp, to_stringp, seg_ptr, match_listp, exclude_listp, system_free_area_ptr = null ();
	on cleanup call cleaner;

	do while (loop <= arg_count);
	     call cu_$arg_ptr (loop, arg_ptr, arg_len, (0));
	     if /* case */ index (arg, "-") = 1
	     then if arg = "-newline" | arg = "-nl"
		then do;
		     Schange_NL_to_SP = "0"b;
		     Schange_NL_to_QUOTE = "0"b;
		     end;

		else if arg = "-no_newline" | arg = "-nnl"
		then do;
		     Schange_NL_to_SP = "1"b;
		     Schange_NL_to_QUOTE = "0"b;
		     end;

		else if arg = "-requote_line" | arg = "-rql"
		then do;
		     Schange_NL_to_SP = "0"b;
		     Schange_NL_to_QUOTE = "1"b;
		     end;

		else if arg = "-fm" | arg = "-from"
		then if from_line ^= UNUSED | from_stringp ^= null
		     then do;
inconsistent:
			call complain (error_table_$inconsistent, myname, "Only one line range is allowed. ^a", arg);
			goto return_to_caller;
			end;
		     else call get_next_arg ("-from", from_line, from_stringp, from_stringl, from_is_regexp);
		else if arg = "-to"
		then if to_line ^= UNUSED | to_stringp ^= null
		     then goto inconsistent;
		     else call get_next_arg ("-to", to_line, to_stringp, to_stringl, to_is_regexp);
		else if arg = "-match"
		then do;
		     call get_char_arg ("-match", char_arg_ptr, char_arg_len);
		     call add_to_match_exclude_list ("1"b, char_arg_ptr, char_arg_len);
		     end;
		else if arg = "-ex" | arg = "-exclude"
		then do;
		     call get_char_arg ("-exclude", char_arg_ptr, char_arg_len);
		     call add_to_match_exclude_list ("0"b, char_arg_ptr, char_arg_len);
		     end;
		else do;
		     call complain (error_table_$badopt, myname, "^a", arg);
		     goto return_to_caller;
		     end;
	     else if path = ""
	     then path = arg;
	     else do;
		call complain (0, myname, "Pathname already supplied. ^a", arg);
		goto return_to_caller;
		end;
	     loop = loop + 1;
	     end;					/* do while */

	if path = ""
	then do;
	     if af_sw
	     then call active_fnc_err_$suppress_name (0, myname, "Usage:  [contents path {-control_args}]");
	     else call com_err_$suppress_name (0, myname, "Usage:  contents path {-control_args}");
	     goto return_to_caller;
	     end;

/* convert to pathname and/or component name */

	call cu_$arg_ptr (1, arg_ptr, arg_len, 0);
	call expand_pathname_$component (path, dn, en, comp_nm, code);
	if code ^= 0
	then do;
	     call complain (code, myname, "^a", path);
	     return;
	     end;

/* initiate seg */

	call initiate_file_$component (dn, en, comp_nm, R_ACCESS, seg_ptr, bit_count, code);
	if seg_ptr = null
	then do;
	     call complain (code, myname, "^a", pathname_$component (dn, en, comp_nm));
	     return;
	     end;

	seg_len = divide ((bit_count + 8), 9, 21, 0);
	if Schange_NL_to_SP
	then seg_len = length (rtrim (seg, NL));	/* strip trailing newlines */

	if have_selection_args
	then call process_selection;
	else call return_entire_segment;

return_to_caller:
	call cleaner;
	return;
%page;
return_entire_segment:
     proc;

	seg_next_line_ptr = seg_ptr;
	seg_next_line_len = seg_len;
	seg_pos = 0;
	if Schange_NL_to_QUOTE | Schange_NL_to_SP
	then do;
	     do while (seg_pos < seg_len);
		move_len = index (seg_next_line, NL) - length (NL);

		if move_len < 0
		then /* takes care of segs with no NL at the end */
		     move_len = seg_len - seg_pos;

		if Schange_NL_to_QUOTE
		then call put_next_line (requote_string_ (substr (seg_next_line, 1, move_len)));
		else /* Schange_NL_to_SP */
		     call put_next_line (substr (seg_next_line, 1, move_len));

		seg_pos = seg_pos + move_len + length (NL);
		seg_next_line_ptr = addcharno (seg_ptr, seg_pos);
		end;
	     end;
	else call put_next_line ((seg));

	if ^af_sw
	then call iox_$put_chars (iox_$user_output, addr (NL), 1, 0);

	return;
     end return_entire_segment;
%page;
process_selection:
     proc;

dcl  found_a_match bit (1) aligned;
dcl  found_start bit (1) aligned;
dcl  line char (linel) based (linep);
dcl  linecount fixed bin (21);
dcl  linel fixed bin (21);
dcl  linep ptr;
dcl  nlpos fixed bin (21);
dcl  printed_something bit (1) aligned;
dcl  regexp_string char (regexp_stringl) based (regexp_stringp);
dcl  regexp_stringl fixed bin (21);
dcl  regexp_stringp ptr;
dcl  rest_of_segment char (rest_of_segmentl) based (rest_of_segmentp);
dcl  rest_of_segmentl fixed bin (21);
dcl  rest_of_segmentp ptr;

	linecount = 0;
	printed_something = "0"b;
	rest_of_segmentp = seg_ptr;
	rest_of_segmentl = seg_len;

	if (from_stringp = null) & (from_line = UNUSED)
	then found_start = "1"b;			/* -from not specified, start from the beginning */
	else found_start = "0"b;

	if af_sw
	then return_arg = "";

	do while (rest_of_segmentl > 0);
	     linep = rest_of_segmentp;
	     nlpos = index (rest_of_segment, NL);
	     if nlpos = 0
	     then do;
		linel = rest_of_segmentl;
		nlpos = rest_of_segmentl + 1;
		end;
	     else if Schange_NL_to_SP | Schange_NL_to_QUOTE
		then linel = nlpos - 1;
		else linel = nlpos;

	     linecount = linecount + 1;

	     if linel = 0
	     then goto skip_line;			/* blank line */

/* Test to see if "-to NUMBER" or "-from NUMBER" was given. */
	     if from_line ^= UNUSED
	     then if linecount < from_line
		then goto skip_line;		/* not to the starting place yet */
	     if to_line ^= UNUSED
	     then if linecount > to_line
		then goto selection_done;		/* done with the entire segment */

/* Test to see if "-from STRING" was given. STRING may be a regular expression. */
	     if from_stringp ^= null
	     then if ^found_start
		then if from_is_regexp
		     then if search (from_stringp, from_stringl, linep, linel)
			then do;
			     found_start = "1"b;
			     goto test_match_excludes;
			     end;
			else goto skip_line;
		     else goto skip_line;

/* Test to see if "-to STRING" was given. STRING may be a regular expression. */
	     if to_stringp ^= null
	     then if to_is_regexp
		then if search (to_stringp, to_stringl, linep, linel)
		     then nlpos = rest_of_segmentl;	/* process this line, then stop */
		     else ;			/* keep on truckin' */

/* Look at match and exclude strings now. Do the match strings first */

test_match_excludes:
	     if match_listp ^= null
	     then do;
		found_a_match = "0"b;
		do loop = 1 to match_list.count while (^found_a_match);
		     if match_list.regexp (loop)
		     then found_a_match =
			     search (match_list.stringp (loop), match_list.stringlen (loop), linep, linel);
		     else do;
			regexp_stringp = match_list.stringp (loop);
			regexp_stringl = match_list.stringlen (loop);
			found_a_match = (index (line, regexp_string) ^= 0);
			end;
		     end;				/* do loop */
		if ^found_a_match
		then goto skip_line;		/* no match strings were found */
		end;

	     if exclude_listp ^= null
	     then do;
		found_a_match = "0"b;
		do loop = 1 to exclude_list.count while (^found_a_match);
		     if exclude_list.regexp (loop)
		     then found_a_match =
			     search (exclude_list.stringp (loop), exclude_list.stringlen (loop), linep, linel);
		     else do;
			regexp_stringp = exclude_list.stringp (loop);
			regexp_stringl = exclude_list.stringlen (loop);
			found_a_match = (index (line, regexp_string) ^= 0);
			end;
		     end;				/* do loop */
		if found_a_match
		then goto skip_line;		/* at least 1 exclude string matched */
		end;

	     if Schange_NL_to_QUOTE
	     then call put_next_line (requote_string_ ((line)));
	     else call put_next_line (line);

	     printed_something = "1"b;

skip_line:
	     rest_of_segmentl = rest_of_segmentl - nlpos;
	     rest_of_segmentp = addcharno (rest_of_segmentp, nlpos);
	     end;					/* do while */

selection_done:
	if printed_something
	then if ^af_sw
	     then call iox_$put_chars (iox_$user_output, addr (NL), 1, (0));
	     else ;				/* do nothing */
	else if from_line ^= UNUSED & linecount > from_line
	     then call complain (0, myname, "Line ^d not found.", from_line);
	     else if from_stringp ^= null
		then call complain (0, myname, "^[/^a/^;^a^] not matched.", from_is_regexp, from_string);
		else call complain (0, myname, "No lines selected.");

	return;

     end process_selection;
%page;

put_next_line:
     proc (next_line);

dcl  next_line char (*);

/* If we get here, the line is eligible to be printed/returned */

	if af_sw
	then do;

	     if length (return_arg) + length (next_line) + 1 > return_len
	     then do;
		call complain (0, myname, "Return string of ^d characters is too long.",
		     length (return_arg) + length (next_line) + 1);
		return;
		end;

	     else do;
		if Schange_NL_to_SP | Schange_NL_to_QUOTE
		then if return_arg ^= ""
		     then return_arg = return_arg || SP;

		return_arg = return_arg || next_line;
		end;
	     end;
	else do;
	     call iox_$put_chars (iox_$user_output, addr (next_line), length (next_line), (0));

	     if Schange_NL_to_QUOTE | Schange_NL_to_SP
	     then call iox_$put_chars (iox_$user_output, addr (SPACE), 1, (0));
	     end;

	return;
     end put_next_line;
%page;
check_for_regexp:
     proc (l, p, regexp);

dcl  l fixed bin (21) parameter;
dcl  p ptr parameter;
dcl  regexp bit (1) parameter;
dcl  string char (l) based (p);

	if l > 2
	then if (substr (string, 1, 1) = "/") & (substr (string, l, 1) = "/")
	     then do;
		p = addcharno (p, 1);
		l = l - 2;
		regexp = "1"b;
		end;
	     else regexp = "0"b;
	else regexp = "0"b;

	return;
     end check_for_regexp;

search:
     proc (regexpp, regexpl, stringp, stringl) returns (bit (1) aligned);

dcl  error_table_$nomatch fixed bin (35) ext static;
dcl  regexp char (regexpl) based (regexpp);
dcl  regexpl fixed bin (21) parameter;
dcl  regexpp ptr parameter;
dcl  stringl fixed bin (21) parameter;
dcl  stringp ptr parameter;

	call search_file_$silent (regexpp, 1, regexpl, stringp, 1, stringl, (0), (0), code);
	if code = 0
	then return ("1"b);
	else if code = error_table_$nomatch
	     then ;				/* not found */
	     else if code ^= 0
		then do;
		     if code = 2
		     then call complain (0, myname, "Illegal regexp: /^a/", regexp);
		     else call complain (code, myname, "Searching for /^a/", regexp);
		     goto return_to_caller;
		     end;

	return ("0"b);
     end search;

cleaner:
     proc;

	if seg_ptr ^= null
	then call terminate_file_ (seg_ptr, 0, TERM_FILE_TERM, 0);
	if match_listp ^= null
	then free match_list in (system_free_area);
	if exclude_listp ^= null
	then free exclude_list in (system_free_area);

	return;
     end cleaner;
%page;
get_next_arg:
     proc (previous_control_arg, number, p, l, regexp);

dcl  arg char (argl) based (argp);
dcl  argl fixed bin (21);
dcl  argp ptr;
dcl  ent bit (1) aligned;
dcl  l fixed bin (21) parameter;
dcl  number fixed bin (21) parameter;
dcl  p ptr parameter;
dcl  previous_control_arg char (*) parameter;
dcl  regexp bit (1) parameter;

	ent = "1"b;
	goto next_arg_common;

get_char_arg:
     entry (previous_control_arg, p, l);

	ent = "0"b;
	goto next_arg_common;

next_arg_common:
	if loop = arg_count
	then do;
	     call complain (error_table_$noarg, myname, "Following ^a.", previous_control_arg);
	     goto return_to_caller;
	     end;

	loop = loop + 1;
	call cu_$arg_ptr (loop, argp, argl, (0));
	if index (arg, "-") = 1
	then do;
	     call complain (0, myname, "Missing argument following ^a.", previous_control_arg);
	     goto return_to_caller;
	     end;

	if ent
	then do;
	     number = cv_dec_check_ (arg, code);
	     if code = 0
	     then do;
		p = null;
		l = argl;
		end;
	     else do;
		p = argp;
		l = argl;
		call check_for_regexp (l, p, regexp);
		if regexp
		then number = UNUSED;
		else do;
		     call complain (0, myname, "Non-numeric argument ""^a"" following ^a.", arg, previous_control_arg)
			;
		     goto return_to_caller;
		     end;
		end;
	     end;
	else do;
	     number = UNUSED;
	     p = argp;
	     l = argl;
	     end;

	have_selection_args = "1"b;
	return;
     end get_next_arg;
%page;
add_to_match_exclude_list:
     proc (type, argp, argl);

dcl  arg char (argl) based (argp);
dcl  argl fixed bin (21) parameter;
dcl  argp ptr parameter;
dcl  i fixed bin;
dcl  listp ptr;
dcl  type bit (1) aligned parameter;

	if system_free_area_ptr = null
	then system_free_area_ptr = get_system_free_area_ ();
	if type
	then do;
	     if match_listp = null
	     then do;
		match_count = arg_count - loop + 1;
		allocate match_list in (system_free_area) set (match_listp);
		match_list.count = 0;
		end;
	     listp = match_listp;
	     end;
	else do;
	     if exclude_listp = null
	     then do;
		exclude_count = arg_count - loop + 1;
		allocate exclude_list in (system_free_area) set (exclude_listp);
		exclude_list.count = 0;
		end;
	     listp = exclude_listp;
	     end;

	i, listp -> match_list.count = listp -> match_list.count + 1;
	if argl > 1
	then if (substr (arg, 1, 1) = "/") & (substr (arg, argl, 1) = "/")
	     then do;
		listp -> match_list.flags.regexp (i) = "1"b;
		listp -> match_list.stringlen (i) = argl - 2;
		listp -> match_list.stringp (i) = addcharno (argp, 1);
		end;
	     else do;
have_match_exclude_string:
		listp -> match_list.flags.regexp (i) = "0"b;
		listp -> match_list.stringlen (i) = argl;
		listp -> match_list.stringp (i) = argp;
		end;
	else goto have_match_exclude_string;

	return;
     end add_to_match_exclude_list;
%page;
%include terminate_file;
%include access_mode_values;
%page;
dcl  1 exclude_list based (exclude_listp),
       2 count fixed bin,
       2 string (exclude_count refer (exclude_list.count)),
         3 flags aligned,
	 4 regexp bit (1) unaligned,			/* ON = string is a regexp */
	 4 pad bit (35),
         3 stringlen fixed bin (21),			/* length of string */
         3 stringp ptr;				/* pointer to string. If regexp, string is without slashes */

dcl  1 match_list based (match_listp),
       2 count fixed bin,
       2 string (match_count refer (match_list.count)),
         3 flags aligned,
	 4 regexp bit (1) unaligned,			/* ON = string is a regexp */
	 4 pad bit (35),
         3 stringlen fixed bin (21),			/* length of string */
         3 stringp ptr;				/* pointer to string. If regexp, string is without slashes */

dcl  Schange_NL_to_QUOTE bit (1) aligned;
dcl  Schange_NL_to_SP bit (1) aligned;
dcl  (addcharno, addr, divide, index, length, null, rtrim, substr) builtin;
dcl  active_fnc_err_ entry options (variable);
dcl  active_fnc_err_$suppress_name entry options (variable);
dcl  af_sw bit (1);
dcl  arg char (arg_len) based (arg_ptr);
dcl  arg_count fixed bin;
dcl  arg_len fixed bin (21);
dcl  arg_ptr ptr;
dcl  bit_count fixed bin (24);
dcl  char_arg_len fixed bin (21);
dcl  char_arg_ptr ptr;
dcl  cleanup condition;
dcl  code fixed bin (35);
dcl  com_err_ entry () options (variable);
dcl  com_err_$suppress_name entry () options (variable);
dcl  comp_nm char (32);
dcl  complain entry variable options (variable);
dcl  cu_$af_return_arg entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl  cv_dec_check_ entry (char (*), fixed bin (35)) returns (fixed bin (35));
dcl  dn char (168);
dcl  en char (32);
dcl  error_table_$badopt fixed bin (35) ext static;
dcl  error_table_$inconsistent fixed bin (35) ext static;
dcl  error_table_$noarg fixed bin (35) ext static;
dcl  error_table_$not_act_fnc fixed bin (35) ext;
dcl  exclude_count fixed bin (21);
dcl  exclude_listp ptr;
dcl  expand_pathname_$component entry (char (*), char (*), char (*), char (*), fixed bin (35));
dcl  from_is_regexp bit (1);
dcl  from_line fixed bin (21);
dcl  from_string char (from_stringl) based (from_stringp);
dcl  from_stringl fixed bin (21);
dcl  from_stringp ptr;
dcl  get_system_free_area_ entry () returns (ptr);
dcl  have_selection_args bit (1) aligned;
dcl  initiate_file_$component entry (char (*), char (*), char (*), bit (*), ptr, fixed bin (24), fixed bin (35));
dcl  iox_$put_chars entry (ptr, ptr, fixed bin (21), fixed bin (35));
dcl  iox_$user_output ptr external;
dcl  loop fixed bin;
dcl  match_count fixed bin (21);
dcl  match_listp ptr;
dcl  move_len fixed bin (21);
dcl  myname char (32) int static options (constant) init ("contents");
dcl  NL char (1) static options (constant) init ("
");
dcl  path char (168);
dcl  pathname_$component entry (char (*), char (*), char (*)) returns (char (194));
dcl  requote_string_ entry (char (*)) returns (char (*));
dcl  return_arg char (return_len) varying based (return_ptr);
dcl  return_len fixed bin (21);
dcl  return_ptr ptr;
dcl  search_file_$silent
	entry (ptr, fixed bin (21), fixed bin (21), ptr, fixed bin (21), fixed bin (21), fixed bin (21), fixed bin (21),
	fixed bin (35));
dcl  seg char (seg_len) based (seg_ptr) aligned;
dcl  seg_len fixed bin (21);
dcl  seg_next_line char (seg_next_line_len) based (seg_next_line_ptr) aligned;
dcl  seg_next_line_len fixed bin (21);
dcl  seg_next_line_ptr ptr;
dcl  seg_pos fixed bin (21);
dcl  seg_ptr ptr;
dcl  SP char (1) static options (constant) init (" ");
dcl  SPACE char (1) int static options (constant) init (" ");
dcl  system_free_area area based (system_free_area_ptr);
dcl  system_free_area_ptr ptr;
dcl  terminate_file_ entry (ptr, fixed bin (24), bit (*), fixed bin (35));
dcl  to_is_regexp bit (1);
dcl  to_line fixed bin (21);
dcl  to_stringl fixed bin (21);
dcl  to_stringp ptr;
dcl  UNUSED fixed bin int static options (constant) init (-1);

     end contents;
