/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(88-04-28,TLNguyen), approve(88-04-28,MCR7839),
     audit(88-05-04,Lippard), install(88-07-05,MR12.2-1054):
     Remove the working_dir entry from the source, process_dir.pl1.  This entry
     is combined with the print_wdir entry for the purpose of identical
     operation.  For more details, see MTB 775.
                                                   END HISTORY COMMENTS */


process_dir:
pd: procedure options (variable);

/* initially coded in February 1970 by V Voydock */
/* Modified 12/15/75 by Steve Herbst to be callable as a command */
/* Modified 06/09/78 by W. Olin Sibert to add dwd function */
/* Modified 06/07/80, W. Olin Sibert, to reject arguments, and for wd to treat no wdir as error. */
/* Modified 10/15/82, Linda Pugh, to requote return arg, in case directory
   name contains a space. */

dcl  dirname char (168) aligned;
dcl  return_arg char (rl) varying based (rp);
dcl  rp ptr;
dcl (argcount, lng, rl) fixed bin;
dcl  af_sw bit (1) aligned;
dcl  complain entry variable options (variable);
dcl  code fixed bin (35);
dcl  whoami char (32);

dcl  active_fnc_err_ entry options (variable);
dcl  com_err_ entry options (variable);
dcl  cu_$af_return_arg entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  get_pdir_ entry () returns (char (168));
dcl  get_default_wdir_ entry () returns (char (168));
dcl  hcs_$fs_search_get_wdir entry (ptr, fixed bin);
dcl  ioa_ entry options (variable);
dcl  requote_string_ entry (char(*)) returns (char(*));
dcl  user_info_$homedir entry (char (*) aligned);

dcl (error_table_$not_act_fnc,
     error_table_$no_wdir,
     error_table_$too_many_args) fixed bin (35) external static;

dcl (PROCESS_DIR	init ("process_dir"),
     WORKING_DIR	init ("working_dir"),
     HOME_DIR	init ("home_dir"),
     DEFAULT_WDIR	init ("default_wdir")) char (32) internal static options (constant);

dcl (addr, reverse, substr, verify) builtin;

/*  */

/* process_dir: pd: entry options (variable); */

	whoami = PROCESS_DIR;
	goto COMMON;


home_dir:
hd: entry options (variable);

	whoami = HOME_DIR;
	goto COMMON;


default_wdir:
dwd: entry options (variable);

	whoami = DEFAULT_WDIR;
	goto COMMON;


COMMON:	call cu_$af_return_arg (argcount, rp, rl, code);
	if code = error_table_$not_act_fnc then do;
	     af_sw = "0"b;
	     complain = com_err_;
	     end;
	else do;
	     af_sw = "1"b;
	     complain = active_fnc_err_;
	     return_arg = "";
	     end;

	if argcount ^= 0 then do;
	     call complain (error_table_$too_many_args, whoami, "No arguments are permitted.");
	     return;
	     end;

	dirname = "";

	if whoami = PROCESS_DIR then
	     dirname = get_pdir_ ();

	else if whoami = HOME_DIR then
	     call user_info_$homedir (dirname);

	else if whoami = DEFAULT_WDIR then
	     dirname = get_default_wdir_ ();

	else do;					/* only one left is WORKING_DIR */
	     call hcs_$fs_search_get_wdir (addr (dirname), lng);
	     if lng = 0 then do;			/* no wdir.... */
		call complain (error_table_$no_wdir, whoami);
		return;
		end;

	     else if lng < maxlength (dirname) then	/* trim off spaces */
		substr (dirname, lng + 1) = "";
	     end;

	if af_sw then 
               return_arg = requote_string_ (rtrim(dirname));

	else call ioa_ ("^a", dirname);

	return;
	end process_dir;
