/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

ta_upgrade_version_: proc (table_dir, table_name, table_ptr, w_permit, code);

/* This subroutine is used to upgrade a tape_archive table to a new version.
   It is called only from ta_table_mgr_.

   Written 04/11/79 by C. D. Tavares.
   Modified 09/03/80 by CDT for version 3.
   Last modified 83-03-16 by S. G. Harris (UNCA) for version 4.
   Modified 6/83 by S. Krupp for conversion to mtape_.
*/

/* Parameter */

dcl (table_dir char (*),
     table_name char (*),
     w_permit bit (1) aligned,
     code fixed bin (35)) parameter;

/* Automatic */

dcl i fixed bin;
dcl  reason char (256) varying;

/* Based */


/* Entries */

dcl (ioa_, ioa_$rsnnl, com_err_) ext entry options (variable),
     hcs_$set_bc_seg ext entry (pointer, fixed bin (24), fixed bin (35)),
     hcs_$set_safety_sw_seg ext entry (pointer, bit (1) aligned, fixed bin (35));

/* Static */

dcl (error_table_$unimplemented_version,
     error_table_$insufficient_access) ext fixed bin (35) static;

/* Builtin */

dcl (addr, dim, size, unspec) builtin;

%include tape_archive_table_dcl;


/* First check to see that the version number makes any sense at all. */

	if tape_archive_table.version_number > 4 | tape_archive_table.version_number < 1
	then do;
	     code = error_table_$unimplemented_version;
	     call ioa_$rsnnl ("Version ^d is not a defined version.", reason, 0, tape_archive_table.version_number);
	     goto err;
	end;

/* Now we know that the operation we are about to perform makes sense.
   Now see if we can perform it. */

	if ^w_permit
	then do;
	     code = error_table_$insufficient_access;
	     call ioa_$rsnnl ("^/^-^a>^a is an obsolete version and must be upgraded before it may be used.",
		reason, 0, table_dir, table_name);
	     goto err;
	end;


/* Now we perform the upgrade, step by step */


/* Upgrade for version 2 */
/* Version 2 extended the volume_id field from 6 chars. */

          if tape_archive_table.version_number < 2 then begin;

dcl 1 tape_archive_table_v1 aligned based (table_ptr),
    2 nonvolatile_part aligned,
      3 version_number fixed bin,
      3 magic_constant char (8),
      3 compaction_warning_threshold float bin,
      3 auto_compaction_threshold float bin,
      3 table_is_consistent bit (1) unaligned,
      3 lock bit (36),
      3 lock_reason fixed bin,
      3 locker_id char (32),
      3 io_module_name char (32),
      3 future_expansion (8) bit (36),
    2 volatile_part aligned,
      3 n_components fixed bin,
      3 n_component_slots fixed bin,
      3 n_queued_requests fixed bin,
      3 n_request_slots fixed bin,
      3 next_mount_type fixed bin,
      3 date_time_tape_modified bit (36),
      3 date_time_last_compacted bit (36),
      3 total_records fixed bin (35),
      3 dead_records fixed bin (35),
      3 incomplete_write_op_last bit (1),
      3 last_tape_file_no fixed bin,
      3 last_table_no fixed bin,
      3 future_expansion (9) bit (36),
      3 tape_info aligned,
        4 active_set fixed bin,
        4 n_volumes_in_set (2) fixed bin,
        4 volume_set (2) aligned,
	5 volume_id (8) char (6),
      3 component_table (0 refer (tape_archive_table.n_component_slots)) aligned like component,
      3 request_queue (0 refer (tape_archive_table.n_request_slots)) aligned like request;

dcl (i, j) fixed bin;

               do i = tape_archive_table.n_request_slots to 1 by -1;
                    unspec (tape_archive_table.request_queue (i)) = unspec (tape_archive_table_v1.request_queue (i));
               end;

	     do i = tape_archive_table.n_component_slots to 1 by -1;
		unspec (tape_archive_table.component_table (i)) = unspec (tape_archive_table_v1.component_table (i));
	     end;

	     do i = 2 to 1 by -1;
		do j = dim (tape_archive_table_v1.volume_id, 2) to 1 by -1;
		     tape_archive_table.volume_id (i, j) = tape_archive_table_v1.volume_id (i, j);
		end;
	     end;

	     tape_archive_table.version_number = 2;

	     call hcs_$set_bc_seg (table_ptr, size (tape_archive_table) * 36, 0);

	end;


/* Upgrade for version 3. */
/* Version 3 introduced density field */

	if tape_archive_table.version_number < 3 then do;
	     tape_archive_table.tape_info.density (*) = Default_density;
	     tape_archive_table.version_number = 3;
	end;


/* Upgrade for version 4. */

          if tape_archive_table.version_number < 4
          then do;
               tape_archive_table.tape_info.density(1) = tape_archive_table.tape_info.density(2);
               tape_archive_table.version_number = 4;
               call hcs_$set_safety_sw_seg(table_ptr, "1"b, code);
          end;


/* No more versions to upgrade, return. */

	call ioa_ ("tape_archive:  ^a>^a upgraded to version ^d.",
	     table_dir, table_name, tape_archive_table.version_number);

	code = 0;
	return;
%skip(5);
err:	call com_err_ (code, "tape_archive", reason);
	return;
     end ta_upgrade_version_;
