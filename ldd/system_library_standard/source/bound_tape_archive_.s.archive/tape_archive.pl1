/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

tape_archive: ta: proc;

/* This procedure is the main command interface for the tape_archive command.
   The tape_archive command gives a user the facility of keeping a set of
   files on magnetic tape for archival or file transfer purposes, and provides
   an easy interface for extracting, rewriting, deleting, and keeping track
   of these files.

   Written 05/10/77 by C. D. Tavares.
   Modified 09/24/79 by CDT for "." and ".." in direct mode.
   Modified 09/03/80 by CDT for version 3; also to improve output of "."
   request.
   Modified 09/16/80 by CDT to fix error message when no access to table.
   Last modified 83-03-16 by S. G. Harris (UNCA) for version 4.
   Modified 7/83 by S. Krupp for conversion to mtape_
*/

/* INCLUDE FILES */

%include tape_archive_table_dcl;
%page;
%include query_info_;
%page;
%include object_info;
%page;
/* AUTOMATIC */

dcl  al fixed bin,
     alp pointer,
     answer char (4) varying,
     ap pointer,
     arg char (al) based (ap),
     code fixed bin (35),
     delete bit (1) aligned,
     dummy fixed bin,
     dummy_args (100) char (168),
     dummy_args_based (n_dummy_args) char (168) based (addr (dummy_args)),
     me_bc fixed bin (24),
     me_ptr pointer,
     my_date_time char (24),
     n_dummy_args fixed bin,
     force bit (1) aligned,
     i fixed bin,
     input_line char (300),
     key char (12),
     keynum fixed bin,
     library_description char (168),
     n_chars_read fixed bin (21),
     nargs fixed bin,
     p pointer,
     perm_table_ptr pointer,
     prog_dir char (168),
     prog_ent char (32),
     requests_outstanding bit (1) aligned,
     retain_sw bit (1) aligned,
     table_dir char (168),
     table_name char (32),
     temp_table_ptr (1) pointer,
     w_permit bit (1) aligned;

dcl 1 oi aligned automatic like object_info;

/* CONSTANTS */

dcl 1 key_structure aligned static options (constant),
    2 key_names (23) char (12) initial
    ("a", "ad", "adf",				/* 1, 2, 3 */
     "r", "rd", "rdf",				/* 4, 5, 6 */
     "u", "ud", "udf",				/* 7, 8, 9 */
     "x", "xd", "xdf", "xf",				/* 10, 11, 12, 13 */
     "d", "df",					/* 14, 15 */
     "cancel",					/* 16 */
     "t",						/* 17 */
     "compact",					/* 18 */
     "alter",					/* 19 */
     "go",					/* 20 */
     "load_table",					/* 21 */
     "reconstruct",					/* 22 */
     "direct"),					/* 23 */
    2 delete bit (23) initial ("011011011011"b),
    2 force bit (23) initial ("001001001001101"b),
    2 table_must_exist bit (23) initial ("00000011111111111111000"b),
    2 w_permit_needed bit (23) initial ("11111111111111110111001"b);

dcl  allowed_in_input_mode fixed bin static initial (19) options (constant),
     explanation char (168) static initial ("Usage:  ta key table_path filepath1... filepathN.") options (constant);

dcl 1 search_libraries (2) static options (constant),
    2 dir char (168) initial (">sss", ">exl>tape_archive_dir"),
    2 description char (64) initial ("Installed", "Experimental");

/* EXTERNAL STATIC */

dcl (error_table_$badopt,
     error_table_$moderr,
     error_table_$noentry,
     error_table_$long_record) ext fixed bin (35) static,
     iox_$user_input ext pointer static;

/* ENTRIES */

dcl  com_err_ ext entry options (variable),
     com_err_$suppress_name ext entry options (variable),
     command_query_ ext entry options (variable),
     cu_$arg_count ext entry (fixed bin),
     cu_$arg_list_ptr ext entry (pointer),
     cu_$arg_ptr ext entry (fixed bin, pointer, fixed bin, fixed bin (35)),
     cu_$arg_ptr_rel ext entry (fixed bin, pointer, fixed bin, fixed bin (35), pointer),
     cu_$cp ext entry (pointer, fixed bin, fixed bin (35)),
     date_time_ entry (fixed bin (71), char (*)),
     expand_pathname_ ext entry (char (*), char (*), char (*), fixed bin (35)),
     get_temp_segments_ ext entry (char (*), pointer dimension (*), fixed bin (35)),
     hcs_$fs_get_path_name entry (ptr, char (*), fixed bin, char (*), fixed bin (35)),
     hcs_$initiate entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr, fixed bin (35)),
     hcs_$status_mins entry (ptr, fixed bin (2), fixed bin (24), fixed bin (35)),
     hcs_$terminate_noname ext entry (pointer, fixed bin (35)),
     ioa_ ext entry options (variable),
     iox_$get_line ext entry (pointer, pointer, fixed bin (21), fixed bin (21), fixed bin (35)),
     object_info_$display entry (ptr, fixed bin (24), ptr, fixed bin (35)),
     release_temp_segments_ ext entry (char (*), pointer dimension (*), fixed bin (35)),
     sub_err_ ext entry options (variable),
     suffixed_name_$make ext entry (char (*), char (*), char (32), fixed bin (35));

dcl  ta_delete_ ext entry (pointer, char (168) dimension (*), bit (1) aligned, char (*), fixed bin (35)),
     ta_extract_ ext entry (pointer, char (168) dimension (*), bit (1) aligned, bit (1) aligned, char (*), fixed bin (35)),
     ta_list_table_ ext entry (pointer, char (168) dimension (*), char (*), fixed bin (35)),
     ta_load_table_ ext entry (pointer, char (168) dimension (*), char (*), fixed bin (35)),
     ta_process_volume_set_$no_lock ext entry (pointer, char (168) dimension (*), char (*), fixed bin (35)),
     ta_process_volume_set_ ext entry (pointer, char (168) dimension (*), char (*), fixed bin (35)),
     ta_process_volume_set_$dismount ext entry (pointer, bit (1) aligned, fixed bin (35)),
     ta_reconstruct_table_ ext entry (pointer, char (168) dimension (*), char (*), fixed bin (35)),
     ta_replace_ ext entry (pointer, char (168) dimension (*), bit (1) aligned, bit (1) aligned, char (*), fixed bin (35)),
     ta_replace_$append ext entry (pointer, char (168) dimension (*), bit (1) aligned, bit (1) aligned, char (*), fixed bin (35)),
     ta_replace_$update ext entry (pointer, char (168) dimension (*), bit (1) aligned, bit (1) aligned, char (*), fixed bin (35)),
     ta_table_mgr_$alter_attributes ext entry (pointer, char (168) dimension (*), char (*), fixed bin (35)),
     ta_table_mgr_$check_compaction ext entry (pointer, char (*), fixed bin (35)),
     ta_table_mgr_$copy_to_perm ext entry (pointer, pointer, fixed bin (35)),
     ta_table_mgr_$copy_to_temp ext entry (pointer, pointer, fixed bin(35)),
     ta_table_mgr_$create_table ext entry (char (*), char (*), pointer, fixed bin (35)),
     ta_table_mgr_$find_and_verify ext entry (char (*), char (*), pointer, bit (1) aligned, fixed bin (35)),
     ta_table_mgr_$cancel_component ext entry (pointer, char (168) dimension (*), char (*), fixed bin (35)),
     ta_table_mgr_$lock ext entry (pointer, char(*), fixed bin, fixed bin(35)),
     ta_table_mgr_$unlock ext entry (pointer, fixed bin (35)),
     ta_util_$get_next_token ext entry (char (*)) returns (char (168));

/* BUILTINS */

dcl (addr, baseno, baseptr, codeptr, dim, length, null, substr) builtin;

/* CONDITIONS */

dcl (cleanup, program_interrupt) condition;

	table_ptr = null;				/* initialize state of the world */
	query_info.version = query_info_version_5;

	call cu_$arg_ptr (1, ap, al, code);		/* get key */
	if code ^= 0 then do;
print_usage:   call com_err_ (code, "tape_archive", explanation);
	     return;
	end;

	key = arg;

	call cu_$arg_ptr (2, ap, al, code);		/* get table name */
	if code ^= 0 then goto print_usage;

	call expand_pathname_ (arg, table_dir, table_name, code);
	if code ^= 0 then goto print_usage;

	call suffixed_name_$make ((table_name), "ta", table_name, code); /* force the "ta" suffix */
	if code ^= 0 then do;
	     call com_err_ (code, "tape_archive", "^a.ta", table_name);
	     return;
	end;

	do keynum = 1 to dim (key_names, 1) while (key_names (keynum) ^= key);
	end;					/* search to see if key is a known key */

	if keynum > dim (key_names, 1) then do;		/* no, it wasn't */
	     call com_err_ (0, "tape_archive", "^a not a valid key.", key);
	     return;
	end;

	call ta_table_mgr_$find_and_verify (table_dir, table_name, table_ptr, w_permit, code);
						/* find the table if it exists */
	if code ^= 0 then				/* some error */
	     if table_ptr = null then
		if code = error_table_$noentry then;	/* can't find table, but this may not matter */
		else do;				/* some other reason for null ptr */
		     call com_err_ (code, "tape_archive", "^a>^a", table_dir, table_name);
		     return;
		end;
	     else do;				/* bad code but good pointer */
		call hcs_$terminate_noname (table_ptr, code);
		return;				/* error message already printed */
	     end;

	if substr (w_permit_needed, keynum, 1) = "1"b then
	     if ^w_permit then do;			/* doesn't have w access to table and needs it */
		call com_err_ (error_table_$moderr, "tape_archive", "^a>^a", table_dir, table_name);
		call hcs_$terminate_noname (table_ptr, code);
		return;
	     end;
%skip(5);

/* INTERACTIVE MODE SECTION */

	if key = "direct" then do;

	     call cu_$arg_count (nargs);		/* are there any more arguments? */

	     retain_sw = ""b;			/* default is to dismount tapes when done */

	     do i = 3 to nargs;			/* process the extra args */
		call cu_$arg_ptr (i, ap, al, code);	/* get one arg */
		if arg = "-retain" then do;
		     i = i + 1;			/* see if next arg */
		     call cu_$arg_ptr (i, ap, al, code);
		     if i > nargs then retain_sw = "1"b; /* no next arg, but what the heck, give it to him */
		     else if arg = "all" then retain_sw = "1"b;
		end;
		if retain_sw = ""b then do;		/* we didn't recognize something */
		     call com_err_ (error_table_$badopt, "tape_archive", arg);
		     call hcs_$terminate_noname (table_ptr, code);
		     return;
		end;
	     end;

	     if table_ptr = null then do;		/* we have to create a new table */
		call ta_table_mgr_$create_table (table_dir, table_name, table_ptr, code);
		if code ^= 0 then do;		/* oops */
		     call com_err_ (code, "tape_archive", "Creating ^a>^a.", table_dir, table_name);
		     return;
		end;
	     end;

	     temp_table_ptr (1) = null;
	     perm_table_ptr = table_ptr;		/* get set to copy table */

	     on cleanup call cleanerup;

cleanerup:     proc;

		if temp_table_ptr (1) ^= null then
		     call release_temp_segments_ ("tape_archive", temp_table_ptr, 0);
		if perm_table_ptr ^= null then do;
		     call ta_process_volume_set_$dismount (perm_table_ptr, retain_sw, code);
		     call ta_table_mgr_$unlock (perm_table_ptr, code);
		     call hcs_$terminate_noname (perm_table_ptr, 0);
		end;
		retain_sw = ""b;
		perm_table_ptr, table_ptr = null;
	     end cleanerup;

	     call ta_table_mgr_$lock(perm_table_ptr, table_name, Modify, code);
	     if code ^= 0
	     then do;
	          call cleanerup();
		return;
	     end;

	     do dummy = 1, 1 by 1 while (retain_sw);	/* This is a wierd way to get "trailing test" loop */

		call get_temp_segments_ ("tape_archive", temp_table_ptr, code); /* create libensraum */
		if code ^= 0 then do;
		     call com_err_ (code, "tape_archive", "Could not get temp segment.");
		     return;
		end;

		call ta_table_mgr_$copy_to_temp(perm_table_ptr, temp_table_ptr (1), code);
						/* make a copy of the table to fiddle with */
		if code ^= 0 then do;
		     call cleanerup;
		     return;
		end;

		table_ptr = temp_table_ptr (1);	/* remember to use the copy */

		requests_outstanding = ""b;		/* no diffs between perm and temp table yet */

		on program_interrupt goto pi_label;

pi_label:		key = "";

		call ioa_ ("Input.");

		do while (key ^= "go");		/* process requests one by one */

		     code = 1;
		     do while (code ^= 0);		/* get an input line */
			call iox_$get_line (iox_$user_input, addr (input_line), length (input_line),
			     n_chars_read, code);
			if code ^= 0 then
			     if code = error_table_$long_record then
				call com_err_ (code, "tape_archive",
				"Max input line length = ^d chars; line discarded.",
				length (input_line));
			     else do;		/* uglies */
				call com_err_ (code, "tape_archive", "While reading from user_input.");
				call cleanerup;	/* take no chances */
				return;
			     end;

			else if n_chars_read = 1 then /* blank line */
			     code = 1;
		     end;

		     substr (input_line, n_chars_read) = ""; /* kill from the newline out */
		     key = ta_util_$get_next_token (input_line);

		     do keynum = 1 to allowed_in_input_mode while (key ^= key_names (keynum));
		     end;				/* search known keys to see if key is valid */

		     if keynum > allowed_in_input_mode then do; /* not clearly valid */

			if key = "save" then do;	/* This one is ok */
			     call ta_table_mgr_$copy_to_perm(table_ptr, perm_table_ptr, code);
						/* replace perm table with temp table */
			     if code ^= 0 then call sub_err_ (code, "tape_archive", "s", null, 0,
				"Cannot save table, cannot recover.");
			     call ta_table_mgr_$copy_to_temp(perm_table_ptr, temp_table_ptr (1), code);   /* now whip it back to continue */
			     if code ^= 0 then do;
				call com_err_ (code, "tape_archive",
				     "Requests have been saved, but processing cannot continue.");
				call cleanerup;	/* could be worse. */
				return;
			     end;
			     requests_outstanding = ""b; /* back to ground zero again */
			end;

			else if key = "go" then do;	/* spin tapes */
			     dummy_args (1) = "-retain";
			     if retain_sw then
				dummy_args (2) = "all";
			     else dummy_args (2) = "none";

			     do n_dummy_args = 3 to dim (dummy_args, 1) while (input_line ^= "");
				dummy_args (n_dummy_args) = ta_util_$get_next_token (input_line);
			     end;

			     n_dummy_args = n_dummy_args - 1;

			     if input_line ^= "" then do;
				call com_err_ (0, "tape_archive", "Max number of args allowed = ^d; line discarded.",
				     dim (dummy_args, 1) - 2);
				key = "not go";
			     end;

			     else do;
				call ta_table_mgr_$copy_to_perm(table_ptr, perm_table_ptr, code);
						/* first make the requests permanent */
				table_ptr = perm_table_ptr;

				call release_temp_segments_ ("tape_archive", temp_table_ptr, 0);
				temp_table_ptr = null; /* lead us not into temptation */

				call ta_process_volume_set_$no_lock(table_ptr, dummy_args_based, table_name, code); /* roll 'em */
				requests_outstanding = ""b;
			     end;
			end;

			else if key = "quit" | key = "q" then do;

			     if ^requests_outstanding then answer = "yes"; /* we're clean */

			     else do;		/* unsaved requests exist */
				query_info.yes_or_no_sw = "1"b; /* must answer yes or no */
				call command_query_ (addr (query_info), answer, "tape_archive",
				     "Unsaved requests may be lost if you quit now.^/^-Do you still wish to quit?");
			     end;

			     if answer = "yes" then do;
				call ta_table_mgr_$unlock (perm_table_ptr, code); /* unlock the perm table */
				if code ^= 0 then call sub_err_ (code, "tape_archive", "s", null, 0,
				     "Cannot unlock table, cannot recover.");
				call cleanerup;
				return;
			     end;
			end;

			else if key = ".." then
			     call cu_$cp (addr (input_line), length (input_line), 0);

			else if key = "." then do;
here_label:		     me_ptr = baseptr (baseno (codeptr (here_label)));
						/* get pointer to base of my own segment */

			     library_description = "";

			     do i = 1 to dim (search_libraries, 1) while (library_description = "");
				call hcs_$initiate (search_libraries (i).dir, "tape_archive", "", 0, 0, p, code);
				if p ^= null then do;
				     if p = me_ptr then library_description = search_libraries.description (i);
				     call hcs_$terminate_noname (p, 0);
				end;
			     end;

			     if library_description = "" then do;
				call hcs_$fs_get_path_name (me_ptr, prog_dir, 0, prog_ent, code);
				if code ^= 0 then
				     call com_err_ (code, "tape_archive",
				     "Determining pathname of this version of tape_archive.");

				else call ioa_ ("tape_archive version ^d; ^a>^a (private version)",
				     tape_archive_version_4, prog_dir, prog_ent);
			     end;

			     else do;
				oi.version_number = object_info_version_2;

				call hcs_$status_mins (me_ptr, 0, me_bc, code);
				if code = 0 then
				     call object_info_$display (me_ptr, me_bc, addr (oi), code);
				if code ^= 0 then
				     call com_err_ (code, "tape_archive",
				     "Determining version of tape_archive.");

				else do;
				     call date_time_ (oi.compile_time, my_date_time);

				     call ioa_ ("tape_archive; ^a version ^d of ^a.", library_description,
					tape_archive_version_4, my_date_time);
				end;
			     end;
			end;

			else call com_err_$suppress_name (0, "tape_archive", "Not a recognized request:  ^a", key);
		     end;

		     else do;			/* process the good key */

			do i = 1 to dim (dummy_args, 1) while (input_line ^= "");
			     dummy_args (i) = ta_util_$get_next_token (input_line);
						/* split input line into "arguments" */
			end;

			if input_line ^= "" then call com_err_ (0, "tape_archive",
			     "Max number of args allowed = ^d;  line discarded.", dim (dummy_args, 1));

			else do;
			     call process_command_line (i-1, null, dummy_args, code);
			     if code = 0 then requests_outstanding = "1"b;
						/* This errs on the side of safety, because some
						   subroutines don't return nonzero codes for errors */
			end;
		     end;
		end;
	     end;
	end;
%skip(5);

/* ONE-SHOT INVOCATION MODE SECTION */

	else do;
	     call cu_$arg_count (nargs);		/* get extra args */
	     call cu_$arg_list_ptr (alp);
	     call process_command_line (nargs-2, alp, dummy_args, code); /* send 'em on in */
	end;

	if table_ptr ^= null then call hcs_$terminate_noname (table_ptr, code);
	return;

process_command_line: proc (nargs, alp, passed_args, code);

/* This internal subroutine dispatches commands and arguments to the proper subroutine to
   handle that particular key. */

dcl  nargs fixed bin parameter,
     alp pointer parameter,
     passed_args char (168) dimension (*) parameter,
     code fixed bin (35) parameter;

dcl  rest_of_args (nargs) char (168);

	     if alp = null then			/* args are passed in passed_args */
		do i = 1 to nargs;
		rest_of_args (i) = passed_args (i);
	     end;

	     else					/* args are in the arglist at alp */
	     do i = 1 to nargs;
		call cu_$arg_ptr_rel (i+2, ap, al, code, alp);
		rest_of_args (i) = arg;
	     end;

	     if table_ptr = null then			/* no table, should we create? */
		if substr (key_structure.table_must_exist, keynum, 1) then do; /* no, we should complain */
		     call com_err_ (error_table_$noentry, "tape_archive",
			"^a must already exist to process the ""^a"" request.", table_name, key);
		     return;
		end;

		else do;				/* ok to create table, so do it */
		     call ta_table_mgr_$create_table (table_dir, table_name, table_ptr, code);
		     if code ^= 0 then return;	/* it has already complained */
		end;

	     delete = substr (key_structure.delete, keynum, 1);
	     force = substr (key_structure.force, keynum, 1);

	     goto act_on_key (keynum);

act_on_key (1): act_on_key (2): act_on_key (3):		/* a, ad, adf */
	     call ta_replace_$append (table_ptr, rest_of_args, delete, force, table_name, code);
	     goto act_on_key_end;

act_on_key (4): act_on_key (5): act_on_key (6):		/* r, rd, rdf */
	     call ta_replace_ (table_ptr, rest_of_args, delete, force, table_name, code);
	     goto act_on_key_end;

act_on_key (7): act_on_key (8): act_on_key (9):		/* u, ud, udf */
	     call ta_replace_$update (table_ptr, rest_of_args, delete, force, table_name, code);
	     goto act_on_key_end;
						
act_on_key (10): act_on_key (11): act_on_key (12): act_on_key (13):	/* x, xd, xdf, xf */
               call ta_extract_ (table_ptr, rest_of_args, delete, force, table_name, code);
	     goto act_on_key_end;

act_on_key (14): act_on_key (15):			/* d, df */
	     call ta_delete_ (table_ptr, rest_of_args, force, table_name, code);
	     goto act_on_key_end;

act_on_key (16):					/* cancel */
	     call ta_table_mgr_$cancel_component (table_ptr, rest_of_args, table_name, code);
	     goto act_on_key_end;

act_on_key (17):					/* t */
	     call ta_list_table_ (table_ptr, rest_of_args, table_name, code);
	     return;

act_on_key (18):					/* compact */
	     tape_archive_table.next_mount_type = Compact;
	     return;

act_on_key (19):					/* alter */
	     call ta_table_mgr_$alter_attributes (table_ptr, rest_of_args, table_name, code);
	     return;

act_on_key (20):					/* go */
	     call ta_process_volume_set_ (table_ptr, rest_of_args, table_name, code);
	     return;

act_on_key (21):					/* load_table */
	     call ta_load_table_ (table_ptr, rest_of_args, table_name, code);
	     return;

act_on_key (22):					/* reconstruct */
	     call ta_reconstruct_table_ (table_ptr, rest_of_args, table_name, code);
	     return;


act_on_key_end:
	     call ta_table_mgr_$check_compaction (table_ptr, table_name, code);
						/* see if this request deserves an auto compaction or warning */
	     return;

	end process_command_line;

     end tape_archive;
