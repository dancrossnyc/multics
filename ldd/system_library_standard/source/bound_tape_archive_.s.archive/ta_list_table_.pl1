/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

ta_list_table_: proc (table_ptr, arg_array, table_entry, code);

/* This subroutine prints a listing of the contents of a tape archive using
   the information in the table, including pending requests which have not yet
   been processed.

   Written 05/09/77 by C. D. Tavares.
   Modified 04/11/79 by CDT to add control args and clean up interaction
   between control args.
   Modified 09/24/79 by CDT to implement star convention and
   fix up interactions between deleted components and -pending.
   Modified 09/03/80 by CDT to add density field in header.
   Modified 12/9/81 by CDT for highest_mount_type stuff
   Last modified 83-03-16 by S. G. Harris (UNCA) for version 4.
   Modified 6/83 by S. Krupp for conversion to mtape_ (to print vol_type
      rather than io_module in header).
*/

dcl  table_entry char (*) parameter,
     arg_array (*) char (168) parameter,
     code fixed bin (35) parameter;

/* AUTOMATIC */

dcl  brief bit (1) aligned,
     component_control fixed bin,
    (dta_string, dtem_string, dtd_string) char (16),
     dtlc_string char (32),
     dttm_string char (32),
     extra_line char (176),
     header_printed fixed bin,
     header_wanted fixed bin,
    (i, j) fixed bin,
     key_chars char (4) varying,
     long bit (1) aligned,
     match bit (1) aligned,
     mode_char char (1),
     nargs fixed bin,
     n_comp_names fixed bin,
     print_extra_line bit (1) aligned,
     vol_type char(32),
     volset fixed bin;

dcl 1 comp_name_struc (dim (arg_array, 1)) automatic,	/* adjustable */
    2 comp_name char (32),
    2 comp_name_used bit (1) aligned,
    2 comp_name_is_starname bit (1) aligned;


/* STATIC */

dcl  my_lock_id bit (36) aligned static initial ((36)"1"b);


/* CONSTANTS */

dcl (Never_wanted initial (0),			/* header_wanted */
     Whenever_wanted initial (1),
     Always_wanted initial (2),

     No_components initial (0),			/* component_control */
     Pending_components initial (1),
     Usual_components initial (2),
     All_components initial (3),

     No_header initial (0),
     Partial_header initial (1),
     Full_header initial (2)) fixed bin static options (constant);


/* EXTERNAL STATIC */

dcl (error_table_$badopt,
     error_table_$inconsistent) ext fixed bin (35) static;

/* BUILTINS */

dcl (addr, dim, max, null, string, substr) builtin;

/* ENTRIES */

dcl  check_star_name_$entry ext entry (char (*), fixed bin (35)),
     com_err_ ext entry options (variable),
     com_err_$suppress_name ext entry options (variable),
     com_err_var entry variable options (variable),
     date_time_$fstime ext entry (bit (36) aligned, char (*)),
     get_lock_id_ ext entry returns (bit (36) aligned),
     ioa_ ext entry options (variable),
     match_star_name_ ext entry (char (*), char (*), fixed bin (35));

/* INCLUDE FILES */

%include tape_archive_table_dcl;

	if my_lock_id = (36)"1"b then
	     my_lock_id = get_lock_id_ ();

	nargs = dim (arg_array, 1);

	brief, long = ""b;
	n_comp_names = 0;
	component_control = Usual_components;
	header_wanted = Whenever_wanted;
	header_printed = No_header;

	do i = 1 to nargs;
	     if substr (arg_array (i), 1, 1) = "-" then do;
		comp_name_used (i) = "1"b;
		if (arg_array (i) = "-bf") | (arg_array (i) = "-brief") then
		     brief = "1"b;
		else if (arg_array (i) = "-lg") | (arg_array (i) = "-long") then
		     long = "1"b;
		else if (arg_array (i) = "-nhe") | (arg_array (i) = "-no_header") then
		     if header_wanted = Whenever_wanted then
			header_wanted = Never_wanted;
		     else call crump (error_table_$inconsistent, "-header and -no_header");
		else if (arg_array (i) = "-he") | (arg_array (i) = "-header") then
		     if header_wanted = Whenever_wanted then
			header_wanted = Always_wanted;
		     else call crump (error_table_$inconsistent, "-header and -no_header");
		else if (arg_array (i) = "-all") | (arg_array (i) = "-a") then
		     if component_control = Usual_components then
			component_control = All_components;
		     else call crump (error_table_$inconsistent, "-all and -pending");
		else if arg_array (i) = "-pending" then
		     if component_control = Usual_components then
			component_control = Pending_components;
		     else call crump (error_table_$inconsistent, "-all and -pending");
		else call crump (error_table_$badopt, arg_array (i));
	     end;

	     else do;
		call check_star_name_$entry (arg_array (i), code);
		if code > 2 then
		     call crump (code, arg_array (i));
		n_comp_names = n_comp_names + 1;
(nostrz):		comp_name (n_comp_names) = arg_array (i);
		comp_name_used (n_comp_names) = ""b;
		comp_name_is_starname (n_comp_names) = (code > 0);
	     end;
	end;


	if brief & long then
	     call crump (error_table_$inconsistent, "-brief and -long");

	if header_wanted = Always_wanted then
	     if n_comp_names = 0 then
		if component_control = Usual_components then
		     component_control = No_components;


/* Begin examining the table.  We take a small chance of printing garbage by
   doing this operation without locking the table, but the table-of-contents
   operation should be available without write permission to the table
   segment, so we make this concession to convenience.  */


	if header_wanted = Always_wanted then
	     call print_header (Partial_header);

	if component_control = All_components then j = tape_archive_table.n_component_slots;
	else j = tape_archive_table.n_components;
	if j + tape_archive_table.n_queued_requests = 0 then do;
	     if long then call print_header (Partial_header);
	     if header_printed = No_header then
		call ioa_ ("^a is empty.", table_entry);
	     return;
	end;

	if tape_archive_table.n_queued_requests = 0 then
	     if component_control = Pending_components then do;
		if header_printed = No_header then
		     call ioa_ ("No pending requests in ^a.", table_entry);
		return;
	     end;


	do i = 1 to tape_archive_table.n_component_slots;

               component_ptr = addr (tape_archive_table.component_table (i));

	     if component_table (i).entry_status_descriptor.valid | (component_control = All_components) then do;

		match = (component_control > No_components) & (n_comp_names = 0);

		do j = 1 to n_comp_names;
		     if match & comp_name_used (j) then; /* don't bother making ext call */
		     else if comp_name_is_starname (j) then do;
			call match_star_name_ (component_table (i).entry_name, comp_name (j), code);
			if code = 0 then
			     match, comp_name_used (j) = "1"b;
		     end;
		     else if component_table (i).entry_name = comp_name (j) then
			match, comp_name_used (j) = "1"b;
		end;

		if component_control = Pending_components then
		     if component.associated_request_index = 0 then /* no pending replacement or extraction for this one */
			if component.date_time_deleted ^= (36)"1"b then /* and also not in the process of deletion */
			     match = ""b;		/* only wants pending requests */

		if component_control ^= All_components then
		     if component.date_time_deleted then
			if component.date_time_deleted ^= (36)"1"b then /* really deleted, not just pending */
			     match = ""b;		/* doesn't want deleted components */

		if match then do;
		     call print_header (Full_header);
		     print_extra_line = ""b;

		     if component.associated_request_index > 0 then do;
			if component.valid then do;
			     request_ptr =
				addr (request_queue
				(component.associated_request_index));
			     if string (request.requested_ops) then do;
				print_extra_line = "1"b;
				if request.extract then
				     extra_line = "into " ||
				     request.directory_name;
				else extra_line = "from " ||
				     request.directory_name;
			     end;
			end;

			if ^component.valid then
			     mode_char = substr
			     (component.recording_mode, 1, 1);
						/* no mode associated with deaders */
			else if request.extract then
			     mode_char = substr (component.recording_mode, 1, 1);
						/* no mode associated with extractions */
			else mode_char = substr (request.recording_mode, 1, 1);
		     end;

		     else do;
			request_ptr = null;
			mode_char = substr (component.recording_mode, 1, 1);
		     end;

		     if ^component.valid then do;
			key_chars = "---";
			print_extra_line = "1"b;
			if component.date_time_deleted then do;
			     call date_time_$fstime (component.date_time_deleted, dtd_string);
			     extra_line = "deleted " || dtd_string;
			end;
			else extra_line = "subsequently replaced";
		     end;

		     else if component.associated_request_index = 0 then
			if component.date_time_deleted = (36)"1"b then key_chars = "d";
			else key_chars = "";
		     else if request.extract then
			if request.delete then
			     if request.force then key_chars = "xdf";
			     else key_chars = "xd";
			else if request.force then key_chars = "xf";
			else key_chars = "x";
		     else if request.replace then
			if request.delete then
			     if request.force then key_chars = "rdf";
			     else key_chars = "rd";
			else key_chars = "r";
		     else if request.delete then key_chars = "d";
		     else key_chars = "";

		     if long then do;

			call date_time_$fstime (component.date_time_archived, dta_string);
			call date_time_$fstime (component.date_time_branch_modified, dtem_string);
			if component.date_time_dumped = ""b then dtd_string = "";
			else call date_time_$fstime (component.date_time_dumped, dtd_string);

			call ioa_ ("^5a^34a^17a (^1a) ^3d^3x^a^/^-^5x^16a^2(^6x^16a^)^[^/^-^5x(^1a)^;^]",
			     key_chars, component.entry_name,
			     component.tape_file_name, mode_char, component.file_length,
			     component.bitcount_author, dta_string, dtem_string, dtd_string,
			     print_extra_line, extra_line);
		     end;

		     else call ioa_ ("^5a^[^34a(^a)^;^a^]", key_chars,
			print_extra_line, component.entry_name, extra_line);
		end;
	     end;
	end;

	do i = 1 to tape_archive_table.n_request_slots;

	     if request_queue (i).entry_status_descriptor.valid then /* invalid requests are never interesting */
		if request_queue (i).existing_reference = 0 then do; /* if nonzero, we got this above */

		     match = (component_control > No_components) & (n_comp_names = 0);

		     do j = 1 to n_comp_names;
			if match & comp_name_used (j) then; /* don't bother making ext call */
			else if comp_name_is_starname (j) then do;
			     call match_star_name_ (request_queue (i).entry_name, comp_name (j), code);
			     if code = 0 then
				match, comp_name_used (j) = "1"b;
			end;
			else if request_queue (i).entry_name = comp_name (j) then
			     match, comp_name_used (j) = "1"b;
		     end;

		     if match then do;
			call print_header (Full_header);

			request_ptr = addr (tape_archive_table.request_queue (i));

			if request.delete then	/* by now there are only appends left */
			     if request.force then key_chars = "adf";
			     else key_chars = "ad";
			else key_chars = "a";

			call ioa_ ("^5a^34a(from ^a)", key_chars,
			     request.entry_name, request.directory_name);
		     end;
		end;
	end;

	if (header_printed ^= No_header) then com_err_var = com_err_$suppress_name;
	else com_err_var = com_err_;

	do j = 1 to n_comp_names;
	     if ^comp_name_used (j) then do;
		if header_printed = Partial_header then call print_header (Full_header);
		call com_err_var (0, "tape_archive", "^[^5x^;^]^a not found in ^a",
		     (header_printed ^= No_header), arg_array (j), table_entry);
	     end;
	end;

	return;

print_header: proc (part_to_print);

dcl  part_to_print fixed bin parameter;

dcl  i fixed bin;

	     if header_wanted = Never_wanted then goto fini;
	     goto skip_already_printed_part (header_printed);


skip_already_printed_part (0):			/* nothing yet printed */
	     if ^brief | (header_wanted = Always_wanted) then
		call ioa_ ("^/^[No^s^;^d^] component^[^;s^] in ^a^[^2s^;;  ^d pending request^[^;s^]^].
^[No requests^;Only deletions^;Extractions^;Replacements/additions^;Compaction^] pending.^[
^[Both volume sets are^;Primary volume set is^] currently mounted.^;^]",
		(tape_archive_table.n_components = 0),
		tape_archive_table.n_components,
		(tape_archive_table.n_components = 1),
		table_entry,
		(tape_archive_table.n_queued_requests = 0),
		tape_archive_table.n_queued_requests,
		(tape_archive_table.n_queued_requests = 1),
		tape_archive_table.next_mount_type + 1,
		(tape_archive_table.mount_lock = my_lock_id),
		(tape_archive_table.highest_mount_type = Compact));

	     if long then do;
		call ioa_ ("^/Auto compaction limit    = ^.2f^/Compaction warning limit = ^.2f
Waste factor: ^d/^d pages = ^.2f",
		     tape_archive_table.auto_compaction_threshold, tape_archive_table.compaction_warning_threshold,
		     tape_archive_table.dead_records, tape_archive_table.total_records,
		     tape_archive_table.dead_records / max (1, tape_archive_table.total_records));

/* 		call ioa_ ("^/I/O Module:  ^a", tape_archive_table.io_module_name); */

		if tape_archive_table.io_module_name = "tape_ansi_"
		then vol_type = "ansi";
		else vol_type = "ibm";

		if tape_archive_table.date_time_tape_modified = ""b then dttm_string = "Volume set never mounted.";
		else call date_time_$fstime (tape_archive_table.date_time_tape_modified, dttm_string);
		if tape_archive_table.date_time_last_compacted = ""b then dtlc_string = "Volume set never compacted.";
		else call date_time_$fstime (tape_archive_table.date_time_last_compacted, dtlc_string);

		call ioa_ ("^/Date-time tape modified:   ^a^/Date-time tape compacted:  ^a",
		     dttm_string, dtlc_string);

		call ioa_ ("^/Tapes Labeled:^17x^a^/Current volume set density:  ^2x^d bpi^/Alternate volume set density:  ^d bpi",
		     vol_type,
		     tape_archive_table.tape_info.density (tape_archive_table.active_set),
		     tape_archive_table.tape_info.density (3 - tape_archive_table.active_set));

		do i = 1 to 2;
		     if i = 1 then volset = tape_archive_table.active_set;
		     else volset = 3 - tape_archive_table.active_set;

		     call ioa_ ("^/^[Current^;Alternate^] volume set contains ^[no^s^;^d^] tape^[s^;^]^[:^;.^]",
			i, (tape_archive_table.n_volumes_in_set (volset) = 0),
			tape_archive_table.n_volumes_in_set (volset),
			(tape_archive_table.n_volumes_in_set (volset) ^= 1),
			(tape_archive_table.n_volumes_in_set (volset) ^= 0));

		     call ioa_ ("^4x^v( ^a^)", tape_archive_table.n_volumes_in_set (volset),
			tape_archive_table.volume_set (volset).volume_id (*));
		end;

	     end;


skip_already_printed_part (1):			/* most of header already printed */
	     if part_to_print <= 1 then goto fini;

	     if long then
		call ioa_ ("^/REQ  COMPONENT^25xFILENAME (MODE)^7xLEN   BC AUTHOR
^-^5xDATE ARCHIVED^9xDATE MODIFIED^9xDATE DUMPED^/");
	     else if ^brief then call ioa_ ("^/REQ  COMPONENT^/");

skip_already_printed_part (2):			/* already all been done */
fini:
	     header_printed = max (header_printed, part_to_print);

	     return;
	end print_header;
%skip(5);
crump:	proc (code, reason);

dcl (code fixed bin (35),
     reason char (*)) parameter;

	     call com_err_ (code, "tape_archive", reason);
	     goto returner;
	end crump;

returner:
	return;

     end ta_list_table_;
