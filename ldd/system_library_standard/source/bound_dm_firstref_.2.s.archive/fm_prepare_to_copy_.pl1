/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION: 

          This procedure locks the specified file in preparation for
     copying the file and returns information to the caller needed
     to copy the file.  This information includes a file_create_info
     structure for creating the new copy of the file and the length
     of the file.  The file_create_info information is found in
     the file's file_attributes.

          Error handling for this procedure is of note.  There is one
     return statement in this procedure, preceded by the MAIN_RETURN label.
     If no error is encountered, this return statement is reached from
     the previous statement.  In all error cases, control is transferred
     from the ERROR_RETURN procedure to the MAIN_RETURN label to reach
     the return statement.  ERROR_RETURN is called by this procedure
     when an error is encountered which does not need to be logged in
     the dm_system_log.  Generally these are errors which are completely 
     described by the error code.  ERROR_RETURN is also called by the
     fm_sub_error_ on unit.  If the fm_sub_error_ on unit is invoked,
     the error has already been logged, so should not be logged again.
     Errors which have additional information are logged by calling
     LOG_ERROR_RETURN.  LOG_ERROR_RETURN and possibly fm_get_last_ci_num
     signal fm_sub_error_ after logging the error, causing the call to
     ERROR_RETURN via the on unit.
*/

/* HISTORY:
Written by Matthew Pierret, 08/01/84.
     (Extracted from fm_open_.pl1, written by Jeff Ives.)
Modified:
11/13/84 by Matthew Pierret:  Answered audit comments: Added check for 
            saved_validation_level>0 before resetting level.  Added call to
            FINISH in non-error case.  Made to make use of automatic
            file_create_info_ptr variable instead of always using the 
            parameter.  Changed ERROR_RETURN to LOG_ERROR_RETURN,
            RETURN to ERROR_RETURN.  Added description of error handling.
12/06/84 by Matthew Pierret:  Changed to use dm_error_$no_current_transaction 
            instead of dm_error_$fm_no_current_txn. Added must_be_zero
            component in my_ci_parts.
12/17/84 by Matthew Pierret:  Changed to use new file_access_info state 
            variables.
*/

/* format: style2,ind3 */

fm_prepare_to_copy_:
   procedure (p_file_oid, p_file_create_info_ptr, p_last_ci_num, p_code);

/* START OF DECLARATIONS */

/* Parameter */

      dcl	    p_file_oid	       bit (36) aligned parameter;
      dcl	    p_file_create_info_ptr ptr parameter;
      dcl	    p_last_ci_num	       fixed bin (27) parameter;
      dcl	    p_code	       fixed bin (35) parameter;

/* Automatic */

      dcl	    code		       fixed bin (35) init (0);
      dcl	    dir_path	       char (168);
      dcl	    entry_name	       char (32);
      dcl	    full_path_name	       char (168);
      dcl	    saved_validation_level fixed bin init (0);
      dcl	    seg_0_ptr	       ptr init (null ());
      dcl	    1 my_create_info       aligned like file_create_info;
      dcl	    1 my_ci_part	       aligned,
	      2 number_of_parts    fixed bin init (1),
	      2 must_be_zero       fixed bin init (0),
	      2 part	       (1) like ci_parts.part;
      dcl	    1 my_file_access_info  aligned like file_access_info;
      dcl	    1 my_file_attributes   aligned like file_attributes;
      dcl	    1 my_file_oid	       aligned like file_oid;

/* Based */

/* Builtin */

      dcl	    (addr, baseptr, char, fixed, lbound, null, rtrim, substr, unspec)
			       builtin;

/* Condition */

      dcl	    cleanup	       condition;
      dcl	    fm_sub_error_	       condition;

/* Constant */

      dcl	    MYNAME	       init ("fm_prepare_to_copy_") char (32) varying internal static options (constant);
      dcl	    LOCK_WAIT_TIME	       init (1e9) fixed bin (71) internal static options (constant);

/* Entry */

      dcl	    cu_$level_get	       entry (fixed bin);
      dcl	    cu_$level_set	       entry (fixed bin);
      dcl	    expand_pathname_       entry (char (*), char (*), char (*), fixed bin (35));
      dcl	    fm_error_util_$get_code
			       entry () returns (fixed bin (35));
      dcl	    fm_error_util_$signal  entry options (variable);
      dcl	    fm_get_$internal_get   entry (bit (36) aligned, fixed bin (27), ptr, fixed bin (35));
      dcl	    fm_get_last_ci_num     entry (char (168), fixed bin, fixed bin (27));
      dcl	    get_ring_	       entry () returns (fixed bin (3));
      dcl	    hcs_$fs_get_path_name  entry (ptr, char (*), fixed bin, char (*), fixed bin (35));
      dcl	    lock_manager_$lock     entry (bit (36) aligned, fixed bin (27), fixed bin, fixed bin (71), fixed bin,
			       fixed bin (35));

/* External */

      dcl	    dm_data_$current_txn_id
			       bit (36) aligned ext;

      dcl	    dm_error_$bad_file_atrs_length
			       fixed bin (35) ext;
      dcl	    dm_error_$bad_file_atrs_uid
			       fixed bin (35) ext;
      dcl	    dm_error_$bad_file_atrs_ver
			       fixed bin (35) ext;
      dcl	    dm_error_$bad_file_cr_info_ver
			       fixed bin (35) ext;
      dcl	    dm_error_$bad_file_oid fixed bin (35) ext;
      dcl	    dm_error_$file_doesnt_exist
			       fixed bin (35) ext;
      dcl	    dm_error_$no_current_transaction
			       fixed bin (35) ext;

/* END OF DECLARATIONS */
%page;
      on fm_sub_error_ call ERROR_RETURN (fm_error_util_$get_code ());

      unspec (my_file_oid) = p_file_oid;
      file_create_info_ptr = p_file_create_info_ptr;
      if file_create_info.version ^= FILE_CREATE_INFO_VERSION_2
      then call LOG_ERROR_RETURN (dm_error_$bad_file_cr_info_ver, "  Supplied version was ^a.  It should have been ^a.",
	      (file_create_info.version), (FILE_CREATE_INFO_VERSION_2));

/* Get file access info. */

      if my_file_oid.file_access_table_idx < lbound (file_access_table.e, 1)
	 | my_file_oid.file_access_table_idx > file_access_table.h.last_entry
      then call ERROR_RETURN (dm_error_$bad_file_oid);

      my_file_access_info = file_access_table.e (my_file_oid.file_access_table_idx);

      if my_file_access_info.state.entry_state = FILE_ACCESS_INFO_NOT_IN_USE
      then call ERROR_RETURN (dm_error_$bad_file_oid);

      if my_file_access_info.state.file_state ^= FILE_EXISTS
      then call ERROR_RETURN (dm_error_$file_doesnt_exist);

      if my_file_access_info.opens = 0
      then call ERROR_RETURN (dm_error_$bad_file_oid);

      if my_file_oid.uid_tail ^= substr (my_file_access_info.uid, 19, 18)
      then call ERROR_RETURN (dm_error_$bad_file_oid);

      if my_file_access_info.seg_0_num = ""b
      then call ERROR_RETURN (dm_error_$file_doesnt_exist);

      call cu_$level_get (saved_validation_level);
      on cleanup call FINISH;
      call cu_$level_set (get_ring_ ());

/* Get the path name of the file given the segment number of the first component */

      seg_0_ptr = baseptr (my_file_access_info.seg_0_num);

      call hcs_$fs_get_path_name (seg_0_ptr, full_path_name, (0), entry_name, code);
      if code ^= 0
      then call LOG_ERROR_RETURN (code, "^/Unable to get pathname of segment ^a.^s",
	      char (fixed (my_file_access_info.seg_0_num)), "");

      call expand_pathname_ (full_path_name, dir_path, entry_name, code);
      if code ^= 0
      then call ERROR_RETURN (code);


      if my_file_access_info.integrity_switches.transaction
      then
         do;
	  if dm_data_$current_txn_id = ""b
	  then call ERROR_RETURN (dm_error_$no_current_transaction);
         end;

      if my_file_access_info.integrity_switches.lock
      then
         do;
	  call lock_manager_$lock (my_file_access_info.uid, LOCK_ENTIRE_FILE, LOCK_MODE_X, LOCK_WAIT_TIME, (0), code);
	  if code ^= 0
	  then call LOG_ERROR_RETURN (code, "  Unable to lock file ^a, with uid ^a, exclusively.", full_path_name,
		  char (my_file_access_info.uid));
         end;

/* Get the attributes stored in the file. */

      unspec (my_file_attributes) = ""b;
      file_attributes_ptr = addr (my_file_attributes);
      my_ci_part.part (1).offset_in_bytes = CI_0_ADDRESSABLE_LENGTH;
      my_ci_part.part (1).length_in_bytes = CI_ADDRESSABLE_LENGTH - CI_0_ADDRESSABLE_LENGTH;
      my_ci_part.part (1).local_ptr = file_attributes_ptr;

      call fm_get_$internal_get (unspec (my_file_oid), 0, addr (my_ci_part), code);
      if code ^= 0
      then call ERROR_RETURN (code);

      if file_attributes.length_of_attributes ^= CI_ADDRESSABLE_LENGTH - CI_0_ADDRESSABLE_LENGTH - 2
      then call LOG_ERROR_RETURN (dm_error_$bad_file_atrs_length,
	      "  The file_attributes length " || rtrim (full_path_name) || " is ^a.  It should be ^a.",
	      char (file_attributes.length_of_attributes), char (CI_ADDRESSABLE_LENGTH - CI_0_ADDRESSABLE_LENGTH - 2));

      if file_attributes.version ^= FILE_ATTRIBUTES_VERSION_2
      then call LOG_ERROR_RETURN (dm_error_$bad_file_atrs_ver,
	      "  The version of the file attributes is ^a.  It should be ^a.", (file_attributes.version),
	      (FILE_ATTRIBUTES_VERSION_2));

      if file_attributes.unique_id ^= my_file_access_info.uid
      then call LOG_ERROR_RETURN (dm_error_$bad_file_atrs_uid,
	      "  The unique identifier in the file attributes of " || rtrim (full_path_name)
	      || " is ^a.  The UID in CI 0 is ^a.", char (file_attributes.unique_id), char (my_file_access_info.uid));

/* Copy the file attributes into my_create_info. */

      unspec (my_create_info) = ""b;
      my_create_info.version = FILE_CREATE_INFO_VERSION_2;
      my_create_info.ci_size_in_bytes = file_attributes.ci_size_in_bytes;
      my_create_info.blocking_factor = file_attributes.blocking_factor;
      my_create_info.protected = file_attributes.flags.protected;
      my_create_info.no_concurrency = file_attributes.flags.no_concurrency;
      my_create_info.no_rollback = file_attributes.flags.no_rollback;
      my_create_info.ring_brackets (FCI_WRITE_BRACKET_IDX) = file_attributes.ring_brackets.write;
      my_create_info.ring_brackets (FCI_READ_BRACKET_IDX) = file_attributes.ring_brackets.read;

/* Notice that there is no check to see if the caller's validation level     */
/* is within the file_attributes.ring_bracket.read bracket.  This is because */
/* the caller must have been within the read bracket to open the file.  In   */
/* the future, if changable ring brackets are implemented, a check should be */
/* added here in case the ring brackets were lowered since the time of open. */

/* Copy the file_create_info from automatic storage to the caller's buffer. */

      file_create_info = my_create_info;

/* Determine the number of the last control interval. */

      call fm_get_last_ci_num (full_path_name, (my_file_access_info.blocking_factor), p_last_ci_num);

      p_code = 0;
      call FINISH ();

MAIN_RETURN:
      return;

ERROR_RETURN:
   proc (er_p_code);

      dcl	    er_p_code	       fixed bin (35);

      p_code = er_p_code;
      call FINISH ();
      go to MAIN_RETURN;

   end ERROR_RETURN;


LOG_ERROR_RETURN:
   proc (ler_p_code, ler_p_error_message, ler_p_error_message_argument_1, ler_p_error_message_argument_2);

      dcl	    ler_p_code	       fixed bin (35) parameter;
      dcl	    (ler_p_error_message, ler_p_error_message_argument_1, ler_p_error_message_argument_2)
			       char (*) parameter;

      call fm_error_util_$signal (ler_p_code, MYNAME, (FM_ACTION_CANT_RESTART | FM_ACTION_LOG), LOG_SV,
	 ler_p_error_message, ler_p_error_message_argument_1, ler_p_error_message_argument_2);

   end LOG_ERROR_RETURN;


FINISH:
   proc ();

      if saved_validation_level > 0
      then call cu_$level_set (saved_validation_level);

   end FINISH;
%page;
%include dm_file_create_info;
%page;
%include dm_fm_file_oid;
%page;
%include dm_fm_file_access_info;
%page;
%include dm_fm_file_access_tbl;
%page;
%include dm_fm_file_attributes;
%page;
%include dm_fm_sub_error_flags;
%page;
%include dm_lock_modes;
%page;
%include dm_ci_lengths;
%page;
%include dm_ci_parts;
%page;
%include dm_log_sv_codes;

   end fm_prepare_to_copy_;
