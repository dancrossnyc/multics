/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION:

          This module and the module fm_attribute_ together contain
     all operations which deal with Data Management files as file system
     objects.  These operations are the eventual targets of entries in
     fs_util_, the file system utility for handling file system objects
     and extended objects. fm_attribute_fref_ contains those operations
     which require the process to be using Data Management - per-process
     initialization will be executed if it has not already been executed.
     fm_attribute_ contains those operations which do not
     require the process to be using Data Management.
*/

/* HISTORY:

Written by Matthew Pierret, 11/13/84.
Modified:
12/19/84 by Matthew Pierret:  Implemented set_ring_brackets and get_switch.
            Changed all entries to call INIT_FOR_FINISH to initialize variables
            which are tested in the FINISH procedure.
01/03/85 by Matthew Pierret:  Changed to check for benign error code
            dm_error_$file_already_open.
01/04/85 by Matthew C. Pierret:  Changed to set file_pathname in
            set_ring_brackets via the pathname_ function.
03/07/85 by Matthew C. Pierret:  In response to audit comments, added a call
            to ERROR_RETURN following the call to hcs_$chname_file if the
            returned code is non-zero; added declaration of sum and unspec;
            removed declartions of un-used variables.  Also, added use of
            ERROR_RETURN in other parts of the chname_file entry.
*/

/* format: style2,ind3 */

fm_attribute_fref_$get_switch:
   procedure (p_dirname, p_ename, p_switch_name, p_switch_value, p_code);


/* START OF DECLARATIONS */

/* Parameter */

      dcl	    p_dirname	       char (*) parameter;	/* directory containing the DM file */
      dcl	    p_ename	       char (*) parameter;	/* name of the DM file */
      dcl	    p_code	       fixed bin (35) parameter;

      dcl	    p_old_name	       char (*) parameter;	/* name to be deleted */
      dcl	    p_new_name	       char (*) parameter;	/* name to be added */

      dcl	    p_ring_brackets	       (2) fixed bin (3) parameter;
						/* new ring brackets */
      dcl	    p_switch_name	       char (*) parameter;
      dcl	    p_switch_value	       bit (1) parameter;

/* Automatic */

      dcl	    dirname	       char (256);
      dcl	    file_pathname	       char (256);
      dcl	    ename		       char (32);
      dcl	    old_name	       char (32);
      dcl	    new_name	       char (32);
      dcl	    switch_name	       char (64);
      dcl	    component_name	       char (32);

      dcl	    callers_validation_level
			       init (-1) fixed bin;
      dcl	    code		       fixed bin (35);
      dcl	    entry_idx	       fixed bin;
      dcl	    file_uid	       bit (36) aligned;
      dcl	    fs_ring_brackets       (3) fixed bin (3);
      dcl	    my_file_oid	       aligned bit (36) init (""b);
      dcl	    number_of_opens	       fixed bin;
      dcl	    ring_brackets	       (2) fixed bin (3);
      dcl	    ring_brackets_bc       fixed bin (24);
      dcl	    sys_pn_tbl_idx	       fixed bin;

      dcl	    local_msf_ptr	       ptr;

      dcl	    1 my_file_attributes   aligned like file_attributes;

/* Based */

/* Builtins */

      dcl	    (addr, hbound, lbound, null, sum, unspec)
			       builtin;

/* Condition */

      dcl	    cleanup	       condition;

/* Constant */

      dcl	    (
	    LOCK_WAIT_TIME	       init (1000000000) fixed bin (71),
	    STAR_BRANCHES_ONLY     init (2) fixed bin (2)
	    )		       internal static options (constant);

/* Entry */

      dcl	    cu_$level_get	       entry (fixed bin);
      dcl	    cu_$level_set	       entry (fixed bin);
      dcl	    file_manager_$close    entry (bit (36) aligned, fixed bin (35));
      dcl	    file_manager_$open     entry (char (*), char (*), bit (36) aligned, fixed bin (35));
      dcl	    fm_get_$internal_get   entry (bit (36) aligned, fixed bin (27), ptr, fixed bin (35));
      dcl	    fm_put_$internal_put   entry (bit (36) aligned, fixed bin (27), ptr, fixed bin (35));
      dcl	    fm_sys_pn_tbl_util_$opens
			       entry (bit (36) aligned, fixed bin, fixed bin);
      dcl	    fm_validate_$check_write_ring_bracket
			       entry (char (*), char (*), fixed bin (35));
      dcl	    get_ring_	       entry returns (fixed bin);
      dcl	    get_system_free_area_  entry () returns (ptr);
      dcl	    hcs_$chname_file       entry (char (*), char (*), char (*), char (*), fixed bin (35));
      dcl	    hcs_$set_bc	       entry (char (*), char (*), fixed bin (24), fixed bin (35));
      dcl	    hcs_$set_ring_brackets entry (char (*), char (*), (3) fixed bin (3), fixed bin (35));
      dcl	    hcs_$star_	       entry (char (*), char (*), fixed bin (2), ptr, fixed bin, ptr, ptr, fixed bin (35));
      dcl	    lock_manager_$lock     entry (bit (36) aligned, fixed bin (27), fixed bin, fixed bin (71), fixed bin,
			       fixed bin (35));
      dcl	    msf_manager_$close     entry (ptr);
      dcl	    msf_manager_$open      entry (char (*), char (*), ptr, fixed bin (35));
      dcl	    pathname_	       entry (char (*), char (*)) returns (char (168));

/* External */

      dcl	    dm_error_$bad_file_atrs_ver
			       fixed bin (35) ext;
      dcl	    dm_error_$file_already_open
			       fixed bin (35) ext;
      dcl	    dm_error_$file_in_use  fixed bin (35) ext;
      dcl	    dm_error_$file_not_dm_type
			       fixed bin (35) ext;
      dcl	    dm_error_$fm_cant_remove_name
			       fixed bin (35) ext;
      dcl	    error_table_$argerr    fixed bin (35) ext;
      dcl	    error_table_$invalid_ring_brackets
			       fixed bin (35) ext;
      dcl	    error_table_$not_seg_type
			       fixed bin (35) ext;

%page;
/* The actual entry is the main procedure statement. 
   It is repeated here for clarity.

get_switch:
   entry (p_dirname, p_ename, p_switch_name, p_switch_value, p_code);
*/

      dirname = p_dirname;
      ename = p_ename;
      switch_name = p_switch_name;
      p_switch_value = ""b;
      p_code, code = 0;

      call INIT_FOR_FINISH ();

      if switch_name = "prot"
      then switch_name = "protection";
      else if switch_name = "conc"
      then switch_name = "concurrency";
      else if switch_name = "rlb"
      then switch_name = "rollback";
      if switch_name ^= "protection" & switch_name ^= "concurrency" & switch_name ^= "rollback"
      then call ERROR_RETURN (error_table_$argerr);	/* This is the code returned the get_switch entry of other managers */

      call cu_$level_get (callers_validation_level);
      on cleanup call FINISH ();

      call file_manager_$open (dirname, ename, my_file_oid, code);
      if code = dm_error_$file_already_open
      then code = 0;
      if code ^= 0
      then call ERROR_RETURN (code);

      call cu_$level_set (get_ring_ ());

      call GET_FILE_ATTRIBUTES (my_file_oid, addr (my_file_attributes));

      if switch_name = "protection"
      then p_switch_value = my_file_attributes.flags.protected;
      else if switch_name = "concurrency"
      then p_switch_value = my_file_attributes.flags.protected & ^my_file_attributes.flags.no_concurrency;
      else if switch_name = "rollback"
      then p_switch_value = my_file_attributes.flags.protected & ^my_file_attributes.flags.no_rollback;

      call cu_$level_set (callers_validation_level);

      call file_manager_$close (my_file_oid, code);
      if code ^= 0
      then call ERROR_RETURN (code);

      call RETURN ();


%page;
/* Changes the names on a DM file.  Renames are not supported. */

chname_file:
   entry (p_dirname, p_ename, p_old_name, p_new_name, p_code);

      dirname = p_dirname;
      ename = p_ename;
      old_name = p_old_name;
      new_name = p_new_name;
      p_code, code = 0;

      call INIT_FOR_FINISH ();

      if old_name ^= ""
      then call ERROR_RETURN (dm_error_$fm_cant_remove_name);
						/* mustn't delete name */

      call fm_validate_$check_write_ring_bracket (dirname, ename, code);
      if code ^= 0
      then if code = error_table_$not_seg_type
	 then call ERROR_RETURN (dm_error_$file_not_dm_type);
	 else call ERROR_RETURN (code);

      call cu_$level_get (callers_validation_level);
      on cleanup call FINISH ();
      call cu_$level_set (get_ring_ ());

      call hcs_$chname_file (dirname, ename, old_name, new_name, code);

      if code ^= 0
      then call ERROR_RETURN (code);

      call cu_$level_set (callers_validation_level);
      call RETURN ();
%page;
/* DESCRIPTION OF set_ring_brackets:

        This entry sets the extended ring brackets of a DM file. Because 
   there exists no faulting mechanism as for hardware ring brackets, the
   ring brackets can not be made more restrictive and still have all
   current users of the file honor the new ring brackets.  For this reason,
   this entry only allows one to change ring brackets to a higher level,
   e.g., 4,4 to 4,5.
   */

set_ring_brackets:
   entry (p_dirname, p_ename, p_ring_brackets, p_code);

      dirname = p_dirname;
      ename = p_ename;
      ring_brackets (*) = p_ring_brackets (*);
      code = 0;
      unspec (my_file_attributes) = ""b;
      call INIT_FOR_FINISH ();
      on cleanup call FINISH ();

      call cu_$level_get (callers_validation_level);

      call file_manager_$open (dirname, ename, my_file_oid, code);
      if code = dm_error_$file_already_open
      then code = 0;
      if code ^= 0
      then call ERROR_RETURN (code);

      /*** Make sure that no one else is using this file. Do so by 
      locking the file exclusively, preventing any new openings.  
      Then check the system pathname table to see if
      our opening is the only current opening for this file.  
      If not, we have to give up. */

      file_uid = file_access_table.e (addr (my_file_oid) -> file_oid.file_access_table_idx).uid;
      sys_pn_tbl_idx = file_access_table.e (addr (my_file_oid) -> file_oid.file_access_table_idx).pn_tbl_idx;

      call lock_manager_$lock (file_uid, LOCK_ENTIRE_FILE, LOCK_MODE_X, 1e9, (0), code);
      if code ^= 0
      then call ERROR_RETURN (code);
      call fm_sys_pn_tbl_util_$opens (file_uid, sys_pn_tbl_idx, number_of_opens);
      if number_of_opens > 1
      then call ERROR_RETURN (dm_error_$file_in_use);

      /*** Get the current ring brackets from the file_attributes. */

      call cu_$level_set (get_ring_ ());

      call GET_FILE_ATTRIBUTES (my_file_oid, addr (my_file_attributes));

/* Verify that the given ring brackets are acceptable. */

      if ring_brackets (1) > ring_brackets (2) | get_ring_ () > ring_brackets (1)
	 | callers_validation_level > ring_brackets (1)
      then call ERROR_RETURN (error_table_$invalid_ring_brackets);

      /*** Set the new ring brackets in the file's file_attributes. */

      my_file_attributes.ring_brackets.write = ring_brackets (1);
      my_file_attributes.ring_brackets.read = ring_brackets (2);

      call PUT_FILE_ATTRIBUTES (my_file_oid, addr (my_file_attributes));

      /*** Set the actual file system ring brackets on the components
      to conform to the new DM file ring brackets.  This means leaving
      the write bracket alone and setting the read bracket to the
      level of the DM file read bracket. */

      fs_ring_brackets (1) = get_ring_ ();
      fs_ring_brackets (2) = ring_brackets (2);
      fs_ring_brackets (3) = ring_brackets (2);

      file_pathname = pathname_ (dirname, ename);

      call hcs_$star_ (file_pathname, "*", STAR_BRANCHES_ONLY, get_system_free_area_ (), star_entry_count, star_entry_ptr,
	 star_names_ptr, code);
      if code ^= 0
      then call ERROR_RETURN (code);
      do entry_idx = lbound (star_entries, 1) to hbound (star_entries, 1);
         component_name = star_names (star_entries (entry_idx).nindex);
         call hcs_$set_ring_brackets (file_pathname, component_name, fs_ring_brackets, code);
         if code ^= 0
         then call ERROR_RETURN (code);
      end;

      /*** Now re-open the file MSF to reset fcb.rbs */

      local_msf_ptr = file_access_table.e (addr (my_file_oid) -> file_oid.file_access_table_idx).msf_ptr;
      file_access_table.e (addr (my_file_oid) -> file_oid.file_access_table_idx).msf_ptr = null;
      call msf_manager_$close (local_msf_ptr);
      call msf_manager_$open (dirname, ename, local_msf_ptr, code);
      if code ^= 0
      then call ERROR_RETURN (code);
      file_access_table.e (addr (my_file_oid) -> file_oid.file_access_table_idx).msf_ptr = local_msf_ptr;

      /*** Store an encoded version of the ring brackets in the
      bit count of the first component. */

      ring_brackets_bc = 8 * ring_brackets (1) + ring_brackets (2);
      call hcs_$set_bc (file_pathname, "0", ring_brackets_bc, code);
      if code ^= 0
      then call ERROR_RETURN (code);

/* Now finish up and return. */

      call cu_$level_set (callers_validation_level);

      call file_manager_$close (my_file_oid, code);
      if code ^= 0
      then call ERROR_RETURN (code);

      call RETURN ();

%page;
MAIN_RETURN:
      return;

RETURN:
   proc ();

      call FINISH ();
      go to MAIN_RETURN;

   end RETURN;

ERROR_RETURN:
   proc (er_p_code);

      dcl	    er_p_code	       fixed bin (35) parameter;

      p_code = er_p_code;
      call FINISH ();
      go to MAIN_RETURN;

   end ERROR_RETURN;

FINISH:
   proc ();

      if local_msf_ptr = null ()
      then
         do;
	  call msf_manager_$open (dirname, ename, local_msf_ptr, (0));
	  file_access_table.e (addr (my_file_oid) -> file_oid.file_access_table_idx).msf_ptr = local_msf_ptr;
         end;

      if star_names_ptr ^= null
      then free star_names;
      if star_entry_ptr ^= null
      then free star_entries;

      if my_file_oid ^= ""b
      then call file_manager_$close (my_file_oid, (0));

      if callers_validation_level > 0
      then call cu_$level_set (callers_validation_level);

   end FINISH;

INIT_FOR_FINISH:
   proc ();

      star_names_ptr = null ();
      star_entry_ptr = null ();
      my_file_oid = ""b;
      local_msf_ptr = addr (local_msf_ptr);		/* Must be non-null for FINISH */
      callers_validation_level = 0;

   end INIT_FOR_FINISH;
%page;
GET_FILE_ATTRIBUTES:
   proc (gfa_p_file_oid, gfa_p_file_attributes_ptr);

/* DESCRIPTION of GET_FILE_ATTRIBUTES:

        Get the file_attributes structure of file indicated by gfa_p_file_oid,
   putting it at gfa_p_file_attributes_ptr.  The location in the file of the 
   file_attributes structure is between the end of the addressable portion
   of control interval 0 and the trailer of that control interval.
*/

      dcl	    gfa_p_file_attributes_ptr
			       ptr parameter;
      dcl	    gfa_p_file_oid	       bit (36) aligned parameter;
      dcl	    gfa_code	       fixed bin (35);
      dcl	    1 gfa_ci_parts	       aligned,
	      2 number_of_parts    fixed bin init (1),
	      2 mbz	       fixed bin init (0),
	      2 part	       (1) like ci_parts.part;

      gfa_ci_parts.part (1).offset_in_bytes = CI_0_ADDRESSABLE_LENGTH;
      gfa_ci_parts.part (1).length_in_bytes = CI_ADDRESSABLE_LENGTH - CI_0_ADDRESSABLE_LENGTH;
      gfa_ci_parts.part (1).local_ptr = gfa_p_file_attributes_ptr;

      call fm_get_$internal_get (gfa_p_file_oid, 0, addr (gfa_ci_parts), gfa_code);
      if gfa_code ^= 0
      then call ERROR_RETURN (gfa_code);

      if gfa_p_file_attributes_ptr -> file_attributes.version ^= FILE_ATTRIBUTES_VERSION_2
      then call ERROR_RETURN (dm_error_$bad_file_atrs_ver);

      return;

   end GET_FILE_ATTRIBUTES;
%page;
PUT_FILE_ATTRIBUTES:
   proc (pfa_p_file_oid, pfa_p_file_attributes_ptr);

/* DESCRIPTION of PUT_FILE_ATTRIBUTES:

        Put the file_attributes structure pointed to by 
   pfs_p_file_attributes_ptr in the appropriate location in the file
   indicated by pfa_p_file_oid.  The location in the file of the 
   file_attributes structure is between the end of the addressable portion
   of control interval 0 and the trailer of that control interval.
*/

      dcl	    pfa_p_file_attributes_ptr
			       ptr parameter;
      dcl	    pfa_p_file_oid	       bit (36) aligned parameter;
      dcl	    pfa_code	       fixed bin (35);
      dcl	    1 pfa_ci_parts	       aligned,
	      2 number_of_parts    fixed bin init (1),
	      2 mbz	       fixed bin init (0),
	      2 part	       (1) like ci_parts.part;

      pfa_ci_parts.part (1).offset_in_bytes = CI_0_ADDRESSABLE_LENGTH;
      pfa_ci_parts.part (1).length_in_bytes = CI_ADDRESSABLE_LENGTH - CI_0_ADDRESSABLE_LENGTH;
      pfa_ci_parts.part (1).local_ptr = pfa_p_file_attributes_ptr;

      call fm_put_$internal_put (pfa_p_file_oid, 0, addr (pfa_ci_parts), pfa_code);
      if pfa_code ^= 0
      then call ERROR_RETURN (pfa_code);

      return;

   end PUT_FILE_ATTRIBUTES;
%page;
%include dm_fm_file_access_tbl;
%page;
%include dm_fm_file_access_info;
%page;
%include dm_fm_file_attributes;
%page;
%include dm_fm_file_oid;
%page;
%include dm_ci_parts;
%page;
%include dm_ci_lengths;
%page;
%include star_structures;
%page;
%include dm_lock_modes;

   end fm_attribute_fref_$get_switch;
