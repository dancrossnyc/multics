/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */
/* format: style4,ifthenstmt,^indproc,^indcomtxt */
/*---------------*/

tm_generate_txn_id: proc (A_tdt_ptr) returns (bit (36) aligned);

/* DESCRIPTION:

   This  procedure  generates  a unique transaction identifier from the
   TDT's last_uid field.
*/

/* HISTORY:

Written by Steve Herbst 08/06/82
Modified:
08/16/82 by Steve Herbst: Changed to use consolidated dm_tm_tdt.incl.pl1
	with entry declarations.
10/17/84 by Steve Herbst: Changed in response to audit comments.
11/27/84 by Steve Herbst: Changed further in response to audit comments.
*/

/* DECLARATIONS */

/* Parameters */

dcl A_tdt_ptr ptr;

/* Constants */

/* Based */

dcl fixed_bin_uid fixed bin (27) unsigned unaligned based;

/* Static */

/* Automatic */

dcl txn_id bit (36) aligned;
dcl system_id bit (9) unaligned;
dcl (last_uid, new_uid) bit (27) unaligned;

/* External */

dcl dm_data_$system_id bit (9) ext;
dcl error_table_$unimplemented_version fixed bin (35) ext;

/* Entries */

dcl sub_err_ entry options (variable);

/* Builtins */

dcl (addr, null, stacq, unspec) builtin;

/* Conditions */

/* END OF DECLARATIONS */
%page;
/* (Since stacq is used to check the TDT's last_uid, the TDT need not be locked.) */

	tm_tdt_ptr = A_tdt_ptr;

	if tm_tdt.version ^= TM_TDT_VERSION_3 then
	     call sub_err_ (error_table_$unimplemented_version, "tm_generate_txn_id", ACTION_CANT_RESTART,
		null, 0, "Expected TDT version ^a, found ^a.", TM_TDT_VERSION_3, tm_tdt.version);

	system_id = unspec (dm_data_$system_id);

REPEAT_IF_LAST_UID_CHANGES:

	last_uid = tm_tdt.last_uid;

	addr (new_uid) -> fixed_bin_uid = addr (last_uid) -> fixed_bin_uid + 1;
						/* increment the last_uid value from the TDT */

	if stacq (tm_tdt.last_uid, new_uid, last_uid) then txn_id = system_id || new_uid;

	else go to REPEAT_IF_LAST_UID_CHANGES;		/* tm_tdt.last_uid has been changed meanwhile */
						/* by another process */

	return (txn_id);
%page;
%include dm_tm_tdt;
%page;
%include sub_err_flags;


end tm_generate_txn_id;
