/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */
/* format: style4,ifthenstmt,^indproc,^indcomtxt */
/*---------------*/

tm_begin: proc (A_mode, A_bj_opening_id, A_txn_id, A_code);

/* DESCRIPTION:

   This procedure implements transaction_manager_$begin_txn, which creates a
   new transaction in the "in progress" state. Information about the
   transaction is kept in the user's TDT entry.
*/

/* HISTORY:

Written by Steve Herbst, 08/04/82
Modified:
08/16/82 by Steve Herbst: Changed to use dm_data_$tm_tdt_ptr and new
	dm_tm_tdt.incl.pl1
08/18/82 by Steve Herbst: Added $tm_priv_begin
08/23/82 by Steve Herbst: Fixed to initialize A_code.
09/10/82 by Steve Herbst: Changed to eliminate locking.
01/19/83 by Steve Herbst: Added mode check.
03/23/84 by Steve Herbst: ADdded $begins_off and $begins_on for use during
	initialization.
05/13/83 by Steve Herbst: Changed A_mode to fixed bin (17) aligned.
05/25/83 by Steve Herbst: Made to log $begins_off and $begins_on.
09/25/84 by Steve Herbst: Changed in response to audit comments.
11/27/84 by Steve Herbst: Changed further in response to audit comments.
03/05/85 by Steve Herbst: Replaced dm_log_ with dm_misc_util_$log.
*/

/* DECLARATIONS */

/* Parameters */

dcl A_mode fixed bin (17) aligned parameter;
dcl A_bj_opening_id bit (36) parameter;
dcl A_txn_id bit (36) aligned parameter;
dcl A_code fixed bin (35) parameter;

/* Constants */

dcl ME char (32) int static options (constant) init ("tm_begin");

/* Based */

/* Static */

/* Automatic */

dcl txn_id bit (36) aligned;
dcl txn_index fixed bin;
dcl code fixed bin (35);

/* External */

dcl dm_data_$current_txn_id bit (36) aligned ext;
dcl dm_data_$current_txn_index fixed bin ext;
dcl dm_data_$my_process_id bit (36) ext;
dcl dm_data_$my_tdt_index fixed bin ext;
dcl dm_data_$tm_tdt_ptr ptr external;
dcl dm_error_$invalid_mode fixed bin (35) ext;
dcl dm_error_$no_begins fixed bin (35) ext;
dcl dm_error_$not_own_transaction fixed bin (35) ext;
dcl dm_error_$transaction_in_progress fixed bin (35) ext;
dcl dm_error_$transaction_suspended fixed bin (35) ext;
dcl error_table_$unimplemented_version fixed bin (35) ext;

/* Entries */

dcl before_journal_manager_$write_begin_mark entry (bit (36) aligned, fixed bin, bit (36), fixed bin (35));
dcl dm_misc_util_$log entry options (variable);
dcl tm_cleanup entry (ptr, fixed bin);
dcl tm_generate_txn_id entry (ptr) returns (bit (36) aligned);

/* Builtins */

dcl (clock, unspec) builtin;

/* Conditions */

dcl cleanup condition;

/* END OF DECLARATIONS */
%page;
	A_txn_id = "0"b;
	A_code = 0;

	tm_tdt_ptr = dm_data_$tm_tdt_ptr;

	if tm_tdt.version ^= TM_TDT_VERSION_3 then call ERROR_RETURN (error_table_$unimplemented_version);

	if tm_tdt.no_begins then call ERROR_RETURN (dm_error_$no_begins);

	txn_index = dm_data_$my_tdt_index;
	tm_tdt_entry_ptr = addr (tm_tdt.entry (txn_index));

	if tm_tdt_entry.txn_id ^= "0"b then
	     if tm_tdt_entry.suspended_sw then call ERROR_RETURN (dm_error_$transaction_suspended);
	     else call ERROR_RETURN (dm_error_$transaction_in_progress);

	if tm_tdt_entry.process_id ^= dm_data_$my_process_id then
	     call ERROR_RETURN (dm_error_$not_own_transaction);

	if A_mode < LOWEST_MODE | A_mode > HIGHEST_MODE then
	     call ERROR_RETURN (dm_error_$invalid_mode);

	tm_tdt_entry.state = 0;			/* for cleanup in case we are interrupted */

	on cleanup begin;
	     call tm_cleanup (tm_tdt_ptr, txn_index);
	end;

	unspec (tm_tdt_entry.transaction) = "0"b;
	tm_tdt_entry.date_time_created = clock ();
	tm_tdt_entry.mode = A_mode;

	tm_tdt_entry.state = TM_BEGIN_STARTING_STATE;

	txn_id = tm_generate_txn_id (tm_tdt_ptr);
	call before_journal_manager_$write_begin_mark (txn_id, txn_index, A_bj_opening_id, code);
	if code ^= 0 then do;
	     tm_tdt_entry.state = 0;
	     unspec (tm_tdt_entry.transaction) = "0"b;
	     call ERROR_RETURN (code);
	end;

	tm_tdt_entry.txn_id = txn_id;			/* transaction is now official */

	dm_data_$current_txn_id = txn_id;
	dm_data_$current_txn_index = txn_index;

	tm_tdt_entry.state = TM_IN_PROGRESS_STATE;	/* nothing to clean up now */

	A_txn_id = txn_id;

RETURN:
	return;
%page;
begins_off: entry;

	tm_tdt_ptr = dm_data_$tm_tdt_ptr;

	tm_tdt.no_begins = "1"b;

	call dm_misc_util_$log (INFORM_SV, "Turning off transaction begins.");

	return;




begins_on: entry;

	tm_tdt_ptr = dm_data_$tm_tdt_ptr;

	tm_tdt.no_begins = "0"b;

	call dm_misc_util_$log (INFORM_SV, "Turning on transaction begins.");

	return;
%page;
ERROR_RETURN: proc (P_code);

dcl P_code fixed bin (35);

	A_code = P_code;
	go to RETURN;

end ERROR_RETURN;
%page;
%include dm_tm_tdt;
%page;
%include dm_tm_states;
%page;
%include dm_tm_modes;
%page;
%include dm_log_sv_codes;


end tm_begin;
