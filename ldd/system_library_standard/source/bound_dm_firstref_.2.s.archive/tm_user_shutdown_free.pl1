/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   *********************************************************** */
/* format: style4,ifthenstmt,^indproc,^indcomtxt */
/*---------------*/

tm_user_shutdown_free: proc (A_code);

/* DESCRIPTION:

	This program frees any TDT entries held by the calling process.  It
     is only to be called as part of user shutdown just before resetting the
     first reference traps for the DM ring managers.  If an entry is not
     really free (tid ^= 0), the entry is not freed, and an error code is
     returned.
*/

/* HISTORY:

Written by Steve Herbst, 05/01/84.
Modified:
05/10/84 by Lee A. Newcomb: Changed to match on user process id instead of
	  user name.project to prevent multi-process conflicts.
10/23/84 by Steve Herbst: Changed in response to audit comments.
03/05/85 by Steve Herbst: Replaced dm_log_ with dm_misc_util_$log.
*/

/* DECLARATIONS */

/* Parameters */

dcl A_code fixed bin (35) parameter;

/* Constants */

dcl ME char (32) int static options (constant) init ("tm_user_shutdown_free");

/* Automatic */

dcl my_process_id bit (36);
dcl txn_index fixed bin;
dcl code fixed bin (35);

/* External */

dcl dm_data_$tm_tdt_ptr ptr ext;
dcl dm_error_$tdt_entry_not_freed fixed bin (35) ext;
dcl error_table_$unimplemented_version fixed bin (35) ext;

/* Entries */

dcl dm_misc_util_$log entry options (variable);
dcl get_process_id_ entry () returns (bit (36));
dcl ipc_$delete_ev_chn entry (fixed bin (71), fixed bin (35));
dcl user_info_ entry (char (*), char (*));

/* Builtins */

dcl (rtrim, stacq, unspec) builtin;

/* Conditions */

/* END OF DECLARATIONS */
%page;
	A_code = 0;

	tm_tdt_ptr = dm_data_$tm_tdt_ptr;

	if tm_tdt.version ^= TM_TDT_VERSION_3 then do;
	     A_code = error_table_$unimplemented_version;
	     call dm_misc_util_$log (ERROR_SV, A_code, ME);
	     return;
	end;

	my_process_id = get_process_id_ ();

	do txn_index = 1 to tm_tdt.entry_count;

	     tm_tdt_entry_ptr = addr (tm_tdt.entry (txn_index));

	     if tm_tdt_entry.process_id = my_process_id & ^tm_tdt_entry.abandoned_sw then do;

		if tm_tdt_entry.txn_id ^= "0"b then do;
		     A_code = dm_error_$tdt_entry_not_freed;
		     call dm_misc_util_$log (ERROR_SV, A_code, ME);
		end;
		else do;
		     tm_tdt_entry.owner_name = "";
		     if tm_tdt_entry.event_channel ^= 0 then do;
			call ipc_$delete_ev_chn (tm_tdt_entry.event_channel, code);
			if code ^= 0 then call dm_misc_util_$log (ERROR_SV, code, ME,
				"Error freeing event channel ^w for user ^a",
				tm_tdt_entry.event_channel, tm_tdt_entry.owner_name);
		     end;

		     unspec (tm_tdt_entry.transaction) = "0"b;

		     if stacq (tm_tdt_entry.process_id, "0"b, tm_tdt_entry.process_id) then ;
						/* free TDT entry indivisibly */
		end;
	     end;
	end;

	return;
%page;
%include dm_tm_tdt;
%page;
%include dm_log_sv_codes;


end tm_user_shutdown_free;
