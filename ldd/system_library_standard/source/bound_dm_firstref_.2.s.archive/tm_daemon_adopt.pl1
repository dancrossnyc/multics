/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */
/* format: style4,ifthenstmt,^indproc,^indcomtxt */
/*---------------*/

tm_daemon_adopt: proc (A_txn_id, A_txn_index, A_code);

/* DESCRIPTION:

   The entry point tm_daemon_adopt does the necessary creating of journals and
   work spaces prior to operating on a transaction AS IF the calling process
   were the process that created the transaction, i.e., on behalf of another
   process.  It sets various dm_data_ values and then calls bjm_$adopt.  The
   entry point tm_daemon_abandon reverses the process  by  restoring  the
   dm_data_ values to innocuous values (like zero) and calling bjm_$abandon.

/* HISTORY:

Written by Steve Herbst, 10/12/82.
Modified:
12/10/82 by Steve Herbst: Made to call lock_manager_$(adopt abandon).
01/13/83 by Steve Herbst: Added $tm_kill and made $tm_abandon work on the
	user's owwn transaction.
02/22/83 by Steve Herbst: Changed to not call lock_manager_$abandon.
03/14/83 by Steve Herbst: Fixed argument validation.
04/29/83 by Steve Herbst: Changed to call file_manager_$adopt before
	calling before_journal_manager_$adopt.
05/03/83 by Steve Heerbst: Changed $tm_kill to kill immediately if same
	process & transaction not abandoned.
05/04/83 by Steve Herbst: Split tm_adopt into tm_daemon_adopt (this module) and
	tm_abandon (for users to call).
08/11/83 by Steve Herbst: Fixed to restore dm_data_$my_tdt_index since Daemon
	might want to begin a txn later.
10/19/84 by Steve Herbst: Changed in response to audit comments.


/* DECLARATIONS */

/* Parameters */

dcl  A_txn_id bit (36) aligned parameter;
dcl  A_txn_index fixed bin parameter;
dcl  A_code fixed bin (35) parameter;



/* Constants */

/* Based */

/* Static */

/* Automatic */

dcl (txn_id, saved_current_txn_id) bit (36) aligned;
dcl (txn_index, saved_current_txn_index, saved_my_tdt_index) fixed bin;
dcl code fixed bin (35);

/* External */

dcl dm_data_$current_txn_id bit (36) aligned external;
dcl dm_data_$current_txn_index fixed bin external;
dcl dm_data_$my_tdt_index fixed bin external;
dcl dm_data_$tm_tdt_ptr ptr external;

/* Entries */

dcl before_journal_manager_$abandon entry (bit (36) aligned, fixed bin, fixed bin (35));
dcl before_journal_manager_$adopt entry (bit (36) aligned, fixed bin, fixed bin (35));
dcl file_manager_$adopt entry (bit (36) aligned, fixed bin, fixed bin (35));

/* Builtins */

/* Conditions */

dcl cleanup condition;

/* END OF DECLARATIONS */
%page;
	A_code = 0;
	txn_id = A_txn_id;
	txn_index = A_txn_index;
	tm_tdt_ptr = dm_data_$tm_tdt_ptr;

	saved_current_txn_id = dm_data_$current_txn_id;
	saved_current_txn_index = dm_data_$current_txn_index;
	saved_my_tdt_index = dm_data_$my_tdt_index;

	on cleanup call RESTORE_DM_DATA ();

	dm_data_$current_txn_id = "0"b;
	dm_data_$current_txn_index = 0;

	call file_manager_$adopt (txn_id, txn_index, A_code);
	if A_code ^= 0 then do;
	     call RESTORE_DM_DATA ();
	     return;
	end;

	call before_journal_manager_$adopt (txn_id, txn_index, A_code);
	if A_code ^= 0 then do;
	     call RESTORE_DM_DATA ();
	     return;
	end;

	dm_data_$current_txn_id = txn_id;
	dm_data_$current_txn_index, dm_data_$my_tdt_index = txn_index;

RETURN:
	return;
%page;
tm_daemon_abandon: entry (A_txn_id, A_txn_index, A_code);

	A_code = 0;
	txn_id = A_txn_id;
	txn_index = A_txn_index;
	tm_tdt_ptr = dm_data_$tm_tdt_ptr;

	dm_data_$current_txn_id = "0"b;

	call before_journal_manager_$abandon (txn_id, txn_index, code);
	if code ^= 0 then A_code = code;

	dm_data_$current_txn_index = 0;

	return;
%page;
RESTORE_DM_DATA: proc;

	dm_data_$current_txn_id = saved_current_txn_id;
	dm_data_$current_txn_index = saved_current_txn_index;
	dm_data_$my_tdt_index = saved_my_tdt_index;

end RESTORE_DM_DATA;
%page;
%include dm_tm_tdt;


end tm_daemon_adopt;
