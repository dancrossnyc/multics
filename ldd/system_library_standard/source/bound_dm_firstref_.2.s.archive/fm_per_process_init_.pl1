/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION:

     This routine is called by the first reference trap on fm_inner_ring_tv_
     It initializes the values of fm_data_ upon which file_manager_ depends
     Most file_manager_ primitives cannot be executed validly until after this
     routine has run.
*/

/* HISTORY:

Written by Matthew, 06/25/84.
   (Moved from fm_open_.pl1.)
Modified:
11/16/84 by Matthew Pierret:  Answered audit comments: replaced fm_data_$me
            with MYNAME constant, removed useless rv variable.
11/22/84 by Lee A. Newcomb:  Removed obsolete dm_common_init_ references.
*/

/* format: style2,ind3 */
%page;
fm_per_process_init_:
   proc ();

/* START OF DECLARATIONS */
/* Parameter */
/* Automatic */

      dcl	    code		       fixed bin (35) init (0);
      dcl	    saved_validation_level fixed bin init (8);

/* Based */
/* Builtin */

      dcl	    (null, unspec)	       builtin;

/* Condition */

      dcl	    cleanup	       condition;

/* Constant */


      dcl	    MYNAME	       init ("fm_per_process_init_") char (32) varying internal static options (constant);

/* Entry */

      dcl	    cu_$level_get	       entry (fixed bin);
      dcl	    cu_$level_set	       entry (fixed bin);
      dcl	    dm_per_system_$initiate
			       entry (char (*), char (*), ptr);
      dcl	    fm_put_$init_txn_tbl   entry (fixed bin (35));
      dcl	    get_ring_	       entry () returns (fixed bin (3));
      dcl	    sub_err_	       entry () options (variable);

/* External */

      dcl	    dm_error_$fm_bad_sys_pn_tbl_ver
			       fixed bin (35) ext;

/* END OF DECLARATIONS */
%page;
      call cu_$level_get (saved_validation_level);
      on cleanup call cu_$level_set (saved_validation_level);
      call cu_$level_set (get_ring_ ());

      call dm_per_system_$initiate (fm_data_$sys_pn_tbl_name, "", fm_data_$sys_pn_tbl_ptr);
						/* dm_per_system_ will return a non-null pointer */

      if sys_pn_tbl.h.version ^= SYS_PN_TBL_VERSION_1
      then call sub_err_ (dm_error_$fm_bad_sys_pn_tbl_ver, MYNAME, ACTION_CANT_RESTART, null (), (0),
	      "  The version number in ^a was ^w.  It should have been ^w.", fm_data_$sys_pn_tbl_name,
	      sys_pn_tbl.h.version, SYS_PN_TBL_VERSION_1);

      allocate file_access_table;

      unspec (file_access_table) = ""b;
      file_access_table.h.version = FILE_ACCESS_TABLE_VERSION_1;
      file_access_table.h.post_transaction_actions = -1;

      call fm_put_$init_txn_tbl (code);
      if code ^= 0
      then call sub_err_ (code, MYNAME, ACTION_CANT_RESTART, null (), (0), " returned by fm_put_$init_txn_tbl.");

      call cu_$level_set (saved_validation_level);

      return;
%page;
%include dm_fm_file_access_info;
%page;
%include dm_fm_file_access_tbl;
%page;
%include dm_fm_sys_pn_tbl;
%page;
%include sub_err_flags;
   end fm_per_process_init_;
