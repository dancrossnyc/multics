/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION:

          This module contains the create and delete operations, each of
     which is a number of calls to entries in fm_create_open_ and 
     fm_delete_close_ to do the actual work.
*/

/* HISTORY:

Designed by Andre' Bensoussan, 01/01/82.
Written by Jeffrey D. Ives, 10/01/82.
Modified:
05/31/83 by Lindsey L. Spratt:  Fixed the $delete entry to force the access if
            possible, when necessary.
01/06/84 by Matthew Pierret:  Changed $delete to force "rw" access to the file
            by calling file_manager_$add_acl_entries.  Forcing access should
            really be moved to fm_open_ some day.
06/07/84 by Lee Baldwin:  Renamed dm_error_$fm_sys_pn_tbl_ver_bad to
            $fm_bad_sys_pn_tbl_ver.
08/02/84 by Matthew Pierret:  Changed name of fm_open_ to fm_create_open_
            and fm_delete_close, as appropriate.
11/12/84 by Matthew Pierret:  Moved open_by_uid, open_by_uid_after_crash
            find_old_uid_pn_table and end_of_crash_recovery entries to
            fm_open_by_uid_. Renamed several variables.  Moved include files
            and external declarations out of internal procedures.
12/26/84 by Matthew Pierret:  Changed to use modern calling sequence of
            file_manager_$add_acl_entries, which only accepts a general_acl.
*/


/* format: style2,ind3,ll79,^indnoniterdo,indnoniterend */
fm_combos_$create:
   proc (p_dir_path, p_entry_name, p_file_create_info_ptr, p_code);

/* START OF DECLARATIONS */

/* Parameters */

      dcl	    p_code	       fixed bin (35) parm;
      dcl	    p_dir_path	       char (*) parm;
      dcl	    p_entry_name	       char (*) parm;
      dcl	    p_file_create_info_ptr ptr parm;

/* Automatic */

      dcl	    code		       fixed bin (35);
      dcl	    dir_path	       char (168);
      dcl	    entry_name	       char (32);
      dcl	    file_create_info_ptr   ptr;
      dcl	    my_oid	       bit (36) aligned;

/* Static */

/* Conditions */

      dcl	    cleanup	       condition;

/* Based */

/* Builtin */

      dcl	    addr		       builtin;

/* External Variables */

      dcl	    dm_error_$file_already_exists
			       fixed bin (35) ext;
      dcl	    dm_error_$file_already_open
			       fixed bin (35) ext;

/* External Entries */

      dcl	    file_manager_$add_acl_entries
			       entry (char (*), char (*), ptr,
			       fixed bin (35));
      dcl	    get_group_id_$tag_star entry () returns (char (32));
      dcl	    fm_create_open_$create_open
			       entry (char (*), char (*), ptr,
			       bit (36) aligned, fixed bin (35));
      dcl	    fm_delete_close_$delete_close
			       entry (bit (36) aligned, fixed bin (35));
      dcl	    fm_create_open_$open   entry (char (*), char (*),
			       bit (36) aligned, fixed bin (35));
      dcl	    fm_delete_close_$close entry (bit (36) aligned, fixed bin (35));

/* END OF DECLARATIONS */
%page;
/* The actual entry is the main procedure statement.  It is repeated here for 
   clarity.

create:
  entry (p_dir_path, p_entry_name, p_file_create_info_ptr, p_code);
*/

      dir_path = p_dir_path;
      entry_name = p_entry_name;
      file_create_info_ptr = p_file_create_info_ptr;
      p_code, code = 0;
      my_oid = ""b;

      on cleanup call FINISH ();

      call fm_create_open_$create_open (dir_path, entry_name,
	 file_create_info_ptr, my_oid, code);
      if my_oid = ""b
      then call ERROR_RETURN (code);
      else if code ^= 0
      then if code = dm_error_$file_already_open
	 then call ERROR_RETURN (dm_error_$file_already_exists);
	 else call ERROR_RETURN (code);

      call fm_delete_close_$close (my_oid, code);
      if code ^= 0
      then call ERROR_RETURN (code);

MAIN_RETURN:
      return;
%page;


delete:
   entry (p_dir_path, p_entry_name, p_code);

      dir_path = p_dir_path;
      entry_name = p_entry_name;
      p_code, code = 0;
      my_oid = ""b;

      call SET_RW_ACCESS (dir_path, entry_name);

      on cleanup call FINISH;

      call fm_create_open_$open (dir_path, entry_name, my_oid, code);
      if my_oid = ""b
      then call ERROR_RETURN (code);
      else code = 0;

      call fm_delete_close_$delete_close (my_oid, code);
      if code ^= 0
      then call ERROR_RETURN (code);
      else go to MAIN_RETURN;
%page;
ERROR_RETURN:
   proc (er_p_code);

      dcl	    er_p_code	       fixed bin (35) parameter;

      p_code = er_p_code;
      call FINISH ();
      go to MAIN_RETURN;

   end ERROR_RETURN;

FINISH:
   proc ();

      if my_oid ^= ""b
      then call fm_delete_close_$close (my_oid, (0));

   end FINISH;
%page;
SET_RW_ACCESS:
   proc (sra_p_dir_name, sra_p_entry_name);

/* This routine sets "read" and "write" access to the components of 
   the file to ensure no access problems while opening or deleting
   the file. */

      dcl	    (sra_p_dir_name, sra_p_entry_name)
			       char (*);
      dcl	    sra_code	       fixed bin (35);
      dcl	    1 sra_general_acl      aligned,
	      2 version	       char (8) aligned
			       init (GENERAL_ACL_VERSION_1),
	      2 count	       fixed bin init (1),
	      2 entries	       (1) like general_acl_entry;

      sra_code = 0;
      sra_general_acl.entries (1).access_name = get_group_id_$tag_star ();
      sra_general_acl.entries (1).mode = RW_ACCESS;
      sra_general_acl.entries (1).status_code = 0;

      call file_manager_$add_acl_entries (sra_p_dir_name, sra_p_entry_name,
	 addr (sra_general_acl), sra_code);
      if sra_code ^= 0
      then call ERROR_RETURN (sra_code);

   end SET_RW_ACCESS;
%page;
%include access_mode_values;
%page;
%include acl_structures;

   end fm_combos_$create;
