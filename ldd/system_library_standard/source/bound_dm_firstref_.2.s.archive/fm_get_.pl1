/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION

   This routine implements the file manager's read primitives.
*/

/* HISTORY:

Written by Bensoussan-Ives, 06/22/82.
   01/28/82 Andre Bensoussan, Specification and design.
   06/22/82 Jeffrey D. Ives, Design and coding.
Modified:
01/31/84 by Matthew Pierret:  Added the get_ci_ptr and terminate_ci_ptr
            entries.  The latter is currently a no-op.  get_ci_ptr returns
            a pointer to the addressable portion of a control interval, 
            allowing for faster retrievals overall many common retrieval
            patterns.  Also changed the format comment to simply style2.
03/16/84 by Matthew Pierret:  Changed $get_ci_ptr to return
            dm_error_$ci_not_allocated if the control interval has not been
            allocated instead of returning a pointer to a page of zeroes.
            If the control interval is part of a non-existent segment, there
            is no page to which to point.
05/21/84 by R. Michael Tague:  Created $simple_get, which is an entry for
	  getting from just one control interval without having to set
	  up a ci_parts structure.
06/07/84 by Lee Baldwin:  Renamed a bunch of dm_error_ codes.
07/27/84 by Matthew Pierret:  Changed to check read ring bracket.  Also added
            RETURN and ERROR_RETURN procedures, replacing the statements
            "go to GOOD_RETURN", "go to BAD_RETURN" and "go to <error>".
            Changed to use my_file_access_info instead of proc_ad.
11/12/84 by Matthew Pierret:  Made the proc statement be fm_get_$get so
            there are no useless entrypoints. Added get_ci_ptr_exclusive.
            Made several changes to the dm_ci* include files.
12/17/84 by Matthew Pierret:  Changed to use the new state variables in
            my_file_access_info, and to return dm_error_$bad_file_oid if
            entry_state is not IN_USE and dm_error_$file_doesnt_exist if
            file_state is not FIEL_EXISTS. Also, changed LOCK_WAIT_TIME to
            1e9 from 1e8. Changed to use dm_error_$no_current_transaction
            instead of dm_error_$fm_no_current_txn.
04/22/85 by R. Michael Tague:  Added $internal_get_ci_ptr that will return a
	  pointer even if the file is not open.
*/

/* format: style2 */

fm_get_$get:
     procedure (p_file_oid, p_ci_num, p_ci_parts_ptr, p_code);

/* START OF DECLARATIONS */

/* Parameters */

	dcl     p_ci_num		 fixed bin (27) parm;
	dcl     p_ci_parts_ptr	 ptr parm;
	dcl     p_ci_ptr		 ptr parameter;
	dcl     p_single_part_length	 fixed bin (17) parm;
	dcl     p_single_part_offset	 fixed bin (17) parm;
	dcl     p_single_part_ptr	 ptr parm;
	dcl     p_code		 fixed bin (35) parm;
	dcl     p_file_oid		 bit (36) aligned parm;

	dcl     1 p_ci_header	 aligned parm,
		2 stamp		 bit (72),
		2 id		 bit (72);


/* Automatic */

	dcl     caller_validation_level
				 fixed bin init (0);/* for cleanup */
	dcl     ci_num		 fixed bin (27);
	dcl     code		 fixed bin (35) init (0);
	dcl     component_num	 fixed bin;
	dcl     just_get_ci_ptr	 bit (1) aligned;
	dcl     just_get_header	 bit aligned;
	dcl     lock_mode		 fixed bin;
	dcl     min_opens		 fixed bin;
	dcl     number_of_addressable_bytes
				 fixed bin;
	dcl     page_num		 fixed bin;
	dcl     part_idx		 fixed bin;
	dcl     part_length		 fixed bin;
	dcl     part_offset		 fixed bin;

	dcl     part_ptr		 ptr init (null ());
	dcl     my_ci_id		 fixed bin (71);
	dcl     my_ci_stamp		 fixed bin (71);
	dcl     1 my_file_oid	 aligned like file_oid;

	dcl     1 single_ci_part	 aligned,
		2 number_of_parts	 fixed bin (17) init (1),
		2 part		 (1) like ci_parts.part;

	dcl     1 effective_integrity_switches
				 aligned like file_access_info.integrity_switches;
	dcl     1 my_file_access_info	 aligned like file_access_info;

/* Constant */

	dcl     LOCK_WAIT_TIME	 init (1000000000) fixed bin (71) internal static options (constant);
	dcl     NULL_INTEGRITY_SWITCHES
				 init ((5)"0"b) bit (5) aligned static options (constant);
	dcl     GET_INTEGRITY_SWITCHES init ((5)"1"b) bit (5) aligned static options (constant);


/* Conditions */

	dcl     cleanup		 condition;

/* Based */

	dcl     part_buffer		 char (part_length) based (part_ptr);

	dcl     1 seg		 aligned based,
		2 pages		 (0:254),
		  3 double_words	 (512) fixed bin (71);

/* Builtin */

	dcl     (addr, baseno, baseptr, bin, divide, hbound, lbound, multiply, null, string, substr, unspec)
				 builtin;

/* External Variables */

	dcl     dm_data_$current_txn_id
				 bit (36) aligned ext;
	dcl     dm_error_$bad_file_oid fixed bin (35) ext;
	dcl     dm_error_$ci_bad_hdr_arg_ver
				 fixed bin (35) ext;
	dcl     dm_error_$ci_bad_hdr_id_num
				 fixed bin (35) ext;
	dcl     dm_error_$ci_bad_hdr_size_code
				 fixed bin (35) ext;
	dcl     dm_error_$ci_bad_hdr_uid
				 fixed bin (35) ext;
	dcl     dm_error_$ci_bad_stamp_ver
				 fixed bin (35) ext;
	dcl     dm_error_$ci_not_allocated
				 fixed bin (35) ext;
	dcl     dm_error_$ci_num_oob	 fixed bin (35) ext;
	dcl     dm_error_$ci_num_parts_neg
				 fixed bin (35) ext;
	dcl     dm_error_$ci_parts_oob fixed bin (35) ext;
	dcl     dm_error_$file_doesnt_exist
				 fixed bin (35) ext;
	dcl     dm_error_$no_current_transaction
				 fixed bin (35) ext;
	dcl     error_table_$noentry	 fixed bin (35) ext;
	dcl     error_table_$no_r_permission
				 fixed bin (35) ext;


/* External Entries */

	dcl     cu_$level_get	 entry (fixed bin);
	dcl     cu_$level_set	 entry (fixed bin);
	dcl     get_ring_		 entry () returns (fixed bin (3));
	dcl     lock_manager_$lock	 entry (bit (36) aligned, fixed bin (27), fixed bin, fixed bin (71), fixed bin,
				 fixed bin (35));
	dcl     msf_manager_$msf_get_ptr
				 entry (ptr, fixed bin, bit (1), ptr, fixed bin (24), fixed bin (35));

/* END OF DECLARATIONS */
%page;
/* This entry is actually the main procedure statement and is repeated
   here for the reader's convenience

get: entry  (p_file_oid, p_ci_num, p_ci_parts_ptr, p_code); */

	call INIT;

	just_get_header, just_get_ci_ptr = "0"b;
	min_opens = 1;
	string (effective_integrity_switches) = GET_INTEGRITY_SWITCHES;
	lock_mode = LOCK_MODE_S;

	ci_parts_ptr = p_ci_parts_ptr;
	ci_num = p_ci_num;

	if ci_num = 0
	then number_of_addressable_bytes = CI_0_ADDRESSABLE_LENGTH;
	else number_of_addressable_bytes = CI_ADDRESSABLE_LENGTH;

	go to JOIN;


get_ci_header:
     entry (p_file_oid, p_ci_num, p_ci_header, p_code);

	call INIT;

	just_get_header = "1"b;
	just_get_ci_ptr = "0"b;
	min_opens = 1;
	string (effective_integrity_switches) = GET_INTEGRITY_SWITCHES;
	lock_mode = LOCK_MODE_S;

	ci_num = p_ci_num;

	if addr (p_ci_header) -> ci_stamp.version ^= CI_STAMP_VERSION_1
	then call ERROR_RETURN (dm_error_$ci_bad_hdr_arg_ver);

	go to JOIN;
%page;
internal_get:
     entry (p_file_oid, p_ci_num, p_ci_parts_ptr, p_code);

	call INIT;

	just_get_header, just_get_ci_ptr = "0"b;
	min_opens = 0;
	string (effective_integrity_switches) = GET_INTEGRITY_SWITCHES;
	lock_mode = LOCK_MODE_S;

	ci_parts_ptr = p_ci_parts_ptr;
	ci_num = p_ci_num;

	number_of_addressable_bytes = CI_ADDRESSABLE_LENGTH;

	go to JOIN;




get_exclusive:
     entry (p_file_oid, p_ci_num, p_ci_parts_ptr, p_code);

	call INIT;

	just_get_header, just_get_ci_ptr = "0"b;
	min_opens = 1;
	string (effective_integrity_switches) = GET_INTEGRITY_SWITCHES;
	lock_mode = LOCK_MODE_X;

	ci_parts_ptr = p_ci_parts_ptr;
	ci_num = p_ci_num;

	if ci_num = 0
	then number_of_addressable_bytes = CI_0_ADDRESSABLE_LENGTH;
	else number_of_addressable_bytes = CI_ADDRESSABLE_LENGTH;

	go to JOIN;
%page;
raw_get:
     entry (p_file_oid, p_ci_num, p_ci_parts_ptr, p_code);

	call INIT;

	just_get_header, just_get_ci_ptr = "0"b;
	min_opens = 1;
	string (effective_integrity_switches) = NULL_INTEGRITY_SWITCHES;
	lock_mode = LOCK_MODE_S;

	ci_parts_ptr = p_ci_parts_ptr;
	ci_num = p_ci_num;

	if ci_num = 0
	then number_of_addressable_bytes = CI_0_ADDRESSABLE_LENGTH;
	else number_of_addressable_bytes = CI_ADDRESSABLE_LENGTH;

	go to JOIN;


simple_get:
     entry (p_file_oid, p_ci_num, p_single_part_offset, p_single_part_ptr, p_single_part_length, p_code);

	call INIT;

	just_get_header = "0"b;
	just_get_ci_ptr = "0"b;
	min_opens = 1;
	string (effective_integrity_switches) = GET_INTEGRITY_SWITCHES;
	lock_mode = LOCK_MODE_S;
	ci_parts_ptr = addr (single_ci_part);
	ci_parts.part (1).offset_in_bytes = p_single_part_offset;
	ci_parts.part (1).length_in_bytes = p_single_part_length;
	ci_parts.part (1).local_ptr = p_single_part_ptr;
	ci_num = p_ci_num;
	if ci_num = 0
	then number_of_addressable_bytes = CI_0_ADDRESSABLE_LENGTH;
	else number_of_addressable_bytes = CI_ADDRESSABLE_LENGTH;
	go to JOIN;
%page;
get_ci_ptr:
     entry (p_file_oid, p_ci_num, p_ci_ptr, p_code);

/* This entry gets a pointer to the addressable portion of a ci.  The pointer
   is directly into the file ci, not a copy, so this pointer must not be 
   used to update the ci. */

	call INIT;
	p_ci_ptr = null;
	just_get_header = "0"b;
	just_get_ci_ptr = "1"b;
	min_opens = 1;
	string (effective_integrity_switches) = GET_INTEGRITY_SWITCHES;
	lock_mode = LOCK_MODE_S;
	ci_num = p_ci_num;

	go to JOIN;

%page;
internal_get_ci_ptr:
     entry (p_file_oid, p_ci_num, p_ci_ptr, p_code);

/* This entry gets a pointer to the addressable portion of a ci.  The pointer
   is directly into the file ci, not a copy, so this pointer must not be 
   used to update the ci.  This entry differs from get_ci_ptr in that the file
   need not be open.
 */

	call INIT;
	p_ci_ptr = null;
	just_get_header = "0"b;
	just_get_ci_ptr = "1"b;
	min_opens = 0;
	string (effective_integrity_switches) = GET_INTEGRITY_SWITCHES;
	lock_mode = LOCK_MODE_S;
	ci_num = p_ci_num;

	go to JOIN;

get_ci_ptr_exclusive:
     entry (p_file_oid, p_ci_num, p_ci_ptr, p_code);

/* This entry is the same as get_ci_ptr except that it acquires an
   exclusive lock on the control interval. */

	call INIT;
	p_ci_ptr = null;
	just_get_header = "0"b;
	just_get_ci_ptr = "1"b;
	min_opens = 1;
	string (effective_integrity_switches) = GET_INTEGRITY_SWITCHES;
	lock_mode = LOCK_MODE_X;
	ci_num = p_ci_num;
	go to JOIN;


terminate_ci_ptr:
     entry (p_file_oid, p_ci_num, p_ci_ptr, p_code);

/* This entry is currently not supported.  $get_ci_ptr should be changed
in the future to remember the ci pointers gotten, holding them until
terminate_ci_ptr releases the ci_ptr. */

	call RETURN ();
%page;
JOIN:
	if ci_num < 0 | ci_num > MAX_CI_NUM
	then call ERROR_RETURN (dm_error_$ci_num_oob);

	unspec (my_file_oid) = p_file_oid;

	if my_file_oid.file_access_table_idx < lbound (file_access_table.e, 1)
	     | my_file_oid.file_access_table_idx > file_access_table.h.last_entry
	then call ERROR_RETURN (dm_error_$bad_file_oid);

	my_file_access_info = file_access_table.e (my_file_oid.file_access_table_idx);

	if my_file_access_info.state.entry_state = FILE_ACCESS_INFO_NOT_IN_USE
	then call ERROR_RETURN (dm_error_$bad_file_oid);

	if my_file_access_info.state.file_state ^= FILE_EXISTS
	then call ERROR_RETURN (dm_error_$file_doesnt_exist);

	if my_file_access_info.opens < min_opens
	then call ERROR_RETURN (dm_error_$bad_file_oid);

	if my_file_oid.uid_tail ^= substr (my_file_access_info.uid, 19, 18)
	then call ERROR_RETURN (dm_error_$bad_file_oid);

	if my_file_access_info.seg_0_num = ""b
	then call ERROR_RETURN (dm_error_$file_doesnt_exist);

	call cu_$level_get (caller_validation_level);
	if caller_validation_level > my_file_access_info.ring_brackets.read
	then call ERROR_RETURN (error_table_$no_r_permission);

	effective_integrity_switches = effective_integrity_switches & my_file_access_info.integrity_switches;

	if effective_integrity_switches.transaction
	then do;
		if dm_data_$current_txn_id = ""b
		then call ERROR_RETURN (dm_error_$no_current_transaction);
	     end;

	if effective_integrity_switches.lock
	then do;
		if my_file_access_info.lock_advice = 0
		then do;
			call lock_manager_$lock (my_file_access_info.uid, ci_num, lock_mode, LOCK_WAIT_TIME, (0),
			     code);
			if code ^= 0
			then call ERROR_RETURN (code);
		     end;
		else do;
			if my_file_access_info.last_transaction_id ^= dm_data_$current_txn_id
			then do;
				my_file_access_info.last_transaction_id = dm_data_$current_txn_id;
				file_access_table.e (my_file_oid.file_access_table_idx) = my_file_access_info;

				call lock_manager_$lock (my_file_access_info.uid, LOCK_ENTIRE_FILE,
				     (my_file_access_info.lock_advice), LOCK_WAIT_TIME, (0), code);
				if code ^= 0
				then call ERROR_RETURN (code);
			     end;

			if my_file_access_info.lock_advice = LOCK_MODE_X
			then ;
			else if lock_mode = LOCK_MODE_S
			     & (my_file_access_info.lock_advice = LOCK_MODE_S
			     | my_file_access_info.lock_advice = LOCK_MODE_SIX)
			then ;
			else do;
				call lock_manager_$lock (my_file_access_info.uid, ci_num, lock_mode,
				     LOCK_WAIT_TIME, (0), code);
				if code ^= 0
				then call ERROR_RETURN (code);
			     end;
		     end;
	     end;

	component_num = divide (ci_num, my_file_access_info.blocking_factor, 27);

	if component_num = 0
	then do;
		ci_ptr = baseptr (my_file_access_info.seg_0_num);
		go to REAL_GET;
	     end;
	else if component_num <= hbound (my_file_access_info.seg_nums, 1)
	then do;
		if my_file_access_info.seg_nums (component_num) ^= 0
		then do;
			ci_ptr = baseptr (my_file_access_info.seg_nums (component_num));
			go to REAL_GET;
		     end;
	     end;

	on cleanup call cu_$level_set (caller_validation_level);
	call cu_$level_set (get_ring_ ());

	call msf_manager_$msf_get_ptr ((my_file_access_info.msf_ptr), component_num, "0"b, ci_ptr, (0), code);

	call cu_$level_set (caller_validation_level);

	if ci_ptr = null ()
	then do;
		if code = error_table_$noentry
		then go to FAKE_GET;

		call ERROR_RETURN (code);
	     end;

	if component_num <= hbound (my_file_access_info.seg_nums, 1)
	then do;
		my_file_access_info.seg_nums (component_num) = bin (baseno (ci_ptr), 18);
		file_access_table.e (my_file_oid.file_access_table_idx) = my_file_access_info;
	     end;

%page;
REAL_GET:
	page_num = ci_num - multiply (component_num, my_file_access_info.blocking_factor, 27);
	ci_ptr = addr (ci_ptr -> seg.pages (page_num));

	my_ci_stamp = ci.trailer.stamp;
	my_ci_id = ci.header.id;

	if my_ci_stamp = 0
	then go to FAKE_GET;

	if addr (my_ci_stamp) -> ci_stamp.version ^= CI_STAMP_VERSION_1
	then call ERROR_RETURN (dm_error_$ci_bad_stamp_ver);

	if addr (my_ci_id) -> ci_id.size_code ^= SIZE_CODE_1024_WORDS
	then call ERROR_RETURN (dm_error_$ci_bad_hdr_size_code);

	if addr (my_ci_id) -> ci_id.uid ^= my_file_access_info.uid
	then call ERROR_RETURN (dm_error_$ci_bad_hdr_uid);

	if addr (my_ci_id) -> ci_id.num ^= ci_num
	then call ERROR_RETURN (dm_error_$ci_bad_hdr_id_num);

	if just_get_ci_ptr
	then go to GET_CI_PTR;

	if just_get_header
	then go to REAL_GET_HEADER;

	cip_number_of_parts = ci_parts.number_of_parts;
	if cip_number_of_parts < 0
	then call ERROR_RETURN (dm_error_$ci_num_parts_neg);

	do part_idx = lbound (ci_parts.part, 1) to cip_number_of_parts;
	     part_length = ci_parts.part (part_idx).length_in_bytes;

	     if part_length ^= 0
	     then do;
		     part_offset = ci_parts.part (part_idx).offset_in_bytes;
		     part_ptr = ci_parts.part (part_idx).local_ptr;

		     if part_offset < 0 | part_length < 0 | part_offset + part_length > number_of_addressable_bytes
		     then call ERROR_RETURN (dm_error_$ci_parts_oob);

		     part_buffer = substr (ci.addressable_bytes, part_offset + 1, part_length);
		end;
	end;

	p_code = 0;
MAIN_RETURN:
	return;

RETURN:
     proc ();
	p_code = 0;
	go to MAIN_RETURN;
     end RETURN;
	;


ERROR_RETURN:
     proc (er_p_code);

	dcl     er_p_code		 fixed bin (35);

	p_code = er_p_code;
	go to MAIN_RETURN;

     end ERROR_RETURN;
%page;
FAKE_GET:
	if just_get_ci_ptr
	then call ERROR_RETURN (dm_error_$ci_not_allocated);

	if just_get_header
	then go to FAKE_GET_HEADER;

	cip_number_of_parts = ci_parts.number_of_parts;
	if cip_number_of_parts < 0
	then call ERROR_RETURN (dm_error_$ci_num_parts_neg);

	do part_idx = lbound (ci_parts.part, 1) to cip_number_of_parts;
	     part_length = ci_parts.part (part_idx).length_in_bytes;

	     if part_length ^= 0
	     then do;
		     part_offset = ci_parts.part (part_idx).offset_in_bytes;
		     part_ptr = ci_parts.part (part_idx).local_ptr;

		     if part_offset < 0 | part_length < 0 | part_offset + part_length > number_of_addressable_bytes
		     then call ERROR_RETURN (dm_error_$ci_parts_oob);

		     unspec (part_buffer) = ""b;
		end;
	end;

	call RETURN ();





FAKE_GET_HEADER:
	my_ci_stamp = TEMPLATE_CI_STAMP_1;
	addr (my_ci_id) -> ci_id.uid = my_file_access_info.uid;
	addr (my_ci_id) -> ci_id.size_code = SIZE_CODE_1024_WORDS;
	addr (my_ci_id) -> ci_id.num = ci_num;

REAL_GET_HEADER:
	unspec (p_ci_header.stamp) = unspec (my_ci_stamp);
	unspec (p_ci_header.id) = unspec (my_ci_id);

	call RETURN ();


GET_CI_PTR:
	p_ci_ptr = addr (ci.addressable_bytes);
	call RETURN ();


/* THIS IS THE END OF THE MAIN LINE CODE */
%page;
INIT:
     proc;

/* THE LOGIC DOES NOT DEPEND ON THE INITIALIZATIONS BELOW */

	ci_ptr = null ();
	ci_parts_ptr = null ();
	part_ptr = null ();

	cip_number_of_parts = -1;
	code = -1;
	component_num = -1;
	lock_mode = -1;
	my_ci_id = -1;
	my_ci_stamp = -1;
	number_of_addressable_bytes = -1;
	page_num = -1;
	part_idx = -1;
	part_length = -1;
	part_offset = -1;

	unspec (my_file_oid) = ""b;

/* THE LOGIC DOES NOT DEPEND ON THE INITIALIZATIONS ABOVE */

     end INIT;
%page;
/* START OF INCLUDE FILES */

%include dm_ci;
%page;
%include dm_ci_header;
%page;
%include dm_ci_constants;

%include dm_ci_lengths;
%page;
%include dm_ci_parts;
%page;
%include dm_lock_modes;
%page;
%include dm_fm_file_oid;
%page;
%include dm_fm_file_access_info;
%page;
%include dm_fm_file_access_tbl;

     end fm_get_$get;
