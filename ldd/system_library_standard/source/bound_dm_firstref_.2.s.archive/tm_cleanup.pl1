/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(86-02-27,Pierret), approve(86-02-27,MCR7340),
     audit(86-04-28,Newcomb), install(86-05-06,MR12.0-1054):
     Changed to execute file_mangaer_$post_transaction before unlocking locks.
                                                   END HISTORY COMMENTS */


/* format: style4,ifthenstmt,^indproc,^indcomtxt */
/*---------------*/

tm_cleanup: proc (A_tdt_ptr, A_txn_index);

/* DESCRIPTION:

   This procedure is invoked by all operations' cleanup handlers.
   It looks at the state of the process's TDT entry and does whatever
   is necessary to put the entry in a consistent state.
*/

/* HISTORY:

Written by Steve Herbst, 08/04/82
Modified:
08/16/82 by Steve Herbst: Changed to use consolidated dm_tm_tdt.incl.pl1 with
	entry declarations.
09/13/82 by Steve Herbst: Changed for no-locking environment.
09/22/82 by Steve Herbst: Added $crawlout
09/23/82 by Lindsey Spratt: Changed to use new lock_manager_ calling sequences.
10/05/82 by Steve Herbst: Added TM_ABORT_POST_COMMIT_STATE
10/14/82 by Steve Herbst: Changed calling sequence of pfm_$flush_modified_ci
11/01/82 by Steve Herbst: Changed to turn on txn's error_sw for error states.
11/05/82 by Steve Herbst: Made to set tm_tdt.error_code on error return.
12/14/82 by Steve Herbst: Let daemon try to adjust an error txn if it hasn't.
01/12/83 by Steve Herbst: Made to log errors that occur while cleaning up.
01/14/83 by Steve Herbst: Added $restart_error, changed to log errors by
	calling tm_error_state.
03/21/83 by Steve Herbst: Fixed $restart_error to set dm_data_$current_txn_id,
	made all entries save & restore dm_data_.
05/27/83 by Steve Herbst: Made to update checkpoint_id & rollback_count in
	TDT entry.
10/19/83 by Steve Herbst: Changed behavior in case where perprocess list of
	modified ci's is no longer available.
09/25/84 by Steve Herbst: Changed in response to audit comments.
11/27/84 by Steve Herbst: Changed further in response to audit comments.
12/26/84 by Matthew Pierret: Commented out call to file_manager_$post_commit.
            before_journal_manager_ currently handles postcommit operations
            for file_manager_.
01/29/85 by Steve Herbst: Fixed to ignore dm_error_$file_was_deleted.
02/07/85 by Stanford S. Cox:  Added fm$post_transaction call (moved from
            lm_per_system_), STATE 45:  Chg lm$unlock_to_checkpoint call to
            lm$unlock_all.
02/12/85 by S. Cox: TM_ROLLBACK_UNLOCKING_STATE: Rmvd fm$post_transaction call.
04/23/85 by Matthew C. Pierret:  Switched the order of the calls to
            file_manager_$post_transaction and lock_manager_$unlock_all.  This
            allows file_manager_$post_transaction to operate under the safety
            of the locks acquired by the transaction.
*/

/* DECLARATIONS */

/* Parameter */

dcl  A_tdt_ptr ptr parameter;
dcl  A_txn_index fixed bin parameter;


/* Constants */

dcl  ME char (32) int static options (constant) init ("tm_cleanup");

/* Based */

/* Static */

/* Automatic */

dcl  (process_id, saved_current_txn_id, txn_id) bit (36) aligned;
dcl  daemon_sw bit (1);
dcl  (saved_current_txn_index, state, txn_index) fixed bin;
dcl  code fixed bin (35);

/* External */

dcl  dm_data_$current_txn_id bit (36) aligned ext;
dcl  dm_data_$current_txn_index fixed bin ext;
dcl  dm_data_$my_tdt_index fixed bin ext;
dcl  dm_data_$tm_tdt_ptr ptr ext;
dcl  dm_error_$file_was_deleted fixed bin (35) ext;
dcl  dm_system_data_$initializer_processid bit (36) ext;

/* Entries */

dcl  before_journal_manager_$flush_transaction entry (bit (36) aligned, fixed bin, fixed bin (35));
dcl  before_journal_manager_$rollback entry (bit (36) aligned, fixed bin, fixed bin, fixed bin (35));
dcl  before_journal_manager_$write_aborted_mark entry (bit (36) aligned, fixed bin, fixed bin (35));
dcl  before_journal_manager_$write_committed_mark entry (bit (36) aligned, fixed bin, fixed bin (35));
dcl  before_journal_manager_$write_rolled_back_mark entry (bit (36) aligned, fixed bin, fixed bin (35));
dcl  get_process_id_ entry returns (bit (36));
dcl  lock_manager_$unlock_all entry;
dcl  file_manager_$flush_modified_ci entry (bit (36) aligned, fixed bin, fixed bin (35));
dcl  file_manager_$post_transaction entry ();
dcl  tm_error_state entry (fixed bin, fixed bin, fixed bin (35), char (*), char (*));

/* Builtins */

dcl  unspec builtin;

/* Conditions */

dcl  cleanup condition;

/* END OF DECLARATIONS */
%page;
	tm_tdt_ptr = A_tdt_ptr;
	txn_index = A_txn_index;
	call SAVE_DM_DATA;
	on cleanup call RESTORE_DM_DATA;

	go to COMMON;

restart_error: entry (A_tdt_ptr, A_txn_index);

/* This entry point acts like $tm_cleanup but first changes an error state into the corresponding
   state before the call that produced the error */

	tm_tdt_ptr = A_tdt_ptr;
	txn_index = A_txn_index;
	call SAVE_DM_DATA;
	on cleanup call RESTORE_DM_DATA;

	dm_data_$current_txn_id = tm_tdt.txn_id (txn_index);

	if tm_tdt.error_sw (txn_index) then do;
	     tm_tdt.error_sw (txn_index) = "0"b;
	     tm_tdt.error_code (txn_index) = 0;

	     if tm_tdt.state (txn_index) > TM_ERROR_INCREMENT then
		tm_tdt.state (txn_index) = tm_tdt.state (txn_index) - TM_ERROR_INCREMENT;
	end;
	go to COMMON;

crawlout: entry;					/* callable from any program in the process */

	tm_tdt_ptr = dm_data_$tm_tdt_ptr;
	txn_index = dm_data_$my_tdt_index;
	call SAVE_DM_DATA;
	on cleanup call RESTORE_DM_DATA;

COMMON:
	process_id = get_process_id_ ();
	daemon_sw = (process_id = dm_system_data_$initializer_processid);

	txn_id = tm_tdt.txn_id (txn_index);
	if txn_id = "0"b then go to HANDLE_STATE;	/* deleted transaction */

/* If this is not the process that created the transaction, we no longer have
   the (perprocess) list of modified control intervals. So... */

	if tm_tdt.process_id (txn_index) ^= process_id then do;

/* if commit hasn't flushed modified ci's, must convert to an abort */
	     if tm_tdt.state (txn_index) = TM_COMMIT_FLUSHING_TXN_STATE |
		tm_tdt.state (txn_index) = TM_COMMIT_FLUSHING_CI_STATE then
		tm_tdt.state (txn_index) = TM_ABORT_FLUSHING_TXN_STATE;

	     else if tm_tdt.state (txn_index) = TM_ABORT_FLUSHING_CI_STATE then
		tm_tdt.state (txn_index) = TM_ABORT_ROLLING_BACK_STATE; /* repeat the rollback */

	     else if tm_tdt.state (txn_index) = TM_ROLLBACK_FLUSHING_CI_STATE then
		tm_tdt.state (txn_index) = TM_ROLLBACK_ROLLING_BACK_STATE; /* repeat the rollback */
	end;

HANDLE_STATE:
	state = tm_tdt.state (txn_index);
	if state < 0 | state > HIGHEST_STATE then state, tm_tdt.state (txn_index) = 0;
	go to STATE (state);


STATE (0):					/* transaction does not exist */

	if dm_data_$current_txn_index ^= 0 then do;
	     dm_data_$current_txn_id = "0"b;
	     dm_data_$current_txn_index = 0;
	end;

	unspec (tm_tdt.transaction (txn_index)) = "0"b;	/* now it's really gone */
RETURN:
	call RESTORE_DM_DATA;
	return;


/* TM_IN_PROGRESS_STATE */
STATE (1):

	if dm_data_$current_txn_index ^= 0 then do;	/* dm_data_$current_txn_id = "0"b if */
						/* transaction was in error previously */
	     dm_data_$current_txn_id = tm_tdt.txn_id (dm_data_$current_txn_index);
	end;

	go to RETURN;				/* nothing to clean up */


/* TM_BEGIN_STARTING_STATE */
STATE (11):

	tm_tdt.state (txn_index) = 0;
	go to HANDLE_STATE;				/* nothing to clean up; delete txn */


/* TM_ABORT_FLUSHING_TXN_STATE */
STATE (21):

	call before_journal_manager_$flush_transaction (txn_id, txn_index, code);
	if code ^= 0 then
	     call ERROR_STATE (TM_ABORT_FLUSHING_TXN_ERROR, code, "bjm_$flush_transaction");

	tm_tdt.state (txn_index) = TM_ABORT_ROLLING_BACK_STATE;
	go to HANDLE_STATE;

/* TM_ABORT_ROLLING_BACK_STATE */
STATE (22):

	call before_journal_manager_$rollback (txn_id, txn_index, 0, code);
	if code ^= 0 then
	     call ERROR_STATE (TM_ABORT_ROLLING_BACK_ERROR, code, "bjm_$rollback");

	tm_tdt.checkpoint_id (txn_index) = 0;
	tm_tdt.rollback_count (txn_index) = tm_tdt.rollback_count (txn_index) + 1;

	tm_tdt.state (txn_index) = TM_ABORT_FLUSHING_CI_STATE;
	go to HANDLE_STATE;

/* TM_ABORT_FLUSHING_CI_STATE */
STATE (23):

	call file_manager_$flush_modified_ci (txn_id, txn_index, code);
	if code ^= 0 & code ^= dm_error_$file_was_deleted then
						/* previous cleanup may have deleted the file */
	     call ERROR_STATE (TM_ABORT_FLUSHING_CI_ERROR, code, "fm_$flush_modified_ci");

	tm_tdt.state (txn_index) = TM_ABORT_WRITING_MARK_STATE;
	go to HANDLE_STATE;

/* TM_ABORT_WRITING_MARK_STATE */
STATE (24):

	call before_journal_manager_$write_aborted_mark (txn_id, txn_index, code);
	if code ^= 0 then
	     call ERROR_STATE (TM_ABORT_WRITING_MARK_ERROR, code, "bjm_$write_aborted_mark");

	tm_tdt.state (txn_index) = TM_ABORT_UNLOCKING_STATE;
	go to HANDLE_STATE;

/* TM_ABORT_UNLOCKING_STATE */
STATE (25):

	call file_manager_$post_transaction;
	call lock_manager_$unlock_all;

	tm_tdt.state (txn_index) = TM_ABORT_METERING_STATE;
	go to HANDLE_STATE;

/* TM_ABORT_METERING_STATE */
STATE (26):

/* Metering not implemented yet */

	tm_tdt.state (txn_index) = 0;
	go to HANDLE_STATE;


/* TM_COMMIT_FLUSHING_TXN_STATE */
STATE (31):

	call before_journal_manager_$flush_transaction (txn_id, txn_index, code);
	if code ^= 0 then
	     call ERROR_STATE (TM_COMMIT_FLUSHING_TXN_ERROR, code, "bjm_$flush_transaction");

	tm_tdt.state (txn_index) = TM_COMMIT_FLUSHING_CI_STATE;
	go to HANDLE_STATE;

/* TM_COMMIT_FLUSHING_CI_STATE */
STATE (32):

	call file_manager_$flush_modified_ci (txn_id, txn_index, code);
	if code ^= 0 then				/* for commit, dm_error_$file_was_deleted is always an error */
	     call ERROR_STATE (TM_COMMIT_FLUSHING_CI_ERROR, code, "fm_$flush_modified_ci");

	tm_tdt.state (txn_index) = TM_COMMIT_WRITING_MARK_STATE;
	go to HANDLE_STATE;

/* TM_COMMIT_WRITING_MARK_STATE */
STATE (33):

	call before_journal_manager_$write_committed_mark (txn_id, txn_index, code);
	if code ^= 0 then
	     call ERROR_STATE (TM_COMMIT_WRITING_MARK_ERROR, code, "bjm_$write_committed_mark");

	tm_tdt.state (txn_index) = TM_COMMIT_POST_COMMIT_STATE;
	go to HANDLE_STATE;

/* TM_COMMIT_POST_COMMIT_STATE */
STATE (34):

/* **************************************************************************
 * There are no post_commit operations handled by transaction_manager_ yet. *

	if tm_tdt.post_commit_flags.fmgr (txn_index) then do;
	     call file_manager_$post_commit (txn_id, txn_index, code);
	     if code ^= 0 then
		call ERROR_STATE (TM_COMMIT_POST_COMMIT_ERROR, code, "fm_$post_commit");
	end;

	if tm_tdt.bjmgr (txn_index) then do;
	     call before_journal_manager_$post_commit (txn_id, txn_index, code);
	     if code ^= 0 then
		call ERROR_STATE (TM_COMMIT_POST_COMMIT_ERROR, code, "bjm_$post_commit");
	end;
************************************************************************** */
	tm_tdt.state (txn_index) = TM_COMMIT_UNLOCKING_STATE;
	go to HANDLE_STATE;

/* TM_COMMIT_UNLOCKING_STATE */
STATE (35):

	call file_manager_$post_transaction;
	call lock_manager_$unlock_all;

	tm_tdt.state (txn_index) = TM_COMMIT_METERING_STATE;
	go to HANDLE_STATE;

/* TM_COMMIT_METERING_STATE */
STATE (36):

/* Metering not implemented yet */

	tm_tdt.state (txn_index) = 0;
	go to HANDLE_STATE;


/* TM_ROLLBACK_FLUSHING_TXN_STATE */
STATE (41):

	call before_journal_manager_$flush_transaction (txn_id, txn_index, code);
	if code ^= 0 then
	     call ERROR_STATE (TM_ROLLBACK_FLUSHING_TXN_ERROR, code, "bjm_$flush_transaction");

	tm_tdt.state (txn_index) = TM_ROLLBACK_ROLLING_BACK_STATE;
	go to HANDLE_STATE;

/* TM_ROLLBACK_ROLLING_BACK_STATE */
STATE (42):

	call before_journal_manager_$rollback (txn_id, txn_index, 0 /* USE CHECKPOINT FROM ENTRY */, code);
	if code ^= 0 then
	     call ERROR_STATE (TM_ROLLBACK_ROLLING_BACK_ERROR, code, "bjm_$rollback");

	tm_tdt.checkpoint_id (txn_index) = 0;
	tm_tdt.rollback_count (txn_index) = tm_tdt.rollback_count (txn_index) + 1;

	tm_tdt.state (txn_index) = TM_ROLLBACK_FLUSHING_CI_STATE;
	go to HANDLE_STATE;

/* TM_ROLLBACK_FLUSHING_CI_STATE */
STATE (43):

	call file_manager_$flush_modified_ci (txn_id, txn_index, code);
	if code ^= 0 & code ^= dm_error_$file_was_deleted then
						/* previous cleanup may have deleted the file */
	     call ERROR_STATE (TM_ROLLBACK_FLUSHING_CI_ERROR, code, "fm_$flush_modified_ci");

	tm_tdt.state (txn_index) = TM_ROLLBACK_WRITING_MARK_STATE;
	go to HANDLE_STATE;

/* TM_ROLLBACK_WRITING_MARK_STATE */
STATE (44):

	call before_journal_manager_$write_rolled_back_mark (txn_id, txn_index, code);
	if code ^= 0 then
	     call ERROR_STATE (TM_ROLLBACK_WRITING_MARK_ERROR, code, "bjm_$write_rolled_back_mark");

	tm_tdt.state (txn_index) = TM_ROLLBACK_UNLOCKING_STATE;
	go to HANDLE_STATE;

/* TM_ROLLBACK_UNLOCKING_STATE */
STATE (45):

	call lock_manager_$unlock_all ();

	tm_tdt.state (txn_index) = TM_ROLLBACK_METERING_STATE;
	go to HANDLE_STATE;

/* TM_ROLLBACK_METERING_STATE */
STATE (46):

/* Metering not implemented yet */

	tm_tdt.state = TM_IN_PROGRESS_STATE;
	go to RETURN;


/* ERROR STATES */

STATE (71): STATE (72): STATE (73): STATE (74): STATE (75): STATE (76):
STATE (81): STATE (82): STATE (83): STATE (84): STATE (85): STATE (86):
STATE (91): STATE (92): STATE (93): STATE (94): STATE (95): STATE (96):

	go to RETURN;				/* nothing to try */


/* UNASSIGNED STATES */

STATE (2): STATE (3): STATE (4): STATE (5): STATE (6): STATE (7): STATE (8): STATE (9): STATE (10):
STATE (12): STATE (13): STATE (14): STATE (15): STATE (16): STATE (17): STATE (18): STATE (19): STATE (20):
STATE (27): STATE (28): STATE (29): STATE (30):
STATE (37): STATE (38): STATE (39): STATE (40):
STATE (47): STATE (48): STATE (49): STATE (50):
STATE (51): STATE (52): STATE (53): STATE (54): STATE (55): STATE (56): STATE (57): STATE (58): STATE (59): STATE (60):
STATE (61): STATE (62): STATE (63): STATE (64): STATE (65): STATE (66): STATE (67): STATE (68): STATE (69): STATE (70):
STATE (77): STATE (78): STATE (79): STATE (80):
STATE (87): STATE (88): STATE (89): STATE (90):

	state, tm_tdt.state (txn_index) = 0;
	go to HANDLE_STATE;
%page;
ERROR_STATE: proc (P_state, P_code, P_name);

dcl  P_state fixed bin;
dcl  P_code fixed bin (35);
dcl  P_name char (*);

	call tm_error_state (txn_index, P_state, P_code, ME, P_name);

	go to RETURN;

     end ERROR_STATE;


RESTORE_DM_DATA: proc;

	dm_data_$current_txn_index = saved_current_txn_index;
	dm_data_$current_txn_id = saved_current_txn_id;

     end RESTORE_DM_DATA;


SAVE_DM_DATA: proc;

	saved_current_txn_index = dm_data_$current_txn_index;
	saved_current_txn_id = dm_data_$current_txn_id;

     end SAVE_DM_DATA;
%page;
%include dm_tm_tdt;
%page;
%include dm_tm_states;


     end tm_cleanup;
