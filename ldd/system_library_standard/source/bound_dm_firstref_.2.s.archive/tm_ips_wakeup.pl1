/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION:

	The tm_ips_wakeup sends a (Data Management) IPS to a current user of
     a DMS.  At this writing, the only valid DM IPS is dm_shutdown_scheduled_.
     We  do not currently lock the TDT.  Note: the current caretaker Daemon of
     the DMS is never sent an IPS.

	The first entry, $all_processes, walks the TDT looking for processes
     using  the DMS and then sends the IPS.  The other entry, $single_process,
     sends  the  IPS  to  only  one process as specified by the caller; if the
     process is not in the TDT, the IPS is NOT sent.

	A  call  to  sub_err_  will  result if the TDT is not the version we
     expect it to be.
*/

/* HISTORY:

Written by Lee A. Newcomb, 08/07/84.
Modified:
09/17/84 by Lee A. Newcomb:  Added check of TDT version, fixed bad format
            comment, and corrected DESCRIPTION section.
10/01/84 by Lee A. Newcomb:  Renamed original program to be tm_ips_wakeup to
	  correspond to the TV entry calling it, changed original program to
	  be the $all_processes entry, added the $single_process entry, and
	  changed CHECK_VERSION to use sub_err_ to report an error.
*/

/* format: style2,ll79,ind3,^indprocbody,ifthendo,ifthen,^indnoniterdo */
/* format: ^inddcls,dclind5,idind35,linecom */

tm_ips_wakeup$all_processes:
   proc (p_ips_name, p_dm_system_in_use);

/* START OF DECLARATIONS */
/* Parameter */
dcl  (
     p_ips_name			char (*),		/*the name of the IPS to send to each process using the DMS.*/
     p_dm_system_in_use		bit (1) aligned,	/* used by $all_processes entry */
     p_process_id			bit (36) aligned	/* for $single_process */
     )				parameter;

/* Automatic */
dcl  (
     dm_system_in_use		bit (1) aligned init ("0"b),
						/* active users/txns in DMS */
     ips_name			char (32),	/* parameter copy */
     process_id			bit (36) aligned,	/* parameter copy */
     tdt_index			fixed bin		/* to loop through TDT */
     )				automatic;

/* Based */
/* Builtin */
dcl  null				builtin;

/* Constant */
dcl  (
     myname			char (32) init ("tm_ips_wakeup")
     )				int static options (constant);

/* Entry */
dcl  (
     dm_hphcs_$ips_wakeup		entry (bit (36) aligned, char (*)),
     sub_err_			entry () options (variable)
     )				external;

/* External */
dcl  (
     dm_data_$tm_tdt_ptr		ptr,
     dm_system_data_$initializer_processid
				bit (36) aligned,
     error_table_$unimplemented_version fixed bin (35)
     )				external;

/* END OF DECLARATIONS */
%page;
   ips_name = p_ips_name;				/* copy parameter for use */
   tm_tdt_ptr = dm_data_$tm_tdt_ptr;			/* and find TDT */
   call CHECK_VERSION (tm_tdt.version, (TM_TDT_VERSION_3), "tm_tdt");
						/* if return, then OK */

FIND_PROCESSES_TO_SIGNAL:
   do tdt_index = 1 to tm_tdt.entry_count;

      if tm_tdt.process_id (tdt_index) ^= "0"b then
         if tm_tdt.process_id (tdt_index)
	    ^= dm_system_data_$initializer_processid then
SEND_SIGNAL:
	  do;
	  call dm_hphcs_$ips_wakeup (tm_tdt.process_id (tdt_index), ips_name)
	       ;
	  dm_system_in_use = "1"b;
         end SEND_SIGNAL;
         else if tm_tdt.txn_id (tdt_index) ^= "0"b then	/* Daemon adjusting a txn */
	  dm_system_in_use = "1"b;			/* do not send IPS to Daemon */
   end FIND_PROCESSES_TO_SIGNAL;

   p_dm_system_in_use = dm_system_in_use;

MAIN_RETURN:
   return;

/* end tm_ips_wakeup$all_processes; */


tm_ips_wakeup$single_process:
   entry (p_ips_name, p_process_id);

   ips_name = p_ips_name;				/* copy parameters */
   process_id = p_process_id;
   if process_id = dm_system_data_$initializer_processid then
      call RETURN;					/* we don't allow this */

   tm_tdt_ptr = dm_data_$tm_tdt_ptr;			/* and find TDT */
   call CHECK_VERSION (tm_tdt.version, (TM_TDT_VERSION_3), "tm_tdt");

/* dm_system_in_use in $single_process tells if user is active */
TRY_TO_FIND_SINGLE_USER:				/* or how to do a pick-up */
   do tdt_index = 1 to tm_tdt.entry_count while (^dm_system_in_use);
      if tm_tdt.process_id (tdt_index) = process_id then
         dm_system_in_use = "1"b;
   end TRY_TO_FIND_SINGLE_USER;

   if dm_system_in_use then
SEND_SIGNAL_TO_SINGLE_USER:
      call dm_hphcs_$ips_wakeup (process_id, ips_name);

   return;

/* end tm_ips_wakeup$single_process; */
%page;
RETURN:
   proc ();
   go to MAIN_RETURN;

   end RETURN;



CHECK_VERSION:
   proc (cv_p_input_version, cv_p_expected_version, cv_p_structure_name);

dcl  (
     cv_p_input_version		char (8) aligned,
     cv_p_expected_version		char (8) aligned,
     cv_p_structure_name		char (*)
     )				parameter;

   if cv_p_input_version ^= cv_p_expected_version then
      call sub_err_ (error_table_$unimplemented_version, myname,
	 ACTION_CANT_RESTART, null (), (0),
	 "Expected version ^a of structure ^a, received ^a.",
	 cv_p_structure_name, cv_p_expected_version, cv_p_input_version);

   end CHECK_VERSION;
%page;
%include dm_tm_tdt;
%page;
%include sub_err_flags;


   end tm_ips_wakeup$all_processes;
