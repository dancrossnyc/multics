/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(86-02-27,Pierret), approve(86-02-27,MCR7340),
     audit(86-04-28,Newcomb), install(86-05-06,MR12.0-1054):
     Changed to not log a message when attempting to open a file which does not
     exist.
                                                   END HISTORY COMMENTS */


/* DESCRIPTION:

        This module opens a file given a file uid.  The pathname of the
   file is obtained by searching the System Pathname Table (sys_pn_tbl)
   for an entry with the specified file uid.  That pathname is then used to
   open the file in the usual fashion by calling fm_create_open_$open.
   
        There are two entries to this module which differ slightly in the 
   manner they use the sys_pn_tbl.  fm_open_by_uid_$open locks the
   sys_pn_tbl while using it.  fm_open_by_uid$open_after_crash is executed
   in the Data_Management daemon process during crash recovery.  At this time
   no other process can access the sys_pn_tbl, so locking is unnecessary.

        There are also two entries which are used in setting up and 
   eliminating the sys_pn_tbl of a previous Data Management system.
   This is the table used by open_after_crash.
   find_old_uid_pn_table initiates the old sys_pn_tbl.
   end_of_crash_recovery terminates it.
*/

/* HISTORY:
Written by Matthew Pierret, 11/07/84.
  (Copied from fm_combos_, written by Jeffrey Ives.)
Modified:
12/10/84 by Matthew Pierret:  Added declaration of char builtin, corrected 
            initial value of TRUE, and changed to not read p_code in the
            ERROR_RETURN procedure.
01/11/85 by Matthew Pierret:  Corrected calling sequence of dm_log_ call
            in LOG_ERROR_RETURN.  Also made LOG_ERROR_RETURN options(variable)
            removing the need for the ERROR_MESSAGE function.
01/28/85 by Matthew Pierret:  Made LOG_ERROR_RETURN call ERROR_RETURN  so
            that it actually returns from the main procedure.
03/05/85 by Steve Herbst: Replaced dm_log_ with dm_misc_util_$log.
05/03/85 by Matthew C. Pierret:  Changed to not log an error message if the
            file does not exist.
*/

/* format: style2,ind3,ll79,^indnoniterdo,indnoniterend */
%page;
fm_open_by_uid_$open:
   procedure (p_file_uid, p_file_oid, p_code);

/* START OF DECLARATIONS */

/* Parameter */

      dcl	    p_dir_path	       char (168) parameter;
      dcl	    p_file_uid	       bit (36) aligned parameter;
      dcl	    p_file_oid	       bit (36) aligned parameter;
      dcl	    p_code	       fixed bin (35) parameter;

/* Automatic */

      dcl	    code		       fixed bin (35);
      dcl	    dir_path	       char (168);
      dcl	    file_dir	       char (168);
      dcl	    file_name	       char (32);
      dcl	    file_path	       char (168);
      dcl	    file_uid	       bit (36) aligned;
      dcl	    must_lock_sys_pn_tbl   bit (1) aligned;
      dcl	    my_file_oid	       bit (36) aligned;
      dcl	    saved_validation_level fixed bin init (-1);
      dcl	    sys_pn_tbl_ptr	       ptr;

/* Based */

/* Builtin */

      dcl	    (addr, length, min, null, substr)
			       builtin;

/* Condition */

      dcl	    cleanup	       condition;

/* Constant */

      dcl	    (
	    MYNAME	       init ("fm_open_by_uid_") char (32)
			       varying,
	    FALSE		       init ("0"b) bit (1) aligned,
	    TRUE		       init ("1"b) bit (1) aligned,
	    NO_ERROR_ARG_1	       init (""b) bit (36) aligned,
	    NO_ERROR_ARG_2	       init ("") char (1),
	    NO_ERROR_ARG_3	       init (""b) bit (36) aligned,
	    NO_ERROR_ARG_4	       init ("") char (1)
	    )		       internal static options (constant);

/* Entry */

      dcl	    cu_$arg_list_ptr       entry (ptr);
      dcl	    cu_$arg_ptr_rel	       entry (fixed bin, ptr, fixed bin (21),
			       fixed bin (35), ptr);
      dcl	    cu_$level_get	       entry (fixed bin);
      dcl	    cu_$level_set	       entry (fixed bin);
      dcl	    dm_misc_util_$log      entry options (variable);
      dcl	    expand_pathname_       entry (char (*), char (*), char (*),
			       fixed bin (35));
      dcl	    fm_create_open_$open   entry (char (*), char (*),
			       bit (36) aligned, fixed bin (35));
      dcl	    fm_delete_close_$close entry (bit (36) aligned, fixed bin (35));
      dcl	    fm_sys_pn_tbl_util_$get_path
			       entry (ptr, bit (1) aligned,
			       bit (36) aligned, char (168));
      dcl	    get_ring_	       entry () returns (fixed bin (3));
      dcl	    hcs_$initiate	       entry (char (*), char (*), char (*),
			       fixed bin (1), fixed bin (2), ptr,
			       fixed bin (35));
      dcl	    hcs_$terminate_noname  entry (ptr, fixed bin (35));
      dcl	    ioa_$general_rs	       entry (ptr, fixed bin, fixed bin,
			       char (*), fixed bin (21), bit (1) aligned,
			       bit (1) aligned);

/* External */

      dcl	    fm_data_$old_sys_pn_tbl_ptr
			       ptr ext;
      dcl	    dm_error_$file_uid_arg_null
			       fixed bin (35) ext;
      dcl	    dm_error_$file_uid_not_found
			       fixed bin (35) ext;
      dcl	    dm_error_$fm_old_uidpn_ptr_null
			       fixed bin (35) ext;
      dcl	    dm_error_$fm_uid_fnd_wrong_file
			       fixed bin (35) ext;
      dcl	    error_table_$noentry   fixed bin (35) ext;

/* END OF DECLARATIONS */
%page;
/* open: entry (p_file_uid, p_file_oid, p_code); */

      must_lock_sys_pn_tbl = TRUE;
      sys_pn_tbl_ptr = fm_data_$sys_pn_tbl_ptr;

      go to JOIN;


open_after_crash:
   entry (p_file_uid, p_file_oid, p_code);

      must_lock_sys_pn_tbl = FALSE;
      sys_pn_tbl_ptr = fm_data_$old_sys_pn_tbl_ptr;

      if sys_pn_tbl_ptr = null
      then call LOG_ERROR_RETURN (dm_error_$fm_old_uidpn_ptr_null, "");

      go to JOIN;
%page;
JOIN:
      p_code, code = 0;
      p_file_oid, my_file_oid = ""b;
      file_uid = p_file_uid;

      if file_uid = ""b
      then call ERROR_RETURN (dm_error_$file_uid_arg_null);

      call fm_sys_pn_tbl_util_$get_path (sys_pn_tbl_ptr, must_lock_sys_pn_tbl,
	 file_uid, file_path);

      if file_path = ""
      then call LOG_ERROR_RETURN (dm_error_$file_uid_not_found,
	      " Could not open file with uid ^w.", file_uid);

      call expand_pathname_ (file_path, file_dir, file_name, code);
      if code ^= 0
      then call LOG_ERROR_RETURN (code,
	      " Could not expand pathname ^a, the path in ^a for file with uid ^w.",
	      file_path, fm_data_$sys_pn_tbl_name, file_uid);

      my_file_oid = ""b;

      on cleanup call FINISH ();

      call fm_create_open_$open (file_dir, file_name, my_file_oid, code);
      if my_file_oid = ""b
      then if code = error_table_$noentry
	 then call ERROR_RETURN (code);
	 else call LOG_ERROR_RETURN (code,
		 " Unable to open file ^a, found in ^a with uid ^w.",
		 file_path, fm_data_$sys_pn_tbl_name, file_uid);
      else p_code = code;

      if file_uid
	 ^= file_access_table
	 .e (addr (my_file_oid) -> file_oid.file_access_table_idx).uid
      then call LOG_ERROR_RETURN (dm_error_$fm_uid_fnd_wrong_file,
	      " The file with uid ^w is ^a, but it has a uid of ^w in ^a.",
	      file_access_table
	      .e (addr (my_file_oid) -> file_oid.file_access_table_idx).uid,
	      file_path, file_uid, fm_data_$sys_pn_tbl_name);

      p_file_oid = my_file_oid;

MAIN_RETURN:
      return;
%page;
ERROR_RETURN:
   proc (er_p_code);

      dcl	    er_p_code	       fixed bin (35) parameter;

      p_code = er_p_code;
      call FINISH ();
      go to MAIN_RETURN;

   end ERROR_RETURN;

LOG_ERROR_RETURN:
   proc options (variable);

      dcl	    ler_arg_list_ptr       ptr;
      dcl	    ler_code	       fixed bin (35) based (ler_code_ptr);
      dcl	    ler_code_ptr	       ptr;
      dcl	    ler_code_len	       fixed bin (21);
      dcl	    ler_message_len	       fixed bin (21);
      dcl	    ler_message_buffer     char (1024);
      dcl	    (DONT_PAD, NO_NEW_LINE)
			       init ("0"b) bit (1) aligned;

      call cu_$arg_list_ptr (ler_arg_list_ptr);
      call cu_$arg_ptr_rel (1, ler_code_ptr, ler_code_len, (0),
	 ler_arg_list_ptr);

      call ioa_$general_rs (ler_arg_list_ptr, 2, 3, ler_message_buffer,
	 ler_message_len, DONT_PAD, NO_NEW_LINE);
      call dm_misc_util_$log (LOG_SV, ler_code, MYNAME,
	 substr (ler_message_buffer, 1,
	 min (length (ler_message_buffer), ler_message_len)));
      call ERROR_RETURN (ler_code);

   end LOG_ERROR_RETURN;

FINISH:
   proc ();

      if my_file_oid ^= ""b
      then call fm_delete_close_$close (my_file_oid, (0));

   end FINISH;

%page;
/* DESCRIPTION OF find_old_uid_pn_table 

          This entry point is called at the beginning of crash recovery in 
     order to set a pointer to the old uid/pathname table so that 
     open_by_uid_after_crash can be called by rollback.
*/

find_old_uid_pn_table:
   entry (p_dir_path, p_code);

      dir_path = p_dir_path;
      my_file_oid = ""b;
      p_code, code = 0;

      call cu_$level_get (saved_validation_level);
      on cleanup call cu_$level_set (saved_validation_level);
      call cu_$level_set (get_ring_ ());

      call hcs_$initiate (dir_path, fm_data_$sys_pn_tbl_name, "", 0, 0,
	 fm_data_$old_sys_pn_tbl_ptr, code);

      call cu_$level_set (saved_validation_level);

      if fm_data_$old_sys_pn_tbl_ptr = null ()
      then call LOG_ERROR_RETURN (code, " Unable to initiate ^a>^a.", dir_path,
	      fm_data_$sys_pn_tbl_name);

      return;
%page;
/* DESCRIPTION OF end_of_crash_recovery :

          This entry point is called after all rollbacks are complete.  It 
     terminates the pointer to the old uid/pathname table so that it can be 
     deleted.
*/

end_of_crash_recovery:
   entry (p_code);

      p_code, code = 0;
      my_file_oid = ""b;

      if fm_data_$old_sys_pn_tbl_ptr = null ()
      then call LOG_ERROR_RETURN (dm_error_$fm_old_uidpn_ptr_null, "");

      call cu_$level_get (saved_validation_level);
      on cleanup call cu_$level_set (saved_validation_level);
      call cu_$level_set (get_ring_ ());

      call hcs_$terminate_noname (fm_data_$old_sys_pn_tbl_ptr, code);

      call cu_$level_set (saved_validation_level);

      if code ^= 0
      then call LOG_ERROR_RETURN (code,
	      " Unable to terminate ^a with pointer ^p.",
	      fm_data_$sys_pn_tbl_name, fm_data_$old_sys_pn_tbl_ptr);

      return;
%page;
%include dm_fm_file_oid;
%page;
%include dm_fm_file_access_info;
%page;
%include dm_fm_file_access_tbl;
%page;
%include dm_fm_sys_pn_tbl;
%page;
%include dm_log_sv_codes;

   end fm_open_by_uid_$open;
