/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */
/* Program to reset lock meters for the system. This is a */
/* PRIVILEGED function. */
/* format: style2 */
lm_reset_system_meters_:
     procedure;

/* HISTORY:

Written by Benson I. Margulies, 05/10/83.
Modified:
05/01/84 by R. Michael Tague:  Added the History section.  Added
	  %include dm_lm_meters.  Changed meters assignment to reference
	  the lm_meters structure, avoid zeroing the version information.
10/18/84 by Stanford S. Cox:  For DM program standards.
03/05/85 by Steve Herbst: Replaced dm_log_ with dm_misc_util_$log.
*/

	declare (
	        lock_manager_$lock_lock_data,
	        lock_manager_$unlock_lock_data
	        )			 entry (fixed bin (35));
	declare get_group_id_	 entry () returns (char (32));
	declare dm_misc_util_$log	 entry () options (variable);
	declare sub_err_		 entry () options (variable);

	declare lm_data_$lock_seg_ptr	 pointer external;
	declare dm_system_data_$max_n_transactions
				 fixed bin ext;
	dcl     error_table_$unimplemented_version
				 fixed bin (35) ext static;

	declare code		 fixed bin (35);

	declare cleanup		 condition;

	dcl     ME		 char (23) int static options (constant) init ("lm_reset_system_meters_");


	lock_seg_ptr = lm_data_$lock_seg_ptr;
	call CHECK_VERSION (LOCK_SEG_VERSION_1, lock_seg.version, "lock_seg");
	call dm_misc_util_$log (INFORM_SV, "Lock meters reset by ^a.", get_group_id_ ());
	call lock_manager_$lock_lock_data (code);
	if code = 0
	then on cleanup call lock_manager_$unlock_lock_data ((0));
	else call sub_err_ (code, ME, ACTION_CANT_RESTART, null (), (0), "Error locking lock data.");

	lock_seg.lm_meters = 0;			/* Aggregate ! */
	call lock_manager_$unlock_lock_data ((0));
	return;

CHECK_VERSION:
     proc (cv_p_expected_version, cv_p_received_version, cv_p_structure_name);

	dcl     cv_p_expected_version	 char (8) aligned parameter;
	dcl     cv_p_received_version	 char (8) aligned parameter;
	dcl     cv_p_structure_name	 char (32) aligned parameter;

	if cv_p_expected_version ^= cv_p_received_version
	then call sub_err_ (error_table_$unimplemented_version, ME, ACTION_CANT_RESTART, null (), 0,
		"^/Expected version ^a of the ^a structure." || "^/Received version ^a instead.",
		cv_p_expected_version, cv_p_structure_name, cv_p_received_version);
     end CHECK_VERSION;

%include dm_lm_system_data;
%include dm_lm_meters;
%include sub_err_flags;
%include dm_log_sv_codes;

     end lm_reset_system_meters_;
