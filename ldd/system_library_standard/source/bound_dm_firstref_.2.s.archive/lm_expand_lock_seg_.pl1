/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/*  DESCRIPTION
    Program to add a component to the lock data base. The lock lock must
    be held by the caller.
*/

/* HISTORY:
Written by J. Bongiovanni 12/14/82.
Modified:
08/06/83 by Lee A. Newcomb: removed obsolete code args from calls
	  to dm_per_system_ entries.
05/01/84 by R. Michael Tague:  Added %include dm_lm_meters
10/03/84 by Stanford S. Cox:  For DM program standards.
*/

/* format: style3 */
lm_expand_lock_seg_:
     proc (p_code);

/*  Parameter  */

dcl	p_code		fixed bin (35);

/*  Automatic  */

dcl	freex		fixed bin;
dcl	lock_segx		fixed bin;
dcl	n_segments	fixed bin;

/*  Static */

dcl	ME		char (19) int static options (constant) init ("lm_expand_lock_seg_");

/*  External  */

dcl	dm_system_data_$max_n_transactions
			fixed bin ext static;
dcl	lm_data_$lock_segments_ptr
			ptr external;
dcl	lm_data_$lock_seg_ptr
			ptr external;
dcl	dm_error_$lock_table_overflow
			fixed bin (35) external;
dcl	dm_error_$record_quota_overflow
			fixed bin (35) external;
dcl	error_table_$unimplemented_version
			fixed bin (35) ext static;


/*  Entry  */

dcl	dm_per_system_$create
			entry (char (*), ptr);
dcl	sub_err_		entry () options (variable);


/*  Builtin  */

dcl	addr		builtin;
dcl	divide		builtin;
dcl	fixed		builtin;
dcl	size		builtin;

/*  Condition  */

dcl	record_quota_overflow
			condition;
%page;
	p_code = 0;

	lock_seg_ptr = lm_data_$lock_seg_ptr;
	call CHECK_VERSION (LOCK_SEG_VERSION_1, lock_seg.version, "lock_seg");
	lock_segments_ptr = lm_data_$lock_segments_ptr;

	if lock_seg.n_lock_segments >= lock_seg.max_lock_segments
	then do;
		p_code = dm_error_$lock_table_overflow;
		return;
	     end;

	n_segments = lock_seg.n_lock_segments + 1;

	lock_segno = n_segments;
	call dm_per_system_$create (LOCK_SEGNAME || lock_segno, lock_aux_seg_ptr);

	on record_quota_overflow goto QUOTA_OVERFLOW;

	lock_block_array_ptr = addr (lock_aux_seg.free);
	n_lock_blocks = divide (lock_seg.lock_seg_size - fixed (wordno (lock_block_array_ptr)), size (lock_block), 17);

	lock_aux_seg.n_lock_blocks = n_lock_blocks;
	lock_aux_seg.lock_array_offset = wordno (lock_block_array_ptr);

	do freex = n_lock_blocks to 1 by -1;
	     lock_free_block_ptr = addr (lock_block_array (freex));
	     lock_free_block.seg_inx = n_segments;
	     lock_free_block.type = TYPE_FREE;
	     if freex = n_lock_blocks
	     then lock_free_block.free_fp = lock_seg.free_list_ptr;
	     else lock_free_block.free_fp = VPTR (addr (lock_block_array (freex + 1)));
	end;

	lock_seg.free_list_ptr = VPTR (addr (lock_block_array (1)));
	lock_seg.n_lock_segments = lock_seg.n_lock_segments + 1;

	return;


QUOTA_OVERFLOW:
	p_code = dm_error_$record_quota_overflow;
	return;
%page;
VPTR:
     proc (Lock_Block_ptr) returns (1 aligned like lock_virtual_ptr);

dcl	Lock_Block_ptr	ptr aligned parameter;

dcl	1 Lock_Virtual_Ptr	aligned like lock_virtual_ptr;

dcl	1 Lock_Block	aligned like lock_block based (Lock_Block_ptr);


	Lock_Virtual_Ptr.seg_inx = Lock_Block.seg_inx;
	Lock_Virtual_Ptr.offset = wordno (Lock_Block_ptr);

	return (Lock_Virtual_Ptr);

     end VPTR;

CHECK_VERSION:
     proc (cv_p_expected_version, cv_p_received_version, cv_p_structure_name);

dcl	cv_p_expected_version
			char (8) aligned parameter;
dcl	cv_p_received_version
			char (8) aligned parameter;
dcl	cv_p_structure_name char (32) aligned parameter;

	if cv_p_expected_version ^= cv_p_received_version
	then call sub_err_ (error_table_$unimplemented_version, ME, ACTION_CANT_RESTART, null (), 0,
		"^/Expected version ^a of the ^a structure." || "^/Received version ^a instead.",
		cv_p_expected_version, cv_p_structure_name, cv_p_received_version);
     end CHECK_VERSION;


%page;
%include dm_lm_system_data;
%page;
%include dm_lm_meters;
%page;
%include sub_err_flags;

     end lm_expand_lock_seg_;
