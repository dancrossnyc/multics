/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION:

          This modules is the file_manager_'s error handling facility.  It is
     based on the signalling mechanism, much as sub_err_ is, but never allows
     the signal to escape the control of the file_manager_.  Thus this is not
     for reporting errors to file_manager_'s caller, but for reporting errors
     between file_manager_ routines.
     
          There are three entries, as follows:
     
     $signal - is the entry called to report an error.  It has an entry
     options(variable) calling sequence similar to a simplified sub_err_.
     The usage is:
          call fm_error_util_$signal 
               (code, module_name, action_flags, severity, ioa_control_string
                {, ioa_string_arg_1 ... , ioa_string_arg_N}
     
     This routine builds logs a message in the dm_system_log_ if the
     action_flags indicate that it should, building the message from the
     arguments given.  It also builds an fm_sub_error_info condition structure
     and signals the fm_sub_error_ signal.
     
     $get_code - is called from an fm_sub_error_ condition handler to get the
     status code stored in fm_sub_error_info.
     
     $get_message - is called from an fm_sub_error_ condition handler to get
     the message stored in fm_sub_error_info.
*/

/* HISTORY:

Written by Matthew Pierret, 07/02/84.
Modified:
10/31/84 by Matthew Pierret:  Changed setting of p_module_name when a 
            varying character argument is provided to check the current
            length of the varying string instead of the length of the argument,
            which is always max-length.
            Answered audit comments by changing to use LOG_SV in
            dm_log_sv_codes.incl.pl1 instead of the local constant 
            DEFAULT_SEVERITY.
03/05/85 by Steve Herbst: Replaced dm_log_ with dm_misc_util_$log.
*/

/* format: style2,ind3 */
%page;
fm_error_util_$signal:
   procedure ();


/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_status_code	       fixed bin (35);	/* is a standard system error code. */
      dcl	    p_module_name	       char (32);		/* name of the calling module */
      dcl	    p_fm_error_flags_string
			       bit (36) aligned;	/* contains action flags */
      dcl	    p_severity	       fixed bin (17);	/* severity for call to dm_misc_util_$log */

/* Automatic */

      dcl	    arg_list_ptr	       ptr init (null);
      dcl	    arg_size	       fixed bin (24);
      dcl	    arg_packed	       bit (1) aligned;
      dcl	    (arg_count, arg_type, arg_ndims, arg_scale)
			       fixed bin;

      dcl	    code		       fixed bin (35) init (0);
      dcl	    char_varying_ptr       ptr init (null);
      dcl	    message_buffer_ptr     ptr init (null);
      dcl	    message_length	       fixed bin (21) init (-1);

      dcl	    (pad_sw, nl_sw)	       bit (1) aligned;

      dcl	    1 my_fm_sub_error_info aligned like fm_sub_error_info;

      dcl	    1 my_condition_info    aligned like condition_info;

/* Based */

      dcl	    char_varying	       char (1000000) varying based;
      dcl	    char_nonvarying	       char (1000000) based;
      dcl	    fixed_bin_17	       fixed bin (17) based;
      dcl	    fixed_bin_35	       fixed bin (35) based;
      dcl	    bit_36_aligned	       bit (36) aligned based;
      dcl	    message_buffer	       char (sys_info$max_seg_size * 4) based (message_buffer_ptr);
      dcl	    message	       char (message_length) based (message_buffer_ptr);

/* Builtin */

      dcl	    (addr, addwordno, length, max, min, null, size, string, substr, unspec)
			       builtin;

/* Condition */

      dcl	    cleanup	       condition;

/* Constant */

      dcl	    myname	       init ("fm_error_util_") char (32) varying internal static options (constant);
      dcl	    (
	    CODE_ARGUMENT_IDX      init (1),
	    MODULE_NAME_ARGUMENT_IDX
			       init (2),
	    FM_ERROR_FLAGS_ARGUMENT_IDX
			       init (3),
	    SEVERITY_ARGUMENT_IDX  init (4),
	    FIRST_MESSAGE_ARGUMENT_IDX
			       init (5),
	    NUMBER_OF_REQUIRED_ARGUMENTS
			       init (4)
	    )		       fixed bin internal static options (constant);
      dcl	    NON_ACTION_FLAGS_MASK  init ((18)"1"b || (18)"0"b) bit (36) aligned internal static options (constant);

/* Entry */

      dcl	    cu_$arg_list_ptr       entry (ptr);
      dcl	    cu_$arg_count	       entry (fixed bin, fixed bin (35));
      dcl	    decode_descriptor_     entry (ptr, fixed bin, fixed bin, bit (1) aligned, fixed bin, fixed bin (24),
			       fixed bin);
      dcl	    find_condition_info_   entry (ptr, ptr, fixed bin (35));
      dcl	    get_temp_segment_      entry (char (*), ptr, fixed bin (35));
      dcl	    ioa_$general_rs	       entry (ptr, fixed bin, fixed bin, char (*), fixed bin (21), bit (1) aligned,
			       bit (1) aligned);
      dcl	    dm_misc_util_$log       entry () options (variable);
      dcl	    release_temp_segment_  entry (char (*), ptr, fixed bin (35));
      dcl	    signal_	       entry () options (variable);
      dcl	    sub_err_	       entry () options (variable);

/* External */

      dcl	    dm_error_$programming_error
			       fixed bin (35) ext;
      dcl	    error_table_$badcall   fixed bin (35) ext;
      dcl	    sys_info$max_seg_size  fixed bin (35) ext;

/* END OF DECLARATIONS */

/* format: ^indblkcom,indcomtxt */

/* This "entry point" is actually the main procedure statement above.

   signal:
   entry ();
*/

/**** Get pointer to this routine's arg_list */

      call cu_$arg_list_ptr (arg_list_ptr);
      call cu_$arg_count (arg_count, (0));

      if arg_count < NUMBER_OF_REQUIRED_ARGUMENTS
      then call sub_err_ (error_table_$badcall, myname, ACTION_CANT_RESTART, null, 0,
	      "^/^10xThis entry requires at least ^d arguments.^/^10xOnly ^d arguments were received.",
	      (NUMBER_OF_REQUIRED_ARGUMENTS), arg_count);

/**** Set the parameter values. */

      p_status_code = arg_list_ptr -> arg_list.arg_ptrs (CODE_ARGUMENT_IDX) -> fixed_bin_35;
      p_severity = arg_list_ptr -> arg_list.arg_ptrs (SEVERITY_ARGUMENT_IDX) -> fixed_bin_17;
      p_fm_error_flags_string = arg_list_ptr -> arg_list.arg_ptrs (FM_ERROR_FLAGS_ARGUMENT_IDX) -> bit_36_aligned;
      call decode_descriptor_ (arg_list_ptr, MODULE_NAME_ARGUMENT_IDX, arg_type, arg_packed, arg_ndims, arg_size,
	 arg_scale);
      if arg_type = char_dtype
      then p_module_name =
	      substr (arg_list_ptr -> arg_list.arg_ptrs (MODULE_NAME_ARGUMENT_IDX) -> char_nonvarying, 1,
	      min (32, arg_size));
      else if arg_type = varying_char_dtype
      then
         do;					/* arg_list.arg_ptrs points to data, not length word, */
						/* so must be backed up one word to use varying variable */
	  char_varying_ptr = addwordno (arg_list_ptr -> arg_list.arg_ptrs (MODULE_NAME_ARGUMENT_IDX), -1);
	  p_module_name =
	       substr (char_varying_ptr -> char_varying, 1, min (32, length (char_varying_ptr -> char_varying)));
         end;
      else call sub_err_ (error_table_$badcall, myname, ACTION_CANT_RESTART, null (), (0),
	      "^/Argument ^d is of type ^d.  Only char-varying and char-nonvarying are acceptable.",
	      MODULE_NAME_ARGUMENT_IDX, arg_type);


/**** Setup message buffer in a temporary segment. ****/

      on cleanup call FINISH ();

      call get_temp_segment_ ((myname), message_buffer_ptr, code);
      if code ^= 0
      then call sub_err_ (code, myname, ACTION_CANT_RESTART, null, 0,
	      "^/^10xAn attempt to acquire a temporary segment failed while^/^10xpreparing error message.");

      call ioa_$general_rs (arg_list_ptr, FIRST_MESSAGE_ARGUMENT_IDX, FIRST_MESSAGE_ARGUMENT_IDX + 1, message_buffer,
	 message_length, pad_sw, nl_sw);

      unspec (my_fm_sub_error_info) = ""b;
      fm_sub_error_info_ptr = addr (my_fm_sub_error_info);

      fm_sub_error_info.header.version = FM_SUB_ERROR_INFO_VERSION_200;
      fm_sub_error_info.header.length = size (fm_sub_error_info);
      fm_sub_error_info.header.status_code = p_status_code;
      string (fm_sub_error_info.header.action_flags) = p_fm_error_flags_string & NON_ACTION_FLAGS_MASK;
      fm_sub_error_info.header.action_flags.support_signal = "1"b;
      fm_sub_error_info.module_name = p_module_name;

      if message_length <= 256
      then
         do;
	  fm_sub_error_info.header.info_string = message;
	  fm_sub_error_info.message_length = message_length;
	  fm_sub_error_info.message_ptr = addr (fm_sub_error_info.header.info_string);
         end;
      else
         do;
	  fm_sub_error_info.header.info_string = "";
	  fm_sub_error_info.message_length = message_length;
	  fm_sub_error_info.message_ptr = message_buffer_ptr;
         end;


/**** Log message if requested. */

      if addr (p_fm_error_flags_string) -> fm_error_flags.log.system
      then call dm_misc_util_$log (max (LOG_SV, p_severity), fm_sub_error_info.header.status_code, fm_sub_error_info.module_name,
	      message);



/**** Signal fm_sub_error_ condition. */

      call signal_ ("fm_sub_error_", null, fm_sub_error_info_ptr, null);

      do while (fm_sub_error_info.header.action_flags.cant_restart);
						/* If user can't hack return */
         call signal_ ("illegal_return", null, fm_sub_error_info_ptr, null);
      end;

      call FINISH ();

      return;
%page;
FINISH:
   proc ();

      if message_buffer_ptr ^= null
      then call release_temp_segment_ ((myname), message_buffer_ptr, (0));

   end FINISH;
%page;
get_code:
   entry () returns (fixed bin (35));

      fm_sub_error_info_ptr = GET_ERROR_INFO_PTR ();

      return (fm_sub_error_info.header.status_code);




get_message:
   entry () returns (char (*));

      fm_sub_error_info_ptr = GET_ERROR_INFO_PTR ();

      message_length = fm_sub_error_info.message_length;
      message_buffer_ptr = fm_sub_error_info.message_ptr;

      return (message);


GET_ERROR_INFO_PTR:
   proc () returns (ptr);

      dcl	    geip_code	       fixed bin (35) init (0);

      condition_info_ptr = addr (my_condition_info);
      call find_condition_info_ ((null), condition_info_ptr, geip_code);
      if geip_code ^= 0
      then call sub_err_ (geip_code, myname, ACTION_CANT_RESTART, null, 0, "^/Attempt to find condition info failed.");
      if condition_info_ptr = null
      then call sub_err_ (dm_error_$programming_error, myname, ACTION_CANT_RESTART, null, 0,
	      "^/^10xThis entry was invoked to handle a ^a condition,^/^10xbut no condition info exists.",
	      FM_SUB_ERROR_CONDITION_NAME);
      if condition_info.condition_name ^= FM_SUB_ERROR_CONDITION_NAME
      then call sub_err_ (dm_error_$programming_error, myname, ACTION_CANT_RESTART, null (), 0,
	      "^/^10xThis entry was invoked to handle a ^a condition,^/^10xbut the current condition is ^a.",
	      FM_SUB_ERROR_CONDITION_NAME, condition_info.condition_name);
      if condition_info.info_ptr = null
      then call sub_err_ (dm_error_$programming_error, myname, ACTION_CANT_RESTART, null (), 0,
	      "^/The condition_info.info_ptr variable is not set.");

      if condition_info.info_ptr -> fm_sub_error_info.header.version ^= FM_SUB_ERROR_INFO_VERSION_200
      then call sub_err_ (dm_error_$programming_error, myname, ACTION_CANT_RESTART, null, 0,
	      "^/Expected version ^d of the fm_sub_error_info structure; received ^d.", FM_SUB_ERROR_INFO_VERSION_200,
	      condition_info.info_ptr -> fm_sub_error_info.header.version);

      return (condition_info.info_ptr);


   end GET_ERROR_INFO_PTR;
%page;
%include dm_fm_sub_error_info;
%page;
%include dm_fm_sub_error_flags;
%page;
%include condition_info;
%page;
%include condition_info_header;
%page;
%include sub_err_flags;
%page;
%include std_descriptor_types;
%page;
%include dm_log_sv_codes;
%page;
%include arg_list;

   end fm_error_util_$signal;
