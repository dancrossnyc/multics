/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(86-02-27,Pierret), approve(86-02-27,MCR7340),
     audit(86-04-28,Newcomb), install(86-05-06,MR12.0-1054):
     Changed to execute file_mangaer_$post_transaction before unlocking locks.
                                                   END HISTORY COMMENTS */


/* format: style4,ifthenstmt,^indproc,^indcomtxt */
/*---------------*/

tm_commit: proc (A_txn_id, A_code);

/* DESCRIPTION:

   This procedure implements transaction_manager_$commit_txn
   Committing a transaction consists of flushing all modifications to disk
   and writing a committed-mark in the journal. After being committed, the
   transaction disappears.
*/

/* HISTORY:

04/23/85 by Matthew C. Pierret:  Switched order of calls to
            file_manager_$post_transaction and lock_manager_$unlock_all.  This
            allows file_manager_$post_transaction to operate underthe safety
            of the locks acquired by the transaction.
Written by Steve Herbst, 08/09/82. */
/* Modified:
08/16/82 by Steve Herbst: Changed to use dm_data_$tm_tdt_ptr and new
	dm_tm_tdt.incl.pl1
08/23/82 by Steve Herbst: Fixed to initialize A_code.
08/26/82 by Steve Herbst: Changed calling sequence of bjm_$flush_transaction.
09/10/82 by Steve Herbst: Changed to eliminate locking.
09/23/82 by Lindsey Spratt: Changed to use new lock_manager_ calling sequence.
10/04/82 by Steve Herbst: Changed to just abort if in one of the test modes.
10/14/82 by Steve Herbst: Change pfm_ calling sequence and added check for
	funny states.
10/28/82 by Steve Herbst: Changed to always call fm_$post_commit (rather than
	check post-commit flag in TDT).
11/01/82 by Steve Herbst: Made to turn on txn's error_sw for error states.
11/05/82 by Steve Herbst: Made to set tm_tdt.error_code on error return.
01/12/83 by Steve Herbst: Made to log its errors.
01/14/83 by Steve Herbst: Changed to complete previous error commit, and to
	call tm_error_state.
03/28/84 by Lee A. Newcomb:  changed tm_get_state_info call to be
	  transaction_manager_$get_state_info.
09/27/84 by Steve Herbst: Changed in response to audit comments.
02/07/85 by S. Cox: Added fm$post_transaction call (moved from lm_per_system_)
                    Added addr dcl.
*/
%page;
/* DECLARATIONS */

/* Parameters */

dcl  A_txn_id bit (36) aligned;
dcl  A_code fixed bin (35);


/* Constants */

dcl  ME char (32) int static options (constant) init ("tm_commit");

/* Based */

/* Static */

/* Automatic */

dcl  op_name char (32);
dcl  txn_id bit (36) aligned;
dcl  (mode, txn_index) fixed bin;
dcl  (code, op_error_code) fixed bin (35);

/* External */

dcl  dm_data_$current_txn_id bit (36) aligned ext;
dcl  dm_data_$current_txn_index fixed bin ext;
dcl  dm_data_$my_process_id bit (36) ext;
dcl  dm_data_$suspended_txn_index fixed bin ext;
dcl  dm_data_$tm_tdt_ptr ptr external;
dcl  dm_error_$invalid_current_txn fixed bin (35) ext;
dcl  dm_error_$no_current_transaction fixed bin (35) ext;
dcl  dm_error_$not_own_transaction fixed bin (35) ext;
dcl  dm_error_$transaction_not_current fixed bin (35) ext;
dcl  dm_error_$transaction_suspended fixed bin (35) ext;
dcl  error_table_$unimplemented_version fixed bin (35) ext;

/* Entries */

dcl  before_journal_manager_$flush_transaction entry (bit (36) aligned, fixed bin, fixed bin (35));
dcl  before_journal_manager_$write_committed_mark entry (bit (36) aligned, fixed bin, fixed bin (35));
dcl  lock_manager_$unlock_all entry;
dcl  file_manager_$flush_modified_ci entry (bit (36) aligned, fixed bin, fixed bin (35));
dcl  file_manager_$post_transaction entry ();
dcl  tm_abort entry (bit (36) aligned, fixed bin (35));
dcl  tm_cleanup entry (ptr, fixed bin);
dcl  tm_cleanup$restart_error entry (ptr, fixed bin);
dcl  tm_error_state entry (fixed bin, fixed bin, fixed bin (35), char (*), char (*));
dcl  transaction_manager_$get_state_info entry (fixed bin, char (*), fixed bin (35));

/* Builtins */

dcl  (addr, unspec) builtin;

/* Conditions */

dcl  cleanup condition;

/* END OF DECLARATIONS */
%page;
	A_code = 0;

	tm_tdt_ptr = dm_data_$tm_tdt_ptr;

	if tm_tdt.version ^= TM_TDT_VERSION_3 then call ERROR_RETURN (error_table_$unimplemented_version);

	if dm_data_$current_txn_index = 0 then
	     if dm_data_$suspended_txn_index ^= 0 then call ERROR_RETURN (dm_error_$transaction_suspended);
	     else call ERROR_RETURN (dm_error_$no_current_transaction);

	txn_index = dm_data_$current_txn_index;

	if txn_index < 1 | txn_index > tm_tdt.entry_count then
	     call ERROR_RETURN (dm_error_$invalid_current_txn);

	if A_txn_id = "0"b | A_txn_id = tm_tdt.txn_id (txn_index) then
	     txn_id = tm_tdt.txn_id (txn_index);
	else call ERROR_RETURN (dm_error_$transaction_not_current);

	tm_tdt_entry_ptr = addr (tm_tdt.entry (txn_index));

	if tm_tdt_entry.process_id ^= dm_data_$my_process_id then
	     call ERROR_RETURN (dm_error_$not_own_transaction);

	if tm_tdt_entry.state ^= TM_IN_PROGRESS_STATE then do;

	     call transaction_manager_$get_state_info ((tm_tdt_entry.state), op_name, op_error_code);
	     if op_name ^= OP_NAME_COMMIT then
		call ERROR_RETURN (op_error_code);	/* dm_error_$unfinished_(abort rollback) */

	     call tm_cleanup$restart_error (tm_tdt_ptr, txn_index); /* finishes an incomplete commit */
	     if tm_tdt_entry.error_sw then
		call ERROR_STATE ((tm_tdt_entry.state), tm_tdt_entry.error_code, "tm_cleanup");
	     return;
	end;

	mode = tm_tdt_entry.mode;
	if mode = TM_TEST_NORMAL_MODE |
	     mode = TM_TEST_STATISTICAL_MODE |
	     mode = TM_TEST_READ_ONLY_MODE |
	     mode = TM_TEST_NEVER_WRITE_MODE then do;

	     call tm_abort (A_txn_id, A_code);		/* test modes: just abort */
	     return;
	end;

	on cleanup begin;
	     call tm_cleanup (tm_tdt_ptr, txn_index);
	end;

	tm_tdt_entry.state = TM_COMMIT_FLUSHING_TXN_STATE;

	call before_journal_manager_$flush_transaction (txn_id, txn_index, code);
	if code ^= 0 then
	     call ERROR_STATE (TM_COMMIT_FLUSHING_TXN_ERROR, code, "before_journal_manager_$flush_transaction");

	tm_tdt_entry.state = TM_COMMIT_FLUSHING_CI_STATE;

	call file_manager_$flush_modified_ci (txn_id, txn_index, code);
	if code ^= 0 then
	     call ERROR_STATE (TM_COMMIT_FLUSHING_CI_ERROR, code, "file_manager_$flush_modified_ci");

	tm_tdt_entry.state = TM_COMMIT_WRITING_MARK_STATE;

	call before_journal_manager_$write_committed_mark (txn_id, txn_index, code);
	if code ^= 0 then
	     call ERROR_STATE (TM_COMMIT_WRITING_MARK_ERROR, code, "before_journal_manager_$write_committed_mark");

	tm_tdt_entry.state = TM_COMMIT_UNLOCKING_STATE;

	call file_manager_$post_transaction;

	call lock_manager_$unlock_all;

	tm_tdt_entry.state = TM_COMMIT_METERING_STATE;

/* Dump meters here */

	dm_data_$current_txn_id = "0"b;
	dm_data_$current_txn_index = 0;

	tm_tdt_entry.state = 0;			/* show intent to zero whole entry */
	unspec (tm_tdt_entry.transaction) = "0"b;	/* transaction is now officially gone */

	A_txn_id = "0"b;				/* zero caller's arg */
RETURN:
	return;
%page;
ERROR_RETURN: proc (P_code);

dcl  P_code fixed bin (35);

	A_code = P_code;
	go to RETURN;

     end ERROR_RETURN;
%page;
ERROR_STATE: proc (P_state, P_code, P_name);

dcl  P_state fixed bin;
dcl  P_code fixed bin (35);
dcl  P_name char (*);

	call tm_error_state (txn_index, P_state, P_code, ME, P_name);

	A_code = P_code;

	go to RETURN;

     end ERROR_STATE;
%page;
%include dm_tm_tdt;
%page;
%include dm_tm_states;
%page;
%include dm_tm_modes;


     end tm_commit;
