/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */
/* format: style4,ifthenstmt,^indproc,^indcomtxt */
/*---------------*/

tm_suspend: proc (A_code);

/* DESCRIPTION:

   The entry point tm_suspend$tm_suspend suspends the current transaction.
   The entry point tm_suspend$tm_resume resumes the current transaction.
*/

/* HISTORY:

Written by Steve Herbst, 11/05/82.
Modified:
01/20/83 by Steve Herbst: Added cleanup handlers.
03/21/84 by Steve Herbst: Fixed to initialize code argument to zero.
10/18/84 by Steve Herbst: Changed in response to audit comments.
01/04/85 by Steve Herbst: Reformatted history section in response to audit.
*/

/* DECLARATIONS */

/* Parameters */

dcl  A_code fixed parameter;



/* Constants */

/* Based */

/* Static */

/* Automatic */

dcl (current_id, suspended_id) bit (36) aligned;
dcl (current_index, suspended_index) fixed bin;

/* External */

dcl dm_data_$current_txn_id bit (36) aligned ext;
dcl dm_data_$current_txn_index fixed bin ext;
dcl dm_data_$suspended_txn_id bit (36) aligned ext;
dcl dm_data_$suspended_txn_index fixed bin ext;
dcl dm_data_$tm_tdt_ptr ptr ext;
dcl dm_error_$no_current_transaction fixed bin (35) ext;
dcl dm_error_$no_suspended_transaction fixed bin (35) ext;
dcl dm_error_$transaction_in_progress fixed bin (35) ext;
dcl dm_error_$transaction_suspended fixed bin (35) ext;
dcl dm_error_$transactions_out_of_sequence fixed bin (35) ext;
dcl dm_error_$transaction_not_found fixed bin (35) ext;

/* Entries */

dcl tm_get_txn_index entry (ptr, bit (36) aligned, fixed bin (35)) returns (fixed bin);

/* Builtins */

/* Conditions */

dcl cleanup condition;

/* END OF DECLARATIONS */
%page;
	A_code = 0;

	if dm_data_$current_txn_index = 0 & dm_data_$suspended_txn_index = 0 then
	     call ERROR_RETURN (dm_error_$no_current_transaction);

	if dm_data_$suspended_txn_index ^= 0 then
	     if dm_data_$current_txn_index ^= 0 then
		call ERROR_RETURN (dm_error_$transactions_out_of_sequence);
	     else call ERROR_RETURN (dm_error_$transaction_suspended);

	call SETUP ();

	on cleanup begin;

	     tm_tdt.suspended_sw (current_index) = "1"b;

	     call SWITCH ();
	end;

	tm_tdt.suspended_sw (current_index) = "1"b;

	call SWITCH ();
RETURN:
	return;
%page;
tm_resume: entry (A_code);

/* This entry point resumes the currently suspended transaction. */

	A_code = 0;

	if dm_data_$current_txn_index = 0 & dm_data_$suspended_txn_index = 0 then
	     call ERROR_RETURN (dm_error_$no_current_transaction);

	if dm_data_$suspended_txn_index = 0 then call ERROR_RETURN (dm_error_$no_suspended_transaction);

	if dm_data_$current_txn_index ^= 0 then call ERROR_RETURN (dm_error_$transaction_in_progress);

	call SETUP ();

	on cleanup begin;

	     call SWITCH ();

	     tm_tdt.suspended_sw (suspended_index) = "0"b;
	end;

	call SWITCH ();

	tm_tdt.suspended_sw (suspended_index) = "0"b;

	return;
%page;
ERROR_RETURN: proc (P_code);

dcl P_code fixed bin (35);

	A_code = P_code;
	go to RETURN;

end ERROR_RETURN;
%page;
SETUP: proc;

	current_id = dm_data_$current_txn_id;
	current_index = dm_data_$current_txn_index;
	suspended_id = dm_data_$suspended_txn_id;
	suspended_index = dm_data_$suspended_txn_index;

	tm_tdt_ptr = dm_data_$tm_tdt_ptr;

end SETUP;
%page;
SWITCH: proc;

	dm_data_$suspended_txn_id = current_id;
	dm_data_$suspended_txn_index = current_index;
	dm_data_$current_txn_id = suspended_id;
	dm_data_$current_txn_index = suspended_index;

end SWITCH;
%page;
%include dm_tm_tdt;


end tm_suspend;
