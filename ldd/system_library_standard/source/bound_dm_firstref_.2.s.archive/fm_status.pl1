/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   *********************************************************** */
/* format: style4,ifthenstmt,^indproc,^indcomtxt */
/*---------------*/

fm_status: proc (A_dirname, A_entryname, A_file_status_ptr, A_code);

/* DESCRIPTION:

   This  subroutine  returns status information about a DM file that is
   not returned by hcs_$status.  Information is returned  in  the  structure
   declared in dm_file_status.incl.pl1.
*/

/* HISTORY:

Written by Steve Herbst, 08/13/84.
Modified:
11/07/84 by Steve Herbst: Changed in response to audit comments:
	Removed cleanup windows, added ERROR_RETURN procedure, changed to
	call fm_get_last_ci_num and use fm_attributes.ci_size_in_bits.
11/27/84 by Steve Herbst: Changed further in response to audit comments:
	Changed to report CLEAN_UP errors on normal termination, and call
	sub_err_ with ACTION_CANT_RESTART.
12/17/84 by Steve Herbst: Changed again in response to audit comments:
	Fixed SUB_ERROR_CODE to return cond_info.status_code instead of
	sub_error_info.retval, compute effective mode using validation
	level instead of current ring, prevent CLEAN_UP from ever being
	called twice.
02/26/85 by Steve Herbst: Changed again in response to audit comments:
	Changed CLEAN_UP proc, not its caller, to turn on cleanup_called_sw.
*/

/* DECLARATIONS */

/* Parameters */

dcl  A_dirname char (*) parameter;
dcl  A_entryname char (*) parameter;
dcl  A_file_status_ptr ptr parameter;
dcl  A_code fixed bin (35) parameter;


/* Constants */

dcl ME char (32) int static options (constant) init ("fm_status");
dcl DONT_RETURN_CODE fixed bin int static options (constant) init (-1);

/* Based */

/* Static */

/* Automatic */

dcl 1 auto_ci_parts aligned,
   2 number_of_parts fixed bin init (1),
   2 pad fixed bin init (0),
   2 part (1) like ci_parts.part;

dcl 1 cond_info aligned like condition_info;

dcl 1 file_attributes_space aligned like file_attributes;

dcl dirname char (168);
dcl entryname char (32);
dcl opening_id bit (36);
dcl txn_id bit (36) aligned;
dcl cleanup_called_sw bit (1) aligned;
dcl callers_level fixed bin;
dcl (begin_code, code) fixed bin (35);

/* External */

dcl dm_error_$bad_file_atrs_ver fixed bin (35) ext;
dcl dm_error_$transaction_in_progress fixed bin (35) ext;
dcl error_table_$null_info_ptr fixed bin (35) ext;
dcl error_table_$unimplemented_version fixed bin (35) ext;

/* Entries */

dcl continue_to_signal_ entry (fixed bin (35));
dcl cu_$level_get entry (fixed bin);
dcl file_manager_$close entry (bit (36), fixed bin (35));
dcl file_manager_$get_user_access_modes entry (char (*), char (*), char (32), fixed bin,
	bit (36) aligned, bit (36) aligned, fixed bin (35));
dcl file_manager_$open entry (char (*), char (*), bit (36), fixed bin (35));
dcl find_condition_info_ entry (ptr, ptr, fixed bin (35));
dcl fm_get_$internal_get entry (bit (36), fixed bin, ptr, fixed bin (35));
dcl fm_get_last_ci_num entry (char (*), fixed bin, fixed bin (27));
dcl get_group_id_ entry() returns(char(32));
dcl pathname_ entry (char(*), char(*)) returns(char(168));
dcl sub_err_ entry() options(variable);
dcl transaction_manager_$begin_txn entry (fixed bin, bit (36) aligned, bit (36) aligned, fixed bin (35));
dcl transaction_manager_$commit_txn entry (bit (36) aligned, fixed bin (35));

/* Builtins */

dcl (addr, null, unspec) builtin;

/* Conditions */

dcl (cleanup, sub_error_) condition;

/* END OF DECLARATIONS */
%page;
	dirname = A_dirname;
	entryname = A_entryname;
	dm_file_status_ptr = A_file_status_ptr;
	A_code, begin_code = 0;
	cleanup_called_sw = "0"b;

	if dm_file_status_ptr = null then call ERROR_RETURN (error_table_$null_info_ptr);

	if dm_file_status.version ^= DM_FILE_STATUS_VERSION_1 then
	     call ERROR_RETURN (error_table_$unimplemented_version);

/* Open the DM file */

	opening_id = "0"b;
	on cleanup call CLEAN_UP (code);

	on sub_error_ begin;
	     code = SUB_ERROR_CODE ();
	     if code ^= DONT_RETURN_CODE then call ERROR_RETURN (code);
					/* DONT_RETURN_CODE => want to continue signalling sub_error_ */
	end;

	call file_manager_$open (dirname, entryname, opening_id, code);
	if opening_id = "0"b then call ERROR_RETURN (code);

	revert sub_error_;

/* Need a transaction to read the attributes in the file */

	call transaction_manager_$begin_txn (TM_NORMAL_MODE, "0"b, txn_id, begin_code);
	if txn_id = "0"b then call ERROR_RETURN (begin_code);

/* Get file attributes */

	unspec (file_attributes_space) = "0"b;
	file_attributes_ptr = addr (file_attributes_space);

	auto_ci_parts.part (1).local_ptr = file_attributes_ptr;
	auto_ci_parts.part (1).offset_in_bytes = CI_0_ADDRESSABLE_LENGTH;
	auto_ci_parts.part (1).length_in_bytes = CI_ADDRESSABLE_LENGTH - CI_0_ADDRESSABLE_LENGTH;

	call fm_get_$internal_get (opening_id, 0, addr (auto_ci_parts), code);
	if code ^= 0 then call ERROR_RETURN (code);

	if file_attributes.version ^= FILE_ATTRIBUTES_VERSION_2 then
						/* calls sub_err_ rather than just return a code since the
						   bad version is in file_attributes, not dm_file_status */
	     call sub_err_ (dm_error_$bad_file_atrs_ver, ME, ACTION_CANT_RESTART, null, 0,
		"File attributes version was ^a, should have been ^a",
		file_attributes.version, FILE_ATTRIBUTES_VERSION_2);

	dm_file_status.fm_unique_id = file_attributes.unique_id;
	dm_file_status.date_time_created = file_attributes.date_time_created;
	dm_file_status.ring_brackets (1) = file_attributes.ring_brackets.write;
	dm_file_status.ring_brackets (2) = file_attributes.ring_brackets.read;
	unspec (dm_file_status.switches) = "0"b;
	dm_file_status.protected_sw = file_attributes.protected;
	dm_file_status.no_concurrency_sw = file_attributes.no_concurrency;
	dm_file_status.no_rollback_sw = file_attributes.no_rollback;

/* Get other info */

	call cu_$level_get (callers_level);
	call file_manager_$get_user_access_modes (dirname, entryname, get_group_id_ (), callers_level,
	     dm_file_status.mode, "0"b, code);
	if code ^= 0 then dm_file_status.mode = "0"b;

	dm_file_status.ci_size = file_attributes.ci_size_in_bytes;

	call fm_get_last_ci_num
	     (pathname_ (dirname, entryname), (file_attributes.blocking_factor), dm_file_status.highest_ci);
	
RETURN:
	if ^cleanup_called_sw then do;
	     call CLEAN_UP (code);
	     if code ^= 0 & A_code = 0 then call ERROR_RETURN (code);
	end;
	
	return;
%page;
CLEAN_UP: proc (P_cleanup_code);

/* This procedure completes even if one of its calls returns an error.
   The intent is to restore the environment and the file to their original
   states as much as possible. It sets a parameter code instead of reporting
   its own errors, to leave the choice up to the caller: an error is reported
   at normal termination time, but not when "cleanup" is signalled. */

dcl (P_cleanup_code, code) fixed bin (35);

	code = 0;
	cleanup_called_sw = "1"b;

	if opening_id ^= "0"b then call file_manager_$close (opening_id, P_cleanup_code);
	if txn_id ^= "0"b then
	     if begin_code = dm_error_$transaction_in_progress then;
						/* Can't commit or abort the user's previous transaction */
	     else do;
		call transaction_manager_$commit_txn (txn_id, code);  /* could have aborted instead; doesn't
							    /* matter since no data has been changed */
		if code ^= 0 & P_cleanup_code = 0 then P_cleanup_code = code;
	     end;

end CLEAN_UP;
%page;
ERROR_RETURN: proc (P_code);

dcl P_code fixed bin (35);

	A_code = P_code;
	go to RETURN;

end ERROR_RETURN;
%page;
SUB_ERROR_CODE: proc () returns (fixed bin (35));

/* Returns the error code that sub_error_ was signalled with */

dcl code fixed bin (35);

	call find_condition_info_ (null, addr (cond_info), code);
	if code ^= 0 then return (code);

	if cond_info.info_ptr -> sub_error_info.default_restart then do;
						/* should only happen when testing tm_per_process_init_ */
	     call continue_to_signal_ (0);
	     return (DONT_RETURN_CODE);
	end;

	else return (cond_info.info_ptr -> sub_error_info.status_code);

end SUB_ERROR_CODE;
%page;
%include dm_ci_parts;
%page;
%include condition_info;
%page;
%include condition_info_header;
%page;
%include dm_ci_lengths;
%page;
%include dm_file_status;
%page;
%include dm_fm_file_attributes;
%page;
%include dm_tm_modes;
%page;
%include sub_err_flags;
%page;
%include sub_error_info;

end fm_status;
