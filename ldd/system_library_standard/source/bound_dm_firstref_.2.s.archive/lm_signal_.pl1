/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION:
   Signals the condition: "transaction_deadlock_" when a deadlock exists
   involving the current transaction, "transaction_lock_timeout_" when a 
   timeout occurs waiting for a control interval lock.  It is the 
   responsibility of the DM caller to handle these conditions as necessary.
*/

/* HISTORY:
Written by Benson I. Margulies 06/01/83.
Modified:
10/03/84 by Stanford S. Cox: Chg to set support_signal on, rn TDI to local_txn*
12/06/84 by Stanford S. Cox: Added dm_lm prefix to txn_deadlock_info.incl.pl1.
02/05/85 by Stanford S. Cox: Chg to: handle transaction_lock_timeout_, rollback
   current txn.  Renamed from lm_signal_deadlock_.
02/12/85 by Stanford S. Cox: Chg to set cant_restart, improve ioa_$rsnnl call
   which builds info_string, and moved rollback_txn call before signal_ call.
03/02/85 by Lindsey L. Spratt:  Fixed to not reference p_give_up_time when
            using the $deadlock entry (p_give_up_time is only a parameter to
            the $timeout entry).
*/

/* format: style2 */
lm_signal_$deadlock:
     proc (p_txn, p_file_uid, p_ci_number, p_requested_mode);

/* Parameter */

	declare p_txn		 bit (36) aligned parameter;
	declare p_file_uid		 bit (36) aligned parameter;
	declare p_ci_number		 fixed bin (35) parameter;
	declare p_requested_mode	 fixed bin parameter;
	declare p_give_up_time	 fixed bin (71);

/* Automatic */

	declare code		 fixed bin (35);
	declare give_up_time	 fixed bin (71) init (-1);
	declare signal_type		 fixed bin (17);

	declare 1 local_txn_timeout_info
				 aligned like txn_timeout_info;
	declare 1 local_txn_dlk_info	 aligned like txn_deadlock_info;

/* Static */

	declare (
	        DEADLOCK_SIGNAL_TYPE	 fixed bin (17) init (1),
	        TIMEOUT_SIGNAL_TYPE	 fixed bin (17) init (2),
	        ME		 char (10) init ("lm_signal_"),
	        NO		 bit (1) init ("0"b),
	        YES		 bit (1) init ("1"b)
	        )			 internal static options (constant);

/* Builtin */

	dcl     (addr, bin, null, unspec)
				 builtin;

/* External */

	declare (
	        dm_error_$lock_deadlock,
	        dm_error_$lock_timeout,
	        dm_error_$programming_error
	        )			 fixed bin (35) external static;

/* Entry */

	declare ioa_$rsnnl		 entry options (variable);
	declare signal_		 entry options (variable);
	declare sub_err_		 entry () options (variable);
	declare transaction_manager_$rollback_txn
				 entry (bit (36) aligned, fixed bin, fixed bin (35));

/**** lm_signal_$deadlock */

	signal_type = DEADLOCK_SIGNAL_TYPE;
	goto JOIN;

lm_signal_$timeout:
     entry (p_txn, p_file_uid, p_ci_number, p_requested_mode, p_give_up_time);

	give_up_time = p_give_up_time;
	signal_type = TIMEOUT_SIGNAL_TYPE;
	goto JOIN;

JOIN:	/*** Fill in common info to both condition structures, move by name if timeout */
	unspec (local_txn_dlk_info) = ""b;
	local_txn_dlk_info.info_string = "";
	local_txn_dlk_info.action_flags.cant_restart = YES;
	local_txn_dlk_info.action_flags.support_signal = YES;
	local_txn_dlk_info.file_uid = p_file_uid;
	local_txn_dlk_info.control_interval = p_ci_number;
	local_txn_dlk_info.transaction_id = p_txn;
	call ioa_$rsnnl (
	     "Transaction ID: ^d ^[Timeout ^d^;^s^] File UID: ^w^[, Control Interval ^d^;^s^]. Requested ^a mode lock.",
	     local_txn_dlk_info.info_string, (0), bin (p_txn), (signal_type = TIMEOUT_SIGNAL_TYPE), give_up_time,
	     p_file_uid, p_ci_number ^= -1, p_ci_number, LOCK_MODE_NAMES (p_requested_mode));

	call transaction_manager_$rollback_txn (p_txn, (0), code);

	if signal_type = DEADLOCK_SIGNAL_TYPE
	then do;
		local_txn_dlk_info.version = TXN_DEADLOCK_INFO_VERSION_1;
		local_txn_dlk_info.status_code = dm_error_$lock_deadlock;
		call signal_ (TXN_DEADLOCK_CONDITION_NAME, null (), addr (local_txn_dlk_info));
	     end;
	else if signal_type = TIMEOUT_SIGNAL_TYPE
	then do;
		local_txn_timeout_info = local_txn_dlk_info, by name;
		local_txn_timeout_info.version = TXN_TIMEOUT_INFO_VERSION_1;
		local_txn_timeout_info.status_code = dm_error_$lock_timeout;
		local_txn_timeout_info.give_up_time = give_up_time;
		call signal_ (TXN_TIMEOUT_CONDITION_NAME, null (), addr (local_txn_timeout_info));
	     end;
	else call sub_err_ (dm_error_$programming_error, ME, ACTION_CANT_RESTART, null (), 0, "^/^a",
		local_txn_dlk_info.info_string);

	return;
%page;
%include condition_info_header;
%page;
%include dm_lm_txn_timeout_info;
%page;
%include dm_lm_txn_deadlock_info;
%page;
%include dm_lock_modes;
%page;
%include sub_err_flags;

     end lm_signal_$deadlock;
