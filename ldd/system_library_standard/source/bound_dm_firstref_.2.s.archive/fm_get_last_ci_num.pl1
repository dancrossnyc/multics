/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(86-11-18,Blair), approve(86-11-18,PBF7311), audit(86-11-26,Dupuis),
     install(86-12-09,MR12.0-1237):
     Correct the p_blocking_factor parameter to be aligned so we don't always
     get a value of zero from the top half of the word being passed in. This
     was causing the copying of dm files to fail and status to give erroneous
     results for the last-control interval.
                                                   END HISTORY COMMENTS */


/* DESCRIPTION:

     This subroutine determines the number of the last control interval
     in a file.  It does so as follows:
     
     1) Find the component which has the highest name (component names are
     "0", "1", "2", ...).  This component, say with name "N", is the last
     component of the file and its last page is the last control interval
     of the file.
     
     2) Get the current length of "N", say M pages / control intervals.
     
     3) The number of components prior to "N" is N - 1 + 1, or N.  The -1
     is to exclude component "N" and the +1 is to include component "0".
     The number of control intervals prior to component "N" is
     N * <p_blocking_factor>. p_blocking_factor is the maximum number of
     control intervals per component.  So calculate the number of the last 
     control interval with the expression: N * <p_blocking_factor> + M.
     
     The reason why we don't just add up the lengths of all the components
     is that we are not calculating the number of control intervals in use.
     We are looking for the number of the last control interval in use.  It
     is very possible that control intervals and even components have been
     freed and are no longer in use, but that does not change the number of 
     the last control interval.
*/

/* HISTORY:
Written by Matthew Pierret, 08/01/84.
     (Extracted from fm_open_.pl1, written by Jeff Ives.)
Modified:
11/16/84 by Matthew Pierret:  Answered audit comments:  declared all builtins,
            used structures in star_structures.incl.pl1 instead of declaring
            them locally.
12/11/84 by Lindsey L. Spratt:  Fixed to set the validation level down to
            get_ring_().
*/

/* format: style2,ind3 */

fm_get_last_ci_num:
   proc (p_file_path_name, p_blocking_factor, p_last_ci_num);


/* START OF DECLARATIONS */

/* Parameter */

      dcl	    p_blocking_factor      fixed bin (17) parm;
      dcl	    p_file_path_name       char (168) parm;
      dcl	    p_last_ci_num	       fixed bin (27) parm;

/* Automatic */

      dcl	    code		       fixed bin (35) init (0);
      dcl	    component_nindex       fixed bin init (0);
      dcl	    component_num	       fixed bin init (0);
      dcl	    entry_idx	       fixed bin init (0);
      dcl	    file_path_name	       char (168);
      dcl	    highest_component_nindex
			       fixed bin init (0);
      dcl	    highest_component_num  fixed bin init (-1);

      dcl	    1 my_status_branch     aligned like status_branch;

      dcl	    saved_level	       fixed bin init (0);

/* Based */

/* Builtin */

      dcl	    (addr, bin, hbound, lbound, null, rtrim, sum, unspec)
			       builtin;

/* Condition */

      dcl	    cleanup	       condition;

/* Constant */

      dcl	    myname	       init ("fm_get_last_ci_num") char (32) varying internal static options (constant);
      dcl	    NO_ARG	       init ("") char (1) internal static options (constant);
      dcl	    STAR_BRANCHES_ONLY     fixed bin (2) static options (constant) init (2);
      dcl	    CHASE_LINKS	       fixed bin (1) static options (constant) init (1);

/* Entry */

      dcl	    cu_$level_get	       entry (fixed bin);
      dcl	    cu_$level_set	       entry (fixed bin);
      dcl	    fm_error_util_$signal  entry options (variable);
      dcl	    get_ring_	       entry () returns (fixed bin (3));
      dcl	    get_system_free_area_  entry () returns (ptr);
      dcl	    hcs_$star_	       entry (char (*), char (*), fixed bin (2), ptr, fixed bin, ptr, ptr, fixed bin (35));
      dcl	    hcs_$status_long       entry (char (*), char (*), fixed bin (1), ptr, ptr, fixed bin (35));

/* External */

      dcl	    dm_error_$programming_error
			       fixed bin (35) ext;

/* END OF DECLARATIONS */
%page;
      file_path_name = p_file_path_name;

      star_names_ptr = null ();
      star_entry_ptr = null ();
      status_area_ptr = null ();
      status_ptr = null ();
      unspec (my_status_branch) = ""b;

      call cu_$level_get (saved_level);

      on cleanup call FINISH ();

      call cu_$level_set (get_ring_ ());

      call hcs_$star_ (file_path_name, "*", STAR_BRANCHES_ONLY, get_system_free_area_ (), star_entry_count,
	 star_entry_ptr, star_names_ptr, code);
      if code ^= 0
      then call ERROR_RETURN (code, " Unable to get names matching ^a>*.^s", file_path_name, "");

      do entry_idx = lbound (star_entries, 1) to hbound (star_entries, 1);
         component_nindex = star_entries (entry_idx).nindex;
         component_num = bin (rtrim (star_names (component_nindex)), 17);
         if component_num > highest_component_num
         then
	  do;
	     highest_component_num = component_num;
	     highest_component_nindex = component_nindex;
	  end;
      end;

      if highest_component_nindex = 0
      then call ERROR_RETURN (dm_error_$programming_error, "  No msf components found in ^a.", file_path_name, (NO_ARG));

      call hcs_$status_long (file_path_name, star_names (highest_component_nindex), CHASE_LINKS, addr (my_status_branch),
	 null (), code);
      if code ^= 0
      then call ERROR_RETURN (code, "  Unable to get status for ^a>^a.", file_path_name,
	      star_names (highest_component_nindex));

      if my_status_branch.short.type ^= Segment
      then call ERROR_RETURN (code, "  The branch ^a>^a is not a segment.", file_path_name,
	      star_names (highest_component_nindex));

      p_last_ci_num = highest_component_num * p_blocking_factor + my_status_branch.long.current_length - 1;

      call FINISH ();

      return;
%page;
ERROR_RETURN:
   proc (er_p_code, er_p_message, er_p_arg_1, er_p_arg_2);

      dcl	    er_p_code	       fixed bin (35) parm;
      dcl	    er_p_message	       char (*) parm;
      dcl	    er_p_arg_1	       char (*) parm;
      dcl	    er_p_arg_2	       char (*) parm;

      call fm_error_util_$signal (er_p_code, myname, (FM_ACTION_CANT_RESTART | FM_ACTION_LOG), -1, er_p_message,
	 er_p_arg_1, er_p_arg_2);

   end ERROR_RETURN;


FINISH:
   proc ();

      if saved_level > 0
      then call cu_$level_set (saved_level);
      if star_names_ptr ^= null ()
      then free star_names;
      if star_entry_ptr ^= null ()
      then free star_entries;

   end FINISH;

%page;
%include dm_fm_sub_error_flags;
%page;
%include status_structures;
%page;
%include star_structures;

   end fm_get_last_ci_num;
