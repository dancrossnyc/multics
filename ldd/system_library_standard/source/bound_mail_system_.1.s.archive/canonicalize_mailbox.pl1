/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* format: style2,ifthenstmt,ifthendo,ifthen,^indnoniterdo,indcomtxt,^inditerdo,idind22 */

/* canonicalize_mailbox: reads all the messages out of a mailbox, and stores
   them back in there.  This way read_mail's reg-exp search does not have to
   reformat the message, since they are stored in canonical format until we
   go to binary messages. */
/* Written: October 1983 by B. Margolin */
/* Modified: 11 November 1983 by B. Margolin to add -force */
/* Modified: 29 November 1983 by B. Margolin to make it copy into a
   new mbx, and to add -privilege and AIM checking. */
/* Modified: 6 January 1984 by B. Margolin to not reference through null
   pointer when using -force on an already-canonical mailbox. */
/* Modified: 5 April 1984 by G. Palter to fix mail system error #0439 -- The explanation for canonicalizing a mailbox
   whose access class is higher than the process authorization contains the word "unaccessible"; it should be
   "inaccessible" */

canonicalize_mailbox:
     proc options (variable);

	/*** Automatic ***/

	dcl     area_ptr		ptr;
	dcl     arg_count		fixed bin;
	dcl     arg_idx		fixed bin;
	dcl     arg_len		fixed bin (21);
	dcl     arg_ptr		ptr;
	dcl     code		fixed bin (35);
	dcl     dir_priv		fixed bin (35);
	dcl     enable_privs	bit (1);
	dcl     error_return	bit (1);
	dcl     force_access	bit (1);
	dcl     link_flag		bit (1);
	dcl     1 local_close_options aligned like close_options;
	dcl     1 local_delete_options
				aligned like delete_mailbox_options;
	dcl     1 local_open_options	aligned like open_options;
	dcl     1 local_status_branch aligned like status_branch;
	dcl     mbx_dir		char (168);
	dcl     mbx_entry		char (32);
	dcl     mbx_path_len	fixed bin (21);
	dcl     mbx_path_ptr	ptr;
	dcl     1 my_acl_entry	aligned,
		2 header		like mailbox_acl.header,
		2 acl_term	like mailbox_acl.acl_terms;
	dcl     ring1_priv		fixed bin (35);
	dcl     sci_ptr		ptr;
	dcl     seg_priv		fixed bin (35);
	dcl     star_code		fixed bin (35);
	dcl     user_auth		bit (72) aligned;

	/*** Based ***/

	dcl     arg		char (arg_len) based (arg_ptr);
	dcl     mbx_path		char (mbx_path_len) based (mbx_path_ptr);
	dcl     my_area		area based (area_ptr);

	/*** Entries ***/

	dcl     (
	        aim_check_$equal,
	        aim_check_$greater
	        )			entry (bit (72) aligned, bit (72) aligned) returns (bit (1) aligned) reducible;
	dcl     check_star_name_$entry
				entry (char (*), fixed bin (35));
	dcl     com_err_		entry () options (variable);
	dcl     command_query_$yes_no entry () options (variable);
	dcl     convert_authorization_$to_string_short
				entry (bit (72) aligned, char (*), fixed bin (35));
	dcl     cu_$arg_list_ptr	entry (ptr);
	dcl     cu_$generate_call	entry (entry, ptr);
	dcl     expand_pathname_	entry (char (*), char (*), char (*), fixed bin (35));
	dcl     expand_pathname_$add_suffix
				entry (char (*), char (*), char (*), char (*), fixed bin (35));
	dcl     (get_authorization_, get_max_authorization_)
				entry () returns (bit (72) aligned) reducible;
	dcl     get_group_id_	entry () returns (char (32));
	dcl     hcs_$get_access_class entry (char (*), char (*), bit (72) aligned, fixed bin (35));
	dcl     hcs_$get_link_target	entry (char (*), char (*), char (*), char (*), fixed bin (35));
	dcl     hcs_$get_max_length	entry (char (*), char (*), fixed bin, fixed bin (35));
	dcl     hcs_$get_safety_sw	entry (char (*), char (*), bit (1), fixed bin (35));
	dcl     hcs_$get_user_access_modes
				entry (char (*), char (*), char (*), fixed bin, bit (36) aligned,
				bit (36) aligned, fixed bin (35));
	dcl     hcs_$star_		entry (char (*), char (*), fixed bin (2), ptr, fixed bin, ptr, ptr,
				fixed bin (35));
	dcl     hcs_$status_	entry (char (*), char (*), fixed bin (1), ptr, ptr, fixed bin (35));
	dcl     (
	        ioa_,
	        ioa_$nnl
	        )			entry () options (variable);
	dcl     mail_system_$close_mailbox
				entry (ptr, ptr, fixed bin (35));
	dcl     mail_system_$copy_message
				entry (ptr, char (*), char (*), fixed bin (35));
	dcl     mail_system_$open_mailbox
				entry (char (*), char (*), ptr, char (*), ptr, fixed bin (35));
	dcl     mail_system_$read_message
				entry (ptr, fixed bin, fixed bin (35));
	dcl     mail_system_$read_message_canonical_form
				entry (ptr, fixed bin, ptr, fixed bin (21), fixed bin (35));
	dcl     mail_system_$read_new_messages
				entry (ptr, fixed bin, fixed bin, fixed bin, fixed bin (35));
	dcl     mailbox_$chname_file	entry (char (*), char (*), char (*), char (*), fixed bin (35));
	dcl     mailbox_$get_mode_file
				entry (char (*), char (*), bit (7), fixed bin (35));
	dcl     mailbox_$set_max_length_file
				entry (char (*), char (*), fixed bin (19), fixed bin (35));
	dcl     mailbox_$set_safety_switch
				entry (char (*), char (*), bit (1), fixed bin (35));
	dcl     mlsys_utils_$add_mailbox_acl_entries
				entry (char (*), char (*), ptr, fixed bin (35));
	dcl     mlsys_utils_$create_mailbox
				entry (char (*), char (*), fixed bin (35));
	dcl     mlsys_utils_$delete_mailbox
				entry (char (*), char (*), char (*), ptr, fixed bin (35));
	dcl     mlsys_utils_$list_mailbox_acl
				entry (char (*), char (*), ptr, char (8), ptr, fixed bin (35));
	dcl     mlsys_utils_$replace_mailbox_acl_entries
				entry (char (*), char (*), ptr, fixed bin (35));
	dcl     pathname_		entry (char (*), char (*)) returns (char (168));
	dcl     requote_string_	entry (char (*)) returns (char (*));
	dcl     ssu_$abort_line	entry () options (variable);
	dcl     ssu_$arg_count	entry (ptr, fixed bin);
	dcl     ssu_$arg_ptr	entry (ptr, fixed bin, ptr, fixed bin (21));
	dcl     ssu_$destroy_invocation
				entry (ptr);
	dcl     ssu_$get_area	entry (ptr, ptr, char (*), ptr);
	dcl     ssu_$print_message	entry () options (variable);
	dcl     ssu_$standalone_invocation
				entry (ptr, char (*), char (*), ptr, entry, fixed bin (35));
	dcl     (
	        system_privilege_$dir_priv_off,
	        system_privilege_$dir_priv_on,
	        system_privilege_$ring1_priv_off,
	        system_privilege_$ring1_priv_on,
	        system_privilege_$seg_priv_off,
	        system_privilege_$seg_priv_on
	        )			entry (fixed bin (35));
	dcl     (
	        system_privilege_$reclassify_branch,
	        system_privilege_$reclassify_sys_seg
	        )			entry (char (*), char (*), bit (72) aligned, fixed bin (35));
	dcl     unique_chars_	entry (bit (*)) returns (char (15));

	/*** Static ***/

	dcl     (
	        error_table_$bad_arg,
	        error_table_$badopt,
	        error_table_$incorrect_access,
	        error_table_$insufficient_access,
	        error_table_$noarg,
	        error_table_$noentry,
	        error_table_$not_privileged,
	        error_table_$rqover,
	        error_table_$too_many_args,
	        mlsys_et_$no_message_canonical_form,
	        mlsys_et_$no_more_messages
	        )			fixed bin (35) ext static;
	dcl     sys_info$access_class_ceiling /* system_high */
				bit (72) aligned ext static;
	dcl     MBX_SUFFIX		char (3) int static options (constant) init ("mbx");
	dcl     WHOAMI		char (20) int static options (constant) init ("canonicalize_mailbox");
	dcl     VERSION		char (3) int static options (constant) init ("1.0");

	/*** Misc ***/

	dcl     (cleanup, linkage_error)
				condition;
	dcl     (addr, mod, null, pointer, string, substr, sum)
				builtin;
%page;
%include access_mode_values;
%page;
%include mlsys_close_options;
%page;
%include mlsys_delete_error_info;
%page;
%include mlsys_delete_mailbox;
%page;
%include mlsys_mailbox;
%page;
%include mlsys_mailbox_acl;
%page;
%include mlsys_mailbox_modes;
%page;
%include mlsys_message;
%page;
%include mlsys_open_options;
%page;
%include status_structures;
%page;
%include star_structures;
%page;	/*** Initialize things used in cleanup handler ***/
	sci_ptr = null ();
	ring1_priv, dir_priv, seg_priv = -1;
	enable_privs = "0"b;
	on cleanup call cleanup_canon_mbx ();

	call ssu_$standalone_invocation (sci_ptr, WHOAMI, VERSION, null (), abort_canon_mbx, code);
	if code ^= 0 then do;
	     call com_err_ (code, WHOAMI, "Attempting to create standalone subsystem invocation.");
						/* GMP, forgive me... */
	     return;
	end;
	call ssu_$arg_count (sci_ptr, arg_count);
	if arg_count = 0 then call ssu_$abort_line (sci_ptr, 0, "Usage: canonicalize_mailbox mbx_pathname {-ctl_args}");
	mbx_path_ptr = null ();
	force_access = "0"b;
	do arg_idx = 1 to arg_count;
	     call ssu_$arg_ptr (sci_ptr, arg_idx, arg_ptr, arg_len);
	     if arg = "" then
		call ssu_$abort_line (sci_ptr, error_table_$bad_arg, "The mailbox pathname may not be a null string.")
		     ;
	     if substr (arg, 1, 1) = "-" then do;
		if arg = "-force" | arg = "-fc" then force_access = "1"b;
		else if arg = "-no_force" | arg = "-nfc" then force_access = "0"b;
		else if arg = "-privilege" | arg = "-priv" then enable_privs = "1"b;
		else if arg = "-no_privilege" | arg = "-npriv" then enable_privs = "0"b;
		else call ssu_$abort_line (sci_ptr, error_table_$badopt, "^a", arg);
	     end;
	     else if mbx_path_ptr ^= null () then
		call ssu_$abort_line (sci_ptr, error_table_$too_many_args,
		     "Only one mailbox pathname may be specified.");
	     else do;
		mbx_path_ptr = arg_ptr;
		mbx_path_len = arg_len;
	     end;
	end;
	if mbx_path_ptr = null () then
	     call ssu_$abort_line (sci_ptr, error_table_$noarg, "A mailbox pathname must be supplied.");

	call expand_pathname_$add_suffix (mbx_path, MBX_SUFFIX, mbx_dir, mbx_entry, code);
	if code ^= 0 then call ssu_$abort_line (sci_ptr, code, "The pathname ^a", requote_string_ (mbx_path));
	call check_star_name_$entry (mbx_entry, star_code);
	if star_code > 2 | star_code < 0 then
	     call ssu_$abort_line (sci_ptr, star_code, "The pathname ^a",
		requote_string_ (pathname_ (mbx_dir, mbx_entry)));
	else if star_code = 2 then
	     call ssu_$abort_line (sci_ptr, 0, "Invalid return code from check_star_name_$entry.");

	if enable_privs then do;
	     if ^aim_check_$equal (get_max_authorization_ (), sys_info$access_class_ceiling) then
		call ssu_$abort_line (sci_ptr, error_table_$not_privileged,
		     "A maximum authorization of system_high is required.");
	     on linkage_error
		call ssu_$abort_line (sci_ptr, error_table_$not_privileged,
		     "Access to the system_privilege_ gate is required.");
	     call system_privilege_$ring1_priv_on (ring1_priv);
	     call system_privilege_$dir_priv_on (dir_priv);
	     call system_privilege_$seg_priv_on (seg_priv);
	end;
	else user_auth = get_authorization_ ();


	close_options_ptr = addr (local_close_options);
	close_options.version = CLOSE_OPTIONS_VERSION_2;
	string (close_options.flags) = ""b;
	delete_mailbox_options_ptr = addr (local_delete_options);
	delete_mailbox_options.version = DELETE_MAILBOX_OPTIONS_VERSION_1;
	string (delete_mailbox_options.flags) = ""b;
	delete_mailbox_options.force = "1"b;
	open_options_ptr = addr (local_open_options);
	open_options.version = OPEN_OPTIONS_VERSION_2;
	open_options.message_selection_mode = ALL_MESSAGES;
	open_options.sender_selection_mode = ALL_MESSAGES;
	open_options.message_reading_level = READ_KEYS;
	status_ptr = addr (local_status_branch);

	if force_access then do;			/* in case we have to */
	     my_acl_entry.version = MAILBOX_ACL_VERSION_1;
	     my_acl_entry.n_acl_terms = 1;
	     my_acl_entry.access_name = get_group_id_ ();
	     my_acl_entry.extended_mode = ADROSW_MBX_ACCESS;
	end;
	call ssu_$get_area (sci_ptr, null (), "ACLs/starnames/names", area_ptr);
	status_area_ptr = area_ptr;

	if star_code = 0 then
	     call canon_one_mbx (mbx_dir, mbx_entry, abort_nonstar_canon);
	else /* if star_code = 1 then */
	     call canon_star_mbx (mbx_dir, mbx_entry);
GLOBAL_EXIT:
	call cleanup_canon_mbx ();
	return;

abort_canon_mbx:
     proc ();

	go to GLOBAL_EXIT;

     end abort_canon_mbx;

cleanup_canon_mbx:
     proc ();

	if enable_privs then do;
	     if ring1_priv = 0 then call system_privilege_$ring1_priv_off ((0));
	     if dir_priv = 0 then call system_privilege_$dir_priv_off ((0));
	     if seg_priv = 0 then call system_privilege_$seg_priv_off ((0));
	end;
	if sci_ptr ^= null () then call ssu_$destroy_invocation (sci_ptr);

	return;

     end cleanup_canon_mbx;
%page;
canon_one_mbx:
     proc (P_dir, P_entry, P_abort_label);

	dcl     (P_dir, P_entry)	char (*) parameter;
	dcl     P_abort_label	entry () options (variable) variable parameter;

	dcl     access_class	bit (72) aligned;
	dcl     auth_string		char (256);
	dcl     code		fixed bin (35);
	dcl     (delete_new, delete_original, delete_original_by_shriek_entry)
				bit (1);
	dcl     dir_access_class	bit (72) aligned;
	dcl     max_length		fixed bin;
	dcl     messages_processed	fixed bin;
	dcl     message_idx		fixed bin;
	dcl     n_new_messages	fixed bin;
	dcl     name_idx		fixed bin;
	dcl     safety_sw		bit (1);
	dcl     save_acl_ptr	ptr;
	dcl     shriek_entry	char (32);
	dcl     (target_dir, target_dir_dir)
				char (168);
	dcl     (target_dir_entry, target_entry)
				char (32);
	dcl     temp_entry		char (32);
	dcl     this_name		char (32);

	save_acl_ptr, mailbox_ptr = null ();
	delete_new, delete_original, delete_original_by_shriek_entry, error_return = "0"b;
	status_branch.names_relp = ""b;
	on cleanup
	     begin;
		if mailbox_ptr ^= null () then call mail_system_$close_mailbox (mailbox_ptr, close_options_ptr, (0));
		if delete_original & error_return then
		     if delete_original_by_shriek_entry then
			call mlsys_utils_$delete_mailbox (target_dir, shriek_entry, WHOAMI,
			     delete_mailbox_options_ptr, (0));
		     else call mlsys_utils_$delete_mailbox (target_dir, target_entry, WHOAMI,
			     delete_mailbox_options_ptr, (0));
		else if force_access & (save_acl_ptr ^= null ()) then call restore_mbx_access ("1"b);
		if save_acl_ptr ^= null () then free save_acl_ptr -> mailbox_acl in (my_area);
		if status_branch.names_relp ^= ""b then free status_entry_names in (my_area);
		if delete_new then
		     call mlsys_utils_$delete_mailbox (target_dir, temp_entry, WHOAMI, delete_mailbox_options_ptr,
			(0));
	     end;

	/*** Check access ***/
	call check_mbx_access ();

	/*** Find the real mailbox, in case it's a link ***/
	if star_code = 0 then do;			/* Can only be link if not starname */
	     call hcs_$status_ (P_dir, P_entry, 0, status_ptr, null (), code);
	     if code ^= 0 then call P_abort_label (sci_ptr, code, "Getting status on ^a.", pathname_ (P_dir, P_entry));
	     link_flag = (status_branch.type = Link);
	end;
	else link_flag = "0"b;

	if link_flag then do;
	     call hcs_$get_link_target (P_dir, P_entry, target_dir, target_entry, code);
	     if code ^= 0 then
		if code = error_table_$noentry then	/* Null link */
		     call P_abort_label (sci_ptr, code, "The target of the link ^a, ^a, does not exist.",
			pathname_ (P_dir, P_entry), pathname_ (target_dir, target_entry));
		else call P_abort_label (sci_ptr, code, "Trying to find link target of ^a.",
			pathname_ (P_dir, P_entry));
	end;
	else do;
	     target_dir = P_dir;
	     target_entry = P_entry;
	end;

	call ioa_$nnl ("Canonicalizing ^a ^[(actually link target ^a)^]...", pathname_ (P_dir, P_entry), link_flag,
	     pathname_ (target_dir, target_entry));

	/*** Check that we have appropriate access ***/
	call check_dir_access (target_dir, P_abort_label);

	call mail_system_$open_mailbox (P_dir, P_entry, open_options_ptr, MAILBOX_VERSION_2, mailbox_ptr, code);
	if code ^= 0 then call P_abort_label (sci_ptr, code, "Opening ^a", pathname_ (P_dir, P_entry));

	/*** Create the new mailbox ***/
	temp_entry = unique_chars_ (""b) || ".can.mbx";
	call mlsys_utils_$create_mailbox (target_dir, temp_entry, code);
	if code ^= 0 then
	     call P_abort_label (sci_ptr, code, "Cannot create new mailbox ^a.", pathname_ (target_dir, temp_entry));

	delete_new = "1"b;
	if enable_privs then do;
	     call expand_pathname_ (target_dir, target_dir_dir, target_dir_entry, (0));
	     call hcs_$get_access_class (target_dir_dir, target_dir_entry, dir_access_class, code);
	     if code ^= 0 then
		call P_abort_label (sci_ptr, code, "Cannot determine access class of directory ^a.", target_dir);
	     if aim_check_$equal (dir_access_class, access_class) then
						/* not upgraded (i.e. multiclass) */
		call system_privilege_$reclassify_branch (target_dir, temp_entry, access_class, code);
	     else call system_privilege_$reclassify_sys_seg (target_dir, temp_entry, access_class, code);
	     if code ^= 0 then do;
		call convert_authorization_$to_string_short (access_class, auth_string, (0));
		call P_abort_label (sci_ptr, code, "Can't set access class of new mailbox ^a to ""^a"".",
		     pathname_ (target_dir, temp_entry), auth_string);
	     end;
	end;
	call hcs_$get_max_length (P_dir, P_entry, max_length, code);
	if code = 0 then do;
	     call mailbox_$set_max_length_file (target_dir, temp_entry, (max_length), code);
	     if code ^= 0 then do;
		call print_message (sci_ptr, code, "Warning: Can't set max length of the new mailbox ^a to ^d.",
		     pathname_ (target_dir, temp_entry), max_length);
		code = 0;
	     end;
	end;
	else do;
	     call print_message (sci_ptr, code,
		"Can't get max length of ^a;^/the canonicalized mailbox will be the default size.",
		pathname_ (P_dir, P_entry));
	     code = 0;
	end;
%page;	/*** Begin copying messages ***/
	if mailbox_not_canonical () then do;
	     n_new_messages = mailbox.n_messages;
	     messages_processed = 0;

	     do while (n_new_messages > 0);
		do message_idx = messages_processed + 1 to mailbox.n_messages;
		     if mailbox.messages (message_idx).message_ptr = null () then do;
			call mail_system_$read_message (mailbox_ptr, message_idx, code);
			if code ^= 0 then
			     call P_abort_label (sci_ptr, code, "Reading message #^d from ^a", message_idx,
				pathname_ (P_dir, P_entry));
		     end;
		     message_ptr = mailbox.messages (message_idx).message_ptr;
		     if ^enable_privs & ^aim_check_$equal (message.access_class, user_auth) then
			call P_abort_label (sci_ptr, 0,
			     "^a^/contains messages at a lower access class than the process authorization.^/Use the -privilege control argument or see a system maintainer for help."
			     , pathname_ (P_dir, P_entry));
		     call mail_system_$copy_message (message_ptr, target_dir, temp_entry, code);
		     if code ^= 0 then
			if code = error_table_$rqover then
			     call P_abort_label (sci_ptr, code,
				"^/The directory ^a^/does not have enough quota for the canonicalized copy of ^a.",
				target_dir, target_entry);
			else call P_abort_label (sci_ptr, code, "Copying message #^d from ^a to ^a.", message_idx,
				pathname_ (P_dir, P_entry), pathname_ (target_dir, temp_entry));
		     if mod (message_idx, 50) = 0 then call ioa_$nnl (" ^d", message_idx);
		end;
		messages_processed = mailbox.n_messages;
		call mail_system_$read_new_messages (mailbox_ptr, n_new_messages, (0), (0), code);
		if code ^= 0 then do;
		     if code = mlsys_et_$no_more_messages then do;
			n_new_messages = 0;
			code = 0;
		     end;
		     else call P_abort_label (sci_ptr, code, "Trying to read new messages from ^a.",
			     pathname_ (P_dir, P_entry));
		end;
	     end;
	end;
	else do;					/* mailbox is already canonical */
	     /*** So clean up the mess we've made ... ***/
	     call mail_system_$close_mailbox (mailbox_ptr, close_options_ptr, (0));
	     if force_access then
		call restore_mbx_access ("0"b);
	     else free save_acl_ptr -> mailbox_acl in (my_area);
	     call mlsys_utils_$delete_mailbox (target_dir, temp_entry, WHOAMI, delete_mailbox_options_ptr, (0));
	     /*** ... and punt ***/
	     call ioa_ ("");
	     return;
	end;

	call ioa_ ("");				/* newline when done */

	delete_new = "0"b;
	call mail_system_$close_mailbox (mailbox_ptr, close_options_ptr, (0));
%page;	/*** Copy safety switch, ACL, and names to new mailbox ***/

	call hcs_$get_safety_sw (P_dir, P_entry, safety_sw, code);
	if code ^= 0 then do;
	     call print_message (sci_ptr, code,
		"Can't get safety switch of ^a;^/canonicalized mailbox will have safety switch off.",
		pathname_ (P_dir, P_entry));
	     safety_sw = "0"b;
	     code = 0;
	end;
	else do;
	     call mailbox_$set_safety_switch (target_dir, temp_entry, safety_sw, code);
	     if code ^= 0 then do;
		call print_message (sci_ptr, code,
		     "Warning: Can't turn o^[n^;ff^] safety switch of the new mailbox ^a.", safety_sw,
		     pathname_ (target_dir, temp_entry));
		code = 0;
	     end;
	end;

	call mlsys_utils_$replace_mailbox_acl_entries (target_dir, temp_entry, save_acl_ptr, code);
	if code ^= 0 then do;
	     call print_message (sci_ptr, code, "Warning: Can't copy ACL from ^a to ^a.", pathname_ (P_dir, P_entry),
		pathname_ (target_dir, temp_entry));
	     code = 0;
	end;
	delete_original = "1"b;			/* Everything but names copied, so it is safe to delete it */
						/* as the error messages will tell the user where the good */
						/* mailbox is. */

	shriek_entry = unique_chars_ (""b) || ".can_old.mbx";
	call mailbox_$chname_file (target_dir, target_entry, "", shriek_entry, code);
	if code ^= 0 then
	     call P_abort_label (sci_ptr, code, "Adding name ^a to ^a.^/Canonicalized mailbox is ^a.", shriek_entry,
		pathname_ (target_dir, target_entry), pathname_ (target_dir, temp_entry));

	delete_original_by_shriek_entry = "1"b;		/* As of now, the original name may be on the canonicalized */
						/* mailbox; be sure we don't accidently delete the new */
						/* mailbox if we are unable to move all the names */

	/*** Now copy the real names and delete the .can.mbx name ***/
	call hcs_$status_ (target_dir, target_entry, 0, status_ptr, area_ptr, code);
	if code ^= 0 then
	     call P_abort_label (sci_ptr, code, "Getting names of ^a.^/Canonicalized mailbox is ^a.",
		pathname_ (target_dir, target_entry), pathname_ (target_dir, temp_entry));
	do name_idx = 1 to status_branch.nnames;
	     this_name = status_entry_names (name_idx);
	     if this_name ^= shriek_entry then /* Leave shriek name */ call move_name (this_name);
	end;

	call mailbox_$chname_file (target_dir, temp_entry, temp_entry, "", code);
						/* Delete .can.mbx name */
	if code ^= 0 then do;
	     call print_message (sci_ptr, code, "Warning: Can't delete the name ^a from the canonicalized mailbox ^a.",
		temp_entry, pathname_ (target_dir, target_entry));
	     code = 0;
	end;


	/*** Now that we have successfully (hopefully) copied everything,
	     delete the original. ***/
	call mlsys_utils_$delete_mailbox (target_dir, shriek_entry, WHOAMI, delete_mailbox_options_ptr, code);
	if code ^= 0 then do;
	     call print_message (sci_ptr, code, "Can't delete the original mailbox, now named ^a.",
		pathname_ (target_dir, shriek_entry));
	end;
	free status_entry_names in (my_area);
	free save_acl_ptr -> mailbox_acl in (my_area);
	return;
%page;
move_name:
     proc (P_name);

	dcl     P_name		char (*) parameter;

	call mailbox_$chname_file (target_dir, shriek_entry, P_name, "", code);
						/* delete from the old */
	if code ^= 0 then
	     call P_abort_label (sci_ptr, code, "Deleting name ^a from ^a.^/Canonicalized mailbox is ^a.", P_name,
		pathname_ (target_dir, shriek_entry), pathname_ (target_dir, temp_entry));
	call mailbox_$chname_file (target_dir, temp_entry, "", P_name, code);
						/* Add to the new */
	if code ^= 0 then
	     call P_abort_label (sci_ptr, code, "Adding name ^a to the canonicalized maibox ^a.", P_name,
		pathname_ (target_dir, temp_entry));
     end move_name;

mailbox_not_canonical:
     proc () returns (bit (1) aligned);

	dcl     code		fixed bin (35);
	dcl     message_idx		fixed bin;

	do message_idx = 1 to mailbox.n_messages;
	     call mail_system_$read_message_canonical_form (mailbox_ptr, message_idx, (null ()), (0), code);
	     if code = mlsys_et_$no_message_canonical_form then return ("1"b);
	     else if code ^= 0 then
		call P_abort_label (sci_ptr, code, "Checking format of message #^d in ^a", message_idx,
		     pathname_ (P_dir, P_entry));
	end;
	return ("0"b);

     end mailbox_not_canonical;


check_mbx_access:
     proc ();

	dcl     mbx_mode		bit (7);
	dcl     yes_sw		bit (1);

	call mailbox_$get_mode_file (P_dir, P_entry, mbx_mode, code);
	if code ^= 0 then call P_abort_label (sci_ptr, code, "Checking access to ^a", pathname_ (P_dir, P_entry));
	if (mbx_mode & (A_MBX_ACCESS | D_MBX_ACCESS | R_MBX_ACCESS)) = (A_MBX_ACCESS | D_MBX_ACCESS | R_MBX_ACCESS) then
	     call get_mbx_access ();
	else if force_access then do;
	     call get_mbx_access ();
	     call mlsys_utils_$add_mailbox_acl_entries (P_dir, P_entry, addr (my_acl_entry), code);
	     if code ^= 0 then call P_abort_label (sci_ptr, code, "Forcing access to ^a", pathname_ (P_dir, P_entry));
	end;
	else call P_abort_label (sci_ptr, error_table_$insufficient_access, "adr access is required to ^a",
		pathname_ (P_dir, P_entry));

	/*** Get the access class of the mbx ***/
	call hcs_$get_access_class (P_dir, P_entry, access_class, code);
	if code ^= 0 then
	     call P_abort_label (sci_ptr, code, "Getting the access class of ^a", pathname_ (P_dir, P_entry));
	if ^enable_privs & aim_check_$greater (access_class, user_auth) then do;
	     call command_query_$yes_no (yes_sw, 0, WHOAMI,
		"The maximum access class of ^a^/is greater than your process authorization, so there may be inaccessible^/"
		||
		"messages which will be lost during canonicalization.^/You may wish to use the -privilege option or see a system administrator.^/Canonicalize anyway?"
		,
		"^a^/may contain messages which will be lost due to AIM restrictions.^/Canonicalize anyway? (type ""?"" for more details)"
		, pathname_ (P_dir, P_entry));
	     if ^yes_sw then call P_abort_label (sci_ptr, 0);
	end;

	return;

get_mbx_access:
     proc ();

	call mlsys_utils_$list_mailbox_acl (P_dir, P_entry, area_ptr, MAILBOX_ACL_VERSION_1, save_acl_ptr, code);
	if code ^= 0 then call P_abort_label (sci_ptr, code, "Getting the ACL of ^a", pathname_ (P_dir, P_entry));
	return;

     end get_mbx_access;

     end check_mbx_access;

restore_mbx_access:
     proc (P_silent);

	dcl     P_silent		bit (1) aligned parameter;

	call mlsys_utils_$replace_mailbox_acl_entries (P_dir, P_entry, save_acl_ptr, code);
	free save_acl_ptr -> mailbox_acl in (my_area);
	save_acl_ptr = null ();
	if P_silent | (code = 0) then
	     return;
	else call P_abort_label (sci_ptr, code, "Restoring access on mailbox ^s", pathname_ (P_dir, P_entry));
	return;

     end restore_mbx_access;

print_message:
     proc () options (variable);

	dcl     arg_list_ptr	ptr;

	call ioa_ ("");				/* So error message comes out at beginning of line */
	call cu_$arg_list_ptr (arg_list_ptr);
	call cu_$generate_call (ssu_$print_message, arg_list_ptr);

     end print_message;

     end canon_one_mbx;

abort_nonstar_canon:
     proc () options (variable);

	dcl     arg_list_ptr	ptr;

	error_return = "1"b;			/* So we'll clean up useless original */
	call ioa_ ("");				/* So error message comes out at beginning of line */
	call cu_$arg_list_ptr (arg_list_ptr);
	call cu_$generate_call (ssu_$abort_line, arg_list_ptr);

     end abort_nonstar_canon;

check_dir_access:
     proc (P_dir, P_abort_label);

	dcl     P_dir		char (*) parameter;
	dcl     P_abort_label	entry () options (variable) variable parameter;

	dcl     access_class	bit (72) aligned;
	dcl     code		fixed bin (35);
	dcl     dir_dir		char (168);
	dcl     dir_entry		char (32);
	dcl     mode		bit (36) aligned;

	call expand_pathname_ (P_dir, dir_dir, dir_entry, (0));
	call hcs_$get_user_access_modes (dir_dir, dir_entry, "", -1, mode, (""b), code);
	if code ^= 0 then call P_abort_label (sci_ptr, code, "^/Determining access to the directory ^a.", P_dir);
	if mode ^= SMA_ACCESS then
	     call P_abort_label (sci_ptr, error_table_$incorrect_access, "^/sma access is required to ^a.", P_dir);
	if ^enable_privs then do;
	     call hcs_$get_access_class (dir_dir, dir_entry, access_class, code);
	     if code ^= 0 then
		call P_abort_label (sci_ptr, code, "^/Determining access class of the directory ^a.", P_dir);
	     if ^aim_check_$equal (user_auth, access_class) then
		call P_abort_label (sci_ptr, error_table_$incorrect_access,
		     "^/The access class of ^a must equal the process authorization.", P_dir);
	end;
	return;

     end check_dir_access;


canon_star_mbx:
     proc (P_dir, P_starname);

	dcl     (P_dir, P_starname)	char (*) parameter;

	dcl     code		fixed bin (35);
	dcl     entry_idx		fixed bin;

	/*** First check that we have appropriate access to the dir ***/
	call check_dir_access (P_dir, ssu_$abort_line);

	call hcs_$star_ (P_dir, P_starname, star_BRANCHES_ONLY, area_ptr, star_entry_count, star_entry_ptr,
	     star_names_ptr, code);
	if code ^= 0 then call ssu_$abort_line (sci_ptr, code, "Starname ^a.", pathname_ (P_dir, P_starname));
	do entry_idx = 1 to star_entry_count;
	     if star_entries (entry_idx).type = star_SEGMENT then
		call canon_one_mbx (P_dir, star_names (star_entries (entry_idx).nindex), abort_one_canon);
NEXT_MBX:
	end;

/* Don't bother freeing star structures, as ssu_ destroys the area */

abort_one_canon:
     proc () options (variable);

	dcl     arg_list_ptr	ptr;

	error_return = "1"b;			/* So we'll clean up useless original */
	call ioa_ ("");				/* So error message comes out at beginning of line */
	call cu_$arg_list_ptr (arg_list_ptr);
	call cu_$generate_call (ssu_$print_message, arg_list_ptr);
	if entry_idx ^= star_entry_count then		/* no next mailbox */
	     call ssu_$print_message (sci_ptr, 0, "Skipping to next mailbox matching starname.");
	go to NEXT_MBX;

     end abort_one_canon;

     end canon_star_mbx;

     end canonicalize_mailbox;
