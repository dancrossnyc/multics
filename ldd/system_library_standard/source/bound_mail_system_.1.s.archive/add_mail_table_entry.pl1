/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(89-07-17,Lee), approve(89-08-01,MCR8124),
     audit(89-09-25,LZimmerman), install(89-10-02,MR12.3-1079):
     phx20861 (Mail 507) - modified update_mail_table_entry command to validate
     address; modified update/add_mail_table_entry to not require participant
     access to meetings which are added/updated by calling the new procedure
     get_meeting_arg for meeting arguments.
  2) change(89-08-02,Lee), approve(89-08-22,MCR8128),
     audit(89-09-25,LZimmerman), install(89-10-02,MR12.3-1079):
     phx20700 (Mail 504), phx20967 (Mail 445) - modified
     delete_mail_table_entry command to handle entry names case-insensitively
     by calling mail_table_priv_$get to fetch the name with the exact case for
     deleting; modified update_mail_table_entry command to delete alias entries
     case-insensitively by calling the newly added
     mail_table_priv_$delete_alias_case_ins instead of
     mail_table_priv_$delete_alias; reformatting.
                                                   END HISTORY COMMENTS */


/* format: style2,ifthenstmt,ifthendo,ifthen,^indnoniterdo,indcomtxt,^inditerdo,idind22 */

/* (add update delete)_mail_table_entry: these commands are used by
   administrators to manipulate Mail Table entries. */

/* Written: July 1983 by B. Margolin */
/* Modified: 6 March 1984 by G. Palter to fix error #0427 -- delete_mail_table_entry does not give a usage message when
   invoked with no arguments.  In addition, the error message produced when attempting to delete an entry corresponding to
   a PNT entry is incorrect */
/* Modified: 10 April 1984 by G. Palter to fix error #0440 -- the mail table administrative commands do not enforce the
   "acs" suffix on the ACS pathname */

add_mail_table_entry:
     proc options (variable);

	dcl     acs_dir		char (168);
	dcl     acs_entry		char (32);
	dcl     acs_given		bit (1);
	dcl     acs_type		fixed bin (2);
	dcl     addr		builtin;
	dcl     address_ptr		ptr;
	dcl     alias		(1000) char (32) varying based (alias_ptr);
	dcl     alias_count		fixed bin;
	dcl     alias_ptr		ptr;
	dcl     arg		char (arg_len) based (arg_ptr);
	dcl     arg_count		fixed bin;
	dcl     arg_idx		fixed bin;
	dcl     arg_len		fixed bin (21);
	dcl     arg_ptr		ptr;
	dcl     buffer		char (256);
	dcl     buffer_used		char (buffer_used_len) based (addr (buffer));
	dcl     buffer_used_len	fixed bin (21);
	dcl     cleanup		condition;
	dcl     code		fixed bin (35);
	dcl     dl_alias		(1000) char (32) varying based (dl_alias_ptr);
	dcl     dl_alias_count	fixed bin;
	dcl     dl_alias_ptr	ptr;
	dcl     index		builtin;
	dcl     length		builtin;
	dcl     maxlength		builtin;
	dcl     min		builtin;
	dcl     1 mte		aligned like mail_table_entry;
	dcl     null		builtin;
	dcl     1 pcao		aligned like parse_ca_options;
	dcl     (name, name1)	char (32) varying;
	dcl     sci_ptr		ptr;
	dcl     substr		builtin;
	dcl     VERSION		char (4) int static options (constant) init ("1.0");
	dcl     WHOAMI		char (32);
	dcl     yes_sw		bit (1);

	dcl     (
	        error_table_$bad_arg,
	        error_table_$bad_subr_arg,
	        error_table_$badopt,
	        error_table_$bigarg,
	        error_table_$id_already_exists,
	        error_table_$id_not_found,
	        error_table_$noarg,
	        error_table_$noentry,
	        error_table_$too_many_args,
	        mlsys_et_$ambiguous_address,
	        forum_error_table_$not_eligible
	        )			fixed bin (35) ext static;

	dcl     com_err_		entry () options (variable);
	dcl     command_query_$yes_no entry () options (variable);
	dcl     expand_pathname_$add_suffix
				entry (char (*), char (*), char (*), char (*), fixed bin (35));
	dcl     hcs_$status_minf	entry (char (*), char (*), fixed bin (1), fixed bin (2), fixed bin (24),
				fixed bin (35));
	dcl     mail_system_$free_address
				entry (ptr, fixed bin (35));
	dcl     mail_system_$validate_address
				entry (ptr, bit (1) aligned, fixed bin (35));
	dcl     mail_table_$get	entry (char (*) var, ptr, char (*), fixed bin (35));
	dcl     mail_table_priv_$add	entry (ptr, bit (1), fixed bin (35));
	dcl     mail_table_priv_$add_alias
				entry (char (*) var, char (*) var, bit (1), fixed bin (35));
	dcl     mail_table_priv_$delete
				entry (char (*) var, bit (1), fixed bin (35));
	dcl     mail_table_priv_$delete_alias_case_ins
				entry (char (*) var, bit (1), fixed bin (35));
	dcl     mail_table_priv_$get	entry (char (*) var, ptr, fixed bin (35));
	dcl     mail_table_priv_$update
				entry (ptr, bit (1), fixed bin (35));
	dcl     mlsys_utils_$format_address_field
				entry (char (*) var, ptr, fixed bin, ptr, fixed bin (21), fixed bin (21),
				fixed bin (35));
	dcl     mlsys_utils_$parse_address_control_args
				entry (ptr, fixed bin, ptr, ptr, fixed bin (35));
	dcl     mlsys_utils_$print_validate_results
				entry (ptr, ptr, fixed bin (35));
	dcl     pathname_		entry (char (*), char (*)) returns (char (168));
	dcl     ssu_$abort_line	entry () options (variable);
	dcl     ssu_$arg_count	entry (ptr, fixed bin);
	dcl     ssu_$arg_ptr	entry (ptr, fixed bin, ptr, fixed bin (21));
	dcl     ssu_$destroy_invocation
				entry (ptr);
	dcl     ssu_$get_temp_segment entry (ptr, char (*), ptr);
	dcl     ssu_$print_message	entry () options (variable);
	dcl     ssu_$release_temp_segment
				entry (ptr, ptr);
	dcl     ssu_$standalone_invocation
				entry (ptr, char (*), char (*), ptr, entry, fixed bin (35));
%page;
%include mail_table_entry;
%page;
%include mlsys_parse_ca_options;
%page;
%include status_structures;
%page;

	WHOAMI = "add_mail_table_entry";
	code = 0;
	acs_given = "0"b;
	sci_ptr, address_ptr, alias_ptr = null ();
	acs_dir, acs_entry = "";
	on cleanup call cleanup_amte ();
	call ssu_$standalone_invocation (sci_ptr, WHOAMI, VERSION, null (), abort_amte, code);
	if code ^= 0 then do;
	     call com_err_ (code, WHOAMI, "Creating standalone subsystem invocation.");
	     return;
	end;
	call ssu_$arg_count (sci_ptr, arg_count);
	if arg_count < 2 then call ssu_$abort_line (sci_ptr, 0, "Usage: ^a name address {-control_args}", WHOAMI);
	arg_idx = 1;
	call get_name_arg ();
	call ssu_$get_temp_segment (sci_ptr, "aliases", alias_ptr);
	alias_count = 0;
	pcao.version = PARSE_CA_OPTIONS_VERSION_1;
	pcao.logbox_creation_mode = QUERY_TO_CREATE_MAILBOX;
	pcao.savebox_creation_mode = QUERY_TO_CREATE_MAILBOX;
	pcao.abort_on_errors = "1"b;
	pcao.flags.mbz = ""b;
	do arg_idx = 2 to arg_count;

	     pcao.validate_addresses = "1"b;

	     call ssu_$arg_ptr (sci_ptr, arg_idx, arg_ptr, arg_len);
	     if arg = "-alias" then do;
		call get_alias_arg (alias, alias_count);
		if check_ambiguous_name (alias (alias_count)) then do;
		     call ssu_$print_message (sci_ptr, error_table_$id_already_exists,
			"^/The alias ""^a"" will not be added.", alias (alias_count));
		     alias_count = alias_count - 1;
		end;
	     end;
	     else if arg = "-acs_path" then call get_acs_arg ();
	     else if arg = "-mtg" | arg = "-meeting" then call get_meeting_args ();
	     else call get_address_args ();
	end;
	if check_ambiguous_name (name) then
	     call ssu_$abort_line (sci_ptr, error_table_$id_already_exists, "The name ""^a"".", name);
	if address_ptr = null () then
	     call ssu_$abort_line (sci_ptr, error_table_$noarg, "An address must be supplied.");
	mte.version = MAIL_TABLE_ENTRY_VERSION_1;
	mte.name = name;
	if acs_given then do;
	     mte.dir = acs_dir;
	     mte.entry = acs_entry;
	end;
	else mte.dir, mte.entry = "";
	mte.default_project = "";
	buffer_used_len = 0;
	call mlsys_utils_$format_address_field ("", address_ptr, -1, addr (buffer),
	     min (maxlength (mte.mailing_address), length (buffer)), buffer_used_len, code);
	if code ^= 0 then call ssu_$abort_line (sci_ptr, code, "Formatting address.");
	mte.mailing_address = buffer_used;
	call mail_table_priv_$add (addr (mte), "0"b, code);
	if code ^= 0 then call ssu_$abort_line (sci_ptr, code, "Adding Mail table entry for ""^a"".", name);
	do arg_idx = 1 to alias_count;
	     call mail_table_priv_$add_alias (name, alias (arg_idx), "0"b, code);
	     if code ^= 0 then do;
		if code = error_table_$id_not_found then
		     call ssu_$abort_line (sci_ptr, code,
			"^/The new Mail Table entry for ""^a"" has been deleted by another user.", name);
		call ssu_$print_message (sci_ptr, code, "Adding alias ""^a"" to ""^a"";this one will be skipped.",
		     alias (arg_idx), name);
		code = 0;
	     end;
	end;
RETURN_FROM_AMTE:
	call cleanup_amte ();
	return;

cleanup_amte:
     proc ();

	if alias_ptr ^= null () then call ssu_$release_temp_segment (sci_ptr, alias_ptr);
	if address_ptr ^= null () then call mail_system_$free_address (address_ptr, (0));
	if sci_ptr ^= null () then call ssu_$destroy_invocation (sci_ptr);
	return;

     end cleanup_amte;

abort_amte:
     proc ();

	go to RETURN_FROM_AMTE;

     end abort_amte;

update_mail_table_entry:
     entry options (variable);

	WHOAMI = "update_mail_table_entry";
	code = 0;
	address_ptr, sci_ptr, alias_ptr, dl_alias_ptr = null ();
	alias_count, dl_alias_count = 0;
	acs_given = "0"b;
	acs_dir, acs_entry = "";
	on cleanup call cleanup_umte ();
	call ssu_$standalone_invocation (sci_ptr, WHOAMI, VERSION, null (), abort_umte, code);
	if code ^= 0 then do;
	     call com_err_ (code, WHOAMI, "Creating standalone subsystem invocation.");
	     return;
	end;
	call ssu_$arg_count (sci_ptr, arg_count);
	if arg_count < 2 then call ssu_$abort_line (sci_ptr, 0, "Usage: ^a name {address} {-control_args}", WHOAMI);
	arg_idx = 1;
	call get_name_arg ();
	call ssu_$get_temp_segment (sci_ptr, "add_aliases", alias_ptr);
	call ssu_$get_temp_segment (sci_ptr, "dl_aliases", dl_alias_ptr);
	pcao.version = PARSE_CA_OPTIONS_VERSION_1;
	pcao.logbox_creation_mode = QUERY_TO_CREATE_MAILBOX;
	pcao.savebox_creation_mode = QUERY_TO_CREATE_MAILBOX;
	pcao.abort_on_errors = "1"b;
	pcao.flags.mbz = ""b;

	do arg_idx = 2 to arg_count;
	     pcao.validate_addresses = "1"b;
	     call ssu_$arg_ptr (sci_ptr, arg_idx, arg_ptr, arg_len);
	     if arg = "-alias" then do;
		call get_alias_arg (alias, alias_count);
		if check_ambiguous_name (alias (alias_count)) then do;
		     call ssu_$print_message (sci_ptr, error_table_$id_already_exists,
			"^/The alias ""^a"" will not be added.", alias (alias_count));
		     alias_count = alias_count - 1;
		end;
	     end;
	     else if arg = "-delete_alias" then do;
		call get_alias_arg (dl_alias, dl_alias_count);
		if ^check_ambiguous_name (dl_alias (dl_alias_count)) then do;
		     call ssu_$print_message (sci_ptr, error_table_$id_not_found,
			"^/The alias ""^a"" will not be deleted.", dl_alias (dl_alias_count));
		     dl_alias_count = dl_alias_count - 1;
		end;
	     end;
	     else if arg = "-acs_path" then call get_acs_arg ();
	     else call get_address_args ();
	end;
	mte.version = MAIL_TABLE_ENTRY_VERSION_1;
	call mail_table_priv_$get (name, addr (mte), code);
	if code ^= 0 then call ssu_$abort_line (sci_ptr, code, "Retrieving old Mail Table entry for ""^a"".", name);
	if acs_given then do;
	     mte.dir = acs_dir;
	     mte.entry = acs_entry;
	end;
	if address_ptr ^= null () then do;
	     buffer_used_len = 0;
	     call mlsys_utils_$format_address_field ("", address_ptr, -1, addr (buffer),
		min (maxlength (mte.mailing_address), length (buffer)), buffer_used_len, code);
	     if code ^= 0 then call ssu_$abort_line (sci_ptr, code, "Formatting address.");
	     mte.mailing_address = buffer_used;
	end;
	if acs_given | address_ptr ^= null () then do;	/* Don't bother if just hacking aliases */
	     call mail_table_priv_$update (addr (mte), "0"b, code);
	     if code ^= 0 then call ssu_$abort_line (sci_ptr, code, "Updating the Mail Table entry for ""^a"".", name);
	end;
	name1 = mte.name;
	do arg_idx = 1 to alias_count;
	     call mail_table_priv_$add_alias (name1, alias (arg_idx), "0"b, code);
	     if code ^= 0 then do;
		if code = error_table_$id_not_found then
		     call ssu_$abort_line (sci_ptr, code,
			"The Mail Table entry for ""^a"" has been deleted by another process.", name1);
		call ssu_$print_message (sci_ptr, code, "Adding alias ""^a"" for ""^a""; skipping this one.",
		     alias (arg_idx), name);
		code = 0;
	     end;
	end;
	do arg_idx = 1 to dl_alias_count;
	     call mail_table_priv_$get (dl_alias (arg_idx), addr (mte), code);
	     if code ^= 0 then do;
		call ssu_$print_message (sci_ptr, code, "Looking up the alias ""^a""; skipping this one.",
		     dl_alias (arg_idx));
		code = 0;
	     end;
	     else do;
		if mte.name = name1 then do;
		     call mail_table_priv_$delete_alias_case_ins (dl_alias (arg_idx), "0"b, code);
		     if code ^= 0 then do;
			if code = error_table_$bad_subr_arg then
			     call ssu_$print_message (sci_ptr, 0,
				"The name ""^a"" is a primary name or login alias; skipping this one.",
				dl_alias (arg_idx));
			else call ssu_$print_message (sci_ptr, code, "Deleting the alias ""^a""; skiping this one.",
				dl_alias (arg_idx));
			code = 0;
		     end;
		end;
		else call ssu_$print_message (sci_ptr, 0, """^a"" is not an alias for ""^a""; skipping this one.",
			dl_alias (arg_idx), name);
	     end;
	end;
RETURN_FROM_UMTE:
	call cleanup_umte ();
	return;

cleanup_umte:
     proc ();

	if alias_ptr ^= null () then call ssu_$release_temp_segment (sci_ptr, alias_ptr);
	if dl_alias_ptr ^= null () then call ssu_$release_temp_segment (sci_ptr, dl_alias_ptr);
	if address_ptr ^= null () then call mail_system_$free_address (address_ptr, (0));
	if sci_ptr ^= null () then call ssu_$destroy_invocation (sci_ptr);
	return;

     end cleanup_umte;

abort_umte:
     proc ();

	go to RETURN_FROM_UMTE;

     end abort_umte;

delete_mail_table_entry:
     entry options (variable);

	WHOAMI = "delete_mail_table_entry";
	code = 0;
	sci_ptr, alias_ptr = null ();
	on cleanup
	     begin;
		if sci_ptr ^= null then call ssu_$destroy_invocation (sci_ptr);
	     end;
	call ssu_$standalone_invocation (sci_ptr, WHOAMI, VERSION, null (), abort_dmte, code);
	if code ^= 0 then do;
	     call com_err_ (code, WHOAMI, "Creating standalone invocation.");
	     return;
	end;
	call ssu_$arg_count (sci_ptr, arg_count);
	if arg_count = 0 then call ssu_$abort_line (sci_ptr, 0, "Usage: ^a names", WHOAMI);
	call ssu_$get_temp_segment (sci_ptr, "names", alias_ptr);
	do arg_idx = 1 to arg_count;			/* Validate all the args first */
	     call get_name_arg ();
	     alias (arg_idx) = name;
	end;

	mte.version = MAIL_TABLE_ENTRY_VERSION_1;

	do arg_idx = 1 to arg_count;			/* Now process them */

	     call mail_table_priv_$get (alias (arg_idx), addr (mte), code);
	     if code ^= 0 then do;
		call ssu_$print_message (sci_ptr, code, "Looking up the Mail Table entry ""^a""; skipping this one.",
		     alias (arg_idx));
		code = 0;
	     end;
	     else do;

		call mail_table_priv_$delete (mte.name, "0"b, code);
		if code ^= 0 then
		     if code = error_table_$bad_subr_arg then
			call ssu_$print_message (sci_ptr, error_table_$bad_arg,
			     "The Mail Table entry ""^a"" corresponds to a registered user and may not be deleted.",
			     alias (arg_idx));
		     else call ssu_$print_message (sci_ptr, code, "Deleting ""^a""; it will be skipped.",
			     alias (arg_idx));
	     end;
	end;
RETURN_FROM_DMTE:
	call ssu_$release_temp_segment (sci_ptr, alias_ptr);
	call ssu_$destroy_invocation (sci_ptr);
	return;

abort_dmte:
     proc ();

	go to RETURN_FROM_DMTE;

     end abort_dmte;

get_alias_arg:
     proc (P_alias_array, P_alias_count);

	dcl     P_alias_array	(*) char (*) varying;
	dcl     P_alias_count	fixed bin;

	dcl     ctl_arg		char (12);

	ctl_arg = arg;
	if arg_idx = arg_count then do;
NO_ALIAS:
	     call ssu_$abort_line (sci_ptr, error_table_$noarg, "^a must be followed by a name.", ctl_arg);
	end;
	arg_idx = arg_idx + 1;
	call ssu_$arg_ptr (sci_ptr, arg_idx, arg_ptr, arg_len);
	if arg = "" then call ssu_$abort_line (sci_ptr, error_table_$bad_arg, "An alias may not be the null string.");
	if substr (arg, 1, 1) = "-" then go to NO_ALIAS;
	if arg_len > maxlength (mte.name) then
	     call ssu_$abort_line (sci_ptr, error_table_$bigarg, "^/The alias ""^a"" is longer than ^d characters.",
		arg, maxlength (mte.name));
	P_alias_count = P_alias_count + 1;
	P_alias_array (P_alias_count) = arg;
	return;

     end get_alias_arg;


get_acs_arg:
     proc ();

	if arg_idx = arg_count then do;
NO_ACS_PATH:
	     call ssu_$abort_line (sci_ptr, error_table_$noarg, "-acs_path must be followed by a pathname.");
	end;
	arg_idx = arg_idx + 1;
	call ssu_$arg_ptr (sci_ptr, arg_idx, arg_ptr, arg_len);
	if index (arg, "-") = 1 then go to NO_ACS_PATH;
	if arg = "" then
	     acs_dir, acs_entry = "";
	else do;
	     call expand_pathname_$add_suffix (arg, "acs", acs_dir, acs_entry, code);
	     if code ^= 0 then call ssu_$abort_line (sci_ptr, code, "Expanding pathname ""^a"".", arg);
	     call hcs_$status_minf (acs_dir, acs_entry, 1, acs_type, (0), code);
	     if code = 0 then do;
		if acs_type ^= Segment then do;
		     call command_query_$yes_no (yes_sw, 0, WHOAMI,
			"A valid ACS must be a segment, but ^a is a directory.^/Set this ACS pathname anyway?",
			"The specified ACS, ^a, is not a segment.  Set it anyway?", pathname_ (acs_dir, acs_entry));
		     if ^yes_sw then return;
		end;
	     end;
	     else if code = error_table_$noentry then do;
		call command_query_$yes_no (yes_sw, error_table_$noentry, WHOAMI,
		     "The specified ACS does not exist, so it will be treated as if there were^/no ACS path until the segment is created.^/Set this ACS pathname anyway?",
		     "The specified ACS, ^a, does not exist.  Set it anyway?", pathname_ (acs_dir, acs_entry));
		if ^yes_sw then return;
	     end;
	     else call ssu_$abort_line (sci_ptr, code, "The acs segment ^a.", pathname_ (acs_dir, acs_entry));
	end;
	acs_given = "1"b;
	return;

     end get_acs_arg;

get_name_arg:
     proc ();

	call ssu_$arg_ptr (sci_ptr, arg_idx, arg_ptr, arg_len);
	if arg = "" then
	     call ssu_$abort_line (sci_ptr, error_table_$bad_arg,
		"The null string is not a valid Mail Table entry name.");
	if substr (arg, 1, 1) = "-" then		/* First arg must be name, not control arg */
	     if WHOAMI = "delete_mail_table_entry" then
		call ssu_$abort_line (sci_ptr, error_table_$badopt, "^a", arg);
	     else call ssu_$abort_line (sci_ptr, error_table_$noarg,
		     "^/The first argument must be the Mail Table entry name.");
	if arg_len > maxlength (mte.name) then
	     call ssu_$abort_line (sci_ptr, error_table_$bigarg, "^/""^a"" is longer than ^d characters.", arg,
		maxlength (mte.name));
	name = arg;
	return;
     end get_name_arg;



get_meeting_args:
     proc ();

	dcl     ca_address_ptr	ptr;

	ca_address_ptr = null ();
	on cleanup
	     begin;
		if ca_address_ptr ^= null () then call mail_system_$free_address (ca_address_ptr, (0));
	     end;

	pcao.validate_addresses = "0"b;		/* we'll do our own validation */
	call mlsys_utils_$parse_address_control_args (sci_ptr, arg_idx, addr (pcao), ca_address_ptr, code);
	pcao.validate_addresses = "1"b;		/* re-enable validation for others */
	if code ^= 0 then call ssu_$abort_line (sci_ptr, code, "Parsing address arguments");
	call mail_system_$validate_address (ca_address_ptr, "0"b, code);
	if code = forum_error_table_$not_eligible then code = 0;
						/* not being a participant is okay */

	if code ^= 0 then do;
	     call mlsys_utils_$print_validate_results (sci_ptr, ca_address_ptr, code);
	     call mail_system_$free_address (ca_address_ptr, (0));
	     call ssu_$abort_line (sci_ptr);
	end;

	if address_ptr ^= null () then do;		/* Already gave an address */
	     call mail_system_$free_address (ca_address_ptr, (0));
	     call ssu_$abort_line (sci_ptr, error_table_$too_many_args, "Only one address may be specified.");
	end;
	revert cleanup;
	address_ptr = ca_address_ptr;
	arg_idx = arg_idx - 1;			/* do loop will increment */
	return;

     end get_meeting_args;


get_address_args:
     proc ();

	dcl     ca_address_ptr	ptr;

	call mlsys_utils_$parse_address_control_args (sci_ptr, arg_idx, addr (pcao), ca_address_ptr, code);
	if code ^= 0 then call ssu_$abort_line (sci_ptr, code, "Parsing address arguments");
	if address_ptr ^= null () then do;		/* Already gave an address */
	     call mail_system_$free_address (ca_address_ptr, (0));
	     call ssu_$abort_line (sci_ptr, error_table_$too_many_args, "Only one address may be specified.");
	end;
	address_ptr = ca_address_ptr;
	arg_idx = arg_idx - 1;			/* do loop will increment */
	return;

     end get_address_args;

/**** Returns TRUE if the name is in use (case-insensitively) ****/
check_ambiguous_name:
     proc (P_name) returns (bit (1));

	dcl     P_name		char (*) varying parameter;

	dcl     address_ptr		ptr;
	dcl     code		fixed bin (35);

	address_ptr = null ();
	code = 0;
	on cleanup
	     begin;
		if address_ptr ^= null () then call mail_system_$free_address (address_ptr, (0));
	     end;
	call mail_table_$get (P_name, address_ptr, (""), code);
	if address_ptr ^= null () then call mail_system_$free_address (address_ptr, (0));
	revert cleanup;
	if code = 0 | code = mlsys_et_$ambiguous_address then return ("1"b);
	else if code = error_table_$id_not_found then return ("0"b);
	else call ssu_$abort_line (sci_ptr, code, "Looking for ""^a"" in the Mail Table.", P_name);

     end check_ambiguous_name;


     end add_mail_table_entry;
