/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* format: style2,ifthenstmt,ifthendo,ifthen,^indnoniterdo,indcomtxt,^inditerdo,idind22 */

/* compact_mail_table: the command interface to mail_table_priv_$salvage. */

/* Written 5 Aug 1983 by B. Margolin */

compact_mail_table:
salvage_mail_table:
     proc ();

	dcl     arg		char (arg_len) based (arg_ptr);
	dcl     arg_count		fixed bin;
	dcl     arg_len		fixed bin (21);
	dcl     arg_ptr		ptr;
	dcl     code		fixed bin (35);
	dcl     message		char (256);
	dcl     new_size		fixed bin;
	dcl     sci_ptr		ptr;

	dcl     VERSION		char (3) int static options (constant) init ("1.0");
	dcl     WHOAMI		char (18) int static options (constant) init ("compact_mail_table");
	dcl     (
	        error_table_$bad_conversion,
	        error_table_$badopt,
	        error_table_$too_many_args
	        )			fixed bin (35) ext static;

	dcl     com_err_		entry () options (variable);
	dcl     cv_dec_check_	entry (char (*), fixed bin (35)) returns (fixed bin (35));
	dcl     mail_table_priv_$count_entries
				entry (fixed bin, fixed bin (35));
	dcl     mail_table_priv_$salvage
				entry (fixed bin, char (*), fixed bin (35));
	dcl     ssu_$abort_line	entry () options (variable);
	dcl     ssu_$arg_count	entry (ptr, fixed bin);
	dcl     ssu_$arg_ptr	entry (ptr, fixed bin, ptr, fixed bin (21));
	dcl     ssu_$destroy_invocation
				entry (ptr);
	dcl     ssu_$standalone_invocation
				entry (ptr, char (*), char (*), ptr, entry, fixed bin (35));


	sci_ptr = null ();
	code = 0;
	call ssu_$standalone_invocation (sci_ptr, WHOAMI, VERSION, null (), abort_cmt, code);
	if code ^= 0 then do;
	     call com_err_ (code, WHOAMI, "Creating standalone subsystem invocation.");
	     return;
	end;
	call ssu_$arg_count (sci_ptr, arg_count);
	if arg_count > 1 then
	     call ssu_$abort_line (sci_ptr, error_table_$too_many_args, "^/Usage:  ^a {new_size}", WHOAMI);
	if arg_count = 1 then do;
	     call ssu_$arg_ptr (sci_ptr, 1, arg_ptr, arg_len);
	     if arg = "" then go to BAD_CONVERSION;	/* cv_dec_check_ turns "" into 0 */
	     if substr (arg, 1, 1) = "-" then call ssu_$abort_line (sci_ptr, error_table_$badopt, "^a", arg);
	     new_size = cv_dec_check_ (arg, code);
	     if code ^= 0 then do;
BAD_CONVERSION:
		call ssu_$abort_line (sci_ptr, error_table_$bad_conversion,
		     "The argument must be a positive decimal integer, not ""^a"".", arg);
	     end;
	end;
	else do;
	     call mail_table_priv_$count_entries (new_size, code);
	     if code ^= 0 then
		call ssu_$abort_line (sci_ptr, code, "Counting the number of used entries in the old Mail Table.");
	     new_size = 3 * new_size;			/* This is a good size */
	end;
	call mail_table_priv_$salvage (new_size, message, code);
	if code ^= 0 then
	     call ssu_$abort_line (sci_ptr, code, "^[Salvaging the mail table.^;^a^]", (message = ""), message);
GLOBAL_EXIT:
	call ssu_$destroy_invocation (sci_ptr);
	return;

abort_cmt:
     proc ();

	go to GLOBAL_EXIT;

     end abort_cmt;

     end compact_mail_table;
