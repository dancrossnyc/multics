/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
/* format: style2,ind3 */
vfile_copy_opening_:
   proc (p_source_iocb_ptr, p_target_sw_name, p_target_iocb_ptr, p_code);

/* This module makes an iocb (at p_target_iocb_ptr) with the same attributes
as the source iocb.  The target iocb is positioned "outside" of the index and
has  the pos_incorrect bit set.  This iocb, then, has basically the same
appearance as (and is indistinguishable from) an iocb which has just been
attached and opened in the normal fashion.

As much as possible, the copied opening is made by actually copying the data
structures.  For the seg_ptr_array and the position_stack, the vfile_
utilities are used to do the copying, as various protocols must be followed
in filling in these structures and some data must be unique to each iocb
(hence cant just be copied).  In the case of the seg_ptr_array, there must
be one initiation per opening per segment and create_seg_ptrs takes care of
setting this up.  In the case of the position_stack, various pointers in the
stack must be set to point elsewhere in the same stack and some pointers in
the indx_cb have to be set to point to the position_stack.  This is done by
create_position_stack.

Written 03/01/81 by Lindsey Spratt.
Modified:
06/22/81 by Lindsey Spratt: Replace call to msf_manager_$open with direct copy
	  of the fcb.  The initiated_components portion of the structure
	  must be set to 0 to indicate that this new fcb opening has no
	  initiated 	  segments associated with it.  The following
	  msf_get_ptr adds the first one,
	  and successive calls by create_seg_ptrs finishes this processes.
06/30/81 by Lindsey Spratt: Changed to use vfile_attach_block.incl.pl1,
	  iocb.incl.pl1 instead of iocbv.incl.pl1, deleted position_stack
	  declaration.
*/

/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_source_iocb_ptr      ptr;
      dcl	    p_target_sw_name       char (*);
      dcl	    p_target_iocb_ptr      ptr;
      dcl	    p_code	       fixed bin (35);

/* Automatic */

      dcl	    iocb_ptr	       ptr;
      dcl	    pos_ptr	       ptr;
      dcl	    fcbp		       ptr;		/* The msf_manager_ File Control Block, fcb, is based on this variable. */
      dcl	    bead_idx	       fixed bin;
      dcl	    source_fcb_ptr	       ptr;
      dcl	    old_target_ibp	       ptr;
      dcl	    target_ibp	       ptr;
      dcl	    source_ibp	       ptr;

/* Based */

      dcl	    free_area	       area (sys_info$max_seg_size - 1) based (system_areap);

      dcl	    1 fcb		       based (fcbp) aligned,	/* the multi-segment file control block */
	      2 version	       fixed bin,		/* version of this structure - 0 now */
	      2 type	       fixed bin,		/* form of msf - ssf, msf, or not_exists */
	      2 max_components     fixed bin,		/* maximum number of components (same as bitcount) */
	      2 max_len	       fixed bin (19),	/* Max number of words in each component. */
	      2 pad	       (1) fixed bin,
	      2 pathnames,				/* dirnname, ename, and combined of the file */
	        3 dname	       char (168),
	        3 ename	       char (32),
	        3 path	       char (168),
	      2 initiated_components,			/* information about the initiated components in the file */
	        3 number	       fixed bin,		/* how many are initiated */
	        3 highest_value    fixed bin,		/* the highest component value of those inited */
	        3 listp	       ptr,		/* ptr to head of the list of inited segs */
	      2 rbs	       (3) fixed bin (3),	/* save ring bracks */
	      2 upgrade_sw	       bit (1) aligned,	/* if components are multiclass segments */
	      2 access_class       bit (72) aligned;	/* acc if upgrade_sw ON */
						/* DRV - add volume backup switch to FCB here */


      dcl	    1 initiation_bead      based aligned,	/* one for each initiated component of the msf */
	      2 component	       fixed bin,		/* which component it is */
	      2 bitcount	       fixed bin (24),	/* its bitcount */
	      2 segptr	       ptr,		/* a ptr to it */
	      2 next	       ptr;		/* next bead in list or null */


/* Builtin */
/* Controlled */
/* Constant */
/* Entry */

      dcl	    msf_manager_$get_ptr   entry (ptr, fixed bin, bit (1), ptr, fixed bin (24), fixed bin (35));
      dcl	    msf_manager_$open      entry (char (*), char (*), ptr, fixed bin (35));
      dcl	    get_system_free_area_  entry () returns (ptr);

/* External */

      dcl	    error_table_$badcall   fixed bin (35) ext;
      dcl	    sys_info$max_seg_size  fixed bin (35) ext;

/* Static */

      dcl	    system_areap	       ptr internal static init (null);

/* END OF DECLARATIONS */


/* Validate the source opening for being copied.  It must be an index
sequential opening, must not be opened for exclusive operations.
It must be opened in shared mode, and it must be an msf.
*/
      iocb_ptr = null;
      attach_block_ptr = p_source_iocb_ptr -> iocb.attach_data_ptr;
      if attach_block.mode ^= Keyed_sequential_update & attach_block.mode ^= Keyed_sequential_output
         & attach_block.mode ^= Keyed_sequential_input
      then
         do;
	  p_code = error_table_$badcall;
	  return;
         end;

      if attach_block.exclu_sw | ^attach_block.shared | ^attach_block.is_msf
      then
         do;
	  p_code = error_table_$badcall;
	  return;
         end;

/* Find and/or create the target iocb. */

      call iox_$find_iocb (p_target_sw_name, p_target_iocb_ptr, p_code);
      if p_code ^= 0
      then return;

      p_target_iocb_ptr -> iocb = p_source_iocb_ptr -> iocb;
      p_target_iocb_ptr -> iocb.actual_iocb_ptr = p_target_iocb_ptr;
      p_target_iocb_ptr -> iocb.name = p_target_sw_name;

      call alloc_cb_file (size (attach_block), attach_block_ptr);

      attach_block = p_source_iocb_ptr -> iocb.attach_data_ptr -> attach_block;
      p_target_iocb_ptr -> iocb.attach_data_ptr = attach_block_ptr;
      p_target_iocb_ptr -> iocb.attach_descrip_ptr = addr (attach_block.attach_descrip);
      p_target_iocb_ptr -> iocb.open_descrip_ptr = addr (attach_block.open_descrip);

      call alloc_cb_file (size (indx_cb), indx_cb_ptr);

      indx_cb = p_source_iocb_ptr -> iocb.open_data_ptr -> indx_cb;
      p_target_iocb_ptr -> iocb.open_data_ptr = indx_cb_ptr;
      indx_cb.pos_incorrect = "1"b;
      indx_cb.next_record_position = 0;
      indx_cb.current_record_is_valid = "0"b;
      indx_cb.ready_to_write = "0"b;
      indx_cb.repeating = "0"b;
      indx_cb.error.type = 0;
      indx_cb.at_bof = "0"b;
      indx_cb.at_eof = "0"b;
      indx_cb.min_res = 0;
      indx_cb.min_cap = 0;
      indx_cb.leave_locked = "0"b;
      indx_cb.outside_index = "0"b;
      indx_cb.new_key = "";
      indx_cb.skip_state = 0;
      indx_cb.transaction_code = 0;
      indx_cb.reflp = null;
      indx_cb.collection_delay_time = 0;

/* The subsetting information must be set to indicate that no subsetting has been
done yet on this opening.
*/

      indx_cb.current_subset = 0;
      indx_cb.last_subset = 0;
      indx_cb.subset_count = 0;
      indx_cb.temp_iocbp = null;

/* It is necessary for each opening to have its own MSF fcb to point at.
*/

      if system_areap = null
      then system_areap = get_system_free_area_ ();

      alloc fcb in (free_area) set (fcbp);

      fcb = p_source_iocb_ptr -> iocb.attach_data_ptr -> attach_block.fcb_ptr -> fcb;
      indx_cb.fcb_ptr = fcbp;
      fcb.initiated_components.number = 0;
      fcb.initiated_components.highest_value = 0;
      fcb.initiated_components.listp = null;

      attach_block.fcb_ptr = indx_cb.fcb_ptr;		/* The attach_block fcb_ptr is used when closing. */

      call msf_manager_$get_ptr (indx_cb.fcb_ptr, 0, "0"b, indx_cb.file_base_ptr, 0, p_code);
      if p_code ^= 0
      then return;

/* create_seg_ptrs is called to set up the seg_ptr_array and initiate all of
the segments in the msf.  It does this by doing msf_manager_$get_ptr.  The end
result of this is to have an fcb identical to the fcb of the opening being
copied.  The reason it is necessary to go through all of the mechanism of
create_seg_ptrs and msf_manager_$get_ptr is to have the hcs_$initiate calls
made on all of the segments, since (at close time) hcs_$terminate_noname is
called.
     The other approach, to allocate and copy data explicitly to build the fcb
and seg_ptr_array structures without
invoking other routines, works fine except that the segments are terminated out
from under the iocbs which are copies of the iocb being closed and detached.
*/

      call create_seg_ptrs (p_target_iocb_ptr);

/* The position stack and
some data in the indx_cb must be initialized.  For this it is necessary to call
create_position_stack.
*/

      call create_position_stack (indx_cb_ptr);
      attach_block.was_msf = (indx_cb.file_base_ptr -> file_base.max_comp_num > 1);

      return;

%include iocb;
%include iox_entries;
%include vfile_indx;
%include vfile_attach_block;
%include iox_modes;
   end vfile_copy_opening_;
