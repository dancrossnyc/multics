/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* This command is used to restore storage system files to a
   consistent state after detecting an interrupted operation */
vfa:
vfile_adjust:
     proc (pathname_arg);
	seg_ptr, fcb_ptr, iocb_ptr = null;
	call cu_$arg_count (n_args);			/* number of args with which command was invoked */
	if n_args <= 0				/* must specify at least the pathname */
	then code = error_table_$noarg;
	else if n_args > 3				/* limit of permissible args */
	then code = error_table_$too_many_args;
	else code = 0;
	call check_code;				/* aborts if error detected */
	call get_file_base;				/* gets first seg ptr */
	if (seg_ptr -> header.file_code ^= seq_code) & (seg_ptr -> header.file_code ^= blk_code)
	     & (seg_ptr -> header.file_code ^= indx_code)
	then call adj_uns_file;			/* makes the adjustment */
	else call adj_struc_file;			/* takes care of structured files */
	call check_code;
cleanup:
	if fcb_ptr ^= null				/* free the msf control block */
	then call msf_manager_$close (fcb_ptr);
	else if seg_ptr ^= null			/* was single segment file */
	then call hcs_$terminate_noname (seg_ptr, code);
	if iocb_ptr ^= null				/* file was opened for adjustment */
	then do;					/* close file and free I/O switch */
		call iox_$close (iocb_ptr, code);
		call iox_$detach_iocb (iocb_ptr, code);
	     end;
	return;					/* end of main file adjustment routine */

check_code:
     proc;					/* aborts if error detected */
	if code = 0
	then return;
	call com_err_ (code, "vfile_adjust");		/* signal the error */
	go to cleanup;				/* don't leave  a mess */
     end check_code;

get_file_base:
     proc;					/* finds first file component and sets seg_ptr */
	call expand_path_ (addr (pathname_arg), length (pathname_arg), addr (d_name), addr (e_name), code);
						/* separate directory and entry names */
	call check_code;
	call hcs_$status_long (d_name, e_name, 1, addr (branch_info), null, code);
	call check_code;
	if branch_info.type = "10"b			/* directory or msf */
	then if branch_info.bit_count = "0"b		/* directory */
	     then code = error_table_$dirseg;
	     else do;				/* get ptr to base of msf */
		     call msf_manager_$open ((d_name), (e_name), fcb_ptr, code);
						/* creates control block */
		     call check_code;		/* abort on error */
		     call msf_manager_$get_ptr (fcb_ptr, 0, "0"b, seg_ptr, bc, code);
						/* pointer to base of file */
		     if seg_ptr ^= null
		     then code = 0;			/* reset spurious code */
		end;
	else do;					/* get ptr to base of segment */
		call hcs_$initiate (d_name, e_name, "", 0, 1, seg_ptr, code);
		if seg_ptr ^= null
		then code = 0;			/* no error if pointer returned */
	     end;
	call check_code;
     end get_file_base;

adj_struc_file:
     proc;					/* adjusts all structured files */
	if n_args > 1				/* no args permitted for structured files */
	then code = error_table_$too_many_args;
	call check_code;
	call check_file_lock;			/* may unlock file */
	call attach_unique_sw;			/* need I/O switch to open and close */
	call iox_$open (iocb_ptr, 7 /* sequential_update */, "0"b, code);
						/* adjustment will automatically be made if necessary */
     end adj_struc_file;

adj_uns_file:
     proc;					/* handles adjustments to unstructured files */
	if n_args <= 1				/* a control option must be specified */
	then code = error_table_$noarg;
	call cu_$arg_ptr (2, opt1_ptr, opt1_len, code);
	call check_code;
	if n_args > 2
	then do;					/* pick up second optional arg */
		call cu_$arg_ptr (3, opt2_ptr, opt2_len, code);
		call check_code;
	     end;
	if n_args = 2
	then if opt1_arg = "-set_bc"			/* indicates setting to last non-zero byte */
	     then call adjust_bit_count_ (d_name, e_name, "1"b /* last byte */, bc, code);
						/* does the work */
	     else if opt1_arg = "-use_nl"		/* indic trunc after last complete line */
	     then call trunc_at_line;
	     else if opt1_arg = "-set_nl"		/* indic newline to be appended if not there */
	     then call append_line;
	     else call get_use_bc;			/* option must be "-use_bc" */
	else call get_use_bc;			/* use existing bit count to truncate */
	return;					/* unstructured file has  been adjusted */

trunc_at_line:
     proc;					/* truncates file after last new-line char */
	call prep_uns_file;				/* positions to last line */
	call iox_$put_chars (iocb_ptr, (null), 0, code);	/* truncates the file */
     end trunc_at_line;

prep_uns_file:
     proc;					/* sets position to last line of file or eof */
	call adjust_bit_count_ (d_name, e_name, "1"b, bc, code);
						/* first set bit count to last non-zero byte */
	call check_code;
	call attach_unique_sw;			/* attaches uniquely named I/O switch with "-extend" option */
	call iox_$open (iocb_ptr, 3 /* stream_input_output */, "0"b, code);
						/* file must be opened */
	call check_code;
	call iox_$position (iocb_ptr, 0, 0, code);	/* positions just past last newline char */
     end prep_uns_file;

append_line:
     proc;					/* puts newline char at eof if none already there */
	call prep_uns_file;				/* position past last newline */
	call iox_$get_chars (iocb_ptr, addr (dummy_buffer), 1, rec_len, code);
						/* get next character */
	if code ^= error_table_$end_of_info
	then do;					/* must append a newline char */
		call iox_$position (iocb_ptr, 1, 0, code);
						/* go to end of file */
		call iox_$put_chars (iocb_ptr, addr (newline), 1, code);
	     end;
	else code = 0;				/* already ends in newline */
     end append_line;

get_use_bc:
     proc;					/* checks option and truncates at existing bitcount  */
	if opt1_arg ^= "-use_bc"			/* no other option will do */
	then code = error_table_$bad_arg;
	else if branch_info.type ^= "10"b		/* single segment case */
	then do;
		if n_args > 2			/* msf component number specified */
		then if opt2_arg ^= "0"
		     then code = error_table_$bad_arg;
		     else call hcs_$truncate_seg (seg_ptr, divide (fixed (bit_count) + 35, 36, 18, 0), code);
	     end;
	else do;					/* get tail num and truncate */
		if n_args = 2			/* n not given--default is last non-zero component */
		then call get_last_nz_comp;
		else call get_comp_n;		/* picks up specified component-num arg */
		call check_code;
		call msf_manager_$adjust (fcb_ptr, n_tail, bc, "011"b, code);
						/* does the truncation */
	     end;
	return;					/* end main routine for handling "-use_bc" option */

get_last_nz_comp:
     proc;					/* finds last non-empty msf component or comp 0 if none */

	do n_tail = 1 repeat n_tail + 1 while (code = 0); /* find last msf comp */
	     call msf_manager_$get_ptr (fcb_ptr, n_tail, "0"b, seg_ptr, bc, code);
						/* pointer to next component */
	end;

	n_recs = 0;				/* last comp+1 has no recs */

	do n_tail = n_tail - 2 to 0 by -1 while (n_recs = 0);
						/* find last non-empty comp */
	     call msf_manager_$get_ptr (fcb_ptr, n_tail, "0"b, seg_ptr, bc, code);
						/* ptr to preceding comp */
	     call hcs_$fs_get_path_name (seg_ptr, d_name, d_len, e_name, code);
						/* need path for hcs_$status_ */
	     call hcs_$status_ (d_name, e_name, 0, addr (branch_info), null /* no names */, code);
						/* gets n_recs */
	end;

	n_tail = n_tail + 1;			/* loop decrements once too often */

     end get_last_nz_comp;

get_comp_n:
     proc;					/* sets n_tail to specified component number */
	n_tail = cv_dec_check_ (opt2_arg, code);	/* validates conversion */
	call check_code;
	call msf_manager_$get_ptr (fcb_ptr, n_tail, "0"b, seg_ptr, bc, code);
						/* n'th comp info */
     end get_comp_n;

     end get_use_bc;

     end adj_uns_file;

attach_unique_sw:
     proc;					/* attaches I/O switch with "-extend" control option */
	call iox_$attach_ioname (unique_chars_ ("0"b), iocb_ptr, "vfile_ " || pathname_arg || " -extend", code);
	call check_code;
     end attach_unique_sw;

check_file_lock:
     proc;					/* may reset file lock */
	lock_word = seg_ptr -> header.lock_word;	/* copy the file lock to examine it */
	call set_lock_$lock (lock_word, 0, code);
	if code ^= 0
	then if code = error_table_$locked_by_this_process
	     then do;				/* warn user about danger of recursive use of vfile_ */
		     call command_query_ (addr (query_info), answer, "vfile_adjust",
			"Warning--file locked
by this process.  Resuming a previous invocation
of vfile_ after adjustment may produce unpredictable
errors.  Close the I/O switch or issue a new_proc to be safe.
Do you still wish to adjust the file?"
			);			/* let user decide */
		     if answer = "no"
		     then go to cleanup;		/* forget the whole thing */
		     seg_ptr -> header.lock_word = bit (-1);
						/* lock becomes invalid */
		end;
     end check_file_lock;

/* declarations for entire program */
	dcl     hcs_$status_long	 entry (char (*) aligned, char (*) aligned, fixed (1), ptr, ptr, fixed (35));
	dcl     hcs_$initiate	 entry (char (*) aligned, char (*) aligned, char (*) aligned, fixed (1), fixed (2),
				 ptr, fixed (35));
	dcl     hcs_$terminate_noname	 entry (ptr, fixed (35));
	dcl     lock_word		 bit (36) aligned;
	dcl     seq_code		 static internal fixed init (83711);
	dcl     blk_code		 static internal fixed init (22513);
	dcl     indx_code		 static internal fixed init (7129);
	dcl     hcs_$truncate_seg	 entry (ptr, fixed (18), fixed (35));
	dcl     error_table_$end_of_info
				 external fixed (35);
	dcl     iox_$put_chars	 entry (ptr, ptr, fixed (21), fixed (35));
	dcl     iox_$position	 entry (ptr, fixed, fixed, fixed (35));
	dcl     iox_$get_chars	 entry (ptr, ptr, fixed (21), fixed (21), fixed (35));
	dcl     rec_len		 fixed (21);
	dcl     newline		 char (1) aligned static internal init ("
");
	dcl     dummy_buffer	 char (1) aligned;
	dcl     pathname_arg	 char (*);
	dcl     opt1_arg		 char (opt1_len) based (opt1_ptr);
	dcl     opt2_arg		 char (opt2_len) based (opt2_ptr);
	dcl     (opt1_len, opt2_len)	 fixed;
	dcl     (opt1_ptr, opt2_ptr)	 ptr;
	dcl     cu_$arg_ptr		 entry (fixed, ptr, fixed, fixed (35));
	dcl     (fcb_ptr, iocb_ptr)	 ptr;
	dcl     cu_$arg_count	 entry (fixed);
	dcl     n_args		 fixed;
	dcl     code		 fixed (35);
	dcl     (error_table_$noarg, error_table_$dirseg, error_table_$too_many_args, error_table_$bad_arg,
	        error_table_$locked_by_this_process)
				 external fixed (35);
	dcl     (null, fixed, bit, divide, addr)
				 builtin;
	dcl     msf_manager_$close	 entry (ptr);
	dcl     iox_$close		 entry (ptr, fixed (35));
	dcl     iox_$open		 entry (ptr, fixed, bit (1) aligned, fixed (35));
	dcl     iox_$detach_iocb	 entry (ptr, fixed (35));
	dcl     com_err_		 entry options (variable);
	dcl     expand_path_	 entry (ptr, fixed, ptr, ptr, fixed (35));
	dcl     msf_manager_$open	 entry (char (*) aligned, char (*) aligned, ptr, fixed (35));
	dcl     msf_manager_$get_ptr	 entry (ptr, fixed, bit (1), ptr, fixed (24), fixed (35));
	dcl     d_name		 char (168) aligned;
	dcl     e_name		 char (32) aligned;
	dcl     seg_ptr		 ptr;
	dcl     bc		 fixed (24);
	dcl     1 header		 based (seg_ptr),
		2 file_code	 fixed (35),
		2 lock_word	 bit (36) aligned;
	dcl     adjust_bit_count_	 entry (char (168) aligned, char (32) aligned, bit (1) aligned, fixed (24),
				 fixed (35));
	dcl     n_tail		 fixed;
	dcl     msf_manager_$adjust	 entry (ptr, fixed, fixed (24), bit (3), fixed (35));
	dcl     hcs_$fs_get_path_name	 entry (ptr, char (*) aligned, fixed, char (*) aligned, fixed (35));
	dcl     hcs_$status_	 entry (char (*) aligned, char (*) aligned, fixed (1), ptr, ptr, fixed (35));
	dcl     d_len		 fixed;
	dcl     1 branch_info	 aligned,
	        ( 2 type		 bit (2),
		2 nnames		 fixed (15),
		2 nrp		 bit (18),
		2 dtm		 bit (36),
		2 dtu		 bit (36),
		2 mode		 bit (5),
		2 pad		 bit (13),
		2 n_recs		 fixed (17)
		)		 unaligned,
		2 words1		 (3) fixed,
		2 pad1		 bit (12) unal,
		2 bit_count	 bit (24) unal,
		2 words2		 (2) fixed;
	dcl     cv_dec_check_	 entry (char (*), fixed (35)) returns (fixed (35));
	dcl     set_lock_$lock	 entry (bit (36) aligned, fixed, fixed (35));
	dcl     command_query_	 entry options (variable);
	dcl     1 query_info	 aligned,
		2 version		 fixed init (2),
		2 yes_or_no_sw	 bit (1) unal init ("1"b),
		2 suppress_name_sw	 bit (1) unal init ("0"b),
		2 code		 fixed (35),
		2 query_code	 fixed (35);
	dcl     answer		 char (12) var;
	dcl     iox_$attach_ioname	 entry (char (*), ptr, char (*), fixed (35));
	dcl     unique_chars_	 entry (bit (*)) returns (char (15));
     end vfile_adjust;
