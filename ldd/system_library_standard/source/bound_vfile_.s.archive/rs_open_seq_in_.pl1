/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* record_stream_ program for handling sequential input openings */
rs_open_seq_in_:
     proc (iocb_ptr_arg, code);
	iocb_ptr = iocb_ptr_arg;
						/* set entries in iocb for valid operations in this mode */
	read_record = read_record_rs;
	read_length = read_length_rs;
	position = position_seq_rs;
	return;					/* end of opening routine */

read_record_rs:
     entry (iocb_ptr_arg, buff_ptr_arg, buff_len, rec_len, code);
	call initialize;
	buff_ptr = buff_ptr_arg;
	if n_left ^= 0
	then /* internal buffer contains a record */
	     do;					/* get record from rs_buffer */
		if n_left > 0
		then rec_len = n_left;
		else rec_len = 0;
		n_left = 0;			/* set rs_buffer empty */
		if rec_len > buff_len
		then code = error_table_$long_record;
		n_moved = min (rec_len, buff_len);
		if n_moved > 0
		then substr (buffer, 1, n_moved) = substr (rs_buffer, 1, n_moved);
	     end;					/* record moved between buffers */

	else /* rs_buffer empty */
	     if length_n > 0
	then do;					/* -length n case */
		rec_len = 0;
		n_asked = min (buff_len, length_n);
get_data:
		call iox_$get_chars (target_iocb_ptr, buff_ptr, n_asked, n_read, code);
		rec_len = rec_len + n_read;
		if code ^= 0
		then if code = error_table_$short_record
		     then do;			/* pick up more chars */
			     n_asked = n_asked - n_read;
			     buff_ptr = addr (buff (n_read + 1));
			     go to get_data;
			end;
		     else go to eof_exit;
		else /* no errors yet */
		     if length_n > buff_len
		then /* long record case unless we are at EOF */
		     do;				/* munch past record tail */
			n_extra = length_n - buff_len;
			call iox_$get_chars (target_iocb_ptr, rs_buff_ptr, n_extra, n_read, code);
			rec_len = rec_len + n_read;
			if n_read > 0
			then code = error_table_$long_record;
			else if code = error_table_$end_of_info
			then code = 0;		/* short last record is OK */
		     end;
	     end;					/* end of -length n case */

	else do;					/* default case */
		call iox_$get_line (target_iocb_ptr, buff_ptr_arg, buff_len, rec_len, code);
		if code = 0
		then rec_len = rec_len - 1;		/* delete newline char */
		else if code ^= error_table_$long_record
		then do;				/* check for short record */
eof_exit:
			if rec_len > 0
			then code = 0;
		     end;				/* done */
		else do;				/* line is longer than input buffer */
			call iox_$get_chars (target_iocb_ptr, addr (next_char), 1, n_read, code);
			if code = 0
			then if substr (next_char, 1, 1) = newline
						/* avoids compiler bug */
			     then return;		/* normal return */
			     else do;		/* munch record tail */
				     rec_len = rec_len + 1;
				     call iox_$get_line (target_iocb_ptr, rs_buff_ptr, max_bufsize, n_read, code);
				     rec_len = rec_len + n_read;
				end;
			code = error_table_$long_record;
		     end;				/* entire record processed */
	     end;					/* end of default case */
	return;					/* end of read record routine */


read_length_rs:
     entry (iocb_ptr_arg, rec_len, code);
	call initialize;
	if n_left = 0				/* rs_buffer is empty */
	then do;					/* get a new record */
		call read_record_rs (iocb_ptr, rs_buff_ptr, max_bufsize, n_left, code);
		if (n_left = 0) & (code = 0)
		then n_left = -1;
	     end;
	if n_left > 0
	then rec_len = n_left;
	else rec_len = 0;
	return;					/* end of read length routine */

position_seq_rs:
     entry (iocb_ptr_arg, type, count, code);
	call initialize;
	n = count;
	if type ^= 0
	then do;					/* bof and eof cases */
		n_left = 0;			/* discard rs_buffer contents */
pass_call:
		call iox_$position (target_iocb_ptr, type, n, code);
						/* pass call to target */
	     end;
	else do;					/* skip case */
		if n ^= 0
		then do;				/* skip n records */
			old_n_left = n_left;
			if n_left ^= 0
			then do;			/* skip record in rs_buffer */
				n = n - 1;
				n_left = 0;
			     end;
			if length_n = 0		/* default case */
			then go to pass_call;
			else /* -length case */
			     if n < 0
			then do;			/* error: no backwards skips */
				code = error_table_$negative_nelem;
				n_left = old_n_left;/* restore rs_buffer */
			     end;
			else /* read past n records */
			     do while ((n > 0) & (code = 0));
				call read_record_rs (iocb_ptr, rs_buff_ptr, max_bufsize, n_read, code);
				n = n - 1;
			     end;
		     end;				/* n records skipped */
	     end;					/* end of skip case */
	return;					/* end of seq position routine */

/* internal procedure for initializing pointers upon entry */
initialize:
     proc;
	iocb_ptr = iocb_ptr_arg -> actual_iocb_ptr;
	rsab_ptr = attach_data_ptr;
	rs_buff_ptr = open_data_ptr;
	code = 0;
	return;

     end initialize;

/* declarations for entire program */
	dcl     (iocb_ptr_arg, iocb_ptr)
				 ptr;
	dcl     code		 fixed bin (35);
%include iocbv;
%include rs_attach_block;
%include rs_buffer;
	dcl     (buff_ptr_arg, buff_ptr)
				 ptr;
	dcl     (buff_len, rec_len, n_moved)
				 fixed (21);
	dcl     (substr, min, addr)	 builtin;
	dcl     error_table_$long_record
				 external fixed (35);
	dcl     error_table_$short_record
				 external fixed (35);
	dcl     (n_asked, n_read)	 fixed (21);
	dcl     iox_$get_chars	 entry (ptr, ptr, fixed bin (21), fixed bin (21), fixed bin (35));
	dcl     buffer		 char (buff_len) based (buff_ptr);
	dcl     buff		 (buff_len) char (1) based (buff_ptr);
	dcl     n_extra		 fixed (21);
	dcl     error_table_$end_of_info
				 external fixed (35);
	dcl     next_char		 char (2);
	dcl     newline		 char (1) static internal aligned init ("
");
	dcl     type		 fixed;
	dcl     (count, n, old_n_left) fixed (21);
	dcl     iox_$position	 entry (ptr, fixed, fixed (21), fixed (35));
	dcl     error_table_$negative_nelem
				 external fixed (35);
	dcl     iox_$get_line	 entry (ptr, ptr, fixed bin (21), fixed bin (21), fixed bin (35));

     end rs_open_seq_in_;
