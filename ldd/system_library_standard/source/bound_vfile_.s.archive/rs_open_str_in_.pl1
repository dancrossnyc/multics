/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* record_stream_ program for handling stream input openings */
rs_open_str_in_:
     proc (iocb_ptr_arg);
	iocb_ptr = iocb_ptr_arg;

/* set entries for valid operations in this mode */
	get_chars = get_chars_rs;
	get_line = get_line_rs;
	position = position_str_rs;
	return;					/* end of open initialization routine */

get_chars_rs:
     entry (iocb_ptr_arg, buff_ptr_arg, buff_len_arg, n_read, code);
	call init_args;
	if buff_len < 0
	then code = error_table_$negative_nelem;
	do while ((buff_len > 0) & (code = 0));		/* get buff_len characters */
	     if n_left > 0
	     then /* internal buffer is not empty */
		do;				/* move chars between buffers */
		     n_moved = min (buff_len, n_left);
		     call move;
		     if n_moved = buff_len
		     then do;			/* normal return */
exit:
			     base = base + n_moved;
			     return;
			end;
		     else /* more characters to be moved */
			do;			/* advance through input buffer */
			     buff_len = buff_len - n_moved;
			     buff_ptr = addr (buff (n_moved + 1));
			end;
		end;
	     call get_record;
	end;
	return;					/* end of get_chars routine */

get_line_rs:
     entry (iocb_ptr_arg, buff_ptr_arg, buff_len_arg, n_read, code);
	call init_args;
	if buff_len <= 0
	then code = error_table_$smallarg;
	do while ((buff_len > 0) & (code = 0));		/* pick up remainder of line */
	     if n_left > 0
	     then /* internal buffer is not empty */
		do;				/* move line between buffers */
		     line_len = index (substr (rs_buffer, base, n_left), newline);
		     if line_len = 0
		     then length = n_left;
		     else length = line_len;
		     n_moved = min (length, buff_len);
		     call move;			/* transfer n_moved chars from rs_buff to input buff */
		     if length > buff_len
		     then do;			/* error: line too long */
			     code = error_table_$long_record;
			     go to exit;
			end;
		     else if line_len > 0		/* newline has been found */
		     then go to exit;
		     else /* keep looking for end of line */
			do;			/* advance through input_buffer */
			     buff_len = buff_len - n_moved;
			     buff_ptr = addr (buff (n_moved + 1));
			end;
		end;
	     call get_record;			/* rs_buffer empty-- get another record */
	end;
	return;					/* end of get_line routine */

position_str_rs:
     entry (iocb_ptr_arg, type, count, code);
	call brief_init;
	if type ^= 0
	then do;					/* position to start or end of file */
		n_left = 0;			/* flush rs_buffer */
		call iox_$position (target_iocb_ptr, type, count, code);
						/* pass call to target */
	     end;
	else /* skip case */
	     do;					/* skip n lines */
		if count < 0			/* no backward skips permitted */
		then code = error_table_$negative_nelem;
		n = count;
		do while ((n > 0) & (code = 0));	/* skip n lines */
		     if n_left <= 0
		     then call get_record;		/* if rs_buffer is empty--fill it */
		     else /* internal buffer is not empty */
			do;			/* find newline in rs_buffer */
			     line_len = index (substr (rs_buffer, base, n_left), newline);
			     if line_len > 0
			     then /* newline found */
				do;		/* successful skip */
				     base = base + line_len;
				     n_left = n_left - line_len;
				     n = n - 1;
				end;
			     else n_left = 0;	/* crunch past this record */
			end;
		end;
	     end;					/* n lines skipped */
	return;					/* end of stream position routine */

/* internal procedures */
init_args:
     proc;					/* initialize upon entry */
	buff_len = buff_len_arg;
	buff_ptr = buff_ptr_arg;
	n_read = 0;
brief_init:
     entry;
	code = 0;
	iocb_ptr = iocb_ptr_arg -> actual_iocb_ptr;
	rsab_ptr = attach_data_ptr;
	rs_buff_ptr = open_data_ptr;
	return;

     end init_args;

get_record:
     proc;					/* read a new record into the rs_buffer appending newline if default attachment */
	call iox_$read_record (target_iocb_ptr, rs_buff_ptr, max_bufsize, n_left, code);
	if code = 0
	then do;
		base = 1;
		if length_n = 0
		then /* default attachment */
		     do;				/* append newline */
			n_left = n_left + 1;
			substr (rs_buffer, n_left, 1) = newline;
		     end;
	     end;
	return;
     end get_record;

move:
     proc;					/* take n_moved chars from rs_buffer and append to input buffer */
	substr (buffer, 1, n_moved) = substr (rs_buffer, base, n_moved);
	n_read = n_read + n_moved;
	n_left = n_left - n_moved;
	return;

     end move;

/* declarations for entire program */
	dcl     (iocb_ptr_arg, iocb_ptr, buff_ptr_arg, buff_ptr)
				 ptr;
	dcl     (buff_len_arg, buff_len, n_read)
				 fixed (21);
	dcl     code		 fixed (35);
	dcl     error_table_$negative_nelem
				 external fixed (35);
%include iocbv;
%include rs_attach_block;
	dcl     n_moved		 fixed (21);
	dcl     error_table_$smallarg	 external fixed (35);
	dcl     line_len		 fixed (21);
	dcl     (index, substr, min, addr)
				 builtin;
	dcl     length		 fixed (21);
	dcl     error_table_$long_record
				 external fixed (35);
	dcl     type		 fixed;
	dcl     count		 fixed (21);
	dcl     iox_$position	 entry (ptr, fixed, fixed (21), fixed (35));
	dcl     n			 fixed (21);
	dcl     newline		 char (1) aligned static internal init ("
");
	dcl     iox_$read_record	 entry (ptr, ptr, fixed (21), fixed (21), fixed (35));
	dcl     error_table_$no_record external fixed (35);
%include rs_buffer;
	dcl     buffer		 char (buff_len) based (buff_ptr);
	dcl     buff		 (buff_len) char (1) based (buff_ptr);

     end rs_open_str_in_;
