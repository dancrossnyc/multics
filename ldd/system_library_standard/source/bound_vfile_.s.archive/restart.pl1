/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1990   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */






/****^  HISTORY COMMENTS:
  1) change(90-10-12,Zimmerman), approve(90-10-12,MCR8216),
     audit(90-10-15,Zwick), install(90-10-16,MR12.4-1043):
     Data_Mgt 63 (phx21194): Raise the max number of components in an MSF to
     1250.
                                                   END HISTORY COMMENTS */




restart:
     proc (iocb_ptr, code);				/* tries to complete interrupted operation */
	indx_cb_ptr = open_data_ptr;
	f_b_ptr = file_base_ptr;
	fs_ptr = file_state_ptr;
	call save_restart_proc_info;
	on cleanup
	     call restore_restart_proc_info;
	indx_cb.mode = 10;				/* ksu */
	indx_cb.min_res = saved_min_res;
	indx_cb.min_cap = saved_min_cap;
	indx_cb.outside_index = file_base.out_of_index;
	indx_cb.current_descrip = file_base.old_record_designator;
	indx_cb.stat = file_base.was_stat;
	indx_cb.trans = "0"b;
	repeating = "1"b;
	indx_cb.shared = "0"b;
	indx_cb.subset_selected = "00"b;
	indx_cb.current_record_is_valid = "1"b;
	pos_incorrect = "0"b;
	indx_cb.dup_ok = "1"b;
	indx_cb.next_record_position = 1;
	if (file_action = adjust_action) | (file_action = rollback_action)
	then do;
		if ^((file_action = rollback_action) & (file_base.old_prev_mod = -3) & (file_base.old_ref_count <= 0))
						/* not total collection of storage */
		then call lock_record (file_base.old_record_designator);
		call open_indx_file$adjust_record (iocb_ptr, file_base.old_record_designator, 0, code);
	     end;
	else if file_action = replace_action
	then call restart_replacement;
	else if file_action = reassigning_key
	then call restart_reassignment;
	else do;
		call restore_old_proc_info;
		if file_action = insert_action
		then call restart_insertion;
		else if file_action = delete_action
		then do;
			if file_base.was_stat
			     & (file_base.is_partial_deletion | (file_base.old_modifier > 0)
			     | (file_base.old_ref_count > fixed (^file_base.out_of_index)))
						/*
						   not case of total collection, including stationary header */
			then call lock_record (file_base.old_record_designator);
						/* else protect this storage--don't clobber free list */
			call open_indx_file$delete_indx_file (iocb_ptr, code);
		     end;
		else if file_action = adding_key
		then call restart_add_key;
		else if file_action = deleting_key
		then do;
			indx_cb.outside_index = "0"b;
			if file_base.was_stat	/* watch out for low level synch */
			then call lock_record (file_base.old_record_designator);
			call open_indx_file$control_indx_file (iocb_ptr, "delete_key", null, code);
		     end;
		else if file_action = adding_record
		then call restart_rs_create;
		else if file_action = bumping_count
		then do;
			file_base.change_count = file_base.old_file_ch_count + 1;
			file_action = 0;
		     end;
		else code = error_table_$bad_file;
	     end;
	call restore_restart_proc_info;
	if indx_cb.file_state_ptr -> file_action = 0
	then code = 0;
	else if code = 0
	then code = error_table_$bad_file;
	return;					/* end of restart routine */

save_restart_proc_info:
     proc;
	saved_state = indx_cb.state_vars;
	saved_subset_selected = indx_cb.subset_selected;
	was_ks_out = is_ks_out;
	my_min_res = indx_cb.min_res;
	my_min_cap = indx_cb.min_cap;
	was_stat = indx_cb.stat;
	was_dup_ok = indx_cb.dup_ok;
	was_trans = indx_cb.trans;
	old_mode = indx_cb.mode;
	return;

restore_restart_proc_info:
     entry;
	indx_cb.state_vars = saved_state;
	indx_cb.subset_selected = saved_subset_selected;
	repeating = "0"b;
	is_ks_out = was_ks_out;
	indx_cb.min_res = my_min_res;
	indx_cb.min_cap = my_min_cap;
	file_base.max_comp_num = true_max_comp_num;
	indx_cb.pos_incorrect = "1"b;
	indx_cb.stat = was_stat;
	indx_cb.dup_ok = was_dup_ok;
	indx_cb.trans = was_trans;
	indx_cb.mode = old_mode;
     end save_restart_proc_info;

restore_old_proc_info:
     proc;
	if ^(indx_cb.outside_index & ((file_action = delete_action) | (file_action = adding_record)))
	then do;					/* restore position stack */
		is_ptr = index_state_ptr;
		p = root_position_ptr;
		file_position_ptr = p;
		change_position_ptr = p;

		do i = 1 to index_height;
		     p = p -> son_position_ptr;
		     p -> node = saved_node (i);
		     p -> branch_num = saved_branch_num (i);
		     p -> node_ptr = get_ptr (p -> node);
		     if p -> node = current_node
		     then file_position_ptr = p;
		     if p -> node = change_node
		     then change_position_ptr = p;
		end;

	     end;
	is_ks_out = saved_ks_out;
	indx_cb.ready_to_write = "1"b;
	dcl     p			 ptr;
	dcl     i			 fixed;
     end restore_old_proc_info;

restart_add_key:
     proc;					/* recovers from interrupted add_key operation */
	indx_cb.current_descrip = file_base.new_descriptor;
	if file_base.was_stat
	then call lock_record (indx_cb.current_descrip);
	indx_cb.outside_index = "0"b;
	string (ak_inf.flags) = "00"b;
	call open_indx_file$control_indx_file (iocb_ptr, "add_key", addr (ak_inf), code);
     end restart_add_key;

restart_rs_create:
     proc;					/* finish allocation, then delete */
	if file_base.out_of_index			/* no key with the record--always delete since user can't find this record */
	then do;
		if file_substate = 0
		then indx_cb.repeating = "0"b;
		else indx_cb.next_substate = 0;
		call change_record_list (iocb_ptr, allocate_action, null, abort_exit);
		file_base.old_record_designator = file_base.new_descriptor;
		file_base.old_ref_count = 0;
		file_base.change_count = file_base.old_file_ch_count + 1;
		call change_record_list (iocb_ptr, delete_action, null, abort_exit);
		file_action = 0;
		return;
	     end;
	if file_base.was_stat
	then call lock_record (file_base.new_descriptor);
	rs_inf.record_length = new_record_length;
	rs_inf.max_rec_len = saved_min_cap;
	unspec (rs_inf.flags) = "0"b;
	rs_inf.inc_ref_count = (file_base.was_stat & (file_base.old_ref_count = 2));
	rs_inf.create_sw = "1"b;
	rs_inf.locate_sw = out_of_index;
	rs_inf.version = rs_info_version_2;
	call open_indx_file$control_indx_file (iocb_ptr, "record_status", addr (rs_inf), code);
     end restart_rs_create;

restart_replacement:
     proc;					/* finish interrupted replace operation */
	call reinit_rewrite_proc;
	if ^file_base.was_stat			/* non-stationary type record rewritten */
	then do;					/* see if contents may be invalid */
		old_rec_ptr = get_rec_ptr (old_record_designator);
		if (fixed (old_rec_des.offset) + 2 + divide (new_record_length + 3, 4, 21, 0)) > max_seg_limit
		then new_rec_ptr = file_base_ptr;	/* avoids seg_fault */
		else new_rec_ptr = old_rec_ptr;
		if ((old_record_length ^= new_record_length) | (file_substate > 1)
		     | (old_record_designator ^= new_descriptor)) & (new_record_length > 0)
		then if ^indx_cb.outside_index
		     then call sub_err_ (0, "vfile_", "c", null, code, "Record contents may be incorrect for key: ^a",
			     substr (keys, key_pos (branch_num), key_length (branch_num)));
		     else call sub_err_ (0, "vfile_", "c", null, code,
			     "Record contents may be incorrect for record with descriptor: ^o", old_record_designator);
	     end;
	else do;
		call lock_record (file_base.old_record_designator);
		if file_base.change_count = file_base.old_file_ch_count
						/* op will be undone */
		then do;				/* undo the rewrite--old stuff still is intact */
			if file_base.new_record_length + indx_cb.min_res + indx_cb.min_cap > 0
			then do;
				if file_substate = 1
				then indx_cb.repeating = "0"b;
				else indx_cb.next_substate = 1;
				call change_record_list (iocb_ptr, allocate_action, f_b_ptr, abort_exit);
				call change_record_list (iocb_ptr, free_action, null, abort_exit);
			     end;
			block_ptr -> stat_block.lock_flag = "0"b;
			block_ptr -> stat_structure.modifier = -1;
			file_action = bumping_count;
			file_base.change_count = file_base.old_file_ch_count + 1;
			file_action = 0;
						/* now just unlock the record */
			block_ptr = get_pointer (file_base.old_record_designator);
			block_ptr -> stat_block.modifier = 0;
			if stacq (block_ptr -> stat_block.record_lock, "0"b, indx_cb.saved_lock_copy)
						/* clear record lock */
			then ;
			return;
		     end;
		else if file_base.new_descriptor > 0
		then new_rec_ptr = get_rec_ptr (file_base.new_descriptor);
		else new_rec_ptr = null;
	     end;
	call open_indx_file$rewrite_indx_file (iocb_ptr, new_rec_ptr, new_record_length, code);
     end restart_replacement;

reinit_rewrite_proc:
     proc;					/* set up position info */
	file_position_ptr = root_position_ptr -> son_position_ptr;
	node = first_branch;
	branch_num = count;
	node_ptr = get_ptr (node);
     end reinit_rewrite_proc;

restart_reassignment:
     proc;
	if file_base.was_stat
	then do;
		block_ptr = get_pointer (file_base.old_record_designator);
		if block_ptr ^= null
		then if block_ptr -> record_block_structure.stationary
		     then call lock_record (file_base.old_record_designator);
		new_block_ptr = get_pointer (file_base.new_descriptor);
		if new_block_ptr ^= null
		then if new_block_ptr -> record_block_structure.stationary
		     then call lock_record (file_base.new_descriptor);
	     end;
	indx_cb.outside_index = "0"b;
	string (rk_inf.flags) = "001"b;		/* input new descrip */
	rk_inf.new_descrip = file_base.new_descriptor;
	call reinit_rewrite_proc;			/* finds index position */
	call open_indx_file$control_indx_file (iocb_ptr, "reassign_key", addr (rk_inf), code);
     end restart_reassignment;

restart_insertion:
     proc;					/* finish interrupted write operation */
	if file_base.change_count = file_base.old_file_ch_count
						/* buffer may not be saved yet */
	then do;					/* undo any allocation */
		if file_base.was_stat
		     | (file_base.new_record_length + file_base.saved_min_cap + file_base.saved_min_res > 0)
						/* allocation was required */
		then do;				/* restart, then reverse */
			if file_substate = 1
			then indx_cb.repeating = "0"b;
			else indx_cb.next_substate = 1;
						/* tracking variable--set_add_ent_info routine must have been used */
			call change_record_list (iocb_ptr, insert_action, null, abort_exit);
			file_base.old_record_designator = file_base.new_descriptor;
			file_base.out_of_index = "0"b;
			file_base.is_partial_deletion = "0"b;
			call change_record_list (iocb_ptr, delete_action, null, abort_exit);
		     end;
		file_action = bumping_count;
		file_base.change_count = file_base.old_file_ch_count + 1;
		file_action = 0;
		return;
	     end;
	if file_base.new_descriptor <= 0
	then new_rec_ptr = null;
	else do;
		new_rec_ptr = get_rec_ptr (file_base.new_descriptor);
		if file_base.was_stat
		then new_rec_ptr = addrel (new_rec_ptr, 6);
						/* larger header */
	     end;
	call open_indx_file$write_indx_file (iocb_ptr, new_rec_ptr, new_record_length, code);
     end restart_insertion;

get_ptr:
     proc (designator_arg) returns (ptr);
	return (addr (seg_ptr_array (des_arg.comp_num) -> seg_array (fixed (des_arg.offset))));
	dcl     designator_arg	 fixed (35);
	dcl     1 des_arg		 like designator_struct aligned based (addr (designator_arg));
     end;

get_rec_ptr:
     proc (designator_arg) returns (ptr);
	return (addrel (get_pointer (designator_arg), 2));
	dcl     designator_arg	 fixed (35);
     end get_rec_ptr;

get_pointer:
     proc (designator_arg) returns (ptr);
	return (addr (get_seg_ptr (iocb_ptr, (des_arg.comp_num)) -> seg_array (fixed (des_arg.offset))));
	dcl     designator_arg	 fixed (35);
	dcl     1 des_arg		 like designator_struct aligned based (addr (designator_arg));
     end get_pointer;

lock_record:
     proc (designator_arg);
	if designator_arg <= 0
	then return;
	blockp = get_pointer (designator_arg);
	if blockp = null
	then return;
	call set_lock_$lock (blockp -> stat_structure.record_lock, 0, code);
	if (code = 0) | (code = error_table_$invalid_lock_reset) | (code = error_table_$locked_by_this_process)
	then do;
		code = 0;
		return;
	     end;
	if file_action = reassigning_key
	then if block_ptr ^= null
	     then if block_ptr -> record_block_structure.stationary
		then if stacq (block_ptr -> stat_structure.record_lock, (36)"1"b, indx_cb.saved_lock_copy)
		     then ;			/* invalidate other lock, if I set it */
	code = error_table_$file_busy;
	call restore_restart_proc_info;
	go to exit;
	dcl     designator_arg	 fixed (35);
	dcl     blockp		 ptr;
     end lock_record;

abort_exit:
	code = error_table_$file_is_full;
	call restore_restart_proc_info;
	if (file_action ^= replace_action)
	then return;
	block_ptr = get_pointer (file_base.old_record_designator);
	if stacq (block_ptr -> stat_block.record_lock, (36)"1"b, indx_cb.saved_lock_copy)
	then ;					/* invalidate record lock */
exit:
	return;					/* abort with error code set */

	dcl     current_program_version
				 static options (constant) internal fixed init (31);
	dcl     block_ptr		 ptr;
	dcl     new_block_ptr	 ptr;
	dcl     1 stat_block	 based (block_ptr),
		2 pad		 bit (22) unal,
		2 lock_flag	 bit (1) unal,
		2 pad2		 bit (13) unal,
		2 word,
		2 record_lock	 bit (36) aligned,
		2 modifier	 fixed (35);
%include rs_info;
%include ak_info;
	dcl     1 rk_inf,
		2 header		 like rk_header;
	dcl     1 ak_inf		 based (addr (rk_inf)),
		2 header		 like ak_header;
	dcl     1 rs_inf		 like rs_info;
	dcl     sub_err_		 entry options (variable);
%include vfile_error_codes;
	dcl     pos_ptr		 ptr defined (file_position_ptr);
	dcl     code		 fixed (35);
	dcl     iocb_ptr		 ptr;
	dcl     open_indx_file$rewrite_indx_file
				 entry (ptr, ptr, fixed (21), fixed (35));
	dcl     open_indx_file$adjust_record
				 entry (ptr, fixed (35), fixed (35), fixed (35));
	dcl     open_indx_file$write_indx_file
				 entry (ptr, ptr, fixed (21), fixed (35));
	dcl     open_indx_file$delete_indx_file
				 entry (ptr, fixed (35));
	dcl     open_indx_file$control_indx_file
				 entry (ptr, char (*), ptr, fixed (35));
	dcl     (old_rec_ptr, new_rec_ptr)
				 ptr;
	dcl     1 old_rec_des	 like designator_struct aligned based (addr (old_record_designator));
	dcl     was_ks_out		 bit (1) aligned;
	dcl     saved_subset_selected	 bit (2) aligned;
	dcl     my_min_res		 fixed (21);
	dcl     my_min_cap		 fixed (19);
	dcl     was_stat		 bit (1) aligned;
	dcl     was_dup_ok		 bit (1) aligned;
	dcl     was_trans		 bit (1) aligned;
	dcl     1 saved_state	 like indx_cb.state_vars;
	dcl     old_mode		 fixed;
%include iocbv;
%include vfile_indx;
	dcl     cleanup		 condition;
	dcl     set_lock_$lock	 entry (bit (36) aligned, fixed, fixed (35));
          dcl     (addrel, stacq, string) builtin;

     end restart;
