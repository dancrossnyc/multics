" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1982 *
" *                                                         *
" * Copyright (c) 1972 by Massachusetts Institute of        *
" * Technology and Honeywell Information Systems, Inc.      *
" *                                                         *
" ***********************************************************

"find_key: proc(indx_cb_ptr,(key_ptr),search_code);
	name	find_key
	segdef	find_key
find_key:	epp1	pr0|2,*		pr1<-->indx_cb_ptr
	epp1	pr1|0,*		pr1<-->indx_cb
	epp2	pr1|file_position_ptr,*  pr2<-->position_frame
	epp5	pr2|node_ptr,*	pr5<-->node_block
	epp3	pr0|4,*		pr3<-->key_ptr
	epp3	pr3|0,*		pr3<-->key
	lxl5	pr3|0		x5<-length(key)

"q=branch(branch_num).if q=0 then return;
	eax2	0		will be set if key found
descent:	ldq	pr2|branch_num	ql<-position_frame.branch_num
	qls	1		ql<-2*branch_num
	adq	pr2|branch_num	ql<-3*branch_num
	ldq	pr5|0,ql		q<-branch(branch_num)
	tnz	get_son		if branch(branch_num)^=0 ==>get_son
	stz	pr0|6,*		clear garbage in arg3
	stx2	pr0|6,*		set result in arg3
	short_return

"pos_ptr=son_position_ptr;
get_son:	epp2	pr2|son_position_ptr,*  pr2<-son_position_ptr
	spri2	pr1|file_position_ptr  pos_ptr<-son_position_ptr

"node=q;
	stq	pr2|node		position_frame.node<-q

"node_ptr=addr(seg_ptr_array(q.comp_num)->seg_array(q.offset));
	eaa	0,qu		au<-q.comp_num,al<-0
	als	1		au<-2*q.comp_num
	epp5	pr1|seg_ptr_array_ptr,*au  pr5<-->seg_ptr_array(comp_num)
	epp5	pr5|0,*ql		pr5<-->seg_array(q.offset)
	spri5	pr2|node_ptr	node_ptr<-->seg_array(q.offset)

"low=1
	eax3	1		low<-1

"high=last_branch_num-1;
	ldq	pr5|last_branch_num	ql<-last_branch_num
	sbq	1,dl		ql<-last_branch_num-1
	qls	18		qu<-last_branch_num, ql<-0
	epp1	pr0|6,*		pr1<-->arg3
	stq	pr1|0		high<-last_branch_num-1
	epp2	pr0|4,*		pr2<-->arg2

"search:	i=(low+high)/2  ;
search:	eaq	0,3		qu<-low
	adq	pr1|0		qu<-(low+high)
	qrl	1		i<-(low+high)/2
	eax4	0,qu		x4<-(low+high)/2
	stx4	pr2|0		arg2<-(low+high)/2
	adx4	pr2|0		x4<-2*i
	adx4	pr2|0		x4<-3*i

"if substr(keys,key_pos(i),key_length(i))<key then low=i+1;
	ldx7	pr5|1,4		x7<-key_pos(i)
	lxl6	pr5|1,4		x6<-key_length(i)
	cmpc	(pr,rl,x7),(pr,rl),fill(040)  substr::key
	desc9a	pr5|-1(3),x6	addr(keys(0)),key_length(i)
	desc9a	pr3|1,x5		addr(key),length(key)
	trc	not_low		if substr>=key ==>not_low
	eax3	1,qu		low=i+1
	tra	continue		==>continue

"else if substr=key then search_code=1;
not_low:	tnz	unequal		if substr>key ==>unequal
	eax2	1		will be copied into arg

"high=i-1;
unequal:	eaq	-1,qu		qu<-i-1
	stq	pr1|0		high<-i-1

"if low<=high then go to search;
continue:	cmpx3	pr1|0		low::high
	tmoz	search		if high>=low ==>search

"branch_num=low. go to descent;
done:	epp1	pr0|2,*		pr1<-->indx_cb_ptr
	epp1	pr1|0,*		pr1<-->indx_cb
	epp2	pr1|file_position_ptr,*  pr2<-->position_frame
	sxl3	pr2|branch_num	branch_num<-low
	tra	descent		descend to leaf


	entry	last
last:
	epp1	pr0|2,*		pr1<-->indx_cb_ptr
	epp1	pr1|0,*		pr1<-->indx_cb
	epp2	pr1|file_position_ptr,*  pr2<-->position_frame
	epp5	pr2|node_ptr,*	pr5<-->node_block
	epp3	pr0|4,*		pr3<-->key_ptr
	epp3	pr3|0,*		pr3<-->key
	lxl5	pr3|0		x5<-length(key)

"q=branch(branch_num).if q=0 then return;
	eax2	0		will be set if key found
ldescent:	ldq	pr2|branch_num	ql<-position_frame.branch_num
	qls	1		ql<-2*branch_num
	adq	pr2|branch_num	ql<-3*branch_num
	ldq	pr5|0,ql		q<-branch(branch_num)
	tnz	lget_son		if branch(branch_num)^=0 ==>lget_son
	stz	pr0|6,*		clear garbage in arg3
	stx2	pr0|6,*		set result in arg3
	short_return

"pos_ptr=son_position_ptr;
lget_son:	epp2	pr2|son_position_ptr,*  pr2<-son_position_ptr
	spri2	pr1|file_position_ptr  pos_ptr<-son_position_ptr

"node=q;
	stq	pr2|node		position_frame.node<-q

"node_ptr=addr(seg_ptr_array(q.comp_num)->seg_array(q.offset));
	eaa	0,qu		au<-q.comp_num,al<-0
	als	1		au<-2*q.comp_num
	epp5	pr1|seg_ptr_array_ptr,*au  pr5<-->seg_ptr_array(comp_num)
	epp5	pr5|0,*ql		pr5<-->seg_array(q.offset)
	spri5	pr2|node_ptr	node_ptr<-->seg_array(q.offset)

"low=1
	eax3	1		low<-1

"high=last_branch_num-1;
	ldq	pr5|last_branch_num	ql<-last_branch_num
	sbq	1,dl		ql<-last_branch_num-1
	qls	18		qu<-last_branch_num, ql<-0
	epp1	pr0|6,*		pr1<-->arg3
	stq	pr1|0		high<-last_branch_num-1
	epp2	pr0|4,*		pr2<-->arg2

"lsearch:	i=(low+high)/2  ;
lsearch:	eaq	0,3		qu<-low
	adq	pr1|0		qu<-(low+high)
	qrl	1		i<-(low+high)/2
	eax4	0,qu		x4<-(low+high)/2
	stx4	pr2|0		arg2<-(low+high)/2
	adx4	pr2|0		x4<-2*i
	adx4	pr2|0		x4<-3*i

"if substr(keys,key_pos(i),key_length(i))<key then low=i+1;
	ldx7	pr5|1,4		x7<-key_pos(i)
	lxl6	pr5|1,4		x6<-key_length(i)
	cmpc	(pr,rl,x7),(pr,rl),fill(040)  substr::key
	desc9a	pr5|-1(3),x6	addr(keys(0)),key_length(i)
	desc9a	pr3|1,x5		addr(key),length(key)
	trc	lnot_low		if substr>=key ==>lnot_low
low:	eax3	1,qu		low=i+1
	tra	lcontinue		==>lcontinue

"else if substr=key then do search_code=1 low=i+1 end;
lnot_low:	tnz	lunequal		if substr>key ==>unequal
	eax2	1		will be copied into arg
	tra	low		set low=i+1
	
"high=i-1;
lunequal:	eaq	-1,qu		qu<-i-1
	stq	pr1|0		high<-i-1

"if low<=high then go to lsearch;
lcontinue:	cmpx3	pr1|0		low::high
	tmoz	lsearch		if high>=low ==>lsearch

"branch_num=low. go to ldescent;
ldone:	epp1	pr0|2,*		pr1<-->indx_cb_ptr
	epp1	pr1|0,*		pr1<-->indx_cb
	epp2	pr1|file_position_ptr,*  pr2<-->position_frame
	sxl3	pr2|branch_num	branch_num<-low
	tra	ldescent		descend to leaf





"declarations:
	equ	file_position_ptr,22  in indx_cb
	equ	node_ptr,4	in position_frame
	equ	branch_num,7	in position_frame
	equ	son_position_ptr,2	in position_frame
	equ	node,6		in position_frame
	equ	seg_ptr_array_ptr,8	in indx_cb
	equ	last_branch_num,0	in node_block

"this routine depends upon having branch_and_descrip_size=3

	end
