/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1990   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */






/****^  HISTORY COMMENTS:
  1) change(90-10-15,Zimmerman), approve(90-10-15,MCR8216),
     audit(90-10-15,Zwick), install(90-10-16,MR12.4-1043):
     Increase maximum number of components in MSF to 1250.
                                                   END HISTORY COMMENTS */




check_file_version:
     proc (indx_cb_ptr, code);
	f_b_ptr = file_base_ptr;
	fs_ptr = file_state_ptr;
	code = 0;
	if file_version = file_version_MR2		/* original version */
	then do;
		old_file_state_ptr = addr (old_file_state_blocks (file_state));
		if old_f_s_block.file_action ^= 0	/* too bad--no crashproofing */
		then do;
			code = error_table_$bad_file; /* nothing can be done */
			call sub_err_ (code, "vfile_", "c", null, code,
			     "Old file is inconsistent because of interrupted update--this version does not support recovery from interruptions."
			     );
		     end;
	     end;
	else if file_version = file_version_MR3		/* MR3.0 version */
	then do;
		old_file_state_ptr = addr (v20_fs_blocks (file_state));
		if v20_fsb.file_action ^= 0		/* operation in progress */
		then do;
			code = error_table_$unimplemented_version;
						/* user must adjust with
						   version 20 vfile_ before transformation can occur */
			call sub_err_ (code, "vfile_", "c", null, code,
			     "Operation in progress--this file must be adjusted with the MR3 version of vfile_.");
		     end;
	     end;
	else if file_version = file_version_MR6
	then if (file_state_block.file_action = 0) | (file_state_block.file_action = read_exclude)
	     then ;				/* no operations in progress */
	     else do;				/* complain--must adjust with old version vfile_ first */
		     code = error_table_$unimplemented_version;
		     call sub_err_ (code, "vfile_", "c", null, code,
			"Operation in progress--this file must be adjusted with the MR6 version of vfile_.");
		end;
	else do;
		code = error_table_$bad_file;		/* unrecognizable version */
		call sub_err_ (code, "vfile_", "c", null, code, "Unrecognizable indexed file version number.");
	     end;
	if (code = 0) & ^is_read_only
	then do;					/* make the version transformation */
		if (program_version > 11) & (program_version < 23)
		then do;
			code = error_table_$unimplemented_version;
			call sub_err_ (code, "vfile_", "c", null, code,
			     "Old version file must be adjusted with MR6 version of vfile_ in order to fix bad header statistics caused by old bugs."
			     );
			return;
		     end;
		if file_version = file_version_MR2
		then do;
			call move_comp_info;
			call move_file_statis;
			call move_index_statis;
		     end;
		else if file_version = file_version_MR3
		then call move_v20_statis;
		file_version = file_version_MR6;
		call rebuild_comp_array;
		file_version = current_file_version;
	     end;
	return;					/* end of file version update routine */

rebuild_comp_array:
     proc;					/* repacks items in comp_array */
	comp_info_ptr = addr (file_base.max_comp_num);

	do while (y_count <= 2 * true_max_comp_num);	/* loop through array */
	     i = divide (y_count, 2, 17, 0);		/* current element number */
	     if 2 * i = y_count			/* first copy old values into safe location */
	     then do;
		     file_base.old_init_offset = comp_info.init_offset (i);
		     file_base.former_rover_comp_num = comp_info.comp_link (i);
						/* these are just convenient header slots for temporary use */
		end;
	     else do;				/* now copy from temp back into comp_array in new format */
		     comp_table.init_offset (i) = file_base.old_init_offset;
		     comp_table.comp_link (i) = file_base.former_rover_comp_num;
		end;
	     y_count = y_count + 1;
	end;					/* note each cycle is repeatable */

	dcl     i			 fixed;
     end rebuild_comp_array;

move_comp_info:
     proc;
	comp_info_ptr = addr (old_version_comp_info);

	do while (x_count <= true_max_comp_num);	/* if this loop is interrupted, x_count will keep track of progress */
	     n = true_max_comp_num - x_count;
	     addr (file_base.max_comp_num) -> comp_info.comp_table (n) = comp_info.comp_table (n);
	     x_count = x_count + 1;
	end;

	file_base.first_free_comp_num = 0;
	file_base.last_comp_num = comp_info.last_comp_num;
	file_base.max_comp_num = true_max_comp_num;
     end move_comp_info;

move_file_statis:
     proc;
	file_state_block.file_action = 0;
	file_state_block.number_of_records = old_f_s_block.number_of_records;
	file_state_block.total_key_length = old_f_s_block.total_key_length;
	file_state_block.total_record_length = old_f_s_block.total_record_length;
	record_state_ptr = addr (record_state_blocks (record_state));
	file_state_block.number_of_allocated_records = record_state_block.number_of_allocated_records;
	file_state_block.number_of_free_blocks = record_state_block.number_of_free_blocks;
	call set_default_stats;
     end move_file_statis;

move_index_statis:
     proc;
	index_state = 0;
	index_state_ptr = addr (index_state_blocks (0));
	is_ptr = index_state_ptr;
	number_of_nodes = old_version_number_of_nodes;
	free_node_designator = old_version_free_node_designator;
	index_tail_comp_num = old_version_index_tail_comp_num;
	index_height = old_version_index_height;
	n = node_head_length + branch_and_descrip_length + 1;
	new_key_pos = n;				/* usually set at file creation */
	addr (index_state_blocks (1)) -> new_key_pos = n;
     end move_index_statis;

move_v20_statis:
     proc;
	file_state_block.file_action = 0;
	file_state_block.number_of_records = v20_fsb.number_of_records;
	file_state_block.total_key_length = v20_fsb.total_key_length;
	file_state_block.total_record_length = v20_fsb.total_record_length;
	file_state_block.number_of_allocated_records = v20_fsb.number_of_allocated_records;
	file_state_block.number_of_free_blocks = v20_fsb.number_of_free_blocks;
	call set_default_stats;
     end move_v20_statis;

set_default_stats:
     proc;					/* used with old version indexed files */
	file_state_block.number_of_keys = file_state_block.number_of_records;
	file_state_block.duplicate_keys = 0;
	file_state_block.dup_key_bytes = 0;
     end set_default_stats;

	dcl     pos_ptr		 ptr;		/* not used by this proc */
	dcl     code		 fixed (35);
%include vfile_error_codes;
	dcl     current_file_version	 static fixed init (40);
	dcl     file_version_MR2	 static internal options (constant) init (10);
	dcl     file_version_MR3	 static internal options (constant) init (20);
	dcl     file_version_MR6	 static internal options (constant) init (30);
	dcl     node_head_length	 static fixed init (16);
	dcl     branch_and_descrip_length
				 static fixed init (12);
	dcl     n			 fixed;
	dcl     1 v20_file_header	 based (f_b_ptr),	/* MR3.0 version header */
		2 words		 (62) fixed,
		2 v20_fs_blocks	 (0:1),		/* file state blocks */
		  3 words		 (7) fixed;
	dcl     1 v20_fsb		 based (old_file_state_ptr),
						/* MR3.0 file state block */
		2 file_action	 fixed,
		2 file_substate	 fixed,
		2 number_of_records	 fixed (34),
		2 total_key_length	 fixed (34),
		2 total_record_length
				 fixed (34),
		2 number_of_allocated_records
				 fixed (34),
		2 number_of_free_blocks
				 fixed (34);
	dcl     record_state_ptr	 ptr;
	dcl     1 record_state_block	 based (record_state_ptr),
		2 words		 (2) fixed,
		2 number_of_free_blocks
				 fixed (34),
		2 number_of_allocated_records
				 fixed (34);

	dcl     old_file_state_ptr	 ptr;
	dcl     1 old_f_s_block	 based (old_file_state_ptr),
		2 file_action	 fixed,
		2 word		 fixed,
		2 number_of_records	 fixed (34),
		2 total_key_length	 fixed (34),
		2 total_record_length
				 fixed (34);

	dcl     comp_info_ptr	 ptr;
	dcl     1 comp_info		 based (comp_info_ptr),
		2 max_comp_num	 fixed,
		2 last_comp_num	 fixed,
		2 first_free_comp_num /* not supported--used for converting versions */,
		2 comp_table	 (0:true_max_comp_num) aligned,
		  3 seg_limit	 fixed (19),
		  3 comp_link	 fixed (15) unal,
		  3 init_offset	 fixed (18) unal;

%include vfile_indx;
	dcl     sub_err_		 entry options (variable);
     end check_file_version;
