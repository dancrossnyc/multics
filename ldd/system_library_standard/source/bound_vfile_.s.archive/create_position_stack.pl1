/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


create_position_stack:
     proc (indx_cb_ptr);
	f_b_ptr = file_base_ptr;
	is_ptr = index_state_ptr;
	if file_version = 10			/* previous file version */
	then old_index_height = old_version_index_height;
	else old_index_height = index_height;
	position_stack_height = max (min_stack_height, old_index_height + 1);
	call alloc_cb_file (size (position_stack), position_stack_ptr);
	call chain_stack_frames;
	return;					/* end create_position_stack code */

extend_position_stack:
     entry;					/* This inserts a new position frame immediately below
						   the root. change_position_ptr is set to this new frame. The whole stack
						   may be reallocated. */
	f_b_ptr = file_base_ptr;
	is_ptr = index_state_ptr;
	change_position_ptr = root_position_ptr;
	if parent_position_ptr = null
	then do;					/* reallocate stack, get one more frame */
		old_stack_ptr = position_stack_ptr;
		old_stack_height = position_stack_height;
		position_stack_height = position_stack_height + 1;
		call alloc_cb_file (size (position_stack), position_stack_ptr);
		call chain_stack_frames;
		file_position_ptr = root_position_ptr;
		do i = 1 to old_stack_height;		/* copy old stack */
		     change_position_ptr = addr (position_stack (i));
		     old_frame_ptr = addr (old_stack (i));
		     node_ptr = old_frame_ptr -> node_ptr;
		     node = old_frame_ptr -> node;
		     if node = current_node
		     then file_position_ptr = change_position_ptr;
		     branch_num = old_frame_ptr -> branch_num;
		end;
		parent_position_ptr = addr (position_stack (position_stack_height));
		parent_position_ptr -> parent_position_ptr = null;
		parent_position_ptr -> son_position_ptr = change_position_ptr;
		call free_cb_file (size (old_stack), old_stack_ptr);
	     end;
						/* Set up new root frame */
	root_position_ptr = parent_position_ptr;
	root_position_ptr -> node_ptr = node_ptr;
	root_position_ptr -> node = node;
	root_position_ptr -> branch_num = 1;
	return;					/* end extend stack code */

free_position_stack:
     entry;
	call free_cb_file (size (position_stack), position_stack_ptr);
	return;

	dcl     1 position_stack	 (position_stack_height) based (position_stack_ptr),
		2 words		 (size (position_frame));
	dcl     1 old_stack		 (old_stack_height) based (old_stack_ptr),
		2 words		 (size (position_frame));
	dcl     pos_ptr		 ptr defined (change_position_ptr);
	dcl     sp		 ptr;
	dcl     old_frame_ptr	 ptr;
	dcl     old_stack_ptr	 ptr;
	dcl     old_stack_height	 fixed;
	dcl     i			 fixed;
	dcl     min_stack_height	 static fixed init (4);
						/* 1 would work */

chain_stack_frames:
     proc;
	sp = null;
	do i = 1 to position_stack_height;
	     change_position_ptr = addr (position_stack (i));
	     son_position_ptr = sp;
	     branch_num = 1;			/* clear upper half word */
	     if sp ^= null
	     then sp -> parent_position_ptr = change_position_ptr;
	     sp = change_position_ptr;
	     if i = old_index_height + 1
	     then do;				/* set_root position */
		     node_ptr = addr (root_node_block);
		     node = fixed (rel (node_ptr), 35);
		     root_position_ptr = change_position_ptr;
		end;
	end;
	parent_position_ptr = null;
	return;
     end;						/* end chain_stack_frames */

%include vfile_indx;
     end /* end create_position_stack */;
