/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* This routine prints information about storage system
   files given a pathname (star convention permitted).
   Info provided includes the file's apparent type
   and various statistics */

vfs:
vfile_status:
     proc (pathname_arg);
	command_entry = "1"b;
	report = ioa_;				/* differs for subroutine entry */
	e_ptr = null;				/* won't free unless non-null */
	call cu_$arg_count (n_args);			/* args with which command was invoked */
	if n_args <= 0
	then code = error_table_$noarg;
	else if n_args > 1
	then code = error_table_$too_many_args;
	else code = 0;
	call check_code;				/* aborts on error */
	call get_star_names;			/* interprets pathname_arg */
status_loop:
	info.info_version = vfs_version_1;

	do i = 1 to e_count;			/* check each entry matching star_name */
	     if is_real_file ()			/* don't consider directories */
	     then if info.type = 1			/* unstructured */
		then call proc_uns_file;
		else if info.type = 2		/* sequential */
		then call proc_seq_file;
		else if info.type = 3		/* blocked */
		then call proc_blk_file;
		else if info.type = 4		/* indexed */
		then call proc_indx_file;		/* must be indexed */
	end;

	if command_entry & ^file_found		/* only directories or empty files found */
	then call com_err_ (0, "vfile_status", "No file found for given pathname.");
	else do;
cleanup:
		if ^command_entry			/* set return code */
		then code_arg = code;
	     end;
	if e_ptr ^= null
	then free entries, names in (a);
	return;					/* end of main file status routine */

print_:
     entry (iocb_ptr, file_base_ptr, report_arg, code_arg);
	report = report_arg;			/* set by io_call */
	command_entry = "0"b;
	e_count = 1;				/* one file only */
	is_star_name = "0"b;
	e_ptr = null;				/* prevents attempt to cleanup */
	go to status_loop;				/* print status of file */

get_star_names:
     proc;					/* expands argument in star convention */
	file_found = "0"b;				/* will be set if non-null, non-dir seg is found */
	call expand_path_ (addr (pathname_arg), length (pathname_arg), addr (d_name), addr (e_name), code);
						/* gets full path and ent names */
	call check_code;				/* aborts on non-zero error code */
	if index (e_name, "*") = 0			/* not a star name */
	then do;
		e_count = 1;			/* only one entry to consider */
		is_star_name = "0"b;		/* suppresses printout of pathname */
		return;
	     end;
	else is_star_name = "1"b;
	area_ptr = get_system_free_area_ ();		/* temp space for star_name info */
	call hcs_$star_ (d_name, e_name, 3 /* all types of entries */, area_ptr, e_count, e_ptr, n_ptr, code);
						/* finds matching entries */
	call check_code;
	d_len = length (d_name) + 1 - verify (reverse (d_name), " ");
						/* directory
						   pathname length */
	tot_names = 0;				/* will be set in following loop */

	do i = 1 to e_count;			/* get total extent of names structure allocated */
	     tot_names = tot_names + fixed (n_names (i));
	end;

     end get_star_names;

check_code:
     proc;					/* aborts if nonzero error code detected */
	if code = 0
	then return;
	if command_entry				/* first print message */
	then call com_err_ (code, "vfile_status");	/* prints error info */
	go to cleanup;				/* frees allocated system storage and closes msf */
     end check_code;

is_real_file:
     proc returns (bit (1) aligned);			/* non-dir seg */
	if is_star_name				/* get an entry name */
	then e_name = n_ptr -> names (fixed (e_ptr -> entries.n_index (i)));
						/* the i'th entry name */
	if command_entry
	then call vfile_status_ (d_name, e_name, addr (info), code);
						/* gets file info */
	else call vfile_status_$seg (iocb_ptr, file_base_ptr, addr (info), code);
	if (code = error_table_$dirseg) | (code = error_table_$noentry)
	then if command_entry
	     then return ("0"b);			/* ignore directories and non-existing entries */
	call check_code;
	if is_star_name				/* print pathname */
	then call report ("^a", substr (d_name, 1, d_len) || ">" || e_name);
	file_found = "1"b;
	return ("1"b);				/* indicates real data file found for i'th entry */
     end is_real_file;

proc_uns_file:
     proc;					/* prints info about unstructured files */
	call report ("type: unstructured
bytes: ^d", uns_info.end_pos);
	if uns_info.header_present			/* header is optional */
	then call report ("header: ^d", uns_info.header_id);
     end proc_uns_file;

proc_seq_file:
     proc;					/* prints info about sequential files */
	call report ("type: sequential");
	call print_common_info;
	if seq_info.version < 12
	then call report ("version: old (no record count)");
	else if seq_info.version < current_seq_version
	then call report ("version: old (pre-MR6.0)");
	call report_action (seq_info.action);
     end proc_seq_file;

proc_blk_file:
     proc;					/* prints info about blocked files */
	call report ("type: blocked");
	call print_common_info;
	if blk_info.version < current_blk_version
	then call report ("version: old (pre-MR6.0)");
	else do;					/* version supports time_stamp */
		call date_time_ (blk_info.time_last_modified, date_time);
		call report ("last changed: ^a", date_time);
	     end;
	call report_action (blk_info.action);
	call report ("max recl: ^d bytes", blk_info.max_rec_len);
     end proc_blk_file;

report_action:
     proc (action_code);				/* routine deciphers action codes for updates in progress */
	if (action_code < -14) | (action_code > 3)	/* unknown code */
	then call report ("action: unknown operation in progress");
	else if action_code ^= 0			/* operation in progress */
	then call report ("action: ^a in progress", operation (-1 * (action_code)));
	dcl     operation		 (-3:14) char (24) var static options (constant)
				 init ("checkpoint", "non-checkpoint opening", "truncate", "", "write_record",
				 "rewrite_record", "delete_record", "add_key", "delete_key", "record_status(create)",
				 "exclusive opening", "reassign_key", "write_record (truncate)",
				 "delete_record (non-eof)", "unshared opening", "adjust_record",
				 "adjust_record (rollback)", "recovery");
	dcl     action_code		 fixed;
     end report_action;

print_common_info:
     proc;					/* if file is locked, info is printed out; also record count */
	if ^((info.type = 2 /* sequential */) & (seq_info.version < 12))
	then call report ("records: ^d", info.records);	/* end pos in same loc for all struc files */
	if info.lock_status ^= "00"b			/* file is locked */
	then if info.lock_status = "01"b		/* busy in another process */
	     then call report ("state: locked by another process");
	     else if info.lock_status = "10"b
	     then call report ("state: locked by this process");
	     else call report ("state: locked by dead process");
     end print_common_info;

proc_indx_file:
     proc;					/* prints info about indexed files */
	call report ("type: indexed");
	call print_common_info;			/* record count and lock status */
	if (indx_info.program_version < 33)
	then if ((indx_info.program_version = 21) | ((indx_info.program_version < 21) & (indx_info.file_version = 20)))
	     then call report
		     (
		     "version: Warning--total record length statistic is bad
because of vfile_ bug.  Use the vfile_adjust command to
correct the problem."
		     );				/* opening the file for modification also will
						   automatically adjust the bad statistic */
	     else call report ("version: old version--does not support even-word aligned records.");
	call report_action (indx_info.action);		/* prints if file inconsistent */
	if (indx_info.non_null_recs ^= indx_info.records)
	     & ((indx_info.program_version >= 23) | (indx_info.file_version = 10))
	then call report ("alloc recs: ^d", indx_info.non_null_recs);
	if (indx_info.records ^= 0) | (indx_info.record_bytes ^= 0)
	then call report ("record bytes: ^d", indx_info.record_bytes);
	if (indx_info.records ^= 0) | (indx_info.free_blocks ^= 0)
	then call report ("free blocks: ^d", indx_info.free_blocks);
	if (indx_info.num_keys ^= 0) | (indx_info.nodes ^= 0) | (indx_info.index_height ^= 0) | (indx_info.key_bytes ^= 0)
	then call report ("index height: ^d
nodes: ^d
key bytes: ^d", indx_info.index_height, indx_info.nodes,
		indx_info.key_bytes);
	if indx_info.num_keys ^= indx_info.records
	then call report ("keys: ^d", indx_info.num_keys);
	if indx_info.dup_keys ^= 0
	then call report ("dup keys: ^d
dup key bytes: ^d", indx_info.dup_keys, indx_info.dup_key_bytes);
     end proc_indx_file;

/* declarations for entire program */
	dcl     code_arg		 fixed (35);
	dcl     is_star_name	 bit (1) aligned;
	dcl     command_entry	 bit (1) aligned;
	dcl     file_base_ptr	 ptr;
	dcl     iocb_ptr		 ptr;
	dcl     vfile_status_	 entry (char (*) aligned, char (*) aligned, ptr, fixed (35));
	dcl     vfile_status_$seg	 entry (ptr, ptr, ptr, fixed (35));
	dcl     a			 area based (area_ptr);
	dcl     cu_$arg_count	 entry (fixed);
	dcl     n_args		 fixed;
	dcl     (error_table_$noarg, error_table_$noentry, error_table_$too_many_args)
				 external fixed (35);
	dcl     pathname_arg	 char (*);
	dcl     (i, e_count)	 fixed;
	dcl     report		 entry variable options (variable);
	dcl     (ioa_, report_arg)	 entry options (variable);
	dcl     code		 fixed (35);
	dcl     (null, index, fixed)	 builtin;
	dcl     file_found		 bit (1) aligned;
	dcl     (e_ptr, n_ptr)	 ptr;
	dcl     expand_path_	 entry (ptr, fixed, ptr, ptr, fixed (35));
	dcl     (addr, length)	 builtin;
	dcl     d_name		 char (168) aligned;
	dcl     e_name		 char (32) aligned;
	dcl     area_ptr		 ptr;
	dcl     get_system_free_area_	 entry returns (ptr);
	dcl     hcs_$star_		 entry (char (*) aligned, char (*) aligned, fixed (2), ptr, fixed, ptr, ptr,
				 fixed (35));
	dcl     d_len		 fixed;
	dcl     (verify, reverse)	 builtin;
	dcl     com_err_		 entry options (variable);
	dcl     names		 (tot_names) char (32) aligned based (n_ptr);
	dcl     tot_names		 fixed;
	dcl     1 entries		 (e_count) aligned based (e_ptr),
	        ( 2 type		 bit (2),
		2 n_names		 bit (16),
		2 n_index		 bit (18)
		)		 unal;
	dcl     error_table_$dirseg	 external fixed (35);
	dcl     substr		 builtin;
	dcl     current_indx_version	 static options (constant) internal fixed init (40);
	dcl     current_blk_version	 static options (constant) internal fixed init (1);
	dcl     current_seq_version	 static options (constant) internal fixed init (13);
	dcl     abs		 builtin;
	dcl     truncating		 fixed static options (constant) internal init (1);
	dcl     1 info		 like indx_info;
	dcl     date_time_		 entry (fixed (71), char (*));
	dcl     date_time		 char (24);
%include vfs_info;

     end vfile_status;
