/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* DESCRIPTION:
   This routine supplies information about a storage system file
   given its pathname.  Information includes the file's type and
   various appropriate statistics. 
*/

/* HISTORY:

Written by Mike Asherman.
Modified:
05/16/83 by Lindsey Spratt:  Fixed to destroy the temporary iocb.
*/

/* format: style2 */
vfile_status_:
     proc (d_name_arg, e_name_arg, info_ptr, code);
	seg_ptr_entry = "0"b;			/* this is the pathname entry */
	d_name = d_name_arg;
	e_name = e_name_arg;
	iocb_ptr = null;				/* indicates no I/O switch */
	call get_file_base;				/* finds first seg and gets pointer */
	call check_access;				/* verifies that user has read access */
get_status:
	if info_ptr -> info.version ^= vfs_version_1
	then do;
		code = error_table_$bad_arg;
		return;
	     end;
	if seg_ptr -> common_header.file_code = seq_code	/* file is sequential */
	then call proc_seq_file;
	else if seg_ptr -> common_header.file_code = blk_code
						/* file is blocked */
	then call proc_blk_file;
	else if seg_ptr -> common_header.file_code = indx_code
						/* indexed file */
	then call proc_indx_file;
	else call proc_uns_file;			/* must be unstructured */
cleanup:
	if seg_ptr_entry & ^not_open			/* no cleanup necessary */
	then return;
	if fcb_ptr ^= null
	then call msf_manager_$close (fcb_ptr);		/* frees the control block */
	else if seg_ptr ^= null
	then call hcs_$terminate_noname (seg_ptr, foo);
	if iocb_ptr ^= null				/* I/O switch may be attached and open */
	then do;					/* close and detach */
		call iox_$close (iocb_ptr, foo);
		if ^seg_ptr_entry
		then do;
			call iox_$detach_iocb (iocb_ptr, foo);
			call iox_$destroy_iocb (iocb_ptr, foo);
		     end;
	     end;
	return;					/* end of main vfile_status_ routine */

seg:
     entry (iocb_ptr_arg, seg_ptr_arg, info_ptr, code);
	seg_ptr_entry = "1"b;
	iocb_ptr = iocb_ptr_arg;
	not_open = (iocb_ptr -> iocb.open_descrip_ptr = null);
	if not_open				/* seg pointer not yet obtained */
	then do;
		d_name = substr (atb.attach_descrip_string, 8, atb.dname_len);
		e_name = substr (atb.attach_descrip_string, 9 + dname_len, ename_len);
		call get_file_base;
		call check_access;
		go to get_status;
	     end;
	seg_ptr = seg_ptr_arg;
	code = 0;
	go to get_status;

check_code:
     proc;					/* aborts if non-zero error code */
	if code ^= 0
	then go to cleanup;				/* don't leave a mess */
     end check_code;

get_file_base:
     proc;					/* finds first file component and sets seg_ptr */
	seg_ptr = null;				/* segment not initiated */
	fcb_ptr = null;				/* will be non-null if msf opened */
	call hcs_$status_long (d_name, e_name, 1, addr (branch_info), null, code);
	if code ^= 0
	then if code = error_table_$no_s_permission
	     then code = 0;				/* not really an error */
	     else go to cleanup;			/* error--abort */
	if branch_info.type = "10"b			/* directory or msf */
	then if branch_info.bit_count = "0"b		/* directory */
	     then code = error_table_$dirseg;
	     else do;				/* get ptr to base of msf */
		     call msf_manager_$open ((d_name), (e_name), fcb_ptr, code);
						/* creates control block */
		     call check_code;		/* abort on error */
		     call msf_manager_$get_ptr (fcb_ptr, 0, "0"b, seg_ptr, bc, code);
						/* pointer to base of file */
		     if seg_ptr ^= null
		     then code = 0;			/* reset spurious code */
		end;
	else do;					/* get ptr to base of segment */
		call hcs_$initiate (d_name, e_name, "", 0, 1, seg_ptr, code);
		if seg_ptr ^= null
		then code = 0;			/* no error if pointer returned */
	     end;
	call check_code;
     end get_file_base;

check_access:
     proc;					/* checks for read access to segment */
	mode = 0;					/* read bit will be set if access OK */
	call hcs_$fs_get_mode (seg_ptr, mode, code);	/* gets access mode */
	if ^substr (bit (mode), 2, 1)			/* read bit not set */
	then code = error_table_$moderr;
	call check_code;
     end check_access;

get_lock_status:
     proc;					/* finds state of file lock */
	lock_word = seg_ptr -> common_header.file_lock;	/* copy the file's lock */
	call set_lock_$lock (lock_word, 0, foo);	/* returned code (foo) reveals status */
	if foo = 0				/* not locked */
	then info_ptr -> seq_info.lock_status = "00"b;	/* all structured files have this in the same place */
	else if foo = error_table_$lock_wait_time_exceeded
	then info_ptr -> seq_info.lock_status = "01"b;	/* locked by another process */
	else if foo = error_table_$locked_by_this_process
	then info_ptr -> seq_info.lock_status = "10"b;	/* busy in caller's process */
	else info_ptr -> seq_info.lock_status = "11"b;	/* locked by defunct process */
     end get_lock_status;

proc_uns_file:
     proc;					/* gets info for unstructured files */
	info_ptr -> uns_info.type = 1;		/* identifies file as unstructured */
	info_ptr -> uns_info.header_present = (seg_ptr -> common_header.file_code = uns_code);
						/* no header unless code */
	if info_ptr -> uns_info.header_present		/* pick up identifier from header */
	then info_ptr -> uns_info.header_id = seg_ptr -> uns_header.identifier;
	if ^seg_ptr_entry				/* don't already have an I/O switch */
	then do;
		d_len = length (d_name) + 1 - verify (reverse (d_name), " ");
						/* don't count trailing blanks */
		atd = "vfile_ " || substr (d_name, 1, d_len) || ">" || e_name;
		if info_ptr -> uns_info.header_present
		then atd = atd || " -header";
		call iox_$attach_ioname (unique_chars_ ("0"b), iocb_ptr, atd, code);
						/* attach uniquely named switch */
		call check_code;
open_it:
		call iox_$open (iocb_ptr, 1 /* stream_input */, "0"b, code);
						/* open file for input */
		call check_code;
	     end;
	else if not_open				/* switch already attached */
	then go to open_it;
	call iox_$control (iocb_ptr, "read_position", addr (rp_info), code);
						/* gets byte count of file */
	call check_code;
	info_ptr -> uns_info.end_pos = rp_info.end_pos;
	dcl     d_len		 fixed;
     end proc_uns_file;

proc_seq_file:
     proc;					/* sets info for unstructured files */
	info_ptr -> seq_info.type = 2;		/* identifies file type */
	call get_lock_status;			/* looks at file lock */
	info_ptr -> seq_info.version = seg_ptr -> seq_header.version;
						/* file version */
	info_ptr -> seq_info.action = seg_ptr -> seq_header.file_state;
	if seg_ptr_entry & ^not_open
	then if ^iocb_ptr -> iocb.open_data_ptr -> seq_cb.input_only
						/* modify opening */
	     then do;				/* use open data stats */
		     info_ptr -> seq_info.end_pos = iocb_ptr -> iocb.open_data_ptr -> seq_cb.end_pos;
						/* latest end pos */
		     return;
		end;
	info_ptr -> seq_info.end_pos = seg_ptr -> seq_header.end_pos;
						/* record count--only valid
						   if version is current */
     end proc_seq_file;

proc_blk_file:
     proc;					/* gets info for blocked files */
	info_ptr -> blk_info.type = 3;		/* identifies blocked file info struc */
	call get_lock_status;
	info_ptr -> blk_info.version = seg_ptr -> blk_header.version;
	info_ptr -> blk_info.action = seg_ptr -> blk_header.action;
						/* non-zero if update
						   is in progress */
	info_ptr -> blk_info.max_rec_len = seg_ptr -> blk_header.max_rec_len;
						/*
						   maximum record length associated with file (bytes) */
	if seg_ptr_entry & ^not_open			/* we have an iocb */
	then if (iocb_ptr -> iocb.open_data_ptr -> blk_cb.mode > 4 /* modify opening */)
		& ^iocb_ptr -> iocb.open_data_ptr -> blk_cb.shared
	     then do;
		     info_ptr -> blk_info.end_pos = iocb_ptr -> iocb.open_data_ptr -> blk_cb.end_pos;
						/* latest end pos */
		     go to get_time_stamp;
		end;
	info_ptr -> blk_info.end_pos = seg_ptr -> blk_header.end_pos;
						/* record count */
get_time_stamp:
	info_ptr -> blk_info.time_last_modified = seg_ptr -> common_header.time_last_modified;
     end proc_blk_file;

proc_indx_file:
     proc;					/* gets info for indexed files */
	info_ptr -> indx_info.type = 4;		/* identifies indexed file info struc */
	call get_lock_status;
	info_ptr -> indx_info.file_version = seg_ptr -> indx_header.file_version;
	info_ptr -> indx_info.program_version = seg_ptr -> indx_header.program_version;
						/*
						   if old this may indicate file has bugs */
	state = seg_ptr -> indx_header.file_state;	/* selects valid block of stats */
	if (info_ptr -> indx_info.file_version = 30 /* file is latest version */)
	     | (info_ptr -> indx_info.file_version = 40)
	then call get_latest_indx_stats;
	else if info_ptr -> indx_info.file_version = 20
	then call get_new_stats;
	else if info_ptr -> indx_info.file_version = 10
	then call get_old_stats;			/* old version header is differently organized */
	else code = error_table_$bad_file;
	return;					/* end of routine for handling indexed files */

get_latest_indx_stats:
     proc;					/* routine gets statistics for version 4.0 files */
	call get_common_indx_stats;			/* change count and index state */
	f_s_ptr = addr (seg_ptr -> new_indx_header.file_state_blocks (state));
	info_ptr -> indx_info.action = f_s_ptr -> new_fs_block.file_action;
						/* ^=0 if operation in progress */
	info_ptr -> indx_info.records = f_s_ptr -> new_fs_block.number_of_records;
	info_ptr -> indx_info.record_bytes = f_s_ptr -> new_fs_block.total_record_length;
	info_ptr -> indx_info.non_null_recs = f_s_ptr -> new_fs_block.number_of_allocated_records;
	info_ptr -> indx_info.free_blocks = f_s_ptr -> new_fs_block.number_of_free_blocks;
	info_ptr -> indx_info.num_keys = f_s_ptr -> new_fs_block.number_of_keys;
	info_ptr -> indx_info.key_bytes = f_s_ptr -> new_fs_block.total_key_length;
	info_ptr -> indx_info.dup_keys = f_s_ptr -> new_fs_block.duplicate_keys;
	info_ptr -> indx_info.dup_key_bytes = f_s_ptr -> new_fs_block.dup_key_bytes;
     end get_latest_indx_stats;

get_common_indx_stats:
     proc;					/* routine used with latest two file versions */
	info_ptr -> indx_info.change_count = seg_ptr -> indx_header.change_count;
	i_state = seg_ptr -> indx_header.index_state;	/* locates proper index state block */
	i_s_ptr = addr (seg_ptr -> indx_header.index_state_blocks (i_state));
						/* pointer to index state block */
	info_ptr -> indx_info.index_height = i_s_ptr -> index_state_block.index_height;
	info_ptr -> indx_info.nodes = i_s_ptr -> index_state_block.number_of_nodes;
     end get_common_indx_stats;

set_default_stats:
     proc;					/* used with old version indexed files */
	info_ptr -> indx_info.num_keys = info_ptr -> indx_info.records;
	info_ptr -> indx_info.dup_keys = 0;
	info_ptr -> indx_info.dup_key_bytes = 0;
     end set_default_stats;

get_new_stats:
     proc;					/* gets file statistics for MR3.0 version indexed files */
	call get_common_indx_stats;
	f_s_ptr = addr (seg_ptr -> indx_header.file_state_blocks (state));
						/* pointer to file state block */
	info_ptr -> indx_info.action = f_s_ptr -> file_state_block.file_action;
						/* ^=0 if operation in progress */
	info_ptr -> indx_info.records = f_s_ptr -> file_state_block.number_of_records;
	info_ptr -> indx_info.record_bytes = f_s_ptr -> file_state_block.total_record_length;
	info_ptr -> indx_info.non_null_recs = f_s_ptr -> file_state_block.number_of_allocated_records;
	info_ptr -> indx_info.free_blocks = f_s_ptr -> file_state_block.number_of_free_blocks;
	info_ptr -> indx_info.key_bytes = f_s_ptr -> file_state_block.total_key_length;
	call set_default_stats;
     end get_new_stats;

get_old_stats:
     proc;					/* gets statistics for old version indexed files */
	info_ptr -> indx_info.change_count = 0;		/* not supported */
	old_f_s_ptr = addr (seg_ptr -> old_indx_header.old_file_state_blocks (state));
						/* pointer
						   to old version file state block */
	info_ptr -> indx_info.action = old_f_s_ptr -> old_f_s_block.file_action;
						/* if ^=0 file cannot be restored */
	info_ptr -> indx_info.records = old_f_s_ptr -> old_f_s_block.number_of_records;
	info_ptr -> indx_info.record_bytes = old_f_s_ptr -> old_f_s_block.total_record_length;
	info_ptr -> indx_info.key_bytes = old_f_s_ptr -> old_f_s_block.total_key_length;
	r_state = seg_ptr -> old_indx_header.record_state;/* selects a record_state_block */
	r_s_ptr = addr (seg_ptr -> old_indx_header.record_state_blocks (r_state));
						/* points to record
						   state block--part of file state block in new version files */
	info_ptr -> indx_info.non_null_recs = r_s_ptr -> r_s_block.number_of_allocated_records;
	info_ptr -> indx_info.free_blocks = r_s_ptr -> r_s_block.number_of_free_blocks;
	info_ptr -> indx_info.index_height = seg_ptr -> old_indx_header.old_version_index_height;
	info_ptr -> indx_info.nodes = seg_ptr -> old_indx_header.old_version_number_of_nodes;
	call set_default_stats;
     end get_old_stats;

     end proc_indx_file;

/* declarations for entire program */
	dcl     seg_ptr_entry	 bit (1) aligned;
	dcl     seg_ptr_arg		 ptr;
	dcl     iocb_ptr_arg	 ptr;
	dcl     1 branch_info	 aligned,		/* info returned by hcs_$status_long */
		2 type		 bit (2) unal,
		2 pad0		 bit (34) unal,
		2 words1		 (6) fixed,	/* of no interest */
		2 pad1		 bit (12) unal,
		2 bit_count	 bit (24) unal,	/* distinguishes msf and dir */
		2 words2		 (2);
	dcl     hcs_$status_long	 entry (char (*), char (*), fixed (1), ptr, ptr, fixed (35));
	dcl     hcs_$initiate	 entry (char (*), char (*), char (*), fixed (1), fixed (2), ptr, fixed (35));
	dcl     hcs_$terminate_noname	 entry (ptr, fixed (35));
	dcl     hcs_$fs_get_mode	 entry (ptr, fixed (5), fixed (35));
	dcl     mode		 fixed (5);
	dcl     iocb_ptr		 ptr;
	dcl     iox_$close		 entry (ptr, fixed (35));
	dcl     iox_$detach_iocb	 entry (ptr, fixed (35));
	dcl     iox_$destroy_iocb	 entry (ptr, fixed bin (35));
	dcl     iox_$attach_ioname	 entry (char (*), ptr, char (*), fixed (35));
	dcl     iox_$open		 entry (ptr, fixed, bit (1) aligned, fixed (35));
	dcl     unique_chars_	 entry (bit (*)) returns (char (15));
	dcl     iox_$control	 entry (ptr, char (*), ptr, fixed (35));
	dcl     state		 fixed;
	dcl     (
	        error_table_$lock_wait_time_exceeded,
	        error_table_$no_s_permission,
	        error_table_$bad_file,
	        error_table_$bad_arg,
	        error_table_$moderr,
	        error_table_$dirseg,
	        error_table_$locked_by_this_process
	        )			 external fixed (35);
	dcl     set_lock_$lock	 entry (bit (36) aligned, fixed, fixed (35));
	dcl     lock_word		 bit (36) aligned;
	dcl     seg_ptr		 ptr;
	dcl     1 rp_info,				/* used in "read_position" control order */
		2 next_pos	 fixed (34),	/* of no interest in this routine */
		2 end_pos		 fixed (34);	/* used to get byte count of uns files */
	dcl     1 uns_header	 based (seg_ptr),	/* optional header for unstructured files */
		2 common_header_words
				 (4) fixed,
		2 identifier	 fixed (35);	/* set and interpreted by user */
	dcl     1 seq_header	 based (seg_ptr),	/* standard header for sequential files */
		2 common_header_words
				 (4) fixed,
		2 version_word	 aligned,
		  3 file_state	 fixed (17) unal,
		  3 version	 fixed (17) unal,
		2 words		 (3) fixed,	/* not of interest to this program */
		2 end_pos		 fixed (34),	/* record count */
		2 end_desc	 fixed (35);
	dcl     1 common_header	 based (seg_ptr),	/* common header for structured files */
		2 file_code	 fixed (35),
		2 file_lock	 bit (36) aligned,
		2 time_last_modified fixed (71);
	dcl     (code, foo)		 fixed (35);
	dcl     fcb_ptr		 ptr;
	dcl     (null, bit, substr, length, verify, reverse, addr, fixed)
				 builtin;
	dcl     msf_manager_$close	 entry (ptr);
	dcl     (d_name_arg, e_name_arg)
				 char (*);
	dcl     d_name		 char (168);
	dcl     e_name		 char (32);
	dcl     atd		 char (256);
	dcl     not_open		 bit (1) aligned;
	dcl     msf_manager_$open	 entry (char (*) aligned, char (*) aligned, ptr, fixed (35));
	dcl     msf_manager_$get_ptr	 entry (ptr, fixed, bit (1), ptr, fixed (24), fixed (35));
	dcl     bc		 fixed (24);
	dcl     uns_code		 static internal fixed init (31191);
	dcl     seq_code		 static internal fixed init (83711);
	dcl     blk_code		 static internal fixed init (22513);
	dcl     indx_code		 static internal fixed init (7129);
	dcl     1 indx_header	 aligned based (seg_ptr),
						/* current version */
		2 words1		 (4),
		2 file_version	 fixed,
		2 program_version	 fixed,
		2 words2		 (8),
		2 file_state	 fixed,
		2 change_count	 fixed (35),
		2 words3		 (46),
		2 file_state_blocks	 (0:1),
		  3 words		 (7) fixed,
		2 index_state	 fixed,
		2 index_state_blocks (0:1),
		  3 words		 (104);
	dcl     1 new_indx_header	 aligned based (seg_ptr),
						/* version 4.0 indexed file header */
		2 words		 (361) fixed,
		2 file_state_blocks	 (0:1),
		  3 words		 (12) fixed;
	dcl     1 new_fs_block	 based (f_s_ptr),	/* version 4.0 file state block */
		2 file_action	 fixed,
		2 file_substate	 fixed,
		2 number_of_keys	 fixed (34),
		2 duplicate_keys	 fixed (34),	/* 0 if no duplications */
		2 dup_key_bytes	 fixed (34),
		2 total_key_length	 fixed (34),
		2 number_of_records	 fixed (34),
		2 total_record_length
				 fixed (34),
		2 number_of_allocated_records
				 fixed (34),
		2 number_of_free_blocks
				 fixed (34),
		2 words		 (2) fixed;
	dcl     (f_s_ptr, i_s_ptr, old_f_s_ptr, r_s_ptr)
				 ptr;
	dcl     (i_state, r_state)	 fixed;
	dcl     1 file_state_block	 based (f_s_ptr),
		2 file_action	 fixed,
		2 word1,
		2 number_of_records	 fixed,
		2 total_key_length	 fixed (34),
		2 total_record_length
				 fixed (34),
		2 number_of_allocated_records
				 fixed (34),
		2 number_of_free_blocks
				 fixed (34);
	dcl     1 index_state_block	 based (i_s_ptr),
		2 number_of_nodes	 fixed (34),
		2 words1		 (2),
		2 index_height	 fixed;
	dcl     1 old_indx_header	 based (seg_ptr),	/* old version indexed file header */
		2 words1		 (15),
		2 old_file_state_blocks
				 (0:1),
		  3 words		 (5),
		2 words2		 (7),
		2 record_state	 fixed,
		2 record_state_blocks
				 (0:1),
		  3 words		 (4),
		2 words3		 (14),
		2 old_version_index_height
				 fixed,
		2 old_version_number_of_nodes
				 fixed (34);
	dcl     1 old_f_s_block	 based (old_f_s_ptr),
		2 file_action	 fixed,
		2 word,
		2 number_of_records	 fixed (34),
		2 total_key_length	 fixed (34),
		2 total_record_length
				 fixed (34);
	dcl     1 r_s_block		 based (r_s_ptr),
		2 word,
		2 number_of_allocated_records
				 fixed (34),
		2 number_of_free_blocks
				 fixed (34);
	dcl     1 blk_header	 aligned based,	/* standard header for blocked files */
		2 words1		 (4) fixed,	/* of no interest here */
		2 version		 fixed,
		2 words2		 (3) fixed,
		2 max_rec_len	 fixed (21),
		2 end_pos		 fixed (34),
		2 action		 fixed;		/* non-zero indicates operation in progress */
	dcl     1 seq_cb		 aligned based,	/* open data block for sequential files */
		2 seg_ptr		 ptr,		/* ptr to current seg */
		2 fcb_ptr		 ptr,		/* ptr to msf control block */
		2 component	 fixed bin,	/* component number of
						   current seg */
		2 write_limit	 fixed bin (21),	/* set at open to max seg size + 1 */
		2 beyond_limits	 fixed bin (21),	/* set at open to write_limit + 4 */
		2 max_record_size	 fixed bin (21),	/* set at open to 4*max_component_size-
						   header_size-12(i.e. 3 desciptor words */
		2 write_pos	 fixed bin (21),	/* in write state =
						   pos of final descriptor, in read state =
						   beyond limits */
		2 read_pos	 fixed bin (21),	/* in read state =
						   pos of next descriptor, in write state
						   = minus_one_pos */
		2 current_record_ptr ptr,
		2 end_pos		 fixed (34),	/* number of records in file */
		2 end_desc	 fixed (35),
		2 next_pos	 fixed (34),	/* next record number */
		2 next_is_current	 bit (1) aligned,	/* "0"b if positions staggerred */
		2 updating	 bit (1) aligned,	/* set if mode=7 (sequential_update) */
		2 append_sw	 bit (1) aligned,	/* set if mode=6 (seq in out) and -append attachment */
		2 input_only	 bit (1) aligned,
		2 ssf_sw		 bit (1) aligned,	/* -ssf option indicator */
		2 is_msf		 bit (1) aligned,	/* set when msf is opened */
		2 end_not_valid	 bit (1) aligned,	/* used with old version files */
		2 error,				/* used by "error_status" control order */
		  3 type		 fixed,
		  3 requested	 fixed (34),
		  3 received	 fixed (34),
		2 minus_one_word	 fixed,
		2 file_base_ptr	 ptr;
	dcl     1 blk_cb		 aligned based,	/* open data block for blocked files */
		2 file_base_ptr	 ptr,		/* points to base of segment */
		2 seg_ptr_array_ptr	 ptr,
		2 fcb_ptr		 ptr,
		2 mode		 fixed,		/* opening mode (=4,5,6, or 7) */
		2 appending	 bit (1) aligned,	/* -append option */
		2 max_comp_size	 fixed (19),	/* determines capacity of file */
		2 max_rec_len	 fixed (21),	/* determines block size */
		2 block_size	 fixed (19),	/* words, including header */
		2 capacity	 fixed (19),	/* max number of records per comp */
		2 current_pos	 fixed (34),	/* current record number */
		2 next_pos	 fixed (34),	/* next record position (0,1,2,...) */
		2 end_pos		 fixed (34),	/* number of records in file */
		2 last_comp_num	 fixed,
		2 is_msf		 bit (1) aligned,
		2 ssf_sw		 bit (1) aligned,
		2 seg_ptr_array_limit
				 fixed,
		2 words		 (3) fixed,
		2 shared		 bit (1) aligned;
	dcl     cb_ptr		 ptr;
	dcl     info_ptr		 ptr;
	dcl     1 info		 based (info_ptr),	/* structure to receive file information */
		2 version		 fixed,		/* must =1 */
		2 words		 (size (indx_info) - 1) fixed;
%include vfs_info;
%include vf_attach_block;
%include iocbv;

     end vfile_status_;
