/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


mseg_util_v2_: proc;

/* Adapted from the original version 2 mseg_util_ by J. Stern, 11/4/74 */

dcl (a_mptr,					/* pointer to the message segment */
     prev_tr_ptr,					/* pointer to previous message trailer */
     next_tr_ptr,					/* pointer to next message trailer */
     ms_ptr,					/* pointer to message wanted */
     a_ret_ptr,					/* pointer to returned message */
     ret_ptr init (null),
     deletep,					/* pointer to block to be zeroed out */
     t_ptr,					/* scan pointer for returning message */
     a_area_ptr,					/* pointer to allocated area */
     a_ms_ptr,					/* pointer to updating message */
     area_ptr) ptr;

dcl (last,					/* ON if message is last in block */
     first,					/* ON if message is first in block */
     update,					/* ON if message is being updated */
     ms_end,					/* ON when end of message is found */
     read,					/* ON if message is to be read */
     delete) bit (1) aligned;				/* on if message is to be deleted */

dcl (tr_offset,					/* offset from beginning of block to trailer */
     ms_count,					/* number of messages in segment */
     mseg_data_v2_$block_trailer_data ext,			/* number of data words in block trailer */
     mseg_data_v2_$block_hdr_data ext,			/* number of data words in block header */
     prev_offset,					/* offset to previous message */
     next_offset,					/* offset to next message */
     block_size,					/* size of a message block */
     blocks_in_message,				/* number of blocks used for message */
     blocks_left,					/* number of free blocks in message segment */
     copy_size,					/* size of bit copy mask */
     delete_size,					/* bit size of block to be zeroed out */
     incr_size,					/* for stepping copy-to pointer */
     a_ms_len,					/* length of message in block trailer */
     ms_len,
     found_ms_len,					/* actual message size */
     a_loc,					/* location of message */
     loc,
     a_ret_loc,					/* location of incremental message */
     bit_off) fixed bin (18);				/* location of allocation bit to be turned off */

dcl (a_ms_wanted,					/* flag telling which message is wanted */
     ms_wanted,
     a_dir,					/* direction of incremental search */
     dir init ("0"b)) bit (2) aligned;

dcl (
     mseg_data_v2_$mseg_tr36 ext
     ) bit (36) aligned;

dcl (a_time,					/* time message was sent */
     a_ret_time,
     time) fixed bin (54);

dcl (
     a_level,					/* user level: 0 = non-own entry, 1 = own entry (argument) */
     alloc_len,					/* length of allocation bit string */
     level,					/* user level: 0 = non-own entry, 1 = own entry (internal) */
     a_user_level,					/* the callers' initial level */
     user_level,
     ms_word_len,					/* length of message in words */
     zero_words (8) int static init (0, 0, 0, 0, 0, 0, 0, 0), /* for uid credibility check */
     name_len) fixed bin;				/* length of person-project portion of group id */

dcl (
     a_code,					/* error code (argument) */
     code						/* error code (internal) */
     ) fixed bin (35);

dcl (addr, addrel, bit, divide, fixed, index, null, ptr, rel, substr) builtin;

dcl (
     cleanup
     ) condition;

dcl  area_array area (30) aligned based (area_ptr),	/* for allocating */
     ms_word_array (ms_word_len) fixed bin aligned based (ret_ptr);

dcl (caller_id,					/* id of caller */
     ms_sender_id) char (32) aligned;			/* id of message sender */

dcl  a_sender_id char (32) aligned;			/* id of message sender */

dcl  bit_copy_mask bit (copy_size) based;		/* bit copy mask */

dcl  bits (incr_size) bit (1) based unaligned;		/* for resetting copy-to pointer */

dcl  zeroes char (32) aligned based (addr (zero_words (1))); /* for uid credibility check */

% include mseg_hdr_v2;

% include ms_block_hdr_v2;

% include ms_block_trailer_v2;

dcl  error_table_$bad_segment ext fixed bin (35);
dcl  error_table_$moderr ext fixed bin (35);
dcl  error_table_$no_message ext fixed bin (35);

dcl  get_group_id_$tag_star ext entry
     returns (char (32) aligned);

dcl  ptr_is_good_v2_ ext entry
    (ptr) returns (bit (1) aligned);

/*  */
read:	entry (a_mptr, a_ms_wanted, a_area_ptr, a_loc, a_time, a_user_level, a_ret_ptr, a_ms_len, a_sender_id,
	a_level, a_code);

	ms_wanted = a_ms_wanted;
	area_ptr = a_area_ptr;
	read = "1"b;
	update,
	delete = "0"b;
	go to COMMON;

delete:	entry (a_mptr, a_loc, a_time, a_user_level, a_code);

	ms_wanted = "11"b;				/* delete by id only */
	update,
	read = "0"b;
	delete = "1"b;
	go to COMMON;

read_and_delete: entry (a_mptr, a_ms_wanted, a_area_ptr, a_user_level, a_ret_ptr, a_ms_len, a_sender_id,
	a_level, a_code);

	ms_wanted = a_ms_wanted;
	area_ptr = a_area_ptr;
	read, delete = "1"b;
	update = "0"b;
	go to COMMON;

incremental_read: entry (a_mptr, a_dir, a_area_ptr, a_loc, a_time, a_user_level, a_ret_ptr, a_ms_len, a_ret_loc,
	a_ret_time, a_sender_id, a_level, a_code);

	ms_wanted = "11"b;
	dir = a_dir;
	area_ptr = a_area_ptr;
	read = "1"b;
	delete = "0"b;
	update = "0"b;
	go to COMMON;


update:	entry (a_mptr, a_ms_ptr, a_ms_len, a_loc, a_time, a_user_level, a_code);

	read,
	delete = "0"b;
	update = "1"b;
	ms_len = a_ms_len;

/*  */

COMMON:	

	on condition (cleanup)			/* establish cleanup handler to free allocated message */
	begin;
	     if ret_ptr ^= null			/* a message was allocated */
	     then do;
		free ms_word_array in (area_array);	/* free it */
		a_ret_ptr = null;			/* and return null argument ptr */
	     end;
	     a_code = error_table_$bad_segment;		/* make sure salvaging happens */
	end;

	code = 0;
	mptr = a_mptr;
	alloc_len = fixed (bit (mseg_hdr_v2.alloc_len, 16), 17); /* pick allocation bit string length out of header */

	user_level = a_user_level;
	if user_level ^= 0				/* user calling for his own message */
	then do;
	     caller_id = get_group_id_$tag_star ();	/* get his pers-proj name */
	     name_len = index (caller_id, "*")-2;
	     caller_id = substr (caller_id, 1, name_len);
	end;

	if ms_wanted = "11"b			/* copy id if given */
	then do;
	     time = a_time;
	     loc = a_loc;				/* copy message location also */
	end;

	first, last, ms_end = "0"b;			/* initialize flags */

	ms_count =				/* get number of messages */
	fixed (mptr -> mseg_hdr_v2.number_of_messages, 18);

	block_size = fixed (mseg_hdr_v2.block_size, 18);	/* pick out block size from header */

	tr_offset =				/* calculate trailer offset */
	block_size-mseg_data_v2_$block_trailer_data;

	if (delete)				/* user is deleting a message */
	then do;
	     blocks_left =				/* get present number of free blocks */
	     fixed (mptr -> mseg_hdr_v2.space_left, 18);
	     delete_size = block_size*36;		/* compute bit size for zeroing blocks */
	end;

/*  */

/* locate the message */

	if ms_wanted = "01"b			/* last message wanted */
	then do;
	     loc = fixed (mptr -> mseg_hdr_v2.last_ms_offset, 18);
	     ms_ptr = ptr (mptr, loc);		/* make pointer to last message */
	     last = "1"b;				/* set flag to remember */
	     if ms_count = 1			/* only one message */
	     then first = "1"b;			/* it is first also */
	end;

	else if ms_wanted = "10"b			/* first message wanted */
	then do;
	     loc = fixed (mptr -> mseg_hdr_v2.first_ms_offset, 18);
	     ms_ptr = ptr (mptr, loc);		/* make pointer to first message */
	     first = "1"b;				/* set flag to remember */
	     if ms_count = 1			/* only one message */
	     then last = "1"b;			/* it is last also */
	end;

	if (first | last)
	then if ((^ptr_is_good_v2_ (ms_ptr))| (^ms_ptr -> ms_block_hdr.first_block))
	then go to BAD_SEG;				/* inconsistency, must be at least one message in segment */

	if ms_wanted = "11"b			/* locate message by unique id */
	then do;

/* check the validity of the given offset */

	     ms_ptr = ptr (mptr, loc);		/* make pointer to message */
	     if ((^ptr_is_good_v2_ (ms_ptr))| (ms_ptr -> ms_block_hdr.first_block ^= "1"b))
	     then go to NO_MSG;


	     tr_ptr = addrel (ms_ptr, tr_offset);	/* get pointer to trailer data */

	     if tr_ptr -> ms_size = "0"b		/* make credibility check on trailer */
	     | tr_ptr -> ms_block_trailer_v2.time = "0"b
	     | tr_ptr -> sender_id = zeroes
	     | tr_ptr -> ms_block_trailer_v2.tr_pattern ^= mseg_data_v2_$mseg_tr36
	     then go to BAD_SEG;

	     if tr_ptr -> ms_block_trailer_v2.time = bit (fixed (time, 54), 54) /* message time correct */
	     then do;

		if (delete) then do;		/* message is to be deleted */

		     if fixed (mptr -> mseg_hdr_v2.first_ms_offset, 18) = loc /* first message */
		     then first = "1"b;		/* set flag to remember */

		     if fixed (mptr -> mseg_hdr_v2.last_ms_offset, 18) = loc /* last message */
		     then last = "1"b;		/* set flag to remember */

		end;

	     end;

	     else					/* message time specified is incorrect */
	     go to NO_MSG;

/* incremental message wanted */

	     if dir ^= "0"b
	     then do;

		if dir = "10"b			/* previous message wanted */
		then do;				/* increment message pointer */
		     if tr_ptr -> ms_block_trailer_v2.b_offset ^= "0"b
		     then do;
			loc = fixed (tr_ptr -> ms_block_trailer_v2.b_offset, 18);
			ms_ptr = ptr (ms_ptr, loc);
		     end;
		     else do;			/* error, no previous message */
			if fixed (mseg_hdr_v2.first_ms_offset, 18) ^= loc
			then go to BAD_SEG;		/* format error, not first message */
NO_MSG:			code = error_table_$no_message;
			go to FIN;
		     end;
		end;

		else if dir = "01"b			/* next message wanted */
		then do;				/* increment message pointer */
		     if tr_ptr -> ms_block_trailer_v2.f_offset ^= "0"b
		     then do;
			loc = fixed (tr_ptr -> ms_block_trailer_v2.f_offset, 18);
			ms_ptr = ptr (ms_ptr, loc);
		     end;
		     else do;			/* error, no next message */
			if fixed (mseg_hdr_v2.last_ms_offset, 18) ^= loc
			then go to BAD_SEG;		/* format error, not last message */
			go to NO_MSG;
		     end;
		end;

	     end;

	end;

/* get information from the first block trailer */

	tr_ptr =					/* get pointer to trailer */
	addrel (ms_ptr, tr_offset);

	if tr_ptr -> ms_size = "0"b			/* make trailer credibility check */
	| tr_ptr -> ms_block_trailer_v2.time = "0"b
	| tr_ptr -> sender_id = zeroes
	| tr_ptr -> ms_block_trailer_v2.tr_pattern ^= mseg_data_v2_$mseg_tr36
	then go to BAD_SEG;

	if dir ^= "0"b				/* pick up incremental id */
	then time = fixed (tr_ptr -> ms_block_trailer_v2.time, 54);

	if (delete) then do;

	     if (^first)
	     then do;				/* not first message */
		prev_offset =			/* get offset to previous message */
		fixed (tr_ptr -> ms_block_trailer_v2.b_offset, 18);
		prev_tr_ptr =			/* make pointer to previous trailer */
		ptr (mptr, prev_offset+tr_offset);
	     end;

	     if (^last)
	     then do;				/* not last message */
		next_offset =			/* get offset to next message */
		fixed (tr_ptr -> ms_block_trailer_v2.f_offset, 18);
		next_tr_ptr =			/* make pointer to next trailer */
		ptr (mptr, next_offset+tr_offset);
	     end;

	end;

	ms_sender_id =
	tr_ptr -> ms_block_trailer_v2.sender_id;		/* pick out senders' id */
	level = fixed (ms_block_trailer_v2.ring_no, 17);	/* pick out validation level */

/* make final access check */

	if user_level ^= 0				/* user called for own message */
	then if caller_id ^= substr (ms_sender_id, 1, name_len) /* this is not his message */
	then do;
	     ms_len = 0;				/* not found */
	     if (delete | update)			/* no "d" permission, not own message */
	     then code = error_table_$moderr;
	     else					/* user not deleting */
	     if dir = "0"b				/* ordinary read */
	     then time = fixed (bit (tr_ptr -> ms_block_trailer_v2.time, 54), 54); /* return message time */
	     go to FIN;
	end;

	if update
	then if fixed (tr_ptr -> ms_block_trailer_v2.ms_size, 18) ^= ms_len /* incorrect message size specified */
	then go to NO_MSG;

/* allocate an area for the returned message */

	ms_len = fixed (ms_block_trailer_v2.ms_size, 18);	/* pick out message size */

	if (read)
	then do;
	     ms_word_len = divide (ms_len+35, 36, 17, 0);	/* compute word length from bit count */
	     allocate ms_word_array in (area_array) set (ret_ptr); /* allocate the area */
	     t_ptr = ret_ptr;			/* initialize scan pointer */
	end;

	else					/* not reading message */
	if update					/* updating message */
	then t_ptr = a_ms_ptr;			/* initialize scan ptr */

/*  */
/* chase the message thread */

	found_ms_len = 0;				/* initialize size of found message */

	blocks_in_message = 0;			/* initialize count */
	block_ptr = ms_ptr;				/* initialize block pointer */
	ms_end = "0"b;				/* initialize end of message flag */

	if (delete | update)			/* user is deleting or updating a message */
	then mseg_hdr_v2.aip = "1"b;			/* turn on aip bit */

	do while (^ms_end);

	     blocks_in_message =			/* increment message block count */
	     blocks_in_message + 1;

	     found_ms_len = found_ms_len + fixed (ms_block_hdr.block_count, 18); /* increment message size */
	     if found_ms_len > ms_len			/* more message than block trailer specified */
	     then do;				/* error in message segment */
BAD_SEG:		
		code = error_table_$bad_segment;
		go to FIN;
	     end;


	     if (read | update)
	     then do;				/* return message for reading */
		copy_size =			/* set size of copy mask */
		fixed (block_ptr -> ms_block_hdr.block_count, 18);
		incr_size = copy_size + 1;		/* to step copy-to ptr later */
		if read				/* reading message */
		then t_ptr -> bit_copy_mask =		/* copy message */
		addrel (block_ptr, mseg_data_v2_$block_hdr_data) -> bit_copy_mask;
		else				/* not reading */
		if update				/* updating message */
		then addrel (block_ptr, mseg_data_v2_$block_hdr_data) -> bit_copy_mask
		= t_ptr -> bit_copy_mask;		/* overwrite */
	     end;

	     if (delete)
	     then do;				/* user is deleting a message */
		bit_off = divide (fixed (rel (block_ptr), 18), block_size, 18, 0)+1; /* calculate alloc bit for block */
		if substr (mseg_hdr_v2.alloc_bits, bit_off, 1) = "0"b /* block not in use */
		then go to BAD_SEG;			/* format error */
		else
		substr (mseg_hdr_v2.alloc_bits, bit_off, 1) = "0"b; /* turn bit off */
		deletep = block_ptr;		/* remember block ptr to delete later */
	     end;

	     if blocks_in_message = 1			/* first block */
	     then if ms_wanted ^= "11"b		/* id not given */
	     then do;				/* get id */
		tr_ptr = addrel (block_ptr, block_size-mseg_data_v2_$block_trailer_data);
		time = fixed (bit (tr_ptr -> ms_block_trailer_v2.time, 54), 54);
	     end;

	     if block_ptr -> ms_block_hdr.f_offset = "0"b
	     then do;				/* message block is last in message */
		if found_ms_len ^= ms_len		/* found size doesn't agree with trailer */
		then go to BAD_SEG;			/* format error */
		else
		ms_end = "1"b;			/* indicate end of message */
	     end;

	     else do;
		block_ptr =			/* step the block pointer */
		ptr (block_ptr, fixed (block_ptr -> ms_block_hdr.f_offset, 18));
		if (read) then t_ptr =		/* increment copy-to pointer */
		addr (t_ptr -> bits (incr_size));
	     end;

	     if (delete)				/* message is being deleted */
	     then do;
		copy_size = delete_size;		/* set size of copy mask */
		deletep -> bit_copy_mask = "0"b;	/* use mask to zero out block */
	     end;

	end;

/*  */
/* finish deleting message if requested */

	if (delete) then do;

	     blocks_left =				/* calculate new remaining blocks */
	     blocks_left + blocks_in_message;

	     if ms_count > 1			/* there will be a remaining message */
	     then do;

/* unthread the message */

		if (first) then do;			/* unthread first message */
		     mptr -> mseg_hdr_v2.first_ms_offset =
		     bit (fixed (next_offset, 18), 18);	/* reset header offset to new first message */
		     next_tr_ptr -> ms_block_trailer_v2.b_offset =
		     "0"b;			/* reset new first message back pointer */
		end;

		if (last) then do;			/* unthread last message */
		     mptr -> mseg_hdr_v2.last_ms_offset =
		     bit (fixed (prev_offset, 18), 18);	/* reset header offset to new last message */
		     prev_tr_ptr -> ms_block_trailer_v2.f_offset =
		     "0"b;			/* reset new last message forward pointer */
		end;

		if (^first) then if (^last) then do;	/* unthread mid message */
		     prev_tr_ptr -> ms_block_trailer_v2.f_offset =
		     bit (fixed (next_offset, 18), 18);	/* reset forward offset of previous message */
		     next_tr_ptr -> ms_block_trailer_v2.b_offset =
		     bit (fixed (prev_offset, 18), 18);	/* reset backward offset of next message */
		end;

	     end;

	     else					/* no messages left */
	     mseg_hdr_v2.first_ms_offset,		/* zero out hdr pointers */
	     mseg_hdr_v2.last_ms_offset = "0"b;

/* update header after deletion */

	     mptr -> mseg_hdr_v2.space_left =		/* reset space left */
	     fixed (blocks_left);

	     ms_count = ms_count - 1;
	     mptr -> mseg_hdr_v2.number_of_messages =	/* reset number of messages */
	     fixed (ms_count);

	     mptr -> mseg_hdr_v2.aip = "0"b;		/* turn off allocation in progress bit */

	end;

FIN:	

	if code = 0
	then do;

	     if (read)
	     then a_ms_len = ms_len;

	     if (^delete & ^update)
	     then do;
		a_time = time;			/* return loc and time if not given */
		a_loc = loc;
	     end;

	     if dir ^= "0"b				/* return incremental data */
	     then do;
		a_ret_time = time;
		a_ret_loc = loc;
	     end;

	end;

	else do;					/* error, return null arguments */

	     if (read)
	     then a_ms_len = 0;

	     if (^delete & ^update)
	     then a_time, a_loc = 0;

	     if dir ^= "0"b
	     then a_ret_loc, a_ret_time = 0;

	     if ret_ptr ^= null			/* a message was allocated */
	     then do;
		free ms_word_array in (area_array);	/* free it */
		a_ret_ptr = null;			/* return null argument */
	     end;

	end;

	a_code = code;

	if (read)					/* return allocation pointer for freeing */
	then do;
	     a_ret_ptr = ret_ptr;
	     if code = 0
	     then do;
		a_sender_id = ms_sender_id;
		a_level = level;
	     end;
	     else
	     if ^update
	     then do;
		if user_level = 0
		then a_sender_id = "";
		a_level = -1;
	     end;
	end;

	return;


     end mseg_util_v2_;
