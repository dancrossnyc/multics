/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
%;
/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

ms_salv_util_v2_: proc (a_forward, a_salv_ptr, a_new_alloc_ptr, a_nrec, a_alloc_len, a_saved_messages, a_saved_blocks,
	a_last_saved_ms_ptr, a_code);

/* Adapted from original version 2 ms_salv_util_ by J.Stern, 11/4/74 */

dcl (a_saved_blocks,				/* number of saved message blocks (argument) */
     a_saved_messages,				/* number of saved messages (argument) */
     block_bit_count,				/* bit count of message portion in block */
     block_hdr_data,				/* words in header */
     block_trailer_data,				/* words in trailer */
     first_full_block_bit_count,			/* bits allocated to first block message portion */
     full_block_bit_count,				/* bits allocated to message portion */
     i,						/* do loop index */
     label_var,					/* label variable */
     max_message_blocks,				/* maximum blocks in a message */
     message_blocks,				/* number of unchecked blocks in message */
     mseg_data_v2_$block_hdr_data ext,			/* words in header */
     mseg_data_v2_$block_trailer_data ext,			/* words in trailer */
     saved_blocks init (0),				/* number of saved message blocks (internal) */
     saved_messages init (0),				/* number of saved messages (internal) */
     tsaved_blocks,					/* blocks saved in message */
     zero_words (8) init (0, 0, 0, 0, 0, 0, 0, 0)
     ) fixed bin;

dcl (a_alloc_len,
     a_nrec,
     alloc_len,					/* length of allocation bit string */
     backward_offset,				/* offset to backward threaded message */
     bit_off,					/* offset of allocation bit for block */
     block_ms_words,				/* allocated size for message portion */
     block_offset,					/* offset to message block */
     block_size,					/* size of message block in words */
     first_block_ms_words,				/* allocated size for first block message portion */
     forward_offset,				/* offset to forward threaded message */
     max_message_size,				/* maximum words in a message */
     message_words,					/* word count of message */
     ms_offset,					/* offset to first block of message */
     mseg_data_v2_$block_size ext,			/* default block size */
     mseg_data_v2_$max_message_size ext,
     next_block_offset,				/* offset to next message block in message */
     nrec,
     previous_offset init (0),			/* offset to previous message */
     seg_size,					/* maximum size of message segment */
     tr_offset)					/* offset from beginning of block to trailer */
     fixed bin (18);

dcl (
     a_code,					/* error code */
     code init (0)
     ) fixed bin (35);

dcl (a_forward,					/* ON if salvage is forward (argument) */
     first_block,					/* ON if block is first block in message */
     forward)					/* ON if salvage is forward (internal) */
     bit (1) aligned;

dcl (
     mseg_data_v2_$mseg_tr36 ext				/* trailer recognition pattern */
     ) bit (36) aligned;

dcl (a_last_saved_ms_ptr,				/* pointer to last saved message (argument) */
     a_new_alloc_ptr,				/* pointer to new allocation bits(argument) */
     a_salv_ptr,					/* pointer to where to begin salvaging */
     check_ptr,					/* pointer to be tested for validity */
     last_saved_ms_ptr init (null),			/* pointer to last saved message(internal) */
     new_alloc_ptr,					/* pointer to new allocation bits(argument) */
     next_ms_ptr,					/* pointer to next message */
     test_block_ptr,				/* pointer to message block being tested */
     test_ms_ptr)					/* pointer to message being tested */
     ptr;

dcl (addrel, divide, fixed, mod, null, ptr, rel) builtin;

dcl  bit_mask (alloc_len) based (new_alloc_ptr) bit (1) unaligned; /* mask for setting allocation bits */

dcl  zeroes char (32) aligned based (addr (zero_words (1)));


% include mseg_hdr_v2;

% include ms_block_hdr_v2;

% include ms_block_trailer_v2;


dcl  hcs_$get_max_length_seg ext entry
    (ptr, fixed bin (18), fixed bin (35));

dcl  ptr_is_good_v2_$ms_salvager_entry ext entry
    (ptr, fixed bin (18)) returns (bit (1) aligned);

/*  */

	max_message_size = mseg_data_v2_$max_message_size;
	mptr = ptr (a_salv_ptr, 0);			/* make pointer to message segment */
	block_size = fixed (mseg_hdr_v2.block_size, 18);
	call hcs_$get_max_length_seg (mptr, seg_size, code);
	if code ^= 0
	then go to FIN;
	if block_size <= 0				/* check for reasonable value */
	then
SET_BLOCK_SIZE:
	block_size = fixed (mseg_data_v2_$block_size);	/* take external one if bad */
	else
	if mod (seg_size, block_size) ^= 0
	then go to SET_BLOCK_SIZE;
	max_message_blocks = divide (max_message_size, block_size, 18, 0); /* compute max blocks in message */
	block_hdr_data = mseg_data_v2_$block_hdr_data;
	block_trailer_data = mseg_data_v2_$block_trailer_data;

	forward = a_forward;			/* copy argument */
	next_ms_ptr = a_salv_ptr;			/* where to begin salvaging */
	nrec = a_nrec;
	alloc_len = a_alloc_len;
	ms_offset = fixed (rel (next_ms_ptr), 18);	/* offset of where to begin salvaging */
	new_alloc_ptr = a_new_alloc_ptr;		/* copy argument */
	last_saved_ms_ptr = null;			/* initialize pointer to last saved message */
	tr_offset = block_size - block_trailer_data;	/* initialize trailer offset */
	first_block_ms_words =			/* intialize word count of full first block */
	block_size - (block_hdr_data + block_trailer_data);
	first_full_block_bit_count =			/* initialize bit count of full first block */
	first_block_ms_words * 36;
	full_block_bit_count =			/* initialize bit count of full block */
	(block_size - block_hdr_data) * 36;
	block_ms_words =				/* initialize word count of full block */
	block_size - block_hdr_data;

/*  */

	begin;

dcl  bit_offset (max_message_blocks) fixed bin (18);	/* array of offsets into alloc bits */

LABEL (1):     
CHECK_MESSAGE: 

	     first_block = "1"b;			/* remember this is a first block of a message */
	     tsaved_blocks = 0;			/* initialize blocks saved in message */

	     test_ms_ptr = next_ms_ptr;		/* set pointer to message to be tested */
	     ms_offset = fixed (rel (next_ms_ptr), 18);	/* set offset of message to be tested */
	     tr_ptr = addrel (test_ms_ptr, tr_offset);	/* make a pointer to the trailer */
	     if tr_ptr -> ms_block_trailer_v2.tr_pattern ^= mseg_data_v2_$mseg_tr36 /* no trailer pattern */
	     then go to FIN;
	     forward_offset =			/* get offset to next message */
	     fixed (tr_ptr -> ms_block_trailer_v2.f_offset, 18);
	     if forward_offset ^= 0
	     then if forward_offset > nrec*1024		/* forward offset off end of segment */
	     then go to FIN;			/* give up */
	     if forward_offset = 0			/* this should be last message in segment */
	     then if mseg_hdr_v2.last_ms_offset ^= rel (test_ms_ptr) /* header doesn't agree */
	     then go to FIN;			/* give up */
	     backward_offset =			/* get offset to previous message */
	     fixed (tr_ptr -> ms_block_trailer_v2.b_offset, 18);
	     if backward_offset ^= 0
	     then if backward_offset > nrec*1024	/* previous offset off end of message */
	     then go to FIN;
	     if backward_offset = 0			/* this should be first message */
	     then if mseg_hdr_v2.first_ms_offset ^= rel (test_ms_ptr) /* header doesn't agree */
	     then go to FIN;

	     if ms_size = "0"b			/* check for zeroing out */
	     | time = "0"b
	     | sender_id = zeroes
	     then go to FIN;

	     if (forward)				/* forward salvage */
	     then do;

		if previous_offset ^= 0		/* there was a previous message */
		then if backward_offset ^=
		previous_offset			/* this message doesn't point to it */
		then go to FIN;			/* give up */
		check_ptr,			/* create pointer to next message */
		next_ms_ptr = ptr (test_ms_ptr, forward_offset);

	     end;

	     else					/* backward salvage */
	     do;

		if previous_offset ^= 0		/* there was a previous message */
		then if forward_offset ^=
		previous_offset			/* this message doesn't point to it */
		then go to FIN;			/* give up */
		check_ptr,			/* create pointer to next message */
		next_ms_ptr = ptr (test_ms_ptr, backward_offset);

	     end;

	     previous_offset = ms_offset;		/* remember for next message check */

	     if fixed (rel (next_ms_ptr), 18) ^= 0	/* there is a next message */
	     then if (^ptr_is_good_v2_$ms_salvager_entry (next_ms_ptr, block_size)) /* bad offset to next message */
	     then go to FIN;			/* give up */

	     message_words =			/* calculate number of words in message */
	     divide (fixed (tr_ptr -> ms_block_trailer_v2.ms_size, 18)+35, 36, 18, 0);

	     if message_words <= 0			/* bad word count */
	     then go to FIN;			/* give up */
	     if message_words > max_message_size
	     then go to FIN;

	     if message_words <= first_block_ms_words	/* calculate blocks in message */
	     then message_blocks = 1;
	     else
	     message_blocks =
	     divide (message_words-first_block_ms_words+block_ms_words-1, block_ms_words, 17, 0)+1;
	     block_offset = fixed (rel (test_ms_ptr), 18);

	     test_block_ptr = test_ms_ptr;		/* set pointer for testing rest of block */

/*  */

/* check the block header */

LABEL (2):     
CHECK_BLOCK:   

/* check to see if the block has been allocated */

	     bit_off = divide (block_offset, block_size, 18, 0)+1; /* calculate bit offset in alloc bits */

	     do i = 1 to tsaved_blocks;		/* check against other blocks in this message */
		if bit_offset (i) = bit_off		/* block is used */
		then go to FIN;			/* give up */
	     end;

	     if new_alloc_ptr -> bit_mask (bit_off) = "1"b /* block is used */
	     then go to FIN;

	     if test_block_ptr -> ms_block_hdr.first_block ^=
	     first_block				/* bad first block flag */
	     then go to FIN;

	     block_bit_count =			/* get size of message portion in block */
	     fixed (test_block_ptr -> ms_block_hdr.block_count, 17);
	     if block_bit_count <= 0			/* bad block bit count */
	     then go to FIN;			/* give up */

	     if (first_block)			/* first block of a message */
	     then do;

		if message_blocks ^= 1		/* another block follows */
		then do;
		     if block_bit_count ^=
		     first_full_block_bit_count	/* error in block bit count */
		     then go to FIN;
		end;
		else				/* no blocks follow */
		if block_bit_count >
		first_full_block_bit_count		/* error in block bit count */
		then go to FIN;
	     end;

	     else					/* not first block in message */
	     do;
		if message_blocks ^= 1		/* another block follows */
		then do;
		     if block_bit_count ^=
		     full_block_bit_count		/* error in block bit count */
		     then go to FIN;		/* give up */
		end;
		else				/* last block in message */
		if block_bit_count > full_block_bit_count /* bad block bit count */
		then go to FIN;			/* give up */
	     end;

	     next_block_offset =			/* get the offset to the next message block */
	     fixed (test_block_ptr -> ms_block_hdr.f_offset, 18);

	     bit_offset (tsaved_blocks + 1) = bit_off;	/* remember location of block */

	     if message_blocks = 1			/* last block in message */
	     then do;
		if next_block_offset ^= 0		/* block pointer bad */
		then go to FIN;
		else				/* legitimate end of message */
		do;
		     saved_blocks =			/* add in saved blocks */
		     saved_blocks + tsaved_blocks +1;
		     do i = 1 to tsaved_blocks + 1;	/* turn on the appropriate allocation bits */
			new_alloc_ptr -> bit_mask (bit_offset (i)) = "1"b;
		     end;
		     saved_messages =		/* add in saved message */
		     saved_messages + 1;
		     last_saved_ms_ptr = test_ms_ptr;	/* set pointer to saved message */
		     check_ptr = next_ms_ptr;		/* prepare to check pointer */
		     label_var = 1;			/* prepare for next message check */
		end;
	     end;

	     else					/* not end of message */
	     do;
		first_block = "0"b;			/* remember next block is not a first block */
		message_blocks = message_blocks - 1;	/* decrement blocks left to check */
		tsaved_blocks = tsaved_blocks + 1;	/* increment temporary saved block count */
		block_offset = next_block_offset;	/* reset for testing next block */
		test_block_ptr,			/* make a pointer to the next block */
		check_ptr =			/* prepare to check the pointer */
		ptr (test_block_ptr, next_block_offset);
		label_var = 2;			/* prepare for next block check */
	     end;



	     if (ptr_is_good_v2_$ms_salvager_entry (check_ptr, block_size)) /* new pointer is ok */
	     then go to LABEL (label_var);		/* check next block */

	end;					/* of BEGIN block */

/*  */

FIN:	

	a_saved_messages = saved_messages;		/* return appropriate values */
	a_saved_blocks = saved_blocks;
	a_last_saved_ms_ptr = last_saved_ms_ptr;
	a_code = code;
	return;

     end ms_salv_util_v2_;
