/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */
%;
ms_salvager_v2_: proc (a_mptr, a_saved_messages, a_code);

/* Adapted from original version 2 ms_salvager_ by J. Stern, 11/4/74 */

dcl  establish_cleanup_proc_ entry (entry);

dcl (
     a_saved_messages,				/* number of saved messages (argument) */
     block_bits,					/* number of bits in a message block */
     dirl,					/* length of dir portion of message seg pname */
     i,						/* do loop index */
     mseg_data_v2_$block_trailer_data ext,			/* word count of trailer size */
     max_hdr_ms_len ext,				/* maximum length of header message */
     mseg_data_v2_$version_number ext,			/* current version of message segment primitives */
     saved_blocks init (0),				/* number of saved message blocks */
     saved_messages init (0),				/* number of saved messages (internal) */
     status_words (0: 9),				/* storage for status information */
     tsaved_blocks,					/* number of saved blocks per pass */
     tsaved_messages)				/* number of saved messages per pass */
     fixed bin;

dcl (alloc_len,					/* length of allocation bit string */
     block_offset,					/* offset to a message block */
     block_size,					/* size of message block */
     hdr_alloc_len,					/* number of allocation bits used for header */
     mseg_data_v2_$block_size ext,
     nrec,					/* number of records used by message segment */
     seg_size,					/* maximum size of a segment */
     temp,					/* calculation variable */
     trailer_offset) fixed bin (18);

dcl (
     a_code,					/* error code (argument) */
     code						/* error code (internal) */
     ) fixed bin (35);

dcl  dir char (168) aligned;				/* directory portion of message segment pathname */

dcl  ent char (32) aligned;				/* entry portion of message segment pathname */

dcl (forward init ("1"b),				/* ON if salvage is forward */
     set_block_size init ("0"b),			/* ON if block size in hdr to be set */
     total_success init ("0"b))			/* ON if salvage pass is totally successful */
     bit (1) aligned;

dcl  mseg_data_v2_$mseg_b36 ext bit (36) aligned;		/* header recognition pattern */

dcl (addr, addrel, bit, divide, fixed, mod, null, ptr, rel, substr) builtin;

dcl (a_mptr,					/* pointer to message segment (argument) */
     block_ptr,					/* pointer to a message block */
     end_ptr,					/* pointer to last message for salvage pass */
     eptr,                                                  /* pointer to status information */
     last_backward_ptr init (null),			/* pointer to last saved message in backward salvage */
     last_forward_ptr init (null),			/* pointer to last saved message in forward salvage */
     last_saved_ms_ptr,				/* pointer to last message saved in a pass */
     new_alloc_ptr,					/* pointer to new allocation bit string */
     old_first_ptr,					/* pointer to old first message */
     old_last_ptr,					/* pointer to old last message */
     salv_ptr)					/* pointer to beginning point for salvage */
     ptr;

dcl  block_mask bit (block_bits) aligned based;		/* mask for zeroing out unused message blocks */

dcl  hdr_ms_mask bit (36*max_hdr_ms_len) aligned based;	/* for zeroing out header message */

dcl 1 status_dope based (eptr) aligned,			/* mask for getting nrec from status info */
    2 pad (7) fixed bin aligned,
    2 curlen bit (12) unaligned;

dcl  error_table_$bad_segment ext fixed bin (35);
dcl  error_table_$no_message ext fixed bin (35);

/*  */

% include mseg_hdr_v2;

% include ms_block_trailer_v2;

dcl  hcs_$fs_get_path_name ext entry
    (ptr, char (*) aligned, fixed bin, char (*) aligned, fixed bin (35));

dcl  hcs_$get_max_length_seg entry (ptr, fixed bin (18), fixed bin (35));

dcl  hcs_$status_long ext entry
    (char (*) aligned, char (*) aligned, fixed bin (1), ptr, ptr, fixed bin (35));

dcl  hcs_$truncate_seg ext entry
    (ptr, fixed bin, fixed bin (35));

dcl  ptr_is_good_v2_$ms_salvager_entry ext entry
    (ptr, fixed bin (18)) returns (bit (1) aligned);

dcl  ms_salv_util_v2_ ext entry
    (bit (1) aligned, ptr, ptr, fixed bin (18), fixed bin (18), fixed bin, fixed bin, ptr, fixed bin (35));

/*  */
          eptr = addr (status_words);
	mptr = a_mptr;				/* copy argument */

	call establish_cleanup_proc_ (cleanup_handler);

cleanup_handler: proc;
	     call hcs_$truncate_seg (mptr, 1, code);	/* throw everything away */
	     go to FIN;
	end;


	call hcs_$get_max_length_seg (mptr, seg_size, code);
	if code ^= 0 then go to FIN;

	block_size = fixed (mseg_hdr_v2.block_size, 18);	/* fetch block size */
	if block_size <= 0
	then do;
SET_BLOCK_SIZE:
	     block_size = fixed (mseg_data_v2_$block_size, 18); /* take default and hope it's right */
	     set_block_size = "1"b;			/* remember to set later */
	end;

	else					/* block size not <= 0 */
	if mod (seg_size, block_size) ^= 0		/* bad block size */
	then go to SET_BLOCK_SIZE;


	alloc_len = divide (seg_size, block_size, 18, 0);	/* compute length of allocation bits */

	temp = divide ((fixed (rel (addr (mptr -> mseg_hdr_v2.hdr_ms_end)), 18)+1)*36 + alloc_len+35, 36, 18, 0);
	hdr_alloc_len = divide (temp+block_size-1, block_size, 18, 0); /* compute alloc bits used by header */
	max_hdr_ms_len = temp - fixed (rel (addr (mptr -> mseg_hdr_v2.hdr_ms)), 17);

	trailer_offset = fixed (block_size-mseg_data_v2_$block_trailer_data, 18); /* compute trailer offset */

	call hcs_$fs_get_path_name (mptr, dir, dirl, ent, code); /* get dir and ent names of segment */
	if code ^= 0
	then go to FIN;

	call hcs_$status_long (dir, ent, 1, eptr, null, code); /* get number of records used by message segment */
	if code ^= 0
	then go to FIN;

	nrec = fixed (status_dope.curlen, 18);

/*  */

	begin;

dcl  new_alloc_bits bit (alloc_len) init ("0"b) aligned;	/* new allocation bit string */

	     new_alloc_ptr = addr (new_alloc_bits);	/* set pointer to new bit string */

	     old_first_ptr, salv_ptr =		/* set possible first message,salvage ptr */
	     ptr (mptr, fixed (mseg_hdr_v2.first_ms_offset, 18));
	     old_last_ptr, end_ptr =			/* set possible last message,end salvage ptr */
	     ptr (mptr, fixed (mseg_hdr_v2.last_ms_offset, 18));
	     do i = 1 to hdr_alloc_len;		/* turn on header allocation bits */
		substr (new_alloc_bits, i, 1) = "1"b;
	     end;

/* salvage */

SALVAGE_LOOP:  

	     if (ptr_is_good_v2_$ms_salvager_entry (salv_ptr, block_size)) /* check validity of salvaging pointer */
	     then if (fixed (rel (salv_ptr), 18))+block_size <= nrec*1024
	     then do;				/* pointer is valid, go */

		tsaved_messages = 0;		/* initialize number of saved messages per pass */
		last_saved_ms_ptr = null;		/* initialize pointer to last saver message */
		call ms_salv_util_v2_
		(forward, salv_ptr, new_alloc_ptr, nrec, alloc_len,
		tsaved_messages, tsaved_blocks, last_saved_ms_ptr, code);
		if code ^= 0
		then go to FIN;
		saved_messages =			/* add in number of saved messages */
		saved_messages + tsaved_messages;
		saved_blocks =			/* add in number of saved blocks */
		saved_blocks + tsaved_blocks;
		if last_saved_ms_ptr = end_ptr	/* total success? */
		then total_success = "1"b;		/* set a flag to remember */

		if tsaved_messages ^= 0		/* partial success? */
		then do;				/* yes */

		     if (forward)			/* forward salvage? */
		     then last_forward_ptr =		/* yes, save pointer to last good message */
		     last_saved_ms_ptr;

		     else				/* backward salvage */
		     last_backward_ptr =		/* save pointer to last good message */
		     last_saved_ms_ptr;

		end;

		if (total_success)			/* if successful, don't need another pass */
		then go to SET_HEADER_DATA;

	     end;

	     if (forward)				/* first pass at salvaging? */
	     then do;				/* yes, prepare for next pass */
		forward = "0"b;			/* set direction of salvage */
		salv_ptr = old_last_ptr;		/* set salvaging pointer */
		end_ptr = old_first_ptr;		/* set hopeful end of salvage ptr */
		go to SALVAGE_LOOP;
	     end;

/*  */

/* join message fragments */

	     if saved_messages ^= 0			/* any success in salvaging? */
	     then do;				/* yes */

		if set_block_size			/* need to set block size in header */
		then mseg_hdr_v2.block_size = block_size; /* do it */

		if last_forward_ptr ^= null		/* forward salvage partly successful */
		then do;				/* yes */

		     if last_backward_ptr ^= null	/* backward salvage partly successful? */
		     then do;			/* yes */
			addrel (last_forward_ptr, trailer_offset) -> ms_block_trailer_v2.f_offset =
			bit (fixed (rel (last_backward_ptr), 18), 18);
			addrel (last_backward_ptr, trailer_offset) -> ms_block_trailer_v2.b_offset =
			bit (fixed (rel (last_forward_ptr), 18), 18);
		     end;

		     else				/* backward salvage unsuccessful */
		     do;
			mseg_hdr_v2.last_ms_offset =	/* reset last message offset in header */
			bit (fixed (rel (last_forward_ptr), 18), 18);
			addrel (last_forward_ptr, trailer_offset) -> ms_block_trailer_v2.f_offset =
			"0"b;			/* zero out next offset of new last message */
		     end;

		end;

		else				/* forward salvage no good */
		do;				/* backward salvage must have been */
		     mseg_hdr_v2.first_ms_offset =	/* reset first message offset */
		     bit (fixed (rel (last_backward_ptr), 18), 18);
		     addrel (last_backward_ptr, trailer_offset) -> ms_block_trailer_v2.b_offset =
		     "0"b;			/* zero prev message offset of new 1st message */
		end;

/* reset other header data */

SET_HEADER_DATA:	

		if (total_success)			/* was salvaging totally successful? */
		then do;				/* yes */

		     if (forward)			/* direction was forward */
		     then mseg_hdr_v2.last_ms_offset =	/* reset last message offset */
		     bit (fixed (rel (last_forward_ptr), 18), 18);

		     else				/* direction was backward */
		     mseg_hdr_v2.first_ms_offset =	/* reset first message offset */
		     bit (fixed (rel (last_backward_ptr), 18), 18);

		end;

		block_bits = fixed (block_size*36, 17);	/* set length of block mask */
		do i = 1 to alloc_len;		/* zero out unused blocks */
		     if substr (new_alloc_bits, i, 1) = "0"b /* block is unused */
		     then do;
			block_offset = block_size * fixed (i-1, 18);
			if divide (block_offset+block_size, 1000, 18, 0) > nrec
			then go to FIN;		/* block offset off end of records used, only 0s left */
			block_ptr = ptr (salv_ptr, block_offset);
			block_ptr -> block_mask = "0"b;
		     end;
		end;

	     end;

	     if mseg_hdr_v2.switches.ms_in_hdr		/* there is a message in the header */
	     then do;
		if mseg_hdr_v2.hdr_ms_len <= 0 |		/* check for a reasonable length */
		mseg_hdr_v2.hdr_ms_len > max_hdr_ms_len
		then do;				/* unreasonable length */
		     mseg_hdr_v2.switches.ms_in_hdr = "0"b; /* delete the message */
		     addr (mseg_hdr_v2.hdr_ms) -> hdr_ms_mask = "0"b;
		end;
	     end;

	     if saved_messages ^= 0			/* something was saved */
	     | mseg_hdr_v2.switches.ms_in_hdr
	     then do;				/* reset the header data */
		mseg_hdr_v2.space_left =		/* reset space left */
		alloc_len- (hdr_alloc_len+saved_blocks);
		mseg_hdr_v2.alloc_bits = new_alloc_bits;	/* reset allocation bit string */
		mseg_hdr_v2.number_of_messages =
		saved_messages;			/* set message count */
		mseg_hdr_v2.alloc_len = alloc_len;	/* set allocation bits length */
		mseg_hdr_v2.mseg_pattern = mseg_data_v2_$mseg_b36; /* set header pattern */
		mseg_hdr_v2.version_number = mseg_data_v2_$version_number; /* set version number */
	     end;

	     if saved_messages = 0			/* no messages were saved */
	     then do;
		if mseg_hdr_v2.switches.ms_in_hdr	/* a header message was saved */
		then mseg_hdr_v2.first_ms_offset,	/* zero out forward and backward offsets */
		mseg_hdr_v2.last_ms_offset = "0"b;
		else				/* no success salvaging */
		do;
		     call hcs_$truncate_seg (mptr, 1, code); /* throw everything away */
		end;
	     end;

	end;					/* of BEGIN block */

FIN:	

	if saved_messages ^= 0 | mseg_hdr_v2.switches.ms_in_hdr /* something was saved */
	then do;
	     mseg_hdr_v2.switches.aip = "0"b;		/* turn of aip bit */
	     mseg_hdr_v2.switches.os = "1"b;		/* message segment was salvaged */
	end;
	a_saved_messages = saved_messages;		/* return number of saved messages */
	a_code = code;				/* return code */
	return;

     end ms_salvager_v2_;
