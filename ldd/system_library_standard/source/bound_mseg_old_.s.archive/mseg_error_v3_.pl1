/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


mseg_error_v3_: proc (mptr, ecode, caller);

/*  This procedure formats error messages for the message
   segment facility and enters these error messages into
   the syserr log.  An error message contains the following
   parts:

   1.  name of the calling procedure
   2.  message segment pathname
   3.  process group id
   4.  system error message
   5.  caller-supplied message

*/
/* Written by J. Stern, 11/11/75 */
/* Modified 3/77 by Charlie Davis for the installation of version 4 message segments */


dcl  mptr ptr;					/* message segment pointer */
dcl  ecode fixed bin (35);				/* error code (input!) */
dcl  caller char (*);				/* procedure name of caller */

dcl  buffer char (512) aligned;			/* buffer to construct error message */
dcl  bi fixed bin;					/* current length of buffer */
dcl  dir char (168);				/* directory name */
dcl  dirlen fixed bin;				/* length of dir */
dcl  ent char (32);					/* entry name */
dcl  code fixed bin (35);				/* error code */
dcl  pgid char (32);				/* process group id */
dcl  short_mess char (8) aligned;			/* short error message */
dcl  long_mess char (100) aligned;			/* long error message */
dcl  nargs fixed bin;				/* number of arguments */
dcl  argp ptr;					/* argument list ptr */
dcl  ioa_string char (256);				/* string returned by ioa_ */
dcl  len fixed bin;					/* length of ioa_string */


dcl (null, substr, length, reverse, verify) builtin;

dcl  hcs_$fs_get_path_name entry (ptr, char (*), fixed bin, char (*), fixed bin (35));
dcl  get_group_id_ entry returns (char (32));
dcl  convert_status_code_ entry (fixed bin (35), char (8) aligned, char (100) aligned);
dcl  cu_$arg_count entry (fixed bin);
dcl  cu_$arg_list_ptr entry (ptr);
dcl  ioa_$general_rs entry (ptr, fixed bin, fixed bin, char (*), fixed bin, bit (1) aligned, bit (1) aligned);
dcl  admin_gate_$syserr entry options (variable);

/*  */

	bi = 0;					/* set initial buffer length */

/* add caller name to buffer */

	if caller ^= "" then do;
	     call strip_add (caller);
	     call add (":");
	end;

/* add message segment pathname to buffer */

	if mptr ^= null then do;
	     call hcs_$fs_get_path_name (mptr, dir, dirlen, ent, code);
	     if code ^= 0 then
		call add (" Cannot get pathname.");
	     else do;
		call add (" ");
		call add (substr (dir, 1, dirlen));
		call add (">");
		call strip_add (ent);
	     end;
	end;

/* add process group id to buffer */

	call add (" for ");
	pgid = get_group_id_ ();
	call strip_add (pgid);

/* add system error message to buffer */

	if ecode ^= 0 then do;
	     call add (" ");
	     call convert_status_code_ (ecode, short_mess, long_mess);
	     call strip_add ((long_mess));
	end;

/* add ioa_ message to buffer */

	call cu_$arg_count (nargs);
	if nargs > 3 then do;
	     call add (" ");
	     call cu_$arg_list_ptr (argp);
	     call ioa_$general_rs (argp, 4, 5, ioa_string, len, "0"b, "0"b);
	     call strip_add (substr (ioa_string, 1, len));
	end;

/* now just spit it out */

finish:	call admin_gate_$syserr (15, substr (buffer, 1, bi));
	return;


strip_add: proc (item);				/* strips trailing blanks and adds item to buffer */

dcl  item char (*);
dcl (i, j) fixed bin;
dcl  strip_sw bit (1) aligned;


	     strip_sw = "1"b;			/* strip trailing blanks */
	     go to join;

add:	     entry (item);				/* adds item to buffer */

	     strip_sw = "0"b;


join:	     i = length (item);
	     if i = 0 then return;

	     if strip_sw then do;
		j = verify (reverse (item), " ");
		if j = 0 then return;		/* item was all blanks */
		i = i -j + 1;
	     end;

	     if bi + i > length (buffer) then i = length (buffer) - bi;
	     substr (buffer, bi+1, i) = substr (item, 1, i);
	     bi = bi + i;
	     if bi = length (buffer) then go to finish;

	end strip_add;


     end mseg_error_v3_;
