/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


ms_salv_util_v4_: proc (a_forward, a_salv_ptr, a_new_alloc_ptr, a_new_ht_ptr, a_block_size, a_seg_size, a_alloc_len, a_hdr_alloc_len,
	     a_mseg_access_class, a_saved_messages, a_saved_blocks, a_last_saved_ms_ptr);

/* Modified for version 3 message segments by J. Stern, 10/30/74 */
/* Modified by J. Stern, 11/14/75 */
/* Modified 3/77 by Charlie Davis for the installation of version 4 message segments */
/* Modified 4/82 by E. N. Kittlitz to detect discrepancy 'twixt ms_size and total block_count */
/* Modified 1984-10-19 BIM to remove bogus access class check that deleted
    messages sent down. */

dcl (a_saved_blocks,				/* number of saved message blocks (argument) */
     a_saved_messages,				/* number of saved messages (argument) */
     block_bit_count,				/* bit count of message portion in block */
     block_hdr_size,				/* words in header */
     block_trailer_size,				/* words in trailer */
     first_full_block_bit_count,			/* bits allocated to first block message portion */
     full_block_bit_count,				/* bits allocated to message portion */
     i,						/* do loop index */
     htx,						/* hash table index */
     max_message_blocks,				/* maximum blocks in a message */
     message_blocks,				/* number of unchecked blocks in message */
     saved_blocks init (0),				/* number of saved message blocks (internal) */
     saved_messages init (0),				/* number of saved messages (internal) */
     tsaved_blocks,					/* blocks saved in message */
     zero_words (8) init (0, 0, 0, 0, 0, 0, 0, 0)
     ) fixed bin;

dcl (a_alloc_len,					/* length of allocation bit string */
     a_hdr_alloc_len,				/* the part of alloc_len devoted to the header */
     a_block_size,					/* block size */
     a_seg_size,					/* max length of message seg */
     alloc_len,					/* length of allocation bit string */
     hdr_alloc_len,
     backward_offset,				/* offset to backward threaded message */
     bit_off,					/* offset of allocation bit for block */
     block_ms_words,				/* allocated size for message portion */
     block_offset,					/* offset to message block */
     block_size,					/* size of message block in words */
     first_block_ms_words,				/* allocated size for first block message portion */
     forward_offset,				/* offset to forward threaded message */
     max_message_size,				/* maximum words in a message */
     message_words,					/* word count of message */
     ms_offset,					/* offset to first block of message */
     mseg_data_v4_$block_size ext,			/* default block size */
     mseg_data_v4_$max_message_size ext,
     next_block_offset,				/* offset to next message block in message */
     seg_size,
     previous_offset init (0),			/* offset to previous message */
     tr_offset)					/* offset from beginning of block to trailer */
     fixed bin (18);

dcl (a_forward,					/* ON if salvage is forward (argument) */
     first_block,					/* ON if block is first block in message */
     forward)					/* ON if salvage is forward (internal) */
     bit (1) aligned;

dcl (a_last_saved_ms_ptr,				/* pointer to last saved message (argument) */
     a_new_alloc_ptr,				/* pointer to new allocation bits(argument) */
     a_new_ht_ptr,					/* pointer to new hash table (argument) */
     a_salv_ptr,					/* pointer to where to begin salvaging */
     last_saved_ms_ptr init (null),			/* pointer to last saved message(internal) */
     new_alloc_ptr,					/* pointer to new allocation bits(argument) */
     new_ht_ptr,					/* pointer to new hash table (internal) */
     next_ms_ptr,					/* pointer to next message */
     test_block_ptr,				/* pointer to message block being tested */
     test_ms_ptr)					/* pointer to message being tested */
     ptr;

dcl  ms_size fixed bin (24);				/* used to check trailer.ms_size with hdr.block_count sum */

dcl  prev_ms_id bit (72) aligned;			/* previous message id */

dcl (a_mseg_access_class,
     mseg_access_class) bit (72) aligned;		/* message segment access class */

dcl 1 new_hash_table aligned based (new_ht_ptr),		/* new hash table */
    2 last_in_bucket (0:511) bit (18) unaligned;

dcl (addr, addrel, divide, fixed, mod, null, ptr, rel, size, substr) builtin;

dcl  bit_mask (alloc_len) based (new_alloc_ptr) bit (1) unaligned; /* mask for setting allocation bits */

dcl  zeroes char (32) aligned based (addr (zero_words (1)));


%include mseg_hdr_v4;
dcl mptr pointer;

%include ms_block_hdr_v4;

%include ms_block_trailer_v4;


dcl  aim_check_$greater_or_equal ext entry
    (bit (72) aligned, bit (72) aligned) returns (bit (1) aligned);

/*  */

	mptr = ptr (a_salv_ptr, 0);			/* make pointer to message segment */

	max_message_size = mseg_data_v4_$max_message_size;
	block_size = a_block_size;
	max_message_blocks = divide (max_message_size, block_size, 18, 0); /* compute max blocks in message */
	block_hdr_size = size (ms_block_hdr);
	block_trailer_size = size (ms_block_trailer);

	forward = a_forward;			/* copy argument */
	next_ms_ptr = a_salv_ptr;			/* where to begin salvaging */
	seg_size = a_seg_size;
	alloc_len = a_alloc_len;
	hdr_alloc_len = a_hdr_alloc_len;
	ms_offset = fixed (rel (next_ms_ptr), 18);	/* offset of where to begin salvaging */
	call check_offset (ms_offset);
	new_alloc_ptr = a_new_alloc_ptr;		/* copy argument */
	new_ht_ptr = a_new_ht_ptr;
	mseg_access_class = a_mseg_access_class;
	tr_offset = block_size - block_trailer_size;	/* initialize trailer offset */
	first_block_ms_words =			/* intialize word count of full first block */
	     block_size - (block_hdr_size + block_trailer_size);
	first_full_block_bit_count =			/* initialize bit count of full first block */
	     first_block_ms_words * 36;
	full_block_bit_count =			/* initialize bit count of full block */
	     (block_size - block_hdr_size) * 36;
	block_ms_words =				/* initialize word count of full block */
	     block_size - block_hdr_size;
	if forward then prev_ms_id = (72) "0"b;
	else prev_ms_id = (72) "1"b;

/*  */

	begin;

dcl  bit_offset (max_message_blocks) fixed bin (18);	/* array of offsets into alloc bits */

CHECK_MESSAGE:

	     first_block = "1"b;			/* remember this is a first block of a message */
	     tsaved_blocks = 0;			/* initialize blocks saved in message */

	     test_ms_ptr = next_ms_ptr;		/* set pointer to message to be tested */
	     ms_offset = fixed (rel (next_ms_ptr), 18);	/* set offset of message to be tested */
	     tr_ptr = addrel (test_ms_ptr, tr_offset);	/* make a pointer to the trailer */
	     if tr_ptr -> ms_block_trailer.tr_pattern ^= trailer_pattern /* no trailer pattern */
	     then call FIN;
	     forward_offset =			/* get offset to next message */
		fixed (tr_ptr -> ms_block_trailer.f_offset, 18);
	     if forward_offset ^= 0
	     then call check_offset (forward_offset);	/* forward offset off end of segment */
	     else if mptr -> mseg_hdr_v4.last_ms_offset ^= rel (test_ms_ptr) /* header doesn't agree */
	     then call FIN;			/* give up */
	     backward_offset =			/* get offset to previous message */
		fixed (tr_ptr -> ms_block_trailer.b_offset, 18);
	     if backward_offset ^= 0
	     then call check_offset (backward_offset);	/* previous offset off end of message */
	     else if mptr -> mseg_hdr_v4.first_ms_offset ^= rel (test_ms_ptr) /* header doesn't agree */
	     then call FIN;

	     if ms_block_trailer.ms_size = "0"b		/* check for zeroing out */
	     | ms_block_trailer.ms_id = "0"b
	     | ms_block_trailer.sender_id = zeroes
	     then call FIN;

	     if ^aim_check_$greater_or_equal (mseg_access_class, ms_block_trailer.access_class)
	     then call FIN;

	     htx = fixed (substr (ms_block_trailer.ms_id, 64, 9));	/* get hash table index of message */
	     block_offset = fixed (tr_ptr -> ms_block_trailer.back_in_bucket); 
	     if block_offset ^= 0			/* not end of thread */
	     then call check_offset (block_offset);	/* check the hash bucket offset */

	     if (forward)				/* forward salvage */
	     then do;

		if previous_offset ^= 0		/* there was a previous message */
		then if backward_offset ^=
		     previous_offset		/* this message doesn't point to it */
		     then call FIN;		/* give up */
		next_ms_ptr = ptr (test_ms_ptr, forward_offset);

		if substr (prev_ms_id, 19, 54) >= substr (ms_block_trailer.ms_id, 19, 54)
		then do;				/* should be monotonically increasing */
		     ms_block_trailer.ms_id = ""b;	/* make ms_id look bad for backward salvage too!! */
		     call FIN;
		end;

	     end;

	     else					/* backward salvage */
	     do;

		if previous_offset ^= 0		/* there was a previous message */
		then if forward_offset ^=
		     previous_offset		/* this message doesn't point to it */
		     then call FIN;		/* give up */
		next_ms_ptr = ptr (test_ms_ptr, backward_offset);

		if substr (prev_ms_id, 19, 54) <= substr (ms_block_trailer.ms_id, 19, 54)
		then call FIN;			/* should be monotonically decreasing */

	     end;

	     previous_offset = ms_offset;		/* remember for next message check */
	     prev_ms_id = ms_block_trailer.ms_id;

	     ms_size = fixed (tr_ptr -> ms_block_trailer.ms_size, 24);
	     message_words =			/* calculate number of words in message */
		divide (ms_size + 35, 36, 18, 0);

	     if message_words <= 0			/* bad word count */
	     then call FIN;			/* give up */
	     if message_words > max_message_size
	     then call FIN;

	     if message_words <= first_block_ms_words	/* calculate blocks in message */
	     then message_blocks = 1;
	     else
	     message_blocks =
		divide (message_words-first_block_ms_words+block_ms_words-1, block_ms_words, 17, 0)+1;
	     block_offset = ms_offset;

	     test_block_ptr = test_ms_ptr;		/* set pointer for testing rest of block */

/*  */

/* check the block header */

CHECK_BLOCK:

/* check to see if the block has been allocated */

	     bit_off = divide (block_offset, block_size, 18, 0)+1; /* calculate bit offset in alloc bits */

	     do i = 1 to tsaved_blocks;		/* check against other blocks in this message */
		if bit_offset (i) = bit_off		/* block is used */
		then call FIN;			/* give up */
	     end;

	     if new_alloc_ptr -> bit_mask (bit_off) = "1"b /* block is used */
	     then call FIN;

	     if test_block_ptr -> ms_block_hdr.first_block ^=
	     first_block				/* bad first block flag */
	     then call FIN;

	     block_bit_count =			/* get size of message portion in block */
		fixed (test_block_ptr -> ms_block_hdr.block_count, 17);
	     if block_bit_count <= 0			/* bad block bit count */
	     then call FIN;			/* give up */

	     ms_size = ms_size - block_bit_count;	/* decrement total size of message */
	     if ms_size < 0 then call FIN;		/* disagreement between trailer and total of blocks */

	     if (first_block)			/* first block of a message */
	     then do;

		if message_blocks ^= 1		/* another block follows */
		then do;
		     if block_bit_count ^=
		     first_full_block_bit_count	/* error in block bit count */
		     then call FIN;
		end;
		else				/* no blocks follow */
		if block_bit_count >
		first_full_block_bit_count		/* error in block bit count */
		then call FIN;
	     end;

	     else					/* not first block in message */
	     do;
		if message_blocks ^= 1		/* another block follows */
		then do;
		     if block_bit_count ^=
		     full_block_bit_count		/* error in block bit count */
		     then call FIN;		/* give up */
		end;
		else				/* last block in message */
		if block_bit_count > full_block_bit_count /* bad block bit count */
		then call FIN;			/* give up */
	     end;

	     next_block_offset =			/* get the offset to the next message block */
		fixed (test_block_ptr -> ms_block_hdr.f_offset, 18);

	     bit_offset (tsaved_blocks + 1) = bit_off;	/* remember location of block */

	     if message_blocks = 1			/* last block in message */
	     then do;
		if next_block_offset ^= 0		/* block pointer bad */
		then call FIN;
		else if ms_size ^= 0		/* disagreement between trailer.ms_size and sum of blocks */
		then call FIN;
		else				/* legitimate end of message */
		do;
		     saved_blocks =			/* add in saved blocks */
			saved_blocks + tsaved_blocks +1;
		     do i = 1 to tsaved_blocks + 1;	/* turn on the appropriate allocation bits */
			new_alloc_ptr -> bit_mask (bit_offset (i)) = "1"b;
		     end;
		     back_in_bucket = new_hash_table.last_in_bucket (htx); /* set back ptr to previous last */
		     new_hash_table.last_in_bucket (htx) = rel (test_ms_ptr); /* make this one the last in bucket */
		     saved_messages =		/* add in saved message */
			saved_messages + 1;
		     last_saved_ms_ptr = test_ms_ptr;	/* set pointer to saved message */
		     go to CHECK_MESSAGE;
		end;
	     end;

	     else					/* not end of message */
	     do;
		call check_offset (next_block_offset);	/* check offset to next block */
		first_block = "0"b;			/* remember next block is not a first block */
		message_blocks = message_blocks - 1;	/* decrement blocks left to check */
		tsaved_blocks = tsaved_blocks + 1;	/* increment temporary saved block count */
		block_offset = next_block_offset;	/* reset for testing next block */
		test_block_ptr =			/* make a pointer to the next block */
		     ptr (test_block_ptr, next_block_offset);
		go to CHECK_BLOCK;
	     end;

	end;					/* of BEGIN block */

/*  */

FIN:	procedure;
	go to GIVE_UP_AND_RETURN;
	end FIN;

GIVE_UP_AND_RETURN:
	a_saved_messages = saved_messages;		/* return appropriate values */
	a_saved_blocks = saved_blocks;
	a_last_saved_ms_ptr = last_saved_ms_ptr;
	return;


check_offset: proc (a_relp);				/* procedure to check validity of an offset */

dcl (a_relp, relp) fixed bin (18);

	     relp = a_relp;
	     if relp + block_size > seg_size then call FIN; /* offset beyond max length of segment */
	     if mod (relp, block_size) ^= 0 then call FIN; /* not offset of a block */
	     relp = divide (relp, block_size, 18, 0) +1;	/* convert block offset to block number */
	     if relp <= hdr_alloc_len then call FIN;	/* offset within header blocks */
	     if relp > alloc_len then call FIN;	/* offset beyond last block */

	end check_offset;

     end ms_salv_util_v4_;
