/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


mseg_util_v3_: proc;

/* Modified for version 3 message segments by J. Stern, 10/22/74 */
/* Modified to use mseg_error_ by J. Stern, 11/12/75 */
/* Modified 3/77 by Charlie Davis for the installation of version 4 message segments */

dcl (a_mptr,					/* pointer to the message segment */
     prev_tr_ptr,					/* pointer to previous message trailer */
     next_tr_ptr,					/* pointer to next message trailer */
     prev_in_bucket_ptr,				/* pointer to previous message in hash bucket */
     ms_ptr,					/* pointer to message wanted */
     ret_ptr init (null),
     deletep,					/* pointer to block to be zeroed out */
     a_arg_ptr,					/*  pointer to return_arg structure (argument) */
     arg_ptr,					/* pointer to return_arg structure (internal) */
     t_ptr,					/* scan pointer for returning message */
     a_area_ptr,					/* pointer to allocated area */
     a_ms_ptr,					/* pointer to updating message */
     area_ptr) ptr;

dcl (read init ("0"b),				/* ON for read or read and delete entry */
     incr_read init ("0"b),				/* ON for incremental read entry */
     delete init ("0"b),				/* ON for delete or read and delete entry */
     update init ("0"b),				/* ON for update entry */
     get_count init ("0"b),				/* ON for get_count entry */
     mseg_priv,					/* ON if calling process has privileged access */
     a_own,					/* ON if reading own message (argument) */
     own,						/* ON if reading own message (internal) */
     last,					/* ON if message is last in segment */
     first,					/* ON if message is first in segment */
     search_sw,					/* ON if message id not found for incremental reading */
     ms_end) bit (1) aligned;				/* ON when end of message is found */

dcl  back_in_bucket_offset bit (18) aligned;		/* offset of message one back in hash bucket */

dcl (tr_offset,					/* offset from beginning of block to trailer */
     ms_count,					/* number of messages in segment */
     a_count,					/* message count (argument) */
     count,					/* message count (internal) */
     prev_offset,					/* offset to previous message */
     next_offset,					/* offset to next message */
     block_size,					/* size of a message block */
     blocks_in_message,				/* number of blocks used for message */
     copy_size,					/* size of bit copy mask */
     delete_size,					/* bit size of block to be zeroed out */
     a_ms_len,					/* length of message in block trailer */
     ms_len,
     found_ms_len,					/* actual message size */
     update_len,					/* size of update message */
     loc,
     bit_off) fixed bin (18);				/* location of allocation bit to be turned off */

dcl (a_first_or_last,				/* ON if last message wanted (argument) */
     first_or_last) bit (1) aligned;			/* ON if last message wanted (internal) */

dcl (a_dir,					/* direction of incremental search */
     dir init ("00"b)) bit (2) aligned;

dcl (a_ms_id,					/* message ID (argument) */
     ms_id) bit (72) aligned;				/* message ID (internal) */

dcl (authorization,					/* authorization of calling process */
     access_class) bit (72) aligned;			/* access class of message segment */

dcl  privileges bit (36) aligned;			/* privileges of calling process */
dcl 1 based_priv unal based (addr (privileges)) like aim_template.privileges;

dcl (
     alloc_len,					/* length of allocation bit string */
     level,					/* user level: 0 = non-own entry, 1 = own entry (internal) */
     ms_word_len,					/* length of message in words */
     htx,						/* hash table index */
     id_len) fixed bin;				/* length of person-project portion of group id */

dcl (
     a_code,					/* error code (argument) */
     code						/* error code (internal) */
     ) fixed bin (35);

dcl (addr, addrel, bit, divide, fixed, index, null, ptr, rel, size, substr) builtin;

dcl (
     area,
     cleanup
     ) condition;

dcl  area_array area (30) aligned based (area_ptr),	/* for allocating */
     ms_word_array (ms_word_len) fixed bin aligned based (ret_ptr);

dcl (caller_id,					/* id of caller */
     ms_sender_id) char (32) aligned;			/* id of message sender */

dcl  proc_name char (32);				/* procedure name */
dcl  reason char (40);				/* reason why operation failed */

dcl  bit_copy_mask bit (copy_size) based;		/* bit copy mask */

dcl  bits (copy_size) bit (1) based unaligned;		/* for resetting copy-to pointer */

dcl 1 return_args aligned based (arg_ptr),		/* return argument structure */
    2 ms_ptr ptr,					/* pointer to message */
    2 ms_len fixed bin (18),				/* length of message in bits */
    2 sender_id char (32),				/* person-project ID of message sender */
    2 level fixed bin,				/* validation level of sender */
    2 ms_id bit (72),				/* unique ID of message */
    2 sender_authorization bit (72),			/* access authorization of message sender */
    2 access_class bit (72);				/* message access class */

% include mseg_hdr_v3;

% include ms_block_hdr_v3;

% include ms_block_trailer_v3;

% include aim_template;

dcl  error_table_$bad_segment ext fixed bin (35);
dcl  error_table_$ai_restricted ext fixed bin (35);
dcl  error_table_$no_message ext fixed bin (35);
dcl  error_table_$inconsistent ext fixed bin (35);
dcl  error_table_$bigarg ext fixed bin (35);
dcl  error_table_$noalloc ext fixed bin (35);

dcl  get_group_id_$tag_star ext entry returns (char (32) aligned);
dcl  get_authorization_ ext entry returns (bit (72) aligned);
dcl  get_privileges_ ext entry returns (bit (36) aligned);
dcl  hcs_$get_access_class_seg ext entry (ptr, bit (72) aligned, fixed bin (35));
dcl  mseg_error_v3_ entry options (variable);
dcl  read_allowed_ ext entry (bit (72) aligned, bit (72) aligned) returns (bit (1) aligned);
dcl  read_write_allowed_ ext entry (bit (72) aligned, bit (72) aligned) returns (bit (1) aligned);

/*  */
read:	entry (a_mptr, a_area_ptr, a_first_or_last, a_arg_ptr, a_own, a_code);

	proc_name = "mseg_util_$read";
	first_or_last = a_first_or_last;
	area_ptr = a_area_ptr;
	read = "1"b;
	go to COMMON;

delete:	entry (a_mptr, a_ms_id, a_own, a_code);

	proc_name = "mseg_util_$delete";
	ms_id = a_ms_id;
	delete = "1"b;
	go to COMMON;

read_and_delete: entry (a_mptr, a_area_ptr, a_first_or_last, a_arg_ptr, a_own, a_code);

	proc_name = "mseg_util_$read_and_delete";
	first_or_last = a_first_or_last;
	area_ptr = a_area_ptr;
	read, delete = "1"b;
	go to COMMON;

incremental_read: entry (a_mptr, a_area_ptr, a_dir, a_ms_id, a_arg_ptr, a_own, a_code);

	proc_name = "mseg_util_$incremental_read";
	ms_id = a_ms_id;
	dir = a_dir;
	if dir = "11"b then do;			/* undefined */
	     code = error_table_$inconsistent;
	     go to FIN;
	end;
	area_ptr = a_area_ptr;
	incr_read = "1"b;
	go to COMMON;


update:	entry (a_mptr, a_ms_ptr, a_ms_len, a_ms_id, a_own, a_code);

	proc_name = "mseg_util_$update";
	update = "1"b;
	ms_id = a_ms_id;
	go to COMMON;

get_count: entry (a_mptr, a_count, a_code);

	proc_name = "mseg_util_$get_count";
	get_count = "1"b;
	own = "0"b;
	go to COMMON2;

/*  */

COMMON:
	own = a_own;

COMMON2:
	mptr = a_mptr;
	code = 0;
	search_sw = "0"b;

	ms_count =				/* get number of messages */
	     fixed (mptr -> mseg_hdr.number_of_messages, 18);

	block_size = fixed (mseg_hdr.block_size, 18);	/* pick out block size from header */

	tr_offset = block_size - size (ms_block_trailer); /* calculate trailer offset */

/* See if first or last message wanted */

	if get_count then go to COUNT;		/* start counting with first message */

	if read then do;				/* read first or last message */
	     if first_or_last = "1"b			/* last message wanted */
	     then do;
		dir = "10"b;			/* prepare to scan backward */
LAST:		loc = fixed (mptr -> mseg_hdr.last_ms_offset, 18); /* get offset of last message */
	     end;

	     else do;				/* first message wanted */
COUNT:		dir = "01"b;			/* prepare to scan forward */
FIRST:		loc = fixed (mptr -> mseg_hdr.first_ms_offset, 18); /* get offset of first message */
	     end;
	     if delete then do;
		ms_ptr = ptr (mptr, loc);
		tr_ptr = addrel (ms_ptr, tr_offset);
		ms_id = tr_ptr -> ms_block_trailer.ms_id;
		go to THREAD;
	     end;
	end;

/* look up message ID in hash table */

	else do;					/* for incr read, update ; delete */
THREAD:	     htx = fixed (substr (ms_id, 64, 9));	/* hash table index = low 9 bits of message ID */
	     loc = fixed (hash_table.last_in_bucket (htx), 18); /* get loc of last message in bucket */
	     prev_in_bucket_ptr = null;		/* no previous message yet */

	     do while (loc ^= 0);			/* search bucket for matching message ID */
		ms_ptr = ptr (mptr, loc);		/* get ptr to first block of message */
		if ^ms_ptr -> ms_block_hdr.first_block	/* check if really first block */
		then do;
		     reason = "not first block in hash lookup";
		     go to BAD_SEG;
		end;
		tr_ptr = addrel (ms_ptr, tr_offset);	/* get trailer ptr */
		if tr_ptr -> ms_block_trailer.tr_pattern ^= trailer_pattern /* check pattern */
		then do;
		     reason = "bad trailer pattern in hash lookup";
		     go to BAD_SEG;
		end;
		if tr_ptr -> ms_block_trailer.ms_id = ms_id /* found it */
		then go to FOUND_ID;
		prev_in_bucket_ptr = tr_ptr;		/* remember ptr to this message */
		loc = fixed (tr_ptr -> ms_block_trailer.back_in_bucket, 18); /* go back one in bucket */
	     end;

	     if incr_read then
		if dir ^= "00"b then do;		/* forward or backward incr read */
		     search_sw = "1"b;		/* search for next message even though this message is gone */
		     if dir = "10"b then go to LAST;	/* search for largest message id < ms_id */
		     else go to FIRST;		/* search for smallest message id > ms_id */
		end;

	     go to NO_MSG;				/* bucket exhausted */
FOUND_ID:
	end;


/* prepare to check access */

	authorization = get_authorization_ ();		/* get caller's authorization */
	privileges = get_privileges_ ();		/* get caller's privileges */
	mseg_priv = based_priv.ring1;			/* get ring 1 privilege flag */
	if own					/* caller can only reference his own message */
	then do;
	     caller_id = get_group_id_$tag_star ();	/* get caller's goup id */
	     id_len = index (caller_id, ".*");		/* find index of the ".*" tag */
	end;

/* get_count */

	if get_count
	then do;
	     if mseg_priv				/* caller has privileged access */
	     then do;
FULL_COUNT:	a_count = ms_count;			/* return full count */
		go to FIN;
	     end;
	     call hcs_$get_access_class_seg (mptr, access_class, code); /* get message seg access class */
	     if code ^= 0 then go to FIN;
	     if read_allowed_ (authorization, access_class) /* caller is authorized to see all messages */
	     then go to FULL_COUNT;			/* return full count */
	     count = 0;				/* initialize count */
	     go to READ;				/* get count of read-accessible messages */
	end;

/* incremental read */

	else if search_sw then go to READ;
	else if incr_read
	then do;
	     if own				/* must be caller's own message */
	     then if substr (ms_block_trailer.sender_id, 1, id_len) ^= substr (caller_id, 1, id_len) /* not his own */
		then go to NO_MSG;			/* pretend it doesn't exist */
	     if ^mseg_priv				/* no special access privilege */
	     then if ^read_allowed_ (authorization, tr_ptr -> ms_block_trailer.access_class) /* no read permit */
		then go to NO_MSG;			/* pretend it doesn't exist */

	     if dir = "10"b				/* previous message wanted */
	     then do;				/* increment message pointer */
		if tr_ptr -> ms_block_trailer.b_offset = "0"b
		then do;				/* error, no previous message */
		     if fixed (mseg_hdr.first_ms_offset, 18) ^= loc
		     then do;
			reason = "bad first offset";
			go to BAD_SEG;
		     end;
NO_MSG:		     code = error_table_$no_message;
		     go to FIN;
		end;
		loc = fixed (tr_ptr -> ms_block_trailer.b_offset, 18);
		go to READ;
	     end;

	     else if dir = "01"b			/* next message wanted */
	     then do;				/* increment message pointer */
		if tr_ptr -> ms_block_trailer.f_offset = "0"b
		then do;				/* error, no next message */
		     if fixed (mseg_hdr.last_ms_offset, 18) ^= loc
		     then do;
			reason = "bad last offset";
			go to BAD_SEG;
		     end;
		     go to NO_MSG;
		end;
		loc = fixed (tr_ptr -> ms_block_trailer.f_offset, 18);
		go to READ;
	     end;

	end;

/* read */

	else if read
	then do;
READ:	     do while (loc ^= 0);			/* scan for read-accessible message */
		ms_ptr = ptr (mptr, loc);		/* get ptr to first block of message */
		if ^ms_ptr -> ms_block_hdr.first_block	/* check if really first block */
		then do;
		     reason = "not first block";
		     go to BAD_SEG;
		end;
		tr_ptr = addrel (ms_ptr, tr_offset);	/* get trailer ptr */
		if tr_ptr -> ms_block_trailer.tr_pattern ^= trailer_pattern /* check pattern */
		then do;
		     reason = "bad trailer pattern";
		     go to BAD_SEG;
		end;
		if own				/* must be caller's own message */
		then if substr (ms_block_trailer.sender_id, 1, id_len) ^= substr (caller_id, 1, id_len) /* not his own */
		     then go to NEXT;		/* skip it */
		if ^mseg_priv			/* no special access privileges */
		then do;
		     if ^read_allowed_ (authorization, tr_ptr -> ms_block_trailer.access_class) /* no read permit */
		     then go to NEXT;		/* skip over this one */
		     if delete			/* read and delete requested */
		     then if ^read_write_allowed_ (authorization, tr_ptr -> ms_block_trailer.access_class)
			then go to AI_ERR;		/* cannot delete this message */
		end;
		if get_count			/* get_count entry */
		then count = count + 1;		/* increment count of read-accessible messages */
		else if search_sw
		then if dir = "01"b
		     then if substr (tr_ptr -> ms_block_trailer.ms_id, 19, 54) > substr (ms_id, 19, 54)
			then go to EXIT;		/* found the one we're searching for */
			else go to NEXT;
		     else if substr (tr_ptr -> ms_block_trailer.ms_id, 19, 54) < substr (ms_id, 19, 54)
		     then go to EXIT;		/* found it */
		     else go to NEXT;
		else go to EXIT;			/* found a message to read, exit loop */
NEXT:
		if dir = "01"b			/* scanning forward */
		then loc = fixed (tr_ptr -> ms_block_trailer.f_offset, 18); /* get loc of next message */
		else loc = fixed (tr_ptr -> ms_block_trailer.b_offset, 18); /* get loc of previous message */
	     end;

	     if get_count				/* we're finished counting */
	     then do;
		a_count = count;
		go to FIN;
	     end;
	     go to NO_MSG;				/* couldn't find anything to read */
EXIT:	end;

/* update or delete */

	else if update | delete
	then do;
	     if own				/* must be caller's own message */
	     then if substr (ms_block_trailer.sender_id, 1, id_len) ^= substr (caller_id, 1, id_len) /* not his own */
		then go to NO_MSG;			/* pretend it doesn't exist */
	     if ^mseg_priv				/* no special access privilege */
	     then if ^read_write_allowed_ (authorization, tr_ptr -> ms_block_trailer.access_class) /* no read-write permit */
		then if ^read_allowed_ (authorization, tr_ptr -> ms_block_trailer.access_class) /* not even read permit */
		     then go to NO_MSG;		/* pretend it doesn't exist */
		     else do;			/* caller has read permit, but not modify */
AI_ERR:			code = error_table_$ai_restricted;
			go to FIN;
		     end;
	end;

/* prepare to perform requested operation */

	ms_len = fixed (ms_block_trailer.ms_size, 18);	/* pick out message size */

	if update
	then do;
	     update_len = a_ms_len;
	     if update_len > ms_len			/* incorrect message size specified */
	     then do;
		code = error_table_$bigarg;		/* user message too big */
		go to FIN;
	     end;
	     t_ptr = a_ms_ptr;			/* initialize copy ptr */
	end;

	if delete
	then do;

	     if fixed (mptr -> mseg_hdr.first_ms_offset, 18) = loc /* first message */
	     then first = "1"b;			/* set flag to remember */
	     else first = "0"b;
	     if fixed (mptr -> mseg_hdr.last_ms_offset, 18) = loc /* last message */
	     then last = "1"b;			/* set flag to remember */
	     else last = "0"b;

	     if (^first)
	     then do;				/* not first message */
		prev_offset =			/* get offset to previous message */
		     fixed (tr_ptr -> ms_block_trailer.b_offset, 18);
		prev_tr_ptr =			/* make pointer to previous trailer */
		     ptr (mptr, prev_offset+tr_offset);
	     end;

	     if (^last)
	     then do;				/* not last message */
		next_offset =			/* get offset to next message */
		     fixed (tr_ptr -> ms_block_trailer.f_offset, 18);
		next_tr_ptr =			/* make pointer to next trailer */
		     ptr (mptr, next_offset+tr_offset);
	     end;

	     back_in_bucket_offset = tr_ptr -> ms_block_trailer.back_in_bucket;

	     delete_size = block_size * 36;		/* the block size in bits */
	     alloc_len = mptr -> mseg_hdr.alloc_len;	/* a local copy of the number of allocation bits */

	end;

	if read | incr_read
	then do;
	     ms_sender_id = tr_ptr -> ms_block_trailer.sender_id; /* pick out senders' id */
	     level = fixed (ms_block_trailer.ring_no, 17); /* pick out validation level */
	     ms_id = tr_ptr -> ms_block_trailer.ms_id;	/* pick out message id */
	     authorization = tr_ptr -> ms_block_trailer.sender_authorization; /* pick out sender authorization */
	     access_class = tr_ptr -> ms_block_trailer.access_class; /* pick out message access class */

/* allocate an area for the returned message */

	     on cleanup begin;			/* establish cleanup handler to free allocated message */
		if ret_ptr ^= null			/* a message was allocated */
		then do;
		     free ms_word_array in (area_array); /* free it */
		     a_arg_ptr -> return_args.ms_ptr = null; /* and return null argument ptr */
		end;
	     end;

	     on area begin;
		code = error_table_$noalloc;
		go to FIN;
	     end;

	     ms_word_len = divide (ms_len+35, 36, 17, 0); /* compute word length from bit count */
	     allocate ms_word_array in (area_array) set (ret_ptr); /* allocate the area */
	     t_ptr = ret_ptr;			/* initialize scan pointer */
	end;

/*  */
/* chase the message thread */

	found_ms_len = 0;				/* initialize size of found message */

	blocks_in_message = 0;			/* initialize count */
	block_ptr = ms_ptr;				/* initialize block pointer */
	ms_end = "0"b;				/* initialize end of message flag */

	if delete					/* user is deleting a message */
	then mseg_hdr.mip = "1"b;			/* turn on mip bit */

	do while (^ms_end);

	     blocks_in_message =			/* increment message block count */
		blocks_in_message + 1;

	     found_ms_len = found_ms_len + fixed (ms_block_hdr.block_count, 18); /* increment message size */
	     if found_ms_len > ms_len			/* more message than block trailer specified */
	     then do;				/* error in message segment */
		reason = "message too long";
		go to BAD_SEG;
	     end;


	     if (read | incr_read | update)
	     then do;				/* return message for reading */
		copy_size =			/* set size of copy mask */
		     fixed (block_ptr -> ms_block_hdr.block_count, 18);
		if update then do;			/* updating message */
		     if found_ms_len > update_len then do; /* update only part of this block */
			copy_size = copy_size - (found_ms_len - update_len);
			ms_end = "1"b;
		     end;
		     addrel (block_ptr, size (ms_block_hdr)) -> bit_copy_mask
			= t_ptr -> bit_copy_mask;	/* overwrite */
		end;
		else				/* reading message */
		t_ptr -> bit_copy_mask =		/* copy message */
		     addrel (block_ptr, size (ms_block_hdr)) -> bit_copy_mask;
		t_ptr = addr (t_ptr -> bits (copy_size + 1)); /* increment copy ptr */
	     end;

	     if (delete)
	     then do;				/* user is deleting a message */
		bit_off = divide (fixed (rel (block_ptr), 18), block_size, 18, 0)+1; /* calculate alloc bit for block */
		if substr (mseg_hdr.alloc_bits, bit_off, 1) = "0"b /* block not in use */
		then do;
		     reason = "unprotected block";
		     go to BAD_SEG;
		end;
		else
		substr (mseg_hdr.alloc_bits, bit_off, 1) = "0"b; /* turn bit off */
		deletep = block_ptr;		/* remember block ptr to delete later */
	     end;

	     if ^ms_end then
		if block_ptr -> ms_block_hdr.f_offset = "0"b
		then do;				/* message block is last in message */
		     if found_ms_len ^= ms_len	/* found size doesn't agree with trailer */
		     then do;
			reason = "bad message length";
			go to BAD_SEG;
		     end;
		     else
		     ms_end = "1"b;			/* indicate end of message */
		end;

		else do;
		     block_ptr =			/* step the block pointer */
			ptr (block_ptr, fixed (block_ptr -> ms_block_hdr.f_offset, 18));
		end;

	     if (delete)				/* message is being deleted */
	     then do;
		copy_size = delete_size;		/* set size of copy mask */
		deletep -> bit_copy_mask = "0"b;	/* use mask to zero out block */
	     end;

	end;

/*  */
/* finish deleting message if requested */

	if (delete) then do;

	     if ms_count > 1			/* there will be a remaining message */
	     then do;

/* unthread the message */

		if (first) then do;			/* unthread first message */
		     mptr -> mseg_hdr.first_ms_offset =
			bit (fixed (next_offset, 18), 18); /* reset header offset to new first message */
		     next_tr_ptr -> ms_block_trailer.b_offset =
			"0"b;			/* reset new first message back pointer */
		end;

		if (last) then do;			/* unthread last message */
		     mptr -> mseg_hdr.last_ms_offset =
			bit (fixed (prev_offset, 18), 18); /* reset header offset to new last message */
		     prev_tr_ptr -> ms_block_trailer.f_offset =
			"0"b;			/* reset new last message forward pointer */
		end;

		if (^first) then if (^last) then do;	/* unthread mid message */
			prev_tr_ptr -> ms_block_trailer.f_offset =
			     bit (fixed (next_offset, 18), 18); /* reset forward offset of previous message */
			next_tr_ptr -> ms_block_trailer.b_offset =
			     bit (fixed (prev_offset, 18), 18); /* reset backward offset of next message */
		     end;

	     end;

	     else					/* no messages left */
	     mseg_hdr.first_ms_offset,		/* zero out hdr pointers */
		mseg_hdr.last_ms_offset = "0"b;

/* rethread the hash bucket */
	     if prev_in_bucket_ptr = null then
		hash_table.last_in_bucket (htx) = back_in_bucket_offset;
	     else prev_in_bucket_ptr -> ms_block_trailer.back_in_bucket = back_in_bucket_offset;

/* update header after deletion */

	     mptr -> mseg_hdr.space_left =		/* reset space left */
		mptr -> mseg_hdr.space_left + blocks_in_message;

	     ms_count = ms_count - 1;
	     mptr -> mseg_hdr.number_of_messages =	/* reset number of messages */
		fixed (ms_count);

	     mptr -> mseg_hdr.mip = "0"b;		/* turn off modification in progress bit */

	end;

	if read | incr_read
	then do;					/* fill in return argument structure */
	     arg_ptr = a_arg_ptr;			/* copy ptr to return_args structure */
	     return_args.ms_ptr = ret_ptr;		/* ptr to message */
	     return_args.ms_len = ms_len;		/* length of message */
	     return_args.sender_id = ms_sender_id;	/* person-project ID of message sender */
	     return_args.level = level;		/* validation level of message sender */
	     return_args.ms_id = ms_id;		/* message ID */
	     return_args.sender_authorization = authorization; /* authorization of message sender */
	     return_args.access_class = access_class;	/* access class of message */
	end;

FIN:

	a_code = code;
	return;

BAD_SEG:
	call mseg_error_v3_ (mptr, 0, proc_name, reason);
	code = error_table_$bad_segment;
	go to FIN;


     end mseg_util_v3_;
