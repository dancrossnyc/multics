/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1974 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

asin_: procedure (value) returns (float binary (27));

/*     compute the arcsine, arccosine, or arctangent of a single-precision floating-point number     */

declare	value float binary (27),
	code_ entry(fixed bin),
	(abs, atan, atand, sqrt) builtin;

	if abs(value) > 1.e0 then go to out_of_range;
	return(atan(value, sqrt(-value*value+1.e0)));

acos_:	entry(value) returns(float bin(27));
	if abs(value) > 1.e0
	then do;

out_of_range:
	     call code_(58);
	     return (0e0);
	     end;
	return(atan(sqrt(-value*value+1.e0), value));

asind_:	entry(value) returns(float bin(27));
	if abs(value) > 1.e0 then go to out_of_range;
	return(atand(value, sqrt(-value*value+1.e0)));

acosd_:	entry(value) returns(float bin(27));
	if abs(value) > 1.e0 then go to out_of_range;
	return(atand(sqrt(-value*value+1.e0), value));

atan_:	entry(value) returns(float bin(27));
	return(atan(value));

atand_:	entry(value) returns(float bin(27));
	return(atand(value));
	end;
