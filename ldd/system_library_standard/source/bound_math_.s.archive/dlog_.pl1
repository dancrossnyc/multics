/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* calls to round_ removed 07/16/73 by A. Downing */
dlog_: procedure (number) returns (float binary (63));

/*     compute the logarithm or hyperbolic arctangent of a double-precision floating-point number     */
declare (number, a, f, n, p, r) float binary (63),
         i fixed binary (17);
dcl  code_ ext entry (fixed bin),
     1 word aligned based,
     2 exponent fixed bin (7) unal;
declare	(abs, addr, log, log10, log2, sign) builtin;

	return(log(number));		/* Natural log of value. */

long:	i = addr (f) -> word.exponent;
	addr (f) -> word.exponent = 0;
if f < 0.7071067811865475244e0 then lower: do;
	     a = 0.5946035575013605334e0;
	     n = 0.75e0;
end lower; else upper: do;
	     a = 0.840896415253714543e0;
	     n = 0.25e0;
	end upper;
	r = f + a;
	f = (f - a) / r;
	n = i - n;
short:	if abs (f) < 1.e-19 then go to finis;
	a = f*f;
	f = ((((((((0.1176470588235294118e0 * a + 0.1333333333333333333e0) * a + 0.1538461538461538462e0) * a
	+ 0.1818181818181818182e0)* a + 0.2222222222222222222e0) * a + 0.2857142857142857143e0) * a
	+ 0.4e0) * a + 0.6666666666666666667e0) * a + 2.e0) * f;
finis:	return ((0.6931471805599453094e0 * n + f) * p);

dlog2_: entry (number) returns (float binary (63));
	return(log2(number));			/* Log (2) of value. */

dlog10_: entry (number) returns (float binary (63));
	return(log10(number));			/* Log (10) of value. */

dlone_: entry (number) returns (float binary (63));
	return(log(number+1.0e0));			/* Natural log of x+1. */

datanh_: entry (number) returns (float binary (63));
	p = 0.5e0;
	f = number;
	a = abs (f);
	if a < 0.1e0
	then do;
	     n = 0.0e0;
	     go to short;
	     end;
	a = a - 1.e0;
	if a >= 0.0e0 then err2: do;
	     call code_ (sign (a) + 44);
	     if a = 0.0e0 then f = 170141182.e30 * f; else f = 0.0e0;
	     return (f);
	end err2;
	f = (1.e0 + f) / (1.e0 - f);
	go to long;
     end dlog_;
