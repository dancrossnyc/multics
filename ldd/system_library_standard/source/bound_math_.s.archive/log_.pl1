/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* modified by A. Downing to remove calls to round_ */

log_: procedure (number) returns (float binary (27));

/*    compute the logarithm or hyperbolic arctangent of a single-precision floating-point number     */
declare (number, r) float binary (27),
        (a, f, n, p) float binary (63),
         i fixed binary (17);
dcl  code_ ext entry (fixed bin),
     (abs, addr, log, log10, log2, round, sign) builtin,
     1 word aligned based,
     2 exponent fixed bin (7) unal;
	return(log(number));			/* Natural log of value. */

long:	i = addr (f) -> exponent;
	addr (f) -> exponent = 0;
if f < 0.7071067811865475244e0 then lower: do;
	     a = 0.5946035575013605334e0;
	     n = 0.75e0;
end lower; else upper: do;
	     a = 0.840896415253714543e0;
	     n = 0.25e0;
	end upper;
	f = (f - a) / (f + a);
	n = i - n;
short:	if abs (f) < 0.7450580597e-8 then go to finis;
	a = f*f;
	f = (((0.2857142857142857143e0 * a + 0.4e0) * a + 0.6666666666666666667e0) * a + 2.e0) * f;
finis:	f = (0.6931471805599453094e0 * n + f) * p;
	r = round (f, 28);
	return (r);

log2_: entry (number) returns (float binary (27));
	return(log2(number));			/* log(2) of value. */

log10_: entry (number) returns (float binary (27));
	return(log10(number));			/* log(10) of value. */

lone_: entry (number) returns (float binary (27));
	return(log(number+1.0e0));			/* Natural log of x+1. */

atanh_: entry (number) returns (float binary (27));
	p = 0.5e0;
	f = number;
	a = abs (f);
	if a < 0.1e0	then do;
	     n = 0.0e0;
	     go to short;
	     end;
	a = a - 1.e0;
	if a >= 0.0e0 then err2: do;
	     call code_ (sign (a) + 42);
	     if a = 0.0e0 then f = 170141182.e30 * f; else f = 0.0e0;
	     return (f);
	end err2;
	f = (1.e0 + f) / (1.e0 - f);
	go to long;
     end log_;
