/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

dsinh_: procedure (number) returns (float binary (63));

/*      compute the hyperbolic sine or cosine of a double-precision floating-point number      */
declare (number, b, n, p, r) float binary (63),
	(abs, exp) builtin;
dcl  code_ ext entry (fixed bin);
	n = number;
	r = abs (n);
if r >= 0.7135236e0 then large: do;
	     p = -1.e0;
	     go to sinhs;
	end large;
	if r < 1.e-10 then go to negate;
	b = r*r;
	r = ((((((((0.2811457254345520763e-14 * b + 0.7647163731819816476e-12) * b + 0.1605904383682161460e-9) * b
	+ 0.2505210838544171878e-7) * b + 0.2755731922398589065e-5) * b + 0.1984126984126984127e-3) * b
	+ 0.8333333333333333333e-2) * b + 0.1666666666666666667e0) * b + 1.e0) * n;
	go to finis;
dcosh_: entry (number) returns (float binary (63));
	n, r = abs (number);
	p = 1.e0;
sinhs: if r > 88.028e0 then err: do;
	     call code_ (50);
	     r = 170141182.e30;
	     go to negate;
	end err;
	r = exp (r);
	r = (p/r + r) * 0.5e0;
negate:	if n < 0.0e0 then r = -r;
finis:	return (r);
     end dsinh_;
