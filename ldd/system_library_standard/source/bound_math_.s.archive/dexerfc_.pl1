/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

dexerfc_: procedure (number) returns (float binary (63));

/*        compute the special error function of a double-precision floating-point number        */
declare (number, f, n, hn, dh, dl, dm, ph, rh, rl, rm, sh, sl, sm, th, tl, tm) float binary (63),
	(abs, exp, erfc) builtin;
dcl  code_ ext entry (fixed bin);
	n = number + 0.0e0;
if n < -9.30630096e0 then err: do;
	     call code_ (66);
	     return (170141182.e30);
	end err;
	f = abs (n);
	if f < 2.5e0 then th = erfc (n) * exp (f*f);
else large: do;
	     rm, th = 0.5e0 / f;
	     if f >= 1.e11 then go to done;
	     ph = f;
	     rl = 0.0e0;
	     hn = 0.5e0;
	     th = -1.e10;
loop:	     dm = hn / ph;
	     ph = dm + f;
	     rh = (rl * dm + rm * f) / ph;
	     dl = rl - rm;
	     dh = rh - rm;
	     dm = dh + dl;
	     if dm = 0.0e0 then go to dvc1;
	     sh = (dh/dm) * dl + rm;
	     if hn < 1.25e0 then go to step;
	     dl = sl - sm;
	     dh = sh - sm;
	     dm = dh + dl;
	     if dm = 0.0e0 then go to dvc2;
	     th = (dh/dm) * dl + sm;
	     if th = tm then go to done;
	     if th = tl then go to done;
step:	     hn = hn + 0.5e0;
	     rl = rm;
	     sl = sm;
	     tl = tm;
	     rm = rh;
	     sm = sh;
	     tm = th;
	     go to loop;
dvc1:	     sh = rh;
dvc2:	     th = sh;
done:	     th = 1.128379167095512574e0 * th;
	     if n < 0.0e0 then th = 2.e0 * exp (f*f) - th;
	end large;
	return (th);
     end dexerfc_;
