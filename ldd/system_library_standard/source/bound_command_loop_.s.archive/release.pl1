/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


release: rl:	proc;

/* This procedure implements the start and release commands. It exists so that
   the code involved does not have to be in the main body of listen_ */

/* Initially coded in May 1972 by V. Voydock as part of the fast command loop */
/* Fixed to reject extra arguments 06/30/82 S. Herbst */
/* Changed to use listener_info.incl.pl1 12/11/84 Steve Herbst */


dcl	ioa_ ext entry options(variable);

dcl	temp_ptr ptr;

dcl	arg_count fixed bin;
dcl	arg_length fixed bin (21);
dcl	(code,
	 error_table_$badopt external
					) fixed bin(35);

dcl	argument char(arg_length) based(temp_ptr);

dcl	cu_$arg_count entry (fixed bin);
dcl	cu_$arg_ptr entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl	(com_err_, com_err_$suppress_name) ext entry options(variable);

dcl	(null, substr) builtin;
%page;
/* If there is no frame to release to, print message and return. */
/*
	if listen_static_data_.control_ptr -> based_listener_control.prev_ptr=null() then do;
	     call ioa_("""release"" ignored.");
	     return;
	end;
*/

/* See if we are to release to "top". That is "rl -all" was typed */

	call cu_$arg_count (arg_count);
	if arg_count > 1 then do;
RL_USAGE:	     call com_err_$suppress_name (0, "release", "Usage:  release {-control_arg}");
	     return;
	end;

	call cu_$arg_ptr(1,temp_ptr,arg_length,code);
	if code=0 then
	     if (argument = "-all") | (argument = "-a") then
		go to listen_static_data_.control_ptr -> based_listener_control.release_all;
	     else if substr (argument, 1, 1) = "-" then do;
		call com_err_ (error_table_$badopt, "release", argument);
		return;
	     end;
	     else go to RL_USAGE;

/* Set the release switch */

	go to listen_static_data_.control_ptr -> based_listener_control.release;
%page;
start: sr: entry;

/* If there is no frame to "start" to, print message and return */

	if listen_static_data_.control_ptr -> based_listener_control.release =
	     listen_static_data_.control_ptr -> based_listener_control.new_release then do;
	     call ioa_("""start"" ignored.");
	     return;
	end;

/* See if we are to not restore io attachments (that is, "start -no_restore" was typed) */

	call cu_$arg_count (arg_count);
	if arg_count > 1 then do;
SR_USAGE:	     call com_err_$suppress_name (0, "start", "Usage:  start {-control_arg}");
	     return;
	end;

	call cu_$arg_ptr(1,temp_ptr,arg_length,code);
	if code=0 then
	     if (argument="-no_restore") | (argument="-nr") then
		listen_static_data_.control_ptr -> based_listener_control.dont_restore_sw = "1"b;
	     else if substr (argument, 1, 1) = "-" then do;
		call com_err_ (error_table_$badopt, "start", argument);
		return;
	     end;
	     else go to SR_USAGE;

/* Set the start switch */

	go to listen_static_data_.control_ptr -> based_listener_control.start;
%page;
%include listener_info;


end release;
