/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(2016-01-15,Swenson), approve(2016-01-15,MCR10003):
     Fix to support 4-character time zone abbreviations.
                                                   END HISTORY COMMENTS */

/* format: style4,delnl,insnl,ifthenstmt,indnoniterend */
print_ready_message_:
     procedure (flags) options (separate_static);

/* The print_ready_message_ procedure is the standard system "ready procedure".
   It prints the ready message and then returns */

/* Initially coded as an internal procedure of the listener by R. C. Daley in December 1969 */
/* Converted to an external procedure as part of the introduction of cu_$ready_proc by
   V. L. Voydock in June 1971 */
/* Modified for 6180 to display virtual cpu, memory units, and demand paging by J. Keller, 4/11/73 */
/* Modified to print command level and frame numbers by M. Weaver  9/73 */
/* Steve Herbst 06/25/79 changed msg to: r hh:mm .vcpu dpages {level n} */
/* Modified April 1980 by C. Hornig for per-process time zones */

dcl  rdy_string varying char (48) aligned;
dcl  out_string char (48) aligned;

dcl  1 time_picture unaligned,
       2 r char (2),
       2 hours picture "99",
       2 colon char (1),
       2 minutes picture "99",
       2 sp char (1);
dcl  vcpu picture "(5)-9v.999";
dcl  dpages picture "(8)z9";
dcl  level picture "(2)z9";
dcl  NLNL char (2) int static options (constant) init ("

");

dcl  1 flags aligned,
       2 ready_sw bit (1) unaligned,
       2 pad bit (35) unaligned;

dcl  (hour, minute) fixed bin;
dcl  cpu fixed bin (71);
dcl  (ec, npages) fixed bin (35);
dcl  (frame_no, level_no) fixed bin;

dcl  iox_$user_output ptr ext;

dcl  (addr, addrel, clock, length, ltrim, string) builtin;

dcl  decode_clock_value_$time
	entry (fixed bin (71), fixed bin, fixed bin, fixed bin, fixed bin (71), char (4), fixed bin (35));
dcl  hcs_$get_process_usage entry (ptr, fixed bin (35));
dcl  iox_$put_chars entry (ptr, ptr, fixed bin, fixed bin (35));
dcl  listen_$get_level entry (fixed bin, fixed bin);

dcl  1 data internal static,
       2 wanted fixed bin initial (5),
       2 can_get fixed bin,
       2 cpu_usage fixed bin (71) init (0),
       2 memory fixed bin (71) init (0),
       2 demand_page fixed bin (35) init (0),
       2 pre_page fixed bin (35) init (0),
       2 virtual_cpu fixed bin (71) init (0);

/**/
/* If ready messages are turned off, just return */

	if ^flags.ready_sw then return;

	call decode_clock_value_$time (clock (), hour, minute, (0), (0), (""), ec);
	string (time_picture) = "r 00:00 ";
	time_picture.hours = hour;
	time_picture.minutes = minute;

	cpu = data.virtual_cpu;			/* pick up virtual time, mem units, and paging */
	npages = data.demand_page;
	call hcs_$get_process_usage (addr (data), ec);
	vcpu = (data.virtual_cpu - cpu) * 1e-6;		/* virtual cpu in seconds */
	dpages = data.demand_page - npages;		/* pages demand paged since last ready */
	call listen_$get_level (level_no, frame_no);	/* find command level */

	rdy_string = string (time_picture);
	rdy_string = rdy_string || ltrim (vcpu);
	rdy_string = rdy_string || " ";
	rdy_string = rdy_string || ltrim (dpages);
	if level_no > 1 then do;
	     rdy_string = rdy_string || " level ";
	     level = level_no;
	     rdy_string = rdy_string || ltrim (level);
	     end;
	rdy_string = rdy_string || NLNL;
	substr (out_string, 1, length (rdy_string)) = rdy_string;

	call iox_$put_chars (iox_$user_output, addr (out_string), length (rdy_string), ec);

	return;

     end print_ready_message_;
