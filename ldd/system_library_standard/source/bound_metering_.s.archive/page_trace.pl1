/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
%;
/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* originally coded by Steve Webber  May 1971.
   Modified by Steve Webber March 1974.
   Modified by John Gintell June 1974 for MCR  598
   Modified by John Gintell May 1975 for MCR's 957 and 970,
   Modified by John Gintell Oct 1975 for MCR 1342.
   Modified 760506 by PG for MCRs 1832 (fix bug in link fault printing) and 1833 (add ctl args).
   Modified Feb 1979 by John Gintell for  MCR 3663 (fix bug in print_trace_entry).
   Modified June 1981 by J. Bongiovanni to fix bug in -from processing
   Modified January 1982 by J. Bongiovanni for extended page fault type
*/

page_trace: pgt: proc;

/* automatic */

dcl (header, longsw, print_pagefaults, marker_seen, stop_at_marker, count_given) bit (1) aligned,
    (dp, eptr, tp) ptr,
     ring_no fixed bin (3),
    (from, to) char (4) aligned,
     string char (20),
    offset fixed bin(18),
    (next, total, count, i, tc, long, fmtx, start_index) fixed bin,
     code fixed bin (35),
     data_area (1024) fixed bin,
    (time, type, seg_no, page_no, hcscnt) fixed bin,
     dirname char (168),
     ename char (32),
     proc_name char (32),
     proc_offset fixed bin (18),
     proc_segno fixed bin,
     comp_name char (8),
     entry_name char (32),
     switch_ptr ptr,				/* pointer to I/O switch */
     ftime float bin;

/* based */

dcl  based_char_4 char (4) aligned based,
     packedptr ptr based unal,
     targ char (tc) based (tp);


/* internal static */

dcl  output_format (0:11) char (50) varying aligned internal static options (constant) initial (
     "^20x^s^8.2f^3o^6o^5o^2x^s^a",			/* 0 - short page fault */
     "^20x^s^8.2f^3o^6o^5o^2x^a>^a",			/* 1 - long page fault */
     "^20a^8.2f^3x^s^6o^5x^s^2x^s^a",			/* 2 - short (seg/bound) fault */
     "^20a^8.2f^3x^s^6o^5x^s^2x^a>^a",			/* 3 - long (seg/bound) fault */
     "^20a^8.2f^3x^s^6o^5x^s^2x^s^a$^a",		/* 4 - short end linkage fault */
     "^20a^8.2f^3x^s^6o^5x^s^2x^a>^a$^a",		/* 5 - long end linkage fault */
     "^20a^8.2f^3x^s^6x^s^5x^s^2x^s^a",			/* 6 - signal generated/user marker/etc */
     "^20a^8.2f",					/* 7 - make ptr/signal restarted/reschedule */
     "^20a^8.2f^3x^s^6o^5x^s^2x^s^a^a|^o",		/* 8 - short start linkage fault */
     "^20a^8.2f^3x^s^6o^5x^s^2x^a>^a^a|^o",		/* 9 - long  start linkage fault */
     "^20x^s^8.2f^3x^s^6o^5o^2x^s^a",			/* 10 - short page fault (extended) */
     "^20x^s^8.2f^3x^s^6o^5o^2x^a>^a^2s^/^46xby ^a|^o");	/* 11 - long page fault(extended)  */

/* external static */

dcl (active_all_rings_data_$hcscnt fixed bin,
     iox_$user_output ptr) external static;
dcl  error_table_$badopt fixed bin (35) external static;
dcl  error_table_$inconsistent fixed bin (35) external static;

/* entries */

dcl  hcs_$get_page_trace entry (ptr),
     hcs_$fs_get_path_name entry (ptr, char(*), fixed bin, char(*), fixed bin(35)),
     ioa_$ioa_switch entry options (variable),
     iox_$look_iocb entry (char (*), ptr, fixed bin (35)),
     get_entry_name_ entry (ptr, char (*), fixed bin, char (8), fixed bin (35)),
     com_err_ entry options (variable),
     cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35)),
     cu_$arg_count entry returns (fixed bin),
     interpret_bind_map_ entry (ptr, char(*), fixed bin(18), fixed bin(35)),
     ring0_get_$name entry (char(*), char(*), ptr, fixed bin (35));

/* builtins */

dcl (addr, baseno, baseptr, rel, binary, convert, substr, unspec) builtin;

/* conditions */

dcl (conversion, not_in_read_bracket) condition;

/* include files */

%include sys_trace;
%include trace_types;

/*  */

	dp = addr (data_area);			/* get a pointer to buffer */
	call hcs_$get_page_trace (dp);		/* copy the trace information from ring 0 */

	longsw = ""b;				/* default is short mode */
	count_given = ""b;
	print_pagefaults = "1"b;			/* default is to print page faults */
	stop_at_marker = ""b;			/* default is to print until end */
	from = "";				/* default is no from argument */
	to = "";					/* default is no to argument */
	marker_seen = "0"b;				/* haven't seen from marker yet. */

	hcscnt = active_all_rings_data_$hcscnt;
	switch_ptr = iox_$user_output;

	next =  dp -> trace.next_free;		/* get index to last used cell */
	count, total = dp -> trace.last_available;	/* get size of trace array */

	do i = 1 to cu_$arg_count ();
	     call cu_$arg_ptr (i, tp, tc, code);	/* pick up the argument (if it's given) */
	     if targ = "-long" | targ = "-lg" then longsw = "1"b;
	     else if targ = "-no_header" | targ = "-nhe" then header = "0"b;
	     else if targ = "-output_switch" | targ = "-os" then do;
		i = i + 1;
		call cu_$arg_ptr (i, tp, tc, code);
		if code ^= 0 then do;
		     call com_err_ (code, "page_trace", "-output_switch must be followed by a switch name.");
		     return;
		end;
		call iox_$look_iocb (targ, switch_ptr, code);
		if code ^= 0 then do;
		     call com_err_ (code, "page_trace", "Switch ^a not found.", targ);
		     return;
		end;
	     end;
	     else if targ = "-from" | targ = "-fm" then do;
		i = i + 1;
		call cu_$arg_ptr (i, tp, tc, code);
		if code ^= 0 then do;
		     call com_err_ (code, "page_trace", "-from must be followed by a character string.");
		     return;
		end;
		from = targ;
	     end;
	     else if targ = "-to" then do;
		i = i + 1;
		call cu_$arg_ptr (i, tp, tc, code);
		if code ^= 0 then do;
		     call com_err_ (code, "page_trace", "-to must be followed by a character string.");
		     return;
		end;
		stop_at_marker = "1"b;
		to = targ;
	     end;
	     else if targ = "-npf" | targ = "-no_pagefaults" then print_pagefaults = ""b;
	     else if substr (targ, 1, 1) = "-" then do;	/* mispelled ctl arg */
		call com_err_ (error_table_$badopt, "page_trace", "^a", targ);
		return;
	     end;
	     else do;
		count_given = "1"b;
		on conversion go to bad_count;	/* trap bad numbers */
		count = convert (count, targ);	/* convert args to binary */
		revert conversion;			/* make handler go away */
		if count <= 0 | count > total then do;
bad_count:
		     call com_err_ (0, "page_trace", "Invalid count value given, ^a", targ);
		     return;
		end;
	     end;
	end;

	if count_given & (from ^= "" | to ^= "") then do;
	     call com_err_ (error_table_$inconsistent, "page_trace",
		"count and ^[-from ^]^[-to ^]", (from ^= ""), (to ^= ""));
	     return;
	end;

	if header
	then call ioa_$ioa_switch (switch_ptr, "^/^-^-Elapsed^/     Trace Type    Time (ms) Ring Segno Page^-Segment^/");

	if count > next
	then start_index = total + next - count + 1;
	else start_index = next - count + 1;

	if from ^= ""				/* -from specified? */
	then if count > next
	     then do i = start_index to total, 1 to next;
		trace_ptr = addr (dp -> trace.data (i));
		if trace_ptr -> page_trace_entry.type = marker_type
		then if trace_ptr -> based_char_4 = from
		     then do;
			start_index = i;
			go to scan;
		     end;
		count = count - 1;
	     end;
	     else do i = start_index to next;
		trace_ptr = addr (dp -> trace.data (i));
		if trace_ptr -> page_trace_entry.type = marker_type
		then if trace_ptr -> based_char_4 = from
		     then do;
			start_index = i;
			go to scan;
		     end;
		count = count - 1;
	     end;

scan:
	if count > next
	then do i = start_index to total, 1 to next;	/* wrap-around ? */
	     trace_ptr = addr (dp -> trace.data (i));	/* get pointer to entry */
	     call output;
	     if stop_at_marker
	     then if trace_ptr -> page_trace_entry.type = marker_type
		then if trace_ptr -> based_char_4 = to
		     then go to done;
	end;
	else do i = start_index to next;		/* no wrap-around, just scan the last 'count' */
	     trace_ptr = addr (dp -> trace.data (i));	/* get pointer to entry */
	     call output;
	     if stop_at_marker
	     then if trace_ptr -> page_trace_entry.type = marker_type
		then if trace_ptr -> based_char_4 = to
		     then go to done;
	end;

done:
	call ioa_$ioa_switch (switch_ptr, "");
	return;

output:	proc;

	     if unspec (trace_ptr -> page_trace_entry) = "0"b
		then return;

	     type = trace_ptr -> page_trace_entry.type;
	     time = trace_ptr -> page_trace_entry.time;
	     if time = 65535 then ftime = 0e0;
	     else ftime = time*64/1e3;		/* convert the time to milli-seconds */

	     if type = page_fault_type | type = seg_fault_start
		| type = seg_fault_end
		| type = boundfault_start | type = boundfault_end
		then seg_no = trace_ptr -> page_trace_entry.segment_number;

	     else if type = extended_page_fault_type
		then seg_no = binary (trace_ptr -> extended_page_trace_entry.tsr_segno_1 
		|| trace_ptr -> extended_page_trace_entry.tsr_segno_2, 12);

	     else if type = linkage_fault_end
	     then do;
		eptr = trace_ptr -> packedptr;
		call get_entry_name_ (eptr, entry_name, seg_no, comp_name, code);
		if entry_name = "" then entry_name = "0";
	     end;

	     else if type = linkage_fault_start then do;
		eptr = trace_ptr->packedptr;
		offset = binary(rel(eptr),18);
		entry_name = "";
		on not_in_read_bracket goto ISGATE;
		call interpret_bind_map_(eptr,entry_name,offset,code );
		revert not_in_read_bracket;
ISGATE:
		if entry_name ^= "" then entry_name = ": " || entry_name;
		seg_no = binary(baseno(eptr),18);
	     end;

	     else seg_no = -1;

	     if seg_no ^= -1 then call get_segment_name (seg_no, dirname, ename);
	     else dirname, ename = "";
	     


	     page_no = 0;
	     ring_no = 0;
	     proc_name = "";
	     proc_segno = 0;
	     proc_offset = 0;
	     long = binary (longsw, 1);

	     if type = page_fault_type then do;
		if ^print_pagefaults then return;
		page_no = trace_ptr -> page_trace_entry.page_number;
		ring_no = trace_ptr -> page_trace_entry.ring;
		fmtx = 0 + long;
	     end;
	     else if type = extended_page_fault_type then do;
		page_no = trace_ptr -> extended_page_trace_entry.tsr_pageno;
		proc_segno = trace_ptr -> extended_page_trace_entry.psr_segno;
		proc_offset = trace_ptr -> extended_page_trace_entry.psr_offset;
		call get_segment_name (proc_segno, (""), proc_name);
		fmtx = 10 + long;
	     end;
	     else if type = seg_fault_start then do;
		string = "SEG-FAULT-START";
		fmtx = 2 + long;
	     end;
	     else if type = seg_fault_end then do;
		string = "SEG-FAULT-END";
		fmtx = 2 + long;
	     end;
	     else if type = boundfault_start then do;
		string = "BOUND-FAULT-START";
		fmtx = 2 + long;
	     end;
	     else if type = boundfault_end then do;
		string = "BOUND-FAULT-END";
		fmtx = 2 + long;
	     end;
	     else if type = linkage_fault_start then do;
		if seg_no = 0 then do;
		     string = "MAKE-PTR-CALL";
		     fmtx = 7;
		end;
		else do;
		     string = "LINKAGE FAULT BY";
		     fmtx = 8 + long;
		end;
	     end;
	     else if type = linkage_fault_end then do;
		string = "RESOLVED LINK TO";
		fmtx = 4 + long;
	     end;
	     else if type = signaller_type then do;
		string = "SIGNAL GENERATED";
		fmtx = 6;
		ename = trace_ptr -> based_char_4;
	     end;
	     else if type = restart_fault_type then do;
		string = "SIGNAL RESTARTED";
		fmtx = 7;
	     end;
	     else if type = reschedule_type then do;
		string = "RESCHEDULING";
		fmtx = 7;
	     end;
	     else if type = marker_type then do;
		string = "USER MARKER";
		fmtx = 6;
		ename = trace_ptr -> based_char_4;
	     end;
	     else do;
		string = "UNRECOGNIZABLE ENTRY";
		fmtx = 6;
		ename = trace_ptr -> based_char_4;
	     end;

	     call ioa_$ioa_switch (switch_ptr, output_format (fmtx),
		string, ftime, ring_no, seg_no, page_no, dirname, ename,
		entry_name, offset, proc_name, proc_offset);

	     return;
	end;
%page;
print_trace_entry: entry (a_trace_ptr, a_switch_ptr, a_longsw);

/*	internal interface provided for cumulative_page_trace.
   *	It interprets and prints one entry from the system trace array.
*/

dcl  a_trace_ptr ptr;				/* pointer to entry in system trace array */
dcl  a_switch_ptr ptr;				/* switch_ptr onto which output is placed */
dcl  a_longsw bit (1) aligned;			/* set to "1"b if -long was given */

	hcscnt = active_all_rings_data_$hcscnt;
	switch_ptr = a_switch_ptr;
	trace_ptr = a_trace_ptr;
	longsw = a_longsw;
	print_pagefaults = "1"b;

	call output;

	return;

%page;
get_segment_name:
proc (segment_number, dname, ename);

dcl segment_number fixed bin;
dcl dname char (*);
dcl ename char (*);

dcl temp fixed bin;

	     if segment_number >= active_all_rings_data_$hcscnt then do; /* if user initiated segment ... */
		call hcs_$fs_get_path_name (baseptr (segment_number), dname, temp, ename, code);
		if code ^= 0 then do;
		     dname = "";
		     ename = "*** unknown segment ***";
		end;
		else if ^longsw then if ename = "" then ename = ">"; /* root */
	     end;
	     else do;
		call ring0_get_$name (dname, ename, baseptr (segment_number), code);
		dname = "";
	     end;

end get_segment_name;

end page_trace;
