/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* format: style4,delnl,insnl,indattr,ifthen,dclind9 */
tdcm_attach_:
     procedure (arg_tsegp, arg_ecode);

/*	This program implements the entry point tdcm_$tdcm_attach.
   *	Created on 02/20/75 by Bill Silver.
   *	Modified 7/79 by R.J.C. Kissel to use version 1 tseg.
   *
   *	This program is called by tdcm_ to attach a tape drive.  No concept of
   *	privilege is recognized.  RCP will determine the privilege of the caller.
   *	Since at this time we do not know the name of the tape reel the caller
   *	wants mounted we will not be able to call RCP to make the attachment.
   *	The actual attachment will be made by tdcm_$tdcm_message_.  We will use the
   *	first tseg buffer for a temporary IOI workspace.  We will return a 0 in the
   *	tseg drive_number field.  Thus the tseg will be in an inconsistent state
   *	until the first call to tdcm_$tdcm_message.
*/

dcl      arg_ecode		  fixed bin (35);		/* (O) Standard error_table_ code. */
dcl      arg_tsegp		  ptr;			/* (I) Pointer to user's tseg. */

dcl      ecode		  fixed bin (35);		/* Temporary error code. */

dcl      init_flag		  bit (1) internal static init ("0"b);

dcl      based_ws_info	  (size (ws_info)) bit (36) based (ws_ptr);

dcl      (addr, size, string)	  builtin;

dcl      default_buf_size	  fixed bin /* tdcm_ I/O buffer size.  Room for 2 MST records. */ internal static
			  init (2080);

dcl      convert_ipc_code_	  entry (fixed bin (35));
dcl      hcs_$assign_channel	  entry (fixed bin (71), fixed bin (35));
dcl      ipc_$create_ev_chn	  entry (fixed bin (71), fixed bin (35));
dcl      tdcm_detach_	  entry (ptr, fixed bin (35));
dcl      error_table_$unimplemented_version
			  fixed bin (35) external;	/*						*/
%include tseg;
/**/
%include tdcm_info;
/**/
%include ioi_stat;
/**/
	tsegp = arg_tsegp;				/* Pick up argument. */

	if tseg.version_num ^= tseg_version_2 then do;
	     arg_ecode = error_table_$unimplemented_version;
	     return;
	end;

	tseg.ws_segno = "0"b;			/* We don't have a real IOI workspace yet. */
	ws_ptr = addr (tseg.buffer (1));		/* Use first buffer for temp workspace. */
	string (based_ws_info) = "0"b;		/* Initialize all info fields to zero. */

/*	We must set up three event channels.
   *	1.  A user event channel - found in the tseg.
   *	2.  A fast event channel - used to wait for status.
   *	3.  A call event channel - used to handle special interrupts.
*/
	ws.info.wait_list.num_ev_chans = 1;		/* Set up the wait list count. */
	ws.info.user_echan = tseg.ev_chan;		/* Get event channel ID from tseg. */

/* Created our main (fast) event channel. */
	call hcs_$assign_channel (ws.info.fast_echan, ecode);
	if ecode ^= 0				/* Did we get a fast channel? */
	then do;					/* No, get regular channel. */
	     call ipc_$create_ev_chn (ws.info.fast_echan, ecode);
	     if ecode ^= 0 then do;
		call convert_ipc_code_ (ecode);
		goto RETURN;
	     end;
	end;
	ws.info.detachx = 1;			/* Note that fast channel was created OK. */
	ws.info.init_echan = ws.info.fast_echan;	/* Start out using the fast channel. */

/* Create a regular event channel for special interrupts. */
	call ipc_$create_ev_chn (ws.info.special_echan, ecode);
	if ecode ^= 0				/* When drive attached it becomes a call channel. */
	then do;
	     call convert_ipc_code_ (ecode);
	     goto RETURN;
	end;
	ws.info.detachx = 2;			/* Note that this channel was created OK. */

/*	Now initialize some fields in the temporary workspace.  They will
   *	be copied into the real workspace when we get one.
*/
	ws.info.buf_size = default_buf_size;		/* Set up size of tdcm_ I/O buffer. */
	if tseg.tracks = 1				/* Save requested track type. */
	then ws.info.tracks = 7;			/* 1 => seven track. */
	else ws.info.tracks = 9;			/* Otherwise it is nine track. */
	tseg.drive_name = "";			/* Don't let caller think it has a real drive. */

RETURN:
	arg_ecode = ecode;
	if ecode ^= 0				/* Was there any error? */
	then call tdcm_detach_ (ws_ptr, ecode);

     end tdcm_attach_;
