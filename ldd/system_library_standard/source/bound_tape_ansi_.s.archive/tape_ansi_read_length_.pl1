/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */





tape_ansi_read_length_: procedure (iocbP, reclen, code);	/* iox_$read_length entry for tape_ansi_ IO Module */


%include iocb;

%include tape_ansi_cseg;


/* arguments */
dcl  iocbP ptr,					/* pointer to iocb */
     reclen fixed bin (21),				/* returned record length */

     code fixed bin (35);				/* returned error code */

/* external procedures */
dcl  tape_ansi_lrec_io_$read_record ext entry (ptr, ptr, fixed bin (21), fixed bin (21), fixed bin (35)),
     hcs_$make_seg ext entry (char (*), char (*), char (*), fixed bin (5), ptr, fixed bin (35)),
     tape_ansi_ibm_lrec_io_$read_record ext entry (ptr, ptr, fixed bin (21), fixed bin (21), fixed bin (35));

/* external static */
dcl  sys_info$max_seg_size fixed bin (35) external static;

/* error codes */
dcl (error_table_$fatal_error, error_table_$file_busy, error_table_$tape_error, error_table_$invalid_cseg) fixed bin (35) external static;

/* internal static */
dcl  nc_wanted fixed bin (21) internal static;		/* maximum record length */

/* builtin functions */
dcl (null, prec, substr) builtin;

/* conditions */
dcl  cleanup condition;

	cP = iocbP -> iocb.actual_iocb_ptr -> iocb.attach_data_ptr; /* set pointer to control segment */

	if cseg.invalid then do;			/* is control segment invalid? */
	     code = error_table_$invalid_cseg;
	     return;
	end;

	if cseg.file_lock then do;			/* is file in use? */
	     code = error_table_$file_busy;
	     return;
	end;
	else do;
	     on cleanup begin;
		cseg.file_lock = "0"b;
		cseg.code = error_table_$fatal_error;
	     end;
	     cseg.file_lock = "1"b;
	end;

	if cseg.rlP = null then do;			/* read length segment not known */
	     call hcs_$make_seg ("", cseg.module || vl (1).volname || "_.rl", "", 01011b, cseg.rlP, code);
	     if cseg.rlP = null then do;		/* shouldn't be - serious trouble */
		cseg.code = error_table_$fatal_error;
		go to exit;
	     end;
	     else do;				/* all is well */
		nc_wanted = prec (sys_info$max_seg_size * 4, 21); /* compute maximum record length */
		go to none;			/* nothing in segment - fill it */
	     end;
	end;

	if cseg.rlN = -1 then do;			/* get a record if none in read length segment */
none:	     cseg.file_lock = "0"b;			/* unlock so lrec_io_ call will work */
	     if cseg.standard = 1 then call tape_ansi_lrec_io_$read_record (iocbP, cseg.rlP, nc_wanted, cseg.rlN, code);
	     else call tape_ansi_ibm_lrec_io_$read_record (iocbP, cseg.rlP, nc_wanted, cseg.rlN, code);
	     cseg.file_lock = "1"b;			/* avoid conflicts */
	     if code = 0 | code = error_table_$tape_error then /* record hasn't been read */
		cseg.lrec.reccnt = cseg.lrec.reccnt - 1; /* yet by the user */
	     else do;				/* error or event */
		reclen = 0;			/* return 0 record length */
		cseg.rlN = -1;			/* insure cseg.rlN -> empty */
		go to exit;			/* cseg.lrec.reccnt wasn't incremented */
	     end;
	end;
	else code = 0;				/* no lrec_io_ call, so 0 error code */

	reclen = cseg.rlN;				/* return record length; from actual lrec_io_ call... */
						/* or, from previous read length operation            */
						/* note that read_length does _n_o_t change position     */
						/* so that multiple read_length calls without inter-  */
						/* vening read_record or position calls all refer to  */
						/* the same record.				    */
exit:	cseg.file_lock = "0"b;
	return;

     end tape_ansi_read_length_;
