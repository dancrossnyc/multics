/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


tdcm_detach_:  procedure  (arg_ws_ptr, arg_ecode);

/*	This program implements the tdcm_$tdcm_detach entry point.
*	Created on 02/20/75 by Bill Silver.
*
*	This program is called to detach the specified tape drive.
*	Unless the current disposition specifies that we should retain
*	this tape drive assignmnet we will unassign as well as detach
*	this tape drive.
*/

/*		ARGUMENT  DATA		*/

dcl	arg_ecode		fixed bin(35);	/* (O) Standard error_table_ code. */
dcl	arg_ws_ptr	ptr;		/* (I) Pointer to IOI workspace segment. */


/*		AUTOMATIC  DATA		*/

dcl	drive_num		fixed bin;	/* Number of the current drive. */
dcl	ecode		fixed bin(35);	/* Temporary error code. */
dcl	save_ecode	fixed bin;	/* Used to save ecode. */
dcl	special_echan	fixed bin(71);	/* Copied from workspace. */
dcl	fast_echan	fixed bin(71);


/*		EXTERNAL ENTRIES CALLED	*/

dcl     (	addr, size, string )  builtin;

dcl	convert_ipc_code_	entry  (fixed bin(35));
dcl	ipc_$delete_ev_chn	entry  (fixed bin(71), fixed bin(35));
dcl	rcp_$detach	entry  (bit(36) aligned, bit(*) aligned, fixed bin, char(*), fixed bin(35));
/*	*/
%include tdcm_info;
/*	*/
%include ioi_stat;
/*	*/
/*	Begin tdcm_detach_.pl1
*/
	ws_ptr = arg_ws_ptr;		/* Copy arguments. */

	special_echan = ws.info.special_echan;	/* Copy before workspace deleted. */
	fast_echan = ws.info.fast_echan;
	save_ecode = 0;

	goto DETACH(ws.info.detachx);		/* Go undo whatever has been done. */

DETACH(3):				/* Tape drive has been attached. */
	call rcp_$detach (ws.info.rcp_id, ws.info.disposition, ws.info.error_count, "", ecode);
	if   ecode ^= 0
	     then if   save_ecode = 0
		     then save_ecode = ecode;

DETACH(2):				/* Special event channel was created. */
	call ipc_$delete_ev_chn (special_echan, ecode);
	if   ecode ^= 0
	     then do;
		call convert_ipc_code_ (ecode);
		if   save_ecode = 0
		     then save_ecode = ecode;
	     end;

DETACH(1):				/* Fast event channel was created. */
	call ipc_$delete_ev_chn (fast_echan, ecode);
	if   ecode ^= 0
	     then do;
		call convert_ipc_code_ (ecode);
		if   save_ecode = 0
	 	     then save_ecode = ecode;
	     end;

DETACH(0):
	arg_ecode = save_ecode;		/* Return first error code. */

	end  tdcm_detach_;
