/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */

/*                                                        */
/* 1) Modified: 06/29/79 by Rick Riley                    */
/*              (modify nonlabeled volume reporting)      */

tape_ansi_detach_: procedure (iocbP, code);		/* iox_$tape_ansi_detach_iocb entry point */

dcl  iocbP ptr,					/* pointer to iocb */
     code fixed bin (35);				/* error code */


%include iocb;

%include tape_ansi_cseg;

%include tape_ansi_fd;


/* automatic storage */
dcl  i fixed bin,					/* temporary volume chain index */
    (j, k) fixed bin,				/* message temporaries */
     mask bit (36) aligned,				/* ips interrupt mask */
     string char (96) varying;			/* volume set string */

/* builtin functions and conditions */
dcl (addr, max, null) builtin,
    (any_other, cleanup) condition;

/* error codes */
dcl (error_table_$file_busy,
     error_table_$unable_to_do_io) ext static fixed bin (35);

/* external procedures */
dcl  continue_to_signal_ ext entry (fixed bin (35)),
     hcs_$delentry_seg ext entry (ptr, fixed bin (35)),
     hcs_$reset_ips_mask ext entry (bit (36) aligned, bit (36) aligned),
     hcs_$set_ips_mask ext entry (bit (36) aligned, bit (36) aligned),
     hcs_$terminate_noname ext entry (ptr, fixed bin (35)),
     hcs_$truncate_seg ext entry (ptr, fixed bin, fixed bin (35)),
     ioa_ ext entry options (variable),
     iox_$propagate ext entry (ptr),
     tape_ansi_mount_cntl_$free ext entry (ptr, fixed bin, fixed bin (35)),
     terminate_process_ ext entry (char (*), ptr);

	code = 0;

	cP = iocbP -> iocb.actual_iocb_ptr -> iocb.attach_data_ptr; /* get pointer to control segment */

	if cseg.file_lock then do;			/* file in use? */
	     code = error_table_$file_busy;
	     return;
	end;
	else do;
	     on cleanup begin;
		if cP = null then go to force_detach;	/* no more cseg - detach iocb */
		else go to action (1);		/* eliminate drives and volumes */
	     end;
	     cseg.file_lock = "1"b;
	end;

	go to action (cseg.retain);			/* perform appropriate detach retention */

action (0):					/* CODE WHEN rcp_ IS USED */
action (1):					/* retain none */
	cseg.write_ring = "0"b;			/* no rings */
	cseg.protect = "0"b;			/* no hardware protection */
	do i = 1 to cseg.vcN;			/* test every volume link */
	     if vl (i).rcp_id ^= 0 then do;		/* active */
		vl (i).cflX = 0;			/* invalidate position info */
		call tape_ansi_mount_cntl_$free (cP, i, code); /* unassign drive and volume */
		if code ^= 0 then cseg.invalid = "1"b;	/* invalidate control segment */
	     end;
	end;
	go to detach_exit;

action (2):					/* retain devices */
	cseg.write_ring = "0"b;			/* no rings */
	cseg.protect = "0"b;			/* no hardware protect (loading will cancel) */
	go to action (1);				/* VERSION ONE TEMPORARY */

action (3):					/* retain volumes */
	cseg.write_ring = "0"b;			/* no rings */
	cseg.protect = "0"b;			/* no hardware protect */
	go to action (1);				/* VERSION ONE TEMPORARY */

action (4):					/* retain all */
	if cseg.invalid then go to action (1);		/* retain none if invalid control segment */

detach_exit: if cseg.rlP ^= null then do;
	     call hcs_$truncate_seg (cseg.rlP, 0, 0);
	     cseg.rlN = -1;
	end;

	if cseg.invalid then do;			/* cseg is invalid */
	     if cseg.rlP ^= null then do;		/* if read length segment exists */
		call hcs_$delentry_seg (cseg.rlP, 0);	/* delete it */
		cseg.rlP = null;			/* and null ptr to avoid problems */
	     end;
	     call hcs_$delentry_seg (cP, 0);		/* delete cseg */
	     cP = null;
	end;
	else if cseg.retain < 3 then do;		/* cseg valid - not retaining volumes */
	     if cseg.write_ring then do;		/* if volume set could have changed */

		if vl (cseg.vcN).fflX ^= 0 then go to force_detach; /* volume set is all volumes */

		do i = 1 to cseg.vcN while (vl (i).fflX ^= 0); /* find 1st unused volume */
		end;
		cseg.vcN = max (1, i - 1);		/* get index of last used volume (but at least 1) */
						/* and truncate volume chain */

		if cseg.vcN = 1 then		/* one (or no) volumes */
		     call ioa_ ("^a:  The only member of the volume set is ^a.", cseg.module, vl (1).volname);
		else do;
		     call ioa_ ("^a:  The members of the volume set are:", cseg.module);
		     string = "";			/* initialize volume set string */
		     k = 0;			/* zero entries per line count */
		     do j = 1 to cseg.vcN;		/* output name of each member volume */
			string = string || vl (j).volname || "  ";
			k = k + 1;
			if k = 8 then do;		/* line full? */
			     call ioa_ ("^a", string); /* write it */
			     string = "";
			     k = 0;
			end;
		     end;
		     if k ^= 0 then call ioa_ ("^a", string); /* write last line */
		end;
	     end;
	end;

force_detach: mask = "0"b;				/* initialize ips mask */
	on any_other call handler;			/* pick up interrupts */
	call hcs_$set_ips_mask ("0"b, mask);		/* mask all */
	iocbP -> iocb.actual_iocb_ptr -> iocb.attach_descrip_ptr = null; /* iocb now detached */
	call iox_$propagate (iocbP -> iocb.actual_iocb_ptr);
	call hcs_$reset_ips_mask (mask, mask);
	if cP ^= null then do;			/* cseg still around */
	     if cseg.rlP ^= null then do;		/* read_length_ segment still around */
		call hcs_$terminate_noname (cseg.rlP, 0); /* disappear it */
		cseg.rlP = null;
	     end;
	     cseg.file_set_lock, cseg.file_lock = "0"b;	/* so unlock it */
	end;
	return;




handler:	procedure;				/* intercept any faults during iocb manipulation */
dcl 1 ti aligned,
    2 version fixed bin init (0),
    2 code fixed bin (35);

	     if mask ^= "0"b then do;			/* IPS interrupts masked */
		ti.code = error_table_$unable_to_do_io; /* very bad trouble */
		call terminate_process_ ("fatal_error", addr (ti)); /* kill the process */
	     end;
	     call continue_to_signal_ (0);
	     return;
	end handler;


     end tape_ansi_detach_;
