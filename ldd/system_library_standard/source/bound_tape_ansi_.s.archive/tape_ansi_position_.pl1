/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */





tape_ansi_position_: procedure (iocbP, type, n, code);	/* iox_$position entry for tape_ansi_ IO Module */


%include iocb;

%include tape_ansi_cseg;


/* arguments */
dcl  iocbP ptr,					/* pointer to iocb */
     type fixed bin,				/* -1 : position to beginning of file */
						/*  0 : position +_ n records (only +n supported) */
						/* +1 : position to end of file */
     n fixed bin (21),				/* number of records : type = 0 */
     code fixed bin (35);				/* returned error code */

/* automatic */
dcl (i, j) fixed bin (21),				/* temporary storage */
     tape_error bit (1) aligned;			/* parity error switch */

/* external procedures */
dcl  tape_ansi_lrec_io_$read_record ext entry (ptr, ptr, fixed bin (21), fixed bin (21), fixed bin (35)),
     tape_ansi_file_cntl_$beginning_of_file ext entry (ptr, fixed bin (35)),
     tape_ansi_file_cntl_$end_of_file ext entry (ptr, fixed bin (35)),
     tape_ansi_ibm_lrec_io_$read_record ext entry (ptr, ptr, fixed bin (21), fixed bin (21), fixed bin (35)),
     tape_ansi_nl_file_cntl_$beginning_of_file ext entry (ptr, fixed bin (35)),
     tape_ansi_nl_file_cntl_$end_of_file ext entry (ptr, fixed bin (35));

/* external static */
dcl (error_table_$bad_arg,
     error_table_$fatal_error,
     error_table_$file_busy,
     error_table_$long_record,
     error_table_$tape_error,
     error_table_$invalid_cseg) fixed bin (35) ext static;

/* builtin functions */
dcl  null builtin;

/* conditions */
dcl  cleanup condition;

	cP = iocbP -> iocb.actual_iocb_ptr -> iocb.attach_data_ptr; /* set pointer to control segment */

	if cseg.invalid then do;
	     code = error_table_$invalid_cseg;
	     return;
	end;

	if cseg.file_lock then do;			/* is file in use? */
	     code = error_table_$file_busy;
	     return;
	end;
	else do;
	     on cleanup begin;
		cseg.code = error_table_$fatal_error;
		cseg.file_lock = "0"b;
	     end;
	     cseg.file_lock = "1"b;
	end;

	if type < -1 | type > 1 then do;		/* invalid type */
	     code = error_table_$bad_arg;
	     go to exit;
	end;
	else go to action (type);			/* perform appropriate positioning operation */

action (-1):					/* position to beginning of file */

	if cseg.no_labels then call tape_ansi_nl_file_cntl_$beginning_of_file (iocbP, code);
	else call tape_ansi_file_cntl_$beginning_of_file (iocbP, code); /* move to 1st data record */
	if code ^= 0 then cseg.code = code;		/* disallow subsequent read ops */
	go to exit;


action (+1):					/* position to end of file */

	if cseg.no_labels then call tape_ansi_nl_file_cntl_$end_of_file (iocbP, code);
	else call tape_ansi_file_cntl_$end_of_file (iocbP, code); /* move to data EOF */
	if code ^= 0 then cseg.code = code;		/* disallow subsequent read ops */
	go to exit;

action (0):					/* position forward (n > 0) */

	code = 0;					/* initialize return code */
	tape_error = "0"b;				/* initialize parity error switch */

	if n = 0 then go to exit;			/* nothing to do */
	if n < 0 then do;				/* positioning backwards isn't supported */
	     code = error_table_$bad_arg;
	     go to exit;
	end;

	i = n;					/* copy n */

	if cseg.rlN ^= -1 then do;			/* next record is in read length segment */
	     cseg.rlN = -1;				/* that record has just been position over */
	     i = i - 1;				/* decrement count */
	end;

	do j = 1 to i;				/* skip records until done or error or end of file */
	     cseg.file_lock = "0"b;			/* unlock so lrec_io_ call will work */
	     if cseg.standard = 1 then call tape_ansi_lrec_io_$read_record (iocbP, null, 0, 0, code);
	     else call tape_ansi_ibm_lrec_io_$read_record (iocbP, null, 0, 0, code);
	     if code = error_table_$long_record then code = 0; /* ignore this */
	     else if code = 0 then;			/* rare, only skipping a zero-length record */
	     else if code = error_table_$tape_error then do; /* ignore for now, but remember */
		tape_error = "1"b;			/* this does the remembering */
		cseg.code = 0;			/* this allows further lrec_io_ calls */
	     end;
	     else go to exit;			/* fatal error or EOF - give up */
	     cseg.file_lock = "1"b;			/* relock to avoid unlikely but disasterous situation */
	end;

	if tape_error then do;			/* a parity error occurred */
	     cseg.code = error_table_$tape_error;	/* inhibit further I/O */
	     code = error_table_$tape_error;		/* set return code */
	end;

exit:	cseg.file_lock = "0"b;
	return;



     end tape_ansi_position_;
