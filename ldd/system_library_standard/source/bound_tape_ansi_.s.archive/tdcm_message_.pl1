/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* format: style4,delnl,insnl,indattr,ifthen,dclind9 */
tdcm_message_:
     procedure (arg_tsegp, arg_ws_ptr, arg_reel_name, arg_write_sw, arg_ecode);

/*	This program implements the tdcm_$tdcm_message entry point.
   *	Created on 02/20/75 by Bill Silver.
   *	Cleanup handler during block added 12/28/76 by Bernard Greenberg.
   *	Modified on 09/19/77 by R.J.C. Kissel to fix bug in call to ipc_$decl_ev_call_chn.
   *	Modified on 12/09/78 by Michael R. Jordan to use version 2 tape_info.
   *	Modified 3/79 by Michael R. Jordan for MR7.0R to stop using rcp_$tape_message and always detach (with retain)
   *	  and re-attach for multiple volumes.
   *	Modified 7/79 by R.J.C. Kissel to use tseg version 1, to correct wrong drive name bug,
   *	     and to ask RCP for the right density.
   *
   *      Modified 8/80 by R.L. Coppola to pass tseg.drive_name to tape_info.device_name.
   *
   *	This program is called to write a mount message on the operator's console.
   *	However, the first time it is called no message is written.  Instead this
   *	first call will actually perform the tape drive attachment.  For at least
   *	a while, subsequent calls will result in a mount message being typed.
*/

/*		ARGUMENTS  DATA		*/

dcl      arg_ecode		  fixed bin (35);		/* (O) Standard error_table_ code. */
dcl      arg_reel_name	  char (*);		/* (I) Tape reel ID name plus qualifiers. */
dcl      arg_tsegp		  ptr;			/* (I) Pointer to user's tseg. */
dcl      arg_write_sw	  fixed bin (1);		/* (I) 1 => write, 0 => read. */
dcl      arg_ws_ptr		  ptr;			/* (I) Pointer to temporary workspace. */


/*		AUTOMATIC  DATA		*/

dcl      1 tape_info_buffer	  like tape_info;		/* Tape info structure needed by RCP. */

dcl      temp_idcw		  bit (36) aligned;		/* Used to build read/write IDCW's. */
dcl      system_flag	  bit (1);		/* ON => user wants to be a system process. */
dcl      write_flag		  bit (1);		/* Used to copy arg_write_sw. */

dcl      comment		  char (64);		/* Comment sent to RCP. */
dcl      reel_name		  char (32);		/* Tape reel ID name. */
dcl      temp_reel_name	  char (64);		/* Used to copy reel name argument. */

dcl      real_ws_ptr	  ptr;			/* Pointer to actual IOI workspace segment. */

dcl      delimx		  fixed bin;		/* Used to parse the reel name string. */
dcl      drive_num		  fixed bin;		/* Number of the current drive. */
dcl      ecode		  fixed bin (35);		/* Temporary error code. */
dcl      i		  fixed bin;
dcl      statex		  fixed bin;		/* RCP state index. */
dcl      timeout_max	  fixed bin (71);		/* Maximum time-out interval. */
dcl      workspace_max	  fixed bin (19);		/* Maximum size of IOI workspace. */
dcl      workspace_size	  fixed bin (19);		/* Actual size of IOI workspace. */


/*		BASED  DATA		*/

dcl      based_idcw		  bit (36) based (idcwp) aligned;

dcl      event_data		  (8) bit (36);		/* Not really used. */


/*		INTERNAL STATIC DATA	*/

dcl      read_idcw_commands	  (0:5) bit (6) internal static init ("000101"b,
						/* Binary */
			  "000100"b,		/* BCD */
			  "000011"b,		/* 9 Track */
			  "010100"b,		/* EBCDIC */
			  "010111"b,		/* ASCII */
			  "010101"b);		/* ASCII/EBCDIC */

dcl      write_idcw_commands	  (0:5) bit (6) internal static init ("001101"b,
						/* Binary */
			  "001100"b,		/* BCD */
			  "001011"b,		/* 9 Track */
			  "011100"b,		/* EBCDIC */
			  "011111"b,		/* ASCII */
			  "011101"b);		/* ASCII/EBCDIC */


/*		EXTERNAL ENTRIES CALLED	*/

dcl      (addr, after, baseno, bit, decat, fixed, hbound, index, rel, rtrim, size, string, substr, unspec)
			  builtin;

dcl      error_table_$ionmat	  fixed bin (35) external;
dcl      error_table_$big_ws_req
			  fixed bin (35) external;
dcl      error_table_$unimplemented_version
			  fixed bin (35) external;

dcl      com_err_		  entry options (variable);
dcl      convert_ipc_code_	  entry (fixed bin (35));
dcl      cv_dec_		  entry (char (*), fixed bin);
dcl      get_process_id_	  entry returns (bit (36) aligned);
dcl      hcs_$wakeup	  entry (bit (36) aligned, fixed bin (71), fixed bin (71), fixed bin (35));
dcl      ioi_$set_event	  entry (fixed bin, fixed bin (71), fixed bin (35));
dcl      ioi_$set_status	  entry (fixed bin, fixed bin (18), fixed bin, fixed bin (35));
dcl      ioi_$timeout	  entry (fixed bin, fixed bin (71), fixed bin (35));
dcl      ioi_$workspace	  entry (fixed bin, ptr, fixed bin (19), fixed bin (35));
dcl      ipc_$block		  entry (ptr, ptr, fixed bin (35));
dcl      ipc_$decl_ev_call_chn  entry (fixed bin (71), entry, ptr, fixed bin, fixed bin (35));
dcl      ipc_$decl_ev_wait_chn  entry (fixed bin (71), fixed bin (35));
dcl      rcp_$attach	  entry (char (*), ptr, fixed bin (71), char (*), bit (36) aligned, fixed bin (35));
dcl      rcp_$check_attach	  entry (bit (36) aligned, ptr, char (*), fixed bin, fixed bin (19), fixed bin (71),
			  fixed bin, fixed bin (35));
dcl      rcp_$detach	  entry (bit (36) aligned, bit (*), fixed bin, char (*), fixed bin (35));
dcl      tdcm_$special_handler  entry (ptr);

/*		CONDITIONS		*/

dcl      cleanup		  condition;

%include tseg;

%include tdcm_info;

%include ioi_stat;

%include rcp_tape_info;

%include rcp_resource_types;

%include iom_pcw;

	tsegp = arg_tsegp;				/* Copy arguments. */

	if tseg.version_num ^= tseg_version_2 then do;
	     arg_ecode = error_table_$unimplemented_version;
	     return;
	end;

	ws_ptr = arg_ws_ptr;
	temp_reel_name = arg_reel_name;
	write_flag = bit (arg_write_sw);
	system_flag = "0"b;				/* Assume not a system process. */

	begin;					/* Necessary for multi-volume switching. */

dcl      garbage		  (size (ws)) bit (36);



	     if ws.flags.attached			/* Is tape drive already attached. */
	     then do;				/* Yes, actually process the message. */
		unspec (garbage) = unspec (ws);	/* Make temp copy of workspace. */
		tseg.ws_segno = "0"b;		/* No workspace for a while. */
		ws_ptr = addr (garbage);		/* And start to use it. */
		call rcp_$detach (ws.info.rcp_id, "1"b, ws.info.error_count, "", ecode);
		ws.info.error_count = 0;
		call ipc_$decl_ev_wait_chn (ws.info.special_echan, ecode);
		if ecode ^= 0			/* Did we make it a call channel? */
		then do;				/* No. */
		     call convert_ipc_code_ (ecode);
		     goto RETURN;
		end;
	     end;

/* Now we will parse the reel name string. */
	     delimx = index (temp_reel_name, ",");	/* Look for first comma in reel name. */
	     if delimx = 0				/* Are there other fields in the reel name? */
	     then do;				/* No. */
		reel_name = temp_reel_name;		/* Use the whole reel name. */
		comment = "";			/* No comment. */
	     end;
	     else do;				/* Yes there are other fields in the reel name. */
		reel_name = substr (temp_reel_name, 1, (delimx - 1));
		comment = temp_reel_name;		/* Use whole reel name string as a comment. */
		delimx = index (temp_reel_name, ",sys");
		if delimx ^= 0			/* ",sys" => user wants to be a system process */
		then system_flag = "1"b;
	     end;


/*	Now that we know the reel name we will try to attach the tape drive.
   *	RCP will assign a tape drive depending upon the data in tape_info.
   *	RCP will mount the specified reel on the assigned drive as part of
   *	the attachment.  RCP will make sure that the drive is ready and the
   *	reel is at BOT.  It will make sure that the write ring is correct.
   *	First we must fill in the tape_info structure needed by RCP.
*/
	     tape_info_ptr = addr (tape_info_buffer);	/* Pointer to tape_info structure. */
	     tape_info.version_num = tape_info_version_2; /* We must always set this. */
	     tape_info.usage_time,			/* These fields not used yet. */
		tape_info.wait_time = 0;
	     tape_info.system_flag = system_flag;
	     tape_info.device_name = tseg.drive_name;	/* Assign the right device. */
	     tape_info.model = 0;			/* We will accept any model. */
	     tape_info.tracks = ws.info.tracks;		/* We want specific track type. */
	     tape_info.density = tseg.density;		/* Ask for what the user requested. */
	     tape_info.speed = tseg.speed;
	     tape_info.unused_qualifier = "0"b;
	     tape_info.volume_name = reel_name;		/* Fill in tape info colume data. */
	     tape_info.write_flag = write_flag;
	     tape_info.position_index = 0;		/* Initialize.  Not really used yet. */

/* Use regular channel with RCP.  Not a call chan yet. */
	     ws.info.wait_list.wait_echan = ws.info.special_echan;
	     call rcp_$attach (DEVICE_TYPE (TAPE_DRIVE_DTYPEX), tape_info_ptr, ws.info.special_echan, comment,
		ws.info.rcp_id, ecode);
	     if ecode ^= 0 then
		goto RETURN;

	     reel_name = tape_info.volume_name;		/* remember, these things might have been changed by ring 1 */

	     if index (temp_reel_name, ",") > 0 then
		temp_reel_name = rtrim (reel_name) || "," || after (temp_reel_name, ",");
	     else temp_reel_name = reel_name;

	     arg_reel_name = temp_reel_name;

	     ws.info.detachx = 3;			/* Now we have an RCP ID and must detach. */

/*	We must check to see if the attachment has completed.  If RCP tells us
   *	that there is a short wait we will block.  We must call RCP again after
   *	each short wait.
*/
ATTACH_LOOP:
	     comment = " ";
	     call rcp_$check_attach (ws.info.rcp_id, tape_info_ptr, comment, ws.info.ioix, workspace_max, timeout_max,
		statex, ecode);
	     if comment ^= " "			/* Is there a comment from RCP? */
	     then call com_err_ (0, "tdcm_", "RCP comment: ^a", comment);
	     goto ATTACH_STATE (statex);

ATTACH_STATE (1):					/* Short wait. */
	     on cleanup call clean_up;
	     call ipc_$block (addr (ws.info.wait_list), addr (event_data), ecode);
	     revert cleanup;
	     if ecode ^= 0 then do;
		call convert_ipc_code_ (ecode);
		goto RETURN;
	     end;
	     goto ATTACH_LOOP;			/* Call RCP again. */

ATTACH_STATE (2):					/* Long wait. */
	     ecode = error_table_$ionmat;
ATTACH_STATE (3):					/* Fatal error. */
	     goto RETURN;

/*	The attachment has completed.  We must call IOI to establish the
   *	real IOI workspace buffer.
*/
ATTACH_STATE (0):					/* Attachment complete. */
	     call cv_dec_ (substr (tape_info.device_name, 6, 2), drive_num);
	     tseg.drive_name = tape_info.device_name;	/* Return correct drive name. */

/*	Now we must get a real IOI workspace.  We will ask for a workspace that is
   *	just large enough to contain all of tdcm_info.  If the buffer size is too
   *	large we will have to adjust it so it will fit into the maximum size
   *	workspace that we may allocate.
*/
	     workspace_size = fixed (rel (addr (ws.buf_end)), 18) - fixed (rel (addr (ws.info)), 18) + 1;
	     if workspace_size > workspace_max		/* If buffer size too large adjust it. */
	     then do;
		ws.info.flags.good_ws = "0"b;
		ecode = error_table_$big_ws_req;
		goto RETURN;
	     end;

	     call ioi_$workspace (ws.info.ioix, real_ws_ptr, workspace_size, ecode);
	     if ecode ^= 0 then do;
		ws.info.flags.good_ws = "0"b;
		goto RETURN;
	     end;

	     ws.info.flags.good_ws = "1"b;

/*	We now have a real IOI workspace.  We will copy all workspace ws_info
   *	from the temporary workspace into the real workspace.  From then on
   *	we will deal only with the real workspace.
*/
	     real_ws_ptr -> ws.info = ws_ptr -> ws.info;	/* Move ws_info to real workspace. */
	     ws_ptr = real_ws_ptr;			/* Use real workspace pointer. */
	     tseg.ws_segno = baseno (ws_ptr);		/* Save workspace segment number. */

	end;					/* End of the begin block. */

/*	Now we will complete the initialization of the IOI workspace.
   *	We will call IOI to set the time-out limit to the maximum.
   *	We will convert the special event channel into an event call
   *	channel.  The data pointer for this call channel is the pointer
   *	to the real workspace for this drive.  We must call IOI to set up
   *	the event channel that we want to use when we start I/O processing.
   *	We will initialize all the other data in the workspace including
   *	the DCW lists.
*/
	call ioi_$timeout (ws.info.ioix, timeout_max, ecode);
	if ecode ^= 0 then
	     goto RETURN;

/* Set up our IOI status queue. */
	call ioi_$set_status (ws.info.ioix, fixed (rel (addr (ws.statq)), 18), hbound (ws.statq, 1), ecode);
	if ecode ^= 0 then
	     return;

	do i = 1 to hbound (ws.statq, 1);		/* Set up all status queue entries. */
	     ws.statq (i).completion.st = "0"b;		/* Make this entry free. */
	end;
	ws.info.statqx = 1;				/* Start with first status queue entry. */

	call ioi_$set_event (ws.info.ioix, ws.info.init_echan, ecode);
	if ecode ^= 0				/* Did we set up IOI's event channel? */
	then goto RETURN;				/* No. */

/* From now on always wait on fast channel. */
	ws.info.wait_list.wait_echan = ws.info.fast_echan;

/* Make special channel an event call channel. */
	call ipc_$decl_ev_call_chn (ws.info.special_echan, tdcm_$special_handler, ws_ptr, 0, ecode);
	if ecode ^= 0				/* Did we make it a call channel? */
	then do;					/* No. */
	     call convert_ipc_code_ (ecode);
	     goto RETURN;
	end;

	ws.info.disposition = "0"b;			/* Until told otherwise let RCP decide. */
	ws.info.process_id = get_process_id_ ();	/* Need process ID to wakeup user. */
	ws.info.flags.attached = "1"b;		/* Device is now attached. */

/* Save offset of each DCW list. */
	ws.info.ndt_offsetx = fixed (rel (addr (ws.ndt_list)), 18);
	ws.info.rw_offsetx = fixed (rel (addr (ws.rw_list)), 18);

	do i = 1 to hbound (ws.ndt_list, 1);		/* Initialize non-data transfer IDCWs. */
	     idcwp = addr (ws.ndt_list (i).idcw);	/* Get pointer to IDCW. */
	     string (idcw) = "0"b;			/* Clear it to all zeros. */
	     idcw.device = bit (fixed (drive_num, 6));	/* Set up device number. */
	     idcw.code = "111"b;			/* This => it is an IDCW. */
	     idcw.chan_cmd = "000010"b;		/* This => it is a non-data transfer IDCW. */
	     idcw.count = "000001"b;			/* Record count = 1. */
	end;

	do i = 1 to hbound (ws.rw_list, 1);		/* Set up read/write DCW list. */
	     ws.rw_list (i).dcw = "0"b;		/* Clear all DCW's. */
	end;

	idcwp = addr (temp_idcw);			/* Initialize our work IDCW. */
	string (idcw) = "0"b;			/* Clear it to all zeros. */
	idcw.device = bit (fixed (drive_num, 6));	/* Fill in this drive number. */
	idcw.code = "111"b;				/* This is an IDCW. */
	idcw.control = "10"b;			/* Initialize to continue. */

	do i = 0 to hbound (ws.info.read_idcws, 1);
	     idcwp = addr (ws.info.read_idcws (i));	/* Set up each read IDCW. */
	     based_idcw = temp_idcw;			/* Copy template with drive number. */
	     idcw.command = read_idcw_commands (i);	/* Fill in corresponding command. */
	end;

	do i = 0 to hbound (ws.info.write_idcws, 1);
	     idcwp = addr (ws.info.write_idcws (i));	/* Set up each write IDCW. */
	     based_idcw = temp_idcw;
	     idcw.command = write_idcw_commands (i);
	end;

/*	Now send a wakeup to the user.  He should be waiting for it.
   *	It tells him that the tape drive is now in READY.
*/
	call hcs_$wakeup (ws.info.process_id, ws.info.user_echan, 0, ecode);

RETURN:
	arg_ecode = ecode;				/* Return error code. */

	return;


/* Clean-up procedure during blocking. */

clean_up:
     proc;

	call rcp_$detach (ws.info.rcp_id, "0"b, (0), "", (0));

     end;
     end tdcm_message_;
