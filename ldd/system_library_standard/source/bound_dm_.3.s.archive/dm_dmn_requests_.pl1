/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        *********************************************************** */

/* DESCRIPTION:
This program is a collection of utility entries for the Data Management
Daemon.  The most important of these entries is the $request entry.  This
entry is the object of the event call channel that all Daemon requests
are made over.  There are entries to logout and new_proc the Daemon
and an entry for logging.

This procedure was originally written by Mike Pandolf.  Most of the 
$request entry was taken from the now defunct dmsd_listener_ program,
also written by Mike Pandolf.
*/

/* HISTORY:
Written by R. Michael Tague, 11/23/84.
Modified:
12/06/84 by R. Michael Tague: Changed program name from dmsd_util_.
12/10/84 by R. Michael Tague: Changed string for alarm wakeups, is "alarm___".
12/11/84 by R. Michael Tague: Removed error code from the $adjust_tdt call.
01/16/85 by R. Michael Tague: Fixed a variety of small items for auditing.
01/22/85 by R. Michael Tague: Added the kill_txn request.
03/18/85 by Steve Herbst: Removed "TDT adjusted." log message.
*/


/****^  HISTORY COMMENTS:
  1) change(87-04-27,GDixon), approve(87-07-08,MCR7741),
     audit(87-07-08,Hartogs), install(87-08-04,MR12.1-1055):
     Upgraded for change to answer_table.incl.pl1 and user_table_entry.incl.pl1
                                                   END HISTORY COMMENTS */


/* format: style5,^indcomtxt */
log:
        proc () options (variable);

/* START OF DECLARATIONS */
/* Parameter */
/* Automatic */

        dcl     arg_list_ptr		ptr;
        dcl     group_id		char (32);
        dcl     myname		char (32);
        dcl     request_type		fixed bin (17);
        dcl     sender_id		bit (36) aligned;

        dcl     logout_current_system_state
				char (4) aligned;

        dcl     1 logout_info		aligned,
	        2 version		fixed bin init (0),
	        2 hold		bit (1) unal init ("0"b),
	        2 brief		bit (1) unal init ("0"b),
	        2 pad		bit (34) unal init ((34)"0"b);

        dcl     1 new_proc_info	aligned,
	        2 version		fixed bin init (1),
	        2 change_auth	bit (1) unal init ("0"b),
	        2 pad		bit (35) unal init ((35)"0"b),
	        2 new_auth		bit (72) aligned;

/* Builtin */

        dcl     (addr, null, rtrim, substr)
				builtin;

/* Constant */

        dcl     NEVER_SET		fixed bin (71) init (-1) int
				static options (constant);
        dcl     SYSTEM_CTL_DIR	char (4) init (">sc1") int
				static options (constant);

/* Entry */

        dcl     cu_$arg_list_ptr	entry (ptr);
        dcl     dm_daemon_util_$get_daemon_info
				entry (ptr);
        dcl     dm_daemon_util_$log	entry options (variable);
        dcl     dm_daemon_util_$log_message
				entry (ptr);
        dcl     dm_daemon_util_$new_proc
				entry ();
        dcl     dm_daemon_util_$schedule_shutdown
				entry ();
        dcl     dm_daemon_util_$set_system_state
				entry (char (4) aligned);
        dcl     dm_misc_util_$is_process_using_dm
				entry returns (bit (1) aligned);
        dcl     dm_misc_util_$get_begin_shutdown_time
				entry returns (fixed bin (71));
        dcl     dm_misc_util_$get_system_state
				entry returns (char (4) aligned);
        dcl     hcs_$initiate		entry (char (*), char (*), char (*),
				fixed bin (1), fixed bin (2), ptr,
				fixed bin (35));
        dcl     terminate_process_	entry (char (*), ptr);
        dcl     timer_manager_$reset_alarm_wakeup
				entry (fixed bin (71));
        dcl     timer_manager_$alarm_wakeup
				entry (fixed bin (71), bit (2),
				fixed bin (71));
        dcl     transaction_manager_$adjust_process_id
				entry (bit (36) aligned, fixed bin (35))
				;
        dcl     transaction_manager_$adjust_tdt
				entry ();
        dcl     transaction_manager_$adjust_tdt_entry
				entry (bit (36) aligned, fixed bin,
				fixed bin (35));
        dcl     transaction_manager_$dm_system_in_use
				entry returns (bit (1) aligned);
        dcl     transaction_manager_$ips_wakeup
				entry (char (*), bit (36) aligned);
        dcl     transaction_manager_$kill_txn
				entry (bit (36) aligned, fixed bin (35))
				;

/* External */

        dcl     dm_error_$process_not_found
				fixed bin (35) ext;
        dcl     dm_request_action_$adjust_process_id
				fixed bin (17) ext;
        dcl     dm_request_action_$adjust_tdt
				fixed bin (17) ext;
        dcl     dm_request_action_$adjust_tdt_entry
				fixed bin (17) ext;
        dcl     dm_request_action_$adjust_txn
				fixed bin (17) ext;
        dcl     dm_request_action_$kill_txn
				fixed bin (17) ext;
        dcl     dm_request_action_$new_proc
				fixed bin (17) ext;
        dcl     dm_request_action_$new_process_notifications
				fixed bin (17) ext;
        dcl     dm_request_action_$shutdown
				fixed bin (17) ext;

/* Static */

        dcl     request_idle_time_in_seconds
				fixed bin (71) init (NEVER_SET);

/* These are pointers to the answer table, the absentee user table, */
/* and the daemon user table. */

        dcl     static_ansp		ptr init (null ()) int static;
        dcl     static_autp		ptr init (null ()) int static;
        dcl     static_dutp		ptr init (null ()) int static;

/* END OF DECLARATIONS */

/* *************************************************************************
   * dm_dmn_requests_$log - This entry point passes its argument pointer   *
   * to $log_messages so that the options (variable) can be carried	     *
   * through a gate. This entry is the main procedure entry for this	     *
   * module.						     *
   ************************************************************************* */

        myname = "dm_dmn_requests_$log";
        call cu_$arg_list_ptr (arg_list_ptr);
        call dm_daemon_util_$log_message (arg_list_ptr);
        call RETURN;
%page;
/* *************************************************************************
   * dm_dmn_requests_$logout - This entry is called by the Daemon to       *
   * logout the Daemon's process.  Just before actually logging out	     *
   * a check is made to see if we are currently in the process of shutting *
   * down DM.  If we are and no one is left in the system, the state is    *
   * set to DM_SYSTEM_STATE_NORMAL_SHUTDOWN. The terminate_process_	     *
   * procedure should never return.				     *
   ************************************************************************* */

logout:
        entry ();

        myname = "dm_dmn_requests_$logout";
        if dm_misc_util_$is_process_using_dm () then
	      do;
	      logout_current_system_state = dm_misc_util_$get_system_state ();
	      if logout_current_system_state = DM_SYSTEM_STATE_SHUTDOWN_BEGUN
		| logout_current_system_state
		= DM_SYSTEM_STATE_SHUTDOWN_BUMP_USERS then
		    if ^transaction_manager_$dm_system_in_use () then
			  call dm_daemon_util_$set_system_state (
			      DM_SYSTEM_STATE_NORMAL_SHUTDOWN);
	      end;
        call terminate_process_ ("logout", addr (logout_info));
        call RETURN;
%page;
/* *************************************************************************
   * dm_dmn_requests_$new_proc - This entry is called by the Daemon	     *
   * overseer to get a new process.  This may be called due to an operator *
   * request or because an error was encountered.  The terminate_process_  *
   * procedure should never return.				     *
   ************************************************************************* */

new_proc:
        entry ();

        myname = "dm_dmn_requests_$new_proc";
        call terminate_process_ ("new_proc", addr (new_proc_info));
        call RETURN;
%page;
/* *************************************************************************
   * dm_dmn_requests_$request - This entry handles all Daemon requests     *
   * including those made by the Answering Service to adjust_process_id    *
   * for processes that have terminated and the Idle timer request of	     *
   * adjust_tdt.  This entry is called as the object of an event call	     *
   * channel.						     *
   ************************************************************************* */

request:
        entry (event_call_info_ptr);

        myname = "dm_dmn_requests_$request";
        dm_request_message_ptr = addr (event_call_info.message);
        sender_id = event_call_info.sender;
        group_id = GET_PROCESS_GROUP (sender_id);
        call RESET_IDLE_TIMER (event_call_info.channel_id);
        if dm_alarm_message = "alarm___" then
	      call ALARM_WAKEUP ();
        else
	      do;
	      request_type = dm_request_message.action_type;
	      if request_type = dm_request_action_$adjust_process_id then
		    call ADJUST_PROCESS_ID ();
	      else if request_type = dm_request_action_$adjust_tdt then
		    call ADJUST_TDT ();
	      else if request_type = dm_request_action_$adjust_tdt_entry then
		    call ADJUST_TDT_ENTRY ();
	      else if request_type = dm_request_action_$adjust_txn then
		    call ADJUST_TXN ();
	      else if request_type = dm_request_action_$kill_txn then
		    call KILL_TXN ();
	      else if request_type = dm_request_action_$new_proc then
		    call NEW_PROC ();
	      else if request_type
		= dm_request_action_$new_process_notifications then
		    call NEW_PROCESS_NOTIFICATIONS ();
	      else if request_type = dm_request_action_$shutdown then
		    call SHUTDOWN ();
	      else
		    call dm_daemon_util_$log (LOG_SV,
		        "Unknown Daemon request type: ^i, from ^w (^a).",
		        request_type, sender_id, group_id);
	      end;
        call RETURN;

MAIN_RETURN:
        return;
%page;
/* *************************************************************************
   * ALARM_WAKEUP - This routine is invoked by an idle timeout request.    *
   ************************************************************************* */

ALARM_WAKEUP:
        proc ();

        call dm_daemon_util_$log (LOG_SV, "Idle timeout request by ^w, (^a).",
	  sender_id, group_id);
        call transaction_manager_$adjust_tdt ();
        end ALARM_WAKEUP;
%page;
/* *************************************************************************
   * ADJUST_PROCESS_ID - Request to adjust the TDT based on a supplied     *
   * process_id.  This request is logged if it does not come from the      *
   * the Initializer.  The Answering Service sends this request as a	     *
   * process termination notification.				     *
   ************************************************************************* */

ADJUST_PROCESS_ID:
        proc ();
        dcl     api_code		fixed bin (35);
        dcl     INITIALIZER_USER_NAME	char (11) init ("Initializer")
				internal static options (constant);

        if substr (group_id, 1, 11) ^= INITIALIZER_USER_NAME then
	      do;
	      call dm_daemon_util_$log (LOG_SV,
		"ADJUST_PROCESS_ID ^w requested by ^w (^a).",
		dm_adjust_process_id_message.process_id, sender_id,
		group_id);
	      call transaction_manager_$adjust_process_id
		((dm_adjust_process_id_message.process_id), api_code);
	      if api_code ^= 0 then
		    call dm_daemon_util_$log (LOG_SV, api_code, myname,
		        "Transaction manager could not adjust process id.");
	      end;
        else
	      do;
	      call transaction_manager_$adjust_process_id
		((dm_adjust_process_id_message.process_id), api_code);
	      if api_code ^= 0 & api_code ^= dm_error_$process_not_found then
		    call dm_daemon_util_$log (LOG_SV, api_code, myname,
		        "Transaction manager could not adjust process id.");
	      end;
        end ADJUST_PROCESS_ID;
%page;
/* *************************************************************************
   * ADJUST_TDT - Adjust the TDT table.				     *
   ************************************************************************* */

ADJUST_TDT:
        proc ();

        call dm_daemon_util_$log (LOG_SV, "ADJUST TDT for ^w (^a).", sender_id,
	  group_id);
        call transaction_manager_$adjust_tdt ();
        call dm_daemon_util_$log (LOG_SV, "TDT successfully adjusted.");
        end ADJUST_TDT;
%page;
/* *************************************************************************
   * ADJUST_TDT_ENTRY - Adjust the TDT table for a specified entry, an     *
   * offset into the table.					     *
   ************************************************************************* */

ADJUST_TDT_ENTRY:
        proc ();
        dcl     ate_code		fixed bin (35);

        call dm_daemon_util_$log (LOG_SV,
	  "ADJUST_TDT_ENTRY (index = ^i) requested by ^w (^a).",
	  dm_adjust_txn_message.transaction_index, sender_id, group_id);
        call transaction_manager_$adjust_tdt_entry
	  ((dm_adjust_txn_message.transaction_id),
	  (dm_adjust_txn_message.transaction_index), ate_code);
        if ate_code ^= 0 then
	      call dm_daemon_util_$log (LOG_SV, ate_code, myname,
		"TDT entry could not be adjusted.");
        else
	      call dm_daemon_util_$log (LOG_SV,
		"TDT entry successfully adjusted.");
        end ADJUST_TDT_ENTRY;
%page;
/* *************************************************************************
   * ADJUST_TXN - Adjust the TDT table given a transaction id.	     *
   ************************************************************************* */

ADJUST_TXN:
        proc ();
        dcl     at_code		fixed bin (35);

        call dm_daemon_util_$log (LOG_SV,
	  "ADJUST_TXN (index = ^i) requested by ^w (^a).",
	  dm_adjust_txn_message.transaction_index, sender_id, group_id);
        call transaction_manager_$adjust_tdt_entry
	  ((dm_adjust_txn_message.transaction_id),
	  (dm_adjust_txn_message.transaction_index), at_code);
        if at_code ^= 0 then
	      call dm_daemon_util_$log (LOG_SV, at_code, myname,
		"Transaction could not be adjusted");
        else
	      call dm_daemon_util_$log (LOG_SV,
		"Transaction successfully adjusted.");
        end ADJUST_TXN;
%page;
/* *************************************************************************
   * GET_PROCESS_GROUP - This function returns a string which is the	     *
   * caller process' group_id (user.project.tag).  If the group id cannot  *
   * be determined, then "UNABLE TO GET GROUP ID" is returned.	     *
   ************************************************************************* */

GET_PROCESS_GROUP:
        proc (gpg_process_id) returns (char (32));
        dcl     gpg_process_id	bit (36) aligned;
        dcl     gpg_code		fixed bin (35);
        dcl     gpg_entry_no		fixed bin;
        dcl     INTERACTIVE_USER_TABLE	char (32) init ("answer_table")
				internal static options (constant);
        dcl     DAEMON_USER_TABLE	char (32)
				init ("daemon_user_table")
				internal static options (constant);
        dcl     ABSENTEE_USER_TABLE	char (32)
				init ("absentee_user_table")
				internal static options (constant);

        if static_ansp = null () then
	      call hcs_$initiate (SYSTEM_CTL_DIR, INTERACTIVE_USER_TABLE, "",
		0, 0, static_ansp, gpg_code);
        if static_dutp = null () then
	      call hcs_$initiate (SYSTEM_CTL_DIR, DAEMON_USER_TABLE, "", 0, 0,
		static_dutp, gpg_code);
        if static_autp = null () then
	      call hcs_$initiate (SYSTEM_CTL_DIR, ABSENTEE_USER_TABLE, "", 0,
		0, static_autp, gpg_code);
        ansp = static_ansp;
        autp = static_autp;
        dutp = static_dutp;

        if ansp ^= null () then
	      do gpg_entry_no = 1 to ansp -> anstbl.current_size;
		    utep = addr (anstbl.entry (gpg_entry_no));
		    if utep -> ute.active = NOW_HAS_PROCESS then
			  if utep -> ute.proc_id = gpg_process_id then
				return (rtrim (utep -> ute.person)
				    || "."
				    || rtrim (utep -> ute.project)
				    || ".a");
	      end;

        if autp ^= null () then
	      do gpg_entry_no = 1 to autp -> autbl.current_size;
		    utep = addr (autp -> autbl.entry (gpg_entry_no));
		    if utep -> ute.active ^= NOW_FREE then
			  if utep -> ute.proc_id = gpg_process_id then
				return (rtrim (utep -> ute.person)
				    || "."
				    || rtrim (utep -> ute.project)
				    || ".m");
	      end;

        if dutp ^= null () then
	      do gpg_entry_no = 1 to dutp -> dutbl.current_size;
		    utep = addr (dutp -> dutbl.entry (gpg_entry_no));
		    if utep -> ute.active = NOW_HAS_PROCESS then
			  if utep -> ute.proc_id = gpg_process_id then
				return (rtrim (utep -> ute.person)
				    || "."
				    || rtrim (utep -> ute.project)
				    || ".z");
	      end;

        return ("UNABLE TO GET GROUP ID");
        end GET_PROCESS_GROUP;
%page;
/* *************************************************************************
   * IDLE_TIME_IN_SECONDS - This function returns the the value of the DM  *
   * system parameter that specifies the amount of time between idle	     *
   * timeouts for the Daemon.  The time is converted from minutes to	     *
   * seconds and returned.					     *
   ************************************************************************* */

IDLE_TIME_IN_SECONDS:
        proc () returns (fixed bin);
        dcl     1 itis_daemon_info	aligned like dm_daemon_info;
        dcl     SECONDS_PER_MINUTE	fixed bin init (60) internal
				static options (constant);

        itis_daemon_info.version = DM_DAEMON_INFO_VERSION_1;
        call dm_daemon_util_$get_daemon_info (addr (itis_daemon_info));
        return (SECONDS_PER_MINUTE * itis_daemon_info.wakeup_increment);
        end IDLE_TIME_IN_SECONDS;
%page;
/* *************************************************************************
   * KILL_TXN - Kills (just wipes out) tht specified TDT entry.	     *
   ************************************************************************* */

KILL_TXN:
        proc ();
        dcl     kt_code		fixed bin (35);

        call dm_daemon_util_$log (LOG_SV,
	  "KILL_TXN (ID = ^i) requested by ^w (^a).",
	  dm_kill_txn.transaction_id, sender_id, group_id);
        call transaction_manager_$kill_txn ((dm_kill_txn.transaction_id),
	  kt_code);
        if kt_code ^= 0 then
	      call dm_daemon_util_$log (LOG_SV, kt_code, myname,
		"Transaction could not be killed.");
        else
	      call dm_daemon_util_$log (LOG_SV,
		"Transaction successfully killed.");
        end KILL_TXN;
%page;
/* *************************************************************************
   * NEW_PROC - The new_proc request.  This causes the DM Daemon to	     *
   * execute a new_proc.					     *
   ************************************************************************* */

NEW_PROC:
        proc ();

        call dm_daemon_util_$log (LOG_SV, "NEW_PROC from process ^w (^a).",
	  sender_id, group_id);
        call dm_daemon_util_$new_proc ();
        end NEW_PROC;
%page;
/* *************************************************************************
   * NEW_PROCESS_NOTIFICATIONS - This request causes the Daemon to send a  *
   * dm_shutdown_scheduled_ IPS signal to the process that made the	     *
   * request.  This is used by per-process initialization in the inner     *
   * ring to cause the IPS signal for the outer ring.		     *
   ************************************************************************* */

NEW_PROCESS_NOTIFICATIONS:
        proc ();
        dcl     DM_SHUTDOWN_SCHEDULED_IPS_NAME
				char (32)
				init ("dm_shutdown_scheduled_")
				internal static options (constant);

        if dm_misc_util_$get_begin_shutdown_time () ^= 0 then
	      call transaction_manager_$ips_wakeup (
		DM_SHUTDOWN_SCHEDULED_IPS_NAME, sender_id);
        end NEW_PROCESS_NOTIFICATIONS;
%page;
/* *************************************************************************
   * RETURN - This is the main return procedure for the several entry      *
   * points.  It does a non-local goto to MAIN_RETURN.		     *
   ************************************************************************* */

RETURN:
        proc ();

        goto MAIN_RETURN;
        end RETURN;
%page;
/* *************************************************************************
   * RESET_IDLE_TIMER - This entry is called whenever a request is	     *
   * processed.  It resets the the idle timer since we aren't idle.  The   *
   * idle timer is set to go off request_idle_time_in_seconds in the       *
   * future.  If the static value request_idle_time_in_seconds has not     *
   * been set before, we set it using the value returned from the          *
   * IDLE_TIME_IN_SECONDS procedure.				     *
   ************************************************************************* */

RESET_IDLE_TIMER:
        proc (rit_p_request_channel);
        dcl     rit_p_request_channel	fixed bin (71);
        dcl     RIT_RELATIVE_SECONDS_REQUEST
				bit (2) init ("11"b) internal
				static options (constant);

        call timer_manager_$reset_alarm_wakeup (rit_p_request_channel);
        if request_idle_time_in_seconds = NEVER_SET then
	      request_idle_time_in_seconds = IDLE_TIME_IN_SECONDS ();
        if request_idle_time_in_seconds > 0 then
	      call timer_manager_$alarm_wakeup (request_idle_time_in_seconds,
		RIT_RELATIVE_SECONDS_REQUEST, rit_p_request_channel);
        end RESET_IDLE_TIMER;
%page;
/* *************************************************************************
   * SHUTDOWN - This request causes the DM system to schedule a shutdown.  *
   ************************************************************************* */

SHUTDOWN:
        proc ();
        call dm_daemon_util_$log (LOG_SV, "SHUTDOWN from process ^w (^a).",
	  sender_id, group_id);
        call dm_daemon_util_$schedule_shutdown ();
        end SHUTDOWN;

%page; %include answer_table;
%page; %include absentee_user_table;
%page; %include dm_daemon_info;
%page; %include daemon_user_table;
%page; %include dialup_values;
%page; %include dm_log_sv_codes;
%page; %include dm_request_message;
%page; %include dm_system_states;
%page; %include event_call_info;
%page; %include user_attributes;
%page; %include user_table_entry;
%page; %include user_table_header;

        end log;
