/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */
/* format: style2,ind3 */
collmgr_display:
cmds:
   proc ();

/*
DESCRIPTION:

     This command displays the collection_manager_ file_header, and the
collection_headers for each of the collections in a DM file.
*/

/*
HISTORY:

Written by Lindsey L. Spratt, 12/01/82.
Modified:
12/17/82 by Lindsey Spratt:  Added element displays and finer control over
	  what is displayed.
01/12/83 by Lindsey Spratt:  Fixed to initialize display_flag to "0"b.  Also
	  fixed messages for displaying elements.
03/08/83 by Lindsey Spratt:  Added special interpretation for a collection_idx
	  of 0.  This identifies the header collection.  Added the ability
	  to display an element formatted by an arbitrary structure (using
	  the display_structure technology).  Changed the -element control
	  option to only accept one element per option.
12/05/84 by Lindsey L. Spratt:  Fixed to declare the undeclared builtins.
*/
/* START OF DECLARATIONS */
/* Parameter */
/* Automatic */

      dcl	    file_dir	       char (168) init ("");
      dcl	    file_entry	       char (32) init ("");
      dcl	    (file_opening_id, current_collection_id)
			       bit (36) aligned init ("0"b);
      dcl	    work_area_ptr	       ptr init (null);
      dcl	    1 local_print_data_info
			       like print_data_info;
      dcl	    temp_string_ptr	       ptr init (null);
      dcl	    collection_idx	       fixed bin;
      dcl	    display_idx	       fixed bin init (0);
      dcl	    first_collection_idx   fixed bin init (0);
      dcl	    number_of_collections  fixed bin init (0);
      dcl	    1 automatic_cm_file_header
			       like cm_file_header;
      dcl	    collection_id_table_length_in_bits
			       fixed bin (35);
      dcl	    element_ptr	       ptr init (null);
      dcl	    element_length	       fixed bin (35) init (0);
      dcl	    (root_element_spec_ptr, element_spec_ptr, old_spec_ptr, next_ptr)
			       ptr init (null);

      dcl	    display_flag	       (7) bit (1) aligned;

      dcl	    display_info	       bit (1) aligned defined display_flag (1);
      dcl	    display_header	       bit (1) aligned defined display_flag (2);
      dcl	    display_file_header    bit (1) aligned defined display_flag (3);
      dcl	    display_collection_id_table
			       bit (1) aligned defined display_flag (4);
      dcl	    display_element	       bit (1) aligned defined display_flag (5);
      dcl	    display_element_in_characters
			       bit (1) aligned defined display_flag (6);
      dcl	    display_header_collection
			       bit (1) aligned defined display_flag (7);

      dcl	    true_arg	       char (32) varying init ("");

/* Based */

      dcl	    work_area	       area (sys_info$max_seg_size) based (work_area_ptr);
      dcl	    temp_string	       based (temp_string_ptr) char (sys_info$max_seg_size * 4) varying;

      dcl	    1 element_spec	       based (element_spec_ptr),
	      2 next	       ptr init (null),
	      2 structure_name     char (32) varying init (""),
	      2 collection_idx     fixed bin init (0),
	      2 position	       fixed bin (17),
	      2 id	       like element_id;

      dcl	    element	       based (element_ptr) bit (element_length);
      dcl	    character_element      based (element_ptr) char (divide (element_length, 9, 35, 0));

/* Builtin */

      dcl	    (addr, bin, char, divide, hbound, index, length, null, rtrim, substr, unspec)
			       builtin;

/* Constant */

      dcl	    BITS_PER_BYTE	       init (9) fixed bin (35) internal static options (constant);

      dcl	    DISPLAY_KEYWORD	       (7, 2) char (32) varying
			       init ("info", "i", "header", "h", "file_header", "fh", "collection_id_table", "cit",
			       "element", "e", "element_in_characters", "eic", "header_collection", "hc")
			       internal static options (constant);

      dcl	    myname	       init ("collmgr_display") char (32) varying internal static options (constant);
      dcl	    argument_type	       (9) internal static options (constant) char (64) varying
			       init ("DM file pathname", "index into the collection_id_table",
			       "index into the collection_id_table", "number of collections",
			       "number of collections", "keyword", "keyword", "element_id", "element_id");
      dcl	    control_argument       (9) internal static options (constant) char (64) varying
			       init ("-file", "-first_collection", "-ftc", "-number_of_collections", "-noc",
			       "-display", "-ds", "-element", "-el");

/* Entry */

      dcl	    ioa_		       entry () options (variable);
      dcl	    ioa_$nnl	       entry () options (variable);
      dcl	    file_manager_$open     entry (char (*), char (*), bit (36) aligned, fixed bin (35));
      dcl	    cm_opening_info$get    entry (bit (36) aligned, bit (36) aligned, ptr, fixed bin (35));
      dcl	    cm_get_element	       entry (bit (36) aligned, bit (36) aligned, bit (36) aligned, fixed bin, ptr,
			       fixed bin (35), ptr, bit (1) aligned, ptr, fixed bin (35), fixed bin (35));
      dcl	    expand_pathname_       entry (char (*), char (*), char (*), fixed bin (35));
      dcl	    get_system_free_area_  entry () returns (ptr);
      dcl	    get_temp_segment_      entry (char (*), ptr, fixed bin (35));
      dcl	    release_temp_segment_  entry (char (*), ptr, fixed bin (35));
      dcl	    print_data_	       entry (char (*) var, ptr, fixed bin (35));

/* External */

      dcl	    sys_info$max_seg_size  fixed bin (35) ext static;
      dcl	    dm_error_$file_already_open
			       fixed bin (35) ext static;

/* END OF DECLARATIONS */

      display_flag = "0"b;
      display_file_header, display_info, display_header = "1"b;
      work_area_ptr = get_system_free_area_ ();

/* Process arguments. */

      call cu_$af_return_arg (nargs, return_arg_ptr, return_arg_len, code);
      if code = 0
      then is_active_function = "1"b;
      else if code = error_table_$not_act_fnc
      then is_active_function = "0"b;
      else
         do;
	  call com_err_ (code, myname);
	  return;
         end;

      if is_active_function
      then complain = active_fnc_err_;
      else complain = com_err_;

      if nargs = 0
      then
         do;
	  call complain (error_table_$noarg, myname, "^/Usage: ^a  {-control_args}", myname);
	  return;
         end;
      accept_control_argument = "1"b;
      control_argument_idx = 1;

ARG_PROCESSING_LOOP:
      do arg_idx = 1 to nargs;
         call cu_$arg_ptr (arg_idx, arg_ptr, arg_len, code);
         if char (arg, 1) ^= "-"
         then
PROCESS_ARG:
	  do;
	     goto ARG (control_argument_idx);


ARG (-1):						/* unexpected argument */
	     call complain (error_table_$badopt, myname, "Argument is out of place: ^a.", arg);
	     return;

ARG (1):						/* -file */
	     call expand_pathname_ (arg, file_dir, file_entry, code);
	     if code ^= 0
	     then
	        do;
		 call complain (code, myname, "^/Unable to expand the pathname ""^a"".", arg);
		 return;
	        end;

	     control_argument_idx = -1;
	     accept_control_argument = "1"b;
	     goto NEXT_1;
ARG (2):						/* -first_collection */
ARG (3):						/* -ftc */
	     first_collection_idx = bin (arg);

	     control_argument_idx = -1;
	     accept_control_argument = "1"b;
	     goto NEXT_1;
ARG (4):						/* -number_of_collections */
ARG (5):						/* -noc */
	     number_of_collections = bin (arg);

	     control_argument_idx = -1;
	     accept_control_argument = "1"b;
	     goto NEXT_1;
ARG (6):						/* -display */
ARG (7):						/* -ds */
	     if char (arg, 1) = "^"
	     then true_arg = substr (arg, 2);
	     else true_arg = arg;
	     do display_idx = 1 to hbound (DISPLAY_KEYWORD, 1)
		while (DISPLAY_KEYWORD (display_idx, 1) ^= true_arg & DISPLAY_KEYWORD (display_idx, 2) ^= true_arg);
	     end;
	     if display_idx > hbound (DISPLAY_KEYWORD, 1)
	     then
	        do;
		 call complain (error_table_$badopt, myname,
		      "^/Invalid display keyword ""^a"".  Valid display keywords are:
^v(^a (^a), ^)and ^a (^a).", arg, hbound (DISPLAY_KEYWORD, 1) - 1, DISPLAY_KEYWORD);
		 call FINISH;
		 return;
	        end;
	     display_flag (display_idx) = (arg = true_arg);

	     accept_control_argument = "1"b;
	     goto NEXT_1;

ARG (8):						/* -element */
ARG (9):						/* -el */
	     old_spec_ptr = element_spec_ptr;
	     alloc element_spec in (work_area);
	     if root_element_spec_ptr = null
	     then root_element_spec_ptr = element_spec_ptr;
	     else old_spec_ptr -> element_spec.next = element_spec_ptr;
	     element_spec.next = null;
	     element_spec.position = 0;
	     unspec (element_spec.id) = "0"b;
	     element_spec.collection_idx = bin (arg);
	     control_argument_idx = -2;
	     accept_control_argument = "0"b;
	     goto NEXT_1;

ARG (-2):
	     element_spec.id.control_interval_id = bin (arg);
	     control_argument_idx = -3;
	     accept_control_argument = "0"b;
	     goto NEXT_1;

ARG (-3):
	     element_spec.id.index = bin (arg);
	     control_argument_idx = -4;
	     accept_control_argument = "1"b;
	     goto NEXT_1;

ARG (-4):
	     element_spec.structure_name = arg;
	     control_argument_idx = -1;

	     accept_control_argument = "1"b;
	     goto NEXT_1;
NEXT_1:
	  end PROCESS_ARG;
         else if control_argument_idx ^= -1 & ^accept_control_argument
         then
	  do;
	     if control_argument_idx = -2 | control_argument_idx = -3
	     then control_argument_idx = 8;
	     call complain (error_table_$noarg, myname, "^a must be followed by a^[n^] ^a.",
		control_argument (control_argument_idx),
		(index ("aeiouh", substr (argument_type (control_argument_idx), 1, 1)) > 0),
		argument_type (control_argument_idx));
	     return;
	  end;
         else
PROCESS_CONTROL_ARG:
	  do;
	     do control_argument_idx = 1 to hbound (control_argument, 1)
		while (control_argument (control_argument_idx) ^= arg);
	     end;
	     if control_argument_idx > hbound (control_argument, 1)
	     then
	        do;
		 call complain (error_table_$badopt, myname, "^a", arg);
		 return;
	        end;

	     goto CONTROL_ARG (control_argument_idx);

CONTROL_ARG (0):
	     ;
CONTROL_ARG (1):					/* -file */
	     accept_control_argument = "0"b;
	     goto NEXT_ARG;

CONTROL_ARG (2):					/* -first_collection */
CONTROL_ARG (3):					/* -ftc */
	     accept_control_argument = "0"b;
	     goto NEXT_ARG;

CONTROL_ARG (4):					/* -number_of_collections */
CONTROL_ARG (5):					/* -noc */
	     accept_control_argument = "0"b;
	     goto NEXT_ARG;

CONTROL_ARG (6):					/* -display */
CONTROL_ARG (7):					/* -ds */
	     display_file_header, display_info, display_header = "1"b;
	     display_collection_id_table, display_element, display_element_in_characters = "0"b;

	     goto NEXT_ARG;

CONTROL_ARG (8):					/* -element */
CONTROL_ARG (9):					/* -el */
	     display_element = "1"b;

	     accept_control_argument = "0"b;
	     goto NEXT_ARG;

NEXT_ARG:
	     ;
	  end PROCESS_CONTROL_ARG;
      end ARG_PROCESSING_LOOP;
      if control_argument_idx ^= -1 & ^accept_control_argument
      then
         do;
	  if control_argument_idx = -2 | control_argument_idx = -3
	  then control_argument_idx = 8;
	  call complain (error_table_$noarg, myname, "^a must be followed by a^[n^] ^a.",
	       control_argument (control_argument_idx),
	       (index ("aeiouh", substr (argument_type (control_argument_idx), 1, 1)) > 0),
	       argument_type (control_argument_idx));
	  return;
         end;

      call get_temp_segment_ ((myname), temp_string_ptr, code);
      if code ^= 0
      then
         do;
	  call complain (code, myname, "^/Unable to get a temp_segment.");
	  call FINISH;
	  return;
         end;

      if file_dir = ""
      then
         do;
	  call complain (error_table_$noarg, myname, "^/A DM file pathname must be specified.");
	  call FINISH;
	  return;
         end;

      call file_manager_$open (file_dir, file_entry, file_opening_id, code);
      if code ^= 0 & code ^= dm_error_$file_already_open
      then
         do;
	  call complain (code, myname, "^/Unable to open the file ""^a^[>^]^a"".", file_dir, file_dir ^= ">",
	       file_entry);
	  call FINISH;
	  return;
         end;

      call cm_opening_info$get (file_opening_id, HEADER_COLLECTION_ID, cm_info_ptr, code);
      if code ^= 0
      then
         do;
	  call complain (code, myname, "^/Unable to get the opening info for the header collection (id ^o), for
file ""^a^[>^]^a"".", HEADER_COLLECTION_ID, file_dir, file_dir ^= ">", file_entry);
	  call FINISH;
	  return;
         end;

      call cm_get_element (cm_info.file_oid, cm_info.collection_id, CM_FILE_HEADER_ELEMENT_ID, 0,
	 addr (automatic_cm_file_header), length (unspec (automatic_cm_file_header)), null, ("0"b), cm_file_header_ptr,
	 (0), code);
      if code ^= 0
      then
         do;
	  call complain (code, myname, "^/Unable to get the file_header.");
	  call FINISH ();
	  return;
         end;


      if cm_file_header.number_of_collections = 0
      then
         do;
	  call complain (0, myname, "^/The file ""^a^[>^]^a"" contains no collections.", file_dir, file_dir ^= ">",
	       file_entry);
	  call FINISH;
	  return;
         end;

      print_data_info_ptr = addr (local_print_data_info);

      call cm_get_element (cm_info.file_oid, HEADER_COLLECTION_ID, cm_file_header.collection_id_table_element_id, 0, null,
	 (0), work_area_ptr, "1"b, collection_id_table_ptr, collection_id_table_length_in_bits, code);
      if code ^= 0
      then
         do;
	  call complain (code, myname, "^/Unable to get the collection_id_table.");
	  call FINISH ();
	  return;
         end;
      cit_number_of_collections = cm_file_header.number_of_collections;

      print_data_info.version = print_data_info_version_1;
      print_data_info.indentation = 2;
      print_data_info.value_column = 30;
      print_data_info.output_switch = null;
      print_data_info.flags.octal = "1"b;
      print_data_info.intervals = "";

      if display_file_header
      then
         do;
	  put string (temp_string) data (cm_file_header);
	  call print_data_ (temp_string, print_data_info_ptr, code);
	  if code ^= 0
	  then
	     do;
	        call complain (code, myname, "^/Unable to display the cm_file_header structure.");
	        call FINISH;
	        return;
	     end;

         end;
      if display_collection_id_table
      then
         do;
	  put string (temp_string) data (collection_id_table);
	  call print_data_ (temp_string, print_data_info_ptr, code);
	  if code ^= 0
	  then
	     do;
	        call complain (code, myname, "^/Unable to display the collection_id_table structure.");
	        call FINISH;
	        return;
	     end;
         end;

      if display_header_collection
      then
         do;
	  call ioa_ ("^/The header collection, id ^o:", HEADER_COLLECTION_ID);
	  if display_info
	  then
	     do;
	        put string (temp_string) data (cm_info);
	        call print_data_ (temp_string, print_data_info_ptr, code);
	     end;
	  if display_header
	  then
	     do;
	        put string (temp_string) data (cm_info.header_ptr -> collection_header);
	        call print_data_ (temp_string, print_data_info_ptr, code);
	     end;
         end;

      if first_collection_idx = 0
      then first_collection_idx = 1;
      if number_of_collections = 0
      then number_of_collections = cit_number_of_collections - first_collection_idx + 1;

      if ^display_element
      then
COLLECTION_LOOP:
         do collection_idx = first_collection_idx to first_collection_idx + number_of_collections - 1;

	  call ioa_ ("^/Collection ^d - id ^o:", collection_idx, collection_id_table (collection_idx));

	  call cm_opening_info$get (file_opening_id, collection_id_table (collection_idx), cm_info_ptr, code);
	  if code ^= 0
	  then
	     do;
	        call complain (code, myname, "^/Unable to get the opening info for the header collection (id ^o), for
file ""^a^[>^]^a"".", collection_id_table (collection_idx), file_dir, file_dir ^= ">", file_entry);
	        call FINISH;
	        return;
	     end;

	  if display_info
	  then
	     do;
	        put string (temp_string) data (cm_info);
	        call print_data_ (temp_string, print_data_info_ptr, code);
	        if code ^= 0
	        then
		 do;
		    call complain (code, myname,
		         "^/Unable to display the cm_info structure for collection ^d, with id ^o.", collection_idx,
		         collection_id_table (collection_idx));
		    call FINISH;
		    return;
		 end;
	     end;
	  if display_header
	  then
	     do;
	        put string (temp_string) data (cm_info.header_ptr -> collection_header);
	        call print_data_ (temp_string, print_data_info_ptr, code);
	        if code ^= 0
	        then
		 do;
		    call complain (code, myname, "^/Unable to display the collection_header structure.");
		    call FINISH;
		    return;
		 end;
	     end;

         end COLLECTION_LOOP;
      else
ELEMENT_DISPLAY:
         do;
	  do element_spec_ptr = root_element_spec_ptr repeat (element_spec.next) while (element_spec_ptr ^= null);
	     if element_spec.collection_idx > 0
	     then current_collection_id = collection_id_table (element_spec.collection_idx);
	     else current_collection_id = HEADER_COLLECTION_ID;
	     call cm_get_element (file_opening_id, current_collection_id, unspec (element_spec.id),
		element_spec.position, null, (0), work_area_ptr, ("0"b), element_ptr, element_length, code);
	     if code ^= 0
	     then
	        do;
		 call complain (code, myname, "^/Unable to get element in slot ^d of control interval ^d 
(in collection number ^d with id ^o).", element_spec.id.index, element_spec.id.control_interval_id,
		      element_spec.collection_idx, current_collection_id);
		 call FINISH;
		 return;
	        end;

	     call ioa_ ("Element for slot ^d of control interval ^d (collection ^o,  number ^d):",
		element_spec.id.index, element_spec.id.control_interval_id, current_collection_id,
		element_spec.collection_idx);

	     if element_spec.structure_name ^= ""
	     then call DISPLAY_ELEMENT_BY_STRUCTURE (addr (element), (element_spec.structure_name), code);
	     else if display_element_in_characters
	     then call ioa_ ("^a", character_element);
	     else call ioa_ ("^.3b", element);

	     free element in (work_area);

	  end;
         end ELEMENT_DISPLAY;

      call FINISH;
      return;
%page;
FINISH:
   proc;
      if temp_string_ptr ^= null
      then call release_temp_segment_ ((myname), temp_string_ptr, code);
   end FINISH;
%page;
DISPLAY_ELEMENT_BY_STRUCTURE:
   proc (p_structure_ptr, p_structure_name, p_code);
      dcl	    cu_$arg_list_ptr       entry (ptr);
      dcl	    cu_$generate_call      entry (entry, ptr);
      dcl	    hcs_$make_entry	       entry (ptr, char (*), char (*), entry, fixed bin (35));
      dcl	    p_structure_ptr	       ptr parameter;
      dcl	    p_structure_name       char (*) parameter;
      dcl	    p_code	       fixed bin (35);
      dcl	    arg_list_ptr	       ptr;
      dcl	    structure_entry	       entry variable;
      dcl	    procedure_name	       char (32);

      procedure_name = "display_" || rtrim (p_structure_name) || "_";

      call hcs_$make_entry (null, procedure_name, procedure_name, structure_entry, p_code);
      if p_code ^= 0
      then return;

      call MAKE_STRUCTURE_CALL (p_structure_ptr, temp_string);

      call print_data_ (temp_string, print_data_info_ptr, p_code);

      return;

MAKE_STRUCTURE_CALL:
   proc () options (variable);

      call cu_$arg_list_ptr (arg_list_ptr);
      call cu_$generate_call (structure_entry, arg_list_ptr);
   end MAKE_STRUCTURE_CALL;
   end DISPLAY_ELEMENT_BY_STRUCTURE;
%page;
/* BEGIN INCLUDE FILE control_argument_dcls.incl.pl1 */

/* This file contains all of the commonly used declarations for commands 
concerning control argument processing.

Written  by  Lindsey Spratt, 08/28/79
*/
      dcl	    cu_$arg_count	       entry returns (fixed bin);
      dcl	    cu_$arg_ptr	       entry (fixed bin, ptr, fixed bin, fixed bin (35));
      dcl	    cu_$af_return_arg      entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
      dcl	    com_err_	       entry options (variable);
      dcl	    active_fnc_err_	       entry () options (variable);
      dcl	    complain	       entry () variable options (variable);
      dcl	    return_arg	       char (return_arg_len) based (return_arg_ptr) varying;
      dcl	    return_arg_len	       fixed bin (21);
      dcl	    return_arg_ptr	       ptr;
      dcl	    arg		       based (arg_ptr) char (arg_len);
      dcl	    arg_ptr	       ptr;
      dcl	    arg_len	       fixed bin;
      dcl	    arg_idx	       fixed bin;
      dcl	    nargs		       fixed bin;

      dcl	    control_argument_idx   fixed bin;
      dcl	    accept_control_argument
			       bit (1);
      dcl	    is_active_function     bit (1);
      dcl	    code		       fixed bin (35);

      dcl	    error_table_$noarg     fixed bin (35) ext;
      dcl	    error_table_$badopt    fixed bin (35) ext;
      dcl	    error_table_$bad_arg   fixed bin (35) ext;
      dcl	    error_table_$not_act_fnc
			       fixed bin (35) ext;	/*dcl error_table_$active_function fixed bin(35) ext; */

/* END INCLUDE FILE control_argument_dcls.incl.pl1 */
%page;
%page;
%include dm_cm_hdr_col_ids;
%page;
%include dm_hdr_collection_id;
%page;
%include dm_cm_info;
%page;
%include dm_cm_collection_header;
%page;
%include dm_cm_storage_record;
%page;
%include dm_element_id;
%page;
%include print_data_info;
%page;
%include dm_cm_file_header;
   end collmgr_display;
