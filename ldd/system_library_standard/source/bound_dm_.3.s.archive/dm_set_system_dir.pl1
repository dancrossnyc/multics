/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/*  DESCRIPTION:

	dm_set_system_dir is an unprivileged command to change the DM
     system directory for a process.  The subroutine it calls requires the
     user not be using a DMS and the directory must exist.  This directory
     will then be used for all further DM use, such as finding the current
     DM AIM directory for the process.

     Syntax:  dm_set_system_dir dir_path {-ctl_args}
*/

/* HISTORY:

Written by J. Bongiovanni, 08/15/82.
Modified:
09/16/82 by M. Pandolf:  for modified call to dm_priv_$initialize_system.
06/10/83 by Lee A. Newcomb:  to remove init_dm_system entry, better ways
	  exist.
10/07/83 by Lee A. Newcomb:  to use dm_daemon_gate_, not the obsolete
	  dm_priv_ gate.
10/10/84 by R. Michael Tague: Fixed auditing comments.  Added -auth argument
	  to set_dm_aim_dir.pl1.  Changed set_dm_aim_dir to call through tv
	  and to call $create_aim_control_seg.
11/22/84 by Lee A. Newcomb:  Removed the obsolete set_dm_aim_dir cmd.
	  AIM directories are now found via the use of
	  convert_authorization_$encode, with the system_low dir
	  being the same as the system dir.
02/21/85 by Lee A. Newcomb:  Added the control args -brief and -long
            (MCR7018), and changed to use the ERROR_RETURN, FINISH,
            PROCESS_ARGUMENT, etc.  mechanisms.
*/

/* format: style2,ll79,ind3,^indprocbody,ifthendo,ifthen,^indnoniterdo,^inddcls,dclind5,idind35,linecom */
%page;
dm_set_system_dir:
   proc options (variable);

/* START OF DECLARATIONS */

/*  Parameter  */
/*  Automatic  */
dcl  (
     accept_control_argument		bit (1) aligned init (YES),
     arg_idx			fixed bin init (0),
     arg_len			fixed bin (21) init (0),
     arg_list_ptr			ptr init (null),
     arg_ptr			ptr init (null),
     code				fixed bin (35) init (0),
     control_argument_idx		fixed bin init (1), /* 1 ==> accept pathname */
     dir_name			char (168) init (BAD_DIR_PATHNAME),
     force_interpretation_as_argument	bit (1) aligned init (NO),
     is_active_function		bit (1) aligned init (NO),
     number_of_args			fixed bin init (-1),
     print_confirmation_of_setting	bit (1) aligned init (YES),
     sci_ptr			ptr init (null)
     )				automatic;

/* Based  */
dcl  arg				char (arg_len) based (arg_ptr);

/* Builtin */
dcl  (addr, hbound, index, null, substr)
				builtin;

/* Condition */
dcl  cleanup			condition;

/* Constant */
dcl  (
     ARGUMENT_TYPE			(6) char (64) varying
				init ("system dir pathname",
				"system dir pathname", "", "", "", ""),
     BAD_DIR_PATHNAME		char (2) init ("><"),
     CONTROL_ARGUMENT		(6) char (64) varying
				init ("", "", "-brief", "-bf", "-long",
				"-lg"),
     IOA_GENERAL_RS_NO_NEW_LINE	bit (1) aligned init (""b),
     IOA_GENERAL_RS_DONT_PAD		bit (1) aligned init (""b),
     NO				bit (1) aligned init (""b),
     SSU_INVOCATION_ERR_MSG		char (49)
				init (
				"Cannot establish standalone subsystem invocation."
				),
     YES				bit (1) aligned init ("1"b),
     myname			char (32) init ("dm_set_system_dir")
     )				internal static options (constant);

/*  Entry  */
dcl  (
     absolute_pathname_		entry (char (*), char (*),
				fixed bin (35)),
     com_err_			entry options (variable),
     cu_$arg_list_ptr		entry (ptr),
     dm_misc_util_$set_system_dir	entry (char (*)),
     ioa_				entry options (variable),
     ioa_$general_rs		entry (ptr, fixed bin, fixed bin,
				char (*), fixed bin (21),
				bit (1) aligned, bit (1) aligned),
     ssu_$abort_line		entry () options (variable),
     ssu_$arg_ptr			entry (ptr, fixed bin, ptr,
				fixed bin (21)),
     ssu_$destroy_invocation		entry (ptr),
     ssu_$return_arg		entry (ptr, fixed bin, bit (1) aligned,
				ptr, fixed bin (21)),
     ssu_$standalone_invocation	entry (ptr, char (*), char (*), ptr,
				entry, fixed bin (35))
     )				external;

/*  External */
dcl  (
     error_table_$active_function,
     error_table_$bad_arg,
     error_table_$badopt,
     error_table_$noarg
     )				fixed bin (35) external;

/* END OF DECLARATIONS */
%page;
/* dm_set_system_dir:			repeat for reader	*/
/*    proc options (variable);				*/

SETUP_INVOCATION:
   do;
      call cu_$arg_list_ptr (arg_list_ptr);
      on cleanup call CLEAN_UP ();

      call ssu_$standalone_invocation (sci_ptr, myname, "", arg_list_ptr,
	 ABORT_ENTRY, code);
      if code ^= 0 then				/* should be VERY rare */
         call ERROR_RETURN_FROM_SSU_SETUP (code);

      call ssu_$return_arg (sci_ptr, number_of_args, is_active_function,
	 (null ()), (0));				/* don't care what AF return info is */

      if is_active_function then
         call ERROR_RETURN (error_table_$active_function);
   end SETUP_INVOCATION;


ARG_PROCESSING_LOOP:
   do arg_idx = 1 to number_of_args;
      call ssu_$arg_ptr (sci_ptr, arg_idx, arg_ptr, arg_len);
      if index (arg, "-") ^= 1 | force_interpretation_as_argument = YES then
         call PROCESS_ARGUMENT (arg, control_argument_idx,
	    accept_control_argument);
      else if accept_control_argument = YES then
         call PROCESS_CONTROL_ARGUMENT (arg, control_argument_idx,
	    accept_control_argument, force_interpretation_as_argument);
      else call REPORT_MISSING_ARGUMENT (control_argument_idx);
   end ARG_PROCESSING_LOOP;

   if control_argument_idx >= 0 & accept_control_argument = NO then
      call REPORT_MISSING_ARGUMENT (control_argument_idx);

/* set it */
   if dir_name = BAD_DIR_PATHNAME then
      call ERROR_RETURN (error_table_$noarg, "No directory path given.");
   call dm_misc_util_$set_system_dir (dir_name);

   if print_confirmation_of_setting then		/* tell user we did it */
      call ioa_ ("^a: Data Management Per-System directory set to ^a", myname,
	 dir_name);

   call RETURN ();					/* and go home */
%page;
MAIN_RETURN:
   return;
%skip (4);
RETURN:
   proc ();
ABORT_ENTRY:
   entry ();					/* ABORT currently same as RETURN */

   call FINISH ();
   go to MAIN_RETURN;

   end RETURN;
%skip (4);
FINISH:
   proc ();
CLEAN_UP:
   entry ();					/* CLEAN_UP currently same as FINISH */

   call ssu_$destroy_invocation (sci_ptr);

   return;

   end FINISH;
%page;
PROCESS_ARGUMENT:
   proc (pa_p_arg, pa_p_control_argument_idx, pa_p_accept_control_argument);

dcl  pa_p_arg			char (*) parm;
dcl  pa_p_control_argument_idx	fixed bin parm;
dcl  pa_p_accept_control_argument	bit (1) aligned parm;

dcl  pa_code			fixed bin (35) init (0);


   goto ARGUMENT (pa_p_control_argument_idx);

ARGUMENT (-1):
   call ERROR_RETURN (error_table_$bad_arg,
        "^/The argument ""^a"" is out of place.", arg);
   return;

ARGUMENT (1):					/* system dir pathname */
ARGUMENT (2):					/* system dir pathname */
   if dir_name ^= BAD_DIR_PATHNAME then
      call ERROR_RETURN (error_table_$bad_arg,
	 "Attempt to use more than one system directory: ^a", arg);
   call absolute_pathname_ (arg, dir_name, code);
   if code ^= 0 then
      call ERROR_RETURN (code, arg);
   control_argument_idx = 1;
   accept_control_argument = YES;
   return;

   end PROCESS_ARGUMENT;
%page;
PROCESS_CONTROL_ARGUMENT:
   proc (pca_p_arg, pca_p_control_argument_idx, pca_p_accept_control_argument,
        pca_p_force_interpretation_as_argument);


dcl  pca_p_arg			char (*) parm;
dcl  pca_p_control_argument_idx	fixed bin parm;
dcl  pca_p_accept_control_argument	bit (1) aligned parm;
dcl  pca_p_force_interpretation_as_argument
				bit (1) aligned parm;

   pca_p_control_argument_idx = CONTROL_ARGUMENT_INDEX (pca_p_arg);
   pca_p_accept_control_argument = YES;
   pca_p_force_interpretation_as_argument = NO;

   go to CONTROL_ARGUMENT (pca_p_control_argument_idx);

CONTROL_ARGUMENT (-1):				/* not a control argument */
   call ERROR_RETURN (error_table_$badopt, pca_p_arg);

CONTROL_ARGUMENT (1):				/* system dir pathname */
CONTROL_ARGUMENT (2):				/* system dir pathname */
   pca_p_accept_control_argument = NO;
   return;


CONTROL_ARGUMENT (3):				/* -brief */
CONTROL_ARGUMENT (4):				/* -bf */
   print_confirmation_of_setting = NO;

   pca_p_control_argument_idx = 1;
   pca_p_accept_control_argument = YES;
   return;


CONTROL_ARGUMENT (5):				/* -long */
CONTROL_ARGUMENT (6):				/* -lg */
   print_confirmation_of_setting = YES;

   pca_p_control_argument_idx = 1;
   pca_p_accept_control_argument = YES;
   return;

   end PROCESS_CONTROL_ARGUMENT;
%page;
CONTROL_ARGUMENT_INDEX:
   proc (cai_p_arg) returns (fixed bin);

dcl  cai_p_arg			char (*);
dcl  cai_control_argument_idx		fixed bin;

   do cai_control_argument_idx = 1 to hbound (CONTROL_ARGUMENT, 1)
        while (CONTROL_ARGUMENT (cai_control_argument_idx) ^= cai_p_arg);
   end;
   if cai_control_argument_idx > hbound (CONTROL_ARGUMENT, 1) then
      return (-1);
   else return (cai_control_argument_idx);

   end CONTROL_ARGUMENT_INDEX;
%skip (4);
REPORT_MISSING_ARGUMENT:
   proc (rma_p_control_argument_idx);

dcl  rma_p_control_argument_idx	fixed bin parm;

   call ERROR_RETURN (error_table_$noarg, "^a must be followed by a^[n^] ^a.",
        CONTROL_ARGUMENT (rma_p_control_argument_idx),
        (
        index ("aeiouh",
        substr (ARGUMENT_TYPE (rma_p_control_argument_idx), 1, 1)) > 0),
        ARGUMENT_TYPE (rma_p_control_argument_idx));

   end REPORT_MISSING_ARGUMENT;
%page;
ERROR_RETURN_FROM_SSU_SETUP:
   proc (erfss_p_code);

dcl  erfss_p_code			fixed bin (35) parameter;

   call com_err_ (erfss_p_code, myname, SSU_INVOCATION_ERR_MSG);

   go to MAIN_RETURN;				/* FINISH skipped since nothing to destroy */

   end ERROR_RETURN_FROM_SSU_SETUP;
%skip (4);
ERROR_RETURN:
   proc options (variable);

dcl  (
     er_arg_list_ptr		ptr,
     er_code			fixed bin (35),
     er_message			char (1024),
     er_message_length		fixed bin (21)
     )				automatic;

dcl  (
     er_fixed_bin_35_value		fixed bin (35),
     er_message_overlay		char (er_message_length)
     )				based;

   call cu_$arg_list_ptr (er_arg_list_ptr);
   er_code = er_arg_list_ptr -> arg_list.arg_ptrs (1) -> er_fixed_bin_35_value;

   if er_arg_list_ptr -> arg_list.arg_count > 1 then do;
      call ioa_$general_rs (er_arg_list_ptr, 2, 3, er_message,
	 er_message_length, IOA_GENERAL_RS_DONT_PAD,
	 IOA_GENERAL_RS_NO_NEW_LINE);
      call ssu_$abort_line (sci_ptr, er_code,
	 addr (er_message) -> er_message_overlay);
   end;
   else						/* no extra info */
        call ssu_$abort_line (sci_ptr, er_code);

   end ERROR_RETURN;
%page;
%include arg_list;


   end dm_set_system_dir;
