/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1985 *
        *                                                         *
        *********************************************************** */

/* DESCRIPTION:

Displays the status of all of the fast locks currently being held or awaited on by processes using DM.
*/

/* HISTORY:

Written by S. Cox, 03/20/85.
Modified:
05/17/85 by S. Cox: Changed to check for locks with no waiters.
*/


/****^  HISTORY COMMENTS:
  1) change(87-04-27,GDixon), approve(87-07-08,MCR7741),
     audit(87-07-08,Hartogs), install(87-08-04,MR12.1-1055):
     Upgraded for change to answer_table.incl.pl1 and user_table_entry.incl.pl1
                                                   END HISTORY COMMENTS */


/* format: style2,^inddcls,ifthenstmt,ifthendo,^indnoniterdo,^inditerdo,ind3,idind32 */
%page;
dm_fast_lock_status:
dmflst:
   proc ();

/* START OF DECLARATIONS */
/* Automatic */

dcl     accept_control_argument	bit (1) aligned init ("0"b);
dcl     answer_table_idx		fixed bin;
dcl     at_least_one_lock		bit (1) init (NO);
dcl     arg_idx			fixed bin;
dcl     arg_len			fixed bin (21);
dcl     arg_list_ptr		ptr init (null);
dcl     arg_ptr			ptr;
dcl     code			fixed bin (35);
dcl     control_argument_idx		fixed bin;
dcl     display_all_locks		bit (1) init (YES);
dcl     display_header		bit (1) init (NO);
dcl     display_waiters		bit (1) init (YES);
dcl     end_of_chain		bit (1) init (NO);
dcl     display_line_ptr		ptr;
dcl     fast_lock_displayed		bit (1) init (NO);
dcl     first_waiter		bit (1);
dcl     force_interpretation_as_argument
				bit (1) aligned init (NO);
dcl     given_process_id		bit (1) init (NO);
dcl     given_user_id		bit (1) init (NO);
dcl     lock_list_index		fixed bin;
dcl     number_of_args		fixed bin;
dcl     person_id			char (22);
dcl     project_id			char (9);
dcl     process_id_fb		fixed bin (35);
dcl     process_id_list_ptr		ptr;
dcl     process_idx			fixed bin;
dcl     save_lock_list_block_ptr	ptr init (null);
dcl     sci_ptr			ptr init (null);
dcl     this_is_a_standalone_invocation bit (1) aligned init (YES);
dcl     user			char (34);
dcl     user_match			bit (1) init (NO);
dcl     work_area_ptr		ptr;

/* Based */

dcl     arg			char (arg_len) based (arg_ptr);
dcl     display_line		char (MAX_LINE_LENGTH) varying based (display_line_ptr);
dcl     1 process_id_list		based (process_id_list_ptr),
	2 count			fixed bin (17),
	2 id			(0 refer (process_id_list.count)) bit (36) aligned;
dcl     work_area			area based (work_area_ptr);

/* Builtin */

dcl     (cleanup, dm_not_available_)	condition;
dcl     (addr, addrel, after, before, hbound, index, ltrim, null, pointer, rel, reverse, size, substr, unspec)
				builtin;


/* Constant */

dcl     (
        YES			init ("1"b) bit (1),
        NO			init ("0"b) bit (1),
        WAIT			char (4) init ("WAIT"),
        ANSWER_TABLE		char (32) init ("answer_table"),
        ABSENTEE_USER_TABLE		char (32) init ("absentee_user_table"),
        DAEMON_USER_TABLE		char (32) init ("daemon_user_table"),
        SYSDIR			char (168) init (">system_control_1")
        )				internal static options (constant);

/****  pages/seg * words/page - area overhead - varying char overhead */
dcl     MAX_LINE_LENGTH		fixed bin (21) internal static options (constant) init (255 * 1024 - 36 - 1);

dcl     myname			init ("dm_fast_lock_status") char (19) internal static options (constant);

dcl     ARGUMENT_TYPE		(16) internal static options (constant) char (64) varying
				init ("", "", "", "", "", "", "process id holding a fast lock",
				"process id holding a fast lock", "", "", "user id holding a fast lock",
				"user id holding a fast lock", "", "", "", "");
dcl     CONTROL_ARGUMENT		(16) internal static options (constant) char (64) varying
				init ("-header", "-he", "-no_header", "-nhe", "-lock_waiters", "-lkw",
				"-process_id", "-pid", "-all", "-a", "-user", "-user", "-no_lock_waiters",
				"-nlkw", "-all_processes", "-ap");
      ;

/* Entry */

dcl     cu_$arg_list_ptr		entry (ptr);
dcl     cv_oct_check_		entry (char (*), fixed bin (35)) returns (fixed bin (35));
dcl     cv_userid_			entry (char (*)) returns (char (32));
dcl     get_userid_			entry (bit (36) aligned, char (*), char (*), fixed bin, fixed bin, fixed bin (35))
				;
dcl     initiate_file_		entry (char (*), char (*), bit (*), ptr, fixed bin (24), fixed bin (35));
dcl     match_star_name_		entry (char (*), char (*), fixed bin (35));
dcl     (
        ioa_,
        ioa_$rsnnl
        )				entry () options (variable);
dcl     lock_manager_$copy_fast_data	entry (ptr, ptr, fixed bin (35));
dcl     ssu_$abort_line		entry () options (variable);
dcl     ssu_$arg_count		entry (ptr, fixed bin);
dcl     ssu_$arg_ptr		entry (ptr, fixed bin, ptr, fixed bin (21));
dcl     ssu_$destroy_invocation	entry (ptr);
dcl     ssu_$get_area		entry (ptr, ptr, char (*), ptr);
dcl     ssu_$get_temp_segment		entry (ptr, char (*), ptr);
dcl     ssu_$standalone_invocation	entry (ptr, char (*), char (*), ptr, entry, fixed bin (35));
dcl     sub_err_			entry () options (variable);

/* External */

dcl     (
        dm_error_$system_not_initialized,
        error_table_$badopt,
        error_table_$bad_arg,
        error_table_$noarg,
        error_table_$unimplemented_version
        )				fixed bin (35) external;

/* END OF DECLARATIONS */

      call cu_$arg_list_ptr (arg_list_ptr);
      call ssu_$standalone_invocation (sci_ptr, myname, "", arg_list_ptr, ABORT_ENTRY, code);

      on cleanup call CLEANUP ();
      on dm_not_available_ call ERROR_RETURN (dm_error_$system_not_initialized, "");

      call ssu_$get_area (sci_ptr, null (), myname, work_area_ptr);
      call ssu_$get_temp_segment (sci_ptr, myname, fast_lock_data_ptr);
      call ssu_$get_temp_segment (sci_ptr, myname, process_id_list_ptr);

      process_id_list.count = 0;
      allocate display_line in (work_area);
      call lock_manager_$copy_fast_data (fast_lock_data_ptr, null (), code);
      if code ^= 0 then call ERROR_RETURN (code, "Getting temporary segment to hold lock data");
      call CHECK_VERSION (FAST_LOCK_DATA_VERSION_1, fast_lock_data.version, "fast_lock_data");

      call ssu_$arg_count (sci_ptr, number_of_args);

      accept_control_argument = YES;
      control_argument_idx = -1;

ARG_PROCESSING_LOOP:
      do arg_idx = 1 to number_of_args;
         call ssu_$arg_ptr (sci_ptr, arg_idx, arg_ptr, arg_len);
         if index (arg, "-") ^= 1 | force_interpretation_as_argument = YES
         then call PROCESS_ARGUMENT (arg, control_argument_idx, accept_control_argument);
         else if accept_control_argument = YES
         then call PROCESS_CONTROL_ARGUMENT (arg, control_argument_idx, accept_control_argument,
	         force_interpretation_as_argument);
         else call REPORT_MISSING_ARGUMENT (control_argument_idx);
      end ARG_PROCESSING_LOOP;

      if control_argument_idx >= 0 & accept_control_argument = NO
      then call REPORT_MISSING_ARGUMENT (control_argument_idx);
%skip;
      lock_list_head_ptr = addr (fast_lock_data.free_list_head);
      lock_list_block_ptr = addr (fast_lock_data.list);
      lock_list_block_words = size (fast_lock_wakeup_block);

      lock_list_index = 0;
COUNT_FREE_ENTRIES:
      do lock_list_block_ptr = addr (fast_lock_data.list)
	 repeat addrel (lock_list_block_ptr, size (lock_list_block))
	 while (lock_list_block_ptr ^= pointer (fast_lock_data_ptr, lock_list_head.firstp));
         lock_list_index = lock_list_index + 1;
      end COUNT_FREE_ENTRIES;

      if display_header
      then call ioa_$rsnnl ("Lock Data Offset: ^w^/Version: ^a^/Size: ^d^/"
	      || "Free List Head Offset: ^w^/Number Free Entries: ^d^/Number Allocated Entries: ^d^/", display_line,
	      (0), rel (fast_lock_data_ptr), fast_lock_data.version, fast_lock_data.size, lock_list_head.firstp,
	      lock_list_index + 1, (fast_lock_data.n_list_entries - lock_list_index - 1));

      lock_list_index = lock_list_index + 2;		/* skip to allocated block */
ALLOCATED_BLOCK_LOOP:
      do lock_list_block_ptr = addrel (pointer (fast_lock_data_ptr, lock_list_head.firstp), size (lock_list_block))
	 repeat addrel (lock_list_block_ptr, size (lock_list_block))
	 while (lock_list_index <= fast_lock_data.n_list_entries);
         fast_lock_block_ptr, fast_lock_wakeup_block_ptr = addr (lock_list_block.block_data);

         if fast_lock_wakeup_block.message ^= WAIT & fast_lock_block.uid ^= ""b
         then
PROCESS_ACTIVE_LOCK:
	  do;
	  call ioa_$rsnnl ("^[^a^/^;^s^]UID ^w Offset ^w", display_line, (0), display_header, display_line,
	       fast_lock_block.uid, fast_lock_block.offset);
	  display_header = NO;

	  save_lock_list_block_ptr = lock_list_block_ptr;
	  end_of_chain, user_match = NO;
	  first_waiter = YES;
FIND_LOCK_WAITERS:
	  do lock_list_block_ptr = pointer (fast_lock_data_ptr, fast_lock_block.list_head)
	       repeat pointer (fast_lock_data_ptr, lock_list_block.nextp)
	       while (^end_of_chain & fast_lock_block.list_head ^= ""b);
	     fast_lock_wakeup_block_ptr = addr (lock_list_block.block_data);
	     if ^user_match & given_process_id then do;	/* is this block's process one the user gave us? */
	        do process_idx = 1 to process_id_list.count
		   while (fast_lock_wakeup_block.processid ^= process_id_list.id (process_idx));
	        end;
	        if process_idx <= process_id_list.count then do;
		 user_match = YES;			/* found a match, need not check this fast lock again */
		 at_least_one_lock = YES;
	        end;
	     end;
	     else if display_all_locks then at_least_one_lock = YES;

	     call get_userid_ (fast_lock_wakeup_block.processid, person_id, project_id, (0), (0), code);
	     if display_waiters then do;
	        call ioa_$rsnnl ("^a^[^/Waiters for this lock:^]^/^3xProcess ID ^w ^[(^a.^a)^;^s^s^] Event Channel ^w",
		   display_line, (0), display_line, first_waiter, fast_lock_wakeup_block.processid, (code = 0),
		   person_id, project_id, fast_lock_wakeup_block.event_channel);
	        first_waiter = NO;
	     end;
	     if lock_list_block.nextp = ""b then end_of_chain = "1"b;
	  end FIND_LOCK_WAITERS;
	  lock_list_block_ptr = save_lock_list_block_ptr;
	  if user_match | display_all_locks then call ioa_ (display_line);
         end PROCESS_ACTIVE_LOCK;

         lock_list_index = lock_list_index + 1;
      end ALLOCATED_BLOCK_LOOP;

      if display_header then call ioa_ (display_line);	/* No fast locks and user wants to see header */
      if display_all_locks & ^at_least_one_lock then call ioa_ ("There are no processes waiting on fast locks.");
      else if ^at_least_one_lock & given_process_id then do;
         call get_userid_ (process_id_list.id (1), person_id, project_id, (0), (0), code);
         call ioa_ ("^/No fast locks waited on by specified process^[. Process ID" || " ^w ^[(^a.^a)^]^;^s^s^s^ses. ^a",
	    (process_id_list.count = 1), process_id_list.id (1), (code = 0), person_id, project_id, user);
      end;

      call FINISH ();

MAIN_RETURN:
      return;

ERROR_RETURN:
   proc (er_code, er_message);

dcl     er_code			fixed bin (35) parameter;
dcl     er_message			char (*) parameter;

      call ssu_$abort_line (sci_ptr, er_code, er_message);
   end;

ABORT_ENTRY:
   procedure ();
      call CLEANUP ();
      go to MAIN_RETURN;
   end ABORT_ENTRY;

CLEANUP:
   procedure ();
      call FINISH ();
   end CLEANUP;

FINISH:
   proc ();
      call ssu_$destroy_invocation (sci_ptr);
   end FINISH;

CHECK_VERSION:
   proc (cv_p_expected_version, cv_p_received_version, cv_p_structure_name);

dcl     cv_p_expected_version		char (8) aligned parameter;
dcl     cv_p_received_version		char (8) aligned parameter;
dcl     cv_p_structure_name		char (32) aligned parameter;

      if cv_p_expected_version ^= cv_p_received_version
      then call sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null (), 0,
	      "^/Expected version ^a of the ^a structure." || "^/Received version ^a instead.", cv_p_expected_version,
	      cv_p_structure_name, cv_p_received_version);
   end CHECK_VERSION;

GET_PROCESS_ID_FROM_USER_ID:
   proc (gp_p_user_id, gp_p_process_id_list_ptr);

dcl     gp_p_user_id		char (34) parameter;
dcl     gp_p_process_id_list_ptr	ptr;
dcl     1 gp_process_id_list		like process_id_list aligned based (gp_p_process_id_list_ptr);

      call GET_ANSWER_TABLES;

      do answer_table_idx = 1 to anstbl.current_size;
         utep = addr (anstbl.entry (answer_table_idx));
         if ute.active >= 4 then call MATCH_USER_TABLE_ENTRY (gp_p_user_id, gp_p_process_id_list_ptr);
      end;

      do answer_table_idx = 1 to autbl.current_size;
         utep = addr (autbl.entry (answer_table_idx));
         if ute.active >= 4 then call MATCH_USER_TABLE_ENTRY (gp_p_user_id, gp_p_process_id_list_ptr);
      end;

      do answer_table_idx = 1 to dutbl.current_size;
         utep = addr (dutbl.entry (answer_table_idx));
         if ute.active >= 4 then call MATCH_USER_TABLE_ENTRY (gp_p_user_id, gp_p_process_id_list_ptr);
      end;

      if gp_process_id_list.count = 0
      then call ERROR_RETURN (error_table_$bad_arg, "User not logged in. " || gp_p_user_id);

      return;

GET_ANSWER_TABLES:
   proc ();

dcl     gat_code			fixed bin (35);

      call initiate_file_ (SYSDIR, ANSWER_TABLE, R_ACCESS, ansp, (0), gat_code);
      if ansp = null () then call ERROR_RETURN (gat_code, ANSWER_TABLE);
      call initiate_file_ (SYSDIR, ABSENTEE_USER_TABLE, R_ACCESS, autp, (0), gat_code);
      if autp = null () then call ERROR_RETURN (gat_code, ABSENTEE_USER_TABLE);
      call initiate_file_ (SYSDIR, DAEMON_USER_TABLE, R_ACCESS, dutp, (0), gat_code);
      if dutp = null () then call ERROR_RETURN (gat_code, DAEMON_USER_TABLE);
   end;
%skip;
MATCH_USER_TABLE_ENTRY:
   proc (mu_p_user_id, mu_p_process_id_list_ptr);

dcl     mu_p_process_id_list_ptr	ptr parameter;
dcl     mu_p_user_id		char (34) parameter;
dcl     1 mu_process_id_list		like process_id_list aligned based (mu_p_process_id_list_ptr);
dcl     mu_code			fixed bin (35);

      call match_star_name_ ((ute.person), before (mu_p_user_id, "."), mu_code);
      if mu_code = 0 then call match_star_name_ ((ute.project), before (after (mu_p_user_id, "."), "."), mu_code);
      if mu_code = 0 then call match_star_name_ ((ute.tag), before (ltrim (reverse (mu_p_user_id)), "."), mu_code);
      if mu_code = 0 then do;
         mu_process_id_list.count = mu_process_id_list.count + 1;
         mu_process_id_list.id (mu_process_id_list.count) = ute.proc_id;
      end;

   end;
   end;
%page;
PROCESS_ARGUMENT:
   proc (pa_p_arg, pa_p_control_argument_idx, pa_p_accept_control_argument);

dcl     pa_p_arg			char (*) parm;
dcl     pa_p_control_argument_idx	fixed bin parm;
dcl     pa_p_accept_control_argument	bit (1) aligned parm;

dcl     pa_code			fixed bin (35);

      pa_code = 0;

      goto ARGUMENT (pa_p_control_argument_idx);
ARGUMENT (-1):
      call ssu_$abort_line (sci_ptr, error_table_$bad_arg, "^/The argument ""^a"" is out of place.", arg);
      return;

ARGUMENT (7):					/* -process_id */
ARGUMENT (8):					/* -pid */
      control_argument_idx = -1;
      accept_control_argument = YES;
      process_id_fb = cv_oct_check_ (arg, code);
      process_id_list.count = 1;
      unspec (process_id_list.id (1)) = unspec (process_id_fb);
      if code ^= 0 then call ERROR_RETURN (code, arg);
      given_process_id = YES;
      display_all_locks = NO;
      return;

ARGUMENT (11):					/* -user */
ARGUMENT (12):					/* -user */
      control_argument_idx = -1;
      accept_control_argument = YES;
      user = cv_userid_ (arg);
      call GET_PROCESS_ID_FROM_USER_ID (user, process_id_list_ptr);
      given_process_id = YES;
      display_all_locks = NO;
      return;

   end PROCESS_ARGUMENT;
%page;
PROCESS_CONTROL_ARGUMENT:
   proc (pca_p_arg, pca_p_control_argument_idx, pca_p_accept_control_argument, pca_p_force_interpretation_as_argument);


dcl     pca_p_arg			char (*) parm;
dcl     pca_p_control_argument_idx	fixed bin parm;
dcl     pca_p_accept_control_argument	bit (1) aligned parm;
dcl     pca_p_force_interpretation_as_argument
				bit (1) aligned parm;

      pca_p_control_argument_idx = CONTROL_ARGUMENT_INDEX (pca_p_arg);
      pca_p_accept_control_argument = YES;
      pca_p_force_interpretation_as_argument = NO;

      go to CONTROL_ARGUMENT (pca_p_control_argument_idx);

CONTROL_ARGUMENT (-1):				/* not a control argument */
      call ssu_$abort_line (sci_ptr, error_table_$badopt, pca_p_arg);

CONTROL_ARGUMENT (1):				/* -header */
CONTROL_ARGUMENT (2):				/* -he */
      display_header = YES;
      pca_p_control_argument_idx = -1;
      pca_p_accept_control_argument = YES;
      return;

CONTROL_ARGUMENT (3):				/* -no_header */
CONTROL_ARGUMENT (4):				/* -nhe */
      display_header = NO;
      pca_p_control_argument_idx = -1;
      pca_p_accept_control_argument = YES;
      return;

CONTROL_ARGUMENT (5):				/* -lock_waiters */
CONTROL_ARGUMENT (6):				/* -lkw */
      display_waiters = YES;
      pca_p_control_argument_idx = -1;
      pca_p_accept_control_argument = YES;
      return;


CONTROL_ARGUMENT (7):				/* -process_id */
CONTROL_ARGUMENT (8):				/* -pid */
      pca_p_accept_control_argument = NO;
      return;


CONTROL_ARGUMENT (9):				/* -all */
CONTROL_ARGUMENT (10):				/* -a */
      display_all_locks = YES;
      pca_p_control_argument_idx = -1;
      pca_p_accept_control_argument = YES;
      return;


CONTROL_ARGUMENT (11):				/* -user */
CONTROL_ARGUMENT (12):				/* -user */
      pca_p_accept_control_argument = NO;
      return;


CONTROL_ARGUMENT (13):				/* -no_lock_waiters */
CONTROL_ARGUMENT (14):				/* -nlkw */
      display_waiters = NO;
      pca_p_control_argument_idx = -1;
      pca_p_accept_control_argument = YES;
      return;


CONTROL_ARGUMENT (15):				/* -all_processes */
CONTROL_ARGUMENT (16):				/* -ap */
      display_all_locks = YES;
      given_process_id = NO;
      pca_p_control_argument_idx = -1;
      pca_p_accept_control_argument = YES;
      return;


   end PROCESS_CONTROL_ARGUMENT;


CONTROL_ARGUMENT_INDEX:
   proc (cai_p_arg) returns (fixed bin);

dcl     cai_p_arg			char (*);
dcl     cai_control_argument_idx	fixed bin;

      do cai_control_argument_idx = 1 to hbound (CONTROL_ARGUMENT, 1)
	 while (CONTROL_ARGUMENT (cai_control_argument_idx) ^= cai_p_arg);
      end;
      if cai_control_argument_idx > hbound (CONTROL_ARGUMENT, 1)
      then return (-1);
      else return (cai_control_argument_idx);

   end CONTROL_ARGUMENT_INDEX;

REPORT_MISSING_ARGUMENT:
   proc (rma_p_control_argument_idx);
dcl     rma_p_control_argument_idx	fixed bin parm;

      call ssu_$abort_line (sci_ptr, error_table_$noarg, "^a must be followed by a^[n^] ^a.",
	 CONTROL_ARGUMENT (rma_p_control_argument_idx),
	 (index ("aeiouh", substr (ARGUMENT_TYPE (rma_p_control_argument_idx), 1, 1)) > 0),
	 ARGUMENT_TYPE (rma_p_control_argument_idx));
   end REPORT_MISSING_ARGUMENT;

%page; %include absentee_user_table;
%page; %include access_mode_values;
%page; %include answer_table;
%page; %include daemon_user_table;
%page; %include dm_fast_lock_strucs;
%page; %include dm_lock_list_strucs;
%page; %include sub_err_flags;
%page; %include user_attributes;
%page; %include user_table_entry;
%page; %include user_table_header;

   end dm_fast_lock_status;
