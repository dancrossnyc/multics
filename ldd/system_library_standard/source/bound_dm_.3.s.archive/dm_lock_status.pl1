/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/*  DESCRIPTION:
    Program to display the Data Management lock_seg. Data Management
    must be initialized for this process.

    dm_lock_status {-control_args}

    Control Arguments:
-all_transactions, -atxn
   displays lock data for all transactions.
-current_transaction, -ctxn
   displays lock data for the current transaction in the user's
   process.  (DEFAULT)
-file_locks, -flk
   displays file-level locks.  (DEFAULT)
-no_file_locks, -nflk
   suppresses the display of file-level locks.
-control_interval_locks, -cilk
   displays control-interval-level locks.  (DEFAULT)
-no_control_interval_locks, -ncilk
   suppresses the display of control-interval-level locks.
-header, -he
   displays data from the header of the lock database.
-no_header, -nhe
   suppresses the display of data from the header of the lock database.
   (DEFAULT)


Notes:  This command requires e (execute) access to the dm_admin_gate_.
*/

/* HISTORY:

Written by J. Bongiovanni, 11/01/82.
Modified:
12/01/82 by J. Bongiovanni:  For multi-segment lock data.
04/25/83 by Benson I. Margulies:  To add -file, interpret process ids.
04/29/83 by Benson I. Margulies:  To use lock_manager_$copy_data.
05/01/84 by R. Michael Tague:  Added the History section.  Added
            %include dm_lm_meters.
10/19/84 by Stanford S. Cox:  For DM program standards.
11/29/84 by Lindsey L. Spratt:  Renamed from display_lm_data to
            dm_lock_status.  Completely reconstructed the argument processing.
            Changed to be a ssu_ standalone invocation.
12/05/84 by Lindsey L. Spratt:  Added the REPORT_MISSING_ARGUMENT proc.
01/02/85 by Lindsey L. Spratt:  Changed to use
            hbound(lock_seg.transaction_table,1), instead of
            dm_system_data_$max_n_transactions.
           Changed to use more of ssu_'s services, where feasible;
            ssu_$get/release_area, ssu_$get/release_temp_segment.  Fixed the
            allocations to be done in ssu_area.  Added new internal proc,
            REPORT_INVALID_VIRTUAL_POINTER, and changed all reports of invalid
            virtual ptrs to use it.  This proc gives the invalid value, while
            the old messages did not.  Changed to use an "indent" variable in
            DISPLAY_LOCK and DISPLAY_TRANSACTION to specify the level of
            indentation of the messages.  Fixed variables in
            DISPLAY_TRANSACTION to have the dt_ prefix instead of the dp_
            prefix.

01/04/85 by Lindsey L. Spratt:  Added the DISPLAY_BLOCK_LIST internal proc to
            have a common subr for displaying the lists of waiters and owners.
02/08/85 by Lindsey L. Spratt:  Changed dcl of temp_string to have a length of
            (sys_info$max_seg_size-1)*4, to allow for the length word.
            Removed spurious check of "code" after call of
            ssu_$get_temp_segment.
03/19/85 by S. Cox: Added dm_not_available_ handler.
*/

/* format: style2,ind3 */
dm_lock_status:
   procedure options (variable);

/*  Automatic  */

      dcl	    accept_control_argument
			       bit (1) aligned init ("0"b);
      dcl	    arg_idx	       fixed bin;
      dcl	    arg_len	       fixed bin (21);
      dcl	    arg_list_ptr	       ptr init (null);
      dcl	    arg_ptr	       ptr;
      dcl	    cur_txn_id	       bit (36) aligned;
      dcl	    code		       fixed bin (35);
      dcl	    control_argument_idx   fixed bin;
      dcl	    display_control_interval_locks
			       bit (1) aligned init (YES);
      dcl	    display_file_locks     bit (1) aligned init (YES);
      dcl	    display_hash_table     bit (1) aligned init (NO);
      dcl	    display_header	       bit (1) aligned init (NO);
      dcl	    duplication_indicator_has_been_displayed
			       bit (1) aligned init (NO);
      dcl	    force_interpretation_as_argument
			       bit (1) aligned init (NO);
      dcl	    hash_table_idx	       fixed bin;
      dcl	    is_active_function     bit (1) aligned init (NO);
      dcl	    number_of_args	       fixed bin;
      dcl	    previous_bucket	       bit (36) aligned;
      dcl	    1 pdi		       aligned like print_data_info;
      dcl	    return_arg_len	       fixed bin (21) init (0);
      dcl	    return_arg_ptr	       ptr init (null);
      dcl	    sci_ptr	       ptr init (null);
      dcl	    ssu_area_ptr	       ptr init (null);
      dcl	    temp_string_ptr	       ptr init (null);
      dcl	    there_is_an_active_transaction
			       bit (1) aligned init (NO);
      dcl	    this_is_a_standalone_invocation
			       bit (1) aligned init (YES);
      dcl	    transaction_idx	       fixed bin;
      dcl	    transaction_selection  fixed bin (35) init (CURRENT_TRANSACTION);

/*  Based  */

      dcl	    arg		       char (arg_len) based (arg_ptr);
      dcl	    ssu_area	       area (1024) based (ssu_area_ptr);
      dcl	    temp_string	       char ((sys_info$max_seg_size - 1) * 4) varying based (temp_string_ptr);

/* Builtin */

      dcl	    (addr, bin, hbound, index, null, ptr, setwordno, substr, unspec)
			       builtin;

/* Condition */

      dcl	    (cleanup, dm_not_available_)
			       condition;

/* Constant */

      dcl	    myname	       init ("dm_lock_status") char (14) internal static options (constant);
      dcl	    (
	    YES		       init ("1"b),
	    NO		       init ("0"b)
	    )		       bit (1) aligned internal static options (constant);


      dcl	    (
	    ALL_TRANSACTIONS       init (1),
	    CURRENT_TRANSACTION    init (0)
	    )		       fixed bin (35) internal static options (constant);

      dcl	    FILE_LOCK_CI_NUMBER    init (-1) fixed bin (35) internal static options (constant);
      dcl	    DEFAULT_AREA_INFO_PTR  init (null) ptr internal static options (constant);

      dcl	    ARGUMENT_TYPE	       (20) internal static options (constant) char (64) varying
			       init ("", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "")
			       ;

      dcl	    CONTROL_ARGUMENT       (20) internal static options (constant) char (64) varying
			       init ("-all_transactions", "-atxn", "-current_transaction", "-ctxn", "-file_locks",
			       "-flk", "-no_file_locks", "-nflk", "-control_interval_locks", "-cilk",
			       "-no_control_interval_locks", "-ncilk", "-header", "-he", "-no_header", "-nhe",
			       "-hash_table", "-ht", "-no_hash_table", "-nht");


/*  External  */

      dcl	    (
	    dm_error_$no_current_transaction,
	    dm_error_$system_not_initialized,
	    error_table_$bad_arg,
	    error_table_$badopt,
	    error_table_$noarg,
	    error_table_$smallarg,
	    error_table_$unimplemented_version
	    )		       fixed bin (35) external;

      dcl	    sys_info$max_seg_size  fixed bin (35) ext static;

/*  Entry  */

      dcl	    cu_$arg_list_ptr       entry (ptr);
      dcl	    get_temp_segments_     entry (character (*), (*) pointer, fixed binary (35));
      dcl	    ioa_		       entry options (variable);
      dcl	    lock_manager_$copy_data
			       entry (ptr, fixed bin (35));
      dcl	    lock_manager_$system_segment_count
			       entry (fixed bin (35)) returns (fixed bin);
      dcl	    print_data_	       entry (character (*) var, pointer, fixed binary (35));
      dcl	    release_temp_segments_ entry (character (*), (*) pointer, fixed binary (35));
      dcl	    ssu_$abort_line	       entry () options (variable);
      dcl	    ssu_$arg_count	       entry (ptr, fixed bin);
      dcl	    ssu_$arg_ptr	       entry (ptr, fixed bin, ptr, fixed bin (21));
      dcl	    ssu_$destroy_invocation
			       entry (ptr);
      dcl	    ssu_$get_area	       entry (ptr, ptr, char (*), ptr);
      dcl	    ssu_$get_temp_segment  entry (ptr, char (*), ptr);
      dcl	    ssu_$release_area      entry (ptr, ptr);
      dcl	    ssu_$release_temp_segment
			       entry (ptr, ptr);
      dcl	    ssu_$standalone_invocation
			       entry (ptr, char (*), char (*), ptr, entry, fixed bin (35));
      dcl	    sub_err_	       entry () options (variable);
      dcl	    transaction_manager_$get_current_txn_id
			       entry (bit (36) aligned, fixed bin (35));
      dcl	    transaction_manager_$get_txn_info
			       entry (bit (36) aligned, ptr, fixed bin (35));

      pdi.version = print_data_info_version_1;
      pdi.indentation = 3;
      pdi.value_column = 30;
      pdi.output_switch = null ();
      pdi.octal = YES;
      pdi.intervals = "";

      lm_copy_data_ptr, lock_segments_ptr = null ();

      on cleanup call CLEANUP ();

      call cu_$arg_list_ptr (arg_list_ptr);
      call ssu_$standalone_invocation (sci_ptr, myname, "", arg_list_ptr, ABORT_ENTRY, code);

      on dm_not_available_ call ssu_$abort_line (sci_ptr, dm_error_$system_not_initialized);

      call ssu_$get_area (sci_ptr, DEFAULT_AREA_INFO_PTR, "", ssu_area_ptr);

      call ssu_$arg_count (sci_ptr, number_of_args);

      accept_control_argument = YES;
      control_argument_idx = -1;

ARG_PROCESSING_LOOP:
      do arg_idx = 1 to number_of_args;
         call ssu_$arg_ptr (sci_ptr, arg_idx, arg_ptr, arg_len);
         if index (arg, "-") ^= 1 | force_interpretation_as_argument = YES
         then call PROCESS_ARGUMENT (arg, control_argument_idx, accept_control_argument);
         else if accept_control_argument = YES
         then call PROCESS_CONTROL_ARGUMENT (arg, control_argument_idx, accept_control_argument,
	         force_interpretation_as_argument);
         else call REPORT_MISSING_ARGUMENT (control_argument_idx);
      end ARG_PROCESSING_LOOP;

      if control_argument_idx >= 0 & accept_control_argument = NO
      then call REPORT_MISSING_ARGUMENT (control_argument_idx);

      call GET_SEGMENT_PTRS ();

      if display_header
      then
         do;
	  call ssu_$get_temp_segment (sci_ptr, "", temp_string_ptr);

	  put data (lock_seg.version, lock_seg.header) string (temp_string);

	  call print_data_ (temp_string, addr (pdi), (0));

	  call ioa_;
         end;

      lock_hash_table_ptr = setwordno (lock_seg_ptr, lock_seg.hash_table_offset);
      if lock_hash_table_ptr ^= addr (lock_seg.hash_table)
      then call ioa_ ("hash table offset is wrong");
      else if display_hash_table
      then
         do;
	  hash_table_idx = 1;
	  previous_bucket = unspec (lock_hash_table.buckets (1));
	  call ioa_ ("Bucket ^20tPointer to first lock object.");
	  call ioa_ ("^d ^20t^w", hash_table_idx, unspec (lock_hash_table.buckets (hash_table_idx)));
	  do hash_table_idx = 2 to lock_seg.n_hash_table_entries - 1;
	     if previous_bucket ^= unspec (lock_hash_table.buckets (hash_table_idx))
	     then
	        do;
		 call ioa_ ("^d ^20t^w", hash_table_idx, unspec (lock_hash_table.buckets (hash_table_idx)));
		 previous_bucket = unspec (lock_hash_table.buckets (hash_table_idx));
		 duplication_indicator_has_been_displayed = NO;
	        end;
	     else if duplication_indicator_has_been_displayed = NO
	     then
	        do;
		 call ioa_ ("===");
		 duplication_indicator_has_been_displayed = YES;
	        end;
	  end;
	  call ioa_ ("^d ^20t^w", hash_table_idx, unspec (lock_hash_table.buckets (hash_table_idx)));
         end;

      cur_txn_id = ""b;				/* start somewhere in case of error */
      call transaction_manager_$get_current_txn_id (cur_txn_id, code);
      if code ^= 0
      then if cur_txn_id = "0"b & code ^= dm_error_$no_current_transaction
	 then call ssu_$abort_line (sci_ptr, code, "^/Unable to get the current transaction id.");

      there_is_an_active_transaction = NO;

      do transaction_idx = 1 to hbound (lock_seg.transaction_table, 1);
         lock_transaction_table_ptr = addr (lock_seg.transaction_table (transaction_idx));
         if (transaction_selection = ALL_TRANSACTIONS | lock_transaction_table.txn_id = cur_txn_id)
	    & lock_transaction_table.txn_id ^= ""b
         then
	  do;
	     there_is_an_active_transaction = YES;
	     call DISPLAY_TRANSACTION (lock_transaction_table_ptr);
	  end;
      end;

      if there_is_an_active_transaction = NO
      then
         do;
	  if transaction_selection = ALL_TRANSACTIONS
	  then call ioa_ ("There are no transactions holding locks.");
	  else if cur_txn_id ^= "0"b
	  then call ioa_ ("The current transaction does not hold any locks.");
	  else call ioa_ ("There is no current transaction for which to display locks.");
         end;

      call CLEANUP ();

MAIN_RETURN:
      return;
%page;
ABORT_ENTRY:
   procedure ();
      call CLEANUP ();
      go to MAIN_RETURN;
   end ABORT_ENTRY;



CLEANUP:
   procedure ();
      if lm_copy_data_ptr ^= null ()
      then call release_temp_segments_ (myname, lm_copy_data.segment_ptrs, (0));

      call ssu_$release_area (sci_ptr, ssu_area_ptr);
      call ssu_$release_temp_segment (sci_ptr, temp_string_ptr);

      if this_is_a_standalone_invocation
      then call ssu_$destroy_invocation (sci_ptr);
      else ;

      lm_copy_data_ptr, lock_segments_ptr = null ();
   end CLEANUP;
%page;
PROCESS_ARGUMENT:
   proc (pa_p_arg, pa_p_control_argument_idx, pa_p_accept_control_argument);

      dcl	    pa_p_arg	       char (*) parm;
      dcl	    pa_p_control_argument_idx
			       fixed bin parm;
      dcl	    pa_p_accept_control_argument
			       bit (1) aligned parm;

      dcl	    pa_code	       fixed bin (35);

      pa_code = 0;

      goto ARGUMENT (pa_p_control_argument_idx);
ARGUMENT (-1):
      call ssu_$abort_line (sci_ptr, error_table_$bad_arg, "^/The argument ""^a"" is out of place.", arg);
      return;
   end PROCESS_ARGUMENT;
%page;
PROCESS_CONTROL_ARGUMENT:
   proc (pca_p_arg, pca_p_control_argument_idx, pca_p_accept_control_argument, pca_p_force_interpretation_as_argument);


      dcl	    pca_p_arg	       char (*) parm;
      dcl	    pca_p_control_argument_idx
			       fixed bin parm;
      dcl	    pca_p_accept_control_argument
			       bit (1) aligned parm;
      dcl	    pca_p_force_interpretation_as_argument
			       bit (1) aligned parm;

      pca_p_control_argument_idx = CONTROL_ARGUMENT_INDEX (pca_p_arg);
      pca_p_accept_control_argument = YES;
      pca_p_force_interpretation_as_argument = NO;

      go to CONTROL_ARGUMENT (pca_p_control_argument_idx);

CONTROL_ARGUMENT (-1):				/* not a control argument */
      call ssu_$abort_line (sci_ptr, error_table_$badopt, pca_p_arg);

CONTROL_ARGUMENT (1):				/* -all_transactions */
CONTROL_ARGUMENT (2):				/* -atxn */
      transaction_selection = ALL_TRANSACTIONS;

      pca_p_control_argument_idx = -1;
      pca_p_accept_control_argument = YES;
      return;

CONTROL_ARGUMENT (3):				/* -current_transaction */
CONTROL_ARGUMENT (4):				/* -ctxn */
      transaction_selection = CURRENT_TRANSACTION;

      pca_p_control_argument_idx = -1;
      pca_p_accept_control_argument = YES;
      return;


CONTROL_ARGUMENT (5):				/* -file_locks */
CONTROL_ARGUMENT (6):				/* -flk */
      display_file_locks = YES;

      pca_p_control_argument_idx = -1;
      pca_p_accept_control_argument = YES;
      return;


CONTROL_ARGUMENT (7):				/* -no_file_locks */
CONTROL_ARGUMENT (8):				/* -nflk */
      display_file_locks = NO;

      pca_p_control_argument_idx = -1;
      pca_p_accept_control_argument = YES;
      return;


CONTROL_ARGUMENT (9):				/* -control_interval_locks */
CONTROL_ARGUMENT (10):				/* -cilk */
      display_control_interval_locks = YES;

      pca_p_control_argument_idx = -1;
      pca_p_accept_control_argument = YES;
      return;


CONTROL_ARGUMENT (11):				/* -no_control_interval_locks */
CONTROL_ARGUMENT (12):				/* -ncilk */
      display_control_interval_locks = NO;

      pca_p_control_argument_idx = -1;
      pca_p_accept_control_argument = YES;
      return;


CONTROL_ARGUMENT (13):				/* -header */
CONTROL_ARGUMENT (14):				/* -he */
      display_header = YES;

      pca_p_control_argument_idx = -1;
      pca_p_accept_control_argument = YES;
      return;


CONTROL_ARGUMENT (15):				/* -no_header */
CONTROL_ARGUMENT (16):				/* -nhe */
      display_header = NO;

      pca_p_control_argument_idx = -1;
      pca_p_accept_control_argument = YES;
      return;


CONTROL_ARGUMENT (17):				/* -hash_table */
CONTROL_ARGUMENT (18):				/* -ht */
      display_hash_table = YES;

      pca_p_control_argument_idx = -1;
      pca_p_accept_control_argument = YES;
      return;


CONTROL_ARGUMENT (19):				/* -no_hash_table */
CONTROL_ARGUMENT (20):				/* -nht */
      display_hash_table = NO;

      pca_p_control_argument_idx = -1;
      pca_p_accept_control_argument = YES;
      return;


   end PROCESS_CONTROL_ARGUMENT;


CONTROL_ARGUMENT_INDEX:
   proc (cai_p_arg) returns (fixed bin);

      dcl	    cai_p_arg	       char (*);
      dcl	    cai_control_argument_idx
			       fixed bin;

      do cai_control_argument_idx = 1 to hbound (CONTROL_ARGUMENT, 1)
	 while (CONTROL_ARGUMENT (cai_control_argument_idx) ^= cai_p_arg);
      end;
      if cai_control_argument_idx > hbound (CONTROL_ARGUMENT, 1)
      then return (-1);
      else return (cai_control_argument_idx);

   end CONTROL_ARGUMENT_INDEX;


REPORT_MISSING_ARGUMENT:
   proc (rma_p_control_argument_idx);
      dcl	    rma_p_control_argument_idx
			       fixed bin parm;

      call ssu_$abort_line (sci_ptr, error_table_$noarg, "^a must be followed by a^[n^] ^a.",
	 CONTROL_ARGUMENT (rma_p_control_argument_idx),
	 (index ("aeiouh", substr (ARGUMENT_TYPE (rma_p_control_argument_idx), 1, 1)) > 0),
	 ARGUMENT_TYPE (rma_p_control_argument_idx));
   end REPORT_MISSING_ARGUMENT;
%page;
/*  Internal Procedure to display locks for one process  */

DISPLAY_TRANSACTION:
   proc (dt_p_lock_transaction_table_ptr);

      dcl	    dt_p_lock_transaction_table_ptr
			       ptr;

      dcl	    1 dt_process_vptr      aligned like lock_virtual_ptr;
      dcl	    dt_lock_owner_ptr      ptr;
      dcl	    dt_lock_waiter_ptr     ptr;

      dcl	    1 dt_lock_owner	       aligned like lock_owner based (dt_lock_owner_ptr);
      dcl	    1 dt_lock_transaction_table
			       aligned like lock_transaction_table based (dt_p_lock_transaction_table_ptr);
      dcl	    1 dt_lock_waiter       aligned like lock_waiter based (dt_lock_waiter_ptr);
      dcl	    1 dt_txi	       aligned like txn_info;

      dcl	    dt_indent	       fixed bin init (0);

      unspec (dt_txi) = ""b;
      dt_txi.version = TXN_INFO_VERSION_5;
      dt_txi.owner_name = "";
      call transaction_manager_$get_txn_info (dt_lock_transaction_table.txn_id, addr (dt_txi), code);
      call ioa_ ("^/^a ^w  Transaction ^d  ^[Ev Chan ^o^]", dt_txi.owner_name, dt_lock_transaction_table.process_id,
	 bin (dt_lock_transaction_table.txn_id, 71, 0), (dt_lock_transaction_table.ev_channel ^= 0),
	 dt_lock_transaction_table.ev_channel);

      dt_indent = 2;

      if dt_lock_transaction_table.wait_ptr.seg_inx ^= NULL_VPTR.seg_inx
      then
         do;
	  dt_lock_waiter_ptr = PTR (dt_lock_transaction_table.wait_ptr);
	  if dt_lock_waiter_ptr = null ()
	  then call REPORT_INVALID_VIRTUAL_POINTER (dt_indent, "Waiting", dt_lock_transaction_table.wait_ptr);
	  else
	     do;
	        call ioa_ ("^vxWaiting for ^a mode", dt_indent, LOCK_MODE_NAMES (dt_lock_waiter.mode));
	        call DISPLAY_LOCK (dt_indent, dt_lock_waiter.lock_ptr);
	     end;
         end;

      dt_indent = dt_indent + 2;

      dt_process_vptr = dt_lock_transaction_table.own_ptr;
      do while (dt_process_vptr.seg_inx ^= NULL_VPTR.seg_inx);
         dt_lock_owner_ptr = PTR (dt_process_vptr);
         if dt_lock_owner_ptr = null ()
         then
	  do;
	     call REPORT_INVALID_VIRTUAL_POINTER (dt_indent, "Owner", dt_process_vptr);
	     dt_process_vptr = NULL_VPTR;
	  end;
         else if dt_lock_owner.type ^= TYPE_OWNER
         then
	  do;
	     call ioa_ ("^vxInvalid Owner Type ^d at ^p", dt_indent, dt_lock_owner.type, dt_lock_owner_ptr);
	     dt_process_vptr = NULL_VPTR;
	  end;
         else
	  do;
	     call DISPLAY_LOCK (dt_indent, dt_lock_owner.lock_ptr);
	     dt_process_vptr = dt_lock_owner.transaction_fp;
	  end;
      end;

      call ioa_ ("");

   end DISPLAY_TRANSACTION;
%page;
/*  Internal Procedure to display a lock  */

DISPLAY_LOCK:
   proc (dl_p_indent, dl_p_lock_object_vptr);

      dcl	    1 dl_p_lock_object_vptr
			       aligned like lock_virtual_ptr parameter;
      dcl	    dl_p_indent	       fixed bin parm;

      dcl	    dl_indent	       fixed bin init (0);
      dcl	    dl_lock_object_ptr     ptr;
      dcl	    1 dl_lock_object       aligned like lock_object based (dl_lock_object_ptr);
      dcl	    1 dl_txi	       aligned like txn_info;


      dl_indent = dl_p_indent;

      dl_lock_object_ptr = PTR (dl_p_lock_object_vptr);
      if dl_lock_object_ptr = null ()
      then
         do;
	  call REPORT_INVALID_VIRTUAL_POINTER (dl_indent, "Object", dl_p_lock_object_vptr);
	  return;
         end;
      if dl_lock_object.type ^= TYPE_OBJECT
      then
         do;
	  call ioa_ ("^vxInvalid Object Type ^d at ^p", dl_indent, dl_lock_object.type, dl_lock_object_ptr);
	  return;
         end;

      if dl_lock_object.ci_no = FILE_LOCK_CI_NUMBER
      then if display_file_locks = NO
	 then return;
	 else ;
      else if display_control_interval_locks = NO
      then return;
      else ;


      call ioa_ ("^vxLock  UID=^w ^[FILE^s^;CI=^d^]", dl_indent, dl_lock_object.uid,
	 (dl_lock_object.ci_no = FILE_LOCK_CI_NUMBER), dl_lock_object.ci_no);

      dl_indent = dl_indent + 2;

      call DISPLAY_BLOCK_LIST (dl_lock_object.owners_ptr, dl_indent, "Owner", TYPE_OWNER, OWNER_GET_TXN_VPTR,
	 OWNER_GET_MODE, OWNER_GET_NEXT_BLOCK_VPTR);

      call DISPLAY_BLOCK_LIST (dl_lock_object.waiters_ptr, dl_indent, "Waiter", TYPE_WAITER, WAITER_GET_TXN_VPTR,
	 WAITER_GET_MODE, WAITER_GET_NEXT_BLOCK_VPTR);


   end DISPLAY_LOCK;
%page;
DISPLAY_BLOCK_LIST:
   proc (dbl_p_first_block_vptr, dbl_p_indent, dbl_p_str, dbl_p_type, dbl_p_get_txn_vptr, dbl_p_get_mode,
        dbl_p_get_next_block_vptr);
      dcl	    1 dbl_p_first_block_vptr
			       aligned like lock_virtual_ptr parm;
      dcl	    dbl_p_indent	       fixed bin parm;
      dcl	    dbl_p_str	       char (*) parm;
      dcl	    dbl_p_type	       fixed bin parm;
      dcl	    dbl_p_get_txn_vptr     variable entry (ptr) returns (1 aligned like lock_virtual_ptr) parm;
      dcl	    dbl_p_get_mode	       variable entry (ptr) returns (fixed bin) parm;
      dcl	    dbl_p_get_next_block_vptr
			       variable entry (ptr) returns (1 aligned like lock_virtual_ptr) parm;

      dcl	    dbl_indent	       fixed bin init (0);

      dcl	    1 dbl_lock_block_vptr  aligned like lock_virtual_ptr;
      dcl	    1 dbl_txi	       aligned like txn_info;
      dcl	    dbl_lock_block_ptr     ptr;
      dcl	    1 dbl_lock_block       aligned like lock_block based (dbl_lock_block_ptr);
      dcl	    1 dbl_lock_transaction_table_vptr
			       aligned like lock_virtual_ptr;
      dcl	    dbl_lock_transaction_table_ptr
			       ptr;
      dcl	    1 dbl_lock_transaction_table
			       aligned like lock_transaction_table based (dbl_lock_transaction_table_ptr);
      dcl	    dbl_code	       fixed bin (35) init (0);

      dbl_lock_block_vptr = dbl_p_first_block_vptr;
      dbl_indent = dbl_p_indent;

      dbl_txi.version = TXN_INFO_VERSION_5;
      dbl_txi.owner_name = "";

      do while (dbl_lock_block_vptr.seg_inx ^= NULL_VPTR.seg_inx);
         dbl_lock_block_ptr = PTR (dbl_lock_block_vptr);
         if dbl_lock_block_ptr = null ()
         then
	  do;
	     call REPORT_INVALID_VIRTUAL_POINTER (dbl_indent, dbl_p_str, dbl_lock_block_vptr);
	     dbl_lock_block_vptr = NULL_VPTR;
	  end;
         else if dbl_lock_block.type ^= dbl_p_type
         then
	  do;
	     call ioa_ ("^vxInvalid ^a Type ^d at ^p", dbl_p_str, dbl_indent, dbl_lock_block.type, dbl_lock_block_ptr);
	     dbl_lock_block_vptr = NULL_VPTR;
	  end;
         else
	  do;
	     dbl_lock_transaction_table_vptr = dbl_p_get_txn_vptr (dbl_lock_block_ptr);
	     dbl_lock_transaction_table_ptr = PTR (dbl_lock_transaction_table_vptr);
	     if dbl_lock_transaction_table_ptr = null ()
	     then call REPORT_INVALID_VIRTUAL_POINTER (dbl_indent, "Lock txn table", dbl_lock_transaction_table_vptr);
	     else
	        do;
		 call transaction_manager_$get_txn_info (dbl_lock_transaction_table.txn_id, addr (dbl_txi), dbl_code);
		 call ioa_ ("^vx^a ^a ^w Txn ^d ^45tMode ^3a", dbl_indent, dbl_p_str, dbl_txi.owner_name,
		      dbl_lock_transaction_table.process_id, bin (dbl_lock_transaction_table.txn_id, 71, 0),
		      LOCK_MODE_NAMES (dbl_p_get_mode (dbl_lock_block_ptr)));
		 dbl_lock_block_vptr = dbl_p_get_next_block_vptr (dbl_lock_block_ptr);
	        end;
	  end;
      end;
   end DISPLAY_BLOCK_LIST;
%page;
OWNER_GET_TXN_VPTR:
   proc (ogtv_p_lock_owner_ptr) returns (1 aligned like lock_virtual_ptr);
      dcl	    ogtv_p_lock_owner_ptr  ptr parm;
      dcl	    1 ogtv_p_lock_owner    aligned like lock_owner based (ogtv_p_lock_owner_ptr);

      return (ogtv_p_lock_owner.transaction_ptr);

OWNER_GET_MODE:
   entry (ogtv_p_lock_owner_ptr) returns (fixed bin);
      return (ogtv_p_lock_owner.mode);

OWNER_GET_NEXT_BLOCK_VPTR:
   entry (ogtv_p_lock_owner_ptr) returns (1 aligned like lock_virtual_ptr);
      return (ogtv_p_lock_owner.owners_fp);
   end OWNER_GET_TXN_VPTR;
%page;
WAITER_GET_TXN_VPTR:
   proc (wgtv_p_lock_waiter_ptr) returns (1 aligned like lock_virtual_ptr);
      dcl	    wgtv_p_lock_waiter_ptr ptr parm;
      dcl	    1 wgtv_p_lock_waiter   aligned like lock_waiter based (wgtv_p_lock_waiter_ptr);

      return (wgtv_p_lock_waiter.transaction_ptr);

WAITER_GET_MODE:
   entry (wgtv_p_lock_waiter_ptr) returns (fixed bin);
      return (wgtv_p_lock_waiter.mode);

WAITER_GET_NEXT_BLOCK_VPTR:
   entry (wgtv_p_lock_waiter_ptr) returns (1 aligned like lock_virtual_ptr);
      return (wgtv_p_lock_waiter.waiters_fp);
   end WAITER_GET_TXN_VPTR;
%page;
/*  Internal Procedure to turn a virtual pointer into a pointer  */

PTR:
   proc (ptr_p_lock_virtual_ptr) returns (ptr);

      dcl	    1 ptr_p_lock_virtual_ptr
			       aligned like lock_virtual_ptr parameter;


      if ptr_p_lock_virtual_ptr.seg_inx < 0 | ptr_p_lock_virtual_ptr.seg_inx > lm_copy_data_n_segments
      then return (null ());
      return (ptr (lock_segments.seg_baseptr (ptr_p_lock_virtual_ptr.seg_inx), ptr_p_lock_virtual_ptr.offset));

   end PTR;

GET_SEGMENT_PTRS:
   procedure ();
      dcl	    gs_code	       fixed bin (35) init (0);
      dcl	    gs_try_idx	       fixed bin;


      gs_code = error_table_$smallarg;
      do gs_try_idx = 1 to 10 while (gs_code = error_table_$smallarg);
         lm_copy_data_n_segments = lock_manager_$system_segment_count (gs_code);
         allocate lm_copy_data in (ssu_area);
         lm_copy_data.version = LM_COPY_DATA_VERSION_1;
         call get_temp_segments_ (myname, lm_copy_data.segment_ptrs, gs_code);
         if gs_code ^= 0
         then call ssu_$abort_line (sci_ptr, gs_code, "^/Unable to get temp segments to hold the copy of lock data.");
         call lock_manager_$copy_data (addr (lm_copy_data), gs_code);
         if gs_code ^= 0
         then
	  do;
	     call release_temp_segments_ (myname, lm_copy_data.segment_ptrs, (0));
	     free lm_copy_data;
	  end;
      end;
      if gs_code ^= 0
      then call ssu_$abort_line (sci_ptr, gs_code, "^/Unable to copy the lock data.");

      lock_seg_ptr = lm_copy_data.segment_ptrs (1);
      call CHECK_VERSION (LOCK_SEG_VERSION_1, lock_seg.version, "lock_seg");
      allocate lock_segments in (ssu_area);
      lock_segments.seg_baseptr (*) = lm_copy_data.segment_ptrs (*);
      return;

   end GET_SEGMENT_PTRS;



CHECK_VERSION:
   proc (cv_p_expected_version, cv_p_received_version, cv_p_structure_name);

      dcl	    cv_p_expected_version  char (8) aligned parameter;
      dcl	    cv_p_received_version  char (8) aligned parameter;
      dcl	    cv_p_structure_name    char (32) aligned parameter;

      if cv_p_expected_version ^= cv_p_received_version
      then call sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null (), 0,
	      "^/Expected version ^a of the ^a structure." || "^/Received version ^a instead.", cv_p_expected_version,
	      cv_p_structure_name, cv_p_received_version);
   end CHECK_VERSION;
%page;
REPORT_INVALID_VIRTUAL_POINTER:
   proc (rivp_p_indent, rivp_p_str, rivp_p_virtual_ptr);
      dcl	    rivp_p_indent	       fixed bin parm;
      dcl	    rivp_p_str	       char (*) parm;
      dcl	    1 rivp_p_virtual_ptr   aligned like lock_virtual_ptr parm;

      call ioa_ ("^vx^a - invalid virtual pointer (segment index ^d, offset ^d).", rivp_p_indent, rivp_p_str,
	 rivp_p_virtual_ptr.seg_inx, rivp_p_virtual_ptr.offset);

   end REPORT_INVALID_VIRTUAL_POINTER;
%page;
%include dm_lock_modes;
%page;
%include dm_lm_meters;
%page;
%include dm_lm_system_data;
%page;
%include dm_lm_copy_data;
%page;
%include dm_tm_txn_info;
%page;
%include print_data_info;
%page;
%include sub_err_flags;
   end dm_lock_status;
