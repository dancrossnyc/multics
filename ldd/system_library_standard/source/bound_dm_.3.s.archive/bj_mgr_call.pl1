/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION
   bj_mgr_call - command/active function interface to selected
   before_journal_manager_ entrypoints.

   Usage:
	bjmc OPERATION {ARGS}
   where:
	OPERATION can be create, open, close, opened, closed,
	set_default_journal, or get_default_journal.

	ARGS are specific for each operation.
*/

/* HISTORY:
Written by M. Pandolf, 12/??/83.
Modified:
10/22/84 by M.Sharpe:  to correct format, to correct calling sequence
	  to any_err_, to pass standard error codes to com_err_.
03/19/85 by Lindsey L. Spratt:  Added the -transaction_storage_limit (-tsl)
            option to the create operation.  Added the
            set_transaction_storage_limit operation.
03/20/85 by Lindsey L. Spratt:  Added a dm_not_available_ handler.
03/26/85 by Lindsey Spratt:  Fixed the syntax for the stsl keyword so that the
	  transaction storage limit must be specified via
	  -transaction_storage_limit (-tsl).
03/27/85 by Lee A. Newcomb:  Renamed the set_transaction_storage_limit
            operation to set_attribute as per the amended MCR7217.
*/

/* format: style2,ind3 */
%page;
bj_mgr_call:
bjmc:
   procedure () options (variable);

/* DECLARATIONS */

/* Automatic */

      dcl	    a_path	       fixed bin;
      dcl	    arg_list_ptr	       pointer;
      dcl	    argl		       fixed bin (21);
      dcl	    argno		       fixed bin;
      dcl	    argp		       pointer;
      dcl	    bj_ci_no	       fixed bin;
      dcl	    bj_ci_size	       fixed bin;
      dcl	    bj_oid	       bit (36) aligned;
      dcl	    code		       fixed bin (35);
      dcl	    creation_looks_reasonable
			       bit (1) aligned;
      dcl	    i_am_an_active_function
			       bit (1) aligned;
      dcl	    nargs		       fixed bin;
      dcl	    rsp		       pointer;
      dcl	    rsl		       fixed bin (21);
      dcl	    transaction_storage_limit
			       fixed bin (35) init (UNSET_STORAGE_LIMIT);

/* Based */

      dcl	    arg		       char (argl) based (argp);
      dcl	    return_string	       char (rsl) varying based (rsp);

/* Builtin */

      dcl	    substr	       builtin;

/* Entry */

      dcl	    active_fnc_err_	       entry options (variable);
      dcl	    any_err_	       entry () variable options (variable);
      dcl	    before_journal_manager_$open_bj
			       entry (char (*), char (*), bit (36) aligned, fixed bin (35));
      dcl	    before_journal_manager_$create_bj
			       entry (char (*), char (*), fixed bin, fixed bin, fixed bin (35));
      dcl	    before_journal_manager_$close_bj
			       entry (bit (36) aligned, fixed bin (35));
      dcl	    before_journal_manager_$delete_bj
			       entry (char (*), char (*), fixed bin (35));
      dcl	    before_journal_manager_$get_default_bj
			       entry (bit (36) aligned, fixed bin (35));
      dcl	    before_journal_manager_$set_default_bj
			       entry (bit (36) aligned, fixed bin (35));
      dcl	    before_journal_manager_$get_bj_path_from_oid
			       entry (bit (36) aligned, char (*), char (*), fixed bin (35));
      dcl	    before_journal_manager_$get_bj_oid
			       entry (char (*), char (*), bit (36) aligned, fixed bin (35));
      dcl	    before_journal_manager_$set_transaction_storage_limit
			       entry (char (*), char (*), fixed bin (35), fixed bin (35));

      dcl	    check_star_name_$entry entry (char (*), fixed bin (35));
      dcl	    com_err_	       entry () options (variable);
      dcl	    cu_$af_return_arg      entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
      dcl	    cu_$arg_count_rel      entry (fixed bin, ptr, fixed bin (35));
      dcl	    cu_$arg_list_ptr       entry (ptr);
      dcl	    cu_$arg_ptr_rel	       entry (fixed bin, ptr, fixed bin (21), fixed bin (35), ptr);
      dcl	    cv_dec_check_	       entry (char (*), fixed bin (35)) returns (fixed bin (35));
      dcl	    expand_pathname_$add_suffix
			       entry (char (*), char (*), char (*), char (*), fixed bin (35));
      dcl	    ioa_		       entry () options (variable);
      dcl	    ioa_$general_rs	       entry (ptr, fixed bin, fixed bin, char (*), fixed bin (21), bit (1) aligned,
			       bit (1) aligned);
      dcl	    ioa_$rsnnl	       entry () options (variable);
      dcl	    nd_handler_	       entry (char (*), char (*), char (*), fixed bin (35));
      dcl	    pathname_	       entry (char (*), char (*)) returns (char (168));

/* External Static */

      dcl	    dm_error_$bj_journal_not_opened
			       fixed bin (35) ext static;
      dcl	    dm_error_$file_already_exists
			       fixed bin (35) ext static;
      dcl	    dm_error_$system_not_initialized
			       fixed bin (35) ext static;
      dcl	    error_table_$not_act_fnc
			       fixed bin (35) ext static;
      dcl	    error_table_$active_function
			       fixed bin (35) ext static;
      dcl	    error_table_$bad_arg   fixed bin (35) ext static;
      dcl	    error_table_$badcall   fixed bin (35) ext static;
      dcl	    error_table_$noarg     fixed bin (35) ext static;
      dcl	    error_table_$nostars   fixed bin (35) ext static;
      dcl	    error_table_$action_not_performed
			       fixed bin (35) ext static;
      dcl	    error_table_$notadir   fixed bin (35) ext static;

/* Condition */

      dcl	    dm_not_available_      condition;

/* Constant */

      dcl	    UNSET_STORAGE_LIMIT    init (-1) fixed bin (35) internal static options (constant);
      dcl	    ME		       char (32) internal static options (constant) init ("bj_mgr_call");
      dcl	    DEFAULT_BJ_CI_NO       fixed bin internal static options (constant) init (64);
      dcl	    DEFAULT_BJ_CI_SIZE     fixed bin internal static options (constant) init (4096);
      dcl	    (
	    NO_PAD	       init ("0"b),
	    NO_NL		       init ("0"b)
	    )		       bit (1) aligned internal static options (constant);

/* END OF DECLARATIONS */

/* how were we called? */

      call cu_$af_return_arg (nargs, rsp, rsl, code);
      if code = error_table_$not_act_fnc
      then
         do;					/* COMMAND call */
	  i_am_an_active_function = "0"b;
	  any_err_ = com_err_;
         end;
      else if code ^= 0
      then
         do;					/* faulty call */
	  call com_err_ (code, ME);
	  return;
         end;
      else
         do;					/* AF call */
	  i_am_an_active_function = "1"b;
	  any_err_ = active_fnc_err_;
         end;

/* is the operation specified? */

      if nargs = 0
      then
         do;
	  call any_err_ (error_table_$noarg, ME, "^/Usage is: bjmc OPERATION {ARGS}.");
	  return;
         end;

      call cu_$arg_list_ptr (arg_list_ptr);		/* needed by the following begin block */
%page;
/* the following begin block contains the list of before journal pathnames */

the_real_work:
      begin;

         dcl     bj_dir		dim (nargs) char (168),
	       bj_entry		dim (nargs) char (32),
	       path_count		fixed bin;

/* initialize our automatic */

         bj_dir (*) = "";
         bj_entry (*) = "";
         path_count = 0;

         on dm_not_available_ call ERROR_RETURN (dm_error_$system_not_initialized);


/* figure out why we're here */

         call cu_$arg_ptr_rel (1, argp, argl, code, arg_list_ptr);

         if arg = "create" | arg = "cr"
         then call CREATE ();
         else if arg = "open" | arg = "o"
         then call OPEN ();
         else if arg = "close" | arg = "cl"
         then call CLOSE ();
         else if arg = "opened"
         then call OPENED ();
         else if arg = "closed"
         then call CLOSED ();
         else if arg = "set_default_journal" | arg = "sdp"
         then call SET_DEFAULT_PATH ();
         else if arg = "get_default_journal" | arg = "gdp"
         then call GET_DEFAULT_PATH ();
         else if arg = "set_attribute" | arg = "sattr"
         then call SET_ATTRIBUTE ();
         else call ERROR_RETURN (error_table_$bad_arg, "^a.^/Allowed operations are: create, open, close, opened, closed,
    set_default_journal, get_default_journal, set_transaction_storage_limit.", arg);
MAIN_RETURN:
         return;

/* end of begin block's processing. internal support procedures follow */


/* INTERNAL PROCEDURES */
%page;
ERROR_RETURN:
   proc () options (variable);
      dcl	    er_p_code_ptr	       ptr init (null ());
      dcl	    er_p_code	       based (er_p_code_ptr) fixed bin (35);
      dcl	    er_arg_list_ptr	       ptr init (null);
      dcl	    er_code	       fixed bin (35);
      dcl	    er_msg	       char (1024);
      dcl	    er_based_msg	       char (er_msg_length) based (addr (er_msg));
      dcl	    er_msg_length	       fixed bin (21) init (0);

      dcl	    er_nargs	       fixed bin;

      call cu_$arg_list_ptr (er_arg_list_ptr);
      call cu_$arg_count_rel (er_nargs, er_arg_list_ptr, (0));
      if er_nargs = 0
      then er_code = 0;
      else
         do;
	  call cu_$arg_ptr_rel (1, er_p_code_ptr, (0), (0), er_arg_list_ptr);
	  er_code = er_p_code;
         end;
      if er_nargs >= 2
      then call ioa_$general_rs (er_arg_list_ptr, 2, 3, er_msg, er_msg_length, NO_PAD, NO_NL);

      call any_err_ (er_code, ME, "^a", er_based_msg);
      goto MAIN_RETURN;

   end ERROR_RETURN;
%page;
CREATE:
   procedure ();

      if i_am_an_active_function
      then return_string = "true";

      if nargs = 1
      then call ERROR_RETURN (error_table_$noarg,
	      "^/Usage is:  bjmc create JOURNAL_PATH {-length NUMBER_OF_CI|-transaction_storage_limit N_BYTES}");

/* set defaults */

      bj_ci_no = DEFAULT_BJ_CI_NO;
      bj_ci_size = DEFAULT_BJ_CI_SIZE;

/* process the args */

      argno = 2;
processing_of_create_args:
      do while (argno <= nargs);

         call cu_$arg_ptr_rel (argno, argp, argl, code, arg_list_ptr);

         if argl = 0
         then call ERROR_RETURN (error_table_$bad_arg, "Null argument found in argument list.");

         if arg = "-length" | arg = "-ln"
         then
	  do;
	     argno = argno + 1;
	     call cu_$arg_ptr_rel (argno, argp, argl, code, arg_list_ptr);
	     if code ^= 0
	     then call ERROR_RETURN (code, "^/""-length"" requires a number (of control intervals).");

	     bj_ci_no = cv_dec_check_ (arg, code);

	     if code ^= 0
	     then call ERROR_RETURN (error_table_$bad_arg, "^/""^a"" is not numeric.", arg);

	  end;
         else if arg = "-pathname" | arg = "-pn"
         then
	  do;
	     argno = argno + 1;
	     call cu_$arg_ptr_rel (argno, argp, argl, code, arg_list_ptr);
	     if code ^= 0
	     then call ERROR_RETURN (code, "^/""-pathname"" requires a path name.");

	     call GET_PATH_FROM_ARG ();
	  end;
         else if arg = "-transaction_storage_limit" | arg = "-tsl"
         then
	  do;
	     argno = argno + 1;
	     call cu_$arg_ptr_rel (argno, argp, argl, code, arg_list_ptr);
	     if code ^= 0
	     then call ERROR_RETURN (code,
		     "^/""-transaction_storage_limit"" requires an argument specifying the number^/of bytes for the limit."
		     );

	     transaction_storage_limit = cv_dec_check_ (arg, code);
	     if code ^= 0
	     then call ERROR_RETURN (error_table_$bad_arg,
		     "^/Unable to convert ^a to the number of bytes for the^/transaction storage limit.", arg);
	  end;
         else if substr (arg, 1, 1) = "-"
         then call ERROR_RETURN (error_table_$bad_arg, "^/""^a"" is an unrecognized argument.", arg);

         else call GET_PATH_FROM_ARG ();

         argno = argno + 1;
      end processing_of_create_args;

/* anything to create? */

      if path_count = 0				/* nope... */
      then call ERROR_RETURN (error_table_$noarg, "^/The name of a journal is required.");


/* create the before journals */

creating_the_journals:
      do a_path = 1 to path_count while (code = 0);
         creation_looks_reasonable = "1"b;
creating_one_journal:
         do while (creation_looks_reasonable);
	  call before_journal_manager_$create_bj (bj_dir (a_path), bj_entry (a_path), bj_ci_no, bj_ci_size, code);
	  if code = dm_error_$file_already_exists | code = error_table_$notadir
	  then
	     do;
	        call nd_handler_ (ME, bj_dir (a_path), bj_entry (a_path), code);
	        if code ^= 0
	        then creation_looks_reasonable = "0"b;
	        if code = error_table_$action_not_performed
	        then code = 0;
	     end;
	  else creation_looks_reasonable = "0"b;
         end creating_one_journal;

         if code ^= 0
         then if i_am_an_active_function
	    then return_string = "false";
	    else call any_err_ (code, ME, "^/Creating ^a.", pathname_ (bj_dir (a_path), bj_entry (a_path)));
         else if transaction_storage_limit ^= UNSET_STORAGE_LIMIT
         then
	  do;
	     call before_journal_manager_$set_transaction_storage_limit (bj_dir (a_path), bj_entry (a_path),
		transaction_storage_limit, code);
	     if code ^= 0
	     then call any_err_ (code, ME, "^/Unable to set the transaction_storage_limit for ^a.",
		     pathname_ (bj_dir (a_path), bj_entry (a_path)));
	  end;

      end creating_the_journals;

/* finished with the create operation */

      return;

   end CREATE;
%page;
OPEN:
   procedure ();

      if i_am_an_active_function
      then return_string = "true";

      if nargs = 1
      then call ERROR_RETURN (error_table_$noarg, "^/Usage is:  bjmc open JOURNAL_PATHS");


/* process the args */

      argno = 2;
processing_of_open_args:
      do while (argno <= nargs);

         call cu_$arg_ptr_rel (argno, argp, argl, code, arg_list_ptr);

         if argl = 0
         then call ERROR_RETURN (error_table_$bad_arg, "Null argument found in argument list.");

         if arg = "-pathname" | arg = "-pn"
         then
	  do;
	     argno = argno + 1;
	     call cu_$arg_ptr_rel (argno, argp, argl, code, arg_list_ptr);
	     if code ^= 0
	     then call ERROR_RETURN (code, "^/""-pathname"" requires a path name.");

	     call GET_PATH_FROM_ARG ();
	  end;
         else if substr (arg, 1, 1) = "-"
         then call ERROR_RETURN (error_table_$bad_arg, "^/""^a"" is an unrecognized argument.", arg);
         else call GET_PATH_FROM_ARG ();
         argno = argno + 1;
      end processing_of_open_args;

/* anything to open? */

      if path_count = 0
      then call ERROR_RETURN (error_table_$noarg, "^/The name of a journal is required.");

/* open the before journals */

opening_the_journals:
      do a_path = 1 to path_count;
         call before_journal_manager_$open_bj (bj_dir (a_path), bj_entry (a_path), bj_oid, code);
         if code ^= 0
         then if i_am_an_active_function
	    then return_string = "false";
	    else call any_err_ (code, ME, "^/Attempting to open journal ^a.",
		    pathname_ (bj_dir (a_path), bj_entry (a_path)));
      end opening_the_journals;

/* finished with the open operation */

      return;
   end OPEN;
%page;
CLOSE:
   procedure ();

      if i_am_an_active_function
      then return_string = "true";

      if nargs = 1
      then call ERROR_RETURN (error_table_$noarg, "^/Usage is:  bjmc close JOURNAL_PATHS");

/* process the args */

      argno = 2;
processing_of_close_args:
      do while (argno <= nargs);

         call cu_$arg_ptr_rel (argno, argp, argl, code, arg_list_ptr);

         if argl = 0
         then call ERROR_RETURN (error_table_$bad_arg, "Null argument found in argument list.");

         if arg = "-pathname" | arg = "-pn"
         then
	  do;
	     argno = argno + 1;
	     call cu_$arg_ptr_rel (argno, argp, argl, code, arg_list_ptr);
	     if code ^= 0
	     then call ERROR_RETURN (code, "^/""-pathname"" requires a path name.");

	     call GET_PATH_FROM_ARG ();
	  end;
         else if substr (arg, 1, 1) = "-"
         then call ERROR_RETURN (error_table_$bad_arg, "^/""^a"" is an unrecognized argument.", arg);
         else call GET_PATH_FROM_ARG ();
         argno = argno + 1;
      end processing_of_close_args;

/* anything to close? */

      if path_count = 0
      then call ERROR_RETURN (error_table_$noarg, "^/The name of a journal is required.");

/* close the before journals */

closing_the_journals:
      do a_path = 1 to path_count;
         call before_journal_manager_$get_bj_oid (bj_dir (a_path), bj_entry (a_path), bj_oid, code);
         if code ^= 0
         then call any_err_ (code, ME, "^/Attempting to close journal ^a.",
	         pathname_ (bj_dir (a_path), bj_entry (a_path)));
         else
	  do;
	     call before_journal_manager_$close_bj (bj_oid, code);
	     if code ^= 0
	     then if i_am_an_active_function
		then return_string = "false";
		else call any_err_ (code, ME, "^/Attempting to close journal ^a.",
			pathname_ (bj_dir (a_path), bj_entry (a_path)));
	  end;
      end closing_the_journals;

/* finished with the close operation */

      return;

   end CLOSE;
%page;
OPENED:
   procedure ();

      if nargs = 1
      then call ERROR_RETURN (error_table_$noarg, "^/Usage is:  ^[[^]bjmc opened JOURNAL_PATHS^[]^]",
	      i_am_an_active_function, i_am_an_active_function);

/* process the args */

      argno = 2;
processing_of_opened_args:
      do while (argno <= nargs);

         call cu_$arg_ptr_rel (argno, argp, argl, code, arg_list_ptr);

         if argl = 0
         then call ERROR_RETURN (error_table_$bad_arg, "Null argument found in argument list.");

         if arg = "-pathname" | arg = "-pn"
         then
	  do;
	     argno = argno + 1;
	     call cu_$arg_ptr_rel (argno, argp, argl, code, arg_list_ptr);
	     if code ^= 0
	     then call ERROR_RETURN (code, "^/""-pathname"" requires a path name.");

	     call GET_PATH_FROM_ARG ();
	  end;
         else if substr (arg, 1, 1) = "-"
         then call ERROR_RETURN (error_table_$bad_arg, "^/""^a"" is an unrecognized argument.", arg);
         else call GET_PATH_FROM_ARG ();
         argno = argno + 1;
      end processing_of_opened_args;

/* allow only one query */

      if path_count ^= 1
      then call ERROR_RETURN (error_table_$badcall, "Usage is: ^[[^]bjmc opened JOURNAL_PATH^[]^]",
	      i_am_an_active_function, i_am_an_active_function);

/* check the before journal */

      call before_journal_manager_$get_bj_oid (bj_dir (1), bj_entry (1), bj_oid, code);

      if i_am_an_active_function
      then if code = 0
	 then return_string = "true";
	 else if code = dm_error_$bj_journal_not_opened
	 then return_string = "false";
	 else call ERROR_RETURN (code, "^/Referencing ^a.", pathname_ (bj_dir (1), bj_entry (1)));
      else if code = 0
      then call ioa_ ("true");
      else if code = dm_error_$bj_journal_not_opened
      then call ioa_ ("false");
      else call ERROR_RETURN (code, "^/Referencing ^a.", pathname_ (bj_dir (1), bj_entry (1)));


/* finished with the opened operation */

      return;

   end OPENED;
%page;
CLOSED:
   procedure ();

      if nargs = 1
      then call ERROR_RETURN (error_table_$noarg, "^/Usage is:  ^[[^]bjmc closed JOURNAL_PATHS^[]^]",
	      i_am_an_active_function, i_am_an_active_function);

/* process the args */

      argno = 2;
processing_of_closed_args:
      do while (argno <= nargs);

         call cu_$arg_ptr_rel (argno, argp, argl, code, arg_list_ptr);

         if argl = 0
         then call ERROR_RETURN (error_table_$bad_arg, "Null argument found in argument list.");

         if arg = "-pathname" | arg = "-pn"
         then
	  do;
	     argno = argno + 1;
	     call cu_$arg_ptr_rel (argno, argp, argl, code, arg_list_ptr);
	     if code ^= 0
	     then call ERROR_RETURN (code, "^/""-pathname"" requires a path name.");

	     call GET_PATH_FROM_ARG ();
	  end;
         else if substr (arg, 1, 1) = "-"
         then call ERROR_RETURN (error_table_$bad_arg, "^/""^a"" is an unrecognized argument.", arg);
         else call GET_PATH_FROM_ARG ();
         argno = argno + 1;
      end processing_of_closed_args;

/* allow only one query */

      if path_count ^= 1
      then call ERROR_RETURN (error_table_$badcall, "Usage is: ^[[^]bjmc closed JOURNAL_PATH^[]^]",
	      i_am_an_active_function, i_am_an_active_function);

/* check the before journal */

      call before_journal_manager_$get_bj_oid (bj_dir (1), bj_entry (1), bj_oid, code);

      if i_am_an_active_function
      then if code = 0
	 then return_string = "false";
	 else if code = dm_error_$bj_journal_not_opened
	 then return_string = "true";
	 else call ERROR_RETURN (code, "^/Referencing ^a.", pathname_ (bj_dir (1), bj_entry (1)));
      else if code = 0
      then call ioa_ ("false");
      else if code = dm_error_$bj_journal_not_opened
      then call ioa_ ("true");
      else call ERROR_RETURN (code, "^/Referencing ^a.", pathname_ (bj_dir (1), bj_entry (1)));


/* finished with the closed operation */

      return;

   end CLOSED;
%page;
SET_DEFAULT_PATH:
   procedure ();

      if i_am_an_active_function
      then return_string = "true";

      if nargs = 1
      then call ERROR_RETURN (error_table_$noarg, "^/Usage is:  bjmc set_default_journal JOURNAL_PATH");

/* process the args */

      argno = 2;
processing_of_set_default_path_args:
      do while (argno <= nargs);

         call cu_$arg_ptr_rel (argno, argp, argl, code, arg_list_ptr);

         if argl = 0
         then call ERROR_RETURN (error_table_$bad_arg, "Null argument found in argument list.");

         if arg = "-pathname" | arg = "-pn"
         then
	  do;
	     argno = argno + 1;
	     call cu_$arg_ptr_rel (argno, argp, argl, code, arg_list_ptr);
	     if code ^= 0
	     then call ERROR_RETURN (code, "^/""-pathname"" requires a path name.");

	     call GET_PATH_FROM_ARG ();
	  end;
         else if substr (arg, 1, 1) = "-"
         then call ERROR_RETURN (error_table_$bad_arg, "^/""^a"" is an unrecognized argument.", arg);
         else call GET_PATH_FROM_ARG ();
         argno = argno + 1;
      end processing_of_set_default_path_args;

/* allow only one query */

      if path_count ^= 1
      then call ERROR_RETURN (error_table_$badcall, "Usage is: bjmc set_default_journal JOURNAL_PATH");

/* see that the journal is opened */

      call before_journal_manager_$get_bj_oid (bj_dir (1), bj_entry (1), bj_oid, code);
      if code ^= 0
      then call ERROR_RETURN (code, "^/Unable to set default before journal path to ^a.",
	      pathname_ (bj_dir (1), bj_entry (1)));

/* set the default path */

      call before_journal_manager_$set_default_bj (bj_oid, code);
      if code ^= 0
      then if i_am_an_active_function
	 then return_string = "false";
	 else call ERROR_RETURN (code, "^/Unable to set default before journal path to ^a.",
		 pathname_ (bj_dir (1), bj_entry (1)));

      return;

   end SET_DEFAULT_PATH;
%page;
GET_DEFAULT_PATH:
   procedure ();

      if nargs > 1
      then call ERROR_RETURN (error_table_$badcall, "Usage is: ^[[^]bjmc get_default_journal^[]^]",
	      i_am_an_active_function, i_am_an_active_function);

/* get the bj_oid that is the default at this moment */

      call before_journal_manager_$get_default_bj (bj_oid, code);
      if code ^= 0
      then call ERROR_RETURN (code);

/* the bj_oid does very little for the user... give the pathname */

      call before_journal_manager_$get_bj_path_from_oid (bj_oid, bj_dir (1), bj_entry (1), code);

      if i_am_an_active_function
      then if code = 0
	 then call ioa_$rsnnl ("^a", return_string, rsl, pathname_ (bj_dir (1), bj_entry (1)));
	 else call ERROR_RETURN (code);
      else if code = 0
      then call ioa_ ("^a", pathname_ (bj_dir (1), bj_entry (1)));
      else call ERROR_RETURN (code);

      return;

   end GET_DEFAULT_PATH;
%page;
SET_ATTRIBUTE:
   procedure ();

      if i_am_an_active_function
      then return_string = "true";

      if nargs = 1
      then call ERROR_RETURN (error_table_$noarg, "^/Usage is:  bjmc sattr JOURNAL_PATHS -control_arg");

/* process the args */

      argno = 2;
processing_of_set_attribute_args:
      do while (argno <= nargs);

         call cu_$arg_ptr_rel (argno, argp, argl, code, arg_list_ptr);

         if argl = 0
         then call ERROR_RETURN (error_table_$bad_arg, "Null argument found in argument list.");

         if arg = "-pathname" | arg = "-pn"
         then
	  do;
	     argno = argno + 1;
	     call cu_$arg_ptr_rel (argno, argp, argl, code, arg_list_ptr);
	     if code ^= 0
	     then call ERROR_RETURN (code, "^/""-pathname"" requires a path name.");

	     call GET_PATH_FROM_ARG ();
	  end;
         else if arg = "-transaction_storage_limit" | arg = "-tsl"
         then
	  do;
	     argno = argno + 1;
	     call cu_$arg_ptr_rel (argno, argp, argl, code, arg_list_ptr);
	     if code ^= 0
	     then call ERROR_RETURN (code, "^/""-transaction_storage_limit"" requires an integer argument.");
	     transaction_storage_limit = cv_dec_check_ (arg, code);
	     if code ^= 0
	     then call ERROR_RETURN (error_table_$bad_arg,
		     "^/Unable to convert the transaction storage limit ^a into an integer.", arg);
	  end;
         else if substr (arg, 1, 1) = "-"
         then call ERROR_RETURN (error_table_$bad_arg, "^/""^a"" is an unrecognized argument.", arg);
         else call GET_PATH_FROM_ARG ();

         argno = argno + 1;

      end processing_of_set_attribute_args;

      if transaction_storage_limit = UNSET_STORAGE_LIMIT
      then call ERROR_RETURN (error_table_$noarg, "^/A transaction storage limit must be specified.");

/* anything to sattr? */

      if path_count = 0
      then call ERROR_RETURN (error_table_$noarg, "^/The name of a journal is required.");


/* set the attriubtes of the journals: curr. only transaction storage	*/
/* limit is settable.					*/
setting_the_journals:
      do a_path = 1 to path_count;
         call before_journal_manager_$set_transaction_storage_limit (bj_dir (a_path), bj_entry (a_path),
	    transaction_storage_limit, code);
         if code ^= 0
         then if i_am_an_active_function
	    then return_string = "false";
	    else call any_err_ (code, ME, "^/Unable to set the transaction_storage_limit to ^d on journal ^a.",
		    transaction_storage_limit, pathname_ (bj_dir (a_path), bj_entry (a_path)));

      end setting_the_journals;

/* finished with the sattr operation */

      return;

   end SET_ATTRIBUTE;
%page;
GET_PATH_FROM_ARG:
   procedure ();

      dcl	    dir_name	       char (168);
      dcl	    entry_name	       char (32);

      call expand_pathname_$add_suffix (arg, "bj", dir_name, entry_name, code);
      if code ^= 0
      then call ERROR_RETURN (code, "^/Unable to expand the pathname ""^a"".", arg);

      call check_star_name_$entry (entry_name, code);
      if code = 1 | code = 2
      then code = error_table_$nostars;
      if code ^= 0
      then call ERROR_RETURN (code, "^/Failed the starname check on the entry name ""^a"".", entry_name);

      path_count = path_count + 1;
      bj_dir (path_count) = dir_name;
      bj_entry (path_count) = entry_name;

      return;

   end GET_PATH_FROM_ARG;

      end the_real_work;


   end bj_mgr_call;
