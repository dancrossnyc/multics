/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(86-10-28,Dupuis), approve(86-11-13,MCR7573), audit(86-11-14,Blair),
     install(86-11-17,MR12.0-1220):
     Fixed a subsciptrange error in the ERROR_FINISH proc.
                                                   END HISTORY COMMENTS */


/* DESCRIPTION:

          This module appends a simple_typed_vector to a typed_vector_array.
     The TVA is extended if necessary.  When extended, the old TVA structure
     is freed and the p_tva_ptr parameter is changed to point to the new,
     extended, copy of the TVA.

     There are two calling sequences to this module:
     
     call dm_vu_append_simple_typed (area_ptr, slot_increase_factor,
     free_old_tva, value1, value2,..., valueN, typed_vector_array_ptr, code);
     
     or,

     call dm_vu_append_simple_typed (area_ptr, slot_increase_factor,
     free_old_tva, typed_vector_array_ptr, code);
     
     Also, this module can be invoked as a function with the same arguments,
     and it will return a pointer to the newly generated typed_vector.
     
     The first calling sequence will fill in the simple_typed_vector with
     pointers to copies of the supplied values.  The second calling sequence
     creates a simple_typed_vector with all null values.
     
*/

/* HISTORY:

Written by Lindsey Spratt, 03/01/82.

Modified:
05/17/82 by Lindsey Spratt: Fixed handling of varying strings.
09/24/82 by Lindsey Spratt:  Fixed bug where the simple_typed_vector_ptr was
	  not being recorded in the typed_vector_array if there were enough
	  slots in the tva to just add the vector.  It was working correctly
	  in the case where the tva had to be grown.
06/16/83 by Lindsey L. Spratt:  Fixed the problem where the parameter
            typed_vector_array_ptr was not being updated with the new value
            for the typed_vector_array_ptr when the typed_vector_array was
            grown.  Also, changed the handling of varying strings to assume
            that the storage pointed at by the arg_list ptr (for a varying
            string) is the length word and the string, instead of assuming
            that the "size" in the descriptor is the length and that the
            arg_list ptr points at just the string.
12/18/84 by Lindsey L. Spratt:  Changed to have standard format.  Changed to
            use modern sub_err_ calling sequence.  Changed to use
            error_table_$bad_subr_arg rather than $bad_arg.  Added check for
            enough args being supplied, which signals with $wrong_no_of_args
            if the check fails.  Changed to use the ERROR_RETURN technology
            for reporting errors.  Changed to reference data_format_util_
            rather than the obsolete data_mgmt_util_.
02/11/85 by Lindsey L. Spratt:  Changed to use the RETURN internal procedure.
            Added the ability to return the error_table_$area_too_small error
            code when an area condition occurs.
03/08/85 by Lindsey L. Spratt:  Fixed a bug due to old_tva_ptr being
            uninitialized.  Fixed to initialize all of the automatic ptr
            variables.
03/18/85 by Lindsey L. Spratt:  Cleaned up the implementation of the
            ERROR_RETURN proc.  Changed entire procedure to use only the
            cu_$*_rel entries.  Enhanced error reporting of GET_ARG_PTR to
	  include a name of the desired descriptor type.
*/


/* format: style2,ind3 */
dm_vu_append_simple_typed:
   proc () options (variable);

/* START OF DECLARATIONS */
/* Parameter */
/* Automatic */

      dcl	    arg_idx	       fixed bin;
      dcl	    arg_length	       fixed bin (21) init (0);
      dcl	    arg_list_arg_count     fixed bin;
      dcl	    arg_list_ptr	       ptr init (null ());
      dcl	    arg_ptr	       ptr init (null);
      dcl	    code_arg_idx	       fixed bin;
      dcl	    dim_idx	       fixed bin;
      dcl	    free_old_typed_vector_array_ptr
			       ptr init (null ());
      dcl	    nargs		       fixed bin;
      dcl	    ndims		       fixed bin;
      dcl	    number_of_nonvalue_args_at_end
			       fixed bin;
      dcl	    number_of_values_given fixed bin (35) init (0);
      dcl	    old_tva_ptr	       ptr init (null ());
      dcl	    packed	       bit (1) aligned;
      dcl	    p_code_ptr	       ptr init (null ());
      dcl	    p_typed_vector_array_ptr_ptr
			       ptr init (null ());
      dcl	    scale		       fixed bin;
      dcl	    size		       fixed bin (17) aligned;
      dcl	    storage_size	       fixed bin (35);
      dcl	    storage_string_ptr     ptr init (null ());
      dcl	    values_given	       bit (1) aligned init ("0"b);
      dcl	    tv_ptr_arg_idx	       fixed bin;
      dcl	    tva_ptr_arg_idx	       fixed bin;
      dcl	    type		       fixed bin;
      dcl	    vector_idx	       fixed bin;
      dcl	    work_area_ptr	       ptr init (null ());

/* Based */

      dcl	    descriptor_string      bit (36) aligned based;
      dcl	    free_old_typed_vector_array
			       bit (1) aligned based (free_old_typed_vector_array_ptr);
      dcl	    p_typed_vector_array_ptr
			       based (p_typed_vector_array_ptr_ptr) ptr;
      dcl	    p_code	       based (p_code_ptr) fixed bin (35);
      dcl	    ptr_template	       based ptr aligned;
      dcl	    s_fixed_real_template  based fixed bin (35) aligned;
      dcl	    storage_string	       bit (storage_size) based (storage_string_ptr) aligned;
      dcl	    varying_bit_storage_string
			       bit (storage_size) varying based (storage_string_ptr);
      dcl	    varying_char_storage_string
			       char (storage_size) varying based (storage_string_ptr);
      dcl	    work_area	       area based (work_area_ptr);


/* Builtin */

      dcl	    (addr, addrel, null)
			       builtin;

/* Condition */

      dcl	    (area, cleanup)	       condition;

/* Constant */

      dcl	    (
	    AREA_IS_BIG_ENOUGH     init (0),
	    AREA_IS_TOO_SMALL      init (1)
	    )		       fixed bin (35) internal static options (constant);

      dcl	    (
	    BITS_PER_BYTE	       init (9),
	    BITS_PER_WORD	       init (36)
	    )		       fixed bin (35) internal static options (constant);
      dcl	    (NO_PAD, NO_NL)	       init ("0"b) bit (1) aligned internal static options (constant);

      dcl	    MYNAME	       init ("dm_vu_init_tva") char (40) varying internal static options (constant);

      dcl	    (
	    AREA_PTR_ARG_IDX       init (1),
	    SLOT_INCREASE_ARG_IDX  init (2),
	    FREE_OLD_TVA_ARG_IDX   init (3),
	    NUMBER_OF_NONVALUE_ARGS_AT_BEGINNING
			       init (3),
	    TVA_PTR_ARG_OFFSET_FROM_SUBROUTINE_END
			       init (1),
	    TVA_PTR_ARG_OFFSET_FROM_FUNCTION_END
			       init (2),
	    CODE_ARG_OFFSET_FROM_SUBROUTINE_END
			       init (0),
	    CODE_ARG_OFFSET_FROM_FUNCTION_END
			       init (1),
	    NUMBER_OF_NONVALUE_ARGS_AT_SUBROUTINE_END
			       init (2),
	    NUMBER_OF_NONVALUE_ARGS_AT_FUNCTION_END
			       init (3),
	    NO_TYPE	       init (-1)
	    )		       fixed bin internal static options (constant);


/* Entry */

      dcl	    cu_$arg_count_rel      entry (fixed bin, ptr, fixed bin (35));
      dcl	    cu_$arg_list_ptr       entry (ptr);
      dcl	    cu_$arg_ptr_rel	       entry (fixed bin, ptr, fixed bin (21), fixed bin (35), ptr);
      dcl	    data_format_util_$get_data_bit_length
			       entry (bit (36) aligned, fixed bin (35), fixed bin (35));
      dcl	    decode_descriptor_     entry (ptr, fixed bin, fixed bin, bit (1) aligned, fixed bin, fixed bin, fixed bin);
      dcl	    dm_vector_util_$free_typed_vector
			       entry (ptr, ptr, ptr, fixed bin (35));
      dcl	    ioa_$general_rs	       entry (ptr, fixed bin, fixed bin, char (*), fixed bin (21), bit (1) aligned,
			       bit (1) aligned);
      dcl	    sub_err_	       entry () options (variable);

/* External */

      dcl	    (
	    error_table_$area_too_small,
	    error_table_$bad_subr_arg,
	    error_table_$wrong_no_of_args
	    )		       fixed bin (35) ext;

/* END OF DECLARATIONS */

      call cu_$arg_list_ptr (arg_list_ptr);
      call cu_$arg_count_rel (nargs, arg_list_ptr, (0));
      arg_list_arg_count = nargs;

      call decode_descriptor_ (arg_list_ptr, nargs, type, packed, ndims, size, scale);
      if type = pointer_desc
      then
         do;
	  tv_ptr_arg_idx = nargs;
	  tva_ptr_arg_idx = nargs - TVA_PTR_ARG_OFFSET_FROM_FUNCTION_END;
	  code_arg_idx = nargs - CODE_ARG_OFFSET_FROM_FUNCTION_END;
	  number_of_nonvalue_args_at_end = NUMBER_OF_NONVALUE_ARGS_AT_FUNCTION_END;
         end;
      else
         do;
	  tv_ptr_arg_idx = -1;
	  ;
	  tva_ptr_arg_idx = nargs - TVA_PTR_ARG_OFFSET_FROM_SUBROUTINE_END;
	  code_arg_idx = nargs - CODE_ARG_OFFSET_FROM_SUBROUTINE_END;
	  number_of_nonvalue_args_at_end = NUMBER_OF_NONVALUE_ARGS_AT_SUBROUTINE_END;
         end;

      if (nargs > (NUMBER_OF_NONVALUE_ARGS_AT_BEGINNING + number_of_nonvalue_args_at_end))
      then values_given = "1"b;
      else if (nargs = (NUMBER_OF_NONVALUE_ARGS_AT_BEGINNING + number_of_nonvalue_args_at_end))
      then values_given = "0"b;
      else call sub_err_ (error_table_$wrong_no_of_args, MYNAME, ACTION_CANT_RESTART, null (), 0,
	      "^/This program expects ^d arguments, or more, but was called with ^d arguments.",
	      (NUMBER_OF_NONVALUE_ARGS_AT_BEGINNING + number_of_nonvalue_args_at_end), nargs);

      on cleanup call ERROR_FINISH ();

      p_code_ptr = GET_ARG_PTR (arg_list_ptr, code_arg_idx, s_fixed_real_desc, "short_fixed_real");

      work_area_ptr = GET_ARG_PTR (arg_list_ptr, AREA_PTR_ARG_IDX, pointer_desc, "pointer") -> ptr_template;

      p_typed_vector_array_ptr_ptr = GET_ARG_PTR (arg_list_ptr, tva_ptr_arg_idx, pointer_desc, "pointer");

      typed_vector_array_ptr = p_typed_vector_array_ptr;

      tva_number_of_vector_slots =
	 typed_vector_array.number_of_vector_slots
	 + GET_ARG_PTR (arg_list_ptr, SLOT_INCREASE_ARG_IDX, s_fixed_real_desc, "short_fixed_real")
	 -> s_fixed_real_template;

      free_old_typed_vector_array_ptr = GET_ARG_PTR (arg_list_ptr, FREE_OLD_TVA_ARG_IDX, bit_desc, "nonvarying bit");

      stv_number_of_dimensions = typed_vector_array.number_of_dimensions;

      on area call RETURN (AREA_IS_TOO_SMALL);

      alloc simple_typed_vector in (work_area);
      simple_typed_vector.type = SIMPLE_TYPED_VECTOR_TYPE;
      simple_typed_vector.dimension (*).value_ptr = null ();

      if values_given
      then
         do;
	  number_of_values_given = nargs - (number_of_nonvalue_args_at_end + NUMBER_OF_NONVALUE_ARGS_AT_BEGINNING);

	  do arg_idx = NUMBER_OF_NONVALUE_ARGS_AT_BEGINNING + 1 to nargs - number_of_nonvalue_args_at_end;

	     call cu_$arg_ptr_rel (arg_idx, arg_ptr, arg_length, p_code, arg_list_ptr);
	     if p_code ^= 0
	     then call ERROR_RETURN (p_code, "^/Unable to get a pointer to parameter ^d.", arg_idx);

	     call decode_descriptor_ (arg_list_ptr, arg_idx, type, packed, ndims, size, scale);

	     if type = v_char_desc
	     then storage_size = size * BITS_PER_BYTE + BITS_PER_WORD;
	     else if type = v_bit_desc
	     then storage_size = size + BITS_PER_WORD;
	     else
	        do;
		 call data_format_util_$get_data_bit_length (arg_list_ptr -> arg_list.desc_ptrs (arg_idx)
		      -> descriptor_string, storage_size, p_code);
		 if p_code ^= 0
		 then call ERROR_RETURN (p_code, "^/Unable to get the length (in bits) of parameter ^d.", arg_idx);
	        end;

	     alloc storage_string in (work_area);
	     if type = v_char_desc
	     then varying_char_storage_string = addrel (arg_ptr, -1) -> varying_char_storage_string;
	     else if type = v_bit_desc
	     then varying_bit_storage_string = addrel (arg_ptr, -1) -> varying_bit_storage_string;
	     else storage_string = arg_ptr -> storage_string;

	     simple_typed_vector.dimension (arg_idx - NUMBER_OF_NONVALUE_ARGS_AT_BEGINNING).value_ptr =
		storage_string_ptr;

	  end;
         end;

      else number_of_values_given = 0;

      do dim_idx = number_of_values_given + 1 to simple_typed_vector.number_of_dimensions;
         simple_typed_vector.dimension (dim_idx).value_ptr = null;
      end;


      if typed_vector_array.number_of_vectors + 1 > typed_vector_array.number_of_vector_slots
      then
         do;
	  tva_maximum_dimension_name_length = typed_vector_array.maximum_dimension_name_length;
	  tva_number_of_dimensions = typed_vector_array.number_of_dimensions;
	  old_tva_ptr = typed_vector_array_ptr;
	  alloc typed_vector_array in (work_area);
	  typed_vector_array.version = TYPED_VECTOR_ARRAY_VERSION_2;
	  typed_vector_array.dimension_table = old_tva_ptr -> typed_vector_array.dimension_table;
	  typed_vector_array.number_of_vectors = old_tva_ptr -> typed_vector_array.number_of_vectors;
	  do vector_idx = 1 to typed_vector_array.number_of_vectors;
	     typed_vector_array.vector_slot (vector_idx) = old_tva_ptr -> typed_vector_array.vector_slot (vector_idx);
	  end;
	  p_typed_vector_array_ptr = typed_vector_array_ptr;
         end;

      typed_vector_array.number_of_vectors = typed_vector_array.number_of_vectors + 1;
      typed_vector_array.vector_slot (typed_vector_array.number_of_vectors) = simple_typed_vector_ptr;


      if tv_ptr_arg_idx > 0
      then GET_ARG_PTR (arg_list_ptr, tv_ptr_arg_idx, pointer_desc, "pointer") -> ptr_template = simple_typed_vector_ptr;

      call RETURN (AREA_IS_BIG_ENOUGH);

MAIN_RETURN:
      return;


RETURN:
   proc (r_p_area_status);
      dcl	    r_p_area_status	       fixed bin (35) parm;
      if r_p_area_status = AREA_IS_BIG_ENOUGH
      then
         do;
	  p_code = 0;
	  call FINISH ();
         end;
      else if r_p_area_status = AREA_IS_TOO_SMALL
      then
         do;
	  p_code = error_table_$area_too_small;
	  call ERROR_FINISH ();
         end;
      else call ERROR_RETURN (error_table_$bad_subr_arg, "^/There is an internal program logic error in this program.
The RETURN internal procedure was given an area status of ^d, 
when only ^d and ^d are defined statuses.", r_p_area_status, AREA_IS_BIG_ENOUGH, AREA_IS_TOO_SMALL);
      goto MAIN_RETURN;
   end RETURN;


ERROR_RETURN:
   proc () options (variable);
      dcl	    er_p_code_ptr	       ptr init (null ());
      dcl	    er_p_code	       based (er_p_code_ptr) fixed bin (35);
      dcl	    er_arg_list_ptr	       ptr init (null);
      dcl	    er_code	       fixed bin (35);
      dcl	    er_msg	       char (1024);
      dcl	    er_based_msg	       char (er_msg_length) based (addr (er_msg));
      dcl	    er_msg_length	       fixed bin (21) init (0);

      dcl	    er_nargs	       fixed bin;
      call cu_$arg_list_ptr (er_arg_list_ptr);
      call cu_$arg_count_rel (er_nargs, er_arg_list_ptr, (0));
      if er_nargs = 0
      then er_code = 0;
      else
         do;
	  call cu_$arg_ptr_rel (1, er_p_code_ptr, (0), (0), er_arg_list_ptr);
	  er_code = er_p_code;
         end;
      if er_nargs >= 2
      then call ioa_$general_rs (er_arg_list_ptr, 2, 3, er_msg, er_msg_length, NO_PAD, NO_NL);

      call sub_err_ (er_code, MYNAME, ACTION_CANT_RESTART, null (), 0, "^a", er_based_msg);

   end ERROR_RETURN;
%page;
FINISH:
   proc ();
      if free_old_typed_vector_array_ptr ^= null
      then if free_old_typed_vector_array & old_tva_ptr ^= null
	 then free old_tva_ptr -> typed_vector_array;
   end FINISH;

ERROR_FINISH:
   proc ();
      if p_typed_vector_array_ptr_ptr ^= null
      then
         do;
	  if old_tva_ptr ^= null
	  then
	     do;
	        p_typed_vector_array_ptr = old_tva_ptr;
	        old_tva_ptr = null;
	        if p_typed_vector_array_ptr ^= typed_vector_array_ptr & typed_vector_array_ptr ^= null
	        then free typed_vector_array;
	     end;
	  if simple_typed_vector_ptr ^= null
	  then
	     do;

	        call dm_vector_util_$free_typed_vector (work_area_ptr, p_typed_vector_array_ptr,
		   simple_typed_vector_ptr, (0));
	        if p_typed_vector_array_ptr -> typed_vector_array.number_of_vectors > 0
	        then if p_typed_vector_array_ptr
		        -> typed_vector_array
		        .vector_slot (p_typed_vector_array_ptr -> typed_vector_array.number_of_vectors)
		        = simple_typed_vector_ptr
		   then p_typed_vector_array_ptr
			   -> typed_vector_array
			   .vector_slot (p_typed_vector_array_ptr -> typed_vector_array.number_of_vectors) = null;
	     end;
         end;
   end ERROR_FINISH;
%page;
GET_ARG_PTR:
   proc (gap_p_arg_list_ptr, gap_p_arg_idx, gap_p_required_type, gap_p_type_name) returns (ptr);
      dcl	    gap_p_arg_list_ptr     ptr parm;
      dcl	    gap_p_arg_idx	       fixed bin parm;
      dcl	    gap_p_required_type    fixed bin parm;
      dcl	    gap_p_type_name	       char (*) parm;

      dcl	    gap_arg_ptr	       ptr init (null);
      dcl	    gap_arg_len	       fixed bin (21);
      dcl	    gap_code	       fixed bin (35) init (0);
      dcl	    gap_ndims	       fixed bin;
      dcl	    gap_packed	       bit (1) aligned;
      dcl	    gap_scale	       fixed bin;
      dcl	    gap_size	       fixed bin;
      dcl	    gap_type	       fixed bin;

      if gap_p_required_type ^= NO_TYPE
      then
         do;
	  call decode_descriptor_ (gap_p_arg_list_ptr, gap_p_arg_idx, gap_type, gap_packed, gap_ndims, gap_size,
	       gap_scale);
	  if gap_type ^= gap_p_required_type
	  then call ERROR_RETURN (error_table_$bad_subr_arg,
		  "^/Parameter ^d must be of type ^d (^a), but the one given was ^d.", gap_p_arg_idx,
		  gap_p_required_type, gap_p_type_name, gap_type);
         end;

      call cu_$arg_ptr_rel (gap_p_arg_idx, gap_arg_ptr, gap_arg_len, gap_code, gap_p_arg_list_ptr);
      if gap_code ^= 0
      then call ERROR_RETURN (gap_code, "^/Unable to get a pointer to parameter ^d.", gap_p_arg_idx);

      return (gap_arg_ptr);
   end GET_ARG_PTR;
%page;
%include vu_typed_vector_array;
%page;
%include vu_typed_vector;
%page;
%include desc_types;
%page;
%include sub_err_flags;
%page;
%include arg_list;
   end dm_vu_append_simple_typed;
