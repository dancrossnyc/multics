/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION:

	This  program,  dm_signal_user_shutdown,  is  the target of an alarm
     call  channel  set  up by the handler for the dm_shutdown_scheduled_ IPS.
     It  builds  the  dm_user_shutdown_info  condition  info  structure, calls
     signal_  so  the user process may handle the condition, outputs a warning
     user  shutdown  is  in  progress on the error_output I/O switch, and then
     calls  transaction_manager_$user_shutdown  to actually do the per-process
     shutdown.   If  a  transaction  was  acted  upon  in any way, the user is
     informed  (again  on the error_output switch).  Care must be taken by the
     software  to  not  invoke  per-process  initialization  in the process of
     shutdown.   It is possible for a user process to have shutdown before the
     alarm goes off, in which case we just return.
*/

/* HISTORY:

Written by Lee A. Newcomb, 11/15/83.
Modified:
04/19/84 by Lee A. Newcomb:  upgraded from prototype version.
05/10/84 by Lee A. Newcomb:  to use dm_tm_shutdown_info.incl.pl1 properly.
07/16/84 by R. Michael Tague:  Changed the call dm_util_$using_dm to
            call dm_misc_util_$dm_is_process_using_dm.
08/17/84 by Lee A. Newcomb:  Replaced dm_per_system_$... calls with calls to
	  the dm_misc_util_$ TV.
09/19/84 by Lee A. Newcomb:  Renamed from dm_user_shut_handler_ and made to
            understand user settable flags upon return from the signal_ call.
10/29/84 by Lee A. Newcomb:  Fixed to not use dm_ prefix on
            dm_misc_util_$is_process_using_dm.
02/21/85 by Lee A. Newcomb:  Fixed to reset the IPS mask before signalling.
03/11/85 by Lindsey L. Spratt:  Reformatted the shutdown message.  Changed to
            use ioa_$ioa_switch instead of $ioa_stream, changed to put the
            message out on user_io instead of error_output.
04/08/85 by Lee A. Newcomb:  Fixed to use the maxlength builtin instead of the
            constant 256 when filling in the condition_info.info_string
*/

/* format: style2,ll79,ind3,^indprocbody,ifthendo,ifthen,^indnoniterdo */
/* format: ^inddcls,dclind5,idind35,linecom */
%page;
dm_signal_user_shutdown:
   proc ();

/* START OF DECLARATIONS */

/* Automatic */
dcl  (
     code				fixed bin (35) init (0),
     1 local_dm_user_shutdown_info	aligned like dm_user_shutdown_info,
     saved_ips_mask			bit (36) aligned init ("0"b),
     tm_shutdown_info_idx		fixed bin
     )				automatic;

/* Builtin */
dcl  (addr, bin, length, maxlength, min, null, rtrim, size, unspec)
				builtin;

/* Condition */
dcl  (cleanup, ioa_error)		condition;

/* Constant */
dcl  (
     ALLOW_NO_INTERRUPTIONS_MASK	bit (36) aligned init (""b),
     myname			char (32) varying
				init ("dm_signal_user_shutdown")
     )				internal static options (constant);

/* Entry */
dcl  (
     dm_misc_util_$is_process_using_dm	entry () returns (bit (1) aligned),
     dm_misc_util_$get_shutdown_reason	entry returns (char (64)),
     get_system_free_area_		entry () returns (ptr),
     hcs_$reset_ips_mask		entry (bit (36) aligned,
				bit (36) aligned),
     hcs_$set_ips_mask		entry (bit (36) aligned,
				bit (36) aligned),
     ioa_$ioa_switch		entry () options (variable),
     signal_			entry () options (variable),
     sub_err_			entry () options (variable),
     transaction_manager_$user_shutdown entry (ptr, ptr, fixed bin (35))
     );

/* External */

dcl  iox_$user_io			ptr ext static;
dcl  (
     error_table_$unimplemented_version fixed bin (35)
     )				ext;

/* END OF DECLARATIONS */
%page;
/* Mask IPS' while getting shutdown info so user can't do	*/
/* user shutdown by breaking and calling dm_user_shutdown;	*/
/* causing us to take an error if a start is done.  We will	*/
/* reset the mask before signalling, however.		*/

   on cleanup call CLEAN_UP ();
   call hcs_$set_ips_mask (ALLOW_NO_INTERRUPTIONS_MASK, saved_ips_mask);

/* Is the process still using DM?  If not, our job is done. */

   if dm_misc_util_$is_process_using_dm () then
SIGNAL_USER_SHUTDOWN:
      do;

/* We fill in the dm_user_shutdown_info condition info structure. */

      unspec (local_dm_user_shutdown_info) = ""b;		/* clear flags and all */
      local_dm_user_shutdown_info.header.length =
	 size (local_dm_user_shutdown_info);		/* nothing like self-definition */
      local_dm_user_shutdown_info.header.version =
	 DM_USER_SHUTDOWN_INFO_VERSION_1;
      local_dm_user_shutdown_info.header.quiet_restart = "1"b;
						/* turn quiet_restart on */

/* now the DM part of the condition info. */
      local_dm_user_shutdown_info.reason =
	 dm_misc_util_$get_shutdown_reason ();

      call hcs_$reset_ips_mask (saved_ips_mask, saved_ips_mask);
						/* user may interrupt now */

/* fill in the info_string for our convenience, or a user's that	*/
/* handles the condition without returning to here.		*/

      local_dm_user_shutdown_info.header.info_string =
	 "     The Data Management system is shutting down; starting DM user shutdown.
     Shutdown reason:
     "
	 ;
      local_dm_user_shutdown_info.header.info_string =
	 local_dm_user_shutdown_info.header.info_string
	 ||
	 substr (local_dm_user_shutdown_info.reason, 1,
	 min (length (rtrim (local_dm_user_shutdown_info.reason)),
	 maxlength (local_dm_user_shutdown_info.header.info_string)
	 - length (local_dm_user_shutdown_info.header.info_string)));
%page;
/* NOW signal the shutdown warning to the user with the above info. */

      call signal_ ("dm_user_shutdown_", null (),
	 addr (local_dm_user_shutdown_info), null ());

/* To get to this point, the user must have either (1) not handled	*/
/* the condition we signalled, or (2) handled it, but used		*/
/* continue_to_signal_ to return control here.  In either case, check	*/
/* if the user wishes to call transaction_manager_$user_shutdown	*/
/* and/or recieve any warning messages.  If the user process is not	*/
/* shutdown as far as DM is concerned, the process will get bumped by	*/
/* the Daemon later in DMS shutdown.				*/
/* We do not mask IPS' again, but try to not call shutdown if the	*/
/* has already done DM shutdown.  The window is very small, and the	*/
/* worst that can happen is tm_$user_shutdown gets called and does	*/
/* nothing, and the user sees some messages on the error_output I/O	*/
/* switch which don't mean much.				*/

      if ^local_dm_user_shutdown_info.flags.dont_do_user_shutdown
	 & dm_misc_util_$is_process_using_dm () then
DO_USER_SHUTDOWN:
         do;

         if ^local_dm_user_shutdown_info.flags.dont_print_warning then do;
	  on ioa_error go to IGNORE_USER_SHUTDOWN_WARNING;
	  call ioa_$ioa_switch (iox_$user_io,
	       local_dm_user_shutdown_info.info_string);
IGNORE_USER_SHUTDOWN_WARNING:
         end;

         call transaction_manager_$user_shutdown (get_system_free_area_ (),
	    tm_shutdown_info_ptr, code);

         if ^local_dm_user_shutdown_info.dont_print_warning then
OUTPUT_USER_SHUTDOWN_RESULTS:
	  do;

	  if tm_shutdown_info_ptr ^= null () then
OUTPUT_TM_USER_SHUTDOWN_INFO:
	     do;

	     call CHECK_VERSION (tm_shutdown_info.version,
		TM_SHUTDOWN_INFO_VERSION_1, "tm_shutdown_info");

	     on ioa_error go to IGNORE_TM_SHUTDOWN_RESULTS_OUTPUT;

	     call ioa_$ioa_switch (iox_$user_io,
		"^a:^2xAdjusted ^[no^s^;^d^] transaction^[s^].", myname,
		(tm_shutdown_info.count = 0), tm_shutdown_info.count,
		(tm_shutdown_info.count ^= 1));
%page;
PER_TXN_INFO:
	     do tm_shutdown_info_idx = 1 to tm_shutdown_info.count;
	        call ioa_$ioa_switch (iox_$user_io,
		   "^5xTransaction ^d ^a^(, error code = ^d^).",
		   bin (tm_shutdown_info.txn_id (tm_shutdown_info_idx)),
		   OP_NAME (tm_shutdown_info
		   .op_completed (tm_shutdown_info_idx)),
		   (tm_shutdown_info.error_code (tm_shutdown_info_idx)
		   ^= 0),
		   tm_shutdown_info.error_code (tm_shutdown_info_idx));
	     end PER_TXN_INFO;

	  end OUTPUT_TM_USER_SHUTDOWN_INFO;

	  if code ^= 0 then				/* check code returned */
	     call sub_err_ (code, myname, ACTION_DEFAULT_RESTART,
		"Error occurred during DM user shutdown.");

         end OUTPUT_USER_SHUTDOWN_RESULTS;

IGNORE_TM_SHUTDOWN_RESULTS_OUTPUT:
      end DO_USER_SHUTDOWN;

   end SIGNAL_USER_SHUTDOWN;

   call FINISH ();

MAIN_RETURN:
   return;


/* end dm_signal_user_shutdown; */
%page;
/* FINISH and CLEAN_UP currently do the same work.	*/

FINISH:
   proc ();
CLEAN_UP:
   entry ();

   if tm_shutdown_info_ptr ^= null () then
      free tm_shutdown_info;
   if saved_ips_mask ^= ""b then
      call hcs_$reset_ips_mask (saved_ips_mask, saved_ips_mask);


   end FINISH;
%skip (4);
CHECK_VERSION:
   proc (chkvs_input_version, chkvs_expected_version, chkvs_structure_name);

dcl  (
     chkvs_input_version		char (8) aligned,
     chkvs_expected_version		char (8) aligned,
     chkvs_structure_name		char (*)
     )				parameter;

   if chkvs_input_version ^= chkvs_expected_version then
      call sub_err_ (error_table_$unimplemented_version, myname,
	 ACTION_CANT_RESTART, "Expected version ^a of ^a, received ^a.",
	 chkvs_expected_version, chkvs_structure_name, chkvs_input_version);

   return;


   end CHECK_VERSION;
%page;
%include condition_info_header;
%page;
%include dm_user_shut_info;
%page;
%include dm_tm_shutdown_info;
%page;
%include sub_err_flags;


   end dm_signal_user_shutdown;
