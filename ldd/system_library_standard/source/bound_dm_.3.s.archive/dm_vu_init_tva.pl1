/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION:
          This subroutine builds an "empty" typed_vector_array.  It has two
     calling sequences:

     call dm_vector_util_$init_tva (area_ptr, number_of_slots,
     number_of_dimensions, maximum_dimension_name_length,
     typed_vector_array_ptr, code);
     
     or,
     
     call dm_vector_util_$init_tva (area_ptr, number_of_slots,
     dim_1_name, dim_1_variable,...dim_N_name, dim_N_variable,
     typed_vector_array_ptr, code);
     
     The effective difference in the two calling sequences is whether or not
     the dimension_table has the name and descriptor_ptr variables filled in.
     In the first case, they are not filled in (they are initialized to "" and
     null) and the caller is left with this responsibility.  In the second
     case, they are filled in.  The descriptor for dimension I is the same as
     the descriptor for dim_I_variable.  The name for dimension I is the
     contents of the dim_I_name variable.

*/

/* HISTORY:

Written by Lindsey Spratt, 02/01/82.

Modified:
03/09/82 by Lindsey Spratt:  Changed to use named constants for the position
	  of the arguments.  Added another calling sequence.
06/28/82 by Lindsey Spratt: Changed from version 1 to version 2 of
            typed_vector_array.
06/17/83 by Lindsey L. Spratt:  Fixed to handle varying character strings as
            input parameters correctly.
12/18/84 by Lindsey L. Spratt:  Changed to use the ERROR_RETURN technology.
            Moved the proc stmt to the standard place.  Fixed to free the tva
            on cleanup.  Changed some uppercase automatic variables to
            lowercase.  Modernized the sub_err_ calls.  Added additional
            validity checks on the parameter list.
12/19/84 by Lindsey L. Spratt:  Added GET_ARG_PTR function.
*/
/* format: style2,ind3 */
%page;
/* format: style2,ind3 */
dm_vu_init_tva:
   proc () options (variable);

/* START OF DECLARATIONS */
/* Parameter */
/* Automatic */

      dcl	    arg_idx	       fixed bin;
      dcl	    arg_len	       fixed bin (21);
      dcl	    arg_list_arg_count     fixed bin;
      dcl	    arg_list_ptr	       ptr;
      dcl	    arg_ptr	       ptr init (null);
      dcl	    code		       fixed bin (35) init (0);
      dcl	    code_arg_idx	       fixed bin;
      dcl	    descriptor_string_ptr  ptr;
      dcl	    dim_idx	       fixed bin;
      dcl	    is_dimension_value     bit (1) aligned;
      dcl	    names_given	       bit (1) aligned init ("0"b);
      dcl	    nargs		       fixed bin;
      dcl	    ndims		       fixed bin;
      dcl	    number_of_name_args    fixed bin init (0);
      dcl	    p_code_ptr	       ptr;
      dcl	    p_typed_vector_array_ptr_ptr
			       ptr init (null);
      dcl	    packed	       bit (1) aligned;
      dcl	    scale		       fixed bin;
      dcl	    size		       fixed bin;
      dcl	    tva_ptr_arg_idx	       fixed bin;
      dcl	    type		       fixed bin;
      dcl	    work_area_ptr	       ptr;

/* Based */

      dcl	    char_template	       based char (size);
      dcl	    descriptor_string      bit (36) aligned based (descriptor_string_ptr);
      dcl	    p_code	       based (p_code_ptr) fixed bin (35);
      dcl	    p_typed_vector_array_ptr
			       based (p_typed_vector_array_ptr_ptr) ptr;
      dcl	    ptr_template	       based ptr;
      dcl	    s_fixed_real_template  based fixed bin;
      dcl	    v_char_template	       based char (size) varying;
      dcl	    work_area	       area based (work_area_ptr);

/* Builtin */

      dcl	    (addrel, length, max, null, rtrim)
			       builtin;

/* Condition */

      dcl	    cleanup	       condition;

/* Constant */

      dcl	    MYNAME	       init ("dm_vu_init_tva") char (40) varying internal static options (constant);
      dcl	    (
	    AREA_PTR_ARG_IDX       init (1),
	    NUMBER_OF_SLOTS_ARG_IDX
			       init (2),
	    NUMBER_OF_NONNAME_ARGS_AT_BEGINNING
			       init (2),
	    TVA_PTR_ARG_OFFSET_FROM_END
			       init (1),
	    NUMBER_OF_NONNAME_ARGS_AT_END
			       init (2),
	    NUMBER_OF_DIMENSIONS_ARG_IDX
			       init (3),
	    MAX_DIM_NAME_LEN_ARG_IDX
			       init (4),
	    NO_TYPE	       init (-1)
	    )		       fixed bin (17) internal static options (constant);
      dcl	    (NO_PAD, NO_NL)	       init ("0"b) bit (1) aligned internal static options (constant);

/* Entry */

      dcl	    cu_$arg_count	       entry (fixed bin, fixed bin (35));
      dcl	    cu_$arg_list_ptr       entry (ptr);
      dcl	    cu_$arg_ptr_rel	       entry (fixed bin, ptr, fixed bin (21), fixed bin (35), ptr);
      dcl	    decode_descriptor_     entry (ptr, fixed bin, fixed bin, bit (1) aligned, fixed bin, fixed bin, fixed bin);
      dcl	    dm_vector_util_$err_no_operation
			       entry (ptr, fixed bin, fixed bin, ptr, ptr, fixed bin (35));
      dcl	    dm_vector_util_$free_typed_vector_array
			       entry (ptr, ptr, fixed bin (35));
      dcl	    ioa_$general_rs	       entry (ptr, fixed bin, fixed bin, char (*), fixed bin (21), bit (1) aligned,
			       bit (1) aligned);
      dcl	    sub_err_	       entry () options (variable);

/* External */

      dcl	    (
	    error_table_$bad_subr_arg,
	    error_table_$badcall,
	    error_table_$wrong_no_of_args
	    )		       fixed bin (35) ext;


/* END OF DECLARATIONS */

      typed_vector_array_ptr = null;

      on cleanup call ERROR_FINISH ();

      call cu_$arg_count (nargs, (0));
      arg_list_arg_count = nargs;
      call cu_$arg_list_ptr (arg_list_ptr);

      number_of_name_args = nargs - (NUMBER_OF_NONNAME_ARGS_AT_END + NUMBER_OF_NONNAME_ARGS_AT_BEGINNING);
      if number_of_name_args < 0
      then call sub_err_ (error_table_$wrong_no_of_args, MYNAME, ACTION_CANT_RESTART, null (), 0,
	      "^/This program requires at least ^d arguments in its calling sequence^/and it was called with only ^d.",
	      NUMBER_OF_NONNAME_ARGS_AT_END + NUMBER_OF_NONNAME_ARGS_AT_BEGINNING, nargs);

      code_arg_idx = nargs;
      tva_ptr_arg_idx = nargs - TVA_PTR_ARG_OFFSET_FROM_END;

      p_code_ptr = GET_ARG_PTR (arg_list_ptr, code_arg_idx, s_fixed_real_desc);

      p_code = 0;

      work_area_ptr = GET_ARG_PTR (arg_list_ptr, AREA_PTR_ARG_IDX, pointer_desc) -> ptr_template;

      tva_number_of_vector_slots =
	 GET_ARG_PTR (arg_list_ptr, NUMBER_OF_SLOTS_ARG_IDX, s_fixed_real_desc) -> s_fixed_real_template;

      p_typed_vector_array_ptr_ptr = GET_ARG_PTR (arg_list_ptr, tva_ptr_arg_idx, pointer_desc);

      call decode_descriptor_ (arg_list_ptr, NUMBER_OF_DIMENSIONS_ARG_IDX, type, packed, ndims, size, scale);
      if type = s_fixed_real_desc
      then
         do;
	  tva_number_of_dimensions =
	       GET_ARG_PTR (arg_list_ptr, NUMBER_OF_DIMENSIONS_ARG_IDX, NO_TYPE) -> s_fixed_real_template;
	  names_given = "0"b;

	  if nargs ^= NUMBER_OF_NONNAME_ARGS_AT_END + NUMBER_OF_NONNAME_ARGS_AT_BEGINNING + 2
	  then call sub_err_ (error_table_$wrong_no_of_args, MYNAME, ACTION_CANT_RESTART, null (), 0,
		  "^/This program was apparently called with the calling sequence providing
just the number of dimensions desired, rather than the names and data types
of the dimensions.  However, this calling sequence requires exactly ^d 
arguments and ^d were supplied.", NUMBER_OF_NONNAME_ARGS_AT_END + NUMBER_OF_NONNAME_ARGS_AT_BEGINNING + 2, nargs);

	  tva_maximum_dimension_name_length =
	       GET_ARG_PTR (arg_list_ptr, MAX_DIM_NAME_LEN_ARG_IDX, s_fixed_real_desc) -> s_fixed_real_template;
         end;
      else
         do;
	  names_given = "1"b;
	  if mod (number_of_name_args, 2) ^= 0
	  then call sub_err_ (error_table_$wrong_no_of_args, MYNAME, ACTION_CANT_RESTART, null (), 0,
		  "^/This program was apparently called with the calling sequence providing
the names and data types of the desired dimensions, rather than just the 
number of the dimensions." || "  However, this calling sequence requires two 
arguments per dimension, and an odd number of dimension definition 
arguments, ^d, was supplied.", number_of_name_args);

	  tva_number_of_dimensions = number_of_name_args / 2;

	  tva_maximum_dimension_name_length = 0;
	  do arg_idx = NUMBER_OF_NONNAME_ARGS_AT_BEGINNING + 1 to nargs - NUMBER_OF_NONNAME_ARGS_AT_END by 2;
	     call decode_descriptor_ (arg_list_ptr, arg_idx, type, packed, ndims, size, scale);
	     call cu_$arg_ptr_rel (arg_idx, arg_ptr, arg_len, code, arg_list_ptr);
	     if code ^= 0
	     then call ERROR_RETURN (code, "^/Unable to get a pointer to parameter ^d.", arg_idx);


	     if type = char_desc
	     then tva_maximum_dimension_name_length =
		     max (tva_maximum_dimension_name_length, length (rtrim (arg_ptr -> char_template)));
	     else if type = v_char_desc
	     then tva_maximum_dimension_name_length =
		     max (tva_maximum_dimension_name_length, length (rtrim (addrel (arg_ptr, -1) -> v_char_template)))
		     ;
	     else call ERROR_RETURN (error_table_$bad_subr_arg,
		     "^/Parameter ^d must be the name of a dimension, a variable having
data type ^d or ^d, but has data type ^d.", arg_idx, char_desc, v_char_desc, type);

	  end;
         end;


      alloc typed_vector_array in (work_area);
      typed_vector_array.version = TYPED_VECTOR_ARRAY_VERSION_2;
      typed_vector_array.number_of_vectors = 0;
      typed_vector_array.dimension_table (*).descriptor_ptr = null;
      typed_vector_array.dimension_table (*).cv_to_print = dm_vector_util_$err_no_operation;
      typed_vector_array.dimension_table (*).cv_to_typed = dm_vector_util_$err_no_operation;

      is_dimension_value = "1"b;
      dim_idx = 0;

      if names_given
      then
         do arg_idx = NUMBER_OF_NONNAME_ARGS_AT_BEGINNING + 1 to nargs - NUMBER_OF_NONNAME_ARGS_AT_END;
	  is_dimension_value = ^is_dimension_value;
	  call decode_descriptor_ (arg_list_ptr, arg_idx, type, packed, ndims, size, scale);
	  call cu_$arg_ptr_rel (arg_idx, arg_ptr, arg_len, code, arg_list_ptr);
	  if code ^= 0
	  then call ERROR_RETURN (code, "^/Unable to get a pointer to parameter ^d.", arg_idx);

	  if is_dimension_value
	  then
	     do;
	        alloc descriptor_string in (work_area);
	        descriptor_string = arg_list_ptr -> arg_list.desc_ptrs (arg_idx) -> descriptor_string;
	        typed_vector_array.dimension_table (dim_idx).descriptor_ptr = descriptor_string_ptr;
	     end;

	  else if type = char_desc
	  then
	     do;
	        dim_idx = dim_idx + 1;
	        typed_vector_array.dimension_table (dim_idx).name = rtrim (arg_ptr -> char_template);
	     end;
	  else if type = v_char_desc
	  then
	     do;
	        dim_idx = dim_idx + 1;
	        typed_vector_array.dimension_table (dim_idx).name = rtrim (addrel (arg_ptr, -1) -> v_char_template);
	     end;
	  else call ERROR_RETURN (error_table_$bad_subr_arg,
		  "^/Parameter ^d must be the name of a dimension, a variable having
data type ^d or ^d, but has data type ^d.", arg_idx, char_desc, v_char_desc, type);

         end;
      else typed_vector_array.dimension_table.name = "";

      p_typed_vector_array_ptr = typed_vector_array_ptr;
MAIN_RETURN:
      return;



ERROR_RETURN:
   proc () options (variable);
      dcl	    er_arg_list_ptr	       ptr init (null);
      dcl	    er_code	       fixed bin (35);
      dcl	    er_msg	       varying based (addr (er_msg_struc)) char (length (er_msg_struc.str));
      dcl	    1 er_msg_struc,
	      2 len	       fixed bin (21) aligned,
	      2 str	       char (1024) unaligned;
      dcl	    er_nargs	       fixed bin;
      dcl	    er_s_fixed_real_template
			       based fixed bin (35);
      call cu_$arg_list_ptr (er_arg_list_ptr);
      call cu_$arg_count (er_nargs, (0));
      if er_nargs = 0
      then er_code = 0;
      else er_code = er_arg_list_ptr -> arg_list.arg_ptrs (1) -> er_s_fixed_real_template;
      if er_nargs < 2
      then er_msg = "";
      else call ioa_$general_rs (er_arg_list_ptr, 2, 3, er_msg_struc.str, er_msg_struc.len, NO_PAD, NO_NL);

      call sub_err_ (er_code, MYNAME, ACTION_CANT_RESTART, null (), 0, er_msg);

   end ERROR_RETURN;
%page;
ERROR_FINISH:
   proc ();
      if typed_vector_array_ptr ^= null
      then if p_typed_vector_array_ptr ^= typed_vector_array_ptr
	 then call dm_vector_util_$free_typed_vector_array (work_area_ptr, typed_vector_array_ptr, (0));
   end ERROR_FINISH;
%page;
GET_ARG_PTR:
   proc (gap_p_arg_list_ptr, gap_p_arg_idx, gap_p_required_type) returns (ptr);
      dcl	    gap_p_arg_list_ptr     ptr parm;
      dcl	    gap_p_arg_idx	       fixed bin parm;
      dcl	    gap_p_required_type    fixed bin parm;

      dcl	    gap_arg_ptr	       ptr init (null);
      dcl	    gap_arg_len	       fixed bin (21);
      dcl	    gap_code	       fixed bin (35) init (0);
      dcl	    gap_ndims	       fixed bin;
      dcl	    gap_packed	       bit (1) aligned;
      dcl	    gap_scale	       fixed bin;
      dcl	    gap_size	       fixed bin;
      dcl	    gap_type	       fixed bin;

      if gap_p_required_type ^= NO_TYPE
      then
         do;
	  call decode_descriptor_ (gap_p_arg_list_ptr, gap_p_arg_idx, gap_type, gap_packed, gap_ndims, gap_size,
	       gap_scale);
	  if gap_type ^= gap_p_required_type
	  then call ERROR_RETURN (error_table_$bad_subr_arg,
		  "^/Parameter ^d must be of type ^d, but the one given was ^d.", gap_p_arg_idx, gap_p_required_type,
		  gap_type);
         end;

      call cu_$arg_ptr_rel (gap_p_arg_idx, gap_arg_ptr, gap_arg_len, gap_code, gap_p_arg_list_ptr);
      if gap_code ^= 0
      then call ERROR_RETURN (gap_code, "^/Unable to get a pointer to parameter ^d.", gap_p_arg_idx);

      return (gap_arg_ptr);
   end GET_ARG_PTR;

%include vu_typed_vector_array;
%page;
%include desc_types;
%page;
%include sub_err_flags;
%page;
%include descriptor;
%page;
%include arg_list;
   end dm_vu_init_tva;
