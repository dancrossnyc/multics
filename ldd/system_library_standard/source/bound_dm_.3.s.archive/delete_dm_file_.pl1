/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */
/* format: style4,ifthenstmt,^indproc,^indcomtxt */
/*---------------*/

delete_dm_file_: proc (A_dir_name, A_entry_name, A_code);

/* DESCRIPTION:

   Deleting primitive for DM files, with interface like hcs_$delentry_file.
*/

/* HISTORY:

Written by Steve Herbst, 03/29/83.
Modified:
10/15/84 by Steve Herbst: Changed in response to audit comments.
12/05/84 by Matthew Pierret: Changed to return the code
            dm_error_$delete_pending_transaction if the deletion was
            successful but the transaction was not committed because
            this routine did not begin the transaction.
12/07/84 by Lindsey L. Spratt:  Changed
            error_table_$delete_pending_transaction to dm_error_$=.
*/

/* Parameters */

dcl  (A_dir_name, A_entry_name) char (*);
dcl  A_code fixed bin (35);

/* Automatic */

dcl  txn_id bit (36) aligned;
dcl  (begin_code, code) fixed bin (35);

/* External */

dcl  dm_error_$delete_pending_transaction fixed bin (35) ext;
dcl  dm_error_$transaction_in_progress fixed bin (35) ext;

/* Entries */

dcl  file_manager_$delete entry (char (*), char (*), fixed bin (35));
dcl  transaction_manager_$abort_txn entry (bit (36) aligned, fixed bin (35));
dcl  transaction_manager_$begin_txn entry (fixed bin, bit (36) aligned, bit (36) aligned, fixed bin (35));
dcl  transaction_manager_$commit_txn entry (bit (36) aligned, fixed bin (35));

/* Conditions */

dcl  cleanup condition;
%page;
	A_code, begin_code, code = 0;
	txn_id = "0"b;

	on cleanup call FINISH ();

	call transaction_manager_$begin_txn (TM_NORMAL_MODE, "0"b, txn_id, begin_code);
	if begin_code ^= 0 & begin_code ^= dm_error_$transaction_in_progress then call ERROR_RETURN (begin_code);
						/* OK to use existing txn if there is one */

	call file_manager_$delete (A_dir_name, A_entry_name, code);

	if code ^= 0 then call ERROR_RETURN (code);
	else if begin_code = dm_error_$transaction_in_progress then
	     A_code = dm_error_$delete_pending_transaction;
	else do;
	     call transaction_manager_$commit_txn (txn_id, code);
	     if code ^= 0 then call ERROR_RETURN (code);
	     else A_code = 0;
	end;

RETURN:
	return;
%page;
ERROR_RETURN: proc (P_code);

dcl  P_code fixed bin (35);

	A_code = P_code;
	call FINISH;
	go to RETURN;

end ERROR_RETURN;


FINISH: proc ();

	if txn_id ^= "0"b & begin_code ^= dm_error_$transaction_in_progress then
	     call transaction_manager_$abort_txn (txn_id, 0);

end FINISH;
%page;
%include dm_tm_modes;


end delete_dm_file_;
