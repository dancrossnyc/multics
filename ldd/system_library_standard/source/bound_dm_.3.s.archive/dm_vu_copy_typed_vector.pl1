/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */
/* DESCRIPTION:
         This subroutine takes a typed_vector and a pointer to its associated
     typed_vector_array,  and a pointer to an area in which to put the output,
     and creates a new typed_vector in the output area.  The  pointer  to  the
     new typed_vector is returned.
*/

/* HISTORY:
Written by Lindsey L. Spratt, 02/07/83.
Modified:
12/18/84 by Lindsey L. Spratt:  Fixed to reference data_format_util_ instead
            of the obsolete data_mgmt_util_.  Changed to have a cleanup
            handler and be prepared to free the simple typed vector on
            cleanup.  Moved the proc stmt.  Declared the unspec builtin.
*/
/* format: style2,ind3 */
%page;
/* format: style2,ind3 */
dm_vu_copy_typed_vector:
   proc (p_caller_area_ptr, p_typed_vector_array_ptr, p_original_typed_vector_ptr, p_copy_typed_vector_ptr, p_code);

/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_caller_area_ptr      ptr parameter;
      dcl	    p_typed_vector_array_ptr
			       ptr parameter;
      dcl	    p_original_typed_vector_ptr
			       ptr parameter;
      dcl	    p_copy_typed_vector_ptr
			       ptr parameter;
      dcl	    p_code	       fixed bin (35) parameter;

/* Automatic */

      dcl	    caller_area_ptr	       ptr init (null);
      dcl	    dim_idx	       fixed bin (35) init (0);
      dcl	    value_string_size      fixed bin (35) init (0);
      dcl	    value_string_ptr       ptr init (null);
      dcl	    original_value_ptr     ptr init (null);

/* Based */

      dcl	    caller_area	       area based (caller_area_ptr);
      dcl	    based_real_fix_bin_1u  fixed bin (35) unaligned based;
      dcl	    value_string	       bit (value_string_size) based (value_string_ptr) aligned;

/* Builtin */

      dcl	    (null, unspec)	       builtin;

/* Condition */

      dcl	    cleanup	       condition;

/* Constant */

      dcl	    myname	       init ("dm_vu_copy_typed_vector") char (32) varying internal static
			       options (constant);
      dcl	    (
	    BITS_PER_BYTE	       init (9),
	    BITS_PER_WORD	       init (36)
	    )		       int static options (constant) fixed bin (17);

/* Entry */

      dcl	    data_format_util_$get_data_bit_length
			       entry (bit (36) aligned, fixed bin (35), fixed bin (35));
      dcl	    dm_vector_util_$free_typed_vector
			       entry (ptr, ptr, ptr, fixed bin (35));
      dcl	    sub_err_	       entry () options (variable);

/* External */

      dcl	    error_table_$unimplemented_version
			       fixed bin (35) ext;

/* END OF DECLARATIONS */

      caller_area_ptr = p_caller_area_ptr;
      p_code = 0;
      p_copy_typed_vector_ptr = null;
      call CHECK_VERSION ((p_original_typed_vector_ptr -> simple_typed_vector.type), (SIMPLE_TYPED_VECTOR_TYPE),
	 "simple_typed_vector");

      typed_vector_array_ptr = p_typed_vector_array_ptr;
      call CHECK_VERSION (typed_vector_array.version, TYPED_VECTOR_ARRAY_VERSION_2, "typed_vector_array");

      simple_typed_vector_ptr = null;
      on cleanup call ERROR_FINISH ();

      stv_number_of_dimensions = p_original_typed_vector_ptr -> simple_typed_vector.number_of_dimensions;
      alloc simple_typed_vector in (caller_area);
      simple_typed_vector.type = SIMPLE_TYPED_VECTOR_TYPE;
DIMENSION_LOOP:
      do dim_idx = 1 to simple_typed_vector.number_of_dimensions;
         arg_descriptor_ptr = typed_vector_array.dimension_table (dim_idx).descriptor_ptr;
         original_value_ptr = p_original_typed_vector_ptr -> simple_typed_vector.dimension (dim_idx).value_ptr;
         if arg_descriptor.type = varying_char_dtype
         then value_string_size = original_value_ptr -> based_real_fix_bin_1u * BITS_PER_BYTE + BITS_PER_WORD;
         else if arg_descriptor.type = varying_bit_dtype
         then value_string_size = original_value_ptr -> based_real_fix_bin_1u + BITS_PER_WORD;
         else
	  do;
	     call data_format_util_$get_data_bit_length (unspec (arg_descriptor), value_string_size, p_code);
	     if p_code ^= 0
	     then call ERROR_RETURN (p_code);
	  end;
         alloc value_string in (caller_area);
         value_string = original_value_ptr -> value_string;
         simple_typed_vector.dimension (dim_idx).value_ptr = value_string_ptr;

      end DIMENSION_LOOP;

      p_copy_typed_vector_ptr = simple_typed_vector_ptr;

MAIN_RETURN:
      return;


ERROR_FINISH:
   proc ();
      if simple_typed_vector_ptr ^= null & p_copy_typed_vector_ptr ^= simple_typed_vector_ptr
      then call dm_vector_util_$free_typed_vector (caller_area_ptr, typed_vector_array_ptr, simple_typed_vector_ptr, (0));
   end ERROR_FINISH;

ERROR_RETURN:
   proc (er_p_code);
      dcl	    er_p_code	       fixed bin (35) parm;
      call ERROR_FINISH ();
      p_code = er_p_code;
      goto MAIN_RETURN;
   end ERROR_RETURN;
%page;
CHECK_VERSION:
   proc (cv_p_received_version, cv_p_expected_version, cv_p_structure_name);
      dcl	    cv_p_received_version  fixed bin (35);
      dcl	    cv_p_expected_version  fixed bin (35);
      dcl	    cv_p_structure_name    char (*);
      if cv_p_received_version ^= cv_p_expected_version
      then call sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
	      "^/Expected version ^d of the ^a structure.
Received version ^d instead.", cv_p_expected_version, cv_p_structure_name, cv_p_received_version);
   end CHECK_VERSION;
%page;
%include sub_err_flags;
%page;
%include std_descriptor_types;
%page;
%include vu_typed_vector;
%page;
%include vu_typed_vector_array;
%page;
%include arg_descriptor;
   end dm_vu_copy_typed_vector;
