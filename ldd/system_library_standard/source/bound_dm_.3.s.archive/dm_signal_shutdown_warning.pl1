/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* format: ^indcomtxt */
/* DESCRIPTION:

         This     procedure,     dm_signal_shutdown_warning,    signals    the
     dm_shutdown_warning_  condition  in  a user process.  It is the target of
     the  first  alarm  call  set  up  by  a  process  that  has  received the
     dm_shutdown_scheduled_  IPS, or per-process initialization if the warning
     time  for  the  DMS  has  already  passed.   It  builds  a condition info
     structure  giving  the  reason for the DMS shutdown and the planned time;
     calls signal_ to allow the user to process the condition if desired (with
     the  quiet  restart  set);  and if it gets control back, prints a warning
     message on the error_output I/O switch warning the user when the DMS will
     shutdown.   In  general,  we  do  not expect users to catch the signalled
     condition, but do it as a convenience.

	The   condition   info  structure  is  found  in  the  include  file
     dm_shut_warn_info.incl.pl1  and is named dm_shutdown_warning_info.  There
     is  a  flag  the  user may set to suppress the warning message from being
     printed.

	If the user process is an absentee, no message is printed.
*/

/* HISTORY:

Written by Lee A. Newcomb, 11/10/83.
Modified:
04/19/84 by Lee A. Newcomb:  to upgrade from prototype version.
07/16/84 by R. Michael Tague:  Changed the call dm_util_$using_dm to
            call dm_misc_util_$dm_is_process_using_dm.
08/17/84 by Lee A. Newcomb:  changed dm_per_system_$ calls to go through
	  the dm_misc_util_ TV.
09/19/84 by Lee A. Newcomb:  Renamed from dm_shut_warn_handler_ and made
            changes to signal the dm_shutdown_warning_ condition and output
            the warning message without assuming that txns have been turned
            off.
10/29/84 by Lee A. Newcomb:  Fixed to not use dm_ prefix on
            dm_misc_util_$is_process_using_dm.
03/11/85 by Lindsey L. Spratt:  y Reformatted the message.  Changed to use
            user_io instead of error_output, ioa_$ioa_switch instead of
            ioa_$ioa_stream.
*/

/* format: style2,^inddcls,linecom,ifthendo,ifthen,^indnoniterdo,dclind5,idind35 */

dm_signal_shutdown_warning:
     proc ();

/* START OF DECLARATIONS */

/* Automatic */
dcl  (
     (begin_shutdown_time_string, user_shutdown_time_string)
				char (6),
     curr_process_type		fixed bin (17),	/* for NOT warning absentees */
     1 local_dm_shutdown_warning_info	aligned like dm_shutdown_warning_info,
     time_string			char (24)		/* for getting printable times */
     )				automatic;

/* Based */
/* Builtin */
dcl  (addr, length, null, size, substr, unspec)
				builtin;

/* Condition */
dcl  ioa_error			condition;

/* Constant */
/* Entry */
dcl  (
     date_time_			entry (fixed bin (71), char (*)),
     dm_misc_util_$get_shutdown_reason	entry returns (char (64)),
     dm_misc_util_$get_begin_shutdown_time
				entry returns (fixed bin (71)),
     dm_misc_util_$get_user_shutdown_time
				entry returns (fixed bin (71)),
     dm_misc_util_$is_process_using_dm	entry () returns (bit (1) aligned),
     ioa_$ioa_switch		entry () options (variable),
     signal_			entry () options (variable),
     user_info_$process_type		entry (fixed bin)
     );

/* External */

dcl  iox_$user_io			ptr ext static;

/* END OF DECLARATIONS */
%page;
/* Is the process still using DM?  If not, warning means nothing. */

	if dm_misc_util_$is_process_using_dm () then
WARN_USER:
	     do;

/* OK, we must fill in the info structure. */
/*   First, the condition info header portion.  However, header.info_string */
/*   we leave for after we fill in the DM specific info. */

	     unspec (local_dm_shutdown_warning_info) = "0"b;
						/* null flags and all */
	     local_dm_shutdown_warning_info.header.length = size (local_dm_shutdown_warning_info);
						/* nothing like self-definition */
	     local_dm_shutdown_warning_info.header.version = DM_SHUTDOWN_WARNING_INFO_VERSION_1;
	     local_dm_shutdown_warning_info.header.quiet_restart = "1"b;
						/* turn quiet_restart on */


/* now the DM part of the condition info. */
	     local_dm_shutdown_warning_info.begin_shutdown_time = dm_misc_util_$get_begin_shutdown_time ();
	     local_dm_shutdown_warning_info.user_shutdown_time = dm_misc_util_$get_user_shutdown_time ();
	     local_dm_shutdown_warning_info.reason = dm_misc_util_$get_shutdown_reason ();

/* Now must build the info_string.  This is to save us work later and */
/* the user work if he decides not to return to us.  This requires us */
/* to extract the time of the begin and user shutdown steps from the  */
/* date_time string after calling date_time_.  This should be changed */
/* to use date_time_$format to get the user's per-process time format */
/* when it will not interfere with controlled releases.  Care must be	*/
/* used to make sure the 256 character limit of info_string is not	*/
/* overflowed.						*/

	     call date_time_ (local_dm_shutdown_warning_info.begin_shutdown_time, time_string);
	     begin_shutdown_time_string = substr (time_string, 11, 6);
	     call date_time_ (local_dm_shutdown_warning_info.user_shutdown_time, time_string);
	     user_shutdown_time_string = substr (time_string, 11, 6);

	     local_dm_shutdown_warning_info.header.info_string =
		"     DM is shutting down; no new transactions will be allowed after "
		|| begin_shutdown_time_string || ".
     Please use the dm_user_shutdown command, or, at " || user_shutdown_time_string || ",
     a forced shutdown will be done.  Shutdown reason:
     ";
	     local_dm_shutdown_warning_info.header.info_string =
		local_dm_shutdown_warning_info.header.info_string
		||
		substr (local_dm_shutdown_warning_info.reason, 1,
		min (length (rtrim (local_dm_shutdown_warning_info.reason)),
		256 - length (local_dm_shutdown_warning_info.header.info_string)));
%page;
/* NOW signal the shutdown warning to the user with the above info. */

	     call signal_ ("dm_shutdown_warning_", null (), addr (local_dm_shutdown_warning_info), null ());

/* To get to this point, the user must have either (1) not handled the     */
/* condition we signalled, or (2) handled it, but used continue_to_signal_ */
/* to return control here.  In either case, we expect that the user wishes */
/* to see the shutdown warning, unless the dont_print_warning flag in the  */
/* condition info structure has been flipped on.  However, if the process  */
/* is absentee, we do not add to the absout, but just return to preserve   */
/* any user formatting.  The warning message is output on the error_output */
/* IO switch. */

	     call user_info_$process_type (curr_process_type);
	     if curr_process_type ^= 2 &		/* not absentee */
		^local_dm_shutdown_warning_info.flags.dont_print_warning then
OUTPUT_WARNING:
		do;
		on ioa_error go to WARNING_FAILED;
		call ioa_$ioa_switch (iox_$user_io, local_dm_shutdown_warning_info.header.info_string);
WARNING_FAILED:					/* in case error_output is not open or something */
	     end OUTPUT_WARNING;


	end WARN_USER;


MAIN_RETURN:
	return;


/* end dm_signal_shutdown_warning; */
%page;
%include condition_info_header;
%page;
%include dm_shut_warn_info;


     end dm_signal_shutdown_warning;
