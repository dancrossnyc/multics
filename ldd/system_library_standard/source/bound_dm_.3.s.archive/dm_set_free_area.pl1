/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1985 *
   *                                                         *
   *********************************************************** */
/* DESCRIPTION:

This command sets the directory in which the dm_free_area is placed.  If there
is an existing dm_free_area known to the process (ie, get_dm_free_area_ has
been called already by the process), then it can be released.
*/

/* HISTORY:

Written by Lindsey L. Spratt, 02/07/85.
Modified:
04/16/85 by Lindsey L. Spratt:  Added a pnotice.
*/
/* format: style2,ind3 */
%page;
dm_set_free_area:
   proc ();

/* START OF DECLARATIONS */
/* Automatic */

      dcl	    accept_control_argument
			       bit (1) aligned init ("0"b);
      dcl	    area_directory	       char (168) init (UNSET_DIRECTORY);
      dcl	    arg_idx	       fixed bin;
      dcl	    arg_len	       fixed bin (21);
      dcl	    arg_list_ptr	       ptr init (null);
      dcl	    arg_ptr	       ptr;
      dcl	    code		       fixed bin (35);
      dcl	    control_argument_idx   fixed bin;
      dcl	    force_interpretation_as_argument
			       bit (1) aligned init (NO);
      dcl	    is_active_function     bit (1) aligned init (NO);
      dcl	    number_of_args	       fixed bin;
      dcl	    release_old_area       bit (1) aligned init (NO);
      dcl	    return_arg_len	       fixed bin (21) init (0);
      dcl	    return_arg_ptr	       ptr init (null);
      dcl	    sci_ptr	       ptr init (null);
      dcl	    this_is_a_standalone_invocation
			       bit (1) aligned init (YES);

/* Based */

      dcl	    arg		       char (arg_len) based (arg_ptr);

/* Builtin */

      dcl	    cleanup	       condition;

/* Constant */

      dcl	    UNSET_DIRECTORY	       init (">NO DIR<") char (8) internal static options (constant);

      dcl	    (
	    YES		       init ("1"b),
	    NO		       init ("0"b)
	    )		       bit (1) aligned internal static options (constant);
      dcl	    myname	       init ("dm_set_free_area") char (16) internal static options (constant);

      dcl	    ARGUMENT_TYPE	       (6) internal static options (constant) char (64) varying
			       init ("pathname of the directory to contain dm free area",
			       "pathname of the directory to contain dm free area", "", "", "", "");
      dcl	    CONTROL_ARGUMENT       (6) internal static options (constant) char (64) varying
			       init ("-area_directory", "-adr", "-release_old_area", "-roa", "-no_release_old_area",
			       "-nroa");

/* Entry */

      dcl	    absolute_pathname_     entry (char (*), char (*), fixed bin (35));
      dcl	    cu_$arg_list_ptr       entry (ptr);
      dcl	    get_dm_free_area_$set  entry (char (*), bit (1) aligned, ptr);
      dcl	    ssu_$abort_line	       entry () options (variable);
      dcl	    ssu_$arg_count	       entry (ptr, fixed bin);
      dcl	    ssu_$arg_ptr	       entry (ptr, fixed bin, ptr, fixed bin (21));
      dcl	    ssu_$destroy_invocation
			       entry (ptr);
      dcl	    ssu_$return_arg	       entry (ptr, fixed bin, bit (1) aligned, ptr, fixed bin (21));
      dcl	    ssu_$standalone_invocation
			       entry (ptr, char (*), char (*), ptr, entry, fixed bin (35));

/* External */

      dcl	    (
	    error_table_$active_function,
	    error_table_$bad_arg,
	    error_table_$badopt,
	    error_table_$noarg
	    )		       fixed bin (35) external;

/* END OF DECLARATIONS */
      call cu_$arg_list_ptr (arg_list_ptr);
      call ssu_$standalone_invocation (sci_ptr, myname, "", arg_list_ptr, ABORT_ENTRY, code);

      on cleanup call CLEANUP ();

      call ssu_$arg_count (sci_ptr, number_of_args);

      accept_control_argument = YES;
      control_argument_idx = -1;

ARG_PROCESSING_LOOP:
      do arg_idx = 1 to number_of_args;
         call ssu_$arg_ptr (sci_ptr, arg_idx, arg_ptr, arg_len);
         if index (arg, "-") ^= 1 | force_interpretation_as_argument = YES
         then call PROCESS_ARGUMENT (arg, control_argument_idx, accept_control_argument);
         else if accept_control_argument = YES
         then call PROCESS_CONTROL_ARGUMENT (arg, control_argument_idx, accept_control_argument,
	         force_interpretation_as_argument);
         else call REPORT_MISSING_ARGUMENT (control_argument_idx);
      end ARG_PROCESSING_LOOP;

      if control_argument_idx >= 0 & accept_control_argument = NO
      then call REPORT_MISSING_ARGUMENT (control_argument_idx);


      if area_directory = UNSET_DIRECTORY
      then call ssu_$abort_line (sci_ptr, error_table_$noarg, "^/An area directory pathname must be specified.");

      call get_dm_free_area_$set (area_directory, release_old_area, null ());


MAIN_RETURN:
      return;
%page;
ABORT_ENTRY:
   procedure ();
      call CLEANUP ();
      go to MAIN_RETURN;
   end ABORT_ENTRY;



CLEANUP:
   procedure ();
      call FINISH ();
   end CLEANUP;

FINISH:
   proc ();
      call ssu_$destroy_invocation (sci_ptr);
   end FINISH;

PROCESS_ARGUMENT:
   proc (pa_p_arg, pa_p_control_argument_idx, pa_p_accept_control_argument);

      dcl	    pa_p_arg	       char (*) parm;
      dcl	    pa_p_control_argument_idx
			       fixed bin parm;
      dcl	    pa_p_accept_control_argument
			       bit (1) aligned parm;

      dcl	    pa_code	       fixed bin (35);

      pa_code = 0;

      goto ARGUMENT (pa_p_control_argument_idx);
ARGUMENT (-1):
      call ssu_$abort_line (sci_ptr, error_table_$bad_arg, "^/The argument ""^a"" is out of place.", arg);
      return;

ARGUMENT (1):					/* -area_directory */
ARGUMENT (2):					/* -adr */
      call absolute_pathname_ (arg, area_directory, code);
      if code ^= 0
      then call ssu_$abort_line (sci_ptr, code,
	      "^/Unable to convert the -area_directory option's argument ""^a"" to an absolute pathname.", arg);
      pa_p_accept_control_argument = YES;
      pa_p_control_argument_idx = -1;

   end PROCESS_ARGUMENT;
%page;
PROCESS_CONTROL_ARGUMENT:
   proc (pca_p_arg, pca_p_control_argument_idx, pca_p_accept_control_argument, pca_p_force_interpretation_as_argument);


      dcl	    pca_p_arg	       char (*) parm;
      dcl	    pca_p_control_argument_idx
			       fixed bin parm;
      dcl	    pca_p_accept_control_argument
			       bit (1) aligned parm;
      dcl	    pca_p_force_interpretation_as_argument
			       bit (1) aligned parm;

      pca_p_control_argument_idx = CONTROL_ARGUMENT_INDEX (pca_p_arg);
      pca_p_accept_control_argument = YES;
      pca_p_force_interpretation_as_argument = NO;

      go to CONTROL_ARGUMENT (pca_p_control_argument_idx);

CONTROL_ARGUMENT (-1):				/* not a control argument */
      call ssu_$abort_line (sci_ptr, error_table_$badopt, pca_p_arg);

CONTROL_ARGUMENT (1):				/* -area_directory */
CONTROL_ARGUMENT (2):				/* -adr */
      pca_p_accept_control_argument = NO;
      return;


CONTROL_ARGUMENT (3):				/* -release_old_area */
CONTROL_ARGUMENT (4):				/* -roa */
      release_old_area = YES;

      pca_p_control_argument_idx = -1;
      pca_p_accept_control_argument = YES;
      return;


CONTROL_ARGUMENT (5):				/* -no_release_old_area */
CONTROL_ARGUMENT (6):				/* -nroa */
      release_old_area = NO;

      pca_p_control_argument_idx = -1;
      pca_p_accept_control_argument = YES;
      return;


   end PROCESS_CONTROL_ARGUMENT;


CONTROL_ARGUMENT_INDEX:
   proc (cai_p_arg) returns (fixed bin);

      dcl	    cai_p_arg	       char (*);
      dcl	    cai_control_argument_idx
			       fixed bin;

      do cai_control_argument_idx = 1 to hbound (CONTROL_ARGUMENT, 1)
	 while (CONTROL_ARGUMENT (cai_control_argument_idx) ^= cai_p_arg);
      end;
      if cai_control_argument_idx > hbound (CONTROL_ARGUMENT, 1)
      then return (-1);
      else return (cai_control_argument_idx);

   end CONTROL_ARGUMENT_INDEX;

REPORT_MISSING_ARGUMENT:
   proc (rma_p_control_argument_idx);
      dcl	    rma_p_control_argument_idx
			       fixed bin parm;

      call ssu_$abort_line (sci_ptr, error_table_$noarg, "^a must be followed by a^[n^] ^a.",
	 CONTROL_ARGUMENT (rma_p_control_argument_idx),
	 (index ("aeiouh", substr (ARGUMENT_TYPE (rma_p_control_argument_idx), 1, 1)) > 0),
	 ARGUMENT_TYPE (rma_p_control_argument_idx));
   end REPORT_MISSING_ARGUMENT;

   end dm_set_free_area;
