/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/*  DESCRIPTION:

	This implements dm_daemon_util_$initialize_system.

	Per-System Initializer for Data Management (actually, per-AIM
     authorization).  This program is called through a privileged gate once
     per bootload for each AIM authorization for which Data Management is 
     enabled.  It does the following (but the work is done elsewhere):

    1. Initializes a per-system directory for this bootload.

    2. Calls various initialization programs. If any return an error,
       it gives up.

    3. Enables Data Management.
*/

/*  HISTORY:

Written by J. Bongiovanni, 08/01/82.
Modified:
08/17/82 by M. Pandolf: to add transaction manager initialization.
09/16/82 by M. Pandolf:  to add p_init_str_ptr to parameter list and to
	  initialize dm_system_data_$initializer_event_chn.
11/11/82 by L. A. Newcomb:  to add call to dm_per_system_$recovery.
05/17/83 by L. A. Newcomb:  Fixed up calls to the various initializing
	  programs to match the modifications to them for the per-AIM
	  control files.  Adoption of an orphaned, but running DMS is now
	  handled.  p_code was removed from dm_initializer entry sequence.
07/25/83 by M. Pandolf: eliminated terminate_segno entrypoint.
10/19/83 by Lindsey L. Spratt:  Fixed to always do a dm_common_init_ (to force
            per-process initialization), per-process initialization wasn't
            being done in the case where a running DM system was being taken
            over.
03/05/84 by Lee A. Newcomb:  to use the include file dm_system_states
	  (renamed from dm_statuses), and the renamed values therein.
09/29/84 by Lee A. Newcomb:  added call to schedule DMS shutdown after
            enabling the DMS and fixed error msg for part 1 BJM init to
            include "part 1" in it, and addressed audit comments.
11/26/84 by Matthew Pierret:  Changed to call
	  transaction_manager_$per_process_init instead of
            the obsolete dm_common_init_.
12/04/84 by Lee A. Newcomb:  Removed obsolete parameter from call to
            dm_per_system_$enable; added use of (ERROR MAIN)_RETURN mechanism;
            and some minor restructuring.
12/05/84 by Stanford S. Cox: Added 'dm' prefix to init_from_hardcore_.
12/11/84 by Lee A. Newcomb:  Changed to send system_shutdown_scheduled_ IPS to
	  Daemon instead of trying to setup DM shutdown here because we
	  should schedule in the login ring, not the DM ring.
12/13/84 by R. Michael Tague: Changed name of dm_system_init_str.incl.pl1 to
            dm_system_init_info.incl.pl1.
01/13/85 by Lee A. Newcomb:  Fixed to not send the system_shutdown_scheduled_
            IPS to the executing process; there is a window when caller has
            not changed the static handler and the dmsd_overseer_ module is
            responsible for setting up shutdown.
*/
/* format: style2,ll79,ind3,^indprocbody,ifthendo,ifthen,^indnoniterdo */
/* format: ^inddcls,dclind5,idind35,linecom */
%page;
dm_initializer_:
   proc (p_init_info_ptr);

/* START OF DECLARATIONS */

/*  Parameter  */
dcl  p_init_info_ptr		ptr		/* to initialization structure */
				parameter;

/*  Automatic  */
dcl  (
     code				fixed bin (35),
     saved_level			fixed bin
     )				automatic;

/* Based */
/* Builtin */
dcl  (addr, null)			builtin;

/* Condition */
dcl  cleanup			condition;

/* Constants */
dcl  (
     IOA_GENERAL_RS_NO_NEW_LINE	bit (1) aligned init ("0"b),
     IOA_GENERAL_RS_DONT_PAD		bit (1) aligned init ("1"b),
     myname			char (15) init ("dm_initializer_")
     )				int static options (constant);

/*  Entry  */
dcl  (
     before_journal_manager_$per_system_init_1
				entry (fixed bin (35)),
     before_journal_manager_$per_system_init_2
				entry (fixed bin (35)),
     cu_$arg_list_ptr		entry (ptr),
     cu_$level_get			entry (fixed bin),
     cu_$level_set			entry (fixed bin),
     dm_init_from_hardcore_		entry (fixed bin (35)),
     dm_per_system_$cleanup		entry (),
     dm_per_system_$enable		entry (),
     dm_per_system_$init		entry (fixed bin (71))
				returns (char (4) aligned),
     dm_recovery_			entry (),
     file_manager_$per_system_init	entry (fixed bin (35)),
     get_process_id_		entry () returns (bit (36)),
     get_ring_			entry () returns (fixed bin (3)),
     ioa_$general_rs		entry (ptr, fixed bin, fixed bin,
				char (*), fixed bin (21),
				bit (1) aligned, bit (1) aligned),
     lock_manager_$init_per_system	entry (fixed bin (35)),
     sub_err_			entry () options (variable),
     transaction_manager_$per_process_init
				entry (),
     transaction_manager_$per_system_init
				entry (fixed bin (35))
     )				external;

/* External */
dcl  error_table_$unimplemented_version fixed bin (35) external static;
%page;
/* First, validate the input initialization structure. */

   dm_system_init_info_ptr = p_init_info_ptr;
   if dm_system_init_info.version ^= DM_SYSTEM_INIT_INFO_VERSION_1 then
      call ERROR_RETURN (error_table_$unimplemented_version,
	 "^/System initialization structure has version ^a, not ^a.",
	 dm_system_init_info.version, DM_SYSTEM_INIT_INFO_VERSION_1);

   call cu_$level_get (saved_level);			/* first the cleanup handler */
   on cleanup
      begin;					/* must be able to work */
						/* In keeping with the spirit of this program, the work */
						/*     is done elsewhere. */
         call dm_per_system_$cleanup ();
         call cu_$level_set (saved_level);
      end;
   call cu_$level_set (get_ring_ ());

/* Call dm_per_system_$init to create a temporary per-bootload directory.   */
/* If the state returned indicates DMS is running, we have taken over an    */
/* existing DMS from a dead caretaker Daemon.  In ALL other cases, we       */
/* must call the SETUP_DATA_MANAGEMENT internal procedure to create the     */
/* base from which to boot a new DMS.  Note the use of the running state is */
/* to indicate the DMS is active, the actual states may be running, or one  */
/* of the shutdown states besides normal shutdown.		      */

   if dm_per_system_$init (dm_system_init_info.event_channel)
        ^= DM_SYSTEM_STATE_RUNNING then
      call SETUP_DATA_MANAGEMENT ();
   call transaction_manager_$per_process_init ();		/* do per-process init */

   call cu_$level_set (saved_level);

MAIN_RETURN:
   return;
%page;
SETUP_DATA_MANAGEMENT:
   proc ();

/*  Call various subsystem initialization programs  which	*/
/*  do not assume an operable Data Management system.	*/

   call dm_init_from_hardcore_ (code);
   if code ^= 0 then
      call ERROR_RETURN (code, "^/Call to dm_init_from_hardcore_ failed.");

   call lock_manager_$init_per_system (code);
   if code ^= 0 then
      call ERROR_RETURN (code,
	 "^/Unable to do lock manager per-system initialization.");

   call transaction_manager_$per_system_init (code);
   if code ^= 0 then
      call ERROR_RETURN (code,
	 "^/Unable to do transaction manager per-system initialization.");

   call file_manager_$per_system_init (code);
   if code ^= 0 then
      call ERROR_RETURN (code,
	 "^/Unable to do file manager per-system initialization.");

   call before_journal_manager_$per_system_init_1 (code);
   if code ^= 0 then
      call ERROR_RETURN (code,
	 "^/Unable to do part 1 before journal manager per-system initialization."
	 );
%page;
/* Now call in the recovery procedure.  This call is made unconditionally; */
/* the recovery programs take into account all the various per-AIM control */
/* file indicators like if recovery is to be done, non-fatal error handling, */
/* holding old bootload directories for later inspection, etc.  The sub_err_ */
/* procedure is used for reporting fatal recovery errors. */

   call dm_recovery_ ();

/*  Call initialization routines which depend on an operable Data */
/*     Management system. */

   call before_journal_manager_$per_system_init_2 (code);
   if code ^= 0 then
      call ERROR_RETURN (code,
	 "^/Unable to do part 2 before journal manager per-system initialization."
	 );

/*  Enable Data Management  */

   call dm_per_system_$enable ();


   return;

   end SETUP_DATA_MANAGEMENT;
%page;
ERROR_RETURN:
   proc options (variable);

dcl  (
     er_arg_list_ptr		ptr,
     er_code			fixed bin (35),
     er_message			char (1024),
     er_message_length		fixed bin (21)
     )				automatic;

dcl  (
     er_fixed_bin_35_value		fixed bin (35),
     er_message_overlay		char (er_message_length)
     )				based;

   call cu_$arg_list_ptr (er_arg_list_ptr);
   er_code = er_arg_list_ptr -> arg_list.arg_ptrs (1) -> er_fixed_bin_35_value;

   call ioa_$general_rs (er_arg_list_ptr, 2, 3, er_message, er_message_length,
        IOA_GENERAL_RS_DONT_PAD, IOA_GENERAL_RS_NO_NEW_LINE);
   call sub_err_ (er_code, myname, ACTION_CANT_RESTART, null (), 0,
        addr (er_message) -> er_message_overlay);

   end ERROR_RETURN;
%page;
%include dm_system_init_info;
%page;
%include dm_system_states;
%page;
%include arg_list;
%page;
%include sub_err_flags;


   end dm_initializer_;
