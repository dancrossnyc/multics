/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION:

         This  program  locks  the DM configuration file for a particular AIM
     level.  The process must have previously called dm_find_configuration_ to
     get a pointer to the configuration file.  The set_lock_ system subroutine
     is used to lock the file against any other use of  the  file  by  another
     process  attempting  to bootload a DMS at the same AIM level, or a system
     administrator trying  to  install  a  new  configuration  part  way  into
     initialization.

	The unlock entry gives up the ability of the process to read the
     config file AND be guaranteed the data is valid.
*/

/* HISTORY:

Written by L. A. Newcomb, 05/09/83.
Modified:
05/09/83 by L. A. Newcomb:  Added unlock entry.
06/06/84 by Lindsey L. Spratt:  Changed to check for the version of the
            dm_system_config structure.
02/20/85 by Lee A. Newcomb:  Corrected the order of CHECK_VERSION's
            parameters; added detection of inability to lock at all; and fixed
            error message for unlocking failure.
03/05/85 by Steve Herbst: Replaced dm_log_ with dm_misc_util_$log.
*/
/* format: style2,ll79,ind3,^indprocbody,ifthendo,ifthen,^indnoniterdo,^inddcls,dclind5,idind35,linecom */
%page;
dm_lock_configuration_:
   proc (p_dm_system_config_ptr);

/* DECLARATIONS */

/* Parameter */
dcl  p_dm_system_config_ptr		ptr		/* Loc. of curr. AIM level config file */
				parameter;

/* Automatic */
dcl  code				fixed bin (35) automatic;

/* Based */
/* Builtin */
dcl  null				builtin;

/* Condition */
/* Constant */
dcl  myname			init ("dm_lock_configuration_")
				char (32) varying internal
				static options (constant);

/* Entry */
dcl  (
     dm_misc_util_$log		entry options (variable),
     set_lock_$lock			entry (bit (36) aligned, fixed bin,
				fixed bin (35)),
     set_lock_$unlock		entry (bit (36) aligned,
				fixed bin (35)),
     sub_err_			entry () options (variable)
     )				external;

/* External */
dcl  (
     error_table_$invalid_lock_reset,
     error_table_$locked_by_this_process,
     error_table_$unimplemented_version
     )				fixed bin (35) external static;

/* Static */

/* END OF DECLARATIONS */
%page;
/* dm_lock_configuration_:			repeat for reader	*/
/*      proc (p_dm_system_config_ptr);				*/

/* Set local pointer for ease of use */

   dm_system_config_ptr = p_dm_system_config_ptr;
   call CHECK_VERSION (dm_system_config.version, DM_CONFIG_VERSION_2,
        "dm_system_config");

/* Now lock the file, reporting interesting statuses */

   call set_lock_$lock (dm_system_config.lock, 0, code);
   if code = error_table_$invalid_lock_reset then
      call dm_misc_util_$log (LOG_SV, code, myname,
	 "Warning: DM config file locked from invalid process.");
   else if code = error_table_$locked_by_this_process then	/* logic error */
      call sub_err_ (code, myname, ACTION_CANT_RESTART, null (), 0,
	 "DM initialization logic error: cannot lock config more than once.")
	 ;
   else if code ^= 0 then
      call sub_err_ (code, myname, ACTION_CANT_RESTART, null (), 0,
	 "Could not lock DM config file.");

   return;

/* end dm_lock_configuraiton_; */
%skip (4);
dm_lock_configuration_$unlock:
   entry (p_dm_system_config_ptr);

/* copy parameter to local and init local status code */

   dm_system_config_ptr = p_dm_system_config_ptr;
   call CHECK_VERSION (dm_system_config.version, DM_CONFIG_VERSION_2,
        "dm_system_config");

/* Now unlock the config and report any interesting statuses */

   call set_lock_$unlock (dm_system_config.lock, code);
   if code ^= 0 then				/* fatal initialization error */
      call sub_err_ (code, myname, ACTION_CANT_RESTART, null (), 0,
	 "Attempting to unlock system config file.");

   return;

/* end dm_lock_configuration_$unlock; */
%page;
CHECK_VERSION:
   proc (cv_p_received_version, cv_p_expected_version, cv_p_structure_name);

dcl  (
     (cv_p_expected_version, cv_p_received_version)
				char (8) aligned,
     cv_p_structure_name		char (*)
     )				parameter;

   if cv_p_expected_version ^= cv_p_received_version then
      call sub_err_ (error_table_$unimplemented_version, myname,
	 ACTION_CANT_RESTART, null, 0,
	 "^/Expected version ^a of the ^a structure.  
Received version ^a, instead.", cv_p_expected_version, cv_p_structure_name,
	 cv_p_received_version);
   end CHECK_VERSION;
%page;
%include dm_system_config;
%page;
%include dm_log_sv_codes;
%page;
%include sub_err_flags;


   end dm_lock_configuration_;
