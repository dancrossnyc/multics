/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        *********************************************************** */

/* DESCRIPTION:

   This program is for printing p_stuff, a string produced by a "put data",
   in a special format.  print_data_info, based on print_data_info_ptr, is
   used to control the format, as well as select the output switch.
*/
/* HISTORY:

   Written by Lindsey L. Spratt.
   Modified:
   06/21/79 by Lindsey Spratt; add rtrim(ltrim()) of intervals, check for
   correct print_data_info version, add error code reporting.
   10/29/83 by Benson I. Margulies: for $rs, .hex
*/


/****^  HISTORY COMMENTS:
  1) change(86-06-18,Kissel), approve(86-07-31,MCR7468), audit(86-07-31,Wong),
     install(86-08-19,MR12.0-1133):
     Changed to better handle the printing of array values.
                                                   END HISTORY COMMENTS */


/* format: style2,idind30,indcomtxt */

print_data_:
     proc (p_stuff, print_data_info_ptr, p_code);

/* Automatic */

	dcl     idx		        fixed bin;
	dcl     start_scan_idx	        fixed bin (24);
	dcl     scan_length		        fixed bin (24);
	dcl     code		        fixed bin (35);
	dcl     p_code		        fixed bin (35);
	dcl     more_intervals	        bit (1);
	dcl     first_interval	        bit (1);

	dcl     array_id		        char (256) varying;
	dcl     first_storage_id	        char (256) varying;
	dcl     previous_storage_id	        char (256) varying;
	dcl     storage_id_before_pad	        char (256) varying;
	dcl     first_array_id	        char (256) varying;
	dcl     first_value		        char (1024) varying;
	dcl     array_elem_no	        fixed bin;
	dcl     left_par_idx	        fixed bin;

	dcl     1 item,
		2 storage_id	        char (256) varying,
		2 value		        char (1024) varying;
	dcl     storage_id_pad	        char (256) varying;
	dcl     interval_spec	        char (256) varying;
	dcl     first_blank		        fixed bin (35);
	dcl     temp_seg_ptrs	        (2) ptr;
	dcl     target_ptr		        ptr;
	dcl     source_ptr		        ptr;
	dcl     current_period	        fixed bin (35);
	dcl     current_quote	        fixed bin (35);
	dcl     following_quote	        fixed bin (35);
	dcl     following_double_quote        fixed bin (35);
	dcl     temp_value		        char (32) varying;
	dcl     more		        bit (1);
	dcl     null		        builtin;
	dcl     found		        bit (1);
	dcl     level		        fixed bin;
	dcl     root_of_level_list	        ptr;
	dcl     p_stuff		        char (*) varying;
	dcl     p_return_string	        char (*) varying;
	dcl     rs_entry		        bit (1) aligned;

/* Based */

	dcl     temp_seg		        char (sys_info$max_seg_size * 4) varying based;

/* External */

	dcl     sys_info$max_seg_size	        fixed bin (35) ext;
	dcl     error_table_$unimplemented_version
				        fixed bin (35) ext;

/* Entry */

	dcl     ioa_$rsnnl		        entry options (variable);
	dcl     get_temp_segments_	        entry (char (*), pointer dimension (*), fixed bin (35));
	dcl     release_temp_segments_        entry (char (*), pointer dimension (*), fixed bin (35));

	dcl     index		        builtin;
	dcl     substr		        builtin;


	rs_entry = "0"b;
	go to COMMON;

rs:
     entry (p_stuff, print_data_info_ptr, p_return_string, p_code);

	rs_entry = "1"b;
	p_return_string = "";

COMMON:
	if print_data_info.version ^= print_data_info_version_1
	then do;
		p_code = error_table_$unimplemented_version;
		return;
	     end;
	call get_temp_segments_ ("print_data", temp_seg_ptrs, code);
	source_ptr = temp_seg_ptrs (1);
	target_ptr = temp_seg_ptrs (2);
	source_ptr -> temp_seg = p_stuff;
	target_ptr -> temp_seg = "";

	array_id = "";
	first_storage_id = "";
	previous_storage_id = "";
	storage_id_before_pad = "";
	first_array_id = "";
	first_value = "";
	array_elem_no = 0;


	more_intervals = "1"b;
	interval_spec = rtrim (ltrim (print_data_info.intervals));
	start_scan_idx = 1;
	call setup_interval (start_scan_idx);
	first_interval = "1"b;
	do while (more_intervals | first_interval);
	     first_interval = "0"b;			/* The following loop parses a storage_id and a value out of p_stuff.
						   first_blank identifies the end of the storage_id which begins p_stuff. */

	     first_blank = index (source_ptr -> temp_seg, "=");
	     root_of_level_list = null;
	     do while (first_blank > 0);
		item.storage_id = substr (source_ptr -> temp_seg, 1, first_blank);
						/* p_stuff is set up to begin with the storage_id. */
		current_period = index (item.storage_id, ".");
						/* The storage id is indented two spaces for each level in the id. */
		storage_id_pad = "";
		do level = 1 by 1 while (current_period > 0);
		     temp_value = substr (item.storage_id, 1, current_period - 1);
		     call check_level (temp_value, level, found);
		     item.storage_id = substr (item.storage_id, current_period + 1);
		     if ^found
		     then do;
			     temp_value = storage_id_pad || temp_value;

			     if array_elem_no = 0
			     then call output ("^a", temp_value);
			     else do;
				     if array_elem_no = 1
				     then do;
					     call output ("^a^vt^a", first_storage_id,
						print_data_info.value_column, first_value);
					end;
				     else do;
					     first_storage_id =
						substr (first_storage_id, 1, length (first_storage_id) - 1);
					     call output ("^a thru ^a^vt^a", first_storage_id,
						ltrim (previous_storage_id), print_data_info.value_column,
						first_value);

					end;
				     call output ("^a", temp_value);
				     array_elem_no = 0;
				end;
			end;

		     storage_id_pad = copy (" ", print_data_info.indentation) || storage_id_pad;
		     current_period = index (item.storage_id, ".");
		end;
		call check_level (item.storage_id, level, found);
		storage_id_before_pad = item.storage_id;
		item.storage_id = storage_id_pad || item.storage_id;
		target_ptr -> temp_seg = ltrim (substr (source_ptr -> temp_seg, first_blank + 1));
		call switch_source_and_target;	/*  The string is processed for quotes, and quote doubling.  */

		if substr (source_ptr -> temp_seg, 1, 1) = """"
		then do;
			current_quote = 1;
			more = "1"b;
			do while (more);
			     following_quote =
				index (substr (source_ptr -> temp_seg, current_quote + 1), """") + current_quote;
			     following_double_quote =
				index (substr (source_ptr -> temp_seg, current_quote + 1), """""")
				+ current_quote;
			     if following_double_quote = current_quote | following_quote < following_double_quote
			     then more = "0"b;
			     else current_quote = following_quote;
			end;
			item.value = substr (source_ptr -> temp_seg, 1, following_quote);
			source_ptr -> temp_seg = ltrim (substr (source_ptr -> temp_seg, following_quote + 1));

			if index (source_ptr -> temp_seg, "b") = 1
			then do;			/*  Allow for bit strings. */
				item.value = item.value || "b";
				if print_data_info.flags.octal & (mod (length (item.value) - 3, 3) = 0)
				then do;
					call ioa_$rsnnl ("^oo", item.value, (0),
					     bin (
					     bit (substr (item.value, 2, length (item.value) - 3),
					     length (item.value) - 3)));
				     end;
				else if print_data_info.flags.hex & (mod (length (item.value) - 3, 4) = 0)
				then do;
					call ioa_$rsnnl ("^.4bx", item.value, (0),
					     bit (substr (item.value, 2, length (item.value) - 3),
					     length (item.value) - 3));
				     end;

				target_ptr -> temp_seg = ltrim (substr (source_ptr -> temp_seg, 2));
				call switch_source_and_target;
			     end;
		     end;
		else do;
			first_blank = index (source_ptr -> temp_seg, " ");
			if first_blank = 0
			then first_blank = length (source_ptr -> temp_seg);
			item.value = substr (source_ptr -> temp_seg, 1, first_blank);
			target_ptr -> temp_seg = ltrim (substr (source_ptr -> temp_seg, first_blank));
			call switch_source_and_target;
		     end;

		left_par_idx = index (storage_id_before_pad, "(");
		if left_par_idx ^= 0
		then do;
			array_id = substr (storage_id_before_pad, 1, left_par_idx);
			if array_elem_no = 0
			then do;
				first_array_id = array_id;
				first_storage_id = item.storage_id;
				first_value = item.value;
				array_elem_no = 1;
			     end;
			else do;
				if array_id = first_array_id & item.value = first_value
				then do;
					array_elem_no = array_elem_no + 1;
					previous_storage_id = item.storage_id;
				     end;
				else do;
					if array_elem_no = 1
					then do;
						call output ("^a^vt^a", first_storage_id,
						     print_data_info.value_column, first_value);
					     end;
					else do;
						first_storage_id =
						     substr (first_storage_id, 1,
						     length (first_storage_id) - 1);
						call output ("^a thru ^a^vt^a", first_storage_id,
						     ltrim (previous_storage_id),
						     print_data_info.value_column, first_value);
					     end;
					first_array_id = array_id;
					first_storage_id = item.storage_id;
					first_value = item.value;
					array_elem_no = 1;
				     end;

			     end;

		     end;

		else do;
			if array_elem_no = 0
			then call output ("^a^vt^a", item.storage_id, print_data_info.value_column, item.value);
			else do;
				if array_elem_no = 1
				then do;
					call output ("^a^vt^a", first_storage_id, print_data_info.value_column,
					     first_value);
				     end;
				else do;
					first_storage_id =
					     substr (first_storage_id, 1, length (first_storage_id) - 1);
					call output ("^a thru ^a^vt^a", first_storage_id,
					     ltrim (previous_storage_id), print_data_info.value_column,
					     first_value);

				     end;
				call output ("^a^vt^a", item.storage_id, print_data_info.value_column, item.value)
				     ;
				array_elem_no = 0;
			     end;
		     end;

		first_blank = index (source_ptr -> temp_seg, "=");
	     end;
	     call setup_interval (start_scan_idx);
	end;

	if array_elem_no ^= 0
	then do;

		if array_elem_no = 1
		then call output ("^a^vt^a", first_storage_id, print_data_info.value_column, first_value);

		else do;
			first_storage_id = substr (first_storage_id, 1, length (first_storage_id) - 1);
			call output ("^a thru ^a^vt^a", first_storage_id, ltrim (previous_storage_id),
			     print_data_info.value_column, first_value);
		     end;
	     end;

	call release_temp_segments_ ("print_data", temp_seg_ptrs, code);
	return;					/* End of print_data main proc. */

switch_source_and_target:
     proc;
	dcl     temp_ptr		        ptr;
	temp_ptr = target_ptr;
	target_ptr = source_ptr;
	source_ptr = temp_ptr;
     end;

check_level:
     proc (p_str, p_level, p_found);
	dcl     p_str		        char (*) varying;
	dcl     p_level		        fixed bin;
	dcl     p_found		        bit (1);
	dcl     idx		        fixed bin;
	dcl     next_level_ptr	        ptr;
	dcl     current_level_ptr	        ptr;
	dcl     1 level_id		        based,
		2 str		        char (32) varying,
		2 next		        ptr;

	current_level_ptr, next_level_ptr = root_of_level_list;
	do idx = 1 to p_level while (next_level_ptr ^= null);
	     current_level_ptr = next_level_ptr;
	     next_level_ptr = current_level_ptr -> level_id.next;
	end;
	if next_level_ptr ^= null			/* Implies p_level is less than length of level_list. */
	then do;
		if current_level_ptr -> level_id.str = p_str
		then do;
			p_found = "1"b;
			return;
		     end;
		else do;				/* Already printed component at this level is different than current component,
						   so the rest (higher levels) of the level_list is no longer appropriate. */
			current_level_ptr -> level_id.str = p_str;
			current_level_ptr -> level_id.next = null;
			current_level_ptr = next_level_ptr;
			do while (current_level_ptr ^= null);
			     next_level_ptr = current_level_ptr -> level_id.next;
			     free current_level_ptr -> level_id;
			     current_level_ptr = next_level_ptr;
			end;
			p_found = "0"b;
		     end;
	     end;
	else if idx = p_level
	then do;					/* This implies level_list is one shorter than p_level. */
		allocate level_id set (next_level_ptr);
		if current_level_ptr ^= null
		then current_level_ptr -> level_id.next = next_level_ptr;
		else root_of_level_list = next_level_ptr;
		next_level_ptr -> level_id.str = p_str;
		next_level_ptr -> level_id.next = null;
		p_found = "0"b;
	     end;
	else do;					/* idx > p_level */
		current_level_ptr -> level_id.str = p_str;
		p_found = "0"b;
	     end;
     end check_level;

setup_interval:
     proc (p_scan_idx);
	dcl     p_scan_idx		        fixed bin (24);
	dcl     start_scan_idx	        fixed bin (24);
	dcl     scan_length		        fixed bin (24);

	start_scan_idx = p_scan_idx;
	call get_interval (start_scan_idx, scan_length, more_intervals);
	p_scan_idx = scan_length + start_scan_idx;
	source_ptr -> temp_seg = rtrim (ltrim (substr (p_stuff, start_scan_idx, scan_length)));

/* All occurences of =" are expanded to =<SP>", ("=""" -> "= """).  Since this
   doesn't change number or ordering of quotes, this change does not alter the
   parsing of quoted strings.  It is necessary to insure proper parsing of
   storage id's from their values when their values are strings, bit or
   character.  */

	start_scan_idx = 1;
	target_ptr -> temp_seg = "";
	scan_length = index (source_ptr -> temp_seg, "=""");
	do while (scan_length > 0);
	     target_ptr -> temp_seg =
		target_ptr -> temp_seg || substr (source_ptr -> temp_seg, start_scan_idx, scan_length);
	     target_ptr -> temp_seg = target_ptr -> temp_seg || " ";
	     start_scan_idx = scan_length + start_scan_idx;
	     scan_length = index (substr (source_ptr -> temp_seg, start_scan_idx), "=""");
	end;

	target_ptr -> temp_seg = target_ptr -> temp_seg || substr (source_ptr -> temp_seg, start_scan_idx);
	call switch_source_and_target;
     end;



get_interval:
     proc (p_start_scan_idx, p_scan_length, p_more_intervals);
	dcl     p_start_scan_idx	        fixed bin (24);
	dcl     p_scan_length	        fixed bin (24);
	dcl     p_more_intervals	        bit (1);
	dcl     interval		        char (256) varying;
	dcl     interval_idx	        fixed bin;
	dcl     delimiter_idx	        fixed bin;
	dcl     start_scan_idx	        fixed bin (35);
	dcl     scan_length		        fixed bin (35);

	if interval_spec = ""
	then do;
		p_more_intervals = "0"b;
		p_scan_length = length (p_stuff) - p_start_scan_idx;
		return;
	     end;
	interval_idx = index (interval_spec, " ") - 1;
	if interval_idx = -1
	then interval_idx = length (interval_spec);
	interval = substr (interval_spec, 1, interval_idx);
	interval_spec = ltrim (substr (interval_spec, interval_idx + 1));
	delimiter_idx = index (interval, "|");
	if delimiter_idx = 0
	then do;
		p_start_scan_idx = index (substr (p_stuff, p_start_scan_idx), interval);
		p_start_scan_idx = p_start_scan_idx - index (reverse (substr (p_stuff, 1, p_start_scan_idx)), " ");
		source_ptr -> temp_seg = substr (p_stuff, p_start_scan_idx);
		p_scan_length = length (p_stuff);
		interval_spec = "";
		p_more_intervals = "0"b;
		return;
	     end;
	else if delimiter_idx = 1
	then do;
		p_scan_length = index (substr (p_stuff, p_start_scan_idx), substr (interval, 2));
		p_scan_length =
		     p_scan_length - index (reverse (substr (p_stuff, p_start_scan_idx, p_scan_length)), " ");
		source_ptr -> temp_seg = ltrim (rtrim (substr (p_stuff, p_start_scan_idx, p_scan_length)));
		p_scan_length = p_start_scan_idx + p_scan_length - 1;
		if interval_spec = ""
		then p_more_intervals = "0"b;
		else p_more_intervals = "1"b;
		return;
	     end;
	else if delimiter_idx = length (interval)
	then do;
		p_start_scan_idx = index (substr (p_stuff, p_start_scan_idx), interval);
		p_start_scan_idx = p_start_scan_idx - index (reverse (substr (p_stuff, 1, p_start_scan_idx)), " ");
		source_ptr -> temp_seg = substr (p_stuff, p_start_scan_idx);
		p_scan_length = length (p_stuff);
		interval_spec = "";
		p_more_intervals = "0"b;
		return;
	     end;
	else do;					/* Both a beginning and an end are given for the interval. */
		start_scan_idx = index (substr (p_stuff, p_start_scan_idx), substr (interval, 1, delimiter_idx - 1));
		start_scan_idx =
		     start_scan_idx - index (reverse (substr (p_stuff, p_start_scan_idx, start_scan_idx)), " ");
		p_start_scan_idx = start_scan_idx;
		scan_length = index (substr (p_stuff, p_start_scan_idx), substr (interval, delimiter_idx + 1));
		scan_length = scan_length - index (reverse (substr (p_stuff, p_start_scan_idx, scan_length)), " ");
		p_scan_length = scan_length;
		if interval_spec = ""
		then p_more_intervals = "0"b;
		else p_more_intervals = "1"b;
		return;
	     end;
     end;

	declare an_output		        char (1024);

output:
     procedure options (variable);

	declare cu_$generate_call	        entry (entry, ptr);
	declare cu_$arg_list_ptr	        entry returns (ptr);
	declare ioa_$general_rs	        entry (ptr, fixed bin, fixed bin, char (*), fixed bin (21),
				        bit (1) aligned, bit (1) aligned);
	declare ioa_		        entry () options (variable);
	declare iox_$put_chars	        entry (ptr, ptr, fixed bin (21), fixed bin (35));
	declare used_length		        fixed bin (21);
	if rs_entry | (print_data_info.output_switch ^= null ())
	then do;
		call ioa_$general_rs (cu_$arg_list_ptr (), 1, 2, an_output, used_length, "0"b, "1"b);
		if rs_entry
		then p_return_string = p_return_string || substr (an_output, 1, used_length);
		else call iox_$put_chars (print_data_info.output_switch, addr (an_output), used_length, (0));
	     end;
	else call cu_$generate_call (ioa_, cu_$arg_list_ptr ());
	return;
     end output;

%include print_data_info;
     end print_data_;
