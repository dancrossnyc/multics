/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(86-10-17,Dupuis), approve(86-11-06,MCR7566), audit(86-11-07,Blair),
     install(86-11-10,MR12.0-1207):
     Initialized the parent_ac_sw in auto_create_branch_info to "1"b so that it
     would create the "logs" directory at the same AIM level as its containing
     directory (phx20619).
                                                   END HISTORY COMMENTS */


/* DESCRIPTION:

     Primitive interface to the data management log, to be used by all
processes that need to leave a message in an accessable place for future
use.  This procedure contains a locking protocol for the data management
system log.

     There are two entries to this program.  The first is dm_log_, which
uses a "long" calling sequence.  That is, the user provides all
information for logging in the dm_log_ call.  The other is
dm_log_$from_arg_ptr, a pass through method.  The caller must provide an
argument list pointer a the only argument.  Any error taken while trying
to log will be swallowed by the any_other handler and not reported to the
user.  Record quota overflows and segment faults are tried to be reported
in the log, but these may be lost.  Normally, this should not be a
problem.

     The "find" entrypoint has been added to initiate the log during boot
time, following a requirement that the log must be able to be referenced
before data management commences.

     Two calling sequences are recognized by dm_log_, one for error
reporting and one for simple reporting.  Error reports will generate two
entries in the log, simple reports will generate one entry.  The calling
sequences are:

	call dm_log_ (severity, code, caller, ioa_ctl_string,
					ioa_arg1, ..., ioa_argN);
	call dm_log_ (severity, ioa_ctl_string, ioa_arg1, ..., ioa_argN);

   the fundamental flow of this program is:

	DM_LOG_

	     MAKE_MESSAGE

	     LOCK_LOG
	     if   CANNOT_LOCK_LOG then
	     else do
		WRITE_INTO_LOG (time, severity, id || message)
		UNLOCK_LOG
		end

        end DM_LOG_
*/

/* HISTORY:

Written by M. Pandolf, 01/11/83.
Modified:
02/01/83 by M. Pandolf: to accept pointer to arg list in addition
	  to accepting an arglist directly.
05/05/83 by B. Margulies: to stop using write_log_, stop truncating messages.
06/27/83 by L. A. Newcomb:  Fixed minor problem with long continuation msgs
            wrapping because of tab at start of extra lines, multiple names
            on old log segments; deleted obs. entry set_dir.
08/08/83 by L. A. Newcomb:  checked to call term_$refname if we are using the
            installed dm_system_data_.  If we don't, the Daemon may use the
            wrong sys data in the takeover checking.
08/14/83 by L. A. Newcomb:  fixed to use decode_descriptor_ instead of looking
            at the argument list directly; now handles a varying string for
            the caller as well as non-varying.
09/19/83 by L. A. Newcomb:  moved dm_data_$sys_log_ptr to int. static and 
	  changed any_other handler to cleanup handler only.
10/13/83 by M. Pandolf:  added "find" entrypoint.
03/05/84 by L. A. Newcomb:  changed to use the include file dm_system_states
            (renamed from dm_statuses), and to use the new names therein.
08/20/84 by Matthew Pierret:  Changed processing of varying character strings 
            the argument list to take into account the fact that 
            arg_list.arg_ptrs points at the string, not the length word.
11/22/84 by Lee A. Newcomb:  Changed to use dm_misc_util_$get_aim_dir.
12/05/84 by R. Michael Tague:  Since above $get_aim_dir doesn't return a code,
            I took out the code check in open_log.
01/08/85 by Steve Herbst: Converted to call log_write_ and not reference dm_system_data_.
02/07/85 by Steve Herbst: Changed to call dm_misc_util_$get_log_path instead of $get_aim_dir.
02/19/85 by Steve Herbst: Changed to create the directory AIM_DIR>logs.
*/
/* format: style4,indattr,ifthenstmt,ifthen,idind33,^indcomtxt */
%page;
dm_log_:
     procedure () options (variable);


/* DECLARATIONS */

/* Parameters */

dcl A_arglist_ptr ptr;

/* Constants */

dcl CREATE_IF_NONE bit (1) aligned int static options (constant) init ("1"b);
dcl FIFTEEN_SECOND_WAIT fixed bin int static options (constant) init (15);

/* Static */

dcl static_log_write_data_ptr ptr int static init (null);

/* Automatic */

dcl 1 auto_create_branch_info aligned like create_branch_info;

dcl 1 log_acl aligned like segment_acl_entry;
dcl log_ring_brackets (3) fixed bin (3);

dcl (message, message1, message2) char (1024);
dcl (dm_system_log_path, log_dir_dname, log_dname) char (168);
dcl long_report char (100) aligned;
dcl (acct, log_dir_ename, log_ename, my_name) char (32);
dcl person_id char (22);
dcl project_id char (9);
dcl short_report char (8) aligned;
dcl arg_packed bit (1) aligned;
dcl arglist_ptr ptr;
dcl type fixed bin (2);
dcl (arg_ndims, arg_scale, arg_type, message_severity) fixed bin;
dcl message_len fixed bin (21);
dcl (arg_size, bit_count) fixed bin (24);
dcl (code, error_code) fixed bin (35);

/* External */

dcl error_table_$no_s_permission fixed bin (35) ext;
dcl error_table_$noentry fixed bin (35) ext;

/* Entries */

dcl convert_status_code_ entry (fixed bin(35), char(8) aligned, char(100) aligned);
dcl cu_$arg_list_ptr entry (ptr);
dcl cu_$level_get entry (fixed bin);
dcl cu_$level_set entry (fixed bin);
dcl decode_descriptor_ entry (ptr, fixed bin, fixed bin, bit(1) aligned, fixed bin, fixed bin(24), fixed bin);
dcl dm_misc_util_$get_log_path entry (char (*));
dcl expand_pathname_ entry (char(*), char(*), char(*), fixed bin(35));
dcl get_ring_ entry() returns(fixed bin(3));
dcl hcs_$add_acl_entries entry (char(*), char(*), ptr, fixed bin, fixed bin(35));
dcl hcs_$create_branch_ entry (char(*), char(*), ptr, fixed bin(35));
dcl hcs_$set_ring_brackets entry (char(*), char(*), (3)fixed bin(3), fixed bin(35));
dcl hcs_$status_minf entry (char(*), char(*), fixed bin(1), fixed bin(2), fixed bin(24), fixed bin(35));
dcl ioa_$general_rs entry (ptr, fixed bin, fixed bin, char(*), fixed bin(21), bit(1) aligned, bit(1) aligned);
dcl ioa_$rsnnl entry() options(variable);
dcl log_write_$message entry (ptr, fixed bin, char(*), ptr, fixed bin(35));
dcl log_write_$open entry (char(*), char(*), bit(1) aligned, ptr, fixed bin(35));
dcl pathname_ entry (char (*), char (*)) returns (char (168));
dcl user_info_$whoami entry (char(*), char(*), char(*));

/* Builtins */

dcl (addr, addwordno, null, substr, unspec) builtin;

/* Conditions */

dcl (cleanup, record_quota_overflow, seg_fault_error) condition;
%page;
/* dm_log_:  proc () options (variable) */

	my_name = "dm_log_";
	call cu_$arg_list_ptr (arglist_ptr);
	go to COMMON;


from_arg_ptr:					/* entrypoint to accept arglist_ptr as an argument */
     entry (A_arglist_ptr);

	my_name = "dm_log_$from_arg_ptr";
	arglist_ptr = A_arglist_ptr;
	go to COMMON;

COMMON:
	if arglist_ptr -> arg_list.arg_count < 2 then return;

/* Open/create the log if necessary */

	if static_log_write_data_ptr = null then do;
	     call dm_misc_util_$get_log_path (dm_system_log_path);
	     call expand_pathname_ (dm_system_log_path, log_dname, log_ename, 0);
	     call hcs_$status_minf (log_dname, "", 0, type, bit_count, code);  /* make sure log dir exists */
	     if code = 0 | code = error_table_$no_s_permission then do;  /* something by that name exists */
		if type ^= 2 /* directory */ | bit_count ^= 0 then
		     call ERROR_RETURN (0, "Not a directory: " || log_dname);
	     end;
	     else if code = error_table_$noentry then do;	/* create it */
		unspec (auto_create_branch_info) = "0"b;
		auto_create_branch_info.version = create_branch_version_2;
		auto_create_branch_info.dir_sw = "1"b;
		auto_create_branch_info.parent_ac_sw = "1"b;
		auto_create_branch_info.mode = SMA_ACCESS;
		auto_create_branch_info.rings (*) = get_ring_ ();
		auto_create_branch_info.userid = "*.*.*";  /* all users need access to this dir in ring 2 */
		call expand_pathname_ (log_dname, log_dir_dname, log_dir_ename, code);
		if code ^= 0 then call ERROR_RETURN (code, "Unable to create log directory " || log_dname);
		call hcs_$create_branch_ (log_dir_dname, log_dir_ename, addr (auto_create_branch_info), code);
		if code ^= 0 then call ERROR_RETURN (code, "Unable to create log directory " || log_dname);
	     end;
	     else call ERROR_RETURN (code, "Log directory " || log_dname);

	     call log_write_$open (log_dname, log_ename, CREATE_IF_NONE, static_log_write_data_ptr, code);
	     if code ^= 0 then call ERROR_RETURN (code, "Cannot open log " || pathname_ (log_dname, log_ename));

/* If had to open, add ACL entry "rw *.*.*" */

	     unspec (log_acl) = "0"b;
	     log_acl.access_name = "*.*.*";
	     log_acl.mode = RW_ACCESS;
	     call hcs_$add_acl_entries (log_dname, log_ename, addr (log_acl), 1, 0);

	     log_ring_brackets (*) = get_ring_ ();
	     call hcs_$set_ring_brackets (log_dname, log_ename, log_ring_brackets, 0);
	end;

/* Get some values needed for the message */

	call user_info_$whoami (person_id, project_id, acct);
	message_severity = FIXED_BIN_17 (1);
	message1, message2 = "";

/* Decide what type of call this is. Error call if parameter 2 is fixed bin(35) */

	call decode_descriptor_ (arglist_ptr, 2, arg_type, arg_packed, arg_ndims, arg_size, arg_scale);
	if arg_type = real_fix_bin_1_dtype & arg_packed = "0"b & arg_ndims = 0 & arg_scale = 0 then do;

/* Error call */

	     error_code = FIXED_BIN_35 (2);		/* from parm 2 */
	     if error_code = 0 then short_report, long_report = "";
	     else call convert_status_code_ (error_code, short_report, long_report);
	     call ioa_$rsnnl ("(^a.^a) ^a: ^a", message1, message_len, person_id, project_id, CHAR_N (3), long_report);

	     if arglist_ptr -> arg_list.arg_count > 3 then do;
		call ioa_$general_rs (arglist_ptr, 4, 5, message2, message_len, "0"b, "0"b);
		call ioa_$rsnnl ("^a^/^a", message, message_len, message1, message2);
	     end;
	     else message = message1;
	end;

	else do;

/* Not error call */

	     call ioa_$general_rs (arglist_ptr, 2, 3, message1, 0, "0"b, "0"b);
	     call ioa_$rsnnl ("(^a.^a) ^a", message, message_len, person_id, project_id, message1);
	end;

	call WRITE_MESSAGE (substr (message, 1, message_len), message_severity);

RETURN:
	return;
%page;
ERROR_RETURN:
     procedure (P_code, P_str);

dcl P_code fixed bin (35);
dcl P_str char (*);

	/* Code and message are temporarily thrown away until a good way is
	   found to report them. */

	go to RETURN;

end ERROR_RETURN;
%page;
FIXED_BIN_17:
     procedure (P_arg_number) returns (fixed bin (17));

dcl P_arg_number fixed bin;
dcl fb17 fixed bin based;

	if arglist_ptr -> arg_list.arg_count >= P_arg_number then
	     return (arglist_ptr -> arg_list.arg_ptrs (P_arg_number) -> fb17);
	else return (0);

end FIXED_BIN_17;
%page;
FIXED_BIN_35:
     procedure (P_arg_number) returns (fixed bin (35));

dcl P_arg_number fixed bin;
dcl fb35 fixed bin (35) based;

	if arglist_ptr -> arg_list.arg_count >= P_arg_number then
	     return (arglist_ptr -> arg_list.arg_ptrs (P_arg_number) -> fb35);
	else return (0);

end FIXED_BIN_35;
%page;
CHAR_N:
     procedure (P_arg_number) returns (char (*));

dcl P_arg_number fixed bin;
dcl char_non_varying char (1000000) based;
dcl char_varying char (1000000) varying based;
dcl char_varying_ptr ptr;

	call decode_descriptor_ (arglist_ptr, P_arg_number, arg_type, arg_packed, arg_ndims, arg_size, arg_scale);
	if arg_type < 1 then return ("");		/* no desc. or no arg. in the given position */
	if arg_packed = "1"b | arg_ndims ^= 0 | arg_scale ^= 0 | arg_size < 1 then return ("");

	if arg_type = char_dtype then			/* non-varying, assumed most common case */
	     return (substr (arglist_ptr -> arg_list.arg_ptrs (P_arg_number) -> char_non_varying, 1, arg_size));
	if arg_type = varying_char_dtype then do;	/* can still do it */
						/* PL/1 kludge has arg_list pointer point at data, */
						/* not length word, so back it up. */
	     char_varying_ptr = addwordno (arglist_ptr -> arg_list.arg_ptrs (P_arg_number), -1);
	     return (char_varying_ptr -> char_varying);	/* do not need substr */
	end;
	else return ("");				/* if we got here, we had a non-char type */

end CHAR_N;
%page;
WRITE_MESSAGE:
     procedure (P_message, P_message_severity);		/*  Writes a message to the log */

dcl P_message char (*);
dcl P_message_severity fixed bin;
dcl saved_validation fixed bin;

	call cu_$level_get (saved_validation);
	on cleanup begin;
	     call cu_$level_set (saved_validation);
	end;
	call cu_$level_set (get_ring_ ());

	on record_quota_overflow, seg_fault_error begin;
	     on record_quota_overflow, seg_fault_error goto PUNT_WARNING;
	     call log_write_$message (static_log_write_data_ptr, 2,
		"*** MESSAGES HAVE BEEN LOST ***", null, 0);
PUNT_WARNING:
	     call cu_$level_set (saved_validation);
	     go to RETURN;
	end;

	call log_write_$message (static_log_write_data_ptr, P_message_severity, P_message, null, code);
	if code ^= 0 then call ERROR_RETURN (code, "");

	revert record_quota_overflow, seg_fault_error;

	call cu_$level_set (saved_validation);

end WRITE_MESSAGE;
%page; %include access_mode_values;
%page; %include acl_structures;
%page; %include arg_list;
%page; %include arg_descriptor;
%page; %include create_branch_info;
%page; %include dm_system_states;
%page; %include std_descriptor_types;
%page; %include sub_err_flags;
%page; %include terminate_file;

end dm_log_;
