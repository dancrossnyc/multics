/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(86-02-27,Pierret), approve(86-02-27,MCR7340),
     audit(86-04-28,Newcomb), install(86-05-06,MR12.0-1054):
     Changed to use dm_misc_util_$is_process_using_dm instead of using the gate
     entry directly.
                                                   END HISTORY COMMENTS */


/* format: style2,ifthenstmt,^indproc,^indcomtxt */
/*---------------*/

tm_user_shutdown_real:
     proc (A_area_ptr, A_tm_shutdown_info_ptr, A_code);

/* DESCRIPTION:

     	This program shuts down (terminates) a process' usage of a
     Data Management System (DMS).  It is mainly called by the static
     handler for the dm_user_shutdown_ IPS and by the terminate_dm
     command.  It does the following:

     1) returns if the process is not using a DMS,
     2) calls transaction_manager_$user_shutdown_adjust,
     3) call the other DM inner ring managers to do whatever steps
        necessary for them to do user shutdown,
     4) calls transaction_manager_$user_shutdown_free,
     5) terminates (shuts down) the user references to the DMS.

	Note that IPS interrupts are masked while the above steps are
     being done to shut a very small window between each one.  This is to
     prevent possible future problems for processes logged in from rings
     lower than or equal to the DM ring.
*/

/* HISTORY:

Written by Steve Herbst, 11/28/83.
Modified:
02/16/84 by S. Herbst: Fixed to free a TDT entry if no txn left in it.
05/01/84 by L. A. Newcomb: Changed to fix several problems and to call
	  other inner ring manager's user shutdown entrypoints.
05/16/84 by S. Herbst: Changed to return first nonzero error code from 
	  its various calls.
05/31/84 by Lindsey L. Spratt:  Fixed to do the "is_using_dm" check after
            masking ips signals.  Changed the clean_up proc to be the FINISH
            proc, which is always called before returning.  Added the RETURN
            proc which calls FINISH and goes to MAIN_RETURN.  Extended FINISH
            to only free the tm_shutdown_info if the tsi ptr is different from
            the A_tsi ptr and is non-null, allowing the FINISH proc to be used
            after setting the A_tsi ptr without causing the tsi structure to
            be freed.
10/23/84 by Steve Herbst: Changed in response to audit comments.
12/07/84 by R. Michael Tague: Changed dm_util_$terminate_dm to dm_misc_util_$=.
01/31/85 by Steve Herbst: Allow null A_area_ptr, don't set
	  A_tm_shutdown_info_ptr.
05/08/85 by Lee A. Newcomb:  Fixed to use dm_misc_util_$is_process_using_dm to
            follow project standard instead of directly calling the gate
            entry.
*/

/* DECLARATIONS */

/* Parameters */

	dcl     A_area_ptr		 ptr parameter;
	dcl     A_tm_shutdown_info_ptr ptr parameter;
	dcl     A_code		 fixed bin (35) parameter;

/* Constants */

/* Based */

	dcl     based_area		 area based;

/* Automatic */

	dcl     area_ptr		 ptr;
	dcl     saved_ips_mask	 bit (36) aligned;
	dcl     code		 fixed bin (35);

/* Entries */

	dcl     before_journal_manager_$user_shutdown
				 entry ();
	dcl     dm_misc_util_$terminate_dm
				 entry (fixed bin (35));
	dcl     dm_misc_util_$is_process_using_dm
				 entry returns (bit (1));
	dcl     file_manager_$user_shutdown
				 entry ();
	dcl     get_system_free_area_	 entry returns (ptr);
	dcl     hcs_$set_ips_mask	 entry (bit (36) aligned, bit (36) aligned);
	dcl     lock_manager_$user_shutdown
				 entry ();
	dcl     transaction_manager_$user_shutdown_adjust
				 entry (ptr, ptr, fixed bin (35));
	dcl     transaction_manager_$user_shutdown_free
				 entry (fixed bin (35));

/* Builtins */

	dcl     null		 builtin;

/* Conditions */

	dcl     cleanup		 condition;

/* END OF DECLARATIONS */
%page;
	A_code = 0;
	A_tm_shutdown_info_ptr = null;
	tm_shutdown_info_ptr = null;

	if A_area_ptr ^= null
	then area_ptr = A_area_ptr;
	else area_ptr = get_system_free_area_ ();

	saved_ips_mask = ""b;
	on cleanup call FINISH ();

	call hcs_$set_ips_mask (""b, saved_ips_mask);
	if ^dm_misc_util_$is_process_using_dm ()
	then do;					/* DM not initialized, */
		call FINISH ();			/* our work is done. */
		return;
	     end;

	call transaction_manager_$user_shutdown_adjust (area_ptr, tm_shutdown_info_ptr, code);
	if code ^= 0 & A_code = 0 then A_code = code;

/* call the other DM-ring managers to do whatever they must */

	call lock_manager_$user_shutdown ();
	call before_journal_manager_$user_shutdown ();
	call file_manager_$user_shutdown ();

/* now free TDT entries, reset the first reference traps, and reset IPS mask */

	call transaction_manager_$user_shutdown_free (code);
	if code ^= 0 & A_code = 0 then A_code = code;

	call dm_misc_util_$terminate_dm (code);
	if code ^= 0 & A_code = 0 then A_code = code;

	if A_area_ptr ^= null then A_tm_shutdown_info_ptr = tm_shutdown_info_ptr;

	call FINISH ();

	return;
%page;
FINISH:
     proc;

	if A_tm_shutdown_info_ptr ^= tm_shutdown_info_ptr & tm_shutdown_info_ptr ^= null
	then free tm_shutdown_info in (area_ptr -> based_area);

	if saved_ips_mask ^= ""b then call hcs_$set_ips_mask (saved_ips_mask, saved_ips_mask);

     end FINISH;
%page;
%include dm_tm_shutdown_info;


     end tm_user_shutdown_real;
