" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1983 *
" *                                                         *
" ***********************************************************
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	lm_fast_lock_list_
"
"	Program to maintain linked lists of lock structures in a lockless
"	manner.
"
"	Entries:
"
"	thread_out_first	-  gets first block from a list
"	thread_in		-  threads a block into a list
"
"	Written by J. Bongiovanni, 06/15/82.
"	Modified:
"	05/16/85 by S. Cox: To correctly check if a null meter_ptr is given,
"	         and to not meter threadouts if at end of list.
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "


	name	lm_fast_lock_list_
	entry	thread_out_first
	entry	thread_in


	even
NULL_PTR:	its	-1,1
SEGNO_OFFSET_MASK:
	vfd	o18/077777,o18/000077,o18/777777,18/077077

"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	lm_fast_lock_list_$thread_out_first
"
"	call lm_fast_lock_list_$thread_out_first (head_ptr, list_seg_ptr, meter_ptr, block_ptr)
"
"	   head_ptr -> structure describing head of list        (INPUT)
"	   list_seg_ptr -> somehwere in segment containing list (INPUT)
"	   meter_ptr -> area for metering data, or null         (INPUT)
"	   block_ptr -> block threaded out, or null             (OUTPUT)
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

thread_out_first:
	eppab	ap|2,*			" ab -> ptr -> lm_fast_lock_list_head
	eppab	ab|0,*			" ab -> lm_fast_lock_list_head
	eppbb	ap|4,*			" bb -> ptr -> list segment
	epbpbb	bb|0,*			" bb -> base of list segment
	eppbp	ap|6,*			" bp -> ptr -> lm_fast_lock_list_meters
	eppbp	bp|0,*			" bp -> lm_fast_lock_list_meters

	epplb	NULL_PTR,*		" Set list empty
	ldq	ab|lock_list_head.firstp	" QU = Offset of first
	tze	thread_out_returns		" if end of list then quit and don't meter

	eax0	0			" Set not to do metering
	ldaq	ap|6,*
	eraq	NULL_PTR			" Null ptr supplied for metering
	anaq	SEGNO_OFFSET_MASK
	tze	thread_out_loop		" No
	eax0	1
	aos	bp|lock_list_meters.thrdout_calls

thread_out_loop:
	eax0	0,x0			" Metering?
	tze	thread_out_try		" No
	aos	bp|lock_list_meters.thrdout_steps

thread_out_try:
	ldq	ab|lock_list_head.firstp	" QU = Offset of first
	tze	thread_out_returns
	lda	bb|lock_list_block.nextp,qu	" AU = Offset of next
	stacq	ab|lock_list_head.firstp	" Make next first
	tnz	thread_out_loop		" Lost race
	epplb	bb|0,qu			" lb -> block

thread_out_returns:
	sprilb	ap|8,*			" blockp or null
	short_return

"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	lm_fast_lock_list_$thread_in
"
"	call lm_fast_lock_list_$thread_in (head_ptr, meter_ptr, block_ptr)
"
"	   head_ptr -> structure describing head of list (INPUT)
"	   meter_ptr -> area for metering data, or null  (INPUT)
"	   block_ptr -> block to thread in	         (INPUT)
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

thread_in:
	eppab	ap|2,*			" ab -> ptr -> lm_fast_lock_list_head
	eppab	ab|0,*			" ab -> lm_fast_lock_list_head
	eppbp	ap|4,*			" bp -> ptr -> lm_fast_lock_list_meters
	eppbp	bp|0,*			" bp -> lm_fast_lock_list_meters
	epplb	ap|6,*			" lb -> ptr -> lm_fast_lock_list_block
	epplb	lb|0,*			" lb -> lm_fast_lock_list_block
	epbpbb	lb|0			" bb -> base of list segment

	eax0	0			" Set not to do metering
	ldaq	ap|4,*
	eraq	NULL_PTR			" Null ptr supplied for metering
	anaq	SEGNO_OFFSET_MASK
	tze	thread_in_loop		" No
	eax0	1
	aos	bp|lock_list_meters.thrdin_calls

thread_in_loop:
	eax0	0,x0			" Metering?
	tze	thread_in_try		" No
	aos	bp|lock_list_meters.thrdin_steps

thread_in_try:
	ldq	ab|lock_list_head.firstp	" QU = Offset of first
	stq	lb|lock_list_block.nextp	" Make first next
	eaa	lb|0			" And block first
	stacq	ab|lock_list_head.firstp	" Lockless
	tnz	thread_in_loop		" Lost race

	short_return

"
	include	dm_lock_list_strucs

	end
