/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1985 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION:
dm_send_request provides a mechanism for Data Management administrators to
send DM Daemon requests over the DM Daemon's request channel.  These requests
are internal requests used by the DM system and usually originate from ring 2
DM code.  Probably the most useful request for a DM administrator is the kill
request.  This request clears the Transaction Definition Table of a specified 
transaction without rolling back or commiting the transaction.
*/

/* HISTORY:

Written by R. Michael Tague, 01/21/85.
Modified:
02/14/85 by R. Michael Tague:  Added a copyright notice, a description, and
            declared a few builtins.
03/19/85 by R. Michael Tague:  Changed to use keyword instead of control 
	  arguments as ammended by the MCR board.
*/

/* format: style5,^indcomtxt */
%page;
dm_send_request:
        proc ();

/* START OF DECLARATIONS */
/* Automatic */

        dcl     accept_keyword_argument bit (1) aligned init ("0"b);
        dcl     arg_idx		fixed bin;
        dcl     arg_len		fixed bin (21);
        dcl     arg_list_ptr		ptr init (null);
        dcl     arg_ptr		ptr;
        dcl     code		fixed bin (35);
        dcl     keyword_argument_idx	fixed bin;
        dcl     force_interpretation_as_argument
				bit (1) aligned init (NO);
        dcl     is_active_function	bit (1) aligned init (NO);
        dcl     number_of_args	fixed bin;
        dcl     return_arg_len	fixed bin (21) init (0);
        dcl     return_arg_ptr	ptr init (null);
        dcl     sci_ptr		ptr init (null);
        dcl     this_is_a_standalone_invocation
				bit (1) aligned init (YES);

        dcl     operation_index	fixed bin init (-1);
        dcl     tdt_index		fixed bin init (0);
        dcl     transaction_id_fixed_bin_36
				fixed bin (36) init (0);

/* Based */

        dcl     arg			char (arg_len) based (arg_ptr);
        dcl     1 transaction_id	based (
				addr (transaction_id_fixed_bin_36)),
	        2 pad		bit (36) aligned,
	        2 transaction_id_bit_36
				bit (36) aligned;
					      /* Builtin */

        dcl     (addr, bin, hbound, index, null, substr)
				builtin;
        dcl     (cleanup, conversion, size)
				condition;

/* Constant */

        dcl     (
	      YES			init ("1"b),
	      NO			init ("0"b)
	      )			bit (1) aligned internal static
				options (constant);
        dcl     myname		init ("dm_send_request")
				char (15) internal static
				options (constant);


        dcl     ARGUMENT_TYPE		(12) internal static
				options (constant) char (64)
				varying
				init ("", "", "tdt index (decimal)",
				"tdt index (decimal)",
				"transaction ID (decimal)",
				"transaction ID (decimal)", "", "", "",
				"", "transaction ID (decimal)",
				"transaction ID (decimal)");
        dcl     KEYWORD_ARGUMENT	(12) internal static
				options (constant) char (64)
				varying
				init ("adjust_tdt", "adjtdt",
				"adjust_tdt_entry", "adjtdte",
				"adjust_txn", "adjtxn", "new_proc",
				"new_process_notifications", "notify",
				"shutdown", "kill_txn", "kill");

        dcl     (
	      ADJUST_TDT		init (1),
	      ADJUST_TDT_ENTRY	init (2),
	      ADJUST_TXN		init (3),
	      NEW_PROC		init (4),
	      NEW_PROCESS_NOTIFICATIONS
				init (5),
	      SHUTDOWN		init (6),
	      KILL_TXN		init (7)
	      )			internal static options (constant)
				fixed bin;


/* Entry */

        dcl     cu_$arg_list_ptr	entry (ptr);
        dcl     cv_dec_check_		entry (char (*), fixed bin (35))
				returns (fixed bin (35));
        dcl     dm_admin_util_$send_adjust_tdt
				entry (fixed bin (35));
        dcl     dm_admin_util_$send_adjust_tdt_entry
				entry (bit (36) aligned, fixed bin,
				fixed bin (35));
        dcl     dm_admin_util_$send_adjust_txn
				entry (bit (36) aligned, fixed bin,
				fixed bin (35));
        dcl     dm_admin_util_$send_new_proc
				entry (fixed bin (35));
        dcl     dm_admin_util_$send_new_process_notifies
				entry (fixed bin (35));
        dcl     dm_admin_util_$send_shutdown
				entry (fixed bin (35));
        dcl     dm_admin_util_$send_kill_txn
				entry (bit (36) aligned, fixed bin (35))
				;
        dcl     ssu_$abort_line	entry () options (variable);
        dcl     ssu_$arg_ptr		entry (ptr, fixed bin, ptr,
				fixed bin (21));
        dcl     ssu_$destroy_invocation entry (ptr);
        dcl     ssu_$return_arg	entry (ptr, fixed bin, bit (1) aligned,
				ptr, fixed bin (21));
        dcl     ssu_$standalone_invocation
				entry (ptr, char (*), char (*), ptr,
				entry, fixed bin (35));

/* External */

        dcl     (
	      error_table_$active_function,
	      error_table_$bad_arg,
	      error_table_$noarg
	      )			fixed bin (35) external;

/* END OF DECLARATIONS */
        call cu_$arg_list_ptr (arg_list_ptr);
        call ssu_$standalone_invocation (sci_ptr, myname, "", arg_list_ptr,
	  ABORT_ENTRY, code);

        on cleanup call CLEANUP ();

        call ssu_$return_arg (sci_ptr, number_of_args, is_active_function,
	  return_arg_ptr, return_arg_len);

        if is_active_function then
	      call ssu_$abort_line (sci_ptr, error_table_$active_function,
		myname);

        accept_keyword_argument = YES;
        keyword_argument_idx = -1;

        if number_of_args < 1 then
	      call ssu_$abort_line (sci_ptr, error_table_$noarg,
		"^/Usage:  ^a KEYWORD {value}^/Keywords:^/   adjust_tdt, adjtdt^/   adjust_tdt_entry, adjtdte^/   adjust_txn, adjtxn^/   new_proc^/   new_process_notifications, notify^/   shutdown^/   kill_txn, kill",
		myname);
ARG_PROCESSING_LOOP:
        do arg_idx = 1 to number_of_args;
	      call ssu_$arg_ptr (sci_ptr, arg_idx, arg_ptr, arg_len);
	      if KEYWORD_ARGUMENT_INDEX (arg) = -1
		| force_interpretation_as_argument = YES then
		    call PROCESS_ARGUMENT (arg, keyword_argument_idx,
		        accept_keyword_argument);
	      else if accept_keyword_argument = YES then
		    call PROCESS_KEYWORD_ARGUMENT (arg,
		        keyword_argument_idx, accept_keyword_argument,
		        force_interpretation_as_argument);
	      else
		    call REPORT_MISSING_ARGUMENT (keyword_argument_idx);
	      if keyword_argument_idx = -1 & accept_keyword_argument = YES
		then
		    goto DO_OPERATION (operation_index);
	      else
		    goto SKIP_OPERATION;

DO_OPERATION (1):				      /* ADJUST_TDT */
	      call dm_admin_util_$send_adjust_tdt (code);
	      goto FINISH_OPERATION;
DO_OPERATION (2):				      /* ADJUST_TDT_ENTRY */
	      call dm_admin_util_$send_adjust_tdt_entry (""b, tdt_index, code)
		;
	      goto FINISH_OPERATION;
DO_OPERATION (3):				      /* ADJUST_TXN */
	      call dm_admin_util_$send_adjust_txn (transaction_id
		.transaction_id_bit_36, 0, code);
	      goto FINISH_OPERATION;
DO_OPERATION (4):				      /* NEW_PROC */
	      call dm_admin_util_$send_new_proc (code);
	      goto FINISH_OPERATION;
DO_OPERATION (5):				      /* NEW_PROCESS_NOTIFICATIONS */
	      call dm_admin_util_$send_new_process_notifies (code);
	      goto FINISH_OPERATION;
DO_OPERATION (6):				      /* SHUTDOWN */
	      call dm_admin_util_$send_shutdown (code);
	      goto FINISH_OPERATION;
DO_OPERATION (7):				      /* KILL_TXN */
	      call dm_admin_util_$send_kill_txn (transaction_id
		.transaction_id_bit_36, code);
	      goto FINISH_OPERATION;
FINISH_OPERATION:
	      if code ^= 0 then
		    call ssu_$abort_line (sci_ptr, code);
SKIP_OPERATION: 
        end ARG_PROCESSING_LOOP;

        if keyword_argument_idx >= 0 & accept_keyword_argument = NO then
	      call REPORT_MISSING_ARGUMENT (keyword_argument_idx);
        call RETURN ();
%page;
MAIN_RETURN:
        return;

RETURN:
        proc ();
        call FINISH ();
        goto MAIN_RETURN;
        end RETURN;

ABORT_ENTRY:
        procedure ();
        call CLEANUP ();
        go to MAIN_RETURN;
        end ABORT_ENTRY;

CLEANUP:
        procedure ();
        call FINISH ();
        end CLEANUP;

FINISH:
        proc ();
        call ssu_$destroy_invocation (sci_ptr);
        end FINISH;

PROCESS_ARGUMENT:
        proc (pa_p_arg, pa_p_keyword_argument_idx, pa_p_accept_keyword_argument)
	  ;

        dcl     pa_p_arg		char (*) parm;
        dcl     pa_p_keyword_argument_idx
				fixed bin parm;
        dcl     pa_p_accept_keyword_argument
				bit (1) aligned parm;

        dcl     pa_code		fixed bin (35);

        pa_code = 0;

        goto ARGUMENT (pa_p_keyword_argument_idx);
ARGUMENT (-1):
        call ssu_$abort_line (sci_ptr, error_table_$bad_arg,
	  "^/The argument ""^a"" is out of place.", arg);
        return;
ARGUMENT (3):				      /* adjust_tdt_entry */
ARGUMENT (4):				      /* adjtdte */
        on size
	      call ssu_$abort_line (sci_ptr, error_table_$bad_arg,
		"^/Transaction index too large.");
        tdt_index = cv_dec_check_ (arg, pa_code);
        revert size;
        if pa_code ^= 0 then
	      call ssu_$abort_line (sci_ptr, error_table_$bad_arg,
		"^/Transaction index must be a positive decimal integer.");

        keyword_argument_idx = -1;
        accept_keyword_argument = YES;
        return;

ARGUMENT (5):				      /* adjust_txn */
ARGUMENT (6):				      /* adjtxn */
        on size
	      call ssu_$abort_line (sci_ptr, error_table_$bad_arg,
		"^/Transaction ID too large.");
        on conversion
	      call ssu_$abort_line (sci_ptr, error_table_$bad_arg,
		"^/Transaction ID must be positive decimal integer.");
        transaction_id_fixed_bin_36 = bin (arg, 36);
        revert conversion;
        revert size;

        keyword_argument_idx = -1;
        accept_keyword_argument = YES;
        return;

ARGUMENT (11):				      /* kill_txn */
ARGUMENT (12):				      /* kill */
        on size
	      call ssu_$abort_line (sci_ptr, error_table_$bad_arg,
		"^/Transaction ID too large.");
        on conversion
	      call ssu_$abort_line (sci_ptr, error_table_$bad_arg,
		"^/Transaction ID must be positive decimal integer.");
        transaction_id_fixed_bin_36 = bin (arg, 36);
        revert conversion;
        revert size;

        keyword_argument_idx = -1;
        accept_keyword_argument = YES;
        return;

        end PROCESS_ARGUMENT;
%page;
PROCESS_KEYWORD_ARGUMENT:
        proc (pca_p_arg, pca_p_keyword_argument_idx,
	  pca_p_accept_keyword_argument,
	  pca_p_force_interpretation_as_argument);


        dcl     pca_p_arg		char (*) parm;
        dcl     pca_p_keyword_argument_idx
				fixed bin parm;
        dcl     pca_p_accept_keyword_argument
				bit (1) aligned parm;
        dcl     pca_p_force_interpretation_as_argument
				bit (1) aligned parm;

        pca_p_keyword_argument_idx = KEYWORD_ARGUMENT_INDEX (pca_p_arg);
        pca_p_accept_keyword_argument = YES;
        pca_p_force_interpretation_as_argument = NO;

        go to KEYWORD_ARGUMENT (pca_p_keyword_argument_idx);

KEYWORD_ARGUMENT (-1):			      /* not a keyword argument */
        call ssu_$abort_line (sci_ptr, error_table_$bad_arg, pca_p_arg);

KEYWORD_ARGUMENT (1):			      /* adjust_tdt */
KEYWORD_ARGUMENT (2):			      /* adjtdt */
        operation_index = ADJUST_TDT;

        pca_p_keyword_argument_idx = -1;
        pca_p_accept_keyword_argument = YES;
        return;

KEYWORD_ARGUMENT (3):			      /* adjust_tdt_entry */
KEYWORD_ARGUMENT (4):			      /* adjtdte */
        operation_index = ADJUST_TDT_ENTRY;

        pca_p_accept_keyword_argument = NO;
        return;


KEYWORD_ARGUMENT (5):			      /* adjust_txn */
KEYWORD_ARGUMENT (6):			      /* adjtxn */
        operation_index = ADJUST_TXN;

        pca_p_accept_keyword_argument = NO;
        return;


KEYWORD_ARGUMENT (7):			      /* new_proc */
        operation_index = NEW_PROC;

        pca_p_keyword_argument_idx = -1;
        pca_p_accept_keyword_argument = YES;
        return;


KEYWORD_ARGUMENT (8):			      /* new_process_notifications */
KEYWORD_ARGUMENT (9):			      /* notify */
        operation_index = NEW_PROCESS_NOTIFICATIONS;

        pca_p_keyword_argument_idx = -1;
        pca_p_accept_keyword_argument = YES;
        return;


KEYWORD_ARGUMENT (10):			      /* shutdown */
        operation_index = SHUTDOWN;

        pca_p_keyword_argument_idx = -1;
        pca_p_accept_keyword_argument = YES;
        return;


KEYWORD_ARGUMENT (11):			      /* kill_txn */
KEYWORD_ARGUMENT (12):			      /* kill */
        operation_index = KILL_TXN;

        pca_p_accept_keyword_argument = NO;
        return;


        end PROCESS_KEYWORD_ARGUMENT;


KEYWORD_ARGUMENT_INDEX:
        proc (cai_p_arg) returns (fixed bin);

        dcl     cai_p_arg		char (*);
        dcl     cai_keyword_argument_idx
				fixed bin;

        do cai_keyword_argument_idx = 1 to hbound (KEYWORD_ARGUMENT, 1)
	  while (KEYWORD_ARGUMENT (cai_keyword_argument_idx) ^= cai_p_arg);
        end;
        if cai_keyword_argument_idx > hbound (KEYWORD_ARGUMENT, 1) then
	      return (-1);
        else
	      return (cai_keyword_argument_idx);

        end KEYWORD_ARGUMENT_INDEX;

REPORT_MISSING_ARGUMENT:
        proc (rma_p_keyword_argument_idx);
        dcl     rma_p_keyword_argument_idx
				fixed bin parm;

        call ssu_$abort_line (sci_ptr, error_table_$noarg,
	  "^a must be followed by a^[n^] ^a.",
	  KEYWORD_ARGUMENT (rma_p_keyword_argument_idx),
	  (
	  index ("aeiouh",
	  substr (ARGUMENT_TYPE (rma_p_keyword_argument_idx), 1, 1)) > 0),
	  ARGUMENT_TYPE (rma_p_keyword_argument_idx));
        end REPORT_MISSING_ARGUMENT;

        end dm_send_request;
