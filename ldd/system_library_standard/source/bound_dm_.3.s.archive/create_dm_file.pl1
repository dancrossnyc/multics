/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1985 *
   *                                                         *
   *********************************************************** */
/* DESCRIPTION:


Syntax:  create_dm_file PATH {-control_args}


Function:  This command creates an empty Data Management file.


Arguments:
PATH
   is the pathname of the Data Management file to be created.


Control arguments:
-protected, -prot
   makes the dmf protected.  All references to a protected dmf must be
   done with a transaction in progress.  (DEFAULT)
-unprotected, -unprot, -not_protected, -nprot
   makes the dmf unprotected.  An unprotected dmf can be accessed
   outside of a transaction.
-concurrency, -conc
   makes the dmf automatically protected from concurrent access
   conflicts.  This implies the dmf is protected.  (DEFAULT)
-no_concurrency, -nconc
   makes the dmf unprotected from concurrent access conflicts.  This
   option implies the dmf is protected.
-rollback, -rlb
   makes the dmf protected from transaction interruptions (user,
   process, or system-caused), by supporting the rolling-back of all
   modifications made to the dmf by the interrupted transaction.  This
   option implies the dmf is protected.  (DEFAULT)


-no_rollback, -nrlb
   makes the dmf unprotected with respect to transaction interruptions.
   This option implies that the dmf is protected.
-ring_brackets W {R}, -rb W {R}
   sets the extended write ring bracket to W and the extended read ring
   bracket to R.  The extended write ring bracket must be less than or
   equal to the extended read ring bracket, i.e.  W <= R.


Notes:  When two mutually exclusive options are given, the rightmost
one on the command line is used, and the leftmost is ignored.  The
-unprotected option is mutually exclusive with the -protected,
-rollback, -no_rollback, -concurrency and -no_concurrency options.

*/

/* HISTORY:

Written by Lindsey L. Spratt, 12/02/84.
Modified:
12/05/84 by Lindsey L. Spratt:  Changed to use the FCI_*_BRACKET_IDX constants
            in the dm_file_create_info incl file.  Fixed to destroy the
            standalone invocation.
01/10/85 by Lindsey L. Spratt:  Added the default_control_argument_idx var to
            allow the pathname to be provided at any point in the command
            line.  Dcl'ed some builtins.  Changed to use ssu_$arg_count
            instead of ssu_$return_arg.
01/23/85 by Lindsey L. Spratt:  Removed the dcl of 
	  error_table_$active_function.
03/19/85 by S. Cox: Added dm_not_available_ handler.
*/
/* format: style2,ind3 */
%page;
create_dm_file:
   proc ();

/* START OF DECLARATIONS */
/* Automatic */

      dcl	    accept_control_argument
			       bit (1) aligned init (NO);
      dcl	    arg_idx	       fixed bin;
      dcl	    arg_len	       fixed bin (21);
      dcl	    arg_list_ptr	       ptr init (null);
      dcl	    arg_ptr	       ptr;
      dcl	    code		       fixed bin (35);
      dcl	    control_argument_idx   fixed bin;
      dcl	    current_transaction_id bit (36) aligned init ("0"b);
      dcl	    current_transaction_is_defined_by_this_command
			       bit (1) aligned init (NO);
      dcl	    default_control_argument_idx
			       fixed bin init (-1);
      dcl	    dir_path	       char (168) init (UNSET_DIR_PATH);
      dcl	    entry_name	       char (32) init ("");
      dcl	    force_interpretation_as_argument
			       bit (1) aligned init (NO);
      dcl	    is_active_function     bit (1) aligned init (NO);
      dcl	    1 local_file_create_info
			       aligned like file_create_info;
      dcl	    number_of_args	       fixed bin;
      dcl	    return_arg_len	       fixed bin (21) init (0);
      dcl	    return_arg_ptr	       ptr init (null);
      dcl	    sci_ptr	       ptr init (null);
      dcl	    this_is_a_standalone_invocation
			       bit (1) aligned init (YES);
      dcl	    validation_level       fixed bin init (0);

/* Based */

      dcl	    arg		       char (arg_len) based (arg_ptr);

/* Builtin */

      dcl	    (addr, hbound, index, null, substr)
			       builtin;

/* Condition */

      dcl	    (cleanup, dm_not_available_)
			       condition;

/* Constant */

      dcl	    (
	    YES		       init ("1"b),
	    NO		       init ("0"b),
	    SUCCESS_EXIT	       init ("1"b),
	    FAILURE_EXIT	       init ("0"b)
	    )		       bit (1) aligned internal static options (constant);
      dcl	    DEFAULT_BJ	       init ("0"b) bit (36) internal static options (constant);

      dcl	    UNSET_DIR_PATH	       init ("<UNSET DIR PATH<") char (168) internal static options (constant);

      dcl	    myname	       init ("create_dm_file") char (14) internal static options (constant);

      dcl	    ARGUMENT_TYPE	       (19) internal static options (constant) char (64) varying
			       init ("", "", "", "", "", "", "", "", "", "", "", "", "", "",
			       "integer greater than or equal to the validation level",
			       "integer greater than or equal to the validation level",
			       "integer greater than or equal to the validation level",
			       "pathname of the to-be-created dmf", "pathname of the to-be-created dmf");

      dcl	    CONTROL_ARGUMENT       (19) internal static options (constant) char (64) varying
			       init ("-protected", "-prot", "-not_protected", "-nprot", "-unprotected", "-unprot",
			       "-rollback", "-rlb", "-no_rollback", "-nrlb", "-concurrency", "-conc",
			       "-no_concurrency", "-nconc", "-ring_brackets", "-rb", "" /*2nd -rb argument*/,
			       "X-pathname" /* Can only be given as 1st arg. */, "X-pn");

      dcl	    PATHNAME_CONTROL_ARGUMENT_IDX
			       init (18) fixed bin internal static options (constant);

/* Entry */

      dcl	    cu_$arg_list_ptr       entry (ptr);
      dcl	    cu_$level_get	       entry (fixed bin);
      dcl	    cv_dec_check_	       entry (char (*), fixed bin (35)) returns (fixed bin (35));
      dcl	    expand_pathname_       entry (char (*), char (*), char (*), fixed bin (35));
      dcl	    file_manager_$create   entry (char (*), char (*), ptr, fixed bin (35));
      dcl	    pathname_	       entry (char (*), char (*)) returns (char (168));
      dcl	    ssu_$abort_line	       entry () options (variable);
      dcl	    ssu_$arg_ptr	       entry (ptr, fixed bin, ptr, fixed bin (21));
      dcl	    ssu_$arg_count	       entry (ptr, fixed bin);
      dcl	    ssu_$destroy_invocation
			       entry (ptr);
      dcl	    ssu_$standalone_invocation
			       entry (ptr, char (*), char (*), ptr, entry, fixed bin (35));
      dcl	    transaction_manager_$abort_txn
			       entry (bit (36) aligned, fixed bin (35));
      dcl	    transaction_manager_$begin_txn
			       entry (fixed bin (17), bit (36), bit (36) aligned, fixed bin (35));
      dcl	    transaction_manager_$commit_txn
			       entry (bit (36) aligned, fixed bin (35));
      dcl	    transaction_manager_$get_current_txn_id
			       entry (bit (36) aligned, fixed bin (35));


/* External */

      dcl	    (
	    dm_error_$no_current_transaction,
	    dm_error_$system_not_initialized,
	    error_table_$bad_arg,
	    error_table_$badopt,
	    error_table_$noarg
	    )		       fixed bin (35) external;

/* END OF DECLARATIONS */
%page;
      on cleanup call CLEANUP ();

      call cu_$level_get (validation_level);

      local_file_create_info.version = FILE_CREATE_INFO_VERSION_2;
      local_file_create_info.ci_size_in_bytes = 4096;
      local_file_create_info.blocking_factor = 255;
      local_file_create_info.flags.protected = YES;
      local_file_create_info.flags.no_concurrency = NO;
      local_file_create_info.flags.no_rollback = NO;
      local_file_create_info.flags.mbz_1 = "0"b;
      local_file_create_info.ring_brackets (*) = validation_level;
      local_file_create_info.mbz_3 = "0"b;
      local_file_create_info.mbz_2 (*) = 0;

      call cu_$arg_list_ptr (arg_list_ptr);
      call ssu_$standalone_invocation (sci_ptr, myname, "", arg_list_ptr, ABORT_ENTRY, code);

      on dm_not_available_ call ssu_$abort_line (sci_ptr, dm_error_$system_not_initialized, "", myname);

      call ssu_$arg_count (sci_ptr, number_of_args);

      if number_of_args = 0
      then call ssu_$abort_line (sci_ptr, error_table_$noarg, "^/Usage: ^a PATH {-control_arguments}", myname);

      default_control_argument_idx = PATHNAME_CONTROL_ARGUMENT_IDX;
      accept_control_argument = YES;
      control_argument_idx = default_control_argument_idx;

ARG_PROCESSING_LOOP:
      do arg_idx = 1 to number_of_args;
         call ssu_$arg_ptr (sci_ptr, arg_idx, arg_ptr, arg_len);
         if index (arg, "-") ^= 1 | force_interpretation_as_argument = YES
         then call PROCESS_ARGUMENT (arg, control_argument_idx, accept_control_argument);
         else if accept_control_argument = YES
         then call PROCESS_CONTROL_ARGUMENT (arg, control_argument_idx, accept_control_argument,
	         force_interpretation_as_argument);
         else call REPORT_MISSING_ARGUMENT (control_argument_idx);
      end ARG_PROCESSING_LOOP;

      if control_argument_idx >= 0 & accept_control_argument = NO
      then call REPORT_MISSING_ARGUMENT (control_argument_idx);


      if local_file_create_info.protected = YES
      then
         do;
	  call transaction_manager_$get_current_txn_id (current_transaction_id, code);
	  if code = 0
	  then current_transaction_is_defined_by_this_command = NO;
	  else if code = dm_error_$no_current_transaction
	  then
	     do;
	        current_transaction_is_defined_by_this_command = YES;
	        call transaction_manager_$begin_txn (TM_NORMAL_MODE, DEFAULT_BJ, current_transaction_id, code);
	        if code ^= 0
	        then call ssu_$abort_line (sci_ptr, code,
		        "^/Unable to begin a transaction (which is necessary to create a data management file).");
	     end;
	  else call ssu_$abort_line (sci_ptr, code,
		  "^/Unable to determine if there is a transaction in progress in this process.");
         end;

      call file_manager_$create (dir_path, entry_name, addr (local_file_create_info), code);
      if code ^= 0
      then call ssu_$abort_line (sci_ptr, code, "^/Unable to create the data management file ^a.",
	      pathname_ (dir_path, entry_name));

      call FINISH (SUCCESS_EXIT);

MAIN_RETURN:
      return;
%page;
ABORT_ENTRY:
   procedure ();
      call CLEANUP ();
      go to MAIN_RETURN;
   end ABORT_ENTRY;


CLEANUP:
   proc ();
      call FINISH (FAILURE_EXIT);
   end CLEANUP;

FINISH:
   procedure (f_p_exit_type);
      dcl	    f_p_exit_type	       bit (1) aligned parm;

      call ssu_$destroy_invocation (sci_ptr);

      if current_transaction_is_defined_by_this_command = YES
      then if f_p_exit_type = FAILURE_EXIT
	 then call transaction_manager_$abort_txn (current_transaction_id, (0));
	 else call transaction_manager_$commit_txn (current_transaction_id, (0));
   end FINISH;



PROCESS_ARGUMENT:
   proc (pa_p_arg, pa_p_control_argument_idx, pa_p_accept_control_argument);

      dcl	    pa_p_arg	       char (*) parm;
      dcl	    pa_p_control_argument_idx
			       fixed bin parm;
      dcl	    pa_p_accept_control_argument
			       bit (1) aligned parm;

      dcl	    pa_code	       fixed bin (35);

      pa_code = 0;

      goto ARGUMENT (pa_p_control_argument_idx);
ARGUMENT (-1):
      call ssu_$abort_line (sci_ptr, error_table_$bad_arg, "^/The argument ""^a"" is out of place.", arg);
      return;

ARGUMENT (15):					/* -ring_brackets */
ARGUMENT (16):					/* -rb */
      local_file_create_info.ring_brackets (FCI_WRITE_BRACKET_IDX) =
	 CONVERT_RING_BRACKET (validation_level, "current validation level", "write", arg);
      local_file_create_info.ring_brackets (FCI_READ_BRACKET_IDX) =
	 local_file_create_info.ring_brackets (FCI_WRITE_BRACKET_IDX);

      pa_p_accept_control_argument = YES;
      pa_p_control_argument_idx = 17;
      return;

ARGUMENT (17):					/* The read ring bracket, optional. */
      local_file_create_info.ring_brackets (FCI_READ_BRACKET_IDX) =
	 CONVERT_RING_BRACKET ((local_file_create_info.ring_brackets (FCI_WRITE_BRACKET_IDX)), "write bracket", "read",
	 arg);

      pa_p_accept_control_argument = YES;
      pa_p_control_argument_idx = default_control_argument_idx;
      return;

ARGUMENT (18):					/* -pathname */
ARGUMENT (19):					/* -pn */
      call expand_pathname_ (arg, dir_path, entry_name, code);
      if code ^= 0
      then call ssu_$abort_line (sci_ptr, code, "^/Unable to expand the pathname of the data management file, ^a.", arg);

      pa_p_control_argument_idx = default_control_argument_idx;
      pa_p_accept_control_argument = YES;
      return;

   end PROCESS_ARGUMENT;
%page;
PROCESS_CONTROL_ARGUMENT:
   proc (pca_p_arg, pca_p_control_argument_idx, pca_p_accept_control_argument, pca_p_force_interpretation_as_argument);


      dcl	    pca_p_arg	       char (*) parm;
      dcl	    pca_p_control_argument_idx
			       fixed bin parm;
      dcl	    pca_p_accept_control_argument
			       bit (1) aligned parm;
      dcl	    pca_p_force_interpretation_as_argument
			       bit (1) aligned parm;


      pca_p_control_argument_idx = CONTROL_ARGUMENT_INDEX (pca_p_arg);
      pca_p_accept_control_argument = YES;
      pca_p_force_interpretation_as_argument = NO;

      go to CONTROL_ARGUMENT (pca_p_control_argument_idx);

CONTROL_ARGUMENT (-1):				/* not a control argument */
      call ssu_$abort_line (sci_ptr, error_table_$badopt, pca_p_arg);

CONTROL_ARGUMENT (1):				/* -protected */
CONTROL_ARGUMENT (2):				/* -prot */
      local_file_create_info.protected = YES;

      pca_p_control_argument_idx = default_control_argument_idx;
      pca_p_accept_control_argument = YES;
      return;


CONTROL_ARGUMENT (3):				/* -not_protected */
CONTROL_ARGUMENT (4):				/* -nprot */
CONTROL_ARGUMENT (5):				/* -unprotected */
CONTROL_ARGUMENT (6):				/* -unprot */
      local_file_create_info.protected = NO;

      pca_p_control_argument_idx = default_control_argument_idx;
      pca_p_accept_control_argument = YES;
      return;


CONTROL_ARGUMENT (7):				/* -rollback */
CONTROL_ARGUMENT (8):				/* -rlb */
      local_file_create_info.protected = YES;
      local_file_create_info.no_rollback = NO;

      pca_p_control_argument_idx = default_control_argument_idx;
      pca_p_accept_control_argument = YES;
      return;


CONTROL_ARGUMENT (9):				/* -no_rollback */
CONTROL_ARGUMENT (10):				/* -nrlb */
      local_file_create_info.protected = YES;
      local_file_create_info.no_rollback = YES;

      pca_p_control_argument_idx = default_control_argument_idx;
      pca_p_accept_control_argument = YES;
      return;


CONTROL_ARGUMENT (11):				/* -concurrency */
CONTROL_ARGUMENT (12):				/* -conc */
      local_file_create_info.protected = YES;
      local_file_create_info.no_concurrency = NO;

      pca_p_control_argument_idx = default_control_argument_idx;
      pca_p_accept_control_argument = YES;
      return;


CONTROL_ARGUMENT (13):				/* -no_concurrency */
CONTROL_ARGUMENT (14):				/* -nconc */
      local_file_create_info.protected = YES;
      local_file_create_info.no_concurrency = YES;

      pca_p_control_argument_idx = default_control_argument_idx;
      pca_p_accept_control_argument = YES;
      return;


CONTROL_ARGUMENT (15):				/* -ring_brackets */
CONTROL_ARGUMENT (16):				/* -rb */
      pca_p_accept_control_argument = NO;
      return;


CONTROL_ARGUMENT (18):				/* -pathname */
CONTROL_ARGUMENT (19):				/* -pn */
      pca_p_accept_control_argument = NO;
      return;


   end PROCESS_CONTROL_ARGUMENT;


CONTROL_ARGUMENT_INDEX:
   proc (cai_p_arg) returns (fixed bin);

      dcl	    cai_p_arg	       char (*);
      dcl	    cai_control_argument_idx
			       fixed bin;

      do cai_control_argument_idx = 1 to hbound (CONTROL_ARGUMENT, 1)
	 while (CONTROL_ARGUMENT (cai_control_argument_idx) ^= cai_p_arg);
      end;
      if cai_control_argument_idx > hbound (CONTROL_ARGUMENT, 1)
      then return (-1);
      else return (cai_control_argument_idx);

   end CONTROL_ARGUMENT_INDEX;

REPORT_MISSING_ARGUMENT:
   proc (rma_p_control_argument_idx);

      dcl	    rma_p_control_argument_idx
			       fixed bin parm;

      if rma_p_control_argument_idx = PATHNAME_CONTROL_ARGUMENT_IDX
      then call ssu_$abort_line (sci_ptr, error_table_$noarg,
	      "The first argument to this command must be the pathname of the data management file to be created.");
      else call ssu_$abort_line (sci_ptr, error_table_$noarg, "^a must be followed by a^[n^] ^a.",
	      CONTROL_ARGUMENT (rma_p_control_argument_idx),
	      (index ("aeiouh", substr (ARGUMENT_TYPE (rma_p_control_argument_idx), 1, 1)) > 0),
	      ARGUMENT_TYPE (rma_p_control_argument_idx));

   end REPORT_MISSING_ARGUMENT;


CONVERT_RING_BRACKET:
   proc (crb_p_minimum_ring, crb_p_minimum_ring_name, crb_p_ring_bracket_name, crb_p_ring_number_string)
        returns (fixed bin (3));
      dcl	    crb_p_minimum_ring     fixed bin (17) parm;
      dcl	    crb_p_minimum_ring_name
			       char (*);
      dcl	    crb_p_ring_bracket_name
			       char (*);
      dcl	    crb_p_ring_number_string
			       char (*);

      dcl	    crb_code	       fixed bin (35) init (0);
      dcl	    crb_ring_bracket       fixed bin (35) init (0);

      crb_ring_bracket = cv_dec_check_ (crb_p_ring_number_string, crb_code);
      if crb_code ^= 0
      then call ssu_$abort_line (sci_ptr, error_table_$bad_arg, "^/Unable to convert the ring bracket ""^a"".", arg);

      if crb_ring_bracket < crb_p_minimum_ring
      then call ssu_$abort_line (sci_ptr, error_table_$bad_arg, "^/The specified ^a bracket, ^d, is too low.  
It must be greater than or equal to the ^a, ^d.", crb_p_ring_bracket_name, crb_ring_bracket, crb_p_minimum_ring_name,
	      crb_p_minimum_ring);
      else if crb_ring_bracket > 7
      then call ssu_$abort_line (sci_ptr, error_table_$bad_arg, "^/The specified ^a bracket, ^d, is too high.
It must be less than or equal to 7.", crb_p_ring_bracket_name, crb_ring_bracket);

      return (crb_ring_bracket);
   end CONVERT_RING_BRACKET;
%page;
%include dm_file_create_info;
%page;
%include dm_tm_modes;
   end create_dm_file;
