/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */
/* format: style4,ifthenstmt,^indproc,^indcomtxt */
/* --------------- */

tm_handle_conditions: proc ();

/* DESCRIPTION:
   Suspends the current transaction, resignals the condition, and resumes
   the transaction. Called so that condition handlers execute with
   transactions suspended. Any program that begiins and commits transactions
   should say:
	on any_other call transaction_manager_$handle_conditions ();
*/

/* HISTORY:

Written by Steve Herbst, 01/10/83.
Modified:
01/11/83 by Steve Herbst: Made to suspend and resume.
01/25/83 by Steve Herbst: Changed to not check code from suspend before
	  resuming.
04/13/83 by Steve Herbst: Changed to call signal_ with the condition name.
05/18/83 by Lindsey L. Spratt:  Fixed to call signal_ with a fixed char string
            for the name, rather than the call by reference with
            auto_cond_info.condition_name since signal_ takes a nonvarying
            char name argument.  Also, fixed the code variable to be
            initialized to 0 (with an init in the dcl statement).
07/14/83 by Steve Herbst: Re-declared signal_ from options(variable) to
	  explicit args so that condition name will REALLY be passed as
	  a fixed-length string.
10/17/84 by Steve Herbst: Changed in response to audit comments.
*/

/* DECLARATIONS */

/* Parameters */

/* Constants */

/* Based */

/* Static */

dcl  recurse_sw bit (1) int static init ("0"b);		/* prevents recursive invocation */

/* Automatic */

dcl 1 auto_condition_info aligned like condition_info;
dcl resume_sw bit (1);
dcl code fixed bin (35) init (0);

/* External */

/* Entries */

dcl continue_to_signal_ entry (fixed bin (35));
dcl find_condition_info_ entry (ptr, ptr, fixed bin (35));
dcl signal_ entry (char (*), ptr, ptr, ptr);
dcl transaction_manager_$resume_txn entry (fixed bin (35));
dcl transaction_manager_$suspend_txn entry (fixed bin (35));

/* Builtins */

dcl (addr, null, unspec) builtin;

/* Conditions */

dcl cleanup condition;

/* END OF DECLARATIONS */
%page;
	if recurse_sw then do;			/* prevent recursive loop */
	     call continue_to_signal_ (0);
	     return;
	end;

	resume_sw = "0"b;
	on cleanup call CLEAN_UP;

	recurse_sw = "1"b;

	call transaction_manager_$suspend_txn (code);
	resume_sw = (code = 0);			/* don't resume if transaction was previously suspended */

	unspec (auto_condition_info) = "0"b;
	auto_condition_info.version = condition_info_version_1;

	call find_condition_info_ (null, addr (auto_condition_info), code);
	if code = 0
	then call signal_ ((auto_condition_info.condition_name), auto_condition_info.mc_ptr,
		auto_condition_info.info_ptr, auto_condition_info.wc_ptr);

	call CLEAN_UP;

	return;
%page;
CLEAN_UP: proc;

	recurse_sw = "0"b;

	if resume_sw then call transaction_manager_$resume_txn (0);

end CLEAN_UP;
%page;
%include condition_info;
%page;
%include sub_error_info;
%page;
%include condition_info_header;


end tm_handle_conditions;
