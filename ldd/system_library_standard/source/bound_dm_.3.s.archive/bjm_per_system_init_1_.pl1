/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION:

     This is the part one initialization for the before journal manager.
It is responsible for creating the objects needed to run a Data Management
System.  This currently means the bj_pst and bj_txt.  This part of
initialization assumes that no running DMS support exists; i.e.
transaction_manager_ may not be relied upon, only calls to basic data
management support routines (e.g. dm_per_system_).

*/

/* HISTORY:

Written by M. Pandolf, 07/10/82.
Modified:
08/31/82 by M. Pandolf: to split into two parts
02/14/83 by M. Pandolf: to set version for TXT
08/06/83 by Lee A. Newcomb: removed obsolete code arg. from calls
	  to dm_per_system_ entries.
09/07/83 by L. A. Newcomb:  split part one and two into two distinct programs.
	  This helps maintenance and binding.  History comments for part two
	  BJM initialization have been removed.
11/19/84 by Maggie Sharpe:  to clean up format and dcls.
*/

/* format: style4,indattr,ifthenstmt,ifthen,idind33,^indcomtxt */

%page;

bjm_per_system_init_1_:
     procedure (p_code);

/* DECLARATIONS */

/* Parameter */

dcl  p_code		        fixed bin (35)	/* standard system status code */
			        parameter;

/* Automatics */

dcl  1 default_before_journal_default_acl		/* used to set default BJ ACL */
			        dim (1) aligned automatic,
       2 access_name	        char (32) init ("*.*.*"),
       2 modes		        bit (36) init ("500000000000"b3),
       2 mbz		        bit (36) init ("000000000000"b3),
       2 status_code	        fixed bin (35) init (0);

/* External Static:  Status/Error Codes */

dcl  (
     dm_error_$bj_pst_not_enough_buffers
     )			        fixed bin (35) external static;

/* External Static:  Data References */

dcl  (						/* external data references */
     dm_system_data_$bj_txt_relp      bit (18),
     sys_info$time_of_bootload        fixed bin (71)
     )			        external static;
/* Constants */

dcl  (
     PAGE_SIZE		        fixed bin init (1024),
     CI_SIZE		        fixed bin init (4096)
     )			        internal static options (constant);

/* Entries */

dcl  dm_per_system_$create	        entry (char (*), ptr);
dcl  dm_per_system_$alloc	        entry (fixed bin, ptr);

/* Builtin */
dcl  (
     addr, divide, mod,
     ptr, size, rel, unspec
     )			        builtin;
%page;
/* initialize the parameter */

	p_code = 0;

/* create the bj_pst */

	call dm_per_system_$create (BJ_PST, bj_pst_ptr);

	call INITIALIZE_PST ();
	if p_code ^= 0 then				/* sorry */
	     return;

/* allocate the bj_txt */

	call dm_per_system_$alloc (size (bj_txt), bj_txt_ptr);

	unspec (bj_txt) = "0"b;
	bj_txt_ptr -> bj_txt.max_n_entries = dm_system_data_$max_n_transactions;
	bj_txt_ptr -> bj_txt.version = BJ_TXT_VERSION_1;

	dm_system_data_$bj_txt_relp = rel (bj_txt_ptr);

	return;


/* end bjm_per_system_init_1_; */
%page;
INITIALIZE_PST:
     proc ();

	bj_pst.version = 0;
	unspec (bj_pst.lock) = "0"b;
	bj_pst.time_of_bootload = sys_info$time_of_bootload;
	bj_pst.max_n_entries = dm_system_data_$bj_max_n_journals;
	bj_pst.n_entries_used = 0;
	bj_pst.highest_ix_used = 0;

	bj_pst.pn_table_offset = PAGE_BOUNDARY (0 + size (bj_pst));
	bj_pst.check_in_table_offset = PAGE_BOUNDARY (bj_pst.pn_table_offset + size (bj_pn_table));
	bj_pst.buffer_table_offset = PAGE_BOUNDARY (bj_pst.check_in_table_offset + size (bj_check_in_table));

/* fill in max array bound for the various tables */
	ptr (bj_pst_ptr, bj_pst.pn_table_offset) -> bj_pn_table.max_n_entries = dm_system_data_$bj_max_n_journals;
	ptr (bj_pst_ptr, bj_pst.check_in_table_offset) -> bj_check_in_table.max_n_processes =
	     dm_system_data_$bj_max_n_processes;
	ptr (bj_pst_ptr, bj_pst.check_in_table_offset) -> bj_check_in_table.max_n_journals =
	     dm_system_data_$bj_max_n_journals;
	bj_pst.max_n_buffers = 255 - divide (bj_pst.buffer_table_offset, PAGE_SIZE, 17, 0);


	if bj_pst.max_n_buffers < dm_system_data_$bj_max_n_journals then do;
	     p_code = dm_error_$bj_pst_not_enough_buffers;
	     return;
	end;

	bj_pst.version = BJ_PST_VERSION_1;

	return;

     end INITIALIZE_PST;
%page;
PAGE_BOUNDARY:
     proc (w) returns (fixed bin (18) uns);

dcl  w			        fixed bin (18) uns;
dcl  n			        fixed bin (18) uns;

	n = mod (w, PAGE_SIZE);
	if n = 0 then return (w);
	else return (w + (PAGE_SIZE - n));

     end PAGE_BOUNDARY;


/* INCLUDE FILES start next page */
%page;%include dm_bj_static;
%page;%include dm_bj_pst;
%page;%include dm_bj_pste;
%page;%include dm_bj_pn_table;
%page;%include dm_bj_check_in_table;
%page;%include dm_bj_txt;
%page;%include dm_bj_names;
%page;%include dm_log_sv_codes;


     end bjm_per_system_init_1_;
