/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION:

    Program to initialize per-system variables from hardcore variables.

    For testing, this program creates a dummy (user-ring) dm_journal_seg_
    and initializes it. Testing is determined by the ring of execution.
*/
/* HISTORY:

Written by J. Bongiovanni, 11/15/82.
Modified:
08/06/83 by Lee A. Newcomb: removed obsolete code args from calls
	  to dm_per_system_ entries.
11/29/84 by Stanford S. Cox: MAIN: Renamed dm_=, Chg to use initiate_file_, 
	  removed segfault handler, added cleanup handler. ER & FINISH: Added.
12/06/84 by Stanford S. Cox: FINISH: Chg to terminate journal seg before
                             resetting validation level.
05/10/85 by R. Michael Tague:  Changed to use dm_hcs_$get_n_journals.
*/

/* format: style4,indattr,ifthenstmt,ifthen,^indcomtxt,idind33 */
%page;
dm_init_from_hardcore_:
     proc (p_code);

/*  Parameter  */

dcl  p_code		        fixed bin (35);	/* Standard return code */

/*  Automatic  */

dcl  journalx		        fixed bin;
dcl  pagex		        fixed bin;
dcl  save_level		        fixed bin;

/*  Static  */

dcl  END_OF_TIME		        fixed bin (71) int static options (constant) init (111111111111111111111111111111111111111111111111111111b);
dcl  JOURNAL_DIR		        char (4) int static options (constant) init (">sl1");
dcl  JOURNAL_SEG		        char (15) int static options (constant) init ("dm_journal_seg_");
dcl  JOURNAL_WAIT_EVENT	        bit (36) aligned int static options (constant) init ("666000000000"b3);
dcl  MAX_DM_PAGES		        fixed bin int static options (constant) init (2048);
dcl  PER_ASTE_POOL		        (0:3) fixed bin int static options (constant) init (1000, 500, 200, 50);

/*  Entry  */

dcl  cu_$level_get		        entry (fixed bin);
dcl  cu_$level_set		        entry (fixed bin);
dcl  dm_hcs_$get_n_journals	        entry () returns (fixed bin);
dcl  dm_per_system_$create	        entry (char (*), ptr);
dcl  get_ring_		        entry () returns (fixed bin (3));
dcl  initiate_file_		        entry (char (*), char (*), bit (*), ptr, fixed bin (24), fixed bin (35));
dcl  terminate_file_	        entry (ptr, fixed bin (24), bit (*), fixed bin (35));

/*  External  */

dcl  dm_system_data_$bj_max_n_journals fixed bin external;
dcl  sys_info$data_management_ringno  fixed bin external;

/*  Builtin  */

dcl  addr			        builtin;
dcl  null			        builtin;
dcl  rel			        builtin;

/*  Condition  */

dcl  cleanup		        condition;
%page;
	p_code = 0;

	if get_ring_ () = sys_info$data_management_ringno then do; /* "Live" */
	     call cu_$level_get (save_level);
	     on cleanup call FINISH ();
	     call cu_$level_set (get_ring_ ());
	     call initiate_file_ (JOURNAL_DIR, JOURNAL_SEG, R_ACCESS, dm_journal_segp, (0), p_code);
	     call cu_$level_set (save_level);
	     revert cleanup;
	     if dm_journal_segp = null () then call ERROR_RETURN;
	     p_code = 0;
	     dm_system_data_$bj_max_n_journals = dm_hcs_$get_n_journals ();
	     call FINISH ();
	end;

	else do;					/* "Test" */

	     call dm_per_system_$create (JOURNAL_SEG, dm_journal_segp);
	     dm_journal.n_journals = dm_system_data_$bj_max_n_journals;
	     dm_journal.max_held_pages_mem = MAX_DM_PAGES;
	     dm_journal.per_aste_pool (*).threshold = PER_ASTE_POOL (*);
	     dm_journal.free_list_relp = rel (addr (dm_journal.page_entry));
	     dm_journal.wait_event = JOURNAL_WAIT_EVENT;
	     do journalx = 1 to dm_journal.n_journals;
		dm_journal.per_journal (journalx).time_stamp = END_OF_TIME;
	     end;
	     do pagex = 1 to dm_journal.max_held_pages_mem - 1;
		dm_journal.page_entry (pagex).fp = rel (addr (dm_journal.page_entry (pagex + 1)));
	     end;
	end;

MAIN_RETURN:
	return;
%page;
FINISH:
     proc ();

	call terminate_file_ (dm_journal_segp, (0), "0"b, p_code);
	call cu_$level_set (save_level);
     end FINISH;
%skip (2);
ERROR_RETURN:
     proc ();

	call FINISH ();
	goto MAIN_RETURN;
     end ERROR_RETURN;
%include dm_journal_seg_;
%page; %include access_mode_values;
%page; %include terminate_file;

     end dm_init_from_hardcore_;
