/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/*  DESCRIPTION:

		tm_user_shutdown

     This routine does the user ring portion of Data Management user
shutdown.  The steps are outlined below.  IPS interrupts are not
masked as they cannot cause any damage unless the user has created his
own dm_misc_util_, etc., in an attempt to do so.

     In the original code, all user shutdown was done in the DM ring.
However, this left the timers set; if the process then used another DM
system, a segment fault would result trying to reference through the
old entry variables stored by timer_manager_.  In addition, the user
would get rather confused to find multiple timers set up to do the DM
user shutdown steps.

 Shutdown Steps:
1) reset the user shutdown warning timer;

2) reset the user shutdown timer;

3) call transaction_manager_$user_shutdown_real to cause DM shutdown
in the inner ring (DM user shutdown is not complete until this call
returns).
*/

/*  HISTORY:

Written by Lee A. Newcomb, 04/17/85.
Modified:
*/

/* format: style2,ll79,ind3,^indprocbody,ifthendo,ifthen,^indnoniterdo,^inddcls,dclind5,idind35,linecom */
%page;
tm_user_shutdown:
   proc (p_area_ptr, p_tm_shutdown_info_ptr, p_code);


/* DECLARATIONS */

/* Parameter */
dcl  (
     p_area_ptr			ptr,		/* I: user area to allocate tm_shutdown_info */
     p_tm_shutdown_info_ptr		ptr,		/* O: where tm_shutdown_info was allocated */
     p_code			fixed bin (35)	/* O: normal error code, recovery fails if ^= 0 */
     )				parameter;

/* Condition */
dcl  timer_manager_err		condition;

/* Entry */
dcl  (
     dm_misc_util_$is_process_using_dm	entry () returns (bit (1) aligned),
     dm_misc_util_$shutdown_handler	entry (),
     dm_misc_util_$signal_shutdown_warning
				entry (),
     dm_misc_util_$signal_user_shutdown entry (),
     timer_manager_$reset_alarm_call	entry (entry),
     transaction_manager_$user_shutdown_real
				entry (ptr, ptr, fixed bin (35))
     )				external;

/* END OF DECLARATIONS */
%page;
/* tm_user_shutdown:		repeat for reader	*/
/*    proc (ptr, ptr, fixed bin(35));			*/


RESET_USER_DM_SHUTDOWN_TIMERS:
   do;						/* two timers to reset */
      on timer_manager_err go to RESET_USER_SHUTDOWN_TIMER;
      call timer_manager_$reset_alarm_call (
	 dm_misc_util_$signal_shutdown_warning);
RESET_USER_SHUTDOWN_TIMER:
      on timer_manager_err go to USER_SHUTDOWN_TIMERS_RESET;
      call timer_manager_$reset_alarm_call (dm_misc_util_$signal_user_shutdown)
	 ;
USER_SHUTDOWN_TIMERS_RESET:
   end RESET_USER_DM_SHUTDOWN_TIMERS;


DO_DM_RING_USER_SHUTDOWN:
   call transaction_manager_$user_shutdown_real (p_area_ptr,
        p_tm_shutdown_info_ptr, p_code);

   return;

/* end tm_user_shutdown; */


   end tm_user_shutdown;
