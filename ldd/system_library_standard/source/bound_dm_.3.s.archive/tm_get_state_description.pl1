/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   *********************************************************** */
/* format: style4,ifthenstmt,^indproc,^indcomtxt */
/* --------------- */

tm_get_state_description: proc (A_state) returns (char (*));

/* DESCRIPTION:

   Given a transaction's state (for example, tm_tdt.state (i)), returns
   a character string describing that state.
*/

/* HISTORY:

Written by Steve Herbst, 11/28/83.
Modified:
10/17/84 by Steve Herbst: Changed in response to audit comments.
*/


/* DECLARATIONS */

/* Parameters */

dcl  A_state fixed bin parameter;

/* Constants */

/* Based */

/* Static */

/* Automatic */

dcl  string char (64);
dcl  state fixed bin;
dcl  error_sw bit (1);

/* External */

/* Entries */

dcl  ioa_$rsnnl entry options (variable);

/* Builtins */

dcl  (length, rtrim) builtin;

/* Conditions */

/* END OF DECLARATIONS */
%page;
	state = A_state;
	if state > TM_ERROR_INCREMENT then do;
	     error_sw = "1"b;
	     state = state - TM_ERROR_INCREMENT;
	end;
	else error_sw = "0"b;

	if state = TM_IN_PROGRESS_STATE then string = "In Progress";
	else if state = TM_BEGIN_STARTING_STATE then string = "Begin, calling bjm_$write_begin_mark";
	else if state = TM_ABORT_FLUSHING_TXN_STATE then string = "Abort, calling bjm_$flush_transaction";
	else if state = TM_ABORT_ROLLING_BACK_STATE then string = "Abort, calling bjm_$rollback";
	else if state = TM_ABORT_FLUSHING_CI_STATE then string = "Abort, calling fm_$flush_modified_ci";
	else if state = TM_ABORT_WRITING_MARK_STATE then string = "Abort, calling bjm_$write_aborted_mark";
	else if state = TM_ABORT_UNLOCKING_STATE then string = "Abort completed, calling lm_$unlock_all";
	else if state = TM_ABORT_METERING_STATE then string = "Abort completed, metering";
	else if state = TM_COMMIT_FLUSHING_TXN_STATE then string = "Commit, calling bjm_$flush_transaction";
	else if state = TM_COMMIT_FLUSHING_CI_STATE then string = "Commit, calling fm_$flush_modified_ci";
	else if state = TM_COMMIT_WRITING_MARK_STATE then string = "Commit, calling bjm_$write_committed_mark";
	else if state = TM_COMMIT_POST_COMMIT_STATE then string = "Commit, post-commit";
	else if state = TM_COMMIT_UNLOCKING_STATE then string = "Commit completed, calling lm_$unlock_all";
	else if state = TM_COMMIT_METERING_STATE then string = "Commit completed, metering";
	else if state = TM_ROLLBACK_FLUSHING_TXN_STATE then string = "Rollback, calling bjm_$flush_transaction";
	else if state = TM_ROLLBACK_ROLLING_BACK_STATE then string = "Rollback, calling bjm_$rollback";
	else if state = TM_ROLLBACK_FLUSHING_CI_STATE then string = "Rollback, calling fm_$flush_modified_ci";
	else if state = TM_ROLLBACK_WRITING_MARK_STATE then string = "Rollback, calling bjm_$write_rolled_back_mark";
	else if state = TM_ROLLBACK_UNLOCKING_STATE then string = "Rollback completed, calling lm_$unlock_all";
	else if state = TM_ROLLBACK_METERING_STATE then string = "Rollback completed, metering";
	else call ioa_$rsnnl ("^d (undefined state)", string, length (string), A_state);

	if error_sw then return ("Error - " || rtrim (string));
	else return (rtrim (string));
%page;
%include dm_tm_states;


     end tm_get_state_description;
