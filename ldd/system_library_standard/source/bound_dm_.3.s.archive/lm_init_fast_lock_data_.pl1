/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/*  DESCRIPTION:
   Program to initialize the per-system table used for fast locks.
   This should be called once per-bootload, before any fast lock is
   used by anybody.
*/

/* HISTORY:

   Written by J. Bongiovanni, 06/15/82.
   Modified:
   08/06/83 by Lee A. Newcomb:  removed obsolete code args. from calls
   to dm_per_system_ entries.
   10/10/84 by Stanford S. Cox:  For DM program standards, and to meter fast
   locks.
*/
/* format: style3,ifthenstmt,ifthendo,ifthen,^indnoniterdo,indcomtxt,^inditerdo,indcom,ind3 */
%page;
     /* format: style3 */
lm_init_fast_lock_data_:
     proc (p_code);

/*  Parameter  */

dcl	p_code		fixed bin (35) parameter;	/* Status code */

/*  Automatic  */

dcl	fast_lock_data_size fixed bin (18);
dcl	listx		fixed bin;

/*  Static  */

dcl	FAST_LOCK_DATA_SIZE fixed bin (18) int static options (constant) init (2048);

/*  External  */

dcl	dm_system_data_$fast_lock_data_rel
			bit (18) aligned external;
dcl	dm_system_data_$lock_list_meters_rel
			bit (18) aligned external;
dcl	dm_system_data_$meter_fast_locks
			bit (1) aligned external;

/*  Entry  */

dcl	dm_per_system_$alloc
			entry (fixed bin (18), ptr);
dcl	lm_fast_lock_list_$thread_in
			entry (ptr, ptr, ptr);

/*  Builtin  */

dcl	addr		builtin;
dcl	addrel		builtin;
dcl	bin		builtin;
dcl	divide		builtin;
dcl	null		builtin;
dcl	rel		builtin;
dcl	size		builtin;
dcl	unspec		builtin;

%page;

	p_code = 0;
	call dm_per_system_$alloc (FAST_LOCK_DATA_SIZE, fast_lock_data_ptr);

	dm_system_data_$fast_lock_data_rel = rel (fast_lock_data_ptr);

	unspec (fast_lock_data) = ""b;
	fast_lock_data.version = FAST_LOCK_DATA_VERSION_1;
	fast_lock_data.size = FAST_LOCK_DATA_SIZE;

	lock_list_block_words = size (fast_lock_wakeup_block);
	fast_lock_data.n_list_entries =
	     divide (fast_lock_data.size - (bin (rel (addr (fast_lock_data.list))) - bin (rel (addr (fast_lock_data)))),
	     size (lock_list_block), 17);

	lock_list_block_ptr = addr (fast_lock_data.list);
	do listx = 1 to fast_lock_data.n_list_entries;
	     lock_list_block.nextp, lock_list_block.mbz = ""b;
	     lock_list_block.block_words = lock_list_block_words;
	     unspec (lock_list_block.block_data) = ""b;
	     call lm_fast_lock_list_$thread_in (addr (fast_lock_data.free_list_head), null (), lock_list_block_ptr);
	     lock_list_block_ptr = addrel (lock_list_block_ptr, size (lock_list_block));
	end;

	if dm_system_data_$meter_fast_locks
	then do;					/* setup fast lock meters */
		call dm_per_system_$alloc (size (lock_list_meters), lock_list_meters_ptr);
		unspec (lock_list_meters) = "0"b;
		lock_list_meters.version = LOCK_LIST_METERS_VERSION_1;
		dm_system_data_$lock_list_meters_rel = rel (lock_list_meters_ptr);
	     end;
	else dm_system_data_$lock_list_meters_rel = "0"b;

%page;
%include dm_fast_lock_strucs;
%include dm_lock_list_strucs;

     end lm_init_fast_lock_data_;
