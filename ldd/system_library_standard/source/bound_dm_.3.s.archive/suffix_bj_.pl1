/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION:

	This is the file system interface for before journals.  When
     the file system encounters an entity with a suffix of .bj, it
     calls suffix_bj_$validate.  If the entity is validated as a
     before journal, all future file system operations for the journal
     will be forwarded to this module (e.g., ACL manipulation).

	DEFINITION: a before journal is an unprotected Data
     Management file, with read and write ring brackets of the DM
     ring, and with a suffix of .bj on all its names in the containing
     directory.  The DM ring is defined as the ring of execution after
     transfering through dm_gate_, equal to sys_info$data_mgmt_ringno
     except in test DM systems.
*/

/* HISTORY:

Written by M. Pandolf, 10/31/83.
Modified:
02/29/84 by Michael Pandolf:  Changed to not call file_manager_
	  directly, but use fs_util_$make_entry_for_type.
06/11/84 by Lee Baldwin:  Renamed dm_error_$bj_header_bad to
	  $bj_bad_header.
12/14/84 by Lee A. Newcomb:  Changed to NOT use fs_util_$make_entry_for_type
	  as many file_manager_ operations are not supported for before
	  journals (e.g., switches); fixed to call before_journal_manager_
	  entrypoints as before journals are only available in the DM ring,
	  fixed $suffix_info to check the input version of the suffix_info
	  structure and to return error_table_$unsupported_operation for
	  for all unsupported file system operations not allowed for BJ's.
*/

/* format: style2,ll79,ind3,^indprocbody,ifthendo,ifthen,^indnoniterdo */
/* format: ^inddcls,dclind5,idind35,linecom */
%page;
suffix_bj_$suffix_info:
   proc (p_suffix_info_ptr);				/* START OF DECLARATIONS */

/* Parameter */
dcl  (
     p_acl_ptr			ptr,
     p_bit_count			fixed bin (24),
     p_code			fixed bin (35),
     p_copy_options_ptr		ptr,
     p_dir_name			char (*),
     p_entry_name			char (*),
     p_exmodes			bit (36) aligned,
     p_max_length			fixed bin (19),
     p_modes			bit (36) aligned,
     p_new_name			char (*),
     p_no_sysdaemon			bit (1),
     p_old_name			char (*),
     p_ring			fixed bin,
     p_ring_brackets		dim (*) fixed bin (3),
     p_switch_list_ptr		ptr,
     p_switch_name			char (*),
     p_suffix_info_ptr		ptr,
     p_user_area_ptr		ptr,
     p_user_name			char (*),
     p_value			bit (1) aligned,
     p_version_wanted		char (*)
     )				parameter;

/* Automatic */
dcl  (
     entrypoint_name		char (32)		/* set if ERROR_SIGNAL can be called */
     )				automatic;

/* Based */
/* Builtin */
dcl  (addr, null)			builtin;

/* Condition */
/* Constant */
dcl  (
     myname			char (32) varying init ("suffix_bj_"),
     IOA_GENERAL_RS_NO_NEW_LINE	bit (1) aligned init ("0"b),
     IOA_GENERAL_RS_DONT_PAD		bit (1) aligned init ("1"b)
     )				internal static options (constant);

/* Entry */
dcl  (
     before_journal_manager_$add_acl_entries
				entry (char (*), char (*), ptr,
				fixed bin (35)),
     before_journal_manager_$chname_file
				entry (char (*), char (*), char (*),
				char (*), fixed bin (35)),
     before_journal_manager_$delete_acl_entries
				entry (char (*), char (*), ptr,
				fixed bin (35)),
     before_journal_manager_$delete_bj	entry (char (*), char (*),
				fixed bin (35)),
     before_journal_manager_$get_user_access_modes
				entry (char (*), char (*), char (*),
				fixed bin, bit (36) aligned,
				bit (36) aligned, fixed bin (35)),
     before_journal_manager_$list_acl	entry (char (*), char (*), char (*),
				ptr, ptr, fixed bin (35)),
     before_journal_manager_$replace_acl
				entry (char (*), char (*), ptr, bit,
				fixed bin (35)),
     before_journal_manager_$validate	entry (char (*), char (*),
				fixed bin (35)),
     cu_$arg_list_ptr		entry (ptr),
     ioa_$general_rs		entry (ptr, fixed bin, fixed bin,
				char (*), fixed bin (21),
				bit (1) aligned, bit (1) aligned),
     sub_err_			entry () options (variable)
     )				external;

/* External */
dcl  (
     1 bj_suffix_info_$		aligned like suffix_info,
     bj_suffix_info_$version		char (8) aligned,
     (
     error_table_$null_info_ptr,
     error_table_$unimplemented_version,
     error_table_$unsupported_operation
     )				fixed bin (35)
     )				external static;

/* END OF DECLARATIONS */
%page;
/* DO SUPPORTED OPERATIONS WHOLLY CONTAINED IN THIS MODULE FIRST:	*/


/* repeat main procedure statement for reader's convenience:	*/
/*							*/
/* suffix_bj_$suffix_info:					*/
/*     proc (p_suffix_info_ptr);				*/

   suffix_info_ptr = p_suffix_info_ptr;
   entrypoint_name = "suffix_info";

   if suffix_info_ptr = null () then
      call ERROR_SIGNAL (error_table_$null_info_ptr,
	 "caller must allocate suffix_info storage.");
   else call CHECK_VERSION (bj_suffix_info_$version, suffix_info.version,
	   "suffix_info");

   suffix_info_ptr -> suffix_info = addr (bj_suffix_info_$) -> suffix_info;

   call RETURN ();
%page;
/* SUPPORTED OPERATIONS FOR WHICH WE MUST CALL	*/
/* before_journal_manager_ TO DO THE REAL WORK.	*/

suffix_bj_$add_acl_entries:
   entry (p_dir_name, p_entry_name, p_acl_ptr, p_code);

   call before_journal_manager_$add_acl_entries (p_dir_name, p_entry_name,
        p_acl_ptr, p_code);

   call RETURN ();

/* end suffix_bj_$add_acl_entries; */




suffix_bj_$chname_file:
   entry (p_dir_name, p_entry_name, p_old_name, p_new_name, p_code);

   call before_journal_manager_$chname_file (p_dir_name, p_entry_name,
        p_old_name, p_new_name, p_code);

   call RETURN ();

/* end suffix_bj_$chname_file; */




suffix_bj_$delentry_file:
   entry (p_dir_name, p_entry_name, p_code);

   call before_journal_manager_$delete_bj (p_dir_name, p_entry_name, p_code);

   call RETURN ();

/* end suffix_bj_$delentry_file; */




suffix_bj_$delete_acl_entries:
   entry (p_dir_name, p_entry_name, p_acl_ptr, p_code);

   call before_journal_manager_$delete_acl_entries (p_dir_name, p_entry_name,
        p_acl_ptr, p_code);

   call RETURN ();

/* end suffix_bj_$delete_acl_entries; */
%page;
suffix_bj_$get_user_access_modes:
   entry (p_dir_name, p_entry_name, p_user_name, p_ring, p_modes, p_exmodes,
        p_code);

   call before_journal_manager_$get_user_access_modes (p_dir_name,
        p_entry_name, p_user_name, p_ring, p_modes, p_exmodes, p_code);

   call RETURN ();

/* end suffix_bj_$get_user_access_modes; */




suffix_bj_$list_acl:
   entry (p_dir_name, p_entry_name, p_version_wanted, p_user_area_ptr,
        p_acl_ptr, p_code);

   call before_journal_manager_$list_acl (p_dir_name, p_entry_name,
        p_version_wanted, p_user_area_ptr, p_acl_ptr, p_code);

   call RETURN ();

/* end suffix_bj_$list_acl; */




suffix_bj_$replace_acl:
   entry (p_dir_name, p_entry_name, p_acl_ptr, p_no_sysdaemon, p_code);

   call before_journal_manager_$replace_acl (p_dir_name, p_entry_name,
        p_acl_ptr, p_no_sysdaemon, p_code);

   call RETURN ();

/* end suffix_bj_$replace_acl; */




suffix_bj_$validate:
   entry (p_dir_name, p_entry_name, p_code);

   call before_journal_manager_$validate (p_dir_name, p_entry_name, p_code);

   call RETURN ();

/* end suffix_bj_$validate; */
%page;
/* NOW HANDLE THOSE OPERATIONS NOT SUPPORTED FOR BEFORE JOURNALS.	*/
/* ALL ENTRIES FALL THROUGH TO SET THE STATUS CODE AND RETURN.	*/

suffix_bj_$add_extended_acl_entries:
   entry (p_dir_name, p_entry_name, p_acl_ptr, p_code);

suffix_bj_$copy:
   entry (p_copy_options_ptr, p_code);

suffix_bj_$get_bit_count:
   entry (p_dir_name, p_entry_name, p_bit_count, p_code);

suffix_bj_$get_max_length:
   entry (p_dir_name, p_entry_name, p_max_length, p_code);

suffix_bj_$get_ring_brackets:
   entry (p_dir_name, p_entry_name, p_ring_brackets, p_code);

suffix_bj_$get_switch:
   entry (p_dir_name, p_entry_name, p_switch_name, p_value, p_code);

suffix_bj_$list_extended_acl_entries:
   entry (p_dir_name, p_entry_name, p_version_wanted, p_user_area_ptr,
        p_acl_ptr, p_code);

suffix_bj_$list_switches:
   entry (p_dir_name, p_entry_name, p_switch_list_ptr, p_code);

suffix_bj_$replace_extended_acl:
   entry (p_dir_name, p_entry_name, p_acl_ptr, p_no_sysdaemon, p_code);

suffix_bj_$set_bit_count:
   entry (p_dir_name, p_entry_name, p_bit_count, p_code);

suffix_bj_$set_max_length:
   entry (p_dir_name, p_entry_name, p_max_length, p_code);

suffix_bj_$set_ring_brackets:
   entry (p_dir_name, p_entry_name, p_ring_brackets, p_code);

suffix_bj_$set_switch:
   entry (p_dir_name, p_entry_name, p_switch_name, p_value, p_code);

   call ERROR_RETURN (error_table_$unsupported_operation);
%page;
MAIN_RETURN:
   return;

RETURN:
   proc ();

/* This proc is used when 1) there is no code parameter to set, or	*/
/* 2) the code parameter has been set by an external procedure.	*/

   go to MAIN_RETURN;

   end RETURN;


ERROR_RETURN:
   proc (er_p_code);

dcl  er_p_code			fixed bin (35) parameter;

   p_code = er_p_code;
   go to MAIN_RETURN;

   end ERROR_RETURN;




CHECK_VERSION:
   proc (cv_p_expected_version, cv_p_given_version, cv_p_structure_name);

dcl  (
     cv_p_expected_version		char (8) aligned,
     cv_p_given_version		char (8) aligned,
     cv_p_structure_name		char (*)
     )				parameter;

   if cv_p_expected_version ^= cv_p_given_version then
      call ERROR_SIGNAL (error_table_$unimplemented_version,
	 "Expected version ^a of structure ^a, recieved ^a.",
	 cv_p_expected_version, cv_p_structure_name, cv_p_given_version);

   return;

   end CHECK_VERSION;
%page;
ERROR_SIGNAL:
   proc options (variable);

dcl  (
     er_arg_list_ptr		ptr,
     er_code			fixed bin (35),
     er_message			char (1024),
     er_message_length		fixed bin (21)
     )				automatic;

dcl  (
     er_fixed_bin_35_value		fixed bin (35),
     er_message_overlay		char (er_message_length)
     )				based;

   call cu_$arg_list_ptr (er_arg_list_ptr);
   er_code = er_arg_list_ptr -> arg_list.arg_ptrs (1) -> er_fixed_bin_35_value;

   call ioa_$general_rs (er_arg_list_ptr, 2, 3, er_message, er_message_length,
        IOA_GENERAL_RS_DONT_PAD, IOA_GENERAL_RS_NO_NEW_LINE);
   call sub_err_ (er_code, myname, ACTION_CANT_RESTART, null (), 0,
        "By entry ^a:  ^a.", entrypoint_name,
        addr (er_message) -> er_message_overlay);

   end ERROR_SIGNAL;
%page;
%include suffix_info;
%page;
%include copy_flags;
%page;
%include arg_list;
%page;
%include sub_err_flags;


   end suffix_bj_$suffix_info;
