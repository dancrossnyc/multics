" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1983 *
" *                                                         *
" ***********************************************************
"
"
" DESCRIPTION:
"
"	The transfer vector for the Data Management Lock Manager.
"
"	Simple cases of lock_fast and unlock_fast are handled
"    in this transfer vector.
"
"	NOTE -- Externally available entries go through a gate
"    or the inner ring tv, to make sure the firstref runs.  Entries
"    internal to the lock manager tra directly.
"
"
" HISTORY:
"
" Written by J. Bongiovanni, 06/01/82.
" Modified:
" 03/01/83 by Jeffrey D. Ives:  to call lm_gate_.
" 04/19/83 by Jeffrey D. Ives:  changed from tra to call6 so that gates work.
" 04/29/83 by BIM:  changed to not bother with the gate for entries that
"	    are not available outside DM ring, which is most.
" 05/09/83 by BIM:  changed not to use call6 when tra will do.
" 07/29/83 by Lindsey Spratt: Changed lock_lock_data and unlock_lock_data
"	    to reference lm_inner_ring_tv_ rather than lm_per_system_
"	    directly.  Also, changed to reference
"	    lm_inner_ring_tv_$lock_fast rather than lm_fast_lock_
"	    directly.  This both makes the setup of this tv more
"	    consistent and makes the separation of the lock_manager_ tv
"	    from the bound object containing the lm_inner_ring_tv_
"	    easier.
" 01/03/84 by Lee A. Newcomb:  changed to use privileged and administrative
"	    gates where necessary, which is curr. all gates references.
" 05/02/84 by Lee A. Newcomb:  added user_shutdown entry.
" 10/05/84 by Stanford S. Cox: changed init_per_system to use tra.
" 11/22/84 by Lee A. Newcomb:  Added $per_process_init entry.
" 12/02/84 by Stanford S. Cox: Chg *inner_ring_tv_ to be =firstref_tv_
" 01/09/85 by Lindsey Spratt: Changed to use dm_fast_lock_alm_strucs instead
"	    of dm_fast_lock_strucs.
" 02/14/85 by Stanford S. Cox: Chg (lock unlock)_fast to guarantee eligibility.
" 03/25/85 by Stanford S. Cox:  Added copy_fast_data
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

	name	lock_manager_


	macro	gate_transfer
	segdef	&1
&1:
	getlp
	call6	&2
&end
	macro	transfer
	segdef	&1
&1:	getlp
	tra	&2
&end


	transfer		checkpoint,lm_firstref_tv_$checkpoint
	gate_transfer	copy_data,dm_admin_gate_$lm_copy_data
	gate_transfer	copy_fast_data,dm_admin_gate_$lm_copy_fast_data
	transfer		init_per_system,lm_per_system_init_$lm_per_system_init_
	transfer		lock,lm_firstref_tv_$lock
	transfer		lock_lock_data,lm_firstref_tv_$lock_lock_data
	transfer		per_process_init,lm_firstref_tv_$per_process_init
	gate_transfer	reset_system_meters,dm_admin_gate_$lm_reset_system_meters
	transfer		resolve_deadlock,lm_firstref_tv_$resolve_deadlock
	gate_transfer	system_segment_count,dm_admin_gate_$lm_system_segment_count
	transfer		unlock,lm_firstref_tv_$unlock
	transfer		unlock_all,lm_firstref_tv_$unlock_all
	transfer		unlock_lock_data,lm_firstref_tv_$unlock_lock_data
	transfer		unlock_to_checkpoint,lm_firstref_tv_$unlock_to_checkpoint
	transfer		user_shutdown,lm_firstref_tv_$user_shutdown
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	lock_fast
"
"	call lock_manager_$lock_fast (addr (lock_double_word), timeout_i, code_o)
"
"	Tries to lock with stac instruction.  Calls inner ring if stac fails.
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "

	segdef	lock_fast
lock_fast:
	getlp
	epp2	pr0|2,*			" pr2 -> lock word ptr
	epp2	pr2|0,*			" pr2 -> lock

	lda	pr4|process_id		" Get my process id.
	stac	pr2|fast_lock.lock_word	" If stac doesn't work,
	tnz	LF_CHECK_MYLOCK		" then check for mylock.


	stz	pr0|6,*			" Else set code_o = 0.
	call6	<dm_hcs_>|[guaranteed_eligibility_on]
" 	dm_hcs_ returns via return_ptr in lock_manager_ caller's stack frame
"	short_return			" That was easy.


LF_CHECK_MYLOCK:
	cmpa	pr2|fast_lock.lock_word	" If locked to this process
	tze	LF_MYLOCK_ERROR		" then warn the caller.

	tra	lm_firstref_tv_$lock_fast	" Else call inner ring.
	

LF_MYLOCK_ERROR:
	lda	dm_error_$fast_lock_mylock
	sta	pr0|6,*			" Return the error
	short_return
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	unlock_fast
"
"	call lock_manager_$unlock_fast (addr (lock_double_word), code_o)
"
"	Tries to unlock lock. Calls inner ring if notify switch set.
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "


	segdef	unlock_fast
unlock_fast:
	getlp
	epp2	pr0|2,*			" pr2 -> lock word ptr
	epp2	pr2|0,*			" pr2 -> lock

	lda	0,dl
	ldq	pr4|process_id		" Get my process id.
	stacq	pr2|fast_lock.lock_word	" Try to unlock
	tnz	UF_NOT_LOCKED

	lda	fast_lock.notify_sw,du
	cana	pr2|fast_lock.notify_sw_word	" Somebody wants notify?
	tnz	UF_RESET_NOTIFY_SW

	stz	pr0|4,*
	call6	<dm_hcs_>|[guaranteed_eligibility_off]
" 	dm_hcs_ returns via return_ptr in lock_manager_ caller's stack frame
"	short_return


UF_NOT_LOCKED:
	lda	dm_error_$fast_lock_not_locked
	sta	pr0|4,*			" Return error
	short_return


UF_RESET_NOTIFY_SW:
	era	=-1			" Reset notify switch.
	ansa	pr2|fast_lock.notify_sw_word

	tra	lm_firstref_tv_$notify_unlock	
"	PL/I does the rest, including calling dm_hcs_$guaranteed_eligibility_off
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
"
"	get_process_id
"
"	firstref	<*text>|get_process_id
"
"	This is the first reference trap procedure.
"	It gets the process id into the linkage section.
"
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "


get_process_id:
	getlp
	push

	ldaq	=v18/2,18/4,18/0,18/0
	staq	arg_list
	epp2	pr4|process_id
	spri2	arg_list+2

	call	get_process_id_$get_process_id_(arg_list)

	return

	firstref	<*text>|get_process_id



" AUTOMATIC  AUTOMATIC  AUTOMATIC  AUTOMATIC  AUTOMATIC  AUTOMATIC  AUTOMATIC

	tempd	arg_list(2)


" LINKAGE  LINKAGE  LINKAGE  LINKAGE  LINKAGE  LINKAGE  LINKAGE  LINKAGE

	use	linkage_section

process_id:
	oct	0

	join	/link/linkage_section
"
	include	dm_fast_lock_alm_strucs

	end
