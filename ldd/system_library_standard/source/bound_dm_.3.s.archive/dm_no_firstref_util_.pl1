/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/*  DESCRIPTION:

     This is a general repository for little programs for DMS which may
not have the DM first-reference trap sprung.  Its current residents are:

   set_journal_stamps:	allows manual setting of all time stamps
			in dm_journal_seg_ to an arbitrary time.
			intended for emergency use.  Invoked through
			dm_admin_gate_.

   terminate_dm:		uncombines the linkage section of all segments
			combined by the DM first-reference trap (e.g.,
			*_firstref_tv_).  This resets the fref trap
			and makes Data Management unavailable to the
			user until the fref taps are tripped again.
			Called as part of tm_$user_shutdown and should
			only be available in the DM ring.

   using_dm:		returns "1"b if Data Management is available
			(bound_dm_is_inner_ is initiated), else "0"b.

   get_log_path		returns the pathname of the DM system log.
*/

/*  HISTORY:
Written by Lee A. Newcomb, 01/07/83.
Modified:
03/07/83 by L. A. Newcomb: to terminate old_dm_system_data_ ref name.
04/23/83 by L. A. Newcomb:  changed the star-name used by
            find_old_bootload_dir to match new name created via
	  request_id_ subr.
04/26/83 by L. A. Newcomb:  Again fixed the starname used to find an old DMS
            bootload directory.
08/17/83 by M. Pandolf: to add set_journal_stamps and get_system_data.
11/29/83 by S. Herbst: to add terminate_dm and using_dm.
01/26/84 by S. Herbst: made $using_dm check that DM_SEGMENT_NAME's linkage
	  section has been combined.
05/11/84 by Lee A. Newcomb: to have $terminate_dm work for an unbound version
	  of DM by terminating single refname fm_'s, bjm_'s, and lm_'s
	  inner ring TV before terminating tm_firstref_tv_.
06/08/84 by Lindsey L. Spratt:  Added the *data_ modules to the list of
            refnames to be terminated by the $terminate_dm entry.  This is
            necessary to ensure that any per-process static data associated
            with these data segments is gotten rid of. Also, added the
	  dm_journal_seg_ and dm_aim_dir_util_ refnames to be explicitly
	  terminated.
06/12/84 by Lindsey L. Spratt:  Changed $terminate_dm to terminate all of the
            DM_SEGMENT_NAMES in all of the rings from get_ring_() to
            OUTERMOST_RING (7).
07/31/84 by Lee A. Newcomb:  added entries $get_daemon_logout_time,
	  $get_system_state, $get_user_bump_time, and
	  $get_user_shutdown_time.
09/27/84 by Lee A. Newcomb:  added the entries get_(begin_shutdown
            shutdown_warning)_time and fixed $get_user_shutdown_time to
	  not use dm_system_data_$initializer_shutdown_time which has
	  been renamed to $user_shutdown_time.
12/02/84 by Lindsey L. Spratt:  Removed the obsolete $get_system_data entry.
            Added $get_initialization_time.
12/03/84 by Stanford S. Cox: Chg refs from *inner_ring_tv_ to =firstref_tv_
12/05/84 by Lindsey L. Spratt:  Removed dm_aim_dir_util_ from the
            DM_SEGMENT_NAMES array as it's obsolete.  Made minor format
            changes.
12/07/84 by Lindsey L. Spratt:  Copied from dm_util_.  Removed all of the
            entries except using_dm, terminate_dm, and set_journal_stamps.
            The removed entries are in dm_firstref_util_.
12/07/84 by R. Michael Tague:  Changed $terminate_dm to wipe out
            dm_system_data_$initializer_processid if we are the Daemon.
02/07/85 by Steve Herbst: Added $get_log_path.
02/19/85 by Lindsey L. Spratt:  Changed $terminate_dm to use
            dm_misc_util_$is_using_dm to determine if DM is in use, rather
            than simply check if the tm_firstref_tv_ name could be found by
            $fs_get_seg_ptr.  Change $terminate_dm to use term_$nomakeunknown
            rather than term_$refname, so it only un-combines the linkages on
            the refernce names in DM_SEGMENT_NAMES.  Changed $is_using_dm to
            set the validation level to the ring of execution before checking
            that tm_firstref_tv_ has a combined linkage.
02/27/85 by Lindsey L. Spratt:  Removed lm_data_ from DM_SEGMENT_NAMES, since
            it resides in bound_dm_ (which is not to be terminated in any way
            by $terminate_dm).
04/11/85 by Lee A. Newcomb:  To also do a term_$nomakeunknown of
            dm_firstref_tv_.  Fixed to copy input paramter to
            $set_journal_stamps to local.  Changed some names to correspond
            to project standards.
05/10/85 by R. Michael Tague:  Removed all references to dm_journal_seg_ and
            replaced them with calls to dm_hcs_$(get_time_stamp n_journals).
*/

/* format: style2,ll79,ind3,^indprocbody,ifthendo,ifthen,^indnoniterdo,^inddcls,dclind5,idind35,linecom */
%page;
dm_no_firstref_util_$set_journal_stamps:
   proc (p_time, p_code);

/* START OF DECLARATIONS */

/* Parameter */
dcl  (
     p_log_path			char (*),		/* O: returned by $get_log_path */
     p_time			fixed bin (71),	/* I: new time for journal stamps */
     p_code			fixed bin (35)	/* O: normal error code, recovery fails if ^= 0 */
     )				parameter;

/* Automatic */
dcl  (
     aim_dir			char (168),	/* DM per-AIM directory pathname */
     code				fixed bin (35),	/* local error code holder */
     is_using_dm			bit (1) aligned init (NO),
     journal_ix			fixed bin,	/* index into dm_journal_seg_ */
     loop_index			fixed bin,	/* for general looping through arrays */
     lot_ptr			ptr,		/* ptr to its linkage offset table */
     new_journal_stamp_time		fixed bin (71) init (0),
						/* local copy of p_time */
     saved_level			fixed bin init (0), /* the validation level as set by this programs caller. */
     seg_ptr			ptr,		/* ptr to seg init'd with refname DM_SEGMENT_NAMES (4) */
     segno			fixed bin,	/* its segment number */
     validation_level		fixed bin init (0)
     )				automatic;

/* Builtin */
dcl  (addr, baseno, binary, dim, length, null, stackbaseptr)
				builtin;

/* Condition */
dcl  cleanup			condition;

/* Constant */
dcl  (
     DM_LOG_NAME			char (32) int static
				options (constant)
				init ("dm_system_log"),
     DM_SEGMENT_NAMES		char (32) dim (10)	/* all must be known to be using DM, */
				init ("bjm_firstref_tv_",
						/* tm_firstref_tv_ is used as the sentinel */
				"fm_firstref_tv_", "lm_firstref_tv_",
				"tm_firstref_tv_", "bjm_data_",
				"dm_data_", "dm_journal_seg_",
				"dm_system_data_", "fm_data_",
				"dm_firstref_tv_"),
     NO				init ("0"b) bit (1) aligned,
     YES				init ("1"b) bit (1) aligned,
     DM_JOURNAL_SEG_SEGNAME_IDX	init (7) fixed bin,
     DM_SYSTEM_DATA_SEGNAME_IDX	init (8) fixed bin,
     TM_FIRSTREF_TV_SEGNAME_IDX	init (4) fixed bin
     )				int static options (constant);

/* Entry */
dcl  (
     cu_$level_get			entry (fixed bin),
     cu_$level_set			entry (fixed bin),
     dm_hcs_$get_n_journals		entry () returns (fixed bin),
     dm_hcs_$get_journal_stamp	entry (fixed bin) returns (fixed bin (71)),
     dm_hcs_$set_journal_stamp	entry (fixed bin, fixed bin (71),
				fixed bin (35)),
     dm_misc_util_$get_aim_dir	entry (char (*)),
     dm_misc_util_$is_process_using_dm	entry () returns (bit (1) aligned),
     get_ring_			entry () returns (fixed bin (3)),
     get_process_id_		entry () returns (bit (36)),
     hcs_$fs_get_seg_ptr		entry (char (*), ptr, fixed bin (35)),
     pathname_			entry (char (*), char (*))
				returns (char (168)),
     term_$refname			entry (char (*), fixed bin (35)),
     term_$nomakeunknown		entry (ptr, fixed bin (35))
     )				external;

/* External */
dcl  (
     dm_error_$no_user_dm		fixed bin (35),
     dm_system_data_$initializer_processid
				bit (36) aligned
     )				external static;

/* END OF DECLARATIONS */
%page;
/* dm_no_firstref_util_$set_journal_stamps:	/* repeat for reader */
/*    proc (p_time, p_code);					*/

/* copy input parameter to local storage */
   new_journal_stamp_time = p_time;

/* set the time stamp on the journals only toward the future */

   do journal_ix = 1 to dm_hcs_$get_n_journals ();
      if dm_hcs_$get_journal_stamp (journal_ix) < new_journal_stamp_time then
         call dm_hcs_$set_journal_stamp (journal_ix, new_journal_stamp_time, p_code);
   end;

   return;

/* end dm_no_firstref_util_$set_journal_stamps; */
%page;
dm_no_firstref_util_$terminate_dm:
   entry (p_code);

/* DM_SEGMENT_NAMES can only be known the ring-of-execution.   */

   call cu_$level_get (saved_level);

   on cleanup call cu_$level_set (saved_level);

   call cu_$level_set (get_ring_ ());

   if ^dm_misc_util_$is_process_using_dm () then
      call TD_RETURN (dm_error_$no_user_dm);

   if dm_system_data_$initializer_processid = get_process_id_ () then
      dm_system_data_$initializer_processid = "0"b;

   do loop_index = 1 to dim (DM_SEGMENT_NAMES, 1);
      call hcs_$fs_get_seg_ptr (DM_SEGMENT_NAMES (loop_index), seg_ptr, code);

      if seg_ptr ^= null () then
         call term_$nomakeunknown (seg_ptr, code);

   end;

   call term_$refname (DM_SEGMENT_NAMES (DM_SYSTEM_DATA_SEGNAME_IDX), code);
   call term_$refname (DM_SEGMENT_NAMES (DM_JOURNAL_SEG_SEGNAME_IDX), code);

   call TD_RETURN (0);

TD_MAIN_RETURN:
   return;

TD_RETURN:
   proc (tdr_p_code);
dcl  tdr_p_code			fixed bin (35) parm;
   p_code = tdr_p_code;
   call cu_$level_set (saved_level);
   goto TD_MAIN_RETURN;
   end TD_RETURN;

/* end dm_no_firstref_util_$terminate_dm; */
%page;
dm_no_firstref_util_$using_dm:
   entry returns (bit (1) aligned);

/* NOTE: This code will have to be improved if it turns out that  */
/* DM_SEGMENT_NAMES can be known in rings other than the DM ring. */
/* See $terminate_dm for more info on DM_SEGMENT_NAMES usage.     */

   call cu_$level_get (saved_level);

   on cleanup call cu_$level_set (saved_level);

   call cu_$level_set (get_ring_ ());

   call hcs_$fs_get_seg_ptr (DM_SEGMENT_NAMES (TM_FIRSTREF_TV_SEGNAME_IDX),
        seg_ptr, 0);
   if seg_ptr = null then
      call UD_RETURN (NO);

   segno = binary (baseno (seg_ptr));
   lot_ptr = stackbaseptr () -> stack_header.lot_ptr;
   if baseno (lot_ptr -> lot.lp (segno)) ^= "0"b then
      call UD_RETURN (YES);
   else call UD_RETURN (NO);

UD_MAIN_RETURN:
   return (is_using_dm);

UD_RETURN:
   proc (udr_p_is_using_dm);
dcl  udr_p_is_using_dm		bit (1) aligned parm;
   is_using_dm = udr_p_is_using_dm;
   call cu_$level_set (saved_level);
   goto UD_MAIN_RETURN;
   end UD_RETURN;

/* end dm_no_firstref_util_$using_dm; */
%page;
dm_no_firstref_util_$get_log_path:
   entry (p_log_path);

   call dm_misc_util_$get_aim_dir (aim_dir);
   p_log_path = pathname_ (pathname_ (aim_dir, "logs"), DM_LOG_NAME);

   return;

/* end dm_no_firstref_util_$get_log_path; */
%page;
%include lot;
%page;
%include stack_header;
   end dm_no_firstref_util_$set_journal_stamps;
