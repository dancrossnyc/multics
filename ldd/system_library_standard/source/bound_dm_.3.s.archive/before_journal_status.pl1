/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION:

   before_journal_status - command level interface to bjm_get_journal_status.
   meant to supply information about a particular journal, about all journals
   opened in the caller's process, or about all journals opened in the system.
   no attempt is made to find unused journals.

   usage:
	bjst [JNL_PATH1 ... JNL_PATHn] [-long] [-brief] [-all]
*/

/* HISTORY:
Written by M. Pandolf, 04/01/83.
Modified:
07/01/83 by M. Pandolf: to process the -all control arg and to report
            size for -bf option
12/13/84 by R. Michael Tague: Fixed DESCRIPTION AND HISTORY section, made
            variables used in internal procedure declared locally, and fixed up
            because of audit comments.
12/17/84 by R. Michael Tague: Changed to use pathname_ to display bj pathname.
	  Fixed to:  not report activity information for an inactive before
	  journal,  not  output the  unsupported "earliest_meaningful_time"
	  (time  first  record  written),  use correct  parameter  names on
	  internal  procs, correctly  calculate n_ci_used  if the journal's
	  origin  is <=  current buffered  CI, and  free the  bj_status and
	  bj_global_meters structures  if cleanup is done;  also changed to
	  use init clauses on many automatic variables.
03/20/85 by S. Cox: Added dm_not_available_ handler, and ERROR_RETURN.
03/20/85 by Lee A. Newcomb:  To output per-transaction storage limit in brief
            info.
*/

/* format: style2 */
%page;
before_journal_status:
bjst:
     procedure () options (variable);

/* DECLARATIONS */

/* Automatic */

	dcl     area_ptr		 pointer init (null);
	dcl     arg_count		 fixed bin;
	dcl     arg_len		 fixed bin (21);
	dcl     arg_no		 fixed bin;
	dcl     arg_ptr		 pointer;
	dcl     bj_dir		 char (168) init ("");
	dcl     bj_entry		 char (32) init ("");
	dcl     bj_ix		 fixed bin init (0);
	dcl     code		 fixed bin (35) init (0);
	dcl     freeing_in_progress	 bit (1) aligned init (""b);
						/* for cleanup */
	dcl     last_ci_put_time	 char (20);
	dcl     last_ci_disk_time	 char (20);
	dcl     path_count		 fixed bin init (0);
	dcl     report_format	 fixed bin init (DEFAULT_FORMAT);
	dcl     journal_group	 char (8) init (PER_PROCESS);

/* Based */

	dcl     arg		 char (arg_len) based (arg_ptr);

/* Builtin */
	dcl     null		 builtin;
	dcl     substr		 builtin;
	dcl     unspec		 builtin;

/* Condition */

	dcl     (cleanup, dm_not_available_)
				 condition;

/* Constant */

	dcl     (
	        BRIEF_FORMAT	 init (-1),
	        DEFAULT_FORMAT	 init (0),
	        LONG_FORMAT		 init (1)
	        )			 fixed bin internal static options (constant);
	dcl     MY_NAME		 char (32) internal static options (constant) init ("before_journal_status");
	dcl     NOT_DONE		 char (20) internal static options (constant) init ("not yet performed");
	dcl     (
	        PER_PROCESS		 init ("process"),
	        PER_SYSTEM		 init ("system")
	        )			 char (8) internal static options (constant);

/* Entry */

	dcl     before_journal_manager_$get_journal_status
				 entry (char (*), char (*), ptr, ptr, ptr, fixed bin (35));
	dcl     com_err_		 entry () options (variable);
	dcl     cu_$arg_count	 entry (fixed bin, fixed bin (35));
	dcl     cu_$arg_ptr		 entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
	dcl     date_time_		 entry (fixed bin (71), char (*));
	dcl     expand_pathname_$add_suffix
				 entry (char (*), char (*), char (*), char (*), fixed bin (35));
	dcl     get_dm_free_area_	 entry () returns (ptr);
	dcl     ioa_		 entry () options (variable);
	dcl     pathname_		 entry (char (*), char (*)) returns (char (168));

/* External */

	dcl     dm_error_$system_not_initialized
				 fixed bin (35) ext static;
	dcl     error_table_$bad_arg	 fixed bin (35) ext static;

/* END DECLARATIONS */
%page;
	on dm_not_available_
	     begin;
		call com_err_ (dm_error_$system_not_initialized, MY_NAME);
		call ERROR_RETURN;
	     end;

/* make a quick run through the arg list looking for control args */

	call cu_$arg_count (arg_count, code);
	if code ^= 0
	then do;
		call com_err_ (code, MY_NAME);
		call ERROR_RETURN;
	     end;

/* analyze the args, by validating control args and counting journal paths */

	do arg_no = 1 to arg_count;
	     call cu_$arg_ptr (arg_no, arg_ptr, arg_len, code);
	     if (arg = "-long") | (arg = "-lg")
	     then report_format = LONG_FORMAT;
	     else if (arg = "-brief") | (arg = "-bf")
	     then report_format = BRIEF_FORMAT;
	     else if (arg = "-all") | (arg = "-a")
	     then journal_group = PER_SYSTEM;
	     else if substr (arg, 1, 1) = "-"
	     then do;
		     call com_err_ (error_table_$bad_arg, MY_NAME, "^/The argument is ""^a"".", arg);
		     call ERROR_RETURN;
		end;
	     else path_count = path_count + 1;
	end;

/* make a second pass through the args looking for path names */

	area_ptr = get_dm_free_area_ ();
	bj_status_ptr, bj_global_meters_ptr = null ();
	on cleanup call CLEAN_UP ();

	if path_count < 1				/* user wants active journals summary */
	then do;
		call before_journal_manager_$get_journal_status ("", journal_group, area_ptr, bj_status_ptr,
		     bj_global_meters_ptr, code);
		if code ^= 0
		then do;
			call com_err_ (code, MY_NAME);
			call ERROR_RETURN;
		     end;
		else do bj_ix = 1 to bj_status.n_journals;
			call PRINT_ONE_JOURNAL (bj_ix);
		     end;
		if bj_status.n_journals = 0
		then call ioa_ ("There are no journals currently being used.");
		freeing_in_progress = "1"b;
		free bj_status_ptr -> bj_status;
		free bj_global_meters_ptr -> bj_global_meters;
		bj_status_ptr, bj_global_meters_ptr = null ();
		freeing_in_progress = ""b;
	     end;
	else do arg_no = 1 to arg_count;
		call cu_$arg_ptr (arg_no, arg_ptr, arg_len, code);
		if substr (arg, 1, 1) ^= "-"
		then do;

			call expand_pathname_$add_suffix (arg, "bj", bj_dir, bj_entry, code);
			if code ^= 0
			then do;
INVALID_JOURNAL_ARG:
				call com_err_ (code, MY_NAME, "^/Supplied journal pathname is ""^a"".", arg);
				call ERROR_RETURN;
			     end;

			call before_journal_manager_$get_journal_status (bj_dir, bj_entry, area_ptr, bj_status_ptr,
			     bj_global_meters_ptr, code);
			if code ^= 0
			then goto INVALID_JOURNAL_ARG;
			else do;
				call PRINT_ONE_JOURNAL (1);
				freeing_in_progress = "1"b;
				free bj_status_ptr -> bj_status;
				free bj_global_meters_ptr -> bj_global_meters;
				bj_status_ptr, bj_global_meters_ptr = null ();
				freeing_in_progress = ""b;
			     end;

		     end;
	     end;
MAIN_RETURN:
	return;
%skip;
ERROR_RETURN:
     proc ();

	goto MAIN_RETURN;
     end;
%page;
PRINT_ONE_JOURNAL:
     procedure (poj_p_status_index);

	dcl     poj_p_status_index	 fixed bin;

	dcl     poj_index		 fixed bin;
	dcl     poj_first_record_time	 char (20);
	dcl     poj_header_update_time char (20);
	dcl     poj_n_ci_used	 fixed bin (35);


	poj_index = poj_p_status_index;

PRINT_BRIEF_INFORMATION:
	do;
	     call ioa_ ("^/pathname:^31t^a^/journal uid:^31t^12.3b^/activity:^31t^[not ^]in use",
		pathname_ ((bj_status.journal (poj_index).dir), (bj_status.journal (poj_index).entry)),
		bj_status.system_info (poj_index).bj_uid, ^bj_status.system_info (poj_index).active);

	     call ioa_ ("control interval size:^31t^i bytes^/control intervals:^31t^i",
		bj_status.system_info (poj_index).ci_size, bj_status.system_info (poj_index).max_size);
	     call ioa_ ("transaction storage limit:^31t^i bytes", bj_status.system_info (poj_index).txn_storage_limit);
	end PRINT_BRIEF_INFORMATION;


	if report_format ^= BRIEF_FORMAT & bj_status.system_info (poj_index).active
	then
PRINT_DEFAULT_INFORMATION_NEXT:
	     do;

		if bj_status.system_info (poj_index).last_ci_buffered >= bj_status.system_info (poj_index).origin_ci
		then poj_n_ci_used =
			bj_status.system_info (poj_index).last_ci_buffered
			- bj_status.system_info (poj_index).origin_ci + 1;
		else poj_n_ci_used =
			(bj_status.system_info (poj_index).highest_ci - bj_status.system_info (poj_index).origin_ci)
			+ 1 + bj_status.system_info (poj_index).last_ci_buffered;

		call ioa_ ("control intervals used:^31t^i", poj_n_ci_used);

		call ioa_ (
		     "last control interval^/^11tbuffered:^31t^i^/^11tput:^31t^i^/^11tflushed:^31t^i^/^11ton disk:^31t^i",
		     unspec (bj_status.system_info (poj_index).last_ci_buffered),
		     unspec (bj_status.system_info (poj_index).last_ci_put),
		     unspec (bj_status.system_info (poj_index).last_ci_flushed),
		     unspec (bj_status.system_info (poj_index).last_ci_on_disk));
	     end PRINT_DEFAULT_INFORMATION_NEXT;

	if report_format = LONG_FORMAT
	then
PRINT_LONG_FORMAT_INFORMATION:
	     do;

		if bj_status.system_info (poj_index).time_header_updated = 0
		then poj_header_update_time = NOT_DONE;
		else call date_time_ (bj_status.system_info (poj_index).time_header_updated, poj_header_update_time);

		if bj_status.system_info (poj_index).active
		then do;
			if bj_status.system_info (poj_index).stamp_for_last_ci_put = 0
			then last_ci_put_time = NOT_DONE;
			else call date_time_ (bj_status.system_info (poj_index).stamp_for_last_ci_put,
				last_ci_put_time);

			if bj_status.system_info (poj_index).stamp_for_last_ci_on_disk = 0
			then last_ci_disk_time = NOT_DONE;
			else call date_time_ (bj_status.system_info (poj_index).stamp_for_last_ci_on_disk,
				last_ci_disk_time);

			call ioa_ ("time last control interval^/^11tqueued:^31t^20a^/^11twritten:^31t^20a",
			     last_ci_put_time, last_ci_disk_time);
		     end;

		call ioa_ ("time header updated:^31t^20a", poj_header_update_time);
		if bj_status.system_info (poj_index).active
		then do;
			call ioa_ ("last record id:^31t^12.3b", bj_status.system_info (poj_index).last_rec_id);

			call ioa_ ("images not on disk:^31t^i^/images being flushed:^31t^i",
			     bj_status.system_info (poj_index).n_bi_still_unsafe,
			     bj_status.system_info (poj_index).n_bi_being_saved);

			call ioa_ ("users:^31t^i^/transactions:^31t^i",
			     bj_status.system_info (poj_index).n_processes, bj_status.system_info (poj_index).n_txn)
			     ;
		     end;
	     end PRINT_LONG_FORMAT_INFORMATION;

	return;

     end PRINT_ONE_JOURNAL;
%page;
CLEAN_UP:
     proc ();

/* Try to free the bj_status and bj_global_meters structures.  */
/* If the freeing_in_progress indicator is on, then we do      */
/* nothing so as to not attempt a double free.		   */

	if ^freeing_in_progress
	then do;
		if bj_status_ptr ^= null ()
		then free bj_status;
		if bj_global_meters_ptr ^= null ()
		then free bj_global_meters;
	     end;

     end CLEAN_UP;
%page;
%include dm_bj_status;
%page;
%include dm_bj_pst;
%page;
%include dm_bj_pste;


     end before_journal_status;
