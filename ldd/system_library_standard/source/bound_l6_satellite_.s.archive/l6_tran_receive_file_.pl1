/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
/*****************************************************************************/
/*							       */
/*   DESCRIPTION:						       */
/*							       */
/*        This subroutine does all the work necessary to receive a file from */
/*   the Level 6.  It is used by the l6_tran_ NASP and l6_tran_overseer_.    */
/*							       */
/*							       */
/*   JOURNALIZATION:					       */
/*							       */
/*   1) Written 5/82 by R.J.C. Kissel.				       */
/*   2) Modified 7/83 by R.J.C. Kissel to fix an error message sent to the L6*/
/*							       */
/*****************************************************************************/

/* format: style3,linecom,ifthenstmt,indthenelse,^indnoniterdo,indnoniterend,initcol3,dclind5,idind32 */

l6_tran_receive_file_:
     proc (P_input_args_ptr, P_output_args_ptr, P_error_message, P_code);

/* Parameters */

dcl  P_input_args_ptr	       ptr parameter;
dcl  P_output_args_ptr	       ptr parameter;
dcl  P_error_message	       char (*) varying parameter;
dcl  P_code		       fixed bin (35) parameter;

/* Automatic */

dcl  comm_buffer		       char (comm_buffer_len) based (comm_buffer_ptr);
dcl  comm_buffer_len	       fixed bin (21);
dcl  comm_buffer_ptr	       ptr;
dcl  comm_buffer_position	       fixed bin (21);

dcl  char_position_in_tu	       fixed bin (21);
dcl  code			       fixed bin (35);
dcl  end_of_file		       bit (1);

dcl  file_buffer		       char (file_buffer_len) based (file_buffer_ptr);
dcl  file_buffer_len	       fixed bin (21);
dcl  file_buffer_ptr	       ptr;

dcl  last_file		       bit (1);

dcl  level_6_chars_read	       fixed bin (21);
dcl  level_6_chars_to_write	       fixed bin (21);
dcl  level_6_iocbp		       ptr;

dcl  multics_chars_to_write	       fixed bin (21);
dcl  multics_data_type	       fixed bin;
dcl  multics_file_iocbp	       ptr;
dcl  multics_file_type	       fixed bin;

dcl  next_transmission_unit	       fixed bin;

dcl  1 prompt		       aligned,
       2 prompt_char	       char (1) unaligned init ("P"),
       2 record_number	       pic "99999" unaligned;

dcl  record_number		       fixed bin;
dcl  total_bytes		       fixed bin (35);
dcl  tu_size		       fixed bin (21);

/* Internal Constants */

%include l6_tran_constants;

/* External Constants */

dcl  error_table_$unimplemented_version
			       fixed bin (35) ext static;
dcl  error_table_$fatal_error	       fixed bin (35) ext static;

/* External Entries */

dcl  cu_$arg_count		       entry (fixed bin, fixed bin (35));
dcl  cu_$arg_list_ptr	       entry (ptr);
dcl  cu_$arg_ptr		       entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl  cv_dec_		       entry (char (*)) returns (fixed bin (35));
dcl  cv_dec_check_		       entry (char (*), fixed bin (35)) returns (fixed bin (35));
dcl  ioa_$general_rs	       entry (ptr, fixed bin, fixed bin, char (*), fixed bin (21), bit (1) aligned,
			       bit (1) aligned);
dcl  ioa_$rsnpnnl		       entry options (variable);
dcl  iox_$write_record	       entry (ptr, ptr, fixed bin (21), fixed bin (35));
dcl  l6_tran_util_$get_chars	       entry (ptr, ptr, fixed bin (21), fixed bin (21), fixed bin (35));
dcl  l6_tran_util_$put_chars	       entry (ptr, ptr, fixed bin (21), fixed bin (35));

/* Builtin Functions and Conditions */

dcl  copy			       builtin;
dcl  index		       builtin;
dcl  length		       builtin;
dcl  min			       builtin;
dcl  null			       builtin;
dcl  string		       builtin;
dcl  substr		       builtin;
dcl  verify		       builtin;

/* Include Files */

%include l6_tran_transfer_args;

	level_6_iocbp = null ();			/* Initialize these in case of error. */
	comm_buffer_ptr = null ();

	tiap = P_input_args_ptr;
	toap = P_output_args_ptr;

	if transfer_input_args.version ^= transfer_input_args_version_1
	     then call ERROR (error_table_$unimplemented_version, "The input args version was ^a, expected ^a.",
		     transfer_input_args.version, transfer_input_args_version_1);

	if transfer_output_args.version ^= transfer_output_args_version_1
	     then call ERROR (error_table_$unimplemented_version, "The output args version was ^a, expected ^a.",
		     transfer_output_args.version, transfer_output_args_version_1);

	level_6_iocbp = transfer_input_args.comm_iocbp;
	comm_buffer_ptr = transfer_input_args.comm_buffer_ptr;
	comm_buffer_len = transfer_input_args.comm_buffer_len;
	multics_file_iocbp = transfer_input_args.file_iocbp;
	file_buffer_ptr = transfer_input_args.file_buffer_ptr;
	file_buffer_len = transfer_input_args.file_buffer_len;
	multics_file_type = transfer_input_args.file_type;
	multics_data_type = transfer_input_args.data_type;
	tu_size = transfer_input_args.tu_size;
	total_bytes = 0;

	comm_buffer_position = 1;			/* Set this for Receive_L6_Record */
	char_position_in_tu = 1;			/* Set this for Receive_L6_Record */
	level_6_chars_read = 0;			/* Set this for Receive_L6_Record */
	next_transmission_unit = 0;			/* Set this for Receive_L6_Record */

/* Send the initial prompt for record 0. */

	prompt.record_number = 0;
	level_6_chars_to_write = length (string (prompt));
	substr (comm_buffer, 1, level_6_chars_to_write) = string (prompt);

	call l6_tran_util_$put_chars (level_6_iocbp, comm_buffer_ptr, level_6_chars_to_write, code);
	if code ^= 0 then call ERROR (code, "Trying to write the first prompt to the Level 6.");

/* Receive records until we find end of file (returned after the last record is read). */

	call Receive_L6_Record (record_number, end_of_file, last_file);

/* A level 6 null line has whitespace in it.  If we get a whitespace record, write a null line to the Multics file. */

	if multics_file_type = UNSTRUCTURED_FILE_TYPE & multics_data_type = ASCII
	     & verify (substr (file_buffer, 1, multics_chars_to_write), SP || HT) = 0
	     then multics_chars_to_write = 0;

	do while (^end_of_file);

	     call iox_$write_record (multics_file_iocbp, file_buffer_ptr, multics_chars_to_write, code);
	     if code ^= 0 then call ERROR (code, "Trying to write record ^d to the multics file.", record_number);

	     total_bytes = total_bytes + multics_chars_to_write;

	     call Receive_L6_Record (record_number, end_of_file, last_file);

/* A level 6 null line has whitespace in it.  If we get a record of just whitespace, write a null line to the Multics file. */

	     if multics_file_type = UNSTRUCTURED_FILE_TYPE & multics_data_type = ASCII
		& verify (substr (file_buffer, 1, multics_chars_to_write), SP || HT) = 0
		then multics_chars_to_write = 0;

	end;

/* Send the final prompt for the last record we got.  The L6 wants the # of records, not the # of the last record. */

	prompt.record_number = min (99999, record_number + 1);
	level_6_chars_to_write = length (string (prompt));
	substr (comm_buffer, 1, level_6_chars_to_write) = string (prompt);

	call l6_tran_util_$put_chars (level_6_iocbp, comm_buffer_ptr, level_6_chars_to_write, code);
	if code ^= 0 then call ERROR (code, "Trying to write the final prompt to the Level 6.");

	transfer_output_args.record_number = record_number;
	transfer_output_args.total_bytes = total_bytes;
	transfer_output_args.last_file = last_file;
	P_error_message = "";
	P_code = 0;

RETURN:
	return;

Receive_L6_Record:
     proc (P_record_number, P_end_of_file, P_last_file);

dcl  P_record_number	       fixed bin;
dcl  P_end_of_file		       bit (1) parameter;
dcl  P_last_file		       bit (1) parameter;

dcl  code			       fixed bin (35);
dcl  current_char		       char (1);
dcl  current_digit		       fixed bin;
dcl  data_chars_available	       fixed bin;
dcl  data_field_len		       char (2);
dcl  data_is_packed		       bit (1);
dcl  end_of_file		       bit (1);
dcl  end_of_record		       bit (1);
dcl  file_buffer_position	       fixed bin (21);
dcl  fixed_data_field_len	       fixed bin;
dcl  last_file		       bit (1);

dcl  1 l6_error		       aligned based (comm_buffer_ptr),
       2 first_char		       char (1) unaligned,	/* Should be "C". */
       2 second_char	       char (1) unaligned,	/* Should be "U". */
       2 message_len	       pic "99" unaligned,
       2 message		       char (0 refer (l6_error.message_len)) unaligned;

dcl  media_code		       fixed bin;
dcl  read_record_state	       fixed bin;
dcl  record_number		       char (5);

/* Set initial parser state variables. */

	file_buffer_position = 1;
	read_record_state = 1;
	current_digit = 1;

/* Now parse the record, getting more characters as needed. */

	last_file = "0"b;

	end_of_file = "0"b;
	end_of_record = "0"b;
	do while (^end_of_file & ^end_of_record);

	     if comm_buffer_position > level_6_chars_read
		then do;				/* Get some more characters to process. */
		     call l6_tran_util_$get_chars (level_6_iocbp, comm_buffer_ptr, comm_buffer_len,
			level_6_chars_read, code);
		     if code ^= 0 then call ERROR (code, "Trying to get characters for a record.");

		     comm_buffer_position = 1;
		     end;				/* Get some more characters to process. */

	     current_char = substr (comm_buffer, comm_buffer_position, 1);

	     if char_position_in_tu = tu_size + 1 | char_position_in_tu = 1
		then do;				/* Special transmission unit character. */
		     char_position_in_tu = 1;

		     if current_char = "C"
			then call ERROR (error_table_$fatal_error, "Error from the Level 6: ^a.", l6_error.message);

		     if cv_dec_ (current_char) ^= next_transmission_unit then ;
						/* Something wrong, but keep going. */

		     next_transmission_unit = next_transmission_unit + 1;
		     comm_buffer_position = comm_buffer_position + 1;
		     char_position_in_tu = char_position_in_tu + 1;

		     goto NEXT_STATE;
		     end;				/* Special transmission unit character. */

	     goto RECORD_PARSER (read_record_state);

RECORD_PARSER (1):					/* Process the media code or end of file */
	     if current_char = "E"
		then do;
		     end_of_file = "1"b;
		     last_file = "1"b;
		     end;

	     else if current_char = "F"
		then do;
		     end_of_file = "1"b;
		     last_file = "0"b;
		     end;

	     else media_code = index (string (L6_DATA_TYPE), current_char);

	     comm_buffer_position = comm_buffer_position + 1;
						/* Take any media code. */
	     char_position_in_tu = char_position_in_tu + 1;
	     read_record_state = 2;

	     goto NEXT_STATE;

RECORD_PARSER (2):					/* Process the digits of the record number */
	     substr (record_number, current_digit, 1) = current_char;

	     comm_buffer_position = comm_buffer_position + 1;
	     current_digit = current_digit + 1;
	     char_position_in_tu = char_position_in_tu + 1;

	     if current_digit <= length (record_number)
		then read_record_state = 2;
		else do;
		     current_digit = 1;
		     read_record_state = 3;
		     end;

	     goto NEXT_STATE;

RECORD_PARSER (3):					/* Process packed (P), unpacked (U), or end of record (R) */
	     if current_char = "P" then data_is_packed = "1"b;

	     else if current_char = "U" then data_is_packed = "0"b;

	     else if current_char = "R" then end_of_record = "1"b;

	     else do;				/* Assume end of record */
		end_of_record = "1"b;
		goto NEXT_STATE;			/* Don't advance buffer position */
		end;

	     comm_buffer_position = comm_buffer_position + 1;
	     char_position_in_tu = char_position_in_tu + 1;
	     read_record_state = 4;

	     goto NEXT_STATE;

RECORD_PARSER (4):					/* Process the digits of the data field length */
	     substr (data_field_len, current_digit, 1) = current_char;

	     comm_buffer_position = comm_buffer_position + 1;
	     current_digit = current_digit + 1;
	     char_position_in_tu = char_position_in_tu + 1;

	     if current_digit <= length (data_field_len)
		then read_record_state = 4;
		else do;
		     current_digit = 1;

		     fixed_data_field_len = cv_dec_check_ (data_field_len, code);
		     if code ^= 0 then fixed_data_field_len = 0;

		     code = 0;
		     read_record_state = 5;
		     end;

	     goto NEXT_STATE;

RECORD_PARSER (5):					/* Process a data field, we may not have it all. */
	     if data_is_packed
		then do;
		     substr (file_buffer, file_buffer_position, fixed_data_field_len) =
			copy (current_char, fixed_data_field_len);
		     file_buffer_position = file_buffer_position + fixed_data_field_len;
		     comm_buffer_position = comm_buffer_position + 1;
		     char_position_in_tu = char_position_in_tu + 1;

		     read_record_state = 3;
		     end;

		else do;
		     data_chars_available = min (fixed_data_field_len, level_6_chars_read - comm_buffer_position + 1);

		     substr (file_buffer, file_buffer_position, data_chars_available) =
			substr (comm_buffer, comm_buffer_position, data_chars_available);
		     file_buffer_position = file_buffer_position + data_chars_available;
		     comm_buffer_position = comm_buffer_position + data_chars_available;
		     char_position_in_tu = char_position_in_tu + data_chars_available;

		     fixed_data_field_len = fixed_data_field_len - data_chars_available;

		     if fixed_data_field_len <= 0
			then read_record_state = 3;	/* done with the data. */
			else read_record_state = 5;	/* more unpacked data. */
		     end;

	     goto NEXT_STATE;

NEXT_STATE:
	end;					/* Parser loop */

	multics_chars_to_write = file_buffer_position - 1;

	P_last_file = last_file;
	P_end_of_file = end_of_file;			/* Only eof or eor may be set, not both. */
	P_record_number = cv_dec_check_ (record_number, code);
	if code ^= 0 then P_record_number = 0;

	return;

     end Receive_L6_Record;

/*****************************************************************************/
/*							       */
/*   PROCEDURE: ERROR					       */
/*							       */
/*   This subroutine expects arguments as follows:		       */
/*							       */
/*         call ERROR (code, ioa_control_string, ioa_arguments, ...)	       */
/*							       */
/*   where: code is fixed bin (35), and ioa_control_string and ioa_arguments */
/*          are optional character strings as defined for ioa_.	       */
/*							       */
/*   Some global variables are used:				       */
/*							       */
/*   	Cleanup_Handler (a procedure that does cleanup)		       */
/*							       */
/*     For commands:					       */
/*   	report_error (an entry variable set to com_err_ or active_fnc_err_)*/
/*   	command_name (the character string name of the command)	       */
/*	return_arg_ptr (used to return "false" for active functions)       */
/*							       */
/*     For subroutines:					       */
/*	depends on the error reporting strategy chosen.		       */
/*							       */
/*   At completion a non-local goto is done to the label RETURN.	       */
/*							       */
/*   Declarations are expected for:				       */
/*							       */
/*   	cu_$arg_list_ptr					       */
/*   	cu_$arg_ptr					       */
/*   	cu_$arg_count					       */
/*   	error_table_$fatal_error				       */
/*   	ioa_$general_rs					       */
/*							       */
/*****************************************************************************/

ERROR:
     proc () options (variable, non_quick);

dcl  arg_list_ptr		       ptr;
dcl  arg_len		       fixed bin (21);
dcl  arg_ptr		       ptr;
dcl  based_code		       fixed bin (35) based;
dcl  caller_code		       fixed bin (35);
dcl  code			       fixed bin (35);
dcl  err_msg		       char (256);
dcl  err_msg_len		       fixed bin (21);
dcl  nargs		       fixed bin;

	call cu_$arg_count (nargs, code);		/* IGNORE CODE */

	if nargs >= 1
	     then do;				/* We were called correctly. */
		arg_ptr = null ();			/* Set this so we know if cu_$arg_ptr worked. */
		call cu_$arg_ptr (1, arg_ptr, arg_len, code);

		if arg_ptr ^= null ()
		     then caller_code = arg_ptr -> based_code;
						/* The normal case. */
		     else caller_code = error_table_$fatal_error;
						/* Some problem with our arg list. */

		if nargs > 1
		     then do;			/* There is a message. */
			call cu_$arg_list_ptr (arg_list_ptr);
			call ioa_$general_rs (arg_list_ptr, 2, 3, err_msg, err_msg_len, "1"b, "0"b);
			end;

		     else do;			/* No message. */
			err_msg = "";
			err_msg_len = 0;
			end;
		end;				/* We were called correctly. */

	     else do;				/* We were called with no arguments. */
		caller_code = error_table_$fatal_error; /* The best we can do. */
		err_msg = "";
		err_msg_len = 0;
		end;				/* We were called with no arguments. */

/* The following lines must be modified depending on the error reporting strategy used. */

	if level_6_iocbp ^= null () & comm_buffer_ptr ^= null ()
	     then do;				/* Tell the Level 6. */

dcl  pic_err_msg_len	       pic "99";

		pic_err_msg_len = min (99, err_msg_len);

		call ioa_$rsnpnnl ("CU^a^aR ", comm_buffer, level_6_chars_to_write, pic_err_msg_len,
		     substr (err_msg, 1, pic_err_msg_len));

		call l6_tran_util_$put_chars (level_6_iocbp, comm_buffer_ptr, level_6_chars_to_write, code);
		end;

	P_error_message = substr (err_msg, 1, err_msg_len);
	P_code = caller_code;

/* Clean up and do a non-local goto back to the outermost block. */

	call Cleanup_Handler ();
	goto RETURN;

     end ERROR;

Cleanup_Handler:
     proc ();

	return;					/* Nothing to do for now. */

     end Cleanup_Handler;

     end l6_tran_receive_file_;
