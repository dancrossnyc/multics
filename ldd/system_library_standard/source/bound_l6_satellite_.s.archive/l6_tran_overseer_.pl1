/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
/*****************************************************************************/
/*							       */
/*   DESCRIPTION:						       */
/*							       */
/*        This subroutine is the server for file transfer to or from the     */
/*   Level 6 over an X.25 connection.  It is implemented as a process	       */
/*   overseer so that the answering service can do all of the hard work of   */
/*   making the connection.  This server corresponds to the NASP, l6_tran_,  */
/*   which does the Multics initiated side of the file transfer.	       */
/*							       */
/*							       */
/*   JOURNALIZATION:					       */
/*							       */
/*   1) Written 5/82 by R.J.C Kissel				       */
/*   2) Modified 7/83 by R.J.C. Kissel to fix an error message sent to the L6*/
/*   3) Modified 7/83 by R.J.C. Kissel to fix an error in terminating the    */
/*      process.						       */
/*							       */
/*****************************************************************************/

/* format: style3,linecom,ifthenstmt,indthenelse,^indnoniterdo,indnoniterend,initcol3,dclind5,idind32 */

l6_tran_overseer_:
     proc (P_pit_ptr, P_call_listener, P_with_command_line);

/* Parameters */

dcl  P_pit_ptr		       ptr parameter;
dcl  P_call_listener	       bit (1) aligned parameter;
dcl  P_with_command_line	       char (*) varying parameter;

/* Automatic */

dcl  P_error_message	       char (256) varying;	/* Needed by ERROR, but never used. */
dcl  P_code		       fixed bin (35);	/* Needed by ERROR, but never used. */

dcl  1 auto_status_branch	       aligned like status_branch;
dcl  1 auto_transfer_input_args      aligned like transfer_input_args;
dcl  1 auto_transfer_output_args     aligned like transfer_output_args;

dcl  based_area		       area (sys_info$max_seg_size) based (area_ptr);
dcl  area_ptr		       ptr;

dcl  code			       fixed bin (35);

dcl  comm_buffer		       char (comm_buffer_len) based (comm_buffer_ptr);
dcl  comm_buffer_len	       fixed bin (21);
dcl  comm_buffer_ptr	       ptr defined (temp_seg_ptrs (1));

dcl  file_buffer		       char (file_buffer_len) based (file_buffer_ptr);
dcl  file_buffer_len	       fixed bin (21);
dcl  file_buffer_ptr	       ptr defined (temp_seg_ptrs (2));

dcl  i			       fixed bin;
dcl  ignored_len		       fixed bin (21);	/* Used in calls to ioa_$rsnnl. */
dcl  last_file		       bit (1);

dcl  level_6_chars_read	       fixed bin (21);
dcl  level_6_chars_to_write	       fixed bin (21);
dcl  level_6_data_type	       fixed bin;
dcl  level_6_dir		       char (168);
dcl  level_6_entry		       char (32);
dcl  level_6_file_type	       fixed bin;
dcl  level_6_iocbp		       ptr;
dcl  level_6_max_record_size	       fixed bin;
dcl  level_6_pathname	       char (168);

dcl  1 logout_string	       aligned,		/* information about logouts */
       2 version		       fixed bin,		/* this is version 0 */
       2 hold		       bit (1) unaligned,	/* don't hangup line */
       2 brief		       bit (1) unaligned,	/* don't print logout message */
       2 pad		       bit (34) unaligned;	/* must be zero */

dcl  multics_chars_read	       fixed bin (21);
dcl  multics_chars_to_write	       fixed bin (21);
dcl  multics_data_type	       fixed bin;
dcl  multics_dir		       char (168);
dcl  multics_entry		       char (32);

dcl  multics_file_attach_desc	       char (256) varying;
dcl  multics_file_block_size	       fixed bin (21);
dcl  multics_file_exists	       bit (1);
dcl  multics_file_iocbp	       ptr;
dcl  multics_file_l6_type	       fixed bin;
dcl  multics_file_type	       fixed bin;
dcl  multics_file_open_mode	       fixed bin;
dcl  multics_file_size	       fixed bin (34);

dcl  multics_is_sender	       bit (1);
dcl  multics_pathname	       char (168);

dcl  saved_level_6_entry	       char (32);
dcl  saved_multics_entry	       char (32);
dcl  star_area_ptr		       ptr;
dcl  star_entries_index	       fixed bin;
dcl  star_names_generated	       bit (1);
dcl  suffix		       char (32);
dcl  temp_seg_ptrs		       (2) ptr;
dcl  term_structure_ptr	       ptr;

dcl  1 info		       aligned like indx_info;/* Use the biggest structure. */

/* Internal Constants */

dcl  REL_SECONDS		       bit (2) internal static options (constant) init ("11"b);

%include l6_tran_constants;

/* Internal Static */

dcl  debug_flag		       bit (1) internal static init ("0"b);

/* External Constants */

dcl  error_table_$bad_file	       fixed bin (35) ext static;
dcl  error_table_$badstar	       fixed bin (35) ext static;
dcl  error_table_$dirseg	       fixed bin (35) ext static;
dcl  error_table_$fatal_error	       fixed bin (35) ext static;
dcl  error_table_$not_closed	       fixed bin (35) ext static;
dcl  error_table_$not_detached       fixed bin (35) ext static;

dcl  sys_info$max_seg_size	       fixed bin (19) ext static;

/* External Entries */

dcl  add_char_offset_	       entry (ptr, fixed bin (21)) returns (ptr) reducible;
dcl  check_star_name_$entry	       entry (char (*), fixed bin (35));
dcl  cu_$arg_count		       entry (fixed bin, fixed bin (35));
dcl  cu_$arg_list_ptr	       entry (ptr);
dcl  cu_$arg_ptr		       entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl  expand_pathname_	       entry (char (*), char (*), char (*), fixed bin (35));
dcl  get_equal_name_	       entry (char (*), char (*), char (32), fixed bin (35));
dcl  get_user_free_area_	       entry () returns (ptr);
dcl  get_temp_segments_	       entry (char (*), (*) ptr, fixed bin (35));
dcl  hcs_$append_branch	       entry (char (*), char (*), fixed bin (5), fixed bin (35));
dcl  hcs_$star_		       entry (char (*), char (*), fixed bin (2), ptr, fixed bin, ptr, ptr, fixed bin (35));
dcl  hcs_$status_		       entry (char (*), char (*), fixed bin (1), ptr, ptr, fixed bin (35));
dcl  ioa_$general_rs	       entry (ptr, fixed bin, fixed bin, char (*), fixed bin (21), bit (1) aligned,
			       bit (1) aligned);
dcl  ioa_$rsnnl		       entry () options (variable);
dcl  ioa_$rsnpnnl		       entry options (variable);
dcl  l6_tran_util_$get_chars	       entry (ptr, ptr, fixed bin (21), fixed bin (21), fixed bin (35));
dcl  l6_tran_util_$put_chars	       entry (ptr, ptr, fixed bin (21), fixed bin (35));
dcl  l6_tran_receive_file_	       entry (ptr, ptr, char (*) var, fixed bin (35));
dcl  l6_tran_send_file_	       entry (ptr, ptr, char (*) var, fixed bin (35));
dcl  match_star_name_	       entry (char (*), char (*), fixed bin (35));
dcl  pathname_		       entry (char (*), char (*)) returns (char (168));
dcl  release_temp_segments_	       entry (char (*), (*) ptr, fixed bin (35));
dcl  suffixed_name_$make	       entry (char (*), char (*), char (32), fixed bin (35));
dcl  terminate_process_	       entry (char (*), ptr);
dcl  timer_manager_$sleep	       entry (fixed bin (71), bit (2));
dcl  vfile_status_		       entry (char (*), char (*), ptr, fixed bin (35));

/* Builtin Functions and Conditions */

dcl  addr			       builtin;
dcl  before		       builtin;
dcl  hbound		       builtin;
dcl  index		       builtin;
dcl  lbound		       builtin;
dcl  length		       builtin;
dcl  min			       builtin;
dcl  null			       builtin;
dcl  pointer		       builtin;
dcl  reverse		       builtin;
dcl  rtrim		       builtin;
dcl  string		       builtin;
dcl  substr		       builtin;
dcl  sum			       builtin;

dcl  any_other		       condition;
dcl  finish		       condition;

/* Include Files */

%include l6_tran_transfer_args;

%include star_structures;

/* vfs_info.incl.pl1 */

%include vfs_info;

%include access_mode_values;

%include status_structures;

%include iox_entries;

%include iox_modes;

%include pit;

%include user_attributes;

	pit_ptr = P_pit_ptr;

	P_call_listener = "0"b;			/* We will never return anyway. */
	P_with_command_line = "";

/* Set things up for for an error, in which case we will tell the Level 6 and logout. */

	status_area_ptr = null ();
	status_ptr = null ();
	auto_status_branch.nnames = 0;
	auto_status_branch.names_relp = "0"b;
	multics_file_iocbp = null ();
	level_6_iocbp = iox_$user_io;
	file_buffer_ptr = null ();
	comm_buffer_ptr = null ();

	star_names_generated = "0"b;
	star_entry_ptr = null ();
	star_names_ptr = null ();
	star_area_ptr = null ();
	star_entry_count = 0;
	star_entries_index = 0;

	on finish ;				/* Do nothing. */

	on any_other call ERROR (error_table_$fatal_error, "The file transfer has abnormally terminated.");

/* Get temp segments for buffers for file IO and Level 6 IO. */

	call iox_$modes (level_6_iocbp, "8bit,rawi,rawo", "", code);
	if code ^= 0 then call ERROR (code, "Trying to set modes for Level 6 comm.");

	call get_temp_segments_ ("l6_tran_", temp_seg_ptrs, code);
	if code ^= 0 then call ERROR (code, "Trying to get a temp segs.");

	comm_buffer_len = sys_info$max_seg_size * 4;
	file_buffer_len = sys_info$max_seg_size * 4;

/* Now do the real work.  We are always the acceptor and the Level 6 is the initiator. */

	level_6_chars_to_write = length ("HI");		/* First tell him we are here. */
	substr (comm_buffer, 1, level_6_chars_to_write) = "HI";

	call l6_tran_util_$put_chars (level_6_iocbp, comm_buffer_ptr, level_6_chars_to_write, code);
	if code ^= 0 then call ERROR (code, "Could not send ""HI"".");

	call OK_Dialogue ();

/* Loop here to handle possible star name transfers. */

	last_file = "0"b;				/* Loop at least once. */
	do while (^last_file);

	     call File_Definition_Dialogue ();

	     auto_transfer_input_args.version = transfer_input_args_version_1;
	     auto_transfer_input_args.comm_iocbp = level_6_iocbp;
	     auto_transfer_input_args.comm_buffer_ptr = comm_buffer_ptr;
	     auto_transfer_input_args.comm_buffer_len = comm_buffer_len;
	     auto_transfer_input_args.file_iocbp = multics_file_iocbp;
	     auto_transfer_input_args.file_buffer_ptr = file_buffer_ptr;
	     auto_transfer_input_args.file_buffer_len = file_buffer_len;
	     auto_transfer_input_args.file_type = multics_file_type;
	     auto_transfer_input_args.data_type = multics_data_type;

	     auto_transfer_output_args.version = transfer_output_args_version_1;

	     if multics_is_sender
		then do;
		     auto_transfer_input_args.tu_size = SEND_TU_SIZE;
		     auto_transfer_input_args.last_file = last_file;
						/* Set by File_Definition_Dialogue. */

		     call l6_tran_send_file_ (addr (auto_transfer_input_args), addr (auto_transfer_output_args),
			P_error_message, P_code);
		     end;

		else do;
		     auto_transfer_input_args.tu_size = RECV_TU_SIZE;

		     call l6_tran_receive_file_ (addr (auto_transfer_input_args), addr (auto_transfer_output_args),
			P_error_message, P_code);
		     last_file = auto_transfer_output_args.last_file;
		     end;

/* We are finished with the file, get rid of it. */

	     call iox_$close (multics_file_iocbp, code);
	     call iox_$detach_iocb (multics_file_iocbp, code);
	     call iox_$destroy_iocb (multics_file_iocbp, code);
	end;					/* Loop while ^last_file. */

	if multics_is_sender
	     then do;				/* "E" is not enough, so engage in a final dialogue. */
		call File_Definition_Dialogue ();	/* Last_file = "1"b here. */
		end;

/*****************************************************************************/
/*							       */
/*   We are done, so terminate the process.  Do it in this gross way so no   */
/*   "hangup" message is sent.  Also, wait a minute before we terminate so   */
/*   we avoid confusing the Level 6 if he wanted to do the termination.  (If */
/*   he terminates, this will also kill us.)			       */
/*							       */
/*****************************************************************************/

LAST_FILE_RETURN:					/* Come here from File_Definition_Dialogue since "E" is not set. */
	call Cleanup_Handler ();

RETURN:
	call timer_manager_$sleep (60, REL_SECONDS);	/* Wait in case the L6 wants to terminate. */

/*   How to logout cleanly, if we ever want to.

		logout_string.version = 0;
		logout_string.hold = "0"b;
		logout_string.brief = "1"b;
		logout_string.pad = "0"b;

		term_structure_ptr = addr (logout_string);

		call terminate_process_ ("logout", term_structure_ptr);
*/
	call iox_$control (iox_$user_io, "hangup", null (), code);
	call timer_manager_$sleep (60, REL_SECONDS);	/* Wait for the "hangup" to take. */

	return;					/* We should never get here. */

File_Definition_Dialogue:
     proc ();

dcl  acceptor_file_count	       pic "99";
dcl  chars_read		       fixed bin (21);
dcl  ci_size		       pic "99999";
dcl  char_position		       fixed bin;
dcl  data_type		       char (1);
dcl  file_access		       char (1);
dcl  file_size		       pic "99999";
dcl  file_type		       char (1);
dcl  fixed_definition_len	       fixed bin (21);
dcl  indicator		       char (1);
dcl  initiator_file_count	       pic "99";
dcl  key_length		       pic "999";
dcl  key_offset		       pic "9999";
dcl  key_type		       char (1);
dcl  l6_path_len		       pic "99";

dcl  1 l6_file_definition	       unaligned based (comm_buffer_ptr),
       2 header,
         3 first_char	       char (1) unaligned,	/* Should be " ". */
         3 definition_len	       pic "999" unaligned,
         3 another_char	       char (1) unaligned,	/* Should be " ". */
         3 direction	       char (1) unaligned,	/* Should be "I" or "O". */
         3 file_name_indicator       char (1) unaligned,	/* Should be "!". */
         3 file_name_len	       pic "99" unaligned,
         3 file_name	       char (0 refer (l6_file_definition.file_name_len)) unaligned,
       2 rest_of_definition	       char (rest_of_definition_len) unaligned;

dcl  output_message_len	       pic "999";
dcl  percent_fill		       pic "99";
dcl  record_size		       pic "9999";
dcl  rest_of_definition_len	       fixed bin;
dcl  starting_record	       pic "99999";
dcl  saved_attributes	       char (256) varying;

/* Get the Level 6 file definition record.  This involves a loop to get everything he says he sent. */

	call l6_tran_util_$get_chars (level_6_iocbp, comm_buffer_ptr, comm_buffer_len, level_6_chars_read, code);
	if code ^= 0 then call ERROR (code, "Trying to read the file definition from the Level 6.");

	fixed_definition_len = l6_file_definition.definition_len;
	rest_of_definition_len = fixed_definition_len - length (string (l6_file_definition.header));

	do chars_read = level_6_chars_read repeat chars_read + level_6_chars_read
	     while (chars_read < fixed_definition_len);
	     call l6_tran_util_$get_chars (level_6_iocbp, add_char_offset_ (comm_buffer_ptr, chars_read),
		comm_buffer_len - chars_read, level_6_chars_read, code);
	     if code ^= 0 then call ERROR (code, "Trying to read the file definition from the Level 6.");
	end;

/* Special no file message, instead of "E" on last file, when Multics is receiving. */

	if l6_file_definition.another_char = "&" then goto LAST_FILE_RETURN;

/* Special return for last file dialogue when Multics is sending. */

	if last_file
	     then do;
		level_6_chars_to_write = length ("8010&'82FF");
		substr (comm_buffer, 1, level_6_chars_to_write) = "8010&'82FF";

		call l6_tran_util_$put_chars (level_6_iocbp, comm_buffer_ptr, level_6_chars_to_write, code);
						/* Ignore the code. */

		return;
		end;

	if l6_file_definition.direction = "I"
	     then multics_is_sender = "1"b;
	     else multics_is_sender = "0"b;

	multics_pathname = l6_file_definition.file_name;

	call expand_pathname_ (multics_pathname, multics_dir, saved_multics_entry, code);
	if code ^= 0 then call ERROR (code, "Trying to expand multics pathname: ^a.", multics_pathname);

	multics_pathname = pathname_ (multics_dir, saved_multics_entry);
						/* Turn into absolute pathname. */

	multics_entry = saved_multics_entry;

	level_6_dir = "";				/* We don't know. */
	saved_level_6_entry = "==";			/* Tell him names that match ours. */

/* Set default Level 6 file attributes, and then get the real ones, if any. */

	level_6_data_type = ASCII;
	level_6_file_type = L6_S_FILE_TYPE;
	level_6_max_record_size = 0;

	if l6_file_definition.rest_of_definition ^= ""
	     then do;				/* Process the file attributes. */
		char_position = 1;
		indicator = substr (l6_file_definition.rest_of_definition, char_position, length (indicator));

		if indicator = "#"
		     then do;
			char_position = char_position + length (indicator);

			saved_attributes = substr (l6_file_definition.rest_of_definition, char_position);
			end;

		     else do;			/* Probably something wrong, but keep going. */
			saved_attributes = substr (l6_file_definition.rest_of_definition, char_position);
			end;


		do while (char_position <= length (l6_file_definition.rest_of_definition));
						/* Loop through the file attributes. */
		     indicator = substr (l6_file_definition.rest_of_definition, char_position, length (indicator));
		     char_position = char_position + length (indicator);

		     if indicator = "P"
			then do;			/* File type */
			     file_type =
				substr (l6_file_definition.rest_of_definition, char_position, length (file_type));
			     char_position = char_position + length (file_type);

			     level_6_file_type = index (string (L6_FILE_TYPE), file_type);

			     if level_6_file_type = 0
				then call ERROR (error_table_$bad_file,
					"The Level 6 file type: ""^a"", is not supported.", file_type);
			     end;

		     else if indicator = "Q"
			then do;			/* Data type */
			     data_type =
				substr (l6_file_definition.rest_of_definition, char_position, length (data_type));
			     char_position = char_position + length (data_type);

			     level_6_data_type = index (string (L6_DATA_TYPE), data_type);

			     if level_6_data_type = 0
				then call ERROR (error_table_$bad_file,
					"The Level 6 data type: ""^a"", is not supported.", data_type);
			     end;

		     else if indicator = "R"
			then do;			/* Record size */
			     string (record_size) =
				substr (l6_file_definition.rest_of_definition, char_position,
				length (record_size));
			     char_position = char_position + length (record_size);

			     level_6_max_record_size = record_size;
			     end;

		     else if indicator = "S"
			then do;			/* Starting record */
			     string (starting_record) =
				substr (l6_file_definition.rest_of_definition, char_position,
				length (starting_record));
			     char_position = char_position + length (starting_record);
			     end;

		     else if indicator = "T"
			then do;			/* File access code */
			     file_access =
				substr (l6_file_definition.rest_of_definition, char_position,
				length (file_access));
			     char_position = char_position + length (file_access);
			     end;

		     else if indicator = "U"
			then do;			/* Key length */
			     string (key_length) =
				substr (l6_file_definition.rest_of_definition, char_position, length (key_length))
				;
			     char_position = char_position + length (key_length);
			     end;

		     else if indicator = "V"
			then do;			/* Key offset */
			     string (key_offset) =
				substr (l6_file_definition.rest_of_definition, char_position, length (key_offset))
				;
			     char_position = char_position + length (key_offset);
			     end;

		     else if indicator = "W"
			then do;			/* Percent fill */
			     string (percent_fill) =
				substr (l6_file_definition.rest_of_definition, char_position,
				length (percent_fill));
			     char_position = char_position + length (percent_fill);
			     end;

		     else if indicator = "X"
			then do;			/* Key type */
			     key_type =
				substr (l6_file_definition.rest_of_definition, char_position, length (key_type));
			     char_position = char_position + length (key_type);
			     end;

		     else if indicator = "Y"
			then do;			/* CI size */
			     string (ci_size) =
				substr (l6_file_definition.rest_of_definition, char_position, length (ci_size));
			     char_position = char_position + length (ci_size);
			     end;

		     else if indicator = "Z"
			then do;			/* File size (in CI units) */
			     string (file_size) =
				substr (l6_file_definition.rest_of_definition, char_position, length (file_size));
			     char_position = char_position + length (file_size);
			     end;

		     else if indicator = "["
			then do;			/* Initiator's file count */
			     string (initiator_file_count) =
				substr (l6_file_definition.rest_of_definition, char_position,
				length (initiator_file_count));
			     char_position = char_position + length (initiator_file_count);
			     end;

		     else if indicator = "\"
			then do;			/* Acceptor's file count */
			     string (acceptor_file_count) =
				substr (l6_file_definition.rest_of_definition, char_position,
				length (acceptor_file_count));
			     char_position = char_position + length (acceptor_file_count);
			     end;

		     else ;			/* Not recognized, skip it */

		end;				/* Loop through the attributes. */
		end;				/* Process the file attributes. */

/* Now do the right things to attach and open the Multics file based on everything we have learned. */

	if multics_is_sender
	     then do;				/*  We must describe the file to the Level 6. */
		call Get_Next_Path (last_file);	/* This sets level_6_pathname too. */

		info.info_version = vfs_version_1;
		call vfile_status_ (multics_dir, multics_entry, addr (info), code);
		if code ^= 0
		     then call ERROR (code, "Trying to get vfile_status_ on: ^a, for sending.", multics_pathname);

		call Check_Multics_File ();

		call Open_Multics_File ();

		call Get_Saved_Attributes ();
		end;				/*  We must describe the file to the Level 6. */

	     else do;				/* The Level 6 has told us about the file. */
		level_6_pathname = "";		/* Not needed since we are receiving. */
		star_names_generated = "0"b;		/* We never get starnames when receiving. */

		info.info_version = vfs_version_1;
		call vfile_status_ (multics_dir, multics_entry, addr (info), code);

		if code = 0
		     then do;
			call Check_Multics_File ();
			call Verify_File_Attributes ();
			end;

		     else call Create_Multics_File ();

		call Open_Multics_File ();

		call Set_Saved_Attributes ();
		end;				/* The Level 6 has told us about the file. */

/* Send our response to the Level 6. */

	l6_path_len = length (rtrim (level_6_pathname)) + 1;

	call ioa_$rsnpnnl ("8000$^[^[!^2a^a ^;^2s^]^[#P^aQ^a^s^;^2s#^a^]^;^]", comm_buffer, level_6_chars_to_write,
	     multics_is_sender, star_names_generated, l6_path_len, rtrim (level_6_pathname), saved_attributes = "",
	     L6_FILE_TYPE (multics_file_l6_type), L6_DATA_TYPE (multics_data_type), saved_attributes);

	output_message_len = level_6_chars_to_write;
	substr (comm_buffer, 2, 3) = output_message_len;

	call l6_tran_util_$put_chars (level_6_iocbp, comm_buffer_ptr, level_6_chars_to_write, code);
	if code ^= 0 then call ERROR (code, "Trying to send the ack to the Level 6 file definition.");

/* We may have to put a call to write_status here, to prevent our response from being combined with our first prompt. */

	return;

Check_Multics_File:
     proc ();

	multics_file_type = info.type;

	if multics_file_type > BLOCKED_FILE_TYPE
	     then call ERROR (error_table_$bad_file,
		     "The Multics file must be unstructured, sequential, or blocked.  File ^a was ^a.",
		     multics_pathname, FILE_TYPE_TO_PNAME (multics_file_type));

	if multics_file_type = BLOCKED_FILE_TYPE
	     then do;
		multics_file_block_size = blk_info.max_rec_len;
		multics_file_size = blk_info.end_pos;
		end;

	     else do;
		multics_file_block_size = 0;
		multics_file_size = 0;
		end;

	multics_file_l6_type = L6_S_FILE_TYPE;		/* This is the default. */

/* Now find out if the file is special by looking for the suffix we put on it. */

	status_area_ptr = get_user_free_area_ ();
	status_ptr = addr (auto_status_branch);

	call hcs_$status_ (multics_dir, multics_entry, CHASE, status_ptr, status_area_ptr, code);
	if code ^= 0 then call ERROR (code, "Trying to get status for: ^a.", multics_pathname);

	if status_branch.short.type = Directory then call ERROR (error_table_$dirseg, "^a.", multics_pathname);

	code = 1;					/* Go through the loop at least once. */
	do i = lbound (status_entry_names, 1) to hbound (status_entry_names, 1) while (code ^= 0);
	     call match_star_name_ ((status_entry_names (i)), "**.*.l6*", code);
	     if code = 0
		then do;
		     suffix = reverse (before (reverse (rtrim (status_entry_names (i))), "."));

		     do i = lbound (MULTICS_L6_FILE_SUFFIX, 1) to hbound (MULTICS_L6_FILE_SUFFIX, 1)
			while (suffix ^= MULTICS_L6_FILE_SUFFIX (i));
		     end;

		     if i > hbound (MULTICS_L6_FILE_SUFFIX, 1)
			then code = 1;		/* Keep looking. */
			else multics_file_l6_type = i;
		     end;
	end;

	if status_branch.nnames > 0 & status_branch.names_relp ^= "0"b
	     then free status_entry_names in (status_area_ptr -> based_area);
						/* Cleanup after ourselves. */

	if multics_file_type = UNSTRUCTURED_FILE_TYPE
	     then multics_data_type = ASCII;
	     else multics_data_type = BINARY;

	return;

     end Check_Multics_File;

Create_Multics_File:
     proc ();

	multics_file_l6_type = level_6_file_type;
	multics_data_type = level_6_data_type;

	if level_6_file_type = L6_S_FILE_TYPE & level_6_data_type = ASCII
	     then multics_file_type = UNSTRUCTURED_FILE_TYPE;

	else if level_6_file_type = L6_S_FILE_TYPE then multics_file_type = SEQUENTIAL_FILE_TYPE;

	else multics_file_type = BLOCKED_FILE_TYPE;

	if multics_file_type = BLOCKED_FILE_TYPE
	     then do;
		if level_6_max_record_size = 0
		     then multics_file_block_size = 256;/*Set default. */
		     else multics_file_block_size = level_6_max_record_size;
		end;

	     else multics_file_block_size = 0;

	multics_file_size = 0;

	if MULTICS_L6_FILE_SUFFIX (multics_file_l6_type) ^= ""
	     then do;
		call suffixed_name_$make (multics_entry, MULTICS_L6_FILE_SUFFIX (multics_file_l6_type), multics_entry,
		     code);
		if code ^= 0
		     then call ERROR (code, "Trying to add the suffix ""^a"" to ^a",
			     MULTICS_L6_FILE_SUFFIX (multics_file_l6_type), multics_pathname);

		multics_pathname = pathname_ (multics_dir, multics_entry);
		end;

	call hcs_$append_branch (multics_dir, multics_entry, RW_ACCESS_BIN, code);
	if code ^= 0 then call ERROR (code, "Trying to create: ^a.", multics_pathname);

	return;

     end Create_Multics_File;

Get_Next_Path:
     proc (P_last_file);

dcl  P_last_file		       bit (1) parameter;

dcl  code			       fixed bin (35);

	call check_star_name_$entry (saved_multics_entry, code);

	if code = 0 then P_last_file = "1"b;		/* Not a star name, nothing to do. */

	else if code = error_table_$badstar then call ERROR (code, "Multics file name: ^a.", saved_multics_entry);

	else do;					/* We have a star name. */
	     if ^star_names_generated
		then do;				/* Get the star list once. */
		     star_area_ptr = get_user_free_area_ ();

		     call hcs_$star_ (multics_dir, saved_multics_entry, star_ALL_ENTRIES, star_area_ptr,
			star_entry_count, star_entry_ptr, star_names_ptr, code);
		     if code ^= 0
			then call ERROR (code, "Trying to match starname ^a in directory ^a.", saved_multics_entry,
				multics_dir);

/* Set the index to the first non-directory entry. */

		     do star_entries_index = 1 to hbound (star_entries, 1)
			while (star_entries (star_entries_index).type = star_DIRECTORY);
		     end;

		     if star_entries_index > hbound (star_entries, 1)
			then call ERROR (error_table_$dirseg, "Only directories match ^a.", multics_pathname);

		     star_names_generated = "1"b;
		     end;				/* Get the star list once. */

/* Just use the first matching name on an entry. */

	     multics_entry = star_names (star_entries (star_entries_index).nindex);
	     multics_pathname = pathname_ (multics_dir, multics_entry);

/* Now update the star_entries_index and set P_last_file. */

	     do star_entries_index = star_entries_index + 1 to hbound (star_entries, 1)
		while (star_entries (star_entries_index).type = star_DIRECTORY);
	     end;

	     if star_entries_index > hbound (star_entries, 1)
		then P_last_file = "1"b;
		else P_last_file = "0"b;
	     end;					/* We have a star name. */

/* Now generate the L6 pathname. */

	call get_equal_name_ (multics_entry, saved_level_6_entry, level_6_entry, code);
	if code ^= 0
	     then call ERROR (code, "Trying to do equalname matching on L6 name ^a, against Multics name ~a.",
		     saved_level_6_entry, multics_entry);

	level_6_pathname = rtrim (level_6_dir) || level_6_entry;

	return;

     end Get_Next_Path;

Get_Saved_Attributes:
     proc ();

	if multics_file_l6_type ^= L6_S_FILE_TYPE
	     then do;
		call iox_$read_record (multics_file_iocbp, file_buffer_ptr, file_buffer_len, multics_chars_read, code)
		     ;
		if code ^= 0
		     then call ERROR (code, "Trying to get the file attributes from the multics file: ^a.",
			     multics_pathname);

		saved_attributes = substr (file_buffer, 1, multics_chars_read);
		end;

	     else saved_attributes = "";

	return;

     end Get_Saved_Attributes;

Open_Multics_File:
     proc ();

	call ioa_$rsnnl ("^[record_stream_ -target ^]vfile_ ^a^[ -blocked ^d^;^s^]", multics_file_attach_desc,
	     ignored_len, multics_file_type = UNSTRUCTURED_FILE_TYPE, multics_pathname,
	     multics_file_type = BLOCKED_FILE_TYPE, multics_file_block_size);

	call iox_$attach_name (multics_entry, multics_file_iocbp, (multics_file_attach_desc), null (), code);
	if code ^= 0 & code ^= error_table_$not_detached
	     then call ERROR (code, "Trying to attach file: ^a through switch: ^a.", multics_pathname, multics_entry);

	if multics_is_sender
	     then multics_file_open_mode = Sequential_input;
	     else multics_file_open_mode = Sequential_output;

	call iox_$open (multics_file_iocbp, multics_file_open_mode, "0"b, code);
	if code ^= 0 & code ^= error_table_$not_closed
	     then call ERROR (code, "Trying to open file: ^a through switch: ^a.", multics_pathname, multics_entry);

	return;

     end Open_Multics_File;

Set_Saved_Attributes:
     proc ();

	if multics_file_l6_type ^= L6_S_FILE_TYPE
	     then do;
		multics_chars_to_write = length (saved_attributes);
		substr (file_buffer, 1, multics_chars_to_write) = saved_attributes;

		call iox_$write_record (multics_file_iocbp, file_buffer_ptr, multics_chars_to_write, code);
		if code ^= 0 then call ERROR (code, "Trying to save the file attributes in: ^a.", multics_pathname);
		end;

	return;

     end Set_Saved_Attributes;

Verify_File_Attributes:
     proc ();

	if multics_file_l6_type ^= level_6_file_type
	     then call ERROR (error_table_$bad_file,
		     "The Level 6 file type does not match the existing Multics file type.  (M = ^a, L6 = ^a).",
		     L6_FILE_TYPE (multics_file_l6_type), L6_FILE_TYPE (level_6_file_type));

	if multics_file_type = BLOCKED_FILE_TYPE & multics_file_block_size < level_6_max_record_size
	     then call ERROR (error_table_$bad_file,
		     "The Multics fiel block size is less than the Level 6 record size.  (M = ^d, L6 = ^d).",
		     multics_file_block_size, level_6_max_record_size);

	if multics_file_type = UNSTRUCTURED_FILE_TYPE
	     & ^(level_6_file_type = L6_S_FILE_TYPE & level_6_data_type = ASCII)
	     then call ERROR (error_table_$bad_file,
		     "Only a sequential ascii Level 6 file may be transferred to an unstructured Multics file.");

	return;

     end Verify_File_Attributes;

     end File_Definition_Dialogue;

OK_Dialogue:
     proc ();

	call l6_tran_util_$get_chars (level_6_iocbp, comm_buffer_ptr, comm_buffer_len, level_6_chars_read, code);
	if code ^= 0 then call ERROR (code, "Trying to read ""OK?"" from the Level 6.");

	if substr (comm_buffer, 1, level_6_chars_read) ^= "OK?" then ;
						/* Something wrong, but keep going anyway. */

	level_6_chars_to_write = length ("OK");
	substr (comm_buffer, 1, level_6_chars_to_write) = "OK";

	call l6_tran_util_$put_chars (level_6_iocbp, comm_buffer_ptr, level_6_chars_to_write, code);
	if code ^= 0 then call ERROR (code, "Trying to send ""OK"" to the Level 6.");

	return;

     end OK_Dialogue;

/*****************************************************************************/
/*							       */
/*   PROCEDURE: ERROR					       */
/*							       */
/*   This subroutine expects arguments as follows:		       */
/*							       */
/*         call ERROR (code, ioa_control_string, ioa_arguments, ...)	       */
/*							       */
/*   where: code is fixed bin (35), and ioa_control_string and ioa_arguments */
/*          are optional character strings as defined for ioa_.	       */
/*							       */
/*   Some global variables are used:				       */
/*							       */
/*   	Cleanup_Handler (a procedure that does cleanup)		       */
/*							       */
/*     For commands:					       */
/*   	report_error (an entry variable set to com_err_ or active_fnc_err_)*/
/*   	command_name (the character string name of the command)	       */
/*	return_arg_ptr (used to return "false" for active functions)       */
/*							       */
/*     For subroutines:					       */
/*	depends on the error reporting strategy chosen.		       */
/*							       */
/*   At completion a non-local goto is done to the label RETURN.	       */
/*							       */
/*   Declarations are expected for:				       */
/*							       */
/*   	cu_$arg_list_ptr					       */
/*   	cu_$arg_ptr					       */
/*   	cu_$arg_count					       */
/*   	error_table_$fatal_error				       */
/*   	ioa_$general_rs					       */
/*							       */
/*****************************************************************************/

ERROR:
     proc () options (variable, non_quick);

dcl  arg_list_ptr		       ptr;
dcl  arg_len		       fixed bin (21);
dcl  arg_ptr		       ptr;
dcl  based_code		       fixed bin (35) based;
dcl  caller_code		       fixed bin (35);
dcl  code			       fixed bin (35);
dcl  err_msg		       char (256);
dcl  err_msg_len		       fixed bin (21);
dcl  nargs		       fixed bin;

	call cu_$arg_count (nargs, code);		/* IGNORE CODE */

	if nargs >= 1
	     then do;				/* We were called correctly. */
		arg_ptr = null ();			/* Set this so we know if cu_$arg_ptr worked. */
		call cu_$arg_ptr (1, arg_ptr, arg_len, code);

		if arg_ptr ^= null ()
		     then caller_code = arg_ptr -> based_code;
						/* The normal case. */
		     else caller_code = error_table_$fatal_error;
						/* Some problem with our arg list. */

		if nargs > 1
		     then do;			/* There is a message. */
			call cu_$arg_list_ptr (arg_list_ptr);
			call ioa_$general_rs (arg_list_ptr, 2, 3, err_msg, err_msg_len, "1"b, "0"b);
			end;

		     else do;			/* No message. */
			err_msg = "";
			err_msg_len = 0;
			end;
		end;				/* We were called correctly. */

	     else do;				/* We were called with no arguments. */
		caller_code = error_table_$fatal_error; /* The best we can do. */
		err_msg = "";
		err_msg_len = 0;
		end;				/* We were called with no arguments. */

/* The following lines must be modified depending on the error reporting strategy used. */

	if level_6_iocbp ^= null () & comm_buffer_ptr ^= null ()
	     then do;				/* Tell the Level 6. */

dcl  pic_err_msg_len	       pic "99";

		pic_err_msg_len = min (99, err_msg_len);

		call ioa_$rsnpnnl ("CU^a^aR ", comm_buffer, level_6_chars_to_write, pic_err_msg_len,
		     substr (err_msg, 1, pic_err_msg_len));

		call l6_tran_util_$put_chars (level_6_iocbp, comm_buffer_ptr, level_6_chars_to_write, code);
		end;

	P_error_message = substr (err_msg, 1, err_msg_len);
	P_code = caller_code;

/* Clean up and do a non-local goto back to the outermost block. */

	call Cleanup_Handler ();
	goto RETURN;

     end ERROR;

Cleanup_Handler:
     proc ();

dcl  code			       fixed bin (35);

	if status_area_ptr ^= null () & status_ptr ^= null ()
	     then do;
		if status_branch.nnames > 1 & status_branch.names_relp ^= "0"b
		     then free status_entry_names in (status_area_ptr -> based_area);
		end;

	if star_area_ptr ^= null ()
	     then do;				/* Order is important here. */
		if star_names_ptr ^= null () & star_entry_ptr ^= null ()
		     then free star_names in (star_area_ptr -> based_area);

		if star_entry_ptr ^= null () then free star_entries in (star_area_ptr -> based_area);
		end;

	if multics_file_iocbp ^= null ()
	     then do;
		call iox_$close (multics_file_iocbp, code);
		call iox_$detach_iocb (multics_file_iocbp, code);
		call iox_$destroy_iocb (multics_file_iocbp, code);
		end;

	if file_buffer_ptr ^= null () | comm_buffer_ptr ^= null ()
	     then call release_temp_segments_ ("l6_tran_", temp_seg_ptrs, code);

	return;

     end Cleanup_Handler;

debug_on:
     entry ();
	debug_flag = "1"b;
	return;

debug_off:
     entry ();
	debug_flag = "0"b;
	return;

     end l6_tran_overseer_;
