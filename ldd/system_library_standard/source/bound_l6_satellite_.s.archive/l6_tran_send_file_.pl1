/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
/*****************************************************************************/
/*							       */
/*   DESCRIPTION:						       */
/*							       */
/*        This subroutine does all of the work necessary to send a file to   */
/*   the Level 6.  It is used by the l6_tran_ NASP.		       */
/*							       */
/*							       */
/*   JOURNALIZATION:					       */
/*							       */
/*   1) Written 5/82 by R.J.C. Kissel.				       */
/*   2) Modified 7/83 by R.J.C. Kissel to check for an error message from    */
/*      the L6 after every transmission unit is sent.		       */
/*   3) Modified 9/83 by R.J.C. Kissel to not call the final prompt after a  */
/*      file transfer an error.				       */
/*							       */
/*****************************************************************************/

/* format: style3,linecom,ifthenstmt,indthenelse,^indnoniterdo,indnoniterend,initcol3,dclind5,idind32 */

l6_tran_send_file_:
     proc (P_input_args_ptr, P_output_args_ptr, P_error_message, P_code);

/* Parameters */

dcl  P_input_args_ptr	       ptr parameter;
dcl  P_output_args_ptr	       ptr parameter;
dcl  P_error_message	       char (*) varying parameter;
dcl  P_code		       fixed bin (35) parameter;

/* Automatic */

dcl  comm_buffer		       char (comm_buffer_len) based (comm_buffer_ptr);
dcl  comm_buffer_len	       fixed bin (21);
dcl  comm_buffer_ptr	       ptr;
dcl  comm_buffer_position	       fixed bin (21);

dcl  code			       fixed bin (35);
dcl  end_of_file		       bit (1);

dcl  file_buffer		       char (file_buffer_len) based (file_buffer_ptr);
dcl  file_buffer_len	       fixed bin (21);
dcl  file_buffer_ptr	       ptr;

dcl  last_file		       bit (1);

dcl  level_6_chars_read	       fixed bin (21);
dcl  level_6_chars_to_write	       fixed bin (21);
dcl  level_6_iocbp		       ptr;

dcl  multics_chars_read	       fixed bin (21);
dcl  multics_data_type	       fixed bin;
dcl  multics_file_type	       fixed bin;
dcl  multics_file_iocbp	       ptr;

dcl  next_transmission_unit	       fixed bin;

dcl  1 prompt		       aligned,
       2 prompt_char	       char (1) unaligned init ("P"),
       2 record_number	       pic "99999" unaligned;

dcl  record_number		       fixed bin;
dcl  total_bytes		       fixed bin (35);
dcl  tu_size		       fixed bin (21);

/* Internal Constants */

%include l6_tran_constants;

/* External Constants */

dcl  error_table_$end_of_info	       fixed bin (35) ext static;
dcl  error_table_$fatal_error	       fixed bin (35) ext static;
dcl  error_table_$short_record       fixed bin (35) ext static;
dcl  error_table_$unimplemented_version
			       fixed bin (35) ext static;

/* External Entries */

dcl  cu_$arg_count		       entry (fixed bin, fixed bin (35));
dcl  cu_$arg_list_ptr	       entry (ptr);
dcl  cu_$arg_ptr		       entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl  ioa_$general_rs	       entry (ptr, fixed bin, fixed bin, char (*), fixed bin (21), bit (1) aligned,
			       bit (1) aligned);
dcl  ioa_$rsnpnnl		       entry options (variable);
dcl  iox_$read_record	       entry (ptr, ptr, fixed bin (21), fixed bin (21), fixed bin (35));
dcl  l6_tran_util_$get_chars	       entry (ptr, ptr, fixed bin (21), fixed bin (21), fixed bin (35));
dcl  l6_tran_util_$put_chars	       entry (ptr, ptr, fixed bin (21), fixed bin (35));
dcl  l6_tran_util_$read_status       entry (ptr) returns (bit (1));

/* Builtin Functions and Conditions */

dcl  length		       builtin;
dcl  min			       builtin;
dcl  mod			       builtin;
dcl  null			       builtin;
dcl  string		       builtin;
dcl  substr		       builtin;
dcl  verify		       builtin;

/* Include Files */

%include l6_tran_transfer_args;

	level_6_iocbp = null ();			/* Initialize these in case of error. */
	comm_buffer_ptr = null ();

	tiap = P_input_args_ptr;
	toap = P_output_args_ptr;

	if transfer_input_args.version ^= transfer_input_args_version_1
	     then call ERROR (error_table_$unimplemented_version, "The input args version was ^a, expected ^a.",
		     transfer_input_args.version, transfer_input_args_version_1);

	if transfer_output_args.version ^= transfer_output_args_version_1
	     then call ERROR (error_table_$unimplemented_version, "The output args version was ^a, expected ^a.",
		     transfer_output_args.version, transfer_output_args_version_1);

	level_6_iocbp = transfer_input_args.comm_iocbp;
	comm_buffer_ptr = transfer_input_args.comm_buffer_ptr;
	comm_buffer_len = transfer_input_args.comm_buffer_len;
	multics_file_iocbp = transfer_input_args.file_iocbp;
	file_buffer_ptr = transfer_input_args.file_buffer_ptr;
	file_buffer_len = transfer_input_args.file_buffer_len;
	multics_file_type = transfer_input_args.file_type;
	multics_data_type = transfer_input_args.data_type;
	tu_size = transfer_input_args.tu_size;
	last_file = transfer_input_args.last_file;
	total_bytes = 0;

	comm_buffer_position = 1;			/* Set this for Send_L6_Record. */
	next_transmission_unit = 0;			/* Set this for Send_L6_Record. */

/* Get the first prompt from the Level 6, it should be for record 0. */

	if ^transfer_input_args.flags.prompt_read
	     then do;
		call l6_tran_util_$get_chars (level_6_iocbp, comm_buffer_ptr, comm_buffer_len, level_6_chars_read,
		     code);
		if code ^= 0 then call ERROR (code, "Trying to read the first prompt from the Level 6.");

		string (prompt) = substr (comm_buffer, 1, level_6_chars_read);

		if prompt.record_number ^= 0 then ;	/* Something wrong, but keep going. */
		end;

/* Send records until end of file.  (et_$short_record means eof but no newline from iox_$get_line). */


	call iox_$read_record (multics_file_iocbp, file_buffer_ptr, file_buffer_len, multics_chars_read, code);
	if code ^= 0 & code ^= error_table_$end_of_info & code ^= error_table_$short_record
	     then call ERROR (code, "Trying to read the first record from the multics file.");

/* The level 6 cannot handle a null record, so if we have one put a space in it and send that. */

	if multics_file_type = UNSTRUCTURED_FILE_TYPE & multics_data_type = ASCII & multics_chars_read = 0
	     then do;
		multics_chars_read = 1;
		substr (file_buffer, 1, 1) = " ";
		end;

	total_bytes = total_bytes + multics_chars_read;
	end_of_file = (code = error_table_$end_of_info);

	do record_number = 0 by 1 while (^end_of_file);

/* Send the record if it is non-null, otherwise skip it. */

	     if multics_chars_read > 0
		then call Send_L6_Record (record_number, end_of_file, last_file);
		else record_number = record_number - 1; /* Ignore null record, do loop will increment this. */

/* Read the next Multics record, and check the error code. */

	     call iox_$read_record (multics_file_iocbp, file_buffer_ptr, file_buffer_len, multics_chars_read, code);
	     if code ^= 0 & code ^= error_table_$end_of_info & code ^= error_table_$short_record
		then call ERROR (code, "Trying to read record ^d from the multics file.", record_number + 1);

/* The level 6 cannot handle a null record, so if we have one put a space in it and send that. */

	     if multics_file_type = UNSTRUCTURED_FILE_TYPE & multics_data_type = ASCII & multics_chars_read = 0
		then do;
		     multics_chars_read = 1;
		     substr (file_buffer, 1, 1) = " ";
		     end;

	     total_bytes = total_bytes + multics_chars_read;
	     end_of_file = (code = error_table_$end_of_info);
	end;

	call Send_L6_Record (record_number, end_of_file, last_file);
						/* Write the end of file record. */

/* Get the final prompt from the Level 6, it might be an error message. */

	call l6_tran_util_$get_chars (level_6_iocbp, comm_buffer_ptr, comm_buffer_len, level_6_chars_read, code);
	if code ^= 0 then call ERROR (code, "Trying to read the final prompt from the Level 6.");

	call Check_For_L6_Error ((record_number));

	transfer_output_args.record_number = record_number;
	transfer_output_args.total_bytes = total_bytes;
	P_error_message = "";
	P_code = 0;

RETURN:
	return;

Send_L6_Record:
     proc (P_record_number, P_end_of_file, P_last_file);

dcl  P_record_number	       fixed bin parameter;
dcl  P_end_of_file		       bit (1) parameter;
dcl  P_last_file		       bit (1) parameter;

dcl  chars_left_in_record	       fixed bin (21);
dcl  code			       fixed bin (35);
dcl  current_digit		       fixed bin;
dcl  data_field_len		       pic "99";
dcl  end_of_record		       bit (1);
dcl  file_buffer_position	       fixed bin (21);
dcl  max_unpacked_chars	       fixed bin;
dcl  media_code		       char (1);
dcl  pic_next_tu		       pic "9";
dcl  pack_the_data		       bit (1);
dcl  packable_index		       fixed bin;
dcl  packable_string	       bit (1);
dcl  possible_packed_char	       char (1);
dcl  possible_packed_length	       fixed bin;
dcl  record_number		       pic "99999";
dcl  write_record_state	       fixed bin;

	current_digit = 1;
	file_buffer_position = 1;
	media_code = L6_DATA_TYPE (multics_data_type);
	record_number = min (99999, P_record_number);
	write_record_state = 1;

	end_of_record = "0"b;
	do while (^end_of_record);			/* Output loop. */

	     if comm_buffer_position = tu_size + 1 | comm_buffer_position = 1
		then do;

		     if comm_buffer_position = tu_size + 1
			then do;			/* Normal case, = 1 only the first time. */
			     call l6_tran_util_$put_chars (level_6_iocbp, comm_buffer_ptr, tu_size, code);
			     if code ^= 0 then call ERROR (code, "Trying to write transmission unit.");

/* Look and see if the L6 has sent us something (usually an error message). */

			     if l6_tran_util_$read_status (level_6_iocbp)
				then do;
				     call l6_tran_util_$get_chars (level_6_iocbp, comm_buffer_ptr,
					comm_buffer_len, level_6_chars_read, code);
				     if code ^= 0
					then call ERROR (code,
						"Trying to read a message from the Level 6 after sending record ^d."
						, record_number);

				     call Check_For_L6_Error ((record_number));
				     end;
			     end;

		     comm_buffer_position = 1;

		     pic_next_tu = next_transmission_unit;
		     substr (comm_buffer, comm_buffer_position, 1) = string (pic_next_tu);

		     comm_buffer_position = comm_buffer_position + 1;
		     next_transmission_unit = mod (next_transmission_unit + 1, 10);

		     goto NEXT_STATE;
		     end;

	     goto WRITE_RECORD (write_record_state);

WRITE_RECORD (1):					/* Put in the media code */
	     if P_end_of_file
		then do;
		     if P_last_file
			then substr (comm_buffer, comm_buffer_position, 1) = "E";
			else substr (comm_buffer, comm_buffer_position, 1) = "F";

		     call l6_tran_util_$put_chars (level_6_iocbp, comm_buffer_ptr, comm_buffer_position, code);
		     if code ^= 0 then call ERROR (code, "Trying to write the last tu.");

		     end_of_record = "1"b;		/* Exit the loop. */
		     end;

		else substr (comm_buffer, comm_buffer_position, 1) = media_code;

	     comm_buffer_position = comm_buffer_position + 1;
	     write_record_state = 2;

	     goto NEXT_STATE;

WRITE_RECORD (2):					/* Put in the record number, one digit at a time. */
	     substr (comm_buffer, comm_buffer_position, 1) = substr (record_number, current_digit, 1);

	     comm_buffer_position = comm_buffer_position + 1;
	     current_digit = current_digit + 1;

	     if current_digit <= length (record_number)
		then write_record_state = 2;
		else do;
		     current_digit = 1;
		     write_record_state = 3;
		     end;

	     goto NEXT_STATE;

WRITE_RECORD (3):					/* Decide to pack, unpack (and how much), or end record. */
	     chars_left_in_record = multics_chars_read - file_buffer_position + 1;

	     if chars_left_in_record <= 0
		then do;				/* Done with the record data. */
		     substr (comm_buffer, comm_buffer_position, 1) = "R";

		     comm_buffer_position = comm_buffer_position + 1;
		     end_of_record = "1"b;		/* Exit the loop. */

		     goto NEXT_STATE;
		     end;

/* Find the longest unpackable string in what is left.  If one is not found, use what is left. */

	     packable_string = "0"b;

	     do packable_index = 0 to min (99, chars_left_in_record) - 1 while (^packable_string);

		possible_packed_char = substr (file_buffer, file_buffer_position + packable_index, 1);

		possible_packed_length =
		     verify (
		     substr (file_buffer, file_buffer_position + packable_index + 1,
		     min (99, chars_left_in_record) - packable_index - 1), possible_packed_char);

		if possible_packed_length = 0 & min (99, chars_left_in_record) - packable_index - 1 > 0
		     then possible_packed_length = min (99, chars_left_in_record) - packable_index;

		if possible_packed_length >= 5
		     then packable_string = "1"b;
		     else packable_string = "0"b;
	     end;

	     packable_index = packable_index - 1;

	     if packable_string & packable_index = 0 then pack_the_data = "1"b;

	     else if packable_string & packable_index > 0
		then do;
		     pack_the_data = "0"b;

		     max_unpacked_chars = (tu_size - comm_buffer_position + 1) - 3;
		     if max_unpacked_chars <= 0 | max_unpacked_chars >= 99 then max_unpacked_chars = 99;
		     max_unpacked_chars = min (max_unpacked_chars, packable_index);
		     end;

	     else do;
		pack_the_data = "0"b;

		max_unpacked_chars = (tu_size - comm_buffer_position + 1) - 3;
		if max_unpacked_chars <= 0 | max_unpacked_chars >= 99 then max_unpacked_chars = 99;
		max_unpacked_chars = min (max_unpacked_chars, chars_left_in_record);
		end;

/* Now put in "P" or "U" as appropriate, and set the length. */

	     if pack_the_data
		then do;
		     data_field_len = possible_packed_length;
		     substr (comm_buffer, comm_buffer_position, 1) = "P";
		     end;

		else do;
		     data_field_len = max_unpacked_chars;
		     substr (comm_buffer, comm_buffer_position, 1) = "U";
		     end;

	     comm_buffer_position = comm_buffer_position + 1;
	     write_record_state = 4;

	     goto NEXT_STATE;

WRITE_RECORD (4):					/* Put in the data length, one digit at a time. */
	     substr (comm_buffer, comm_buffer_position, 1) = substr (data_field_len, current_digit, 1);

	     comm_buffer_position = comm_buffer_position + 1;
	     current_digit = current_digit + 1;

	     if current_digit <= length (string (data_field_len))
		then write_record_state = 4;
		else do;
		     current_digit = 1;
		     write_record_state = 5;
		     end;

	     goto NEXT_STATE;

WRITE_RECORD (5):					/* Now put in the data, it won't cross the tu boundary. */
	     if pack_the_data
		then do;
		     substr (comm_buffer, comm_buffer_position, 1) = possible_packed_char;
		     comm_buffer_position = comm_buffer_position + 1;
		     file_buffer_position = file_buffer_position + possible_packed_length;
		     end;

		else do;
		     substr (comm_buffer, comm_buffer_position, max_unpacked_chars) =
			substr (file_buffer, file_buffer_position, max_unpacked_chars);
		     comm_buffer_position = comm_buffer_position + max_unpacked_chars;
		     file_buffer_position = file_buffer_position + max_unpacked_chars;
		     end;

	     write_record_state = 3;

	     goto NEXT_STATE;

NEXT_STATE:
	end;					/* Output loop. */

	return;

     end Send_L6_Record;

Check_For_L6_Error:
     proc (current_multics_record);

dcl  current_multics_record	       fixed bin;

dcl  1 l6_error		       aligned based (comm_buffer_ptr),
						/* L6 error message overlay. */
       2 header,
         3 first_char	       char (1) unaligned,	/* Should be "C". */
         3 second_char	       char (1) unaligned,	/* Should be "U". */
         3 message_len	       pic "99" unaligned,
       2 message		       char (0 refer (l6_error.header.message_len)) unaligned;

dcl  strange_error		       char (level_6_chars_read) based (comm_buffer_ptr);

	if level_6_chars_read > 0
	     then do;				/* Something to look at. */
		if l6_error.first_char = "C" & level_6_chars_read >= length (string (l6_error.header))
		     then call ERROR (error_table_$fatal_error, "Error from the Level 6 after sending record ^d: ^a.",
			     current_multics_record, l6_error.message);

		else if l6_error.first_char = "P" & level_6_chars_read = length (string (prompt)) then ;
						/* This is not an error, just a prompt. */

		else call ERROR (error_table_$fatal_error, "Error from the Level 6 after sending record ^d: ^a.",
			current_multics_record, strange_error);
		end;

	return;

     end Check_For_L6_Error;

/*****************************************************************************/
/*							       */
/*   PROCEDURE: ERROR					       */
/*							       */
/*   This subroutine expects arguments as follows:		       */
/*							       */
/*         call ERROR (code, ioa_control_string, ioa_arguments, ...)	       */
/*							       */
/*   where: code is fixed bin (35), and ioa_control_string and ioa_arguments */
/*          are optional character strings as defined for ioa_.	       */
/*							       */
/*   Some global variables are used:				       */
/*							       */
/*   	Cleanup_Handler (a procedure that does cleanup)		       */
/*							       */
/*     For commands:					       */
/*   	report_error (an entry variable set to com_err_ or active_fnc_err_)*/
/*   	command_name (the character string name of the command)	       */
/*	return_arg_ptr (used to return "false" for active functions)       */
/*							       */
/*     For subroutines:					       */
/*	depends on the error reporting strategy chosen.		       */
/*							       */
/*   At completion a non-local goto is done to the label RETURN.	       */
/*							       */
/*   Declarations are expected for:				       */
/*							       */
/*   	cu_$arg_list_ptr					       */
/*   	cu_$arg_ptr					       */
/*   	cu_$arg_count					       */
/*   	error_table_$fatal_error				       */
/*   	ioa_$general_rs					       */
/*							       */
/*****************************************************************************/

ERROR:
     proc () options (variable, non_quick);

dcl  arg_list_ptr		       ptr;
dcl  arg_len		       fixed bin (21);
dcl  arg_ptr		       ptr;
dcl  based_code		       fixed bin (35) based;
dcl  caller_code		       fixed bin (35);
dcl  code			       fixed bin (35);
dcl  err_msg		       char (256);
dcl  err_msg_len		       fixed bin (21);
dcl  nargs		       fixed bin;

	call cu_$arg_count (nargs, code);		/* IGNORE CODE */

	if nargs >= 1
	     then do;				/* We were called correctly. */
		arg_ptr = null ();			/* Set this so we know if cu_$arg_ptr worked. */
		call cu_$arg_ptr (1, arg_ptr, arg_len, code);

		if arg_ptr ^= null ()
		     then caller_code = arg_ptr -> based_code;
						/* The normal case. */
		     else caller_code = error_table_$fatal_error;
						/* Some problem with our arg list. */

		if nargs > 1
		     then do;			/* There is a message. */
			call cu_$arg_list_ptr (arg_list_ptr);
			call ioa_$general_rs (arg_list_ptr, 2, 3, err_msg, err_msg_len, "1"b, "0"b);
			end;

		     else do;			/* No message. */
			err_msg = "";
			err_msg_len = 0;
			end;
		end;				/* We were called correctly. */

	     else do;				/* We were called with no arguments. */
		caller_code = error_table_$fatal_error; /* The best we can do. */
		err_msg = "";
		err_msg_len = 0;
		end;				/* We were called with no arguments. */

/* The following lines must be modified depending on the error reporting strategy used. */

	if level_6_iocbp ^= null () & comm_buffer_ptr ^= null ()
	     then do;				/* Tell the Level 6. */

dcl  pic_err_msg_len	       pic "99";

		pic_err_msg_len = min (99, err_msg_len);

		call ioa_$rsnpnnl ("CU^a^aR ", comm_buffer, level_6_chars_to_write, pic_err_msg_len,
		     substr (err_msg, 1, pic_err_msg_len));

		call l6_tran_util_$put_chars (level_6_iocbp, comm_buffer_ptr, level_6_chars_to_write, code);
		end;

	P_error_message = substr (err_msg, 1, err_msg_len);
	P_code = caller_code;

/* Clean up and do a non-local goto back to the outermost block. */

	call Cleanup_Handler ();
	goto RETURN;

     end ERROR;

Cleanup_Handler:
     proc ();

	return;					/* Nothing to do for now. */

     end Cleanup_Handler;

     end l6_tran_send_file_;
