/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
/*****************************************************************************/
/*							       */
/*   DESCRIPTION:						       */
/*							       */
/*        This subroutine handles utility functions for Level 6 file	       */
/*   transfer.  Basically these are reading and writing to or from the Level */
/*   6.							       */
/*							       */
/*							       */
/*   JOURNALIZATION:					       */
/*							       */
/*   1) Written 5/82 by R.J.C. Kissel.				       */
/*   2) Modified 7/83 by R.J.C. Kissel to add an entry to do a read_status,  */
/*      used to check for L6 error messages.			       */
/*							       */
/*****************************************************************************/

/* format: style3,linecom,ifthenstmt,indthenelse,^indnoniterdo,indnoniterend,initcol3,dclind5,idind32 */

l6_tran_util_:
     proc ();
	return;

/* Parameters */

dcl  P_iocbp		       ptr parameter;
dcl  P_input_chars_ptr	       ptr parameter;
dcl  P_input_buffer_len	       fixed bin (21) parameter;
dcl  P_input_chars_len	       fixed bin (21) parameter;

dcl  P_output_chars_ptr	       ptr parameter;
dcl  P_output_chars_len	       fixed bin (21) parameter;

dcl  P_code		       fixed bin (35) parameter;

/* Automatic */

dcl  code			       fixed bin (35);

dcl  input_chars_ptr	       ptr;
dcl  input_buffer_len	       fixed bin (21);
dcl  input_chars_len	       fixed bin (21);
dcl  input_chars		       char (input_chars_len) based (input_chars_ptr);

dcl  iocbp		       ptr;
dcl  line_status		       bit (72);

dcl  output_chars_ptr	       ptr;
dcl  output_chars_len	       fixed bin (21);
dcl  output_chars		       char (output_chars_len) based (output_chars_ptr);

dcl  1 read_status_info	       aligned like tty_read_status_info;

/* Internal Static */

dcl  debug		       bit (1) internal static init ("0"b);
dcl  debug_iocbp		       ptr internal static init (null ());

/* External Constants */

dcl  error_table_$line_status_pending
			       fixed bin (35) ext static;

/* External Entries */

dcl  ioa_$ioa_switch	       entry () options (variable);
dcl  iox_$control		       entry (ptr, char (*), ptr, fixed bin (35));
dcl  iox_$get_chars		       entry (ptr, ptr, fixed bin (21), fixed bin (21), fixed bin (35));
dcl  iox_$get_line		       entry (ptr, ptr, fixed bin (21), fixed bin (21), fixed bin (35));
dcl  iox_$put_chars		       entry (ptr, ptr, fixed bin (21), fixed bin (35));
dcl  ipc_$drain_chn		       entry (fixed bin (71), fixed bin (35));

/* Builtin Functions and Conditions */

dcl  addr			       builtin;

/*****************************************************************************/
/*							       */
/*   ENTRY: get_chars					       */
/*							       */
/*        This entry gets characters from the Level 6 and handles debugging  */
/*   and line status.					       */
/*							       */
/*****************************************************************************/

get_chars:
     entry (P_iocbp, P_input_chars_ptr, P_input_buffer_len, P_input_chars_len, P_code);

	iocbp = P_iocbp;
	input_chars_ptr = P_input_chars_ptr;
	input_buffer_len = P_input_buffer_len;

	call iox_$get_chars (iocbp, input_chars_ptr, input_buffer_len, input_chars_len, code);

	do while (code = error_table_$line_status_pending);
	     call iox_$control (iocbp, "line_status", addr (line_status), code);

	     if debug then call ioa_$ioa_switch (debug_iocbp, "Line status from L6: ^.3b", line_status);

	     call iox_$get_chars (iocbp, input_chars_ptr, input_buffer_len, input_chars_len, code);
	end;

	if debug
	     then call ioa_$ioa_switch (debug_iocbp, "From L6: ^d characters^/""^a""", input_chars_len, input_chars);

	P_input_chars_len = input_chars_len;
	P_code = code;

	return;

/*****************************************************************************/
/*							       */
/*   ENTRY: get_line					       */
/*							       */
/*        This entry gets a line from the Level 6 and handles debugging      */
/*   and line status.					       */
/*							       */
/*****************************************************************************/

get_line:
     entry (P_iocbp, P_input_chars_ptr, P_input_buffer_len, P_input_chars_len, P_code);

	iocbp = P_iocbp;
	input_chars_ptr = P_input_chars_ptr;
	input_buffer_len = P_input_buffer_len;

	call iox_$get_line (iocbp, input_chars_ptr, input_buffer_len, input_chars_len, code);

	do while (code = error_table_$line_status_pending);
	     call iox_$control (iocbp, "line_status", addr (line_status), code);

	     if debug then call ioa_$ioa_switch (debug_iocbp, "Line status from L6: ^.3b", line_status);

	     call iox_$get_line (iocbp, input_chars_ptr, input_buffer_len, input_chars_len, code);
	end;

	if debug
	     then call ioa_$ioa_switch (debug_iocbp, "From L6: ^d characters^/""^a""", input_chars_len, input_chars);

	P_input_chars_len = input_chars_len;
	P_code = code;

	return;


/*****************************************************************************/
/*							       */
/*   ENTRY: put_chars					       */
/*							       */
/*        This entry sends characters to the Level 6 and handles debugging   */
/*   and line status.					       */
/*							       */
/*****************************************************************************/

put_chars:
     entry (P_iocbp, P_output_chars_ptr, P_output_chars_len, P_code);

	iocbp = P_iocbp;
	output_chars_ptr = P_output_chars_ptr;
	output_chars_len = P_output_chars_len;

	if debug
	     then call ioa_$ioa_switch (debug_iocbp, "To L6: ^d characters^/""^a""", output_chars_len, output_chars);

	call iox_$put_chars (iocbp, output_chars_ptr, output_chars_len, code);

	do while (code = error_table_$line_status_pending);
	     call iox_$control (iocbp, "line_status", addr (line_status), code);

	     if debug then call ioa_$ioa_switch (debug_iocbp, "Line status from L6: ^.3b", line_status);

	     call iox_$put_chars (iocbp, output_chars_ptr, output_chars_len, code);
	end;

	P_code = code;

	return;

/*****************************************************************************/
/*							       */
/*   ENTRY: read_status					       */
/*							       */
/*        This entry returns true if there is input pending and false	       */
/*   otherwise.  It handles line_status_pending and any error codes.  Since  */
/*   we don't care about wakeups, it also drains the event channel on every  */
/*   call.						       */
/*							       */
/*****************************************************************************/

read_status:
     entry (P_iocbp) returns (bit (1));

	iocbp = P_iocbp;

	call iox_$control (iocbp, "read_status", addr (read_status_info), code);

	do while (code = error_table_$line_status_pending);
	     call iox_$control (iocbp, "line_status", addr (line_status), code);

	     if debug then call ioa_$ioa_switch (debug_iocbp, "Line status from L6: ^.3b", line_status);

	     call iox_$control (iocbp, "read_status", addr (read_status_info), code);
	end;

	call ipc_$drain_chn (read_status_info.event_channel, code);

	if debug
	     then call ioa_$ioa_switch (debug_iocbp,
		     "Called read_status, ev_chn = ^o, input_pending = ^b, code = ^d.",
		     read_status_info.event_channel, read_status_info.input_pending, code);

	return (read_status_info.input_pending);

debug_on:
     entry ();
	debug = "1"b;
	return;




debug_off:
     entry ();
	debug = "0"b;
	return;




set_debug_iocb:
     entry (diocbp);

dcl  diocbp		       ptr;
dcl  iox_$user_output	       ptr ext static;
dcl  null			       builtin;

	if diocbp = null ()
	     then debug_iocbp = iox_$user_output;
	     else debug_iocbp = diocbp;

	return;

/* Include Files */

%include tty_read_status_info;

     end l6_tran_util_;
