/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


	

/****^  HISTORY COMMENTS:
  1) change(86-05-02,Elhard), approve(86-05-02,MCR7391),
     audit(86-07-18,DGHowe), install(86-11-20,MR12.0-1222):
     Modified to call object_lib_$initiate to initiate segments or MSFs
     referenced by pathname.
                                                   END HISTORY COMMENTS */


/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* NAME:  cv_entry_								*/
	/*									*/
	/*      This subroutine converts virtual entry character strings to entry values.	*/
	/*									*/
	/* Status:								*/
	/*									*/
	/* 0) Created by  Gary C. Dixon  on October 22, 1976.				*/
	/* 1) Modified by Bernard S. Greenberg on July 6, 1977 for refname => refname$refname	*/
	/* 2) Modified by Steve Herbst on May 10, 1979 to ignore trailing blanks.		*/
	/* 3) Modified by Gary Dixon on October 23, 1979 - support path$entry_pt, cleanup code	*/
          /* 4) Modified by Paul W. Benjamin on November 5, 1981 - remove entrypoint name validation*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */



/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


cv_entry_:		procedure (string, Pref, Acode)
		returns 	(entry);

     dcl						/*	Parameters			*/
     	string			char (*),		/* virtual pointer character string. (In)	*/
	Pref			ptr,		/* ptr to segment in referencing_dir. (In)	*/
	Acode			fixed bin(35);	/* status code. (Out)			*/

     dcl						/*	Automatic Variables			*/
	E			entry variable,	/* entry variable which is returned.		*/
         (Lsegment_id, Lword_offset)	fixed bin,	/* length of various parts of virtual pointer.	*/
         (Psegment_id, Pword_offset, Pdelim)
				ptr,		/* pointer to various parts of virtual pointer.	*/
	P			ptr,		/* returned pointer.			*/
	code			fixed bin(35),
	dir			char(168),	/* dir part of segment's pathname.		*/
	ent			char(32),		/* entry part of segment's pathname.		*/
	i			fixed bin,
	id_case			fixed bin,	/* type of segment identifier in virtual pointer.	*/
						/*   1 = PATHNAME, 2 = REF_NAME.		*/
	offset_case		fixed bin,	/* type of offset value in virtual pointer.	*/
						/*   5 = MISSING, 6 = WORD, 7 = ENTRY_PT_DEFAULT,	*/
						/*   8 = ENTRY_PT.				*/
	word			fixed bin(35);	/* numeric value of word offset.		*/

     dcl						/*	Based Variables			*/
	delim			char(1) based (Pdelim),
	segment_id		char(Lsegment_id) based (Psegment_id),
	string_array (length(string))	char(1) based (Psegment_id),
	word_offset		char(Lword_offset) based (Pword_offset),
	word_offset_array (Lword_offset)
				char(1) based (Pword_offset);
 
     dcl (addr, length, null, ptr, reverse, rtrim, search, verify)
				builtin;

     dcl						/*	Entries				*/
	cu_$decode_entry_value	entry (entry, ptr, ptr),
	cu_$make_entry_value	entry (ptr, entry),
	cv_oct_check_		entry (char(*), fixed bin(35)) returns (fixed bin(35)),
	expand_pathname_		entry (char(*), char(*), char(*), fixed bin(35)),
	hcs_$make_entry		entry (ptr, char(*), char(*), entry, fixed bin(35)),
	object_lib_$initiate	entry (char(*), char(*), char(*), bit(1), ptr,
				      fixed bin(24), bit(1), fixed bin(35));

     dcl						/*	Static Variables and Constants	*/
         (PATHNAME			init(1),		/* acceptable values which id_case may take on.	*/
	REF_NAME			init(2),
	MISSING			init(5),		/* acceptable values offset_case may take on.	*/
	WORD			init(6),
	ENTRY_PT_DEFAULT		init(7),
	ENTRY_PT			init(8)) fixed bin int static options(constant),
	V_BAR			char(1) int static options(constant) init("|"),
         (error_table_$bad_conversion,
	error_table_$bigarg,
	error_table_$entlong,
          error_table_$improper_data_format,
	error_table_$out_of_bounds)	fixed bin(35) ext static,
	sys_info$max_seg_size	fixed bin(35) ext static;


/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* Acceptable virtual pointer strings have the following forms:			*/
	/*									*/
	/* CASES									*/
	/*  I O	FORM			COMMENT					*/
	/* -----	-----------------------	------------------------------------------	*/
	/*  1 5	path|			= path|0					*/
	/*  1 6	path|W			octal word W of path			*/
	/*  1 7	path			= path|[entry path]				*/
	/*  1 8	path|entry_pt		word identified by entry point entry_pt in path	*/
	/*  1 8	path$entry_pt		word identified by entry point entry_pt in path	*/
	/*				  (path must contain < or > chars.		*/
	/*									*/
	/*  2 5	ref_name$			= ref_name$0				*/
	/*  2 6	ref_name$W		octal word W of seg with reference name ref_name.	*/
	/*  2 8	ref_name$entry_pt		word identified by entry point entry_pt in seg	*/
	/*				with reference name ref_name			*/
	/*									*/
	/* CASES:  I = segment identifier case (id_case), O = offset value case (offset_case).	*/
	/*	 I = 1 => PATHNAME			O = 5 => MISSING (no offset given)	*/
	/*	   = 2 => REF_NAME			  = 6 => WORD			*/
	/*					  = 7 => ENTRY_PT_DEFAULT		*/
	/*					  = 8 => ENTRY_PT			*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

	Acode = 0;				/* initialize return code.			*/
	code = error_table_$improper_data_format;	/* initialize format error code.		*/
	id_case = PATHNAME;				/* start by assuming we have a path segment	*/
	offset_case = ENTRY_PT_DEFAULT;		/*   identifier, and no offset value.		*/

	Psegment_id = addr(string);			/* Split identifier into seg_id, delim, & offset. */
	i = search (reverse(string), "|$");		/* Look for the delimiter.			*/
	if i > 0 then i = length(string) - (i-1);
	if i = 0 then do;				/* CASE: No delimiter.			*/
	     Pdelim = addr(V_BAR);			/*   Assume |.				*/
	     Lsegment_id = length(rtrim(string));	/*   Address seg_id.			*/
	     Pword_offset = addr(Pword_offset);		/*   Indicate no word offset.			*/
	     Lword_offset = 0;
	     end;
	else do;					/* CASE: Delimiter found.			*/
	     Pdelim = addr(string_array(i));		/*   Remember delimiter.			*/
	     Lsegment_id = i-1;			/*   Address seg_id.			*/
	     Lsegment_id = length(rtrim(segment_id));
	     if i < length(string) then do;		/*   Look for word offset.			*/
		Pword_offset = addr(string_array(i+1)); /*     Remember where word offset is.		*/
		Lword_offset = length(string) - i;
		Lword_offset = length(rtrim(word_offset));
		i = verify(word_offset, " ");
		if i > 1 then do;
		     Pword_offset = addr(word_offset_array(i));
		     Lword_offset = Lword_offset - (i-1);
		     end;
		if length(word_offset) = 0 then
		     offset_case = MISSING;
		end;
	     else do;				/*   No word offset.			*/
		Pword_offset = addr(Pword_offset);
		Lword_offset = 0;
		offset_case = MISSING;		/*   path  ==> path$[entry path], but		*/
		end;				/*   path| ==> path|0			*/
	     end;

	if  (delim = "$") & (search (segment_id, "><") > 0)  then do;
						/* CASE: seg_id is a pathname.		*/
	     if length(segment_id) > 168 then do;
		code = error_table_$bigarg;
		go to ERROR;
		end;
	     end;
	else if delim = "$" then do;			/* CASE: seg_id is a ref_name.		*/
	     id_case = REF_NAME;
	     if length(segment_id) > 32 then do;
		code = error_table_$entlong;
		go to ERROR;
		end;
	     end;
	else if delim = "|" then;			/* CASE: seg_id is path.			*/
	else go to ERROR;				/* CASE: seg_id followed by bad delim.  We should	*/
						/*   never get to this line.			*/

	if length(word_offset) > 0 then do;		/* Evaluate word offset.			*/
	     offset_case = WORD;			/*   Start by assuming word offset.		*/
	     i = verify (word_offset, "01234567");	/*   Check for octal word offset.		*/
	     if i = 0 then;				/*   CASE: only word offset given.		*/
	     else do;				/*   CASE: no word offset, just entry_pt.	*/
		offset_case = ENTRY_PT;
		if length(word_offset) > 256 then do;	/*     Validate entry point length.		*/
		     code = error_table_$entlong;
		     go to ERROR;
		     end;
		end;
	     end;
	if  (delim = "$") & (id_case = PATHNAME) & (offset_case ^= ENTRY_PT) then do;
	     code = error_table_$improper_data_format;
	     go to ERROR;
	     end;
	if  (delim = "|") & (id_case = PATHNAME) & (offset_case = ENTRY_PT_DEFAULT) &
	    (search (segment_id, "><") = 0) then do;
	     id_case = REF_NAME;
	     if length(segment_id) > 32 then do;
		code = error_table_$entlong;
		go to ERROR;
		end;
	     end;

	if id_case = PATHNAME then do;		/* CASE: seg_id is path			*/
	     call expand_pathname_ (segment_id, dir, ent, code);
	     if code ^= 0 then go to ERROR;		/*     Expand the pathname given in virtual ptr.	*/
	     call object_lib_$initiate (dir, ent, ent, ""b, P, (0), (""b), code);
	     if P = null then go to ERROR;
	     end;
	else ent = segment_id;			/* CASE: seg_id = ref_name			*/


	if offset_case = MISSING then do;		/* No offset was given.			*/
	     call hcs_$make_entry (Pref, ent, "", E, code);
	     if code ^= 0 then go to ERROR;		/*     Get ptr to beginning of segment.		*/
	     end;
	else if offset_case = ENTRY_PT then do;		/* An entry point was given.			*/
	     call hcs_$make_entry (Pref, ent, word_offset, E, code);
	     if code ^= 0 then go to ERROR;
	     end;
	else if offset_case = ENTRY_PT_DEFAULT then do;	/* Default entry point name for a pathname given.	*/
	     call hcs_$make_entry (Pref, ent, ent, E, code);
	     if code ^= 0 then go to ERROR;
	     end;
	else do;					/* A word was given.			*/
	     word = cv_oct_check_ (word_offset, code);	/*     Convert/validate word offset.		*/
	     if code ^= 0 then do;
		code = error_table_$bad_conversion;
		go to ERROR;
		end;
	     if (0 <= word) & (word <= sys_info$max_seg_size) then;
	     else do;
		code = error_table_$out_of_bounds;
		go to ERROR;
		end;
	     call hcs_$make_entry (Pref, ent, "", E, code);
	     if code ^= 0 then go to ERROR;		/*     Get ptr to base of segment.		*/
						/*     Cause linkage to be combined.		*/
	     call cu_$decode_entry_value (E, P, null);	/*     Convert entry value into a pointer.	*/
	     P = ptr (P, word);			/*     Apply word offset to pointer.		*/
	     call cu_$make_entry_value (P, E);		/*     Convert pointer back to entry value.	*/
	     end;

	return (E);

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


ERROR:	Acode = code;
	return (cv_entry_);				/* return ptr to us, along with error code.	*/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */

	end cv_entry_;
