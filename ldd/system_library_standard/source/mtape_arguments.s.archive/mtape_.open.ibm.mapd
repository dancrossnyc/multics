/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/*	This is the argument processing definition source language for the
	open description of the mtape_ IBM Per-Format module. This may be
	compiled with the mtape_$mtape_cv_apd command and the binary result
	will be stored in the specified value segment data space with the 
	name of mtape_.open.ibm. The syntax of the command line to perform
	this task would be:

	mtape_$mtape_cv_apd mtape_.open.ibm.mapd -target <value_seg_path>

	where <value_seg_path> is the pathname of the desired value segment
	which will be created if it does not exist. If no "-target" control 
	arg is given, then the binary definition is stored in the users
	default value segment ([home_dir]>[user name].value).

	Modification history:

	Created by J. A. Bush 03/31/83
*/

Program_name:		mtape_.open.ibm;

Default_linear_form:	"-block 8192 -format vb -mode ebcdic",
			" -default_fixed_record 80 -default_variable_record 8192",
			" -default_spanned_record 1044480",
			" -next_file -no_display -no_force -not_dos -no_system_use";

Validate_result:		"   if [or [equal (v vb vs vbs) [lowercase &(format)]]] -then",
			" ""   [if [nless &(block) 32761] -then",
			"          true",
			"      -else false] "" ",
			"   -else true";

Validate_result_explanation:	"The specified block length (&(block)) for IBM ""&(format)"" format,",
			" is greater than the maximum of 32760 bytes.";


Validate_result:		"   if [exists argument &(record)] -then",
			" ""   [if [or [equal (u f v fb vb) [lowercase &(format)]]] -then",
			" """"     [if [not [ngreater &(record) &(block)]] -then",
			"              true",
			"          -else false] """" ",
			"      -else true] "" ",
			"   -else true";

Validate_result_explanation:	"The specified record length (&(record)) for IBM ""&(format)"" format,",
			" cannot be greater than the specified block length (&(block)).";

Validate_result:		"   if [not [exists argument &(record)]] -then",
			" ""   [if [or [equal (u f fb) [lowercase &(format)]]] -then",
			" """"     [if [not [ngreater &(default_fix_rlen) &(block)]] -then",
			"              true",
			"          -else false] """" ",
			"      -else true] "" ",
			"   -else true";

Validate_result_explanation:	"The specified default fixed record length (&(default_fix_rlen))",
			" for IBM ""&(format)"" format, cannot be greater than the",
			" specified block length (&(block)).";

Validate_result:		"    if [not [exists argument &(record)]] -then",
			" ""    [if [or [equal (v vb) [lowercase &(format)]]] -then",
			" """"      [if [not [ngreater &(default_var_rlen) &(block)]] -then",
			"               true",
			"           -else false] """" ",
			"       -else true] "" ",
			"    -else true";

Validate_result_explanation:	"The specified default variable record length (&(default_var_rlen))",
			" for IBM ""&(format)"" format, cannot be greater than the",
			" specified block length (&(block)).";

Option:			append;
  Option_name:		-append, -app;
  Exclude:		extend, last_file, modify, next_file;
  Antonym:		-no_append, -napp;
 Argument:		flag;
   Default_value:		"true";
   Antonym_value:		"false";

Option:			block;
  Option_name:		-block, -bk;
  First_argument:		block_length;
 Argument:		block_length;
   Presence:		required;
   Validate:		"and [ngreater &r1 17] [nless &r1 99997]";
   Validate_explanation:	"The block length value must not be less than",
			" 18 characters, nor greater than 99996",
			" characters.";

Option:			comment;
  Option_name:		-comment, -com;
  First_argument:		comment_text;
 Argument:		comment_text;
   Presence:		required;
   Validate:		"nless [length &r1] 81";
   Validate_explanation:	"The comment text may not exceed 80 characters",
			" in length.";

Option:			default_fix_rlen;
  Option_name:		-default_fixed_record, -dfr;
  First_argument:		record_length;
 Argument:		record_length;
   Presence:		required;
   Validate:		"and [ngreater &r1 17] [nless &r1 99997]";
   Validate_explanation:	"Default fixed record lengths must fall in the",
			" range of 18 to 99996 characters.";

Option:			default_span_rlen;
  Option_name:		-default_spanned_record, -dsr;
  First_argument:		record_length;
 Argument:		record_length;
   Presence:		required;
   Validate:		"and [ngreater &r1 17] [nless &r1 1044481]";
   Validate_explanation:	"Default spanned record lengths must fall in the",
			" range of 18 to 1044480 characters.";

Option:			default_var_rlen;
  Option_name:		-default_variable_record, -dvr;
  First_argument:		record_length;
 Argument:		record_length;
   Presence:		required;
   Validate:		"and [ngreater &r1 17] [nless &r1 32761]";
   Validate_explanation:	"Default variable record lengths must fall in the",
			" range of 18 to 32760 characters.";

Option:			display;
  Option_name:		-display, -ds;
  Antonym:		-no_display, -nds;
 Argument:		flag;
   Default_value:		"true";
   Antonym_value:		"false";

Option:			pfm_opt_sw_1;
  Option_name:		-dos;
  Antonym:		-ndos, -not_dos;
 Argument:		flag;
   Default_value:		"true";
   Antonym_value:		"false";

Option:			pfm_opt_sw_2;
  Option_name:		-system_use, -sys_use;
  Antonym:		-no_system_use, -nsys_use;
 Argument:		flag;
   Default_value:		"true";
   Antonym_value:		"false";

Option:			expires;
  Option_name:		-expires, -exp;
  First_argument:		expiration_date;
 Argument:		expiration_date;
   Presence:		required;
   Validate:		"date_time_valid &r1";
   Explanation:		"The expiration date value given is not",
			" acceptable to the convert_date_to_binary_",
			" subroutine.";

Option:			extend;
  Option_name:		-extend, -ext;
  Exclude:		append, modify;
  Antonym:		-no_extend, -next;
 Argument:		flag;
   Default_value:		"true";
   Antonym_value:		"false";

Option:			force;
  Option_name:		-force, -fc;
  Antonym:		-no_force, -nfc;
 Argument:		flag;
   Default_value:		"true";
   Antonym_value:		"false";

Option:			format;
  Option_name:		-format, -fmt;
  First_argument:		file_format;
 Argument:		file_format;
   Presence:		required;
   Validate:		"or [equal (u f v vs fb vb vbs) [lowercase &r1]]";
   Explanation:		"Acceptable file format specifications are",
			" ""u"", ""f"", ""v"", ""vs"", ""fb"", ""vb"",",
			" and ""vbs"" only.";

Option:			label_entry;
  Option_name:		-label_entry, -lbe;
  First_argument:		external_entry;
 Argument:		external_entry;
   Presence:		required;
   Validate:		"not [on active_function_error ""nothing"" -bf ""nothing [wh &r1]""]";
   Explanation:		"Could not find the ""&(label_entry)"" label",
			" entry using the current object search rules.";
 
Option:			last_file;
  Option_name:		-last_file, -lf;
  Exclude:		append, next_file, name, number;
  Antonym:		-not_last_file, -nlf;
 Argument:		flag;
   Default_value:		"true";
   Antonym_value:		"false";

Option:			mode;
  Option_name:		-mode, -md;
  First_argument:		recording_mode;
 Argument:		recording_mode;
   Presence:		required;
   Validate:		"or [equal (ascii ebcdic binary bin) [lowercase &r1]]";
   Explanation:		"Acceptable recording mode values are ""ascii"",",
			" ""ebcdic"", ""binary"", or ""bin"" only.";

Option:			modify;
  Option_name:		-modify, -mod;
  Exclude:		append, extend;
  Antonym:		-no_modify, -nmod;
 Argument:		flag;
   Default_value:		"true";
   Antonym_value:		"false";

Option:			name;
  Option_name:		-name, -nm;
  Exclude:		next_file, last_file, replace;
  First_argument:		file_name;
 Argument:		file_name;
   Presence:		required;
   Validate:		"nless [length &r1] 33";
   Explanation:		"File name specification may not exceed 32",
			" characters in length.";


Option:			next_file;
  Option_name:		-next_file, -nf;
  Exclude:		append, last_file, number, name;
  Antonym:		-not_next_file, -nnf;
 Argument:		flag;
   Default_value:		"true";
   Antonym_value:		"false";

Option:			number;
  Option_name:		-number, -nb;
  Exclude:		next_file, last_file;
  First_argument:		sequence_number;
 Argument:		sequence_number;
   Presence:		required;
   Validate:		"and [ngreater &r1 0] [nless &r1 10000]";
   Explanation:		"Valid file sequence numbers must be in the",
			" range of 1 to 99999.";

Option:			record;
  Option_name:		-record, -rec;
  Exclude:		default_fix_rlen, default_span_rlen, default_var_rlen;
  First_argument:		record_length;
 Argument:		record_length;
   Presence:		required;
   Validate:		"and [ngreater &r1 17] [nless &r1 1044481]";
   Validate_explanation:	"Valid record lengths must fall in the range of",
			" 18 to 1044480 characters.";

Option:			replace;
  Option_name:		-replace, -rpl;
  Exclude:		name, next_file, last_file;
  First_argument:		file_name;
 Argument:		file_name;
   Presence:		required;
   Validate:		"nless [length &r1] 33";
   Validate_explanation:	"The length of the replacement id file name",
			" must not exceed 32 characters.";

End;
