/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/*	Find an include file on behalf of translators

	Rewritten to use search_paths_ 02-Nov-78 by Monte Davidoff.
*/
find_include_file_:
initiate_count:
     procedure (P_translator, P_referencing_ptr, P_entryname, P_bit_count, P_include_seg_ptr, P_code);

	declare P_translator	 char (*);	/* (Input) name of the calling translator */
	declare P_referencing_ptr	 pointer;		/* (Input) pointer into the segment needing the include file */
	declare P_entryname		 char (*);	/* (Input) entryname of the include file */
	declare P_bit_count		 fixed binary (24); /* (Output) include file bit count */
	declare P_include_seg_ptr	 pointer;		/* (Output) pointer to the include file */
	declare P_code		 fixed binary (35); /* (Output) standard status code */

/* automatic */

	declare ref_dir_name	 char (168);
	declare ref_dir_name_length	 fixed binary;
	declare ref_entryname	 char (32);
	declare include_dir_name	 char (168);

/* builtin */

	declare null		 builtin;

/* external static */

	declare error_table_$zero_length_seg
				 fixed binary (35) external static;

/* external entry */

	declare hcs_$fs_get_path_name	 entry (pointer, char (*), fixed binary, char (*), fixed binary (35));
	declare hcs_$initiate_count	 entry (char (*), char (*), char (*), fixed binary (24), fixed binary (2), pointer,
				 fixed binary (35));
	declare search_paths_$find_dir entry (char (*), pointer, char (*), char (*), char (*), fixed binary (35));

	P_bit_count = 0;
	P_include_seg_ptr = null;
	P_code = 0;

	if P_referencing_ptr = null
	then ref_dir_name = "";
	else do;
		call hcs_$fs_get_path_name (P_referencing_ptr, ref_dir_name, ref_dir_name_length, ref_entryname, P_code);
		if P_code ^= 0
		then return;
	     end;

	call search_paths_$find_dir ("translator", null, P_entryname, ref_dir_name, include_dir_name, P_code);
	if P_code ^= 0
	then return;

	call hcs_$initiate_count (include_dir_name, P_entryname, "", P_bit_count, 1, P_include_seg_ptr, P_code);
	if P_include_seg_ptr ^= null
	then P_code = 0;

	if P_code = 0 & P_bit_count = 0
	then P_code = error_table_$zero_length_seg;
     end find_include_file_;
