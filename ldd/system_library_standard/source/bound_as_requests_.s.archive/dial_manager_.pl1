/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */

/* format: style4 */

/* DIAL_MANAGER_ - This subroutine is the user interface to the answering service
   dial facility.

   Written 750324 by Paul Green
   Modified 03/18/76 by David Jordan for Auto Call.
   Modified 11/9/76 by S.T. Kent to allow selective release of  dialed channels.
   and to accept request to become a registered dial server.
   Modified April 1979 by Larry Johnson for release_channel_no_hangup
   Modified November 1980 by E.N.Kittlitz for version_2 requests,
   release_dial_id.
   Modified March 1981 by Robert Coren to add tandd_attach and release_channel_no_listen entry points
   Modified May 1983 by E. N. Kittlitz for version_3: access_class.
   Modified 84-04-04 by BIM for version_4: privileged_server.
   Modified 84-11-06 by E. Swenson to recompile after include file changes.
*/

allow_dials:
     procedure (bv_request_ptr, bv_code);

/* parameters */

dcl  (bv_request_ptr ptr,
     bv_code fixed bin (35)
     ) parameter;

/* automatic */

dcl  dial_control_process bit (36) aligned,
     ldx fixed bin,
     i fixed bin,
     dial_control_channel fixed bin (71),
     request_mseg_dir char (168),
     request_mseg char (32),
     code fixed bin (35),
     hangup_channel bit (1),
     dont_listen bit (1),
     tandd bit (1),
     sub_string char (168),
     reservation_string char (168),
     release_dial_id_sw bit (1) aligned,
     request_uid bit (72) aligned;

dcl  1 dial_rq aligned like dial_server_request;

dcl  1 wait_list aligned,				/* channels to block on */
       2 n_channels fixed bin,
       2 pad bit (36),
       2 channel_id (1) fixed bin (71);

dcl  1 reply aligned,				/* filled in by ipc_$block */
       2 channel_id fixed bin (71),
       2 message fixed bin (71),
       2 sending_process bit (36) aligned,
       2 origin bit (36) aligned,
       2 channel_index fixed bin;

/* conditions */

dcl  conversion condition;

/* external static */

dcl  (error_table_$action_not_performed,
     error_table_$bad_conversion,
     error_table_$invalid_line_type,
     error_table_$bad_arg,
     error_table_$unimplemented_version) fixed bin (35) external static;

/* entries */

dcl  system_info_$request_chn entry (bit (36) aligned, fixed bin (71), char (*), char (*)),
     hcs_$wakeup entry (bit (36) aligned, fixed bin (71), bit (72) aligned, fixed bin (35)),
     message_segment_$add_file entry (char (*), char (*), ptr, fixed bin (18), bit (72) aligned, fixed bin (35)),
     ipc_$block entry (ptr, ptr, fixed bin (35)),
     convert_ipc_code_ entry (fixed bin (35)),
     convert_dial_message_ entry (fixed bin (71), char (*), char (*), fixed bin, bit (36) aligned, fixed bin (35));

/* builtins */

dcl  (addr, after, before, convert, hbound, lbound, ltrim, size, string, substr) builtin;
%page;
/* include files */

%include dial_manager_arg;
%include as_request_header;
%include dial_server_request;
%include line_types;
%page;

/* entry to request to become a non-registered dial server */

	bv_code = 0;

	request_ptr = bv_request_ptr;
	call fill_request;				/* fill out red tape */
	dial_rq.header.type = ASR_DIAL_SERVER;
	dial_rq.flags.start = "1"b;			/* this is a request to allow dials */

	call send_request;				/* communicate with boss */
	return;


/* Entry for a dial server process to release a selected channel dialed to him */

release_channel:
     entry (bv_request_ptr, bv_code);

	hangup_channel = "1"b;
	dont_listen = "0"b;
	go to release_channel_join;

release_channel_no_hangup:
     entry (bv_request_ptr, bv_code);

	hangup_channel = "0"b;
	dont_listen = "0"b;
	go to release_channel_join;
release_channel_no_listen:
     entry (bv_request_ptr, bv_code);

	dont_listen = "1"b;
	hangup_channel = "1"b;

release_channel_join:
	bv_code = 0;

	request_ptr = bv_request_ptr;			/* copy ptr */
	call fill_request;
	dial_rq.header.type = ASR_DIAL_SERVER;
	dial_rq.flags.release_channel = "1"b;		/* this is a channel release request */
	dial_rq.channel_name = request_ptr -> dial_manager_arg.channel_name; /* this is the channel to hangup */
	dial_rq.flags.no_hangup = ^hangup_channel;
	dial_rq.flags.no_listen = dont_listen;

	call send_request;
	return;

/* Entry to request to allow dials on a registered dial qualifier */

registered_server: entry (bv_request_ptr, bv_code);

	bv_code = 0;

	request_ptr = bv_request_ptr;

	call fill_request;

	dial_rq.header.type = ASR_DIAL_SERVER;
	dial_rq.flags.registered_server = "1"b;
	dial_rq.flags.start = "1"b;			/* this is in for test purposes only */

	call send_request;
	return;

/* Entries to stop being a dial server */

release_dial_id:					/* stop as server, but keep current calls */
     entry (bv_request_ptr, bv_code);

	release_dial_id_sw = "1"b;
	go to shutoff_dials_common;


shutoff_dials:					/* stop as server and hangup all calls */
     entry (bv_request_ptr, bv_code);
	release_dial_id_sw = "0"b;

shutoff_dials_common:
	bv_code = 0;

	request_ptr = bv_request_ptr;			/* copy ptr for efficiency */
	call fill_request;
	dial_rq.header.type = ASR_DIAL_SERVER;
	if release_dial_id_sw then dial_rq.flags.release_dial_id = "1"b; /* keep current lines */
	else dial_rq.flags.stop = "1"b;		/* hang 'em up */

	call send_request;
	return;

/* Entry for a privileged process (daemons) to call to attach any
   channel in the lines file as if it had dialed to the process itself. */

privileged_attach:
     entry (bv_request_ptr, bv_code);

	tandd = "0"b;
	go to priv_attach_join;

tandd_attach:
     entry (bv_request_ptr, bv_code);

	tandd = "1"b;

priv_attach_join:
	bv_code = 0;

	request_ptr = bv_request_ptr;			/* copy ptr for efficiency */
	call fill_request;
	dial_rq.header.type = ASR_DIAL_SERVER;
	dial_rq.channel_name = request_ptr -> dial_manager_arg.channel_name;
	dial_rq.flags.privileged_attach = "1"b;		/* ask for the channel */
	dial_rq.flags.tandd_attach = tandd;

	call send_request;
	return;

/* Entry for a user to attach and dial an auto call line. */

dial_out:
     entry (bv_request_ptr, bv_code);

	bv_code = 0;

	request_ptr = bv_request_ptr;

	call fill_request;

	dial_rq.channel_name = request_ptr -> dial_manager_arg.channel_name; /* remember requested line */
	dial_rq.header.type = ASR_DIAL_OUT;		/* we're dialing out */

	if request_ptr -> dial_manager_arg.version >= dial_manager_arg_version_2 then do; /* look at new fields */
	     dial_rq.dial_out_destination = request_ptr -> dial_manager_arg.dial_out_destination;
	     if request_ptr -> dial_manager_arg.reservation_string ^= "" then do; /* RCP-like description */
		reservation_string = request_ptr -> dial_manager_arg.reservation_string; /* efficiency, svp. */
		sub_string = ltrim (before (reservation_string, ",")); /* get a device requirement */
		do while (sub_string ^= "");
		     if index (sub_string, "baud_rate=") = 1 then do;
			on conversion begin;	/* prevent the outrageous */
				code = error_table_$bad_conversion;
				goto return_code;
			     end;
			sub_string = after (sub_string, "=");
			if sub_string = "" then go to bad_arg_found;
			dial_rq.baud_rate = convert (dial_rq.baud_rate, sub_string);
			revert conversion;
		     end;
		     else if index (sub_string, "line_type=") = 1 then do;
			sub_string = ltrim (after (sub_string, "=")); /* just the LINE_TYPE */
			ldx = lbound (line_types, 1) - 1; /* flag nothing found yet */
			do i = lbound (line_types, 1) to hbound (line_types, 1) /* is there any such animal? */
			     while (ldx < lbound (line_types, 1));
			     if sub_string = line_types (i) then
				ldx = i;
			end;
			if ldx < lbound (line_types, 1) then do;
			     code = error_table_$invalid_line_type;
			     goto return_code;
			end;
			else dial_rq.line_type = ldx; /* make specification to dial_ctl_ */
		     end;
		     else if index (sub_string, "server_type=") = 1 then do;
			dial_rq.server_type = substr (sub_string, 13);
		     end;
		     else do;
bad_arg_found:		code = error_table_$bad_arg;
			goto return_code;
		     end;
		     reservation_string = after (reservation_string, ","); /* eliminate portion just considered */
		     sub_string = ltrim (before (reservation_string, ",")); /* and set up for next portion */
		end;
	     end;
	end;
	else do;					/* version 1 dial_manager_arg structure */
	     dial_rq.dial_out_destination = request_ptr -> dial_manager_arg.dial_qualifier;
	end;
	call send_request;

	return;

/* Entry to release  a dial out line. */

terminate_dial_out:
     entry (bv_request_ptr, bv_code);

	bv_code = 0;


	request_ptr = bv_request_ptr;

	call fill_request;

	dial_rq.channel_name = request_ptr -> dial_manager_arg.channel_name;
	dial_rq.header.type = ASR_DIAL_OUT;
	dial_rq.flags.release_channel = "1"b;		/* Hang up the line */

	call send_request;

	return;


dial_failed:
	code = error_table_$action_not_performed;

return_code:
	bv_code = code;
	return;
%page;
fill_request:
     procedure;

	if request_ptr -> dial_manager_arg.version < /* dial_manager_arg_version_1 */ 1
	     | request_ptr -> dial_manager_arg.version > dial_manager_arg_version_4
	then do;
	     code = error_table_$unimplemented_version;
	     go to return_code;
	end;

	if request_ptr -> dial_manager_arg.version >= dial_manager_arg_version_2 then
	     request_ptr -> dial_manager_arg.dial_message = -1; /* initialize OUTPUT field */
	call system_info_$request_chn (dial_control_process, dial_control_channel,
	     request_mseg_dir, request_mseg);

	dial_rq.header.version = as_request_version_1;
	dial_rq.header.reply_channel = request_ptr -> dial_manager_arg.dial_channel;

	dial_rq.version = dial_server_request_version_4;
	dial_rq.dial_control_channel = request_ptr -> dial_manager_arg.dial_channel;
	dial_rq.dial_qualifier = request_ptr -> dial_manager_arg.dial_qualifier;
	string (dial_rq.flags) = ""b;
	dial_rq.channel_name = "";
	dial_rq.baud_rate = -1;
	dial_rq.line_type = lbound (line_types, 1) - 1;
	dial_rq.server_type = "";
	dial_rq.dial_out_destination = "";
	dial_rq.access_class = ""b;
	dial_rq.privileged_server = "0"b;

	if (request_ptr -> dial_manager_arg.version >= dial_manager_arg_version_3) then do;
	     if request_ptr -> dial_manager_arg.access_class_required then do;
		dial_rq.access_class = request_ptr -> dial_manager_arg.access_class;
		dial_rq.flags.access_class_specified = "1"b;
	     end;
	     if request_ptr -> dial_manager_arg.version >= dial_manager_arg_version_4 then do;
		if request_ptr -> dial_manager_arg.privileged_operation /* only meaningful for accept dials */
		then dial_rq.privileged_server = "1"b;
	     end;
	     else dial_rq.privileged_server = comm_privilege ();
	end;
	else dial_rq.privileged_server = comm_privilege ();
	return;

     end fill_request;

%page;
send_request:
     procedure;

dcl  cdm_device char (32);				/* these variables are used to avoid */
dcl  cdm_iom char (32);				/* errors from convert_dial_message */
dcl  cdm_ndialed fixed bin;				/* which gets upset if string parameters are too short. */
dcl  cdm_status bit (36) aligned;			/* We just throw the results away */

	call message_segment_$add_file (request_mseg_dir, request_mseg, addr (dial_rq), 36 * size (dial_rq),
	     request_uid, code);
	if code ^= 0 then go to return_code;

	call hcs_$wakeup (dial_control_process, dial_control_channel, request_uid, code);
	if code ^= 0 then go to dial_failed;


	wait_list.n_channels = 1;
	wait_list.channel_id (1) = dial_rq.header.reply_channel;

	call ipc_$block (addr (wait_list), addr (reply), code);
	if code ^= 0 then do;
	     call convert_ipc_code_ (code);
	     go to return_code;
	end;

	if request_ptr -> dial_manager_arg.version >= dial_manager_arg_version_2 then
	     request_ptr -> dial_manager_arg.dial_message = reply.message; /* OUTPUT field */

	call convert_dial_message_ (reply.message, cdm_device, cdm_iom, cdm_ndialed, cdm_status, code);
	if code ^= 0
	then go to return_code;

     end send_request;

comm_privilege:
     procedure returns (bit (1) aligned);

declare get_privileges_ entry() returns(bit (36) aligned);
%include aim_privileges;

     return ((get_privileges_ () & COMM_PRIVILEGE) = COMM_PRIVILEGE);
     end comm_privilege;

     end allow_dials;
