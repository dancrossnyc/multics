/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/* TERMINATE_PROCESS_ - This procedure terminates the process in which it is called.
   The arguments determine the exact nature of the termination.

   declare terminate_process_ entry (char (*), ptr);
   call terminate_process_ (action, info_ptr);

   1. action	indicates the type of termination and must be on of those
   .		listed below. (Input)

   2. info_ptr	points to additional information about the termination and
   .		its structure is dependent upon the action. (Input)

   Possible actions:

   1. logout	the process is simply to be logged out.

   dcl 1 info aligned based(info_ptr),
   2 version fixed bin,				/* must be 0
   2 hold bit(1) unaligned,				/* 1 if the console is to be held
   2 brief bit(1) unaligned,				/* 1 if no logout message is to be printed
   2 pad bit(34) unaligned;				/* must be 0

   2. new_proc	a new process is to be created for the user after this one is terminated.

   dcl 1 info aligned based(info_ptr),
   2 version fixed bin,				/* must be 1
   2 authorization_option bit (1) unaligned,		/* 1 if new_authorization is to be used.
   2 pad bit (35) unaligned,				/* must be 0
   2 new_authorization bit (72) aligned;		/* authorization of new process

   3. fatal_error	the process is doomed due to an unrecoverable error.

   dcl 1 info aligned based(info_ptr),
   2 version fixed bin,				/* must be 0
   2 status_code fixed bin(35);			/* status code describing error

   4. init_error	this process encountered an error during initialization.

   dcl 1 info aligned based(info_ptr),
   2 version fixed bin,				/* must be 0
   2 status_code fixed bin(35);			 /* status code describing error

   5. disconnect     this process is to be disconnected.

   dcl 1 info aligned based(info_ptr),
   2 version fixed bin,				/* must be 0
   2 pad bit(36) aligned;

   Originally coded by R. J. Feiertag on April 29, 1972
   Modified 750406 by PG to remove logout & new_proc code, and handle 
     version 1 new_proc structures
   */


/****^  HISTORY COMMENTS:
  1) change(87-04-08,Parisek), approve(87-07-14,MCR7644),
     audit(87-07-24,GDixon), install(87-08-04,MR12.1-1055):
     Send AS the "disconn" user signal based on the invocation of the
     "disconnect" command.
                                                   END HISTORY COMMENTS */


terminate_process_:
     procedure (action, info_ptr);

/* parameters */

dcl (action char (*),				/* indicates general nature of termination */
     info_ptr ptr) parameter;				/* points to additional information about termination */

/* automatic */

dcl  1 auto_ev_info aligned like event_wait_info;		/* Automatic event info structure */
dcl  1 auto_ev_chn aligned like event_wait_channel;	/* Automatic event channel structure */
dcl  event_message fixed bin (71),			/* message to answering service */
     em_ptr ptr,					/* points to message */
     code fixed bin (35),				/* status code */
     logout_channel fixed bin (71),			/* channel on which to signal logout */
     logout_pid bit (36) aligned;			/* process to which to signal logout */
dcl  old_mask bit (36) aligned;
dcl  sig_mask bit (36) aligned;
dcl  sig_names (2) char (32) int static options (constant) init ("sus_", "trm_");


/* based */

dcl  logout_message char (8) aligned based (em_ptr);	/* character string version of message */

dcl 1 new_proc_auth aligned based (em_ptr),		/* structure to overlay message */
    2 message char (2) unaligned,			/* "np" */
    2 authorization bit (54) unaligned;			/* an authorization */

dcl  based_version fixed bin based (info_ptr);		/* version number of all structures */

dcl 1 based_logout aligned based (info_ptr),
    2 version fixed bin,
    2 hold bit (1) unaligned,
    2 brief bit (1) unaligned,
    2 pad bit (34) unaligned;

dcl 1 based_new_proc aligned based (info_ptr),
    2 version fixed bin,				/* must be 1 */
    2 authorization_option bit (1) unaligned,		/* 1 if new_authorization is to be used */
    2 pad bit (35) unaligned,				/* must be zero */
    2 new_authorization bit (72) aligned;		/* authorization of new process */

dcl 1 based_disc aligned based (info_ptr),
    2 version fixed bin,				/* must be 0 */
    2 pad bit (36) unaligned;

dcl 1 based_fatal_error aligned based (info_ptr),
    2 version fixed bin,
    2 fatal_code fixed bin (35);			/* status code */

dcl 1 based_init_error aligned based (info_ptr),		/* informations about initialization errors */
    2 version fixed bin,
    2 init_code fixed bin (35);			/* status code */

dcl 1 fatal_term aligned based (em_ptr),		/* message to answering service */
    2 name char (4),				/* "term" */
    2 status_code fixed bin (35);			/* status code to answering service */

/* external static */

dcl  error_table_$improper_termination ext fixed bin (35),
     error_table_$unimplemented_version ext fixed bin (35);

/* conditions */

dcl  (cleanup, quit) condition;

/* builtins */

dcl (addr, null, substr) builtin;

/* entries */

dcl  
     continue_to_signal_ entry (fixed bin(35)),
     create_ips_mask_ entry (ptr, fixed bin, bit (36) aligned),
     get_process_id_ entry returns (bit (36) aligned),
     hcs_$block entry,
     hcs_$reset_ips_mask entry (bit (36) aligned, bit (36) aligned),
     hcs_$get_ips_mask entry (bit (36) aligned),
     hcs_$set_ips_mask entry (bit (36) aligned, bit (36) aligned),
     hcs_$stop_process entry (bit (36) aligned),
     hcs_$wakeup entry (bit (36) aligned, fixed bin (71), fixed bin (71), fixed bin (35)),
     ipc_$block entry (ptr, ptr, fixed bin(35)),
     ipc_$create_ev_chn entry (fixed bin(71), fixed bin(35)),
     ipc_$delete_ev_chn entry (fixed bin(71), fixed bin(35)),
     sub_err_ entry options (variable),
     user_info_$logout_data entry options (variable);
     
	
%include event_wait_info;
%page;
%include event_wait_channel;
%page;
%include sub_err_flags;
%page;
/* program */

	em_ptr = addr (event_message);
	if action = "logout" then do;			/* this is a simple logout */
	     if (based_logout.version ^= 0) | (based_logout.pad ^= ""b)
	     then go to illegal_termination;		/* invalid structure */

	     if based_logout.brief then do;		/* don't print logout message */
		if based_logout.hold then logout_message = "lhbrief"; /* hold and brief */
		else logout_message = "lobrief";	/* breif only */
	     end;
	     else do;				/* print logout message */
		if based_logout.hold then logout_message = "login"; /* hold only */
		else logout_message = "logout";	/* no hold or brief */
	     end;
	end;
	else if action = "new_proc" then do;		/* this is a new_proc */
	     if (based_new_proc.version ^= 1) | (based_new_proc.pad ^= ""b)
	     then go to illegal_termination;		/* naughty, naughty */

	     if based_new_proc.authorization_option
	     then do;				/* special handling here */
		new_proc_auth.message = "np";		/* set identifying string */
		new_proc_auth.authorization = substr (based_new_proc.new_authorization, 1, 54); /* ugh */
	     end;
	     else logout_message = "new_proc";		/* map new_proc into proper key word */
	end;
	else if action = "fatal_error" then do;		/* this is a fatal error */
	     if based_fatal_error.version ^= 0
	     then go to illegal_termination;

	     fatal_term.name = "term";		/* include proper key word */
	     fatal_term.status_code = based_fatal_error.fatal_code; /* pass on status code */
	end;
	else if action = "init_error" then do;		/* this is an initialization error */
	     if based_init_error.version ^= 0
	     then go to illegal_termination;

	     logout_message = "init_err";		/* map into proper key word */
	end;
	else if action = "io_attach" then do;		/* cannot do initial ios_$attach */
	     if based_version ^= 0
	     then go to illegal_termination;

	     logout_message = "no_ioatt";
	end;
	else if action = "abs_order" then do;		/* Cannot issue absentee  outseg order */
	     if based_version ^= 0
	     then go to illegal_termination;

	     logout_message = "abs_ordr";
	end;
	else if action = "no_initproc" then do;		/* Cannot find initial procedure */
	     if based_version ^= 0
	     then go to illegal_termination;

	     logout_message = "no_initp";
	end;
	else if action = "term_signal" then do;
	     if based_version ^= 0
	     then goto illegal_termination;

	     logout_message = "termsgnl";
	end;
	else if action = "disconnect" then do;
	     if (based_disc.version ^= 0) | (based_disc.pad ^= ""b)
	     then do;
		call sub_err_ (error_table_$unimplemented_version, "disconnect", ACTION_CANT_RESTART, null (), (0), "");
		return;
	     end;
	     logout_message = "disconn";
	end;
	else do;					/* illegal action */
illegal_termination:
	     fatal_term.name = "term";		/* use proper key word */
	     fatal_term.status_code = error_table_$improper_termination;
						/* return proper status code */
	end;

	call user_info_$logout_data (logout_channel, logout_pid);
						/* get logout information */

	if action = "disconnect" then do;
	     call create_ips_mask_ (addr (sig_names), (2), sig_mask);
						/* Create a mask of trm_ & sus_ signals */
	     sig_mask = ^sig_mask;			/* Allow only trm_ & sus_ to wakeup our process */
	     call hcs_$get_ips_mask (old_mask);
	     event_wait_channel.channel_id (1) = 0;
	     event_wait_channel.pad = ""b;
	     
	     on cleanup begin;			/* If we typed "release" in response to the QUIT condition */
		if event_wait_channel.channel_id (1) ^= 0 then
		     call ipc_$delete_ev_chn (event_wait_channel.channel_id (1), code);
		call hcs_$reset_ips_mask (old_mask, (""b));
						/* Delete our event chn & reset the signal mask */
	     end;
	     call ipc_$create_ev_chn (event_wait_channel.channel_id (1), code);
	     call hcs_$set_ips_mask (sig_mask, old_mask);
						/* Create an event chn to send ourselves a wakeup on */
	     on quit begin;
		call hcs_$wakeup ((get_process_id_ ()), event_wait_channel.channel_id (1), 0, code);
						/* Send a wakeup to ourselves */
		call continue_to_signal_ (code);	/* Look for another "quit" handler and return */
	     end;

	     call hcs_$wakeup (logout_pid, logout_channel, event_message, code);
						/* send message to answering service */

	     call ipc_$block (addr (event_wait_channel), addr (auto_ev_info), code);
						/* Have our process go blocked */
						/*  until a "quit" condition is signalled */

						/* If we get here then we must have typed "start" */
						/* in response to the QUIT condition */

	     revert quit;				/* If we get the "quit" condition signalled, then revert it */
	     call ipc_$delete_ev_chn (event_wait_channel.channel_id (1), code);
						/* Delete our event chn after "start" on the quit condition */
	     call hcs_$reset_ips_mask (old_mask, (""b));	/* Reset IPS masks */
	     return;				/* Return to caller */
	end;

	else do;
	     call hcs_$wakeup (logout_pid, logout_channel, event_message, code);
						/* send message to answering service */

	     call hcs_$stop_process ((get_process_id_ ()));
						/* stop the process */
	     do while ("1"b);			/* wait for destruction */
		call hcs_$block;
	     end;
	end;

     end terminate_process_;


