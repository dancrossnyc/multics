/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1990   *
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/* format: style4 */
enter_abs_request: ear: procedure options (separate_static, variable);

/* A command which places in a ring-1 message segment data that is interpreted as
   a request for an absentee process.  The user of the command must provide
   a minumum of one argument - the pathname of the absentee input segment.  In
   addition, the following options are allowed:

   -restart (-rt)	. to indicate that the absentee computation may be started over
   .		   from the beginning if interupted

   -output_file (-of)
   .		. to change the pathname of the absentee output file
   .		   whose default is identical to the input segment except for a suffix of .absout

   -limit (-li)	. to indicate a cpu limit in seconds

   -arguments (-ag)	. to provide a string containing arguments to the input segment (ala exec_com)

   -brief (-bf)	. to indicate that the command is not to type anything if all goes well

   -long_id	. to indicate that the long form of the request ID is to be typed

   -queue (-q)	. to indicate in which queue request is to be placed - default is 3

   -time (-tm)	. to provide a time before which this request will not be run

   -resource (-rsc) STRING
   .		. resource (like tape drives) needed by job

   -sender STRING	. RJE station name or ID of other sender

   -comment (-com) STRING
   .		. instructions to operator or anything else user puts in it

   -notify (-nt)	. send user message on deferral, login, and logout of job

   -defer_indefinitely, -dfi
   .		. defer job indefinitely; run when operator says to.

   -proxy USER	. enter request on behalf of USER

   -foreground, -fg	. log in as foreground user (i.e., like primary interactive user)

   -secondary, -sec	. ok to log in foreground job as secondary user

   -truncate, -tc truncate the .absout file when the job runs

   -authorization STR, -auth STR
   .		. sets the authorization of the process to that specified
   .		. by STR; STR is a character string composed of level and
   .		. category names for the desired authorization, separated
   .                . by commas.  STR cannot contain any embedded blank or tab
   .                . characters.  (The short names for each level and category
   .                . always contain no blanks or tabs, and can be used
   .                . whenever the corresponding long names contain blanks or
   .                . tabs.)  STR must represent an authorization that is less
   .                . than or equal to the maximum authorization of Person_id
   .                . on the Project_id.  If -authorization is omitted, your
   .                . current login authorization is used.  (See the
   .                . Programmer's Reference Manual for more information about
   .                . process authorizations.)
   -home_dir PATH, -hd PATH
   .                . sets your home directory to the path specified if your
   .                . project administrator allows it.
   -no_start_up, -ns. instructs the standard process overseer not to execute
   .                . your start_up.ec segment if the project administrator
   .                . allows it.
   -process_overseer PATH, -po PATH
   .                . sets your process overseer to the procedure given by path
   .                . if your project administrator allows it.  If path ends in
   .                . the characters ",direct", the specified procedure is
   .                . called directly during process initialization rather than
   .                . by the standard system-provided procedure.  This means
   .                . that the program used by path must perform the tasks that
   .                . would have been performed by the standard procedure. The
   .                . length of the -po character strings must be less than 64
   .                . characters.
   -ring N, -rg N   . sets your initial ring to N if this ring number is
   .                . greater than or equal to your registered minimum ring and
   .                . less than your registered maximum ring.
   start_up         . instructs the standard process overseer to execute your
   .                . start_up.ec segment

   If any error occurs, a request for an absentee process will not be made.

*/


/****^  HISTORY COMMENTS:
  1) change(86-03-01,Gilcrease), approve(86-03-27,MCR7370),
     audit(86-06-25,Lippard), install(86-06-30,MR12.0-1082):
     comment for hcom.
     coded by E. Stone 5/71 as submit_abs_request
     modified by E. Stone 10/06/71
     modified to be ear by Dennis Capps Feb 18, 1972
     modified           by Dennis Capps Feb 18, 1973
     Modified 6/1/76 by Steve Herbst to check absin and absout seg access
     Modified 01/25/77 by C. D. Tavares to check -limit against site-defined max limit, not just "20 minutes"
     Modified April 1978 by T. Casey to use version 4 absentee request structure and store new argument info in it,
     and to clean up and modernize the code.
     Modified November 1978 by T. Casey for MR7.0 absentee enhancements.
     Modified June 1979 by C. Hornig to not insist on checking access.
     Modified November 1979 by T. Casey to print 8 digits of request ID by default.
     Modified 22 September 1980 by G. Palter to use site_settable default absentee queue and not look at installation_parms
     or whotab.
     Modified July 1984 by C. Marker changed the call to cu_$arg_count to
     include a code variable so that we can return the right error message
     when there is an attempt to use this as an active function.
  2) change(86-03-27,Gilcrease), approve(86-03-27,MCR7370),
     audit(86-06-25,Lippard), install(86-06-30,MR12.0-1082):
     Add -truncate,-tc, and -extend arguments for truncating absout files.
     SCP6297.
  3) change(86-04-01,Gilcrease), approve(86-04-01,MCR7372),
     audit(86-06-25,Lippard), install(86-06-30,MR12.0-1082):
     Remove restriction that .absin must be first argument. Allow the absout
     file to be a msf. Add "argument" to compare for "-ag" and "-arguments".
  4) change(86-04-01,Lippard), approve(85-12-30,MCR7326),
     audit(86-10-27,GDixon), install(86-10-28,MR12.0-1200):
      Modified 13 December 1985 (above date to satisfy picky hcom)
      by Jim Lippard to use send_as_request_ instead of hcs_$wakeup.
  5) change(87-07-07,GDixon), approve(87-07-07,MCR7741),
     audit(87-07-07,Hartogs), install(87-08-04,MR12.1-1055):
     Include user_abs_attributes.incl.pl1 as part of splitting
     abs_message_format.incl.pl1.
  6) change(87-11-10,Parisek), approve(88-02-11,MCR7849),
     audit(88-05-03,Lippard), install(88-07-13,MR12.2-1047):
     A. Added more standard login control arguments; -authorization,
        -home_dir, -no_start_up, -process_overseer, -ring and
        -start_up.  SCP 6367.
     B. Implemented use of exec_com search paths for locating the absin.
        SCP 6331.
     C. Removed all references to request, & local_asraci structures, and
        added references to abs_request_info data to be passed to
        enter_abs_request_ subroutine which will define the request structure
        data and establish the message segment.  SCP 6367.
  7) change(88-04-29,Parisek), approve(88-04-29,MCR7878),
     audit(88-05-03,Lippard), install(88-07-13,MR12.2-1047):
     Move input pathname parsing to the enter_abs_request_ subroutine.
     The subroutine now checks if ec search paths will be used.
  8) change(88-08-16,Parisek), approve(88-09-22,MCR7991),
     audit(88-09-26,Fawcett), install(88-09-30,MR12.2-1124):
     Inhibit printing of messages if -brief given.
  9) change(90-06-06,Vu), approve(90-06-06,MCR8177), audit(90-06-20,Schroth),
     install(90-07-17,MR12.4-1020):
     Users with minimum authorization greater than system_low are unable to
     submit absentee requests unless they state the authorization level.
                                                   END HISTORY COMMENTS */


dcl  aim_check_$in_range entry (bit (72) aligned, (2) bit (72) aligned) returns (bit (1) aligned);
dcl  com_err_ entry options (variable);
dcl  convert_authorization_$from_string entry (bit (72) aligned, char (*), fixed bin (35));
dcl  convert_date_to_binary_ entry (char (*), fixed bin (71), fixed bin (35));
dcl  cu_$arg_count ext entry (fixed bin, fixed bin (35));
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  cu_$level_get entry (fixed bin);
dcl  cv_dec_check_ entry (char (*), fixed bin (35)) returns (fixed bin (35));
dcl  enter_abs_request_ entry (ptr, ptr, fixed bin (35));
dcl  expand_pathname_$add_suffix entry (char(*), char(*), char(*), char(*), fixed bin(35));
dcl  get_authorization_ entry returns (bit (72) aligned);
dcl  get_group_id_$tag_star entry returns (char (32));
dcl  get_temp_segment_ entry (char (*), ptr, fixed bin (35));
dcl  ioa_ entry options (variable);
dcl  ioa_$rsnnl entry options (variable);
dcl  ioa_$ioa_switch entry options (variable);
dcl  parse_resource_desc_$check entry (char (*), ptr, ptr, ptr, char (*) varying, fixed bin (35));
dcl  release_temp_segment_ entry (char (*), ptr, fixed bin (35));
dcl  system_info_$abs_limits entry ((4) fixed bin (35), fixed bin (35), (0:7, 4) fixed bin (35));
dcl  system_info_$default_absentee_queue entry (fixed bin);
dcl  user_info_$attributes entry (char (*) varying);
dcl  user_info_$authorization_range entry ((2) bit (72) aligned);
dcl  user_info_$ring_range entry ((2) fixed bin);

dcl  iox_$error_output ext pointer;

dcl  as_error_table_$illegal_hd_arg ext fixed bin (35);
dcl  as_error_table_$illegal_ip_arg ext fixed bin (35);
dcl  as_error_table_$ring_too_high ext fixed bin (35);
dcl  as_error_table_$ring_too_low ext fixed bin (35);
dcl  error_table_$ai_out_range ext fixed bin (35);
dcl  error_table_$badopt ext fixed bin (35);
dcl  error_table_$noarg fixed bin (35) ext static;
dcl  error_table_$not_abs_path ext fixed bin (35);
dcl  error_table_$pathlong ext fixed bin (35);
dcl  error_table_$root ext fixed bin (35);


dcl  (addr, after, before, index, length, max, null, rtrim, substr, unspec) builtin;

dcl  cleanup condition;

dcl  argp ptr;					/* pointer to argument */

dcl  id char (17) int static init ("enter_abs_request") options (constant); /* name of command - for error messages */
dcl  my_attributes char (128) varying;			/* user's attributes */
dcl  rsc_msg char (100) varying;			/* place for error message about resource description */
dcl  abs_user char (32);				/* group id of absentee user */
dcl  rqid char (19);				/* to hold the request id for printing */
dcl  option char (32) aligned init ("");		/* copy of argument if an option */
dcl  proxy_name char (32);				/* personid of proxy user */
dcl  string char (8) aligned;				/* used for error message */
						/* name of system directory in which absentee */
						/* message segment & who table are located */
dcl  sysdir char (168) aligned internal static init (">system_control_1");

dcl  arglen fixed bin;				/* length of argument string */
dcl  code fixed bin (35);				/* error code */
dcl  queue fixed bin;				/* queue number */
dcl  ms_count fixed bin;				/* number of previous absentee requests */
dcl  n_arg fixed bin;				/* argument number */
dcl  i fixed bin;					/* temp */
dcl  ring fixed bin;				/* user's validation level */
dcl  min_ring fixed bin;				/* minimum user ring */
dcl  max_ring fixed bin;				/* maximum user ring */
dcl  ringrng (2) fixed bin;				/* authorized login ring range */

dcl  1 local_ari aligned like abs_return_info;

dcl  attr_sw bit (1) aligned;				/* indicates whether an attribute dependent control arg was given */
dcl  input_sw bit (1) aligned;			/* indicates whether input seg has been given twice */
dcl  output_sw bit (1) aligned;			/* indicates whether output seg has been given twice */
dcl  arg_sw bit (1) aligned;				/* indicates whether argument string has been given twice */
dcl  limit_sw bit (1) aligned;			/* indicates whether cpu limit has been given twice */
dcl  proxy_sw bit (1) aligned;			/* indicates if proxy request given twice */
dcl  brief_sw bit (1) aligned;			/* indicates whether brief option is wanted */
dcl  long_id_sw bit (1) aligned;			/* indicates whether long ID is wanted */
dcl  queue_sw bit (1) aligned;			/* indicates whether queue specified */
dcl  foreground_sw bit (1) aligned;			/* indicates whether foreground queue specified */
dcl  aok bit (1) aligned;				/* ON if user has requested attribute */

dcl  number_of_arguments fixed bin;
dcl  length_of_arguments fixed bin;

dcl  (resource_argno, sender_argno, comment_argno) fixed bin init (0);

dcl  arg char (arglen) based (argp);
dcl  authorization bit (72) aligned;
dcl  authrng (2) bit (72) aligned;
dcl  max_authorization bit (72) aligned;
dcl  min_authorization bit (72) aligned;

dcl  default_cpu_limits (4) fixed bin (35);
dcl  default_foreground_cpu_limit fixed bin (35);
dcl  max_cpu_limits (0:7, 4) fixed bin (35);
dcl  maxlim fixed bin (35);

%page;
%include abs_request_dcls;
%page;

          abs_request_info_ptr = null;

	on cleanup call cleanup_proc;

	call user_info_$ring_range (ringrng);		/* Get user's low and high ring limits */
	min_ring = ringrng (1);
	max_ring = ringrng (2);

	call user_info_$authorization_range (authrng);	/* Get user's low and high auth limits */
	min_authorization = authrng (1);
          max_authorization = authrng (2);

	arqi_resource_length = 0;			/* Initialize variable extents for structure data */
	arqi_comment_length = 0;
	arqi_arg_count = 0;
	arqi_max_arg_length = 0;

	call get_temp_segment_ (id, abs_request_info_ptr, code);
	if code ^= 0 then do;
	     call com_err_ (code, id, "temporary segment");
	     goto RETURN;
	end;

	unspec (abs_request_info) = "0"b;

	abs_request_info.version = ABSENTEE_REQUEST_INFO_VERSION_3;
						/* set version number of absentee request */
	local_ari.version = ABSENTEE_RETURN_INFO_VERSION_3;
						/* set return version */
	call system_info_$default_absentee_queue (queue); /* get default */
	if queue = 0 then queue = 3;			/* must use default default */
	abs_request_info.queue = DEFAULT_QUEUE;		/* queue's name */

/* The absentee request structure that this program builds ends with a number of character
   strings (and one array) of variable extents. Their extents are declared using the refer option,
   and the values of the extents are stored in fixed binary variables near the beginning of the structure.
   The code that fills in the structure must be careful not to store into any of the variable extent
   elements until the values of all the extents have been computed and stored in the structure
   (since the offset of each of these elements is, of course, a function of the lengths of all those
   that precede it). There are comments in those places where it becomes known that all the refer extents have
   been set, noting that it is now ok to store into the variable extent elements. */

						/* initialize structure elements */

	abs_request_info.output_segment_dirname = "";
	abs_request_info.output_segment_entryname = "";
	abs_request_info.input_segment_dirname = "";
	abs_request_info.pad = 0;
	abs_request_info.proxy_personid = "";
	abs_request_info.proxy_projectid = "";
	abs_request_info.sender = "";
	abs_request_info.initial_ring = -1;		/* If this value doesn't change we'll use default */
	abs_request_info.home_dir = "";
	abs_request_info.init_proc = "";
	abs_request_info.resource = "";
	abs_request_info.comment = "";
	abs_request_info.arguments (*) = "";
          abs_request_info.requested_authorization = get_authorization_ ();

	input_sw,					/* initialize several variables */
	     output_sw,
	     arg_sw,
	     limit_sw,
	     brief_sw,
	     long_id_sw,
	     proxy_sw,
	     foreground_sw,
	     queue_sw,
	     attr_sw = "0"b;

	call cu_$level_get (ring);
	abs_user = get_group_id_$tag_star ();
						/* Change Person.Project.* to Person.Project.m */
	substr (abs_user, length (rtrim (abs_user)), 1) = "m";

	call cu_$arg_count (number_of_arguments, code);
	if code ^= 0 then do;
	     call com_err_ (code, id);
	     goto RETURN;
	end;

	if number_of_arguments = 0 then code = error_table_$noarg;
	n_arg = 1;

	do while (n_arg ^> number_of_arguments);

	     call cu_$arg_ptr (n_arg, argp, arglen, code);
	     if code ^= 0 then go to arg_err;

	     if index (arg, "-") ^= 1 then do;
						/* convert argument to directory name & entry name */
		if ^input_sw then do;
		     abs_request_info.input_segment_dirname = arg;
		     input_sw = "1"b;		/* Note absin segment is supplied */
		end;
	     end;


/* Now go thru all the rest of the arguments (if there are any ) */

	     else do;

		option = arg;			/* make a copy for efficiency + for */
		string = "After";			/* nice error message if arg missing after option */

		if option = "-rt" | option = "-restart" then
		     abs_request_info.restartable = "1"b;
						/* turn on appropriate bit in absentee request if restartable */

		else if option = "-nt" | option = "-notify" then
		     abs_request_info.notify = "1"b;	/* notify user when request has logged in */

		else if option = "-dfi" | option = "-defer" | option = "-defer_indefinitely" then
		     abs_request_info.user_deferred_indefinitely = "1"b;
						/* operator must start absentee process */

		else if option = "-of" | option = "-output_file" then do;
		     if output_sw then do;		/* check whether option given before */
dup_arg:			call com_err_ (0, id, "Option ^a duplicated.", arg);
			goto RETURN;
		     end;
		     output_sw = "1"b;		/* indicate that output option given */
		     call get_next_arg;

/* convert from relative to full pathname */
		     call expand_pathname_$add_suffix (arg, "absout", abs_request_info.output_segment_dirname, abs_request_info.output_segment_entryname, code);

		     if code ^= 0 then do;
arg_err:			call com_err_ (code, id, "^a", arg);
			goto RETURN;
		     end;

		     if abs_request_info.output_segment_entryname = "" then do;
			call com_err_ (error_table_$root, id, "^a", arg);
			goto RETURN;
		     end;
		end;

		else if option = "-proxy" then do;	/* submit on behalf of another user */
		     if proxy_sw then goto dup_arg;
		     proxy_sw = "1"b;
		     call get_next_arg;
		     proxy_name = arg;
		     abs_user = arg || ".p";		/* Proxy users are Person.Project.p */
		end;

		else if option = "-rsc" | option = "-resource" | option = "-resources" then do;
		     if resource_argno ^= 0 then goto dup_arg; /* already given once */
		     call get_next_arg;

		     call parse_resource_desc_$check	/* see if resource description is ok */
			(arg, null (), null (), null (), rsc_msg, code);
		     if code ^= 0 then do;		/* parse_ ... returned us a message */
			call com_err_ (0, id, "-resource error: ^a", rsc_msg);
			goto RETURN;
		     end;
		     else if rsc_msg ^= "" then	/* warning about obsolete resource description */
			call ioa_ ("^a: ^a", id, rsc_msg); /* print it and continue */

		     abs_request_info.resource_length = arglen;
						/* remember how long it is */
		     resource_argno = n_arg;		/* and where it is */
		end;

		else if option = "-sender" then do;	/* logic is identical to that for -resource, above */
						/* user optional string */
		     if sender_argno ^= 0 then goto dup_arg;
		     call get_next_arg;
		     sender_argno = n_arg;
		end;

		else if option = "-com" | option = "-cm" | option = "-comment" then do;
		     if comment_argno ^= 0 then goto dup_arg;
		     call get_next_arg;
		     abs_request_info.comment_length = arglen;
		     comment_argno = n_arg;
		end;

		else if option = "-li" | option = "-limit" then do;
		     if limit_sw then go to dup_arg;	/* check whether option given before */
		     limit_sw = "1"b;		/* indicate that limit option given */
		     call get_next_arg;
						/* convert argument from character string to fixed bin */
						/* and set max cpu time in request */
		     abs_request_info.max_cpu_time = cv_dec_check_ (arg, code);
		     if code ^= 0 then goto num_err;

		     if abs_request_info.max_cpu_time < 0 then do;
						/* check number for reasonable value */
num_err:			call com_err_ (0, id, "Invalid cpu limit ^a", arg);
			goto RETURN;
		     end;
		end;

		else if option = "-ag" | option = "-argument" | option = "-arguments" then do;

/* Everything after this is assumed to be arguments to the absentee job. */

		     abs_request_info.arg_count = number_of_arguments - n_arg;
						/* remember how many there are */

/* Make one pass to get the argument lengths that arguments are dependent 
   on in their dcls, then make a second pass to fill in the arguments 
   themselves. */
		     length_of_arguments = 1;
		     do i = 1 to abs_request_info.arg_count;
			call get_next_arg;
			length_of_arguments = length_of_arguments + arglen;
		     end;
		     abs_request_info.max_arg_length = length_of_arguments - 1;

		     length_of_arguments = 1;
		     n_arg = n_arg - abs_request_info.arg_count;
		     do i = 1 to abs_request_info.arg_count;
			call get_next_arg;
			abs_request_info.arguments (i) = substr (arg, 1, arglen);
		     end;
		end;

		else if option = "-bf" | option = "-brief" then
		     brief_sw = "1"b;		/* indicate that brief option is in force */

		else if option = "-lgid" | option = "-long_id" then
		     long_id_sw = "1"b;		/* long request identifier */

		else if option = "-q" | option = "-queue" then do;
		     if queue_sw then go to dup_arg;	/* check whether option given before */
		     queue_sw = "1"b;		/* indicate that queue specified */
		     call get_next_arg;
		     begin;			/* rowr-bazzle PL/1 */
dcl  queue35 fixed bin (35);
			queue35 = cv_dec_check_ (arg, code); /* see if valid number */
			queue = queue35;		/* harrumph */
		     end;
		     if code ^= 0 then do;
			if arg = "fg" | arg = "foreground" | arg = "-fg" | arg = "-foreground" then do;
			     foreground_sw = "1"b;
			     queue_sw = ""b;	/* a numbered queue not really given */
			     queue = 0;		/* 0 means "interactive" to some programs */
			end;
			else do;
bad_queue:		     call com_err_ (0, id, "Illegal queue number ^a", arg);
			     goto RETURN;
			end;
		     end;
						/* construct entry name of absentee message segment */
		     else do;
			if queue < 0 | queue > 4 then goto bad_queue;
			abs_request_info.queue = BACKGROUND_QUEUE (queue);
			if queue = 0 then queue = 1;	/* queue zero is really the front end of queue 1 */
		     end;

		end;

		else if option = "-fg" | option = "-foreground" then do;
						/* login as primary user (like interactive for load_control info) */
		     foreground_sw = "1"b;
		     queue = 0;
		end;

		else if option = "-tm" | option = "-time" then do;
		     if abs_request_info.deferred_time > 0 then
			go to dup_arg;		/* check whether option given before */
		     call get_next_arg;
		     call convert_date_to_binary_ (arg, abs_request_info.deferred_time, code);

		     if code ^= 0 then go to arg_err;

		end;

		else if option = "-sec" | option = "-secondary" | option = "-standby" then
		     abs_request_info.secondary_ok = "1"b;
						/* not primary, but background user status */

		else if option = "-truncate" | option = "-tc" then abs_request_info.truncate_absout = "1"b;

		else if option = "-extend" then abs_request_info.truncate_absout = "0"b;

		else if option = "-authorization" | option = "-auth" then do;
		     call get_next_arg;	
		     if substr (arg, 1, 1) = "-" then do;
			code = error_table_$noarg;
			go to arg_err;		/* missing operand */
		     end;
		     call convert_authorization_$from_string (authorization, (arg), code);
		     if code ^= 0 then goto arg_err;
		     if aim_check_$in_range (authorization, authrng) then
			abs_request_info.requested_authorization = authorization;
						/* check if range is within limits found earlier */
		     else do;
			code = error_table_$ai_out_range;
						/* not in range */
			goto arg_err;
		     end;
		     attr_sw = "1"b;		/* used if submitted by proxy */
						/* so warning message will be printed */
		end;
		else if option = "-home_dir" | option = "-hd" then do;
		     call get_attributes ("vhomedir", aok);
						/* does user have this attribute? */
		     if aok then do;		/* yes */
			call get_next_arg;
			if substr (arg, 1, 1) = "-" then do;
						/* not a control arg */
			     code = error_table_$noarg;
			     goto arg_err;
			end;
			if substr (arg, 1, 1) ^= ">" then do;
			     code = error_table_$not_abs_path;
			     goto arg_err;
			end;
			if arglen > length (abs_request_info.home_dir) then do;
			     code = error_table_$pathlong;
			     goto arg_err;
			end;
			abs_request_info.home_dir = substr (arg, 1, arglen);
		     end;
		     else do;			/* no */
			code = as_error_table_$illegal_hd_arg;
			go to arg_err;
		     end;
		     attr_sw = "1"b;		/* for proxy warning */
		end;
		else if option = "-no_start_up" | option = "-ns" then do;
		     abs_request_info.no_start_up = "1"b;
						/* do not execute start_up.ec during login */
		     attr_sw = "1"b;		/* for proxy warning */
		end;
		else if option = "-process_overseer" | option = "-po" then do;
		     call get_next_arg;
		     if substr (arg, 1, 1) = "-" then do;
						/* not a control arg */
			code = error_table_$noarg;
			goto arg_err;
		     end;
		     if arglen > length (abs_request_info.init_proc) then do;
			code = error_table_$pathlong;
			goto arg_err;
		     end;
		     call get_attributes ("vinitproc", aok);
						/* does user have this attribute */
		     if aok then abs_request_info.init_proc = substr (arg, 1, arglen);
						/* yes */
		     else do;			/* no */
			code = as_error_table_$illegal_ip_arg;
			go to arg_err;
		     end;
		     attr_sw = "1"b;		/* for proxy warning */
		end;
		else if option = "-ring" | option = "-rg" then do;
		     call get_next_arg;
		     abs_request_info.initial_ring = cv_dec_check_ (arg, code);
						/* requesting ring */
		     if code ^= 0 then go to arg_err;
		     if abs_request_info.initial_ring < min_ring then do;
			code = as_error_table_$ring_too_low;
						/* lower than lowest ring noted earlier */
			goto arg_err;
		     end;
		     else if abs_request_info.initial_ring > max_ring then do;
						/* higher than highest ring noted earlier */
			code = as_error_table_$ring_too_high;
			goto arg_err;
		     end;
		     attr_sw = "1"b;		/* for proxy warning */
		end;
		else if option = "-start_up" then do;	/* inverse of -no_startup */
		     abs_request_info.no_start_up = "0"b;
		end;
		else do;
		     code = error_table_$badopt;
		     go to arg_err;
		end;
	     end;
	     n_arg = n_arg + 1;
	end;					/* end loop over al2nd thru last arguments */

/* All done processing arguments. Now make some validity checks, and finish filling in the request structure. */

/* Check consistency of -queue, -foreground, and -secondary */

	if queue_sw & foreground_sw then do;
	     call com_err_ (0, id, "The -foreground and -queue arguments are inconsistent.");
	     goto RETURN;
	end;
	if abs_request_info.secondary_ok & ^foreground_sw then do;
	     call com_err_ (0, id, "The -secondary argument is only valid if the -foreground argument is also given.");
	     goto RETURN;
	end;

/* Either fill in default cpu time limit, or check specified limit for reasonableness. */

	call system_info_$abs_limits (default_cpu_limits, default_foreground_cpu_limit, max_cpu_limits);
						/* get defaults */
	if ^limit_sw then do;			/* if -limit not given */
	     if foreground_sw then			/* fill in the appropriate default limit */
		abs_request_info.max_cpu_time = default_foreground_cpu_limit;
	     else abs_request_info.max_cpu_time = default_cpu_limits (queue);
	end;

	if ^foreground_sw then do;			/* if background job, check limit against per-shift max */
	     maxlim = 0;
	     do i = 0 to 7;
		if maxlim < max_cpu_limits (i, queue) then
		     maxlim = max_cpu_limits (i, queue);
	     end;

	     if abs_request_info.max_cpu_time > maxlim then do;
		call com_err_ (0, id, "Warning: the ^[specified^;default^] cpu time limit of ^d sec. is greater than
the highest time limit for any shift (^d sec.). Request entered,
but operator intervention will be required to log it in.",
		     limit_sw, abs_request_info.max_cpu_time, maxlim);
	     end;
	end;

/* All of the refer extents have definitely been set by now, so we can store into the variable extent elements. */

	if resource_argno ^= 0 then do;
	     call cu_$arg_ptr (resource_argno, argp, arglen, code);
	     abs_request_info.resource = arg;		/* fill in requested resource */
	end;

	if sender_argno ^= 0 then do;
	     call cu_$arg_ptr (sender_argno, argp, arglen, code);
	     abs_request_info.sender = arg;		/* fill in requested sender string */
	end;

	if comment_argno ^= 0 then do;
	     call cu_$arg_ptr (comment_argno, argp, arglen, code);
	     abs_request_info.comment = arg;		/* fill in requested comment string */
	end;

/* set proxy name */
	if proxy_sw then do;
	     abs_request_info.proxy_personid = before (proxy_name, ".");
	     abs_request_info.proxy_projectid = after (proxy_name, ".");
	     if attr_sw then do;			/* Print warning but continue to submit */
		call ioa_$ioa_switch (iox_$error_output, "^a: Warning: Cannot check attribute information for user ^a.
Job may not run successfully.", id, proxy_name);
	     end;
	end;

/* place request in message segment */

	if foreground_sw then
	     abs_request_info.queue = FOREGROUND_QUEUE;

	call enter_abs_request_ (abs_request_info_ptr, addr(local_ari), code);
						/* this subroutine actually queues the request */
	if code ^= 0 then do;
	     call com_err_ (code, id, local_ari.error_msg);
	     goto RETURN;
	end;

	if ^brief_sw then do;
	     ms_count = max (0, local_ari.queue_requests_count - 1);
	     call ioa_$rsnnl ("^d", rqid, (0), local_ari.request_id);
						/* display successful request info */
	     if ^long_id_sw then rqid = substr (rqid, 7, 8);
	     call ioa_ ("ID: ^a^[;^x^d already requested.^]", rqid, (code = 0), ms_count);
	     call ioa_ ("^a in queue ^a", local_ari.abs_pathname, local_ari.queue);
	end;

RETURN:	call cleanup_proc;
	return;



/* INTERNAL PROCEDURES */


cleanup_proc: proc;

	if abs_request_info_ptr ^= null then
	     call release_temp_segment_ (id, abs_request_info_ptr, code);
	return;

     end cleanup_proc;


/* -------------------- */

get_next_arg: proc;

	n_arg = n_arg + 1;
	call cu_$arg_ptr (n_arg, argp, arglen, code);
	if code ^= 0 then do;
	     call com_err_ (code, id, "^a ^a", string, option);
	     goto RETURN;
	end;
	return;

     end get_next_arg;

/* -------------------- */

get_attributes:
          proc (pattr, paok);
						/* check various user attributes */
dcl  pattr char (24) parameter;
dcl  paok bit (1) aligned parameter;

	call user_info_$attributes (my_attributes);
	if index (my_attributes, rtrim(pattr)) > 0 then paok = "1"b;
						/* have attribute */
	else paok = "0"b;				/* not have attribute */
   end get_attributes;

/* -------------------- */

test_ear: entry (test_sysdir);			/* entry used for testing ear command */

dcl  test_sysdir char (*);

	sysdir = test_sysdir;			/* copy name of test system directory */

     end enter_abs_request;
