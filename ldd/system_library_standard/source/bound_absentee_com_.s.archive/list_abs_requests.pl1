/****^  ************************************************************
        *                                                          *
        * Copyright, (C) Honeywell Bull Inc., 1988                 *
        *                                                          *
        * Copyright, (C) Honeywell Information Systems Inc., 1982  *
        *                                                          *
        * Copyright, (C) Honeywell Information Systems Inc., 1980. *
        *                                                          *
        * Copyright (c) 1972 by Massachusetts Institute of         *
        * Technology and Honeywell Information Systems, Inc.       *
        *                                                          *
        ************************************************************ */



/* format: off */

list_abs_requests:
lar:	procedure;

	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/* Command to provide information on absentee, IO Daemon, and retrieval requests	*/
	/*									*/
	/* Status									*/
	/* 0) Modified by E. Stone 9/15/71						*/
	/* 1) Modified by R. Coren 4/17/73 - entry for io_daemon requests added		*/
	/* 2) Modified by J. Stern 6/24/75						*/
	/* 3) Modified by D. Vinograd 5/77 - display queued retrieval requests		*/
	/* 4) Modified by J. C. Whitmore and T. Casey, April 1978 - new arguments		*/
	/* 5) Modified by T. Casey, November 1978 - MR7.0 absentee enhancements		*/
	/* 6) Modified by S. Herbst, 09/10/79 - call lar_util_ with queue entryname		*/
	/* 7) Modified by G. Palter, 22 September 1980 - use site-settable default absentee queue */
	/* 8) Modified by G. Palter, 17 December 1980 - fix pathname used by			*/
	/*				         list_retrieval_requests		*/
	/* 9) Modified by G. Dixon, January 1982 - support eor's user-defined request types,	*/
	/*				   add -print, -punch, -plot			*/
	/* 10) Modified 8/82 by GA Texada to make lar, lrr, lor, and ldr scann all q's by default.*/
	/* 11) Modified 8/84 by C. Marker made lar, lrr, lor, and ldr set the value of id before calling init.
		   */
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

/****^  HISTORY COMMENTS:
  1) change(87-08-17,GDixon), approve(88-08-15,MCR7969),
     audit(88-08-04,Lippard), install(88-08-29),MR12.2-1093):
     Incompatible args -bf and -lg now override one another
     (Answering_Service 428, phx15276).
  2) change(88-04-27,Parisek), approve(88-06-13,MCR7913),
     audit(88-08-16,Farley), install(88-08-29),MR12.2-1093):
     Added -forms control argument check.
  3) change(88-08-25,GDixon), approve(88-08-15,MCR7969),
     audit(88-08-04,Lippard), install(88-08-29),MR12.2-1093):
     If multiple instances of -admin PERSON.PROJECT or -user PERSON.PROJECT
     are given, the last instance will now override earlier instances
     instead of diagnosing an error message. (Answering_Service 435,
     phx16126)
                                                   END HISTORY COMMENTS */

    dcl	abs_list_sw		bit(1),
	abs_n_sw			bit(1),
	arg_msg			char(50),
	argptr			ptr,
	arglen			fixed bin(21),
	code			fixed bin(35),
	ctl_arg_given		bit(1),
	default_queue		fixed bin,
	dir			char(168),
	ent			char(32),
	err_msg			char(256),
	finish			fixed bin,
	foreground_sw		bit(1),
	gen_type			char(32),
	i			fixed bin,
	id			char(32),
	ignore_code		fixed bin,
	max_queue			fixed bin,
	min_queue			fixed bin,
	nargs			fixed bin,
	priority			fixed bin,
	rqt_sw			bit(1),
	rs_len                        fixed bin,
	start			fixed bin,
	tp			ptr,
	user_arg			bit(1) aligned;

    dcl	arg			char(arglen) unal based (argptr);

    dcl  (addr, after, before, index, length, min, null, search,
          substr, verify, unspec)
				builtin;

    dcl	cleanup			condition;

    dcl	com_err_			options (variable),
	cu_$arg_count		entry (fixed bin, fixed bin(35)),
	cu_$arg_ptr		entry (fixed bin, ptr, fixed bin(21), fixed bin(35)),
	cu_$arg_ptr_rel		entry (fixed bin, ptr, fixed bin(21), fixed bin(35), ptr),
	cv_dec_check_		entry (char(*), fixed bin(35)) returns(fixed bin(35)),
	enter_output_request$default_request_type
				entry (char(*), char(*), fixed bin, fixed bin, fixed bin(35)),
	enter_output_request$request_type
				entry (char(*), char(*), char(*), fixed bin, fixed bin, fixed bin(35)),
	expand_pathname_		entry (char(*), char(*), char(*), fixed bin(35)),
	get_temp_segment_		entry (char(*), ptr, fixed bin(35)),
	hcs_$star_		entry (char(*), char(*), fixed bin(2), ptr, fixed bin, ptr, ptr,
				     fixed bin(35)),
	message_segment_$close	entry (fixed bin, fixed bin),
	message_segment_$open	entry (char(*), char(*), fixed bin, fixed bin(35)),
	ioa_			entry() options(variable),
	ioa_$rsnnl		entry() options(variable),
	iod_info_$generic_type	entry (char(*), char(32), fixed bin(35)),
	iod_info_$queue_data	entry (char(*), fixed bin, fixed bin, fixed bin(35)),
	iod_info_$test		entry (char(*)),
	iox_$put_chars		entry (ptr, ptr, fixed bin(21), fixed bin(35)),
	lar_util_			entry (ptr, fixed bin(35)),    
	release_temp_segment_	entry (char(*), ptr, fixed bin(35)),
	request_id_		entry (fixed bin(71)) returns(char(19)),
	sys_log_$command		entry options(variable),
	sys_log_$command_error	entry options(variable),
	system_info_$default_absentee_queue
				entry (fixed bin);

    dcl	CAPITALS			char(26) int static options (constant) init("ABCDEFGHIJKLMNOPQRSTUVWXYZ"),
	abs_default_q		fixed bin int static,
	abs_dir			char(168) int static init(">system_control_1"),
	abs_max_q			fixed bin int static,
	io_default_q		fixed bin int static,
	io_max_q			fixed bin int static,
	iod_dir			char(168) int static init(">daemon_dir_dir>io_daemon_dir"),
	not_initialized		bit(1) int static init("1"b),
						/* true when we must get new queue data */
	ret_default_q		fixed bin int static,
	ret_max_q			fixed bin int static,
	retriever_dir		char(168) int static init(">daemon_dir_dir>volume_retriever");

    dcl	error_table_$badopt		fixed bin(35) ext static,
	error_table_$id_not_found	fixed bin(35) ext static,
	error_table_$noarg		fixed bin(35) ext static,
	iox_$user_output		ptr ext static;




	%include lar_info;

    dcl	1 local_info		like info aligned;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


/* 
list_abs_requests:
lar:	proc; 					   MAIN ENTRY POINT				*/

	abs_list_sw = ""b;

lar_init:						/* come here from abs_list entry point to finish  */
	id = "list_abs_requests";
	call init;				/* initialization				*/
	default_queue = abs_default_q;
	max_queue = abs_max_q;
	min_queue = -1;
	dir = abs_dir;
	info.queue_name = "absentee";
	info.request_type = ABS;
	goto JOIN;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


abs_list:	entry (a_arglist_ptr, a_arg_count, a_request_id, a_queue);
						/* entry point used by operator command, abs list */
    dcl	a_arglist_ptr		ptr,		/* ptr to arglist that admin$abs got		*/
	a_arg_count		fixed bin,	/* length of that arglist, including "list"	*/
	a_request_id		fixed bin(71),	/* request ID of job in slot N, if absN arg given */
	a_queue			fixed bin;	/* queue that job from slot N is in		*/

	abs_list_sw = "1"b;				/* remember that we entered here		*/
	goto lar_init;				/* go initialize for listing abs requests	*/


/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


list_retrieval_requests:
lrr:	entry;					/* entry used to list retrieval requests	*/
	

	abs_list_sw = ""b;
	id = "list_retrieval_requests";
	call init;
	default_queue = ret_default_q;
	max_queue = ret_max_q;
	min_queue = 1;
	dir = retriever_dir;
	info.queue_name = "volume_retriever";
	info.request_type = RETV;
	go to JOIN;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


list_daemon_requests:
ldr:	entry;					/* entry used to list requests to the io_daemon	*/

	abs_list_sw = ""b;
	id = "list_daemon_requests";
	call init;
	default_queue = io_default_q;			/* start with the default rqt queue data	*/
	max_queue = io_max_q;
	min_queue = 1;
	dir = iod_dir;
	gen_type = "printer";
	info.queue_name = "printer";
	info.request_type = IO;
	go to JOIN;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


list_output_requests:
lor:	entry;
	
	abs_list_sw = ""b;
	id = "list_output_requests";
	call init;
	min_queue = 1;
	dir = iod_dir;
	gen_type = "printer";
	call enter_output_request$default_request_type (gen_type,
	     info.queue_name, default_queue, max_queue, code);
	info.request_type = OUTPUT;
	go to JOIN;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


JOIN:
	abs_n_sw,					/* Initialize control argument switches.	*/
	ctl_arg_given,
	foreground_sw,
	rqt_sw = ""b;

	do i = i to nargs;
	     call get_arg (i);
	     if code ^= 0 then go to CHECK;		/* if no more arguments do consistency check */
	     if index(arg, "-") = 1 then do;		/* if argument is an option match it with acceptable options */
		ctl_arg_given = "1"b;
		if arg = "-user" |
		arg = "-am" | arg = "-admin" then do;
		     if arg = "-user" then user_arg = "1"b; /* remember if it was -user */
		     else user_arg = ""b;		/* or -admin */
		     info.admin_sw = "1"b;
		     call get_arg (i+1);		/* check for optional user name */
		     if code = 0			/* if there is an argument there */
		     & index(arg, "-") ^= 1 then do;	/* and it is not a control arg */
			i = i + 1;		/* remember that we used this arg */
			info.user_sw = "1"b;
			info.person = before (arg, ".");
			info.project = before (after (arg, "."), ".");
			if info.person = "" then info.person = "*";
			if info.project = "" then info.project = "*";
		     end;
		     else if user_arg then do;	/* user name not optional after -user */
			code = error_table_$noarg;
			arg_msg = "After -user";
			goto PRINT_MISS_ARG;
		     end;
		end;

		else if arg = "-lg" | arg = "-long" then do;
		     info.long_sw = "1"b;		/* indicate that long option given */
		     info.brief_sw = "0"b;		/* override a prior brief option */
		     end;
		else if arg = "-tt" | arg = "-total" | arg = "-totals" then
		     info.total_sw = "1"b;		/* indicate that only totals wanted */
		else if arg = "-a" | arg = "-all" then info.all_opt_sw = "1"b; /* we'll check later */
		else if arg = "-search_all" then info.search_all = "1"b;
		else if (arg = "-im" | arg = "-immediate") & info.request_type ^= RETV then
		     info.immediate = "1"b;
		else if arg = "-q" | arg = "-queue" then do;
		     call get_arg (i+1);
		     if code ^= 0 then do;
			arg_msg = "After -queue";
			goto PRINT_MISS_ARG;
		     end;
		     i = i + 1;			/* get next argument - number indicating which queue */
		     if info.q_opt_sw & abs_n_sw then do;
			arg_msg = "The -queue and absN arguments are incompatbile";
PRINT_ARG_ERR:		call ioa_$rsnnl ("^a. ^a", err_msg, rs_len, arg_msg, arg);
			call print_err_msg (-1, 0);
			return;
		     end;
		     info.q_opt_sw = "1"b;		/* remember that it has been given */
		     if (arg = "fg" | arg = "foreground") & info.request_type = ABS then
			priority = -1;
		     else do;
			priority = cv_dec_check_ (arg, code);
						/* see if valid number */
			if code ^= 0 then do;
			     call ioa_$rsnnl ("Illegal queue number ^a", err_msg, rs_len, arg);
			     call print_err_msg (-1, 0);
			     return;
			end;
		     end;
		     start, finish = priority;	/* set first and last queue to be searched */
		end;

		else if arg = "-lgid" | arg = "-long_id" then
		     info.long_id_sw = "1"b;
		else if arg = "-pn" | arg = "-absp" | arg = "-pathname" | arg = "-absolute_pathname" then
		     info.path_sw = "1"b;
		else if arg = "-bf" | arg = "-brief" then do;
		     info.brief_sw = "1"b;
		     info.long_sw = "0"b;		/* override the long option if previously given */
		     end;
		else if arg = "-psn" | arg = "-position" then
		     info.position_sw = "1"b;
		else if arg = "-id" then do;
		     call get_arg (i+1);
		     if code ^= 0 then do;
			arg_msg = "After -id";
PRINT_MISS_ARG:		err_msg = arg_msg;
			call print_err_msg (-1, code);
			return;
		     end;
		     i = i + 1;			/* next arg is the ID */ 
		     if info.id_sw & abs_n_sw then do;
			arg_msg = "The -id and absN arguments are incompatible";
			goto PRINT_ARG_ERR;
		     end;
		     info.id_sw = "1"b;
		     info.request_id = arg;
		end;
		else if arg = "-et" | arg = "-entry" then do;
		     if info.ename_sw & info.dirname_sw then do;
						/* entryname already given */
DUP_ENTRY_PATH:		arg_msg = "Pathname and entry name cannot both be given";
			goto PRINT_ARG_ERR;
		     end;
		     call get_arg (i+1);
		     if code ^= 0 then do;
			arg_msg = "After -entry";
			goto PRINT_MISS_ARG;
		     end;
		     i = i + 1;
		     info.ename_sw = "1"b;
		     info.ename = arg;
		end;

/* Absentee only control arguments */

		else if info.request_type = ABS then do;
		     if arg = "-rsc" | arg = "-resource" | arg = "-resources" then do;
			info.resource_sw = "1"b;
			call get_arg (i+1);		/* look at next arg */
			if code = 0		/* if there is an arg there */
			then if index(arg, "-") ^= 1 then do;
						/* and it's not a control arg */
						/* assume it's a resource name */
				i = i + 1;	/* bump arg index */
				info.resource_name_sw = "1"b;
				info.resource_name = arg;
				if length (arg) > length (info.resource_name) then do;
				     call ioa_$rsnnl ("Resource name too long; limit is ^d characters. ^a",
					err_msg, rs_len, length (info.resource_name), info.resource_name);
				     call print_err_msg (-1, 0);
				     return;
				end;
			     end;
		     end;
		     else if arg = "-dfi" | arg = "-deferred_indefinitely" then
			info.deferred_indefinitely = "1"b;
		     else if arg = "-sender" then do;
			call get_arg (i+1);
			if code ^= 0 then do;
			     arg_msg = "After -sender";
			     goto PRINT_MISS_ARG;
			end;
			i = i + 1;
			info.sender_sw = "1"b;
			info.sender = arg;
		     end;
		     else if arg = "-fg" | arg = "-foreground" then
			foreground_sw = "1"b;
		     else goto BADOPT;		/* no other arguments valid for absentee requests */
		end;				/* end abs control args */

/* I/O daemon only control arguments */

		else if info.request_type = IO then do;
		     if arg = "-rqt" | arg = "-request_type" then do;
			call get_arg (i+1);
			if code ^= 0 then do;
			     arg_msg = "After -request_type";
			     goto PRINT_MISS_ARG;
			end;
			i = i + 1;
			rqt_sw = "1"b;
			gen_type = "";
			call iod_info_$generic_type (arg, gen_type, code);
			if code ^= 0 then
			     if code = error_table_$id_not_found then do;
				call ioa_$rsnnl ("Unknown request type.  ^a", err_msg, rs_len, arg);
				call print_err_msg (-1, 0);
				return;
			     end;
			     else do;
				call ioa_$rsnnl ("Warning -- Unable to check request type ^a.", err_msg, rs_len, arg);
				call print_err_msg (-1, 0);
			     end;
			info.queue_name = arg;	/* set request type component to message segment name */

			call iod_info_$queue_data (info.queue_name, default_queue, max_queue, code);
						/* get new default and max queue numbers */
						/* this will work if the first one did */
		     end;
		     else goto BADOPT;		/* no other arguments valid for daemon requests */
		end;
		else if info.request_type = OUTPUT then do;
		     if arg = "-rqt" | arg = "-request_type" then do;
			call get_arg (i+1);
			if code ^= 0 then do;
			     arg_msg = "After -request_type";
			     goto PRINT_MISS_ARG;
			end;
			i = i + 1;
			rqt_sw = "1"b;
			gen_type = "";
			call enter_output_request$request_type (arg,
			     gen_type, info.queue_name, default_queue,
			     max_queue, code);
			if code ^= 0 then
			     if code = error_table_$id_not_found then do;
				call ioa_$rsnnl ("Unknown request type.  ^a", err_msg, rs_len, arg);
				call print_err_msg (-1, 0);
				return;
			     end;
			     else do;
				call ioa_$rsnnl ("Warning -- Unable to check request type ^a.", err_msg, rs_len, arg);
				call print_err_msg (-1, 0);
			     end;
		     end;
		     else if arg = "-print" | arg = "-pr" then do;
			gen_type = "printer";
			call enter_output_request$default_request_type (gen_type,
			     info.queue_name, default_queue, max_queue, code);
		     end;
		     else if arg = "-punch" | arg = "-pch" then do;
			gen_type = "punch";
			call enter_output_request$default_request_type (gen_type,
			     info.queue_name, default_queue, max_queue, code);
		     end;
		     else if arg = "-plot" then do;
			gen_type = "plotter";
			call enter_output_request$default_request_type (gen_type,
			     info.queue_name, default_queue, max_queue, code);
		     end;
		     else if arg = "-forms" then do;	/* select special forms requests */
			call get_arg (i+1);		/* check for optional forms name */
			if code = 0 & index (arg, "-") ^= 1 then do;
			     i = i + 1;		/* increment arg index */
			     info.forms_name = arg;	/* and save form name */
			end;
			else info.forms_name = "";	/* else show no form name given */
			info.forms_sw = "1"b;
		     end;
		     else goto BADOPT;		/* no other arguments valid for daemon requests */
		end;
		else do;
BADOPT:		     err_msg = arg;
		     call print_err_msg (-1, error_table_$badopt);
		     return;
		end;
	     end;					/* end control argument do group */

	     else do;				/* not a control argument; might be a pathname */

		if abs_list_sw & index(arg, ">") ^= 1 then do;
						/* if abs list, it might be user name or request ID */

		     if index(arg, "abs") = 1 & verify (substr (arg, 4), "0123456789") = 0 then do; /* absN */
			if abs_n_sw then do;
			     arg_msg = "Only one absN argument allowed";
			     goto PRINT_ARG_ERR;
			end;
			if info.q_opt_sw then do;
			     arg_msg = "The -queue and absN arguments are incompatible";
			     goto PRINT_ARG_ERR;
			end;
			if info.id_sw then do;
			     arg_msg = "The request ID and absN arguments are incompatible";
			     goto PRINT_ARG_ERR;
			end;
			info.q_opt_sw = "1"b;
			start, finish = a_queue;
			info.id_sw = "1"b;
			info.request_id = request_id_ (a_request_id);
		     end;

		     else if i > 3 | ctl_arg_given then do; /* only first 2 args can be user and request ID */
FULL_PATH_REQUIRED:
			arg_msg = "Relative pathnames not allowed";
			goto PRINT_ARG_ERR;
		     end;

		     else if verify (arg, "0123456789.") = 0 then do; /* digits and dot must be request ID */
			if info.id_sw then do;
			     arg_msg = "Reqest ID given twice";
			     goto PRINT_ARG_ERR;
			end;
			info.id_sw = "1"b;
			info.request_id = arg;
		     end;
		     else if search (arg, CAPITALS) = 1 then do;
						/* if it begins with a capital,
						   assume it's a user name */
			info.user_sw = "1"b;
			info.person = before (arg, ".");
			info.project = before (after (arg, "."), ".");
			if info.person = "" then info.person = "*";
			if info.project = "" then do; /* allow operator to forget the dot between person and project */
			     call get_arg (i+1);	/* look ahead at next arg */
			     if code = 0 then do;	/* if there is one */
				if arglen <= 9	/* if it's not too long */
				& search (arg, CAPITALS) = 1 then do;
						/* and it begins with capital */
				     info.project = arg;
						/* assume it is the project name */
				     i = i + 1;	/* skip past this argument */
				end;
			     end;
			     if info.project = "" then info.project = "*"; /* if next arg wasn't it, set it to * */
			end;
			else goto FULL_PATH_REQUIRED; /* neither request ID nor user name */
		     end;
		end;
		else do;				/* pick up and store pathname */
		     if info.ename_sw then goto DUP_ENTRY_PATH;
		     call expand_pathname_ (arg, info.dirname, info.ename, code);
		     if code ^= 0 then do;
			call ioa_$rsnnl ("Expanding pathname: ^a", err_msg, rs_len, arg);
			call print_err_msg (-1, code);
			return;
		     end;
		     info.dirname_sw, info.ename_sw = "1"b;
		end;
	     end;

	end;					/* end argument loop */

/* Now check the arguments for consistency */

CHECK:

	if abs_list_sw then
	     if ^(info.immediate | info.q_opt_sw | foreground_sw | info.id_sw | info.ename_sw
	     | info.resource_sw | info.deferred_indefinitely | info.sender_sw | info.user_sw)
	     & ^info.total_sw then do;
		err_msg =
		     "No job selection arguments given. Use ""-et **"" if you really want to list all jobs in all queues";
		call print_err_msg (-1, 0);
		return;
	     end;

	if info.all_opt_sw & info.q_opt_sw then do;
	     err_msg = "The -all and -queue control arguments are incompatible.";
	     call print_err_msg (-1, 0);
	     return;
	end;

	if info.q_opt_sw then do;
	     if priority = -1 & info.request_type = ABS then;
	     else if priority < min_queue | priority > max_queue then do;
		call ioa_$rsnnl ("-queue ^d is invalid.  Use a number from ^d to ^d.", err_msg, rs_len,
		     priority, min_queue, max_queue);
		call print_err_msg (-1, 0);
		return;
	     end;
	end;

	if foreground_sw then
	     if info.all_opt_sw | info.q_opt_sw then do;
		call ioa_$rsnnl ("The following control arguments are incompatible: -foreground^[^x-all^]^[^x-queue^]",
		     err_msg, rs_len, info.all_opt_sw, info.q_opt_sw);
		call print_err_msg (-1, 0);
		return;
	     end;

	if info.long_sw & info.total_sw then do;
	     call ioa_$rsnnl ("The following control arguments are incompatible: -long^ and -total",
		err_msg, rs_len);
	     call print_err_msg (-1, 0);
	     return;
	end;
	if info.request_type = IO & info.long_sw	/* ldr -long prints contents of requests */
	& gen_type ^= "printer" & gen_type ^= "punch" & gen_type ^= "plotter" then do;
	     call ioa_ ("Warning: the -long control argument is only valid for
printer, punch or plotter generic types.");
	     info.long_sw = ""b;			/* if we don't know the structure of this generic type */
	end;					/* just list the stuff in the message header */

/* Now set first and last queue according to arguments or defaults (but -q argument processing sets them in-line) */

	if info.all_opt_sw | info.search_all then do;
	     start = min_queue;
	     finish = max_queue;
	end;
	else if foreground_sw then
	     start, finish = -1;
	else if ^info.q_opt_sw then do;		/* no queue specified - set defaults */
	     start = min_queue;			/* -search_all is the default */
	     finish = max_queue;			/* that is, search all queues */
	     info.search_all = "1"b;			/* but only print for queues that we select requests from */

	end;
	if info.request_type = ABS then do;		/* for absentee queues */
	     if start = 1 then			/* if user said -q 1 */
		start = 0;			/* we pretend queue 0 is the first part of queue 1 */
	     if start <= 0				/* if listing queue 0 */
	     & finish >= 1				/* and also queue 1 */
	     then info.abs_q_1 = "1"b;		/* turn on the "pretend they are one queue" switch */
	end;

/* Arguments are ok. Get ready to call lar_util_. First, get a temp segment for lar_util_ to build the listing in. */

	info.mseg_idx = 0;				/* no open mseg */

/* CONDITION HANDLER FOR cleanup */

	tp = null();
	on condition (cleanup) begin;			/* but first be sure we will give it back no matter what */
	     if info.mseg_idx ^= 0 then		/* if we have an open mseg */
		call message_segment_$close (info.mseg_idx, i); /* i is code, to be ignored */
	     if tp ^= null then			/* if we have a temp seg */
		call release_temp_segment_ (id, tp, code); /* give it back */
	end;					/* end begin block */

/* END CONDITION HANDLER */

	call get_temp_segment_ (id, tp, code);
	if code ^= 0 then do;
	     err_msg = "temporary segment";
	     call print_err_msg (-1, code);
	     return;
	end;

/* Initialize, before entering loop over queues */

	info.temptr = tp;

/* Beginning of loop over one or more queues */

	do info.queue = start to finish;
	     if info.queue = -1 then ent = "absentee_foreground.ms"; /* construct entry name of message segment */
	     else call ioa_$rsnnl ("^a_^d.ms", ent, rs_len, info.queue_name, info.queue);
	     call message_segment_$open (dir, ent, info.mseg_idx, code); /* initiate message segment containing requests */
	     if code = 0 then do;			/* if we opened it successfully, go list it */

/* call lar_util_, which will build up a listing of this queue's requests, in a printable segment */

		call lar_util_ (info_ptr, code);	/* get information on requests in this queue */
		call message_segment_$close (info.mseg_idx, ignore_code);
						/* close message segment */
	     end;
	     if code ^= 0 then do;
		call ioa_$rsnnl ("^[Attempting to open^x^;^]^a>^a", err_msg, rs_len, (info.mseg_idx = 0), dir, ent);
		call print_err_msg (-1, code);
	     end;
	     info.mseg_idx = 0;			/* so cleanup handler doesn't try to close it again */
	     info.input_count = info.output_count;	/* copy new length of temorary */
	end;

/* End of loop over queues. Now print the segment built by lar_util_. */

/* Under some circumstances, lar_util_ will put nothing in the segment, rather than put out lots of lines
   that say "no requests". So here we check for those circumstances, and print a line of explanation. */

	if (info.all_opt_sw & info.message_count = 0 & ^info.no_total_sw) /* if -all and Qs were all empty */
	| (info.search_all & info.select_count = 0) then do; /* or -search_all and no requests were selected */

/* We want to say one of:
   There are 		}
   You have 		} no requests in any ^a queue.
   ^a.^a has 		}
   Selection arguments matched}

   Figure out which. */

	     if info.message_count = 0 then
		i = 1;				/* There are no requests in ... */
	     else if info.user_select_count = 0 then
		if ^info.user_sw then		/* if user name not given */
		     i = 2;			/* You have no requests in ... */
		else i = 3;			/* ^a.^a has no requests in ... */
	     else i = 4;				/* Selection arguments matched no requests in ... */

/* Now say it */

	     call ioa_ (
		"^[^2sThere are^;^2sYou have^;^a.^a has^;^2sSelection arguments matched^] no requests in any ^a queue.",
		i, info.person, info.project, info.queue_name);

	end;

/* If we printed the above message, there should be nothing in the segment except an initial newline.
   If there is something else, we have a bug. Print it, so the bug will be obvious. */

	if info.output_count > 1 then do;
	     call iox_$put_chars (iox_$user_output, info.temptr, info.output_count, code);
	     if code ^= 0 then do;
		err_msg = "user_output";
		call print_err_msg (-1, code);
	     end;
	     if (info.all_opt_sw | info.search_all) & info.total_sw then
		call ioa_;			/* put blank line after single-spaced totals lines */
	end;

/* This is the main exit from this procedure */

	call release_temp_segment_ (id, tp, code);
ERROR_EXIT:
	return;



	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/*	ADDITIONAL       ENTRY  	 POINTS					*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


test_lar:	entry (sys_dir);				/* entry point for testing lar command		*/

    dcl	sys_dir			char(*);

	not_initialized = "1"b;			/* get queue data again			*/
	abs_dir = sys_dir;
	return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


test_ldr:	entry (sys_dir);

	not_initialized = "1"b;			/* get queue data again			*/
	iod_dir = sys_dir;
	call iod_info_$test (sys_dir);
	return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


test_lrr:	entry (sys_dir);

	not_initialized = "1"b;			/* get queue data again			*/
	retriever_dir = sys_dir;
	return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/*									*/
	/*	INTERNAL	 PROCEDURES						*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


get_arg:	proc (argno);

    dcl	argno			fixed bin;

	     if abs_list_sw then
		call cu_$arg_ptr_rel (argno, argptr, arglen, code, a_arglist_ptr);
	     else call cu_$arg_ptr (argno, argptr, arglen, code);
	     return;

	end get_arg;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


init:	proc;

	     if not_initialized then do;
		call iod_info_$queue_data ("printer", io_default_q, io_max_q, code);
		if code ^= 0 then do;		/* attempt default action */
		     io_max_q = 4;			/* the max max_q */
		     io_default_q = 3;		/* as in the past */
		end;

		abs_max_q = 4;
		call system_info_$default_absentee_queue (abs_default_q);
		     if abs_default_q = 0 then abs_default_q = 3;

		call hcs_$star_ (retriever_dir, "volume_retriever*.ms", 2, null, ret_max_q, (null), (null), code);
		if code ^= 0 then
		     ret_max_q = 3;			/* retriever never has more than three */
		ret_default_q = min (ret_max_q, 3);

		not_initialized = "0"b;		/* we have the values now */
	     end;

	     info_ptr = addr (local_info);
	     unspec (info) = ""b;			/* zero everyting in info structure */

	     if abs_list_sw then do;			/* if abs list command */
		nargs = a_arg_count;		/* pick up length of admin$abs's arglist */
		i = 2;				/* skip first arg, which is "list" */
		info.admin_sw = "1"b;		/* always list other users' requests */
	     end;
	     else do;				/* user command */
		call cu_$arg_count(nargs, code);	/* get length of this procedure's arglist */
		if code ^= 0 then do;
		     call com_err_ (code, id);
		     go to ERROR_EXIT;
		end;
		i = 1;				/* and start with the first one */
	     end;

	     return;

	end init;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


print_err_msg: proc (sv, ec);

    dcl	sv			fixed bin,	/* severity, for use in sys_log_ calls */
	ec			fixed bin(35);	/* error code */

/* The global variable, err_msg, is an implicit argument */

	     if abs_list_sw then do;
		if ec ^= 0 then
		     call sys_log_$command_error (sv, ec, "abs list", "^a", err_msg);
		else call sys_log_$command (sv, "abs list: ^a", err_msg);
	     end;
	     else call com_err_ (ec, id, "^a", err_msg);
	     return;

	end print_err_msg;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


     end list_abs_requests;
