/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* This program sets up an absentee job to format segments using runoff */

/* Initially coded: May 1972 by Sze-Ping Kuo */
/* Modified: 22 July 1975 by S. Herbst to accept new dprint control arguments */
/* Rewritten: 24 September 1980 by G. Palter based upon pl1_abs as many changes needed to be retrofitted */

/* format: style3,ll122 */

runoff_abs:
rfa:
     procedure options (variable);

/* automatic */

dcl	abs_args_list_len	fixed bin (21);
dcl	abs_args_list_ptr	pointer;
dcl	abs_args_list_space char (256) varying;
dcl	absentee_queue	char (1);
dcl	absentee_queue_n	fixed bin;		/* default absentee queue */
dcl	areap		ptr;
dcl	argcount		fixed bin;
dcl	arglen		fixed bin (21);
dcl	argno		fixed bin;
dcl	argp		ptr;
dcl	checkdir		char (168);
dcl	checkent		char (32);
dcl	code		fixed bin (35);
dcl	curarg		char (32);
dcl	default_absentee_queue
			bit (1) aligned;
dcl	dp_args_list_len	fixed bin (21);
dcl	dp_args_list_ptr	pointer;
dcl	dp_args_list_space	char (256) varying;
dcl	dprint_queue	char (1);
dcl	error_sw		bit (1) aligned;
dcl	first_entryname	char (32);
dcl	hold		char (6) varying;
dcl	i		fixed bin;
dcl	limit_no		pic "(9)z9";
dcl	limit_sw		bit (1) aligned;
dcl	no_of_copies_str	char (1);
dcl	out_file		char (168);
dcl	outsw		bit (1) aligned;
dcl	request_type	char (32);
dcl	segname_list_len	fixed bin (21);
dcl	segname_list_ptr	pointer;
dcl	segname_list_space	char (256) varying;
dcl	temp		fixed bin (35);

/* based */

dcl	abs_args_list	char (abs_args_list_len) varying based (abs_args_list_ptr);
dcl	argu		char (arglen) based (argp);
dcl	digit_pic		pic "9" based;
dcl	dp_args_list	char (dp_args_list_len) varying based (dp_args_list_ptr);
dcl	segname_list	char (segname_list_len) varying based (segname_list_ptr);
dcl	system_area	area based (areap);

/* builtin */

dcl	(binary, codeptr, convert, hbound, index, lbound, ltrim, max, maxlength, null, rtrim, string)
			builtin;

/* condition */

dcl	cleanup		condition;

/* internal static */

dcl	SP		char (1) internal static options (constant) initial (" ");
dcl	function		char (6) internal static options (constant) initial ("runoff");
dcl	function_abs	char (10) internal static options (constant) initial ("runoff_abs");

/* external static */

dcl	error_table_$badopt fixed bin (35) external static;

/* entry */

dcl	absolute_pathname_	entry (char (*), char (*), fixed bin (35));
dcl	com_err_		entry options (variable);
dcl	com_err_$suppress_name
			entry options (variable);
dcl	cu_$arg_count	entry (fixed bin, fixed bin (35));
dcl	cu_$arg_ptr	entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl	cv_dec_check_	entry (char (*), fixed bin (35)) returns (fixed bin (35));
dcl	enter_abs_request	entry options (variable);
dcl	expand_pathname_$add_suffix
			entry (char (*), char (*), char (*), char (*), fixed bin (35));
dcl	get_system_free_area_
			entry returns (ptr);
dcl	get_wdir_		entry returns (char (168) aligned);
dcl	hcs_$fs_get_path_name
			entry (ptr, char (*), fixed bin, char (*), fixed bin (35));
dcl	hcs_$status_minf	entry (char (*), char (*), fixed bin (1), fixed bin (2), fixed bin (24), fixed bin (35));
dcl	ioa_		entry options (variable);
dcl	iod_info_$generic_type
			entry (char (*), char (32), fixed bin (35));
dcl	iod_info_$queue_data
			entry (char (*), fixed bin, fixed bin, fixed bin (35));
dcl	requote_string_	entry (char (*)) returns (char (*));
dcl	suffixed_name_$new_suffix
			entry (char (*), char (*), char (*), char (32), fixed bin (35));
dcl	system_info_$default_absentee_queue
			entry (fixed bin);

/* format: inddcls */
%page;
/* program */

	areap = get_system_free_area_ ();

	abs_args_list_space = "";
	abs_args_list_ptr = addr (abs_args_list_space);
	abs_args_list_len = maxlength (abs_args_list_space);

	default_absentee_queue = "1"b;

	dp_args_list_space = "";
	dp_args_list_ptr = addr (dp_args_list_space);
	dp_args_list_len = maxlength (dp_args_list_space);

	error_sw = "0"b;
	hold = "dprint";				/* dprint runout(s) when done */
	limit_sw = "0"b;				/* no absentee timer limit */
	no_of_copies_str = "1";
	outsw = "0"b;				/* -output_file not used */
	request_type = "printer";

	segname_list_space = "";
	segname_list_ptr = addr (segname_list_space);
	segname_list_len = maxlength (segname_list_space);

	call system_info_$default_absentee_queue (absentee_queue_n);
	if absentee_queue_n = 0
	then absentee_queue_n = 3;			/* default default absentee queue */
	absentee_queue = convert (digit_pic, absentee_queue_n);
	dprint_queue = absentee_queue;

	call cu_$arg_count (argcount, code);
	if code ^= 0
	then do;
		call com_err_ (code, function_abs);
		return;
	     end;

	if argcount = 0
	then do;
		call com_err_$suppress_name (0, function_abs, "Usage: ^a paths {^a_args} {dp_args} {-control_args}",
		     function_abs, function);
		return;
	     end;

	on cleanup call cleaner_up ();

/* Start looking at arguments */

	do argno = 1 to argcount;			/* Loop ends at ENDLOOP */
	     call cu_$arg_ptr (argno, argp, arglen, code);
	     if code ^= 0
	     then do;
		     call com_err_ (code, function_abs, "Argument ^d.", argno);
		     goto REQUEST_NOT_SUBMITTED;
		end;

	     curarg = argu;

	     if index (argu, "-") ^= 1
	     then begin;
		     dcl	     bitcnt	     fixed bin (24);
		     dcl	     type		     fixed bin (2);

		     call expand_pathname_$add_suffix (argu, function, checkdir, checkent, code);
		     if code ^= 0
		     then do;
			     call com_err_ (code, function_abs, "^a", argu);
			     goto REQUEST_NOT_SUBMITTED;
			end;

		     call hcs_$status_minf (checkdir, checkent, 1, type, bitcnt, code);
		     if code ^= 0
		     then do;
			     call com_err_ (code, function_abs, "^a^[>^]^a", checkdir, (checkdir ^= ">"), checkent);
			     error_sw = "1"b;
			end;

		     if segname_list = ""
		     then first_entryname = checkent;

		     call add_requoted (argu, segname_list_ptr, segname_list_len, addr (segname_list_space));
		     goto ENDLOOP;
		end;

/* Check for absentee control arguments */

	     else if argu = "-hold" | argu = "-hd"
	     then do;
		     hold = "hold";
		     goto ENDLOOP;
		end;

	     else if argu = "-limit" | argu = "-li"
	     then do;
		     limit_sw = "1"b;
		     argno = argno + 1;
		     call cu_$arg_ptr (argno, argp, arglen, code);
		     if code ^= 0
		     then goto TOO_FEW_ARGS;

		     temp = cv_dec_check_ (argu, code);
		     if code ^= 0 | temp <= 0
		     then do;
			     call com_err_ (0, function_abs, "Invalid limit. ^a", argu);
			     goto REQUEST_NOT_SUBMITTED;
			end;

		     limit_no = temp;
		     goto ENDLOOP;
		end;

	     else if argu = "-queue" | argu = "-q"
	     then do;
		     argno = argno + 1;
		     call cu_$arg_ptr (argno, argp, arglen, code);
		     if code ^= 0
		     then goto TOO_FEW_ARGS;

		     temp = cv_dec_check_ (argu, code);
		     if code = 0 & 1 <= temp & temp <= 4
		     then absentee_queue = convert (digit_pic, temp);
		     else do;
			     call com_err_ (0, function_abs, "Invalid queue number. ^a", argu);
			     goto REQUEST_NOT_SUBMITTED;
			end;

		     default_absentee_queue = "0"b;
		     dprint_queue = absentee_queue;
		     goto ENDLOOP;
		end;

	     else if argu = "-output_file" | argu = "-of"
	     then do;
		     argno = argno + 1;
		     call cu_$arg_ptr (argno, argp, arglen, code);
		     if code ^= 0
		     then goto TOO_FEW_ARGS;

		     call absolute_pathname_ (argu, out_file, code);
		     if code ^= 0
		     then do;
			     call com_err_ (code, function_abs, "^a", argu);
			     goto REQUEST_NOT_SUBMITTED;
			end;

		     outsw = "1"b;
		     goto ENDLOOP;
		end;

/* Is this a dprint option? */

	     else if argu = "-notify" | argu = "-nt" | argu = "-single" | argu = "-sg" | argu = "-no_endpage"
		     | argu = "-nep" | argu = "-non_edited" | argu = "-ned" | argu = "-access_label"
		     | argu = "-albl" | argu = "-truncate" | argu = "-tc" | argu = "-no_label" | argu = "-nlbl"
	     then do;
		     call add (argu, dp_args_list_ptr, dp_args_list_len, addr (dp_args_list_space));
		     goto ENDLOOP;
		end;

	     else if argu = "-destination" | argu = "-ds" | argu = "-header" | argu = "-he" | argu = "-label"
		     | argu = "-lbl" | argu = "-top_label" | argu = "-tlbl" | argu = "-bottom_label" | argu = "-blbl"
	     then do;
		     call add (argu, dp_args_list_ptr, dp_args_list_len, addr (dp_args_list_space));
		     argno = argno + 1;
		     call cu_$arg_ptr (argno, argp, arglen, code);
		     if code ^= 0
		     then goto TOO_FEW_ARGS;

		     call add_requoted (argu, dp_args_list_ptr, dp_args_list_len, addr (dp_args_list_space));
		     goto ENDLOOP;
		end;

	     else if argu = "-request_type" | argu = "-rqt"
	     then begin;
		     dcl	     gen_type	     char (32);

		     call add (argu, dp_args_list_ptr, dp_args_list_len, addr (dp_args_list_space));
		     argno = argno + 1;
		     call cu_$arg_ptr (argno, argp, arglen, code);
		     if code ^= 0
		     then goto TOO_FEW_ARGS;

		     call iod_info_$generic_type (argu, gen_type, code);
		     if code ^= 0
		     then do;
			     call com_err_ (code, function_abs, "Request type ^a.", argu);
			     goto REQUEST_NOT_SUBMITTED;
			end;

		     if gen_type ^= "printer"
		     then do;
			     call com_err_ (0, function_abs, "Request type ^a is not for the printer.", argu);
			     goto REQUEST_NOT_SUBMITTED;
			end;

		     request_type = argu;
		     call add (argu, dp_args_list_ptr, dp_args_list_len, addr (dp_args_list_space));
		     goto ENDLOOP;
		end;

	     else if argu = "-line_length" | argu = "-ll"
	     then do;
		     call add (argu, dp_args_list_ptr, dp_args_list_len, addr (dp_args_list_space));
		     argno = argno + 1;
		     call cu_$arg_ptr (argno, argp, arglen, code);
		     if code ^= 0
		     then goto TOO_FEW_ARGS;

		     temp = cv_dec_check_ (argu, code);
		     if code ^= 0 | temp < 2 | temp > 136
		     then do;
			     call com_err_ (0, function_abs, "Invalid line length. ^a", argu);
			     goto REQUEST_NOT_SUBMITTED;
			end;

		     call add (argu, dp_args_list_ptr, dp_args_list_len, addr (dp_args_list_space));
		     goto ENDLOOP;
		end;

	     else if argu = "-page_length" | argu = "-pl"
	     then do;
		     call add (argu, dp_args_list_ptr, dp_args_list_len, addr (dp_args_list_space));
		     argno = argno + 1;
		     call cu_$arg_ptr (argno, argp, arglen, code);
		     if code ^= 0
		     then goto TOO_FEW_ARGS;

		     temp = cv_dec_check_ (argu, code);
		     if code ^= 0 | temp < 2 | temp > 66
		     then do;
			     call com_err_ (0, function_abs, "Invalid page length. ^a", argu);
			     goto REQUEST_NOT_SUBMITTED;
			end;

		     call add (argu, dp_args_list_ptr, dp_args_list_len, addr (dp_args_list_space));
		     goto ENDLOOP;
		end;

	     else if argu = "-copy" | argu = "-cp"
	     then do;
		     argno = argno + 1;
		     call cu_$arg_ptr (argno, argp, arglen, code);
		     if code ^= 0
		     then goto TOO_FEW_ARGS;

		     temp = cv_dec_check_ (argu, code);
		     if code = 0 & 1 <= temp & temp <= 4
		     then no_of_copies_str = convert (digit_pic, temp);
		     else do;
			     call com_err_ (0, function_abs, "Invalid number of copies. ^a", argu);
			     goto REQUEST_NOT_SUBMITTED;
			end;

		     goto ENDLOOP;
		end;

/* Check for runoff control arguments */

	     else if argu = "-hyphenate" | argu = "-hph" | argu = "-character" | argu = "-chars" | argu = "-ch"
		     | argu = "-no_pagination" | argu = "-npgn" | argu = "-number" | argu = "-nb"
	     then do;
		     call add (argu, abs_args_list_ptr, abs_args_list_len, addr (abs_args_list_space));
		     goto ENDLOOP;
		end;

	     else if argu = "-ball" | argu = "-bl" | argu = "-device" | argu = "-dv" | argu = "-from" | argu = "-fm"
		     | argu = "-indent" | argu = "-in" | argu = "-pass" | argu = "-page" | argu = "-pg" | argu = "-to"
	     then do;				/* requires a number */
		     call add (argu, abs_args_list_ptr, abs_args_list_len, addr (abs_args_list_space));
		     argno = argno + 1;
		     call cu_$arg_ptr (argno, argp, arglen, code);
		     if code ^= 0
		     then goto TOO_FEW_ARGS;

		     temp = cv_dec_check_ (argu, code);
		     if code ^= 0
		     then do;
			     call com_err_ (0, function_abs, "A number must follow ""^a""; not ""^a"".", curarg,
				argu);
			     goto REQUEST_NOT_SUBMITTED;
			end;

		     call add (argu, abs_args_list_ptr, abs_args_list_len, addr (abs_args_list_space));
		     goto ENDLOOP;
		end;

	     else if argu = "-parameter" | argu = "-pm"
	     then do;				/* must be followed by a string */
		     call add (argu, abs_args_list_ptr, abs_args_list_len, addr (abs_args_list_space));
		     argno = argno + 1;
		     call cu_$arg_ptr (argno, argp, arglen, code);
		     if code ^= 0
		     then goto TOO_FEW_ARGS;

		     call add_requoted (argu, abs_args_list_ptr, abs_args_list_len, addr (abs_args_list_space));
		     goto ENDLOOP;
		end;

ENDLOOP:
	end;

	if error_sw
	then goto REQUEST_NOT_SUBMITTED;

	if segname_list = ""
	then do;
		call com_err_ (0, function_abs, "No segments specified.");
		goto REQUEST_NOT_SUBMITTED;
	     end;

	if ^outsw
	then do;
		call suffixed_name_$new_suffix (first_entryname, function, "absout", checkent, code);
		if code ^= 0
		then do;
			call com_err_ (code, function_abs, "^a with absout suffix.", first_entryname);
			goto REQUEST_NOT_SUBMITTED;
		     end;

		out_file = checkent;
	     end;

	begin;
	     dcl	     default_queue	     fixed bin;
	     dcl	     max_queue	     fixed bin;

	     call iod_info_$queue_data (request_type, default_queue, max_queue, code);
	     if code ^= 0
	     then do;
		     call com_err_ (code, function_abs, "Request type ^a.", request_type);
		     goto REQUEST_NOT_SUBMITTED;
		end;

	     if default_absentee_queue		/* user didn't specify queue: use default without warnings */
	     then dprint_queue = convert (digit_pic, default_queue);

	     if binary (dprint_queue, 17) < 1 | max_queue < binary (dprint_queue, 17)
	     then do;
		     call com_err_ (0, function_abs,
			"Request type ^a does not have queue ^a. Dprint queue ^d assumed.", request_type,
			dprint_queue, max_queue);
		     dprint_queue = convert (digit_pic, max_queue);
		end;
	end;

	call hcs_$fs_get_path_name (codeptr (runoff_abs), checkdir, i, checkent, code);

	if limit_sw
	then call enter_abs_request (rtrim (checkdir) || ">runoff_abs_absin", "-queue", absentee_queue, "-restart",
		"-output_file", rtrim (out_file), "-limit", ltrim (limit_no), "-arguments", rtrim (get_wdir_ ()),
		dprint_queue, (hold), no_of_copies_str, ltrim (segname_list), ltrim (abs_args_list),
		ltrim (dp_args_list));

	else call enter_abs_request (rtrim (checkdir) || ">runoff_abs_absin", "-queue", absentee_queue, "-restart",
		"-output_file", rtrim (out_file), "-arguments", rtrim (get_wdir_ ()), dprint_queue, (hold),
		no_of_copies_str, ltrim (segname_list), ltrim (abs_args_list), ltrim (dp_args_list));

	call cleaner_up;

	return;


TOO_FEW_ARGS:
	call com_err_ (code, function_abs, "After ^a.", curarg);
	goto REQUEST_NOT_SUBMITTED;

UNREC_OPT:
	call com_err_ (error_table_$badopt, function_abs, "^a", argu);
	goto REQUEST_NOT_SUBMITTED;

REQUEST_NOT_SUBMITTED:
	call com_err_ (0, function_abs, "Absentee request not submitted.");
	call cleaner_up;

	return;
%page;
/* format: ^inddcls */

/* Add the argument to one of the arbitrarily lengthed output strings */

add:
     procedure (argument, output_ptr, output_len, output_space);

dcl	argument		character (*) parameter;
dcl	output_ptr	pointer parameter;
dcl	output_len	fixed binary (21) parameter;
dcl	output_space	pointer parameter;
dcl	requote_argument	bit (1) aligned;
dcl	new_min_maxlength	fixed binary (21);
dcl	old_output_len	fixed binary (21);
dcl	old_output_ptr	pointer;
dcl	output_string	character (output_len) varying based (output_ptr);
dcl	old_output_string	character (old_output_len) varying based (old_output_ptr);

	requote_argument = "0"b;
	goto START_ADDITION;

add_requoted:
     entry (argument, output_ptr, output_len, output_space);

	requote_argument = "1"b;

START_ADDITION:
	new_min_maxlength = length (output_string) + length (SP) + length (argument);
	if requote_argument				/* room for possible requoting */
	then new_min_maxlength = new_min_maxlength + length (argument) + 2;

	if new_min_maxlength > output_len
	then do;					/* need to make more space */
		old_output_ptr = output_ptr;
		old_output_len = output_len;
		output_len = max (2 * output_len, new_min_maxlength);
		allocate output_string in (system_area) set (output_ptr);
		output_string = old_output_string;
		if old_output_ptr ^= output_space
		then free old_output_string in (system_area);
	     end;

	output_string = output_string || SP;

	if requote_argument
	then output_string = output_string || requote_string_ (argument);
	else output_string = output_string || argument;

	return;

     end add;



cleaner_up:
     procedure;

	if abs_args_list_ptr ^= addr (abs_args_list_space)
	then free abs_args_list in (system_area);
	if dp_args_list_ptr ^= addr (dp_args_list_space)
	then free dp_args_list in (system_area);
	if segname_list_ptr ^= addr (segname_list_space)
	then free segname_list in (system_area);

	return;

     end cleaner_up;

     end runoff_abs;
