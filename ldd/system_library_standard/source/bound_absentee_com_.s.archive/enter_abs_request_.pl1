/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1986 *
        *                                                         *
        *********************************************************** */

/* format: style2,^inddcls,ifthenstmt,ifthendo,^indnoniterdo,^inditerdo,ind3,idind32 */

enter_abs_request_:
   procedure (p_abs_request_info_ptr, p_abs_return_info_ptr, p_code);

/****^  HISTORY COMMENTS:
  1) change(86-04-30,Cox), approve(86-05-01,MCR7390), audit(86-05-12,Newcomb),
     install(86-06-30,MR12.0-1082):
     Initially written.
  2) change(86-06-23,Gilcrease), approve(86-06-23,MCR7370),
     audit(86-06-25,Lippard), install(86-06-30,MR12.0-1082):
               Change version number of abs_message_format, for
               -truncate .absout SCP6297.
  3) change(86-06-23,Lippard), approve(85-12-30,MCR7326),
     audit(86-10-24,GDixon), install(86-10-28,MR12.0-1200):
     Modified 19 June 1986 (above date to satisfy picky hcom)
     by Jim Lippard to use absentee command AS request.
  4) change(87-07-07,GDixon), approve(87-07-07,MCR7741),
     audit(87-07-07,Hartogs), install(87-08-04,MR12.1-1055):
     Include user_abs_attributes.incl.pl1 as part of splitting
     abs_message_format.incl.pl1.
  5) change(87-11-11,Parisek), approve(88-02-11,MCR7849),
     audit(88-05-03,Lippard), install(88-07-13,MR12.2-1047):
     Added the referencing of the new abs_request_info version 3 elements.
     Use exec_com search paths for locating input absin.   SCP 6367.
  6) change(88-04-29,Parisek), approve(88-04-29,MCR7878),
     audit(88-05-03,Lippard), install(88-07-13,MR12.2-1047):
     Parse the input pathname here instead of the ear command module and check
     if ec search paths are required for locating absin.
  7) change(88-08-15,Parisek), approve(88-09-22,MCR7977),
     audit(88-09-26,Fawcett), install(88-09-30,MR12.2-1124):
     Correct improper formatting of some error messages returned to the caller.
     Improve for coding standards.
  8) change(88-11-22,Parisek), approve(89-01-03,MCR8032),
     audit(89-01-04,Farley), install(89-01-17,MR12.3-1005):
     Use fs_util_ entries for determining absin/absout segment types, and ACLs
     so ACLs for MSFs can be easily determined.
                                                   END HISTORY COMMENTS */

/* Parameters */

dcl     (p_abs_request_info_ptr, p_abs_return_info_ptr)
				ptr parameter;
dcl     p_code			fixed bin (35) parameter;

/* Automatic */

dcl     aok                             bit (1) aligned;
dcl     arg_idx			fixed bin;
dcl     authrng                         (2) bit (72) aligned;
dcl     (
        code,
        default_cpu_limits		dimension (4),
        default_foreground_cpu_limit
        )				fixed bin (35);
dcl     ignore_code                     fixed bin (35);
dcl     (input_entryname, login_name, message_seg_entry, output_entryname, proxy_name)
				char (32);
dcl     len_entry                       fixed bin;	/* length of entry name of absentee control segment */
dcl     len_path                        fixed bin;	/* length of dir name of abs(in out) segs */
dcl     1 local_asraci		aligned like asr_abs_command_info;
dcl     message_id			bit (72) aligned;
dcl     must_search                     bit (1) aligned;
dcl     next_arg_position		fixed bin;
dcl     (input_dirname, output_dirname, output_pathname)
                                        char (168);
dcl     rs_len                          fixed bin;
dcl     search_pname                    char (168);	/* Directory name located through search paths */
dcl     queue_picture		picture "9";
dcl     reqp			ptr;
dcl     ringrng                         (2) fixed bin;

/* Entries */

dcl     aim_check_$in_range             entry (bit (72) aligned, (2) bit (72) aligned) returns (bit (1) aligned);
dcl     expand_pathname_$add_suffix     entry (char (*), char (*), char (*), char (*), fixed bin (35));
dcl     get_group_id_$tag_star	entry () returns (char (32));
dcl     cu_$level_get		entry (fixed bin);
dcl     get_temp_segment_		entry (char (*), ptr, fixed bin (35));
dcl     fs_util_$get_type               entry (char (*), char (*), char (*), fixed bin (35));
dcl     fs_util_$get_user_access_modes  entry (char (*), char (*), char (*), fixed bin, bit (36) aligned, bit (36) aligned, fixed bin (35));
dcl     ioa_$rsnnl			entry () options (variable);
dcl     message_segment_$add_file	entry (char (*), char (*), ptr, fixed bin, bit (72) aligned, fixed bin (35));
dcl     message_segment_$get_message_count_file
				entry (char (*), char (*), fixed bin, fixed bin (35));
dcl     parse_resource_desc_$check	entry (char (*), ptr, ptr, ptr, char (*) var, fixed bin (35));
dcl     pathname_			entry (char (*), char (*)) returns (char (168));
dcl     release_temp_segment_		entry (char (*), ptr, fixed bin (35));
dcl     search_paths_$find_dir          entry (char (*), ptr, char (*), char (*), char (*), fixed bin (35));
dcl     send_as_request_$no_block	entry (ptr, fixed bin, bit(72) aligned, fixed bin(35));
dcl     suffixed_name_$make		entry (char (*), char (*), char (32), fixed bin (35));
dcl     suffixed_name_$new_suffix	entry (char (*), char (*), char (*), char (32), fixed bin (35));
dcl     system_info_$abs_limits	entry ((4) fixed bin (35), fixed bin (35));
dcl     system_info_$default_absentee_queue
				entry (fixed bin);
dcl     user_info_$attributes           entry (char (*) varying);
dcl     user_info_$authorization_range  entry ((2) bit (72) aligned);
dcl     user_info_$ring_range           entry ((2) fixed bin);
dcl     user_info_$whoami		entry (char (*), char (*), char (*));

/* External */

dcl     (
        as_error_table_$illegal_hd_arg,
        as_error_table_$illegal_ip_arg,
        as_error_table_$ring_too_high,
        as_error_table_$ring_too_low,
        error_table_$ai_out_range,
        error_table_$bad_subr_arg,
        error_table_$moderr,
        error_table_$noarg,
        error_table_$no_append,
        error_table_$no_search_list,
        error_table_$noentry,
        error_table_$not_seg_type,
        error_table_$no_s_permission,
        error_table_$null_info_ptr,
        error_table_$pathlong,
        error_table_$unimplemented_version
        )				fixed bin (35) external;

/* Constant */

dcl     (
        ABSENTEE_DIRECTORY		char (168) initial (">system_control_1"),
        ABSENTEE_QUEUE_PREFIX		char (9) initial ("absentee_"),
        ABSIN_SEG			bit (1) aligned initial ("0"b),
        ABSOUT_SEG			bit (1) aligned initial ("1"b),
        FOREGROUND_ABSENTEE_QUEUE_NAME	char (32) initial ("absentee_foreground.ms"),
        ME			char (32) initial ("enter_absentee_request_"),
        MESSAGE_SEG_SUFFIX		char (2) initial ("ms")
        )				internal static options (constant);

/* Conditions */

dcl     cleanup			condition;

/* Builtins */

dcl     (addr, clock, convert, currentsize, index, length, null, rtrim,
	 reverse, search, substr, unspec) 	builtin;

/* Program */

      p_code = 0;

      abs_request_info_ptr = p_abs_request_info_ptr;
      if abs_request_info_ptr = null then call ERROR_RETURN (error_table_$null_info_ptr);
      abs_return_info_ptr = p_abs_return_info_ptr;
      if abs_return_info_ptr = null then call ERROR_RETURN (error_table_$null_info_ptr);
      if abs_request_info.attributes.attributes_mbz ^= "0"b then call ERROR_RETURN (error_table_$bad_subr_arg);

      if abs_request_info.version ^= ABSENTEE_REQUEST_INFO_VERSION_3
      then call ERROR_RETURN (error_table_$unimplemented_version);
      if abs_return_info.version ^= ABSENTEE_RETURN_INFO_VERSION_3
      then call ERROR_RETURN (error_table_$unimplemented_version);

      reqp = null ();				/* initialize values */
      abs_return_info.request_id = 0;
      abs_return_info.error_msg = "";
      abs_return_info.abs_pathname = "";
      on cleanup call clean_up ();

      call get_temp_segment_ (ME, reqp, code);
      if code ^= 0 then call ERROR_RETURN (code);

/**** request_header */

      unspec (request.request_header) = ""b;
      request.request_header.msg_time = clock ();
      request.request_header.hdr_version = queue_msg_hdr_version_1;

      input_dirname, input_entryname = "";
      must_search = "0"b;

      if abs_request_info.input_segment_dirname = "" then do;
	 code = error_table_$noarg;
	 call ioa_$rsnnl ("Pathname of input segment.", abs_return_info.error_msg, rs_len, "");
	 call ERROR_RETURN (code);
      end;	 

      len_path = search (reverse (abs_request_info.input_segment_dirname),
	 "<>") - 1;
      if len_path < 0 then must_search = "1"b;		/* arg is entryname only, must use search paths */
      
     call expand_pathname_$add_suffix (abs_request_info.input_segment_dirname,
	"absin", input_dirname, input_entryname, code);
     if code ^= 0 then call ERROR_RETURN (code);

     if must_search then do;
	 call search_paths_$find_dir ("exec_com", null (), input_entryname,
	      "", search_pname, code);		/* use the exec_com search list */
	 if code = 0 then input_dirname = search_pname;
	 else if code ^= error_table_$no_search_list then do;
						/* entry not found using ec search list */
		 call ioa_$rsnnl ("^a.absin using ^a search list.", abs_return_info.error_msg,
		      rs_len, abs_request_info.input_segment_dirname, "exec_com");
		 call ERROR_RETURN (code);
	 end;
      end;

      len_entry = length (rtrim (input_entryname));
      len_path = length (rtrim (input_dirname));
      if len_path + len_entry > length (request.request_header.dirname)
	 then do;					/* Full path name is now too long to remember. */
	 code = error_table_$pathlong;
	 call ioa_$rsnnl ("^a", abs_return_info.error_msg, rs_len,
	      abs_request_info.input_segment_dirname);
	 call ERROR_RETURN (code);
      end;

      call CHECK_SEG_ACCESS (input_dirname, input_entryname, ABSIN_SEG);
      abs_return_info.abs_pathname = rtrim(input_dirname) ||
	 ">" || input_entryname;
      request.request_header.dirname = input_dirname;
      request.request_header.ename = input_entryname;
      request.request_header.message_type = 0		/* absentee request */;
      request.request_header.bit_flags.notify = abs_request_info.attributes.notify;

/**** version & abs_attributes */

      request.request_version = abs_message_version_6;
      unspec (request.abs_attributes), unspec (request.abs_status_flags) = ""b;
      request.abs_attributes = abs_request_info.attributes, by name;

/**** foreground & queue */

      if abs_request_info.queue = FOREGROUND_QUEUE then do;
         request.request_header.orig_queue = 1;
         message_seg_entry = FOREGROUND_ABSENTEE_QUEUE_NAME;
      end;
      else do;
         if abs_request_info.queue = DEFAULT_QUEUE
         then call system_info_$default_absentee_queue (request.request_header.orig_queue);
         else if abs_request_info.queue = BACKGROUND_QUEUE (0) then request.request_header.orig_queue = 1;
						/* queue 0 is really the front of queue 1 */
         else if abs_request_info.queue = BACKGROUND_QUEUE (1) | abs_request_info.queue = BACKGROUND_QUEUE (2)
	    | abs_request_info.queue = BACKGROUND_QUEUE (3) | abs_request_info.queue = BACKGROUND_QUEUE (4)
         then request.request_header.orig_queue = convert (request.request_header.orig_queue, abs_request_info.queue);
         else if abs_request_info.queue ^= BACKGROUND_QUEUE (4) then call ERROR_RETURN (error_table_$bad_subr_arg);
         call suffixed_name_$make (ABSENTEE_QUEUE_PREFIX || convert (queue_picture, request.request_header.orig_queue),
	    MESSAGE_SEG_SUFFIX, message_seg_entry, code);
      end;

/**** name &  len_name */

      call user_info_$whoami (login_name, (""), (""));
      request.len_name = length (rtrim (login_name));
      request.name = substr (login_name, 1, request.len_name);

/**** output_file & len_output */

      if abs_request_info.output_segment_dirname ^= ""
      then output_dirname = abs_request_info.output_segment_dirname;
      else output_dirname = input_dirname;
      if abs_request_info.output_segment_entryname ^= ""
      then call suffixed_name_$make (abs_request_info.output_segment_entryname, "absout", output_entryname, code);
      else call suffixed_name_$new_suffix (input_entryname, "absin", "absout", output_entryname, code);
      if code ^= 0 then call ERROR_RETURN (code);
      call CHECK_SEG_ACCESS (output_dirname, output_entryname, ABSOUT_SEG);
      output_pathname = pathname_ (output_dirname, output_entryname);
      request.len_output = length (rtrim (output_pathname));
      request.output_file = substr (output_pathname, 1, request.len_output);

/**** proxy_name & len_proxy & abs_attributes.proxy */

      if abs_request_info.proxy_personid ^= "" then do;
         call ioa_$rsnnl ("^a.^a", proxy_name, request.len_proxy, abs_request_info.proxy_personid,
	    abs_request_info.proxy_projectid);
         request.abs_attributes.proxy = "1"b;
         request.proxy_name = substr (proxy_name, 1, request.len_proxy);
      end;
      else request.abs_attributes.proxy = "0"b;

/**** deferred_time & max_cpu_time & requested_authorization & attributes */

      request.deferred_time = abs_request_info.deferred_time;
      if abs_request_info.deferred_time ^= 0 then request.user_deferred_until_time = "1"b;
      if abs_request_info.max_cpu_time = 0 then do;
         call system_info_$abs_limits (default_cpu_limits, default_foreground_cpu_limit);
         if abs_request_info.queue = FOREGROUND_QUEUE
         then request.max_cpu_time = default_foreground_cpu_limit;
         else request.max_cpu_time = default_cpu_limits (request.request_header.orig_queue);
      end;
      else request.max_cpu_time = abs_request_info.max_cpu_time;

      call user_info_$authorization_range (authrng);	/* get user's low and high auth levels */
      if aim_check_$in_range (abs_request_info.requested_authorization, authrng) then
	 request.requested_authorization = abs_request_info.requested_authorization;
						/* auth level ok */
      else do;
	 code = error_table_$ai_out_range;		/* not ok */
	 call ERROR_RETURN (code);
      end;
      request.restartable = abs_request_info.restartable;
      request.user_deferred_indefinitely = abs_request_info.user_deferred_indefinitely;
      request.secondary_ok = abs_request_info.secondary_ok;
      request.truncate_absout = abs_request_info.truncate_absout;

/**** resource & sender & comment & home_dir & init_proc & len_= */

      request.len_resource = abs_request_info.resource_length;
      request.len_sender = length (rtrim (abs_request_info.sender));
      request.len_comment = abs_request_info.comment_length;
      if length (rtrim( abs_request_info.home_dir)) > 0 then do;
						/* home dir was specified */
	 call get_attributes ("vhomedir", aok);		/* check if user has this attribute */
	 if aok then request.len_homedir = length (rtrim (abs_request_info.home_dir));
						/* has attribute */
	 else do;
	      code = as_error_table_$illegal_hd_arg;	/* does not have attribute */
	      call ERROR_RETURN (code);
	 end;
	 request.home_dir = 
	      substr (abs_request_info.home_dir, 1, request.len_homedir);
						/* fill in specified home dir */
      end;
      if length (rtrim(abs_request_info.init_proc)) > 0 then do;
						/* initial process overseer specified */
	 call get_attributes ("vinitproc", aok);	/* check if user has this attribute */
	 if aok then request.len_initproc = length (rtrim (abs_request_info.init_proc));
						/* has attribute */
	 else do;
	      code = as_error_table_$illegal_ip_arg;	/* does not have attribute */
	      call ERROR_RETURN (code);
	 end;
	 request.init_proc = 
	      substr (abs_request_info.init_proc, 1, request.len_initproc);
						/* fill in specified initial procedure */
      end;

      if request.len_resource > 0 then do;		/* resources specified */
         call parse_resource_desc_$check ((abs_request_info.resource), null (), null (), null (), "", code);
         if code ^= 0 then call ERROR_RETURN (code);
         request.resource = abs_request_info.resource;
      end;
      if request.len_sender > 0 then request.sender = substr (abs_request_info.sender, 1, request.len_sender);
						/* sender string specified */
      if request.len_comment > 0 then request.comment = abs_request_info.comment;
						/* comment string specified */

      request.len_vpad = 0;

/**** args & arg_lengths & arg_count & len_args */

      request.arg_count = abs_request_info.arg_count;
      if request.arg_count > 0 then do;			/* fill in argument string information */
         request.len_args, next_arg_position = 0;
         do arg_idx = 1 to abs_request_info.arg_count;
	  next_arg_position = request.len_args + 1;
	  request.len_args = request.len_args + length (abs_request_info.arguments (arg_idx));
	  request.arg_lengths (arg_idx) = length (abs_request_info.arguments (arg_idx));
	  substr (request.args, next_arg_position, length (abs_request_info.arguments (arg_idx))) =
	       abs_request_info.arguments (arg_idx);
         end;
      end;

/**** initial_ring & no_start_up */

      if abs_request_info.initial_ring ^= -1 then do;	/* user specified an initial ring */
	 call user_info_$ring_range (ringrng);		/* check allowed low and high ring values */
	 if abs_request_info.initial_ring < ringrng (1) then do;
	      code = as_error_table_$ring_too_low;	/* specified lower than lowest allowed */
	      call ERROR_RETURN (code);
	 end;
	 else if abs_request_info.initial_ring > ringrng (2) then do;
	      code = as_error_table_$ring_too_high;	/* specified higher than highest allowed */
	      call ERROR_RETURN (code);
	 end;
      end;
      request.initial_ring = abs_request_info.initial_ring; /* fill in initial ring value */

      request.abs_attributes.no_start_up = abs_request_info.attributes.no_start_up;
						/* fill in no_startup parameter */

      request.request_header.std_length = currentsize (request);
						/* note the size of the request structure */

/**** end of request setup; now put request in queue */

      call message_segment_$add_file (ABSENTEE_DIRECTORY, message_seg_entry, reqp, request.request_header.std_length * 36,
	 message_id, code);
						/* queue request into the appropriate message segment */
      if code ^= 0 then call ERROR_RETURN (code);

      abs_return_info.request_id = request.msg_time;	/* fill in the return info to send back to caller */
      if abs_request_info.queue = DEFAULT_QUEUE
      then abs_return_info.queue = convert (queue_picture, request.request_header.orig_queue) || "   ";
      else abs_return_info.queue = abs_request_info.queue;
      call message_segment_$get_message_count_file (ABSENTEE_DIRECTORY, message_seg_entry,
	 abs_return_info.queue_requests_count, code);
      if code ^= 0 then call ERROR_RETURN (code);

      local_asraci.version = ASR_AC_INFO_VERSION_1;
      local_asraci.action_code = ASR_AC_LOGIN;
      local_asraci.request_id = request.msg_time;
      local_asraci.header.version = as_request_version_1;
      local_asraci.header.type = ASR_ABS_COMMAND;
      local_asraci.header.reply_channel = 0;

      call send_as_request_$no_block (addr (local_asraci), currentsize (local_asraci),
	 ""b, code);

      if code ^= 0 then call ERROR_RETURN (code);

      call clean_up ();

EAR_RETURN:
      return;
%page;
CHECK_SEG_ACCESS:
   proc (cs_dir, cs_en, cs_seg_type);

/* Absin segment must exist and give r access to the absentee user.
   Absout must either exist and give him w, or not exist and parent must give him a. */

dcl     cs_dir			char (168) parameter;
dcl     cs_en			char (32) parameter;
dcl     cs_seg_type			bit (1) aligned parameter;

dcl     (cs_ring)			fixed bin;
dcl     cs_code			fixed bin (35);
dcl     cs_type			char (32);
dcl     cs_mode			bit (36) aligned;
dcl     x_mode			bit (36) aligned;

/* Get type and bitcount of segment (chase links). This verifies that it exists, too. */

      call cu_$level_get (cs_ring);
      call fs_util_$get_type (cs_dir, cs_en, cs_type, cs_code);

/* We are checking as a favor to the user.  If we can't know, go away quietly. */
      if cs_code ^= 0
      then if cs_code ^= error_table_$no_s_permission then do;
	    if cs_code = error_table_$noentry & cs_seg_type = ABSOUT_SEG then do;
						/* absout does not exist */
	       call fs_util_$get_user_access_modes (cs_dir, "", get_group_id_$tag_star (),
		  cs_ring, cs_mode, x_mode, cs_code);
						/* need access to create absout */
	       if cs_code ^= 0 then do;
		  call ioa_$rsnnl ("Warning: Cannot check access on directory containing entry. Job may not run successfully.",
		       abs_return_info.error_msg, rs_len);
		  call ERROR_RETURN (cs_code);
	       end;
	       if ^(cs_mode = A_ACCESS | cs_mode = SA_ACCESS | cs_mode = SMA_ACCESS)
	       then call ERROR_RETURN (error_table_$no_append);
	    end;

/* abort if:
   - any error (except no_s_permission) on absin seg,
   - any error (except no_s_permission or noentry) on absout seg,
   - any error (except no_s_permission) on absout dir. */

	    else do;
	         call ioa_$rsnnl ("^a", abs_return_info.error_msg, rs_len, 
		    pathname_ (cs_dir, cs_en));
	         call ERROR_RETURN (cs_code);
	    end;
	 end;
	 else do;
	      call ioa_$rsnnl ("^a^[>^]^a", abs_return_info.error_msg, rs_len,
		 cs_dir, (cs_dir ^= ">"),
		 cs_en);
	      call ERROR_RETURN (cs_code);
	 end;

/**** must be a segment, link or MSF */
      else do;
	 if cs_type = FS_OBJECT_TYPE_SEGMENT | cs_type = FS_OBJECT_TYPE_MSF
	      | cs_type = FS_OBJECT_TYPE_LINK
	      then do;
/* Status call on segment ok. Now check access to it. */
	      call fs_util_$get_user_access_modes (cs_dir, cs_en, get_group_id_$tag_star (),
		 cs_ring, cs_mode, x_mode, cs_code);
	      if cs_code ^= 0 then do;
		 call ioa_$rsnnl ("Warning: Cannot check access on ^a. Job may not run successfully.",
		       abs_return_info.error_msg, rs_len, pathname_ (cs_dir, cs_en));
		  call ERROR_RETURN (cs_code);
	       end;
	       if (cs_seg_type = ABSIN_SEG
		  & ^(cs_mode = R_ACCESS | cs_mode = RE_ACCESS | cs_mode = RW_ACCESS | cs_mode = REW_ACCESS))
		  | (cs_seg_type = ABSOUT_SEG
		  & ^(cs_mode = W_ACCESS | cs_mode = RW_ACCESS | cs_mode = REW_ACCESS))
		  then do;
		  call ioa_$rsnnl ("^a", abs_return_info.error_msg, rs_len,
		       pathname_ (cs_dir, cs_en));
		  call ERROR_RETURN (error_table_$moderr);
	       end;
	  end;
	  else do;
	       call ioa_$rsnnl ("^a", abs_return_info.error_msg, rs_len,
		  pathname_ (cs_dir, cs_en));
	       call ERROR_RETURN (error_table_$not_seg_type);
	  end;
      end;

   end CHECK_SEG_ACCESS;

get_attributes:
   procedure (p_attr, p_aok);
						/* check various user attributes */
dcl  p_attr char (24) parameter;
dcl  p_aok bit (1) aligned parameter;
dcl  my_attributes char (128) varying;
   
      call user_info_$attributes (my_attributes);
      if index (my_attributes, rtrim(p_attr)) > 0 then p_aok = "1"b;
      else p_aok = "0"b;
  end get_attributes;

clean_up:
   procedure ();
      if reqp ^= null () then call release_temp_segment_ (ME, reqp, ignore_code);
      return;
   end clean_up;
%skip (2);
ERROR_RETURN:
   proc (er_code);

declare er_code			fixed bin (35);

      call clean_up ();
      p_code = er_code;
      goto EAR_RETURN;
   end ERROR_RETURN;
%page;
%include abs_message_format;
%page;
%include abs_request_dcls;
%page;
%include access_mode_values;
%page;
%include as_request_header;
%page;
%include asr_abs_command;
%page;
%include copy_flags;
%page;
%include status_structures;
%page;
%include queue_msg_hdr;
%page;
%include suffix_info;
%page;
%include user_abs_attributes;

   end enter_abs_request_;
