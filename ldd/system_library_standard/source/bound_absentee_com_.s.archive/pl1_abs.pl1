/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(88-09-20,TLNguyen), approve(88-09-20,MCR7984),
     audit(88-10-03,Parisek), install(88-10-06,MR12.2-1133):
     Make the fortran_abs command accept the -card fortran compiler control
     argument.
                                                   END HISTORY COMMENTS */


/* This program sets up absentee jobs to do pl1, fortran, cobol, alm, algol68, and pascal compilations.

   Initially coded in Nov 1971 by Dennis Capps
   Modified April 5, 1972 by Dennis Capps
   Modified for use with Version II PL/I Sept 25, 1972 by Robert S. Coren
   Modified 6/20/74 by Steve Herbst to accept all dprint and compiler options
   Modified 9/20/76 by R.J.C. Kissel to accept the -profile control argument
   Modified 761227 by PG to remove v1pl1_abs, v2pl1_abs, and switch to expand_pathname_
   Modified  7/12/78 by James R. Davis to add cobol
   Modified 8/10/78 by Paul E. Smee to update options for fortran and pl1.
   Modified 9/27/78 By JRD for level and no source and extend, (COBOL)
   Modified 12/27/78 by Paul E. Smee to update fortran options for FORTRAN 5.
   Modified 10/10/79 by Paul E. Smee to update options for MR8.0.
   Modified 4 April 1980 by M. N. Davidoff to for pl1 -source, -symbols and to make -brief_table work.
   Modified 23 September 1980 by G. Palter to allow absentee queue 4, add new Fortran control arguments, add "-ind" for
      "-indent", use the site-settable default absentee queue as the default queue, and use the highest numbered dprint
      queue when there is no dprint queue corresponding to the absentee queue.
   Modified 14 October 1980 by G. Palter to add negative control arguments for PL/I and "-no_table" for PL/I, Fortran, and
      COBOL.
   Modified 20 May 1981 by EBush to add "-nsb" and "-target" to ALM.
   Modified 2 Feb 1982 by Richard Wendland (SWURCC, Bath University, England) to handle Algol 68.
   Modified 5 Dec 1983 by C Spitzer. add MR10.2 fortran control arguments.
   Modified 18 Oct 1983 by S. Herbst to add pascal_abs (psa)
*/

/* format: style3,ll122 */

pl1_abs:
pa:
     procedure options (variable);

/* automatic */

dcl	abs_args_list_len	fixed bin (21);
dcl	abs_args_list_ptr	pointer;
dcl	abs_args_list_space char (256) varying;
dcl	absentee_queue	char (1);
dcl	absentee_queue_n	fixed bin;		/* default absentee queue */
dcl	alm_arguments_collection
			bit (1) aligned;		/* collecting arguments to the assembly */
dcl	areap		ptr;
dcl	argcount		fixed bin;
dcl	arglen		fixed bin (21);
dcl	argno		fixed bin;
dcl	argp		ptr;
dcl	argu_auto		char (24);
dcl	checkdir		char (168);
dcl	checkent		char (32);
dcl	code		fixed bin (35);
dcl	curarg		char (32);
dcl	default_absentee_queue
			bit (1) aligned;
dcl	dp_args_list_len	fixed bin (21);
dcl	dp_args_list_ptr	pointer;
dcl	dp_args_list_space	char (256) varying;
dcl	dprint_queue	char (1);
dcl	error_sw		bit (1) aligned;
dcl	first_entryname	char (32);
dcl	function		char (7);
dcl	function_abs	char (32);
dcl	hold		char (6) varying;
dcl	i		fixed bin;
dcl	1 lang,					/* must init here because of multiple entries */
	  2 algol68	bit (1) initial ("0"b),
	  2 alm		bit (1) initial ("0"b),
	  2 cobol		bit (1) initial ("0"b),
	  2 fortran	bit (1) initial ("0"b),
	  2 pl1		bit (1) initial ("0"b),
	  2 pascal	bit (1) initial ("0"b);
dcl	limit_no		pic "(9)z9";
dcl	limit_sw		bit (1) aligned;
dcl	no_of_copies_str	char (1);
dcl	out_file		char (168);
dcl	outsw		bit (1) aligned;
dcl	request_type	char (32);
dcl	1 saw,
	  2 optimize	bit (1),
	  2 safe_ot	bit (1),
	  2 full_ot	bit (1),
	  2 subscriptrange	bit (1),
	  2 stringrange	bit (1),
	  2 card		bit (1),
	  2 ln		bit (1),
	  2 ansi66	bit (1),
	  2 ansi77	bit (1),
	  2 quote		bit (1),
	  2 point		bit (1);
dcl	segname_list_len	fixed bin (21);
dcl	segname_list_ptr	pointer;
dcl	segname_list_space	char (256) varying;
dcl	temp		fixed bin (35);

/* based */

dcl	abs_args_list	char (abs_args_list_len) varying based (abs_args_list_ptr);
dcl	argu		char (arglen) based (argp);
dcl	digit_pic		pic "9" based;
dcl	dp_args_list	char (dp_args_list_len) varying based (dp_args_list_ptr);
dcl	segname_list	char (segname_list_len) varying based (segname_list_ptr);
dcl	system_area	area based (areap);

/* builtin */

dcl	(addr, binary, codeptr, convert, hbound, index, lbound, length,
	 ltrim, max, maxlength, rtrim, string)
			builtin;

/* condition */

dcl	cleanup		condition;

/* internal static */

dcl	SP		char (1) internal static options (constant) initial (" ");
dcl	opt_table		(29) char (12) internal static options (constant)
			initial ("-list", "-ls", "-map", "-brief", "-bf", "-check", "-ck", "-table", "-tb",
			"-brief_table", "-bftb", "-time", "-tm", "-debug", "-db", "-optimize", "-ot", "-profile",
			"-pf", "-severity1", "-severity2", "-severity3", "-severity4", "-sv1", "-sv2", "-sv3",
			"-sv4", "-no_table", "-ntb");

/* external static */

dcl	error_table_$noarg  fixed bin (35) external static;
dcl	error_table_$badopt fixed bin (35) external static;
dcl	error_table_$inconsistent
			fixed bin (35) external static;

/* entry */

dcl	absolute_pathname_	entry (char (*), char (*), fixed bin (35));
dcl	com_err_		entry options (variable);
dcl	com_err_$suppress_name
			entry options (variable);
dcl	cu_$arg_count	entry (fixed bin, fixed bin (35));
dcl	cu_$arg_ptr	entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl	cv_dec_check_	entry (char (*), fixed bin (35)) returns (fixed bin (35));
dcl	cv_oct_check_	entry (char (*), fixed bin (35)) returns (fixed bin (35));
dcl	enter_abs_request	entry options (variable);
dcl	expand_pathname_$add_suffix
			entry (char (*), char (*), char (*), char (*), fixed bin (35));
dcl	get_system_free_area_
			entry returns (ptr);
dcl	get_wdir_		entry returns (char (168) aligned);
dcl	hcs_$fs_get_path_name
			entry (ptr, char (*), fixed bin, char (*), fixed bin (35));
dcl	hcs_$status_minf	entry (char (*), char (*), fixed bin (1), fixed bin (2), fixed bin (24), fixed bin (35));
dcl	ioa_		entry options (variable);
dcl	iod_info_$generic_type
			entry (char (*), char (32), fixed bin (35));
dcl	iod_info_$queue_data
			entry (char (*), fixed bin, fixed bin, fixed bin (35));
dcl	requote_string_	entry (char (*)) returns (char (*));
dcl	suffixed_name_$new_suffix
			entry (char (*), char (*), char (*), char (32), fixed bin (35));
dcl	system_info_$default_absentee_queue
			entry (fixed bin);
dcl	system_type_	entry (char (*), char (*), fixed bin (17), fixed bin (35));

/* format: inddcls */
%page;
/* program */

	lang.pl1 = "1"b;
	function = "pl1";
	function_abs = "pl1_abs";
	goto START;

alm_abs:
aa:
     entry options (variable);

	lang.alm = "1"b;
	function = "alm";
	function_abs = "alm_abs";
	goto START;

fortran_abs:
fa:
     entry options (variable);

	lang.fortran = "1"b;
	function = "fortran";
	function_abs = "fortran_abs";
	goto START;

cobol_abs:
cba:
     entry options (variable);

	lang.cobol = "1"b;
	function = "cobol";
	function_abs = "cobol_abs";
	goto START;

algol68_abs:
a68a:
     entry options (variable);

	lang.algol68 = "1"b;
	function = "algol68";
	function_abs = "algol68_abs";
	goto START;

pascal_abs:
psa:
     entry options (variable);

	lang.pascal = "1"b;
	function = "pascal";
	function_abs = "pascal_abs";
	goto START;

START:
	areap = get_system_free_area_ ();

	abs_args_list_space = "";
	abs_args_list_ptr = addr (abs_args_list_space);
	abs_args_list_len = maxlength (abs_args_list_space);

	alm_arguments_collection = "0"b;
	default_absentee_queue = "1"b;

	dp_args_list_space = "";
	dp_args_list_ptr = addr (dp_args_list_space);
	dp_args_list_len = maxlength (dp_args_list_space);

	error_sw = "0"b;
	hold = "dprint";				/* dprint listing when done */
	limit_sw = "0"b;				/* no absentee timer limit */
	no_of_copies_str = "1";
	outsw = "0"b;				/* -output_file not used */
	request_type = "printer";

	segname_list_space = "";
	segname_list_ptr = addr (segname_list_space);
	segname_list_len = maxlength (segname_list_space);

	call system_info_$default_absentee_queue (absentee_queue_n);
	if absentee_queue_n = 0
	then absentee_queue_n = 3;			/* default default absentee queue */
	absentee_queue = convert (digit_pic, absentee_queue_n);
	dprint_queue = absentee_queue;

	call cu_$arg_count (argcount, code);
	if code ^= 0
	then do;
		call com_err_ (code, function_abs);
		return;
	     end;

	if argcount = 0
	then do;
		call com_err_$suppress_name (0, function_abs, "Usage: ^a paths {^a_args} {dp_args} {-control_args}",
		     function_abs, function);
		return;
	     end;

	on cleanup call cleaner_up ();


/* Start looking at arguments */

	string (saw) = ""b;

	do argno = 1 to argcount;			/* Loop ends at ENDLOOP */
	     call cu_$arg_ptr (argno, argp, arglen, code);
	     if code ^= 0
	     then do;
		     call com_err_ (code, function_abs, "Argument ^d.", argno);
		     goto REQUEST_NOT_SUBMITTED;
		end;

	     curarg = argu;

	     if alm_arguments_collection
	     then do;				/* add this argument without interpretation */
		     call add_requoted (argu, abs_args_list_ptr, abs_args_list_len, addr (abs_args_list_space));
		     goto ENDLOOP;
		end;

	     else if index (argu, "-") ^= 1
	     then begin;
		     dcl	     bitcnt	     fixed bin (24);
		     dcl	     type		     fixed bin (2);

		     call expand_pathname_$add_suffix (argu, function, checkdir, checkent, code);
		     if code ^= 0
		     then do;
			     call com_err_ (code, function_abs, "^a", argu);
			     goto REQUEST_NOT_SUBMITTED;
			end;

		     call hcs_$status_minf (checkdir, checkent, 1, type, bitcnt, code);
		     if code ^= 0
		     then do;
			     call com_err_ (code, function_abs, "^a>^a", checkdir, checkent);
			     error_sw = "1"b;
			end;

		     if segname_list = ""
		     then first_entryname = checkent;

		     call add_requoted (argu, segname_list_ptr, segname_list_len, addr (segname_list_space));
		     goto ENDLOOP;
		end;

/* Check for absentee control arguments */

	     else if argu = "-hold" | argu = "-hd"
	     then do;
		     hold = "hold";
		     goto ENDLOOP;
		end;

	     else if argu = "-limit" | argu = "-li"
	     then do;
		     limit_sw = "1"b;
		     argno = argno + 1;
		     call cu_$arg_ptr (argno, argp, arglen, code);
		     if code ^= 0
		     then goto TOO_FEW_ARGS;

		     temp = cv_dec_check_ (argu, code);
		     if code ^= 0 | temp <= 0
		     then do;
			     call com_err_ (0, function_abs, "Invalid limit. ^a", argu);
			     goto REQUEST_NOT_SUBMITTED;
			end;

		     limit_no = temp;
		     goto ENDLOOP;
		end;

	     else if argu = "-queue" | argu = "-q"
	     then do;
		     argno = argno + 1;
		     call cu_$arg_ptr (argno, argp, arglen, code);
		     if code ^= 0
		     then goto TOO_FEW_ARGS;

		     temp = cv_dec_check_ (argu, code);
		     if code = 0 & 1 <= temp & temp <= 4
		     then absentee_queue = convert (digit_pic, temp);
		     else do;
			     call com_err_ (0, function_abs, "Invalid queue number. ^a", argu);
			     goto REQUEST_NOT_SUBMITTED;
			end;

		     default_absentee_queue = "0"b;
		     dprint_queue = absentee_queue;
		     goto ENDLOOP;
		end;

	     else if argu = "-output_file" | argu = "-of"
	     then do;
		     argno = argno + 1;
		     call cu_$arg_ptr (argno, argp, arglen, code);
		     if code ^= 0
		     then goto TOO_FEW_ARGS;

		     call absolute_pathname_ (argu, out_file, code);
		     if code ^= 0
		     then do;
			     call com_err_ (code, function_abs, "^a", argu);
			     goto REQUEST_NOT_SUBMITTED;
			end;

		     outsw = "1"b;
		     goto ENDLOOP;
		end;

/* Is this a dprint option? */

	     else if argu = "-notify" | argu = "-nt" | argu = "-single" | argu = "-sg" | argu = "-no_endpage"
		     | argu = "-nep" | argu = "-non_edited" | argu = "-ned" | argu = "-access_label"
		     | argu = "-albl" | argu = "-truncate" | argu = "-tc" | argu = "-no_label" | argu = "-nlbl"
	     then do;
		     call add (argu, dp_args_list_ptr, dp_args_list_len, addr (dp_args_list_space));
		     goto ENDLOOP;
		end;

	     else if argu = "-destination" | argu = "-ds" | argu = "-header" | argu = "-he" | argu = "-label"
		     | argu = "-lbl" | argu = "-top_label" | argu = "-tlbl" | argu = "-bottom_label" | argu = "-blbl"
	     then do;
		     call add (argu, dp_args_list_ptr, dp_args_list_len, addr (dp_args_list_space));
		     argno = argno + 1;
		     call cu_$arg_ptr (argno, argp, arglen, code);
		     if code ^= 0
		     then goto TOO_FEW_ARGS;

		     call add_requoted (argu, dp_args_list_ptr, dp_args_list_len, addr (dp_args_list_space));
		     goto ENDLOOP;
		end;

	     else if argu = "-request_type" | argu = "-rqt"
	     then begin;
		     dcl	     gen_type	     char (32);

		     call add (argu, dp_args_list_ptr, dp_args_list_len, addr (dp_args_list_space));
		     argno = argno + 1;
		     call cu_$arg_ptr (argno, argp, arglen, code);
		     if code ^= 0
		     then goto TOO_FEW_ARGS;

		     call iod_info_$generic_type (argu, gen_type, code);
		     if code ^= 0
		     then do;
			     call com_err_ (code, function_abs, "Request type ^a.", argu);
			     goto REQUEST_NOT_SUBMITTED;
			end;

		     if gen_type ^= "printer"
		     then do;
			     call com_err_ (0, function_abs, "Request type ^a is not for the printer.", argu);
			     goto REQUEST_NOT_SUBMITTED;
			end;

		     request_type = argu;
		     call add (argu, dp_args_list_ptr, dp_args_list_len, addr (dp_args_list_space));
		     goto ENDLOOP;
		end;

	     else if argu = "-line_length" | argu = "-ll"
	     then do;
		     call add (argu, dp_args_list_ptr, dp_args_list_len, addr (dp_args_list_space));
		     argno = argno + 1;
		     call cu_$arg_ptr (argno, argp, arglen, code);
		     if code ^= 0
		     then goto TOO_FEW_ARGS;

		     temp = cv_dec_check_ (argu, code);
		     if code ^= 0 | temp < 2 | temp > 136
		     then do;
			     call com_err_ (0, function_abs, "Invalid line length. ^a", argu);
			     goto REQUEST_NOT_SUBMITTED;
			end;

		     call add (argu, dp_args_list_ptr, dp_args_list_len, addr (dp_args_list_space));
		     goto ENDLOOP;
		end;

	     else if argu = "-page_length" | argu = "-pl"
	     then do;
		     call add (argu, dp_args_list_ptr, dp_args_list_len, addr (dp_args_list_space));
		     argno = argno + 1;
		     call cu_$arg_ptr (argno, argp, arglen, code);
		     if code ^= 0
		     then goto TOO_FEW_ARGS;

		     temp = cv_dec_check_ (argu, code);
		     if code ^= 0 | temp < 2 | temp > 66
		     then do;
			     call com_err_ (0, function_abs, "Invalid page length. ^a", argu);
			     goto REQUEST_NOT_SUBMITTED;
			end;

		     call add (argu, dp_args_list_ptr, dp_args_list_len, addr (dp_args_list_space));
		     goto ENDLOOP;
		end;

	     else if argu = "-indent" | argu = "-ind" | argu = "-in"
	     then do;
		     call add (argu, dp_args_list_ptr, dp_args_list_len, addr (dp_args_list_space));
		     argno = argno + 1;
		     call cu_$arg_ptr (argno, argp, arglen, code);
		     if code ^= 0
		     then goto TOO_FEW_ARGS;

		     temp = cv_dec_check_ (argu, code);
		     if code ^= 0 | temp < 1 | temp > 136
		     then do;
			     call com_err_ (0, function_abs, "Invalid indentation. ^a", argu);
			     goto REQUEST_NOT_SUBMITTED;
			end;

		     call add (argu, dp_args_list_ptr, dp_args_list_len, addr (dp_args_list_space));
		     goto ENDLOOP;
		end;

	     else if argu = "-copy" | argu = "-cp"
	     then do;
		     argno = argno + 1;
		     call cu_$arg_ptr (argno, argp, arglen, code);
		     if code ^= 0
		     then goto TOO_FEW_ARGS;

		     temp = cv_dec_check_ (argu, code);
		     if code = 0 & 1 <= temp & temp <= 4
		     then no_of_copies_str = convert (digit_pic, temp);
		     else do;
			     call ioa_ (0, function_abs, "Invalid number of copies. ^a", argu);
			     goto REQUEST_NOT_SUBMITTED;
			end;

		     goto ENDLOOP;
		end;

/* Check for compiler control arguments */

	     else if lang.pl1
	     then if argu = "-check_ansi" | argu = "-separate_static" | argu = "-ss" | argu = "-source" | argu = "-sc"
		     | argu = "-symbols" | argu = "-sb" | argu = "-single_symbol_list" | argu = "-ssl"
		     | argu = "-long_profile" | argu = "-lpf" | argu = "-long" | argu = "-lg" | argu = "-no_check"
		     | argu = "-nck" | argu = "-no_check_ansi" | argu = "-no_list" | argu = "-nls"
		     | argu = "-no_optimize" | argu = "-not" | argu = "-no_profile" | argu = "-npf"
		     | argu = "-no_separate_static" | argu = "-nss" | argu = "-no_debug" | argu = "-ndb"
		     | argu = "-no_time" | argu = "-ntm"
		then goto FOUND_IT;
		else if argu = "-prefix"
		then do;
			call add (argu, abs_args_list_ptr, abs_args_list_len, addr (abs_args_list_space));
			argno = argno + 1;
			call cu_$arg_ptr (argno, argp, arglen, code);
			if code ^= 0
			then goto TOO_FEW_ARGS;

			call add_requoted (argu, abs_args_list_ptr, abs_args_list_len, addr (abs_args_list_space));
			goto ENDLOOP;
		     end;
		else ;

	     else if lang.fortran
	     then if argu = "-fold" | argu = "-round" | argu = "-truncate" | argu = "-relocatable" | argu = "-rlc"
		     | argu = "-time_ot" | argu = "-non_relocatable" | argu = "-nrlc" | argu = "-auto"
		     | argu = "-auto_zero" | argu = "-check_multiply" | argu = "-ckmpy" | argu = "-default_full"
		     | argu = "-dff" | argu = "-default_safe" | argu = "-dfs" | argu = "-free"
		     | argu = "-large_array" | argu = "-la" | argu = "-long" | argu = "-lg" | argu = "-long_profile"
		     | argu = "-lpf" | argu = "-no_auto_zero" | argu = "-no_check" | argu = "-nck"
		     | argu = "-no_check_multiply" | argu = "-nckmpy" | argu = "-no_fold" | argu = "-no_large_array"
		     | argu = "-nla" | argu = "-no_map" | argu = "-no_version" | argu = "-no_very_large_array"
		     | argu = "-nvla" | argu = "-no_vla_parm" | argu = "-static" | argu = "-version"
		     | argu = "-very_large_array" | argu = "-vla" | argu = "-vla_parm" | argu = "-top_down"
		then goto FOUND_IT;
		else if argu = "-ansi66"
		then do;
			saw.ansi66 = "1"b;
			goto FOUND_IT;
		     end;
		else if argu = "-ansi77"
		then do;
			saw.ansi77 = "1"b;
			goto FOUND_IT;
		     end;
		else if argu = "-card"
		then do;
			saw.card = "1"b;
			goto FOUND_IT;
		     end;
		else if argu = "-line_numbers" | argu = "-ln"
		then do;
			saw.ln = "1"b;
			goto FOUND_IT;
		     end;
		else if argu = "-no_line_numbers" | argu = "-nln"
		then do;
			saw.ln = "0"b;
			goto FOUND_IT;
		     end;
		else if argu = "-optimize" | argu = "-ot"
		then do;
			saw.optimize = "1"b;
			goto FOUND_IT;
		     end;
		else if argu = "-safe_optimize" | argu = "-safe_ot"
		then do;
			saw.safe_ot = "1"b;
			goto FOUND_IT;
		     end;
		else if argu = "-full_optimize" | argu = "-full_ot"
		then do;
			saw.full_ot = "1"b;
			goto FOUND_IT;
		     end;
		else if argu = "-no_optimize" | argu = "-not"
		then do;
			saw.optimize, saw.safe_ot, saw.full_ot = "0"b;
			goto FOUND_IT;
		     end;
		else if argu = "-subscriptrange" | argu = "-subrg"
		then do;
			saw.subscriptrange = "1"b;
			goto FOUND_IT;
		     end;
		else if argu = "-no_subscriptrange" | argu = "-nsubrg"
		then do;
			saw.subscriptrange = "0"b;
			goto FOUND_IT;
		     end;
		else if argu = "-stringrange" | argu = "-strg"
		then do;
			saw.stringrange = "1"b;
			goto FOUND_IT;
		     end;
		else if argu = "-no_stringrange" | argu = "-nstrg"
		then do;
			saw.stringrange = "0"b;
			goto FOUND_IT;
		     end;
		else ;

	     else if lang.alm
	     then if argu = "-list" | argu = "-ls" | argu = "-no_symbols" | argu = "-nsb" | argu = "-brief"
		     | argu = "-bf"
		then goto FOUND_IT;
		else if argu = "-target" | argu = "-tgt"
		then do;
			call add (argu, abs_args_list_ptr, abs_args_list_len, addr (abs_args_list_space));
			argno = argno + 1;
			call cu_$arg_ptr (argno, argp, arglen, code);
			if code ^= 0
			then goto TOO_FEW_ARGS;

			argu_auto = argu;
			call system_type_ (argu_auto, (""), (0), code);
			if code ^= 0
			then do;
				call com_err_ (code, function_abs, argu);
				goto REQUEST_NOT_SUBMITTED;
			     end;
			else do;
				call add (argu, abs_args_list_ptr, abs_args_list_len, addr (abs_args_list_space));
				goto ENDLOOP;
			     end;
		     end;
		else if argu = "-arguments" | argu = "-ag"
		then do;
			alm_arguments_collection = "1"b;
			goto FOUND_IT;
		     end;
		else goto UNREC_OPT;

	     else if lang.cobol
	     then if argu = "-format" | argu = "-fmt" | argu = "-runtime_check" | argu = "-rck" | argu = "-level1"
		     | argu = "-lev1" | argu = "-level2" | argu = "-lev2" | argu = "-level3" | argu = "-lev3"
		     | argu = "-level4" | argu = "-lev4" | argu = "-level5" | argu = "-lev5" | argu = "-expand"
		     | argu = "-exp"
		then goto FOUND_IT;
		else if argu = "-brief_table" | argu = "-bftb" | argu = "-optimize" | argu = "-ot"
		then goto UNREC_OPT;		/* cobol lacks these */
		else if argu = "-temp_dir" | argu = "-td"
		then do;
			call add (argu, abs_args_list_ptr, abs_args_list_len, addr (abs_args_list_space));
			argno = argno + 1;
			call cu_$arg_ptr (argno, argp, arglen, code);
			if code ^= 0
			then goto TOO_FEW_ARGS;

			call absolute_pathname_ (argu, "", code);
			if code ^= 0
			then do;
				call com_err_ (code, function_abs, "^a", argu);
				goto REQUEST_NOT_SUBMITTED;
			     end;

			call add_requoted (argu, abs_args_list_ptr, abs_args_list_len, addr (abs_args_list_space));
			goto ENDLOOP;
		     end;
		     else;

		else if lang.algol68
		then if argu = "-severity0" | argu = "-sv0" | argu = "no_out_check" | argu = "-nock"
			| argu = "-source" | argu = "-sc" | argu = "-no_list" | argu = "-nls" | argu = "no_check"
			| argu = "-nck"
		     then goto FOUND_IT;
		     else if argu = "-brief" | argu = "-bf" | argu = "-optimize" | argu = "-ot" | argu = "-time"
			     | argu = "-tm" | argu = "-profile" | argu = "-pf"
		     then goto UNREC_OPT;
		     else if argu = "-card"
		     then do;
			     saw.card = "1"b;
			     goto FOUND_IT;
			end;
		     else if argu = "-quote"
		     then do;
			     saw.quote = "1"b;
			     goto FOUND_IT;
			end;
		     else if argu = "-point"
		     then do;
			     saw.point = "1"b;
			     goto FOUND_IT;
			end;
		     else if argu = "-debug" | argu = "-db"
		     then do;
			     call add (argu, abs_args_list_ptr, abs_args_list_len, addr (abs_args_list_space));
			     argno = argno + 1;
			     call cu_$arg_ptr (argno, argp, arglen, code);
			     if code ^= 0
			     then goto TOO_FEW_ARGS;

			     temp = cv_oct_check_ (argu, code);
			     if code ^= 0
			     then do;
				     call com_err_ (0, function_abs,
					"Invalid octal number ^a supplied for -debug.", argu);
				     goto REQUEST_NOT_SUBMITTED;
				end;

			     goto FOUND_IT;
			end;
			else;

		else if lang.pascal
		then if argu = "-add_exportable_names" | argu = "-aen" | argu = "-brief_map" | argu = "-bfm"
			| argu = "-conditional_execution" | argu = "-cond" | argu = "-english"
			| argu = "-error_messages" | argu = "-em" | argu = "-french"
			| argu = "-full_extensions" | argu = "-full" | argu = "-interactive" | argu = "-int"
			| argu = "-io_warnings" | argu = "-iow" | argu = "-long_profile" | argu = "-lpf"
			| argu = "-no_debug" | argu = "-ndb" | argu = "-no_error_messages" | argu = "-nem"
			| argu = "-no_interactive" | argu = "-nint" | argu = "-no_io_warnings" | argu = "-niow"
			| argu = "-no_list" | argu = "-no_long_profile" | argu = "-nlpf"
			| argu = "-no_private_storage" | argu = "-nps" | argu = "-no_profile" | argu = "-npf"
			| argu = "-no_relocatable" | argu = "-nonrelocatable" | argu = "-nrlc"
			| argu = "-no_standard" | argu = "-nonstandard" | argu = "-ns"
			| argu = "-private_storage" | argu = "-ps" | argu = "-relocatable" | argu = "-rlc"
			| argu = "-sol_extensions" | argu = "-sol" | argu = "-standard"
		     then goto FOUND_IT;
		     else;


	     do i = lbound (opt_table, 1) to hbound (opt_table, 1) while (argu ^= opt_table (i));
	     end;

	     if i > hbound (opt_table, 1)
	     then goto UNREC_OPT;

FOUND_IT:
	     call add (argu, abs_args_list_ptr, abs_args_list_len, addr (abs_args_list_space));

ENDLOOP:
	end;

	if saw.optimize & saw.safe_ot
	then do;
		call com_err_ (error_table_$inconsistent, function_abs, "-optimize and -safe_optimize");
		error_sw = "1"b;			/* keep issuing messages */
	     end;

	if saw.optimize & saw.full_ot
	then do;
		call com_err_ (error_table_$inconsistent, function_abs, "-optimize and -full_optimize");
		error_sw = "1"b;
	     end;

	if saw.full_ot & saw.safe_ot
	then do;
		call com_err_ (error_table_$inconsistent, function_abs, "-full_ot and -safe_ot");
		error_sw = "1"b;
	     end;

	if saw.full_ot & saw.subscriptrange
	then do;
		call com_err_ (error_table_$inconsistent, function_abs, "-full_ot and -subscriptrange");
		error_sw = "1"b;
	     end;

	if (saw.optimize & saw.subscriptrange) | (saw.safe_ot & saw.subscriptrange)
	then do;
		call com_err_ (error_table_$inconsistent, function_abs,
		     "^[-optimize^;-safe_optimize^] and -subscriptrange", saw.optimize);
		error_sw = "1"b;
	     end;

	if (saw.optimize & saw.stringrange) | (saw.safe_ot & saw.stringrange)
	then do;
		call com_err_ (error_table_$inconsistent, function_abs,
		     "^[-optimize^;-safe_optimize^] and -stringrange", saw.optimize);
		error_sw = "1"b;
	     end;

	if saw.ansi66 & saw.ansi77
	then do;
		call com_err_ (error_table_$inconsistent, function_abs, "-ansi66 and -ansi77");
		error_sw = "1"b;
	     end;

	if saw.card & saw.ln
	then do;
		call com_err_ (error_table_$inconsistent, function_abs, "-card and -line_numbers");
		error_sw = "1"b;
	     end;

	if saw.quote & saw.point
	then do;
		call com_err_ (error_table_$inconsistent, function_abs, "Only one form of stropping allowed.");
		error_sw = "1"b;
	     end;

	if saw.card & ^(saw.quote | saw.point) & lang.algol68
	then do;
		call com_err_ (error_table_$noarg, function_abs, "-card cannot be used without stropping.");
		error_sw = "1"b;
	     end;

	if error_sw
	then goto REQUEST_NOT_SUBMITTED;

	if segname_list = ""
	then do;
		call com_err_ (0, function_abs, "No segments to compile.");
		goto REQUEST_NOT_SUBMITTED;
	     end;

	if ^outsw
	then do;
		call suffixed_name_$new_suffix (first_entryname, function, "absout", checkent, code);
		if code ^= 0
		then do;
			call com_err_ (code, function_abs, "^a with absout suffix.", first_entryname);
			goto REQUEST_NOT_SUBMITTED;
		     end;

		out_file = checkent;
	     end;

	begin;
	     dcl	     default_queue	     fixed bin;
	     dcl	     max_queue	     fixed bin;

	     call iod_info_$queue_data (request_type, default_queue, max_queue, code);
	     if code ^= 0
	     then do;
		     call com_err_ (code, function_abs, "Request type ^a.", request_type);
		     goto REQUEST_NOT_SUBMITTED;
		end;

	     if default_absentee_queue		/* user didn't specify queue: use default without warnings */
	     then dprint_queue = convert (digit_pic, default_queue);

	     if binary (dprint_queue, 17) < 1 | max_queue < binary (dprint_queue, 17)
	     then do;
		     call com_err_ (0, function_abs,
			"Request type ^a does not have queue ^a. Dprint queue ^d assumed.", request_type,
			dprint_queue, max_queue);
		     dprint_queue = convert (digit_pic, max_queue);
		end;
	end;

	call hcs_$fs_get_path_name (codeptr (pl1_abs), checkdir, i, checkent, code);

	if limit_sw
	then call enter_abs_request (rtrim (checkdir) || ">translator_absin", "-queue", absentee_queue, "-restart",
		"-output_file", rtrim (out_file), "-limit", ltrim (limit_no), "-arguments", rtrim (get_wdir_ ()),
		rtrim (function), dprint_queue, (hold), no_of_copies_str, ltrim (segname_list), ltrim (abs_args_list),
		ltrim (dp_args_list));

	else call enter_abs_request (rtrim (checkdir) || ">translator_absin", "-queue", absentee_queue, "-restart",
		"-output_file", rtrim (out_file), "-arguments", rtrim (get_wdir_ ()), rtrim (function), dprint_queue,
		(hold), no_of_copies_str, ltrim (segname_list), ltrim (abs_args_list), ltrim (dp_args_list));

	call cleaner_up;

	return;


TOO_FEW_ARGS:
	call com_err_ (code, function_abs, "After ^a.", curarg);
	goto REQUEST_NOT_SUBMITTED;

UNREC_OPT:
	call com_err_ (error_table_$badopt, function_abs, "^a", argu);
	goto REQUEST_NOT_SUBMITTED;

REQUEST_NOT_SUBMITTED:
	call com_err_ (0, function_abs, "Absentee request not submitted.");
	call cleaner_up;

	return;
%page;
/* format: ^inddcls */

/* Add the argument to one of the arbitrarily lengthed output strings */

add:
     procedure (argument, output_ptr, output_len, output_space);

dcl	argument		character (*) parameter;
dcl	output_ptr	pointer parameter;
dcl	output_len	fixed binary (21) parameter;
dcl	output_space	pointer parameter;
dcl	requote_argument	bit (1) aligned;
dcl	new_min_maxlength	fixed binary (21);
dcl	old_output_len	fixed binary (21);
dcl	old_output_ptr	pointer;
dcl	output_string	character (output_len) varying based (output_ptr);
dcl	old_output_string	character (old_output_len) varying based (old_output_ptr);

	requote_argument = "0"b;
	goto START_ADDITION;

add_requoted:
     entry (argument, output_ptr, output_len, output_space);

	requote_argument = "1"b;

START_ADDITION:
	new_min_maxlength = length (output_string) + length (SP) + length (argument);
	if requote_argument				/* room for possible requoting */
	then new_min_maxlength = new_min_maxlength + length (argument) + 2;

	if new_min_maxlength > output_len
	then do;					/* need to make more space */
		old_output_ptr = output_ptr;
		old_output_len = output_len;
		output_len = max (2 * output_len, new_min_maxlength);
		allocate output_string in (system_area) set (output_ptr);
		output_string = old_output_string;
		if old_output_ptr ^= output_space
		then free old_output_string in (system_area);
	     end;

	output_string = output_string || SP;

	if requote_argument
	then output_string = output_string || requote_string_ (argument);
	else output_string = output_string || argument;

	return;

     end add;



cleaner_up:
     procedure;

	if abs_args_list_ptr ^= addr (abs_args_list_space)
	then free abs_args_list in (system_area);
	if dp_args_list_ptr ^= addr (dp_args_list_space)
	then free dp_args_list in (system_area);
	if segname_list_ptr ^= addr (segname_list_space)
	then free segname_list in (system_area);

	return;

     end cleaner_up;

     end pl1_abs;
