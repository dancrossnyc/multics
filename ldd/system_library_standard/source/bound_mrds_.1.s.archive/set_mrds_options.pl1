/****^  ********************************************
        *                                          *
        * Copyright, (C) Honeywell Bull Inc., 1988 *
        *                                          *
        ******************************************** */



/****^  HISTORY COMMENTS:
  1) change(87-01-22,Hergert), approve(88-07-11,MCR7903),
     audit(88-07-11,Dupuis), install(88-08-01,MR12.2-1073):
     Changed design of the flags structure for use with the new parser.
                                                   END HISTORY COMMENTS */


set_mrds_options:
smo:
    proc;

/* DESCRIPTION

 smo {-pso -ot -pse -er on|off {-force}} | -reset -list

   The purpose of this procedure is to implement the set_mrds_options command.
   The options set here control the way MRDS will act.
   The various mrds options that can be set by this command are 
   print_search_order, and no_ot. Also controllable is error_report and
   print_selection_expression. error_report (er) causes the long form of 
   error reporting to be turned on or off. pse dumps the select expression
   in some human readable format. control options are -list and -reset.
   -list lists the current state of the switches. -reset causes all switches
   to be reset to their default values.

   HISTORY:

   85-08-23 Originally written by John Hergert (FMC)


   INPUT CONDITIONS:

   Some control arg must be supplied. If it is one of the options I.E.
   -er -pso -ot -pse then it must be followed by either "on" or "off".
   -force may be supplied, but only has effect on args that can be put in 
   selection expressions, as it is intended to force overriding default 
   values supplied in the sex.

*/

        code = 0;
        flags = OFF;


        call cu_$arg_count (nargs, code);
        if (code ^= 0) then call error (code);

        if nargs = 0 then do;
	  call com_err_ (0, program_name,
	      "^/^a^/",
	      "Usage: set_mrds_options {{{-pso on|off} | {-ot on|off} | {-pse on|off} | {-er on|off}} {-force}} | -reset -list"
	      );
	  goto exit;
        end;

        more_args = TRUE;
        i = 1;
        do while (more_args);

	  call cu_$arg_ptr (i, arg_ptr, arg_len, code);
	  if (code ^= 0) then call error (code);

	  if arg = "-pso" | arg = "-print_search_order"
	  then do;
	      flags.selected.pso = TRUE;
	      call get_arg_flag (flags.value.pso, i);
	  end;
	  else if arg = "-ot" | arg = "-optimize"
	       then do;
		 flags.selected.ot = TRUE;
		 call get_arg_flag (flags.value.ot, i);
	       end;
	       else if arg = "-pse" | arg = "-print_selection_expression"
		  then do;
		      flags.selected.pse = TRUE;
		      call get_arg_flag (flags.value.pse, i);
		  end;
		  else if arg = "-er" | arg = "-error_report"
		       then do;
			 flags.selected.error = TRUE;
			 call get_arg_flag (flags.value.error, i);
		       end;
		       else if arg = "-rs" | arg = "-reset"
			  then if nargs = 1 then do;
				 flags.reset_sw = ON;
				 more_args = FALSE;
			       end;
			       else do;
				 call com_err_ (0,
				     program_name,
				     "^/^a^/",
				     "The -reset control argument is incompatible with any other control arguments."
				     );
				 goto exit;
			       end;
			  else if arg = "-ls" | arg = "-list"
			       then if nargs = 1 then do;
				      flags.list_sw = ON;
				      more_args = FALSE;
				  end;
				  else do;
				      call com_err_ (0,
					program_name,
					"^/^a^/",
					"The -list control argument is incompatible with any other control arguments."
					);
				      goto exit;
				  end;
			       else if arg = "-fc" | arg = "-force"
				  then if nargs ^= 1
				       then flags.selected.force,flags.value.force = ON;
				       else do;
					 call com_err_ (0,
					     program_name,
					     "^/^a^/",
					     "The -force control argument must be used with other control arguments."
					     );
					 goto exit;
				       end;
				  else do;
				      call com_err_ (
					error_table_$badopt,
					program_name,
					"^/^a^/",
					"Usage: set_mrds_options {-pso | -ot | -pse | -er {on|off} {-force}} | -reset -list"
					);
				      goto exit;
				  end;

	  i = i + 1;
	  if i > nargs then more_args = FALSE;
        end;


        if flags.reset_sw then do;
	  flags.selected.pse, flags.selected.pso, flags.selected.ot,
	      flags.selected.error, flags.selected.force = ON;
	  flags.value.pso, flags.value.pse, flags.value.force = OFF;
	  flags.value.error, flags.value.ot = ON;
        end;

        call mrds_dsl_translate$set_options (addr (flags));

        if flags.list_sw then do;
	  call ioa_ ("  MRDS Selection Expression Options:^/");
	  call ioa_ ("Print search order:^40t^[ON^;OFF^]", flags.value.pso);
	  call ioa_ ("Print selection expression:^40t^[ON^;OFF^]",
	      flags.value.pse);
	  call ioa_ ("Optimize selection expression:^40t^[ON^;OFF^]",
	      flags.value.ot);
	  call ioa_ ("Force override default values:^40t^[ON^;OFF^]",
	      flags.value.force);
	  call ioa_ ("Long error report:^40t^[ON^;OFF^]^/",
	      flags.value.error);
        end;

exit:
        return;

error:
    proc (cd);
dcl     cd		 fixed bin (35);
        call com_err_ (cd, program_name);
        goto exit;
    end;

get_arg_flag:
    procedure (flag, arg_index);

/* handle on or off args in the command line */

dcl     flag		 bit (1);
dcl     arg_index		 fixed bin;

        if arg_index = nargs then do;
	  call com_err_ (error_table_$wrong_no_of_args, program_name,
	      "^/^a^/",
	      "on or off must be specified after the control argument '"
	      || arg || "'."
	      );
	  goto exit;
        end;


        arg_index = arg_index + 1;			/* point to the next one */

        call cu_$arg_ptr (arg_index, arg_ptr, arg_len, code);
        if (code ^= 0) then call error (code);

        if arg = "on"
        then flag = ON;
        else if arg = "off"
	   then flag = OFF;
	   else do;
	       call com_err_ (error_table_$badopt, program_name,
		 "^/^a^/",
		 "on or off must be specified after the control argument. Not '"
		 || arg || "'."
		 );
	       goto exit;
	   end;

    end get_arg_flag;

%include mrds_se_options;
%page;
/* local variables */

dcl     program_name	 char (27) internal static
			 options (constant) init ("set_mrds_options");
dcl     (nargs, i)		 fixed bin;
dcl     arg		 char (arg_len) based (arg_ptr);
dcl     arg_len		 fixed bin (21);
dcl     arg_ptr		 ptr;
dcl     more_args		 bit;

dcl     code		 fixed bin (35);
dcl     (OFF, FALSE)	 bit internal static options (constant)
			 init ("0"b);
dcl     (ON, TRUE)		 bit internal static options (constant)
			 init ("1"b);
dcl     1 flags		 aligned like mode_flags;

dcl     mrds_dsl_translate$set_options
			 entry (ptr);
dcl     cu_$arg_count	 entry (fixed bin, fixed bin (35));
dcl     cu_$arg_ptr		 entry (fixed bin, ptr, fixed bin (21),
			 fixed bin (35));
dcl     ioa_		 entry () options (variable);
dcl     com_err_		 entry options (variable);

/* error codes */
dcl     (
        error_table_$wrong_no_of_args,
        error_table_$badopt
        )			 external fixed bin (35);

/* builtins */
dcl     addr		 builtin;

    end set_mrds_options;
