/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1981 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(88-01-18,Blair), approve(88-02-25,MCR7840), audit(88-03-03,Dupuis),
     install(88-03-08,MR12.2-1034):
     Don't expand the pathname arg if it is just an entryname because we want
     to find it using the "mrds" searchlist".  SCP 6366.
                                                   END HISTORY COMMENTS */


display_mrds_dsm: dmdsm: proc;

/* DESCRIPTION:

   This  procedure  implements the display_mrds_dsm command which provides the
   capability  to display an existing MRDS data submodel.  Various options are
   provided,  allowing  the user to display information varying in detail from
   relation names only, to all information contained in the data submodel plus
   information from the corresponding data model.  It is also possible for the
   user to display this information for only specified relations.



   HISTORY:

   81-05-18 Rickie E. Brinegar:  Completely rewritten.

   81-06-04 Davids:  removed  the  use  of  the  mrds_dsm_header_str
   include  file.  Replaced  the  call  to mrds_dsm_read_header with
   mrds_dsm_read_header$db_path. Added code to increment the counter
   in the control arg processing loop.

   81-06-05 Rickie E. Brinegar: Made some auditing changes.

   81-06-09     Rickie     E.      Brinegar:     Modified     to    set    the
   mrds_dsm_display_info.submodel_secured bit for secured databases.

   83-06-17 Davids: Modified so that mrds_dsl_get_version$get_path_info is called
   to determine the version of the submodel instead of just opening the submodel
   and looking at the header structure. This was done so that version checking is 
   localized to 1 module. Also an error is now reported if a version 1 submodel
   is referenced (actually error code is returned by mrds_dsl_get_version). The
   code to generate a call to dmdsm_v1 has been deleted.
*/

%include mrds_path_info;
%page;
%include mrds_authorization;
%page;
%include mrds_database_state;
%page;
%include mrds_dsm_display_info;
%page;
%include mrds_dsm_relation_names;

/* AUTOMATIC */

	dcl     output_file_switch	 char (26);	/* iocb switch name for output */
          dcl     suffixed_name          char (32);         /* entryname with suffix */  
	dcl     submodel_entry	 char (168) init (""); /* for use with expand_pathname_ and
						   mrds_dm_secured_submodel */
	dcl     submodel_directory	 char (168) init (""); /* for use with expand_pathname_ and
						   mrds_dm_secured_submodel */

	dcl     (arg_len,				/* length of current arg */
	        i,				/* internal index */
	        nargs)		 fixed bin;	/* no. of input arg */

	dcl     code		 fixed bin (35);	/* status code */

	dcl     (arg_ptr		 init (null),	/* pointer to current arg */
	        submodel_iocb_ptr	 init (null),	/* pointer to the open submodel */
	        wa_ptr		 init (null)) ptr;	/* pointer to work area */

	dcl     (db_path,				/* database path from mrds_dsl_get_version */
	        output_file		 init (""),	/* path name of the output file */
	        output_file_attach,			/* absolute pathname of output file */
	        sm_path)		 char (168);	/* absolute sm_path */

/* BASED */

	dcl     work_area		 area (sys_info$max_seg_size) based (wa_ptr);
						/* scratch space */
	dcl     arg		 char (arg_len) based (arg_ptr);
						/* current argument */

/* BUILTINS */

	dcl     (empty,
	        null,
	        rtrim,
                  search,
	        substr)		 builtin;


/* CONDITIONS */

	dcl     cleanup		 condition;


/* CONSTANTS */

	dcl     DSM_SUFFIX		 init ("dsm") char (3) internal static options (constant);
          dcl     MRDS_SEARCHLIST        init ("mrds") char (4) internal static options (constant);


/* EXTERNAL */

	dcl     (error_table_$badcall,
	        error_table_$badopt,
	        error_table_$not_act_fnc,
	        error_table_$wrong_no_of_args,
	        mrds_error_$missing_relation_name,
	        mrds_error_$no_model_submodel,
	        mrds_error_$version_1_dsm,
	        sys_info$max_seg_size) fixed bin (35) ext;

	dcl     iox_$user_output	 ptr ext;


/*  ENTRIES */

	dcl     absolute_pathname_	 entry (char (*), char (*), fixed bin (35));
          dcl     absolute_pathname_$add_suffix entry (char (*), char(*), char(*), fixed bin(35));
	dcl     com_err_		 entry options (variable);
	dcl     cu_$af_arg_count	 entry (fixed bin, fixed bin (35));
	dcl     cu_$arg_ptr		 entry (fixed bin, ptr, fixed bin, fixed bin (35));
	dcl     expand_pathname_	 entry (char (*), char (*), char (*), fixed bin (35));
	dcl     get_temp_segment_	 entry (char (*), ptr, fixed bin (35));
	dcl     iox_$attach_name	 entry (char (*), ptr, char (*), ptr, fixed bin (35));
	dcl     iox_$close		 entry (ptr, fixed bin (35));
	dcl     iox_$destroy_iocb	 entry (ptr, fixed bin (35));
	dcl     iox_$detach_iocb	 entry (ptr, fixed bin (35));
	dcl     iox_$open		 entry (ptr, fixed bin, bit (1) aligned, fixed bin (35));
	dcl     mrds_dm_authorization$get_user_class entry (char (*), ptr, fixed bin, ptr, fixed bin (35));
	dcl     mrds_dm_db_secured$get_secured_state entry (char (*), ptr, fixed bin, ptr, fixed bin (35));
	dcl     mrds_dm_secured_submodel entry (char (*), char (*), char (*)) returns (bit (1));
	dcl     mrds_dsl_get_version$get_path_info entry (char (*), ptr, fixed bin, ptr, fixed bin (35));
	dcl     mrds_dsm_close$force	 entry (ptr);
	dcl     mrds_dsm_dmdsm	 entry (ptr, fixed bin (35));
	dcl     mrds_dsm_open$read	 entry (char (*), ptr, fixed bin (35));
	dcl     mrds_dsm_read_header$db_path entry (ptr, char (168), fixed bin (35));
	dcl     release_temp_segment_	 entry (char (*), ptr, fixed bin (35));
          dcl     suffixed_name_$make    entry (char(*), char(*), char(32), fixed bin(35));
	dcl     unique_chars_	 entry (bit (*)) returns (char (15));


/* ****************************************************************************
   INITIALIZATION
   **************************************************************************** */

	on cleanup call tidy_up;

	call get_temp_segment_ ("dmdsm", wa_ptr, code);	/* This temp segment should be in a lower ring
						   to preclude subversion of security */
	if code ^= 0 then
	     call error (code, "^/Trying to get a temp segment");

	work_area = empty;

	mrds_dsm_display_info_ptr,
	     mrds_dsm_relation_names_ptr = null;



/* ****************************************************************************
   Get information about the control arguments
   **************************************************************************** */

	call cu_$af_arg_count (nargs, code);		/* get no. of args  and insure not called as an
						   active function */
	if code ^= error_table_$not_act_fnc then do;
		if code = 0 then
		     call error (error_table_$badcall, "display_mrds_dsm may not be called as an active function.");
		else
		     call error (code, "^/Finding the number of arguments");
	     end;

	if nargs < 1 then /* give him a hint */
	     call error (error_table_$wrong_no_of_args, "^/Usage:  dmdsm dsm_path {-control_args}" ||
		"^/Where -control_args may be: -access -bf -cmdsm -lg -no_acess -no_output_file" ||
		"^/^29t-of -rel_names -relation REL_1 ... REL_N");



/* ****************************************************************************
   Get the datasubmodel version
   **************************************************************************** */

	call cu_$arg_ptr (1, arg_ptr, arg_len, code);	/* get data submodel relative path */
	if code ^= 0 then
	     call error (code, "^/Getting data submodel relative path");

	if search (arg, "<>") = 0 then do;
	     call suffixed_name_$make (arg, DSM_SUFFIX, suffixed_name, code);
	     if code ^= 0 then
		call error (code, "^/Getting entryname of the data submodel: " || arg);
	     sm_path = suffixed_name;
	     end;
	else do;
	     call absolute_pathname_$add_suffix (arg, DSM_SUFFIX, sm_path, code);
						/* get absolute data submodel path */
	     if code ^= 0 then
		call error (code, "^/Getting absolute path of the data submodel: " || sm_path);
	     end;
	call mrds_dsl_get_version$get_path_info (sm_path, wa_ptr, mrds_path_info_structure_version,
	     mrds_path_info_ptr, code);
	if code ^= 0
	then do;
		if code = mrds_error_$no_model_submodel
		then call error (code, "^/Unable to open the submodel at: " || sm_path);
		else if code = mrds_error_$version_1_dsm
		then call error (code, "^/" || sm_path);
		else call error (code, "^/Unable to get the version of the data submodel: " || sm_path);
	     end;
	else sm_path = mrds_path_info.absolute_path;
	
	call mrds_dsm_open$read (sm_path, submodel_iocb_ptr, code);
	if code ^= 0 then
	     call error (code, "^/Unable to open the submodel: " || sm_path);


/* ****************************************************************************
   Initialize the control structure for mrds_dsm_dmdsm and process the control
   arguments to be used in filling in the control structure
   **************************************************************************** */

	allocate mrds_dsm_display_info in (work_area);

	mrds_dsm_display_info.version = MRDS_DSM_DISPLAY_INFO_VERSION;
	mrds_dsm_display_info.rel_names_array_ptr = null;
	mrds_dsm_display_info.output_iocb_ptr = iox_$user_output;
	mrds_dsm_display_info.submodel_iocb_ptr = submodel_iocb_ptr;
	mrds_dsm_display_info.submodel_pathname = sm_path;
	mrds_dsm_display_info.format = "b";
	mrds_dsm_display_info.access = "1"b;

	i = 2;
	do while (i ^> nargs);			/* look at all args */
	     call cu_$arg_ptr (i, arg_ptr, arg_len, code);/* get this arg */
	     if code ^= 0
	     then call error (code, "control arg");

	     if arg = "-access" | arg = "-acc" then
		mrds_dsm_display_info.access = "1"b;
	     else
		if arg = "-brief" | arg = "-bf" then
		mrds_dsm_display_info.format = "b";
	     else
		if arg = "-cmdsm" then
		mrds_dsm_display_info.format = "c";
	     else
		if arg = "-long" | arg = "-lg" then
		mrds_dsm_display_info.format = "l";
	     else
		if arg = "-no_access" | arg = "-nacc" then
		mrds_dsm_display_info.access = "0"b;
	     else
		if arg = "-no_output_file" | arg = "-nof" then
		output_file = "";
	     else
		if arg = "-output_file" | arg = "-of" then do;
		     if i ^< nargs then
			call error (error_table_$wrong_no_of_args,
			     "^/A path must be given with the -of control argument");
		     i = i + 1;
		     call cu_$arg_ptr (i, arg_ptr, arg_len, code);
		     if code ^= 0 then
			call error (code, "^/Getting output file name");
		     output_file = arg;
		end;
	     else
		if arg = "-rel_names" | arg = "-rn" then
		mrds_dsm_display_info.format = "r";
	     else
		if arg = "-relation" | arg = "-rel" then do;
		     call build_rel_list;		/* build mrds_dsm_relation_names structure */
		     mrds_dsm_display_info.rel_names_array_ptr = mrds_dsm_relation_names_ptr;
		end;
	     else
		call error (error_table_$badopt, "^/Bad argument is: " || arg);

	     i = i + 1;

	end;					/* control arg loop */



/* ****************************************************************************
   If an ouput file is to be used (-of was specified) then open the output file
   else use the user's user_output switch
   **************************************************************************** */

	if output_file ^= "" then do;
		call absolute_pathname_ (output_file, output_file_attach, code);
		if code ^= 0 then
		     call error (code, "^/Getting absolute path_name of output file: " || output_file);

		output_file_switch = unique_chars_ ("0"b) || ".mrds.dmdsm";

		call iox_$attach_name (output_file_switch, mrds_dsm_display_info.output_iocb_ptr,
		     "vfile_ " || rtrim (output_file_attach), null, code);
		if code ^= 0 then
		     call error (code, "^/Attaching output file: " || output_file_attach);

		call iox_$open (mrds_dsm_display_info.output_iocb_ptr, 2, "0"b, code);
		if code ^= 0 then
		     call error (code, "^/Opening output file: " || output_file_attach);
	     end;
	else
	     mrds_dsm_display_info.output_iocb_ptr = iox_$user_output;



/* ****************************************************************************
   Set the security switches.
   **************************************************************************** */

	call mrds_dsm_read_header$db_path (mrds_dsm_display_info.submodel_iocb_ptr, db_path, code);
						/* Get the absolute pathname of the data model
						   from the submodel */
	if code ^= 0 then
	     call error (code, "^/Getting the header record of submodel: " || mrds_dsm_display_info.submodel_pathname);

	call mrds_dm_authorization$get_user_class (db_path, wa_ptr,
	     mrds_authorization_structure_version, mrds_authorization_ptr, code);

	if code ^= 0 then
	     call error (code, "^/Getting datamodel authorization information from submodel: "
		|| mrds_dsm_display_info.submodel_pathname);

	mrds_dsm_display_info.administrator = mrds_authorization.administrator;

	call mrds_dm_db_secured$get_secured_state (db_path, wa_ptr,
	     database_state_structure_version, database_state_ptr, code);
	if code ^= 0 then
	     call error (code, "^/Getting database security state for submodel: "
		|| mrds_dsm_display_info.submodel_pathname);

	mrds_dsm_display_info.db_secured = database_state.secured;

	call expand_pathname_ (mrds_dsm_display_info.submodel_pathname,
	     submodel_directory, submodel_entry, code);
	if code ^= 0 then
	     call error (code, "^/Calling expand_pathname_ with " ||
		mrds_dsm_display_info.submodel_pathname);
	mrds_dsm_display_info.submodel_secured = mrds_dm_secured_submodel (db_path,
	     submodel_directory, submodel_entry);

	if mrds_dsm_display_info.db_secured & ^mrds_dsm_display_info.administrator &
	     mrds_dsm_display_info.format = "c" then
	     call error (0, "^/The -cmdsm argument is only useable by administrators for secured databases");

	call mrds_dsm_dmdsm (mrds_dsm_display_info_ptr, code);
	if code ^= 0 then
	     call error (code, "^/Creating the display for submodel: "
		|| mrds_dsm_display_info.submodel_pathname);



/* ****************************************************************************
   All done, one way or another. Time to clean up and leave.
   **************************************************************************** */

exit:
	call tidy_up;				/* clean up our mess */
	return;


/* ****************************************************************************
   Process the -relation control argument, building a list of relations to be
   displayed by mrds_dsm_dmdsm.
   **************************************************************************** */

build_rel_list:
     proc;

	if mrds_dsm_relation_names_ptr ^= null then /* -relation is not additive */
	     mrds_dsm_relation_names.nrels = 0;
	else do;
		mrds_dsm_relation_names_nrels_alloc = nargs - i; /*  can't have more rels
						   than the number of arguments left */
		allocate mrds_dsm_relation_names in (work_area);
		mrds_dsm_relation_names.nrels = 0;	/* initialize */
	     end;

	call cu_$arg_ptr (i + 1, arg_ptr, arg_len, code); /* get first rel name */
	if code ^= 0 then
	     call error (code, "^/Attempting to get a relation name");

	do while (i < nargs & substr (arg, 1, 1) ^= "-"); /* for all relatins names */

	     mrds_dsm_relation_names.nrels = mrds_dsm_relation_names.nrels + 1;
						/* keep count of rels */
	     mrds_dsm_relation_names.relation (mrds_dsm_relation_names.nrels) = arg;
						/* save rel name */
	     i = i + 1;
	     if i < nargs then do;
		     call cu_$arg_ptr (i + 1, arg_ptr, arg_len, code);
						/* get next arg */
		     if code ^= 0 then
			call error (code, "^/Getting an additional relation name");
		end;
	end;					/* relation name loop */

	if mrds_dsm_relation_names.nrels <= 0 then
	     call error (mrds_error_$missing_relation_name, "^/-relation");

     end build_rel_list;


/* ****************************************************************************
   Print any diagnostics and leave the command, which cleans up on exit.
   **************************************************************************** */

error:
     proc (code, string);

	dcl     code		 fixed bin (35);
	dcl     string		 char (*);

	call com_err_ (code, "display_mrds_dsm", string);
	go to exit;

     end error;


/* ****************************************************************************
   Clean up anything that was left laying around.
   **************************************************************************** */

tidy_up:
     proc;

	if wa_ptr ^= null then do;
		if mrds_dsm_display_info_ptr ^= null then do;
			if output_file ^= "" & mrds_dsm_display_info.output_iocb_ptr ^= null then do;
				call iox_$close (mrds_dsm_display_info.output_iocb_ptr, code);
				call iox_$detach_iocb (mrds_dsm_display_info.output_iocb_ptr, code);
				call iox_$destroy_iocb (mrds_dsm_display_info.output_iocb_ptr, code);
			     end;
			if submodel_iocb_ptr ^= null then
			     call mrds_dsm_close$force (submodel_iocb_ptr);
			free mrds_dsm_display_info;
		     end;
		if mrds_dsm_relation_names_ptr ^= null then
		     free mrds_dsm_relation_names;
		call release_temp_segment_ ("dmdsm", wa_ptr, code);
	     end;
     end tidy_up;

     end display_mrds_dsm;
