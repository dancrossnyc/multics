/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* HISTORY:

   Originally written by Jim Gray - - November 1980

   81-01-20 Jim Gray : modified to take advantage of extended interface
   of mrds_dm_db_secured, replacing mrds_dm_get_secured_status, and mrds_dm_set_db_secured.

   83-02-03 Roger Lackey : Removed unreferenced variables and entries, added
   dcl for builtins.
*/

secure_mrds_db: smdb: procedure ();

/* DESCRIPTION:

   This routine is used to set/reset/display a "secured" bit in the database
   that affects how database security is handled.
   If the bit is not set, the databse operations are as per mr8.0 mrds.
   If the bit is set, the openings must be via new version
   security submodels, and model commands are only usable by a DBA.
   NOTE: use of this command requires "sma" access on the database directory,
   and "rw" access on the db_model segment.

*/

/* PARAMETERS:

   db_path - - (input) char(*), the relative or absolute pathname of
   a version 4 database(earlier versions are not supported by this command)

   control_arg - - (input) char(*), either "-set",  "-reset" or "-display"
   may be optionally given as a control argument(only 1).
   The action without control arguments is to set the secured bit to on,
   (i.e. -set is the default)
   the -reset control causes it to be set to off, and the -display
   control argument will display the current value of the secured bit.

*/
%page;
/* inititalize */

	code = 0;
	data_model_ptr = null ();
	on cleanup call clean_up ();

/* get the argument list */

	call cu_$arg_list_ptr (al_ptr);
	nargs = arg_list.arg_count / 2;
	num_ptrs = arg_list.arg_count;

	if nargs < 1 | nargs > 2 then
	     call com_err_ (error_table_$wrong_no_of_args, caller_name, "^/^a^/",
		"Usage:  smdb  db_path  [-set|-reset|-display]");
	else do;

/* get optional control arguments and set defaultts */

		secure, change = ON;		/* defaults */

		if nargs = 2 then do;		/* control arg supplied */

			call cu_$arg_ptr (2, arg_ptr, arg_len, code);
			if code ^= 0 then
			     call com_err_ (code, caller_name, "^/^a",
				"Unable to get the control argument.");
			else do;

				if arg = "-set" then ;
				else if arg = "-reset" | arg = "-rs" then
				     secure = OFF;
				else if arg = "-display" | arg = "-di" then
				     change = OFF;
				else do;
					code = error_table_$badopt;
					call com_err_ (code, caller_name, "^/^a^a^a",
					     "Unknown control argument """, arg, """ given.");
				     end;
			     end;
		     end;

		if code ^= 0 then ;
		else do;

/* get the database pathname argument */

			call cu_$arg_ptr (1, arg_ptr, arg_len, code);
			if code ^= 0 then
			     call com_err_ (code, caller_name, "^/^a",
				"Unable to get database pathname argument.");
			else do;

				call mrds_dsl_get_version$get_path_info ((arg), addr (local_area),
				     mrds_path_info_structure_version, mrds_path_info_ptr, code);

				if mrds_path_info_ptr = null () then
				     db_path = arg;
				else do;
					db_path = mrds_path_info.absolute_path;
					version = mrds_path_info.mrds_version;
				     end;

				if code ^= 0 then
				     call com_err_ (code, caller_name, "^/^a^a^a",
					"Unable to get version of the database using the path """, db_path, """.");
				else do;

/* check that we do not have a submodel, or database version < 4 */

					if mrds_path_info.type.submodel then do;
						code = error_table_$badcall;
						call com_err_ (code, caller_name, "^/^a ^a",
						     "Data submodels are not supported by this command. ", db_path);
					     end;
					else if version < 4 then do;
						code = mrds_error_$version_not_supported;
						call com_err_ (code, caller_name, "^/^a^a^a ^d ^a",
						     "The pathname """, db_path, """ referes to a version", version,
						     "database (< 4) not supported by this command.");
					     end;



/* if valid version 4 database path, process the command */

					if code ^= 0 then ;
					else call process_security ();

				     end;
			     end;
		     end;
	     end;

	call clean_up ();

	return;
%page;
process_security: procedure ();

/* routine to open data model, and change/display security bit
   now that we have a good database pathname */

	call mrds_dm_open (db_path, mode, data_model_ptr, code);
	if code ^= 0 then
	     call com_err_ (code, caller_name, "^/^a^a^a",
		"Unable to open the database model using the path """, db_path, """.");

	else do;

		if change then do;

/* change the database secured bit according to the option given */

			if secure then
			     call mrds_dm_db_secured$set_db_secured (data_model_ptr, code);
			else call mrds_dm_db_secured$reset_db_secured (data_model_ptr, code);

			if code ^= 0 then
			     call com_err_ (code, caller_name, "^/^a^a^a",
				"Unable to change the database security using the path """, db_path, """.");
		     end;

/* display the current secured bit status */

		if code = 0 then do;

			call mrds_dm_db_secured$get_secured_status (data_model_ptr, addr (local_area),
			     database_state_structure_version, database_state_ptr, code);
			if code ^= 0 then
			     call com_err_ (code, caller_name, "^/^a^a^a",
				"Unable to get the status of the security for database at """, db_path, """.");
			else do;

				if database_state.secured then
				     call ioa_ ("^/The database at ""^a"" has been secured.", db_path);
				else call ioa_ ("^/The database at ""^a"" is not secured.", db_path);

			     end;
		     end;
	     end;

     end;
%page;
clean_up: procedure ();

/* routine to clean up after error or normal termination */

	if data_model_ptr = null () then ;
	else do;

		call mrds_dm_close (data_model_ptr, code);
		data_model_ptr = null ();

	     end;

     end;
%page;
	declare code		 fixed bin (35);	/* error status encoding */
	declare cleanup		 condition;	/* signaled upon quit - release */
	declare error_table_$badopt	 fixed bin (35) ext;/* unknown control arg */
	declare data_model_ptr	 ptr;		/* points to database model */
	declare mrds_error_$version_not_supported fixed bin (35) ext; /* not version 4 db */
	declare mrds_dm_open	 entry (char (168), fixed bin, ptr, fixed bin (35)); /* opens database model */
	declare mode		 fixed bin init (2);/* retrieval model opening mode */
	declare mrds_dm_close	 entry (ptr, fixed bin (35)); /* closes database model */
	declare ON		 bit (1) init ("1"b); /* true value */
	declare OFF		 bit (1) init ("0"b); /* false value */
	declare error_table_$wrong_no_of_args fixed bin (35) ext; /* args ^= 1 or 2 */
	declare mrds_dsl_get_version$get_path_info entry
				 (char (*), ptr, fixed bin, ptr, fixed bin (35)); /* gets version of db */
	declare db_path		 char (168);	/* pathname of database */
	declare version		 fixed bin;	/* version number of dtabase */
	declare ioa_		 entry options (variable); /* reports secured bit status */
	declare change		 bit (1);		/* on => change existing secured bit status */
	declare secure		 bit (1);		/* on => set secured bit to on */
	declare cu_$arg_list_ptr	 entry (ptr);	/* gets argument list */
	declare cu_$arg_ptr		 entry (fixed bin, ptr, fixed bin (21), fixed bin (35)); /* gets arg N */
	declare arg		 char (arg_len) based (arg_ptr); /* argument */
	declare arg_len		 fixed bin (21);	/* length of argument */
	declare arg_ptr		 ptr;		/* points to argument */
	declare com_err_		 entry options (variable); /* reports errors */
	declare caller_name		 char (32) init ("secure_mrds_db"); /* name of calling routine */
	declare mrds_dm_db_secured$get_secured_status entry (ptr, ptr, fixed bin,
				 ptr, fixed bin (35)); /* gets state of secured bit in db */
	declare local_area		 area (1024);	/* space for database state structure */
	declare mrds_dm_db_secured$set_db_secured entry (ptr, fixed bin (35)); /* sets secured bit to on */
	declare mrds_dm_db_secured$reset_db_secured entry (ptr, fixed bin (35)); /* resets secured bit */
	declare nargs		 fixed bin;	/* number of arguments */
	declare error_table_$badcall	 fixed bin (35) ext;/* submodel path given */
	declare (addr, empty, null)	 builtin;
%page;
%include mdbm_arg_list;
%page;
%include mrds_database_state;
%page;
%include mrds_path_info;

     end;
