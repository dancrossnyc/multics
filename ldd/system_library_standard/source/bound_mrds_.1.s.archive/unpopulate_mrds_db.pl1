/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */


/****^  HISTORY COMMENTS:
  1) change(85-11-08,Dupuis), approve(85-12-16,MCR7314),
     audit(86-02-04,Brunelle), install(86-02-05,MR12.0-1013):
     This entry is being made to cover the change made on 85-04-15 by Thanh
     Nguyen. (see mrds #136)
                                                   END HISTORY COMMENTS */


unpopulate_mrds_db:
umdb:
     procedure ();

/* DESCRIPTION:

   This module is primarily for use in testing  mrds  databases,  of
   any  version,  for  the  purpose  of deleting all data in a given
   database, so that subsequent tests will not be  affected  by  the
   results  of  previous tests. the major advantage of this utility,
   is not having to know the architecture of the database  involved,
   as  well  as  the  time  savings,  in  not  having  to delete the
   database, and do another cmdb, to get  an  unpopulated  database.
   the  command display_mrds_db_population can be used to verify the
   results. There is no required order to the arguments. The control
   arguments  are  over-ridable,  with  the  last  given  being  the
   accepted condition.



   PARAMETERS:

   database_path - - (input) character, the relative pathname of the
   database,  whose  data is to be deleted. The user will be queried
   before actual data deletion takes place. If there is no  data  in
   the  database,  no  error will occur. The user must a DBA for the
   given database. If it is a version 3 database, no other version 3
   database must be open.

   -force, -fc - - (input) optional  control  argument,  causes  the
   query as to whether data is to be delete, to be suppressed.

   -no_force, -nfc - - (input) optional control argument, causes the
   user  to  be quered as to whether he really intends to delete all
   data from the given database. This is the default.




   HISTORY:

   80-05-15 Jim Gray : Originally coded.

   81-04-11  Jim  Gray : got module in shape for being part of a MRDS release.
   Added  -force  and  -no_force control arguments, and restricted use of this
   command to a DBA.
   
   81-09-16  Rickie  E.   Brinegar:  The assignment of abs_path to db path was
   changed  to  be  done  via a rtrim of abs_path to avoid the substring range
   condition on compiling.   

   83-02-01 Davids: Modified the internal procedure delete_data to not have
   the deeply nested if-then-else structure. This was done by going to an
   exit_delete_data or finish_transaction label. The transaction include files
   were also added to the delete_data procedure. By puting the transaction
   in delete_data the rollback operation did not require the restoration of
   any significant data.

   83-02-03 Davids: added declarations for the fixed and rel builtins
   which are used in the mdbm_db_model include file.

   83-02-14 Davids: modified to use the new db_type_flags in the db_model
   structure instead of the old numeric db_type.

   83-05-23 Davids: Renamed the info_ptr variable to command_query_info_ptr.
   This was needed because the mrds_start_transaction include file now
   contains the condition_info include file. The condition_info include file
   declares a structure with a level 2 element of info_ptr. The
   mrds_start_transaction incl file is included in the delete_data internal
   procedure which is the same procedure that command_query_ is called in with
   the info_ptr variable. The info_ptr that points to the query structure is
   declared in the main procedure so what happens is that the info_ptr in
   the condition_info structure is incorrectly used.

   83-06-24 Davids: Modified so that an error is noot reported at the end
   of the finish transaction code if the mftxn_code has the same value
   as that of error_code since that error was already reported.
*/

	if recursive_call then do;			/* we can't allow recursion because of dsl_$open */
		error_code = mrds_error_$no_recursion;
		call
		     com_err_ (error_code, caller_name, "^/^a",
		     "A release or a start must be done before continuing.");
	     end;
	else do;

/* initialize */

		error_code = 0;
		area_ptr = null ();
		force_control = "0"b;		/* default to query user before deleting */
		all_relations = "1"b;		/* default to showing all relations in the view */
		path_seen = "0"b;
		data_model_ptr = null ();
		db_open = "0"b;
		command_query_info_ptr = addr (query_info);
		query_info.version = query_info_version_5;
		query_info.yes_or_no_sw = "1"b;
		on sub_error_ ;			/* ignore */
		call cu_$af_arg_count (nargs, error_code); /* make sure we weren't called as an active function */
		if error_code ^= error_table_$not_act_fnc then
		     call
			com_err_ (error_code, caller_name, "^/^a",
			"Command called as an active function, or unable to obtain argument count."
			);
		else do;

			error_code = 0;
			on cleanup call clean_up ();
			recursive_call = "1"b;	/* prevent recursion */

/* check for a good call */

			if nargs < 1 then do;
				error_code = error_table_$wrong_no_of_args;
				call
				     com_err_ (error_code, caller_name, "^/^a",
				     "Usage:  umdb  path  {-force|-no_force}");
			     end;
			else do;

/* get some work space */

				call get_temp_segment_ (caller_name, area_ptr, error_code);
				if error_code ^= 0 then
				     call
					com_err_ (error_code, caller_name, "^/^a",
					"Unable to get a temp segment.");
				else do;

					area_ptr -> work_area = empty ();

/* gather all the arguments */

					call gather_arguments ();

/* check that we got a  pathname argument */

					if error_code = 0 then do;

						if ^path_seen then do;
							error_code = error_table_$noarg;
							call
							     com_err_ (error_code, caller_name, "^/^a",
							     "No pathname argument was given.");
						     end;

/* now we can go delete the data */

						else call delete_data ();

					     end;
				     end;

			     end;


/* clean up after finishing */

			call clean_up ();

		     end;

	     end;

	return;

gather_arguments:
     procedure ();

/* routine to gather all arguments */

	arg_count = 1;
	args_finished = "0"b;
	do while (^args_finished);

/* get this argument, and decide if it is a control argument or not */

	     call cu_$arg_ptr (arg_count, arg_ptr, arg_len, error_code);
	     if error_code ^= 0 then do;
		     args_finished = "1"b;
		     call
			com_err_ (error_code, caller_name, "^/^a ^d",
			"Unable to get argument number", arg_count);
		end;
	     else do;

/* check for a null argument */

		     if arg_len < 1 then do;
			     args_finished = "1"b;
			     error_code = error_table_$bad_arg;
			     call
				com_err_ (error_code, caller_name, "^/^a ^d",
				"A null character string was detected for argument number",
				arg_count);
			end;
		     else do;

/* control arguments begin with a hyphen */

			     if substr (arg, 1, 1) = "-" then
				call process_control_arg ();
			     else call process_path_arg ();

			end;

/* advance to the next argument */

		     if arg_count < nargs then
			arg_count = arg_count + 1;
		     else args_finished = "1"b;

		end;

	end;

     end;

process_control_arg:
     procedure ();

/* routine to determine if user has given one of the legal
   control arguments of no_force. or force.
   The logic is such as to allow duplicate control arguments
   to override each other, with the last given taking effect. */

/* NO_FORCE */

	if arg = "-no_force" | arg = "-nfc" then do;
		force_control = "0"b;		/* query user first */
	     end;

/* FORCE */

	else if arg = "-force" | arg = "-fc" then do;
		force_control = "1"b;		/* dont query */
	     end;

/* UNKNOWN */

	else do;
		args_finished = "1"b;
		error_code = error_table_$badopt;
		call
		     com_err_ (error_code, caller_name, "^/^a^a^a",
		     "The control argument """, arg,
		     """ is not supported by this command.");
	     end;

     end;

process_path_arg:
     procedure ();

/* routine to verify the database model path or submodel path
   argument, that supplies the view for access information.
   Only one path argument is allowed */

	if path_seen then do;

/* duplicate path name arguments given */

		args_finished = "1"b;
		error_code = mrds_error_$duplicate_opt;
		call
		     com_err_ (error_code, caller_name, "^/^a ^a",
		     "The pathname argument was given more than once:", arg);
	     end;
	else do;

/* first pathname seen */

		path_seen = "1"b;

/* check for a valid path to a model or submodel */

		call
		     mrds_dsl_get_version$get_path_info (arg, area_ptr,
		     mrds_path_info_structure_version, mrds_path_info_ptr, error_code);
		if mrds_path_info_ptr = null () then
		     abs_path = arg;
		else abs_path = mrds_path_info.absolute_path;
		if error_code ^= 0 then do;
			args_finished = "1"b;
			call
			     com_err_ (error_code, caller_name, "^/^a^a^a",
			     "Unable to find database information using the path """,
			     abs_path, """.");
		     end;

		else do;

/* check that this is a data base, not a submodel */

			if mrds_path_info.type.submodel then do;
				args_finished = "1"b;
				error_code = error_table_$bad_arg;
				call
				     com_err_ (error_code, caller_name, "^/^a^a^a",
				     "This command will only accept database paths.  The path """,
				     abs_path, """ refers to a submodel.");
			     end;
			else do;

/* good database path given */

				db_path = rtrim (abs_path);

/* make sure the user is a DBA */

				if mrds_path_info.mrds_version = 4 then do;

					call
					     mrds_dm_authorization$get_user_class (rtrim (db_path),
					     area_ptr, mrds_authorization_structure_version,
					     mrds_authorization_ptr, error_code);
					if error_code ^= 0 then do;
						args_finished = "1"b;
						call
						     com_err_ (error_code, caller_name, "^/^a^a^a",
						     "Unable to determine if the user is a DBA for the database """
						     , db_path, """.");
					     end;
					else if ^mrds_authorization.administrator then do;
						args_finished = "1"b;
						error_code = error_table_$insufficient_access;
						call
						     com_err_ (error_code, caller_name, "^/^a^a^a",
						     "The user must be a DBA to use this command on the database """
						     , db_path, """.");
					     end;


				     end;

			     end;
		     end;

	     end;

     end;

delete_data:
     procedure ();

/* routine to delete all data from the database */

/* check to see if he really wants to delete all data */

	if force_control then
	     answer = "yes";
	else call command_query_ (command_query_info_ptr, answer, caller_name, "^a^a^a",
		"Do you really wish to delete all data currently stored in the database """
		, db_path, """?");
	if answer ^= "yes"
	then goto exit_delete_data;

/* open the model, and get all relation names */

	call mrds_dm_open (db_path, mode, data_model_ptr, error_code);
	if error_code ^= 0
	then do;
		call com_err_ (error_code, caller_name,
		     "^/Unable to open the data model for database ^a.", db_path);
		goto exit_delete_data;
	     end;

	call mrds_dm_get_relations (data_model_ptr, addr (work_area), mr_ptr,
	     error_code);
	if error_code ^= 0
	then do;
		call com_err_ (error_code, caller_name,
		     "^/Unable to get the relation names from the model for database ^a.", db_path);
		goto exit_delete_data;
	     end;

	mstxn_txn_id = "0"b;
	mstxn_transactions_needed = data_model_ptr -> db_model.db_type_flags.transactions_needed;

	on cleanup begin;
		call mstxn_cleanup;
		call clean_up;
	     end;

	on any_other call mstxn_any_other;

%include mrds_start_transaction;

	if mstxn_code ^= 0
	then do;
		call com_err_ (mstxn_code, caller_name, "^/Unable to start a transaction.");
		goto exit_delete_data;
	     end;

/* open the database itself, in an exclusive mode, to be able to delete data */

	if ^db_open
	then do;
		call mrds_dsl_open (db_path, dbi, EXCLUSIVE_UPDATE, error_code);
		if error_code ^= 0
		then do;
			call com_err_ (error_code, caller_name,
			     "^/Unable to get an exclusive opening of the database ^a.", db_path);
			goto finish_transaction;
		     end;
		else db_open = "1"b;
	     end;

/* delete all data for each relation in the database */

	call ioa_ ("^/^a ^d ^a ^a", "Opening version",
	     mrds_path_info.mrds_version, "database:", db_path);

	do rel_num = 1 by 1 to model_relations.nrels
	     while (error_code = 0);

	     rel_name = model_relations (rel_num).relation_name;
	     call mrds_dsl_delete (dbi,
		"-range (x " || rel_name || ") -select x", error_code);
	     if error_code = mrds_error_$tuple_not_found then
		error_code = 0;			/* 0 tuples OK */

	end;

	if error_code ^= 0
	then call com_err_ (error_code, caller_name,
		"^/Unable to delete all tuples from the relation ^a for the database ^a.",
		rel_name, db_path);
	else call ioa_ ("^/Data deletion complete, closing database.");

finish_transaction:
	mftxn_code = error_code;

%include mrds_finish_transaction;

	if mftxn_code ^= 0 & mftxn_code ^= error_code	/* don't report the same error twice */
	then call com_err_ (mftxn_code, caller_name, "^/Unable to finish transaction");

exit_delete_data:
	return;

should_rollback: proc () returns (bit (1));

	return ("0"b);

     end should_rollback;

restore_significant_data: proc;

	return;

     end restore_significant_data;


     end delete_data;

clean_up:
     procedure ();

/* close the model, and database, if open */

	if data_model_ptr = null () then
	     ;
	else do;
		call mrds_dm_close (data_model_ptr, discard);
		data_model_ptr = null ();
	     end;

	if ^db_open then
	     ;
	else do;
		call mrds_dsl_close (dbi, discard);
		db_open = "0"b;
	     end;

	if area_ptr ^= null () then do;
		call release_temp_segment_ (caller_name, area_ptr, discard);
		area_ptr = null ();
	     end;

	recursive_call = "0"b;

     end;

	declare abs_path		 char (200);	/* absolute pathname of model or submodel */
	declare all_relations	 bit (1);		/* on => do all rels in view */
	declare answer		 char (4) varying;	/* answer from command query */
	declare area_ptr		 ptr;		/* points to work space */
	declare arg		 char (arg_len) based (arg_ptr); /* input argument */
	declare arg_count		 fixed bin;	/* current arg under inspection */
	declare arg_len		 fixed bin (21);	/* lengh of input arg */
	declare arg_ptr		 ptr;		/* points to input argument */
	declare args_finished	 bit (1);		/* on => all args seen, or error */
	declare caller_name		 char (32) init ("unpopulate_mrds_db") int static
				 options (constant);/* name of calling routine */
	declare cleanup		 condition;	/* signaled upon quit/release */
	declare any_other		 condition;
	declare com_err_		 entry options (variable); /* reports errors */
	declare command_query_	 entry options (variable); /* quieries caller */
	declare cu_$af_arg_count	 entry (fixed bin, fixed bin (35)); /* gets arg count/call type */
	declare cu_$arg_ptr		 entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
						/* gets Nth arg */
	declare data_model_ptr	 ptr;		/* pointer to data model */
	declare db_open		 bit (1);		/* on => database is open */
	declare db_path		 char (168);	/* database absolute path */
	declare dbi		 fixed bin (35);	/* database opening index */
	declare discard		 fixed bin (35);	/* ignored error code */
	declare error_code		 fixed bin (35);	/* error status encoding */
	declare error_table_$bad_arg	 fixed bin (35) ext;/* null input arg */
	declare error_table_$badopt	 fixed bin (35) ext;/* unknown control arg */
	declare error_table_$insufficient_access fixed bin (35) ext;
						/* user not DBA */
	declare error_table_$noarg	 fixed bin (35) ext;/* missing argument */
	declare error_table_$not_act_fnc fixed bin (35) ext; /* should get this normally */
	declare error_table_$wrong_no_of_args fixed bin (35) ext; /* not minimum of 1 arg */
	declare force_control	 bit (1);		/* on => dont query user  */
	declare get_temp_segment_	 entry (char (*), ptr, fixed bin (35));
						/* gets temp segs */
	declare command_query_info_ptr ptr;		/* points to query info */
	declare ioa_		 entry options (variable); /* does output display */
	declare mode		 fixed bin init (2);/* for model info retrieval */
	declare mrds_dm_authorization$get_user_class
				 entry (char (*), ptr, fixed bin, ptr, fixed bin (35));
						/* detects DBA */
	declare mrds_dm_close	 entry (ptr, fixed bin (35)); /* closes data model */
	declare mrds_dm_get_relations	 entry (ptr, ptr, ptr, fixed bin (35));
						/* gets rel names */
	declare mrds_dm_open	 entry (char (168), fixed bin, ptr, fixed bin (35));
						/* opens model */
	declare mrds_dsl_close	 entry options (variable); /* closes databases */
	declare mrds_dsl_delete	 entry options (variable); /* delete mrds db tuples */
	declare mrds_dsl_get_version$get_path_info
				 entry (char (*), ptr, fixed bin, ptr, fixed bin (35));
	declare mrds_dsl_open	 entry options (variable); /* opens a database through model or submodel */
	declare mrds_error_$duplicate_opt fixed bin (35) ext; /* path arg given > 1 time */
	declare mrds_error_$no_recursion fixed bin (35) ext; /* recursion not allowed */
	declare mrds_error_$tuple_not_found fixed bin (35) ext; /* not tuples in rel */
	declare nargs		 fixed bin;	/* number of arguments presented */
	declare path_seen		 bit (1);		/* on => path name argument given */
	declare recursive_call	 bit (1) int static init ("0"b); /* on => attempt to use recursion */
	declare rel_name		 char (32);	/* current relation */
	declare rel_num		 fixed bin;	/* relation loop index */
	declare release_temp_segment_	 entry (char (*), ptr, fixed bin (35));
						/* gets rid of temp segs */
	declare sub_error_		 condition;	/* from dsl_ entries for added info */
	declare sys_info$max_seg_size	 fixed bin (35) ext;/* largest segment */
	declare work_area		 area (sys_info$max_seg_size) based (area_ptr);
						/* space for temp storage */
	declare (addr, empty, null, substr, rtrim, fixed, rel) builtin;

%include mdbm_db_model;
%page;
%include mrds_model_relations;
%page;
%include query_info;
%page;
%include mrds_opening_modes_;
%page;
%include mrds_path_info;
%page;
%include mrds_authorization;

     end;
