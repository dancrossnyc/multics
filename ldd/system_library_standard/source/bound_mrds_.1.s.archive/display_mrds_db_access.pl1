/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

display_mrds_db_access: dmdba: dmda: procedure ();

/* DESCRIPTION:

   This command will display the Multics acls, MRDS access, and  the
   effective result of these two access controls, on both a relation
   and attribute basis for a given view of a  database  provided  by
   either a model or submodel opening of it. It accepts the pathname
   that would be used in that opening. Any order  can  be  used  for
   path  and  control  arguments,  with  the control arguments being
   over-ridable, the last  one  taking  effect.  However,  the  path
   argument  must  precede the -relation option. If the database has
   been secured, then mrds/effective access use  the  r-a-m-d  modes
   for  display, otherwise version 4 databases use the r-e-w multics
   acls for display. If relation names exceed 50, or attribute names
   exceed  40  characters,  the  display  will truncate them at that
   length.

*/

/* PARAMETERS:

   path - - (input) char(*), the relative or absolute pathname of  a
   database  model  or submodel, whose view is to be used, and whose
   access controls are to be employed in determing the access to  be
   displayed.  The  user  must  have the access to actually open the
   referenced database in  order  to  obtain  view  information  and
   access  modes.  Only  one  pathname may be given, and must appear
   before any -relation option.

   ===========

   optional control arguments:

   -brief, specifies the short form  of  the  display  This  may  be
   overiden with a subsequent -long.

   -long, specifies the verbose form of the  display  this  includes
   multics and mrds access in addition to effective access. This can
   be overiden with a subsequent -brief. The -long  control  is  the
   default.

   -relation rel_name1 ...  rel_nameN  specifies  that  only  listed
   relations  acl's  be  displayed This argument must come after the
   pathname. If two -relation controls are given, the  last  one  is
   used. The default is to display all relations in the given view.

*/

/* HISTORY:

   81-04-06 Jim Gray : originally coded

   81-07-16 Jim Gray : added add name dmdba

   83-01-18  Roger Lackey : added mrds_error_$no_model_submodel to handle
   the case where mrds_dsl_get_version$get_path_info
   returns mrds_error_$no_database.  Also declared undeclared variables.


*/

	if recursive_call then do;			/* we can't allow recursion because of dsl_$open */
		error_code = mrds_error_$no_recursion;
		call com_err_ (error_code, caller_name, "^/^a",
		     "A release or a start must be done before continuing.");
	     end;
	else do;

/* initialize */

		error_code = 0;
		db_index = 0;
		area_ptr = null ();
		long_format = "1"b;			/* default to -long option */
		all_relations = "1"b;		/* default to showing all relations in the view */
		path_seen = "0"b;
		call cu_$af_arg_count (nargs, error_code); /* make sure we weren't called as an active function */
		if error_code ^= error_table_$not_act_fnc then
		     call com_err_ (error_code, caller_name, "^/^a",
			"Command called as an active function, or unable to obtain argument count.");
		else do;

			error_code = 0;
			on cleanup call clean_up ();
			recursive_call = "1"b;	/* prevent recursion */

/* check for a good call */

			if nargs < 1 then do;
				error_code = error_table_$wrong_no_of_args;
				call com_err_ (error_code, caller_name, "^/^a",
				     "Usage:  dmdba  path  {-brief|-long} {-relation rel_name1 ... rel_nameN}");
			     end;
			else do;

/* get some work space */

				call get_temp_segment_ (caller_name, area_ptr, error_code);
				if error_code ^= 0 then
				     call com_err_ (error_code, caller_name, "^/^a",
					"Unable to get a temp segment.");
				else do;

					area_ptr -> work_area = empty ();

/* gather all the arguments */

					arg_count = 1;
					args_finished = "0"b;
					do while (^args_finished);

/* get this argument, and decide if it is a control argument or not */

					     call cu_$arg_ptr (arg_count, arg_ptr, arg_len, error_code);
					     if error_code ^= 0 then do;
						     args_finished = "1"b;
						     call com_err_ (error_code, caller_name, "^/^a ^d",
							"Unable to get argument number", arg_count);
						end;
					     else do;

/* check for a null argument */

						     if arg_len < 1 then do;
							     args_finished = "1"b;
							     error_code = error_table_$bad_arg;
							     call com_err_ (error_code, caller_name, "^/^a ^d",
								"A null character string was detected for argument number", arg_count);
							end;
						     else do;

/* control arguments begin with a hyphen */

							     if substr (arg, 1, 1) = "-" then
								call process_control_arg ();
							     else call process_path_arg ();

							end;

/* advance to the next argument */

						     if arg_count < nargs then
							arg_count = arg_count + 1;
						     else args_finished = "1"b;

						end;

					end;

/* check that we got a  pathname argument */

					if error_code = 0 then do;

						if ^path_seen then do;
							error_code = error_table_$noarg;
							call com_err_ (error_code, caller_name, "^/^a",
							     "No pathname argument was given.");
						     end;

/* go display the requested access */

						else call display_access ();

					     end;
				     end;

			     end;


/* clean up after finishing */

			call clean_up ();

		     end;

	     end;

	return;

process_control_arg: procedure ();

/* routine to determine if user has given one of the legal
   control arguments of brief, long, or relation REL_NAME
   and to save the corresponding information.
   The logic is such as to allow duplicate control arguments
   to override each other, with the last given taking effect. */

/* BRIEF */

	if arg = "-brief" | arg = "-bf" then do;
		long_format = "0"b;			/* use short display format */
	     end;

/* LONG */

	else if arg = "-long" | arg = "-lg" then do;
		long_format = "1"b;			/* use verbose display format */
	     end;

/* UNKNOWN */

	else if arg ^= "-relation" then do;
		args_finished = "1"b;
		error_code = error_table_$badopt;
		call com_err_ (error_code, caller_name, "^/^a^a^a",
		     "The control argument """, arg, """ is not supported by this command.");
	     end;

/* BAD ORDER */

	else if ^path_seen then do;
		args_finished = "1"b;
		error_code = error_table_$noarg;
		call com_err_ (error_code, caller_name, "^/^a",
		     "The pathname argument did not appear before the ""-relation"" option.");
	     end;
	else do;

/* RELATION LIST */

		last_relation_seen = "0"b;
		some_relation_seen = "0"b;
		all_relations = "0"b;		/* only do the given relations */
		last_relation_ptr, relation_list_ptr = null ();
		arg_count = arg_count + 1;
		relation_list_length = 0;

/* go through all relation names given */

		do while (^last_relation_seen);

		     call cu_$arg_ptr (arg_count, arg_ptr, arg_len, error_code);
		     if error_code ^= 0 then do;
			     args_finished, last_relation_seen = "1"b;
			     call com_err_ (error_code, caller_name, "^/^a ^d",
				"Unable to get the relation name in argument", arg_count);
			end;
		     else if arg_len < 1 then do;
			     args_finished, last_relation_seen = "1"b;
			     error_code = error_table_$bad_arg;
			     call com_err_ (error_code, caller_name, "^/^a ^d",
				"A null character string was detected for agument number", arg_count);
			end;
		     else if substr (arg, 1, 1) = "-" then do;
			     last_relation_seen = "1"b; /* end of list of relation names */
			     arg_count = arg_count - 1; /* reset for processining remaining args */
			end;
		     else do;

/* first relation name seen */

			     some_relation_seen = "1"b;

/* gather this name for the list */

			     relation_name_length_init = arg_len;
			     allocate relation set (relation_ptr) in (work_area);
			     relation.name_length = relation_name_length_init;
			     relation.name = arg;	/* remember this relation's name */

/* add the name at the end of the list to maintain order */

			     relation.next = null ();
			     if last_relation_ptr = null () then
				relation_list_ptr = relation_ptr;
			     else last_relation_ptr -> relation.next = relation_ptr;
			     last_relation_ptr = relation_ptr;
			     relation_list_length = relation_list_length + 1;

/* advance to the next name given */

			     if arg_count < nargs then
				arg_count = arg_count + 1;
			     else last_relation_seen = "1"b;

			end;

		end;

/* check that at least one name was given */

		if ^some_relation_seen & error_code = 0 then do;
			args_finished = "1"b;
			error_code = error_table_$noarg;
			call com_err_ (error_code, caller_name, "^/^a",
			     "No relation name(s) given with the ""-relation"" control argument.");
		     end;

	     end;

     end;

process_path_arg: procedure ();

/* routine to verify the database model path or submodel path
   argument, that supplies the view for access information.
   Only one path argument is allowed */

	if path_seen then do;

/* duplicate path name arguments given */

		args_finished = "1"b;
		error_code = mrds_error_$duplicate_opt;
		call com_err_ (error_code, caller_name, "^/^a ^a",
		     "The pathname argument was given more than once:", arg);
	     end;
	else do;

/* first pathname seen */

		path_seen = "1"b;

/* check for a valid path to a model or submodel */

		call mrds_dsl_get_version$get_path_info (arg, area_ptr,
		     mrds_path_info_structure_version, mrds_path_info_ptr, error_code);
		if mrds_path_info_ptr = null () then
		     abs_path = arg;
		else abs_path = mrds_path_info.absolute_path;
		if error_code ^= 0 then do;
			if error_code = mrds_error_$no_database then
			     error_code = mrds_error_$no_model_submodel;

			args_finished = "1"b;
			call com_err_ (error_code, caller_name, "^/^a^a^a",
			     "Unable to find database information using the path """, abs_path, """.");
		     end;

/* check for a supported version model/submodel,
   old version database will not work unless they had been
   opened for exclusive update at least one,
   and if there are any other old version databases already open. */

		else if (mrds_path_info.type.model | mrds_path_info.type.submodel) &
			mrds_path_info.mrds_version < 4 then do;
			args_finished = "1"b;
			error_code = mrds_error_$version_not_supported;
			call com_err_ (error_code, caller_name, "^/^a^a^a",
			     "The path """, abs_path,
			     """ is to a database or submodel of version less than 4.");
		     end;
		else do;

/* good path, use it to get an opening index */

			call mrds_dsl_open (abs_path, db_index, retrieval_mode, error_code);
			if error_code ^= 0 then do;
				args_finished = "1"b;
				call com_err_ (error_code, caller_name, "^/^a^a^a",
				     "The database could not be opened to obtain view information using the path """,
				     abs_path, """.");
			     end;
			else do;

/*  get resultant model pointers */

				call mu_database_index$get_resultant_model_pointer (db_index, dbcb_ptr);
				if dbcb_ptr = null () then do;
					args_finished = "1"b;
					error_code = mrds_error_$invalid_db_index; /* logic error if this happens */
					call com_err_ (error_code, caller_name, "^/^a",
					     "Program LOGIC ERROR, database opening index gave null resultant model pointer.");
				     end;
				else do;

					rdbi_ptr = dbcb.rdbi_ptr;
				     end;

			     end;

		     end;
	     end;

     end;

display_access: procedure ();

/* routine to display the relation and attribute
   access details for the given view supplied by the caller
   first, get the access info for all relations in this view */

	call mrds_dsl_get_relation_list (db_index, area_ptr,
	     mrds_relation_list_structure_version, mrds_relation_list_ptr, error_code);
	if error_code ^= 0 then
	     call com_err_ (error_code, caller_name, "^/^a^a^a",
		"Unable to get the relation information using the path """, abs_path, """.");
	else do;

/* output details for the verbose format */

		if long_format then do;
			call ioa_ ("^/Database path:  ^a^/^6xversion:  ^d",
			     rm_db_info.db_path, rm_db_info.db_version);
			if rm_db_info.mdbm_secured then
			     call ioa_ ("^16xDatabase is in a secure state.");
			if dbcb.dsm_sw then
			     call ioa_ ("^/Submodel path:  ^a^/^6xversion:  ^d",
				rm_db_info.sm_path, rm_db_info.sm_version);
			call ioa_ ("^/Relation  Attribute^4-System^-MRDS^-Effective"); /* output header */
		     end;

/* gather attribute access information for each relation
   in the path provided view specified by the user,
   or only the subset in his relation list */

		if all_relations then
		     relation_count = mrds_relation_list.num_rels_in_view;
		else relation_count = relation_list_length;

		do i = 1 to relation_count while (error_code = 0);

		     if all_relations then do;
			     j = i;		/* use definition order */
			     found = "1"b;
			end;
		     else do;

/* make sure we have a good relation name from the user's -relation option
   by finding the relation name in the rmds_relation_list array */

			     if i = 1 then
				relation_ptr = relation_list_ptr;
			     else relation_ptr = relation.next;

			     found = "0"b;
			     done = "0"b;
			     j = 1;
			     do while (^done);	/* find the value of j to use */

				if relation.name = mrds_relation_list.relation (j).submodel_name then
				     done, found = "1"b;
				else if j < mrds_relation_list.num_rels_in_view then
				     j = j + 1;
				else done = "1"b;
			     end;

			     if ^found then
				call ioa_ ("^/^a^a^a", /* non-fatal error, keep going */
				     "The relation name """, relation.name,
				     """ is unknown in this view of the database.");
			end;

		     if found then do;

/* get the attribute access info for this relation */

			     call mrds_dsl_get_attribute_list (db_index,
				rtrim (mrds_relation_list.relation (j).submodel_name),
				area_ptr, mrds_attribute_list_structure_version, mrds_attribute_list_ptr, error_code);
			     if error_code ^= 0 then
				call com_err_ (error_code, caller_name, "^/^a^a^a",
				     "Unable to obtain the attribute access information for relation """,
				     mrds_relation_list.relation (j).submodel_name, """.");
			     else do;

/* good relation and attribute access info obtained,
   now we can display it according to the long/brief options
   NOTE: relation names longer than 50, and attribute
   names longer than 40 characters are truncated to that length
   This is done to get all info on one "screen" width, for the more common shorter names.
   first, output the relation access */

				     if long_format then
					call ioa_ ("^/^50a^1x^2a^-^1x^2a^-^2x^2a",
					     mrds_relation_list.relation (j).submodel_name, /* output rel name and it's access */
					     mrds_relation_list.relation (j).system_acl,
					     mrds_relation_list.relation (j).mrds_access,
					     mrds_relation_list.relation (j).effective_access);
				     else call ioa_ ("^/^50a^1x^2a",
					     mrds_relation_list.relation (j).submodel_name,
					     mrds_relation_list.relation (j).effective_access);

/* display all attributes for this relation */

				     do k = 1 to mrds_attribute_list.num_attrs_in_view;

					if long_format then
					     call ioa_ ("^-^40a^1x^2a^-^1x^2a^-^2x^2a",
						mrds_attribute_list.attribute (k).submodel_name,
						mrds_attribute_list.attribute (k).system_acl,
						mrds_attribute_list.attribute (k).mrds_access,
						mrds_attribute_list.attribute (k).effective_access);
					else call ioa_ ("^-^40a^1x^2a", mrds_attribute_list.attribute (k).submodel_name,
						mrds_attribute_list.attribute (k).effective_access);
				     end;
				end;
			end;
		end;
	     end;
     end;

clean_up: procedure ();

/* routine to clean up after a quit-release or an error */

	if area_ptr ^= null () then do;
		call release_temp_segment_ (caller_name, area_ptr, discard);
		area_ptr = null ();
	     end;

	if db_index ^= 0 then do;
		call mrds_dsl_close (db_index, discard);
		db_index = 0;
	     end;

	recursive_call = "0"b;

     end;

	declare abs_path		 char (200);	/* absolute pathname of model or submodel */
	declare all_relations	 bit (1);		/* on => do all rels in view */
	declare area_ptr		 ptr;		/* points to work space */
	declare arg		 char (arg_len) based (arg_ptr); /* input argument */
	declare arg_count		 fixed bin;	/* current arg under inspection */
	declare arg_len		 fixed bin (21);	/* lengh of input arg */
	declare arg_ptr		 ptr;		/* points to input argument */
	declare args_finished	 bit (1);		/* on => all args seen, or error */
	declare caller_name		 char (32) init ("display_mrds_db_access") int static options (constant); /* name of calling routine */
	declare cleanup		 condition;	/* signaled upon quit/release */
	declare com_err_		 entry options (variable); /* reports errors */
	declare cu_$af_arg_count	 entry (fixed bin, fixed bin (35)); /* gets arg count/call type */
	declare cu_$arg_ptr		 entry (fixed bin, ptr, fixed bin (21), fixed bin (35)); /* gets Nth arg */
	declare db_index		 fixed bin (35);	/* database opening index */
	declare discard		 fixed bin (35);	/* ignored error code */
	declare done		 bit (1);		/* loop control for relation name search */
	declare mrds_dsl_close	 entry options (variable); /* closes databases */
	declare mrds_dsl_open	 entry options (variable); /* opens a database through model or submodel */
	declare error_code		 fixed bin (35);	/* error status encoding */
	declare error_table_$bad_arg	 fixed bin (35) ext;/* null input arg */
	declare error_table_$badopt	 fixed bin (35) ext;/* unknown control arg */
	declare error_table_$noarg	 fixed bin (35) ext;/* missing argument */
	declare error_table_$not_act_fnc fixed bin (35) ext; /* should get this normally */
	declare error_table_$wrong_no_of_args fixed bin (35) ext; /* not minimum of 1 arg */
	declare found		 bit (1);		/* on => known relation name supplied, and it's index found */
	declare get_temp_segment_	 entry (char (*), ptr, fixed bin (35)); /* gets temp segs */
	declare i			 fixed bin;	/* current count of relations displayed */
	declare ioa_		 entry options (variable); /* does output display */
	declare j			 fixed bin;	/* index into the relation_list structure */
	declare k			 fixed bin;	/* index into the attribute_list structure */
	declare last_relation_ptr	 ptr;		/* points to last relation in list */
	declare last_relation_seen	 bit (1);		/* on => exit relation name loop */
	declare long_format		 bit (1);		/* on => display all access info */
	declare mu_database_index$get_resultant_model_pointer entry (fixed bin (35), ptr); /* gets r-model ptr from index */
	declare mrds_dsl_get_attribute_list entry (fixed bin (35), char (*),
				 ptr, fixed bin, ptr, fixed bin (35)); /* gets attrs in view of rel */
	declare mrds_dsl_get_relation_list entry (fixed bin (35), ptr, fixed bin, ptr, fixed bin (35)); /* gets rels in view */
	declare mrds_dsl_get_version$get_path_info entry (char (*), ptr, fixed bin, ptr, fixed bin (35));
	declare mrds_error_$duplicate_opt fixed bin (35) ext; /* path arg given > 1 time */
	declare mrds_error_$invalid_db_index fixed bin (35) ext; /* caused by logic error */
	declare mrds_error_$no_database fixed bin (35) ext static;
	dcl     mrds_error_$no_model_submodel fixed bin (35) ext static;
	declare mrds_error_$no_recursion fixed bin (35) ext; /* recursion not allowed */
	declare mrds_error_$version_not_supported fixed bin (35) ext; /* not version 4 db */
	declare nargs		 fixed bin;	/* number of arguments presented */
	declare path_seen		 bit (1);		/* on => path name argument given */
	declare recursive_call	 bit (1) int static init ("0"b); /* on => attempt to use recursion */
	declare relation_count	 fixed bin;	/* number of relations to be displayed */
	declare relation_list_length	 fixed bin;	/* number of relations in -relation list  */
	declare relation_list_ptr	 ptr;		/* points to head of relation list */
	declare relation_name_length_init fixed bin (21); /* initial value for name length allocation */
	declare relation_ptr	 ptr;		/* points to relation list element */
	declare release_temp_segment_	 entry (char (*), ptr, fixed bin (35)); /* frees temp segs */
	declare retrieval_mode	 fixed bin int static options (constant) init (1); /* lowest opening mode */
	declare some_relation_seen	 bit (1);		/* on => at least one relation name given */
	declare sys_info$max_seg_size	 fixed bin (35) ext;/* largest segment */
	declare work_area		 area (sys_info$max_seg_size) based (area_ptr); /* space for temp storage */
	declare (addr, empty, fixed, null, rel, substr, rtrim) builtin;
	declare 1 relation		 based (relation_ptr), /* saved relation name for -relation options */
		2 next		 ptr,		/* points to next in list */
		2 name_length	 fixed bin (21),	/* length of the relation name */
		2 name		 char (relation_name_length_init refer (relation.name_length)); /* relation's name */

%include mrds_dbcb;
%page;
%include mdbm_rm_db_info;
%page;
%include mrds_path_info;
%page;
%include mrds_relation_list;
%page;
%include mrds_attribute_list;
%page;

     end;
