/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */



display_mrds_db_status: dmdbs: proc;


/*
   .                       BEGIN_DESCRIPTION
   This commands provides the DBA with  (semi)  current  information
   about  the  status  of a data base obtained from the dbc segment.
   The information about dead processes reflects status  as  of  the
   last time the data base was opened.
   .                       END_DESCRIPTION
*/

/*
   .                       HISTORY
   Written by Oris Friesen, Summer 1978.

   Modified by Al Kepner, Feb  14,  1979  to  improve  diagnosis  of
   invalid control arguments.

   Modified by Al Kepner, Feb 14, 1979 to  accomodate  MR7.0  fscope
   mechanism.

   Modified by Jim Gray - - 21-June-80, to return no model,  instead
   of no model/submodl error message.

   80-12-08 Jim Gray : changed scope  mode  display  to  handle  r-u
   modes   for   version   4   dbc,  and  new  read/modify_attr  and
   append/delete_tuple  modes  for  version  5  dbc   and   fil_list
   structures.  It  also  can  now  get a pointer to either "dbc" or
   "db,control" named segment for finding the dbc structure. This is
   done   via   the  new  mu_concurrency_control$get_control_segment
   routine. Also added dbc structure version to header output.

   80-12-12 Jim Gray : Improved control  arg  information  in  usage
   message.

   81-01-31      Jim      Gray      :       added       use       of
   mrds_dsl_get_version$get_path_info,  and new interface overcoming
   short comings of the dsl_$get_db_version interface.

   81-02-03 Jim Gray :  changed  format  of  output  display  to  be
   arranged with the colons columnized for easier reading.

   81-02-04 Jim Gray : made default display  equivalent  to  Lindsey
   Spratt's  -terse  option,  that displays things that are not in a
   normal state, with info inbetween the -brief and -long option.

   81-02-11 Jim Gray : extended, to allow submodel paths to be given
   to this command, in which case, the actual db path is gotten from
   the submodel header, and only the relations in the submodel  view
   have their scope modes shown.

   81-02-12 Jim Gray : added check to see that when the database  is
   in  the  secured  state,  that if the user is not a DBA, that his
   path given is to a submodel residing in the  submodel  dir  under
   the database.

   81-06-03 Davids: changed the  calls  of  mrds_dsm_dsmd$*  to  the
   appropriate mrds_dsm_* calls, also changed the corresponding data
   structures (user interface to internal mrds interface).  Modified
   the  call  dmdbs_v1 to occur only if the input path was that of a
   version 3 datamodel and to report an error if it was a  submodel,
   (v1   does   not  support  submodels).  Removed  declarations  of
   unreferenced variables.

   82-05-07 Woodka: Changed to indicate if database is inconsistent,
   and give an appropriate error message. Changed to indicate if the
   trouble switch is set.

   82-07-01  Roger Lackey : Modified the calls to mu_db_inconsistent to use
   mdbm_util_$inconsistent_* for binding.

   83-06-21 Davids: Removed check for old version database and the call
   to v1 code if it was an old version db (old version dbs can no longer
   be opened)
*/

	num_filns = 0;
	user_flag, proc_flag, brief_flag, long_flag = "0"b;

/* BEGIN CHANGE 81-02-11 ********************************************** */

	submodel_open, db_model_open = "0"b;
	area_ptr = null ();

	on cleanup call clean_up ();

	call get_temp_segment_ (caller_name, area_ptr, code);
	if code ^= 0 then do;
		area_ptr = null ();
		call clean_up ();
		call com_err_ (code, caller_name, "^/^a",
		     "Unable to get a temporary segment.");
		return;
	     end;

	area_ptr -> work_area = empty ();

/* END CHANGE 81-02-11 ********************************************** */

	call cu_$arg_count (nargs);

	if nargs < 1 then do;
		call com_err_ (0, caller_name,
		     "^/Usage:  display_mrds_db_status db_path {-bf|-lg} {-proc_id PID|-user PERSON}");
		call clean_up ();
		return;

	     end;

	db_dir = copy (" ", 168);
	call cu_$arg_ptr (1, dbp_ptr, dbp_len, code);	/* get data base path */
	if code ^= 0 then do;
		call com_err_ (code, caller_name, "data base pathname");
						/* exit with com_err_ message */
		call clean_up ();
		return;

	     end;

/* BEGIN CHANGE 81-01-31 *************************************************** */

	in_path = dbp;
	call mrds_dsl_get_version$get_path_info (in_path, area_ptr,
	     mrds_path_info_structure_version, mrds_path_info_ptr, code);

	if mrds_path_info_ptr = null () then
	     db_path = in_path;
	else db_path = mrds_path_info.absolute_path;

	if code ^= 0 then do;
		if code = mrds_error_$no_model_submodel then
		     code = mrds_error_$no_database;
		call com_err_ (code, caller_name, "^/^a", dbp);
		call clean_up ();
		return;

	     end;

/* BEGIN CHANGE 81-02-11 **************************************************** */

	submodel = "0"b;
	if mrds_path_info.type.submodel then do;

/* if submodel path given, need to get real db path,
   then a list of relations available in this view of the db */

		sm_abs_path = db_path;

		call mrds_dsm_open$read (sm_abs_path, submodel_iocb_ptr, code);
						/* path is really to submodel */
		if code ^= 0 then do;
			call com_err_ (code, caller_name, "^/^a ^a",
			     "Unable to open the submodel:", sm_abs_path);
			call clean_up ();
			return;

		     end;

		submodel_open = "1"b;		/* remember, so clean up can close */

/* now get the real db path from the submodel header */

		call mrds_dsm_read_header$db_path (submodel_iocb_ptr, db_path, code);
		if code ^= 0 then do;
			call com_err_ (code, caller_name, "^/^a ^a",
			     "Unable to get the header for the submodel:", sm_abs_path);
			call clean_up ();
			return;

		     end;

		call mrds_dsm_get_relation_names (area_ptr, mrds_dsm_relation_names_ptr, submodel_iocb_ptr, code);
		if code ^= 0 then do;
			call com_err_ (code, caller_name, "^/^a ^a",
			     "Unable to get the list for relations for the submodel:", sm_abs_path);
			call clean_up ();
			return;
		     end;

/* get the details on the real db */

		call mrds_dsl_get_version$get_path_info (db_path, area_ptr,
		     mrds_path_info_structure_version, mrds_path_info_ptr, code);
		if mrds_path_info_ptr = null () then ;
		else db_path = mrds_path_info.absolute_path;

		if code ^= 0 then do;
			call com_err_ (code, caller_name, "^/^a ^a",
			     "Unable to get information on the database path:", db_path);
			call clean_up ();
			return;

		     end;

		submodel = "1"b;			/* rememeber we started with a submodel */

	     end;

/* END CHANGE 81-02-11 **************************************************** */

/* END CHANGE 81-01-31 ***************************************************** */

/* BEGIN CHANGE 81-02-12 *************************************************** */

/* check for a secured database */

	call mrds_dm_open (db_path, 2 /* retrieval mode */,
	     data_model_ptr, code);
	if code ^= 0 then do;
		call com_err_ (code, caller_name, "^/^a ^a",
		     "Unable to open the data model for database:", db_path);
		call clean_up ();
		return;
	     end;

	db_model_open = "1"b;			/* remember for clean up */

	call mrds_dm_db_secured$get_secured_status (data_model_ptr, area_ptr,
	     database_state_structure_version, database_state_ptr, code);
	if code ^= 0 then do;
		call com_err_ (code, caller_name, "^/^a ^a",
		     "Unable to get the secured state for the database:", db_path);
		call clean_up ();
		return;
	     end;

	if ^database_state.secured then ;
	else do;

/* secure database, check the user class - DBA or peon */

		call mrds_dm_authorization$get_user_class (rtrim (db_path), area_ptr,
		     mrds_authorization_structure_version, mrds_authorization_ptr, code);
		if code ^= 0 then do;
			call com_err_ (code, caller_name, "^/^a ^a",
			     "Unable to get the user class for the database:", db_path);
			call clean_up ();
			return;
		     end;

		if mrds_authorization.administrator then ;
		else do;

/* user is a peon, not a DBA, check that he is using a secured submodel */

			if ^submodel then
			     secured_submodel = "0"b;
			else do;			/* submodel path given */

				call expand_pathname_ (sm_abs_path, sm_dir, sm_name, code);
				if code ^= 0 then do;
					call com_err_ (code, caller_name, "^/^a ^a",
					     "Unable to expand the submodel pathname:", sm_abs_path);
					call clean_up ();
					return;
				     end;

				secured_submodel = mrds_dm_secured_submodel (db_path, sm_dir, sm_name);

			     end;

/* not secured submodel, tell user and get out */

			if ^secured_submodel then do;
				if ^submodel then
				     call com_err_ (mrds_error_$inc_secure_open, caller_name, "^/^a^a^a ^a",
					"The database """, db_path, """ has been secured,",
					"but the caller is not a DBA, and must use a submodel to reference it.");
				else call com_err_ (mrds_error_$inc_secure_open, caller_name, "^/^a^a^a^a^a  ^a^a^a",
					"The submodel """, sm_abs_path, """ refers to a database """,
					db_path, """ that has been secured,",
					"but the submodel itself is not in the databases inferior directory """,
					mrds_data_$submodel_dir_name, """.");

				call clean_up ();
				return;
			     end;

		     end;

	     end;

/* END CHANGE 81-02-12 ************************************************* */

	call expand_pathname_ (db_path, db_dir, db_ent, code);
	if code ^= 0
	then do;
		call com_err_ (code, caller_name, "^a", dbp);
						/* call clean_up () ;
						   return to command level */ call clean_up ();
		return;

	     end;

	if length (rtrim (db_path)) > 164
	then do;
		call com_err_ (error_table_$pathlong, caller_name, "^a", db_path);
		call clean_up ();
		return;

	     end;

	if nargs >= 2 then do;

		call cu_$arg_ptr (2, arg_ptr, arg_len, code);
		if arg = "-brief" | arg = "-bf"
		then brief_flag = "1"b;

		else if arg = "-long" | arg = "-lg"
		then long_flag = "1"b;

		else if arg = "-proc_id" | arg = "-pid"
		then proc_flag = "1"b;

		else if arg = "-user"
		then user_flag = "1"b;
		else do;
			call com_err_ (error_table_$badopt, caller_name, """^a""", arg);
			call clean_up ();
			return;

		     end;
	     end;

	call mu_concurrency_control$get_control_segment (db_path, dbc_ptr, dbc_bit_count, code);
	if code ^= 0 then do;
		call com_err_ (code, caller_name, "^/^a", "Unable to get a pointer to the database control segment.");
		call clean_up ();
		return;

	     end;


	call mdbm_util_$inconsistent_get_info (data_model_ptr, incon_value, incon_name, incon_message, undo_request);
						/* get consistency information */


	hdr.message = incon_message;
						/* set inconsistency message */
	if hdr.message = " "
	then hdr.message = "No reason for the inconsistency was given ";

	if ^user_flag & ^proc_flag
	then call db_report;			/* report is driven by contents of data base control segment */
	else call user_report;			/* report is driven by user name or by process id...
						   either of which are supplied by command string */

	call clean_up ();




	return;
db:  entry;
	dcl     dbs		 bit (1) int static init ("0"b);
	dbs = ^dbs;
	return;

db_report: proc;

	hdr.dbp = db_path;
	if long_flag then
	     call ioa_ ("^/Concurrency control version:  ^d", dbc.version);
	call ioa_ ("^13xData base path:  ^a", hdr.dbp);
	if long_flag then
	     call ioa_ ("^20xVersion:  ^d", mrds_path_info.mrds_version);
	if incon_value then
	     hdr.state = "Inconsistent";
	else hdr.state = "Consistent";
	if long_flag | incon_value then
	     call ioa_ ("^22xState:  ^a", hdr.state);
	if incon_value then
	     call ioa_ ("^21xReason:  ^a", hdr.message);

	if dbc.trouble_switch then
	     hdr.switch = "trouble switch on";
	else hdr.switch = "trouble switch off";
	if long_flag | dbc.trouble_switch then
	     call ioa_ ("^13xTrouble Switch:  ^a", hdr.switch);


	if dbc.quiesce_sw | dbc.quiesce_db | dbc.quiesce_files
	then do;
		go to quiesce_case (fixed (substr (string (dbc.flags), 3, 3)));
quiesce_case (1):	;
		call ioa_$nnl ("^30xQuiesce request queued for selected files");
		goto end_quiesce_case;

quiesce_case (2):	;
		call ioa_$nnl ("^30xQuiesce request queued");
		goto end_quiesce_case;

quiesce_case (3):	;
		call ioa_$nnl ("^30xInvalid combination of quiesce flags");
		goto end_quiesce_case;

quiesce_case (4):	;
		call ioa_$nnl ("^30xInvalid combination of quiesce flags");
		goto end_quiesce_case;

quiesce_case (5):	;
		call ioa_$nnl ("^30xData base is quiesced for selected files");
		goto end_quiesce_case;

quiesce_case (6):	;
		call ioa_$nnl ("^30xData base is quiesced");
		goto end_quiesce_case;

quiesce_case (7):	;
		call ioa_$nnl ("^30xInvalid combination of quiesce flags");
		goto end_quiesce_case;

end_quiesce_case:	;
		if live_process (dbc.quiesce_lock) | (dbc.quiesce_lock = "0"b)
		then call ioa_ (".");
		else call ioa_ (" by a dead process.");
		if dbs then do;
			call ioa_ ("db: Quiesce lock_id = ^12o", fixed (dbc.quiesce_lock));
		     end;
	     end;
	if dbc.dead_proc_flag
	then call ioa_ ("^15xAvailability:  Active scope set by dead process");
	hdr.nopen = dbc.open_users;
	call ioa_ ("^17xOpen users:  ^d", hdr.nopen);
	if dbc.open_users > 0 then do;
		hdr.nact = dbc.active_users;
		hdr.npact = dbc.wakeup_waiters;
		hdr.nwait = dbc.waiting_users;

		call ioa_ ("^/^16xScope users:  ^d  Active", hdr.nact);
		if long_flag | hdr.npact > 0 then
		     call ioa_ ("^30x^d  Awakening", hdr.npact);
		if long_flag | hdr.nwait > 0 then
		     call ioa_ ("^30x^d  Queued", hdr.nwait);
	     end;
	if ^brief_flag | long_flag then do;

		ul_ptr = convert (dbc_ptr, dbc.open_users_ofs);

		do idx = 1 to hdr.nopen while (ul_ptr ^= null);
		     call do_user;
		     ul_ptr = convert (dbc_ptr, user_list.next_open_ofs);
		end;
	     end;
     end db_report;

user_report: proc;

/* this report format is driven by user supplied arguments
   consisting of user names and/or process ids
*/


	arg_count = 3;
	do while (arg_count <= nargs);

	     call cu_$arg_ptr (arg_count, arg_ptr, arg_len, code);
	     if code ^= 0 then do;
		     call com_err_ (code, caller_name, "argument nbr ^d", arg_count);
		     call clean_up ();
		     return;

		end;

	     if user_flag then do;
		     found = "0"b;
		     comp_len = index (arg, "*") - 1;	/* eliminate anything following and including an asterisk */
		     if comp_len <= 0 then comp_len = arg_len;
		     ul_ptr = convert (dbc_ptr, dbc.open_users_ofs);

		     comp_ptr = addr (user_list.group_id);
		     do while (ul_ptr ^= null);
			if before (arg, "*") = addr (user_list.group_id) -> comp_string
			then do;
				call do_user;
				found = "1"b;
			     end;

			ul_ptr = convert (dbc_ptr, user_list.next_open_ofs);
		     end;

		     if ^found then do;
			     call com_err_ (mrds_error_$user_not_found, caller_name, "^a", arg);
			     call clean_up ();
			     return;

			end;

		end;				/* end of processing for a given user name */
	     else if proc_flag then do;
		     found = "0"b;
		     call ascii_to_bit (arg, bit_var);	/* convert process id from ascii string to bit string */
		     ul_ptr = convert (dbc_ptr, dbc.open_users_ofs);
		     do while (ul_ptr ^= null & ^found);/* halt after first one is found...
						   cannot be duplicate process ids */
			if bit_var = user_list.process_id then do;
				call do_user;
				found = "1"b;
			     end;
			ul_ptr = convert (dbc_ptr, user_list.next_open_ofs);
		     end;

		     if ^found then do;
			     call com_err_ (mrds_error_$process_not_found, caller_name, "^a", arg);
			     call clean_up ();
			     return;

			end;
		end;				/* end of processing for a given process id */

	     else do;
		     call com_err_ (error_table_$badopt, caller_name, "^a", "control arg");
		     call clean_up ();
		     return;

		end;

	     ok = "0"b;
	     if arg_count < nargs then do while (^ok);
						/* get next control arg */
		     call cu_$arg_ptr (arg_count + 1, arg_ptr, arg_len, code);
		     if code ^= 0 then do;
			     call com_err_ (code, caller_name, "^a", "control arg");
			     call clean_up ();
			     return;

			end;

		     if arg = "-bf" | arg = "-brief" | arg = "-lg" | arg = "-long"
		     then arg_count = arg_count + 1;	/* ignore */
		     else ok = "1"b;
		end;
	     if arg_count >= nargs then return;
	     if arg = "-user" then do;
		     user_flag = "1"b;
		     proc_flag = "0"b;
		end;
	     else if arg = "-proc_id" | arg = "-pid" then do;
		     proc_flag = "1"b;
		     user_flag = "0"b;
		end;
	     else do;
		     call com_err_ (error_table_$badopt, caller_name, """^a""", arg);
		     call clean_up ();
		     return;

		end;
	     arg_count = arg_count + 2;

/* now go back up and get a name */
	end;
						/* have reached end of command string */

     end user_report;

do_user: proc;

	usr.id = user_list.group_id;
	call ioa_ ("^/^12xUser process id:  ^a", usr.id);
	call bit_to_ascii (user_list.process_id, usr.pid);
	if long_flag | user_flag | proc_flag then
	     call ioa_ ("^13xProcess number:  ^a", usr.pid);
	if ^brief_flag then do;
		if user_list.dead_proc
		then usr.state = "Dead";
		else if live_process (user_list.db_lock_id)
		then usr.state = "Alive";
		else usr.state = "Dead";
		if long_flag | user_flag | proc_flag | usr.state = "Dead" then
		     call ioa_ ("^14xProcess state:  ^a", usr.state);
		usr.mode = "";
		if user_list.open_mode = mdbm_data_$normal_mode then usr.mode = "Normal";
		else if user_list.open_mode = mdbm_data_$quiesce_mode then usr.mode = "Quiesce";
		if long_flag | user_flag | proc_flag | usr.mode ^= "Normal" then
		     call ioa_ ("^17xUsage mode:  ^a", usr.mode);
		if dbs then do;
			call ioa_ ("db: lock_id = ^12o", fixed (user_list.db_lock_id));
			call ioa_ ("db: ul_ptr = ^p", ul_ptr);
		     end;

		if user_list.open_mode < 3 then do;	/* only for shared openings */
			if user_list.active_sw then do;
				usr.scope = "Active";
				if user_list.queue_activ then usr.activate = "Queue";
				else usr.activate = "Normal";
				if long_flag | user_flag | proc_flag then
				     call ioa_ ("^22xScope:  ^a", usr.scope);
				if long_flag | user_flag | proc_flag | usr.activate = "Queue" then
				     call ioa_ ("^17xActivation:  ^a", usr.activate);
			     end;

			else if user_list.waiting_sw then do;
				usr.scope = "Waiting";
				if user_list.priority_high then usr.pri = "High";
				else pri = "Normal";
				usr.allow = user_list.allowance_count;
				usr.bypass = user_list.bypass_count;
				call ioa_ ("^22xScope:  ^a", usr.scope);
				call ioa_ ("^19xPriority:  ^a", usr.pri);
				if user_list.dead_proc_conflict
				then call ioa_ ("^13xConflict state:  Blocked by dead process");

				call ioa_ ("^12xAllowance count:  ^d", usr.allow);
				call ioa_ ("^15xBypass count:  ^d", usr.bypass);
			     end;

			else if long_flag | user_flag | proc_flag then do;
						/* no scope is currently in effect and none has been requested */
				usr.scope = "None";
				call ioa_ ("^22xScope:  ^a", usr.scope);
			     end;
		     end;

		if user_list.open_mode < 3 then do;	/* only for shared openings */

			if ^submodel then do;

				fl_ptr = convert (dbc_ptr, user_list.fil_list_ofs);

				if fl_ptr ^= null () then do;
					call ioa_ ("^/^19xRelation^27xPermits^3xPrevents^/");
				     end;

				do while (fl_ptr ^= null);
				     fila.name = fil_list.name;
				     call display_permits_prevents ();

				     fl_ptr = convert (dbc_ptr, fil_list.next_ofs);
				end;
			     end;

/* BEGIN CHANGE 81-02-11 *************************************************** */

			else do;			/* submodel path supplied, only show relations in users view */

/* look up each relation in the submodel view, in the dbc relation list */

				code = 0;
				header_output = "0"b;
				do i = 1 to mrds_dsm_relation_names.nrels while (code = 0);

/* get the model name for this submodel relation */

				     call mrds_dsm_read_relation (mrds_dsm_relation_names.relation (i),
					area_ptr, str_ptr, submodel_iocb_ptr, code);
				     if code ^= 0 then do;
					     call com_err_ (code, caller_name, "^/^a ^a",
						"Unable to get the model name for submodel relation:",
						mrds_dsm_relation_names.relation (i));
					     call clean_up ();
					     return;
					end;

/* find the relation in the scope list */

				     done = "0"b;
				     fl_ptr = convert (dbc_ptr, user_list.fil_list_ofs);
				     do while (^done);
					if fl_ptr = null () then
					     done = "1"b;
					else if fil_list.name = str_ptr -> relation_block.dm_rel_name then
					     done = "1"b;
					else fl_ptr = convert (dbc_ptr, fil_list.next_ofs);

				     end;

				     if fl_ptr = null () then ; /* scope not set for this rel */
				     else do;

/* output the scope display, using the submodel name */

					     fila.name = mrds_dsm_relation_names.relation (i);

					     if header_output then ;
					     else do;
						     header_output = "1"b;
						     call ioa_ ("^/^19xRelation^27xPermits^3xPrevents^/");
						end;

					     call display_permits_prevents ();

					end;

				end;


			     end;

		     end;

/* END CHANGE 81-02-11 ******************************************************* */

	     end;
     end do_user;

display_permits_prevents: procedure ();

/* routine to display permitted/prevented scope modes for this file/relation,
   with the  modes presented based on the version of the dbc structure */

	permit_string, prevent_string = "";		/* init */

	if dbc.version ^= 4 & dbc.version ^= 5 then do;
		call com_err_ (mrds_error_$version_not_supported, caller_name,
		     "^/^a ^d", "Unknown database control segment version =", dbc.version);
		call clean_up ();
		return;

	     end;

	else if dbc.version = 4 then do;

/* old r-u mode version dbc permits */

		if fil_list.permits.read_attr then
		     permit_string = "r";
		if fil_list.permits.update then
		     permit_string = permit_string || "u";
		if permit_string = "" then
		     permit_string = "n";

/* r-u prevents */

		if fil_list.prevents.read_attr then
		     prevent_string = "r";
		if fil_list.prevents.update then
		     prevent_string = prevent_string || "u";
		if prevent_string = "" then
		     prevent_string = "n";

	     end;

/* for version 5 dbc structures, display the new form of the r-s-m-d scope modes
   These are now read_attr-append_tuple-modify_attr-delete_tuple, in order
   to be consistent with the submodel security MRDS acl keywords. */

	else do;					/* new version 5 dbc, r-s-m-d modes */

		if fil_list.permits.read_attr then
		     permit_string = permit_string || "r";

		if fil_list.permits.append_tuple then
		     permit_string = permit_string || "a";

		if fil_list.permits.modify_attr then
		     permit_string = permit_string || "m";

		if fil_list.permits.delete_tuple then
		     permit_string = permit_string || "d";

		if permit_string = "" then do;
			permit_string = "n";
		     end;

/* r-s-m-d prevent modes */

		if fil_list.prevents.read_attr then
		     prevent_string = prevent_string || "r";

		if fil_list.prevents.append_tuple then
		     prevent_string = prevent_string || "a";

		if fil_list.prevents.modify_attr then
		     prevent_string = prevent_string || "m";

		if fil_list.prevents.delete_tuple then
		     prevent_string = prevent_string || "d";

		if prevent_string = "" then do;
			prevent_string = "n";
		     end;


	     end;

/* output the constructed mode strings */

	call ioa_ ("^21x^32a^3x^4a^6x^4a", fila.name, permit_string, prevent_string);



	declare (permit_string, prevent_string) char (128) varying; /* mode display  temp strings */
	declare mrds_error_$version_not_supported fixed bin (35) ext; /* not known dbc version */

     end;

ascii_to_bit: proc (asc, bit_var);

/* convert ascii representation of octal number to bit string */

	dcl     asc		 char (*);	/* octal number in ascii */
	dcl     charr		 (12) char (1) unal based (ch_ptr); /* array of ascii characters representing an octal id */
	dcl     ch_ptr		 ptr;		/* ptr to character array */
	dcl     bit_var		 bit (36) varying;	/* result bit string */
	dcl     i			 fixed bin;	/* index variable */

	dcl     1 nine_bit		 unal based,	/* structure of bits for each ascii character */
		2 fill		 bit (6) unal,	/* bits to be discarded */
		2 last_3		 bit (3) unal;	/* relevant bits in each ascii character */

	bit_var = ""b;				/* initialize */
	ch_ptr = addr (asc);

	do i = 1 to 12;
	     if length (asc) + i <= 12
	     then bit_var = bit_var || "000"b;		/* take care of missing leading zeroes */

	     else bit_var = bit_var || addr (charr (i)) -> nine_bit.last_3;

	end;

     end ascii_to_bit;

bit_to_ascii: proc (bits, asc);

/* convert a 12 octal digit to ascii representation */

	dcl     bits		 bit (36) unal;	/* input bit string */
	dcl     asc		 char (12);	/* output ascii representation of octal string */
	dcl     thr_bit_asc		 (36) bit (3) unal based; /* three bit array for ascii string */
	dcl     thr_bit_bit		 (12) bit (3) unal based; /* three bit array for bit string */
	dcl     i			 fixed bin;

	asc = "000000000000";			/* initialize with ocatl sixties */
	do i = 1 to 12;
	     addr (asc) -> thr_bit_asc (3 * i) = addr (bits) -> thr_bit_bit (i);
	end;

     end bit_to_ascii;

convert: proc (a_ptr, ofs) returns (ptr);

/* this procedure function converts an offset from "0"b to null
   or from the offset value to a pointer value within the segment denoted by a_ptr
*/

	dcl     result		 ptr;		/* the reultant pointer value */
	dcl     a_ptr		 ptr;		/* ptr to the segment to which the offset refers */
	dcl     ofs		 bit (18) unal;	/* the bit offset */

	dcl     (null, ptr)		 builtin;

	if ofs ^= NULL_OFS
	then result = ptr (a_ptr, ofs);
	else result = null;

	return (result);

     end convert;

live_process: proc (lock_id) returns (bit (1));

/* This function returns "1"b if the lock_id (input parameter)
   corresponds to a live process.  Otherwise "0"b is returned. */
	l = lock_id;
	call set_lock_$lock (l, 0, icode);
	return (icode = error_table_$lock_wait_time_exceeded |
	     icode = error_table_$locked_by_this_process);
	dcl     icode		 fixed bin (35);
	dcl     l			 bit (36) aligned;
	dcl     lock_id		 bit (36) aligned parm;
     end live_process;

/* BEGIN CHANGE 81-02-11 ************************************************* */

clean_up: procedure ();

/* routine to close any open submodel, or model
   and get rid of temp storage space */

	if submodel_open then do;

		call mrds_dsm_close$force (submodel_iocb_ptr);
		submodel_open = "0"b;

	     end;

	if area_ptr ^= null then do;

		call release_temp_segment_ (caller_name, area_ptr, discard);

		area_ptr = null ();

	     end;

	if db_model_open then do;

		call mrds_dm_close (data_model_ptr, discard);

		db_model_open = "0"b;

		data_model_ptr = null ();

	     end;

     end;

/* END CHANGE 81-02-11 *********************************************** */

	dcl     (user_flag,				/* denotes -user option */
	        proc_flag,				/* denotes -process_id or -pid option */
	        brief_flag,				/* denotes -brief option */
	        long_flag,				/* denotes -long option */
	        found)		 bit (1) unal init ("0"b); /* a user_list entry was found if ON */

	dcl     (nargs,				/* nbr of aruments passed by user */
	        dbp_len,				/* length of data base pathname */
	        comp_len,				/* length of group_id compare string */
	        arg_count,				/* nbr of arguments processed */
	        arg_len)		 fixed bin;	/* length of each argument */

	dcl     code		 fixed bin (35);	/* status code */
	dcl     idx		 fixed dec (6);	/* index */

	dcl     (comp_ptr,				/* ptr to group_id compare string */
	        arg_ptr,				/* ptr to control arg */
	        dbp_ptr)		 ptr;		/* ptr to data base pathname */


	dcl     db_dir		 char (168);	/* containing directory pathname of the data base */
	dcl     db_ent		 char (32);	/* entry name of the data base */

	dcl     in_path		 char (168);	/* db pathname suitable for passing */
	dcl     db_path		 char (168);	/* absolute pathname of data base */

	dcl     arg		 char (arg_len) based (arg_ptr);
	dcl     dbp		 char (dbp_len) based (dbp_ptr);



	dcl     1 hdr,				/* report data for the data base control segment */
		2 dbp		 char (168),	/* data base pathname expanded */
		2 state		 char (24),	/* data base state: consistent or not consistent */
		2 message		 char (500),	/* explanation of data base state if inconsistent */
		2 switch		 char (24),	/* status of the trouble switch */
		2 nopen		 fixed dec (6),	/* nbr of users with data base currently open */
		2 nact		 fixed dec (6),	/* nbr users with scopes currently in effect */
		2 npact		 fixed dec (6),	/* nbr users awakened but not yet with active scope */
		2 nwait		 fixed dec (6);	/* nbr users queued waiting for a scope setting */


	dcl     1 usr,				/* report data for each open user of data base */
		2 id		 char (32),	/* group id of the user */
		2 pid		 char (12),	/* process id of the user */
		2 mode		 char (19),	/* open mode : r, u, er, eu */
		2 state		 char (5),	/* dead process or is it alive */
		2 scope		 char (7),	/* active, waiting or in between scope usage */
		2 pri		 char (6),	/* normal or high priority */
		2 activate	 char (6),	/* was user activated from set_scope or from queue */
		2 allow		 fixed dec (6),	/* allowance count of bypasses */
		2 bypass		 fixed dec (6);	/* nbr times user was bypassed */


	dcl     1 fila,
		2 name		 char (32),	/* name of file which has a scope set */
		2 prm		 char (2) unal,	/* permit scope: n or combination of r and u */
		2 prv		 char (2) unal;	/* prevent scope: n or combination of r and u */


	dcl     1 three_bits	 aligned,
		2 one_bit		 bit (1) unal init ("0"b), /* structure for binary representation of scope bits */
		2 two_bit		 bit (2) unal;

	dcl     ok		 bit (1) unal;	/* ON => control arg is ok */

	dcl     comp_string		 char (comp_len) based (comp_ptr); /* group_id to be compared, without the asterisks */

	dcl
	        bit_var		 bit (36) varying;	/* process id string */

	dcl     (addr,
	        null,
	        before,
	        length,
	        fixed,
	        index,
	        copy,
	        empty,
	        rel,
	        rtrim,
	        string,
	        substr)		 builtin;

	dcl     ioa_		 entry options (variable);
	dcl     ioa_$nnl		 entry options (variable);
	declare expand_pathname_	 entry (char (*), char (*), char (*), fixed bin (35));
	dcl     com_err_		 entry options (variable);
	dcl     cu_$arg_count	 entry (fixed bin);
	dcl     cu_$arg_ptr		 entry (fixed bin, ptr, fixed bin, fixed bin (35));
	declare mrds_dsl_get_version$get_path_info entry (char (*), ptr, fixed bin, ptr, fixed bin (35)); /* get path details */
	dcl     set_lock_$lock	 entry (bit (36) aligned, fixed bin, fixed bin (35));
	dcl     sys_info$max_seg_size	 fixed bin ext;

	dcl     mdbm_data_$normal_mode fixed bin ext;
	dcl     mdbm_data_$quiesce_mode fixed bin ext;

	dcl     mrds_error_$user_not_found fixed bin (35) ext;
	declare mrds_error_$no_database fixed bin (35) ext; /* no model */
	declare dbc_bit_count	 fixed bin (24);	/* unused */
	declare mu_concurrency_control$get_control_segment entry (char (168), ptr, fixed bin (24), fixed bin (35)); /* gets control seg ptr */
	dcl     mdbm_util_$inconsistent_get_info entry (ptr, bit (1) unal, char (*), char (*), char (*));
						/* gets consistency status for database */
	dcl     incon_value		 bit (1);		/* true ==> db is inconsistent */
	dcl     incon_name		 char (32);	/* name of request associated with the message */
	dcl     incon_message	 char (500);	/* explanation of inconsistency */
	dcl     undo_request	 char (100);	/* request that will make db consistent */
	dcl     caller_name		 char (32) init ("display_mrds_db_status"); /* name of calling routine */
	dcl     mrds_error_$no_model_submodel fixed bin (35) ext; /* path not to mrds object */
	declare str_ptr		 ptr;		/* points to submodel relation info */
	declare submodel		 bit (1);		/* on => submodel pathname given */
	declare (get_temp_segment_, release_temp_segment_) entry (char (*), ptr, fixed bin (35)); /* gets/returns temp storage */
	declare submodel_open	 bit (1);		/* on => submodel currently open */
	declare work_area		 area (sys_info$max_seg_size) based (area_ptr); /* temp storage */
	declare area_ptr		 ptr;		/* to temp storage */
	declare cleanup		 condition;
	declare discard		 fixed bin (35);	/* unused error code */
	declare done		 bit (1);		/* on => name found in model concurrency list */
	declare header_output	 bit (1);		/* on => header for permits/prevents output */
	declare i			 fixed bin;	/* loop index */
	declare data_model_ptr	 ptr;		/* pointer to database model */
	declare mrds_dm_db_secured$get_secured_status entry (ptr, ptr, fixed bin, ptr, fixed bin (35)); /* gets secured bit */
	declare mrds_dm_open	 entry (char (168), fixed bin, ptr, fixed bin (35)); /* open database model */
	declare mrds_dm_close	 entry (ptr, fixed bin (35)); /* closes database model */
	declare mrds_dm_authorization$get_user_class entry (char (*), ptr, fixed bin, ptr, fixed bin (35)); /* finds if user a DBA */
	declare mrds_dm_secured_submodel entry (char (*), char (*), char (*)) returns (bit (1)); /* returns true if submodel in sm dir */
	dcl     mrds_dsm_close$force	 entry (ptr);
	dcl     mrds_dsm_get_relation_names entry (ptr, ptr, ptr, fixed bin (35));
	dcl     mrds_dsm_open$read	 entry (char (*), ptr, fixed bin (35));
	dcl     mrds_dsm_read_header$db_path entry (ptr, char (168), fixed bin (35));
	dcl     mrds_dsm_read_relation entry (char (*), ptr, ptr, ptr, fixed bin (35));
	dcl     submodel_iocb_ptr	 ptr init (null ());
	declare mrds_data_$submodel_dir_name char (16) ext; /* name of submodel dir */
	declare mrds_error_$inc_secure_open fixed bin (35) ext; /* attempt to open thru non-secure submodel */
	declare secured_submodel	 bit (1);		/* on => submodel in submodel dir */
	declare sm_name		 char (32);	/* entryname of submodel */
	declare sm_dir		 char (168);	/* containing dir of submodel */
	declare sm_abs_path		 char (168);	/* absolute path to submodel */
	declare db_model_open	 bit (1);		/* on => database model opened */
	dcl     mrds_error_$process_not_found fixed bin (35) ext;

	dcl     error_table_$badopt	 fixed bin (35) ext;
	dcl     error_table_$locked_by_this_process fixed bin (35) ext;
	dcl     error_table_$lock_wait_time_exceeded fixed bin (35) ext;
	dcl     error_table_$pathlong	 fixed bin (35) ext;

%include mdbm_dbc;
%page;
%include mdbm_users;
%page;
%include mrds_path_info;
%page;
%include mrds_dsm_rel_block;
%page;
%include mrds_dsm_relation_names;
%page;
%include mrds_database_state;
%page;
%include mrds_authorization;


     end display_mrds_db_status;
