/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* HISTORY:

   Originally written by Jim Gray - - August 1979

*/

set_mrds_temp_dir: smtd: procedure ();

/* DESCRIPTION:

   this is a command level interface, that is used to
   set the value of a pathname to a directory that will be
   used for temporary storage needed by the resultant database
   model created during database open time.
   normally the process directory is used for this temporary
   storage, but for large databases, a directory with more quota
   may be required, thus the need for this interface to
   specify that directory, and override the [pd] default.
   NOTE: the temp dir may be changed between calls to mrds_dsl_open.
*/

/* PARAMETERS:

   relative_path - - (input) the pathname, relative or absolute,
   of the directory under which temporary storage is to be placed.

   error_messages - - (output) via com_err_ in case a problem is discovered
   with the given pathname.

*/

/* check for correct number of arguments */

	call cu_$arg_count (nargs);
	if nargs ^= 1 then
	     call com_err_ (error_table_$wrong_no_of_args, caller_name, "^/^a ^d ^a",
		"The number of arguments =", nargs, "was not 1, the temporary directory pathname.");
	else do;

/* get the pathname argument */

		call cu_$arg_ptr (1, arg_ptr, arg_len, error_code);
		if error_code ^= 0 then
		     call com_err_ (error_code, caller_name, "^/^a",
			"Unable to obtain the temporary directory pathname argument.");
		else do;

/* pathname obtained, use the subroutine entry to set it */

			on sub_error_ ;		/* ignore sub_err_ messages */

			call mrds_dsl_resultant_storage$set (relative_path, error_code);
			if error_code = 0 then ;
			else call com_err_ (error_code, caller_name, "^/^a^a^a",
				"Unable to set the temporary directory to the pathname """, relative_path, """.");

		     end;

	     end;

	declare com_err_		 entry options (variable); /* reports errors */
	declare mrds_dsl_resultant_storage$set entry (char (*), fixed bin (35)); /* sets  temp dir */
	declare sub_error_		 condition;	/* signaled by calls to sub_err_ in set routine */
	declare error_code		 fixed bin (35);	/* error status encoding */
	declare caller_name		 char (20) init ("set_mrds_temp_dir"); /* name of calling routine */
	declare cu_$arg_count	 entry (fixed bin); /* gets number of arguments */
	declare cu_$arg_ptr		 entry (fixed bin, ptr, fixed bin (21), fixed bin (35)); /* gets char(*) argument */
	declare arg_ptr		 ptr;		/* points to relative path argument */
	declare arg_len		 fixed bin (21);	/* length of input argument */
	declare relative_path	 char (arg_len) based (arg_ptr); /* temp dir path input */
	declare nargs		 fixed bin;	/* current arg count */
	declare error_table_$wrong_no_of_args fixed bin (35) ext; /* arg count not 1 */

     end;
