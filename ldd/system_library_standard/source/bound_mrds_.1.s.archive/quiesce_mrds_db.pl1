/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* *******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* HISTORY:

   Originally written by Jim Gray - - May 1980

   80-12-14 Jim Gray : improved "unable to quiesce" error message.

   81-01-27 Jim Gray : added use of  dsl_$get_path_info  to  replace
   deficiencies   of   dsl_$get_version.   Also   added   usage   of
   dmd_$get_user_class as part of the DBA proposal implementation.

   81-04-29 Jim Gray : changed  declaration  of  work_area  size  to
   depend   on   the   current   value   of  mrds_data_$max_dbs  for
   extensibility.

   82-05-19 Mike Kubicar : Changed to permit only one database to be
   quiesced  per  command  invocation.   Also  removed all traces of
   quiesing files.

   82-06-24 Mike Kubicar : Changed conversion of -wait_time arguments
   so that it is compatible with the way it's done in
   rmdb_rq_ready_db.  This raises the maximum legal wait time and
   makes the error messages a little more friendly.

   84-10-19 Paul Benjamin : Added quiesce_db and unquiesce_db which are mmi_
   entrypoints.

   84-10-23 Paul Benjamin : Enabled size checking for one statment so that the
   change of 82-06-24 actually works.

*/

quiesce_mrds_db: qmdb: procedure ();

/* DESCRIPTION:

		      BEGIN_DESCRIPTION 

   this routine is a command and subroutine interface to
   mu_quiesce$quiesce_quiet/free.  It's purpose is to quiesce
   databases, for such activities as database backup, that is to grab
   control of the database so that non-passive users can not access
   the database, or hamper it's integrity.  It has two options, the
   quiesce option with optional wait time argument, and the free
   option which must be called when the quiescer is finished.  Both
   take database path names as their primary arguments, with the
   default option for the command being quiesce.

		       END_DESCRIPTION

*/

/* PARAMETERS:

   database_path - - (input) the relative pathname of the database(s) to be quiesced,
   there may be up to mrds_data_$max_dbs paths given.
   However, currently the quiescing module mu_quiesce$mu_quiesce called thru mdbm_util_
   only accepts one database quiescing per process in one or multiple calls.

   -quiet - - (input) the quiesce option to this command,
   it need not be given, as it is the default.

   -free - - (input) the free option to this command, it must be given after a call
   to quiesce a database, -quiesce and -free are mutually exclussive.

   -wait_time,-wt time - - (input) the wait time in seconds that the caller
   wishes to wait to obtain a quiescing of all databases given.
   This control argument may not be given with the -free option.
   The time must be convertible to fixed bin(35).
   If this control arg is not given, it defaults to 0 seconds.
   (see mdbm_data_$quiesce_wait)

*/

/* start up */

	code = 0;
	command = ON;
	
/* check for the minimum number of arguments */
	call cu_$arg_list_ptr (main_proc_arg_ptr);
	call cu_$arg_count (nargs);
	if nargs < 1 then do;
		code = error_table_$wrong_no_of_args;
		call com_err_ (code, caller_name, "^/^a^/",
		     "Usage:  quiesce_mrds_db database_pathname {-quiet {-wait_time xx} | -free}");
	     end;
	else do;

/* initialize */

		quiet_seen, free_seen, wait_time_seen = OFF;
		quiesce_control = ON;		/* the default is to quiesce */
		quiesce_wait_time = mdbm_data_$quiesce_wait; /* set default wait time */
		number_of_paths = 0;		/* none seen yet */

/* gather all the database pathnames given */

		arg_count = 1;
		args_finished = OFF;
		do while (^args_finished);

/* get the relative pathname */

		     call cu_$arg_ptr (arg_count, arg_ptr, arg_len, code);
		     if code ^= 0 then do;
			     args_finished = ON;
			     call com_err_ (code, caller_name, "^/^a ^d",
				"Unable to get argument number", arg_count);
			end;
		     else do;

			     if arg_len < 1 then do;
				     args_finished = ON;
				     code = error_table_$bad_arg;
				     call com_err_ (code, caller_name, "^/^a ^d",
					"A null character string argument was detected for argument number", arg_count);
				end;
			     else if substr (arg, 1, 1) = "-" then /* control arg */

/* control argument */

				call process_control_arg ();
			     else do;

/* database pathname argument */

				     supplied_db_path = arg;
				     call process_db_path_arg ();

				end;

/* go on to the next argument */

			     if arg_count < nargs then
				arg_count = arg_count + 1;
			     else args_finished = ON;

			end;

		end;

		if code ^= 0 then ;
		else do;

/* save count of pathnames seen */

			if number_of_paths = 0 then do;
				code = error_table_$wrong_no_of_args;
				call com_err_ (code, caller_name, "^/^a",
				     "No database pathname was given.");
			     end;
			else do;

/* call quiet or free according to control args seen, with the quiesce structure */

				if quiesce_control then
				     call mu_quiesce$quiesce_quiet (db_path, quiesce_wait_time, code);
				else call mu_quiesce$quiesce_free (db_path, code);

				if code = 0 then ;
				else call com_err_ (code, caller_name, "^/^a ^a^a^a",
					"Unable to complete the quiescing process on the control segment",
					"using the database path """,
					db_path, """.");

			     end;

		     end;

	     end;

	return;

process_db_path_arg: procedure ();

/* BEGIN CHANGE 81-01-27 ************************************************ */
/* get the version of the database at the given path */

          code = 0;
	
	call mrds_dsl_get_version$get_path_info (supplied_db_path, addr (local_area),
	     mrds_path_info_structure_version, mrds_path_info_ptr, code);

	if mrds_path_info_ptr = null () then
	     db_path = supplied_db_path;
	else db_path = mrds_path_info.absolute_path;

	if code ^= 0 then do;
		args_finished = ON;
		if code = mrds_error_$no_model_submodel then
		     code = mrds_error_$no_database;
		if command 
		     then call com_err_ (code, caller_name, "^/^a^a^a",
		     "The path """, db_path, """ does not refer to a mrds database.");
	     end;
	else do;

/* make sure it isn't a submodel */

		if mrds_path_info.type.submodel then do;
		     if command then do;
			args_finished = ON;
			code = error_table_$badcall;
			call com_err_ (code, caller_name, "^/^a ^a",
			     "Data submodels are not supported by this command.  ", db_path);
		     end;
		     else code = mrds_error_$bad_model;
		     end;
		else do;

/* check for old version databases */

			if mrds_path_info.mrds_version <= 3 then do;
				args_finished = ON;
				code = mrds_error_$version_not_supported;
				if command
				     then call com_err_ (code, caller_name, "^/^a^a^a ^d ^a",
				     "The database path """, db_path, """ refers to an older version",
				     mrds_path_info.mrds_version,
				     "database which this command does not support.");
			     end;

			else do;

/* 	make sure the caller is a DBA */

				call mrds_dm_authorization$get_user_class (db_path, addr (local_area),
				     mrds_authorization_structure_version, mrds_authorization_ptr, code);
				if code ^= 0 then do;
					args_finished = ON;
					if command
					     then call com_err_ (code, caller_name, "^/^a^a^a",
					     "Unable to get user class for database """, db_path, """.");
				     end;
				else if ^mrds_authorization.administrator then do;
					args_finished = ON;
					code = error_table_$insufficient_access;
					if command
					     then call com_err_ (code, caller_name, "^/^a^a^a",
					     "The user must be a database adminstrator to perform this operation on database """,
					     db_path, """.");
				     end;

/* END CHANGE 81-01-27 ************************************************** */

				else if command
				     then do;

/* good new version database path found, save it */

					number_of_paths = number_of_paths + 1;
					if number_of_paths > 1 then do;
						args_finished = ON;
						code = error_table_$too_many_args;
						call com_err_ (code, caller_name,
						     "^/^a",
						     "Only one database pathname can be specified in this command.");
					     end;
				     end;
			     end;
		     end;
	     end;
     end;

process_control_arg: procedure ();

/* check for the control arg options of -quiet, -wait_time or -free */

/* QUIET */
	if arg = "-quiet" then do;
		if free_seen then do;
			quiet_seen = ON;
			args_finished = ON;
			code = error_table_$inconsistent;
			call com_err_ (code, caller_name, "^/^a",
			     "The -quiet and -free control arguments are mutually exclusive.");
		     end;
		else if ^quiet_seen then do;
			quiet_seen = ON;
			quiesce_control = ON;
		     end;
		else do;
			args_finished = ON;
			code = mrds_error_$duplicate_opt;
			call com_err_ (code, caller_name, "^/^a",
			     "The -quiet control argument was given more than once.");
		     end;
	     end;

/* FREE */
	else if arg = "-free" then do;
		if quiet_seen then do;
			free_seen = ON;
			args_finished = ON;
			code = error_table_$inconsistent;
			call com_err_ (code, caller_name, "^/^a",
			     "The -free and -quiet control arguments are mutually exclusive.");
		     end;
		else if ^free_seen then do;
			free_seen = ON;
			quiesce_control = OFF;
		     end;
		else do;
			args_finished = ON;
			code = mrds_error_$duplicate_opt;
			call com_err_ (code, caller_name, "^/^a",
			     "The -free control argument was given more than once.");
		     end;
	     end;

/* WAIT_TIME */
	else if arg = "-wait_time" | arg = "-wt" then do;
		if free_seen then do;
			wait_time_seen = ON;
			code = error_table_$inconsistent;
			args_finished = ON;
			call com_err_ (code, caller_name, "^/^a",
			     "The -wait_time and -free control arguments are mutually exclusive.");
		     end;
		else if wait_time_seen then do;
			code = mrds_error_$duplicate_opt;
			args_finished = ON;
			call com_err_ (code, caller_name, "^/^a",
			     "The -wait_time control argument was given more than once.");
		     end;
		else do;				/* get the wait time in seconds */
			wait_time_seen = ON;
			if arg_count >= nargs then do;
				args_finished = ON;
				code = error_table_$bad_arg;
				call com_err_ (code, caller_name, "^/^a",
				     "No time in seconds was given for the -wait_time control argument.");
			     end;
			else do;
				arg_count = arg_count + 1;
				call cu_$arg_ptr_rel (arg_count, arg_ptr, arg_len, code, main_proc_arg_ptr);
				if code ^= 0 then do;
					args_finished = ON;
					call com_err_ (code, caller_name, "^/^a",
					     "Unable to get the wait_time seconds argument.");
				     end;
				else if substr (arg, 1, 1) = "-" &
					(verify (arg, "+-.0123456789") ^= 0) then do;
					args_finished = ON;
					code = error_table_$badopt;
					call com_err_ (code, caller_name,
					     "^/No time in seconds was given for the -wait_time control argument.");
				     end;
				else do;
					on size begin;
						code = error_table_$item_too_big;
						call com_err_ (code, caller_name,
						     "^/The quiesce wait time must be no greater than 131071 seconds.");
						go to couldnt_convert;
end;
(size):					quiesce_wait_time = cv_dec_check_ (arg,
					     code);
					if code ^= 0 then do;
						args_finished = ON;
						code = error_table_$badopt;
						call com_err_ (code, caller_name,
						     "^/""^a"" following the -wait_time argument is not a positive integer.", arg);
					     end;
					if quiesce_wait_time < 0 then do;
						args_finished = ON;
						code = error_table_$badopt;
						call com_err_ (code, caller_name,
						     "^/The quiesce wait time must not be negative;  it was ^a.", arg);
					     end;

couldnt_convert:
					revert size;
				     end;
			     end;
		     end;
	     end;

/* UNKNOWN */
	else do;
		args_finished = ON;
		code = error_table_$bad_arg;
		call com_err_ (code, caller_name, "^/^a^a^a",
		     "The control argument """, arg, """, is not supported by this command.");
	     end;
     end;

quiesce_db:
     entry (sq_path, sq_wait, sq_code);
     
/* External subroutine interface for quiescing databases.  Expands and 
   validates the input database pathname and calls mu_$quiesce_quiet. */

dcl  sq_path char (168) parameter;			/* (input) database pathname */
dcl  sq_wait fixed bin (17) parameter;			/* (input) quiesce wait time */
dcl  sq_code fixed bin (35) parameter;			/* (output) status code */

     supplied_db_path = sq_path;
     quiesce_wait_time = sq_wait;
     command = OFF;
     call process_db_path_arg;
     if code ^= 0
	then do;
	sq_code = code;
	return;
     end;
     call mu_quiesce$quiesce_quiet (db_path, quiesce_wait_time, code);
     sq_code = code;
     return;

unquiesce_db:
     entry (sf_path, sf_code);
     
/* External subroutine interface for freeing quiesced databases.  Expands and 
   validates the input database pathname and calls mu_$quiesce_free. */

dcl  sf_path char (168) parameter;			/* (input) database pathname */
dcl  sf_code fixed bin (35) parameter;			/* (output) status code */

     supplied_db_path = sf_path;
     command = OFF;
     call process_db_path_arg;
     if code ^= 0
	then do;
	sf_code = code;
	return;
     end;
     call mu_quiesce$quiesce_free (db_path, code);
     sf_code = code;
     return;

	declare (addr, empty, null, substr, verify) builtin;
	declare error_table_$badopt	 fixed bin (35) ext;/* unknown options */
	declare (free_seen, quiet_seen, wait_time_seen) bit (1); /* duplicate control arg flags */
	declare error_table_$inconsistent fixed bin (35) ext; /* incompatible control args */
	declare mrds_error_$duplicate_opt fixed bin (35) ext; /* control arg given > 1 times */
	declare mrds_error_$no_database fixed bin (35) ext; /* no db model */
	declare error_table_$bad_arg	 fixed bin (35) ext;/* illegal argument */
	declare error_table_$too_many_args fixed bin (35) ext; /* more args than quiesce structure can handle */
	declare args_finished	 bit (1);		/* on => arg processing done */
	declare code		 fixed bin (35);	/* error status encoding */
	declare main_proc_arg_ptr	 ptr;		/* Pointer to argument list of main procedure */
	declare ON		 bit (1) int static options (constant) init ("1"b); /* true value */
	declare OFF		 bit (1) int static options (constant) init ("0"b); /* false value */
	declare error_table_$wrong_no_of_args fixed bin (35) ext; /* bad arg count */
	declare cu_$arg_list_ptr	 entry (ptr);
	declare cu_$arg_ptr_rel	 entry (fixed bin, ptr, fixed bin (21), fixed bin (35), ptr);
	declare cv_dec_check_	 entry (char (*), fixed bin (35)) returns (fixed bin (35));
	declare cu_$arg_ptr		 entry (fixed bin, ptr, fixed bin (21), fixed bin (35)); /* gets arg N */
	declare size		 condition;
	declare arg_count		 fixed bin;	/* current argument being looked at */
	declare arg		 char (arg_len) based (arg_ptr); /* current argument */
	declare arg_len		 fixed bin (21);	/* length of char string arg */
	declare arg_ptr		 ptr;		/* pointer to current arg */
	declare cu_$arg_count	 entry (fixed bin); /* gets argument count */
	declare nargs		 fixed bin;	/* total arg count */
	declare mu_quiesce$quiesce_quiet entry (char (168), fixed bin (17), fixed bin (35)); /* quiesces db */
	declare mu_quiesce$quiesce_free entry (char (168), fixed bin (35)); /* frees quiesced db */
	declare com_err_		 entry options (variable); /* reports errors */
	declare command		 bit (1);		/* ON = called as a command */
						/* OFF = called as a subroutine */
	declare db_path		 char (168);	/* absolute database pathname */
	declare supplied_db_path	 char (168);	/* path supplied by caller */
	declare mdbm_data_$quiesce_wait fixed bin (35) ext; /* default wait time */
	declare error_table_$item_too_big fixed bin (35) ext static; /* The item in question is larger than the largest legal value */
	declare error_table_$badcall	 fixed bin (35) ext;/* bad pathname syntax, submodel path given */
	declare quiesce_control	 bit (1);		/* on => call quiesce_quiet, the default */
	declare quiesce_wait_time	 fixed bin (17);	/* Time to wait on database */
	declare mrds_error_$version_not_supported fixed bin (35) ext; /* can't work with old versions */
	declare caller_name		 char (15) init ("quiesce_mrds_db"); /* name of calling routine */
	declare number_of_paths	 fixed bin;	/* db pathnames given in arg list */
	declare local_area		 area (1024);	/* space for path info and authorization structures */
	declare mrds_dsl_get_version$get_path_info entry (char (*), ptr, fixed bin, ptr, fixed bin (35)); /* gets db version */
	declare mrds_dm_authorization$get_user_class entry (char (*), ptr, fixed bin, ptr, fixed bin (35)); /* tells if user a DBA */
	declare error_table_$insufficient_access fixed bin (35) ext; /* process lacks access */
	declare mrds_error_$no_model_submodel fixed bin (35) ext; /* not a mrds path */
          declare mrds_error_$bad_model fixed bin(35) ext static; /* not a model */

%include mrds_authorization;

%include mrds_path_info;


     end;
