/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* procedure to store ptr value held in base register

   Initial Version: 24 July 1971 by BLW
	Modified: 13 February 1973 by RAB
	Modified: 11 June 1976 by RAB
	Modified: 29 March 1978 by PCK to allow sp to be stored
	Modified:	30 March 1980 by RAB for reference.(aligned padded)_for_store_ref.
		See prepare_operand for details.	*/

base_to_core: proc(p_base,var);

dcl	p_base fixed bin,
	var ptr;

dcl	(p,p1,q,q1) ptr,
	base fixed bin,
	update bit(1) aligned,
	dt fixed bin,
	state_man$flush_ref entry(ptr),
	base_man$update_base entry(fixed bin,ptr,fixed bin),
	store entry(ptr),
	expmac$zero entry(fixed bin(15)),
	load entry(ptr,fixed bin),
	(base_man$lock,base_man$unlock) entry(fixed bin),
	expmac entry(fixed bin(15),ptr),
	c_a entry(fixed bin,fixed bin) returns(ptr),
	expmac$two_eis entry(fixed bin(15),ptr,ptr);

dcl	(max,null) builtin;

dcl (	store_base(23:24,7)	init(61,409,622,623,624,625,533,		/* unpacked */
			     630,631,632,633,634,635,730),		/* packed */
	unpk_to_pk	init(407),
	move_bits		init(99),
	base_to_aq(6)	init(410,411,626,627,628,629)) fixed bin(15) int static;

%include reference;
%include symbol;
%include machine_state;
%include nodes;
%include data_types;
%include cgsystem;

	p = var;
	base = p_base;

	dt = p -> reference.data_type;

	update = "0"b;

	if base_regs(base).type > 0
	then if base_regs(base).type <= 2
	     then do;
		p1 = base_regs(base).variable;

		if p1 ^= null
		then if p1 -> node.type ^= reference_node
		     then p1 = null;

		if p = p1
		then if base_regs(base).type = 1
		     then if ^ p -> reference.shared
			then go to gs;
			else update = "1"b;
		     else;
		else if dt >= unpacked_ptr
		     then if p1 ^= null
			then if p1 -> reference.hit_zero
			     then update = "1"b;
		end;

	     else p1 = null;

	else do;
	     update = "1"b;
	     p1 = null;
	     end;
	call state_man$flush_ref(p);

	if update
	     then call base_man$update_base(1,p,base);

gs:
	q = p -> reference.symbol;

	/* following line is needed to allow initialization of file constants */

	if q -> symbol.temporary
	     then p -> reference.value_in.storage = "1"b;



	dt = max(dt,unpacked_ptr);

	if p -> reference.aligned_for_store_ref
	then do;
	     call base_man$lock(base);

	     call expmac((store_base(dt,base)),p);

	     call base_man$unlock(base);
	     return;
	     end;


	if p1 ^= null
	then if p1 -> reference.data_type = packed_ptr
	     then do;
		q1 = p1;
		if ^ p1 -> reference.temp_ref | p1 -> reference.value_in.storage
		     then go to l2;
		p1 -> reference.ref_count = p1 -> reference.ref_count + 1;
		p1 -> reference.value_in.storage = "1"b;
		go to l1;
		end;

	q1 = c_a(46,4);
	q1 -> reference.c_length = bits_per_word;

l1:	call expmac((store_base(packed_ptr,base)),q1);

l2:	if ^ q1 -> reference.shared
	     then q1 -> reference.ref_count = q1 -> reference.ref_count + 1;

	call expmac$two_eis((move_bits),p,q1);

	end;
