/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* This procedure is called by various code generator modules to obtain
   a reference node for temporary use.  A list of previously allocated
   nodes is maintained and each call returns the next node on the list.
   If the end of the list is reached, a new node is allocated.

   The program is initialized by the statement
	cg_stat$first_ref, cg_stat$next_ref = null;

   The list of reference nodes will be re-used starting at the begining,
   if the statement
	cg_stat$next_ref = cg_stat$first_ref;
   is executed.

   Initial Version:  3 Februrary 1971 by BLW
	Modified:	30 March 1980 by RAB for reference.(padded aligned)_for_store_ref.
		See prepare_operand for details.	*/

get_reference: proc returns(ptr);

dcl	(p,q) ptr,
	n fixed bin,
	(cg_stat$first_ref,cg_stat$next_ref,cg_stat$m_s_p) ptr ext,
	create_list entry(fixed bin) returns(ptr),
	create_reference entry(ptr) returns(ptr),
	(state_man$flush_ref,state_man$flush_address) entry(ptr);

dcl	(null,string) builtin;

%include list;
%include cg_reference;
%include boundary;

	if cg_stat$next_ref = null
	then do;
	     q = create_list(2);
	     p, q -> element(2) = create_reference(null);
	     q -> element(1) = cg_stat$first_ref;
	     cg_stat$first_ref = q;
	     goto l1;
	     end;

	q = cg_stat$next_ref;
	p = q -> element(2);
	cg_stat$next_ref = q -> element(1);

	p -> reference.offset,
	p -> reference.symbol,
	p -> reference.qualifier,
	p -> reference.length = null;

	p -> reference.c_offset,
	p -> reference.c_length,
	p -> reference.data_type = 0;

	p -> reference.value_in.storage = "0"b;
	p -> reference.store_ins = "0"b;

	if cg_stat$m_s_p ^= null
	then do;
	     if string(p -> reference.address_in.b) then call state_man$flush_address(p);
	     if string(p -> reference.value_in) then call state_man$flush_ref(p);
	     end;

l1:	string(p -> reference.bits) = "11"b;	/* padded, aligned */
	string(p -> reference.relocation) = "0"b;
	string(p -> reference.more_bits) = "0"b;

	p -> reference.padded_for_store_ref,
	p -> reference.aligned_for_store_ref = "1"b;

	p -> reference.c_f_offset = 0;

	p -> reference.units = word_;

	string(p -> reference.address) = "0000000000000000000000000001"b;	/* no_address */
	string(p -> reference.info) = "0"b;
	p -> reference.array_ref, p -> reference.varying_ref, p -> reference.shared = "0"b;

	p -> reference.ref_count = 1;

	return(p);

	end;
