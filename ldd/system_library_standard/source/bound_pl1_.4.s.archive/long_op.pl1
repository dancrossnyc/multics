/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* This procedure generates a jump to an out-of-line string operator,
   it loads	bp	with a pointer to the string
		q	with size of string
   before generating the jump

   Initial Version:  2 September 1971 by BLW for Version II
	Modified: 15 July 1972 by BLW	
	Modified:	15 February 1973 by RAB
	Modified:	11 June 1973 by RAB for EIS
	Modified:	26 November 1974 by RAB for long_op$one_eis
	Modified:	5 July 1976 by RAB to fix 1504	*/

long_op:	proc(pt,size,macro);

dcl	pt ptr,		/* ptr to reference node */
	size fixed bin,	/* = 0 means use size from reference node */
	macro fixed bin(15); /* operator to be generated */

dcl	cg_stat$extended_stack bit(1) ext;
dcl	cg_stat$text_pos fixed bin(18) ext;

dcl	(p,q) ptr,
	mac fixed bin(15),
	(no_size,have_arg,flush,adjust) bit(1),
	(i,n,cfo) fixed bin;

dcl	odd_bases bit(19) aligned int static init("0000000000000001111"b);

dcl	xr_man$load_var entry(ptr,fixed bin),
	xr_man$load_const entry(fixed bin,fixed bin),
	base_man$load_var entry(fixed bin,ptr,fixed bin),
	load_size entry(ptr),
	generate_constant$real_fix_bin_1 entry(fixed bin) returns(ptr),
	load entry(ptr,fixed bin),
	aq_man$lock entry(ptr,fixed bin),
	state_man$erase_reg entry(bit(19) aligned),
	state_man$unlock entry,
	need_temp entry(ptr,bit(2) aligned),
	expmac$zero entry(fixed bin(15)),
	(expmac,expmac$eis,expmac$one_eis) entry(fixed bin(15),ptr),
	adjust_ref_count entry(ptr,fixed bin),
	state_man$update_ref entry(ptr),
	base_man$update_base entry(fixed bin,ptr,fixed bin),
	c_a entry(fixed bin,fixed bin) returns(ptr);

dcl	mac_prog entry(fixed bin(15),ptr) variable;

dcl	(abs,mod,null) builtin;

dcl	ldfx1 fixed bin(15) int static init(7);

%include cgsystem;
%include reference;
%include data_types;

	p = pt;
	mac = macro;
	flush, no_size, have_arg = "0"b;

common:
l1:

/* load the string size if requested */


	if ^no_size
	     then if size = 0
		then call load_size(p);
		else call load(generate_constant$real_fix_bin_1(abs(size)),0);

/* lock the q register so that base_man doesn't accidentally flush it */

	call aq_man$lock(null,2);

	adjust = "0"b;

/* If this is a string temporary, protect it from premature release */

	if p -> reference.temp_ref
	     then if p -> reference.ref_count = 1
		     then do;
			adjust = "1"b;
			p -> reference.ref_count = 2;
			call need_temp(p,"11"b);
			end;

/* Load the bp with the address of the string */

	call base_man$load_var(2,p,1);

	if flush then call state_man$erase_reg((odd_bases));

	if have_arg then call expmac(mac,arg);
	else call expmac$zero(mac);

	call state_man$unlock;

	if adjust
	     then call adjust_ref_count(p,-1);

	return;

long_op$c_or_b: entry(pt,size,macro);

	p = pt;
	mac = macro;
	flush, no_size, have_arg = "0"b;

	if p -> reference.data_type = bit_string then mac = mac + 1;

	goto common;

long_op$extend_stack: entry(pt,op);

dcl	op fixed bin(15);

	p = pt;
	call load_size(p);
	call expmac$zero(op);
	cg_stat$extended_stack = "1"b;
	call state_man$update_ref(p);
	call base_man$update_base(2,p,1);
	return;

long_op$no_size: entry(pt,op);

	flush = "0"b;
n_size:
	p = pt;
	mac = op;
	no_size = "1"b;
	have_arg = "0"b;
	goto common;

long_op$with_arg: entry(pt,size,macro,arg);

dcl	arg ptr;

	p = pt;
	mac = macro;
	flush, no_size = "0"b;
	have_arg = "1"b;
	goto common;

long_op$io:	entry(pt,op);

	flush = "1"b;
	go to n_size;

long_op$eis_operator:	entry(pt,p2,macro);

dcl	(p2,ref(2)) ptr;
dcl	check bit(1) aligned;
dcl	base_man$load_var_and_lock entry(fixed bin,ptr,fixed bin);
dcl	load_size$a_or_q entry(ptr,fixed bin);

	/* Used to make 2 operand calls to pl1_operators_.   Pointers to operands 1 and 2
	are loaded into the bp and ab, respectively, and the lengths of the 2 operands
	are loaded into the q and a registers, respectively. */

	ref(1) = pt;
	ref(2) = p2;
	mac = macro;

	/* Protect length exprs & string temps from being prematurely released, then
	   load the pointer registers with the addresses of the operands, free the
	   unneeded temps, and load the lengths */

	do i = 1 to 2;
	if ^ ref(i) -> reference.shared
	then do;
	     n, ref(i) -> reference.ref_count = ref(i) -> reference.ref_count + 1;
	     check = n = 2;
	     end;
	else check = "0"b;
	call base_man$load_var_and_lock(2,ref(i),2*i-1);
	if check then call need_temp(ref(i),"11"b);
	call load_size$a_or_q(ref(i),3-i);
	if i = 1
	     then call aq_man$lock(null,2);
	end;

	/* Unlock the registers and issue the macro */

	call state_man$unlock;

	call expmac$zero(macro);

	/* Lower reference counts originally raised */

	do i = 1 to 2;
	if ^ ref(i) -> reference.shared then call adjust_ref_count(ref(i),-1);
	end;

	return;

long_op$eis:	entry(pt,size,macro);

dcl	size_hold fixed bin(24);
dcl	length_hold ptr unal;
dcl	big_length_hold bit(1) aligned;

	mac_prog = expmac$eis;
	go to eis_join;

long_op$one_eis:	entry(pt,size,macro);

	mac_prog = expmac$one_eis;

eis_join:
	p = pt;
	mac = macro;

	if size = 0
	then call mac_prog(mac,p);
	else do;
	     call save_length;
	     call mac_prog(mac,p);
	     call restore_length;
	     end;

	return;

long_op$two_eis:	entry(pt,size,macro,pt2);

dcl	pt2 ptr;
dcl	expmac$two_eis entry(fixed bin(15),ptr,ptr);

	p = pt2;

	if size = 0
	then call expmac$two_eis(macro,pt,p);
	else do;
	     call save_length;

	     call expmac$two_eis(macro,pt,p);

	     call restore_length;
	     end;

	return;

save_length:	proc;

	     size_hold = p -> reference.c_length;
	     length_hold = p -> reference.length;
	     big_length_hold = p -> reference.big_length;
	     p -> reference.c_length = size;
	     p -> reference.big_length = size > max_index_register_value;
	     p -> reference.length = null;

	     end;

restore_length:	proc;

	     p -> reference.big_length = big_length_hold;
	     p -> reference.c_length = size_hold;
	     p -> reference.length = length_hold;
	     if length_hold ^= null
	     then if p -> reference.ref_count = 0
		then call adjust_ref_count((length_hold),-1);

	     end;

	end;
