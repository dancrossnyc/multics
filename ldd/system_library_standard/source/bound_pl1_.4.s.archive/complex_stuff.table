" code definition segment for Fortran complex
"
"	Modified:	8 August 1978 by Richard A. Barnes to fix 1731
"
" we assume that the only type of complex data is cfl1 and that at least
" one operand has this type
"
	name	complex_stuff
	segdef	complex_stuff
	segdef	complex_compare
"
	equ	arg1,1*4096
	equ	arg2,2*4096
	equ	arg3,3*4096
"
	bool	fx1_to_fl2_,465
	bool	op_vec,551	from assembly of pl2_operators
"
	bool	aq,600000
"
complex_stuff:
	erase	aq
	switch	17,op
	jump	plus
	jump	minus
	jump	times
	jump	divide
	jump	negate
plus:
	switch	0,code
	jump	plus_HH
	jump	plus_HE
	flipto	plus_HE	actually plus_EH
plus_EE:
plus_EE_cfl1:
	switch	3,type2
	jump	plus_EE_cfl1_fl1_cfl1
	jump	plus_EE_cfl1_fl2_cfl1
	jump	0
	jump	0
plus_EE_cfl1_cfl1:
	switch	3,type3
	flipto	plus_EE_cfl1_fl1_cfl1
	flipto	plus_EE_cfl1_fl2_cfl1
	jump	0
	jump	0
plus_EE_cfl1_cfl1_cfl1:
	bump	arg2
	bump	arg3
	fld	arg2
	fad	arg3
	fst	arg1
	fld	arg2+1
	fad	arg3+1
	fst	arg1+1
	drop	arg2
	drop	arg3
**
plus_EE_cfl1_fl1_cfl1:
plus_EE_cfl1_fl2_cfl1:
	load	arg2
l1:	bump	arg3
	erase	aq
	fad	arg3
	fst	arg1
	fld	arg3+1
	fst	arg1+1
	drop	arg3
**
plus_HE:
plus_HE_cfl1:
	switch	3,type2
	jump	plus_HE_cfl1_fl1_cfl1
	jump	plus_HE_cfl1_fl2_cfl1
	jump	0
	jump	0
plus_HE_cfl1_cfl1:
	switch	3,type3
	jump	plus_HE_cfl1_cfl1_fl1
	jump	plus_HE_cfl1_cfl1_fl2
	jump	0
	jump	0
plus_HE_cfl1_cfl1_cfl1:
	cplalt	arg2
	jump	plus_EE_cfl1_cfl1_cfl1
plus_HE_cfl1_fl1_cfl1:
plus_HE_cfl1_fl2_cfl1:
	compile	arg2
	jump	l1
plus_HE_cfl1_cfl1_fl1:
plus_HE_cfl1_cfl1_fl2:
	cplalt	arg2
	bump	arg2
	fld	arg2
	fad	arg3
	jump	l5
plus_HH:
plus_HH_cfl1:
	switch	3,type2
	jump	plus_HH_cfl1_fl1_cfl1
	jump	plus_HH_cfl1_fl2_cfl1
	jump	0
	jump	0
plus_HH_cfl1_cfl1:
	switch	3,type3
	flipto	plus_HH_cfl1_fl1_cfl1
	flipto	plus_HH_cfl1_fl2_cfl1
	jump	0
	jump	0
plus_HH_cfl1_cfl1_cfl1:
	cplsave	arg3
	jump	plus_HE_cfl1_cfl1_cfl1
plus_HH_cfl1_fl1_cfl1:
plus_HH_cfl1_fl2_cfl1:
	cplalt	arg3
	compile	arg2
	jump	l1
"
minus:
	switch	0,code
	jump	minus_HH
	jump	minus_HE
	jump	minus_EH
minus_EE:
minus_EE_cfl1:
	switch	3,type2
	jump	minus_EE_cfl1_fl1_cfl1
	jump	minus_EE_cfl1_fl2_cfl1
	jump	0
	jump	0
minus_EE_cfl1_cfl1:
	switch	3,type3
	jump	minus_EE_cfl1_cfl1_fl1
	jump	minus_EE_cfl1_cfl1_fl2
	jump	0
	jump	0
minus_EE_cfl1_cfl1_cfl1:
	bump	arg2
	bump	arg3
	fld	arg2
	fsb	arg3
	fst	arg1
	fld	arg2+1
l3:	fsb	arg3+1
	fst	arg1+1
	drop	arg2
	drop	arg3
**
minus_EE_cfl1_fl1_cfl1:
minus_EE_cfl1_fl2_cfl1:
minus_HE_cfl1_fl1_cfl1:
minus_HE_cfl1_fl2_cfl1:
	bump	arg2
	bump	arg3
	fetch	arg2
	erase	aq
	fsb	arg3
	fst	arg1
	fld	=0.0,du
	jump	l3
minus_EE_cfl1_cfl1_fl1:
minus_EE_cfl1_cfl1_fl2:
	bump	arg2
	fld	arg2
	fsb	arg3
l5:	fst	arg1
	fld	arg2+1
	fst	arg1+1
	drop	arg2
**
minus_EH:
minus_EH_cfl1:
	switch	3,type2
	jump	minus_EH_cfl1_fl1_cfl1
	jump	minus_EH_cfl1_fl2_cfl1
	jump	0
	jump	0
minus_EH_cfl1_cfl1:
	switch	3,type3
	jump	minus_EH_cfl1_cfl1_fl1
	jump	minus_EH_cfl1_cfl1_fl2
	jump	0
	jump	0
minus_EH_cfl1_cfl1_cfl1:
	cplalt	arg3
	jump	minus_EE_cfl1_cfl1_cfl1
minus_EH_cfl1_fl1_cfl1:
minus_EH_cfl1_fl2_cfl1:
	cplalt	arg3
	jump	minus_EE_cfl1_fl1_cfl1
minus_EH_cfl1_cfl1_fl1:
minus_EH_cfl1_cfl1_fl2:
	bump	arg2
	compile	arg3
	erase	aq
	fneg	0
	fad	arg2
	jump	l5
minus_HE:
minus_HE_cfl1:
	switch	3,type2
	jump	minus_HE_cfl1_fl1_cfl1
	jump	minus_HE_cfl1_fl2_cfl1
	jump	0
	jump	0
minus_HE_cfl1_cfl1:
	switch	3,type3
	jump	minus_HE_cfl1_cfl1_fl1
	jump	minus_HE_cfl1_cfl1_fl2
	jump	0
	jump	0
minus_HE_cfl1_cfl1_cfl1:
	cplalt	arg2
	jump	minus_EE_cfl1_cfl1_cfl1
minus_HE_cfl1_cfl1_fl1:
minus_HE_cfl1_cfl1_fl2:
	cplalt	arg2
	jump	minus_EE_cfl1_cfl1_fl1
minus_HH:
	cplsave	arg3
	jump	minus_HE
times:
	switch	0,code
	jump	times_HH
	jump	times_HE
	flipto	times_HE		actual times_EH
times_EE:
times_EE_cfl1:
	switch	3,type2
	jump	times_EE_cfl1_fl1_cfl1
	jump	times_EE_cfl1_fl2_cfl1
	jump	0
	jump	0
times_EE_cfl1_cfl1:
	switch	3,type3
	flipto	times_EE_cfl1_fl1_cfl1
	flipto	times_EE_cfl1_fl2_cfl1
	jump	0
	jump	0
times_EE_cfl1_cfl1_cfl1:
	bump	arg2
	bump	arg3
	ldaq	arg2
l9:	eppbp	arg3
	tsx0	ap|op_vec+146
	drop	arg2
	drop	arg3
**
times_EE_cfl1_fl1_cfl1:
times_EE_cfl1_fl2_cfl1:
	bump	arg2
	bump	arg3
	load	arg2
l6:	fmp	arg3
	fst	arg1
	erase	aq
	load	arg2
	fmp	arg3+1
	fst	arg1+1
	drop	arg3
	erase	aq
**
times_HE:
times_HE_cfl1:
	switch	3,type2
	jump	times_HE_cfl1_fl1_cfl1
	jump	times_HE_cfl1_fl2_cfl1
	jump	0
	jump	0
times_HE_cfl1_cfl1:
	switch	3,type3
	jump	times_HE_cfl1_cfl1_fl1
	jump	times_HE_cfl1_cfl1_fl2
	jump	0
	jump	0
times_HE_cfl1_cfl1_cfl1:
	bump	arg3
	cplalt	arg2
	bump	arg2
	if 	c2
	eppbp	arg3
	tsx0	ap|op_vec+145
	drop	arg2
	drop	arg3
**
	ldaq	arg2
	jump	l9
times_HE_cfl1_fl1_cfl1:
times_HE_cfl1_fl2_cfl1:
	bump	arg3
	cplsave	arg2
	jump	l6
times_HE_cfl1_cfl1_fl1:
times_HE_cfl1_cfl1_fl2:
	cplalt	arg2
	flipto	times_EE_cfl1_fl1_cfl1
times_HH:
times_HH_cfl1:
	switch	3,type2
	jump	times_HH_cfl1_fl1_cfl1
	jump	times_HH_cfl1_fl2_cfl1
	jump	0
	jump	0
times_HH_cfl1_cfl1:
	switch	3,type3
	flipto	times_HH_cfl1_fl1_cfl1
	flipto	times_HH_cfl1_fl2_cfl1
	jump	0
	jump	0
times_HH_cfl1_cfl1_cfl1:
	cplsave	arg3
	jump	times_HE_cfl1_cfl1_cfl1
times_HH_cfl1_fl1_cfl1:
times_HH_cfl1_fl2_cfl1:
	cplalt	arg3
	bump	arg3
	cplsave	arg2
	jump	l6
divide:
	switch	0,code
	jump	divide_HH
	jump	divide_HE
	jump	divide_EH
divide_EE:
divide_EE_cfl1:
	switch	3,type2
	jump	divide_EE_cfl1_fl1_cfl1
	jump	divide_EE_cfl1_fl2_cfl1
	jump	0
	jump	0
divide_EE_cfl1_cfl1:
	switch	3,type3
	jump	divide_EE_cfl1_cfl1_fl1
	jump	divide_EE_cfl1_cfl1_fl2
	jump	0
	jump	0
divide_EE_cfl1_cfl1_cfl1:
	bump	arg2
	bump	arg3
	ldaq	arg2
l7:	eppbp	arg3
	tsx0	ap|op_vec+148
	drop	arg2
	drop	arg3
**
divide_EE_cfl1_fl1_cfl1:
divide_EE_cfl1_fl2_cfl1:
	bump	arg2
	bump	arg3
	lda	arg2
	ldq	=0.0,du
	jump	l7
divide_EE_cfl1_cfl1_fl1:
divide_EE_cfl1_cfl1_fl2:
	bump	arg2
	bump	arg3
	load	arg3
	fdi	arg2
	fst	arg1
	erase	aq
	load	arg3
	fdi	arg2+1
	fst	arg1+1
	drop	arg2
**
divide_EH:
	cplsave	arg3
	jump	divide_EE
divide_HE:
divide_HE_cfl1:
	switch	3,type2
	jump	divide_HE_cfl1_fl1_cfl1
	jump	divide_HE_cfl1_fl2_cfl1
	jump	0
	jump	0
divide_HE_cfl1_cfl1:
	switch	3,type3
	jump	divide_HE_cfl1_cfl1_fl1
	jump	divide_HE_cfl1_cfl1_fl2
	jump	0
	jump	0
divide_HE_cfl1_cfl1_cfl1:
	bump	arg3
	cplalt	arg2
	bump	arg2
	if	c2
	eppbp	arg3
	tsx0	ap|op_vec+147
	drop	arg2
	drop	arg3
**
	ldaq	arg2
	jump	l7
divide_HE_cfl1_fl1_cfl1:
divide_HE_cfl1_fl2_cfl1:
	cplsave	arg2
	jump	divide_EE_cfl1_fl1_cfl1
divide_HE_cfl1_cfl1_fl1:
divide_HE_cfl1_cfl1_fl2:
	cplalt	arg2
	jump	divide_EE_cfl1_cfl1_fl1
divide_HH:
	cplsave	arg3
	jump	divide_HE
negate:
	ifnot	atm2
	cplalt	arg2
*
	bump	arg2
	fld	arg2
	fneg	0
	fst	arg1
	fld	arg2+1
	fneg	0
	fst	arg1+1
	drop	arg2
**
"
" table defining complex comparison for Fortran
"
complex_compare:
	switch	0,code
	jump	HH
	jump	HE
	flipto	HE	really EH
EE:
	if	q3
	cmpaq	arg2
**
c1:	load	arg2
	cmpaq	arg3
**
HH:
	cplsave	arg3
HE:
	cplalt	arg2
	jump	c1
	end
