/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* program to process operand of an operator node

	Modified:  21 May 1973 by RAB for multiple base regs
	Modified:	19 June 1973 by RAB for EIS
	Modified:	8 August 1974 by RAB to fix 1206
	Modified:	18 November 1974 by RAB to fix 1257, 1258
	Modified:	22 November 1974 by RAB to remove setting of passed_as_arg
	Modified:	26 June 1976 by RAB to fix 1503 (changed handling of
		qualifier for defined_ref)
	Modified:	5 Oct 1976 by RAB to improve unspec(char_expr)
	Modified:	24 Nov 1976 by RAB to fix 1555
	Modified:	14 Sept 1977 by RAB to fix 1662
	Modified:	15 Dec 1977 by RAB to fix 1694
	Modified:	9 March 1978 by RAB to fix 1714 (setting of aligned_ref for packed decimal)
	Modified:	22 Jan 1979 by RAB to fix 1814 (ERROR 313 for multiple occurrences of
		packed based qualifiers in if stmt)
		pointer_chain now sets reference.evaluated after call to
		base_man$load_packed
	Modified: 25 Apr 1979 by PCK to implement 4-bit decimal
	Modified: 4 Mar 1980 by PCK to fix 1910 and 1911
	Modified:	30 Mar 1980 by RAB to add reference.(padded aligned)_for_store_ref
		as a partial fix to bug 1186, the famous PADDED REFERENCE BUG.
          Modified 830118 BIM to copy_temp on all pointers.
	Modified 830427 BIM to support ptr options (packed);
*/

/* format: style3,^indnoniterdo,indend */
prepare_operand:
     proc (pt, evaluate, atomic) returns (ptr);

dcl	pt		ptr,			/* points at reference|operator node */
	evaluate		fixed bin,		/* < 0 means evaluate offset but not size,
				   = 0 means don't evaluate size or offset,
				   > 0 means evaluate size and offset */
	atomic		bit (1) aligned;		/* set "1"b if operand is atomic */

dcl	(p, p1, p2, q, s)	ptr,
	(cfo, eval, n, bit_length)
			fixed bin,
	(str, useless, here_before, padded_bit)
			bit (1) aligned,
	op_code		bit (9) aligned;

dcl	(
	cg_stat$long_string_temp,
	cg_stat$cur_block,
	cg_stat$cur_statement,
	cg_stat$cur_node
	)		ptr ext;

dcl	(
	assign_op,
	compile_exp,
	stack_temp$assign_aggregate,
	state_man$update_ref
	)		entry (ptr),
	adjust_ref_count	entry (ptr, fixed bin),
	state_man$update_reg
			entry (ptr, bit (19) aligned),
	state_man$erase_reg entry (bit (19) aligned),
	(
	compile_exp$save,
	compile_exp$save_exp
	)		entry (ptr) returns (ptr),
	eval_exp		entry (ptr, bit (1) aligned) returns (ptr),
	get_reference	entry returns (ptr),
	prepare_operand	entry (ptr, fixed bin, bit (1) aligned) returns (ptr),
	copy_temp		entry (ptr) returns (ptr),
	generate_constant$real_fix_bin_1
			entry (fixed bin) returns (ptr),
	check_o_and_s	entry (ptr) returns (ptr),
	load		entry (ptr, fixed bin),
	call_op		entry (ptr) returns (ptr),
	base_man$load_packed
			entry (ptr, fixed bin),
	pointer_builtins	entry (ptr, bit (1) aligned),
	length_op		entry (ptr) returns (ptr),
	assign_desc_op	entry (ptr) returns (ptr),
	decimal_op$change_target
			entry (ptr) returns (bit (1) aligned),
	decimal_op$get_float_temp
			entry (fixed bin (24), bit (1) aligned) returns (ptr),
	assign_op$to_dec_scaled
			entry (ptr, ptr);

dcl	(addrel, divide, fixed, max, mod, null, string, substr)
			builtin;

dcl	fix_bin		(0:1) fixed bin based;

dcl	io_class		init ("10000"b) bit (5) int static;

%include cgsystem;
%include reference;
%include symbol;
%include array;
%include label;
%include operator;
%include nodes;
%include op_codes;
%include data_types;
%include boundary;
%include machine_state;

	p, q = pt;
	atomic = "1"b;

	eval = evaluate;

	if p -> node.type = label_node
	then do;

	     q = get_reference ();
	     q -> reference.symbol = p;

l1:
	     q -> reference.data_type = label_constant;
	     q -> reference.allocated = p -> label.allocated;
	     q -> reference.aliasable, q -> reference.temp_ref, q -> reference.defined_ref, q -> reference.allocate = "0"b;
	     goto l3;
	     end;

	if p -> node.type = operator_node
	then do;

	     if p -> operator.op_code = desc_size
	     then do;
		q = check_o_and_s (p);
		if q ^= null
		then goto go;
		end;

	     q = p -> operand (1);

/* check for expression already done */

	     if q -> reference.evaluated
	     then if q -> reference.data_type = 0
		then goto l8a;
		else do;
		     if eval > 0
		     then if q -> reference.symbol -> node.type = symbol_node
			then if q -> reference.symbol -> symbol.return_value
			     then q -> reference.length = eval_exp ((q -> reference.length), "1"b);
		     if ^q -> reference.aligned_ref
		     then atomic = "0"b;
		     goto done;
		     end;

	     if p -> operator.op_code = assign
	     then do;
		s = p -> operand (2);
		if s -> node.type ^= reference_node
		then goto l8;
		if s -> reference.symbol -> node.type ^= symbol_node
		then goto l8;
		if ^s -> reference.symbol -> symbol.arg_descriptor
		then goto l8;
		if ^q -> reference.symbol -> symbol.temporary
		then goto l8;

/* have assignment of element of arg_descriptor to a temporary,
		   eliminate the unnecessary assignment */

		if q -> reference.shared
		then do;
		     q = s;
		     goto go;
		     end;
		else do;
		     q = assign_desc_op (p);
		     go to exit;
		     end;
		end;

	     if p -> operator.op_code = length_fun
	     then do;
		q = length_op (p);
		go to exit;
		end;

	     if p -> operator.op_code = std_call
	     then do;
		q = call_op (p);
		if ^q -> reference.aligned_ref
		then atomic = "0"b;
		goto done;
		end;

l8:
	     eval = 0;
l8a:
	     atomic = "0"b;
	     end;

/* set fields not yet set by declaration processor */

go:
	p1 = q -> reference.qualifier;
	s = q -> reference.symbol;

	here_before = q -> reference.data_type ^= 0 & ^q -> reference.shared;

	if s -> node.type = label_node
	then do;
	     p = s;
	     goto l1;
	     end;

	q -> reference.aggregate =
	     q -> reference.array_ref | s -> symbol.structure | s -> symbol.arg_descriptor | s -> symbol.storage_block
	     | ((s -> symbol.dimensioned | s -> symbol.member) & s -> symbol.temporary);

	q -> reference.aliasable =
	     s -> symbol.aliasable
	     | (s -> symbol.auto & (cg_stat$cur_block ^= s -> symbol.block_node) & s -> symbol.passed_as_arg);
	q -> reference.temp_ref = q -> reference.temp_ref | s -> symbol.temporary;
	q -> reference.allocated =
	     q -> reference.allocated | (s -> symbol.allocated & q -> reference.temp_ref = s -> symbol.temporary);
	q -> reference.defined_ref = s -> symbol.defined & ^q -> reference.temp_ref;
	q -> reference.allocate =
	     q -> reference.allocate | s -> symbol.allocate | q -> reference.ref_count > 0 | q -> reference.aggregate
	     | ^q -> reference.temp_ref;

/*			THE PADDED REFERENCE PROBLEM

	The code generator uses reference.aligned_ref to specify that an
	operand may be directly used in a computation with a register
	(such as addition or intersection) without first extracting it by
	shifting and/or masking.  Prepare_operand develops this bit from
	various sources, such as the offset units, symbol.packed, and
	reference.padded_ref.  reference.padded_ref specifies that the
	reference is that last in a machine word and that zeroes may be
	considered to exist between the rightmost bit of the reference and
	the right end of the machine word, if there is any gap.  The semantic
	translator develops the bit for packed items only under the assumption
	that unpacked items are always padded.  A level-one packed item is
	considered padded if the declaration is for an original generation of
	storage rather than for an alias of an original generation; thus a
	level-one item is padded if it is neither based, defined, nor parameter.
	Packed structure members are considered padded only if they abut the
	right end of a word, if the next item to the right is unpacked, or if
	they abut the right end of a padded structure.  This setting is
	generally correct ignoring considerations of the substr pseudovariable.
	The semantic translator furthermore considers all substr references
	to be unpadded since there may be more non-zero bits to the right in
	the full generation of the string.  Since the substr pseudovariable may
	only set part of a string, it makes sense to assume that the target
	of a substr is unpadded unless the compiler can prove that the whole
	string is set before it is fetched and other conditions for
	padded references hold.  Here comes the reason for the bug.  The
	code generator marks vars that are passed_as_arg or parameters as
	always unpadded (even if unpacked) because their aliases might be
	set by substr, but ignores more complete aliasing rules. Furthermore,
	until 30 March 1980, the code generator used the same bits to determine
	whether an item should be padded when stored as were used to
	determine padded fetches.  The combination of these 2 flaws allowed
	for vars to be stored unpadded, but fetched padded.  Since 30 March
	1980, this has been partially corrected by determining whether to
	zero out remaining bits in a word independently from whether it
	might be a target of substr elsewhere.  Thus reference.aligned_for_storre_ref
	and reference.padded_for_store_ref are introduced.  A complete fix
	would involve using more complete aliasing rules and attempting to
	ensure that all potential substr targets were somehow initialized
	with proper padding, if necessary.  (Note that the Multics implementation
	allocates static and controlled vars from storage that is preinitialized
	to zeroes, so the problem only exists for vars whose original generation
	is automatic or based.)  A complete fix would be incompatable with
	pre March 30, 1980 behavior because of aliasing problems.  It is
	hoped the fix of March 30, 1980 will greatly reduce that
	incompatability so that the complete fix might be tried after several
	years.
*/

	q -> reference.padded_for_store_ref = q -> reference.padded_ref;

	if ^s -> symbol.packed
	then do;
	     padded_bit,
		q -> reference.padded_for_store_ref =
		^q -> reference.substr | q -> reference.c_length = s -> symbol.c_dcl_size;

	     if ^(s -> symbol.parameter | (s -> symbol.defined & s -> symbol.overlayed))
	     then q -> reference.padded_ref = padded_bit;
	     end;

/* The following is a bad remnant of the old padded reference scheme
	   that we hope to drop, eventually.  Note that reference.padded_for_store_ref
	   is not affected. */

	if s -> symbol.passed_as_arg
	then if ^s -> symbol.constant
	     then q -> reference.padded_ref = "0"b;

	/* end of code that we eventually hope to drop */

	if p1 ^= null
	then if p1 -> node.type ^= temporary_node
	     then if eval ^= 0
		then if ^q -> reference.defined_ref
		     then call pointer_chain (q);
		     else call defined_chain (q);

/* encode data type of reference */

	if s -> symbol.binary
	then do;
	     if s -> symbol.fixed
	     then if s -> symbol.c_dcl_size > max_p_fix_bin_1
		then n = real_fix_bin_2;
		else n = real_fix_bin_1;
	     else if s -> symbol.c_dcl_size > max_p_flt_bin_1
	     then n = real_flt_bin_2;
	     else n = real_flt_bin_1;

	     if s -> symbol.complex
	     then n = n + 4;
	     goto set;
	     end;

	if s -> symbol.decimal
	then do;
	     n = real_fix_dec + fixed (s -> symbol.float, 1);
	     if s -> symbol.complex
	     then n = n + 2;

set:
	     q -> reference.data_type = n;
	     goto l2;
	     end;

	if s -> symbol.char | s -> symbol.picture
	then do;
	     q -> reference.data_type = char_string;
	     goto l2;
	     end;

	if s -> symbol.bit
	then do;
	     q -> reference.data_type = bit_string;
	     goto l2;
	     end;

	if s -> symbol.offset
	then do;
	     q -> reference.data_type = real_fix_bin_1;
	     goto l2;
	     end;

	if s -> symbol.ptr
	then do;
	     if q -> reference.temp_ref      /* temp ptr operands are copied */
	     then if q -> reference.shared   /* so they can be in the machine state correctly */
	     then do;
		     q = copy_temp (q);
		     q -> reference.ref_count = 2; /* create, then use */
		     if p -> node.type = operator_node
		     then p -> operator.operand (1) = q;
		end;
	     q -> reference.data_type = unpacked_ptr + fixed (s -> symbol.packed | s -> symbol.unaligned | s -> symbol.explicit_packed, 1);
	     goto l2;
	     end;

	if s -> symbol.label
	then do;
	     q -> reference.data_type = label_variable - fixed (s -> symbol.local, 1);
	     goto l2;
	     end;

	if s -> symbol.arg_descriptor
	then do;
	     q -> reference.data_type = real_fix_bin_1;
	     goto l2;
	     end;

	if s -> symbol.file
	then do;
	     q -> reference.data_type = local_label_variable;
	     goto l2;
	     end;

	if s -> symbol.format
	then do;
	     q -> reference.data_type = local_label_variable - fixed (s -> symbol.constant, 1);
	     goto l2;
	     end;

	if s -> symbol.area
	then do;
	     q -> reference.data_type = real_fix_bin_2;
	     go to l2;
	     end;

	if s -> symbol.entry
	then if s -> symbol.variable | s -> symbol.temporary
	     then q -> reference.data_type = entry_variable;
	     else if s -> symbol.external
	     then q -> reference.data_type = ext_entry_in + fixed (s -> symbol.initial = null);
	     else q -> reference.data_type = int_entry;

l2:
	str = s -> symbol.char | s -> symbol.bit | s -> symbol.picture;

	if here_before
	then do;
	     if (s -> symbol.packed & ^(str | s -> symbol.decimal))
		| (str & ^(q -> reference.long_ref | q -> reference.varying_ref))
	     then if ^q -> reference.aligned_ref
		then atomic = "0"b;

	     goto done;
	     end;

	n = q -> reference.units;
	if n = 0
	then n, q -> reference.units = word_;

	else if n ^= word_ & q -> reference.offset = null
	then if mod (q -> reference.c_offset, units_per_word (n)) = 0
	     then do;
		q -> reference.c_offset = divide (q -> reference.c_offset, units_per_word (n), 17, 0);
		n, q -> reference.units = word_;
		end;

	q -> reference.aligned_for_store_ref, q -> reference.aligned_ref = n = word_ & ^q -> reference.fo_in_qual;

	if n < word_
	then if q -> reference.data_type > 0
	     then if q -> reference.data_type = char_string | (s -> symbol.decimal & ^s -> symbol.unaligned)
		then if n ^= character_
		     then call bad;
		     else ;
		else if s -> symbol.decimal & s -> symbol.unaligned
		then if n ^= digit_
		     then call bad;
		     else ;
		else if n ^= bit_
		then call bad;

	if str
	then do;

	     bit_length = q -> reference.c_length * convert_size (q -> reference.data_type);
	     if q -> reference.c_length = 0 & q -> reference.length = null
	     then q -> reference.aligned_for_store_ref, q -> reference.aligned_ref = "1"b;

	     if q -> reference.length ^= null
	     then do;
		q -> reference.long_ref = "1"b;
		if q -> reference.shared
		then go to l3;			/* This catches call from mst for symbol.reference */
		q -> reference.big_length = is_big ((q -> reference.length));
		go to l3;
		end;

	     if q -> reference.c_length > max_short_size (q -> reference.data_type)
	     then do;
		q -> reference.big_length = q -> reference.c_length > max_index_register_value;
		q -> reference.long_ref = "1"b;
		if q -> reference.temp_ref
		then call check_assign;
		go to l3;
		end;

	     if q -> reference.varying_ref
	     then do;
		q -> reference.big_length = "1"b;
		if q -> reference.symbol -> symbol.dcl_size = null
		then if q -> reference.symbol -> symbol.c_dcl_size <= max_index_register_value
		     then q -> reference.big_length = "0"b;
		go to l3;
		end;

	     q -> reference.aligned_ref =
		q -> reference.aligned_ref & (q -> reference.padded_ref | mod (bit_length, bits_per_word) = 0);

	     q -> reference.aligned_for_store_ref =
		q -> reference.aligned_for_store_ref
		& (q -> reference.padded_for_store_ref | mod (bit_length, bits_per_word) = 0);
	     goto l5b;
	     end;

	bit_length = q -> reference.c_length;

	if bit_length = 0
	then do;
	     if s -> symbol.array = null
	     then bit_length = s -> symbol.c_bit_size;
	     else bit_length = s -> symbol.array -> array.c_element_size_bits;

	     if s -> symbol.decimal
	     then if s -> symbol.unaligned
		then do;
		     if s -> symbol.float
		     then q -> reference.c_length = s -> symbol.c_dcl_size + 3;
		     else q -> reference.c_length = s -> symbol.c_dcl_size + 1;

		     if s -> symbol.complex
		     then q -> reference.c_length = 2 * q -> reference.c_length;
		     end;
		else q -> reference.c_length = divide (bit_length, bits_per_char, 24, 0);
	     else q -> reference.c_length = bit_length;
	     end;

	if s -> symbol.decimal
	then do;
	     call prepare_decimal;
	     if s -> symbol.packed
	     then do;
		q -> reference.aligned_ref =
		     q -> reference.aligned_ref & (q -> reference.padded_ref | mod (bit_length, bits_per_word) = 0);
		q -> reference.aligned_for_store_ref =
		     q -> reference.aligned_for_store_ref
		     & (q -> reference.padded_for_store_ref | mod (bit_length, bits_per_word) = 0);
		end;
	     go to l5b;
	     end;

	if s -> symbol.packed
	then do;
	     if s -> symbol.binary
		& ^(q -> reference.data_type = real_fix_bin_1 | q -> reference.data_type = real_flt_bin_1)
	     then do;
		q -> reference.aligned_ref =
		     q -> reference.aligned_ref
		     & (s -> symbol.boundary > word_ & mod (bit_length, bits_per_two_words) = 0);
		q -> reference.aligned_for_store_ref =
		     q -> reference.aligned_for_store_ref
		     & (s -> symbol.boundary > word_ & mod (bit_length, bits_per_two_words) = 0);
		end;

	     else if ^s -> symbol.ptr
	     then do;
		if s -> symbol.structure
		then do;
		     q -> reference.aligned_ref = q -> reference.aligned_ref & q -> reference.padded_ref;
		     q -> reference.aligned_for_store_ref =
			q -> reference.aligned_for_store_ref & q -> reference.padded_for_store_ref;
		     end;
		q -> reference.aligned_ref = q -> reference.aligned_ref & (mod (bit_length, bits_per_word) = 0);
		q -> reference.aligned_for_store_ref =
		     q -> reference.aligned_for_store_ref & (mod (bit_length, bits_per_word) = 0);
		end;
l5b:
	     if ^q -> reference.aligned_ref
	     then atomic = "0"b;
	     end;

l3:
	if q -> reference.aggregate & q -> reference.temp_ref
	then do;

/* this is an aggregate temp, walk back to level 1 ancestor and
		assign storage if non-already assigned */

	     do p2 = s repeat (p2 -> symbol.father) while (p2 -> symbol.father ^= null);
	     end;

	     if p2 -> symbol.initial = null
	     then call stack_temp$assign_aggregate (p2);
	     end;

/* develop hard_to_load bit */

	if ^q -> reference.aligned_ref
	then if q -> reference.fo_in_qual
	     then q -> reference.hard_to_load = "1"b;
	     else do;
		n = q -> reference.units;
		if n < word_
		then if q -> reference.offset ^= null & ^q -> reference.modword_in_offset
		     then q -> reference.hard_to_load = "1"b;
		     else if ^q -> reference.long_ref
		     then do;
			cfo = mod (q -> reference.c_offset * convert_offset (n), bits_per_word);
			if cfo < 0
			then cfo = cfo + bits_per_word;
			q -> reference.hard_to_load = cfo + bit_length > bits_per_two_words;
			end;
		end;

	if eval = 0
	then goto done;

	if eval > 0
	then if q -> reference.length ^= null
	     then q -> reference.length = eval_exp ((q -> reference.length), (q -> reference.big_length));

	if q -> reference.offset ^= null
	then do;
	     if n < word_ & ^q -> reference.modword_in_offset
	     then do;
		q -> reference.big_offset = q -> reference.big_offset | is_big ((q -> reference.offset));
		end;

	     q -> reference.offset = eval_exp ((q -> reference.offset), (q -> reference.big_offset));
	     end;

done:
	q -> reference.no_address = "1"b;
	q -> reference.perm_address = "0"b;

	if q -> reference.defined_ref
	then do;
	     if p1 = null
	     then goto exit;

	     if p1 -> node.type = operator_node
	     then p1 = p1 -> operand (1);

	     if p1 -> reference.temp_ref
	     then do;

		if substr (string (p1 -> reference.value_in), 1, 2) = "00"b
		then goto def_done;

		if q -> reference.hard_to_load
		then go to erase_no_update;

/* the defined base is in A or Q register */

		if q -> reference.data_type ^= bit_string
		then do;
		     if q -> reference.data_type ^= p1 -> reference.data_type
		     then go to erase_no_update;

same:
		     string (q -> reference.value_in) =
			string (q -> reference.value_in) | string (p1 -> reference.value_in);
		     call state_man$erase_reg (substr (string (p1 -> reference.value_in), 1, 2));
		     call state_man$update_reg (q, string (q -> reference.value_in));
		     if q -> reference.value_in.a
		     then if p1 -> reference.data_type = char_string
			then if a_reg.size < p1 -> reference.c_length * bits_per_char
			     then a_reg.length = a_reg.size + a_reg.offset;
		     goto exit;
		     end;

/* the defined temporary is a bit string (possibly from unspec or substr) */

		if p1 -> reference.data_type ^= bit_string
		then do;
		     if p1 -> reference.data_type = real_fix_bin_1
		     then goto same;
		     if p1 -> reference.data_type = packed_ptr
		     then goto same;
		     if p1 -> reference.data_type = char_string
		     then goto same;

		     if p1 -> reference.data_type = real_fix_bin_2 | p1 -> reference.data_type = unpacked_ptr
		     then do;
			q -> reference.value_in.a = "1"b;
			call state_man$update_reg (q, "1"b);
			goto exit;
			end;

erase_no_update:
		     call state_man$erase_reg (substr (string (p1 -> reference.value_in), 1, 2));
		     end;
		else do;
		     call state_man$erase_reg (substr (string (p1 -> reference.value_in), 1, 2));
		     call state_man$update_ref (q);
		     if a_reg.size < p1 -> reference.c_length
		     then a_reg.length = a_reg.size + a_reg.offset;
		     end;

def_done:
		end;
	     else do;
		q -> reference.allocate, q -> reference.allocated = "1"b;
		q -> reference.temp_ref = "0"b;
		end;

	     end;

exit:
	return (q);

pointer_chain:
     proc (pt);

dcl	(pt, qp, tp, sp, rp)
			ptr,
	dummy		fixed bin,
	useless		bit (1) aligned,
	op_code		bit (9) aligned;

	qp = pt -> reference.qualifier;
	if qp -> node.type = reference_node
	then do;
	     qp = prepare_operand (qp, 1, useless);
	     return;
	     end;

	tp = qp -> operand (1);
	if tp -> reference.evaluated
	then return;

	op_code = qp -> operator.op_code;
	if op_code = std_call
	then do;
	     pt -> reference.qualifier = call_op (qp);
	     return;
	     end;

	if op_code = addr_fun
	then do;
	     qp -> operand (2) = prepare_operand ((qp -> operand (2)), 1, useless);
	     return;
	     end;

	sp = tp -> reference.symbol;

	if op_code = assign /* must be (unpacked temp) <- (packed) */
	then do;
	     if qp -> operator.operand (1) -> reference.temp_ref
	     then if qp -> operator.operand (1) -> reference.shared
	     then qp -> operator.operand (1) = copy_temp ((qp -> operator.operand (1)));
	     call base_man$load_packed (qp, dummy);
	     qp -> operand (1) -> reference.evaluated = "1"b;
	     return;
	     end;

	if op_code = param_ptr
	then return;
	if op_code = param_desc_ptr
	then return;

/* must be a pointer valued builtin function */

	if sp -> symbol.temporary
	then if tp -> reference.shared
	     then qp -> operand (1) = copy_temp (tp);

	call pointer_builtins (qp, "0"b);
	qp -> operand (1) -> reference.evaluated = "1"b;

     end;


defined_chain:
     proc (pt);

dcl	(pt, qp, rp)	ptr;
dcl	atomic		bit (1) aligned;

	qp = pt -> reference.qualifier;

	if qp -> node.type = reference_node
	then qp = prepare_operand (qp, 1, atomic);
	else if ^qp -> operand (1) -> reference.evaluated
	then do;
	     rp = prepare_operand (qp, 1, atomic);
	     if ^atomic
	     then rp = compile_exp$save_exp (qp);
	     end;

     end;


is_big:
     proc (pt) reducible returns (bit (1) aligned);

/* is_big determines if the precision of an offset or length expression is
   too big to fit in an index register */

dcl	(p, pt)		ptr;
dcl	result		bit (1) aligned;

	p = pt;

	if p -> node.type = operator_node
	then if p -> operator.op_code = length_fun
	     then do;
		p = p -> operand (2);
		if p -> node.type = operator_node
		then p = p -> operand (1);
		p = p -> reference.symbol;
		result = "1"b;
		if p -> symbol.dcl_size = null
		then if p -> symbol.c_dcl_size <= max_index_register_value
		     then result = "0"b;
		return (result);
		end;
	     else p = p -> operand (1);

	return (p -> reference.symbol -> symbol.c_dcl_size > max_p_xreg);

     end;


check_assign:
     proc;

/* This code is necessary because assign_op cannot have a shared temporary
   as the target of a conversion to long string */

dcl	p2		ptr;

	if q -> reference.shared
	then if p -> node.type = operator_node
	     then if substr (p -> operator.op_code, 1, 5) = "00011"b
						/* assign class */
		then do;
		     p2 = p -> operand (2);
		     if p2 -> node.type = operator_node
		     then p2 = p2 -> operand (1);
		     if (string (p2 -> reference.symbol -> symbol.data_type) & "0111111111111111111"b)
			^= (string (s -> symbol.data_type) & "0111111111111111111"b)
		     then q, p -> operand (1) = copy_temp (q);
		     end;

     end;


prepare_decimal:
     proc;

/* prepare_decimal is needed to make up for a disagreement between the hardware and
   the language.  PL/I allows scales from -128 to 127 while the hardware will only take
   decimal scales from -31 to +32.  In order to get around this restriction, we must,
   in most cases, replace any fixed decimal temporaries whose scale is outside the
   hardware limits to floating temporaries of the same precision.  */

dcl	r		ptr;
dcl	(
	i,
	scale		(3)
	)		fixed bin;

	if s -> symbol.temporary
	then if s -> symbol.fixed
	     then if s -> symbol.scale < min_dec_scale | s -> symbol.scale > max_dec_scale
		then if p -> node.type = operator_node
		     then if p -> operator.number >= 3
			then if p -> operator.op_code ^= complex_fun
			     then if p -> operator.op_code ^= round_fun
				then do;
				     if decimal_op$change_target (p)
				     then do;
					r = decimal_op$get_float_temp (s -> symbol.c_dcl_size,
					     (s -> symbol.complex));

					if cg_stat$cur_node ^= null
					then if cg_stat$cur_node -> operator.op_code = std_call
					     then go to keep_fixed;
					     else if substr (cg_stat$cur_node -> operator.op_code, 1, 5) = io_class
					     then go to keep_fixed;

					if s -> symbol.c_dcl_size < max_p_fix_dec
					then do;
					     if ^q -> reference.shared
					     then r -> reference.ref_count = q -> reference.ref_count;
					     q, p -> operand (1) = r;
					     s = r -> reference.symbol;
					     end;
					else do;
keep_fixed:
					     p -> operand (1) = r;
					     r = compile_exp$save (p);
					     if q -> reference.shared
					     then q = copy_temp (q);
					     call assign_op$to_dec_scaled (q, r);
					     p -> operand (1) = q;
					     atomic = "1"b;
					     end;
					end;
				     end;

     end;




bad:
     proc;

dcl	error		entry (fixed bin, ptr, ptr);

	if q -> reference.offset = null
	then if q -> reference.temp_ref
	     then if q -> reference.data_type = real_fix_bin_1
		then return;

	call error (332, cg_stat$cur_statement, q);

     end;

     end;
