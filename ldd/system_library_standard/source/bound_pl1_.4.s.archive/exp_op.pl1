/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* program to generate code for x ** n where n is a constant integer > 1

   Method used is left-to-right binary scan of n,
	See Knuth, Volume 2, page 399

   Initial Version: 3 June 1971 by BLW
	Modified: 5 July 1972 by BLW	*/

exp_op:	proc(npx,refs,atom);

dcl	npx ptr,		/* points at operator node */
	refs(3) ptr,		/* refs for operands */
	atom(3) bit(1) aligned;	/* "1"b if operand(i) is atom */

dcl	node_pt ptr defined (npx),
	ref(3) ptr defined (refs);

dcl	(p,q) ptr,
	(type,square_macro,mpy_macro,n) fixed bin(15),
	fw bit(36) aligned;

dcl	load entry(ptr,fixed bin);
dcl	m_a entry(ptr,bit(2) aligned);
dcl	compile_exp$save entry(ptr) returns(ptr),
	get_reference entry returns(ptr);
dcl	state_man$erase_reg entry(bit(19) aligned);
dcl	expmac entry(fixed bin(15),ptr),
	expmac$zero entry(fixed bin(15));

dcl	(index,substr) builtin;

dcl	full_word bit(36) aligned based;

dcl (	square_fx1	init(403),
	mpy_mac(4)	init(25,0,31,32)) fixed bin(15) int static;

%include cgsystem;
%include reference;
%include symbol;
%include operator;

	/* following prevents use of A and Q as instruction modifiers by forcing
	   into storage any result held in these registers */

	call state_man$erase_reg("11"b);

	if atom(2) then call load(ref(2),0); else ref(2) = compile_exp$save((node_pt -> operand(2)));

	p = get_reference();
	p -> reference = ref(2) -> reference;
	if p -> reference.no_address then call m_a(p,"0"b);
	p -> reference.shared, p -> reference.perm_address = "1"b;

	if atom(2) then q = p; else q = ref(2);

	type = p -> reference.data_type;
	square_macro = square_fx1 - 1 + type;
	mpy_macro = mpy_mac(type);

	fw = ref(3) -> reference.symbol -> symbol.initial -> full_word;

	call expmac(mpy_macro,q);

	n = index(fw,"1"b) + 1;

loop:	if substr(fw,n,1) then call expmac(mpy_macro,p);

	n = n + 1;
	if n <= bits_per_word
	then do;
	     call expmac$zero(square_macro);
	     goto loop;
	     end;

	end;
