/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
%;
/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* procedure to compile formats into internal form

   Initial Version: 10 December 1971 by BLW
	Modified:  3 January 1972 by BLW
	Modified: 22 October 1973 by BLW for picture formats */

compile_formats: proc ;

dcl	(cg_static_$text_base,cg_static_$text_reloc_base,cg_static_$format_list) ptr ext,
	(cg_static_$text_pos,cg_static_$cur_level) fixed bin(18) ext;

dcl	(p,q,p1,q1,fp) ptr,
	dont_pool bit(1),
	(first,size,n_bits,use,prev_use,delta,loc,n) fixed bin(18);

dcl	(e_v,e_v$l_v) entry(ptr,fixed bin(35),ptr,fixed bin,fixed bin,bit(36) aligned);

dcl	1 half	based aligned,
	2 left	bit(18) unal,
	2 right	bit(18) unal;
dcl	fix_bin fixed bin based,
	string bit(n_bits) aligned based;

dcl	format_class bit(5) init("01111"b) int static;

dcl	(addrel,bit,fixed,null,substr) builtin;

%include pl1_tree_areas;
%include cgsystem;
%include operator;
%include list;
%include statement;
%include reference;
%include symbol;
%include block;
%include format_value;
%include format_item;
%include nodes;
%include op_codes;

	/* preprocess all formats to encode any variables | expressions */

	p = cg_static_$format_list;
	do while(p ^= null);

	     q = p -> element(2);
	     cg_static_$cur_level = q -> symbol.block_node -> block.level;
	     q = q -> symbol.initial -> statement.root;
	     call preprocess(q);
	     p = p -> element(1);
	     end;

	/* now generate internal form for all formats */

	p = cg_static_$format_list;
	do while(p ^= null);

	     fp = addrel(cg_static_$text_base,cg_static_$text_pos);
	     fp -> fix_bin = 0;

	     cg_static_$text_pos = cg_static_$text_pos + 1;

	     dont_pool = "0"b;
	     q = p -> element(2);
	     first = generate(q -> symbol.initial -> statement.root) - 1;
	     size, q -> symbol.c_word_size = cg_static_$text_pos - first;

	     if dont_pool then goto unique;

	     /* try to pool this format with one already generated */

	     n_bits = size * bits_per_word;

	     p1 = cg_static_$format_list;
	     do while(p1 ^= p);

		q1 = p1 -> element(2);
		if size > q1 -> symbol.c_word_size then goto nf;
		if addrel(cg_static_$text_base,q1 -> symbol.location) -> string = fp -> string
		then do;

		     /* found a match */

		     loc = q1 -> symbol.location;
		     cg_static_$text_pos = first;
		     addrel(cg_static_$text_reloc_base,cg_static_$text_pos) -> string = "0"b;
		     goto fill;
		     end;

nf:		p1 = p1 -> element(1);
		end;

	     /* the format is unique */

unique:	     loc = first;

	     /* now assign the format and fill in its usage string (if any) */

fill:	     use = q -> symbol.location;
	     q -> symbol.location = loc;
	     q -> symbol.allocated = "1"b;

	     do while(use ^= 0);
		p1 = addrel(cg_static_$text_base,use);
		prev_use = fixed(p1 -> right,18);

		delta = loc - use;
		if delta >= 0 then p1 -> right = bit(delta,18);
		else p1 -> right = bit(fixed(262144+delta,18),18);

		use = prev_use;
		end;

	     p = p -> element(1);
	     end;

	/* all done */

	return;

preprocess:    proc(opt);

dcl	     opt ptr;		/* points at format operator */

dcl	     (qi,fv,op,s) ptr,
	     i fixed bin;

	     /* This procedure is called to preprocess a format tree.  If the format is
	        a remote format, it encodes the format label specified in r(l).  It
	        then looks at all of the operands of the format operator;  if any of them
	        are not constants, it encodes their value and replaces them in the tree
	        with a pointer to the format value node.  It calls itself to process
	        another format operator found in the tree */

	     op = opt;
	     if op -> op_code ^= r_format then goto loop;

	     qi = op -> operand(3);
	     s = qi -> reference.symbol;
	     if s -> symbol.format & ^ s -> symbol.constant
	     then do;
		allocate format_value in(tree_area) set(fv);
		op -> operand(3) = fv;

		call e_v$l_v(null,fv -> format_value.val,qi,0,0,fv -> format_value.reloc);
		end;

loop:	     do i = 1 to op -> operator.number;
		qi = op -> operand(i);
		if qi = null then goto step;

		if qi -> node.type = format_value_node then goto step;

		if qi -> node.type = reference_node
		then if qi -> reference.symbol -> symbol.constant
		     then goto step; else goto all;

		if substr(qi -> op_code,1,5) = format_class
		then do;
		     call preprocess(qi);
		     goto step;
		     end;

all:		allocate format_value in(tree_area) set(fv);
		call e_v(null,fv -> format_value.val,qi,0,0,fv -> format_value.reloc);
		op -> operand(i) = fv;

step:		end;

	     end;

generate:	     proc(format_pt) returns(fixed bin(18));

dcl	     format_pt ptr unaligned;			/* points at first operator node in format */

dcl	     (pt,p,q,rp,s,prev) ptr,
	     (start,pos,prev_pos,i) fixed bin(18),
	     code fixed bin(9);

dcl	     1 fir	aligned based,
	     2 skip	bit(36),
	     2 count_reloc	bit(36),
	     2 value_reloc(3) bit(36);

	     pt = format_pt;
	     start = cg_static_$text_pos;
	     prev = null;

loop:	     pos = cg_static_$text_pos;
	     p = addrel(cg_static_$text_base,pos);
	     rp = addrel(cg_static_$text_reloc_base,pos);

	     p -> fix_bin = 0;
	     p -> format_item.num = bit(fixed(pt -> operator.number - 2,9),9);

	     cg_static_$text_pos = cg_static_$text_pos + pt -> operator.number;

	     q = pt -> operand(2);		/* repitition count */
	     if q = null then p -> count = 1;
	     else if q -> node.type = format_value_node
		then do;
		     p -> count = q -> format_value.val;
		     rp -> count_reloc = q -> format_value.reloc;
		     end;
		else p -> count = q -> reference.symbol -> symbol.initial -> fix_bin;

	     code = fixed(substr(pt -> op_code,6,4),4) - 1;
	     p -> format_item.code = bit(fixed(code,9),9);

	     if pt -> op_code = l_parn
	     then do;
		p -> format_item.value(1) = generate(pt -> operand(3)) - pos;
		goto step;
		end;

	     if pt -> op_code ^= r_format then goto cf;

	     q = pt -> operand(3);
	     if q -> node.type = format_value_node
	     then do;
		p -> format_item.value(1) = q -> format_value.val;
		rp -> value_reloc(1) = q -> format_value.reloc;
		goto step;
		end;

	     dont_pool = "1"b;

	     s = q -> reference.symbol;
	     if s -> symbol.allocated
	     then do;
		i = s -> symbol.location - pos - 2;
		if i >= 0 then p -> remote_format.offset = bit(fixed(i,18),18);
		else p -> remote_format.offset = bit(fixed(262144+i,18),18);
		end;
	     else do;
		p -> remote_format.offset = bit(fixed(s -> symbol.location,18),18);
		s -> symbol.location = pos + 2;
		end;

	     p -> remote_format.class = "0"b;
	     goto step;

cf:	     if pt -> op_code = c_format
	     then do;
		p -> format_item.value(1) = generate(pt -> operand(3)) - pos;
		if pt -> operator.number = 4 then p -> format_item.value(2) =
		 generate(pt -> operand(4)) - pos;
		goto step;
		end;

	     if pt -> op_code = picture_format
	     then do;

		/* operand(3) of a picture format item points to a reference
		   node for the picture constant.  We assume that the allocate
		   bit is ON in the symbol node for the picture constant, and
		   therefore that the constant will have already been allocated */

		p -> format_item.value(1) =  pt -> operand(3) -> reference.symbol
		 -> symbol.location - pos;
		dont_pool = "1"b;
		goto step;
		end;

	     do i = 3 to pt -> operator.number;
		q = pt -> operand(i);
		if  q -> node.type = format_value_node
		then do;
		     p -> format_item.value(i-2) = q -> format_value.val;
		     rp -> value_reloc(i-2) = q -> format_value.reloc;
		     end;
		else p -> format_item.value(i-2) = q -> reference.symbol -> symbol.initial -> fix_bin;
		end;

step:	     if prev ^= null then prev -> format_item.next = bit(fixed(pos - prev_pos,18),18);

	     prev = p;
	     prev_pos = pos;

	     pt = pt -> operand(1);
	     if pt ^= null then goto loop;

	     return(start);
	     end;

	end;
