/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* procedure to compile I/O operators

   Initial Version: 19 October 1971 by BLW
	Modified:  3 October 1972 by BLW
	Modified:	28 February 1973 by RAB
	Modified:	18 June 1973 by RAB	
	Modified:	30 December 1974 by RAB to fix 1282
	Modified:	25 February 1975 by RAB for quick put list
	Modified:	12 January 1976 by RAB to fix 1455
	Modified:	10 January 1978 by RAB to fix 1697
	Modified: 1 May 1979 by PCK to implement 4-bit decimal */

io_op:	proc(pt);

dcl	pt ptr;		/* points at operator node */

dcl	(cg_stat$cur_block,cg_stat$cur_statement,cg_stat$text_base) ptr ext,
	cg_stat$generate_symtab bit(1) ext,
	cg_stat$star_symbol_up_zero bit(18) ext;

dcl	(p,psp,psr,sslp,q,p2,p3,p4,arg(3),rand(3)) ptr,
	(psloc,i,n,macro,ok) fixed bin(15),
	quick_stream_op bit(1) aligned init("0"b),
	(atomic,useless) bit(1) aligned;

dcl	odd_bases bit(19) int static aligned init("0000000000000001111"b);

dcl	(addr,bit,fixed,null,substr) builtin;

dcl	expmac entry(fixed bin(15),ptr),
	expmac$many entry(fixed bin(15),ptr,fixed bin),
	long_op$io entry(ptr,fixed bin(15)),
	generate_constant$real_fix_bin_1 entry(fixed bin) returns(ptr),
	load entry(ptr,fixed bin),
	base_man$load_var entry(fixed bin,ptr,fixed bin);
dcl	base_man$load_linkage entry returns(bit(3) aligned);
dcl	(compile_exp, fortran_$fortran_io_op) entry(ptr),
	compile_exp$save_exp entry(ptr) returns(ptr),
	prepare_operand entry(ptr,fixed bin,bit(1) aligned) returns(ptr),
	xr_man$load_var entry(ptr,fixed bin(17)),
	xr_man$super_lock entry(fixed bin(17)),
	c_a entry(fixed bin(18),fixed bin) returns(ptr),
	base_man$store_ptr_to entry(ptr,ptr),
	state_man$erase_reg entry(bit(19) aligned),
	state_man$flush_ref entry(ptr),
	state_man$flush entry();
dcl	m_a entry(ptr,bit(2) aligned);
dcl	expmac$zero entry(fixed bin(15)),
	aq_man$lock entry(ptr,fixed bin);
dcl	copy_temp entry(ptr) returns(ptr);
dcl	stack_temp$assign_temp entry(ptr),
	declare_temporary entry(bit(36) aligned,fixed bin(31),fixed bin(15),ptr) returns(ptr);

dcl (	get_term_mac	init(313),
	put_data_mac	init(328),
	lda		init(1),
	ldfx1		init(7),
	stfx1		init(15),
	zero_mac		init(308),
	symtab_mac	init(320),
	init_ps_mac	init(339),
	init_sslp		init(340),
	io_macro(0:15)	init(495,499,0,503,507,(8)0,587,498,506),
	put_field_mac		init(502),
	stream_prep_mac	init(396),
	recio_mac		init(485),
	form_desc		init(513),
	load_pt		init(60)) fixed bin(15) int static;

dcl	fixbin fixed bin based aligned;

%include ps_map;
%include block;
%include symbol;
%include reference;
%include statement;
%include operator;
%include list;
%include op_codes;
%include statement_types;
%include bases;
%include machine_state;
%include relocation_bits;
%include data_types;
%include boundary;
%include mask;

	p = pt;

	if p -> operator.op_code > record_io
	then if p -> operator.op_code < put_control
	     then do;
	          call fortran_$fortran_io_op(p);
	          return;
	          end;
	     else quick_stream_op = "1"b;

	psp = cg_stat$cur_block -> block.plio_ps -> element(1);
	psr = psp -> symbol.reference;

	rand(1) = p -> operand(1);
	rand(2) = p -> operand(2);
	rand(3) = p -> operand(3);
	if p -> op_code = stream_prep
	then do;
	     arg(1) = rand(1);
	     arg(2) = prepare_operand(rand(2),-1,atomic);
	     call ma_and_flush(2);
	     call expmac$many((stream_prep_mac),addr(arg),2);
	     arg(1) -> reference.perm_address = "0"b;
	     arg(2) -> reference.perm_address = "0"b;
	     return;
	     end;

	if p -> op_code = record_io
	then do;
	     arg(1) = rand(1);
	     call ma_and_flush(1);

	     if p -> operator.number = 2
	     then do;
		arg(2) = prepare_operand(rand(2),-1,atomic);
		call base_man$load_var(2,arg(2),1);
		end;

	     call expmac((recio_mac),arg(1));
	     arg(1) -> reference.perm_address = "0"b;
	     return;
	     end;

	if p -> op_code = terminate_trans
	then do;
	     call ma_and_flush(0);
	     call expmac$zero(get_term_mac + fixed(cg_stat$cur_statement -> statement_type = put_statement,1));
	     return;
	     end;

	psloc = psp -> symbol.location;

	if p -> op_code = get_data_trans
	then do;

	     /* set ptr to OK list */

	     if rand(1) -> operator.number = 0
	     then do;
		q = generate_constant$real_fix_bin_1(0);
		call state_man$flush;
		end;
	     else do;
		ok = rand(1) -> operator.number;
		q = c_a((ok),10);
		do i = 1 to addrel(cg_stat$text_base,ok) -> fixbin;	/* KLUDGE to find out original number of operands */
		     call state_man$flush_ref((rand(1) -> operand(i)));
		end;
		end;

	     call base_man$store_ptr_to(q,c_a(psloc + ps_special_list,4));
	     return;
	     end;

	if p -> op_code = put_data_trans
	then do;

	     /* process subscript list */

	     sslp = cg_stat$cur_block -> block.plio_ssl;
	     n = sslp -> symbol.location;
	     sslp = sslp -> symbol.reference;

	     sslp -> reference.perm_address = "0"b;

	     if rand(1) = null then call expmac((zero_mac),sslp);
	     else do;
		call expmac((ldfx1),c_a((rand(1) -> list.number),2));
		call expmac((stfx1),sslp);
		sslp -> reference.perm_address = "1"b;

		do i = 1 to rand(1) -> list.number;
		     sslp -> address.offset = bit(fixed(n+i,15),15);

		     p2 = rand(1) -> element(i);
		     p3 = prepare_operand(p2,1,atomic);
		     if atomic then call load(p3,0); else call compile_exp(p2);

		     call expmac((stfx1),sslp);
		     end;
		end;

	     p2 = prepare_operand(rand(2),-1,atomic);

	     /* put symtab offset into ps */

	     call protect_areg;
	     q = c_a(fixed(rand(2) -> reference.symbol -> symbol.runtime,18),2);
	     q -> reference.relocation = rc_s;
	     call expmac((lda),q);

	     macro = put_data_mac;
	     goto l2;
	     end;

	if p->op_code = put_control
	then do;
	     p2 = prepare_operand(rand(2),-1,atomic);

	     p3 = prepare_operand(rand(1),-1,atomic);
	     call compile_exp(rand(2));
	     call xr_man$load_var(rand(1),6);

	     call expmac$zero((io_macro(13)));
	     return;
	     end;

	/* get|put list|edit */

	p2 = prepare_operand(rand(2),-1,atomic);

	if ^ atomic then p2 = compile_exp$save_exp(rand(2));

	if rand(1) ^= null
	then p3 = prepare_operand(rand(1),-1,atomic);
	else do;
	     p3 = c_a(0,2);
	     p3 -> reference.data_type = real_fix_bin_1;
	     atomic = "1"b;
	     end;

	if p->op_code = put_field_chk 
	then do;
	     p4 =prepare_operand(rand(3),-1,useless);
	     call xr_man$load_var(rand(3),6);
	     call xr_man$super_lock(6);
	     end;

	if atomic 
	then call load(p3,0);
	else if quick_stream_op
	     then call compile_exp(rand(1));
	     else do;
		q = rand(1) -> operand(3);
		p3 = prepare_operand(q,1,atomic);
		if atomic then call load(p3,0); else call compile_exp(q);
		call expmac((form_desc),prepare_operand((rand(1) -> operand(2)),-1,atomic));
		end;

	macro = io_macro(fixed(substr(p -> op_code,6,4),4));

	p3 = p2 -> reference.symbol;
	if p3 -> symbol.picture
	then if ^quick_stream_op
	then do;
	     p3 = c_a((p3 -> symbol.general -> reference.symbol -> symbol.location),3);
	     p3 -> reference.relocation = rc_t;
	     call protect_areg;
	     call expmac((lda),p3);
	     end;

l2:	call long_op$io(p2,macro);
	if p -> op_code = get_list_trans | p -> op_code = get_edit_trans
	     then call state_man$flush_ref(p2);
	return;

io_op$init_ps: entry;

	/* This entry is called to initialize the ps space */

	psp = cg_stat$cur_block -> block.plio_ps -> element(1);
	arg(1) = psp -> symbol.reference;
	arg(1) -> reference.units = word_;

	call expmac((init_ps_mac),arg(1));
	arg(1) -> reference.perm_address = "0"b;

	base_regs(1).type = 0;
	arg(1) -> reference.address_in.b(1) = "0"b;

	if cg_stat$generate_symtab
	then do;
	     arg(2) = c_a(fixed(cg_stat$star_symbol_up_zero,18),9);
	     arg(2) -> address.base = base_man$load_linkage();

	     arg(3) = c_a((cg_stat$cur_block -> block.symbol_block),3);
	     arg(3) -> reference.relocation = rc_s;

	     call expmac$many((symtab_mac),addr(arg),3);
	     end;

	sslp = cg_stat$cur_block -> block.plio_ssl;
	if sslp ^= null
	then do;
	     arg(2) = sslp -> symbol.reference;
	     arg(2) -> reference.units = word_;
	     call expmac$many((init_sslp),addr(arg),2);
	     end;

	sslp = cg_stat$cur_block -> block.plio_fa;
	if sslp ^= null
	then do;
	     sslp -> symbol.reference -> reference.units = word_;
	     call base_man$store_ptr_to((sslp -> symbol.reference),
	       c_a(psp -> symbol.location + ps_format_area,4));
	     end;



ma_and_flush:	proc(n);
dcl	(i,n) fixed bin;

	do i = 1 to n;
	     call m_a(arg(i),"0"b);
	     arg(i) -> reference.perm_address = "1"b;
	end;

	call state_man$erase_reg((odd_bases));

	end;

/*	NOT PRESENTLY USED

get_temp:	proc() returns(ptr);

dcl	r ptr;

     */	/* returns reference to a char(256) varying temporary */	/*

	r = declare_temporary(char_mask | varying_mask | aligned_mask,256,0,null);
	r = copy_temp(r);
	r -> reference.c_length = r -> reference.symbol -> symbol.c_dcl_size;
	r = prepare_operand(r,1,atomic);
	call stack_temp$assign_temp(r);
	return(r);

	end;

	MAYBE SOMEDAY AGAIN	*/

protect_areg:  proc;

	/* makes sure that long_op does not clobber the a_register by 
	   calling base_man (fixes bug 1282) */

	if p2 -> reference.units < word_ | p2 -> reference.big_offset
	then do;
	     call aq_man$lock(null,2);
	     if ^ p2 -> reference.shared
		then p2 -> reference.ref_count = p2 -> reference.ref_count + 1;
	     call base_man$load_var(2,p2,1);
	     end;

	end;

end;
