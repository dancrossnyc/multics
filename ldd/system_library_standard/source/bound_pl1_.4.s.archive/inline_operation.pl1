/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* This procedure decides if an operation can be done inline
   or if it requires the generation of a call

   Initial Version: 25 October 1972 by BLW	*/

inline_operation: proc(node_pt,ref,atom) returns(bit(1) aligned);

dcl	node_pt ptr,		/* points at operator node */
	ref(3) ptr,		/* ptrs to reference nodes for operands */
	atom(3) bit(1) aligned;	/* "1"b if operand(i) atomic */

dcl	(null,string) builtin,
	complex_operand(3) bit(1) unaligned;

dcl	compile_exp$save entry(ptr) returns(ptr);

%include reference;
%include symbol;
%include operator;
%include data_types;
%include op_codes;

	string(complex_operand) = "0"b;

	if ref(1) ^= null then call test(1);

	call test(2);

	if node_pt -> operator.number = 3 then call test(3);

	if string(complex_operand)
	then do;

	     if node_pt -> operator.op_code = abs_fun then goto no;

	     if ^ complex_operand(2)
	     then if ref(2) -> reference.data_type ^= real_flt_bin_1
		then goto no;

	     if node_pt -> operator.number = 3
	     then if ^ complex_operand(3)
		then if ref(3) -> reference.data_type ^= real_flt_bin_1
		     then goto no;
	     end;

yes:	return("1"b);

no:	return("0"b);

test:	     proc(k);

dcl	     k fixed bin,
	     (p,s) ptr;

	     p = ref(k);
	     s = p -> reference.symbol;

	     if s -> symbol.decimal then goto no;

	     if s -> symbol.complex
	     then do;
		if p -> reference.data_type ^= complex_flt_bin_1 then goto no;
		complex_operand(k) = "1"b;
		if k > 1
		then if ^ atom(k)
		then if ^ p -> reference.aligned_ref
		then do;
		     ref(k) = compile_exp$save((node_pt -> operand(k)));
		     atom(k) = "1"b;
		     end;
		end;

	     end;

	end;
