/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* This procedure compiles decimal arithmetic expressions.

   Initial Version:	28 September 1973 by RAB
	Modified:	9 March 1978 by RAB to fix 1714 (use compile_exp$save_exp instead of $save)
	Modified: 25 April 1979 by PCK to implement 4-bit decimal			*/

decimal_op:	proc(node_pt,refs,atom);

dcl	node_pt ptr,		/* points at operator node */
	refs(3) ptr,		/* ptrs to ref nodes of operands */
	atom(3) bit(1) aligned;	/* ON if operand is atomic */

dcl	(op,p(128),s(128),q,r,imag(2)) ptr;
dcl	op_code bit(9) aligned;
dcl	(i,iop,j,max_scale,min_scale,ninst,scale(128),number,ltemp) fixed bin;
dcl	(macro,mac) fixed bin(15);
dcl	const char(2) aligned;
dcl	(adjust,atomic,all_fixed) bit(1) aligned;
dcl	mask bit(36) aligned;

dcl (	move_rounded	init(439),
	d3mac(0:5)	init(438,440,446,450,456,451),
	d2mac(4)		init(442,448,454,458),
	cplx_ops(3:4)	init(465,466),
	abs_decimal	init(473),
	abs_decimal_4bit	init(737),
	move_numeric	init(438),
	min_dec		init(474),
	max_dec		init(475),
	mod_dec		init(546),
	dvrcdec		init(467)) fixed bin(15) int static;

/* Meaning of iop:
	0	move
	1	add
	2	sub
	3	mult
	4	div
	5 	mult_rounded  */

dcl	1 exponent aligned,		/* exponent of a float dec constant */
	2 pad bit(1) unal,
	2 value fixed bin(7) unal;

dcl	exponent_char char(1) based(addr(exponent)) aligned;

dcl	1 op_table(0:5) aligned int static,
	2 macro fixed bin(15) init(541,542,0,543,544,545),
	2 ltemp fixed bin init(1,1,0,0,80,1);

dcl	(addr,bit,divide,fixed,length,max,min,mod,null,string) builtin;

dcl	adjust_ref_count entry(ptr,fixed bin);
dcl	assign_op$fix_dec_scaled entry(ptr);
dcl	(base_man$update_base,base_man$load_var_and_lock) entry(fixed bin,ptr,fixed bin);
dcl	c_a entry(fixed bin,fixed bin) returns(ptr);
dcl	compare_expression entry(ptr,ptr) returns(bit(1) aligned) reducible;
dcl	compile_exp$save_exp entry(ptr) returns(ptr);
dcl	copy_temp entry(ptr) returns(ptr);
dcl	declare_temporary entry(bit(36) aligned,fixed bin(31),fixed bin(15),ptr) returns(ptr);
dcl	expmac entry(fixed bin(15),ptr);
dcl	expmac$many_eis entry(fixed bin(15),ptr,fixed bin);
dcl	expmac$two_eis entry(fixed bin(15),ptr,ptr);
dcl	expmac$one_eis entry(fixed bin(15),ptr);
dcl	generate_constant$relocatable entry(ptr,fixed bin,bit(1) aligned) returns(ptr);
dcl	generate_constant$char_string entry(char(*) aligned,fixed bin) returns(ptr);
dcl	get_imaginary entry(ptr) returns(ptr);
dcl	make_n_addressable entry(ptr,fixed bin);
dcl	prepare_operand entry(ptr,fixed bin,bit(1) aligned) returns(ptr);
dcl	state_man$unlock entry;

%include op_codes;
%include operator;
%include symbol;
%include cg_reference;
%include data_types;
%include cgsystem;
%include mask;
%include nodes;
%include machine_state;

	/* Initialize and compile any non-atomic operands */

	ninst = 1;
	op = node_pt;
	op_code = op -> operator.op_code;
	all_fixed = "1"b;
	number = op -> operator.number;

	do i = 1 to number;
	     if ^ atom(i)
		then p(i) = compile_exp$save_exp((op -> operand(i)));
		else p(i) = refs(i);
	     s(i) = p(i) -> reference.symbol;
	     scale(i) = s(i) -> symbol.scale;
	     all_fixed = all_fixed & s(i) -> symbol.fixed;
	     end;

	adjust = ^ (p(1) -> reference.temp_ref | p(1) -> reference.shared);

	/* Handle negate case */

	if op_code = negate
	then do;
	     if s(1) -> symbol.complex
	     then do;
		ninst = 2;

		/* We will multiply by -1 */

use_mult:		iop = 3;
		const = "-1";
		end;
	     else do;
		if ^ p(1) -> reference.temp_ref
		then if compare_expression(p(1),p(2))
		     then go to use_mult;

		/* we will subtract from zero */

		iop = 2;
		const = "+0";
		end;

	     p(3) = p(2);
	     s(3) = s(2);
	     p(2) = generate_constant$char_string(const,2);
	     p(2) -> reference.data_type = real_fix_dec;
	     s(2) = p(2) -> reference.symbol;

	     call issue;
	     return;
	     end;


	/* Split off the builtins */

	if op_code > div then go to builtin;

	/* Now, we handle the other arithmetic cases.  Most code in the external procedure
	   past here deals with ensuring that the scales of the operands fall within the
 	   limits of the 6180's EIS descriptors. */

	if s(1) -> symbol.complex then ninst = 2;

	iop = fixed(op_code,9) - 16;		/* encode operation */

	if iop <= 2
	then do;

	     max_scale = max(scale(1),scale(2),scale(3));
	     min_scale = min(scale(1),scale(2),scale(3));

	     if max_scale <= max_dec_scale & min_scale >= min_dec_scale
	     then call issue;

	     else if max_scale - min_scale <= max_dec_scale - min_dec_scale & all_fixed
		then do;
		     do i = 1 to 3 while(scale(i) ^= max_scale);
		     end;

		     do j = 1 to 3;
			s(j) -> symbol.scale = max_dec_scale - scale(i) + scale(j);
			end;

		     call issue;

		     do j = 1 to 3;
			s(j) -> symbol.scale = scale(j);
			end;
		     end;

		else do;
		     call fix_scales;
		     call issue;
		     end;

	     return;
	     end;

	call fix_scales;

	if s(1) -> symbol.complex
	then if s(2) -> symbol.complex | iop = 4
	     then if s(3) -> symbol.complex
		then do;
		     ltemp = 48;
		     macro = cplx_ops(iop);
		     if ^ s(2) -> symbol.complex
			then macro = dvrcdec;
		     call gen_call;
		     return;
		     end;

	if iop = 4
	then if s(1) -> symbol.float
	     then do;

		/* Due to a hardware deficiency, floating point division must be done into
		   a temporary whose precision is 2 greater than that of the target's, and
		   the result is then moved into the target */

		q = p(1);
		p(1) = decimal_op$get_float_temp(s(1) -> symbol.c_dcl_size + 2,(s(1) -> symbol.complex));

		call issue;

		p(2) = p(1);
		p(1) = q;
		s(2) = p(2) -> reference.symbol;
		iop = 0;

		call issue;
		return;
		end;

	call issue;
	return;



/* Section to do decimal builtins */

builtin:
	if op_code = abs_fun
	then if s(2) -> symbol.real
	     then do;
		iop = 0;
		if adjust
		     then p(1) -> reference.ref_count = p(1) -> reference.ref_count + 1;

		call issue;

		if s(1) -> symbol.unaligned
		then mac = abs_decimal_4bit;
		else mac = abs_decimal;

		call expmac$one_eis(mac,p(1));

		machine_state.indicators = min(machine_state.indicators,-1);
		return;
		end;


	if op_code = round_fun
	then do;

	     /* NOTE:  the following code assumes that the target has the proper pre-
		     cision and scale */

	     scale(3) = 0;
	     call fix_scales;

	     if s(1) -> symbol.complex then ninst = 2;

	     if s(1) -> symbol.float
	     then iop = 0;
	     else do;

		/* generate a multiply rounded by 10**K */

		iop = 5;
		s(1) -> symbol.scale = 0;
		s(2) -> symbol.scale = 0;
		p(3) = p(2);
		s(3) = s(2);
		exponent.pad = "0"b;
		exponent.value = scale(1) - scale(2);
		p(2) = generate_constant$char_string("+1" || exponent_char,3);
		s(2) = p(2) -> reference.symbol;
		end;

	     call issue;

	     if s(1) -> symbol.fixed
	     then do;
		s(1) -> symbol.scale = scale(1);
		s(3) -> symbol.scale = scale(2);
		end;
	     return;
	     end;

	if op_code = min_fun | op_code = max_fun
	then do;
	     call fix_scales;
	     if op_code = min_fun
		then macro = min_dec;
		else macro = max_dec;
	     mac = move_numeric + fixed(s(1) -> symbol.float,1);

	     if adjust
		then p(1) -> reference.ref_count = p(1) -> reference.ref_count + 1;

	     call expmac$two_eis(mac,p(1),p(2));

	     do i = 3 to number;
		if ^ p(i) -> reference.shared
		     then p(i) -> reference.ref_count = p(i) -> reference.ref_count + 1;
		if adjust
		     then p(1) -> reference.ref_count = p(1) -> reference.ref_count + 2;
		call expmac$two_eis(macro,p(1),p(i));
		call expmac$two_eis(mac,p(1),p(i));
		end;

	     if adjust
		then call adjust_ref_count(p(1),-1);
	     refs(2) = p(2);
	     return;
	     end;

	if op_code = trunc_fun
	then do;
	     call fix_scales;
	     if s(1) -> symbol.fixed
	     then do;
		call expmac$two_eis((move_numeric),p(1),p(2));
		return;
		end;
	     end;

	if op_code = complex_fun
	then do;
	     imag(1) = get_imaginary(p(1));
	     macro = move_numeric + fixed(s(1) -> symbol.float,1);
	     call expmac$two_eis(macro,p(1),p(2));
	     call expmac$two_eis(macro,imag(1),p(3));
	     return;
	     end;

	if op_code = real_fun | op_code = imag_fun
	then do;
	     if op_code = real_fun
	     then q = p(2);
	     else do;
		q = get_imaginary(p(2));
		if ^ p(2) -> reference.shared
		     then call adjust_ref_count(p(2),-1);
		end;

	     call expmac$two_eis(move_numeric + fixed(s(1) -> symbol.float,1),p(1),q);

	     return;
	     end;

	if op_code = conjg_fun
	then do;
	     imag(1) = get_imaginary(p(1));
	     imag(2) = get_imaginary(p(2));

	     iop = 0;
	     call issue;

	     p(1) = imag(1);
	     p(2) = imag(2);
	     go to use_mult;
	     end;

/* Anything that reaches here results in calls to pl1_operators_ */

	if op_code ^= sign_fun
	then if op_code ^= abs_fun
	     then call fix_scales;
	     else;
	else do;
	     number = 1;
	     p(1) = p(2);
	     s(1) = s(2);
	     scale(1) = scale(2);
	     end;

	if op_code = pl1_mod_fun
	then do;

	     /* dec_ops_ will get stack extension */

	     ltemp = 0;
	     macro = mod_dec;
	     end;
	else do;
	     iop = fixed(op_code,9) - 144;
	     macro = op_table(iop).macro;
	     ltemp = op_table(iop).ltemp;
	     if ltemp = 1
		then ltemp = divide(p(2) -> reference.c_length + 3,chars_per_word,17,0);
	     end;

	call gen_call;
	return;





/* decimal_op$get_float_temp returns a floating decimal temporary of precision prec which is
   complex is complex is ON */

decimal_op$get_float_temp:	entry(prec,complex) returns(ptr);

dcl	prec fixed bin(24);
dcl	complex bit(1) aligned;

	if complex
	     then mask = complex_mask;
	     else mask = real_mask;

	r = declare_temporary(mask | float_mask | decimal_mask | aligned_mask,(prec),
				0,null);
	r = copy_temp(r);
	r = prepare_operand(r,1,atomic);
	return(r);



/* decimal_op$change_target is called when the target of a decimal arithmetic
   operation has a scale outside of hardware limits to determine if the target
   should be converted to floating point */

decimal_op$change_target:	entry(node_pt) returns(bit(1) aligned);

	op = node_pt;
	op_code = op -> operator.op_code;

	if op_code = add | op_code = sub
	then do;
	     scale(1) = op -> operand(1) -> reference.symbol -> symbol.scale;
	     do i = 2 to 3;
		if op -> operand(i) -> node.type = reference_node
		     then p(i) = op -> operand(i);
		     else p(i) = prepare_operand((op -> operand(i)),1,atomic);
		if p(i) -> reference.symbol -> symbol.float
		     then return("1"b);
		scale(i) = p(i) -> reference.symbol -> symbol.scale;
		end;

	     if max(scale(1),scale(2),scale(3)) - min(scale(1),scale(2),scale(3))
	           <= max_dec_scale - min_dec_scale
		then return("0"b);
	     end;

	return("1"b);



issue:	proc;

dcl	arg(2,3) ptr;
dcl	(i,nrands) fixed bin;
dcl	macro fixed bin(15);
dcl	(use_move,switch_rands) bit(1) aligned;

/* This routine does most of the work of issuing a decimal macro.  It must handle the cases
   concerning complex operands and cases in which the target variable is the same as one
   of the sources */

	use_move = "0"b;

	if iop ^= 0
	     then nrands = 3;
	     else nrands = 2;
	macro = d3mac(iop);

	if ^ p(1) -> reference.temp_ref
	then do i = 2 to mod(iop,2) + 2;

	     /* If the target is not a temporary, it may be one of the sources as well */

	     if compare_expression(p(1),p(i))
	     then do;
		if ^ p(i) -> reference.shared
		     then call adjust_ref_count(p(i),-1);
		if nrands = 2
		then do;
		     if adjust
			then call adjust_ref_count(p(1),-1);
		     return;
		     end;
		nrands = 2;
		macro = d2mac(iop);
		if i = 2
		then do;
		     p(2) = p(3);
		     s(2) = s(3);
		     scale(2) = scale(3);
		     end;
		if iop <= 2
		then if ^ s(2) -> symbol.complex
		     then ninst = 1;
		go to adjust_mac;
		end;
	     end;

adjust_mac:
	macro = macro + fixed(s(1) -> symbol.float,1);

	/* fill in the argument lists */

	do i = 1 to nrands;
	     arg(1,i) = p(i);
	     if ninst > 1
	     then if s(i) -> symbol.complex
		then arg(2,i) = get_imaginary(p(i));
		else if iop = 1
		     then do;
			use_move = "1"b;
			switch_rands = i = 2;
			end;
		     else if iop = 2
			then if i = 3
			     then do;
				use_move = "1"b;
				switch_rands = "0"b;
				end;
			     else do;
				arg(2,i) = generate_constant$char_string("+0",2);
				arg(2,i) -> reference.data_type = real_fix_dec;
				end;
			else do;
			     if ^ p(i) -> reference.shared
				then p(i) -> reference.ref_count = p(i) -> reference.ref_count + 1;
			     arg(2,i) = p(i);
			     end;
	     end;

	/* Now, issue the macro . */

	do i = 1 to ninst;
	     if use_move
	     then if i = ninst
		then do;
		     macro = d3mac(0);
		     nrands = 2;
		     if switch_rands
			then arg(2,2) = arg(2,3);
		     end;
	     call expmac$many_eis(macro,addr(arg(i,1)),nrands);
	     end;

	end;


fix_scales:	proc;

	/* replaces fixed scaled inputs whose scales are outside hardware limits with their
	   floating point equivalents */

	do i = 2 to number;
	     if scale(i) > max_dec_scale | scale(i) < min_dec_scale
	     then do;
		call assign_op$fix_dec_scaled(p(i));
		s(i) = p(i) -> reference.symbol;
		scale(i) = 0;
		end;
	     end;
	end;

gen_call:	proc;

	/* generates a call to pl1_operators_ to do decimal operation */

dcl	(desc,work) ptr;
dcl	clength fixed bin(6);
dcl	one_rand bit(1) aligned;

dcl	1 descriptor(3) aligned,
	2 address	bit(18) unal,
	2 fract	bit(2) unal,
	2 type	bit(4) unal,
	2 dscale	fixed bin(5) unal,
	2 dlength bit(6) unal;

dcl	1 four_bit_descriptor(3) aligned based(addr(descriptor)),	/* EIS 4-bit operand descriptor */
	2 address bit(18) unal,
	2 fract	bit(3) unal,
	2 type	bit(3) unal,
	2 dscale	fixed bin(5) unal,
	2 dlength bit(6) unal;

	/* get a pointer to a work area into the ab */

	if ltemp > 0
	then do;
	     work = c_a(ltemp,12);
	     work -> reference.ref_count = 2;
	     call base_man$load_var_and_lock(2,work,3);
	     end;

	/* make sure bp is uninvolved in addressing code for the decimal operands */

	call base_man$update_base(0,null,1);

	/* make all decimal operands addressable without any tags */

	call make_n_addressable(addr(p),- number);

	/* now build a string of descriptors for use by the operator */

	do i = 1 to number;
	     descriptor(i).address = string(p(i) -> reference.address);
	     if s(i) -> symbol.unaligned
	     then do;
		     four_bit_descriptor(i).fract = bit(fixed(p(i) -> reference.c_f_offset,3),3);
		     four_bit_descriptor(i).type = "10"b || s(i) -> symbol.fixed;
		end;
	     else do;
		     descriptor(i).fract = bit(fixed(p(i) -> reference.c_f_offset,2),2);
		     descriptor(i).type = "000"b || s(i) -> symbol.fixed;
		end;
	     descriptor(i).dscale = - scale(i);
	     clength = p(i) -> reference.c_length;
	     if s(i) -> symbol.complex
		then clength = divide(clength,2,6,0);
	     descriptor(i).dlength = bit(clength,6);
	     end;

	desc = generate_constant$relocatable(addr(descriptor),number,"0"b);

	/* generate the operator call */

	call expmac(macro,desc);

	/* unlock the registers and decrement the operands' reference counts */

	call state_man$unlock;

	if ltemp > 0
	     then call adjust_ref_count(work,-1);

	one_rand = number = 1;

	do i = 1 to number;
	     if ^ p(i) -> reference.shared
	     then if ^ p(i) -> reference.temp_ref | i > 1 | one_rand
		then call adjust_ref_count(p(i),-1);
	     end;

	end;

end;
