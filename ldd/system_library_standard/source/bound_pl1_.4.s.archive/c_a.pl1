/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* This procedure is called with a constant and a code.  It is used
   to generate various types of referencees using the constant.

   Initial Version: 30 September 1968 by BLW 
	Modified: 19 March 1971 by BLW for Version II
	Modified: 24 August 1972 by BLW
	Modified:	4 June 1975 by RAB for separate_static
	Modified 791026 by PG for TCT tables in pl1_operators_
*/

c_a:	proc(pc,code) returns(ptr);

dcl	(c,pc) fixed bin(15),		/* constant value */
	code fixed bin,		/* what type of reference */
	table_subscript fixed bin,
	word_delta fixed bin;

dcl	(ref_pt,p) ptr,
	xr fixed bin(3),
	n fixed bin(15),
	mask_array fixed static init(0),	/* loc of mask array */
	blank_array fixed static init(288),	/* loc of blank array */
	array_mask fixed static init(144),	/* loc of mask2 array */
	xr_man$load_any_const entry(fixed bin,fixed bin(3)),
	get_reference ext entry returns(ptr);
dcl	base_man$load_linkage entry returns(bit(3) aligned);
dcl	base_man$load_static entry returns(bit(3) aligned);
dcl	stack_temp$assign_temp entry(ptr);

dcl	(addr,bit,divide,fixed,substr,mod) builtin;

dcl	1 word		aligned based(p),
	2 offset		unaligned bit(18),
	2 rhs		unaligned bit(18);

/* internal static */

dcl	tct_byte_offset (0:3) fixed bin int static init (-627, -499, -371, -243);	/* from assembly of pl1_operators_ */

/* include files */

%include reference;
%include temporary;
%include bases;
%include relocation_bits;

/* program */

	ref_pt = get_reference();
	p = addr(ref_pt -> reference.address);
	c,n = pc;
	goto sw(code);

	/* reference is c itself */

sw(1):	if n >= 0 then p -> word.offset = bit(fixed(n,18),18);
	else p -> word.offset = bit(fixed(262144 + n,18),18);

done:	ref_pt -> reference.no_address = "0"b;
	ref_pt -> reference.perm_address = "1"b;
	return(ref_pt);

	/* reference is c,dl */

sw(2):	ref_pt -> address.tag = "000111"b; /* dl */
	goto sw(1);

	/* reference is c,du */

sw(3):	ref_pt -> address.tag = "000011"b; /* du */
	goto sw(1);

	/* reference is sp|c */

sw(4):	ref_pt -> address.base = sp;

	if mod(n,2) = 0 then ref_pt -> reference.even = "1"b;

l2:	if n >= 16384
	then do;
	     n = mod(n,16384);
	     call xr_man$load_any_const(c-n,xr);
	     substr(ref_pt -> address.tag,3,4) = "1"b || bit(xr,3);
	     end;

	ref_pt -> address.ext_base = "1"b;
	ref_pt -> address.offset = bit(fixed(n,15),15);;
	goto done;

	/* reference is ap|mask_array+2*c, where referenceed location
	   contains a string with c 1's followed by 72-c 0's */

sw(5):	ref_pt -> address.offset = bit(fixed(mask_array+2*n,15),15);
l1:	ref_pt -> address.base = ap;
	ref_pt -> address.ext_base = "1"b;
	ref_pt -> reference.even = "1"b;
	goto done;

	/* reference is ap|blank_array+2*c, where referenceed location
	   contains a string with c 0 char's followed by 8-c blanks */

sw(6):	ref_pt -> address.offset = bit(fixed(blank_array+2*divide(n,9,17,0),15),15);
	goto l1;

	/* reference is ap|array_mask+2*c, where referenceed location
	   contains a string with c 0's followed by 72-c 1's */

sw(7):	ref_pt -> address.offset = bit(fixed(array_mask+2*n,15),15);
	goto l1;

	/* reference is 0,c */

sw(8):	ref_pt -> address.tag = "001"b || bit(fixed(n,3),3);
	goto done;

	/* reference is lp|c,* (linkage section) */

sw(9):	ref_pt -> address.tag = "010000"b;	/* * */
	ref_pt -> address.base = base_man$load_linkage();
	ref_pt -> reference.relocation = rc_lp15;
	goto l2;

	/* reference is c,ic */

sw(10):	ref_pt -> reference.ic_ref = "1"b;
	ref_pt -> address.tag = "000100"b;	/* ic */
	if mod(n,2) = 0 then ref_pt -> reference.even = "1"b;
	goto sw(1);

	/* reference is bp|c */

sw(11):	ref_pt -> address.base = bp;
	goto l2;

	/* reference is to block of c words in stack */

sw(12):	ref_pt -> reference.c_length = n;
	ref_pt -> reference.temp_ref = "1"b;
	call stack_temp$assign_temp(ref_pt);
	c,n = ref_pt -> reference.qualifier -> temporary.location;
	goto sw(4);

	/* reference is to location c in static section */

sw(13):	ref_pt -> address.base = base_man$load_static();
	ref_pt -> reference.relocation = rc_is15;
	goto l2;

	/* reference is sp|c,* */

sw(14):	ref_pt -> address.tag = ref_pt -> address.tag | "010000"b;	/* * */
	go to sw(4);

	/* reference is lp|c,* (static section) */

sw(15):	ref_pt -> address.tag = ref_pt -> address.tag | "010000"b;	/* * */
	ref_pt -> reference.relocation = rc_is15;
	ref_pt -> address.base = base_man$load_static();
	go to l2;

	/* reference is ap|-n, where -n is the offset of the TCT table for c */

sw (16):
	word_delta = divide (c, 4, 9, 0);
	table_subscript = c - word_delta * 4;
	n = tct_byte_offset (table_subscript) - word_delta + 32768;
	ref_pt -> reference.address.base = ap;
	ref_pt -> reference.address.offset = bit (n, 15);
	ref_pt -> reference.address.ext_base = "1"b;
	/* dont care about even bit */
	go to done;

     end /* c_a */;
