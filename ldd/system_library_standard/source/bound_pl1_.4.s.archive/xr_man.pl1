/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* procedure to manage index registers

   Initial Version: 23 November, 1968 by BLW
	Modified: 18 May, 1971 by BLW for Version II
	Modified: 13 September, 1972 by BLW
	Modified: 11 February, 1973 by RAB
	Modified:	15 October 1975 by RAB for update_xr
	Modified:	3 November 1976 to fix 1545 by RAB
	Modified:	25 March 1977 by RAB to fix 1599
	Modified:	14 August 1978 by RAB to fix 1727
	Modified:	28 May 1979 by RAB to fix 1831 (a(b(i+j)-1) = 0;
		i = b(i+j); gets ERROR 315)
	Modified:	29 May 1979 by RAB to make minor changes to
		get_free_index, flush_old, and load_xr_v

   xr_man has the following entries:

   load_any_var	tries to find an index already holding specified
		variable.  if none exists, a new one is loaded.

   load_any_const	tries to find an index already holding specified
		constant.  if none exists, a new one is loaded

   load_var	loads specified index with variable unless index
		already holds variable

   load_const	loads specified index with constant unless index
		already holds constant

   lock		"locks" a variable in the index register in which
		it is known to be available;  a locked variable
		will be unloaded only if all the index registers
		become locked

   unlock		"unlocks" a variable

   super_lock	"super_locks" a variable in the index register in which it
		is known to be available.  A super_locked register cannot
		be unloaded.  This entry is called only from make_both_addressable.

   super_unlock	unlocks a register that was "super_locked"

   add_any_const	adds the contents of specified index register to specified constant
		and places result in any index register

   update_xr	updates the machine state to say that a variable is in the
		specified index

   The field "type" has the following meanings:

	0	empty

	1	constant

	2	variable + constant

	3	locked variable + constant

	-n	super_locked register of type n

						*/

xr_man$load_any_var: proc(var,xr,base_offset);

dcl	var	ptr,		/* points at var to be loaded */
	xr	fixed bin,	/* specifies index to load or loaded */
	base_offset fixed bin(18);	/* base offset to add to var */

dcl	cg_stat$last_index_used fixed bin ext,
	(cg_stat$text_pos,cg_stat$last_call) fixed bin(18) ext,
	(cg_stat$text_base,cg_stat$cur_statement) ptr ext,
	macro_table_$eax_array(0:15) fixed bin(15) ext static;

dcl	(p,vp) ptr,
	c fixed bin(18),
	sta_code bit(9) int static init("111101101"b),
	stq_code bit(9) int static init("111101110"b),
	staq_code bit(9) int static init("111101111"b),
	(i,j,k,type) fixed bin,
	lock bit(1) aligned init("0"b),
	expmac entry(fixed bin(15),ptr),
	c_a entry(fixed bin(18),fixed bin) returns(ptr),
	get_single_ref entry(ptr) returns(ptr),
	stack_temp$free_temp entry(ptr),
	adjust_ref_count entry(ptr,fixed bin),
	m_a entry(ptr,bit(2) aligned),
	error entry(fixed bin,ptr,ptr);

dcl	(abs,addrel,bit,fixed,min,mod,null,ptr,rel,string,substr) builtin;

dcl	word fixed bin based(p);

dcl	full_word bit(36) aligned based(p);

dcl	1 instruction	aligned based(p),
	2 offset		unal bit(18),
	2 op_code		unal bit(9),
	2 rest		unal bit(9);

dcl (	first_index	init(2),
	last_index	init(7)) fixed bin int static;

dcl	zero_mac 		init(308) fixed bin(15) int static;

%include cgsystem;
%include data_types;
%include boundary;
%include machine_state;
%include reference;
%include temporary;
%include symbol;
%include operator;
%include nodes;
%include "645op5";

	/* get ptr to variable */

join:	vp = var;

	j,k = -1;

	do i = first_index to last_index;
	     type = abs(index_regs(i).type);
	     if type = 0 then k = i;
	     else if type >= 2
		then if index_regs(i).variable = vp
		     then do;
			j = i;
			if index_regs(i).constant = base_offset then goto set_i_dec;
			end;
	     end;

	/* must load a register */

	call when_to_m_a;
	call get_free_index;
	c = base_offset;
	call load_xr_v(k);

ret_k:	xr = k;
	if lock
	     then index_regs(xr).type = -abs(index_regs(xr).type);
	return;

set_i_dec:
	if ^ vp -> reference.shared then call adjust_ref_count(vp,-1);

set_i:	index_regs(i).used = cg_stat$text_pos;

	xr = i;
	if lock
	     then index_regs(xr).type = -abs(index_regs(xr).type);
	return;

xr_man$load_any_const: entry(const,xr);

dcl	const	fixed bin(18);	/* value of constant to be loaded */

	k = -1;
	do i = first_index to last_index;
	     type = abs(index_regs(i).type);
	     if type = 0 then k = i;
	     else if type = 1
		then if index_regs(i).constant = const then goto set_i;
	     end;

	/* did not have index register holding exact value of
	   the constant, must load one */

	call get_free_index;
	call load_xr_c(k);
	goto ret_k;

xr_man$load_var: entry(var,xr);

	i = xr;

	vp = var;

	if index_regs(i).type < 2 then goto lv;
	if index_regs(i).variable ^= vp then goto lv;
	if index_regs(i).constant = 0
	then do;
	     if ^ vp -> reference.shared
	     then call adjust_ref_count(vp,-1);
	     goto lc_used;
	     end;

lv:	c = 0;
	j,k = -1;
	cg_stat$last_index_used = i;
	call when_to_m_a;
	call load_xr_v(xr);
	return;

xr_man$load_const:	entry(const,xr);

	i = xr;
	if index_regs(i).type ^= 1 then goto lc;

	if index_regs(i).constant = const
	then do;
lc_used:	     index_regs(i).used = cg_stat$text_pos;
	     return;
	     end;

lc:	call load_xr_c(xr);
	cg_stat$last_index_used = i;
	return;


xr_man$lock: entry(var,xr);

	i = xr;
	var -> reference.value_in.x(i) = "1"b;
	index_regs(i).variable = var;
	index_regs(i).type = 3;
	return;

xr_man$unlock: entry(ix);

dcl	ix fixed bin;

	index_regs(ix).type = 2;
	return;


xr_man$super_lock:	entry(ix);

	index_regs(ix).type = -abs(index_regs(ix).type);
	return;


xr_man$super_unlock:	entry(ix);

	index_regs(ix).type = abs(index_regs(ix).type);
	return;


xr_man$add_any_const:	entry(const,xr,old_xr);

dcl	old_xr fixed bin;

	j = old_xr;
	c = index_regs(j).constant + const;

	if index_regs(j).type >= 2
	then do;
	     vp = index_regs(j).variable;

	     if ^ vp -> reference.shared
		then vp -> reference.ref_count = vp -> reference.ref_count + 1;

	     call xr_man$load_any_var(vp,xr,c);

	     end;
	else call xr_man$load_any_const(c,xr);

	return;


xr_man$load_any_var_and_lock:	entry(var,xr,base_offset);

	lock = "1"b;
	go to join;


xr_man$update_xr:	entry(var,xr);

	vp = var;
	i = xr;

	call flush_old(i);

	vp -> reference.value_in.x(i) = "1"b;
	index_regs(i).type = 2;
	index_regs(i).variable = vp;
	index_regs(i).constant = 0;
	index_regs(i).used = cg_stat$text_pos;
	return;

/*  */


when_to_m_a:	proc;
dcl	p ptr;

/* Decide whether we must make vp addressable before looking for a free index register
   and loading vp */

	if j >= 0 then return;
	if vp->reference.value_in.a then return;
	if vp->reference.value_in.q then return;
	if string(vp->reference.value_in.x) then return;
	if ^ vp -> reference.no_address
	     then if vp -> reference.perm_address
		     then return;

	do p = vp->reference.offset repeat p->reference.offset while (p ^= null);
		if p->node.type = operator_node
		     then p = p->operand(1);
		if p->reference.ref_count > 1
		 | p -> reference.temp_ref & string(p -> reference.value_in.x) = "0"b
		then do;
			call m_a(vp,"0"b);
			vp->reference.perm_address = "1"b;
			if k >= 0
			     then if index_regs(k).type ^= 0
				then do;
					k = -1;
					do i = first_index to last_index;
						if index_regs(i).type = 0
						     then k = i;
					end;
				     end;
			return;
		     end;
	end;
end;



/*  */
get_free_index: proc;

	     /* if an empty register was found during scan use that,
	        otherwise, try to pick a register containing a constant;
	        if none, try to pick register containing unlocked
	        variable with smallest reference count; as a last
	        resort, pick locked variable with smallest reference
	        count */

dcl	     (i,j,cmin,ignore,n,type) fixed bin,
	     p ptr;

	     /* note: variable 'k' lives in outer block */

	     if k >= 0
	     then do;
		cg_stat$last_index_used = k;
		return;
		end;

	     ignore = 3;			/* ignore locked vars */

look:	     j = -1;
	     cmin = 123456;

	     do i = cg_stat$last_index_used + 1 to last_index, first_index to min(cg_stat$last_index_used,last_index);

		type = index_regs(i).type;

		if type >= 0 & type ^= ignore
		then do;

		     if type = 0 | type = 1
		     then do;
			k, cg_stat$last_index_used = i;
			return;
			end;

		     p = index_regs(i).variable;

		     if p -> reference.shared
		     then if p -> reference.temp_ref
			then n = 0;
			else n = 1;
		     else n = p -> reference.ref_count;

		     if n = 0
		     then do;
			k, cg_stat$last_index_used = i;
			return;
			end;

		     if n < cmin
		     then do;
			j = i;
			cmin = n;
			end;
		     else if n = cmin
			then if index_regs(i).used < index_regs(j).used
			     then do;
				j = i;
				cmin = n;
				end;
		     end;

		end;

	     if j >= 0
	     then do;
		k, cg_stat$last_index_used = j;
		return;
		end;

	     /* we should never get here with ignore already = 2 */

	     if ignore = 3
	     then do;
		ignore = 2;
		goto look;
		end;

	     call error(328,cg_stat$cur_statement,vp);
	     k = 1;
	     end;

/*  */
load_xr_v:     proc(xr);

dcl	     xr	fixed bin;	/* index to load */

dcl	     (p,q,old_p,text_pt) ptr,
	     x fixed bin,
	     b18 bit(18),
	     (n,text_pos,c1,i) fixed bin(18),
	     op_code bit(9) aligned;

	     x = xr;
	     p, q = vp;

	     c1 = c;
	     if c1 < 0 then c1 = c1 + 262144;		/* 2's complement */

	     if p -> reference.value_in.q
	     then do;
		n = 0;
		goto l2;
		end;

	     if p -> reference.value_in.a
	     then if p -> reference.aligned_ref | a_reg.offset = 0 | a_reg.offset = 18
	     then do;
		if ^ p -> reference.aligned_ref & a_reg.offset = 0
		     then n = 16;
		     else n = 8;
l2:
		call flush_old(x);

		text_pos = cg_stat$text_pos;
		cg_stat$text_pos = cg_stat$text_pos + 1;
		goto l3;
		end;

	     if j >= 0
	     then do;

		/* value of variable is in another index with different
		   base_offset, we can generate the instruction
			eaxx	diff,j			*/

		call flush_old(x);

		old_p = c_a((j),8);
		c1 = c - index_regs(j).constant;
		if c1 < 0 then c1 = c1 + 262144;
		substr(string(old_p -> reference.address),1,18) = bit(c1,18);
		call expmac(eax0+x,old_p);
		if ^p -> reference.shared
		     then call adjust_ref_count(p,-1);
		goto l4;
		end;

	     if p -> reference.value_in.storage then goto test;

	     if ^ p -> reference.temp_ref then goto gen_lxl;

	     if p -> reference.aggregate then goto gen_lxl;

	     call error(315,cg_stat$cur_statement,p);

test:	     if p -> reference.symbol -> symbol.c_dcl_size >= bits_per_half then goto gen_lxl;

	     text_pos = fixed(p -> reference.store_ins,18);
	     if text_pos < cg_stat$last_call then goto gen_lxl;

	     if c ^= 0
	     then if ^ p -> reference.dont_save
		then go to gen_lxl;

	     if index_regs(x).used >= text_pos
	     then do;
gen_lxl:		if p -> reference.data_type = real_fix_bin_2
		     then q = get_single_ref(p);

		n = lxl0;
		if ^ p -> reference.aligned_ref
		then if p -> reference.units = word_ 
		     then n = ldx0;

		if ^ q -> reference.perm_address
		then do;
		     call m_a(q,"00"b);
		     q -> reference.perm_address = "1"b;
		     end;

		call flush_old(x);

		call expmac(n+x,q);
		if c ^= 0
		then do;
		     old_p = c_a(c,1);
		     old_p -> reference.tag = "001"b || bit(fixed(x,3),3);
		     call expmac(eax0+x,old_p);
		     end;
		end;

	     else do;

		/* the index register was not used from the point of the
		   store instruction which evaluated the expression to
		   the current instruction.  we'll attempt to change the
		   store instruction into an eax instruction */

		text_pt = addrel(cg_stat$text_base,text_pos);
		op_code = text_pt -> instruction.op_code;

		if op_code = sta_code then n = 8;
		else if op_code = stq_code then n = 0;
		     else if op_code = staq_code then n = 0;
			else goto gen_lxl;

		/* make sure that the value was not used from the time it was
		   put in storage.  we do this by looking for the address of
		   the temporary being used.  This prevents a bug which might
		   occur in the sequence
			dcl (a(10),b(10,10)) fixed bin;
			a(k) = b(k,k);
		   where we might otherwise change "stq temp" into "eaxn 0,ql"
		   even though sequence for calculating b's subscript did
		   "adq temp"	*/

		b18 = "110"b || bit(fixed(mod(p -> reference.qualifier -> temporary.location,16384),15),15);
		do i = text_pos + 1 to cg_stat$text_pos - 1;
		     if b18 = addrel(cg_stat$text_base,i) -> instruction.offset then goto gen_lxl;
		     end;

		call flush_old(x);

		call stack_temp$free_temp(p);
		p -> reference.allocated = "0"b;
		p -> reference.store_ins = "0"b;
		p -> reference.value_in.storage = "0"b;

l3:		index_regs(x).changed = text_pos;
		text_pt = addrel(cg_stat$text_base,text_pos);

		text_pt -> word = macro_table_$eax_array(n+x);

		if c ^= 0
		then do;
		     if c > 0
			then c1 = c;
			else c1 = c + 262144;
		     text_pt -> instruction.offset = bit(c1,18);
		     end;

		index_regs(x).instruction = text_pt -> full_word;

		if ^p -> reference.shared
		     then call adjust_ref_count(p,-1);
		end;

l4:
	     index_regs(x).variable = p;
	     if c = 0
		then p -> reference.value_in.x(x) = "1"b;

	     if p -> reference.symbol ^= null then p -> reference.perm_address = "0"b;

	     index_regs(x).type = 2;
	     index_regs(x).constant = c;
	     index_regs(x).used = cg_stat$text_pos;
	     end;




load_xr_c:     proc(xr);

dcl	     (x,xr) fixed bin;

	     x = xr;

	     call flush_old(x);

	     index_regs(x).used = cg_stat$text_pos;
	     call expmac(lxl0+x,c_a(const,2));
	     index_regs(x).type = 1;
	     index_regs(x).constant = const;
	     end;


/*  */
flush_old:	proc(xr);

dcl	     (xr,x) fixed bin;
dcl	     old_p pointer;
dcl	     macro fixed bin(15);

	     x = xr;

	     if index_regs(x).type < 2
		then return;

	     /* have a variable in the index register, if it is a temporary
	        which doesn't exist in storage, we'll have to save it */

	     old_p = index_regs(x).variable;
	     old_p -> reference.value_in.x(x) = "0"b;

	     if ^ old_p -> reference.temp_ref
	      | old_p -> reference.value_in.storage
	      | index_regs(x).constant ^= 0
		then return;

	     if old_p -> reference.ref_count > 0
	     then do;
		if old_p -> reference.symbol -> symbol.c_dcl_size >= bits_per_half
		then do;
		     old_p -> reference.ref_count = old_p -> reference.ref_count + 2;
		     call expmac((zero_mac),old_p);
		     macro = sxl0 + x;
		     end;

		else do;
		     old_p -> reference.ref_count = old_p -> reference.ref_count + 1;

		     /* convert the old reference in index register into
		        a "packed" integer in storage */

		     old_p -> reference.aligned_ref = "0"b;
		     old_p -> reference.c_offset = 0;
		     old_p -> reference.c_length = bits_per_half;
		     old_p -> reference.units = word_;

		     /* We set reference.dont_save as a
		        kludge to fix bug 1599.  This
		        prevents save_value from converting
		        this back to an aligned temp,
		        which could cause problems after
		        an if statement. */

		     old_p -> reference.dont_save = "1"b;
		     macro = stx0 + x;
		     end;

		call expmac(macro,old_p);
		old_p -> reference.value_in.storage = "1"b;

		index_regs(x).used = cg_stat$text_pos;
		end;
	     end;


	end;
