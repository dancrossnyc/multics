/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* combine_tests runs on the statements produced by optimize_if's processing of
   an if statement.  It looks for consecutive tests on the same word and tries
   to combine them.  If 2 tests to the same word are found, the following
   equations are used:

   jump_true(target,r1), jump_true(target,r2) -> jump_true(target,and_bits(r,mask))

   jump_true(next,r1), jump_false(target,r2) -> jump_false(target,and_bits(r,mask))

   jump_false(next,r1), jump_true(target,r2) -> jump_if_eq(target,and_bits(r,mask),mask)

   jump_false(target,r1), jump_false(target,r2) -> jump_if_ne(target,and_bits(r,mask),mask)


   jump_true(target,r1), jump_true(target,and_bits(r2,mask1)) -> jump_true(target,and_bits(r,mask2))

   jump_true(next,r1), jump_false(target,and_bits(r2,mask1)) -> jump_false(target,and_bits(r,mask2))

   jump_false(next_r1), jump_if_eq(target,and_bits(r2,mask1),mask1) -> jump_if_eq(target,and_bits(r,mask2),mask2)

   jump_false(target,r1), jump_if_ne(target,and_bits(r2,mask1),mask1) -> jump_if_ne(target,and_bits(r,mask2),mask2)

   Initial Version:	17 January 1977 by Richard A. Barnes
	Modified:	9 March 1977 by RAB to change mod_word handling
	Modified:	9 March 1977 by RAB to remove some dead code
	Modified:	9 April 1977 to remove mod_word operator	*/


combine_tests: proc(first,last);

dcl	first ptr,	/* first component of the if stmt */
	last ptr;		/* last component of the if stmt */

dcl	(s1,s2,stop_ptr,r1,r2,o1,o2) ptr;
dcl	(just_combined,is_next,is_target) bit(1) aligned;
dcl	(opcode1,opcode2) bit(9) aligned;
dcl	cfo(2) fixed bin(6);
dcl	wo(2) fixed bin(18);
dcl	based_bs bit(36) aligned based;
dcl	mask bit(36) aligned auto;

dcl	declare_temporary entry(bit(36) aligned,fixed bin(31),fixed bin(15),ptr) returns(ptr);
dcl	generate_constant entry(bit(*) aligned,fixed bin) returns(ptr);
dcl	create_operator entry(bit(9) aligned,fixed bin(15)) returns(ptr);
dcl	create_reference entry(ptr) returns(ptr);
dcl	share_expression entry(ptr) returns(ptr);
dcl	adjust_ref_count entry(ptr,fixed bin);
dcl	free_node entry(ptr);

dcl	(divide,mod,null,substr) builtin;

%include cgsystem;
%include boundary;
%include op_codes;
%include nodes;
%include label;
%include list;
%include symbol;
%include reference;
%include operator;
%include statement;
%include mask;

	just_combined = "0"b;
	stop_ptr = first;

	do s2 = last repeat s1 while (s2 ^= stop_ptr);
	     s1 = s2 -> statement.back;

	     if s2 -> statement.labels = null
	     then do;
		o2 = s2 -> statement.root;
		opcode2 = o2 -> operator.op_code;

		if just_combined
		then r2 = o2 -> operand(2) -> operand(2);
		else do;
		     if opcode2 ^= jump_true & opcode2 ^= jump_false
			then goto next;
		     r2 = o2 -> operand(2);
		     if ^ candidate(r2)
			then goto next;
		     end;

		o1 = s1 -> statement.root;
		r1 = o1 -> operand(2);
		opcode1 = o1 -> operator.op_code;

		if opcode1 = jump_true | opcode1 = jump_false
		then if candidate(r1)
		then if same_word(r1,r2)
		then do;
		     is_target = o1 -> operand(1) = o2 -> operand(1);
		     is_next = "0"b;
		     if o1 -> operand(1) -> node.type = label_node
		     then if o1 -> operand(1) -> label.statement = s2 -> statement.next
			then is_next = "1"b;

		     if just_combined
		     then do;
			if opcode1 = jump_true
				& ((opcode2 = jump_true & is_target) | (opcode2 = jump_false & is_next))
			 | opcode1 = jump_false
				& ((opcode2 = jump_if_eq & is_next) | (opcode2 = jump_if_ne & is_target))
			then do;
			     call continue_combining;
			     go to step;
			     end;
			end;

		     else do;
			if opcode1 = jump_true
			then if opcode2 = jump_true
			     then if is_target
				then do;
				     call combine(jump_true,2);
				     go to step;
				     end;
				else;
			     else if is_next
				then do;
				     call combine(jump_false,2);
				     go to step;
				     end;
				else;
			else if opcode2 = jump_true
			     then if is_next
				then do;
				     call combine(jump_if_eq,3);
				     go to step;
				     end;
				else;
			     else if is_target
				then do;
				     call combine(jump_if_ne,3);
				     go to step;
				     end;
			end;
		     end;
		end;

next:	     just_combined = "0"b;
step:
	     end;

	return;


candidate:     proc(p) returns(bit(1) aligned);

dcl	     p ptr;	/* ptr to node that might be a candidate */

	     if p -> node.type = reference_node
	     then if p -> reference.c_length = 1
	     then if p -> reference.symbol -> symbol.packed
	     then if ^ p -> reference.fo_in_qual & ^ p -> reference.padded_ref & ^ p -> reference.aligned_ref
	     then if p -> reference.units = 0 | p -> reference.units = word_
		 | p -> reference.offset = null | p -> reference.modword_in_offset
	     then return("1"b);

	     return("0"b);

	     end;


same_word:     proc(p1,p2) returns(bit(1) aligned);

dcl	     (p1,p2) ptr;

dcl	     (r(2),adam(2),a) ptr;
dcl	     i fixed bin;

	     r(1) = p1;
	     r(2) = p2;

	     if r(1) -> reference.offset = r(2) -> reference.offset
	      & r(1) -> reference.qualifier = r(2) -> reference.qualifier
	     then do;
		do i = 1 to 2;
		     wo(i) = divide(r(i) -> reference.c_offset,units_per_word(r(i) -> reference.units),18,0);
		     cfo(i) = mod(r(i) -> reference.c_offset * convert_offset(r(i) -> reference.units), bits_per_word);
		     if cfo(i) ^= 0
		     then if r(i) -> reference.c_offset < 0
			then wo(i) = wo(i) - 1;

		     do a = r(i) -> reference.symbol repeat a -> symbol.father
			while (a -> symbol.father ^= null);
			end;
		     adam(i) = a;
		     end;

		if wo(1) = wo(2) & adam(1) = adam(2)
		     then return("1"b);
		end;

	     return("0"b);

	     end;


continue_combining:	proc;

dcl	     p ptr;

	     mask = o2 -> operand(2) -> operand(3) -> reference.symbol -> symbol.initial -> based_bs;
	     substr(mask,cfo(1)+1,1) = "1"b;
	     p = generate_constant(mask,1);
	     o2 -> operand(2) -> operand(3) = p;
	     if o2 -> operator.number = 3
		then o2 -> operand(3) = p;

	     call merge_and_unthread;

	     just_combined = "1"b;

	     end;


combine:	     proc(op_code,num);

dcl	     op_code bit(9) aligned,
	     num fixed bin(15);

dcl	     (a,p,r,m) ptr;

	     if num ^= 2
	     then do;
		p = create_operator(op_code,num);
		p -> operand(1) = o2 -> operand(1);
		call free_node(o2);
		o2 = p;
		end;
	     else /* o2 -> operator.op_code = op_code */ ;

	     r = create_reference(null);
	     r -> reference = r2 -> reference;
	     if ^ r -> reference.shared
	     then do;
		r -> reference.ref_count = 1;
		if r -> reference.qualifier ^= null
		     then r -> reference.qualifier = share_expression((r -> reference.qualifier));
		if r -> reference.offset ^= null
		     then r -> reference.offset = share_expression((r -> reference.offset));
		call adjust_ref_count(r2,-1);
		end;

	     r -> reference.c_length = bits_per_word;

	     if r -> reference.units ^= 0 & r -> reference.units < word_
	     then do;
		r -> reference.units = word_;
		r -> reference.c_offset = wo(2);
		r -> reference.modword_in_offset = "0"b;
		end;

	     a = create_operator(and_bits,3);
	     a -> operand(2) = r;
	     a -> operand(1) = declare_temporary(bit_mask|aligned_mask,(bits_per_word),0,null);

	     mask = (36)"0"b;
	     substr(mask,cfo(1)+1,1) = "1"b;
	     substr(mask,cfo(2)+1,1) = "1"b;
	     p = generate_constant(mask,1);
	     a -> operand(3) = p;

	     o2 -> operand(2) = a;
	     if num > 2
		then o2 -> operand(3) = p;

	     call merge_and_unthread;

	     just_combined = "1"b;

	     end;


merge_and_unthread:	proc;

	     /* moves operator from s2 to s1, unthreads s2, and frees tree
	        originally hanging from s1 */

	     s1 -> statement.root = o2;
	     call free_node(s2);

	     call decrement_target_expression((o1 -> operand(1)));
	     if ^ o1 -> operand(2) -> reference.shared
		then call adjust_ref_count((o1 -> operand(2)), -1);
	     call free_node(o1);

	     end;


decrement_target_expression:	proc(pt);

dcl	     (p,pt,s,vector,l) ptr;
dcl	     i fixed bin;

	     /* operator_semantics has ensured that the target of a conditional
	        jump will not be an operator nor a reference with expressions
	        hanging off it */

	     p = pt;

	     if p -> node.type = label_node
	     then do;
		s = p -> label.statement;
		s -> statement.reference_count = s -> statement.reference_count - 1;
		return;
		end;

	     if p -> node.type = reference_node
	     then if p -> reference.symbol ^= null
	     then if p -> reference.symbol -> node.type = label_node
	     then do;
		l = p -> reference.symbol;
		vector = l -> label.statement;

		s = vector -> element(p -> reference.c_offset + 1);
		s -> statement.reference_count = s -> statement.reference_count - 1;
		end;

	     call adjust_ref_count(p,-1);

	     end;

	end;
