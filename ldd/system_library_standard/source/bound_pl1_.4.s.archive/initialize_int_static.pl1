/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-02-28,RWaters), approve(89-02-28,MCR8068), audit(89-09-07,Vu),
     install(89-09-19,MR12.3-1068):
     Fix bug 1884.
                                                   END HISTORY COMMENTS */


/* format: style3,^indattr,ifthendo,ifthen,^indnoniterdo,indproc,^elsestmt,dclind9,idind23 */
initialize_int_static:
     proc (s, address);

/* Modified 770629 by PG to fix 1606 (not diagnosing multiple initial values for scalar)
/* Modified 771102 by PG to diagnose wrong number of initial elements for arrays
/* Modified 14 July 1978 by PCK for unsigned binary
/* Modified: 25 Apr 1979 by PCK to implement 4-bit decimal
/* Modified: 07 Mar 89 by RW internal static bit strings incorrectly initialized
*/

dcl      (
         s,
         address,
         stack (128),
         v,
         r,
         a,
         b
         ) ptr;
dcl      (total_array_elements, total_initial_elements) fixed bin (24);
dcl      (offset, units, index, k, i) fixed bin (15);
dcl      area_size fixed bin (31);
dcl      (sub, high, low, multiplier) (128) fixed bin (15);

dcl      1 initial aligned based,			/* this must map into storage */
	 2 node_type unaligned bit (9),		/* as if it were a 3 element */
	 2 reserved bit (12) unaligned,
	 2 number fixed (14) unaligned,		/* list node.		*/
	 2 factor fixed (17) unaligned,
	 2 index fixed (17) unaligned,
	 2 value ptr unaligned,
	 2 next ptr unaligned;

dcl      1 area_target based (address) aligned,
	 2 spacer (offset) fixed bin,
	 2 (z1, z2) fixed bin,
	 2 size fixed bin,
	 2 z3 fixed bin;

dcl      1 new_area_target aligned based (address),
	 2 spacer (offset) fixed bin,
	 2 image area (area_size);

dcl      (null, bit, char, abs, addr, min, empty, unspec) builtin;
dcl      create_token entry (char (*), bit (9) aligned) returns (ptr);
dcl      error_$no_text entry (fixed bin (15), 1, 2 bit (8), 2 bit (14), 2 bit (5), ptr);
dcl      token_to_binary entry (ptr) returns (fixed bin);

dcl      pl1_stat_$use_old_area bit (1) aligned ext static;

dcl      cg_static_$null_value bit (72) ext aligned,
         cg_static_$packed_null_value bit (36) ext aligned,
         cg_static_$offset_null_value bit (36) ext aligned;

dcl      (fixed, substr, string) builtin;

%include symbol;
%include array;
%include reference;
%include token;
%include token_types;
%include list;
%include operator;
%include system;
%include nodes;

/* program */

	r = s -> symbol.reference;

	if ^s -> symbol.area then do;
	     v = s -> symbol.initial;
	     if v = null then
		return;

	     if s -> symbol.label then
		call print (320);
	     if s -> symbol.entry then
		call print (322);

	     if v -> node.type ^= list_node then
		call print (323);
	end;

	if ^s -> symbol.dimensioned then do;
	     offset = r -> reference.c_offset;
	     units = r -> reference.units;

	     if s -> symbol.area then
		if ^pl1_stat_$use_old_area then do;
		     area_size = s -> symbol.c_dcl_size;
		     new_area_target.image = empty;
		end;
		else do;
		     area_target.z1, area_target.z2, area_target.z3 = 0;
		     area_target.size = s -> symbol.c_dcl_size;
		end;
	     else do;
unravel:						/* We are initializing a scalar. Make sure only one initial element */
						/* has been speicified. */
		if v -> list.element (3) ^= null then
		     call print (442);

		if v -> list.element (1) -> node.type ^= token_node then
		     call print (442);

		if v -> list.element (1) -> token.type ^= dec_integer then
		     call print (442);

		if token_to_binary ((v -> list.element (1))) ^= 1 then
		     call print (442);

		if v -> list.element (2) ^= null then
		     if v -> list.element (2) -> node.type = list_node then do;
			v = v -> list.element (2);
			go to unravel;
		     end;

		call assignf ((v -> list.element (2)));
	     end;

	     return;
	end;

/* this is an array, call compile to pre-process the initial attribute. */

	a = s -> symbol.array;
	total_initial_elements = 0;

	if ^s -> symbol.area then
	     if ^compile (v, total_initial_elements) then
		call print (324);

/* walk through the bounds to collect vectors of bounds, initial subscripts,and multipliers. */

	k, index = 0;
	total_array_elements = 1;
	do b = a -> array.bounds repeat (b -> bound.next) while (b ^= null);
	     index = index + 1;
	     sub (index), low (index) = b -> bound.c_lower;
	     high (index) = b -> bound.c_upper;
	     total_array_elements = total_array_elements * (b -> bound.c_upper - b -> bound.c_lower + 1);
	     multiplier (index) = b -> bound.c_multiplier;
	end;

	if ^s -> symbol.area & (total_array_elements ^= total_initial_elements) then
	     call print (292);			/* wrong number of initial elements for array */

/* simulate the effect of a nest of do loops written as:

	do i(n) = lbound(a,n) to hbound(a,n);
	do i(n-1) = lbound(a,n-1) to hbound(a,n-1);
	do i(n-2) = lbound(a,n-2) to hbound(a,n-2);
		.
		.
		.
	do i(1) = lbound(a,1) to hbound(a,1);
	a(i(n),i(n-1),i(n-2),...i(1)) = value from initial attribute;
	end all loops;
							*/

next:
	call subscript;

	if s -> symbol.area then
	     if ^pl1_stat_$use_old_area then do;
		area_size = s -> symbol.c_dcl_size;
		new_area_target.image = empty;
	     end;
	     else do;
		area_target.z1, area_target.z2, area_target.z3 = 0;
		area_target.size = s -> symbol.c_dcl_size;
	     end;
	else
	     call assignf ((next_value ()));

	sub (1) = sub (1) + 1;
	if sub (1) <= high (1) then
	     go to next;
	i = 1;

overflow:
	sub (i) = low (i);
	i = i + 1;
	if i > index then
	     return;
	sub (i) = sub (i) + 1;
	if sub (i) > high (i) then
	     go to overflow;
	go to next;

/* Subroutine to compile the initial attribute. The chain of list nodes is overwritten with a chain of
   "initial" nodes, with the repetition factors converted to binary. */

compile:
     proc (p, n) returns (bit (1) aligned);

/* parameters */

declare	(
	p ptr,
	n fixed bin (24)
	) parameter;

/* automatic */

declare	(f, q, t) ptr,
	k fixed bin (24);

/* program */

	do q = p repeat (q -> initial.next) while (q ^= null);
	     f = q -> list.element (1);
	     if f -> node.type = token_node then do;
		if f -> token.type ^= dec_integer then
		     go to fail;
		q -> initial.factor = token_to_binary (f);
	     end;
	     else
		go to fail;

	     q -> initial.index = 0;
	     t = q -> initial.value;

	     if t ^= null then
		if t -> node.type = list_node then do;
		     k = 0;
		     if ^compile (t, k) then
			go to fail;

		     n = n + q -> initial.factor * k;
		end;
		else
		     n = n + q -> initial.factor;
	     else
		n = n + q -> initial.factor;
	end;
	return ("1"b);
fail:
	return ("0"b);
     end;

/* subroutine to extract the next value from a pre-processed initial attribute. */

next_value:
     proc returns (ptr);

dcl      lv ptr;

	lv = v;

begin:
	if lv = null then
	     return (null);
ok:
	if lv -> initial.factor = lv -> initial.index /* done with this batch, pop back up */ then do;
	     lv -> initial.index = 0;
	     v, lv = lv -> initial.next;
	     if lv ^= null then
		goto ok;

	     if k = 0 then
		call print (292);			/* can't happen because we already checked, but... */

	     v, lv = stack (k);
	     k = k - 1;
	     go to begin;
	end;
	lv -> initial.index = lv -> initial.index + 1;
	if lv -> initial.value = null then
	     return (null);				/* asterisk as value */
	if lv -> initial.value -> node.type = list_node then do;
	     k = k + 1;
	     stack (k) = lv;
	     v, lv = lv -> initial.value;
	     go to begin;

	end;
	return (lv -> initial.value);
     end;

/* subroutine to develop the offset of an array element. */

subscript:
     proc;

dcl      (factor, sunits, off, i) fixed bin (15);
dcl      convert (5, 5) fixed bin (15, 1) int static
	    initial (1, 4.5, 9, 18, 36, 4.5, 1, 2, 4, 8, 9, 2, 1, 2, 4, 18, 4, 2, 1, 2, 36, 8, 4, 2, 1);

	factor = 1;
	units = r -> reference.units;
	sunits = a -> array.offset_units;
	off = r -> reference.c_offset;
	if off = 0 then
	     units = sunits;
	else if units > sunits then do;
	     off = off * convert (units, sunits);
	     units = sunits;
	end;
	else
	     factor = convert (units, sunits);
	off = off - a -> array.c_virtual_origin * factor;
	do i = 1 to index;
	     off = off + sub (i) * multiplier (i) * factor;
	end;
	offset = off;
     end subscript;

/* subroutine to assign a value to static storage referenced by address. */

assignf:
     proc (pv);

dcl      convert (0:5) fixed bin (15, 1) int static initial (36, 1, 4.5, 9, 18, 36);
dcl      (v, pv, sym, inptr, pp) ptr;
dcl      op char (1);
dcl      not_complex bit (1);
dcl      (insize, tsize) fixed bin (31);
dcl      (word_offset, bit_offset) fixed bin;
dcl      t fixed bin (6);
dcl      value1 bit (2294);
dcl      value2 char (256) aligned;
dcl      char1 char (1) based;
dcl      char_image char (insize) based aligned;
dcl      bit_image bit (insize) based aligned;

dcl      (fixedoverflow, overflow, conversion, size, stringsize) condition;

dcl      intype fixed bin (31);

dcl      inscale_prec fixed bin (31),
         tscale_prec fixed bin (31);

dcl      1 info based (addr (inscale_prec)),
	 2 inscale fixed bin (17) unal,
	 2 inprec fixed bin (17) unal,
         1 outfo based (addr (tscale_prec)),
	 2 tscale fixed bin (17) unal,
	 2 tprec fixed bin (17) unal;

dcl      char_to_numeric_ entry (ptr, fixed bin (31), fixed bin (31), ptr, fixed bin (31)),
         assign_ entry (ptr, fixed bin (31), fixed bin (31), ptr, fixed bin (31), fixed bin (31)),
         pack_picture_ entry (char (*), char (*), char (*) aligned);


dcl      (
         add init ("000010001"b),			/* opnd(1) <- opnd(2) + opnd(3) */
         sub init ("000010010"b)
         ) /* opnd(1) <- opnd(2) - opnd(3) */ bit (9) aligned int static;

dcl      1 char_target aligned based (address),
	 2 spacer unal bit (bit_offset),
	 2 image unal char (tsize);

dcl      1 bit_target aligned based (address),
	 2 spacer unal bit (bit_offset),
	 2 image unal bit (tsize);

dcl      1 ptr_target based (address),
	 2 spacer (word_offset) fixed bin,
	 2 image ptr;

dcl      1 packed_ptr_target aligned based (address),
	 2 spacer unal bit (bit_offset),
	 2 image unal ptr;

dcl      1 offset_target aligned based (address),
	 2 spacer unal bit (bit_offset),
	 2 image unal offset;

dcl      1 arith_target aligned based (address),
	 2 spacer unal bit (bit_offset),
	 2 image unal bit (1);

dcl      1 varying_target based (address),
	 2 spacer (word_offset - 1) fixed bin,
	 2 image fixed bin (15);

dcl      map_type (24:28) fixed bin (31) int static init (42,
						/* character */
	    18,					/* real fixed dec */
	    22,					/* cplx fixed dec */
	    20,					/* real float dec */
	    24 /* cplx float dec */);

%include picture_image;
%include pl1_descriptor_type_fcn;

	v = pv;
	if v = null then
	     return;

	sym = s;
	word_offset = offset;

	if sym -> symbol.varying then
	     word_offset = word_offset + 1;
	bit_offset = word_offset * convert (units);
	not_complex = "1"b;

	if v -> node.type = symbol_node then do;
	     insize, tsize = v -> symbol.c_bit_size;
	     bit_target.image = v -> symbol.initial -> bit_image;
	     return;
	end;

	if sym -> symbol.ptr then do;
	     if is_null () then
		if sym -> symbol.packed then
		     unspec (packed_ptr_target.image) = cg_static_$packed_null_value;
		else
		     unspec (ptr_target.image) = cg_static_$null_value;
	     return;
	end;

	if sym -> symbol.offset then do;
	     if is_null () then
		unspec (offset_target.image) = cg_static_$offset_null_value;
	     return;
	end;

	on conversion, size, fixedoverflow, overflow go to error1;
	on stringsize call print (-347);

	tsize = sym -> symbol.c_dcl_size;

	if v -> node.type = operator_node then do;
	     if v -> operator.op_code = add then
		op = "+";
	     else if v -> operator.op_code = sub then
		op = "-";
	     else
		call print (324);
	     if v -> operator.operand (2) -> node.type = token_node
		& v -> operator.operand (3) -> node.type = token_node then do;
		not_complex = "0"b;
		v = create_token (v -> operator.operand (2) -> token.string || op
		     || v -> operator.operand (3) -> token.string, (char_string));
	     end;
	     else
		call print (324);
	end;
	if v -> node.type ^= token_node then
	     call print (324);

	if (v -> token.type & is_constant) = "0"b then
	     call print (324);
	insize = v -> token.size;

	if (v -> token.type & is_arithmetic_constant) = is_arithmetic_constant then do;
	     if sym -> symbol.fixed | sym -> symbol.float then
		go to l1;

	     call char_to_numeric_ (addr (value1), intype, inscale_prec, addr (v -> token.string), insize);
	end;

	if sym -> symbol.char then do;
	     if (v -> token.type & is_arithmetic_constant) = is_arithmetic_constant then do;
		call print (-233);
		call assign_ (addr (value2), 21 * 2, tsize, addr (value1), intype, inscale_prec);
		insize = inprec;
(stringsize):
		char_target.image = addr (value2) -> char_image;
	     end;

	     if v -> token.type = bit_string then do;
(stringsize):
		char_target.image = char (bit (substr (v -> token.string, 1, v -> token.size - 1)));
		call print (-486);
	     end;
	     else if v -> token.type = char_string then
(stringsize):
		char_target.image = v -> token.string;

	     if sym -> symbol.varying then
		varying_target.image = min (insize, tsize);

	     return;
	end;

	if sym -> symbol.bit then do;
	     if (v -> token.type & is_arithmetic_constant) = is_arithmetic_constant then do;
		call print (-233);
		call assign_ (addr (value2), 19 * 2, tsize, addr (value1), intype, inscale_prec);
		insize = inprec;
(stringsize):
		bit_target.image = addr (value2) -> bit_image;
	     end;
	     else if v -> token.type = bit_string then do;
		insize = v -> token.size - 1;		/* used below if varying */
(stringsize):
		bit_target.image = bit (substr (v -> token.string, 1, insize));
	     end;
	     else if v -> token.type = char_string then do;
(stringsize):
		bit_target.image = bit (v -> token.string);
		call print (-488);
	     end;

	     if sym -> symbol.varying then
		varying_target.image = min (insize, tsize);
	     return;
	end;

	if sym -> symbol.picture then do;
	     if v -> token.type = bit_string then do;
		inscale_prec, insize = insize - 1;
		addr (value1) -> bit_image = bit (substr (v -> token.string, 1, insize));
		intype = 19 * 2;
	     end;

	     if v -> token.type = char_string then do;
		intype = 21 * 2;
		inscale_prec = insize;
		inptr = addr (v -> token.string);
	     end;
	     else
		inptr = addr (value1);

	     pp = sym -> symbol.general -> reference.symbol -> symbol.initial;

	     tscale_prec =
		pp -> picture_image.prec + 262144 * (pp -> picture_image.scale - pp -> picture_image.scalefactor);

	     call assign_ (addr (value2), map_type (pp -> picture_image.type), tscale_prec, inptr, intype, inscale_prec)
		;
	     call pack_picture_ (char_target.image, pp -> char1, value2);

	     return;
	end;


/* this is an arithmetic target. */

	if ((v -> token.type & is_arithmetic_constant) ^= is_arithmetic_constant) & not_complex then
	     call print (-235);

l1:
	tprec = sym -> symbol.c_dcl_size;
	tscale = sym -> symbol.scale;
	t = pl1_descriptor_type (substr (string (sym -> symbol.attributes), 1, 36), sym -> symbol.c_dcl_size);

	call assign_ (addr (arith_target.image), t * 2 + fixed (sym -> symbol.packed), tscale_prec,
	     addr (v -> token.string), 21 * 2, (v -> token.size));

	return;
error1:
	call print (260);


is_null:
	proc () returns (bit (1) aligned);

	     if v -> node.type = reference_node then
		v = v -> reference.symbol;

	     if v -> node.type = token_node then
		if v -> token.type = identifier then
		     if v -> token.string = "null" then
			return ("1"b);

	     call print (341);
	     return ("0"b);

	end is_null;


     end assignf;

/* subroutine to print error messages. */

print:
     proc (m);

dcl      m fixed bin (15);

	call error_$no_text (abs (m), s -> symbol.source_id, s);
	if m > 0 then
	     go to exit;
     end;
exit:
     end /* initialize_int_static */;
