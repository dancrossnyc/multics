/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* Procedure to compile entry statements

   Initial Version: 31 March 1971 by BLW for Version II
	Modified:  29 December 1972 by BLW	  
	Modified:  23 June 1975 by EEW for new entry format
	Modified:	25 September 1975 by RAB to remove labels in prev implementation
	Modified:	17 May 1977 by RAB to check for reserved external name	
	Modified: 15 Feb 1978 by PCK to implement options(main) */

compile_entry: proc(pt,pos);

dcl	pt ptr,		/* point at statement node */
	pos fixed bin(18);		/* set to position of symbol_link info */

dcl	(cg_stat$text_base,cg_stat$def_base,cg_stat$validate_proc,cg_stat$cur_entry,cg_stat$desc_list_ptr,
	 cg_stat$entry_arg,cg_stat$cur_block,cg_stat$text_reloc_base,
	 cg_stat$cur_statement) ptr ext,
	cg_stat$last_def bit(18) aligned ext,
	cg_stat$support bit(1) aligned ext,
	cg_stat$separate_static bit(1) ext,
	cg_stat$text_pos fixed bin(18) ext;

dcl	(p,ep,lp,cb,ent_pt,tree,q,pa,p1,q1,q2,q3,arg(2),desc_pt,desc_list_ptr,def_ptr) ptr,
	bi_size fixed bin,
	(gen_dummy, not_found) bit(1) aligned,
	bit_image bit(bi_size) aligned based,
	entry_type fixed bin(15),
	(i,n,m,om,text_pos,ed) fixed bin(18);

dcl	expmac$fill_usage entry(fixed bin(18),fixed bin(17)),
	store entry(ptr),
	expmac$many entry(fixed bin(15),ptr,fixed bin),
	expmac$zero entry(fixed bin(15)),
	base_man$update_base entry(fixed bin,ptr,fixed bin);
dcl	base_man$load_arg entry(fixed bin,ptr) returns(bit(3) aligned);
dcl	create_list entry(fixed bin(18)) returns(ptr),
	get_variable entry(ptr) returns(ptr),
	c_a entry(fixed bin,fixed bin) returns(ptr),
	generate_definition entry(char(*) aligned,fixed bin(3),bit(18) aligned),
	expmac entry(fixed bin(15),ptr),
	error entry(fixed bin,ptr,ptr);

dcl	(addr,addrel,bit,fixed,index,null,rel,size,substr) builtin;

dcl	1 reloc(0:3)	aligned based,
	2 skip1		unal bit(12),
	2 left		unal bit(6),
	2 skip2		unal bit(12),
	2 right		unal bit(6);

dcl	based_fixed fixed bin based;

dcl	1 text_desc_reloc	aligned based,
	2 number		fixed bin (18) unsigned unaligned,
	2 array (num_descs refer (text_desc_reloc.number)) unaligned,
	  3 skip		bit(12),
	  3 reloc		bit(6);

dcl	1 entry_info	aligned based,
	2 num_args	unal bit(17),
	2 skip		unal bit(1),
	2 filler	          unal bit(18),
	2 symbol_link	unal bit(18),
	2 symbol_block	unal bit(18);

dcl (	entry_macro	init(196),
	quick_entry_mac	init(364),
	ext_entry		init(594),
	ss_ext_entry        init(646),
	ss_op_offset        init(198),
/*	ldfx2		init(8), */
/*	pf_mac		init(113), */
/*	quick_desc_mac	init(279), */
	get_desc_size	init(284),
	support_mac	init(305),
	set_main_mac	init(728),
	nop_mac		init(312)) fixed bin(15) int static options(constant);

%include definition;
%include block;
%include statement;
%include list;
%include operator;
%include symbol;
%include token;
%include reference;
%include nodes;
%include relocation_bits;
%include op_codes;
%include statement_types;
%include entry_sequence_info;

	cg_stat$cur_entry, p = pt;
	ent_pt = p -> statement.labels -> list.element(2) -> reference.symbol;
	tree = p -> statement.root;
	text_pos = cg_stat$text_pos;

	cb = cg_stat$cur_block;

	ed = 0;
	num_descs = tree -> operator.number;
	do i = 1 to num_descs;
	     if tree -> operand(i) -> reference.symbol -> symbol.star_extents
	      | tree -> operand(i) -> reference.symbol -> symbol.exp_extents		/* fortran */
	     then do;
		ed = 1;
		goto l1;
		end;
	     end;

l1:	if cb -> block.no_stack
	then do;
	     call expmac(quick_entry_mac + fixed(num_descs > 0,1) + ed,
	      c_a((cb -> block.entry_info),4));
	     if num_descs > 0
		then call base_man$update_base(6 + ed,cb,1);
	     goto define;
	     end;

	/* generate definition(s) for entry point */

	q = ent_pt -> symbol.token;
	p = addrel(cg_stat$text_base,text_pos);

	/* In the following block of code, we have these pointers:

		p ->	entry_sequence
		ep ->	relocation for entry_sequence
		q1 ->	parm_desc_ptrs
		q2 ->	relocation for parm_desc_ptrs	*/

	if ent_pt -> symbol.external
	then do;
	     if cg_stat$validate_proc = null then n = 0; else n = 4;

	     if num_descs = 0 
	     then do;

		/* no descriptors, we need not have prefix word or descriptor array */

		p = addrel(p,-1);
		ep = addrel(cg_stat$text_reloc_base,text_pos - 1);
		text_pos = text_pos + 1;
		end;

	     else do;

		/* we have descriptors, we will need to build array of pointers or use old one */

		q1 = p;
		q2 = addrel(cg_stat$text_reloc_base,text_pos);

		q1 -> parm_desc_ptrs.n_args = fixed(num_descs,18);

		/* construct array of entry-descriptor pointers */

		do i = 1 to num_descs;
		     desc_pt = tree -> operand(i) -> reference.symbol -> symbol.descriptor
		      -> reference.symbol;
		     if ^ desc_pt -> symbol.constant then desc_pt = desc_pt -> symbol.descriptor;
		     q1 -> parm_desc_ptrs.descriptor_relp(i) = bit(fixed(desc_pt -> symbol.location,18),18);
		     q2 -> text_desc_reloc.reloc(i) = rc_t;
		     end;

		bi_size = (num_descs + 1) * 18;

		/* determine if the array  already exists in the text section */

		not_found = "1"b;
		lp = cg_stat$desc_list_ptr;

		do while(lp ^= null & not_found);
		     if q1 -> bit_image = lp -> list.element(2) -> bit_image
			then not_found = "0"b;
			else lp = lp -> list.element(1);
		     end;

		if not_found
		then do;

		     /* No; put the array on the list of such arrays */

		     desc_list_ptr = create_list(2);
		     desc_list_ptr -> list.element(1) = cg_stat$desc_list_ptr;
		     cg_stat$desc_list_ptr = desc_list_ptr;
		     desc_list_ptr -> list.element(2) = q1;

		     text_pos = text_pos + size(q1 -> parm_desc_ptrs);
		     p = addrel(cg_stat$text_base,text_pos);
		     p -> entry_sequence.descr_relp_offset = rel(q1);
		     end;

		else do;

		     /* Yes; use the old array */

		     q1 -> bit_image = "0"b;
		     q2 -> bit_image = "0"b;
		     q1 -> entry_sequence.descr_relp_offset = rel(lp -> list.element(2));
		     end;

		ep = addrel(cg_stat$text_reloc_base,text_pos);

		ep -> reloc(0).left = rc_t;
		p -> entry_sequence.has_descriptors = "1"b;

		text_pos = text_pos + 2;
		end;

   	     m = index(q -> token.string,"$");
	     call generate_definition(substr(q->token.string,m+1),0,bit(text_pos,18));
	     def_ptr = addrel(cg_stat$def_base,cg_stat$last_def);

	     if substr(q -> token.string,m+1) = "symbol_table"
		then call error(364,cg_stat$cur_statement,null);

	     gen_dummy = m ^= 0;

	     end;

	else do;

	     /* internal entry, we need no descriptor information */

	     n = 2;
	     p = addrel(p,-1);
	     ep = addrel(cg_stat$text_reloc_base,text_pos-1);
	     text_pos = text_pos + 1;
	     gen_dummy = "1"b;
	     end;

	if gen_dummy
	then do;

	     /* entry name is of form a$b or we have internal entry,
	        generate dummy def for use in labelling entry */

	     call generate_definition(q -> token.string,0,bit(text_pos,18));

	     def_ptr = addrel(cg_stat$def_base,cg_stat$last_def);
	     def_ptr -> definition.ignore = "1"b;
	     end;

	def_ptr -> definition.retain = "1"b;
	p -> entry_sequence.revision_1 = "1"b;
	p -> entry_sequence.variable = ent_pt -> symbol.variable_arg_list;
	p -> entry_sequence.function = ent_pt -> symbol.returns;
	p -> entry_sequence.def_relp = cg_stat$last_def;
	ep -> reloc(1).left = rc_dp;

	/* generate entry macro */

	cg_stat$text_pos = text_pos;

	if cg_stat$separate_static
	   then entry_type = ss_ext_entry;
	   else entry_type = ext_entry;

	if cg_stat$entry_arg = null then call expmac$zero(entry_type + n + ed);
	else do;
	     if cg_stat$separate_static
	        then om = ss_op_offset;
	        else om = 0;
	     arg(1) = c_a(om + n + ed,11);	     /* bp|... */
	     arg(2) = cg_stat$entry_arg;
	     call expmac$many(entry_macro,addr(arg),2);
	     end;

	/* fill in entry trailer info */

	p = addrel(cg_stat$text_base,cg_stat$text_pos);
	p -> entry_info.num_args = bit(fixed(num_descs,17),17);
	pos = cg_stat$text_pos + 1;
	cg_stat$text_pos = cg_stat$text_pos + 2;

	/* generate validate trailer if needed */

	if n = 4
	then do;
	     p = c_a((cg_stat$validate_proc -> symbol.location),2);	/* k),dl */
	     p -> reference.relocation = rc_lp18;
	     call expmac(nop_mac,p);
	     end;

	/* entry operator loads the lp */

	call base_man$update_base(5,null,2);

	/* generate code to set support bit, if specified */

	if cg_stat$support
	     then call expmac$zero((support_mac));

	/* set main_proc bit if procedure is options(main) */

	if cb->block.options_main & pt->statement.statement_type = procedure_statement
	     then call expmac$zero((set_main_mac));

	/* assign entry to current position */

define:	call expmac$fill_usage(text_pos,(ent_pt -> symbol.location));
	ent_pt -> symbol.location = text_pos;
	ent_pt -> symbol.allocated = "1"b;

	/* The following code attempts to optimize reference to incoming arguments
	   by extracting and saving the offsets and sizes of the arguments.  When
	   a later reference is made to the expression
			bit_pointer(param_ptr(k,block))
	   the value stored in the 2*k-1 ptr in the list attached to the block
	   will be accessed.  Similarly for the expression
			desc_size(param_desc_ptr(k,block))
	   and the value in element 2*k.	*/

	n = 2 * tree -> operator.number;
	p = cb -> block.o_and_s;

	if p = null then cb -> block.o_and_s, p = create_list(n);
	else if n > p -> list.number
	     then do;
		q = create_list(n);
		do i = 1 to p -> list.number;
		     q -> element(i) = p -> element(i);
		     end;
		cb -> block.o_and_s, p = q;
		end;

	/* If this is an entry which returns something with * extent,
	   don't look at return parameter */

	m = tree -> operator.number;
	pa = ent_pt -> symbol.dcl_size;
	if pa ^= null
	then if pa -> symbol.star_extents
	     then m = m - 1;

	pa = c_a(0,4);

	/* Now do all of the sizes */

	do i = 1 to m;
	     q = tree -> operand(i);
	     q1 = q -> reference.length;
	     if q1 = null
	     then do;
		q2 = q -> reference.symbol;
		if ^ q2 -> symbol.area then goto step;
		if ^ q2 -> symbol.star_extents then goto step;

		/* have area(*) parameter, have to extract size even though
		   no explicit desc_size operator appears */

		q2 = q -> reference.qualifier;
		if q2 = null then goto step;

		if q2 -> node.type ^= operator_node then goto step;
		if q2 -> op_code ^= param_ptr then goto step;

		if q2 -> operand(3) ^= cb then goto step;

		if q2 -> operand(2) -> reference.symbol -> symbol.initial -> based_fixed ^= i then goto step;

		q3 = c_a(2*(i-1),4);
		q3 -> address.base = base_man$load_arg(1,cb);
		q3 -> address.tag = "010000"b;	/* * */

		goto gds;
		end;

	     if q1 -> node.type ^= operator_node then goto step;
	     if q1 -> op_code ^= desc_size then goto step;

	     q2 = q1 -> operand(2);
	     if q2 -> node.type ^= reference_node then goto step;

	     q2 = q2 -> reference.qualifier;
	     if q2 = null then goto step;

	     if q2 -> node.type ^= operator_node then goto step;
	     if q2 -> op_code ^= param_desc_ptr then goto step;

	     if q2 -> operand(3) ^= cb then goto step;
	     if q2 -> operand(2) -> reference.symbol -> symbol.initial -> based_fixed ^= i then goto step;

	     q3 = q1 -> operand(2);

	     /* we found a length expression to evaluate, make sure we have
	        an automatic integer variable in which to save it */

gds:	     p1 = p -> element(2*i);
	     if p1 = null then p -> element(2*i), p1 = get_variable(cb);

	     call expmac((get_desc_size),q3);
	     call store(p1);

step:	     end;

	end;
