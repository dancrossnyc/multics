/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* Procedure to make two or three references addressable at the same time

   Initial Version: 19 December 1971 by BLW
	Modified:  2 October 1972 by BLW
	Modified:	19 February 1973 by RAB
         Rewritten:	20 May 1973 by RAB for EIS
	Modified:	19 July 1974 by RAB to recognize that parameters
		are no longer referenced through lp
	Modified:	25 December 1976 by RAB to fix 1566	*/

make_both_addressable: proc(pt1,pt2,pno_ind);

dcl	pt1 ptr,		/* points at first ref to be made addressable */
	pt2 ptr,		/* points at second ref to be made addressable */
	pno_ind bit(1) aligned;	/* "1"b indicates no indirection allowed */

dcl	(p(3),s(3),q2) ptr;

dcl	(i,j,lbase,lx,n) fixed bin;

dcl	(eis,lock_base,lock_index,no_ind,no_tag) bit(1) aligned;

dcl	bit3 bit(3) aligned;

dcl	(m_a, need_temp) entry(ptr,bit(2) aligned),
	(base_man$lock,base_man$unlock,xr_man$super_lock,xr_man$super_unlock) entry(fixed bin),
	aq_man$lock entry(ptr,fixed bin),
	base_man$load_any_var entry(fixed bin,ptr,bit(3) aligned);

dcl	(abs,fixed,null,string,substr) builtin;

dcl	cg_stat$cur_block ptr ext static;

%include nodes;
%include reference;
%include operator;
%include bases;

	no_tag, eis = "0"b;
	no_ind = pno_ind;
	n = 2;
	p(1) = pt1;
	p(2) = pt2;

common:	lock_base, lock_index = "0"b;

	if p(1) -> reference.perm_address
	     then j = 2;
	     else j = 1;

	do i = j + 1 to n;
	if string(p(i) -> reference.address_in.b) then go to flip;

	q2 = p(i) -> reference.qualifier;
	if q2 ^= null
	then if q2 -> node.type ^= temporary_node
	then do;
	     if q2 -> node.type = operator_node then q2 = q2 -> operand(1);

	     if string(q2 -> reference.value_in.b)
	     then do;
flip:		q2 = p(j);
		p(j) = p(i);
		p(i) = q2;
		j = i;
		end;
	     end;
	end;

	do i = 1 to n;
	s(i) = p(i) -> reference.symbol;
	end;

	do i = 1 to n;

	if ^ p(i) -> reference.perm_address
	     then call m_a(p(i),no_ind || eis);

	if ^ eis
	then if i ^= 1
	     then go to step;

	if no_tag
	then if p(i) -> address.tag
	     then do;
		call get_base;
		go to base_lock;
		end;

	if p(i) -> reference.ext_base
	then if p(i) -> address.base ^= sp
	     then do;
		if ^ eis
		then do;
		     if s(1) = null then go to check_index;
		     if s(1) -> node.type ^= symbol_node then go to check_index;
		     if s(2) = null then go to check_index;
		     if s(2) -> node.type ^= symbol_node then go to check_index;
		     end;

		if p(i) -> address.base ^= lp
		then do;
base_lock:
		     lock_base = "1"b;
		     lbase = which_base(fixed(p(i) -> address.base,3));
		     call base_man$lock(lbase);
		     end;
		else;	/* lp is only used to address linkage (static) section */
		end;

check_index:
	if substr(p(i) -> address.tag,3,1)
	then do;
	     lock_index = "1"b;
	     lx = fixed(substr(p(i) -> address.tag,4,3),3);
	     call xr_man$super_lock(lx);
	     end;
	else if eis
	     then if substr(p(i) -> address.tag,4,1)
		then do;
		     lx = fixed(substr(p(i) -> address.tag,5,2),2);
		     if lx > 0
		     then if lx <= 2
			then call aq_man$lock(p(i),lx);
		     end;

step:	if p(i) -> reference.ref_count = 1 then call need_temp(p(i),"10"b);
	end;

	if eis then return;

	if lock_index
	     then call xr_man$super_unlock(lx);

	if lock_base
	     then call base_man$unlock(lbase);

	p(1) -> reference.perm_address = "1"b;
	p(2) -> reference.perm_address = "1"b;
	return;


make_n_addressable:	entry(pt,pn);

dcl	pt ptr,
	pn fixed bin;

dcl	ptarray(3) ptr aligned based(pt);

	no_ind, eis = "1"b;
	no_tag = pn < 0;
	n = abs(pn);
	do i = 1 to n;
	     p(i) = ptarray(i);
	     end;
	go to common;



get_base:	     proc;

	     p(i) -> reference.perm_address = "1"b;

	     if ^ p(i) -> reference.shared
	     then p(i) -> reference.ref_count = p(i) -> reference.ref_count + 1;

	     call base_man$load_any_var(2,p(i),bit3);

	     end;
end;
