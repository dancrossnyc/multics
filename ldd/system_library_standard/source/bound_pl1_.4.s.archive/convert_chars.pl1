/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* procedure to generate call to convert a character string

   Initial Version: 21 September 1971 by BLW
	Modified: 18 October 1972 by BLW
	Modified:	15 February 1973 by RAB
	Modified:	30 July 1973 by RAB for EIS
	Modified:	26 May 1975 by RAB for assign_round
	Modified:	23 June 1976 by RAB to centralize use of cg_stat$last_call
	Modified:	7 Dec 1976 by RAB to fix 1558
	Modified:	13 Dec 1976 by RAB to fix 1561
	Modified:	14 Dec 1976 by RAB to change blank_on_zero mechanism in inline_picture
	Modified:	27 Jan 1977 by RAB to fix 1572
	Modified:	16 June 1977 by RAB to fix 1631
	Modified:	10 September 1977 by RAB to fix 1613 by adding 3rd arg to store_bit_address
	Modified:	4 October 1977 by RAB to fix 1676
	Modified: 31 July 1978 by PCK for unsigned binary	
	Modified: 8 August 1978 by PCK to fix bug 1767
	Modified: 6 September 1978 by PCK to fix bug 1763
	Modified: 24 April 1978 by PCK to implement 4-bit decimal
	Modified:	30 March 1980 by RAB for reference.(padded aligned)_for_store_ref.
		See prepare_operand for details.  Also fixes bug 1843 in which
		padded unaligned strings are not padded if they are targets
		of any_to_any_ calls.	*/

convert_chars: proc(left,right,check_size,always_round);

dcl	left ptr,			/* ptr to target */
	right ptr,		/* ptr to source */
	check_size bit(1) aligned,	/* "1"b if size checking */
	always_round bit(1) aligned;	/* "1"b if we should always round */

dcl	cg_stat$save_exp_called bit(1) ext,
	(cg_stat$double_temp,cg_stat$ext_proc_list,cg_stat$cur_block) ptr ext,
	cg_stat$text_pos fixed bin ext;

dcl	(lp,arg(65),arg_pt,p,p1,p2,ap,q,buff(3),s,sym(2)) ptr;
dcl	atomic		bit (1) aligned;
dcl	(comparison,c,check,scaled,varying_target) bit(1),
	adjust bit(36),
	increment bit(1) aligned init("0"b),
	macro fixed bin(15),
	last_freed fixed bin(18),
	(iop,i,j,k,k1,k2,arg_pos,n_args,n,type(2),dtype(2),prec(2),scale(2),length_hold,iscan,tprec,word,nchars) fixed bin;

dcl	c_a entry(fixed bin,fixed bin) returns(ptr),
	(aq_man$lock, aq_man$load_var, load_size$a_or_q) entry(ptr,fixed bin),
	base_man$load_var_and_lock entry(fixed bin,ptr,fixed bin),
	get_reference entry() returns(ptr),
	expmac$two_eis entry(fixed bin(15),ptr,ptr),
	expmac$one_eis entry(fixed bin(15),ptr),
	generate_constant$char_string entry(char(*) aligned, fixed bin) returns (ptr),
	expmac$many_eis entry(fixed bin(15),ptr,fixed bin),
	create_label entry(ptr,ptr,bit(3) aligned) returns(ptr),
	expmac$fill_usage entry(fixed bin,fixed bin),
	need_temp entry(ptr,bit(2) aligned),
	assign_op$length_of_varying entry(ptr,ptr),
	stack_temp$assign_block entry(ptr,fixed bin),
	state_man$unlock entry,
	xr_man$load_const entry(fixed bin,fixed bin),
	xr_man$super_lock entry(fixed bin);
dcl	prepare_operand entry(ptr,fixed bin,bit(1) aligned) returns(ptr);
dcl	base_man$load_var entry(fixed bin,ptr,fixed bin),
	adjust_ref_count entry(ptr,fixed bin),
	long_op$extend_stack entry(ptr,fixed bin(15)),
	store$save_string_temp entry(ptr),
	copy_temp entry(ptr) returns(ptr),
	compile_exp entry(ptr),
	compile_exp$save entry(ptr) returns(ptr),
	compile_exp$save_exp entry(ptr) returns(ptr),
	create_list entry(fixed bin) returns(ptr),
	generate_constant$real_fix_bin_1 entry(fixed bin) returns(ptr),
	generate_constant entry(bit(*) aligned,fixed bin) returns(ptr);
dcl	compile_link entry(char(*) aligned,bit(18) aligned,fixed bin) returns(fixed bin);
dcl	store_bit_address entry(ptr,ptr,fixed bin(18)),
	expmac entry(fixed bin(15),ptr),
	expmac$many entry(fixed bin(15),ptr,fixed bin),
	expmac$zero entry(fixed bin(15)),
	reserve$declare_lib entry(fixed bin) returns(ptr),
	state_man$flush entry,
	state_man$flush_ref entry(ptr),
	stack_temp$free_temp entry(ptr),
	load entry(ptr,fixed bin);

dcl	(abs,addr,bit,ceil,divide,fixed,float,index,length,max,mod,null,search,string,substr,unspec) builtin;

dcl (	make_desc_mac	init(275),
	ldfx1		init(7),
	prepare_call	init(362),
	alloc_char_temp	init(89),
	move_chars	init(98),
	move_numeric	init(438),
	move_numeric_edit	init(221),
	dtb(2)		init(222,223),
	btd(2)		init(224,225),
	pic_mac(2)	init(417,416),
	conv_mac		init(412),
	zero_cs		init(419),
	zero_4bcs		init(739),
	blank_cs		init(472),
	pic_test		init(278),
	zero_mac(0:1)	init(308,307),
	call_ext_out	init(234)) fixed bin(15) int static;

dcl (	short_work_space	init(28),
	medium_work_space	init(44),
	long_work_space	init(158)) fixed bin int static options(constant);

dcl (	decimal_op	init(175),
	multi_decimal_op	init(176),
	complex_decimal_op	init(182),
	complex_binary_op	init(193)) fixed bin int static;

dcl (	lte		init("10000"b),	/* load table entry */
	insm		init("00001"b),	/* insert table entry 1 multiple */
	mfls		init("00110"b),	/* move with floating sign insertion */
	enf		init("00010"b),	/* end floating suppression */
	mvc		init("01101"b),	/* move source character */
	insb		init("01000"b),	/* insert blank on suppress */
	mvzb		init("00100"b),	/* move with zero suppression and blank replacement */
	mvza		init("00101"b),	/* move with zero suppression and asterisk replacement */
	mflc		init("00111"b)	/* move with floating currency symbol insertion */
			) bit(5) aligned int static;

dcl (	integer_header	init("100000011000100000000010010"b),	/* (lte 3),(blank),(insm 2) */
	scaled_header	init("100000011000100000000010001"b)	/* (lte 3),(blank),(insm 1) */
			) bit(27) int static;

dcl (	mvc_1		init("011010001"b),
	blank_on_zero	init("000110100"b),
	ses_off		init("000110000"b),
	ses_on		init("000111000"b),
	ses_on_bz		init("000111100"b),
	insb_5		init("011000101"b),
	enf_sign		init("000100000"b),
	enf_curr		init("000101000"b),
	enf_sign_bz	init("000100100"b),
	enf_curr_bz	init("000101100"b),
	insp_3		init("010110011"b),
	insn_4		init("010100100"b),
	insa_0		init("010010000"b),
	insb_0		init("010000000"b),
	insb_7		init("010000111"b),
	insb_8		init("010001000"b)) bit(9) int static aligned options(constant);

dcl	blk_on_zero	char(1) aligned based(addr(blank_on_zero));

dcl (	lte_3_blank	init("100000011000100000"b),
	lte_4_blank	init("100000100000100000"b)) bit(18) aligned int static;

dcl (	insn_cr		init("010100000001100011010100000001110010"b),
	insn_db		init("010100000001100100010100000001100010"b)
			) bit(36) aligned int static;

dcl	1 edit_sequence aligned,
	2 micro_op(68) structure unal,
	  3 op_code bit(5) unal,
	  3 data bit(4) unal;

dcl	1 edit_seq based(addr(edit_sequence)) aligned,
	2 header bit(27) unal,
	2 pad bit(9) unal;

dcl	char_image char(nchars) based(addr(edit_sequence)) aligned;

%include pl1_descriptor_type_fcn;
%include cg_reference;
%include symbol;
%include token;
%include operator;
%include list;
%include temporary;
%include data_types;
%include nodes;
%include op_codes;
%include cgsystem;
%include boundary;
%include declare_type;
%include label;
%include mask;

convert_arithmetic:	entry(left,right,check_size,always_round);

	p1, arg(1) = left;
	p2, arg(2) = right;
	right = null;

	call state_man$flush_ref(p1);

/* Initialize by filling in arrays */

	do i = 1 to 2;
	sym(i) = arg(i) -> reference.symbol;
	type(i) = arg(i) -> reference.data_type;
	prec(i) = sym(i) -> symbol.c_dcl_size;
	scale(i) = sym(i) -> symbol.scale;
	end;

	if p1 -> reference.temp_ref then p1 -> reference.value_in.storage = "1"b;

/* See if we can generate inline sequence */

	if ^ check_size
	then do;
	     if type(1) <= real_fix_bin_2
	     then if scale(1) = 0
	     then if p1 -> reference.aligned_for_store_ref
	     then if abs(scale(2)) <= 31
	     then if type(2) = real_fix_dec | type(2) = real_flt_dec
	     then do;
		if type(2) = real_flt_dec | scale(2) ^= 0
		then do;
		     q = get_temp(11*type(1));
		     call expmac$two_eis((move_numeric),q,p2);
		     end;
		else q = p2;
		call expmac$two_eis((dtb(type(1))),p1,q);
		return;
		end;

	     if type(2) <= real_fix_bin_2
	     then if scale(2) = 0
	     then if abs(scale(1)) <= 31
	     then do;

		if type(1) = real_fix_dec
		then if scale(1) = 0
		     then do;
			q = p1;
			call issue_btd;
			return;
			end;
		     else do;
			q = get_temp(11*type(2));
			call issue_btd;
			macro = move_numeric;
			if always_round
			     then macro = macro + 1;
			call expmac$two_eis(macro,p1,q);
			return;
			end;

		if type(1) = real_flt_dec
		then do;

		     /* float decimal -- we pretend that it is fixed decimal, and then
				     we append an exponent */

		     q = p1;
		     length_hold = p1 -> reference.c_length;

		     if sym(1) -> symbol.unaligned
		     then p1 -> reference.c_length = length_hold - 2;
		     else p1 -> reference.c_length = length_hold - 1;

		     p1 -> reference.data_type = real_fix_dec;
		     if ^ p1 -> reference.shared
			then p1 -> reference.ref_count = p1 -> reference.ref_count + 1;
		     call issue_btd;
		     p1 -> reference.c_length = length_hold;
		     p1 -> reference.data_type = real_flt_dec;

		     q = get_reference();
		     q -> reference.symbol = sym(1);
		     q -> reference.qualifier = p1;
		     q -> reference.c_offset = prec(1) + 1;
		     q -> reference.data_type = char_string;
		     q -> reference.defined_ref = "1"b;

		     if sym(1) -> symbol.unaligned
		     then do;
			     q -> reference.units = digit_;
			     q -> reference.c_length = 2;
			     macro = zero_4bcs;
			end;
		     else do;
			     q -> reference.units = character_;
			     q -> reference.c_length = 1;
			     macro = zero_cs;
			end;

		     call expmac$one_eis(macro,q);

		     return;
		     end;

		if type(1) = char_string
		then do;

		     /* We must first convert to fixed decimal and then to character string */

		     prec(2) = fixed(ceil(float(prec(2),23)/3.32) + 1,17);
		     q = get_temp(prec(2));
		     call issue_btd;
		     type(2) = real_fix_dec;
		     arg(2), p2 = q;
		     sym(2) = q -> reference.symbol;
		     end;
		end;

	     if type(1) = char_string
	     then if type(2) = real_fix_dec
	     then if prec(2) >= scale(2)
	     then if scale(2) >= 0
	     then do;
		iscan = 4;

		if scale(2) = 0
		then do;

		     /* decimal integer -- (lte 3),(blank),(insm 2),(mfls p-1),(enf),(mvc 1) */

		     edit_seq.header = integer_header;
		     if prec(2) > 1
			then call fill_seq((mfls),prec(2) - 1);
		     string(micro_op(iscan)) = enf;
		     string(micro_op(iscan+1)) = mvc_1;
		     nchars = iscan + 1;
		     end;

		else do;

		     /* scaled decimal -- (lte 3),(blank),(insm 1),(mfls p-q-1),(enf),
				      (mvc 1),(insb 7),(mvc q) */

		     edit_seq.header = scaled_header;
		     i = prec(2) - scale(2) - 1;
		     if i > 0
			then call fill_seq((mfls),i);
		     string(micro_op(iscan)) = enf;
		     if i < 0
			then string(micro_op(iscan+1)) = insb_8;
			else string(micro_op(iscan+1)) = mvc_1;
		     string(micro_op(iscan+2)) = insb_7;
		     iscan = iscan + 3;
		     call fill_seq((mvc),scale(2));
		     nchars = iscan - 1;
		     end;

		tprec = prec(2) + 3;

		varying_target = p1 -> reference.varying_ref & prec(1) >= tprec;
		if varying_target
		then do;
		     call assign_op$length_of_varying(p1,generate_constant$real_fix_bin_1(tprec));
		     p1 -> reference.c_length = tprec;
		     end;
		else if prec(1) ^= tprec
		     then right, arg(1) = get_str_temp(tprec);
		     else call pad_ref(p1);

		call issue_mvne;

		if varying_target then p1 -> reference.c_length = prec(1);

		return;
		end;
	     end;

/* We cannot generate an inline sequence, so we generate an operator call */

	if arg(1) -> reference.temp_ref
	     then arg(1) -> reference.ref_count = arg(1) -> reference.ref_count + 1;

	if sym(1) -> symbol.packed
	 & (sym(1) -> symbol.bit | sym(1) -> symbol.char)
	     then call pad_ref(p1);


	do i = 2 to 1 by -1;

	/* Protect length exprs + string temps from being prematurely released */

	if ^ arg(i) -> reference.shared
	then do;
	     n = arg(i) -> reference.ref_count;
	     check = n = 1;
	     arg(i) -> reference.ref_count = n + 1;
	     end;
	else check = "0"b;

	/* load and lock pointer register with address of the operand */

	call base_man$load_var_and_lock(2,arg(i),i + 2);

	/* free unnecessary temps */

	if check then call need_temp(arg(i),"11"b);

	/* load a or q with length or scale and precision of operand */

	if type(i) < char_string
	then do;
	     word = prec(i);
	     if scale(i) ^= 0
		then word = word + 262144*scale(i);
	     q = generate_constant$real_fix_bin_1(word);
	     call aq_man$load_var(q,i);
	     end;
	else call load_size$a_or_q(arg(i),i);

	if i = 2
	     then call aq_man$lock(null,2);

	/* load type into an index register */

	dtype (i) = pl1_descriptor_type (gen_attr (sym (i), arg (i)), sym (i) -> symbol.c_dcl_size);

	word = 2 * dtype(i) + fixed(sym(i) -> symbol.packed,1);

	call xr_man$load_const(word,i+5);
	if i = 2
	     then call xr_man$super_lock(7);

	end;


	/* get a pointer to a work_space
		28 words for 9-bit decimal operands
		44 words for 4-bit decimal operands
		156 words for strings		*/

	if max(type(1),type(2)) < char_string
	     then if sym(1) -> symbol.unaligned & sym(1) -> symbol.decimal
		 | sym(2) -> symbol.unaligned & sym(2) -> symbol.decimal
		     then n = medium_work_space;
		     else n = short_work_space;
	     else n = long_work_space;
	q = c_a(n,12);
	q -> reference.ref_count = 2;
	call base_man$load_var(2,q,5);

	/* Unlock the registers */

	call state_man$unlock;

	/* Decide which macro to use */

	i = 2;
	if n = short_work_space
	then if sym(1) -> symbol.real
	     then if sym(2) -> symbol.real
		then i = 0;

	macro = conv_mac + i;

	if always_round
	then macro = macro + 1;
	else if sym(1) -> symbol.float
	     then macro = macro + 1;
	     else if sym(1) -> symbol.char
		then if sym(2) -> symbol.float
		     then macro = macro + 1;

	/* Flush machine state and issue the macro */

	call state_man$flush;

	call expmac$zero(macro);


	/* Lower reference counts originally raised and return */

	do i = 1 to 2;
	if ^ arg(i) -> reference.shared then call adjust_ref_count(arg(i),-1);
	end;

	call adjust_ref_count(q,-1);
	return;


/* Compiles pack or unpack operator */

picture_op:	entry(node_pt);

	p = node_pt;

	p1 = p -> operand(1);

	call state_man$flush_ref(p1);

	if p1 -> reference.temp_ref then p1 -> reference.value_in.storage = "1"b;

	p2 = p -> operand(2);

	if p2 -> node.type = operator_node
	     then p2 = p2 -> operand(1);

	/* get picture constant */

	iop = fixed(p -> operator.op_code = unpack,1) + 1;
	arg(1) = p1;
	arg(2) = p2;
	q = arg(iop) -> reference.symbol -> symbol.general;
	if q -> reference.data_type = 0
	     then q = prepare_operand(q,1,atomic);

	/* Try to process inline.  If we cannot, then generate operator call */

	if ^ inline_picture()
	then do;
	     if p1 -> reference.temp_ref
		then p1 -> reference.ref_count = p1 -> reference.ref_count + 1;
	     arg(2) = q;
	     arg(3) = p2;

	     adjust = "0"b;
	     do i = 1 to 3;
		if arg(i) -> reference.temp_ref & ^ arg(i) -> reference.aggregate
		then do;
		     arg(i) -> reference.ref_count = arg(i) -> reference.ref_count + 1;
		     substr(adjust,i,1) = "1"b;
		     end;
		call base_man$load_var_and_lock(2,arg(i),i + 2);
		end;

	     call state_man$unlock;
	     call state_man$flush;

	     call expmac$zero((pic_mac(iop)));


	     if adjust
	     then do i = 1 to 3;
		if substr(adjust,i,1)
		     then call adjust_ref_count(arg(i),-1);
		end;
	     end;

	return;


/*	*************************************************

gen_procedure_call: entry(node_pt,ref,code);

	k = code;

	lp = node_pt;
	n_args = 2 * lp -> operator.number;

	if ref(1) -> reference.temp_ref
	then do;
	     q = ref(1) -> reference.length;
	     if q ^= null
	     then do;
		call long_op$extend_stack(ref(1),alloc_char_temp - char_string + ref(1) -> reference.data_type);
		ref(1) -> reference.ref_count = ref(1) -> reference.ref_count + 1;
		call store$save_string_temp(ref(1));
		increment = "1"b;
		end;
	     else if ref(1) -> reference.shared
		then ref(1) = copy_temp(ref(1));

	     end;

	do i = 1 to lp -> operator.number;
	     j = 2 * i - 1;
	     arg(j) = ref(i);
	     arg(j+1) = get_desc(arg(j));
	     end;

	comparison = "0"b;
	lp = ref(1);
	goto l2;

	************************************************* */

gen_arithmetic_call: entry(node_pt,ref,atom);

dcl	node_pt ptr,		/* points at operator node */
	ref(3) ptr,		/* ref nodes for operands */
	atom(3) bit(1) aligned;	/* "1"b if operand(i) atomic */

	s = ref(2) -> reference.symbol;
	if s -> symbol.decimal
	then do;
	     k1 = complex_decimal_op;
	     k2 = decimal_op;
	     end;
	else k1, k2 = complex_binary_op;

	c, comparison = "0"b;
	lp = node_pt;

	call prepare_operands;

	arg(2) = ref(1);
	if arg(2) ^= null
	then do;
	     c = ref(1) -> reference.symbol -> symbol.complex;
	     arg(3) = get_desc(arg(2));
	     end;
	else do;
	     comparison = "1"b;
	     arg(2), arg(3) = cg_stat$double_temp;
	     end;

	if comparison then j = 0; else j = fixed(substr(lp -> operator.op_code,6,4),4);
	arg(1) = generate_constant$real_fix_bin_1(j);

	arg(4) = ref(2);
	arg(5) = get_desc(arg(4));

	if lp -> operator.op_code = negate then n_args = 5;
	else do;
	     n_args = 7;
	     arg(6) = ref(3);
	     arg(7) = get_desc(arg(6));
	     c = c | arg(6) -> reference.symbol -> symbol.complex;
	     end;

	if c | s -> symbol.complex then k = k1; else k = k2;

	lp = ref(1);
	goto l2;

gen_arithmetic_builtin: entry(node_pt,ref,atom,code);

dcl	code fixed bin;

	lp = node_pt;
	s = ref(1) -> reference.symbol;
	if s -> symbol.decimal | ref(2) -> reference.symbol -> symbol.decimal
	then do;
	     if lp -> operator.number > 3 then k = multi_decimal_op;
	     else if ref(2) -> reference.symbol -> symbol.complex
		 | ref(1) -> reference.symbol -> symbol.complex
		then k = complex_decimal_op;
		else k = decimal_op;
	     end;
	else k = complex_binary_op;

	call prepare_operands;

	arg(1) = generate_constant$real_fix_bin_1(code);

	n_args = 2 * lp -> operator.number + 1;

	do i = 1 to lp -> operator.number-1;
	     j = 2 * i;
	     arg(j) = ref(i);
	     arg(j+1) = get_desc(arg(j));
	     end;

	j = 2 * i;
	if lp -> operator.op_code = round_fun then arg(j), arg(j+1) = ref(i);
	else do;
	     arg(j) = ref(i);
	     arg(j+1) = get_desc(arg(j));
	     end;

	lp = ref(1);
	comparison = "0"b;

l2:	if lp ^= null
	then if lp -> reference.temp_ref
	     then lp -> reference.value_in.storage = "1"b;

	arg_pt = c_a(2*(n_args+1),12);	/* get space for arglist in stack */

	if increment then arg_pt -> reference.ref_count = arg_pt -> reference.ref_count + 1;

	last_freed = arg_pt -> reference.qualifier -> temporary.last_freed;

	arg_pos = arg_pt -> reference.qualifier -> temporary.location;
	ap = c_a(0,4);		/* address sp|0 */

	if arg_pos + 2*n_args + 1 >= 16384
	then do;
	     call xr_man$load_const(arg_pos,1);		/* xr1 is safe because it's not in pool */
	     ap -> reference.address.tag = "001001"b;
	     arg_pos = 0;
	     string(arg_pt -> reference.address) = string(ap -> reference.address);
	     arg_pt -> reference.perm_address = "1"b;
	     end;

	/* put ptrs to arguments into arg list.  If arg is a temporary, we will
	   adjust the reference count up by 1 so that the temporary remains allocated
	   until we return from the call.  If we did not do this and some of the
	   registers had to be saved in storage, one of the arguments might get altered */

	adjust = "0"b;
	do i = 1 to n_args;
	     p = arg(i);
	     if p = null then goto l3;

	     if p -> reference.temp_ref
	     then do;
		p -> reference.ref_count = p -> reference.ref_count + 1;
		substr(adjust,i,1) = "1"b;
		end;

	     ap -> address.offset = bit(fixed(arg_pos + 2*i,15),15);
	     call store_bit_address(ap,p,last_freed);

	     do j = i + 1 to n_args;
		if p = arg(j)
		then do;
		     ap -> address.offset = bit(fixed(arg_pos + 2*j,15),15);
		     call store_bit_address(ap,p,last_freed);
		     arg(j) = null;
		     end;
		end;

l3:	     end;

	buff(1) = arg_pt;
	buff(2) = c_a(n_args*2048,2);
	buff(3) = reserve$declare_lib(k);

	ap = buff(3) -> reference.symbol;
	if ^ ap -> symbol.allocated
	then do;
	     ap -> symbol.location = compile_link(ap -> symbol.token -> token.string,"0"b,0);
	     ap -> symbol.allocated = "1"b;

	     q = create_list(2);
	     q -> element(2) = ap;
	     q -> element(1) = cg_stat$ext_proc_list;
	     cg_stat$ext_proc_list = q;
	     end;

	call expmac$many((prepare_call),addr(buff),2);
	call base_man$load_var(2,buff(3),1);
	call state_man$flush;
	call expmac$zero((call_ext_out));


	if comparison then call expmac((ldfx1),cg_stat$double_temp);

	if adjust = "0"b then return;

	do i = 1 to n_args;
	     if substr(adjust,i,1)
	     then do;
		p = arg(i);
		call adjust_ref_count(p,-1);
		end;
	     end;

	return;



inline_picture:	proc() returns(bit(1) aligned);


/* Attempts to generate inline sequence for picture operations */

dcl	(lab,pp) ptr;
dcl	(picture_pos,type,prec,scale,scalefactor,picture_length,nrands,source_length) fixed bin;
dcl	(pc,sc,drift,zero_sup_char) char(1) aligned;
dcl	table_entries char(8) init(" *+-$,.0") int static;
dcl	(current_micro_op,micro_op_code) bit(5) aligned;
dcl	micro_inst bit(9) aligned;

dcl	zero_suppression	bit(1) aligned;	/* "1"b -- machine is doing zero suppression (ES is OFF) */
dcl	have_drift	bit(1) aligned;	/* "1"b -- a drifting field has been encountered */
dcl	have_suppression	bit(1) aligned;	/* "1"b -- suppression characters or a drifting field have been encountered */
dcl	insertion_on_zero	bit(1) aligned;	/* "1"b -- characters have been inserted which should be blanked
						 if the number is 0 */
dcl	test_zero		bit(1) aligned;	/* zero_suppression & insertion_on_zero */

%include picture_image;
%include picture_types;

	if iop = 2
	then return("0"b);		/* unpack or encode */
	else do;

	     /* pack or edit */

	     call open_picture;

	     if type = char_picture
	     then if verify(substr(pp -> picture_image.chars,1,picture_length),"x") = 0
		then do;
		     call pad_ref(p1);
		     call expmac$two_eis((move_chars),p1,p2);
		     return("1"b);
		     end;
		else return("0"b);

	     if type > real_fixed_picture then return("0"b);

	     if abs(scale) > 31 then return("0"b);

	     /* We have a picture worth trying , so we go through a loop looking at
	        each picture character */

	     have_drift, have_suppression, insertion_on_zero, current_micro_op = "0"b;
	     zero_suppression = "1"b;
	     drift, zero_sup_char = " ";
	     iscan = 1;


	     do picture_pos = 1 to picture_length;
		pc = substr(pp -> picture_image.chars,picture_pos,1);
		go to case(index("9y*z$s+-cd/.,bv",pc));

		/* 9 */

case(1):		call force_significance;
		call put((mvc));
		go to step;

		/* y */

case(2):		if have_drift
		then if zero_suppression
		     then return("0"b);

		if picture_pos > 1
		     then call issue((ses_off));
		call put((mvzb));
		if substr(pp -> picture_image.chars,picture_pos + 1,1) ^= "y"
		     then call issue((ses_on));
		zero_suppression = "0"b;
		go to step;

		/* * */

case(3):		zero_sup_char = "*";
		insertion_on_zero = "1"b;
		call start_suppression;
		call put((mvza));
		go to step;

		/* z */

case(4):		zero_sup_char = " ";
		call start_suppression;
		call put((mvzb));
		go to step;

		/* $ */

case(5):		if pp -> picture_image.drift_character ^= "$"
		then call non_drifting;

		else do;
		     if ^ have_drift
		     then do;
			drift = "$";
			insertion_on_zero,
			have_drift = "1"b;
			call start_suppression;
			end;
		     else call put((mflc));
		     end;

		go to step;

		/* s */

case(6):		if pp -> picture_image.drift_character ^= "s"
		     then call non_drifting;
		     else call drifting_sign;

		/* + */

case(7):		if pp -> picture_image.drift_character ^= "+"
		then do;
		     call issue((insp_3));
		     insertion_on_zero = "1"b;
		     go to step;
		     end;

		call drifting_sign;

		/* - */

case(8):		if pp -> picture_image.drift_character ^= "-"
		then do;
		     call issue((insn_4));
		     go to step;
		     end;

		call drifting_sign;

		/* c */

case(9):		call issue_4((insn_cr));
		picture_pos = picture_pos + 1;
		go to step;

		/* d */

case(10):		call issue_4((insn_db));
		picture_pos = picture_pos + 1;
		go to step;

		/* / . , */

case(11):
case(12):
case(13):
		insertion_on_zero = "1"b;
		call insert_pun;

		/* b */

case(14):		pc = " ";
		call insert_pun;

		/* v */

case(15):		if index(substr(pp -> picture_image.chars,picture_pos+1),"9") = 0
		then call force_significance_bz;
		else if have_drift & index(substr(pp -> picture_image.chars,picture_pos+1),"y") ^= 0
		     then return("0"b);
		     else call force_significance;

step:		if iscan > 64 then return("0"b);
		end;

	     test_zero = zero_suppression & insertion_on_zero;
	     if test_zero & have_drift
		then call force_significance_bz;

	     call pad_ref(p1);

	     call force;
	     nchars = iscan - 1;

	     if test_zero & ^ have_drift
	     then do;
		nchars = nchars + 1;
		char_image = blk_on_zero || substr(char_image,1,nchars-1);
		end;

	     call issue_mvne;

	     end;

	return("1"b);


start_suppression:	proc;

	if ^ have_suppression
	then do;
	     if ^ zero_suppression
	     then do;
		call issue((ses_off));
		zero_suppression = "1"b;
		end;

	     have_suppression = "1"b;
	     end;

	end;


force_significance:	proc;

	if zero_suppression
	then do;
	     if have_drift
	     then do;
		if drift = "$"
		     then micro_inst = enf_curr;
		     else micro_inst = enf_sign;
		call issue(micro_inst);
		have_drift = "0"b;
		end;
	     else call issue(ses_on);

	     zero_suppression = "0"b;
	     end;

	end;


force_significance_bz: proc;

	/* same as force_significance except we blank on zero and leave have_drift on */

	if zero_suppression
	then do;
	     if have_drift
	     then do;
		if drift = "$"
		     then micro_inst = enf_curr_bz;
		     else micro_inst = enf_sign_bz;
		call issue(micro_inst);
		end;
	     else call issue(ses_on_bz);

	     zero_suppression = "0"b;
	     end;

	end;


non_drifting:	proc;

	if have_drift & zero_suppression
	then do;
	     call force_significance;
	     zero_suppression = "1"b;	/* remember that zero_suppression was on */
	     end;

	if picture_pos > 1
	     then call issue((ses_off));	/* for safety, we must have ES OFF */

	if have_suppression & zero_suppression
	then if pc = "$"
	     then micro_inst = enf_curr_bz;
	     else micro_inst = enf_sign_bz;
	else if pc = "$"
	     then micro_inst = enf_curr;
	     else micro_inst = enf_sign;

	call issue(micro_inst);

	zero_suppression = "0"b;

	insertion_on_zero = "1"b;
	go to step;

	end;


drifting_sign:	proc;

dcl	table_change bit(18) aligned;

	if ^ have_drift
	then do;
	     call start_suppression;
	     insertion_on_zero,
	     have_drift = "1"b;
	     drift = pc;
	     if drift ^= "s"
	     then do;
		if drift = "-"
		     then table_change = lte_3_blank;
		     else table_change = lte_4_blank;
		call issue_2(table_change);
		end;
	     end;

	else call put((mfls));
	go to step;

	end;



insert_pun:	proc;

	if zero_suppression
	then if ^ have_suppression
	     then do;
		call issue((ses_on));
		zero_suppression = "0"b;
		end;

	if zero_sup_char = "*"
	     then micro_inst = insa_0;
	     else micro_inst = insb_0;

	if pc = "/"
	then do;
	     call issue(micro_inst);
	     call issue(unspec(pc));
	     end;

	else do;
	     substr(micro_inst,6,4) = bit(fixed(index(table_entries,pc),4),4);
	     call issue(micro_inst);
	     end;

	go to step;

	end;



put:	proc(micro_op_code);

dcl	micro_op_code bit(5) aligned;

	if micro_op_code ^= current_micro_op
	     then call force;

	current_micro_op = micro_op_code;
	nrands = nrands + 1;

	end;



force:	proc;

	if current_micro_op
	     then call fill_seq((current_micro_op),nrands);

	current_micro_op = "0"b;
	nrands = 0;

	end;



issue:	proc(micro_inst);

dcl	micro_inst bit(9) aligned;

	call force;

	string(micro_op(iscan)) = micro_inst;
	iscan = iscan + 1;

	end;



issue_4:	proc(bit36);

dcl	bit36 bit(36) aligned;
dcl	(i,n) fixed bin;
dcl	p ptr;

	n = 4;
	p = addr(bit36);
	go to join;

issue_2:	entry(bit18);

dcl	bit18 bit(18) aligned;

dcl	1 array_st based aligned,
	2 micro_array(4) bit(9) unal;

	n = 2;
	p = addr(bit18);

join:	call force;

	do i = 1 to n;
	     string(micro_op(iscan)) = p -> micro_array(i);
	     iscan = iscan + 1;
	     end;

	end;



open_picture:	proc;

	pp = q -> reference.symbol -> symbol.initial;

	type = pp -> picture_image.type;
	prec = pp -> picture_image.prec;
	scale = pp -> picture_image.scale;
	picture_length = pp -> picture_image.piclength;
	source_length = pp -> picture_image.varlength;
	scalefactor = pp -> picture_image.scalefactor;

	end;


end;



prepare_operands: proc;

dcl	     i fixed bin;

	     do i = 2 to lp -> operator.number;
		if ^ atom(i) then ref(i) = compile_exp$save_exp((lp -> operand(i)));
		end;

	     if ref(1) = null then return;

	     if ^ ref(1) -> reference.allocate
	     then do;
		lp -> operand(1), ref(1) = copy_temp(ref(1));
		ref(1) -> reference.ref_count = 2;
		end;
	     else if ^ cg_stat$save_exp_called
		then if ref(1) -> reference.temp_ref
		     then ref(1) -> reference.ref_count = ref(1) -> reference.ref_count + 1;

	     end;

get_temp:	proc(prec) returns(ptr);

dcl	(length,type,prec) fixed bin;
dcl	p ptr;
dcl	long bit(1) aligned;

	/* Entry point to get a fixed decimal temporary */

	length = prec + 1;
	type = real_fix_dec;
	long = "0"b;
	go to join;

	/* Entry point to get a character string temporary */

get_str_temp:	entry(prec) returns(ptr);

	length = prec;
	long = length > max_short_size(char_string);
	type = char_string;

join:	p = get_reference();
	p -> reference.data_type = type;
	p -> reference.c_length = length;
	p -> reference.long_ref = long;
	p -> reference.temp_ref, p -> reference.allocate, p -> reference.value_in.storage = "1"b;
	call stack_temp$assign_block(p,divide(length + chars_per_word - 1,chars_per_word,17,0));

	return(p);
	end;


issue_btd:	proc;

	if ^ p2 -> reference.aligned_ref
	     then p2 = compile_exp$save(p2);

	call expmac$two_eis((btd(type(2))),q,p2);

	end;


issue_mvne:	proc;

	arg(3) = generate_constant$char_string(char_image,nchars);

	call expmac$many_eis((move_numeric_edit),addr(arg),3);

	end;


pad_ref:	proc(pt);

	/* pad_ref is called with a bit string, character string, or a
	   picture.  If the string is a short aligned string but does not
	   fill an integral number of words, the last word is zeroed. */

dcl	(p1,pt) ptr;

dcl	size fixed bin(24);

	p1 = pt;

	if p1 -> reference.data_type = bit_string
	     then size = p1 -> reference.c_length;
	     else size = p1 -> reference.c_length * bits_per_char;

	if ^ p1 -> reference.long_ref
	then if ^ p1 -> reference.varying_ref
	then if p1 -> reference.aligned_for_store_ref
	then if mod(size,bits_per_word) ^= 0
	then do;
	     if ^ p1 -> reference.shared
		then p1 -> reference.ref_count = p1 -> reference.ref_count + 1;
	     call expmac((zero_mac(fixed(size > bits_per_word,1))),p1);
	     end;
	end /* pad_ref */;



fill_seq:	proc(pop,pn);

dcl	(mop,pop) bit(5) aligned;	/* micro-op */
dcl	(n,pn) fixed bin;		/* number of chars being moved */

dcl	(i,ninst) fixed bin;
dcl	j fixed bin(4);

	n = pn;
	mop = pop;

	ninst = divide(n + 15,16,17,0);

	do i = 1 to ninst;
	string(micro_op(iscan)) = mop;
	if i = ninst
	then do;
	     j = mod(n,16);
	     if j ^= 0
		then micro_op(iscan).data = bit(j,4);
	     end;
	iscan = iscan + 1;
	end;

	end;


get_desc:	     proc(ref) returns(ptr);

dcl	     ref ptr;

dcl	     (p,q,r,s,arg(2)) ptr,
	     (type,scale,desc_type) fixed bin,
	     desc bit(36) int static aligned init("1"b);

	     p = ref;
	     s = p -> reference.symbol;

	     substr(desc,8,1) = s -> symbol.packed;

	     type = p -> reference.data_type;

	     desc_type = pl1_descriptor_type (gen_attr (s, p), s -> symbol.c_dcl_size);

	     substr(desc,2,6) = bit(fixed(desc_type,6),6);

	     if type < char_string
	     then do;
		     substr(desc,25,12) = bit(fixed(s -> symbol.c_dcl_size,12),12);

		     scale = s -> symbol.scale;

		     if scale < 0
		     then scale = scale + 1000000000000b;	/* 2's comp */

		     substr(desc,13,12) = bit(fixed(scale,12),12);

l1:		     return(generate_constant(desc,1));
		end;

	     q = p -> reference.length;
	     if q = null
	     then do;
		substr(desc,13,24) = bit(fixed(p -> reference.c_length,24),24);
		goto l1;
		end;

	     substr(desc,13,24) = "0"b;

	     if q -> node.type = operator_node
		then r = q -> operand(1);
		else r = q;
	     if ^ r -> reference.shared
		then r -> reference.ref_count = r -> reference.ref_count + 1;

	     call compile_exp(q);

	     arg(1) = c_a(1,12);
	     arg(1) -> reference.ref_count = 2;

	     arg(2) = generate_constant(desc,1);
	     call expmac$many((make_desc_mac),addr(arg),2);

	     return(arg(1));
	     end;

/* Generate the correct attribute string from both the symbol node and reference node */

gen_attr:
	procedure (symptr, refptr) returns (bit (36) aligned);

/* parameters */

dcl	symptr ptr;
dcl	refptr ptr;

/* program */

	if ^ refptr -> reference.varying_ref & symptr -> symbol.varying
	then return (substr (string (symptr -> symbol.attributes), 1, 36) & ^(varying_mask));

	return (substr (string (symptr -> symbol.attributes), 1, 36));

	end /* gen_attr */;

	end;
