/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* This procedure evaluates an expression used as a size or offset.
   If the operator node does not have a reference count on its temporary,
  a copy is made of the temporary with a reference count of 2 to
  replace the original temporary.

   Initial Version:  5 September 1971 by BLW
	Modified: 15 July 1972 by BLW
	Modified:	2 August 1973 by RAB to eliminate operator copying 
	Modified:	15 October 1975 by RAB to use xrs for some assignments
	Modified:	26 July 1976 by RAB to fix 1505
	Modified:	9 March 1977 by RAB to eliminate mod_bit, etc. dead code
	Modified:	9 April 1977 by RAB to eliminate mod_word
	Modified:	14 February 1978 by RAB to extend power of use_xr
	Modified:	4 August 1978 by RAB to account for unsigned binary in use_xr	*/

eval_exp: proc(pt,no_xr) returns(ptr) ;

dcl	pt ptr,			/* points at the expression */
	no_xr bit(1) aligned;	/* "1"b  - don't use xrs for assignments */

dcl	(cg_stat$first_op,cg_stat$next_op,cg_stat$cur_block,cg_stat$cur_statement) ptr ext;

dcl	cg_stat$optimize bit(1) aligned ext static;

dcl	(sp,tp,xp) ptr,
	(atomic,copy) bit(1) aligned,
	op_code bit(9) aligned,
	xr fixed bin;

dcl	(copy_temp,check_o_and_s) entry(ptr) returns(ptr),
	create_list entry(fixed bin) returns(ptr),
	error entry(fixed bin,ptr,ptr),
	compile_exp entry(ptr),
	call_op entry(ptr) returns(ptr),
	length_op entry(ptr) returns(ptr),
	assign_desc_op entry(ptr) returns(ptr),
	prepare_operand entry(ptr,fixed bin,bit(1) aligned) returns(ptr),
	xr_man$load_any_var entry(ptr,fixed bin,fixed bin),
	xr_man$update_xr entry(ptr,fixed bin);

dcl	(fixed,mod,null,substr) builtin;

%include reference;
%include symbol;
%include operator;
%include nodes;
%include op_codes;
%include cgsystem;
%include boundary;
%include data_types;

	xp = pt;

	if xp = null then goto done;

	if xp -> node.type = operator_node
	then do;
	     op_code = xp -> operator.op_code;

	     if op_code = std_call
	     then do;
		if ^ xp -> operand(1) -> reference.evaluated
		then do;
		     tp = call_op(xp);
		     tp -> reference.value_in.storage = "1"b;
		     end;
done:		return(xp);
		end;

	     if op_code = desc_size
	     then do;
		tp = check_o_and_s(xp);
		if tp ^= null
		then do;
		     return(tp);
		     end;
		end;

	     tp = xp -> operand(1);
	     if tp = null
	     then do;
		call error(317,cg_stat$cur_statement,null);
		goto done;
		end;

	     if tp -> reference.evaluated
		then go to done;

	     if op_code = assign
	     then do;
		sp = xp -> operand(2);
		if sp -> node.type = reference_node
		then if sp -> reference.symbol -> symbol.arg_descriptor
		     then if tp -> reference.symbol -> symbol.temporary
			then do;

			     /* eliminate assignment of descriptor to temporary */

			     xp = assign_desc_op(xp);
			     go to done;
			     end;
			else;
		     else if cg_stat$optimize
			then if sp -> reference.symbol -> symbol.packed
			then if ^ no_xr
			then if sp -> reference.ref_count <= 1 | sp -> reference.aligned_ref
			then if use_xr()
			     then go to done;
		end;

	     if op_code = length_fun
	     then do;
		xp = length_op(xp);
		go to done;
		end;

	     if tp -> reference.shared
	     then do;
		xp -> operand(1), tp = copy_temp(tp);
		tp -> reference.ref_count = 2;
		end;
	     else if tp -> reference.temp_ref
		then tp -> reference.ref_count = tp -> reference.ref_count + 1;

	     call compile_exp(xp);

	     end;

	else xp = prepare_operand(xp,1,atomic);


	goto done;


use_xr:	     proc returns(bit(1) aligned);

	     sp = prepare_operand(sp,1,atomic);

	     if sp -> reference.c_length = bits_per_half | sp -> reference.aligned_ref
	     then if ^ sp -> reference.hard_to_load
	     then if sp -> reference.data_type = real_fix_bin_1
		   & (tp->reference.symbol->symbol.c_dcl_size = default_fix_bin_p + fixed(sp->reference.symbol->symbol.unsigned,1)
		     | sp -> reference.aligned_ref)
		 | sp -> reference.data_type = bit_string
		   & ^ sp -> reference.aligned_ref
		   & tp -> reference.symbol -> symbol.c_dcl_size = bits_per_half
	     then if sp -> reference.units = word_ | mod(sp -> reference.c_offset,bits_per_half) = 0
	     then do;
		tp = prepare_operand(tp,1,atomic);
		if tp -> reference.shared
		     then xp -> operand(1), tp = copy_temp(tp);
		call xr_man$load_any_var(sp,xr,0);
		call xr_man$update_xr(tp,xr);
		tp -> reference.evaluated = "1"b;
		return("1"b);
		end;

	     return("0"b);
	     end;


	end;
