/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* This program is called to generate the linkage section

   Initial Version: 21 January 1971 by BLW for pl2	  
	Modified: 23 June 1975 by EEW to remove trace entry word
	Modified:	12 January 1976 by RAB to allocate all externals if symbol table built
		fixes bug 1454
	Modified:	1 June 1976 by RAB for *system links	*/

gen_pl1_linkage: proc(pt);

dcl	pt ptr;		/* points at a block node */

dcl	(p,block_pt,sym_pt,tok_pt,t_pt,def_ptr,def_reloc_ptr,
	 link_ptr,link_reloc_ptr) ptr,
	(loc,n,def_pos,link_pos) fixed bin(18),
	(first,no_runtime_symbol) aligned bit(1);

dcl	(null,index,fixed,bit,addrel,rel,substr) builtin;

dcl	create_list entry(fixed bin) returns(ptr),
	error entry(fixed bin,ptr,ptr),
	initialize_ext_static entry(ptr) returns(bit(18) aligned),
	gen_pl1_linkage entry(ptr),
	generate_definition entry(char(*) aligned,fixed bin(3),bit(18) aligned),
	compile_link entry(char(*) aligned,bit(18) aligned,fixed bin) returns(fixed bin(18));

dcl	(cg_static_$def_pos,cg_static_$link_pos,cg_static_$aos_array,cg_static_$link_begin,
	 cg_static_$def_origin,cg_static_$text_pos) fixed bin(18) ext,
	(cg_static_$def_base,cg_static_$def_reloc_base,cg_static_$link_base,
	 cg_static_$link_reloc_base,cg_static_$root,cg_static_$ext_proc_list,cg_static_$ext_var_list) ptr ext,
	(cg_static_$star_symbol_up_zero,cg_static_$last_def,cg_static_$zero_def,cg_static_$seg_def) bit(18) aligned ext,
	cg_static_$seg_name char(32) varying ext,
	(cg_static_$generate_symtab,cg_static_$table_option,cg_static_$use_type_6) bit(1) ext;

dcl (	rc_dp_t	initial("000000000000010101000000000000010000"b),
	rc_lb_lb	initial("000000000000011000000000000000011000"b))
	bit(36)	internal static;

dcl	fi_mod bit(6) int static init("100110"b);	/* fi mod = 46 oct */

dcl	1 type_block	aligned based,
	2 (type,trap_ptr)	unal bit(18),
	2 (seg_id,exp)	unal bit(18),
	2 (blk_ptr,int_val)	unal bit(18);

dcl	1 fault_pair	aligned based,
	2 minus_star	unal bit(18),
	2 unused		unal bit(12),
	2 tag		unal bit(6),
	2 expr_word	unal bit(18),
	2 rest		unal bit(18);

dcl	1 def_header	aligned based,
	2 forward		unal bit(18),
	2 backward	unal bit(18),
	2 skip		unal bit(18),
	2 flags		unal bit(18);

dcl	address		fixed bin(35) based;

dcl	word(0:1)		aligned bit(36) based,
	reloc(0:3)	aligned bit(36) based;

	/* We make use of the fact that an 18 bit relocation code is
	   padded to 36 bits with zeros on the right when assign to
	   the full word reloc fields since almost all right-hand_sides
	   are absolute */

%include relbts;
%include list;
%include block;
%include symbol;
%include token;
%include nodes;
%include segname_def;

	no_runtime_symbol = ^ (cg_static_$table_option | cg_static_$generate_symtab);

	block_pt = pt;
	do while(block_pt ^= null);

	     sym_pt = block_pt -> block.declaration;
	     do while(sym_pt ^= null);

		if sym_pt -> node.type ^= symbol_node then goto loop;
		if ^ sym_pt -> symbol.external then goto loop;
		if no_runtime_symbol
		then if ^ sym_pt -> symbol.allocate
		     then goto loop;
		if sym_pt -> symbol.condition then goto loop;
		if sym_pt -> symbol.arg_descriptor then goto loop;
		if sym_pt -> symbol.builtin then goto loop;
		if sym_pt -> symbol.father ^= null then goto loop;

		tok_pt = sym_pt -> symbol.token;

		if sym_pt -> symbol.entry & sym_pt -> symbol.constant
		then do;

		     /* we have an ext entry, generate link if
		        its an outward reference */

		     if sym_pt -> symbol.initial = null
		     then if sym_pt -> symbol.allocate
		     then do;
			sym_pt -> symbol.location = compile_link(tok_pt -> token.string,"0"b,0);
			sym_pt -> symbol.allocated = "1"b;

			p = create_list(2);
			p -> element(2) = sym_pt;
			p -> element(1) = cg_static_$ext_proc_list;
			cg_static_$ext_proc_list = p;
			end;

		     goto loop;
		     end;


		/* we have a variable, put it on list for prepare_symbol_map */

		p = create_list(2);
		p -> element(2) = sym_pt;
		p -> element(1) = cg_static_$ext_var_list;
		cg_static_$ext_var_list = p;

		if index(tok_pt -> token.string,"$") = 0 | cg_static_$use_type_6
		then do;
		     sym_pt -> symbol.location = cg_static_$link_pos;
		     sym_pt -> symbol.location = compile_link(tok_pt -> token.string,
		      initialize_ext_static(sym_pt),1);
		     end;
		else do;
		     if sym_pt -> symbol.initialed
			then call error(345,null,sym_pt);
		     loc,
		     sym_pt -> symbol.location = compile_link(tok_pt -> token.string,"0"b,1);

		     if sym_pt -> symbol.son ^= null
			then call fill_loc((sym_pt -> symbol.son));
		     end;

		sym_pt -> symbol.allocated = "1"b;

loop:		sym_pt = sym_pt -> symbol.next;
		end;

	     /* thru with this block, now do sons and then brother */

	     p = block_pt -> block.son;
	     if p ^= null then call gen_pl1_linkage(p);
	     block_pt = block_pt -> block.brother;
	     end;

	return;

gen_pl1_linkage$init_linkage: entry;

	/* This entry is called to initialize the linkage generator.
	   It generates the class 3 segname definition and the definition
	   for "symbol_table".  A link to <*symbol>|0 is generated if needed */

	cg_static_$ext_proc_list, cg_static_$ext_var_list = null;

	link_pos = cg_static_$link_pos;
	cg_static_$link_begin, link_pos = link_pos + mod(link_pos,2);   /* make EVEN */

	/* generate definition header.  the word of zeros terminating
	   the definition chain will be a location 2 */

	cg_static_$def_base -> def_header.flags = "11"b;	/* new, ignore */
	cg_static_$def_reloc_base -> reloc(0) = rc_dp;
	cg_static_$zero_def = "000000000000000010"b;
	cg_static_$last_def = "000000000000000000"b;
	cg_static_$def_pos = 3;

	/* generate definition for segname, class 3 */

	call generate_definition((cg_static_$seg_name),3,cg_static_$zero_def);

	/* generate definition for "symbol_table" */

	call generate_definition("symbol_table",2,"0"b);

	addrel(cg_static_$def_base,cg_static_$seg_def) -> segname_def.defblock = cg_static_$last_def;

	/* generate link to <*symbol>|0 only if it is needed */

	if cg_static_$generate_symtab then goto ml;
	if ^ cg_static_$table_option then goto done;

ml:	link_ptr = addrel(cg_static_$link_base,link_pos);
	link_reloc_ptr = addrel(cg_static_$link_reloc_base,link_pos);

	def_pos = cg_static_$def_pos;
	def_ptr = addrel(cg_static_$def_base,def_pos);
	def_reloc_ptr = addrel(cg_static_$def_reloc_base,def_pos);

	def_ptr -> type_block.type = "000000000000000001"b;
	def_ptr -> type_block.seg_id = "000000000000000010"b;

	def_ptr -> type_block.blk_ptr = bit(def_pos,18);
	def_reloc_ptr -> reloc(2) = rc_dp;

	link_ptr -> address = -link_pos * 262144;
	link_ptr -> fault_pair.tag = fi_mod;
	link_reloc_ptr -> reloc(0) = rc_nlb;

	link_ptr -> fault_pair.expr_word = bit(fixed(def_pos+2,18),18);
	link_reloc_ptr -> reloc(1) = rc_dp;

	cg_static_$star_symbol_up_zero = bit(link_pos,18);

	cg_static_$def_pos = cg_static_$def_pos + 3;
	link_pos = link_pos + 2;

done:	cg_static_$link_pos = link_pos;
	return;


fill_loc:	     proc(pt);

dcl	     (pt,s) ptr;

	     do s = pt repeat s -> symbol.brother while(s ^= null);
		s -> symbol.location = loc;

		if s -> symbol.son ^= null
		     then call fill_loc((s -> symbol.son));

		if s -> symbol.initialed
		     then call error(345,null,s);
		end;

	     end;

	end;
