/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* program to process length operator

	Written:	23 April 1974 by RAB
	Modified:	18 November 1974 by RAB for assign of desc elim	*/

length_op:	proc(pt) returns(ptr);

dcl	pt ptr;		/* points at operator node */

dcl	(p,p1,p2,q,s,s2) ptr;
dcl	(doing_length,useless) bit(1) aligned;

dcl	cg_stat$cur_block ptr ext static;

dcl	adjust_ref_count entry(ptr,fixed bin);
dcl	call_op entry(ptr) returns(ptr);
dcl	compile_exp$save entry(ptr) returns(ptr);
dcl	create_symbol entry(ptr,ptr,bit(3) aligned) returns(ptr);
dcl	generate_constant$real_fix_bin_1 entry(fixed bin) returns(ptr);
dcl	prepare_operand entry(ptr,fixed bin,bit(1) aligned) returns(ptr);
dcl	share_expression entry(ptr) returns(ptr);

dcl	null builtin;

dcl	fix_bin(0:1) fixed bin based;

%include cgsystem;
%include symbol;
%include reference;
%include operator;
%include boundary;
%include data_types;
%include nodes;
%include temporary;
%include op_codes;

	doing_length = "1"b;

begin:
	p = pt;
	q = p -> operand(1);

	/* get reference to length field (-1) of varying string */

	p2 = p -> operand(2);

	if p2 -> node.type = operator_node
	then if p2 -> operand(1) -> reference.evaluated
	     then p2 = p2 -> operand(1);
	     else if p2 -> operator.op_code = std_call
		then p2 = call_op(p2);
		else p2 = compile_exp$save(p2);

	s2 = p2 -> reference.symbol;
	if s2 -> symbol.constant & p2 -> reference.offset = null
	     then return(generate_constant$real_fix_bin_1(s2 -> symbol.initial -> fix_bin
			(p2 -> reference.c_offset)));

	p2 = prepare_operand(p2,1,useless);

	/* we need a new symbol to hold both the proper storage
	   class and the proper precision */

	s = create_symbol(null,null,(s2 -> symbol.dcl_type));
	p1 = s -> symbol.reference;
	s -> symbol.attributes = s2 -> symbol.attributes;
	s -> symbol.location = s2 -> symbol.location;
	s -> symbol.block_node = s2 -> symbol.block_node;
	s -> symbol.father = s2 -> symbol.father;
	s -> symbol.initial = s2 -> symbol.initial;
	s -> symbol.allocated = s2 -> symbol.allocated;
	s -> symbol.token = s2 -> symbol.token;
	string (s -> symbol.data_type) = string (q -> reference.symbol -> symbol.data_type);
	s -> symbol.binary = "1"b;
	s -> symbol.c_bit_size = bits_per_word;
	s -> symbol.c_word_size = 1;
	s -> symbol.c_dcl_size = q -> reference.symbol -> symbol.c_dcl_size;

	/* set up the reference node */

	p1 -> reference = p2 -> reference;
	p1 -> reference.shared = "0"b;
	if q -> reference.shared
	     then p1 -> reference.ref_count = 1;
	     else p1 -> reference.ref_count = q -> reference.ref_count;

	q = p1;
	q -> reference.symbol = s;
	p -> operand(1) = q;

	string(q -> reference.info) = "0"b;
	q -> reference.value_in.storage = p2 -> reference.value_in.storage;

	if doing_length
	     then q -> reference.c_offset = q -> reference.c_offset - 1;
	q -> reference.units = word_;
	q -> reference.data_type = real_fix_bin_1;
	q -> reference.varying_ref = "0"b;
	q -> reference.c_length = bits_per_word;
	string(q -> reference.bits) = "0100000111000"b;	/* aligned, evaluated, allocate, allocated */

	q -> reference.defined_ref = s -> symbol.defined;
	q -> reference.aliasable = s -> symbol.aliasable | (s -> symbol.auto 
				& (cg_stat$cur_block ^= s -> symbol.block_node)
				& s -> symbol.passed_as_arg);
	q -> reference.temp_ref = s -> symbol.temporary;
	q -> reference.aggregate = p2 -> reference.aggregate;
	q -> reference.perm_address = "0"b;
	q -> reference.no_address = "1"b;

	if q -> reference.qualifier ^= null
	then if q -> reference.qualifier -> node.type = temporary_node
	     then q -> reference.qualifier -> temporary.ref_count = q -> reference.qualifier -> temporary.ref_count + 1;
	     else q -> reference.qualifier = share_expression((q -> reference.qualifier));

	if q -> reference.offset ^= null
	     then q -> reference.offset = share_expression((q -> reference.offset));

	if ^ p2 -> reference.shared
	     then call adjust_ref_count(p2,-1);

	return(q);


assign_desc_op:	entry(pt) returns(ptr);

	/* eliminate assignment of descriptor to temporary */

	doing_length = "0"b;
	go to begin;
	end;
