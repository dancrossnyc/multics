/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(87-02-27,Huen), approve(87-02-27,MCR7625), audit(87-02-27,RWaters),
     install(87-05-21,MR12.1-1033):
     Fix High priority
     bug2106 ::  When a PL/1 stack frame is larger than 2 ** 14 words, bad code
     is generated for the put_edit statement.
  2) change(89-07-28,JRGray), approve(89-07-28,MCR8123), audit(89-09-12,Vu),
     install(89-09-22,MR12.3-1073):
     Added the state_man_$save_regs ep to save temp values (pl1 2091 2177).
                                                   END HISTORY COMMENTS */
/* Procedure to manage the machine state nodes

   Initial Version: 27 April 1971 by BLW
	Modified:  4 November 1972 by BLW 	
	Modified:  15 February 1973 by RAB
	Modified:	11 June 1973 by RAB for EIS
	Modified:	29 May 1974 by RAB to save the string aq
	Modified:	16 November 1974 by RAB to fix bug 1223
	Modified:	18 November 1974 by RAB to fix 1258
	Modified:	5 June 1975 by RAB for separate_static
	Modified:	13 October 1975 by RAB to remember comparisons
	Modified:	1 November 1975 by RAB to check save_temps bit
	Modified:	24 November 1975 by RAB to check aggregate bit in save_temp
	Modified:	8 January 1976 by RAB to fix bug 1452 in merge_ms
	Modified:	29 April 1976 by RAB to fix bug 1494
	Modified:	23 June 1976 by RAB to centralize use of cg_stat$last_call	
	Modified:	25 March 1977 by RAB to fix 1599	
	Modified: April 1977 by RHS to change allocation scheme of xeq_tree_area
	Modified:	1 May 1977 by RAB to fix 1612
	Modified:	1 September 1977 by RAB to add state_man$flush_sym in order to fix 1664
	Modified 780717 by PG to count machine_state nodes allocated
	Modified:	7 August 1978 by RAB to fix 1751 by allowing save_temp to save complex_flt_bin_1 temps
          Modified: 30 January 1987 by SH&RW fixed bug 2106
*/

state_man$create_ms: proc (pt);

	dcl     pt		 ptr;		/* points at machine state node */

	dcl     (p, q)		 ptr,
	        sym		 ptr auto unal,
	        (erase, b19)	 bit (19) aligned,
	        (prev_state, found)	 bit (1) aligned,
	        text_pos		 fixed bin (18),
	        (i, j, n)		 fixed bin;

	dcl     (cg_stat$ms_list, cg_stat$m_s_p) ptr ext,
	        (cg_stat$text_pos, cg_stat$last_call) fixed bin (18) ext,
	        pl1_stat_$node_uses	 (18) fixed bin external static;

	dcl     c_a		 entry (fixed bin (18), fixed bin) returns (ptr),
	        expmac		 entry (fixed bin (15), ptr),
	        expmac$one		 entry (fixed bin (15), ptr, fixed bin (15)),
	        expmac$one_eis	 entry (fixed bin (15), ptr),
	        stack_temp$assign_block entry (ptr, fixed bin);

	dcl     (abs, bin, bit, fixed, index, min, mod, null, string, substr) builtin;

%include pl1_tree_areas;
%include cgsystem;
%include machine_state;
%include reference;
%include symbol;
%include operator;
%include list;
%include statement;
%include block;
%include nodes;
%include data_types;
%include boundary;
%include temporary;

	call get_ms;
	pt = m_s_p;

init:	machine_state.next,
	     string_reg.variable,
	     complex_reg.variable,
	     decimal_reg.variable = null;

	do i = 0 to 7;
	     index_regs (i).type = 0;
	     base_regs (i).type = 0;
	     base_regs (i).locked = 0;
	end;

init1:	machine_state.indicators,
	     a_reg.constant,
	     q_reg.constant,
	     a_reg.number_h_o,
	     q_reg.number_h_o,
	     a_reg.number,
	     q_reg.number,
	     a_reg.changed,
	     q_reg.changed = 0;

	a_reg.locked,
	     q_reg.locked,
	     a_reg.instruction,
	     q_reg.instruction = "0"b;

	cg_stat$last_call = cg_stat$text_pos;

	return;

state_man$save_ms: entry (pt, cond);

/* this entry is called to append a copy of the current machine
	   state to the list of states on a specified statement node */

	dcl     cond		 bit (1) aligned;	/* "1"b if transfer is conditional */

	dcl     (conditional, optimize) bit (1) aligned;

	p = pt;
	optimize = ^p -> statement.save_temps;

	conditional = cond;

	if conditional
	then do;
		call get_ms;
		m_s_p -> machine_state = cg_stat$m_s_p -> machine_state;
	     end;

	machine_state.next = p -> statement.state_list;
	p -> statement.state_list = m_s_p;
	p -> statement.reference_count = p -> statement.reference_count - 1;

	q = p -> statement.reference_list;

/* see if any of the expressions in the active registers have to be
	   saved because they will be needed at the statement being transfered 
	   to.  Also, turn off bit saying reference is in a register if this
	   is forward unconditional transfer */

	do i = 1 to a_reg.number;
	     p = a_reg.variable (i);
	     if need_ref () then call save_temp (1);
	     if ^conditional then p -> reference.value_in.a = "0"b;
	end;

	do i = 1 to q_reg.number;
	     p = q_reg.variable (i);
	     if need_ref () then call save_temp (2);
	     if ^conditional then p -> reference.value_in.q = "0"b;
	end;

	do i = 0 to 7;
	     if index_regs (i).type >= 2
	     then do;
		     p = index_regs (i).variable;
		     if p ^= null
		     then do;
			     if need_ref () then call save_temp (0);
			     if ^conditional then p -> reference.value_in.x (i) = "0"b;
			end;
		end;
	end;

	do i = 1 to 6;
	     p = base_regs (i).variable;
	     n = base_regs (i).type;
	     if p = null then n = 0;
	     if n = 1
	     then do;
		     if need_ref () then call save_temp (-i);
		     if ^conditional then p -> reference.value_in.b (i) = "0"b;
		end;
	     else if n = 2
	     then if ^conditional then p -> reference.address_in.b (i) = "0"b;
	end;

	if ^conditional
	then do;

		p = complex_reg.variable;
		if p ^= null then p -> reference.value_in.complex_aq = "0"b;

		p = string_reg.variable;
		if p ^= null then p -> reference.value_in.string_aq = "0"b;

		p = decimal_reg.variable;
		if p ^= null then p -> reference.value_in.decimal_aq = "0"b;

		cg_stat$m_s_p = null;
	     end;

	cg_stat$last_call = cg_stat$text_pos;

	return;

state_man$save_regs: entry (pt);

/* This entrypoint will see if any of the expressions in the active
   registers have to be saved because they will be needed at the statement
   being transfered to.  This is part of the job that state_man$save_ms does
   but is done here so that register saving will not clobber the indicators.
   This occurs when another register (usually an X register) is loaded in
   order to get a big enough offset to store a useful register. (PL1 2091) */

	p = pt;
	optimize = ^p -> statement.save_temps;	/* used by need_ref */
	q = p -> statement.reference_list;	/* used by need_ref */

	do i = 1 to a_reg.number;
	     p = a_reg.variable (i);
	     if need_ref () then call save_temp (1);
	end;

	do i = 1 to q_reg.number;
	     p = q_reg.variable (i);
	     if need_ref () then call save_temp (2);
	end;

	do i = 0 to 7;
	     if index_regs (i).type >= 2
	     then do;
		     p = index_regs (i).variable;
		     if p ^= null then if need_ref () then call save_temp (0);
		end;
	end;

	do i = 1 to 6;
	     p = base_regs (i).variable;
	     if p ^= null then
		if base_regs (i).type = 1 then
		     if need_ref () then call save_temp (-i);
	end;

	return;	/* end of save_regs */

state_man$merge_ms: entry (pt);

/* this entry is called to merge the machine states
	   attached to a statement node */

	if pt -> statement.reference_count = 0
	then erase = "0"b;
	else erase = (19)"1"b;

	p = pt -> statement.state_list;

	if m_s_p = null
	then do;

/* previous statement was unconditional transfer */

		if p = null
		then do;
			call get_ms;
			cg_stat$m_s_p = m_s_p;
			goto init;
		     end;

		m_s_p, cg_stat$m_s_p = p;
		p = machine_state.next;
		prev_state = "0"b;
	     end;

	else prev_state = "1"b;

	if erase
	then machine_state.indicators = 0;

	do while (p ^= null);

	     if machine_state.indicators ^= p -> machine_state.indicators
	     then machine_state.indicators = 0;
	     else if machine_state.indicators = -2
	     then if indicators_ref (2) ^= p -> indicators_ref (2)
		then machine_state.indicators = 0;
		else if indicators_ref (3) ^= p -> indicators_ref (3)
		then machine_state.indicators = 0;

	     if substr (erase, 1, 1) then goto scrub_a;

	     if a_reg.size ^= p -> a_reg.size
	     then do;
erase_a:		     substr (erase, 1, 1) = "1"b;

scrub_a:		     do j = 1 to p -> a_reg.number;
			q = p -> a_reg.variable (j);
			if q ^= null then q -> reference.value_in.a = "0"b;
		     end;


		     goto chk_q;
		end;

	     if a_reg.length ^= p -> a_reg.length then goto erase_a;
	     if a_reg.offset ^= p -> a_reg.offset then goto erase_a;
	     if a_reg.constant ^= p -> a_reg.constant then goto erase_a;

	     n = a_reg.number;
	     do i = 1 by 1 while (i <= n);

scan_a:		q = a_reg.variable (i);

		do j = 1 to p -> a_reg.number;
		     if q = p -> a_reg.variable (j)
		     then do;
			     p -> a_reg.variable (j) = null;
			     goto ok_a;
			end;
		end;

		q -> reference.value_in.a = "0"b;

		n = n - 1;
		if n = 0 then goto erase_a;
		if n < i then goto end_a;

		do j = i to n;
		     a_reg.variable (j) = a_reg.variable (j + 1);
		end;

		goto scan_a;

ok_a:	     end;

end_a:	     a_reg.number = n;

chk_q:	     if substr (erase, 2, 1) then goto scrub_q;

	     if q_reg.size ^= p -> q_reg.size
	     then do;
erase_q:		     substr (erase, 2, 1) = "1"b;

scrub_q:		     do j = 1 to p -> q_reg.number;
			q = p -> q_reg.variable (j);
			if q ^= null then q -> reference.value_in.q = "0"b;
		     end;
		     goto chk_sr;
		end;

	     if q_reg.length ^= p -> q_reg.length then goto erase_q;
	     if q_reg.offset ^= p -> q_reg.offset then goto erase_q;
	     if q_reg.constant ^= p -> q_reg.constant then goto erase_q;

	     n = q_reg.number;
	     do i = 1 by 1 while (i <= n);

scan_q:		q = q_reg.variable (i);

		do j = 1 to p -> q_reg.number;
		     if q = p -> q_reg.variable (j)
		     then do;
			     p -> q_reg.variable (j) = null;
			     goto ok_q;
			end;
		end;

		q -> reference.value_in.q = "0"b;

		n = n - 1;
		if n = 0 then goto erase_q;
		if n < i then goto end_q;

		do j = i to n;
		     q_reg.variable (j) = q_reg.variable (j + 1);
		end;

		goto scan_q;

ok_q:	     end;

end_q:	     q_reg.number = n;

chk_sr:	     if substr (erase, 3, 1) then goto scrub_sr;

	     if string_reg.size ^= p -> string_reg.size
	     then do;
erase_sr:		     substr (erase, 3, 1) = "1"b;

scrub_sr:		     q = p -> string_reg.variable;
		     if q ^= null then q -> reference.value_in.string_aq = "0"b;
		     goto chk_cx;
		end;

	     if string_reg.variable ^= p -> string_reg.variable then goto erase_sr;

chk_cx:	     if substr (erase, 4, 1) then goto scrub_cx;

	     if complex_reg.size ^= p -> complex_reg.size
	     then do;
erase_cx:		     substr (erase, 4, 1) = "1"b;

scrub_cx:		     q = p -> complex_reg.variable;
		     if q ^= null then q -> reference.value_in.complex_aq = "0"b;
		     goto chk_d;
		end;

	     if complex_reg.scale ^= p -> complex_reg.scale then goto erase_cx;
	     if complex_reg.variable ^= p -> complex_reg.variable then goto erase_cx;

chk_d:	     if substr (erase, 5, 1) then goto scrub_d;

	     if decimal_reg.size ^= p -> decimal_reg.size
	     then do;
erase_d:		     substr (erase, 5, 1) = "1"b;

scrub_d:		     q = p -> decimal_reg.variable;
		     if q ^= null then q -> reference.value_in.decimal_aq = "0"b;
		     goto chk_xr;
		end;

	     if decimal_reg.scale ^= p -> decimal_reg.scale then goto erase_d;
	     if decimal_reg.variable ^= p -> decimal_reg.variable then goto erase_d;

chk_xr:	     do i = 0 to 7;

		if substr (erase, i + 6, 1) then goto scrub_xr;

		n = index_regs (i).type;
		if n ^= p -> index_regs (i).type
		then do;
erase_xr:			substr (erase, i + 6, 1) = "1"b;

scrub_xr:			if p -> index_regs (i).type >= 2
			then do;
				q = p -> index_regs (i).variable;
				if q ^= null then q -> reference.value_in.x (i) = "0"b;
			     end;

			goto end_xr;
		     end;

		if n >= 2
		then if index_regs (i).variable ^= p -> index_regs (i).variable
		     then goto erase_xr;

		if index_regs (i).constant ^= p -> index_regs (i).constant then goto erase_xr;

end_xr:	     end;

chk_base:	     do i = 1 to 6;

		if substr (erase, i + 13, 1) then goto scrub_base;

		n = base_regs (i).type;
		if n ^= p -> base_regs (i).type
		then do;
erase_base:		substr (erase, i + 13, 1) = "1"b;

scrub_base:		q = p -> base_regs (i).variable;

			n = p -> base_regs (i).type;
			if q = null then n = 0;
			if n = 1 then q -> reference.value_in.b (i) = "0"b;
			else if n = 2 then q -> reference.address_in.b (i) = "0"b;

			goto end_base;
		     end;

		if n = 0 then goto end_base;

		if substr ("11000110110000"b, n, 1)
		then if base_regs (i).variable ^= p -> base_regs (i).variable
		     then goto erase_base;

		if substr ("00110001111101"b, n, 1)
		then if base_regs (i).constant ^= p -> base_regs (i).constant
		     then goto erase_base;

end_base:	     end;

	     q = p;
	     p = p -> machine_state.next;

	     q -> machine_state.next = cg_stat$ms_list;
	     cg_stat$ms_list = q;
	end;

	if erase
	then call wipe;

	if prev_state | (^erase = "0"b) then return;

	if a_reg.constant = 0
	then do i = 1 to a_reg.number;
		a_reg (i).variable -> reference.value_in.a = "1"b;
	     end;

	if q_reg.constant = 0
	then do i = 1 to q_reg.number;
		q_reg (i).variable -> reference.value_in.q = "1"b;
	     end;

	q = string_reg.variable;
	if q ^= null then q -> reference.value_in.string_aq = "1"b;

	q = complex_reg.variable;
	if q ^= null then q -> reference.value_in.complex_aq = "1"b;

	q = decimal_reg.variable;
	if q ^= null then q -> reference.value_in.decimal_aq = "1"b;

	do i = 0 to 7;
	     if index_regs (i).type >= 2
	     then if index_regs (i).constant = 0
		then do;
			q = index_regs (i).variable;
			if q ^= null then q -> reference.value_in.x (i) = "1"b;
		     end;
	end;

	do i = 1 to 6;
	     q = base_regs (i).variable;
	     n = base_regs (i).type;
	     if q = null then n = 0;
	     if n = 1 then q -> reference.value_in.b (i) = "1"b;
	     else if n = 2 then q -> reference.address_in.b (i) = "1"b;
	end;

	return;

state_man$discard_ms: entry;

/* this entry is called to discard the current machine state after
	   an unconditional transfer back to a previously defined label */

	machine_state.next = cg_stat$ms_list;
	cg_stat$ms_list = m_s_p;
	cg_stat$m_s_p = null;

/* now flush state */

state_man$flush: entry;

/* this entry is called to completely flush the machine state */

	machine_state.indicators = 0;

/* save the index registers used by the operator */

	erase = ("1111100000000111111"b);
	call wipe;

/* free all registers */

	erase = (19)"1"b;
	call wipe;

	cg_stat$last_call = cg_stat$text_pos;
	return;

state_man$flush_ref: entry (pt);

/* this entry is called to flush a particular reference from
	   the machine state */

	p = pt;

	if machine_state.indicators = -2
	then if p = indicators_ref (2)
	     then machine_state.indicators = 0;
	     else if p = indicators_ref (3)
	     then machine_state.indicators = 0;

/* can't test reference.value_in because ref could
	   be in reg with a constant added */

	n = a_reg.number;
	do i = 1 to n;
	     if a_reg.variable (i) = p
	     then do;
		     a_reg.number = n - 1;

		     do i = i + 1 to n;
			a_reg.variable (i - 1) = a_reg.variable (i);
		     end;

		     goto frq;
		end;
	end;

frq:	n = q_reg.number;
	do i = 1 to n;
	     if q_reg.variable (i) = p
	     then do;
		     q_reg.number = n - 1;

		     do i = i + 1 to n;
			q_reg.variable (i - 1) = q_reg.variable (i);
		     end;

		     goto frsr;
		end;
	end;

frsr:	if string_reg.variable = p then string_reg.variable = null;

	if complex_reg.variable = p then complex_reg.variable = null;

	if decimal_reg.variable = p then decimal_reg.variable = null;

	do i = 0 to 7;
	     n = index_regs (i).type;
	     if abs (n) >= 2
	     then if index_regs (i).variable = p
		then do;
			index_regs (i).type = min (0, n);
			index_regs (i).variable = null;
		     end;
	end;

	do i = 1 to 6;
	     if base_regs (i).type = 1
	     then if base_regs (i).variable = p
		then base_regs (i).type = 0;
	end;

	string (p -> reference.value_in) = "0"b;
	return;

state_man$flush_address: entry (pt);

/* this entry is called to remove the address of a reference
	   from the machine state  */

	p = pt;

	do i = 1 to 6;
	     if base_regs (i).type = 2
	     then if base_regs (i).variable = p
		then base_regs (i).type = 0;
	end;

	string (p -> reference.address_in.b) = "0"b;
	return;

state_man$flush_sym: entry (pt);

/* this entry is called to flush all references to a particular
	   symbol from the machine state.  it should be called whenever
	   a short string is set by an EIS instruction (which does not
	   alter a register). */

	sym = pt;

	if machine_state.indicators = -2
	then if sym = indicators_ref (2) -> reference.symbol
	     then machine_state.indicators = 0;
	     else if sym = indicators_ref (3) -> reference.symbol
	     then machine_state.indicators = 0;

	i = 1;
	do while (i <= a_reg.number);
	     if sym = a_reg.variable (i) -> reference.symbol
	     then do;
		     a_reg.variable (i) -> reference.value_in.a = "0"b;
		     a_reg.number = a_reg.number - 1;
		     do j = i to a_reg.number;
			a_reg.variable (j) = a_reg.variable (j + 1);
		     end;
		end;
	     else i = i + 1;
	end;

	i = 1;
	do while (i <= q_reg.number);
	     if sym = q_reg.variable (i) -> reference.symbol
	     then do;
		     q_reg.variable (i) -> reference.value_in.q = "0"b;
		     q_reg.number = q_reg.number - 1;
		     do j = i to q_reg.number;
			q_reg.variable (j) = q_reg.variable (j + 1);
		     end;
		end;
	     else i = i + 1;
	end;

	if string_reg.variable ^= null
	then if sym = string_reg.variable -> reference.symbol
	     then do;
		     string_reg.variable -> reference.value_in.string_aq = "0"b;
		     string_reg.variable = null;
		end;

	if complex_reg.variable ^= null
	then if sym = complex_reg.variable -> reference.symbol
	     then do;
		     complex_reg.variable -> reference.value_in.complex_aq = "0"b;
		     complex_reg.variable = null;
		end;

	if decimal_reg.variable ^= null
	then if sym = decimal_reg.variable -> reference.symbol
	     then do;
		     decimal_reg.variable -> reference.value_in.decimal_aq = "0"b;
		     decimal_reg.variable = null;
		end;

	do i = 0 to 7;
	     if abs (index_regs (i).type) >= 2
	     then do;
		     q = index_regs (i).variable;
		     if sym = q -> reference.symbol
		     then do;
			     q -> reference.value_in.x (i) = "0"b;
			     index_regs (i).type = 0;
			end;
		end;
	end;

	do i = 1 to 6;
	     if base_regs (i).type = 1
	     then do;
		     q = base_regs (i).variable;
		     if sym = q -> reference.symbol
		     then do;
			     q -> reference.value_in.b (i) = "0"b;
			     base_regs (i).type = 0;
			end;
		end;
	end;

	return;

state_man$update_ref: entry (pt);

/* this entry is called to add a reference to machine state */

	p = pt;
	if p -> reference.data_type <= real_flt_bin_2 then goto up_q;

	if p -> reference.data_type <= complex_flt_bin_2
	then do;

/* update complex register */

		q = complex_reg.variable;
		if q ^= null then q -> reference.value_in.complex_aq = "0"b;

		complex_reg.variable = p;
		p -> reference.value_in.complex_aq = "1"b;

		return;
	     end;

	if p -> reference.long_ref
	then do;

/* update string register */

		q = string_reg.variable;
		if q ^= null then q -> reference.value_in.string_aq = "0"b;

		string_reg.variable = p;
		string_reg.size = p -> reference.c_length;
		p -> reference.value_in.string_aq = "1"b;

		p -> reference.address_in.storage = "1"b;

		return;
	     end;

/* update a register */

up_a:	do i = 1 to a_reg.number;
	     a_reg.variable (i) -> reference.value_in.a = "0"b;
	end;

	n = p -> reference.data_type;
	if n = bit_string | n = char_string
	then do;
		a_reg.size = p -> reference.c_length * convert_size (n);
		a_reg.offset = mod (convert_offset (p -> reference.units) * p -> reference.c_offset, bits_per_two_words);
		if a_reg.offset + a_reg.size > bits_per_word then a_reg.length = bits_per_two_words;
		else a_reg.length = bits_per_word;
	     end;
	else a_reg.size, a_reg.offset = 0;

	a_reg.number = 1;
	a_reg.variable (1) = p;
	p -> reference.value_in.a = "1"b;

	return;

/* update q register */

up_q:	do i = 1 to q_reg.number;
	     q_reg.variable (i) -> reference.value_in.q = "0"b;
	end;

	q_reg.number = 1;
	q_reg.variable (1) = p;
	p -> reference.value_in.q = "1"b;

	return;

state_man$update_reg: entry (pt, which);

	dcl     (which, update)	 bit (19) aligned;

	p = pt;
	update = which;

	if substr (update, 1, 1) then goto up_a;
	if substr (update, 2, 1) then goto up_q;

	return;

state_man$erase_reg: entry (what);

/* this entry is called to erase the contents of some register(s) */

	dcl     what		 bit (19) aligned;	/* what to erase */

	erase = what;

	if substr (erase, 1, 1)
	then do;

/* if we are erasing a register, we have to check for
	        double fixed, floating point, or unpacked ptr
	        values left in "q" register */

		if q_reg.number > 0
		then do;

			p = q_reg (1).variable;
			n = p -> reference.data_type;

			if n = real_fix_bin_2
			     | n = real_flt_bin_1
			     | n = real_flt_bin_2
			     | n = unpacked_ptr
			then

/* have to erase q as well as a */

			     substr (erase, 2, 1) = "1"b;
		     end;

		call wipe;
		return;
	     end;

	if substr (erase, 2, 1)
	then do;

/* if we are erasing q register, we have to check for
	        a string value that may have gotten shifted into q
	        register from a */

		if a_reg.number ^= 0
		then if a_reg.size + a_reg.offset > bits_per_word
		     then substr (erase, 1, 1) = "1"b;
		     else a_reg.length = min (a_reg.length, bits_per_word);

	     end;

	call wipe;
	return;

state_man$erase_temps: entry;

/* This entry is called to save in storage any fixed binary temporary
	   values with precision such that they could be loaded into index registers
	   via eax instructions.  It is used to prevent sequence like
		ldq	j
		cmq	k
		eax5	0,al
		tsx0	ap|r_e_as
	   from being generated		*/

	erase = "0"b;

	b19 = "1"b;
	do i = 1 to a_reg.number;
	     p = a_reg (i).variable;
	     if p -> reference.temp_ref then call check_temp;
	end;

	found = "0"b;
	do i = 1 to q_reg.number while (^found);
	     p = q_reg (i).variable;
	     n = p -> reference.data_type;

	     if n = real_fix_bin_2 | n = real_flt_bin_2
		| n = real_flt_bin_1 | n = unpacked_ptr
	     then found = "1"b;
	end;

	if found
	then do;
		b19 = "01"b;
		do i = 1 to q_reg.number;
		     p = q_reg (i).variable;
		     if p -> reference.temp_ref then call check_temp;
		end;
	     end;

	if erase
	then do;
		call wipe;
		cg_stat$last_call = cg_stat$text_pos;	/* prevent xr_man from changing to eax	*/
	     end;

	return;

state_man$unlock: entry;

/* Unlocks all registers and updates used fields when necessary (for EIS) */

	a_reg.locked, q_reg.locked = "0"b;
	a_reg.number_h_o, q_reg.number_h_o = 0;

	text_pos = cg_stat$text_pos;

	do i = 0 to 7;
	     if index_regs (i).type < 0
	     then do;
		     if index_regs (i).variable ^= null
		     then index_regs (i).type = abs (index_regs (i).type);
		     else index_regs (i).type = 0;
		     index_regs (i).used = text_pos;
		end;
	end;

	do i = 1 to 6;
	     if base_regs (i).locked ^= 0
	     then do;
		     base_regs (i).locked = 0;
		     base_regs (i).used = text_pos;
		end;
	end;

	return;

state_man$set_aliasables: entry (pt);

/* When an aliasable variable (one that may have an alias) is set, all potential aliases must
   be removed from the machine state.  We only search for shared aliases because the optimizer
   and semantic_translator have automatically handled unshared aliases by the reference count
   scheme. */

	dcl     all		 bit (1) aligned;	/* "1"b if _a_l_l aliasables are to be flushed */

	p = pt;
	all = p = null;

	if machine_state.indicators = -2
	then do;
		q = indicators_ref (2);
		if compare_aliasables ()
		then machine_state.indicators = 0;
		else do;
			q = indicators_ref (3);
			if compare_aliasables ()
			then machine_state.indicators = 0;
		     end;
	     end;

	n = a_reg.number;
	i = 1;
	do while (i <= n);
	     q = a_reg.variable (i);
	     if compare_aliasables ()
	     then do;
		     q -> reference.value_in.a = "0"b;
		     n = n - 1;
		     do j = i to n;
			a_reg.variable (j) = a_reg.variable (j + 1);
		     end;
		end;
	     else i = i + 1;
	end;
	a_reg.number = n;

	n = q_reg.number;
	i = 1;
	do while (i <= n);
	     q = q_reg.variable (i);
	     if compare_aliasables ()
	     then do;
		     q -> reference.value_in.q = "0"b;
		     n = n - 1;
		     do j = i to n;
			q_reg.variable (j) = q_reg.variable (j + 1);
		     end;
		end;
	     else i = i + 1;
	end;
	q_reg.number = n;

	q = string_reg.variable;
	if q ^= null
	then if compare_aliasables ()
	     then do;
		     q -> reference.value_in.string_aq = "0"b;
		     string_reg.variable = null;
		end;

	q = complex_reg.variable;
	if q ^= null
	then if compare_aliasables ()
	     then do;
		     q -> reference.value_in.complex_aq = "0"b;
		     complex_reg.variable = null;
		end;

	q = decimal_reg.variable;
	if q ^= null
	then if compare_aliasables ()
	     then do;
		     q -> reference.value_in.decimal_aq = "0"b;
		     decimal_reg.variable = null;
		end;

	do i = 0 to 7;
	     if index_regs (i).type >= 2
	     then do;
		     q = index_regs (i).variable;
		     if compare_aliasables ()
		     then do;
			     q -> reference.value_in.x (i) = "0"b;
			     index_regs (i).type = 0;
			end;
		end;
	end;

	do i = 1 to 6;
	     if base_regs (i).type = 1
	     then do;
		     q = base_regs (i).variable;
		     if compare_aliasables ()
		     then do;
			     q -> reference.value_in.b (i) = "0"b;
			     base_regs (i).type = 0;
			end;
		end;
	end;

	return;


check_temp: proc;

	if p -> reference.data_type ^= real_fix_bin_1 then goto back;
	if p -> reference.value_in.storage then goto back;
	if p -> reference.ref_count < 1 then goto back;
	if p -> reference.symbol -> symbol.c_dcl_size < bits_per_half
	then erase = erase | b19;

back: end;

get_ms: proc;

	m_s_p = cg_stat$ms_list;
	if m_s_p ^= null then cg_stat$ms_list = machine_state.next;
	else do;
		allocate machine_state in (xeq_tree_area) set (m_s_p);
		m_s_p -> node.type = machine_state_node;
		pl1_stat_$node_uses (bin (machine_state_node, 9)) = pl1_stat_$node_uses (bin (machine_state_node, 9)) + 1;
	     end;

     end;

compare_aliasables: proc () returns (bit aligned);

	if p ^= q
	then if q -> reference.shared
	     then if all
		then if q -> reference.aliasable
		     then return ("1"b);
		     else if q -> reference.symbol -> symbol.block_node ^= null
		     then return (q -> reference.symbol -> symbol.block_node -> block.flush_at_call);
		     else ;
		else if q -> reference.aliasable
		then return (compare_alias ((p -> reference.symbol), (q -> reference.symbol)));

	return ("0"b);
     end;

%include compare_alias;


wipe: proc;

	if substr (erase, 1, 1)
	then do;

		do i = 1 to a_reg.number;
		     p = a_reg.variable (i);
		     call save_temp (1);
		     p -> reference.value_in.a = "0"b;
		end;

		a_reg.constant,
		     a_reg.number = 0;
	     end;

	if substr (erase, 2, 1)
	then do;

		do i = 1 to q_reg.number;
		     p = q_reg.variable (i);
		     call save_temp (2);
		     p -> reference.value_in.q = "0"b;
		end;

		q_reg.constant,
		     q_reg.number = 0;
	     end;

	if substr (erase, 3, 1)
	then do;
		p = string_reg.variable;
		if p ^= null
		then do;
			call save_temp (3);
			p -> reference.value_in.string_aq = "0"b;
			string_reg.variable = null;
		     end;
	     end;

	if substr (erase, 4, 1)
	then do;
		q = complex_reg.variable;
		if q ^= null
		then do;
			q -> reference.value_in.complex_aq = "0"b;
			complex_reg.variable = null;
		     end;
	     end;

	if substr (erase, 5, 1)
	then do;
		q = decimal_reg.variable;
		if q ^= null
		then do;
			q -> reference.value_in.decimal_aq = "0"b;
			decimal_reg.variable = null;
		     end;
	     end;

	do i = 0 to 7;
	     if substr (erase, i + 6, 1)
	     then do;
		     if index_regs (i).type >= 2
		     then do;
			     p = index_regs (i).variable;
			     if p ^= null
			     then do;
				     call save_temp (0);
				     p -> reference.value_in.x (i) = "0"b;
				end;
			end;

		     index_regs (i).type = 0;
		end;
	end;

	do i = 1 to 6;
	     if substr (erase, i + 13, 1)
	     then do;
		     p = base_regs (i).variable;
		     n = base_regs (i).type;
		     if p = null then n = 0;

		     if n = 1
		     then do;
			     p -> reference.value_in.b (i) = "0"b;
			     call save_temp (-i);
			end;
		     else if n = 2
		     then p -> reference.address_in.b (i) = "0"b;

		     base_regs (i).type = 0;
		end;
	end;


     end;


save_temp: proc (reg);

	dcl     reg		 fixed bin;

	dcl     ca		 ptr;

	dcl     (macro, t, k)	 fixed bin (15);

	dcl     (stfx1		 init (15),
	        stfx2		 init (16),
	        save_string_aq	 init (229),
	        sxl0		 init (345),
	        stx0		 init (714),
	        zero_mac		 init (308),
	        store_base		 (23:24, 6) init (61, 409, 622, 623, 624, 625, /* unpacked */
				 630, 631, 632, 633, 634, 635), /* packed */
	        sta		 init (4)) fixed bin (15) int static;

	if cg_stat$m_s_p = null then return;

	if ^p -> reference.temp_ref then goto exit;

	if p -> reference.ref_count <= 0 then goto exit;

	if p -> reference.value_in.storage then goto exit;

	if p -> reference.symbol = null then goto exit;

	if p -> reference.dont_save then go to exit;

	if p -> reference.aggregate then go to exit;

	t = p -> reference.data_type;

	if reg = 2
	then do;
		if t = unpacked_ptr
		then if string (p -> reference.value_in.b)
		     then goto exit; else goto save;

		if t = real_fix_bin_1
		then if p -> reference.symbol -> symbol.c_dcl_size < bits_per_half
		     then if string (p -> reference.value_in.x)
			then goto exit;
	     end;

save:	p -> reference.store_ins = bit (cg_stat$text_pos, 18);
	p -> reference.ref_count = p -> reference.ref_count + 1;

	if reg < 0
	then do;
		macro = store_base (t, abs (reg));
		goto gen;
	     end;

	if reg = 3
	then do;
		if p -> reference.allocated then go to exit;
		if ^p -> reference.address_in.storage then go to exit;

		call stack_temp$assign_block (p, 2);

/* we must ensure that saving the string aq does
		   not alter any registers */

		if string (p -> reference.address_in.b)
		then do;
			k = index (string (p -> reference.address_in.b), "1"b) - 1;
			p -> reference.address_in.storage = "0"b;
			call expmac ((store_base (23, k)), p);
			p -> reference.address_in.storage = "1"b;
		     end;
		else do;
			ca = c_a (p -> reference.qualifier -> temporary.location, 4);
			call expmac$one_eis ((save_string_aq), ca);
			p -> reference.ref_count = p -> reference.ref_count - 1;
		     end;

		go to exit;
	     end;

	if reg = 1
	then do;
		if t < char_string then k = 0;
		else k = fixed (p -> reference.c_length * convert_size (t) > bits_per_word, 1);
		call expmac$one ((sta), p, k);

		if a_reg.offset ^= 0
		then do;
			p -> reference.aligned_ref = "0"b;
			p -> reference.c_offset = a_reg.offset;
			p -> reference.units = bit_;
		     end;
	     end;
	else do;
		if reg = 0
		then do;
			if p -> reference.symbol -> symbol.c_dcl_size < bits_per_half
			then do;
				macro = stx0 + i;

/* convert the value in index register to "packed"
			   integer in storage */

				p -> reference.aligned_ref = "0"b;
				p -> reference.c_offset = 0;
				p -> reference.c_length = bits_per_half;
				p -> reference.units = word_;

/* We set reference.dont_save as a
			   kludge to fix bug 1599.  This
			   prevents save_value from converting
			   this back to an aligned temp,
			   which could cause problems after
			   an if statement. */

				p -> reference.dont_save = "1"b;
			     end;

			else do;
				macro = sxl0 + i;
				p -> reference.ref_count = p -> reference.ref_count + 1;
				call expmac ((zero_mac), p);
			     end;
		     end;
		else if t = unpacked_ptr | t = complex_flt_bin_1 then macro = stfx2;
		else if t = packed_ptr | t = bit_string then macro = stfx1;
		else macro = stfx1 - 1 + t;

gen:		call expmac (macro, p);
	     end;

	p -> reference.value_in.storage = "1"b;

exit: end;

need_ref: proc returns (bit (1) aligned);

	dcl     (p1, p2)		 ptr;

	if ^optimize
	then return ("1"b);

	if p -> reference.temp_ref
	then do p1 = q repeat (p1 -> element (4)) while (p1 ^= null);
		p2 = p1 -> element (1);

		if p2 -> node.type = operator_node
		then do;
			if substr (p2 -> operator.op_code, 1, 5) = "00111"b /* mod_bit class */
			then if p2 -> operand (2) = p
			     then return ("1"b);

			p2 = p2 -> operand (1);
		     end;

		if p = p2 then return ("1"b);
	     end;

	return ("0"b);
     end;

     end;
