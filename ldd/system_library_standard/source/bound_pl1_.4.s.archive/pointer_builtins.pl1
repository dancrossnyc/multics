/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */
/* format: style3 */

/* procedure to compile pointer valued operators

   Initial Version: 19 August 1971 by BLW
	Modified: 11 February 1973 by RAB
	Modified:	16 October 1975 by RAB to use all regs
	Modified:	26 March 1975 by RAB to fix bug 1479 introduced
		16 October 1975
	Modified:	27 April 1976 by RAB to fix 1493
	Modified:	7 Dec 1976 by RAB to fix 1559
	Modified:	9 May 1977 by RAB to fix 1617
	Modified:	10 September 1977 by RAB to fix 1613 by adding 3rd arg to store_bit_address	
	Modified: 29 March 1978 by PCK to add stackframeptr, stackbaseptr, environmentptr, and codeptr
	Modified: 19 August 1978 by PCK to fix bug 1742	*/

/* Modified BIM 12/82 to add the Palter builtins (addcharno, setcharno, etc. */
/* Modified BIM 1/83 to un-share the first operand always, since it will  */
/*	 be in the machine state in a PR. This, together with */
/*	 conversion of many compile_exp$save calls to compile_exp, */
/*	 removes a bunch of spurious stores. */
/* Modified BIM 6/83 to stop calling get_base in addr. get_base assumes */
/*         that ref (2) is a pointer VAR to be dicked with, not an object */
/*	 whose addr is to be returned. */
/* Modified BIM 9/83 to fix some malingering problems in the new bifs, */
/*	 including an uninitialized variable in NO_FUNS. */

pointer_builtins:
     proc (pt, store_it);

dcl	pt		ptr,			/* points at operator node */
	store_it		bit (1) aligned;		/* "1"b if value should be stored */

dcl	(
	p,
	q,
	p2,
	s3,
	ref		(3),
	b2
	)		ptr,
	(i, ibase, macro, mac_1, n, old_changed)
			fixed bin (15),
	last_freed	fixed bin (18),
	base		bit (3) aligned,
	op_code		bit (9) aligned,
	(
	atom		(3),
	adjust,
	in_base
	)		bit (1) aligned;

dcl	(
	cg_stat$temp_ref,
	cg_stat$text_base
	)		ptr ext,
	cg_stat$text_pos	fixed bin ext,
	cg_stat$null_value	bit (72) aligned ext,
	cg_stat$cur_level	fixed bin ext;

dcl	adjust_ref_count	entry (pointer, fixed bin);
dcl	base_man$load_any_var
			entry (fixed bin, ptr) returns (bit (3) aligned);
dcl	prepare_operand	entry (ptr, fixed bin (15), bit (1) aligned) returns (ptr),
	compile_exp$save	entry (ptr) returns (ptr),
	compile_exp	entry (ptr),
	c_a		entry (fixed bin (15), fixed bin) returns (ptr),
	load		entry (ptr, fixed bin),
	(
	base_man$load_var,
	base_man$update_base
	)		entry (fixed bin, ptr, fixed bin (15));
dcl	base_man$load_arg_ptr
			entry (fixed bin (15), ptr, fixed bin) returns (bit (3) aligned);
dcl	base_man$load_display
			entry (fixed bin, bit (3) aligned),
	generate_constant$bit_string
			entry (bit (*) aligned, fixed bin) returns (ptr);
dcl	base_to_core	entry (fixed bin (15), ptr),
	state_man$flush_address
			entry (ptr),
	state_man$flush_ref entry (ptr),
	store_bit_address	entry (ptr, ptr, fixed bin (18)),
	store		entry (ptr),
	expmac$zero	entry (fixed bin (15));
dcl	type2		fixed bin (17),
	m_a		entry (ptr, bit (2) aligned),
	cg_error		entry (fixed bin, fixed bin (9));
declare	cg_stat$cur_statement
			pointer external;

dcl	(
	SETCHARNO		init (1),
	ADDCHARNO		init (2),
	SETBITNO		init (3),
	ADDBITNO		init (4)
	)		fixed bin int static options (constant);

dcl	(abs, addrel, bit, fixed, index, null, string)
			builtin;

dcl	fix_bin		fixed bin based;

dcl	ldfx2		init (8) fixed bin (15) static;

dcl	1 half		aligned based,
	  2 left		bit (18) unal,
	  2 right		bit (18) unal;

dcl	1 instruction	aligned based,
	  2 base		bit (3) unal,
	  2 offset	bit (15) unal,
	  2 op_code	bit (10) unal,
	  2 skip		bit (2) unal,
	  2 tag		bit (6) unal;

dcl	(
	pointer_mac_const	(6) init (326, 0, 652, 653, 654, 655),
	addrel_mac_const	(6) init (327, 0, 656, 657, 658, 659),
	zero_bo		(6) init (642, 0, 684, 685, 686, 687),
	longbs_to_bs18	init (131),
	pl1_pointer_easy	init (602),
	pl1_pointer_hard	init (604),		/*	pointer_mac_bs(6)	init(212,0,660,662,664,666), */
	pointer_mac_fx	(6) init (213, 0, 661, 663, 665, 667),
						/*	addrel_mac_bs(6)	init(214,0,668,670,672,674), */
	addrel_mac_fx	(6) init (215, 0, 669, 671, 673, 675),
						/*	baseptr_mac_bs(6)	init(216,0,676,678,680,682), */
	baseptr_mac_fx	(6) init (217, 0, 677, 679, 681, 683)
	)		fixed bin (15) int static;

dcl	epbx		(0:7)
			init ("0111010001"b, "0111010101"b, "0111110001"b, "0111010010"b, "0111010110"b,
			"0111110010"b, "0111110110"b, "0111110101"b) bit (10) aligned int static;

%include cgsystem;
%include operator;
%include reference;
%include symbol;
%include block;
%include op_codes;
%include data_types;
%include nodes;
%include machine_state;
%include bases;
%include temporary;

	p = pt;
	p2 = p -> operand (2);


	op_code = p -> operator.op_code;

	if op_code = param_ptr
	then do;
		i = 0;

		goto l4;
	     end;

	if op_code = param_desc_ptr
	then do;
		i = 1;

l4:
		ref (1) = prepare_operand ((p -> operand (1)), 1, atom (1));

		base =
		     base_man$load_arg_ptr (i, (p -> operand (3)),
		     p2 -> reference.symbol -> symbol.initial -> fix_bin);

		ibase = which_base (fixed (base, 3));
		goto to_core;
	     end;

	if op_code >= ptr_fun
	then n = 1;
	else n = -1;

	do i = 1 to p -> operator.number;
	     ref (i) = prepare_operand ((p -> operand (i)), n, atom (i));
	end;

	if op_code = setcharno_fun
	then call NO_FUNS (SETCHARNO);
	else if op_code = addcharno_fun
	then call NO_FUNS (ADDCHARNO);
	else if op_code = setbitno_fun
	then call NO_FUNS (SETBITNO);
	else if op_code = addbitno_fun
	then call NO_FUNS (ADDBITNO);			/* these dont return here */

	if op_code = addr_fun
	then do;

		if ^atom (2)
		then if p2 -> node.type = operator_node
		     then ref (2) = compile_exp$save (p2);
						/* make addr (expression) work, invalid though it is */

		adjust, in_base = "0"b;		/* of interest only in the varying case */

		if ref (2) -> reference.varying_ref
		then do;
			adjust = "1"b;
			call adjust_c_offset (-1);
		     end;

		ibase = which_base (bin (base_man$load_any_var (2, ref (2)), 3));

		if adjust
		then call reset_c_offset (-1);

		ref (2) -> reference.address_in.b (ibase) = "0"b;
						/* we cannot remember both addr (ref (2)) and ref (1). */
		base_regs (ibase).variable = null;
		base_regs (ibase).type = 0;
to_core:
		if ref (1) -> reference.allocate
		then if store_it
		     then call base_to_core (ibase, ref (1));
		     else ;
		else call state_man$flush_ref (ref (1));

		if ibase ^= 7			/* protect pr6 from optimization for stackframeptr */
		then call base_man$update_base (1, ref (1), ibase);
		else call state_man$flush_ref (ref (1));

		ref (1) -> reference.evaluated = "1"b;	/* Cannot be shared at this point */
done:
		cg_stat$temp_ref = ref (1);
		return;
	     end;

	if op_code = addr_fun_bits
	then do;

		if ^atom (2)
		then if p2 -> node.type = operator_node
		     then ref (2) = compile_exp$save (p2);
						/* see above */

		ref (1) -> reference.ref_count = ref (1) -> reference.ref_count + 1;
		last_freed = 0;
		if ref (1) -> reference.temp_ref
		then if ref (1) -> reference.qualifier ^= null
		     then last_freed = ref (1) -> reference.qualifier -> temporary.last_freed;

		if store_it
		then call store_bit_address (ref (1), ref (2), last_freed);
		else begin;
declare	base_bits		bit (3) aligned;
			base_bits = base_man$load_any_var (2 /* addr */, ref (2));
			call base_man$update_base (1, ref (1), (which_base (fixed (base_bits, 3))));
		     end;
		goto done;
	     end;

	if op_code = ptr_fun
	then do;

		if ref (2) -> reference.symbol -> symbol.ptr
		then do;

/* this is Multics version of ptr builtin */
/* The ref count must be bumped here because the optimiser */
/* does not know that we hit the output temp twice -- once */
/* when we compile it, once when we load it. */

			if ^atom (2)
			then if p2 -> node.type = operator_node
			     then do;
				     call adjust_ref_count ((p2 -> operator.operand (1)), +1);
				     call compile_exp (p2);
				     ref (2) = p2 -> operator.operand (1);
				end;

			if ref (3) -> reference.offset ^= null
			then goto l1;
			if ref (3) -> reference.c_offset ^= 0
			then goto l1;

			s3 = ref (3) -> reference.symbol;
			if s3 -> symbol.constant
			then
Multics_POINTER_CONSTANT:
			     do;
				ibase = get_base ();
				mac_1 = pointer_mac_const (ibase);
				goto c0;
			     end;

			goto l1;
		     end;

/* this is PL/1 version of ptr builtin */


		if ^atom (2)
		then ref (2) = compile_exp$save (p2);

		call load (ref (2), 0);

		q = ref (3) -> reference.symbol;
		if q -> symbol.internal & (q -> symbol.auto | q -> symbol.static)
		then macro = pl1_pointer_easy;
		else macro = pl1_pointer_hard;

		call base_man$load_var (2, ref (3), 1);

		call expmac$zero (macro + ref (1) -> reference.data_type - unpacked_ptr);

		ref (2) -> reference.address_in.b (1) = "0"b;
		base_regs (1).variable = null;
		base_regs (1).type = 0;

/* next 3 lines necessary because store won't always update state */

		q_reg.variable (1) = ref (1);
		q_reg.number = 1;
		ref (1) -> reference.value_in.q = "1"b;

		if ref (1) -> reference.allocate & store_it
		then call store (ref (1));

		else do;
			if ^ref (1) -> reference.allocate
			then call state_man$flush_ref (ref (1));

			q_reg.variable (1) = ref (1);
			q_reg.number = 1;
			ref (1) -> reference.value_in.q = "1"b;
		     end;

		call base_man$update_base (1, ref (1), 1);

		goto done;
	     end;

	if op_code = addrel_fun
	then do;

		if ^atom (2)
		then if p2 -> node.type = operator_node
		     then do;
			     call adjust_ref_count ((p2 -> operator.operand (1)), 1);
						/* we will call base_man, which costs an extra ref_count hit */
			     call compile_exp (p2);
			     ref (2) = p2 -> operator.operand (1);
			end;

		if ref (3) -> reference.offset ^= null
		then goto l1;
		if ref (3) -> reference.c_offset ^= 0
		then goto l1;

		s3 = ref (3) -> reference.symbol;
		if ^s3 -> symbol.constant
		then goto l1;

		ibase = get_base ();
		mac_1 = addrel_mac_const (ibase);

c0:
		q = s3 -> symbol.initial;

		if ref (3) -> reference.data_type = bit_string
		then do;
			if ref (3) -> reference.long_ref
			then goto l1;
			if ref (3) -> reference.c_length > 18
			then goto l1;
		     end;
		else if abs (q -> fix_bin) >= 131072
		then goto l1;

		old_changed = base_regs (ibase).changed;

		call base_man$load_var (1, ref (2), ibase);
		ref (2) -> reference.value_in.b (ibase) = "0"b;
		base_regs (ibase).variable = null;
		base_regs (ibase).type = 0;
		n = base_regs (ibase).changed;

		if op_code = ptr_fun
		then if q -> fix_bin = 0 & n ^= old_changed
		     then do;
			     q = addrel (cg_stat$text_base, n);
			     q -> instruction.op_code = epbx (ibase);
			     base_regs (ibase).instruction = string (q -> instruction);
			     goto to_core;
			end;


		call expmac$zero (mac_1);

		p = addrel (cg_stat$text_base, cg_stat$text_pos - 1);

		if ref (3) -> reference.data_type = bit_string
		then p -> left = q -> left;
		else do;
			if q -> fix_bin >= 0
			then p -> left = bit (fixed (q -> fix_bin, 18), 18);
			else p -> left = bit (fixed (262144 + q -> fix_bin, 18), 18);
		     end;

		goto to_core;

l1:
		if atom (3)
		then call load (ref (3), 0);
		else call compile_exp ((p -> operand (3)));

		if ref (3) -> reference.long_ref
		then call expmac$zero ((longbs_to_bs18));

		ibase = get_base ();
		if op_code = ptr_fun
		then macro = pointer_mac_fx (ibase);
		else macro = addrel_mac_fx (ibase);

		old_changed = base_regs (ibase).changed;

		call base_man$load_var (1, ref (2), ibase);
		ref (2) -> reference.value_in.b (ibase) = "0"b;
		base_regs (ibase).variable = null;
		base_regs (ibase).type = 0;

		if op_code ^= addrel_fun
		then do;
l2a:
			call expmac$zero (macro - fixed (ref (3) -> reference.data_type = bit_string, 1));
			goto to_core;
		     end;

		n = base_regs (ibase).changed;
		if n = old_changed
		then go to l2a;
		q = addrel (cg_stat$text_base, n);

		if q -> instruction.tag = "000000"b
		then do;
			if ref (3) -> reference.data_type = bit_string
			then do;
				if a_reg.changed > n
				then go to l2a;
				q -> instruction.tag = "000001"b;
						/* au */
			     end;
			else do;
				if q_reg.changed > n
				then go to l2a;
				q -> instruction.tag = "000110"b;
						/* ql */
			     end;
			go to set_inst;
		     end;

		if q -> instruction.tag ^= "010000"b
		then goto l2a;

		if ref (3) -> reference.data_type = bit_string
		then do;
			if a_reg.changed > n
			then goto l2a;
			q -> instruction.tag = "110001"b;
						/* *au */
		     end;
		else do;
			if q_reg.changed > n
			then goto l2a;
			q -> instruction.tag = "110110"b;
						/* *ql */
		     end;
set_inst:
		base_regs (ibase).instruction = string (q -> instruction);
		call expmac$zero ((zero_bo (ibase)));
		goto to_core;
	     end;

	if op_code = baseptr_fun
	then do;

		if atom (2)
		then call load (ref (2), 0);
		else call compile_exp ((p -> operand (2)));
		if p -> operator.operand (2) -> node.type = operator_node
		then ref (2) = p -> operator.operand (2) -> operator.operand (1);

		ibase = get_base ();
		macro = baseptr_mac_fx (ibase);
		ref (3) = ref (2);

		goto l2a;
	     end;

	if op_code = stackframeptr_fun
	then do;
		if ref (1) -> reference.allocate & store_it
		then do;
			ibase = which_base (6);
			goto to_core;
		     end;

		ref (2) = c_a (0, 4);

		ibase = get_base ();

		call base_man$load_var (2, ref (2), ibase);

		ref (2) -> reference.address_in.b (ibase) = "0"b;
		base_regs (ibase).variable = null;
		base_regs (ibase).type = 0;
		goto to_core;
	     end;

	if op_code = stackbaseptr_fun
	then do;
		ref (2) = c_a (0, 4);

		ibase = get_base ();

		old_changed = base_regs (ibase).changed;

		call base_man$load_var (2, ref (2), ibase);
		ref (2) -> reference.address_in.b (ibase) = "0"b;
		base_regs (ibase).variable = null;
		base_regs (ibase).type = 0;
		n = base_regs (ibase).changed;

		if n ^= old_changed
		then do;
			q = addrel (cg_stat$text_base, n);
			q -> instruction.op_code = epbx (ibase);
			base_regs (ibase).instruction = string (q -> instruction);
			goto to_core;
		     end;

		call expmac$zero ((pointer_mac_const (ibase)));
		goto to_core;
	     end;

	if op_code = codeptr_fun
	then do;

		if ^atom (2)
		then ref (2) = compile_exp$save (p2);
		ibase = get_base ();
		type2 = ref (2) -> reference.data_type;

		if type2 = label_constant | (ext_entry_in <= type2 & type2 <= int_entry_other)
		then do;				/* process label, format, and entry constants */
			call base_man$load_var (2, ref (2), ibase);
			ref (2) -> reference.address_in.b (ibase) = "0"b;
		     end;
		else do;				/* process label, format, and entry variables */
			call base_man$load_var (1, ref (2), ibase);
			ref (2) -> reference.value_in.b (ibase) = "0"b;
		     end;

		base_regs (ibase).variable = null;
		base_regs (ibase).type = 0;
		goto to_core;

	     end;

	if op_code = environmentptr_fun
	then do;
		if ^atom (2)
		then ref (2) = compile_exp$save (p2);
		type2 = ref (2) -> reference.data_type;

		if type2 = ext_entry_in | type2 = ext_entry_out
		then do;				/* process external entry constants */
			ref (2) = generate_constant$bit_string (cg_stat$null_value, (bits_per_two_words));
			ref (2) -> reference.data_type = unpacked_ptr;
			ibase = get_base ();
			call base_man$load_var (1, ref (2), ibase);
			ref (2) -> reference.value_in.b (ibase) = "0"b;
			base_regs (ibase).variable = null;
			base_regs (ibase).type = 0;
		     end;

		else if type2 = label_constant | type2 = int_entry | type2 = int_entry_other
		then do;				/* process label, format, and internal entry constants */
			b2 = ref (2) -> reference.symbol -> symbol.block_node;
			if cg_stat$cur_level = b2 -> block.level
			then do;
				if ref (1) -> reference.allocate & store_it
				then do;
					ibase = which_base (6);
					goto to_core;
				     end;

				ref (2) = c_a (0, 4);
				ibase = get_base ();
				call base_man$load_var (2, ref (2), ibase);
				ref (2) -> reference.address_in.b (ibase) = "0"b;
			     end;
			else do;
				call base_man$load_display (cg_stat$cur_level - b2 -> block.level, base);
				ibase = which_base (fixed (base, 3));
			     end;
		     end;

		else do;				/* process label, format, and entry variables */
			ibase = get_base ();
			call adjust_c_offset (2);
			call base_man$load_var (1, ref (2), ibase);
			call reset_c_offset (2);
			base_regs (ibase).variable = null;
			base_regs (ibase).type = 0;

		     end;

		goto to_core;

	     end;

err:
	call cg_error (301, fixed (op_code, 9));


get_base:
     proc returns (fixed bin (15));

dcl	i		fixed bin (15);
dcl	(
	first_base	init (3),
	last_base		init (6)
	)		fixed bin (15) int static;

/* all these functions destroy the PR containing op (2). If this */
/* is of the form a = OP (a, ...) then this is fine, or if we */
/* have no other use for a. Otherwise, copy a into another PR */
/* to keep the original value around */

	if string (ref (2) -> reference.value_in.b)
	then if ref (2) -> reference.ref_count = 1 | ref (1) = ref (2)
	     then return (index (string (ref (2) -> reference.value_in.b), "1"b) - 1);
	     else ;
	else if ref (2) -> reference.data_type >= unpacked_ptr
	then do;

/* m_a can load pointer regs */

		call m_a (ref (2), "00"b);
		ref (2) -> reference.perm_address = "1"b;
						/* base_man will turn off  */
	     end;

	do i = 1, first_base to last_base;
	     if base_regs (i).type = 0
	     then return (i);
	     else if base_regs (i).type <= 2
	     then if base_regs (i).variable -> reference.hit_zero | ^base_regs (i).variable -> reference.allocate
		then return (i);
	end;

	return (1);
     end;

adjust_c_offset:
     proc (adjust_offset);

dcl	adjust_offset	fixed bin;

	ref (2) -> reference.c_offset = ref (2) -> reference.c_offset + adjust_offset;

	if string (ref (2) -> reference.address_in.b)
	then do;
		if ref (2) -> reference.address.offset ^= (15)"0"b
		then call m_a (ref (2), "00"b);
		call state_man$flush_address (ref (2));
		in_base = "1"b;
		if adjust_offset >= 0
		then ref (2) -> address.offset = bit (fixed (adjust_offset, 15), 15);
		else ref (2) -> address.offset = bit (fixed (adjust_offset + 32768, 15), 15);
		ref (2) -> reference.perm_address = "1"b;
		ref (2) -> reference.no_address = "0"b;
	     end;
	else in_base = "0"b;

     end;

reset_c_offset:
     proc (adjust_offset);

dcl	adjust_offset	fixed bin;

	ref (2) -> reference.c_offset = ref (2) -> reference.c_offset - adjust_offset;

	if in_base
	then do;
		ref (2) -> address.offset = (15)"0"b;
		ref (2) -> reference.perm_address = "0"b;
	     end;

     end;


/* The following uses a different approach from the rest of this program */
/* to avoid the piles and piles of macros used by the pointer and addrel */
/* cases, or the patching of instructions, this just uses a locked base register */
/* to avoid the problem of a pointer qualified second argument */

NO_FUNS:
     procedure (Funx);
declare	Funx		fixed bin;
declare	base_man$load_var_and_lock
			entry (fixed bin, ptr, fixed bin (15));
declare	base_man$unlock	entry (fixed bin (15));

declare	q		pointer;

declare	expmac		entry (fixed bin (15), pointer);
declare	base_bits		bit (3) aligned;
declare	s3_constant	bit (1) aligned;
declare	constant_zero	bit (1) aligned;
declare	constant_value	fixed bin (24);
declare	based_fb_24	fixed bin (24) based;

declare	MACRO		(4) fixed bin (15) init (373, 373, 374, 374) int static options (constant);
declare	binary		builtin;


          s3_constant = "0"b; /* until proven guilty */

	s3 = ref (3) -> reference.symbol; /* prepare_operand made ref (3) the output operand if its non-atomic */
	if s3 -> symbol.constant
	then do;
		s3_constant = "1"b;
		constant_value = s3 -> symbol.initial -> based_fb_24;
	     end;

	constant_zero = s3_constant & constant_value = 0;

	if constant_zero
	then if Funx = ADDCHARNO | Funx = ADDBITNO
	     then do;
		     ibase = get_base ();		/* find the var in a base */
		     call base_man$load_var (1, ref (2), ibase);
						/* in case it was in no register yet */
		     go to to_core;			/* and return it there */
		end;

	if ^atom (2)
	then call compile_exp (p2);

	if s3_constant
	then do;					/* if even number of words, optimize */
		if constant_zero
		then call CONVERT_TO_POINTER_CONSTANT (0);
		if Funx = SETCHARNO & mod (constant_value, 4) = 0
		then call CONVERT_TO_POINTER_CONSTANT (divide (constant_value, 4, 24, 0));
		else if Funx = SETBITNO & mod (constant_value, 36) = 0
		then call CONVERT_TO_POINTER_CONSTANT (divide (constant_value, 36, 24, 0));
	     end;

	q = c_a (0, 1);				/* get a constant ref node */

	ibase = get_base ();
	base_bits = bases (ibase);
	call base_man$load_var_and_lock (1, ref (2), ibase);
						/* will just find and lock if get_base loaded */

/* This code could call aq_man$load_any_var, and then set the modifier */
/* on the instruction appropriately. */

	if ^atom (3)				/* atomize 3 */
	then call compile_exp ((p -> operator.operand (3)));
	else call load (ref (3), 0);			/* dont negate */

	q -> reference.address.base = base_bits;
	q -> reference.address.tag = "06"b3;		/* QL */
	q -> reference.relocation = ""b;

	if Funx = ADDCHARNO | Funx = ADDBITNO		/* add... */
	then q -> reference.address.ext_base = "1"b;	/* turn on bit 29 */
	call expmac (MACRO (Funx), q);
	call base_man$unlock (ibase);
	machine_state.base_regs (ibase).variable = null ();
	machine_state.base_regs (ibase).type = 0;
	ref (2) -> reference.value_in.b (ibase) = "0"b;
	go to to_core;				/* store if that is the right thing, then return. */

CONVERT_TO_POINTER_CONSTANT:
     procedure (Word_offset);
declare	Word_offset	fixed bin (24);
declare	declare_constant	ext entry (bit (*) aligned, bit (36) aligned, fixed bin (31), fixed bin (31))
			returns (pointer);
declare	size		fixed bin (31);
declare	value		bit (36) aligned;
declare	substr		builtin;

%include mask;

/***** This procedure does not patch the tree. Perhaps a better way */
/* would be for something in the semantics to detect these cases, and */
/* have it make the tree start out as pointer (foo, bar), but I */
/* don't know how to do that, and I do know how to do this. --BIM */

	op_code = ptr_fun;

	size = 18;
	value = unspec (Word_offset);

	ref (3) = declare_constant (value, fixed_binary_real_mask | unsigned_mask, size, 0);
	s3 = ref (3) -> reference.symbol;		/* global depended on */
	go to Multics_POINTER_CONSTANT;
     end CONVERT_TO_POINTER_CONSTANT;


     end NO_FUNS;

     end pointer_builtins;
