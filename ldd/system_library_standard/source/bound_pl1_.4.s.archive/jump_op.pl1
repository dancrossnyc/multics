/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-07-28,JRGray), approve(89-07-28,MCR8123), audit(89-09-12,Vu),
     install(89-09-22,MR12.3-1073):
     Called state_man$save_regs to save temps before conditionals are
     evaluated (pl1 2091 2177).
  2) change(89-09-26,JRGray), approve(89-09-26,MCR8123), audit(89-09-27,Vu),
     install(89-09-29,MR12.3-1076):
     Fixed so that saving registers for label arrays no longer causes side
     effects.
                                                   END HISTORY COMMENTS */


/* procedure to compile jumps and conditional jumps

   Initial Version: 29 March 1971 by BLW for Version II
	Modified:  9 January 1973 by BLW
	Modified:	12 June 1973 by RAB for EIS
	Modified:	7 May 1974 by RAB to fix bug 941 by providing eval_primaries
	Modified:	23 October 1974 by RAB to fix bug 1242
	Modified:	2 November 1975 by RAB to allow outside access to eval_prim
	Modified:	16 May 1976 by RAB to fix 1497
	Modified:	23 June 1976 by RAB to centralize use of cg_stat$last_call
	Modified:	1 July 1976 by RAB for label array improvements
	Modified:	29 July 1976 by RAB to fix minor bug in label array stuff
	Modified:	5 November 1976 by RAB to take advantage of fix to bugs 1542 & 1546
		in operator_semantics
	Modified:	9 March 1977 by RAB to remove some dead code caused by previous change
	Modified 790703 by PG to fix 1844 (using a decimal expression in an if statement and the then or else clause
		sometimes generated bad code), and to remove old_fortran jump_three_way.
	Modified 790824 by PG to tension goto's only if -optimize was specified.
*/

jump_op:	proc(pt);

/* parameters */

dcl	pt ptr;		/* points at an operator node */

/* automatic */

dcl	(pb,p,arg(3),q,s1,save_p1) ptr,
	(atomic,p2_atomic,p3_atomic,conditional,is_return,load_index) bit(1) aligned,
	(dt,i,j,k,n,macro,code,hard,size,count,start,finish) fixed bin(15);

/* based */

dcl	based_bit_string bit(size) aligned based;

/* builtins */

dcl	(fixed,null,substr) builtin;

/* defined */

dcl	p1 ptr defined(arg(1)),
	p2 ptr defined(arg(2)),
	p3 ptr defined(arg(3));

/* entries */

dcl	expmac entry(fixed bin(15),ptr),
	expmac$fill_usage entry(fixed bin(18),fixed bin(17)),
	expmac$zero entry(fixed bin(15)),
	error entry(fixed bin,ptr,ptr),
	base_man$load_var entry(fixed bin,ptr,fixed bin),
	xr_man$load_any_var entry(ptr,fixed bin(15),fixed bin),
	xr_man$load_const entry(fixed bin(15),fixed bin),
	c_a entry(fixed bin(15),fixed bin) returns(ptr);
dcl	m_a entry(ptr,bit(2) aligned);
dcl	compile_exp$save entry(ptr) returns(ptr),
	need_temp entry(ptr,bit(2) aligned),
	prepare_operand entry(ptr,fixed bin,bit(1) aligned) returns(ptr),
	state_man$flush entry,
	state_man$create_ms entry returns(ptr),
	state_man$save_regs entry(ptr),
	state_man$save_ms entry(ptr,bit(1) aligned),
	state_man$discard_ms entry,
	set_indicators entry(ptr,ptr,ptr,fixed bin(15)) returns(fixed bin(15));

/* external static */

dcl	(cg_stat$cur_block,cg_stat$cur_statement,cg_stat$jump_label,cg_stat$m_s_p) ptr ext,
	cg_stat$text_pos fixed bin(18) ext,
	cg_stat$skip_to_label bit(1) ext,
	cg_stat$cur_level fixed bin ext,
	cg_stat$optimize bit (1) aligned external static;

/* internal static */

dcl (	tra		init(169),
	tra_ext_1		init(170),
	tra_ext_2		init(171)) fixed bin (15) int static;

dcl	reverse(8) fixed bin(15) int static
	init(2,1,8,7,6,5,4,3);

dcl	jump_table(8 /* operator */, 0:1 /* string? */, 0:1 /* reversed? */) fixed bin(15) int static
	init(	/* true	*/ 181, 181, 181, 181,
		/* false	*/ 180, 180, 180, 180,
		/*  <	*/ 176, 178, 177, 179,
		/*  >	*/ 178, 176, 179, 177,
		/*  =	*/ 180, 180, 180, 180,
		/*  ^=	*/ 181, 181, 181, 181,
		/*  <=	*/ 182, 184, 183, 185,
		/*  >=	*/ 184, 182, 185, 183);

/* include files */

%include reference;
%include operator;
%include symbol;
%include label;
%include block;
%include statement;
%include nodes;
%include op_codes;
%include data_types;
%include list;

/* program */

	pb = cg_stat$cur_block;

	p = pt;
	s1, p1 = p -> operand(1);

	/* if the destination of this transfer is another transfer,
	   go directly to destination of other transfer */

	if p1 -> node.type = label_node & cg_stat$optimize
	then do;
		do count = 1 to 10;			/* limit number of attempts */
		     p3 = p1 -> label.statement;
		     q = p3 -> statement.root;

		     do while(q = null);
			p3 = p3 -> statement.next;
			if p3 = null then goto prep;
			q = p3 -> statement.root;
		     end;

		     if q -> operator.op_code ^= jump then goto prep;

		     if p3 = cg_stat$cur_statement
		     then do;
			call error(325,p3,null);	/* infinite loop */
			goto prep;
			end;

		     p2 = q -> operand(1);
		     if p2 -> node.type ^= label_node then goto prep;
		     if p1 -> label.block_node ^= p2 -> label.block_node then goto prep;

		     p1 = p2;
		end;

prep:	     if s1 ^= p1
	     then do;

		/* if we actually skipped over a transfer, we have to correct the
		   reference counts on the statements involved */

		q = s1 -> label.statement;
		q -> statement.reference_count = q -> statement.reference_count - 1;

		q = p1 -> label.statement;
		q -> statement.reference_count = q -> statement.reference_count + 1;

		end;

	     end;

	else if p1 -> node.type = reference_node
	     then if p1 -> reference.symbol = null
		then do;

		     /* a reference node with no symbol would have been created
		        by a call to c_a.  This is used to indicate a conditional
		        return statement	     */

		     is_return = "1"b;
		     goto sh;
		     end;
		else if p1 -> reference.symbol -> node.type = label_node
		     then call init_label_array_info;

	is_return = "0"b;

	/* operator_semantics ensures that operand(1) of a conditional jump
	   operator will not be an operator node nor a reference node with
	   expressions hanging off.  This used to arise in the case of
	   if <expr> then goto <lab>; when <lab> was other than a simple
	   reference to a label constant */

	p1 = prepare_operand(p1,1,atomic);
	dt = p1 -> reference.data_type;
	s1 = p1 -> reference.symbol;

sh:	hard = 0;

	/* get integer giving op_code going from 0 to 8 */

	i, n = fixed(p -> operator.op_code,9) - fixed(jump,9);

	if n >= 3 then n = 3;

	if n > 0
	then do;

	     /* have conditional jump */

	     if is_return then goto cond_ok;

	     if dt = label_constant
	     then if cg_stat$cur_level = s1 -> label.block_node -> block.level
		then do;
		     if ^ cg_stat$cur_statement -> statement.checked
		     then if ^ s1 -> label.allocated
			then call eval_primaries((s1 -> label.statement));
			else if s1 -> label.array
			     then call eval_all_primaries;
		     go to cond_ok;
		     end;

	     /* special action needed for conditional transfer to something
	        other than a label constant */

	     hard = 1;
	     i = reverse(i);
	     save_p1 = p1;

	     s1 = cg_stat$jump_label;
	     s1 -> label.allocated = "0"b;
	     s1 -> label.location = 0;
	     p1 = prepare_operand(s1,1,atomic);

cond_ok:	     conditional = "1"b;
	     p2 = p -> operand(2);
	     goto switch(n);
	     end;

	if dt = label_constant
	then if s1 -> label.array
	then if p1 -> reference.offset ^= null
	then if ^ cg_stat$cur_statement -> statement.checked
	then if cg_stat$cur_block = s1 -> label.block_node
	then call eval_all_primaries;

	/* have unconditional jump */

uncond:	conditional = "0"b;

	if dt = local_label_variable
	then do;

	     q = s1 -> symbol.block_node;

	     if q = pb
	     then do;

		/* the local label variable is declared in current block,
		   can transfer indirectly thru the pointer */

jump_ind:		call m_a(p1,"1"b);			/* no indirection allowed */
		p1 -> reference.perm_address = "1"b;
		substr(p1 -> address.tag,2,1) = "1"b;	/* r mod -> r* mod */
		goto put_tra;
		end;

	     /* if none of the blocks between this one and the block in
	        which the local label variable is declared have stack frames,
	        we also can jump indirectly */

	     do while(pb -> block.no_stack);
		pb = pb -> block.father;
		end;

	     if q = pb then goto jump_ind;

	     /* must use an unwinder to do the transfer */

unwind:	     macro = tra_ext_2;
	     load_index = "0"b;
	     goto load_bp;
	     end;

	/* if operand(1) is a pointer, we have jump to a do block */

	if dt = unpacked_ptr then goto jump_ind;

	if dt = real_fix_bin_1
	then do;

	     /* have transfer resulting from Fortran assigned goto */

	     call xr_man$load_any_var(p1,k,0);
	     p1 = c_a(k,8);			/* 0,xr */
	     goto put_tra;
	     end;

	if dt ^= label_constant then goto unwind;

	/* get number of blocks between current block and block in
	   which the constant appears */

	k = cg_stat$cur_level - s1 -> label.block_node -> block.level;

	if k ^= 0
	then do;

	     /* must use an unwinder since label is in an outer block */

	     load_index = "1"b;
	     macro = tra_ext_1;

load_bp:	     call base_man$load_var(2,p1,1);	/* load ptr into bp */

	     if load_index
		then call xr_man$load_const(k,7);	/* load x7 with number of frames to walk */

	     call state_man$discard_ms;

	     call expmac$zero(macro);
	     goto done;
	     end;

put_tra:	macro = tra;

	goto put;

	/* opcode is jump_true */

switch(1):
	if hard = 1 then goto sw_2;

sw_1:	if p2 -> node.type ^= operator_node then goto jump_tf;

	/* look for case "if ^ bit(1) then ..." */

	if p2 -> operator.op_code ^= not_bits then goto jump_tf;
	if p2 -> operand(1) -> reference.c_length ^= 1 then goto jump_tf;
	if ^ p2 -> operand(1) -> reference.shared then go to jump_tf;

	/* have case "if ^ bit(1)", remove the not and change to jump_false */

	pt -> operand(2), p2 = p2 -> operand(2);
	i = i + 1;
	goto jump_tf;

	/* opcode is jump_false */

switch(2):
	if hard = 1 then goto sw_1;

sw_2:	if p2 -> node.type ^= operator_node then goto chk_const;

	/* look for case of form "if ^ bit(1) then return;" */

	if p2 -> operator.op_code ^= not_bits then goto jump_tf;
	if p2 -> operand(1) -> reference.c_length ^= 1 then goto jump_tf;
	if ^ p2 -> operand(1) -> reference.shared then go to jump_tf;

	/* remove the node and change to jump_true */

	pt -> operand(2), p2 = p2 -> operand(2);
	i = i - 1;
	goto jump_tf;

	/* look for jump produces by construct
		do while("1"b);
	   and eliminate the test	*/

chk_const:
	if p2 -> reference.offset ^= null then goto jump_tf;
	if p2 -> reference.c_offset ^= 0 then goto jump_tf;
	if p2 -> reference.length ^= null then goto jump_tf;

	q = p2 -> reference.symbol;
	if ^ q -> symbol.constant then goto jump_tf;
	if ^ q -> symbol.bit then goto jump_tf;
	if q -> symbol.varying then goto jump_tf;
	if q -> symbol.dimensioned then goto jump_tf;

	if hard > 0 then goto jump_tf;

	size = q -> symbol.c_dcl_size;
	if q -> symbol.initial -> based_bit_string then return;

jump_tf:	code = 5;
	p3 = null;
	goto jump_rel;

	/* have conditional jump */

switch(3):
	code = 0;

jump_rel:	p2 = prepare_operand(p2,1,p2_atomic);

	if code = 0
	then do;
	     p3 = prepare_operand((p -> operand(3)),1,p3_atomic);
	     code = fixed(p2_atomic || p3_atomic,2);
	     end;

	if ^is_return & hard = 0 & dt = label_constant then	/* save useful registers now to avoid clobbering indicators later */
	     if s1 -> label.array then call label_array_save_regs;
	     else if ^s1 -> label.allocated then call state_man$save_regs((s1 -> label.statement));

	k = set_indicators(pt,p2,p3,code);

	if p2 -> reference.data_type <= real_flt_bin_2 then j = 0;
	else do;
	     q = p2 -> reference.symbol;
	     j = fixed(q -> symbol.bit | q -> symbol.char,1);
	     end;

	macro = jump_table(i,j,k);

put:	if is_return then goto putx;

	call m_a(p1,"0"b);
	p1 -> reference.perm_address = "1"b;

	if p1 -> reference.ref_count = 1
	then if p1 -> reference.offset ^= null | p1 -> reference.qualifier ^= null
	     then call need_temp(p1,"10"b);

	if dt = label_constant
	then if hard ^= 0
	     then call state_man$flush;
	     else if s1 -> label.array
		then call process_label_array;
		else if ^ s1 -> label.allocated
		     then call state_man$save_ms((s1 -> label.statement),conditional);
		     else if ^ conditional
			then call state_man$discard_ms;
			else;
	else if hard ^= 0
	     then call state_man$flush;

putx:	call expmac(macro,p1);

	if hard = 1
	then do;

	     /* just finished first part of conditional transfer to jump_label,
	        how go unconditional transfer to the real label */

	     p1 = save_p1;

	     s1 = p1 -> reference.symbol;
	     hard = 2;
	     goto uncond;
	     end;

done:	if hard = 2
	then do;
	     call expmac$fill_usage(cg_stat$text_pos,(cg_stat$jump_label -> label.location));
	     if cg_stat$m_s_p = null then cg_stat$m_s_p = state_man$create_ms();
	     else call state_man$flush;
	     cg_stat$skip_to_label = "0"b;
	     end;
	else cg_stat$skip_to_label = ^ conditional;

	return;

jump_op$eval_primaries:	entry(pt);

	p1 = pt;
	if p1 -> node.type = label_node
	then call eval_primaries((p1 -> label.statement));
	else do;
	     call init_label_array_info;
	     call eval_all_primaries;
	     end;
	return;



eval_primaries:	proc(stm);

	     /* eval_primaries is called before an easy conditional forward
	     jump to ensure that all expressions known now and known
	     at the label are fully evaluated.  It searches the primary list
	     at the label.  This routine is necessary because the code generator
	     does not usually evaluate the addr_fun operator as an optimization,
	     and because short unaligned strings are most often not converted
	     to aligned temporaries when they are stored, but rather when they
	     are loaded again later.  Thus, an anomalous situation would
	     arise, if an expr, like those mentioned above, was encountered
	     before a conditional forward jump without its being evaluated,
	     was evaluated along one branch of execution, thus making the
	     code generator think it was already evaluated when it encountered
	     the expr yet again along the other branch of execution.  */

dcl	     (prim,q,r,stm) ptr;

	     do prim = stm -> statement.reference_list
		repeat prim -> element(4) while(prim ^= null);
		q = prim -> element(1);
		if q -> node.type = operator_node
		then do;
		     r = q -> operand(1);
	 	     if ^ r -> reference.evaluated
		     then if r -> reference.ref_count > 1
			then if q -> operator.op_code = addr_fun
			     then call evaluate;
		     end;
		else if ^ q -> reference.aligned_ref
		     then if q -> reference.ref_count > 1
			then if ^q -> reference.symbol -> symbol.decimal
			     then call evaluate;
		end;

evaluate:		proc;

		/* evaluate q */

dcl		atomic bit(1) aligned;

		r = prepare_operand(q,1,atomic);

		if ^ atomic
		then if ^ r -> reference.aggregate
		     then r = compile_exp$save(q);

		end;

	     end;


init_label_array_info: proc;

/* initializes start, finish for further use */

	     if p1 -> reference.offset = null
	     then start, finish = p1 -> reference.c_offset + 1;

	     else do;
		start = 1;
		finish = p1 ->reference.symbol -> label.statement -> list.number;
		end;

	     end;


eval_all_primaries:	proc;

	     /* finds all statements for which eval_primaries must be called.
	        called only for label array in same block */

dcl	     (q,vector) ptr;
dcl	     i fixed bin;

	     vector = p1 -> reference.symbol -> label.statement;

	     do i = start to finish;
		if vector -> list.element(i) ^= null
		then do;
		     q = vector -> element(i);
		     if q -> statement.object.start = 0
			then call eval_primaries(q);
		     end;
		end;

	     end;


process_label_array: proc;

	     /* handle machine state for local jumps to label array target */

dcl	     (vector,q) ptr;
dcl	     i fixed bin;
dcl	     cond bit(1) aligned;

	     cond = conditional | start ^= finish;
	     vector = s1 -> label.statement;

	     do i = start to finish;
		if vector -> element(i) ^= null
		then do;
		     q = vector -> element(i);
		     if q -> statement.object.start = 0
		     then call state_man$save_ms(q,cond);
		     else if ^ cond
			then call state_man$discard_ms;
		     end;
		end;

	     if start ^= finish
		then call state_man$discard_ms;

	     end;

label_array_save_regs:	proc;

	/* saves temp-values before local jumps to label array target */

dcl	i fixed bin;
dcl	q ptr;

	do i =  start to finish;
	     q = s1 -> label.statement -> element(i);
	     if q ^= null then
		if q -> statement.object.start = 0 then call state_man$save_regs(q);
	  end;
     end label_array_save_regs;

end jump_op;
