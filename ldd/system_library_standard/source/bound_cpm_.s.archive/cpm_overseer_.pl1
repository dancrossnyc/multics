/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1985 *
        *                                                         *
        *********************************************************** */

/* format: off */

/* Control Point Management -- Entrypoints which manage the environment of a control point */

/****^  HISTORY COMMENTS:
  1) change(86-08-12,Kissel), approve(86-08-12,MCR7473),
     audit(86-10-20,Fawcett), install(86-11-03,MR12.0-1206):
     Written to support control point management in March 1985 by G. Palter.
                                                   END HISTORY COMMENTS */

/* format: style3,linecom */

cpm_overseer_:
     procedure ();

	return;					/* not an entrypoint */


/* Parameters */

dcl	P_ccpi_ptr	pointer parameter;		/* overseer: -> describes how to create the control point */
dcl	P_initproc				/* overseer: first user program to run in the control point */
			entry (pointer) variable parameter;
dcl	P_initproc_arg_list_ptr			/* overseer: -> the above program's argument list */
			pointer parameter;

dcl	P_gcf_ptr		pointer parameter;		/* generate_call: -> generate_call_flags (see include file) */
dcl	P_userproc				/* generate_call: the user program to be executed */
			entry (pointer) variable parameter;
dcl	P_userproc_arg_list_ptr			/* generate_call: -> the above program's argument list */
			pointer parameter;

dcl	P_cl_flags	bit (36) aligned parameter;	/* cl_intermediary: flags which control new command level */


/* Parameters for entrypoints used to prevent non-quick procedures */

dcl	P_cpd_ptr		pointer parameter;

dcl	P_old_cpd_ptr	pointer parameter;
dcl	P_new_cpd_ptr	pointer parameter;
dcl	P_cpd_swapped_switches
			bit (1) unaligned parameter;
dcl	P_new_swapped_switches_setting
			bit (1) aligned parameter;

dcl	P_new_mask	bit (36) aligned parameter;
dcl	P_old_mask	bit (36) aligned parameter;


/* Remaining declarations */

dcl	1 parent_control_point_data
			like control_point_data aligned based (control_point_data.parent);

dcl	based_generate_call_flags
			bit (36) aligned based;

dcl	old_mask		bit (36) aligned;

dcl	generate_call_flags bit (36) aligned;
dcl	pushed_preferred_state
			bit (1) aligned;
dcl	prior_state	fixed binary;
dcl	return_from_intermediary
			bit (1) aligned;
dcl	saved_swapped_switches
			bit (1) aligned;

dcl	(
	sys_info$comm_privilege,
	sys_info$dir_privilege,
	sys_info$ipc_privilege,
	sys_info$rcp_privilege,
	sys_info$ring1_privilege,
	sys_info$seg_privilege,
	sys_info$soos_privilege
	)		bit (36) aligned external;

dcl	continue_to_signal_ entry (fixed binary (35));
dcl	cpm_$call_self_destruct
			entry ();
dcl	cpm_$update_state_caller
			entry (pointer, fixed binary);
dcl	cu_$arg_list_ptr	entry () returns (pointer);
dcl	cu_$generate_call	entry (entry, pointer);
dcl	(
	cu_$get_cl_intermediary,
	cu_$set_cl_intermediary
	)		entry (entry (bit (36) aligned));
dcl	default_error_handler_$wall
			entry ();
dcl	default_error_handler_$wall_ignore_pi
			entry ();
dcl	get_privileges_	entry () returns (bit (36) aligned);
dcl	hcs_$get_ips_mask	entry (bit (36) aligned);
dcl	hcs_$reset_ips_mask entry (bit (36) aligned, bit (36) aligned);
dcl	hcs_$set_ips_mask	entry (bit (36) aligned, bit (36) aligned);
dcl	ioa_$ioa_switch	entry () options (variable);
dcl	ioa_$rsnnl	entry () options (variable);
dcl	sub_err_		entry () options (variable);
dcl	(
	system_privilege_$comm_priv_on,
	system_privilege_$comm_priv_off,
	system_privilege_$dir_priv_on,
	system_privilege_$dir_priv_off,
	system_privilege_$ipc_priv_on,
	system_privilege_$ipc_priv_off,
	system_privilege_$rcp_priv_on,
	system_privilege_$rcp_priv_off,
	system_privilege_$ring1_priv_on,
	system_privilege_$ring1_priv_off,
	system_privilege_$seg_priv_on,
	system_privilege_$seg_priv_off,
	system_privilege_$soos_priv_on,
	system_privilege_$soos_priv_off
	)		entry (fixed binary (35));

dcl	any_other		condition;
dcl	cleanup		condition;

dcl	(addr, bool, null, stackbaseptr, substr)
			builtin;
%page;
/* The initial procedure for a new control point -- This entrypoint is responsible for completing the creation of an
   environment for the new control point.  This responsibility includes establishing the standard I/O switches for this
   control point if they are to be different from our parent's control point. */

/* NOTE: This entrypoint is always called with all IPS signals masked. */

overseer:
     entry (P_ccpi_ptr, P_initproc, P_initproc_arg_list_ptr);

	on any_other call error_handler$catch_all ();	/* setup our unclaimed signal handler */

	cpd_ptr = stackbaseptr () -> stack_header.cpm_data_ptr;/* get our definitions */
	ccpi_ptr = P_ccpi_ptr;

	if trace_$transaction_end (1)			/* setup tracing according to our stack */
	then ;

	call cu_$set_cl_intermediary (control_point_data.cl_intermediary);
						/* set our initial CL intermediary ($cl_intermediary below) */

	call restore_privileges ();			/* set our initial privileges (all OFF) */

	call mask_ips_interrupts (control_point_data.ips_mask, old_mask);
						/* unmask all IPS interrupts (most likely) */

	on cleanup call issue_root_start_order_caller (cpd_ptr);

	if create_control_point_info.separate_standard_iocbs
	then do;					/* setup our I/O switches */
		call create_control_point_switches ();
		on cleanup
		     begin;			/* ... and be sure to get rid of them on explicit destroy */
			call destroy_control_point_switches_caller (cpd_ptr, ccpi_ptr, old_mask);
			call issue_root_start_order_caller (cpd_ptr);
		     end;
	     end;

	call cu_$generate_call (P_initproc, P_initproc_arg_list_ptr);
						/* start the control point running */

	if create_control_point_info.separate_standard_iocbs
	then call destroy_control_point_switches (old_mask);
						/* we're done with these switches */

	/*** We must leave all IPS signals unmasked when we return.  Otherwise, cpm_$self_destruct will call the
	     scheduler with all IPS signals masked and, if there are no ready control points, we will call hardcore to
	     block with all signals masked which is clearly wrong. */

RETURN_FROM_OVERSEER:
	call issue_root_start_order ();		/* kick the root */

	return;					/* complete the control point's destruction */
%page;
/* The portion of cpm_$generate_call which executes in the target control point -- This entrypoint is responsible for
   readying the control point's environment before executing the user program requested by the call to cu_$generate_call.
   If cpm_$generate_call or cpm_$generate_call_preferred were used, this entrypoint will force the control point into the
   READY state and restore it to its prior state when execution is completed.  If cpm_$generate_call_preferred was used,
   this entrypoint will push the preferred control point, make this control point preferred, and restore the preferred
   control point when execution is completed.  In addition, if this control point uses a different set of standard I/O
   switches than the previously executing control point, this entrypoint must restore the switches before executing the
   user's program and then save them upon completion.  This action is required as the scheduler will have saved our
   switches before running any control point with different switches and will expect to restore them when it regains
   control in this control point which will occur after we return. */

/* NOTE: This entrypoint is always invoked with all IPS signals masked. */

generate_call:
     entry (P_gcf_ptr, P_userproc, P_userproc_arg_list_ptr);

	cpd_ptr = stackbaseptr () -> stack_header.cpm_data_ptr;/* get our definition */
	generate_call_flags = P_gcf_ptr -> based_generate_call_flags;

	if trace_$transaction_end (1)			/* setup tracing according to our stack */
	then ;

	pushed_preferred_state = "0"b;		/* for cleanup handler */

	on cleanup				/* in case the user's program aborts */
	     begin;
		/*** On a non-local goto, we must not restore the IPS mask.  If we did, the control point would
		     continue execution with all IPS signals masked which would, eventually, cause problems when it
		     tries to block.  In addition, we do not restore the prior state as, if we were blocked, we are
		     about to release past the scheduler and the ipc_$block call which caused us to become blocked in
		     the first place.  If we had been stopped, we are about to release past the cu_$cl call which
		     place us in that state.  Finally, we do not save our I/O switches as we are not going to return
		     to our caller (the scheduler) which would restore them. */
		call cpm_$pop_preferred_control_point (pushed_preferred_state);
		call issue_start_orders_caller (cpd_ptr);
	     end;

	if generate_call_flags & CPM_GC_FORCE_READY	/* cpm_$generate_call or cpm_$generate_call_preferred ... */
	then do;					/* ... so make sure this control point is READY */
		prior_state = control_point_data.state;
		if control_point_data.state ^= CPM_READY
		then call cpm_$update_state_caller (cpd_ptr, CPM_READY);
	     end;

	if generate_call_flags & CPM_GC_PUSH_PREFERRED	/* cpm_$generate_call_preferred: make us temporarily "it" */
	then call cpm_$push_preferred_control_point (control_point_data.id, pushed_preferred_state, (0));

	saved_swapped_switches = control_point_data.swapped_switches;
	control_point_data.swapped_switches = "0"b;	/* don't use the root's switches during a generate_call */

	if different_switches (cpd_ptr, cpm_data_$previous_control_point)
	then call restore_io_switches ();		/* we need to get our switches back */

	call cu_$set_cl_intermediary (control_point_data.cl_intermediary);
						/* restore our control point's CL intermediary */

	call restore_privileges ();			/* restore our system privileges */

	call mask_ips_interrupts (control_point_data.ips_mask, old_mask);
						/* restore our control point's IPS mask */

	call cu_$generate_call (P_userproc, P_userproc_arg_list_ptr);
						/* run the user's procedure */

	call issue_start_orders ();			/* in case the user's procedure did I/O */

	call hcs_$get_ips_mask (control_point_data.ips_mask);
	substr (control_point_data.ips_mask, 36) = "1"b;	/* construct possible new IPS mask for this control point */

	call unmask_ips_interrupts (old_mask);		/* restore the IPS mask */

	control_point_data.privileges = get_privileges_ ();
						/* preceeding call may permanently affect our privileges */

	call cu_$get_cl_intermediary (control_point_data.cl_intermediary);
						/* it may also permanently change the CL intermediary */

	if different_switches (cpd_ptr, cpm_data_$previous_control_point)
	then call save_io_switches ();		/* put our switches back where the scheduler will find them */

	control_point_data.swapped_switches = saved_swapped_switches;

	call cpm_$pop_preferred_control_point (pushed_preferred_state);
						/* restore the previous preferred control point if pushed */

	if generate_call_flags & CPM_GC_FORCE_READY	/* cpm_$generate_call or cpm_$generate_call_preferred ... */
	then if prior_state ^= CPM_READY		/* ... so reset our state if it wasn't READY */
	     then call cpm_$update_state_caller (cpd_ptr, prior_state);

	if trace_$transaction_begin (1)		/* disbale tracing until we're in another control point */
	then ;

	return;					/* return to the scheduler ... */
%page;
/* The command level intermediary used by Control Point Management */

cl_intermediary:
     entry (P_cl_flags);

	cpd_ptr = stackbaseptr () -> stack_header.cpm_data_ptr;


/* If we were invoked by default_error_handler_, our standard I/O switches will have been swapped with those belonging to
   the root control point.  Before reaching command level, we must be sure to be using the proper set of switches. */

	saved_swapped_switches = control_point_data.swapped_switches;
						/* we must remember whether to restore the switches */

	old_mask = ""b;				/* used by swap_switches */

	on cleanup
	     begin;				/* in case of a release ... */
		call issue_start_orders_caller (cpd_ptr);
		if saved_swapped_switches & ^control_point_data.swapped_switches
		then call swap_switches_caller (cpd_ptr, addr (cpm_data_$root_control_point_data),
			control_point_data.swapped_switches, "1"b);
	     end;					/* ... put things back the way the error_handler expects them */

	if control_point_data.swapped_switches		/* restore the control point's native switches */
	then call swap_switches (addr (cpm_data_$root_control_point_data), cpd_ptr, control_point_data.swapped_switches,
		"0"b, "0"b);


/* Invoke the user's CL intermediary if defined for this control point -- On return, if it requests, simply return without
   getting a new command level as if a "start" command had been issued. */

	if control_point_data.user_cl_intermediary ^= cpm_$nulle
	then do;

		return_from_intermediary = "0"b;	/* in case the user's CL intermediary doesn't set it */

		call control_point_data.user_cl_intermediary (return_from_intermediary);

		if return_from_intermediary
		then go to RETURN_FROM_CL_INTERMEDIARY;
	     end;


/* Now get to command level -- If we are the root control point, we can invoke the saved intermediary to get a new
   listener level.  Otherwise, we must stop this control point and let some other control point run; however, before we
   stop, we will try to print a message that we have stopped this control point. */

	if cpd_ptr = addr (cpm_data_$root_control_point_data)
	then call cpm_data_$saved_cl_intermediary (P_cl_flags);

	else do;
		on any_other			/* fault occured trying to write the following message ... */
		     call cpm_$call_self_destruct ();
		call ioa_$ioa_switch (iox_$error_output, "^a: Control point ^12.3b^[ (^a)^] stopped.",
		     cpm_data_$subsystem_name, control_point_data.id, (control_point_data.comment ^= ""),
		     control_point_data.comment);

		on any_other call error_handler$ignore_pi ();
						/* setup a condition wall */

		call issue_root_start_order ();	/* kick the root */

		call cpm_$stop (control_point_data.id, (0));
		call cpm_$scheduler ();		/* find something to do */

		revert any_other;			/* we've been restarted ... */
	     end;


/* Return to the caller of cu_$cl -- Reswap the standard switches if needed and issue a "start" control order on both our
   own user_i/o and the root's user_i/o to avoid possible lost wakeups. */

RETURN_FROM_CL_INTERMEDIARY:
	call issue_start_orders ();

	if saved_swapped_switches			/* put things back the way the error_handler expects them */
	then call swap_switches (cpd_ptr, addr (cpm_data_$root_control_point_data), control_point_data.swapped_switches,
		"1"b, "0"b);

	return;
%page;
/* The unclaimed signal (any_other) handler for any control point other than the root --  Before actually processing the
   signal, we first swap the current control point's I/O switches with those belonging to the root control point.  Thus,
   any messages printed by default_error_handler_ will be displayed on the original login terminal as opposed to whatever
   connection the control point might be using.  Of course, we must be certain to put things back after processing is
   completed. */

error_handler:
     procedure ();
	return;					/* not used */

dcl	real_error_handler	entry () variable;
dcl	must_swap_switches	bit (1) aligned;
dcl	our_arg_list_ptr	pointer;


error_handler$catch_all:				/* catch everything including program_interrupt */
     entry ();
	real_error_handler = default_error_handler_$wall;
	go to ERROR_HANDLER;


error_handler$ignore_pi:				/* catch everything but program_interrupt and a few others */
     entry ();
	real_error_handler = default_error_handler_$wall_ignore_pi;
	go to ERROR_HANDLER;


ERROR_HANDLER:
	our_arg_list_ptr = cu_$arg_list_ptr ();

	must_swap_switches = ^control_point_data.swapped_switches;

	on cleanup
	     begin;
		if must_swap_switches & control_point_data.swapped_switches
		then call swap_switches_caller (addr (cpm_data_$root_control_point_data), cpd_ptr,
			control_point_data.swapped_switches, "0"b);
	     end;

	if must_swap_switches
	then call swap_switches_caller (cpd_ptr, addr (cpm_data_$root_control_point_data),
		control_point_data.swapped_switches, "1"b);

	call cu_$generate_call (real_error_handler, our_arg_list_ptr);

	if must_swap_switches & control_point_data.swapped_switches
	then call swap_switches_caller (addr (cpm_data_$root_control_point_data), cpd_ptr,
		control_point_data.swapped_switches, "0"b);

	return;

     end error_handler;
%page;
/* Setup the control point's I/O switches when separate switches are requested -- Four uniquely named switches are created
   to represent the new control point's standard switches.  If an attach description for user_i/o is provided, it is used
   to create an independent attachment for the new control point; otherwise, the new control point's user_i/o is syn_'ed
   to its parent's user_i/o.  If any switch can not be setup, sub_err_ is used to inform the user. */

create_control_point_switches:
     procedure ();

dcl	1 local_io_switches like control_point_data.io_switches aligned;

dcl	an_iocb_ptr	pointer;
dcl	id_string		character (12);
dcl	parents_user_io	character (21);
dcl	our_user_io	character (21);
dcl	code		fixed binary (35);

	local_io_switches = null ();			/* for proper error recovery */

	call ioa_$rsnnl ("^12.3b", id_string, (0), control_point_data.id);
	our_user_io = id_string || ".user_i/o";		/* construct the name of our user_i/o switch */

	if create_control_point_info.user_io_attach_desc_given
	then do;					/* new control point has its own user_i/o */
		call iox_$attach_name (our_user_io, local_io_switches.user_io,
		     create_control_point_info.user_io_attach_desc, null (), code);
		if code ^= 0
		then call attach_failure (our_user_io, create_control_point_info.user_io_attach_desc, code);
		call iox_$open (local_io_switches.user_io, Stream_input_output, "0"b, code);
		if code ^= 0
		then call open_failure (our_user_io, code);
	     end;

	else do;					/* new control point is to share its parent's user_i/o */
		call ioa_$rsnnl ("^12.3b.user_i/o", parents_user_io, (0), parent_control_point_data.id);
		call attach_syn ("user_i/o", parents_user_io, "", local_io_switches.user_io);
	     end;

	/*** Attach user_input, user_output, and error_output as synonyms of user_i/o.  These switches are not syn_'ed
	     to the control point's private user_i/o because, if they were, they will always be syn_'ed to that switch
	     even after it is moved to the real user_i/o. */

	call attach_syn ("user_input", "user_i/o", "put_chars", local_io_switches.user_input);
	call attach_syn ("user_output", "user_i/o", "get_chars get_line", local_io_switches.user_output);
	call attach_syn ("error_output", "user_i/o", "get_chars get_line", local_io_switches.error_output);

	call unmask_ips_interrupts (old_mask);		/* prevent interrupts while updating control_point_data */

	control_point_data.io_switches = local_io_switches;
	control_point_data.group_id = control_point_data.id;
						/* we've now created the switches */

	if cpm_data_$previous_control_point -> control_point_data.swapped_switches
	then call swap_switches (addr (cpm_data_$root_control_point_data), cpd_ptr, control_point_data.swapped_switches,
		"0"b, "1"b);
	else call swap_switches (cpm_data_$previous_control_point, cpd_ptr, control_point_data.swapped_switches, "0"b,
		"1"b);

	call mask_ips_interrupts (control_point_data.ips_mask, old_mask);

	return;


/* Control arrives here iff an error occurs while trying to create the control point's standard switches */

ERROR_RETURN_FROM_CREATE_CONTROL_POINT_SWITCHES:
	do an_iocb_ptr = local_io_switches.user_input, local_io_switches.user_output, local_io_switches.error_output;
	     if an_iocb_ptr ^= null ()
	     then do;
		     call iox_$detach_iocb (an_iocb_ptr, (0));
		     call iox_$destroy_iocb (an_iocb_ptr, (0));
		end;
	end;

	if local_io_switches.user_io ^= null ()
	then do;
		if create_control_point_info.user_io_attach_desc_given
		then call iox_$close (local_io_switches.user_io, (0));
		call iox_$detach_iocb (local_io_switches.user_io, (0));
		call iox_$destroy_iocb (local_io_switches.user_io, (0));
	     end;

	go to RETURN_FROM_OVERSEER;



/* Attaches an I/O switch as a synonym to the supplied target switch */

attach_syn:
     procedure (p_switch_name, p_target_switch_name, p_inhibits, p_switch_iocb);

dcl	p_switch_name	character (*) parameter;
dcl	p_target_switch_name
			character (*) parameter;
dcl	p_inhibits	character (*) parameter;
dcl	p_switch_iocb	pointer parameter;

dcl	switch_name	character (32) varying;
dcl	attach_description	character (128) varying;

	switch_name = id_string;			/* construct the switch's name */
	switch_name = switch_name || ".";
	switch_name = switch_name || p_switch_name;

	attach_description = "syn_ ";			/* now construct the attach description */
	attach_description = attach_description || p_target_switch_name;
	attach_description = attach_description || " -inhibit close ";
	if p_inhibits ^= ""
	then attach_description = attach_description || p_inhibits;

	call iox_$attach_name ((switch_name), p_switch_iocb, (attach_description), null (), code);
	if code ^= 0
	then call attach_failure (switch_name, attach_description, code);

	return;

     end attach_syn;



/* Reports an error while attaching one of the control point's standard I/O switches */

/* format: off */
dcl	attach_failure	generic (
		attach_failure_nonvarying
			when (character (*) nonvarying, character (*) nonvarying, fixed binary (35)),
		attach_failure_varying
			when (character (*) varying, character (*) varying, fixed binary (35)));
/* format: on */


attach_failure_nonvarying:				/* ... with nonvarying parameters */
     procedure (p_switch_name, p_attach_desc, p_code);

dcl	p_switch_name	character (*) parameter;
dcl	p_attach_desc	character (*) parameter;
dcl	p_code		fixed binary (35) parameter;

	call sub_err_ (p_code, cpm_data_$subsystem_name, ACTION_DEFAULT_RESTART, null (), 0,
	     "Trying to attach ^a using the attach description -^/^-^a", p_switch_name, p_attach_desc);

	go to ERROR_RETURN_FROM_CREATE_CONTROL_POINT_SWITCHES;

     end attach_failure_nonvarying;


attach_failure_varying:				/* ... with varying parameters */
     procedure (p_switch_name, p_attach_desc, p_code);

dcl	p_switch_name	character (*) varying parameter;
dcl	p_attach_desc	character (*) varying parameter;
dcl	p_code		fixed binary (35) parameter;

	call sub_err_ (p_code, cpm_data_$subsystem_name, ACTION_DEFAULT_RESTART, null (), 0,
	     "Trying to attach ^a using the attach description -^/^-^a", p_switch_name, p_attach_desc);

	go to ERROR_RETURN_FROM_CREATE_CONTROL_POINT_SWITCHES;

     end attach_failure_varying;



/* Reports an error while trying to open one of the control point's standard I/O switches */

open_failure:					/* ... while trying to open a switch */
     procedure (p_switch_name, p_code);

dcl	p_switch_name	character (*) parameter;
dcl	p_code		fixed binary (35) parameter;

	call sub_err_ (p_code, cpm_data_$subsystem_name, ACTION_DEFAULT_RESTART, null (), 0, "Trying to open ^a.",
	     p_switch_name);

	go to ERROR_RETURN_FROM_CREATE_CONTROL_POINT_SWITCHES;

     end open_failure;

     end create_control_point_switches;
%page;
/* Destroy the control point's standard I/O switches setup by a prior call to create_control_point_switches */

destroy_control_point_switches:
     procedure (p_old_mask);

dcl	p_old_mask	bit (36) aligned parameter;

dcl	1 local_io_switches like control_point_data.io_switches aligned;
dcl	an_iocb_ptr	pointer;

	call unmask_ips_interrupts (p_old_mask);	/* prevent interrupts while updating control_point_data */

	if parent_control_point_data.swapped_switches	/* revert to our parent's switches or the root's if swapped */
	then call swap_switches (cpd_ptr, addr (cpm_data_$root_control_point_data), control_point_data.swapped_switches,
		"1"b, "1"b);
	else call swap_switches (cpd_ptr, control_point_data.parent, control_point_data.swapped_switches, "0"b, "1"b);

	local_io_switches = control_point_data.io_switches;
						/* work on local copies so we're never without switches */

	control_point_data.group_id = parent_control_point_data.group_id;
	control_point_data.io_switches = parent_control_point_data.io_switches;
						/* switch back to our parent's switches */

	call mask_ips_interrupts (control_point_data.ips_mask, p_old_mask);

	do an_iocb_ptr = local_io_switches.user_input, local_io_switches.user_output, local_io_switches.error_output;
	     if an_iocb_ptr ^= null ()
	     then do;				/* one of the always syn_'ed switches exists */
		     call iox_$detach_iocb (an_iocb_ptr, (0));
		     call iox_$destroy_iocb (an_iocb_ptr, (0));
		end;
	end;

	if local_io_switches.user_io ^= null ()
	then do;					/* it's user_i/o switch exists */
		if create_control_point_info.user_io_attach_desc_given
		then call iox_$close (local_io_switches.user_io, (0));
		call iox_$detach_iocb (local_io_switches.user_io, (0));
		call iox_$destroy_iocb (local_io_switches.user_io, (0));
	     end;

	return;

     end destroy_control_point_switches;



/* Invoke destroy_control_point_switches -- This entrypoint exists to prevent making destroy_control_point_switches
   non-quick by invoking it from within an on unit or other non-quick procedure. */

destroy_control_point_switches_caller:
     entry (P_cpd_ptr, P_ccpi_ptr, P_old_mask);

	cpd_ptr = P_cpd_ptr;
	ccpi_ptr = P_ccpi_ptr;

	call destroy_control_point_switches (P_old_mask);

	return;
%page;
/* Swap the standard I/O switches in force from the old control point's switches to those of a new control point */

swap_switches:
     procedure (p_old_cpd_ptr, p_new_cpd_ptr, p_cpd_swapped_switches, p_new_swapped_switches_setting, p_caller_is_masked);

dcl	1 old_cpd		like control_point_data aligned based (p_old_cpd_ptr);
dcl	p_old_cpd_ptr	pointer parameter;

dcl	1 new_cpd		like control_point_data aligned based (p_new_cpd_ptr);
dcl	p_new_cpd_ptr	pointer parameter;

dcl	p_cpd_swapped_switches			/* a control point's swapped_switches flag ... */
			bit (1) unaligned parameter;
dcl	p_new_swapped_switches_setting		/* ... and the above flag's new setting */
			bit (1) aligned parameter;

dcl	p_caller_is_masked	bit (1) aligned parameter;	/* ON => the caller has already masked IPS interrupts */

	if old_cpd.group_id = new_cpd.group_id		/* they are using the same switches: this is a no-op */
	then return;

	if ^p_caller_is_masked			/* prevent interrupts while playing with the switches */
	then call mask_ips_interrupts (""b, old_mask);

	call iox_$move_attach (iox_$user_io, old_cpd.io_switches.user_io, (0));
	call iox_$move_attach (iox_$user_input, old_cpd.io_switches.user_input, (0));
	call iox_$move_attach (iox_$user_output, old_cpd.io_switches.user_output, (0));
	call iox_$move_attach (iox_$error_output, old_cpd.io_switches.error_output, (0));

	call iox_$move_attach (new_cpd.io_switches.user_io, iox_$user_io, (0));
	call iox_$move_attach (new_cpd.io_switches.user_input, iox_$user_input, (0));
	call iox_$move_attach (new_cpd.io_switches.user_output, iox_$user_output, (0));
	call iox_$move_attach (new_cpd.io_switches.error_output, iox_$error_output, (0));

	p_cpd_swapped_switches = p_new_swapped_switches_setting;

	if ^p_caller_is_masked			/* it's safe now */
	then call unmask_ips_interrupts (old_mask);

	return;

     end swap_switches;



/* Invoke swap_switches -- This entrypoint exists to prevent making swap_switches
   non-quick by invoking it from an on unit or other non-quick procedure. */

swap_switches_caller:
     entry (P_new_cpd_ptr, P_old_cpd_ptr, P_cpd_swapped_switches, P_new_swapped_switches_setting);

	old_mask = ""b;				/* for any_other handler */
	on any_other
	     begin;
		if substr (old_mask, 36, 1) = "1"b
		then call unmask_ips_interrupts_caller (old_mask);
		call continue_to_signal_ ((0));	/* ... let the error get through */
	     end;

	call swap_switches (P_new_cpd_ptr, P_old_cpd_ptr, P_cpd_swapped_switches, P_new_swapped_switches_setting, "0"b);

	return;
%page;
/* Issue "start" control orders on the appropriate user_i/o switches -- This procedure is invoked after any operation
   which may have caused asynchronous I/O to prevent lost wakeups.  A "start" order is issued on the current control
   point's user_i/o and also on the user_i/o associated with the root control point (i.e., the user's terminal) if it is
   different from the current control point's user_i/o. */

issue_start_orders:
     procedure ();

	call iox_$control (iox_$user_io, "start", null (), (0));

	if control_point_data.swapped_switches		/* user_i/o above is the root's: must also start our's */
	then call iox_$control (control_point_data.user_io, "start", null (), (0));

	else					/* user_i/o above was our's: check the root's */
	     if control_point_data.group_id ^= cpm_data_$root_control_point_data.group_id
	then call iox_$control (cpm_data_$root_control_point_data.user_io, "start", null (), (0));

	return;

     end issue_start_orders;



/* Invoke issue_start_orders -- This entrypoint exists to prevent making the issue_start_orders internal procedure
   non-quick by invoking it from within an on unit or other non-quick procedure. */

issue_start_orders_caller:
     entry (P_cpd_ptr);

	cpd_ptr = P_cpd_ptr;

	call issue_start_orders ();

	return;
%page;
/* Issue a "start" control order on the root control point's user_i/o switch -- This procedure is invoked whenever the
   current control point is about to be stopped or destroyed.  If the root control point was blocked for input on its
   user_i/o, any I/O performed to that switch by another control point would be considered asynchronous I/O and, without a
   "start" order, could leave the root control point blocked forever for an event that will never occur. */

issue_root_start_order:
     procedure ();

	if different_switches (cpd_ptr, addr (cpm_data_$root_control_point_data))
	then call iox_$control (cpm_data_$root_control_point_data.user_io, "start", null (), (0));

	else call iox_$control (iox_$user_io, "start", null (), (0));
						/* this control point shares its switches with the root */

	return;

     end issue_root_start_order;



/* Invoke issue_root_start_order -- This entrypoint exists to prevent making the issue_root_start_order internal procedure
   non-quick by invoking it from within an on unit or other non-quick procedure. */

issue_root_start_order_caller:
     entry (P_cpd_ptr);

	cpd_ptr = P_cpd_ptr;

	call issue_root_start_order ();

	return;
%page;
/* Restore the standard I/O switches assigned to this control point */

restore_io_switches:
     procedure ();

	call iox_$move_attach (control_point_data.user_io, iox_$user_io, (0));
	call iox_$move_attach (control_point_data.user_input, iox_$user_input, (0));
	call iox_$move_attach (control_point_data.user_output, iox_$user_output, (0));
	call iox_$move_attach (control_point_data.error_output, iox_$error_output, (0));

	return;

     end restore_io_switches;



/* Save the standard I/O switches assigned to this control point */

save_io_switches:
     procedure ();

	call iox_$move_attach (iox_$user_io, control_point_data.user_io, (0));
	call iox_$move_attach (iox_$user_input, control_point_data.user_input, (0));
	call iox_$move_attach (iox_$user_output, control_point_data.user_output, (0));
	call iox_$move_attach (iox_$error_output, control_point_data.error_output, (0));

	return;

     end save_io_switches;



/* Determines if the two specified control points use different sets of standard I/O switches */

different_switches:
     procedure (p_cpd_1_ptr, p_cpd_2_ptr) returns (bit (1) aligned);

dcl	1 cpd_1		like control_point_data aligned based (p_cpd_1_ptr);
dcl	1 cpd_2		like control_point_data aligned based (p_cpd_2_ptr);
dcl	(p_cpd_1_ptr, p_cpd_2_ptr)
			pointer parameter;

	if cpd_1.swapped_switches & cpd_2.swapped_switches
	then return ("0"b);				/* both control points are using the root's switches */

	else if cpd_1.group_id = cpd_2.group_id		/* same group: they use the same switches ... */
	then return (cpd_1.swapped_switches ^= cpd_2.swapped_switches);
						/* ... unless one is using the root's but not the other */

	else if (cpd_1.swapped_switches & (cpd_2.group_id = cpm_data_$root_control_point_data.group_id))
	     | (cpd_2.swapped_switches & (cpd_1.group_id = cpm_data_$root_control_point_data.group_id))
	then return ("0"b);				/* different groups: but one is swapped to the other */

	else return ("1"b);				/* different groups really using different switches */

     end different_switches;
%page;
/* Restore the current control point's system privileges -- We need not worry about access to system_privilege_ as we only
   call it when we actually discover that a privilege has changed and the only way to change privileges is to use the
   system_privilege_ gate itself. */

restore_privileges:
     procedure ();

dcl	current_privileges	bit (36) aligned;

	current_privileges = get_privileges_ ();

	if control_point_data.privileges = current_privileges
	then return;				/* privileges are already correct */

	if bool (control_point_data.privileges, current_privileges, "0110"b) & sys_info$comm_privilege
	then if control_point_data.privileges & sys_info$comm_privilege
	     then call system_privilege_$comm_priv_on ((0));
	     else call system_privilege_$comm_priv_off ((0));

	if bool (control_point_data.privileges, current_privileges, "0110"b) & sys_info$dir_privilege
	then if control_point_data.privileges & sys_info$dir_privilege
	     then call system_privilege_$dir_priv_on ((0));
	     else call system_privilege_$dir_priv_off ((0));

	if bool (control_point_data.privileges, current_privileges, "0110"b) & sys_info$ipc_privilege
	then if control_point_data.privileges & sys_info$ipc_privilege
	     then call system_privilege_$ipc_priv_on ((0));
	     else call system_privilege_$ipc_priv_off ((0));

	if bool (control_point_data.privileges, current_privileges, "0110"b) & sys_info$rcp_privilege
	then if control_point_data.privileges & sys_info$rcp_privilege
	     then call system_privilege_$rcp_priv_on ((0));
	     else call system_privilege_$rcp_priv_off ((0));

	if bool (control_point_data.privileges, current_privileges, "0110"b) & sys_info$ring1_privilege
	then if control_point_data.privileges & sys_info$ring1_privilege
	     then call system_privilege_$ring1_priv_on ((0));
	     else call system_privilege_$ring1_priv_off ((0));

	if bool (control_point_data.privileges, current_privileges, "0110"b) & sys_info$seg_privilege
	then if control_point_data.privileges & sys_info$seg_privilege
	     then call system_privilege_$seg_priv_on ((0));
	     else call system_privilege_$seg_priv_off ((0));

	if bool (control_point_data.privileges, current_privileges, "0110"b) & sys_info$soos_privilege
	then if control_point_data.privileges & sys_info$soos_privilege
	     then call system_privilege_$soos_priv_on ((0));
	     else call system_privilege_$soos_priv_off ((0));

	return;

     end restore_privileges;
%page;
/* Mask the specified IPS interrupts */

mask_ips_interrupts:
     procedure (p_new_mask, p_old_mask);

dcl	p_new_mask	bit (36) aligned parameter;
dcl	p_old_mask	bit (36) aligned parameter;

	call hcs_$set_ips_mask (p_new_mask, p_old_mask);

     end mask_ips_interrupts;



/* Invoke mask_ips_interrupts -- This entrypoint exists to prevent making the mask_ips_interrupts internal procedure
   non-quick by invoking it from within an on unit or other non-quick procedure. */

mask_ips_interrupts_caller:
     entry (P_new_mask, P_old_mask);

	call mask_ips_interrupts (P_new_mask, P_old_mask);
	return;



/* Restore the IPS mask to its state prior to calling mask_ips_interrupts */

unmask_ips_interrupts:
     procedure (p_old_mask);

dcl	p_old_mask	bit (36) aligned parameter;

	if substr (p_old_mask, 36, 1) = "1"b
	then call hcs_$reset_ips_mask (p_old_mask, p_old_mask);

     end unmask_ips_interrupts;



/* Invoke unmask_ips_interrupts -- This entrypoint exists to prevent making the unmask_ips_interrupts internal procedure
   non-quick by invoking it from within an on unit or other non-quick procedure. */

unmask_ips_interrupts_caller:
     entry (P_old_mask);

	call unmask_ips_interrupts (P_old_mask);
	return;

/* format: off */
%page; %include cpm_internal_data;
%page; %include cpm_control_point_data;
%include cpm_ctrl_pt_meters;
%include process_usage;
%page; %include cpm_create_ctrl_pt_info;
%page; %include cpm_entries;
%page; %include cpm_generate_call_flags;
%page; %include stack_header;
%page; %include iox_dcls;
%page; %include iox_modes;
%page; %include sub_err_flags;
%page; %include trace_interface;
/* format: on */

     end cpm_overseer_;
