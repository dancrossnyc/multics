/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1985 *
        *                                                         *
        *********************************************************** */

/* format: off */

/* Per-process initialization of the Multics Control Point Manager (cpm_) */

/****^  HISTORY COMMENTS:
  1) change(86-08-12,Kissel), approve(86-08-12,MCR7473),
     audit(86-10-20,Fawcett), install(86-11-03,MR12.0-1206):
     Written to support control point management in March 1985 by G. Palter
     based on C. Hornig's task_init_.
  2) change(88-04-25,Farley), approve(88-05-26,MCR7901), audit(88-06-07,GWMay),
     install(88-07-05,MR12.2-1053):
     Changed RNT area expansion code to use stack_header.rnt_ptr directly,
     instead of copying to the automatic rntp variable.  The RNT area can move
     and using the stack_header is the only sure way of referencing the correct
     location.  Also inhibit interrupts during this period.
                                                   END HISTORY COMMENTS */

/* format: style3,linecom */

cpm_initialize_:
     procedure ();

dcl	1 local_ai	aligned like area_info;

dcl	control_point_id_string
			character (12);

dcl	code		fixed binary (35);

dcl	new_rnt_area	area (local_ai.size) based (local_ai.areap);
dcl	old_rnt_area	area (old_area_size) based (old_areap);
dcl	rnt_area		area (stack_header.rnt_ptr -> rnt.rnt_area_size) based (stack_header.rnt_ptr -> rnt.areap);
dcl	new_rntp		pointer;
dcl	old_areap		pointer;
dcl	old_area_size	fixed bin (18);

dcl	old_mask		bit (36) aligned;

dcl	system_area	area based (system_area_ptr);
dcl	system_area_ptr	pointer;

dcl	sys_info$max_seg_size
			fixed binary (19) external;

dcl	cpm_$nulle	entry () options (variable);
dcl	cpm_overseer_$cl_intermediary
			entry (bit (36) aligned);
dcl	(
	cu_$get_cl_intermediary,
	cu_$set_cl_intermediary
	)		entry (entry (bit (36) aligned));
dcl	define_area_	entry (pointer, fixed binary (35));
dcl	get_privileges_	entry () returns (bit (36) aligned);
dcl	get_ring_		entry () returns (fixed binary (3));
dcl	get_system_free_area_
			entry () returns (pointer);
dcl	hcs_$get_ips_mask	entry (bit (36) aligned);
dcl	hcs_$reset_ips_mask entry (bit (36) aligned, bit (36) aligned);
dcl	hcs_$set_ips_mask	entry (bit (36) aligned, bit (36) aligned);
dcl	hcs_$grow_lot	entry (fixed binary (3));
dcl	ioa_$rsnnl	entry () options (variable);
dcl	sub_err_		entry () options (variable);
dcl	user_info_$usage_data
			entry (fixed binary, fixed binary (71), fixed binary (71), fixed binary (71),
			fixed binary (71), fixed binary (71));

dcl	(addr, addwordno, baseno, binary, empty, length, null, stackbaseptr, string, substr, unspec, wordno)
			builtin;

dcl	cleanup		condition;
%page;
/* cpm_initialize_: entry (); */

	sb = stackbaseptr ();
	system_area_ptr = get_system_free_area_ ();


/* Grow the LOT to its maximum size -- Otherwise, when ring 0 grows the LOT, it will only update the LOT and ISOT pointers
   in the header of the stack which happens to be running at the time.  The stacks of the other control points would, as a
   result, contain incorrect LOT and ISOT pointers and the process would not be long for the world */

	if stack_header.cur_lot_size < stack_header.max_lot_size
	then call hcs_$grow_lot (get_ring_ ());


/* Grow the RNT to a full segment for the same reasons as above */

	if stack_header.rnt_ptr -> rnt.rnt_area_size < sys_info$max_seg_size
	then do;

		old_mask = "0"b;
		on cleanup
		     begin;
			if old_mask
			then call hcs_$reset_ips_mask (old_mask, old_mask);
		     end;
		call hcs_$set_ips_mask ("0"b, old_mask);

		local_ai.version = area_info_version_1;
		string (local_ai.control) = ""b;
		local_ai.zero_on_free = "1"b;		/* set control flags expected by ring 0 */
		local_ai.system = "1"b;
		local_ai.owner = "RNT";
		local_ai.size = sys_info$max_seg_size;
		local_ai.areap = null ();		/* let define_area_ find us a segment */

		call define_area_ (addr (local_ai), code);
		if code ^= 0
		then call sub_err_ (code, cpm_data_$subsystem_name, ACTION_CANT_RESTART, null (), 0,
			"Growing the RNT.");

		old_area_size = stack_header.rnt_ptr -> rnt.rnt_area_size;
		new_rnt_area = rnt_area;		/* copy the RNT contents to its new area */

		if old_area_size ^= stack_header.rnt_ptr -> rnt.rnt_area_size
		then do;				/* Ooops, the RNT grew/moved while copying */
			new_rnt_area = empty;
			new_rnt_area = rnt_area;
		     end;

		new_rntp =
		     addwordno (local_ai.areap, relwordno (stack_header.rnt_ptr, stack_header.rnt_ptr -> rnt.areap));
		new_rntp -> rnt.srulep =
		     addwordno (local_ai.areap,
		     relwordno (stack_header.rnt_ptr -> rnt.srulep, stack_header.rnt_ptr -> rnt.areap));
		new_rntp -> rnt.areap = local_ai.areap;
		new_rntp -> rnt.rnt_area_size = local_ai.size;

		old_areap = stack_header.rnt_ptr -> rnt.areap;
		old_area_size = stack_header.rnt_ptr -> rnt.rnt_area_size;

		stack_header.rnt_ptr = new_rntp;	/* switch to the new RNT ... */
		free old_rnt_area in (system_area);	/* ... and get rid of the old one */

		call hcs_$reset_ips_mask (old_mask, old_mask);
		revert cleanup;
	     end;


/* Setup the definition of the root control point -- The root control point is the control point which uses the "normal"
   stack in the current ring */

	cpd_ptr = addr (cpm_data_$root_control_point_data);

	control_point_data.id,			/* generate the standard unique ID */
	     control_point_data.group_id = baseno (sb);

	control_point_data.state = CPM_READY;		/* it must be ready -- we're using it now */

	string (control_point_data.flags) = ""b;
	control_point_data.preferred = "1"b;		/* this control point "owns" the terminal, etc. */

	control_point_data.priority = 1;		/* "standard" priority */

	control_point_data.stack_ptr = sb;		/* the current stack belongs to the root */
	control_point_data.last_frame_ptr = null ();	/* no place for control to resume as we haven't left yet */

CANT_DESTROY_ROOT:
	control_point_data.destroy = CANT_DESTROY_ROOT;	/* a label which prevents destruction */

	control_point_data.parent,			/* this is the only control point */
	     control_point_data.peers, control_point_data.children, control_point_data.ready_queue = null ();

	control_point_data.user_cl_intermediary = cpm_$nulle;

	control_point_data.comment = "Root Control Point";

	call hcs_$get_ips_mask (control_point_data.ips_mask);
	substr (control_point_data.ips_mask, 36) = "1"b;	/* construct a mask suitable for use by hcs_$reset_ips_mask */

	control_point_data.privileges = get_privileges_ ();
	control_point_data.cl_intermediary = cpm_overseer_$cl_intermediary;

	call ioa_$rsnnl ("^12.3b", control_point_id_string, (0), control_point_data.id);
	call find_iocb ("user_i/o", control_point_data.user_io);
	call find_iocb ("user_input", control_point_data.user_input);
	call find_iocb ("user_output", control_point_data.user_output);
	call find_iocb ("error_output", control_point_data.error_output);

	control_point_data.meters = 0;
	control_point_data.meters.n_schedules = 1;	/* it's been scheduled to run once when the process started */

	stack_header.cpm_data_ptr = cpd_ptr;		/* the definition is now complete */


/* Setup global data */

	cpm_data_$n_control_points = 1;		/* there's just one active control point */
	cpm_data_$gc_control_points = "0"b;		/* ...and there's no garbage to be cleaned up */

	cpm_data_$preferred_control_point = cpd_ptr;	/* this is the prefeered control point ... */
	cpm_data_$preferred_control_point_stack.stack_depth = 0;
						/* ... and the stack of prior ones is empty */

	cpm_data_$ready_queue.first,			/* this is the only ready control point */
	     cpm_data_$ready_queue.last = cpd_ptr;

	cpm_data_$previous_control_point = cpd_ptr;	/* claim we ran previously to make cpm_$generate_call happy */

	unspec (cpm_data_$valid_control_points) = ""b;	/* only this control point is valid */
	cpm_data_$valid_control_points.map (binary (baseno (sb), 18, 0)) = "1"b;

	cpm_data_$global_meters = 0;			/* no meters yet but make sure real time computed OK */
	call user_info_$usage_data ((0), (0), (0), cpm_data_$global_meters.last_meters.real_time, (0), (0));


/* Control point management is now enabled */

	stack_header.cpm_enabled = substr (control_point_data.id, 1, length (stack_header.cpm_enabled));
						/* Place the stack number from the upper half of the id  into stack_header.cpm_enabled (non-zero) */

	call cu_$get_cl_intermediary (cpm_data_$saved_cl_intermediary);
	call cu_$set_cl_intermediary (cpm_overseer_$cl_intermediary);
						/* switch to our special CL intermediary */

	return;
%page;
/* Creates an unattached I/O switch which can be used to save one of the control point's standard attachments when it
   stops running */

find_iocb:
     procedure (p_switch_name, p_switch_iocb);

dcl	p_switch_name	character (*) parameter;
dcl	p_switch_iocb	pointer parameter;

dcl	switch_name	character (32) varying;

	switch_name = control_point_id_string;
	switch_name = switch_name || ".";
	switch_name = switch_name || p_switch_name;

	call iox_$find_iocb ((switch_name), p_switch_iocb, code);

	if code ^= 0
	then call sub_err_ (code, cpm_data_$subsystem_name, ACTION_CANT_RESTART, null (), 0, "Creating an IOCB for ^a.",
		switch_name);

	return;

     end find_iocb;



/* Returns the word offset of one pointer relative to another */

relwordno:
     procedure (p_ptr, p_base_ptr) returns (fixed binary (18));

dcl	p_ptr		pointer parameter;
dcl	p_base_ptr	pointer parameter;

	return (wordno (p_ptr) - wordno (p_base_ptr));

     end relwordno;

/* format: off */
%page; %include cpm_data_;
%page; %include cpm_internal_data;
%page; %include cpm_control_point_data;
%include cpm_ctrl_pt_meters;
%include process_usage;
%page; %include stack_header;
%page; %include rnt;
%page; %include area_info;
%page; %include sub_err_flags;
%page; %include iox_dcls;
/* format: on */

     end cpm_initialize_;
