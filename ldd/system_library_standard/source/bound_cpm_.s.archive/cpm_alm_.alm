" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1985 *
" *                                                         *
" ***********************************************************

" ALM utilities used by the Control Point Manager

" HISTORY COMMENTS:
"  1) change(86-08-12,Kissel), approve(86-08-12,MCR7473),
"     audit(86-10-22,Fawcett), install(86-11-03,MR12.0-1206):
"     Written to support control point management in March 1985 by G. Palter
"     based on C. Hornig's task_alm_.
"                                                      END HISTORY COMMENTS

	name	cpm_alm_



" Switch execution to the specified stack -- Control on the new stack is given
"    to the program which owns the last frame of said stack as saved in
"    its control_point_data at the point identified in the frame's return_ptr

" dcl  cpm_alm_$switch_stacks entry (pointer);
" call cpm_alm_$switch_stacks (new_stack_base_ptr);

	segdef	switch_stacks

switch_stacks:
	inhibit	on		"<+><+><+><+><+><+><+><+><+><+><+><+><+><+><+><+><+>

	epbp7	pr6|0			" pr7 <- stackbaseptr ()

	epp2	pr7|stack_header.cpm_data_ptr,*	" pr2 <- addr (current control_point_data)
	spri6	pr2|cpd.last_frame_ptr	" remember where to resume control later

	epp2	pr0|2,*			" pr7 <- new_stack_base_ptr
	epbp7	pr2|0,*			"  ...

	epp2	pr7|stack_header.cpm_data_ptr,*	" pr2 <- addr (new control_point_data)

	epp6	pr2|cpd.last_frame_ptr,*	" pr6 <- addr (last frame in new ctrl pt)

	inhibit	off		"<-><-><-><-><-><-><-><-><-><-><-><-><-><-><-><-><->

	short_return			" and give up control to the new stack

" 

" Invoke cpm_overseer_$overseer -- This entrypoint is the first one invoked in a new control
"    point.  It completes the setup of this stack frame and then calls cpm_overseer_ to
"    complete the setup of the control point's environment and to start the user's initial
"    procedure.  When the user's initial procedure returns to cpm_overseer_$overseer, it
"    returns to this entrypoint which then transfers to cpm_$self_destruct to destroy this
"    control point.

	entry	overseer
	segdef	call_overseer

overseer:
call_overseer:
	getlp				" save our linkage pointer
	spri4	pr6|stack_frame.lp_ptr

	epp2	overseer			" claim that we are cpm_alm_$overseer
	spri2	pr6|stack_frame.entry_ptr

	epp0	pr6|stack_frame.arg_ptr,*	" find cpm_caller_'s argument list

	epbp7	pr6|0			" set the stack base

	short_call cpm_overseer_$overseer	" run the initial procedure

	tra	cpm_$self_destruct		" kill this control point

" 

" Invoke cpm_overseer_$generate_call -- This entrypoint is the first one invoked to execute
"    an entrypoint in this control point as requested by another control point.  This
"    entrypoint completes the setup of this stack frame and then calls
"    cpm_overseer_$generate_call to actually invoke the user's entrypoint.  When the user's
"    entrypoint returns to cpm_overseer_$generate_call, it returns to this entrypoint which
"    then returns to the previous frame on this stack.  That frame usually belongs to
"    cpm_$scheduler which causes the scheduling of control points to continue.

	entry	generate_call
	segdef	call_generate_call

generate_call:
call_generate_call:
	getlp				" save our linkage pointer
	spri4	pr6|stack_frame.lp_ptr

	epp2	generate_call		" claim that we are cpm_alm_$generate_call
	spri2	pr6|stack_frame.entry_ptr

	epp0	pr6|stack_frame.arg_ptr,*	" find cpm_caller_'s argument list

	epbp7	pr6|0			" set the stack base

	short_call cpm_overseer_$generate_call	" invoke the procedure

	return				" return to the scheduler (most likely)

" 
	include	stack_header
" 
	include	stack_frame
" 
	include	cpm_control_point_data

	end
