/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */


/* DESCRIPTION:

Update per relation opening info: $(increment decrement)_openings - Number of
openings for this relation, $lock_advice - Set lock advice, $relation_header -
Update relation header in opening info and relation header, $attribute_info -
Update attribute info as for relation_header.

*/

/* HISTORY:
Written by Matthew Pierret, 02/28/83.
Modified:
05/16/83 by Lindsey L. Spratt:  Changed to set the parameter
            p_relation_opening_info_ptr to null if the call to
            rlm_opening_info$free is successful.
06/22/83 by Lindsey L. Spratt:  Fixed index_attribute_map entry to set the
            relation_opening_info.per_process.index_cursor_array_ptr when the
            index_cursor_array is expanded.
05/29/84 by Matthew Pierret:  Changed to use RELATION_HEADER_VERSION_3.
06/12/84 by Matthew Pierret:  Re-named cm_$put_element to cm_$modify,
            cm_$allocate_element to cm_$put.
10/25/84 by Stanford S. Cox:  $index_attribute_map - Added asgn. of
   index_cursor_array.version.
*/

/* format: style2,ind3 */

rlm_update_opening_info:
   proc ();

      call sub_err_ (dm_error_$programming_error, myname, ACTION_CANT_RESTART, null, 0,
	 "^/^a$^a is not a valid entrypoint", myname, myname);



/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_relation_opening_info_ptr
			       ptr parameter;
      dcl	    p_relation_header_ptr  ptr parameter;
      dcl	    p_attribute_info_ptr   ptr parameter;
      dcl	    p_index_attribute_map_ptr
			       ptr parameter;
      dcl	    (p_this_process_permission, p_other_processes_permission)
			       bit (2) aligned;
      dcl	    p_code	       fixed bin (35) parameter;

/* Automatic */

      dcl	    (current_number_of_openings, index_idx, increment)
			       fixed bin (17);
      dcl	    1 current_lock_advice  aligned like relation_opening_info.per_process.lock_advice;
      dcl	    (old_relation_header_ptr, old_attribute_info_ptr, old_index_attribute_map_ptr, old_index_cursor_array_ptr)
			       ptr init (null);

/* Based */

      dcl	    dm_area	       area (sys_info$max_seg_size) based (static_dm_area_ptr);

/* Builtin */

      dcl	    (currentsize, length, null, unspec)
			       builtin;

/* Condition */

      dcl	    cleanup	       condition;

/* Constant */

      dcl	    (
	    myname	       init ("rlm_update_opening_info") char (32) varying,
	    BITS_PER_WORD	       init (36) fixed bin (17)
	    )		       internal static options (constant);

/* Entry */

      dcl	    rlm_opening_info$free  entry (ptr, fixed bin (35));
      dcl	    get_dm_free_area_      entry () returns (ptr);
      dcl	    sub_err_	       entry () options (variable);

/* External */

      dcl	    dm_error_$programming_error
			       fixed bin (35) ext;
      dcl	    error_table_$unimplemented_version
			       fixed bin (35) ext;
      dcl	    sys_info$max_seg_size  fixed bin (35) ext;

/* Static */

      dcl	    static_dm_area_ptr     ptr internal static init (null);

/* END OF DECLARATIONS */

/* format: ^indblkcom,indcomtxt */

increment_openings:
   entry (p_relation_opening_info_ptr, p_code);

      increment = 1;
      goto OPENINGS_JOIN;

decrement_openings:
   entry (p_relation_opening_info_ptr, p_code);

      increment = -1;

OPENINGS_JOIN:
      relation_opening_info_ptr = p_relation_opening_info_ptr;

      call CHECK_VERSION ("relation_opening_info", relation_opening_info.version, RELATION_OPENING_INFO_VERSION_2);

      p_code = 0;
      current_number_of_openings = relation_opening_info.per_process.number_of_openings;
      on cleanup relation_opening_info.per_process.number_of_openings = current_number_of_openings;

      relation_opening_info.per_process.number_of_openings =
	 relation_opening_info.per_process.number_of_openings + increment;

      if increment = -1 & relation_opening_info.per_process.number_of_openings <= 0
      then
         do;
	  call rlm_opening_info$free (relation_opening_info_ptr, p_code);
	  if p_code ^= 0
	  then return;
	  p_relation_opening_info_ptr = null;
         end;

      return;
%page;
lock_advice:
   entry (p_relation_opening_info_ptr, p_this_process_permission, p_other_processes_permission, p_code);

      relation_opening_info_ptr = p_relation_opening_info_ptr;

      call CHECK_VERSION ("relation_opening_info", relation_opening_info.version, RELATION_OPENING_INFO_VERSION_2);

      p_code = 0;
      current_lock_advice = relation_opening_info.per_process.lock_advice;
      on cleanup relation_opening_info.per_process.lock_advice = current_lock_advice;

      relation_opening_info.per_process.lock_advice.this_process = p_this_process_permission;
      relation_opening_info.per_process.lock_advice.other_processes = p_other_processes_permission;

      return;
%page;
relation_header:
   entry (p_relation_opening_info_ptr, p_relation_header_ptr, p_code);

      relation_opening_info_ptr = p_relation_opening_info_ptr;
      call CHECK_VERSION ("relation_opening_info", relation_opening_info.version, RELATION_OPENING_INFO_VERSION_2);

      relation_header_ptr = p_relation_header_ptr;
      call CHECK_VERSION ("relation_header", relation_header.version, RELATION_HEADER_VERSION_3);

      relation_header.header_info_update_count = relation_header.header_info_update_count + 1;

      call collection_manager_$modify (relation_opening_info.per_process.file_opening_id, HEADER_COLLECTION_ID,
	 relation_header_ptr, length (unspec (relation_header)), CALLER_HEADER_ELEMENT_ID, (0), p_code);
      if p_code ^= 0
      then return;

      if relation_opening_info.relation_header_ptr ^= relation_header_ptr
      then
         do;
	  old_relation_header_ptr = relation_opening_info.relation_header_ptr;
	  relation_opening_info.relation_header_ptr = relation_header_ptr;
	  if old_relation_header_ptr ^= null
	  then
	     do;
	        if static_dm_area_ptr = null
	        then static_dm_area_ptr = get_dm_free_area_ ();
	        free old_relation_header_ptr -> relation_header in (dm_area);
	     end;
         end;

      return;
%page;
attribute_info:
   entry (p_relation_opening_info_ptr, p_attribute_info_ptr, p_code);

      relation_opening_info_ptr = p_relation_opening_info_ptr;
      call CHECK_VERSION ("relation_opening_info", relation_opening_info.version, RELATION_OPENING_INFO_VERSION_2);

      relation_header_ptr = relation_opening_info.relation_header_ptr;
      call CHECK_VERSION ("relation_header", relation_header.version, RELATION_HEADER_VERSION_3);

      attribute_info_ptr = p_attribute_info_ptr;
      call CHECK_VERSION ("attribute_info", attribute_info.version, ATTRIBUTE_INFO_VERSION_1);

      if relation_header.attribute_info_element_id = "0"b
      then call collection_manager_$put (relation_opening_info.per_process.file_opening_id, HEADER_COLLECTION_ID,
	      attribute_info_ptr, currentsize (attribute_info) * BITS_PER_WORD,
	      relation_header.attribute_info_element_id, (0), p_code);
      else call collection_manager_$modify (relation_opening_info.per_process.file_opening_id, HEADER_COLLECTION_ID,
	      attribute_info_ptr, currentsize (attribute_info) * BITS_PER_WORD,
	      relation_header.attribute_info_element_id, (0), p_code);

      if p_code ^= 0
      then return;

      relation_header.header_info_update_count = relation_header.header_info_update_count + 1;

      call collection_manager_$modify (relation_opening_info.per_process.file_opening_id, HEADER_COLLECTION_ID,
	 relation_header_ptr, currentsize (relation_header) * BITS_PER_WORD, CALLER_HEADER_ELEMENT_ID, (0), p_code);
      if p_code ^= 0
      then return;

      if relation_opening_info.attribute_info_ptr ^= attribute_info_ptr
      then
         do;
	  old_attribute_info_ptr = relation_opening_info.attribute_info_ptr;
	  relation_opening_info.attribute_info_ptr = attribute_info_ptr;
	  if old_attribute_info_ptr ^= null
	  then
	     do;
	        if static_dm_area_ptr = null
	        then static_dm_area_ptr = get_dm_free_area_ ();
	        free old_attribute_info_ptr -> attribute_info in (dm_area);
	     end;
         end;

      return;
%page;
index_attribute_map:
   entry (p_relation_opening_info_ptr, p_index_attribute_map_ptr, p_code);

      relation_opening_info_ptr = p_relation_opening_info_ptr;
      call CHECK_VERSION ("relation_opening_info", relation_opening_info.version, RELATION_OPENING_INFO_VERSION_2);

      relation_header_ptr = relation_opening_info.relation_header_ptr;
      call CHECK_VERSION ("relation_header", relation_header.version, RELATION_HEADER_VERSION_3);

      index_attribute_map_ptr = p_index_attribute_map_ptr;
      call CHECK_VERSION ("index_attribute_map", index_attribute_map.version, INDEX_ATTRIBUTE_MAP_VERSION_2);

      if relation_header.index_attribute_map_element_id = "0"b
      then call collection_manager_$put (relation_opening_info.per_process.file_opening_id, HEADER_COLLECTION_ID,
	      index_attribute_map_ptr, currentsize (index_attribute_map) * BITS_PER_WORD,
	      relation_header.index_attribute_map_element_id, (0), p_code);
      else call collection_manager_$modify (relation_opening_info.per_process.file_opening_id, HEADER_COLLECTION_ID,
	      index_attribute_map_ptr, currentsize (index_attribute_map) * BITS_PER_WORD,
	      relation_header.index_attribute_map_element_id, (0), p_code);

      if p_code ^= 0
      then return;

      relation_header.header_info_update_count = relation_header.header_info_update_count + 1;

      call collection_manager_$modify (relation_opening_info.per_process.file_opening_id, HEADER_COLLECTION_ID,
	 relation_header_ptr, currentsize (relation_header) * BITS_PER_WORD, CALLER_HEADER_ELEMENT_ID, (0), p_code);
      if p_code ^= 0
      then return;

      if static_dm_area_ptr = null
      then static_dm_area_ptr = get_dm_free_area_ ();

      if relation_opening_info.per_process.index_cursor_array_ptr = null
      then
         do;

         /*** No index_cursor_array exists, so set one up with a null cursor_ptr for each index. */

	  ica_number_of_indices = hbound (index_attribute_map.index, 1);
	  alloc index_cursor_array in (dm_area);
	  index_cursor_array.version = INDEX_CURSOR_ARRAY_VERSION_1;
	  index_cursor_array.cursor_ptr (*) = null;
	  relation_opening_info.per_process.index_cursor_array_ptr = index_cursor_array_ptr;
         end;
      else
         do;
	  index_cursor_array_ptr = relation_opening_info.per_process.index_cursor_array_ptr;
	  call CHECK_VERSION ("index_cursor_array", index_cursor_array.version, INDEX_CURSOR_ARRAY_VERSION_1);
         end;

      if hbound (index_cursor_array.cursor_ptr, 1) >= hbound (index_attribute_map.index, 1)
      then
REMOVE_CURSORS_FOR_DELETED_INDICES:
         do;

         /*** Indices for which cursors are stored in index_cursor_array may have been
	    deleted. Destroy the cursors for any such index. */

	  do index_idx = 1 to hbound (index_attribute_map.index, 1);
	     if index_cursor_array.cursor_ptr (index_idx) ^= null
	     then if index_attribute_map.index (index_idx).number_of_attributes <= 0
		then
		   do;				/* call index_manager_$destroy_cursor (index_cursor_array.cursor_ptr(index_idx), (0)); */
		      index_cursor_array.cursor_ptr (index_idx) = null;
		   end;
	  end;
         end REMOVE_CURSORS_FOR_DELETED_INDICES;
      else
EXTEND_INDEX_CURSOR_ARRAY:
         do;

         /*** The index_attribute_map has been extended to contain more indices than
	    index_cursor_array components, so index_cursor_array must likewise be
	    extended. Allocate a new one, and copy over the old cursor_ptr values.
	    If a non-null cursor_ptr exists for an index which no longer exists,
	    destroy the cursor. */

	  old_index_cursor_array_ptr = index_cursor_array_ptr;
	  ica_number_of_indices = hbound (index_attribute_map.index, 1);

	  alloc index_cursor_array in (dm_area);
	  index_cursor_array.version = INDEX_CURSOR_ARRAY_VERSION_1;
	  relation_opening_info.per_process.index_cursor_array_ptr = index_cursor_array_ptr;

	  index_cursor_array.cursor_ptr (*) = null;

	  do index_idx = 1 to hbound (old_index_cursor_array_ptr -> index_cursor_array.cursor_ptr, 1);
	     if old_index_cursor_array_ptr -> index_cursor_array.cursor_ptr (index_idx) ^= null
	     then if index_attribute_map.index (index_idx).number_of_attributes > 0
		then index_cursor_array.cursor_ptr (index_idx) =
			old_index_cursor_array_ptr -> index_cursor_array.cursor_ptr (index_idx);
	  /***	          else call index_manager_$destroy_cursor (old_index_cursor_array_ptr->index_cursor_array.cursor_ptr(index_idx), (0)); */
	  end;
	  free old_index_cursor_array_ptr -> index_cursor_array in (dm_area);

         end EXTEND_INDEX_CURSOR_ARRAY;



      if relation_opening_info.index_attribute_map_ptr ^= index_attribute_map_ptr
      then
         do;
	  old_index_attribute_map_ptr = relation_opening_info.index_attribute_map_ptr;
	  relation_opening_info.index_attribute_map_ptr = index_attribute_map_ptr;
	  if old_index_attribute_map_ptr ^= null
	  then free old_index_attribute_map_ptr -> index_attribute_map in (dm_area);
         end;

      return;
%page;
CHECK_VERSION:
   proc (cv_p_structure_name, cv_p_received_version, cv_p_expected_version);

      dcl	    cv_p_received_version  char (8) aligned;
      dcl	    cv_p_expected_version  char (8) aligned;
      dcl	    cv_p_structure_name    char (*);

      if cv_p_received_version ^= cv_p_expected_version
      then call sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
	      "^/Expected version ^8a of the ^a structure.
Received version ^8a instead.", cv_p_expected_version, cv_p_structure_name, cv_p_received_version);
   end CHECK_VERSION;
%page;
%include dm_rlm_opening_info;
%page;
%include dm_rlm_header;
%page;
%include dm_rlm_attribute_info;
%page;
%include dm_rlm_index_attr_map;
%page;
%include dm_rlm_idx_cursor_array;
%page;
%include dm_cm_hdr_col_ids;

%include dm_hdr_collection_id;
%page;
%include sub_err_flags;
%page;
%include dm_collmgr_entry_dcls;

   end rlm_update_opening_info;
