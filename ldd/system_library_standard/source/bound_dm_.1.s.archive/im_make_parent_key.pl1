/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(86-12-17,Dupuis), approve(87-04-01,MCR7632), audit(87-01-13,Blair),
     install(87-04-02,MR12.1-1020):
     Fixed a bug (phx20420) where the parent key was being built incorrectly if
     it was a char varying or bit varying field.
                                                   END HISTORY COMMENTS */


/* format: style2,ind3 */
im_make_parent_key:
   proc (p_field_table_ptr, p_low_key_string_ptr, p_last_field_in_low_key, p_high_key_string_ptr,
      p_last_field_in_high_key, p_parent_key_buffer_ptr, p_parent_key_buffer_length, p_work_area_ptr, p_branch_key_ptr,
      p_branch_key_string_length, p_new_buffer_was_allocated, p_code);

/* DESCRIPTION:

          This module takes two input key strings and produces a "parent" key
     string which will compare greater than the "low" key and less than or
     equal to the "high" key.  The "parent" key which is produced may not have
     as many fields as the either or both of the "low" and "high" keys.
     Similarly the "low" and "high" keys need not have all of the fields
     defined in the field_table.  The subset of fields present in any of these
     keys, however, must be a continuous set  from the first field (i.e., if
     field N is absent, then all fields with identifiers greater than N must
     be absent as well).
*/

/* HISTORY:

Written by Lindsey Spratt, 04/22/82.
Modified:
01/06/83 by Lindsey Spratt:  Fixed to correctly initialize the 
	  (low high)_varying_data_idx when the input keys are full length and
	  a varying field is present.
03/23/83 by Lindsey Spratt:  Changed to use version 2 of field_table.  Also,
	  converted to use data_mgmt_util_$compare_field_to_field instead of
	  im_compare_values$field_to_field.
05/04/84 by Matthew Pierret:  Changed to use FIELD_TABLE_VERSION_3.  Changed
            references to data_mgmt_util_ to data_format_util_.
*/

/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_field_table_ptr      ptr;
      dcl	    p_low_key_string_ptr   ptr;
      dcl	    p_last_field_in_low_key
			       fixed bin (17) unal;
      dcl	    p_high_key_string_ptr  ptr;
      dcl	    p_last_field_in_high_key
			       fixed bin (17) unal;
      dcl	    p_parent_key_buffer_ptr
			       ptr;
      dcl	    p_parent_key_buffer_length
			       fixed bin (35);
      dcl	    p_work_area_ptr	       ptr;
      dcl	    p_branch_key_ptr       ptr;
      dcl	    p_branch_key_string_length
			       fixed bin (35);
      dcl	    p_new_buffer_was_allocated
			       bit (1) aligned;
      dcl	    p_code	       fixed bin (35);

/* Automatic */

      dcl	    last_field_is_truncated
			       bit (1) aligned init ("0"b);
      dcl	    bit_idx	       fixed bin (35) init (0);
      dcl	    number_of_bits_needed_to_adjust_for_byte_alignment
			       fixed bin init (0);
      dcl	    char_idx	       fixed bin (35) init (0);

      dcl	    maximum_field_idx      fixed bin (17) init (0);
      dcl	    low_varying_data_idx   fixed bin (17) init (0);
      dcl	    high_varying_data_idx  fixed bin (17) init (0);
      dcl	    low_equal_to_high      bit (1) aligned init ("0"b);
      dcl	    low_less_than_high     bit (1) aligned init ("0"b);
      dcl	    field_idx	       fixed bin (17) init (0);
      dcl	    low_value_length       fixed bin (35) init (0);
      dcl	    high_value_length      fixed bin (35) init (0);
      dcl	    low_value_ptr	       ptr init (null);
      dcl	    high_value_ptr	       ptr init (null);
      dcl	    myname	       init ("im_make_parent_key") char (32) varying;
      dcl	    branch_key_varying_data_idx
			       fixed bin (35) init (0);

/* Based */

      dcl	    low_key_string	       bit (sys_info$max_seg_size * BITS_PER_WORD) based (p_low_key_string_ptr);
      dcl	    high_key_string	       bit (sys_info$max_seg_size * BITS_PER_WORD) based (p_high_key_string_ptr);
      dcl	    low_key_bit_array      (sys_info$max_seg_size * BITS_PER_WORD) bit (1) based (p_low_key_string_ptr);
      dcl	    high_key_bit_array     (sys_info$max_seg_size * BITS_PER_WORD) bit (1) based (p_high_key_string_ptr);
      dcl	    based_char_string      char (sys_info$max_seg_size * BYTES_PER_WORD) based;

/* Builtin */

      dcl	    (addr, bin, copy, divide, hbound, length, min, mod, null, substr, unspec)
			       builtin;

/* Controlled */
/* Constant */

      dcl	    ALL_FIELDS_PRESENT     init (-1) fixed bin (17) internal static options (constant);

      dcl	    (
	    BITS_PER_WORD	       init (36),
	    BYTES_PER_WORD	       init (4),
	    BITS_PER_BYTE	       init (9)
	    )		       fixed bin (17) internal static options (constant);

/* Entry */

      dcl	    data_format_util_$compare_field_to_field
			       entry (ptr, ptr, fixed bin (35), ptr, fixed bin (35), bit (1) aligned,
			       bit (1) aligned, fixed bin (35));
      dcl	    sub_err_	       entry options (variable);

/* External */

      dcl	    sys_info$max_seg_size  fixed bin (35) ext static;
      dcl	    (
	    error_table_$unimplemented_version,
	    dm_error_$programming_error,
	    dm_error_$key_duplication,
	    dm_error_$keys_out_of_order
	    )		       fixed bin (35) ext static;

/* END OF DECLARATIONS */

      p_code = 0;

      field_table_ptr = p_field_table_ptr;
      if field_table.version ^= FIELD_TABLE_VERSION_3
      then call
	    sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
	    "^/Expected version ^a of the field_table structure.  Received version ^a.", FIELD_TABLE_VERSION_3,
	    field_table.version);

      p_new_buffer_was_allocated = "0"b;
      p_branch_key_ptr = null;
      p_branch_key_string_length = 0;
      branch_key_ptr = p_parent_key_buffer_ptr;
      bk_string_length = 0;
      bk_string_length = p_parent_key_buffer_length - length (unspec (branch_key));

      if p_last_field_in_low_key = ALL_FIELDS_PRESENT | p_last_field_in_high_key = ALL_FIELDS_PRESENT
      then maximum_field_idx = hbound (field_table.field, 1);
      else maximum_field_idx = min (p_last_field_in_low_key, p_last_field_in_high_key);
      if p_last_field_in_low_key = ALL_FIELDS_PRESENT
      then low_varying_data_idx = field_table.location_of_first_varying_field;
      else low_varying_data_idx =
	    field_table.field (p_last_field_in_low_key).location
	    + field_table.field (p_last_field_in_low_key).length_in_bits;
      if p_last_field_in_high_key = ALL_FIELDS_PRESENT
      then high_varying_data_idx = field_table.location_of_first_varying_field;
      else high_varying_data_idx =
	    field_table.field (p_last_field_in_high_key).location
	    + field_table.field (p_last_field_in_high_key).length_in_bits;

      low_equal_to_high = "1"b;
COMPARISON_LOOP:
      do field_idx = 1 to maximum_field_idx while (low_equal_to_high & p_code = 0);
         if field_table.varying_field_map (field_idx).varying_field_index > 0
         then
	  do;
	     unspec (low_value_length) =
	        copy ("0"b, BITS_PER_WORD - field_table.field (field_idx).length_in_bits)
	        ||
	        substr (low_key_string, field_table.field (field_idx).location,
	        field_table.field (field_idx).length_in_bits);
	     unspec (high_value_length) =
	        copy ("0"b, BITS_PER_WORD - field_table.field (field_idx).length_in_bits)
	        ||
	        substr (high_key_string, field_table.field (field_idx).location,
	        field_table.field (field_idx).length_in_bits);
	     low_value_ptr = addr (low_key_bit_array (low_varying_data_idx));
	     high_value_ptr = addr (high_key_bit_array (high_varying_data_idx));
	     if field_table.field (field_idx).length_is_in_characters
	     then
	        do;
		 low_varying_data_idx = low_varying_data_idx + low_value_length * BITS_PER_BYTE;
		 high_varying_data_idx = high_varying_data_idx + high_value_length * BITS_PER_BYTE;
	        end;
	     else
	        do;
		 low_varying_data_idx = low_varying_data_idx + low_value_length;
		 high_varying_data_idx = high_varying_data_idx + high_value_length;
	        end;
	  end;
         else
	  do;
	     low_value_length, high_value_length = -1;
	     low_value_ptr = addr (low_key_bit_array (field_table.field (field_idx).location));
	     high_value_ptr = addr (high_key_bit_array (field_table.field (field_idx).location));

	  end;

         call
	  data_format_util_$compare_field_to_field (addr (field_table.field (field_idx).descriptor), low_value_ptr,
	  low_value_length, high_value_ptr, high_value_length, low_equal_to_high, low_less_than_high, p_code);

      end COMPARISON_LOOP;

      if low_equal_to_high
      then
         do;
	  p_code = dm_error_$key_duplication;
	  return;
         end;

      if ^low_less_than_high
      then call sub_err_ (dm_error_$keys_out_of_order, myname, "h", null, 0);

      branch_key.last_field_idx = field_idx - 1;		/* The loop increments the field idx one too many times. */

/* Copy the fields which compared "equal" and the first field which compared
"inequal" into the new parent key. */

      arg_descriptor_ptr = addr (field_table.field (branch_key.last_field_idx).descriptor);
      last_field_is_truncated = "0"b;
      if field_table.varying_field_map (branch_key.last_field_idx).varying_field_index = 0
      then if arg_descriptor.type = bit_dtype
	 then
	    do;
	       if arg_descriptor.size > BITS_PER_WORD + BITS_PER_BYTE
	       then
		do;
		   do bit_idx = 1 to field_table.field (branch_key.last_field_idx).length_in_bits
		      while (
		      substr (high_key_string, field_table.field (branch_key.last_field_idx).location + bit_idx - 1,
		      1)
		      =
		      substr (low_key_string, field_table.field (branch_key.last_field_idx).location + bit_idx - 1, 1)
		      );
		   end;
		   if bit_idx > field_table.field (branch_key.last_field_idx).length_in_bits
		   then call
			 sub_err_ (dm_error_$programming_error, myname, "s", null, 0,
			 "^/Two bit values compared equal which im_compare_values claims are not equal.");


		   substr (branch_key.string, field_table.field (branch_key.last_field_idx).location + BITS_PER_WORD,
		      bit_idx) =
		      substr (high_key_string, field_table.field (branch_key.last_field_idx).location, bit_idx);

		   number_of_bits_needed_to_adjust_for_byte_alignment =
		      mod (bit_idx + field_table.field (branch_key.last_field_idx).location + BITS_PER_BYTE - 1,
		      BITS_PER_BYTE);
		   substr (branch_key.string,
		      field_table.field (branch_key.last_field_idx).location + bit_idx + BITS_PER_WORD,
		      number_of_bits_needed_to_adjust_for_byte_alignment) = "0"b;
		   bit_idx = bit_idx + number_of_bits_needed_to_adjust_for_byte_alignment;
		   substr (branch_key.string, field_table.field (branch_key.last_field_idx).location, BITS_PER_WORD) =
		      unspec (bit_idx);
		   branch_key_varying_data_idx =
		      field_table.field (branch_key.last_field_idx).location + BITS_PER_WORD + bit_idx;
		   last_field_is_truncated = "1"b;
		end;
	    end;
	 else if arg_descriptor.type = char_dtype
	 then
	    do;
	       if arg_descriptor.size > BYTES_PER_WORD + 1
	       then
		do;

		   do char_idx = 1
		      to divide (field_table.field (branch_key.last_field_idx).length_in_bits, BITS_PER_BYTE, 35, 0)
		      while (
		      substr (addr (high_key_bit_array (field_table.field (branch_key.last_field_idx).location))
		      -> based_char_string, char_idx, 1)
		      =
		      substr (addr (low_key_bit_array (field_table.field (branch_key.last_field_idx).location))
		      -> based_char_string, char_idx, 1));
		   end;
		   bit_idx = char_idx * BITS_PER_BYTE;
		   if bit_idx > field_table.field (branch_key.last_field_idx).length_in_bits
		   then call
			 sub_err_ (dm_error_$programming_error, myname, "s", null, 0,
			 "^/Two character values compared equal which im_compare_values claims are not 
equal.");

		   substr (branch_key.string, field_table.field (branch_key.last_field_idx).location + BITS_PER_WORD,
		      bit_idx) =
		      substr (high_key_string, field_table.field (branch_key.last_field_idx).location, bit_idx);
		   substr (branch_key.string, field_table.field (branch_key.last_field_idx).location, BITS_PER_WORD) =
		      unspec (char_idx);
		   branch_key_varying_data_idx =
		      field_table.field (branch_key.last_field_idx).location + BITS_PER_WORD + bit_idx;
		   last_field_is_truncated = "1"b;
		end;
	    end;

      low_varying_data_idx = field_table.location_of_first_varying_field;
      high_varying_data_idx = field_table.location_of_first_varying_field;
      if ^last_field_is_truncated
      then branch_key_varying_data_idx = field_table.location_of_first_varying_field;

COPY_LOOP:
      do field_idx = 1 to branch_key.last_field_idx - bin (last_field_is_truncated);
         if field_table.varying_field_map (field_idx).varying_field_index = 0
         then substr (branch_key.string, field_table.field (field_idx).location,
	       field_table.field (field_idx).length_in_bits) =
	       substr (high_key_string, field_table.field (field_idx).location,
	       field_table.field (field_idx).length_in_bits);
         else
	  do;
	     unspec (low_value_length) =
	        copy ("0"b, BITS_PER_WORD - field_table.field (field_idx).length_in_bits)
	        ||
	        substr (low_key_string, field_table.field (field_idx).location,
	        field_table.field (field_idx).length_in_bits);
	     unspec (high_value_length) =
	        copy ("0"b, BITS_PER_WORD - field_table.field (field_idx).length_in_bits)
	        ||
	        substr (high_key_string, field_table.field (field_idx).location,
	        field_table.field (field_idx).length_in_bits);

	     if field_table.field (field_idx).length_is_in_characters
	     then do;
		low_value_length = low_value_length * BITS_PER_BYTE;
		high_value_length = high_value_length * BITS_PER_BYTE;
	     end;
	     if field_idx = branch_key.last_field_idx
	     then if addr (field_table.field (field_idx).descriptor) -> arg_descriptor.type = varying_char_dtype
		then
		   do;
		      do char_idx = 1
		         to divide (min (high_value_length, low_value_length), BITS_PER_BYTE, 35, 0)
		         while (
		         substr (addr (high_key_bit_array (high_varying_data_idx)) -> based_char_string, char_idx, 1)
		         = substr (addr (low_key_bit_array (low_varying_data_idx)) -> based_char_string, char_idx, 1))
		         ;
		      end;
		      high_value_length = char_idx * BITS_PER_BYTE;
		   end;
		else
		   do;
		      do bit_idx = 1 to min (high_value_length, low_value_length)
		         while (substr (high_key_string, high_varying_data_idx + bit_idx - 1, 1)
		         = substr (low_key_string, low_varying_data_idx + bit_idx - 1, 1));
		      end;
		      high_value_length =
		         bit_idx + (BITS_PER_BYTE - 1) - mod (bit_idx + (BITS_PER_BYTE - 1), BITS_PER_BYTE);
						/* This adjusts the bit idx to fall on a byte boundary. */
		   end;

	     substr (branch_key.string, branch_key_varying_data_idx, high_value_length) =
	        substr (high_key_string, high_varying_data_idx, high_value_length);
	     if ^field_table.field (field_idx).length_is_in_characters
	     then substr (branch_key.string, field_table.field (field_idx).location,
	        field_table.field (field_idx).length_in_bits) =
	        "0"b
	        ||
	        substr (unspec (high_value_length), BITS_PER_WORD + 2 - field_table.field (field_idx).length_in_bits,
	        field_table.field (field_idx).length_in_bits - 1);
	     else substr (branch_key.string, field_table.field (field_idx).location,
	        field_table.field (field_idx).length_in_bits) =
	        substr (bit (divide (high_value_length, BITS_PER_BYTE, 35), 35),
	        BITS_PER_WORD - field_table.field (field_idx).length_in_bits,
	        field_table.field (field_idx).length_in_bits);
	     high_varying_data_idx = high_varying_data_idx + high_value_length;
	     branch_key_varying_data_idx = branch_key_varying_data_idx + high_value_length;
	  end;


      end COPY_LOOP;

      p_branch_key_ptr = branch_key_ptr;
      p_branch_key_string_length = branch_key_varying_data_idx - 1;

      return;
%page;
%include dm_field_table;
%page;
%include dm_im_key;
%page;
%include arg_descriptor;
%page;
%include std_descriptor_types;
%page;
%include sub_err_flags;
   end im_make_parent_key;
