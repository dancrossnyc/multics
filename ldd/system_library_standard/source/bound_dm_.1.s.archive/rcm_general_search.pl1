/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */


/* DESCRIPTION:

          This routine implements the several record_manager_ operations
     which require searching a record collection. The operations (and the
     entry into this routine which implements the operation) are:
     get_records_by_spec ($get), get_record_ids_by_spec ($get_id),
     get_records_and_ids_by_spec ($get_records_and_ids), 
     delete_records_by_spec ($delete), get_record_count ($count),
     and modify_records_by_spec ($modify).
          Each entry takes as input a search_specification and a
     record_cursor. Records are returned in typed_vector_arrays;
     record ids are returned in element_id_lists.

     The actual work processing of the records, such as deleting a record,
     is done in one of two subroutines depending if the operation is an update
     operation or a retrieval.  This routine, rcm_general_search, sets up the 
     environment in which the utility subroutines run, thereby making those
     subroutines relatively simple.
     
     All entries in this procedure share the following of parameters:
     
     p_record_cursor_ptr: points to a record_cursor.  The record_cursor holds
		      the file_opening_id, the collection_id, and the
		      record_id of the current record.  The record_id may
		      be "0"b for no-current-record.  If non-zero and the 
		      search is relative to that record, that record is 
		      retrieved for verification.
     p_specification_ptr: points to a numeric_specification or to a
		      search_specification.  The spec determines how the 
		      search is to be conducted and applies constraints on
		      records selected.  The spec is used to set up the 
		      search environment as from it are determined whether
		      numeric poistioning or search on constraints is to be
		      done, whether any record value satisfies the 
		      constraints, whether the search is relative to the
		      current record (in the record_cursor) or absolute
		      (actually, relative to the beginning or end of the 
		      record collection), the maximum number of records to
		      return (if specified), and the number of records
		      away from the current (or beginning or end) record
		      the first record to process is.  This last item can
		      be the number specified in a numeric_specification
		      or, if for a search_specification, +1 or -1, with the
		      sign indicating whether to process records backwards
		      or forwards.  It is important to note that the 
		      current record is not the first record processed.
		      The first record processed is always some number of 
		      records away from the current record.
*/

/* HISTORY:

Written by Matthew Pierret, 08/19/82.
   (Largely copied from im_general_search, written by Lindsey Spratt, 06/16/82.
Modified:
10/12/82 by Lindsey Spratt:  Changed to use version 2 of the 
	  search_specification.
11/09/82 by Lindsey Spratt:  Changed to use version 3 of the specification
	  structures.
11/22/82 by Lindsey Spratt:  Changed to use the correct calling sequence  for
	  data_mgmt_util_$cv_table_to_typed_array.
12/14/82 by Matthew Pierret: Added $count, $get_id, $modify, $position.
            Changed calling sequence to rm_process_records$get and $delete to
            include is_numeric_specification and is_relative_specification 
            flags.
12/22/82 by Matthew Pierret: Removed initial_record_id from rm_process_records
            entries.  Changed to handle case of null p_specification_ptr.
02/28/83 by Lindsey Spratt:  Changed to return a 0 error code when asked to
	  count an empty collection.
03/16/83 by Matthew Pierret: Changed to use record_collection_opening_info.
            Removed cleanup handler and FINISH. Added check of record_cursor
            type prior to version check.
04/22/83 by Matthew Pierret:  Added the $get_records_and_ids entry.
04/27/83 by Matthew Pierret:  Changed to allocate a typed_vector_array before
            calling rm_process_records $get_records_and_ids.
05/23/83 by Matthew Pierret:  Changed to use version 4 of specification_head.
06/14/83 by Lindsey L. Spratt:  Moved conversion of field table to
            typed_vector_array into rm_process_records.  Added cleanup
            handler, FINISH and ERROR_RETURN procedures.
07/28/83 by Matthew Pierret: Changed name from rm_general_search to
            rcm_general_search, and all rm_ prefixes to rcm_.
04/12/84 by Lee Baldwin: Added the entry for $position.  Removed the
            p_typed_vector_array_type parameter since it never got used.
12/04/84 by Matthew Pierret: Changed to use dm_vector_util_ instead of
            vector_util_, and rcm_get_by_spec and rcm_update_by_spec instead
            of rcm_process_records. Fixed for audit.
12/13/84 by R. Michael Tague: Made get the main procedure, removed some
            CHECK_VERISON pass by values.
02/12/85 by Lindsey L. Spratt:  Changed to test the code after each call in
            the main "case" statement, rather than in the end of the case.
            Changed the GET, GET_ID, and GET_RECORDS_AND_IDS to check for
            et_$area_too_small.
 */

/* format: style2,ind3 */

get:
   proc (p_specification_ptr, p_id_list_ptr, p_work_area_ptr, p_record_cursor_ptr, p_typed_vector_array_ptr, p_code);

/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_specification_ptr    ptr parameter;
      dcl	    p_id_list_ptr	       ptr parameter;
      dcl	    p_work_area_ptr	       ptr parameter;
      dcl	    p_record_cursor_ptr    ptr parameter;
      dcl	    p_element_id_list_ptr  ptr parameter;
      dcl	    p_typed_vector_array_ptr
			       ptr parameter;
      dcl	    p_general_typed_vector_ptr
			       ptr parameter;
      dcl	    p_number_of_records_processed
			       fixed bin (35) parameter;
      dcl	    p_code	       fixed bin (35) parameter;

/* Automatic */

      dcl	    entry		       fixed bin;
      dcl	    spec_is_relative       bit (1) aligned;
      dcl	    spec_is_numeric	       bit (1) aligned;
      dcl	    spec_is_always_satisfied
			       bit (1) aligned;
      dcl	    search_in_reverse_order
			       bit (1) aligned;

      dcl	    first_record_id	       bit (36) aligned;
      dcl	    low_record_id_bound    bit (36) aligned;
      dcl	    high_record_id_bound   bit (36) aligned;

      dcl	    code		       fixed bin (35);
      dcl	    maximum_number_of_records
			       fixed bin (35);
      dcl	    direction_of_search    fixed bin (17);
      dcl	    position_from_initial  fixed bin (17);
      dcl	    (typed_vector_array_ptr, field_table_ptr)
			       ptr init (null);

/* Based */
/* Builtin */

      dcl	    null		       builtin;

/* Condition */

      dcl	    cleanup	       condition;

/* Constant */

      dcl	    myname	       char (32) varying init ("rcm_general_search") internal static options (constant);
      dcl	    DEFAULT_RECORD_ID_BOUND
			       init ("0"b) bit (36) aligned internal static options (constant);
      dcl	    DEFAULT_MAXIMUM_NUMBER_OF_RECORDS
			       init (3435974000) fixed bin (35) internal static options (constant);
      dcl	    NO_POSITIONING	       init (0) fixed bin (17) internal static options (constant);
      dcl	    SPECIFIED_ID_IS_NOT_DEFAULT_ID
			       init ("0"b) bit (1) aligned internal static options (constant);
      dcl	    (
	    GET_ENTRY	       init (1),
	    GET_ID_ENTRY	       init (2),
	    GET_RECORDS_AND_IDS_ENTRY
			       init (3),
	    COUNT_ENTRY	       init (4),
	    POSITION_ENTRY	       init (5),
	    DELETE_ENTRY	       init (6),
	    MODIFY_ENTRY	       init (7)
	    )		       fixed bin internal static options (constant);

/* Entry */

      dcl	    rcm_get_opening_info   entry (bit (36) aligned, bit (36) aligned, ptr, fixed bin (35));
      dcl	    rcm_get_by_spec$count  entry (ptr, ptr, ptr, bit (36) aligned, bit (36) aligned, bit (1) aligned, fixed bin,
			       fixed bin (35), fixed bin (35), fixed bin (35));
      dcl	    rcm_get_by_spec$get    entry (ptr, ptr, ptr, bit (36) aligned, bit (36) aligned, bit (1) aligned, fixed bin,
			       fixed bin (35), ptr, ptr, ptr, fixed bin (35));
      dcl	    rcm_get_by_spec$get_records_and_ids
			       entry (ptr, ptr, ptr, bit (36) aligned, bit (36) aligned, bit (1) aligned, fixed bin,
			       fixed bin (35), ptr, ptr, ptr, ptr, fixed bin (35));
      dcl	    rcm_get_by_spec$get_id entry (ptr, ptr, ptr, bit (36) aligned, bit (36) aligned, bit (1) aligned, fixed bin,
			       fixed bin (35), ptr, ptr, fixed bin (35));
      dcl	    rcm_get_by_spec$position
			       entry (ptr, ptr, ptr, bit (36) aligned, bit (36) aligned, bit (1) aligned, fixed bin,
			       fixed bin (35), fixed bin (35));
      dcl	    rcm_update_by_spec$delete
			       entry (ptr, ptr, ptr, bit (36) aligned, bit (36) aligned, bit (1) aligned, fixed bin,
			       fixed bin (35), fixed bin (35), fixed bin (35));
      dcl	    rcm_update_by_spec$modify
			       entry (ptr, ptr, ptr, bit (36) aligned, bit (36) aligned, bit (1) aligned, fixed bin,
			       fixed bin (35), ptr, fixed bin (35), fixed bin (35));

      dcl	    sub_err_	       entry options (variable);
      dcl	    dm_vector_util_$free_typed_vector_array
			       entry (ptr, ptr, fixed bin (35));

/* External */

      dcl	    (
	    dm_error_$bad_specification_type,
	    dm_error_$beginning_of_collection,
	    dm_error_$ci_not_allocated,
	    dm_error_$ci_not_in_collection,
	    dm_error_$end_of_collection,
	    dm_error_$invalid_cursor_position,
	    dm_error_$no_element,
	    dm_error_$programming_error,
	    dm_error_$record_not_found,
	    dm_error_$wrong_cursor_type,
	    error_table_$area_too_small,
	    error_table_$unimplemented_version
	    )		       fixed bin (35) ext;

/* END OF DECLARATIONS */

/* rcm_general_search$get entry point. */

      entry = GET_ENTRY;
      goto JOIN;

get_id:
   entry (p_specification_ptr, p_work_area_ptr, p_record_cursor_ptr, p_element_id_list_ptr, p_code);

      entry = GET_ID_ENTRY;
      goto JOIN;

get_records_and_ids:
   entry (p_specification_ptr, p_id_list_ptr, p_work_area_ptr, p_record_cursor_ptr, p_element_id_list_ptr,
        p_typed_vector_array_ptr, p_code);

      entry = GET_RECORDS_AND_IDS_ENTRY;
      goto JOIN;

delete:
   entry (p_specification_ptr, p_record_cursor_ptr, p_number_of_records_processed, p_code);

      entry = DELETE_ENTRY;
      p_number_of_records_processed = 0;
      goto JOIN;

modify:
   entry (p_specification_ptr, p_general_typed_vector_ptr, p_record_cursor_ptr, p_number_of_records_processed, p_code);

      entry = MODIFY_ENTRY;
      p_number_of_records_processed = 0;
      goto JOIN;

count:
   entry (p_specification_ptr, p_record_cursor_ptr, p_number_of_records_processed, p_code);

      entry = COUNT_ENTRY;
      p_number_of_records_processed = 0;
      goto JOIN;

position:
   entry (p_specification_ptr, p_record_cursor_ptr, p_code);

      entry = POSITION_ENTRY;
      goto JOIN;
%page;
JOIN:
      p_code = 0;
      code = 0;
      record_cursor_ptr = p_record_cursor_ptr;
      if record_cursor.type ^= RECORD_CURSOR_TYPE
      then call sub_err_ (dm_error_$wrong_cursor_type, myname, ACTION_CANT_RESTART, null, 0,
	      "^/Expected record cursor, type ^d; received type ^d.", RECORD_CURSOR_TYPE, record_cursor.type);
      call CHECK_VERSION ((record_cursor.version), (RECORD_CURSOR_VERSION_2), "record_cursor");

      specification_head_ptr = p_specification_ptr;
      call GET_SPEC_VALUES (specification_head_ptr, spec_is_relative, spec_is_numeric, spec_is_always_satisfied,
	 search_in_reverse_order, maximum_number_of_records, position_from_initial);
      if spec_is_relative
      then
         do;
	  call VERIFY_POSITION (record_cursor_ptr);
	  if search_in_reverse_order
	  then
	     do;
	        low_record_id_bound = DEFAULT_RECORD_ID_BOUND;
	        high_record_id_bound = record_cursor.record_id;
	     end;
	  else
	     do;
	        low_record_id_bound = record_cursor.record_id;
	        high_record_id_bound = DEFAULT_RECORD_ID_BOUND;
	     end;
         end;
      else low_record_id_bound, high_record_id_bound = DEFAULT_RECORD_ID_BOUND;

      first_record_id = FIRST_RECORD_TO_PROCESS (record_cursor_ptr, low_record_id_bound, position_from_initial);

      if search_in_reverse_order
      then direction_of_search = -1;
      else direction_of_search = +1;

      call rcm_get_opening_info (record_cursor.file_opening_id, record_cursor.collection_id,
	 record_collection_opening_info_ptr, code);
      if code ^= 0
      then call ERROR_RETURN (code);
      call CHECK_VERSION_CHAR_8 (record_collection_opening_info.version, RECORD_COLLECTION_OPENING_INFO_VERSION_1,
	 "record_collection_opening_info");
      field_table_ptr = record_collection_opening_info.field_table_ptr;

      on cleanup call FINISH;

      if entry = GET_ENTRY
      then
         do;
	  call rcm_get_by_spec$get (record_cursor_ptr, field_table_ptr, specification_head_ptr, first_record_id,
	       high_record_id_bound, spec_is_always_satisfied, direction_of_search, maximum_number_of_records,
	       p_work_area_ptr, p_id_list_ptr, typed_vector_array_ptr, code);
	  if code ^= 0
	  then if code ^= error_table_$area_too_small
	       then call ERROR_RETURN (code);
         end;
      else if entry = GET_ID_ENTRY
      then
         do;
	  call rcm_get_by_spec$get_id (record_cursor_ptr, field_table_ptr, specification_head_ptr, first_record_id,
	       high_record_id_bound, spec_is_always_satisfied, direction_of_search, maximum_number_of_records,
	       p_work_area_ptr, p_element_id_list_ptr, code);
	  if code ^= 0
	  then if code ^= error_table_$area_too_small
	       then call ERROR_RETURN (code);
         end;

      else if entry = GET_RECORDS_AND_IDS_ENTRY
      then
         do;
	  call rcm_get_by_spec$get_records_and_ids (record_cursor_ptr, field_table_ptr, specification_head_ptr,
	       first_record_id, high_record_id_bound, spec_is_always_satisfied, direction_of_search,
	       maximum_number_of_records, p_work_area_ptr, p_id_list_ptr, p_element_id_list_ptr, typed_vector_array_ptr,
	       code);
	  if code ^= 0
	  then if code ^= error_table_$area_too_small
	       then call ERROR_RETURN (code);
         end;

      else if entry = COUNT_ENTRY
      then
         do;
	  call rcm_get_by_spec$count (record_cursor_ptr, field_table_ptr, specification_head_ptr, first_record_id,
	       high_record_id_bound, spec_is_always_satisfied, direction_of_search, maximum_number_of_records,
	       p_number_of_records_processed, code);
	  if code ^= 0
	  then if code ^= dm_error_$record_not_found
	       then call ERROR_RETURN (code);
         end;
      else if entry = POSITION_ENTRY
      then
         do;
	  call rcm_get_by_spec$position (record_cursor_ptr, field_table_ptr, specification_head_ptr, first_record_id,
	       high_record_id_bound, spec_is_always_satisfied, direction_of_search, maximum_number_of_records, code);
	  if code ^= 0
	  then call ERROR_RETURN (code);
         end;
      else if entry = DELETE_ENTRY
      then
         do;
	  call rcm_update_by_spec$delete (record_cursor_ptr, field_table_ptr, specification_head_ptr, first_record_id,
	       high_record_id_bound, spec_is_always_satisfied, direction_of_search, maximum_number_of_records,
	       p_number_of_records_processed, code);
	  if code ^= 0
	  then call ERROR_RETURN (code);
         end;
      else if entry = MODIFY_ENTRY
      then
         do;
	  call rcm_update_by_spec$modify (record_cursor_ptr, field_table_ptr, specification_head_ptr, first_record_id,
	       high_record_id_bound, spec_is_always_satisfied, direction_of_search, maximum_number_of_records,
	       p_general_typed_vector_ptr, p_number_of_records_processed, code);
	  if code ^= 0
	  then call ERROR_RETURN (code);
         end;
      else call sub_err_ (dm_error_$programming_error, myname, ACTION_CANT_RESTART, null (), 0,
	      "The entry code ^d is not one of the possible valid entry codes.", entry);

      if entry = GET_ENTRY | entry = GET_RECORDS_AND_IDS_ENTRY
      then p_typed_vector_array_ptr = typed_vector_array_ptr;
      else ;

      p_code = code;

      call FINISH;
MAIN_RETURN:
      return;
%page;
FINISH:
   proc;
      if entry = GET_ENTRY | entry = GET_RECORDS_AND_IDS_ENTRY
      then if typed_vector_array_ptr ^= null & p_typed_vector_array_ptr ^= typed_vector_array_ptr
	 then call dm_vector_util_$free_typed_vector_array (p_work_area_ptr, typed_vector_array_ptr, code);
   end FINISH;


ERROR_RETURN:
   proc (er_p_code);

      dcl	    er_p_code	       fixed bin (35) parm;

      p_code = er_p_code;
      call FINISH;
      goto MAIN_RETURN;
   end ERROR_RETURN;
%page;
CHECK_VERSION:
   proc (p_received_version, p_expected_version, p_structure_name);
      dcl	    p_received_version     fixed bin (35);
      dcl	    p_expected_version     fixed bin (35);
      dcl	    p_structure_name       char (*);

      if p_received_version ^= p_expected_version
      then call sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
	      "^/Expected version ^d of the ^a structure.
Received version ^d instead.", p_expected_version, p_structure_name, p_received_version);

   end CHECK_VERSION;


CHECK_VERSION_CHAR_8:
   proc (p_given_version, p_correct_version, p_structure_name);

      dcl	    p_structure_name       char (*);
      dcl	    p_given_version	       char (8) aligned;
      dcl	    p_correct_version      char (8) aligned;

      if p_given_version ^= p_correct_version
      then call sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
	      "^/Expected version ""^8a"" of ^a structure; received ""^8a"".", p_correct_version, p_structure_name,
	      p_given_version);

      return;

   end CHECK_VERSION_CHAR_8;
%page;
VERIFY_POSITION:
   proc (vp_p_record_cursor_ptr);

/* VERIFY_POSITION attempts to access the record specified by
   record_cursor.record_id.  If that record does not exist, the cursor
   is invalid.  If it does exist but some other error occurs, return that
   error.  Either type of error results in a return to the caller of the
   main procedure.  This routine returns to the main procedure only if the
   cursor is valid. */

      dcl	    vp_p_record_cursor_ptr ptr parm;
      dcl	    vp_code	       fixed bin (35);

      vp_code = 0;
      call collection_manager_$get_id (vp_p_record_cursor_ptr -> record_cursor.file_opening_id,
	 vp_p_record_cursor_ptr -> record_cursor.collection_id, vp_p_record_cursor_ptr -> record_cursor.record_id,
	 NO_POSITIONING, SPECIFIED_ID_IS_NOT_DEFAULT_ID, ("0"b), vp_code);
      if vp_code ^= 0
      then if vp_code = dm_error_$no_element | vp_code = dm_error_$ci_not_in_collection
	      | vp_code = dm_error_$ci_not_allocated
	 then call ERROR_RETURN (dm_error_$invalid_cursor_position);
	 else call ERROR_RETURN (vp_code);
      else return;

   end VERIFY_POSITION;
%page;
FIRST_RECORD_TO_PROCESS:
   proc (frp_p_record_cursor_ptr, frp_p_initial_record_id, frp_p_position_from_initial) returns (bit (36) aligned);

/* FIRST_RECORD_TO_PROCESS is a function which returns the record id of
   the first record to process. 
   The error processing is different from that in VERIFY_CURSOR.  This is
   because we know that frp_p_initial_record_id is either a valid record id
   or "0"b.  Any error codes cannot refer to the frp_p_initial_record_id.
   dm_error_$no_element (necessarily with frp_p_initial_record_id = "0"b)
   can only mean that there are no records at all, and
   dm_error_$(beginning end)_of_collection can only mean that we attempted to
   position past the beginning or end of the collection.  All three simply
   mean that the desired record was not found.  Any other error is an
   unexpected error and should be reported as is.  
*/

      dcl	    frp_p_record_cursor_ptr
			       ptr parm;
      dcl	    frp_p_initial_record_id
			       bit (36) aligned parm;
      dcl	    frp_p_position_from_initial
			       fixed bin (17) parm;
      dcl	    frp_code	       fixed bin (35);
      dcl	    frp_start_from_edge    bit (1) aligned;
      dcl	    frp_first_record_id    bit (36) aligned;

      frp_code = 0;
      frp_start_from_edge = (frp_p_initial_record_id = "0"b);

      call collection_manager_$get_id (frp_p_record_cursor_ptr -> record_cursor.file_opening_id,
	 frp_p_record_cursor_ptr -> record_cursor.collection_id, frp_p_initial_record_id, frp_p_position_from_initial,
	 frp_start_from_edge, frp_first_record_id, frp_code);
      if frp_code ^= 0
      then if frp_code = dm_error_$no_element | frp_code = dm_error_$end_of_collection
	      | frp_code = dm_error_$beginning_of_collection
	 then call ERROR_RETURN (dm_error_$record_not_found);
	 else call ERROR_RETURN (frp_code);
      else return (frp_first_record_id);

   end FIRST_RECORD_TO_PROCESS;
%page;
GET_SPEC_VALUES:
   proc (gsv_p_spec_ptr, gsv_p_spec_is_relative, gsv_p_spec_is_numeric, gsv_p_spec_is_always_satisfied,
        gsv_p_search_in_reverse_order, gsv_p_maximum_number_of_records, gsv_p_position_from_initial);

/* This routine analyzes the given specification to determine various
   information to be used in selecting records.  Determination of such
   information is dependent upon the type of specification supplied:
   absolute or relative, search or numeric.  The information returned is:
  
   gsv_p_spec_is_relative : ON if the type of the spec is relative, 
		        OFF if absolute.
   gsv_p_spec_is_numeric :  ON if the type of the spec is numeric,
		        OFF if the type is search.
   gsv_p_spec_is_always_satisfied : ON if the specification is such that
                    any record satisfies its constraints.  This is true if
		a search spec has no constraints, if no spec is supplied,
		or if a numeric spec is supplied.
   gsv_p_search_in_reverse_order : ON if the records are to be processed 
                    backwards.  This is true if a negative position_number is
                    supplied with a numeric_spec, or if a search_spec specifies
                    a range of records which is at the end of acceptable 
                    records (range.type = HIGH_RANGE_TYPE).
   gsv_p_maximum_number_of_records : specifies the most records allowed by the
                    spec.
   gsv_p_position_from_initial : is the number of records to position from the 
                    initial position to get the first record to examine.
                    This can be positive or negative for positioning forward
                    or backward.
*/

      dcl	    gsv_p_spec_ptr	       ptr parm;
      dcl	    gsv_p_spec_is_relative bit (1) aligned parm;
      dcl	    gsv_p_spec_is_numeric  bit (1) aligned parm;
      dcl	    gsv_p_spec_is_always_satisfied
			       bit (1) aligned parm;
      dcl	    gsv_p_search_in_reverse_order
			       bit (1) aligned parm;
      dcl	    gsv_p_maximum_number_of_records
			       fixed bin (35) parm;
      dcl	    gsv_p_position_from_initial
			       fixed bin (17) parm;

      if gsv_p_spec_ptr = null ()
      then
         do;
	  gsv_p_spec_is_relative = "0"b;
	  gsv_p_spec_is_numeric = "0"b;
	  gsv_p_spec_is_always_satisfied = "1"b;
	  gsv_p_search_in_reverse_order = "0"b;
	  gsv_p_position_from_initial = 1;
	  gsv_p_maximum_number_of_records = DEFAULT_MAXIMUM_NUMBER_OF_RECORDS;
         end;
      else
         do;
	  call CHECK_VERSION (gsv_p_spec_ptr -> specification_head.version, SPECIFICATION_VERSION_4, "specification");

	  if gsv_p_spec_ptr -> specification_head.type = RELATIVE_SEARCH_SPECIFICATION_TYPE
	       | gsv_p_spec_ptr -> specification_head.type = ABSOLUTE_SEARCH_SPECIFICATION_TYPE
	  then
	     do;
	        if gsv_p_spec_ptr -> specification_head.type = RELATIVE_SEARCH_SPECIFICATION_TYPE
	        then gsv_p_spec_is_relative = "1"b;
	        else gsv_p_spec_is_relative = "0"b;

	        search_specification_ptr = gsv_p_spec_ptr;
	        gsv_p_spec_is_numeric = "0"b;
	        gsv_p_spec_is_always_satisfied = (search_specification.number_of_and_groups <= 0);
	        gsv_p_search_in_reverse_order = (search_specification.range.type = HIGH_RANGE_TYPE);
	        gsv_p_position_from_initial = 1;
	        if search_specification.range.type ^= ALL_RANGE_TYPE & search_specification.range.size > 0
	        then gsv_p_maximum_number_of_records = search_specification.range.size;
	        else gsv_p_maximum_number_of_records = DEFAULT_MAXIMUM_NUMBER_OF_RECORDS;
	     end;
	  else if gsv_p_spec_ptr -> specification_head.type = RELATIVE_NUMERIC_SPECIFICATION_TYPE
	       | gsv_p_spec_ptr -> specification_head.type = ABSOLUTE_NUMERIC_SPECIFICATION_TYPE
	  then
	     do;
	        if gsv_p_spec_ptr -> specification_head.type = RELATIVE_NUMERIC_SPECIFICATION_TYPE
	        then gsv_p_spec_is_relative = "1"b;
	        else gsv_p_spec_is_relative = "0"b;

	        numeric_specification_ptr = gsv_p_spec_ptr;
	        gsv_p_spec_is_numeric = "1"b;
	        gsv_p_spec_is_always_satisfied = "1"b;
	        gsv_p_position_from_initial = numeric_specification.position_number;
	        gsv_p_search_in_reverse_order = (gsv_p_position_from_initial < 0);
	        if numeric_specification.range_size > 0
	        then gsv_p_maximum_number_of_records = numeric_specification.range_size;
	        else gsv_p_maximum_number_of_records = DEFAULT_MAXIMUM_NUMBER_OF_RECORDS;
	     end;
	  else call sub_err_ (dm_error_$bad_specification_type, myname, ACTION_CANT_RESTART, null, 0,
		  "^/The  specification structure does not have a recognizable type.^/The recognizable types are: ^d, ^d, ^d or ^d. Received a type ^d structure."
		  , ABSOLUTE_SEARCH_SPECIFICATION_TYPE, RELATIVE_SEARCH_SPECIFICATION_TYPE,
		  ABSOLUTE_NUMERIC_SPECIFICATION_TYPE, RELATIVE_NUMERIC_SPECIFICATION_TYPE,
		  gsv_p_spec_ptr -> specification_head.type);
         end;

      return;


   end GET_SPEC_VALUES;
%page;
%include dm_rcm_opening_info;
%page;
%include dm_rcm_cursor;
%page;
%include dm_specification_head;
%page;
%include dm_specification;
%page;
%include dm_range_constants;
%page;
%include sub_err_flags;
%page;
%include dm_collmgr_entry_dcls;

   end get;
