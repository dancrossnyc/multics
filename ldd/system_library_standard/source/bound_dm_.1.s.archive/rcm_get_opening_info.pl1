/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */

/* format: style2,ind3 */

rcm_get_opening_info:
   proc (p_file_opening_id, p_collection_id, p_record_collection_opening_info_ptr, p_code);

/* DESCRIPTION:

         Gets  opening  information  associated  with  the  specified  record
     collection.  If no opening information exists for this record collection,
     the record collection is opened,  by  retrieving  the  record  collection
     header and associated field_table.
*/

/* HISTORY:

Written by Matthew Pierret, 08/17/82.
Modified:
03/15/83 by Matthew Pierret: Changed to use record_collection_opening_info,
            refresh each transaction, use RECORD_COLLECTION_HEADER_VERSION_2.
03/24/83 by Lindsey Spratt:  Changed to use version 2 of the field_table, and
	  to check the version of the field_table.
04/04/83 by Matthew Pierret:  Added $opening_table_ptr, which returns the
            value of static_opening_table_ptr.
07/28/83 by Matthew Pierret: Changed name from rm_get_opening_info to
            rcm_get_opening_info, and all rm_ prefixes to rcm_.
05/04/84 by Matthew Pierret: Changed to use FIELD_TABLE_VERSION_3.
06/11/84 by Matthew Pierret: Changed cm_$get_element to cm_$get.
*/

/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_file_opening_id      bit (36) aligned parameter;
      dcl	    p_collection_id	       bit (36) aligned parameter;
      dcl	    p_record_collection_opening_info_ptr
			       ptr parameter;
      dcl	    p_code	       fixed bin (35) parameter;

/* Automatic */

      dcl	    1 local_rc_header      aligned like record_collection_header;
      dcl	    (init, refresh, new_buffer_was_allocated)
			       init ("0"b) bit (1) aligned;
      dcl	    current_transaction_id bit (36) aligned;
      dcl	    current_rollback_count fixed bin (35);
      dcl	    field_table_buffer_length
			       fixed bin (35) init (0);
      dcl	    field_table_buffer_ptr ptr init (null);

/* Based */

      dcl	    dm_work_area	       area (sys_info$max_seg_size) based (dm_work_area_ptr);

/* Builtin */

      dcl	    (addr, length, null, unspec)
			       builtin;

/* Condition */

      dcl	    cleanup	       condition;

/* Constant */

      dcl	    myname	       init ("rcm_get_opening_info") char (32) varying internal static options (constant);
      dcl	    (
	    BITS_PER_WORD	       init (36),
	    NUMBER_OF_BUCKETS      init (20)
	    )		       fixed bin internal static options (constant);

/* Entry */

      dcl	    opening_manager_$get_opening
			       entry (ptr, bit (72) aligned, ptr, fixed bin (35));
      dcl	    opening_manager_$put_opening
			       entry (ptr, bit (72) aligned, ptr, fixed bin (35));
      dcl	    opening_manager_$init  entry (fixed bin, ptr, fixed bin (35));
      dcl	    get_dm_free_area_      entry () returns (ptr);
      dcl	    sub_err_	       entry options (variable);

/* External */

      dcl	    (
	    dm_error_$ci_not_allocated,
	    dm_error_$ci_not_in_collection,
	    dm_error_$misformatted_ci,
	    dm_error_$no_element,
	    dm_error_$no_opening,
	    sys_info$max_seg_size
	    )		       fixed bin (35) external;

/* Static */

      dcl	    static_opening_table_ptr
			       ptr init (null) internal static;
      dcl	    dm_work_area_ptr       ptr init (null) internal static;

/* END OF DECLARATIONS */

/* format: ^indblkcom,indcomtxt */

      p_code = 0;
      p_record_collection_opening_info_ptr = null;

      current_transaction_id = CURRENT_TRANSACTION_ID ();
      current_rollback_count = CURRENT_ROLLBACK_COUNT ();

      if static_opening_table_ptr = null
      then
         do;

         /*** The record_manager_ has not set up an opening table for this process yet. Do so. */

	  init, refresh = "1"b;

	  call opening_manager_$init (NUMBER_OF_BUCKETS, static_opening_table_ptr, p_code);
	  if p_code ^= 0
	  then return;
         end;
      else
         do;

         /*** The record_manager_ opening table is already set up, so get the
	    record_collection_opening_info_ptr if one has been set up for this collection. */

	  call
	     opening_manager_$get_opening (static_opening_table_ptr, (p_file_opening_id || p_collection_id),
	     record_collection_opening_info_ptr, p_code);
	  if p_code ^= 0
	  then if p_code ^= dm_error_$no_opening
	       then return;				/* This should not happen. */
	       else
		do;

		/*** No opening information exists yet for this record collection. Setup the opening information. */

		   refresh, init = "1"b;
		end;
	  else
	     do;

	     /*** A record_collection_opening_info structure is already set up. Verify
		the structure and test to see if that information can be trusted. */

	        call
		 CHECK_VERSION_CHAR_8 (record_collection_opening_info.version,
		 RECORD_COLLECTION_OPENING_INFO_VERSION_1, "record_collection_opening_info");

	        if record_collection_opening_info.current_transaction_id ^= current_transaction_id
	        then refresh = "1"b;
	        else if record_collection_opening_info.current_rollback_count ^= current_rollback_count
	        then refresh = "1"b;
	        else if record_collection_opening_info.field_table_ptr = null
	        then refresh = "1"b;
	     end;
         end;

      if refresh
      then
REFRESH:
         do;

         /*** Record collection information must be retrieved from the file, either
	    because a new transaction requires refreshing the old info or because this
	    is the first time the information is retrieved. */

	  if dm_work_area_ptr = null
	  then dm_work_area_ptr = get_dm_free_area_ ();

	  field_table_ptr = null;

	  on cleanup call FINISH ();

	  if init
	  then
	     do;
	        alloc record_collection_opening_info in (dm_work_area);
	        record_collection_opening_info.file_opening_id = p_file_opening_id;
	        record_collection_opening_info.collection_id = p_collection_id;
	     end;

	  field_table_buffer_ptr = record_collection_opening_info.field_table_ptr;
	  if field_table_buffer_ptr ^= null
	  then
	     do;
	        call
		 CHECK_VERSION_CHAR_8 (field_table_buffer_ptr -> field_table.version, FIELD_TABLE_VERSION_3,
		 "field_table");
	        field_table_buffer_length = currentsize (field_table_buffer_ptr -> field_table) * BITS_PER_WORD;
	     end;

	  call
	     collection_manager_$get_header (p_file_opening_id, p_collection_id, addr (local_rc_header),
	     length (unspec (local_rc_header)), null, "0"b, record_collection_header_ptr, (0), p_code);
	  if p_code ^= 0
	  then call ERROR_RETURN ();

	  call
	     CHECK_VERSION_CHAR_8 (record_collection_header.version, RECORD_COLLECTION_HEADER_VERSION_2,
	     "record_collection_header");

	  call
	     collection_manager_$get (p_file_opening_id, HEADER_COLLECTION_ID,
	     record_collection_header.field_table_element_id, 0, field_table_buffer_ptr, field_table_buffer_length,
	     dm_work_area_ptr, new_buffer_was_allocated, field_table_ptr, (0), p_code);
	  if p_code ^= 0
	  then if p_code = dm_error_$no_element
	       then call REPORT_FIELD_TABLE_RETRIEVAL_ERROR ();
	       else if p_code = dm_error_$ci_not_allocated
	       then call REPORT_FIELD_TABLE_RETRIEVAL_ERROR ();
	       else if p_code = dm_error_$ci_not_in_collection
	       then call REPORT_FIELD_TABLE_RETRIEVAL_ERROR ();
	       else if p_code = dm_error_$misformatted_ci
	       then call REPORT_FIELD_TABLE_RETRIEVAL_ERROR ();

	  call CHECK_VERSION_CHAR_8 (field_table.version, FIELD_TABLE_VERSION_3, "field_table");


	  record_collection_opening_info.current_transaction_id = current_transaction_id;
	  record_collection_opening_info.current_rollback_count = current_rollback_count;

	  if init
	  then call
		opening_manager_$put_opening (static_opening_table_ptr, (p_file_opening_id || p_collection_id),
		record_collection_opening_info_ptr, p_code);
	  if p_code ^= 0
	  then call ERROR_RETURN ();
	  else record_collection_opening_info.field_table_ptr = field_table_ptr;

         end REFRESH;

      if p_code = 0
      then p_record_collection_opening_info_ptr = record_collection_opening_info_ptr;

      call FINISH ();

MAIN_RETURN:
      return;
%page;
opening_table_ptr:
   entry () returns (ptr);

      return (static_opening_table_ptr);
%page;
FINISH:
   proc ();

      if new_buffer_was_allocated
      then
         do;
	  if p_record_collection_opening_info_ptr = null
	  then /* Operation was unsuccessful. */
	       if field_table_ptr ^= null
	       then free field_table in (dm_work_area);
	       else ;
	  else /* Operation was successful. */
	       if field_table_buffer_ptr ^= null
	  then free field_table_buffer_ptr -> field_table in (dm_work_area);
	  else ;
         end;

      if init
      then
         do;
	  if p_record_collection_opening_info_ptr = null
	  then /* Operation was unsuccessful. */
	       if record_collection_opening_info_ptr ^= null
	       then free record_collection_opening_info in (dm_work_area);
         end;

   end FINISH;


ERROR_RETURN:
   proc ();

      call FINISH ();
      goto MAIN_RETURN;

   end ERROR_RETURN;


REPORT_FIELD_TABLE_RETRIEVAL_ERROR:
   proc ();

      call
         sub_err_ (p_code, myname, ACTION_CANT_RESTART, null, 0,
         "^/The field_table for record collection ^3bo could not be retrieved.", p_collection_id);

   end REPORT_FIELD_TABLE_RETRIEVAL_ERROR;
%page;
CHECK_VERSION_CHAR_8:
   proc (p_given_version, p_correct_version, p_structure_name);

      dcl	    p_structure_name       char (*);
      dcl	    p_given_version	       char (8) aligned;
      dcl	    p_correct_version      char (8) aligned;
      dcl	    sub_err_	       entry () options (variable);
      dcl	    error_table_$unimplemented_version
			       ext fixed bin (35);

      if p_given_version ^= p_correct_version
      then call
	    sub_err_ (error_table_$unimplemented_version, myname, "s", null, 0,
	    "^/Expected version ""^8a"" of ^a structure; received ""^8a"".", p_correct_version, p_structure_name,
	    p_given_version);

      return;

   end CHECK_VERSION_CHAR_8;
%page;
CURRENT_TRANSACTION_ID:
   proc () returns (bit (36) aligned);

      dcl	    p_transaction_id       bit (36) aligned init ("0"b);
      dcl	    transaction_manager_$get_current_txn_id
			       entry (bit (36) aligned, fixed bin (35));

      call transaction_manager_$get_current_txn_id (p_transaction_id, (0));

      return (p_transaction_id);

   end CURRENT_TRANSACTION_ID;


CURRENT_ROLLBACK_COUNT:
   proc () returns (fixed bin (35));

      return (0);

   end CURRENT_ROLLBACK_COUNT;
%page;
%include dm_rcm_opening_info;
%page;
%include dm_rcm_header;
%page;
%include dm_field_table;
%page;
%include dm_hdr_collection_id;
%page;
%include sub_err_flags;
%page;
%include dm_collmgr_entry_dcls;

   end rcm_get_opening_info;
