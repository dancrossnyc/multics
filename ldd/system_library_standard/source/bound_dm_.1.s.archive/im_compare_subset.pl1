/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
/* format: style2,ind3 */
im_compare_subset:
   proc (p_subset_specification_ptr, p_simple_typed_vector_ptr, p_work_area_ptr, p_satisfies_specification,
      p_pseudo_field_value, p_code);

/* DESCRIPTION:

         This  subroutine checks for a keys presence (or lack thereof) in one
     or more subset indices.
*/

/* HISTORY:

Written by Lindsey L. Spratt, 08/23/82.
Modified:
10/12/82 by Lindsey Spratt:  Changed to use version 2 of the
	  search_specification structure.
12/13/82 by Lindsey Spratt:  Upgraded to the version 3 specification.
	  Corrected the calling sequence to position_cursor.
05/23/83 by Matthew Pierret: Upgraded to version 4 specification.
06/08/84 by Lee Baldwin:  Fixed to call dm_error_$key_not_found instead
            of dm_error_$no_key which didn't exist.
*/

/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_subset_specification_ptr
			       ptr parameter;
      dcl	    p_simple_typed_vector_ptr
			       ptr;
      dcl	    p_work_area_ptr	       ptr;
      dcl	    p_satisfies_specification
			       bit (1) aligned parameter;
      dcl	    p_pseudo_field_value   bit (*) parameter;
      dcl	    p_code	       fixed bin (35) parameter;

/* Automatic */

      dcl	    subset_idx	       fixed bin;
      dcl	    search_idx	       fixed bin;

/* Based */

      dcl	    work_area	       based (p_work_area_ptr) area;

/* Builtin */

      dcl	    (null, max, hbound)    builtin;

/* Condition */

      dcl	    cleanup	       condition;

/* Constant */
/* Entry */
/* External */

      dcl	    dm_error_$key_not_found fixed bin (35) ext;

/* END OF DECLARATIONS */

      subset_specification_ptr = p_subset_specification_ptr;
      simple_typed_vector_ptr = p_simple_typed_vector_ptr;


      ss_maximum_number_of_constraints = 0;

      do subset_idx = 1 to hbound (subset_specification.subset, 1);
         ss_maximum_number_of_constraints =
	  max (ss_maximum_number_of_constraints,
	  subset_specification.subset (subset_idx).id_list_ptr -> id_list.number_of_ids);
      end;
      search_specification_ptr = null;
      ss_number_of_and_groups = 1;
      on cleanup call finish;
      alloc search_specification in (work_area);
      search_specification.version = SPECIFICATION_VERSION_4;
      search_specification.head.type = ABSOLUTE_SEARCH_SPECIFICATION_TYPE;
      search_specification.and_group (1).constraint (*).operator_code = EQUAL_OPERATOR_CODE;
      search_specification.and_group (1).constraint (*).value_field_id = -1;
      search_specification.and_group (1).number_of_constraints = ss_maximum_number_of_constraints;

      do search_idx = 1 to ss_maximum_number_of_constraints;
         search_specification.and_group (1).constraint (search_idx).field_id = search_idx;
      end;

      p_satisfies_specification = "1"b;
      do subset_idx = 1 to hbound (subset_specification.subset, 1) while (p_satisfies_specification & p_code = 0);
         id_list_ptr = subset_specification.subset (subset_idx).id_list_ptr;
         do search_idx = 1 to hbound (id_list.id, 1);
	  search_specification.and_group (1).constraint (search_idx).value_ptr =
	     simple_typed_vector.dimension (id_list.id (search_idx)).value_ptr;
         end;
         call
	  index_manager_$position_cursor (search_specification_ptr, p_work_area_ptr,
	  subset_specification.subset (subset_idx).cursor_ptr, p_code);
         if p_code = 0
         then p_satisfies_specification = subset_specification.subset (subset_idx).is_member;
         else if p_code = dm_error_$key_not_found
         then
	  do;
	     p_satisfies_specification = ^subset_specification.subset (subset_idx).is_member;
	     p_code = 0;
	  end;

      end;
      call finish;
      return;
%page;
finish:
   proc;
      if search_specification_ptr ^= null
      then free search_specification in (work_area);
   end finish;
%page;
%include dm_subset_specification;
%page;
%include dm_operator_constants;
%page;
%include dm_idxmgr_entry_dcls;
%page;
%include dm_id_list;
%page;
%include vu_typed_vector;
%page;
%include dm_specification_head;
%page;
%include dm_specification;
   end im_compare_subset;
