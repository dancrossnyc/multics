/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */


/* DESCRIPTION:

         Returns an approximate count depending on the entry.  The two
     entries are:
     
     $get_population:
         Returns  an  approximate  count of the tuples in the given relation.
     The count returned is the number of keys in the primary index as kept  in
     the key_count_array.

     $get_duplicate_key_count:
          Returns  an  approximate  count of the duplicate keys in the given 
     index. The count returned depends on the number of fields in a key that
     must be duplicated in order for the key to be considered a duplicate
     (p_number_of_dulication_fields). This information is kept in the index's
     key_count_array.
*/

/* HISTORY:

Written by Matthew Pierret, 08/10/83.
Modified:
09/13/83 by Matthew Pierret:  Changed calling sequence to take a pointer to a
            relation_cursor instead of an opening_id.
            Changed name to rlm_get_approximate_count and added the
            $get_population and $get_duplicate_key_count entries.  The latter
            formerly existed in rlm_general_search.
06/22/84 by Matthew Pierret: Added a cleanup handler to call FINISH, a sub_err_
            call to report an improper entry into the routine, and subroutine
            prefix on each CHECK_VERSION variable.
10/29/84 by Lindsey L. Spratt:  Changed to use version 2 of the
            key_count_array.
11/12/84 by Stanford S. Cox:  Chg to return a minimum tuple count of 1.
03/05/85 by Lindsey L. Spratt:  Fixed to guarantee that the key count returend
            (p_tuple_count) is always non-negative, and is no greater than one
            less than the total (approx.)  tuple count (key_count_idx = 0).
*/
/* format: style2,ind3 */
%page;
/* format: style2,ind3 */

rlm_get_approximate_count$get_population:
   proc (p_relation_cursor_ptr, p_tuple_count, p_code);


/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_relation_cursor_ptr  ptr parameter;	/* points to relation_cursor */
      dcl	    p_index_collection_id  bit (36) aligned parameter;
						/* is the collection id of an index from which to get counts */
      dcl	    p_number_of_duplication_fields
			       fixed bin (17) parameter;
      dcl	    p_tuple_count	       fixed bin (35) parameter;
						/* approximate number of tuples in relation */
      dcl	    p_code	       fixed bin (35) parameter;
						/* standard error code*/

/* Automatic */

      dcl	    code		       fixed bin (35);
      dcl	    index_idx	       fixed bin;
      dcl	    key_count_idx	       fixed bin;
      dcl	    (get_population, get_duplicate_key_count)
			       bit (1) aligned;
      dcl	    index_collection_id    bit (36) aligned;
      dcl	    index_cursor_ptr       ptr init (null);

/* Based */
/* Builtin */

      dcl	    null		       builtin;

/* Condition */

      dcl	    cleanup	       condition;

/* Constant */

      dcl	    myname	       init ("rlm_get_approximate_count") char (32) varying internal static
			       options (constant);
      dcl	    TOTAL_KEY_COUNT_INDICATOR
			       init (-1) fixed bin (17) internal static options (constant);

/* Entry */

      dcl	    get_dm_free_area_      entry () returns (ptr);
      dcl	    rlm_opening_info$get   entry (bit (36) aligned, ptr, fixed bin (35));
      dcl	    sub_err_	       entry () options (variable);

/* External */

      dcl	    dm_error_$programming_error
			       fixed bin (35) ext;
      dcl	    error_table_$unimplemented_version
			       fixed bin (35) ext;

/* Static */

      dcl	    work_area_ptr	       ptr internal static init (null);

/* END OF DECLARATIONS */

/* get_population:
   entry (p_relation_cursor_ptr, p_tuple_count, p_code);
*/
      get_population = "1"b;
      get_duplicate_key_count = "0"b;
      key_count_idx = 0;
      goto JOIN;

get_duplicate_key_count:
   entry (p_relation_cursor_ptr, p_index_collection_id, p_number_of_duplication_fields, p_tuple_count, p_code);

      get_population = "0"b;
      get_duplicate_key_count = "1"b;
      if p_number_of_duplication_fields = TOTAL_KEY_COUNT_INDICATOR
      then key_count_idx = 0;
      else key_count_idx = p_number_of_duplication_fields;
      goto JOIN;

JOIN:
      p_tuple_count, p_code = 0;

      relation_cursor_ptr = p_relation_cursor_ptr;
      call CHECK_VERSION (relation_cursor.version, RELATION_CURSOR_VERSION_2, "relation_cursor");

      key_count_array_ptr, index_cursor_ptr = null;

      if get_duplicate_key_count
      then index_collection_id = p_index_collection_id;
      else
         do;

	  /*** Set up opening info. Only the index_attribute_map is needed. */

	  call rlm_opening_info$get (relation_cursor.file_opening_id, relation_opening_info_ptr, code);
	  if code ^= 0
	  then call ERROR_RETURN (code);
	  call CHECK_VERSION (relation_opening_info.version, RELATION_OPENING_INFO_VERSION_2, "relation_opening_info");
	  index_attribute_map_ptr = relation_opening_info.index_attribute_map_ptr;
	  call CHECK_VERSION (index_attribute_map.version, INDEX_ATTRIBUTE_MAP_VERSION_2, "index_attribute_map");

/**** Get collection id of first index.  */

	  do index_idx = 1 to hbound (index_attribute_map.index, 1)
	       while (index_attribute_map.index (index_idx).collection_id = "0"b
	       | index_attribute_map.index (index_idx).number_of_attributes <= 0);
	  end;
	  if index_idx > hbound (index_attribute_map.index, 1)
	  then call ERROR_RETURN (0);

	  index_collection_id = index_attribute_map.index (index_idx).collection_id;
         end;

      if work_area_ptr = null
      then work_area_ptr = get_dm_free_area_ ();

      on cleanup call FINISH ();

/**** Get a pointer to an index_cursor to use in calling index_manager_ */

      if relation_cursor.flags.current_state_is_consistent & relation_cursor.current.cursor_ptr ^= null
	 & relation_cursor.current.collection_id = index_collection_id
      then index_cursor_ptr = relation_cursor.current.cursor_ptr;
						/* already have index_cursor */
      else
         do;

	  /*** Create an index_cursor to use in calling index_manager_. */

	  call index_manager_$create_cursor (relation_cursor.file_opening_id, index_collection_id, work_area_ptr,
	       index_cursor_ptr, code);
	  if code ^= 0
	  then call ERROR_RETURN (code);
         end;

/**** Get the count */

      call index_manager_$get_key_count_array (index_cursor_ptr, work_area_ptr, key_count_array_ptr, code);
      if code ^= 0
      then call ERROR_RETURN (code);

      call CHECK_VERSION (key_count_array.version, KEY_COUNT_ARRAY_VERSION_2, "key_count_array");

/* The following is done as a kluge to get around a problem with the key counts
where the key counts can be negative, or equal to the tuple 
count (key_count_idx = 0), due to the unprotected nature of the key counts.
(Neither of these cases would happen if the key counts were maintained in a
protected fashion.)

This code guarantees that the count returned is always at least zero, and if
greater than zero, no more than one less than the full tuple count.
*/

      if key_count_idx = 0
      then p_tuple_count = key_count_array.count (0);
      else p_tuple_count = min (key_count_array.count (key_count_idx), key_count_array.count (0) - 1);
      p_tuple_count = max (0, p_tuple_count);

      call FINISH ();
MAIN_RETURN:
      return;
%page;
ERROR_RETURN:
   proc (er_code);

      dcl	    er_code	       fixed bin (35);

      p_code = er_code;
      call FINISH ();
      goto MAIN_RETURN;

   end ERROR_RETURN;


FINISH:
   proc ();

      if index_cursor_ptr ^= null & index_cursor_ptr ^= relation_cursor.current.cursor_ptr
      then call index_manager_$destroy_cursor (index_cursor_ptr, (0));

      if key_count_array_ptr ^= null
      then free key_count_array;

   end FINISH;
%page;
CHECK_VERSION:
   proc (cv_p_received_version, cv_p_expected_version, cv_p_structure_name);
      dcl	    cv_p_received_version  char (8) aligned parameter;
      dcl	    cv_p_expected_version  char (8) aligned parameter;
      dcl	    cv_p_structure_name    char (*);

      if cv_p_received_version ^= cv_p_expected_version
      then call sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
	      "^/Expected version ^a of the ^a structure.
Received version ^d instead.", cv_p_expected_version, cv_p_structure_name, cv_p_received_version);

   end CHECK_VERSION;
%page;
%include dm_rlm_cursor;
%page;
%include dm_rlm_opening_info;
%page;
%include dm_rlm_index_attr_map;
%page;
%include dm_key_count_array;
%page;
%include dm_idxmgr_entry_dcls;
%page;
%include sub_err_flags;
   end rlm_get_approximate_count$get_population;
