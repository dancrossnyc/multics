/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION:

         This     subroutine     is    similar    in    function    to    the
     general_search/process_records pair of modules, except that it  takes  as
     input  a list of record_ids, a search_specification to be applied against
     the records in the record_id_list, and an interval_list to specify  which
     and_groups  in  the  search_specification  apply  to which records in the
     record_id_list.  The supported entry points are:   get,  get_id,  delete,
     get_records_and_ids, and count.

          The work_area supplied must be a freeing area. 
*/

/* HISTORY:

Written by Lindsey L. Spratt, 11/10/82.
Modified:
11/23/82 by Lindsey Spratt:  Fixed setting of typed_vector_array ptr.  Added
	  support  for the get_id entry.
03/16/83 by Matthew Pierret: Changed to receive the 
            record_collection_opening_info structure from rm_get_opening_info.
            Added the ERROR_RETURN proc
            and the GET_ELEMENT_ERROR_RETURN proc (the latter translates
            collection_manager_$get_element error codes into 
            dm_error_$record_not_found).
03/24/83 by Lindsey Spratt:  Removed the field_table include file, declared the
	  field_table_ptr locally.
04/22/83 by Matthew Pierret:  Added the $get_records_and_ids entry.  This
            entry merges the $get and $get_id entries, returning both a
            typed_vector_array and an element_id_list.  Also changed this
            module to always use explicit qualifiers when accessing
            element_id_lists (p_input_eil_ptr and p_output_eil_ptr), and to
            set the implicit qualifier (eil_ptr) to null if the
            element_id_list is not to be freed by the FINISH routine.
05/23/83 by Matthew Pierret: Changed to use version 4 of specification_head.
06/22/83 by Lindsey L. Spratt:  Changed to return dm_error_$record_not_found
            when no matches are found.
07/28/83 by Matthew Pierret: Changed name from rm_process_intervals to
            rcm_process_intervals, and all rm_ prefixes to rcm_.
04/13/84 by Lee Baldwin:  Changed reference to record_cursor.pf_opening_id
            to record_cursor.file_opening_id.
04/26/84 by Lee Baldwin:  Changed $count to not take a work_area_ptr, since
            it doesn't allocate an output structure.
05/10/84 by Matthew Pierret:  Changed to align record buffers on even word
            boundaries.  Changed references to
            data_mgmt_util_ to be to data_format_util_.
06/07/84 by Matthew Pierret:  Re-named cm_$get_element to cm_$get.
09/27/84 by Maggie Sharpe:  set word_area_ptr ot p_work_area_ptr in the delete
            entry; check the version of element_id_list before the structure
            was first used; ERROR_RETURN was called (instead of a simple
            "return") in lines 245 and 260.
10/28/84 by Lindsey L. Spratt:  Changed to use version 2 interval_list.
10/30/84 by Lindsey L. Spratt:  Removed spurious CHECK_VERSION of
            element_id_list.  It was using the (null) element_id_list_ptr,
            instead of p_input_element_id_list_ptr, which was already check
            elsewhere.
*/

/* format: style2,ind3 */

rcm_process_intervals:
   proc ();

      call sub_err_ (dm_error_$programming_error, myname, ACTION_CANT_RESTART, null, 0,
	 "^/^a$^a is not a valid entrypoint", myname, myname);

/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_input_element_id_list_ptr
			       ptr parameter;
      dcl	    p_id_list_ptr	       ptr parameter;
      dcl	    p_search_specification_ptr
			       ptr parameter;
      dcl	    p_interval_list_ptr    ptr parameter;
      dcl	    p_work_area_ptr	       ptr parameter;
      dcl	    p_typed_vector_array_version
			       fixed bin (35) parameter;
      dcl	    p_record_cursor_ptr    ptr parameter;
      dcl	    p_typed_vector_array_ptr
			       ptr parameter;
      dcl	    p_output_element_id_list_ptr
			       ptr parameter;
      dcl	    p_record_count	       fixed bin (35) parameter;
      dcl	    p_code	       fixed bin (35) parameter;

/* Automatic */

      dcl	    (work_area_ptr, old_tva_ptr, vector_ptr, field_table_ptr)
			       ptr init (null);

      dcl	    (get, delete, get_id, count, new_buffer_was_allocated, record_satisfies_specification)
			       bit (1) aligned init ("0"b);
      dcl	    number_of_accepted_records
			       fixed bin (35) init (0);
      dcl	    (interval_idx, record_id_idx, vector_slot_idx, element_id_idx)
			       fixed bin init (0);
      dcl	    record_buffer_ptr      ptr init (null);
      dcl	    record_buffer_length   fixed bin (35) init (BITS_PER_PAGE);
      dcl	    local_record_buffer    (DOUBLE_WORDS_PER_PAGE) fixed bin (71);
      dcl	    record_string_ptr      ptr init (null);
      dcl	    record_string_length   fixed bin (35) init (0);
      dcl	    maximum_number_of_accepted_records
			       fixed bin (35);
      dcl	    accepted_record_ptr    ptr aligned init (null);


/* Based */

      dcl	    accepted_record	       (maximum_number_of_accepted_records) bit (1) unal based (accepted_record_ptr);
      dcl	    work_area	       based (work_area_ptr) area;
      dcl	    record_string	       bit (record_string_length) based (record_string_ptr);
      dcl	    record_buffer	       bit (record_buffer_length) based (record_buffer_ptr);

/* Builtin */

      dcl	    (addr, string, null)   builtin;

/* Constant */

      dcl	    DOUBLE_WORDS_PER_PAGE  init (512) fixed bin internal static options (constant);
      dcl	    BITS_PER_PAGE	       init (1024 * 36) fixed bin internal static options (constant);
      dcl	    VECTOR_SLOT_PAD	       init (200) fixed bin internal static options (constant);
      dcl	    DEFAULT_POSITION       init (0) fixed bin (35) internal static options (constant);
      dcl	    (
	    DEFAULT_NUMBER_OF_FULLY_STRUCTURAL_FIELDS
			       init (0),
	    DEFAULT_PARTIAL_STRUCTURAL_FIELD
			       init (0)
	    )		       fixed bin internal static options (constant);
      dcl	    myname	       init ("rcm_process_intervals") char (32) varying internal static options (constant);

/* Entry */

      dcl	    sub_err_	       entry () options (variable);
      dcl	    rcm_get_opening_info   entry (bit (36) aligned, bit (36) aligned, ptr, fixed bin (35));
      dcl	    data_format_util_$cv_table_to_typed_array
			       entry (ptr, ptr, ptr, fixed bin (35), ptr, fixed bin (35));
      dcl	    data_format_util_$cv_string_to_vector
			       entry (ptr, ptr, ptr, fixed bin (35), ptr, ptr, fixed bin (35));
      dcl	    data_format_util_$compare_sequential
			       entry (ptr, ptr, ptr, fixed bin, fixed bin, bit (*), bit (1) aligned, fixed bin (35))
			       ;

/* External */

      dcl	    (
	    error_table_$unimplemented_version,
	    dm_error_$programming_error,
	    dm_error_$record_not_found,
	    dm_error_$wrong_cursor_type
	    )		       fixed bin (35) ext;

/* END OF DECLARATIONS */

get:
   entry (p_input_element_id_list_ptr, p_id_list_ptr, p_search_specification_ptr, p_interval_list_ptr, p_work_area_ptr,
        p_typed_vector_array_version, p_record_cursor_ptr, p_typed_vector_array_ptr, p_code);

      if p_typed_vector_array_version ^= TYPED_VECTOR_ARRAY_VERSION_2
      then
         do;
	  p_code = error_table_$unimplemented_version;
	  return;
         end;

      get = "1"b;
      work_area_ptr = p_work_area_ptr;
      goto JOIN;

get_id:
   entry (p_input_element_id_list_ptr, p_search_specification_ptr, p_interval_list_ptr, p_work_area_ptr,
        p_record_cursor_ptr, p_output_element_id_list_ptr, p_code);

      get_id = "1"b;
      p_output_element_id_list_ptr = null;
      work_area_ptr = p_work_area_ptr;
      goto JOIN;

count:
   entry (p_input_element_id_list_ptr, p_search_specification_ptr, p_interval_list_ptr, p_record_cursor_ptr,
        p_record_count, p_code);

      count = "1"b;
      goto JOIN;

get_records_and_ids:
   entry (p_input_element_id_list_ptr, p_id_list_ptr, p_search_specification_ptr, p_interval_list_ptr, p_work_area_ptr,
        p_typed_vector_array_version, p_record_cursor_ptr, p_output_element_id_list_ptr, p_typed_vector_array_ptr, p_code)
        ;

      get, get_id = "1"b;
      if p_typed_vector_array_version ^= TYPED_VECTOR_ARRAY_VERSION_2
      then
         do;
	  p_code = error_table_$unimplemented_version;
	  return;
         end;
      work_area_ptr = p_work_area_ptr;
      goto JOIN;

delete:
   entry (p_input_element_id_list_ptr, p_search_specification_ptr, p_interval_list_ptr, p_work_area_ptr,
        p_record_cursor_ptr, p_record_count, p_code);

      delete = "1"b;
      work_area_ptr = p_work_area_ptr;
JOIN:
      p_code = 0;
      element_id_list_ptr, typed_vector_array_ptr = null;

      call CHECK_VERSION (p_input_element_id_list_ptr -> element_id_list.version, ELEMENT_ID_LIST_VERSION_1,
	 "element_id_list");

      search_specification_ptr = p_search_specification_ptr;
      call CHECK_VERSION (search_specification.version, SPECIFICATION_VERSION_4, "search_specification");

      interval_list_ptr = p_interval_list_ptr;

      call CHECK_VERSION_CHAR_8 (interval_list.version, INTERVAL_LIST_VERSION_2, "interval_list");

      record_cursor_ptr = p_record_cursor_ptr;

      if record_cursor.type ^= RECORD_CURSOR_TYPE
      then call sub_err_ (dm_error_$wrong_cursor_type, myname, ACTION_CANT_RESTART, null, 0,
	      "^/Expected a record cursor, type ^d.  Received a cursor of type ^d.", RECORD_CURSOR_TYPE,
	      record_cursor.type);
      call CHECK_VERSION ((record_cursor.version), (RECORD_CURSOR_VERSION_2), "record_cursor");

      if get_id
      then
         do;
	  maximum_number_of_accepted_records = p_input_element_id_list_ptr -> element_id_list.number_of_elements;
	  alloc accepted_record in (work_area);
	  string (accepted_record) = "0"b;
         end;

      call rcm_get_opening_info (record_cursor.file_opening_id, record_cursor.collection_id,
	 record_collection_opening_info_ptr, p_code);
      if p_code ^= 0
      then call ERROR_RETURN ();

      call CHECK_VERSION_CHAR_8 (record_collection_opening_info.version, RECORD_COLLECTION_OPENING_INFO_VERSION_1,
	 "record_collection_opening_info");

      field_table_ptr = record_collection_opening_info.field_table_ptr;

      if get
      then
         do;
	  call data_format_util_$cv_table_to_typed_array (field_table_ptr, p_id_list_ptr, work_area_ptr,
	       (VECTOR_SLOT_PAD), typed_vector_array_ptr, p_code);
	  if p_code ^= 0
	  then call ERROR_RETURN ();
	  call CHECK_VERSION (typed_vector_array.version, TYPED_VECTOR_ARRAY_VERSION_2, "typed_vector_array");

         end;

      record_buffer_ptr = addr (local_record_buffer);

INTERVAL_LIST_LOOP:
      do interval_idx = 1 to interval_list.number_of_intervals
	 while (number_of_accepted_records < search_specification.range.size | search_specification.range.size = 0);
RECORD_LOOP:
         do record_id_idx = interval_list.interval (interval_idx).low_vector_idx
	    to interval_list.interval (interval_idx).high_vector_idx
	    while (number_of_accepted_records < search_specification.range.size | search_specification.range.size = 0);
	  call collection_manager_$get (record_cursor.file_opening_id, record_cursor.collection_id,
	       p_input_element_id_list_ptr -> element_id_list.id (record_id_idx), (DEFAULT_POSITION), record_buffer_ptr,
	       record_buffer_length, work_area_ptr, new_buffer_was_allocated, record_string_ptr, record_string_length,
	       p_code);
	  if p_code ^= 0
	  then call GET_ELEMENT_ERROR_RETURN (p_code);

	  if new_buffer_was_allocated
	  then if record_buffer_ptr ^= addr (local_record_buffer)
	       then
		do;
		   free record_buffer in (work_area);
		   record_buffer_ptr = record_string_ptr;
		   record_buffer_length = record_string_length;
		end;

	  call data_format_util_$compare_sequential (field_table_ptr, search_specification_ptr,
	       interval_list.interval (interval_idx).and_group_id_list_ptr, DEFAULT_NUMBER_OF_FULLY_STRUCTURAL_FIELDS,
	       DEFAULT_PARTIAL_STRUCTURAL_FIELD, record_string, record_satisfies_specification, p_code);
	  if p_code ^= 0
	  then call ERROR_RETURN;

	  if record_satisfies_specification
	  then
	     do;
	        number_of_accepted_records = number_of_accepted_records + 1;
	        if get
	        then call ADD_TO_ARRAY;
	        if get_id
	        then accepted_record (record_id_idx) = "1"b;
	        else if delete
	        then call DELETE_RECORD;
	     end;
         end RECORD_LOOP;
      end INTERVAL_LIST_LOOP;

      if get & number_of_accepted_records > 0
      then p_typed_vector_array_ptr = typed_vector_array_ptr;

      else if delete | count
      then p_record_count = number_of_accepted_records;

      if get_id & number_of_accepted_records > 0
      then
         do;
	  eil_number_of_elements = number_of_accepted_records;
	  alloc element_id_list in (work_area);
	  element_id_list.version = ELEMENT_ID_LIST_VERSION_1;
	  record_id_idx = 0;
	  do element_id_idx = 1 to p_input_element_id_list_ptr -> element_id_list.number_of_elements;
	     if accepted_record (element_id_idx)
	     then
	        do;
		 record_id_idx = record_id_idx + 1;
		 element_id_list.id (record_id_idx) =
		      p_input_element_id_list_ptr -> element_id_list.id (element_id_idx);
	        end;
	  end;
	  p_output_element_id_list_ptr = element_id_list_ptr;
	  element_id_list_ptr = null;
         end;

      if number_of_accepted_records = 0
      then p_code = dm_error_$record_not_found;

      call FINISH;
RETURN:
      return;
%page;
CHECK_VERSION:
   proc (p_received_version, p_expected_version, p_structure_name);
      dcl	    p_received_version     fixed bin (35);
      dcl	    p_expected_version     fixed bin (35);
      dcl	    p_structure_name       char (*);

      if p_received_version ^= p_expected_version
      then call sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
	      "^/Expected version ^d of the ^a structure.
Received version ^d instead.", p_expected_version, p_structure_name, p_received_version);

   end CHECK_VERSION;


CHECK_VERSION_CHAR_8:
   proc (p_given_version, p_correct_version, p_structure_name);

      dcl	    p_structure_name       char (*);
      dcl	    p_given_version	       char (8) aligned;
      dcl	    p_correct_version      char (8) aligned;

      if p_given_version ^= p_correct_version
      then call sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
	      "^/Expected version ""^8a"" of ^a structure; received ""^8a"".", p_correct_version, p_structure_name,
	      p_given_version);

      return;

   end CHECK_VERSION_CHAR_8;
%page;
DELETE_RECORD:
   proc;
   end DELETE_RECORD;
%page;
ADD_TO_ARRAY:
   proc;
      call data_format_util_$cv_string_to_vector (field_table_ptr, work_area_ptr, record_string_ptr, record_string_length,
	 p_id_list_ptr, vector_ptr, p_code);
      if p_code ^= 0
      then call ERROR_RETURN;

      typed_vector_array.number_of_vectors = typed_vector_array.number_of_vectors + 1;
      if typed_vector_array.number_of_vectors <= typed_vector_array.number_of_vector_slots
      then typed_vector_array.vector_slot (typed_vector_array.number_of_vectors) = vector_ptr;
      else
         do;
	  tva_number_of_vector_slots = typed_vector_array.number_of_vectors + VECTOR_SLOT_PAD;
	  tva_number_of_dimensions = typed_vector_array.number_of_dimensions;
	  tva_maximum_dimension_name_length = typed_vector_array.maximum_dimension_name_length;

	  old_tva_ptr = typed_vector_array_ptr;

	  alloc typed_vector_array in (work_area);

	  typed_vector_array.version = TYPED_VECTOR_ARRAY_VERSION_2;
	  typed_vector_array.number_of_vectors = old_tva_ptr -> typed_vector_array.number_of_vectors;
	  typed_vector_array.dimension_table = old_tva_ptr -> typed_vector_array.dimension_table;

	  do vector_slot_idx = 1 to typed_vector_array.number_of_vectors - 1;
	     typed_vector_array.vector_slot (vector_slot_idx) =
		old_tva_ptr -> typed_vector_array.vector_slot (vector_slot_idx);
	  end;

	  typed_vector_array.vector_slot (typed_vector_array.number_of_vectors) = vector_ptr;

	  do vector_slot_idx = vector_slot_idx + 1 to typed_vector_array.number_of_vector_slots;
	     typed_vector_array.vector_slot (vector_slot_idx) = null;
	  end;

	  free old_tva_ptr -> typed_vector_array in (work_area);

         end;
      number_of_accepted_records = typed_vector_array.number_of_vectors;

   end ADD_TO_ARRAY;
%page;
FINISH:
   proc;
      if accepted_record_ptr ^= null
      then free accepted_record;

      if element_id_list_ptr ^= null
      then free element_id_list;

      if record_buffer_ptr ^= addr (local_record_buffer) & record_buffer_ptr ^= null
      then free record_buffer;
   end FINISH;


ERROR_RETURN:
   proc ();

      call FINISH ();
      goto RETURN;

   end ERROR_RETURN;

GET_ELEMENT_ERROR_RETURN:
   proc (p_code);

      dcl	    p_code	       fixed bin (35);
      dcl	    (
	    dm_error_$ci_not_allocated,
	    dm_error_$ci_not_in_collection,
	    dm_error_$no_element
	    )		       fixed bin (35) ext;

      if p_code = dm_error_$no_element
      then p_code = dm_error_$record_not_found;
      if p_code = dm_error_$ci_not_in_collection
      then p_code = dm_error_$record_not_found;
      if p_code = dm_error_$ci_not_allocated
      then p_code = dm_error_$record_not_found;

      call ERROR_RETURN;

   end GET_ELEMENT_ERROR_RETURN;
%page;
%include sub_err_flags;
%page;
%include dm_specification_head;
%page;
%include dm_specification;
%page;
%include dm_interval_list;
%page;
%include dm_rcm_cursor;
%page;
%include dm_rcm_opening_info;
%page;
%include dm_collmgr_entry_dcls;
%page;
%include dm_element_id_list;
%page;
%include vu_typed_vector_array;
   end rcm_process_intervals;
