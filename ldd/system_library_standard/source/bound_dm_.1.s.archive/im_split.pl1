/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION:

          This module splits the "old" control interval (identified by
     p_old_ci).  A new control interval is allocated which becomes the "old"
     control interval's new "left" sibling in the index.  This is referred to
     as the "new" control interval and its identifier is placed in p_new_ci. 

          It is necessary to get the "old" control interval's original "left"
     sibling to update the doubly threaded list of siblings. The
     index_header's count of control intervals is also updated.
*/

/* HISTORY:

Written by Lindsey Spratt, 04/21/82.
Modified:
06/16/82 by Matthew Pierret: Removed the beginning_offset argument from
            calls to collection_manager_$put_element.
08/09/82 by Matthew Pierret: Removed offset and length arguments from calls to
            collection_manager_$get_element.
08/11/82 by Matthew Pierret:  Changed to use the aligned new_ci variable in the
            calling sequence to collection_manager_$allocate_control_interval.
05/10/84 by Matthew Pierret:  Changed to align key_buffer on an even-word
            boundary.
06/07/84 by Matthew Pierret:  Re-named cm_$get_element to cm_$get,
            cm_$put_element to cm_$modify, cm_$allocate_element to cm_$put.
10/28/84 by Lindsey L. Spratt:  Changed to use version 2 of
            index_opening_info.  Changed to base old_common_ci_header and
            new_common_ci_header on automatic pointers instead of directly on
            parameters.
03/07/85 by R. Michael Tague:  Changed opening info version to version 3.
*/

/* format: style2,ind3 */

im_split:
   proc (p_index_opening_info_ptr, p_old_common_ci_header_ptr, p_old_ci, p_new_common_ci_header_ptr, p_new_ci, p_code);

/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_index_opening_info_ptr
			       ptr parameter;
      dcl	    p_old_common_ci_header_ptr
			       ptr;
      dcl	    p_old_ci	       fixed bin (24) unsigned unaligned;
      dcl	    p_new_common_ci_header_ptr
			       ptr;
      dcl	    p_new_ci	       fixed bin (24) unsigned unaligned;
      dcl	    p_code	       fixed bin (35);

/* Automatic */

      dcl	    key_buffer	       (DOUBLE_WORDS_PER_PAGE) fixed bin (71);
      dcl	    key_buffer_length      fixed bin (35) init (BITS_PER_PAGE);
      dcl	    key_length	       fixed bin (35);
      dcl	    new_ci	       fixed bin (24) unsigned;
      dcl	    new_common_ci_header_ptr
			       ptr init (null);
      dcl	    old_common_ci_header_ptr
			       ptr init (null);
      dcl	    prev_ci	       fixed bin (24) unsigned unaligned;

      dcl	    1 local_leaf_ci_header like leaf_ci_header;
      dcl	    1 local_branch_ci_header
			       like branch_ci_header;
      dcl	    splitting_leaf	       bit (1) aligned;
      dcl	    prev_common_header_ptr ptr;

/* Based */

      dcl	    1 old_common_header    like common_ci_header based (old_common_ci_header_ptr);
      dcl	    1 new_common_header    like common_ci_header based (new_common_ci_header_ptr);
      dcl	    1 prev_common_header   like common_ci_header based (prev_common_header_ptr);

/* Builtin */

      dcl	    null		       builtin;
      dcl	    (addr, length, unspec) builtin;

/* Controlled */
/* Constant */

      dcl	    BEGINNING_OF_ELEMENT   init (-1) fixed bin (35) internal static options (constant);
      dcl	    BITS_PER_PAGE	       init (36 * 1024) fixed bin (17) internal static options (constant);
      dcl	    DOUBLE_WORDS_PER_PAGE  init (512) fixed bin (17) internal static options (constant);
      dcl	    myname	       init ("im_split") char (32) varying internal static options (constant);


/* Entry */

      dcl	    sub_err_	       entry () options (variable);

      dcl	    im_init_leaf_ci_header entry (ptr);
      dcl	    im_init_branch_ci_header
			       entry (ptr);

/* External */

      dcl	    error_table_$unimplemented_version
			       fixed bin (35) ext;

/* END OF DECLARATIONS */

      index_opening_info_ptr = p_index_opening_info_ptr;
      call CHECK_VERSION (index_opening_info.version, INDEX_OPENING_INFO_VERSION_3, "index_opening_info");

      old_common_ci_header_ptr = p_old_common_ci_header_ptr;
      new_common_ci_header_ptr = p_new_common_ci_header_ptr;

      splitting_leaf = old_common_header.is_leaf;

/* Allocate a new control interval.  This is the new "left" sibling for p_old_ci. */

      call collection_manager_$allocate_control_interval (index_opening_info.file_opening_id,
	 index_opening_info.collection_id, new_ci, p_code);
      if p_code ^= 0
      then return;
      else p_new_ci = new_ci;

/* The header (leaf or branch) for the new ci must be initialized. */

      if splitting_leaf
      then call im_init_leaf_ci_header (p_new_common_ci_header_ptr);
      else call im_init_branch_ci_header (p_new_common_ci_header_ptr);
      new_common_header.key_range = 0;

/* Thread in with siblings ("old" and "prev"). */

      new_common_header.previous_id = old_common_header.previous_id;
      new_common_header.next_id = p_old_ci;
      old_common_header.previous_id = p_new_ci;
      element_id.index = DEFAULT_INDEX_CONTROL_INTERVAL_HEADER_SLOT;
      element_id.control_interval_id = p_new_ci;
      if splitting_leaf
      then call collection_manager_$put (index_opening_info.file_opening_id, index_opening_info.collection_id,
	      p_new_common_ci_header_ptr, length (unspec (local_leaf_ci_header)), element_id_string, (0), p_code);
      else call collection_manager_$put (index_opening_info.file_opening_id, index_opening_info.collection_id,
	      p_new_common_ci_header_ptr, length (unspec (local_branch_ci_header)), element_id_string, (0), p_code);

/* Adjust the parent of the split node so the old pointer to the split node
becomes a pointer to the new node (the split node's new left sibling).
*/

      if addr (old_common_header.parent_id_string) -> element_id.control_interval_id ^= 0
      then
         do;
	  if addr (old_common_header.parent_id_string) -> element_id.index = 0
	  then
	     do;
	        element_id_string = old_common_header.parent_id_string;
	        element_id.index = DEFAULT_INDEX_CONTROL_INTERVAL_HEADER_SLOT;
	        call collection_manager_$get (index_opening_info.file_opening_id, index_opening_info.collection_id,
		   element_id_string, 0, addr (local_branch_ci_header), length (unspec (local_branch_ci_header)),
		   null, "0"b, branch_ci_header_ptr, 0, p_code);
	        if p_code ^= 0
	        then return;

	        branch_ci_header.low_branch_id = p_new_ci;


	        call collection_manager_$modify (index_opening_info.file_opening_id, index_opening_info.collection_id,
		   branch_ci_header_ptr, length (unspec (local_branch_ci_header)), element_id_string, 0, p_code);
	        if p_code ^= 0
	        then return;
	     end;
	  else
	     do;
	        element_id_string = old_common_header.parent_id_string;
	        call collection_manager_$get (index_opening_info.file_opening_id, index_opening_info.collection_id,
		   element_id_string, 0, addr (key_buffer), key_buffer_length, null, "0"b, branch_key_ptr, key_length,
		   p_code);
	        if p_code ^= 0
	        then return;

	        bk_string_length = key_length - BRANCH_KEY_HEADER_LENGTH_IN_BITS;
	        branch_key.branch_id = p_new_ci;

	        call collection_manager_$modify (index_opening_info.file_opening_id, index_opening_info.collection_id,
		   branch_key_ptr, key_length, element_id_string, 0, p_code);
	        if p_code ^= 0
	        then return;

	     end;
         end;

/* Pick up the "prev" (now the "new" node's "left" sibling) node's header.
This is adjusted to complete the threading in of the "new" node. */

      prev_ci = new_common_header.previous_id;
      if prev_ci > 0
      then
         do;

	  element_id.control_interval_id = prev_ci;
	  element_id.index = DEFAULT_INDEX_CONTROL_INTERVAL_HEADER_SLOT;

	  if splitting_leaf
	  then call collection_manager_$get (index_opening_info.file_opening_id, index_opening_info.collection_id,
		  element_id_string, (0), addr (local_leaf_ci_header), length (unspec (local_leaf_ci_header)), null,
		  "0"b, prev_common_header_ptr, (0), p_code);
	  else call collection_manager_$get (index_opening_info.file_opening_id, index_opening_info.collection_id,
		  element_id_string, (0), addr (local_branch_ci_header), length (unspec (local_branch_ci_header)),
		  null, "0"b, prev_common_header_ptr, (0), p_code);
	  prev_common_header.next_id = p_new_ci;
	  if splitting_leaf
	  then call collection_manager_$modify (index_opening_info.file_opening_id, index_opening_info.collection_id,
		  prev_common_header_ptr, length (unspec (local_leaf_ci_header)), element_id_string, (0), p_code);
	  else call collection_manager_$modify (index_opening_info.file_opening_id, index_opening_info.collection_id,
		  prev_common_header_ptr, length (unspec (local_branch_ci_header)), element_id_string, (0), p_code);
         end;

      return;
%page;
CHECK_VERSION:
   proc (p_received_version, p_expected_version, p_structure_name);
      dcl	    p_received_version     char (8) aligned parameter;
      dcl	    p_expected_version     char (8) aligned parameter;
      dcl	    p_structure_name       char (*);

      if p_received_version ^= p_expected_version
      then call sub_err_ (error_table_$unimplemented_version, myname, "s", null, 0,
	      "^/Expected version ^d of the ^a structure.
Received version ^d instead.", p_expected_version, p_structure_name, p_received_version);

   end CHECK_VERSION;
%page;
%include dm_collmgr_entry_dcls;
%page;
%include dm_im_ci_header;
%page;
%include dm_im_key;
%page;
%include dm_im_opening_info;
%page;
%include dm_element_id;
   end im_split;
