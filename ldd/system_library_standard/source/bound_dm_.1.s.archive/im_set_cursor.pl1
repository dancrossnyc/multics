/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION:

         This  subroutine  sets a cursor to a caller-specified position.  The
     defined positions are:  1) to a "current key value"; 2) to the  beginning
     of the index; 3) to the end of the index.
*/

/* HISTORY:

Written by Lindsey L. Spratt, 02/25/83.
Modified:
05/10/84 by Matthew Pierret:  Changed to align current_key_string on an
            even_word boundary.
*/

/* format: style2,ind3 */

im_set_cursor:
   proc;
      return;

/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_index_cursor_ptr     ptr parameter;
      dcl	    p_key_id_string	       bit (36) aligned parameter;
      dcl	    p_key_string_ptr       ptr parameter;
      dcl	    p_key_string_length    fixed bin (24) parameter;
      dcl	    p_code	       fixed bin (35) parameter;

/* Automatic */

      dcl	    (local_current_key_exists, local_at_beginning_of_index, local_at_end_of_index)
			       bit (1) aligned init ("0"b);
      dcl	    cks_length	       fixed bin (35) init (0);
      dcl	    cksb_length	       fixed bin (35) init (0);
      dcl	    current_key_string_ptr ptr init (null);
      dcl	    index_cursor_area_ptr  ptr init (null);

/* Based */

      dcl	    current_key_string_buffer
			       (cksb_length) fixed bin (71) based (current_key_string_ptr);
      dcl	    current_key_string     bit (cks_length) based (current_key_string_ptr);
      dcl	    index_cursor_area      area based (index_cursor_area_ptr);

/* Builtin */

      dcl	    (divide, null, string) builtin;

/* Constant */

      dcl	    myname	       init ("im_set_cursor") char (32) varying internal static options (constant);
      dcl	    BITS_PER_DOUBLE_WORD   init (72) fixed bin internal static options (constant);

/* Entry */

      dcl	    sub_err_	       entry () options (variable);

/* External */

      dcl	    error_table_$unimplemented_version
			       fixed bin (35) ext;

/* END OF DECLARATIONS */

at_current:
   entry (p_index_cursor_ptr, p_key_id_string, p_key_string_ptr, p_key_string_length, p_code);
      local_current_key_exists = "1"b;
      goto JOIN;

no_current:
   entry (p_index_cursor_ptr, p_key_id_string, p_key_string_ptr, p_key_string_length, p_code);
      goto JOIN;

at_beginning:
   entry (p_index_cursor_ptr, p_key_id_string, p_key_string_ptr, p_key_string_length, p_code);
      local_at_beginning_of_index = "1"b;
      goto JOIN;

at_end:
   entry (p_index_cursor_ptr, p_key_id_string, p_key_string_ptr, p_key_string_length, p_code);
      local_at_end_of_index = "1"b;

JOIN:
      index_cursor_ptr = p_index_cursor_ptr;
      call CHECK_VERSION ((index_cursor.version), (INDEX_CURSOR_VERSION_3), "index_cursor");

      p_code = 0;
      index_cursor_area_ptr = index_cursor.area_ptr;
      cks_length = index_cursor.current_key_string_length;

      string (index_cursor.flags) = "0"b;
      if index_cursor.current_key_string_ptr ^= null & index_cursor.current_key_string_ptr ^= p_key_string_ptr
      then free index_cursor.current_key_string_ptr -> current_key_string in (index_cursor_area);

      if p_key_string_ptr = null
      then index_cursor.current_key_string_ptr = null;
      else if index_cursor.current_key_string_ptr ^= p_key_string_ptr
      then
         do;
	  cks_length = p_key_string_length;
	  cksb_length = divide (cks_length, BITS_PER_DOUBLE_WORD, 35, 0) + 1;
	  alloc current_key_string_buffer in (index_cursor_area);
	  current_key_string = p_key_string_ptr -> current_key_string;
	  index_cursor.current_key_string_ptr = current_key_string_ptr;
	  index_cursor.current_key_string_length = cks_length;
         end;
      index_cursor.flags.is_at_end_of_index = local_at_end_of_index;
      index_cursor.flags.is_at_beginning_of_index = local_at_beginning_of_index;
      index_cursor.flags.current_key_exists = local_current_key_exists;
      index_cursor.key_id_string = p_key_id_string;
      index_cursor.flags.is_valid = "1"b;
      return;
%page;
CHECK_VERSION:
   proc (p_received_version, p_expected_version, p_structure_name);
      dcl	    p_received_version     fixed bin (35);
      dcl	    p_expected_version     fixed bin (35);
      dcl	    p_structure_name       char (*);
      if p_received_version ^= p_expected_version
      then call
	    sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
	    "^/Expected version ^d of the ^a structure.
Received version ^d instead.", p_expected_version, p_structure_name, p_received_version);
   end CHECK_VERSION;
%page;
%include sub_err_flags;
%page;
%include dm_im_cursor;
   end im_set_cursor;
