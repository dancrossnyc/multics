/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION:

         This   subroutine   checks   that  the  provided  cursor's  position
     information is consistent.  If the cursor has a current key  value  which
     doesn't  match  with  the  key  at  the  current key location, then it is
     re-positioned.  Also, if the current key doesn't  exist,  the  cursor  is
     re-positioned.        Re-positioning   is   achieved   by   calling   the
     im_basic_search$reposition entry.

     This module  does  not  attempt  to  validate  the  file  opening  id  or
     collection ids.
*/

/* HISTORY:

Written by Lindsey L. Spratt, 02/23/83.
Modified:
03/18/83 by Matthew Pierret: Changed dm_error_$invalid_cursor to
            $invalid_cursor_position.
04/03/83 by Lindsey L. Spratt:  Converted to use
            data_mgmt_util_$compare_string_to_string instead of
            im_compare_key_and_key.
05/10/84 by Matthew Pierret:  Changed to align key_buffer on an even-word
            boundary.  Changed to compare key_string and the current key with
            a bit-string comparison instead of calling
            data_format_util_$compare_string_to_string.
06/07/84 by Matthew Pierret:  Re-named cm_$get_element to cm_$get.
10/28/84 by Lindsey L. Spratt:  Changed to use version 2 index_opening_info.
            Changed to use ERROR_RETURN.
03/07/85 by R. Michael Tague:  Changed opening info version to version 3.
*/

/* format: style2,ind3 */

im_validate_cursor:
   proc (p_index_opening_info_ptr, p_index_cursor_ptr, p_code);

/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_index_opening_info_ptr
			       ptr parameter;
      dcl	    p_index_cursor_ptr     ptr parameter;
      dcl	    p_code	       fixed bin (35) parameter;

/* Automatic */

      dcl	    reposition_cursor      bit (1) init ("0"b) aligned;
      dcl	    key_buffer	       (DOUBLE_WORDS_PER_PAGE) fixed bin (71);
      dcl	    key_buffer_length      fixed bin (35) init (BITS_PER_PAGE);
      dcl	    key_string_ptr	       ptr init (null);
      dcl	    key_string_length      fixed bin (35) aligned init (0);
      dcl	    first_inequal_field_id fixed bin;
      dcl	    (cursor_key_equal_to_index_key, cursor_key_less_than_index_key)
			       bit (1) init ("0"b) aligned;

/* Based */

      dcl	    key_string	       bit (key_string_length) based (key_string_ptr) aligned;

/* Builtin */

      dcl	    (null, addr, length)   builtin;

/* Constant */

      dcl	    myname	       init ("im_validate_cursor") char (32) varying internal static options (constant);
      dcl	    (
	    BITS_PER_PAGE	       init (1024 * 36),
	    DOUBLE_WORDS_PER_PAGE  init (512),
	    DEFAULT_POSITION       init (0) fixed bin (35),
	    DEFAULT_AREA	       init (null) ptr,
	    ALL_FIELDS	       init (-1) fixed bin
	    )		       internal static options (constant);

/* Entry */

      dcl	    im_basic_search$reposition
			       entry (ptr, ptr, ptr, fixed bin (24), fixed bin (35));

      dcl	    sub_err_	       entry () options (variable);

/* External */

      dcl	    (
	    error_table_$unimplemented_version,
	    dm_error_$invalid_cursor_position,
	    dm_error_$wrong_cursor_type
	    )		       fixed bin (35) ext;

/* END OF DECLARATIONS */

      index_cursor_ptr = p_index_cursor_ptr;
      p_code = 0;

      if index_cursor.type ^= INDEX_CURSOR_TYPE
      then call sub_err_ (dm_error_$wrong_cursor_type, myname, ACTION_CANT_RESTART, null, 0,
	      "^/Expected an index cursor (type ^d). Received a cursor of type ^d, instead.", INDEX_CURSOR_TYPE,
	      index_cursor.type);

      call CHECK_VERSION ((index_cursor.version), (INDEX_CURSOR_VERSION_3), "index_cursor");

      index_opening_info_ptr = p_index_opening_info_ptr;
      call CHECK_VERSION_CHAR (index_opening_info.version, INDEX_OPENING_INFO_VERSION_3, "index_opening_info");

      index_header_ptr = index_opening_info.index_header_ptr;
      call CHECK_VERSION_CHAR (index_header.version, INDEX_HEADER_VERSION_4, "index_header");

      if ^index_cursor.flags.is_valid
      then call ERROR_RETURN (dm_error_$invalid_cursor_position);
      else if index_cursor.flags.is_at_beginning_of_index
      then
         do;
	  if index_cursor.flags.current_key_exists | index_cursor.flags.is_at_end_of_index
	  then
	     do;
	        index_cursor.flags.is_valid = "0"b;
	        call ERROR_RETURN (dm_error_$invalid_cursor_position);
	     end;
	  else if index_cursor.current_key_string_ptr ^= null
	  then reposition_cursor = "1"b;
         end;
      else if index_cursor.flags.is_at_end_of_index
      then
         do;
	  if index_cursor.flags.current_key_exists | index_cursor.flags.is_at_beginning_of_index
	  then
	     do;
	        index_cursor.flags.is_valid = "0"b;
	        call ERROR_RETURN (dm_error_$invalid_cursor_position);
	     end;
	  else if index_cursor.current_key_string_ptr ^= null
	  then reposition_cursor = "1"b;
         end;
      else if index_cursor.current_key_string_ptr = null
      then
         do;
	  index_cursor.flags.is_valid = "0"b;
	  call ERROR_RETURN (dm_error_$invalid_cursor_position);
         end;
      else if ^index_cursor.current_key_exists
      then reposition_cursor = "1"b;
      else
         do;
	  call collection_manager_$get (index_cursor.file_opening_id, index_cursor.collection_id,
	       index_cursor.key_id_string, (DEFAULT_POSITION), addr (key_buffer), key_buffer_length, DEFAULT_AREA, "0"b,
	       key_string_ptr, key_string_length, p_code);
	  if p_code ^= 0
	  then reposition_cursor = "1"b;
	  else if key_string_length ^= index_cursor.current_key_string_length
	  then reposition_cursor = "1"b;
	  else if key_string ^= index_cursor.current_key_string_ptr -> key_string
	  then reposition_cursor = "1"b;
         end;

      if reposition_cursor
      then
         do;
	  p_code = 0;
	  call im_basic_search$reposition (index_opening_info_ptr, index_cursor_ptr,
	       index_cursor.current_key_string_ptr, (index_cursor.current_key_string_length), p_code);
	  if p_code ^= 0
	  then call ERROR_RETURN (p_code);
         end;

MAIN_RETURN:
      return;


ERROR_RETURN:
   proc (er_p_code);
      dcl	    er_p_code	       fixed bin (35) parameter;

      p_code = er_p_code;
      goto MAIN_RETURN;
   end ERROR_RETURN;
%page;
CHECK_VERSION_CHAR:
   proc (p_received_version, p_expected_version, p_structure_name);

      dcl	    (p_expected_version, p_received_version)
			       char (8) aligned parameter;
      dcl	    p_structure_name       char (*) parameter;

      if p_expected_version ^= p_received_version
      then call sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
	      "^/Expected version ^a of the ^a structure.  
Received version ^a, instead.", p_expected_version, p_structure_name, p_received_version);
   end CHECK_VERSION_CHAR;


CHECK_VERSION:
   proc (p_received_version, p_expected_version, p_structure_name);
      dcl	    p_received_version     fixed bin (35);
      dcl	    p_expected_version     fixed bin (35);
      dcl	    p_structure_name       char (*);
      if p_received_version ^= p_expected_version
      then call sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
	      "^/Expected version ^d of the ^a structure.
Received version ^d instead.", p_expected_version, p_structure_name, p_received_version);
   end CHECK_VERSION;
%page;
%include sub_err_flags;
%page;
%include dm_im_cursor;
%page;
%include dm_collmgr_entry_dcls;
%page;
%include dm_im_header;
%page;
%include dm_im_opening_info;
%page;
%include dm_element_id;
   end im_validate_cursor;
