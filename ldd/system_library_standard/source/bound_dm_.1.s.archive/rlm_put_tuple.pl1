/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */

/* format: style2,ind3 */


/****^  HISTORY COMMENTS:
  1) change(86-02-04,Spitzer), approve(86-02-27,MCR7349),
     audit(86-04-28,Newcomb), install(86-05-06,MR12.0-1054):
     Added the list entry which puts multiple tuples. This is the target
     of relation_manager_$put_tuples.  Also changed the "s" to
     ACTION_CANT_RESTART in each sub_err_ call.
  2) change(86-04-24,Pierret), approve(86-04-24,MCR7349),
     audit(86-04-28,Newcomb), install(86-05-06,MR12.0-1054):
     In response to audit comments:
      (1) Added declaration for hbound.
      (2) Changed rlm_put_tuple proc statement to rlm_put_tuple$list.
      (3) Removed dm_range_constants.incl.pl1.
      (4) Declared "constants" as options(constant).
      (5) Used %page instead of FormFeed.
      (6) Added CHECK_PTR_NULL routine to check if pointers are null. Also
      (7) Added null pointer check for relation_cursor_ptr in $list.
      (8) Added use of ERROR_RETURN after call to rlm_opening_info$get.
      (9) Made all returns go through RETURN procedure.
      (10) Moved allocation of simple_typed_vector into INITIALIZE so that only
           one is allocated instead of one for each tuple put.
      (11) Verified type of simple_typed_vector.
      (12) Added freeing of search_specification to FINISH procedure.
  3) change(86-04-25,Pierret), approve(86-04-25,MCR7349),
     audit(86-04-28,Newcomb), install(86-05-06,MR12.0-1054):
     More audit changes:  Added SETUP_CURSORS and SETUP_VECTOR, both called
     from the main procedure after the cleanup handler is established, which
     setup record and index cursors and allocate the simple_typed_vector for
     later use.  Previously cursors were being set up in each invocation of
     PUT_SINGLE_TUPLE and the simple_typed_vector was being alloated before the
     cleanup handler was established.  Also moved the cleanup establishment
     from PUT_SINGLE_TUPLE to the main procedure immediately after each call to
     INITIALIZE.  Removed the SET_RECORD_COLLECTION_CURSOR_PTR and
     SET_CURSOR_PTR_FOR_THIS_INDEX routines, incorporating them into
     SETUP_CURSORS.
     Removed declaration of unused constants.
     Changed the FormFeed in the history section to the literal "FormFeed".
     Changed the call to CHECK_PTR_NULL in $list tuple loop to use the name
     "typed_vector_list.vector_ptr("||ltrim(char(tuple_loop))||")" instead of
     "input_typed_vector_ptr".
                                                   END HISTORY COMMENTS */


/* DESCRIPTION

   This module implements the relation_manager_ entries
   put_tuple and put_tuples.  In both cases if an error other
   than dm_error_$key_duplication is encountered it is the
   responsibility of the caller to roll back the transaction in
   order to restore the relation to a consistent state.  If a
   key duplication is encountered - which is not a real error -
   this module rolls back any modifications it may have made in
   storing the tuple which encounterd the key duplication.  In
   the case of the list entry, processing stops when a key
   duplication occurs, leaving the prior tuples stored intact
   and returning to the caller a list of tuple_ids for the
   tuples stored.
   
   In order to store the keys a simple_typed_vector must be
   built to hold the values of the fields in the key plus a
   field for the tuple id.  One vector is allocated large enough
   to hold all of the attributes in the tuple plus 1 for the
   tuple id.  This then is large enough to hold the largest
   possible key.  Before each key is built,
   simple_typed_vector.value_ptr(*) is set to null.  While
   building the key value_ptrs are set to point to the
   appropriate value supplied in the input_simple_typed_vector
   which describes the tuple being stored.  Those that are left
   null are ignored by the index_manager_ when the key is put.
   When the simple_typed_vector is freed the values to which it
   points must not also be freed as they are under the control
   of the caller.
   
   During ROLLBACK a search_specification is built to identify
   the keys which must be deleted.  Again the values used are
   the values supplied by the caller.  When the specification is
   freed the values to which it points must not also be freed as
   the values are under the control of the caller.

   There are three ways to exit this module.  Normal exit is by
   calling the RETURN routine which does a non-local goto to the 
   label MAIN_RETURN which returns.  Most error exits are by
   calling the ERROR_RETURN routine which sets the error code and
   calls the RETURN routine.  Programming errors are reported via
   sub_err_.  Currently the programming errors detected deal with
   bad arguments supplied by the caller: null pointers and incorrect
   versions of structures.
*/

/* HISTORY PRIOR TO MR11 INSTALLATION:
Written by Matthew Pierret, 05/03/82.
Modified:
09/30/82 by Matthew Pierret:  Changed to use the area pointed to by 
            dm_data_$area_ptr.
10/13/82 by Matthew Pierret:  Changed to correctly set the number_of_dimensions
            in simple_typed_vector before calling im_put_key.
12/07/82 by Lindsey Spratt:  Changed to initialize the simple_typed_vector_ptr
	  to null.
02/01/83 by Lindsey Spratt:  Changed to convert dm_error_$key_duplication to
	  mrds_error_$dup_store for external consumption.
03/04/83 by Matthew Pierret: Changed to use the structures attribute_info,
            relation_opening_info, and index_attribute_map instead of the
            previously kept relation_info structure. Changed CHECK_VERSION
            CHECK_VERSION_FB, and added a new CHECK_VERSION which checks
            char(8)aligned versions. Removed references to dm_data$area_ptr.
            The subroutine get_dm_free_area_ is used to get the pointer to 
            the dm_area; this pointer (dm_area_ptr) is "internal static"
            to reduce on the number of calls to get_dm_free_area_.
03/10/83 by Matthew Pierret: Changed to not assume that all entries in 
            index_attribute_map contain an index.
05/23/83 by Matthew Pierret: Changed to use a relation_cursor. Added an
            ERROR_RETURN subroutine and replaced the 
            "do;call FINISH;return;end" cliche with "call ERROR_RETURN (code)"
            Added a cleanup handler.
06/27/83 by Lindsey L. Spratt:  Changed to use the version 2 relation_cursor.
           Fixed the ROLLBACK procedure to delete keys for the current tuple
            when a keydup is found.
05/29/84 by Matthew Pierret:  Changed to use RELATION_HEADER_VERSION_3.
*/
%page;
rlm_put_tuple$list:
   proc (p_relation_cursor_ptr, p_typed_vector_list_ptr, p_element_id_list_ptr, p_number_of_tuples_put, p_code);


/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_typed_vector_ptr     ptr;
      dcl	    p_typed_vector_list_ptr
			       ptr;
      dcl	    p_element_id_list_ptr  ptr;
      dcl	    p_number_of_tuples_put fixed bin (35);
      dcl	    p_relation_cursor_ptr  ptr;
      dcl	    p_tuple_id	       bit (36) aligned;
      dcl	    p_code	       fixed bin (35);

/* Automatic */

      dcl	    input_simple_typed_vector_ptr
			       ptr;
      dcl	    (record_collection_cursor_ptr, index_cursor_ptr)
			       ptr init (null);
      dcl	    key_field_idx	       fixed bin;
      dcl	    index_idx	       fixed bin;
      dcl	    tuple_id	       bit (36) aligned;
      dcl	    tuple_loop	       fixed bin (35);

/* Based */

      dcl	    dm_area	       area (sys_info$max_seg_size) based (dm_area_ptr);

/* Builtin */

      dcl	    (addr, char, hbound, ltrim, null)
			       builtin;

/* Condition */

      dcl	    cleanup	       condition;

/* Constant */

      dcl	    myname	       init ("rlm_put_tuple") char (32) varying internal static options (constant);
      dcl	    RANDOM_RECORD_ID       init ("000000000000"b3) bit (36) aligned internal static options (constant);

/* Entry */

      dcl	    get_dm_free_area_      entry () returns (ptr);
      dcl	    rlm_opening_info$get   entry (bit (36) aligned, ptr, fixed bin (35));
      dcl	    index_manager_$put_key entry (ptr, ptr, fixed bin (35));
      dcl	    index_manager_$create_cursor
			       entry (bit (36) aligned, bit (36) aligned, ptr, ptr, fixed bin (35));
      dcl	    sub_err_	       entry () options (variable);

/* External */

      dcl	    error_table_$bad_arg   ext fixed bin (35);
      dcl	    dm_error_$key_duplication
			       ext fixed bin (35);
      dcl	    error_table_$unimplemented_version
			       ext fixed bin (35);
      dcl	    sys_info$max_seg_size  ext fixed bin (35);

/* Static */

      dcl	    dm_area_ptr	       ptr static init (null);

/* END OF DECLARATIONS */
%page;
/* format: ^indblkcom,indcomtxt */

/* Entry statement repeated for reader.

   list: entry
   (p_relation_cursor_ptr, p_typed_vector_list_ptr, p_element_id_list_ptr, p_number_of_tuples_put, p_code);
   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *   */
      p_code = 0;
      p_number_of_tuples_put = 0;

      relation_cursor_ptr = p_relation_cursor_ptr;
      call CHECK_PTR_NULL ("relation_cursor_ptr", relation_cursor_ptr);
      call CHECK_VERSION ("relation_cursor", (relation_cursor.version), (RELATION_CURSOR_VERSION_2));

      typed_vector_list_ptr = p_typed_vector_list_ptr;
      call CHECK_PTR_NULL ("typed_vector_list_ptr", typed_vector_list_ptr);
      call CHECK_VERSION_FB ("typed_vector_list", (typed_vector_list.version), (TYPED_VECTOR_LIST_VERSION_1));

      element_id_list_ptr = p_element_id_list_ptr;
      call CHECK_PTR_NULL ("element_id_list_ptr", element_id_list_ptr);
      call CHECK_VERSION_FB ("element_id_list", element_id_list.version, ELEMENT_ID_LIST_VERSION_1);
      if element_id_list.number_of_elements < typed_vector_list.number_of_vectors
      then call sub_err_ (error_table_$bad_arg, myname, ACTION_CANT_RESTART, null, 0,
	      "There were not enough entries in the element_id_list structure to contain the tuple id's of the tuples stored."
	      );

      call INITIALIZE;

      on cleanup call FINISH;

      call SETUP_CURSORS;
      call SETUP_VECTOR;

      element_id_list.id (*) = "0"b;

      do tuple_loop = 1 to typed_vector_list.number_of_vectors;
         input_simple_typed_vector_ptr = typed_vector_list.vector_ptr (tuple_loop);

         call CHECK_PTR_NULL ("typed_vector_list.vector_ptr(" || ltrim (char (tuple_loop)) || ")",
	    input_simple_typed_vector_ptr);

         call CHECK_VERSION_FB ("simple_typed_vector", (input_simple_typed_vector_ptr -> simple_typed_vector.type),
	    (SIMPLE_TYPED_VECTOR_TYPE));

         call PUT_SINGLE_TUPLE;
         element_id_list.id (tuple_loop) = tuple_id;

         p_number_of_tuples_put = p_number_of_tuples_put + 1;
      end;					/* do tuple_loop */

      call RETURN;
%page;
single:
   entry (p_relation_cursor_ptr, p_typed_vector_ptr, p_tuple_id, p_code);


      p_code = 0;
      p_tuple_id = "0"b;

      input_simple_typed_vector_ptr = p_typed_vector_ptr;
      call CHECK_PTR_NULL ("typed_vector_ptr", input_simple_typed_vector_ptr);
      call CHECK_VERSION_FB ("simple_typed_vector", (input_simple_typed_vector_ptr -> simple_typed_vector.type),
	 (SIMPLE_TYPED_VECTOR_TYPE));

      relation_cursor_ptr = p_relation_cursor_ptr;
      call CHECK_PTR_NULL ("relation_cursor_ptr", relation_cursor_ptr);
      call CHECK_VERSION ("relation_cursor", (relation_cursor.version), (RELATION_CURSOR_VERSION_2));

      call INITIALIZE;

      on cleanup call FINISH;

      call SETUP_CURSORS;
      call SETUP_VECTOR;

      call PUT_SINGLE_TUPLE;

      p_tuple_id = tuple_id;

      call RETURN ();

MAIN_RETURN:
      return;

RETURN:
   proc ();
      call FINISH ();
      goto MAIN_RETURN;
   end RETURN;


ERROR_RETURN:
   proc (er_code);

      dcl	    er_code	       fixed bin (35);

      p_code = er_code;
      call RETURN;

   end ERROR_RETURN;
%page;
PUT_SINGLE_TUPLE:
   proc ();

/*  Put the tuple in the record collection. */

      call record_manager_$put_record_by_id (RANDOM_RECORD_ID, input_simple_typed_vector_ptr,
	 (0) /* relation_header.minimum_free_space */, record_collection_cursor_ptr, tuple_id, p_code);
      if p_code ^= 0
      then call ERROR_RETURN (p_code);

   /*** Store a key for this tuple for each index in the relation.  Construct
        the keys based on the values in the input_simple_typed_vector.  If
        a duplication error results, back out the modifications by deleting the
        keys and tuple already stored. */


PUT_KEY_FOR_EACH_INDEX_LOOP:
      do index_idx = 1 to index_attribute_map.number_of_indices;
         if index_attribute_map.index (index_idx).number_of_attributes > 0
         then
	  do;
	     simple_typed_vector.number_of_dimensions = index_attribute_map.index (index_idx).number_of_attributes + 1;
	     simple_typed_vector.value_ptr = null;
	     do key_field_idx = 1 to index_attribute_map.index (index_idx).number_of_attributes;
	        simple_typed_vector.value_ptr (key_field_idx) =
		   input_simple_typed_vector_ptr
		   -> simple_typed_vector
		   .value_ptr (index_attribute_map.index (index_idx).attribute_id (key_field_idx));
	     end;

	     simple_typed_vector.value_ptr (key_field_idx) = addr (tuple_id);
						/* The last field is always the tuple id */

	     index_cursor_ptr = index_cursor_array.cursor_ptr (index_idx);

	     call index_manager_$put_key (simple_typed_vector_ptr, index_cursor_ptr, p_code);
	     ;
	     if p_code ^= 0
	     then
	        do;
		 if p_code = dm_error_$key_duplication
		 then call ROLLBACK (index_idx - 1);
		 call ERROR_RETURN (p_code);
	        end;
	  end;

      end PUT_KEY_FOR_EACH_INDEX_LOOP;

      return;
   end PUT_SINGLE_TUPLE;
%page;
INITIALIZE:
   proc ();

      if dm_area_ptr = null
      then dm_area_ptr = get_dm_free_area_ ();

/* Get and verify the opening info structures necessary for this operation. */

      call rlm_opening_info$get (relation_cursor.file_opening_id, relation_opening_info_ptr, p_code);
      if p_code ^= 0
      then call ERROR_RETURN (p_code);			/* relation isn't open */

      call CHECK_VERSION ("relation_opening_info", relation_opening_info.version, RELATION_OPENING_INFO_VERSION_2);

      relation_header_ptr = relation_opening_info.relation_header_ptr;
      call CHECK_VERSION ("relation_header", relation_header.version, RELATION_HEADER_VERSION_3);

      index_attribute_map_ptr = relation_opening_info.index_attribute_map_ptr;
      call CHECK_VERSION ("index_attribute_map", index_attribute_map.version, INDEX_ATTRIBUTE_MAP_VERSION_2);

      index_cursor_array_ptr = relation_opening_info.per_process.index_cursor_array_ptr;
      call CHECK_VERSION ("index_cursor_array", index_cursor_array.version, INDEX_CURSOR_ARRAY_VERSION_1);

      search_specification_ptr = null;			/* for FINISH */
      simple_typed_vector_ptr = null;			/* for FINISH */
      record_collection_cursor_ptr = null;		/* for FINISH */

      return;
   end INITIALIZE;


FINISH:
   proc ();

      if simple_typed_vector_ptr ^= null
      then free simple_typed_vector in (dm_area);

      if search_specification_ptr ^= null ()
      then free search_specification in (dm_area);

      if record_collection_cursor_ptr ^= null
      then call record_manager_$destroy_cursor (record_collection_cursor_ptr, (0));

   end FINISH;
%page;
      ;
ROLLBACK:
   proc (rb_p_number_of_keys);

      dcl	    rb_p_number_of_keys    fixed bin;
      dcl	    rb_index_idx	       fixed bin (17);
      dcl	    rb_key_field_idx       fixed bin (17);
      dcl	    rb_code	       fixed bin (35);
      dcl	    rb_index_cursor_ptr    ptr;
      dcl	    index_manager_$delete_key
			       entry (ptr, ptr, ptr, fixed bin (35), fixed bin (35));

      ss_number_of_and_groups = 1;
      ss_maximum_number_of_constraints = index_attribute_map.maximum_number_of_attributes_per_index + 1;
      alloc search_specification in (dm_area);
      search_specification.head.version = SPECIFICATION_VERSION_4;
      search_specification.head.subset_specification_ptr = null;
      search_specification.head.type = ABSOLUTE_SEARCH_SPECIFICATION_TYPE;
      search_specification.head.pad = "0"b;

/* Set the operator code to "=" for all constraints. */

      search_specification.and_group (1).constraint (*).operator_code = EQUAL_OPERATOR_CODE;
      search_specification.and_group (1).constraint (*).value_field_id = -1;

/* All of the key searches have the same record id, so the value ptr is set
   outside of the RB_INDEX_LOOP.  The field_id of the record id field changes
   for each index, so this must be set inside the loop.
*/

      search_specification.and_group (1).constraint (1).value_ptr = addr (tuple_id);

RB_INDEX_LOOP:
      do rb_index_idx = 1 to rb_p_number_of_keys;
         if index_attribute_map.index (rb_index_idx).number_of_attributes > 0
         then
RB_DELETE_KEY:
	  do;
	     search_specification.and_group (1).number_of_constraints =
		index_attribute_map.index (rb_index_idx).number_of_attributes + 1;
	     search_specification.and_group (1).constraint (1).field_id =
		search_specification.and_group (1).number_of_constraints;
RB_KEY_FIELD_LOOP:
	     do rb_key_field_idx = 1 to index_attribute_map.index (rb_index_idx).number_of_attributes;
	        search_specification.and_group (1).constraint (rb_key_field_idx + 1).field_id = rb_key_field_idx;
	        search_specification.and_group (1).constraint (rb_key_field_idx + 1).value_ptr =
		   input_simple_typed_vector_ptr
		   -> simple_typed_vector
		   .value_ptr (index_attribute_map.index (rb_index_idx).attribute_id (rb_key_field_idx));
	     end RB_KEY_FIELD_LOOP;

	     rb_index_cursor_ptr = index_cursor_array (rb_index_idx).cursor_ptr;

	     call index_manager_$delete_key (search_specification_ptr, dm_area_ptr, rb_index_cursor_ptr, (0), rb_code);
	     ;
	  end RB_DELETE_KEY;
      end RB_INDEX_LOOP;


      call record_manager_$delete_record_by_id (tuple_id, record_collection_cursor_ptr, rb_code);

      free search_specification in (dm_area);
      return;

   end ROLLBACK;
%page;
CHECK_VERSION:
   proc (p_structure_name, p_received_version, p_expected_version);

      dcl	    p_received_version     char (8) aligned;
      dcl	    p_expected_version     char (8) aligned;
      dcl	    p_structure_name       char (*);

      if p_received_version ^= p_expected_version
      then call sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
	      "^/Expected version ^8a of the ^a structure.
Received version ^8a, instead.", p_expected_version, p_structure_name, p_received_version);

   end CHECK_VERSION;

CHECK_VERSION_FB:
   proc (p_structure_name, p_received_version, p_expected_version);

      dcl	    p_received_version     fixed bin (35);
      dcl	    p_expected_version     fixed bin (35);
      dcl	    p_structure_name       char (*);

      if p_received_version ^= p_expected_version
      then call sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
	      "^/Expected version ^d of the ^a structure.
Received version ^d, instead.", p_expected_version, p_structure_name, p_received_version);

   end CHECK_VERSION_FB;

CHECK_PTR_NULL:
   proc (cpn_p_ptr_name, cpn_p_ptr);

      dcl	    cpn_p_ptr_name	       char (*) parameter;
      dcl	    cpn_p_ptr	       ptr;

      if cpn_p_ptr = null ()
      then call sub_err_ (error_table_$bad_arg, myname, ACTION_CANT_RESTART, null, 0, "A null value was supplied for ^a.",
	      cpn_p_ptr_name);

   end CHECK_PTR_NULL;
%page;
SETUP_CURSORS:
   proc ();

/* This routine sets up a cursor for the record collection and one cursor
   for each index of the relation.  The record cursor is always created
   (and deleted later in FINISH).  An index cursor is created for each
   index which needs one, that is for each that does not already have a
   cursor in the index_cursor_array.  This array is part of the relation's
   opening info.  When a cursor is created for an index to be used internally
   a pointer to the cursor is put in the index_cursor_array so that it can be
   used again later.  No index cursors created here will be destroyed. */

      dcl	    sc_code	       fixed bin (35) init (0);
      dcl	    sc_index_idx	       fixed bin;

      call record_manager_$create_cursor (relation_cursor.file_opening_id, relation_header.record_collection_id,
	 relation_cursor.work_area_ptr, record_collection_cursor_ptr, sc_code);
      if sc_code ^= 0
      then call ERROR_RETURN (sc_code);

      do sc_index_idx = 1 to hbound (index_attribute_map.index, 1);
         if index_attribute_map.index (sc_index_idx).number_of_attributes > 0
         then if index_cursor_array.cursor_ptr (sc_index_idx) = null
	    then
	       do;
		call index_manager_$create_cursor (relation_cursor.file_opening_id,
		     index_attribute_map.index (sc_index_idx).collection_id, dm_area_ptr,
		     index_cursor_array.cursor_ptr (sc_index_idx), sc_code);
		if sc_code ^= 0
		then call ERROR_RETURN (sc_code);
	       end;
      end;

   end SETUP_CURSORS;
%page;
SETUP_VECTOR:
   proc ();

      stv_number_of_dimensions = index_attribute_map.maximum_number_of_attributes_per_index + 1;
      alloc simple_typed_vector in (dm_area);
      simple_typed_vector.type = SIMPLE_TYPED_VECTOR_TYPE;

   end SETUP_VECTOR;
%page;
%include dm_element_id_list;
%page;
%include dm_operator_constants;
%page;
%include dm_rcdmgr_entry_dcls;
%page;
%include dm_rlm_opening_info;
%page;
%include dm_rlm_header;
%page;
%include dm_rlm_index_attr_map;
%page;
%include dm_rlm_idx_cursor_array;
%page;
%include dm_rlm_cursor;
%page;
%include dm_specification_head;
%page;
%include dm_specification;
%page;
%include dm_typed_vector_list;
%page;
%include vu_typed_vector;
%page;
%include sub_err_flags;

   end rlm_put_tuple$list;
