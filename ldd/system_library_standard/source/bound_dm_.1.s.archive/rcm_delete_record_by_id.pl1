/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */


/* DESCRIPTION

          Deletes the records specified by the given identifiers. The cursor is
     positioned to the record following the last record deleted.

          This routine always gets the record collection's opening information.
     A later performance gain can be achieved by adding single_info and
     array_info entry points that take pointers to opening information.
*/

/* HISTORY:
Written by Matthew Pierret 04/23/82.
Modified:
08/20/82 by Matthew Pierret:  Made enter-able only by the entry points single 
            and array.  Added use of rm_get_opening_info, which is in reality
            simply the field_table.
03/16/83 by Matthew Pierret:  Changed to use the record_collection_opening_info
            structure returned from rm_get_opening_info.
            Changed to translate some collection_manager_ errors to
            dm_error_$record_not_found.
03/24/83 by Lindsey Spratt:  Removed references to the field_table and the
	  record_collection_opening_info structures.
07/28/83 by Matthew Pierret: Changed name from rm_delete_record_by_id to
            rcm_delete_record_by_id, and all rm_ prefixes to rcm_.
04/12/84 by Lee Baldwin:  Renamed the parameters to coincide with all the other
            rcm_XX routines.  Changed the declaration of 
            number_of_records_processed to fixed bin (35). (was (17)).
06/06/84 by Matthew Pierret: Re-named cm_$free_element to cm_$delete.
*/
/* format: style2,ind3 */
%page;
/* format: style2,ind3 */

rcm_delete_record_by_id:
   proc ();

      call
         sub_err_ (dm_error_$programming_error, myname, ACTION_CANT_RESTART, null, 0, "^/^a$^a is not a valid entrypoint",
         myname, myname);


/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_record_cursor_ptr    ptr;
      dcl	    p_element_id_list_ptr  ptr;
      dcl	    p_record_id	       bit (36) aligned;
      dcl	    p_number_of_records_processed
			       fixed bin (35);
      dcl	    p_code	       fixed bin (35);

/* Automatic */

      dcl	    delete_single_record   bit (1) aligned init ("0"b);
      dcl	    record_id	       bit (36) aligned;
      dcl	    record_idx	       fixed bin;

/* Based */
/* Builtin */

      dcl	    (null, hbound)	       builtin;

/* Controlled */
/* Constant */

      dcl	    BITS_PER_CHAR	       init (9) fixed bin internal static options (constant);
      dcl	    myname	       init ("rcm_delete_record_by_id") char (32) varying internal static
			       options (constant);

/* Entry */

      dcl	    rcm_get_opening_info   entry (bit (36) aligned, bit (36) aligned, ptr, fixed bin (35));
      dcl	    sub_err_	       entry () options (variable);

/* External */

      dcl	    (
	    dm_error_$programming_error,
	    dm_error_$record_not_found,
	    dm_error_$wrong_cursor_type,
	    error_table_$unimplemented_version
	    )		       ext fixed bin (35);

/* END OF DECLARATIONS */

single:
   entry (p_record_id, p_record_cursor_ptr, p_code);

      delete_single_record = "1"b;
      record_id = p_record_id;

      goto JOIN;


array:
   entry (p_element_id_list_ptr, p_record_cursor_ptr, p_number_of_records_processed, p_code);

      element_id_list_ptr = p_element_id_list_ptr;

      call CHECK_VERSION ((element_id_list.version), (ELEMENT_ID_LIST_VERSION_1), "element_id_list");

      record_id = element_id_list.id (1);
      delete_single_record = "0"b;

      goto JOIN;

%page;
JOIN:
      p_code = 0;

      record_cursor_ptr = p_record_cursor_ptr;

      call CHECK_VERSION ((record_cursor.version), (RECORD_CURSOR_VERSION_2), "record_cursor");

      if record_cursor.type ^= RECORD_CURSOR_TYPE
      then call
	    sub_err_ (dm_error_$wrong_cursor_type, myname, ACTION_CANT_RESTART, null, 0,
	    "^/Expected record cursor, type ^d; received type ^d.", RECORD_CURSOR_TYPE, record_cursor.type);


      record_cursor.flags.position_is_valid = "0"b;

      call
         collection_manager_$delete (record_cursor.file_opening_id, record_cursor.collection_id, record_id, "0"b, p_code);
      if p_code ^= 0
      then call ERROR_RETURN (p_code);


      if ^delete_single_record
      then
DELETE_REST_OF_RECORDS:
         do;
	  p_number_of_records_processed = 1;

	  do record_idx = 2 to hbound (element_id_list.id, 1);

	     record_id = element_id_list.id (record_idx);

	     call
	        collection_manager_$delete (record_cursor.file_opening_id, record_cursor.collection_id, record_id,
	        ("0"b), p_code);
	     if p_code ^= 0
	     then call ERROR_RETURN (p_code);

	     p_number_of_records_processed = p_number_of_records_processed + 1;

	  end;
         end DELETE_REST_OF_RECORDS;

      record_cursor.record_id = record_id;
      record_cursor.flags.position_is_valid = "1"b;

MAIN_RETURN:
      return;

%page;
CHECK_VERSION:
   proc (p_received_version, p_expected_version, p_structure_name);

      dcl	    p_received_version     fixed bin (35);
      dcl	    p_expected_version     fixed bin (35);
      dcl	    p_structure_name       char (*);

      if p_received_version ^= p_expected_version
      then call
	    sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
	    "^/Expected version ^d of the ^a structure.
Received version ^d, instead.", p_expected_version, p_structure_name, p_received_version);

   end CHECK_VERSION;
%page;
ERROR_RETURN:
   proc (p_code);

      dcl	    p_code	       fixed bin (35);
      dcl	    (
	    dm_error_$ci_not_allocated,
	    dm_error_$ci_not_in_collection,
	    dm_error_$no_element
	    )		       fixed bin ext;

      if p_code = dm_error_$no_element
      then p_code = dm_error_$record_not_found;
      if p_code = dm_error_$ci_not_in_collection
      then p_code = dm_error_$record_not_found;
      if p_code = dm_error_$ci_not_allocated
      then p_code = dm_error_$record_not_found;

      goto MAIN_RETURN;

   end ERROR_RETURN;
%page;
%include dm_rcm_cursor;
%page;
%include dm_element_id_list;
%page;
%include sub_err_flags;
%page;
%include dm_collmgr_entry_dcls;

   end rcm_delete_record_by_id;
