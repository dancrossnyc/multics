/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* format: style2,ind3 */

rlm_destroy_cursor:
   proc (p_relation_cursor_ptr, p_work_area_ptr, p_code);

/* DESCRIPTION:
          This routine frees the storage occupied by a relation_cursor,
     destroys the index or record cursor hanging off the relation_cursor
     by calling index/record_manager_$destroy_cursor and frees the
     specification structure hanging off the relation_cursor.
*/

/* HISTORY:
Written by Matthew Pierret, 04/04/83.
Modified:
06/24/83 by Lindsey L. Spratt:  Changed to use version 2 of the
            relation_cursor.
07/28/83 by Matthew Pierret: Changed name of dm_rm_cursor.incl.pl1 to
            dm_rcm_cursor.incl.pl1.
11/01/84 by Stanford S. Cox: CHECK_VERSION: Changed for new sub_err_ syntax
*/

/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_work_area_ptr	       ptr;		/*The area in which the cursor was
                                    created.*/
						/*For vfile_relmgr_ compatibility only */
      dcl	    p_relation_cursor_ptr  ptr;		/*A pointer to a record or index cursor*/
      dcl	    p_code	       fixed bin (35);	/*Status code*/

/* Automatic */
/* Based */

      dcl	    cursor_work_area       area (9999) based;

/* Builtin */

      dcl	    null		       builtin;

/* Constant */

      dcl	    myname	       init ("rlm_destroy_cursor") char (32) varying internal static options (constant);

/* Entry */

      dcl	    index_manager_$destroy_cursor
			       entry (ptr, fixed bin (35));
      dcl	    record_manager_$destroy_cursor
			       entry (ptr, fixed bin (35));
      dcl	    sub_err_	       entry () options (variable);

/* External */

      dcl	    error_table_$unimplemented_version
			       fixed bin (35) ext;

/* END OF DECLARATIONS */

      p_code = 0;
      relation_cursor_ptr = p_relation_cursor_ptr;
      call CHECK_VERSION ("relation_cursor", relation_cursor.version, RELATION_CURSOR_VERSION_2);

      if relation_cursor.current.cursor_ptr ^= null
      then if relation_cursor.current.cursor_ptr -> record_cursor.type = RECORD_CURSOR_TYPE
	 then call record_manager_$destroy_cursor (relation_cursor.current.cursor_ptr, p_code);
	 else if relation_cursor.current.cursor_ptr -> index_cursor.type = INDEX_CURSOR_TYPE
	 then call index_manager_$destroy_cursor (relation_cursor.current.cursor_ptr, p_code);
	 else ;

      if relation_cursor.current.specification_ptr ^= null
      then if relation_cursor.current.specification_ptr -> specification_head.type = ABSOLUTE_NUMERIC_SPECIFICATION_TYPE
	      | relation_cursor.current.specification_ptr -> specification_head.type
	      = RELATIVE_NUMERIC_SPECIFICATION_TYPE
	 then free relation_cursor.current.specification_ptr
		 -> numeric_specification in (relation_cursor.work_area_ptr -> cursor_work_area);
	 else if relation_cursor.current.specification_ptr -> specification_head.type
		 = ABSOLUTE_SEARCH_SPECIFICATION_TYPE
		 | relation_cursor.current.specification_ptr -> specification_head.type
		 = RELATIVE_SEARCH_SPECIFICATION_TYPE
	 then free relation_cursor.current.specification_ptr
		 -> search_specification in (relation_cursor.work_area_ptr -> cursor_work_area);

      p_relation_cursor_ptr = null;

      free relation_cursor in (relation_cursor.work_area_ptr -> cursor_work_area);


      return;
%page;
CHECK_VERSION:
   proc (p_structure_name, p_received_version, p_expected_version);

      dcl	    p_received_version     char (8) aligned;
      dcl	    p_expected_version     char (8) aligned;
      dcl	    p_structure_name       char (*);

      if p_received_version ^= p_expected_version
      then call sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
	      "^/Expected version ^8a of the ^a structure.
Received version ^8a, instead.", p_expected_version, p_structure_name, p_received_version);

   end CHECK_VERSION;
%page;
%include dm_rlm_cursor;
%page;
%include dm_rcm_cursor;
%page;
%include dm_im_cursor;
%page;
%include dm_specification_head;
%page;
%include dm_specification;
%page;
%include sub_err_flags;

   end rlm_destroy_cursor;
