/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(86-02-27,Pierret), approve(86-02-27,MCR7340),
     audit(86-04-28,Newcomb), install(86-05-06,MR12.0-1054):
     Changed to be sure that file_create_info_ptr is set before using it.
  2) change(86-04-22,Pierret), approve(86-04-22,MCR7340),
     audit(86-04-28,Newcomb), install(86-05-06,MR12.0-1054):
     Removed dm_hdr_collection_id.incl.pl1, ltrim, rtrim, string as they were
     not used.  Added addr builtin as it is used but was not declared.
                                                   END HISTORY COMMENTS */


/* DESCRIPTION
*/

/* HISTORY:
Written by Matthew Pierret, 05/01/82.
Modified:
06/18/82 by Matthew Pierret: Changed to use collection_manager_$create_file
            instead of file_manager_$create.
09/20/82 by Matthew Pierret:  Changed to use attribute_descriptor_list.
10/12/82 by Matthew Pierret:  Changed to set the maximum number of attributes
            per index in the index_attribute_map to be the minimum of the
            actual number of attributes and 
            INITIAL_NUMBER_OF_ATTRIBUTES_PER_INDEX.
10/20/82 by Matthew Pierret:  Converted to use file_manager_, cm_$create_file
            instead of cm_$create_page_file, file_create_info instead of
            pf_creation_info, REL_CREATION_INFO_VERION_2.
02/17/83 by Matthew Pierret:  Changed to always use typed_vector_array
            instead of attribute_descriptor_list.
02/28/83 by Matthew Pierret:  Split index_attribute_map into attribute_info
            and index_attribute_map. Changed to use relation_opening_info,
            with pointers to relation_header, attribute_info, and
            index_attribute_map, and to update these structures using
            rlm_update_opening_info.
03/14/83 by Lindsey Spratt:  Fixed to initialize the relation_opening_info_ptr
	  to null.
03/21/83 by Matthew Pierret: Fixed to create record_cursor.
08/09/83 by Matthew Pierret:  Removed the obsolete dm_data_$area_ptr.
08/18/83 by Lindsey L. Spratt:  Fixed to always set the
            attribute_descriptor_list_ptr.
05/20/84 by Matthew Pierret:  Changed to use (ESM CISM)_INFO_VERSION_1.
08/20/84 by Matthew C. Pierret:  Changed to use FILE_CREATE_INFO_VERSION_2.
            Also changed to use automatic structures instead of allocating
            based ones for the structures pointed to by rel_creation_info.
            This fixed a bug where in some cases they weren't being freed.
            Removed the un-used $descriptor_list entry.
10/30/84 by Stanford S. Cox:  INIT_* - Added structure version asgn. 
11/26/84 by Stanford S. Cox:  IDFCI: Add init of file_create_info.mbz_2.
05/02/85 by S. Cox: Init to null the *info_ptr which may be init by INIT_*.
            This fixes a bug where a null rel_creation_info_ptr didn't work.
*/

/* format: style2,ind3 */

rlm_create_relation:
   proc ();

      return;					/* Not a valid entry point. */


/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_rel_dir	       char (*);
      dcl	    p_rel_name	       char (*);
      dcl	    p_rel_creation_info_ptr
			       ptr;
      dcl	    p_rel_opening_id       bit (36) aligned;
      dcl	    p_record_collection_id bit (36) aligned;
      dcl	    p_code	       fixed bin (35);
      dcl	    p_typed_vector_array_ptr
			       ptr;

/* Automatic */

      dcl	    1 my_file_create_info  aligned like file_create_info;
      dcl	    1 my_basic_esm_info    aligned like basic_esm_info;
      dcl	    1 my_unblocked_cism_info
			       aligned like unblocked_cism_info;
      dcl	    (record_collection_id, rel_opening_id)
			       bit (36) aligned init ("0"b);
      dcl	    typed_vector_array_supplied
			       bit (1) aligned;
      dcl	    record_cursor_ptr      ptr init (null);

/* Static */

      dcl	    dm_area_ptr	       ptr static init (null ());

/* Based */

      dcl	    dm_area	       area (sys_info$max_seg_size) based (dm_area_ptr);

/* Builtin */

      dcl	    (addr, hbound, unspec, min, null)
			       builtin;

/* Condition */

      dcl	    cleanup	       condition;

/* Constant */

      dcl	    myname	       init ("rlm_create_relation") char (19) int static options (constant);
      dcl	    BYTES_PER_WORD	       init (4) fixed bin;

/* Entry */

      dcl	    file_manager_$delete_close
			       entry (bit (36) aligned, fixed bin (35));
      dcl	    get_dm_free_area_      entry () returns (ptr);
      dcl	    get_ring_	       entry () returns (fixed bin (3));
      dcl	    rlm_opening_info$free  entry (ptr, fixed bin (35));
      dcl	    rlm_opening_info$init  entry (bit (36) aligned, ptr, fixed bin (35));
      dcl	    rlm_update_opening_info$attribute_info
			       entry (ptr, ptr, fixed bin (35));
      dcl	    rlm_update_opening_info$index_attribute_map
			       entry (ptr, ptr, fixed bin (35));
      dcl	    rlm_update_opening_info$increment_openings
			       entry (ptr, fixed bin (35));
      dcl	    rlm_update_opening_info$relation_header
			       entry (ptr, ptr, fixed bin (35));
      dcl	    vector_util_$init_typed_vector_array
			       entry options (variable);
      dcl	    ioa_$rsnnl	       entry options (variable);
      dcl	    sub_err_	       entry options (variable);

/* External */

      dcl	    error_table_$unimplemented_version
			       ext fixed bin (35);
      dcl	    dm_error_$unimplemented_cism
			       ext fixed bin (35);
      dcl	    dm_error_$unimplemented_esm
			       ext fixed bin (35);
      dcl	    sys_info$max_seg_size  ext fixed bin;

/* END OF DECLARATIONS */

array:
   entry (p_rel_dir, p_rel_name, p_rel_creation_info_ptr, p_typed_vector_array_ptr, p_rel_opening_id,
        p_record_collection_id, p_code);

      typed_vector_array_ptr = p_typed_vector_array_ptr;
      call CHECK_VERSION ((typed_vector_array.version), (TYPED_VECTOR_ARRAY_VERSION_2), "typed_vector_array");

      basic_esm_info_ptr, unblocked_cism_info_ptr, file_create_info_ptr, relation_opening_info_ptr = null;

      if dm_area_ptr = null
      then dm_area_ptr = get_dm_free_area_ ();

      p_code = 0;
      p_rel_opening_id = "0"b;
      p_record_collection_id = "0"b;


      on cleanup call FINISH;

      if p_rel_creation_info_ptr ^= null
      then
         do;
	  rel_creation_info_ptr = p_rel_creation_info_ptr;
	  call CHECK_VERSION ((rel_creation_info.version), (REL_CREATION_INFO_VERSION_2), "rel_creation_info");

	  file_create_info_ptr = rel_creation_info.file_create_info_ptr;
	  basic_esm_info_ptr = rel_creation_info.esm_info_ptr;
	  unblocked_cism_info_ptr = rel_creation_info.cism_info_ptr;

         end;

      if file_create_info_ptr = null
      then call INIT_DEFAULT_FILE_CREATE_INFO (file_create_info_ptr);
      else if file_create_info.version ^= FILE_CREATE_INFO_VERSION_2
      then call sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
	      "^/Expected version ^a of the file_create_info structure.^/Received version ^a",
	      FILE_CREATE_INFO_VERSION_2, file_create_info.version);

      if basic_esm_info_ptr = null
      then call INIT_DEFAULT_ESM_INFO (basic_esm_info_ptr);
      else
         do;
	  call CHECK_VERSION_CHAR (basic_esm_info.version, ESM_INFO_VERSION_1, "esm_info");
	  if basic_esm_info.type ^= BASIC_ELEMENT_STORAGE_METHOD
	  then call sub_err_ (dm_error_$unimplemented_esm, myname, ACTION_CANT_RESTART, null, 0,
		  "^/This routine does not implement element storage method ^d.", basic_esm_info.type);
         end;

      if unblocked_cism_info_ptr = null
      then call INIT_DEFAULT_CISM_INFO (unblocked_cism_info_ptr);
      else
         do;
	  call CHECK_VERSION_CHAR (unblocked_cism_info.version, CISM_INFO_VERSION_1, "cism_info");
	  if unblocked_cism_info.type ^= UNBLOCKED_CONTROL_INTERVAL_STORAGE_METHOD
	  then call sub_err_ (dm_error_$unimplemented_cism, myname, ACTION_CANT_RESTART, null, 0,
		  "^/This routine does not implement control interval storage method ^d.", unblocked_cism_info.type);
         end;


/* Create the file which will hold the relation. This operation leaves the 
   file open. */

      call collection_manager_$create_file (p_rel_dir, p_rel_name, file_create_info_ptr, rel_opening_id, p_code);
      if p_code ^= 0
      then call ERROR_RETURN ();

/* Create the record collection which will hold the tuples of the relation. */

      call record_manager_$create_collection (rel_opening_id, typed_vector_array_ptr, unblocked_cism_info_ptr,
	 basic_esm_info_ptr, record_collection_id, p_code);
      if p_code ^= 0
      then call ERROR_RETURN ();

      call record_manager_$create_cursor (rel_opening_id, record_collection_id, dm_area_ptr, record_cursor_ptr, p_code);
      if p_code ^= 0
      then call ERROR_RETURN ();

/* Set up the relation_opening_info structure. */

      call rlm_opening_info$init (rel_opening_id, relation_opening_info_ptr, p_code);
      if p_code ^= 0
      then call ERROR_RETURN ();

      relation_opening_info.per_process.record_cursor_ptr = record_cursor_ptr;

      call INIT_RELATION_HEADER (record_collection_id, relation_header_ptr);

      call rlm_update_opening_info$relation_header (relation_opening_info_ptr, relation_header_ptr, p_code);
      if p_code ^= 0
      then call ERROR_RETURN ();

      call INIT_ATTRIBUTE_INFO (attribute_info_ptr);
      call rlm_update_opening_info$attribute_info (relation_opening_info_ptr, attribute_info_ptr, p_code);
      if p_code ^= 0
      then call ERROR_RETURN ();

      call INIT_INDEX_ATTRIBUTE_MAP (index_attribute_map_ptr);
      call rlm_update_opening_info$index_attribute_map (relation_opening_info_ptr, index_attribute_map_ptr, p_code);
      if p_code ^= 0
      then call ERROR_RETURN ();


      call rlm_update_opening_info$increment_openings (relation_opening_info_ptr, (0));

      p_rel_opening_id = rel_opening_id;
      p_record_collection_id = record_collection_id;

      call FINISH ();

MAIN_RETURN:
      return;					/* Effective end of rlm_create_relation. */

%page;
FINISH:
   proc ();



      if p_rel_opening_id = "0"b
      then
         do;

	  if rel_opening_id ^= "0"b
	  then
	     do;
	        call file_manager_$delete_close (rel_opening_id, (0));
	        p_rel_opening_id = "0"b;
	     end;

	  if relation_opening_info_ptr ^= null
	  then
	     do;
	        call rlm_opening_info$free (relation_opening_info_ptr, (0));

	        if relation_header_ptr ^= null
	        then free relation_header_ptr -> relation_header in (dm_area);
	        if attribute_info_ptr ^= null
	        then free attribute_info in (dm_area);
	        if index_attribute_map_ptr ^= null
	        then free index_attribute_map in (dm_area);
	     end;
         end;

   end FINISH;
%page;
CHECK_VERSION:
   proc (cv_p_received_version, cv_p_expected_version, cv_p_structure_name);

      dcl	    cv_p_received_version  fixed bin (35);
      dcl	    cv_p_expected_version  fixed bin (35);
      dcl	    cv_p_structure_name    char (*);

      if cv_p_received_version ^= cv_p_expected_version
      then call sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null (), 0,
	      "^/Expected version ^d of the ^a structure.
Received version ^d, instead.", cv_p_expected_version, cv_p_structure_name, cv_p_received_version);

   end CHECK_VERSION;


CHECK_VERSION_CHAR:
   proc (cvc_p_received_version, cvc_p_expected_version, cvc_p_structure_name);

      dcl	    cvc_p_received_version char (8) aligned;
      dcl	    cvc_p_expected_version char (8) aligned;
      dcl	    cvc_p_structure_name   char (*);

      if cvc_p_received_version ^= cvc_p_expected_version
      then call sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
	      "^/Expected version ^a of the ^a structure.
Received version ^a, instead.", cvc_p_expected_version, cvc_p_structure_name, cvc_p_received_version);

   end CHECK_VERSION_CHAR;


ERROR_RETURN:
   proc ();

      call FINISH ();
      goto MAIN_RETURN;

   end ERROR_RETURN;
%page;
INIT_DEFAULT_FILE_CREATE_INFO:
   proc (idfci_p_file_create_info_ptr);

      dcl	    idfci_p_file_create_info_ptr
			       ptr;


      idfci_p_file_create_info_ptr = addr (my_file_create_info);

      idfci_p_file_create_info_ptr -> file_create_info.version = FILE_CREATE_INFO_VERSION_2;
      idfci_p_file_create_info_ptr -> file_create_info.mbz_2 (*) = 0;
      idfci_p_file_create_info_ptr -> file_create_info.ring_brackets (*) = get_ring_ ();


      return;

   end INIT_DEFAULT_FILE_CREATE_INFO;

INIT_DEFAULT_ESM_INFO:
   proc (idei_p_esm_info_ptr);

      dcl	    idei_p_esm_info_ptr    ptr;

      idei_p_esm_info_ptr = addr (my_basic_esm_info);

      unspec (idei_p_esm_info_ptr -> basic_esm_info) = ""b;
      idei_p_esm_info_ptr -> basic_esm_info.version = ESM_INFO_VERSION_1;
      idei_p_esm_info_ptr -> basic_esm_info.type = BASIC_ELEMENT_STORAGE_METHOD;
      idei_p_esm_info_ptr -> basic_esm_info.maximum_element_length = -1;


      return;

   end INIT_DEFAULT_ESM_INFO;

INIT_DEFAULT_CISM_INFO:
   proc (idci_p_cism_info_ptr);

      dcl	    idci_p_cism_info_ptr   ptr;

      idci_p_cism_info_ptr = addr (my_unblocked_cism_info);

      unspec (idci_p_cism_info_ptr -> unblocked_cism_info) = ""b;
      idci_p_cism_info_ptr -> unblocked_cism_info.version = CISM_INFO_VERSION_1;
      idci_p_cism_info_ptr -> unblocked_cism_info.type = UNBLOCKED_CONTROL_INTERVAL_STORAGE_METHOD;


      return;

   end INIT_DEFAULT_CISM_INFO;
%page;
INIT_RELATION_HEADER:
   proc (irh_p_record_collection_id, irh_p_relation_header_ptr);

      dcl	    irh_p_record_collection_id
			       bit (36) aligned;
      dcl	    irh_p_relation_header_ptr
			       ptr;

      alloc relation_header in (dm_area);
      relation_header.version = RELATION_HEADER_VERSION_3;

      relation_header.record_collection_id = irh_p_record_collection_id;

      irh_p_relation_header_ptr = relation_header_ptr;

      return;

   end INIT_RELATION_HEADER;
%page;
INIT_ATTRIBUTE_INFO:
   proc (iai_p_attribute_info_ptr);

      dcl	    iai_p_attribute_info_ptr
			       ptr;
      dcl	    iai_based_descriptor_string
			       bit (36) aligned based;
      dcl	    iai_attribute_idx      fixed bin (17);

      ai_number_of_attributes = hbound (typed_vector_array.dimension_table, 1);
      ai_maximum_attribute_name_length = typed_vector_array.maximum_dimension_name_length;

      alloc attribute_info in (dm_area);
      attribute_info.version = ATTRIBUTE_INFO_VERSION_1;
      iai_p_attribute_info_ptr = attribute_info_ptr;

      do iai_attribute_idx = 1 to hbound (typed_vector_array.dimension_table, 1);
         attribute_info.attribute (iai_attribute_idx).name = typed_vector_array.dimension_table (iai_attribute_idx).name;
         attribute_info.attribute (iai_attribute_idx).descriptor =
	    typed_vector_array.dimension_table (iai_attribute_idx).descriptor_ptr -> iai_based_descriptor_string;
      end;

      return;

   end INIT_ATTRIBUTE_INFO;
%page;
INIT_INDEX_ATTRIBUTE_MAP:
   proc (iiam_p_index_attribute_map_ptr);

      dcl	    iiam_p_index_attribute_map_ptr
			       ptr;
      dcl	    INITIAL_NUMBER_OF_INDICES
			       init (5) fixed bin (17) int static options (constant);
      dcl	    INITIAL_NUMBER_OF_ATTRIBUTES_PER_INDEX
			       init (5) fixed bin (17) int static options (constant);


      iam_maximum_number_of_indices = INITIAL_NUMBER_OF_INDICES;
      iam_maximum_number_of_attributes_per_index =
	 min (INITIAL_NUMBER_OF_ATTRIBUTES_PER_INDEX, typed_vector_array.number_of_dimensions);

      alloc index_attribute_map in (dm_area);
      index_attribute_map.version = INDEX_ATTRIBUTE_MAP_VERSION_2;
      unspec (index_attribute_map.index) = "0"b;

      iiam_p_index_attribute_map_ptr = index_attribute_map_ptr;

      return;

   end INIT_INDEX_ATTRIBUTE_MAP;
%page;
%include dm_rlm_opening_info;
%page;
%include dm_rlm_header;
%page;
%include dm_rlm_attribute_info;
%page;
%include dm_rlm_index_attr_map;
%page;
%include dm_rel_creation_info;
%page;
%include dm_file_create_info;
%page;
%include dm_cism_info;
%page;
%include dm_esm_info;
%page;
%include vu_typed_vector_array;
%page;
%include dm_rcdmgr_entry_dcls;
%page;
%include dm_collmgr_entry_dcls;
%page;
%include dm_ci_lengths;
%page;
%include sub_err_flags;

   end rlm_create_relation;
