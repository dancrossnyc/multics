/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
/* format: style2,ind3 */
im_create_subset_index:
   proc (p_specification_ptr, p_subset_pf_opening_id, p_cursor_ptr, p_id_list_ptr, p_subset_index_id, p_code);

/* DESCRIPTION:

         This  module  creates  a  subset  index  from  an index.  The subset
     index's keys are derived from keys found in the source index.  The subset
     index keys can have any of the fields in the source index in any order.
*/

/* HISTORY:

Written by Lindsey L. Spratt, 08/19/82.
Modified:
12/13/82 by Lindsey Spratt:  Added interval_list_ptr ptr to get_key call.
*/

/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_specification_ptr    ptr parameter;
      dcl	    p_subset_pf_opening_id bit (36) aligned parameter;
      dcl	    p_cursor_ptr	       ptr parameter;
      dcl	    p_id_list_ptr	       ptr parameter;
      dcl	    p_subset_index_id      bit (36) aligned parameter;
      dcl	    p_code	       fixed bin (35) parameter;

/* Automatic */

      dcl	    1 local_area_info      like area_info;
      dcl	    (typed_vector_array_ptr, subset_typed_vector_array_ptr)
			       ptr;
      dcl	    subset_cursor_ptr      ptr;

/* Based */
/* Builtin */

      dcl	    (null, hbound, addr)   builtin;

/* Condition */

      dcl	    cleanup	       condition;

/* Constant */

      dcl	    myname	       init ("im_create_subset_index") char (23) internal static options (constant);

/* Entry */

      dcl	    define_area_	       entry (ptr, fixed bin (35));
      dcl	    release_area_	       entry (ptr);

/* External */

      dcl	    sys_info$max_seg_size  fixed bin (35) ext static;

/* END OF DECLARATIONS */

      id_list_ptr = p_id_list_ptr;
      p_code = 0;

      local_area_info.version = area_info_version_1;
      local_area_info.control = "0"b;
      local_area_info.extend = "1"b;
      local_area_info.owner = myname;
      local_area_info.size = sys_info$max_seg_size;
      local_area_info.areap = null;

      on cleanup call finish;

      call define_area_ (addr (local_area_info), p_code);
      if p_code ^= 0
      then goto ERROR_RETURN;

      call
         index_manager_$get_key (p_specification_ptr, id_list_ptr, local_area_info.areap, p_cursor_ptr,
         typed_vector_array_ptr, null, p_code);
      if p_code ^= 0
      then goto ERROR_RETURN;

      call
         index_manager_$create_index (p_subset_pf_opening_id, subset_typed_vector_array_ptr, hbound (id_list.id, 1),
         p_subset_index_id, p_code);
      if p_code ^= 0
      then goto ERROR_RETURN;


ERROR_RETURN:
      call finish;
      return;
%page;
finish:
   proc;
      if local_area_info.areap ^= null
      then call release_area_ (local_area_info.areap);
   end finish;
%page;
%include dm_idxmgr_entry_dcls;
%page;
%include dm_id_list;
%page;
%include area_info;
   end im_create_subset_index;
