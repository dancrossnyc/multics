/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(86-12-03,Dupuis), approve(86-12-03,PBF7311), audit(86-12-05,Blair),
     install(86-12-09,MR12.0-1237):
     Changed the created area to be a freeing area. im_set_cursor
     expected this to be a freeing area and was getting an out-of-bounds
     when it tried to free something.
                                                   END HISTORY COMMENTS */


/* DESCRIPTION

        Creates an empty index collection in the given file with the fields
   specified in typed_vector_array.  An index collection identifier is
   assigned for referencing this collection which is the element id of the
   collection header in the header for this file.  The index collection header
   (index_header) contains the element_id of the field table for this
   collection.  If there are vectors in the typed_vector_array
   (typed_vector_array.number_of_vectors > 0) the new index collection is
   loaded with these vectors.
*/

/* HISTORY:
Written by Lindsey Spratt, 04/01/82.
  (From the source for rcm_create_collection.)
Modified:
04/22/82 by Matthew Pierret: Changed to use data_mgmt_util_$cv_typed_array_to_table
            instead of dmu_build_field_table.
07/27/82 by Lindsey Spratt:  Added p_number_of_duplication_fields to the
	  calling sequence.  Also, changed to using version 2 of the
	  index_header structure.
08/10/82 by Matthew Pierret:  Changed collection ids from "fixed bin (17)" to
            "bit (36) aligned".
08/19/82 by Lindsey Spratt:  Renamed to create_index, from create_collection
	  (it now conforms with the specification).  Added ability to load
	  the index if any vectors are in the typed_vector_array used to
	  define the fields.
11/01/82 by Lindsey Spratt:  Changed to use the version 3 index_header.  This
	  has the key_count_array in it.
03/23/83 by Lindsey Spratt:  Fixed to use version 2 of the field_table.
05/04/84 by Matthew Pierret:  Changed to use FIELD_TABLE_VERSION_3, to use
            local structures instead of allocated ones where possible, to use
            "file_" instead of "pf_" and check the version in-line.
            Changed to set index_header.number_of_duplication_fields to
            field_table.number_of_fields+1 if the input value of
            p_number_of_duplication_fields is 0.
05/20/84 by Matthew Pierret:  Changed to use new versions of the 
            ordered_esm_info and unblocked_cism_info structures, and to use
            dm_(esm cism)_info.incl.pl1 instead of 
            dm_cm_(esm cism)_info.incl.pl1.
06/12/84 by Matthew Pierret:  Re-named cm_$allocate_element to cm_$put.
10/28/84 by Lindsey L. Spratt:  Changed to use version 4 of the index_header,
            and to separately allocate the new version 2 key_count_array.
            Changed to use the ERROR_RETURN technology.  Changed DEFINE_AREA
            to take an explicit parameter.
*/

/* format: style2,ind3 */

im_create_index:
   proc (p_file_opening_id, p_typed_vector_array_ptr, p_number_of_duplication_fields, p_index_collection_id, p_code);

/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_file_opening_id      bit (36) aligned;
      dcl	    p_typed_vector_array_ptr
			       ptr;
      dcl	    p_number_of_duplication_fields
			       fixed bin (17);
      dcl	    p_index_collection_id  bit (36) aligned;
      dcl	    p_code	       fixed bin (35);

/* Automatic */

      dcl	    field_table_id_string  bit (36) aligned init ("0"b);
      dcl	    file_opening_id	       bit (36) aligned init ("0"b);
      dcl	    index_collection_id    bit (36) aligned init ("0"b);
      dcl	    key_count_array_id_string
			       bit (36) aligned init ("0"b);
      dcl	    1 local_ordered_esm_info
			       aligned like ordered_esm_info;
      dcl	    1 local_unblocked_cism_info
			       aligned like unblocked_cism_info;
      dcl	    maximum_element_length fixed bin (35);
      dcl	    work_area_ptr	       ptr;
      dcl	    cursor_ptr	       ptr;

/* Based */

      dcl	    work_area	       area (sys_info$max_seg_size) based (work_area_ptr);

/* Builtin */

      dcl	    (addr, size, currentsize, null, string)
			       builtin;

/* Condition */

      dcl	    cleanup	       condition;

/* Constant */

      dcl	    myname	       init ("im_create_index") char (32) varying int static options (constant);
      dcl	    HEADER_COLLECTION_ID   init ("000000000001"b3) bit (36) aligned int static options (constant);
      dcl	    BITS_PER_WORD	       init (36) fixed bin int static options (constant);

/* Entry */

      dcl	    data_format_util_$cv_typed_array_to_table
			       entry (ptr, ptr, ptr, fixed bin (35), fixed bin (35));
      dcl	    define_area_	       entry (ptr, fixed bin (35));
      dcl	    release_area_	       entry (ptr);
      dcl	    sub_err_	       entry () options (variable);

/* External */

      dcl	    sys_info$max_seg_size  ext fixed bin (35);
      dcl	    error_table_$unimplemented_version
			       ext fixed bin (35);

/* END OF DECLARATIONS */

      p_code = 0;
      file_opening_id = p_file_opening_id;
      typed_vector_array_ptr = p_typed_vector_array_ptr;

      on cleanup call FINISH ();

      call DEFINE_AREA (work_area_ptr);

      ft_length_of_field_names, ft_number_of_fields = 0;	/* So compiler won't complain */

      call data_format_util_$cv_typed_array_to_table (typed_vector_array_ptr, work_area_ptr, field_table_ptr,
	 maximum_element_length, p_code);
      if p_code ^= 0
      then call ERROR_RETURN (p_code);

      call CHECK_VERSION (field_table.version, FIELD_TABLE_VERSION_3, "field_table");

      local_unblocked_cism_info.version = CISM_INFO_VERSION_1;
      local_unblocked_cism_info.type = UNBLOCKED_CONTROL_INTERVAL_STORAGE_METHOD;
      local_unblocked_cism_info.must_be_zero = 0;

      local_ordered_esm_info.version = ESM_INFO_VERSION_1;
      local_ordered_esm_info.type = ORDERED_ELEMENT_STORAGE_METHOD;
      local_ordered_esm_info.flags.fixed_length = "0"b;
      local_ordered_esm_info.flags.pad = "0"b;
      local_ordered_esm_info.maximum_element_length = maximum_element_length;

      call collection_manager_$create_collection (file_opening_id, addr (local_unblocked_cism_info),
	 addr (local_ordered_esm_info), index_collection_id, p_code);
      if p_code ^= 0
      then call ERROR_RETURN (p_code);

      call collection_manager_$put (file_opening_id, HEADER_COLLECTION_ID, field_table_ptr, length (unspec (field_table)),
	 field_table_id_string, (0), p_code);
      if p_code ^= 0
      then call ERROR_RETURN (p_code);

      kca_number_of_counts = field_table.number_of_fields;
      alloc key_count_array in (work_area);
      key_count_array.version = KEY_COUNT_ARRAY_VERSION_2;
      key_count_array.count = 0;

      call collection_manager_$put (file_opening_id, HEADER_COLLECTION_ID, key_count_array_ptr,
	 length (unspec (key_count_array)), key_count_array_id_string, (0), p_code);
      if p_code ^= 0
      then call ERROR_RETURN (p_code);

      alloc index_header in (work_area);
      index_header.version = INDEX_HEADER_VERSION_4;
      unspec (index_header.field_table_element_id) = field_table_id_string;
      if p_number_of_duplication_fields = 0
      then index_header.number_of_duplication_fields = field_table.number_of_fields + 1;
      else index_header.number_of_duplication_fields = p_number_of_duplication_fields;
      index_header.root_id = 0;
      unspec (index_header.key_count_array_element_id) = key_count_array_id_string;
      index_header.pad1 = "0"b;
      index_header.pad2 = "0"b;

      call collection_manager_$put_header (file_opening_id, index_collection_id, index_header_ptr,
	 length (unspec (index_header)), p_code);
      if p_code ^= 0
      then call ERROR_RETURN (p_code);

      if typed_vector_array.number_of_vectors > 0
      then
         do;
	  call index_manager_$create_cursor (file_opening_id, index_collection_id, work_area_ptr, cursor_ptr, p_code);
	  if p_code ^= 0
	  then call ERROR_RETURN (p_code);

	  call index_manager_$put_key_array (typed_vector_array_ptr, cursor_ptr, p_code);
	  if p_code ^= 0
	  then call ERROR_RETURN (p_code);
         end;

      call FINISH;

      p_index_collection_id = index_collection_id;

MAIN_RETURN:
      return;



FINISH:
   proc;
      if work_area_ptr ^= null
      then call release_area_ (work_area_ptr);

   end FINISH;

ERROR_RETURN:
   proc (er_p_code);
      dcl	    er_p_code	       fixed bin (35) parameter;

      call FINISH ();
      p_code = er_p_code;
      goto MAIN_RETURN;

   end ERROR_RETURN;
%page;
CHECK_VERSION:
   proc (p_expected_version, p_received_version, p_structure_name);
      dcl	    (p_expected_version, p_received_version)
			       char (8) aligned parameter;
      dcl	    p_structure_name       char (*) parameter;

      if p_expected_version ^= p_received_version
      then call sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
	      "^/Expected version ^a of the ^a structure.  
Received version ^a, instead.", p_expected_version, p_structure_name, p_received_version);
   end CHECK_VERSION;
%page;
DEFINE_AREA:
   proc (da_p_work_area_ptr);
      dcl	    da_p_work_area_ptr     ptr parameter;

      dcl	    1 da_area_info	       aligned like area_info;
      dcl	    da_code	       fixed bin (35) init (0);

      da_area_info.version = area_info_version_1;
      string (da_area_info.control) = "0"b;
      da_area_info.control.extend = "1"b;
      da_area_info.owner = myname;
      da_area_info.size = sys_info$max_seg_size;
      da_area_info.areap = null;

      call define_area_ (addr (da_area_info), da_code);
      if da_code ^= 0
      then call ERROR_RETURN (da_code);

      da_p_work_area_ptr = da_area_info.areap;

   end DEFINE_AREA;
%page;
%include sub_err_flags;
%page;
%include dm_key_count_array;
%page;
%include vu_typed_vector_array;
%page;
%include dm_im_header;
%page;
%include dm_field_table;
%page;
%include dm_cism_info;
%page;
%include dm_esm_info;
%page;
%include dm_collmgr_entry_dcls;
%page;
%include area_info;
%page;
%include dm_idxmgr_entry_dcls;
%page;
%include dm_element_id;
   end im_create_index;
