/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */


/* DESCRIPTION:
        This module stores records in a record collection. The location to 
   put the record is specified explicitly using the p_related_record_id.
   The caller supplies a pointer to a simple_typed_vector or an array of
   pointers to simple_typed_vectors. These vectors are converted into bit
   strings for storage by collection_manager_$allocate_element. Multiple
   records are stored adjacently if possible. The cursor defines the page
   file and collection into which the record(s) are to be stored, and the
   cursor is positioned to the last record put, if successful; otherwise
   the position is left unchanged. If an error occurs while storing a
   record, records which have already been stored are deleted.
        The p_related_record_id identifies an existing record or a canonical
   null location ("0"b). If null, the record(s) is placed at the end of the 
   collection. Otherwise, the control interval that p_related_record_id 
   identifies is used to store the new record(s). If there is no room, the
   new record(s) is placed at the end of the collection.
*/

/* HISTORY:
Written by Matthew Pierret.
Modified:
04/15/82 by Matthew Pierret: Added array_by_* entries.
04/23/82 by Matthew Pierret: Changed dmu_* calls to data_mgmt_util_$* calls.
09/07/82 by Matthew Pierret: Changed to use rm_get_opening_info.
12/22/82 by Lindsey Spratt:  Changed to handle large records.
01/04/83 by Lindsey Spratt:  Fixed to cleanup allocated records and storage.
03/16/83 by Matthew Pierret: Changed to receive record_collection_opening_info
            structure from rm_get_opening_info. Changed to get work area from
            get_dm_free_area_ instead of dm_data_$area_ptr.
            Changed to not attempt to roll back. Moved record_cursor type check
            before version check.
03/24/83 by Lindsey Spratt:  Removed the field_table include file, added local
	  dcl of field_table_ptr.
03/28/83 by Lindsey Spratt:  Fixed test to set dm_work_area_ptr to test for "=
	  null" rather than "^= null".
03/29/83 by Lindsey Spratt:  Changed to always call ERROR_RETURN on errors.
07/28/83 by Matthew Pierret: Changed name from rm_put_record_by_id to
            rcm_put_record_by_id, and all rm_ prefixes to rcm_.
04/12/84 by Lee Baldwin:  Renamed the parameters to coincide with all the other
            rcm_XX routines.
06/12/84 by Matthew Pierret: Renamed cm_$allocate_element to cm_$put and
            data_mgmt_util_ to data_format_util_.
09/27/84 by Maggie Sharpe:  Cleaned up dcls; changed the call to CHECK_VERSION
            on line 164 to pass parameters by reference instead of value.
*/
/* format: style2,ind3 */
%page;
/* format: style2,ind3 */

rcm_put_record_by_id:
   proc ();

      call
         sub_err_ (dm_error_$programming_error, myname, ACTION_CANT_RESTART, null, 0, "^/^a$^a is not a valid entrypoint",
         myname, myname);


/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_related_record_id    bit (36) aligned;
      dcl	    p_simple_typed_vector_ptr
			       ptr;
      dcl	    p_typed_vector_array_ptr
			       ptr;
      dcl	    p_minimum_free_space   fixed bin (35);	/* not implemented */
      dcl	    p_record_cursor_ptr    ptr;
      dcl	    p_element_id_list_ptr  ptr;
      dcl	    p_record_id	       bit (36) aligned;
      dcl	    p_code	       fixed bin (35);

/* Automatic */

      dcl	    returned_buffer_length fixed bin (35);
      dcl	    local_record_string_buffer
			       char (4096);
      dcl	    put_array_of_records   bit (1) aligned init ("0"b);
      dcl	    put_only_a_single_record
			       bit (1) aligned;
      dcl	    record_id	       bit (36) aligned;
      dcl	    record_idx	       fixed bin;
      dcl	    field_table_ptr	       ptr init (null);
      dcl	    record_string_ptr      ptr;
      dcl	    record_string_buffer_ptr
			       ptr init (null);
      dcl	    record_string_buffer_length
			       fixed bin (35) init (0);

/* Based */

      dcl	    dm_work_area	       area based (dm_work_area_ptr);

      dcl	    1 record_string	       based (record_string_ptr),
	      2 length	       fixed bin (35),
	      2 contents	       bit (0 refer (record_string.length));

      dcl	    record_string_buffer   bit (record_string_buffer_length) based (record_string_buffer_ptr);

/* Builtin */

      dcl	    (null, length, addr, unspec, hbound)
			       builtin;

/* Condition */

      dcl	    cleanup	       condition;


/* Constant */

      dcl	    myname	       init ("rcm_put_record_by_id") char (32) varying int static options (constant);


/* Entry */

      dcl	    rcm_get_opening_info   entry (bit (36) aligned, bit (36) aligned, ptr, fixed bin (35));
      dcl	    sub_err_	       entry () options (variable);
      dcl	    data_format_util_$cv_vector_to_string
			       entry (ptr, ptr, ptr, fixed bin (35), ptr, ptr, fixed bin (35), fixed bin (35));
      dcl	    get_dm_free_area_      entry () returns (ptr);

/* External */

      dcl	    (
	    error_table_$unimplemented_version,
	    dm_error_$programming_error,
	    dm_error_$wrong_cursor_type
	    )		       ext fixed bin (35);

/* Static */

      dcl	    dm_work_area_ptr       ptr internal static init (null);

/* END OF DECLARATIONS */

single:
   entry (p_related_record_id, p_simple_typed_vector_ptr, p_minimum_free_space, p_record_cursor_ptr, p_record_id, p_code);

      put_only_a_single_record = "1"b;
      simple_typed_vector_ptr = p_simple_typed_vector_ptr;
      record_id = p_related_record_id;
      p_record_id = "0"b;
      goto JOIN;


array:
   entry (p_related_record_id, p_typed_vector_array_ptr, p_minimum_free_space, p_record_cursor_ptr, p_element_id_list_ptr,
      p_code);

      typed_vector_array_ptr = p_typed_vector_array_ptr;
      call CHECK_VERSION ((typed_vector_array.version), (TYPED_VECTOR_ARRAY_VERSION_2), "typed_vector_array");

      simple_typed_vector_ptr = typed_vector_array.vector_slot (1);
      record_id = p_related_record_id;
      put_array_of_records = "1"b;
      element_id_list_ptr = p_element_id_list_ptr;
      call CHECK_VERSION (element_id_list.version, ELEMENT_ID_LIST_VERSION_1, "element_id_list");

      goto JOIN;
%page;
JOIN:
      p_code = 0;

      record_cursor_ptr = p_record_cursor_ptr;

      if record_cursor.type ^= RECORD_CURSOR_TYPE
      then call
	    sub_err_ (dm_error_$wrong_cursor_type, myname, ACTION_CANT_RESTART, null, 0,
	    "^/Expected record cursor, type ^d; received type ^d.", RECORD_CURSOR_TYPE, record_cursor.type);
      call CHECK_VERSION ((record_cursor.version), (RECORD_CURSOR_VERSION_2), "record_cursor");

      call
         rcm_get_opening_info (record_cursor.file_opening_id, record_cursor.collection_id,
         record_collection_opening_info_ptr, p_code);
      if p_code ^= 0
      then call ERROR_RETURN;

      call
         CHECK_VERSION_CHAR_8 (record_collection_opening_info.version, RECORD_COLLECTION_OPENING_INFO_VERSION_1,
         "record_collection_opening_info");

      field_table_ptr = record_collection_opening_info.field_table_ptr;

      record_string_buffer_ptr = addr (local_record_string_buffer);
      record_string_buffer_length = length (unspec (local_record_string_buffer));

      if dm_work_area_ptr = null
      then dm_work_area_ptr = get_dm_free_area_ ();

      on cleanup call FINISH ();

      call
         data_format_util_$cv_vector_to_string (field_table_ptr, simple_typed_vector_ptr, record_string_buffer_ptr,
         record_string_buffer_length, dm_work_area_ptr, record_string_ptr, returned_buffer_length, p_code);
      if p_code ^= 0
      then call ERROR_RETURN;

      call
         collection_manager_$put (record_cursor.file_opening_id, record_cursor.collection_id,
         addr (record_string.contents), record_string.length, record_id, (0), p_code);
      if p_code ^= 0
      then call ERROR_RETURN ();


      if record_string_ptr ^= record_string_buffer_ptr
      then
         do;
	  if record_string_buffer_ptr ^= addr (local_record_string_buffer)
	  then free record_string_buffer in (dm_work_area);
	  record_string_buffer_ptr = record_string_ptr;
	  record_string_buffer_length = returned_buffer_length;
         end;

      if put_only_a_single_record
      then p_record_id = record_id;
      else
         do;
	  element_id_list.id (record_idx) = record_id;
	  do record_idx = 2 to hbound (element_id_list.id, 1);

	     call
	        data_format_util_$cv_vector_to_string (field_table_ptr, typed_vector_array.vector_slot (record_idx),
	        record_string_buffer_ptr, record_string_buffer_length, dm_work_area_ptr, record_string_ptr,
	        returned_buffer_length, p_code);
	     if p_code ^= 0
	     then call ERROR_RETURN ();

	     call
	        collection_manager_$put (record_cursor.file_opening_id, record_cursor.collection_id,
	        addr (record_string.contents), record_string.length, record_id, (0), p_code);
	     if p_code = 0
	     then element_id_list.id (record_idx) = record_id;
	     else call ERROR_RETURN ();

	     if record_string_ptr ^= record_string_buffer_ptr
	     then
	        do;
		 if record_string_buffer_ptr ^= addr (local_record_string_buffer)
		 then free record_string_buffer in (dm_work_area);
		 record_string_buffer_ptr = record_string_ptr;
		 record_string_buffer_length = returned_buffer_length;
	        end;
	  end;
         end;

      record_cursor.record_id = record_id;
      record_cursor.flags.position_is_valid = "1"b;

      call FINISH ();
RETURN:
      return;

%page;
CHECK_VERSION:
   proc (p_received_version, p_expected_version, p_structure_name);

      dcl	    p_received_version     fixed bin (35);
      dcl	    p_expected_version     fixed bin (35);
      dcl	    p_structure_name       char (*);

      if p_received_version ^= p_expected_version
      then call
	    sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
	    "^/Expected version ^d of the ^a structure.
Received version ^d, instead.", p_expected_version, p_structure_name, p_received_version);

   end CHECK_VERSION;


CHECK_VERSION_CHAR_8:
   proc (p_given_version, p_correct_version, p_structure_name);

      dcl	    p_structure_name       char (*);
      dcl	    p_given_version	       char (8) aligned;
      dcl	    p_correct_version      char (8) aligned;

      if p_given_version ^= p_correct_version
      then call
	    sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
	    "^/Expected version ""^8a"" of ^a structure; received ""^8a"".", p_correct_version, p_structure_name,
	    p_given_version);

      return;

   end CHECK_VERSION_CHAR_8;
%page;
FINISH:
   proc ();

      if record_string_buffer_ptr ^= null
      then if record_string_buffer_ptr ^= addr (local_record_string_buffer)
	 then free record_string_buffer in (dm_work_area);

   end FINISH;


ERROR_RETURN:
   proc ();

      call FINISH ();
      goto RETURN;

   end ERROR_RETURN;
%page;
%include dm_rcm_cursor;
%page;

%include dm_rcm_opening_info;
%page;
%include dm_element_id_list;
%page;
%include vu_typed_vector;
%page;
%include vu_typed_vector_array;
%page;
%include dm_collmgr_entry_dcls;
%page;
%include sub_err_flags;

   end rcm_put_record_by_id;
