/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION:

         This module is used to free a node from an index.
*/

/* HISTORY:

Written by Lindsey L. Spratt, 08/06/82.
Modified:
12/10/82 by Lindsey Spratt:  Updated to use version 2 of the index_cursor.
12/13/82 by Lindsey Spratt:  Fixed wrong calling sequence of
	  $free_control_interval, the zero_on_free argument was missing.
02/28/83 by Lindsey Spratt:  Updated to use version 3 of the index_cursor.
04/26/83 by Lindsey L. Spratt:  Fixed to update the "sibling" node CI pointers
            in the preceding and following nodes of the node being deleted.
04/27/83 by Lindsey L. Spratt:  Fixed to pass the correct buffer size to
            $get_element.
06/07/84 by Matthew Pierret:  Re-named cm_$get_element to cm_$get,
            cm_$put_element to cm_$modify.  Switched the order of the
            ci header length and ptr in the call to cm_$modify.
*/
/* format: style2,ind3 */
%page;
im_delete_node:
   proc (p_index_cursor_ptr, p_control_interval_id, p_code);

/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_index_cursor_ptr     ptr parameter;
      dcl	    p_control_interval_id  fixed bin (24) unsigned parameter;
      dcl	    p_code	       fixed bin (35) parameter;

/* Automatic */

      dcl	    (ci_following_deleted_node, ci_preceding_deleted_node)
			       fixed bin (24) unsigned unaligned;
      dcl	    local_ci_header_buffer bit (max (LEAF_CI_HEADER_LENGTH_IN_BITS, BRANCH_CI_HEADER_LENGTH_IN_BITS)) aligned;

/* Based */
/* Builtin */

      dcl	    null		       builtin;

/* Constant */

      dcl	    DEFAULT_AREA_PTR       init (null) ptr internal static options (constant);
      dcl	    DEFAULT_ELEMENT_LENGTH init (-1) fixed bin (35) internal static options (constant);

      dcl	    myname	       init ("im_delete_node") char (14) internal static options (constant);
      dcl	    ZERO_ON_FREE	       init ("1"b) bit aligned internal static options (constant);

/* Entry */

      dcl	    sub_err_	       entry () options (variable);

/* External */

      dcl	    (
	    error_table_$unimplemented_version,
	    dm_error_$wrong_cursor_type
	    )		       fixed bin (35) ext;

/* END OF DECLARATIONS */

      index_cursor_ptr = p_index_cursor_ptr;
      if index_cursor.type ^= INDEX_CURSOR_TYPE
      then call
	    sub_err_ (dm_error_$wrong_cursor_type, myname, "s", null, 0,
	    "^/Expected an ""index"" type cursor (type ^d).  
Received a cursor of type ^d instead.", INDEX_CURSOR_TYPE, index_cursor.type);
      call CHECK_VERSION ((index_cursor.version), (INDEX_CURSOR_VERSION_3), "index_cursor");


      common_ci_header_ptr = addr (local_ci_header_buffer);
      call GET_CI_HEADER ((p_control_interval_id), common_ci_header_ptr, p_code);
      if p_code ^= 0
      then return;

      ci_preceding_deleted_node = common_ci_header.previous_id;
      ci_following_deleted_node = common_ci_header.next_id;

      if ci_preceding_deleted_node > 0
      then
         do;
	  call GET_CI_HEADER (ci_preceding_deleted_node, common_ci_header_ptr, p_code);
	  if p_code ^= 0
	  then return;
	  common_ci_header.next_id = ci_following_deleted_node;
	  call PUT_CI_HEADER (ci_preceding_deleted_node, common_ci_header_ptr, p_code);
	  if p_code ^= 0
	  then return;
         end;

      if ci_following_deleted_node > 0
      then
         do;
	  call GET_CI_HEADER (ci_following_deleted_node, common_ci_header_ptr, p_code);
	  if p_code ^= 0
	  then return;
	  common_ci_header.previous_id = ci_preceding_deleted_node;
	  call PUT_CI_HEADER (ci_following_deleted_node, common_ci_header_ptr, p_code);
	  if p_code ^= 0
	  then return;
         end;

      call
         collection_manager_$free_control_interval (index_cursor.file_opening_id, index_cursor.collection_id,
         p_control_interval_id, ZERO_ON_FREE, p_code);

      return;
%page;
GET_CI_HEADER:
   proc (p_control_interval_id, p_ci_header_ptr, p_code);
      dcl	    p_control_interval_id  fixed bin (24) unsigned unal;
      dcl	    p_ci_header_ptr	       ptr;
      dcl	    p_code	       fixed bin (35);


      element_id.control_interval_id = p_control_interval_id;
      element_id.index = DEFAULT_INDEX_CONTROL_INTERVAL_HEADER_SLOT;
      p_code = 0;

      call
         collection_manager_$get (index_cursor.file_opening_id, index_cursor.collection_id, element_id_string, 0,
         p_ci_header_ptr, max (LEAF_CI_HEADER_LENGTH_IN_BITS, BRANCH_CI_HEADER_LENGTH_IN_BITS), DEFAULT_AREA_PTR, "0"b,
         p_ci_header_ptr, (0), p_code);
      if p_code ^= 0
      then return;
   end GET_CI_HEADER;
%page;
PUT_CI_HEADER:
   proc (p_control_interval_id, p_ci_header_ptr, p_code);
      dcl	    p_control_interval_id  fixed bin (24) unsigned unal;
      dcl	    p_ci_header_ptr	       ptr;
      dcl	    p_code	       fixed bin (35);


      element_id.control_interval_id = p_control_interval_id;
      element_id.index = DEFAULT_INDEX_CONTROL_INTERVAL_HEADER_SLOT;
      p_code = 0;

      call
         collection_manager_$modify (index_cursor.file_opening_id, index_cursor.collection_id, p_ci_header_ptr,
         DEFAULT_ELEMENT_LENGTH, element_id_string, (0), p_code);
      if p_code ^= 0
      then return;
   end PUT_CI_HEADER;
%page;
CHECK_VERSION:
   proc (p_received_version, p_expected_version, p_structure_name);
      dcl	    p_received_version     fixed bin (35);
      dcl	    p_expected_version     fixed bin (35);
      dcl	    p_structure_name       char (*);

      if p_expected_version ^= p_received_version
      then call
	    sub_err_ (error_table_$unimplemented_version, myname,
	    "^/Expected version ^d of the ^a structure. Received version ^d instead.", p_expected_version,
	    p_structure_name, p_received_version);

   end CHECK_VERSION;
%page;
%include dm_im_cursor;
%page;
%include dm_collmgr_entry_dcls;
%page;
%include dm_im_ci_header;
%page;
%include dm_element_id;
   end im_delete_node;
