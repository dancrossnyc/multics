/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */


/* DESCRIPTION:

         This   subroutine  searches  an  index  under  the  control  of  the
     structural_specification (produced  by  im_build_structural_spec).    The
     basic  algorithm  is  to  loop over the intervals in the structural spec,
     invoking im_search_ on the high and low ends of each interval.
*/

/* HISTORY:

Written by Lindsey L. Spratt, 06/17/82.
Modified:
08/26/82 by Lindsey Spratt:  Added "relative" searching, based on the current
	  value of the cursor.  Extended the im_basic_search calling
	  sequence to take the p_is_relative_search flag and a
	  "position_stack" which it fills in if it calculates the location
	  of the cursor.
10/07/82 by Lindsey Spratt:  Changed to use the interval_specification.
10/26/82 by Lindsey Spratt:  Changed to check for matches being found within
	  each interval.  If no match is found for any interval then
	  p_no_match is set on.  Intervals in which no match was found have
	  their id_strings set to "0"b.
10/27/82 by Lindsey Spratt:  Changed to use a "number of partial duplication
	  fields" of simple_typed_vector.number_of_dimensions + 1.
11/04/82 by Lindsey Spratt:  Fixed bug where ranges were always returning "not
	  found".  
02/25/83 by Lindsey Spratt:  Changed to take p_index_opening_info_ptr as an
	  input parameter.  Changed to call im_basic_search with
	  index_opening_info_ptr instead of field_table_ptr and root_id
	  values.  Changed to use version 3 index_cursor.  Changed the
	  calling sequence of this module to have p_index_opening_info_otr
	  instead of p_root_node_id and p_field_table_ptr.
03/24/83 by Lindsey Spratt:   Changed to use version 2 of the field_table.
	  Uppercased all of the internal proc names.
04/10/83 by Lindsey L. Spratt:  Fixed to check the validity of a range where
            values for both the low and high ends have been found by (among
            other things) looking to see if the "high" key is in the previous
            CI of the CI holding the "low" key.  This indicates that no keys
            satisfied the range, if true.
           Added error analysis and reporting to the RANGE case.
05/04/84 by Matthew Pierret:  Changed to use FIELD_TABLE_VERSION_3, added
            undeclared builtins, and changed to use dm_error_$bad_vector_type
            instead of $wrong_vector_type.
06/07/84 by Matthew Pierret:  Re-named cm_$get_element to cm_$get.
10/28/84 by Lindsey L. Spratt:  Changed to use version 2 index_opening_info.
            Changed to use ERROR_RETURN.
03/01/85 by Matthew C. Pierret:  Changed to always check if the low_id_string
            is "greater" than the high_id_string if both are non-zero.
            Previously it was thought that this case could only occur in an
            equals-only search.  but it can happen in a range search also.
03/07/85 by R. Michael Tague:  Changed opening info version to version 3.
03/12/85 by Lindsey Spratt:  Fixed RANGE portion of algorithm to only do the
	  low_id_string/high_id_string check if there is a non-null
	  low.value_ptr (i.e., there is an explicit low end of the range).
03/30/85 by Lindsey Spratt: Fixed RANGE searches to always honor the equal
	  portions of the constraint.  When only one of the two ends of the
	  range is explicitly given in a RANGE, and there are one or more
	  equal fields (preceding the RANGE field), then the other end of
	  the range must be searched for explicitly to be the most distant
	  keys from the specified end which still meet the equality
	  contraints.
*/
/* format: style2,ind3 */
%page;
/* format: style2,ind3 */

im_structural_search:
   proc (p_index_opening_info_ptr, p_index_cursor_ptr, p_is_relative_search, p_interval_specification_ptr, p_no_match,
        p_code);


/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_index_opening_info_ptr
			       ptr parameter;
      dcl	    p_index_cursor_ptr     ptr parameter;
      dcl	    p_is_relative_search   bit (1) aligned parameter;
      dcl	    p_interval_specification_ptr
			       ptr parameter;
      dcl	    p_no_match	       bit (1) aligned parameter;
      dcl	    p_code	       fixed bin (35) parameter;

/* Automatic */

      dcl	    found_key	       bit (1) aligned init ("0"b);
      dcl	    1 local_leaf_ci_header like leaf_ci_header;
      dcl	    1 position_stack       aligned,
	      2 depth	       fixed bin (17),
	      2 id_string	       (10) bit (36) aligned;

      dcl	    interval_idx	       fixed bin;

/* Based */
/* Builtin */

      dcl	    (addr, length, null, unspec)
			       builtin;

/* Controlled */
/* Constant */

      dcl	    myname	       init ("im_structural_search") char (32) varying internal static options (constant);
      dcl	    (WANT_EQUAL, WANT_GREATER, WANT_LESS)
			       init ("1"b) bit (1) aligned options (constant) internal static;

      dcl	    WANT_KEY_LESS_THAN_VECTOR
			       init ("1"b) bit (1) aligned internal static options (constant);

/* Entry */

      dcl	    sub_err_	       entry () options (variable);
      dcl	    im_basic_search	       entry (ptr, ptr, bit (1) aligned, ptr, bit (1) aligned, bit (1) aligned,
			       bit (1) aligned, ptr, bit (36) aligned, ptr, fixed bin (35));

/* External */

      dcl	    (
	    dm_error_$wrong_cursor_type,
	    dm_error_$programming_error,
	    dm_error_$bad_first_key_idx,
	    dm_error_$bad_last_key_idx,
	    dm_error_$bad_leaf_node,
	    dm_error_$bad_vector_type,
	    error_table_$unimplemented_version
	    )		       fixed bin (35) ext;

/* END OF DECLARATIONS */

      index_opening_info_ptr = p_index_opening_info_ptr;
      call CHECK_VERSION_CHAR (index_opening_info.version, INDEX_OPENING_INFO_VERSION_3, "index_opening_info");

      index_cursor_ptr = p_index_cursor_ptr;
      if index_cursor.type ^= INDEX_CURSOR_TYPE
      then call sub_err_ (dm_error_$wrong_cursor_type, myname, ACTION_CANT_RESTART, null, 0,
	      "^/Expected an ""index"" type cursor (type ^d).  Received a cursor of type ^d.", INDEX_CURSOR_TYPE,
	      index_cursor.type);
      call CHECK_VERSION ((index_cursor.version), (INDEX_CURSOR_VERSION_3), "index_cursor");

      field_table_ptr = index_opening_info.field_table_ptr;
      call CHECK_VERSION_CHAR (field_table.version, FIELD_TABLE_VERSION_3, "field_table");

      interval_specification_ptr = p_interval_specification_ptr;
      call CHECK_VERSION_CHAR (interval_specification.version, INTERVAL_SPECIFICATION_VERSION_2, "interval_specification")
	 ;

      p_code = 0;

      position_stack.depth = 0;
      interval_bead_ptr = interval_specification.first_interval_bead_ptr;

      p_no_match = "1"b;

INTERVAL_LOOP:
      do interval_idx = 1 to interval_specification.number_of_intervals;
         simple_typed_vector_ptr = interval_bead.simple_typed_vector_ptr;

         if simple_typed_vector.type ^= SIMPLE_TYPED_VECTOR_TYPE
         then call sub_err_ (dm_error_$bad_vector_type, myname, ACTION_CANT_RESTART, null, 0,
	         "^/Expecting a simple_typed_vector, type ^d, 
but received a type ^d structure.", SIMPLE_TYPED_VECTOR_TYPE, simple_typed_vector.type);

         found_key = "0"b;
         if interval_bead.low.value_ptr = interval_bead.high.value_ptr
	    & simple_typed_vector.number_of_dimensions = field_table.number_of_fields
         then
EXACT_MATCH:
	  do;
	     simple_typed_vector.dimension (simple_typed_vector.number_of_dimensions).value_ptr =
		interval_bead.low.value_ptr;

	     call im_basic_search (index_opening_info_ptr, p_index_cursor_ptr, p_is_relative_search,
		addr (position_stack), WANT_EQUAL, "0"b, "0"b, simple_typed_vector_ptr, interval_bead.low.id_string,
		null, p_code);
	     if p_code ^= 0
	     then call ERROR_RETURN (p_code);
	     interval_bead.high.id_string = interval_bead.low.id_string;
	     found_key = (interval_bead.low.id_string ^= "0"b);

	  end EXACT_MATCH;
         else
RANGE:
	  do;
	     if interval_bead.low.value_ptr ^= null
	     then
	        do;
		 simple_typed_vector.dimension (simple_typed_vector.number_of_dimensions).value_ptr =
		      interval_bead.low.value_ptr;

		 call im_basic_search (index_opening_info_ptr, p_index_cursor_ptr, p_is_relative_search,
		      addr (position_stack), (USES_EQUAL_OPERATOR (interval_bead.low.operator_code)),
		      (USES_GREATER_OPERATOR (interval_bead.low.operator_code)), "0"b, simple_typed_vector_ptr,
		      interval_bead.low.id_string, null, p_code);
		 if p_code ^= 0
		 then call ERROR_RETURN (p_code);
		 found_key = (interval_bead.low.id_string ^= "0"b);
	        end;
	     else if simple_typed_vector.number_of_dimensions > 1
	     then
	        do;				/* There are one or more fields constrained to be equal,  All of the keys
found must be greater than or equal to the key-head consisting of only 
these equal fields.
*/
		 simple_typed_vector.number_of_dimensions = simple_typed_vector.number_of_dimensions - 1;
						/* Hide the Range Field from basic search. */
		 call im_basic_search (index_opening_info_ptr, p_index_cursor_ptr, p_is_relative_search,
		      addr (position_stack), WANT_EQUAL, WANT_GREATER, "0"b, simple_typed_vector_ptr,
		      interval_bead.low.id_string, null, p_code);
		 if p_code ^= 0
		 then call ERROR_RETURN (p_code);
		 simple_typed_vector.number_of_dimensions = simple_typed_vector.number_of_dimensions + 1;
						/* Put it back the way it's supposed to be. */
		 found_key = (interval_bead.low.id_string ^= "0"b);
	        end;

	     if (interval_bead.high.value_ptr ^= null | simple_typed_vector.number_of_dimensions > 1)
		& (interval_bead.low.value_ptr = null | found_key)
	     then
	        do;
		 if interval_bead.high.value_ptr ^= null ()
		 then
		    do;
		       simple_typed_vector.dimension (simple_typed_vector.number_of_dimensions).value_ptr =
			  interval_bead.high.value_ptr;

		       call im_basic_search (index_opening_info_ptr, p_index_cursor_ptr, p_is_relative_search,
			  addr (position_stack), (LESS_OR_EQUAL_OPERATOR_CODE = interval_bead.high.operator_code),
			  "0"b, WANT_KEY_LESS_THAN_VECTOR, simple_typed_vector_ptr, interval_bead.high.id_string,
			  null, p_code);
		       if p_code ^= 0
		       then call ERROR_RETURN (p_code);
		    end;
		 else
		    do;				/* This case is for when there is one or more "equal" fields, the highest key 
in this range must still be less than or equal to the equal fields key-head.
*/
		       simple_typed_vector.number_of_dimensions = simple_typed_vector.number_of_dimensions - 1;
						/* Hide the Range Field from basic search. */
		       call im_basic_search (index_opening_info_ptr, p_index_cursor_ptr, p_is_relative_search,
			  addr (position_stack), WANT_EQUAL, "0"b, WANT_LESS, simple_typed_vector_ptr,
			  interval_bead.high.id_string, null, p_code);
		       if p_code ^= 0
		       then call ERROR_RETURN (p_code);
		       simple_typed_vector.number_of_dimensions = simple_typed_vector.number_of_dimensions + 1;
						/* Put it back the way it's supposed to be. */
		    end;
		 if interval_bead.high.id_string = "0"b
		 then found_key = "0"b;
		 else if interval_bead.low.value_ptr = null ()
		 then found_key = "1"b;

/* For special search situations, it is possible for the "high" search to
return a key which is one below the key returned by the "low" search.  This
indicates that there are no keys which satisfy the range specification.
This situation is easy to check for when the keys are in the same CI.  When
they are in different CIs, it is necessary to get the CI header for the "low"
key.  Then, if the "low" key is the first key in its CI, it is possible that
the "high" key is the last key in the "low" key CI's preceding CI (indicating
that no keys in the index satisfy the range request).
*/

		 else if addr (interval_bead.low.id_string) -> element_id.control_interval_id
		      = addr (interval_bead.high.id_string) -> element_id.control_interval_id
		 then
		    do;
		       found_key =
			  (addr (interval_bead.low.id_string) -> element_id.index
			  <= addr (interval_bead.high.id_string) -> element_id.index);
		       if ^found_key
		       then if (addr (interval_bead.low.id_string) -> element_id.index - 1
			       ^= addr (interval_bead.high.id_string) -> element_id.index)
			  then call sub_err_ (dm_error_$programming_error, myname, ACTION_CANT_RESTART, null, 0,
				  "^/A range search failed with the ""low"" key more than one slot greater than
the ""high"" key.  They are in control interval ^d, slots ^d and ^d
respectively. The ""low"" key and the ""high"" key may only be in reverse
order if they are consecutive.", addr (interval_bead.low.id_string) -> element_id.control_interval_id,
				  addr (interval_bead.low.id_string) -> element_id.index,
				  addr (interval_bead.high.id_string) -> element_id.index);
		    end;
		 else
		    do;
		       call GET_CI_HEADER ((addr (interval_bead.low.id_string) -> element_id.control_interval_id),
			  addr (local_leaf_ci_header));
		       found_key =
			  (local_leaf_ci_header.common.previous_id
			  ^= addr (interval_bead.high.id_string) -> element_id.control_interval_id);
		       if ^found_key
		       then if addr (interval_bead.low.id_string) -> element_id.index
			       ^= local_leaf_ci_header.common.key_range.first
			  then call sub_err_ (dm_error_$programming_error, myname, ACTION_CANT_RESTART, null, 0,
				  "^a (^d)^/^a (^d), ^a^/^a ^d ^a (^d). ^a^/^a",
				  "^/A range search failed with the ""low"" key in the control interval",
				  addr (interval_bead.low.id_string) -> element_id.control_interval_id,
				  "following the ""high"" key's control interval",
				  addr (interval_bead.high.id_string) -> element_id.control_interval_id,
				  "but the ""low"" key was", "in slot",
				  addr (interval_bead.low.id_string) -> element_id.index,
				  "instead of the first key slot", local_leaf_ci_header.common.key_range.first,
				  "The ""low"" key and the",
				  """high"" key may only be in reverse order if they are consecutive.");
			  else
			     do;
			        call GET_CI_HEADER
				   ((addr (interval_bead.high.id_string) -> element_id.control_interval_id),
				   addr (local_leaf_ci_header));
			        if local_leaf_ci_header.common.key_range.last
				   ^= addr (interval_bead.high.id_string) -> element_id.index
			        then call sub_err_ (dm_error_$programming_error, myname, ACTION_CANT_RESTART, null,
				        0, "^a (^d)^/^a (^d), ^a^/^a ^d ^a (^d). ^a^/^a",
				        "^/A range search failed with the ""low"" key in the control interval",
				        addr (interval_bead.low.id_string) -> element_id.control_interval_id,
				        "following the ""high"" key's control interval",
				        addr (interval_bead.high.id_string) -> element_id.control_interval_id,
				        "but the ""high"" key was", "in slot",
				        addr (interval_bead.high.id_string) -> element_id.index,
				        "instead of the last key slot",
				        local_leaf_ci_header.common.key_range.last, "The ""low"" key and the",
				        """high"" key may only be in reverse order if they are consecutive.");
			     end;
		    end;
	        end;
	  end RANGE;

         if ^found_key
         then interval_bead.low.id_string, interval_bead.high.id_string = "0"b;
         p_no_match = p_no_match & ^found_key;
         interval_bead_ptr = interval_bead.next;

      end INTERVAL_LOOP;
MAIN_RETURN:
      return;


ERROR_RETURN:
   proc (er_p_code);
      dcl	    er_p_code	       fixed bin (35) parameter;
      p_code = er_p_code;
      goto MAIN_RETURN;
   end ERROR_RETURN;
%page;
CHECK_VERSION:
   proc (p_received_version, p_expected_version, p_structure_name);
      dcl	    p_received_version     fixed bin (35);
      dcl	    p_expected_version     fixed bin (35);
      dcl	    p_structure_name       char (*);

      if p_received_version ^= p_expected_version
      then call sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
	      "^/Expected version ^d of the ^a structure.
Received version ^d instead.", p_expected_version, p_structure_name, p_received_version);

   end CHECK_VERSION;
%page;
CHECK_VERSION_CHAR:
   proc (p_expected_version, p_received_version, p_structure_name);

      dcl	    (p_expected_version, p_received_version)
			       char (8) aligned;
      dcl	    p_structure_name       char (*) parameter;

      if p_expected_version ^= p_received_version
      then call sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
	      "^/Expected version ^a of the ^a structure.  
Received version ^a, instead.", p_expected_version, p_structure_name, p_received_version);
   end CHECK_VERSION_CHAR;
%page;
GET_CI_HEADER:
   proc (gch_p_control_interval_id, gch_p_leaf_ci_header_ptr);
      dcl	    gch_p_control_interval_id
			       fixed bin (24) unsigned;
      dcl	    gch_p_leaf_ci_header_ptr
			       ptr;

      dcl	    gch_code	       fixed bin (35);
      dcl	    1 gch_element_id       aligned like element_id;
      dcl	    gch_element_id_string  bit (36) aligned based (addr (gch_element_id));

      gch_element_id.control_interval_id = gch_p_control_interval_id;
      gch_element_id.index = DEFAULT_INDEX_CONTROL_INTERVAL_HEADER_SLOT;
      gch_code = 0;

      call collection_manager_$get (index_cursor.file_opening_id, index_cursor.collection_id, gch_element_id_string, 0,
	 gch_p_leaf_ci_header_ptr, length (unspec (gch_p_leaf_ci_header_ptr -> leaf_ci_header)), null, "0"b,
	 gch_p_leaf_ci_header_ptr, (0), gch_code);
      if gch_code ^= 0
      then call ERROR_RETURN (gch_code);

      if gch_p_leaf_ci_header_ptr -> common_ci_header.is_leaf
      then
         do;
	  if gch_p_leaf_ci_header_ptr -> leaf_ci_header.common.key_range.first < 0
	  then call ERROR_RETURN (dm_error_$bad_first_key_idx);
	  else if gch_p_leaf_ci_header_ptr -> leaf_ci_header.common.key_range.last
	       < gch_p_leaf_ci_header_ptr -> leaf_ci_header.common.key_range.first
	  then call ERROR_RETURN (dm_error_$bad_last_key_idx);
         end;
      else call ERROR_RETURN (dm_error_$bad_leaf_node);
      return;

   end GET_CI_HEADER;
%page;
%include vu_typed_vector;
%page;
%include dm_interval_spec;
%page;
%include dm_operator_constants;
%page;
%include sub_err_flags;
%page;
%include dm_element_id;
%page;
%include dm_im_ci_header;
%page;
%include dm_im_cursor;
%page;
%include dm_collmgr_entry_dcls;
%page;
%include dm_field_table;
%page;
%include dm_im_opening_info;
   end im_structural_search;
