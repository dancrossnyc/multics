/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION:
          This module does the initial insertion of a key into an empty index
     collection.  It creates the first control interval node of the index,
     which is a leaf node as well as being the root node.
*/

/* HISTORY:
Written by Lindsey Spratt, 04/05/82.
Modified:
04/14/82 by Lindsey Spratt: Changed to use the new allocate_element calling
	  sequence, which has added the maximum_space_available.
08/12/82 by Matthew Pierret:  Changed calling sequence to 
            collection_manager_$allocate_control_interval to accept the new
            control interval id in the aligned automatic variable root_ci.
            The unaligned index_header.root_id is then assigned this value.
08/30/82 by Lindsey Spratt:  Added the p_key_element_id_string parameter to
	  return the location of the newly allocated key.
11/02/82 by Lindsey Spratt:  Removed the p_index_cursor_ptr and
	  p_index_header_ptr parameters and added the
	  p_index_opening_info_ptr parameter.  General alterations to use
	  the opening info, to not update the key count (this
	  is now done by the caller), and to update the index_header root_id
	  via the im_update_opening_info$root_id operation.
06/12/84 by Matthew Pierret:  Re-named cm_$allocate_element to cm_$put.
10/28/84 by Lindsey L. Spratt:  Changed to use version 2 index_opening_info.
            Changed to use ERROR_RETURN.
03/07/85 by R. Michael Tague:  Changed opening info version to version 3.
*/
/* format: style2,ind3 */
%page;
/* format: style2,ind3 */

im_initial_insert:
   proc (p_index_opening_info_ptr, p_key_string, p_key_element_id_string, p_code);


/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_index_opening_info_ptr
			       ptr parameter;
      dcl	    p_key_string	       bit (*);
      dcl	    p_key_element_id_string
			       bit (36) aligned;
      dcl	    p_code	       fixed bin (35);

/* Automatic */

      dcl	    1 local_leaf_header    like leaf_ci_header;
      dcl	    root_ci	       fixed bin (24) unsigned;

/* Based */

/* Builtin */

      dcl	    null		       builtin;

/* Controlled */
/* Constant */

      dcl	    myname	       init ("im_initial_insert") char (32) varying internal static options (constant);

/* Entry */

      dcl	    im_update_opening_info$root_id
			       entry (ptr, uns fixed bin (24), fixed bin (35));
      dcl	    sub_err_	       entry () options (variable);
      dcl	    im_init_leaf_ci_header entry (ptr);

/* External */

      dcl	    error_table_$unimplemented_version
			       fixed bin (35);

/* END OF DECLARATIONS */

      index_opening_info_ptr = p_index_opening_info_ptr;
      call CHECK_VERSION (index_opening_info.version, INDEX_OPENING_INFO_VERSION_3, "index_opening_info");

      p_code = 0;
      p_key_element_id_string = "0"b;

      call collection_manager_$allocate_control_interval (index_opening_info.file_opening_id,
	 index_opening_info.collection_id, root_ci, p_code);

      if p_code ^= 0
      then call ERROR_RETURN (p_code);

      element_id.control_interval_id = root_ci;
      element_id.index = DEFAULT_INITIAL_KEY_SLOT;
      call collection_manager_$put (index_opening_info.file_opening_id, index_opening_info.collection_id,
	 addr (p_key_string), length (p_key_string), element_id_string, (0), p_code);
      if p_code ^= 0
      then call ERROR_RETURN (p_code);
      p_key_element_id_string = element_id_string;

      call im_init_leaf_ci_header (addr (local_leaf_header));

      local_leaf_header.common.key_tail_space_used_since_last_prefix_compaction = length (p_key_string);
      local_leaf_header.common.key_range = DEFAULT_INITIAL_KEY_SLOT;
      element_id.index = DEFAULT_INDEX_CONTROL_INTERVAL_HEADER_SLOT;
      call collection_manager_$put (index_opening_info.file_opening_id, index_opening_info.collection_id,
	 addr (local_leaf_header), length (unspec (local_leaf_header)), element_id_string, (0), p_code);
      if p_code ^= 0
      then call ERROR_RETURN (p_code);

/* Record the modified index_header in the index collection.  The new version
of the header has the root_id and the updated number of keys.
*/

      call im_update_opening_info$root_id (index_opening_info_ptr, root_ci, p_code);
      if p_code ^= 0
      then call ERROR_RETURN (p_code);

MAIN_RETURN:
      return;

ERROR_RETURN:
   proc (er_p_code);
      dcl	    er_p_code	       fixed bin (35) parameter;
      p_code = er_p_code;
      goto MAIN_RETURN;
   end ERROR_RETURN;
%page;
CHECK_VERSION:
   proc (p_received_version, p_expected_version, p_structure_name);
      dcl	    p_received_version     char (8) aligned parameter;
      dcl	    p_expected_version     char (8) aligned parameter;
      dcl	    p_structure_name       char (*);

      if p_received_version ^= p_expected_version
      then call sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
	      "^/Expected version ^d of the ^a structure.
Received version ^d instead.", p_expected_version, p_structure_name, p_received_version);

   end CHECK_VERSION;
%page;
%include sub_err_flags;
%page;
%include dm_im_ci_header;
%page;
%include dm_collmgr_entry_dcls;
%page;
%include dm_element_id;
%page;
%include dm_im_opening_info;
   end im_initial_insert;
