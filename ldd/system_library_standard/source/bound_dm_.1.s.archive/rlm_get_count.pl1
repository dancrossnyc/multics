/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1986 *
        *                                                         *
        *********************************************************** */

/****^  HISTORY COMMENTS:
  1) change(86-08-19,Dupuis), approve(86-08-19,MCR7401), audit(86-09-29,Blair),
     install(86-10-02,MR12.0-1173):
     This module implements the relation_manager_$get_count entrypoint. This
     functionality was previously contained in the rlm_general_search program,
     but was moved here when that program was replaced.
  2) change(86-10-13,Dupuis), approve(86-10-13,MCR7401), audit(86-10-13,Blair),
     install(86-10-15,MR12.0-1186):
     Changed it to not pass dm_error_$record_not_found back to the calling
     program. This caused mrds to report an error back to the user, when
     really it was just an empty database and a count of zero would suffice.
                                                   END HISTORY COMMENTS */

/* format: off */

rlm_get_count: proc (

	p_relation_cursor_ptr,    /* input: to the relation cursor */
	p_specification_ptr,      /* input: to the relation search spec */
	p_tuple_count,            /* output: number that matched */
	p_code                    /* output: success or failure */
		);

dcl p_code fixed bin (35) parameter;
dcl p_relation_cursor_ptr ptr parameter;
dcl p_specification_ptr ptr parameter;
dcl p_tuple_count fixed bin (35) parameter;


	relation_cursor_ptr = p_relation_cursor_ptr;
	p_tuple_count = 0;
	p_code = 0;

	call INITIALIZE;

	on cleanup call TERMINATE;

	call SET_AND_CHECK_OPENING_INFO;
	call GET_COUNT_OF_TUPLES;
	call TERMINATE;

RETURN:

	return;
%page;
CHECK_VERSION: proc (

	cv_structure_name,   /* input: name of structure */
	cv_received_version, /* input: version of structure */
	cv_expected_version  /* input: expected version of structure */
		   );

dcl cv_expected_version char (8) aligned;
dcl cv_received_version char (8) aligned;
dcl cv_structure_name char (*);

	if cv_received_version ^= cv_expected_version
	then call sub_err_ (error_table_$unimplemented_version, RLM_GET_COUNT, ACTION_CANT_RESTART, null, 0,
	     "^/Expected version ^a of the ^a structure.^/Received version ^a instead.",
	     cv_expected_version, cv_structure_name, cv_received_version);

	return;

     end CHECK_VERSION;
%page;
ERROR_RETURN: proc (er_code);

dcl er_code fixed bin (35) parameter;

	p_code = er_code;
	call TERMINATE;

	goto RETURN;

     end ERROR_RETURN;
%page;
GET_COUNT_OF_TUPLES: proc;

dcl gcot_code fixed bin (35);

	call record_manager_$create_cursor (relation_cursor.file_opening_id,
	     relation_header.record_collection_id, relation_cursor.work_area_ptr, record_cursor_ptr, gcot_code);
	if gcot_code ^= 0
	then call ERROR_RETURN (gcot_code);

	call record_manager_$get_record_count (null, record_cursor_ptr, p_tuple_count, gcot_code);
	if gcot_code ^= 0 & gcot_code ^= dm_error_$record_not_found
	then call ERROR_RETURN (gcot_code);

	return;

     end GET_COUNT_OF_TUPLES;
%page;
INITIALIZE: proc;

	call CHECK_VERSION ("relation_cursor", relation_cursor.version, RELATION_CURSOR_VERSION_2);

	if p_specification_ptr ^= null
	then call sub_err_ (error_table_$null_info_ptr, RLM_GET_COUNT,
	     ACTION_CANT_RESTART, null, 0,
	     "^/A relation_search_specification isn't implemented for relation_manager_$get_count.");

	if relation_cursor.work_area_ptr ^= null
	then relation_cursor.work_area_ptr = get_dm_free_area_ ();

	record_cursor_ptr = null;

	return;

     end INITIALIZE;
%page;
SET_AND_CHECK_OPENING_INFO: proc;

dcl sacoi_code fixed bin (35);

	call rlm_opening_info$get (relation_cursor.file_opening_id, relation_opening_info_ptr, sacoi_code);
	if sacoi_code ^= 0
	then call ERROR_RETURN (sacoi_code);

	call CHECK_VERSION ("relation_opening_info", relation_opening_info.version, RELATION_OPENING_INFO_VERSION_2);

	relation_header_ptr = relation_opening_info.relation_header_ptr;
	call CHECK_VERSION ("relation_header", relation_header.version, RELATION_HEADER_VERSION_3);

	return;

     end SET_AND_CHECK_OPENING_INFO;
%page;
TERMINATE: proc;

dcl t_code fixed bin (35);

	if record_cursor_ptr ^= null
	then call record_manager_$destroy_cursor (record_cursor_ptr, t_code);

	return;

     end TERMINATE;
%page;
dcl RLM_GET_COUNT char (13) internal static options (constant) init ("rlm_get_count");
dcl cleanup condition;
dcl dm_error_$record_not_found fixed bin(35) ext static;
dcl error_table_$null_info_ptr fixed bin(35) ext static;
dcl error_table_$unimplemented_version fixed bin(35) ext static;
dcl get_dm_free_area_ entry() returns(ptr);
dcl null builtin;
dcl record_cursor_ptr ptr;
dcl record_manager_$create_cursor entry (bit (36) aligned, bit (36) aligned, ptr, ptr, fixed bin (35));
dcl record_manager_$destroy_cursor entry (ptr, fixed bin (35));
dcl record_manager_$get_record_count entry (ptr, ptr, fixed bin (35), fixed bin (35));
dcl rlm_opening_info$get entry (bit(36) aligned, ptr, fixed bin(35));
dcl sub_err_ entry() options(variable);
%page;
%include dm_rlm_cursor;
%page;
%include dm_rlm_header;
%page;
%include dm_rlm_opening_info;
%page;
%include sub_err_flags;

end rlm_get_count;
