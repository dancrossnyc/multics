/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/****^  HISTORY COMMENTS:
  1) change(85-11-27,Herbst), approve(87-07-23,MCR7697),
     audit(87-07-23,GDixon), install(87-08-04,MR12.1-1055):
     Added static handler for system_message_.
  2) change(86-01-17,Swenson), approve(86-07-23,MCR7444), audit(86-07-24,Ex),
     install(86-08-06,MR12.0-1117):
     Changed to use the error code from the original iox_ call during stream
     attachment, rather than the one from the ios_ call, in the process
     termination structure.
                                                   END HISTORY COMMENTS */

/* format: style2 */

/* This is the first user ring program to run in an ordinary process,
     be it interactive, absentee, or daemon. It is responsable for

       1) Setting up iox_.
       2) Setting up the pl/1 runtime, by establishing the correct
          condition handlers.
       3) Setting up timer manager for the current ring.
       4) finding and calling the process overseer.

  When entered through the main entrypoint, a minimal stack frame is
  established from which the process overseer is called.


   Last Modified (date and reason):


-- Ancient History --

   Initial Coding 8/14/74 by S. Webber from real_init_admin_ of that time
   7/1/75	by S. Barr to convert to iox_.
   7/15/75	by S.Webber to add calls to set up static handlers.
   11/05/75 by R. Bratt for isot fault
   06/07/77 by M. Weaver to delete isot fault
   08/27/77 by S. Webber to add term handler
   01/09/79 by C. Hornig to remove tw_ to tty_ conversion
   03/05/79 by B. Margulies to remove restriction on pit pointers and to
   establish the working directory
   04/15/81 by B. Margulies for new iox initialization.
   1 July 1981 by B. Margulies for pl1 static handlers.

-- Modern History --

     November 1981 by Benson I. Margulies
       absentee special cases -> abs_io_
       default handler setup <- process overseer
       the rest from user_real_init_admin_.
     06/28/84 by Lee A. Newcomb:  added static handlers for
	dm_shutdown_warning_ and dm_user_shutdown_ IPS', moved
	all include files to the end, and put all PL/I entities
	in the main proc (e.g., conditions and builtins).
     07/22/84 by R. Michael Tague:  Changed the entry names of the two
                 Data Management static handlers.
     08/22/84 by R. Michael Tague:  Removed the static handlers for
                 dm_shutdown_warning_ and dm_user_shutdown_.  Added static
                 handlers for system_shutdown_scheduled_ and
                 dm_shutdown_scheduled_.
     10/05/84 by Steve Herbst: Changed to use absentee_listen_ instead of
	       listen_ for an absentee process.
*/
%page;
initialize_process_:
     procedure;


	declare listener		 entry (character (*) varying) variable;
	declare an_entry		 entry variable;
	declare process_overseer	 entry (pointer, bit (1) aligned, character (*) varying) variable;
	declare default_handler	 entry variable;
	declare pit_pointer		 pointer;
	declare code		 fixed bin (35);
	declare wdir_code		 fixed bin (35);
	declare initial_command_line	 character (256) varying;
	declare requested_call_to_listen_
				 bit (1) aligned;
	declare absentee_listen_	 entry (character (*) varying);
	declare com_err_		 entry options (variable);
	declare listen_		 entry (character (*) var);
	declare hcs_$fs_search_set_wdir
				 entry (char (*), fixed bin (35));
	declare system_message_handler_
				 entry ();

	declare error_table_$termination_requested
				 fixed bin (35) ext static;

	declare any_other		 condition;
	dcl     (addr, baseptr, length, null, pointer, substr)
				 builtin;
%page;
	on any_other call primitive_handler;

	code = 0;

	call get_pit_pointer (pit_pointer, code);
	if code ^= 0
	then call terminate ("init_error", "Can't find [pd]>pit.", code);

	wdir_code = 0;
	if pit_pointer -> pit.at.vinitproc
	then call hcs_$fs_search_set_wdir (pit_pointer -> pit.homedir, wdir_code);

	call find_default_handler (default_handler, code);
	if code ^= 0
	then call terminate ("init_error", "Can't find default_error_handler_$wall", code);

	on any_other call default_handler;

	call establish_static_handlers (code);
	if code ^= 0
	then call terminate ("init_error", "Can't establish static handlers", code);

	call init_iox (pit_pointer, code);
	if code ^= 0
	then call terminate ("io_attach", "Can't initialize I/O system.", code);

	call check_wdir_code;			/* We can talk now, so print the error */

	call find_process_overseer (pit_pointer, process_overseer, code);
	if code ^= 0
	then call terminate ("no_initproc", "Could not find process overseer.", code);

	requested_call_to_listen_ = "0"b;
	call process_overseer (pit_pointer, requested_call_to_listen_, initial_command_line);
	if requested_call_to_listen_
	then do;
		call enable_quits;
		if ^pit_pointer -> pit.at.vinitproc
		then do;
			an_entry = listen_;		/* find & initiate this before wdir=homedir */
			an_entry = absentee_listen_;	/* find & initiate this too */
			call hcs_$fs_search_set_wdir (pit_pointer -> pit.homedir, wdir_code);
			call check_wdir_code;
		     end;
		if pit_pointer -> pit.abs_queue = -1
		then /* interactive */
		     listener = listen_;
		else listener = absentee_listen_;

		call listener (initial_command_line);
	     end;

/* We should never return here */
	call terminate ("fatal_error", "Process overseer or listener returned.", error_table_$termination_requested);
%page;
worker_procedures:					/* Never Call at this entrypoint */
     procedure options (non_quick);

/* We declare all things used by the entries in this internal proc here */
/* (Note: some/many of these may be better off in the main proc, LAN */

/* Automatic */
	dcl     (
	        io_module		 character (32),
	        po_ptr		 ptr
	        )			 automatic;

/* Automatic Structures */
	dcl     1 term_structure	 aligned automatic, /* action to take upon process termination */
		2 version		 fixed bin init (0),/* version of structure */
		2 status_code	 fixed bin (35);	/* fatal error code */

/* Entries */
	dcl     cu_$make_entry_value	 entry (ptr, entry);
	dcl     dm_misc_util_$shutdown_handler
				 entry ();
	dcl     find_command_$fc_no_message
				 entry (ptr, fixed bin, ptr, fixed bin (35));
	dcl     get_pdir_		 entry () returns (char (168));
	dcl     hcs_$initiate	 entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr,
				 fixed bin (35));
	dcl     hcs_$make_entry	 entry (ptr, char (*), char (*), entry, fixed bin (35));
	dcl     ioa_		 entry options (variable);
	dcl     iox_$init_standard_iocbs
				 entry;
	dcl     pl1_resignaller_$establish_handlers
				 entry;
	dcl     sct_manager_$set	 entry (fixed bin, entry, fixed bin (35));
	dcl     sus_signal_handler_	 entry;
	dcl     system_shutdown_handler_
				 entry ();
	dcl     term_signal_handler_	 entry;
	dcl     terminate_process_	 ext entry (char (*), ptr);
	dcl     timer_manager_$alarm_interrupt
				 entry;
	dcl     timer_manager_$cpu_time_interrupt
				 entry;
	dcl     wkp_signal_handler_	 entry;

/* Entry (variable) */
	dcl     entry		 entry variable;
	dcl     po		 entry variable;	/* for find_process_overseer */

/* Parameters */
	dcl     (
	        code		 fixed bin (35),
	        fatal_code		 fixed bin (35),	/* code indicating fatal error */
	        pit_ptr		 pointer,
	        real_why		 character (*),	/* debugging info on stack */
	        sys_why		 char (*)		/* arg for terminate_process */
	        )			 parameter;

find_default_handler:
     entry (entry, code);

	call hcs_$make_entry (null (), "default_error_handler_", "wall", entry, code);
	return;
%page;
establish_static_handlers:
     entry (code);

	code = 0;
	call pl1_resignaller_$establish_handlers;
	call sct_manager_$set (cput_sct_index, timer_manager_$cpu_time_interrupt, (0));
	call sct_manager_$set (alrm_sct_index, timer_manager_$alarm_interrupt, (0));
	call sct_manager_$set (term_sct_index, term_signal_handler_, (0));
	call sct_manager_$set (wkp_sct_index, wkp_signal_handler_, (0));
	call sct_manager_$set (susp_sct_index, sus_signal_handler_, (0));
	call sct_manager_$set (system_shutdown_scheduled_sct_index, system_shutdown_handler_, (0));
	call sct_manager_$set (dm_shutdown_scheduled_sct_index, dm_misc_util_$shutdown_handler, (0));
	call sct_manager_$set (system_message_sct_index, system_message_handler_, (0));
	return;
%page;
get_pit_pointer:
     entry (pit_ptr, code);


	pit_ptr = null ();
	code = 0;

/* We leave the pit in the address space to avoid the need for multiple
   initiations/static pointers in user info */

	call hcs_$initiate (get_pdir_ (), "pit", "pit_", (0), (0), pit_ptr, code);
						/* get pointer to the PIT */
	if pit_ptr ^= null ()
	then code = 0;
	return;
%page;
init_iox:
     entry (pit_ptr, code);

	call iox_$init_standard_iocbs;		/* will terminate process if it cant do */

	code = 0;
	io_module = pit_ptr -> pit.outer_module;	/* Get DIM name */

	call iox_$attach_ptr (iox_$user_io, io_module || " -login_channel", null (), code);
	if code = 0
	then call iox_$open (iox_$user_io, Stream_input_output, "0"b, code);
	return;
%page;
find_process_overseer:
     entry (pit_ptr, po, code);

/* Use find_command_ cause cv_entry is not on the tape */

	call find_command_$fc_no_message (addr (pit_ptr -> pit.login_responder),
	     length (pit_ptr -> pit.login_responder), po_ptr, code);
	if code ^= 0
	then do;
		call ioa_ ("Could not find specified initial procedure: ^a", pit_ptr -> pit.login_responder);
		return;
	     end;
	call cu_$make_entry_value (po_ptr, po);
	return;
%page;
terminate:
     entry (sys_why, real_why, fatal_code);

	term_structure.status_code = fatal_code;	/* transmit code to terminate routine */
	call terminate_process_ (sys_why, addr (term_structure));
						/* terminate the process */

/* terminate must fall through to enable_quits */

enable_quits:
     entry;
	call iox_$control (iox_$user_io, "quit_enable", null (), (0));
	return;
     end worker_procedures;
%page;
primitive_handler:
     procedure options (non_quick);			/* Before DEH */

	dcl     find_condition_info_	 entry (pointer, pointer, fixed binary (35));
	dcl     1 CI		 aligned like condition_info;
	dcl     code		 fixed bin (35);

	on any_other call terminate_minus_2;

	call find_condition_info_ (null (), addr (CI), code);
	if code ^= 0
	then call terminate ("init_error", "Mysterious Fault", code);

	if CI.mc_ptr ^= null ()
	then call terminate ("init_error", (CI.condition_name), (CI.mc_ptr -> mc.errcode));
	else call terminate ("init_error", (CI.condition_name), (0));
	call terminate_minus_2;			/* What else do to? */

     end primitive_handler;

terminate_minus_2:
     procedure options (non_quick);

	dcl     sptr		 pointer;
	dcl     shiva		 bit (36) aligned based (sptr);
						/* "... death, the destroyer of worlds..." */

	sptr = pointer (baseptr (-2), -2);
	shiva = "666666"b3;				/* A beastly fate */
     end terminate_minus_2;

check_wdir_code:
     procedure;

	if wdir_code ^= 0
	then call com_err_ (wdir_code, "initialize_process_", "Could not set working directory to home directory ^a.",
		pit_pointer -> pit.homedir);
     end check_wdir_code;
%page;
%include condition_info;
%page;
%include iox_entries;
%page;
%include iox_modes;
%page;
%include mc;
%page;
%include pit;
%page;
%include static_handlers;
%page;
%include user_attributes;

     end initialize_process_;
