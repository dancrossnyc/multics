/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1985 *
        *                                                         *
        *********************************************************** */

/****^  HISTORY COMMENTS:
  1) change(85-11-27,Herbst), approve(87-07-23,MCR7697),
     audit(87-07-23,GDixon), install(87-08-04,MR12.1-1055):
     New program.
  2) change(85-12-19,Herbst), approve(87-07-23,MCR7697),
     audit(87-07-23,GDixon), install(87-08-04,MR12.1-1055):
     Fixed to free all read messages, moved asum handle to
     user_message_handles.incl.pl1
  3) change(87-01-27,Brunelle), approve(87-07-23,MCR7697),
     audit(87-07-23,GDixon), install(87-08-04,MR12.1-1055):
     Changed to use user_message_$read_message instead of
     as_user_message_$user_read_message.  Changed to send messages to the user
     via the message facility if at all possible.  Also to send message to
     initializer if an INACTIVITY message was received.
  4) change(87-04-20,Brunelle), approve(87-07-23,MCR7697),
     audit(87-07-23,GDixon), install(87-08-04,MR12.1-1055):
     Add call to iox_$control to "start" I/O on the channel again.
  5) change(87-04-22,Brunelle), approve(87-07-23,MCR7697),
     audit(87-07-23,GDixon), install(87-08-04,MR12.1-1055):
     Removed all use of message facility, instead, just sending message
     directly to user_i/o.
  6) change(87-07-23,Brunelle), approve(87-07-23,MCR7697),
     audit(87-07-23,GDixon), install(87-08-04,MR12.1-1055):
     Remove window in the freeing of message in cleanup handler and general
     minor cleanup.
                                                   END HISTORY COMMENTS */

/* format: style4 */

system_message_handler_: proc ();

/* Static handler for all system messages, those accompanied by the
   system_message_ IPS signal.  This program reads all pending system
   messages from the user_message_ facility and performs an appropriate
   action for each.

   Currently, there are two kinds of system messages supported, both from
   the Answering Service: warning and inactivity messages.

   Each is displayed on user_i/o.
*/

/* External */

dcl  iox_$control entry (ptr, char (*), ptr, fixed bin (35));
dcl  iox_$user_io ptr external;

/* Entries */

dcl  get_group_id_ entry () returns (char (32));
dcl  get_process_id_ entry () returns (bit (36));
dcl  get_system_free_area_ entry () returns (ptr);
dcl  hcs_$wakeup entry (bit (36) aligned, fixed bin (71), fixed bin (71), fixed bin (35));
dcl  ioa_$ioa_switch entry options (variable);
dcl  ioa_$rsnpnnl entry () options (variable);
dcl  user_info_$logout_data entry options (variable);
dcl  user_message_$read_message entry (ptr, ptr, fixed bin (35));

dcl  cleanup condition;

dcl  (addr, null, substr, unspec) builtin;

/* Internal Static */

dcl  system_area_ptr ptr int static init (null);

/* Based */

dcl  event_message_string char (8) aligned based (event_message_ptr); /* char string variable for event message */
dcl  system_area area based (system_area_ptr);

/* Automatic */

dcl  code fixed bin (35);				/* general error code */
dcl  event_message fixed bin (71);			/* event message for answering service */
dcl  event_message_ptr ptr;				/* ptr to event message */
dcl  inactivity_msg_rcvd bit (1);			/* set on if we process an inactivity warn message */
dcl  logout_channel fixed bin (71);			/* logout channel to initializer */
dcl  logout_pid bit (36) aligned;			/* process ID if initializer */
dcl  output_message char (1024);			/* message to user */
dcl  output_message_length fixed bin (21);		/* and length of same */

dcl  1 auto_asum_info aligned like as_user_message_info;
%page;
	if system_area_ptr = null then
	     system_area_ptr = get_system_free_area_ ();

	system_message_ptr = null;
	inactivity_msg_rcvd = "0"b;

	unspec (auto_asum_info) = "0"b;
	auto_asum_info.version = AS_USER_MESSAGE_INFO_VERSION_1;
	auto_asum_info.message_handle = SYSTEM_MESSAGE_HANDLE;
	auto_asum_info.destination_info.group_id = get_group_id_ ();
	auto_asum_info.destination_info.process_id = get_process_id_ ();

	on cleanup begin;
	     if auto_asum_info.message_ptr ^= null then
		call FREE_MESSAGE ();
	     if inactivity_msg_rcvd then
		call SEND_RESPONSE_TO_INITIALIZER ();
	end;

	do while ("1"b);

	     call GET_MESSAGE ();

	     if system_message.type = SYSTEM_MESSAGE_TYPE_AS_WARN then do;
		call ioa_$rsnpnnl ("^[^a: ^;^s^]^a",
		     output_message, output_message_length,
		     warn_system_message.caller ^= "", warn_system_message.caller,
		     warn_system_message.text);
	     end;
	     else if system_message.type = SYSTEM_MESSAGE_TYPE_AS_INACTIVITY then do;
		inactivity_msg_rcvd = "1"b;		/* remember we have to respond */
		call ioa_$rsnpnnl ("^[^a: ^;^s^]^a",
		     output_message, output_message_length,
		     inactivity_system_message.caller ^= "", inactivity_system_message.caller,
		     inactivity_system_message.text);
	     end;
	     else if system_message.type = SYSTEM_MESSAGE_TYPE_DM_SHUT then do;
						/* not currently used */
		call ioa_$rsnpnnl ("^[^a: ^;^s^]^a",
		     output_message, output_message_length,
		     dm_shut_system_message.caller ^= "", dm_shut_system_message.caller,
		     dm_shut_system_message.text);
	     end;

	     call FREE_MESSAGE ();

/* display message on user's screen */
	     call ioa_$ioa_switch (iox_$user_io,
		substr (output_message, 1, output_message_length));
	end;
RETURN:

/* make sure we restart all I/O again */
	call iox_$control (iox_$user_io, "start", null (), code);

/* if any of the messages were for inactivity, inform Initializer we are done */
	if inactivity_msg_rcvd then do;
	     call SEND_RESPONSE_TO_INITIALIZER ();
	end;

	return;
%page;
FREE_MESSAGE: proc;

dcl  based_message (auto_asum_info.message_length) fixed bin (35) based (auto_asum_info.message_ptr);

	free based_message in (system_area);
	auto_asum_info.message_ptr = null;

     end FREE_MESSAGE;
%page;
GET_MESSAGE: proc ();

	do while ("1"b);

	     auto_asum_info.message_ptr = null;
	     call user_message_$read_message (system_area_ptr, addr (auto_asum_info), code);
	     if code ^= 0 then go to RETURN;

	     system_message_ptr = auto_asum_info.message_ptr;

	     if system_message.version = SYSTEM_MESSAGE_VERSION_1 then do;

		if system_message.type = SYSTEM_MESSAGE_TYPE_AS_WARN then do;
		     if system_message.type_version = SYSTEM_MESSAGE_AS_WARN_V1 then return;
		end;

		else if system_message.type = SYSTEM_MESSAGE_TYPE_AS_INACTIVITY then do;
		     if system_message.type_version = SYSTEM_MESSAGE_AS_INACTIVITY_V1 then return;
		end;

		else if system_message.type = SYSTEM_MESSAGE_TYPE_DM_SHUT then do;
		     if system_message.type_version = SYSTEM_MESSAGE_DM_SHUT_V1 then return;
		end;
	     end;

	     else call FREE_MESSAGE ();
	end;

     end GET_MESSAGE;
%page;
SEND_RESPONSE_TO_INITIALIZER: proc ();

	event_message_ptr = addr (event_message);
	event_message_string = "inacrcvd";
	call user_info_$logout_data (logout_channel, logout_pid); /* get logout information */
	call hcs_$wakeup (logout_pid, logout_channel, event_message, code); /* send message to answering service */

     end SEND_RESPONSE_TO_INITIALIZER;
%page; %include as_user_message_info;
%page; %include system_message;
%page; %include user_message_handles;

     end system_message_handler_;
