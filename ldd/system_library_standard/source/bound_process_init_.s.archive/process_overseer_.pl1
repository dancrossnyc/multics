/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */

/* format: style2 */
process_overseer_:
     procedure (a_pit_ptr, call_listen_, initial_command_line);


/* Completely rewritten as part of the redesign of user ring process initialization
   and the standard command environment by V. Voydock on November 1, 1970 */

/* Modified to be upward compatible with new pit format on January 4, 1970 by R. J. Feiertag */
/* Modified to pass to start_up.ec an argument indicating whether process is interactive or absentee */
/* by E. Stone May 25, 1971 */
/* Modified to not put quotes around homedir in initial command line by V. Voydock
   in June 1971 */
/* Modified to have option to not restore io attachments after a "start" command, and to
   reset the mode of user_i/o to the default after a quit or unclaimed signal
   by V. Voydock in July 1971 */
/* Modified by R. J. Feiertag on February 4, 1972 to add default handlers, saving of IO devices
   other than syn, and checking the brief and no_startup flags. */
/* Modified by V. Voydock in May 1972 to complete installation of default handlers, and
   (for efficienty) change program to accept a pointer to the pit as an arg, and
   to do all its work in internal procedures to minimize permanent stack storage */
/*	Modified by E. Stone 5/74 to convert to version 2 */
/*	6/75	by S. Webber to remove code which sets up handlers for "cput" and "alrm" */
/*        3/77      by D. M. Wells to also distinguish interactive and initializer processes */
/*	8/77	by S. Webber to change standard_default_handler_ to default_error_handler_$wall */
/*       11/78      by J. Davis to do MCR3388: handler for mme2 calls debug,. Also remove unused vars */
/*	11/78	by W. Olin Sibert to add call to command_query_$set_cp_escape_enable 
	4/79	by B. Margulies to search for start_up, flush motd, and generally clean up
	12/81	by E. N. Kittlitz to call sus_signal_handler_$reconnect_ec_enable.
          12/81     by B. Margulies for new initialize_process_ calling sequence
		of process overseers; the call_listen_ flag replaces
		the need to stay on the stack and call listen_.
*/

/*

process_overseer_ is the standard process overseer on the system. It has four
responsibilities:
setting up an unclaimed signal handler, otherwise known as an any_other 
handler. This handler catched otherwise uncaught conditions. The supplied
handler, default_error_handler_$wall prints any message provided for
the error condition, establishes a condition wall, and calls the listener to
get a new listener level. A condition wall is just another any_other handler;
this intercepts conditions that might otherwise be caught by other 
handlers present on the stack. 

setting up a static handler for the mme2 condition. The mme2 condition
is raised when the mme2 instruction is executed. It is used by debug to 
establish breakdots. The handler  transfers control to debug when
the condition is signalled.

allowing the ".." excape to command query. This is enabled by calling 
command_query_$set_cp_excape with the appropriate bits.

finding the start_up.ec. It looks in the homedir, projectdir, and finally 
>sc1 to try to find it. It ends by calling listen_ with "ec start_upName"
as the initial command line.

The code is written for time rather than space efficiency, so that
operations that might look prettier in a do loop are done with inline code.
*/

/* Parameters */

	dcl     initial_command_line	 char (*) varying;
	dcl     a_pit_ptr		 ptr;
	dcl     call_listen_	 bit (1) aligned;


/* Automatic */

	dcl     code		 fixed bin (35);
	dcl     bc		 fixed bin (24);
	dcl     entry_type		 fixed bin (2);
	dcl     first_process	 bit (1);

/* Constants */

	dcl     process_type	 (0:3) character (12) varying internal static options (constant)
				 initial ("initializer", "interactive", "absentee", "daemon");
	dcl     down_sc1		 char (4) internal static options (constant) init (">sc1");
	dcl     start_up_dot_ec	 char (11) internal static options (constant) init ("start_up.ec");

/* Entries */

	dcl     condition_		 entry (char (*), entry);
	dcl     command_query_$set_cp_escape_enable
				 entry (bit (1) aligned, bit (1) aligned);
	dcl     hcs_$status_minf	 entry (char (*), char (*), fixed bin (1), fixed bin (2), fixed bin (24),
				 fixed bin (35));
	dcl     sct_manager_$set	 entry (fixed bin, ptr, fixed bin (35));
	dcl     process_overseer_$mme2_fault_handler_
				 entry (ptr, char (*), ptr, ptr, bit (1));
	dcl     sus_signal_handler_$reconnect_ec_enable
				 entry;

/* External variables */

	dcl     iox_$user_output	 ptr ext;

/* Builtins */

	dcl     (codeptr, divide, null, rtrim)
				 builtin;

%include pit;
%include static_handlers;
%include user_attributes;

	pit_ptr = a_pit_ptr;
	initial_command_line = "";			/* turn on ".." */

	call command_query_$set_cp_escape_enable ("1"b, (""b));

	first_process = (pit_ptr -> pit.n_processes = 1); /* see if new_proc or login */

	if ^pit_ptr -> pit.at.nostartup
	then do;					/* start_up is allowed */
		initial_command_line = "exec_com ";

/* First try homedir */

		call hcs_$status_minf (pit.homedir, start_up_dot_ec, 1, entry_type, bc, code);

/* note that we assume any error is cause to look elsewhere to give best chance
    of success */

		if code = 0 & entry_type = 1
		then initial_command_line = initial_command_line || rtrim (pit_ptr -> pit.homedir);

/* now try projectdir */

		else do;
			call hcs_$status_minf (">udd>" || rtrim (pit_ptr -> pit.project), start_up_dot_ec, 1,
			     entry_type, bc, code);

			if code = 0 & entry_type = 1
			then initial_command_line =
				initial_command_line || ">udd>" || rtrim (pit_ptr -> pit.project);
			else do;
				call hcs_$status_minf (down_sc1, start_up_dot_ec, 1, entry_type, bc, code);
				if code = 0 & entry_type = 1
				then initial_command_line = initial_command_line || down_sc1;
				else goto no_start_up;
			     end;
		     end;

		initial_command_line = initial_command_line || ">";
		initial_command_line = initial_command_line || start_up_dot_ec;
						/* the piecemeal assemble makes faster code */

		if first_process
		then initial_command_line = initial_command_line || " login ";
		else initial_command_line = initial_command_line || " new_proc ";

		initial_command_line = initial_command_line || process_type (pit_ptr -> pit.process_type);
	     end;					/* the block that checked pit.nostart*/

no_start_up:					/* set up the mme2 handler */
						/* this is done here rather than in initialize_process_ so that process
   overseers for limited subsystems can leave it out */
	call sct_manager_$set (mme2_sct_index, codeptr (process_overseer_$mme2_fault_handler_), code);
	call sus_signal_handler_$reconnect_ec_enable;

	call_listen_ = "1"b;			/* let initialize_process_ do the work */

	return;
%page;

mme2_fault_handler_:
     entry (mcp, cname, cop, infop, cont);
	dcl     (
	        mcp		 ptr,		/* to machine conditions */
	        cname		 char (*),	/* name of condition being signalled */
	        cop		 ptr,
	        infop		 ptr,
	        cont		 bit (1)
	        )			 parameter;

	dcl     debug$mme2_fault	 entry (ptr);

	call debug$mme2_fault (mcp);
	cont = "0"b;				/* do not continue searching for handlers */
	return;
     end process_overseer_;
