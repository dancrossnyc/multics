1 (3)     Syntax error has been found in this statement.  Processing
          of the statement has been terminated.

2 (3)     Excess left parentheses have been found in this statement.
          Processing of the statement has been terminated.

3 (3)	A syntax error has been found in this declare statement.
	Processing will continue with what appears to be the next declaration.

4 (3)     Excess right parentheses have been found in this statement.

5 (3)	Implementation restriction: The number of references on the left
	side of an assignment operator cannot exceed 128.

6 (1)	The parenthesized list following the label attribute in the
	declaration of $ is not standard PL/I and has been ignored.
	Use the "local" attribute to indicate that a label variable
	has values local to the block in which it is declared.

7 (3)     An unrecognizable attribute has been found in the declaration of $.

8 (1)	The external name $ contains a "$" which has nonstandard semantics.

9 (3)	The declaration of $ contains an unrecognizable array bound.

10 (3)	The dimension attribute declared for $ does not seem to
	end with a right parenthesis.

11 (3)	There is a missing right parenthesis in the declaration of $.

12 (3)	The declaration of $ contains an unrecognizable string
	length or area size expression.

13 (3)	The declaration of $ contains an unrecognizable "generic" attribute.

14 (3)	The declaration of $ contains an unrecognizable "options" attribute.

15 (3)	The declaration of $ contains an unrecognizable precision or scale attribute.

16 (3)	A level number greater than one was not preceded by a structure.

17 (3)	The declaration of $ contains an unrecognizable "offset" attribute.

18 (3)	The declaration of $ contains an unrecognizable "based" attribute.

19 (3)	Multiple "initial" attributes have  been declared for $.

20 (3)	The declaration of $ contains an unrecognizable "initial" attribute.

21 (3)	The declaration of $ contains an unrecognizable "label" attribute.

22 (3)	The declaration of $ contains an unrecognizable "returns" attribute.

23 (3)	The declaration of $ contains an unrecognizable "picture" attribute.

24 (3)	The declaration of $ contains an unrecognizable "defined" attribute.

25 (3)	The declaration of $ contains an unrecognizable "like" attribute.

26 (3)	The declaration of $ contains an unrecognizable "position" attribute.

27 (2)	Duplicate attributes have been found while processing a factored
	attribute list. The factored attribute has been ignored in favor
	of the unfactored one.

28 (3)	Implementation restriction: The argument descriptor required to pass $
	as an argument exceeds the compiler's limit of 512 words.  Reduce the complexity
	of the variable, or pass a pointer to the variable instead of passing
	the variable.

29 (3)	Implementation restriction: The argument descriptor required to pass $
	as an argument exceeds the compiler's limit of 128 members in a constant
	size structure.  Make some extent of the structure variable, or pass a pointer
	to the structure instead of passing the structure.

30 (3)	Syntax error in statement label $. A statement label must be an
	identifier or an identifier followed by a single (optionally signed)
	decimal integer constant enclosed in parentheses.

31 (3)	$ appears as a label prefix with and without subscripts within
	the same block.  All label prefix references to a label array
	must be subscripted.

32 (3)	Compiler error: The procedure "copy_expression" has received
	bad input.  Correct all source program errors and re-compile. If
	this error message persists contact the compiler maintenance personnel.

33 (3)	The entry name $ occurs as an entry name on more than one entry
	or procedure statement within the same block.

34 (3)	Implementation restriction: This entry or procedure statement
	contains more parameters then the implementation maximum of 128.

35 (3)	Syntax error in parameter list of entry or procedure statement.

36 (3)	Syntax error following the parameter list of an entry or procedure
	statement.

37 (3)	Syntax error following the keyword "returns" in an entry or procedure statement.

38 (3)	Syntax error following the keyword "options"
	in an entry, procedure, or begin statement.

39 (3)	Multiple "validate" options have been specified.

40 (3)	Syntax error following the keyword "validate" in an entry or procedure statement.

41 (2)	$ is not a valid option on an entry or procedure statement.
	It and the rest of the statement have been ignored.

42 (3)	$ appears in a refer-option but does not appear in the same
	based structure, or has not been properly qualified by its containing structure's names.

43 (2)	Syntax error in the condition prefix list.
	Unable to locate a right parenthesis following the identifier $.

44 (2)	Syntax error in the condition prefix list.  A colon must
	immediately follow a parenthesized list of condition prefixes.

45 (2)	A condition prefix cannot contain the condition name $.

46 (2)	Implementation restriction: The program exceeds the limit of 16383 source lines.
	The object segment may be incorrect if the -optimize control argument has been used.
	The object segment will be incorrect if any of -table, -brief_table,
	-profile, or -long_profile have been used.

47 (1)	$ has been passed as an argument by value rather than by reference
	because its attributes did not match the parameter to which it was passed.

48 (3)	Syntax error in an apparent default statement.  Statement ignored.

49 (3)	The right-hand-side of this apparent assignment statement is not
	an expression.

50 (3)	The array or structure value in this return statement cannot be returned
	because all entries that return values return only scalar values.

51 (3)	Area values cannot be compared.

52 (3)	Compiler error:  "operator_semantics" has received an operator it cannot
	process.  Correct all source program errors.  If this message persists,
	contact the compiler maintenance personnel.

53 (3)	This return statement is invalid because no entry to this procedure
	has been declared with a returns attribute.  If an entry is to be invoked
	as a function it must have a returns attribute.

54 (3)	The identifier $ appears as a label prefix on more than one
	statement in the same block.

55 (3)    Multiple like attributes have been specified for $.  Processing of this
          declaration has been terminated.

56 (1)	This statement can never be reached during execution due to the
	presence of an unconditional goto statement or return statement
	immediately preceding it.

57 (3)	The declaration of $ contains a "dimension" attribute that is not
	followed by a list of array bounds.

58 (3)	The declaration of $ contains an unrecognizable refer-option.

59 (3)    $ has been found as a label on more than one statement within the
          same block.

60 (3)    The factored structure level number conflicts with a previously
          specified structure level number. The factored level
          number has been ignored.

61 (3)	Implementation restriction: The number of arguments or subscripts used in
	this reference exceeds the compiler limit of 128.

62 (3)	An array or structure valued expression has been found in a
	context which requires a scalar value.

63 (3)	The name $ cannot be declared with the builtin attribute,
	because it is not a builtin function.

64 (2)	The undeclared identifier $ has been used as an entry but
	is not a builtin function known to this implementation.
	It has been declared as an external entry constant.

65 (3)	A reference to the generic entry $ could not be resolved because no
	appropriate match could be found.

66 (3)	The based variable $ has been referenced without a locator
	qualifier.

67 (3)	The non-based variable $ has been referenced with a locator
	qualified reference.

68 (3)	The locator used to qualify a reference to $ is an array
	or structure value.  Locator qualifiers must be scalar pointer or offset
	expressions.

69 (1)	The undeclared identifier $ has been contextually
	declared as a pointer.  It will acquire default attributes.

70 (4)	Implementation restriction: A locator qualified reference to $ has
	more than 128 levels of pointer qualification in its size,
	array bounds, or subscripts has caused the semantic translator's
	locator stack to overflow.  Reduce the complexity of the
	variable's declaration and recompile.

71 (3)	Syntax error in macro; an end-of-file occured before
	encountering a semi-colon. The macro is ignored.
	Check for a missing semi-colon.

72 (3)	A function reference containing an array valued entry
	expression has been found.  All function references must
	invoke a scalar entry value.

73 (3)	The declaration of $ contains an array or structure value
	for its area size, string length, or array bounds.

74 (1)	The undeclared identifier $ has been contextually
	declared as  an area.  It will acquire default attributes.

75 (1)	The undeclared identifier $ has been contextually
	declared as a file constant.  It will acquire default attributes.

76 (2)	The identifier $ has been multiply declared.
	References to it may not have been properly resolved.

77 (1)	The undeclared identifier $ has been declared by
	implication.  It will acquire default attributes.

78 (3)	A label value has been found in a context which cannot contain
	a label value.

79 (3)	The operands of an infix operator or an assignment operator
	or arguments of a builtin function are
	either array values with unequal dimensionality or structures
	with different structuring.

80 (3)	A subscripted reference to the label constant $ contains
	more than one subscript.

81 (3)	A subscripted reference to $ has fewer subscripts than the
	array has dimensions.  To reference a cross-section use
	asterisk subscripts.

82 (3)	A subscripted reference to $ has more subscripts than the
	array has dimensions.

83 (3)	Implementation restriction: The constant label array
	$ has been passed as an argument.  This implementation does not
	support the passing of label array constants.  Elements of such
	arrays may be passed but the entire array cannot be passed.

84 (3)	One of the subscripts in a subscripted reference to $ is an
	aggregate value.  Subscripts must be scalar values.

85 (3)	$ has been invoked without arguments, but its declaration
	indicates that arguments are required.

86 (2)	$ has been invoked with arguments but no parameter
	descriptors were specified in its declaration.
	Standard PL/I requires that all entries be fully declared.
	If this is a non-standard Multics entry, declare it with
	the "options(variable)" attribute.

87 (3)	$ has been invoked with the wrong number of arguments.

88 (3)	$ is a function invoked by a call statement.

89 (3)	Implementation restriction:  A cross-section array reference
	cannot be passed as an argument unless the receiving
	parameter is declared as an array with asterisk bounds.

90 (3)	The left side of an aggregate assignment is not a reference to
	an aggregate variable.

91 (3)	The left side of an aggregate assignment is a reference to
	a constant.

92 (3)	Compiler error: The right side of an aggregate assignment statement
	seems to be incorrectly represented.  Correct all source program
	errors and recompile.  If this message persists contact the compiler
	maintenance personnel.

93 (3)	An aggregate has been assigned to a scalar.  No conversion from
	aggregate to scalar is defined in PL/I.

94 (3)    Implementation restriction:  Rename-option table overflow.
	A maximum of 20 renames may be specified in one compilation.

95 (3)	Syntax error in a condition prefix list.
	$ should be an identifier.

96 (3)	A statement must begin with an identifier or semi-colon, not a $.

97 (3)	$ has been given the "parameter" attribute but does not
	appear as a parameter of any entry to the procedure in which
	it was declared.

98 (3)	$ has been given the "structure" attribute but is not followed
	by a declaration whose level number is greater than its own.

99 (2)	Text follows the logical end of the program. Check for a premature end statement.

100 (2)	Implementation restriction: The identifier or constant $ exceeds the
	maximum length of 256 for identifiers, 254 for character strings,
	or 253 for bit strings. It has been truncated.

101 (2)   The source program had insufficient end statements.
          One has been supplied.

102 (3)   A structure qualified reference to $ has been used,
          but no structure declaration corresponding to this reference
          exists within the scope known to the reference.

103 (3)	Syntax error in macro; identifier following percent sign is not
	"include", "page", or "skip".  The macro is ignored.

104 (3)	Syntax error in %include macro; the token following %include
	must be an identifier or character string.  The %include macro has
	been ignored.

105 (3)	Implementation restriction: This statement exceeds the maximum of 3000
	tokens and has been truncated at that number.

106 (3)	Syntax error in %include macro; the include file name is longer
	than 23 characters.  The %include macro is ignored.

107 (3)	Include segment $ not found. The %include macro is ignored.

108 (3)	This %include macro would cause an infinite recursion of include macros.
	It has been ignored.

109 (2)   Implementation restriction: The string $ is too long when replicated.
	It will be replicated only as many times as will fit in char (254) or bit (253).

110 (3)   The replication coefficient $ is not a decimal integer.
          Replication has been ignored.

111 (3)	Implementation restriction: The program exceeds the maximum of 31 statements
	per line.

112 (3)	Implementation restriction: Include segment $ has
	exceeded the nesting limit of 32. The %include macro is ignored.

113 (3)	$ has been given the "member" attribute but does not have
	a level greater than one or does not follow a structure declaration.

114 (3)	The controlled variable $ may not be allocated or freed in a user-
	specified area.

115 (3)	The variable $ has not been declared with the "based" or "controlled" attribute.

116 (3)	The locator variable which is to be used for the allocation of $ is an
	offset variable.  Therefore, an area variable must be specified either by the use of
	an in-option or by specifying an area variable in the offset attribute used
	to declare the locator.  No such area variable can be found for this attempted
	allocation.

117 (3)	The locator variable which is to be used for the allocation of $ has not been
	declared.

118 (3)	The variable $ has been used in a context which requires an area 
	value but has not been declared as an area.

119 (3)	The declaration of $ contains an invalid like attribute.

120 (3)	The declaration of $ contains a like attribute that does not
	refer to a structure.

121 (3)	The number of arguments used in a reference to the builtin function
	$ is not equal to the number of arguments required by that function.

122 (3)	The number of arguments used in a reference to the builtin function
	$ is less than the minimum number of arguments required by that function.

123 (3)	The number of arguments used in a reference to the builtin function
	$ is either less than the minimum number of arguments required by
	that function or is more than the maximum allowed by that function.

124 (3)	The builtin function $ has been referenced with arguments not
	acceptable to the function.

125 (3)	Syntax error in macro; another percent sign was encountered.
	Check for a missing semi-colon.

126 (1)	The <environment attribute> or <options attribute> has caused the
	name $ to acquire further attributes.  This is nonstandard.

127 (3)	The first argument to the builtin function $ must be an array.

128 (3)	The second argument to the builtin function $ specifies a
	dimension which is not declared for this array.

129 (3)	Implementation restriction: The include file $ exceeds the maximum
	number (255) of include files allowed. The %include macro is ignored.

130 (3)	A conversion error has been detected in trying to convert
	the identifier $ into some other data type.

131 (3)	Temporary restriction:  The builtin function $ is not implemented by
	this version of the compiler.

132 (3)	The argument of the builtin function $ must be a reference
	to a variable.  Labels, constants, and expressions are not
	allowed.

133 (1)	The undeclared identifier $ has been contextually declared
	as a condition name.  It will acquire default attributes.

134 (3)	A label constant has been used on the left side of this assignment statement.

135 (3)	A file, entry, or format constant has been used on the left side of this
	assignment statement.

136 (3)	Compiler error: A conversion error has been detected by the procedure
	"convert".  Correct all source program errors and recompile.
	If this message persists contact the compiler maintenance personnel.

137 (3)	Temporary restriction:  Cross-sections of array $ cannot be passed
	as an argument.

138 (3)	The object $ of the refer-option must not be locator qualified,
	and it must not be subscripted.

139 (3)	Implementation restriction: The argument $ to the builtin function "string" must either be all character
	strings or all bit strings.  No mixed data-types are acceptable.

140 (3)	Aggregate expressions cannot be used in a do-specification list.

141 (3)	The $ builtin function cannot be used as a pseudovariable when its argument
	is not an unaligned non-varying string or an aggregate consisting entirely of
	unaligned non-varying bit strings or entirely of unaligned character-strings.

142 (3)	Implementation restriction:  The only arguments acceptable to the $ builtin function
	are scalar arithmetic variables, unaligned non-varying strings, and aggregates that
	consist entirely of unaligned non-varying bit strings or entirely of unaligned
	non-varying character strings.

143 (3)	Implementation restriction: area references cannot be used in a do-specification
	list.

144 (3)	Implementation restriction: adjustable strings or strings with star-extents
	cannot be used in a do-specification list.

145 (3)	The left hand side of an assignment operator cannot
	be an expression or a label constant.

146 (3)	Implementation restriction:  The builtin function $ creates
	a result whose precision exceeds the implementation limits. The
	maximum allowable precision has been used.  The limits are:
	fixed bin(71), fixed dec(59), float bin(63) and float dec(59).

147 (3)	In the use of the $ builtin function or pseudovariable
	the substring does not lie completely within the string.

148 (3)	Expressions or pseudovariables cannot be used as arguments
	to the $ pseudovariable; the argument must be a variable.

149 (2)	The declaration of $ is followed by declarations with level numbers greater than one,
	but it is not a structure or does not have a level number. It has been given a level of one.

150 (2)	This else clause has no if statement preceding it
	and has been ignored. Check for a missing end statement.

151 (2)	An underscore or dollar sign may not begin an identifier,
	and has been ignored.

152 (2)   Non-binary digit in apparent bit string $.  A character-string
          is assumed.

153 (2)   Non-binary digit in apparent binary constant $.  Constant
          assumed to be decimal.

154 (3)	Implementation restriction: The bit string constant $ exceeds the
	maximum length of 253 bits after the radix factor has been applied.

155 (2)   No exponent in the floating-point constant $.  The exponent
          is assumed to be zero and the constant is assumed to be a real
          floating-point decimal constant.

156 (1)	The <expression> in an <if statement> or <while expression> is
	^<expr>, where <expr> is not bit(1).  This is often a
	programming error.  To bypass, use a relational operator.

157 (2)	An identifier, number, or string immediately follows the constant $.

158 (2)	A string immediately follows the identifier $.

159 (2)	The character whose bit representation is $ is not permitted except in
	character strings and comments, and has been ignored.

160 (3)	The $ builtin function requires a scale factor when its arguments are fixed-point.

161 (3)   In a rename-option $ was encountered when a left parenthesis was
          expected.  The renaming has been deleted.

162 (3)   In a rename-option $ was encountered when expecting the first name
          of the option.  The renaming has been deleted.

163 (3)   In a rename-option $ could not be found among the list of renameable
          names.  The renaming has been deleted.

164 (3)   In a rename-option $ was encountered when a comma was expected.
          The renaming has been deleted.

165 (3)   In a rename-option $ was encountered when expecting the second name
          of the option.  The renaming has been deleted.

166 (2)   In a rename-option $ was encountered when a right parenthesis was
          expected.

167 (3)	The $ builtin function cannot have a scale factor when its arguments are floating-point.

168 (3)	One of the dimensions of the array $ has a lower bound that is greater
	than the upper bound.

169 (3)	The label prefix of a format statement cannot be subscripted.

170 (3)	A complex format item must contain either "e", "f" or numeric-picture
	format items.

171 (3)	A remote format item must contain a format value.

172 (1)	The $ builtin has been used in a nonstandard manner.

173 (1)	It is nonstandard for the base variable of the <defined attribute>
	of $ to be a based variable.

174 (1)	It is nonstandard for the varying string $ to be a defined variable.

175 (3)	The base reference of the defined attribute does not reference a
	variable declared in one of the blocks containing the declaration of $.

176 (3)	The base reference of the defined attribute in the declaration of $ identifies
	another defined variable or a named constant.

177 (3)	The declaration of $ is in error because it specifies isub or simple
	defining and includes a "position" attribute.

178 (3)	$ cannot be string overlay defined onto the variable identified
	by the base reference of its defined attribute.

179 (3)	$ cannot be isub, simple, or string overlay defined onto the variable
	identified by the base reference of its defined attribute due to differences
	in the attributes or extents of the defined variable and its base.

180 (4)   The first statement of a program must be a procedure statement.

181 (3)	The base reference of the defined attribute in the declaration of $
	contains too many asterisks or an invalid isub.

182 (3)	Implementation restriction: The isub defined array $ cannot be passed as
	an argument.

183 (3)	The base reference of the defined attribute of $ contains
	isubs or asterisks, but the defined variable is not an array.

184 (3)	A subscripted reference contains one or more subscripts that
	are outside the bounds of the array $.

185 (3)	The position attribute in the declaration of $ contains an
	aggregate valued expression.

186 (3)	The data types of the operands of a relational operator cannot be
	converted to a common type suitable for comparison.

187 (3)	The $ builtin function can only used as the right side of the assignment
	statement, as an argument, or as an initial value in an "initial" attribute.

188 (3)	The identifier $ is not an area variable, and therefore cannot be assigned the area returned by
	the builtin function "empty".

189 (3)	The declaration of the structure $ contains both a like attribute
	and structure members.

190 (3)	The builtin function $ expects a one-dimensional array as its argument.

191 (1)	A stringsize conversion error occurred when $ was converted to its internal
	representation.

192 (3)	The declaration of $ contains an unrecognizable "options" attribute.

193 (3)	The declaration of $ contains an unrecognizable "environment" attribute.

194 (3)	Compiler error:  "Declare" was unable to find a
	declaration of $ when processing a declaration of an entry constant.
	Correct all source program errors and recompile.  If this message persists
	contact the compiler maintenance personnel.

195 (3)	Compiler error: The internal procedure "size" in "expand_assign"
	has been called with a null pointer or a pointer to a node other than
	an operator or reference node.  Fix all source program errors, if this
	message persists contact the compiler maintenance personnel.

196 (3)	$ has been used as a label constant and as a parameter in the same block.

197 (3)	An open statement contains an unrecognizable "environment" attribute.

198 (3)	Only string and real arithmetic values can be compared with relational
	operators other than = and ^=.

199 (3)	A descriptor with no attributes was found in an entry(...) attribute,
	a returns(...) attribute or option, or a when(...) clause.
	At least one attribute is required in a descriptor.

200 (3)	The declaration of $ contains incompatible attributes.

201 (2)	Implementation Restriction: The precision of $ exceeds the
	implementation limit.  The maximum allowable precision has been used.
	The limits are: fixed bin(71), fixed dec(59), float bin(63), float dec(59).

202 (1)	$ is a nonstandard builtin function.

203 (2)	The string variable $ has no declared length. A length of one
	has been supplied.

204 (2)	Implementation restriction: The string or area variable $ has a length or size less than
	the minimum allowed by the implementation.  String lengths must
	be non-negative, area sizes must be greater than 29.

205 (2)	Implementation Restriction: The string or area variable $ has a length or size greater than
	the maximum allowed by the implementation. The limits are:
	char(1048576), bit(9437184), area(262144).

206 (1)	This default statement would create an invalid declaration
	if it were applied to the declaration of $.  It has not been applied.

207 (3)	Syntax error in the range operand of this default statement. 
	The statement has been removed from the program.

208 (3)	The predicate of this default statement contains non-boolean operators.
	The statement has been removed from the program.

209 (3)	The predicate of this default statement contains an illegal operand.
	The statement has been removed from the program.

210 (3)	$ is a member of a structure but has been declared with the
	"based", "auto", "static", "controlled", "defined", "constant",
	or "parameter" attributes.  Members of structures inherit these
	attributes from their level-one containing structure.

211 (3)	The declaration of $ has been invalidated by this default statement.

212 (3)	$ has the "member" attribute or has a level number greater than one
	but it was not preceded by a structure.  The level number
	has been set to zero and the "member" attribute removed.

213 (3)	The entry constant $ has been multiply declared.

214 (1)	The undeclared identifier $ has been contextually
	declared as a parameter.  It will acquire a default data type.

215 (3)	The declaration of $ contains asterisk array bounds, string
	lengths, or area sizes.  Only parameters may have asterisks
	in these contexts.

216 (3)	The declaration of $ contains expressions in its array bounds,
	string lengths, or area sizes.  Only automatic, based, controlled or defined
	variables may have expressions in these contexts.  Replace expressions with
	decimal integers.

217 (3)	The declaration of $ contains refer-options in its array
	bounds, string lengths, or area sizes.  Only members of based structure variables
	may have refer-options.

218 (3)	The declaration of $ contains an "external" attribute which
	is inconsistent with the variable's storage class.  Only static
	or controlled variables may be external.

219 (3)	The declaration of $ contains a "varying" attribute
	which is inconsistent with the variable's data type.  Only
	bit-string or character-string variables may be varying.

220 (3)	The declaration of $ contains an "initial" attribute
	which is inconsistent with the variable's storage class.
	Parameter or defined variables cannot be given initial values.

221 (3)	An ambiguous reference to $ has been found.  Additional
	structure qualification is necessary to either make the
	reference unique or fully qualified.

222 (2)	Implementation restriction: The scale factor declared for $ is outside
	the range -128<_q<_127.  It has been set to the minimum or maximum allowed.

223 (3)	A non-entry value has been used in a context which requires an entry value.

224 (3)	$ has been used in a context which requires an entry value.

225 (3)	A non-string or non-arithmetic value has been used in a context
	which requires a string value.

226 (3)	$ has been used in a context which requires a string value.

227 (3)	A non-arithmetic or non-string value has been used in a context which
	requires an arithmetic value.

228 (3)	$ has been used in a context which requires an arithmetic value.

229 (3)	A non-label value has been used in a context which requires a label value.

230 (3)	$ has been used in a context which requires a label value.

231 (3)	A non-locator value has been used in a context which requires a locator value.

232 (3)	$ has been used in a context which requires a locator value.

233 (1)	$ has been converted from an arithmetic value to a string value.

234 (1)	An arithmetic value has been converted to a string value.

235 (1)	$ has been converted from a string value to an arithmetic value.

236 (1)	A string value has been converted to an arithmetic value.

237 (3)	A left parenthesis is required in place of $.

238 (3)	A right parenthesis is required in place of $.

239 (3)	Illegal option or combination of options used in input/output statement.

240 (3)	An identifier is required in place of $.

241 (3)	The from-option must be used in a write statement.

242 (2)	Temporary restriction: This version of the compiler does not implement
	defaulting of constants. The predicate of this default statement should
	contain "&^constant" until this restriction is removed.

243 (1)	The variable $ has been declared with the "defined"
	attribute. The syntax of the defined attribute has been
	changed to "defined [(<base reference>)]." This version of the compiler
	temporarily uses the old syntax if no parenthesis are present.

244 (3)	The builtin function $ cannot be used as a pseudovariable.  Hence it
	cannot appear on the left-hand-side of a statement.

245 (3)	The file-option must be supplied in this kind of
	input/output statement.

246 (3)	The constant $ cannot be converted to a data-type
	other than arithmetic-type and string-type.

247 (3)	Improper option for this input/output statement, or invalid redundant
	use of the same option.

248 (3)	Compiler error: Bad input $ to the conversion routine "convert".
	Correct all program errors and recompile.  If this message persists
	contact the compiler maintenance personnel.

249 (3)	A non-area has been used in a context which requires an area.

250 (3)	$ has been used in a context which requires an area.

251 (3)	A non-file value has been used in a context which requires a file value.

252 (3)	$ has been used in a context which requires a file value.

253 (3)	A conversion error occurred when $ was converted to its internal
	representation.

254 (3)	A data list is required in this get or put statement.  Only the
	get data or put data statement can be written without a data list.

255 (3)	The "edit" or "list" keywords of a get or put statement
	must be followed by a parenthesized data list.  $ was found
	in place of the left parenthesis.

256 (3)	Syntax error in a data-specification list.  The statement appears to be
	in error somewhere around the token $.

257 (3)	Syntax error in locate statement.  An identifier should immediately
	follow the word "locate".

258 (3)	A data list do-group appears to be terminated by $ instead of
	a right parenthesis.

259 (1)	Multics restriction: More than 16384 words of internal static storage have been declared;
	the object segment produced by this compilation will not be bindable.

260 (3)	A conversion error occurred when the initial value of $ was
	converted to its internal representation.

261 (3)	Compiler error: target precision missing in conversion from float
	to fixed.  Correct all source program errors and re-compile.
	If this message persists, contact the compiler maintenance personnel.

262 (3)	Compiler error: target precision missing in conversion of $ from
	float to fixed.  Correct all source program errors and re-compile.
	If this message persists, contact the compiler maintenance personnel.

263 (3)	The subroutine $ is invoked by a function reference.

264 (3)	Implementation restriction: The maximum number of initial items in an initial list of a
	non-static variable is 512.  The declaration for $ exceeds this maximum.

265 (3)	Implementation restriction:  the empty builtin function cannot be assigned
	to a structure $.

266 (3)	A procedure statement or entry statement must have at least one label.

267 (1)	Procedure $ has never been referenced or is unreachable from the external procedure.

268 (3)	Error in contextually declaring the identifier $, as it has been previously
	declared with other attributes.

269 (3)	The argument $ has more dimensions than the parameter indicates.

270 (3)	The label of an entry statement or a procedure statement cannot be subscripted.

271 (3)	The second argument to the builtin function $ must be non-negative if the
	argument to be rounded has the float attribute.

272 (3)	Evaluation of the offset expression to the identifier $ is not
	possible due to the presence of an asterisk as one of its subscripts.

273 (3)	$ is not a level one item.  Therefore, it cannot be allocated or freed.

275 (3)	A data list has a $ where "do", ")", or "," should appear.

276 (2)	Implementation restriction:  The builtin function $ cannot be used as a
	pseudovariable as yet.

277 (3)	Implementation restriction:  Mathematical builtin functions with
	aggregate arguments are not implemented yet.

278 (3)	Syntax error in a format-list.  The symbol $ seems out of place.

279 (3)	The declaration of $ contains an incomplete "returns" attribute.

280 (3)	The declaration of $ contains an incomplete "dimension" attribute.

281 (3)	The declaration of $ contains an incomplete "picture" attribute.

282 (3)	The declaration of $ contains an incomplete "position" attribute.

283 (3)	The declaration of $ contains an incomplete "initial" attribute.

284 (3)	The declaration of $ contains an incomplete "generic" attribute.

285 (3)	The declaration of $ contains an incomplete "environment" attribute.

286 (1)	The mapping of structure $ may have changed from that provided by a
	previous compilation.  An aligned structure, all of whose members are
	packed, now occupies an integral number of fullwords.

287 (3)	Implementation restriction: A complex format can only be made up of e_format,
	f_format, or numeric picture formats.

288 (3)	Unrecognizable option or attribute $ in an input/output statement.
	It has been ignored.

289 (3)	A "data", "edit", or "list" option may only be used in a get statement or a
	put statement.

290 (3)	An expression is required in place of $.

291 (3)	Compiler error: there is no pointer in the stack to be used by the bit-pointer
	operator.  Correct all source program errors and re-compile.  If this
	message persists, contact the compiler maintenance personnel.

292 (3)	Number of elements to be initialized is not the same as the number of
	elements in the array $.

293 (3)	Syntax error in a data-list specification: possibly missing a pair of
	parentheses around a do-group.

294 (3)	The $ builtin function cannot take an aggregate of string data
	that is not suitable for use in string overlay defining.

295 (3)	$ is used in an initial list or extent expression of a variable that is declared in the same block.
	The program is in error because automatic and defined variables cannot depend on the order in which
	variables are initialized.

296 (1)	$ has been passed as an argument by value rather than by reference
	because it is an isub-defined array.

297 (3)	Syntax error in a picture format item. The keyword "p" is not
	followed by a picture.

298 (3)	Syntax error in a format-list. $ is not a valid keyword.

299 (3)	The declaration of $ contains a like attribute that refers to another
	declaration containing a like attribute or that was produced by
	expansion of a like attribute.

300 (3)	Compiler error: opcode $ found by code generator in wrong context.
	Retain output and contact the compiler maintenance personnel.

301 (3)	Compiler error: opcode $ not yet handled by code generator.
	Retain output and contact the compiler maintenance personnel.

302 (3)	Compiler error: macro $ not found in macro table.
	Retain output and contact the compiler maintenance personnel.

303 (3)	Compiler error: macro $ used with too few arguments.
	Retain output and contact the compiler maintenance personnel.

304 (3)	Compiler error: macro $ has no body.
	Retain output and contact the compiler maintenance personnel.

305 (3)	Compiler error: storage class $ not handled.
	Retain output and contact the compiler maintenance personnel.

306 (2)	Implementation restriction: The defined variable $ cannot be
	represented in the run-time symbol table required by the "table" option
	or data-directed I/O. This is due to the use of a "*" or "isub" in the
	defining declaration.

307 (1)	The variable $ has been referenced but has never been set.

308 (4)	Multics restriction:  More than $ words of automatic storage have been
	declared.

309 (3)	Compiler error: Compiler procedure $ has been called but is not
	yet implemented.  Correct all source program errors and recompile.
	If this message persists, contact the compiler maintenance personnel.

310 (4)	Compiler error: $ while in the code generator.  Correct all source
	program errors and recompile.  If this message persists, contact the
	compiler maintenance personnel.

311 (4)	Implementation restriction: The maximum program size of $ words has been exceeded.  Reduce
	the size of the source program and recompile.

312 (3)	Compiler error:  attempt to make reference node $ word addressable when it
	has a non-word offset expression.  Retain output and contact the compiler-
	maintenance personnel.

313 (2)	Compiler error: attempt to use reference node $ after reference count has reached
	0.  Correct all source program errors and recompile.  If this message persists,
	contact the compiler maintenance personnel.

314 (2)	Compiler error: reference count < 0 when freeing temporary node $.
	Correct all source program errors and recompile.  If this message
	persists, contact the compiler maintenance personnel.

315 (3)	Compiler error: temporary node $ does not have value in storage.
	Correct all source program errors and recompile.  If this message
	persists, contact the compiler maintenance personnel.

316 (3)	Compiler error: attempt to access temporary $ with reference count <= 0.
	Correct all source program errors and recompile.  If this message
	persists, contact the compiler maintenance personnel.

317 (3)	Compiler error: length or offset expression found with operand(1) = null.
	Correct all source program errors and recompile.  If this message
	persists, contact the compiler maintenance personnel.

318 (2)	Compiler error:  One or more fields in the runtime symbol table entry
	of $ cannot be encoded.  Correct all source program errors and recompile.
	If this message persists, contact the compiler maintenance personnel.

319 (1)	The "stringsize" condition will be raised when this statement is executed.

320 (3)	The static label variable $ has been declared with an initial attribute.
	Static label variables cannot be initialized because a label value consists
	of an environment or block activation pointer in addition to the address
	of a statement.  Since static variables are initialized prior to block
	activation they cannot possibly be initialized.

321 (3)	The static area variable $ has been declared with an initial attribute.
	Static area variables cannot be initialized by the programmer because
	expressions or calls are not permitted as static initial values.

322 (3)	The static entry variable $ has been declared with an initial attribute.
	Static entry variables cannot be initialized because an entry value
	consists of an environment or block activation pointer in addition to the
	address of an entry point.  Since static variables are initialized prior
	to block activation they cannot possibly be initialized.

323 (3)	The static variable $ has been declared with a initial-call as its
	initial value.  Because static variables are initialized prior to block entry,
	entry expressions and calls are not permitted as initial
	values of static data.

324 (3)	The static variable $ has an initial attribute which contains non-constant
	repetition factors or initial values.  Because static variables are
	initialized prior to block entry, expressions are not permitted in
	the initial attribute of static data.

325 (2)	The program contains an infinite loop.

326 (2)	An element of the constant label array $ has been used as a label on
	more than one statement.

327 (1)	Implementation restriction: only $ symbols may appear
	in the cross-reference table.

328 (3)	Compiler error: index-register manager unable to load $ because all registers
	locked.  Retain output and contact the compiler maintenace personnel.  (It
	may be possible to bypass this bug by using the optimizer.)

329 (3)	Compiler error: aq register manager unable to load $ because all registers
	locked.  Retain output and contact the compiler maintenance personnel.  (It
	may be possible to bypass this bug by using the optimizer.)

330 (3)	Compiler error: temporary node $ does not have address in storage.  Correct
	all source program errors and recompile.  If this message persists, contact
	the compiler maintenance personnel.

331 (3)	Compiler error: unimplemented conversion.  Correct all source program errors
	and recompile.  If this message persists, contact the compiler maintenance
	personnel.

332 (3)	Compiler error:  reference node $ has incorrect offset units.  Correct
	all source program errors and recompile.  If this message persists, contact
	the compiler maintenance personnel.

333 (3)	Implementation Restriction:  A forward reference may not be made to a constant
	that is more than $ words away from the start of the segment.

334 (4)	Compiler error: $ while in the parse.  Correct all source
	program errors and recompile.  If this message persists,
	contact the compiler maintenance personnel.

335 (4)	Compiler error: $ while in the semantic translator.  Correct
	all source program errors and recompile.  If this message
	persists, contact the compiler maintenance personnel.

336 (4)	Compiler error: $ while preparing the symbol table.  Correct
	all source program errors and recompile.  If this message
	persists, contact the compiler maintenance personnel.

337 (4)	Compiler error: $ while in the optimizer.  Correct all source
	program errors and recompile.  If this message persists,
	contact the compiler maintenance personnel.

338 (3)	Implementation restriction: string(a(2,*)), or unspec(a(2,*)) are not implemented yet.

339 (2)	Implementation restriction: the multiplier field in the runtime symbol
	table entry of $ cannot be encoded because the variable was never
	referenced.

340 (3)	Implementation restriction: The number of arguments in a function or procedure
	call must not exceed $.

341 (3)   The static pointer or offset variable $ can only
          be initialized to the null builtin function.

342 (4)	Installation error: Code generator version does not match commmand
	program version.  Issue a new_proc command and recompile.  If this
	message persists, contact installation personnel.

343 (3)	A defined array which is not isub defined or string-overlay defined 
	must have for a base reference an array reference which has an asterisk 
	subscript for each bound.

344 (2)	The compiler is unable to get status information on the source or
	include file $.  Check for missing "s" access on the directory 
	containing the file.  The object segment will be non-standard.

345 (2)	Multics restriction: the external static variable $ has 
	been declared with the initial attribute.  This is not 
	allowed for variables whose names contain a dollar-sign.

346 (3)	The locator used in the set option of an allocate statement, or as an implicit
	qualifier for $, is an array or structure value.  Locator qualifiers must be
	scalar pointer or offset expressions.

347 (1)	A stringsize error occurred when the initial value of $ was
	converted to its internal representation.

348 (2)	$ is not a valid option on a begin statement.  It and the
	rest of the statement have been ignored.

349 (1)	$ contains the <options attribute> but does not contain
	the <entry attribute>.  This is nonstandard.

350 (1)	A <default statement> has appeared in a block other than the
	external procedure.  This is nonstandard.

351 (1)	The element $ appearing in the data list of a put data
	or put list statement is not of arithmetic or string type.
	This is nonstandard.

352 (1)	The data list of a put list or put data statement contains an
	expression of other than string or arithmetic type.  This is
	nonstandard.

353 (1)	The <descriptor> $ has the <local attribute>.  This is
	nonstandard.

354 (1)	The nonstandard attribute $ makes programs dependent on Multics PL/I.

355 (1)	The $ attribute makes programs dependent on Multics PL/I.

356 (3)	This end or return statement is invalid because the only entry to this procedure
	has been declared with a returns attribute, yet this statement does not
	return a value.

357 (2)	Implementation restriction: The variable $ exceeds the maximum size of 262144 words.

358 (3)	The element $ appearing in a data list of a put or get
	data or edit statement is a label, format, or entry constant,
	which is not allowed.

359 (3)	A builtin used in this statement has not yet been fully
	implemented. Processing of the statement has been terminated.

360 (2)	The source segment $ ends while in a comment. The comment has been closed.

361 (2)	The last statement of the source program does not end in a
	semicolon. One has been supplied.

362 (3)	The source segment $ ends while in a string constant. The string has been closed.

363 (2)	The character $ is not permitted except in character strings
	and comments, and has been ignored.

364 (3)	Implementation restriction:  An external definition with the
	name "symbol_table" has been created.  This name is reserved to
	denote the symbol section of the object segment.

365 (4)	Compiler error: $ while in the semantic translator.  Possible
	recursion in declarations.  Correct all source program errors
	and recompile.  If this message persists, contact the compiler
	maintenance personnel.

366 (2)	Implementation restriction: program too big to build correct
	runtime symbol table.  The declarations of $ cannot be chained.

367 (3)	Compiler error:  attempt by aq_man to load unaligned reference $
	when it is not in an upper halfword.  Correct all source program errors
	and recompile.  If this message persists, contact compiler
	maintenance personnel.

368 (2)	$ is not a valid option on an entry statement.
	It and the rest of the statement have been ignored.

369 (2)	$ is not a valid option on an internal procedure statement.
	It and the rest of the statement have been ignored.

370 (3)	$ has been followed by a parenthesized list but is neither an entry value
	nor an array.

371 (3)	UNUSED ERROR MESSAGE.

372 (3)	Implementation restriction: The number of dimensions declared for $
	exceeds the limit of 127.

373 (3)	$ cannot be allocated or freed because it is a label constant.

374 (3)	Compiler error:  attempt to load decimal value $ in a register.
	Retain output and contact the compiler maintenance personnel.

375 (1)	Syntax error in macro; excess arguments specified.
	They have been ignored.

376 (1)	Syntax error in macro; argument to %page or %skip must be a
	decimal integer enclosed in parentheses. The value 1 is assumed.

377 (9)	UNUSED to 399.

400 (3)   This statement could not be recognized.

401 (3)   An illegal occurrence of an else clause.

402 (2)	Syntax error in a do while(...) statement.

403 (3)   An illegal occurrence of the system on-unit.

404 (2)	The expression following the keyword "while" must be enclosed in parentheses.

405 (2)	Syntax error in while expression or missing right parenthesis following
	the while expression.

406 (3)   Syntax error in the control variable of a do statement.  Iteration
          has been omitted.

407 (3)   The control variable of a do statement was not followed by an equal sign.
          Iteration has been omitted.

408 (3)   Syntax error in the first expression of a do-statement specification.
          Iteration has been omitted.

409 (3)   The "to" clause was encountered twice in a do-statement specification.
          Iteration has been omitted.

410 (3)   Syntax error in a begin statement.

411 (3)   An entry statement is not allowed within a begin block.

412 (3)   A return statement is not allowed within an on-unit begin block.

413 (3)   An entry statement may not be contained within an iterated do group.

414 (3)	Implementation restriction:  A normalized picture cannot contain more than
	64 characters. Since e_, f_, and p_formats can produce pictures internally, 
	an improper format value may cause this error.

415 (2)   Syntax error in an end statement.  The symbol $
	which follows a label after the keyword "end" is not a semi-colon.

416 (2)   Syntax error in an end statement.  The symbol $
	which follows the keyword "end" is neither an identifier nor a semi-colon.

417 (2)   The identifier $ following the keyword "end" on an end statement could
          not be matched with a previous label on a do, begin,
          or procedure statement.

418 (3)	Syntax error in the expression of a "to" clause in a do-statement control.
          Iteration has been omitted.

419 (3)   The "by" clause was encountered twice in a do-statement control.
          Iteration has been omitted.

420 (3)   Syntax error in the condition name of an on, revert, or signal statement.

421 (2)   On-units may not be labeled.

422 (2)	The token $ after  the identifier "system" in an on-statement has been ignored.

423 (3)   An illegal statement occurred within an on statement.

424 (3)   Syntax error in the expression of a "by" clause in a do-statement control.
          Iteration has been omitted.

425 (3)   A do-statement control is not terminated by a comma or semi-colon.
          Iteration has been omitted.

426 (3)   Syntax error in the expression of a "while" clause in a do-statement control.
          Iteration has been omitted.

427 (3)	Syntax error in a complex format-list.

428 (2)	Syntax error in a format statement.  A semi-colon must immediately follow the format-list.
	The characters after the apparent end of the format list have been ignored.

429 (3)	Syntax error in the expression of a "repeat" clause in a do-statement control.
	Iteration has been omitted.

430 (3)   An illegal statement occurred within an if statement.

431 (2)   The keyword "then" is missing from an if statement.

432 (3)   Syntax error in the expression in an if statement.

433 (3)	Syntax error in a do-statement control.
	The "repeat" clause may not be used with a "to" or "by" clause.

434 (3)	Implementation restriction:  The scale factor of a picture must lie between
	-128 and +127.

435 (3)	Illegal conversion between pointer and offset variables because no
	area has been declared to associate with the offset variable $.

436 (3)	The second argument $ used in the pointer builtin function must
	be a bit-string or an integer.

437 (3)	The second argument $ used in the pointer builtin function must
	be an area variable.

438 (3)	The first argument $ used in the pointer builtin function must
	be either a pointer or an offset variable.

439 (2)	$ appears in a <generic attribute>.  A <reference> may not
	appear in an <arg selector> of a <generic attribute>.

440 (3)	Syntax error in a picture declared for $.

441 (3)	Syntax error in %include macro; the segment name is not immediately
	followed by a semi-colon.

442 (3)	The scalar variable $ has been initialized with more than one value.

443 (3)	A size conversion error occurred when $ was converted to its internal
	representation.

444 (3)   Syntax error in call statement.

445 (3)	The keyword "call" is not followed by an identifier in a call statement.

446 (3)   Syntax error in goto statement.

447 (3)   Syntax error in return statement.

448 (3)	In a read statement, exactly one of these options must appear: into, set, ignore.

449 (3)	In a read statement with ignore option, neither the key nor the keyto option may appear.

450 (3)	A set-option appears more than once in an allocate statement.

451 (3)	A left parenthesis is missing in a set-option of an allocate statement.

452 (3)	An in-option appears more than once in an allocate statement.

453 (3)	A left parenthesis is missing in an in-option of an allocate statement.

454 (3)   Syntax error in an allocate statement.

455 (3)	A left parenthesis is missing in a free statement.

456 (3)   Syntax error in free statement.

457 (3)	Syntax error in the character picture declared for $.

458 (3)	Syntax error in the floating-point picture declared for $.

459 (3)	Syntax error in the fixed-point picture declared for $.

460 (2)   Implementation restriction: This statement is not allowed by this version of the compiler.

461 (3)	The variable $ to be allocated by a locate statement must
	be unsubscripted and unqualified.

462 (3)	The reference $ appearing in a file-option or copy-option must be of type file.

463 (3)	The variable $ appearing in a set-option must be a pointer variable.

464 (3)	The variable $ in a keyto-option must be a character-string variable.

465 (3)	The variable $ appearing in a locate statement must be of level-one.

466 (3)	The string-option of a put statement requires a character-string variable.

467 (3)	Compiler error: io_semantics table size exceeded.
	Retain output and contact the compiler maintenance personnel.

468 (3)	The locate  statement requires that a pointer variable be
	associated with the variable to be allocated either by a set-option
	or implicitly, via the declaration of the variable.

469 (3)	The element $ of a get data statement's list must be
	an unqualified, unsubscripted variable.

470 (3)	The element $ of a get data statement's list must be
	a string or numeric scalar variable or an
	aggregate consisting only of such elements.

471 (3)	The element $ appearing in the data list of a put data
	or get statement must be a variable.

472 (3)	The element $ appearing in the data list of a stream
	I/O statement must be of arithmetic or string type.

473 (3)	The data list of a get data statement may not contain an expression.

474 (3)	The data list of a put data or of a get statement may not contain an expression.

475 (3)	The data list of a stream I/O statement contains an expression
	of other than string or arithmetic type.

476 (1)	This non-iterative do statement can never be legally reached during execution due to the
	presence of an unconditional goto statement or return statement immediately preceding it.

477 (3)	The identifier $ used in an i-o condition must have the file attribute.

478 (3)	Implementation restriction: the builtin function $ does not take
	aggregate arguments.

479 (3)	Implementation restriction: conversion of a fixed decimal value
	to fixed binary has produced a scale factor outside the range
	-128<_q<_127.

480 (3)	Implementation restriction: conversion of $ from fixed decimal
	to fixed binary produces a scale factor outside the valid range of 
	-128 to 127.

481 (3)	A negative argument has been specified for the builtin function $
	where a non-negative value is expected.

482 (2)	The variable $ has been declared options(constant) which requires
	the internal and static attributes and an initial value.

483 (3)   Use of "return(s)" attribute with "option(variable)" is not permitted.

484 (1)	fixed(<decimal_integer_constant>...) produces a decimal value and may
	result in inefficient code.  Users desiring a binary result should
	use the binary builtin function.

485 (2)	unspec(<constant>) is invalid.  The argument to the unspec builtin must
	be a reference to a variable.

486 (1)	$ has been converted from a bit value to a character value.

487 (1)	A bit value has been converted to a character value.

488 (1)	$ has been converted from a character value to a bit value.

489 (1)	A character value has been converted to a bit value.

490 (3)	The declaration of $ specifies a precision of zero.

491 (3)	The in-option of an allocate statement requires a reference to
	an area variable.

492 (3)	Implementation restriction: The argument descriptor required to pass $
	as an argument exceeds the compiler's limit of 15 dimensions in an 
	array which is passed as an argument.

493 (3)	Implementation restriction: The parenthesized data list following
	the keyword "edit" or "list" in a get or put statement may not have
	more than 128 elements.

494 (3)	A reference has been made to an element of $ that is not defined by
	a <label prefix>.

495 (3)	Compiler error: During format list processing "io_data_list_semantics"
	has received a node it cannot process.  Correct all source program
	errors.  If this message persists, contact the compiler maintenance
	personnel.

496 (3)	Improper constant values have been found during processing of an e_format
	or f_format item in this statement. The size condition would occur
	if this statement were executed.

497 (3)	A format list must contain at least one data format item.

498 (3)	The declaration of $ contains an incomplete "options" attribute.

499 (3)	FAKE FINAL MESSAGE TO MAKE THE REAL LAST MESSAGE PRINTABLE.

	(end)
