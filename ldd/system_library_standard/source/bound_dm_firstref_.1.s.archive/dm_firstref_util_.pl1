/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/*  DESCRIPTION:

     This is a general repository for little programs for DMS.  Its current
   residents are:

   dm_status:		given a DMS per-bootload directory, return
   			the status recorded in the system data.  This
   			is currently used to get the system state of
   			an old DMS during recovery.

   find_old_boot_dir:	Find the last valid per-bootload directory.
   			This basically involves getting a list of all
   			the properly named directories
   			(dm_dir.<date_time_created>) in the per-AIM
   			directory.  There should NEVER be more than one
			file system entity in the per-AIM dir matching
			the per-bootload dir's starname; if there is,
			it should be treated as a fatal recovery error,
			even if the config file says we should ignore
			recovery failure.

   get_begin_shutdown_time:	Returns the time when the DMS caretaker Daemon
			will prevent new transactions from starting
			and set the DMS state to "shutdown begun";
			invoked through dm_gate_.

   get_daemon_logout_time:	Returns the time when the DMS caretaker
   			Daemon is to logout, regardless if the DMS
   			is totally shutdown; invoked through
   			dm_daemon_gate_.

   get_initialization_time:   Returns the time the current DMS was created.

   get_shutdown_warning_time:	Returns the time when user processes
			are to run
			dm_misc_util_$signal_shutdown_warning;
			invoked through dm_gate_.

   get_system_state:	Returns the current system state of the DMS;
			invoked through dm_gate_.

   get_system_version:	Gets the software version id of the DM software
			in use by the current process in the DM ring and
			the software version id in use by the Daemon
			when it created the current DM bootload.

   get_user_bump_time:	returns the time when users will be bumped
   			from Multics if they have not finished user
   			shutdown; invoked through dm_daemon_gate_.

   get_user_shutdown_time:	returns the time when user processes should
   			run dm_misc_util_$signal_user_shutdown;
			invoked through dm_gate_.

*/

/*  HISTORY:
Written by Lee A. Newcomb, 01/07/83.
Modified:
03/07/83 by L. A. Newcomb: to terminate old_dm_system_data_ ref name.
04/23/83 by L. A. Newcomb:  changed the star-name used by
            find_old_bootload_dir to match new name created via
	  request_id_ subr.
04/26/83 by L. A. Newcomb:  Again fixed the starname used to find an old DMS
            bootload directory.
08/17/83 by M. Pandolf: to add set_journal_stamps and get_system_data.
11/29/83 by S. Herbst: to add terminate_dm and using_dm.
01/26/84 by S. Herbst: made $using_dm check that DM_SEGMENT_NAME's linkage
	  section has been combined.
05/11/84 by Lee A. Newcomb: to have $terminate_dm work for an unbound version
	  of DM by terminating single refname fm_'s, bjm_'s, and lm_'s
	  inner ring TV before terminating tm_firstref_tv_.
06/08/84 by Lindsey L. Spratt:  Added the *data_ modules to the list of
            refnames to be terminated by the $terminate_dm entry.  This is
            necessary to ensure that any per-process static data associated
            with these data segments is gotten rid of. Also, added the
	  dm_journal_seg_ and dm_aim_dir_util_ refnames to be explicitly
	  terminated.
06/12/84 by Lindsey L. Spratt:  Changed $terminate_dm to terminate all of the
            DM_SEGMENT_NAMES in all of the rings from get_ring_() to
            OUTERMOST_RING (7).
07/31/84 by Lee A. Newcomb:  added entries $get_daemon_logout_time,
	  $get_system_state, $get_user_bump_time, and
	  $get_user_shutdown_time.
09/27/84 by Lee A. Newcomb:  added the entries get_(begin_shutdown
            shutdown_warning)_time and fixed $get_user_shutdown_time to
	  not use dm_system_data_$initializer_shutdown_time which has
	  been renamed to $user_shutdown_time.
12/02/84 by Lindsey L. Spratt:  Removed the obsolete $get_system_data entry.
            Added $get_initialization_time.
12/03/84 by Stanford S. Cox: Chg refs from *inner_ring_tv_ to =firstref_tv_
12/05/84 by Lindsey L. Spratt:  Removed dm_aim_dir_util_ from the
            DM_SEGMENT_NAMES array as it's obsolete.  Made minor format
            changes.
12/07/84 by Lindsey L. Spratt:  Copied from dm_util_.  Kept all of the entries
            except using_dm, terminate_dm, and set_journal_stamps.  These are
            now in dm_no_firstref_util_.
12/11/84 by Lindsey Spratt: Fixed to reference
	  dm_system_data_$user_warning_time instead of
	  $shutdown_warning_time.
01/24/85 by Lindsey L. Spratt:  Added $get_system_version.  Added
	  dm_firstref_tv_ to the DM_SEGMENT_NAMES to be terminated when
	  doing a user_shutdown.
02/15/85 by Lindsey L. Spratt:  Changed $get_system_version to have two output
            args, p_bootload_version and p_dm_ring_version.
02/26/85 by Lee A. Newcomb:  Fixed to:  return error if >1 file system object
            matches the bootload directory starname; use pathname_ instead
            of concatentation; use standard parameter naming convention.
	  Also removed MANY unused variables and improved the internal
	  procs for cleaning up and error returns.
03/05/85 by Steve Herbst: Replaced dm_log_ with dm_misc_util_$log.
*/

/* format: style2,ll79,ind3,^indprocbody,ifthendo,ifthen,^indnoniterdo,^inddcls,dclind5,idind35,linecom */
%page;
dm_firstref_util_$find_old_boot_dir:
   proc (p_dm_aim_dir, p_old_boot_dir, p_code);

/* START OF DECLARATIONS */

/* Parameter */
dcl  (
     p_dm_aim_dir			char (*),		/* I: dir. to look for per-bootload dir. */
     p_old_boot_dir			char (*),		/* O: in find_old_boot_dir,
						/* I: in dm_status: */
						/* last per-bootload dir. for DMS */
     p_old_dm_status		char (4) aligned,	/* O: status of DMS in a particular boot dir. */
     p_bootload_version		char (8) aligned,
     p_dm_ring_version		char (8) aligned,
     p_code			fixed bin (35)	/* O: normal error code, recovery fails if ^= 0 */
     )				parameter;

/* Automatic */

dcl  (
     code				fixed bin (35),	/* local error code holder */
     sys_data_p			ptr		/* dummy for holding */
     )				automatic;

/* Builtin */
dcl  (null, sum)			builtin;

/* Condition */
dcl  cleanup			condition;

/* Constant */
/* Entry */
dcl  (
     dm_misc_util_$log		entry options (variable),
     get_system_free_area_		entry returns (ptr),
     hcs_$initiate			entry (char (*), char (*), char (*),
				fixed bin (1), fixed bin (2), ptr,
				fixed bin (35)),
     hcs_$star_			entry (char (*), char (*),
				fixed bin (2), ptr, fixed bin, ptr,
				ptr, fixed bin (35)),
     pathname_			entry (char (*), char (*))
				returns (char (168)),
     term_$seg_ptr			entry (ptr, fixed bin (35))
     )				external;

/* External */
dcl  (
     dm_error_$too_many_bootload_dirs	fixed bin (35),
     dm_system_data_$begin_shutdown_time
				fixed bin (71),
     dm_system_data_$current_dm_state	char (4) aligned,
     dm_system_data_$daemon_logout_time fixed bin (71),
     dm_system_data_$initialization_time
				fixed bin (71),
     dm_system_data_$shutdown_reason	char (64) aligned,
     dm_system_data_$system_software_version
				char (8) aligned,
     dm_system_data_$user_warning_time	fixed bin (71),
     dm_system_data_$user_bump_time	fixed bin (71),
     dm_system_data_$user_shutdown_time fixed bin (71),
     dm_system_data_template_$system_software_version
				char (8) aligned,
     old_dm_system_data_$current_dm_state
				char (4) aligned
     )				external static;
%page;
/* find_old_boot_dir:				/* for ease of programming */
/*      proc (p_dm_aim_dir, p_old_boot_dir, p_code); */

/* initialize output parameter */
   p_code = 0;					/* let's be optimistic */

/* Set up for cleaning garbage if we fail */
   star_entry_ptr, star_names_ptr = null ();
   on cleanup call CLEAN_UP_FIND_OLD_BOOT_DIR ();

/* Get a list of all directories with a properly formatted name */
   call hcs_$star_ (p_dm_aim_dir, "dm_dir.??????????", star_BRANCHES_ONLY,
        get_system_free_area_ (), star_entry_count, star_entry_ptr,
        star_names_ptr, code);
   if code ^= 0 then				/* can't do a thing */
      call ERROR_RETURN_FROM_FIND_OLD_BOOT_DIR (code);

/* We should NEVER find more than one validly named old bootload dir.	*/
   if star_entry_count > 1 then
      call ERROR_RETURN_FROM_FIND_OLD_BOOT_DIR (
	 dm_error_$too_many_bootload_dirs);

   p_old_boot_dir =
        pathname_ (p_dm_aim_dir, star_names (star_entries.nindex (1)));

   call FINISH_FIND_OLD_BOOT_DIR ();

MAIN_RETURN:
   return;

/* end dm_firstref_util_$find_old_boot_dir; */
%page;
dm_firstref_util_$dm_status:
   entry (p_old_boot_dir, p_old_dm_status, p_code);

/* must find the dm_system_data_ in the per_bootload_dir. */
   call hcs_$initiate (p_old_boot_dir, "dm_system_data_",
        "old_dm_system_data_", 0, 0, sys_data_p, code);
   if sys_data_p = null () then do;			/* could not find it */
      call dm_misc_util_$log (LOG_SV, code, "dm_firstref_util_$dm_status",
	 "Warning: error attempting to find old dm_system_data_.");
      p_code = code;
      return;
   end;

   p_old_dm_status = old_dm_system_data_$current_dm_state;

   call term_$seg_ptr (sys_data_p, code);
   if code ^= 0 then
      call dm_misc_util_$log (LOG_SV, code, "dm_firstref_util_$dm_status",
	 "Warning: could not terminate old dm_system_data_.");
   return;

/* end dm_firstref_util_$dm_status; */
%skip (4);
dm_firstref_util_$get_initialization_time:
   entry () returns (fixed bin (71));

   return (dm_system_data_$initialization_time);

/* end dm_firstref_util_$get_initialization_time; */
%skip (4);
dm_firstref_util_$get_system_state:
   entry returns (char (4) aligned);

   return (dm_system_data_$current_dm_state);

/* end dm_firstref_util_$get_system_state; */
%skip (4);
dm_firstref_util_$get_system_version:
   entry (p_bootload_version, p_dm_ring_version);

   p_bootload_version = dm_system_data_$system_software_version;
   p_dm_ring_version = dm_system_data_template_$system_software_version;
   return;

/* end dm_firstref_util_$get_system_version; */
%page;
/* user interface to retrieve the shutdown reason */
dm_firstref_util_$get_shutdown_reason:
   entry returns (char (64));

   return (dm_system_data_$shutdown_reason);

/* end dm_firstref_util_$get_shutdown_reason; */
%skip (4);
/* Now the entries that get various time values from dm_system_data_ */

dm_firstref_util_$get_begin_shutdown_time:
   entry returns (fixed bin (71));

   return (dm_system_data_$begin_shutdown_time);

/* end dm_firstref_util_$get_begin_shutdown_time; */
%skip (4);
dm_firstref_util_$get_daemon_logout_time:
   entry returns (fixed bin (71));

   return (dm_system_data_$daemon_logout_time);

/* end dm_firstref_util_$get_daemon_logout_time; */
%skip (4);
dm_firstref_util_$get_shutdown_warning_time:
   entry returns (fixed bin (71));

   return (dm_system_data_$user_warning_time);

/* end dm_firstref_util_$get_shutdown_warning_time; */
%skip (4);
dm_firstref_util_$get_user_bump_time:
   entry returns (fixed bin (71));

   return (dm_system_data_$user_bump_time);

/* end dm_firstref_util_$get_user_bump_time; */
%skip (4);
dm_firstref_util_$get_user_shutdown_time:
   entry returns (fixed bin (71));

   return (dm_system_data_$user_shutdown_time);

/* end dm_firstref_util_$get_user_shutdown_time; */
%page;
FINISH_FIND_OLD_BOOT_DIR:
   proc ();					/* cleanup and finish the same currently */
CLEAN_UP_FIND_OLD_BOOT_DIR:
   entry ();

/* Internal proc. to free star structures if any get allocated */

   if star_names_ptr ^= null () then
      free star_names;

   if star_entry_ptr ^= null () then
      free star_entries;

   end FINISH_FIND_OLD_BOOT_DIR;
%skip (4);
ERROR_RETURN_FROM_FIND_OLD_BOOT_DIR:
   proc (erffobd_p_code);

dcl  erffobd_p_code			fixed bin (35) parameter;

   call CLEAN_UP_FIND_OLD_BOOT_DIR ();

   p_code = erffobd_p_code;

   go to MAIN_RETURN;

   end ERROR_RETURN_FROM_FIND_OLD_BOOT_DIR;
%page;
%include dm_log_sv_codes;
%page;
%include star_structures;


   end dm_firstref_util_$find_old_boot_dir;
