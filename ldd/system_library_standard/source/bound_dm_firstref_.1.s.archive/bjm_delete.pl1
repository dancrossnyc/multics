 /* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION

	The before journal manager delete before journal primitive.

	This procedure will delete a specified before journal if the file is
     not being used at the time of the call.  To insure this, the before
     journal per system table is locked by this process, preventing any
     other process from referencing the PST.  With the PST locked, a check
     is made to see how many processes actually reference the before
     journal; if none, it is deleted via a call to file_manager.
*/

/* HISTORY:
Written by M. Pandolf, 11/02/82.
Modified:
12/21/82 by M. Pandolf:  to add more sophistication to the algorithm.
11/02/83 by M. Pandolf:  to only allow entrynames ending in ".bj".
12/06/83 by L. A. Newcomb:  Renamed before_journal_manager_static_ to
            bjm_data_ and moved some cells from dm_data_ to bjm_data_.
10/18/84 by M. Sharpe:  to clean up dcls and format; to set validation
	  level down before calling file_manager_$? and up after
	  returning; to use "call ERROR_RETURN (code)" convention
11/29/84 by Maggie Sharpe:  to correct the call to cu_$level_get.
03/19/85 by Steve Herbst: Fixed to initialize bjm_data_$bj_code.
*/

/* format: style4,indattr,ifthenstmt,ifthen,^indcomtxt,idind33 */

bjm_delete:
     procedure (p_dir, p_entry, p_code);


/* DECLARATIONS */ 

/* Parameters */

dcl  p_dir		        char (*) parameter;	/* dir of the before journal */
dcl  p_entry		        char (*) parameter;	/* entry name of the before journal */
dcl  p_code		        fixed bin (35) parameter; /* standard system status code */

/* Automatic */

dcl  bj_dir		        char (168);		/* local copy of parameter */
dcl  bj_entry		        char (32);		/* local copy of parameter */
dcl  code			        fixed bin (35);	/* system status code */
dcl  fm_oid		        bit (36) aligned;	/* opening ID of data management file */
dcl  saved_level		        fixed bin;
dcl  current_ring		        fixed bin(3);
dcl  bj_uid		        bit (36) aligned;	/* before journal specific ID of a before journal */
dcl  bj_ppte_ptr		        pointer;		/* pointer to PPT entry for before journal, if open */

/* Builtin */

dcl  null			        builtin;

/* Condition */

dcl  cleanup		        condition;

/* Constant */

dcl  ME			        char (32) internal static options (constant)
			        init ("bjm_delete");

/* Entry */

dcl  get_ring_		        entry returns (fixed bin (3));
dcl  cu_$level_get		        entry (fixed bin);
dcl  cu_$level_set		        entry (fixed bin);
dcl  file_manager_$open	        entry (char (*), char (*), bit (36) aligned, fixed bin (35));
dcl  bj_ci_zero$get_bj_uid	        entry (bit (36) aligned) returns (bit (36));
dcl  bj_pst_lock		        entry ();
dcl  bj_pst_lock$unlock	        entry ();
dcl  bj_pst_search		        entry (bit (36) aligned) returns (ptr);
dcl  bj_ppt_search		        entry (bit (36) aligned) returns (ptr);
dcl  bj_close_oid		        entry (bit (36) aligned);
dcl  bj_oid_util$get_oid	        entry (ptr) returns (bit (36) aligned);
dcl  file_manager_$delete_close       entry (bit (36) aligned, fixed bin (35));
dcl  bj_cleanup_tables$handler        entry (fixed bin (35));

/* External Static */

dcl  dm_error_$bj_recursive_invoc     fixed bin (35) ext static;
dcl  dm_error_$bj_journal_in_use      fixed bin (35) ext static;
dcl  dm_error_$bj_invalid_name        fixed bin (35) ext static;
dcl  bjm_data_$bj_pst_ptr	        pointer external static;


%page;
/* initialize parameters */

	bj_dir = p_dir;
	bj_entry = p_entry;
	p_code = 0;
	call cu_$level_get (saved_level);
	current_ring = get_ring_ ();

/* validate the entry name */

	if ^is_valid_bj_name (bj_entry)
	then do;
	     p_code = dm_error_$bj_invalid_name;
	     goto MAIN_RETURN;
	end;

	on cleanup call CLEANUP;

	if bjm_data_$bj_operation = ""
	then bjm_data_$bj_operation = ME;
	else do;
	     p_code = dm_error_$bj_recursive_invoc;
	     goto MAIN_RETURN;
	end;


/* prepare for unexpected error */

	bjm_data_$bj_exit_err = nonlocal_error_exit;
	bjm_data_$bj_code = 0;

/* get the bj_uid from the journal */

	call cu_$level_set ((current_ring));

	call file_manager_$open (bj_dir, bj_entry, fm_oid, code);

	if fm_oid = (36)"0"b
	then call ERROR_RETURN (code);

	call cu_$level_set (saved_level);

	bj_uid = bj_ci_zero$get_bj_uid (fm_oid);

/*
   lock the PST to begin the following operation:

	if   JOURNAL_UNUSED
	then call DELETE_JOURNAL
	else if   JOURNAL_HAS_1_USER
	     then if   I_AM_ONLY_USER
		then call CLOSE_AND_DELETE_JOURNAL
		else call JOURNAL_IN_USE_ERROR
	     else call JOURNAL_IN_USE_ERROR

   because the PST will be locked, the used status of the journal in question
   will not change while the comparisons are being made.
*/

	call bj_pst_lock ();

	bj_pste_ptr = bj_pst_search (bj_uid);
	bj_ppte_ptr = bj_ppt_search (bj_uid);

	if bj_pste_ptr = null ()
	then call DELETE ();
	else if N_USERS () = 1
	then if bj_ppte_ptr ^= null ()
	     then do;
		call bj_close_oid (bj_oid_util$get_oid (bj_ppte_ptr));
		call DELETE ();
	     end;
	     else call ERROR_RETURN (dm_error_$bj_journal_in_use);
	else call  ERROR_RETURN (dm_error_$bj_journal_in_use);

/* free up the PST for further use */

	call bj_pst_lock$unlock ();

/* begin exit sequence */

	bjm_data_$bj_operation = "";
	bjm_data_$bj_exit_err = bjm_data_$bj_default_error_label;

MAIN_RETURN:
	call cu_$level_set (saved_level);
	return;

nonlocal_error_exit:
	call ERROR_RETURN (bjm_data_$bj_code);

%page;
/* Internal Procedures */

ERROR_RETURN:
	proc (error_code);

dcl  error_code		fixed bin (35);


	call CLEANUP;
	p_code = error_code;
	goto  MAIN_RETURN;

     end ERROR_RETURN;



is_valid_bj_name:
     proc (bj_name)
	reducible
	returns (bit (1) aligned);

dcl  bj_name		        char (*) parameter;
dcl  (length, substr, reverse, rtrim) builtin;

	return (
	     (length (rtrim (bj_name)) < 33) &
	     (substr (reverse (rtrim (bj_name)), 1, 3) = "jb."));

     end is_valid_bj_name;


CLEANUP:
     procedure ();

dcl  cleanup_code			        fixed bin (35);

	call bj_cleanup_tables$handler (cleanup_code);

	bjm_data_$bj_operation = "";
	bjm_data_$bj_exit_err = bjm_data_$bj_default_error_label;

	call cu_$level_set (saved_level);
	return;

     end CLEANUP;

DELETE:
     procedure ();

dcl  delete_code			        fixed bin (35);

	call cu_$level_set ((current_ring));

	call file_manager_$delete_close (fm_oid, delete_code);
	if delete_code ^= 0
	     then call ERROR_RETURN (delete_code);

	call cu_$level_set (saved_level);

	return;

     end DELETE;



N_USERS:
     procedure () returns (fixed bin);

dcl  n_processes		        fixed bin;
dcl  bj_index		        fixed bin;
dcl  proc_index		        fixed bin;

	bj_index = bj_pste.bj_ix;
	bj_check_in_table_ptr = ptr (bjm_data_$bj_pst_ptr, bjm_data_$bj_pst_ptr -> bj_pst.check_in_table_offset);
	n_processes = 0;

	do proc_index = 1 to bj_check_in_table.max_n_processes;
	     if bj_check_in_table.cross_proc_bj (proc_index, bj_index) ^= "0"b
	     then n_processes = n_processes + 1;
	end;

	return (n_processes);

     end N_USERS;


%page;
%include dm_bj_global_error_info;
%page;
%include dm_bj_pst;
%page;
%include dm_bj_pste;
%page;
%include dm_bj_check_in_table;
%page;

     end bjm_delete;
