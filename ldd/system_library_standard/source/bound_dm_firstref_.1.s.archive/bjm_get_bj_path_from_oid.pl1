/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION:
     A procedure to return the dir and entry names of an open before
journal given its opening ID.  We do not lock the PST; as the journal is
open, the pathname info will not be modified.

     BJ_OID is an input argument.  BJ_DIR, BJ_ENTRY, and CODE are
output arguments.
*/

/* HISTORY:
Written by Mike Pandolf, 08/19/82.
Modified:
11/11/82 by M. Pandolf:  to use standard entry and exit protocol.
11/15/82 by M. Pandolf:  to be called as bjm_get_bj_path_from_oid.
11/18/82 by M. Pandolf:  to not lock PST: as long as we have the
	  journal open, pathname info will not be modified.
12/06/83 by L. A. Newcomb:  Renamed before_journal_manager_static_ to
            bjm_data_ and moved some cells from dm_data_ to bjm_data_.
02/19/85 by Lee A. Newcomb:  Fixed to check the versions of the various
            structures used and to properly cleanup; standardized format.
03/19/85 by Steve Herbst: Fixed to initialize bjm_data_$bj_code.
*/
/* format: style2,ll79,ind3,^indprocbody,ifthendo,ifthen,^indnoniterdo,^inddcls,dclind5,idind35,linecom */
%page;
bjm_get_bj_path_from_oid:
   procedure (p_bj_oid, p_bj_dir, p_bj_entry, p_code);

/* DECLARATIONS */

/* Parameter */
dcl  (
     p_bj_oid			bit (36) aligned,	/* BJ opening ID */
     p_bj_dir			char (*),		/* dir of BJ identified bj BJ_OID */
     p_bj_entry			char (*),		/* entryname of BJ identified bj BJ_OID */
     p_code			fixed bin (35)	/* standard system status code */
     )				parameter;

/* Automatic */
dcl  (
     bj_oid			bit (36) aligned init (""b),
     bjm_clean_up_needed		bit (1) aligned init (""b)
     )				automatic;

/* Based */
/* Builtin */
dcl  ptr				builtin;

/* Condition */
dcl  cleanup			condition;

/* Constant */
dcl  (
     CHECK_FOR_BJM_RECURSION		bit (1) aligned init ("1"b),
     DONT_CHECK_FOR_BJM_RECURSION	bit (1) aligned init (""b),
     ME				char (32)
				init ("bjm_get_bj_path_from_oid")
     )				internal static options (constant);

/* Entry */
dcl  (
     bj_cleanup_tables$handler	entry (fixed bin (35)),
     bj_oid_util$get_ptr		entry (bit (36) aligned) returns (ptr),
     bj_pst_search			entry (bit (36) aligned) returns (ptr)
     )				external;

/* External */
dcl  (
     bjm_data_$bj_pst_ptr		ptr,
     (
     dm_error_$bj_bad_ppte_version,
     dm_error_$bj_bad_pst_version,
     dm_error_$bj_bad_pste_version,
     dm_error_$bj_recursive_invoc
     )				fixed bin (35)
     )				external static;

/* Static */

/* END OF DECLARATIONS */
%page;
COPY_AND_INIT_PARAMETERS:
   do;
      bj_oid = p_bj_oid;
      p_bj_dir = "";
      p_bj_entry = "";
      p_code = 0;
   end COPY_AND_INIT_PARAMETERS;

SETUP_FOR_NON_STANDARD_EXIT:
   do;
      on cleanup call CLEAN_UP ();
      call SET_BJM_DATA_ERROR_HANDLING_VALUES (NONLOCAL_ERROR_EXIT, ME,
	 CHECK_FOR_BJM_RECURSION);

   end SETUP_FOR_NON_STANDARD_EXIT;

GET_BJ_TABLE_PTRS:
   do;
      bj_ppte_ptr = bj_oid_util$get_ptr (bj_oid);
      call CHECK_VERSION_NUMERIC (bj_ppte.version, BJ_PPTE_VERSION_1,
	 dm_error_$bj_bad_ppte_version);

      bj_pste_ptr = bj_pst_search ((bj_ppte.bj_uid));	/* get a pointer to the PSTE for this PPTE */
      call CHECK_VERSION_NUMERIC (bj_pste.version, BJ_PSTE_VERSION_2,
	 dm_error_$bj_bad_pste_version);
   end GET_BJ_TABLE_PTRS;

/* use the bj_ix to look up the BJ pathname in the pathname table */
   call CHECK_VERSION_NUMERIC (bjm_data_$bj_pst_ptr -> bj_pst.version,
        BJ_PST_VERSION_1, dm_error_$bj_bad_pst_version);
   bj_pn_table_ptr =
        ptr (bjm_data_$bj_pst_ptr,
        bjm_data_$bj_pst_ptr -> bj_pst.pn_table_offset);

SET_OUTPUT_PARAMETERS:
   do;
      p_bj_dir = bj_pn_table (bj_pste.bj_ix).dir;
      p_bj_entry = bj_pn_table (bj_pste.bj_ix).entry;
   end SET_OUTPUT_PARAMETERS;

   call FINISH ();

MAIN_RETURN:
   return;
%page;
NONLOCAL_ERROR_EXIT:
   call ERROR_RETURN (bjm_data_$bj_code);
%skip (4);
FINISH:
   proc ();

   call SET_BJM_DATA_ERROR_HANDLING_VALUES (bjm_data_$bj_default_error_label,
        "", DONT_CHECK_FOR_BJM_RECURSION);

   return;

   end FINISH;
%skip (4);
ERROR_RETURN:
   proc (er_p_code);

dcl  er_p_code			fixed bin (35) parameter;

   call CLEAN_UP ();
   p_code = er_p_code;
   goto MAIN_RETURN;

   end ERROR_RETURN;
%skip (4);
CLEAN_UP:
   proc ();

   if bjm_clean_up_needed then
      call bj_cleanup_tables$handler (0);

   call FINISH ();

   return;

   end CLEAN_UP;
%page;
SET_BJM_DATA_ERROR_HANDLING_VALUES:
   proc (sbdehv_p_error_exit, sbdehv_p_operation,
        sbdehv_p_check_for_recursive_invocation);

/* This internal procedure centralizes the setting of the BJM global	*/
/* error values in bjm_data_.  It is called near the beginning of	*/
/* this module, and in the FINISH internal procedure.  ONLY THE FIRST	*/
/* OF THESE CALLS SHOULD ASK FOR DETECTION OF A RECURSIVE INVOCATION	*/
/* OF THE BEFORE JOURNAL MANAGER, if the other calls did, we could	*/
/* end up getting a recursive call ERROR_RETURN, CLEAN_UP, FINISH,	*/
/* this proc, etc.						*/

dcl  (
     sbdehv_p_error_exit		label variable,
     sbdehv_p_operation		char (*),
     sbdehv_p_check_for_recursive_invocation
				bit (1) aligned
     )				parameter;

   if sbdehv_p_check_for_recursive_invocation then
      if bjm_data_$bj_operation ^= "" then
         call ERROR_RETURN (dm_error_$bj_recursive_invoc);

   bjm_clean_up_needed = "1"b;
   bjm_data_$bj_exit_err = sbdehv_p_error_exit;
   bjm_data_$bj_operation = sbdehv_p_operation;
   bjm_data_$bj_code = 0;

   return;

   end SET_BJM_DATA_ERROR_HANDLING_VALUES;
%skip (4);
CHECK_VERSION_NUMERIC:
   proc (cvn_p_given_version, cvn_p_correct_version, cvn_p_error_to_use);

/* The error code to use is passed as this is really a template proc	*/
/* used in several modules to check structure versions.  It is hoped	*/
/* newer versions of these structures will be changed to use	*/
/* char (8) versions.					*/

dcl  (
     cvn_p_given_version		fixed bin,
     cvn_p_correct_version		fixed bin,
     cvn_p_error_to_use		fixed bin (35)
     )				parameter;

   if cvn_p_given_version ^= cvn_p_correct_version then
      call ERROR_RETURN (cvn_p_error_to_use);

   end CHECK_VERSION_NUMERIC;
%page;
%include dm_bj_ppt;
%page;
%include dm_bj_pst;
%page;
%include dm_bj_pste;
%page;
%include dm_bj_pn_table;
%page;
%include dm_bj_global_error_info;


   end bjm_get_bj_path_from_oid;
