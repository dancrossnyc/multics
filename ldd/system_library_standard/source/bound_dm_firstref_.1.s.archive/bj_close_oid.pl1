/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION

   bj_close_oid - implements the before journal manager close primitive.

   This procedure decrements the n_opened count of the before journal
   specified by the first parameter.  It then checks the count to see if
   it is zero, indicating that the before journal is not referenced by
   any program in this process.  This being the case, the before journal
   can be closed.  If not, an appropriate code is returned.  If being
   closed, then the pste for this before journal must be adjusted to
   reflect that one less process is using it.  This is done with the pst 
   locked (as required by bj_pst_register$check_out).  The closing may
   effect the default before journal status.  This procedure makes sure
   that there is a valid default before journal reflected in dm_data_.

   Design consideration: the PST must be locked before this program is
   called.  bj_close_oid cannot know of the environment from which it
   was called, hence the requirement of locking the PST.
*/

/* HISTORY:
Written by Mike Pandolf, 07/06/82.
Modified:
08/24/82 by Mike Pandolf:  To be bjm support procedure
10/04/82 by Lee A. Newcomb:  To understand that there are two default_bj
	  OID cells as per the write_begin_mark BJ selection protocol.
10/15/82 by M. Pandolf:  to use file_manager_ for manipulation of data
	  management files.
11/03/82 by M. Pandolf:  to remove PSTE if journal is used by no one after
	  it is closed in this process.
11/23/82 by A. Bensoussan:  to call dm_hcs_$free_journal.
12/21/82 by M. Pandolf:  to remove call to bj_pst_lock.  see notes above.
03/10/83 by M. Pandolf:  to log calls to dm_send_request_.
03/15/83 by M. Pandolf:  to get rid of call to
	  dm_send_request_$adjust_process_id because this leads to an
	  endless wakeup loop if the adjustment fails; to not allow journal
	  checkout from system table if the journal has a non zero
	  transaction count.
03/29/83 by A. Bensoussan:  to call bj_pste_delete which centralizes the
	  freeing of pste's.
05/06/83 by A.Bensoussan:  to add the entry point $after_recovery.
12/06/83 by L. A. Newcomb:  Renamed before_journal_manager_static_ to
            bjm_data_ and moved some cells from dm_data_ to bjm_data_.
11/30/84 by Maggie Sharpe:  to set/reset validation level around the call to
            file_manager_.
04/05/85 by Lee A. Newcomb:  Fixed to not call dm_pste_register$check_out_dead
            during recovery.
05/10/85 by R. Michael Tague:  Removed dm_journal_seg_.incl.pl1 - unreferenced.
*/

/* format: style4,^indcomtxt,^ifthen,indattr,^inddcls,idind40 */
%page;
bj_close_oid:
     procedure (p_bj_oid);


/* DECLARATIONS */

/* Parameter */

dcl  p_bj_oid			     bit (36) aligned parameter; /* OID of before journal to be closed */

/* Automatic */

dcl  fm_oid			     bit (36) aligned; /* local aligned copy of fm_oid for call to file_manager_ */
dcl  code				     fixed bin (35);/* standard system status code */
dcl  bj_uid			     bit (36) aligned;
dcl  bj_oid			     bit (36) aligned; /* copy of the parameter */
dcl  close_after_recovery		     bit (1);
dcl  saved_level			     fixed bin;

/* Builtin */

dcl  addr				     builtin;

/* Condition */

dcl  cleanup			     condition;

/* Constant */

dcl  ME				     char (32) internal static options (constant) init ("bj_close_oid");


/* Entry */

dcl  bj_oid_util$get_ptr		     entry (bit (36) aligned) returns (pointer);
dcl  bj_oid_util$get_latest_oid	     entry () returns (bit (36) aligned);
dcl  bj_pste_register$check_out	     entry (pointer);
dcl  bj_pste_register$check_out_dead	     entry (ptr, bit (36) aligned);
dcl  bj_pste_delete			     entry (ptr);
dcl  bj_pste_delete$after_recovery	     entry (ptr);
dcl  bj_report_err			     entry (fixed bin (35), char (*));
dcl  cu_$level_get			     entry (fixed bin);
dcl  cu_$level_set			     entry (fixed bin);
dcl  file_manager_$close		     entry (bit (36) aligned, fixed bin (35));
dcl  get_ring_			     entry () returns (fixed bin (3));
dcl  hcs_$validate_processid		     entry (bit (36) aligned, fixed bin (35));




/* External Static */

dcl  bjm_data_$bj_ppt_ptr		     pointer external static;
dcl  bjm_data_$bj_pst_ptr		     pointer external static;
dcl  dm_data_$bj_txt_ptr		     pointer external static;
dcl  dm_data_$current_txn_id		     bit (36) external static;
dcl  dm_data_$current_txn_index	     fixed bin external static;
dcl  dm_error_$bj_journal_in_use	     fixed bin (35) external static;

%page;

/* Standard entrypoint */

	close_after_recovery = "0"b;
	goto COMMON;

after_recovery: entry (p_bj_oid);

	close_after_recovery = "1"b;
	goto COMMON;



COMMON:	bj_oid = p_bj_oid;
	code = 0;
	call cu_$level_get (saved_level);

	on cleanup begin;
	     call cu_$level_set (saved_level);
	end;

/* get pointer to ppte referenced by OID */

	bj_ppte_ptr = bj_oid_util$get_ptr (bj_oid);


/* if we are trying to close a journal which we are currently using, give up */

	if dm_data_$current_txn_id ^= (36)"0"b then
	     if bj_ppte.bj_uid = addr (dm_data_$bj_txt_ptr -> bj_txt.entry (dm_data_$current_txn_index)) -> bj_txte.bj_uid
	     then do;
		code = dm_error_$bj_journal_in_use;
		goto local_error_exit;
	     end;


/* decrement number of openings this process by one */

	if close_after_recovery = "0"b
	then bj_ppte.n_opening = bj_ppte.n_opening - 1;
	else bj_ppte.n_opening = 0;


/* if openings > 0, then we can do no more */

	if bj_ppte.n_opening > 0
	then goto exit;


/* begin the big close... */

	bjm_data_$bj_ppt_ptr -> bj_ppt.n_entries_used = bjm_data_$bj_ppt_ptr -> bj_ppt.n_entries_used - 1;


/* get the file manager opening ID for later use */

	fm_oid = bj_ppte.pf_oid;


/* openings = 0, so we can actually close the before journal at the system level */

	bj_pste_ptr = bj_ppte.bj_pste_ptr;

	call bj_pste_register$check_out (bj_pste_ptr);	/* Check me out */

	if close_after_recovery = "0"b
	then do;
	     call bj_pste_register$check_out_dead (bj_pste_ptr, (36)"0"b); /* Check all dead out */
	     if bj_pste.n_processes = 0 & bj_pste.n_txn = 0
	     then call bj_pste_delete (bj_pste_ptr);
	end;
	else
	     call bj_pste_delete$after_recovery (bj_pste_ptr);
%page;
/* mark the PPTE as unused */

	bj_ppte.version = 0;

/* open a window where there is no known default before journal */

	bj_ppt_ptr = bjm_data_$bj_ppt_ptr;		/* get bj_ppt loc. in auto. storage */

	if bj_ppt.default_bj.user_set_oid = bj_oid then	/* lost our explicit default BJ */
	     bj_ppt.default_bj.user_set_oid = ""b;

	if bj_ppt.default_bj.last_opened_oid = bj_oid then/* lost our 1st implicit BJ */
	     bj_ppt.default_bj.last_opened_oid = ""b;


/* close the before journal in its capacity as a dms file */

	call cu_$level_set (get_ring_ ());
	call file_manager_$close (fm_oid, code);
	call cu_$level_set (saved_level);

/* close the window where there is no known default before journal */
/* note we only get an implicit default if the user set one has been closed */

	if bj_ppt.default_bj.last_opened_oid = ""b then
	     bj_ppt.default_bj.last_opened_oid = bj_oid_util$get_latest_oid ();

/* check the code we got last call, during the default journal window */

	if code ^= 0
	then goto local_error_exit;


/* the close operation is now completed */

exit:
	return;

local_error_exit:
	call bj_report_err (code, ME);
	goto exit;


/* Include Files */

%page;
%include dm_bj_static;
%page;
%include dm_bj_ppt;
%page;
%include dm_bj_pst;
%page;
%include dm_bj_pste;
%page;
%include dm_bj_check_in_table;
%page;
%include dm_bj_pn_table;
%page;
%include dm_bj_txt;
%page;
%include dm_log_sv_codes;
%page;

     end bj_close_oid;
