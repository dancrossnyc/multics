/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* format: style4,indattr,ifthenstmt,ifthen,^indcomtxt,idind33 */

bj_pst_lock: proc;

/* DESCRIPTION:
     The lock entry point sets the lock in the header of the bj_pst
(per system table). This lock has the standard format assumed by the
fast lock primitive of the Lock Manager. The lock is a double word
that must be initialized by calling lock_manager_$init_fast_lock.

     This lock must be acquired by any operation that searches the table
for a bj_uid, or does allocation or dealocation of any kind in the table:
allocate/free entry, alocate/free buffer, create/delete entry....etc.

     If the lock was already set by this process, this is an error; it should
never happen. If it happens, an error is reported.

     If the lock was set by a dead process, the lock procedure is responsible
for forcing the lock and calling the bj_undo procedure to undo whatever
the dead process had done to the table before dying.

     The unlock entry point unlocks the table.
*/

/* HISTORY:
Written by Mike Pandolf, 08/04/82.
Modified:
12/06/83 by L. A. Newcomb:  Renamed before_journal_manager_static_ to
            bjm_data_ and moved some cells from dm_data_ to bjm_data_.
*/
%page;
dcl  ME			        char (11) internal static options (constant)
			        init ("bj_pst_lock");


dcl  code			        fixed bin (35);

dcl  bjm_data_$lock_manager_timeout
			        fixed bin (71) aligned external static;

dcl  bj_report_err		        entry (fixed bin (35), char (*));
dcl  bjm_data_$bj_pst_ptr	        pointer external;

dcl  lock_manager_$lock_fast	        entry (ptr, fixed bin (71) aligned, fixed bin (35));
dcl  lock_manager_$unlock_fast        entry (ptr, fixed bin (35));


/* Lock entry point */


	bj_pst_ptr = bjm_data_$bj_pst_ptr;

	call lock_manager_$lock_fast (addr (bj_pst.lock), bjm_data_$lock_manager_timeout, code);

	if code ^= 0 then goto exit_err;		/* This is temporary - Should analyse code */

	goto exit;





unlock: entry;

	bj_pst_ptr = bjm_data_$bj_pst_ptr;

	bj_pst.mod_list_area (1) = 0;

	call lock_manager_$unlock_fast (addr (bj_pst.lock), code);

	if code ^= 0 then goto exit_err;

	goto exit;



exit:	return;

exit_err: call bj_report_err (code, ME);


%include dm_bj_static;


%include dm_bj_pst;


%include dm_bj_pste;


     end bj_pst_lock;
