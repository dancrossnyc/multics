/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1985 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION:

		bj_max_txn_storage_limit.pl1

	returns the maximum number of bytes available to users in a
     before journal.

	The input parameter must locate a BJ header (bj_pste) with
     a valid version, and the ci_size and max_size components set.
     The following list gives the list of overhead storage in a BJ
     control interval not included it in the maximum limit.  Please
     note the maximum is accurate only if one BJ record per CI (i.e.,
     one slot) is used; in the common case of >1 slots per CI in use,
     the maximum will exceed the actual available storage by a small
     amount, but other mechanisms prevent the overwriting of valid BJ
     records and the inaccuracy is relatively small.

     OVERHEAD STORAGE:
     - CI zero (used only for BJ header)
     - DM file CI headers and trailers (see dm_ci_header.incl.pl1)
     - per-CI BJ specific headers (see dm_bj_ci.incl.pl1)
     - the first slot of each CI.
*/

/* HISTORY:

Written by Lee A. Newcomb, 03/13/85.
Modified:
*/

/* format: style2,ll79,ind3,^indprocbody,ifthendo,ifthen,^indnoniterdo,^inddcls,dclind5,idind35,linecom */
%page;
bj_max_txn_storage_limit:
   proc (p_bj_header_ptr) returns (fixed bin (35));

/* START OF DECLARATIONS */
/* Parameter */
dcl  p_bj_header_ptr		ptr		/* loc. of BJ header.*/
				parameter;

/* Automatic */
dcl  (
     total_available_CIs		fixed bin (24) init (0),
     total_bytes			fixed bin (35) init (0),
     total_bytes_not_available	fixed bin (35) init (0),
     total_words_not_available	fixed bin (32) init (0),
     words_not_available_per_CI	fixed bin (18) init (0)
     )				automatic;

/* Based */
dcl  1 bj_ci_slot			aligned like bj_ci.slot;
						/* for size calculation */

/* Builtin */
dcl  (multiply, null, size)		builtin;

/* Constant */
dcl  (
     BYTES_PER_WORD			fixed bin init (4),
     MYNAME			init ("bj_max_txn_storage_limit")
				char (24)
     )				internal static options (constant);

/* Entry */
dcl  bj_report_err			entry (fixed bin (35), char (*))
				external;

/* External */
dcl  dm_error_$bj_bad_header		fixed bin (35) external static;

/* END OF DECLARATIONS */
%page;
COPY_PARAMETER:
   bj_header_ptr = p_bj_header_ptr;

/* bj_header's are currently equivalent to bj_pste's */
   call CHECK_VERSION_NUMERIC (bj_header.version, BJ_PSTE_VERSION_2,
        dm_error_$bj_bad_header);

   total_available_CIs = bj_header.max_size - 1;		/* -1 ==> do not include CI 0 */

   total_bytes = multiply (total_available_CIs, bj_header.ci_size,
						/* times CI size in bytes */
        35, 0);

   words_not_available_per_CI = size (ci_header)		/* DM file CI headers */
        + size (ci_trailer)				/* and DM file CI trailers */
        + size (header2)				/* and BJ specific CI header */
        + size (bj_ci_slot) /* and 1st BJ slot */;

   total_words_not_available =
        multiply (total_available_CIs, words_not_available_per_CI, 32, 0);

   total_bytes_not_available =
        multiply (total_words_not_available, BYTES_PER_WORD, 35, 0);

/* return max storage limit */

   return (total_bytes - total_bytes_not_available);

/* end bj_max_txn_storage_limit; */
%page;
ERROR_RETURN:
   proc (er_p_code);
dcl  er_p_code			fixed bin (35);

   call bj_report_err (er_p_code, MYNAME);

   end ERROR_RETURN;
%skip (4);
CHECK_VERSION_NUMERIC:
   proc (cvn_p_given_version, cvn_p_correct_version, cvn_p_error_to_use);

/* The error code to use is passed as this is really a template proc	*/
/* used in several modules to check structure versions.  It is hoped	*/
/* newer versions of these structures will be changed to use	*/
/* char (8) versions.					*/

dcl  (
     cvn_p_given_version		fixed bin,
     cvn_p_correct_version		fixed bin,
     cvn_p_error_to_use		fixed bin (35)
     )				parameter;

   if cvn_p_given_version ^= cvn_p_correct_version then
      call ERROR_RETURN (cvn_p_error_to_use);

   end CHECK_VERSION_NUMERIC;
%page;
%include dm_bj_header;
%page;
%include dm_bj_pste;
%page;
%include dm_bj_ci;
%page;
%include dm_ci_header;


   end bj_max_txn_storage_limit;
