/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION:

     A subroutine interface to before (image) journal manager to return
information about a selected journal.  This subroutine will return either
information about a single journal (if p_dir and p_entry are non-null
strings), from the journals in the PPT (if p_dir is null and
p_entry = "process"), or will return information from the PST (if p_dir
is null and p_entry = "system").  When specifying that information from
a single journal be obtained, the journal can be currently unused, in
which case its info will come from its header. when a journal is in use,
its information will come from the per system table entry, which is really
the "most recent" copy of the header.  Instead of placing the info in a
caller provided location, we expect to find an area in which we can
allocate the information structure ourselves.
*/

/* HISTORY:
Written by M. Pandolf, 04/13/83.
Modified:
04/13/83 by M. Pandolf:  to bypass compiler bug when copying pste.
04/15/83 by M. Pandolf:  to add metering parameter.
07/01/83 by M. Pandolf:  to specify process or system openings.
10/01/83 by M. Pandolf:  to validate p_area_ptr before use.
11/01/83 by M. Pandolf:  to only allow entrynames ending in ".bj".
12/06/83 by L. A. Newcomb:  Renamed before_journal_manager_static_ to
            bjm_data_ and moved some cells from dm_data_ to bjm_data_.
01/06/84 by M. Pandolf: modified jan 1984 by M. Pandolf to not check
            p_entry if p_dir is null.
06/11/84 by Lee Baldwin:  Renamed dm_error_$bj_header_bad to $bj_bad_header.
11/30/84 by Maggie Sharpe:  to use ERROR_RETURN technology; to set/reset
            validation level around calls to file_manager_.
02/13/85 by Lee A. Newcomb:  Fixed to return error_table_$null_info_ptr
            instead of $argerr if area_ptr is null; fixed RETURN_WHOLE_PST to
            check for "e" access to dm_admin_gate_; fixed up declarations and
            format, and use FINISH, etc.  procs.
03/19/85 by Steve Herbst: Fixed to initialize bjm_data_$bj_code.
*/

/* format: style2,ll79,ind3,^indprocbody,ifthendo,ifthen,^indnoniterdo,^inddcls,dclind5,idind35,linecom */
%page;
bjm_get_journal_status:
   procedure (p_dir, p_entry, p_area_ptr, p_bj_status_ptr,
        p_bj_global_meters_ptr, p_code);


/* DECLARATIONS */

/* Parameter */
dcl  (
     p_dir			char (*),
     p_entry			char (*),
     p_area_ptr			pointer,
     p_bj_status_ptr		pointer,
     p_bj_global_meters_ptr		pointer,
     p_code			fixed bin (35)
     )				parameter;

/* Automatic */
dcl  (
     area_ptr			pointer,
     bj_dir			char (168),
     bj_entry			char (32),
     bj_ix			fixed bin,
     bj_pst_dir			char (168) init (""),
     bj_pst_entry			char (32) init (""),
     bj_uid			bit (36) aligned init (NULL_ID),
     bjm_clean_up_needed		bit (1) aligned init (""b),
     clean_up_started_freeing		bit (1) aligned init (""b),
						/* for CLEAN_UP */
     code				fixed bin (35) init (0),
     current_ring			fixed bin (3) init (-1),
     dm_admin_gate_access_bin		fixed bin (5) init (N_ACCESS_BIN),
     dm_admin_gate_dir		char (168) init (""),
     dm_admin_gate_dir_length		fixed bin init (0),
     dm_admin_gate_ptr		ptr init (null),
     fm_oid			bit (36) aligned init (NULL_ID),
     fm_uid			bit (36) aligned init (NULL_ID),
     journal_info_ix		fixed bin,
     ppt_ix			fixed bin,
     pst_ix			fixed bin,
     saved_level			fixed bin init (-1),
     1 my_bj_pste			aligned like bj_pste
     )				automatic;

/* Based */
dcl  caller_supplied_area		area based (area_ptr);

/* Builtin */
dcl  (addr, bit, codeptr, length, null, ptr, reverse, rtrim, size, substr,
     unspec)			builtin;

/* Condition */
dcl  cleanup			condition;

/* Constant */
dcl  (
     MY_NAME			char (32)
				init ("bjm_get_journal_status"),
     CHECK_FOR_BJM_RECURSION		bit (1) aligned init ("1"b),
     DM_ADMIN_GATE_NAME		char (32) init ("dm_admin_gate_"),
     DONT_CHECK_FOR_BJM_RECURSION	bit (1) aligned init ("0"b),
     NULL_ID			bit (36) aligned init ((36)"0"b)
     )				internal static options (constant);

/* Entry */
dcl  (
     bj_ci_zero$get_bj_uid		entry (bit (36) aligned)
				returns (bit (36)),
     bj_ci_zero$get_header		entry (bit (36) aligned, ptr,
				fixed bin),
     bj_ci_zero$get_pf_uid		entry (bit (36) aligned)
				returns (bit (36)),
     bj_cleanup_tables$handler	entry (fixed bin (35)),
     bj_pst_lock			entry (),
     bj_pst_lock$unlock		entry (),
     bj_pst_search			entry (bit (36) aligned) returns (ptr),
     cu_$level_set			entry (fixed bin),
     cu_$level_get			entry (fixed bin),
     file_manager_$close		entry (bit (36) aligned,
				fixed bin (35)),
     file_manager_$open		entry (char (*), char (*),
				bit (36) aligned, fixed bin (35)),
     get_ring_			entry () returns (fixed bin (3)),
     get_group_id_			entry () returns (char (32)),
     hcs_$fs_get_path_name		entry (ptr, char (*), fixed bin,
				char (*), fixed bin (35)),
     hcs_$get_user_effmode		entry (char (*), char (*), char (*),
				fixed bin, fixed bin (5),
				fixed bin (35)),
     hcs_$make_ptr			entry (ptr, char (*), char (*), ptr,
				fixed bin (35))
     )				external;

/* External */
dcl  (
     (
     bjm_data_$bj_ppt_ptr,
     bjm_data_$bj_pst_ptr
     )				pointer,
     (
     dm_error_$bj_recursive_invoc,
     dm_error_$bj_bad_header,
     dm_error_$bj_invalid_name,
     error_table_$badpath,
     error_table_$not_privileged,
     error_table_$null_info_ptr
     )				fixed bin (35)
     )				external static;

/* Static */

/* END OF DECLARATIONS */
%page;
COPY_AND_INIT_PARAMETERS:
   do;
      bj_dir = p_dir;
      bj_entry = p_entry;
      area_ptr = p_area_ptr;
      p_bj_status_ptr = null ();
      p_bj_global_meters_ptr = null ();
      p_code = 0;
   end COPY_AND_INIT_PARAMETERS;


PARTIALLY_VALIDATE_INPUT_PARAMETERS:
   do;
      if p_area_ptr = null () then			/* must have a place to put info */
         call ERROR_RETURN (error_table_$null_info_ptr);

      if p_dir ^= "" then
         if ^IS_VALID_BJ_NAME (bj_entry) then
	  call ERROR_RETURN (dm_error_$bj_invalid_name);
   end PARTIALLY_VALIDATE_INPUT_PARAMETERS;


SETUP_FOR_NON_STANDARD_EXIT:
   do;
      call cu_$level_get (saved_level);
      current_ring = get_ring_ ();

      call SET_BJM_DATA_ERROR_HANDLING_VALUES (NONLOCAL_ERROR_EXIT, MY_NAME,
	 CHECK_FOR_BJM_RECURSION);

      bj_status_ptr = null ();
      bj_global_meters_ptr = null ();
      on cleanup call CLEAN_UP ();

   end SETUP_FOR_NON_STANDARD_EXIT;


GET_STATUS:
   do;
      if bj_dir = "" then
         if (bj_entry = "system") | (bj_entry = "") then
	  call RETURN_WHOLE_PST ();
         else if bj_entry = "process" then
	  call RETURN_MINE_FROM_PST ();
         else call ERROR_RETURN (error_table_$badpath);

      else if bj_entry = "" then
         call ERROR_RETURN (error_table_$badpath);

      else call RETURN_ONE_PSTE ();

      p_bj_status_ptr = bj_status_ptr;
   end GET_STATUS;


GET_METERS:
   do;
      allocate bj_global_meters set (bj_global_meters_ptr)
	 in (caller_supplied_area);

      bj_global_meters.meters = bjm_data_$bj_pst_ptr -> bj_pst.meters;
      bj_global_meters.time_of_bootload =
	 bjm_data_$bj_pst_ptr -> bj_pst.time_of_bootload;
      p_bj_global_meters_ptr = bj_global_meters_ptr;
   end GET_METERS;


   call FINISH ();

MAIN_RETURN:
   return;

/* end bjm_get_journal_status; */
%page;
NONLOCAL_ERROR_EXIT:
   call ERROR_RETURN (bjm_data_$bj_code);
%skip (4);
FINISH:
   proc ();

   call SET_BJM_DATA_ERROR_HANDLING_VALUES (bjm_data_$bj_default_error_label,
        "", DONT_CHECK_FOR_BJM_RECURSION);
   call cu_$level_set (saved_level);

   return;

   end FINISH;
%skip (4);
ERROR_RETURN:
   proc (er_p_code);

dcl  er_p_code			fixed bin (35) parameter;

   call CLEAN_UP ();
   p_code = er_p_code;
   goto MAIN_RETURN;

   end ERROR_RETURN;
%page;
CLEAN_UP:
   proc ();

/* Try to free any allocated for the status or metering	*/
/* structures.  We guarantee we can never free more than	*/
/* once as errors should be few.  Also make sure any files	*/
/* openings we did are closed and cleanup the BJ tables.	*/

   if fm_oid ^= ""b then				/* we opened */
      call file_manager_$close (fm_oid, 0);

   if ^clean_up_started_freeing then			/* in case called >1 times */
CLEAN_UP_FREE_STRUCTURES:
      do;
      clean_up_started_freeing = "1"b;
      if bj_status_ptr ^= null () then
         free bj_status_ptr -> bj_status in (caller_supplied_area);
      if bj_global_meters_ptr ^= null () then
         free bj_global_meters_ptr
	    -> bj_global_meters in (caller_supplied_area);
   end CLEAN_UP_FREE_STRUCTURES;

   if bjm_clean_up_needed then
      call bj_cleanup_tables$handler (0);

   call FINISH ();

   return;

   end CLEAN_UP;
%page;
SET_BJM_DATA_ERROR_HANDLING_VALUES:
   proc (sbdehv_p_error_exit, sbdehv_p_operation,
        sbdehv_p_check_for_recursive_invocation);

/* This internal procedure centralizes the setting of the BJM global	*/
/* error values in bjm_data_.  It is called near the beginning of	*/
/* this module, and in the FINISH internal procedure.  ONLY THE FIRST	*/
/* OF THESE CALLS SHOULD ASK FOR DETECTION OF A RECURSIVE INVOCATION	*/
/* OF THE BEFORE JOURNAL MANAGER, if the other calls did, we could	*/
/* end up getting a recursive call ERROR_RETURN, CLEAN_UP, FINISH,	*/
/* this proc, etc.						*/

dcl  (
     sbdehv_p_error_exit		label variable,
     sbdehv_p_operation		char (*),
     sbdehv_p_check_for_recursive_invocation
				bit (1) aligned
     )				parameter;

   if sbdehv_p_check_for_recursive_invocation then
      if bjm_data_$bj_operation ^= "" then
         call ERROR_RETURN (dm_error_$bj_recursive_invoc);

   bjm_clean_up_needed = "1"b;
   bjm_data_$bj_exit_err = sbdehv_p_error_exit;
   bjm_data_$bj_operation = sbdehv_p_operation;
   bjm_data_$bj_code = 0;

   return;

   end SET_BJM_DATA_ERROR_HANDLING_VALUES;
%skip (4);
IS_VALID_BJ_NAME:
   proc (ivbn_p_bj_name) reducible returns (bit (1) aligned);

dcl  ivbn_p_bj_name			char (*) parameter;

   return ((length (rtrim (ivbn_p_bj_name)) < 33)
        & (substr (reverse (rtrim (ivbn_p_bj_name)), 1, 3) = "jb."));

   end IS_VALID_BJ_NAME;
%page;
RETURN_ONE_PSTE:
   procedure ();

   call cu_$level_set ((current_ring));
   call file_manager_$open (bj_dir, bj_entry, fm_oid, code);
   call cu_$level_set (saved_level);

   if fm_oid = NULL_ID then
      call ERROR_RETURN (code);

CHECK_FILE_AND_BJ_UIDS:
   do;
      fm_uid = bj_ci_zero$get_pf_uid (fm_oid);
      bj_uid = bj_ci_zero$get_bj_uid (fm_oid);

      if fm_uid ^= bj_uid then do;
         call cu_$level_set ((current_ring));
         call file_manager_$close (fm_oid, code);
         call cu_$level_set (saved_level);
         call ERROR_RETURN (dm_error_$bj_bad_header);
      end;
   end CHECK_FILE_AND_BJ_UIDS;

/* the selected file seems to be a journal. obtain info on it */

   bj_pn_table_ptr =
        ptr (bjm_data_$bj_pst_ptr,
        bjm_data_$bj_pst_ptr -> bj_pst.pn_table_offset);

   call bj_pst_lock ();

   bj_pste_ptr = bj_pst_search (bj_uid);
   if bj_pste_ptr ^= null () then
JOURNAL_IS_ACTIVE:
      do;
      my_bj_pste = bj_pste;
      bj_pst_dir = bj_pn_table (bj_pste.bj_ix).dir;
      bj_pst_entry = bj_pn_table (bj_pste.bj_ix).entry;
   end JOURNAL_IS_ACTIVE;

   call bj_pst_lock$unlock ();			/* don't wait for getting inactive info */

   if bj_pste_ptr = null () then
INACTIVE_BJ_GET_INFO_FROM_HEADER:
      do;
      call bj_ci_zero$get_header (fm_oid, addr (my_bj_pste), size (my_bj_pste))
	 ;
      bj_pst_dir = bj_dir;
      bj_pst_entry = bj_entry;
      my_bj_pste.active = "0"b;
   end INACTIVE_BJ_GET_INFO_FROM_HEADER;

CLOSE_BJ_FILE:
   do;
      call cu_$level_set ((current_ring));
      call file_manager_$close (fm_oid, code);
      call cu_$level_set (saved_level);
   end CLOSE_BJ_FILE;

COPY_INFO_TO_USER_AREA:
   do;
      bj_status_n_journals = 1;
      allocate bj_status set (bj_status_ptr) in (caller_supplied_area);

      bj_status.journal (1).dir = bj_pst_dir;
      bj_status.journal (1).entry = bj_pst_entry;
      unspec (bj_status.journal (1).system_info) = unspec (my_bj_pste);
   end COPY_INFO_TO_USER_AREA;

   return;

   end RETURN_ONE_PSTE;
%page;
RETURN_WHOLE_PST:
   procedure ();

/* We do not guarantee totally exact info, particularly in	*/
/* case a journal was removed from use.  We will not return	*/
/* info on more journals than when we first examined the	*/
/* bj_pst as we read the PST without it locked.  We may	*/
/* get a journal with some info invalid if we pick it up	*/
/* while it was being removed from use by another process.	*/

VALIDATE_ADMINISTRATIVE_ACCESS:
   do;
      call hcs_$make_ptr (codeptr (bjm_get_journal_status), DM_ADMIN_GATE_NAME,
	 "", dm_admin_gate_ptr, code);
      if dm_admin_gate_ptr = null () then
         call ERROR_RETURN (code);
      call hcs_$fs_get_path_name (dm_admin_gate_ptr, dm_admin_gate_dir,
	 dm_admin_gate_dir_length, (32)" " /* don't care what ename is */,
	 code);
      if code ^= 0 then
         call ERROR_RETURN (code);
      call hcs_$get_user_effmode (
	 substr (dm_admin_gate_dir, 1, dm_admin_gate_dir_length),
	 DM_ADMIN_GATE_NAME, get_group_id_ (), saved_level,
	 dm_admin_gate_access_bin, code);
      if code ^= 0 then
         call ERROR_RETURN (code);
      if substr (bit (dm_admin_gate_access_bin), 2, 3) & E_ACCESS ^= E_ACCESS
	 then
         call ERROR_RETURN (error_table_$not_privileged);
   end VALIDATE_ADMINISTRATIVE_ACCESS;

GET_SYSTEM_TABLES_PTRS:
   do;
      bj_pst_ptr = bjm_data_$bj_pst_ptr;
      bj_pn_table_ptr = ptr (bj_pst_ptr, bj_pst.pn_table_offset);
   end GET_SYSTEM_TABLES_PTRS;

ALLOCATE_STATUS_INFO_STORAGE:
   do;
      bj_status_n_journals = bj_pst.n_entries_used;
      allocate bj_status set (bj_status_ptr) in (caller_supplied_area);
   end ALLOCATE_STATUS_INFO_STORAGE;

/* NOTE: we don't lock the pst */
   journal_info_ix = 0;
COPY_PST:
   do pst_ix = 1 to bj_pst.highest_ix_used
        while (journal_info_ix <= bj_status.n_journals);

      bj_pste_ptr = addr (bj_pst.e (pst_ix));
      if (bj_pste.version = BJ_PSTE_VERSION_2) & bj_pste.active then do;
         bj_ix = bj_pste.bj_ix;
         journal_info_ix = journal_info_ix + 1;
         bj_status.journal (journal_info_ix).dir = bj_pn_table (bj_ix).dir;
         bj_status.journal (journal_info_ix).entry = bj_pn_table (bj_ix).entry;
         unspec (bj_status.journal (journal_info_ix).system_info) =
	    unspec (bj_pste);
      end;

   end COPY_PST;

/* Adjust the n_journals count in the return structure. */
   bj_status.n_journals = journal_info_ix;

   return;

   end RETURN_WHOLE_PST;
%page;
RETURN_MINE_FROM_PST:
   procedure ();

/* Return info about only those BJ's the process is currently using.	*/
/* As in RETURN_WHOLE_PST, we do not lock the bj_pst.		*/

GET_SYSTEM_TABLE_POINTERS:
   do;
      bj_ppt_ptr = bjm_data_$bj_ppt_ptr;
      bj_pst_ptr = bjm_data_$bj_pst_ptr;
      bj_pn_table_ptr = ptr (bj_pst_ptr, bj_pst.pn_table_offset);
   end GET_SYSTEM_TABLE_POINTERS;

ALLOCATE_STATUS_INFO_STORAGE:
   do;
      bj_status_n_journals = bj_ppt.n_entries_used;
      allocate bj_status set (bj_status_ptr) in (caller_supplied_area);
   end ALLOCATE_STATUS_INFO_STORAGE;

/* NOTE: we don't lock the pst */
   journal_info_ix = 0;
COPY_MY_ACTIVE_JOURNALS:
   do ppt_ix = 1 to bj_ppt.max_n_entries
        while (journal_info_ix <= bj_status.n_journals);

      if bj_ppt.e (ppt_ix).version = BJ_PPTE_VERSION_1 then do;
         bj_pste_ptr = bj_ppt.e (ppt_ix).bj_pste_ptr;

         if (bj_pste.version = BJ_PSTE_VERSION_2) & bj_pste.active then do;
	  bj_ix = bj_pste.bj_ix;
	  journal_info_ix = journal_info_ix + 1;
	  bj_status.journal (journal_info_ix).dir = bj_pn_table (bj_ix).dir;
	  bj_status.journal (journal_info_ix).entry =
	       bj_pn_table (bj_ix).entry;
	  unspec (bj_status.journal (journal_info_ix).system_info) =
	       unspec (bj_pste);
         end;
      end;
   end COPY_MY_ACTIVE_JOURNALS;

/* Adjust the n_journals count in the return structure */
   bj_status.n_journals = journal_info_ix;

   return;

   end RETURN_MINE_FROM_PST;
%page;
%include dm_bj_global_error_info;
%page;
%include dm_bj_status;
%page;
%include dm_bj_ppt;
%page;
%include dm_bj_pst;
%page;
%include dm_bj_pste;
%page;
%include dm_bj_pn_table;
%page;
%include access_mode_values;


   end bjm_get_journal_status;
