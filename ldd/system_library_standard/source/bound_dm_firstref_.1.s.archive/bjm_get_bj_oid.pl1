/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION:
     An entry to return the opening ID of a before journal.  If the journal
is not found in the PPT, then a code is returned to reflect this observation.

     BJ_DIR  and BJ_ENTRY are input parameters.  BJ_OID and CODE are
output parameters.
*/

/* HISTORY:
Written by Mike Pandolf, 08/19/82.
Modified:
10/15/82 by M. Pandolf:  to use file_manger_ for manipulating
	  data management files.
11/03/82 by M. Pandolf:  to handle codes returned by file_manager_$open
	  according to new spec.
11/11/82 by M. Pandolf:  to conform to standard entry and exit protocol.
11/02/83 by M. Pandolf:  to only allow entrynames ending in ".bj".
12/06/83 by L. A. Newcomb:  Renamed before_journal_manager_static_ to
            bjm_data_ and moved some cells from dm_data_ to bjm_data_.
11/15/84 by Maggie Sharpe:  to correct format and dcls; to use ERROR_RETURN
            technology; to set and rest validation level before and after
            calls to file_manager_.
11/20/84 by Maggie Sharpe:  to reset validation level in cleanup handler.
03/19/85 by Steve Herbst: Fixed to initialize bjm_data_$bj_code.
*/
%page;
/* format: style4,indattr,ifthenstmt,ifthen,^indcomtxt,idind33 */

bjm_get_bj_oid:
     procedure (p_bj_dir, p_bj_entry, p_bj_oid, p_code);

/* DECLARATIONS */

/* Parameter */

dcl  p_bj_dir		        char (*) parameter;	/* dir of potential before journal */
dcl  p_bj_entry		        char (*) parameter;	/* entryname of potential before journal */
dcl  p_bj_oid		        bit (36) aligned parameter; /* OID of before journal */
dcl  p_code		        fixed bin (35);	/* standard system status code */

/* Automatic */

dcl  bj_dir		        char (168);		/* local copy of bj dir */
dcl  bj_entry		        char (32);		/* local copy of bj entryname */
dcl  saved_level		        fixed bin;		/* saves caller's validation level */
dcl  current_ring		        fixed bin (3);
dcl  this_ppte		        fixed bin;		/* index into PPT entries */
dcl  pf_oid		        bit (36) aligned;	/* page file opening ID */
dcl  bj_uid		        bit (36) aligned;	/* before journal unique ID, used for comparisons */

/* Static, External */

dcl  dm_error_$bj_recursive_invoc     fixed bin (35) external static;
dcl  dm_error_$bj_journal_not_opened  fixed bin (35) external static;
dcl  dm_error_$bj_invalid_name        fixed bin (35) external static;
dcl  bjm_data_$bj_ppt_ptr	        pointer external static;

/* Constant */

dcl  ME			        char (16) internal static options (constant)
			        init ("bjm_get_bj_oid");

/* Entry */

dcl  bj_ci_zero$get_bj_uid	        entry (bit (36) aligned) returns (bit (36));
dcl  bj_oid_util$get_oid	        entry (ptr) returns (bit (36) aligned);
dcl  bj_cleanup_tables$handler        entry (fixed bin (35));
dcl  cu_$level_get		        entry (fixed bin);
dcl  cu_$level_set		        entry (fixed bin);
dcl  file_manager_$open	        entry (char (*), char (*), bit (36) aligned, fixed bin (35));
dcl  file_manager_$close	        entry (bit (36) aligned, fixed bin (35));
dcl  get_ring_		        entry () returns (fixed bin (3));

/* Builtin */

dcl  addr			        builtin;

/* Condition */

dcl  cleanup		        condition;

%page;
/* initialize parameters */

	bj_dir = p_bj_dir;				/* truncation to char (168) */
	bj_entry = p_bj_entry;			/* truncation to char (32) */
	p_bj_oid = (36)"0"b;
	p_code = 0;

/* validate entry name */

	if ^is_valid_bj_name (bj_entry)
	then do;
	     p_code = dm_error_$bj_invalid_name;
	     goto MAIN_RETURN;
	end;


/* set up addresses for unexpected error */

	call cu_$level_get (saved_level);
	current_ring = get_ring_ ();

	on cleanup call CLEANUP;

	if bjm_data_$bj_operation = ""
	then bjm_data_$bj_operation = ME;
	else do;
	     p_code = dm_error_$bj_recursive_invoc;
	     goto MAIN_RETURN;
	end;

	bjm_data_$bj_exit_err = nonlocal_exit_err;
	bjm_data_$bj_code = 0;

/* get pointer to PPT */

	bj_ppt_ptr = bjm_data_$bj_ppt_ptr;

/* get the page file unique ID to use for comparisons later */

	call cu_$level_set ((current_ring));
	call file_manager_$open (bj_dir, bj_entry, pf_oid, p_code);
	if pf_oid = (36)"0"b
	then goto ERROR_RETURN;
	call cu_$level_set (saved_level);


	bj_uid = bj_ci_zero$get_bj_uid (pf_oid);

	call cu_$level_set ((current_ring));
	call file_manager_$close (pf_oid, p_code);
	if p_code ^= 0
	then goto ERROR_RETURN;
	call cu_$level_set (saved_level);

/* walk down the PPT looking for the UID we just found */

walk_ppt:
	do this_ppte = 1 to dm_system_data_$bj_max_n_journals;

	     bj_ppte_ptr = addr (bj_ppt.e (this_ppte));
	     if bj_ppte.version = BJ_PPTE_VERSION_1
	     then do;				/* an open journal */
		if bj_ppte.bj_uid = bj_uid
		then do;
		     p_bj_oid = bj_oid_util$get_oid (bj_ppte_ptr);
		     goto JOURNAL_OPENED;
		end;
	     end;

	end walk_ppt;

/* did not find the before journal in our list, so the call is not successful */

	p_code = dm_error_$bj_journal_not_opened;
	goto ERROR_RETURN;

JOURNAL_OPENED:
	bjm_data_$bj_operation = "";

	bjm_data_$bj_exit_err =
	     bjm_data_$bj_default_error_label;

MAIN_RETURN:
	return;

nonlocal_exit_err:
	p_code = bjm_data_$bj_code;

ERROR_RETURN:
	call CLEANUP;
	goto MAIN_RETURN;

%page;

/* INTERNAL PROCEDURES */

is_valid_bj_name:
     proc (bj_name)
	reducible
	returns (bit (1) aligned);

dcl  bj_name		        char (*) parameter;
dcl  (length, substr, reverse, rtrim) builtin;

	return (
	     (length (rtrim (bj_name)) < 33) &
	     (substr (reverse (rtrim (bj_name)), 1, 3) = "jb."));

     end is_valid_bj_name;

%page;

CLEANUP:
     procedure ();

dcl  cleanup_code		        fixed bin (35);

	call bj_cleanup_tables$handler (cleanup_code);

	bjm_data_$bj_operation = "";
	bjm_data_$bj_exit_err = bjm_data_$bj_default_error_label;
	call cu_$level_set (saved_level);

	return;

     end CLEANUP;


/* Include Files */

%page;	%include dm_bj_static;
%page;	%include dm_bj_ppt;
%page;	%include dm_bj_global_error_info;



     end bjm_get_bj_oid;
