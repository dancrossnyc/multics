/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION:

     This procedure puts the last ci encached in the buffer into
     the journal by calling the file manager.

     Its callers are: - bj_storage_append (main caller)
	            - bj_storage_get (to resolve instablity)
     		  - bj_flush (if the buffer has to go to disk).

     Its code is repeatable. It can be executed any number of times
     without any effect as long as the "point of non-return" has not been
     reached, that is, as long as the instruction that changes the value
     of bj_pste.last_ci_buffered has not been executed.

     If the process is interrupted after the point of non-return,
     bj_pste.last_ci_put = bj_pste.last_ci_buffered, which indicates
     that the buffer has been put in the file and should 
     not be put again; instead, the buffer has to be advanced to the
     next free ci if anything has to be appended to the journal. It
     is only in the bj_storage_append procedure that this need exists.
     Whenever append needs to advance the buffer it calls its internal
     procedure BUFFER_NEXT_CI, whose code is also repeatable up to
     a point of non-return.
*/



/* HISTORY:
Written by Andre Bensoussan,  08/20/1982.
Modified:
10/15/82 by M. Pandolf:  to use file_manager_ for manipulation of data
	  management system files.
11/02/84 by Maggie Sharpe:  to use call ERROR_RETURN (code) convention; set
            validation level to inner-ring before calling file_manager and
            reset to user level after returning; setup a cleanup handler to
            ensure resetting of the validation level; correct minor format
            problem; rename p_pf_oid to p_file_oid as requested by auditor.
*/

/* format: style4,^inddcls,indattr,idind35,^indcomtxt */

bj_storage_put_buffered_ci:
     proc (p_file_oid, p_bj_pste_ptr);


/* Parameters */

dcl  p_file_oid			bit (36) aligned;
dcl  p_bj_pste_ptr			ptr;


/* Automatic */

dcl  ci_no			fixed bin (24) uns;
dcl  code				fixed bin (35);
dcl  my_ci_parts			(5) fixed bin (71);
dcl  saved_level			fixed bin;


/* Builtin */

dcl  (addr, ptr, size)		builtin;


/* Condition */

dcl  cleanup			condition;

/* Constant */

dcl  ME				char (26) internal static options (constant)
				init ("bj_storage_put_buffered_ci");

/* Entries */

dcl  file_manager_$put_journal	entry (bit (36) aligned, fixed bin (27), ptr, fixed bin (35));
dcl  get_ring_			entry() returns (fixed bin(3));
dcl  cu_$level_set			entry (fixed bin);
dcl  cu_$level_get			entry (fixed bin);
dcl  bj_report_err			entry (fixed bin (35), char (*));

/* External */

dcl  dm_error_$bj_bad_ci_no		fixed bin (35) ext;

%page;
/* Code */


	call cu_$level_get (saved_level);

/*  Don't leave without resetting validation level */

	on cleanup begin;
	     call cu_$level_set (saved_level);
	end;


	bj_pste_ptr = p_bj_pste_ptr;

	bj_ci_ptr = ptr (bj_pste_ptr, bj_pste.buffer_offset);

	ci_no = bj_pste.last_ci_buffered;

	if ci_no = 0
	     | ci_no < bj_pste.cl.lowest_ci
	     | ci_no > bj_pste.cl.highest_ci
	     | ci_no ^= bj_ci.header1.id.num then
	     call ERROR_RETURN (dm_error_$bj_bad_ci_no);


	ci_parts_ptr = addr (my_ci_parts);

	ci_parts.number_of_parts = 1;

	ci_parts.part (1).offset_in_bytes = 0;		/* Relative to header2 */

	ci_parts.part (1).length_in_bytes = bj_pste.ci_size - (size (ci_header) + size (ci_trailer)) * 4;

	ci_parts.part (1).local_ptr = addr (bj_ci.header2);


	call cu_$level_set (get_ring_ ());
	call file_manager_$put_journal (p_file_oid, (bj_pste.last_ci_buffered), ci_parts_ptr, code);
	call cu_$level_set (saved_level);
	if code ^= 0 then call ERROR_RETURN (code);

	bj_pste.stamp_for_last_ci_put = bj_ci.header1.stamp.time_modified; /* Used by flush */
						/* WATCH! It may have to be done AFTER
								   the point of non return to be safe */


	bj_pste.last_ci_put = bj_pste.last_ci_buffered;	/* Point of non-return */

MAIN_RETURN:
	return;


ERROR_RETURN:
	proc (error_code);

dcl  error_code			fixed bin (35);

	call bj_report_err (error_code, ME);		/* does not return */
	goto MAIN_RETURN;				/* but better safe than sorry */
	end ERROR_RETURN;


%page;	%include dm_bj_pste;
%page;	%include dm_bj_ci;
%page;	%include dm_ci_header;
%page;	%include dm_ci_parts;

     end bj_storage_put_buffered_ci;

