/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* format: style4,indattr,ifthenstmt,ifthen,^indcomtxt,idind33 */

bj_ppt_search:
     proc (bj_uid) returns (ptr);

/* HISTORY:
Written by Mike Pandolf, 08/03/82.
Modified:
12/06/83 by L. A. Newcomb:  Renamed before_journal_manager_static_ to
            bjm_data_ and moved some cells from dm_data_ to bjm_data_.
06/07/84 by Lee Baldwin:  Renamed dm_error_$bj_(ppt ppte)_version_bad
            to $bj_bad_(ppt ppte)_version.
*/
%page;
dcl  bj_uid		        bit (36) aligned;


dcl  found		        bit (1);
dcl  i			        fixed bin;
dcl  code			        fixed bin (35);

dcl  ME			        char (13) internal static options (constant)
			        init ("bj_ppt_search");


dcl  bjm_data_$bj_ppt_ptr	        pointer external;
dcl  bj_report_err		        entry options (variable);


dcl  dm_error_$bj_bad_ppt_version     ext;
dcl  dm_error_$bj_bad_ppte_version    ext;



	bj_ppt_ptr = bjm_data_$bj_ppt_ptr;

	if bj_ppt.version ^= BJ_PPT_VERSION_1 then
	     do;
	     code = dm_error_$bj_bad_ppt_version;
	     goto exit_err;
	end;

	found = "0"b;

	do i = 1 to bj_ppt.highest_ix_used while (^found);
	     bj_ppte_ptr = addr (bj_ppt.e (i));
	     if bj_ppte.version ^= 0 then
		do;
		if bj_ppte.version ^= BJ_PPTE_VERSION_1 then
		     do;
		     code = dm_error_$bj_bad_ppte_version;
		     goto exit_err;
		end;
		if bj_ppte.bj_uid = bj_uid then found = "1"b;
	     end;
	end;

	if ^found then bj_ppte_ptr = null ();

	return (bj_ppte_ptr);


exit_err: call bj_report_err (code, ME);


%include dm_bj_static;


%include dm_bj_ppt;


     end bj_ppt_search;
