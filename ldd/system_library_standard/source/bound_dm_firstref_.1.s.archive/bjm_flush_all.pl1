/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION:

     This procedure is supposed to be invoked by the Data Management Daemon.
Its job is to flush all before journals described by a bj_pste, up to the
last record written in the journal. Its execution is requested when, for
some unknown reason, the number of data management pages held in main
memory becomes higher that the allowed threashold. This procedure has to
be executed by the Daemon because the Daemon has access to all journals.

     The loop to all bj_pste's is written in such a way that, if there is a
problem trying to flush a journal, instead of giving up, the program
will go to the next journal.
*/

/* HISTORY:
Written by A. Bensoussan, 06/07/83.
Modified:
12/06/83 by L. A. Newcomb:  Renamed before_journal_manager_static_ to
            bjm_data_ and moved some cells from dm_data_ to bjm_data_.
10/23/84 by M. Sharpe:  to correct format and check version of pst
	  before its first use; to use "call ERROR_RETURN (code)"
	  convention.
02/13/85 by Lee A. Newcomb:  Fixed to use new constant BJ_PSTE_VERSION_2
	  and to have cleanup handler not work if the values it resets
	  have not been set; also minor format and dcl changes.
03/19/85 by Steve Herbst: Fixed to initialize bjm_data_$bj_code.
*/

/* format: style2,ll79,ind3,^indprocbody,ifthendo,ifthen,^indnoniterdo,^inddcls,dclind5,idind35,linecom */
%page;
bjm_flush_all:
   proc ();

/* DECLARATIONS */

/* Parameter */
/* Automatic */
dcl  (
     bj_oid			bit (36) aligned,
     bj_uid			bit (36) aligned,
     bjm_clean_up_needed		bit (1) aligned init (""b),
     code				fixed bin (35),
     journal_idx			fixed bin,
     last_rec_id			bit (36) aligned,
     max_n_journals			fixed bin
     )				automatic;

/* Based */
/* Builtin */
dcl  addr				builtin;

/* Condition */
dcl  cleanup			condition;

/* Constant */
dcl  (
     CHECK_FOR_BJM_RECURSION		bit (1) aligned init ("1"b),
     DONT_CHECK_FOR_BJM_RECURSION	bit (1) aligned init ("0"b),
     ME				char (13) init ("bjm_flush_all")
     )				internal static options (constant);

/* Entry */
dcl  (
     bj_cleanup_tables$handler	entry (fixed bin (35)),
     bj_close_oid			entry (bit (36) aligned),
     bj_oid_util$get_ptr		entry (bit (36) aligned) returns (ptr),
     bj_open_by_uid			entry (bit (36) aligned,
				bit (36) aligned),
     bj_storage_flush$up_to_rec_id	entry (ptr, bit (36) aligned)
     )				external;

/* External */
dcl  (
     bjm_data_$bj_pst_ptr		ptr,
     dm_error_$bj_bad_pst_version	fixed bin (35),
     dm_error_$bj_recursive_invoc	fixed bin (35),
     dm_system_data_$bj_max_n_journals	fixed bin
     )				external static;

/* Static */

/* END OF DECLARATIONS */
%page;
   code = 0;

SETUP_FOR_NON_STANDARD_EXIT:
   do;
      on cleanup call CLEANUP ();

      call SET_BJM_DATA_ERROR_HANDLING_VALUES (NONLOCAL_ERROR_EXIT, ME,
	 CHECK_FOR_BJM_RECURSION);

   end SETUP_FOR_NON_STANDARD_EXIT;

   bj_pst_ptr = bjm_data_$bj_pst_ptr;
   call CHECK_VERSION_NUMERIC (bj_pst.version, BJ_PST_VERSION_1,
        dm_error_$bj_bad_pst_version);

   max_n_journals = dm_system_data_$bj_max_n_journals;	/* don't let one error stop us */
   bjm_data_$bj_exit_err = NEXT_AFTER_ERR;

FLUSH_LOOP:
   do journal_idx = 1 to max_n_journals;

      bj_pste_ptr = addr (bj_pst.e (journal_idx));
      if bj_pste.version = BJ_PSTE_VERSION_2 then
BJ_TO_FLUSH:
         do;
         bj_oid = "0"b;
         bj_uid = bj_pste.bj_uid;

         call bj_open_by_uid (bj_uid, bj_oid);

         if bj_oid ^= "0"b then do;
	  bj_ppte_ptr = bj_oid_util$get_ptr (bj_oid);
	  last_rec_id = bj_pste.last_rec_id;
	  call bj_storage_flush$up_to_rec_id (bj_ppte_ptr, last_rec_id);
	  call bj_close_oid (bj_oid);
         end;

      end BJ_TO_FLUSH;

      goto NEXT;

NEXT_AFTER_ERR:					/* if we fail on a BJ, continue on */
      call bj_cleanup_tables$handler (0);

NEXT:
   end FLUSH_LOOP;

   call FINISH ();

MAIN_RETURN:
   return;

/* end bjm_flush_all; */
%page;
NONLOCAL_ERROR_EXIT:
   call ERROR_RETURN (bjm_data_$bj_code);
%skip (4);
FINISH:
   proc ();

   call SET_BJM_DATA_ERROR_HANDLING_VALUES (bjm_data_$bj_default_error_label,
        "", DONT_CHECK_FOR_BJM_RECURSION);

   return;

   end FINISH;
%skip (4);
ERROR_RETURN:
   proc (er_p_code);				/* we currently ignore the parameter */

dcl  er_p_code			fixed bin (35) parameter;

   call CLEANUP ();

   goto MAIN_RETURN;

   end ERROR_RETURN;
%skip (4);
CLEANUP:
   proc ();

   if bjm_clean_up_needed then
      call bj_cleanup_tables$handler (0);

   call FINISH ();

   return;

   end CLEANUP;
%page;
SET_BJM_DATA_ERROR_HANDLING_VALUES:
   proc (sbdehv_p_error_exit, sbdehv_p_operation,
        sbdehv_p_check_for_recursive_invocation);

/* This internal procedure centralizes the setting of the BJM global	*/
/* error values in bjm_data_.  It is called near the beginning of	*/
/* this module, and in the FINISH internal procedure.  ONLY THE FIRST	*/
/* OF THESE CALLS SHOULD ASK FOR DETECTION OF A RECURSIVE INVOCATION	*/
/* OF THE BEFORE JOURNAL MANAGER, if the other calls did, we could	*/
/* end up getting a recursive call ERROR_RETURN, CLEANUP, FINISH,	*/
/* this proc, etc.						*/

dcl  (
     sbdehv_p_error_exit		label variable,
     sbdehv_p_operation		char (*),
     sbdehv_p_check_for_recursive_invocation
				bit (1) aligned
     )				parameter;

   if sbdehv_p_check_for_recursive_invocation then
      if bjm_data_$bj_operation ^= "" then
         call ERROR_RETURN (dm_error_$bj_recursive_invoc);

   bjm_clean_up_needed = "1"b;
   bjm_data_$bj_exit_err = sbdehv_p_error_exit;
   bjm_data_$bj_operation = sbdehv_p_operation;
   bjm_data_$bj_code = 0;

   return;

   end SET_BJM_DATA_ERROR_HANDLING_VALUES;
%skip (4);
CHECK_VERSION_NUMERIC:
   proc (cvn_p_given_version, cvn_p_correct_version, cvn_p_error_to_use);

dcl  (
     cvn_p_given_version		fixed bin,
     cvn_p_correct_version		fixed bin,
     cvn_p_error_to_use		fixed bin (35)
     )				parameter;

   if cvn_p_given_version ^= cvn_p_correct_version then
      call ERROR_RETURN (cvn_p_error_to_use);

   end CHECK_VERSION_NUMERIC;
%page;
%include dm_bj_pst;
%page;
%include dm_bj_pste;
%page;
%include dm_bj_ppt;
%page;
%include dm_bj_global_error_info;


   end bjm_flush_all;
