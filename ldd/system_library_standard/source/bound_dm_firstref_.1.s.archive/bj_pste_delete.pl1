/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION:

	bj_pste_delete handles all removal of a before journal from the
     BJ_PST.  This is only done when no user on the system is using the
     journal to be removed.  It is assumed the BJ_PST is locked to this
     process.
*/

/* HISTORY:
Written by A. Bensoussan, 03/23/83.
Modified:
04/06/83 by A. Bensoussan:  added the entry point $after_recovery.
12/06/83 by L. A. Newcomb:  Renamed before_journal_manager_static_ to
            bjm_data_ and moved some cells from dm_data_ to bjm_data_.
12/05/84 by M. Sharpe:  to correct format and dcls; to use ERROR_RETURN;
	  to set/reset validation level around calls to file_manager_.
02/14/85 by Lee A. Newcomb:  Added a description to that section; changed
            ERROR_RETURN to be an int proc and added CHECK_VERSION_NUMERIC
            proc; deleted the unused $adjust entry as there was no difference
            with the main entry; FIXED to check several structure versions not
            previously tested; minor format fixes.
02/28/85 by Lee A. Newcomb:  Initialized myname to an indicator of invalidity.
            Fixed to set dm_error_$bj_bad_pste_idx, not *_index.
03/05/85 by Steve Herbst: Replaced dm_log_ with dm_misc_util_$log.
04/05/85 by Lee A. Newcomb:  Fixed to not call dm_pste_register$check_out_dead
            during recovery.
05/10/85 by R. Michael Tague:  Changed bj_uid check by reference to 
            dm_journal_seg to a call to dm_hcs_$validate_bj_uid instead.
*/

/* format: style2,ll79,ind3,^indprocbody,ifthendo,ifthen,^indnoniterdo,^inddcls,dclind5,idind35,linecom */
%page;
bj_pste_delete:
   proc (p_bj_pste_ptr);

/* DECLARATIONS */

/* Parameter */
dcl  p_bj_pste_ptr			ptr parameter;

/* Automatic */
dcl  (
     dir_name			char (168),
     entry_name			char (32),
     file_not_found			bit (1) init ("1"b),
     bj_ix			fixed bin init (0),
     bj_uid			bit (36) aligned init (""b),
     code				fixed bin (35) init (0),
     my_access_class		bit (72) aligned init (""b),
     myname			char (32)
				init (BJ_PSTE_DELETE_MYNAME_NOT_SET),
     pf_oid			bit (36) aligned init (""b),
     close_after_recovery		bit (1) init (""b),
     n_processes			fixed bin init (-1),
     n_txns			fixed bin init (-1),
     saved_level			fixed bin init (-1),
     current_ring			fixed bin (3) init (-1),
     1 my_header			like bj_header
     )				automatic;

/* Based */
/* Builtin */
dcl  (addr, hbound, lbound, ptr, size, unspec)
				builtin;

/* Condtion */
dcl  cleanup			condition;

/* Constant */
dcl  (
     BJ_PSTE_DELETE			char (32) init ("bj_pste_delete"),
     BJ_PSTE_DELETE_AFTER_RECOVERY	char (32)
				init ("bj_pste_delete$after_recovery"),
     BJ_PSTE_DELETE_MYNAME_NOT_SET	char (32)
				init ("bj_pste_delete myname not set")
     )				internal static options (constant);

/* Entry */
dcl  (
     bj_ci_zero$get_bj_uid		entry (bit (36) aligned)
				returns (bit (36) aligned),
     bj_ci_zero$put_header		entry (bit (36) aligned, ptr,
				fixed bin),
     bj_flush_pnt			entry (),
     bj_pste_register$check_out_dead	entry (ptr, bit (36) aligned),
     cu_$level_get			entry (fixed bin),
     cu_$level_set			entry (fixed bin),
     dm_hcs_$free_journal		entry (fixed bin, fixed bin (35)),
     dm_hcs_$validate_bj_uid		entry (bit (36) aligned, fixed bin)
				returns (bit (1) aligned),
     dm_misc_util_$log		entry options (variable),
     file_manager_$close		entry (bit (36) aligned,
				fixed bin (35)),
     file_manager_$flush_consecutive_ci entry (bit (36) aligned,
				fixed bin (24) uns, fixed bin (24) uns,
				fixed bin (35)),
     file_manager_$open		entry (char (*), char (*),
				bit (36) aligned, fixed bin (35)),
     get_authorization_		entry returns (bit (72) aligned),
     get_ring_			entry () returns (fixed bin (3))
     )				external;

/* External */
dcl  (
     bjm_data_$bj_pst_ptr		ptr,
     dm_data_$bj_txt_ptr		ptr,
     (
     dm_error_$bj_bad_pst_version,
     dm_error_$bj_bad_pste_idx,
     dm_error_$bj_bad_pste_ptr,
     dm_error_$bj_bad_pste_version,
     dm_error_$bj_bad_txt_version,
     dm_error_$bj_logic_err,
     dm_error_$bj_uids_dont_agree
     )				fixed bin (35)
     )				external static;

/* Static */

/* END OF DECLARATIONS */
%page;
/* bj_pste_delete:			repeat for reader	*/
/*      proc (p_bj_pste_ptr);				*/

   myname = BJ_PSTE_DELETE;
   close_after_recovery = "0"b;
   goto COMMON;


bj_pste_delete$after_recovery:
   entry (p_bj_pste_ptr);

   myname = BJ_PSTE_DELETE_AFTER_RECOVERY;
   close_after_recovery = "1"b;
   goto COMMON;


COMMON:
   bj_pste_ptr = p_bj_pste_ptr;
   call CHECK_VERSION_NUMERIC (bj_pste.version, BJ_PSTE_VERSION_2,
        dm_error_$bj_bad_pste_version);
   bj_pst_ptr = bjm_data_$bj_pst_ptr;
   call CHECK_VERSION_NUMERIC (bj_pst.version, BJ_PST_VERSION_1,
        dm_error_$bj_bad_pst_version);
   bj_txt_ptr = dm_data_$bj_txt_ptr;
   call CHECK_VERSION_NUMERIC (bj_txt.version, BJ_TXT_VERSION_1,
        dm_error_$bj_bad_txt_version);
   bj_pn_table_ptr = ptr (bj_pst_ptr, bj_pst.pn_table_offset);
						/* no version */

   bj_ix = bj_pste.bj_ix;
   my_access_class = get_authorization_ ();

   current_ring = get_ring_ ();
   call cu_$level_get (saved_level);
   on cleanup call cu_$level_set (saved_level);


   if bj_ix < 1 | bj_ix > bj_pst.max_n_entries then
      call ERROR_RETURN (dm_error_$bj_bad_pste_idx);

   if bj_pste_ptr ^= addr (bj_pst.e (bj_ix)) then
      call ERROR_RETURN (dm_error_$bj_bad_pste_ptr);

   if ^dm_hcs_$validate_bj_uid (bj_pste.bj_uid, bj_ix) then
      call ERROR_RETURN (dm_error_$bj_uids_dont_agree);

%page;
   if ^close_after_recovery then			/* normal operation */
      call bj_pste_register$check_out_dead (bj_pste_ptr, (36)"0"b);

   n_processes = bj_pste.n_processes;
   n_txns = N_TXNS ();

   pf_oid = OPEN_FILE (file_not_found);

   if pf_oid = "0"b & file_not_found & n_processes = 0 & n_txns = 0 then do;
      call FREE_PSTE ();
      call FREE_HCSE ();
      call dm_misc_util_$log (LOG_SV, 0, myname,
	 "Journal ^a>^a was not found.", dir_name, entry_name);
   end;

   if pf_oid = "0"b & file_not_found = "0"b then
      call dm_misc_util_$log (LOG_SV, 0, myname,
	 "Journal ^a>^a could not be opened by fm.", dir_name, entry_name);

   if pf_oid ^= "0"b & n_processes = 0 & n_txns = 0 then do;
      call UPDATE_HEADER ("0"b);
      call FREE_PSTE ();
      call FREE_HCSE ();
   end;

   if pf_oid ^= "0"b & n_processes = 0 & n_txns > 0 & close_after_recovery
   then do;
      call UPDATE_HEADER ("1"b);
      call FREE_PSTE ();
      call FREE_HCSE ();
   end;

   if pf_oid ^= "0"b then do;
      call cu_$level_set ((current_ring));
      call file_manager_$close (pf_oid, code);
      call cu_$level_set (saved_level);
      if code ^= 0 then
         call dm_misc_util_$log (LOG_SV, code, myname,
	    " code returned by fm_$close");
   end;

/* end bj_pste_delete; */
%page;
MAIN_RETURN:
   return;
%skip (4);
ERROR_RETURN:
   proc (er_p_code);

dcl  er_p_code			fixed bin (35) parameter;

   call dm_misc_util_$log (LOG_SV, er_p_code, myname);

   goto MAIN_RETURN;

   end ERROR_RETURN;
%skip (4);
CHECK_VERSION_NUMERIC:
   proc (cvn_p_given_version, cvn_p_correct_version, cvn_p_error_to_use);

/* The error code to use is passed since we use this to check several	*/
/* structures with numeric versions.  It is hoped newer versions of	*/
/* these structures will be changed to use char (8) versions.	*/

dcl  (
     cvn_p_given_version		fixed bin,
     cvn_p_correct_version		fixed bin,
     cvn_p_error_to_use		fixed bin (35)
     )				parameter;

   if cvn_p_given_version ^= cvn_p_correct_version then
      call ERROR_RETURN (cvn_p_error_to_use);

   end CHECK_VERSION_NUMERIC;
%page;
UPDATE_HEADER:
   proc (active_sw);

dcl  active_sw			bit (1);
dcl  code				fixed bin (35);

   my_header = bj_pste;
   my_header.active = active_sw;

   call bj_ci_zero$put_header (pf_oid, addr (my_header), size (my_header));
   call cu_$level_set ((current_ring));
   call file_manager_$flush_consecutive_ci (pf_oid, 0, 1, code);
   call cu_$level_set (saved_level);
   if code ^= 0 then
      call dm_misc_util_$log (LOG_SV, code, myname, "UPDATE_HEADER");

   return;
   end UPDATE_HEADER;



FREE_PSTE:
   proc ();

dcl  highest_idx			fixed bin;

   bj_pste.version = 0;

   bj_pst.n_entries_used = bj_pst.n_entries_used - 1;

   if bj_pst.highest_ix_used = bj_ix then
      do highest_idx = bj_ix by -1 to 1
	 while (bj_pst.e (highest_idx).version = 0);
         bj_pst.highest_ix_used = highest_idx - 1;
      end;


   bj_pn_table (bj_ix).bj_uid = "0"b;
   bj_pn_table (bj_ix).entry = "";
   bj_pn_table (bj_ix).dir = "";

   unspec (bj_pste) = "0"b;
   bj_pste.bj_ix = bj_ix;
   bj_pste.append_state.current_operation = "";

   call bj_flush_pnt ();

   return;
   end FREE_PSTE;





FREE_HCSE:
   proc ();

dcl  code				fixed bin (35);

   call dm_hcs_$free_journal ((bj_ix), code);		/* bj_ix passed by value because bug in dm_hcs_ */
   if code ^= 0 then
      call dm_misc_util_$log (LOG_SV, code, myname, "FREE_HCSE");

   return;
   end FREE_HCSE;
%page;
OPEN_FILE:
   proc (deleted_sw) returns (bit (36) aligned);

dcl  deleted_sw			bit (1);

dcl  file_oid			bit (36) aligned;
dcl  ec				fixed bin (35);

dcl  error_table_$noentry		fixed bin (35) ext;
dcl  error_table_$no_dir		fixed bin (35) ext;



   deleted_sw = "0"b;
   ec = 0;

   dir_name = bj_pn_table (bj_ix).dir;
   entry_name = bj_pn_table (bj_ix).entry;
   bj_uid = bj_pn_table (bj_ix).bj_uid;


   call cu_$level_set ((current_ring));
   call file_manager_$open (dir_name, entry_name, file_oid, ec);
   call cu_$level_set (saved_level);

   if file_oid = "0"b then
      if ec = error_table_$noentry | ec = error_table_$no_dir
						/* no_dir and noaccess have same value */
	 then
         deleted_sw = "1"b;
      else ;

   else if bj_uid ^= bj_ci_zero$get_bj_uid (file_oid) then do;
      call cu_$level_set ((current_ring));
      call file_manager_$close (file_oid, ec);
      call cu_$level_set (saved_level);
      deleted_sw = "1"b;
      file_oid = (36)"0"b;
   end;

   else ;

   return (file_oid);

   end OPEN_FILE;
%page;
N_TXNS:
   proc returns (fixed bin);

dcl  bj_uid			bit (36) aligned;
dcl  n_trans			fixed bin;
dcl  entry_idx			fixed bin;



   bj_uid = bj_pste.bj_uid;
   n_trans = 0;


   do entry_idx = lbound (bj_txt.entry, 1) to hbound (bj_txt.entry, 1);

      bj_txte_ptr = addr (bj_txt.entry (entry_idx));

      if bj_txte.tid ^= "0"b then
         if bj_txte.bj_uid = bj_uid then
	  if bj_txte.last_completed_operation ^= COMMITTED then
	     if bj_txte.last_completed_operation ^= ABORTED then
	        n_trans = n_trans + 1;

   end;


   return (n_trans);


   end N_TXNS;


%page;
%include dm_bj_pst;

%page;
%include dm_bj_pste;

%page;
%include dm_bj_pn_table;

%page;
%include dm_bj_header;

%page;
%include dm_log_sv_codes;

%page;
%include dm_bj_txt;

%page;
%include dm_bj_records;


   end bj_pste_delete;
