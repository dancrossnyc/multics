/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION:

	This procedure is the interface into the close operation of before
     journal manager.  The actual steps in closing are embodied in the
     procedure bj_close_oid.  This was implemented so that other bjm
     primitives can call the close code without worry about a recursion error.

	This procedure locks the PST as per the requirement of bj_close_oid.
*/

/* HISTORY:
Written by Mike Pandolf, 07/06/82.
Modified:
08/24/82 by M. Pandolf:  to separate code fom wrapper.
11/11/82 by M. Pandolf:  to use standard entry and exit protocol.
11/21/82 by M. Pandolf:  to lock the PST before calling bj_close_oid.
04/06/83 by A. Bensoussan:  to add the entry point $after_recovery.
12/06/83 by L. A. Newcomb:  Renamed before_journal_manager_static_ to
            bjm_data_ and moved some cells from dm_data_ to bjm_data_.
10/22/84 by M. Sharpe:  to convert to use "call ERROR_RETURN (code)"
	  convention, to clean up format and variable names, to
	  reset bjm_data_$bj_exit_err to bjm_data_$default_error_label
03/19/85 by Steve Herbst: Fixed to initialize bjm_data_$bj_code.
*/

/* format: style4,indattr,ifthenstmt,ifthen,^indcomtxt,idind33 */

bjm_close:
     procedure (p_bj_oid, p_code);


/* DECLARATIONS */

/* Parameter */

dcl  p_bj_oid bit (36) aligned parameter;		/* OID of before journal to be closed */
dcl  p_code fixed bin (35) parameter;			/* standard system status code */


/* Automatic */

dcl close_after_recovery bit(1);


/* Condition */

dcl  cleanup condition;


/* Constant */

dcl  ME char (12) internal static options (constant) init ("bjm_close");



/* Entry */

dcl  bj_cleanup_tables$handler entry (fixed bin(35));
dcl  bj_close_oid entry (bit(36) aligned);
dcl  bj_close_oid$after_recovery entry (bit(36) aligned);
dcl  bj_pst_lock entry ();
dcl  bj_pst_lock$unlock entry ();

/* External Static */

dcl  dm_error_$bj_recursive_invoc fixed bin (35) external static;


/* Standard entry point */

	close_after_recovery = "0"b;
	goto COMMON;


after_recovery: entry (p_bj_oid, p_code);

	close_after_recovery = "1"b;
	goto COMMON;

COMMON:

/* initially set status code */

	p_code = 0;

/* set up before journal error recovery environment */

	if bjm_data_$bj_operation = ""
	then bjm_data_$bj_operation = ME;
	else do;
	     p_code = dm_error_$bj_recursive_invoc;
	     goto MAIN_RETURN;
	end;

	on cleanup call CLEANUP;

	bjm_data_$bj_exit_err = nonlocal_error_exit;
	bjm_data_$bj_code = 0;

/* call the support routine */

	call bj_pst_lock ();

	if close_after_recovery = "0"b
	   then call bj_close_oid (p_bj_oid);
	   else call bj_close_oid$after_recovery (p_bj_oid);

	call bj_pst_lock$unlock ();

/* simple return */

	bjm_data_$bj_operation = "";

	bjm_data_$bj_exit_err =
	     bjm_data_$bj_default_error_label;

MAIN_RETURN:
	return;

nonlocal_error_exit:
	call ERROR_RETURN (bjm_data_$bj_code);

%page;
/* INTERNAL PROCEDURES */

ERROR_RETURN:
	procedure (error_code);

dcl	error_code		fixed bin (35);

	call CLEANUP;
	p_code = error_code;
	goto MAIN_RETURN;

     end ERROR_RETURN;



CLEANUP:	procedure ();

dcl  cleanup_code fixed bin (35);

	call bj_cleanup_tables$handler (cleanup_code);

	bjm_data_$bj_operation = "";
	bjm_data_$bj_exit_err =
	     bjm_data_$bj_default_error_label;

	return;

end CLEANUP;

%page;
%include dm_bj_global_error_info;


end bjm_close;
