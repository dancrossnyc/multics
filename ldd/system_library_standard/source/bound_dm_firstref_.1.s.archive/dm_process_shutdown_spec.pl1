/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION:

         This    routine    takes    a    shutdown_spec,     pointed   to   by
     p_shutdown_spec_ptr, and processes it to  determine  a  complete  set  of
     shutdown  info,  returning  the info in the caller-supplied shutdown_info
     structure pointed to by p_shutdown_info_ptr.  Shutdown info consists of a
     reason for shutdown, which is copied directly from the shutdown_spec, and
     a set of times - one time for each of the five events which  comprise  DM
     shutdown.  The times are determined as follows:

     1)  Any  time in shutdown_spec.times which is not equal to 0 is copied to
     shutdown_info.times.  These times are referred to as "specified times".

     2) If no times are specified (i.e., all times in shutdown_spec.times  are
     equal to 0) then shutdown_info.times.user_bump_time is set to the current
     Multics scheduled down time.  If there is no Multics down time scheduled,
     set shutdown_info.output_flags.no_time_specified to "1"b and return.

     3)  Starting  with  the  begin_shutdown_time  and  proceeding through the
     daemon_logout_time, for each shutdown_info.times cell which  is  not  yet
     set (i.e., shutdown_info.times.<time> is equal to 0), attempt to set that
     time as follows:
        3.1) If the previous time in shutdown_info.times is equal to 0,
             we have no way of determining the this time, so skip to
             the next time.
        3.2) Otherwise, set the time based on the previous time using
             a delay.  If there is a delay for this event specified in
             shutdown_spec.delays, add that delay to the previous time;
             otherwise use the default delay for this event stored in
             dm_system_data_.

     4)    Stepping    backwards    from   the   user_shutdown_time   to   the
     user_warning_time, for each time in shutdown_info.times  which  is  still
     set  to  0,  determine the time subtracting a delay from the time for the
     next event.  It is guaranteed that when stepping  through  the  times  in
     this  way,  if  the time for an event is still set to 0, the time for the
     next event is not 0.  Determine the delay as follows:
        4.1) If the delay for the NEXT event is specified in
             shutdown_spec.delays, subtract it from the time in
             shutdown_info.times for the NEXT event to get the time
             for the current event.
        4.2) Otherwise, subtract the delay for the next event in
             dm_system_data_ from the time for the next event to get
             the time for the current event.
*/

/* HISTORY:

Written by Matthew C. Pierret, 09/11/84.
Modified:
09/27/84 by Lee A. Newcomb:  Added setting of reason to default value if times
            are calculated from the Multics down time.
*/

/* format: style2,ind3,^indprocbody,^indnoniterdo,indnoniterend */
/* format: ll79,comcol50,indblkcom */

dm_process_shutdown_spec:
   proc (p_shutdown_spec_ptr, p_shutdown_info_ptr);

/* START OF DECLARATIONS */
/* Parameter */

   dcl	 p_shutdown_spec_ptr    ptr;	         /*points to a shutdown_spec.*/
   dcl	 p_shutdown_info_ptr    ptr;	         /*points to a shutdown_info*/

/* Automatic */

   dcl	 1 my_shutdown_info	    aligned like shutdown_info;
   dcl	 user_bump_time_str	    char (24);
   dcl	 whoptr		    ptr init (null ());

/* Based */
/* Builtin */

   dcl	 (null, unspec)	    builtin;

/* Constant */

   dcl	 myname		    init ("dm_process_shutdown_spec")
			    char (32) varying internal static
			    options (constant);

/* Entry */

   dcl	 date_time_	    entry (fixed bin (71), char (*));
   dcl	 hcs_$initiate	    entry (char (*), char (*), char (*),
			    fixed bin (1), fixed bin (2), ptr,
			    fixed bin (35));
   dcl	 sub_err_		    entry () options (variable);
   dcl	 system_info_$next_shutdown
			    entry (fixed bin (71), char (*),
			    fixed bin (71));

/* External */

   dcl	 (
	 dm_system_data_$begin_shutdown_delay,
	 dm_system_data_$user_shutdown_delay,
	 dm_system_data_$user_bump_delay,
	 dm_system_data_$daemon_logout_delay
	 )		    ext fixed bin (71);
   dcl	 sys_info$system_control_dir
			    ext char (168) varying;
   dcl	 error_table_$unimplemented_version
			    fixed bin (35) ext;

/* END OF DECLARATIONS */

   shutdown_spec_ptr = p_shutdown_spec_ptr;
   call CHECK_VERSION (shutdown_spec.version, SHUTDOWN_SPEC_VERSION_1,
        "shutdown_spec");
   call CHECK_VERSION (p_shutdown_info_ptr -> shutdown_info.version,
        SHUTDOWN_INFO_VERSION_1, "shutdown_info");

   unspec (my_shutdown_info) = ""b;
   my_shutdown_info.version = SHUTDOWN_INFO_VERSION_1;
   my_shutdown_info.reason = shutdown_spec.reason;

   /*** Steps (1) and (2) of DESCRIPTION. ***/

   if unspec (shutdown_spec.times) ^= ""b
   then unspec (my_shutdown_info.times) = unspec (shutdown_spec.times);
   else
GET_DEFAULTS_FROM_MULTICS_DOWN_TIME:
      do;
      call system_info_$next_shutdown (my_shutdown_info.times.user_bump_time,
	 (""), (0));		         /* only want down time */
      if unspec (my_shutdown_info.reason) = ""b
      then
GET_DEFAULT_SHUTDOWN_REASON:
         do;
         call date_time_ (my_shutdown_info.times.user_bump_time,
	    user_bump_time_str);
         my_shutdown_info.reason =
	    "Multics is shutting down @ "
	    || substr (user_bump_time_str, 11, 6);
				         /* just use HHMM.M part */
         end GET_DEFAULT_SHUTDOWN_REASON;
      end GET_DEFAULTS_FROM_MULTICS_DOWN_TIME;

   if unspec (my_shutdown_info.times) = ""b
   then
CANT_CALCULATE_TIMES:
      my_shutdown_info.output_flags.no_time_specified = "1"b;
   else
CALCULATE_UNSPECIFIED_TIMES:
      do;
      my_shutdown_info.output_flags.no_time_specified = "0"b;
FIRST_PASS_FORWARD:
      do;

         /*** Step (3) of DESCRIPTION. ***/

         if my_shutdown_info.times.begin_shutdown_time = 0
	    & my_shutdown_info.times.user_warning_time ^= 0
         then if shutdown_spec.delays.begin_shutdown_delay = 0
	    then my_shutdown_info.times.begin_shutdown_time =
		    my_shutdown_info.times.user_warning_time
		    + dm_system_data_$begin_shutdown_delay;
	    else my_shutdown_info.times.begin_shutdown_time =
		    my_shutdown_info.times.user_warning_time
		    + shutdown_spec.delays.begin_shutdown_delay;

         if my_shutdown_info.times.user_shutdown_time = 0
	    & my_shutdown_info.times.begin_shutdown_time ^= 0
         then if shutdown_spec.delays.user_shutdown_delay = 0
	    then my_shutdown_info.times.user_shutdown_time =
		    my_shutdown_info.times.begin_shutdown_time
		    + dm_system_data_$user_shutdown_delay;
	    else my_shutdown_info.times.user_shutdown_time =
		    my_shutdown_info.times.begin_shutdown_time
		    + shutdown_spec.delays.user_shutdown_delay;

         if my_shutdown_info.times.user_bump_time = 0
	    & my_shutdown_info.times.user_shutdown_time ^= 0
         then if shutdown_spec.delays.user_bump_delay = 0
	    then my_shutdown_info.times.user_bump_time =
		    my_shutdown_info.times.user_shutdown_time
		    + dm_system_data_$user_bump_delay;
	    else my_shutdown_info.times.user_bump_time =
		    my_shutdown_info.times.user_shutdown_time
		    + shutdown_spec.delays.user_bump_delay;

         if my_shutdown_info.times.daemon_logout_time = 0
	    & my_shutdown_info.times.user_bump_time ^= 0
         then if shutdown_spec.delays.daemon_logout_delay = 0
	    then my_shutdown_info.times.daemon_logout_time =
		    my_shutdown_info.times.user_bump_time
		    + dm_system_data_$daemon_logout_delay;
	    else my_shutdown_info.times.daemon_logout_time =
		    my_shutdown_info.times.user_bump_time
		    + shutdown_spec.delays.daemon_logout_delay;

      end FIRST_PASS_FORWARD;
SECOND_PASS_BACKWARD:
      do;

         /*** Step (4) of DESCRIPTION. ***/

         if my_shutdown_info.times.user_bump_time = 0
         then if shutdown_spec.delays.daemon_logout_delay = 0
	    then my_shutdown_info.times.user_bump_time =
		    my_shutdown_info.times.daemon_logout_time
		    - dm_system_data_$daemon_logout_delay;
	    else my_shutdown_info.times.user_bump_time =
		    my_shutdown_info.times.daemon_logout_time
		    - shutdown_spec.delays.daemon_logout_delay;

         if my_shutdown_info.times.user_shutdown_time = 0
         then if shutdown_spec.delays.user_bump_delay = 0
	    then my_shutdown_info.times.user_shutdown_time =
		    my_shutdown_info.times.user_bump_time
		    - dm_system_data_$user_bump_delay;
	    else my_shutdown_info.times.user_shutdown_time =
		    my_shutdown_info.times.user_bump_time
		    - shutdown_spec.delays.user_bump_delay;

         if my_shutdown_info.times.begin_shutdown_time = 0
         then if shutdown_spec.delays.user_shutdown_delay = 0
	    then my_shutdown_info.times.begin_shutdown_time =
		    my_shutdown_info.times.user_shutdown_time
		    - dm_system_data_$user_shutdown_delay;
	    else my_shutdown_info.times.begin_shutdown_time =
		    my_shutdown_info.times.user_shutdown_time
		    - shutdown_spec.delays.user_shutdown_delay;

         if my_shutdown_info.times.user_warning_time = 0
         then if shutdown_spec.delays.begin_shutdown_delay = 0
	    then my_shutdown_info.times.user_warning_time =
		    my_shutdown_info.times.begin_shutdown_time
		    - dm_system_data_$begin_shutdown_delay;
	    else my_shutdown_info.times.user_warning_time =
		    my_shutdown_info.times.begin_shutdown_time
		    - shutdown_spec.delays.begin_shutdown_delay;

      end SECOND_PASS_BACKWARD;

      end CALCULATE_UNSPECIFIED_TIMES;

   p_shutdown_info_ptr -> shutdown_info = my_shutdown_info;

   return;





CHECK_VERSION:
   proc (cv_p_received_version, cv_p_expected_version, cv_p_structure_name);
   dcl	 cv_p_received_version  char (8) aligned;
   dcl	 cv_p_expected_version  char (8) aligned;
   dcl	 cv_p_structure_name    char (*);

   if cv_p_received_version ^= cv_p_expected_version
   then call sub_err_ (error_table_$unimplemented_version, myname,
	   ACTION_CANT_RESTART, null, 0,
	   "^/Expected version ^a of the ^a structure.
Received version ^d instead.", cv_p_expected_version, cv_p_structure_name,
	   cv_p_received_version);

   end CHECK_VERSION;
%page;
%include dm_shutdown_spec;
%page;
%include sub_err_flags;

   end dm_process_shutdown_spec;
