/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* format: style4,indattr,ifthenstmt,ifthen,^indcomtxt,idind33 */

bjm_open:
     proc (p_dir, p_entry, p_bj_oid, p_code);

/*  DESCRIPTION:

     This opens a BJ in a user's process.  There are five major steps in
opening a BJ to a process:

- calling file_manager_ to actually open the BJ,

- creating a bj_pst entry for the BJ if one does not exist,

- registering the user as a user of the BJ in the bj_check_in_table,

- creating a bj_ppt entry if needed and adding one to the number of times
the user process has opened the BJ,

- and setting the BJ last opened value for write_begin_mark to select
a default BJ if the user does not give it one and has not called
bjm_set_default_bj.
*/

/*  HISTORY:
Written by Andre Bensoussan, 07/01/82.
Modified:
10/04/82 by Lee A. Newcomb:  To replace the old default_bj setting with the
	  new bj_ppt.default_bj.last_opened_oid for write_begin_mark, fix
	  the calling protocol so recursive references to dm_data_ will not
	  occur, and to document.
10/15/82 by M. Pandolf:  to use file_manager_ to manipulate data management
	  files.
12/10/82 by M. Pandolf:  to bring rest of code up to date.
04/06/83 by A. Bensoussan:  to add the new entry point $for_recovery.
05/13/83 by A. Bensoussan:  to add the new entry point $force.
11/02/83 by M. Pandolf:  to only allow entrynames ending in ".bj"
12/06/83 by L. A. Newcomb:  Renamed before_journal_manager_static_ to
            bjm_data_ and moved some cells from dm_data_ to bjm_data_.
06/11/84 by Lee Baldwin:  Renamed dm_error_$bj_header_bad to $bj_bad_header.
03/19/85 by Steve Herbst: Fixed to initialize bjm_data_$bj_code.
*/
%page;
/* standard entry: */

	entry_no = 1;
	goto COMMON;

for_recovery: entry (p_dir, p_entry, p_bj_oid, p_code);

	entry_no = 2;
	goto COMMON;

force: entry (p_dir, p_entry, p_bj_oid, p_code);

	entry_no = 3;
	goto COMMON;


COMMON:

/* validate entry name */

	if ^is_valid_bj_name (p_entry)
	then do;
		p_code = dm_error_$bj_invalid_name;
		return;
	     end;

/* Enter BJM primitive via standard protocol: */

/* Check that BJM is not already active and claim it if not */

	if bjm_data_$bj_operation = ""
	then bjm_data_$bj_operation = ME;
	else do;
	     p_code = dm_error_$bj_recursive_invoc;
	     goto quick_exit;
	end;

/* Set up values for and enable the cleanup handler */

	pf_oid = ""b;
	level  = cu_$level_get ();

	bjm_data_$bj_exit_err = nonlocal_error_exit;
	bjm_data_$bj_code = 0;

	on cleanup
	     call CLEANUP ();

/* copy arguments into BJM ring and set local code to zero for safety */

	bj_dir   = p_dir;
	bj_entry = p_entry;
	p_code   = 0;

	call cu_$level_set (get_ring_ ());

/* End of standard BJM entry protocol */

/*
   Open the page file for that journal. Compare the pf_uid recorded in the
   CI header with the bj_uid recorded in the bj_header; they must be 
   identical
*/

	call file_manager_$open (bj_dir, bj_entry, pf_oid, code);

	if code ^= 0 
	   then if code = dm_error_$file_already_open
	           then call_fm_close_when_done = "1"b;
	           else do;
		      p_code = code;
		      goto local_error_exit;
	   	      end;
	   else call_fm_close_when_done = "0"b;

	pf_uid = bj_ci_zero$get_pf_uid (pf_oid);

	bj_uid = bj_ci_zero$get_bj_uid (pf_oid);

	if pf_uid ^= bj_uid then
	   do;
	   if call_fm_close_when_done then call file_manager_$close (pf_oid, code);
	   p_code = dm_error_$bj_bad_header;
	   goto local_error_exit;
	   end;

%page;

/* Search the per process and the per system tables for an entry for this
   journal.  Build an entry in the appropriate table if it does not already
   exist.  Register the process as a user of the journal. */

	bj_ppte_ptr = bj_ppt_search (bj_uid);

	if bj_ppte_ptr = null ()
	   then do;
	        call bj_pst_lock ();
	        bj_pste_ptr = bj_pst_search (bj_uid);

	        if bj_pste_ptr = null () 
		then do;
		     if entry_no = 1 then bj_pste_ptr = bj_pste_create              (bj_dir, bj_entry, pf_oid, bj_uid);
		     if entry_no = 2 then bj_pste_ptr = bj_pste_create$for_recovery (bj_dir, bj_entry, pf_oid, bj_uid);
		     if entry_no = 3 then bj_pste_ptr = bj_pste_create$force        (bj_dir, bj_entry, pf_oid, bj_uid);
		     end;

	          else call bj_pste_register$check_in (bj_pste_ptr);

	        bj_ppte_ptr = bj_ppte_create (bj_uid, pf_oid, bj_pste_ptr);

	        call bj_pst_lock$unlock ();

	        end;

	   else call bj_ppte_register$check_in (bj_ppte_ptr);


	bj_oid = bj_oid_util$get_oid (bj_ppte_ptr);
	bjm_data_$bj_ppt_ptr -> bj_ppt.default_bj.last_opened_oid = bj_oid;

	p_bj_oid = bj_oid;

	if call_fm_close_when_done then call file_manager_$close (pf_oid, code);

/* Exit according to standard protocol */

std_exit:
	call cu_$level_set (level);
	bjm_data_$bj_exit_err =
	     bjm_data_$bj_default_error_label;
	bjm_data_$bj_operation = "";

quick_exit:
	return;

nonlocal_error_exit:
	p_code = bjm_data_$bj_code;

local_error_exit:
	call CLEANUP;
	goto quick_exit;

%page;

/* INTERNAL PROCEDURES */

is_valid_bj_name:
	proc (bj_name)
	reducible
	returns (bit (1) aligned);

dcl  bj_name char (*) parameter;
dcl (length, substr, reverse, rtrim) builtin;

	return (
	     (length (rtrim (bj_name)) < 33) &
	     (substr (reverse (rtrim (bj_name)), 1, 3) = "jb."));

end is_valid_bj_name;

%page;

CLEANUP: proc;

	dcl  ec		 fixed bin (35);



	call bj_cleanup_tables$handler (ec);		/* Also unlocks the locks */

	if call_fm_close_when_done
	then call file_manager_$close (pf_oid, ec);

	bjm_data_$bj_operation = "";
	bjm_data_$bj_exit_err =
	     bjm_data_$bj_default_error_label;

	call cu_$level_set (level);

	return;

     end CLEANUP;

%page;

/* PARAMETERS */

dcl  p_dir		        char (*),		/* Dir path of the journal */
     p_entry		        char (*),		/* Entry name of the journal */
     p_bj_oid		        bit (36) aligned,
     p_code		        fixed bin (35);

/* AUTOMATIC */

dcl  bj_dir		        char (168);
dcl  bj_entry		        char (32);
dcl  bj_oid		        bit (36) aligned;
dcl  code			        fixed bin (35);
dcl  pf_oid		        bit (36) aligned;
dcl  pf_uid		        bit (36) aligned;
dcl  bj_uid		        bit (36) aligned;
dcl  level		        fixed bin;
dcl  bj_pste_ptr		        ptr;
dcl  call_fm_close_when_done	        bit (1) aligned;
dcl  entry_no		        fixed bin;


/* CONSTANT */

dcl  ME			        char (8) internal static
			        options (constant) init ("bjm_open");

/* EXTERNAL */

dcl  dm_error_$bj_recursive_invoc     fixed bin(35) ext static;
dcl  dm_error_$bj_bad_header	        fixed bin(35) ext static;
dcl  dm_error_$file_already_open      fixed bin(35) ext static;
dcl  dm_error_$bj_invalid_name        fixed bin(35) ext static;
dcl  bjm_data_$bj_ppt_ptr	        pointer ext static;

/* ENTRY */

dcl  cu_$level_get		        entry returns (fixed bin);
dcl  cu_$level_set		        entry (fixed bin);
dcl  get_ring_		        entry returns (fixed bin (3));
dcl  file_manager_$open	        entry (char (*), char (*), bit (36) aligned, fixed bin (35));
dcl  file_manager_$close	        entry (bit (36) aligned, fixed bin (35));
dcl  bj_ci_zero$get_pf_uid	        entry (bit (36) aligned) returns (bit (36) aligned);
dcl  bj_ci_zero$get_bj_uid	        entry (bit (36) aligned) returns (bit (36) aligned);
dcl  bj_ppt_search		        entry (bit (36) aligned) returns (ptr);
dcl  bj_pst_search		        entry (bit (36) aligned) returns (ptr);
dcl  bj_pste_create		        entry (char (168), char (32), bit (36) aligned, bit (36) aligned) returns (ptr);
dcl  bj_pste_create$for_recovery      entry (char (168), char (32), bit (36) aligned, bit (36) aligned) returns (ptr);
dcl  bj_pste_create$force	        entry (char (168), char (32), bit (36) aligned, bit (36) aligned) returns (ptr);
dcl  bj_ppte_create		        entry (bit (36) aligned, bit (36) aligned, ptr) returns (ptr);
dcl  bj_pst_lock		        entry;
dcl  bj_pst_lock$unlock	        entry;
dcl  bj_pste_register$check_in        entry (ptr);
dcl  bj_ppte_register$check_in        entry (ptr);
dcl  bj_oid_util$get_oid	        entry (ptr) returns (bit (36) aligned);
dcl  bj_cleanup_tables$handler        entry (fixed bin (35));

/* CONDITION */

dcl  cleanup		        condition;

/* INCLUDE FILES */

%page;
%include dm_bj_global_error_info;
%page;
%include dm_bj_static;
%page;
%include dm_bj_ppt;
%page;

end bjm_open;
