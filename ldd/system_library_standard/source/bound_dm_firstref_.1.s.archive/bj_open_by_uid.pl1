/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION:
A procedure to open a before journal given only its UID.

     This procedure is designed to be called during rollback situations where
a process is rolling back some portion of a transaction on behalf of
another process, and must open the before journal in its own address space.
All it has available to it is the before jorunal UID  of the before
journal used by the now crippled process.

     ASSUMPTION:  since the crippled process is in the midst of a transaction,
it should not have the before journal closed.  This means that the journal
is registered in the before journal per system table.  If not found, no
attempt will be made to search far and wide across the hierarchy because
the process did something erroneous with the before journal.
*/

/* HISTORY:
Written by M. Pandolf, 08/24/82.
Modified:
10/15/82 by M. Pandolf:  to use file_manager_ for manipulating
	  data management system files.
01/11/83 by Lee A. Newcomb:  to call bj_oid_util$get_oid if the call
	  to bj_ppt_search is successful.
12/06/83 by L. A. Newcomb:  Renamed before_journal_manager_static_ to
            bjm_data_ and moved some cells from dm_data_ to bjm_data_.
12/03/84 by M. Sharpe:  to clean up format and dcls; to use ERROR_RETURN;
	  to set/reset validation level around calls to file_manager_.
*/

/* format: style4,indattr,ifthenstmt,ifthen,^indcomtxt,idind33 */
%page;
bj_open_by_uid:
     procedure (p_bj_uid, p_bj_oid);

/* DECLARATIONS */

/* Parameters */

dcl  p_bj_uid		        bit (36) aligned parameter; /* UID of before journal that some other process was using */
dcl  p_bj_oid		        bit (36) aligned parameter; /* OID of the before journal in this process */

/* Automatic */

dcl  code			        fixed bin (35);	/* standard status code */
dcl  bj_oid		        bit (36) aligned;	/* copy of parameter */
dcl  bj_uid		        bit (36) aligned;	/* copy of parameter */
dcl  bj_dir		        char (168);		/* dir name of before journal to be opened */
dcl  bj_entry		        char (32);		/* entry name of before journal to be opened */
dcl  fm_oid		        bit (36) aligned;	/* page file OID of before journal in this process */
dcl  call_fm_close_when_done	        bit (1) aligned;	/* "1"b => need to close DM file before return */
dcl  current_ring		        fixed bin (3);
dcl  saved_level		        fixed bin;		/* user's validation level */

/* Builtin */

dcl  (null, ptr)		        builtin;

/* Condition */

dcl  cleanup		        condition;

/* Constant */

dcl  ME			        char (32) internal static options (constant) init ("bj_open_by_uid");

/* Entry */

dcl  bj_ppt_search		        entry (bit (36) aligned) returns (ptr);
dcl  bj_ppte_register$check_in        entry (ptr);
dcl  bj_pst_lock		        entry ();
dcl  bj_pst_search		        entry (bit (36) aligned) returns (ptr);
dcl  bj_pst_lock$unlock	        entry ();
dcl  file_manager_$open	        entry (char (*), char (*), bit (36) aligned, fixed bin (35));
dcl  file_manager_$close	        entry (bit (36) aligned, fixed bin (35));
dcl  bj_pste_register$check_in        entry (ptr);
dcl  bj_ppte_create		        entry (bit (36) aligned, bit (36) aligned, ptr) returns (ptr);
dcl  bj_oid_util$get_oid	        entry (ptr) returns (bit (36) aligned);
dcl  bj_report_err		        entry (fixed bin (35), char (*));
dcl  cu_$level_set		        entry (fixed bin);
dcl  cu_$level_get		        entry (fixed bin);
dcl  get_ring_		        entry() returns(fixed bin(3));

/* External Static */

dcl  dm_error_$file_already_open      fixed bin (35) external static;
dcl  dm_error_$bj_journal_not_registered fixed bin (35) external static;
dcl  bjm_data_$bj_pst_ptr	        pointer external static;

%page;
/* first  some housekeeping */

	bj_uid = p_bj_uid;
	bj_oid = p_bj_oid;

/* Next, do we have the before journal in question opened in our process? */

	bj_ppte_ptr = bj_ppt_search (bj_uid);

	if bj_ppte_ptr ^= null ()
	then do;
	     bj_oid = bj_oid_util$get_oid (bj_ppte_ptr);
	     call bj_ppte_register$check_in (bj_ppte_ptr);
	     goto MAIN_RETURN;
	end;

/* well, we do not have it opened...check in the per system table */

	call bj_pst_lock ();

	bj_pste_ptr = bj_pst_search (bj_uid);

	if bj_pste_ptr = null ()			/* give up */
	then do;
	     call bj_pst_lock$unlock ();
	     call ERROR_RETURN (dm_error_$bj_journal_not_registered);
	end;

/* form the pathname to be given to page file manager */

	bj_pn_table_ptr = ptr (bjm_data_$bj_pst_ptr, bjm_data_$bj_pst_ptr -> bj_pst.pn_table_offset);

	bj_dir = bj_pn_table (bj_pste.bj_ix).dir;
	bj_entry = bj_pn_table (bj_pste.bj_ix).entry;

/* open the before journal in this process */

	/* but first, set up a cleanup handler */

	call cu_$level_get (saved_level);
	current_ring = get_ring_ ();

	on cleanup call cu_$level_set (saved_level);

	/* now back to the business at hand. */

	call cu_$level_set ((current_ring));
	call file_manager_$open (bj_dir, bj_entry, fm_oid, code);
	call cu_$level_set (saved_level);

	if code ^= 0
	then if code = dm_error_$file_already_open
	     then call_fm_close_when_done = "1"b;
	     else do;
		call bj_pst_lock$unlock ();
		call ERROR_RETURN (code);
	     end;
	else call_fm_close_when_done = "0"b;
%page;
/* register the before journal and create a PPTE for it */

	call bj_pste_register$check_in (bj_pste_ptr);

	bj_ppte_ptr = bj_ppte_create (bj_uid, fm_oid, bj_pste_ptr);

	call bj_pst_lock$unlock ();

/* set return parameter and close the file, if necessary */

	bj_oid = bj_oid_util$get_oid (bj_ppte_ptr);

	if call_fm_close_when_done
	then do;
	     call cu_$level_set ((current_ring));
	     call file_manager_$close (fm_oid, code);
	     call cu_$level_set (saved_level);
	end;

/* exit  protocols */

MAIN_RETURN:
	p_bj_oid = bj_oid;
	p_bj_uid = bj_uid;
	return;


ERROR_RETURN:
	proc (er_code);

dcl  er_code			fixed bin (35);

	call bj_report_err (er_code, ME);
	goto MAIN_RETURN;

     end ERROR_RETURN;


/* Include Files */
%page;
%include dm_bj_static;
%page;
%include dm_bj_ppt;
%page;
%include dm_bj_pst;
%page;
%include dm_bj_pste;
%skip (6);
%include dm_bj_pn_table;


     end bj_open_by_uid;
