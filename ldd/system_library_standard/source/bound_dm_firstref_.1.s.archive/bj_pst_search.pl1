/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION:

	bj_pst_search does a linear walk through the BJ_PST looking for
     a before journal with the input BJ UID.  We return a pointer to the
     BJ_PST entry found, or null if the journal is not active in the DM
     system.
*/

/* HISTORY:

Written by Mike Pandolf, 08/04/82.
Modified:
12/06/83 by L. A. Newcomb:  Renamed before_journal_manager_static_ to
            bjm_data_ and moved some cells from dm_data_ to bjm_data_.
06/07/84 by Lee Baldwin:  Renamed dm_error_$bj_(pst pste)_version_bad
            to bj_bad_(pst pste)_version.
02/14/85 by Lee A. Newcomb:  Fixed:  to use project program format, declare
            all variables, to name variables to imply a usage, use
            CHECK_VERSION_NUMERIC and ERROR_RETURN procs, and correctly
            declare dm_error_$*'s; added a description section; removed
	  %include of unused dm_bj_static.
02/14/85 by Lee A. Newcomb:  Fixed declaration and calling sequence of
	  bj_report_err.
*/

/* format: style2,ll79,ind3,^indprocbody,ifthendo,ifthen,^indnoniterdo,^inddcls,dclind5,idind35,linecom */
%page;
bj_pst_search:
   proc (p_bj_uid) returns (ptr);

/* DECLARATIONS */

/* Parameter */
dcl  p_bj_uid			bit (36) aligned parameter;

/* Automatic */
dcl  (
     bj_pste_index			fixed bin init (0),
     found			bit (1) init (""b)
     )				automatic;

/* Based */
/* Builtin */
dcl  (addr, null)			builtin;

/* Condition */
/* Constant */
dcl  ME				char (13)
				init ("bj_pst_search") internal
				static options (constant);

/* Entry */
dcl  bj_report_err			entry (fixed bin (35), char (*));

/* External */
dcl  (
     (
     dm_error_$bj_bad_pst_version,
     dm_error_$bj_bad_pste_version
     )				fixed bin (35),
     bjm_data_$bj_pst_ptr		pointer
     )				external static;

/* Static */

/* END OF DECLARATIONS */
%page;
FIND_BJ_PST:
   do;
      bj_pst_ptr = bjm_data_$bj_pst_ptr;
      call CHECK_VERSION_NUMERIC (bj_pst.version, BJ_PST_VERSION_1,
	 dm_error_$bj_bad_pst_version);
   end FIND_BJ_PST;

SEARCH_FOR_BJ_UID:
   do bj_pste_index = 1 to bj_pst.highest_ix_used while (^found);
      bj_pste_ptr = addr (bj_pst.e (bj_pste_index));
      if bj_pste.version ^= 0 then
CHECK_IN_USE_PST_ENTRY:
         do;
         call CHECK_VERSION_NUMERIC (bj_pste.version, BJ_PSTE_VERSION_2,
	    dm_error_$bj_bad_pste_version);
         if bj_pste.bj_uid = p_bj_uid then
	  found = "1"b;
      end CHECK_IN_USE_PST_ENTRY;
   end SEARCH_FOR_BJ_UID;

   if ^found then
      bj_pste_ptr = null ();

   return (bj_pste_ptr);

/* end bj_pst_search; */
%page;
ERROR_RETURN:
   proc (er_p_code);

dcl  er_p_code			fixed bin (35) parameter;

   call bj_report_err (er_p_code, ME);			/* will not return */

   end ERROR_RETURN;
%skip (4);
CHECK_VERSION_NUMERIC:
   proc (cvn_p_given_version, cvn_p_correct_version, cvn_p_error_to_use);

/* The error code to use is passed since we use this to check both	*/
/* the PST and PSTE structure versions.				*/

dcl  (
     cvn_p_given_version		fixed bin,
     cvn_p_correct_version		fixed bin,
     cvn_p_error_to_use		fixed bin (35)
     )				parameter;

   if cvn_p_given_version ^= cvn_p_correct_version then
      call ERROR_RETURN (cvn_p_error_to_use);

   end CHECK_VERSION_NUMERIC;
%page;
%include dm_bj_pst;
%page;
%include dm_bj_pste;


   end bj_pst_search;
