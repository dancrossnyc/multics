/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION:

         This  routine  compares  two shutdown_info structures, pointed to by
     p_shutdown_info_1_ptr and p_shutdown_info_2_ptr,  returning  a  resultant
     shutdown_info  structure  pointed  to  by  p_resultant_shutdown_info_ptr.
     p_resultant_shutdown_info_ptr is an input argument, so  the  caller  must
     have  set it to point to an empty shutdown_info structure in the caller's
     address space.  For each time in shutdown_info, the earlier  of  the  two
     input times is taken as the resultant time.  If any of the times in times
     p_shutdown_info_2_ptr->shutdown_info    is   taken,   the   output   flag
     times_have_changed  is  set  to  "1"b.   In  many  comparisons, the first
     shutdown_info  will  have the times calculated from the Multics down time
     and the second will be administratively requested times.

	This  module  is  used by both the administrative shutdown interface
     and   the  Daemon  shutdown  scheduling  interface.   The  administrative
     interface  will  always have p_shutdown_info_2_ptr locate a shutdown_info
     structure  will  non-zero  times.   The  flag  times_have_changed  in the
     resultant structure is only meaningful in this side of DMS shutdown.  The
     Daemon  interface may supply a first shutdown_info with times set or not,
     the  second  shutdown_info  with  times  set  or  not, in any of the four
     combinations  possible.  The no_time_specified flag may be set on if both
     input shutdown_infos' have zero times; the times_have_changed flag is not
     meaningful to the Daemon interface.  This method was used to keep as much
     of the shutdown time comparisons in one place as possible.

*/

/* HISTORY:

Written by Matthew C. Pierret, 09/11/84.
Modified:
10/02/84 by Lee A. Newcomb:  allowed handling of all four possible
	  combinations of shutdown_info times: 0:0, >0:0, 0:>0, and >0:>0,
	  so the Daemon shutdown scheduling modules may use this module.
*/

/* format: style2,ind3,^indprocbody,indnoniterend,^indnoniterdo */
/* format: ll79,comcol50 */

dm_compare_shutdown_info:
   proc (p_shutdown_info_1_ptr, p_shutdown_info_2_ptr,
        p_resultant_shutdown_info_ptr);

/* START OF DECLARATIONS */
/* Parameter */

   dcl	 p_shutdown_info_1_ptr  ptr;	         /*points to first shutdown_info.*/
   dcl	 p_shutdown_info_2_ptr  ptr;	         /*points to the second shutdown_info*/
   dcl	 p_resultant_shutdown_info_ptr
			    ptr;	         /*points to the resultant shutdown_info.*/

/* Automatic */

   dcl	 shutdown_info_1_ptr    ptr;
   dcl	 shutdown_info_2_ptr    ptr;
   dcl	 resultant_shutdown_info_ptr
			    ptr;

/* Based */
/* Builtin */

   dcl	 (null, unspec)	    builtin;

/* Constant */

   dcl	 myname		    init ("dm_compare_shutdown_info")
			    char (32) varying internal static
			    options (constant);

/* Entry */

   dcl	 sub_err_		    entry () options (variable);

/* External */

   dcl	 error_table_$unimplemented_version
			    ext fixed bin (35);

/* END OF DECLARATIONS */
%page;
   shutdown_info_1_ptr = p_shutdown_info_1_ptr;
   shutdown_info_2_ptr = p_shutdown_info_2_ptr;
   resultant_shutdown_info_ptr = p_resultant_shutdown_info_ptr;

   call CHECK_VERSION (shutdown_info_1_ptr -> shutdown_info.version,
        SHUTDOWN_INFO_VERSION_1, "shutdown_info");
   call CHECK_VERSION (shutdown_info_2_ptr -> shutdown_info.version,
        SHUTDOWN_INFO_VERSION_1, "shutdown_info");
   call CHECK_VERSION (resultant_shutdown_info_ptr -> shutdown_info.version,
        SHUTDOWN_INFO_VERSION_1, "shutdown_info");

   if unspec (shutdown_info_1_ptr -> shutdown_info.times) = ""b
   then
TAKE_LATTER:			         /* 0:>0 or 0:0 case */
      resultant_shutdown_info_ptr -> shutdown_info.times =
	 shutdown_info_2_ptr -> shutdown_info.times;
   else if unspec (shutdown_info_2_ptr -> shutdown_info.times) = ""b
   then
TAKE_FORMER:			         /* >0:0 case */
      resultant_shutdown_info_ptr -> shutdown_info.times =
	 shutdown_info_1_ptr -> shutdown_info.times;
   else
TAKE_LESSER:			         /* >0:>0 case */
      do;				         /* format: off */
      resultant_shutdown_info_ptr -> shutdown_info.times.user_warning_time =
	    min (
              shutdown_info_1_ptr -> shutdown_info.times.user_warning_time,
	    shutdown_info_2_ptr -> shutdown_info.times.user_warning_time);

      resultant_shutdown_info_ptr -> shutdown_info.times.begin_shutdown_time =
	    min (
              shutdown_info_1_ptr -> shutdown_info.times.begin_shutdown_time,
	    shutdown_info_2_ptr -> shutdown_info.times.begin_shutdown_time);

      resultant_shutdown_info_ptr -> shutdown_info.times.user_shutdown_time =
	    min (
              shutdown_info_1_ptr -> shutdown_info.times.user_shutdown_time,
	    shutdown_info_2_ptr -> shutdown_info.times.user_shutdown_time);

      resultant_shutdown_info_ptr -> shutdown_info.times.user_bump_time =
	    min (
              shutdown_info_1_ptr -> shutdown_info.times.user_bump_time,
	    shutdown_info_2_ptr -> shutdown_info.times.user_bump_time);

      resultant_shutdown_info_ptr -> shutdown_info.times.daemon_logout_time =
	    min (
              shutdown_info_1_ptr -> shutdown_info.times.daemon_logout_time,
	    shutdown_info_2_ptr -> shutdown_info.times.daemon_logout_time);
      end TAKE_LESSER;                            /* format: on */

   if unspec (resultant_shutdown_info_ptr -> shutdown_info.times)
        = unspec (shutdown_info_1_ptr -> shutdown_info.times)
   then
KEEP_FORMER_TIMES:
      do;
      resultant_shutdown_info_ptr
	 -> shutdown_info.output_flags.times_have_changed = "0"b;
      resultant_shutdown_info_ptr -> shutdown_info.reason =
	 shutdown_info_1_ptr -> shutdown_info.reason;
      end KEEP_FORMER_TIMES;
   else
TIMES_HAVE_CHANGED:
      do;
      resultant_shutdown_info_ptr
	 -> shutdown_info.output_flags.times_have_changed = "1"b;
      resultant_shutdown_info_ptr -> shutdown_info.reason =
	 shutdown_info_2_ptr -> shutdown_info.reason;
      end TIMES_HAVE_CHANGED;

   if unspec (resultant_shutdown_info_ptr -> shutdown_info.times) = ""b
   then
NO_TIMES_IN_EITHER_INFO:
      resultant_shutdown_info_ptr -> shutdown_info.no_time_specified = "1"b;

   return;

/* end dm_compare_shutdown_info; */
%page;
CHECK_VERSION:
   proc (cv_p_received_version, cv_p_expected_version, cv_p_structure_name);
   dcl	 cv_p_received_version  char (8) aligned;
   dcl	 cv_p_expected_version  char (8) aligned;
   dcl	 cv_p_structure_name    char (*);

   if cv_p_received_version ^= cv_p_expected_version
   then call sub_err_ (error_table_$unimplemented_version, myname,
	   ACTION_CANT_RESTART, null, 0,
	   "^/Expected version ^a of the ^a structure.
Received version ^d instead.", cv_p_expected_version, cv_p_structure_name,
	   cv_p_received_version);

   end CHECK_VERSION;
%page;
%include dm_shutdown_spec;
%page;
%include sub_err_flags;
   end dm_compare_shutdown_info;
