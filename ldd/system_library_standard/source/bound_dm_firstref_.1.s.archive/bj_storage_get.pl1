/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION:

*/


/* HISTORY:
Written by Andre Bensoussan,  07/14/1982 (Bastille Day).
Modified:
10/15/82 by M. Pandolf to use file_manager_ to manipulate data management
	  system files.
02/23/83 by A. Bensoussan to lock/unlock using bj_pste_lock$lock/unlock.
06/11/84 by Lee Baldwin:  Renamed dm_error_$bj_buffer_bad_uid to
            bj_bad_buffer_uid, removed dcls for dm_error_$bj_bad_buffer_address
            
            and $bj_journal_full because they're not being used.
10/12/84 by M. Sharpe:  to use "call ERROR_RETURN (code)" convention; to
	  change a goto-simulated loop to a "do while"; to clean up
	  format and dcls; to rewrite GET_CI internal procedure to
	  return a pointer to the requested ci obtained from
	  file_manager_$get_ci_ptr. 
12/06/84 by M. Sharpe:  to add format statement; to set/reset validation level
	  around the call to file_manager_.
01/11/85 by M. Sharpe:  to rest validation level in the ERROR_RETURN
	  subroutine.
*/

/* format: style4,^indcomtxt,idind40,^inddcls,indattr */

bj_storage_get: proc (p_bj_oid, p_rec_id, p_rec_ptr, p_rec_bytes);


/* Parameters */

dcl  p_bj_oid			     bit (36) aligned;
dcl  p_rec_id			     bit (36) aligned; /* id of requested record */
dcl  p_rec_ptr			     ptr;		/* ptr to logical record */
dcl  p_rec_bytes			     fixed bin;	/* number of bytes of logical record - Output */



/* Automatic */

dcl  ci_no			     fixed bin (24) uns;
dcl  code				     fixed bin (35);
dcl  curr_bytes			     fixed bin;
dcl  curr_offset			     fixed bin;
dcl  more_to_be_gotten		     bit (1);
dcl  prev_bytes			     fixed bin;
dcl  rel_distance			     fixed bin (35);
dcl  sl_no			     fixed bin (12) uns;
dcl  saved_level			     fixed bin init (-1);
dcl  current_ring			     fixed bin (3);

dcl  1 rec_id			     aligned,
       2 ci_no			     fixed bin (24) uns unaligned,
       2 sl_no			     fixed bin (12) uns unaligned;

/* Based */

dcl  RECORD_STRING			     char (curr_bytes) based;

/* Builtin */

dcl  (addcharno, addrel, null,
     ptr, size, unspec)		     builtin;

/* Condition */

dcl  cleanup			     condition;


/* Constants */

dcl  ME				     char (14) int static
				     options (constant) init ("bj_storage_get");


/* Entries */

dcl  bj_pste_lock$lock		     entry (ptr, bit (36) aligned);
dcl  bj_pste_lock$unlock		     entry (ptr);
dcl  bj_oid_util$get_ptr		     entry (bit (36) aligned) returns (ptr);
dcl  bj_report_err			     entry (fixed bin (35), char (*));
dcl  bj_storage_util$distance
				     entry (ptr, fixed bin (24) uns) returns (fixed bin (24) uns);
dcl  bj_storage_util$next_used_ci
				     entry (ptr, fixed bin (24) uns) returns (fixed bin (24) uns);
dcl  cu_$level_get			     entry (fixed bin);
dcl  cu_$level_set			     entry (fixed bin);
dcl  file_manager_$get_ci_ptr
				     entry (bit (36) aligned, fixed bin (27), ptr, fixed bin (35));
dcl  get_ring_			     entry () returns (fixed bin (3));


/* External Static */

dcl  dm_error_$bj_bad_buffer_uid	     fixed bin (35) ext;
dcl  dm_error_$bj_bad_rec_id		     fixed bin (35) ext;
dcl  dm_error_$bj_bad_continuation_flag	     fixed bin (35) ext;
dcl  dm_error_$bj_logic_err		     fixed bin (35) ext;

%page;
/* Code */

	bj_ppte_ptr = bj_oid_util$get_ptr (p_bj_oid);
	bj_pste_ptr = bj_ppte.bj_pste_ptr;
	bj_ci_ptr = ptr (bj_pste_ptr, bj_pste.buffer_offset);



	call bj_pste_lock$lock (bj_pste_ptr, bj_ppte.bj_uid);



	if bj_ci.header1.id.uid ^= bj_pste.bj_uid	/* Consistency check */
	then call ERROR_RETURN (dm_error_$bj_bad_buffer_uid);


/*
	The bj_storage_get primitive should not be concerned with buffering
	the next CI since it is not going to write in the journal. If the
	last_ci_put is the last_ci_buffered, this should not prevent the get
	primitive to function correctly.

	The bj_storage_get primitive should not be concerned with putting
	the buffered CI in the file either, even if the buffer is full, as
	long as the get primitive gets the record from the buffer if it
	happens to be in the buffer, which it does.
     */



	prev_bytes = 0;
	curr_bytes = 0;

	unspec (rec_id) = p_rec_id;
	ci_no = rec_id.ci_no;
	sl_no = rec_id.sl_no;


	current_ring = get_ring_ ();
	call cu_$level_get (saved_level);

	on cleanup call cu_$level_set (saved_level);

	more_to_be_gotten = "1"b;
	do while (more_to_be_gotten);
	     rel_distance = bj_storage_util$distance (bj_pste_ptr, bj_pste.last_ci_put)
		- bj_storage_util$distance (bj_pste_ptr, ci_no);

	     if rel_distance >= 0			/* Normal case */
	     then do;
		call cu_$level_set ((current_ring));
		bj_ci_ptr = GET_CI (ci_no);
		call cu_$level_set (saved_level);
	     end;

	     else if rel_distance = -1		/* Very special case: record is in buffer */
	     then if ci_no = bj_pste.last_ci_buffered
		then bj_ci_ptr = ptr (bj_pste_ptr, bj_pste.buffer_offset);
		else call ERROR_RETURN (dm_error_$bj_logic_err);

	     else call ERROR_RETURN (dm_error_$bj_bad_rec_id);

	     if prev_bytes = 0			/* Check existence of record with this rec_id */
	     then if sl_no > bj_ci.header2.n_slots
		     | sl_no < 1
		     | (sl_no = 1 & bj_ci.header2.first_is_contn)
		then call ERROR_RETURN (dm_error_$bj_bad_continuation_flag);
		else ;				/* OK */

	     else if sl_no > bj_ci.header2.n_slots
		| sl_no ^= 1
		| bj_ci.header2.first_is_contn = "0"b
	     then call ERROR_RETURN (dm_error_$bj_bad_continuation_flag);
	     else ;				/* OK */

	     curr_bytes = bj_ci.slot (sl_no).length;
	     curr_offset = bj_ci.slot (sl_no).offset;

	     addcharno (p_rec_ptr, prev_bytes) -> RECORD_STRING =
		addcharno (bj_ci_ptr, size (ci_header) * 4 + curr_offset) -> RECORD_STRING;

	     prev_bytes = prev_bytes + curr_bytes;

	     if (sl_no = bj_ci.header2.n_slots) & (bj_ci.header2.last_is_contd) /* Is record continued? */
	     then do;
		ci_no = bj_storage_util$next_used_ci (bj_pste_ptr, ci_no);
		sl_no = 1;
	     end;

	     else more_to_be_gotten = "0"b;

	end;					/* do while */

	p_rec_bytes = prev_bytes;

	call bj_pste_lock$unlock (bj_pste_ptr);

MAIN_RETURN:
	return;


ERROR_RETURN:
     proc (error_code);

dcl  error_code			     fixed bin (35);

	call bj_report_err (error_code, ME);		/* ....Who is going to unlock?...*/
	if saved_level > -1 then call cu_$level_set (saved_level);

	goto MAIN_RETURN;
     end ERROR_RETURN;


GET_CI: proc (get_ci_idx) returns (ptr);


dcl  get_ci_idx			     fixed bin (24) uns;
dcl  get_ci_ptr			     ptr;


	call file_manager_$get_ci_ptr ((bj_ppte.pf_oid), (get_ci_idx), get_ci_ptr, code);
	if code ^= 0 then call ERROR_RETURN (code);

	get_ci_ptr = addrel (get_ci_ptr, -(size (ci_header)));

	return (get_ci_ptr);
     end GET_CI;

%page; %include dm_bj_static;
%page; %include dm_bj_ppt;
%page; %include dm_bj_pst;
%page; %include dm_bj_pste;
%page; %include dm_bj_ci;
%page; %include dm_ci_header;
%page; %include dm_ci_parts;

     end bj_storage_get;
