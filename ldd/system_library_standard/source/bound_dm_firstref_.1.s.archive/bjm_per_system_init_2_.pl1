/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION:

     This is the part two initialization program for the before journal
     manager.  This assumes the current process may run Data Management in the
     using the standard interfaces.  It is responisble for making the default
     before journal exist and available to users.  If the journal already
     exists, it must make sure the journal is valid.  Currently, the journal
     is forced to work via a call to bj_open$force, but more work needs to be
     done to use the DMS configuration file indicators in deciding how to
     handle this case.
*/

/* HISTORY:

Written by M. Pandolf, 07/10/82.
Modified:
08/31/82 by M. Pandolf: to split into two parts
11/04/82 by M. Pandolf: to set acl on default BJ for all processes
02/14/83 by M. Pandolf: to set version for TXT
03/23/83 by Lee A. Newcomb: to create default BJ where told by config file.
03/24/83 by L. A. Newcomb: to not give up if the default BJ already exists
	  from a previous DMS invocation.
03/30/83 by M. Pandolf: use new dm_system_data_ names for default journal.
04/12/83 by L. A. Newcomb:  added special handling of the default BJ being in
            the bootload directory during part 2 init so the default dirname
            in dm_system_data_ is set properly.
05/03/83 by L. A. Newcomb:  part_2 system initialization now uses
            dm_system_data_ to get the default size of the system default
            before journal.
05/15/83 by L. A. Newcomb:  part_2 now tries to open the default before
	  journal if it existed previous to this bootload; and too make
	  sure that the journal is in a usable state.
08/01/83 by Lindsey L. Spratt:  Changed to reference before_journal_manager_
            create close and open_force primitives through the
            before_journal_manager_ TV, rather than directly (e.g., "call
            before_journal_manager_$create_bj" instead of "call bjm_create").
            This is necessary to support the binding of the integrity
            services.
08/06/83 by Lee A. Newcomb: removed obsolete code arg. from calls
	  to dm_per_system_ entries.
09/09/83 by L. A. Newcomb:  split part one and two into two distinct programs.
	  This helps maintenance and binding.  History comments for part one
	  BJM initialization have been removed.
06/25/84 by Matthew Pierret:  Changed to use file_manager_$add_acl_entries 
            instead of file_manager_$open/$acl_add/$close.
11/22/84 by Lee A. Newcomb:  Fixed to use new dm_misc_util_$get_(""
            enabled_)bootload_dir("" name) entries.
12/05/84 by M. Sharpe:  to correct format; set/reset/validation level around
	  the calls to file_manager_.
12/11/84 by M. Sharpe:  to use ERROR_RETURN and ERROR_LOG_RETURN; to use 
	  a constant for "bootload_dir"; to restructure the conditional
	  for checking the status code.
12/26/84 by Matthew Pierret:  Changed to use modern calling sequence of
            file_manager_$add_acl_entries, which takes a general_acl structure.
01/16/84 by M. Sharpe:  to replace the call to file_manager_$add_acl_entries
	  with a call to before_journal_manager_$= and thus remove all
	  validation setting in the program; to add cleanup handler.
03/05/85 by Steve Herbst: Replaced dm_log_ with dm_misc_util_$log.
03/18/85 by Steve Herbst: Removed spurious newline from warning log message.
04/02/85 by Lee A. Newcomb:  Fixed to not pass this modules name to
            dm_misc_util_$log when calling $log without an error code.
*/

/* format: style2,ll79,ind3,^indprocbody,ifthendo,ifthen,^indnoniterdo */
/* format: ^inddcls,dclind5,idind35,linecom */
%page;

bjm_per_system_init_2_:
   procedure (p_code);

/* DECLARATIONS */

/* Parameter */

dcl  p_code			fixed bin (35)	/* standard system status code */
				parameter;

/* Automatics */

dcl  (
     code				fixed bin (35),	/* local copy of status code */
     create_code			fixed bin (35) init (-1),
						/* indicates to cleanup whether or not bj was created */
     default_before_journal_directory	char (168),	/* where we put the default BJ */
     default_before_journal_oid	bit (36) aligned init (""b)
						/* used in part_2 to make sure BJ is ok. */
     )				automatic;

dcl  1 default_before_journal_default_acl		/* used to set default BJ ACL */
				aligned automatic,
       2 version			char (8) aligned
				init (GENERAL_ACL_VERSION_1),
       2 count			fixed bin init (1),
       2 entries			dim (1) like general_acl_entry;

/* Builtin */
dcl  addr				builtin;

/* Condition */

dcl  cleanup			condition;

/* Constants */

dcl  (
     CI_SIZE			fixed bin init (4096),
     BOOTLOAD_DIR			char (12) init ("bootload_dir"),
     IOA_GENERAL_RS_NO_NEW_LINE	bit (1) aligned init ("0"b),
     IOA_GENERAL_RS_DONT_PAD		bit (1) aligned init ("1"b),
     MY_NAME			char (26)
				init ("bjm_per_system_init$part_2")
     )				internal static options (constant);

/* Entries */

dcl  before_journal_manager_$close_bj	entry (bit (36) aligned,
				fixed bin (35));
dcl  before_journal_manager_$create_bj	entry (char (*), char (*), fixed bin,
				fixed bin, fixed bin (35));
dcl  before_journal_manager_$delete_bj	entry (char (*), char (*),
				fixed bin (35));
dcl  before_journal_manager_$open_bj_force
				entry (char (*), char (*),
				bit (36) aligned, fixed bin (35));
dcl  cu_$arg_list_ptr		entry (ptr);
dcl  dm_misc_util_$log		entry options (variable);
dcl  dm_misc_util_$get_bootload_dir	entry (char (*));
dcl  dm_misc_util_$get_enabled_bootload_dirname
				entry () returns (char (32));
dcl  before_journal_manager_$add_acl_entries
				entry (char (*), char (*), ptr,
				fixed bin (35));
dcl  ioa_$general_rs		entry (ptr, fixed bin, fixed bin,
				char (*), fixed bin (21),
				bit (1) aligned, bit (1) aligned);


/* External Static */


dcl  (
     dm_error_$file_already_exists	fixed bin (35),
     dm_system_data_$bj_default_dirname char (168),
     dm_system_data_$bj_default_filename
				char (32),
     dm_system_data_$bj_default_journal_size
				fixed bin
     )				external static;

%page;
   p_code = 0;

/* create the default system before journal */
/* we must take care of the case where the default dirname is the keyword */
/* BOOTLOAD_DIR (see dcls), and fill in the bootload dir name as load     */
/* config cannot */

   if dm_system_data_$bj_default_dirname = BOOTLOAD_DIR then/* must use init dir name */
      call dm_misc_util_$get_bootload_dir (default_before_journal_directory);
   else default_before_journal_directory = dm_system_data_$bj_default_dirname;

   on cleanup call CLEAN_UP ();

   call before_journal_manager_$create_bj (default_before_journal_directory,
        dm_system_data_$bj_default_filename,
        dm_system_data_$bj_default_journal_size, CI_SIZE, create_code);
   if create_code ^= 0 then
      if create_code ^= dm_error_$file_already_exists then
         call ERROR_RETURN (create_code);
      else					/* we need to make sure its valid. */
						/* Brain damage if we just created in bootload dir */
						/* and the journal already existed, so will fall through */
	 if dm_system_data_$bj_default_dirname ^= BOOTLOAD_DIR then do;
						/* check validity */
         call before_journal_manager_$open_bj_force (
	    default_before_journal_directory,
	    dm_system_data_$bj_default_filename, default_before_journal_oid,
	    code);
         if code ^= 0 then
	  call ERROR_LOG_RETURN (code,
	       "Default BJ from previous bootload is unrecoverably damaged: ^a>^a.",
	       default_before_journal_directory,
	       dm_system_data_$bj_default_filename);

         call before_journal_manager_$close_bj (default_before_journal_oid,
	    code);
         if code ^= 0 then
	  call ERROR_LOG_RETURN (code,
	       "Default BJ from previous bootload cannot be closed, aborting: ^a>^a.",
	       default_before_journal_directory,
	       dm_system_data_$bj_default_filename);

/* OK to use the journal */
         call dm_misc_util_$log (LOG_SV,
	    "Warning: using default BJ from previous DMS invocation.");
         code = 0;					/* so we fall through and make sure the ACL is right */
      end;

%page;
/* set ACL to RW for all users of DMS */

   default_before_journal_default_acl.entries (1).access_name = "*.*.*";
   default_before_journal_default_acl.entries (1).mode = "500000000000"b3;
   default_before_journal_default_acl.entries (1).status_code = 0;

   call before_journal_manager_$add_acl_entries
        ((default_before_journal_directory),
        (dm_system_data_$bj_default_filename),
        addr (default_before_journal_default_acl), code);

   if code ^= 0 then
      call ERROR_RETURN (code);

   if dm_system_data_$bj_default_dirname = BOOTLOAD_DIR then
      dm_system_data_$bj_default_dirname =
	 dm_misc_util_$get_enabled_bootload_dirname ();

   p_code = 0;					/* successful */

/* finished */

MAIN_RETURN:
   return;

ERROR_RETURN:
   proc (er_p_code);

dcl  er_p_code			fixed bin (35);

   p_code = er_p_code;
   call CLEAN_UP ();
   goto MAIN_RETURN;

   end ERROR_RETURN;


%page;

CLEAN_UP:
   proc ();

dcl  c_code			fixed bin (35);

   if default_before_journal_oid ^= ""b then
      call before_journal_manager_$close_bj (default_before_journal_oid,
	 c_code);

   if create_code = 0 then
      call before_journal_manager_$delete_bj (default_before_journal_directory,
	 dm_system_data_$bj_default_filename, c_code);

   return;

   end CLEAN_UP;


%page;
ERROR_LOG_RETURN:
   proc options (variable);

dcl  (
     erl_arg_list_ptr		ptr,
     erl_code			fixed bin (35),
     erl_message			char (1024),
     erl_message_length		fixed bin (21)
     )				automatic;

dcl  (
     erl_fixed_bin_35_value		fixed bin (35),
     erl_message_overlay		char (erl_message_length)
     )				based;

   call cu_$arg_list_ptr (erl_arg_list_ptr);
   erl_code =
        erl_arg_list_ptr -> arg_list.arg_ptrs (1) -> erl_fixed_bin_35_value;

   call ioa_$general_rs (erl_arg_list_ptr, 2, 3, erl_message,
        erl_message_length, IOA_GENERAL_RS_DONT_PAD,
        IOA_GENERAL_RS_NO_NEW_LINE);

   call dm_misc_util_$log (LOG_SV, erl_code, MY_NAME,
        addr (erl_message) -> erl_message_overlay);

   call ERROR_RETURN (erl_code);

   end ERROR_LOG_RETURN;

/* end bjm_per_system_init_2_; */


/* INCLUDE FILES start next page */
%page;
%include dm_bj_pste;
%page;
%include dm_bj_txt;
%page;
%include dm_log_sv_codes;
%page;
%include arg_list;
%page;
%include acl_structures;

   end bjm_per_system_init_2_;
