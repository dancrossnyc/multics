/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION:

	A procedure to allow a process other than the one that started a
     transaction to complete the transaction.  from the point of before
     journal manager, abandoning means the changing of some TXTE
     information for a transaction.  this change is local to before journal
     manager and there are no implicit effects to any other subsystem.
*/

/* HISTORY
Written by M. Pandolf, 09/01/82.
Modified:
10/27/82 by M. Pandolf:  to bjm_abandon_transaction.
 02/14/83 by M. Pandolf:  to force abandon on cleanup.
12/06/83 by L. A. Newcomb:  Renamed before_journal_manager_static_ to
            bjm_data_ and moved some cells from dm_data_ to bjm_data_.
06/07/84 by Lee Baldwin:  Fixed to call dm_error_$no_current_transaction
            instead of dm_error_$bj_no_txn.
10/24/84 by M.Sharpe:  to clean up dcls and format; to use the
	  "call ERROR_RETURN (code)" convention.
03/19/85 by Steve Herbst: Fixed to initialize bjm_data_$bj_code.
*/
 
/* format: style4,indattr,ifthenstmt,ifthen,^indcomtxt,idind33 */

bjm_abandon_transaction:
     procedure (p_tid, p_tix, p_code);

/* DECLARATIONS */

/* Parameter */

dcl  p_tid		        bit (36) aligned parameter; /* transaction ID */
dcl  p_tix		        fixed bin parameter;	/* transaction index */
dcl  p_code		        fixed bin (35) parameter; /* standard system status code */

/* Automatic */

dcl  tid			        bit (36) aligned;	/* local copy of transaction ID */
dcl  tix			        fixed bin;		/* local copy of transaction index */

/* Condition */

dcl  cleanup		        condition;

/* Constant */

dcl  ME			        char (32) internal static options (constant) init ("bjm_abandon_transaction");

/* Entry */

dcl  bj_adopt_txn$abandon	        entry (fixed bin, bit (36) aligned);
dcl  bj_adopt_txn$force_abandon       entry ();
dcl  bj_cleanup_tables$handler        entry (fixed bin (35));

/* External Static */

dcl  dm_error_$bj_recursive_invoc     fixed bin (35) external static;
dcl  dm_error_$no_current_transaction fixed bin (35) external static;

%page;
/* initialize parameters */

	tid = p_tid;
	tix = p_tix;
	p_code = 0;

/* set up addresses for unexpected error */

	bjm_data_$bj_exit_err = nonlocal_error_exit;
	bjm_data_$bj_code = 0;

	on cleanup call CLEANUP;

	if bjm_data_$bj_operation = ""
	then bjm_data_$bj_operation = ME;
	else do;
	     p_code = dm_error_$bj_recursive_invoc;
	     goto MAIN_RETURN;
	end;

/* check parameters */

	if tix < 1 | tix > dm_system_data_$max_n_transactions
	then call ERROR_RETURN (dm_error_$no_current_transaction);


/* the transaction seems valid, so invoke the primitive to abandon the transaciton */

	call bj_adopt_txn$abandon (tix, tid);


	bjm_data_$bj_operation = "";
	bjm_data_$bj_exit_err = bjm_data_$bj_default_error_label;

MAIN_RETURN:
	return;

nonlocal_error_exit:
	call ERROR_RETURN (bjm_data_$bj_code);

%page;
/* Internal Procedures */

ERROR_RETURN:
	procedure (error_code);

dcl	error_code		fixed bin (35);

	call CLEANUP;
	p_code = error_code;
	goto MAIN_RETURN;

     end ERROR_RETURN;



CLEANUP:
     procedure ();

dcl  cleanup_code		        fixed bin (35);

	call bj_adopt_txn$force_abandon ();
	call bj_cleanup_tables$handler (cleanup_code);

	bjm_data_$bj_operation = "";
	bjm_data_$bj_exit_err = bjm_data_$bj_default_error_label;

	return;

     end CLEANUP;


%page;
%include dm_bj_static;
%page;
%include dm_bj_txt;
%page;
%include dm_bj_global_error_info;
%page;

     end bjm_abandon_transaction;
