/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION:

	bj_ci_zero has several entries for reading or writing CI zero of
     a before journal.  CI0 only contains the BJ header, never any before
     images or marks.  Note we do not need to copy the parameters as this
     is only called from a bjm_* module in the DM ring.
*/

/* HISTORY:

Written by Andre Bensoussan, 7/??/82
Modified:
10/15/82 by M. Pandolf:  to use file_manager_ to manipulate data management
	  system files.
10/24/83 by M. Pandolf:  to have get_bj_uid check to see that the dm file is
	  really a before journal.
06/07/84 by Lee Baldwin:  Renamed dm_error_$bj_header_bad to $bj_bad_header.
12/05/84 by M. Sharpe:  to fix format; to set/reset validation level around
	  the calls to file_manager_.
02/13/85 by Lee A. Newcomb:  Fixed to use BJ_PSTE_VERSION_2, use an
            ERROR_RETURN proc, use like to declare my_ci_parts and correctly
	  initialize it, and format declarations; added a description
	  to that blank section; removed the invalid entry bj_ci_zero.
*/

/* format: style2,ll79,ind3,^indprocbody,ifthendo,ifthen,^indnoniterdo,^inddcls,dclind5,idind35,linecom */
%page;
bj_ci_zero$get_header:
   proc (p_bj_file_oid, p_bj_header_ptr, p_bj_header_n_words);

/* DECLARATIONS */

/* Parameter */
dcl  (
     p_bj_file_oid			bit (36) aligned,
     p_bj_header_ptr		ptr,
     p_bj_header_n_words		fixed bin
     )				parameter;

/* Automatic */
dcl  (
     code				fixed bin (35),
     1 my_bj_header			automatic aligned like bj_header,
     1 my_ci_header			aligned like ci_header,
     saved_level			fixed bin
     )				automatic;

dcl  1 my_ci_parts			aligned,
       2 number_of_parts		fixed bin (17) init (1),
       2 must_be_zero		fixed bin init (0),
       2 part			dim (1) like ci_parts.part;

/* Based */
/* Builtin */
dcl  (addr, null, size)		builtin;

/* Condition */
dcl  cleanup			condition;

/* Constant */
dcl  ME				char (10) init ("bj_ci_zero")
				internal static options (constant);

/* Entry */
dcl  (
     bj_report_err			entry (fixed bin (35), char (*)),
     cu_$level_get			entry (fixed bin),
     cu_$level_set			entry (fixed bin),
     file_manager_$get		entry (bit (36) aligned,
				fixed bin (24) uns, ptr,
				fixed bin (35)),
     file_manager_$get_ci_header	entry (bit (36) aligned,
				fixed bin (24) uns,
				1 aligned like ci_header,
				fixed bin (35)),
     file_manager_$put_journal	entry (bit (36) aligned,
				fixed bin (24) uns, ptr,
				fixed bin (35)),
     get_ring_			entry () returns (fixed bin (3))
     )				external;

/* External */
dcl  dm_error_$bj_bad_header		fixed bin (35) external;
%page;
/* bj_ci_zero$get_header:		repeat for reader	*/
/*     entry (p_bj_file_oid, p_bj_header_ptr, p_bj_header_n_words);	*/

   call FILL_CI_PARTS (p_bj_header_ptr, p_bj_header_n_words);

   call cu_$level_get (saved_level);
   on cleanup call cu_$level_set (saved_level);

   call cu_$level_set (get_ring_ ());
   call file_manager_$get (p_bj_file_oid, 0, ci_parts_ptr, code);
   call cu_$level_set (saved_level);

   if code ^= 0 then
      call ERROR_RETURN (code);

   goto MAIN_RETURN;				/* all done */

/* end bj_ci_zero$get_header; */
%skip (4);
bj_ci_zero$put_header:
   entry (p_bj_file_oid, p_bj_header_ptr, p_bj_header_n_words);

   call FILL_CI_PARTS (p_bj_header_ptr, p_bj_header_n_words);

   call cu_$level_get (saved_level);
   on cleanup call cu_$level_set (saved_level);

   call cu_$level_set (get_ring_ ());
   call file_manager_$put_journal (p_bj_file_oid, 0, ci_parts_ptr, code);
   call cu_$level_set (saved_level);

   if code ^= 0 then
      call ERROR_RETURN (code);

   goto MAIN_RETURN;				/* no error */

/* end bj_ci_zero$put_header; */
%page;
bj_ci_zero$get_pf_uid:
   entry (p_bj_file_oid) returns (bit (36));

   my_ci_header.stamp.version = CI_HEADER_STAMP_VERSION_1;

   call cu_$level_get (saved_level);
   on cleanup call cu_$level_set (saved_level);

   call cu_$level_set (get_ring_ ());
   call file_manager_$get_ci_header (p_bj_file_oid, 0, my_ci_header, code);
   call cu_$level_set (saved_level);

   if code ^= 0 then
      call ERROR_RETURN (code);

   return (my_ci_header.id.uid);

/* end bj_ci_zero$get_pf_oid; */
%skip (4);
bj_ci_zero$get_bj_uid:
   entry (p_bj_file_oid) returns (bit (36));

   call bj_ci_zero$get_header (p_bj_file_oid, addr (my_bj_header),
        size (my_bj_header));

   if my_bj_header.version ^= BJ_PSTE_VERSION_2 then
      call ERROR_RETURN (dm_error_$bj_bad_header);

   return (my_bj_header.bj_uid);

/* end bj_ci_zero$get_bj_uid; */
%page;
MAIN_RETURN:
   return;
%skip (4);
ERROR_RETURN:
   proc (er_p_code);

dcl  er_p_code			fixed bin (35) parameter;

   call bj_report_err (er_p_code, ME);
   return;					/* should not get this return */

   end ERROR_RETURN;
%skip (4);
FILL_CI_PARTS:
   proc (fcp_p_bj_header_ptr, fcp_p_bj_header_n_words);

dcl  (
     fcp_p_bj_header_ptr		ptr,
     fcp_p_bj_header_n_words		fixed bin
     )				parameter;

/* Some external entries need a ci_parts structure filled	*/
/* in and by definition there is only one part, so we	*/
/* resort to a common proc.				*/

   ci_parts_ptr = addr (my_ci_parts);

   ci_parts.number_of_parts = 1;
   ci_parts.part (1).offset_in_bytes = 0;
   ci_parts.part (1).length_in_bytes = p_bj_header_n_words * 4;
						/* file_manager_ requires byte number */
   ci_parts.part (1).local_ptr = p_bj_header_ptr;

   return;

   end FILL_CI_PARTS;
%page;
%include dm_ci_parts;
%page;
%include dm_ci_header;
%page;
%include dm_bj_header;
%page;
%include dm_bj_pste;
%page;
%include dm_bj_static;


   end bj_ci_zero$get_header;
