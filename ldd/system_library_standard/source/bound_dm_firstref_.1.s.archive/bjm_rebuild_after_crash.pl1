/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* format:  style4,indattr,ifthenstmt,ifthen,idind33,^indcomtxt */

bjm_rebuild_after_crash:
     proc (Txn_recovery_data_p, Code);

/*  DESCRIPTION:
     This program overwrites the current DMS bootload bj_txt with data
   derived from the transactive recovery data passed.  Its opposite entry,
   bjm_clean_txn_tables, is in this program and totally clears the bj_txt.
   These are meant to be called by
   transaction_manager_$recover_after_crash after it has acquired a list
   of the transactions to rollback or finish (when multi-phase commit is
   implemented), and when it is finished trying to recover them (in case
   some could not be finished).
*/
/* HISTORY:

Written by Lee A. Newcomb, 12/17/82.
Modified:
03/01/83 by L. A. Newcomb: to not destroy bj_txt.max_n_entries value.
03/07/83 by L. A. Newcomb: clear txt entries correctly (nulling tid).
04/08/83 by L. A. Newcomb:  the PST entry for the journal being rebuilt now
            has its n_txn value set for consistency checks in bj_storage* to
            work properly.
12/05/83 by L. A. Newcomb:  renamed before_journal_manager_static_ to
            bjm_data_ and moved some cells in dm_data_ to bjm_data_.
*/
%page;
/* DECLARATIONS */

dcl  (						/* parameters */
     Txn_recovery_data_p	        ptr,		/* INPUT: loc. of txn data needed by recovery */
     Code			        fixed bin (35)	/* OUTPUT: normal error code, recovery fails if ^= 0 */
     )			        parameter;

dcl  (						/* automatic */
     entry_called		        char (32) aligned,
     idx			        fixed bin		/* do loop counter for clearing txn tables */
     )			        automatic;

dcl						/* PL/I things */
     unspec		        builtin,
     cleanup		        condition;

dcl						/* non-error external statics */
     dm_data_$bj_txt_ptr	        ptr		/* loc. of curr. bootload's bj_txt */
			        ext static;

dcl  (						/* error codes */
     dm_error_$bj_recursive_invoc,
     error_table_$unimplemented_version
     )			        fixed bin (35) ext static;

dcl						/* external entries called */
     bj_cleanup_tables$handler        entry (fixed bin (35)),
     bj_pst_search		        entry (bit (36) aligned) returns (ptr);
%page;
/* initialize output parameter */

	Code = 0;

/* check we are passed a version we understand.  We assume all bj_txt */
/* entries have the same version until the txt gets a version itself. */
/* Must make sure we have some entries, BTW. */

	if Txn_recovery_data_p -> bj_txt.version ^= BJ_TXT_VERSION_1 then do;
	     Code = error_table_$unimplemented_version;
	     return;
	end;
	if Txn_recovery_data_p -> bj_txt.n_entries_used = 0 then
	     return;				/* nothing to do */

/* Use standard BJM entry sequence, just to be sure.  Some modification has */
/* been made to make use of two entries easier */

	entry_called = "bjm_rebuild_after_crash";
	on cleanup
	     call clean_up ("1"b);
	call common_entry_sequence (entry_called, Code);
	if Code ^= 0 then
	     return;


/* Now actually do the rebuilding of the bj_txt.  Since we currently use */
/* the txt data structure, just do a copy of the useful entries. */
	bj_txt_ptr = dm_data_$bj_txt_ptr;
	bj_txt.n_entries_used = Txn_recovery_data_p -> bj_txt.n_entries_used;

	do idx = 1 to bj_txt.n_entries_used;
(nosubrg):
	     bj_txt.entry (idx) = Txn_recovery_data_p -> bj_txt.entry (idx);
	end;

/* now set the # of txns active in this journal in the PST entry */
	bj_pst_search (bj_txt.entry (1).bj_uid) -> bj_pste.n_txn = bj_txt.n_entries_used;

/* Done, go through standard BJM exit sequence. */

	call clean_up (""b);
	return;


/* end bjm_rebuild_after_crash entry */
%page;
bjm_clear_txn_tables:
     entry (Code);

/* Just zero out the entire bj_txt */
/* first initialize output parameter */

	Code = 0;


/* do standard BJM entry sequence */

	entry_called = "bjm_clear_txn_tables";
	on cleanup
	     call clean_up ("1"b);
	call common_entry_sequence (entry_called, Code);
	if Code ^= 0 then
	     return;


/* Now clear the tables.  It turns out the clean_up internal proc. does */
/* this for us anyway. */

	call clean_up (""b);
	return;


/* end bjm_clean_txn_tables entry */
%skip (6);
/* INTERNAL PROCEDURES */

common_entry_sequence:
     proc (Entry_called, Int_code);

/* simple proc. to do the things we're supposed to do in a BJM entry */

	if bjm_data_$bj_operation = "" then
	     bjm_data_$bj_operation = Entry_called;
	else Int_code = dm_error_$bj_recursive_invoc;

	return;

dcl  (						/* common_entry_sequence parameters */
     Entry_called		        char (*) aligned,
     Int_code		        fixed bin (35)
     )			        parameter;

     end common_entry_sequence;
%page;
clean_up:
     proc (Cleanup_condition);

/* clear the txt if necessary and do standard BJM exit sequence */

	if Cleanup_condition | entry_called = "bjm_clear_txn_tables" then do;
	     dm_data_$bj_txt_ptr -> bj_txt.entry.tid = ""b;
	     dm_data_$bj_txt_ptr -> bj_txt.n_entries_used = 0;
	end;


/* Standard exit sequence */

	if bjm_data_$bj_operation = entry_called then do;

	     call bj_cleanup_tables$handler (Code);
	     bjm_data_$bj_exit_err =
		bjm_data_$bj_default_error_label;
	     bjm_data_$bj_operation = "";
	end;

	return;


dcl  Cleanup_condition	        bit (1) aligned parameter;

     end clean_up;

/* INCLUDE FILES start next page */
%page;
%include dm_bj_txt;
%page;
%include dm_bj_pst;
%page;
%include dm_bj_pste;
%page;
%include dm_bj_global_error_info;


     end bjm_rebuild_after_crash;
