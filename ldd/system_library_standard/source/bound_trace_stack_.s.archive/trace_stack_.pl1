/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* format: style4,delnl,insnl,tree,ifthenstmt,indnoniterend */
trace_stack_:
     procedure (stackp, mode, depth, stream);

/* TRACE_STACK_ - Subroutine to produce debugging output on console.
   1. explanation of fault
   2. source line which caused fault (if determinable, otherwise faulting instruction)
   3. machine registers at time of fault
   4. listing of stack frames, in reverse order from faulting frame.
   4.a. segment name and entry point name
   4.b. source line or instruction
   4.c. arguments to stack frame
   4.d. enabled on-units
   4.e. octal dump of frame

   The original idea for this program came from a remark of Bob Daley's.
   This program owes a great deal to Steve Webber, Melanie Weaver, and Barry Wolman.
   THVV 7/70 */
/**** Modified 1985-01-15, BIM: pass signal_io_, max number of errors permitted. */
/**** Modified 1985-03-06, BIM: added subroutine that does history regs. */

dcl  stackp ptr,					/* ptr to highest frame to trace from */
     mode fixed bin,				/* output mode */
     depth fixed bin,				/* number of frames to trace */
     stream char (32) aligned;			/* output stream */

dcl  ilc uns fixed bin (18),				/* offset from top of segment where instruction is */
     (max_depth, cur_depth) fixed bin (17),
     target_sp ptr,
     argl fixed bin,
     gptr ptr,					/* pointer for octal dump */
     ec fixed bin (35),
     line_no char (16),
     strp ptr;					/* pointer to stuff for interpret_ptr_ */
dcl  fault_count fixed bin;
dcl  abort_label label variable;
dcl  ssptr pointer;
dcl  a_hr_switch fixed bin;
dcl  hr_switch fixed bin;
dcl  iocb ptr;

dcl  (
     NO_HREGS init (0),
     HREGS init (1),
     HREGS_LONG init (2)
     ) fixed bin int static options (constant);

dcl  MAX_FAULT_COUNT fixed bin init (4000) int static options (constant);

dcl  (addr, addrel, binary, fixed, hbound, lbound, null, ptr, rel, stackframeptr) builtin;

dcl  (any_other, cleanup) condition;

dcl  dumary (8) fixed bin based (gptr);

dcl  1 condinfo aligned like condition_info;

dcl  print_source_line_ entry (ptr, char (32) aligned),
     find_source_line_ entry (ptr, char (*), char (*), char (*), fixed bin (21), fixed bin (21), fixed bin (35)),
     is_condition_frame_ entry (ptr) returns (bit (1) aligned),
     find_condition_info_ entry (ptr, ptr, fixed bin (35)),
     dump_machine_cond_ entry (ptr, ptr, char (32) aligned, fixed bin),
     interpret_ptr_$frame_owner entry (ptr, ptr, ptr),
     list_frame_args_ entry (ptr, char (32) aligned),
     list_onunits_ entry (ptr, char (32) aligned),
     ioa_$ioa_stream entry options (variable);
dcl  condition_interpreter_ entry (ptr, ptr, fixed bin (21), fixed bin, ptr, char (*), ptr, ptr);
dcl  continue_to_signal_ entry (fixed bin (35));
dcl  get_system_free_area_ entry () returns (ptr);
dcl  hran_$hranl entry (pointer, pointer, bit (1));
dcl  iox_$find_iocb entry (char (*), ptr, fixed bin (35));
%page;

	hr_switch = NO_HREGS;
	go to COMMON;

hregs:
     entry (stackp, mode, depth, stream, a_hr_switch);

	hr_switch = a_hr_switch;
COMMON:
	iocb = null ();
	call iox_$find_iocb ((stream), iocb, (0));
	condinfo.version = 1;
	sp, target_sp = stackp;			/* copy argument - initial stack level */
	if sp = null () then sp, target_sp = stackframeptr ();
	max_depth = depth;
	if max_depth < 0 then max_depth = 100000;
	strp = addr (strbuf);

	abort_label = abort_trace;
	on any_other call fault_handler;
	fault_count = 0;

/* This section is the actual back-trace loop on the stack.
   For each frame, we call "interpret_ptr_$frame_owner" to find the owner of the frame,
   and then "print_source_line_" to attempt to print the source line, or the faulting instruction.
   Then we call "list_frame_args_" to list the arguments to the frame. */

	do cur_depth = 0 to max_depth while (sp ^= null ());
	     condinfo.mc_ptr, condinfo.user_loc_ptr = null ();
	     condinfo.condition_name = "";
	     struc.segment, struc.entryn = "?";
	     struc.offset, struc.comment, struc.opname = "";
	     line_no = "";

	     abort_label = no_mc;
	     if is_condition_frame_ (sp) then do;
		call find_condition_info_ (sp, addr (condinfo), ec);
		call dump_machine_cond_ (addr (condinfo), sp, stream, mode);
		if condinfo.mc_ptr ^= null & hr_switch >= HREGS then do;
		     ssptr = addwordno (condinfo.mc_ptr, -8);
						/* see signaller_stack.incl.pl1 */
		     if hr_switch = HREGS
		     then call hran_$hranl (addr (ssptr -> signaller_stack.history_registers), iocb, "0"b);
		     if hr_switch = HREGS_LONG
		     then call hran_$hranl (addr (ssptr -> signaller_stack.history_registers), iocb, "1"b);
		     end;
		end;
no_mc:
	     if cur_depth < max_depth then do;
		abort_label = no_ilc;
		if condinfo.mc_ptr = null () then do;
		     ilc = binary (rel (stack_frame.return_ptr), 18);
		     if ilc > 0 then ilc = ilc - 1;	/* Get call-out location. */
		     condinfo.user_loc_ptr = ptr (stack_frame.return_ptr, ilc);
						/* STCD info is not a pointer */
		     end;

no_ilc:
		abort_label = no_owner;
		call interpret_ptr_$frame_owner (condinfo.user_loc_ptr, sp, strp);
		call find_source_line_ (strp, line_no, (""), (""), (0), (0), ec);
no_owner:
		abort_label = no_brief;
		call ioa_$ioa_stream (stream, "^p^13t^a^a|^a ^a ^a ^a", target_sp, struc.segment, struc.entryn,
		     struc.offset, struc.comment, line_no, struc.opname);

no_brief:
		if mode > 0 then do;
		     abort_label = no_source;
		     if struc.text_ptr ^= null ()	/* skip source if looks bad. */
		     then call print_source_line_ (strp, stream);
no_source:
		     abort_label = no_args;
		     call list_frame_args_ (sp, stream);/* what are the arguments */
no_args:
		     abort_label = no_units;
		     call list_onunits_ (sp, stream);	/* what handlers */

/* This next section of code dumps the stack frame in octal.
   Useful only under an "fo", I think. */

no_units:
		     if mode > 1 then do;
			abort_label = no_long;
			gptr = sp;		/* yes. */
			argl = 0;
			do while (rel (gptr) < rel (stack_frame.next_sp));
						/* loop through 8 words at a time */
			     call ioa_$ioa_stream (stream, "^6o ^5o ^w ^w ^w ^w ^w ^w ^w ^w",
				fixed (rel (gptr), 18), argl, dumary);
			     argl = argl + 8;
			     gptr = addrel (gptr, 8);
			end;
			end;
no_long:
		     abort_label = next_frame;
		     call ioa_$ioa_stream (stream, "");
		     end;
		end;
next_frame:
	     abort_label = abort_trace;
	     sp, target_sp = sp -> stack_frame.prev_sp;
	end;
	return;


abort_trace:
	revert any_other;				/* If we gave up, we gave up */
	call ioa_$ioa_stream (stream, "Trace aborted.");
	return;
%page;
fault_handler:
     procedure;

dcl  m_ptr ptr;
dcl  m_len fixed bin (21);
dcl  msg char (m_len) based (m_ptr);

dcl  i fixed bin;
dcl  code fixed bin (35);
dcl  1 ci aligned like condition_info;

dcl  continue_conditions (14) char (32) static options (constant)
	init ("endpage", "stringsize", "underflow", "command_error", "finish", "command_question", "trm_", "sus_",
	"cput", "alrm", "wkp_", "mme2", "quit", "signal_io_");

	m_ptr = null ();
	on cleanup
	     begin;
	     if m_ptr ^= null () then do;
		free msg;
		m_ptr = null ();
		end;
	end;
	on any_other goto abort_trace;
	fault_count = fault_count + 1;
	if fault_count > MAX_FAULT_COUNT then goto abort_trace;

	call find_condition_info_ (null (), addr (ci), code);
	if code ^= 0 then do;
continue:
	     call continue_to_signal_ ((0));
	     return;
	     end;

	if ci.condition_name = "cleanup" then return;
	do i = lbound (continue_conditions, 1) to hbound (continue_conditions, 1);
	     if ci.condition_name = continue_conditions (i) then goto continue;
	end;

	call ioa_$ioa_stream (stream, "^a condition during trace...", ci.condition_name);
	call condition_interpreter_ (get_system_free_area_ (), m_ptr, m_len, 1, ci.mc_ptr, (ci.condition_name),
	     ci.wc_ptr, ci.info_ptr);
	call ioa_$ioa_stream (stream, "^a", msg);
	free msg;
	goto abort_label;

     end fault_handler;
%page;
%include stack_frame;
%include interpret_ptr_struc;
%include condition_info;
%include signaller_stack;

     end trace_stack_;
