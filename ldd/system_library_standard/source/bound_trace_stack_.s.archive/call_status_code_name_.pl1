
          /*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */
	/*									        */
	/* Name: call_status_code_name_						        */
	/*									        */
	/* Function:  Returns the entry point name corresponding to a Multics status code.	        */
	/*									        */
	/* Syntax:								        */
	/*   dcl call_status_code_name_ entry (fixed bin(35)) returns(char(128) var);		        */
	/*									        */
	/*   code_name = call_status_code_name_ (code);					        */
	/*									        */
	/* Credits: This routine was extracted from bound_probe_1_.s.archive::probe_display_data_.pl1     */
	/*									        */
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

/****^  HISTORY COMMENTS:
  1) change(2016-07-18,GDixon), approve(2016-10-13,MCR10014),
     audit(2016-10-13,Swenson), install(2016-10-13,MR12.6f-0002):
     Initial version based entirely on the get_status_code internal procedure
     of probe_display_data_.pl1.
                                                   END HISTORY COMMENTS */

call_status_code_name_:
  proc (P_code) returns (char (128) varying);

  dcl P_code		fixed bin (35);

  dcl 1 def		aligned,
       2 next_def		ptr,
       2 last_def		ptr,
       2 block_ptr		ptr,
       2 section		char (4) aligned,
       2 offset		fixed bin,
       2 entrypoint		fixed bin,
       2 defname		char (32) aligned;

  dcl seg_word		(0:last_word) fixed bin (35) based (entry_ptr);
  dcl packed_ptr		ptr unaligned based;
  dcl based_code		fixed bin (35) based;

  dcl (segment_name, offset_name)
			char (32);
  dcl (entry_ptr, ptr1, ptr2) ptr;
  dcl search_sw		bit (1);
  dcl type		fixed bin (2);
  dcl i			fixed bin;
  dcl (bit_count, last_word)	fixed bin (24);
  dcl (code, search_code)	fixed bin (35);

  dcl error_table_$		fixed bin (35) ext;

  dcl decode_definition_	entry (ptr, ptr) returns (bit (1) aligned);
  dcl decode_definition_$init entry (ptr, fixed bin (24));
  dcl hcs_$make_ptr		entry (ptr, char (*), char (*), ptr,
			fixed bin (35));
  dcl hcs_$status_mins	entry (ptr, fixed bin (2), fixed bin (24),
			fixed bin (35));
  dcl interpret_ptr_	entry (ptr, ptr, ptr);

  dcl (addr, divide, null, ptr, rtrim) builtin;
  

  if P_code = 0
    then
         return ("0");

  entry_ptr = addr (P_code) -> packed_ptr;

  if ptr (entry_ptr, 0) = ptr (null, 0) then do;
				/* system's error_table_ */

      search_code = P_code;
ERROR_TABLE:
      call hcs_$make_ptr (null, "error_table_", "", entry_ptr, (0));
      if entry_ptr = null
        then
	   return ("");

      call hcs_$status_mins (entry_ptr, type, bit_count, code);
      if code ^= 0
        then
	   return ("");

      last_word = divide (bit_count, 36, 24, 0) - 1;
      do i = 0 to last_word while (search_code ^= seg_word (i));
      end;
      if i <= last_word
        then entry_ptr = ptr (entry_ptr, i);
        else
	   return ("");

      strp = addr (strbuf);
      call interpret_ptr_ (entry_ptr, null, strp);
      return (rtrim (struc.segment) || rtrim (struc.entryn));
    end;

  else if ptr (entry_ptr, 0) = addr (error_table_$) then do;
      entry_ptr = ptr (null, rel (entry_ptr));
      addr (search_code) -> packed_ptr = entry_ptr;
      search_code = search_code + 111000000000000000000000000000000b;
      go to ERROR_TABLE;
    end;

  else do;			/* another error table */
    ptr1 = ptr (entry_ptr, 0);
    call hcs_$status_mins (ptr1, type, bit_count, code);
    if code ^= 0
      then
	 return ("");

    segment_name, offset_name = "";
    call decode_definition_$init (ptr1, bit_count);
    search_sw = ^decode_definition_ (ptr1, addr (def));
    do while (search_sw);
      if def.section = "segn"
        then segment_name = def.defname;
      else if def.section = "link" | def.section = "stat" then do;
	offset_name = def.defname;
	call hcs_$make_ptr (null, segment_name, offset_name, ptr2, code);
	if ptr2 ^= null
	  then
	       if ptr2 -> based_code = P_code
	         then search_sw = "0"b;
        end;
      if search_sw then do;
	offset_name = "";
	search_sw = ^decode_definition_ (def.next_def, addr (def));
        end;
    end;

    if ptr2 ^= null
      then
	 if ptr2 -> based_code = P_code
	   then
	        return (rtrim (segment_name) || "$" || rtrim (offset_name));
    return ("");
  end;
%page;
  dcl strp		ptr;

%include interpret_ptr_struc;

  end call_status_code_name_;
