/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(84-11-29,Ranzenbach), approve(86-03-12,MCR7144),
     audit(86-03-12,GWMay), install(86-05-01,MR12.0-1051):
     added version 2 entry_desc_info, allowing the processing of
     archive components.
                                                   END HISTORY COMMENTS */


get_entry_arg_descs_$info:
	proc (entry_ptr, nargs, descps, entry_desc_info_ptr, code);

 	ret_info = "1"b;
	if entry_desc_info.version ^= entry_desc_info_version_1 &
	   entry_desc_info.version ^= entry_desc_info_version_2  then do;
	     code = error_table_$unimplemented_version;
	     return;
	     end;
	entry_desc_info.flags = "0"b;
	
	
get_entry_arg_descs_:
	entry (entry_ptr, nargs, descps, code);

/* GET_ENTRY_ARG_DESCS_ - Extract descriptors for procedure parameters.

   If entry_ptr points to an entry sequence or to a segdef, this procedure will
   attempt to extract a list of pointers to parameter descriptors for the entrypoint.
   The expected number of arguments and pointers to descriptors for the arguments will be returned.
   This only works for standard object segments.

   based on "get_entry_name_" by Melanie Weaver
   THVV 1/74
   modified 75-08-04 by M. Weaver to handle descriptor pointers in text
   modified 79-05-09 by J. Falksen and G. Dixon to add the two "info" entries
   */

dcl  entry_ptr ptr;					/* ptr to entry sequence (input)		*/
dcl  nargs fixed bin;				/* Number of arguments.			*/
dcl  descps (*) ptr;				/* array of ptrs to descriptors.		*/
dcl  code fixed bin (35);				/* status code (output)			*/
	
dcl (addwordno, addr, addrel, bin, min, null, ptr, rel, hbound, size) builtin;

dcl (i, j) fixed bin;
dcl  type fixed bin (2);
dcl  mode fixed bin (5);
dcl  bitcnt fixed bin (24);
dcl  no_descrs bit(1);
dcl  ret_info bit(1) init("0"b);			/* Off by default.  Turned on for $info entries.	*/
	
dcl (error_table_$nodescr,
     error_table_$moderr,
     error_table_$dirseg,
     error_table_$unimplemented_version) fixed bin (35) ext;

dcl (segptr, np, defp, def_ptr, txp,  descpp) ptr;

dcl  hcs_$status_mins entry (ptr, fixed bin (2), fixed bin (24), fixed bin (35));
dcl  hcs_$fs_get_mode entry (ptr, fixed bin (5), fixed bin (35));
dcl  object_info_$display ext entry (ptr, fixed bin (24), ptr, fixed bin (35));
dcl  component_info_$offset ext entry (ptr, fixed bin (18), ptr, fixed bin (35));
dcl  condition_ entry (char (*), entry);

dcl  entry_desc_info_version_1	fixed bin int static options(constant) init(1);

%include entry_sequence_info;

dcl 1 entry_sequence_w2 aligned like entry_sequence.word2 based (entry_sequence_w2p);
dcl entry_sequence_w2p ptr;

/* declaration of non class 3 definition (new format) in definition.incl.pl1 */
%include definition;

dcl 1 oi aligned like  object_info;

%include object_info;
%include component_info;

/* ====================================================== */

/* initialize some stuff */

	nargs = -1;

OLD_ENTRY_SEQUENCE:
	if bin (rel (entry_ptr), 18) = 0 then go to no_defs;
						/* Entry point at seg|0 is not preceded		*/
						/*   by a standard entry sequence.		*/
						/* Entry point at seg|1 is preceded by entry flags*/
						/*   but has no descriptors.			*/
	segptr = ptr (entry_ptr, 0);			/* get ptr to base of seg */
	def_ptr = segptr;				/* till we get something better */
	call hcs_$status_mins (segptr, type, bitcnt, code); /* get type and bitcnt */
	if code ^= 0 then return;
	if type = 2 then do;
	     code = error_table_$dirseg;		/* dirs don't have entry points */
	     return;
	end;
	call condition_ ("any_other", catch);		/* Guard against access faults. */
	call hcs_$fs_get_mode (segptr, mode, code);	/* get mode wrt validation level */
	if code ^= 0 then return;			/* don't see how this could happen */
	if mode < 4				/* no read or execute access			*/
	     then do;				/* can't see defs (probably none anyway)	*/
		code = error_table_$moderr;
		return;
	     end;

	if entry_desc_info.version = entry_desc_info_version_2 then do;
	     if entry_desc_info.object_ptr ^= null then do;/* previously assumed offset 0...		*/
		segptr = entry_desc_info.object_ptr;	/* user knows better...			*/
		def_ptr = segptr;
	     end;
	     if entry_desc_info.bit_count > 0 then bitcnt = entry_desc_info.bit_count;
	end;

	oi.version_number = object_info_version_2;
	call object_info_$display (segptr, bitcnt, addr (oi), code); /* may need def ptr */
	if code ^= 0 then return;
	def_ptr = oi.defp;				/* now we have ptr to actual defs */
	txp = oi.textp;

	i = bin (rel (entry_ptr), 18);		/* get offset of input ptr */
	j = bin (rel (oi.textp), 18);			/* get offset of beginning of text */
	if i < j then go to no_defs;			/* If entry above text begin, or */
	if i > j+oi.tlng then go to no_defs;		/* .. if entry below end of text, fail. */

	if oi.compiler ^= "binder" then		/* this compiler generated all entries */
	     if ^oi.format.standard then go to no_defs;	/* This entry must be in std object. */
	     else;
	else do;					/* consult the bind map for this component */
	     call component_info_$offset (segptr, bin (rel (entry_ptr), 18), addr (ci), code);
	     if code ^= 0 then go to no_defs;		/* offset is illegal. fail. */
	     if ^ci.standard then go to no_defs;	/* Must be a standard object. */
	end;

	entry_sequence_w2p = addrel (entry_ptr, -1);	/* get ptr to entry sequence info		*/
	
	if ret_info
	then entry_desc_info.flags = entry_sequence_w2.flags;

	if bin (entry_sequence_w2.def_relp, 18) > oi.dlng then do;
no_defs:	     code = error_table_$nodescr;		/* not in def section			*/
	     return;
	end;
	defp = addrel (oi.defp, entry_sequence_w2.def_relp);	/* get ptr to entry's def		*/
	if ^defp -> definition.new then go to no_defs;	/* Must be new format.			*/
	if ^defp -> definition.entry then go to no_defs;	/* Must have entrypoint flag on. 		*/
	nargs = 0;				/* Assume proc has no args.			*/
	
common:
	if entry_sequence_w2.flags.revision_1		/* descr ptrs are in text if at all.		*/
	then do;
	     if ^entry_sequence_w2.flags.has_descriptors then goto no_defs;
	     np = addrel (entry_ptr, -2);		/*   It has descriptors, so safe to reference	*/
						/*   the descriptor offset now.		*/
	     descpp =  addwordno (segptr, bin (np -> entry_sequence.descr_relp_offset));
	     no_descrs = "0"b;
	end;
	else if defp ^= null then do;			/* see if there are descr ptrs in def. section	*/
	     if ^defp -> definition.argcount then go to no_defs;  /* no parameter info			*/
	     if ^defp -> definition.descriptors
	     then no_descrs = "1"b;
	     else no_descrs = "0"b;
	     descpp = addrel(defp, size(definition));	/* descr array  appended to def		*/
	end;
	else go to OLD_ENTRY_SEQUENCE;		/* defp = null implies that we were entered 	*/
						/* via $text_only or $text_only_info entry point	*/
						/* with version 0 entry sequence in which arg	*/
						/* descriptors are located in definition section. */
						/* Must go through rigor of calling object_info_	*/
						/* in this case, even if given a text entry point.*/
	nargs = bin (descpp ->  parm_desc_ptrs.n_args);	/* Return number of  arguments expected		*/
	num_descs = nargs;

	if no_descrs then				/* No descriptors, but argcount was available.	*/
	     descps (*) = null;
	else do i = 1 to min (nargs, hbound (descps, 1));	/* Return pointers to descriptors.		*/
						/* ..  which are in the text section		*/

	     descps (i) = addwordno (txp, bin (descpp -> parm_desc_ptrs.descriptor_relp (i)));
	end;
	return;					/* Success. */



text_only_info: entry (entry_ptr, nargs, descps, entry_desc_info_ptr, code);

 	ret_info = "1"b;
	if entry_desc_info.version ^= entry_desc_info_version_1 &
	   entry_desc_info.version ^= entry_desc_info_version_2  then do;
	     code = error_table_$unimplemented_version;
	     return;
	     end;
	entry_desc_info.flags = "0"b;


text_only: entry (entry_ptr, nargs, descps, code);

/* assume entry ptr points  to a text entry sequence; do no validation */

	code = 0;
	nargs = -1;
	defp = null;				/* don't want ptr to definition		*/
	txp = ptr (entry_ptr, 0);
	if bin (rel (entry_ptr), 18) = 0 then go to no_defs;
						/* Entry point at seg|0 is not preceded		*/
						/*   by a standard entry sequence.		*/
						/* Entry point at seg|1 is preceded by entry flags*/
						/*   but has no descriptors.			*/
	entry_sequence_w2p = addrel (entry_ptr, -1);	/* get ptr to entry sequence word 2.		*/

	if ret_info
	then entry_desc_info.flags = entry_sequence_w2.flags;
	go to common;

catch:	proc (mcptr, condname, wcptr, infoptr, continue);

dcl (mcptr, wcptr, infoptr) ptr;
dcl  condname char (*);
dcl  continue bit (1) aligned;

	     if condname = "quit" then go to pass;
	     if condname = "alrm" then go to pass;
	     if condname = "cput" then go to pass;
	     if condname = "program_interrupt" then go to pass;
	     if condname = "finish" then go to pass;
	     if condname = "storage" then go to pass;
	     if condname = "mme2" then do;
pass:		continue = "1"b;
		return;
	     end;

	     if condname ^= "cleanup" then go to no_defs; /* probably access fault;
						   in any case, forget it */
	     return;
	end catch;

     end get_entry_arg_descs_$info;

