/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */


/****^  HISTORY COMMENTS:
  1) change(2017-02-15,GDixon), approve(2017-02-18,MCR10030),
     audit(2017-02-25,Swenson), install(2017-02-25,MR12.6f-0019):
     Correct bug in struc.ring value.  Return struc.bitoff, if nonzero bit
     number is found in the pointer.
  2) change(2017-02-18,GDixon), approve(2017-02-18,MCR10030),
     audit(2017-02-25,Swenson), install(2017-02-25,MR12.6f-0019):
     Fully initialize return structure upon entry to the subroutine. Use
     its.incl.pl1 structures to define format of a valid ITS pointer. Reorder
     code to verify that input is either an ITS or FT2 pointer before further
     examining pointer contents. Correct pointer passed to interpret_link_ by
     interpret_ptr_. Correct determination of highest hardcore segment number.
                                                   END HISTORY COMMENTS */

interpret_ptr_:
     procedure (a_ptr, a_framep, strp);

/* INTERPRET_PTR_ - find out as much as possible about a pointer.

   This program returns printable information about an input pointer.
   If a stack frame pointer or machine conditions pointer is also supplied,
   the program finds out information about the owner of the given stack frame,
   and remarks that the fault may not have occurred in the frame owner.
*/

/* modified 24 July 1975 by M. Weaver for separate static */
/* Modified 7/76 to prevent a fault while interpreting a bad pointer */
/* Modified March 1980 by C. Hornig to find source line */
/* Changed to use interpret_link_info.incl.pl1 05/12/83 S. Herbst */

dcl a_ptr ptr,					/* ptr to be interpreted (input) */
    a_framep ptr,					/* ptr to associated stack frame, or null (input) */
    strp ptr;					/* ptr to return structure (input) */

dcl bcs char (54) based (in_ptr);
dcl bit_72 bit (72) based;				/* Used to avoid pointer check while copying the argument */

dcl 1 condinfo aligned like condition_info;		/* structure returned by find_condition_info_ */
dcl 1 oi aligned like object_info;

dcl 1 situation aligned,
      2 bad_frame bit (1) unal,
      2 exists_ppr bit (1) unal,
      2 ppr_is_owner bit (1) unal,
      2 ppr_is_ops bit (1) unal,
      2 caller_is_owner bit (1) unal,
      2 entry_ptr_invalid bit (1) unal,
      2 ret_ptr_is_ops bit (1) unal,
      2 pad bit (29) unal;

dcl 1 auto_interpret_link_info aligned like interpret_link_info;

dcl xp ptr,					/* ptr to our copy of the a_ptr */
    frame_owner_sw bit (1) aligned init ("1"b),
    coptr ptr init (null),
    coflg bit (1) init ("0"b),
    in_ptr ptr,					/* copied arg */
    framep ptr,					/* ptr to stack frame */
    hcsct fixed bin,				/* highest hardcore segment */
    highct fixed bin,				/* highest segment number */
    txtp ptr,					/* ptr into text */
    rings (3) fixed bin (6),				/* used when checking accessibility */
    lev fixed bin,					/* ... validation level */
    mode fixed bin (5),				/* rewa mode of segment */
    type fixed bin (2),				/* dir, seg, link */
    (bc, bc1) fixed bin (24),				/* bitcount */
    bmp ptr,					/* bindmap ptr */
    sblkp ptr,
    namp ptr,					/* component name */
    naml fixed bin,
    based_name char (naml) based (namp),		/* component name (in defs of bound seg) */
    (i, j) fixed bin,				/* temps */
    dirn char (168) aligned,				/* dirname where segment reside */
    ename char (32) aligned,				/* temp entry name */
    pl1_op_name char (32) aligned,			/* operator name */
    segn char (32) aligned,				/* file-system name for seg */
    segno fixed bin (18),
    adjusted_offset fixed bin (18),
    section char (8) aligned,
    lang char (8) aligned,
    op_seg_name char (32) aligned,
    ec fixed bin (35),				/* file-system error code */
    ctmp char (65);

dcl condition_ entry (char (*), entry),
    get_entry_name_ entry (ptr, char (*) aligned, fixed bin (18), char (8) aligned, fixed bin (35)),
    is_condition_frame_ entry (ptr) returns (bit (1)),
    find_condition_info_ entry (ptr, ptr, fixed bin (35)),
    find_nonobject_info_
         entry (ptr, char (*), fixed bin (18) aligned, char (8) aligned, fixed bin (18) aligned, fixed bin (35)),
    stack_frame_exit_ entry (ptr, ptr, ptr, bit (1), ptr, char (32) aligned, ptr),
    find_operator_name_ entry (char (*) aligned, ptr, char (32) aligned),
    cu_$level_get entry (fixed bin),
    hcs_$fs_get_brackets entry (ptr, fixed bin (5), (*) fixed bin (6), fixed bin (35)),
    hcs_$high_low_seg_count entry (fixed bin, fixed bin),
    ring0_get_$name entry (char (*) aligned, char (*) aligned, ptr, fixed bin (35)),
    hcs_$fs_get_path_name entry (ptr, char (*) aligned, fixed bin, char (*) aligned, fixed bin (35)),
    hcs_$status_mins entry (ptr, fixed bin (2), fixed bin (24), fixed bin (35)),
    object_info_$display entry (ptr, fixed bin (24), ptr, fixed bin (35)),
    get_bound_seg_info_ entry (ptr, fixed bin (24), ptr, ptr, ptr, fixed bin (35)),
    component_info_$offset entry (ptr, fixed bin (18), ptr, fixed bin (35)),
    interpret_link_ entry (ptr, ptr, fixed bin (35)),
    ioa_$rsnnl entry options (variable);

dcl LEGAL char (96) int static init			/* Printables except PAD, but with BS */
         (" !""#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~");

dcl (addr, addrel, baseno, baseptr, binary, bit, char, fixed, ltrim, null, ptr, rel, substr, verify) builtin;

/* ------------------------------------------------------ */

	frame_owner_sw = "0"b;
	go to start;

frame_owner:
     entry (a_ptr, a_framep, strp);

start:
	if strp = null then return;			/* initialization. check args */

	struc.comment, struc.segment, struc.entryn, struc.offset, struc.opname, struc.ring, 
	     struc.bitoff, struc.modifier, struc.compiler = "";
	struc.std_flag, struc.xpad = ""b;		/* Initialize everything in the return structure. */
	struc.symbolp, struc.text_ptr, struc.stack_ptr = null();
	struc.instruction_counter, struc.sourcemap = 0;

	addr (in_ptr) -> bit_72 = addr (a_ptr) -> bit_72; /* copy arg without treating it as a pointer. */
	addr (struc.text_ptr) -> bit_72  = addr (in_ptr) -> bit_72;

	call condition_ ("any_other", oop);		/* setup handler in case this really isn't a pointer. */
						/*   The handler will just return to the caller.  */

	framep = a_framep;				/* Copy args */
	mcp, scup = null;				/* assume no machine cond */

	struc.stack_ptr = framep;			/* copy framep argument in return structure */
	if framep ^= null
	then					/* see if condition frame */
	     if frame_owner_sw
	     then					/* un-necessary (& may be harmful) in some cases */
		if is_condition_frame_ (framep) then do;
		     call find_condition_info_ (framep, addr (condinfo), ec);
		     if ec = 0 then do;
			mcp = condinfo.mc_ptr;
			in_ptr = condinfo.user_loc_ptr;
			coptr = condinfo.wc_ptr;
			coflg = condinfo.flags.crawlout;
			scup = addr (mc.scu);	/* Fix ptr to suit Clancy */
			end;
		     end;


/* Try to take care of some special cases first. */

	xp = addr (in_ptr);	
	if xp -> its.its_mod = FAULT_TAG_2 then do;	/* unsnapped link */

	     auto_interpret_link_info.version = INTERPRET_LINK_INFO_VERSION_1;

	     call interpret_link_ (addr (auto_interpret_link_info), addr(a_ptr), ec);
						/* Must pass ADDRESS of the actual pointer, so  */
						/*  interpret_link_ can look inside segment for */
						/*  definition information.                     */
						/* if ft2, ask spier */
	     if ec = 0 then do;			/* good. we can say */
		struc.entryn = auto_interpret_link_info.entry_point_name;
		struc.segment = auto_interpret_link_info.segment_name;
		struc.offset = auto_interpret_link_info.expression;
		struc.modifier = auto_interpret_link_info.modifier;
		struc.comment = "(unsnapped link)";
		end;
	     else struc.segment = "unsnapped link";	/* happens if not in linkage section */
glop:
	     struc.text_ptr = null;			/* save everybody else a lot of trouble */
glop1:
	     return;
	     end;
	if xp -> its.its_mod ^= ITS_MODIFIER then do;	/* not fool with non-ptr */
	     struc.comment = "(argument is not a pointer)";
	     go to glop;
	     end;

	/* At this point, we know in_ptr contains an ITS_MODIFIER, and can be treated as a ptr. */

	if xp->its_unsigned.bit_offset ^= 0 then	/* if bit offset is nonzero, add it to structure. */
	     struc.bitoff = "(" || ltrim(char( xp->its_unsigned.bit_offset )) || ")";

	struc.instruction_counter = fixed (rel (in_ptr)); /* get word offset from the pointer. */
	call ioa_$rsnnl ("^o", struc.offset, i, struc.instruction_counter);

	struc.ring = ltrim(char(xp->its_unsigned.ringno));/* get ring number from the pointer. */

	if xp -> its.segno = "77777"b3 then do;		/* null ptr is special cased */
	     struc.segment = "null pointer";
	     return;
	     end;

	j = fixed (baseno (in_ptr), 17);		/* if can't get segname. what is segno? */
	call ioa_$rsnnl ("#^o", segn, i, j);		/* unknown segment. put number */
	struc.segment = segn;

	call hcs_$high_low_seg_count (highct, hcsct);	/* find range of good segnos */
	if xp -> its_unsigned.segno < hcsct then do;	/* Hardcore segment? */
	     call ring0_get_$name (dirn, segn, in_ptr, ec);
						/* yes. obtain name */
	     if ec = 0 then do;
		struc.segment = segn;		/* oho. */
		struc.ring = "0";
		call check_access (in_ptr, bc, ec);
		if ec = 5 then go to nonobj;
		if ec ^= 0 then go to glop;
		end;
	     end;


	/* Special cases are taken care of. In normal case, we examine stack frame to get procedure name. */

	txtp = in_ptr;				/* Assume return ptr is good, for the moment */
	call hcs_$fs_get_path_name (txtp, dirn, j, segn, ec);
						/* who is he */
	if ec = 0 then struc.segment = segn;
	if frame_owner_sw
	then if framep ^= null then do;		/* Check stack frame. */
		call stack_frame_exit_ (framep, mcp, coptr, coflg, txtp, op_seg_name, addr (situation));
		if situation.bad_frame then return;
		end;
	call check_access (txtp, bc, ec);
	if ec = 1 then go to glop;
	if ec ^= 0 then go to nonobj;

	if mcp ^= null then do;			/* if no machine cond, stymied */
	     call find_operator_name_ (op_seg_name, txtp, pl1_op_name);
	     if pl1_op_name ^= ""
	     then					/* If we were in an operator, */
		struc.opname = "in operator " || pl1_op_name;
	     end;

	call hcs_$fs_get_path_name (txtp, dirn, j, segn, ec);
						/* who is he */
	struc.segment = segn;
	call get_entry_name_ (txtp, ename, segno, lang, ec);
	if ec ^= 0
	then if framep ^= null then call get_entry_name_ (framep -> stack_frame.entry_ptr, ename, segno, lang, ec);
	if ec = 0 then struc.entryn = "$" || ename;
	struc.instruction_counter = fixed (rel (txtp));
	struc.text_ptr = txtp;
	call ioa_$rsnnl ("^o", struc.offset, j, struc.instruction_counter);
	oi.version_number = object_info_version_2;
	call object_info_$display (ptr (txtp, 0), bc, addr (oi), ec);
	if ec ^= 0 then go to nonobj;			/* if not object seg, jump down */
	struc.compiler = oi.compiler;			/* was object seg. get info on it */
	struc.std_flag = ^oi.format.old_format;
	struc.symbolp = oi.symbp;			/* save ptr to beg of symbol section */
	struc.sourcemap = oi.source_map;		/* save source map if given */
	if oi.format.bound then do;			/* is this a bound segment? */
	     call component_info_$offset (ptr (txtp, 0), binary (rel (txtp)), addr (ci), ec);
	     if ec = 0 then do;			/* bound segment. */
		struc.compiler = ci.compiler;		/* we have better info now. */
		struc.std_flag = ci.standard;
		struc.symbolp = ci.symb_start;
		struc.sourcemap = ci.source_map;
		call ioa_$rsnnl ("(^a|^a)", struc.comment, ec, segn, struc.offset);
		struc.segment = ci.name;
		struc.instruction_counter = binary (rel (txtp)) - binary (rel (ci.text_start));
		call ioa_$rsnnl ("^o", struc.offset, j, struc.instruction_counter);
		end;
	     end;
	goto xtarget;

/* If ptr is to combined linkage segment, see if we can get any info from the LOT. Or  be v1 entry */

nonobj:						/* see if location is described by def */
	call find_nonobject_info_ (in_ptr, ctmp, segno, section, adjusted_offset, ec);
	if section = "text" then do;			/* text assumed if not in combined linkage segment */
	     if ctmp = "" then go to xtarget;		/* have no further name info */
	     if segn = ""
	     then struc.entryn = ctmp;
	     else struc.entryn = "$" || ctmp;
	     struc.comment = "(external symbol in separate nonstandard text section)";
	     go to done;
	     end;

/* in_ptr points to static or linkage */
	call hcs_$fs_get_path_name (baseptr (segno), dirn, i, segn, ec);
	if ec ^= 0 then go to xtarget;
	call ioa_$rsnnl ("(^a|^o for ^a)", struc.comment, i, section, adjusted_offset, segn);
	call hcs_$status_mins (baseptr (segno), type, bc1, ec);
	if ec = 0 then do;
	     call get_bound_seg_info_ (baseptr (segno), bc1, addr (oi), bmp, sblkp, ec);
	     if ec = 0 then do;
		do j = 1 to n_components
		     while (adjusted_offset > fixed (component (j).stat_start) + fixed (component (j).stat_lng));
		end;
		if j <= n_components then do;
		     namp = addrel (sblkp, component (j).name_ptr);
		     naml = fixed (component (j).name_lng);
		     call ioa_$rsnnl ("(internal static|^o for ^a)", struc.comment, i,
			adjusted_offset - fixed (component (j).stat_start), based_name);
		     end;
		end;
	     end;
	if ctmp ^= "" then do;
	     struc.entryn = "$" || ctmp;
	     if section = "linkage" then struc.comment = "(entry sequence)";
	     end;

/* If we cannot say anything else, tell what the pointer points at, if it's ascii. */

xtarget:
	if struc.comment = "" then do;
	     i = verify (bcs, LEGAL);			/* Scan to see how much is ascii. */
	     if i = 0 then i = 54;			/* If all legal. */
	     if i > 4 then struc.comment = "( -> """ || substr (bcs, 1, i - 1) || """)";
	     end;
done:
	return;

/* ------------------------------------------------------- */

check_access:
     proc (txtp, bc, code);

dcl txtp ptr,
    bc fixed bin (24),
    code fixed bin (35);

dcl ec fixed bin (35);

	code = 0;
	if binary (baseno (txtp)) > hcsct + highct then do;
						/* dump out if segment invalid */
	     code = 1;
	     return;
	     end;
	call hcs_$status_mins (txtp, type, bc, ec);	/* check for directory, get length in bits */
	if ec ^= 0 then go to ng;			/* how can this happen? */
	if type ^= 1 then do;			/* ignore directories */
ng:
	     code = 4;
	     return;
	     end;
	call cu_$level_get (lev);			/* check ring brackets */
	call hcs_$fs_get_brackets (txtp, mode, rings, ec);
	if ec ^= 0 then go to ng;			/* if cannot status segment */
	if rings (2) < lev then do;			/* outside read bracket? */
	     code = 2;
	     return;
	     end;
	if (bit (mode, 5) & "01000"b) ^= "01000"b then do;/* check for read access */
	     struc.text_ptr = null;
	     code = 3;
	     return;
	     end;
	if bc = 0 then code = 5;			/* if bit count zero, is not object seg. */

     end check_access;

/* -------------------------------------------------------- */

oop:
     proc (mcp, cname, cop, infop, cont);

dcl (mcp, cop, infop) ptr,
    cname char (*),
    cont bit (1);

	if cname = "cput" then go to xx;
	if cname = "alrm" then go to xx;
	if cname = "quit" then go to xx;
	if cname = "finish" then go to xx;
	if cname = "stack" then go to xx;
	if cname = "mme2" then go to xx;
	if cname = "program_interrupt" then do;
xx:
	     cont = "1"b;
	     return;
	     end;

	if cname ^= "cleanup" then go to glop1;

     end oop;

/* * * * * * * * * * * * * * * * * * * */

%include condition_info;
%include interpret_link_info;
%include interpret_ptr_struc;
%include component_info;
%include bind_map;
%include object_info;
%include stack_frame;
%include mc;
%page; %include its;
%page; %include object_link_dcls;

     end interpret_ptr_;
