/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


list_onunits_: proc (a_sp, stream);

/* LIST_ONUNITS_ - list enabled condition handlers in a frame.

   This program is called by trace_stack_

   */

dcl  a_sp ptr,					/* stack frame pointer */
     stream char (32) aligned;			/* output stream */

dcl  tp ptr,					/* working ptr */
     strp ptr,
     bchr char (32) unal based (tp),
     condid char (66) aligned,
     junk fixed bin,
     snapw char (4) aligned,
     on_unit_ptr ptr,
     on_unit_rel bit (18) aligned;

dcl 1 filevar based aligned,
    2 fabp ptr,
    2 fsbp ptr;

dcl 1 fab based aligned,				/* File attributes block. */
    2 switch bit (36),
    2 filename char (32);

dcl  interpret_ptr_ entry (ptr, ptr, ptr),
     ioa_$rsnnl entry options (variable),
     ioa_$ioa_stream entry options (variable);

dcl  n_io_conds fixed bin int static init (7);		/* Number of conditions which have file name. */
dcl  io_cond (7) char (16) aligned int static init
    ("endfile",
     "endpage",
     "name",
     "record",
     "transmit",
     "undefinedfile",
     "key");

%include on_unit;
%include stack_frame;

%include interpret_ptr_struc;

dcl (addr, addrel, null, substr) builtin;

/* ------------------------------------------------------ */

	sp = a_sp;				/* copy arg */
	if ^stack_frame_flags.condition then return;	/* check bit 29 of last-sp */
	strp = addr (strbuf);
	on_unit_rel = stack_frame.on_unit_relp1;	/* got on-units, so follow chain */
onloop:	if on_unit_rel = "0"b then return;		/* "0"b means end of chain */
	on_unit_ptr = addrel (sp, on_unit_rel);		/* these things are relative to sp */
	if on_unit_ptr -> on_unit.flags.pl1_snap then snapw = "snap"; else snapw = "";
	if on_unit_ptr -> on_unit.size ^= 0 then do;
	     tp = on_unit_ptr -> on_unit.name;		/* get ptr to name */
	     condid = substr (bchr, 1, on_unit_ptr -> on_unit.size);
	     do junk = 1 to n_io_conds while (condid ^= io_cond (junk)); end;
	     if junk <= n_io_conds then		/* This unit has associated filename. */
		call ioa_$rsnnl ("^a(^a)", condid, junk, substr (bchr, 1, on_unit_ptr -> on_unit.size),
		on_unit_ptr -> on_unit.file -> filevar.fabp -> fab.filename);
	     if on_unit_ptr -> on_unit.flags.pl1_system then do;
		call ioa_$ioa_stream (stream, "^-on ""^a"" ^a system;", condid, snapw);
	     end;
	     else do;
		call interpret_ptr_ (on_unit_ptr -> on_unit.body, null, strp);
		call ioa_$ioa_stream (stream, "^-on ""^a"" ^a call ^a^a|^a ^a", condid,
		     snapw, struc.segment, struc.entryn, struc.offset, struc.comment);
	     end;
	end;
	on_unit_rel = on_unit_ptr -> on_unit.next;	/* following chain */
	go to onloop;

     end list_onunits_;
