
/****^  HISTORY COMMENTS:
  1) change(2017-02-15,GDixon), approve(2017-02-18,MCR10031),
     audit(2017-02-25,Swenson), install(2017-02-25,MR12.6f-0020):
     Initial version of program to interpret a virtual pointer when invoked as
     a command or active function.  When invoked as pointer_info_ function,
     provides information about an input pointer.
                                                   END HISTORY COMMENTS */

pointer_info:
pin:	proc options(variable);
	
display_usage:
	proc;
	
  dcl  ioa_ entry() options(variable);
	
     call ioa_ ("^(^a^)",
"Syntax as a command:  pin [-location|-loc] virtual_pointer [-all|-a]

Syntax as an active function:  [pin [-location|-loc] virtual_pointer]", "

Syntax as a subroutine:  interpreted_ptr_string = pointer_info_(ptr_value, code);
                         interpreted_ptr_string = pointer_info_$location(loc_of_ptr_value, code);
");

	end display_usage;
%page;

  dcl (F init("0"b), T init("1"b)) bit(1) aligned int static options(constant);
  dcl  PROC char(12) internal static options(constant) init("pointer_info");

  dcl (FUNCTION_LOC init(3), FUNCTION init(2), COMMAND init(1), AF init(0)) fixed bin(2) int static options(constant);
  dcl  callType fixed bin(2);				/* =FUNCTION:     pointer_info_ function;	        */
						/* =FUNCTION_LOC: pointer_info_$location function;        */
						/* =COMMAND:      pin invoked as a  command;	        */
						/* =AF:           pin invoked as an active function       */
  dcl  af_retL fixed bin (21);
  dcl  af_retP ptr;
  dcl  af_ret char (af_retL) varying based(af_retP);	/* When called as active function, this is return value.  */

  dcl  argCount fixed bin;                                  /* Count of arguments in iptr command line.	        */
  dcl  argI fixed bin init (0);                             /* Index of iptr argument last examined by code below.    */
  dcl  argL fixed bin(21);
  dcl  argListP ptr;                                        /* Ptr to our argument list, needed when non-quick proc   */
                                                            /*  is used to examine the arguments.		        */

  dcl  code fixed bin (35);
  dcl  gripe entry variable options(variable);		/* Either: com_err_ or active_fnc_err_		        */

  dcl (addr, binary, mod, null, rel, rtrim) builtin;

  dcl (error_table_$bad_arg,
       error_table_$badopt,
       error_table_$bad_ptr,
       error_table_$noarg,
       error_table_$not_act_fnc) fixed bin(35) ext static;
%page;
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */
	/*									        */
	/* Name:  pointer_info, pin							        */
	/*									        */
	/* Description:  Command/active function to consolidate information about a virtual_ptr value,    */
	/* as found by interpret_ptr_ subroutine, into a single string that is displayed or returned.     */
	/*									        */
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

  dcl 1 source aligned,				/* Structure to hold input arg information.	        */
      2 v_ptrP ptr,
      2 v_ptrL fixed bin(21),
      2 switches,
        3 allS bit(1) aligned,			/*  -all option				        */
        3 locationS  bit(1) aligned,			/*  -location  option			        */
        3 null_ptrS bit(1) aligned;			/*  input pointer appears to be a NULL_POINTER.	        */
  dcl  v_ptr char(source.v_ptrL) based(source.v_ptrP);	/* The virtual_ptr argument, if any.		        */

  dcl  input_ptr ptr;				/* Automatic pointer variable holding converted value of  */
						/*  the virtual_ptr.			        */
  dcl  inPP ptr,
       inP ptr based(inPP);				/* Pointer to be examined.  It may be:		        */
						/*  - input_ptr used by COMMAND and AF		        */
						/*  - Aptr parameter of the FUNCTION		        */
  dcl  oct (12*2) fixed bin(3) unsigned unaligned based(inPP);
						/* Overlay of the pointer value, as octal digits.	        */

     callType = COMMAND;				/* Start by assuming proc is called as a COMMAND.	        */

  dcl  cu_$arg_list_ptr entry() returns (ptr);		/* Prime general arg processing mechanism used by iptr.   */
     call argSetup(cu_$arg_list_ptr(), callType, af_retP, af_retL, gripe);

     if ^argsRemain() then do;			/* If virtualEntry not given, just display usage message. */
	call display_usage();
	go to EXIT_pin(callType);
	end;

     call argVirtualPtr(source, gripe, code);		/* Get virtual_ptr (and any options)		        */
     if code ^= 0 then go to EXIT_pin(callType);		/*   Exit, if no virtual_ptr given.		        */


  dcl  cv_ptr_ entry (char(*), fixed bin(35)) returns(ptr); /* Convert virtual_ptr to:  ptr aligned variable	        */
     input_ptr = cv_ptr_(v_ptr, code);			
     if code ^= 0 then do;
	call gripe(code, PROC, "Converting ptr: ^a", v_ptr);
	go to EXIT_pin(callType);
	end;
     if source.locationS then				/* Was argument:				        */
	inPP = input_ptr;				/*  - location of pointer to be examined?  OR	        */
     else inPP = addr(input_ptr);			/*  - actual pointer value to be examined?	        */

     if mod( binary(rel(inPP),18), 2) ^= 0 then do;	/* Does input pointer locate even word boundary?	        */
	code = error_table_$bad_arg;
	call gripe(code, PROC, "virtual_ptr must point to an even word boundary: -loc ^a", v_ptr);
	go to EXIT_pin(callType);
	end;
     go to COMMON;

%page;
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */
	/*									        */
	/* Name:  pointer_info_							        */
	/*									        */
	/* Description: Simplest subroutine for returning information found by interpret_ptr_	        */
	/* subroutine.								        */
	/*									        */
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

pointer_info_:					/* FUNCTION entrypoint: returns same info as AF.	        */
     entry(Aptr, Acode) returns(char(76) var);

  dcl  Aptr ptr parameter;				/*  Pointer to be examined.                          (in) */
  dcl  Acode fixed bin(35) parameter;			/*  Status code.				  (out) */

     callType = FUNCTION;				/* Called at FUNCTION entrypoint.		        */
     inPP = addr(Aptr);				/* Examine the input parameter value.		        */
     Acode = 0;					/* Initialize status code.			        */

     go to FUNCTION_COMMON;
     

pointer_info_$location:
     entry(Aloc, Acode) returns(char(76) var);
     
  dcl  Aloc ptr parameter;				/* Location of pointer to be examined.               (in) */
     
     callType = FUNCTION_LOC;				/* Called at FUNCTION_LOC entrypoint.		        */
     inPP = Aptr;					/* Examine the aligned pointer pointed to by input.       */
     Acode = 0;					/* Initialize status code.			        */

     go to FUNCTION_COMMON;


FUNCTION_COMMON:

  dcl  nothing entry options(variable);			/* FUNCTION cannot display error messages.	        */
     gripe = nothing;				/*  - Make COMMAND/AF error routine a nop for FUNCTION.   */

						/* Map FUNCTION parameters onto variables used by the     */
						/*  COMMAND/AF entrypoint.			        */
     source.allS = F;				/*  - -all functionality not implemented by function.     */

     if mod( binary(rel(inPP),18), 2) ^= 0 then do;	/* Does input pointer locate even word boundary?	        */
	Acode = error_table_$bad_arg;
	return("");
	end;

     go to COMMON;
%page;     

COMMON:						/* Code shared by COMMAND, AF, and FUNCTION 	        */

     if  (inPP->its.its_mod ^= ITS_MODIFIER) & (inPP->its.its_mod ^= FAULT_TAG_2)  then do;
	code = error_table_$bad_ptr;
	call gripe(code, PROC, "Location: ^p  ^12(^d^) ^12(^d^)", inPP,
	     oct( 1), oct( 2), oct( 3), oct( 4), oct( 5), oct( 6),
	     oct( 7), oct( 8), oct( 9), oct(10), oct(11), oct(12),
	     oct(13), oct(14), oct(15), oct(16), oct(17), oct(18),
	     oct(19), oct(20), oct(21), oct(22), oct(23), oct(24) );

	go to EXIT_pin(callType);
	end;

  dcl  strp ptr;					/* Get storage for interpret_ptr_ return structure.       */
     strp = addr(strbuf);				/*  interpret_ptr_ sets all storage in this structure.    */

  dcl  interpret_ptr_ entry (ptr, ptr, ptr);		/* Let interpret_ptr_ do heavy lifting to describe ptr.   */
  dcl  frame_ptr ptr init(null()) int static options(constant);
     call interpret_ptr_(inP, frame_ptr, strp);	
     source.null_ptrS = (struc.segment = "null pointer") | (struc.comment = "(unsnapped link)");

	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */
	/*									        */
	/* interpret_ptr_ does not provide a full pathname for segment pointed to by: inP	        */
	/*									        */
	/* So we get further information about inP, such as its pathname (if available), or	        */
	/*  its hardcore reference name.						        */
	/*									        */
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

  dcl  dir char(256);				/* Assume no path, as a starting point.		        */
  dcl  ignore_dirL fixed bin;
  dcl  ent char(32);
     dir, ent = "";					

  dcl (first_stack, last_seg)	fixed bin;		/* Get segno of first stack.  All lower segno's are in    */
  dcl  hcs_$high_low_seg_count entry (fixed bin, fixed bin);/*  hardcore, and therefore may not have a path.	        */
     call hcs_$high_low_seg_count (last_seg, first_stack);
     last_seg = last_seg + first_stack;

  dcl  hcs_$fs_get_path_name entry (ptr, char(*), fixed bin, char(*), fixed bin(35));
  dcl  ring0_get_$name entry (char(*), char(*), ptr, fixed bin(35));

     if source.null_ptrS then				/* Ignore null pointers and unsnapped links.	        */
	code = 0;
     else if (inPP->its_unsigned.segno < first_stack) then	/* For hardcore segment, ask in ring0 about pointer.      */
	call ring0_get_$name (dir, ent, inP, code);
     else call hcs_$fs_get_path_name(inP, dir, ignore_dirL, ent, code);
     if code ^= 0 then do;				/* For other segments, ask file system about the pointer. */
	call gripe(code, PROC, "Getting pathname for ptr: ^p", inP);
	go to EXIT_pin(callType);
	end;

  dcl  get_shortest_path_ entry (char(*)) returns(char(168));
     if dir ^= "" then				/* Minimize dir part of pathname, if present.	        */
	dir = get_shortest_path_(dir);

  dcl  path char(201) varying;
     if dir ^= "" then				/* Construct pathname for display.		        */
	path = rtrim(dir) || ">" || rtrim(ent);
     else path = rtrim(ent);


	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */
	/*									        */
	/* Convert various info returned by interpret_ptr_ to a single character string.	        */
	/*									        */
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

  dcl (current_ring, pointer_ring) fixed bin(3);		/* Warn when input ptr not in current ring of execution.  */
  dcl  get_ring_ entry() returns(fixed bin(3));
     current_ring = get_ring_();
     if struc.ring ^= "" then
	pointer_ring = binary(struc.ring,3);
     else pointer_ring = current_ring;

  dcl  case fixed bin;				/* Determine type of info returned from interpret_ptr_.   */
     if  struc.segment = "null pointer" & struc.offset = "1"  then
	case = 1;					/*  case 1: Suppress null_pointer std offset = 1	        */
     else if  struc.entryn ^= ""  then
	case = 2;					/*  case 2: Give only .segment and .entryn	        */
     else case = 3;					/*  case 3: Give .segment $ .offset .bitoff	        */

  dcl  p_interp char(76) var;				/* Our summary of the interpret_ptr_ information.	        */
  dcl  p_interpL fixed bin;
  dcl  ioa_$rsnnl entry() options(variable);	
     call ioa_$rsnnl("^a^[^s^s^s^;^a^s^s^;$^s^a^a^]^[ (ring ^a)^;^s^]", p_interp, p_interpL, 
	struc.segment, 
	case, struc.entryn, struc.offset, struc.bitoff,
	pointer_ring ^= current_ring, struc.ring);


	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */
	/*									        */
	/* Print or return the string.						        */
	/*									        */
	/* If -all was given for COMMAND invocation, display meaningful components of structure returned  */
	/* by interpret_ptr_, plus other data we assembled.				        */
	/*									        */
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

     go to RETURN_FROM(callType);
     
RETURN_FROM(COMMAND):

  dcl  ioa_ entry() options(variable);
     call ioa_(" For pointer: ^p", inP);		/* COMMAND displays the p_interp string.	        */
     call ioa_("   ^a:^21t^a",  "information", p_interp);

     if allS then do;				/*  -all: display other info provided by interpret_ptr_   */
	call ioa_("");

						/* Dump inP in octal.			        */
	call ioa_("   ^a:^21t^12(^d^) ^12(^d^)",      "octal pointer",   
	     oct( 1), oct( 2), oct( 3), oct( 4), oct( 5), oct( 6),
	     oct( 7), oct( 8), oct( 9), oct(10), oct(11), oct(12),
	     oct(13), oct(14), oct(15), oct(16), oct(17), oct(18),
	     oct(19), oct(20), oct(21), oct(22), oct(23), oct(24) );

	if path ^= "" then			/* Full pathname we assembled (if any).		        */
	     call ioa_("   ^a:^21t^a",    "path",      path);
	if struc.comment ^= "" then		/* Information returned by interpret_ptr_ subroutine.     */
	     call ioa_("   ^a:^21t^a",    "comment",   struc.comment);
	if struc.segment ^= "" then
	     call ioa_("   ^a:^21t^a",    "segment",   struc.segment);
	if  struc.entryn ^= "" then
	     call ioa_("   ^a:^21t^a",    "entryn",    struc.entryn);
	if  struc.offset ^= "" then
	     call ioa_("   ^a:^21t^a",    "offset",    struc.offset);
	if  struc.bitoff ^= "" then
	     call ioa_("   ^a:^21t^a",    "bitoff",    struc.bitoff);
	if  struc.opname ^= "" then		/*  Never set, since interpret_ptr_2nd arg always null(). */
	     call ioa_("   ^a:^21t^a",    "opname",    struc.opname);
	if    struc.ring ^= "" then
	     call ioa_("   ^a:^21t^a",    "ring",      struc.ring);
	if struc.modifier ^= "" then		/*  interpret_ptr_ only sets this if p -> unsnapped link. */
	     call ioa_("   ^a:^21t^a",    "modifier",  struc.modifier);
	end;
     return;
     
RETURN_FROM(AF):					/* AF: return interpreted pointer as a quoted string.     */
  dcl  requote_string_ entry (char(*)) returns(char(*));
     af_ret = requote_string_(char(p_interp));
     return;

RETURN_FROM(FUNCTION):				/* FUNCTION: p_interp is our return string.	        */
RETURN_FROM(FUNCTION_LOC):				/* FUNCTION_LOC: p_interp is our return string.	        */
     return (p_interp);


EXIT_pin(FUNCTION):
EXIT_pin(FUNCTION_LOC):
     Acode = code;					/*  - assign any status code to Acode parameter.	        */
     return ("");					/*  - return empty string.			        */

EXIT_pin(COMMAND):
EXIT_pin(AF):					/* Command/Active Function - return		        */
     return;					/*  - all errors reported via gripe.		        */
%page;
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */
	/*									        */
	/* Routine to setup argument handling for the main procedure.  It determines:		        */
	/*   invocation type:  command/active function					        */
	/*   gripe routine:    com_err_ or active_fnc_err_				        */
	/*   argument count								        */
	/*   af return arg								        */
	/*									        */
	/* It records argListP and argCount for use by argsRemain routine.			        */
	/*									        */
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

argSetup:
     proc( arg_list, command, af_retP, af_retL, gripe);     

  dcl  arg_list ptr;				/* ptr to main procedure's argument list.            (in) */
  dcl  command fixed bin(2) aligned;			/* =COMMAND for command, =AF for active function	  (out) */
  dcl  af_retP ptr;					/* active function return string info.		  (out) */
  dcl  af_retL fixed bin(21);
  dcl  gripe entry options(variable) variable;		/* error reporting routine suited to command-type.  (out) */

  dcl  code fixed bin(35);				/* status code				        */

  dcl  active_fnc_err_ entry options (variable);
  dcl  com_err_ entry () options (variable);
  dcl  cu_$af_return_arg_rel entry (fixed bin, ptr, fixed bin(21), fixed bin(35), ptr);
  dcl  cu_$arg_count_rel entry (fixed bin, ptr, fixed bin(35));

     argListP = arg_list;				/* Save arg_list pointer for use in other arg-related fcns*/

     command = COMMAND;				/* Assume called as a COMMAND.		        */
     call cu_$af_return_arg_rel (argCount, af_retP, af_retL, code, arg_list);
     if code = error_table_$not_act_fnc then do;		/*  - Yes, called as a COMMAND.		        */
          command = COMMAND;
          gripe = com_err_;
          call cu_$arg_count_rel (argCount, arg_list, code);
          code = 0;
	end;
     else do;					/*  - No, it was called as active function.	        */
          command = AF;
          gripe = active_fnc_err_;
	af_ret = "";
	end;

     if code ^= 0 then do;				/* Should never encounter a nonzero code here.	        */
	call gripe (code, PROC, "When getting argument count and invocation method.");
	go to EXIT_pin(callType);
	end;

     end argSetup;

argsRemain:					/* Function to report whether any arguments to call       */
     proc () returns (bit (1) aligned);			/*  remain to be processed.			        */
     return (argI < argCount);
     end argsRemain;

%page;
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */
	/*									        */
	/* Routine to access positional arguments to call, one by one as they are needed.  It also        */
	/* handles:								        */
	/*  - per-positional-arg options, if any follow them;				        */
	/*  - global options that impact overall operation of call.				        */
	/*									        */
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *   */

argVirtualPtr:
     proc (s, gripe, code);

  dcl 1 s aligned like source;			/*  virtual_pointer specification data               (in) */
  dcl  gripe entry options(variable) variable;		/*  error reporting mechanism.		   (in) */
  dcl  code fixed bin (35);				/*  status code, reporting missing arg, conversion        */
						/*   error, unknown options, etc.		        */
     s.v_ptrP = null; s.v_ptrL = 0; s.switches = F;
     code = 0;

  dcl  arg char(argL) based(argP);			/*  Next argument in call's argument list.  This may      */
  dcl  argFirst char(1) based(argP);			/*   be an option, or initial value for an argument       */
  dcl  argL fixed bin(21);				/*   to pass to virtualEntry, or the string	        */
  dcl  argP ptr;					/*   representation virtualEntry, itself.	        */
  dcl  cu_$arg_ptr_rel entry (fixed bin, ptr, fixed bin(21), fixed bin(35), ptr);

     do while (argsRemain());
	call cu_$arg_ptr_rel (argI+1, argP, argL, code, argListP);
						/* Conditionally read next argument to call command/af.   */
	if argIsOption(arg,s) then do;

	     /* Global options */                              
	     if      arg = "-a"   | arg = "-all"       then s.allS = T;
	     else if arg = "-loc" | arg = "-location"  then s.locationS = T;
               else call gripe (error_table_$badopt, PROC, "Ignoring unsupported option: ^a", arg);
	     end;
	
	else do;
	     s.v_ptrL = argL;
	     s.v_ptrP = argP;
	     end;

	argI = argI + 1;				/* Note that we processed the arg just examined above.    */
	end;

     if s.v_ptrP = null then do;
	code = error_table_$noarg;			/* Missing arg error			        */
	call gripe(code, PROC, "No virtual pointer argument.");
	end;
     return;


argIsOption:					/* Returns T if arg is in form of an option.              */
          proc (arg, s) returns (bit(1) aligned);
     
  dcl  arg char(*);
  dcl 1 s aligned like source;

  dcl  argFirst char(1) defined(arg);
  dcl  argNull  char(3) defined(arg);
  dcl  NULL_POINTER char(3) int static options(constant) init("-1|");

	if  length(arg) = 0  then return(F);		/* empty string is not an option.		        */

	if  argFirst ^= "-"  then return(F);		/* does not start with - , then not an option.	        */

	if  (argFirst = "-")  &  (length(arg) > length(argNull))  &  (argNull = NULL_POINTER)  then do;
	     s.null_ptrS = T;
	     return(F);				/* starts with -1| , then not an option.	        */
	     end;

	return(T);
	
	end argIsOption;

     end argVirtualPtr;

%page;

%include interpret_ptr_struc;
%page;
%include its;
%page;
%include object_link_dcls;
	end pointer_info;
     
