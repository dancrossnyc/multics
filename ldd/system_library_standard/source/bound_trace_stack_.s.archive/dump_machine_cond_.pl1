/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


dump_machine_cond_:
     procedure (cip, fsp, stream, mode);

/* DUMP_MACHINE_COND_ - Print out pretty machine conditions at time of fault.

   This routine can be called with the arguments given it by a condition handler
   or those returned by find_fault_frame_.

   It uses the default_error_handler_ routine reinterpret_condition_ and
   then attempts to print the source line, followed by the machine registers.
*/

dcl cip ptr,					/* ptr to structure returned by find_condition_info_ */
    fsp ptr,					/* fault sp */
    stream char (32) aligned,				/* output stream name */
    mode fixed bin;					/* output mode: 0 = brief */

dcl shortinfo char (8) aligned,			/* returned by convert_status_code_ */
    (i, j, k) fixed bin,				/* counters */
    time char (32) aligned,
    NL char (1) aligned int static init ("
"),
    strp ptr,					/* ptr to interpret_ptr_struc */
    longinfo char (100) aligned,			/* ... explanation of error code in SCU */
    prs (0:7) char (4) int static options (constant)
         init ("(ap)", "(ab)", "(bp)", "(bb)", "(lp)", "(lb)", "(sp)", "(sb)"),
    (tp, tp1) ptr,					/* working pointers */
    areap ptr,					/* pointer to area, where message allocated */
    mp ptr,					/* ptr to message, explains fault */
    ml fixed bin,					/* length of message (see berrm) */
    berrm char (ml) based (mp),			/* message from reinterpret_condition_ */
    barea area ((100)) based (areap),			/* dummy for free */
    w (8) fixed bin based,				/* based words, for regs */
    ec fixed bin (35),				/* error code, from scu */
    faultptr ptr,					/* ptr to fault */
    iocbp ptr,					/* io control block ptr */
    faultsp ptr;					/* stack ptr at time of fault */

dcl 1 condinfo based (cip) aligned,			/* structure returned by find_condition_info_ */
      2 mcptr ptr,
      2 version fixed bin,
      2 condition_name char (32) var,
      2 infoptr ptr,
      2 wcptr ptr,
      2 loc_ptr ptr,
      2 flags,
        3 crawlout bit (1) unal,
        3 pad1 bit (35) unal,
      2 user_loc_ptr ptr,
      2 pad (4) bit (36);

dcl interpret_ptr_ entry (ptr, ptr, ptr),
    interpret_ptr_$frame_owner entry (ptr, ptr, ptr),
    print_source_line_ entry (ptr, char (32) aligned),
    reinterpret_condition_ entry (ptr, ptr, fixed bin, fixed bin, ptr, char (*) aligned, ptr, ptr, ptr),
    get_system_free_area_ entry (ptr),
    convert_status_code_ entry (fixed bin (35), char (8) aligned, char (100) aligned),
    prtscu_$on_line entry (ptr, ptr, bit (1)),
    iox_$find_iocb entry (char (*), ptr, fixed bin (35)),
    date_time_ entry (fixed bin (71), char (*) aligned),
    ioa_$rsnnl entry options (variable),
    ioa_$ioa_stream entry options (variable);

%include interpret_ptr_struc;

%include mc;

dcl (addr, fixed, index, null, rel, substr, verify) builtin;

/* ------------------------------------------------------- */

	strp = addr (strbuf);			/* initialization. */
	faultsp = fsp;				/* ..copy args */
	mcp = condinfo.mcptr;
	if condinfo.flags.crawlout
	then if condinfo.wcptr ^= null then mcp = condinfo.wcptr;

	if mode = 0 then do;			/* brief mode */
	     call ioa_$ioa_stream (stream, "^a condition:", condinfo.condition_name);
	     return;
	     end;

	call get_system_free_area_ (areap);		/* obtain area for message */

/* This section gets the standard error message which explains the error, and prints it. */

	call reinterpret_condition_ (areap, mp, ml, 3, condinfo.mcptr, (condinfo.condition_name), condinfo.wcptr,
	     condinfo.infoptr, faultsp);
	j = 1;					/* got explanation of fault. now print it */
	i = index (berrm, "Error");			/* take off "error" */
	if i > 0
	then if i < 4 then j = i + 6;			/* .. if it's on the front */
	j = j + verify (substr (berrm, j), " ") - 1;	/* Trim leading blanks. */

	do k = j repeat k + i while (k < ml);		/* Print the error message. */
	     i = index (substr (berrm, k), NL);		/* .. one line at a time. */
	     call ioa_$ioa_stream (stream, "^a", substr (berrm, k, i - 1));
	end;
	free berrm in (barea);			/* done with error msg. free it */
	if mode = 0 then go to exit;			/* no registers if brief mode */
	if mcp = null then do;			/* might be given null. */
	     call ioa_$ioa_stream (stream, "Machine conditions not available.^/");
	     return;
	     end;
	scup = addr (mc.scu);

/* This section attempts to print the source statement which encountered the fault. */

	faultptr = condinfo.user_loc_ptr;
	call interpret_ptr_$frame_owner (faultptr, faultsp, strp);
	if struc.text_ptr ^= null
	then					/* if can print source line, do so. */
	     call print_source_line_ (strp, stream);

/* This section formats the machine conditions and prints them out pretty. */

	call ioa_$ioa_stream (stream, "^/Machine registers at time of fault^/");
p_mc_only:					/* common code for mc_only entry */
	do j = 0 to 7;
	     call printreg (j);
	end;
	call ioa_$ioa_stream (stream, "");

	call ioa_$ioa_stream (stream, "x0 ^6o^3xx1 ^6o^3xx2 ^6o^3xx3 ^6o", fixed (mc.x (0), 18), fixed (mc.x (1), 18),
	     fixed (mc.x (2), 18), fixed (mc.x (3), 18));
	call ioa_$ioa_stream (stream, "x4 ^6o^3xx5 ^6o^3xx6 ^6o^3xx7 ^6o", fixed (mc.x (4), 18), fixed (mc.x (5), 18),
	     fixed (mc.x (6), 18), fixed (mc.x (7), 18));
	call ioa_$ioa_stream (stream, "a ^w  q ^w  e ^o", fixed (mc.a, 35), fixed (mc.q, 35), fixed (mc.e, 8));
	call ioa_$ioa_stream (stream, "Timer reg - ^o, Ring alarm reg - ^1.3b", fixed (mc.regs.t, 27), mc.regs.ralr);
	if mc.fault_reg ^= "0"b
	then					/* display fault reg if present */
	     call ioa_$ioa_stream (stream, "Fault reg - ^12.3b", mc.fault_reg);

	call ioa_$ioa_stream (stream, "^/SCU Data:^/");
	call iox_$find_iocb ((stream), iocbp, ec);	/* find iocb ptr */
	call prtscu_$on_line (iocbp, scup, "1"b);
	call ioa_$ioa_stream (stream, " ");		/* Put out new line  char */
	if mc.fault_time then do;			/* print out time of day if available */
	     call date_time_ (fixed (mc.fault_time, 71), time);
	     call ioa_$ioa_stream (stream, "Time stored: ^a (^18.3b)", time, mc.fault_time);
	     end;
	call ioa_$ioa_stream (stream, "Ring:^10x^d", fixed (scu.ppr.prr, 3));
	ec = mc.errcode;
	if ec ^= 0 then do;				/* Interpret code. */
	     call convert_status_code_ (ec, shortinfo, longinfo);
	     if shortinfo = (8)"x" then call ioa_$rsnnl ("^w", longinfo, i, ec);
	     call ioa_$ioa_stream (stream, "Code:^10x^a", longinfo);
	     end;

	if substr (scu.even_inst, 28, 1) then do;	/* if bit 27 of instruction on display spl data */
	     call ioa_$ioa_stream (stream, "^/EIS Pointers and Lengths:^/");
	     tp1 = addr (mc.eis_info);		/* set up pointer */
	     call ioa_$ioa_stream (stream, "^6o^-^w ^w ^w ^w^/^-^w ^w ^w ^w", fixed (rel (tp1)), tp1 -> w (1),
		tp1 -> w (2), tp1 -> w (3), tp1 -> w (4), tp1 -> w (5), tp1 -> w (6), tp1 -> w (7), tp1 -> w (8));
	     end;
exit:
	call ioa_$ioa_stream (stream, "");
	return;

/* -------------------------------------------------------- */

/* mc_only - entry to display a set of machine conditions  only */

mc_only:
     entry (a_mcp, stream);
dcl a_mcp ptr;					/* machine condition pointer */

	mcp = a_mcp;				/* copy arguments */
	strp = addr (strbuf);
	scup = addr (mc.scu);
	go to p_mc_only;				/* join common code */



printreg:
     proc (v1);

dcl v1 fixed bin;

dcl tpx char (20) aligned;
dcl tpxi fixed bin;

	tp = mc.prs (v1);
	call ioa_$rsnnl ("^p", tpx, tpxi, tp);
	call interpret_ptr_ (tp, null, strp);
	call ioa_$ioa_stream (stream, "pr^d ^4a^2x^20a^a^a|^a ^a ^a", v1, prs (v1), tpx, struc.segment, struc.entryn,
	     struc.offset, struc.modifier, struc.comment);

     end printreg;


     end dump_machine_cond_;
