/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */


	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */
	/* 									*/
	/* Name:  get_pl1_parm_desc_string_						*/
	/* 									*/
	/*      Given a pointer to the argument descriptor for an entry point parameter, and a	*/
	/* string in which the PL/I declaration of the entry point is being constructed, this	*/
	/* subroutine appends a description of the parameter to the string.			*/
	/* 									*/
	/* Status									*/
	/* 									*/
	/* 0) Created  in May, 1979  by  G. C. Dixon					*/
	/* 1) Modified  in Jan, 1981 by G. C. Dixon - handle decimal unaligned values;		*/
	/*				      reimplement handling of structure alignment */
	/* 2) Modified  in Jan, 1983 by T. G. Oke   - handle star extents for pl1 and fortran	*/
	/*									*/
	/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */

	

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **/


get_pl1_parm_desc_string_:	
	procedure	(Pdesc, string, Acode);

     dcl	Pdesc			ptr,		/* ptr to	descriptor to be printed.		*/
	string			char(*) varying,	/* return string, as supplied by caller.	*/
	Acode 			fixed bin(35);

	offset = 0;
	call recurse (Pdesc, 1, 0, "1"b, "0"b, offset, string, Acode);
	return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **/


recurse:	entry (Pdesc, level, Nignored_dim, Slast, ASpacked, Aoffset, string, Acode);

     dcl	level			fixed bin,	/* structure level of this descriptor.		*/
	Nignored_dim		fixed bin,	/* number of dimension inherited from containing	*/
						/*  structure, to be ignored on output.		*/
	Slast			bit(1) aligned,	/* on if last structure element at this structure	*/
						/*  is being output, or on for scalars.		*/
	ASpacked			bit(1) aligned,	/* on if prev structure level was packed.	*/
	Aoffset			fixed bin;	/* offset in words of next structure element	*/
						/*   descriptor from one being processed.	*/



     dcl	j			fixed bin;
     dcl	offset			fixed bin;
     dcl (type, Ndim, size, scale)	fixed bin,
	Spacked			bit(1) aligned;
     dcl	Pelement_desc		ptr;

     dcl	desc (0:Aoffset-1)		fixed bin(35) based(Pdesc);

     dcl	decode_descriptor_		entry (ptr, fixed bin, fixed bin, bit(1) aligned,	fixed bin, fixed bin, fixed bin);

     dcl	pl1_type (1:46)		char(24) varying int static init (
				     "fixed bin",
				     "fixed bin",
				     "float bin",
				     "float bin",
				     "complex fixed bin",
				     "complex fixed bin",
				     "complex float bin",
				     "complex float bin",
				     "fixed dec",
				     "float dec",
				     "complex fixed dec",
				     "complex float dec",
				     "ptr",
				     "offset",
				     "label",
				     "entry",
				     "",		/* structure */
				     "area",
				     "bit",
				     "bit",
				     "char",
				     "char",
				     "file",
				      (9)*,
				     "uns fixed bin",
				     "uns fixed bin",
				      (8)*,
				     "fixed dec",
				     "float dec",
				     "complex fixed dec",
				     "complex float dec");
     dcl  star_pl1_bits		bit (36) static initial ("400000000000"b3);
     dcl  star_fort_bits		bit (36) static initial ("377777777777"b3);

     dcl  star_pl1_size		fixed bin(35) based (addr (star_pl1_bits));
     dcl  star_fort_size		fixed bin(35) based (addr (star_fort_bits));

     dcl	error_table_$bad_segment	fixed bin(35) ext static;

     dcl (addr, addrel, length, ltrim, mod, substr)
				builtin;

	Acode = 0;
	Aoffset = 1;
	call decode_descriptor_ (Pdesc, 0, type, Spacked,	Ndim, size, scale);
	if  (1 <= type & type <= 23) |		/* Support only PL/I data types.		*/
	    (33 <= type & type <= 34) |
	    (43 <= type & type <= 46) then;
	else do;					/* unimplemented or invalid descriptor.		*/
	     Acode = error_table_$bad_segment;
	     return;
	     end;

	if type = 17 then do;			/* Handle structure level.			*/
	     string = string || cv_num(level);
	     end;
	else if level > 1 then do;			/* Handle structure element level.		*/
	     string = string || cv_num(level);
	     string = string || " ";
	     end;
	else;					/* Do nothing for scalars.			*/

	Aoffset = Aoffset + 3*Ndim;			/* Handle arrays.				*/
	if Ndim - Nignored_dim > 0 then do;		/*   Dimensions reported in prev. recursions are	*/
	     string = string || "(";			/*     ignored.				*/
	do j = 3 * (Ndim-Nignored_dim-1) to 0 by -3;
		if desc(j+1) = 1 then string = string || cv_desc_num_(desc(j+2));
						/*   Omit lbound of 1.			*/
		else do;
		     if desc (j+1) = star_pl1_size |
			desc (j+1) = star_fort_size	/*   star extent */

		     then string = string || cv_desc_num_(desc (j+1));
		     else do;
			string = string || cv_desc_num_(desc(j+1));
			string = string || ":";
			string = string || cv_desc_num_(desc(j+2));
			end;
		     end;
		string = string || ",";
		end;
	     substr(string,length(string),1) = ")";	/*   Change final , to ) after last dimension.	*/
	     string = string || " ";
	     end;

	string = string || pl1_type(type);		/* Output PL/I data type.			*/

						/* Output precision and scale.		*/
	if  (type <= 8) | (33 <= type & type <= 34)  then do;   
						/* binary	numeric.				*/
	     if size = 17 & scale = 0 then;		/*   omit default size/scale.			*/
	     else do;
		string = string || "(";
		string = string || cv_num (size);

		if mod(type-1,4) < 2 then		/*   signed fixed binary.			*/
		     if scale ^= 0 then do;		/*     include scale when nonzero.		*/
			string = string || ",";
			string = string || cv_num (scale);
			end;
		     else;
		else if  (33 <= type & type <= 34)  then/*   unsigned fixed binary.			*/
		     if scale ^= 0 then do;		/*     include scale when nonzero.		*/
			string = string || ",";
			string = string || cv_num (scale);
			end;
		string = string || ")";
		end;
	     end;

	else if  (9 <= type & type <= 12) | 		/* decimal numeric				*/
	         (43 <= type & type <= 46)  then do;
	     string = string || "(";
	     string = string || cv_num(size);		/*   Always include size.  Most people don't know */
						/*     what the default is for decimal data.	*/
	     if mod(type,2) = 1 then			/*   fixed decimal				*/
		if scale ^= 0 then do;		/*     include scale when nonzero.		*/
		     string = string || ",";
		     string = string || cv_num (scale);
		     end;
	     string = string || ")";
	     end;

	else if 19 <= type & type <= 22 then do;
	     string = string || "(";			/* bit or	character	string.			*/
	     if size = 16777215 then			/*   star	extent.				*/
		string = string || "*";
	     else	string = string || cv_num(size);
	     string = string || ")";
	     if mod(type,2)	= 0 then			/*   varying bit or char string.		*/
		string = string || " var";
	     end;

	else if type = 18 then do;			/* area					*/
	     string = string || "(";
	     if size = 16777215 then			/*   star	extent.				*/
		string = string || "*";
	     else	string = string || cv_num(size);
	     string = string || ")";
	     end;

						/* Handle storage alignment.			*/
	if type = 17 then do;			/*   structures or substructures.		*/
	     if Spacked then;			/*     If structure packed, all its elements will	*/
						/*       be marked unaligned.			*/
	     else if all_structure_elements_packed() then /*     If structure unpacked, only mark it aligned*/
		string = string || " aligned";	/*       if all its elements are packed.	*/
	     end;
	
	else do;					/*   scalars, array or structure elements.	*/
	     if level = 1 then do;			/*   scalars:  assume user know default alignment.*/
		if  type = 19 | type = 21  then	/*     Only give alignment if it differs from the */
		     if Spacked then;		/*     default.				*/
		     else string = string || " aligned";
		else if Spacked then
		     string = string || " unal";
		end;
	     else do;				/*     structure elements.			*/
		if ASpacked then			/*       containing structure is packed.	*/
		     string = string || " unal";	/*         its elements are packed by definition. */
		else				/*       containing structure not packed.  	*/
		     if Spacked then		/*   Explicitly state alignment of structure els. */
			string = string || " unal";
		     else string = string || " aligned";
		end;
	     end;

	if type = 17 then do;			/* process the structure elements.		*/
	     do j = 1 to size;			/* structure contains size elements.		*/
		string = string || ", ";
		Pelement_desc = addrel(addr(desc(Aoffset-1)), 1);
						/* Aoffset is offset of next structure element	*/
						/*  descriptor from structure descriptor.	*/
		offset = 0;			/* Number of descriptors used up by structure	*/
						/*   element will be stored in offset by the call.*/
		call recurse (Pelement_desc, level+1, Ndim, (j=size&Slast), Spacked, offset, string, Acode);
		if Acode ^= 0 then return;
		Aoffset = Aoffset + offset;		/* Skip over descriptors for this structure el.	*/
		end;
	     end;
RETURN:	return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


cv_num:	proc (n) returns (char(16) varying);

     dcl	n			fixed bin(17),
	n_			fixed bin(35),
	p			pic "---------------9";
	
	p = n;
	go to COMMON;

cv_desc_num_:
	entry (n_) returns (char (16) varying);

	if n_ = star_pl1_size | n_ = star_fort_size	/*   star extent */
	then return ("*");
	else p = n_;
	go to COMMON;


cv_num_:	entry (n_) returns (char(16) varying);

	p = n_;

COMMON:	return (ltrim(p));
	
	end cv_num;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


all_structure_elements_packed:			/* Internal procedure finds out if all elements of*/
	proc returns(bit(1));			/*   a structure are packed.			*/

     dcl	Spacked			bit(1) aligned,
	elem_offset		fixed bin,
	temp_offset		fixed bin;

	elem_offset = Aoffset;			/* Save current offset.			*/
	Spacked = "1"b;				/* Start by assuming all are packed.  Search ends */
	do j = 1 to size while (Spacked);		/*   when first unpacked element is found.	*/
						/* Algorithm in this do loop same as that used	*/
						/*   above for actually emitting elem. dcls.	*/
	     Pelement_desc = addrel(addr(desc(elem_offset-1)),1);
	     temp_offset = 0;
	     call recurse_structure_elements_packed (Pelement_desc, level+1, Ndim, (j=size&Slast),
		Spacked, temp_offset, Acode);
	     if Acode ^= 0 then go to RETURN;
	     elem_offset = elem_offset + temp_offset;
	     end;
	return (Spacked);

	end all_structure_elements_packed;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * 	*/


recurse_structure_elements_packed:
	entry (Pdesc, level, Nignored_dim, Slast, ASpacked, Aoffset, Acode);

	Acode = 0;				/* decode descriptor for structure element, just	*/
	Aoffset = 1;				/*  as for the $recurse entry point.		*/
	call decode_descriptor_ (Pdesc, 0, type, Spacked, Ndim, size, scale);
	if  (1 <= type & type <= 23) | 
	    (33 <= type & type <= 34) | 
	    (43 <= type & type <= 46) then;
	else do;
	     Acode = error_table_$bad_segment;
	     return;
	     end;

	if ^Spacked then do;			/* If structure element unpacked, we can stop now.*/
	     ASpacked = "0"b;
	     return;
	     end;

	if type = 17 then				/* If structure el is another structure, return	*/
						/*   result of testing its elements.		*/
	     ASpacked = all_structure_elements_packed ();

	return;

/*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  **  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  */


	end get_pl1_parm_desc_string_;
