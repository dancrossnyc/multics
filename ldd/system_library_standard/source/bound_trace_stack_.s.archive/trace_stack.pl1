/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* format: style4,delnl,insnl,tree,ifthenstmt,indnoniterend */
trace_stack:
ts:
     procedure options (variable);

/* TRACE_STACK - Produce output on the console for debugging.
   Arguments are:
   .	-bf, -brief	short output
   .	-long, -lg	print octal dump
   .	-depth N, -dh N	go back N frames only
   .	-stack_ptr P, -sp P	start with stack frame at P

   This program is just a small command driver for the guts subroutine "trace_stack_".
   THVV 7/70 */

/* Modified March 1981 by C. Hornig to fix argument parsing bugs. */

dcl  ME char (32) static options (constant) init ("trace_stack");

dcl  argl fixed bin (21),				/* length of arg */
     bchr char (argl) based (tp),			/* for looking at argument */
     nargs fixed bin,				/* number of arguments */
     argno fixed bin,				/* steps thru argument list to command */
     mode fixed bin init (1),				/* output verbosity */
     depth fixed bin init (-1),			/* number of frames to trace back */
     stackp ptr,					/* pointer to ts's stack frame */
     tp ptr,					/* work pointer */
     ec fixed bin (35);				/* file-system error code */

dcl  error_table_$badopt fixed bin (35) ext;
dcl  error_table_$bad_conversion fixed bin (35) ext static;

dcl  com_err_ entry options (variable),
     find_condition_frame_ entry (ptr) returns (ptr),
     trace_stack_ entry (ptr, fixed bin, fixed bin, char (32) aligned),
     cv_dec_check_ entry (char (*), fixed bin (35)) returns (fixed bin),
     cv_ptr_ entry (char (*), fixed bin (35)) returns (ptr),
     cu_$arg_count entry (fixed bin, fixed bin (35)),
     cu_$arg_ptr entry (fixed bin, ptr, fixed bin (21), fixed bin (35)),
     ioa_ entry options (variable);

dcl  null builtin;
%page;
	call cu_$arg_count (nargs, ec);		/* get argument count */
	if ec ^= 0 then do;
	     call com_err_ (ec, ME, "Usage: ts {-bf|-lg} {-dh N} {-sp PTR}");
	     return;
	     end;
	stackp = find_condition_frame_ (null ());	/* default to this stack frame */
	do argno = 1 to nargs;
	     call cu_$arg_ptr (argno, tp, argl, ec);	/* look at all arguments */
	     if ec ^= 0 then go to endarg;

	     if /* case */ (bchr = "-long") | (bchr = "-lg") then mode = 2;
	     else if (bchr = "-brief") | (bchr = "-bf") then mode = 0;
	     else if (bchr = "-depth") | (bchr = "-dh") then do;
		argno = argno + 1;
		call cu_$arg_ptr (argno, tp, argl, ec);
		if ec ^= 0 then do;
		     call com_err_ (ec, ME, "A number must follow -depth.");
		     return;
		     end;
		depth = cv_dec_check_ (bchr, ec);
		if ec ^= 0 then do;
		     call com_err_ (error_table_$bad_conversion, ME, """^a""", bchr);
		     return;
		     end;
		end;
	     else if (bchr = "-sp") | (bchr = "-stack_ptr") then do;
		argno = argno + 1;
		call cu_$arg_ptr (argno, tp, argl, ec);
		if ec ^= 0 then do;
		     call com_err_ (ec, ME, "A virtual pointer must follow -stack_ptr.");
		     return;
		     end;
		stackp = cv_ptr_ (bchr, ec);
		if ec ^= 0 then do;
		     call com_err_ (ec, ME, """^a""", bchr);
		     return;
		     end;
		end;
	     else do;
		call com_err_ (error_table_$badopt, ME, """^a""", bchr);
		return;
		end;
	end;

endarg:
	call trace_stack_ (stackp, mode, depth, "user_output");

	if mode > 0 then call ioa_ ("End of trace.^/");

	return;

     end trace_stack;
