/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(86-05-02,Elhard), approve(86-05-02,MCR7391),
     audit(86-09-04,DGHowe), install(86-11-20,MR12.0-1222):
     Modified to find object MSFs when searching manually and to properly
     display pathnames for MSF targets.
                                                   END HISTORY COMMENTS */


where: wh: procedure options (variable);

/* This command prints the primary pathname of the first segment or
   entry point with a given name found using the object segment search rules.

   Usage:
   where names -control_args-

   where control_args are:

   -all, -a	    list all segments or entry points in the search path.
   -inhibit_error, -ihe supress error message when segment not found and returns null string as AF.
   -entry_point, -ep    look for name$name when name does not contain a $.
   -segment, -sm, -file look for the file named name even if name contains a $.

   The default is to look for an entry point if name contains a $, file otherwise.

   Usage as an active function:

   [where name -control_arg-]

   where control_arg is either -entry_point (-ep) or -file (-segment, -sm).
*/
/* Written 3/5/76 by Steve Herbst */
/* Entry point feature added 12/3/76 by S. Herbst */
/* fixed to show orig not copy if uninitiated seg has copysw on 03/20/80 S. Herbst */
/* Modified: 06/06/80, W. Olin Sibert, to add where -brief */
/* Fixed to work on gates 07/15/81 S. Herbst */
/* Fixed bugs and made -brief -all work 10/06/82 S. Herbst */


%include access_mode_values;

%include branch_status;

%include object_info;
dcl 1 obj_info like object_info;

dcl  refnames (32) char (168);

dcl 1 search_rules aligned,				/* from hcs_$get_search_rules */
    2 rule_count fixed bin,
    2 rule (21) char (168);

dcl 1 search_dirs (21),				/* directories to search through */
    2 dir char (168),
    2 uid bit (36),
    2 rule_number fixed bin;

dcl  area area based (area_ptr);

dcl  arg char (arg_len) based (arg_ptr);
dcl  return_arg char (return_len) varying based (return_ptr); /* if called as active function */
dcl  primary_name char (32) aligned based;
dcl (dn, entry_point_name, name) char (168);
dcl (en, unique_name) char (32);
dcl  out_str char (256);
dcl  type fixed bin (2);

dcl (af_sw, all_sw, brief_sw, long_sw, all_entry_points, all_segments, entry_point, inhibit_error, printed_sw,
     search_manually, some_output, some_segs, terminate, try_initiated_segs, dir_found) bit (1) aligned;

dcl (area_ptr, arg_ptr, entry_point_ptr, names_ptr, return_ptr, seg_ptr) ptr;

dcl  fmode fixed bin (5);
dcl (arg_count, arg_len, dir_count, refname_count, return_len) fixed bin;
dcl (argno, dir_idx, idx, refname_idx, uid_idx) fixed bin;
dcl  bit_count fixed bin (24);
dcl  code fixed bin (35);

dcl (error_table_$badopt,
     error_table_$inconsistent,
     error_table_$dirseg,
     error_table_$no_dir,
     error_table_$no_s_permission,
     error_table_$noentry,
     error_table_$entlong,
     error_table_$not_act_fnc) fixed bin (35) external static;

dcl  complain entry variable options (variable);		/* com_err_ or active_fnc_err_ */
dcl  get_arg variable entry (fixed bin, ptr, fixed bin, fixed bin (35));

dcl  active_fnc_err_ entry options (variable);
dcl  com_err_ entry options (variable);
dcl  cu_$af_arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  cu_$af_return_arg entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  expand_pathname_ entry (char(*), char(*), char(*), fixed bin(35));
dcl  get_definition_ entry (ptr, char (*), char (*), ptr, fixed bin (35));
dcl  get_system_free_area_ entry returns (ptr);
dcl  get_wdir_ entry returns (char (168));
dcl  hcs_$fs_get_mode entry (ptr, fixed bin (5), fixed bin (35));
dcl  hcs_$fs_get_path_name entry (ptr, char (*), fixed bin, char (*), fixed bin (35));
dcl  hcs_$get_search_rules entry (ptr);
dcl  hcs_$fs_get_seg_ptr entry (char (*), ptr, fixed bin (35));
dcl  hcs_$initiate entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr, fixed bin (35));
dcl  hcs_$make_ptr entry (ptr, char (*), char (*), ptr, fixed bin (35));
dcl  hcs_$status_ entry (char (*), char (*), fixed bin (1), ptr, ptr, fixed bin (35));
dcl  hcs_$status_long entry (char (*), char (*), fixed bin (1), ptr, ptr, fixed bin (35));
dcl  hcs_$status_minf entry (char(*), char(*), fixed bin(1), fixed bin(2), fixed bin(24), fixed bin(35));
dcl  hcs_$status_mins entry (ptr, fixed bin(2), fixed bin(24), fixed bin(35));
dcl  hcs_$terminate_name entry (char (*), fixed bin (35));
dcl  hcs_$terminate_noname entry (ptr, fixed bin (35));
dcl  ioa_ entry options (variable);
dcl  ioa_$rsnnl entry options (variable);
dcl  ioa_$nnl entry options (variable);
dcl  object_info_$brief entry (ptr, fixed bin (24), ptr, fixed bin (35));
dcl  pathname_ entry (char (*), char (*)) returns (char (168));
dcl  unique_chars_ entry (bit (*)) returns (char (15));

dcl  WHOAMI char (32) internal static options (constant) init ("where");

dcl  cleanup condition;

dcl (addr, bit, char, hbound, index, length, null, ptr, rtrim, substr) builtin;

/*  */

	all_sw, all_entry_points, all_segments, brief_sw = "0"b;
	inhibit_error, long_sw, search_manually, some_output = "0"b;
	names_ptr = null ();
	area_ptr = get_system_free_area_ ();

	call cu_$af_return_arg (arg_count, return_ptr, return_len, code);
	if code = error_table_$not_act_fnc then do;
	     af_sw = "0"b;
	     complain = com_err_;
	     get_arg = cu_$arg_ptr;
	end;
	else do;
	     af_sw = "1"b;
	     complain = active_fnc_err_;
	     get_arg = cu_$af_arg_ptr;
	     return_arg = "";
	end;

	if arg_count = 0 then do;
USAGE:	     if af_sw then call active_fnc_err_ (0, WHOAMI, "Usage:  [^a refname {-control_args}]", WHOAMI);
	     else call com_err_ (0, WHOAMI, "Usage:  ^a refnames {-control_args}", WHOAMI);
	     goto MAIN_RETURN;
	end;

	on condition (cleanup) call clean_up;

	refname_count = 0;

	do argno = 1 to arg_count;
	     call get_arg (argno, arg_ptr, arg_len, code);

	     if char (arg, 1) ^= "-" then do;		/* a refname we should locate */
		refname_count = refname_count+1;
		if refname_count > hbound (refnames, 1) then do;
		     call complain (0, WHOAMI, "Too many reference names specified. Max is ^d.",
			hbound (refnames, 1));
		     goto MAIN_RETURN;
		end;

		refnames (refname_count) = arg;
	     end;

	     else if (arg = "-all" | arg = "-a") then
		if af_sw then do;
AF_BAD_OPT:
		     call complain (0, WHOAMI, "Control arg not allowed for the active function.  ^a", arg);
		     return;
		end;
		else all_sw = "1"b;

	     else if (arg = "-long" | arg = "-lg") then
		if af_sw then go to AF_BAD_OPT;
		else do;
		     long_sw = "1"b;
		     brief_sw = "0"b;
		end;

	     else if (arg = "-brief" | arg = "-bf") then
		if af_sw then go to AF_BAD_OPT;
		else do;
		     brief_sw = "1"b;
		     long_sw = "0"b;
		end;

	     else if (arg = "-entry_point") | (arg = "-ep") then all_entry_points = "1"b;
	     else if (arg = "-file") | (arg = "-segment") | (arg = "-sm") then all_segments = "1"b;

	     else if (arg = "-inhibit_error") | (arg = "-ihe") then inhibit_error = "1"b;
	     else if (arg = "-no_inhibit_error") | (arg = "-nihe") then inhibit_error = "0"b;
	     else do;
		call complain (error_table_$badopt, WHOAMI, "^a", arg);
		goto MAIN_RETURN;
	     end;
	end;

	if refname_count = 0 | (af_sw & refname_count > 1) then
	     goto USAGE;

	if all_entry_points & all_segments then do;
	     call complain (error_table_$inconsistent, WHOAMI, "-segment and -entry_point");
	     goto MAIN_RETURN;
	end;

	if all_sw & ^brief_sw then long_sw = "1"b;

	if long_sw | all_sw then do;			/* must get search rules, to locate manually */

	     search_manually = "1"b;

	     call hcs_$get_search_rules (addr (search_rules));
	     dir_count = 0;
	     try_initiated_segs = "0"b;

	     do idx = 1 to rule_count;			/* find all the genuine directories */
		if rule (idx) = "initiated_segments" then try_initiated_segs = "1"b;
		else if rule (idx) ^= "referencing_dir" then do;
		     dir_count = dir_count + 1;
		     if rule (idx) = "working_dir" then dir (dir_count) = get_wdir_ ();
		     else dir (dir_count) = rule (idx);
		     rule_number (dir_count) = idx;
		     end;
	     end;
	end;

/*  */

	do refname_idx = 1 to refname_count;		/* Now, decide what to do with each of out reference name */

	     name = refnames (refname_idx);

	     idx = index (name, "$");
	     if (idx ^= 0) & ^all_segments then do;	/* name$entry */
		entry_point_name = substr (name, idx + 1);
		name = substr (name, 1, idx - 1);
		if entry_point_name = "" then entry_point = "0"b;
		else entry_point = "1"b;
	     end;

	     else if all_entry_points then do;		/* -entry_point specified */
		entry_point = "1"b;
		entry_point_name = name;
	     end;

	     else do;
		entry_point = "0"b; 		/* reference name */
		entry_point_name = "";
	     end;

	     if length (rtrim (name)) > 32 then do;
		call complain (error_table_$entlong, WHOAMI, "^a", name);
		goto NEXT;
	     end;

	     else if length (rtrim (entry_point_name)) > 32 then do;
		call complain (error_table_$entlong, WHOAMI, "^a", entry_point_name);
		goto NEXT;
	     end;

/*  */

	     if ^search_manually then do;		/* locate by the usual (linker) mechanism */

		terminate = "0"b;
		call hcs_$fs_get_seg_ptr (name, seg_ptr, code); /* already initiated? */
		if seg_ptr = null then do;
		     terminate = "1"b;
		     call hcs_$make_ptr (null (), name, "", seg_ptr, code);
		     if code ^= 0 then do;
			if ^inhibit_error then call complain (code, WHOAMI, "^a", name);
			goto NEXT;
		     end;
		end;

		call get_pathname (seg_ptr, dn, en, code);
		if code ^= 0 then do;
		     call complain (code, WHOAMI, "^a", name);
		     goto NEXT;
		end;

		if entry_point then do;

		     call find_entry_point;

		     if terminate then call hcs_$terminate_name (name, (0));
		     if code ^= 0 then do;
			call complain (code, WHOAMI, "^a$^a", pathname_ (dn, en), entry_point_name);
			goto NEXT;
		     end;
		end;

		else if terminate then call hcs_$terminate_name (name, code);

		call ioa_$rsnnl ("^a^[$^a^;^s^]", out_str, (0),
		     pathname_ (dn, en), entry_point, entry_point_name);

		if af_sw then do;			/* just assign it to the return arg, and punt */
		     return_arg = out_str;
		     goto MAIN_RETURN;
		end;

		else call ioa_ ("^a", out_str);
	     end;					/* of searching non-manually (via hcs_$make_ptr) */

/*  */

	     else do;				/* we must search for the segment manually */
						/* Note that this is never done for an AF. */
		if (idx > 1) & some_output & all_sw then	/* separate -all outputs by a blank line */
		     call ioa_ ("");

		some_output, some_segs = "0"b;

		if try_initiated_segs then do;	/* search rules contained "initiated_segments" */
		     dir_idx = 0;
		     call hcs_$fs_get_seg_ptr (name, seg_ptr, code);
		     if seg_ptr ^= null () then do;
			some_segs = "1"b;
			call get_pathname (seg_ptr, dn, en, code);
			if code ^= 0 then call complain (code, WHOAMI, "^a", name);

			else do;
			     if entry_point then call find_entry_point ();

			     if code ^= 0 then call complain (code, WHOAMI,
				"^a$^a  Search rule ""initiated_segments""",
				pathname_ (dn, en), entry_point_name);

			     else call print_pathname ();

			     if ^all_sw then go to NEXT;
			end;
		     end;				/* of successfully finding segment by refname */
		end;	 			/* of trying "initiated_segments" */

		do dir_idx = 1 to dir_count;		/* try to initiate in each of the dirs in the search rules */
		     dir_found = "0"b;
		     call hcs_$initiate (dir (dir_idx), name, "", 0, 1, seg_ptr, code);
INITIATED:	     if seg_ptr ^= null then do;
			some_segs = "1"b;
			call get_pathname (seg_ptr, dn, en, code);
			if code ^= 0 then do;
			     code = 0;
			     dn = dir (dir_idx);
			     en = substr (name, 1, 32);
			end;

			if entry_point then call find_entry_point ();
			if code ^= 0 then call complain (code, WHOAMI, "^a$^a (Search rule ""^a"")",
			     pathname_ (dn, en), entry_point_name, rule (rule_number (dir_idx)));

			else call print_pathname ();

			call hcs_$terminate_noname (seg_ptr, (0));
			if ^all_sw then go to NEXT;
		     end;				/* end of case for being able to initiate segment */

		     else if code = error_table_$dirseg & ^dir_found then do;
			call hcs_$status_minf (dir (dir_idx), name, 1, type, bit_count, code);
			if code = 0 & type = 2 & bit_count > 0 then do;
			     dn = pathname_ (dir (dir_idx), name);
			     en = "0";
			     dir_found = "1"b;
			     call hcs_$initiate (dn, en, "", 0, 0, seg_ptr, code);
			     goto INITIATED;
			end;
		     end;				/* end of MSF indirection */
		     
		     else if code ^= error_table_$noentry & code ^= error_table_$no_dir &
		       code ^= error_table_$dirseg then do;

			some_output, some_segs = "1"b;

			if entry_point then call complain (code, WHOAMI, "^a (Search rule ""^a"")",
			     pathname_ (dir (dir_idx), name), rule (rule_number (dir_idx)));

			else do;
			     if brief_sw & all_sw then do;
				call hcs_$status_long (dir (dir_idx), name, 1, addr (branch_status), null, code);
				uid (dir_idx) = branch_status.unique_id;
				printed_sw = "0"b;
				do uid_idx = 1 to dir_idx - 1;	  /* print each path only once */
				     if uid (uid_idx) = branch_status.unique_id then printed_sw = "1"b;
				end;
				if ^printed_sw then call ioa_ ("^a", pathname_ (dir (dir_idx), name));
			     end;
			     else do;
				call hcs_$status_ (dir (dir_idx), name, 1, addr (branch_status), area_ptr, code);
				if code = 0 then do;	/* print formatted line */
				     names_ptr = ptr (area_ptr, branch_status.names_rel_pointer);
				     if long_sw then call ioa_ ("^a (^a) Search rule ""^a""",
					pathname_ (dir (dir_idx), (names_ptr -> primary_name)),
					get_mode_letters (branch_status.mode), rule (rule_number (dir_idx)));
				     else call ioa_ ("^a", pathname_ (dir (dir_idx), name));

				     if ^all_sw then go to NEXT;
				end;

				else if code = error_table_$no_s_permission then
				     call complain (0, WHOAMI,
					"No status permission on ^a (Search rule ""^a"")",
					dir (dir_idx), rule (rule_number (dir_idx)));

				else if code ^= error_table_$noentry then
				     call complain (code, WHOAMI, "^a (Search rule ""^a"")",
					dir (dir_idx), rule (rule_number (dir_idx)));

				else some_output = "0"b;
			     end;
			end;
		     end;				/* of case for unable to initiate segment */
		end;	 			/* of loop through dirs in search rules */

		if ^some_output & ^inhibit_error then
		     if entry_point & some_segs then call complain (0, WHOAMI, "Entry point not found.  ^a$^a",
			name, entry_point_name);
		     else call complain (0, WHOAMI, "Segment not found. ^a", name);

	     end;					/* of case for searching manually */
NEXT:	end;	 				/* end of refname loop */

MAIN_RETURN:
	call clean_up;
	return;

/*  */


clean_up:	proc;

	if names_ptr ^= null then free names_ptr -> primary_name in (area);

end clean_up;


get_pathname: proc (seg_ptr, dn, en, code);

dcl  seg_ptr ptr parameter;
dcl  dn char (*) parameter;
dcl  en char (*) parameter;
dcl  code fixed bin (35) parameter;
dcl  cdn char (168);
dcl  cen char (32);
dcl  type fixed bin (2);
dcl  bc fixed bin (24);

/* This internal procedure gets the pathname of a segment found.  If	*/
/* the segment is an MSF component, it backs up 1 level.		*/
	
	call hcs_$fs_get_path_name (seg_ptr, dn, (0), en, code);
	if code ^= 0
	  then return;
	call hcs_$status_minf (dn, "", 1, type, bc, code);
	if type = 2 & bc > 0 & code = 0
	  then do;
	    call expand_pathname_ (dn, cdn, cen, code);
	    dn = cdn;
	    en = cen;
	  end;
	  
end get_pathname;


find_entry_point: proc;

/* This internal procedure looks for an external definition. */

	call hcs_$fs_get_mode (seg_ptr, fmode, code);
	if fmode < R_ACCESS_BIN then do;		/* inner ring seg: gate? */
						/* make sure make_ptr finds this one */
	     unique_name = unique_chars_ ("0"b);
	     call hcs_$initiate (dn, en, unique_name, 0, 1, seg_ptr, code);
	     call hcs_$make_ptr (null, unique_name, entry_point_name, entry_point_ptr, code);
	     call hcs_$terminate_name (unique_name, 0);
	end;
	else do;
	     call hcs_$status_mins (seg_ptr, (0), bit_count, code);
	     call object_info_$brief (seg_ptr, bit_count, addr (obj_info), code);
	     if code ^= 0 then return;
	     call get_definition_ (obj_info.defp, name, entry_point_name, null, code);
	end;

end find_entry_point;


print_pathname: proc;

	some_output = "1"b;
	call hcs_$fs_get_mode (seg_ptr, fmode, code);
	if code ^= 0 then fmode = 0;

	if long_sw then do;
	     call ioa_$nnl ("^a^[$^a^;^s^] (^a) Search rule ",
		pathname_ (dn, en), entry_point, entry_point_name, get_mode_letters (bit (fmode)));
	     if dir_idx = 0 then call ioa_ ("""initiated_segments""");
	     else call ioa_ ("""^a""", rule (rule_number (dir_idx)));
	end;
	else do;
	     call hcs_$status_long (dn, en, 1, addr (branch_status), null, code);
	     uid (dir_idx) = branch_status.unique_id;
	     printed_sw = "0"b;
	     do uid_idx = 1 to dir_idx-1;		/* only print each path once */
		if uid (uid_idx) = branch_status.unique_id then printed_sw = "1"b;
	     end;
	     if ^printed_sw then call ioa_ ("^a", pathname_ (dn, en));
	end;

end print_pathname;


get_mode_letters: proc (mode_bits) returns (char (4)varying);

dcl  mode_bits bit (5);
dcl  amode char (4) varying;

	amode = "";
	if substr (mode_bits, 2, 1) ^= "0"b then amode = "r";
	if substr (mode_bits, 3, 1) ^= "0"b then amode = amode||"e";
	if substr (mode_bits, 4, 1) ^= "0"b then amode = amode||"w";
	if amode = "" then amode = "null";
	return (amode);

end get_mode_letters;

end where;
