/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


ring0_get_: proc;

/* "Adjusted" by Bernard Greenberg, for hc def seg 07/22/76 */

dcl (sltp1, names_ptr1, defs_ptr1) ptr static init (null),
    (names_ptr2, defs_ptr2) ptr,
    (a_defsp, a_sltp, a_namep, defp, defsp) ptr,
    (i, j) fixed bin,
     hcs_$initiate ext entry (char (*), char (*), char (*), fixed bin, fixed bin, ptr, fixed bin),
     get_definition_ entry (ptr, char (*), char (*), ptr, fixed bin);

dcl  based_bit18 bit (18) aligned based dim (0:511);
dcl  a_defname char (*),
     a_offset fixed bin (18),
     a_type fixed bin;



dcl (error_table_$no_defs, error_table_$noentry) fixed bin (35) ext;
dcl  error_table_$invalidsegno fixed bin (35) ext;

dcl  segptr ptr,
     code fixed bin,
     entryptr ptr,
     dir char (*),
     entry char (*);

dcl  SLDIR char (55) init (">system_library_1") static options (constant);


dcl (addr, addrel, baseno, baseptr, fixed, length, null, reverse, verify) builtin;


/*  */

segptr:	entry (dir, entry, segptr, code);		/* entry to return segment pointer */

	call get_static_ptrs ("0"b);
	segptr = get_segptr ();
	return;


name:	entry (dir, entry, segptr, code);		/* entry to return segment name */

	call get_static_ptrs ("0"b);
	call get_name (segptr, "0"b);			/* 0 => one */
	return;

names:	entry (dir, entryptr, segptr, code);		/* entry to return pointer to names */

	call get_static_ptrs ("0"b);
	call get_name (segptr, "1"b);			/* 1 => many */
	return;

definition: entry (segptr, entry, a_defname, a_offset, a_type, code);

	call get_static_ptrs ("1"b);			/* 1 => get defs ptr */
	if segptr = null then segptr = get_segptr ();
	call get_definition (segptr);
	return;



/* The following entries are the same as the above except that the caller
   supplies a pointer to the SLT and NAME TABLE to use */

segptr_given_slt: entry (dir, entry, segptr, code, a_sltp, a_namep);

	call get_param_ptrs ("0"b);
	segptr = get_segptr ();
	return;

name_given_slt: entry (dir, entry, segptr, code, a_sltp, a_namep);

	call get_param_ptrs ("0"b);
	call get_name (segptr, "0"b);
	return;


definition_given_slt: entry (segptr, entry, a_defname, a_offset, a_type, code, a_sltp, a_namep, a_defsp);

	call get_param_ptrs ("1"b);
	if segptr = null then segptr = get_segptr ();	/* Look up entry if needed */
	call get_definition (segptr);
	return;

/*  */
get_static_ptrs: proc (we_want_defs);

dcl  we_want_defs bit (1) aligned;			/* T => call for defs */

	     code = 0;
	     if we_want_defs & defs_ptr1 = null then call init_static_ptrs;
	     else if names_ptr1 = null then call init_static_ptrs;
	     if code ^= 0 then go to error;
	     sltp = sltp1;
	     names_ptr2 = names_ptr1;
	     defs_ptr2 = defs_ptr1;
	     return;

init_static_ptrs: proc;
		call hcs_$initiate (SLDIR, "slt", "", 0, 1, sltp1, code);
		if sltp1 = null then return;
		call hcs_$initiate (SLDIR, "name_table", "", 0, 1, names_ptr1, code);
		if names_ptr1 = null then return;
		if we_want_defs then do;
		     call hcs_$initiate (SLDIR, "definitions_", "", 0, 1, defs_ptr1, code);
		     if defs_ptr1 = null then return;
		end;
		code = 0;				/* Let's hear it for hcs_$initiate! */
	     end init_static_ptrs;
	end get_static_ptrs;

get_param_ptrs: proc (we_want_defs);

dcl  we_want_defs bit (1) aligned;			/* We want definitions */
	     sltp = a_sltp;
	     names_ptr2 = a_namep;
	     if we_want_defs then defs_ptr2 = a_defsp;
	end get_param_ptrs;

get_segptr: procedure returns (ptr);


	     do i = slt.first_sup_seg to slt.last_sup_seg; /* loop through sup segs searching */
		sltep = addr (slt.seg (i));		/* get pointer to SLT entry */
		namep = addrel (names_ptr2, slte.names_ptr); /* get pointer to names for this segment */
		do j = 1 to namep -> segnam.count;	/* search all names */
		     if entry = namep -> segnam.names (j).name then do; /* found it */
			code = 0;
			return (baseptr (i));
		     end;
		end;
	     end;

	     code = error_table_$noentry;
	     go to error_segptr;
	end get_segptr;

get_name:	procedure (sp, many);

dcl  many bit (1) aligned, sp ptr;

	     i = bin (baseno (sp));			/* get input segment number */
	     if i > slt.last_sup_seg | i < slt.first_sup_seg then do; /* bad input segment number */
		code = error_table_$invalidsegno;
		return;
	     end;

	     sltep = addr (slt.seg (i));		/* get pointer to SLT entry */
	     pathp = addrel (names_ptr2, slte.path_ptr);
	     namep = addrel (names_ptr2, slte.names_ptr);
	     if pathp ^= names_ptr2 then dir = pathp -> path.name; else dir = ""; /* return path name */
	     if many then entryptr = namep;
	     else entry = namep -> segnam.names (1).name; /* return only one name */
	     code = 0;
	end get_name;

get_definition: procedure (textp);
dcl  textp ptr;

	     code = 0;
	     i = bin (baseno (textp));
	     if i < 4 | i > 511 then code = error_table_$no_defs;
	     else do;
		defsp = addrel (defs_ptr2, defs_ptr2 -> based_bit18 (i));
		if defsp = defs_ptr2 then code = error_table_$no_defs;
		else do;
		     call get_definition_ (defsp, entry, a_defname, defp, code);
		     if code = 0 then do;
			a_type = fixed (defp -> definition.class, 3);
			a_offset = fixed (defp -> definition.value, 18);
		     end;
		end;
	     end;

	end get_definition;

error_segptr: segptr = null;
error:	return;
						/*  */
% include slt;
% include slte;
% include definition;
     end;
