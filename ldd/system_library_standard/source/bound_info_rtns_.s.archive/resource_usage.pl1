/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */



/* RESOURCE_USAGE - Procedure to print user's monthly (to date) resource usage and resource limits.
   This procedure gets this info from the user's PIT, where cpg_ put it.

   This procedure is called in any of four modes:

   1) long mode (specify the control_arg -long or -lg);
   this prints the month-to-date charges, resource limits, interactive usage for all shifts,
   absentee usage in all queues, and io daemon usage in all queues.

   2) default mode (called with no control_arg)
   this lists the month-to-date charge, the resource limit, the interactive usage for all shifts, and the
   absentee and io daemon usage for all queues.

   3) brief mode (called specifying the control_arg -brief or -bf)
   this lists the month-to-date charge, the resource limit, and totals for interactive,
   absentee and io daemon usage.

   4) totals mode (called specifying the control_arg -totals or -tt )
   this lists just the month-to-date charge and the resource limit.
*/



/****^  HISTORY COMMENTS:
  1) change(86-02-01,Gilcrease), approve(86-03-27,MCR7369),
     audit(86-06-20,LJAdams), install(86-06-30,MR12.0-1081):
     To make these first comments hcom-acceptible. J. Phillipps and THVV  -
     June 1972 J. Phillipps - revised and upgraded for version 2 PL/1 September
     1972 . - revised for memory and virtual cpu charging on 6180 March 1973 .
     - updated headers and added absolute limit reporting a la sipb April 1976.
     
     T. Casey  - August 1977  - to only print nonzero device charges and to
     print some new ones. C. Hornig - June 1979  - to print usage even if
     charge was zero. E. N. Kittlitz   - June 1981  - UNCA rate structure
     changes
  2) change(86-02-01,Gilcrease), approve(86-05-19,MCR7369),
     audit(86-06-20,LJAdams), install(86-06-30,MR12.0-1081):
               Add 'weekly' to cutoff table array.
                                                   END HISTORY COMMENTS */


resource_usage: ru: procedure;

dcl  crashes char (8) aligned,
     answer char (46) varying,
     answer1 char (47) varying,
     answer2 char (29) varying,
     answer3 char (18) varying,
     j fixed bin,
     logins char (7) aligned,
     datestr char (16) aligned,
     pit_name char (32) int static init ("pit"),
     reset char (16) aligned;				/* formatted string for time last reset PDT */


dcl  an fixed bin init (1),
     al fixed bin (21),
     nargs fixed bin,
     absolute bit (1) init ("0"b),
     cutoff bit (1) init ("0"b),
     month bit (1) init ("0"b),
     ec fixed bin (35),
    (i, ii) fixed bin,
     mode fixed bin init (3),
     temp float bin init (0e0);

dcl (pp, ap) ptr;

dcl  bchr char (al) unaligned based (ap);

dcl  dev_usage_buffer char (160);			/* stuff for printing device usage */
dcl  dub_array (160) char (1) unal based (addr (dev_usage_buffer));
dcl  dubp ptr;
dcl  dubl fixed bin;
dcl  based_dub char (dubl) based (dubp);
dcl (dubi, retlen) fixed bin;
dcl  devh char (8) varying;
dcl  dusw (16) bit (1) aligned;
dcl  rs_name char (32) aligned;
dcl  max_rs_number fixed bin;

dcl  ndevices fixed bin;
dcl 1 dvt (16) aligned,
    2 device_id char (8),
    2 device_price (0:7) float bin;

dcl  MILLION fixed bin (35) internal static init (1000000),
     prettybigfloat float bin int static init (1e36);

dcl  increment (0:6) char (12) aligned initial
    ("never", "daily", "monthly", "yearly", "calendar_yr", "fiscal_yr", "weekly");

dcl (addr, divide, float, length, mod, null, rtrim, substr) builtin;

/* procedures called by this program */

dcl  com_err_ entry options (variable),
     cu_$arg_ptr entry (fixed bin, ptr, fixed bin (21), fixed bin (35)),
     cu_$arg_count entry (fixed bin, fixed bin (35)),
     date_time_ entry (fixed bin (71), char (*) aligned),
     get_pdir_ entry () returns (char (168)),
     hcs_$initiate entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr, fixed bin (35)),
     hcs_$terminate_noname entry (ptr, fixed bin (35)),
     ioa_ entry options (variable),
     ioa_$rsnnl entry options (variable);		/* ctl,retstr,retlen,args */
dcl  system_info_$device_prices entry (fixed bin, ptr);
dcl  system_info_$rs_name entry (fixed bin, char (*) aligned, fixed bin (35));
dcl  system_info_$max_rs_number entry (fixed bin);

dcl  error_table_$badopt fixed bin (35) ext;
dcl  error_table_$too_many_args fixed bin (35) ext;


%include user_attributes;
%include pit;



/* ====================================================== */

	call system_info_$max_rs_number (max_rs_number);

	call hcs_$initiate ((get_pdir_ ()), pit_name, "", 0, 1, pp, ec); /* get ptr to PIT in process dir */
	if pp = null then do;
	     call com_err_ (ec, "resource_usage", "pit");
	     return;
	end;
	call cu_$arg_count (nargs, ec);
	if ec ^= 0 then go to argerr;
	if nargs > 1 then do;
	     call com_err_ (error_table_$too_many_args, "resource_usage", "This command only takes one argument.");
	     return;
	end;

	do an = 1 to nargs;
	     call cu_$arg_ptr (an, ap, al, ec);		/* see which option was specified */
	     if ec ^= 0 then go to argerr;
						/* default mode = 3 */
	     else if bchr = "-long" then mode = 2;	/* if arg specifies long option, set mode */
	     else if bchr = "-lg" then mode = 2;
	     else if bchr = "-brief" then mode = 1;	/* if arg specifies brief option, set mode accordingly */
	     else if bchr = "-bf" then mode = 1;
	     else if bchr = "-tt" | bchr = "-totals" | bchr = "-total" then mode = 0;
						/* if no arg, default mode is an expanded form of brief */
	     else do;
		call com_err_ (error_table_$badopt, "resource_usage", """^a""", bchr);
		return;
	     end;
	end;

	if mode = 0 then do;			/* total mode is specified */
	     call ioa_$rsnnl ("Month-to-Date: $^9.2f; Limit: $^9a; ",
		answer, j, pp -> pit.dollar_charge, (cv_limit (pp -> pit.dollar_limit)));
						/* if cutoff set by proj administrator, print it also */
	     if substr ((cv_limit (pp -> pit.absolute_limit)), 6) = "open" then do;
		call ioa_$rsnnl ("Total: $^9.2f;", answer3, j, pp -> pit.absolute_spent);
		call ioa_ ("^/^a", answer || answer3);
	     end;
	     else do;
		call ioa_$rsnnl ("Total: $^9.2f; Absolute Limit: $^9a; ",
		     answer1, j, pp -> pit.absolute_spent, (cv_limit (pp -> pit.absolute_limit)));
		call date_time_ (pp -> pit.absolute_cutoff, datestr);
		call ioa_$rsnnl ("Reset: ^a, ^a;",
		     answer2, j, substr (datestr, 1, 8), increment (pp -> pit.absolute_increm));
		call ioa_ ("^/^a", answer);
		call ioa_ (answer1 || answer2);
	     end;
	     goto endit1;

	end;
	call date_time_ (pp -> pit.proc_creation_time, datestr); /* usage from beginning of mo. to time process created */
	call date_time_ (pp -> pit.time_last_reset, reset); /* format time last reset PDT */
	call ioa_ ("^/^a.^a  Report from ^a to ^a", pp -> pit.login_name, pp -> pit.project, reset, datestr);
	if max_rs_number > 0 then do;
	     call system_info_$rs_name ((pp -> pit.rs_number), rs_name, ec);
	     if ec ^= 0 then call com_err_ (ec, "resource_usage",
		"For rate structure ^d.  Contact your system administrator.", pp -> pit.rs_number);
	     call ioa_ ("^5xRate Structure -- ^a", rs_name);
	end;

quick:
	if mode = 2 then do;			/* long mode */
	     if substr ((cv_limit (pp -> pit.absolute_limit)), 6) = "open" then do;
		call ioa_$rsnnl ("Month-to-Date: $^9.2f; Limit: $^9a; ",
		     answer, j, pp -> pit.dollar_charge, (cv_limit (pp -> pit.dollar_limit)));
		call ioa_$rsnnl ("Total: $^9.2f;", answer3, j, pp -> pit.absolute_spent);
		call ioa_ (answer || answer3);
	     end;
	     else do;
		call ioa_$rsnnl ("Total: $^9.2f, Absolute Limit: $^9a; ",
		     answer1, j, pp -> pit.absolute_spent, (cv_limit (pp -> pit.absolute_limit)));
		call date_time_ (pp -> pit.absolute_cutoff, datestr);
		call ioa_$rsnnl ("Reset: ^a, ^a;",
		     answer2, j, substr (datestr, 1, 8), increment (pp -> pit.absolute_increm));
		call ioa_ (answer1 || answer2);
	     end;
	end;

	else do;
	     call ioa_ ("Month-To-Date: $^9.2f;  Limit: $^9a;",
		pp -> pit.dollar_charge, (cv_limit (pp -> pit.dollar_limit)));
	end;
	do i = 1 to 7, 0;				/* sum interactive charge */
	     temp = temp + pp -> pit.interactive (i).charge;
	end;
	if temp = 0e0 then do;			/* if no usage, don't print header */
	     call ioa_ ("^/Interactive Usage: none;");
	     go to abstee;
	end;

/*    P R I N T  H E A D E R S  */

	if pp -> pit.crashes = 1 then
	     crashes = "crash.  ";			/* do singular and plural parse */
	else crashes = "crashes.";
	if pp -> pit.logins = 1 then
	     logins = "login, ";
	else logins = "logins,";
	if mode = 2 then do;			/* long mode header for interactive usage */
	     call ioa_ ("^/Interactive Usage: $^8.2f;^2x^2d^1x^8a^2d^1x^7a",
		temp, pp -> pit.logins, logins, pp -> pit.crashes, crashes);
	     call ioa_ ("^4xshift^2x$charge^4x$limit^8xvcpu^4xconnect^4xterminal i/o^2xmemory/kmu");
	end;
	else if mode = 1 then do;			/* brief mode header for interactive usage */
	     call ioa_ ("^/Interactive Usage: $^8.2f;^2x^2d^1x^8a^2d^1x^7a",
		temp, pp -> pit.logins, logins, pp -> pit.crashes, crashes);
	     go to abstee;
	end;
	else if mode = 3 then do;			/* default mode */
	     call ioa_ ("^/Interactive Usage: $^8.2f;^2x^2d^1x^8a^2d^1x^7a",
		temp, pp -> pit.logins, logins, pp -> pit.crashes, crashes);
	     call ioa_ ("^4xshift^2x$charge^4x$limit");
	end;
	temp = 0e0;				/* clear temp */


/*   P R I N T   R E S O U R C E  U S A G E   */


/* print out resource usage */

	do i = 1 to 7, 0;
	     if pp -> pit.shift_limit (i) > prettybigfloat
	     then if pp -> pit.interactive (i).charge = 0e0
		& pp -> pit.interactive (i).cpu = 0
		& pp -> pit.interactive (i).connect = 0
		& pp -> pit.interactive (i).core = 0
		& pp -> pit.interactive (i).io_ops = 0
		then goto skip;			/* don't print useless lines */
	     if mode = 2 then do;			/* long mode */
		call ioa_ ("^5x^1d^4x^8.2f^1x^9a^3x^9a^2x^9a^5x^11.1f^1x^11.1f", i,
		     pp -> pit.interactive (i).charge, (cv_limit (pp -> pit.shift_limit (i))),
		     (cv_time (pp -> pit.interactive (i).cpu)), (cv_time (pp -> pit.interactive (i).connect)),
		     float (pp -> pit.interactive (i).io_ops/1e3), float (pp -> pit.interactive (i).core/1e6));
	     end;
	     else if mode = 3 then do;		/* default mode */
		call ioa_ ("^5x^1d^4x^8.2f^1x^9a", i, pp -> pit.interactive (i).charge,
		     (cv_limit (pp -> pit.shift_limit (i))));
skip2:	     end;
skip:	end;

abstee:	temp = 0e0;				/* clear temp */
	do ii = 1 to 4;				/* scan for absentee usage */
	     temp = temp + pp -> pit.absentee (ii).charge;
	end;
	if temp = 0e0 then do;
	     call ioa_ ("^/Absentee Usage:    none;");
	     go to iod;
	end;
	else call ioa_ ("^/Absentee Usage:    $^8.2f;", temp);
	if mode = 1 then go to iod;			/* brief mode exit here */
	else if mode = 3 then do;			/* default mode */
	     call ioa_ ("^4xqueue^2x$charge^6xjobs");
	     do ii = 1 to 4;
		if pp -> pit.absentee (ii).charge = 0e0 then go to next;
		call ioa_ ("^5x^1d^4x^8.2f^6x^4d", ii, pp -> pit.absentee (ii).charge, pp -> pit.absentee (ii).jobs);
next:	     end;
	end;
	if mode = 2 then do;			/* long mode */
	     call ioa_ ("^4xqueue^2x$charge^6xjobs^8xvcpu^2xmemory/kmu");

	     do ii = 1 to 4;
		if pp -> pit.absentee (ii).charge = 0e0 then go to skip3;
		call ioa_ ("^5x^1d^4x^8.2f^6x^4d^3x^9a^2x^10.1f", ii, pp -> pit.absentee (ii).charge,
		     pp -> pit.absentee (ii).jobs, cv_time (pp -> absentee (ii).cpu),
		     float (pp -> pit.absentee (ii).memory/1e6));
skip3:	     end;
	end;
iod:	temp = 0e0;
	do ii = 1 to 4;
	     temp = temp + pp -> pit.iod (ii).charge;
	end;
	if temp = 0e0 then do;
	     call ioa_ ("^/IO Daemon Usage:   none;");
	     go to device;
	end;
	else call ioa_ ("^/IO Daemon Usage:   $^8.2f;", temp);
	if mode = 1 then go to device;		/* brief mode exit here */
	else if mode = 3 then do;			/* default mode */
	     call ioa_ ("^4xqueue^2x$charge^6xlines");
	     do ii = 1 to 4;
		if pp -> pit.iod (ii).charge = 0e0 then go to next2;
		call ioa_ ("^4x^1x^1d^4x^8.2f^x^10d",
		     ii, pp -> pit.iod (ii).charge, pp -> pit.iod (ii).lines);
next2:	     end;
	end;
	if mode = 2 then do;			/* long mode */
	     call ioa_ ("^4xqueue^2x$charge^4xpieces^7xpages^8xlines");
	     do ii = 1 to 4;
		if pp -> pit.iod (ii).charge = 0e0 then go to skip4;
		call ioa_ ("^4x^1x^1d^4x^8.2f^6x^4d^3x^9d^x^12d",
		     ii, pp -> pit.iod (ii).charge, pp -> pit.iod (ii).pieces,
		     pp -> pit.iod (ii).pages, pp -> pit.iod (ii).lines);
skip4:	     end;
	end;
device:	temp = 0e0;				/* clear temp */
	do ii = 1 to 16;				/* scan for device usage */
	     if pp -> pit.devices (ii) = 0e0
	     then dusw (ii) = ""b;
	     else dusw (ii) = "1"b;
	     temp = temp + pp -> pit.devices (ii);
	end;
	if temp = 0e0 then do;
	     if mode = 2 then
		call ioa_ ("^/Device Usage:   none;");	/* only print in long mode */
	end;
	else do;
	     call ioa_ ("^/Device Usage:      $^8.2f;", temp);

/* The purpose of the following code is to print a column only for devices with nonzero usage. */

	     call system_info_$device_prices (ndevices, addr (dvt)); /* get device names and prices (but only use names) */
	     dev_usage_buffer = "";			/* clear buffer before making heading */
	     dubi = 1;				/* set index to first character position in buffer */
	     do i = 1 to 16;			/* put each device name in heading */
		if dusw (i) then do;		/* but only if it has nonzero usage */
		     devh = rtrim (device_id (i));	/* copy name and see how long it really is */
		     dubi = dubi + 9 - length (devh);	/* compute how far to skip to right-adjust name */
		     substr (dev_usage_buffer, dubi, 1) = "$"; /* put in leading dollar sign */
		     substr (dev_usage_buffer, dubi+1, length (devh)) = devh; /* put in the name */
		     dubi = dubi + 1 + length (devh);	/* advance char index past name */
		end;
	     end;
	     call ioa_ ("^a", dev_usage_buffer);	/* print the heading */

	     dev_usage_buffer = "";			/* clear buffer before formatting usage figures */
	     dubl = length (dev_usage_buffer);		/* initialize char counters */
	     dubi = 1;
	     do i = 1 to 16;			/* print usage for each device */
		if dusw (i) then do;		/* only if it is nonzero */
		     dubp = addr (dub_array (dubi));	/* get addr of where to put next usage field */
		     call ioa_$rsnnl ("^3x^7.2f", based_dub, retlen, pp -> pit.devices (i)); /* format the usage figure */
		     dubl = dubl - retlen;		/* decrement remaining length of buffer */
		     dubi = dubi + retlen;		/* advance index to next available character position */
		end;
	     end;
	     call ioa_ ("^a", dev_usage_buffer);	/* print the usage figures */
	end;
endit:	call ioa_ ("");
endit1:	call hcs_$terminate_noname (pp, ec);
	return;

argerr:	call com_err_ (ec, "resource_usage");
	return;


/* =========================================================== */



cv_time:	procedure (time) returns (char (9) aligned);

/* procedure to convert from fixed bin (71) to a nice formatted string of hrs: mins: secs */



dcl  time fixed bin (71),
     j fixed bin,
     hours fixed bin,
     minutes fixed bin,
     seconds fixed bin,
     answer char (9) aligned;


	     seconds = divide (time, MILLION, 35, 0);
	     minutes = divide (seconds, 60, 35, 0);
	     seconds = mod (seconds, 60);		/* get rid of the remainder */
	     hours = divide (minutes, 60, 35, 0);
	     minutes = mod (minutes, 60);		/* get rid of the remainder */

	     call ioa_$rsnnl ("^3d:^2d:^2d", answer, j, hours, minutes, seconds);
	     if substr (answer, 5, 1) = " " then substr (answer, 5, 1) = "0";
	     if substr (answer, 8, 1) = " " then substr (answer, 8, 1) = "0";

	     return (answer);
	end;




/* = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = */

cv_limit:	procedure (limit) returns (char (9) aligned);

/* procedure to convert a float bin $limit into either the string, "open", if $limit is >= 1e37,
   or to convert a float bin $limit into an integer $limit  */

dcl  limit float bin,
     lim char (9) aligned,
     jj fixed bin,
     itemp fixed bin;


	     if limit >= prettybigfloat then do;
		lim = "     open";
		go to char;
	     end;
	     else do;
		itemp = limit;
		call ioa_$rsnnl ("^6d.00", lim, jj, itemp);
	     end;
char:	     return (lim);
	end;



test_ru:	entry (xpit);				/* enter here if using an experimental PIT */

dcl  xpit char (*);

	pit_name = xpit;



     end resource_usage;
