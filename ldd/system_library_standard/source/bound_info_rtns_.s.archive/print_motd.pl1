/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(87-03-17,Blair), approve(87-03-17,MCR7638),
     audit(87-03-20,Gilcrease), install(87-04-03,MR12.1-1021):
     Implement 5 control arguments to allow printing of project motds, and all
     or new portions of the project or system motds.  The CAs are: -system,
     -project, -all_text, -new_text, -current_project.  Change code not to
     call com_err_ when a value_seg is created for the user by default.
  2) change(87-04-06,Blair), approve(87-04-06,PBF7638), audit(87-04-06,GWMay),
     install(87-04-08,MR12.1-1022):
     Suppress printing the header when the bit_count of the motd is 0 and don't
     print an error message when the default project doesn't exist.
  3) change(87-05-04,Blair), approve(87-05-08,MCR7688),
     audit(87-05-19,Gilcrease), install(87-05-26,MR12.1-1037):
     Banner will be suppressed when the change amounts to deletion of lines
     from the original.
  4) change(87-12-15,Blair), approve(88-01-07,MCR7824),
     audit(88-01-07,LJAdams), install(88-01-12,MR12.2-1012):
     Ignore the error message when the motd segment doesn't exist in all cases.
     TR 20986.
                                                   END HISTORY COMMENTS */

/* Prints all lines in the message-of-the-day (MOTD) segment which have been changed or added since the user last used
   this command */

/* Created:  28 July 1971 by Peter R. Bos */
/* Modified: 14 December 1972 by R. Mullen to convert to version 2 PL/I */
/* Modified: 29 March 1977 by S. Herbst to convert to iox_ */
/* Modified: 14 July 1978 by S. Herbst to use Person_id.motd rather than anonymous.motd for anonymous users */
/* Modified: 12 December 1979 by S. Herbst to fix no_s_permission bug when obtaining date-time-contents-modified */
/* Modified: 23 March 1982 by G. Palter to convert to use the user's value segment */

/* format: style4,delnl,insnl,ifthenstmt,ifthen */


print_motd:
pmotd:
     procedure () options (variable);


/* DECLARATIONS */

dcl  1 user_motd aligned based (user_motd_ptr),
       2 dtcm fixed binary (71),
       2 lth fixed binary (21),
       2 motd character (user_motd_lth refer (user_motd.lth));
dcl  user_motd_ptr pointer;
dcl  user_motd_lth fixed binary (21);

dcl  system_motd character (system_motd_lth) based (system_motd_ptr);
dcl  system_motd_lth fixed binary (21);
dcl  system_motd_ptr pointer;
dcl  system_motd_dtcm fixed binary (71);

dcl  system_area area based (system_area_ptr);
dcl  system_area_ptr pointer;
dcl  user_info_$whoami entry (char(*), char(*));
dcl  code fixed binary (35);

dcl  (used, next_nl) fixed binary (21);

dcl  n_arguments fixed binary;

dcl  PRINT_MOTD character (32) static options (constant) initial ("print_motd");

dcl  NL character (1) static options (constant) initial ("
");

dcl  CHASE fixed binary (1) static options (constant) initial (1);
dcl  DELETE_OR_UNLINK bit (6) static options (constant) initial ("010110"b);

dcl  SYSTEM_CONTROL_DIR character (168) static /* options (constant) */ initial (">system_control_dir");
dcl  MOTD_ENAME character (32) static options (constant) initial ("message_of_the_day");

dcl  DEFAULT_VALUE_SEGMENT pointer static options (constant) initial (null ());
dcl  PERMANENT_VALUE bit (36) aligned static options (constant) initial ("01"b);

dcl  error_table_$action_not_performed fixed binary (35) external;
dcl  error_table_$badopt fixed binary (35) external static;
dcl  error_table_$no_s_permission fixed binary (35) external;
dcl  error_table_$noentry fixed binary (35) external;
dcl  error_table_$oldnamerr fixed binary (35) external;

dcl  iox_$user_output pointer external;
dcl  ioa_ entry() options(variable);
dcl  ioa_$nnl entry() options(variable);
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin(21), fixed bin(35));
dcl  cu_$arg_count entry (fixed binary, fixed binary (35));
dcl  com_err_ entry () options (variable);
dcl  delete_$path entry (character (*), character (*), bit (6), character (*), fixed binary (35));
dcl  get_system_free_area_ entry () returns (pointer);
dcl  hcs_$status_ entry (character (*), character (*), fixed binary (1), pointer, pointer, fixed binary (35));
dcl  initiate_file_ entry (character (*), character (*), bit (*), pointer, fixed binary (24), fixed binary (35));
dcl  iox_$put_chars entry (pointer, pointer, fixed binary (21), fixed binary (35));
dcl  pathname_ entry (character (*), character (*)) returns (character (168));
dcl  terminate_file_ entry (pointer, fixed binary (24), bit (*), fixed binary (35));
dcl  user_info_ entry (character (*));
dcl  user_info_$homedir entry (character (*));
dcl  value_$get_data
	entry (pointer, bit (36) aligned, character (*), pointer, pointer, fixed binary (18), fixed binary (35));
dcl  value_$get_path entry (character (*), fixed binary (35));
dcl  value_$set_data
	entry (pointer, bit (36) aligned, character (*), pointer, fixed binary (18), pointer, pointer,
	fixed binary (18), fixed binary (35));
dcl  value_$set_path entry (character (*), bit (1), fixed binary (35));

dcl  cleanup condition;

dcl  (addr, currentsize, divide, index, null, rtrim, length, substr, unspec) builtin;
dcl  (some_type_specified_sw, need_project, curr_pj_sw, all_sw, new_sw, already_printed, have_project) bit (1) aligned init ("0"b);
dcl  arg_ptr ptr;
dcl  arg_len fixed bin (21);
dcl  arg character (arg_len) based (arg_ptr);
dcl  administrator_ename char (32);
dcl  idx fixed bin;
dcl  person char (22);
dcl  pmotd_value_name character (32);
dcl  proj char (9);
dcl  my_project char (9);
dcl  project_dir character (168);
/**/

	call cu_$arg_count (n_arguments, code);		/* insure we are invoked properly */
	if code ^= 0 then do;
	     call com_err_ (code, PRINT_MOTD);
	     return;
	end;

	call user_info_$whoami (person, proj);
	my_project = proj;

	if n_arguments = 0 then do;
	     call psmotd;
	     call ppmotd;
	     return;
	end;

	system_area_ptr = get_system_free_area_ ();
	do idx = 1 to n_arguments;
	     call cu_$arg_ptr (idx, arg_ptr, arg_len, code);
	     if substr (arg,1,1) = "-" then do;
		if need_project  & ^have_project then do;
		     call com_err_ (error_table_$badopt, PRINT_MOTD, "^a, missing PROJECT", arg);
		     return;
		     end;	     
		else if arg = "-sys" | arg = "-system"
		     then do;
		     some_type_specified_sw = "1"b;
		     need_project = "0"b;
		     end;
		else if arg = "-all_text" | arg = "-all" | arg = "-a" 
		     then do;
			all_sw = "1"b;
			new_sw ="0"b;
			need_project = "0"b;
			end;
		else if arg = "-new_text" | arg = "-new" 
		     then do;
			new_sw = "1"b;
			all_sw = "0"b;
			need_project = "0"b;
			end;
		else if arg = "-project" | arg = "-pj" 
		     then if idx = n_arguments then do;
			call com_err_ (error_table_$badopt, PRINT_MOTD, "missing PROJECT following ^a" , arg);
			return;
			end;
		     else do;
			some_type_specified_sw = "1"b;
			need_project = "1"b;
			have_project = "0"b;
			end;
		else if arg = "-current_project" | arg = "-cpj"
		     then do;
			curr_pj_sw = "1"b;
			need_project = "0"b;
			some_type_specified_sw = "1"b;
			end;
		else do;
		     call com_err_ (error_table_$badopt, PRINT_MOTD, "^a", arg);
		     return;
		     end;
				
		end;                /* arg didn't begin with "-" */
	     else if ^need_project then do;
		call com_err_ (error_table_$badopt, PRINT_MOTD, "^a", arg);
		return;
		end;
	     else have_project = "1"b;
	end;                                   /* no more arguments to process */
     
	if n_arguments ^= 0 & ^some_type_specified_sw then do;      /* only -new or -all */
	     call psmotd;
	     call ppmotd;
	     return;
	     end;

	idx = 1;
	do while (idx <= n_arguments);
	     call cu_$arg_ptr (idx, arg_ptr, arg_len, code);
	    if arg = "-all_text" | arg = "-all" | arg = "-a" | arg = "-new_text" | arg = "-new" then idx = idx + 1;  /* skip over these */
	    else if arg = "-sys" | arg = "-system" then do;
		    idx = idx + 1;
		    call psmotd;
		    end;
	     else if arg = "-current_project" | arg = "-cpj" then do;
		     idx = idx + 1;
		     call ppmotd;
		     end;
	     else do;  /* arg must be a project */
		idx = idx + 1;
		if  idx <= n_arguments then do;
		     call cu_$arg_ptr (idx, arg_ptr, arg_len, code);
		     do while ((substr (arg, 1, 1) ^= "-") & (idx <= n_arguments)); /* loop through all the projects */
			proj = arg;
			call ppmotd;
			idx = idx +1;
			if idx <= n_arguments then
			     call cu_$arg_ptr (idx, arg_ptr, arg_len, code);
		     end;
		end;
		end;
	     end;
	     return;
/* INTERNAL SUBROUTINES */

psmotd:
     procedure ();
	project_dir = ">sc1";
	pmotd_value_name = "print_motd._";
	administrator_ename = MOTD_ENAME;
	call main_body;
     end psmotd;


ppmotd:
     procedure ();
	project_dir = ">udd>" || proj;
	pmotd_value_name = "project_motd." || rtrim (proj) || "._";
	administrator_ename = rtrim (proj) || ".motd";
	if proj = my_project & already_printed then;
	else call main_body;
	if proj = my_project then already_printed = "1"b;
     end ppmotd;

main_body:
          procedure ();
dcl  banner_printed bit (1) aligned;

	system_area_ptr = get_system_free_area_ ();
	user_motd_ptr, system_motd_ptr = null ();	/* for cleanup handler */

	on condition (cleanup)
	     begin;
		if user_motd_ptr ^= null () then free user_motd in (system_area);
		if system_motd_ptr ^= null () then call terminate_file_ (system_motd_ptr, 0, TERM_FILE_TERM, (0));
	     end;

	call get_system_motd ();			/* "fetch" system's MOTD data */

	call get_user_motd ();			/* fetch user's MOTD data from the value segment */

	if user_motd.dtcm >= system_motd_dtcm & ^all_sw then go to RETURN_FROM_PRINT_MOTD;
						/* nothing new added to system MOTD yet */

/* System MOTD has changed since this user last checked it: print any lines which do not appear in the old MOTD */

	banner_printed = "0"b;

	if system_motd_lth > 0 then			/* don't bother if there's nothing in it */
	     if user_motd.lth = 0 | all_sw then do;		/* ... user hasn't seen any of it yet */
		call ioa_ ("^[All messages^;New messages^] in ^a:^/", all_sw, administrator_ename);
		call iox_$put_chars (iox_$user_output, system_motd_ptr, system_motd_lth, (0));
		call ioa_$nnl ("^/");
		end;
	     
	     else do;
		used = 0;
		do while (used < system_motd_lth);
		     begin;
dcl  rest_of_system_motd character (system_motd_lth - used) unaligned defined (system_motd) position (used + 1);
			next_nl = index (rest_of_system_motd, NL);
			if next_nl = 0 then		/* use reset of segment */
			     next_nl = length (rest_of_system_motd);
			begin;
dcl  system_motd_line character (next_nl) unaligned defined (system_motd) position (used + 1);
			     if index (user_motd.motd, system_motd_line) = 0 then do;
				if ^banner_printed then do;
				     call ioa_ ("Changed messages in ^a:^/", administrator_ename);
				     banner_printed = "1"b;
				     end;
				call iox_$put_chars (iox_$user_output, addr (system_motd_line),
				     length (system_motd_line), (0));
				end;
			end;
			used = used + next_nl;
		     end;
		end;
		if substr (system_motd, system_motd_lth, 1) ^= NL then call ioa_ ("^/");
		else call ioa_$nnl ("^/");
	     end;


/* Update user's MOTD to be a copy of the current system MOTD */

	free user_motd in (system_area);		/* get rid of current one */

	user_motd_lth = system_motd_lth;
	allocate user_motd in (system_area) set (user_motd_ptr);

	user_motd.dtcm = system_motd_dtcm;
	user_motd.motd = system_motd;

	call put_user_motd ();			/* put it back into the value segment */

RETURN_FROM_PRINT_MOTD:
	if user_motd_ptr ^= null () then free user_motd in (system_area);

	if system_motd_ptr ^= null () then call terminate_file_ (system_motd_ptr, 0, TERM_FILE_TERM, (0));

	return;

/**/

/* Get the system's MOTD */

get_system_motd:
     procedure ();

dcl  1 short_status aligned like status_branch.short;
dcl  system_motd_bc fixed binary (24);

	call initiate_file_ (project_dir, administrator_ename, R_ACCESS, system_motd_ptr, system_motd_bc, code);
	if code = error_table_$noentry then goto RETURN_FROM_PRINT_MOTD;
	if code ^= 0 then do;
	     call com_err_ (code, PRINT_MOTD, "^a", pathname_ (project_dir, administrator_ename));
	     go to RETURN_FROM_PRINT_MOTD;
	end;
     	if system_motd_bc = 0 then goto RETURN_FROM_PRINT_MOTD; /* segment exists, but no messages */
	
	call hcs_$status_ (project_dir, administrator_ename, CHASE, addr (short_status), null (), code);
	if (code ^= 0) & (code ^= error_table_$no_s_permission) then do;
	     call com_err_ (code, PRINT_MOTD, "Determining date-time modified of ^a.",
		pathname_ (project_dir, administrator_ename));
	     go to RETURN_FROM_PRINT_MOTD;
	end;

	system_motd_lth = divide ((system_motd_bc + 8), 9, 21, 0);
	system_motd_dtcm = cv_fs_time (short_status.dtcm);

	return;

     end get_system_motd;



/* Convert a file-system date/time to a normal clock reading */

cv_fs_time:
     procedure (p_time_bits) returns (fixed binary (71));

dcl  p_time_bits bit (36) parameter;
dcl  time fixed binary (71);

	unspec (time) = (20)"0"b || p_time_bits || (16)"0"b;

	return (time);

     end cv_fs_time;

/**/

/* Get the user's MOTD data from the value segment */

get_user_motd:
     procedure ();

	call value_$get_data (DEFAULT_VALUE_SEGMENT, PERMANENT_VALUE, pmotd_value_name, system_area_ptr, user_motd_ptr,
	     (0), code);

	if (code = error_table_$oldnamerr) | (code = error_table_$noentry) then do;
	     call convert_motd_segment ();
	     call value_$get_data (DEFAULT_VALUE_SEGMENT, PERMANENT_VALUE, pmotd_value_name, system_area_ptr,
		user_motd_ptr, (0), code);
	end;

	if code ^= 0 then do;			/* couldn't find it anywhere: first use of print_motd */
	     user_motd_lth = 0;
	     allocate user_motd in (system_area) set (user_motd_ptr);
	     user_motd.dtcm = 0;
	end;

	return;

/**/

/* Internal to get_user_motd: converts from the old mechanism used to store per-user MOTD data to the value segment.  The
   old mechanism was a segment named Person_id.motd in the user's home directory which contained the text of the last MOTD
   seen; the DTCM of the segment was used to compare against that of the system MOTD */

convert_motd_segment:
	procedure ();

dcl  1 short_status aligned like status_branch.short;

dcl  home_dir character (168);
dcl  person_id character (24);

dcl  old_user_motd character (user_motd_lth) based (old_user_motd_ptr);
dcl  old_user_motd_bc fixed binary (24);
dcl  old_user_motd_ptr pointer;
dcl  old_user_motd_ename character (32);


	     call user_info_$homedir (home_dir);
	     call user_info_ (person_id);
	     old_user_motd_ename = rtrim (person_id) || ".motd";

	     old_user_motd_ptr = null ();		/* for cleanup handler */

	     on condition (cleanup)
		begin;
		     if old_user_motd_ptr ^= null () then
			call terminate_file_ (old_user_motd_ptr, 0, TERM_FILE_TERM, (0));
		end;

	     call initiate_file_ (home_dir, old_user_motd_ename, R_ACCESS, old_user_motd_ptr, old_user_motd_bc, code);
	     if code ^= 0 then return;		/* no old-style MOTD segment */

	     call hcs_$status_ (home_dir, old_user_motd_ename, CHASE, addr (short_status), null (), code);
	     if (code ^= 0) & (code ^= error_table_$no_s_permission) then do;
		call com_err_ (code, PRINT_MOTD, "Determining date-time modified of ^a.",
		     pathname_ (home_dir, old_user_motd_ename));
		short_status.dtcm = ""b;		/* assume it's very old */
	     end;

	     user_motd_lth = divide ((old_user_motd_bc + 8), 9, 21, 0);

	     allocate user_motd in (system_area) set (user_motd_ptr);
	     user_motd.dtcm = cv_fs_time (short_status.dtcm);
	     user_motd.motd = old_user_motd;

	     call put_user_motd ();			/* returns only if OK */

	     call delete_$path (home_dir, old_user_motd_ename, DELETE_OR_UNLINK, PRINT_MOTD, code);
	     if code = 0 then old_user_motd_ptr = null ();/* no longer exists */
	     else if code = error_table_$action_not_performed then
		call com_err_ (0, PRINT_MOTD, "^a is no longer used by this command and should be deleted.",
		     pathname_ (home_dir, old_user_motd_ename));
	     else call com_err_ (code, PRINT_MOTD, "Deleting ^a.", pathname_ (home_dir, old_user_motd_ename));

	     return;

	end convert_motd_segment;

     end get_user_motd;

/**/

/* Put the updated MOTD data into the user's value segment */

put_user_motd:
     procedure ();

	call value_$set_data (DEFAULT_VALUE_SEGMENT, PERMANENT_VALUE, pmotd_value_name, user_motd_ptr,
	     currentsize (user_motd), null (), (null ()), (0), code);

	if code = error_table_$noentry then do;		/* value segment not present: try to create it */
	     call create_default_value_segment ();
	     call value_$set_data (DEFAULT_VALUE_SEGMENT, PERMANENT_VALUE, pmotd_value_name, user_motd_ptr,
		currentsize (user_motd), null (), (null ()), (0), code);
	end;

	if code ^= 0 then do;			/* abort the whole thing if this fails */
	     call com_err_ (code, PRINT_MOTD,
		"Attempting to update message-of-the-day information in default value segment.");
	     go to RETURN_FROM_PRINT_MOTD;
	end;

	return;



/* Internal to put_user_motd: create the default value segment (if possible) */

create_default_value_segment:
	procedure ();

dcl  value_segment_path character (168);

	     call value_$set_path ("", "1"b, code);

	     if code = 0 then do;			/* created it */
		call value_$get_path (value_segment_path, (0));
		call ioa_ ("^a:  Created ^a.", PRINT_MOTD, value_segment_path);
	     end;

	     return;

	end create_default_value_segment;

     end put_user_motd;

/**/

%include access_mode_values;

%include terminate_file;
%page;
%include status_structures;

     end main_body;
     end;
