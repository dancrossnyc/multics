/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

system_info_: proc;

/* SYSTEM_INFO_ - return various information to user about Multics.

   The information is obtained from the header of "whotab"
   or from "installation_parms" or from the correct "rate_structure_x" seg.

   See AG93 (Multics Subroutines and Input/Output Modules) for documentation
   of the following entries:

   $id (installation_id)
   $sysid (sysid)
   $version_id
   $session (session_type)
   $titles (company, dept, companyds, deptds)
   $users (maxusers, nusers, maxunits, nunits)
   $timeup (time)
   $prices (cpu, log, process, core, disk, registration)
   $prices_rs (rs_number, cpu, log, process, core, disk, registration)
   $device_prices (ndevices, addr (dvt))
   $device_prices_rs (rs_number, ndevices, addr (dvt))
   $abs_limits (default_cpu_limits, default_foreground_cpu_limit, max_cpu_limits)
   $abs_prices (farray)
   $default_absentee_queue (default_queue)
   $abs_prices_rs (rs_number, farray)
   $io_prices (farray)
   $io_prices_rs (rs_number, farray)
   $next_shutdown (time, reason, until)
   $last_shutdown (time, erfno)
   $shift_table (stt)
   $access_ceiling (access_ceiling)
   $level_names (long_names, short_names)
   $category_names (long_names, short_names)
   $log_threshold (state, npages)
   $next_shift_change (cur_shift, change_time, new_shift, start_time)
   $ARPANET_host_number (host_num)
   $resource_price (price_name, price, code)
   $resource_price_rs (rs_number, price_name, price, code)
   $rs_name (rs_number, rs_name, code)
   $rs_number (rs_name, rs_number, code)
   $max_rs_number (rs_count)

   See AN-66 (AS PLM) for documentation of the following internal interfaces:

   $abs_chn (evchn, pid)
   $request_chn (pid, event_channel, mseg_dname, mseg_ename)

   Written by THVV
   Modified 741231 by PG to add entries for new AIM fields.
   Modified 750324 by PG to rename $dial_chn to $request_chn.
   Modified 750912 by PG to give request facility its own process id.
   Modified 751103 by PG to complain if can't initiate whotab/installation_parms.
   Modified April 1976 by T. Casey to return shift start time as fourth argument to next_shift_change entry point.
   Modified 761229 by D. M. Wells to add $ARPANET_host_number entry point.
   Modified May 1978 by T. Casey to add resource_price entry point.
   Modified November 1978 by T. Casey for MR7.0 to add arguments to abs_limits entry point.
   Modified July 1979 by J. N. R. Barnecut for MR8.0 to add rate_structure entry points. (UNCA)
   Modified Feb 1980 by M. B. Armstrong for further changes re rate_structure. (UNCA)
   Modified 17 September 1980 by G. Palter to add default_absentee_queue entrypoint.
   Modified June 1981 by E. N. Kittlitz for UNCA rate structures.
   Modified May 1983 by Art Beattie to add version_id entry.
   Modified 1984-06-19 BIM to make ARPA return -1 all the time.
                           to add trusted_path_flags entrypoint.
   Modified 840619 for session entry and to use initiate_file_ and friends... -E. A. Ranzenbach
*/

/****^  HISTORY COMMENTS:
  1) change(85-10-24,Spitzer), approve(85-10-24,MCR7280),
     audit(85-12-05,Lippard), install(85-12-16,MR12.0-1001):
     Return "shutdown" rather than the null string if the system was shutdown
     rather than crashed.
  2) change(87-04-28,GDixon), approve(87-07-23,MCR7741),
     audit(87-07-24,Brunelle), install(87-08-04,MR12.1-1055):
     Updated for change to user_table_entry.incl.pl1.
  3) change(88-06-03,Parisek), approve(88-06-10,MCR7920),
     audit(88-06-23,Hunter), install(87-07-05,MR12.2-1053):
     Change reference of pitmsg.incl.pl1 to pit.incl.pl1 as the
     pitmsg.incl.pl1 name was removed from pit.incl.pl1 in MR12.1.
                                                   END HISTORY COMMENTS */
	return;

/* parameters */

dcl  rs_number fixed bin,
     rs_name char (*),
     ndev fixed bin,
     devp ptr;

/* entries */

dcl  absolute_pathname_ entry (char (*), char (*), fixed bin (35));
dcl  active_all_rings_data$version_id ext char (8);
dcl  com_err_ entry options (variable);
dcl  cu_$arg_count entry (fixed bin);
dcl  cu_$arg_ptr entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  datebin_$next_shift_change entry (fixed bin (71), fixed bin (71), fixed bin, fixed bin);
dcl  get_pdir_ entry () returns (char (168));
dcl  initiate_file_ entry (char(*), char(*), bit(*), ptr, fixed bin(24), fixed bin(35));
dcl terminate_file_ entry (ptr, fixed bin(24), bit(*), fixed bin(35));

/* automatic */

dcl  ap ptr,					/* ptr to arg */
     al fixed bin,					/* lth of arg */
     arg_offset fixed bin,
     cur_rs_ptr ptr init (null),
     ec fixed bin (35),
     nargs fixed bin,
    (i, j) fixed bin,
     t71 fixed bin (71),
    (t1, t2) fixed bin;

/* based */

dcl  bchr char (al) based (ap),			/* character arg */
     bfix fixed bin (35) based (ap),			/* fixed bin arg */
     bflo float bin (27) based (ap),			/* float bin arg */
     b71 fixed bin (71) based (ap),			/* dbl prec arg */
     b36 bit (36) aligned based (ap),			/* bit (36) arg */
     bfa (0: 7) float bin (27) based (ap),		/* float array arg */
     based_fixed_array (4) fixed bin (35) based (ap),	/* fixed array arg */
     based_shift_queue_array (0:7, 4) fixed bin (35) based (ap); /* array arg for per-shift-and-queue absentee parms */

/* internal static */

dcl (whoptr, pp) ptr int static init (null);
dcl  rs_ptrs (0:9) ptr int static init ((10) null);
dcl  ip ptr defined (rs_ptrs (0));
dcl  sysdir char (168) int static init (">system_control_1");

/* builtins */

dcl (char, clock, fixed, hbound, ltrim, max, null, string) builtin;

/* include files */

%include access_mode_values;

%include installation_parms;
%include rate_structure;
%include trusted_path_flags;
%include whotab;

%include pit;

%include terminate_file;

%include user_attributes;

%include user_table_entry;

/* ======================================================== */

installation_id: entry;

	if whoptr = null then call setup;

	call cu_$arg_ptr (1, ap, al, ec);		/* Get ptr to string argument. */
	if ec ^= 0 then return;
	bchr = installation_parms.installation_id;

	return;

/* -------------------------------------------------------- */

sysid:	entry;

	if whoptr = null then call setup;

	call cu_$arg_ptr (1, ap, al, ec);
	if ec ^= 0 then return;
	bchr = whotab.sysid;

	return;


/* -------------------------------------------------------- */

version_id:
	entry;

	call cu_$arg_ptr (1, ap, al, ec);
	if ec ^= 0 then return;
	bchr = active_all_rings_data$version_id;

	return;

/* -------------------------------------------------------- */

session:
	entry;

	if whoptr = null then call setup ();

	call cu_$arg_ptr (1, ap, al, ec);
	if ec ^= 0 then return;
	bchr = whotab.session;

	return;

/* -------------------------------------------------------- */

titles:	entry;

	if whoptr = null then call setup;

	call cu_$arg_ptr (1, ap, al, ec);
	if ec ^= 0 then return;
	bchr = installation_parms.company;
	call cu_$arg_ptr (2, ap, al, ec);
	if ec ^= 0 then return;
	bchr = installation_parms.department;
	call cu_$arg_ptr (3, ap, al, ec);
	if ec ^= 0 then return;
	bchr = installation_parms.companyds;
	call cu_$arg_ptr (4, ap, al, ec);
	if ec ^= 0 then return;
	bchr = installation_parms.departmentds;

	return;

/* -------------------------------------------------------- */

users:	entry;

	if whoptr = null then call setup;

	call cu_$arg_ptr (1, ap, al, ec);
	if ec ^= 0 then return;
	bfix = whotab.mxusers;
	call cu_$arg_ptr (2, ap, al, ec);
	if ec ^= 0 then return;
	bfix = whotab.n_users;
	call cu_$arg_ptr (3, ap, al, ec);
	if ec ^= 0 then return;
	bfix = whotab.mxunits;
	call cu_$arg_ptr (4, ap, al, ec);
	if ec ^= 0 then return;
	bfix = whotab.n_units;

	return;

/* -------------------------------------------------------- */

timeup:	entry;

	if whoptr = null then call setup;

	call cu_$arg_ptr (1, ap, al, ec);
	if ec ^= 0 then return;
	b71 = whotab.timeup;

	return;

/* -------------------------------------------------------- */

next_shutdown: entry;

	if whoptr = null then call setup;

	call cu_$arg_ptr (1, ap, al, ec);
	if ec ^= 0 then return;
	b71 = whotab.nextsd;
	call cu_$arg_ptr (2, ap, al, ec);
	if ec ^= 0 then return;
	if whotab.why < "" then bchr = "";
	else bchr = whotab.why;
	call cu_$arg_ptr (3, ap, al, ec);
	if ec ^= 0 then return;
	b71 = whotab.until;

	return;

/* -------------------------------------------------------- */

last_shutdown: entry;

	if whoptr = null then call setup;

	call cu_$arg_ptr (1, ap, al, ec);
	if ec ^= 0 then return;
	b71 = whotab.lastsd;
	call cu_$arg_ptr (2, ap, al, ec);
	if ec ^= 0 then return;
	bchr = whotab.erfno;
	if bchr = "" then bchr = "shutdown";

	return;

/* -------------------------------------------------------- */

rates:
prices:	entry;

	call setup_user_rs;
	arg_offset = 0;

rates_join:
	call cu_$arg_ptr (arg_offset + 1, ap, al, ec);
	if ec ^= 0 then return;
	do i = 0 to 7;
	     bfa (i) = rate_structure.cpu_price (i);
	end;
	call cu_$arg_ptr (arg_offset + 2, ap, al, ec);
	if ec ^= 0 then return;
	do i = 0 to 7;
	     bfa (i) = rate_structure.log_base_price (i);
	end;
	call cu_$arg_ptr (arg_offset + 3, ap, al, ec);
	if ec ^= 0 then return;
	do i = 0 to 7;
	     bfa (i) = rate_structure.io_ops_price (i);
	end;
	call cu_$arg_ptr (arg_offset + 4, ap, al, ec);
	if ec ^= 0 then return;
	do i = 0 to 7;
	     bfa (i) = rate_structure.core_price (i);
	end;
	call cu_$arg_ptr (arg_offset + 5, ap, al, ec);
	if ec ^= 0 then return;
	bflo = rate_structure.disk_price;
	call cu_$arg_ptr (arg_offset + 6, ap, al, ec);
	if ec ^= 0 then return;
	bflo = rate_structure.registration_price;

	return;

/* -------------------------------------------------------- */

rates_rs:
prices_rs: entry (rs_number);

	call setup_rs (rs_number);
	arg_offset = 1;
	go to rates_join;

/* -------------------------------------------------------- */

device_rates:
device_prices: entry (ndev, devp);

dcl 1 dvt (16) aligned based,
    2 device_id char (8),
    2 device_price (0: 7) float bin;

	call setup_user_rs;
	arg_offset = 0;

device_rates_join:
	ndev = rate_structure.ndevices;
	call cu_$arg_ptr (arg_offset + 2, ap, al, ec);
	if ec ^= 0 then return;
	if devp ^= null then do i = 1 to rate_structure.ndevices;
	     devp -> dvt.device_id (i) = rate_structure.devtab.device_id (i);
	     do j = 0 to 7;
		devp -> dvt.device_price (i, j) = rate_structure.devtab.device_price (i, j);
	     end;
	end;

	return;

/* -------------------------------------------------------- */

device_rates_rs:
device_prices_rs: entry (rs_number, ndev, devp);

	call setup_rs (rs_number);
	arg_offset = 1;
	go to device_rates_join;

/* -------------------------------------------------------- */

/* dcl system_info_$abs_limits ((4) fixed bin (35), fixed bin (35), (0:7,4) fixed bin (35));
   call system_info_$abs_limits (default_cpu_limits, default_foreground_cpu_limit, max_cpu_limits); */


abs_limits:
	entry;

	if whoptr = null then call setup;

	call cu_$arg_ptr (1, ap, al, ec);
	if ec ^= 0 then return;

	based_fixed_array (*) = installation_parms.abs_cpu_default_limit (*);

	call cu_$arg_ptr (2, ap, al, ec);
	if ec ^= 0 then return;

	bfix = installation_parms.foreground_cpu_default_limit;

	call cu_$arg_ptr (3, ap, al, ec);
	if ec ^= 0 then return;

	based_shift_queue_array (*, *) = installation_parms.abs_cpu_max_limit (*, *);

	return;

/* -------------------------------------------------------- */

default_absentee_queue: entry;

	if whoptr = null then call setup;

	call cu_$arg_ptr (1, ap, al, ec);
	if ec ^= 0 then return;

	bfix = installation_parms.default_absentee_queue;

	return;

/* -------------------------------------------------------- */

abs_prices: entry;

	call setup_user_rs;
	arg_offset = 0;

abs_prices_join:
	call cu_$arg_ptr (arg_offset + 1, ap, al, ec);
	if ec ^= 0 then return;
	do i = 1 to 4;
	     bfa (i-1) = rate_structure.abs_cpu_price (i);
	end;
	call cu_$arg_ptr (arg_offset + 2, ap, al, ec);
	if ec ^= 0 then return;
	do i = 1 to 4;
	     bfa (i-1) = rate_structure.abs_mem_price (i);
	end;

	return;

/* -------------------------------------------------------- */

abs_prices_rs: entry (rs_number);

	call setup_rs (rs_number);
	arg_offset = 1;
	go to abs_prices_join;

/* -------------------------------------------------------- */

io_prices: entry;

	call setup_user_rs;
	arg_offset = 0;

io_prices_join:
	call cu_$arg_ptr (arg_offset + 1, ap, al, ec);
	if ec ^= 0 then return;
	do i = 1 to 4;
	     bfa (i-1) = rate_structure.iod_rec_price (i);
	end;

	return;

/* --------------------------------------------------------- */

io_prices_rs: entry (rs_number);

	call setup_rs (rs_number);
	arg_offset = 1;
	go to io_prices_join;

/* ------------------------------------------------------- */

abs_chn:	entry (ev, pid);

dcl  ev fixed bin (71), pid bit (36);

	if whoptr = null then call setup;

	call cu_$arg_count (nargs);

	ev = whotab.abs_event;
	if nargs > 1 then pid = whotab.abs_procid;

	return;

/* ------------------------------------------------------ */

next_shift_change: entry (curshft, shftime, newshft, starttime);

dcl (curshft, newshft) fixed bin, (shftime, starttime) fixed bin (71);

	call cu_$arg_count (nargs);

	call datebin_$next_shift_change ((clock ()), t71, t1, t2);
	curshft = t1;
	if nargs > 1 then shftime = t71;
	if nargs > 2 then newshft = t2;
	if nargs > 3 then do;
	     if whoptr = null then call setup;
	     starttime = whotab.last_shift_change_time;
	end;

	return;

/* -------------------------------------------------------- */

shift_table: entry (stt);

dcl  stt (336) fixed bin;

	if whoptr = null then call setup;

	do i = 1 to 336;
	     stt (i) = fixed (installation_parms.shifttab (i), 3);
	end;

	return;

/* -------------------------------------------------------- */

request_chn:
	entry;

	if whoptr = null then call setup;

	call cu_$arg_ptr (1, ap, al, ec);
	if ec ^= 0 then return;
	b36 = whotab.request_process_id;

	call cu_$arg_ptr (2, ap, al, ec);
	if ec ^= 0 then return;
	b71 = whotab.request_channel;

	call cu_$arg_ptr (3, ap, al, ec);
	if ec ^= 0 then return;
	bchr = sysdir;

	call cu_$arg_ptr (4, ap, al, ec);
	if ec ^= 0 then return;
	bchr = "as_request.ms";

	return;

/* -------------------------------------------------------- */

access_ceiling:
	entry (access_ceiling);

dcl  access_ceiling bit (72) aligned;

	if whoptr = null then call setup;

	access_ceiling = installation_parms.access_authorization_ceiling;
	return;

/* -------------------------------------------------------- */

log_threshold:
	entry;

dcl (state char (al), npages fixed bin) based (ap);

	if whoptr = null then call setup;

	call cu_$arg_ptr (1, ap, al, ec);
	if ec ^= 0 then return;

	i = installation_parms.syserr_log_copy_threshold;

	if i < 0 then state = "off";
	else if i = 0 then state = "default";
	else state = "on";

	call cu_$arg_ptr (2, ap, al, ec);
	if ec = 0 then npages = max (i, 0);

	return;

/* -------------------------------------------------------- */

level_names:
	entry;

dcl (long_level_names char (32), short_level_names char (8)) dim (0:7) based (ap);

	if whoptr = null then call setup;

	call cu_$arg_ptr (1, ap, al, ec);
	if ec ^= 0 then return;
	long_level_names (*) = installation_parms.level_names (*);

	call cu_$arg_ptr (2, ap, al, ec);
	if ec = 0 then short_level_names (*) = installation_parms.short_level_names (*);

	return;

/* -------------------------------------------------------- */

category_names:
	entry;

dcl (long_category_names char (32), short_category_names char (8)) dim (18) based (ap);

	if whoptr = null then call setup;

	call cu_$arg_ptr (1, ap, al, ec);
	if ec ^= 0 then return;
	long_category_names (*) = installation_parms.category_names (*);

	call cu_$arg_ptr (2, ap, al, ec);
	if ec = 0 then short_category_names (*) = installation_parms.short_category_names (*);

	return;

/* -------------------------------------------------------- */

ARPANET_host_number:
	entry;

	if whoptr = null then call setup;

	call cu_$arg_ptr (1, ap, al, ec);
	if ec ^= 0 then return;
	bfix = -1;

	return;

/* -------------------------------------------------------- */

resource_price: entry (a_price_name, a_price, a_code);

dcl  a_price_name char (*);
dcl  a_price float bin;
dcl  a_code fixed bin (35);

dcl  error_table_$noentry ext fixed bin (35);

	call setup_user_rs;

resource_price_join:
	do i = 1 to rate_structure.nrscp;
	     if a_price_name = rate_structure.resource (i).name then do;
		a_price = rate_structure.resource (i).price;
		a_code = 0;
		return;
	     end;
	end;
	a_code = error_table_$noentry;
	a_price = 0;
	return;

/* -------------------------------------------------------- */

resource_price_rs: entry (rs_number, a_price_name, a_price, a_code);

	call setup_rs (rs_number);
	go to resource_price_join;

/* -------------------------------------------------------- */

rs_name:	entry (rs_number, rs_name, a_code);

	if whoptr = null then call setup;

	if rs_number < 0 | rs_number > whotab.n_rate_structures then do;
	     a_code = error_table_$noentry;
	     rs_name = " INVALID_RS_" || ltrim (char (rs_number)); /* leading space so it won't match any name */
	end;
	else do;
	     a_code = 0;
	     rs_name = installation_parms.rate_structures (rs_number);
	end;
	return;

/* --------------------------------------------------------- */

rs_number: entry (rs_name, rs_number, a_code);

	if whoptr = null then call setup;

	do i = 0 to whotab.n_rate_structures;
	     if installation_parms.rate_structures (i) = rs_name then do;
		rs_number = i;
		a_code = 0;
		return;
	     end;
	end;

	a_code = error_table_$noentry;
	rs_number = 0;
	return;

/* --------------------------------------------------------- */

max_rs_number: entry (rs_count);

dcl  rs_count fixed bin;

	if whoptr = null then call setup;
	rs_count = whotab.n_rate_structures;
	return;

/* --------------------------------------------------------- */

trusted_path_flags:
	entry (stp);

dcl  stp bit (36) aligned;

	if whoptr = null then call setup;
	trusted_path_flags = "0"b;
	trusted_path_flags.login = installation_parms.trusted_path_login;
	stp = string (trusted_path_flags);
	return;

/* --------------------------------------------------------- */

setup:	proc;

dcl  ec fixed bin (35);

	     call initiate_file_  (sysdir, "whotab", R_ACCESS, whoptr, 0, ec);
	     if whoptr = null
	     then call com_err_ (ec, "system_info_", "^a>whotab", sysdir);

	     call initiate_file_ (sysdir, "installation_parms", R_ACCESS, ip, 0, ec);
	     if ip = null
	     then call com_err_ (ec, "system_info_", "^a>installation_parms", sysdir);
	end setup;

/* --------------------------------------------- */

setup_rs:	proc (rsnum);

dcl  ec fixed bin (35);
dcl  rsnum fixed bin;
dcl  rsn fixed bin;
dcl  en char (32);

	     if whoptr = null then call setup;

	     if rsnum < 0 | rsnum > whotab.n_rate_structures then do;
		call com_err_ (0, "system_info_", "Invalid rate_structure number ^d. Default rates will be used.", rsnum);
		rsn = 0;
	     end;
	     else rsn = rsnum;

	     if rs_ptrs (rsn) = null then do;
		en = "rate_structure_" || ltrim (char (rsn));
		call initiate_file_ (sysdir, en, R_ACCESS, rs_ptrs (rsn), 0, ec);
		if rs_ptrs (rsn) = null then do;
		     call com_err_ (ec, "system_info_", "^a>^a.  Default rates will be used.", sysdir, en);
		     rsn = 0;			/* user loses if rsn already 0 */
		end;
	     end;
	     cur_rs_ptr = rs_ptrs (rsn);

	end setup_rs;

/* --------------------------------------------- */

setup_user_rs: proc;

dcl  ec fixed bin (35);
dcl  rsn fixed bin;

	     if pp = null then call initiate_file_ (get_pdir_ (), "pit", R_ACCESS, pp, 0, ec);
	     if pp = null then do;
		call com_err_ (ec, "system_info_", "pit");
		rsn = 0;
	     end;
	     else rsn = pp -> pit.rs_number;
	     call setup_rs (rsn);

	end setup_user_rs;

/* --------------------------------------------- */

test_system_info: entry (xdirn);

dcl  xdirn char (*) parameter;
dcl  nsd char (168);

	call absolute_pathname_ (xdirn, nsd, ec);
	if ec ^= 0 then do;
	     call com_err_ (ec, "system_info_$test_system_info", xdirn);
	     return;
	end;
	sysdir = nsd;
	if whoptr ^= null then			/* need to cleanup? */
	     call terminate_file_ (whoptr, 0, TERM_FILE_TERM, ec);
	whoptr = null;				/* re-initiate whotab and installation_parms */
	do i = 0 to hbound (rs_ptrs, 1);		/* more tidying? */
	     if rs_ptrs (i) ^= null then do;
		call terminate_file_ (rs_ptrs (i), 0, TERM_FILE_TERM, ec);
		rs_ptrs (i) = null;
	     end;
	end;

	return;

     end system_info_;
