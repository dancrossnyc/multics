/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* format: style4 */
who: procedure;

/* WHO - print information about who's on Multics.

   HMU, HOW_MANY_USERS - give header lines with nusers and load.

   This command types out the userid's of listed logged-in users
   from the segment "whotab", which is maintained by the answering service
   program "lg_ctl_". The possible arguments are as follows:

   .      -bf       suppress header  (not allowed for af)
   .	-lg	print "long who"  (not allowed for af)
   .	-nm	sort lines on user name
   .	-pj	sort lines on project id
   .		(the default sort is by time logged in)
   .	-as	print information on absentee users
   .	-ia	print information on interactive users
   .	-dmn	print information on daemon users
   .		(default is -as -ia if none of -as -ia -dmn given)
   .      -all      -as, -ia -dmn
   .	Name	list only users with person name "Name"
   .	.Proj	list only users with project name "Proj"
   .	Name.Proj	list only users with person name "Name" and project "Proj"

   Initial coding by THVV, 9/6/70 */
/* changed for absentee by EDS 7/71 */
/* various changes by RBR 7/72      */
/* error messages changed 09/15/78 S. Herbst */
/* Modified May 1979 by T. Casey and S. Herbst for MR7.0a to add -interactive and -daemon,
   and to list foreground absentee users correctly */
/* who active function added 01/12/81 S. Herbst */
/* 12/24/81 E. N. Kittlitz.  whotab changes */
/* 9/82 BIM -all, no daemons by default */
/* 11/82 E. N. Kittlitz. list daemons if name explicitly given, do selection for af call */
/* 06/84 J A Falksen. Utilize date_time_$format("date_time"|"^<date>!!^<time>"... */

dcl  return_arg char (return_len) varying based (return_ptr);
dcl  return_ptr ptr;
dcl  return_len fixed bin;
dcl  af_sw bit (1);


dcl  argno fixed bin init (1),			/* number of argument */
     arg_count fixed bin,
     ap ptr,					/* ptr to argument */
     al fixed bin,					/* lth of argument */
     ec fixed bin (35),				/* file-system error code */
     (f1, f2) float bin,				/* conversion temps */
     sort fixed bin init (0),				/* type of sort. 0=date, 1=name, 2=proj */
     hmucnt fixed bin init (0),			/* number of names|projects in */
     abscnt fixed bin init (0),			/* hmucnt as absentee users */
     long bit (1) aligned init ("0"b),			/* 1 if long who wanted */
     abs bit (1) aligned init ("0"b),			/* 1 if listing absentee users */
     only_abs bit (1) aligned init ("0"b),		/* if only listing absentees */
     daemon bit (1) aligned init ("0"b),		/* if listing daemon users */
     interactive bit (1) aligned init ("0"b),		/* if listing interactive users */
     brief bit (1) aligned init ("0"b),			/* 1 for no heading at all */
     hmuflg bit (1) aligned init ("0"b),		/* selective hmu flag */
     selx fixed bin init (0),				/* if particular users wanted */
     dotl fixed bin,				/* location of dot in arg */
     nm (50) char (24) aligned,			/* user names wanted */
     pj (50) char (12) aligned,			/* user projs wanted */
     caller char (14) varying,			/* name of caller to com_err */
     why char (128) aligned,				/* reason for shutdown */
     arg char (al) unaligned based (ap),		/* pickup for args */
     sort_arg char (32) init (""),
     whoptr ptr int static init (null),			/* ptr to whotab */
     ip ptr int static init (null),			/* ptr to installation_parms */
     sysdir char (64) aligned int static init (">system_control_1"), /* name of dir in which who table resides */
     date_l fixed bin,
     j fixed bin,					/* index */
     d fixed bin,					/* distance between sorted elems */
     last fixed bin,				/* highest index in whotab */
     swap fixed bin,				/* 1 if a swap was done */
     ajd fixed bin,					/* temp for sort, ary(j+d) */
     sss char (1) aligned init ("s"),			/* pretty for user-not-on */
     (time, time1) char (64)var init (""),		/* ASCII time */
     aj fixed bin,					/* temp, ary(j) */
     did fixed bin init (0),				/* count of lines printed */
     mark char (3) aligned,				/* denotation of absentee user if = "*" */
     k fixed bin;					/* index */

%include whotab;

%include installation_parms;

dcl  complain entry variable options (variable);

dcl  ioa_ ext entry options (variable),			/* library procedures */
     active_fnc_err_ entry options (variable),
     com_err_ ext entry options (variable),
     date_time_$format entry (char(*), fixed bin(71), char(*), char(*)) returns(char(250) var),
     cu_$af_return_arg entry (fixed bin, ptr, fixed bin, fixed bin (35)),
     cu_$arg_ptr ext entry (fixed bin, ptr, fixed bin, fixed bin (35)),
     hcs_$initiate ext entry (char (*) aligned, char (*), char (*), fixed bin (1), fixed bin (2), ptr, fixed bin (35)),
     requote_string_ entry (char (*)) returns (char (*));

dcl  (after, before, divide, hbound, index, null, rtrim, substr) builtin;
dcl  (error_table_$badopt,
     error_table_$not_act_fnc,
     error_table_$too_many_args) ext fixed bin;

/* - - - - - - - - - - */

	caller = "who";				/* set name of caller to com_err_ */
	go to join;

how_many_users: hmu: entry;

	caller = "how_many_users";
	hmuflg = "1"b;

join:
	call cu_$af_return_arg (arg_count, return_ptr, return_len, ec);
	if ec = error_table_$not_act_fnc then do;
	     af_sw = "0"b;
	     complain = com_err_;
	end;
	else if caller = "how_many_users" then do;
	     call active_fnc_err_ (0, caller, "Cannot be called as an active function.");
	     return;
	end;
	else do;
	     af_sw = "1"b;
	     complain = active_fnc_err_;
	end;

	do argno = 1 to arg_count;
	     call cu_$arg_ptr (argno, ap, al, ec);	/* get nth argument */

	     if arg = "-absentee" | arg = "-as" then abs = "1"b;
	     else if arg = "-daemon" | arg = "-dmn" then daemon = "1"b;
	     else if arg = "-interactive" | arg = "-ia" then interactive = "1"b;
	     else if arg = "-all" | arg= "-a" then interactive, daemon, abs = "1"b;
	     else if arg = "-name" | arg = "-nm" then sort = 1;
	     else if arg = "-project" | arg = "-pj" then sort = 2;

	     else if arg = "-brief" | arg = "-bf" then
		if af_sw then do;
BAD_AF_OPT:	     call active_fnc_err_ (0, caller, "Invalid active function control arg ^a", arg);
		     return;
		end;
		else brief = "1"b;
	     else if arg = "-long" | arg = "-lg" then
		if af_sw then go to BAD_AF_OPT;
		else long = "1"b;

	     else if substr (arg, 1, 1) = "-" then do;	/* then it must be a name or project */
bad_opt:		call complain (error_table_$badopt, caller, "^a", arg);
		return;
	     end;
	     else do;				/* save Name | .Project */
		selx = selx + 1;			/* up index in select array */
		if selx > hbound (nm, 1) then do;
		     call complain (error_table_$too_many_args, caller);
		     return;
		end;
		nm (selx), pj (selx) = "";		/* blank selectors */
		dotl = index (arg, ".");		/* where's the dot? */
		if dotl = 0 then nm (selx) = arg;	/* no dot. is user name. */
		else if dotl = 1 then pj (selx) = substr (arg, 2, al - 1);
		else do;				/* dot in middle, is name.proj */
		     nm (selx) = substr (arg, 1, dotl - 1); /* get name */
		     pj (selx) = substr (arg, dotl + 1, al - dotl);
		end;
	     end;
	     if sort ^= 0 & hmuflg then go to bad_opt;
	end;

	if ^interactive & ^abs & ^daemon then do;	/* if process type not specified */
	     interactive, abs = "1"b;			/* default is to list abs and ia */
	     if selx > 0 then daemon = "1"b;		/* but if name/proj given, list everything */
	end;
	only_abs = abs & ^interactive & ^daemon;	/* see if abs only */

go:	if whoptr = null then do;			/* is this the first call? */
	     call hcs_$initiate (sysdir, "whotab", "", 0, 1, whoptr, ec);
	     if whoptr = null then do;
		call complain (ec, caller, "^a>whotab", sysdir);
		return;
	     end;
	end;

	if ^brief & ^af_sw then do;			/* suppress header */
	     if hmuflg then go to head;		/* always a header for hmu, except after brief */
	     if selx = 0 then do;			/* no header with who select */
		if only_abs			/* what type absentee header if any */
		then if long
		     then go to print_long_abs_totals;
		     else go to print_abs_totals;
head:		f1 = whotab.n_units / 10.0e0;		/* format up units */
		f2 = whotab.mxunits / 10.0e0;		/* ... */
		j = whotab.n_users - whotab.abs_users - whotab.fg_abs_users - whotab.n_daemons; /* compute interactive users */

		if long then do;			/* long who? */
		     if ip = null then do;
			call hcs_$initiate (sysdir, "installation_parms", "", 0, 1, ip, ec);
			if ip = null then do;
			     call complain (ec, caller, "Insufficient access for -long option");
			     return;
			end;
		     end;
		     time = date_time_$format ("date_time", whotab.timeup, "", ""); /* yup. make heading */
		     call ioa_ ("^/Multics ^a; ^a", whotab.sysid, installation_parms.installation_id);
		     call ioa_ ("Load = ^.1f out of ^.1f units; users = ^d, ^d interactive, ^d daemons.",
			f1, f2, whotab.n_users, j, whotab.n_daemons);
		     if (whotab.abs_users + whotab.max_abs_users) ^= 0
		     then				/* ! */
print_long_abs_totals:	call ioa_ ("^[^/^]Absentee users = ^d background^[, ^d foreground^;^s^]; Max background absentee users = ^d^[^/^]",
			     only_abs, whotab.abs_users, (whotab.fg_abs_users > 0), whotab.fg_abs_users, whotab.max_abs_users, only_abs);
		     if only_abs then go to check_hmu;
		     call ioa_ ("System up since ^a", time);
		     if whotab.nextsd ^= 0 then do;
			why = whotab.why;
			if why < "" then why = "";
			time = date_time_$format ("date_time", whotab.nextsd, "", "");
			if whotab.until = 0 then call ioa_ ("Scheduled shutdown at ^a ^a", time, why);
			else do;
			     time1 = date_time_$format ("date_time", whotab.until, "", "");
			     call ioa_ ("Scheduled shutdown from ^a to ^a ^a", time, time1, why);
			end;
		     end;
		     time = date_time_$format ("date_time", whotab.lastsd, "", "");
		     if whotab.erfno = "crash" then call ioa_ ("Last crash was at ^a^/", time);
		     else if whotab.lastsd = 0 then call ioa_ ("");
		     else if whotab.erfno = "" then call ioa_ ("Last shutdown was at ^a^/", time);
		     else call ioa_ ("Last crash (ERF ^a) was at ^a^/", whotab.erfno, time);
		     if hmuflg then if selx = 0 then return;
			else go to shell_sort;
		     call ioa_ ("^4xLogin at^6xTTY  Load^3xUser ID^/");
		end;
		else do;				/* short who. */
		     call ioa_ ("^/Multics ^a, load ^.1f/^.1f; ^d users, ^d interactive, ^d daemons.",
			whotab.sysid, f1, f2, whotab.n_users, j, whotab.n_daemons);
		     if (whotab.max_abs_users + whotab.abs_users) ^= 0
		     then				/* print absentee totals under certain conditions */
print_abs_totals:		call ioa_
			     ("^[^/^]Absentee users ^d/^d^[^x(+^d FG)^;^s^]^[^/^]",
			     only_abs, whotab.abs_users, whotab.max_abs_users, (whotab.fg_abs_users > 0), whotab.fg_abs_users, only_abs);
		     if ^abs then call ioa_ ("");
		end;
	     end;
	end;
check_hmu:
	if hmuflg & selx = 0			/* if a simple hmu entry then finished */
	then return;

shell_sort: last = whotab.laste;			/* save high limit on whotab */
	if hmuflg then go to count;			/* go to selective hmu counting */

	begin;

dcl  sort_array (last) fixed bin;

	     do j = 1 to last;			/* set up sort array */
		sort_array (j) = j;			/* ... */
	     end;

	     d = last;				/* set up for Shell sort */
pass:	     d = divide (d + 1, 2, 17, 0);		/* ... */
	     swap = 0;				/* ... */
	     do j = 1 to last - d;			/* comparison loop */
		aj = sort_array (j);		/* make temps */
		ajd = sort_array (j + d);		/* ... */
		if sort = 0 then if whotab.timeon (aj) > whotab.timeon (ajd) then go to ic;
		if sort = 1 then if whotab.person (aj) > whotab.person (ajd) then go to ic;
		if sort = 2 then if whotab.project (aj) > whotab.project (ajd) then go to ic;
		     else if whotab.project (aj) = whotab.project (ajd) then if whotab.person (aj)
			     > whotab.person (ajd) then do; /* Are items in order? */
ic:			     sort_array (j) = ajd;	/* No. Swap entries */
			     sort_array (j + d) = aj; /* ... */
			     swap = swap + 1;	/* remember a swap */
			end;
	     end;
	     if swap > 0 then go to pass;		/* if out of order do it again */
	     if d > 1 then go to pass;		/* ... */



	     time1 = "%%%%";			/* make sure it won't match (time) later on. */
	     if af_sw then return_arg = "";

	     do j = 1 to last;			/* now the print loop */
		aj = sort_array (j);		/* set up speed temp */
		if whotab.active (aj) = 0 then go to skip; /* skip deads */
		if selx = 0 then go to print;		/* any users selected? */
		do k = 1 to selx;			/* check for selected users */
		     if nm (k) = whotab.person (aj) then if pj (k) = "" then go to print;
			else if pj (k) = whotab.project (aj) then go to print;
		     if nm (k) = "" then if pj (k) = whotab.project (aj) then go to print;
		end;
		go to skip;			/* user not in selected group */

print:
		if whotab.proc_type (aj) = 1 & ^interactive
		     | whotab.proc_type (aj) = 2 & ^abs
		     | whotab.proc_type (aj) = 3 & ^daemon
		then goto skip;

		if af_sw then do;
		     if return_arg ^= "" then return_arg = return_arg || " ";
		     return_arg = return_arg ||
			requote_string_ (rtrim (whotab.person (aj)) || "." || rtrim (whotab.project (aj)));
		     go to skip;
		end;

		if whotab.proc_type (aj) ^= 2 then	/* if not absentee */
		     mark = "";			/* clear absentee flag */
		else if whotab.fg_abs (aj) then	/* if foreground absentee */
		     mark = "*FG";			/* flag it as such */
		else mark = "*";			/* else flag it as background absentee */

		did = did + 1;			/* remember we did one */
		if long then do;			/* long who? */
		     time = date_time_$format ("^<date>!! ^<time>", whotab.timeon (aj), "", "");
/****		     Suppress date if it's the same as last printed date */
		     date_l = index (time, "!!")-1;
		     if substr (time, 1, date_l) = substr (time1, 1, date_l)
		     then substr (time, 1, date_l) = " ";
		     else time1 = time;
		     f1 = whotab.units (aj) / 10.0e0;	/* get nice units */
		     call ioa_ ("^va ^a  ^4a ^4.1f^3x^a.^a^a^x^[D^]^[S^]",
			date_l, before (time, "!!"), after (time, "!!"),
		          whotab.idcode (aj), f1, whotab.person (aj), whotab.project (aj),
			mark, whotab.disconnected (aj), whotab.suspended (aj));
		end;
		else do;				/* short who. */
		     call ioa_ ("^a.^a^a^x^[D^]^[S^]", whotab.person (aj), whotab.project (aj), mark,
			whotab.disconnected (aj), whotab.suspended (aj));
		end;

skip:	     end;

	end;

	if ^af_sw then do;
	     if ^brief then

		if did = 0 then do;			/* if printed nobody */
		     if selx = 1 then if nm (1) ^= "" then sss = "";
		     call ioa_ ("User^a not logged in.", sss);
		end;

	     call ioa_ ("");			/* extra CR */
	end;

	return;					/* done. */

/* - - - - - - - - */


count:	do j = 1 to selx;				/* selective hmu counting */
	     hmucnt = 0;				/* reset counters */
	     abscnt = 0;

	     if nm (j) = "" then do;			/* selected project counting */
		do aj = 1 to last;
		     if pj (j) = whotab.project (aj) then
			if whotab.proc_type (aj) ^= 2
			then hmucnt = hmucnt + 1;
			else abscnt = abscnt + 1;
		end;
		call ioa_ (".^a = ^d + ^d*", pj (j), hmucnt, abscnt);
	     end;

	     if nm (j) ^= "" then
		if pj (j) ^= ""			/* selected name.project counting */
		then do;
		     do aj = 1 to last;
			if nm (j) = whotab.person (aj)
			then if pj (j) = whotab.project (aj)
			     then if whotab.proc_type (aj) ^= 2
				then hmucnt = hmucnt + 1;
				else abscnt = abscnt + 1;
		     end;
		     call ioa_ ("^a.^a = ^d + ^d*", nm (j), pj (j), hmucnt, abscnt);
		end;
		else do;				/* selected name counting */
		     do aj = 1 to last;

			if nm (j) = whotab.person (aj) then
			     if whotab.proc_type (aj) ^= 2
			     then hmucnt = hmucnt + 1;
			     else abscnt = abscnt + 1;
		     end;
		     call ioa_ ("^a = ^d + ^d*", nm (j), hmucnt, abscnt);
		end;
	end;
	return;

who_init: entry (system_directory);			/* entry used for testing who command */

dcl  system_directory char (*);

	sysdir = system_directory;			/* copy name of directory containing who table */

	whoptr = null;				/* set pointer to null */

	return;

     end who;
