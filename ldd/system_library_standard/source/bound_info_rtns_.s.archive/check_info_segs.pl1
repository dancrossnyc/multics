/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* Check directories for new info segments.

   This command remarks about any file in a directory in the "info_segments"
   search list or in user-supplied directories with the dtem greater than the
   last_time_looked.  The last_time_looked is kept in the user's default
   value segment.

   The active function returns the selected info seg names separated by spaces

   Rewritten 24-Oct-78 by Monte Davidoff.
   Modified February 1979 by Michael R. Jordan for unsigned changes to star_structures.incl.pl1. */
/* No_s bug obtaining dtcm's fixed 12/12/79 S. Herbst */
/* Implement [cis], -absolute_pathname, and fix bugs 06/11/80 S. Herbst */
/* Implement -time_checked Sept 1980  Marshall Presser */
/* Implement discarding of duplicates when same segment identified twice 81/02/11 Paul Benjamin */
/* Modified: 14 January 1982 by G. Palter to convert to using the default value segment */
/* Modified 08/08/83 by Jim Lippard to improve performance, make -brief without
   -call useful, and to not talk about zero length segs as having changed */
/* Modified 05/25/84 by Jim Lippard to fix bug in link checking and to make
   check_links just free star structures on cleanup rather than returning
   (which could result in the message "No changed info segments" being
   printed) */

/* format: style4,delnl,insnl,ifthenstmt,ifthen */

check_info_segs:
cis:
     procedure () options (variable);

dcl  arg_count fixed binary;
dcl  arg_length fixed binary (21);
dcl  arg_ptr pointer;
dcl  argx fixed binary;
dcl  call_str_length fixed binary (21);
dcl  call_str_ptr pointer;
dcl  change_sw bit (1);
dcl  code fixed binary (35);
dcl  complain entry variable options (variable);
dcl  dir_name char (168);
dcl  duplicate bit (1);
dcl  entryname char (32);
dcl  last_time_looked fixed binary (71);
dcl  link_array_entry_length fixed binary;
dcl  link_array_ptr ptr;
dcl  return_len fixed binary (21);
dcl  return_ptr pointer;
dcl  target_dname char (168);
dcl  target_ename char (32);
dcl  temp_segment_ptr (2) ptr;
dcl  uid_list_count fixed binary;
dcl  uid_list_index fixed binary;
dcl  uid_list_ptr ptr;
dcl  1 link_array aligned based (link_array_ptr),
       2 n_links fixed bin (21),
       2 links (0 refer (link_array.n_links)),
         3 check_dname char (168) aligned,
         3 print_dname char (168) aligned,
         3 check_ename char (32) aligned,
         3 print_ename char (32) aligned,
         3 check bit (1) aligned,
         3 n_passes fixed bin;
dcl  1 sw,
       2 absp bit (1),
       2 af bit (1),
       2 brief bit (1),
       2 call bit (1),
       2 long bit (1),
       2 pathname bit (1),
       2 update bit (1),
       2 check_time bit (1);
dcl  time_checked char (24);
dcl  type fixed binary (2);
dcl  update_time fixed binary (71);

dcl  arg_string char (arg_length) based (arg_ptr);
dcl  return_arg char (return_len) varying based (return_ptr);
dcl  uid_list (uid_list_count) bit (36) based (uid_list_ptr) aligned;

dcl  (addr, binary, clock, currentsize, divide, empty, hbound, index, length, null, rtrim, substr, wordno) builtin;

dcl  (cleanup, program_interrupt) condition;

dcl  DEFAULT_VALUE_SEGMENT pointer static options (constant) initial (null ());
dcl  PERMANENT_VALUE bit (36) aligned static options (constant) initial ("01"b);
dcl  CIS_VALUE_NAME character (17) static options (constant) initial ("check_info_segs._");
dcl  TERMINATE_FILE bit (4) internal static options (constant) initial ("0010"b);
dcl  NO_CHASE fixed bin (1) int static options (constant) init (0);
dcl  TRUE bit (1) internal static options (constant) initial ("1"b);
dcl  FALSE bit (1) internal static options (constant) initial ("0"b);

dcl  command char (32) internal static options (constant) initial ("check_info_segs");

dcl  error_table_$badopt fixed binary (35) external static;
dcl  error_table_$no_dir fixed binary (35) external static;
dcl  error_table_$noentry fixed binary (35) external static;
dcl  error_table_$nomatch fixed binary (35) external static;
dcl  error_table_$not_act_fnc fixed binary (35) external static;
dcl  error_table_$oldnamerr fixed binary (35) external static;

dcl  active_fnc_err_ entry () options (variable);
dcl  active_fnc_err_$suppress_name entry () options (variable);
dcl  com_err_ entry () options (variable);
dcl  com_err_$suppress_name entry () options (variable);
dcl  convert_date_to_binary_ entry (char (*), fixed binary (71), fixed binary (35));
dcl  cu_$af_return_arg entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl  cu_$arg_ptr entry (fixed binary, pointer, fixed binary (21), fixed binary (35));
dcl  cu_$cp entry (pointer, fixed binary (21), fixed binary (35));
dcl  date_time_ entry (fixed binary (71), char (*));
dcl  expand_pathname_ entry (char (*), char (*), char (*), fixed binary (35));
dcl  get_system_free_area_ entry () returns (pointer);
dcl  get_temp_segments_ entry (char (*), (*) ptr, fixed bin (35));
dcl  hcs_$get_link_target entry (char (*), char (*), char (*), char (*), fixed bin (35));
dcl  hcs_$star_dir_list_
	entry (char (*), char (*), fixed binary (3), pointer, fixed binary, fixed binary, pointer, pointer,
	fixed binary (35));
dcl  hcs_$status_long entry (char (*), char (*), fixed bin (1), ptr, ptr, fixed bin (35));
dcl  hcs_$status_minf entry (char (*), char (*), fixed bin (1), fixed bin (2), fixed bin (24), fixed bin (35));
dcl  initiate_file_ entry (char (*), char (*), bit (*), ptr, fixed bin (24), fixed bin (35));
dcl  ioa_ entry () options (variable);
dcl  pathname_ entry (char (*), char (*)) returns (char (168));
dcl  release_temp_segment_ entry (char (*), ptr, fixed bin (35));
dcl  requote_string_ entry (char (*)) returns (char (*));
dcl  search_paths_$get entry (char (*), bit (36), char (*), pointer, pointer, fixed binary, pointer, fixed binary (35));
dcl  sort_items_indirect_$char entry (ptr, ptr, fixed bin (21));
dcl  sys_info$maxlinks ext fixed bin;
dcl  sys_info$max_seg_size fixed bin (35) ext static;
dcl  terminate_file_ entry (ptr, fixed bin (24), bit (*), fixed bin (35));
dcl  user_info_ entry (char (*));
dcl  user_info_$homedir entry (char (*));
dcl  value_$get_data entry (ptr, bit (36) aligned, char (*), ptr, ptr, fixed bin (18), fixed bin (35));
dcl  value_$get_path entry (char (*), fixed bin (35));
dcl  value_$set_data
	entry (ptr, bit (36) aligned, char (*), ptr, fixed bin (18), ptr, ptr, fixed bin (18), fixed bin (35));
dcl  value_$set_path entry (char (*), bit (1), fixed bin (35));

/**/

	call cu_$af_return_arg (arg_count, return_ptr, return_len, code);
	if code = error_table_$not_act_fnc then do;
	     sw.af = FALSE;
	     complain = com_err_;
	end;
	else do;
	     sw.af = TRUE;
	     complain = active_fnc_err_;
	     return_arg = "";
	end;

	link_array_ptr = null ();
	sl_info_p = null ();
	star_entry_ptr = null ();
	star_names_ptr = null ();
	uid_list_ptr = null ();

	on cleanup call cleanup_;

	last_time_looked = 0;			/* none yet supplied */
	sw.absp = FALSE;
	sw.brief = FALSE;
	sw.call = FALSE;
	sw.long = FALSE;
	sw.pathname = FALSE;
	sw.check_time = FALSE;
	sw.update = TRUE;
	change_sw = FALSE;
	call_str_length = 0;


	do argx = 1 to arg_count;

	     call cu_$arg_ptr (argx, arg_ptr, arg_length, code);
	     if code ^= 0 then do;
		call complain (code, command, "Fetching argument #^d.", argx);
		return;
	     end;

	     if arg_string = "-absolute_pathname" | arg_string = "-absp" then sw.absp = TRUE;

	     else if arg_string = "-brief" | arg_string = "-bf" then
		if sw.af then
		     go to BAD_OPT;
		else sw.brief = TRUE;

	     else if arg_string = "-call" then do;
		if sw.af then go to BAD_OPT;
		sw.call = TRUE;
		argx = argx + 1;
		call cu_$arg_ptr (argx, call_str_ptr, call_str_length, code);
		if code ^= 0 then do;
		     call complain (code, command, "Missing command line after -call.");
		     return;
		end;
	     end;

	     else if arg_string = "-date" | arg_string = "-dt" then do;
		sw.update = FALSE;
		argx = argx + 1;
		call cu_$arg_ptr (argx, arg_ptr, arg_length, code);
		if code ^= 0 then do;
		     call complain (code, command, "Missing date after -date.");
		     return;
		end;

		call convert_date_to_binary_ (arg_string, last_time_looked, code);
		if code ^= 0 then do;
		     call complain (code, command, "^a", arg_string);
		     return;
		end;

		if last_time_looked > clock () then do;
		     call complain (0, command, "The date/time is in the future. ^a", arg_string);
		     return;
		end;
	     end;

	     else if arg_string = "-long" | arg_string = "-lg" then
		if sw.af then
		     go to BAD_OPT;
		else sw.long = TRUE;

	     else if arg_string = "-no_update" | arg_string = "-nud" then sw.update = FALSE;

	     else if arg_string = "-time_checked" | arg_string = "-tmck" then sw.check_time = TRUE;

	     else if arg_string = "-pathname" | arg_string = "-pn" then do;
		sw.pathname = TRUE;
		argx = argx + 1;
		call cu_$arg_ptr (argx, arg_ptr, arg_length, code);
		if code ^= 0 then do;
		     call complain (code, command, "Missing star pathname after -pathname.");
		     return;
		end;

		call expand_pathname_ (arg_string, dir_name, entryname, code);
		if code ^= 0 then do;
		     call complain (code, command, "^a", arg_string);
		     return;
		end;
	     end;

	     else if is_control_arg (arg_string) then do;
BAD_OPT:
		call complain (error_table_$badopt, command, "^a", arg_string);
		return;
	     end;

	     else do;
		if sw.af then
		     call active_fnc_err_$suppress_name (0, command, "Usage:  [^a {-control_args}]", command);
		else call com_err_$suppress_name (0, command, "Usage:  ^a {-control_args}", command);
		return;
	     end;
	end;

	if sw.af & sw.check_time then
	     if arg_count > 1 then do;
		call complain (0, command, "The -time_checked control argument is incompatible with any others.");
		return;
	     end;

/**/

	if last_time_looked = 0 then			/* if user didn't supply a date/time on the command line */
	     call get_time (last_time_looked);

	if sw.check_time then do;
	     call date_time_ (last_time_looked, time_checked);
	     if sw.af then
		if last_time_looked = 0 then do;
		     call complain (0, command,
			"There is no initial date in the user profile on when info segments were last checked.");
		     return;
		end;
		else do;
		     return_arg = requote_string_ (time_checked);
		     return;
		end;

	     else do;
		if last_time_looked = 0 then do;
		     call complain (0, command,
			"There is no initial date in the user profile on when info segments were last checked.");
		     return;
		end;
		else call ioa_ ("Info segments were last checked on ^a", time_checked);
		if arg_count = 1 then return;
	     end;
	end;

	update_time = clock ();			/* avoids missing segments if -call is used */

	if sw.update & last_time_looked = 0 then do;
	     if ^sw.af then
		call ioa_ ("^a: ^a", command,
		     "Initializing date stored in default value segment on which info segments were last checked.");
	     call put_time (update_time);
	     return;
	end;

	call get_temp_segments_ (command, temp_segment_ptr, code);
	if code ^= 0 then do;
	     call complain (code, command);
	     call cleanup_;
	     return;
	end;

	uid_list_ptr = temp_segment_ptr (1);
	link_array_ptr = temp_segment_ptr (2);

	uid_list_count = 0;
	link_array.n_links = 0;

	if sw.pathname then do;
	     do argx = 1 to arg_count;

		call cu_$arg_ptr (argx, arg_ptr, arg_length, code);
		if code = 0 then
		     if arg_string = "-pathname" | arg_string = "-pn" then do;
			argx = argx + 1;
			call cu_$arg_ptr (argx, arg_ptr, arg_length, code);
			call expand_pathname_ (arg_string, dir_name, entryname, code);
			call check_directory (dir_name, entryname);
		     end;
		     else if arg_string = "-call" | arg_string = "-date" | arg_string = "-dt" then argx = argx + 1;
	     end;
	end;
	else do;
	     call search_paths_$get ("info_segments", sl_control_default, "", null (), get_system_free_area_ (),
		sl_info_version_1, sl_info_p, code);
	     if code ^= 0 then do;
		call complain (code, command, "info_segments");
		call cleanup_;
		return;
	     end;

	     do argx = 1 to sl_info.num_paths;
		call check_directory (sl_info.paths (argx).pathname, "**.info");
	     end;
	end;

	call check_links ();

	if ^change_sw & ^sw.brief & ^sw.af then call ioa_ ("No changed info segments.");

	if sw.update then call put_time (update_time);

RETURN_FROM_CHECK_INFO_SEGS:
	call cleanup_;

	return;

/**/

/* Check a directory for changed info segments */

check_directory:
     procedure (dir_name, star_name);

dcl  dir_name char (*);				/* (Input) directory to search */
dcl  star_name char (*);				/* (Input) star name of segments to check */

dcl  entryx fixed binary;


	on program_interrupt goto done_checking_dir;

	star_select_sw = star_ALL_ENTRIES_WITH_LINK_PATHS;
	call hcs_$star_dir_list_ (dir_name, star_name, star_select_sw, get_system_free_area_ (), star_branch_count,
	     star_link_count, star_list_branch_ptr, star_list_names_ptr, code);

	if code ^= 0 & code ^= error_table_$nomatch & code ^= error_table_$no_dir & ^sw.brief then
	     call complain (code, command, "^a", pathname_ (dir_name, star_name));
						/* in particular, >doc>iml_info may be empty or non-existent */

	else do entryx = 1 to hbound (star_links, 1);
	     if star_links (entryx).type = star_SEGMENT then
		call check_segment (dir_name, star_list_names (star_dir_list_branch (entryx).nindex), dir_name,
		     star_list_names (star_dir_list_branch (entryx).nindex), star_dir_list_branch (entryx).dtem);
	     else if star_links (entryx).type = star_LINK then do;
		if link_array.n_links > 1 then do;
		     if link_array.n_links = 2 then
			link_array_entry_length =
			     wordno (addr (link_array.links (2))) - wordno (addr (link_array.links (1)));
		     if currentsize (link_array) + link_array_entry_length > sys_info$max_seg_size then do;
			call complain ((0), command, "Too many links.");
			call cleanup_;
			return;
		     end;
		end;
		link_array.n_links = link_array.n_links + 1;
		star_linkx = entryx;
		call expand_pathname_ (star_link_pathname, target_dname, target_ename, (0));
		link_array.print_dname (link_array.n_links) = dir_name;
		link_array.print_ename (link_array.n_links) = star_list_names (star_dir_list_branch (entryx).nindex);
		link_array.check_dname (link_array.n_links) = target_dname;
		link_array.check_ename (link_array.n_links) = target_ename;
		link_array.check (link_array.n_links) = TRUE;
		link_array.n_passes (link_array.n_links) = 1;
	     end;
	end;

done_checking_dir:
	if star_list_names_ptr ^= null () then do;
	     free star_list_names;
	     star_list_names_ptr = null ();
	end;
	if star_list_branch_ptr ^= null () then do;
	     free star_links;
	     star_list_branch_ptr = null ();
	end;

	return;
     end check_directory;

/**/

/* Check if a segment has been modified */

check_segment:
     procedure (dir_name, entryname, print_dn, print_en, dtm);

dcl  dir_name char (*);				/* (Input) directory containing the segment */
dcl  entryname char (*);				/* (Input) entryname of the segment */
dcl  print_dn char (*);				/* (Input) directory name of link if link, or seg */
dcl  print_en char (*);				/* (Input) entryname of link if link, or seg */
dcl  dtm bit (36);					/* (Input) date-time modified */

dcl  name char (168);				/* name as printed */
dcl  pathname char (168);				/* absolute pathname */
dcl  date_time char (16);
dcl  modified_time fixed binary (71);

dcl  call_str char (call_str_length) based (call_str_ptr);
dcl  command_line char (call_str_length + 169) aligned;

dcl  1 branch like status_branch aligned;

	modified_time = binary (dtm || (16)"0"b, 71);
	if modified_time >= last_time_looked then do;

	     call hcs_$status_long (dir_name, entryname, NO_CHASE, addr (branch), null (), code);

	     modified_time = binary (dtcm || (16)"0"b, 71);
						/* make sure by checking dtcm */
	     if modified_time >= last_time_looked then do;

		duplicate = FALSE;

		do uid_list_index = 1 to uid_list_count while (^duplicate);
		     if uid_list (uid_list_index) = branch.uid then do;
			duplicate = TRUE;
			uid_list_index = uid_list_count;
		     end;
		end;
		if duplicate = FALSE then do;
		     uid_list_count = uid_list_count + 1;
		     uid_list (uid_list_count) = branch.uid;
		     if branch.bit_count ^= 0 then do;
			change_sw = TRUE;		/* something has actually changed */

			if sw.absp then
			     name = pathname_ (print_dn, print_en);
						/* return absolute pathnames */
			else name = print_en;
			if sw.af then do;
			     if return_arg ^= "" then return_arg = return_arg || " ";
			     if index (rtrim (name), " ") ^= 0 then
				return_arg = return_arg || requote_string_ (rtrim (name));
			     else return_arg = return_arg || rtrim (name);
			end;
			else if sw.long then do;
			     call date_time_ (modified_time, date_time);
			     call ioa_ ("^a ^a", date_time, name);
			end;
			else if ^sw.brief & ^sw.call then call ioa_ ("^a", name);
			if sw.call then do;
			     command_line = call_str || " " || pathname_ (print_dn, print_en);
			     call cu_$cp (addr (command_line), length (rtrim (command_line)), code);
			end;
		     end;
		end;
	     end;
	end;
	return;

     end check_segment;

/**/

/* Check the link array */

check_links:
     procedure;
dcl  (idx, jdx, kdx) fixed binary;
dcl  array_idx fixed binary (21);
dcl  num_links fixed binary (21);
dcl  found bit (1) aligned;
dcl  same_directory bit (1) aligned;
dcl  star_area_ptr ptr;
dcl  star_name char (32);
dcl  1 v aligned,
       2 n_items fixed bin (18),
       2 vector (link_array.n_links) ptr unaligned;
dcl  1 i aligned,
       2 n fixed bin (18),
       2 array (link_array.n_links) fixed bin (18);

	i.n = link_array.n_links;
	v.n_items = link_array.n_links;
	num_links = link_array.n_links;

	star_select_sw = star_ALL_ENTRIES_WITH_LINK_PATHS;
	star_area_ptr = get_system_free_area_ ();

	do idx = 1 to link_array.n_links;
	     v.vector (idx) = addr (link_array.check_dname (idx));
	end;

	on cleanup call free_star_structures;

	do while (num_links > 0);

	     call sort_items_indirect_$char (addr (v), addr (i), length (link_array.check_dname (1)));

	     same_directory = FALSE;
	     do idx = 1 to link_array.n_links;
		array_idx = i.array (idx);
		if link_array.check (array_idx) then do;
		     if ^same_directory then do;
			if idx ^= link_array.n_links then
			     if link_array.check_dname (array_idx) = link_array.check_dname (i.array (idx + 1)) then
				star_name = "**.info";
			     else star_name = link_array.check_ename (array_idx);
			else star_name = link_array.check_ename (array_idx);
			call free_star_structures (); /* in case it's left from last time through */
			call hcs_$star_dir_list_ ((link_array.check_dname (array_idx)), star_name, star_select_sw,
			     star_area_ptr, star_branch_count, star_link_count, star_list_branch_ptr,
			     star_list_names_ptr, code);
			if code ^= 0 then call check_for_noninfo ();
		     end;				/* getting star info */
		     if link_array.check (array_idx) then do;
			found = FALSE;
			do jdx = 1 to hbound (star_links, 1) while (^found);
			     do kdx = 1 to star_dir_list_branch (jdx).nnames while (^found);
				if link_array.check_ename (array_idx)
				     = star_list_names (star_dir_list_branch (jdx).nindex + (kdx - 1)) then do;
				     found = TRUE;
				     if star_links (jdx).type = star_SEGMENT then do;
					call check_segment ((link_array.check_dname (array_idx)),
					     (link_array.check_ename (array_idx)),
					     (link_array.print_dname (array_idx)),
					     (link_array.print_ename (array_idx)),
					     star_dir_list_branch (jdx).dtem);
					link_array.check (array_idx) = FALSE;
					num_links = num_links - 1;
				     end;		/* segment */
				     else if star_links (jdx).type = star_LINK then do;
					if link_array.n_passes (array_idx) >= sys_info$maxlinks then do;
					     link_array.check (array_idx) = FALSE;
					     num_links = num_links - 1;
					end;	/* too many links */
					else do;
					     star_linkx = jdx;
					     call expand_pathname_ (star_link_pathname, target_dname,
						target_ename, code);
					     if code ^= 0 then do;
						link_array.check (array_idx) = FALSE;
						num_links = num_links - 1;
					     end;
					     else do;
						link_array.check_dname (array_idx) = target_dname;
						link_array.check_ename (array_idx) = target_ename;
						link_array.n_passes (array_idx) =
						     link_array.n_passes (array_idx) + 1;
					     end; /* valid target pathname */
					end;	/* continue chasing link */
				     end;		/* link */
				     else found = FALSE;
				end;		/* match found */
			     end;			/* kdx loop */
			end;			/* jdx loop */
			if ^found then call check_for_noninfo ();
		     end;				/* code = 0 from hcs_ */
		     if idx ^= link_array.n_links then
			if link_array.check_dname (array_idx) = link_array.check_dname (i.array (idx + 1)) then
			     same_directory = TRUE;
			else same_directory = FALSE;
		     else ;
		end;				/* checking */
	     end;					/* idx loop */
	end;					/* while num_links > 0 */
done_checking_links:
	call free_star_structures ();
	return;

free_star_structures:
	procedure;
	     if star_list_names_ptr ^= null () then do;
		free star_list_names;
		star_list_names_ptr = null ();
	     end;
	     if star_list_branch_ptr ^= null () then do;
		free star_links;
		star_list_branch_ptr = null ();
	     end;
	end free_star_structures;

check_for_noninfo:
	procedure ();
	     if substr (link_array.check_ename (array_idx), length (rtrim (link_array.check_ename (array_idx))) - 4, 5)
		^= ".info" then do;
		call hcs_$status_minf ((link_array.check_dname (array_idx)), (link_array.check_ename (array_idx)),
		     NO_CHASE, type, (0), code);
		if code = 0 then do;
		     if type = Link then
			call hcs_$get_link_target ((link_array.check_dname (array_idx)),
			     (link_array.check_ename (array_idx)), target_dname, target_ename, code);
		     else do;
			target_dname = link_array.check_dname (array_idx);
			target_ename = link_array.check_ename (array_idx);
		     end;
		     if code = 0 then
			call check_segment (target_dname, target_ename, (link_array.print_dname (array_idx)),
			     (link_array.print_ename (array_idx)), (36)"1"b);
		end;
	     end;
	     link_array.check (array_idx) = FALSE;
	     num_links = num_links - 1;
	end check_for_noninfo;
     end check_links;

/**/

/* Check if an argument is a control arg */

is_control_arg:
     procedure (arg) returns (bit (1));

dcl  arg char (*);					/* (Input) command argument */

	if arg = "" then
	     return (FALSE);
	else return (index (arg, "-") = 1);

     end is_control_arg;

/**/

cleanup_:
     procedure ();

	if sl_info_p ^= null () then do;
	     free sl_info;
	     sl_info_p = null ();
	end;

	if star_names_ptr ^= null () then do;
	     free star_list_names;
	     star_names_ptr = null ();
	end;

	if star_entry_ptr ^= null () then do;
	     free star_links;
	     star_entry_ptr = null ();
	end;

	if uid_list_ptr ^= null () then call release_temp_segment_ (command, uid_list_ptr, code);
	if link_array_ptr ^= null () then call release_temp_segment_ (command, link_array_ptr, code);

	return;

     end cleanup_;

/**/

/* Fetch the date/time info segments were last check from the value segment: if the time isn't present in the value
   segment, check the abbrev profile for an old style date/time and copy it to the value segment */

get_time:
     procedure (p_date_time);

dcl  p_date_time fixed binary (71) parameter;

dcl  small_area area (256);
dcl  based_date_time fixed binary (71) based (date_time_ptr);
dcl  date_time_ptr pointer;

	call value_$get_data (DEFAULT_VALUE_SEGMENT, PERMANENT_VALUE, CIS_VALUE_NAME, addr (small_area), date_time_ptr,
	     (0), code);

	if (code = error_table_$oldnamerr) | (code = error_table_$noentry) then do;
	     call get_date_time_from_profile ();
	     call value_$get_data (DEFAULT_VALUE_SEGMENT, PERMANENT_VALUE, CIS_VALUE_NAME, addr (small_area),
		date_time_ptr, (0), code);
	end;

	if code ^= 0 then				/* couldn't find a date/time anywhere */
	     p_date_time = 0;
	else p_date_time = based_date_time;

	return;



/* Internal to get_time: check for an abbrev style profile and, if present, copy the date/time from it */

get_date_time_from_profile:
	procedure ();

dcl  home_dir character (168);
dcl  person_id character (24);
dcl  profile_ename character (32);

dcl  1 old_profile aligned based (profile_ptr),		/* abbrev profile */
       2 version fixed binary,
       2 pad (3) bit (36),
       2 check_info_time fixed binary (71);
dcl  profile_ptr pointer;

	     call user_info_$homedir (home_dir);
	     call user_info_ (person_id);
	     profile_ename = rtrim (person_id) || ".profile";

	     profile_ptr = null ();

	     on cleanup
		begin;				/* just in case (even with such a small window) */
		     if profile_ptr ^= null () then call terminate_file_ (profile_ptr, (0), TERMINATE_FILE, (0));
		     profile_ptr = null ();
		end;

	     call initiate_file_ (home_dir, profile_ename, R_ACCESS, profile_ptr, 0b, (0));

	     if profile_ptr ^= null () then do;		/* there is a profile */
		if old_profile.version = 1 then	/* only new style profile has the cis date/time */
		     call put_time (old_profile.check_info_time);
		call terminate_file_ (profile_ptr, (0), TERMINATE_FILE, (0));
	     end;

	     return;

	end get_date_time_from_profile;

     end get_time;

/**/

/* Put the updated date/time into the user's value segment */

put_time:
     procedure (p_date_time);

dcl  p_date_time fixed binary (71) parameter;

	call value_$set_data (DEFAULT_VALUE_SEGMENT, PERMANENT_VALUE, CIS_VALUE_NAME, addr (p_date_time),
	     currentsize (p_date_time), null (), (null ()), (0), code);

	if code = error_table_$noentry then do;		/* value segment not present: try to create it */
	     call create_default_value_segment ();
	     call value_$set_data (DEFAULT_VALUE_SEGMENT, PERMANENT_VALUE, CIS_VALUE_NAME, addr (p_date_time),
		currentsize (p_date_time), null (), (null ()), (0), code);
	end;

	if code ^= 0 then call com_err_ (code, command, "Attempting to update date/time in default value segment.");

	return;



/* Internal to put_time: create the default value segment (if possible) */

create_default_value_segment:
	procedure ();

dcl  value_segment_path character (168);

	     call value_$set_path ("", TRUE, code);

	     if code = 0 then do;			/* created it */
		call value_$get_path (value_segment_path, (0));
		call com_err_ (0, command, "Created ^a.", value_segment_path);
	     end;

	     return;

	end create_default_value_segment;

     end put_time;

/**/

%include access_mode_values;
%page;
%include sl_info;
%page;
%include sl_control_s;
%page;
%include star_structures;
%page;
%include status_structures;

     end check_info_segs;
