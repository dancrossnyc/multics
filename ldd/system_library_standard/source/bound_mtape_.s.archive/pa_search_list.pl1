/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1989                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1983 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(89-01-17,TLNguyen), approve(89-01-27,MCR8052),
     audit(89-02-06,Parisek), install(89-02-27,MR12.3-1015):
     a. Replace error_table_$programming_error with error_table_$fatal_error
        when calling sub_err_ to report a null area pointer error.
     b. Assign initial values for automatic variables in the internal
        procedure, INITIALIZATION.  Remove the reference to
        get_temp_segment_.
                                                   END HISTORY COMMENTS */


/* format: style2,ind3 */
pa_search_list:
   proc (p_command_name, p_caller_area_ptr, p_array_ptr, p_code);

/* DESCRIPTION:

          This subroutine searches the databases in the process_arguments
     search list for either an argument processing definition or a default
     linear form.
*/

/* HISTORY:

Written by Lindsey Spratt, 06/27/83.
Modified:
06/28/83 by Lindsey L. Spratt:  Fixed to not report errors encountered while
            searching the list until the list just searched passes the change
            count test.  Also fixed to check the change count before using the
            stored sl_info.
07/01/83 by Lindsey L. Spratt:  Fixed to look for default linear form strings,
            rather than result pva's.  Also, taught to look in value segments
            (when that's specified in the search list).
07/07/83 by Lindsey L. Spratt:  Fixed to set the sl_info_p pointer to the
            current value of search_list_info_ptr.
07/08/83 by Lindsey L. Spratt:  Fixed to not report errors of
            vd_error_$no_vector or error_table_$noentry when searching for a
            default linear form.
07/24/83 by Lindsey L. Spratt:  Converted to retrieve a pva_string definition
            from a value seg, rather than a print_vector_array definition from
            a vector_db.
08/03/83 by S.Krupp to distinguish between internal work area and caller
            provided area to fix bad search_list_info_ptr bug.
	  The sl_info structure is now allocated in the internal work area.
	  Also, to change the name of the search list to mtape_arguments
	  and fix assorted bugs.
*/

/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_command_name	       char (*) varying;
      dcl	    p_caller_area_ptr      ptr;
      dcl	    p_array_ptr	       ptr;
      dcl	    p_default_linear_form  char (*) varying;
      dcl	    p_code	       fixed bin (35);

/* Automatic */

      dcl	    (retry_count, path_idx)
			       fixed bin;
      dcl	    definition_value_name  char (256) varying;
      dcl	    dir_name	       char (256);
      dcl	    entry_name	       char (128);
      dcl	    default_linear_form_value_name
			       char (128) varying;
      dcl	    get_definition	       bit (1) aligned;
      dcl	    work_area_ptr	       ptr;
      dcl	    caller_area_ptr	       ptr;

/* Based */

      dcl	    based_real_fix_bin_2u  fixed bin (71) unaligned based;

/* Builtin */

      dcl	    (addr, null, string)   builtin;

/* Controlled */
/* Constant */

      dcl	    myname	       init ("pa_get_definition") char (64) varying internal static options (constant);

      dcl	    PROCESS_ARGUMENTS_SEARCH_LIST_NAME
			       init ("mtape_arguments") char (64) varying internal static options (constant);
      dcl	    VALUE_SUFFIX	       init ("value") char (5) internal static options (constant);
      dcl	    PERMANENT_VALUE	       init ("01"b) bit (2) aligned internal static options (constant);
      dcl	    (
	    RETRY_LIMIT	       init (5),
	    BYTES_PER_WORD	       init (4)
	    )		       fixed bin internal static options (constant);

/* Entry */

      dcl	    get_system_free_area_  entry () returns (ptr);
      dcl	    value_$get_data	       entry (ptr, bit (36) aligned, char (*), ptr, ptr, fixed bin (18), fixed bin (35));
      dcl	    sub_err_	       entry options (variable);
      dcl	    expand_pathname_$add_suffix
			       entry (char (*), char (*), char (*), char (*), fixed bin (35));
      dcl	    search_paths_$get      entry (char (*), bit (36), char (*), ptr, ptr, fixed bin, ptr, fixed bin (35));
      dcl	    initiate_file_	       entry (char (*), char (*), bit (*), ptr, fixed bin (24), fixed bin (35));
      dcl	    terminate_file_	       entry (ptr, fixed bin (24), bit (*), fixed bin (35));
      dcl	    ioa_$rsnnl	       entry() options(variable);

/* External */
      dcl	    (
	    error_table_$asynch_change,
	    error_table_$noentry,
	    error_table_$fatal_error,
	    error_table_$oldnamerr
	    )		       fixed bin (35) ext;

/* Internal */

      dcl	    (search_list_info_ptr)
			       ptr init (null) internal static;


/* END OF DECLARATIONS */

get_definition:
   entry (p_command_name, p_caller_area_ptr, p_array_ptr, p_code);

      call INITIALIZATION ();

      caller_area_ptr = p_caller_area_ptr;
      get_definition = "1"b;
      goto JOIN;

get_default_linear_form:
   entry (p_command_name, p_default_linear_form, p_code);

      call INITIALIZATION ();

      get_definition = "0"b;
JOIN:
      work_area_ptr = get_system_free_area_ ();

      if (caller_area_ptr = null) & (get_definition)
      then call sub_err_ (error_table_$fatal_error, myname, "s", null, 0, "The area_ptr given to this module must be non-null.");

      p_code = 0;
      p_array_ptr = null;

      default_linear_form_value_name = DEFAULT_LINEAR_FORM_PREFIX || "." || p_command_name;
      definition_value_name = DEFINITION_PREFIX || "." || p_command_name;

      if search_list_info_ptr = null
      then
         do;
	  call SETUP_SEARCH_LIST (search_list_info_ptr, p_code);
	  if p_code ^= 0
	  then call ERROR_RETURN ();
         end;

      sl_info_p = search_list_info_ptr;
      if sl_info.change_index ^= sl_info.change_index_p -> based_real_fix_bin_2u
      then
         do;
	  call SETUP_SEARCH_LIST (search_list_info_ptr, p_code);
	  if p_code ^= 0
	  then call ERROR_RETURN ();
	  sl_info_p = search_list_info_ptr;
         end;
      call SEARCH_LIST;

RETRY_SEARCH:
      do while (retry_count <= RETRY_LIMIT & sl_info.change_index ^= sl_info.change_index_p -> based_real_fix_bin_2u);

         call SETUP_SEARCH_LIST (search_list_info_ptr, p_code);
         if p_code ^= 0
         then call ERROR_RETURN ();
         sl_info_p = search_list_info_ptr;

         retry_count = retry_count + 1;

         call SEARCH_LIST;

      end RETRY_SEARCH;

      if p_code ^= 0
      then call ERROR_RETURN ();
      else if retry_count > RETRY_LIMIT
      then p_code = error_table_$asynch_change;

      call FINISH;

MAIN_RETURN:
      return;

%page;
INITIALIZATION:  proc();

      retry_count = 0;
      path_idx = 0;
      definition_value_name = "";
      dir_name = "";
      entry_name = "";
      get_definition = "0"b;
      work_area_ptr = null;
      caller_area_ptr = null;

      return;
      end INITIALIZATION;

%page;
FINISH:
   proc ();


   end FINISH;

ERROR_RETURN:
   proc ();
      call FINISH;
      goto MAIN_RETURN;
   end ERROR_RETURN;
%page;
SEARCH_LIST:
   proc ();
      dcl	    sl_pv_idx	       fixed bin;

      if get_definition
      then
         do;
	  if p_array_ptr ^= null
	  then
	     do;
	        do sl_pv_idx = 1 to p_array_ptr -> print_vector_array.number_of_vectors;
		 free p_array_ptr -> print_vector_array.vector_slot (sl_pv_idx) -> print_vector;
	        end;
	        free p_array_ptr -> print_vector_array;
	        p_array_ptr = null;
	     end;
         end;
      else p_default_linear_form = "";

      do path_idx = 1 to sl_info.num_paths;
         call expand_pathname_$add_suffix (sl_info.paths (path_idx).pathname, VALUE_SUFFIX, dir_name, entry_name, p_code);
         if p_code ^= 0
         then return;
         if get_definition
         then
	  do;
	     call RETRIEVE_DEFINITION (dir_name, entry_name, p_array_ptr, p_code);
	     if p_array_ptr ^= null
	     then return;				/* A definition was found. */
	     else if p_code ^= error_table_$oldnamerr & p_code ^= error_table_$noentry
	     then return;				/* An error fatal to the search was hit. */
	  end;
         else
	  do;
	     call RETRIEVE_DEFAULT_LINEAR_FORM (dir_name, entry_name, p_default_linear_form, p_code);
	     if p_code ^= 0
	     then if p_code ^= error_table_$oldnamerr & p_code ^= error_table_$noentry
		then return;			/* An error fatal to the search was hit. */
		else p_code = 0;
	  end;
      end;
      if get_definition
      then if p_array_ptr = null
	 then p_code = error_table_$oldnamerr;
   end SEARCH_LIST;
%page;
RETRIEVE_DEFAULT_LINEAR_FORM:
   proc (rdlf_p_db_dir, rdlf_p_db_entry, rdlf_p_default_linear_form, rdlf_p_code);
      dcl	    rdlf_p_db_dir	       char (*) parameter;
      dcl	    rdlf_p_db_entry	       char (*) parameter;
      dcl	    rdlf_p_default_linear_form
			       char (*) varying parameter;
      dcl	    rdlf_p_code	       fixed bin (35) parameter;

      dcl	    rdlf_value_seg_ptr     ptr init (null);
      dcl	    rdlf_default_linear_form_value
			       char (rdlf_dlfv_length_in_bytes) varying based(rdlf_dlfv_ptr);
      dcl     rdlf_dlfv_length_in_bytes
                                     fixed bin(21) init(0);
      dcl     rdlf_dlfv_length_in_words
                                     fixed bin(18) init(0);
      dcl     rdlf_dlfv_ptr	       ptr init(null);

      call initiate_file_ (rdlf_p_db_dir, rdlf_p_db_entry, R_ACCESS, rdlf_value_seg_ptr, (0), p_code);
      if rdlf_value_seg_ptr = null
      then return;

      call
         value_$get_data (rdlf_value_seg_ptr, (PERMANENT_VALUE), (default_linear_form_value_name),
         work_area_ptr, rdlf_dlfv_ptr, rdlf_dlfv_length_in_words, p_code);
      if p_code ^= 0
      then
         do;
	  call RDLF_FINISH;
	  return;
         end;

      rdlf_dlfv_length_in_bytes = rdlf_dlfv_length_in_words * BYTES_PER_WORD;

      call terminate_file_ (rdlf_value_seg_ptr, (0), TERM_FILE_TERM, p_code);
      if p_code ^= 0
      then
         do;
	  call RDLF_FINISH;
	  return;
         end;

      call ioa_$rsnnl("^a^[^; ^]^a", rdlf_p_default_linear_form, 0, (rdlf_default_linear_form_value),
         (rdlf_default_linear_form_value = "" | rdlf_p_default_linear_form = ""), (rdlf_p_default_linear_form));

/*      rdlf_p_default_linear_form = rdlf_default_linear_form_value || " " || rdlf_p_default_linear_form*/


      call RDLF_FINISH;
      return;
RDLF_FINISH:
   proc;

      if rdlf_value_seg_ptr ^= null
      then call terminate_file_ (rdlf_value_seg_ptr, (0), TERM_FILE_TERM, (0));

   end RDLF_FINISH;
   end RETRIEVE_DEFAULT_LINEAR_FORM;
%page;
RETRIEVE_DEFINITION:
   proc (rd_p_db_dir, rd_p_db_entry, rd_p_array_ptr, rd_p_code);
      dcl	    rd_p_db_dir	       char (*) parameter;
      dcl	    rd_p_db_entry	       char (*) parameter;
      dcl	    rd_p_array_ptr	       ptr parameter;
      dcl	    rd_p_code	       fixed bin (35) parameter;
      dcl	    rd_value_seg_ptr       ptr init (null);
      dcl	    rd_definition_pva_string
			       char (rd_definition_pva_string_length_in_bytes) varying
			       based (rd_definition_pva_string_ptr);
      dcl	    rd_definition_pva_string_ptr
			       ptr init (null);
      dcl	    rd_definition_pva_string_length_in_words
			       fixed bin (18) init (0);
      dcl	    rd_definition_pva_string_length_in_bytes
			       fixed bin (21) init (0);

      call initiate_file_ (rd_p_db_dir, rd_p_db_entry, R_ACCESS, rd_value_seg_ptr, (0), p_code);
      if rd_value_seg_ptr = null
      then return;

      call
         value_$get_data (rd_value_seg_ptr, (PERMANENT_VALUE), (definition_value_name), caller_area_ptr,
         rd_definition_pva_string_ptr, rd_definition_pva_string_length_in_words, p_code);
      if p_code ^= 0
      then
         do;
	  call RD_FINISH;
	  return;
         end;

      rd_definition_pva_string_length_in_bytes = rd_definition_pva_string_length_in_words * BYTES_PER_WORD;

      call terminate_file_ (rd_value_seg_ptr, (0), TERM_FILE_TERM, p_code);
      if p_code ^= 0
      then
         do;
	  call RD_FINISH;
	  return;
         end;

      call
         vector_util_$cv_string_to_pva ((rd_definition_pva_string_ptr), (rd_definition_pva_string_length_in_bytes),
         caller_area_ptr, rd_p_array_ptr, rd_p_code);


      call RD_FINISH;
      return;
%page;
RD_FINISH:
   proc;

      if rd_definition_pva_string_ptr ^= null
      then free rd_definition_pva_string;

   end RD_FINISH;
   end RETRIEVE_DEFINITION;
%page;
SETUP_SEARCH_LIST:
   proc (ssl_p_sl_info_p, ssl_p_code);
      dcl	    ssl_p_code	       fixed bin (35) parameter;
      dcl	    ssl_p_sl_info_p	       ptr parameter;

      ssl_p_code = 0;
      ssl_p_sl_info_p = null;

      sl_control_s.af_pathname = "1"b;
      sl_control_s.pad1 = "0"b;
      sl_control_s.key_ref_dir = "0"b;
      sl_control_s.key_work_dir = "1"b;
      sl_control_s.key_home_dir = "1"b;
      sl_control_s.key_proc_dir = "1"b;
      sl_control_s.pad2 = "0"b;

      call
         search_paths_$get ((PROCESS_ARGUMENTS_SEARCH_LIST_NAME), string (sl_control_s), "", null, work_area_ptr,
         sl_info_version_1, ssl_p_sl_info_p, ssl_p_code);

   end SETUP_SEARCH_LIST;
%page;
%include pa_value_names;
%page;
%include vu_entry_dcls;
%page;
%include vu_print_vector_array;
%page;
%include sl_info;
%page;
%include sl_control_s;
%page;
%include sub_err_flags;
%page;
%include pa_dim_name_constants;
%page;
%include access_mode_values;
%page;
%include terminate_file;
   end pa_search_list;
