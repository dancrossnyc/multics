/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */
mtape_parse_: procedure;

/* format: style4 */

/* *	This program is part of the mtape_ I/O module and as such is not
   *	called directly by users, but through the iox_ I/O system.
   *
   *	Modification History:
   *
   *	Created by J. A. Bush 10/05/82
   *	Modified by J. A. Bush 6/15/83 to use process_arguments_ for parsing
   *	Modified by J. A. Bush 11/06/83 to fix bug causing inconsistent
   *	opening modes in mtape_ and the selected PFM.
   *	Modified: October 1984 by Greg Texada for basic gullibility checking of the open description.
   *      Modified: November 1984 by Greg Texada to enforce data set naming specs for ANSI/IBM.
*/

/*		ARGUMENT DATA		*/

dcl  arg_mtdp ptr;					/* Pointer to mtape_data */
dcl  arg_options (*) char (*) varying;			/* Input options array */
dcl  arg_open_mode fixed bin;				/* Opening mode */
dcl  arg_code fixed bin (35);				/* Return error code */

/*		AUTOMATIC DATA		*/

dcl  code fixed bin (35);
dcl  (vname, cname, cspeed, cpos, ulab_name) char (32);
dcl  (pos_ref_name, neg_ref_name, vol_ref_name) char (32) varying;
dcl  (rpvap, ap_areap, ad_cs_ptr, def_ptr, desc_ptr, cvlp, saved_opt_ptr) ptr;
dcl  (i, j, vx, nxt_vx, cvx, str_len, spos, cs, all_len, open_mode) fixed bin;
dcl  opn_desc_len fixed bin (21);
dcl  term bit (1) aligned;
dcl  found_opts bit (36) aligned;
dcl  1 ai like area_info aligned;

/*		CONSTANT DATA		*/

dcl  myname char (6) int static options (constant) init ("mtape_");

/*		EXTERNAL STATIC DATA	*/

dcl  error_table_$bad_name fixed bin (35) ext static;
dcl  error_table_$noarg fixed bin (35) ext static;
dcl  error_table_$inconsistent fixed bin (35) ext static;
dcl  sys_info$max_seg_size fixed bin (35) ext static;

/*		BUILTIN FUNCTIONS		*/

dcl  (addr, char, copy, hbound, index, length, ltrim, mod, null, rtrim, search, substr, unspec, verify) builtin;

/*		EXTERNAL ENTRIES		*/

dcl  resource_info_$canonicalize_name entry (char (*), char (*), char (*), fixed bin (35));
dcl  mtape_util_$alloc entry (ptr, fixed bin, ptr, fixed bin (21), ptr);
dcl  mtape_util_$error entry options (variable);
dcl  cv_dec_check_ entry (char (*), fixed bin (35)) returns (fixed bin (35));
dcl  process_arguments_$argument_array entry (char (*), fixed bin, (*) char (*) varying,
	ptr, ptr, ptr, fixed bin (35));
dcl  process_arguments_$get_option_value entry options (variable);
dcl  process_arguments_$cv_result_to_linear_form entry (ptr, ptr, char (*) varying, fixed bin (35));
dcl  process_arguments_$get_definition entry (char (*) varying, ptr, ptr, fixed bin (35));
dcl  process_arguments_$get_reference_name entry (ptr, char (*) varying, char (*) varying, char (*) varying);
dcl  process_arguments_$free_print_vector_array entry (ptr);
dcl  define_area_ entry (ptr, fixed bin (35));
dcl  release_area_ entry (ptr);
dcl  cv_entry_ entry (char (*), ptr, fixed bin (35)) returns (entry);

/*		BASED DATA		*/

dcl  based_area area based (mtape_data.areap);
dcl  ap_area area based (ap_areap);
dcl  desc_string char (1024) varying based (desc_ptr);
dcl  open_desc char (mtape_data.opd_len) varying based (mtape_data.opdp);
dcl  vb_str char (128) varying based;

dcl  1 saved_options aligned based (saved_opt_ptr),	/* template for allocation of last saved option array */
       2 nopts fixed bin,				/* number of options in array */
       2 saved_option (all_len refer (saved_options.nopts)) char (32) varying;
%page;
/*	mtape_parse_$attach - entry to parse up the attach options list
   *
   *	Usage:
   *
   *	dcl mtape_parse_$attach entry (ptr, (*) char (*) varying, fixed bin (35));
   *	call mtape_parse_$attach (mtdp, options, code);
   *
   *	where:
   *	1. mtdp
   *	     is a pointer to the mtape_data structure defined by
   *	     mtape_data.incl.pl1. (INPUT)
   *	2. options
   *	     is the array of attach options received from
   *	     iox_$attach_(name ptr). (INPUT)
   *	3. code
   *	     is a standard system error code. (OUTPUT)
*/

attach: entry (arg_mtdp, arg_options, arg_code);

	call SETUP;				/* go setup our enviornment */
	call ALLOCATE_AP_AREA;			/* allocate area for process_arguments_ to use */
	call PROC_ARGS (myname || ".attach", ad_cs_ptr);	/* Let process_arguments_ do the work */

/* Now lets get the option values */

	call process_arguments_$get_option_value (rpvap, mtape_data.areap, found_opts,
	     DISPLAY, mtape_attach_info.display, ERROR, mtape_data.display_errors,
	     LABEL, mtape_attach_info.labeled, RING, mtape_attach_info.ring,
	     SYSTEM, mtape_attach_info.system, WAIT, mtape_attach_info.wait); /* get the switch flags first */

	call process_arguments_$get_option_value (rpvap, mtape_data.areap, found_opts,
	     DEFAULT_VOL_TYPE, mtape_attach_info.default_pfm_prefix,
	     DENSITY, mtape_attach_info.density, DEVICE, mtape_attach_info.ndrives,
	     TRACK, mtape_attach_info.tracks, VOL_TYPE, mtape_attach_info.pfm_prefix,
	     WAIT_TIME, mtape_attach_info.wait_time);	/* get other options */

	call process_arguments_$get_option_value (rpvap, mtape_data.areap, found_opts,
	     SPEED, cspeed);			/* get the speed values if any */
	if found_opts ^= "0"b then do;		/* if some speeds specified */
	     term = "0"b;
	     spos = 1;
	     str_len = length (rtrim (cspeed));
	     do while (^term);
		cs = search (substr (cspeed, spos), ","); /* more than one specified */
		if cs = 0 then do;			/* last one */
		     term = "1"b;
		     cs = (str_len - spos) + 1;	/* set for end of string */
		end;
		else cs = cs - 1;
		if substr (cspeed, spos, cs) = "75" then/* 75 IPS specified */
		     mtape_attach_info.speed = mtape_attach_info.speed | "100"b;
		else if substr (cspeed, spos, cs) = "125" then /* 125 IPS specified */
		     mtape_attach_info.speed = mtape_attach_info.speed | "010"b;
		else if substr (cspeed, spos, cs) = "200" then /* 200 IPS specified */
		     mtape_attach_info.speed = mtape_attach_info.speed | "001"b;
		spos = spos + cs + 1;		/* increment for next search */
	     end;
	end;

/* Now lets get the volume sequence list and any mount comments */

	call process_arguments_$get_option_value (rpvap, mtape_data.areap, found_opts,
	     VOLUME, option_value_list_ptr, COMMENT, cvlp);

	if ^substr (found_opts, 1, 1) then do;		/* need at least one volume */
	     code = error_table_$noarg;
	     call mtape_util_$error (mtdp, code,
		"At least one volume name must be specified");
	     go to non_local_return;			/* abort attachment */
	end;
	do i = 1 to option_value_list.number_of_values;	/* process all volumes */
	     vname = option_value_list.value (i).ptr -> vb_str; /* get volume name */
	     vx = option_value_list.value (i).vector_idx; /* and index into the rpva */
	     if i = option_value_list.number_of_values then /* if at end */
		nxt_vx = -1;			/* indicate so */
	     else nxt_vx = option_value_list.value (i + 1).vector_idx; /* not end get next index */
	     call resource_info_$canonicalize_name (VOLUME_TYPE (TAPE_VOL_VTYPEX), vname, cname, code);
	     if code ^= 0 then do;			/* bad volume name */
		call mtape_util_$error (mtdp, code,
		     "Cannot canonicalize volume name ""^a""", vname);
		arg_code = code;			/* save code, but continue to check description */
		go to vol_end;			/* get the next argument */
	     end;
	     call mtape_util_$alloc (mtdp, MTAPE_ALLOC_VS, mtape_data.vs_tail, 0, vs_ptr);
	     mtape_data.vs_tail = vs_ptr;		/* Link this VS structure in */
	     if mtape_data.vs_head = null then		/* if this is first volume set member */
		mtape_data.vs_current, mtape_data.vs_head = vs_ptr; /* set the link head too */
	     mtape_vol_set.volume_name = cname;		/* set the canonical volume name */
	     if substr (found_opts, 2, 1) then do;	/* if we have some comments */
		term = "0"b;
		do j = 1 to cvlp -> option_value_list.number_of_values while (^term);
		     cvx = cvlp -> option_value_list.value (j).vector_idx; /* get option index */
		     if cvx > vx then		/* check position of comment */
			if (nxt_vx ^= -1 & cvx < nxt_vx) | nxt_vx = -1 then do;
			     term = "1"b;		/* set terminate condition and copy comment */
			     mtape_vol_set.mount_comment = cvlp -> option_value_list.value (j).ptr -> vb_str;
			end;
		end;
	     end;
vol_end:
	end;
%page;
/* Now build a printable attach description, get volume sequence list first */

	desc_string = myname;			/* start off the attach description with I/O module name */
	vol_ref_name = GET_REF_NAME (VOLUME);		/* get the volume option ref name */
	do vs_ptr = mtape_data.vs_head repeat mtape_vol_set.next_vs_ptr while (vs_ptr ^= null);
	     if substr (mtape_vol_set.volume_name, 1, 1) = "-" then /* if volume name begins with "-" */
		desc_string = rtrim (desc_string) || " " || vol_ref_name; /* add volume qualifier */
	     desc_string = rtrim (desc_string) || " " || mtape_vol_set.volume_name;
	end;

/* now add control args with values */

	desc_string = rtrim (desc_string) || " " || GET_REF_NAME (DENSITY);
	desc_string = rtrim (desc_string) || " " || ltrim (char (mtape_attach_info.density));
	desc_string = rtrim (desc_string) || " " || GET_REF_NAME (TRACK);
	desc_string = rtrim (desc_string) || " " || ltrim (char (mtape_attach_info.tracks));
	if mtape_attach_info.speed ^= "0"b then do;	/* only display speed if one specified */
	     desc_string = rtrim (desc_string) || " " || GET_REF_NAME (SPEED);
	     desc_string = rtrim (desc_string) || " " || cspeed;
	end;
	desc_string = rtrim (desc_string) || " " || GET_BIN_REF_NAME (RING, mtape_attach_info.ring);
	desc_string = rtrim (desc_string) || " " || GET_REF_NAME (DEVICE);
	desc_string = rtrim (desc_string) || " " || ltrim (char (mtape_attach_info.ndrives));
	desc_string = rtrim (desc_string) || " " || GET_BIN_REF_NAME (LABEL, mtape_attach_info.labeled);
	if mtape_attach_info.pfm_prefix ^= "" then do;	/* put in PFM prefix only if given by user */
	     desc_string = rtrim (desc_string) || " " || GET_REF_NAME (VOL_TYPE);
	     desc_string = rtrim (desc_string) || " " || mtape_attach_info.pfm_prefix;
	end;
	desc_string = rtrim (desc_string) || " " || GET_BIN_REF_NAME (WAIT, mtape_attach_info.wait);
	if mtape_attach_info.wait then do;		/* if we are waiting, put in wait time too */
	     desc_string = rtrim (desc_string) || " " || GET_REF_NAME (WAIT_TIME);
	     desc_string = rtrim (desc_string) || " " || ltrim (char (mtape_attach_info.wait_time));
	end;
	desc_string = rtrim (desc_string) || " " || GET_BIN_REF_NAME (DISPLAY, mtape_attach_info.display);
	desc_string = rtrim (desc_string) || " " || GET_BIN_REF_NAME (SYSTEM, mtape_attach_info.system);
	desc_string = rtrim (desc_string) || " " || GET_BIN_REF_NAME (ERROR, mtape_data.display_errors);

	call mtape_util_$alloc (mtdp, MTAPE_ALLOC_STR, null, length (desc_string) + 4, mtape_data.atdp);
	mtape_data.atdp -> desc_string = desc_string;	/* move attach description to perm storage */

non_local_return:					/* target of non-local gotos */
	if arg_code = 0 then			/* if previous error was not saved */
	     arg_code = code;
	if ap_areap ^= null then			/* if arg processing area defined.. */
	     call release_area_ (ap_areap);		/* release it */
	if ad_cs_ptr ^= null then			/* if attach/detach control print_vector allocated */
	     call process_arguments_$free_print_vector_array (ad_cs_ptr); /* free it */
	return;					/* end of attach entry */
%page;
/* open - entry to parse open description */

open: entry (arg_mtdp, arg_options, arg_open_mode, arg_code);

	call SETUP;				/* go setup our enviornment */
	open_mode = arg_open_mode;			/* copy opening mode arg */
	call OPTIMIZE_PARSE (mtape_open_info.so_ptr);	/* Do we have to call process_arguments_? */
	call ALLOCATE_AP_AREA;			/* yes, allocate area for process_arguments_ to use */
	unspec (mtape_open_info.init_to_zero) = "0"b;	/* initialize open info structure */
	mtape_open_info.comment, mtape_open_info.expiration, mtape_open_info.file_format = "";
	mtape_open_info.recording_mode, mtape_open_info.file_name, mtape_open_info.replace_id = "";
	mtape_open_info.pfm_opt_str (*) = "";
	ulab_name = "";
	mtape_open_info.open_mode = open_mode;		/* copy opening mode */

/* Let process_arguments_ do the work */

	call PROC_ARGS (myname || ".open." || mtape_attach_info.pfm_prefix, mtape_open_info.cs_ptr);
	call process_arguments_$get_option_value (rpvap, mtape_data.areap, found_opts, /* get option values */
	     COMMENT, mtape_open_info.comment, DISPLAY, mtape_open_info.display,
	     BLOCK, mtape_open_info.block_length, RECORD, mtape_open_info.record_length,
	     NUMBER, mtape_open_info.seq_number, REPLACE, mtape_open_info.replace_id,
	     NAME, mtape_open_info.file_name, MODE, mtape_open_info.recording_mode,
	     FORMAT, mtape_open_info.file_format, EXPIRES, mtape_open_info.expiration,
	     DEFAULT_SPAN_RLEN, mtape_open_info.default_span_rlen,
	     DEFAULT_VAR_RLEN, mtape_open_info.default_var_rlen,
	     DEFAULT_FIX_RLEN, mtape_open_info.default_fix_rlen,
	     APPEND, mtape_open_info.append, EXTEND, mtape_open_info.extend,
	     FORCE, mtape_open_info.force, LAST_FILE, mtape_open_info.last_file,
	     NEXT_FILE, mtape_open_info.next_file, MODIFY, mtape_open_info.modify,
	     LABEL_ENTRY, ulab_name);
	if ulab_name ^= "" then do;			/* if user label reoutine specified, convert it */
	     mtape_open_info.user_label = cv_entry_ (ulab_name, null, code);
	     if code ^= 0 then do;
		call mtape_util_$error (mtdp, code,
		     "^/Attempting to convert the user label entry ""^a"".", ulab_name);
		go to non_local_return;
	     end;
	     mtape_open_info.label_entry_present = "1"b;	/* set flag for PFM */
	end;

/* Now let's look at the open info and check some basic requirements.					*/

	if mtape_attach_info.pfm_prefix = "ibm" then do;
	     if ^(valid_IBM_open_args ()) then goto non_local_return;
	end;
	else if mtape_attach_info.pfm_prefix = "ansi" then do;
	     if ^(valid_ANSI_open_args ()) then goto non_local_return;
	end;


/* Now lets get PFM dependent options */

	call GET_PFM_OPTIONS (addr (mtape_open_info.pfm_args), addr (mtape_pfm_info.pfm_open_options));

/* generate printable open description and move it to perm storage */

	call process_arguments_$cv_result_to_linear_form (def_ptr, rpvap, desc_string, code);
	if mtape_data.opdp ^= null then do;		/* must free desc. first */
	     free open_desc in (based_area);
	     mtape_data.opdp = null;
	end;
	mtape_data.opd_len = length (desc_string) + 64;
	call mtape_util_$alloc (mtdp, MTAPE_ALLOC_STR, null, mtape_data.opd_len, mtape_data.opdp);
	open_desc = rtrim (iox_modes (mtape_open_info.open_mode)) || " " || desc_string;
	call SAVE_OPTIONS (mtape_open_info.so_ptr);	/* save current option array */
	if ap_areap ^= null then			/* if arg processing area defined.. */
	     call release_area_ (ap_areap);		/* release it */

	return;
%page;
/* close - entry to parse close description */

close: entry (arg_mtdp, arg_options, arg_code);

	call SETUP;				/* set up our enviornment */
	open_mode = 0;				/* indicate not open entry to optimize routine */
	call OPTIMIZE_PARSE (mtape_close_info.so_ptr);	/* Do we have to call process_arguments_? */
	call ALLOCATE_AP_AREA;			/* yes, allocate area for process_arguments_ to use */
	unspec (mtape_close_info.init_to_zero) = "0"b;	/* initialize close info structure */
	mtape_close_info.comment, mtape_close_info.pfm_opt_str (*) = "";

/* Let process_arguments_ do the work */

	call PROC_ARGS (myname || ".close." || mtape_attach_info.pfm_prefix, mtape_close_info.cs_ptr);

/* Now lets get the option values */

	call process_arguments_$get_option_value (rpvap, mtape_data.areap, found_opts,
	     COMMENT, mtape_close_info.comment, DISPLAY, mtape_close_info.display,
	     CLOSE_POSITION, cpos);
	if cpos = BOF then				/* position to beginning of file on closing */
	     mtape_close_info.position = 1;
	else if cpos = EOF then			/* position to end of file on closing */
	     mtape_close_info.position = 2;
	else if cpos = LEAVE then			/* leave the tape positioned where it is */
	     mtape_close_info.position = 0;

/* Now lets get PFM dependent options */

	call GET_PFM_OPTIONS (addr (mtape_close_info.pfm_args), addr (mtape_pfm_info.pfm_close_options));

/* generate printable close description and move it to perm storage */

	call process_arguments_$cv_result_to_linear_form (def_ptr, rpvap, desc_string, code);
	call mtape_util_$alloc (mtdp, MTAPE_ALLOC_STR, null, length (desc_string) + 4, mtape_data.cldp);
	mtape_data.cldp -> desc_string = desc_string;
	call SAVE_OPTIONS (mtape_close_info.so_ptr);	/* save current option array */
	if ap_areap ^= null then			/* if arg processing area defined.. */
	     call release_area_ (ap_areap);		/* release it */

	return;
%page;
/* detach - entry to parse detach description */

detach: entry (arg_mtdp, arg_options, arg_code);

	call SETUP;				/* go setup our enviornment */
	call ALLOCATE_AP_AREA;			/* allocate area for process_arguments_ to use */
	mdip = mtape_data.detach_info_ptr;		/* set detach info ptr also */
	unspec (mtape_detach_info) = "0"b;		/* initialize detach info structure */
	mtape_detach_info.version = mtape_detach_info_version_1; /* set proper version */
	mtape_detach_info.comment = "";

	call PROC_ARGS (myname || ".detach", ad_cs_ptr);	/* Let process_arguments_ do the work */

/* Now lets get the option values */

	call process_arguments_$get_option_value (rpvap, mtape_data.areap, found_opts,
	     COMMENT, mtape_detach_info.comment, DISPLAY, mtape_detach_info.display,
	     REWIND, mtape_detach_info.unload);
	mtape_detach_info.unload = ^mtape_detach_info.unload; /* invert flag for correct meaning */

/* generate printable detach description and move it to perm storage */

	call process_arguments_$cv_result_to_linear_form (def_ptr, rpvap, desc_string, code);
	call mtape_util_$alloc (mtdp, MTAPE_ALLOC_STR, null, length (desc_string) + 4, mtape_data.dtdp);
	mtape_data.dtdp -> desc_string = desc_string;
	if ap_areap ^= null then			/* if arg processing area defined.. */
	     call release_area_ (ap_areap);		/* release it */

	return;
%page;
/* OPTIMIZE_PARSE - internal procedure to determine if open and close descriptions
   really need to be passed by process_arguments_. If one open or close description has
   already been parsed, and if the arg_option array passed by iox_ is exactly the same or
   if the only difference is the "-name" or "-number" arg then do not expend the
   overhead to call process_arguments_. Instead use the already initialized
   open or close info structure, changing the file_name and/or seq_number args as
   is appropriate */

OPTIMIZE_PARSE: proc (sop);

dcl  sop ptr;
dcl  (saved_name, saved_number) char (32);
dcl  i fixed bin;

	if sop = null then				/* if first open or close, */
	     return;				/* must call process_arguments_ */
	saved_opt_ptr = sop;			/* get ptr to allocated saved_options */
	if hbound (arg_options, 1) ^= saved_options.nopts then /* if differenct number of opts.. */
	     return;				/* call process_arguments_ */
	if open_mode ^= 0 then			/* if parsing open description */
	     if open_mode ^= mtape_open_info.open_mode then /* but not opeing for same mode */
		return;				/* let process_arguments_ handle it */
	saved_name, saved_number = "";		/* init key variables */
	term = "0"b;
	do i = 1 to hbound (arg_options, 1) while (^term);/* go through all options */
	     if arg_options (i) ^= saved_options.saved_option (i) then /* if options not equal */
		if arg_options (i - 1) = "-name" |	/* if current option is file name arg */
		     arg_options (i - 1) = "-nm" then
		     saved_name = arg_options (i);	/* save the name */
		else if arg_options (i - 1) = "-number" | /* if current option is file seq number */
			arg_options (i - 1) = "-nb" then
		     saved_number = arg_options (i);	/* save the file seq number */
		else term = "1"b;			/* otherwise, found real mismatch */
	end;
	if term then				/* if we found mismatch, */
	     return;				/* call process_arguments_ */
	if saved_name ^= "" then do;
	     mtape_open_info.file_name = saved_name;	/* copy file name */
	     call INSERT_STRING ("-name", "-nm", saved_name); /* update open description */
	end;
	if saved_number ^= "" then do;		/* if we found different seq number */
	     mtape_open_info.seq_number = cv_dec_check_ (saved_number, code);
	     if code ^= 0 then			/* if invalid number */
		return;				/* let process_arguments_ put out diagnostic */
	     if mtape_open_info.seq_number > 9999 then	/* if seq number to large */
		return;				/* let process_arguments_ put out diagnostic */
	     call INSERT_STRING ("-number", "-nb", saved_number); /* update open description */
	end;

	go to non_local_return;			/* optimization worked, arg processing complete */

     end OPTIMIZE_PARSE;
%page;
/* SAVE_OPTIONS - internal procedure to save current iox_ open array for open and close */

SAVE_OPTIONS: proc (sop);

dcl  sop ptr;

	if sop ^= null then				/* if we had a saved option array before */
	     free sop -> saved_options in (based_area);	/* free it first */
	all_len = hbound (arg_options, 1);		/* get number of options to allocate */
	allocate saved_options in (based_area) set (saved_opt_ptr);
	saved_options.saved_option = arg_options;	/* copy them in */
	sop = saved_opt_ptr;			/* and set the pointer */

     end SAVE_OPTIONS;

/* INSERT_STRING - internal procedure  to update open description with new values */

INSERT_STRING: proc (prim_ref, alt_ref, ins_str);

dcl  (prim_ref, alt_ref, ins_str) char (*);
dcl  (ref_pos, arg_start, arg_len, ins_str_len) fixed bin;

	opn_desc_len = length (open_desc);		/* set open desc length variable */
	ins_str_len = length (rtrim (ins_str));		/* get string length to insert */
	ref_pos = index (open_desc, prim_ref);		/* get start position of reference name */
	if ref_pos = 0 then do;			/* couldn't find primary ref name */
	     ref_pos = index (open_desc, alt_ref);	/* try alternate */
	     if ref_pos = 0 then return;		/* could not find it either, forget it */
	     ref_pos = ref_pos + length (alt_ref);	/* go to end of ref name */
	end;
	else ref_pos = ref_pos + length (prim_ref);	/* go to end of ref name */
	arg_start = verify (substr (open_desc, ref_pos), " "); /* find beginning of arg */
	arg_start = (arg_start + ref_pos) - 1;		/* make it absolute position */
	arg_len = search (substr (open_desc, arg_start), " "); /* get length */
	if arg_len = 0 then				/* if at end of string */
	     arg_len = (opn_desc_len - arg_start) + 1;	/* figure length to end of string */
	else arg_len = arg_len - 1;
	if arg_start = opn_desc_len then do;		/* if appending to end of string */
	     if ins_str_len > arg_len then		/* if new string is longer than old */
		open_desc = open_desc || copy (" ", ins_str_len - arg_len); /* grow string length */
	     substr (open_desc, arg_start) = rtrim (ins_str);
	end;
	else substr (open_desc, arg_start) = rtrim (ins_str) || substr (open_desc, arg_start + arg_len);

     end INSERT_STRING;
%page;
/* PROC_ARGS - internal procedure to get arg processing definition ptr and call in to process the args */

PROC_ARGS: proc (def_name, ctl_ptr);

dcl  def_name char (*) varying;
dcl  ctl_ptr ptr;					/* ptr to arg processing control structure */

	if ctl_ptr = null then do;			/* if first time, get ctl structure */
	     call process_arguments_$get_definition (def_name, mtape_data.areap, ctl_ptr, code); /* get ptr to definition */
	     if code ^= 0 then			/* can't find it */
		go to non_local_return;		/* take non-local goto and return */
	end;
	def_ptr = ctl_ptr;				/* save the ctl ptr */
	call process_arguments_$argument_array ((def_name), 0, arg_options, def_ptr, ap_areap, rpvap, code);
	if code ^= 0 then				/* if error */
	     go to non_local_return;			/* take non-local goto and return */

     end PROC_ARGS;

/* GET_REF_NAME - internal procedure to return an options reference name, given the option name */

GET_REF_NAME: proc (opt_name) returns (char (32) varying);

dcl  opt_name char (*) varying;

	call process_arguments_$get_reference_name (def_ptr, opt_name, pos_ref_name, neg_ref_name);
	return (pos_ref_name);			/* return name to caller */

     end GET_REF_NAME;

/* GET_BIN_REF_NAME - internal procedure to return a binary options positive or negative reference name,
   given the option name and the binary state of the option */

GET_BIN_REF_NAME: proc (opt_name, bin_state) returns (char (32) varying);

dcl  opt_name char (*) varying;
dcl  bin_state bit (1) aligned;

	call process_arguments_$get_reference_name (def_ptr, opt_name, pos_ref_name, neg_ref_name);
	if bin_state then				/* if option is "on" */
	     return (pos_ref_name);			/* return positive name to caller */
	else return (neg_ref_name);			/* switch is off, return neg name */

     end GET_BIN_REF_NAME;
%page;
/* SETUP - internal procedure to set up our enviornment */

SETUP: proc;

	mtdp = arg_mtdp;
	maip = mtape_data.attach_info_ptr;		/* get info ptrs set up */
	moip = mtape_data.open_info_ptr;
	mcip = mtape_data.close_info_ptr;
	mpfmip = mtape_data.pfm_info_ptr;
	arg_code, code = 0;
	rpvap, ad_cs_ptr, ap_areap = null;

     end SETUP;

/* ALLOCATE_AP_AREA - internal procedure to allocate temp area for process_arguments_ */

ALLOCATE_AP_AREA: proc;

	unspec (ai) = "0"b;				/* clear out area info */
	ai.version = area_info_version_1;		/* set up area info block */
	ai.control.extend = "1"b;
	ai.control.zero_on_alloc = "1"b;
	ai.owner = myname;
	ai.size = sys_info$max_seg_size;
	ai.version_of_area = area_info_version_1;
	ai.areap = null;
	call define_area_ (addr (ai), code);		/* get an area, for arg processing use */
	if code ^= 0 then do;
	     call mtape_util_$error (mtdp, code, "Error from define_area_");
	     go to non_local_return;
	end;
	ap_areap = ai.areap;			/* copy area pointer */
	allocate desc_string in (ap_area) set (desc_ptr); /* allocate storage for description */

     end ALLOCATE_AP_AREA;
%page;
/* GET_PFM_OPTIONS - internal procedure to get PFM dependent options */

GET_PFM_OPTIONS: proc (pavp, pop);

dcl  (pavp, pop) ptr;

	do i = 1 to hbound (PFM_OPT_SW, 1);
	     call process_arguments_$get_option_value (rpvap, mtape_data.areap, found_opts,
		PFM_OPT_SW (i), pavp -> pfm_arg_values.pfm_opt_sw (i));
	     if found_opts ^= "0"b then do;		/* if option exists.. */
		pop -> pfm_options.pfm_opt_flags (i).flag_name = GET_REF_NAME (PFM_OPT_SW (i));
		pop -> pfm_options.pfm_opt_flags (i).flag_ant_name = neg_ref_name;
	     end;
	end;

	do i = 1 to hbound (PFM_OPT_VALUE, 1);
	     call process_arguments_$get_option_value (rpvap, mtape_data.areap, found_opts,
		PFM_OPT_VALUE (i), pavp -> pfm_arg_values.pfm_opt_value (i));
	     if found_opts ^= "0"b then		/* if option exists.. */
		pop -> pfm_options.pfm_opt_value_name (i) = GET_REF_NAME (PFM_OPT_VALUE (i));
	end;

	do i = 1 to hbound (PFM_OPT_STR, 1);
	     call process_arguments_$get_option_value (rpvap, mtape_data.areap, found_opts,
		PFM_OPT_STR (i), pavp -> pfm_arg_values.pfm_opt_str (i));
	     if found_opts ^= "0"b then		/* if option exists.. */
		pop -> pfm_options.pfm_opt_str_name (i) = GET_REF_NAME (PFM_OPT_STR (i));
	end;

     end GET_PFM_OPTIONS;
%page;

/* valid_IBM_open_args - internal proc to perform some basic checking of format
   vis-a-vis block and record sizes. */

valid_IBM_open_args: proc () returns (bit (1));

	if (valid_ibm_file_name (rtrim (mtape_open_info.file_name))) then ;
	else do;
	     code = error_table_$bad_name;
	     call mtape_util_$error (mtdp, code,
		"The data set name ^a does not meet the IBM specifications.", mtape_open_info.file_name);
	     return ("0"b);
	end;

	if mtape_open_info.file_format = "f" then do;	/* fixed format				*/
	     if mtape_open_info.block_length ^= 0 then do;
						/* if it's specified, it better equal the record length */
		if mtape_open_info.block_length ^= mtape_open_info.record_length then do;
		     code = error_table_$inconsistent;
		     call mtape_util_$error (mtdp, code,
			"^/Fixed format requires that record and block lengths be equal.");
		     return ("0"b);
		end;
	     end;
	     return ("1"b);
	end;
	else if mtape_open_info.file_format = "fb" then do; /* fixed block				*/
	     if mtape_open_info.block_length = 0 then do; /* must be specified			*/
		code = error_table_$noarg;
		call mtape_util_$error (mtdp, code,
		     "^/Fixed block format requires a ""-block"" size.");
		return ("0"b);
	     end;
	     if mtape_open_info.record_length = 0 then do;
						/* this must be there too...			*/
		code = error_table_$noarg;
		call mtape_util_$error (mtdp, code,
		     "^/""-record"" argument not specified.");
		return ("0"b);
	     end;
	     if mod (mtape_open_info.block_length, mtape_open_info.record_length) ^= 0 then do;
						/* and they must be mod 0			*/
		code = error_table_$inconsistent;
		call mtape_util_$error (mtdp, code,
		     "^/The block size must be a mod 0 of the record size.");
		return ("0"b);
	     end;
	     return ("1"b);
	end;
	else if mtape_open_info.file_format = "v" then do;/* v format				*/
	     if mtape_open_info.block_length ^= 0 then do;/* if there, it MUST be record length + 4	*/
		if mtape_open_info.block_length ^= mtape_open_info.record_length + 4 then do;
		     code = error_table_$inconsistent;
		     call mtape_util_$error (mtdp, code,
			"^/The specified block length MUST be record_length + 4.");
		     return ("0"b);
		end;
	     end;
	     return ("1"b);
	end;
	else if mtape_open_info.file_format = "vb" then do;
						/* vb format				*/
	     if mtape_open_info.block_length = 0 then do;
		code = error_table_$noarg;
		call mtape_util_$error (mtdp, code,
		     "^/No ""-block"" specified.");
		return ("0"b);
	     end;
	     if mtape_open_info.block_length >= mtape_open_info.record_length + 4 then ;
	     else do;
		code = error_table_$inconsistent;
		call mtape_util_$error (mtdp, code,
		     "^/The block length must be greater than or equal to the record_length + 4.");
		return ("0"b);
	     end;
	     return ("1"b);
	end;
	else if mtape_open_info.file_format = "vs" then do;
	     if (mtape_open_info.block_length < 20) |
		(mtape_open_info.block_length > 32760) then do;
		code = error_table_$inconsistent;
		call mtape_util_$error (mtdp, code,
		     "^/Format ""vs"" requires that the block length be >= 20 and <= 32760 characters.");
		return ("0"b);
	     end;
	     return ("1"b);
	end;
	else if mtape_open_info.file_format = "vbs" then do;
	     if (mtape_open_info.block_length < 20) |
		(mtape_open_info.block_length > 32760) then do;
		code = error_table_$inconsistent;
		call mtape_util_$error (mtdp, code,
		     "^/Format ""vbs"" requires that the block length be >= 20 and <= 32760 characters.");
		return ("0"b);
	     end;
	     return ("1"b);
	end;

	else if mtape_open_info.file_format = "u" then do;/* u format				*/
	     if mtape_open_info.record_length ^= 0 then do;
		code = error_table_$inconsistent;
		call mtape_util_$error (mtdp, code,
		     "^/Format u and ""-record"".");
		return ("0"b);
	     end;
	     return ("1"b);
	end;
	code = error_table_$inconsistent;
	call mtape_util_$error (mtdp, code,
	     "^/Didn't recognize format ^a.", mtape_open_info.file_format);
	return ("0"b);
     end valid_IBM_open_args;
%page;

/* valid_ANSI_open_args - Like for IBM above, but using ANSI laws...					*/

valid_ANSI_open_args: proc () returns (bit (1));

	if (valid_ansi_file_name (rtrim (mtape_open_info.file_name))) then ;
	else do;
	     code = error_table_$bad_name;
	     call mtape_util_$error (mtdp, code,
		"The file name ^a does not meet the ANSI specifications.", mtape_open_info.file_name);
	     return ("0"b);
	end;

	if mtape_open_info.file_format = "f" then do;	/* fixed format				*/
	     if mtape_open_info.block_length ^= 0 then do;
						/* if it's specified, it better equal the record length */
		if mtape_open_info.block_length ^= mtape_open_info.record_length then do;
		     code = error_table_$inconsistent;
		     call mtape_util_$error (mtdp, code,
			"^/Fixed format requires that record and block lengths be equal.");
		     return ("0"b);
		end;
	     end;
	     return ("1"b);
	end;
	else if mtape_open_info.file_format = "fb" then do; /* fixed block				*/
	     if mtape_open_info.block_length = 0 then do; /* must be specified			*/
		code = error_table_$noarg;
		call mtape_util_$error (mtdp, code,
		     "^/Fixed block format requires a ""-block"" size.");
		return ("0"b);
	     end;
	     if mtape_open_info.record_length = 0 then do;
						/* this must be there too...			*/
		code = error_table_$noarg;
		call mtape_util_$error (mtdp, code,
		     "^/""-record"" argument not specified.");
		return ("0"b);
	     end;
	     if mod (mtape_open_info.block_length, mtape_open_info.record_length) ^= 0 then do;
						/* and they must be mod 0			*/
		code = error_table_$inconsistent;
		call mtape_util_$error (mtdp, code,
		     "^/The block size must be mod 0 the record size.");
		return ("0"b);
	     end;
	     return ("1"b);
	end;
	else if mtape_open_info.file_format = "d" then do;/* v format				*/
	     if mtape_open_info.block_length ^= 0 then do;
		if mtape_open_info.block_length ^= mtape_open_info.record_length then do;
		     code = error_table_$inconsistent;
		     call mtape_util_$error (mtdp, code,
			"^/Format ""d"" requires that block and record sizes be equal.");
		     return ("0"b);
		end;
	     end;
	     if mtape_open_info.record_length > 9996 then do;
		code = error_table_$inconsistent;
		call mtape_util_$error (mtdp, code,
		     "^/The maximum record length for format ""d"" is 9996 bytes to allow for the record control word.");
		return ("0"b);
	     end;

	     return ("1"b);
	end;
	else if mtape_open_info.file_format = "db" then do; /* vb format				*/
	     if mtape_open_info.block_length < mtape_open_info.record_length then do;
		code = error_table_$inconsistent;
		call mtape_util_$error (mtdp, code,
		     "^/The block size must not be less than the record size.");
		return ("0"b);
	     end;
	     if mtape_open_info.record_length > 9996 then do;
		code = error_table_$inconsistent;
		call mtape_util_$error (mtdp, code,
		     "^/The maximum record length for format ""db"" is 9996 bytes to allow for the record control word.");
		return ("0"b);
	     end;

	     return ("1"b);
	end;
	else if mtape_open_info.file_format = "s" then do;
	     if mtape_open_info.record_length > 1044480 then do;
		code = error_table_$inconsistent;
		call mtape_util_$error (mtdp, code,
		     "^/The record length must be <= 1044480 characters.");
		return ("0"b);
	     end;
	     if (mtape_open_info.block_length < 18) |
		(mtape_open_info.block_length > 99996) then do;
		code = error_table_$inconsistent;
		call mtape_util_$error (mtdp, code,
		     "^/The block length must be >= 18 and <= 99996 characters.");
		return ("0"b);
	     end;
	     return ("1"b);
	end;
	else if mtape_open_info.file_format = "sb" then do;
	     if mtape_open_info.record_length > 1044480 then do;
		code = error_table_$inconsistent;
		call mtape_util_$error (mtdp, code,
		     "^/The record length must be <= 1044480 characters.");
		return ("0"b);
	     end;
	     if (mtape_open_info.block_length < 18) |
		(mtape_open_info.block_length > 99996) then do;
		code = error_table_$inconsistent;
		call mtape_util_$error (mtdp, code,
		     "^/The block length must be >= 18 and <= 99996 characters.");
		return ("0"b);
	     end;
	     return ("1"b);
	end;
	else if mtape_open_info.file_format = "u" then do;
	     if mtape_open_info.record_length ^= 0 then do;
		code = error_table_$inconsistent;
		call mtape_util_$error (mtdp, code,
		     "^/Format ""u"" does not allow the ""-record"" control argument.");
		return ("0"b);
	     end;
	     if mtape_open_info.block_length > 32760 then do;
		code = error_table_$inconsistent;
		call mtape_util_$error (mtdp, code,
		     "^/The block length must not be greater than 32760 characters.");
		return ("0"b);
	     end;
	     return ("1"b);
	end;
	else do;
	     code = error_table_$inconsistent;
	     call mtape_util_$error (mtdp, code,
		"^/Did not recognize ANSI formt ^a.", mtape_open_info.file_format);
	     return ("0"b);
	end;
     end valid_ANSI_open_args;
%page;
valid_ibm_file_name:
     proc (namein) returns (bit (1));

dcl  namein char (*),
     (first_dot, begin_next_dot, next_dot) fixed bin (24) init (0),
     valid_ibm_first_chars char (29) int static options (constant) init (
	"ABCDEFGHIJKLMNOPQRSTUVWXYZ#@$"),
     valid_ibm_rest_chars char (10) int static options (constant) init ("1234567890"),
     ibm_name_seperator char (1) int static options (constant) init ("."),
     ibm_name_max_length fixed bin int static options (constant) init (44),
     ibm_name_indiv_len fixed bin int static options (constant) init (8);

	if (mtape_open_info.open_mode = 2 | mtape_open_info.open_mode = 5) then ;
	else return ("1"b);				/* for input ignoe nameing specs		*/
	if namein = "" then return ("1"b);		/* FUDGE					*/
	if length (namein) > ibm_name_max_length then return ("0"b);
	if length (namein) <= ibm_name_indiv_len then do;
	     if verify (substr (namein, 1, 1), valid_ibm_first_chars) > 0 then return ("0"b);
	     else do;
		if verify (namein, valid_ibm_first_chars || valid_ibm_rest_chars) > 0 then return ("0"b);
		else return ("1"b);			/* finished here				*/
	     end;
	end;
	if verify (namein, valid_ibm_first_chars || valid_ibm_rest_chars || ibm_name_seperator) > 0 then return ("0"b);
	first_dot = index (namein, ibm_name_seperator);
	if first_dot > ibm_name_indiv_len + 1 then return ("0"b);
						/* needs to be there			*/
	begin_next_dot = first_dot + 1;		/* ok, cut up the simple names		*/
	do while ("1"b);
	     if verify (substr (namein, begin_next_dot, 1), valid_ibm_first_chars) > 0 then return ("0"b);
						/* check first chars of each name		*/
	     next_dot = index (substr (namein, begin_next_dot), ibm_name_seperator);
	     if next_dot > ibm_name_indiv_len + 1 then return ("0"b);
	     if next_dot = 0 then return ("1"b);
	     begin_next_dot = begin_next_dot + next_dot;
	     if begin_next_dot >= length (namein) then return ("1"b);
	end;
	return ("1"b);
     end valid_ibm_file_name;

valid_ansi_file_name:
     proc (namein) returns (bit (1));

dcl  namein char (*),
     valid_ansi_chars char (56) int static options (constant) init (
	"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 !""%&'()*+,-./:;<=>?");


	if (mtape_open_info.open_mode = 2 | mtape_open_info.open_mode = 5) then ;
	else return ("1"b);				/* for input ignoe nameing specs		*/
	if length (namein) > 17 then return ("0"b);	/* max len is 17				*/
	if verify (namein, valid_ansi_chars) = 0 then return ("1"b);
	else return ("0"b);
     end valid_ansi_file_name;

%page;
%include mtape_data;
%page;
%include mtape_vol_set;
%page;
%include mtape_attach_info;

%include mtape_detach_info;
%page;
%include mtape_open_close_info;
%page;
%include mtape_pfm_info;

%include mtape_err_stats;
%page;
%include mtape_option_names;
%page;
%include mtape_constants;
%page;
%include rcp_resource_types;
%page;
%include rcp_volume_formats;
%page;
%include area_info;
%page;
%include iox_modes;
%page;
%include pa_option_value_list;

     end mtape_parse_;
