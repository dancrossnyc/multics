/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */
/* format: style2,ind3 */
vu_replace_print_value:
replace_print_value:
   proc (p_print_vector_array_ptr, p_print_vector_index, p_area_ptr, p_dimension_name, p_dimension_value, p_code);

/* DESCRIPTION:

         This  subroutine  replaces  the  value of a specified dimension in a
     print vector.
*/

/* HISTORY:

Written by S. Krupp, 06/07/83.
Modified:
*/

/* START OF DECLARATIONS */

/* Automatic */

      dcl	    i		       fixed bin;
      dcl	    old_pv_ptr	       ptr;
      dcl	    value_length	       fixed bin;

/* Based */

      dcl	    based_area	       area based (p_area_ptr);

      dcl	    1 old_pv	       based (old_pv_ptr),	/* like print_vector */
	      2 number_of_dimensions
			       fixed bin (17),
	      2 maximum_value_length
			       fixed bin (35),
	      2 dimension	       (0 refer (old_pv.number_of_dimensions)),
	        3 identifier       fixed bin (17),
	        3 value	       char (0 refer (old_pv.maximum_value_length)) varying;

/* Builtin */

      dcl	    (hbound, lbound, length, null)
			       builtin;

/* Constant */

      dcl	    myname	       init ("vu_replace_print_value") char (32) varying internal static options (constant);

/* Entry */

      dcl	    sub_err_	       entry () options (variable);

/* External */

      dcl	    error_table_$unimplemented_version
			       fixed bin (35) ext;
      dcl	    (
	    vd_error_$bad_print_vector_index,
	    vd_error_$dim_not_in_vector
	    )		       fixed bin (35) ext;

/* Parameter */

      dcl	    p_print_vector_array_ptr
			       ptr;		/*is a pointer to a
                                             print_vector_array.*/
      dcl	    p_print_vector_index   fixed bin;		/*is the index of the
                                             print_vector in the
                                             print_vector_array that holds the
                                             dimension whose value is to be
                                             replaced.*/
      dcl	    p_area_ptr	       ptr;		/*is a pointer to an area where
                                             the print_vector may be
                                             reallocated if necessary.*/
      dcl	    p_dimension_name       char (*);		/*is the name of the dimension
                                             whose value is to be replaced.*/
      dcl	    p_dimension_value      char (*);		/*is the new value of the
                                             specified dimension.*/
      dcl	    p_code	       fixed bin (35);	/*is a standard system status
                                             code.*/

/* END OF DECLARATIONS */


      p_code = 0;

      print_vector_array_ptr = p_print_vector_array_ptr;

      call CHECK_VERSION ((print_vector_array.version), (PRINT_VECTOR_ARRAY_VERSION_2), "print_vector_array");

      if p_print_vector_index < lbound (print_vector_array.vector_slot, 1)
         | p_print_vector_index > hbound (print_vector_array.vector_slot, 1)
      then
         do;
	  p_code = vd_error_$bad_print_vector_index;
	  return;
         end;

      print_vector_ptr = print_vector_array.vector_slot (p_print_vector_index);

      do i = 1 to print_vector.number_of_dimensions
         while (print_vector_array.dimension_table (print_vector.dimension (i).identifier).name ^= p_dimension_name);
      end;

      if i > print_vector.number_of_dimensions
      then
         do;
	  p_code = vd_error_$dim_not_in_vector;
	  return;
         end;

      value_length = length (p_dimension_value);

      if value_length > print_vector.maximum_value_length
      then
         do;
	  pv_maximum_value_length = value_length;
	  pv_number_of_dimensions = print_vector.number_of_dimensions;
	  old_pv_ptr = print_vector_ptr;
	  allocate print_vector in (based_area) set (print_vector_ptr);
	  print_vector.dimension = old_pv.dimension;
	  print_vector_array.vector_slot (p_print_vector_index) = print_vector_ptr;
	  free old_pv_ptr -> print_vector;
         end;

      print_vector.dimension (i).value = p_dimension_value;

      return;

%page;
CHECK_VERSION:
   proc (p_received_version, p_expected_version, p_structure_name);
      dcl	    p_received_version     fixed bin (35);
      dcl	    p_expected_version     fixed bin (35);
      dcl	    p_structure_name       char (*);
      if p_received_version ^= p_expected_version
      then call
	    sub_err_ (error_table_$unimplemented_version, myname, ACTION_CANT_RESTART, null, 0,
	    "^/Expected version ^d of the ^a structure.
Received version ^d instead.", p_expected_version, p_structure_name, p_received_version);
   end CHECK_VERSION;
%page;
%include sub_err_flags;
%page;
%include vu_print_vector_array;

   end vu_replace_print_value;
