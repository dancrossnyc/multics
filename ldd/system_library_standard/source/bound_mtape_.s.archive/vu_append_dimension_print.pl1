/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */
/* format: style2,ind3 */
vu_append_dimension_print:
append_dimension_print:
   proc (p_work_area_ptr, p_free_old_print_vector_array, p_dimension_name, p_descriptor_ptr, p_print_vector_array_ptr,
      p_dimension_identifier, p_code);

/* DESCRIPTION:
          This module adds a new dimension to an existing print_vector_array.
*/

/* HISTORY:
Written by Lindsey Spratt, 06/01/82.
Modified:
06/30/83 by Lindsey L. Spratt:  Due to an apparent bug in the PL/1 compiler,
            an assignment of structure element of an array to a new copy of
            the array was not working (off by a word, or so).  This assignment
            was replaced with a set of explicit assignments, one for each
            element of the structure.
*/

/* START OF DECLARATIONS */
/* Parameter */

      dcl	    p_work_area_ptr	       ptr;
      dcl	    p_free_old_print_vector_array
			       bit (1) aligned;
      dcl	    p_dimension_name       char (*);
      dcl	    p_descriptor_ptr       ptr;
      dcl	    p_print_vector_array_ptr
			       ptr;
      dcl	    p_dimension_identifier fixed bin;
      dcl	    p_code	       fixed bin (35);

/* Automatic */

      dcl	    dim_idx	       fixed bin;
      dcl	    old_pva_ptr	       ptr;
      dcl	    vector_idx	       fixed bin;


/* Based */

      dcl	    descriptor_string      bit (36) aligned based;
      dcl	    work_area	       area based (p_work_area_ptr);

/* Builtin */

      dcl	    null		       builtin;

/* Controlled */
/* Constant */

      dcl	    MYNAME	       init ("vu_append_dimension_print") char (40) varying internal static
			       options (constant);

/* Entry */

      dcl	    sub_err_	       entry () options (variable);

/* External */

      dcl	    vd_error_$dimension_already_defined
			       fixed bin (35) ext;
      dcl	    error_table_$bad_arg   fixed bin (35) ext;
      dcl	    vd_error_$mismatched_descriptors
			       fixed bin (35) ext;
      dcl	    error_table_$fatal_error
			       fixed bin (35) ext;

/* END OF DECLARATIONS */

      print_vector_array_ptr = p_print_vector_array_ptr;

      do p_dimension_identifier = 1 to print_vector_array.number_of_dimensions
         while (print_vector_array.dimension_table (p_dimension_identifier).name ^= p_dimension_name);
      end;
      if p_dimension_identifier <= print_vector_array.number_of_dimensions
      then
         do;
	  p_code = vd_error_$dimension_already_defined;
	  if p_descriptor_ptr = print_vector_array.dimension_table (p_dimension_identifier).descriptor_ptr
	  then return;
	  else if p_descriptor_ptr = null
		| print_vector_array.dimension_table (p_dimension_identifier).descriptor_ptr = null
	  then return;
	  else if p_descriptor_ptr -> descriptor_string
		= print_vector_array.dimension_table (p_dimension_identifier).descriptor_ptr -> descriptor_string
	  then return;
	  else
	     do;
	        p_code = vd_error_$mismatched_descriptors;
	        return;
	     end;
         end;
      pva_number_of_vector_slots = print_vector_array.number_of_vector_slots;
      pva_number_of_dimensions = p_dimension_identifier;

      pva_maximum_dimension_name_length =
         max (print_vector_array.maximum_dimension_name_length, length (p_dimension_name));

      old_pva_ptr = print_vector_array_ptr;
      alloc print_vector_array in (work_area);
      print_vector_array.version = PRINT_VECTOR_ARRAY_VERSION_2;
      print_vector_array.number_of_vectors = old_pva_ptr -> print_vector_array.number_of_vectors;

      print_vector_array.vector_slot = old_pva_ptr -> print_vector_array.vector_slot;

      do p_dimension_identifier = 1 to print_vector_array.number_of_dimensions - 1;
         print_vector_array.dimension_table (p_dimension_identifier).name =
	  old_pva_ptr -> print_vector_array.dimension_table (p_dimension_identifier).name;
         print_vector_array.dimension_table (p_dimension_identifier).descriptor_ptr =
	  old_pva_ptr -> print_vector_array.dimension_table (p_dimension_identifier).descriptor_ptr;
         print_vector_array.dimension_table (p_dimension_identifier).cv_to_print =
	  old_pva_ptr -> print_vector_array.dimension_table (p_dimension_identifier).cv_to_print;
         print_vector_array.dimension_table (p_dimension_identifier).cv_to_typed =
	  old_pva_ptr -> print_vector_array.dimension_table (p_dimension_identifier).cv_to_typed;
         print_vector_array.dimension_table (p_dimension_identifier).maximum_value_length =
	  old_pva_ptr -> print_vector_array.dimension_table (p_dimension_identifier).maximum_value_length;
      end;

      print_vector_array.dimension_table (p_dimension_identifier).name = p_dimension_name;
      print_vector_array.dimension_table (p_dimension_identifier).descriptor_ptr = p_descriptor_ptr;

      print_vector_array.dimension_table (p_dimension_identifier).maximum_value_length = 0;
      print_vector_array.dimension_table (p_dimension_identifier).cv_to_print = vector_util_$err_no_operation;
      print_vector_array.dimension_table (p_dimension_identifier).cv_to_typed = vector_util_$err_no_operation;
      p_print_vector_array_ptr = print_vector_array_ptr;
      p_dimension_identifier = pva_number_of_dimensions;
      p_code = 0;
      if p_free_old_print_vector_array
      then free old_pva_ptr -> print_vector_array in (work_area);
      return;

%include vu_print_vector_array;
%page;
%include desc_types;
%page;
%include descriptor;
%page;
%include arg_list;
%page;
%include vu_entry_dcls;
   end vu_append_dimension_print;
