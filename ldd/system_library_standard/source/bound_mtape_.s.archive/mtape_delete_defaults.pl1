/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */
/* format: style4,inddcls,^ifthendo,^indproc,indcom,^indblkcom,declareind8,dclind4 */
mtape_delete_defaults: proc ();

     /* DESCRIPTION:

        This command deletes default arguments that have been set
        by the mtape_set_defaults command.  It deletes the
        defaults associated with a particular tape processing operation
        and volume type.  The default arguments are deleted
        from the value segment that the user specifies.

     */

     /* HISTORY:

        Written 09/13/83 by S. Krupp.
     */

     /* START OF DECLARATIONS */

     /* Automatic */

          dcl arg_list_ptr ptr;
          dcl code fixed bin(35);
	dcl db_entryname char(32);
	dcl db_dirname char(168);
	dcl db_full_pathname char(168) var;
	dcl db_rel_pathname char(168) var;
	dcl found_option bit(3);
	dcl idx fixed bin;
          dcl nargs fixed bin;
	dcl operation char(32) var;
	dcl program_name char(64) var;
	dcl result_ptr ptr;
          dcl value_seg_ptr ptr;
	dcl volume_type char(32) var;

	dcl 1 auto_area_info like area_info;

     /* Based */

          dcl found_option_array(3) bit(1) unaligned based(addr(found_option));

     /* Builtin */

          dcl (addr, hbound, null, unspec) builtin;

     /* Condition */

          dcl cleanup condition;

     /* Entries */

          dcl com_err_ entry() options(variable);
          dcl cu_$arg_count entry(fixed bin, fixed bin(35));
          dcl cu_$arg_list_ptr entry (ptr);
          dcl define_area_ entry (ptr, fixed bin(35));
	dcl expand_pathname_$add_suffix entry (char(*), char(*), char(*), char(*), fixed bin(35));
	dcl initiate_file_ entry (char(*), char(*), bit(*), ptr, fixed bin(24), fixed bin(35));
	dcl ioa_$rsnnl entry() options(variable);
	dcl pathname_ entry (char(*), char(*)) returns(char(168));
	dcl process_arguments_$argument_list entry(char(*), fixed bin, ptr, fixed bin, ptr, ptr, ptr, fixed bin(35));
	dcl process_arguments_$get_option_value entry() options(variable);
	dcl release_area_ entry (ptr);
	dcl term_$seg_ptr entry (ptr, fixed bin(35));
          dcl value_$delete_data entry(ptr, bit(36) aligned, char(*), fixed bin(35));

     /* Static */

          dcl (ARG_PROCESSING_MODE init(0),
	     FIRST_ARG_TO_PROCESS init(1)
	    ) fixed bin internal static options(constant);

          dcl (MYNAME init("mtape_delete_defaults"),
	     PROGRAM_NAME_PREFIX init("mtape_")
	    ) char(32) var internal static options(constant);

	dcl (OPERATION_OPTION_IDX init(1),
	     VOLUME_TYPE_OPTION_IDX init(2),
	     PATHNAME_OPTION_IDX init(3)
	    ) fixed bin internal static options(constant);

          dcl PERMANENT_VALUE bit(2) aligned init("01"b) internal static options(constant);
	dcl VALUE_SUFFIX char(5) init("value") internal static options(constant);

          dcl (OPERATION_OPTION_NAME init("operation"),
	     VOLUME_TYPE_OPTION_NAME init("volume_type"),
	     PATHNAME_OPTION_NAME init("pathname")
	    ) char(32) var internal static options(constant);

          dcl LONG_OPTION_REFNAME(3) char(32) var int static options(constant)
	    init("operation", "-volume_type", "-pathname");

          dcl (ATTACH_IDX init(1),
	     OPEN_IDX init(2),
	     CLOSE_IDX init(3),
	     DETACH_IDX init(4)
	    ) fixed bin internal static options(constant);

          dcl OPERATIONS(4) char(6) internal static options(constant)
	   init("attach", "open", "close", "detach");

          dcl VOLUME_TYPES(2) char(32) var internal static options(constant)
             init("ansi", "ibm");

          dcl (error_table_$bad_arg,
	     error_table_$noarg,
	     error_table_$oldnamerr
	    )fixed bin(35) ext static;

	dcl sys_info$max_seg_size fixed bin(35) ext static;

     /* Include */

%page;
%include access_mode_values;
%page;
%include area_info;
%page;
%include pa_value_names;

     /* END OF DECLARATIONS */
%page;

     /* Main Procedure */

     /* Initialize */

          value_seg_ptr = null;

	unspec (auto_area_info) = "0"b;
	auto_area_info.version = area_info_version_1;
	auto_area_info.areap = null;
	auto_area_info.owner = MYNAME;
	auto_area_info.size = sys_info$max_seg_size;
	auto_area_info.zero_on_alloc = "1"b;
	auto_area_info.extend = "1"b;

          call cu_$arg_count(nargs, code);
          if code ^= 0
          then call ABORT(code, "Could not get the argument count.", "");

          if nargs = 0
          then call ABORT(0, "Usage ""mtape_delete_defaults OPERATION {-control_args}""", "");

	on cleanup call CLEANUP();

	call define_area_(addr(auto_area_info), code);
	if code ^= 0
	then call ABORT(code, "Unable to allocate a work area.", "");

  /* Get mtape_delete_default's argument list. */

          call cu_$arg_list_ptr(arg_list_ptr);

  /* Process mtape_delete_defaults's arguments. */

          call process_arguments_$argument_list((MYNAME), ARG_PROCESSING_MODE,
	   arg_list_ptr, FIRST_ARG_TO_PROCESS, null, auto_area_info.areap,
	   result_ptr, code);
          if code ^= 0
	then call ABORT_SILENT();			/* Error msg already printed. */

  /* Get information needed to locate the arguments that are the
     subject of the command line (i.e., the arguments that are
     the defaults for the specified tape processing operation and
     volume type). */

          call process_arguments_$get_option_value(result_ptr,
	   auto_area_info.areap, found_option, OPERATION_OPTION_NAME,
	   operation, VOLUME_TYPE_OPTION_NAME, volume_type,
	   PATHNAME_OPTION_NAME, db_rel_pathname);

          if ^found_option_array(OPERATION_OPTION_IDX)
          then call ABORT(error_table_$noarg, "Missing ""^a"" option.",
	   (LONG_OPTION_REFNAME(OPERATION_OPTION_IDX)));

         do idx = 1 to hbound(OPERATIONS, 1) while(OPERATIONS(idx) ^= operation);
	end;

	if idx > hbound(OPERATIONS, 1)
	then call ABORT(error_table_$bad_arg, "Unknown operation specified:  ""^a"".", (operation));

	if found_option_array(VOLUME_TYPE_OPTION_IDX)
          then do;
               do idx = 1 to hbound(VOLUME_TYPES, 1) while(VOLUME_TYPES(idx) ^= volume_type);
               end;

               if idx > hbound(VOLUME_TYPES, 1)
               then call ABORT(error_table_$bad_arg, "Unknown volume type specified:  ""^a"".", (volume_type));

               if operation = OPERATIONS(ATTACH_IDX) | operation = OPERATIONS(DETACH_IDX)
               then call ABORT(error_table_$bad_arg, "Cannot specify the volume type """ ||
                  volume_type || """ with the ""^a"" operation.", (operation));
          end;

  /* Build the program name from the specified tape processing operation and
     volume type. */
 
          call ioa_$rsnnl("^a.^a^[.^a^;^]", program_name, (0), PROGRAM_NAME_PREFIX,
	   operation, found_option_array(VOLUME_TYPE_OPTION_IDX), volume_type);

  /* Now we locate the value segment and delete the default arguments
     if they are in there. */

          call expand_pathname_$add_suffix((db_rel_pathname), VALUE_SUFFIX, db_dirname, db_entryname, code);
	if code ^= 0
	then call ABORT(code, "^a", (db_rel_pathname));

	db_full_pathname = pathname_(db_dirname, db_entryname);

	call initiate_file_(db_dirname, db_entryname, RW_ACCESS, value_seg_ptr, (0), code);
	if code ^= 0
	then call ABORT(code, "Unable to initiate ^a.", (db_full_pathname));

          call value_$delete_data(value_seg_ptr, (PERMANENT_VALUE), DEFAULT_LINEAR_FORM_PREFIX ||
             "." || program_name, code);
          if code = error_table_$oldnamerr
	then call ABORT((0), "There are no corresponding default arguments^/in ^a.", (db_full_pathname));
           else if code ^= 0
	then call ABORT(code, "Unable to delete the default arguments from ^a.", (db_full_pathname));

          call CLEANUP();

RETURN:

          return;
%page;
CLEANUP: proc();

          if auto_area_info.areap ^= null
	then call release_area_(auto_area_info.areap);

	if value_seg_ptr ^= null
	then call term_$seg_ptr(value_seg_ptr, code);

     end CLEANUP;


ABORT: proc (code, msg, msg_arg);

     /* Parameter */

	dcl code fixed bin (35);
	dcl msg char (*);
	dcl msg_arg char (*);

	call com_err_ (code, MYNAME, msg, msg_arg);
	call CLEANUP();

	goto RETURN;

     end ABORT;


ABORT_SILENT: proc();

          call CLEANUP();

	goto RETURN;

     end ABORT_SILENT;

     end mtape_delete_defaults;
