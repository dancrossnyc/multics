/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* Write a prevailing style control comment into the output segment.

   Written 5-Nov-79 by M. N. Davidoff.
*/
/* format: style5 */
format_pl1_record_style_:
        procedure (P_temp_segs, P_copy_position, P_line_position);

        declare P_temp_segs		(*) pointer;    /* (Input) array of temporary segment pointers */
        declare P_copy_position	fixed binary (21);
					      /* (Input/Output) output segment index of next character */
        declare P_line_position	fixed binary;   /* (Input/Output) column next character will be in */

/* builtin */

        declare (convert, divide, hbound, lbound, length, ltrim, rtrim, size,
	      substr)		builtin;

/* internal static */

        declare NL			char (1) internal static
				options (constant) initial ("
");
        declare SP			char (1) internal static
				options (constant) initial ("");

%include format_pl1_dcls;

/* program */

        temp_segs (*) = P_temp_segs (*);

        call record_style (get_nearest_style ());

        return;

/* Find the predefined style closest to the prevailing style. */

get_nearest_style:
        procedure returns (fixed binary);

        declare differences		fixed binary;
        declare fewest_differences	fixed binary;
        declare nearest_style		fixed binary;
        declare style_index		fixed binary;

        nearest_style = lbound (styles, 1);
        fewest_differences = count_differences (nearest_style);
        do style_index = lbound (styles, 1) + 1 to hbound (styles, 1);
	      differences = count_differences (style_index);
	      if differences < fewest_differences then
		    do;
		    fewest_differences = differences;
		    nearest_style = style_index;
		    end;
        end;

        return (nearest_style);

/* Count how many modes are different between a predefined style and the prevailing style. */

count_differences:
        procedure (style_index) returns (fixed binary);

        declare style_index		fixed binary;   /* (Input) predefined style number */

        declare differences		fixed binary;
        declare mode_index		fixed binary;

        differences = 0;

        do mode_index = lbound (global.prevailing_style.switches, 1)
	  to hbound (global.prevailing_style.switches, 1);
	      if global.prevailing_style.switches (mode_index)
		^= styles (style_index).switches (mode_index) then
		    differences = differences + 1;
        end;

        do mode_index = lbound (global.prevailing_style.values, 1)
	  to hbound (global.prevailing_style.values, 1);
	      if global.prevailing_style.values (mode_index)
		^= styles (style_index).values (mode_index) then
		    differences = differences + 1;
        end;

        return (differences);
        end count_differences;

        end get_nearest_style;

/* Write the prevailing style control comment. */

record_style:
        procedure (nearest_style);

        declare nearest_style		fixed binary;   /* (Input) predefined style closest to the prevailing style */

        declare mode_index		fixed binary;

        declare value_picture		picture "(5)z9" based;

        if P_line_position > 1 then
	      do;
	      call copy_string (NL);
	      P_line_position = 1;
	      end;

        call copy_string ("/*" || SP || control_comment_indicator || SP
	  || style_mode || ltrim (convert (value_picture, nearest_style)));

        do mode_index = lbound (global.prevailing_style.switches, 1)
	  to hbound (global.prevailing_style.switches, 1);
	      if global.prevailing_style.switches (mode_index)
		^= styles (nearest_style).switches (mode_index) then
		    do;
		    call copy_string (mode_separator);

		    if ^global.prevailing_style.switches (mode_index) then
			  if switch_antonym_names (mode_index) = "" then
				call copy_string (
				    switch_mode_not_indicator
				    ||
				    rtrim (
				    switch_mode_names (mode_index)));

			  else
				call copy_string (
				    rtrim (
				    switch_antonym_names (mode_index)));

		    else
			  call copy_string (
			      rtrim (switch_mode_names (mode_index)));
		    end;
        end;

        do mode_index = lbound (global.prevailing_style.values, 1)
	  to hbound (global.prevailing_style.values, 1);
	      if global.prevailing_style.values (mode_index)
		^= styles (nearest_style).values (mode_index) then
		    call copy_string (mode_separator
		        || rtrim (value_mode_names (mode_index))
		        ||
		        ltrim (
		        convert (value_picture,
		        global.prevailing_style.values (mode_index))));
        end;

        call copy_string (SP || "*/" || NL);

        return;

/* Copy a string into the output segment. */

copy_string:
        procedure (string);

        declare string		char (*);	      /* (Input) string to copy into the output segment */

        substr (output_string, P_copy_position, length (string)) = string;
        P_copy_position = P_copy_position + length (string);
        end copy_string;

        end record_style;

        end format_pl1_record_style_;
