/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */

/* DESCRIPTION:

   Program to format a PL/I program according to my own set of conventions.
   Basically, if-then-else and do-end groups get lined up so that it is easy
   to find the matching else statement, or the end of a do-end group.

   This program has its origins in the Multics indent command, but unlike
   indent, we understand the syntax of PL/I fully, and don't get confused by
   strange constructs.  We also attempt to do more processing, since we have
   the knowledge.

   I have wanted to write this program for a long time.  I published my first
   ideas in my S.B.  thesis in 1973.  I wrote a draft of the parser in 1974.
   The notes I took for the lexical analyzer for format_pl1 turned into the
   EIS lex for PL/I itself in 1977.  So at long last...  (Paul Green)

   This command is being modified to be the Multics standard PL/I formatting
   command for MCR 3503.  Consequently, it must have options to make it act
   similar to indent as well as other formatting styles.  (Monte Davidoff)

   Maintenance Instructions:

   To add another:

   1) PL/I statement, see format_pl1_stmt_type_, format_pl1_.
   2) Formatting mode, see format_pl1_.
   3) Macro, see format_pl1_lex_, format_pl1_stmt_type_, format_pl1_.
   4) Declare statement attribute, see format_pl1_.
   5) Token type, see format_pl1_lex_, format_pl1_stmt_type_,
   format_pl1_.
   6) Numbered style, see format_pl1_.
*/

/* HISTORY:
   Written by Paul Green, 11/06/77.

   Modified:
   11/01/78 by Monte Davidoff:
   09/01/82 by Benson I. Margulies:  for .X.pmac files.
   06/05/84 by R. Michael Tague:  to recognize all legal pmac % statements.
*/

/* format: style5 */
format_pl1:
fp:
        procedure options (variable);

/* automatic */

        declare arg_count		fixed binary;
        declare arg_length		fixed binary (21);
        declare arg_ptr		pointer;
        declare argument_no		fixed binary;
        declare argx		fixed binary;
        declare bit_count		fixed binary (24);
        declare 1 ca,
	        2 check_comments	bit (1),
	        2 no_check_comments	bit (1),
	        2 check_strings	bit (1),
	        2 no_check_strings	bit (1),
	        2 force		bit (1),
	        2 no_force		bit (1),
	        2 long		bit (1),
	        2 brief		bit (1),
	        2 modes		bit (1),
	        2 output_file	bit (1),
	        2 record_style	bit (1),
	        2 no_record_style	bit (1),
	        2 require_style_comment
				bit (1),
	        2 no_require_style_comment
				bit (1),
	        2 version		bit (1),
	        2 no_version	bit (1);
        declare code		fixed binary (35);
        declare in_dname		char (168);
        declare in_ename		char (32);
        declare modes_length		fixed binary (21);
        declare modes_ptr		pointer;
        declare output_ptr		pointer;
        declare source_ptr		pointer;
        declare suffix		char (3);
        declare out_dname		char (168);
        declare out_ename		char (32);

/* based */

        declare arg_string		char (arg_length) based (arg_ptr);
        declare modes_string		char (modes_length) based (modes_ptr);

/* builtin */

        declare (baseno, divide, index, null, reverse, rtrim, size, string,
	      substr)		builtin;

/* condition */

        declare cleanup		condition;

/* internal static */

        declare DEFAULT_STYLE		fixed binary internal static
				options (constant) initial (1);
        declare VERSION		char (3) internal static
				options (constant) initial ("6.6");

/* external static */

        declare error_table_$badopt	fixed binary (35) external static;
        declare error_table_$noentry	fixed binary (35) external static;
        declare format_pl1_severity_	fixed binary (35) external static;

/* entry */

        declare com_err_		entry options (variable);
        declare com_err_$suppress_name	entry options (variable);
        declare cu_$arg_count		entry (fixed binary, fixed binary (35));
        declare cu_$arg_ptr		entry (fixed binary, pointer,
				fixed binary (21), fixed binary (35));
        declare expand_pathname_	entry (char (*), char (*), char (*),
				fixed binary (35));
        declare get_equal_name_	entry (char (*), char (*), char (32),
				fixed binary (35));
        declare get_temp_segments_	entry (char (*), (*) pointer,
				fixed binary (35));
        declare hcs_$initiate_count	entry (char (*), char (*), char (*),
				fixed binary (24), fixed binary (2),
				pointer, fixed binary (35));
        declare hcs_$make_seg		entry (char (*), char (*), char (*),
				fixed binary (5), pointer,
				fixed binary (35));
        declare ioa_		entry options (variable);
        declare release_temp_segments_	entry (char (*), (*) pointer,
				fixed binary (35));
        declare suffixed_name_$make	entry (char (*), char (*), char (32),
				fixed binary (35));
        declare suffixed_name_$new_suffix
				entry (char (*), char (*), char (*),
				char (32), fixed binary (35));
        declare terminate_file_	entry (pointer, fixed binary (24),
				bit (*), fixed binary (35));

%include format_pl1_dcls;
%include terminate_file;
%include access_mode_values;

/* program */

        source_ptr = null;
        output_ptr = null;
        temp_segs (*) = null;
        modes_ptr = null;
        modes_length = 0;
        format_pl1_severity_ = 5;

        string (ca) = ""b;
        ca.long = "1"b;

        call cu_$arg_count (arg_count, code);
        if code ^= 0 then
	      do;
	      call com_err_ (code, command);
	      return;
	      end;

        argument_no = 0;
        do argx = 1 to arg_count;
	      call cu_$arg_ptr (argx, arg_ptr, arg_length, code);
	      if code ^= 0 then
		    do;
		    call com_err_ (code, command, "Argument ^d.", argx);
		    return;
		    end;

	      if arg_string = "-version" | arg_string = "-ver" then
		    do;
		    ca.version = "1"b;
		    ca.no_version = "0"b;
		    end;

	      else    if arg_string = "-no_version" | arg_string = "-nver"
		        then
		    do;
		    ca.version = "0"b;
		    ca.no_version = "1"b;
		    end;

	      else    if arg_string = "-record_style" | arg_string = "-rcst"
		        then
		    do;
		    ca.record_style = "1"b;
		    ca.no_record_style = "0"b;
		    end;

	      else    if arg_string = "-no_record_style"
		        | arg_string = "-nrcst" then
		    do;
		    ca.record_style = "0"b;
		    ca.no_record_style = "1"b;
		    end;

	      else    if arg_string = "-check_comments"
		        | arg_string = "-ckcom" then
		    do;
		    ca.check_comments = "1"b;
		    ca.no_check_comments = "0"b;
		    end;

	      else    if arg_string = "-no_check_comments"
		        | arg_string = "-nckcom" then
		    do;
		    ca.check_comments = "0"b;
		    ca.no_check_comments = "1"b;
		    end;

	      else    if arg_string = "-check_strings" | arg_string = "-ckstr"
		        then
		    do;
		    ca.check_strings = "1"b;
		    ca.no_check_strings = "0"b;
		    end;

	      else    if arg_string = "-no_check_strings"
		        | arg_string = "-nckstr" then
		    do;
		    ca.check_strings = "0"b;
		    ca.no_check_strings = "1"b;
		    end;

	      else    if arg_string = "-require_style_comment"
		        | arg_string = "-rqst" then
		    do;
		    ca.require_style_comment = "1"b;
		    ca.no_require_style_comment = "0"b;
		    end;

	      else    if arg_string = "-no_require_style_comment"
		        | arg_string = "-nrqst" then
		    do;
		    ca.require_style_comment = "0"b;
		    ca.no_require_style_comment = "1"b;
		    end;

	      else    if arg_string = "-force" | arg_string = "-fc" then
		    do;
		    ca.force = "1"b;
		    ca.no_force = "0"b;
		    end;

	      else    if arg_string = "-no_force" | arg_string = "-nfc" then
		    do;
		    ca.force = "0"b;
		    ca.no_force = "1"b;
		    end;

	      else    if arg_string = "-long" | arg_string = "-lg" then
		    do;
		    ca.long = "1"b;
		    ca.brief = "0"b;
		    end;

	      else    if arg_string = "-brief" | arg_string = "-bf" then
		    do;
		    ca.long = "0"b;
		    ca.brief = "1"b;
		    end;

	      else    if arg_string = "-modes" | arg_string = "-mode"
		        | arg_string = "-md" then
		    do;
		    argx = argx + 1;
		    if argx > arg_count then
			  do;
			  call com_err_ (0, command,
			      "Missing modes string after -modes.");
			  return;
			  end;

		    call cu_$arg_ptr (argx, modes_ptr, modes_length, code);
		    if code ^= 0 then
			  do;
			  call com_err_ (code, command, "Argument ^d.",
			      argx);
			  return;
			  end;

		    ca.modes = "1"b;
		    end;

	      else    if arg_string = "-output_file" | arg_string = "-of" then
		    do;
		    argx = argx + 1;
		    if argx > arg_count then
			  do;
			  call com_err_ (0, command,
			      "Missing pathname after -output_file.");
			  return;
			  end;

		    call cu_$arg_ptr (argx, arg_ptr, arg_length, code);
		    if code ^= 0 then
			  do;
			  call com_err_ (code, command, "Argument ^d.",
			      argx);
			  return;
			  end;

		    call expand_pathname_ (arg_string, out_dname, out_ename,
		        code);
		    if code ^= 0 then
			  do;
			  call com_err_ (code, command, "^a", arg_string);
			  return;
			  end;

		    ca.output_file = "1"b;
		    end;

	      else    if index (arg_string, "-") = 1 then
		    do;
		    call com_err_ (error_table_$badopt, command, "^a",
		        arg_string);
		    return;
		    end;

	      else
		    do;
		    argument_no = argument_no + 1;

		    if argument_no = 1 then
			  do;
			  call expand_pathname_ (arg_string, in_dname,
			      in_ename, code);
			  if code ^= 0 then
				do;
				call com_err_ (code, command, "^a",
				    arg_string);
				return;
				end;
			  end;
		    end;
        end;

        if argument_no ^= 1 then
	      do;
	      call com_err_$suppress_name (0, command,
		"Usage: ^a in_path {-control_args}", command);
	      return;
	      end;

        on cleanup call cleanup_procedure;

        call get_input_segment (code);
        if code ^= 0 then
	      do;
	      call cleanup_procedure;
	      return;
	      end;

        if ca.output_file then
	      begin;
	      declare old_ename	        char (32);

	      old_ename = out_ename;
	      call get_equal_name_ (in_ename, old_ename, out_ename, code);
	      if code ^= 0 then
		    do;
		    call com_err_ (code, command, "Equal name ^a with ^a.",
		        old_ename, in_ename);
		    call cleanup_procedure;
		    return;
		    end;

	      old_ename = out_ename;
	      call suffixed_name_$make (old_ename, suffix, out_ename, code);
	      if code ^= 0 then
		    do;
		    call com_err_ (code, command, "^a with ^a suffix.",
		        old_ename, suffix);
		    call cleanup_procedure;
		    return;
		    end;
	      end;

        call get_temp_segments_ (command, temp_segs (*), code);
        if code ^= 0 then
	      do;
	      call com_err_ (code, command,
		"Getting temporary segments in process directory.");
	      call cleanup_procedure;
	      return;
	      end;

        global.source_ptr = source_ptr;
        global.source_length = divide (bit_count + 8, 9, 21);
        global.max_severity = 0;
        global.modes_ptr = modes_ptr;
        global.modes_length = modes_length;
        global.ca = ca, by name;
        global.include_file = ends_with (in_ename, ".incl.pl1");
        global.rdc_source = ends_with (in_ename, ".rd");

/* Initialize the current style. */

        global.current_style = styles (DEFAULT_STYLE);

        if ca.modes then
	      do;
	      call format_pl1_modes_ (temp_segs (*), modes_string, null, "0"b,
		"0"b);
	      if global.max_severity > 0 then
		    do;
		    format_pl1_severity_ = global.max_severity;
		    call cleanup_procedure;
		    return;
		    end;
	      end;

        else
	      global.ca.long = "0"b;

        global.command_line_style = global.current_style;

        if ca.force then
	      global.current_style = styles (DEFAULT_STYLE);

/* Initialization is complete.  Print version if requested. */

        if ca.version then
	      call ioa_ ("Format PL/I ^a", VERSION);

/* Lex the program. */

        call format_pl1_lex_ (temp_segs (*));
        if global.max_severity > 2 then
	      do;
	      format_pl1_severity_ = global.max_severity;
	      call com_err_ (0, command, "No formatting will be done.");
	      call cleanup_procedure;
	      return;
	      end;

/* Produce a list of statements. */

        call format_pl1_stmt_type_ (temp_segs (*));
        if global.max_severity > 3 then
	      do;
	      format_pl1_severity_ = global.max_severity;
	      call com_err_ (0, command, "No formatting will be done.");
	      call cleanup_procedure;
	      return;
	      end;

/* Do the formatting. */

        call format_pl1_ (temp_segs (*));
        if global.max_severity > 3 then
	      do;
	      format_pl1_severity_ = global.max_severity;
	      call com_err_ (0, command, "No formatting will be done.");
	      call cleanup_procedure;
	      return;
	      end;

/* Copy the formatted program over to the output segment. */

        if ^ca.output_file then
	      if global.max_severity <= 1 then
		    do;
		    out_dname = in_dname;
		    out_ename = in_ename;
		    output_ptr = source_ptr;
		    source_ptr = null;
		    end;

	      else
		    do;
		    out_dname = "[pd]";
		    out_ename = in_ename;

		    call hcs_$make_seg ("", out_ename, "", RW_ACCESS_BIN,
		        output_ptr, code);
		    if output_ptr = null then
			  do;
			  call com_err_ (code, command, "^a^[>^]^a",
			      out_dname, out_dname ^= ">", out_ename);
			  call cleanup_procedure;
			  return;
			  end;

		    if baseno (source_ptr) = baseno (output_ptr) then
			  do;
			  format_pl1_severity_ = global.max_severity;
			  call com_err_ (0, command,
			      "Input segment not replaced.");
			  call cleanup_procedure;
			  return;
			  end;

		    call com_err_ (0, command,
		        "Input segment not replaced. Formatted copy is in ^a^[>^]^a."
		        , out_dname, out_dname ^= ">", out_ename);
		    end;

        else
	      do;
	      call hcs_$make_seg (out_dname, out_ename, "", RW_ACCESS_BIN,
		output_ptr, code);
	      if output_ptr = null then
		    do;
		    call com_err_ (code, command, "^a^[>^]^a", out_dname,
		        out_dname ^= ">", out_ename);
		    call cleanup_procedure;
		    return;
		    end;
	      end;

        substr (output_ptr -> output_string, 1, global.output_length) =
	  substr (output_string, 1, global.output_length);

        call terminate_file_ (output_ptr, 9 * global.output_length,
	  TERM_FILE_TRUNC_BC_TERM, code);
        if code ^= 0 then
	      do;
	      global.max_severity = 5;
	      call com_err_ (code, command, "Terminating the file ^a^[>^]^a.",
		out_dname, out_dname ^= ">", out_ename);
	      end;

        format_pl1_severity_ = global.max_severity;

        call cleanup_procedure;

        return;

get_input_segment:
        procedure (code);

        declare code		fixed binary (35);
					      /* (Output) standard status code */

        declare explicit_suffix	bit (1) aligned;
        declare tentative_ename	char (32);
        declare test_ename		char (32);


/* NOTE: pmac suffices, like rd, must be explicit. */
/*       no attempt is made to remember pmac-ness so as to */
/*       reject %set etc. in non-pmac segments, since this will */
/*       be in the compiler some day. */

        code = 0;
        explicit_suffix = "1"b;

        if ends_with (in_ename, ".pmac") then
	      test_ename = before (in_ename, ".pmac");
        else
	      test_ename = in_ename;

        if ends_with (test_ename, ".pl1") then
	      suffix = "pl1";

        else    if ends_with (test_ename, ".cds") then
	      suffix = "cds";

        else    if ends_with (test_ename, ".rd") then
	      suffix = "rd";

        else
	      do;
	      explicit_suffix = "0"b;
	      suffix = "pl1";

	      tentative_ename = in_ename;
	      call suffixed_name_$make (tentative_ename, suffix, in_ename,
		code);
	      if code ^= 0 then
		    do;
		    call com_err_ (code, command, "^a with ^a suffix.",
		        tentative_ename, suffix);
		    return;
		    end;
	      end;

        call hcs_$initiate_count (in_dname, in_ename, "", bit_count, 0,
	  source_ptr, code);
        if source_ptr ^= null then
	      do;
	      code = 0;
	      return;
	      end;

        if explicit_suffix | code ^= error_table_$noentry then
	      do;
	      call com_err_ (code, command, "^a^[>^]^a", in_dname,
		in_dname ^= ">", in_ename);
	      return;
	      end;

        call suffixed_name_$new_suffix (in_ename, "pl1", "cds", tentative_ename,
	  code);
        if code ^= 0 then
	      do;
	      call com_err_ (code, command, "^a with ^a suffix.", in_ename,
		"cds");
	      return;
	      end;

        call hcs_$initiate_count (in_dname, tentative_ename, "", bit_count, 0,
	  source_ptr, code);
        if source_ptr ^= null then
	      do;
	      code = 0;
	      in_ename = tentative_ename;
	      suffix = "cds";
	      return;
	      end;

        if code = error_table_$noentry then
	      call com_err_ (code, command, "^a^[>^]^a", in_dname,
		in_dname ^= ">", in_ename);
        else
	      call com_err_ (code, command, "^a^[>^]^a", in_dname,
		in_dname ^= ">", tentative_ename);
        end get_input_segment;

/* Check if one string ends another with trailing blanks ignored. */

ends_with:
        procedure (string, ending) returns (bit (1) aligned);

        declare string		char (*);	      /* (Input) string with unknown ending */
        declare ending		char (*);	      /* (Input) possible ending */

        return (index (reverse (rtrim (string)), reverse (rtrim (ending))) = 1);
        end ends_with;

/* Release temporary storage and terminate segments. */

cleanup_procedure:
        procedure;

        call terminate_file_ (source_ptr, 0, TERM_FILE_TERM, code);
        call terminate_file_ (output_ptr, 0, TERM_FILE_TERM, code);
        call release_temp_segments_ (command, temp_segs (*), code);
        end cleanup_procedure;

        end format_pl1;
