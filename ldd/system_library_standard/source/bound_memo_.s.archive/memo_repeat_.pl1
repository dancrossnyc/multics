/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */

/****^  HISTORY COMMENTS:
  1) change(86-07-15,Rauschelbach), approve(86-07-15,MCR7472),
     audit(86-08-07,GJohnson), install(86-08-08,MR12.0-1122):
     rewitten to fix misc_commands 344 TR 20424
     memo will now reschedule only 1 cycle of a repeating memo after
     memo -on is given.
  2) change(88-04-30,GDixon), approve(88-05-26,MCR7900),
     audit(88-07-28,Lippard), install(88-08-02,MR12.2-1075):
      Change the way the -repeat interval is applied, so that the interval is
      applied relative to the memo maturity_time (or to the current time if
      -repeat_when_processed was given), rather than relative to a zero clock
      reading (Jan 1, 1901 0000.  gmt.).  If application of one interval still
      leaves a maturity date in the past, reapply the interval relative to the
      previously computed maturity_time, as the date may affect the meaning of
      the repeat interval.  For example, "-repeat 1 year" corresponds to a
      different number of days depending upon whether the maturity_time falls
      in a leap year or not.  In another example,
        -repeat "fri before 2mo this mo 1 this yr"
      has a varying meaning depending upon the month/year of the maturity_time.
     
      Processing of frequently-encountered, fixed-length repeat intervals such
      as "15 minutes" is optimized by having an internal interface into
      convert_date_to_binary_ analyze the time_string to determine if it
      consists only of fixed-length offsets.  If so, then memo_repeat_ can
      add the repeat interval directly to the prior maturity_time iteratively
      until a time in the future is obtained. (phx21094)
                                                   END HISTORY COMMENTS */

/* ************************************************************************* */
/*							       */
/* At the point in memo where this subroutine is called, any memos which     */
/* have matured have been run.  Now if the memo was a repeating memo, this   */
/* program will reschedule a new memo for the next interval in the future    */
/* which was given with -repeat.  If -repeat_when_processed was given, the   */
/* interval is added to to current P_memo_time_now value.  Note that the     */
/* memo interval will not be set in relation to the -time value if           */
/* -repeat_when_processed is given.				       */
/*							       */
/* If the more than one occurrence of the interval has passed since the memo */
/* has matured, then the interval will be added to the last time the memo    */
/* was scheduled to mature (which is in the current memo_entry) until the    */
/* maturity time of is greater than the time_now.  Then a new memo entry     */
/* is given and its index is returned to the caller.		       */
/*							       */
/* ************************************************************************* */
%page;
memo_repeat_: proc (P_msp,		/* (input) points to the memo seg.   */
	          P_idx,		/* (input) index of mature memo entry*/
		P_memo_time_now,	/* (input) match time for maturity   */
		P_code)		/* (output) error code	       */
              returns (fixed bin);      /* (output) index of new memo entry  */


/*     PARAMETERS                                                            */

       dcl P_msp			pointer        parameter,
	 P_idx			fixed bin      parameter,
	 P_memo_time_now		fixed bin (35) parameter,
	 P_code			fixed bin (35) parameter;

/*     AUTOMATIC                                                             */

       dcl current_mature_memo_idx fixed bin,
	 current_time		fixed bin (71),
	 fixed_length_interval	bit(1) aligned,
	 interval			fixed bin (71),
	 maturity_memo_time		fixed bin (35),
	 maturity_time		fixed bin (71),
	 future_mature_memo_idx	fixed bin;

/*     EXTERNAL ENTRIES                                                      */

       dcl convert_date_to_binary_$analyze
				entry (char(*) aligned, fixed bin(71),
				      fixed bin(71), bit(1) aligned,
				      fixed bin(35)),
	 convert_date_to_binary_$relative
				entry (char (*) aligned, 
				      fixed bin (71), fixed bin (71),
				      fixed bin (35)),
           memo_set_		entry (ptr, char (*) aligned,
				      bit (36) aligned, fixed bin (35),
				      fixed bin (35), char (*) aligned)
				      returns (fixed bin),
           memo_util_$from_gmt	entry (fixed bin (71))
				      returns (fixed bin (35)),
           memo_util_$to_gmt		entry (fixed bin (35))
				      returns (fixed bin (71));

/*     EXTERNAL STATIC                                                       */

       dcl error_table_$action_not_performed
				fixed bin (35) external static;

/*     BUILTINS                                                              */

       dcl  string builtin;

%page;
       P_code = 0;
       current_mature_memo_idx = P_idx;
       current_time = 0;
       interval = 0;
       maturity_memo_time = 0;
       maturity_time = 0;       
       future_mature_memo_idx = 0; 
       memo_segment_ptr = P_msp;

       if memo_entry (current_mature_memo_idx).flags.per_process then
	maturity_memo_time = P_memo_time_now;
       else
	maturity_memo_time = memo_entry (current_mature_memo_idx).time;

       if maturity_memo_time <= P_memo_time_now then do;

	maturity_time = memo_util_$to_gmt (maturity_memo_time); 
	current_time = memo_util_$to_gmt (P_memo_time_now);

	call convert_date_to_binary_$analyze
	   (memo_entry (current_mature_memo_idx).repeat, maturity_time,
	   interval, fixed_length_interval, P_code);	/* Repeat interval length (in microseconds) */
	if P_code ^= 0 then;			/* may depend on maturity_time it is computed */
	else if fixed_length_interval then do;		/* relative to.  If it is fixed length,  */
	   interval = interval - maturity_time;		/*   remember fixed interval, and add it */
	   maturity_time = maturity_time + interval;	/*   to maturity_time (perhaps more than once). */
	   end;
	else					/* If not fixed length, then interval */
	   maturity_time = interval;			/*   is first new maturity_time. */

	do while (P_code = 0 & maturity_time <= current_time);
						/* Keep applying repeat interval until */
						/*   a time in future is reached. */
	   if fixed_length_interval then		/* Fixed-length (unchanging) intervals can */
	      maturity_time = maturity_time + interval;	/*   simply be added to prior maturity_time. */
	   else do;				/* Changable intervals (eg, 1 month) must be */
	      call convert_date_to_binary_$relative	/*   recomputed relative to the prior        */
	         (memo_entry (current_mature_memo_idx).repeat, interval,
	         maturity_time, P_code);		/*   maturity_time.  */
	      maturity_time = interval;
	      end;
	   end;
	
	maturity_memo_time = memo_util_$from_gmt (maturity_time);
       
	if P_code = 0 then
	future_mature_memo_idx = memo_set_ (P_msp,
	   memo_entry (current_mature_memo_idx).data,
	   string (memo_entry (current_mature_memo_idx).flags),
	   maturity_memo_time,
	   memo_entry (current_mature_memo_idx).exp_delta,
	   memo_entry (current_mature_memo_idx).repeat);

	memo_entry (current_mature_memo_idx).flags.repeatsw = "0"b;
	end;
       else
	P_code = error_table_$action_not_performed;
       

       return (future_mature_memo_idx);
%page; %include memo_segment;

       end memo_repeat_;
