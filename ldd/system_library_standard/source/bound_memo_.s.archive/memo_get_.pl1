/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(86-07-15,Rauschelbach), approve(86-07-15,MCR7472),
     audit(86-08-05,GJohnson), install(86-08-08,MR12.0-1122):
     Changed the non-existant error_table_$incorrect_version to
     error_table_$unimplemented_version.
                                                   END HISTORY COMMENTS */


memo_get_: proc (P_msp, P_idx, P_memo_info_ptr, P_code);

/* *	This procedure fills in a memo_info structure describing the selected memo in
   *	the memo segment pointed to by P_msp. If the selected (by P_idx) memo is not
   *	in use, P_code is set to error_table_$action_not_performed.
   *
   *	This procedure is not now used by any code in memo. It is also not retained in
   *	bound_memo_, but is preserved here to illustrate the possible interface for
   *	future enhancements.,
   *
   *	June, 1979, W. Olin Sibert
   */

dcl (P_msp pointer,
     P_idx fixed bin,
     P_memo_info_ptr pointer,
     P_code fixed bin (35));

dcl 1 v3_memo_seg aligned like memo_segment_v3 based (memo_segment_ptr);
dcl 1 v1_memo_info aligned like memo_info based (memo_info_ptr);

dcl  idx fixed bin;
dcl  exp_delta fixed bin (35);
dcl  exp_delta_string_ptr pointer;
dcl  exp_delta_string char (32) based (exp_delta_string_ptr);
dcl  system_area_ptr pointer internal static init (null ());
dcl  system_area area based (system_area_ptr);

dcl  get_system_free_area_ entry () returns (ptr);
dcl  ioa_$rsnnl entry options (variable);
dcl  memo_util_$to_gmt entry (fixed bin (35)) returns (fixed bin (71));

dcl (error_table_$action_not_performed,
     error_table_$unimplemented_version) fixed bin (35) external static;

dcl  NULL_STRING char (4) aligned internal static options (constant) init ("");
dcl  LARGE fixed bin (35) internal static options (constant) init (1000000000);

dcl (addr, divide, length, max, null, rtrim, string, unspec) builtin;

/*  */

	memo_segment_ptr = P_msp;
	memo_info_ptr = P_memo_info_ptr;
	idx = P_idx;

	if memo_info.version ^= MEMO_INFO_VERSION_1 then do;
	     P_code = error_table_$unimplemented_version;
	     return;
	     end;

	if memo_segment.version ^= MEMO_SEGMENT_VERSION_3 then do;
INCORRECT_VERSION:
	     P_code = error_table_$unimplemented_version;
	     return;
	     end;

	if idx < 1 | idx > memo_segment.max_number_used then do;
MEMO_NOT_IN_USE:
	     P_code = error_table_$action_not_performed;
	     return;
	     end;

	if v3_memo_seg.memo_entry_v3 (idx).taken = ""b then goto MEMO_NOT_IN_USE;

	if memo_info.version = MEMO_INFO_VERSION_1 then do; /* now, initialize the memo_info, and fill it in */
	     unspec (v1_memo_info) = ""b;		/* start with zeros, of course */

	     if memo_segment.version = MEMO_SEGMENT_VERSION_3 then do;
		v1_memo_info.class_name.ptr = addr (NULL_STRING); /* some null strings for unimplemented features */
		v1_memo_info.repeat_count = LARGE;
		string (v1_memo_info.flags) = string (v3_memo_seg.memo_entry_v3 (idx).flags);

		v1_memo_info.data_string.ptr = addr (v3_memo_seg.memo_entry_v3 (idx).data);
		v1_memo_info.data_string.lth = length (rtrim (v3_memo_seg.memo_entry_v3 (idx).data));

		if v3_memo_seg.memo_entry_v3 (idx).flags.repeatsw then do; /* get repeat time */
		     v1_memo_info.repeat_string.ptr = addr (v3_memo_seg.memo_entry_v3 (idx).repeat);
		     v1_memo_info.repeat_string.lth = length (rtrim (v3_memo_seg.memo_entry_v3 (idx).repeat));
		     end;
		v1_memo_info.repeat_string.ptr = addr (NULL_STRING); /* otherwise, use none */

		if unspec (v3_memo_seg.memo_entry_v3 (idx).pad2) ^= ""b then do; /* old TAC expiration date mechanism */
		     unspec (exp_delta) = unspec (v3_memo_seg.memo_entry_v3 (idx).pad2); /* this kludge supports it, */
		     exp_delta = max (1, divide (exp_delta, 60, 34, 1)); /* causes an ever growing system_free_4_ */
		     if system_area_ptr = null () then	     /* however, since this was never a real feature, it's */
			system_area_ptr = get_system_free_area_ (); /* probably OK to handle it this way. */
		     allocate exp_delta_string in (system_area) set (exp_delta_string_ptr); /* we reduce it to minutes */
		     call ioa_$rsnnl ("^dminute^[s^]", exp_delta_string, (0), /* to make it marginally more palatable */
			exp_delta, (exp_delta ^= 1));
		     v1_memo_info.expiration_string.ptr = exp_delta_string_ptr;
		     v1_memo_info.expiration_string.lth = length (rtrim (exp_delta_string));
		     end;
		else v1_memo_info.expiration_string.ptr = addr (NULL_STRING);

		v1_memo_info.maturity_time = memo_util_$to_gmt (v3_memo_seg.memo_entry_v3 (idx).time);
		end;				/* of V1 memo_info & V3 memo_segment */

	     else goto INCORRECT_VERSION;
	     end; 				/* of V1 memo_info */

	else goto INCORRECT_VERSION;

	return;					/* all done */
%page; %include memo_segment;
%page; %include memo_segment_v3;
%page; %include memo_info;

	end;					/* external procedure memo_get_ */
