/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


memo_util_: proc ();

	return;

/* *	This procedure exists to perform various utility functions for the memo command,
   *	primarily concerned with the maintenance of memo vs. GMT times. The procedures
   *	for converting to/from GMT are DUPLICATED here and in the procedure memo.pl1
   *	itself, for efficiency reasons. */

dcl (P_memo_time fixed bin (35),
     P_clock_value fixed bin (71)) parameter;

dcl  end_of_memo_time fixed bin (35);
dcl  end_of_time fixed bin (71);
dcl  clock_value fixed bin (71);
dcl  memo_time fixed bin (35);

dcl  sys_info$time_correction_constant fixed bin (71) external static;

dcl  convert_date_to_binary_ entry (char (*), fixed bin (71), fixed bin (35));

dcl (multiply, divide) builtin;

/*  */

memo_util_$end_of_time: entry () returns (fixed bin (71));

/* *	This returns a GMT clock value corresponding to the "End of Time". */

/*
   call convert_date_to_binary_ ("12/31/99 2359.9 gmt", end_of_time, (0));
   end_of_memo_time = memo_util_$from_gmt (end_of_time);
   */

/* *	This implementation of end_of_time is somewhat deficient. The old version of memo used
   *	an inline constant for the value, which happened to be 12/30/99 1859.9 est Thursday.
   *	However, this turns out to be someewhat inconvenient to use elsewhere. Since we are
   *	only using it as the date value for invisible memos, however, this inconvenience can
   *	be put up with until we have a better implementation (a flag, rather than a random date
   *	value) for detecting invisibility. Hence, the above code for setting end_of_time is not
   *	presently used, and instead we depend on the silly inline constant, copied directly from
   *	the previous version of the program. */

	end_of_memo_time = 3124051200;		/* KLUDGE! */
	end_of_time = memo_util_$to_gmt (end_of_memo_time);

	return (end_of_time);



memo_util_$end_of_memo_time: entry () returns (fixed bin (35));

/* *	This is just like the above, but returns the end of "memo" time. */

	end_of_memo_time = 3124051200;		/* KLUDGE! (copied from above) */

	return (end_of_memo_time);

/*  */

memo_util_$to_gmt: entry (P_memo_time) returns (fixed bin (71));

	clock_value = 1000000 * P_memo_time + sys_info$time_correction_constant;

	return (clock_value);



memo_util_$from_gmt: entry (P_clock_value) returns (fixed bin (35));

	memo_time = divide ((P_clock_value - sys_info$time_correction_constant), 1000000, 35, 0);

	return (memo_time);

	end;					/* external procedure memo_util_ */
