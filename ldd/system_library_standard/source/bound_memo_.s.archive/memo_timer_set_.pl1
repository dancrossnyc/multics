/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


memo_timer_set_: proc (P_msp, P_alarm_entry);

/* *	This entry sets up a timer for the next memo to go off, which will call P_alarm_entry
   *
   *	June, 1979, W. Olin Sibert
   */

dcl (P_msp pointer,
     P_alarm_entry entry ()) parameter;

dcl  time fixed bin (35);
dcl  idx fixed bin;

dcl  large fixed bin (35) internal static init (0);

dcl  memo_util_$to_gmt entry (fixed bin (35)) returns (fixed bin (71));
dcl  timer_manager_$alarm_call entry (fixed bin (71), bit (2) aligned, entry);

dcl  ABSOLUTE_MICROSECONDS bit (2) aligned internal static options (constant) init ("00"b);

dcl (max, min, unspec) builtin;

/*  */

	memo_segment_ptr = P_msp;

	if large = 0 then				/* initialize static variable, cause pl1 has no facility for */
	     unspec (large) = "377777777777"b3; 	/* doing this sort of useful thing */

	time = large;				/* look for earliest time */

	do idx = 1 to memo_segment.max_number_used;	/* go through all entries that may be memos */
	     if memo_entry (idx).taken ^= "0"b then	/* if not taken then entry is free, and ignore it */
		if memo_entry (idx).flags.alarm then	/* it must be an alarm entry */
		     time = min (time, memo_entry (idx).time); /* check for earliest time */
	     end; 				/* of loop through memos */

	if time < large then			/* we found one.... */
	     call timer_manager_$alarm_call (memo_util_$to_gmt (time), ABSOLUTE_MICROSECONDS, P_alarm_entry);

	return;
%page; %include memo_segment;

	end;					/* external procedure memo_timer_set_ */
