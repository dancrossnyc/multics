/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   *********************************************************** */
/*
   This program stores and fetches trace parameters and global parameters.

   Written: May 1984 by Jeffrey D. Ives.
*/
/* format: style2,ifthendo,^indnoniterdo,thendo,^inditerdo,indproc,ind2,dclind5,idind32 */


trace_parameters_:
  procedure ();
    signal error;


/* INITIALIZE */

initialize:
  entry ();


    trace_catch_$global_parameters = INITIAL_GLOBAL_PARAMETERS;
    trace_catch_$global_parameters.osw = trace_$cv_stream_name_to_osw (INITIAL_GLOBAL_PARAMETERS.osw.stream_name);
    trace_catch_$global_parameters.spp =
         trace_$cv_entry_name_to_spp (INITIAL_GLOBAL_PARAMETERS.spp.entry_name, codeptr (trace_parameters_));
    trace_catch_$global_parameters.trace_routine = trace_print_$trace;
    trace_catch_$global_parameters.stop_routine = trace_print_$stop;

    trace_$global_parameters.version = "";

    allocate parameters in (trace_storage);
    parameters = INITIAL_PARAMETERS;
    call ASSIGN_PTR (trace_catch_$parameters_ptr, parameters_ptr);
    call ASSIGN_PTR (trace_$parameters_ptr, parameters_ptr);

    trace_catch_$global_parameters.calibrate = "1"b;

    call trace_calibrate_ ("recurse", trace_catch_$global_parameters.comps (COMPENSATION_FROM_ENTRY_TO_ENTRY),
         trace_catch_$global_parameters.comps (COMPENSATION_FROM_RETURN_TO_RETURN));

    call trace_calibrate_ ("repeat", trace_catch_$global_parameters.comps (COMPENSATION_FROM_ENTRY_TO_RETURN),
         trace_catch_$global_parameters.comps (COMPENSATION_FROM_RETURN_TO_ENTRY));

    trace_catch_$global_parameters.calibrate = "0"b;


    return;
%page;
/* TRANSACTIONS */

transaction_begin:
  entry (transaction_id_i);
    if trace_catch_$global_parameters.version ^= GLOBAL_PARAMETERS_VERSION_3
    then signal error;
    if trace_$global_parameters.version ^= ""
    then signal error;
    if trace_catch_$parameters_ptr -> parameters.version ^= PARAMETERS_VERSION_3
    then signal error;
    if trace_$parameters_ptr ^= trace_catch_$parameters_ptr
    then signal error;
    return;


transaction_begin_force:
transaction_end:
  entry (transaction_id_i);
    trace_$global_parameters.version = "";		/* This will show that they are not modified yet.	*/
    call ASSIGN_PTR (trace_$parameters_ptr, trace_catch_$parameters_ptr);
    return;


/* UPDATES */

update_default_parms:
  entry () returns (bit aligned);
    if OBJECTS_ARE_EQUAL (trace_catch_$parameters_ptr, trace_$parameters_ptr)
    then return ("0"b);
    call ASSIGN_PTR (trace_catch_$parameters_ptr, trace_$parameters_ptr);
    return ("1"b);


update_global_parms:
  entry () returns (bit aligned);
    if trace_$global_parameters.version = ""
    then return ("0"b);
    if trace_$global_parameters.version ^= GLOBAL_PARAMETERS_VERSION_3
    then signal error;
    if unspec (trace_$global_parameters) = unspec (trace_catch_$global_parameters)
    then return ("0"b);
    if trace_$global_parameters.osw.iocb_ptr ^= trace_catch_$global_parameters.osw.iocb_ptr
    then call trace_print_$copy_osw (trace_$global_parameters.osw, trace_catch_$global_parameters.osw);
    if trace_$global_parameters.buffer_ptr ^= trace_catch_$global_parameters.buffer_ptr
    then call trace_print_$copy_buffer_ptr (trace_$global_parameters.buffer_ptr,
	    trace_catch_$global_parameters.buffer_ptr);
    trace_catch_$global_parameters = trace_$global_parameters;
    return ("1"b);


free_parameters:
  entry (parms_ptr_io);
    call FREE_OBJECT (parms_ptr_io);
    return;


parms_specified:
  entry () returns (bit aligned);
    if OBJECTS_ARE_EQUAL (trace_catch_$parameters_ptr, trace_$parameters_ptr)
    then return ("0"b);
    else return ("1"b);


update_parameters:
  entry (parms_ptr_io) returns (bit aligned);
    if parms_ptr_io = trace_$parameters_ptr		/* Optimization. */
    then return ("0"b);
    if OBJECTS_ARE_EQUAL (parms_ptr_io, trace_$parameters_ptr)
    then return ("0"b);
    call ASSIGN_PTR (parms_ptr_io, trace_$parameters_ptr);
    return ("1"b);
%page;
/* TRACE PARAMETERS */


arguments:
  entry (tt_idx_i) returns (bit (2) aligned);
    tt_idx = tt_idx_i;
    if tt_idx < 0
    then parameters_ptr = trace_catch_$parameters_ptr;
    else parameters_ptr = trace_tables_$parameters_ptr (tt_idx);
    return (parameters.arguments);


set_arguments:
  entry (inout_i);
    parameters_ptr = MODIFIED_PARAMETERS_PTR ();
    parameters.arguments = inout_i;
    return;


call:
  entry (tt_idx_i) returns (char (256) var);
    tt_idx = tt_idx_i;
    if tt_idx < 0
    then parameters_ptr = trace_catch_$parameters_ptr;
    else parameters_ptr = trace_tables_$parameters_ptr (tt_idx);
    allocated_string_ptr = parameters.call_ptr;
    if allocated_string_ptr = null ()
    then return ("");
    else return (allocated_string.value);


set_call:
  entry (char256var_i);
    parameters_ptr = MODIFIED_PARAMETERS_PTR ();
    allocated_string_value_length = length (char256var_i);
    if allocated_string_value_length > 256
    then signal error;
    allocate allocated_string in (trace_storage);
    allocated_string.version = ALLOCATED_STRING_VERSION_3;
    allocated_string.reference_count = 0;
    allocated_string.value = char256var_i;
    call ASSIGN_PTR (parameters.call_ptr, allocated_string_ptr);
    return;


every:
  entry (tt_idx_i) returns (fixed bin (34));
    tt_idx = tt_idx_i;
    if tt_idx < 0
    then parameters_ptr = trace_catch_$parameters_ptr;
    else parameters_ptr = trace_tables_$parameters_ptr (tt_idx);
    return (parameters.every);


set_every:
  entry (number_i);
    parameters_ptr = MODIFIED_PARAMETERS_PTR ();
    parameters.every = number_i;
    return;


first:
  entry (tt_idx_i) returns (fixed bin (34));
    tt_idx = tt_idx_i;
    if tt_idx < 0
    then parameters_ptr = trace_catch_$parameters_ptr;
    else parameters_ptr = trace_tables_$parameters_ptr (tt_idx);
    return (parameters.first);


set_first:
  entry (number_i);
    parameters_ptr = MODIFIED_PARAMETERS_PTR ();
    parameters.first = number_i;
    return;


high:
  entry (tt_idx_i) returns (fixed bin (34));
    tt_idx = tt_idx_i;
    if tt_idx < 0
    then parameters_ptr = trace_catch_$parameters_ptr;
    else parameters_ptr = trace_tables_$parameters_ptr (tt_idx);
    return (parameters.high);


set_high:
  entry (number_i);
    parameters_ptr = MODIFIED_PARAMETERS_PTR ();
    parameters.high = number_i;
    return;


last:
  entry (tt_idx_i) returns (fixed bin (34));
    tt_idx = tt_idx_i;
    if tt_idx < 0
    then parameters_ptr = trace_catch_$parameters_ptr;
    else parameters_ptr = trace_tables_$parameters_ptr (tt_idx);
    return (parameters.last);


set_last:
  entry (number_i);
    parameters_ptr = MODIFIED_PARAMETERS_PTR ();
    parameters.last = number_i;
    return;


low:
  entry (tt_idx_i) returns (fixed bin (34));
    tt_idx = tt_idx_i;
    if tt_idx < 0
    then parameters_ptr = trace_catch_$parameters_ptr;
    else parameters_ptr = trace_tables_$parameters_ptr (tt_idx);
    return (parameters.low);


set_low:
  entry (number_i);
    parameters_ptr = MODIFIED_PARAMETERS_PTR ();
    parameters.low = number_i;
    return;


new_high:
  entry (tt_idx_i) returns (bit aligned);
    tt_idx = tt_idx_i;
    if tt_idx < 0
    then parameters_ptr = trace_catch_$parameters_ptr;
    else parameters_ptr = trace_tables_$parameters_ptr (tt_idx);
    return (parameters.new_high);


set_new_high:
  entry (onoff_i);
    parameters_ptr = MODIFIED_PARAMETERS_PTR ();
    parameters.new_high = onoff_i;
    return;


parms_string:
  entry (tt_idx_i, just_differences_i) returns (char (256) var);
    tt_idx = tt_idx_i;
    if tt_idx < 0
    then parameters_ptr = trace_catch_$parameters_ptr;
    else parameters_ptr = trace_tables_$parameters_ptr (tt_idx);
    return (MAKE_PARAMETERS_STRING (parameters_ptr, trace_catch_$parameters_ptr, just_differences_i));


stop:
  entry (tt_idx_i) returns (bit (2) aligned);
    tt_idx = tt_idx_i;
    if tt_idx < 0
    then parameters_ptr = trace_catch_$parameters_ptr;
    else parameters_ptr = trace_tables_$parameters_ptr (tt_idx);
    return (parameters.stop);


set_stop:
  entry (inout_i);
    parameters_ptr = MODIFIED_PARAMETERS_PTR ();
    parameters.stop = inout_i;
    return;


stop_every:
  entry (tt_idx_i) returns (fixed bin (34));
    tt_idx = tt_idx_i;
    if tt_idx < 0
    then parameters_ptr = trace_catch_$parameters_ptr;
    else parameters_ptr = trace_tables_$parameters_ptr (tt_idx);
    return (parameters.stop_every);


set_stop_every:
  entry (number_i);
    parameters_ptr = MODIFIED_PARAMETERS_PTR ();
    parameters.stop_every = number_i;
    return;


stop_low:
  entry (tt_idx_i) returns (fixed bin (34));
    tt_idx = tt_idx_i;
    if tt_idx < 0
    then parameters_ptr = trace_catch_$parameters_ptr;
    else parameters_ptr = trace_tables_$parameters_ptr (tt_idx);
    return (parameters.stop_low);


set_stop_low:
  entry (number_i);
    parameters_ptr = MODIFIED_PARAMETERS_PTR ();
    parameters.stop_low = number_i;
    return;


trace:
  entry (tt_idx_i) returns (bit (2) aligned);
    tt_idx = tt_idx_i;
    if tt_idx < 0
    then parameters_ptr = trace_catch_$parameters_ptr;
    else parameters_ptr = trace_tables_$parameters_ptr (tt_idx);
    return (parameters.trace);


set_trace:
  entry (inout_i);
    parameters_ptr = MODIFIED_PARAMETERS_PTR ();
    parameters.trace = inout_i;
    return;
%page;
/* GLOBAL PARAMETERS */

alm:
  entry () returns (bit aligned);
    return (trace_catch_$global_parameters.alm);


set_alm:
  entry (onoff_i);
    if trace_$global_parameters.version = ""
    then trace_$global_parameters = trace_catch_$global_parameters;
    trace_$global_parameters.alm = onoff_i;
    return;


automatic:
  entry () returns (bit aligned);
    return (trace_catch_$global_parameters.automatic);


set_automatic:
  entry (onoff_i);
    if trace_$global_parameters.version = ""
    then trace_$global_parameters = trace_catch_$global_parameters;
    trace_$global_parameters.automatic = onoff_i;
    return;


buffer:
  entry () returns (bit aligned);
    return (trace_catch_$global_parameters.buffer_ptr ^= null ());


buffer_ptr:
  entry () returns (ptr unal);
    return (trace_catch_$global_parameters.buffer_ptr);


set_buffer:
  entry (onoff_i);
    if trace_$global_parameters.version = ""
    then trace_$global_parameters = trace_catch_$global_parameters;
    if onoff_i = "1"b
    then call trace_print_$allocate_buffer (trace_$global_parameters.buffer_ptr);
    else trace_$global_parameters.buffer_ptr = null ();
    return;


calibrate:
  entry () returns (bit aligned);
    return (trace_catch_$global_parameters.calibrate);


set_calibrate:
  entry (onoff_i);
    if trace_$global_parameters.version = ""
    then trace_$global_parameters = trace_catch_$global_parameters;
    trace_$global_parameters.calibrate = onoff_i;
    return;


compensation:
  entry (compensation_idx_i) returns (1 aligned like compensation);
    compensation_idx = compensation_idx_i;
    if compensation_idx < lbound (trace_catch_$global_parameters.comps, 1)
         | compensation_idx > hbound (trace_catch_$global_parameters.comps, 1)
    then signal error;
    return (trace_catch_$global_parameters.comps (compensation_idx));


set_compensation:
  entry (compensation_idx_i, compensation_i);
    compensation_idx = compensation_idx_i;
    if trace_$global_parameters.version = ""
    then trace_$global_parameters = trace_catch_$global_parameters;
    if compensation_idx < lbound (trace_$global_parameters.comps, 1)
         | compensation_idx > hbound (trace_$global_parameters.comps, 1)
    then signal error;
    trace_$global_parameters.comps (compensation_idx) = compensation_i;
    return;


enabled:
  entry () returns (bit aligned);
    return (trace_catch_$global_parameters.enabled);


set_enabled:
  entry (onoff_i);
    if trace_$global_parameters.version = ""
    then trace_$global_parameters = trace_catch_$global_parameters;
    trace_$global_parameters.enabled = onoff_i;
    return;


global_parms_changed:
  entry () returns (bit aligned);
    if trace_$global_parameters.version = GLOBAL_PARAMETERS_VERSION_3
    then return ("1"b);
    else return ("0"b);


global_parms_string:
  entry () returns (char (256) var);
    return (MAKE_GLOBAL_PARAMETERS_STRING (trace_catch_$global_parameters));


long:
  entry () returns (bit aligned);
    return (trace_catch_$global_parameters.long);


set_long:
  entry (onoff_i);
    if trace_$global_parameters.version = ""
    then trace_$global_parameters = trace_catch_$global_parameters;
    trace_$global_parameters.long = onoff_i;
    return;


loud:
  entry () returns (bit aligned);
    return (trace_catch_$global_parameters.loud);


set_loud:
  entry (onoff_i);
    if trace_$global_parameters.version = ""
    then trace_$global_parameters = trace_catch_$global_parameters;
    trace_$global_parameters.loud = onoff_i;
    return;


meter:
  entry () returns (bit aligned);
    return (trace_catch_$global_parameters.meter);


set_meter:
  entry (onoff_i);
    if trace_$global_parameters.version = ""
    then trace_$global_parameters = trace_catch_$global_parameters;
    trace_$global_parameters.meter = onoff_i;
    return;


output_switch:
  entry () returns (1 like output_switch);
    return (trace_catch_$global_parameters.osw);


set_output_switch:
  entry (output_switch_i);
    if trace_$global_parameters.version = ""
    then trace_$global_parameters = trace_catch_$global_parameters;
    trace_$global_parameters.osw = output_switch_i;
    if trace_$global_parameters.osw.iocb_ptr = null ()
    then trace_$global_parameters.osw = trace_$cv_stream_name_to_osw (INITIAL_GLOBAL_PARAMETERS.osw.stream_name);
    return;


signals:
  entry () returns (bit aligned);
    return (trace_catch_$global_parameters.signals);


set_signals:
  entry (onoff_i);
    if trace_$global_parameters.version = ""
    then trace_$global_parameters = trace_catch_$global_parameters;
    trace_$global_parameters.signals = onoff_i;
    return;


stop_proc:
  entry () returns (1 like stop_proc aligned);
    return (trace_catch_$global_parameters.spp);


set_stop_proc:
  entry (stop_proc_i);
    if trace_$global_parameters.version = ""
    then trace_$global_parameters = trace_catch_$global_parameters;
    trace_$global_parameters.spp = stop_proc_i;
    if codeptr (trace_$global_parameters.spp.entry_value) = null ()
    then trace_$global_parameters.spp =
	    trace_$cv_entry_name_to_spp (INITIAL_GLOBAL_PARAMETERS.spp.entry_name, codeptr (trace_parameters_));
    return;


trace_routine:
  entry () returns (entry);
    return (trace_catch_$global_parameters.trace_routine);


set_trace_routine:
  entry (entrypoint_i);
    if trace_$global_parameters.version = ""
    then trace_$global_parameters = trace_catch_$global_parameters;
    trace_$global_parameters.trace_routine = entrypoint_i;
    return;


stop_routine:
  entry () returns (entry);
    return (trace_catch_$global_parameters.stop_routine);


set_stop_routine:
  entry (entrypoint_i);
    if trace_$global_parameters.version = ""
    then trace_$global_parameters = trace_catch_$global_parameters;
    trace_$global_parameters.stop_routine = entrypoint_i;
    return;
%page;
/* SUBROUTINES */


ASSIGN_PTR:
  proc (destination_ptr_io, source_ptr_i);
    dcl  (destination_ptr_io, source_ptr_i)
				 ptr unal parm;
    dcl  goner_ptr			 ptr unal;

    if destination_ptr_io = source_ptr_i
    then return;
    goner_ptr = destination_ptr_io;
    if source_ptr_i ^= null ()
    then source_ptr_i -> allocated_string.reference_count = source_ptr_i -> allocated_string.reference_count + 1;
    destination_ptr_io = source_ptr_i;
    call FREE_OBJECT (goner_ptr);
  end ASSIGN_PTR;


MODIFIED_PARAMETERS_PTR:
  proc () returns (ptr unal);
    dcl  p			 ptr unal;
    if trace_$parameters_ptr = trace_catch_$parameters_ptr
    then do;
      allocate parameters in (trace_storage) set (p);
      p -> parameters = trace_catch_$parameters_ptr -> parameters;
      p -> parameters.reference_count = 0;
      p -> parameters.call_ptr = null ();
      call ASSIGN_PTR (p -> parameters.call_ptr, trace_catch_$parameters_ptr -> parameters.call_ptr);
      call ASSIGN_PTR (trace_$parameters_ptr, p);
    end;
    return (trace_$parameters_ptr);
  end MODIFIED_PARAMETERS_PTR;


FREE_OBJECT:
  proc (object_ptr_io);
    dcl  object_ptr_io		 ptr unal parm;
    dcl  object_ptr			 ptr unal;

    object_ptr = object_ptr_io;
    if object_ptr = null ()
    then return;
    object_ptr_io = null ();
    object_ptr -> allocated_string.reference_count = object_ptr -> allocated_string.reference_count - 1;
    if object_ptr -> allocated_string.reference_count > 0
    then return;
    if object_ptr -> allocated_string.reference_count < 0
    then signal error;
    if object_ptr -> allocated_string.version = ALLOCATED_STRING_VERSION_3
    then ;
    else if object_ptr -> allocated_string.version = PARAMETERS_VERSION_3
    then call FREE_OBJECT (object_ptr -> parameters.call_ptr);
    else signal error;
    free object_ptr -> allocated_string;
    return;
  end FREE_OBJECT;


OBJECTS_ARE_EQUAL:
  proc (A_ptr_io, B_ptr_io) returns (bit aligned);
    dcl  (A_ptr_io, B_ptr_io)		 ptr unal parm;

    if A_ptr_io = B_ptr_io
    then return ("1"b);
    if A_ptr_io = null () | B_ptr_io = null ()
    then return ("0"b);
    if A_ptr_io -> allocated_string.version ^= B_ptr_io -> allocated_string.version
    then signal error;
    if A_ptr_io -> allocated_string.version = ALLOCATED_STRING_VERSION_3
    then do;
      if A_ptr_io -> allocated_string.value_length ^= B_ptr_io -> allocated_string.value_length
      then return ("0"b);
      if A_ptr_io -> allocated_string.value ^= B_ptr_io -> allocated_string.value
      then return ("0"b);
    end;
    else if A_ptr_io -> allocated_string.version = PARAMETERS_VERSION_3
    then do;
      if ^OBJECTS_ARE_EQUAL (A_ptr_io -> parameters.call_ptr, B_ptr_io -> parameters.call_ptr)
      then return ("0"b);
      if unspec (A_ptr_io -> parameters) ^= unspec (B_ptr_io -> parameters)
      then return ("0"b);
    end;
    else signal error;				/* Combine them. */
    if A_ptr_io -> allocated_string.reference_count <= B_ptr_io -> allocated_string.reference_count
    then call ASSIGN_PTR (A_ptr_io, B_ptr_io);
    else call ASSIGN_PTR (B_ptr_io, A_ptr_io);
    return ("1"b);
  end OBJECTS_ARE_EQUAL;
%page;
MAKE_PARAMETERS_STRING:
  proc (A_parms_ptr_i, B_parms_ptr_i, just_differences_i) returns (char (256) var);
    if A_parms_ptr_i = null ()
    then return ("no parms");
    if A_parms_i.version ^= PARAMETERS_VERSION_3 | B_parms_i.version ^= PARAMETERS_VERSION_3
    then signal error;
    just_differences = just_differences_i;
    many_parm_string = "";

    call APPEND_INOUT_PARAMETER (A_parms_i.trace, B_parms_i.trace, "trace");
    call APPEND_N_PARAMETER (A_parms_i.every, B_parms_i.every, "every");
    call APPEND_N_PARAMETER (A_parms_i.first, B_parms_i.first, "first");
    call APPEND_N_PARAMETER (A_parms_i.last, B_parms_i.last, "last");
    call APPEND_N_PARAMETER (A_parms_i.low, B_parms_i.low, "low");
    call APPEND_N_PARAMETER (A_parms_i.high, B_parms_i.high, "high");
    call APPEND_ONOFF_PARAMETER (A_parms_i.new_high, B_parms_i.new_high, "new_high");

    call APPEND_INOUT_PARAMETER (A_parms_i.stop, B_parms_i.stop, "stop");
    call APPEND_N_PARAMETER (A_parms_i.stop_every, B_parms_i.stop_every, "stop_every");
    call APPEND_N_PARAMETER (A_parms_i.stop_low, B_parms_i.stop_low, "stop_low");

    call APPEND_INOUT_PARAMETER (A_parms_i.arguments, B_parms_i.arguments, "arguments");
    if A_parms_i.call_ptr = null ()
    then A_as_ptr = addr (NULL_ALLOCATED_STRING);
    else A_as_ptr = A_parms_i.call_ptr;
    if B_parms_i.call_ptr = null ()
    then B_as_ptr = addr (NULL_ALLOCATED_STRING);
    else B_as_ptr = B_parms_i.call_ptr;
    call APPEND_CHAR_PARAMETER ((A_as_ptr -> allocated_string.value), (B_as_ptr -> allocated_string.value), "call");

    return (many_parm_string);


MAKE_GLOBAL_PARAMETERS_STRING:
  entry (global_parms_i) returns (char (256) var);
    if global_parms_i.version ^= GLOBAL_PARAMETERS_VERSION_3
    then signal error;
    many_parm_string = "";
    just_differences = "0"b;
    call APPEND_ONOFF_PARAMETER (global_parms_i.alm, "0"b, "alm");
    call APPEND_ONOFF_PARAMETER (global_parms_i.automatic, "0"b, "automatic");
    call APPEND_ONOFF_PARAMETER (global_parms_i.buffer_ptr ^= null (), "0"b, "buffer");
    call APPEND_ONOFF_PARAMETER (global_parms_i.meter, "0"b, "meter");
    call APPEND_ONOFF_PARAMETER (global_parms_i.signals, "0"b, "signals");
    call APPEND_ONOFF_ALT_PARAMETER (global_parms_i.enabled, "0"b, "disable", "enable");
    call APPEND_ONOFF_ALT_PARAMETER (global_parms_i.long, "0"b, "brief", "long");
    call APPEND_ONOFF_ALT_PARAMETER (global_parms_i.loud, "0"b, "quiet", "loud");
    if global_parms_i.osw.file_path = ""
    then call APPEND_CHAR_PARAMETER ((global_parms_i.osw.stream_name), "", "output_switch");
    else call APPEND_CHAR_PARAMETER (global_parms_i.osw.file_path, "", "output_file");
    call APPEND_CHAR_PARAMETER (global_parms_i.spp.entry_name, "", "stop_proc");

    return (many_parm_string);

/* declarations */
    dcl  A_parms_ptr_i		 ptr unal parm;
    dcl  1 A_parms_i		 like parameters aligned based (A_parms_ptr_i);
    dcl  B_parms_ptr_i		 ptr unal parm;
    dcl  1 B_parms_i		 like parameters aligned based (B_parms_ptr_i);
    dcl  1 global_parms_i		 like trace_catch_$global_parameters aligned parm;
    dcl  just_differences_i		 bit aligned parm;
    dcl  A_as_ptr			 ptr;
    dcl  B_as_ptr			 ptr;
    dcl  just_differences		 bit aligned;
    dcl  many_parm_string		 char (256) var;

APPEND_N_PARAMETER:
    proc (A_n_i, B_n_i, control_arg_name_i);
      dcl	 A_n_i			   fixed bin (34) parm;
      dcl	 B_n_i			   fixed bin (34) parm;
      if just_differences & A_n_i = B_n_i
      then return;
      if A_n_i = 0
      then one_parm_string = "-no_" || control_arg_name_i;
      else call ioa_$rsnnl ("-^a ^d", one_parm_string, one_parm_length, control_arg_name_i, A_n_i);
      go to APPEND_STRING;

APPEND_ONOFF_PARAMETER:
    entry (A_onoff_i, B_onoff_i, control_arg_name_i);
      dcl	 A_onoff_i		   bit aligned parm;
      dcl	 B_onoff_i		   bit aligned parm;
      if just_differences & A_onoff_i = B_onoff_i
      then return;
      if A_onoff_i = "0"b
      then one_parm_string = "-" || control_arg_name_i || " off";
      else one_parm_string = "-" || control_arg_name_i || " on";
      go to APPEND_STRING;

APPEND_ONOFF_ALT_PARAMETER:
    entry (A_onoff_i, B_onoff_i, control_arg_name_i, alt_control_arg_name_i);
      if just_differences & A_onoff_i = B_onoff_i
      then return;
      if A_onoff_i = "0"b
      then one_parm_string = "-" || control_arg_name_i;
      else one_parm_string = "-" || alt_control_arg_name_i;
      go to APPEND_STRING;

APPEND_INOUT_PARAMETER:
    entry (A_inout_i, B_inout_i, control_arg_name_i);
      dcl	 A_inout_i		   bit (2) aligned parm;
      dcl	 B_inout_i		   bit (2) aligned parm;
      if just_differences & A_inout_i = B_inout_i
      then return;
      call ioa_$rsnnl ("-^a ^a", one_parm_string, one_parm_length, control_arg_name_i,
	 trace_$cv_bits_to_inout (A_inout_i));
      go to APPEND_STRING;

APPEND_CHAR_PARAMETER:
    entry (A_char256var_i, B_char256var_i, control_arg_name_i);
      dcl	 A_char256var_i		   char (256) var parm;
      dcl	 B_char256var_i		   char (256) var parm;
      if just_differences & A_char256var_i = B_char256var_i
      then return;
      if length (A_char256var_i) = 0
      then one_parm_string = "-no_" || control_arg_name_i;
      else if search (A_char256var_i, " ") = 0
      then call ioa_$rsnnl ("-^a ^a", one_parm_string, one_parm_length, control_arg_name_i, A_char256var_i);
      else call ioa_$rsnnl ("-^a ""^a""", one_parm_string, one_parm_length, control_arg_name_i, A_char256var_i);
      go to APPEND_STRING;

APPEND_STRING:
      if length (many_parm_string) > 0
      then
(nostrz):
        many_parm_string = many_parm_string || " ";
(nostrz):
      many_parm_string = many_parm_string || one_parm_string;
      return;

      dcl	 control_arg_name_i		   char (16) var parm;
      dcl	 alt_control_arg_name_i	   char (16) var parm;
      dcl	 one_parm_length		   fixed bin (21);
      dcl	 one_parm_string		   char (256) var;
    end APPEND_N_PARAMETER;
  end MAKE_PARAMETERS_STRING;
%page;
/* START OF DECLARATIONS */
/* format: ^insnl,^delnl */

/* Parameters */

    dcl  char256var_i		 char (256) var parm;
    dcl  compensation_idx_i		 fixed bin parm;
    dcl  entrypoint_i		 entry parm;
    dcl  inout_i			 bit (2) aligned parm;
    dcl  just_differences_i		 bit aligned parm;
    dcl  number_i			 fixed bin (34) parm;
    dcl  onoff_i			 bit aligned parm;
    dcl  parms_ptr_io		 ptr unal parm;
    dcl  transaction_id_i		 fixed bin (71) parm;
    dcl  tt_idx_i			 fixed bin parm;
    dcl  1 compensation_i		 aligned like compensation;
    dcl  1 output_switch_i		 like output_switch aligned parm;
    dcl  1 stop_proc_i		 like stop_proc aligned parm;


/* Automatic */

    dcl  compensation_idx		 fixed bin;
    dcl  tt_idx			 fixed bin;


/* Static */

    dcl  ZERO			 fixed bin (35) static options (constant) init (0);

    dcl  1 NULL_ALLOCATED_STRING	 aligned static options (constant),
	 2 version		 char (8) init ("TraceAS3"),
	 2 reference_count		 fixed bin init (0),
	 2 value_length		 fixed bin init (0),
	 2 value			 char (0) unal;

    dcl  1 INITIAL_GLOBAL_PARAMETERS	 aligned static options (constant),
	 2 version		 char (8) init ("TraceGP3"),
	 2 alm			 bit init ("0"b),	/* off */
	 2 automatic		 bit init ("0"b),	/* off */
	 2 meter			 bit init ("0"b),	/* off */
	 2 signals		 bit init ("0"b),	/* off */
	 2 enabled		 bit init ("1"b),	/* on  */
	 2 long			 bit init ("0"b),	/* off */
	 2 osw,
	   3 iocb_ptr		 ptr,
	   3 stream_name		 char (32) var init ("user_output"),
	   3 file_path		 char (256) var init (""),
	 2 spp,
	   3 entry_value		 entry (),
	   3 entry_name		 char (256) var init ("cu_$cl"),
	 2 trace_routine		 entry,
	 2 stop_routine		 entry,
	 2 loud			 bit init ("1"b),	/* on  */
	 2 calibrate		 bit init ("0"b),	/* off */
	 2 buffer_ptr		 ptr unal init (null ()),
	 2 not_used		 fixed bin init (0),
	 2 comps			 (4),
	   3 real_time		 fixed bin (53) init (0, 0, 0, 0),
	   3 vcpu_time		 fixed bin (53) init (0, 0, 0, 0);

    dcl  1 INITIAL_PARAMETERS		 aligned static options (constant),
	 2 version		 char (8) init ("TraceTP3"),
	 2 reference_count		 fixed bin init (0),
	 2 every			 fixed bin (34) init (0),
	 2 first			 fixed bin (34) init (0),
	 2 last			 fixed bin (34) init (0),
	 2 low			 fixed bin (34) init (0),
	 2 high			 fixed bin (34) init (0),
	 2 new_high		 bit init ("0"b),
	 2 arguments		 bit (2) init ("00"b),
	 2 not_used1		 bit init ("0"b),
	 2 stop_every		 fixed bin (34) init (0),
	 2 stop_low		 fixed bin (34) init (0),
	 2 stop			 bit (2) init ("00"b),
	 2 trace			 bit (2) init ("11"b),
	 2 call_ptr		 ptr unal init (null ());


/* Conditions */

    dcl  error			 condition;


/* Based */

    dcl  trace_storage		 area based (trace_catch_$trace_storage_ptr);


    dcl  PARAMETERS_VERSION_3		 char (8) aligned static options (constant) init ("TraceTP3");
    dcl  parameters_ptr		 ptr unal;
    dcl  1 parameters		 aligned based (parameters_ptr),
	 2 version		 char (8),
	 2 reference_count		 fixed bin,
	 2 every			 fixed bin (34),
	 2 first			 fixed bin (34),
	 2 last			 fixed bin (34),
	 2 low			 fixed bin (34),
	 2 high			 fixed bin (34),
	 2 new_high		 bit,
	 2 arguments		 bit (2),
	 2 not_used1		 bit,
	 2 stop_every		 fixed bin (34),
	 2 stop_low		 fixed bin (34),
	 2 stop			 bit (2),
	 2 trace			 bit (2),
	 2 call_ptr		 ptr unal;


    dcl  ALLOCATED_STRING_VERSION_3	 char (8) aligned static options (constant) init ("TraceAS3");
    dcl  allocated_string_value_length	 fixed bin;
    dcl  allocated_string_ptr		 ptr unal;
    dcl  1 allocated_string		 aligned based (allocated_string_ptr),
	 2 version		 char (8),
	 2 reference_count		 fixed bin,
	 2 value_length		 fixed bin,
	 2 value			 char (allocated_string_value_length refer (allocated_string.value_length)) unal;


/* External Variables */

    dcl  trace_$parameters_ptr	 ptr unal ext;
    dcl  1 trace_$global_parameters	 like trace_catch_$global_parameters aligned ext;

    dcl  trace_catch_$trace_storage_ptr	 ptr ext;
    dcl  trace_catch_$parameters_ptr	 ptr unal ext;


    dcl  GLOBAL_PARAMETERS_VERSION_3	 char (8) aligned static options (constant) init ("TraceGP3");
    dcl  1 trace_catch_$global_parameters aligned ext,
	 2 version		 char (8),
	 2 alm			 bit,
	 2 automatic		 bit,
	 2 meter			 bit,
	 2 signals		 bit,
	 2 enabled		 bit,
	 2 long			 bit,
	 2 osw			 like output_switch,
	 2 spp			 like stop_proc,
	 2 trace_routine		 entry,
	 2 stop_routine		 entry,
	 2 loud			 bit,
	 2 calibrate		 bit,
	 2 buffer_ptr		 ptr unal,
	 2 not_used		 fixed bin,
	 2 comps			 (4) like compensation;


/* External Entries */

    dcl  ioa_$rsnnl			 entry options (variable);
    dcl  trace_calibrate_		 entry (char (8) aligned, 1 like compensation aligned, 1 like compensation aligned);
    dcl  trace_print_$copy_osw	 entry (1 like output_switch aligned, 1 like output_switch aligned);
    dcl  trace_tables_$parameters_ptr	 entry (fixed bin) returns (ptr);
    dcl  trace_print_$allocate_buffer	 entry (ptr unal);
    dcl  trace_print_$copy_buffer_ptr	 entry (ptr unal, ptr unal);
    dcl  trace_print_$stop		 entry (fixed bin, fixed bin (53));
    dcl  trace_print_$trace		 entry (fixed bin, fixed bin (53));


/* format: insnl,delnl */
/* END OF DECLARATIONS */
%page;
/* START OF INCLUDE FILES */


%include trace_interface;

  end trace_parameters_;
