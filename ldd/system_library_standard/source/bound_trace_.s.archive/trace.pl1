/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1984 *
   *                                                         *
   *********************************************************** */
/*

   This is the command interface to the trace facility.

   Initial Version: 25 February 1970 by BLW
   Modified many times.
   Completely rewritten: May 1984 by Jeffrey D. Ives.
*/
/* format: style2,ifthendo,^indnoniterdo,thendo,^inditerdo,indproc,ind2,dclind5,idind32 */
%page;
trace:
  procedure options (variable);

/* DISABLE TRACE_CATCH_ */

    transaction_id = clock ();
    on cleanup status = trace_$transaction_end (transaction_id);
						/* Disregard nonstandard use of status.	*/
    if ^trace_$transaction_begin (transaction_id) /* Temporarily disables trace_catch_.			*/
    then do;
      call com_err_ (code, ME, "There seems to be an incomplete invocation of trace,
watch, or trace_meters still on the stack.  Try the release command.");
      return;
    end;

/* SET UP A SUB_ERROR_ CONDITION HANDLER */

    call condition_ ("sub_error_", SUB_ERROR_HANDLER);

/* SET DEFAULT ACTIONS */

    set_defaults = "0"b;
    add_remove_action = "";
    on_off_action = "";
    parameters = "0"b;
    print_buffer = 0;
    status = "0"b;

/* READ THE ARGUMENTS */

    call cu_$arg_count (arg_count, code);
    if code ^= 0
    then do;
      call com_err_ (code, ME);
      go to TRANSACTION_END;
    end;

    arg_idx = 1;
ARGUMENT_LOOP:
    do while (arg_idx <= arg_count);
      call cu_$arg_ptr (arg_idx, arg_ptr, arg_len, code);
      if code ^= 0
      then do;
        call com_err_ (code, ME);
        go to TRANSACTION_END;
      end;

      if length (arg) = 0
      then do;
        call com_err_ (code, ME, "A null argument was found where an entrypoint was expected.");
        go to TRANSACTION_END;
      end;

      if substr (arg, 1, 1) ^= "-"
      then
ENTRYPOINTS_ARGUMENT:
        do;
        call CHECK_NEXT_ARG (arg, 256, "trace", "entrypoints", " control_args");
        call trace_$specify_entrypoints ((arg), null ());
        arg_idx = arg_idx + 1;
      end ENTRYPOINTS_ARGUMENT;

      else
CONTROL_ARGUMENT:
        do;
        if arg_idx + 1 > arg_count
        then next_arg_ptr = null ();
        else do;
	call cu_$arg_ptr (arg_idx + 1, next_arg_ptr, next_arg_len, code);
	if code ^= 0
	then do;
	  call com_err_ (code, ME);
	  go to TRANSACTION_END;
	end;

	if length (next_arg) > 0
	then if substr (next_arg, 1, 1) = "-"
	     then next_arg_ptr = null ();
        end;

        if arg = "-add" /* -add */
        then do;
	add_remove_action = "add";
	arg_idx = arg_idx + 1;
        end;

        else if arg = "-alm" /* -alm on|off */
        then do;
	call CHECK_NEXT_ARG (next_arg, 8, arg, "on|off", "");
	call trace_$set_alm (trace_$cv_onoff_to_bit ((next_arg)));
	arg_idx = arg_idx + 2;
        end;

        else if arg = "-arguments" | arg = "-ag" | arg = "-argument" | arg = "-args" | arg = "-arg"
	   | arg = "-ags" /* -arguments in|out|on|off, -ag in|out|on|off */
        then do;
	call CHECK_NEXT_ARG (next_arg, 8, arg, "in|out|on|off", "");
	call trace_$set_arguments (trace_$cv_inout_to_bits ((next_arg)));
	arg_idx = arg_idx + 2;
        end;

        else if arg = "-automatic" | arg = "-auto" /* -automatic on|off, -auto on|off */
        then do;
	call CHECK_NEXT_ARG (next_arg, 8, arg, "on|off", "");
	call trace_$set_automatic (trace_$cv_onoff_to_bit ((next_arg)));
	call trace_$set_signals (trace_$cv_onoff_to_bit ((next_arg)));
	arg_idx = arg_idx + 2;
        end;

        else if arg = "-brief" | arg = "-bf" /* -brief, -bf */
        then do;
	call trace_$set_long ("0"b);
	arg_idx = arg_idx + 1;
        end;

        else if arg = "-buffer" | arg = "-buf" | arg = "-buff" /* -buffer on|off, -buf on|off */
        then do;
	call CHECK_NEXT_ARG (next_arg, 8, arg, "on|off", "");
	call trace_$set_buffer (trace_$cv_onoff_to_bit ((next_arg)));
	arg_idx = arg_idx + 2;
        end;

        else if arg = "-calibrate" /* -calibrate on|off */
        then do;
	call CHECK_NEXT_ARG (next_arg, 8, arg, "on|off", "");
	call trace_$set_calibrate (trace_$cv_onoff_to_bit ((next_arg)));
	arg_idx = arg_idx + 2;
        end;

        else if arg = "-call" /* -call COMMAND-LINE */
        then do;
	call CHECK_NEXT_ARG (next_arg, 256, arg, "COMMAND-LINE", " (if CL contains spaces, it must be quoted)");
	call trace_$set_call ((next_arg));
	arg_idx = arg_idx + 2;
        end;

        else if arg = "-disable" | arg = "-disa" | arg = "-dis" /* -disable, -disa */
        then do;
	call trace_$set_enabled ("0"b);
	arg_idx = arg_idx + 1;
        end;

        else if arg = "-enable" | arg = "-ena" | arg = "-en" /* -enable, -ena */
        then do;
	call trace_$set_enabled ("1"b);
	arg_idx = arg_idx + 1;
        end;

        else if arg = "-every" | arg = "-ev" /* -every N, -ev N */
        then do;
	call CHECK_NEXT_ARG (next_arg, 16, arg, "N", " (where N is positive or 0)");
	call trace_$set_every (trace_$cv_n_to_number ((next_arg)));
	arg_idx = arg_idx + 2;
        end;

        else if arg = "-first" | arg = "-ft" /* -first N, -ft N */
        then do;
	call CHECK_NEXT_ARG (next_arg, 16, arg, "N", " (where N is positive or 0)");
	call trace_$set_first (trace_$cv_n_to_number ((next_arg)));
	arg_idx = arg_idx + 2;
        end;

        else if arg = "-high" /* -high N */
        then do;
	call CHECK_NEXT_ARG (next_arg, 16, arg, "N", " (where N is positive or 0)");
	call trace_$set_high (trace_$cv_n_to_number ((next_arg)));
	arg_idx = arg_idx + 2;
        end;

        else if arg = "-last" | arg = "-lt" /* -last N, -lt N */
        then do;
	call CHECK_NEXT_ARG (next_arg, 16, arg, "N", " (where N is positive or 0)");
	call trace_$set_last (trace_$cv_n_to_number ((next_arg)));
	arg_idx = arg_idx + 2;
        end;

        else if arg = "-long" | arg = "-lg" /* -long, -lg */
        then do;
	call trace_$set_long ("1"b);
	arg_idx = arg_idx + 1;
        end;

        else if arg = "-loud" /* -loud */
        then do;
	call trace_$set_loud ("1"b);
	arg_idx = arg_idx + 1;
        end;

        else if arg = "-low" /* -low N */
        then do;
	call CHECK_NEXT_ARG (next_arg, 16, arg, "N", " (where N is positive or 0)");
	call trace_$set_low (trace_$cv_n_to_number ((next_arg)));
	arg_idx = arg_idx + 2;
        end;

        else if arg = "-meter" | arg = "-mt" | arg = "-meters" | arg = "-mts" /* -meter on|off, -mt on|off */
        then do;
	call CHECK_NEXT_ARG (next_arg, 8, arg, "on|off", "");
	call trace_$set_meter (trace_$cv_onoff_to_bit ((next_arg)));
	arg_idx = arg_idx + 2;
        end;

        else if arg = "-new_high" /* -new_high on|off */
        then do;
	call CHECK_NEXT_ARG (next_arg, 8, arg, "on|off", "");
	call trace_$set_new_high (trace_$cv_onoff_to_bit ((next_arg)));
	arg_idx = arg_idx + 2;
        end;

        else if arg = "-no_alm" /* -no_alm */
        then do;
	call trace_$set_alm ("0"b);
	arg_idx = arg_idx + 1;
        end;

        else if arg = "-no_arguments" | arg = "-nag" | arg = "-no_argument" | arg = "-nargs" | arg = "-narg"
	   | arg = "-nags" /* -no_arguments, -nag */
        then do;
	call trace_$set_arguments ("00"b);
	arg_idx = arg_idx + 1;
        end;

        else if arg = "-no_automatic" | arg = "-nauto" /* -no_automatic, -nauto */
        then do;
	call trace_$set_automatic ("0"b);
	call trace_$set_signals ("0"b);
	arg_idx = arg_idx + 1;
        end;

        else if arg = "-no_buffer" | arg = "-nbuf" | arg = "-nbuff" /* -no_buffer, -nbuf */
        then do;
	call trace_$set_buffer ("0"b);
	arg_idx = arg_idx + 1;
        end;

        else if arg = "-no_calibrate" /* -no_calibrate */
        then do;
	call trace_$set_calibrate ("0"b);
	arg_idx = arg_idx + 1;
        end;

        else if arg = "-no_call" /* -no_call */
        then do;
	call trace_$set_call ("");
	arg_idx = arg_idx + 1;
        end;

        else if arg = "-no_every" | arg = "-nev" /* -no_every, -nev */
        then do;
	call trace_$set_every (0);
	arg_idx = arg_idx + 1;
        end;

        else if arg = "-no_first" | arg = "-nft" /* -no_first, -nft */
        then do;
	call trace_$set_first (0);
	arg_idx = arg_idx + 1;
        end;

        else if arg = "-no_high" /* -no_high */
        then do;
	call trace_$set_high (0);
	arg_idx = arg_idx + 1;
        end;

        else if arg = "-no_last" | arg = "-nlt" /* -no_last, -nlt */
        then do;
	call trace_$set_last (0);
	arg_idx = arg_idx + 1;
        end;

        else if arg = "-no_low" /* -no_low */
        then do;
	call trace_$set_low (0);
	arg_idx = arg_idx + 1;
        end;

        else if arg = "-no_meter" | arg = "-nmt" | arg = "-no_meters" | arg = "-nmts" /* -no_meter, -nmt */
        then do;
	call trace_$set_meter ("0"b);
	arg_idx = arg_idx + 1;
        end;

        else if arg = "-no_new_high" /* -no_new_high */
        then do;
	call trace_$set_new_high ("0"b);
	arg_idx = arg_idx + 1;
        end;

        else if arg = "-no_output_file" | arg = "-nof" /* -no_output_file, -nof */
        then do;
	call trace_$set_output_switch (trace_$cv_file_path_to_osw ("", null ()));
	arg_idx = arg_idx + 1;
        end;

        else if arg = "-no_output_switch" | arg = "-nosw" /* -no_output_switch, -nosw */
        then do;
	call trace_$set_output_switch (trace_$cv_stream_name_to_osw (""));
	arg_idx = arg_idx + 1;
        end;

        else if arg = "-no_signals" | arg = "-nsig" | arg = "-no_signal" | arg = "-nsigs" /* -no_signals, -nsig */
        then do;
	call trace_$set_signals ("0"b);
	arg_idx = arg_idx + 1;
        end;

        else if arg = "-no_stop" | arg = "-nsp" /* -no_stop, -nsp */
        then do;
	call trace_$set_stop ("00"b);
	arg_idx = arg_idx + 1;
        end;

        else if arg = "-no_stop_every" | arg = "-nspev" /* -no_stop_every, -nspev */
        then do;
	call trace_$set_every (0);
	arg_idx = arg_idx + 1;
        end;

        else if arg = "-no_stop_low" | arg = "-nsplow" /* -no_stop_low, -nsplow */
        then do;
	call trace_$set_stop_low (0);
	arg_idx = arg_idx + 1;
        end;

        else if arg = "-no_stop_proc" | arg = "-nspp" /* -no_stop_proc, -nspp */
        then do;
	call trace_$set_stop_proc (trace_$cv_entry_name_to_spp ("", null ()));
	arg_idx = arg_idx + 1;
        end;

        else if arg = "-no_trace" /* -no_trace */
        then do;
	call trace_$set_trace ("00"b);
	arg_idx = arg_idx + 1;
        end;

        else if arg = "-off" /* -off */
        then do;
	on_off_action = "off";
	arg_idx = arg_idx + 1;
        end;

        else if arg = "-on" /* -on */
        then do;
	on_off_action = "on";
	arg_idx = arg_idx + 1;
        end;

        else if arg = "-output_file" | arg = "-of" /* -output_file PATH, -of PATH */
        then do;
	call CHECK_NEXT_ARG (next_arg, 256, arg, "PATH", "");
	call trace_$set_output_switch (trace_$cv_file_path_to_osw ((next_arg), null ()));
	arg_idx = arg_idx + 2;
        end;

        else if arg = "-output_switch" | arg = "-osw" /* -output_switch SWITCH, -osw SWITCH */
        then do;
	call CHECK_NEXT_ARG (next_arg, 32, arg, "SWITCH", " (SWITCH must be open for stream output)");
	call trace_$set_output_switch (trace_$cv_stream_name_to_osw ((next_arg)));
	arg_idx = arg_idx + 2;
        end;

        else if arg = "-parameters" | arg = "-pm" | arg = "-parameter" | arg = "-pms" | arg = "-parm"
	   | arg = "-parms" /* -parameters, -pm */
        then do;
	parameters = "1"b;
	arg_idx = arg_idx + 1;
        end;

        else if arg = "-print_buffer" | arg = "-prbuf" | arg = "-prbuff" /* -print_buffer N, -prbuf N */
        then do;
	call CHECK_NEXT_ARG (next_arg, 16, arg, "N", " (where N is positive or 0)");
	print_buffer = trace_$cv_n_to_number ((next_arg));
	arg_idx = arg_idx + 2;
        end;

        else if arg = "-quiet" /* -quiet */
        then do;
	call trace_$set_loud ("0"b);
	arg_idx = arg_idx + 1;
        end;

        else if arg = "-remove" | arg = "-rm" /* -remove, -rm */
        then do;
	add_remove_action = "remove";
	arg_idx = arg_idx + 1;
        end;

        else if arg = "-set_defaults" | arg = "-sdft" | arg = "-set_default" | arg = "-sdf" | arg = "-sdfs"
	   | arg = "-sdfts" /* -set_defaults, -sdft */
        then do;
	set_defaults = "1"b;
	arg_idx = arg_idx + 1;
        end;

        else if arg = "-signals" | arg = "-sig" | arg = "-signal" | arg = "-sigs" /* -signals on|off, -sig on|off */
        then do;
	call CHECK_NEXT_ARG (next_arg, 8, arg, "on|off", "");
	call trace_$set_signals (trace_$cv_onoff_to_bit ((next_arg)));
	arg_idx = arg_idx + 2;
        end;

        else if arg = "-status" | arg = "-st" /* -status, -st */
        then do;
	status = "1"b;
	arg_idx = arg_idx + 1;
        end;

        else if arg = "-stop" | arg = "-sp" /* -stop in|out|on|off, -sp in|out|on|off */
        then do;
	call CHECK_NEXT_ARG (next_arg, 8, arg, "in|out|on|off", "");
	call trace_$set_stop (trace_$cv_inout_to_bits ((next_arg)));
	arg_idx = arg_idx + 2;
        end;

        else if arg = "-stop_every" | arg = "-spev" /* -stop_every N, -spev N */
        then do;
	call CHECK_NEXT_ARG (next_arg, 16, arg, "N", " (where N is positive or 0)");
	call trace_$set_stop_every (trace_$cv_n_to_number ((next_arg)));
	arg_idx = arg_idx + 2;
        end;

        else if arg = "-stop_proc" | arg = "-spp" /* -stop_proc ENTRYNAME, -spp ENTRYNAME */
        then do;
	call CHECK_NEXT_ARG (next_arg, 256, arg, "ENTRYNAME", "");
	call trace_$set_stop_proc (trace_$cv_entry_name_to_spp ((next_arg), null ()));
	arg_idx = arg_idx + 2;
        end;

        else if arg = "-stop_low" | arg = "-splow" /* -stop_low N, -splow N */
        then do;
	call CHECK_NEXT_ARG (next_arg, 16, arg, "N", " (where N is positive or 0)");
	call trace_$set_stop_low (trace_$cv_n_to_number ((next_arg)));
	arg_idx = arg_idx + 2;
        end;

        else if arg = "-trace" /* -trace in|out|on|off */
        then do;
	call CHECK_NEXT_ARG (next_arg, 8, arg, "in|out|on|off", "");
	call trace_$set_trace (trace_$cv_inout_to_bits ((next_arg)));
	arg_idx = arg_idx + 2;
        end;

/************ THE FOLLOWING CONTROL ARGUMENTS BECAME OBSOLETE IN MR11 ********/

        else if arg = "-return_value" | arg = "-rv"
        then do;
	call com_err_ (ZERO, ME, "The ^a argument is now obsolete.
Trace automatically determines whether entrypoints return values.", arg);
	go to TRANSACTION_END;
        end;

        else if arg = "-start" | arg = "-sr"
        then do;
	call OBSOLETE_ARG (arg, "-add");
	go to TRANSACTION_END;
        end;

        else if arg = "-before"
        then do;
	call OBSOLETE_ARG (arg, "-stop_every N -stop in (-spev N -sp in)");
	go to TRANSACTION_END;
        end;

        else if arg = "-after"
        then do;
	call OBSOLETE_ARG (arg, "-stop_every N -stop out (-spev N -sp out)");
	go to TRANSACTION_END;
        end;

        else if arg = "-depth  " | arg = "-dh"
        then do;
	call OBSOLETE_ARG (arg, "-high");
	go to TRANSACTION_END;
        end;

        else if arg = "-in"
        then do;
	call OBSOLETE_ARG (arg, "-arguments in (-ag in)");
	go to TRANSACTION_END;
        end;

        else if arg = "-out"
        then do;
	call OBSOLETE_ARG (arg, "-arguments out (-ag out)");
	go to TRANSACTION_END;
        end;

        else if arg = "-inout"
        then do;
	call OBSOLETE_ARG (arg, "-arguments inout (-ag inout)");
	go to TRANSACTION_END;
        end;

        else if arg = "-template" | arg = "-tp"
        then do;
	call OBSOLETE_ARG (arg, "-parameters (-pm)");
	go to TRANSACTION_END;
        end;

        else if arg = "-govern " | arg = "-gv"
        then do;
	call OBSOLETE_ARG (arg, "-stop_low N -stop in (-splow N -sp in)");
	go to TRANSACTION_END;
        end;

        else if arg = "-execute" | arg = "-ex"
        then do;
	call OBSOLETE_ARG (arg, "-call");
	go to TRANSACTION_END;
        end;

/************ THE FOLLOWING CONTROL ARGUMENTS BECAME OBSOLETE IN MR9 ********/

        else if arg = "-print  " | arg = "-pr"
        then do;
	call OBSOLETE_ARG (arg, "-status (-st)");
	go to TRANSACTION_END;
        end;

        else if arg = "-reset  " | arg = "-rs"
        then do;
	call OBSOLETE_ARG (arg, "the trace_meters command (tmt)");
	go to TRANSACTION_END;
        end;

        else if arg = "-total" | arg = "-tt"
        then do;
	call OBSOLETE_ARG (arg, "the trace_meters command (tmt)");
	go to TRANSACTION_END;
        end;

        else if arg = "-subtotal" | arg = "-stt"
        then do;
	call OBSOLETE_ARG (arg, "the trace_meters command (tmt)");
	go to TRANSACTION_END;
        end;

        else if arg = "-reset_total" | arg = "-rst"
        then do;
	call OBSOLETE_ARG (arg, "the trace_meters command (tmt -rs)");
	go to TRANSACTION_END;
        end;

        else if arg = "-reset_subtotal" | arg = "-rss"
        then do;
	call OBSOLETE_ARG (arg, "the trace_meters command (tmt -rs)");
	go to TRANSACTION_END;
        end;

/*************** END OF OBSOLETE ARGUMENTS *********************************/

        else do;
	call com_err_ (error_table_$badopt, ME, """^a""", arg);
	go to TRANSACTION_END;
        end;
      end CONTROL_ARGUMENT;
    end ARGUMENT_LOOP;
%page;
/* COMMIT ACTION and print a nice message something like this:

   Trace: global parms changed, default parms changed,
   4 entrypoints specified, 2 entrypoints added, 2 entrypoints updated,
   4 entrypoints turned off.
*/

    call SAY_BEGIN ();

    if FIRST_TIME
    then do;
      call SAY (trace_$version ());
      FIRST_TIME = "0"b;
    end;

    if trace_$update_global_parms ()
    then call SAY ("global parms changed");

    if set_defaults
    then do;
      if trace_$update_default_parms ()
      then call SAY ("default parms changed");
    end;

    n_specified = trace_$num_specified_entrypoints ();

    if n_specified > 0
    then
ENTRYPOINT_ACTION:
      do;
      call SAY_N_ENTRYPOINTS (n_specified, "specified");

      if add_remove_action = "" & on_off_action = "" & ^status
      then add_remove_action = "add";

      if add_remove_action = "add"
      then
        begin;
	dcl  n_added		       fixed bin;
	dcl  n_modified		       fixed bin;
	call trace_$add_specified_eps (n_added, n_modified);
	call SAY_N_ENTRYPOINTS (n_added, "added");
	if n_modified > 0
	then call SAY_N_ENTRYPOINTS (n_modified, "modified");
        end;

      if add_remove_action = "remove"
      then
        begin;
	dcl  n_removed		       fixed bin;
	call trace_$remove_specified_eps (n_removed);
	call SAY_N_ENTRYPOINTS (n_removed, "removed");
        end;

      if on_off_action = "on"
      then
        begin;
	dcl  n_turned_on		       fixed bin;
	call trace_$turn_on_specified_eps (n_turned_on);
	call SAY_N_ENTRYPOINTS (n_turned_on, "turned on");
        end;

      if on_off_action = "off"
      then
        begin;
	dcl  n_turned_off		       fixed bin;
	call trace_$turn_off_specified_eps (n_turned_off);
	call SAY_N_ENTRYPOINTS (n_turned_off, "turned off");
        end;
    end ENTRYPOINT_ACTION;

    n_entrypoints = trace_$num_entrypoints ();
    if n_entrypoints = 0
    then call SAY ("trace table empty");
    else call SAY_N_ENTRYPOINTS (n_entrypoints, "in trace table");

    if ^trace_$enabled ()
    then call SAY ("disabled");
    else if trace_$in_trace ()
    then call SAY ("temporarily disabled");

    call SAY_END ();

    if parameters | arg_count = 0
    then do;
      call ioa_ ("Global parms: ^a", trace_$global_parms_string ());
      call ioa_ ("Default parms: ^a", trace_$parms_string (-1, "0"b));
    end;

    if arg_count = 0
    then call ioa_ ("Acts: -set_defaults -add/-remove -on/-off -parameters -status -print_buffer.");

    if add_remove_action = ""
    then if trace_$parms_specified ()
         then call ioa_ ("The trace parameters you specified were ineffectual because
you did not specify any entrypoints to be added or -set_defaults.");

    if status & n_entrypoints ^= 0
    then
STATUS:
      begin;
        dcl  ep_idx			     fixed bin;
        dcl  ep_ptr			     ptr;
        dcl  n_not_in_tt		     fixed bin;
        dcl  old_seg_no		     bit (18) aligned;
        dcl  specified_ep_idx		     fixed bin;

        if n_specified = 0
        then call ioa_ ("If you want status, you must specify some entrypoints.");
        else call ioa_ ("^/  CALLS RECURSION/HIGHEST   NAME ^18x(STATUS) PARMS ^= DEFAULTS");
        old_seg_no = ""b;
        n_not_in_tt = 0;
        do specified_ep_idx = 0 to n_specified - 1;
	ep_idx = trace_$specified_entrypoint_index (specified_ep_idx);
	if ep_idx < 0
	then n_not_in_tt = n_not_in_tt + 1;
	else do;
	  ep_ptr = trace_$entrypoint_ptr (ep_idx);
	  if baseno (ep_ptr) ^= old_seg_no
	  then do;
	    call ioa_ ("^a", trace_$entrypoint_seg_path (ep_idx));
	    old_seg_no = baseno (ep_ptr);
	  end;
	  counts = trace_$entrypoint_counts (ep_idx);
	  call ioa_ ("^7d ^d/^d ^38a (^a) ^a", counts.calls, counts.level, counts.max_level,
	       trace_$entrypoint_name (ep_idx), trace_$entrypoint_status (ep_idx), trace_$parms_string (ep_idx, "1"b));
	end;
        end;
        if n_not_in_tt > 0
        then do;
	if n_not_in_tt = 1
	then call ioa_ ("^d of the specified entrypoints was not in the trace table.", n_not_in_tt);
	else call ioa_ ("^d of the specified entrypoints were not in the trace table.", n_not_in_tt);
        end;
      end STATUS;

    if print_buffer ^= 0
    then
PRINT_BUFFER:
      begin;
        dcl  buffer_count		     fixed bin (34);
        dcl  buffer_first_idx		     fixed bin (34);
        dcl  buffer_idx		     fixed bin (34);
        call ioa_ ("");
        if ^trace_$buffer ()
        then call ioa_ ("There is no buffer to print.");
        else do;
	call trace_$buffer_counts (buffer_first_idx, buffer_count);
	if buffer_count = 0
	then call ioa_ ("The buffer is empty.");
	else do;
	  buffer_idx = max (buffer_count - print_buffer, buffer_first_idx);
	  call ioa_ ("^8a  ^a", "  EVENT#", trace_$buffer_event_header (buffer_idx));
	  do buffer_idx = buffer_idx to buffer_count - 1;
	    call ioa_ ("^8d  ^a", buffer_idx, trace_$buffer_event_string (buffer_idx));
	  end;
	end;
        end;
      end PRINT_BUFFER;

TRANSACTION_END:
    if ^trace_$transaction_end (transaction_id)		/* Re-enable trace_catch_. */
    then call com_err_ (ZERO, ME, "The trace command ended abnormally.");

    return;



SAY:
  proc (action_i);
    if trace_$loud ()
    then do;
      call INIT ();
      call ioa_$nnl ("^a", action_i);
    end;
    return;

SAY_N_ENTRYPOINTS:
  entry (num_i, action_i);
    if trace_$loud ()
    then do;
      call INIT ();
      if num_i = 1
      then call ioa_$nnl ("^d ep ^a", num_i, action_i);
      else call ioa_$nnl ("^d eps ^a", num_i, action_i);
    end;
    return;

SAY_BEGIN:
  entry ();
    n_things_said = 0;
    return;

SAY_END:
  entry ();
    if n_things_said > 0
    then call ioa_ (".");
    return;

INIT:
    proc ();
      if n_things_said = 0
      then call ioa_$nnl ("^a: ", ME);
      else call ioa_$nnl (", ");
      n_things_said = n_things_said + 1;
    end INIT;

    dcl  action_i			 char (*) parm;
    dcl  num_i			 fixed bin parm;
  end SAY;
%page;
compensations:
compensation:
  entry ();

    call ioa_ ("^24x REAL VCPU");

    call PC (COMPENSATION_FROM_ENTRY_TO_ENTRY, "From entry to entry");
    call PC (COMPENSATION_FROM_ENTRY_TO_RETURN, "From entry to return");
    call PC (COMPENSATION_FROM_RETURN_TO_ENTRY, "From return to entry");
    call PC (COMPENSATION_FROM_RETURN_TO_RETURN, "From return to return");

    return;


PC:
  proc (compensation_type_i, compensation_name_i);
    dcl  compensation_type_i		 fixed bin parm;
    dcl  compensation_name_i		 char (24) parm;
    comp = trace_$compensation (compensation_type_i);
    call ioa_ ("^24a ^4d ^4d", compensation_name_i, comp.real_time, comp.vcpu_time);
    dcl  1 comp			 aligned like compensation;
  end PC;






OBSOLETE_ARG:
  proc (obsolete_arg_i, use_instead_i);
    dcl  (obsolete_arg_i, use_instead_i) char (*) parm;
    call com_err_ (ZERO, ME, "The ^a argument is now obsolete.
Use ^a instead.
This version of the trace command has substantially improved syntax.
Please see the new documentation for trace and watch.", obsolete_arg_i, use_instead_i);
  end OBSOLETE_ARG;



CHECK_NEXT_ARG:
  proc (next_arg_i, max_arg_len_i, control_arg_i, syntax_i, comment_i);
    dcl  (next_arg_i, control_arg_i, syntax_i, comment_i)
				 char (*) parm;
    dcl  max_arg_len_i		 fixed bin (21);

    if addr (next_arg_i) = null ()
    then do;
      call com_err_ (error_table_$noarg, ME, "The syntax is: ^a ^a^a.", control_arg_i, syntax_i, comment_i);
      go to TRANSACTION_END;
    end;

    if length (next_arg_i) > max_arg_len_i
    then do;
      call com_err_ (error_table_$bigarg, ME, "The maximum length for ^a is ^d characters.
The syntax is: ^a ^a^a.", syntax_i, max_arg_len_i, control_arg_i, syntax_i, comment_i);
      go to TRANSACTION_END;
    end;
  end CHECK_NEXT_ARG;
%page;
/* SUBROUTINES */

SUB_ERROR_HANDLER:
  proc (mcptr_i, a_name_i, wcptr_i, info_ptr_i, continue_o);
    sub_error_info_ptr = info_ptr_i;
    condition_info_header_ptr = null ();
    if sub_error_info.name ^= trace_$me ()
    then go to CONTINUE;
    if sub_error_info.header.support_signal | sub_error_info.header.quiet_restart
    then go to HANDLED;
    if sub_error_info.header.default_restart
    then go to REPORT;
    if sub_error_info.header.cant_restart
    then go to REPORT_AND_ABORT;
    else go to CONTINUE;

REPORT_AND_ABORT:
    call com_err_ (sub_error_info.header.status_code, ME, "^a", sub_error_info.header.info_string);
    go to TRANSACTION_END;

REPORT:
    call com_err_ (sub_error_info.header.status_code, ME, "^a", sub_error_info.header.info_string);

HANDLED:
    continue_o = "0"b;
    return;

CONTINUE:
    continue_o = "1"b;
    return;

    dcl  mcptr_i			 ptr parm;
    dcl  a_name_i			 char (*) parm;
    dcl  info_ptr_i			 ptr parm;
    dcl  wcptr_i			 ptr parm;
    dcl  continue_o			 bit aligned;

%include condition_info_header;

%include sub_error_info;

  end SUB_ERROR_HANDLER;
%page;
/* START OF DECLARATIONS */
/* format: ^insnl,^delnl */


/* Automatic */

    dcl  add_remove_action		 char (8) init ("");
    dcl  arg_count			 fixed bin init (0);
    dcl  arg_idx			 fixed bin init (0);
    dcl  arg_len			 fixed bin (21) init (0);
    dcl  arg_ptr			 ptr init (null ());
    dcl  code			 fixed bin (35) init (0);
    dcl  n_entrypoints		 fixed bin;
    dcl  n_specified		 fixed bin init (0);
    dcl  n_things_said		 fixed bin init (0);
    dcl  next_arg_idx		 fixed bin init (0);
    dcl  next_arg_len		 fixed bin (21) init (0);
    dcl  next_arg_ptr		 ptr init (null ());
    dcl  on_off_action		 char (4) init ("");
    dcl  parameters			 bit aligned init ("0"b);
    dcl  print_buffer		 fixed bin (34);
    dcl  set_defaults		 bit aligned init ("0"b);
    dcl  status			 bit aligned init ("0"b);
    dcl  transaction_id		 fixed bin (71) init (0);


/* Static */

    dcl  FIRST_TIME			 bit aligned static init ("1"b);
    dcl  ME			 char (32) static options (constant) init ("trace");
    dcl  ZERO			 fixed bin (35) static options (constant) init (0);


/* Conditions */

    dcl  cleanup			 condition;
    dcl  error			 condition;


/* Based */

    dcl  arg			 char (arg_len) based (arg_ptr);
    dcl  next_arg			 char (next_arg_len) based (next_arg_ptr);


/* External Variables */

    dcl  error_table_$badopt		 fixed bin (35) ext;
    dcl  error_table_$bigarg		 fixed bin (35) ext;
    dcl  error_table_$noarg		 fixed bin (35) ext;


/* External Entries */

    dcl  com_err_			 entry options (variable);
    dcl  condition_			 entry (char (*), entry);
    dcl  cu_$arg_count		 entry (fixed bin, fixed bin (35));
    dcl  cu_$arg_ptr		 entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
    dcl  ioa_			 entry () options (variable);
    dcl  ioa_$nnl			 entry () options (variable);


/* format: insnl,delnl */
/* END OF DECLARATIONS */
%page;
/* START OF INCLUDE FILES */


%include trace_interface;


  end trace;
