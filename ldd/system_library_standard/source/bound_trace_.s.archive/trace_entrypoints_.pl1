/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1984 *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(86-03-13,GWMay), approve(86-04-16,MCR7373),
     audit(86-04-29,LJAdams), install(86-05-01,MR12.0-1051):
     Changed to reference entry_desc_info_version_2 constant.
                                                   END HISTORY COMMENTS */


/*
   This program converts entrypoint names into pointers and vice versa.

   Written: May 1984 by Jeffrey D. Ives.
*/
/* format: style2,ifthendo,^indnoniterdo,thendo,^inditerdo,indproc,ind2,dclind5,idind32 */


trace_entrypoints_:
  procedure ();

       dcl (addr, addrel, baseno, before, bin, codeptr, index, maxlength,
	 null, pointer, rel, reverse, rtrim, search, substr, unspec)
				builtin;
    signal error;


get_path_name:
  entry (entry_ptr_i) returns (char (256) var);
    call hcs_$fs_get_path_name (pointer (entry_ptr_i, 0), pathname.dir, (0), pathname.ent, code);
    if code ^= 0
    then do;
      call sub_err_ (code, trace_$me (), ACTION_DEFAULT_RESTART, null (), rv, "I could not get the path name of ^p.",
	 pointer (entry_ptr_i, 0));
      pathname.dir = "?";
      pathname.ent = "?";
    end;
    return (rtrim (pathname.dir) || ">" || rtrim (pathname.ent));
%page;
add_entrypoint:					/* Called from trace_catch_. */
  entry (entry_ptr_i) returns (fixed bin);
    entry_ptr = entry_ptr_i;
    on any_other go to ADD_ENTRYPOINT_PUNT;
    segment = SEGMENT (entry_ptr);
    object = OBJECT (segment);
    entry_ptr_offset = bin (rel (entry_ptr), 18);
    if entry_ptr_offset < 2 | entry_ptr -> word (1) = ALM_TSP2_PR7_UP_38_STAR
    then do;					/* if alm then search definitions */
      definition = DEFINITION (object, object.defp);
      do while (^(definition.section = "text" & definition.offset = entry_ptr_offset));
        if definition.section = "eof"
        then go to ADD_ENTRYPOINT_PUNT;
        definition = DEFINITION (object, definition.next_def);
      end;
      entry_name = ENTRY_NAME (object, definition);
    end;
    else do;					/* assume standard entry sequence -> definition */
      defptr = addrel (object.defp, addrel (entry_ptr, -2) -> entry_sequence.def_relp);
      entry_name = ENTRY_NAME (object, DEFINITION (object, defptr));
    end;

    return (
         trace_tables_$add_entrypoint (entry_ptr, entry_name, TRANSLATOR_ID (entry_ptr, entry_name), FUNCTION (entry_ptr))
         );

ADD_ENTRYPOINT_PUNT:
    revert any_other;
    call hcs_$fs_get_path_name (pointer (entry_ptr, 0), pathname.dir, (0), pathname.ent, code);
    if code = 0
    then entry_name = rtrim (pathname.ent) || "$" || OCTAL (rel (entry_ptr));
    else entry_name = OCTAL (baseno (entry_ptr)) || "$" || OCTAL (rel (entry_ptr));
    return (trace_tables_$add_entrypoint (entry_ptr, entry_name, -1, "0"b));
%page;
specify_entrypoints:
  entry (char256var_i, referencing_ptr_i);

    if char256var_i = "*"
    then do;
      call trace_tables_$specify_all_entrypoints ();
      return;
    end;

    desired = DESIRED (char256var_i);

    entry_ptr = codeptr (cv_entry_ (desired.path, referencing_ptr_i, code));
    if code ^= 0
    then
      begin;					/* try looking for seg name in trace table */
        dcl  tt_count		     fixed bin;
        dcl  tt_idx			     fixed bin;
        tt_count = trace_$num_entrypoints ();
        do tt_idx = 0 by 1 while (code = error_table_$seg_not_found & tt_idx < tt_count);
	if before (trace_$entrypoint_name (tt_idx), "$") = desired.segment_symbol
	then do;
	  entry_ptr = pointer (trace_$entrypoint_ptr (tt_idx), 0);
	  code = 0;
	end;
        end;
        if code ^= 0
        then call sub_err_ (code, trace_$me (), ACTION_CANT_RESTART, null (), rv, """^a""", char256var_i);
      end;

    segment = SEGMENT (entry_ptr);
    object = OBJECT (segment);

    if desired.offset_symbol ^= "*"
    then
      begin;					/* try get_definition_ first */
        dcl  get_definition_		     entry (ptr, char (*), char (*), ptr, fixed bin (35));
        call get_definition_ (object.defp, (desired.segment_symbol), (desired.offset_symbol), defptr, code);
        if code = 0
        then do;
	definition = DEFINITION (object, defptr);
	entry_ptr = addrel (object.textp, definition.offset);
	entry_name = ENTRY_NAME (object, definition);
	call trace_tables_$specify_entrypoint (entry_ptr, entry_name, TRANSLATOR_ID (entry_ptr, entry_name),
	     FUNCTION (entry_ptr));
	return;
        end;
      end;

    definition = DEFINITION (object, object.defp);	/* get primary or bind file name */
    do while (definition.flags.a_ignore & definition.section ^= "eof");
      definition = DEFINITION (object, definition.next_def);
    end;

    if definition.section ^= "segn"
    then call sub_err_ (error_table_$no_ext_sym, trace_$me (), ACTION_CANT_RESTART, null (), rv, """^a""", char256var_i);

    n_specified = 0;
    if ^object.format.bound | substr (definition.symbol, 1, definition.symbol_lng) = desired.segment_symbol
    then do;
      definition = DEFINITION (object, definition.block_ptr);
      do while (definition.section ^= "eof");
        if definition.section = "text" & definition.offset ^= 0
        then do;
	if desired.offset_symbol = "*" | substr (definition.symbol, 1, definition.symbol_lng) = desired.offset_symbol
	then do;
	  entry_ptr = addrel (object.textp, definition.offset);
	  entry_name = ENTRY_NAME (object, definition);
	  call trace_tables_$specify_entrypoint (entry_ptr, entry_name, TRANSLATOR_ID (entry_ptr, entry_name),
	       FUNCTION (entry_ptr));
	  n_specified = n_specified + 1;
	end;
        end;
        definition = DEFINITION (object, definition.next_def);
      end;
    end;
    else do;					/* look for the component to trace */
      definition = DEFINITION (object, definition.next_def);
      do while (
	 ^(definition.section = "segn" & substr (definition.symbol, 1, definition.symbol_lng) = desired.segment_symbol))
	 ;
        if definition.section = "eof"
        then call sub_err_ (ZERO, trace_$me (), ACTION_CANT_RESTART, null (), rv,
	        "The segment symbol ""^a"" was not found in the segment ""^a"".", desired.segment_symbol, desired.path);
        definition = DEFINITION (object, definition.next_def);
      end;

      definition = DEFINITION (object, definition.block_ptr);
      do while (^(definition.section = "segn" | definition.section = "eof"));
        if definition.section = "text" & definition.offset ^= 0
        then do;
	if desired.offset_symbol = "*" | substr (definition.symbol, 1, definition.symbol_lng) = desired.offset_symbol
	then do;
	  entry_ptr = addrel (object.textp, definition.offset);
	  entry_name = ENTRY_NAME (object, definition);
	  call trace_tables_$specify_entrypoint (entry_ptr, entry_name, TRANSLATOR_ID (entry_ptr, entry_name),
	       FUNCTION (entry_ptr));
	  n_specified = n_specified + 1;
	end;
        end;
        definition = DEFINITION (object, definition.next_def);
      end;
    end;

    if n_specified = 0
    then call sub_err_ (error_table_$no_ext_sym, trace_$me (), ACTION_CANT_RESTART, null (), rv, """^a""", char256var_i);
    return;
%page;
/* SUBROUTINES */


DESIRED:
  proc (char256var_i) returns (1 like desired aligned);
    dcl  char256var_i		 char (256) var parm;
    dcl  jj			 fixed bin;
    dcl  kk			 fixed bin;
    dcl  1 des			 like desired aligned;

    des.path = char256var_i;
    des.pathl = length (rtrim (des.path));
    des.segment_symbol = "";
    des.offset_symbol = "";

    if des.pathl = 0
    then call sub_err_ (error_table_$smallarg, trace_$me (), ACTION_CANT_RESTART, null (), rv, """""");

    jj = search (reverse (substr (des.path, 1, des.pathl)), "<>");
    if jj = 1
    then call sub_err_ (error_table_$badpath, trace_$me (), ACTION_CANT_RESTART, null (), rv, """^a""", des.path);
    if jj = 0					/* point jj to first char in seg name */
    then jj = 1;
    else jj = des.pathl - jj + 2;

    kk = search (substr (des.path, jj, des.pathl - jj + 1), "$|");

    if kk = 1 | kk = des.pathl - jj + 1			/* shouldn't be first or last */
    then call sub_err_ (error_table_$bad_arg, trace_$me (), ACTION_CANT_RESTART, null (), rv, """^a""", des.path);
    if kk = 0
    then do;
      if des.pathl - jj + 1 > maxlength (des.segment_symbol) | des.pathl - jj + 1 > maxlength (des.offset_symbol)
      then call sub_err_ (error_table_$bigarg, trace_$me (), ACTION_CANT_RESTART, null (), rv, """^a""", des.path);

      des.segment_symbol = substr (des.path, jj, des.pathl - jj + 1);
      des.offset_symbol = substr (des.path, jj, des.pathl - jj + 1);
      des.pathl = des.pathl + 2;
      substr (des.path, des.pathl - 1, 2) = "$0";		/* for cv_entry_ */
    end;
    else do;
      if kk - 1 > maxlength (des.segment_symbol) | des.pathl - jj + 1 - kk > maxlength (des.offset_symbol)
      then call sub_err_ (error_table_$bigarg, trace_$me (), ACTION_CANT_RESTART, null (), rv, """^a""", des.path);
      des.segment_symbol = substr (des.path, jj, kk - 1);
      des.offset_symbol = substr (des.path, jj + kk, des.pathl - jj + 1 - kk);
      des.pathl = jj + kk;
      substr (des.path, des.pathl) = "0";
    end;

    if jj > 1					/* if there are "<>" characters */
    then substr (des.path, des.pathl - 1, 1) = "|";
    return (des);
  end DESIRED;


SEGMENT:
  proc (entry_ptr_i) returns (1 like segment aligned);
    dcl  entry_ptr_i		 ptr unal;
    dcl  1 seg			 like segment aligned;
    dcl  hcs_$status_mins		 entry (ptr, fixed bin (2), fixed bin (24), fixed bin (35));
    seg.base_ptr = pointer (entry_ptr, 0);
    call hcs_$status_mins (seg.base_ptr, seg.entry_type, seg.bit_count, code);
    if code ^= 0
    then call sub_err_ (code, trace_$me (), ACTION_CANT_RESTART, null (), rv, "I could not get the status of ""^p"".",
	    seg.base_ptr);
    if seg.entry_type ^= 1				/* 1 means segment. */
    then call sub_err_ (ZERO, trace_$me (), ACTION_CANT_RESTART, null (), rv, """^p"" does not point to a segment.",
	    seg.base_ptr);
    return (seg);
  end SEGMENT;


OBJECT:
  proc (segment_i) returns (1 like object_info aligned);
    dcl  1 segment_i		 like segment aligned parm;
    dcl  1 oi			 like object_info aligned;
    dcl  object_info_$brief		 entry (ptr, fixed bin (24), ptr, fixed bin (35));
    unspec (oi) = ""b;
    oi.version_number = object_info_version_2;
    call object_info_$brief (segment_i.base_ptr, segment_i.bit_count, addr (oi), code);
    if code ^= 0
    then call sub_err_ (code, trace_$me (), ACTION_CANT_RESTART, null (), rv, """^a""",
	    get_path_name ((segment.base_ptr)));
    return (oi);
  end OBJECT;


DEFINITION:
  proc (object_i, defptr_i) returns (1 like definition aligned);
    dcl  defptr_i			 ptr parm;
    dcl  1 object_i			 like object_info aligned;
    dcl  1 def			 like definition aligned;
    dcl  decode_definition_$full	 entry (ptr, ptr, ptr) returns (bit aligned);
    if decode_definition_$full ((defptr_i), addr (def), addr (object_i))
    then do;
      unspec (def) = ""b;
      def.next_def = null ();
      def.last_def = null ();
      def.block_ptr = null ();
      def.section = "eof";
      def.descr_ptr = null ();
    end;
    else if def.section = "text"
    then
      begin;					/* strip off component name if necessary */
        dcl  kk			     fixed bin;
        kk = index (substr (def.symbol, 1, def.symbol_lng), "$");
        if kk > 0
        then do;
	def.symbol_lng = def.symbol_lng - kk;
	def.symbol = substr (def.symbol, kk + 1, def.symbol_lng);
        end;
      end;
    return (def);
  end DEFINITION;


ENTRY_NAME:
  proc (object_i, offset_definition_i) returns (char (65) var);
    dcl  1 object_i			 like object_info aligned parm;
    dcl  1 offset_definition_i	 like definition aligned parm;
    dcl  1 segment_definition		 like definition aligned;
    segment_definition = DEFINITION (object_i, offset_definition_i.block_ptr);
    if segment_definition.section = "eof"
    then call sub_err_ (ZERO, trace_$me (), ACTION_CANT_RESTART, null (), rv,
	    "There seems to be something wrong with the definition of ^a.",
	    substr (offset_definition_i.symbol, 1, offset_definition_i.symbol_lng));
    return (substr (segment_definition.symbol, 1, segment_definition.symbol_lng) || "$"
         || substr (offset_definition_i.symbol, 1, offset_definition_i.symbol_lng));
  end ENTRY_NAME;


OCTAL:
  proc (half_word_i) returns (char (32) var);
    dcl  half_word_i		 bit (18) aligned parm;
    dcl  char32var			 char (32) var;
    dcl  dummy			 fixed bin;
    call ioa_$rsnnl ("^o", char32var, dummy, half_word_i);
    return (char32var);
  end OCTAL;


FUNCTION:
  proc (entry_ptr_i) returns (bit aligned);
    dcl  entry_ptr_i		 ptr unal parm;
    dcl  desc_ptrs			 (1) ptr;
    dcl  1 edi			 like entry_desc_info aligned;
    dcl  get_entry_arg_descs_$info	 entry (ptr, fixed bin, (*) ptr, ptr, fixed bin (35));
    entry_desc_info_ptr = addr (edi);
    unspec (entry_desc_info) = ""b;
    entry_desc_info.version = entry_desc_info_version_2;
    call get_entry_arg_descs_$info ((entry_ptr_i), (0), desc_ptrs, entry_desc_info_ptr, (0));
    return (entry_desc_info.flags.function);
%include entry_desc_info;
  end FUNCTION;


TRANSLATOR_ID:
  proc (entry_ptr_i, entry_name_i) returns (fixed bin);
    dcl  entry_ptr_i		 ptr unal parm;
    dcl  entry_name_i		 char (65) var parm;
    dcl  translator_id		 fixed bin;
    dcl  entry_name			 char (65);
    dcl  entry_ptr			 ptr;
    dcl  link_trap_caller_		 entry ();
    dcl  unwind_stack_		 entry ();
    dcl  unwinder_			 entry ();

    entry_name = entry_name_i;
    entry_ptr = entry_ptr_i;

    if entry_ptr -> word (1) = ALM_TSP2_PR7_UP_38_STAR
    then translator_id = 1;
    else translator_id = 0;

    if (entry_ptr -> word (2) ^= PL1_FORTRAN_EPP2_PR7_UP_28_STAR & entry_ptr -> word (2) ^= COBOL_EPP2_PR7_UP_40_STAR
         & entry_ptr -> word (1) ^= ALM_TSP2_PR7_UP_38_STAR)
         | (entry_ptr -> word (1) = ALM_TSP2_PR7_UP_38_STAR
         & (entry_name = "ssu_$standalone_invocation" | substr (entry_name, 1, 4) = "cu_$"
         | substr (entry_name, 1, 9) = "formline_" | substr (entry_name, 1, 5) = "lisp_"
         | substr (entry_name, 1, 15) = "nonlocal_goto_$" | substr (entry_name, 1, 11) = "condition_$"))
         | entry_ptr = codeptr (link_trap_caller_) | entry_ptr = codeptr (unwind_stack_)
         | entry_ptr = codeptr (unwinder_) | entry_name = "ssu_invocation_$create_standalone"
         | substr (entry_name, 1, 11) = "pascal_io_$" | substr (entry_name, 1, 24) = "pascal_area_management_$"
         | substr (entry_name, 1, 12) = "pascal_time$" | substr (entry_name, 1, 15) = "pascal_errors_$"
         | substr (entry_name, 1, 5) = "probe" | substr (entry_name, 1, 10) = "cobol_rts_"
         | substr (entry_name, 1, 11) = "fortran_io_" | substr (entry_name, 1, 14) = "cobol_control_"
    then translator_id = -1;

    return (translator_id);
  end TRANSLATOR_ID;
%page;
/* START OF DECLARATIONS */
/* format: ^insnl,^delnl */

/* Parameters */

    dcl  char256var_i		 char (256) var parm;
    dcl  entry_ptr_i		 ptr unal parm;
    dcl  referencing_ptr_i		 ptr parm;


/* Automatic */

    dcl  code			 fixed bin (35);
    dcl  defptr			 ptr;
    dcl  entry_name			 char (65) var;
    dcl  entry_ptr			 ptr unal;
    dcl  entry_ptr_offset		 fixed bin (18);
    dcl  n_specified		 fixed bin;
    dcl  rv			 fixed bin (35);

    dcl  1 desired			 aligned,
	 2 path			 char (300) unal,
	 2 pathl			 fixed bin,
	 2 segment_symbol		 char (32) var unal,
	 2 offset_symbol		 char (32) var unal;

    dcl  1 pathname			 aligned,
	 2 dir			 char (168) unal,
	 2 ent			 char (32) unal;

    dcl  1 segment			 aligned,
	 2 base_ptr		 ptr,
	 2 entry_type		 fixed bin (2),
	 2 bit_count		 fixed bin (24);

    dcl  1 definition		 aligned,		/* structure filled in by full entry */
	 2 next_def		 ptr,		/* ptr to next definition in list */
	 2 last_def		 ptr,		/* ptr to previous definition in list */
	 2 block_ptr		 ptr,		/* ptr to either defblock or segname block */
	 2 section		 char (4),	/* "text", "link", "symb" or "segn" */
	 2 offset			 fixed bin (18),	/* offset within class (if ^= "segn") */
	 2 entrypoint		 fixed bin (18),	/* value of entrypoint in text if ^= 0 */
	 2 symbol			 char (256),	/* the symbolic name of the definition */
	 2 symbol_lng		 fixed bin,	/* the actual length of symbol */
	 2 flags,					/* same flags as in std def */
	   3 a_new_format		 bit unaligned,	/* def is in new format */
	   3 a_ignore		 bit unaligned,	/* linker should ignore this def */
	   3 a_entrypoint		 bit unaligned,	/* def is for entrypoint */
	   3 a_retain		 bit unaligned,
	   3 a_arg_count		 bit unaligned,	/* there is an arg count for entry */
	   3 a_descr_sw		 bit unaligned,	/* there are valid descriptors for entry */
	   3 unused		 bit (12) unaligned,
	 2 n_args			 fixed bin,	/* # of args entry expects */
	 2 descr_ptr		 ptr;		/* ptr to array of rel ptrs to descriptors for entry */

    dcl  1 entry_sequence		 aligned based,
	 2 descr_relp_offset	 bit (18) unal,
	 2 reserved		 bit (18) unal,
	 2 def_relp		 bit (18) unal,
	 2 flags			 bit (18) unal;

    dcl  1 object			 like object_info aligned;


/* Static */

    dcl  ALM_TSP2_PR7_UP_38_STAR	 bit (36) aligned static options (constant) init ("700046272120"b3);
						/* ALM entry point */
    dcl  COBOL_EPP2_PR7_UP_40_STAR	 bit (36) aligned static options (constant) init ("700050352120"b3);
						/* COBOL entry point */
    dcl  PL1_FORTRAN_EPP2_PR7_UP_28_STAR bit (36) aligned static options (constant) init ("700034352120"b3);
						/* PL/I or FORTRAN entry point */
    dcl  ZERO			 fixed bin (35) static options (constant) init (0);
    dcl  length			 builtin;


/* Conditions */

    dcl  any_other			 condition;
    dcl  error			 condition;


/* Based */

    dcl  word			 (3) bit (36) aligned based;


/* External Variables */

    dcl  error_table_$bad_arg		 fixed bin (35) ext;
    dcl  error_table_$badpath		 fixed bin (35) ext;
    dcl  error_table_$bigarg		 fixed bin (35) ext;
    dcl  error_table_$no_ext_sym	 fixed bin (35) ext;
    dcl  error_table_$seg_not_found	 fixed bin (35) ext;
    dcl  error_table_$smallarg	 fixed bin (35) ext;


/* External Entries */

    dcl  cv_entry_			 entry (char (*), ptr, fixed bin (35)) returns (entry);
    dcl  hcs_$fs_get_path_name	 entry (ptr, char (*), fixed bin, char (*), fixed bin (35));
    dcl  ioa_$rsnnl			 entry () options (variable);
    dcl  trace_tables_$add_entrypoint	 entry (ptr unal, char (65) var, fixed bin, bit aligned) returns (fixed bin);
    dcl  trace_tables_$specify_all_entrypoints entry ();
    dcl  trace_tables_$specify_entrypoint entry (ptr unal, char (65) var, fixed bin, bit aligned);
    dcl  sub_err_			 entry () options (variable);


/* format: insnl,delnl */
/* END OF DECLARATIONS */
%page;
/* START OF INCLUDE FILES */


%include object_info;



%include sub_err_flags;
%page;
%include trace_interface;


  end trace_entrypoints_;
