/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */

/*
Fall//79, Robert E. Mullen, Initial coding.
06/29/81, Jeffrey D. Ives, added SUB TOTALs.
03/29/82, Jeffrey D. Ives, added -bf and -of and made trace table 0 relative.
07/22/83, Jeffrey D. Ives, for new tab with bigger vcpu and real time fields.  Added VCPU/CALL.
May 1984, Jeffrey D. Ives, get rid of tab altogether and go to new interface.
*/

/* format: style2,^inddcls,^indnoniterdo,^inditerdo,dclind5,idind35 */
trace_meters:
tmt:
     procedure options (variable);

/* DISABLE TRACE_CATCH_ */

	transaction_id = clock ();
	on cleanup call TRACE_METERS_CLEANUP ();
	if ^trace_$transaction_begin (transaction_id)	/* Temporarily disables trace_catch_.			*/
	then do;
	     call com_err_ (code, ME, "There seems to be an incomplete invocation of trace,
watch, or trace_meters still on the stack.  Try the release command.");
	     return;
	end;
%page;
/* read the arguments */

	call cu_$arg_count (arg_count, code);
	if code ^= 0
	then do;
	     call com_err_ (code, ME);
	     go to RETURN;
	end;

ARG_READING_LOOP:
	do arg_idx = 1 to arg_count;
	     call cu_$arg_ptr (arg_idx, arg_ptr, arg_length, code);
	     if code ^= 0
	     then do;
		call com_err_ (code, ME);
		go to RETURN;
	     end;

	     if arg = "-brief" | arg = "-bf"
	     then long_format = "0"b;
	     else if arg = "-long" | arg = "-lg"
	     then long_format = "1"b;
	     else if arg = "-reset" | arg = "-rs"
	     then do;
		reset = "1"b;
		report = "0"b;
	     end;
	     else if arg = "-report_reset" | arg = "-rr"
	     then do;
		reset = "1"b;
		report = "1"b;
	     end;
	     else if arg = "-output_file" | arg = "-of"
	     then do;
		control_arg = arg;

		arg_idx = arg_idx + 1;
		call cu_$arg_ptr (arg_idx, arg_ptr, arg_length, code);
		if code ^= 0
		then do;
BAD_FILE_PATH_ARG:
		     call com_err_ (code, ME, " A pathname must follow ^a.", control_arg);
		     go to RETURN;
		end;

		if arg = ""
		then go to BAD_FILE_PATH_ARG;

		if substr (arg, 1, 1) = "-"
		then go to BAD_FILE_PATH_ARG;

		call expand_pathname_$add_suffix (arg, "tmt", output_file.dir_path, output_file.entry_name, code);
		if code ^= 0
		then do;
		     call com_err_ (code, ME, " The argument in error is ""^a"".", arg);
		     go to RETURN;
		end;
	     end;
	     else if arg = "-percent" | arg = "-pct" | arg = "-%"
	     then do;
		minimum.kind = "local";
		go to GET_PERCENTAGE;
	     end;
	     else if arg = "-global_percent" | arg = "-gpct" | arg = "-g%"
	     then do;
		minimum.kind = "global";
GET_PERCENTAGE:
		control_arg = arg;

		arg_idx = arg_idx + 1;
		call cu_$arg_ptr (arg_idx, arg_ptr, arg_length, code);
		if code ^= 0
		then do;
BAD_PERCENTAGE_ARG:
		     call com_err_ (code, ME, " A number between 0 and 100 must follow ^a.", control_arg);
		     go to RETURN;
		end;

		if arg = ""
		then go to BAD_PERCENTAGE_ARG;

		if substr (arg, 1, 1) = "-"
		then go to BAD_PERCENTAGE_ARG;

		numeric_arg = cv_dec_check_ (arg, code);
		if code ^= 0
		then do;
		     call com_err_ (ZERO, ME, " Decimal conversion error at ""^a"" in ""^a"".", substr (arg, code, 1),
			arg);
		     code = 0;
		     go to BAD_PERCENTAGE_ARG;
		end;

		if numeric_arg < 0 | numeric_arg > 100
		then go to BAD_PERCENTAGE_ARG;

		minimum.percent = numeric_arg;
	     end;
	     else do;
		call com_err_ (error_table_$badopt, ME, """^a""", arg);
		go to RETURN;
	     end;
	end ARG_READING_LOOP;
%page;
/* Open the output file if necessary. */

	if output_file.entry_name = ""
	then output_file.iocb_ptr = iox_$user_output;
	else
OPEN_OUTPUT_FILE:
	     do;
	     call iox_$attach_name (unique_chars_ (""b), output_file.iocb_ptr,
		"vfile_ " || rtrim (output_file.dir_path) || ">" || rtrim (output_file.entry_name),
		codeptr (trace_meters), code);
	     if code ^= 0
	     then do;
		call com_err_ (code, ME, " Coult not attach the file ""^a>^a"".", output_file.dir_path,
		     output_file.entry_name);
		go to RETURN;
	     end;

	     call iox_$open (output_file.iocb_ptr, Stream_output, "0"b, code);
	     if code ^= 0
	     then do;
		call com_err_ (code, ME, " Could not open the file ""^a>^a"".", output_file.dir_path,
		     output_file.entry_name);
		go to RETURN;
	     end;
	end OPEN_OUTPUT_FILE;


/* Do some consistency checks. */

	metered = trace_$metered () - trace_$removed ();

	if metered.real_time < 0 | metered.vcpu_time > metered.real_time | metered.page_faults < 0
	then call com_err_ (ZERO, ME,
		" The meters are inconsistent.  Metered real time is ^d, vcpu time is ^d, and page faults are ^d.",
		metered.real_time, metered.vcpu_time, metered.page_faults);


/* Calculate the percentage coefficients. */

	if metered.vcpu_time = 0
	then percentage_coefficient.vcpu_time = 0;
	else percentage_coefficient.vcpu_time = 1e2 / float (metered.vcpu_time, 27);

	if metered.page_faults = 0
	then percentage_coefficient.page_faults = 0;
	else percentage_coefficient.page_faults = 1e2 / float (metered.page_faults, 27);
%page;
/* Print the requested information. */

	totals = 0;
	tt_count = trace_$num_entrypoints ();

TOTAL_LOOP:
	do tt_idx = 0 by 0 to tt_count - 1;

	     segment_being_subtotaled.seg_num = baseno (trace_$entrypoint_ptr (tt_idx));
	     segment_being_subtotaled.dir_path = "?";
	     segment_being_subtotaled.entry_name = "?";

	     subtotals = 0;

SUB_TOTAL_LOOP:
	     do tt_idx = tt_idx to tt_count - 1
		while (baseno (trace_$entrypoint_ptr (tt_idx)) = segment_being_subtotaled.seg_num);

		counts = trace_$entrypoint_counts (tt_idx);
		local_meters = trace_$entrypoint_local_meters (tt_idx);
		global_meters = trace_$entrypoint_global_meters (tt_idx);

		if ^report
		then go to END_SUB_TOTAL_LOOP;

		if counts.calls = 0
		then go to END_SUB_TOTAL_LOOP;

		if minimum.kind = "local"
		then if float (local_meters.vcpu_time, 27) * percentage_coefficient.vcpu_time < minimum.percent
			& float (local_meters.page_faults, 27) * percentage_coefficient.page_faults
			< minimum.percent
		     then go to END_SUB_TOTAL_LOOP;

		if minimum.kind = "global"
		then if float (global_meters.vcpu_time, 27) * percentage_coefficient.vcpu_time < minimum.percent
			& float (global_meters.page_faults, 27) * percentage_coefficient.page_faults
			< minimum.percent
		     then go to END_SUB_TOTAL_LOOP;

/* Print column headers if necessary */

		if subtotals.line_count = 0
		then do;
		     if long_format
		     then do;
			call PRINT_METERS_HEADER ("G");
			call PRINT_METERS_HEADER ("L");
			call expand_pathname_ ((trace_$entrypoint_seg_path (tt_idx)),
			     segment_being_subtotaled.dir_path, segment_being_subtotaled.entry_name, code);
			if code ^= 0
			then segment_being_subtotaled.dir_path, segment_being_subtotaled.entry_name = "?";
			call ioa_$ioa_switch (output_file.iocb_ptr, " ^a>^a", segment_being_subtotaled.dir_path,
			     segment_being_subtotaled.entry_name);
		     end;

		     if ^long_format & totals.line_count = 0
		     then do;
			call PRINT_METERS_HEADER ("L");
			call ioa_$ioa_switch (output_file.iocb_ptr, " ENTRY POINT NAME");
		     end;
		end;


/* Print the stats for this entrypoint. */

		if long_format
		then call PRINT_METERS (global_meters);

		call PRINT_METERS (local_meters);

		call PRINT_STATS (local_meters.vcpu_time, counts.calls);

		call ioa_$ioa_switch (output_file.iocb_ptr, " ^a", trace_$entrypoint_name (tt_idx));

		subtotals.line_count = subtotals.line_count + 1;
		subtotals.calls = subtotals.calls + counts.calls;
		subtotals.meters = subtotals.meters + local_meters;

END_SUB_TOTAL_LOOP:
	     end SUB_TOTAL_LOOP;

	     if report & long_format & subtotals.line_count >= 1
	     then do;
		if subtotals.line_count >= 2
		then call PRINT_TOTAL_LINE (subtotals, "SUBTOTAL", segment_being_subtotaled.entry_name);

		call ioa_$ioa_switch (output_file.iocb_ptr, "");
	     end;

	     totals = totals + subtotals;
	end TOTAL_LOOP;


	if report
	then do;
	     if long_format
	     then call PRINT_METERS_HEADER (" ");
	     else call ioa_$ioa_switch (output_file.iocb_ptr, "");

	     call PRINT_METERS_HEADER ("L");

	     call ioa_$ioa_switch (output_file.iocb_ptr, "");

	     call date_time_ (clock (), date_time_string);

	     call PRINT_TOTAL_LINE (totals, "TOTAL", date_time_string);
	end;


	if reset
	then call trace_$reset_meters ();


RETURN:
	call TRACE_METERS_CLEANUP;

	return;
%page;
/* SUBROUTINES */


TRACE_METERS_CLEANUP:
     proc;
	if output_file.iocb_ptr ^= null () & output_file.iocb_ptr ^= iox_$user_output
	then do;
	     call iox_$close (output_file.iocb_ptr, (0));
	     call iox_$detach_iocb (output_file.iocb_ptr, (0));
	     output_file.iocb_ptr = null ();
	end;

	if ^trace_$transaction_end (transaction_id)	/* Re-enable trace_catch_. */
	then call com_err_ (ZERO, ME, "The trace_meters command ended abnormally.");
     end TRACE_METERS_CLEANUP;








PRINT_TOTAL_LINE:
     proc (totals_i, comment_1_i, comment_2_i);
	if long_format
	then call PRINT_METERS_HEADER (" ");

	call PRINT_METERS (totals_i.meters);

	call PRINT_STATS (totals_i.meters.vcpu_time, totals_i.calls);

	call ioa_$ioa_switch (output_file.iocb_ptr, " ^a ^a", comment_1_i, comment_2_i);

dcl  1 totals_i			aligned parm like totals;
dcl  comment_1_i			char (*) parm;
dcl  comment_2_i			char (*) parm;
     end PRINT_TOTAL_LINE;






PRINT_METERS_HEADER:
     proc (leading_letter_i);
	if leading_letter_i = " "
	then call ioa_$ioa_switch_nnl (output_file.iocb_ptr, "^24x");
	else call ioa_$ioa_switch_nnl (output_file.iocb_ptr, "    ^aREAL    ^aVCPU   ^aPF^[ LVCPU/CALL LVCPU%  CALLS^]",
		leading_letter_i, leading_letter_i, leading_letter_i, leading_letter_i = "L");

dcl  leading_letter_i		char parm;
     end PRINT_METERS_HEADER;







PRINT_METERS:
     proc (meters_i);
	if meters_i.real_time = 0 & meters_i.vcpu_time = 0 & meters_i.page_faults = 0
	then call PRINT_METERS_HEADER (" ");
	else call ioa_$ioa_switch_nnl (output_file.iocb_ptr, "^9.3f ^8.3f ^5d", float (meters_i.real_time, 27) * 1e-6,
		float (meters_i.vcpu_time, 27) * 1e-6, meters_i.page_faults);

dcl  1 meters_i			aligned parm like local_meters;
     end PRINT_METERS;




PRINT_STATS:
     proc (vcpu_time_i, calls_i);
	if vcpu_time_i = 0 | calls_i = 0
	then call ioa_$ioa_switch_nnl (output_file.iocb_ptr, " ^10x ^5x ^7d", calls_i);
	else call ioa_$ioa_switch_nnl (output_file.iocb_ptr, " ^10.6f ^5.1f ^7d",
		(float (vcpu_time_i, 27) / float (calls_i, 27)) * 1e-6,
		float (vcpu_time_i, 27) * percentage_coefficient.vcpu_time, calls_i);

dcl  vcpu_time_i			fixed bin (53) parm;
dcl  calls_i			fixed bin (53) parm;
     end PRINT_STATS;
%page;
/* START OF DECLARATIONS */
/* format: ^insnl,^delnl */


/* Parameters */


/* Automatic */

dcl  arg_count			fixed bin;
dcl  arg_idx			fixed bin;
dcl  arg_length			fixed bin (21);
dcl  arg_ptr			ptr init (null ());
dcl  code				fixed bin (35) init (0);
dcl  control_arg			char (32);
dcl  date_time_string		char (24);
dcl  in_trace_saved			bit (36) aligned;
dcl  long_format			bit aligned init ("1"b);
dcl  numeric_arg			fixed bin (35);
dcl  report			bit aligned init ("1"b);
dcl  reset			bit aligned init ("0"b);
dcl  transaction_id			fixed bin (71);
dcl  tt_count			fixed bin;
dcl  tt_idx			fixed bin;

dcl  1 local_meters			like meters aligned;
dcl  1 global_meters		like meters aligned;
dcl  1 metered			like meters aligned;

dcl  1 minimum			aligned,
       2 kind			char (8) init (""),
       2 percent			float bin (27) init (0);

dcl  1 output_file			aligned,
       2 iocb_ptr			ptr init (null ()),
       2 dir_path			char (168) unal init (""),
       2 entry_name			char (32) unal init ("");

dcl  1 percentage_coefficient		aligned,
       2 vcpu_time			float bin (27),
       2 page_faults		float bin (27);

dcl  1 totals			aligned,
       2 line_count			fixed bin,
       2 calls			fixed bin (53),
       2 meters			like meters;

dcl  1 subtotals			aligned like totals;

dcl  1 segment_being_subtotaled	aligned,
       2 seg_num			bit (18),
       2 dir_path			char (168) unal,
       2 entry_name			char (32) unal;


/* Static */

dcl  ME				char (32) static options (constant) init ("trace_meters");
dcl  ZERO				fixed bin (35) static options (constant) init (0);


/* Conditions */

dcl  cleanup			condition;


/* Based */

dcl  arg				char (arg_length) based (arg_ptr);


/* External Variables */

dcl  error_table_$badopt		fixed bin (35) ext;
dcl  iox_$user_output		ptr ext;


/* External Entries */

dcl  com_err_			entry () options (variable);
dcl  cu_$arg_count			entry (fixed bin, fixed bin (35));
dcl  cu_$arg_ptr			entry (fixed bin, ptr, fixed bin (21), fixed bin (35));
dcl  cv_dec_check_			entry (char (*), fixed bin (35)) returns (fixed bin (35));
dcl  date_time_			entry (fixed bin (71), char (*));
dcl  expand_pathname_		entry (char (*), char (*), char (*), fixed bin (35));
dcl  expand_pathname_$add_suffix	entry (char (*), char (*), char (*), char (*), fixed bin (35));
dcl  ioa_$ioa_switch		entry () options (variable);
dcl  ioa_$ioa_switch_nnl		entry () options (variable);
dcl  iox_$attach_name		entry (char (*), ptr, char (*), ptr, fixed bin (35));
dcl  iox_$close			entry (ptr, fixed bin (35));
dcl  iox_$detach_iocb		entry (ptr, fixed bin (35));
dcl  iox_$open			entry (ptr, fixed bin, bit (1) aligned, fixed bin (35));
dcl  unique_chars_			entry (bit (*)) returns (char (15));


/* format: insnl,delnl */
/* END OF DECLARATIONS */
%page;
/* START OF INCLUDE FILES */


%page;
%include iox_modes;
%page;
%include trace_interface;

     end trace_meters;
